
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uq_off:     file format elf32-littlearm


Disassembly of section .init:

000144fc <.init>:
   144fc:	push	{r3, lr}
   14500:	bl	150c8 <_start@@Base+0x3c>
   14504:	pop	{r3, pc}

Disassembly of section .plt:

00014508 <raise@plt-0x14>:
   14508:	push	{lr}		; (str lr, [sp, #-4]!)
   1450c:	ldr	lr, [pc, #4]	; 14518 <raise@plt-0x4>
   14510:	add	lr, pc, lr
   14514:	ldr	pc, [lr, #8]!
   14518:	andeq	r2, r4, r8, ror #21

0001451c <raise@plt>:
   1451c:	add	ip, pc, #0, 12
   14520:	add	ip, ip, #270336	; 0x42000
   14524:	ldr	pc, [ip, #2792]!	; 0xae8

00014528 <strcmp@plt>:
   14528:	add	ip, pc, #0, 12
   1452c:	add	ip, ip, #270336	; 0x42000
   14530:	ldr	pc, [ip, #2784]!	; 0xae0

00014534 <memmove@plt>:
   14534:	add	ip, pc, #0, 12
   14538:	add	ip, ip, #270336	; 0x42000
   1453c:	ldr	pc, [ip, #2776]!	; 0xad8

00014540 <free@plt>:
   14540:	add	ip, pc, #0, 12
   14544:	add	ip, ip, #270336	; 0x42000
   14548:	ldr	pc, [ip, #2768]!	; 0xad0

0001454c <memcpy@plt>:
   1454c:	add	ip, pc, #0, 12
   14550:	add	ip, ip, #270336	; 0x42000
   14554:	ldr	pc, [ip, #2760]!	; 0xac8

00014558 <memcmp@plt>:
   14558:	add	ip, pc, #0, 12
   1455c:	add	ip, ip, #270336	; 0x42000
   14560:	ldr	pc, [ip, #2752]!	; 0xac0

00014564 <realloc@plt>:
   14564:	add	ip, pc, #0, 12
   14568:	add	ip, ip, #270336	; 0x42000
   1456c:	ldr	pc, [ip, #2744]!	; 0xab8

00014570 <fwrite@plt>:
   14570:	add	ip, pc, #0, 12
   14574:	add	ip, ip, #270336	; 0x42000
   14578:	ldr	pc, [ip, #2736]!	; 0xab0

0001457c <malloc@plt>:
   1457c:	add	ip, pc, #0, 12
   14580:	add	ip, ip, #270336	; 0x42000
   14584:	ldr	pc, [ip, #2728]!	; 0xaa8

00014588 <__libc_start_main@plt>:
   14588:	add	ip, pc, #0, 12
   1458c:	add	ip, ip, #270336	; 0x42000
   14590:	ldr	pc, [ip, #2720]!	; 0xaa0

00014594 <__gmon_start__@plt>:
   14594:	add	ip, pc, #0, 12
   14598:	add	ip, ip, #270336	; 0x42000
   1459c:	ldr	pc, [ip, #2712]!	; 0xa98

000145a0 <strlen@plt>:
   145a0:	add	ip, pc, #0, 12
   145a4:	add	ip, ip, #270336	; 0x42000
   145a8:	ldr	pc, [ip, #2704]!	; 0xa90

000145ac <fprintf@plt>:
   145ac:	add	ip, pc, #0, 12
   145b0:	add	ip, ip, #270336	; 0x42000
   145b4:	ldr	pc, [ip, #2696]!	; 0xa88

000145b8 <posix_memalign@plt>:
   145b8:	add	ip, pc, #0, 12
   145bc:	add	ip, ip, #270336	; 0x42000
   145c0:	ldr	pc, [ip, #2688]!	; 0xa80

000145c4 <memset@plt>:
   145c4:	add	ip, pc, #0, 12
   145c8:	add	ip, ip, #270336	; 0x42000
   145cc:	ldr	pc, [ip, #2680]!	; 0xa78

000145d0 <strncpy@plt>:
   145d0:	add	ip, pc, #0, 12
   145d4:	add	ip, ip, #270336	; 0x42000
   145d8:	ldr	pc, [ip, #2672]!	; 0xa70

000145dc <strtod@plt>:
   145dc:	add	ip, pc, #0, 12
   145e0:	add	ip, ip, #270336	; 0x42000
   145e4:	ldr	pc, [ip, #2664]!	; 0xa68

000145e8 <memchr@plt>:
   145e8:	add	ip, pc, #0, 12
   145ec:	add	ip, ip, #270336	; 0x42000
   145f0:	ldr	pc, [ip, #2656]!	; 0xa60

000145f4 <fputc@plt>:
   145f4:	add	ip, pc, #0, 12
   145f8:	add	ip, ip, #270336	; 0x42000
   145fc:	ldr	pc, [ip, #2648]!	; 0xa58

00014600 <sprintf@plt>:
   14600:	add	ip, pc, #0, 12
   14604:	add	ip, ip, #270336	; 0x42000
   14608:	ldr	pc, [ip, #2640]!	; 0xa50

0001460c <abort@plt>:
   1460c:	add	ip, pc, #0, 12
   14610:	add	ip, ip, #270336	; 0x42000
   14614:	ldr	pc, [ip, #2632]!	; 0xa48

00014618 <__assert_fail@plt>:
   14618:	add	ip, pc, #0, 12
   1461c:	add	ip, ip, #270336	; 0x42000
   14620:	ldr	pc, [ip, #2624]!	; 0xa40

Disassembly of section .text:

00014628 <main@@Base-0x310>:
   14628:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1462c:	sub	sp, sp, #36	; 0x24
   14630:	mov	r7, #0
   14634:	ldr	r8, [sp, #72]	; 0x48
   14638:	mov	r6, #0
   1463c:	cmp	r1, r2
   14640:	strd	r6, [r8]
   14644:	mov	r5, r2
   14648:	mov	fp, r3
   1464c:	mov	r7, r0
   14650:	moveq	r4, r2
   14654:	beq	14678 <__assert_fail@plt+0x60>
   14658:	ldrb	r3, [r1]
   1465c:	mov	r4, r1
   14660:	cmp	r3, #34	; 0x22
   14664:	addeq	r4, r1, #1
   14668:	beq	14678 <__assert_fail@plt+0x60>
   1466c:	mov	r3, #5
   14670:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   14674:	mov	r4, r0
   14678:	sub	r3, r5, r4
   1467c:	cmp	r3, #1
   14680:	ble	146a4 <__assert_fail@plt+0x8c>
   14684:	ldrb	r3, [r4]
   14688:	cmp	r3, #32
   1468c:	bhi	146b8 <__assert_fail@plt+0xa0>
   14690:	bne	146a4 <__assert_fail@plt+0x8c>
   14694:	ldrb	r3, [r4, #1]
   14698:	cmp	r3, #32
   1469c:	addhi	r4, r4, #1
   146a0:	bhi	146b8 <__assert_fail@plt+0xa0>
   146a4:	mov	r1, r4
   146a8:	mov	r2, r5
   146ac:	mov	r0, r7
   146b0:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   146b4:	mov	r4, r0
   146b8:	cmp	r5, r4
   146bc:	beq	1479c <__assert_fail@plt+0x184>
   146c0:	mov	r2, #0
   146c4:	mov	r3, #0
   146c8:	add	sl, sp, #20
   146cc:	strd	r2, [sp, #8]
   146d0:	mov	r9, fp
   146d4:	add	r3, sp, #24
   146d8:	str	r3, [sp]
   146dc:	str	sl, [sp, #4]
   146e0:	add	r3, sp, #16
   146e4:	ldr	r6, [r9]
   146e8:	mov	r2, r5
   146ec:	mov	r1, r4
   146f0:	mov	r0, r7
   146f4:	blx	r6
   146f8:	cmp	r5, r0
   146fc:	beq	1479c <__assert_fail@plt+0x184>
   14700:	cmp	r4, r0
   14704:	bne	14730 <__assert_fail@plt+0x118>
   14708:	ldr	r3, [r9, #4]!
   1470c:	cmp	r3, #0
   14710:	bne	146d4 <__assert_fail@plt+0xbc>
   14714:	mov	r2, r5
   14718:	mov	r1, r4
   1471c:	mov	r0, r7
   14720:	mov	r3, #23
   14724:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   14728:	mov	r5, r0
   1472c:	b	1479c <__assert_fail@plt+0x184>
   14730:	ldr	r3, [sp, #16]
   14734:	mov	r6, r0
   14738:	cmp	r3, #0
   1473c:	beq	14790 <__assert_fail@plt+0x178>
   14740:	mov	r3, #8
   14744:	mov	r2, r5
   14748:	mov	r1, r6
   1474c:	mov	r0, r7
   14750:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   14754:	cmp	r5, r0
   14758:	beq	1479c <__assert_fail@plt+0x184>
   1475c:	ldrd	r2, [r8]
   14760:	ldrd	r0, [sp, #8]
   14764:	ldr	ip, [sp, #20]
   14768:	adds	r0, r0, r2
   1476c:	adc	r1, r1, r3
   14770:	mov	r2, r0
   14774:	mov	r3, r1
   14778:	cmp	ip, #0
   1477c:	strd	r2, [r8]
   14780:	movne	r4, r6
   14784:	bne	146d0 <__assert_fail@plt+0xb8>
   14788:	mov	r5, r6
   1478c:	b	1479c <__assert_fail@plt+0x184>
   14790:	ldrd	r2, [sp, #24]
   14794:	strd	r2, [sp, #8]
   14798:	b	1475c <__assert_fail@plt+0x144>
   1479c:	mov	r0, r5
   147a0:	add	sp, sp, #36	; 0x24
   147a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147a8:	push	{r4, lr}
   147ac:	mov	r2, #308	; 0x134
   147b0:	ldr	r3, [pc, #8]	; 147c0 <__assert_fail@plt+0x1a8>
   147b4:	ldr	r1, [pc, #8]	; 147c4 <__assert_fail@plt+0x1ac>
   147b8:	ldr	r0, [pc, #8]	; 147c8 <__assert_fail@plt+0x1b0>
   147bc:	bl	14618 <__assert_fail@plt>
   147c0:	andeq	r4, r4, r4, lsr r7
   147c4:	andeq	r4, r4, r4, lsl #29
   147c8:	andeq	r4, r4, r4, asr #30
   147cc:	push	{r4, lr}
   147d0:	ldr	r3, [pc, #12]	; 147e4 <__assert_fail@plt+0x1cc>
   147d4:	ldr	r2, [pc, #12]	; 147e8 <__assert_fail@plt+0x1d0>
   147d8:	ldr	r1, [pc, #12]	; 147ec <__assert_fail@plt+0x1d4>
   147dc:	ldr	r0, [pc, #12]	; 147f0 <__assert_fail@plt+0x1d8>
   147e0:	bl	14618 <__assert_fail@plt>
   147e4:	andeq	r4, r4, r4, asr #14
   147e8:	andeq	r0, r0, r1, lsr #5
   147ec:	andeq	r4, r4, r4, lsl #29
   147f0:	andeq	r4, r4, r4, asr #30
   147f4:	push	{r4, lr}
   147f8:	ldr	r3, [pc, #12]	; 1480c <__assert_fail@plt+0x1f4>
   147fc:	ldr	r2, [pc, #12]	; 14810 <__assert_fail@plt+0x1f8>
   14800:	ldr	r1, [pc, #12]	; 14814 <__assert_fail@plt+0x1fc>
   14804:	ldr	r0, [pc, #12]	; 14818 <__assert_fail@plt+0x200>
   14808:	bl	14618 <__assert_fail@plt>
   1480c:	andeq	r4, r4, r0, asr r7
   14810:	andeq	r0, r0, r7, lsl #5
   14814:	andeq	r4, r4, r4, lsl #29
   14818:	andeq	r4, r4, r4, asr #30
   1481c:	push	{r4, lr}
   14820:	mov	r2, #892	; 0x37c
   14824:	ldr	r3, [pc, #8]	; 14834 <__assert_fail@plt+0x21c>
   14828:	ldr	r1, [pc, #8]	; 14838 <__assert_fail@plt+0x220>
   1482c:	ldr	r0, [pc, #8]	; 1483c <__assert_fail@plt+0x224>
   14830:	bl	14618 <__assert_fail@plt>
   14834:	andeq	r4, r4, ip, asr r7
   14838:	andeq	r4, r4, r4, lsl #29
   1483c:	andeq	r4, r4, ip, asr #29
   14840:	push	{r4, lr}
   14844:	ldr	r3, [pc, #12]	; 14858 <__assert_fail@plt+0x240>
   14848:	ldr	r2, [pc, #12]	; 1485c <__assert_fail@plt+0x244>
   1484c:	ldr	r1, [pc, #12]	; 14860 <__assert_fail@plt+0x248>
   14850:	ldr	r0, [pc, #12]	; 14864 <__assert_fail@plt+0x24c>
   14854:	bl	14618 <__assert_fail@plt>
   14858:	andeq	r4, r4, r0, ror r7
   1485c:	andeq	r0, r0, lr, lsl r2
   14860:	andeq	r4, r4, r4, lsl #29
   14864:	andeq	r4, r4, r8, ror #29
   14868:	push	{r4, lr}
   1486c:	ldr	r3, [pc, #12]	; 14880 <__assert_fail@plt+0x268>
   14870:	ldr	r2, [pc, #12]	; 14884 <__assert_fail@plt+0x26c>
   14874:	ldr	r1, [pc, #12]	; 14888 <__assert_fail@plt+0x270>
   14878:	ldr	r0, [pc, #12]	; 1488c <__assert_fail@plt+0x274>
   1487c:	bl	14618 <__assert_fail@plt>
   14880:	muleq	r4, r0, r7
   14884:	andeq	r0, r0, r6, asr #7
   14888:	andeq	r4, r4, r4, lsl #29
   1488c:	andeq	r4, r4, r4, lsl #30
   14890:	push	{r4, lr}
   14894:	ldr	r3, [pc, #12]	; 148a8 <__assert_fail@plt+0x290>
   14898:	ldr	r2, [pc, #12]	; 148ac <__assert_fail@plt+0x294>
   1489c:	ldr	r1, [pc, #12]	; 148b0 <__assert_fail@plt+0x298>
   148a0:	ldr	r0, [pc, #12]	; 148b4 <__assert_fail@plt+0x29c>
   148a4:	bl	14618 <__assert_fail@plt>
   148a8:			; <UNDEFINED> instruction: 0x000447b0
   148ac:	andeq	r0, r0, r6, lsl #15
   148b0:	andeq	r4, r4, r4, lsl #29
   148b4:	andeq	r4, r4, r0, lsr pc
   148b8:	push	{r4, lr}
   148bc:	mov	r2, #260	; 0x104
   148c0:	ldr	r3, [pc, #8]	; 148d0 <__assert_fail@plt+0x2b8>
   148c4:	ldr	r1, [pc, #8]	; 148d4 <__assert_fail@plt+0x2bc>
   148c8:	ldr	r0, [pc, #8]	; 148d8 <__assert_fail@plt+0x2c0>
   148cc:	bl	14618 <__assert_fail@plt>
   148d0:			; <UNDEFINED> instruction: 0x000457b8
   148d4:	andeq	r6, r4, r0, asr r0
   148d8:	andeq	r6, r4, r8, lsr #1
   148dc:	push	{r4, lr}
   148e0:	mov	r2, #260	; 0x104
   148e4:	ldr	r3, [pc, #8]	; 148f4 <__assert_fail@plt+0x2dc>
   148e8:	ldr	r1, [pc, #8]	; 148f8 <__assert_fail@plt+0x2e0>
   148ec:	ldr	r0, [pc, #8]	; 148fc <__assert_fail@plt+0x2e4>
   148f0:	bl	14618 <__assert_fail@plt>
   148f4:	andeq	r6, r4, ip, asr #10
   148f8:	andeq	r6, r4, r0, asr r0
   148fc:	andeq	r6, r4, r8, lsr #1
   14900:	ldr	r3, [r0, #36]	; 0x24
   14904:	push	{r4, lr}
   14908:	cmp	r3, #0
   1490c:	moveq	r3, #1
   14910:	streq	r3, [r0, #36]	; 0x24
   14914:	ldr	r2, [pc, #12]	; 14928 <__assert_fail@plt+0x310>
   14918:	ldr	r3, [pc, #12]	; 1492c <__assert_fail@plt+0x314>
   1491c:	ldr	r1, [pc, #12]	; 14930 <__assert_fail@plt+0x318>
   14920:	ldr	r0, [pc, #12]	; 14934 <__assert_fail@plt+0x31c>
   14924:	bl	14618 <__assert_fail@plt>
   14928:	andeq	r0, r0, r4, lsl #8
   1492c:	andeq	r6, r4, r8, ror r5
   14930:	andeq	r6, r4, ip, ror #23
   14934:	andeq	r6, r4, r8, lsr ip

00014938 <main@@Base>:
   14938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1493c:	sub	sp, sp, #12
   14940:	bl	24c9c <edge_case_tests@@Base>
   14944:	ldr	r6, [pc, #1480]	; 14f14 <main@@Base+0x5dc>
   14948:	ldr	r7, [pc, #1480]	; 14f18 <main@@Base+0x5e0>
   1494c:	mov	r5, #0
   14950:	ldr	r8, [pc, #1476]	; 14f1c <main@@Base+0x5e4>
   14954:	ldr	sl, [pc, #1476]	; 14f20 <main@@Base+0x5e8>
   14958:	ldr	r9, [pc, #1476]	; 14f24 <main@@Base+0x5ec>
   1495c:	ldr	fp, [pc, #1476]	; 14f28 <main@@Base+0x5f0>
   14960:	mov	r4, r0
   14964:	bl	24e50 <error_case_tests@@Base>
   14968:	orr	r4, r4, r0
   1496c:	bl	25298 <union_vector_tests@@Base>
   14970:	orr	r4, r4, r0
   14974:	bl	24fa4 <base64_tests@@Base>
   14978:	orr	r4, r4, r0
   1497c:	bl	25134 <mixed_type_union_tests@@Base>
   14980:	ldr	r3, [pc, #1444]	; 14f2c <main@@Base+0x5f4>
   14984:	mov	r2, r7
   14988:	str	r3, [sp, #4]
   1498c:	str	r5, [sp]
   14990:	mov	r3, r5
   14994:	ldr	r1, [pc, #1428]	; 14f30 <main@@Base+0x5f8>
   14998:	orr	r4, r4, r0
   1499c:	mov	r0, r6
   149a0:	bl	179c4 <_start@@Base+0x2938>
   149a4:	mov	r1, #528	; 0x210
   149a8:	mov	r3, r5
   149ac:	mov	r2, r8
   149b0:	str	r1, [sp, #4]
   149b4:	str	r5, [sp]
   149b8:	ldr	r1, [pc, #1396]	; 14f34 <main@@Base+0x5fc>
   149bc:	orr	r4, r4, r0
   149c0:	mov	r0, r6
   149c4:	bl	179c4 <_start@@Base+0x2938>
   149c8:	ldr	r1, [pc, #1384]	; 14f38 <main@@Base+0x600>
   149cc:	mov	r3, r5
   149d0:	mov	r2, sl
   149d4:	str	r1, [sp, #4]
   149d8:	str	r5, [sp]
   149dc:	ldr	r1, [pc, #1368]	; 14f3c <main@@Base+0x604>
   149e0:	orr	r4, r4, r0
   149e4:	mov	r0, r6
   149e8:	bl	179c4 <_start@@Base+0x2938>
   149ec:	ldr	r1, [pc, #1356]	; 14f40 <main@@Base+0x608>
   149f0:	mov	r3, r5
   149f4:	mov	r2, r9
   149f8:	str	r1, [sp, #4]
   149fc:	str	r5, [sp]
   14a00:	ldr	r1, [pc, #1340]	; 14f44 <main@@Base+0x60c>
   14a04:	orr	r4, r4, r0
   14a08:	mov	r0, r6
   14a0c:	bl	179c4 <_start@@Base+0x2938>
   14a10:	ldr	r1, [pc, #1328]	; 14f48 <main@@Base+0x610>
   14a14:	mov	r3, r5
   14a18:	mov	r2, r9
   14a1c:	str	r1, [sp, #4]
   14a20:	str	r5, [sp]
   14a24:	ldr	r1, [pc, #1312]	; 14f4c <main@@Base+0x614>
   14a28:	orr	r4, r4, r0
   14a2c:	mov	r0, r6
   14a30:	bl	179c4 <_start@@Base+0x2938>
   14a34:	mov	r1, #540	; 0x21c
   14a38:	mov	r3, r5
   14a3c:	mov	r2, r8
   14a40:	str	r1, [sp, #4]
   14a44:	str	r5, [sp]
   14a48:	ldr	r1, [pc, #1280]	; 14f50 <main@@Base+0x618>
   14a4c:	orr	r4, r4, r0
   14a50:	mov	r0, r6
   14a54:	bl	179c4 <_start@@Base+0x2938>
   14a58:	ldr	r1, [pc, #1268]	; 14f54 <main@@Base+0x61c>
   14a5c:	mov	r3, r5
   14a60:	mov	r2, sl
   14a64:	str	r1, [sp, #4]
   14a68:	str	r5, [sp]
   14a6c:	ldr	r1, [pc, #1252]	; 14f58 <main@@Base+0x620>
   14a70:	orr	r4, r4, r0
   14a74:	mov	r0, r6
   14a78:	bl	179c4 <_start@@Base+0x2938>
   14a7c:	ldr	r1, [pc, #1240]	; 14f5c <main@@Base+0x624>
   14a80:	mov	r3, r5
   14a84:	mov	r2, r7
   14a88:	str	r1, [sp, #4]
   14a8c:	str	r5, [sp]
   14a90:	ldr	r1, [pc, #1224]	; 14f60 <main@@Base+0x628>
   14a94:	orr	r4, r4, r0
   14a98:	mov	r0, r6
   14a9c:	bl	179c4 <_start@@Base+0x2938>
   14aa0:	ldr	r1, [pc, #1212]	; 14f64 <main@@Base+0x62c>
   14aa4:	mov	r3, r5
   14aa8:	mov	r2, r7
   14aac:	str	r1, [sp, #4]
   14ab0:	str	r5, [sp]
   14ab4:	ldr	r1, [pc, #1196]	; 14f68 <main@@Base+0x630>
   14ab8:	orr	r4, r4, r0
   14abc:	mov	r0, r6
   14ac0:	bl	179c4 <_start@@Base+0x2938>
   14ac4:	ldr	r1, [pc, #1184]	; 14f6c <main@@Base+0x634>
   14ac8:	mov	r3, r5
   14acc:	mov	r2, r8
   14ad0:	str	r1, [sp, #4]
   14ad4:	str	r5, [sp]
   14ad8:	ldr	r1, [pc, #1168]	; 14f70 <main@@Base+0x638>
   14adc:	orr	r4, r4, r0
   14ae0:	mov	r0, r6
   14ae4:	bl	179c4 <_start@@Base+0x2938>
   14ae8:	mov	r1, #604	; 0x25c
   14aec:	mov	r2, sl
   14af0:	mov	r3, r5
   14af4:	str	r1, [sp, #4]
   14af8:	str	r5, [sp]
   14afc:	ldr	r1, [pc, #1136]	; 14f74 <main@@Base+0x63c>
   14b00:	orr	r4, r4, r0
   14b04:	mov	r0, r6
   14b08:	bl	179c4 <_start@@Base+0x2938>
   14b0c:	ldr	r2, [pc, #1124]	; 14f78 <main@@Base+0x640>
   14b10:	mov	r3, r5
   14b14:	str	r2, [sp, #4]
   14b18:	str	r5, [sp]
   14b1c:	ldr	r2, [pc, #1112]	; 14f7c <main@@Base+0x644>
   14b20:	ldr	r1, [pc, #1112]	; 14f80 <main@@Base+0x648>
   14b24:	orr	r4, r4, r0
   14b28:	mov	r0, r6
   14b2c:	bl	179c4 <_start@@Base+0x2938>
   14b30:	ldr	r1, [pc, #1100]	; 14f84 <main@@Base+0x64c>
   14b34:	mov	r2, r9
   14b38:	mov	r3, r5
   14b3c:	str	r1, [sp, #4]
   14b40:	str	r5, [sp]
   14b44:	ldr	r1, [pc, #1084]	; 14f88 <main@@Base+0x650>
   14b48:	orr	r4, r4, r0
   14b4c:	mov	r0, r6
   14b50:	bl	179c4 <_start@@Base+0x2938>
   14b54:	ldr	r2, [pc, #1072]	; 14f8c <main@@Base+0x654>
   14b58:	mov	r3, r5
   14b5c:	str	r2, [sp, #4]
   14b60:	str	r5, [sp]
   14b64:	ldr	r2, [pc, #1060]	; 14f90 <main@@Base+0x658>
   14b68:	ldr	r1, [pc, #1060]	; 14f94 <main@@Base+0x65c>
   14b6c:	orr	r4, r4, r0
   14b70:	mov	r0, r6
   14b74:	bl	179c4 <_start@@Base+0x2938>
   14b78:	mov	r2, #616	; 0x268
   14b7c:	mov	r3, r5
   14b80:	str	r2, [sp, #4]
   14b84:	str	r5, [sp]
   14b88:	ldr	r2, [pc, #1032]	; 14f98 <main@@Base+0x660>
   14b8c:	ldr	r1, [pc, #1032]	; 14f9c <main@@Base+0x664>
   14b90:	orr	r4, r4, r0
   14b94:	mov	r0, r6
   14b98:	bl	179c4 <_start@@Base+0x2938>
   14b9c:	ldr	r2, [pc, #1020]	; 14fa0 <main@@Base+0x668>
   14ba0:	mov	r3, r5
   14ba4:	str	r2, [sp, #4]
   14ba8:	str	r5, [sp]
   14bac:	ldr	r2, [pc, #1008]	; 14fa4 <main@@Base+0x66c>
   14bb0:	ldr	r1, [pc, #1008]	; 14fa8 <main@@Base+0x670>
   14bb4:	orr	r4, r4, r0
   14bb8:	mov	r0, r6
   14bbc:	bl	179c4 <_start@@Base+0x2938>
   14bc0:	ldr	r1, [pc, #996]	; 14fac <main@@Base+0x674>
   14bc4:	mov	r3, r5
   14bc8:	mov	r2, r8
   14bcc:	str	r1, [sp, #4]
   14bd0:	str	r5, [sp]
   14bd4:	ldr	r1, [pc, #980]	; 14fb0 <main@@Base+0x678>
   14bd8:	orr	r4, r4, r0
   14bdc:	mov	r0, r6
   14be0:	bl	179c4 <_start@@Base+0x2938>
   14be4:	ldr	r1, [pc, #968]	; 14fb4 <main@@Base+0x67c>
   14be8:	mov	r2, r8
   14bec:	mov	r3, r5
   14bf0:	str	r1, [sp, #4]
   14bf4:	str	r5, [sp]
   14bf8:	ldr	r1, [pc, #952]	; 14fb8 <main@@Base+0x680>
   14bfc:	ldr	r8, [pc, #952]	; 14fbc <main@@Base+0x684>
   14c00:	orr	r4, r4, r0
   14c04:	mov	r0, r6
   14c08:	bl	179c4 <_start@@Base+0x2938>
   14c0c:	mov	ip, #628	; 0x274
   14c10:	mov	r3, r5
   14c14:	mov	r2, fp
   14c18:	str	ip, [sp, #4]
   14c1c:	str	r5, [sp]
   14c20:	ldr	r1, [pc, #920]	; 14fc0 <main@@Base+0x688>
   14c24:	orr	r4, r4, r0
   14c28:	mov	r0, r6
   14c2c:	bl	179c4 <_start@@Base+0x2938>
   14c30:	ldr	ip, [pc, #908]	; 14fc4 <main@@Base+0x68c>
   14c34:	mov	r2, fp
   14c38:	str	ip, [sp, #4]
   14c3c:	mov	r3, r5
   14c40:	str	r5, [sp]
   14c44:	ldr	r1, [pc, #884]	; 14fc0 <main@@Base+0x688>
   14c48:	orr	r4, r4, r0
   14c4c:	mov	r0, r6
   14c50:	bl	179c4 <_start@@Base+0x2938>
   14c54:	ldr	r2, [pc, #876]	; 14fc8 <main@@Base+0x690>
   14c58:	mov	r3, r5
   14c5c:	str	r2, [sp, #4]
   14c60:	str	r5, [sp]
   14c64:	ldr	r2, [pc, #864]	; 14fcc <main@@Base+0x694>
   14c68:	ldr	r1, [pc, #864]	; 14fd0 <main@@Base+0x698>
   14c6c:	orr	r4, r4, r0
   14c70:	mov	r0, r6
   14c74:	bl	179c4 <_start@@Base+0x2938>
   14c78:	ldr	r2, [pc, #852]	; 14fd4 <main@@Base+0x69c>
   14c7c:	mov	r3, r5
   14c80:	str	r2, [sp, #4]
   14c84:	str	r5, [sp]
   14c88:	ldr	r2, [pc, #840]	; 14fd8 <main@@Base+0x6a0>
   14c8c:	ldr	r1, [pc, #840]	; 14fdc <main@@Base+0x6a4>
   14c90:	orr	r4, r4, r0
   14c94:	mov	r0, r6
   14c98:	bl	179c4 <_start@@Base+0x2938>
   14c9c:	ldr	r2, [pc, #828]	; 14fe0 <main@@Base+0x6a8>
   14ca0:	mov	r3, r5
   14ca4:	str	r2, [sp, #4]
   14ca8:	str	r5, [sp]
   14cac:	ldr	r2, [pc, #816]	; 14fe4 <main@@Base+0x6ac>
   14cb0:	ldr	r1, [pc, #816]	; 14fe8 <main@@Base+0x6b0>
   14cb4:	orr	r4, r4, r0
   14cb8:	mov	r0, r6
   14cbc:	bl	179c4 <_start@@Base+0x2938>
   14cc0:	ldr	r1, [pc, #804]	; 14fec <main@@Base+0x6b4>
   14cc4:	mov	r3, r5
   14cc8:	mov	r2, r7
   14ccc:	str	r1, [sp, #4]
   14cd0:	str	r5, [sp]
   14cd4:	ldr	r1, [pc, #788]	; 14ff0 <main@@Base+0x6b8>
   14cd8:	orr	r4, r4, r0
   14cdc:	mov	r0, r6
   14ce0:	bl	179c4 <_start@@Base+0x2938>
   14ce4:	ldr	r1, [pc, #776]	; 14ff4 <main@@Base+0x6bc>
   14ce8:	mov	r3, r5
   14cec:	mov	r2, r7
   14cf0:	str	r1, [sp, #4]
   14cf4:	str	r5, [sp]
   14cf8:	ldr	r1, [pc, #760]	; 14ff8 <main@@Base+0x6c0>
   14cfc:	orr	r4, r4, r0
   14d00:	mov	r0, r6
   14d04:	bl	179c4 <_start@@Base+0x2938>
   14d08:	mov	r2, #716	; 0x2cc
   14d0c:	mov	r3, r5
   14d10:	str	r2, [sp, #4]
   14d14:	str	r5, [sp]
   14d18:	ldr	r2, [pc, #732]	; 14ffc <main@@Base+0x6c4>
   14d1c:	ldr	r1, [pc, #732]	; 15000 <main@@Base+0x6c8>
   14d20:	orr	r4, r4, r0
   14d24:	mov	r0, r6
   14d28:	bl	179c4 <_start@@Base+0x2938>
   14d2c:	ldr	r2, [pc, #720]	; 15004 <main@@Base+0x6cc>
   14d30:	mov	r3, r5
   14d34:	str	r2, [sp, #4]
   14d38:	str	r5, [sp]
   14d3c:	ldr	r2, [pc, #708]	; 15008 <main@@Base+0x6d0>
   14d40:	ldr	r1, [pc, #708]	; 1500c <main@@Base+0x6d4>
   14d44:	orr	r4, r4, r0
   14d48:	mov	r0, r6
   14d4c:	bl	179c4 <_start@@Base+0x2938>
   14d50:	ldr	r2, [pc, #696]	; 15010 <main@@Base+0x6d8>
   14d54:	mov	r3, r5
   14d58:	str	r2, [sp, #4]
   14d5c:	str	r5, [sp]
   14d60:	ldr	r2, [pc, #684]	; 15014 <main@@Base+0x6dc>
   14d64:	ldr	r1, [pc, #684]	; 15018 <main@@Base+0x6e0>
   14d68:	orr	r4, r4, r0
   14d6c:	mov	r0, r6
   14d70:	bl	179c4 <_start@@Base+0x2938>
   14d74:	ldr	r1, [pc, #672]	; 1501c <main@@Base+0x6e4>
   14d78:	mov	r3, r5
   14d7c:	mov	r2, r8
   14d80:	str	r1, [sp, #4]
   14d84:	str	r5, [sp]
   14d88:	ldr	r1, [pc, #656]	; 15020 <main@@Base+0x6e8>
   14d8c:	orr	r4, r4, r0
   14d90:	mov	r0, r6
   14d94:	bl	179c4 <_start@@Base+0x2938>
   14d98:	ldr	r1, [pc, #644]	; 15024 <main@@Base+0x6ec>
   14d9c:	mov	r2, r8
   14da0:	mov	r3, r5
   14da4:	str	r1, [sp, #4]
   14da8:	str	r5, [sp]
   14dac:	ldr	r1, [pc, #628]	; 15028 <main@@Base+0x6f0>
   14db0:	orr	r4, r4, r0
   14db4:	mov	r0, r6
   14db8:	bl	179c4 <_start@@Base+0x2938>
   14dbc:	ldr	r2, [pc, #616]	; 1502c <main@@Base+0x6f4>
   14dc0:	mov	r3, r5
   14dc4:	str	r2, [sp, #4]
   14dc8:	str	r5, [sp]
   14dcc:	ldr	r2, [pc, #604]	; 15030 <main@@Base+0x6f8>
   14dd0:	ldr	r1, [pc, #604]	; 15034 <main@@Base+0x6fc>
   14dd4:	orr	r4, r4, r0
   14dd8:	mov	r0, r6
   14ddc:	bl	179c4 <_start@@Base+0x2938>
   14de0:	ldr	r2, [pc, #592]	; 15038 <main@@Base+0x700>
   14de4:	mov	r3, r5
   14de8:	str	r2, [sp, #4]
   14dec:	str	r5, [sp]
   14df0:	ldr	r2, [pc, #580]	; 1503c <main@@Base+0x704>
   14df4:	ldr	r1, [pc, #580]	; 15040 <main@@Base+0x708>
   14df8:	orr	r4, r4, r0
   14dfc:	mov	r0, r6
   14e00:	bl	179c4 <_start@@Base+0x2938>
   14e04:	mov	r2, #776	; 0x308
   14e08:	mov	r3, r5
   14e0c:	str	r2, [sp, #4]
   14e10:	str	r5, [sp]
   14e14:	ldr	r2, [pc, #552]	; 15044 <main@@Base+0x70c>
   14e18:	ldr	r1, [pc, #552]	; 15048 <main@@Base+0x710>
   14e1c:	orr	r4, r4, r0
   14e20:	mov	r0, r6
   14e24:	bl	179c4 <_start@@Base+0x2938>
   14e28:	ldr	r1, [pc, #540]	; 1504c <main@@Base+0x714>
   14e2c:	mov	r2, r7
   14e30:	mov	r3, r5
   14e34:	str	r1, [sp, #4]
   14e38:	str	r5, [sp]
   14e3c:	ldr	r1, [pc, #524]	; 15050 <main@@Base+0x718>
   14e40:	orr	r4, r4, r0
   14e44:	mov	r0, r6
   14e48:	bl	179c4 <_start@@Base+0x2938>
   14e4c:	ldr	r2, [pc, #512]	; 15054 <main@@Base+0x71c>
   14e50:	mov	r3, r5
   14e54:	str	r2, [sp, #4]
   14e58:	str	r5, [sp]
   14e5c:	ldr	r2, [pc, #500]	; 15058 <main@@Base+0x720>
   14e60:	ldr	r1, [pc, #500]	; 1505c <main@@Base+0x724>
   14e64:	orr	r4, r4, r0
   14e68:	mov	r0, r6
   14e6c:	bl	179c4 <_start@@Base+0x2938>
   14e70:	ldr	r2, [pc, #488]	; 15060 <main@@Base+0x728>
   14e74:	mov	r3, r5
   14e78:	str	r2, [sp, #4]
   14e7c:	str	r5, [sp]
   14e80:	ldr	r2, [pc, #476]	; 15064 <main@@Base+0x72c>
   14e84:	ldr	r1, [pc, #476]	; 15068 <main@@Base+0x730>
   14e88:	orr	r4, r4, r0
   14e8c:	mov	r0, r6
   14e90:	bl	179c4 <_start@@Base+0x2938>
   14e94:	mov	r2, #796	; 0x31c
   14e98:	mov	r3, r5
   14e9c:	str	r2, [sp, #4]
   14ea0:	str	r5, [sp]
   14ea4:	ldr	r2, [pc, #448]	; 1506c <main@@Base+0x734>
   14ea8:	ldr	r1, [pc, #448]	; 15070 <main@@Base+0x738>
   14eac:	orr	r4, r4, r0
   14eb0:	mov	r0, r6
   14eb4:	bl	179c4 <_start@@Base+0x2938>
   14eb8:	ldr	r2, [pc, #436]	; 15074 <main@@Base+0x73c>
   14ebc:	mov	r3, r5
   14ec0:	str	r2, [sp, #4]
   14ec4:	str	r5, [sp]
   14ec8:	ldr	r2, [pc, #424]	; 15078 <main@@Base+0x740>
   14ecc:	ldr	r1, [pc, #424]	; 1507c <main@@Base+0x744>
   14ed0:	orr	r4, r4, r0
   14ed4:	mov	r0, r6
   14ed8:	bl	179c4 <_start@@Base+0x2938>
   14edc:	ldr	r2, [pc, #412]	; 15080 <main@@Base+0x748>
   14ee0:	mov	r3, r5
   14ee4:	str	r2, [sp, #4]
   14ee8:	str	r5, [sp]
   14eec:	ldr	r2, [pc, #400]	; 15084 <main@@Base+0x74c>
   14ef0:	ldr	r1, [pc, #400]	; 15088 <main@@Base+0x750>
   14ef4:	orr	r4, r4, r0
   14ef8:	mov	r0, r6
   14efc:	bl	179c4 <_start@@Base+0x2938>
   14f00:	orrs	r3, r4, r0
   14f04:	mvnne	r0, #0
   14f08:	moveq	r0, r5
   14f0c:	add	sp, sp, #12
   14f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f14:	andeq	r1, r4, r4, asr r6
   14f18:	andeq	r1, r4, r4, asr sp
   14f1c:	andeq	r3, r4, ip, lsr #14
   14f20:	andeq	r3, r4, r8, ror r7
   14f24:	andeq	r3, r4, r4, asr #15
   14f28:	andeq	r3, r4, r8, asr #21
   14f2c:	andeq	r0, r0, sp, lsl #4
   14f30:	andeq	r3, r4, r4, lsl r7
   14f34:	andeq	r3, r4, r0, asr r7
   14f38:	andeq	r0, r0, r3, lsl r2
   14f3c:	muleq	r4, ip, r7
   14f40:	andeq	r0, r0, r6, lsl r2
   14f44:	strdeq	r3, [r4], -r0
   14f48:	andeq	r0, r0, r9, lsl r2
   14f4c:	andeq	r3, r4, r4, lsr #16
   14f50:	andeq	r3, r4, r0, ror #16
   14f54:	andeq	r0, r0, pc, lsl r2
   14f58:	andeq	r3, r4, r8, lsl #17
   14f5c:	andeq	r0, r0, r3, lsr #4
   14f60:			; <UNDEFINED> instruction: 0x000438b4
   14f64:	andeq	r0, r0, r7, lsr #4
   14f68:	andeq	r1, r4, r8, ror #25
   14f6c:	andeq	r0, r0, r9, asr r2
   14f70:	ldrdeq	r3, [r4], -ip
   14f74:	andeq	r3, r4, r0, lsl #18
   14f78:	andeq	r0, r0, pc, asr r2
   14f7c:	andeq	r3, r4, r4, lsr #18
   14f80:	andeq	r3, r4, ip, asr #18
   14f84:	andeq	r0, r0, r2, ror #4
   14f88:	andeq	r3, r4, r0, ror r9
   14f8c:	andeq	r0, r0, r5, ror #4
   14f90:	muleq	r4, r4, r9
   14f94:			; <UNDEFINED> instruction: 0x000439b4
   14f98:	ldrdeq	r3, [r4], -r8
   14f9c:	strdeq	r3, [r4], -r8
   14fa0:	andeq	r0, r0, fp, ror #4
   14fa4:	andeq	r3, r4, ip, lsl sl
   14fa8:	andeq	r3, r4, ip, lsr sl
   14fac:	andeq	r0, r0, lr, ror #4
   14fb0:	andeq	r3, r4, r0, ror #20
   14fb4:	andeq	r0, r0, r1, ror r2
   14fb8:	andeq	r3, r4, ip, lsl #21
   14fbc:	andeq	r3, r4, r8, ror #29
   14fc0:	andeq	r3, r4, r4, ror #21
   14fc4:	andeq	r0, r0, r7, ror r2
   14fc8:	andeq	r0, r0, sl, ror r2
   14fcc:	andeq	r3, r4, r0, lsl fp
   14fd0:	andeq	r3, r4, r8, asr fp
   14fd4:	andeq	r0, r0, lr, ror r2
   14fd8:	andeq	r3, r4, ip, lsr #23
   14fdc:	strdeq	r3, [r4], -r8
   14fe0:	andeq	r0, r0, r2, lsl #5
   14fe4:	andeq	r3, r4, r0, asr ip
   14fe8:			; <UNDEFINED> instruction: 0x00043cb4
   14fec:	andeq	r0, r0, r6, lsl #5
   14ff0:	andeq	r3, r4, r4, lsr #26
   14ff4:	andeq	r0, r0, r9, lsl #5
   14ff8:	andeq	r3, r4, r0, asr sp
   14ffc:	andeq	r3, r4, r8, ror sp
   15000:	ldrdeq	r3, [r4], -r8
   15004:	ldrdeq	r0, [r0], -fp
   15008:	andeq	r3, r4, r8, asr #28
   1500c:	andeq	r3, r4, r8, ror lr
   15010:	ldrdeq	r0, [r0], -lr
   15014:			; <UNDEFINED> instruction: 0x00043eb8
   15018:	andeq	r3, r4, ip, asr #29
   1501c:	andeq	r0, r0, r2, ror #5
   15020:	andeq	r3, r4, ip, lsr #30
   15024:	andeq	r0, r0, lr, ror #5
   15028:	andeq	r3, r4, r4, ror pc
   1502c:	strdeq	r0, [r0], -lr
   15030:	andeq	r4, r4, r4, lsl r0
   15034:	andeq	r4, r4, r8, lsr r0
   15038:	andeq	r0, r0, r2, lsl #6
   1503c:	andeq	r4, r4, r0, rrx
   15040:	andeq	r4, r4, ip, lsl #1
   15044:	strheq	r4, [r4], -ip
   15048:	andeq	r4, r4, ip, lsr #2
   1504c:	andeq	r0, r0, sp, lsl #6
   15050:	andeq	r4, r4, r8, lsr #3
   15054:	andeq	r0, r0, r2, lsl r3
   15058:	andeq	r4, r4, r0, lsr #4
   1505c:	muleq	r4, r0, r2
   15060:	andeq	r0, r0, r7, lsl r3
   15064:	andeq	r4, r4, ip, lsl #6
   15068:	andeq	r4, r4, ip, lsl #7
   1506c:	andeq	r4, r4, r8, lsl r4
   15070:	andeq	r4, r4, r8, lsl #9
   15074:	andeq	r0, r0, r1, lsr #6
   15078:	andeq	r4, r4, r4, lsl #10
   1507c:	andeq	r4, r4, r4, lsl #11
   15080:	andeq	r0, r0, r6, lsr #6
   15084:	andeq	r4, r4, r0, lsl r6
   15088:	muleq	r4, r4, r6

0001508c <_start@@Base>:
   1508c:	mov	fp, #0
   15090:	mov	lr, #0
   15094:	pop	{r1}		; (ldr r1, [sp], #4)
   15098:	mov	r2, sp
   1509c:	push	{r2}		; (str r2, [sp, #-4]!)
   150a0:	push	{r0}		; (str r0, [sp, #-4]!)
   150a4:	ldr	ip, [pc, #16]	; 150bc <_start@@Base+0x30>
   150a8:	push	{ip}		; (str ip, [sp, #-4]!)
   150ac:	ldr	r0, [pc, #12]	; 150c0 <_start@@Base+0x34>
   150b0:	ldr	r3, [pc, #12]	; 150c4 <_start@@Base+0x38>
   150b4:	bl	14588 <__libc_start_main@plt>
   150b8:	bl	1460c <abort@plt>
   150bc:	andeq	r1, r4, r4, asr #12
   150c0:	andeq	r4, r1, r8, lsr r9
   150c4:	andeq	r1, r4, r4, ror #11
   150c8:	ldr	r3, [pc, #20]	; 150e4 <_start@@Base+0x58>
   150cc:	ldr	r2, [pc, #20]	; 150e8 <_start@@Base+0x5c>
   150d0:	add	r3, pc, r3
   150d4:	ldr	r2, [r3, r2]
   150d8:	cmp	r2, #0
   150dc:	bxeq	lr
   150e0:	b	14594 <__gmon_start__@plt>
   150e4:	andeq	r1, r4, r8, lsr #30
   150e8:	andeq	r0, r0, r4, rrx
   150ec:	ldr	r3, [pc, #28]	; 15110 <_start@@Base+0x84>
   150f0:	ldr	r0, [pc, #28]	; 15114 <_start@@Base+0x88>
   150f4:	sub	r3, r3, r0
   150f8:	cmp	r3, #6
   150fc:	bxls	lr
   15100:	ldr	r3, [pc, #16]	; 15118 <_start@@Base+0x8c>
   15104:	cmp	r3, #0
   15108:	bxeq	lr
   1510c:	bx	r3
   15110:			; <UNDEFINED> instruction: 0x000573b3
   15114:			; <UNDEFINED> instruction: 0x000573b0
   15118:	andeq	r0, r0, r0
   1511c:	ldr	r1, [pc, #36]	; 15148 <_start@@Base+0xbc>
   15120:	ldr	r0, [pc, #36]	; 1514c <_start@@Base+0xc0>
   15124:	sub	r1, r1, r0
   15128:	asr	r1, r1, #2
   1512c:	add	r1, r1, r1, lsr #31
   15130:	asrs	r1, r1, #1
   15134:	bxeq	lr
   15138:	ldr	r3, [pc, #16]	; 15150 <_start@@Base+0xc4>
   1513c:	cmp	r3, #0
   15140:	bxeq	lr
   15144:	bx	r3
   15148:			; <UNDEFINED> instruction: 0x000573b0
   1514c:			; <UNDEFINED> instruction: 0x000573b0
   15150:	andeq	r0, r0, r0
   15154:	push	{r4, lr}
   15158:	ldr	r4, [pc, #24]	; 15178 <_start@@Base+0xec>
   1515c:	ldrb	r3, [r4]
   15160:	cmp	r3, #0
   15164:	popne	{r4, pc}
   15168:	bl	150ec <_start@@Base+0x60>
   1516c:	mov	r3, #1
   15170:	strb	r3, [r4]
   15174:	pop	{r4, pc}
   15178:			; <UNDEFINED> instruction: 0x000573b8
   1517c:	ldr	r0, [pc, #40]	; 151ac <_start@@Base+0x120>
   15180:	ldr	r3, [r0]
   15184:	cmp	r3, #0
   15188:	bne	15190 <_start@@Base+0x104>
   1518c:	b	1511c <_start@@Base+0x90>
   15190:	ldr	r3, [pc, #24]	; 151b0 <_start@@Base+0x124>
   15194:	cmp	r3, #0
   15198:	beq	1518c <_start@@Base+0x100>
   1519c:	push	{r4, lr}
   151a0:	blx	r3
   151a4:	pop	{r4, lr}
   151a8:	b	1511c <_start@@Base+0x90>
   151ac:	andeq	r6, r5, r4, lsl pc
	...
   151b8:	sub	r1, r1, r0
   151bc:	cmp	r1, #8
   151c0:	push	{r4, r5, r6, r7}
   151c4:	bls	15260 <_start@@Base+0x1d4>
   151c8:	ldrb	r4, [r0, #7]
   151cc:	mov	r5, #0
   151d0:	ldrb	r6, [r0, #6]
   151d4:	lsr	r3, r6, #24
   151d8:	lsl	r2, r6, #8
   151dc:	orr	r4, r4, r2
   151e0:	orr	r5, r5, r3
   151e4:	ldrb	r6, [r0, #5]
   151e8:	lsr	r3, r6, #16
   151ec:	lsl	r2, r6, #16
   151f0:	orr	r4, r4, r2
   151f4:	orr	r5, r5, r3
   151f8:	ldrb	r6, [r0, #4]
   151fc:	lsr	r3, r6, #8
   15200:	lsl	r2, r6, #24
   15204:	orr	r4, r4, r2
   15208:	orr	r5, r5, r3
   1520c:	ldrb	r3, [r0, #3]
   15210:	mov	r2, #0
   15214:	orr	r4, r4, r2
   15218:	orr	r5, r5, r3
   1521c:	ldrb	r6, [r0, #2]
   15220:	mov	r2, #0
   15224:	orr	r4, r4, r2
   15228:	lsl	r3, r6, #8
   1522c:	orr	r5, r5, r3
   15230:	ldrb	r6, [r0, #1]
   15234:	mov	r2, #0
   15238:	orr	r2, r2, r4
   1523c:	lsl	r3, r6, #16
   15240:	orr	r3, r3, r5
   15244:	ldrb	r4, [r0]
   15248:	mov	r0, #0
   1524c:	orr	r0, r0, r2
   15250:	lsl	r1, r4, #24
   15254:	orr	r1, r1, r3
   15258:	pop	{r4, r5, r6, r7}
   1525c:	bx	lr
   15260:	sub	r1, r1, #1
   15264:	cmp	r1, #7
   15268:	ldrls	pc, [pc, r1, lsl #2]
   1526c:	b	152e4 <_start@@Base+0x258>
   15270:	muleq	r1, ip, r2
   15274:	andeq	r5, r1, r8, lsr #5
   15278:			; <UNDEFINED> instruction: 0x000152b4
   1527c:	andeq	r5, r1, r0, asr #5
   15280:	andeq	r5, r1, ip, asr #5
   15284:	ldrdeq	r5, [r1], -r8
   15288:	muleq	r1, r0, r2
   1528c:	andeq	r5, r1, r8, asr #3
   15290:	mov	r4, #0
   15294:	mov	r5, #0
   15298:	b	151d0 <_start@@Base+0x144>
   1529c:	mov	r2, #0
   152a0:	mov	r3, #0
   152a4:	b	15244 <_start@@Base+0x1b8>
   152a8:	mov	r4, #0
   152ac:	mov	r5, #0
   152b0:	b	15230 <_start@@Base+0x1a4>
   152b4:	mov	r4, #0
   152b8:	mov	r5, #0
   152bc:	b	1521c <_start@@Base+0x190>
   152c0:	mov	r4, #0
   152c4:	mov	r5, #0
   152c8:	b	1520c <_start@@Base+0x180>
   152cc:	mov	r4, #0
   152d0:	mov	r5, #0
   152d4:	b	151f8 <_start@@Base+0x16c>
   152d8:	mov	r4, #0
   152dc:	mov	r5, #0
   152e0:	b	151e4 <_start@@Base+0x158>
   152e4:	mov	r0, #0
   152e8:	mov	r1, #0
   152ec:	b	15258 <_start@@Base+0x1cc>
   152f0:	cmp	r0, #4
   152f4:	movhi	r0, #0
   152f8:	movls	r0, #1
   152fc:	bx	lr
   15300:	cmp	r0, #11
   15304:	bhi	15328 <_start@@Base+0x29c>
   15308:	cmp	r0, #8
   1530c:	bcs	15330 <_start@@Base+0x2a4>
   15310:	cmp	r0, #0
   15314:	beq	15330 <_start@@Base+0x2a4>
   15318:	cmp	r0, #2
   1531c:	beq	15330 <_start@@Base+0x2a4>
   15320:	mov	r0, #0
   15324:	bx	lr
   15328:	cmp	r0, #255	; 0xff
   1532c:	bne	15320 <_start@@Base+0x294>
   15330:	mov	r0, #1
   15334:	bx	lr
   15338:	bx	lr
   1533c:	mov	r0, #0
   15340:	bx	lr
   15344:	mov	r3, #4
   15348:	mov	r2, r3
   1534c:	mov	r1, #0
   15350:	b	2b284 <flatcc_verify_field@@Base>
   15354:	push	{r4, r5, r6, lr}
   15358:	sub	sp, sp, #8
   1535c:	ldr	r2, [pc, #104]	; 153cc <_start@@Base+0x340>
   15360:	mov	r3, #21
   15364:	str	r2, [sp, #4]
   15368:	str	r3, [sp]
   1536c:	mov	r2, #0
   15370:	ldr	r3, [pc, #88]	; 153d0 <_start@@Base+0x344>
   15374:	mov	r4, r0
   15378:	mov	r5, r1
   1537c:	bl	3f7a4 <flatcc_json_printer_table_field@@Base>
   15380:	ldr	r3, [pc, #76]	; 153d4 <_start@@Base+0x348>
   15384:	mov	r6, #22
   15388:	mov	r1, r5
   1538c:	mov	r0, r4
   15390:	str	r3, [sp, #4]
   15394:	str	r6, [sp]
   15398:	ldr	r3, [pc, #56]	; 153d8 <_start@@Base+0x34c>
   1539c:	mov	r2, #1
   153a0:	bl	3f7a4 <flatcc_json_printer_table_field@@Base>
   153a4:	ldr	r3, [pc, #48]	; 153dc <_start@@Base+0x350>
   153a8:	str	r6, [sp]
   153ac:	str	r3, [sp, #4]
   153b0:	mov	r1, r5
   153b4:	mov	r0, r4
   153b8:	ldr	r3, [pc, #32]	; 153e0 <_start@@Base+0x354>
   153bc:	mov	r2, #2
   153c0:	bl	3f7a4 <flatcc_json_printer_table_field@@Base>
   153c4:	add	sp, sp, #8
   153c8:	pop	{r4, r5, r6, pc}
   153cc:	ldrdeq	r5, [r1], -r8
   153d0:	andeq	r1, r4, r4, lsl #13
   153d4:	andeq	r5, r1, r4, ror r4
   153d8:	muleq	r4, ip, r6
   153dc:	andeq	r5, r1, r0, lsl r4
   153e0:			; <UNDEFINED> instruction: 0x000416b4
   153e4:	push	{lr}		; (str lr, [sp, #-4]!)
   153e8:	sub	sp, sp, #12
   153ec:	mov	r2, #0
   153f0:	mov	r3, #19
   153f4:	str	r3, [sp]
   153f8:	str	r2, [sp, #4]
   153fc:	ldr	r3, [pc, #8]	; 1540c <_start@@Base+0x380>
   15400:	bl	378a8 <flatcc_json_printer_int32_field@@Base>
   15404:	add	sp, sp, #12
   15408:	pop	{pc}		; (ldr pc, [sp], #4)
   1540c:	andeq	r1, r4, ip, asr #13
   15410:	push	{r4, r5, lr}
   15414:	mov	r4, #0
   15418:	sub	sp, sp, #20
   1541c:	mov	r5, #0
   15420:	mov	r3, #15
   15424:	strd	r4, [sp, #8]
   15428:	str	r3, [sp]
   1542c:	mov	r2, #0
   15430:	ldr	r3, [pc, #52]	; 1546c <_start@@Base+0x3e0>
   15434:	mov	r4, r0
   15438:	mov	r5, r1
   1543c:	bl	3797c <flatcc_json_printer_int64_field@@Base>
   15440:	mov	r2, #0
   15444:	mov	r3, #21
   15448:	str	r2, [sp, #4]
   1544c:	str	r3, [sp]
   15450:	mov	r1, r5
   15454:	mov	r0, r4
   15458:	ldr	r3, [pc, #16]	; 15470 <_start@@Base+0x3e4>
   1545c:	mov	r2, #1
   15460:	bl	37208 <flatcc_json_printer_uint32_field@@Base>
   15464:	add	sp, sp, #20
   15468:	pop	{r4, r5, pc}
   1546c:	andeq	r1, r4, r0, ror #13
   15470:	strdeq	r1, [r4], -r0
   15474:	push	{r4, r5, lr}
   15478:	mov	r4, #0
   1547c:	sub	sp, sp, #20
   15480:	mov	r5, #0
   15484:	mov	r3, #15
   15488:	strd	r4, [sp, #8]
   1548c:	str	r3, [sp]
   15490:	mov	r2, #0
   15494:	ldr	r3, [pc, #52]	; 154d0 <_start@@Base+0x444>
   15498:	mov	r4, r0
   1549c:	mov	r5, r1
   154a0:	bl	3797c <flatcc_json_printer_int64_field@@Base>
   154a4:	mov	r2, #0
   154a8:	mov	r3, #16
   154ac:	str	r2, [sp, #4]
   154b0:	str	r3, [sp]
   154b4:	mov	r1, r5
   154b8:	mov	r0, r4
   154bc:	ldr	r3, [pc, #16]	; 154d4 <_start@@Base+0x448>
   154c0:	mov	r2, #1
   154c4:	bl	37208 <flatcc_json_printer_uint32_field@@Base>
   154c8:	add	sp, sp, #20
   154cc:	pop	{r4, r5, pc}
   154d0:	andeq	r1, r4, r0, ror #13
   154d4:	andeq	r1, r4, r8, lsl #14
   154d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154dc:	mov	r2, #0
   154e0:	sub	sp, sp, #20
   154e4:	mov	fp, r2
   154e8:	mov	r7, #4
   154ec:	mov	sl, #9
   154f0:	mov	r4, r0
   154f4:	mov	r5, r1
   154f8:	str	r7, [sp]
   154fc:	ldr	r3, [pc, #224]	; 155e4 <_start@@Base+0x558>
   15500:	bl	365ec <flatcc_json_printer_string_field@@Base>
   15504:	mov	r8, #0
   15508:	mov	r9, #0
   1550c:	mov	r1, r5
   15510:	mov	r0, r4
   15514:	stm	sp, {sl, fp}
   15518:	ldr	r3, [pc, #200]	; 155e8 <_start@@Base+0x55c>
   1551c:	mov	r2, #1
   15520:	bl	37208 <flatcc_json_printer_uint32_field@@Base>
   15524:	mov	r6, #8
   15528:	mov	r1, r5
   1552c:	mov	r0, r4
   15530:	str	r7, [sp]
   15534:	ldr	r3, [pc, #176]	; 155ec <_start@@Base+0x560>
   15538:	mov	r2, #2
   1553c:	bl	365ec <flatcc_json_printer_string_field@@Base>
   15540:	mov	r1, r5
   15544:	mov	r0, r4
   15548:	strd	r8, [sp, #8]
   1554c:	str	r6, [sp]
   15550:	ldr	r3, [pc, #152]	; 155f0 <_start@@Base+0x564>
   15554:	mov	r2, #3
   15558:	bl	3797c <flatcc_json_printer_int64_field@@Base>
   1555c:	mov	r2, r7
   15560:	mov	r1, r5
   15564:	mov	r0, r4
   15568:	str	r7, [sp]
   1556c:	ldr	r3, [pc, #128]	; 155f4 <_start@@Base+0x568>
   15570:	bl	365ec <flatcc_json_printer_string_field@@Base>
   15574:	mov	r1, r5
   15578:	mov	r0, r4
   1557c:	strd	r8, [sp, #8]
   15580:	str	r6, [sp]
   15584:	ldr	r3, [pc, #108]	; 155f8 <_start@@Base+0x56c>
   15588:	mov	r2, #5
   1558c:	bl	3797c <flatcc_json_printer_int64_field@@Base>
   15590:	mov	r1, r5
   15594:	mov	r0, r4
   15598:	stm	sp, {sl, fp}
   1559c:	ldr	r3, [pc, #88]	; 155fc <_start@@Base+0x570>
   155a0:	mov	r2, #6
   155a4:	bl	37208 <flatcc_json_printer_uint32_field@@Base>
   155a8:	mov	r1, r5
   155ac:	mov	r0, r4
   155b0:	strd	r8, [sp, #8]
   155b4:	str	r6, [sp]
   155b8:	ldr	r3, [pc, #64]	; 15600 <_start@@Base+0x574>
   155bc:	mov	r2, #7
   155c0:	bl	3797c <flatcc_json_printer_int64_field@@Base>
   155c4:	stm	sp, {sl, fp}
   155c8:	mov	r2, r6
   155cc:	mov	r1, r5
   155d0:	mov	r0, r4
   155d4:	ldr	r3, [pc, #40]	; 15604 <_start@@Base+0x578>
   155d8:	bl	37208 <flatcc_json_printer_uint32_field@@Base>
   155dc:	add	sp, sp, #20
   155e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155e4:	andeq	r1, r4, ip, lsl r7
   155e8:	andeq	r1, r4, r4, lsr #14
   155ec:	andeq	r1, r4, r0, lsr r7
   155f0:	andeq	r1, r4, r8, lsr r7
   155f4:	andeq	r1, r4, r4, asr #14
   155f8:	andeq	r1, r4, ip, asr #14
   155fc:	andeq	r1, r4, r8, asr r7
   15600:	andeq	r1, r4, r4, ror #14
   15604:	andeq	r1, r4, r0, ror r7
   15608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1560c:	sub	sp, sp, #20
   15610:	ldr	r3, [pc, #1092]	; 15a5c <_start@@Base+0x9d0>
   15614:	mov	r6, #3
   15618:	str	r3, [sp, #4]
   1561c:	str	r6, [sp]
   15620:	ldr	r3, [pc, #1080]	; 15a60 <_start@@Base+0x9d4>
   15624:	mov	r2, #0
   15628:	mov	r4, r0
   1562c:	mov	r5, r1
   15630:	mov	r7, #4
   15634:	bl	402cc <flatcc_json_printer_struct_field@@Base>
   15638:	mov	r3, #150	; 0x96
   1563c:	mov	r1, r5
   15640:	mov	r0, r4
   15644:	str	r3, [sp, #4]
   15648:	str	r7, [sp]
   1564c:	ldr	r3, [pc, #1040]	; 15a64 <_start@@Base+0x9d8>
   15650:	mov	r2, #1
   15654:	bl	377d0 <flatcc_json_printer_int16_field@@Base>
   15658:	mov	r2, #2
   1565c:	mov	r3, #100	; 0x64
   15660:	mov	r1, r5
   15664:	stm	sp, {r2, r3}
   15668:	mov	r0, r4
   1566c:	ldr	r3, [pc, #1012]	; 15a68 <_start@@Base+0x9dc>
   15670:	bl	377d0 <flatcc_json_printer_int16_field@@Base>
   15674:	mov	sl, #9
   15678:	mov	r2, r6
   1567c:	mov	r1, r5
   15680:	mov	r0, r4
   15684:	str	r7, [sp]
   15688:	ldr	r3, [pc, #988]	; 15a6c <_start@@Base+0x9e0>
   1568c:	bl	365ec <flatcc_json_printer_string_field@@Base>
   15690:	mov	r1, r5
   15694:	mov	r0, r4
   15698:	str	sl, [sp]
   1569c:	ldr	r3, [pc, #972]	; 15a70 <_start@@Base+0x9e4>
   156a0:	mov	r2, #5
   156a4:	bl	3afd8 <flatcc_json_printer_uint8_vector_field@@Base>
   156a8:	mov	r8, #5
   156ac:	mov	fp, #8
   156b0:	ldr	r3, [pc, #956]	; 15a74 <_start@@Base+0x9e8>
   156b4:	mov	r1, r5
   156b8:	mov	r0, r4
   156bc:	str	r3, [sp, #8]
   156c0:	stm	sp, {r8, fp}
   156c4:	ldr	r3, [pc, #940]	; 15a78 <_start@@Base+0x9ec>
   156c8:	mov	r2, #6
   156cc:	bl	381c0 <flatcc_json_printer_int8_enum_field@@Base>
   156d0:	ldr	ip, [pc, #932]	; 15a7c <_start@@Base+0x9f0>
   156d4:	ldr	r3, [pc, #932]	; 15a80 <_start@@Base+0x9f4>
   156d8:	mov	r2, fp
   156dc:	mov	r1, r5
   156e0:	stmib	sp, {r3, ip}
   156e4:	mov	r0, r4
   156e8:	str	r7, [sp]
   156ec:	ldr	r3, [pc, #912]	; 15a84 <_start@@Base+0x9f8>
   156f0:	bl	3fa58 <flatcc_json_printer_union_field@@Base>
   156f4:	ldr	r3, [pc, #908]	; 15a88 <_start@@Base+0x9fc>
   156f8:	mov	r6, #17
   156fc:	mov	r2, sl
   15700:	mov	r1, r5
   15704:	mov	r0, r4
   15708:	str	r3, [sp, #8]
   1570c:	str	r7, [sp, #4]
   15710:	str	r8, [sp]
   15714:	ldr	r3, [pc, #880]	; 15a8c <_start@@Base+0xa00>
   15718:	bl	3eab0 <flatcc_json_printer_struct_vector_field@@Base>
   1571c:	mov	r1, r5
   15720:	mov	r0, r4
   15724:	str	r6, [sp]
   15728:	ldr	r3, [pc, #864]	; 15a90 <_start@@Base+0xa04>
   1572c:	mov	r2, #10
   15730:	bl	3eea0 <flatcc_json_printer_string_vector_field@@Base>
   15734:	ldr	r3, [pc, #856]	; 15a94 <_start@@Base+0xa08>
   15738:	mov	r1, r5
   1573c:	mov	r0, r4
   15740:	str	r3, [sp, #4]
   15744:	str	r6, [sp]
   15748:	ldr	r3, [pc, #840]	; 15a98 <_start@@Base+0xa0c>
   1574c:	mov	r2, #11
   15750:	bl	3f144 <flatcc_json_printer_table_vector_field@@Base>
   15754:	ldr	r3, [pc, #824]	; 15a94 <_start@@Base+0xa08>
   15758:	mov	r1, r5
   1575c:	str	r3, [sp, #4]
   15760:	mov	r0, r4
   15764:	str	r8, [sp]
   15768:	ldr	r3, [pc, #812]	; 15a9c <_start@@Base+0xa10>
   1576c:	mov	r2, #12
   15770:	bl	3f7a4 <flatcc_json_printer_table_field@@Base>
   15774:	ldr	r3, [pc, #792]	; 15a94 <_start@@Base+0xa08>
   15778:	mov	r9, #0
   1577c:	str	r3, [sp, #8]
   15780:	mov	r3, #20
   15784:	mov	r1, r5
   15788:	mov	r0, r4
   1578c:	str	r9, [sp, #4]
   15790:	str	r3, [sp]
   15794:	mov	r2, #13
   15798:	ldr	r3, [pc, #768]	; 15aa0 <_start@@Base+0xa14>
   1579c:	bl	40844 <flatcc_json_printer_table_as_nested_root@@Base>
   157a0:	ldr	r3, [pc, #764]	; 15aa4 <_start@@Base+0xa18>
   157a4:	str	sl, [sp]
   157a8:	mov	r1, r5
   157ac:	mov	r0, r4
   157b0:	str	r3, [sp, #4]
   157b4:	mov	r2, #14
   157b8:	ldr	r3, [pc, #744]	; 15aa8 <_start@@Base+0xa1c>
   157bc:	bl	3f7a4 <flatcc_json_printer_table_field@@Base>
   157c0:	mov	r3, #1
   157c4:	mov	sl, #16
   157c8:	mov	r1, r5
   157cc:	mov	r0, r4
   157d0:	str	r3, [sp, #4]
   157d4:	str	fp, [sp]
   157d8:	ldr	r3, [pc, #716]	; 15aac <_start@@Base+0xa20>
   157dc:	mov	r2, #15
   157e0:	bl	37a68 <flatcc_json_printer_bool_field@@Base>
   157e4:	str	r9, [sp, #4]
   157e8:	mov	r1, r5
   157ec:	mov	r0, r4
   157f0:	mov	r2, sl
   157f4:	str	sl, [sp]
   157f8:	ldr	r3, [pc, #688]	; 15ab0 <_start@@Base+0xa24>
   157fc:	bl	378a8 <flatcc_json_printer_int32_field@@Base>
   15800:	str	r9, [sp, #4]
   15804:	mov	r2, r6
   15808:	mov	r1, r5
   1580c:	mov	r0, r4
   15810:	str	sl, [sp]
   15814:	ldr	r3, [pc, #664]	; 15ab4 <_start@@Base+0xa28>
   15818:	bl	37208 <flatcc_json_printer_uint32_field@@Base>
   1581c:	mov	r2, #0
   15820:	mov	r3, #0
   15824:	mov	r1, r5
   15828:	strd	r2, [sp, #8]
   1582c:	mov	r0, r4
   15830:	str	sl, [sp]
   15834:	ldr	r3, [pc, #636]	; 15ab8 <_start@@Base+0xa2c>
   15838:	mov	r2, #18
   1583c:	bl	3797c <flatcc_json_printer_int64_field@@Base>
   15840:	mov	r2, #0
   15844:	mov	r3, #0
   15848:	mov	r1, r5
   1584c:	strd	r2, [sp, #8]
   15850:	mov	r0, r4
   15854:	str	sl, [sp]
   15858:	ldr	r3, [pc, #604]	; 15abc <_start@@Base+0xa30>
   1585c:	mov	r2, #19
   15860:	bl	3742c <flatcc_json_printer_uint64_field@@Base>
   15864:	stm	sp, {r6, r9}
   15868:	mov	r1, r5
   1586c:	mov	r0, r4
   15870:	mov	r2, #20
   15874:	ldr	r3, [pc, #580]	; 15ac0 <_start@@Base+0xa34>
   15878:	bl	378a8 <flatcc_json_printer_int32_field@@Base>
   1587c:	stm	sp, {r6, r9}
   15880:	mov	r1, r5
   15884:	mov	r0, r4
   15888:	ldr	r3, [pc, #564]	; 15ac4 <_start@@Base+0xa38>
   1588c:	mov	r2, #21
   15890:	bl	37208 <flatcc_json_printer_uint32_field@@Base>
   15894:	mov	r2, #0
   15898:	mov	r3, #0
   1589c:	mov	r1, r5
   158a0:	strd	r2, [sp, #8]
   158a4:	mov	r0, r4
   158a8:	str	r6, [sp]
   158ac:	ldr	r3, [pc, #532]	; 15ac8 <_start@@Base+0xa3c>
   158b0:	mov	r2, #22
   158b4:	bl	3797c <flatcc_json_printer_int64_field@@Base>
   158b8:	mov	r2, #0
   158bc:	mov	r3, #0
   158c0:	mov	r1, r5
   158c4:	strd	r2, [sp, #8]
   158c8:	mov	r0, r4
   158cc:	str	r6, [sp]
   158d0:	ldr	r3, [pc, #500]	; 15acc <_start@@Base+0xa40>
   158d4:	mov	r2, #23
   158d8:	bl	3742c <flatcc_json_printer_uint64_field@@Base>
   158dc:	mov	r1, r5
   158e0:	mov	r0, r4
   158e4:	str	sl, [sp]
   158e8:	ldr	r3, [pc, #480]	; 15ad0 <_start@@Base+0xa44>
   158ec:	mov	r2, #24
   158f0:	bl	3c984 <flatcc_json_printer_bool_vector_field@@Base>
   158f4:	mov	r9, #6
   158f8:	mov	r1, r5
   158fc:	mov	r0, r4
   15900:	str	r8, [sp]
   15904:	vldr	s0, [pc, #324]	; 15a50 <_start@@Base+0x9c4>
   15908:	ldr	r3, [pc, #452]	; 15ad4 <_start@@Base+0xa48>
   1590c:	mov	r2, #25
   15910:	bl	37cc8 <flatcc_json_printer_float_field@@Base>
   15914:	mov	r1, r5
   15918:	mov	r0, r4
   1591c:	str	r9, [sp]
   15920:	vldr	s0, [pc, #300]	; 15a54 <_start@@Base+0x9c8>
   15924:	ldr	r3, [pc, #428]	; 15ad8 <_start@@Base+0xa4c>
   15928:	mov	r2, #26
   1592c:	bl	37cc8 <flatcc_json_printer_float_field@@Base>
   15930:	vldr	s0, [pc, #288]	; 15a58 <_start@@Base+0x9cc>
   15934:	mov	r1, r5
   15938:	mov	r0, r4
   1593c:	str	r9, [sp]
   15940:	ldr	r3, [pc, #404]	; 15adc <_start@@Base+0xa50>
   15944:	mov	r2, #27
   15948:	bl	37cc8 <flatcc_json_printer_float_field@@Base>
   1594c:	mov	r3, #18
   15950:	mov	r1, r5
   15954:	mov	r0, r4
   15958:	str	r3, [sp]
   1595c:	mov	r2, #28
   15960:	ldr	r3, [pc, #376]	; 15ae0 <_start@@Base+0xa54>
   15964:	bl	3eea0 <flatcc_json_printer_string_vector_field@@Base>
   15968:	ldr	r2, [pc, #372]	; 15ae4 <_start@@Base+0xa58>
   1596c:	mov	r3, #23
   15970:	mov	r1, r5
   15974:	mov	r0, r4
   15978:	str	r2, [sp, #8]
   1597c:	str	r3, [sp]
   15980:	str	fp, [sp, #4]
   15984:	ldr	r3, [pc, #348]	; 15ae8 <_start@@Base+0xa5c>
   15988:	mov	r2, #29
   1598c:	bl	3eab0 <flatcc_json_printer_struct_vector_field@@Base>
   15990:	mov	r1, r5
   15994:	mov	r0, r4
   15998:	str	r7, [sp]
   1599c:	ldr	r3, [pc, #328]	; 15aec <_start@@Base+0xa60>
   159a0:	mov	r2, #30
   159a4:	bl	3afd8 <flatcc_json_printer_uint8_vector_field@@Base>
   159a8:	ldr	r3, [pc, #216]	; 15a88 <_start@@Base+0x9fc>
   159ac:	mov	r1, r5
   159b0:	str	r3, [sp, #8]
   159b4:	mov	r0, r4
   159b8:	str	r7, [sp, #4]
   159bc:	str	r8, [sp]
   159c0:	ldr	r3, [pc, #296]	; 15af0 <_start@@Base+0xa64>
   159c4:	mov	r2, #31
   159c8:	bl	3eab0 <flatcc_json_printer_struct_vector_field@@Base>
   159cc:	mov	r3, #15
   159d0:	mov	r1, r5
   159d4:	mov	r0, r4
   159d8:	str	r3, [sp]
   159dc:	mov	r2, #32
   159e0:	ldr	r3, [pc, #268]	; 15af4 <_start@@Base+0xa68>
   159e4:	bl	3c694 <flatcc_json_printer_int64_vector_field@@Base>
   159e8:	mov	r1, r5
   159ec:	mov	r0, r4
   159f0:	str	r6, [sp]
   159f4:	ldr	r3, [pc, #252]	; 15af8 <_start@@Base+0xa6c>
   159f8:	mov	r2, #33	; 0x21
   159fc:	bl	3cf60 <flatcc_json_printer_double_vector_field@@Base>
   15a00:	ldr	r2, [pc, #244]	; 15afc <_start@@Base+0xa70>
   15a04:	mov	r3, #21
   15a08:	mov	r1, r5
   15a0c:	mov	r0, r4
   15a10:	str	r2, [sp, #4]
   15a14:	str	r3, [sp]
   15a18:	mov	r2, #34	; 0x22
   15a1c:	ldr	r3, [pc, #220]	; 15b00 <_start@@Base+0xa74>
   15a20:	bl	3f7a4 <flatcc_json_printer_table_field@@Base>
   15a24:	ldr	r2, [pc, #216]	; 15b04 <_start@@Base+0xa78>
   15a28:	mov	r3, #10
   15a2c:	str	r2, [sp, #4]
   15a30:	str	r3, [sp]
   15a34:	mov	r1, r5
   15a38:	mov	r0, r4
   15a3c:	ldr	r3, [pc, #196]	; 15b08 <_start@@Base+0xa7c>
   15a40:	mov	r2, #35	; 0x23
   15a44:	bl	3f7a4 <flatcc_json_printer_table_field@@Base>
   15a48:	add	sp, sp, #20
   15a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a50:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   15a54:	submi	r0, r0, r0
   15a58:	andeq	r0, r0, r0
   15a5c:	andeq	r6, r1, ip, ror #2
   15a60:	andeq	r1, r4, ip, ror r7
   15a64:	andeq	r1, r4, r0, lsl #15
   15a68:	andeq	r1, r4, r8, lsl #15
   15a6c:	andeq	r1, r4, ip, lsl #15
   15a70:	muleq	r4, r4, r7
   15a74:	andeq	r6, r1, r0, lsr #1
   15a78:	andeq	r1, r4, r0, lsr #15
   15a7c:	andeq	r5, r1, ip, asr #25
   15a80:	andeq	r7, r1, ip, lsl #1
   15a84:	andeq	r1, r4, r8, lsr #15
   15a88:	andeq	r5, r1, ip, ror #24
   15a8c:			; <UNDEFINED> instruction: 0x000417b0
   15a90:			; <UNDEFINED> instruction: 0x000417b8
   15a94:	andeq	r5, r1, r8, lsl #12
   15a98:	andeq	r1, r4, ip, asr #15
   15a9c:	andeq	r1, r4, r0, ror #15
   15aa0:	andeq	r1, r4, r8, ror #15
   15aa4:	andeq	r5, r1, ip, ror #23
   15aa8:	andeq	r1, r4, r0, lsl #16
   15aac:	andeq	r1, r4, ip, lsl #16
   15ab0:	andeq	r1, r4, r8, lsl r8
   15ab4:	andeq	r1, r4, ip, lsr #16
   15ab8:	andeq	r1, r4, r0, asr #16
   15abc:	andeq	r1, r4, r4, asr r8
   15ac0:	andeq	r1, r4, r8, ror #16
   15ac4:	andeq	r1, r4, ip, ror r8
   15ac8:	muleq	r4, r0, r8
   15acc:	andeq	r1, r4, r4, lsr #17
   15ad0:			; <UNDEFINED> instruction: 0x000418b8
   15ad4:	andeq	r1, r4, ip, asr #17
   15ad8:	ldrdeq	r1, [r4], -r4
   15adc:	ldrdeq	r1, [r4], -ip
   15ae0:	andeq	r1, r4, r4, ror #17
   15ae4:	andeq	r5, r1, ip, lsl #23
   15ae8:	strdeq	r1, [r4], -r8
   15aec:	andeq	r1, r4, r0, lsl r9
   15af0:	andeq	r1, r4, r8, lsl r9
   15af4:	andeq	r1, r4, r0, lsr #18
   15af8:	andeq	r1, r4, r0, lsr r9
   15afc:	andeq	r7, r1, r4, lsl #6
   15b00:	andeq	r1, r4, r4, asr #18
   15b04:	andeq	r5, r1, ip, lsl #22
   15b08:	andeq	r1, r4, ip, asr r9
   15b0c:	push	{r4, r5, r6, lr}
   15b10:	sub	sp, sp, #8
   15b14:	mov	r4, #0
   15b18:	mov	r3, #4
   15b1c:	mov	r2, r4
   15b20:	str	r3, [sp]
   15b24:	str	r4, [sp, #4]
   15b28:	ldr	r3, [pc, #80]	; 15b80 <_start@@Base+0xaf4>
   15b2c:	mov	r5, r0
   15b30:	mov	r6, r1
   15b34:	bl	367d8 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15b38:	mov	r2, #1
   15b3c:	mov	r3, #7
   15b40:	mov	r1, r6
   15b44:	mov	r0, r5
   15b48:	str	r2, [sp, #4]
   15b4c:	str	r3, [sp]
   15b50:	ldr	r3, [pc, #44]	; 15b84 <_start@@Base+0xaf8>
   15b54:	bl	367d8 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15b58:	mov	r3, #6
   15b5c:	str	r3, [sp]
   15b60:	str	r4, [sp, #4]
   15b64:	mov	r1, r6
   15b68:	mov	r0, r5
   15b6c:	ldr	r3, [pc, #20]	; 15b88 <_start@@Base+0xafc>
   15b70:	mov	r2, #2
   15b74:	bl	367d8 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15b78:	add	sp, sp, #8
   15b7c:	pop	{r4, r5, r6, pc}
   15b80:	andeq	r1, r4, r8, ror #18
   15b84:	andeq	r1, r4, r0, ror r9
   15b88:	andeq	r1, r4, r8, ror r9
   15b8c:	push	{r4, r5, lr}
   15b90:	sub	sp, sp, #12
   15b94:	ldr	ip, [pc, #72]	; 15be4 <_start@@Base+0xb58>
   15b98:	mov	r4, r1
   15b9c:	mov	r3, #0
   15ba0:	mov	r1, #2
   15ba4:	mov	r2, r4
   15ba8:	str	ip, [sp]
   15bac:	str	r1, [sp, #4]
   15bb0:	mov	r1, r3
   15bb4:	mov	r5, r0
   15bb8:	bl	38c2c <flatcc_json_printer_uint32_struct_field@@Base>
   15bbc:	ldr	r1, [pc, #36]	; 15be8 <_start@@Base+0xb5c>
   15bc0:	mov	r3, #8
   15bc4:	mov	r2, r4
   15bc8:	stm	sp, {r1, r3}
   15bcc:	mov	r0, r5
   15bd0:	mov	r3, #4
   15bd4:	mov	r1, #1
   15bd8:	bl	38c2c <flatcc_json_printer_uint32_struct_field@@Base>
   15bdc:	add	sp, sp, #12
   15be0:	pop	{r4, r5, pc}
   15be4:	andeq	r1, r4, r0, lsl #19
   15be8:	andeq	r1, r4, r4, lsl #19
   15bec:	push	{r4, r5, r6, r8, r9, lr}
   15bf0:	sub	sp, sp, #16
   15bf4:	mov	r6, #2
   15bf8:	str	r6, [sp]
   15bfc:	ldr	r3, [pc, #92]	; 15c60 <_start@@Base+0xbd4>
   15c00:	mov	r2, #0
   15c04:	mov	r8, #0
   15c08:	mov	r9, #0
   15c0c:	mov	r4, r0
   15c10:	mov	r5, r1
   15c14:	bl	365ec <flatcc_json_printer_string_field@@Base>
   15c18:	mov	r3, #3
   15c1c:	mov	r1, r5
   15c20:	mov	r0, r4
   15c24:	str	r3, [sp]
   15c28:	strd	r8, [sp, #8]
   15c2c:	ldr	r3, [pc, #48]	; 15c64 <_start@@Base+0xbd8>
   15c30:	mov	r2, #1
   15c34:	bl	3797c <flatcc_json_printer_int64_field@@Base>
   15c38:	mov	ip, #0
   15c3c:	mov	r3, #5
   15c40:	mov	r2, r6
   15c44:	stm	sp, {r3, ip}
   15c48:	mov	r1, r5
   15c4c:	mov	r0, r4
   15c50:	ldr	r3, [pc, #16]	; 15c68 <_start@@Base+0xbdc>
   15c54:	bl	36fe4 <flatcc_json_printer_uint16_field@@Base>
   15c58:	add	sp, sp, #16
   15c5c:	pop	{r4, r5, r6, r8, r9, pc}
   15c60:	andeq	r1, r4, r0, lsl #19
   15c64:	muleq	r4, r0, r9
   15c68:	muleq	r4, r4, r9
   15c6c:	push	{r4, r5, r6, lr}
   15c70:	sub	sp, sp, #8
   15c74:	ldr	ip, [pc, #72]	; 15cc4 <_start@@Base+0xc38>
   15c78:	mov	r4, #1
   15c7c:	mov	r3, #0
   15c80:	mov	r5, r1
   15c84:	mov	r2, r1
   15c88:	str	ip, [sp]
   15c8c:	mov	r1, r3
   15c90:	str	r4, [sp, #4]
   15c94:	mov	r6, r0
   15c98:	bl	39210 <flatcc_json_printer_int16_struct_field@@Base>
   15c9c:	ldr	r3, [pc, #36]	; 15cc8 <_start@@Base+0xc3c>
   15ca0:	str	r4, [sp, #4]
   15ca4:	str	r3, [sp]
   15ca8:	mov	r2, r5
   15cac:	mov	r1, r4
   15cb0:	mov	r0, r6
   15cb4:	mov	r3, #2
   15cb8:	bl	38f98 <flatcc_json_printer_int8_struct_field@@Base>
   15cbc:	add	sp, sp, #8
   15cc0:	pop	{r4, r5, r6, pc}
   15cc4:	andeq	r1, r4, r8, ror r8
   15cc8:	muleq	r4, ip, r9
   15ccc:	ldrb	r3, [r1, #8]
   15cd0:	sub	r3, r3, #1
   15cd4:	cmp	r3, #3
   15cd8:	ldrls	pc, [pc, r3, lsl #2]
   15cdc:	b	15d10 <_start@@Base+0xc84>
   15ce0:	andeq	r5, r1, r8, lsl #26
   15ce4:	andeq	r5, r1, r0, lsl #26
   15ce8:	strdeq	r5, [r1], -r8
   15cec:	strdeq	r5, [r1], -r0
   15cf0:	ldr	r2, [pc, #28]	; 15d14 <_start@@Base+0xc88>
   15cf4:	b	3fde4 <flatcc_json_printer_union_table@@Base>
   15cf8:	ldr	r2, [pc, #24]	; 15d18 <_start@@Base+0xc8c>
   15cfc:	b	3fde4 <flatcc_json_printer_union_table@@Base>
   15d00:	ldr	r2, [pc, #20]	; 15d1c <_start@@Base+0xc90>
   15d04:	b	3fde4 <flatcc_json_printer_union_table@@Base>
   15d08:	ldr	r2, [pc, #16]	; 15d20 <_start@@Base+0xc94>
   15d0c:	b	3fde4 <flatcc_json_printer_union_table@@Base>
   15d10:	bx	lr
   15d14:	andeq	r5, r1, r4, lsr #26
   15d18:	andeq	r5, r1, r8, lsr r3
   15d1c:	andeq	r6, r1, r0
   15d20:	andeq	r5, r1, r8, lsl #12
   15d24:	push	{r4, r5, lr}
   15d28:	sub	sp, sp, #20
   15d2c:	ldr	r2, [pc, #112]	; 15da4 <_start@@Base+0xd18>
   15d30:	mov	r3, #6
   15d34:	str	r2, [sp, #4]
   15d38:	str	r3, [sp]
   15d3c:	mov	r2, #0
   15d40:	ldr	r3, [pc, #96]	; 15da8 <_start@@Base+0xd1c>
   15d44:	mov	r4, r0
   15d48:	mov	r5, r1
   15d4c:	bl	3f7a4 <flatcc_json_printer_table_field@@Base>
   15d50:	ldr	r2, [pc, #84]	; 15dac <_start@@Base+0xd20>
   15d54:	mov	r3, #5
   15d58:	mov	r1, r5
   15d5c:	mov	r0, r4
   15d60:	str	r2, [sp, #4]
   15d64:	str	r3, [sp]
   15d68:	mov	r2, #1
   15d6c:	ldr	r3, [pc, #60]	; 15db0 <_start@@Base+0xd24>
   15d70:	bl	3f7a4 <flatcc_json_printer_table_field@@Base>
   15d74:	ldr	ip, [pc, #56]	; 15db4 <_start@@Base+0xd28>
   15d78:	ldr	r2, [pc, #56]	; 15db8 <_start@@Base+0xd2c>
   15d7c:	mov	r3, #7
   15d80:	str	r3, [sp]
   15d84:	stmib	sp, {r2, ip}
   15d88:	mov	r1, r5
   15d8c:	mov	r0, r4
   15d90:	ldr	r3, [pc, #36]	; 15dbc <_start@@Base+0xd30>
   15d94:	mov	r2, #3
   15d98:	bl	3f48c <flatcc_json_printer_union_vector_field@@Base>
   15d9c:	add	sp, sp, #20
   15da0:	pop	{r4, r5, pc}
   15da4:	andeq	r5, r1, r4, asr r3
   15da8:	andeq	r1, r4, r0, lsr #19
   15dac:	andeq	r5, r1, r0, asr #27
   15db0:	andeq	r1, r4, r8, lsr #19
   15db4:	andeq	r5, r1, ip, asr #25
   15db8:	andeq	r7, r1, ip, lsl #1
   15dbc:			; <UNDEFINED> instruction: 0x000419b0
   15dc0:	push	{r4, r5, r6, r7, r8, r9, lr}
   15dc4:	mov	r3, #14
   15dc8:	ldr	r5, [pc, #160]	; 15e70 <_start@@Base+0xde4>
   15dcc:	ldr	r4, [pc, #160]	; 15e74 <_start@@Base+0xde8>
   15dd0:	sub	sp, sp, #20
   15dd4:	mov	r6, r0
   15dd8:	mov	r7, r1
   15ddc:	stm	sp, {r3, r4, r5}
   15de0:	mov	r9, #10
   15de4:	ldr	r3, [pc, #140]	; 15e78 <_start@@Base+0xdec>
   15de8:	mov	r2, #1
   15dec:	bl	3fa58 <flatcc_json_printer_union_field@@Base>
   15df0:	mov	r8, #9
   15df4:	mov	r1, r7
   15df8:	mov	r0, r6
   15dfc:	stmib	sp, {r4, r5}
   15e00:	str	r9, [sp]
   15e04:	ldr	r3, [pc, #112]	; 15e7c <_start@@Base+0xdf0>
   15e08:	mov	r2, #3
   15e0c:	bl	3fa58 <flatcc_json_printer_union_field@@Base>
   15e10:	mov	r1, r7
   15e14:	mov	r0, r6
   15e18:	stmib	sp, {r4, r5}
   15e1c:	str	r8, [sp]
   15e20:	ldr	r3, [pc, #88]	; 15e80 <_start@@Base+0xdf4>
   15e24:	mov	r2, #5
   15e28:	bl	3fa58 <flatcc_json_printer_union_field@@Base>
   15e2c:	mov	r3, #5
   15e30:	mov	r1, r7
   15e34:	mov	r0, r6
   15e38:	str	r3, [sp]
   15e3c:	stmib	sp, {r4, r5}
   15e40:	ldr	r3, [pc, #60]	; 15e84 <_start@@Base+0xdf8>
   15e44:	mov	r2, #7
   15e48:	bl	3fa58 <flatcc_json_printer_union_field@@Base>
   15e4c:	stmib	sp, {r4, r5}
   15e50:	str	r9, [sp]
   15e54:	mov	r2, r8
   15e58:	mov	r1, r7
   15e5c:	mov	r0, r6
   15e60:	ldr	r3, [pc, #32]	; 15e88 <_start@@Base+0xdfc>
   15e64:	bl	3f48c <flatcc_json_printer_union_vector_field@@Base>
   15e68:	add	sp, sp, #20
   15e6c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15e70:	andeq	r5, r1, ip, lsl #29
   15e74:	andeq	r5, r1, r8, asr pc
   15e78:			; <UNDEFINED> instruction: 0x000419b8
   15e7c:	andeq	r1, r4, r8, asr #19
   15e80:	ldrdeq	r1, [r4], -r4
   15e84:	andeq	r1, r4, r0, ror #19
   15e88:	andeq	r1, r4, r8, ror #19
   15e8c:	ldrb	r3, [r1, #8]
   15e90:	cmp	r3, #9
   15e94:	beq	15ecc <_start@@Base+0xe40>
   15e98:	bls	15eb4 <_start@@Base+0xe28>
   15e9c:	cmp	r3, #11
   15ea0:	beq	15eb0 <_start@@Base+0xe24>
   15ea4:	bcc	15ecc <_start@@Base+0xe40>
   15ea8:	cmp	r3, #255	; 0xff
   15eac:	bne	15ed4 <_start@@Base+0xe48>
   15eb0:	b	3ffe4 <flatcc_json_printer_union_string@@Base>
   15eb4:	cmp	r3, #2
   15eb8:	beq	15edc <_start@@Base+0xe50>
   15ebc:	cmp	r3, #8
   15ec0:	bne	15ed8 <_start@@Base+0xe4c>
   15ec4:	ldr	r2, [pc, #24]	; 15ee4 <_start@@Base+0xe58>
   15ec8:	b	3feb8 <flatcc_json_printer_union_struct@@Base>
   15ecc:	ldr	r2, [pc, #20]	; 15ee8 <_start@@Base+0xe5c>
   15ed0:	b	3feb8 <flatcc_json_printer_union_struct@@Base>
   15ed4:	bx	lr
   15ed8:	bx	lr
   15edc:	ldr	r2, [pc, #8]	; 15eec <_start@@Base+0xe60>
   15ee0:	b	3fde4 <flatcc_json_printer_union_table@@Base>
   15ee4:	andeq	r5, r1, r4, lsr #30
   15ee8:	strdeq	r5, [r1], -r0
   15eec:	andeq	r5, r1, r4, ror #7
   15ef0:	push	{lr}		; (str lr, [sp, #-4]!)
   15ef4:	sub	sp, sp, #12
   15ef8:	ldr	lr, [pc, #32]	; 15f20 <_start@@Base+0xe94>
   15efc:	mov	ip, #10
   15f00:	mov	r3, #0
   15f04:	mov	r2, r1
   15f08:	str	lr, [sp]
   15f0c:	str	ip, [sp, #4]
   15f10:	mov	r1, r3
   15f14:	bl	393e8 <flatcc_json_printer_int32_struct_field@@Base>
   15f18:	add	sp, sp, #12
   15f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f20:	strdeq	r1, [r4], -r4
   15f24:	push	{lr}		; (str lr, [sp, #-4]!)
   15f28:	sub	sp, sp, #12
   15f2c:	ldr	lr, [pc, #32]	; 15f54 <_start@@Base+0xec8>
   15f30:	mov	ip, #11
   15f34:	mov	r3, #0
   15f38:	mov	r2, r1
   15f3c:	str	lr, [sp]
   15f40:	str	ip, [sp, #4]
   15f44:	mov	r1, r3
   15f48:	bl	38a78 <flatcc_json_printer_uint16_struct_field@@Base>
   15f4c:	add	sp, sp, #12
   15f50:	pop	{pc}		; (ldr pc, [sp], #4)
   15f54:	andeq	r1, r4, r0, lsl #20
   15f58:	cmp	r1, #9
   15f5c:	mov	r3, r0
   15f60:	beq	15fd8 <_start@@Base+0xf4c>
   15f64:	bls	15f88 <_start@@Base+0xefc>
   15f68:	cmp	r1, #11
   15f6c:	beq	15fa4 <_start@@Base+0xf18>
   15f70:	bcc	15fcc <_start@@Base+0xf40>
   15f74:	cmp	r1, #255	; 0xff
   15f78:	bne	15fb0 <_start@@Base+0xf24>
   15f7c:	mov	r2, #6
   15f80:	ldr	r1, [pc, #92]	; 15fe4 <_start@@Base+0xf58>
   15f84:	b	363b8 <flatcc_json_printer_enum@@Base>
   15f88:	cmp	r1, #2
   15f8c:	beq	15fc0 <_start@@Base+0xf34>
   15f90:	cmp	r1, #8
   15f94:	bne	15fb0 <_start@@Base+0xf24>
   15f98:	mov	r2, r1
   15f9c:	ldr	r1, [pc, #68]	; 15fe8 <_start@@Base+0xf5c>
   15fa0:	b	363b8 <flatcc_json_printer_enum@@Base>
   15fa4:	mov	r2, #5
   15fa8:	ldr	r1, [pc, #60]	; 15fec <_start@@Base+0xf60>
   15fac:	b	363b8 <flatcc_json_printer_enum@@Base>
   15fb0:	mov	r0, r3
   15fb4:	mov	r2, #4
   15fb8:	ldr	r1, [pc, #48]	; 15ff0 <_start@@Base+0xf64>
   15fbc:	b	363b8 <flatcc_json_printer_enum@@Base>
   15fc0:	mov	r2, #5
   15fc4:	ldr	r1, [pc, #40]	; 15ff4 <_start@@Base+0xf68>
   15fc8:	b	363b8 <flatcc_json_printer_enum@@Base>
   15fcc:	mov	r2, #7
   15fd0:	ldr	r1, [pc, #32]	; 15ff8 <_start@@Base+0xf6c>
   15fd4:	b	363b8 <flatcc_json_printer_enum@@Base>
   15fd8:	mov	r2, #5
   15fdc:	ldr	r1, [pc, #24]	; 15ffc <_start@@Base+0xf70>
   15fe0:	b	363b8 <flatcc_json_printer_enum@@Base>
   15fe4:	andeq	r1, r4, r8, lsr sl
   15fe8:	andeq	r1, r4, r4, lsl sl
   15fec:	andeq	r1, r4, r0, lsr sl
   15ff0:	andeq	r5, r4, r0, lsl r6
   15ff4:	andeq	r1, r4, ip, lsl #20
   15ff8:	andeq	r1, r4, r8, lsr #20
   15ffc:	andeq	r1, r4, r0, lsr #20
   16000:	push	{r4, r5, r6, r7, lr}
   16004:	mov	r3, #5
   16008:	ldr	r7, [pc, #124]	; 1608c <_start@@Base+0x1000>
   1600c:	sub	sp, sp, #20
   16010:	mov	r4, #2
   16014:	mov	r2, #0
   16018:	stm	sp, {r3, r4, r7}
   1601c:	mov	r5, r0
   16020:	ldr	r3, [pc, #104]	; 16090 <_start@@Base+0x1004>
   16024:	mov	r6, r1
   16028:	bl	381c0 <flatcc_json_printer_int8_enum_field@@Base>
   1602c:	mov	r3, #6
   16030:	mov	r1, r6
   16034:	mov	r0, r5
   16038:	str	r3, [sp]
   1603c:	stmib	sp, {r4, r7}
   16040:	ldr	r3, [pc, #76]	; 16094 <_start@@Base+0x1008>
   16044:	mov	r2, #1
   16048:	bl	381c0 <flatcc_json_printer_int8_enum_field@@Base>
   1604c:	mov	r2, r4
   16050:	mov	r1, r6
   16054:	mov	r0, r5
   16058:	str	r4, [sp, #4]
   1605c:	str	r4, [sp]
   16060:	ldr	r3, [pc, #48]	; 16098 <_start@@Base+0x100c>
   16064:	bl	36d20 <flatcc_json_printer_uint8_field@@Base>
   16068:	mov	r2, #3
   1606c:	str	r4, [sp, #4]
   16070:	mov	r1, r6
   16074:	mov	r0, r5
   16078:	str	r2, [sp]
   1607c:	ldr	r3, [pc, #24]	; 1609c <_start@@Base+0x1010>
   16080:	bl	36d20 <flatcc_json_printer_uint8_field@@Base>
   16084:	add	sp, sp, #20
   16088:	pop	{r4, r5, r6, r7, pc}
   1608c:	andeq	r6, r1, r0, lsr #1
   16090:	andeq	r1, r4, r0, lsr #15
   16094:	andeq	r1, r4, r0, asr #20
   16098:	andeq	r1, r4, r8, asr #20
   1609c:	andeq	r1, r4, ip, asr #20
   160a0:	push	{r4, r5, r6, r7, r8, lr}
   160a4:	uxtb	r4, r1
   160a8:	tst	r4, #244	; 0xf4
   160ac:	movne	r5, #1
   160b0:	moveq	r5, #0
   160b4:	cmp	r4, #0
   160b8:	orreq	r5, r5, #1
   160bc:	cmp	r5, #0
   160c0:	beq	160cc <_start@@Base+0x1040>
   160c4:	pop	{r4, r5, r6, r7, r8, lr}
   160c8:	b	361c4 <flatcc_json_printer_int8@@Base>
   160cc:	sub	r3, r4, #1
   160d0:	tst	r3, r4
   160d4:	movne	r7, #1
   160d8:	moveq	r7, #0
   160dc:	mov	r1, r7
   160e0:	mov	r6, r0
   160e4:	bl	364c4 <flatcc_json_printer_delimit_enum_flags@@Base>
   160e8:	ands	r1, r4, #1
   160ec:	moveq	r5, #1
   160f0:	bne	16114 <_start@@Base+0x1088>
   160f4:	tst	r4, #2
   160f8:	bne	16148 <_start@@Base+0x10bc>
   160fc:	tst	r4, #8
   16100:	bne	16134 <_start@@Base+0x10a8>
   16104:	mov	r1, r7
   16108:	mov	r0, r6
   1610c:	pop	{r4, r5, r6, r7, r8, lr}
   16110:	b	364c4 <flatcc_json_printer_delimit_enum_flags@@Base>
   16114:	mov	r1, r5
   16118:	mov	r3, #3
   1611c:	ldr	r2, [pc, #60]	; 16160 <_start@@Base+0x10d4>
   16120:	mov	r0, r6
   16124:	bl	364f4 <flatcc_json_printer_enum_flag@@Base>
   16128:	mov	r5, #2
   1612c:	mov	r1, #1
   16130:	b	160f4 <_start@@Base+0x1068>
   16134:	mov	r3, #4
   16138:	ldr	r2, [pc, #36]	; 16164 <_start@@Base+0x10d8>
   1613c:	mov	r0, r6
   16140:	bl	364f4 <flatcc_json_printer_enum_flag@@Base>
   16144:	b	16104 <_start@@Base+0x1078>
   16148:	mov	r3, #5
   1614c:	ldr	r2, [pc, #20]	; 16168 <_start@@Base+0x10dc>
   16150:	mov	r0, r6
   16154:	bl	364f4 <flatcc_json_printer_enum_flag@@Base>
   16158:	mov	r1, r5
   1615c:	b	160fc <_start@@Base+0x1070>
   16160:	andeq	r1, r4, r0, asr sl
   16164:	andeq	r1, r4, ip, asr sl
   16168:	andeq	r1, r4, r4, asr sl
   1616c:	push	{r4, r5, r6, lr}
   16170:	sub	sp, sp, #16
   16174:	ldr	ip, [pc, #216]	; 16254 <_start@@Base+0x11c8>
   16178:	mov	r6, #1
   1617c:	mov	r3, #0
   16180:	mov	r4, r1
   16184:	str	ip, [sp]
   16188:	mov	r2, r1
   1618c:	str	r6, [sp, #4]
   16190:	mov	r1, r3
   16194:	mov	r5, r0
   16198:	bl	39990 <flatcc_json_printer_float_struct_field@@Base>
   1619c:	ldr	r3, [pc, #180]	; 16258 <_start@@Base+0x11cc>
   161a0:	str	r6, [sp, #4]
   161a4:	mov	r2, r4
   161a8:	mov	r1, r6
   161ac:	mov	r0, r5
   161b0:	str	r3, [sp]
   161b4:	mov	r3, #4
   161b8:	bl	39990 <flatcc_json_printer_float_struct_field@@Base>
   161bc:	ldr	r3, [pc, #152]	; 1625c <_start@@Base+0x11d0>
   161c0:	str	r6, [sp, #4]
   161c4:	mov	r2, r4
   161c8:	mov	r0, r5
   161cc:	str	r3, [sp]
   161d0:	mov	r1, #2
   161d4:	mov	r3, #8
   161d8:	bl	39990 <flatcc_json_printer_float_struct_field@@Base>
   161dc:	ldr	r3, [pc, #124]	; 16260 <_start@@Base+0x11d4>
   161e0:	mov	r6, #5
   161e4:	mov	r2, r4
   161e8:	mov	r0, r5
   161ec:	stm	sp, {r3, r6}
   161f0:	mov	r1, #3
   161f4:	mov	r3, #16
   161f8:	bl	39b50 <flatcc_json_printer_double_struct_field@@Base>
   161fc:	ldr	r1, [pc, #96]	; 16264 <_start@@Base+0x11d8>
   16200:	ldr	r3, [pc, #96]	; 16268 <_start@@Base+0x11dc>
   16204:	mov	r2, r4
   16208:	mov	r0, r5
   1620c:	str	r1, [sp, #8]
   16210:	str	r3, [sp]
   16214:	str	r6, [sp, #4]
   16218:	mov	r3, #24
   1621c:	mov	r1, #4
   16220:	bl	3a520 <flatcc_json_printer_int8_enum_struct_field@@Base>
   16224:	ldr	ip, [pc, #64]	; 1626c <_start@@Base+0x11e0>
   16228:	ldr	r3, [pc, #64]	; 16270 <_start@@Base+0x11e4>
   1622c:	str	r6, [sp, #4]
   16230:	str	r3, [sp]
   16234:	mov	r2, r4
   16238:	mov	r1, r6
   1623c:	mov	r0, r5
   16240:	str	ip, [sp, #8]
   16244:	mov	r3, #26
   16248:	bl	3fffc <flatcc_json_printer_embedded_struct_field@@Base>
   1624c:	add	sp, sp, #16
   16250:	pop	{r4, r5, r6, pc}
   16254:	ldrdeq	r1, [r4], -ip
   16258:	andeq	r1, r4, r4, ror #15
   1625c:	andeq	r1, r4, r4, ror #20
   16260:	andeq	r1, r4, r8, ror #20
   16264:	andeq	r6, r1, r0, lsr #1
   16268:	andeq	r1, r4, r0, ror sl
   1626c:	andeq	r5, r1, ip, ror #24
   16270:	andeq	r1, r4, r8, ror sl
   16274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16278:	mov	r4, r1
   1627c:	sub	sp, sp, #12
   16280:	mov	r1, r2
   16284:	mov	r5, r0
   16288:	mov	r0, r4
   1628c:	mov	sl, r2
   16290:	mov	fp, r3
   16294:	bl	151b8 <_start@@Base+0x12c>
   16298:	add	r3, pc, #624	; 0x270
   1629c:	ldrd	r2, [r3]
   162a0:	cmp	r1, r3
   162a4:	cmpeq	r0, r2
   162a8:	bhi	1631c <_start@@Base+0x1290>
   162ac:	add	r3, pc, #612	; 0x264
   162b0:	ldrd	r2, [r3]
   162b4:	cmp	r1, r3
   162b8:	cmpeq	r0, r2
   162bc:	bls	163e4 <_start@@Base+0x1358>
   162c0:	add	r7, pc, #600	; 0x258
   162c4:	ldrd	r6, [r7]
   162c8:	and	r8, r0, #-16777216	; 0xff000000
   162cc:	cmp	r1, r7
   162d0:	cmpeq	r8, r6
   162d4:	beq	164b8 <_start@@Base+0x142c>
   162d8:	add	r3, pc, #584	; 0x248
   162dc:	ldrd	r2, [r3]
   162e0:	bic	r0, r0, #255	; 0xff
   162e4:	cmp	r1, r3
   162e8:	cmpeq	r0, r2
   162ec:	bne	16348 <_start@@Base+0x12bc>
   162f0:	ldr	r3, [sp, #52]	; 0x34
   162f4:	mov	r2, sl
   162f8:	str	r3, [sp]
   162fc:	mov	r0, r5
   16300:	mov	r3, #7
   16304:	mov	r1, r4
   16308:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   1630c:	cmp	r4, r0
   16310:	movne	r6, #10
   16314:	bne	16424 <_start@@Base+0x1398>
   16318:	b	16348 <_start@@Base+0x12bc>
   1631c:	add	r3, pc, #524	; 0x20c
   16320:	ldrd	r2, [r3]
   16324:	cmp	r1, r3
   16328:	cmpeq	r0, r2
   1632c:	bhi	16354 <_start@@Base+0x12c8>
   16330:	add	r3, pc, #512	; 0x200
   16334:	ldrd	r2, [r3]
   16338:	mov	r0, #0
   1633c:	cmp	r1, r3
   16340:	cmpeq	r0, r2
   16344:	beq	1648c <_start@@Base+0x1400>
   16348:	mov	r0, r4
   1634c:	add	sp, sp, #12
   16350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16354:	add	r3, pc, #484	; 0x1e4
   16358:	ldrd	r2, [r3]
   1635c:	cmp	r1, r3
   16360:	cmpeq	r0, r2
   16364:	bls	16448 <_start@@Base+0x13bc>
   16368:	add	r7, pc, #472	; 0x1d8
   1636c:	ldrd	r6, [r7]
   16370:	ldr	r2, [pc, #496]	; 16568 <_start@@Base+0x14dc>
   16374:	mvn	r3, #0
   16378:	and	r3, r3, r1
   1637c:	and	r2, r2, r0
   16380:	cmp	r3, r7
   16384:	cmpeq	r2, r6
   16388:	beq	164e4 <_start@@Base+0x1458>
   1638c:	add	r3, pc, #444	; 0x1bc
   16390:	ldrd	r2, [r3]
   16394:	cmp	r1, r3
   16398:	cmpeq	r0, r2
   1639c:	bne	16348 <_start@@Base+0x12bc>
   163a0:	ldr	r3, [sp, #52]	; 0x34
   163a4:	mov	r2, sl
   163a8:	str	r3, [sp]
   163ac:	mov	r0, r5
   163b0:	mov	r3, #8
   163b4:	mov	r1, r4
   163b8:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   163bc:	cmp	r4, r0
   163c0:	beq	16348 <_start@@Base+0x12bc>
   163c4:	ldr	r2, [sp, #48]	; 0x30
   163c8:	mov	r4, r0
   163cc:	mov	r1, #0
   163d0:	mov	r0, #8
   163d4:	mov	r3, #0
   163d8:	strd	r0, [r2]
   163dc:	str	r3, [fp]
   163e0:	b	16348 <_start@@Base+0x12bc>
   163e4:	add	r3, pc, #364	; 0x16c
   163e8:	ldrd	r2, [r3]
   163ec:	and	r0, r0, #-16777216	; 0xff000000
   163f0:	cmp	r1, r3
   163f4:	cmpeq	r0, r2
   163f8:	bne	16348 <_start@@Base+0x12bc>
   163fc:	ldr	r3, [sp, #52]	; 0x34
   16400:	mov	r2, sl
   16404:	str	r3, [sp]
   16408:	mov	r0, r5
   1640c:	mov	r3, #5
   16410:	mov	r1, r4
   16414:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   16418:	cmp	r4, r0
   1641c:	movne	r6, #9
   16420:	beq	16348 <_start@@Base+0x12bc>
   16424:	ldr	r2, [sp, #48]	; 0x30
   16428:	mov	r7, #0
   1642c:	mov	r3, #0
   16430:	mov	r4, r0
   16434:	strd	r6, [r2]
   16438:	mov	r0, r4
   1643c:	str	r3, [fp]
   16440:	add	sp, sp, #12
   16444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16448:	add	r3, pc, #272	; 0x110
   1644c:	ldrd	r2, [r3]
   16450:	and	r0, r0, #-16777216	; 0xff000000
   16454:	cmp	r1, r3
   16458:	cmpeq	r0, r2
   1645c:	bne	16348 <_start@@Base+0x12bc>
   16460:	ldr	r3, [sp, #52]	; 0x34
   16464:	mov	r2, sl
   16468:	str	r3, [sp]
   1646c:	mov	r0, r5
   16470:	mov	r3, #5
   16474:	mov	r1, r4
   16478:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   1647c:	cmp	r4, r0
   16480:	beq	16348 <_start@@Base+0x12bc>
   16484:	mov	r6, #11
   16488:	b	16424 <_start@@Base+0x1398>
   1648c:	ldr	r3, [sp, #52]	; 0x34
   16490:	mov	r2, sl
   16494:	str	r3, [sp]
   16498:	mov	r0, r5
   1649c:	mov	r3, #4
   164a0:	mov	r1, r4
   164a4:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   164a8:	cmp	r4, r0
   164ac:	movne	r6, #0
   164b0:	bne	16424 <_start@@Base+0x1398>
   164b4:	b	16348 <_start@@Base+0x12bc>
   164b8:	ldr	r3, [sp, #52]	; 0x34
   164bc:	mov	r2, sl
   164c0:	str	r3, [sp]
   164c4:	mov	r0, r5
   164c8:	mov	r3, #5
   164cc:	mov	r1, r4
   164d0:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   164d4:	cmp	r4, r0
   164d8:	movne	r6, #2
   164dc:	bne	16424 <_start@@Base+0x1398>
   164e0:	b	16348 <_start@@Base+0x12bc>
   164e4:	ldr	r3, [sp, #52]	; 0x34
   164e8:	mov	r2, sl
   164ec:	str	r3, [sp]
   164f0:	mov	r0, r5
   164f4:	mov	r3, #6
   164f8:	mov	r1, r4
   164fc:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   16500:	cmp	r4, r0
   16504:	movne	r6, #255	; 0xff
   16508:	bne	16424 <_start@@Base+0x1398>
   1650c:	b	16348 <_start@@Base+0x12bc>
   16510:			; <UNDEFINED> instruction: 0xffffffff
   16514:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   16518:			; <UNDEFINED> instruction: 0x46616dff
   1651c:	rsbmi	r6, pc, #428	; 0x1ac
   16520:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   16524:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   16528:	strbtmi	r6, [r1], -r0, lsl #28
   1652c:	rsbmi	r6, pc, #428	; 0x1ac
   16530:	ldrshvc	pc, [pc, #255]	; 16637 <_start@@Base+0x15ab>	; <UNPREDICTABLE>
   16534:	svcmi	0x00746865
   16538:	andeq	r0, r0, r0
   1653c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16540:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   16544:	rsbpl	r7, r1, #117	; 0x75
   16548:	strbvs	r0, [r4, #-0]!
   1654c:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   16550:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   16554:	rsbpl	r7, r1, #117	; 0x75
   16558:	strvs	r0, [r0, #-0]
   1655c:	rsbmi	r6, r5, #108, 24	; 0x6c00
   16560:	andvc	r0, r0, #0
   16564:	svcmi	0x00746865
   16568:			; <UNDEFINED> instruction: 0xffff0000
   1656c:	push	{r4, r5, r6, r7, r8, r9, lr}
   16570:	mov	r6, r1
   16574:	sub	sp, sp, #12
   16578:	mov	r1, r2
   1657c:	mov	r8, r0
   16580:	mov	r0, r6
   16584:	mov	r7, r2
   16588:	mov	r9, r3
   1658c:	bl	151b8 <_start@@Base+0x12c>
   16590:	add	r3, pc, #464	; 0x1d0
   16594:	ldrd	r2, [r3]
   16598:	cmp	r1, r3
   1659c:	cmpeq	r0, r2
   165a0:	mov	r5, r1
   165a4:	bhi	165d0 <_start@@Base+0x1544>
   165a8:	add	r3, pc, #448	; 0x1c0
   165ac:	ldrd	r2, [r3]
   165b0:	bic	r5, r1, #255	; 0xff
   165b4:	mov	r4, #0
   165b8:	cmp	r5, r3
   165bc:	cmpeq	r4, r2
   165c0:	beq	166a0 <_start@@Base+0x1614>
   165c4:	mov	r0, r6
   165c8:	add	sp, sp, #12
   165cc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   165d0:	add	r3, pc, #416	; 0x1a0
   165d4:	ldrd	r2, [r3]
   165d8:	mov	r4, r0
   165dc:	cmp	r1, r3
   165e0:	cmpeq	r0, r2
   165e4:	beq	166e4 <_start@@Base+0x1658>
   165e8:	add	r3, pc, #400	; 0x190
   165ec:	ldrd	r2, [r3]
   165f0:	bic	r0, r0, #255	; 0xff
   165f4:	cmp	r1, r3
   165f8:	cmpeq	r0, r2
   165fc:	beq	16710 <_start@@Base+0x1684>
   16600:	add	r3, pc, #384	; 0x180
   16604:	ldrd	r2, [r3]
   16608:	mov	r0, #0
   1660c:	cmp	r5, r3
   16610:	cmpeq	r0, r2
   16614:	beq	1673c <_start@@Base+0x16b0>
   16618:	add	r3, pc, #368	; 0x170
   1661c:	ldrd	r2, [r3]
   16620:	cmp	r5, r3
   16624:	cmpeq	r4, r2
   16628:	bne	165c4 <_start@@Base+0x1538>
   1662c:	mov	r1, r7
   16630:	add	r0, r6, #8
   16634:	bl	151b8 <_start@@Base+0x12c>
   16638:	add	r3, pc, #344	; 0x158
   1663c:	ldrd	r2, [r3]
   16640:	cmp	r1, r3
   16644:	cmpeq	r0, r2
   16648:	bne	165c4 <_start@@Base+0x1538>
   1664c:	add	r4, r6, #16
   16650:	mov	r0, r4
   16654:	mov	r1, r7
   16658:	bl	151b8 <_start@@Base+0x12c>
   1665c:	add	r3, pc, #316	; 0x13c
   16660:	ldrd	r2, [r3]
   16664:	bic	r0, r0, #255	; 0xff
   16668:	cmp	r1, r3
   1666c:	cmpeq	r0, r2
   16670:	bne	165c4 <_start@@Base+0x1538>
   16674:	ldr	r3, [sp, #44]	; 0x2c
   16678:	mov	r2, r7
   1667c:	str	r3, [sp]
   16680:	mov	r0, r8
   16684:	mov	r3, #7
   16688:	mov	r1, r4
   1668c:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   16690:	cmp	r4, r0
   16694:	beq	165c4 <_start@@Base+0x1538>
   16698:	mov	r4, #2
   1669c:	b	166c8 <_start@@Base+0x163c>
   166a0:	ldr	r3, [sp, #44]	; 0x2c
   166a4:	mov	r2, r7
   166a8:	str	r3, [sp]
   166ac:	mov	r0, r8
   166b0:	mov	r3, #3
   166b4:	mov	r1, r6
   166b8:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   166bc:	cmp	r6, r0
   166c0:	movne	r4, #4
   166c4:	beq	165c8 <_start@@Base+0x153c>
   166c8:	ldr	r2, [sp, #40]	; 0x28
   166cc:	mov	r5, #0
   166d0:	mov	r3, #0
   166d4:	strd	r4, [r2]
   166d8:	str	r3, [r9]
   166dc:	add	sp, sp, #12
   166e0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   166e4:	ldr	r3, [sp, #44]	; 0x2c
   166e8:	mov	r2, r7
   166ec:	str	r3, [sp]
   166f0:	mov	r0, r8
   166f4:	mov	r3, #8
   166f8:	mov	r1, r6
   166fc:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   16700:	cmp	r6, r0
   16704:	movne	r4, #3
   16708:	bne	166c8 <_start@@Base+0x163c>
   1670c:	b	165c4 <_start@@Base+0x1538>
   16710:	ldr	r3, [sp, #44]	; 0x2c
   16714:	mov	r2, r7
   16718:	str	r3, [sp]
   1671c:	mov	r1, r6
   16720:	mov	r3, #7
   16724:	mov	r0, r8
   16728:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   1672c:	cmp	r6, r0
   16730:	movne	r4, #1
   16734:	bne	166c8 <_start@@Base+0x163c>
   16738:	b	16600 <_start@@Base+0x1574>
   1673c:	ldr	r3, [sp, #44]	; 0x2c
   16740:	mov	r2, r7
   16744:	str	r3, [sp]
   16748:	mov	r0, r8
   1674c:	mov	r3, #4
   16750:	mov	r1, r6
   16754:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   16758:	cmp	r6, r0
   1675c:	movne	r4, #0
   16760:	bne	166c8 <_start@@Base+0x163c>
   16764:	b	165c4 <_start@@Base+0x1538>
   16768:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   1676c:	stclmi	14, cr6, [pc, #-460]!	; 165a8 <_start@@Base+0x151c>
   16770:	andeq	r0, r0, r0
   16774:	cmnmi	ip, r0, lsl #8
   16778:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   1677c:	stclmi	14, cr6, [pc, #-460]!	; 165b8 <_start@@Base+0x152c>
   16780:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   16784:	stclmi	14, cr6, [pc, #-460]!	; 165c0 <_start@@Base+0x1534>
   16788:	andeq	r0, r0, r0
   1678c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16790:	cmnpl	r9, #112, 26	; 0x1c00
   16794:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   16798:	rsbvs	r6, ip, #364904448	; 0x15c00000
   1679c:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   167a0:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   167a4:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   167a8:	sub	r3, r2, r1
   167ac:	cmp	r3, #1
   167b0:	ble	167c4 <_start@@Base+0x1738>
   167b4:	ldrb	r3, [r1]
   167b8:	cmp	r3, #32
   167bc:	bhi	167c8 <_start@@Base+0x173c>
   167c0:	beq	167d0 <_start@@Base+0x1744>
   167c4:	b	2e9b4 <flatcc_json_parser_space_ext@@Base>
   167c8:	mov	r0, r1
   167cc:	bx	lr
   167d0:	ldrb	r3, [r1, #1]
   167d4:	cmp	r3, #32
   167d8:	bls	167c4 <_start@@Base+0x1738>
   167dc:	add	r0, r1, #1
   167e0:	bx	lr
   167e4:	mov	r3, #8
   167e8:	push	{r4, lr}
   167ec:	mov	r2, r3
   167f0:	mov	r1, #0
   167f4:	mov	r4, r0
   167f8:	bl	2b284 <flatcc_verify_field@@Base>
   167fc:	cmp	r0, #0
   16800:	popne	{r4, pc}
   16804:	mov	r3, #4
   16808:	mov	r0, r4
   1680c:	mov	r2, r3
   16810:	mov	r1, #1
   16814:	pop	{r4, lr}
   16818:	b	2b284 <flatcc_verify_field@@Base>
   1681c:	mov	r3, #1
   16820:	push	{r4, lr}
   16824:	mov	r2, r3
   16828:	mov	r1, #0
   1682c:	mov	r4, r0
   16830:	bl	2b284 <flatcc_verify_field@@Base>
   16834:	cmp	r0, #0
   16838:	popne	{r4, pc}
   1683c:	mov	r3, #1
   16840:	mov	r2, r3
   16844:	mov	r1, r3
   16848:	mov	r0, r4
   1684c:	bl	2b284 <flatcc_verify_field@@Base>
   16850:	cmp	r0, #0
   16854:	popne	{r4, pc}
   16858:	mov	r3, #1
   1685c:	mov	r2, r3
   16860:	mov	r1, #2
   16864:	mov	r0, r4
   16868:	bl	2b284 <flatcc_verify_field@@Base>
   1686c:	cmp	r0, #0
   16870:	popne	{r4, pc}
   16874:	mov	r3, #1
   16878:	mov	r0, r4
   1687c:	mov	r2, r3
   16880:	mov	r1, #3
   16884:	pop	{r4, lr}
   16888:	b	2b284 <flatcc_verify_field@@Base>
   1688c:	mov	r2, #0
   16890:	push	{r4, lr}
   16894:	mov	r1, r2
   16898:	mov	r4, r0
   1689c:	bl	2b2f4 <flatcc_verify_string_field@@Base>
   168a0:	cmp	r0, #0
   168a4:	popne	{r4, pc}
   168a8:	mov	r3, #8
   168ac:	mov	r2, r3
   168b0:	mov	r1, #1
   168b4:	mov	r0, r4
   168b8:	bl	2b284 <flatcc_verify_field@@Base>
   168bc:	cmp	r0, #0
   168c0:	popne	{r4, pc}
   168c4:	mov	r3, #2
   168c8:	mov	r0, r4
   168cc:	mov	r2, r3
   168d0:	mov	r1, r3
   168d4:	pop	{r4, lr}
   168d8:	b	2b284 <flatcc_verify_field@@Base>
   168dc:	mov	r2, #0
   168e0:	push	{r4, lr}
   168e4:	mov	r1, r2
   168e8:	mov	r4, r0
   168ec:	bl	2b2f4 <flatcc_verify_string_field@@Base>
   168f0:	cmp	r0, #0
   168f4:	popne	{r4, pc}
   168f8:	mov	r3, #4
   168fc:	mov	r2, r3
   16900:	mov	r1, #1
   16904:	mov	r0, r4
   16908:	bl	2b284 <flatcc_verify_field@@Base>
   1690c:	cmp	r0, #0
   16910:	popne	{r4, pc}
   16914:	mov	r2, r0
   16918:	mov	r1, #2
   1691c:	mov	r0, r4
   16920:	bl	2b2f4 <flatcc_verify_string_field@@Base>
   16924:	cmp	r0, #0
   16928:	popne	{r4, pc}
   1692c:	mov	r3, #8
   16930:	mov	r2, r3
   16934:	mov	r1, #3
   16938:	mov	r0, r4
   1693c:	bl	2b284 <flatcc_verify_field@@Base>
   16940:	cmp	r0, #0
   16944:	popne	{r4, pc}
   16948:	mov	r2, r0
   1694c:	mov	r1, #4
   16950:	mov	r0, r4
   16954:	bl	2b2f4 <flatcc_verify_string_field@@Base>
   16958:	cmp	r0, #0
   1695c:	popne	{r4, pc}
   16960:	mov	r3, #8
   16964:	mov	r2, r3
   16968:	mov	r1, #5
   1696c:	mov	r0, r4
   16970:	bl	2b284 <flatcc_verify_field@@Base>
   16974:	cmp	r0, #0
   16978:	popne	{r4, pc}
   1697c:	mov	r3, #4
   16980:	mov	r2, r3
   16984:	mov	r1, #6
   16988:	mov	r0, r4
   1698c:	bl	2b284 <flatcc_verify_field@@Base>
   16990:	cmp	r0, #0
   16994:	popne	{r4, pc}
   16998:	mov	r3, #8
   1699c:	mov	r2, r3
   169a0:	mov	r1, #7
   169a4:	mov	r0, r4
   169a8:	bl	2b284 <flatcc_verify_field@@Base>
   169ac:	cmp	r0, #0
   169b0:	popne	{r4, pc}
   169b4:	mov	r3, #4
   169b8:	mov	r0, r4
   169bc:	mov	r2, r3
   169c0:	mov	r1, #8
   169c4:	pop	{r4, lr}
   169c8:	b	2b284 <flatcc_verify_field@@Base>
   169cc:	mov	r2, #0
   169d0:	push	{r4, lr}
   169d4:	mov	r1, r2
   169d8:	ldr	r3, [pc, #64]	; 16a20 <_start@@Base+0x1994>
   169dc:	mov	r4, r0
   169e0:	bl	2b67c <flatcc_verify_table_field@@Base>
   169e4:	cmp	r0, #0
   169e8:	popne	{r4, pc}
   169ec:	mov	r2, r0
   169f0:	ldr	r3, [pc, #44]	; 16a24 <_start@@Base+0x1998>
   169f4:	mov	r1, #1
   169f8:	mov	r0, r4
   169fc:	bl	2b67c <flatcc_verify_table_field@@Base>
   16a00:	cmp	r0, #0
   16a04:	popne	{r4, pc}
   16a08:	mov	r2, r0
   16a0c:	ldr	r3, [pc, #20]	; 16a28 <_start@@Base+0x199c>
   16a10:	mov	r0, r4
   16a14:	mov	r1, #2
   16a18:	pop	{r4, lr}
   16a1c:	b	2b67c <flatcc_verify_table_field@@Base>
   16a20:	ldrdeq	r6, [r1], -ip
   16a24:	andeq	r7, r1, ip, lsl #19
   16a28:	andeq	r6, r1, r4, ror #15
   16a2c:	push	{r4, r5, r6, r7, r8, lr}
   16a30:	mov	r3, #16
   16a34:	sub	sp, sp, #8
   16a38:	mov	r2, #32
   16a3c:	mov	r1, #0
   16a40:	mov	r4, r0
   16a44:	bl	2b284 <flatcc_verify_field@@Base>
   16a48:	cmp	r0, #0
   16a4c:	beq	16a58 <_start@@Base+0x19cc>
   16a50:	add	sp, sp, #8
   16a54:	pop	{r4, r5, r6, r7, r8, pc}
   16a58:	mov	r3, #2
   16a5c:	mov	r2, r3
   16a60:	mov	r1, r3
   16a64:	mov	r0, r4
   16a68:	bl	2b284 <flatcc_verify_field@@Base>
   16a6c:	cmp	r0, #0
   16a70:	bne	16a50 <_start@@Base+0x19c4>
   16a74:	mov	r3, #2
   16a78:	mov	r2, r3
   16a7c:	mov	r1, #1
   16a80:	mov	r0, r4
   16a84:	bl	2b284 <flatcc_verify_field@@Base>
   16a88:	cmp	r0, #0
   16a8c:	bne	16a50 <_start@@Base+0x19c4>
   16a90:	mov	r2, #1
   16a94:	mov	r1, #3
   16a98:	mov	r0, r4
   16a9c:	bl	2b2f4 <flatcc_verify_string_field@@Base>
   16aa0:	cmp	r0, #0
   16aa4:	bne	16a50 <_start@@Base+0x19c4>
   16aa8:	mov	r3, #1
   16aac:	mov	r2, r3
   16ab0:	mov	r1, #6
   16ab4:	mov	r0, r4
   16ab8:	bl	2b284 <flatcc_verify_field@@Base>
   16abc:	cmp	r0, #0
   16ac0:	bne	16a50 <_start@@Base+0x19c4>
   16ac4:	mov	r5, #1
   16ac8:	mvn	r6, #0
   16acc:	mov	r2, r0
   16ad0:	stm	sp, {r5, r6}
   16ad4:	mov	r3, r5
   16ad8:	mov	r1, #5
   16adc:	mov	r0, r4
   16ae0:	bl	2b3d4 <flatcc_verify_vector_field@@Base>
   16ae4:	cmp	r0, #0
   16ae8:	bne	16a50 <_start@@Base+0x19c4>
   16aec:	mov	r2, r0
   16af0:	ldr	r3, [pc, #840]	; 16e40 <_start@@Base+0x1db4>
   16af4:	mov	r1, #11
   16af8:	mov	r0, r4
   16afc:	bl	2b7e0 <flatcc_verify_table_vector_field@@Base>
   16b00:	cmp	r0, #0
   16b04:	bne	16a50 <_start@@Base+0x19c4>
   16b08:	mov	r2, r0
   16b0c:	mov	r1, #10
   16b10:	mov	r0, r4
   16b14:	bl	2b4c8 <flatcc_verify_string_vector_field@@Base>
   16b18:	cmp	r0, #0
   16b1c:	bne	16a50 <_start@@Base+0x19c4>
   16b20:	mov	r2, r0
   16b24:	mov	r1, #28
   16b28:	mov	r0, r4
   16b2c:	bl	2b4c8 <flatcc_verify_string_vector_field@@Base>
   16b30:	cmp	r0, #0
   16b34:	bne	16a50 <_start@@Base+0x19c4>
   16b38:	mov	r2, r0
   16b3c:	stm	sp, {r5, r6}
   16b40:	mov	r3, r5
   16b44:	mov	r1, #24
   16b48:	mov	r0, r4
   16b4c:	bl	2b3d4 <flatcc_verify_vector_field@@Base>
   16b50:	cmp	r0, #0
   16b54:	bne	16a50 <_start@@Base+0x19c4>
   16b58:	mvn	r3, #-536870912	; 0xe0000000
   16b5c:	mov	r5, #4
   16b60:	str	r3, [sp, #4]
   16b64:	str	r5, [sp]
   16b68:	mov	r3, #8
   16b6c:	mov	r2, #0
   16b70:	mov	r1, #29
   16b74:	mov	r0, r4
   16b78:	bl	2b3d4 <flatcc_verify_vector_field@@Base>
   16b7c:	cmp	r0, #0
   16b80:	bne	16a50 <_start@@Base+0x19c4>
   16b84:	ldr	r7, [pc, #692]	; 16e40 <_start@@Base+0x1db4>
   16b88:	mov	r2, r0
   16b8c:	mov	r3, r7
   16b90:	mov	r1, #12
   16b94:	mov	r0, r4
   16b98:	bl	2b67c <flatcc_verify_table_field@@Base>
   16b9c:	cmp	r0, #0
   16ba0:	bne	16a50 <_start@@Base+0x19c4>
   16ba4:	mov	r2, r0
   16ba8:	ldr	r3, [pc, #660]	; 16e44 <_start@@Base+0x1db8>
   16bac:	mov	r1, #8
   16bb0:	mov	r0, r4
   16bb4:	bl	2c710 <flatcc_verify_union_field@@Base>
   16bb8:	cmp	r0, #0
   16bbc:	bne	16a50 <_start@@Base+0x19c4>
   16bc0:	mvn	r8, #-1073741824	; 0xc0000000
   16bc4:	mov	r6, #2
   16bc8:	mov	r2, r0
   16bcc:	stm	sp, {r6, r8}
   16bd0:	mov	r3, r5
   16bd4:	mov	r1, #9
   16bd8:	mov	r0, r4
   16bdc:	bl	2b3d4 <flatcc_verify_vector_field@@Base>
   16be0:	cmp	r0, #0
   16be4:	bne	16a50 <_start@@Base+0x19c4>
   16be8:	mov	r2, r0
   16bec:	stm	sp, {r6, r8}
   16bf0:	mov	r3, r5
   16bf4:	mov	r1, #31
   16bf8:	mov	r0, r4
   16bfc:	bl	2b3d4 <flatcc_verify_vector_field@@Base>
   16c00:	cmp	r0, #0
   16c04:	bne	16a50 <_start@@Base+0x19c4>
   16c08:	mov	r6, #1
   16c0c:	mov	r3, r0
   16c10:	mov	r2, r0
   16c14:	stm	sp, {r6, r7}
   16c18:	mov	r1, #13
   16c1c:	mov	r0, r4
   16c20:	bl	2c480 <flatcc_verify_table_as_nested_root@@Base>
   16c24:	cmp	r0, #0
   16c28:	bne	16a50 <_start@@Base+0x19c4>
   16c2c:	mov	r2, r0
   16c30:	ldr	r3, [pc, #528]	; 16e48 <_start@@Base+0x1dbc>
   16c34:	mov	r1, #14
   16c38:	mov	r0, r4
   16c3c:	bl	2b67c <flatcc_verify_table_field@@Base>
   16c40:	cmp	r0, #0
   16c44:	bne	16a50 <_start@@Base+0x19c4>
   16c48:	mov	r3, r6
   16c4c:	mov	r2, r6
   16c50:	mov	r1, #15
   16c54:	mov	r0, r4
   16c58:	bl	2b284 <flatcc_verify_field@@Base>
   16c5c:	cmp	r0, #0
   16c60:	bne	16a50 <_start@@Base+0x19c4>
   16c64:	mov	r3, r5
   16c68:	mov	r2, r5
   16c6c:	mov	r1, #16
   16c70:	mov	r0, r4
   16c74:	bl	2b284 <flatcc_verify_field@@Base>
   16c78:	cmp	r0, #0
   16c7c:	bne	16a50 <_start@@Base+0x19c4>
   16c80:	mov	r3, r5
   16c84:	mov	r2, r5
   16c88:	mov	r1, #17
   16c8c:	mov	r0, r4
   16c90:	bl	2b284 <flatcc_verify_field@@Base>
   16c94:	cmp	r0, #0
   16c98:	bne	16a50 <_start@@Base+0x19c4>
   16c9c:	mov	r3, #8
   16ca0:	mov	r2, r3
   16ca4:	mov	r1, #18
   16ca8:	mov	r0, r4
   16cac:	bl	2b284 <flatcc_verify_field@@Base>
   16cb0:	cmp	r0, #0
   16cb4:	bne	16a50 <_start@@Base+0x19c4>
   16cb8:	mov	r3, #8
   16cbc:	mov	r2, r3
   16cc0:	mov	r1, #19
   16cc4:	mov	r0, r4
   16cc8:	bl	2b284 <flatcc_verify_field@@Base>
   16ccc:	cmp	r0, #0
   16cd0:	bne	16a50 <_start@@Base+0x19c4>
   16cd4:	mov	r3, r5
   16cd8:	mov	r2, r5
   16cdc:	mov	r1, #20
   16ce0:	mov	r0, r4
   16ce4:	bl	2b284 <flatcc_verify_field@@Base>
   16ce8:	cmp	r0, #0
   16cec:	bne	16a50 <_start@@Base+0x19c4>
   16cf0:	mov	r3, r5
   16cf4:	mov	r2, r5
   16cf8:	mov	r1, #21
   16cfc:	mov	r0, r4
   16d00:	bl	2b284 <flatcc_verify_field@@Base>
   16d04:	cmp	r0, #0
   16d08:	bne	16a50 <_start@@Base+0x19c4>
   16d0c:	mov	r3, #8
   16d10:	mov	r2, r3
   16d14:	mov	r1, #22
   16d18:	mov	r0, r4
   16d1c:	bl	2b284 <flatcc_verify_field@@Base>
   16d20:	cmp	r0, #0
   16d24:	bne	16a50 <_start@@Base+0x19c4>
   16d28:	mov	r3, #8
   16d2c:	mov	r2, r3
   16d30:	mov	r1, #23
   16d34:	mov	r0, r4
   16d38:	bl	2b284 <flatcc_verify_field@@Base>
   16d3c:	cmp	r0, #0
   16d40:	bne	16a50 <_start@@Base+0x19c4>
   16d44:	mov	r3, r5
   16d48:	mov	r2, r5
   16d4c:	mov	r1, #25
   16d50:	mov	r0, r4
   16d54:	bl	2b284 <flatcc_verify_field@@Base>
   16d58:	cmp	r0, #0
   16d5c:	bne	16a50 <_start@@Base+0x19c4>
   16d60:	mov	r3, r5
   16d64:	mov	r2, r5
   16d68:	mov	r1, #26
   16d6c:	mov	r0, r4
   16d70:	bl	2b284 <flatcc_verify_field@@Base>
   16d74:	cmp	r0, #0
   16d78:	bne	16a50 <_start@@Base+0x19c4>
   16d7c:	mov	r3, r5
   16d80:	mov	r2, r5
   16d84:	mov	r1, #27
   16d88:	mov	r0, r4
   16d8c:	bl	2b284 <flatcc_verify_field@@Base>
   16d90:	cmp	r0, #0
   16d94:	bne	16a50 <_start@@Base+0x19c4>
   16d98:	mvn	r1, #0
   16d9c:	mov	r2, r0
   16da0:	str	r1, [sp, #4]
   16da4:	mov	r3, r6
   16da8:	str	r6, [sp]
   16dac:	mov	r1, #30
   16db0:	mov	r0, r4
   16db4:	bl	2b3d4 <flatcc_verify_vector_field@@Base>
   16db8:	cmp	r0, #0
   16dbc:	bne	16a50 <_start@@Base+0x19c4>
   16dc0:	mov	r5, #8
   16dc4:	mvn	r6, #-536870912	; 0xe0000000
   16dc8:	mov	r3, r5
   16dcc:	stm	sp, {r5, r6}
   16dd0:	mov	r2, #0
   16dd4:	mov	r1, #32
   16dd8:	mov	r0, r4
   16ddc:	bl	2b3d4 <flatcc_verify_vector_field@@Base>
   16de0:	cmp	r0, #0
   16de4:	bne	16a50 <_start@@Base+0x19c4>
   16de8:	mov	r2, r0
   16dec:	stm	sp, {r5, r6}
   16df0:	mov	r3, r5
   16df4:	mov	r1, #33	; 0x21
   16df8:	mov	r0, r4
   16dfc:	bl	2b3d4 <flatcc_verify_vector_field@@Base>
   16e00:	cmp	r0, #0
   16e04:	bne	16a50 <_start@@Base+0x19c4>
   16e08:	mov	r2, r0
   16e0c:	ldr	r3, [pc, #56]	; 16e4c <_start@@Base+0x1dc0>
   16e10:	mov	r1, #34	; 0x22
   16e14:	mov	r0, r4
   16e18:	bl	2b67c <flatcc_verify_table_field@@Base>
   16e1c:	cmp	r0, #0
   16e20:	bne	16a50 <_start@@Base+0x19c4>
   16e24:	mov	r2, r0
   16e28:	ldr	r3, [pc, #32]	; 16e50 <_start@@Base+0x1dc4>
   16e2c:	mov	r0, r4
   16e30:	mov	r1, #35	; 0x23
   16e34:	add	sp, sp, #8
   16e38:	pop	{r4, r5, r6, r7, r8, lr}
   16e3c:	b	2b67c <flatcc_verify_table_field@@Base>
   16e40:	andeq	r6, r1, ip, lsr #20
   16e44:	ldrdeq	r6, [r1], -ip
   16e48:	andeq	r6, r1, ip, lsl #17
   16e4c:	strdeq	r7, [r1], -ip
   16e50:	andeq	r6, r1, r4, asr lr
   16e54:	push	{r4, r5, r6, lr}
   16e58:	mov	r4, #1
   16e5c:	sub	sp, sp, #8
   16e60:	mvn	r5, #0
   16e64:	mov	r2, #0
   16e68:	mov	r1, r2
   16e6c:	stm	sp, {r4, r5}
   16e70:	mov	r3, r4
   16e74:	mov	r6, r0
   16e78:	bl	2b3d4 <flatcc_verify_vector_field@@Base>
   16e7c:	subs	r2, r0, #0
   16e80:	beq	16e90 <_start@@Base+0x1e04>
   16e84:	mov	r0, r2
   16e88:	add	sp, sp, #8
   16e8c:	pop	{r4, r5, r6, pc}
   16e90:	stm	sp, {r4, r5}
   16e94:	mov	r3, r4
   16e98:	mov	r1, r4
   16e9c:	mov	r0, r6
   16ea0:	bl	2b3d4 <flatcc_verify_vector_field@@Base>
   16ea4:	subs	r2, r0, #0
   16ea8:	bne	16e84 <_start@@Base+0x1df8>
   16eac:	ldr	r3, [pc, #36]	; 16ed8 <_start@@Base+0x1e4c>
   16eb0:	str	r4, [sp]
   16eb4:	str	r3, [sp, #4]
   16eb8:	mov	r0, r6
   16ebc:	mov	r3, r2
   16ec0:	mov	r1, #2
   16ec4:	bl	2c480 <flatcc_verify_table_as_nested_root@@Base>
   16ec8:	mov	r2, r0
   16ecc:	mov	r0, r2
   16ed0:	add	sp, sp, #8
   16ed4:	pop	{r4, r5, r6, pc}
   16ed8:	andeq	r6, r1, ip, lsr #20
   16edc:	ldrb	r3, [r0, #12]
   16ee0:	sub	r3, r3, #1
   16ee4:	cmp	r3, #3
   16ee8:	ldrls	pc, [pc, r3, lsl #2]
   16eec:	b	16f20 <_start@@Base+0x1e94>
   16ef0:	andeq	r6, r1, r8, lsl pc
   16ef4:	andeq	r6, r1, r0, lsl pc
   16ef8:	andeq	r6, r1, r8, lsl #30
   16efc:	andeq	r6, r1, r0, lsl #30
   16f00:	ldr	r1, [pc, #32]	; 16f28 <_start@@Base+0x1e9c>
   16f04:	b	2bad0 <flatcc_verify_union_table@@Base>
   16f08:	ldr	r1, [pc, #28]	; 16f2c <_start@@Base+0x1ea0>
   16f0c:	b	2bad0 <flatcc_verify_union_table@@Base>
   16f10:	ldr	r1, [pc, #24]	; 16f30 <_start@@Base+0x1ea4>
   16f14:	b	2bad0 <flatcc_verify_union_table@@Base>
   16f18:	ldr	r1, [pc, #20]	; 16f34 <_start@@Base+0x1ea8>
   16f1c:	b	2bad0 <flatcc_verify_union_table@@Base>
   16f20:	mov	r0, #0
   16f24:	bx	lr
   16f28:	andeq	r6, r1, r8, lsr pc
   16f2c:	andeq	r5, r1, ip, lsr r3
   16f30:	andeq	r6, r1, ip, lsl r8
   16f34:	andeq	r6, r1, ip, lsr #20
   16f38:	mov	r2, #0
   16f3c:	push	{r4, lr}
   16f40:	mov	r1, r2
   16f44:	ldr	r3, [pc, #64]	; 16f8c <_start@@Base+0x1f00>
   16f48:	mov	r4, r0
   16f4c:	bl	2b67c <flatcc_verify_table_field@@Base>
   16f50:	cmp	r0, #0
   16f54:	popne	{r4, pc}
   16f58:	mov	r2, r0
   16f5c:	ldr	r3, [pc, #44]	; 16f90 <_start@@Base+0x1f04>
   16f60:	mov	r1, #1
   16f64:	mov	r0, r4
   16f68:	bl	2b67c <flatcc_verify_table_field@@Base>
   16f6c:	cmp	r0, #0
   16f70:	popne	{r4, pc}
   16f74:	mov	r2, r0
   16f78:	ldr	r3, [pc, #20]	; 16f94 <_start@@Base+0x1f08>
   16f7c:	mov	r0, r4
   16f80:	mov	r1, #3
   16f84:	pop	{r4, lr}
   16f88:	b	2c87c <flatcc_verify_union_vector_field@@Base>
   16f8c:	andeq	r6, r1, ip, asr #19
   16f90:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   16f94:	ldrdeq	r6, [r1], -ip
   16f98:	push	{r4, lr}
   16f9c:	mov	r2, #0
   16fa0:	ldr	r3, [pc, #124]	; 17024 <_start@@Base+0x1f98>
   16fa4:	mov	r1, #1
   16fa8:	mov	r4, r0
   16fac:	bl	2c710 <flatcc_verify_union_field@@Base>
   16fb0:	cmp	r0, #0
   16fb4:	popne	{r4, pc}
   16fb8:	mov	r2, r0
   16fbc:	ldr	r3, [pc, #96]	; 17024 <_start@@Base+0x1f98>
   16fc0:	mov	r1, #3
   16fc4:	mov	r0, r4
   16fc8:	bl	2c710 <flatcc_verify_union_field@@Base>
   16fcc:	cmp	r0, #0
   16fd0:	popne	{r4, pc}
   16fd4:	mov	r2, r0
   16fd8:	ldr	r3, [pc, #68]	; 17024 <_start@@Base+0x1f98>
   16fdc:	mov	r1, #5
   16fe0:	mov	r0, r4
   16fe4:	bl	2c710 <flatcc_verify_union_field@@Base>
   16fe8:	cmp	r0, #0
   16fec:	popne	{r4, pc}
   16ff0:	mov	r2, r0
   16ff4:	ldr	r3, [pc, #40]	; 17024 <_start@@Base+0x1f98>
   16ff8:	mov	r1, #7
   16ffc:	mov	r0, r4
   17000:	bl	2c710 <flatcc_verify_union_field@@Base>
   17004:	cmp	r0, #0
   17008:	popne	{r4, pc}
   1700c:	mov	r2, r0
   17010:	ldr	r3, [pc, #12]	; 17024 <_start@@Base+0x1f98>
   17014:	mov	r0, r4
   17018:	mov	r1, #9
   1701c:	pop	{r4, lr}
   17020:	b	2c87c <flatcc_verify_union_vector_field@@Base>
   17024:	andeq	r7, r1, r8, lsr #32
   17028:	ldrb	r3, [r0, #12]
   1702c:	cmp	r3, #9
   17030:	beq	1706c <_start@@Base+0x1fe0>
   17034:	bls	17050 <_start@@Base+0x1fc4>
   17038:	cmp	r3, #11
   1703c:	beq	1704c <_start@@Base+0x1fc0>
   17040:	bcc	1706c <_start@@Base+0x1fe0>
   17044:	cmp	r3, #255	; 0xff
   17048:	bne	17078 <_start@@Base+0x1fec>
   1704c:	b	2bc24 <flatcc_verify_union_string@@Base>
   17050:	cmp	r3, #2
   17054:	beq	17080 <_start@@Base+0x1ff4>
   17058:	cmp	r3, #8
   1705c:	bne	17078 <_start@@Base+0x1fec>
   17060:	mov	r2, #2
   17064:	mov	r1, r2
   17068:	b	2bbc8 <flatcc_verify_union_struct@@Base>
   1706c:	mov	r2, #4
   17070:	mov	r1, r2
   17074:	b	2bbc8 <flatcc_verify_union_struct@@Base>
   17078:	mov	r0, #0
   1707c:	bx	lr
   17080:	ldr	r1, [pc]	; 17088 <_start@@Base+0x1ffc>
   17084:	b	2bad0 <flatcc_verify_union_table@@Base>
   17088:	andeq	r5, r1, r4, asr #6
   1708c:	sub	r1, r1, #1
   17090:	cmp	r1, #3
   17094:	ldrls	pc, [pc, r1, lsl #2]
   17098:	b	170dc <_start@@Base+0x2050>
   1709c:	ldrdeq	r7, [r1], -r0
   170a0:	andeq	r7, r1, r4, asr #1
   170a4:	strheq	r7, [r1], -r8
   170a8:	andeq	r7, r1, ip, lsr #1
   170ac:	mov	r2, #3
   170b0:	ldr	r1, [pc, #48]	; 170e8 <_start@@Base+0x205c>
   170b4:	b	363b8 <flatcc_json_printer_enum@@Base>
   170b8:	mov	r2, #8
   170bc:	ldr	r1, [pc, #40]	; 170ec <_start@@Base+0x2060>
   170c0:	b	363b8 <flatcc_json_printer_enum@@Base>
   170c4:	mov	r2, #23
   170c8:	ldr	r1, [pc, #32]	; 170f0 <_start@@Base+0x2064>
   170cc:	b	363b8 <flatcc_json_printer_enum@@Base>
   170d0:	mov	r2, #7
   170d4:	ldr	r1, [pc, #24]	; 170f4 <_start@@Base+0x2068>
   170d8:	b	363b8 <flatcc_json_printer_enum@@Base>
   170dc:	mov	r2, #4
   170e0:	ldr	r1, [pc, #16]	; 170f8 <_start@@Base+0x206c>
   170e4:	b	363b8 <flatcc_json_printer_enum@@Base>
   170e8:	andeq	r1, r4, ip, lsr #21
   170ec:	andeq	r1, r4, r0, lsr #21
   170f0:	andeq	r1, r4, r8, lsl #21
   170f4:	andeq	r1, r4, r0, lsl #21
   170f8:	andeq	r5, r4, r0, lsl r6
   170fc:	push	{r4, r5, r6, r7, lr}
   17100:	mov	r4, #0
   17104:	sub	sp, sp, #28
   17108:	mov	r5, #0
   1710c:	cmp	r1, r2
   17110:	strd	r4, [r3]
   17114:	strd	r4, [sp, #16]
   17118:	str	r4, [sp, #12]
   1711c:	moveq	r0, r1
   17120:	beq	17174 <_start@@Base+0x20e8>
   17124:	mov	r5, r3
   17128:	add	r3, sp, #16
   1712c:	str	r3, [sp]
   17130:	add	r3, sp, #12
   17134:	mov	r4, r1
   17138:	mov	r6, r2
   1713c:	mov	r7, r0
   17140:	bl	31c94 <flatcc_json_parser_integer@@Base>
   17144:	cmp	r4, r0
   17148:	beq	17174 <_start@@Base+0x20e8>
   1714c:	ldr	r1, [sp, #12]
   17150:	ldrd	r2, [sp, #16]
   17154:	cmp	r1, #0
   17158:	beq	1717c <_start@@Base+0x20f0>
   1715c:	cmp	r3, #-2147483648	; 0x80000000
   17160:	cmpeq	r2, #0
   17164:	bhi	17194 <_start@@Base+0x2108>
   17168:	rsbs	r2, r2, #0
   1716c:	rsc	r3, r3, #0
   17170:	strd	r2, [r5]
   17174:	add	sp, sp, #28
   17178:	pop	{r4, r5, r6, r7, pc}
   1717c:	cmp	r2, #0
   17180:	sbcs	r1, r3, #0
   17184:	blt	171ac <_start@@Base+0x2120>
   17188:	strd	r2, [r5]
   1718c:	add	sp, sp, #28
   17190:	pop	{r4, r5, r6, r7, pc}
   17194:	mov	r1, r0
   17198:	mov	r2, r6
   1719c:	mov	r0, r7
   171a0:	mov	r3, #8
   171a4:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   171a8:	b	17174 <_start@@Base+0x20e8>
   171ac:	mov	r1, r0
   171b0:	mov	r2, r6
   171b4:	mov	r0, r7
   171b8:	mov	r3, #7
   171bc:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   171c0:	b	17174 <_start@@Base+0x20e8>
   171c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171c8:	mov	r5, r1
   171cc:	sub	sp, sp, #28
   171d0:	mov	r6, r2
   171d4:	mov	r7, r0
   171d8:	ldr	r1, [pc, #260]	; 172e4 <_start@@Base+0x2258>
   171dc:	mov	r0, r2
   171e0:	ldr	r2, [pc, #256]	; 172e8 <_start@@Base+0x225c>
   171e4:	bl	145ac <fprintf@plt>
   171e8:	cmp	r5, #0
   171ec:	beq	172dc <_start@@Base+0x2250>
   171f0:	mov	r9, #0
   171f4:	ldr	fp, [pc, #240]	; 172ec <_start@@Base+0x2260>
   171f8:	ldr	sl, [pc, #240]	; 172f0 <_start@@Base+0x2264>
   171fc:	sub	r7, r7, #1
   17200:	add	r8, sp, #4
   17204:	b	17264 <_start@@Base+0x21d8>
   17208:	cmp	r9, #0
   1720c:	beq	17214 <_start@@Base+0x2188>
   17210:	bl	145ac <fprintf@plt>
   17214:	mov	r2, r9
   17218:	ldr	r1, [pc, #212]	; 172f4 <_start@@Base+0x2268>
   1721c:	mov	r0, r6
   17220:	bl	145ac <fprintf@plt>
   17224:	ldrb	r2, [r7, #1]
   17228:	mov	r1, sl
   1722c:	mov	r0, r6
   17230:	bl	145ac <fprintf@plt>
   17234:	ldrb	r2, [r7, #1]!
   17238:	add	r3, sp, #24
   1723c:	add	r3, r3, r4
   17240:	sub	r1, r2, #32
   17244:	cmp	r1, #94	; 0x5e
   17248:	add	r9, r9, #1
   1724c:	movhi	r2, #46	; 0x2e
   17250:	mov	r1, #0
   17254:	cmp	r9, r5
   17258:	strb	r1, [r3, #-19]	; 0xffffffed
   1725c:	strb	r2, [r3, #-20]	; 0xffffffec
   17260:	beq	17290 <_start@@Base+0x2204>
   17264:	ands	r4, r9, #15
   17268:	mov	r2, r8
   1726c:	mov	r1, fp
   17270:	mov	r0, r6
   17274:	beq	17208 <_start@@Base+0x217c>
   17278:	tst	r9, #7
   1727c:	bne	17224 <_start@@Base+0x2198>
   17280:	mov	r1, r6
   17284:	mov	r0, #32
   17288:	bl	145f4 <fputc@plt>
   1728c:	b	17224 <_start@@Base+0x2198>
   17290:	tst	r5, #15
   17294:	beq	172c4 <_start@@Base+0x2238>
   17298:	ldr	r9, [pc, #88]	; 172f8 <_start@@Base+0x226c>
   1729c:	mov	r7, #3
   172a0:	mov	r4, #1
   172a4:	add	r5, r5, #1
   172a8:	mov	r3, r6
   172ac:	mov	r2, r7
   172b0:	mov	r1, r4
   172b4:	mov	r0, r9
   172b8:	bl	14570 <fwrite@plt>
   172bc:	tst	r5, #15
   172c0:	bne	172a4 <_start@@Base+0x2218>
   172c4:	mov	r2, r8
   172c8:	mov	r0, r6
   172cc:	ldr	r1, [pc, #24]	; 172ec <_start@@Base+0x2260>
   172d0:	bl	145ac <fprintf@plt>
   172d4:	add	sp, sp, #28
   172d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172dc:	add	r8, sp, #4
   172e0:	b	172c4 <_start@@Base+0x2238>
   172e4:	andeq	r1, r4, r0, asr #21
   172e8:			; <UNDEFINED> instruction: 0x00041ab0
   172ec:	andeq	r1, r4, r8, asr #21
   172f0:	ldrdeq	r1, [r4], -r8
   172f4:	ldrdeq	r1, [r4], -r0
   172f8:	andeq	r1, r4, r0, ror #21
   172fc:	mov	r0, #0
   17300:	bx	lr
   17304:	bx	lr
   17308:	push	{r4, r5, r6, r7, lr}
   1730c:	sub	sp, sp, #340	; 0x154
   17310:	mov	r6, r0
   17314:	add	r0, sp, #104	; 0x68
   17318:	mov	r7, r2
   1731c:	bl	258d8 <flatcc_builder_init@@Base>
   17320:	mov	r1, #0
   17324:	add	r0, sp, #56	; 0x38
   17328:	bl	40b14 <flatcc_json_printer_init_dynamic_buffer@@Base>
   1732c:	mov	r4, #0
   17330:	mov	r0, r6
   17334:	str	r4, [sp, #82]	; 0x52
   17338:	bl	145a0 <strlen@plt>
   1733c:	ldr	r1, [pc, #288]	; 17464 <_start@@Base+0x23d8>
   17340:	ldr	r3, [pc, #288]	; 17468 <_start@@Base+0x23dc>
   17344:	str	r1, [sp, #8]
   17348:	str	r3, [sp, #4]
   1734c:	str	r4, [sp]
   17350:	mov	r2, r6
   17354:	add	r1, sp, #16
   17358:	mov	r3, r0
   1735c:	add	r0, sp, #104	; 0x68
   17360:	bl	33a28 <flatcc_json_parser_table_as_root@@Base>
   17364:	cmp	r0, #5
   17368:	beq	173f4 <_start@@Base+0x2368>
   1736c:	cmp	r0, r4
   17370:	ldr	r5, [pc, #244]	; 1746c <_start@@Base+0x23e0>
   17374:	bne	17418 <_start@@Base+0x238c>
   17378:	mov	r0, #5
   1737c:	ldr	r4, [r5]
   17380:	bl	2e894 <flatcc_json_parser_error_string@@Base>
   17384:	mov	r2, r7
   17388:	ldr	r1, [pc, #224]	; 17470 <_start@@Base+0x23e4>
   1738c:	mov	r3, r0
   17390:	mov	r0, r4
   17394:	bl	145ac <fprintf@plt>
   17398:	mov	r2, r6
   1739c:	ldr	r0, [r5]
   173a0:	ldr	r1, [pc, #204]	; 17474 <_start@@Base+0x23e8>
   173a4:	bl	145ac <fprintf@plt>
   173a8:	ldr	r3, [sp, #32]
   173ac:	cmp	r3, #1
   173b0:	movgt	r4, #0
   173b4:	movgt	r6, #32
   173b8:	ble	173dc <_start@@Base+0x2350>
   173bc:	ldr	r1, [r5]
   173c0:	mov	r0, r6
   173c4:	bl	145f4 <fputc@plt>
   173c8:	ldr	r3, [sp, #32]
   173cc:	add	r4, r4, #1
   173d0:	sub	r3, r3, #1
   173d4:	cmp	r4, r3
   173d8:	blt	173bc <_start@@Base+0x2330>
   173dc:	ldr	r3, [r5]
   173e0:	mov	r2, #2
   173e4:	mov	r1, #1
   173e8:	ldr	r0, [pc, #136]	; 17478 <_start@@Base+0x23ec>
   173ec:	bl	14570 <fwrite@plt>
   173f0:	mvn	r4, #0
   173f4:	mov	r0, #0
   173f8:	bl	2ac9c <flatcc_builder_aligned_free@@Base>
   173fc:	add	r0, sp, #104	; 0x68
   17400:	bl	25b44 <flatcc_builder_clear@@Base>
   17404:	add	r0, sp, #56	; 0x38
   17408:	bl	40c24 <flatcc_json_printer_clear@@Base>
   1740c:	mov	r0, r4
   17410:	add	sp, sp, #340	; 0x154
   17414:	pop	{r4, r5, r6, r7, pc}
   17418:	ldr	r4, [r5]
   1741c:	bl	2e894 <flatcc_json_parser_error_string@@Base>
   17420:	mov	r2, r7
   17424:	ldr	r1, [pc, #80]	; 1747c <_start@@Base+0x23f0>
   17428:	mov	r3, r0
   1742c:	mov	r0, r4
   17430:	bl	145ac <fprintf@plt>
   17434:	mov	r0, #5
   17438:	ldr	r4, [r5]
   1743c:	bl	2e894 <flatcc_json_parser_error_string@@Base>
   17440:	ldr	r1, [pc, #56]	; 17480 <_start@@Base+0x23f4>
   17444:	mov	r2, r0
   17448:	mov	r0, r4
   1744c:	bl	145ac <fprintf@plt>
   17450:	mov	r2, r6
   17454:	ldr	r0, [r5]
   17458:	ldr	r1, [pc, #20]	; 17474 <_start@@Base+0x23e8>
   1745c:	bl	145ac <fprintf@plt>
   17460:	b	173a8 <_start@@Base+0x231c>
   17464:	andeq	fp, r1, r0, ror #15
   17468:	andeq	r1, r4, r4, ror #21
   1746c:			; <UNDEFINED> instruction: 0x000573b0
   17470:	andeq	r1, r4, r4, lsr fp
   17474:	andeq	r1, r4, r0, ror fp
   17478:	andeq	r1, r4, r4, ror fp
   1747c:	andeq	r1, r4, ip, ror #21
   17480:	andeq	r1, r4, r4, lsl fp
   17484:	push	{r4, r5, r6, r7, lr}
   17488:	mov	r4, #0
   1748c:	sub	sp, sp, #28
   17490:	mov	r5, #0
   17494:	cmp	r1, r2
   17498:	strd	r4, [r3]
   1749c:	strd	r4, [sp, #16]
   174a0:	str	r4, [sp, #12]
   174a4:	moveq	r0, r1
   174a8:	beq	174e8 <_start@@Base+0x245c>
   174ac:	mov	r5, r3
   174b0:	add	r3, sp, #16
   174b4:	str	r3, [sp]
   174b8:	add	r3, sp, #12
   174bc:	mov	r4, r1
   174c0:	mov	r6, r2
   174c4:	mov	r7, r0
   174c8:	bl	31c94 <flatcc_json_parser_integer@@Base>
   174cc:	cmp	r4, r0
   174d0:	beq	174e8 <_start@@Base+0x245c>
   174d4:	ldr	r3, [sp, #12]
   174d8:	cmp	r3, #0
   174dc:	bne	174f0 <_start@@Base+0x2464>
   174e0:	ldrd	r2, [sp, #16]
   174e4:	strd	r2, [r5]
   174e8:	add	sp, sp, #28
   174ec:	pop	{r4, r5, r6, r7, pc}
   174f0:	mov	r1, r0
   174f4:	mov	r2, r6
   174f8:	mov	r0, r7
   174fc:	mov	r3, #8
   17500:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   17504:	add	sp, sp, #28
   17508:	pop	{r4, r5, r6, r7, pc}
   1750c:	push	{r4, r5, r6, r7, r8, r9, lr}
   17510:	mov	r6, #0
   17514:	sub	sp, sp, #28
   17518:	mov	r7, #0
   1751c:	mov	lr, #0
   17520:	cmp	r1, r2
   17524:	str	lr, [r3]
   17528:	str	lr, [sp, #12]
   1752c:	strd	r6, [sp, #16]
   17530:	moveq	r0, r1
   17534:	beq	17588 <_start@@Base+0x24fc>
   17538:	mov	r5, r3
   1753c:	add	r3, sp, #16
   17540:	str	r3, [sp]
   17544:	add	r3, sp, #12
   17548:	mov	r4, r1
   1754c:	mov	r7, r0
   17550:	mov	r6, r2
   17554:	bl	31c94 <flatcc_json_parser_integer@@Base>
   17558:	cmp	r4, r0
   1755c:	beq	17588 <_start@@Base+0x24fc>
   17560:	ldr	r3, [sp, #12]
   17564:	cmp	r3, #0
   17568:	bne	17590 <_start@@Base+0x2504>
   1756c:	ldrd	r2, [sp, #16]
   17570:	mov	r9, #0
   17574:	mvn	r8, #0
   17578:	cmp	r3, r9
   1757c:	cmpeq	r2, r8
   17580:	strls	r2, [r5]
   17584:	bhi	175ac <_start@@Base+0x2520>
   17588:	add	sp, sp, #28
   1758c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17590:	mov	r1, r0
   17594:	mov	r2, r6
   17598:	mov	r0, r7
   1759c:	mov	r3, #8
   175a0:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   175a4:	add	sp, sp, #28
   175a8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   175ac:	mov	r1, r0
   175b0:	mov	r2, r6
   175b4:	mov	r0, r7
   175b8:	mov	r3, #7
   175bc:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   175c0:	add	sp, sp, #28
   175c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   175c8:	push	{r4, r5, r6, r7, lr}
   175cc:	mov	r6, #0
   175d0:	sub	sp, sp, #28
   175d4:	mov	r7, #0
   175d8:	mov	lr, #0
   175dc:	cmp	r1, r2
   175e0:	strb	lr, [r3]
   175e4:	str	lr, [sp, #12]
   175e8:	strd	r6, [sp, #16]
   175ec:	moveq	r0, r1
   175f0:	beq	1763c <_start@@Base+0x25b0>
   175f4:	mov	r5, r3
   175f8:	add	r3, sp, #16
   175fc:	str	r3, [sp]
   17600:	add	r3, sp, #12
   17604:	mov	r4, r1
   17608:	mov	r7, r0
   1760c:	mov	r6, r2
   17610:	bl	31c94 <flatcc_json_parser_integer@@Base>
   17614:	cmp	r4, r0
   17618:	beq	1763c <_start@@Base+0x25b0>
   1761c:	ldr	r3, [sp, #12]
   17620:	cmp	r3, #0
   17624:	bne	17644 <_start@@Base+0x25b8>
   17628:	ldrd	r2, [sp, #16]
   1762c:	cmp	r3, #0
   17630:	cmpeq	r2, #255	; 0xff
   17634:	strbls	r2, [r5]
   17638:	bhi	17660 <_start@@Base+0x25d4>
   1763c:	add	sp, sp, #28
   17640:	pop	{r4, r5, r6, r7, pc}
   17644:	mov	r1, r0
   17648:	mov	r2, r6
   1764c:	mov	r0, r7
   17650:	mov	r3, #8
   17654:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   17658:	add	sp, sp, #28
   1765c:	pop	{r4, r5, r6, r7, pc}
   17660:	mov	r1, r0
   17664:	mov	r2, r6
   17668:	mov	r0, r7
   1766c:	mov	r3, #7
   17670:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   17674:	add	sp, sp, #28
   17678:	pop	{r4, r5, r6, r7, pc}
   1767c:	push	{r4, r5, r6, r7, lr}
   17680:	sub	sp, sp, #340	; 0x154
   17684:	mov	r6, r0
   17688:	add	r0, sp, #104	; 0x68
   1768c:	mov	r7, r2
   17690:	bl	258d8 <flatcc_builder_init@@Base>
   17694:	mov	r1, #0
   17698:	add	r0, sp, #56	; 0x38
   1769c:	bl	40b14 <flatcc_json_printer_init_dynamic_buffer@@Base>
   176a0:	mov	r4, #0
   176a4:	mov	r0, r6
   176a8:	str	r4, [sp, #82]	; 0x52
   176ac:	bl	145a0 <strlen@plt>
   176b0:	ldr	r1, [pc, #288]	; 177d8 <_start@@Base+0x274c>
   176b4:	ldr	r3, [pc, #288]	; 177dc <_start@@Base+0x2750>
   176b8:	str	r1, [sp, #8]
   176bc:	str	r3, [sp, #4]
   176c0:	str	r4, [sp]
   176c4:	mov	r2, r6
   176c8:	add	r1, sp, #16
   176cc:	mov	r3, r0
   176d0:	add	r0, sp, #104	; 0x68
   176d4:	bl	33a28 <flatcc_json_parser_table_as_root@@Base>
   176d8:	cmp	r0, #13
   176dc:	beq	17768 <_start@@Base+0x26dc>
   176e0:	cmp	r0, r4
   176e4:	ldr	r5, [pc, #244]	; 177e0 <_start@@Base+0x2754>
   176e8:	bne	1778c <_start@@Base+0x2700>
   176ec:	mov	r0, #13
   176f0:	ldr	r4, [r5]
   176f4:	bl	2e894 <flatcc_json_parser_error_string@@Base>
   176f8:	mov	r2, r7
   176fc:	ldr	r1, [pc, #224]	; 177e4 <_start@@Base+0x2758>
   17700:	mov	r3, r0
   17704:	mov	r0, r4
   17708:	bl	145ac <fprintf@plt>
   1770c:	mov	r2, r6
   17710:	ldr	r0, [r5]
   17714:	ldr	r1, [pc, #204]	; 177e8 <_start@@Base+0x275c>
   17718:	bl	145ac <fprintf@plt>
   1771c:	ldr	r3, [sp, #32]
   17720:	cmp	r3, #1
   17724:	movgt	r4, #0
   17728:	movgt	r6, #32
   1772c:	ble	17750 <_start@@Base+0x26c4>
   17730:	ldr	r1, [r5]
   17734:	mov	r0, r6
   17738:	bl	145f4 <fputc@plt>
   1773c:	ldr	r3, [sp, #32]
   17740:	add	r4, r4, #1
   17744:	sub	r3, r3, #1
   17748:	cmp	r4, r3
   1774c:	blt	17730 <_start@@Base+0x26a4>
   17750:	ldr	r3, [r5]
   17754:	mov	r2, #2
   17758:	mov	r1, #1
   1775c:	ldr	r0, [pc, #136]	; 177ec <_start@@Base+0x2760>
   17760:	bl	14570 <fwrite@plt>
   17764:	mvn	r4, #0
   17768:	mov	r0, #0
   1776c:	bl	2ac9c <flatcc_builder_aligned_free@@Base>
   17770:	add	r0, sp, #104	; 0x68
   17774:	bl	25b44 <flatcc_builder_clear@@Base>
   17778:	add	r0, sp, #56	; 0x38
   1777c:	bl	40c24 <flatcc_json_printer_clear@@Base>
   17780:	mov	r0, r4
   17784:	add	sp, sp, #340	; 0x154
   17788:	pop	{r4, r5, r6, r7, pc}
   1778c:	ldr	r4, [r5]
   17790:	bl	2e894 <flatcc_json_parser_error_string@@Base>
   17794:	mov	r2, r7
   17798:	ldr	r1, [pc, #80]	; 177f0 <_start@@Base+0x2764>
   1779c:	mov	r3, r0
   177a0:	mov	r0, r4
   177a4:	bl	145ac <fprintf@plt>
   177a8:	mov	r0, #13
   177ac:	ldr	r4, [r5]
   177b0:	bl	2e894 <flatcc_json_parser_error_string@@Base>
   177b4:	ldr	r1, [pc, #56]	; 177f4 <_start@@Base+0x2768>
   177b8:	mov	r2, r0
   177bc:	mov	r0, r4
   177c0:	bl	145ac <fprintf@plt>
   177c4:	mov	r2, r6
   177c8:	ldr	r0, [r5]
   177cc:	ldr	r1, [pc, #20]	; 177e8 <_start@@Base+0x275c>
   177d0:	bl	145ac <fprintf@plt>
   177d4:	b	1771c <_start@@Base+0x2690>
   177d8:	andeq	fp, r1, r0, ror #15
   177dc:	andeq	r1, r4, r4, ror #21
   177e0:			; <UNDEFINED> instruction: 0x000573b0
   177e4:	andeq	r1, r4, r4, lsr fp
   177e8:	andeq	r1, r4, r0, ror fp
   177ec:	andeq	r1, r4, r4, ror fp
   177f0:	andeq	r1, r4, ip, ror #21
   177f4:	andeq	r1, r4, r4, lsl fp
   177f8:	push	{r4, r5, r6, r7, r8, r9, lr}
   177fc:	mov	r6, #0
   17800:	sub	sp, sp, #28
   17804:	mov	r7, #0
   17808:	mov	lr, #0
   1780c:	cmp	r1, r2
   17810:	str	lr, [r3]
   17814:	str	lr, [sp, #12]
   17818:	strd	r6, [sp, #16]
   1781c:	moveq	r0, r1
   17820:	beq	17870 <_start@@Base+0x27e4>
   17824:	mov	r5, r3
   17828:	add	r3, sp, #16
   1782c:	str	r3, [sp]
   17830:	add	r3, sp, #12
   17834:	mov	r4, r1
   17838:	mov	r7, r0
   1783c:	mov	r6, r2
   17840:	bl	31c94 <flatcc_json_parser_integer@@Base>
   17844:	cmp	r4, r0
   17848:	beq	17870 <_start@@Base+0x27e4>
   1784c:	ldr	r1, [sp, #12]
   17850:	ldrd	r2, [sp, #16]
   17854:	cmp	r1, #0
   17858:	beq	17878 <_start@@Base+0x27ec>
   1785c:	cmp	r3, #0
   17860:	cmpeq	r2, #-2147483648	; 0x80000000
   17864:	rsbls	r2, r2, #0
   17868:	strls	r2, [r5]
   1786c:	bhi	178a8 <_start@@Base+0x281c>
   17870:	add	sp, sp, #28
   17874:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17878:	mov	r9, #0
   1787c:	cmp	r3, r9
   17880:	mvn	r8, #-2147483648	; 0x80000000
   17884:	cmpeq	r2, r8
   17888:	strls	r2, [r5]
   1788c:	bls	17870 <_start@@Base+0x27e4>
   17890:	mov	r1, r0
   17894:	mov	r2, r6
   17898:	mov	r0, r7
   1789c:	mov	r3, #7
   178a0:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   178a4:	b	17870 <_start@@Base+0x27e4>
   178a8:	mov	r1, r0
   178ac:	mov	r2, r6
   178b0:	mov	r0, r7
   178b4:	mov	r3, #8
   178b8:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   178bc:	b	17870 <_start@@Base+0x27e4>
   178c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   178c4:	mov	r6, #0
   178c8:	sub	sp, sp, #28
   178cc:	mov	r7, #0
   178d0:	mov	lr, #0
   178d4:	cmp	r1, r2
   178d8:	strh	lr, [r3]
   178dc:	str	lr, [sp, #12]
   178e0:	strd	r6, [sp, #16]
   178e4:	moveq	r0, r1
   178e8:	beq	17938 <_start@@Base+0x28ac>
   178ec:	mov	r5, r3
   178f0:	add	r3, sp, #16
   178f4:	str	r3, [sp]
   178f8:	add	r3, sp, #12
   178fc:	mov	r4, r1
   17900:	mov	r7, r0
   17904:	mov	r6, r2
   17908:	bl	31c94 <flatcc_json_parser_integer@@Base>
   1790c:	cmp	r4, r0
   17910:	beq	17938 <_start@@Base+0x28ac>
   17914:	ldr	r1, [sp, #12]
   17918:	ldrd	r2, [sp, #16]
   1791c:	cmp	r1, #0
   17920:	beq	17940 <_start@@Base+0x28b4>
   17924:	cmp	r3, #0
   17928:	cmpeq	r2, #32768	; 0x8000
   1792c:	rsbls	r2, r2, #0
   17930:	strhls	r2, [r5]
   17934:	bhi	17970 <_start@@Base+0x28e4>
   17938:	add	sp, sp, #28
   1793c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17940:	ldr	r8, [pc, #64]	; 17988 <_start@@Base+0x28fc>
   17944:	mov	r9, #0
   17948:	cmp	r3, r9
   1794c:	cmpeq	r2, r8
   17950:	strhls	r2, [r5]
   17954:	bls	17938 <_start@@Base+0x28ac>
   17958:	mov	r1, r0
   1795c:	mov	r2, r6
   17960:	mov	r0, r7
   17964:	mov	r3, #7
   17968:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1796c:	b	17938 <_start@@Base+0x28ac>
   17970:	mov	r1, r0
   17974:	mov	r2, r6
   17978:	mov	r0, r7
   1797c:	mov	r3, #8
   17980:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   17984:	b	17938 <_start@@Base+0x28ac>
   17988:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1798c:	mov	r3, #8
   17990:	push	{r4, lr}
   17994:	mov	r2, r3
   17998:	mov	r1, #0
   1799c:	mov	r4, r0
   179a0:	bl	2b284 <flatcc_verify_field@@Base>
   179a4:	cmp	r0, #0
   179a8:	popne	{r4, pc}
   179ac:	mov	r3, #4
   179b0:	mov	r0, r4
   179b4:	mov	r2, r3
   179b8:	mov	r1, #1
   179bc:	pop	{r4, lr}
   179c0:	b	2b284 <flatcc_verify_field@@Base>
   179c4:	push	{r4, r5, r6, r7, r8, lr}
   179c8:	sub	sp, sp, #344	; 0x158
   179cc:	mov	r5, r0
   179d0:	ldr	r4, [sp, #368]	; 0x170
   179d4:	add	r0, sp, #112	; 0x70
   179d8:	mov	r7, r2
   179dc:	mov	r8, r3
   179e0:	mov	r6, r1
   179e4:	bl	258d8 <flatcc_builder_init@@Base>
   179e8:	mov	r1, #0
   179ec:	add	r0, sp, #64	; 0x40
   179f0:	bl	40b14 <flatcc_json_printer_init_dynamic_buffer@@Base>
   179f4:	lsr	r3, r4, #3
   179f8:	tst	r4, #16
   179fc:	and	r3, r3, #1
   17a00:	lsr	r1, r4, #1
   17a04:	and	r1, r1, #1
   17a08:	lsr	r2, r4, #2
   17a0c:	strb	r3, [sp, #93]	; 0x5d
   17a10:	movne	r3, #2
   17a14:	and	r2, r2, #1
   17a18:	strb	r1, [sp, #91]	; 0x5b
   17a1c:	strbne	r3, [sp, #89]	; 0x59
   17a20:	and	r1, r4, #1
   17a24:	tst	r4, #32
   17a28:	strb	r2, [sp, #92]	; 0x5c
   17a2c:	strb	r1, [sp, #90]	; 0x5a
   17a30:	beq	17a4c <_start@@Base+0x29c0>
   17a34:	mov	r3, #2
   17a38:	mov	r2, #1
   17a3c:	strb	r3, [sp, #89]	; 0x59
   17a40:	mov	r3, #0
   17a44:	strb	r2, [sp, #90]	; 0x5a
   17a48:	strb	r3, [sp, #91]	; 0x5b
   17a4c:	mov	r0, r6
   17a50:	bl	145a0 <strlen@plt>
   17a54:	ldr	r2, [r5, #4]
   17a58:	ldr	r3, [r5]
   17a5c:	add	r1, sp, #24
   17a60:	str	r2, [sp, #8]
   17a64:	str	r3, [sp, #4]
   17a68:	str	r8, [sp]
   17a6c:	mov	r2, r6
   17a70:	mov	r3, r0
   17a74:	add	r0, sp, #112	; 0x70
   17a78:	bl	33a28 <flatcc_json_parser_table_as_root@@Base>
   17a7c:	cmp	r0, #0
   17a80:	beq	17b28 <_start@@Base+0x2a9c>
   17a84:	ldr	r5, [pc, #408]	; 17c24 <_start@@Base+0x2b98>
   17a88:	ldr	r4, [r5]
   17a8c:	bl	2e894 <flatcc_json_parser_error_string@@Base>
   17a90:	ldr	r2, [sp, #372]	; 0x174
   17a94:	ldr	r1, [pc, #396]	; 17c28 <_start@@Base+0x2b9c>
   17a98:	mov	r3, r0
   17a9c:	mov	r0, r4
   17aa0:	bl	145ac <fprintf@plt>
   17aa4:	mov	r2, r6
   17aa8:	ldr	r0, [r5]
   17aac:	ldr	r1, [pc, #376]	; 17c2c <_start@@Base+0x2ba0>
   17ab0:	bl	145ac <fprintf@plt>
   17ab4:	ldr	r3, [sp, #40]	; 0x28
   17ab8:	cmp	r3, #1
   17abc:	movgt	r4, #0
   17ac0:	movgt	r6, #32
   17ac4:	ble	17ae8 <_start@@Base+0x2a5c>
   17ac8:	ldr	r1, [r5]
   17acc:	mov	r0, r6
   17ad0:	bl	145f4 <fputc@plt>
   17ad4:	ldr	r3, [sp, #40]	; 0x28
   17ad8:	add	r4, r4, #1
   17adc:	sub	r3, r3, #1
   17ae0:	cmp	r4, r3
   17ae4:	blt	17ac8 <_start@@Base+0x2a3c>
   17ae8:	ldr	r3, [r5]
   17aec:	mov	r2, #2
   17af0:	mov	r1, #1
   17af4:	ldr	r0, [pc, #308]	; 17c30 <_start@@Base+0x2ba4>
   17af8:	bl	14570 <fwrite@plt>
   17afc:	mov	r4, #0
   17b00:	mvn	r5, #0
   17b04:	mov	r0, r4
   17b08:	bl	2ac9c <flatcc_builder_aligned_free@@Base>
   17b0c:	add	r0, sp, #112	; 0x70
   17b10:	bl	25b44 <flatcc_builder_clear@@Base>
   17b14:	add	r0, sp, #64	; 0x40
   17b18:	bl	40c24 <flatcc_json_printer_clear@@Base>
   17b1c:	mov	r0, r5
   17b20:	add	sp, sp, #344	; 0x158
   17b24:	pop	{r4, r5, r6, r7, r8, pc}
   17b28:	add	r1, sp, #16
   17b2c:	add	r0, sp, #112	; 0x70
   17b30:	bl	2ab8c <flatcc_builder_finalize_aligned_buffer@@Base>
   17b34:	ldr	r3, [r5, #12]
   17b38:	ldr	r2, [r5]
   17b3c:	ldr	r1, [sp, #16]
   17b40:	mov	r4, r0
   17b44:	bl	2bf88 <flatcc_verify_table_as_root@@Base>
   17b48:	cmp	r0, #0
   17b4c:	bne	17bfc <_start@@Base+0x2b70>
   17b50:	ldr	r1, [r5, #8]
   17b54:	ldr	r3, [r5]
   17b58:	ldr	r2, [sp, #16]
   17b5c:	str	r1, [sp]
   17b60:	add	r0, sp, #64	; 0x40
   17b64:	mov	r1, r4
   17b68:	bl	40520 <flatcc_json_printer_table_as_root@@Base>
   17b6c:	add	r1, sp, #20
   17b70:	add	r0, sp, #64	; 0x40
   17b74:	bl	40bb0 <flatcc_json_printer_get_buffer@@Base>
   17b78:	subs	r6, r0, #0
   17b7c:	beq	17b94 <_start@@Base+0x2b08>
   17b80:	mov	r1, r6
   17b84:	mov	r0, r7
   17b88:	bl	14528 <strcmp@plt>
   17b8c:	subs	r5, r0, #0
   17b90:	beq	17b04 <_start@@Base+0x2a78>
   17b94:	ldr	r5, [pc, #136]	; 17c24 <_start@@Base+0x2b98>
   17b98:	ldr	r2, [sp, #372]	; 0x174
   17b9c:	ldr	r1, [pc, #144]	; 17c34 <_start@@Base+0x2ba8>
   17ba0:	ldr	r0, [r5]
   17ba4:	bl	145ac <fprintf@plt>
   17ba8:	mov	r2, r6
   17bac:	ldr	r1, [pc, #120]	; 17c2c <_start@@Base+0x2ba0>
   17bb0:	ldr	r0, [r5]
   17bb4:	bl	145ac <fprintf@plt>
   17bb8:	mov	r2, #10
   17bbc:	mov	r1, #1
   17bc0:	ldr	r3, [r5]
   17bc4:	ldr	r0, [pc, #108]	; 17c38 <_start@@Base+0x2bac>
   17bc8:	bl	14570 <fwrite@plt>
   17bcc:	mov	r2, r7
   17bd0:	ldr	r0, [r5]
   17bd4:	ldr	r1, [pc, #80]	; 17c2c <_start@@Base+0x2ba0>
   17bd8:	bl	145ac <fprintf@plt>
   17bdc:	cmp	r4, #0
   17be0:	beq	17bf4 <_start@@Base+0x2b68>
   17be4:	ldr	r2, [r5]
   17be8:	ldr	r1, [sp, #16]
   17bec:	mov	r0, r4
   17bf0:	bl	171c4 <_start@@Base+0x2138>
   17bf4:	mvn	r5, #0
   17bf8:	b	17b04 <_start@@Base+0x2a78>
   17bfc:	ldr	r5, [pc, #32]	; 17c24 <_start@@Base+0x2b98>
   17c00:	ldr	r6, [r5]
   17c04:	bl	2b268 <flatcc_verify_error_string@@Base>
   17c08:	ldr	r3, [sp, #372]	; 0x174
   17c0c:	ldr	r2, [pc, #40]	; 17c3c <_start@@Base+0x2bb0>
   17c10:	ldr	r1, [pc, #40]	; 17c40 <_start@@Base+0x2bb4>
   17c14:	str	r0, [sp]
   17c18:	mov	r0, r6
   17c1c:	bl	145ac <fprintf@plt>
   17c20:	b	17bdc <_start@@Base+0x2b50>
   17c24:			; <UNDEFINED> instruction: 0x000573b0
   17c28:	andeq	r1, r4, r8, ror fp
   17c2c:	andeq	r1, r4, r0, ror fp
   17c30:	andeq	r1, r4, r4, ror fp
   17c34:	andeq	r1, r4, r0, lsl ip
   17c38:	andeq	r1, r4, r8, asr #24
   17c3c:	muleq	r4, ip, fp
   17c40:	andeq	r1, r4, r8, ror #23
   17c44:	cmp	r1, r2
   17c48:	beq	17c58 <_start@@Base+0x2bcc>
   17c4c:	ldrb	ip, [r1]
   17c50:	cmp	ip, #123	; 0x7b
   17c54:	beq	17c68 <_start@@Base+0x2bdc>
   17c58:	mov	ip, #0
   17c5c:	str	ip, [r3]
   17c60:	mov	r3, #21
   17c64:	b	2e8b4 <flatcc_json_parser_set_error@@Base>
   17c68:	push	{r4, r5, r6, lr}
   17c6c:	mov	r5, r0
   17c70:	add	r0, r1, #1
   17c74:	mov	r6, r3
   17c78:	sub	r3, r2, r0
   17c7c:	cmp	r3, #1
   17c80:	mov	r4, r2
   17c84:	ble	17c98 <_start@@Base+0x2c0c>
   17c88:	ldrb	r3, [r1, #1]
   17c8c:	cmp	r3, #32
   17c90:	bhi	17ca8 <_start@@Base+0x2c1c>
   17c94:	beq	17cc8 <_start@@Base+0x2c3c>
   17c98:	mov	r1, r0
   17c9c:	mov	r2, r4
   17ca0:	mov	r0, r5
   17ca4:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   17ca8:	cmp	r4, r0
   17cac:	beq	17cbc <_start@@Base+0x2c30>
   17cb0:	ldrb	r3, [r0]
   17cb4:	cmp	r3, #125	; 0x7d
   17cb8:	beq	17cdc <_start@@Base+0x2c50>
   17cbc:	mov	r3, #1
   17cc0:	str	r3, [r6]
   17cc4:	pop	{r4, r5, r6, pc}
   17cc8:	ldrb	r3, [r1, #2]
   17ccc:	cmp	r3, #32
   17cd0:	addhi	r0, r1, #2
   17cd4:	bls	17c98 <_start@@Base+0x2c0c>
   17cd8:	b	17ca8 <_start@@Base+0x2c1c>
   17cdc:	mov	r3, #0
   17ce0:	mov	r2, r4
   17ce4:	add	r1, r0, #1
   17ce8:	str	r3, [r6]
   17cec:	mov	r0, r5
   17cf0:	pop	{r4, r5, r6, lr}
   17cf4:	b	167a8 <_start@@Base+0x171c>
   17cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cfc:	sub	sp, sp, #36	; 0x24
   17d00:	mov	ip, #0
   17d04:	ldr	fp, [sp, #72]	; 0x48
   17d08:	cmp	r1, r2
   17d0c:	mov	r6, r2
   17d10:	str	r3, [sp, #12]
   17d14:	str	ip, [fp]
   17d18:	mov	r8, r0
   17d1c:	beq	17e6c <_start@@Base+0x2de0>
   17d20:	ldrb	r3, [r1]
   17d24:	cmp	r3, #34	; 0x22
   17d28:	beq	17e4c <_start@@Base+0x2dc0>
   17d2c:	mov	r3, #5
   17d30:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   17d34:	mov	r5, r0
   17d38:	sub	r3, r6, r0
   17d3c:	cmp	r3, #1
   17d40:	ble	17d54 <_start@@Base+0x2cc8>
   17d44:	ldrb	r3, [r5]
   17d48:	cmp	r3, #32
   17d4c:	bhi	17d68 <_start@@Base+0x2cdc>
   17d50:	beq	17e58 <_start@@Base+0x2dcc>
   17d54:	mov	r1, r5
   17d58:	mov	r2, r6
   17d5c:	mov	r0, r8
   17d60:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   17d64:	mov	r5, r0
   17d68:	cmp	r6, r5
   17d6c:	beq	17db8 <_start@@Base+0x2d2c>
   17d70:	add	sl, sp, #20
   17d74:	add	r9, sp, #24
   17d78:	ldr	r4, [sp, #12]
   17d7c:	b	17d94 <_start@@Base+0x2d08>
   17d80:	cmp	r5, r0
   17d84:	bne	17dc4 <_start@@Base+0x2d38>
   17d88:	ldr	r3, [r4, #4]!
   17d8c:	cmp	r3, #0
   17d90:	beq	17e00 <_start@@Base+0x2d74>
   17d94:	stm	sp, {r9, sl}
   17d98:	add	r3, sp, #16
   17d9c:	ldr	r7, [r4]
   17da0:	mov	r2, r6
   17da4:	mov	r1, r5
   17da8:	mov	r0, r8
   17dac:	blx	r7
   17db0:	cmp	r6, r0
   17db4:	bne	17d80 <_start@@Base+0x2cf4>
   17db8:	mov	r0, r6
   17dbc:	add	sp, sp, #36	; 0x24
   17dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17dc4:	ldr	r3, [sp, #16]
   17dc8:	mov	r7, r0
   17dcc:	cmp	r3, #0
   17dd0:	ldrd	r0, [sp, #24]
   17dd4:	beq	17e24 <_start@@Base+0x2d98>
   17dd8:	bl	413e4 <flatcc_json_printer_clear@@Base+0x7c0>
   17ddc:	vldr	s15, [fp]
   17de0:	ldr	r3, [sp, #20]
   17de4:	cmp	r3, #0
   17de8:	vmov	s14, r0
   17dec:	vsub.f32	s15, s15, s14
   17df0:	vstr	s15, [fp]
   17df4:	beq	17e44 <_start@@Base+0x2db8>
   17df8:	mov	r5, r7
   17dfc:	b	17d78 <_start@@Base+0x2cec>
   17e00:	mov	r2, r6
   17e04:	mov	r1, r5
   17e08:	mov	r0, r8
   17e0c:	mov	r3, #23
   17e10:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   17e14:	mov	r6, r0
   17e18:	mov	r0, r6
   17e1c:	add	sp, sp, #36	; 0x24
   17e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e24:	bl	413e4 <flatcc_json_printer_clear@@Base+0x7c0>
   17e28:	vldr	s15, [fp]
   17e2c:	ldr	r3, [sp, #20]
   17e30:	cmp	r3, #0
   17e34:	vmov	s14, r0
   17e38:	vadd.f32	s15, s15, s14
   17e3c:	vstr	s15, [fp]
   17e40:	bne	17df8 <_start@@Base+0x2d6c>
   17e44:	mov	r6, r7
   17e48:	b	17db8 <_start@@Base+0x2d2c>
   17e4c:	add	r5, r1, #1
   17e50:	sub	r3, r2, r5
   17e54:	b	17d3c <_start@@Base+0x2cb0>
   17e58:	ldrb	r3, [r5, #1]
   17e5c:	cmp	r3, #32
   17e60:	addhi	r5, r5, #1
   17e64:	bls	17d54 <_start@@Base+0x2cc8>
   17e68:	b	17d68 <_start@@Base+0x2cdc>
   17e6c:	mov	r5, r2
   17e70:	b	17d54 <_start@@Base+0x2cc8>
   17e74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e78:	sub	sp, sp, #36	; 0x24
   17e7c:	mov	r8, #0
   17e80:	ldr	fp, [sp, #72]	; 0x48
   17e84:	mov	r9, #0
   17e88:	cmp	r1, r2
   17e8c:	strd	r8, [fp]
   17e90:	mov	r6, r2
   17e94:	str	r3, [sp, #12]
   17e98:	mov	r8, r0
   17e9c:	beq	17fec <_start@@Base+0x2f60>
   17ea0:	ldrb	r3, [r1]
   17ea4:	cmp	r3, #34	; 0x22
   17ea8:	beq	17fcc <_start@@Base+0x2f40>
   17eac:	mov	r3, #5
   17eb0:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   17eb4:	mov	r5, r0
   17eb8:	sub	r3, r6, r0
   17ebc:	cmp	r3, #1
   17ec0:	ble	17ed4 <_start@@Base+0x2e48>
   17ec4:	ldrb	r3, [r5]
   17ec8:	cmp	r3, #32
   17ecc:	bhi	17ee8 <_start@@Base+0x2e5c>
   17ed0:	beq	17fd8 <_start@@Base+0x2f4c>
   17ed4:	mov	r1, r5
   17ed8:	mov	r2, r6
   17edc:	mov	r0, r8
   17ee0:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   17ee4:	mov	r5, r0
   17ee8:	cmp	r6, r5
   17eec:	beq	17f38 <_start@@Base+0x2eac>
   17ef0:	add	sl, sp, #20
   17ef4:	add	r9, sp, #24
   17ef8:	ldr	r4, [sp, #12]
   17efc:	b	17f14 <_start@@Base+0x2e88>
   17f00:	cmp	r5, r0
   17f04:	bne	17f44 <_start@@Base+0x2eb8>
   17f08:	ldr	r3, [r4, #4]!
   17f0c:	cmp	r3, #0
   17f10:	beq	17f80 <_start@@Base+0x2ef4>
   17f14:	stm	sp, {r9, sl}
   17f18:	add	r3, sp, #16
   17f1c:	ldr	r7, [r4]
   17f20:	mov	r2, r6
   17f24:	mov	r1, r5
   17f28:	mov	r0, r8
   17f2c:	blx	r7
   17f30:	cmp	r6, r0
   17f34:	bne	17f00 <_start@@Base+0x2e74>
   17f38:	mov	r0, r6
   17f3c:	add	sp, sp, #36	; 0x24
   17f40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f44:	ldr	r3, [sp, #16]
   17f48:	mov	r7, r0
   17f4c:	cmp	r3, #0
   17f50:	ldrd	r0, [sp, #24]
   17f54:	beq	17fa4 <_start@@Base+0x2f18>
   17f58:	bl	411ac <flatcc_json_printer_clear@@Base+0x588>
   17f5c:	vldr	d7, [fp]
   17f60:	ldr	r3, [sp, #20]
   17f64:	cmp	r3, #0
   17f68:	vmov	d6, r0, r1
   17f6c:	vsub.f64	d7, d7, d6
   17f70:	vstr	d7, [fp]
   17f74:	beq	17fc4 <_start@@Base+0x2f38>
   17f78:	mov	r5, r7
   17f7c:	b	17ef8 <_start@@Base+0x2e6c>
   17f80:	mov	r2, r6
   17f84:	mov	r1, r5
   17f88:	mov	r0, r8
   17f8c:	mov	r3, #23
   17f90:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   17f94:	mov	r6, r0
   17f98:	mov	r0, r6
   17f9c:	add	sp, sp, #36	; 0x24
   17fa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fa4:	bl	411ac <flatcc_json_printer_clear@@Base+0x588>
   17fa8:	vldr	d7, [fp]
   17fac:	ldr	r3, [sp, #20]
   17fb0:	cmp	r3, #0
   17fb4:	vmov	d6, r0, r1
   17fb8:	vadd.f64	d7, d7, d6
   17fbc:	vstr	d7, [fp]
   17fc0:	bne	17f78 <_start@@Base+0x2eec>
   17fc4:	mov	r6, r7
   17fc8:	b	17f38 <_start@@Base+0x2eac>
   17fcc:	add	r5, r1, #1
   17fd0:	sub	r3, r2, r5
   17fd4:	b	17ebc <_start@@Base+0x2e30>
   17fd8:	ldrb	r3, [r5, #1]
   17fdc:	cmp	r3, #32
   17fe0:	addhi	r5, r5, #1
   17fe4:	bls	17ed4 <_start@@Base+0x2e48>
   17fe8:	b	17ee8 <_start@@Base+0x2e5c>
   17fec:	mov	r5, r2
   17ff0:	b	17ed4 <_start@@Base+0x2e48>
   17ff4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ff8:	sub	sp, sp, #36	; 0x24
   17ffc:	mov	ip, #0
   18000:	str	r3, [sp, #12]
   18004:	ldr	r3, [sp, #72]	; 0x48
   18008:	cmp	r1, r2
   1800c:	mov	r7, r2
   18010:	strb	ip, [r3]
   18014:	mov	r8, r0
   18018:	beq	18174 <_start@@Base+0x30e8>
   1801c:	ldrb	r3, [r1]
   18020:	cmp	r3, #34	; 0x22
   18024:	beq	18154 <_start@@Base+0x30c8>
   18028:	mov	r3, #5
   1802c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18030:	mov	r6, r0
   18034:	sub	r3, r7, r0
   18038:	cmp	r3, #1
   1803c:	ble	18050 <_start@@Base+0x2fc4>
   18040:	ldrb	r3, [r6]
   18044:	cmp	r3, #32
   18048:	bhi	18064 <_start@@Base+0x2fd8>
   1804c:	beq	18160 <_start@@Base+0x30d4>
   18050:	mov	r1, r6
   18054:	mov	r2, r7
   18058:	mov	r0, r8
   1805c:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   18060:	mov	r6, r0
   18064:	cmp	r7, r6
   18068:	beq	180b8 <_start@@Base+0x302c>
   1806c:	mov	fp, #0
   18070:	add	sl, sp, #20
   18074:	add	r9, sp, #24
   18078:	ldr	r5, [sp, #12]
   1807c:	b	18094 <_start@@Base+0x3008>
   18080:	cmp	r6, r0
   18084:	bne	180c4 <_start@@Base+0x3038>
   18088:	ldr	r3, [r5, #4]!
   1808c:	cmp	r3, #0
   18090:	beq	18110 <_start@@Base+0x3084>
   18094:	stm	sp, {r9, sl}
   18098:	add	r3, sp, #16
   1809c:	ldr	r4, [r5]
   180a0:	mov	r2, r7
   180a4:	mov	r1, r6
   180a8:	mov	r0, r8
   180ac:	blx	r4
   180b0:	cmp	r7, r0
   180b4:	bne	18080 <_start@@Base+0x2ff4>
   180b8:	mov	r0, r7
   180bc:	add	sp, sp, #36	; 0x24
   180c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180c4:	ldr	r3, [sp, #16]
   180c8:	mov	r4, r0
   180cc:	cmp	r3, #0
   180d0:	bne	18134 <_start@@Base+0x30a8>
   180d4:	ldr	r2, [sp, #24]
   180d8:	ldr	r3, [sp, #28]
   180dc:	orrs	r3, r2, r3
   180e0:	movne	fp, #1
   180e4:	moveq	fp, #0
   180e8:	ldr	r3, [sp, #72]	; 0x48
   180ec:	ldr	r2, [sp, #20]
   180f0:	ldrb	r3, [r3]
   180f4:	cmp	r2, #0
   180f8:	ldr	r2, [sp, #72]	; 0x48
   180fc:	add	r3, fp, r3
   18100:	strb	r3, [r2]
   18104:	beq	1817c <_start@@Base+0x30f0>
   18108:	mov	r6, r4
   1810c:	b	18078 <_start@@Base+0x2fec>
   18110:	mov	r2, r7
   18114:	mov	r1, r6
   18118:	mov	r0, r8
   1811c:	mov	r3, #23
   18120:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18124:	mov	r7, r0
   18128:	mov	r0, r7
   1812c:	add	sp, sp, #36	; 0x24
   18130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18134:	mov	r3, #8
   18138:	mov	r2, r7
   1813c:	mov	r1, r4
   18140:	mov	r0, r8
   18144:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18148:	cmp	r7, r0
   1814c:	bne	180e8 <_start@@Base+0x305c>
   18150:	b	180b8 <_start@@Base+0x302c>
   18154:	add	r6, r1, #1
   18158:	sub	r3, r2, r6
   1815c:	b	18038 <_start@@Base+0x2fac>
   18160:	ldrb	r3, [r6, #1]
   18164:	cmp	r3, #32
   18168:	addhi	r6, r6, #1
   1816c:	bls	18050 <_start@@Base+0x2fc4>
   18170:	b	18064 <_start@@Base+0x2fd8>
   18174:	mov	r6, r2
   18178:	b	18050 <_start@@Base+0x2fc4>
   1817c:	mov	r7, r4
   18180:	b	180b8 <_start@@Base+0x302c>
   18184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18188:	sub	sp, sp, #36	; 0x24
   1818c:	mov	ip, #0
   18190:	str	r3, [sp, #12]
   18194:	ldr	r3, [sp, #72]	; 0x48
   18198:	cmp	r1, r2
   1819c:	mov	r7, r2
   181a0:	strh	ip, [r3]
   181a4:	mov	r8, r0
   181a8:	beq	18338 <_start@@Base+0x32ac>
   181ac:	ldrb	r3, [r1]
   181b0:	cmp	r3, #34	; 0x22
   181b4:	beq	182f8 <_start@@Base+0x326c>
   181b8:	mov	r3, #5
   181bc:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   181c0:	mov	r6, r0
   181c4:	sub	r3, r7, r0
   181c8:	cmp	r3, #1
   181cc:	ble	181e0 <_start@@Base+0x3154>
   181d0:	ldrb	r3, [r6]
   181d4:	cmp	r3, #32
   181d8:	bhi	181f4 <_start@@Base+0x3168>
   181dc:	beq	18324 <_start@@Base+0x3298>
   181e0:	mov	r1, r6
   181e4:	mov	r2, r7
   181e8:	mov	r0, r8
   181ec:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   181f0:	mov	r6, r0
   181f4:	cmp	r7, r6
   181f8:	beq	18248 <_start@@Base+0x31bc>
   181fc:	mov	fp, #0
   18200:	add	sl, sp, #20
   18204:	add	r9, sp, #24
   18208:	ldr	r5, [sp, #12]
   1820c:	b	18224 <_start@@Base+0x3198>
   18210:	cmp	r6, r0
   18214:	bne	18254 <_start@@Base+0x31c8>
   18218:	ldr	r3, [r5, #4]!
   1821c:	cmp	r3, #0
   18220:	beq	182a4 <_start@@Base+0x3218>
   18224:	stm	sp, {r9, sl}
   18228:	add	r3, sp, #16
   1822c:	ldr	r4, [r5]
   18230:	mov	r2, r7
   18234:	mov	r1, r6
   18238:	mov	r0, r8
   1823c:	blx	r4
   18240:	cmp	r7, r0
   18244:	bne	18210 <_start@@Base+0x3184>
   18248:	mov	r0, r7
   1824c:	add	sp, sp, #36	; 0x24
   18250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18254:	ldr	r1, [sp, #16]
   18258:	mov	r4, r0
   1825c:	cmp	r1, #0
   18260:	ldrd	r2, [sp, #24]
   18264:	beq	182c8 <_start@@Base+0x323c>
   18268:	cmp	r3, #0
   1826c:	cmpeq	r2, #32768	; 0x8000
   18270:	rsbls	fp, r2, #0
   18274:	sxthls	fp, fp
   18278:	bhi	18304 <_start@@Base+0x3278>
   1827c:	ldr	r3, [sp, #72]	; 0x48
   18280:	ldr	r2, [sp, #20]
   18284:	ldrh	r3, [r3]
   18288:	cmp	r2, #0
   1828c:	ldr	r2, [sp, #72]	; 0x48
   18290:	add	r3, r3, fp
   18294:	strh	r3, [r2]
   18298:	beq	18340 <_start@@Base+0x32b4>
   1829c:	mov	r6, r4
   182a0:	b	18208 <_start@@Base+0x317c>
   182a4:	mov	r2, r7
   182a8:	mov	r1, r6
   182ac:	mov	r0, r8
   182b0:	mov	r3, #23
   182b4:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   182b8:	mov	r7, r0
   182bc:	mov	r0, r7
   182c0:	add	sp, sp, #36	; 0x24
   182c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182c8:	ldr	r0, [pc, #120]	; 18348 <_start@@Base+0x32bc>
   182cc:	mov	r1, #0
   182d0:	cmp	r3, r1
   182d4:	cmpeq	r2, r0
   182d8:	sxthls	fp, r2
   182dc:	bls	1827c <_start@@Base+0x31f0>
   182e0:	mov	r3, #7
   182e4:	mov	r2, r7
   182e8:	mov	r1, r4
   182ec:	mov	r0, r8
   182f0:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   182f4:	b	18318 <_start@@Base+0x328c>
   182f8:	add	r6, r1, #1
   182fc:	sub	r3, r2, r6
   18300:	b	181c8 <_start@@Base+0x313c>
   18304:	mov	r3, #8
   18308:	mov	r2, r7
   1830c:	mov	r1, r4
   18310:	mov	r0, r8
   18314:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18318:	cmp	r7, r0
   1831c:	bne	1827c <_start@@Base+0x31f0>
   18320:	b	18248 <_start@@Base+0x31bc>
   18324:	ldrb	r3, [r6, #1]
   18328:	cmp	r3, #32
   1832c:	addhi	r6, r6, #1
   18330:	bls	181e0 <_start@@Base+0x3154>
   18334:	b	181f4 <_start@@Base+0x3168>
   18338:	mov	r6, r2
   1833c:	b	181e0 <_start@@Base+0x3154>
   18340:	mov	r7, r4
   18344:	b	18248 <_start@@Base+0x31bc>
   18348:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1834c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18350:	sub	sp, sp, #36	; 0x24
   18354:	mov	fp, r3
   18358:	ldr	r3, [sp, #72]	; 0x48
   1835c:	mov	ip, #0
   18360:	cmp	r1, r2
   18364:	mov	r7, r2
   18368:	strb	ip, [r3]
   1836c:	mov	r8, r0
   18370:	beq	184f0 <_start@@Base+0x3464>
   18374:	ldrb	r3, [r1]
   18378:	cmp	r3, #34	; 0x22
   1837c:	beq	18498 <_start@@Base+0x340c>
   18380:	mov	r3, #5
   18384:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18388:	mov	r6, r0
   1838c:	sub	r3, r7, r0
   18390:	cmp	r3, #1
   18394:	ble	183a8 <_start@@Base+0x331c>
   18398:	ldrb	r3, [r6]
   1839c:	cmp	r3, #32
   183a0:	bhi	183bc <_start@@Base+0x3330>
   183a4:	beq	184dc <_start@@Base+0x3450>
   183a8:	mov	r1, r6
   183ac:	mov	r2, r7
   183b0:	mov	r0, r8
   183b4:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   183b8:	mov	r6, r0
   183bc:	cmp	r7, r6
   183c0:	beq	18414 <_start@@Base+0x3388>
   183c4:	add	sl, sp, #20
   183c8:	add	r9, sp, #24
   183cc:	mov	r3, #0
   183d0:	str	r3, [sp, #12]
   183d4:	mov	r5, fp
   183d8:	b	183f0 <_start@@Base+0x3364>
   183dc:	cmp	r6, r0
   183e0:	bne	18420 <_start@@Base+0x3394>
   183e4:	ldr	r3, [r5, #4]!
   183e8:	cmp	r3, #0
   183ec:	beq	18474 <_start@@Base+0x33e8>
   183f0:	stm	sp, {r9, sl}
   183f4:	add	r3, sp, #16
   183f8:	ldr	r4, [r5]
   183fc:	mov	r2, r7
   18400:	mov	r1, r6
   18404:	mov	r0, r8
   18408:	blx	r4
   1840c:	cmp	r7, r0
   18410:	bne	183dc <_start@@Base+0x3350>
   18414:	mov	r0, r7
   18418:	add	sp, sp, #36	; 0x24
   1841c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18420:	ldr	r3, [sp, #16]
   18424:	mov	r4, r0
   18428:	cmp	r3, #0
   1842c:	bne	184a4 <_start@@Base+0x3418>
   18430:	ldrd	r2, [sp, #24]
   18434:	cmp	r3, #0
   18438:	cmpeq	r2, #255	; 0xff
   1843c:	uxtbls	r3, r2
   18440:	strls	r3, [sp, #12]
   18444:	bhi	184c4 <_start@@Base+0x3438>
   18448:	ldr	r3, [sp, #72]	; 0x48
   1844c:	ldr	r2, [sp, #20]
   18450:	ldr	r1, [sp, #12]
   18454:	ldrb	r3, [r3]
   18458:	cmp	r2, #0
   1845c:	ldr	r2, [sp, #72]	; 0x48
   18460:	add	r3, r1, r3
   18464:	strb	r3, [r2]
   18468:	beq	184f8 <_start@@Base+0x346c>
   1846c:	mov	r6, r4
   18470:	b	183d4 <_start@@Base+0x3348>
   18474:	mov	r2, r7
   18478:	mov	r1, r6
   1847c:	mov	r0, r8
   18480:	mov	r3, #23
   18484:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18488:	mov	r7, r0
   1848c:	mov	r0, r7
   18490:	add	sp, sp, #36	; 0x24
   18494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18498:	add	r6, r1, #1
   1849c:	sub	r3, r2, r6
   184a0:	b	18390 <_start@@Base+0x3304>
   184a4:	mov	r3, #8
   184a8:	mov	r2, r7
   184ac:	mov	r1, r4
   184b0:	mov	r0, r8
   184b4:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   184b8:	cmp	r7, r0
   184bc:	bne	18448 <_start@@Base+0x33bc>
   184c0:	b	18414 <_start@@Base+0x3388>
   184c4:	mov	r3, #7
   184c8:	mov	r2, r7
   184cc:	mov	r1, r4
   184d0:	mov	r0, r8
   184d4:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   184d8:	b	184b8 <_start@@Base+0x342c>
   184dc:	ldrb	r3, [r6, #1]
   184e0:	cmp	r3, #32
   184e4:	addhi	r6, r6, #1
   184e8:	bls	183a8 <_start@@Base+0x331c>
   184ec:	b	183bc <_start@@Base+0x3330>
   184f0:	mov	r6, r2
   184f4:	b	183a8 <_start@@Base+0x331c>
   184f8:	mov	r7, r4
   184fc:	b	18414 <_start@@Base+0x3388>
   18500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18504:	sub	sp, sp, #36	; 0x24
   18508:	mov	ip, #0
   1850c:	str	r3, [sp, #12]
   18510:	ldr	r3, [sp, #72]	; 0x48
   18514:	cmp	r1, r2
   18518:	mov	r7, r2
   1851c:	strb	ip, [r3]
   18520:	mov	r8, r0
   18524:	beq	186ac <_start@@Base+0x3620>
   18528:	ldrb	r3, [r1]
   1852c:	cmp	r3, #34	; 0x22
   18530:	beq	1866c <_start@@Base+0x35e0>
   18534:	mov	r3, #5
   18538:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1853c:	mov	r6, r0
   18540:	sub	r3, r7, r0
   18544:	cmp	r3, #1
   18548:	ble	1855c <_start@@Base+0x34d0>
   1854c:	ldrb	r3, [r6]
   18550:	cmp	r3, #32
   18554:	bhi	18570 <_start@@Base+0x34e4>
   18558:	beq	18698 <_start@@Base+0x360c>
   1855c:	mov	r1, r6
   18560:	mov	r2, r7
   18564:	mov	r0, r8
   18568:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   1856c:	mov	r6, r0
   18570:	cmp	r7, r6
   18574:	beq	185c4 <_start@@Base+0x3538>
   18578:	mov	fp, #0
   1857c:	add	sl, sp, #20
   18580:	add	r9, sp, #24
   18584:	ldr	r5, [sp, #12]
   18588:	b	185a0 <_start@@Base+0x3514>
   1858c:	cmp	r6, r0
   18590:	bne	185d0 <_start@@Base+0x3544>
   18594:	ldr	r3, [r5, #4]!
   18598:	cmp	r3, #0
   1859c:	beq	18620 <_start@@Base+0x3594>
   185a0:	stm	sp, {r9, sl}
   185a4:	add	r3, sp, #16
   185a8:	ldr	r4, [r5]
   185ac:	mov	r2, r7
   185b0:	mov	r1, r6
   185b4:	mov	r0, r8
   185b8:	blx	r4
   185bc:	cmp	r7, r0
   185c0:	bne	1858c <_start@@Base+0x3500>
   185c4:	mov	r0, r7
   185c8:	add	sp, sp, #36	; 0x24
   185cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185d0:	ldr	r1, [sp, #16]
   185d4:	mov	r4, r0
   185d8:	cmp	r1, #0
   185dc:	ldrd	r2, [sp, #24]
   185e0:	beq	18644 <_start@@Base+0x35b8>
   185e4:	cmp	r3, #0
   185e8:	cmpeq	r2, #128	; 0x80
   185ec:	rsbls	fp, r2, #0
   185f0:	sxtbls	fp, fp
   185f4:	bhi	18678 <_start@@Base+0x35ec>
   185f8:	ldr	r3, [sp, #72]	; 0x48
   185fc:	ldr	r2, [sp, #20]
   18600:	ldrb	r3, [r3]
   18604:	cmp	r2, #0
   18608:	ldr	r2, [sp, #72]	; 0x48
   1860c:	add	r3, r3, fp
   18610:	strb	r3, [r2]
   18614:	beq	186b4 <_start@@Base+0x3628>
   18618:	mov	r6, r4
   1861c:	b	18584 <_start@@Base+0x34f8>
   18620:	mov	r2, r7
   18624:	mov	r1, r6
   18628:	mov	r0, r8
   1862c:	mov	r3, #23
   18630:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18634:	mov	r7, r0
   18638:	mov	r0, r7
   1863c:	add	sp, sp, #36	; 0x24
   18640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18644:	cmp	r3, #0
   18648:	cmpeq	r2, #127	; 0x7f
   1864c:	sxtbls	fp, r2
   18650:	bls	185f8 <_start@@Base+0x356c>
   18654:	mov	r3, #7
   18658:	mov	r2, r7
   1865c:	mov	r1, r4
   18660:	mov	r0, r8
   18664:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18668:	b	1868c <_start@@Base+0x3600>
   1866c:	add	r6, r1, #1
   18670:	sub	r3, r2, r6
   18674:	b	18544 <_start@@Base+0x34b8>
   18678:	mov	r3, #8
   1867c:	mov	r2, r7
   18680:	mov	r1, r4
   18684:	mov	r0, r8
   18688:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1868c:	cmp	r7, r0
   18690:	bne	185f8 <_start@@Base+0x356c>
   18694:	b	185c4 <_start@@Base+0x3538>
   18698:	ldrb	r3, [r6, #1]
   1869c:	cmp	r3, #32
   186a0:	addhi	r6, r6, #1
   186a4:	bls	1855c <_start@@Base+0x34d0>
   186a8:	b	18570 <_start@@Base+0x34e4>
   186ac:	mov	r6, r2
   186b0:	b	1855c <_start@@Base+0x34d0>
   186b4:	mov	r7, r4
   186b8:	b	185c4 <_start@@Base+0x3538>
   186bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186c0:	sub	sp, sp, #36	; 0x24
   186c4:	mov	fp, r3
   186c8:	ldr	r3, [sp, #72]	; 0x48
   186cc:	mov	ip, #0
   186d0:	cmp	r1, r2
   186d4:	mov	r7, r2
   186d8:	strh	ip, [r3]
   186dc:	mov	r8, r0
   186e0:	beq	18868 <_start@@Base+0x37dc>
   186e4:	ldrb	r3, [r1]
   186e8:	cmp	r3, #34	; 0x22
   186ec:	beq	18810 <_start@@Base+0x3784>
   186f0:	mov	r3, #5
   186f4:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   186f8:	mov	r6, r0
   186fc:	sub	r3, r7, r0
   18700:	cmp	r3, #1
   18704:	ble	18718 <_start@@Base+0x368c>
   18708:	ldrb	r3, [r6]
   1870c:	cmp	r3, #32
   18710:	bhi	1872c <_start@@Base+0x36a0>
   18714:	beq	18854 <_start@@Base+0x37c8>
   18718:	mov	r1, r6
   1871c:	mov	r2, r7
   18720:	mov	r0, r8
   18724:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   18728:	mov	r6, r0
   1872c:	cmp	r7, r6
   18730:	beq	18784 <_start@@Base+0x36f8>
   18734:	add	sl, sp, #20
   18738:	add	r9, sp, #24
   1873c:	mov	r3, #0
   18740:	str	r3, [sp, #12]
   18744:	mov	r5, fp
   18748:	b	18760 <_start@@Base+0x36d4>
   1874c:	cmp	r6, r0
   18750:	bne	18790 <_start@@Base+0x3704>
   18754:	ldr	r3, [r5, #4]!
   18758:	cmp	r3, #0
   1875c:	beq	187ec <_start@@Base+0x3760>
   18760:	stm	sp, {r9, sl}
   18764:	add	r3, sp, #16
   18768:	ldr	r4, [r5]
   1876c:	mov	r2, r7
   18770:	mov	r1, r6
   18774:	mov	r0, r8
   18778:	blx	r4
   1877c:	cmp	r7, r0
   18780:	bne	1874c <_start@@Base+0x36c0>
   18784:	mov	r0, r7
   18788:	add	sp, sp, #36	; 0x24
   1878c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18790:	ldr	r3, [sp, #16]
   18794:	mov	r4, r0
   18798:	cmp	r3, #0
   1879c:	bne	1881c <_start@@Base+0x3790>
   187a0:	ldrd	r2, [sp, #24]
   187a4:	ldr	r0, [pc, #204]	; 18878 <_start@@Base+0x37ec>
   187a8:	mov	r1, #0
   187ac:	cmp	r3, r1
   187b0:	cmpeq	r2, r0
   187b4:	uxthls	r3, r2
   187b8:	strls	r3, [sp, #12]
   187bc:	bhi	1883c <_start@@Base+0x37b0>
   187c0:	ldr	r3, [sp, #72]	; 0x48
   187c4:	ldr	r2, [sp, #20]
   187c8:	ldr	r1, [sp, #12]
   187cc:	ldrh	r3, [r3]
   187d0:	cmp	r2, #0
   187d4:	ldr	r2, [sp, #72]	; 0x48
   187d8:	add	r3, r1, r3
   187dc:	strh	r3, [r2]
   187e0:	beq	18870 <_start@@Base+0x37e4>
   187e4:	mov	r6, r4
   187e8:	b	18744 <_start@@Base+0x36b8>
   187ec:	mov	r2, r7
   187f0:	mov	r1, r6
   187f4:	mov	r0, r8
   187f8:	mov	r3, #23
   187fc:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18800:	mov	r7, r0
   18804:	mov	r0, r7
   18808:	add	sp, sp, #36	; 0x24
   1880c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18810:	add	r6, r1, #1
   18814:	sub	r3, r2, r6
   18818:	b	18700 <_start@@Base+0x3674>
   1881c:	mov	r3, #8
   18820:	mov	r2, r7
   18824:	mov	r1, r4
   18828:	mov	r0, r8
   1882c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18830:	cmp	r7, r0
   18834:	bne	187c0 <_start@@Base+0x3734>
   18838:	b	18784 <_start@@Base+0x36f8>
   1883c:	mov	r3, #7
   18840:	mov	r2, r7
   18844:	mov	r1, r4
   18848:	mov	r0, r8
   1884c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18850:	b	18830 <_start@@Base+0x37a4>
   18854:	ldrb	r3, [r6, #1]
   18858:	cmp	r3, #32
   1885c:	addhi	r6, r6, #1
   18860:	bls	18718 <_start@@Base+0x368c>
   18864:	b	1872c <_start@@Base+0x36a0>
   18868:	mov	r6, r2
   1886c:	b	18718 <_start@@Base+0x368c>
   18870:	mov	r7, r4
   18874:	b	18784 <_start@@Base+0x36f8>
   18878:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1887c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18880:	sub	sp, sp, #36	; 0x24
   18884:	mov	ip, #0
   18888:	ldr	fp, [sp, #72]	; 0x48
   1888c:	cmp	r1, r2
   18890:	mov	r7, r2
   18894:	str	r3, [sp, #8]
   18898:	str	ip, [fp]
   1889c:	mov	r8, r0
   188a0:	beq	18a1c <_start@@Base+0x3990>
   188a4:	ldrb	r3, [r1]
   188a8:	cmp	r3, #34	; 0x22
   188ac:	beq	189c4 <_start@@Base+0x3938>
   188b0:	mov	r3, #5
   188b4:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   188b8:	mov	r6, r0
   188bc:	sub	r3, r7, r0
   188c0:	cmp	r3, #1
   188c4:	ble	188d8 <_start@@Base+0x384c>
   188c8:	ldrb	r3, [r6]
   188cc:	cmp	r3, #32
   188d0:	bhi	188ec <_start@@Base+0x3860>
   188d4:	beq	18a08 <_start@@Base+0x397c>
   188d8:	mov	r1, r6
   188dc:	mov	r2, r7
   188e0:	mov	r0, r8
   188e4:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   188e8:	mov	r6, r0
   188ec:	cmp	r7, r6
   188f0:	beq	18944 <_start@@Base+0x38b8>
   188f4:	add	sl, sp, #20
   188f8:	add	r9, sp, #24
   188fc:	mov	r3, #0
   18900:	str	r3, [sp, #12]
   18904:	ldr	r5, [sp, #8]
   18908:	b	18920 <_start@@Base+0x3894>
   1890c:	cmp	r6, r0
   18910:	bne	18950 <_start@@Base+0x38c4>
   18914:	ldr	r3, [r5, #4]!
   18918:	cmp	r3, #0
   1891c:	beq	189a0 <_start@@Base+0x3914>
   18920:	stm	sp, {r9, sl}
   18924:	add	r3, sp, #16
   18928:	ldr	r4, [r5]
   1892c:	mov	r2, r7
   18930:	mov	r1, r6
   18934:	mov	r0, r8
   18938:	blx	r4
   1893c:	cmp	r7, r0
   18940:	bne	1890c <_start@@Base+0x3880>
   18944:	mov	r0, r7
   18948:	add	sp, sp, #36	; 0x24
   1894c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18950:	ldr	r3, [sp, #16]
   18954:	mov	r4, r0
   18958:	cmp	r3, #0
   1895c:	bne	189d0 <_start@@Base+0x3944>
   18960:	ldrd	r2, [sp, #24]
   18964:	mov	r1, #0
   18968:	mvn	r0, #0
   1896c:	cmp	r3, r1
   18970:	cmpeq	r2, r0
   18974:	strls	r2, [sp, #12]
   18978:	bhi	189f0 <_start@@Base+0x3964>
   1897c:	ldr	r3, [fp]
   18980:	ldr	r2, [sp, #20]
   18984:	ldr	r1, [sp, #12]
   18988:	cmp	r2, #0
   1898c:	add	r3, r3, r1
   18990:	str	r3, [fp]
   18994:	beq	18a24 <_start@@Base+0x3998>
   18998:	mov	r6, r4
   1899c:	b	18904 <_start@@Base+0x3878>
   189a0:	mov	r2, r7
   189a4:	mov	r1, r6
   189a8:	mov	r0, r8
   189ac:	mov	r3, #23
   189b0:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   189b4:	mov	r7, r0
   189b8:	mov	r0, r7
   189bc:	add	sp, sp, #36	; 0x24
   189c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189c4:	add	r6, r1, #1
   189c8:	sub	r3, r2, r6
   189cc:	b	188c0 <_start@@Base+0x3834>
   189d0:	mov	r3, #8
   189d4:	mov	r2, r7
   189d8:	mov	r1, r4
   189dc:	mov	r0, r8
   189e0:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   189e4:	cmp	r7, r0
   189e8:	bne	1897c <_start@@Base+0x38f0>
   189ec:	b	18944 <_start@@Base+0x38b8>
   189f0:	mov	r3, #7
   189f4:	mov	r2, r7
   189f8:	mov	r1, r4
   189fc:	mov	r0, r8
   18a00:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18a04:	b	189e4 <_start@@Base+0x3958>
   18a08:	ldrb	r3, [r6, #1]
   18a0c:	cmp	r3, #32
   18a10:	addhi	r6, r6, #1
   18a14:	bls	188d8 <_start@@Base+0x384c>
   18a18:	b	188ec <_start@@Base+0x3860>
   18a1c:	mov	r6, r2
   18a20:	b	188d8 <_start@@Base+0x384c>
   18a24:	mov	r7, r4
   18a28:	b	18944 <_start@@Base+0x38b8>
   18a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a30:	sub	sp, sp, #36	; 0x24
   18a34:	mov	ip, #0
   18a38:	ldr	fp, [sp, #72]	; 0x48
   18a3c:	cmp	r1, r2
   18a40:	mov	r7, r2
   18a44:	str	r3, [sp, #12]
   18a48:	str	ip, [fp]
   18a4c:	mov	r8, r0
   18a50:	beq	18be0 <_start@@Base+0x3b54>
   18a54:	ldrb	r3, [r1]
   18a58:	cmp	r3, #34	; 0x22
   18a5c:	beq	18ba0 <_start@@Base+0x3b14>
   18a60:	mov	r3, #5
   18a64:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18a68:	mov	r6, r0
   18a6c:	sub	r3, r7, r0
   18a70:	cmp	r3, #1
   18a74:	ble	18a88 <_start@@Base+0x39fc>
   18a78:	ldrb	r3, [r6]
   18a7c:	cmp	r3, #32
   18a80:	bhi	18a9c <_start@@Base+0x3a10>
   18a84:	beq	18bcc <_start@@Base+0x3b40>
   18a88:	mov	r1, r6
   18a8c:	mov	r2, r7
   18a90:	mov	r0, r8
   18a94:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   18a98:	mov	r6, r0
   18a9c:	cmp	r7, r6
   18aa0:	beq	18af4 <_start@@Base+0x3a68>
   18aa4:	add	sl, sp, #20
   18aa8:	add	r9, sp, #24
   18aac:	mov	r3, #0
   18ab0:	str	r3, [sp, #8]
   18ab4:	ldr	r5, [sp, #12]
   18ab8:	b	18ad0 <_start@@Base+0x3a44>
   18abc:	cmp	r6, r0
   18ac0:	bne	18b00 <_start@@Base+0x3a74>
   18ac4:	ldr	r3, [r5, #4]!
   18ac8:	cmp	r3, #0
   18acc:	beq	18b4c <_start@@Base+0x3ac0>
   18ad0:	stm	sp, {r9, sl}
   18ad4:	add	r3, sp, #16
   18ad8:	ldr	r4, [r5]
   18adc:	mov	r2, r7
   18ae0:	mov	r1, r6
   18ae4:	mov	r0, r8
   18ae8:	blx	r4
   18aec:	cmp	r7, r0
   18af0:	bne	18abc <_start@@Base+0x3a30>
   18af4:	mov	r0, r7
   18af8:	add	sp, sp, #36	; 0x24
   18afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b00:	ldr	r1, [sp, #16]
   18b04:	mov	r4, r0
   18b08:	cmp	r1, #0
   18b0c:	ldrd	r2, [sp, #24]
   18b10:	beq	18b70 <_start@@Base+0x3ae4>
   18b14:	cmp	r3, #0
   18b18:	cmpeq	r2, #-2147483648	; 0x80000000
   18b1c:	rsbls	r3, r2, #0
   18b20:	strls	r3, [sp, #8]
   18b24:	bhi	18bac <_start@@Base+0x3b20>
   18b28:	ldr	r3, [fp]
   18b2c:	ldr	r2, [sp, #20]
   18b30:	ldr	r1, [sp, #8]
   18b34:	cmp	r2, #0
   18b38:	add	r3, r3, r1
   18b3c:	str	r3, [fp]
   18b40:	beq	18be8 <_start@@Base+0x3b5c>
   18b44:	mov	r6, r4
   18b48:	b	18ab4 <_start@@Base+0x3a28>
   18b4c:	mov	r2, r7
   18b50:	mov	r1, r6
   18b54:	mov	r0, r8
   18b58:	mov	r3, #23
   18b5c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18b60:	mov	r7, r0
   18b64:	mov	r0, r7
   18b68:	add	sp, sp, #36	; 0x24
   18b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b70:	mov	r1, #0
   18b74:	cmp	r3, r1
   18b78:	mvn	r0, #-2147483648	; 0x80000000
   18b7c:	cmpeq	r2, r0
   18b80:	strls	r2, [sp, #8]
   18b84:	bls	18b28 <_start@@Base+0x3a9c>
   18b88:	mov	r3, #7
   18b8c:	mov	r2, r7
   18b90:	mov	r1, r4
   18b94:	mov	r0, r8
   18b98:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18b9c:	b	18bc0 <_start@@Base+0x3b34>
   18ba0:	add	r6, r1, #1
   18ba4:	sub	r3, r2, r6
   18ba8:	b	18a70 <_start@@Base+0x39e4>
   18bac:	mov	r3, #8
   18bb0:	mov	r2, r7
   18bb4:	mov	r1, r4
   18bb8:	mov	r0, r8
   18bbc:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18bc0:	cmp	r7, r0
   18bc4:	bne	18b28 <_start@@Base+0x3a9c>
   18bc8:	b	18af4 <_start@@Base+0x3a68>
   18bcc:	ldrb	r3, [r6, #1]
   18bd0:	cmp	r3, #32
   18bd4:	addhi	r6, r6, #1
   18bd8:	bls	18a88 <_start@@Base+0x39fc>
   18bdc:	b	18a9c <_start@@Base+0x3a10>
   18be0:	mov	r6, r2
   18be4:	b	18a88 <_start@@Base+0x39fc>
   18be8:	mov	r7, r4
   18bec:	b	18af4 <_start@@Base+0x3a68>
   18bf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bf4:	sub	sp, sp, #44	; 0x2c
   18bf8:	mov	r4, #0
   18bfc:	ldr	fp, [sp, #80]	; 0x50
   18c00:	mov	r5, #0
   18c04:	cmp	r1, r2
   18c08:	mov	r7, r2
   18c0c:	str	r3, [sp, #20]
   18c10:	strd	r4, [fp]
   18c14:	mov	r8, r0
   18c18:	beq	18da0 <_start@@Base+0x3d14>
   18c1c:	ldrb	r3, [r1]
   18c20:	cmp	r3, #34	; 0x22
   18c24:	beq	18d60 <_start@@Base+0x3cd4>
   18c28:	mov	r3, #5
   18c2c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18c30:	mov	r6, r0
   18c34:	sub	r3, r7, r0
   18c38:	cmp	r3, #1
   18c3c:	ble	18c50 <_start@@Base+0x3bc4>
   18c40:	ldrb	r3, [r6]
   18c44:	cmp	r3, #32
   18c48:	bhi	18c64 <_start@@Base+0x3bd8>
   18c4c:	beq	18d8c <_start@@Base+0x3d00>
   18c50:	mov	r1, r6
   18c54:	mov	r2, r7
   18c58:	mov	r0, r8
   18c5c:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   18c60:	mov	r6, r0
   18c64:	cmp	r7, r6
   18c68:	beq	18cc0 <_start@@Base+0x3c34>
   18c6c:	mov	r2, #0
   18c70:	mov	r3, #0
   18c74:	add	sl, sp, #28
   18c78:	add	r9, sp, #32
   18c7c:	strd	r2, [sp, #8]
   18c80:	ldr	r5, [sp, #20]
   18c84:	b	18c9c <_start@@Base+0x3c10>
   18c88:	cmp	r6, r0
   18c8c:	bne	18ccc <_start@@Base+0x3c40>
   18c90:	ldr	r3, [r5, #4]!
   18c94:	cmp	r3, #0
   18c98:	beq	18d28 <_start@@Base+0x3c9c>
   18c9c:	stm	sp, {r9, sl}
   18ca0:	add	r3, sp, #24
   18ca4:	ldr	r4, [r5]
   18ca8:	mov	r2, r7
   18cac:	mov	r1, r6
   18cb0:	mov	r0, r8
   18cb4:	blx	r4
   18cb8:	cmp	r7, r0
   18cbc:	bne	18c88 <_start@@Base+0x3bfc>
   18cc0:	mov	r0, r7
   18cc4:	add	sp, sp, #44	; 0x2c
   18cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ccc:	ldr	r1, [sp, #24]
   18cd0:	mov	r4, r0
   18cd4:	cmp	r1, #0
   18cd8:	ldrd	r2, [sp, #32]
   18cdc:	beq	18d4c <_start@@Base+0x3cc0>
   18ce0:	cmp	r3, #-2147483648	; 0x80000000
   18ce4:	cmpeq	r2, #0
   18ce8:	bhi	18d6c <_start@@Base+0x3ce0>
   18cec:	rsbs	r2, r2, #0
   18cf0:	rsc	r3, r3, #0
   18cf4:	strd	r2, [sp, #8]
   18cf8:	ldrd	r2, [fp]
   18cfc:	ldrd	r0, [sp, #8]
   18d00:	ldr	ip, [sp, #28]
   18d04:	adds	r0, r0, r2
   18d08:	adc	r1, r1, r3
   18d0c:	mov	r2, r0
   18d10:	mov	r3, r1
   18d14:	cmp	ip, #0
   18d18:	strd	r2, [fp]
   18d1c:	beq	18dc0 <_start@@Base+0x3d34>
   18d20:	mov	r6, r4
   18d24:	b	18c80 <_start@@Base+0x3bf4>
   18d28:	mov	r2, r7
   18d2c:	mov	r1, r6
   18d30:	mov	r0, r8
   18d34:	mov	r3, #23
   18d38:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18d3c:	mov	r7, r0
   18d40:	mov	r0, r7
   18d44:	add	sp, sp, #44	; 0x2c
   18d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d4c:	cmp	r2, #0
   18d50:	sbcs	r1, r3, #0
   18d54:	blt	18da8 <_start@@Base+0x3d1c>
   18d58:	strd	r2, [sp, #8]
   18d5c:	b	18cf8 <_start@@Base+0x3c6c>
   18d60:	add	r6, r1, #1
   18d64:	sub	r3, r2, r6
   18d68:	b	18c38 <_start@@Base+0x3bac>
   18d6c:	mov	r3, #8
   18d70:	mov	r2, r7
   18d74:	mov	r1, r4
   18d78:	mov	r0, r8
   18d7c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18d80:	cmp	r7, r0
   18d84:	bne	18cf8 <_start@@Base+0x3c6c>
   18d88:	b	18cc0 <_start@@Base+0x3c34>
   18d8c:	ldrb	r3, [r6, #1]
   18d90:	cmp	r3, #32
   18d94:	addhi	r6, r6, #1
   18d98:	bls	18c50 <_start@@Base+0x3bc4>
   18d9c:	b	18c64 <_start@@Base+0x3bd8>
   18da0:	mov	r6, r2
   18da4:	b	18c50 <_start@@Base+0x3bc4>
   18da8:	mov	r3, #7
   18dac:	mov	r2, r7
   18db0:	mov	r1, r4
   18db4:	mov	r0, r8
   18db8:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18dbc:	b	18d80 <_start@@Base+0x3cf4>
   18dc0:	mov	r7, r4
   18dc4:	b	18cc0 <_start@@Base+0x3c34>
   18dc8:	cmp	r1, r2
   18dcc:	beq	18ddc <_start@@Base+0x3d50>
   18dd0:	ldrb	ip, [r1]
   18dd4:	cmp	ip, #91	; 0x5b
   18dd8:	beq	18dec <_start@@Base+0x3d60>
   18ddc:	mov	ip, #0
   18de0:	str	ip, [r3]
   18de4:	mov	r3, #22
   18de8:	b	2e8b4 <flatcc_json_parser_set_error@@Base>
   18dec:	push	{r4, r5, r6, lr}
   18df0:	mov	r5, r0
   18df4:	add	r0, r1, #1
   18df8:	mov	r6, r3
   18dfc:	sub	r3, r2, r0
   18e00:	cmp	r3, #1
   18e04:	mov	r4, r2
   18e08:	ble	18e1c <_start@@Base+0x3d90>
   18e0c:	ldrb	r3, [r1, #1]
   18e10:	cmp	r3, #32
   18e14:	bhi	18e2c <_start@@Base+0x3da0>
   18e18:	beq	18e4c <_start@@Base+0x3dc0>
   18e1c:	mov	r1, r0
   18e20:	mov	r2, r4
   18e24:	mov	r0, r5
   18e28:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   18e2c:	cmp	r4, r0
   18e30:	beq	18e40 <_start@@Base+0x3db4>
   18e34:	ldrb	r3, [r0]
   18e38:	cmp	r3, #93	; 0x5d
   18e3c:	beq	18e60 <_start@@Base+0x3dd4>
   18e40:	mov	r3, #1
   18e44:	str	r3, [r6]
   18e48:	pop	{r4, r5, r6, pc}
   18e4c:	ldrb	r3, [r1, #2]
   18e50:	cmp	r3, #32
   18e54:	addhi	r0, r1, #2
   18e58:	bls	18e1c <_start@@Base+0x3d90>
   18e5c:	b	18e2c <_start@@Base+0x3da0>
   18e60:	mov	r3, #0
   18e64:	mov	r2, r4
   18e68:	add	r1, r0, #1
   18e6c:	str	r3, [r6]
   18e70:	mov	r0, r5
   18e74:	pop	{r4, r5, r6, lr}
   18e78:	b	167a8 <_start@@Base+0x171c>
   18e7c:	ldrb	ip, [r1, r3]
   18e80:	cmp	ip, #34	; 0x22
   18e84:	beq	18e90 <_start@@Base+0x3e04>
   18e88:	mov	r0, r1
   18e8c:	bx	lr
   18e90:	add	r3, r3, #1
   18e94:	mov	ip, r1
   18e98:	add	r1, r1, r3
   18e9c:	push	{r4, r5, r6, lr}
   18ea0:	mov	r5, r2
   18ea4:	sub	r2, r2, r1
   18ea8:	cmp	r2, #1
   18eac:	mov	r4, r0
   18eb0:	ble	18ec4 <_start@@Base+0x3e38>
   18eb4:	ldrb	r3, [ip, r3]
   18eb8:	cmp	r3, #32
   18ebc:	bhi	18ed4 <_start@@Base+0x3e48>
   18ec0:	beq	18efc <_start@@Base+0x3e70>
   18ec4:	mov	r2, r5
   18ec8:	mov	r0, r4
   18ecc:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   18ed0:	mov	r1, r0
   18ed4:	cmp	r5, r1
   18ed8:	mov	r2, r5
   18edc:	beq	18eec <_start@@Base+0x3e60>
   18ee0:	ldrb	r3, [r1]
   18ee4:	cmp	r3, #58	; 0x3a
   18ee8:	beq	18f10 <_start@@Base+0x3e84>
   18eec:	mov	r0, r4
   18ef0:	mov	r3, #4
   18ef4:	pop	{r4, r5, r6, lr}
   18ef8:	b	2e8b4 <flatcc_json_parser_set_error@@Base>
   18efc:	ldrb	r3, [r1, #1]
   18f00:	cmp	r3, #32
   18f04:	addhi	r1, r1, #1
   18f08:	bls	18ec4 <_start@@Base+0x3e38>
   18f0c:	b	18ed4 <_start@@Base+0x3e48>
   18f10:	mov	r0, r4
   18f14:	add	r1, r1, #1
   18f18:	pop	{r4, r5, r6, lr}
   18f1c:	b	167a8 <_start@@Base+0x171c>
   18f20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f24:	sub	sp, sp, #148	; 0x94
   18f28:	mov	r8, r0
   18f2c:	mov	r0, r3
   18f30:	str	r3, [sp, #120]	; 0x78
   18f34:	mov	r4, r2
   18f38:	mov	r3, #0
   18f3c:	mov	r2, #4
   18f40:	str	r3, [r0]
   18f44:	mov	r5, r1
   18f48:	ldr	r0, [r8]
   18f4c:	mov	r1, r2
   18f50:	bl	26904 <flatcc_builder_start_struct@@Base>
   18f54:	subs	r3, r0, #0
   18f58:	str	r3, [sp, #116]	; 0x74
   18f5c:	beq	196e0 <_start@@Base+0x4654>
   18f60:	cmp	r5, r4
   18f64:	beq	18f74 <_start@@Base+0x3ee8>
   18f68:	ldrb	r3, [r5]
   18f6c:	cmp	r3, #123	; 0x7b
   18f70:	beq	18fd4 <_start@@Base+0x3f48>
   18f74:	mov	r1, r5
   18f78:	mov	r3, #21
   18f7c:	mov	r2, r4
   18f80:	mov	r0, r8
   18f84:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18f88:	mov	r1, r0
   18f8c:	cmp	r4, r1
   18f90:	beq	18fb4 <_start@@Base+0x3f28>
   18f94:	ldr	r0, [r8]
   18f98:	str	r1, [sp, #8]
   18f9c:	bl	26ac0 <flatcc_builder_end_struct@@Base>
   18fa0:	ldr	r3, [sp, #120]	; 0x78
   18fa4:	ldr	r1, [sp, #8]
   18fa8:	cmp	r0, #0
   18fac:	str	r0, [r3]
   18fb0:	bne	18fc8 <_start@@Base+0x3f3c>
   18fb4:	mov	r2, r4
   18fb8:	mov	r0, r8
   18fbc:	mov	r3, #33	; 0x21
   18fc0:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   18fc4:	mov	r1, r0
   18fc8:	mov	r0, r1
   18fcc:	add	sp, sp, #148	; 0x94
   18fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fd4:	add	r3, r5, #1
   18fd8:	sub	r2, r4, r3
   18fdc:	cmp	r2, #1
   18fe0:	ble	18ff4 <_start@@Base+0x3f68>
   18fe4:	ldrb	r2, [r5, #1]
   18fe8:	cmp	r2, #32
   18fec:	bhi	19008 <_start@@Base+0x3f7c>
   18ff0:	beq	19718 <_start@@Base+0x468c>
   18ff4:	mov	r1, r3
   18ff8:	mov	r2, r4
   18ffc:	mov	r0, r8
   19000:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   19004:	mov	r3, r0
   19008:	cmp	r4, r3
   1900c:	beq	1901c <_start@@Base+0x3f90>
   19010:	ldrb	r2, [r3]
   19014:	cmp	r2, #125	; 0x7d
   19018:	beq	19748 <_start@@Base+0x46bc>
   1901c:	mov	r9, #0
   19020:	mov	r1, r3
   19024:	cmp	r4, r1
   19028:	beq	19334 <_start@@Base+0x42a8>
   1902c:	ldrb	r3, [r1]
   19030:	cmp	r3, #34	; 0x22
   19034:	addeq	r1, r1, #1
   19038:	beq	19050 <_start@@Base+0x3fc4>
   1903c:	mov	r3, #5
   19040:	mov	r2, r4
   19044:	mov	r0, r8
   19048:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1904c:	mov	r1, r0
   19050:	sub	r3, r4, r1
   19054:	cmp	r3, #8
   19058:	bls	19344 <_start@@Base+0x42b8>
   1905c:	ldrb	r6, [r1, #7]
   19060:	mov	r7, #0
   19064:	ldrb	r2, [r1, #6]
   19068:	lsr	r0, r2, #24
   1906c:	lsl	r3, r2, #8
   19070:	str	r0, [sp, #76]	; 0x4c
   19074:	str	r3, [sp, #72]	; 0x48
   19078:	ldrd	r2, [sp, #72]	; 0x48
   1907c:	orr	r2, r2, r6
   19080:	orr	r3, r3, r7
   19084:	ldrb	r6, [r1, #5]
   19088:	lsr	r0, r6, #16
   1908c:	str	r0, [sp, #52]	; 0x34
   19090:	lsl	r0, r6, #16
   19094:	str	r0, [sp, #48]	; 0x30
   19098:	ldrd	r6, [sp, #48]	; 0x30
   1909c:	orr	r6, r6, r2
   190a0:	orr	r7, r7, r3
   190a4:	mov	r2, r6
   190a8:	mov	r3, r7
   190ac:	ldrb	r6, [r1, #4]
   190b0:	lsr	r0, r6, #8
   190b4:	str	r0, [sp, #28]
   190b8:	lsl	r0, r6, #24
   190bc:	str	r0, [sp, #24]
   190c0:	ldrd	r6, [sp, #24]
   190c4:	orr	r6, r6, r2
   190c8:	orr	r7, r7, r3
   190cc:	mov	r2, r6
   190d0:	mov	r3, r7
   190d4:	ldrb	r0, [r1, #3]
   190d8:	str	r0, [sp, #36]	; 0x24
   190dc:	mov	r0, #0
   190e0:	str	r0, [sp, #32]
   190e4:	ldrd	r6, [sp, #32]
   190e8:	orr	r6, r6, r2
   190ec:	orr	r7, r7, r3
   190f0:	mov	r2, r6
   190f4:	mov	r3, r7
   190f8:	ldrb	r6, [r1, #2]
   190fc:	lsl	r0, r6, #8
   19100:	str	r0, [sp, #20]
   19104:	mov	r0, #0
   19108:	str	r0, [sp, #16]
   1910c:	ldrd	r6, [sp, #16]
   19110:	orr	r6, r6, r2
   19114:	orr	r7, r7, r3
   19118:	mov	r2, r6
   1911c:	mov	r3, r7
   19120:	ldrb	r6, [r1, #1]
   19124:	lsl	r0, r6, #16
   19128:	str	r0, [sp, #12]
   1912c:	mov	r0, #0
   19130:	str	r0, [sp, #8]
   19134:	ldrd	r6, [sp, #8]
   19138:	orr	r6, r6, r2
   1913c:	orr	r7, r7, r3
   19140:	mov	r2, r6
   19144:	mov	r3, r7
   19148:	ldrb	r6, [r1]
   1914c:	mov	sl, #0
   19150:	orr	r2, r2, sl
   19154:	lsl	fp, r6, #24
   19158:	add	r7, pc, #960	; 0x3c0
   1915c:	ldrd	r6, [r7]
   19160:	orr	r3, r3, fp
   19164:	cmp	r3, r7
   19168:	cmpeq	r2, r6
   1916c:	bne	19334 <_start@@Base+0x42a8>
   19170:	add	r5, r1, #8
   19174:	sub	r0, r4, r5
   19178:	cmp	r0, #8
   1917c:	bls	193c8 <_start@@Base+0x433c>
   19180:	ldrb	r6, [r1, #15]
   19184:	mov	r7, #0
   19188:	ldrb	r2, [r1, #14]
   1918c:	lsr	ip, r2, #24
   19190:	lsl	r3, r2, #8
   19194:	str	ip, [sp, #108]	; 0x6c
   19198:	str	r3, [sp, #104]	; 0x68
   1919c:	ldrd	r2, [sp, #104]	; 0x68
   191a0:	orr	r2, r2, r6
   191a4:	orr	r3, r3, r7
   191a8:	mov	r6, r2
   191ac:	mov	r7, r3
   191b0:	ldrb	r2, [r1, #13]
   191b4:	lsr	ip, r2, #16
   191b8:	lsl	r3, r2, #16
   191bc:	str	ip, [sp, #100]	; 0x64
   191c0:	str	r3, [sp, #96]	; 0x60
   191c4:	ldrd	r2, [sp, #96]	; 0x60
   191c8:	orr	r2, r2, r6
   191cc:	orr	r3, r3, r7
   191d0:	mov	r6, r2
   191d4:	mov	r7, r3
   191d8:	ldrb	r2, [r1, #12]
   191dc:	lsr	ip, r2, #8
   191e0:	lsl	r3, r2, #24
   191e4:	str	ip, [sp, #84]	; 0x54
   191e8:	str	r3, [sp, #80]	; 0x50
   191ec:	ldrd	r2, [sp, #80]	; 0x50
   191f0:	orr	r2, r2, r6
   191f4:	orr	r3, r3, r7
   191f8:	mov	r6, r2
   191fc:	mov	r7, r3
   19200:	ldrb	r3, [r1, #11]
   19204:	str	r3, [sp, #92]	; 0x5c
   19208:	mov	r3, #0
   1920c:	str	r3, [sp, #88]	; 0x58
   19210:	ldrd	r2, [sp, #88]	; 0x58
   19214:	orr	r2, r2, r6
   19218:	orr	r3, r3, r7
   1921c:	mov	r6, r2
   19220:	mov	r7, r3
   19224:	ldrb	r2, [r1, #10]
   19228:	lsl	r3, r2, #8
   1922c:	str	r3, [sp, #68]	; 0x44
   19230:	mov	r3, #0
   19234:	str	r3, [sp, #64]	; 0x40
   19238:	ldrd	r2, [sp, #64]	; 0x40
   1923c:	orr	r2, r2, r6
   19240:	orr	r3, r3, r7
   19244:	ldrb	r6, [r1, #9]
   19248:	lsl	ip, r6, #16
   1924c:	str	ip, [sp, #60]	; 0x3c
   19250:	mov	ip, #0
   19254:	str	ip, [sp, #56]	; 0x38
   19258:	ldrd	r6, [sp, #56]	; 0x38
   1925c:	orr	r6, r6, r2
   19260:	orr	r7, r7, r3
   19264:	mov	r2, r6
   19268:	mov	r3, r7
   1926c:	ldrb	r6, [r1, #8]
   19270:	lsl	ip, r6, #24
   19274:	str	ip, [sp, #44]	; 0x2c
   19278:	mov	ip, #0
   1927c:	str	ip, [sp, #40]	; 0x28
   19280:	ldrd	r6, [sp, #40]	; 0x28
   19284:	orr	r7, r7, r3
   19288:	mov	r3, r7
   1928c:	ldr	r7, [pc, #660]	; 19528 <_start@@Base+0x449c>
   19290:	orr	r6, r6, r2
   19294:	and	r3, r3, r7
   19298:	ldr	r7, [pc, #652]	; 1952c <_start@@Base+0x44a0>
   1929c:	mov	r2, r6
   192a0:	mov	r6, #0
   192a4:	and	r2, r2, r6
   192a8:	cmp	r3, r7
   192ac:	mov	r6, #0
   192b0:	cmpeq	r2, r6
   192b4:	bne	192c0 <_start@@Base+0x4234>
   192b8:	cmp	r0, #2
   192bc:	bgt	19534 <_start@@Base+0x44a8>
   192c0:	mov	r1, r5
   192c4:	mov	r2, r4
   192c8:	mov	r0, r8
   192cc:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   192d0:	sub	r3, r4, r0
   192d4:	cmp	r3, #1
   192d8:	ble	192ec <_start@@Base+0x4260>
   192dc:	ldrb	r3, [r0]
   192e0:	cmp	r3, #32
   192e4:	bhi	192fc <_start@@Base+0x4270>
   192e8:	beq	19480 <_start@@Base+0x43f4>
   192ec:	mov	r1, r0
   192f0:	mov	r2, r4
   192f4:	mov	r0, r8
   192f8:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   192fc:	cmp	r4, r0
   19300:	beq	19498 <_start@@Base+0x440c>
   19304:	ldrb	r3, [r0]
   19308:	cmp	r3, #44	; 0x2c
   1930c:	beq	194a0 <_start@@Base+0x4414>
   19310:	cmp	r3, #125	; 0x7d
   19314:	beq	1944c <_start@@Base+0x43c0>
   19318:	mov	r1, r0
   1931c:	mov	r3, #10
   19320:	mov	r2, r4
   19324:	mov	r0, r8
   19328:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1932c:	mov	r1, r0
   19330:	b	18f8c <_start@@Base+0x3f00>
   19334:	mov	r2, r4
   19338:	mov	r0, r8
   1933c:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   19340:	b	192d0 <_start@@Base+0x4244>
   19344:	sub	r3, r3, #1
   19348:	cmp	r3, #7
   1934c:	ldrls	pc, [pc, r3, lsl #2]
   19350:	b	19334 <_start@@Base+0x42a8>
   19354:			; <UNDEFINED> instruction: 0x000193bc
   19358:			; <UNDEFINED> instruction: 0x000193b0
   1935c:	andeq	r9, r1, r4, lsr #7
   19360:	muleq	r1, r8, r3
   19364:	andeq	r9, r1, ip, lsl #7
   19368:	andeq	r9, r1, r0, lsl #7
   1936c:	andeq	r9, r1, r4, ror r3
   19370:	andeq	r9, r1, ip, asr r0
   19374:	mov	r6, r9
   19378:	mov	r7, #0
   1937c:	b	19064 <_start@@Base+0x3fd8>
   19380:	mov	r2, r9
   19384:	mov	r3, #0
   19388:	b	19084 <_start@@Base+0x3ff8>
   1938c:	mov	r2, r9
   19390:	mov	r3, #0
   19394:	b	190ac <_start@@Base+0x4020>
   19398:	mov	r2, r9
   1939c:	mov	r3, #0
   193a0:	b	190d4 <_start@@Base+0x4048>
   193a4:	mov	r2, r9
   193a8:	mov	r3, #0
   193ac:	b	190f8 <_start@@Base+0x406c>
   193b0:	mov	r2, r9
   193b4:	mov	r3, #0
   193b8:	b	19120 <_start@@Base+0x4094>
   193bc:	mov	r2, r9
   193c0:	mov	r3, #0
   193c4:	b	19148 <_start@@Base+0x40bc>
   193c8:	sub	r3, r0, #1
   193cc:	cmp	r3, #7
   193d0:	ldrls	pc, [pc, r3, lsl #2]
   193d4:	b	192c0 <_start@@Base+0x4234>
   193d8:	andeq	r9, r1, r0, asr #8
   193dc:	andeq	r9, r1, r4, lsr r4
   193e0:	andeq	r9, r1, r8, lsr #8
   193e4:	andeq	r9, r1, ip, lsl r4
   193e8:	andeq	r9, r1, r0, lsl r4
   193ec:	andeq	r9, r1, r4, lsl #8
   193f0:	strdeq	r9, [r1], -r8
   193f4:	andeq	r9, r1, r0, lsl #3
   193f8:	mov	r6, r9
   193fc:	mov	r7, #0
   19400:	b	19188 <_start@@Base+0x40fc>
   19404:	mov	r6, r9
   19408:	mov	r7, #0
   1940c:	b	191b0 <_start@@Base+0x4124>
   19410:	mov	r6, r9
   19414:	mov	r7, #0
   19418:	b	191d8 <_start@@Base+0x414c>
   1941c:	mov	r6, r9
   19420:	mov	r7, #0
   19424:	b	19200 <_start@@Base+0x4174>
   19428:	mov	r6, r9
   1942c:	mov	r7, #0
   19430:	b	19224 <_start@@Base+0x4198>
   19434:	mov	r2, r9
   19438:	mov	r3, #0
   1943c:	b	19244 <_start@@Base+0x41b8>
   19440:	mov	r2, r9
   19444:	mov	r3, #0
   19448:	b	1926c <_start@@Base+0x41e0>
   1944c:	add	r1, r0, #1
   19450:	sub	r3, r4, r1
   19454:	cmp	r3, #1
   19458:	ble	1946c <_start@@Base+0x43e0>
   1945c:	ldrb	r3, [r0, #1]
   19460:	cmp	r3, #32
   19464:	bhi	18f8c <_start@@Base+0x3f00>
   19468:	beq	19658 <_start@@Base+0x45cc>
   1946c:	mov	r2, r4
   19470:	mov	r0, r8
   19474:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   19478:	mov	r1, r0
   1947c:	b	18f8c <_start@@Base+0x3f00>
   19480:	ldrb	r3, [r0, #1]
   19484:	cmp	r3, #32
   19488:	addhi	r0, r0, #1
   1948c:	bls	192ec <_start@@Base+0x4260>
   19490:	cmp	r4, r0
   19494:	bne	19304 <_start@@Base+0x4278>
   19498:	mov	r1, r4
   1949c:	b	18fb4 <_start@@Base+0x3f28>
   194a0:	add	r1, r0, #1
   194a4:	sub	r3, r4, r1
   194a8:	cmp	r3, #1
   194ac:	ble	194c0 <_start@@Base+0x4434>
   194b0:	ldrb	r3, [r0, #1]
   194b4:	cmp	r3, #32
   194b8:	bhi	194d0 <_start@@Base+0x4444>
   194bc:	beq	1966c <_start@@Base+0x45e0>
   194c0:	mov	r2, r4
   194c4:	mov	r0, r8
   194c8:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   194cc:	mov	r1, r0
   194d0:	cmp	r4, r1
   194d4:	beq	196e8 <_start@@Base+0x465c>
   194d8:	ldrb	r3, [r1]
   194dc:	cmp	r3, #125	; 0x7d
   194e0:	bne	19024 <_start@@Base+0x3f98>
   194e4:	mov	r3, r1
   194e8:	add	r1, r1, #1
   194ec:	sub	r2, r4, r1
   194f0:	cmp	r2, #1
   194f4:	ble	1946c <_start@@Base+0x43e0>
   194f8:	ldrb	r2, [r3, #1]
   194fc:	cmp	r2, #32
   19500:	bhi	18f8c <_start@@Base+0x3f00>
   19504:	bne	1946c <_start@@Base+0x43e0>
   19508:	ldrb	r2, [r3, #2]
   1950c:	cmp	r2, #32
   19510:	addhi	r1, r3, #2
   19514:	bls	1946c <_start@@Base+0x43e0>
   19518:	b	18f8c <_start@@Base+0x3f00>
   1951c:	nop			; (mov r0, r0)
   19520:	cmpvc	pc, #1342177286	; 0x50000006
   19524:	rsbvs	r6, pc, #428	; 0x1ac
   19528:			; <UNDEFINED> instruction: 0xffff0000
   1952c:	cmnvs	r4, r0
   19530:	andeq	r7, r5, r0, ror r0
   19534:	ldrb	r3, [r1, #10]
   19538:	cmp	r3, #34	; 0x22
   1953c:	bne	192c0 <_start@@Base+0x4234>
   19540:	add	r0, r1, #11
   19544:	sub	r3, r4, r0
   19548:	cmp	r3, #1
   1954c:	ble	19560 <_start@@Base+0x44d4>
   19550:	ldrb	r3, [r1, #11]
   19554:	cmp	r3, #32
   19558:	bhi	19570 <_start@@Base+0x44e4>
   1955c:	beq	19704 <_start@@Base+0x4678>
   19560:	mov	r1, r0
   19564:	mov	r2, r4
   19568:	mov	r0, r8
   1956c:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   19570:	cmp	r4, r0
   19574:	beq	19584 <_start@@Base+0x44f8>
   19578:	ldrb	r3, [r0]
   1957c:	cmp	r3, #58	; 0x3a
   19580:	beq	1972c <_start@@Base+0x46a0>
   19584:	mov	r1, r0
   19588:	mov	r3, #4
   1958c:	mov	r2, r4
   19590:	mov	r0, r8
   19594:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   19598:	mov	r3, r0
   1959c:	str	r0, [sp, #124]	; 0x7c
   195a0:	cmp	r5, r3
   195a4:	beq	192c0 <_start@@Base+0x4234>
   195a8:	mov	r5, r3
   195ac:	cmp	r4, r3
   195b0:	mov	r3, #0
   195b4:	str	r3, [sp, #128]	; 0x80
   195b8:	str	r9, [sp, #136]	; 0x88
   195bc:	str	r3, [sp, #140]	; 0x8c
   195c0:	str	r3, [sp, #132]	; 0x84
   195c4:	beq	19698 <_start@@Base+0x460c>
   195c8:	add	r3, sp, #136	; 0x88
   195cc:	str	r3, [sp]
   195d0:	mov	r2, r4
   195d4:	add	r3, sp, #132	; 0x84
   195d8:	mov	r1, r5
   195dc:	mov	r0, r8
   195e0:	bl	31c94 <flatcc_json_parser_integer@@Base>
   195e4:	cmp	r5, r0
   195e8:	beq	19698 <_start@@Base+0x460c>
   195ec:	ldr	r1, [sp, #132]	; 0x84
   195f0:	ldrd	r2, [sp, #136]	; 0x88
   195f4:	cmp	r1, #0
   195f8:	beq	19618 <_start@@Base+0x458c>
   195fc:	cmp	r3, #0
   19600:	cmpeq	r2, #-2147483648	; 0x80000000
   19604:	rsbls	r3, r2, #0
   19608:	bhi	19680 <_start@@Base+0x45f4>
   1960c:	ldr	r2, [sp, #116]	; 0x74
   19610:	str	r3, [r2]
   19614:	b	192d0 <_start@@Base+0x4244>
   19618:	mov	r7, #0
   1961c:	cmp	r3, r7
   19620:	mvn	r6, #-2147483648	; 0x80000000
   19624:	cmpeq	r2, r6
   19628:	movls	r3, r2
   1962c:	bls	1960c <_start@@Base+0x4580>
   19630:	mov	r1, r0
   19634:	mov	r3, #7
   19638:	mov	r2, r4
   1963c:	mov	r0, r8
   19640:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   19644:	ldr	r3, [sp, #124]	; 0x7c
   19648:	cmp	r3, r0
   1964c:	beq	19698 <_start@@Base+0x460c>
   19650:	ldr	r3, [sp, #128]	; 0x80
   19654:	b	1960c <_start@@Base+0x4580>
   19658:	ldrb	r3, [r0, #2]
   1965c:	cmp	r3, #32
   19660:	addhi	r1, r0, #2
   19664:	bls	1946c <_start@@Base+0x43e0>
   19668:	b	18f8c <_start@@Base+0x3f00>
   1966c:	ldrb	r3, [r0, #2]
   19670:	cmp	r3, #32
   19674:	addhi	r1, r0, #2
   19678:	bls	194c0 <_start@@Base+0x4434>
   1967c:	b	194d0 <_start@@Base+0x4444>
   19680:	mov	r1, r0
   19684:	mov	r3, #8
   19688:	mov	r2, r4
   1968c:	mov	r0, r8
   19690:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   19694:	b	19644 <_start@@Base+0x45b8>
   19698:	ldr	r5, [sp, #124]	; 0x7c
   1969c:	add	r3, sp, #128	; 0x80
   196a0:	str	r3, [sp]
   196a4:	mov	r2, r4
   196a8:	ldr	r3, [pc, #-384]	; 19530 <_start@@Base+0x44a4>
   196ac:	mov	r1, r5
   196b0:	mov	r0, r8
   196b4:	bl	18a2c <_start@@Base+0x39a0>
   196b8:	cmp	r4, r0
   196bc:	cmpne	r0, r5
   196c0:	bne	19650 <_start@@Base+0x45c4>
   196c4:	mov	r1, r0
   196c8:	mov	r3, #33	; 0x21
   196cc:	mov	r2, r4
   196d0:	mov	r0, r8
   196d4:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   196d8:	mov	r1, r0
   196dc:	b	18f8c <_start@@Base+0x3f00>
   196e0:	mov	r1, r5
   196e4:	b	18fb4 <_start@@Base+0x3f28>
   196e8:	mov	r1, r4
   196ec:	mov	r3, #10
   196f0:	mov	r2, r4
   196f4:	mov	r0, r8
   196f8:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   196fc:	mov	r1, r0
   19700:	b	18f8c <_start@@Base+0x3f00>
   19704:	ldrb	r3, [r1, #12]
   19708:	cmp	r3, #32
   1970c:	addhi	r0, r1, #12
   19710:	bls	19560 <_start@@Base+0x44d4>
   19714:	b	19570 <_start@@Base+0x44e4>
   19718:	ldrb	r2, [r5, #2]
   1971c:	cmp	r2, #32
   19720:	addhi	r3, r5, #2
   19724:	bls	18ff4 <_start@@Base+0x3f68>
   19728:	b	19008 <_start@@Base+0x3f7c>
   1972c:	add	r1, r0, #1
   19730:	mov	r2, r4
   19734:	mov	r0, r8
   19738:	bl	167a8 <_start@@Base+0x171c>
   1973c:	str	r0, [sp, #124]	; 0x7c
   19740:	mov	r3, r0
   19744:	b	195a0 <_start@@Base+0x4514>
   19748:	add	r1, r3, #1
   1974c:	mov	r2, r4
   19750:	mov	r0, r8
   19754:	bl	167a8 <_start@@Base+0x171c>
   19758:	mov	r1, r0
   1975c:	b	18f8c <_start@@Base+0x3f00>
   19760:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19764:	sub	sp, sp, #12
   19768:	mov	sl, r2
   1976c:	str	r3, [sp]
   19770:	sub	r2, r2, r1
   19774:	ldr	r3, [sp, #48]	; 0x30
   19778:	cmp	r2, #8
   1977c:	mov	r4, r1
   19780:	mov	r5, r0
   19784:	str	r3, [sp, #4]
   19788:	ldr	fp, [sp, #52]	; 0x34
   1978c:	bls	19864 <_start@@Base+0x47d8>
   19790:	ldrb	r6, [r4, #7]
   19794:	mov	r7, #0
   19798:	ldrb	r0, [r4, #6]
   1979c:	lsr	r3, r0, #24
   197a0:	lsl	r2, r0, #8
   197a4:	orr	r6, r6, r2
   197a8:	orr	r7, r7, r3
   197ac:	ldrb	r0, [r4, #5]
   197b0:	lsr	r3, r0, #16
   197b4:	lsl	r2, r0, #16
   197b8:	orr	r6, r6, r2
   197bc:	orr	r7, r7, r3
   197c0:	ldrb	r0, [r4, #4]
   197c4:	lsr	r3, r0, #8
   197c8:	lsl	r2, r0, #24
   197cc:	orr	r6, r6, r2
   197d0:	orr	r7, r7, r3
   197d4:	ldrb	r3, [r4, #3]
   197d8:	mov	r2, #0
   197dc:	orr	r2, r2, r6
   197e0:	orr	r3, r3, r7
   197e4:	ldrb	r0, [r4, #2]
   197e8:	mov	r6, #0
   197ec:	orr	r2, r2, r6
   197f0:	lsl	r7, r0, #8
   197f4:	orr	r3, r3, r7
   197f8:	ldrb	r0, [r4, #1]
   197fc:	mov	r6, #0
   19800:	orr	r6, r6, r2
   19804:	lsl	r7, r0, #16
   19808:	orr	r7, r7, r3
   1980c:	ldrb	r2, [r4]
   19810:	add	r9, pc, #280	; 0x118
   19814:	ldrd	r8, [r9]
   19818:	mov	r0, #0
   1981c:	orr	r0, r0, r6
   19820:	lsl	r1, r2, #24
   19824:	orr	r1, r1, r7
   19828:	cmp	r1, r9
   1982c:	cmpeq	r0, r8
   19830:	bne	19858 <_start@@Base+0x47cc>
   19834:	add	r6, r4, #8
   19838:	mov	r0, r6
   1983c:	mov	r1, sl
   19840:	bl	151b8 <_start@@Base+0x12c>
   19844:	mov	r0, #0
   19848:	and	r1, r1, #-16777216	; 0xff000000
   1984c:	cmp	r1, #1912602624	; 0x72000000
   19850:	cmpeq	r0, #0
   19854:	beq	19894 <_start@@Base+0x4808>
   19858:	mov	r0, r4
   1985c:	add	sp, sp, #12
   19860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19864:	sub	r2, r2, #1
   19868:	cmp	r2, #7
   1986c:	ldrls	pc, [pc, r2, lsl #2]
   19870:	b	19858 <_start@@Base+0x47cc>
   19874:	ldrdeq	r9, [r1], -ip
   19878:	andeq	r9, r1, r8, ror #17
   1987c:	strdeq	r9, [r1], -r4
   19880:	andeq	r9, r1, r0, lsl #18
   19884:	andeq	r9, r1, ip, lsl #18
   19888:	andeq	r9, r1, r8, lsl r9
   1988c:	andeq	r9, r1, r4, lsr #18
   19890:	muleq	r1, r0, r7
   19894:	sub	r3, sl, r6
   19898:	cmp	r3, #1
   1989c:	ble	19858 <_start@@Base+0x47cc>
   198a0:	ldrb	r3, [r4, #9]
   198a4:	cmp	r3, #46	; 0x2e
   198a8:	bne	19858 <_start@@Base+0x47cc>
   198ac:	add	r1, r4, #10
   198b0:	cmp	r6, r1
   198b4:	beq	19858 <_start@@Base+0x47cc>
   198b8:	ldr	r3, [sp, #4]
   198bc:	str	fp, [sp, #52]	; 0x34
   198c0:	str	r3, [sp, #48]	; 0x30
   198c4:	mov	r2, sl
   198c8:	ldr	r3, [sp]
   198cc:	mov	r0, r5
   198d0:	add	sp, sp, #12
   198d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198d8:	b	16274 <_start@@Base+0x11e8>
   198dc:	mov	r6, #0
   198e0:	mov	r7, #0
   198e4:	b	1980c <_start@@Base+0x4780>
   198e8:	mov	r2, #0
   198ec:	mov	r3, #0
   198f0:	b	197f8 <_start@@Base+0x476c>
   198f4:	mov	r2, #0
   198f8:	mov	r3, #0
   198fc:	b	197e4 <_start@@Base+0x4758>
   19900:	mov	r6, #0
   19904:	mov	r7, #0
   19908:	b	197d4 <_start@@Base+0x4748>
   1990c:	mov	r6, #0
   19910:	mov	r7, #0
   19914:	b	197c0 <_start@@Base+0x4734>
   19918:	mov	r6, #0
   1991c:	mov	r7, #0
   19920:	b	197ac <_start@@Base+0x4720>
   19924:	mov	r6, #0
   19928:	mov	r7, #0
   1992c:	b	19798 <_start@@Base+0x470c>
   19930:	cmnvs	r3, r5, ror #8
   19934:	cmnmi	r8, #-2147483620	; 0x8000001c
   19938:	push	{r4, r5, r6, lr}
   1993c:	mov	r4, r2
   19940:	sub	r2, r2, r1
   19944:	cmp	r2, #1
   19948:	mov	r5, r0
   1994c:	mov	r6, r3
   19950:	ble	19964 <_start@@Base+0x48d8>
   19954:	ldrb	r3, [r1]
   19958:	cmp	r3, #32
   1995c:	bhi	19974 <_start@@Base+0x48e8>
   19960:	beq	199e4 <_start@@Base+0x4958>
   19964:	mov	r2, r4
   19968:	mov	r0, r5
   1996c:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   19970:	mov	r1, r0
   19974:	cmp	r4, r1
   19978:	beq	19a48 <_start@@Base+0x49bc>
   1997c:	ldrb	r3, [r1]
   19980:	cmp	r3, #44	; 0x2c
   19984:	beq	199f8 <_start@@Base+0x496c>
   19988:	mov	r3, #0
   1998c:	str	r3, [r6]
   19990:	ldrb	r3, [r1]
   19994:	cmp	r3, #93	; 0x5d
   19998:	beq	199b0 <_start@@Base+0x4924>
   1999c:	mov	r2, r4
   199a0:	mov	r0, r5
   199a4:	mov	r3, #9
   199a8:	pop	{r4, r5, r6, lr}
   199ac:	b	2e8b4 <flatcc_json_parser_set_error@@Base>
   199b0:	add	r0, r1, #1
   199b4:	sub	r3, r4, r0
   199b8:	cmp	r3, #1
   199bc:	ble	199d0 <_start@@Base+0x4944>
   199c0:	ldrb	r3, [r1, #1]
   199c4:	cmp	r3, #32
   199c8:	pophi	{r4, r5, r6, pc}
   199cc:	beq	19a6c <_start@@Base+0x49e0>
   199d0:	mov	r2, r4
   199d4:	mov	r1, r0
   199d8:	mov	r0, r5
   199dc:	pop	{r4, r5, r6, lr}
   199e0:	b	2e9b4 <flatcc_json_parser_space_ext@@Base>
   199e4:	ldrb	r3, [r1, #1]
   199e8:	cmp	r3, #32
   199ec:	addhi	r1, r1, #1
   199f0:	bls	19964 <_start@@Base+0x48d8>
   199f4:	b	19974 <_start@@Base+0x48e8>
   199f8:	add	r0, r1, #1
   199fc:	sub	r3, r4, r0
   19a00:	cmp	r3, #1
   19a04:	ble	19a18 <_start@@Base+0x498c>
   19a08:	ldrb	r3, [r1, #1]
   19a0c:	cmp	r3, #32
   19a10:	bhi	19a28 <_start@@Base+0x499c>
   19a14:	beq	19a58 <_start@@Base+0x49cc>
   19a18:	mov	r1, r0
   19a1c:	mov	r2, r4
   19a20:	mov	r0, r5
   19a24:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   19a28:	cmp	r4, r0
   19a2c:	beq	19a9c <_start@@Base+0x4a10>
   19a30:	ldrb	r3, [r0]
   19a34:	cmp	r3, #93	; 0x5d
   19a38:	beq	19a80 <_start@@Base+0x49f4>
   19a3c:	mov	r3, #1
   19a40:	str	r3, [r6]
   19a44:	pop	{r4, r5, r6, pc}
   19a48:	mov	r3, #0
   19a4c:	mov	r0, r4
   19a50:	str	r3, [r6]
   19a54:	pop	{r4, r5, r6, pc}
   19a58:	ldrb	r3, [r1, #2]
   19a5c:	cmp	r3, #32
   19a60:	addhi	r0, r1, #2
   19a64:	bls	19a18 <_start@@Base+0x498c>
   19a68:	b	19a28 <_start@@Base+0x499c>
   19a6c:	ldrb	r3, [r1, #2]
   19a70:	cmp	r3, #32
   19a74:	bls	199d0 <_start@@Base+0x4944>
   19a78:	add	r0, r1, #2
   19a7c:	pop	{r4, r5, r6, pc}
   19a80:	mov	r3, #0
   19a84:	mov	r2, r4
   19a88:	add	r1, r0, #1
   19a8c:	str	r3, [r6]
   19a90:	mov	r0, r5
   19a94:	pop	{r4, r5, r6, lr}
   19a98:	b	167a8 <_start@@Base+0x171c>
   19a9c:	mov	r3, #0
   19aa0:	str	r3, [r6]
   19aa4:	mov	r0, r5
   19aa8:	mov	r2, r4
   19aac:	mov	r1, r4
   19ab0:	mov	r3, #9
   19ab4:	pop	{r4, r5, r6, lr}
   19ab8:	b	2e8b4 <flatcc_json_parser_set_error@@Base>
   19abc:	push	{r4, r5, r6, lr}
   19ac0:	mov	r4, r2
   19ac4:	sub	r2, r2, r1
   19ac8:	cmp	r2, #1
   19acc:	mov	r5, r0
   19ad0:	mov	r6, r3
   19ad4:	ble	19ae8 <_start@@Base+0x4a5c>
   19ad8:	ldrb	r3, [r1]
   19adc:	cmp	r3, #32
   19ae0:	bhi	19af8 <_start@@Base+0x4a6c>
   19ae4:	beq	19b68 <_start@@Base+0x4adc>
   19ae8:	mov	r2, r4
   19aec:	mov	r0, r5
   19af0:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   19af4:	mov	r1, r0
   19af8:	cmp	r4, r1
   19afc:	beq	19bcc <_start@@Base+0x4b40>
   19b00:	ldrb	r3, [r1]
   19b04:	cmp	r3, #44	; 0x2c
   19b08:	beq	19b7c <_start@@Base+0x4af0>
   19b0c:	mov	r3, #0
   19b10:	str	r3, [r6]
   19b14:	ldrb	r3, [r1]
   19b18:	cmp	r3, #125	; 0x7d
   19b1c:	beq	19b34 <_start@@Base+0x4aa8>
   19b20:	mov	r2, r4
   19b24:	mov	r0, r5
   19b28:	mov	r3, #10
   19b2c:	pop	{r4, r5, r6, lr}
   19b30:	b	2e8b4 <flatcc_json_parser_set_error@@Base>
   19b34:	add	r0, r1, #1
   19b38:	sub	r3, r4, r0
   19b3c:	cmp	r3, #1
   19b40:	ble	19b54 <_start@@Base+0x4ac8>
   19b44:	ldrb	r3, [r1, #1]
   19b48:	cmp	r3, #32
   19b4c:	pophi	{r4, r5, r6, pc}
   19b50:	beq	19bf0 <_start@@Base+0x4b64>
   19b54:	mov	r2, r4
   19b58:	mov	r1, r0
   19b5c:	mov	r0, r5
   19b60:	pop	{r4, r5, r6, lr}
   19b64:	b	2e9b4 <flatcc_json_parser_space_ext@@Base>
   19b68:	ldrb	r3, [r1, #1]
   19b6c:	cmp	r3, #32
   19b70:	addhi	r1, r1, #1
   19b74:	bls	19ae8 <_start@@Base+0x4a5c>
   19b78:	b	19af8 <_start@@Base+0x4a6c>
   19b7c:	add	r0, r1, #1
   19b80:	sub	r3, r4, r0
   19b84:	cmp	r3, #1
   19b88:	ble	19b9c <_start@@Base+0x4b10>
   19b8c:	ldrb	r3, [r1, #1]
   19b90:	cmp	r3, #32
   19b94:	bhi	19bac <_start@@Base+0x4b20>
   19b98:	beq	19bdc <_start@@Base+0x4b50>
   19b9c:	mov	r1, r0
   19ba0:	mov	r2, r4
   19ba4:	mov	r0, r5
   19ba8:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   19bac:	cmp	r4, r0
   19bb0:	beq	19c20 <_start@@Base+0x4b94>
   19bb4:	ldrb	r3, [r0]
   19bb8:	cmp	r3, #125	; 0x7d
   19bbc:	beq	19c04 <_start@@Base+0x4b78>
   19bc0:	mov	r3, #1
   19bc4:	str	r3, [r6]
   19bc8:	pop	{r4, r5, r6, pc}
   19bcc:	mov	r3, #0
   19bd0:	mov	r0, r4
   19bd4:	str	r3, [r6]
   19bd8:	pop	{r4, r5, r6, pc}
   19bdc:	ldrb	r3, [r1, #2]
   19be0:	cmp	r3, #32
   19be4:	addhi	r0, r1, #2
   19be8:	bls	19b9c <_start@@Base+0x4b10>
   19bec:	b	19bac <_start@@Base+0x4b20>
   19bf0:	ldrb	r3, [r1, #2]
   19bf4:	cmp	r3, #32
   19bf8:	bls	19b54 <_start@@Base+0x4ac8>
   19bfc:	add	r0, r1, #2
   19c00:	pop	{r4, r5, r6, pc}
   19c04:	mov	r3, #0
   19c08:	mov	r2, r4
   19c0c:	add	r1, r0, #1
   19c10:	str	r3, [r6]
   19c14:	mov	r0, r5
   19c18:	pop	{r4, r5, r6, lr}
   19c1c:	b	167a8 <_start@@Base+0x171c>
   19c20:	mov	r3, #0
   19c24:	str	r3, [r6]
   19c28:	mov	r0, r5
   19c2c:	mov	r2, r4
   19c30:	mov	r1, r4
   19c34:	mov	r3, #10
   19c38:	pop	{r4, r5, r6, lr}
   19c3c:	b	2e8b4 <flatcc_json_parser_set_error@@Base>
   19c40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c44:	mov	fp, r3
   19c48:	mov	r3, #0
   19c4c:	sub	sp, sp, #36	; 0x24
   19c50:	mov	sl, r0
   19c54:	mov	r4, r1
   19c58:	str	r3, [fp]
   19c5c:	ldr	r0, [r0]
   19c60:	mov	r1, #10
   19c64:	mov	r5, r2
   19c68:	bl	27fa8 <flatcc_builder_start_table@@Base>
   19c6c:	cmp	r0, #0
   19c70:	bne	19e68 <_start@@Base+0x4ddc>
   19c74:	add	r3, sp, #28
   19c78:	str	r3, [sp]
   19c7c:	mov	r2, r5
   19c80:	mov	r3, #5
   19c84:	mov	r1, r4
   19c88:	mov	r0, sl
   19c8c:	bl	32598 <flatcc_json_parser_prepare_unions@@Base>
   19c90:	cmp	r5, r0
   19c94:	beq	19e68 <_start@@Base+0x4ddc>
   19c98:	mov	r1, r4
   19c9c:	add	r3, sp, #24
   19ca0:	mov	r2, r5
   19ca4:	mov	r0, sl
   19ca8:	bl	17c44 <_start@@Base+0x2bb8>
   19cac:	ldr	r3, [sp, #24]
   19cb0:	cmp	r3, #0
   19cb4:	mov	r4, r0
   19cb8:	beq	19e5c <_start@@Base+0x4dd0>
   19cbc:	add	r9, pc, #972	; 0x3cc
   19cc0:	ldrd	r8, [r9]
   19cc4:	b	19d48 <_start@@Base+0x4cbc>
   19cc8:	add	r3, pc, #968	; 0x3c8
   19ccc:	ldrd	r2, [r3]
   19cd0:	cmp	r1, r3
   19cd4:	cmpeq	r0, r2
   19cd8:	beq	19f58 <_start@@Base+0x4ecc>
   19cdc:	add	r3, pc, #956	; 0x3bc
   19ce0:	ldrd	r2, [r3]
   19ce4:	cmp	r1, r3
   19ce8:	cmpeq	r0, r2
   19cec:	beq	19ffc <_start@@Base+0x4f70>
   19cf0:	add	r3, pc, #944	; 0x3b0
   19cf4:	ldrd	r2, [r3]
   19cf8:	and	r0, r0, #-16777216	; 0xff000000
   19cfc:	cmp	r1, r3
   19d00:	cmpeq	r0, r2
   19d04:	bne	19d14 <_start@@Base+0x4c88>
   19d08:	sub	r3, r5, r4
   19d0c:	cmp	r3, #5
   19d10:	bgt	1a28c <_start@@Base+0x5200>
   19d14:	mov	r1, r4
   19d18:	mov	r2, r5
   19d1c:	mov	r0, sl
   19d20:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   19d24:	mov	r1, r0
   19d28:	add	r3, sp, #24
   19d2c:	mov	r2, r5
   19d30:	mov	r0, sl
   19d34:	bl	19abc <_start@@Base+0x4a30>
   19d38:	ldr	r3, [sp, #24]
   19d3c:	cmp	r3, #0
   19d40:	mov	r4, r0
   19d44:	beq	19e5c <_start@@Base+0x4dd0>
   19d48:	cmp	r5, r4
   19d4c:	beq	19d78 <_start@@Base+0x4cec>
   19d50:	ldrb	r3, [r4]
   19d54:	cmp	r3, #34	; 0x22
   19d58:	addeq	r4, r4, #1
   19d5c:	beq	19d78 <_start@@Base+0x4cec>
   19d60:	mov	r1, r4
   19d64:	mov	r3, #5
   19d68:	mov	r2, r5
   19d6c:	mov	r0, sl
   19d70:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   19d74:	mov	r4, r0
   19d78:	mov	r1, r5
   19d7c:	mov	r0, r4
   19d80:	bl	151b8 <_start@@Base+0x12c>
   19d84:	cmp	r1, r9
   19d88:	cmpeq	r0, r8
   19d8c:	bls	19cc8 <_start@@Base+0x4c3c>
   19d90:	add	r3, pc, #792	; 0x318
   19d94:	ldrd	r2, [r3]
   19d98:	cmp	r1, r3
   19d9c:	cmpeq	r0, r2
   19da0:	bhi	19e84 <_start@@Base+0x4df8>
   19da4:	add	r3, pc, #780	; 0x30c
   19da8:	ldrd	r2, [r3]
   19dac:	cmp	r1, r3
   19db0:	cmpeq	r0, r2
   19db4:	bne	19d14 <_start@@Base+0x4c88>
   19db8:	add	r4, r4, #8
   19dbc:	mov	r0, r4
   19dc0:	mov	r1, r5
   19dc4:	bl	151b8 <_start@@Base+0x12c>
   19dc8:	add	r3, pc, #752	; 0x2f0
   19dcc:	ldrd	r2, [r3]
   19dd0:	bic	r6, r0, #255	; 0xff
   19dd4:	cmp	r1, r3
   19dd8:	cmpeq	r6, r2
   19ddc:	beq	1a2d8 <_start@@Base+0x524c>
   19de0:	ldr	r3, [pc, #768]	; 1a0e8 <_start@@Base+0x505c>
   19de4:	mov	r2, #0
   19de8:	and	r1, r1, r3
   19dec:	ldr	r3, [pc, #760]	; 1a0ec <_start@@Base+0x5060>
   19df0:	and	r0, r0, r2
   19df4:	cmp	r1, r3
   19df8:	mov	r2, #0
   19dfc:	cmpeq	r0, r2
   19e00:	bne	19d14 <_start@@Base+0x4c88>
   19e04:	sub	r3, r5, r4
   19e08:	cmp	r3, #2
   19e0c:	ble	19d14 <_start@@Base+0x4c88>
   19e10:	mov	r1, r4
   19e14:	mov	r3, #2
   19e18:	mov	r2, r5
   19e1c:	mov	r0, sl
   19e20:	bl	18e7c <_start@@Base+0x3df0>
   19e24:	cmp	r4, r0
   19e28:	mov	r1, r0
   19e2c:	beq	19d14 <_start@@Base+0x4c88>
   19e30:	ldr	r2, [sp, #28]
   19e34:	ldr	ip, [pc, #692]	; 1a0f0 <_start@@Base+0x5064>
   19e38:	mov	r3, #9
   19e3c:	str	r3, [sp]
   19e40:	stmib	sp, {r2, ip}
   19e44:	mov	r3, #4
   19e48:	mov	r2, r5
   19e4c:	mov	r0, sl
   19e50:	bl	32bb0 <flatcc_json_parser_union_vector@@Base>
   19e54:	mov	r1, r0
   19e58:	b	19d28 <_start@@Base+0x4c9c>
   19e5c:	ldr	r3, [sl, #20]
   19e60:	cmp	r3, #0
   19e64:	beq	1a174 <_start@@Base+0x50e8>
   19e68:	mov	r2, r5
   19e6c:	mov	r1, r4
   19e70:	mov	r0, sl
   19e74:	mov	r3, #33	; 0x21
   19e78:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   19e7c:	add	sp, sp, #36	; 0x24
   19e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e84:	add	r3, pc, #572	; 0x23c
   19e88:	ldrd	r2, [r3]
   19e8c:	cmp	r1, r3
   19e90:	cmpeq	r0, r2
   19e94:	beq	1a100 <_start@@Base+0x5074>
   19e98:	add	r3, pc, #560	; 0x230
   19e9c:	ldrd	r2, [r3]
   19ea0:	cmp	r1, r3
   19ea4:	cmpeq	r0, r2
   19ea8:	bne	19d14 <_start@@Base+0x4c88>
   19eac:	add	r4, r4, #8
   19eb0:	mov	r0, r4
   19eb4:	mov	r1, r5
   19eb8:	bl	151b8 <_start@@Base+0x12c>
   19ebc:	ldr	r2, [pc, #548]	; 1a0e8 <_start@@Base+0x505c>
   19ec0:	mvn	r3, #0
   19ec4:	mov	r6, r0
   19ec8:	mov	r7, r1
   19ecc:	add	r1, pc, #516	; 0x204
   19ed0:	ldrd	r0, [r1]
   19ed4:	and	r3, r3, r7
   19ed8:	and	r2, r2, r6
   19edc:	cmp	r3, r1
   19ee0:	cmpeq	r2, r0
   19ee4:	beq	1a33c <_start@@Base+0x52b0>
   19ee8:	and	r7, r7, #-16777216	; 0xff000000
   19eec:	mov	r6, #0
   19ef0:	cmp	r7, #1795162112	; 0x6b000000
   19ef4:	cmpeq	r6, #0
   19ef8:	bne	19d14 <_start@@Base+0x4c88>
   19efc:	sub	r3, r5, r4
   19f00:	cmp	r3, #1
   19f04:	ble	19d14 <_start@@Base+0x4c88>
   19f08:	mov	r1, r4
   19f0c:	mov	r3, #1
   19f10:	mov	r2, r5
   19f14:	mov	r0, sl
   19f18:	bl	18e7c <_start@@Base+0x3df0>
   19f1c:	cmp	r4, r0
   19f20:	mov	r1, r0
   19f24:	beq	19d14 <_start@@Base+0x4c88>
   19f28:	ldr	r2, [sp, #28]
   19f2c:	ldr	r0, [pc, #444]	; 1a0f0 <_start@@Base+0x5064>
   19f30:	mov	r3, #5
   19f34:	str	r0, [sp, #8]
   19f38:	str	r2, [sp, #4]
   19f3c:	str	r3, [sp]
   19f40:	mov	r2, r5
   19f44:	mov	r3, #2
   19f48:	mov	r0, sl
   19f4c:	bl	32694 <flatcc_json_parser_union@@Base>
   19f50:	mov	r1, r0
   19f54:	b	19d28 <_start@@Base+0x4c9c>
   19f58:	add	r4, r4, #8
   19f5c:	mov	r0, r4
   19f60:	mov	r1, r5
   19f64:	bl	151b8 <_start@@Base+0x12c>
   19f68:	add	r3, pc, #368	; 0x170
   19f6c:	ldrd	r2, [r3]
   19f70:	bic	r6, r0, #255	; 0xff
   19f74:	cmp	r1, r3
   19f78:	cmpeq	r6, r2
   19f7c:	beq	1a230 <_start@@Base+0x51a4>
   19f80:	ldr	r3, [pc, #352]	; 1a0e8 <_start@@Base+0x505c>
   19f84:	mov	r2, #0
   19f88:	and	r1, r1, r3
   19f8c:	ldr	r3, [pc, #352]	; 1a0f4 <_start@@Base+0x5068>
   19f90:	and	r0, r0, r2
   19f94:	cmp	r1, r3
   19f98:	mov	r2, #0
   19f9c:	cmpeq	r0, r2
   19fa0:	bne	19d14 <_start@@Base+0x4c88>
   19fa4:	sub	r3, r5, r4
   19fa8:	cmp	r3, #2
   19fac:	ble	19d14 <_start@@Base+0x4c88>
   19fb0:	mov	r1, r4
   19fb4:	mov	r3, #2
   19fb8:	mov	r2, r5
   19fbc:	mov	r0, sl
   19fc0:	bl	18e7c <_start@@Base+0x3df0>
   19fc4:	cmp	r4, r0
   19fc8:	mov	r1, r0
   19fcc:	beq	19d14 <_start@@Base+0x4c88>
   19fd0:	ldr	r2, [sp, #28]
   19fd4:	ldr	ip, [pc, #276]	; 1a0f0 <_start@@Base+0x5064>
   19fd8:	mov	r3, #3
   19fdc:	str	r3, [sp]
   19fe0:	stmib	sp, {r2, ip}
   19fe4:	mov	r3, #1
   19fe8:	mov	r2, r5
   19fec:	mov	r0, sl
   19ff0:	bl	32694 <flatcc_json_parser_union@@Base>
   19ff4:	mov	r1, r0
   19ff8:	b	19d28 <_start@@Base+0x4c9c>
   19ffc:	add	r4, r4, #8
   1a000:	mov	r0, r4
   1a004:	mov	r1, r5
   1a008:	bl	151b8 <_start@@Base+0x12c>
   1a00c:	ldr	r3, [pc, #212]	; 1a0e8 <_start@@Base+0x505c>
   1a010:	ldr	r7, [pc, #224]	; 1a0f8 <_start@@Base+0x506c>
   1a014:	mov	r2, #0
   1a018:	mov	r6, #0
   1a01c:	and	r1, r1, r3
   1a020:	and	r0, r0, r2
   1a024:	cmp	r1, r7
   1a028:	cmpeq	r0, r6
   1a02c:	bne	19d14 <_start@@Base+0x4c88>
   1a030:	sub	r3, r5, r4
   1a034:	cmp	r3, #2
   1a038:	ble	19d14 <_start@@Base+0x4c88>
   1a03c:	mov	r1, r4
   1a040:	mov	r3, #2
   1a044:	mov	r2, r5
   1a048:	mov	r0, sl
   1a04c:	bl	18e7c <_start@@Base+0x3df0>
   1a050:	cmp	r4, r0
   1a054:	mov	r1, r0
   1a058:	beq	19d14 <_start@@Base+0x4c88>
   1a05c:	ldr	r2, [sp, #28]
   1a060:	ldr	lr, [pc, #136]	; 1a0f0 <_start@@Base+0x5064>
   1a064:	ldr	ip, [pc, #144]	; 1a0fc <_start@@Base+0x5070>
   1a068:	mov	r3, #7
   1a06c:	str	r3, [sp]
   1a070:	stmib	sp, {r2, ip, lr}
   1a074:	mov	r3, #3
   1a078:	mov	r2, r5
   1a07c:	mov	r0, sl
   1a080:	bl	32804 <flatcc_json_parser_union_type@@Base>
   1a084:	mov	r1, r0
   1a088:	b	19d28 <_start@@Base+0x4c9c>
   1a08c:	nop			; (mov r0, r0)
   1a090:	cmnvs	r3, r4, ror #8
   1a094:	cmnvs	r8, #-2147483620	; 0x8000001c
   1a098:	strbvs	r6, [pc, -r9, ror #28]!
   1a09c:	cmnvs	lr, r1, ror #8
   1a0a0:	svcvs	0x005f7479
   1a0a4:	cmnvs	r1, #6464	; 0x1940
   1a0a8:	svcvs	0x00000000
   1a0ac:	cmnvs	r1, #6464	; 0x1940
   1a0b0:	svcpl	0x00636860
   1a0b4:			; <UNDEFINED> instruction: 0x6d61696e
   1a0b8:	cmnvs	r3, r5, ror #8
   1a0bc:	cmnvs	r8, #-2147483620	; 0x8000001c
   1a0c0:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1a0c4:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   1a0c8:	svcpl	0x00636861
   1a0cc:			; <UNDEFINED> instruction: 0x6d61696e
   1a0d0:	svcpl	0x006b6963
   1a0d4:	cmnvc	r9, #1694498816	; 0x65000000
   1a0d8:	rsbvc	r0, r5, r0
   1a0dc:	blvs	17f72c8 <__bss_end__@@Base+0x179ff0c>
   1a0e0:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1a0e4:	cmnvc	r4, #116, 30	; 0x1d0
   1a0e8:			; <UNDEFINED> instruction: 0xffff0000
   1a0ec:	rsbsvc	r0, r3, #0
   1a0f0:	andeq	sl, r1, ip, lsl r4
   1a0f4:	cmnvc	r4, #0
   1a0f8:	rsbvc	r0, r5, r0
   1a0fc:	andeq	r7, r5, ip, lsl #1
   1a100:	add	r6, r4, #8
   1a104:	mov	r0, r6
   1a108:	mov	r1, r5
   1a10c:	bl	151b8 <_start@@Base+0x12c>
   1a110:	add	r3, pc, #720	; 0x2d0
   1a114:	ldrd	r2, [r3]
   1a118:	cmp	r1, r3
   1a11c:	cmpeq	r0, r2
   1a120:	beq	1a1a8 <_start@@Base+0x511c>
   1a124:	ldr	r2, [pc, #724]	; 1a400 <_start@@Base+0x5374>
   1a128:	mvn	r3, #0
   1a12c:	and	r2, r2, r0
   1a130:	and	r3, r3, r1
   1a134:	mov	r0, r2
   1a138:	mov	r1, r3
   1a13c:	add	r3, pc, #684	; 0x2ac
   1a140:	ldrd	r2, [r3]
   1a144:	cmp	r1, r3
   1a148:	cmpeq	r0, r2
   1a14c:	bne	1a15c <_start@@Base+0x50d0>
   1a150:	sub	r3, r5, r6
   1a154:	cmp	r3, #6
   1a158:	bgt	1a398 <_start@@Base+0x530c>
   1a15c:	mov	r1, r6
   1a160:	mov	r2, r5
   1a164:	mov	r0, sl
   1a168:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1a16c:	mov	r1, r0
   1a170:	b	19d28 <_start@@Base+0x4c9c>
   1a174:	mov	r1, r4
   1a178:	ldr	r3, [sp, #28]
   1a17c:	mov	r2, r5
   1a180:	mov	r0, sl
   1a184:	bl	32624 <flatcc_json_parser_finalize_unions@@Base>
   1a188:	mov	r4, r0
   1a18c:	ldr	r0, [sl]
   1a190:	bl	289e8 <flatcc_builder_end_table@@Base>
   1a194:	cmp	r0, #0
   1a198:	str	r0, [fp]
   1a19c:	movne	r0, r4
   1a1a0:	beq	19e68 <_start@@Base+0x4ddc>
   1a1a4:	b	19e7c <_start@@Base+0x4df0>
   1a1a8:	add	r4, r4, #16
   1a1ac:	mov	r0, r4
   1a1b0:	mov	r1, r5
   1a1b4:	bl	151b8 <_start@@Base+0x12c>
   1a1b8:	add	r3, pc, #568	; 0x238
   1a1bc:	ldrd	r2, [r3]
   1a1c0:	mov	r0, #0
   1a1c4:	bic	r1, r1, #255	; 0xff
   1a1c8:	cmp	r1, r3
   1a1cc:	cmpeq	r0, r2
   1a1d0:	bne	19d14 <_start@@Base+0x4c88>
   1a1d4:	sub	r3, r5, r4
   1a1d8:	cmp	r3, #3
   1a1dc:	ble	19d14 <_start@@Base+0x4c88>
   1a1e0:	mov	r1, r4
   1a1e4:	mov	r3, #3
   1a1e8:	mov	r2, r5
   1a1ec:	mov	r0, sl
   1a1f0:	bl	18e7c <_start@@Base+0x3df0>
   1a1f4:	cmp	r4, r0
   1a1f8:	mov	r1, r0
   1a1fc:	beq	19d14 <_start@@Base+0x4c88>
   1a200:	ldr	r2, [sp, #28]
   1a204:	ldr	lr, [pc, #504]	; 1a404 <_start@@Base+0x5378>
   1a208:	ldr	ip, [pc, #504]	; 1a408 <_start@@Base+0x537c>
   1a20c:	mov	r3, #1
   1a210:	str	r3, [sp]
   1a214:	stmib	sp, {r2, ip, lr}
   1a218:	mov	r3, #0
   1a21c:	mov	r2, r5
   1a220:	mov	r0, sl
   1a224:	bl	32804 <flatcc_json_parser_union_type@@Base>
   1a228:	mov	r1, r0
   1a22c:	b	19d28 <_start@@Base+0x4c9c>
   1a230:	sub	r3, r5, r4
   1a234:	cmp	r3, #7
   1a238:	ble	19d14 <_start@@Base+0x4c88>
   1a23c:	mov	r1, r4
   1a240:	mov	r3, #7
   1a244:	mov	r2, r5
   1a248:	mov	r0, sl
   1a24c:	bl	18e7c <_start@@Base+0x3df0>
   1a250:	cmp	r4, r0
   1a254:	mov	r1, r0
   1a258:	beq	19d14 <_start@@Base+0x4c88>
   1a25c:	ldr	r2, [sp, #28]
   1a260:	ldr	lr, [pc, #412]	; 1a404 <_start@@Base+0x5378>
   1a264:	ldr	ip, [pc, #416]	; 1a40c <_start@@Base+0x5380>
   1a268:	mov	r3, #3
   1a26c:	str	r3, [sp]
   1a270:	stmib	sp, {r2, ip, lr}
   1a274:	mov	r3, #1
   1a278:	mov	r2, r5
   1a27c:	mov	r0, sl
   1a280:	bl	32804 <flatcc_json_parser_union_type@@Base>
   1a284:	mov	r1, r0
   1a288:	b	19d28 <_start@@Base+0x4c9c>
   1a28c:	mov	r1, r4
   1a290:	mov	r3, #5
   1a294:	mov	r2, r5
   1a298:	mov	r0, sl
   1a29c:	bl	18e7c <_start@@Base+0x3df0>
   1a2a0:	cmp	r4, r0
   1a2a4:	mov	r1, r0
   1a2a8:	beq	19d14 <_start@@Base+0x4c88>
   1a2ac:	ldr	r2, [sp, #28]
   1a2b0:	ldr	ip, [pc, #332]	; 1a404 <_start@@Base+0x5378>
   1a2b4:	mov	r3, #7
   1a2b8:	str	r3, [sp]
   1a2bc:	stmib	sp, {r2, ip}
   1a2c0:	mov	r3, #3
   1a2c4:	mov	r2, r5
   1a2c8:	mov	r0, sl
   1a2cc:	bl	32694 <flatcc_json_parser_union@@Base>
   1a2d0:	mov	r1, r0
   1a2d4:	b	19d28 <_start@@Base+0x4c9c>
   1a2d8:	sub	r3, r5, r4
   1a2dc:	cmp	r3, #7
   1a2e0:	ble	19d14 <_start@@Base+0x4c88>
   1a2e4:	mov	r1, r4
   1a2e8:	mov	r3, #7
   1a2ec:	mov	r2, r5
   1a2f0:	mov	r0, sl
   1a2f4:	bl	18e7c <_start@@Base+0x3df0>
   1a2f8:	cmp	r4, r0
   1a2fc:	mov	r1, r0
   1a300:	beq	19d14 <_start@@Base+0x4c88>
   1a304:	ldr	r2, [sp, #28]
   1a308:	ldr	r3, [pc, #256]	; 1a410 <_start@@Base+0x5384>
   1a30c:	ldr	lr, [pc, #240]	; 1a404 <_start@@Base+0x5378>
   1a310:	ldr	ip, [pc, #252]	; 1a414 <_start@@Base+0x5388>
   1a314:	str	r3, [sp, #16]
   1a318:	mov	r3, #9
   1a31c:	stmib	sp, {r2, ip, lr}
   1a320:	mov	r0, sl
   1a324:	str	r3, [sp]
   1a328:	mov	r2, r5
   1a32c:	mov	r3, #4
   1a330:	bl	32c9c <flatcc_json_parser_union_type_vector@@Base>
   1a334:	mov	r1, r0
   1a338:	b	19d28 <_start@@Base+0x4c9c>
   1a33c:	sub	r3, r5, r4
   1a340:	cmp	r3, #6
   1a344:	ble	19d14 <_start@@Base+0x4c88>
   1a348:	mov	r1, r4
   1a34c:	mov	r3, #6
   1a350:	mov	r2, r5
   1a354:	mov	r0, sl
   1a358:	bl	18e7c <_start@@Base+0x3df0>
   1a35c:	cmp	r4, r0
   1a360:	mov	r1, r0
   1a364:	beq	19d14 <_start@@Base+0x4c88>
   1a368:	ldr	r2, [sp, #28]
   1a36c:	ldr	lr, [pc, #144]	; 1a404 <_start@@Base+0x5378>
   1a370:	ldr	ip, [pc, #160]	; 1a418 <_start@@Base+0x538c>
   1a374:	mov	r3, #5
   1a378:	str	r3, [sp]
   1a37c:	stmib	sp, {r2, ip, lr}
   1a380:	mov	r3, #2
   1a384:	mov	r2, r5
   1a388:	mov	r0, sl
   1a38c:	bl	32804 <flatcc_json_parser_union_type@@Base>
   1a390:	mov	r1, r0
   1a394:	b	19d28 <_start@@Base+0x4c9c>
   1a398:	mov	r1, r6
   1a39c:	mov	r3, #6
   1a3a0:	mov	r2, r5
   1a3a4:	mov	r0, sl
   1a3a8:	bl	18e7c <_start@@Base+0x3df0>
   1a3ac:	cmp	r6, r0
   1a3b0:	mov	r1, r0
   1a3b4:	beq	1a15c <_start@@Base+0x50d0>
   1a3b8:	ldr	r2, [sp, #28]
   1a3bc:	ldr	ip, [pc, #64]	; 1a404 <_start@@Base+0x5378>
   1a3c0:	mov	r3, #1
   1a3c4:	str	r3, [sp]
   1a3c8:	stmib	sp, {r2, ip}
   1a3cc:	mov	r3, #0
   1a3d0:	mov	r2, r5
   1a3d4:	mov	r0, sl
   1a3d8:	bl	32694 <flatcc_json_parser_union@@Base>
   1a3dc:	mov	r1, r0
   1a3e0:	b	19d28 <_start@@Base+0x4c9c>
   1a3e4:	nop			; (mov r0, r0)
   1a3e8:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   1a3ec:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1a3f0:	ldrbvs	r0, [r2, #-0]!
   1a3f4:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1a3f8:	andeq	r0, r0, r0
   1a3fc:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1a400:			; <UNDEFINED> instruction: 0xffff0000
   1a404:	andeq	sl, r1, ip, lsl r4
   1a408:	andeq	r7, r5, ip, lsr #1
   1a40c:	andeq	r7, r5, ip, ror r0
   1a410:	andeq	r5, r1, r0, lsl #6
   1a414:	muleq	r5, ip, r0
   1a418:	strheq	r7, [r5], -ip
   1a41c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a420:	sub	sp, sp, #132	; 0x84
   1a424:	mov	ip, #0
   1a428:	ldr	lr, [sp, #168]	; 0xa8
   1a42c:	cmp	r3, #9
   1a430:	mov	r5, r0
   1a434:	str	ip, [lr]
   1a438:	mov	r4, r2
   1a43c:	beq	1a4e8 <_start@@Base+0x545c>
   1a440:	mov	r6, r1
   1a444:	bls	1a48c <_start@@Base+0x5400>
   1a448:	cmp	r3, #11
   1a44c:	beq	1a530 <_start@@Base+0x54a4>
   1a450:	bcc	1a4e8 <_start@@Base+0x545c>
   1a454:	cmp	r3, #255	; 0xff
   1a458:	beq	1a530 <_start@@Base+0x54a4>
   1a45c:	ldr	r3, [r5, #8]
   1a460:	mov	r2, r4
   1a464:	tst	r3, #1
   1a468:	mov	r1, r6
   1a46c:	mov	r0, r5
   1a470:	bne	1acec <_start@@Base+0x5c60>
   1a474:	mov	r3, #15
   1a478:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1a47c:	mov	r1, r0
   1a480:	mov	r0, r1
   1a484:	add	sp, sp, #132	; 0x84
   1a488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a48c:	cmp	r3, #2
   1a490:	beq	1a8c8 <_start@@Base+0x583c>
   1a494:	cmp	r3, #8
   1a498:	beq	1a540 <_start@@Base+0x54b4>
   1a49c:	cmp	r3, ip
   1a4a0:	bne	1a45c <_start@@Base+0x53d0>
   1a4a4:	sub	r3, r2, r1
   1a4a8:	cmp	r3, #3
   1a4ac:	ble	1a4cc <_start@@Base+0x5440>
   1a4b0:	ldr	r1, [pc, #1144]	; 1a930 <_start@@Base+0x58a4>
   1a4b4:	mov	r2, #4
   1a4b8:	mov	r0, r6
   1a4bc:	bl	14558 <memcmp@plt>
   1a4c0:	cmp	r0, #0
   1a4c4:	addeq	r1, r6, #4
   1a4c8:	beq	1a480 <_start@@Base+0x53f4>
   1a4cc:	mov	r1, r6
   1a4d0:	mov	r2, r4
   1a4d4:	mov	r0, r5
   1a4d8:	mov	r3, #26
   1a4dc:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1a4e0:	mov	r1, r0
   1a4e4:	b	1a480 <_start@@Base+0x53f4>
   1a4e8:	mov	r3, lr
   1a4ec:	bl	18f20 <_start@@Base+0x3e94>
   1a4f0:	mov	r1, r0
   1a4f4:	ldr	r3, [r5, #20]
   1a4f8:	cmp	r3, #0
   1a4fc:	bne	1a480 <_start@@Base+0x53f4>
   1a500:	ldr	r3, [sp, #168]	; 0xa8
   1a504:	ldr	r3, [r3]
   1a508:	cmp	r3, #0
   1a50c:	bne	1a480 <_start@@Base+0x53f4>
   1a510:	mov	r2, r4
   1a514:	mov	r0, r5
   1a518:	mov	r3, #33	; 0x21
   1a51c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1a520:	mov	r1, r0
   1a524:	mov	r0, r1
   1a528:	add	sp, sp, #132	; 0x84
   1a52c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a530:	mov	r3, lr
   1a534:	bl	32270 <flatcc_json_parser_build_string@@Base>
   1a538:	mov	r1, r0
   1a53c:	b	1a4f4 <_start@@Base+0x5468>
   1a540:	mov	r2, #2
   1a544:	mov	r1, r2
   1a548:	ldr	r0, [r0]
   1a54c:	bl	26904 <flatcc_builder_start_struct@@Base>
   1a550:	mov	r1, r6
   1a554:	subs	r3, r0, #0
   1a558:	str	r3, [sp, #32]
   1a55c:	beq	1a818 <_start@@Base+0x578c>
   1a560:	add	r3, sp, #112	; 0x70
   1a564:	mov	r2, r4
   1a568:	mov	r0, r5
   1a56c:	bl	17c44 <_start@@Base+0x2bb8>
   1a570:	ldr	r3, [sp, #112]	; 0x70
   1a574:	cmp	r3, #0
   1a578:	mov	r1, r0
   1a57c:	beq	1abf8 <_start@@Base+0x5b6c>
   1a580:	mov	sl, #0
   1a584:	mov	fp, sl
   1a588:	b	1a5f4 <_start@@Base+0x5568>
   1a58c:	add	r7, r0, #8
   1a590:	mov	r0, r7
   1a594:	mov	r1, r4
   1a598:	bl	151b8 <_start@@Base+0x12c>
   1a59c:	add	r3, pc, #884	; 0x374
   1a5a0:	ldrd	r2, [r3]
   1a5a4:	mov	r0, #0
   1a5a8:	bic	r1, r1, #255	; 0xff
   1a5ac:	cmp	r1, r3
   1a5b0:	cmpeq	r0, r2
   1a5b4:	bne	1a5c4 <_start@@Base+0x5538>
   1a5b8:	sub	r3, r4, r7
   1a5bc:	cmp	r3, #3
   1a5c0:	bgt	1a830 <_start@@Base+0x57a4>
   1a5c4:	mov	r1, r7
   1a5c8:	mov	r2, r4
   1a5cc:	mov	r0, r5
   1a5d0:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1a5d4:	mov	r1, r0
   1a5d8:	add	r3, sp, #112	; 0x70
   1a5dc:	mov	r2, r4
   1a5e0:	mov	r0, r5
   1a5e4:	bl	19abc <_start@@Base+0x4a30>
   1a5e8:	ldr	r3, [sp, #112]	; 0x70
   1a5ec:	cmp	r3, #0
   1a5f0:	beq	1ac24 <_start@@Base+0x5b98>
   1a5f4:	cmp	r4, r0
   1a5f8:	beq	1a740 <_start@@Base+0x56b4>
   1a5fc:	ldrb	r3, [r0]
   1a600:	cmp	r3, #34	; 0x22
   1a604:	addeq	r0, r0, #1
   1a608:	beq	1a620 <_start@@Base+0x5594>
   1a60c:	mov	r1, r0
   1a610:	mov	r3, #5
   1a614:	mov	r2, r4
   1a618:	mov	r0, r5
   1a61c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1a620:	sub	r3, r4, r0
   1a624:	cmp	r3, #8
   1a628:	bls	1a758 <_start@@Base+0x56cc>
   1a62c:	ldrb	r6, [r0, #7]
   1a630:	mov	r7, #0
   1a634:	ldrb	r2, [r0, #6]
   1a638:	lsr	r1, r2, #24
   1a63c:	lsl	r3, r2, #8
   1a640:	str	r1, [sp, #84]	; 0x54
   1a644:	str	r3, [sp, #80]	; 0x50
   1a648:	ldrd	r2, [sp, #80]	; 0x50
   1a64c:	orr	r2, r2, r6
   1a650:	orr	r3, r3, r7
   1a654:	ldrb	r6, [r0, #5]
   1a658:	lsr	r1, r6, #16
   1a65c:	str	r1, [sp, #68]	; 0x44
   1a660:	lsl	r1, r6, #16
   1a664:	str	r1, [sp, #64]	; 0x40
   1a668:	ldrd	r6, [sp, #64]	; 0x40
   1a66c:	orr	r6, r6, r2
   1a670:	orr	r7, r7, r3
   1a674:	mov	r2, r6
   1a678:	mov	r3, r7
   1a67c:	ldrb	r6, [r0, #4]
   1a680:	lsr	r1, r6, #8
   1a684:	str	r1, [sp, #28]
   1a688:	lsl	r1, r6, #24
   1a68c:	str	r1, [sp, #24]
   1a690:	ldrd	r6, [sp, #24]
   1a694:	orr	r6, r6, r2
   1a698:	orr	r7, r7, r3
   1a69c:	mov	r2, r6
   1a6a0:	mov	r3, r7
   1a6a4:	ldrb	r1, [r0, #3]
   1a6a8:	str	r1, [sp, #44]	; 0x2c
   1a6ac:	mov	r1, #0
   1a6b0:	str	r1, [sp, #40]	; 0x28
   1a6b4:	ldrd	r6, [sp, #40]	; 0x28
   1a6b8:	orr	r6, r6, r2
   1a6bc:	orr	r7, r7, r3
   1a6c0:	mov	r2, r6
   1a6c4:	mov	r3, r7
   1a6c8:	ldrb	r6, [r0, #2]
   1a6cc:	lsl	r1, r6, #8
   1a6d0:	str	r1, [sp, #20]
   1a6d4:	mov	r1, #0
   1a6d8:	str	r1, [sp, #16]
   1a6dc:	ldrd	r6, [sp, #16]
   1a6e0:	orr	r6, r6, r2
   1a6e4:	orr	r7, r7, r3
   1a6e8:	mov	r2, r6
   1a6ec:	mov	r3, r7
   1a6f0:	ldrb	r6, [r0, #1]
   1a6f4:	lsl	r1, r6, #16
   1a6f8:	str	r1, [sp, #12]
   1a6fc:	mov	r1, #0
   1a700:	str	r1, [sp, #8]
   1a704:	ldrd	r6, [sp, #8]
   1a708:	orr	r6, r6, r2
   1a70c:	orr	r7, r7, r3
   1a710:	mov	r2, r6
   1a714:	mov	r3, r7
   1a718:	ldrb	r6, [r0]
   1a71c:	mov	r8, #0
   1a720:	orr	r2, r2, r8
   1a724:	lsl	r9, r6, #24
   1a728:	add	r7, pc, #496	; 0x1f0
   1a72c:	ldrd	r6, [r7]
   1a730:	orr	r3, r3, r9
   1a734:	cmp	r3, r7
   1a738:	cmpeq	r2, r6
   1a73c:	beq	1a58c <_start@@Base+0x5500>
   1a740:	mov	r1, r0
   1a744:	mov	r2, r4
   1a748:	mov	r0, r5
   1a74c:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1a750:	mov	r1, r0
   1a754:	b	1a5d8 <_start@@Base+0x554c>
   1a758:	sub	r3, r3, #1
   1a75c:	cmp	r3, #7
   1a760:	ldrls	pc, [pc, r3, lsl #2]
   1a764:	b	1a740 <_start@@Base+0x56b4>
   1a768:	ldrdeq	sl, [r1], -r0
   1a76c:	andeq	sl, r1, r4, asr #15
   1a770:			; <UNDEFINED> instruction: 0x0001a7b8
   1a774:	andeq	sl, r1, ip, lsr #15
   1a778:	andeq	sl, r1, r0, lsr #15
   1a77c:	muleq	r1, r4, r7
   1a780:	andeq	sl, r1, r8, lsl #15
   1a784:	andeq	sl, r1, ip, lsr #12
   1a788:	mov	r6, sl
   1a78c:	mov	r7, fp
   1a790:	b	1a634 <_start@@Base+0x55a8>
   1a794:	mov	r2, sl
   1a798:	mov	r3, fp
   1a79c:	b	1a654 <_start@@Base+0x55c8>
   1a7a0:	mov	r2, sl
   1a7a4:	mov	r3, fp
   1a7a8:	b	1a67c <_start@@Base+0x55f0>
   1a7ac:	mov	r2, sl
   1a7b0:	mov	r3, fp
   1a7b4:	b	1a6a4 <_start@@Base+0x5618>
   1a7b8:	mov	r2, sl
   1a7bc:	mov	r3, fp
   1a7c0:	b	1a6c8 <_start@@Base+0x563c>
   1a7c4:	mov	r2, sl
   1a7c8:	mov	r3, fp
   1a7cc:	b	1a6f0 <_start@@Base+0x5664>
   1a7d0:	mov	r2, sl
   1a7d4:	mov	r3, fp
   1a7d8:	b	1a718 <_start@@Base+0x568c>
   1a7dc:	mov	r8, r0
   1a7e0:	add	r3, sp, #112	; 0x70
   1a7e4:	str	r3, [sp]
   1a7e8:	mov	r2, r7
   1a7ec:	ldr	r3, [pc, #320]	; 1a934 <_start@@Base+0x58a8>
   1a7f0:	mov	r1, r8
   1a7f4:	mov	r0, r9
   1a7f8:	bl	18a2c <_start@@Base+0x39a0>
   1a7fc:	cmp	r7, r0
   1a800:	cmpne	r0, r8
   1a804:	mov	r6, r0
   1a808:	bne	1ada8 <_start@@Base+0x5d1c>
   1a80c:	mov	r5, r9
   1a810:	mov	r4, r7
   1a814:	mov	r1, r6
   1a818:	mov	r3, #33	; 0x21
   1a81c:	mov	r2, r4
   1a820:	mov	r0, r5
   1a824:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1a828:	mov	r1, r0
   1a82c:	b	1a4f4 <_start@@Base+0x5468>
   1a830:	mov	r3, #3
   1a834:	mov	r2, r4
   1a838:	mov	r1, r7
   1a83c:	mov	r0, r5
   1a840:	bl	18e7c <_start@@Base+0x3df0>
   1a844:	cmp	r7, r0
   1a848:	mov	r6, r0
   1a84c:	str	r0, [sp, #48]	; 0x30
   1a850:	beq	1a5c4 <_start@@Base+0x5538>
   1a854:	cmp	r4, r0
   1a858:	strh	r8, [sp, #108]	; 0x6c
   1a85c:	str	sl, [sp, #120]	; 0x78
   1a860:	str	fp, [sp, #124]	; 0x7c
   1a864:	str	r8, [sp, #116]	; 0x74
   1a868:	beq	1abb4 <_start@@Base+0x5b28>
   1a86c:	add	r3, sp, #120	; 0x78
   1a870:	mov	r1, r0
   1a874:	str	r3, [sp]
   1a878:	mov	r2, r4
   1a87c:	add	r3, sp, #116	; 0x74
   1a880:	mov	r0, r5
   1a884:	bl	31c94 <flatcc_json_parser_integer@@Base>
   1a888:	cmp	r6, r0
   1a88c:	mov	r1, r0
   1a890:	beq	1abb4 <_start@@Base+0x5b28>
   1a894:	ldr	r3, [sp, #116]	; 0x74
   1a898:	cmp	r3, r8
   1a89c:	bne	1ad60 <_start@@Base+0x5cd4>
   1a8a0:	ldrd	r2, [sp, #120]	; 0x78
   1a8a4:	ldr	r6, [pc, #140]	; 1a938 <_start@@Base+0x58ac>
   1a8a8:	mov	r7, #0
   1a8ac:	cmp	r3, r7
   1a8b0:	cmpeq	r2, r6
   1a8b4:	uxthls	r2, r2
   1a8b8:	bhi	1adb0 <_start@@Base+0x5d24>
   1a8bc:	ldr	r3, [sp, #32]
   1a8c0:	strh	r2, [r3]
   1a8c4:	b	1a5d8 <_start@@Base+0x554c>
   1a8c8:	mov	r1, #1
   1a8cc:	ldr	r0, [r0]
   1a8d0:	bl	27fa8 <flatcc_builder_start_table@@Base>
   1a8d4:	cmp	r0, #0
   1a8d8:	bne	1a814 <_start@@Base+0x5788>
   1a8dc:	mov	r1, r6
   1a8e0:	add	r3, sp, #108	; 0x6c
   1a8e4:	mov	r2, r4
   1a8e8:	mov	r0, r5
   1a8ec:	bl	17c44 <_start@@Base+0x2bb8>
   1a8f0:	ldr	r3, [sp, #108]	; 0x6c
   1a8f4:	cmp	r3, #0
   1a8f8:	mov	r6, r0
   1a8fc:	beq	1ad00 <_start@@Base+0x5c74>
   1a900:	add	r9, pc, #32
   1a904:	ldrd	r8, [r9]
   1a908:	mov	r7, r4
   1a90c:	strd	r8, [sp, #16]
   1a910:	mov	r9, r5
   1a914:	b	1aadc <_start@@Base+0x5a50>
   1a918:	andeq	r0, r0, r0
   1a91c:	ldrbvs	r6, [r4, -r0, lsl #16]!
   1a920:	svcpl	0x006c656e
   1a924:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   1a928:	ldrbvs	r6, [pc], #-372	; 1a930 <_start@@Base+0x58a4>
   1a92c:	cmnvc	r7, #456	; 0x1c8
   1a930:	andeq	r1, r4, r4, asr ip
   1a934:	andeq	r7, r5, ip, asr #1
   1a938:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1a93c:	ldrb	r2, [r6, #7]
   1a940:	mov	r3, #0
   1a944:	ldrb	r0, [r6, #6]
   1a948:	lsr	ip, r0, #24
   1a94c:	lsl	r1, r0, #8
   1a950:	str	ip, [sp, #92]	; 0x5c
   1a954:	str	r1, [sp, #88]	; 0x58
   1a958:	ldrd	r0, [sp, #88]	; 0x58
   1a95c:	orr	r0, r0, r2
   1a960:	orr	r1, r1, r3
   1a964:	mov	r2, r0
   1a968:	mov	r3, r1
   1a96c:	ldrb	r0, [r6, #5]
   1a970:	lsr	ip, r0, #16
   1a974:	lsl	r1, r0, #16
   1a978:	str	ip, [sp, #76]	; 0x4c
   1a97c:	str	r1, [sp, #72]	; 0x48
   1a980:	ldrd	r0, [sp, #72]	; 0x48
   1a984:	orr	r0, r0, r2
   1a988:	orr	r1, r1, r3
   1a98c:	mov	r2, r0
   1a990:	mov	r3, r1
   1a994:	ldrb	r0, [r6, #4]
   1a998:	lsr	ip, r0, #8
   1a99c:	lsl	r1, r0, #24
   1a9a0:	str	ip, [sp, #52]	; 0x34
   1a9a4:	str	r1, [sp, #48]	; 0x30
   1a9a8:	ldrd	r0, [sp, #48]	; 0x30
   1a9ac:	orr	r0, r0, r2
   1a9b0:	orr	r1, r1, r3
   1a9b4:	mov	r2, r0
   1a9b8:	mov	r3, r1
   1a9bc:	ldrb	r1, [r6, #3]
   1a9c0:	str	r1, [sp, #60]	; 0x3c
   1a9c4:	mov	r1, #0
   1a9c8:	str	r1, [sp, #56]	; 0x38
   1a9cc:	ldrd	r0, [sp, #56]	; 0x38
   1a9d0:	orr	r0, r0, r2
   1a9d4:	orr	r1, r1, r3
   1a9d8:	mov	r2, r0
   1a9dc:	mov	r3, r1
   1a9e0:	ldrb	r0, [r6, #2]
   1a9e4:	lsl	r1, r0, #8
   1a9e8:	str	r1, [sp, #36]	; 0x24
   1a9ec:	mov	r1, #0
   1a9f0:	str	r1, [sp, #32]
   1a9f4:	ldrd	r0, [sp, #32]
   1a9f8:	orr	r0, r0, r2
   1a9fc:	orr	r1, r1, r3
   1aa00:	mov	r2, r0
   1aa04:	mov	r3, r1
   1aa08:	ldrb	r0, [r6, #1]
   1aa0c:	mov	r4, #0
   1aa10:	orr	r2, r2, r4
   1aa14:	lsl	r5, r0, #16
   1aa18:	orr	r3, r3, r5
   1aa1c:	ldrb	r0, [r6]
   1aa20:	mov	sl, #0
   1aa24:	orr	r2, r2, sl
   1aa28:	lsl	fp, r0, #24
   1aa2c:	ldrd	r0, [sp, #16]
   1aa30:	orr	r3, r3, fp
   1aa34:	cmp	r3, r1
   1aa38:	cmpeq	r2, r0
   1aa3c:	bne	1aaa4 <_start@@Base+0x5a18>
   1aa40:	add	r3, r6, #8
   1aa44:	mov	r0, r3
   1aa48:	mov	r1, r7
   1aa4c:	str	r3, [sp, #8]
   1aa50:	bl	151b8 <_start@@Base+0x12c>
   1aa54:	add	r3, pc, #876	; 0x36c
   1aa58:	ldrd	r2, [r3]
   1aa5c:	cmp	r1, r3
   1aa60:	cmpeq	r0, r2
   1aa64:	ldr	r3, [sp, #8]
   1aa68:	bne	1ab9c <_start@@Base+0x5b10>
   1aa6c:	add	r6, r6, #16
   1aa70:	mov	r0, r6
   1aa74:	mov	r1, r7
   1aa78:	bl	151b8 <_start@@Base+0x12c>
   1aa7c:	add	r3, pc, #844	; 0x34c
   1aa80:	ldrd	r2, [r3]
   1aa84:	mov	r0, #0
   1aa88:	bic	r1, r1, #255	; 0xff
   1aa8c:	cmp	r1, r3
   1aa90:	cmpeq	r0, r2
   1aa94:	bne	1aaa4 <_start@@Base+0x5a18>
   1aa98:	sub	r3, r7, r6
   1aa9c:	cmp	r3, #3
   1aaa0:	bgt	1ac2c <_start@@Base+0x5ba0>
   1aaa4:	mov	r1, r6
   1aaa8:	mov	r2, r7
   1aaac:	mov	r0, r9
   1aab0:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1aab4:	mov	r6, r0
   1aab8:	mov	r1, r6
   1aabc:	add	r3, sp, #108	; 0x6c
   1aac0:	mov	r2, r7
   1aac4:	mov	r0, r9
   1aac8:	bl	19abc <_start@@Base+0x4a30>
   1aacc:	ldr	r3, [sp, #108]	; 0x6c
   1aad0:	cmp	r3, #0
   1aad4:	mov	r6, r0
   1aad8:	beq	1acf8 <_start@@Base+0x5c6c>
   1aadc:	cmp	r7, r6
   1aae0:	beq	1aaa4 <_start@@Base+0x5a18>
   1aae4:	ldrb	r3, [r6]
   1aae8:	cmp	r3, #34	; 0x22
   1aaec:	addeq	r6, r6, #1
   1aaf0:	beq	1ab0c <_start@@Base+0x5a80>
   1aaf4:	mov	r1, r6
   1aaf8:	mov	r3, #5
   1aafc:	mov	r2, r7
   1ab00:	mov	r0, r9
   1ab04:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1ab08:	mov	r6, r0
   1ab0c:	sub	r3, r7, r6
   1ab10:	cmp	r3, #8
   1ab14:	bhi	1a93c <_start@@Base+0x58b0>
   1ab18:	sub	r3, r3, #1
   1ab1c:	cmp	r3, #7
   1ab20:	ldrls	pc, [pc, r3, lsl #2]
   1ab24:	b	1aaa4 <_start@@Base+0x5a18>
   1ab28:	muleq	r1, r0, fp
   1ab2c:	andeq	sl, r1, r4, lsl #23
   1ab30:	andeq	sl, r1, r8, ror fp
   1ab34:	andeq	sl, r1, ip, ror #22
   1ab38:	andeq	sl, r1, r0, ror #22
   1ab3c:	andeq	sl, r1, r4, asr fp
   1ab40:	andeq	sl, r1, r8, asr #22
   1ab44:	andeq	sl, r1, ip, lsr r9
   1ab48:	mov	r2, #0
   1ab4c:	mov	r3, r2
   1ab50:	b	1a944 <_start@@Base+0x58b8>
   1ab54:	mov	r2, #0
   1ab58:	mov	r3, r2
   1ab5c:	b	1a96c <_start@@Base+0x58e0>
   1ab60:	mov	r2, #0
   1ab64:	mov	r3, r2
   1ab68:	b	1a994 <_start@@Base+0x5908>
   1ab6c:	mov	r2, #0
   1ab70:	mov	r3, r2
   1ab74:	b	1a9bc <_start@@Base+0x5930>
   1ab78:	mov	r2, #0
   1ab7c:	mov	r3, r2
   1ab80:	b	1a9e0 <_start@@Base+0x5954>
   1ab84:	mov	r2, #0
   1ab88:	mov	r3, r2
   1ab8c:	b	1aa08 <_start@@Base+0x597c>
   1ab90:	mov	r2, #0
   1ab94:	mov	r3, r2
   1ab98:	b	1aa1c <_start@@Base+0x5990>
   1ab9c:	mov	r1, r3
   1aba0:	mov	r2, r7
   1aba4:	mov	r0, r9
   1aba8:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1abac:	mov	r6, r0
   1abb0:	b	1aab8 <_start@@Base+0x5a2c>
   1abb4:	ldr	r6, [sp, #48]	; 0x30
   1abb8:	add	r3, sp, #108	; 0x6c
   1abbc:	str	r3, [sp]
   1abc0:	mov	r1, r6
   1abc4:	ldr	r3, [pc, #524]	; 1add8 <_start@@Base+0x5d4c>
   1abc8:	mov	r2, r4
   1abcc:	mov	r0, r5
   1abd0:	bl	186bc <_start@@Base+0x3630>
   1abd4:	cmp	r4, r0
   1abd8:	cmpne	r0, r6
   1abdc:	mov	r1, r0
   1abe0:	bne	1ad80 <_start@@Base+0x5cf4>
   1abe4:	mov	r3, #33	; 0x21
   1abe8:	mov	r2, r4
   1abec:	mov	r0, r5
   1abf0:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1abf4:	mov	r1, r0
   1abf8:	cmp	r4, r1
   1abfc:	beq	1a818 <_start@@Base+0x578c>
   1ac00:	ldr	r0, [r5]
   1ac04:	str	r1, [sp, #8]
   1ac08:	bl	26ac0 <flatcc_builder_end_struct@@Base>
   1ac0c:	ldr	r3, [sp, #168]	; 0xa8
   1ac10:	ldr	r1, [sp, #8]
   1ac14:	cmp	r0, #0
   1ac18:	str	r0, [r3]
   1ac1c:	beq	1a818 <_start@@Base+0x578c>
   1ac20:	b	1a480 <_start@@Base+0x53f4>
   1ac24:	mov	r1, r0
   1ac28:	b	1abf8 <_start@@Base+0x5b6c>
   1ac2c:	mov	r3, #3
   1ac30:	mov	r2, r7
   1ac34:	mov	r1, r6
   1ac38:	mov	r0, r9
   1ac3c:	bl	18e7c <_start@@Base+0x3df0>
   1ac40:	cmp	r6, r0
   1ac44:	mov	r8, r0
   1ac48:	beq	1aaa4 <_start@@Base+0x5a18>
   1ac4c:	cmp	r7, r0
   1ac50:	str	sl, [sp, #112]	; 0x70
   1ac54:	str	sl, [sp, #120]	; 0x78
   1ac58:	str	sl, [sp, #124]	; 0x7c
   1ac5c:	str	sl, [sp, #116]	; 0x74
   1ac60:	beq	1a7e0 <_start@@Base+0x5754>
   1ac64:	add	r3, sp, #120	; 0x78
   1ac68:	str	r3, [sp]
   1ac6c:	mov	r1, r0
   1ac70:	add	r3, sp, #116	; 0x74
   1ac74:	mov	r2, r7
   1ac78:	mov	r0, r9
   1ac7c:	bl	31c94 <flatcc_json_parser_integer@@Base>
   1ac80:	cmp	r8, r0
   1ac84:	mov	r6, r0
   1ac88:	beq	1a7dc <_start@@Base+0x5750>
   1ac8c:	ldr	r1, [sp, #116]	; 0x74
   1ac90:	ldrd	r2, [sp, #120]	; 0x78
   1ac94:	cmp	r1, sl
   1ac98:	beq	1ad2c <_start@@Base+0x5ca0>
   1ac9c:	cmp	r3, #0
   1aca0:	cmpeq	r2, #-2147483648	; 0x80000000
   1aca4:	rsbls	r2, r2, #0
   1aca8:	strls	r2, [sp, #112]	; 0x70
   1acac:	bhi	1ad88 <_start@@Base+0x5cfc>
   1acb0:	cmp	r2, #0
   1acb4:	bne	1acc4 <_start@@Base+0x5c38>
   1acb8:	ldr	r3, [r9, #8]
   1acbc:	tst	r3, #2
   1acc0:	beq	1aab8 <_start@@Base+0x5a2c>
   1acc4:	mov	r3, #4
   1acc8:	mov	r2, r3
   1accc:	mov	r1, #0
   1acd0:	ldr	r0, [r9]
   1acd4:	bl	2a114 <flatcc_builder_table_add@@Base>
   1acd8:	cmp	r0, #0
   1acdc:	beq	1a80c <_start@@Base+0x5780>
   1ace0:	ldr	r3, [sp, #112]	; 0x70
   1ace4:	str	r3, [r0]
   1ace8:	b	1aab8 <_start@@Base+0x5a2c>
   1acec:	bl	2f628 <flatcc_json_parser_generic_json@@Base>
   1acf0:	mov	r1, r0
   1acf4:	b	1a480 <_start@@Base+0x53f4>
   1acf8:	mov	r5, r9
   1acfc:	mov	r4, r7
   1ad00:	ldr	r3, [r5, #20]
   1ad04:	cmp	r3, #0
   1ad08:	bne	1a814 <_start@@Base+0x5788>
   1ad0c:	ldr	r0, [r5]
   1ad10:	bl	289e8 <flatcc_builder_end_table@@Base>
   1ad14:	ldr	r3, [sp, #168]	; 0xa8
   1ad18:	cmp	r0, #0
   1ad1c:	str	r0, [r3]
   1ad20:	beq	1a814 <_start@@Base+0x5788>
   1ad24:	mov	r1, r6
   1ad28:	b	1a4f4 <_start@@Base+0x5468>
   1ad2c:	mov	r1, #0
   1ad30:	cmp	r3, r1
   1ad34:	mvn	r0, #-2147483648	; 0x80000000
   1ad38:	cmpeq	r2, r0
   1ad3c:	strls	r2, [sp, #112]	; 0x70
   1ad40:	bls	1acb0 <_start@@Base+0x5c24>
   1ad44:	mov	r1, r6
   1ad48:	mov	r3, #7
   1ad4c:	mov	r2, r7
   1ad50:	mov	r0, r9
   1ad54:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1ad58:	mov	r6, r0
   1ad5c:	b	1ada0 <_start@@Base+0x5d14>
   1ad60:	mov	r3, #8
   1ad64:	mov	r2, r4
   1ad68:	mov	r0, r5
   1ad6c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1ad70:	mov	r1, r0
   1ad74:	ldr	r3, [sp, #48]	; 0x30
   1ad78:	cmp	r3, r1
   1ad7c:	beq	1abb4 <_start@@Base+0x5b28>
   1ad80:	ldrh	r2, [sp, #108]	; 0x6c
   1ad84:	b	1a8bc <_start@@Base+0x5830>
   1ad88:	mov	r1, r0
   1ad8c:	mov	r3, #8
   1ad90:	mov	r2, r7
   1ad94:	mov	r0, r9
   1ad98:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1ad9c:	mov	r6, r0
   1ada0:	cmp	r8, r6
   1ada4:	beq	1a7e0 <_start@@Base+0x5754>
   1ada8:	ldr	r2, [sp, #112]	; 0x70
   1adac:	b	1acb0 <_start@@Base+0x5c24>
   1adb0:	mov	r3, #7
   1adb4:	mov	r2, r4
   1adb8:	mov	r0, r5
   1adbc:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1adc0:	mov	r1, r0
   1adc4:	b	1ad74 <_start@@Base+0x5ce8>
   1adc8:	svcpl	0x0064616d
   1adcc:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   1add0:	andeq	r0, r0, r0
   1add4:	cmnvs	r7, r0, lsl #10
   1add8:	ldrdeq	r7, [r5], -r8
   1addc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ade0:	sub	sp, sp, #92	; 0x5c
   1ade4:	cmp	r1, r2
   1ade8:	mov	r5, r2
   1adec:	mov	r6, r0
   1adf0:	str	r3, [sp, #64]	; 0x40
   1adf4:	beq	1ae04 <_start@@Base+0x5d78>
   1adf8:	ldrb	r3, [r1]
   1adfc:	cmp	r3, #123	; 0x7b
   1ae00:	beq	1ae24 <_start@@Base+0x5d98>
   1ae04:	mov	r2, r5
   1ae08:	mov	r0, r6
   1ae0c:	mov	r3, #21
   1ae10:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1ae14:	mov	r5, r0
   1ae18:	mov	r0, r5
   1ae1c:	add	sp, sp, #92	; 0x5c
   1ae20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae24:	add	r4, r1, #1
   1ae28:	sub	r3, r2, r4
   1ae2c:	cmp	r3, #1
   1ae30:	ble	1ae44 <_start@@Base+0x5db8>
   1ae34:	ldrb	r3, [r1, #1]
   1ae38:	cmp	r3, #32
   1ae3c:	bhi	1ae58 <_start@@Base+0x5dcc>
   1ae40:	beq	1b51c <_start@@Base+0x6490>
   1ae44:	mov	r1, r4
   1ae48:	mov	r2, r5
   1ae4c:	mov	r0, r6
   1ae50:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   1ae54:	mov	r4, r0
   1ae58:	cmp	r5, r4
   1ae5c:	beq	1ae6c <_start@@Base+0x5de0>
   1ae60:	ldrb	r3, [r4]
   1ae64:	cmp	r3, #125	; 0x7d
   1ae68:	beq	1b530 <_start@@Base+0x64a4>
   1ae6c:	mov	r7, #0
   1ae70:	strd	r8, [sp, #32]
   1ae74:	cmp	r5, r4
   1ae78:	beq	1af98 <_start@@Base+0x5f0c>
   1ae7c:	ldrb	r3, [r4]
   1ae80:	cmp	r3, #34	; 0x22
   1ae84:	bne	1b014 <_start@@Base+0x5f88>
   1ae88:	add	r4, r4, #1
   1ae8c:	sub	ip, r5, r4
   1ae90:	cmp	ip, #8
   1ae94:	bls	1b038 <_start@@Base+0x5fac>
   1ae98:	mov	r9, #0
   1ae9c:	ldrb	r2, [r4, #6]
   1aea0:	lsr	r1, r2, #24
   1aea4:	lsl	r3, r2, #8
   1aea8:	str	r1, [sp, #60]	; 0x3c
   1aeac:	str	r3, [sp, #56]	; 0x38
   1aeb0:	ldrd	r2, [sp, #56]	; 0x38
   1aeb4:	orr	r3, r3, r9
   1aeb8:	mov	r9, r3
   1aebc:	ldrb	r2, [r4, #5]
   1aec0:	lsr	r1, r2, #16
   1aec4:	lsl	r3, r2, #16
   1aec8:	str	r1, [sp, #52]	; 0x34
   1aecc:	str	r3, [sp, #48]	; 0x30
   1aed0:	ldrd	r2, [sp, #48]	; 0x30
   1aed4:	orr	r3, r3, r9
   1aed8:	mov	r9, r3
   1aedc:	ldrb	r2, [r4, #4]
   1aee0:	lsr	r1, r2, #8
   1aee4:	lsl	r3, r2, #24
   1aee8:	str	r1, [sp, #28]
   1aeec:	str	r3, [sp, #24]
   1aef0:	ldrd	r2, [sp, #24]
   1aef4:	orr	r3, r3, r9
   1aef8:	mov	r9, r3
   1aefc:	ldrb	r3, [r4, #3]
   1af00:	str	r3, [sp, #44]	; 0x2c
   1af04:	mov	r3, #0
   1af08:	str	r3, [sp, #40]	; 0x28
   1af0c:	ldrd	r2, [sp, #40]	; 0x28
   1af10:	orr	r3, r3, r9
   1af14:	mov	r9, r3
   1af18:	ldrb	r2, [r4, #2]
   1af1c:	lsl	r3, r2, #8
   1af20:	str	r3, [sp, #20]
   1af24:	mov	r3, #0
   1af28:	str	r3, [sp, #16]
   1af2c:	ldrd	r2, [sp, #16]
   1af30:	orr	r3, r3, r9
   1af34:	mov	r9, r3
   1af38:	ldrb	r2, [r4]
   1af3c:	ldrb	r0, [r4, #1]
   1af40:	mov	sl, #0
   1af44:	str	sl, [sp, #8]
   1af48:	lsl	r3, r2, #24
   1af4c:	str	r3, [sp, #12]
   1af50:	ldrd	r2, [sp, #8]
   1af54:	lsl	fp, r0, #16
   1af58:	orr	r9, r9, fp
   1af5c:	orr	r3, r3, r9
   1af60:	and	r3, r3, #-16777216	; 0xff000000
   1af64:	mov	r2, #0
   1af68:	cmp	r3, #1644167168	; 0x62000000
   1af6c:	cmpeq	r2, #0
   1af70:	strd	r2, [sp, #32]
   1af74:	beq	1b0d8 <_start@@Base+0x604c>
   1af78:	cmp	r3, #1627389952	; 0x61000000
   1af7c:	cmpeq	r2, #0
   1af80:	bne	1af98 <_start@@Base+0x5f0c>
   1af84:	cmp	ip, #1
   1af88:	ble	1af98 <_start@@Base+0x5f0c>
   1af8c:	ldrb	r3, [r4, #1]
   1af90:	cmp	r3, #34	; 0x22
   1af94:	beq	1b2bc <_start@@Base+0x6230>
   1af98:	mov	r1, r4
   1af9c:	mov	r2, r5
   1afa0:	mov	r0, r6
   1afa4:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1afa8:	sub	r3, r5, r0
   1afac:	cmp	r3, #1
   1afb0:	ble	1afc4 <_start@@Base+0x5f38>
   1afb4:	ldrb	r3, [r0]
   1afb8:	cmp	r3, #32
   1afbc:	bhi	1afd4 <_start@@Base+0x5f48>
   1afc0:	beq	1b1f0 <_start@@Base+0x6164>
   1afc4:	mov	r1, r0
   1afc8:	mov	r2, r5
   1afcc:	mov	r0, r6
   1afd0:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   1afd4:	cmp	r5, r0
   1afd8:	beq	1ae18 <_start@@Base+0x5d8c>
   1afdc:	ldrb	r3, [r0]
   1afe0:	cmp	r3, #44	; 0x2c
   1afe4:	beq	1b204 <_start@@Base+0x6178>
   1afe8:	cmp	r3, #125	; 0x7d
   1afec:	beq	1b1bc <_start@@Base+0x6130>
   1aff0:	mov	r2, r5
   1aff4:	mov	r1, r0
   1aff8:	mov	r3, #10
   1affc:	mov	r0, r6
   1b000:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1b004:	mov	r5, r0
   1b008:	mov	r0, r5
   1b00c:	add	sp, sp, #92	; 0x5c
   1b010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b014:	mov	r1, r4
   1b018:	mov	r3, #5
   1b01c:	mov	r2, r5
   1b020:	mov	r0, r6
   1b024:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1b028:	sub	ip, r5, r0
   1b02c:	cmp	ip, #8
   1b030:	mov	r4, r0
   1b034:	bhi	1ae98 <_start@@Base+0x5e0c>
   1b038:	sub	r3, ip, #1
   1b03c:	cmp	r3, #7
   1b040:	ldrls	pc, [pc, r3, lsl #2]
   1b044:	b	1af98 <_start@@Base+0x5f0c>
   1b048:	andeq	fp, r1, r8, rrx
   1b04c:	andeq	fp, r1, ip, asr #1
   1b050:	andeq	fp, r1, r0, asr #1
   1b054:	strheq	fp, [r1], -r4
   1b058:	andeq	fp, r1, r8, lsr #1
   1b05c:	muleq	r1, ip, r0
   1b060:	muleq	r1, r0, r0
   1b064:	muleq	r1, r8, lr
   1b068:	ldrb	r2, [r4]
   1b06c:	lsl	r3, r2, #24
   1b070:	str	r3, [sp, #36]	; 0x24
   1b074:	mov	r3, #0
   1b078:	str	r3, [sp, #32]
   1b07c:	ldrd	r2, [sp, #32]
   1b080:	cmp	r3, #1644167168	; 0x62000000
   1b084:	cmpeq	r2, #0
   1b088:	bne	1af78 <_start@@Base+0x5eec>
   1b08c:	b	1af98 <_start@@Base+0x5f0c>
   1b090:	mov	r8, #0
   1b094:	mov	r9, r8
   1b098:	b	1ae9c <_start@@Base+0x5e10>
   1b09c:	mov	r8, #0
   1b0a0:	mov	r9, r8
   1b0a4:	b	1aebc <_start@@Base+0x5e30>
   1b0a8:	mov	r8, #0
   1b0ac:	mov	r9, r8
   1b0b0:	b	1aedc <_start@@Base+0x5e50>
   1b0b4:	mov	r8, #0
   1b0b8:	mov	r9, r8
   1b0bc:	b	1aefc <_start@@Base+0x5e70>
   1b0c0:	mov	r8, #0
   1b0c4:	mov	r9, r8
   1b0c8:	b	1af18 <_start@@Base+0x5e8c>
   1b0cc:	mov	r8, #0
   1b0d0:	mov	r9, r8
   1b0d4:	b	1af38 <_start@@Base+0x5eac>
   1b0d8:	cmp	ip, #1
   1b0dc:	ble	1af98 <_start@@Base+0x5f0c>
   1b0e0:	ldrb	r3, [r4, #1]
   1b0e4:	cmp	r3, #34	; 0x22
   1b0e8:	bne	1af98 <_start@@Base+0x5f0c>
   1b0ec:	add	r1, r4, #2
   1b0f0:	sub	r3, r5, r1
   1b0f4:	cmp	r3, #1
   1b0f8:	ble	1b10c <_start@@Base+0x6080>
   1b0fc:	ldrb	r3, [r4, #2]
   1b100:	cmp	r3, #32
   1b104:	bhi	1b11c <_start@@Base+0x6090>
   1b108:	beq	1b4d4 <_start@@Base+0x6448>
   1b10c:	mov	r2, r5
   1b110:	mov	r0, r6
   1b114:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   1b118:	mov	r1, r0
   1b11c:	cmp	r5, r1
   1b120:	beq	1b130 <_start@@Base+0x60a4>
   1b124:	ldrb	r3, [r1]
   1b128:	cmp	r3, #58	; 0x3a
   1b12c:	beq	1b504 <_start@@Base+0x6478>
   1b130:	mov	r3, #4
   1b134:	mov	r2, r5
   1b138:	mov	r0, r6
   1b13c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1b140:	mov	r8, r0
   1b144:	cmp	r4, r8
   1b148:	beq	1af98 <_start@@Base+0x5f0c>
   1b14c:	mov	r3, #0
   1b150:	cmp	r5, r8
   1b154:	strb	r7, [sp, #74]	; 0x4a
   1b158:	str	r3, [sp, #80]	; 0x50
   1b15c:	str	r3, [sp, #84]	; 0x54
   1b160:	str	r7, [sp, #76]	; 0x4c
   1b164:	beq	1b494 <_start@@Base+0x6408>
   1b168:	add	r3, sp, #80	; 0x50
   1b16c:	str	r3, [sp]
   1b170:	mov	r2, r5
   1b174:	add	r3, sp, #76	; 0x4c
   1b178:	mov	r1, r8
   1b17c:	mov	r0, r6
   1b180:	bl	31c94 <flatcc_json_parser_integer@@Base>
   1b184:	cmp	r8, r0
   1b188:	beq	1b494 <_start@@Base+0x6408>
   1b18c:	ldr	r1, [sp, #76]	; 0x4c
   1b190:	ldrd	r2, [sp, #80]	; 0x50
   1b194:	cmp	r1, #0
   1b198:	beq	1b288 <_start@@Base+0x61fc>
   1b19c:	cmp	r3, #0
   1b1a0:	cmpeq	r2, #128	; 0x80
   1b1a4:	rsbls	r2, r2, #0
   1b1a8:	sxtbls	r2, r2
   1b1ac:	bhi	1b400 <_start@@Base+0x6374>
   1b1b0:	ldr	r3, [sp, #64]	; 0x40
   1b1b4:	strb	r2, [r3, #2]
   1b1b8:	b	1afa8 <_start@@Base+0x5f1c>
   1b1bc:	add	r1, r0, #1
   1b1c0:	sub	r3, r5, r1
   1b1c4:	cmp	r3, #1
   1b1c8:	ble	1b1dc <_start@@Base+0x6150>
   1b1cc:	ldrb	r3, [r0, #1]
   1b1d0:	cmp	r3, #32
   1b1d4:	bhi	1b280 <_start@@Base+0x61f4>
   1b1d8:	beq	1b3d4 <_start@@Base+0x6348>
   1b1dc:	mov	r2, r5
   1b1e0:	mov	r0, r6
   1b1e4:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   1b1e8:	mov	r5, r0
   1b1ec:	b	1ae18 <_start@@Base+0x5d8c>
   1b1f0:	ldrb	r3, [r0, #1]
   1b1f4:	cmp	r3, #32
   1b1f8:	addhi	r0, r0, #1
   1b1fc:	bls	1afc4 <_start@@Base+0x5f38>
   1b200:	b	1afd4 <_start@@Base+0x5f48>
   1b204:	add	r4, r0, #1
   1b208:	sub	r3, r5, r4
   1b20c:	cmp	r3, #1
   1b210:	ble	1b224 <_start@@Base+0x6198>
   1b214:	ldrb	r3, [r0, #1]
   1b218:	cmp	r3, #32
   1b21c:	bhi	1b238 <_start@@Base+0x61ac>
   1b220:	beq	1b460 <_start@@Base+0x63d4>
   1b224:	mov	r1, r4
   1b228:	mov	r2, r5
   1b22c:	mov	r0, r6
   1b230:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   1b234:	mov	r4, r0
   1b238:	cmp	r5, r4
   1b23c:	beq	1b478 <_start@@Base+0x63ec>
   1b240:	ldrb	r3, [r4]
   1b244:	cmp	r3, #125	; 0x7d
   1b248:	bne	1ae74 <_start@@Base+0x5de8>
   1b24c:	add	r1, r4, #1
   1b250:	sub	r3, r5, r1
   1b254:	cmp	r3, #1
   1b258:	ble	1b1dc <_start@@Base+0x6150>
   1b25c:	ldrb	r3, [r4, #1]
   1b260:	cmp	r3, #32
   1b264:	bhi	1b280 <_start@@Base+0x61f4>
   1b268:	bne	1b1dc <_start@@Base+0x6150>
   1b26c:	ldrb	r3, [r4, #2]
   1b270:	cmp	r3, #32
   1b274:	addhi	r5, r4, #2
   1b278:	bls	1b1dc <_start@@Base+0x6150>
   1b27c:	b	1ae18 <_start@@Base+0x5d8c>
   1b280:	mov	r5, r1
   1b284:	b	1ae18 <_start@@Base+0x5d8c>
   1b288:	cmp	r3, #0
   1b28c:	cmpeq	r2, #127	; 0x7f
   1b290:	sxtbls	r2, r2
   1b294:	bls	1b1b0 <_start@@Base+0x6124>
   1b298:	mov	r1, r0
   1b29c:	mov	r3, #7
   1b2a0:	mov	r2, r5
   1b2a4:	mov	r0, r6
   1b2a8:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1b2ac:	cmp	r8, r0
   1b2b0:	beq	1b494 <_start@@Base+0x6408>
   1b2b4:	ldrsb	r2, [sp, #74]	; 0x4a
   1b2b8:	b	1b1b0 <_start@@Base+0x6124>
   1b2bc:	add	r1, r4, #2
   1b2c0:	sub	r3, r5, r1
   1b2c4:	cmp	r3, #1
   1b2c8:	ble	1b2dc <_start@@Base+0x6250>
   1b2cc:	ldrb	r3, [r4, #2]
   1b2d0:	cmp	r3, #32
   1b2d4:	bhi	1b2ec <_start@@Base+0x6260>
   1b2d8:	beq	1b4c0 <_start@@Base+0x6434>
   1b2dc:	mov	r2, r5
   1b2e0:	mov	r0, r6
   1b2e4:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   1b2e8:	mov	r1, r0
   1b2ec:	cmp	r5, r1
   1b2f0:	beq	1b300 <_start@@Base+0x6274>
   1b2f4:	ldrb	r3, [r1]
   1b2f8:	cmp	r3, #58	; 0x3a
   1b2fc:	beq	1b4e8 <_start@@Base+0x645c>
   1b300:	mov	r3, #4
   1b304:	mov	r2, r5
   1b308:	mov	r0, r6
   1b30c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1b310:	mov	r3, r0
   1b314:	str	r0, [sp, #68]	; 0x44
   1b318:	cmp	r4, r3
   1b31c:	beq	1af98 <_start@@Base+0x5f0c>
   1b320:	mov	r4, r3
   1b324:	cmp	r5, r3
   1b328:	mov	r3, #0
   1b32c:	strh	r7, [sp, #74]	; 0x4a
   1b330:	str	r3, [sp, #80]	; 0x50
   1b334:	str	r3, [sp, #84]	; 0x54
   1b338:	str	r7, [sp, #76]	; 0x4c
   1b33c:	beq	1b418 <_start@@Base+0x638c>
   1b340:	add	r3, sp, #80	; 0x50
   1b344:	str	r3, [sp]
   1b348:	mov	r2, r5
   1b34c:	add	r3, sp, #76	; 0x4c
   1b350:	mov	r1, r4
   1b354:	mov	r0, r6
   1b358:	bl	31c94 <flatcc_json_parser_integer@@Base>
   1b35c:	cmp	r4, r0
   1b360:	beq	1b418 <_start@@Base+0x638c>
   1b364:	ldr	r1, [sp, #76]	; 0x4c
   1b368:	ldrd	r2, [sp, #80]	; 0x50
   1b36c:	cmp	r1, #0
   1b370:	beq	1b394 <_start@@Base+0x6308>
   1b374:	cmp	r3, #0
   1b378:	cmpeq	r2, #32768	; 0x8000
   1b37c:	rsbls	r2, r2, #0
   1b380:	sxthls	r2, r2
   1b384:	bhi	1b3e8 <_start@@Base+0x635c>
   1b388:	ldr	r3, [sp, #64]	; 0x40
   1b38c:	strh	r2, [r3]
   1b390:	b	1afa8 <_start@@Base+0x5f1c>
   1b394:	ldr	r8, [pc, #428]	; 1b548 <_start@@Base+0x64bc>
   1b398:	mov	r9, #0
   1b39c:	cmp	r3, r9
   1b3a0:	cmpeq	r2, r8
   1b3a4:	sxthls	r2, r2
   1b3a8:	bls	1b388 <_start@@Base+0x62fc>
   1b3ac:	mov	r1, r0
   1b3b0:	mov	r3, #7
   1b3b4:	mov	r2, r5
   1b3b8:	mov	r0, r6
   1b3bc:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1b3c0:	ldr	r3, [sp, #68]	; 0x44
   1b3c4:	cmp	r3, r0
   1b3c8:	beq	1b418 <_start@@Base+0x638c>
   1b3cc:	ldrsh	r2, [sp, #74]	; 0x4a
   1b3d0:	b	1b388 <_start@@Base+0x62fc>
   1b3d4:	ldrb	r3, [r0, #2]
   1b3d8:	cmp	r3, #32
   1b3dc:	addhi	r5, r0, #2
   1b3e0:	bls	1b1dc <_start@@Base+0x6150>
   1b3e4:	b	1ae18 <_start@@Base+0x5d8c>
   1b3e8:	mov	r1, r0
   1b3ec:	mov	r3, #8
   1b3f0:	mov	r2, r5
   1b3f4:	mov	r0, r6
   1b3f8:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1b3fc:	b	1b3c0 <_start@@Base+0x6334>
   1b400:	mov	r1, r0
   1b404:	mov	r3, #8
   1b408:	mov	r2, r5
   1b40c:	mov	r0, r6
   1b410:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1b414:	b	1b2ac <_start@@Base+0x6220>
   1b418:	ldr	r4, [sp, #68]	; 0x44
   1b41c:	add	r3, sp, #74	; 0x4a
   1b420:	str	r3, [sp]
   1b424:	mov	r2, r5
   1b428:	ldr	r3, [pc, #284]	; 1b54c <_start@@Base+0x64c0>
   1b42c:	mov	r1, r4
   1b430:	mov	r0, r6
   1b434:	bl	18184 <_start@@Base+0x30f8>
   1b438:	cmp	r5, r0
   1b43c:	cmpne	r0, r4
   1b440:	bne	1b3cc <_start@@Base+0x6340>
   1b444:	mov	r2, r5
   1b448:	mov	r1, r0
   1b44c:	mov	r3, #33	; 0x21
   1b450:	mov	r0, r6
   1b454:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1b458:	mov	r5, r0
   1b45c:	b	1ae18 <_start@@Base+0x5d8c>
   1b460:	ldrb	r3, [r0, #2]
   1b464:	cmp	r3, #32
   1b468:	addhi	r4, r0, #2
   1b46c:	bls	1b224 <_start@@Base+0x6198>
   1b470:	cmp	r5, r4
   1b474:	bne	1b240 <_start@@Base+0x61b4>
   1b478:	mov	r2, r5
   1b47c:	mov	r1, r5
   1b480:	mov	r0, r6
   1b484:	mov	r3, #10
   1b488:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1b48c:	mov	r5, r0
   1b490:	b	1ae18 <_start@@Base+0x5d8c>
   1b494:	add	r3, sp, #74	; 0x4a
   1b498:	str	r3, [sp]
   1b49c:	mov	r2, r5
   1b4a0:	ldr	r3, [pc, #168]	; 1b550 <_start@@Base+0x64c4>
   1b4a4:	mov	r1, r8
   1b4a8:	mov	r0, r6
   1b4ac:	bl	18500 <_start@@Base+0x3474>
   1b4b0:	cmp	r5, r0
   1b4b4:	cmpne	r0, r8
   1b4b8:	bne	1b2b4 <_start@@Base+0x6228>
   1b4bc:	b	1b444 <_start@@Base+0x63b8>
   1b4c0:	ldrb	r3, [r4, #3]
   1b4c4:	cmp	r3, #32
   1b4c8:	addhi	r1, r4, #3
   1b4cc:	bls	1b2dc <_start@@Base+0x6250>
   1b4d0:	b	1b2ec <_start@@Base+0x6260>
   1b4d4:	ldrb	r3, [r4, #3]
   1b4d8:	cmp	r3, #32
   1b4dc:	addhi	r1, r4, #3
   1b4e0:	bls	1b10c <_start@@Base+0x6080>
   1b4e4:	b	1b11c <_start@@Base+0x6090>
   1b4e8:	add	r1, r1, #1
   1b4ec:	mov	r2, r5
   1b4f0:	mov	r0, r6
   1b4f4:	bl	167a8 <_start@@Base+0x171c>
   1b4f8:	str	r0, [sp, #68]	; 0x44
   1b4fc:	mov	r3, r0
   1b500:	b	1b318 <_start@@Base+0x628c>
   1b504:	add	r1, r1, #1
   1b508:	mov	r2, r5
   1b50c:	mov	r0, r6
   1b510:	bl	167a8 <_start@@Base+0x171c>
   1b514:	mov	r8, r0
   1b518:	b	1b144 <_start@@Base+0x60b8>
   1b51c:	ldrb	r3, [r1, #2]
   1b520:	cmp	r3, #32
   1b524:	addhi	r4, r1, #2
   1b528:	bls	1ae44 <_start@@Base+0x5db8>
   1b52c:	b	1ae58 <_start@@Base+0x5dcc>
   1b530:	mov	r2, r5
   1b534:	add	r1, r4, #1
   1b538:	mov	r0, r6
   1b53c:	bl	167a8 <_start@@Base+0x171c>
   1b540:	mov	r5, r0
   1b544:	b	1ae18 <_start@@Base+0x5d8c>
   1b548:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1b54c:	strdeq	r7, [r5], -r0
   1b550:	andeq	r7, r5, r4, ror #1
   1b554:	push	{r4, r5, r6, r7, r8, lr}
   1b558:	mov	r7, r3
   1b55c:	mov	r3, #0
   1b560:	mov	r5, r0
   1b564:	mov	r6, r1
   1b568:	str	r3, [r7]
   1b56c:	mov	r1, r3
   1b570:	ldr	r0, [r0]
   1b574:	mov	r4, r2
   1b578:	bl	27fa8 <flatcc_builder_start_table@@Base>
   1b57c:	cmp	r0, #0
   1b580:	bne	1b5bc <_start@@Base+0x6530>
   1b584:	cmp	r6, r4
   1b588:	beq	1b598 <_start@@Base+0x650c>
   1b58c:	ldrb	r3, [r6]
   1b590:	cmp	r3, #123	; 0x7b
   1b594:	beq	1b5f0 <_start@@Base+0x6564>
   1b598:	mov	r1, r6
   1b59c:	mov	r3, #21
   1b5a0:	mov	r2, r4
   1b5a4:	mov	r0, r5
   1b5a8:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1b5ac:	mov	r6, r0
   1b5b0:	ldr	r3, [r5, #20]
   1b5b4:	cmp	r3, #0
   1b5b8:	beq	1b5d4 <_start@@Base+0x6548>
   1b5bc:	mov	r2, r4
   1b5c0:	mov	r1, r6
   1b5c4:	mov	r0, r5
   1b5c8:	mov	r3, #33	; 0x21
   1b5cc:	pop	{r4, r5, r6, r7, r8, lr}
   1b5d0:	b	2e8b4 <flatcc_json_parser_set_error@@Base>
   1b5d4:	ldr	r0, [r5]
   1b5d8:	bl	289e8 <flatcc_builder_end_table@@Base>
   1b5dc:	cmp	r0, #0
   1b5e0:	str	r0, [r7]
   1b5e4:	beq	1b5bc <_start@@Base+0x6530>
   1b5e8:	mov	r0, r6
   1b5ec:	pop	{r4, r5, r6, r7, r8, pc}
   1b5f0:	add	r1, r6, #1
   1b5f4:	sub	r3, r4, r1
   1b5f8:	cmp	r3, #1
   1b5fc:	ble	1b610 <_start@@Base+0x6584>
   1b600:	ldrb	r3, [r6, #1]
   1b604:	cmp	r3, #32
   1b608:	bhi	1b620 <_start@@Base+0x6594>
   1b60c:	beq	1b7b0 <_start@@Base+0x6724>
   1b610:	mov	r2, r4
   1b614:	mov	r0, r5
   1b618:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   1b61c:	mov	r1, r0
   1b620:	cmp	r4, r1
   1b624:	beq	1b634 <_start@@Base+0x65a8>
   1b628:	ldrb	r3, [r1]
   1b62c:	cmp	r3, #125	; 0x7d
   1b630:	beq	1b770 <_start@@Base+0x66e4>
   1b634:	mov	r6, #5
   1b638:	cmp	r4, r1
   1b63c:	beq	1b664 <_start@@Base+0x65d8>
   1b640:	ldrb	r3, [r1]
   1b644:	cmp	r3, #34	; 0x22
   1b648:	addeq	r1, r1, #1
   1b64c:	beq	1b664 <_start@@Base+0x65d8>
   1b650:	mov	r3, r6
   1b654:	mov	r2, r4
   1b658:	mov	r0, r5
   1b65c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1b660:	mov	r1, r0
   1b664:	mov	r2, r4
   1b668:	mov	r0, r5
   1b66c:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1b670:	sub	r3, r4, r0
   1b674:	cmp	r3, #1
   1b678:	ble	1b68c <_start@@Base+0x6600>
   1b67c:	ldrb	r3, [r0]
   1b680:	cmp	r3, #32
   1b684:	bhi	1b69c <_start@@Base+0x6610>
   1b688:	beq	1b70c <_start@@Base+0x6680>
   1b68c:	mov	r1, r0
   1b690:	mov	r2, r4
   1b694:	mov	r0, r5
   1b698:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   1b69c:	cmp	r4, r0
   1b6a0:	beq	1b724 <_start@@Base+0x6698>
   1b6a4:	ldrb	r3, [r0]
   1b6a8:	cmp	r3, #44	; 0x2c
   1b6ac:	beq	1b72c <_start@@Base+0x66a0>
   1b6b0:	cmp	r3, #125	; 0x7d
   1b6b4:	beq	1b6d4 <_start@@Base+0x6648>
   1b6b8:	mov	r1, r0
   1b6bc:	mov	r3, #10
   1b6c0:	mov	r2, r4
   1b6c4:	mov	r0, r5
   1b6c8:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1b6cc:	mov	r6, r0
   1b6d0:	b	1b5b0 <_start@@Base+0x6524>
   1b6d4:	add	r6, r0, #1
   1b6d8:	sub	r3, r4, r6
   1b6dc:	cmp	r3, #1
   1b6e0:	ble	1b6f4 <_start@@Base+0x6668>
   1b6e4:	ldrb	r3, [r0, #1]
   1b6e8:	cmp	r3, #32
   1b6ec:	bhi	1b5b0 <_start@@Base+0x6524>
   1b6f0:	beq	1b788 <_start@@Base+0x66fc>
   1b6f4:	mov	r1, r6
   1b6f8:	mov	r2, r4
   1b6fc:	mov	r0, r5
   1b700:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   1b704:	mov	r6, r0
   1b708:	b	1b5b0 <_start@@Base+0x6524>
   1b70c:	ldrb	r3, [r0, #1]
   1b710:	cmp	r3, #32
   1b714:	addhi	r0, r0, #1
   1b718:	bls	1b68c <_start@@Base+0x6600>
   1b71c:	cmp	r4, r0
   1b720:	bne	1b6a4 <_start@@Base+0x6618>
   1b724:	mov	r6, r4
   1b728:	b	1b5b0 <_start@@Base+0x6524>
   1b72c:	add	r1, r0, #1
   1b730:	sub	r3, r4, r1
   1b734:	cmp	r3, #1
   1b738:	ble	1b74c <_start@@Base+0x66c0>
   1b73c:	ldrb	r3, [r0, #1]
   1b740:	cmp	r3, #32
   1b744:	bhi	1b75c <_start@@Base+0x66d0>
   1b748:	beq	1b79c <_start@@Base+0x6710>
   1b74c:	mov	r2, r4
   1b750:	mov	r0, r5
   1b754:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   1b758:	mov	r1, r0
   1b75c:	cmp	r4, r1
   1b760:	beq	1b7c4 <_start@@Base+0x6738>
   1b764:	ldrb	r3, [r1]
   1b768:	cmp	r3, #125	; 0x7d
   1b76c:	bne	1b638 <_start@@Base+0x65ac>
   1b770:	add	r1, r1, #1
   1b774:	mov	r2, r4
   1b778:	mov	r0, r5
   1b77c:	bl	167a8 <_start@@Base+0x171c>
   1b780:	mov	r6, r0
   1b784:	b	1b5b0 <_start@@Base+0x6524>
   1b788:	ldrb	r3, [r0, #2]
   1b78c:	cmp	r3, #32
   1b790:	addhi	r6, r0, #2
   1b794:	bls	1b6f4 <_start@@Base+0x6668>
   1b798:	b	1b5b0 <_start@@Base+0x6524>
   1b79c:	ldrb	r3, [r0, #2]
   1b7a0:	cmp	r3, #32
   1b7a4:	addhi	r1, r0, #2
   1b7a8:	bls	1b74c <_start@@Base+0x66c0>
   1b7ac:	b	1b75c <_start@@Base+0x66d0>
   1b7b0:	ldrb	r3, [r6, #2]
   1b7b4:	cmp	r3, #32
   1b7b8:	addhi	r1, r6, #2
   1b7bc:	bls	1b610 <_start@@Base+0x6584>
   1b7c0:	b	1b620 <_start@@Base+0x6594>
   1b7c4:	mov	r3, #10
   1b7c8:	mov	r2, r4
   1b7cc:	mov	r1, r4
   1b7d0:	mov	r0, r5
   1b7d4:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1b7d8:	mov	r6, r0
   1b7dc:	b	1b5b0 <_start@@Base+0x6524>
   1b7e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7e4:	vpush	{d8-d9}
   1b7e8:	mov	fp, r0
   1b7ec:	mov	r0, r3
   1b7f0:	mov	r9, r1
   1b7f4:	sub	sp, sp, #124	; 0x7c
   1b7f8:	mov	r1, #36	; 0x24
   1b7fc:	str	r3, [sp, #76]	; 0x4c
   1b800:	mov	r3, #0
   1b804:	str	r3, [r0]
   1b808:	ldr	r0, [fp]
   1b80c:	mov	sl, r2
   1b810:	bl	27fa8 <flatcc_builder_start_table@@Base>
   1b814:	cmp	r0, #0
   1b818:	bne	1ba54 <_start@@Base+0x69c8>
   1b81c:	add	r3, sp, #96	; 0x60
   1b820:	str	r3, [sp]
   1b824:	mov	r2, sl
   1b828:	mov	r3, #1
   1b82c:	mov	r1, r9
   1b830:	mov	r0, fp
   1b834:	bl	32598 <flatcc_json_parser_prepare_unions@@Base>
   1b838:	cmp	sl, r0
   1b83c:	beq	1ba54 <_start@@Base+0x69c8>
   1b840:	mov	r1, r9
   1b844:	add	r3, sp, #88	; 0x58
   1b848:	mov	r2, sl
   1b84c:	mov	r0, fp
   1b850:	bl	17c44 <_start@@Base+0x2bb8>
   1b854:	ldr	r3, [sp, #88]	; 0x58
   1b858:	cmp	r3, #0
   1b85c:	mov	r9, r0
   1b860:	beq	1bf04 <_start@@Base+0x6e78>
   1b864:	cmp	sl, r9
   1b868:	beq	1b894 <_start@@Base+0x6808>
   1b86c:	ldrb	r3, [r9]
   1b870:	cmp	r3, #34	; 0x22
   1b874:	addeq	r9, r9, #1
   1b878:	beq	1b894 <_start@@Base+0x6808>
   1b87c:	mov	r1, r9
   1b880:	mov	r3, #5
   1b884:	mov	r2, sl
   1b888:	mov	r0, fp
   1b88c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1b890:	mov	r9, r0
   1b894:	mov	r1, sl
   1b898:	mov	r0, r9
   1b89c:	bl	151b8 <_start@@Base+0x12c>
   1b8a0:	add	r3, pc, #832	; 0x340
   1b8a4:	ldrd	r2, [r3]
   1b8a8:	cmp	r1, r3
   1b8ac:	cmpeq	r0, r2
   1b8b0:	mov	r4, r0
   1b8b4:	mov	r5, r1
   1b8b8:	bhi	1ba74 <_start@@Base+0x69e8>
   1b8bc:	add	r3, pc, #812	; 0x32c
   1b8c0:	ldrd	r2, [r3]
   1b8c4:	cmp	r1, r3
   1b8c8:	cmpeq	r0, r2
   1b8cc:	bhi	1baf0 <_start@@Base+0x6a64>
   1b8d0:	add	r3, pc, #800	; 0x320
   1b8d4:	ldrd	r2, [r3]
   1b8d8:	cmp	r1, r3
   1b8dc:	cmpeq	r0, r2
   1b8e0:	bhi	1bba4 <_start@@Base+0x6b18>
   1b8e4:	add	r3, pc, #788	; 0x314
   1b8e8:	ldrd	r2, [r3]
   1b8ec:	and	r4, r0, #-16777216	; 0xff000000
   1b8f0:	cmp	r1, r3
   1b8f4:	cmpeq	r4, r2
   1b8f8:	beq	1c354 <_start@@Base+0x72c8>
   1b8fc:	add	r3, pc, #772	; 0x304
   1b900:	ldrd	r2, [r3]
   1b904:	cmp	r1, r3
   1b908:	cmpeq	r4, r2
   1b90c:	beq	1c130 <_start@@Base+0x70a4>
   1b910:	mov	r1, r9
   1b914:	mov	r2, sl
   1b918:	mov	r0, fp
   1b91c:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1b920:	mov	r9, r0
   1b924:	b	1bee0 <_start@@Base+0x6e54>
   1b928:	add	r4, r9, #16
   1b92c:	mov	r0, r4
   1b930:	mov	r1, sl
   1b934:	bl	151b8 <_start@@Base+0x12c>
   1b938:	mov	r0, #0
   1b93c:	and	r1, r1, #-16777216	; 0xff000000
   1b940:	cmp	r1, #1929379840	; 0x73000000
   1b944:	cmpeq	r0, #0
   1b948:	bne	1e4ec <_start@@Base+0x9460>
   1b94c:	sub	r3, sl, r4
   1b950:	cmp	r3, #1
   1b954:	ble	1f478 <_start@@Base+0xa3ec>
   1b958:	mov	r3, #1
   1b95c:	mov	r2, sl
   1b960:	mov	r1, r4
   1b964:	mov	r0, fp
   1b968:	bl	18e7c <_start@@Base+0x3df0>
   1b96c:	cmp	r4, r0
   1b970:	mov	r9, r0
   1b974:	beq	1f474 <_start@@Base+0xa3e8>
   1b978:	mov	r2, #8
   1b97c:	mov	r1, r2
   1b980:	mvn	r3, #-536870912	; 0xe0000000
   1b984:	ldr	r0, [fp]
   1b988:	bl	27808 <flatcc_builder_start_vector@@Base>
   1b98c:	cmp	r0, #0
   1b990:	bne	1ba54 <_start@@Base+0x69c8>
   1b994:	mov	r1, r9
   1b998:	add	r3, sp, #88	; 0x58
   1b99c:	mov	r2, sl
   1b9a0:	mov	r0, fp
   1b9a4:	bl	18dc8 <_start@@Base+0x3d3c>
   1b9a8:	ldr	r3, [sp, #88]	; 0x58
   1b9ac:	cmp	r3, #0
   1b9b0:	mov	r9, r0
   1b9b4:	beq	1ef48 <_start@@Base+0x9ebc>
   1b9b8:	vldr	d8, [pc, #592]	; 1bc10 <_start@@Base+0x6b84>
   1b9bc:	ldr	r7, [pc, #684]	; 1bc70 <_start@@Base+0x6be4>
   1b9c0:	mov	r6, #1
   1b9c4:	add	r5, sp, #112	; 0x70
   1b9c8:	b	1b9f8 <_start@@Base+0x696c>
   1b9cc:	ldrd	r8, [sp, #112]	; 0x70
   1b9d0:	mov	r1, r0
   1b9d4:	add	r3, sp, #88	; 0x58
   1b9d8:	strd	r8, [r4]
   1b9dc:	mov	r2, sl
   1b9e0:	mov	r0, fp
   1b9e4:	bl	19938 <_start@@Base+0x48ac>
   1b9e8:	ldr	r3, [sp, #88]	; 0x58
   1b9ec:	cmp	r3, #0
   1b9f0:	mov	r9, r0
   1b9f4:	beq	1ef48 <_start@@Base+0x9ebc>
   1b9f8:	mov	r1, r6
   1b9fc:	ldr	r0, [fp]
   1ba00:	vstr	d8, [sp, #112]	; 0x70
   1ba04:	bl	26c9c <flatcc_builder_extend_vector@@Base>
   1ba08:	mov	r1, r9
   1ba0c:	mov	r3, r5
   1ba10:	mov	r2, sl
   1ba14:	subs	r4, r0, #0
   1ba18:	mov	r0, fp
   1ba1c:	beq	1ba54 <_start@@Base+0x69c8>
   1ba20:	bl	2f408 <flatcc_json_parser_double@@Base>
   1ba24:	cmp	r0, r9
   1ba28:	bne	1b9cc <_start@@Base+0x6940>
   1ba2c:	str	r5, [sp]
   1ba30:	mov	r3, r7
   1ba34:	mov	r2, sl
   1ba38:	mov	r1, r9
   1ba3c:	mov	r0, fp
   1ba40:	bl	17e74 <_start@@Base+0x2de8>
   1ba44:	cmp	sl, r0
   1ba48:	cmpne	r0, r9
   1ba4c:	bne	1b9cc <_start@@Base+0x6940>
   1ba50:	mov	r9, r0
   1ba54:	mov	r2, sl
   1ba58:	mov	r1, r9
   1ba5c:	mov	r0, fp
   1ba60:	mov	r3, #33	; 0x21
   1ba64:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1ba68:	add	sp, sp, #124	; 0x7c
   1ba6c:	vpop	{d8-d9}
   1ba70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba74:	add	r3, pc, #412	; 0x19c
   1ba78:	ldrd	r2, [r3]
   1ba7c:	cmp	r1, r3
   1ba80:	cmpeq	r0, r2
   1ba84:	bhi	1bb48 <_start@@Base+0x6abc>
   1ba88:	add	r3, pc, #400	; 0x190
   1ba8c:	ldrd	r2, [r3]
   1ba90:	cmp	r1, r3
   1ba94:	cmpeq	r0, r2
   1ba98:	beq	1be40 <_start@@Base+0x6db4>
   1ba9c:	add	r3, pc, #388	; 0x184
   1baa0:	ldrd	r2, [r3]
   1baa4:	cmp	r1, r3
   1baa8:	cmpeq	r0, r2
   1baac:	bhi	1bde4 <_start@@Base+0x6d58>
   1bab0:	add	r3, pc, #376	; 0x178
   1bab4:	ldrd	r2, [r3]
   1bab8:	cmp	r1, r3
   1babc:	cmpeq	r0, r2
   1bac0:	beq	1c4d8 <_start@@Base+0x744c>
   1bac4:	add	r3, pc, #364	; 0x16c
   1bac8:	ldrd	r2, [r3]
   1bacc:	cmp	r1, r3
   1bad0:	cmpeq	r0, r2
   1bad4:	beq	1c1b8 <_start@@Base+0x712c>
   1bad8:	mov	r1, r9
   1badc:	mov	r2, sl
   1bae0:	mov	r0, fp
   1bae4:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1bae8:	mov	r9, r0
   1baec:	b	1bee0 <_start@@Base+0x6e54>
   1baf0:	add	r3, pc, #328	; 0x148
   1baf4:	ldrd	r2, [r3]
   1baf8:	cmp	r1, r3
   1bafc:	cmpeq	r0, r2
   1bb00:	bhi	1bc7c <_start@@Base+0x6bf0>
   1bb04:	add	r3, pc, #316	; 0x13c
   1bb08:	ldrd	r2, [r3]
   1bb0c:	cmp	r1, r3
   1bb10:	cmpeq	r0, r2
   1bb14:	bhi	1bf40 <_start@@Base+0x6eb4>
   1bb18:	add	r3, pc, #304	; 0x130
   1bb1c:	ldrd	r2, [r3]
   1bb20:	mov	r4, #0
   1bb24:	cmp	r1, r3
   1bb28:	cmpeq	r4, r2
   1bb2c:	beq	1c244 <_start@@Base+0x71b8>
   1bb30:	mov	r1, r9
   1bb34:	mov	r2, sl
   1bb38:	mov	r0, fp
   1bb3c:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1bb40:	mov	r9, r0
   1bb44:	b	1bee0 <_start@@Base+0x6e54>
   1bb48:	add	r3, pc, #264	; 0x108
   1bb4c:	ldrd	r2, [r3]
   1bb50:	cmp	r1, r3
   1bb54:	cmpeq	r0, r2
   1bb58:	bhi	1bd54 <_start@@Base+0x6cc8>
   1bb5c:	add	r3, pc, #252	; 0xfc
   1bb60:	ldrd	r2, [r3]
   1bb64:	ldr	r0, [pc, #264]	; 1bc74 <_start@@Base+0x6be8>
   1bb68:	mvn	r1, #0
   1bb6c:	and	r5, r5, r1
   1bb70:	and	r4, r4, r0
   1bb74:	cmp	r5, r3
   1bb78:	cmpeq	r4, r2
   1bb7c:	bne	1becc <_start@@Base+0x6e40>
   1bb80:	sub	r3, sl, r9
   1bb84:	cmp	r3, #6
   1bb88:	bgt	1c268 <_start@@Base+0x71dc>
   1bb8c:	mov	r1, r9
   1bb90:	mov	r2, sl
   1bb94:	mov	r0, fp
   1bb98:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1bb9c:	mov	r9, r0
   1bba0:	b	1bee0 <_start@@Base+0x6e54>
   1bba4:	ldr	r3, [pc, #204]	; 1bc78 <_start@@Base+0x6bec>
   1bba8:	mvn	r2, #0
   1bbac:	cmp	r1, r3
   1bbb0:	cmpeq	r0, r2
   1bbb4:	bhi	1bf94 <_start@@Base+0x6f08>
   1bbb8:	add	r3, pc, #168	; 0xa8
   1bbbc:	ldrd	r2, [r3]
   1bbc0:	mov	r4, #0
   1bbc4:	cmp	r1, r3
   1bbc8:	cmpeq	r4, r2
   1bbcc:	beq	1c220 <_start@@Base+0x7194>
   1bbd0:	mov	r1, r9
   1bbd4:	mov	r2, sl
   1bbd8:	mov	r0, fp
   1bbdc:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1bbe0:	mov	r9, r0
   1bbe4:	b	1bee0 <_start@@Base+0x6e54>
   1bbe8:	cmnvs	r2, r0, ror #4
   1bbec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bbf0:			; <UNDEFINED> instruction: 0xffffffff
   1bbf4:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   1bbf8:			; <UNDEFINED> instruction: 0xffffffff
   1bbfc:			; <UNDEFINED> instruction: 0x666c6577
   1bc00:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   1bc04:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   1bc08:	andvc	r0, r0, #0
   1bc0c:	cmnvs	pc, #28416	; 0x6f00
	...
   1bc18:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1bc1c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bc20:	cmnvs	r2, r1, ror #4
   1bc24:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bc28:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1bc2c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bc30:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1bc34:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bc38:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1bc3c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bc40:			; <UNDEFINED> instruction: 0xffffffff
   1bc44:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1bc48:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1bc4c:	rsbvc	r7, r1, r5, ror #4
   1bc50:	andeq	r0, r0, r0
   1bc54:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1bc58:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   1bc5c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bc60:	ldrtvs	r0, [r3], -r0
   1bc64:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bc68:	andeq	r0, r0, r0
   1bc6c:			; <UNDEFINED> instruction: 0x666c6578
   1bc70:	andeq	r7, r5, r4, ror #4
   1bc74:			; <UNDEFINED> instruction: 0xffff0000
   1bc78:	stmdavs	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
   1bc7c:	add	r3, pc, #956	; 0x3bc
   1bc80:	ldrd	r2, [r3]
   1bc84:	and	r6, r0, #-16777216	; 0xff000000
   1bc88:	mov	r7, r1
   1bc8c:	cmp	r1, r3
   1bc90:	cmpeq	r6, r2
   1bc94:	beq	1c3c8 <_start@@Base+0x733c>
   1bc98:	sub	r8, sl, r9
   1bc9c:	cmp	r8, #4
   1bca0:	bgt	1dbdc <_start@@Base+0x8b50>
   1bca4:	add	r3, pc, #924	; 0x39c
   1bca8:	ldrd	r2, [r3]
   1bcac:	cmp	r7, r3
   1bcb0:	cmpeq	r6, r2
   1bcb4:	beq	1c334 <_start@@Base+0x72a8>
   1bcb8:	add	r3, pc, #912	; 0x390
   1bcbc:	ldrd	r2, [r3]
   1bcc0:	cmp	r5, r3
   1bcc4:	cmpeq	r4, r2
   1bcc8:	bne	1c33c <_start@@Base+0x72b0>
   1bccc:	add	r9, r9, #8
   1bcd0:	mov	r0, r9
   1bcd4:	mov	r1, sl
   1bcd8:	bl	151b8 <_start@@Base+0x12c>
   1bcdc:	mov	r0, #0
   1bce0:	and	r1, r1, #-16777216	; 0xff000000
   1bce4:	cmp	r1, #1694498816	; 0x65000000
   1bce8:	cmpeq	r0, #0
   1bcec:	bne	1c698 <_start@@Base+0x760c>
   1bcf0:	sub	r3, sl, r9
   1bcf4:	cmp	r3, #1
   1bcf8:	ble	1ccb0 <_start@@Base+0x7c24>
   1bcfc:	mov	r1, r9
   1bd00:	mov	r3, #1
   1bd04:	mov	r2, sl
   1bd08:	mov	r0, fp
   1bd0c:	bl	18e7c <_start@@Base+0x3df0>
   1bd10:	cmp	r9, r0
   1bd14:	mov	r1, r0
   1bd18:	beq	1ccb0 <_start@@Base+0x7c24>
   1bd1c:	ldr	r2, [sp, #96]	; 0x60
   1bd20:	ldr	ip, [pc, #936]	; 1c0d0 <_start@@Base+0x7044>
   1bd24:	ldr	r0, [pc, #936]	; 1c0d4 <_start@@Base+0x7048>
   1bd28:	mov	r3, #8
   1bd2c:	str	r0, [sp, #8]
   1bd30:	str	r2, [sp, #4]
   1bd34:	str	r3, [sp]
   1bd38:	str	ip, [sp, #12]
   1bd3c:	mov	r3, #0
   1bd40:	mov	r2, sl
   1bd44:	mov	r0, fp
   1bd48:	bl	32804 <flatcc_json_parser_union_type@@Base>
   1bd4c:	mov	r9, r0
   1bd50:	b	1bee0 <_start@@Base+0x6e54>
   1bd54:	add	r3, pc, #764	; 0x2fc
   1bd58:	ldrd	r2, [r3]
   1bd5c:	cmp	r1, r3
   1bd60:	cmpeq	r0, r2
   1bd64:	beq	1c378 <_start@@Base+0x72ec>
   1bd68:	add	r3, pc, #752	; 0x2f0
   1bd6c:	ldrd	r2, [r3]
   1bd70:	cmp	r1, r3
   1bd74:	cmpeq	r0, r2
   1bd78:	bls	1c0e0 <_start@@Base+0x7054>
   1bd7c:	add	r3, pc, #740	; 0x2e4
   1bd80:	ldrd	r2, [r3]
   1bd84:	cmp	r1, r3
   1bd88:	cmpeq	r0, r2
   1bd8c:	bne	1c548 <_start@@Base+0x74bc>
   1bd90:	add	r4, r9, #8
   1bd94:	mov	r0, r4
   1bd98:	mov	r1, sl
   1bd9c:	bl	151b8 <_start@@Base+0x12c>
   1bda0:	add	r3, pc, #712	; 0x2c8
   1bda4:	ldrd	r2, [r3]
   1bda8:	cmp	r1, r3
   1bdac:	cmpeq	r0, r2
   1bdb0:	beq	1b928 <_start@@Base+0x689c>
   1bdb4:	add	r3, pc, #700	; 0x2bc
   1bdb8:	ldrd	r2, [r3]
   1bdbc:	bic	r0, r0, #255	; 0xff
   1bdc0:	cmp	r1, r3
   1bdc4:	cmpeq	r0, r2
   1bdc8:	beq	1cc8c <_start@@Base+0x7c00>
   1bdcc:	mov	r1, r4
   1bdd0:	mov	r2, sl
   1bdd4:	mov	r0, fp
   1bdd8:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1bddc:	mov	r9, r0
   1bde0:	b	1bee0 <_start@@Base+0x6e54>
   1bde4:	add	r3, pc, #660	; 0x294
   1bde8:	ldrd	r2, [r3]
   1bdec:	cmp	r1, r3
   1bdf0:	cmpeq	r0, r2
   1bdf4:	bls	1bff0 <_start@@Base+0x6f64>
   1bdf8:	add	r3, pc, #648	; 0x288
   1bdfc:	ldrd	r2, [r3]
   1be00:	ldr	r0, [pc, #720]	; 1c0d8 <_start@@Base+0x704c>
   1be04:	mvn	r1, #0
   1be08:	and	r5, r5, r1
   1be0c:	cmp	r5, r3
   1be10:	and	r4, r4, r0
   1be14:	cmpeq	r4, r2
   1be18:	sub	r3, sl, r9
   1be1c:	beq	1c714 <_start@@Base+0x7688>
   1be20:	cmp	r3, #5
   1be24:	bgt	1e3a8 <_start@@Base+0x931c>
   1be28:	mov	r1, r9
   1be2c:	mov	r2, sl
   1be30:	mov	r0, fp
   1be34:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1be38:	mov	r9, r0
   1be3c:	b	1bee0 <_start@@Base+0x6e54>
   1be40:	add	r4, r9, #8
   1be44:	mov	r0, r4
   1be48:	mov	r1, sl
   1be4c:	bl	151b8 <_start@@Base+0x12c>
   1be50:	add	r3, pc, #568	; 0x238
   1be54:	ldrd	r2, [r3]
   1be58:	cmp	r1, r3
   1be5c:	cmpeq	r0, r2
   1be60:	bhi	1c154 <_start@@Base+0x70c8>
   1be64:	add	r3, pc, #556	; 0x22c
   1be68:	ldrd	r2, [r3]
   1be6c:	cmp	r1, r3
   1be70:	cmpeq	r0, r2
   1be74:	beq	1d488 <_start@@Base+0x83fc>
   1be78:	add	r3, pc, #544	; 0x220
   1be7c:	ldrd	r2, [r3]
   1be80:	cmp	r1, r3
   1be84:	cmpeq	r0, r2
   1be88:	bne	1c6cc <_start@@Base+0x7640>
   1be8c:	add	r4, r9, #16
   1be90:	mov	r0, r4
   1be94:	mov	r1, sl
   1be98:	bl	151b8 <_start@@Base+0x12c>
   1be9c:	add	r3, pc, #516	; 0x204
   1bea0:	ldrd	r2, [r3]
   1bea4:	bic	r0, r0, #255	; 0xff
   1bea8:	cmp	r1, r3
   1beac:	cmpeq	r0, r2
   1beb0:	beq	1cdb0 <_start@@Base+0x7d24>
   1beb4:	mov	r1, r4
   1beb8:	mov	r2, sl
   1bebc:	mov	r0, fp
   1bec0:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1bec4:	mov	r9, r0
   1bec8:	b	1bee0 <_start@@Base+0x6e54>
   1becc:	mov	r1, r9
   1bed0:	mov	r2, sl
   1bed4:	mov	r0, fp
   1bed8:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1bedc:	mov	r9, r0
   1bee0:	mov	r1, r9
   1bee4:	add	r3, sp, #88	; 0x58
   1bee8:	mov	r2, sl
   1beec:	mov	r0, fp
   1bef0:	bl	19abc <_start@@Base+0x4a30>
   1bef4:	ldr	r3, [sp, #88]	; 0x58
   1bef8:	cmp	r3, #0
   1befc:	mov	r9, r0
   1bf00:	bne	1b864 <_start@@Base+0x67d8>
   1bf04:	ldr	r3, [fp, #20]
   1bf08:	cmp	r3, #0
   1bf0c:	bne	1ba54 <_start@@Base+0x69c8>
   1bf10:	mov	r1, #3
   1bf14:	ldr	r0, [fp]
   1bf18:	bl	28840 <flatcc_builder_check_required_field@@Base>
   1bf1c:	mov	r1, r9
   1bf20:	cmp	r0, #0
   1bf24:	bne	1e624 <_start@@Base+0x9598>
   1bf28:	mov	r3, #29
   1bf2c:	mov	r2, sl
   1bf30:	mov	r0, fp
   1bf34:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1bf38:	mov	r9, r0
   1bf3c:	b	1ba54 <_start@@Base+0x69c8>
   1bf40:	add	r3, pc, #360	; 0x168
   1bf44:	ldrd	r2, [r3]
   1bf48:	cmp	r1, r3
   1bf4c:	cmpeq	r0, r2
   1bf50:	beq	1c2f8 <_start@@Base+0x726c>
   1bf54:	add	r3, pc, #348	; 0x15c
   1bf58:	ldrd	r2, [r3]
   1bf5c:	bic	r5, r1, #255	; 0xff
   1bf60:	mov	r4, #0
   1bf64:	cmp	r5, r3
   1bf68:	cmpeq	r4, r2
   1bf6c:	bne	1c578 <_start@@Base+0x74ec>
   1bf70:	sub	r3, sl, r9
   1bf74:	cmp	r3, #3
   1bf78:	bgt	1dc28 <_start@@Base+0x8b9c>
   1bf7c:	mov	r1, r9
   1bf80:	mov	r2, sl
   1bf84:	mov	r0, fp
   1bf88:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1bf8c:	mov	r9, r0
   1bf90:	b	1bee0 <_start@@Base+0x6e54>
   1bf94:	add	r3, pc, #292	; 0x124
   1bf98:	ldrd	r2, [r3]
   1bf9c:	cmp	r1, r3
   1bfa0:	cmpeq	r0, r2
   1bfa4:	bhi	1c1dc <_start@@Base+0x7150>
   1bfa8:	ldr	r3, [pc, #296]	; 1c0d8 <_start@@Base+0x704c>
   1bfac:	mov	r2, #0
   1bfb0:	and	r5, r5, r3
   1bfb4:	ldr	r3, [pc, #288]	; 1c0dc <_start@@Base+0x7050>
   1bfb8:	and	r4, r4, r2
   1bfbc:	cmp	r5, r3
   1bfc0:	mov	r2, #0
   1bfc4:	cmpeq	r4, r2
   1bfc8:	bne	1c6b0 <_start@@Base+0x7624>
   1bfcc:	sub	r3, sl, r9
   1bfd0:	cmp	r3, #2
   1bfd4:	bgt	1cea8 <_start@@Base+0x7e1c>
   1bfd8:	mov	r1, r9
   1bfdc:	mov	r2, sl
   1bfe0:	mov	r0, fp
   1bfe4:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1bfe8:	mov	r9, r0
   1bfec:	b	1bee0 <_start@@Base+0x6e54>
   1bff0:	add	r3, pc, #208	; 0xd0
   1bff4:	ldrd	r2, [r3]
   1bff8:	cmp	r1, r3
   1bffc:	cmpeq	r0, r2
   1c000:	bne	1c560 <_start@@Base+0x74d4>
   1c004:	add	r4, r9, #8
   1c008:	mov	r0, r4
   1c00c:	mov	r1, sl
   1c010:	bl	151b8 <_start@@Base+0x12c>
   1c014:	mov	r0, #0
   1c018:	and	r1, r1, #-16777216	; 0xff000000
   1c01c:	cmp	r1, #2030043136	; 0x79000000
   1c020:	cmpeq	r0, #0
   1c024:	beq	1c860 <_start@@Base+0x77d4>
   1c028:	mov	r1, r4
   1c02c:	mov	r2, sl
   1c030:	mov	r0, fp
   1c034:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c038:	mov	r9, r0
   1c03c:	b	1bee0 <_start@@Base+0x6e54>
   1c040:	strcc	r0, [r0], #-0
   1c044:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c048:	strcc	r0, [r0, #-0]
   1c04c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c050:	svcpl	0x00747970
   1c054:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c058:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1c05c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c060:	svcvs	0x00725f6e
   1c064:			; <UNDEFINED> instruction: 0x76656374
   1c068:	svcvs	0x00725f6f
   1c06c:			; <UNDEFINED> instruction: 0x76656374
   1c070:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   1c074:	ldrbvs	r6, [pc], -pc, ror #8
   1c078:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   1c07c:	ldrbvs	r6, [pc], -pc, ror #24
   1c080:	ldrbvs	pc, [pc, #4095]!	; 1d087 <_start@@Base+0x7ffb>	; <UNPREDICTABLE>
   1c084:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c088:	ldrtvs	r0, [r2], -r0
   1c08c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c090:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1c094:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c098:	svcvs	0x006f6c73
   1c09c:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c0a0:	svcvs	0x00727465
   1c0a4:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c0a8:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1c0ac:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1c0b0:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1c0b4:	rsbvc	r7, r1, r5, ror #4
   1c0b8:	andeq	r0, r0, r0
   1c0bc:	rsbvc	r7, pc, r0, lsl #6
   1c0c0:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1c0c4:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1c0c8:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1c0cc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c0d0:	muleq	r2, r8, r0
   1c0d4:	andeq	r7, r5, ip, ror r1
   1c0d8:			; <UNDEFINED> instruction: 0xffff0000
   1c0dc:	ldmdavs	r0!, {}^	; <UNPREDICTABLE>
   1c0e0:	add	r3, pc, #928	; 0x3a0
   1c0e4:	ldrd	r2, [r3]
   1c0e8:	cmp	r1, r3
   1c0ec:	cmpeq	r0, r2
   1c0f0:	bne	1c530 <_start@@Base+0x74a4>
   1c0f4:	add	r4, r9, #8
   1c0f8:	mov	r0, r4
   1c0fc:	mov	r1, sl
   1c100:	bl	151b8 <_start@@Base+0x12c>
   1c104:	add	r3, pc, #900	; 0x384
   1c108:	ldrd	r2, [r3]
   1c10c:	cmp	r1, r3
   1c110:	cmpeq	r0, r2
   1c114:	beq	1ca4c <_start@@Base+0x79c0>
   1c118:	mov	r1, r4
   1c11c:	mov	r2, sl
   1c120:	mov	r0, fp
   1c124:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c128:	mov	r9, r0
   1c12c:	b	1bee0 <_start@@Base+0x6e54>
   1c130:	sub	r3, sl, r9
   1c134:	cmp	r3, #5
   1c138:	bgt	1c734 <_start@@Base+0x76a8>
   1c13c:	mov	r1, r9
   1c140:	mov	r2, sl
   1c144:	mov	r0, fp
   1c148:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c14c:	mov	r9, r0
   1c150:	b	1bee0 <_start@@Base+0x6e54>
   1c154:	add	r3, pc, #828	; 0x33c
   1c158:	ldrd	r2, [r3]
   1c15c:	cmp	r1, r3
   1c160:	cmpeq	r0, r2
   1c164:	beq	1d600 <_start@@Base+0x8574>
   1c168:	add	r3, pc, #816	; 0x330
   1c16c:	ldrd	r2, [r3]
   1c170:	cmp	r1, r3
   1c174:	cmpeq	r0, r2
   1c178:	bne	1c6fc <_start@@Base+0x7670>
   1c17c:	add	r4, r9, #16
   1c180:	mov	r0, r4
   1c184:	mov	r1, sl
   1c188:	bl	151b8 <_start@@Base+0x12c>
   1c18c:	mov	r0, #0
   1c190:	and	r1, r1, #-16777216	; 0xff000000
   1c194:	cmp	r1, #1929379840	; 0x73000000
   1c198:	cmpeq	r0, #0
   1c19c:	beq	1cdd4 <_start@@Base+0x7d48>
   1c1a0:	mov	r1, r4
   1c1a4:	mov	r2, sl
   1c1a8:	mov	r0, fp
   1c1ac:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c1b0:	mov	r9, r0
   1c1b4:	b	1bee0 <_start@@Base+0x6e54>
   1c1b8:	sub	r3, sl, r9
   1c1bc:	cmp	r3, #8
   1c1c0:	bgt	1d76c <_start@@Base+0x86e0>
   1c1c4:	mov	r1, r9
   1c1c8:	mov	r2, sl
   1c1cc:	mov	r0, fp
   1c1d0:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c1d4:	mov	r9, r0
   1c1d8:	b	1bee0 <_start@@Base+0x6e54>
   1c1dc:	add	r3, pc, #708	; 0x2c4
   1c1e0:	ldrd	r2, [r3]
   1c1e4:	cmp	r1, r3
   1c1e8:	cmpeq	r0, r2
   1c1ec:	beq	1da14 <_start@@Base+0x8988>
   1c1f0:	add	r3, pc, #696	; 0x2b8
   1c1f4:	ldrd	r2, [r3]
   1c1f8:	mov	r4, #0
   1c1fc:	cmp	r1, r3
   1c200:	cmpeq	r4, r2
   1c204:	beq	1c83c <_start@@Base+0x77b0>
   1c208:	mov	r1, r9
   1c20c:	mov	r2, sl
   1c210:	mov	r0, fp
   1c214:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c218:	mov	r9, r0
   1c21c:	b	1bee0 <_start@@Base+0x6e54>
   1c220:	sub	r3, sl, r9
   1c224:	cmp	r3, #4
   1c228:	bgt	1d8e4 <_start@@Base+0x8858>
   1c22c:	mov	r1, r9
   1c230:	mov	r2, sl
   1c234:	mov	r0, fp
   1c238:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c23c:	mov	r9, r0
   1c240:	b	1bee0 <_start@@Base+0x6e54>
   1c244:	sub	r3, sl, r9
   1c248:	cmp	r3, #4
   1c24c:	bgt	1d884 <_start@@Base+0x87f8>
   1c250:	mov	r1, r9
   1c254:	mov	r2, sl
   1c258:	mov	r0, fp
   1c25c:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c260:	mov	r9, r0
   1c264:	b	1bee0 <_start@@Base+0x6e54>
   1c268:	mov	r3, #6
   1c26c:	mov	r2, sl
   1c270:	mov	r1, r9
   1c274:	mov	r0, fp
   1c278:	bl	18e7c <_start@@Base+0x3df0>
   1c27c:	cmp	r9, r0
   1c280:	mov	r5, r0
   1c284:	beq	1bb8c <_start@@Base+0x6b00>
   1c288:	add	r4, sp, #120	; 0x78
   1c28c:	mov	r3, #0
   1c290:	mov	r1, r0
   1c294:	str	r3, [r4, #-8]!
   1c298:	mov	r2, sl
   1c29c:	mov	r0, fp
   1c2a0:	mov	r3, r4
   1c2a4:	bl	2f508 <flatcc_json_parser_float@@Base>
   1c2a8:	cmp	r0, r5
   1c2ac:	mov	r9, r0
   1c2b0:	beq	1e4a8 <_start@@Base+0x941c>
   1c2b4:	vldr	s15, [sp, #112]	; 0x70
   1c2b8:	vcmp.f32	s15, #0.0
   1c2bc:	vmrs	APSR_nzcv, fpscr
   1c2c0:	bne	1c2d0 <_start@@Base+0x7244>
   1c2c4:	ldr	r3, [fp, #8]
   1c2c8:	tst	r3, #2
   1c2cc:	beq	1bee0 <_start@@Base+0x6e54>
   1c2d0:	mov	r3, #4
   1c2d4:	mov	r2, r3
   1c2d8:	mov	r1, #27
   1c2dc:	ldr	r0, [fp]
   1c2e0:	bl	2a114 <flatcc_builder_table_add@@Base>
   1c2e4:	cmp	r0, #0
   1c2e8:	beq	1ba54 <_start@@Base+0x69c8>
   1c2ec:	ldr	r3, [sp, #112]	; 0x70
   1c2f0:	str	r3, [r0]
   1c2f4:	b	1bee0 <_start@@Base+0x6e54>
   1c2f8:	add	r4, r9, #8
   1c2fc:	mov	r0, r4
   1c300:	mov	r1, sl
   1c304:	bl	151b8 <_start@@Base+0x12c>
   1c308:	add	r3, pc, #424	; 0x1a8
   1c30c:	ldrd	r2, [r3]
   1c310:	cmp	r1, r3
   1c314:	cmpeq	r0, r2
   1c318:	beq	1cb78 <_start@@Base+0x7aec>
   1c31c:	mov	r1, r4
   1c320:	mov	r2, sl
   1c324:	mov	r0, fp
   1c328:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c32c:	mov	r9, r0
   1c330:	b	1bee0 <_start@@Base+0x6e54>
   1c334:	cmp	r8, #5
   1c338:	bgt	1ccfc <_start@@Base+0x7c70>
   1c33c:	mov	r1, r9
   1c340:	mov	r2, sl
   1c344:	mov	r0, fp
   1c348:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c34c:	mov	r9, r0
   1c350:	b	1bee0 <_start@@Base+0x6e54>
   1c354:	sub	r3, sl, r9
   1c358:	cmp	r3, #5
   1c35c:	bgt	1d428 <_start@@Base+0x839c>
   1c360:	mov	r1, r9
   1c364:	mov	r2, sl
   1c368:	mov	r0, fp
   1c36c:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c370:	mov	r9, r0
   1c374:	b	1bee0 <_start@@Base+0x6e54>
   1c378:	add	r9, r9, #8
   1c37c:	mov	r0, r9
   1c380:	mov	r1, sl
   1c384:	bl	151b8 <_start@@Base+0x12c>
   1c388:	add	r3, pc, #304	; 0x130
   1c38c:	ldrd	r2, [r3]
   1c390:	cmp	r1, r3
   1c394:	cmpeq	r0, r2
   1c398:	bhi	1c590 <_start@@Base+0x7504>
   1c39c:	add	r3, pc, #292	; 0x124
   1c3a0:	ldrd	r2, [r3]
   1c3a4:	cmp	r1, r3
   1c3a8:	cmpeq	r0, r2
   1c3ac:	beq	1cbc4 <_start@@Base+0x7b38>
   1c3b0:	mov	r1, r9
   1c3b4:	mov	r2, sl
   1c3b8:	mov	r0, fp
   1c3bc:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c3c0:	mov	r9, r0
   1c3c4:	b	1bee0 <_start@@Base+0x6e54>
   1c3c8:	sub	r3, sl, r9
   1c3cc:	cmp	r3, #5
   1c3d0:	ble	1c33c <_start@@Base+0x72b0>
   1c3d4:	mov	r3, #5
   1c3d8:	mov	r2, sl
   1c3dc:	mov	r1, r9
   1c3e0:	mov	r0, fp
   1c3e4:	bl	18e7c <_start@@Base+0x3df0>
   1c3e8:	cmp	r9, r0
   1c3ec:	mov	r4, r0
   1c3f0:	beq	1c33c <_start@@Base+0x72b0>
   1c3f4:	mvn	r3, #-1073741824	; 0xc0000000
   1c3f8:	mov	r2, #2
   1c3fc:	mov	r1, #4
   1c400:	ldr	r0, [fp]
   1c404:	bl	27808 <flatcc_builder_start_vector@@Base>
   1c408:	cmp	r0, #0
   1c40c:	bne	1f3fc <_start@@Base+0xa370>
   1c410:	add	r3, sp, #88	; 0x58
   1c414:	mov	r1, r4
   1c418:	mov	r2, sl
   1c41c:	mov	r0, fp
   1c420:	bl	18dc8 <_start@@Base+0x3d3c>
   1c424:	ldr	r3, [sp, #88]	; 0x58
   1c428:	cmp	r3, #0
   1c42c:	mov	r9, r0
   1c430:	beq	1d2dc <_start@@Base+0x8250>
   1c434:	mov	r4, #1
   1c438:	b	1c464 <_start@@Base+0x73d8>
   1c43c:	bl	1addc <_start@@Base+0x5d50>
   1c440:	add	r3, sp, #88	; 0x58
   1c444:	mov	r2, sl
   1c448:	mov	r1, r0
   1c44c:	mov	r0, fp
   1c450:	bl	19938 <_start@@Base+0x48ac>
   1c454:	ldr	r3, [sp, #88]	; 0x58
   1c458:	cmp	r3, #0
   1c45c:	mov	r9, r0
   1c460:	beq	1d2dc <_start@@Base+0x8250>
   1c464:	mov	r1, r4
   1c468:	ldr	r0, [fp]
   1c46c:	bl	26c9c <flatcc_builder_extend_vector@@Base>
   1c470:	mov	r1, r9
   1c474:	mov	r2, sl
   1c478:	subs	r3, r0, #0
   1c47c:	mov	r0, fp
   1c480:	bne	1c43c <_start@@Base+0x73b0>
   1c484:	b	1ba54 <_start@@Base+0x69c8>
   1c488:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1c48c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c490:	cmnvs	r4, r5, ror r2
   1c494:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1c498:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1c49c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c4a0:	cmnvs	r2, r5, ror #24
   1c4a4:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c4a8:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1c4ac:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1c4b0:	andeq	r0, r0, r0
   1c4b4:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1c4b8:	rsbvc	r6, r1, r5, ror #6
   1c4bc:	smcvs	54867	; 0xd653
   1c4c0:			; <UNDEFINED> instruction: 0x666e7630
   1c4c4:	teqvc	r6, #1593835520	; 0x5f000000
   1c4c8:			; <UNDEFINED> instruction: 0x666e7631
   1c4cc:	teqvc	r3, #-268435451	; 0xf0000005
   1c4d0:			; <UNDEFINED> instruction: 0xffff0000
   1c4d4:	ldrtcc	r0, [r4], -r0
   1c4d8:	add	r4, r9, #8
   1c4dc:	mov	r0, r4
   1c4e0:	mov	r1, sl
   1c4e4:	bl	151b8 <_start@@Base+0x12c>
   1c4e8:	ldr	r3, [pc, #-32]	; 1c4d0 <_start@@Base+0x7444>
   1c4ec:	ldr	r7, [pc, #-32]	; 1c4d4 <_start@@Base+0x7448>
   1c4f0:	mov	r2, #0
   1c4f4:	mov	r6, #0
   1c4f8:	and	r3, r3, r1
   1c4fc:	and	r2, r2, r0
   1c500:	cmp	r3, r7
   1c504:	cmpeq	r2, r6
   1c508:	bne	1c6e4 <_start@@Base+0x7658>
   1c50c:	sub	r3, sl, r4
   1c510:	cmp	r3, #2
   1c514:	bgt	1cfc8 <_start@@Base+0x7f3c>
   1c518:	mov	r1, r4
   1c51c:	mov	r2, sl
   1c520:	mov	r0, fp
   1c524:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c528:	mov	r9, r0
   1c52c:	b	1bee0 <_start@@Base+0x6e54>
   1c530:	mov	r1, r9
   1c534:	mov	r2, sl
   1c538:	mov	r0, fp
   1c53c:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c540:	mov	r9, r0
   1c544:	b	1bee0 <_start@@Base+0x6e54>
   1c548:	mov	r1, r9
   1c54c:	mov	r2, sl
   1c550:	mov	r0, fp
   1c554:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c558:	mov	r9, r0
   1c55c:	b	1bee0 <_start@@Base+0x6e54>
   1c560:	mov	r1, r9
   1c564:	mov	r2, sl
   1c568:	mov	r0, fp
   1c56c:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c570:	mov	r9, r0
   1c574:	b	1bee0 <_start@@Base+0x6e54>
   1c578:	mov	r1, r9
   1c57c:	mov	r2, sl
   1c580:	mov	r0, fp
   1c584:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c588:	mov	r9, r0
   1c58c:	b	1bee0 <_start@@Base+0x6e54>
   1c590:	add	r3, pc, #840	; 0x348
   1c594:	ldrd	r2, [r3]
   1c598:	cmp	r1, r3
   1c59c:	cmpeq	r0, r2
   1c5a0:	bls	1ca98 <_start@@Base+0x7a0c>
   1c5a4:	add	r3, pc, #828	; 0x33c
   1c5a8:	ldrd	r2, [r3]
   1c5ac:	cmp	r1, r3
   1c5b0:	cmpeq	r0, r2
   1c5b4:	beq	1e72c <_start@@Base+0x96a0>
   1c5b8:	add	r3, pc, #816	; 0x330
   1c5bc:	ldrd	r2, [r3]
   1c5c0:	cmp	r1, r3
   1c5c4:	cmpeq	r0, r2
   1c5c8:	bne	1e5c4 <_start@@Base+0x9538>
   1c5cc:	sub	r3, sl, r9
   1c5d0:	cmp	r3, #8
   1c5d4:	bgt	1f068 <_start@@Base+0x9fdc>
   1c5d8:	add	r9, r9, #8
   1c5dc:	mov	r0, r9
   1c5e0:	mov	r1, sl
   1c5e4:	bl	151b8 <_start@@Base+0x12c>
   1c5e8:	mov	r0, #0
   1c5ec:	and	r1, r1, #-16777216	; 0xff000000
   1c5f0:	cmp	r1, #1627389952	; 0x61000000
   1c5f4:	cmpeq	r0, #0
   1c5f8:	bne	1f430 <_start@@Base+0xa3a4>
   1c5fc:	sub	r3, sl, r9
   1c600:	cmp	r3, #1
   1c604:	ble	1f544 <_start@@Base+0xa4b8>
   1c608:	mov	r3, #1
   1c60c:	mov	r2, sl
   1c610:	mov	r1, r9
   1c614:	mov	r0, fp
   1c618:	bl	18e7c <_start@@Base+0x3df0>
   1c61c:	cmp	r9, r0
   1c620:	mov	r4, r0
   1c624:	beq	1f548 <_start@@Base+0xa4bc>
   1c628:	mov	r0, #0
   1c62c:	mov	r1, #0
   1c630:	add	r5, sp, #120	; 0x78
   1c634:	mov	r2, sl
   1c638:	strd	r0, [r5, #-8]!
   1c63c:	mov	r1, r4
   1c640:	mov	r3, r5
   1c644:	mov	r0, fp
   1c648:	bl	17484 <_start@@Base+0x23f8>
   1c64c:	cmp	r0, r4
   1c650:	mov	r9, r0
   1c654:	beq	1f654 <_start@@Base+0xa5c8>
   1c658:	ldrd	r2, [sp, #112]	; 0x70
   1c65c:	orrs	r3, r2, r3
   1c660:	bne	1c670 <_start@@Base+0x75e4>
   1c664:	ldr	r3, [fp, #8]
   1c668:	tst	r3, #2
   1c66c:	beq	1bee0 <_start@@Base+0x6e54>
   1c670:	mov	r3, #8
   1c674:	mov	r2, r3
   1c678:	mov	r1, #23
   1c67c:	ldr	r0, [fp]
   1c680:	bl	2a114 <flatcc_builder_table_add@@Base>
   1c684:	cmp	r0, #0
   1c688:	beq	1ba54 <_start@@Base+0x69c8>
   1c68c:	ldrd	r2, [sp, #112]	; 0x70
   1c690:	strd	r2, [r0]
   1c694:	b	1bee0 <_start@@Base+0x6e54>
   1c698:	mov	r1, r9
   1c69c:	mov	r2, sl
   1c6a0:	mov	r0, fp
   1c6a4:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c6a8:	mov	r9, r0
   1c6ac:	b	1bee0 <_start@@Base+0x6e54>
   1c6b0:	mov	r1, r9
   1c6b4:	mov	r2, sl
   1c6b8:	mov	r0, fp
   1c6bc:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c6c0:	mov	r9, r0
   1c6c4:	b	1bee0 <_start@@Base+0x6e54>
   1c6c8:	mov	r4, r0
   1c6cc:	mov	r1, r4
   1c6d0:	mov	r2, sl
   1c6d4:	mov	r0, fp
   1c6d8:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c6dc:	mov	r9, r0
   1c6e0:	b	1bee0 <_start@@Base+0x6e54>
   1c6e4:	mov	r1, r4
   1c6e8:	mov	r2, sl
   1c6ec:	mov	r0, fp
   1c6f0:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c6f4:	mov	r9, r0
   1c6f8:	b	1bee0 <_start@@Base+0x6e54>
   1c6fc:	mov	r1, r4
   1c700:	mov	r2, sl
   1c704:	mov	r0, fp
   1c708:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c70c:	mov	r9, r0
   1c710:	b	1bee0 <_start@@Base+0x6e54>
   1c714:	cmp	r3, #6
   1c718:	bgt	1cf34 <_start@@Base+0x7ea8>
   1c71c:	mov	r1, r9
   1c720:	mov	r2, sl
   1c724:	mov	r0, fp
   1c728:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c72c:	mov	r9, r0
   1c730:	b	1bee0 <_start@@Base+0x6e54>
   1c734:	mov	r3, #5
   1c738:	mov	r2, sl
   1c73c:	mov	r1, r9
   1c740:	mov	r0, fp
   1c744:	bl	18e7c <_start@@Base+0x3df0>
   1c748:	cmp	r0, r9
   1c74c:	mov	r4, r0
   1c750:	beq	1c13c <_start@@Base+0x70b0>
   1c754:	mov	r0, #0
   1c758:	mov	r1, #0
   1c75c:	mov	r3, #0
   1c760:	cmp	sl, r4
   1c764:	strd	r0, [sp, #112]	; 0x70
   1c768:	strb	r3, [sp, #104]	; 0x68
   1c76c:	str	r3, [sp, #108]	; 0x6c
   1c770:	beq	1e2dc <_start@@Base+0x9250>
   1c774:	add	r3, sp, #112	; 0x70
   1c778:	str	r3, [sp]
   1c77c:	mov	r2, sl
   1c780:	add	r3, sp, #108	; 0x6c
   1c784:	mov	r1, r4
   1c788:	mov	r0, fp
   1c78c:	bl	31c94 <flatcc_json_parser_integer@@Base>
   1c790:	cmp	r4, r0
   1c794:	mov	r9, r0
   1c798:	beq	1e2d8 <_start@@Base+0x924c>
   1c79c:	ldr	r1, [sp, #108]	; 0x6c
   1c7a0:	ldrd	r2, [sp, #112]	; 0x70
   1c7a4:	cmp	r1, #0
   1c7a8:	bne	1c7fc <_start@@Base+0x7770>
   1c7ac:	cmp	r3, #0
   1c7b0:	cmpeq	r2, #127	; 0x7f
   1c7b4:	sxtbls	r2, r2
   1c7b8:	strbls	r2, [sp, #104]	; 0x68
   1c7bc:	bhi	1e7f4 <_start@@Base+0x9768>
   1c7c0:	cmp	r2, #8
   1c7c4:	bne	1c7d4 <_start@@Base+0x7748>
   1c7c8:	ldr	r3, [fp, #8]
   1c7cc:	tst	r3, #2
   1c7d0:	beq	1bee0 <_start@@Base+0x6e54>
   1c7d4:	mov	r3, #1
   1c7d8:	mov	r2, r3
   1c7dc:	mov	r1, #6
   1c7e0:	ldr	r0, [fp]
   1c7e4:	bl	2a114 <flatcc_builder_table_add@@Base>
   1c7e8:	cmp	r0, #0
   1c7ec:	beq	1ba54 <_start@@Base+0x69c8>
   1c7f0:	ldrsb	r3, [sp, #104]	; 0x68
   1c7f4:	strb	r3, [r0]
   1c7f8:	b	1bee0 <_start@@Base+0x6e54>
   1c7fc:	cmp	r3, #0
   1c800:	cmpeq	r2, #128	; 0x80
   1c804:	rsbls	r2, r2, #0
   1c808:	sxtbls	r2, r2
   1c80c:	strbls	r2, [sp, #104]	; 0x68
   1c810:	bls	1c7c0 <_start@@Base+0x7734>
   1c814:	mov	r1, r0
   1c818:	mov	r3, #8
   1c81c:	mov	r2, sl
   1c820:	mov	r0, fp
   1c824:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1c828:	mov	r9, r0
   1c82c:	cmp	r4, r9
   1c830:	beq	1e2dc <_start@@Base+0x9250>
   1c834:	ldrsb	r2, [sp, #104]	; 0x68
   1c838:	b	1c7c0 <_start@@Base+0x7734>
   1c83c:	sub	r3, sl, r9
   1c840:	cmp	r3, #4
   1c844:	bgt	1e538 <_start@@Base+0x94ac>
   1c848:	mov	r1, r9
   1c84c:	mov	r2, sl
   1c850:	mov	r0, fp
   1c854:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c858:	mov	r9, r0
   1c85c:	b	1bee0 <_start@@Base+0x6e54>
   1c860:	sub	r3, sl, r4
   1c864:	cmp	r3, #1
   1c868:	ble	1ed10 <_start@@Base+0x9c84>
   1c86c:	mov	r3, #1
   1c870:	mov	r2, sl
   1c874:	mov	r1, r4
   1c878:	mov	r0, fp
   1c87c:	bl	18e7c <_start@@Base+0x3df0>
   1c880:	cmp	r4, r0
   1c884:	mov	r9, r0
   1c888:	beq	1ed0c <_start@@Base+0x9c80>
   1c88c:	mov	r3, #0
   1c890:	mov	r1, #3
   1c894:	ldr	r0, [fp]
   1c898:	str	r3, [sp, #92]	; 0x5c
   1c89c:	bl	27fa8 <flatcc_builder_start_table@@Base>
   1c8a0:	cmp	r0, #0
   1c8a4:	bne	1db64 <_start@@Base+0x8ad8>
   1c8a8:	mov	r1, r9
   1c8ac:	add	r3, sp, #100	; 0x64
   1c8b0:	mov	r2, sl
   1c8b4:	mov	r0, fp
   1c8b8:	bl	17c44 <_start@@Base+0x2bb8>
   1c8bc:	ldr	r3, [sp, #100]	; 0x64
   1c8c0:	cmp	r3, #0
   1c8c4:	mov	r9, r0
   1c8c8:	beq	1db44 <_start@@Base+0x8ab8>
   1c8cc:	mov	r8, #5
   1c8d0:	mvn	r6, #0
   1c8d4:	ldr	r7, [pc, #28]	; 1c8f8 <_start@@Base+0x786c>
   1c8d8:	b	1c958 <_start@@Base+0x78cc>
   1c8dc:	nop			; (mov r0, r0)
   1c8e0:			; <UNDEFINED> instruction: 0x666e7630
   1c8e4:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1c8e8:			; <UNDEFINED> instruction: 0x666e7631
   1c8ec:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1c8f0:			; <UNDEFINED> instruction: 0x666e7631
   1c8f4:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   1c8f8:	stmdbvs	r3!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   1c8fc:	add	r3, pc, #964	; 0x3c4
   1c900:	ldrd	r2, [r3]
   1c904:	and	r0, r0, #-16777216	; 0xff000000
   1c908:	cmp	r1, r3
   1c90c:	cmpeq	r0, r2
   1c910:	bne	1c920 <_start@@Base+0x7894>
   1c914:	sub	r3, sl, r9
   1c918:	cmp	r3, #5
   1c91c:	bgt	1d310 <_start@@Base+0x8284>
   1c920:	mov	r1, r9
   1c924:	mov	r2, sl
   1c928:	mov	r0, fp
   1c92c:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1c930:	mov	r9, r0
   1c934:	mov	r1, r9
   1c938:	add	r3, sp, #100	; 0x64
   1c93c:	mov	r2, sl
   1c940:	mov	r0, fp
   1c944:	bl	19abc <_start@@Base+0x4a30>
   1c948:	ldr	r3, [sp, #100]	; 0x64
   1c94c:	cmp	r3, #0
   1c950:	mov	r9, r0
   1c954:	beq	1db44 <_start@@Base+0x8ab8>
   1c958:	cmp	sl, r9
   1c95c:	beq	1c988 <_start@@Base+0x78fc>
   1c960:	ldrb	r3, [r9]
   1c964:	cmp	r3, #34	; 0x22
   1c968:	addeq	r9, r9, #1
   1c96c:	beq	1c988 <_start@@Base+0x78fc>
   1c970:	mov	r1, r9
   1c974:	mov	r3, r8
   1c978:	mov	r2, sl
   1c97c:	mov	r0, fp
   1c980:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1c984:	mov	r9, r0
   1c988:	mov	r1, sl
   1c98c:	mov	r0, r9
   1c990:	bl	151b8 <_start@@Base+0x12c>
   1c994:	cmp	r1, r7
   1c998:	cmpeq	r0, r6
   1c99c:	bls	1c8fc <_start@@Base+0x7870>
   1c9a0:	add	r3, pc, #808	; 0x328
   1c9a4:	ldrd	r2, [r3]
   1c9a8:	bic	r5, r1, #255	; 0xff
   1c9ac:	mov	r4, #0
   1c9b0:	cmp	r5, r3
   1c9b4:	cmpeq	r4, r2
   1c9b8:	beq	1d194 <_start@@Base+0x8108>
   1c9bc:	ldr	r3, [pc, #812]	; 1ccf0 <_start@@Base+0x7c64>
   1c9c0:	mov	r2, #0
   1c9c4:	and	r1, r1, r3
   1c9c8:	ldr	r3, [pc, #804]	; 1ccf4 <_start@@Base+0x7c68>
   1c9cc:	and	r0, r0, r2
   1c9d0:	cmp	r1, r3
   1c9d4:	mov	r2, #0
   1c9d8:	cmpeq	r0, r2
   1c9dc:	bne	1c920 <_start@@Base+0x7894>
   1c9e0:	sub	r3, sl, r9
   1c9e4:	cmp	r3, #2
   1c9e8:	ble	1c920 <_start@@Base+0x7894>
   1c9ec:	mov	r1, r9
   1c9f0:	mov	r3, #2
   1c9f4:	mov	r2, sl
   1c9f8:	mov	r0, fp
   1c9fc:	bl	18e7c <_start@@Base+0x3df0>
   1ca00:	cmp	r9, r0
   1ca04:	mov	r1, r0
   1ca08:	beq	1c920 <_start@@Base+0x7894>
   1ca0c:	add	r3, sp, #104	; 0x68
   1ca10:	mov	r2, sl
   1ca14:	mov	r0, fp
   1ca18:	bl	32270 <flatcc_json_parser_build_string@@Base>
   1ca1c:	ldr	r3, [sp, #104]	; 0x68
   1ca20:	cmp	r3, #0
   1ca24:	mov	r9, r0
   1ca28:	beq	1db64 <_start@@Base+0x8ad8>
   1ca2c:	mov	r1, #0
   1ca30:	ldr	r0, [fp]
   1ca34:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1ca38:	cmp	r0, #0
   1ca3c:	beq	1db64 <_start@@Base+0x8ad8>
   1ca40:	ldr	r3, [sp, #104]	; 0x68
   1ca44:	str	r3, [r0]
   1ca48:	b	1c934 <_start@@Base+0x78a8>
   1ca4c:	add	r4, r9, #16
   1ca50:	mov	r0, r4
   1ca54:	mov	r1, sl
   1ca58:	bl	151b8 <_start@@Base+0x12c>
   1ca5c:	add	r3, pc, #628	; 0x274
   1ca60:	ldrd	r2, [r3]
   1ca64:	mov	r0, #0
   1ca68:	cmp	r1, r3
   1ca6c:	cmpeq	r0, r2
   1ca70:	bne	1e348 <_start@@Base+0x92bc>
   1ca74:	sub	r3, sl, r4
   1ca78:	cmp	r3, #4
   1ca7c:	bgt	1ed5c <_start@@Base+0x9cd0>
   1ca80:	mov	r1, r4
   1ca84:	mov	r2, sl
   1ca88:	mov	r0, fp
   1ca8c:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ca90:	mov	r9, r0
   1ca94:	b	1bee0 <_start@@Base+0x6e54>
   1ca98:	add	r3, pc, #576	; 0x240
   1ca9c:	ldrd	r2, [r3]
   1caa0:	cmp	r1, r3
   1caa4:	cmpeq	r0, r2
   1caa8:	bne	1e454 <_start@@Base+0x93c8>
   1caac:	sub	r3, sl, r9
   1cab0:	cmp	r3, #8
   1cab4:	bgt	1ee74 <_start@@Base+0x9de8>
   1cab8:	add	r9, r9, #8
   1cabc:	mov	r0, r9
   1cac0:	mov	r1, sl
   1cac4:	bl	151b8 <_start@@Base+0x12c>
   1cac8:	mov	r0, #0
   1cacc:	and	r1, r1, #-16777216	; 0xff000000
   1cad0:	cmp	r1, #1627389952	; 0x61000000
   1cad4:	cmpeq	r0, #0
   1cad8:	bne	1f114 <_start@@Base+0xa088>
   1cadc:	sub	r3, sl, r9
   1cae0:	cmp	r3, #1
   1cae4:	ble	1f560 <_start@@Base+0xa4d4>
   1cae8:	mov	r3, #1
   1caec:	mov	r2, sl
   1caf0:	mov	r1, r9
   1caf4:	mov	r0, fp
   1caf8:	bl	18e7c <_start@@Base+0x3df0>
   1cafc:	cmp	r9, r0
   1cb00:	mov	r4, r0
   1cb04:	beq	1f564 <_start@@Base+0xa4d8>
   1cb08:	mov	r0, #0
   1cb0c:	mov	r1, #0
   1cb10:	add	r5, sp, #120	; 0x78
   1cb14:	mov	r2, sl
   1cb18:	strd	r0, [r5, #-8]!
   1cb1c:	mov	r1, r4
   1cb20:	mov	r3, r5
   1cb24:	mov	r0, fp
   1cb28:	bl	170fc <_start@@Base+0x2070>
   1cb2c:	cmp	r0, r4
   1cb30:	mov	r9, r0
   1cb34:	beq	1f680 <_start@@Base+0xa5f4>
   1cb38:	ldrd	r2, [sp, #112]	; 0x70
   1cb3c:	orrs	r3, r2, r3
   1cb40:	bne	1cb50 <_start@@Base+0x7ac4>
   1cb44:	ldr	r3, [fp, #8]
   1cb48:	tst	r3, #2
   1cb4c:	beq	1bee0 <_start@@Base+0x6e54>
   1cb50:	mov	r3, #8
   1cb54:	mov	r2, r3
   1cb58:	mov	r1, #22
   1cb5c:	ldr	r0, [fp]
   1cb60:	bl	2a114 <flatcc_builder_table_add@@Base>
   1cb64:	cmp	r0, #0
   1cb68:	beq	1ba54 <_start@@Base+0x69c8>
   1cb6c:	ldrd	r2, [sp, #112]	; 0x70
   1cb70:	strd	r2, [r0]
   1cb74:	b	1bee0 <_start@@Base+0x6e54>
   1cb78:	add	r9, r9, #16
   1cb7c:	mov	r0, r9
   1cb80:	mov	r1, sl
   1cb84:	bl	151b8 <_start@@Base+0x12c>
   1cb88:	add	r3, pc, #344	; 0x158
   1cb8c:	ldrd	r2, [r3]
   1cb90:	and	r0, r0, #-16777216	; 0xff000000
   1cb94:	cmp	r1, r3
   1cb98:	cmpeq	r0, r2
   1cb9c:	bne	1e46c <_start@@Base+0x93e0>
   1cba0:	sub	r3, sl, r9
   1cba4:	cmp	r3, #5
   1cba8:	bgt	1ef7c <_start@@Base+0x9ef0>
   1cbac:	mov	r1, r9
   1cbb0:	mov	r2, sl
   1cbb4:	mov	r0, fp
   1cbb8:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1cbbc:	mov	r9, r0
   1cbc0:	b	1bee0 <_start@@Base+0x6e54>
   1cbc4:	sub	r3, sl, r9
   1cbc8:	cmp	r3, #8
   1cbcc:	bgt	1e6a0 <_start@@Base+0x9614>
   1cbd0:	add	r9, r9, #8
   1cbd4:	mov	r0, r9
   1cbd8:	mov	r1, sl
   1cbdc:	bl	151b8 <_start@@Base+0x12c>
   1cbe0:	mov	r0, #0
   1cbe4:	and	r1, r1, #-16777216	; 0xff000000
   1cbe8:	cmp	r1, #1627389952	; 0x61000000
   1cbec:	cmpeq	r0, #0
   1cbf0:	bne	1ef04 <_start@@Base+0x9e78>
   1cbf4:	sub	r3, sl, r9
   1cbf8:	cmp	r3, #1
   1cbfc:	ble	1f57c <_start@@Base+0xa4f0>
   1cc00:	mov	r3, #1
   1cc04:	mov	r2, sl
   1cc08:	mov	r1, r9
   1cc0c:	mov	r0, fp
   1cc10:	bl	18e7c <_start@@Base+0x3df0>
   1cc14:	cmp	r9, r0
   1cc18:	mov	r5, r0
   1cc1c:	beq	1f57c <_start@@Base+0xa4f0>
   1cc20:	add	r4, sp, #120	; 0x78
   1cc24:	mov	r3, #0
   1cc28:	str	r3, [r4, #-8]!
   1cc2c:	mov	r1, r0
   1cc30:	mov	r2, sl
   1cc34:	mov	r3, r4
   1cc38:	mov	r0, fp
   1cc3c:	bl	177f8 <_start@@Base+0x276c>
   1cc40:	cmp	r0, r5
   1cc44:	mov	r9, r0
   1cc48:	beq	1f600 <_start@@Base+0xa574>
   1cc4c:	ldr	r3, [sp, #112]	; 0x70
   1cc50:	cmp	r3, #0
   1cc54:	bne	1cc64 <_start@@Base+0x7bd8>
   1cc58:	ldr	r3, [fp, #8]
   1cc5c:	tst	r3, #2
   1cc60:	beq	1bee0 <_start@@Base+0x6e54>
   1cc64:	mov	r3, #4
   1cc68:	mov	r2, r3
   1cc6c:	mov	r1, #20
   1cc70:	ldr	r0, [fp]
   1cc74:	bl	2a114 <flatcc_builder_table_add@@Base>
   1cc78:	cmp	r0, #0
   1cc7c:	beq	1ba54 <_start@@Base+0x69c8>
   1cc80:	ldr	r3, [sp, #112]	; 0x70
   1cc84:	str	r3, [r0]
   1cc88:	b	1bee0 <_start@@Base+0x6e54>
   1cc8c:	sub	r3, sl, r4
   1cc90:	cmp	r3, #7
   1cc94:	bgt	1e83c <_start@@Base+0x97b0>
   1cc98:	mov	r1, r4
   1cc9c:	mov	r2, sl
   1cca0:	mov	r0, fp
   1cca4:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1cca8:	mov	r9, r0
   1ccac:	b	1bee0 <_start@@Base+0x6e54>
   1ccb0:	mov	r1, r9
   1ccb4:	mov	r2, sl
   1ccb8:	mov	r0, fp
   1ccbc:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ccc0:	mov	r9, r0
   1ccc4:	b	1bee0 <_start@@Base+0x6e54>
   1ccc8:	strvc	r0, [r0], #-0
   1cccc:	cmnvs	pc, #461373440	; 0x1b800000
   1ccd0:	andeq	r0, r0, r0
   1ccd4:	strbtvc	r6, [r1], -r0, lsl #24
   1ccd8:	andeq	r0, r0, r0
   1ccdc:			; <UNDEFINED> instruction: 0x66666572
   1cce0:			; <UNDEFINED> instruction: 0x666e7631
   1cce4:	teqvc	r6, #1593835520	; 0x5f000000
   1cce8:	strvc	r0, [r0], #-0
   1ccec:	svcpl	0x00746573
   1ccf0:			; <UNDEFINED> instruction: 0xffff0000
   1ccf4:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1ccf8:	submi	r0, r0, r0
   1ccfc:	mov	r3, #5
   1cd00:	mov	r2, sl
   1cd04:	mov	r1, r9
   1cd08:	mov	r0, fp
   1cd0c:	bl	18e7c <_start@@Base+0x3df0>
   1cd10:	cmp	r9, r0
   1cd14:	mov	r4, r0
   1cd18:	beq	1c33c <_start@@Base+0x72b0>
   1cd1c:	mvn	r3, #-1073741824	; 0xc0000000
   1cd20:	mov	r2, #2
   1cd24:	mov	r1, #4
   1cd28:	ldr	r0, [fp]
   1cd2c:	bl	27808 <flatcc_builder_start_vector@@Base>
   1cd30:	cmp	r0, #0
   1cd34:	bne	1f490 <_start@@Base+0xa404>
   1cd38:	add	r3, sp, #88	; 0x58
   1cd3c:	mov	r1, r4
   1cd40:	mov	r2, sl
   1cd44:	mov	r0, fp
   1cd48:	bl	18dc8 <_start@@Base+0x3d3c>
   1cd4c:	ldr	r3, [sp, #88]	; 0x58
   1cd50:	cmp	r3, #0
   1cd54:	mov	r9, r0
   1cd58:	beq	1dba8 <_start@@Base+0x8b1c>
   1cd5c:	mov	r4, #1
   1cd60:	b	1cd8c <_start@@Base+0x7d00>
   1cd64:	bl	1addc <_start@@Base+0x5d50>
   1cd68:	add	r3, sp, #88	; 0x58
   1cd6c:	mov	r2, sl
   1cd70:	mov	r1, r0
   1cd74:	mov	r0, fp
   1cd78:	bl	19938 <_start@@Base+0x48ac>
   1cd7c:	ldr	r3, [sp, #88]	; 0x58
   1cd80:	cmp	r3, #0
   1cd84:	mov	r9, r0
   1cd88:	beq	1dba8 <_start@@Base+0x8b1c>
   1cd8c:	mov	r1, r4
   1cd90:	ldr	r0, [fp]
   1cd94:	bl	26c9c <flatcc_builder_extend_vector@@Base>
   1cd98:	mov	r1, r9
   1cd9c:	mov	r2, sl
   1cda0:	subs	r3, r0, #0
   1cda4:	mov	r0, fp
   1cda8:	bne	1cd64 <_start@@Base+0x7cd8>
   1cdac:	b	1ba54 <_start@@Base+0x69c8>
   1cdb0:	sub	r3, sl, r4
   1cdb4:	cmp	r3, #7
   1cdb8:	bgt	1e99c <_start@@Base+0x9910>
   1cdbc:	mov	r1, r4
   1cdc0:	mov	r2, sl
   1cdc4:	mov	r0, fp
   1cdc8:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1cdcc:	mov	r9, r0
   1cdd0:	b	1bee0 <_start@@Base+0x6e54>
   1cdd4:	sub	r3, sl, r4
   1cdd8:	cmp	r3, #1
   1cddc:	ble	1f0fc <_start@@Base+0xa070>
   1cde0:	mov	r3, #1
   1cde4:	mov	r2, sl
   1cde8:	mov	r1, r4
   1cdec:	mov	r0, fp
   1cdf0:	bl	18e7c <_start@@Base+0x3df0>
   1cdf4:	cmp	r4, r0
   1cdf8:	mov	r9, r0
   1cdfc:	beq	1f0f8 <_start@@Base+0xa06c>
   1ce00:	ldr	r0, [fp]
   1ce04:	bl	27960 <flatcc_builder_start_offset_vector@@Base>
   1ce08:	cmp	r0, #0
   1ce0c:	bne	1ba54 <_start@@Base+0x69c8>
   1ce10:	mov	r1, r9
   1ce14:	add	r3, sp, #88	; 0x58
   1ce18:	mov	r2, sl
   1ce1c:	mov	r0, fp
   1ce20:	bl	18dc8 <_start@@Base+0x3d3c>
   1ce24:	ldr	r3, [sp, #88]	; 0x58
   1ce28:	cmp	r3, #0
   1ce2c:	mov	r9, r0
   1ce30:	beq	1ed28 <_start@@Base+0x9c9c>
   1ce34:	add	r4, sp, #92	; 0x5c
   1ce38:	mov	r5, #1
   1ce3c:	b	1ce7c <_start@@Base+0x7df0>
   1ce40:	ldr	r0, [fp]
   1ce44:	bl	26fc4 <flatcc_builder_extend_offset_vector@@Base>
   1ce48:	add	r3, sp, #88	; 0x58
   1ce4c:	mov	r2, sl
   1ce50:	mov	r1, r9
   1ce54:	subs	ip, r0, #0
   1ce58:	mov	r0, fp
   1ce5c:	beq	1ba54 <_start@@Base+0x69c8>
   1ce60:	ldr	lr, [sp, #92]	; 0x5c
   1ce64:	str	lr, [ip]
   1ce68:	bl	19938 <_start@@Base+0x48ac>
   1ce6c:	ldr	r3, [sp, #88]	; 0x58
   1ce70:	cmp	r3, #0
   1ce74:	mov	r9, r0
   1ce78:	beq	1ed28 <_start@@Base+0x9c9c>
   1ce7c:	mov	r1, r9
   1ce80:	mov	r3, r4
   1ce84:	mov	r2, sl
   1ce88:	mov	r0, fp
   1ce8c:	bl	1b7e0 <_start@@Base+0x6754>
   1ce90:	ldr	r3, [sp, #92]	; 0x5c
   1ce94:	mov	r1, r5
   1ce98:	cmp	r3, #0
   1ce9c:	mov	r9, r0
   1cea0:	bne	1ce40 <_start@@Base+0x7db4>
   1cea4:	b	1ba54 <_start@@Base+0x69c8>
   1cea8:	mov	r3, #2
   1ceac:	mov	r2, sl
   1ceb0:	mov	r1, r9
   1ceb4:	mov	r0, fp
   1ceb8:	bl	18e7c <_start@@Base+0x3df0>
   1cebc:	cmp	r9, r0
   1cec0:	mov	r5, r0
   1cec4:	beq	1bfd8 <_start@@Base+0x6f4c>
   1cec8:	add	r4, sp, #120	; 0x78
   1cecc:	mov	r3, #0
   1ced0:	strh	r3, [r4, #-8]!
   1ced4:	mov	r1, r0
   1ced8:	mov	r2, sl
   1cedc:	mov	r3, r4
   1cee0:	mov	r0, fp
   1cee4:	bl	178c0 <_start@@Base+0x2834>
   1cee8:	cmp	r0, r5
   1ceec:	mov	r9, r0
   1cef0:	beq	1efdc <_start@@Base+0x9f50>
   1cef4:	ldrsh	r3, [sp, #112]	; 0x70
   1cef8:	cmp	r3, #100	; 0x64
   1cefc:	bne	1cf0c <_start@@Base+0x7e80>
   1cf00:	ldr	r3, [fp, #8]
   1cf04:	tst	r3, #2
   1cf08:	beq	1bee0 <_start@@Base+0x6e54>
   1cf0c:	mov	r3, #2
   1cf10:	mov	r2, r3
   1cf14:	mov	r1, r3
   1cf18:	ldr	r0, [fp]
   1cf1c:	bl	2a114 <flatcc_builder_table_add@@Base>
   1cf20:	cmp	r0, #0
   1cf24:	beq	1ba54 <_start@@Base+0x69c8>
   1cf28:	ldrsh	r3, [sp, #112]	; 0x70
   1cf2c:	strh	r3, [r0]
   1cf30:	b	1bee0 <_start@@Base+0x6e54>
   1cf34:	mov	r3, #6
   1cf38:	mov	r2, sl
   1cf3c:	mov	r1, r9
   1cf40:	mov	r0, fp
   1cf44:	bl	18e7c <_start@@Base+0x3df0>
   1cf48:	cmp	r9, r0
   1cf4c:	mov	r5, r0
   1cf50:	beq	1c71c <_start@@Base+0x7690>
   1cf54:	add	r4, sp, #120	; 0x78
   1cf58:	mov	r3, #0
   1cf5c:	mov	r1, r0
   1cf60:	str	r3, [r4, #-8]!
   1cf64:	mov	r2, sl
   1cf68:	mov	r0, fp
   1cf6c:	mov	r3, r4
   1cf70:	bl	2f508 <flatcc_json_parser_float@@Base>
   1cf74:	cmp	r0, r5
   1cf78:	mov	r9, r0
   1cf7c:	beq	1f12c <_start@@Base+0xa0a0>
   1cf80:	vldr	s15, [pc, #-656]	; 1ccf8 <_start@@Base+0x7c6c>
   1cf84:	vldr	s14, [sp, #112]	; 0x70
   1cf88:	vcmp.f32	s14, s15
   1cf8c:	vmrs	APSR_nzcv, fpscr
   1cf90:	bne	1cfa0 <_start@@Base+0x7f14>
   1cf94:	ldr	r3, [fp, #8]
   1cf98:	tst	r3, #2
   1cf9c:	beq	1bee0 <_start@@Base+0x6e54>
   1cfa0:	mov	r3, #4
   1cfa4:	mov	r2, r3
   1cfa8:	mov	r1, #26
   1cfac:	ldr	r0, [fp]
   1cfb0:	bl	2a114 <flatcc_builder_table_add@@Base>
   1cfb4:	cmp	r0, #0
   1cfb8:	beq	1ba54 <_start@@Base+0x69c8>
   1cfbc:	ldr	r3, [sp, #112]	; 0x70
   1cfc0:	str	r3, [r0]
   1cfc4:	b	1bee0 <_start@@Base+0x6e54>
   1cfc8:	mov	r3, #2
   1cfcc:	mov	r2, sl
   1cfd0:	mov	r1, r4
   1cfd4:	mov	r0, fp
   1cfd8:	bl	18e7c <_start@@Base+0x3df0>
   1cfdc:	cmp	r4, r0
   1cfe0:	mov	r9, r0
   1cfe4:	beq	1f64c <_start@@Base+0xa5c0>
   1cfe8:	mov	r3, #0
   1cfec:	mov	r1, #3
   1cff0:	ldr	r0, [fp]
   1cff4:	str	r3, [sp, #92]	; 0x5c
   1cff8:	bl	27fa8 <flatcc_builder_start_table@@Base>
   1cffc:	cmp	r0, #0
   1d000:	bne	1d298 <_start@@Base+0x820c>
   1d004:	mov	r1, r9
   1d008:	add	r3, sp, #108	; 0x6c
   1d00c:	mov	r2, sl
   1d010:	mov	r0, fp
   1d014:	bl	17c44 <_start@@Base+0x2bb8>
   1d018:	ldr	r3, [sp, #108]	; 0x6c
   1d01c:	cmp	r3, #0
   1d020:	mov	r9, r0
   1d024:	beq	1e67c <_start@@Base+0x95f0>
   1d028:	add	r7, pc, #944	; 0x3b0
   1d02c:	ldrd	r6, [r7]
   1d030:	mov	r8, #6
   1d034:	b	1d094 <_start@@Base+0x8008>
   1d038:	add	r3, pc, #936	; 0x3a8
   1d03c:	ldrd	r2, [r3]
   1d040:	mov	r0, #0
   1d044:	cmp	r1, r3
   1d048:	cmpeq	r0, r2
   1d04c:	bne	1d05c <_start@@Base+0x7fd0>
   1d050:	sub	r3, sl, r9
   1d054:	cmp	r3, #4
   1d058:	bgt	1d720 <_start@@Base+0x8694>
   1d05c:	mov	r1, r9
   1d060:	mov	r2, sl
   1d064:	mov	r0, fp
   1d068:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1d06c:	mov	r9, r0
   1d070:	mov	r1, r9
   1d074:	add	r3, sp, #108	; 0x6c
   1d078:	mov	r2, sl
   1d07c:	mov	r0, fp
   1d080:	bl	19abc <_start@@Base+0x4a30>
   1d084:	ldr	r3, [sp, #108]	; 0x6c
   1d088:	cmp	r3, #0
   1d08c:	mov	r9, r0
   1d090:	beq	1e67c <_start@@Base+0x95f0>
   1d094:	cmp	sl, r9
   1d098:	beq	1d0c4 <_start@@Base+0x8038>
   1d09c:	ldrb	r3, [r9]
   1d0a0:	cmp	r3, #34	; 0x22
   1d0a4:	addeq	r9, r9, #1
   1d0a8:	beq	1d0c4 <_start@@Base+0x8038>
   1d0ac:	mov	r1, r9
   1d0b0:	mov	r3, #5
   1d0b4:	mov	r2, sl
   1d0b8:	mov	r0, fp
   1d0bc:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1d0c0:	mov	r9, r0
   1d0c4:	mov	r1, sl
   1d0c8:	mov	r0, r9
   1d0cc:	bl	151b8 <_start@@Base+0x12c>
   1d0d0:	cmp	r1, r7
   1d0d4:	cmpeq	r0, r6
   1d0d8:	bls	1d038 <_start@@Base+0x7fac>
   1d0dc:	add	r5, pc, #780	; 0x30c
   1d0e0:	ldrd	r4, [r5]
   1d0e4:	bic	r2, r0, #255	; 0xff
   1d0e8:	cmp	r1, r5
   1d0ec:	cmpeq	r2, r4
   1d0f0:	beq	1d230 <_start@@Base+0x81a4>
   1d0f4:	ldr	r2, [pc, #780]	; 1d408 <_start@@Base+0x837c>
   1d0f8:	mvn	r3, #0
   1d0fc:	and	r2, r2, r0
   1d100:	and	r3, r3, r1
   1d104:	mov	r0, r2
   1d108:	mov	r1, r3
   1d10c:	add	r3, pc, #740	; 0x2e4
   1d110:	ldrd	r2, [r3]
   1d114:	cmp	r1, r3
   1d118:	cmpeq	r0, r2
   1d11c:	bne	1d05c <_start@@Base+0x7fd0>
   1d120:	sub	r3, sl, r9
   1d124:	cmp	r3, #6
   1d128:	ble	1d05c <_start@@Base+0x7fd0>
   1d12c:	mov	r1, r9
   1d130:	mov	r3, r8
   1d134:	mov	r2, sl
   1d138:	mov	r0, fp
   1d13c:	bl	18e7c <_start@@Base+0x3df0>
   1d140:	cmp	r9, r0
   1d144:	mov	r1, r0
   1d148:	beq	1d05c <_start@@Base+0x7fd0>
   1d14c:	mov	r3, #0
   1d150:	str	r3, [sp]
   1d154:	mov	r2, sl
   1d158:	add	r3, sp, #112	; 0x70
   1d15c:	mov	r0, fp
   1d160:	bl	31dd0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1d164:	ldr	r3, [sp, #112]	; 0x70
   1d168:	cmp	r3, #0
   1d16c:	mov	r9, r0
   1d170:	beq	1d298 <_start@@Base+0x820c>
   1d174:	mov	r1, #2
   1d178:	ldr	r0, [fp]
   1d17c:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1d180:	cmp	r0, #0
   1d184:	beq	1d298 <_start@@Base+0x820c>
   1d188:	ldr	r3, [sp, #112]	; 0x70
   1d18c:	str	r3, [r0]
   1d190:	b	1d070 <_start@@Base+0x7fe4>
   1d194:	sub	r3, sl, r9
   1d198:	cmp	r3, #3
   1d19c:	ble	1c920 <_start@@Base+0x7894>
   1d1a0:	mov	r3, #3
   1d1a4:	mov	r2, sl
   1d1a8:	mov	r1, r9
   1d1ac:	mov	r0, fp
   1d1b0:	bl	18e7c <_start@@Base+0x3df0>
   1d1b4:	cmp	r9, r0
   1d1b8:	mov	r5, r0
   1d1bc:	beq	1c920 <_start@@Base+0x7894>
   1d1c0:	mov	r0, #0
   1d1c4:	mov	r1, #0
   1d1c8:	add	r4, sp, #120	; 0x78
   1d1cc:	mov	r2, sl
   1d1d0:	strd	r0, [r4, #-8]!
   1d1d4:	mov	r1, r5
   1d1d8:	mov	r3, r4
   1d1dc:	mov	r0, fp
   1d1e0:	bl	170fc <_start@@Base+0x2070>
   1d1e4:	cmp	r5, r0
   1d1e8:	mov	r9, r0
   1d1ec:	beq	1ef1c <_start@@Base+0x9e90>
   1d1f0:	ldrd	r2, [sp, #112]	; 0x70
   1d1f4:	orrs	r3, r2, r3
   1d1f8:	bne	1d208 <_start@@Base+0x817c>
   1d1fc:	ldr	r3, [fp, #8]
   1d200:	tst	r3, #2
   1d204:	beq	1c934 <_start@@Base+0x78a8>
   1d208:	mov	r3, #8
   1d20c:	mov	r2, r3
   1d210:	mov	r1, #1
   1d214:	ldr	r0, [fp]
   1d218:	bl	2a114 <flatcc_builder_table_add@@Base>
   1d21c:	cmp	r0, #0
   1d220:	beq	1db64 <_start@@Base+0x8ad8>
   1d224:	ldrd	r2, [sp, #112]	; 0x70
   1d228:	strd	r2, [r0]
   1d22c:	b	1c934 <_start@@Base+0x78a8>
   1d230:	sub	r3, sl, r9
   1d234:	cmp	r3, #7
   1d238:	ble	1d05c <_start@@Base+0x7fd0>
   1d23c:	mov	r1, r9
   1d240:	mov	r3, #7
   1d244:	mov	r2, sl
   1d248:	mov	r0, fp
   1d24c:	bl	18e7c <_start@@Base+0x3df0>
   1d250:	cmp	r9, r0
   1d254:	mov	r1, r0
   1d258:	beq	1d05c <_start@@Base+0x7fd0>
   1d25c:	mov	r4, #1
   1d260:	add	r3, sp, #112	; 0x70
   1d264:	str	r4, [sp]
   1d268:	mov	r2, sl
   1d26c:	mov	r0, fp
   1d270:	bl	31dd0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1d274:	ldr	r3, [sp, #112]	; 0x70
   1d278:	cmp	r3, #0
   1d27c:	mov	r9, r0
   1d280:	beq	1d298 <_start@@Base+0x820c>
   1d284:	mov	r1, r4
   1d288:	ldr	r0, [fp]
   1d28c:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1d290:	cmp	r0, #0
   1d294:	bne	1d188 <_start@@Base+0x80fc>
   1d298:	mov	r1, r9
   1d29c:	mov	r3, #33	; 0x21
   1d2a0:	mov	r2, sl
   1d2a4:	mov	r0, fp
   1d2a8:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1d2ac:	ldr	r3, [sp, #92]	; 0x5c
   1d2b0:	cmp	r3, #0
   1d2b4:	mov	r9, r0
   1d2b8:	beq	1ba54 <_start@@Base+0x69c8>
   1d2bc:	mov	r1, #35	; 0x23
   1d2c0:	ldr	r0, [fp]
   1d2c4:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1d2c8:	cmp	r0, #0
   1d2cc:	beq	1ba54 <_start@@Base+0x69c8>
   1d2d0:	ldr	r3, [sp, #92]	; 0x5c
   1d2d4:	str	r3, [r0]
   1d2d8:	b	1bee0 <_start@@Base+0x6e54>
   1d2dc:	ldr	r0, [fp]
   1d2e0:	bl	28ce8 <flatcc_builder_end_vector@@Base>
   1d2e4:	cmp	r0, #0
   1d2e8:	str	r0, [sp, #92]	; 0x5c
   1d2ec:	beq	1ba54 <_start@@Base+0x69c8>
   1d2f0:	mov	r1, #9
   1d2f4:	ldr	r0, [fp]
   1d2f8:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1d2fc:	cmp	r0, #0
   1d300:	beq	1ba54 <_start@@Base+0x69c8>
   1d304:	ldr	r3, [sp, #92]	; 0x5c
   1d308:	str	r3, [r0]
   1d30c:	b	1bee0 <_start@@Base+0x6e54>
   1d310:	mov	r3, r8
   1d314:	mov	r2, sl
   1d318:	mov	r1, r9
   1d31c:	mov	r0, fp
   1d320:	bl	18e7c <_start@@Base+0x3df0>
   1d324:	cmp	r9, r0
   1d328:	mov	r4, r0
   1d32c:	beq	1c920 <_start@@Base+0x7894>
   1d330:	mov	r0, #0
   1d334:	mov	r1, #0
   1d338:	mov	r3, #0
   1d33c:	cmp	sl, r4
   1d340:	strd	r0, [sp, #112]	; 0x70
   1d344:	strh	r3, [sp, #86]	; 0x56
   1d348:	str	r3, [sp, #108]	; 0x6c
   1d34c:	beq	1e374 <_start@@Base+0x92e8>
   1d350:	add	r3, sp, #112	; 0x70
   1d354:	str	r3, [sp]
   1d358:	mov	r2, sl
   1d35c:	add	r3, sp, #108	; 0x6c
   1d360:	mov	r1, r4
   1d364:	mov	r0, fp
   1d368:	bl	31c94 <flatcc_json_parser_integer@@Base>
   1d36c:	cmp	r4, r0
   1d370:	mov	r9, r0
   1d374:	beq	1e370 <_start@@Base+0x92e4>
   1d378:	ldr	r3, [sp, #108]	; 0x6c
   1d37c:	cmp	r3, #0
   1d380:	bne	1e484 <_start@@Base+0x93f8>
   1d384:	ldrd	r2, [sp, #112]	; 0x70
   1d388:	ldr	r0, [pc, #112]	; 1d400 <_start@@Base+0x8374>
   1d38c:	mov	r1, #0
   1d390:	cmp	r3, r1
   1d394:	cmpeq	r2, r0
   1d398:	uxthls	r2, r2
   1d39c:	strhls	r2, [sp, #86]	; 0x56
   1d3a0:	bhi	1e5dc <_start@@Base+0x9550>
   1d3a4:	cmp	r2, #0
   1d3a8:	bne	1d3b8 <_start@@Base+0x832c>
   1d3ac:	ldr	r3, [fp, #8]
   1d3b0:	tst	r3, #2
   1d3b4:	beq	1c934 <_start@@Base+0x78a8>
   1d3b8:	mov	r2, #2
   1d3bc:	mov	r1, r2
   1d3c0:	mov	r3, r2
   1d3c4:	ldr	r0, [fp]
   1d3c8:	bl	2a114 <flatcc_builder_table_add@@Base>
   1d3cc:	cmp	r0, #0
   1d3d0:	beq	1db64 <_start@@Base+0x8ad8>
   1d3d4:	ldrh	r3, [sp, #86]	; 0x56
   1d3d8:	strh	r3, [r0]
   1d3dc:	b	1c934 <_start@@Base+0x78a8>
   1d3e0:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1d3e4:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1d3e8:	andeq	r0, r0, r0
   1d3ec:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   1d3f0:	cmnvs	r4, r0, lsl #2
   1d3f4:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   1d3f8:	strbvs	r0, [r4, #-0]!
   1d3fc:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1d400:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1d404:	andeq	r7, r5, ip, lsl #3
   1d408:			; <UNDEFINED> instruction: 0xffff0000
   1d40c:	ldrvs	r0, [r2, -r0]!
   1d410:	andeq	r1, r4, ip, asr ip
   1d414:	andeq	r1, r4, r4, ror #24
   1d418:	andeq	r7, r5, ip, lsl #2
   1d41c:	andeq	r7, r5, r4, lsr #2
   1d420:	muleq	r2, r8, r0
   1d424:	andeq	r7, r5, r0, ror r1
   1d428:	mov	r1, r9
   1d42c:	mov	r3, #5
   1d430:	mov	r2, sl
   1d434:	mov	r0, fp
   1d438:	bl	18e7c <_start@@Base+0x3df0>
   1d43c:	cmp	r0, r9
   1d440:	mov	r1, r0
   1d444:	beq	1c360 <_start@@Base+0x72d4>
   1d448:	add	r3, sp, #92	; 0x5c
   1d44c:	mov	r2, sl
   1d450:	mov	r0, fp
   1d454:	bl	1b7e0 <_start@@Base+0x6754>
   1d458:	ldr	r3, [sp, #92]	; 0x5c
   1d45c:	cmp	r3, #0
   1d460:	mov	r9, r0
   1d464:	beq	1ba54 <_start@@Base+0x69c8>
   1d468:	mov	r1, #12
   1d46c:	ldr	r0, [fp]
   1d470:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1d474:	cmp	r0, #0
   1d478:	beq	1ba54 <_start@@Base+0x69c8>
   1d47c:	ldr	r3, [sp, #92]	; 0x5c
   1d480:	str	r3, [r0]
   1d484:	b	1bee0 <_start@@Base+0x6e54>
   1d488:	sub	r3, sl, r4
   1d48c:	cmp	r3, #8
   1d490:	ble	1c6cc <_start@@Base+0x7640>
   1d494:	mov	r3, #8
   1d498:	mov	r2, sl
   1d49c:	mov	r1, r4
   1d4a0:	mov	r0, fp
   1d4a4:	bl	18e7c <_start@@Base+0x3df0>
   1d4a8:	cmp	r4, r0
   1d4ac:	mov	r9, r0
   1d4b0:	beq	1c6c8 <_start@@Base+0x763c>
   1d4b4:	mov	r2, #1
   1d4b8:	mov	r1, r2
   1d4bc:	mvn	r3, #0
   1d4c0:	ldr	r0, [fp]
   1d4c4:	bl	27808 <flatcc_builder_start_vector@@Base>
   1d4c8:	subs	r5, r0, #0
   1d4cc:	bne	1ba54 <_start@@Base+0x69c8>
   1d4d0:	mov	r1, r9
   1d4d4:	add	r3, sp, #88	; 0x58
   1d4d8:	mov	r2, sl
   1d4dc:	mov	r0, fp
   1d4e0:	bl	18dc8 <_start@@Base+0x3d3c>
   1d4e4:	ldr	r3, [sp, #88]	; 0x58
   1d4e8:	cmp	r3, #0
   1d4ec:	mov	r9, r0
   1d4f0:	beq	1e504 <_start@@Base+0x9478>
   1d4f4:	ldr	r7, [pc, #-232]	; 1d414 <_start@@Base+0x8388>
   1d4f8:	mov	r6, #1
   1d4fc:	b	1d554 <_start@@Base+0x84c8>
   1d500:	add	r3, sp, #112	; 0x70
   1d504:	mov	r1, r9
   1d508:	mov	r2, sl
   1d50c:	mov	r0, fp
   1d510:	bl	175c8 <_start@@Base+0x253c>
   1d514:	ldrb	r3, [sp, #112]	; 0x70
   1d518:	adds	r3, r3, #0
   1d51c:	movne	r3, #1
   1d520:	strb	r3, [sp, #108]	; 0x6c
   1d524:	mov	r1, r0
   1d528:	cmp	r1, r9
   1d52c:	beq	1d5d0 <_start@@Base+0x8544>
   1d530:	strb	r3, [r4]
   1d534:	mov	r2, sl
   1d538:	add	r3, sp, #88	; 0x58
   1d53c:	mov	r0, fp
   1d540:	bl	19938 <_start@@Base+0x48ac>
   1d544:	ldr	r3, [sp, #88]	; 0x58
   1d548:	cmp	r3, #0
   1d54c:	mov	r9, r0
   1d550:	beq	1e504 <_start@@Base+0x9478>
   1d554:	mov	r1, r6
   1d558:	ldr	r0, [fp]
   1d55c:	strb	r5, [sp, #108]	; 0x6c
   1d560:	bl	26c9c <flatcc_builder_extend_vector@@Base>
   1d564:	subs	r4, r0, #0
   1d568:	beq	1ba54 <_start@@Base+0x69c8>
   1d56c:	sub	r8, sl, r9
   1d570:	cmp	r8, #3
   1d574:	ble	1d500 <_start@@Base+0x8474>
   1d578:	mov	r2, #4
   1d57c:	ldr	r1, [pc, #-372]	; 1d410 <_start@@Base+0x8384>
   1d580:	mov	r0, r9
   1d584:	bl	14558 <memcmp@plt>
   1d588:	cmp	r0, #0
   1d58c:	beq	1d5c0 <_start@@Base+0x8534>
   1d590:	cmp	r8, #4
   1d594:	beq	1d500 <_start@@Base+0x8474>
   1d598:	mov	r2, #5
   1d59c:	mov	r1, r7
   1d5a0:	mov	r0, r9
   1d5a4:	bl	14558 <memcmp@plt>
   1d5a8:	cmp	r0, #0
   1d5ac:	bne	1d500 <_start@@Base+0x8474>
   1d5b0:	strb	r0, [sp, #108]	; 0x6c
   1d5b4:	add	r1, r9, #5
   1d5b8:	mov	r3, r5
   1d5bc:	b	1d528 <_start@@Base+0x849c>
   1d5c0:	strb	r6, [sp, #108]	; 0x6c
   1d5c4:	add	r1, r9, #4
   1d5c8:	mov	r3, #1
   1d5cc:	b	1d528 <_start@@Base+0x849c>
   1d5d0:	add	r3, sp, #108	; 0x6c
   1d5d4:	str	r3, [sp]
   1d5d8:	mov	r2, sl
   1d5dc:	ldr	r3, [pc, #-480]	; 1d404 <_start@@Base+0x8378>
   1d5e0:	mov	r0, fp
   1d5e4:	bl	17ff4 <_start@@Base+0x2f68>
   1d5e8:	cmp	sl, r0
   1d5ec:	cmpne	r0, r9
   1d5f0:	mov	r1, r0
   1d5f4:	beq	1f498 <_start@@Base+0xa40c>
   1d5f8:	ldrb	r3, [sp, #108]	; 0x6c
   1d5fc:	b	1d530 <_start@@Base+0x84a4>
   1d600:	add	r4, r9, #16
   1d604:	mov	r0, r4
   1d608:	mov	r1, sl
   1d60c:	bl	151b8 <_start@@Base+0x12c>
   1d610:	ldr	r3, [pc, #-528]	; 1d408 <_start@@Base+0x837c>
   1d614:	mov	r2, #0
   1d618:	and	r3, r3, r1
   1d61c:	mov	r7, r1
   1d620:	ldr	r1, [pc, #-540]	; 1d40c <_start@@Base+0x8380>
   1d624:	and	r2, r2, r0
   1d628:	cmp	r3, r1
   1d62c:	mov	r0, #0
   1d630:	cmpeq	r2, r0
   1d634:	beq	1e658 <_start@@Base+0x95cc>
   1d638:	and	r7, r7, #-16777216	; 0xff000000
   1d63c:	mov	r6, #0
   1d640:	cmp	r7, #1728053248	; 0x67000000
   1d644:	cmpeq	r6, #0
   1d648:	bne	1e4d4 <_start@@Base+0x9448>
   1d64c:	sub	r3, sl, r4
   1d650:	cmp	r3, #1
   1d654:	ble	1f3e4 <_start@@Base+0xa358>
   1d658:	mov	r3, #1
   1d65c:	mov	r2, sl
   1d660:	mov	r1, r4
   1d664:	mov	r0, fp
   1d668:	bl	18e7c <_start@@Base+0x3df0>
   1d66c:	cmp	r4, r0
   1d670:	mov	r9, r0
   1d674:	beq	1f3e0 <_start@@Base+0xa354>
   1d678:	ldr	r0, [fp]
   1d67c:	bl	27960 <flatcc_builder_start_offset_vector@@Base>
   1d680:	cmp	r0, #0
   1d684:	bne	1ba54 <_start@@Base+0x69c8>
   1d688:	mov	r1, r9
   1d68c:	add	r3, sp, #88	; 0x58
   1d690:	mov	r2, sl
   1d694:	mov	r0, fp
   1d698:	bl	18dc8 <_start@@Base+0x3d3c>
   1d69c:	ldr	r3, [sp, #88]	; 0x58
   1d6a0:	cmp	r3, #0
   1d6a4:	mov	r9, r0
   1d6a8:	beq	1f008 <_start@@Base+0x9f7c>
   1d6ac:	add	r4, sp, #92	; 0x5c
   1d6b0:	mov	r5, #1
   1d6b4:	b	1d6f4 <_start@@Base+0x8668>
   1d6b8:	ldr	r0, [fp]
   1d6bc:	bl	26fc4 <flatcc_builder_extend_offset_vector@@Base>
   1d6c0:	add	r3, sp, #88	; 0x58
   1d6c4:	mov	r2, sl
   1d6c8:	mov	r1, r9
   1d6cc:	subs	ip, r0, #0
   1d6d0:	mov	r0, fp
   1d6d4:	beq	1ba54 <_start@@Base+0x69c8>
   1d6d8:	ldr	lr, [sp, #92]	; 0x5c
   1d6dc:	str	lr, [ip]
   1d6e0:	bl	19938 <_start@@Base+0x48ac>
   1d6e4:	ldr	r3, [sp, #88]	; 0x58
   1d6e8:	cmp	r3, #0
   1d6ec:	mov	r9, r0
   1d6f0:	beq	1f008 <_start@@Base+0x9f7c>
   1d6f4:	mov	r1, r9
   1d6f8:	mov	r3, r4
   1d6fc:	mov	r2, sl
   1d700:	mov	r0, fp
   1d704:	bl	32270 <flatcc_json_parser_build_string@@Base>
   1d708:	ldr	r3, [sp, #92]	; 0x5c
   1d70c:	mov	r1, r5
   1d710:	cmp	r3, #0
   1d714:	mov	r9, r0
   1d718:	bne	1d6b8 <_start@@Base+0x862c>
   1d71c:	b	1ba54 <_start@@Base+0x69c8>
   1d720:	mov	r1, r9
   1d724:	mov	r3, #4
   1d728:	mov	r2, sl
   1d72c:	mov	r0, fp
   1d730:	bl	18e7c <_start@@Base+0x3df0>
   1d734:	cmp	r9, r0
   1d738:	mov	r1, r0
   1d73c:	beq	1d05c <_start@@Base+0x7fd0>
   1d740:	mov	r4, #0
   1d744:	add	r3, sp, #112	; 0x70
   1d748:	str	r4, [sp]
   1d74c:	mov	r2, sl
   1d750:	mov	r0, fp
   1d754:	bl	31dd0 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1d758:	ldr	r3, [sp, #112]	; 0x70
   1d75c:	cmp	r3, r4
   1d760:	mov	r9, r0
   1d764:	bne	1d284 <_start@@Base+0x81f8>
   1d768:	b	1d298 <_start@@Base+0x820c>
   1d76c:	mov	r3, #8
   1d770:	mov	r2, sl
   1d774:	mov	r1, r9
   1d778:	mov	r0, fp
   1d77c:	bl	18e7c <_start@@Base+0x3df0>
   1d780:	cmp	r9, r0
   1d784:	mov	r4, r0
   1d788:	beq	1c1c4 <_start@@Base+0x7138>
   1d78c:	sub	r5, sl, r0
   1d790:	mov	r3, #0
   1d794:	cmp	r5, #3
   1d798:	strb	r3, [sp, #104]	; 0x68
   1d79c:	ble	1d7d8 <_start@@Base+0x874c>
   1d7a0:	mov	r2, #4
   1d7a4:	ldr	r1, [pc, #-924]	; 1d410 <_start@@Base+0x8384>
   1d7a8:	bl	14558 <memcmp@plt>
   1d7ac:	cmp	r0, #0
   1d7b0:	beq	1e360 <_start@@Base+0x92d4>
   1d7b4:	cmp	r5, #4
   1d7b8:	beq	1d7d8 <_start@@Base+0x874c>
   1d7bc:	mov	r2, #5
   1d7c0:	ldr	r1, [pc, #-948]	; 1d414 <_start@@Base+0x8388>
   1d7c4:	mov	r0, r4
   1d7c8:	bl	14558 <memcmp@plt>
   1d7cc:	cmp	r0, #0
   1d7d0:	addeq	r9, r4, #5
   1d7d4:	beq	1d85c <_start@@Base+0x87d0>
   1d7d8:	mov	r0, #0
   1d7dc:	mov	r1, #0
   1d7e0:	mov	r3, #0
   1d7e4:	cmp	sl, r4
   1d7e8:	strd	r0, [sp, #112]	; 0x70
   1d7ec:	str	r3, [sp, #108]	; 0x6c
   1d7f0:	beq	1e30c <_start@@Base+0x9280>
   1d7f4:	add	r3, sp, #112	; 0x70
   1d7f8:	str	r3, [sp]
   1d7fc:	mov	r2, sl
   1d800:	add	r3, sp, #108	; 0x6c
   1d804:	mov	r1, r4
   1d808:	mov	r0, fp
   1d80c:	bl	31c94 <flatcc_json_parser_integer@@Base>
   1d810:	cmp	r4, r0
   1d814:	mov	r9, r0
   1d818:	beq	1e30c <_start@@Base+0x9280>
   1d81c:	ldr	r3, [sp, #108]	; 0x6c
   1d820:	cmp	r3, #0
   1d824:	bne	1e970 <_start@@Base+0x98e4>
   1d828:	ldrd	r2, [sp, #112]	; 0x70
   1d82c:	cmp	r3, #0
   1d830:	cmpeq	r2, #255	; 0xff
   1d834:	bhi	1ee04 <_start@@Base+0x9d78>
   1d838:	tst	r2, #255	; 0xff
   1d83c:	movne	r3, #1
   1d840:	moveq	r3, #0
   1d844:	strb	r3, [sp, #104]	; 0x68
   1d848:	cmp	r3, #1
   1d84c:	bne	1d85c <_start@@Base+0x87d0>
   1d850:	ldr	r3, [fp, #8]
   1d854:	tst	r3, #2
   1d858:	beq	1bee0 <_start@@Base+0x6e54>
   1d85c:	mov	r3, #1
   1d860:	mov	r2, r3
   1d864:	mov	r1, #15
   1d868:	ldr	r0, [fp]
   1d86c:	bl	2a114 <flatcc_builder_table_add@@Base>
   1d870:	cmp	r0, #0
   1d874:	beq	1ba54 <_start@@Base+0x69c8>
   1d878:	ldrb	r3, [sp, #104]	; 0x68
   1d87c:	strb	r3, [r0]
   1d880:	b	1bee0 <_start@@Base+0x6e54>
   1d884:	mov	r1, r9
   1d888:	mov	r3, #4
   1d88c:	mov	r2, sl
   1d890:	mov	r0, fp
   1d894:	bl	18e7c <_start@@Base+0x3df0>
   1d898:	cmp	r9, r0
   1d89c:	mov	r1, r0
   1d8a0:	beq	1c250 <_start@@Base+0x71c4>
   1d8a4:	add	r3, sp, #92	; 0x5c
   1d8a8:	mov	r2, sl
   1d8ac:	mov	r0, fp
   1d8b0:	bl	32270 <flatcc_json_parser_build_string@@Base>
   1d8b4:	ldr	r3, [sp, #92]	; 0x5c
   1d8b8:	cmp	r3, #0
   1d8bc:	mov	r9, r0
   1d8c0:	beq	1ba54 <_start@@Base+0x69c8>
   1d8c4:	mov	r1, #3
   1d8c8:	ldr	r0, [fp]
   1d8cc:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1d8d0:	cmp	r0, #0
   1d8d4:	beq	1ba54 <_start@@Base+0x69c8>
   1d8d8:	ldr	r3, [sp, #92]	; 0x5c
   1d8dc:	str	r3, [r0]
   1d8e0:	b	1bee0 <_start@@Base+0x6e54>
   1d8e4:	mov	r3, #4
   1d8e8:	mov	r2, sl
   1d8ec:	mov	r1, r9
   1d8f0:	mov	r0, fp
   1d8f4:	bl	18e7c <_start@@Base+0x3df0>
   1d8f8:	cmp	r0, r9
   1d8fc:	mov	r4, r0
   1d900:	beq	1c22c <_start@@Base+0x71a0>
   1d904:	mov	r2, #1
   1d908:	mov	r1, r2
   1d90c:	mvn	r3, #0
   1d910:	ldr	r0, [fp]
   1d914:	bl	27808 <flatcc_builder_start_vector@@Base>
   1d918:	subs	r6, r0, #0
   1d91c:	bne	1f3d8 <_start@@Base+0xa34c>
   1d920:	add	r3, sp, #88	; 0x58
   1d924:	mov	r1, r4
   1d928:	mov	r2, sl
   1d92c:	mov	r0, fp
   1d930:	bl	18dc8 <_start@@Base+0x3d3c>
   1d934:	ldr	r3, [sp, #88]	; 0x58
   1d938:	cmp	r3, #0
   1d93c:	mov	r9, r0
   1d940:	beq	1d9e0 <_start@@Base+0x8954>
   1d944:	ldr	r8, [pc, #-1332]	; 1d418 <_start@@Base+0x838c>
   1d948:	mov	r7, #1
   1d94c:	add	r5, sp, #112	; 0x70
   1d950:	b	1d980 <_start@@Base+0x88f4>
   1d954:	ldrb	r2, [sp, #112]	; 0x70
   1d958:	mov	r1, r0
   1d95c:	add	r3, sp, #88	; 0x58
   1d960:	strb	r2, [r4]
   1d964:	mov	r0, fp
   1d968:	mov	r2, sl
   1d96c:	bl	19938 <_start@@Base+0x48ac>
   1d970:	ldr	r3, [sp, #88]	; 0x58
   1d974:	cmp	r3, #0
   1d978:	mov	r9, r0
   1d97c:	beq	1d9e0 <_start@@Base+0x8954>
   1d980:	mov	r1, r7
   1d984:	ldr	r0, [fp]
   1d988:	strb	r6, [sp, #112]	; 0x70
   1d98c:	bl	26c9c <flatcc_builder_extend_vector@@Base>
   1d990:	mov	r1, r9
   1d994:	mov	r3, r5
   1d998:	mov	r2, sl
   1d99c:	subs	r4, r0, #0
   1d9a0:	mov	r0, fp
   1d9a4:	beq	1ba54 <_start@@Base+0x69c8>
   1d9a8:	bl	175c8 <_start@@Base+0x253c>
   1d9ac:	cmp	r0, r9
   1d9b0:	bne	1d954 <_start@@Base+0x88c8>
   1d9b4:	str	r5, [sp]
   1d9b8:	mov	r3, r8
   1d9bc:	mov	r2, sl
   1d9c0:	mov	r1, r9
   1d9c4:	mov	r0, fp
   1d9c8:	bl	1834c <_start@@Base+0x32c0>
   1d9cc:	cmp	sl, r0
   1d9d0:	cmpne	r0, r9
   1d9d4:	bne	1d954 <_start@@Base+0x88c8>
   1d9d8:	mov	r9, r0
   1d9dc:	b	1ba54 <_start@@Base+0x69c8>
   1d9e0:	ldr	r0, [fp]
   1d9e4:	bl	28ce8 <flatcc_builder_end_vector@@Base>
   1d9e8:	cmp	r0, #0
   1d9ec:	str	r0, [sp, #92]	; 0x5c
   1d9f0:	beq	1ba54 <_start@@Base+0x69c8>
   1d9f4:	mov	r1, #30
   1d9f8:	ldr	r0, [fp]
   1d9fc:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1da00:	cmp	r0, #0
   1da04:	beq	1ba54 <_start@@Base+0x69c8>
   1da08:	ldr	r3, [sp, #92]	; 0x5c
   1da0c:	str	r3, [r0]
   1da10:	b	1bee0 <_start@@Base+0x6e54>
   1da14:	add	r4, r9, #8
   1da18:	mov	r0, r4
   1da1c:	mov	r1, sl
   1da20:	bl	151b8 <_start@@Base+0x12c>
   1da24:	mov	r0, #0
   1da28:	and	r1, r1, #-16777216	; 0xff000000
   1da2c:	cmp	r1, #2030043136	; 0x79000000
   1da30:	cmpeq	r0, #0
   1da34:	bne	1e43c <_start@@Base+0x93b0>
   1da38:	sub	r3, sl, r4
   1da3c:	cmp	r3, #1
   1da40:	ble	1f3c0 <_start@@Base+0xa334>
   1da44:	mov	r3, #1
   1da48:	mov	r2, sl
   1da4c:	mov	r1, r4
   1da50:	mov	r0, fp
   1da54:	bl	18e7c <_start@@Base+0x3df0>
   1da58:	cmp	r4, r0
   1da5c:	mov	r9, r0
   1da60:	beq	1f3bc <_start@@Base+0xa330>
   1da64:	mov	r2, #1
   1da68:	mov	r1, r2
   1da6c:	mvn	r3, #0
   1da70:	ldr	r0, [fp]
   1da74:	bl	27808 <flatcc_builder_start_vector@@Base>
   1da78:	cmp	r0, #0
   1da7c:	bne	1ba54 <_start@@Base+0x69c8>
   1da80:	mov	r1, r9
   1da84:	add	r3, sp, #88	; 0x58
   1da88:	mov	r2, sl
   1da8c:	mov	r0, fp
   1da90:	bl	18dc8 <_start@@Base+0x3d3c>
   1da94:	ldr	r3, [sp, #88]	; 0x58
   1da98:	cmp	r3, #0
   1da9c:	mov	r9, r0
   1daa0:	beq	1ecd8 <_start@@Base+0x9c4c>
   1daa4:	ldr	r8, [pc, #-1680]	; 1d41c <_start@@Base+0x8390>
   1daa8:	mov	r7, #0
   1daac:	mov	r6, #1
   1dab0:	add	r5, sp, #112	; 0x70
   1dab4:	b	1dae4 <_start@@Base+0x8a58>
   1dab8:	ldrb	r2, [sp, #112]	; 0x70
   1dabc:	mov	r1, r0
   1dac0:	add	r3, sp, #88	; 0x58
   1dac4:	strb	r2, [r4]
   1dac8:	mov	r0, fp
   1dacc:	mov	r2, sl
   1dad0:	bl	19938 <_start@@Base+0x48ac>
   1dad4:	ldr	r3, [sp, #88]	; 0x58
   1dad8:	cmp	r3, #0
   1dadc:	mov	r9, r0
   1dae0:	beq	1ecd8 <_start@@Base+0x9c4c>
   1dae4:	mov	r1, r6
   1dae8:	ldr	r0, [fp]
   1daec:	strb	r7, [sp, #112]	; 0x70
   1daf0:	bl	26c9c <flatcc_builder_extend_vector@@Base>
   1daf4:	mov	r1, r9
   1daf8:	mov	r3, r5
   1dafc:	mov	r2, sl
   1db00:	subs	r4, r0, #0
   1db04:	mov	r0, fp
   1db08:	beq	1ba54 <_start@@Base+0x69c8>
   1db0c:	bl	175c8 <_start@@Base+0x253c>
   1db10:	cmp	r0, r9
   1db14:	bne	1dab8 <_start@@Base+0x8a2c>
   1db18:	str	r5, [sp]
   1db1c:	mov	r3, r8
   1db20:	mov	r2, sl
   1db24:	mov	r1, r9
   1db28:	mov	r0, fp
   1db2c:	bl	1834c <_start@@Base+0x32c0>
   1db30:	cmp	sl, r0
   1db34:	cmpne	r0, r9
   1db38:	bne	1dab8 <_start@@Base+0x8a2c>
   1db3c:	mov	r9, r0
   1db40:	b	1ba54 <_start@@Base+0x69c8>
   1db44:	ldr	r3, [fp, #20]
   1db48:	cmp	r3, #0
   1db4c:	bne	1db64 <_start@@Base+0x8ad8>
   1db50:	ldr	r0, [fp]
   1db54:	bl	289e8 <flatcc_builder_end_table@@Base>
   1db58:	cmp	r0, #0
   1db5c:	str	r0, [sp, #92]	; 0x5c
   1db60:	bne	1db88 <_start@@Base+0x8afc>
   1db64:	mov	r1, r9
   1db68:	mov	r3, #33	; 0x21
   1db6c:	mov	r2, sl
   1db70:	mov	r0, fp
   1db74:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1db78:	ldr	r3, [sp, #92]	; 0x5c
   1db7c:	cmp	r3, #0
   1db80:	mov	r9, r0
   1db84:	beq	1ba54 <_start@@Base+0x69c8>
   1db88:	mov	r1, #14
   1db8c:	ldr	r0, [fp]
   1db90:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1db94:	cmp	r0, #0
   1db98:	beq	1ba54 <_start@@Base+0x69c8>
   1db9c:	ldr	r3, [sp, #92]	; 0x5c
   1dba0:	str	r3, [r0]
   1dba4:	b	1bee0 <_start@@Base+0x6e54>
   1dba8:	ldr	r0, [fp]
   1dbac:	bl	28ce8 <flatcc_builder_end_vector@@Base>
   1dbb0:	cmp	r0, #0
   1dbb4:	str	r0, [sp, #92]	; 0x5c
   1dbb8:	beq	1ba54 <_start@@Base+0x69c8>
   1dbbc:	mov	r1, #31
   1dbc0:	ldr	r0, [fp]
   1dbc4:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1dbc8:	cmp	r0, #0
   1dbcc:	beq	1ba54 <_start@@Base+0x69c8>
   1dbd0:	ldr	r3, [sp, #92]	; 0x5c
   1dbd4:	str	r3, [r0]
   1dbd8:	b	1bee0 <_start@@Base+0x6e54>
   1dbdc:	mov	r1, r9
   1dbe0:	mov	r3, #4
   1dbe4:	mov	r2, sl
   1dbe8:	mov	r0, fp
   1dbec:	bl	18e7c <_start@@Base+0x3df0>
   1dbf0:	cmp	r9, r0
   1dbf4:	mov	r1, r0
   1dbf8:	beq	1bca4 <_start@@Base+0x6c18>
   1dbfc:	ldr	r2, [sp, #96]	; 0x60
   1dc00:	ldr	ip, [pc, #-2024]	; 1d420 <_start@@Base+0x8394>
   1dc04:	mov	r3, #8
   1dc08:	str	r3, [sp]
   1dc0c:	stmib	sp, {r2, ip}
   1dc10:	mov	r3, #0
   1dc14:	mov	r2, sl
   1dc18:	mov	r0, fp
   1dc1c:	bl	32694 <flatcc_json_parser_union@@Base>
   1dc20:	mov	r9, r0
   1dc24:	b	1bee0 <_start@@Base+0x6e54>
   1dc28:	mov	r3, #3
   1dc2c:	mov	r2, sl
   1dc30:	mov	r1, r9
   1dc34:	mov	r0, fp
   1dc38:	bl	18e7c <_start@@Base+0x3df0>
   1dc3c:	cmp	r9, r0
   1dc40:	mov	r4, r0
   1dc44:	beq	1bf7c <_start@@Base+0x6ef0>
   1dc48:	mov	r3, #16
   1dc4c:	mov	r2, #32
   1dc50:	mov	r1, #0
   1dc54:	ldr	r0, [fp]
   1dc58:	bl	2a114 <flatcc_builder_table_add@@Base>
   1dc5c:	subs	r6, r0, #0
   1dc60:	beq	1f4c8 <_start@@Base+0xa43c>
   1dc64:	add	r3, sp, #104	; 0x68
   1dc68:	mov	r1, r4
   1dc6c:	mov	r2, sl
   1dc70:	mov	r0, fp
   1dc74:	bl	17c44 <_start@@Base+0x2bb8>
   1dc78:	ldr	r3, [sp, #104]	; 0x68
   1dc7c:	cmp	r3, #0
   1dc80:	mov	r9, r0
   1dc84:	beq	1bee0 <_start@@Base+0x6e54>
   1dc88:	mov	r9, r6
   1dc8c:	ldr	r8, [pc, #-2160]	; 1d424 <_start@@Base+0x8398>
   1dc90:	vldr	s18, [pc, #904]	; 1e020 <_start@@Base+0x8f94>
   1dc94:	vldr	d8, [pc, #860]	; 1dff8 <_start@@Base+0x8f6c>
   1dc98:	ldrd	r6, [sp, #40]	; 0x28
   1dc9c:	b	1dd08 <_start@@Base+0x8c7c>
   1dca0:	mvn	r1, #-2013265920	; 0x88000000
   1dca4:	mvn	r0, #0
   1dca8:	cmp	r3, r1
   1dcac:	cmpeq	r2, r0
   1dcb0:	bhi	1df74 <_start@@Base+0x8ee8>
   1dcb4:	add	r1, pc, #836	; 0x344
   1dcb8:	ldrd	r0, [r1]
   1dcbc:	and	r2, r2, #-16777216	; 0xff000000
   1dcc0:	cmp	r3, r1
   1dcc4:	cmpeq	r2, r0
   1dcc8:	bne	1dcd4 <_start@@Base+0x8c48>
   1dccc:	cmp	ip, #5
   1dcd0:	bgt	1e19c <_start@@Base+0x9110>
   1dcd4:	mov	r1, r4
   1dcd8:	mov	r2, sl
   1dcdc:	mov	r0, fp
   1dce0:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1dce4:	mov	r4, r0
   1dce8:	add	r3, sp, #104	; 0x68
   1dcec:	mov	r1, r4
   1dcf0:	mov	r2, sl
   1dcf4:	mov	r0, fp
   1dcf8:	bl	19abc <_start@@Base+0x4a30>
   1dcfc:	ldr	r3, [sp, #104]	; 0x68
   1dd00:	cmp	r3, #0
   1dd04:	beq	1e238 <_start@@Base+0x91ac>
   1dd08:	cmp	sl, r0
   1dd0c:	beq	1dfec <_start@@Base+0x8f60>
   1dd10:	ldrb	r3, [r0]
   1dd14:	cmp	r3, #34	; 0x22
   1dd18:	addeq	r4, r0, #1
   1dd1c:	beq	1dd38 <_start@@Base+0x8cac>
   1dd20:	mov	r1, r0
   1dd24:	mov	r3, #5
   1dd28:	mov	r2, sl
   1dd2c:	mov	r0, fp
   1dd30:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1dd34:	mov	r4, r0
   1dd38:	sub	ip, sl, r4
   1dd3c:	cmp	ip, #8
   1dd40:	bls	1deec <_start@@Base+0x8e60>
   1dd44:	ldrb	r2, [r4, #7]
   1dd48:	mov	r3, #0
   1dd4c:	ldrb	r0, [r4, #6]
   1dd50:	lsr	lr, r0, #24
   1dd54:	lsl	r1, r0, #8
   1dd58:	str	lr, [sp, #68]	; 0x44
   1dd5c:	str	r1, [sp, #64]	; 0x40
   1dd60:	ldrd	r0, [sp, #64]	; 0x40
   1dd64:	orr	r0, r0, r2
   1dd68:	orr	r1, r1, r3
   1dd6c:	mov	r2, r0
   1dd70:	mov	r3, r1
   1dd74:	ldrb	r0, [r4, #5]
   1dd78:	lsr	lr, r0, #16
   1dd7c:	lsl	r1, r0, #16
   1dd80:	str	lr, [sp, #60]	; 0x3c
   1dd84:	str	r1, [sp, #56]	; 0x38
   1dd88:	ldrd	r0, [sp, #56]	; 0x38
   1dd8c:	orr	r0, r0, r2
   1dd90:	orr	r1, r1, r3
   1dd94:	mov	r2, r0
   1dd98:	mov	r3, r1
   1dd9c:	ldrb	r0, [r4, #4]
   1dda0:	lsr	lr, r0, #8
   1dda4:	lsl	r1, r0, #24
   1dda8:	str	lr, [sp, #36]	; 0x24
   1ddac:	str	r1, [sp, #32]
   1ddb0:	ldrd	r0, [sp, #32]
   1ddb4:	orr	r0, r0, r2
   1ddb8:	orr	r1, r1, r3
   1ddbc:	mov	r2, r0
   1ddc0:	mov	r3, r1
   1ddc4:	ldrb	r1, [r4, #3]
   1ddc8:	str	r1, [sp, #52]	; 0x34
   1ddcc:	mov	r1, #0
   1ddd0:	str	r1, [sp, #48]	; 0x30
   1ddd4:	ldrd	r0, [sp, #48]	; 0x30
   1ddd8:	orr	r0, r0, r2
   1dddc:	orr	r1, r1, r3
   1dde0:	mov	r2, r0
   1dde4:	mov	r3, r1
   1dde8:	ldrb	r0, [r4, #2]
   1ddec:	lsl	r1, r0, #8
   1ddf0:	str	r1, [sp, #28]
   1ddf4:	mov	r1, #0
   1ddf8:	str	r1, [sp, #24]
   1ddfc:	ldrd	r0, [sp, #24]
   1de00:	orr	r0, r0, r2
   1de04:	orr	r1, r1, r3
   1de08:	mov	r2, r0
   1de0c:	mov	r3, r1
   1de10:	ldrb	r0, [r4, #1]
   1de14:	lsl	r1, r0, #16
   1de18:	str	r1, [sp, #20]
   1de1c:	mov	r1, #0
   1de20:	str	r1, [sp, #16]
   1de24:	ldrd	r0, [sp, #16]
   1de28:	orr	r0, r0, r2
   1de2c:	orr	r1, r1, r3
   1de30:	strd	r0, [sp, #40]	; 0x28
   1de34:	ldrb	r2, [r4]
   1de38:	add	r1, pc, #456	; 0x1c8
   1de3c:	ldrd	r0, [r1]
   1de40:	mov	r6, #0
   1de44:	lsl	r7, r2, #24
   1de48:	ldrd	r2, [sp, #40]	; 0x28
   1de4c:	orr	r3, r3, r7
   1de50:	orr	r2, r2, r6
   1de54:	cmp	r3, r1
   1de58:	cmpeq	r2, r0
   1de5c:	bhi	1dca0 <_start@@Base+0x8c14>
   1de60:	add	r1, pc, #424	; 0x1a8
   1de64:	ldrd	r0, [r1]
   1de68:	and	r2, r2, #-16777216	; 0xff000000
   1de6c:	cmp	r3, r1
   1de70:	cmpeq	r2, r0
   1de74:	beq	1e048 <_start@@Base+0x8fbc>
   1de78:	add	r1, pc, #408	; 0x198
   1de7c:	ldrd	r0, [r1]
   1de80:	cmp	r3, r1
   1de84:	cmpeq	r2, r0
   1de88:	bne	1dcd4 <_start@@Base+0x8c48>
   1de8c:	cmp	ip, #5
   1de90:	ble	1dcd4 <_start@@Base+0x8c48>
   1de94:	mov	r3, #5
   1de98:	mov	r2, sl
   1de9c:	mov	r1, r4
   1dea0:	mov	r0, fp
   1dea4:	bl	18e7c <_start@@Base+0x3df0>
   1dea8:	cmp	r4, r0
   1deac:	beq	1dcd4 <_start@@Base+0x8c48>
   1deb0:	add	r5, sp, #120	; 0x78
   1deb4:	str	r0, [sp, #40]	; 0x28
   1deb8:	vstmdb	r5!, {d8}
   1debc:	mov	r1, r0
   1dec0:	mov	r2, sl
   1dec4:	mov	r0, fp
   1dec8:	mov	r3, r5
   1decc:	bl	2f408 <flatcc_json_parser_double@@Base>
   1ded0:	ldr	r3, [sp, #40]	; 0x28
   1ded4:	cmp	r3, r0
   1ded8:	mov	r4, r0
   1dedc:	beq	1e260 <_start@@Base+0x91d4>
   1dee0:	ldrd	r2, [sp, #112]	; 0x70
   1dee4:	strd	r2, [r9, #16]
   1dee8:	b	1dce8 <_start@@Base+0x8c5c>
   1deec:	sub	r3, ip, #1
   1def0:	cmp	r3, #7
   1def4:	ldrls	pc, [pc, r3, lsl #2]
   1def8:	b	1dcd4 <_start@@Base+0x8c48>
   1defc:	andeq	sp, r1, r4, ror #30
   1df00:	andeq	sp, r1, r8, asr pc
   1df04:	andeq	sp, r1, ip, asr #30
   1df08:	andeq	sp, r1, r0, asr #30
   1df0c:	andeq	sp, r1, r4, lsr pc
   1df10:	andeq	sp, r1, r8, lsr #30
   1df14:	andeq	sp, r1, ip, lsl pc
   1df18:	andeq	sp, r1, r4, asr #26
   1df1c:	mov	r2, #0
   1df20:	mov	r3, #0
   1df24:	b	1dd4c <_start@@Base+0x8cc0>
   1df28:	mov	r2, #0
   1df2c:	mov	r3, #0
   1df30:	b	1dd74 <_start@@Base+0x8ce8>
   1df34:	mov	r2, #0
   1df38:	mov	r3, #0
   1df3c:	b	1dd9c <_start@@Base+0x8d10>
   1df40:	mov	r2, #0
   1df44:	mov	r3, #0
   1df48:	b	1ddc4 <_start@@Base+0x8d38>
   1df4c:	mov	r2, #0
   1df50:	mov	r3, #0
   1df54:	b	1dde8 <_start@@Base+0x8d5c>
   1df58:	mov	r2, #0
   1df5c:	mov	r3, #0
   1df60:	b	1de10 <_start@@Base+0x8d84>
   1df64:	mov	r2, #0
   1df68:	mov	r3, #0
   1df6c:	strd	r2, [sp, #40]	; 0x28
   1df70:	b	1de34 <_start@@Base+0x8da8>
   1df74:	mvn	r1, #-2030043136	; 0x87000000
   1df78:	mvn	r0, #0
   1df7c:	cmp	r3, r1
   1df80:	cmpeq	r2, r0
   1df84:	bhi	1e0e0 <_start@@Base+0x9054>
   1df88:	cmp	ip, #1
   1df8c:	ble	1dcd4 <_start@@Base+0x8c48>
   1df90:	mov	r3, #1
   1df94:	mov	r2, sl
   1df98:	mov	r1, r4
   1df9c:	mov	r0, fp
   1dfa0:	bl	18e7c <_start@@Base+0x3df0>
   1dfa4:	cmp	r4, r0
   1dfa8:	beq	1dcd4 <_start@@Base+0x8c48>
   1dfac:	vmov	r1, s18
   1dfb0:	add	r5, sp, #120	; 0x78
   1dfb4:	str	r0, [sp, #40]	; 0x28
   1dfb8:	mov	r2, sl
   1dfbc:	str	r1, [r5, #-8]!
   1dfc0:	mov	r1, r0
   1dfc4:	mov	r3, r5
   1dfc8:	mov	r0, fp
   1dfcc:	bl	2f508 <flatcc_json_parser_float@@Base>
   1dfd0:	ldr	r3, [sp, #40]	; 0x28
   1dfd4:	cmp	r3, r0
   1dfd8:	mov	r4, r0
   1dfdc:	beq	1e5f8 <_start@@Base+0x956c>
   1dfe0:	ldr	r3, [sp, #112]	; 0x70
   1dfe4:	str	r3, [r9]
   1dfe8:	b	1dce8 <_start@@Base+0x8c5c>
   1dfec:	mov	r4, sl
   1dff0:	b	1dcd4 <_start@@Base+0x8c48>
   1dff4:	nop			; (mov r0, r0)
	...
   1e000:	movwcc	r0, #0
   1e004:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e008:	rscscc	pc, pc, #1020	; 0x3fc
   1e00c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e010:	andcc	r0, r0, #0
   1e014:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e018:	mrscc	r0, (UNDEF: 0)
   1e01c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e020:	andeq	r0, r0, r0
   1e024:	andeq	r7, r5, ip, asr #2
   1e028:	andeq	r7, r5, ip, lsr r1
   1e02c:	strdeq	r7, [r5], -ip
   1e030:			; <UNDEFINED> instruction: 0x000571b0
   1e034:			; <UNDEFINED> instruction: 0x000571bc
   1e038:	andeq	r7, r5, ip, ror #3
   1e03c:	andeq	r7, r5, r8, asr r1
   1e040:	andeq	r7, r5, r0, ror r2
   1e044:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1e048:	cmp	ip, #5
   1e04c:	ble	1dcd4 <_start@@Base+0x8c48>
   1e050:	mov	r3, #5
   1e054:	mov	r2, sl
   1e058:	mov	r1, r4
   1e05c:	mov	r0, fp
   1e060:	bl	18e7c <_start@@Base+0x3df0>
   1e064:	cmp	r4, r0
   1e068:	mov	r5, r0
   1e06c:	beq	1dcd4 <_start@@Base+0x8c48>
   1e070:	mov	r2, #0
   1e074:	mov	r3, #0
   1e078:	cmp	sl, r0
   1e07c:	strb	r6, [sp, #100]	; 0x64
   1e080:	str	r6, [sp, #108]	; 0x6c
   1e084:	strd	r2, [sp, #112]	; 0x70
   1e088:	beq	1e28c <_start@@Base+0x9200>
   1e08c:	add	r3, sp, #112	; 0x70
   1e090:	str	r3, [sp]
   1e094:	mov	r1, r0
   1e098:	add	r3, sp, #108	; 0x6c
   1e09c:	mov	r2, sl
   1e0a0:	mov	r0, fp
   1e0a4:	bl	31c94 <flatcc_json_parser_integer@@Base>
   1e0a8:	cmp	r5, r0
   1e0ac:	mov	r4, r0
   1e0b0:	beq	1e28c <_start@@Base+0x9200>
   1e0b4:	ldr	r1, [sp, #108]	; 0x6c
   1e0b8:	ldrd	r2, [sp, #112]	; 0x70
   1e0bc:	cmp	r1, r6
   1e0c0:	beq	1e164 <_start@@Base+0x90d8>
   1e0c4:	cmp	r3, #0
   1e0c8:	cmpeq	r2, #128	; 0x80
   1e0cc:	rsbls	r2, r2, #0
   1e0d0:	sxtbls	r2, r2
   1e0d4:	bhi	1e244 <_start@@Base+0x91b8>
   1e0d8:	strb	r2, [r9, #24]
   1e0dc:	b	1dce8 <_start@@Base+0x8c5c>
   1e0e0:	and	r3, r3, #-16777216	; 0xff000000
   1e0e4:	mov	r2, #0
   1e0e8:	cmp	r3, #2046820352	; 0x7a000000
   1e0ec:	cmpeq	r2, #0
   1e0f0:	beq	1e1d4 <_start@@Base+0x9148>
   1e0f4:	cmp	r3, #2030043136	; 0x79000000
   1e0f8:	cmpeq	r2, #0
   1e0fc:	bne	1dcd4 <_start@@Base+0x8c48>
   1e100:	cmp	ip, #1
   1e104:	ble	1dcd4 <_start@@Base+0x8c48>
   1e108:	mov	r3, #1
   1e10c:	mov	r2, sl
   1e110:	mov	r1, r4
   1e114:	mov	r0, fp
   1e118:	bl	18e7c <_start@@Base+0x3df0>
   1e11c:	cmp	r4, r0
   1e120:	beq	1dcd4 <_start@@Base+0x8c48>
   1e124:	vmov	r1, s18
   1e128:	add	r5, sp, #120	; 0x78
   1e12c:	str	r0, [sp, #40]	; 0x28
   1e130:	mov	r2, sl
   1e134:	str	r1, [r5, #-8]!
   1e138:	mov	r1, r0
   1e13c:	mov	r3, r5
   1e140:	mov	r0, fp
   1e144:	bl	2f508 <flatcc_json_parser_float@@Base>
   1e148:	ldr	r3, [sp, #40]	; 0x28
   1e14c:	cmp	r3, r0
   1e150:	mov	r4, r0
   1e154:	beq	1e810 <_start@@Base+0x9784>
   1e158:	ldr	r3, [sp, #112]	; 0x70
   1e15c:	str	r3, [r9, #4]
   1e160:	b	1dce8 <_start@@Base+0x8c5c>
   1e164:	cmp	r3, #0
   1e168:	cmpeq	r2, #127	; 0x7f
   1e16c:	sxtbls	r2, r2
   1e170:	bls	1e0d8 <_start@@Base+0x904c>
   1e174:	mov	r1, r0
   1e178:	mov	r3, #7
   1e17c:	mov	r2, sl
   1e180:	mov	r0, fp
   1e184:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1e188:	mov	r4, r0
   1e18c:	cmp	r5, r4
   1e190:	beq	1e28c <_start@@Base+0x9200>
   1e194:	ldrsb	r2, [sp, #100]	; 0x64
   1e198:	b	1e0d8 <_start@@Base+0x904c>
   1e19c:	mov	r1, r4
   1e1a0:	mov	r3, #5
   1e1a4:	mov	r2, sl
   1e1a8:	mov	r0, fp
   1e1ac:	bl	18e7c <_start@@Base+0x3df0>
   1e1b0:	cmp	r4, r0
   1e1b4:	mov	r1, r0
   1e1b8:	beq	1dcd4 <_start@@Base+0x8c48>
   1e1bc:	add	r3, r9, #26
   1e1c0:	mov	r2, sl
   1e1c4:	mov	r0, fp
   1e1c8:	bl	1addc <_start@@Base+0x5d50>
   1e1cc:	mov	r4, r0
   1e1d0:	b	1dce8 <_start@@Base+0x8c5c>
   1e1d4:	cmp	ip, #1
   1e1d8:	ble	1dcd4 <_start@@Base+0x8c48>
   1e1dc:	mov	r3, #1
   1e1e0:	mov	r2, sl
   1e1e4:	mov	r1, r4
   1e1e8:	mov	r0, fp
   1e1ec:	bl	18e7c <_start@@Base+0x3df0>
   1e1f0:	cmp	r4, r0
   1e1f4:	beq	1dcd4 <_start@@Base+0x8c48>
   1e1f8:	vmov	r1, s18
   1e1fc:	add	r5, sp, #120	; 0x78
   1e200:	str	r0, [sp, #40]	; 0x28
   1e204:	mov	r2, sl
   1e208:	str	r1, [r5, #-8]!
   1e20c:	mov	r1, r0
   1e210:	mov	r3, r5
   1e214:	mov	r0, fp
   1e218:	bl	2f508 <flatcc_json_parser_float@@Base>
   1e21c:	ldr	r3, [sp, #40]	; 0x28
   1e220:	cmp	r3, r0
   1e224:	mov	r4, r0
   1e228:	beq	1ecac <_start@@Base+0x9c20>
   1e22c:	ldr	r3, [sp, #112]	; 0x70
   1e230:	str	r3, [r9, #8]
   1e234:	b	1dce8 <_start@@Base+0x8c5c>
   1e238:	mov	r9, r0
   1e23c:	strd	r6, [sp, #40]	; 0x28
   1e240:	b	1bee0 <_start@@Base+0x6e54>
   1e244:	mov	r1, r0
   1e248:	mov	r3, #8
   1e24c:	mov	r2, sl
   1e250:	mov	r0, fp
   1e254:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1e258:	mov	r4, r0
   1e25c:	b	1e18c <_start@@Base+0x9100>
   1e260:	mov	r1, r0
   1e264:	str	r5, [sp]
   1e268:	ldr	r3, [pc, #-588]	; 1e024 <_start@@Base+0x8f98>
   1e26c:	mov	r2, sl
   1e270:	mov	r0, fp
   1e274:	bl	17e74 <_start@@Base+0x2de8>
   1e278:	cmp	sl, r0
   1e27c:	cmpne	r4, r0
   1e280:	beq	1f594 <_start@@Base+0xa508>
   1e284:	mov	r4, r0
   1e288:	b	1dee0 <_start@@Base+0x8e54>
   1e28c:	add	r3, sp, #100	; 0x64
   1e290:	str	r3, [sp]
   1e294:	mov	r2, sl
   1e298:	ldr	r3, [pc, #-632]	; 1e028 <_start@@Base+0x8f9c>
   1e29c:	mov	r1, r5
   1e2a0:	mov	r0, fp
   1e2a4:	bl	18500 <_start@@Base+0x3474>
   1e2a8:	cmp	sl, r0
   1e2ac:	cmpne	r0, r5
   1e2b0:	mov	r4, r0
   1e2b4:	bne	1e194 <_start@@Base+0x9108>
   1e2b8:	strd	r6, [sp, #40]	; 0x28
   1e2bc:	mov	r1, r4
   1e2c0:	mov	r3, #33	; 0x21
   1e2c4:	mov	r2, sl
   1e2c8:	mov	r0, fp
   1e2cc:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1e2d0:	mov	r9, r0
   1e2d4:	b	1bee0 <_start@@Base+0x6e54>
   1e2d8:	mov	r4, r0
   1e2dc:	add	r3, sp, #104	; 0x68
   1e2e0:	str	r3, [sp]
   1e2e4:	mov	r2, sl
   1e2e8:	ldr	r3, [pc, #-708]	; 1e02c <_start@@Base+0x8fa0>
   1e2ec:	mov	r1, r4
   1e2f0:	mov	r0, fp
   1e2f4:	bl	18500 <_start@@Base+0x3474>
   1e2f8:	cmp	sl, r0
   1e2fc:	cmpne	r0, r4
   1e300:	mov	r9, r0
   1e304:	bne	1c834 <_start@@Base+0x77a8>
   1e308:	b	1ba54 <_start@@Base+0x69c8>
   1e30c:	mov	r3, #0
   1e310:	strb	r3, [sp, #104]	; 0x68
   1e314:	add	r3, sp, #104	; 0x68
   1e318:	str	r3, [sp]
   1e31c:	mov	r2, sl
   1e320:	ldr	r3, [pc, #-760]	; 1e030 <_start@@Base+0x8fa4>
   1e324:	mov	r1, r4
   1e328:	mov	r0, fp
   1e32c:	bl	17ff4 <_start@@Base+0x2f68>
   1e330:	cmp	sl, r0
   1e334:	cmpne	r0, r4
   1e338:	mov	r9, r0
   1e33c:	beq	1ba54 <_start@@Base+0x69c8>
   1e340:	ldrb	r3, [sp, #104]	; 0x68
   1e344:	b	1d848 <_start@@Base+0x87bc>
   1e348:	mov	r1, r4
   1e34c:	mov	r2, sl
   1e350:	mov	r0, fp
   1e354:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1e358:	mov	r9, r0
   1e35c:	b	1bee0 <_start@@Base+0x6e54>
   1e360:	mov	r3, #1
   1e364:	add	r9, r4, #4
   1e368:	strb	r3, [sp, #104]	; 0x68
   1e36c:	b	1d850 <_start@@Base+0x87c4>
   1e370:	mov	r4, r0
   1e374:	add	r3, sp, #86	; 0x56
   1e378:	str	r3, [sp]
   1e37c:	mov	r2, sl
   1e380:	ldr	r3, [pc, #-852]	; 1e034 <_start@@Base+0x8fa8>
   1e384:	mov	r1, r4
   1e388:	mov	r0, fp
   1e38c:	bl	186bc <_start@@Base+0x3630>
   1e390:	cmp	sl, r0
   1e394:	cmpne	r0, r4
   1e398:	mov	r9, r0
   1e39c:	beq	1db64 <_start@@Base+0x8ad8>
   1e3a0:	ldrh	r2, [sp, #86]	; 0x56
   1e3a4:	b	1d3a4 <_start@@Base+0x8318>
   1e3a8:	mov	r3, #5
   1e3ac:	mov	r2, sl
   1e3b0:	mov	r1, r9
   1e3b4:	mov	r0, fp
   1e3b8:	bl	18e7c <_start@@Base+0x3df0>
   1e3bc:	cmp	r9, r0
   1e3c0:	mov	r5, r0
   1e3c4:	beq	1be28 <_start@@Base+0x6d9c>
   1e3c8:	add	r4, sp, #120	; 0x78
   1e3cc:	mov	r3, #0
   1e3d0:	mov	r1, r0
   1e3d4:	str	r3, [r4, #-8]!
   1e3d8:	mov	r2, sl
   1e3dc:	mov	r0, fp
   1e3e0:	mov	r3, r4
   1e3e4:	bl	2f508 <flatcc_json_parser_float@@Base>
   1e3e8:	cmp	r0, r5
   1e3ec:	mov	r9, r0
   1e3f0:	beq	1f03c <_start@@Base+0x9fb0>
   1e3f4:	vldr	s15, [pc, #-952]	; 1e044 <_start@@Base+0x8fb8>
   1e3f8:	vldr	s14, [sp, #112]	; 0x70
   1e3fc:	vcmp.f32	s14, s15
   1e400:	vmrs	APSR_nzcv, fpscr
   1e404:	bne	1e414 <_start@@Base+0x9388>
   1e408:	ldr	r3, [fp, #8]
   1e40c:	tst	r3, #2
   1e410:	beq	1bee0 <_start@@Base+0x6e54>
   1e414:	mov	r3, #4
   1e418:	mov	r2, r3
   1e41c:	mov	r1, #25
   1e420:	ldr	r0, [fp]
   1e424:	bl	2a114 <flatcc_builder_table_add@@Base>
   1e428:	cmp	r0, #0
   1e42c:	beq	1ba54 <_start@@Base+0x69c8>
   1e430:	ldr	r3, [sp, #112]	; 0x70
   1e434:	str	r3, [r0]
   1e438:	b	1bee0 <_start@@Base+0x6e54>
   1e43c:	mov	r1, r4
   1e440:	mov	r2, sl
   1e444:	mov	r0, fp
   1e448:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1e44c:	mov	r9, r0
   1e450:	b	1bee0 <_start@@Base+0x6e54>
   1e454:	mov	r1, r9
   1e458:	mov	r2, sl
   1e45c:	mov	r0, fp
   1e460:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1e464:	mov	r9, r0
   1e468:	b	1bee0 <_start@@Base+0x6e54>
   1e46c:	mov	r1, r9
   1e470:	mov	r2, sl
   1e474:	mov	r0, fp
   1e478:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1e47c:	mov	r9, r0
   1e480:	b	1bee0 <_start@@Base+0x6e54>
   1e484:	mov	r1, r0
   1e488:	mov	r3, #8
   1e48c:	mov	r2, sl
   1e490:	mov	r0, fp
   1e494:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1e498:	mov	r9, r0
   1e49c:	cmp	r4, r9
   1e4a0:	bne	1e3a0 <_start@@Base+0x9314>
   1e4a4:	b	1e374 <_start@@Base+0x92e8>
   1e4a8:	mov	r1, r0
   1e4ac:	str	r4, [sp]
   1e4b0:	ldr	r3, [pc, #-1152]	; 1e038 <_start@@Base+0x8fac>
   1e4b4:	mov	r2, sl
   1e4b8:	mov	r0, fp
   1e4bc:	bl	17cf8 <_start@@Base+0x2c6c>
   1e4c0:	cmp	sl, r0
   1e4c4:	cmpne	r9, r0
   1e4c8:	mov	r9, r0
   1e4cc:	bne	1c2b4 <_start@@Base+0x7228>
   1e4d0:	b	1ba54 <_start@@Base+0x69c8>
   1e4d4:	mov	r1, r4
   1e4d8:	mov	r2, sl
   1e4dc:	mov	r0, fp
   1e4e0:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1e4e4:	mov	r9, r0
   1e4e8:	b	1bee0 <_start@@Base+0x6e54>
   1e4ec:	mov	r1, r4
   1e4f0:	mov	r2, sl
   1e4f4:	mov	r0, fp
   1e4f8:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1e4fc:	mov	r9, r0
   1e500:	b	1bee0 <_start@@Base+0x6e54>
   1e504:	ldr	r0, [fp]
   1e508:	bl	28ce8 <flatcc_builder_end_vector@@Base>
   1e50c:	cmp	r0, #0
   1e510:	str	r0, [sp, #92]	; 0x5c
   1e514:	beq	1ba54 <_start@@Base+0x69c8>
   1e518:	mov	r1, #24
   1e51c:	ldr	r0, [fp]
   1e520:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1e524:	cmp	r0, #0
   1e528:	beq	1ba54 <_start@@Base+0x69c8>
   1e52c:	ldr	r3, [sp, #92]	; 0x5c
   1e530:	str	r3, [r0]
   1e534:	b	1bee0 <_start@@Base+0x6e54>
   1e538:	mov	r3, #4
   1e53c:	mov	r2, sl
   1e540:	mov	r1, r9
   1e544:	mov	r0, fp
   1e548:	bl	18e7c <_start@@Base+0x3df0>
   1e54c:	cmp	r9, r0
   1e550:	mov	r5, r0
   1e554:	beq	1c848 <_start@@Base+0x77bc>
   1e558:	add	r4, sp, #120	; 0x78
   1e55c:	mov	r3, #0
   1e560:	strh	r3, [r4, #-8]!
   1e564:	mov	r1, r0
   1e568:	mov	r2, sl
   1e56c:	mov	r3, r4
   1e570:	mov	r0, fp
   1e574:	bl	178c0 <_start@@Base+0x2834>
   1e578:	cmp	r0, r5
   1e57c:	mov	r9, r0
   1e580:	beq	1f404 <_start@@Base+0xa378>
   1e584:	ldrsh	r3, [sp, #112]	; 0x70
   1e588:	cmp	r3, #150	; 0x96
   1e58c:	bne	1e59c <_start@@Base+0x9510>
   1e590:	ldr	r3, [fp, #8]
   1e594:	tst	r3, #2
   1e598:	beq	1bee0 <_start@@Base+0x6e54>
   1e59c:	mov	r3, #2
   1e5a0:	mov	r2, r3
   1e5a4:	mov	r1, #1
   1e5a8:	ldr	r0, [fp]
   1e5ac:	bl	2a114 <flatcc_builder_table_add@@Base>
   1e5b0:	cmp	r0, #0
   1e5b4:	beq	1ba54 <_start@@Base+0x69c8>
   1e5b8:	ldrsh	r3, [sp, #112]	; 0x70
   1e5bc:	strh	r3, [r0]
   1e5c0:	b	1bee0 <_start@@Base+0x6e54>
   1e5c4:	mov	r1, r9
   1e5c8:	mov	r2, sl
   1e5cc:	mov	r0, fp
   1e5d0:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1e5d4:	mov	r9, r0
   1e5d8:	b	1bee0 <_start@@Base+0x6e54>
   1e5dc:	mov	r1, r9
   1e5e0:	mov	r3, #7
   1e5e4:	mov	r2, sl
   1e5e8:	mov	r0, fp
   1e5ec:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1e5f0:	mov	r9, r0
   1e5f4:	b	1e49c <_start@@Base+0x9410>
   1e5f8:	mov	r1, r0
   1e5fc:	str	r5, [sp]
   1e600:	ldr	r3, [pc, #-1484]	; 1e03c <_start@@Base+0x8fb0>
   1e604:	mov	r2, sl
   1e608:	mov	r0, fp
   1e60c:	bl	17cf8 <_start@@Base+0x2c6c>
   1e610:	cmp	sl, r0
   1e614:	cmpne	r4, r0
   1e618:	beq	1f594 <_start@@Base+0xa508>
   1e61c:	mov	r4, r0
   1e620:	b	1dfe0 <_start@@Base+0x8f54>
   1e624:	ldr	r3, [sp, #96]	; 0x60
   1e628:	mov	r2, sl
   1e62c:	mov	r0, fp
   1e630:	bl	32624 <flatcc_json_parser_finalize_unions@@Base>
   1e634:	mov	r9, r0
   1e638:	ldr	r0, [fp]
   1e63c:	bl	289e8 <flatcc_builder_end_table@@Base>
   1e640:	ldr	r3, [sp, #76]	; 0x4c
   1e644:	cmp	r0, #0
   1e648:	str	r0, [r3]
   1e64c:	beq	1ba54 <_start@@Base+0x69c8>
   1e650:	mov	r0, r9
   1e654:	b	1ba68 <_start@@Base+0x69dc>
   1e658:	sub	r3, sl, r4
   1e65c:	cmp	r3, #2
   1e660:	bgt	1f158 <_start@@Base+0xa0cc>
   1e664:	mov	r1, r4
   1e668:	mov	r2, sl
   1e66c:	mov	r0, fp
   1e670:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1e674:	mov	r9, r0
   1e678:	b	1bee0 <_start@@Base+0x6e54>
   1e67c:	ldr	r3, [fp, #20]
   1e680:	cmp	r3, #0
   1e684:	bne	1d298 <_start@@Base+0x820c>
   1e688:	ldr	r0, [fp]
   1e68c:	bl	289e8 <flatcc_builder_end_table@@Base>
   1e690:	cmp	r0, #0
   1e694:	str	r0, [sp, #92]	; 0x5c
   1e698:	beq	1d298 <_start@@Base+0x820c>
   1e69c:	b	1d2bc <_start@@Base+0x8230>
   1e6a0:	mov	r3, #8
   1e6a4:	mov	r2, sl
   1e6a8:	mov	r1, r9
   1e6ac:	mov	r0, fp
   1e6b0:	bl	18e7c <_start@@Base+0x3df0>
   1e6b4:	cmp	r9, r0
   1e6b8:	mov	r5, r0
   1e6bc:	beq	1cbd0 <_start@@Base+0x7b44>
   1e6c0:	add	r4, sp, #120	; 0x78
   1e6c4:	mov	r3, #0
   1e6c8:	str	r3, [r4, #-8]!
   1e6cc:	mov	r1, r0
   1e6d0:	mov	r2, sl
   1e6d4:	mov	r3, r4
   1e6d8:	mov	r0, fp
   1e6dc:	bl	177f8 <_start@@Base+0x276c>
   1e6e0:	cmp	r0, r5
   1e6e4:	mov	r9, r0
   1e6e8:	beq	1f448 <_start@@Base+0xa3bc>
   1e6ec:	ldr	r3, [sp, #112]	; 0x70
   1e6f0:	cmp	r3, #0
   1e6f4:	bne	1e704 <_start@@Base+0x9678>
   1e6f8:	ldr	r3, [fp, #8]
   1e6fc:	tst	r3, #2
   1e700:	beq	1bee0 <_start@@Base+0x6e54>
   1e704:	mov	r3, #4
   1e708:	mov	r2, r3
   1e70c:	mov	r1, #16
   1e710:	ldr	r0, [fp]
   1e714:	bl	2a114 <flatcc_builder_table_add@@Base>
   1e718:	cmp	r0, #0
   1e71c:	beq	1ba54 <_start@@Base+0x69c8>
   1e720:	ldr	r3, [sp, #112]	; 0x70
   1e724:	str	r3, [r0]
   1e728:	b	1bee0 <_start@@Base+0x6e54>
   1e72c:	sub	r3, sl, r9
   1e730:	cmp	r3, #8
   1e734:	bgt	1f220 <_start@@Base+0xa194>
   1e738:	add	r9, r9, #8
   1e73c:	mov	r0, r9
   1e740:	mov	r1, sl
   1e744:	bl	151b8 <_start@@Base+0x12c>
   1e748:	mov	r0, #0
   1e74c:	and	r1, r1, #-16777216	; 0xff000000
   1e750:	cmp	r1, #1627389952	; 0x61000000
   1e754:	cmpeq	r0, #0
   1e758:	bne	1f4a0 <_start@@Base+0xa414>
   1e75c:	sub	r3, sl, r9
   1e760:	cmp	r3, #1
   1e764:	ble	1f4d0 <_start@@Base+0xa444>
   1e768:	mov	r3, #1
   1e76c:	mov	r2, sl
   1e770:	mov	r1, r9
   1e774:	mov	r0, fp
   1e778:	bl	18e7c <_start@@Base+0x3df0>
   1e77c:	cmp	r9, r0
   1e780:	mov	r4, r0
   1e784:	beq	1f4d4 <_start@@Base+0xa448>
   1e788:	add	r5, sp, #120	; 0x78
   1e78c:	mov	r3, #0
   1e790:	str	r3, [r5, #-8]!
   1e794:	mov	r1, r0
   1e798:	mov	r2, sl
   1e79c:	mov	r3, r5
   1e7a0:	mov	r0, fp
   1e7a4:	bl	1750c <_start@@Base+0x2480>
   1e7a8:	cmp	r0, r4
   1e7ac:	mov	r9, r0
   1e7b0:	beq	1f5d4 <_start@@Base+0xa548>
   1e7b4:	ldr	r3, [sp, #112]	; 0x70
   1e7b8:	cmp	r3, #0
   1e7bc:	bne	1e7cc <_start@@Base+0x9740>
   1e7c0:	ldr	r3, [fp, #8]
   1e7c4:	tst	r3, #2
   1e7c8:	beq	1bee0 <_start@@Base+0x6e54>
   1e7cc:	mov	r3, #4
   1e7d0:	mov	r2, r3
   1e7d4:	mov	r1, #21
   1e7d8:	ldr	r0, [fp]
   1e7dc:	bl	2a114 <flatcc_builder_table_add@@Base>
   1e7e0:	cmp	r0, #0
   1e7e4:	beq	1ba54 <_start@@Base+0x69c8>
   1e7e8:	ldr	r3, [sp, #112]	; 0x70
   1e7ec:	str	r3, [r0]
   1e7f0:	b	1bee0 <_start@@Base+0x6e54>
   1e7f4:	mov	r1, r0
   1e7f8:	mov	r3, #7
   1e7fc:	mov	r2, sl
   1e800:	mov	r0, fp
   1e804:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1e808:	mov	r9, r0
   1e80c:	b	1c82c <_start@@Base+0x77a0>
   1e810:	mov	r1, r0
   1e814:	str	r5, [sp]
   1e818:	mov	r3, r8
   1e81c:	mov	r2, sl
   1e820:	mov	r0, fp
   1e824:	bl	17cf8 <_start@@Base+0x2c6c>
   1e828:	cmp	sl, r0
   1e82c:	cmpne	r4, r0
   1e830:	beq	1f594 <_start@@Base+0xa508>
   1e834:	mov	r4, r0
   1e838:	b	1e158 <_start@@Base+0x90cc>
   1e83c:	mov	r3, #7
   1e840:	mov	r2, sl
   1e844:	mov	r1, r4
   1e848:	mov	r0, fp
   1e84c:	bl	18e7c <_start@@Base+0x3df0>
   1e850:	cmp	r4, r0
   1e854:	mov	r9, r0
   1e858:	beq	1f634 <_start@@Base+0xa5a8>
   1e85c:	mov	r2, #8
   1e860:	mov	r1, r2
   1e864:	mvn	r3, #-536870912	; 0xe0000000
   1e868:	ldr	r0, [fp]
   1e86c:	bl	27808 <flatcc_builder_start_vector@@Base>
   1e870:	cmp	r0, #0
   1e874:	bne	1ba54 <_start@@Base+0x69c8>
   1e878:	mov	r1, r9
   1e87c:	add	r3, sp, #88	; 0x58
   1e880:	mov	r2, sl
   1e884:	mov	r0, fp
   1e888:	bl	18dc8 <_start@@Base+0x3d3c>
   1e88c:	ldr	r3, [sp, #88]	; 0x58
   1e890:	cmp	r3, #0
   1e894:	mov	r9, r0
   1e898:	beq	1e93c <_start@@Base+0x98b0>
   1e89c:	mov	r8, #1
   1e8a0:	add	r7, sp, #112	; 0x70
   1e8a4:	b	1e8d4 <_start@@Base+0x9848>
   1e8a8:	ldrd	r4, [sp, #112]	; 0x70
   1e8ac:	mov	r1, r0
   1e8b0:	add	r3, sp, #88	; 0x58
   1e8b4:	strd	r4, [r6]
   1e8b8:	mov	r2, sl
   1e8bc:	mov	r0, fp
   1e8c0:	bl	19938 <_start@@Base+0x48ac>
   1e8c4:	ldr	r3, [sp, #88]	; 0x58
   1e8c8:	cmp	r3, #0
   1e8cc:	mov	r9, r0
   1e8d0:	beq	1e93c <_start@@Base+0x98b0>
   1e8d4:	mov	r2, #0
   1e8d8:	mov	r3, #0
   1e8dc:	mov	r1, r8
   1e8e0:	ldr	r0, [fp]
   1e8e4:	strd	r2, [sp, #112]	; 0x70
   1e8e8:	bl	26c9c <flatcc_builder_extend_vector@@Base>
   1e8ec:	mov	r1, r9
   1e8f0:	mov	r3, r7
   1e8f4:	mov	r2, sl
   1e8f8:	subs	r6, r0, #0
   1e8fc:	mov	r0, fp
   1e900:	beq	1ba54 <_start@@Base+0x69c8>
   1e904:	bl	170fc <_start@@Base+0x2070>
   1e908:	cmp	r0, r9
   1e90c:	bne	1e8a8 <_start@@Base+0x981c>
   1e910:	str	r7, [sp]
   1e914:	ldr	r3, [pc, #-2268]	; 1e040 <_start@@Base+0x8fb4>
   1e918:	mov	r2, sl
   1e91c:	mov	r1, r9
   1e920:	mov	r0, fp
   1e924:	bl	18bf0 <_start@@Base+0x3b64>
   1e928:	cmp	sl, r0
   1e92c:	cmpne	r0, r9
   1e930:	bne	1e8a8 <_start@@Base+0x981c>
   1e934:	mov	r9, r0
   1e938:	b	1ba54 <_start@@Base+0x69c8>
   1e93c:	ldr	r0, [fp]
   1e940:	bl	28ce8 <flatcc_builder_end_vector@@Base>
   1e944:	cmp	r0, #0
   1e948:	str	r0, [sp, #92]	; 0x5c
   1e94c:	beq	1ba54 <_start@@Base+0x69c8>
   1e950:	mov	r1, #32
   1e954:	ldr	r0, [fp]
   1e958:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1e95c:	cmp	r0, #0
   1e960:	beq	1ba54 <_start@@Base+0x69c8>
   1e964:	ldr	r3, [sp, #92]	; 0x5c
   1e968:	str	r3, [r0]
   1e96c:	b	1bee0 <_start@@Base+0x6e54>
   1e970:	mov	r1, r0
   1e974:	mov	r3, #8
   1e978:	mov	r2, sl
   1e97c:	mov	r0, fp
   1e980:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1e984:	mov	r9, r0
   1e988:	mov	r3, #0
   1e98c:	cmp	r4, r9
   1e990:	strb	r3, [sp, #104]	; 0x68
   1e994:	bne	1d85c <_start@@Base+0x87d0>
   1e998:	b	1e314 <_start@@Base+0x9288>
   1e99c:	mov	r3, #7
   1e9a0:	mov	r2, sl
   1e9a4:	mov	r1, r4
   1e9a8:	mov	r0, fp
   1e9ac:	bl	18e7c <_start@@Base+0x3df0>
   1e9b0:	cmp	r4, r0
   1e9b4:	mov	r9, r0
   1e9b8:	beq	1f62c <_start@@Base+0xa5a0>
   1e9bc:	mvn	r3, #-536870912	; 0xe0000000
   1e9c0:	mov	r2, #4
   1e9c4:	mov	r1, #8
   1e9c8:	ldr	r0, [fp]
   1e9cc:	bl	27808 <flatcc_builder_start_vector@@Base>
   1e9d0:	cmp	r0, #0
   1e9d4:	bne	1ba54 <_start@@Base+0x69c8>
   1e9d8:	mov	r1, r9
   1e9dc:	add	r3, sp, #88	; 0x58
   1e9e0:	mov	r2, sl
   1e9e4:	mov	r0, fp
   1e9e8:	bl	18dc8 <_start@@Base+0x3d3c>
   1e9ec:	ldr	r3, [sp, #88]	; 0x58
   1e9f0:	cmp	r3, #0
   1e9f4:	mov	r9, r0
   1e9f8:	beq	1ec10 <_start@@Base+0x9b84>
   1e9fc:	mov	r4, r0
   1ea00:	mov	r1, #1
   1ea04:	ldr	r0, [fp]
   1ea08:	bl	26c9c <flatcc_builder_extend_vector@@Base>
   1ea0c:	subs	r9, r0, #0
   1ea10:	beq	1eca4 <_start@@Base+0x9c18>
   1ea14:	add	r3, sp, #108	; 0x6c
   1ea18:	mov	r1, r4
   1ea1c:	mov	r2, sl
   1ea20:	mov	r0, fp
   1ea24:	bl	17c44 <_start@@Base+0x2bb8>
   1ea28:	ldr	r3, [sp, #108]	; 0x6c
   1ea2c:	cmp	r3, #0
   1ea30:	beq	1ebe8 <_start@@Base+0x9b5c>
   1ea34:	mov	r8, #0
   1ea38:	b	1ea90 <_start@@Base+0x9a04>
   1ea3c:	add	r3, pc, #988	; 0x3dc
   1ea40:	ldrd	r2, [r3]
   1ea44:	cmp	r1, r3
   1ea48:	cmpeq	r0, r2
   1ea4c:	bne	1ea5c <_start@@Base+0x99d0>
   1ea50:	sub	r3, sl, r4
   1ea54:	cmp	r3, #8
   1ea58:	bgt	1eb84 <_start@@Base+0x9af8>
   1ea5c:	mov	r1, r4
   1ea60:	mov	r2, sl
   1ea64:	mov	r0, fp
   1ea68:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ea6c:	mov	r4, r0
   1ea70:	add	r3, sp, #108	; 0x6c
   1ea74:	mov	r1, r4
   1ea78:	mov	r2, sl
   1ea7c:	mov	r0, fp
   1ea80:	bl	19abc <_start@@Base+0x4a30>
   1ea84:	ldr	r3, [sp, #108]	; 0x6c
   1ea88:	cmp	r3, #0
   1ea8c:	beq	1ebe8 <_start@@Base+0x9b5c>
   1ea90:	cmp	sl, r0
   1ea94:	beq	1eb4c <_start@@Base+0x9ac0>
   1ea98:	ldrb	r3, [r0]
   1ea9c:	cmp	r3, #34	; 0x22
   1eaa0:	addeq	r4, r0, #1
   1eaa4:	beq	1eac0 <_start@@Base+0x9a34>
   1eaa8:	mov	r1, r0
   1eaac:	mov	r3, #5
   1eab0:	mov	r2, sl
   1eab4:	mov	r0, fp
   1eab8:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1eabc:	mov	r4, r0
   1eac0:	mov	r1, sl
   1eac4:	mov	r0, r4
   1eac8:	bl	151b8 <_start@@Base+0x12c>
   1eacc:	ldr	r3, [pc, #852]	; 1ee28 <_start@@Base+0x9d9c>
   1ead0:	ldr	r7, [pc, #852]	; 1ee2c <_start@@Base+0x9da0>
   1ead4:	mov	r2, #0
   1ead8:	mov	r6, #0
   1eadc:	and	r3, r3, r1
   1eae0:	and	r2, r2, r0
   1eae4:	cmp	r3, r7
   1eae8:	cmpeq	r2, r6
   1eaec:	bne	1ea3c <_start@@Base+0x99b0>
   1eaf0:	sub	r3, sl, r4
   1eaf4:	cmp	r3, #2
   1eaf8:	ble	1ea5c <_start@@Base+0x99d0>
   1eafc:	mov	r3, #2
   1eb00:	mov	r2, sl
   1eb04:	mov	r1, r4
   1eb08:	mov	r0, fp
   1eb0c:	bl	18e7c <_start@@Base+0x3df0>
   1eb10:	cmp	r4, r0
   1eb14:	mov	r5, r0
   1eb18:	beq	1ea5c <_start@@Base+0x99d0>
   1eb1c:	mov	r1, r0
   1eb20:	add	r3, sp, #112	; 0x70
   1eb24:	mov	r2, sl
   1eb28:	mov	r0, fp
   1eb2c:	str	r8, [sp, #112]	; 0x70
   1eb30:	bl	1750c <_start@@Base+0x2480>
   1eb34:	cmp	r5, r0
   1eb38:	mov	r4, r0
   1eb3c:	beq	1ec74 <_start@@Base+0x9be8>
   1eb40:	ldr	r3, [sp, #112]	; 0x70
   1eb44:	str	r3, [r9]
   1eb48:	b	1ea70 <_start@@Base+0x99e4>
   1eb4c:	mov	r1, sl
   1eb50:	mov	r0, sl
   1eb54:	bl	151b8 <_start@@Base+0x12c>
   1eb58:	ldr	r3, [pc, #712]	; 1ee28 <_start@@Base+0x9d9c>
   1eb5c:	ldr	r5, [pc, #712]	; 1ee2c <_start@@Base+0x9da0>
   1eb60:	mov	r2, #0
   1eb64:	mov	r4, #0
   1eb68:	and	r3, r3, r1
   1eb6c:	and	r2, r2, r0
   1eb70:	cmp	r3, r5
   1eb74:	cmpeq	r2, r4
   1eb78:	mov	r4, sl
   1eb7c:	bne	1ea3c <_start@@Base+0x99b0>
   1eb80:	b	1ea5c <_start@@Base+0x99d0>
   1eb84:	mov	r3, #8
   1eb88:	mov	r2, sl
   1eb8c:	mov	r1, r4
   1eb90:	mov	r0, fp
   1eb94:	bl	18e7c <_start@@Base+0x3df0>
   1eb98:	cmp	r4, r0
   1eb9c:	mov	r5, r0
   1eba0:	beq	1ea5c <_start@@Base+0x99d0>
   1eba4:	mov	r1, r0
   1eba8:	add	r3, sp, #112	; 0x70
   1ebac:	mov	r2, sl
   1ebb0:	mov	r0, fp
   1ebb4:	str	r8, [sp, #112]	; 0x70
   1ebb8:	bl	1750c <_start@@Base+0x2480>
   1ebbc:	cmp	r5, r0
   1ebc0:	mov	r4, r0
   1ebc4:	beq	1ec44 <_start@@Base+0x9bb8>
   1ebc8:	ldr	r3, [sp, #112]	; 0x70
   1ebcc:	str	r3, [r9, #4]
   1ebd0:	b	1ea70 <_start@@Base+0x99e4>
   1ebd4:	mov	r1, r0
   1ebd8:	mov	r3, #33	; 0x21
   1ebdc:	mov	r2, sl
   1ebe0:	mov	r0, fp
   1ebe4:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1ebe8:	mov	r1, r0
   1ebec:	add	r3, sp, #88	; 0x58
   1ebf0:	mov	r2, sl
   1ebf4:	mov	r0, fp
   1ebf8:	bl	19938 <_start@@Base+0x48ac>
   1ebfc:	ldr	r3, [sp, #88]	; 0x58
   1ec00:	cmp	r3, #0
   1ec04:	mov	r4, r0
   1ec08:	bne	1ea00 <_start@@Base+0x9974>
   1ec0c:	mov	r9, r0
   1ec10:	ldr	r0, [fp]
   1ec14:	bl	28ce8 <flatcc_builder_end_vector@@Base>
   1ec18:	cmp	r0, #0
   1ec1c:	str	r0, [sp, #92]	; 0x5c
   1ec20:	beq	1ba54 <_start@@Base+0x69c8>
   1ec24:	mov	r1, #29
   1ec28:	ldr	r0, [fp]
   1ec2c:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1ec30:	cmp	r0, #0
   1ec34:	beq	1ba54 <_start@@Base+0x69c8>
   1ec38:	ldr	r3, [sp, #92]	; 0x5c
   1ec3c:	str	r3, [r0]
   1ec40:	b	1bee0 <_start@@Base+0x6e54>
   1ec44:	add	r3, sp, #112	; 0x70
   1ec48:	str	r3, [sp]
   1ec4c:	mov	r1, r0
   1ec50:	ldr	r3, [pc, #472]	; 1ee30 <_start@@Base+0x9da4>
   1ec54:	mov	r2, sl
   1ec58:	mov	r0, fp
   1ec5c:	bl	1887c <_start@@Base+0x37f0>
   1ec60:	cmp	sl, r0
   1ec64:	cmpne	r4, r0
   1ec68:	beq	1ebd4 <_start@@Base+0x9b48>
   1ec6c:	mov	r4, r0
   1ec70:	b	1ebc8 <_start@@Base+0x9b3c>
   1ec74:	add	r3, sp, #112	; 0x70
   1ec78:	str	r3, [sp]
   1ec7c:	mov	r1, r0
   1ec80:	ldr	r3, [pc, #428]	; 1ee34 <_start@@Base+0x9da8>
   1ec84:	mov	r2, sl
   1ec88:	mov	r0, fp
   1ec8c:	bl	1887c <_start@@Base+0x37f0>
   1ec90:	cmp	sl, r0
   1ec94:	cmpne	r4, r0
   1ec98:	beq	1ebd4 <_start@@Base+0x9b48>
   1ec9c:	mov	r4, r0
   1eca0:	b	1eb40 <_start@@Base+0x9ab4>
   1eca4:	mov	r9, r4
   1eca8:	b	1ba54 <_start@@Base+0x69c8>
   1ecac:	mov	r1, r0
   1ecb0:	str	r5, [sp]
   1ecb4:	ldr	r3, [pc, #380]	; 1ee38 <_start@@Base+0x9dac>
   1ecb8:	mov	r2, sl
   1ecbc:	mov	r0, fp
   1ecc0:	bl	17cf8 <_start@@Base+0x2c6c>
   1ecc4:	cmp	sl, r0
   1ecc8:	cmpne	r4, r0
   1eccc:	beq	1f594 <_start@@Base+0xa508>
   1ecd0:	mov	r4, r0
   1ecd4:	b	1e22c <_start@@Base+0x91a0>
   1ecd8:	ldr	r0, [fp]
   1ecdc:	bl	28ce8 <flatcc_builder_end_vector@@Base>
   1ece0:	cmp	r0, #0
   1ece4:	str	r0, [sp, #92]	; 0x5c
   1ece8:	beq	1ba54 <_start@@Base+0x69c8>
   1ecec:	mov	r1, #5
   1ecf0:	ldr	r0, [fp]
   1ecf4:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1ecf8:	cmp	r0, #0
   1ecfc:	beq	1ba54 <_start@@Base+0x69c8>
   1ed00:	ldr	r3, [sp, #92]	; 0x5c
   1ed04:	str	r3, [r0]
   1ed08:	b	1bee0 <_start@@Base+0x6e54>
   1ed0c:	mov	r4, r0
   1ed10:	mov	r1, r4
   1ed14:	mov	r2, sl
   1ed18:	mov	r0, fp
   1ed1c:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ed20:	mov	r9, r0
   1ed24:	b	1bee0 <_start@@Base+0x6e54>
   1ed28:	ldr	r0, [fp]
   1ed2c:	bl	28f08 <flatcc_builder_end_offset_vector@@Base>
   1ed30:	cmp	r0, #0
   1ed34:	str	r0, [sp, #92]	; 0x5c
   1ed38:	beq	1ba54 <_start@@Base+0x69c8>
   1ed3c:	mov	r1, #11
   1ed40:	ldr	r0, [fp]
   1ed44:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1ed48:	cmp	r0, #0
   1ed4c:	beq	1ba54 <_start@@Base+0x69c8>
   1ed50:	ldr	r3, [sp, #92]	; 0x5c
   1ed54:	str	r3, [r0]
   1ed58:	b	1bee0 <_start@@Base+0x6e54>
   1ed5c:	mov	r3, #4
   1ed60:	mov	r2, sl
   1ed64:	mov	r1, r4
   1ed68:	mov	r0, fp
   1ed6c:	bl	18e7c <_start@@Base+0x3df0>
   1ed70:	cmp	r4, r0
   1ed74:	mov	r9, r0
   1ed78:	beq	1f63c <_start@@Base+0xa5b0>
   1ed7c:	cmp	sl, r0
   1ed80:	beq	1ed90 <_start@@Base+0x9d04>
   1ed84:	ldrb	r3, [r0]
   1ed88:	cmp	r3, #91	; 0x5b
   1ed8c:	beq	1f2e0 <_start@@Base+0xa254>
   1ed90:	mov	r3, #0
   1ed94:	mov	r2, r3
   1ed98:	mov	r1, r3
   1ed9c:	ldr	r0, [fp]
   1eda0:	bl	263c8 <flatcc_builder_start_buffer@@Base>
   1eda4:	cmp	r0, #0
   1eda8:	bne	1ba54 <_start@@Base+0x69c8>
   1edac:	mov	r1, r9
   1edb0:	add	r3, sp, #92	; 0x5c
   1edb4:	mov	r2, sl
   1edb8:	mov	r0, fp
   1edbc:	bl	1b7e0 <_start@@Base+0x6754>
   1edc0:	ldr	r1, [sp, #92]	; 0x5c
   1edc4:	cmp	r1, #0
   1edc8:	mov	r9, r0
   1edcc:	beq	1ba54 <_start@@Base+0x69c8>
   1edd0:	ldr	r0, [fp]
   1edd4:	bl	26554 <flatcc_builder_end_buffer@@Base>
   1edd8:	str	r0, [sp, #92]	; 0x5c
   1eddc:	cmp	r0, #0
   1ede0:	beq	1ba54 <_start@@Base+0x69c8>
   1ede4:	mov	r1, #13
   1ede8:	ldr	r0, [fp]
   1edec:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1edf0:	cmp	r0, #0
   1edf4:	beq	1ba54 <_start@@Base+0x69c8>
   1edf8:	ldr	r3, [sp, #92]	; 0x5c
   1edfc:	str	r3, [r0]
   1ee00:	b	1bee0 <_start@@Base+0x6e54>
   1ee04:	mov	r1, r0
   1ee08:	mov	r3, #7
   1ee0c:	mov	r2, sl
   1ee10:	mov	r0, fp
   1ee14:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   1ee18:	mov	r9, r0
   1ee1c:	b	1e988 <_start@@Base+0x98fc>
   1ee20:	cmnvs	lr, r5, ror #6
   1ee24:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1ee28:			; <UNDEFINED> instruction: 0xffff0000
   1ee2c:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1ee30:	andeq	r7, r5, r4, lsr #3
   1ee34:	muleq	r5, r8, r1
   1ee38:	andeq	r7, r5, r4, ror #2
   1ee3c:	andeq	r7, r5, r8, asr #3
   1ee40:	andeq	r7, r5, r8, lsl r1
   1ee44:	andeq	r7, r5, r0, ror #3
   1ee48:	ldrdeq	r7, [r5], -r4
   1ee4c:	andeq	r7, r5, r8, asr r2
   1ee50:	andeq	r7, r5, r0, lsr r1
   1ee54:	strdeq	r7, [r5], -r8
   1ee58:	andeq	r7, r5, r0, lsl r2
   1ee5c:	andeq	r7, r5, r0, asr #4
   1ee60:	andeq	r7, r5, r8, lsr #4
   1ee64:	andeq	r7, r5, r4, lsr r2
   1ee68:	andeq	r7, r5, r4, lsl #4
   1ee6c:	andeq	r7, r5, ip, asr #4
   1ee70:	andeq	r7, r5, ip, lsl r2
   1ee74:	mov	r3, #8
   1ee78:	mov	r2, sl
   1ee7c:	mov	r1, r9
   1ee80:	mov	r0, fp
   1ee84:	bl	18e7c <_start@@Base+0x3df0>
   1ee88:	cmp	r9, r0
   1ee8c:	mov	r5, r0
   1ee90:	beq	1cab8 <_start@@Base+0x7a2c>
   1ee94:	mov	r0, #0
   1ee98:	mov	r1, #0
   1ee9c:	add	r4, sp, #120	; 0x78
   1eea0:	mov	r2, sl
   1eea4:	strd	r0, [r4, #-8]!
   1eea8:	mov	r1, r5
   1eeac:	mov	r3, r4
   1eeb0:	mov	r0, fp
   1eeb4:	bl	170fc <_start@@Base+0x2070>
   1eeb8:	cmp	r0, r5
   1eebc:	mov	r9, r0
   1eec0:	beq	1f4ec <_start@@Base+0xa460>
   1eec4:	ldrd	r2, [sp, #112]	; 0x70
   1eec8:	orrs	r3, r2, r3
   1eecc:	bne	1eedc <_start@@Base+0x9e50>
   1eed0:	ldr	r3, [fp, #8]
   1eed4:	tst	r3, #2
   1eed8:	beq	1bee0 <_start@@Base+0x6e54>
   1eedc:	mov	r3, #8
   1eee0:	mov	r2, r3
   1eee4:	mov	r1, #18
   1eee8:	ldr	r0, [fp]
   1eeec:	bl	2a114 <flatcc_builder_table_add@@Base>
   1eef0:	cmp	r0, #0
   1eef4:	beq	1ba54 <_start@@Base+0x69c8>
   1eef8:	ldrd	r2, [sp, #112]	; 0x70
   1eefc:	strd	r2, [r0]
   1ef00:	b	1bee0 <_start@@Base+0x6e54>
   1ef04:	mov	r1, r9
   1ef08:	mov	r2, sl
   1ef0c:	mov	r0, fp
   1ef10:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1ef14:	mov	r9, r0
   1ef18:	b	1bee0 <_start@@Base+0x6e54>
   1ef1c:	mov	r1, r0
   1ef20:	str	r4, [sp]
   1ef24:	ldr	r3, [pc, #-240]	; 1ee3c <_start@@Base+0x9db0>
   1ef28:	mov	r2, sl
   1ef2c:	mov	r0, fp
   1ef30:	bl	18bf0 <_start@@Base+0x3b64>
   1ef34:	cmp	sl, r0
   1ef38:	cmpne	r9, r0
   1ef3c:	mov	r9, r0
   1ef40:	bne	1d1f0 <_start@@Base+0x8164>
   1ef44:	b	1db64 <_start@@Base+0x8ad8>
   1ef48:	ldr	r0, [fp]
   1ef4c:	bl	28ce8 <flatcc_builder_end_vector@@Base>
   1ef50:	cmp	r0, #0
   1ef54:	str	r0, [sp, #92]	; 0x5c
   1ef58:	beq	1ba54 <_start@@Base+0x69c8>
   1ef5c:	mov	r1, #33	; 0x21
   1ef60:	ldr	r0, [fp]
   1ef64:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1ef68:	cmp	r0, #0
   1ef6c:	beq	1ba54 <_start@@Base+0x69c8>
   1ef70:	ldr	r3, [sp, #92]	; 0x5c
   1ef74:	str	r3, [r0]
   1ef78:	b	1bee0 <_start@@Base+0x6e54>
   1ef7c:	mov	r1, r9
   1ef80:	mov	r3, #5
   1ef84:	mov	r2, sl
   1ef88:	mov	r0, fp
   1ef8c:	bl	18e7c <_start@@Base+0x3df0>
   1ef90:	cmp	r9, r0
   1ef94:	mov	r1, r0
   1ef98:	beq	1cbac <_start@@Base+0x7b20>
   1ef9c:	add	r3, sp, #92	; 0x5c
   1efa0:	mov	r2, sl
   1efa4:	mov	r0, fp
   1efa8:	bl	1b554 <_start@@Base+0x64c8>
   1efac:	ldr	r3, [sp, #92]	; 0x5c
   1efb0:	cmp	r3, #0
   1efb4:	mov	r9, r0
   1efb8:	beq	1ba54 <_start@@Base+0x69c8>
   1efbc:	mov	r1, #34	; 0x22
   1efc0:	ldr	r0, [fp]
   1efc4:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1efc8:	cmp	r0, #0
   1efcc:	beq	1ba54 <_start@@Base+0x69c8>
   1efd0:	ldr	r3, [sp, #92]	; 0x5c
   1efd4:	str	r3, [r0]
   1efd8:	b	1bee0 <_start@@Base+0x6e54>
   1efdc:	mov	r1, r0
   1efe0:	str	r4, [sp]
   1efe4:	ldr	r3, [pc, #-428]	; 1ee40 <_start@@Base+0x9db4>
   1efe8:	mov	r2, sl
   1efec:	mov	r0, fp
   1eff0:	bl	18184 <_start@@Base+0x30f8>
   1eff4:	cmp	sl, r0
   1eff8:	cmpne	r9, r0
   1effc:	mov	r9, r0
   1f000:	bne	1cef4 <_start@@Base+0x7e68>
   1f004:	b	1ba54 <_start@@Base+0x69c8>
   1f008:	ldr	r0, [fp]
   1f00c:	bl	28f08 <flatcc_builder_end_offset_vector@@Base>
   1f010:	cmp	r0, #0
   1f014:	str	r0, [sp, #92]	; 0x5c
   1f018:	beq	1ba54 <_start@@Base+0x69c8>
   1f01c:	mov	r1, #10
   1f020:	ldr	r0, [fp]
   1f024:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1f028:	cmp	r0, #0
   1f02c:	beq	1ba54 <_start@@Base+0x69c8>
   1f030:	ldr	r3, [sp, #92]	; 0x5c
   1f034:	str	r3, [r0]
   1f038:	b	1bee0 <_start@@Base+0x6e54>
   1f03c:	mov	r1, r0
   1f040:	str	r4, [sp]
   1f044:	ldr	r3, [pc, #-520]	; 1ee44 <_start@@Base+0x9db8>
   1f048:	mov	r2, sl
   1f04c:	mov	r0, fp
   1f050:	bl	17cf8 <_start@@Base+0x2c6c>
   1f054:	cmp	sl, r0
   1f058:	cmpne	r9, r0
   1f05c:	mov	r9, r0
   1f060:	bne	1e3f4 <_start@@Base+0x9368>
   1f064:	b	1ba54 <_start@@Base+0x69c8>
   1f068:	mov	r3, #8
   1f06c:	mov	r2, sl
   1f070:	mov	r1, r9
   1f074:	mov	r0, fp
   1f078:	bl	18e7c <_start@@Base+0x3df0>
   1f07c:	cmp	r9, r0
   1f080:	mov	r4, r0
   1f084:	beq	1f644 <_start@@Base+0xa5b8>
   1f088:	mov	r0, #0
   1f08c:	mov	r1, #0
   1f090:	add	r5, sp, #120	; 0x78
   1f094:	mov	r2, sl
   1f098:	strd	r0, [r5, #-8]!
   1f09c:	mov	r1, r4
   1f0a0:	mov	r3, r5
   1f0a4:	mov	r0, fp
   1f0a8:	bl	17484 <_start@@Base+0x23f8>
   1f0ac:	cmp	r0, r4
   1f0b0:	mov	r9, r0
   1f0b4:	beq	1f518 <_start@@Base+0xa48c>
   1f0b8:	ldrd	r2, [sp, #112]	; 0x70
   1f0bc:	orrs	r3, r2, r3
   1f0c0:	bne	1f0d0 <_start@@Base+0xa044>
   1f0c4:	ldr	r3, [fp, #8]
   1f0c8:	tst	r3, #2
   1f0cc:	beq	1bee0 <_start@@Base+0x6e54>
   1f0d0:	mov	r3, #8
   1f0d4:	mov	r2, r3
   1f0d8:	mov	r1, #19
   1f0dc:	ldr	r0, [fp]
   1f0e0:	bl	2a114 <flatcc_builder_table_add@@Base>
   1f0e4:	cmp	r0, #0
   1f0e8:	beq	1ba54 <_start@@Base+0x69c8>
   1f0ec:	ldrd	r2, [sp, #112]	; 0x70
   1f0f0:	strd	r2, [r0]
   1f0f4:	b	1bee0 <_start@@Base+0x6e54>
   1f0f8:	mov	r4, r0
   1f0fc:	mov	r1, r4
   1f100:	mov	r2, sl
   1f104:	mov	r0, fp
   1f108:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f10c:	mov	r9, r0
   1f110:	b	1bee0 <_start@@Base+0x6e54>
   1f114:	mov	r1, r9
   1f118:	mov	r2, sl
   1f11c:	mov	r0, fp
   1f120:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f124:	mov	r9, r0
   1f128:	b	1bee0 <_start@@Base+0x6e54>
   1f12c:	mov	r1, r0
   1f130:	str	r4, [sp]
   1f134:	ldr	r3, [pc, #-756]	; 1ee48 <_start@@Base+0x9dbc>
   1f138:	mov	r2, sl
   1f13c:	mov	r0, fp
   1f140:	bl	17cf8 <_start@@Base+0x2c6c>
   1f144:	cmp	sl, r0
   1f148:	cmpne	r9, r0
   1f14c:	mov	r9, r0
   1f150:	bne	1cf80 <_start@@Base+0x7ef4>
   1f154:	b	1ba54 <_start@@Base+0x69c8>
   1f158:	mov	r3, #2
   1f15c:	mov	r2, sl
   1f160:	mov	r1, r4
   1f164:	mov	r0, fp
   1f168:	bl	18e7c <_start@@Base+0x3df0>
   1f16c:	cmp	r4, r0
   1f170:	mov	r9, r0
   1f174:	beq	1f5cc <_start@@Base+0xa540>
   1f178:	ldr	r0, [fp]
   1f17c:	bl	27960 <flatcc_builder_start_offset_vector@@Base>
   1f180:	cmp	r0, #0
   1f184:	bne	1ba54 <_start@@Base+0x69c8>
   1f188:	mov	r1, r9
   1f18c:	add	r3, sp, #88	; 0x58
   1f190:	mov	r2, sl
   1f194:	mov	r0, fp
   1f198:	bl	18dc8 <_start@@Base+0x3d3c>
   1f19c:	ldr	r3, [sp, #88]	; 0x58
   1f1a0:	cmp	r3, #0
   1f1a4:	mov	r9, r0
   1f1a8:	beq	1f2ac <_start@@Base+0xa220>
   1f1ac:	add	r4, sp, #92	; 0x5c
   1f1b0:	mov	r5, #1
   1f1b4:	b	1f1f4 <_start@@Base+0xa168>
   1f1b8:	ldr	r0, [fp]
   1f1bc:	bl	26fc4 <flatcc_builder_extend_offset_vector@@Base>
   1f1c0:	add	r3, sp, #88	; 0x58
   1f1c4:	mov	r2, sl
   1f1c8:	mov	r1, r9
   1f1cc:	subs	ip, r0, #0
   1f1d0:	mov	r0, fp
   1f1d4:	beq	1ba54 <_start@@Base+0x69c8>
   1f1d8:	ldr	lr, [sp, #92]	; 0x5c
   1f1dc:	str	lr, [ip]
   1f1e0:	bl	19938 <_start@@Base+0x48ac>
   1f1e4:	ldr	r3, [sp, #88]	; 0x58
   1f1e8:	cmp	r3, #0
   1f1ec:	mov	r9, r0
   1f1f0:	beq	1f2ac <_start@@Base+0xa220>
   1f1f4:	mov	r1, r9
   1f1f8:	mov	r3, r4
   1f1fc:	mov	r2, sl
   1f200:	mov	r0, fp
   1f204:	bl	32270 <flatcc_json_parser_build_string@@Base>
   1f208:	ldr	r3, [sp, #92]	; 0x5c
   1f20c:	mov	r1, r5
   1f210:	cmp	r3, #0
   1f214:	mov	r9, r0
   1f218:	bne	1f1b8 <_start@@Base+0xa12c>
   1f21c:	b	1ba54 <_start@@Base+0x69c8>
   1f220:	mov	r3, #8
   1f224:	mov	r2, sl
   1f228:	mov	r1, r9
   1f22c:	mov	r0, fp
   1f230:	bl	18e7c <_start@@Base+0x3df0>
   1f234:	cmp	r9, r0
   1f238:	mov	r5, r0
   1f23c:	beq	1e738 <_start@@Base+0x96ac>
   1f240:	add	r4, sp, #120	; 0x78
   1f244:	mov	r3, #0
   1f248:	str	r3, [r4, #-8]!
   1f24c:	mov	r1, r0
   1f250:	mov	r2, sl
   1f254:	mov	r3, r4
   1f258:	mov	r0, fp
   1f25c:	bl	1750c <_start@@Base+0x2480>
   1f260:	cmp	r0, r5
   1f264:	mov	r9, r0
   1f268:	beq	1f5a0 <_start@@Base+0xa514>
   1f26c:	ldr	r3, [sp, #112]	; 0x70
   1f270:	cmp	r3, #0
   1f274:	bne	1f284 <_start@@Base+0xa1f8>
   1f278:	ldr	r3, [fp, #8]
   1f27c:	tst	r3, #2
   1f280:	beq	1bee0 <_start@@Base+0x6e54>
   1f284:	mov	r3, #4
   1f288:	mov	r2, r3
   1f28c:	mov	r1, #17
   1f290:	ldr	r0, [fp]
   1f294:	bl	2a114 <flatcc_builder_table_add@@Base>
   1f298:	cmp	r0, #0
   1f29c:	beq	1ba54 <_start@@Base+0x69c8>
   1f2a0:	ldr	r3, [sp, #112]	; 0x70
   1f2a4:	str	r3, [r0]
   1f2a8:	b	1bee0 <_start@@Base+0x6e54>
   1f2ac:	ldr	r0, [fp]
   1f2b0:	bl	28f08 <flatcc_builder_end_offset_vector@@Base>
   1f2b4:	cmp	r0, #0
   1f2b8:	str	r0, [sp, #92]	; 0x5c
   1f2bc:	beq	1ba54 <_start@@Base+0x69c8>
   1f2c0:	mov	r1, #28
   1f2c4:	ldr	r0, [fp]
   1f2c8:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   1f2cc:	cmp	r0, #0
   1f2d0:	beq	1ba54 <_start@@Base+0x69c8>
   1f2d4:	ldr	r3, [sp, #92]	; 0x5c
   1f2d8:	str	r3, [r0]
   1f2dc:	b	1bee0 <_start@@Base+0x6e54>
   1f2e0:	mov	r2, #1
   1f2e4:	mov	r1, r2
   1f2e8:	mvn	r3, #0
   1f2ec:	ldr	r0, [fp]
   1f2f0:	bl	27808 <flatcc_builder_start_vector@@Base>
   1f2f4:	subs	r6, r0, #0
   1f2f8:	bne	1ba54 <_start@@Base+0x69c8>
   1f2fc:	mov	r1, r9
   1f300:	add	r3, sp, #88	; 0x58
   1f304:	mov	r2, sl
   1f308:	mov	r0, fp
   1f30c:	bl	18dc8 <_start@@Base+0x3d3c>
   1f310:	ldr	r3, [sp, #88]	; 0x58
   1f314:	cmp	r3, #0
   1f318:	mov	r9, r0
   1f31c:	beq	1f4b8 <_start@@Base+0xa42c>
   1f320:	ldr	r8, [pc, #-1244]	; 1ee4c <_start@@Base+0x9dc0>
   1f324:	mov	r7, #1
   1f328:	add	r5, sp, #112	; 0x70
   1f32c:	b	1f35c <_start@@Base+0xa2d0>
   1f330:	ldrb	r2, [sp, #112]	; 0x70
   1f334:	mov	r1, r0
   1f338:	add	r3, sp, #88	; 0x58
   1f33c:	strb	r2, [r4]
   1f340:	mov	r0, fp
   1f344:	mov	r2, sl
   1f348:	bl	19938 <_start@@Base+0x48ac>
   1f34c:	ldr	r3, [sp, #88]	; 0x58
   1f350:	cmp	r3, #0
   1f354:	mov	r9, r0
   1f358:	beq	1f4b8 <_start@@Base+0xa42c>
   1f35c:	mov	r1, r7
   1f360:	ldr	r0, [fp]
   1f364:	strb	r6, [sp, #112]	; 0x70
   1f368:	bl	26c9c <flatcc_builder_extend_vector@@Base>
   1f36c:	mov	r1, r9
   1f370:	mov	r3, r5
   1f374:	mov	r2, sl
   1f378:	subs	r4, r0, #0
   1f37c:	mov	r0, fp
   1f380:	beq	1ba54 <_start@@Base+0x69c8>
   1f384:	bl	175c8 <_start@@Base+0x253c>
   1f388:	cmp	r0, r9
   1f38c:	bne	1f330 <_start@@Base+0xa2a4>
   1f390:	str	r5, [sp]
   1f394:	mov	r3, r8
   1f398:	mov	r2, sl
   1f39c:	mov	r1, r9
   1f3a0:	mov	r0, fp
   1f3a4:	bl	1834c <_start@@Base+0x32c0>
   1f3a8:	cmp	sl, r0
   1f3ac:	cmpne	r0, r9
   1f3b0:	bne	1f330 <_start@@Base+0xa2a4>
   1f3b4:	mov	r9, r0
   1f3b8:	b	1ba54 <_start@@Base+0x69c8>
   1f3bc:	mov	r4, r0
   1f3c0:	mov	r1, r4
   1f3c4:	mov	r2, sl
   1f3c8:	mov	r0, fp
   1f3cc:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f3d0:	mov	r9, r0
   1f3d4:	b	1bee0 <_start@@Base+0x6e54>
   1f3d8:	mov	r9, r4
   1f3dc:	b	1ba54 <_start@@Base+0x69c8>
   1f3e0:	mov	r4, r0
   1f3e4:	mov	r1, r4
   1f3e8:	mov	r2, sl
   1f3ec:	mov	r0, fp
   1f3f0:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f3f4:	mov	r9, r0
   1f3f8:	b	1bee0 <_start@@Base+0x6e54>
   1f3fc:	mov	r9, r4
   1f400:	b	1ba54 <_start@@Base+0x69c8>
   1f404:	mov	r1, r0
   1f408:	str	r4, [sp]
   1f40c:	ldr	r3, [pc, #-1476]	; 1ee50 <_start@@Base+0x9dc4>
   1f410:	mov	r2, sl
   1f414:	mov	r0, fp
   1f418:	bl	18184 <_start@@Base+0x30f8>
   1f41c:	cmp	sl, r0
   1f420:	cmpne	r9, r0
   1f424:	mov	r9, r0
   1f428:	bne	1e584 <_start@@Base+0x94f8>
   1f42c:	b	1ba54 <_start@@Base+0x69c8>
   1f430:	mov	r1, r9
   1f434:	mov	r2, sl
   1f438:	mov	r0, fp
   1f43c:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f440:	mov	r9, r0
   1f444:	b	1bee0 <_start@@Base+0x6e54>
   1f448:	mov	r1, r0
   1f44c:	str	r4, [sp]
   1f450:	ldr	r3, [pc, #-1540]	; 1ee54 <_start@@Base+0x9dc8>
   1f454:	mov	r2, sl
   1f458:	mov	r0, fp
   1f45c:	bl	18a2c <_start@@Base+0x39a0>
   1f460:	cmp	sl, r0
   1f464:	cmpne	r9, r0
   1f468:	mov	r9, r0
   1f46c:	bne	1e6ec <_start@@Base+0x9660>
   1f470:	b	1ba54 <_start@@Base+0x69c8>
   1f474:	mov	r4, r0
   1f478:	mov	r1, r4
   1f47c:	mov	r2, sl
   1f480:	mov	r0, fp
   1f484:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f488:	mov	r9, r0
   1f48c:	b	1bee0 <_start@@Base+0x6e54>
   1f490:	mov	r9, r4
   1f494:	b	1ba54 <_start@@Base+0x69c8>
   1f498:	mov	r9, r0
   1f49c:	b	1ba54 <_start@@Base+0x69c8>
   1f4a0:	mov	r1, r9
   1f4a4:	mov	r2, sl
   1f4a8:	mov	r0, fp
   1f4ac:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f4b0:	mov	r9, r0
   1f4b4:	b	1bee0 <_start@@Base+0x6e54>
   1f4b8:	ldr	r0, [fp]
   1f4bc:	bl	28ce8 <flatcc_builder_end_vector@@Base>
   1f4c0:	str	r0, [sp, #92]	; 0x5c
   1f4c4:	b	1eddc <_start@@Base+0x9d50>
   1f4c8:	mov	r9, r4
   1f4cc:	b	1ba54 <_start@@Base+0x69c8>
   1f4d0:	mov	r4, r9
   1f4d4:	mov	r1, r4
   1f4d8:	mov	r2, sl
   1f4dc:	mov	r0, fp
   1f4e0:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f4e4:	mov	r9, r0
   1f4e8:	b	1bee0 <_start@@Base+0x6e54>
   1f4ec:	mov	r1, r0
   1f4f0:	str	r4, [sp]
   1f4f4:	ldr	r3, [pc, #-1700]	; 1ee58 <_start@@Base+0x9dcc>
   1f4f8:	mov	r2, sl
   1f4fc:	mov	r0, fp
   1f500:	bl	18bf0 <_start@@Base+0x3b64>
   1f504:	cmp	sl, r0
   1f508:	cmpne	r9, r0
   1f50c:	mov	r9, r0
   1f510:	bne	1eec4 <_start@@Base+0x9e38>
   1f514:	b	1ba54 <_start@@Base+0x69c8>
   1f518:	str	r5, [sp]
   1f51c:	ldr	r3, [pc, #-1736]	; 1ee5c <_start@@Base+0x9dd0>
   1f520:	mov	r2, sl
   1f524:	mov	r1, r4
   1f528:	mov	r0, fp
   1f52c:	bl	14628 <__assert_fail@plt+0x10>
   1f530:	cmp	sl, r0
   1f534:	cmpne	r4, r0
   1f538:	mov	r9, r0
   1f53c:	bne	1f0b8 <_start@@Base+0xa02c>
   1f540:	b	1ba54 <_start@@Base+0x69c8>
   1f544:	mov	r4, r9
   1f548:	mov	r1, r4
   1f54c:	mov	r2, sl
   1f550:	mov	r0, fp
   1f554:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f558:	mov	r9, r0
   1f55c:	b	1bee0 <_start@@Base+0x6e54>
   1f560:	mov	r4, r9
   1f564:	mov	r1, r4
   1f568:	mov	r2, sl
   1f56c:	mov	r0, fp
   1f570:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f574:	mov	r9, r0
   1f578:	b	1bee0 <_start@@Base+0x6e54>
   1f57c:	mov	r1, r9
   1f580:	mov	r2, sl
   1f584:	mov	r0, fp
   1f588:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   1f58c:	mov	r9, r0
   1f590:	b	1bee0 <_start@@Base+0x6e54>
   1f594:	strd	r6, [sp, #40]	; 0x28
   1f598:	mov	r4, r0
   1f59c:	b	1e2bc <_start@@Base+0x9230>
   1f5a0:	mov	r1, r0
   1f5a4:	str	r4, [sp]
   1f5a8:	ldr	r3, [pc, #-1872]	; 1ee60 <_start@@Base+0x9dd4>
   1f5ac:	mov	r2, sl
   1f5b0:	mov	r0, fp
   1f5b4:	bl	1887c <_start@@Base+0x37f0>
   1f5b8:	cmp	sl, r0
   1f5bc:	cmpne	r9, r0
   1f5c0:	mov	r9, r0
   1f5c4:	bne	1f26c <_start@@Base+0xa1e0>
   1f5c8:	b	1ba54 <_start@@Base+0x69c8>
   1f5cc:	mov	r4, r0
   1f5d0:	b	1e664 <_start@@Base+0x95d8>
   1f5d4:	mov	r1, r0
   1f5d8:	str	r5, [sp]
   1f5dc:	ldr	r3, [pc, #-1920]	; 1ee64 <_start@@Base+0x9dd8>
   1f5e0:	mov	r2, sl
   1f5e4:	mov	r0, fp
   1f5e8:	bl	1887c <_start@@Base+0x37f0>
   1f5ec:	cmp	sl, r0
   1f5f0:	cmpne	r9, r0
   1f5f4:	mov	r9, r0
   1f5f8:	bne	1e7b4 <_start@@Base+0x9728>
   1f5fc:	b	1ba54 <_start@@Base+0x69c8>
   1f600:	mov	r1, r0
   1f604:	str	r4, [sp]
   1f608:	ldr	r3, [pc, #-1960]	; 1ee68 <_start@@Base+0x9ddc>
   1f60c:	mov	r2, sl
   1f610:	mov	r0, fp
   1f614:	bl	18a2c <_start@@Base+0x39a0>
   1f618:	cmp	sl, r0
   1f61c:	cmpne	r9, r0
   1f620:	mov	r9, r0
   1f624:	bne	1cc4c <_start@@Base+0x7bc0>
   1f628:	b	1ba54 <_start@@Base+0x69c8>
   1f62c:	mov	r4, r0
   1f630:	b	1cdbc <_start@@Base+0x7d30>
   1f634:	mov	r4, r0
   1f638:	b	1cc98 <_start@@Base+0x7c0c>
   1f63c:	mov	r4, r0
   1f640:	b	1ca80 <_start@@Base+0x79f4>
   1f644:	mov	r9, r0
   1f648:	b	1c5d8 <_start@@Base+0x754c>
   1f64c:	mov	r4, r0
   1f650:	b	1c518 <_start@@Base+0x748c>
   1f654:	mov	r1, r0
   1f658:	str	r5, [sp]
   1f65c:	ldr	r3, [pc, #-2040]	; 1ee6c <_start@@Base+0x9de0>
   1f660:	mov	r2, sl
   1f664:	mov	r0, fp
   1f668:	bl	14628 <__assert_fail@plt+0x10>
   1f66c:	cmp	sl, r0
   1f670:	cmpne	r9, r0
   1f674:	mov	r9, r0
   1f678:	bne	1c658 <_start@@Base+0x75cc>
   1f67c:	b	1ba54 <_start@@Base+0x69c8>
   1f680:	mov	r1, r0
   1f684:	str	r5, [sp]
   1f688:	ldr	r3, [pc, #-2080]	; 1ee70 <_start@@Base+0x9de4>
   1f68c:	mov	r2, sl
   1f690:	mov	r0, fp
   1f694:	bl	18bf0 <_start@@Base+0x3b64>
   1f698:	cmp	sl, r0
   1f69c:	cmpne	r9, r0
   1f6a0:	mov	r9, r0
   1f6a4:	bne	1cb38 <_start@@Base+0x7aac>
   1f6a8:	b	1ba54 <_start@@Base+0x69c8>
   1f6ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f6b0:	mov	r5, r2
   1f6b4:	sub	r2, r2, r1
   1f6b8:	cmp	r2, #8
   1f6bc:	sub	sp, sp, #8
   1f6c0:	mov	r4, r1
   1f6c4:	mov	r8, r0
   1f6c8:	mov	r9, r3
   1f6cc:	bls	1f798 <_start@@Base+0xa70c>
   1f6d0:	ldrb	r6, [r4, #7]
   1f6d4:	mov	r7, #0
   1f6d8:	ldrb	r2, [r4, #6]
   1f6dc:	lsr	r1, r2, #24
   1f6e0:	lsl	r0, r2, #8
   1f6e4:	orr	r6, r6, r0
   1f6e8:	orr	r7, r7, r1
   1f6ec:	ldrb	r2, [r4, #5]
   1f6f0:	lsr	r1, r2, #16
   1f6f4:	lsl	r0, r2, #16
   1f6f8:	orr	r0, r0, r6
   1f6fc:	orr	r1, r1, r7
   1f700:	ldrb	r2, [r4, #4]
   1f704:	lsr	r7, r2, #8
   1f708:	lsl	r6, r2, #24
   1f70c:	orr	r6, r6, r0
   1f710:	orr	r7, r7, r1
   1f714:	ldrb	r1, [r4, #3]
   1f718:	mov	r0, #0
   1f71c:	orr	r6, r6, r0
   1f720:	orr	r7, r7, r1
   1f724:	ldrb	r2, [r4, #2]
   1f728:	mov	r0, #0
   1f72c:	orr	r6, r6, r0
   1f730:	lsl	r1, r2, #8
   1f734:	orr	r7, r7, r1
   1f738:	ldrb	r2, [r4, #1]
   1f73c:	mov	r0, #0
   1f740:	orr	r0, r0, r6
   1f744:	lsl	r1, r2, #16
   1f748:	orr	r1, r1, r7
   1f74c:	ldrb	r2, [r4]
   1f750:	mov	r6, #0
   1f754:	orr	r0, r0, r6
   1f758:	lsl	r7, r2, #24
   1f75c:	add	r3, pc, #380	; 0x17c
   1f760:	ldrd	r2, [r3]
   1f764:	orr	r1, r1, r7
   1f768:	cmp	r1, r3
   1f76c:	cmpeq	r0, r2
   1f770:	beq	1f7c8 <_start@@Base+0xa73c>
   1f774:	add	r3, pc, #364	; 0x16c
   1f778:	ldrd	r2, [r3]
   1f77c:	mov	r0, #0
   1f780:	cmp	r1, r3
   1f784:	cmpeq	r0, r2
   1f788:	beq	1f848 <_start@@Base+0xa7bc>
   1f78c:	mov	r0, r4
   1f790:	add	sp, sp, #8
   1f794:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f798:	sub	r2, r2, #1
   1f79c:	cmp	r2, #7
   1f7a0:	ldrls	pc, [pc, r2, lsl #2]
   1f7a4:	b	1f78c <_start@@Base+0xa700>
   1f7a8:	andeq	pc, r1, r8, lsl #17
   1f7ac:	muleq	r1, r4, r8
   1f7b0:	andeq	pc, r1, r0, lsr #17
   1f7b4:	andeq	pc, r1, ip, lsr #17
   1f7b8:			; <UNDEFINED> instruction: 0x0001f8b8
   1f7bc:	andeq	pc, r1, r4, asr #17
   1f7c0:	ldrdeq	pc, [r1], -r0
   1f7c4:	ldrdeq	pc, [r1], -r0
   1f7c8:	mov	r1, r5
   1f7cc:	add	r0, r4, #8
   1f7d0:	bl	151b8 <_start@@Base+0x12c>
   1f7d4:	add	r3, pc, #276	; 0x114
   1f7d8:	ldrd	r2, [r3]
   1f7dc:	cmp	r1, r3
   1f7e0:	cmpeq	r0, r2
   1f7e4:	bne	1f78c <_start@@Base+0xa700>
   1f7e8:	add	sl, r4, #16
   1f7ec:	mov	r0, sl
   1f7f0:	mov	r1, r5
   1f7f4:	bl	151b8 <_start@@Base+0x12c>
   1f7f8:	mov	r0, #0
   1f7fc:	and	r1, r1, #-16777216	; 0xff000000
   1f800:	cmp	r1, #1694498816	; 0x65000000
   1f804:	cmpeq	r0, #0
   1f808:	bne	1f78c <_start@@Base+0xa700>
   1f80c:	ldr	r3, [sp, #44]	; 0x2c
   1f810:	mov	r2, r5
   1f814:	str	r3, [sp]
   1f818:	mov	r0, r8
   1f81c:	mov	r3, #1
   1f820:	mov	r1, sl
   1f824:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   1f828:	cmp	sl, r0
   1f82c:	beq	1f78c <_start@@Base+0xa700>
   1f830:	ldr	r1, [sp, #40]	; 0x28
   1f834:	mov	r2, #1
   1f838:	mov	r3, #0
   1f83c:	strd	r2, [r1]
   1f840:	str	r6, [r9]
   1f844:	b	1f790 <_start@@Base+0xa704>
   1f848:	ldr	r3, [sp, #44]	; 0x2c
   1f84c:	mov	r2, r5
   1f850:	str	r3, [sp]
   1f854:	mov	r0, r8
   1f858:	mov	r3, #4
   1f85c:	mov	r1, r4
   1f860:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   1f864:	cmp	r4, r0
   1f868:	beq	1f790 <_start@@Base+0xa704>
   1f86c:	ldr	r1, [sp, #40]	; 0x28
   1f870:	mov	r2, #0
   1f874:	mov	r3, #0
   1f878:	strd	r2, [r1]
   1f87c:	str	r6, [r9]
   1f880:	add	sp, sp, #8
   1f884:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f888:	mov	r0, #0
   1f88c:	mov	r1, #0
   1f890:	b	1f74c <_start@@Base+0xa6c0>
   1f894:	mov	r6, #0
   1f898:	mov	r7, #0
   1f89c:	b	1f738 <_start@@Base+0xa6ac>
   1f8a0:	mov	r6, #0
   1f8a4:	mov	r7, #0
   1f8a8:	b	1f724 <_start@@Base+0xa698>
   1f8ac:	mov	r6, #0
   1f8b0:	mov	r7, #0
   1f8b4:	b	1f714 <_start@@Base+0xa688>
   1f8b8:	mov	r0, #0
   1f8bc:	mov	r1, #0
   1f8c0:	b	1f700 <_start@@Base+0xa674>
   1f8c4:	mov	r6, #0
   1f8c8:	mov	r7, #0
   1f8cc:	b	1f6ec <_start@@Base+0xa660>
   1f8d0:	mov	r6, #0
   1f8d4:	mov	r7, #0
   1f8d8:	b	1f6d8 <_start@@Base+0xa64c>
   1f8dc:	nop			; (mov r0, r0)
   1f8e0:	rsbvc	r6, r5, #116, 28	; 0x740
   1f8e4:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   1f8e8:	andeq	r0, r0, r0
   1f8ec:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   1f8f0:	cmnvc	r0, #-1073741800	; 0xc0000018
   1f8f4:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   1f8f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f8fc:	mov	r6, r1
   1f900:	sub	r1, r2, r1
   1f904:	cmp	r1, #8
   1f908:	sub	sp, sp, #12
   1f90c:	mov	r7, r3
   1f910:	bls	1f9f0 <_start@@Base+0xa964>
   1f914:	ldrb	sl, [r6, #7]
   1f918:	mov	fp, #0
   1f91c:	ldrb	r4, [r6, #6]
   1f920:	lsr	r9, r4, #24
   1f924:	lsl	r8, r4, #8
   1f928:	orr	sl, sl, r8
   1f92c:	orr	fp, fp, r9
   1f930:	ldrb	r4, [r6, #5]
   1f934:	lsr	r9, r4, #16
   1f938:	lsl	r8, r4, #16
   1f93c:	orr	r8, r8, sl
   1f940:	orr	r9, r9, fp
   1f944:	ldrb	r4, [r6, #4]
   1f948:	lsr	fp, r4, #8
   1f94c:	lsl	sl, r4, #24
   1f950:	orr	sl, sl, r8
   1f954:	orr	fp, fp, r9
   1f958:	ldrb	r9, [r6, #3]
   1f95c:	mov	r8, #0
   1f960:	orr	sl, sl, r8
   1f964:	orr	fp, fp, r9
   1f968:	ldrb	r4, [r6, #2]
   1f96c:	mov	r8, #0
   1f970:	orr	sl, sl, r8
   1f974:	lsl	r9, r4, #8
   1f978:	orr	fp, fp, r9
   1f97c:	ldrb	r4, [r6, #1]
   1f980:	mov	r8, #0
   1f984:	orr	r8, r8, sl
   1f988:	lsl	r9, r4, #16
   1f98c:	orr	r9, r9, fp
   1f990:	ldrb	sl, [r6]
   1f994:	mov	r4, #0
   1f998:	orr	r4, r4, r8
   1f99c:	lsl	r5, sl, #24
   1f9a0:	add	fp, pc, #392	; 0x188
   1f9a4:	ldrd	sl, [fp]
   1f9a8:	orr	r5, r5, r9
   1f9ac:	cmp	r5, fp
   1f9b0:	cmpeq	r4, sl
   1f9b4:	bls	1fa20 <_start@@Base+0xa994>
   1f9b8:	add	fp, pc, #376	; 0x178
   1f9bc:	ldrd	sl, [fp]
   1f9c0:	mov	r4, #0
   1f9c4:	cmp	r5, fp
   1f9c8:	cmpeq	r4, sl
   1f9cc:	beq	1fb0c <_start@@Base+0xaa80>
   1f9d0:	add	r9, pc, #360	; 0x168
   1f9d4:	ldrd	r8, [r9]
   1f9d8:	cmp	r5, r9
   1f9dc:	cmpeq	r4, r8
   1f9e0:	beq	1fa7c <_start@@Base+0xa9f0>
   1f9e4:	mov	r0, r6
   1f9e8:	add	sp, sp, #12
   1f9ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f9f0:	sub	r1, r1, #1
   1f9f4:	cmp	r1, #7
   1f9f8:	ldrls	pc, [pc, r1, lsl #2]
   1f9fc:	b	1f9e4 <_start@@Base+0xa958>
   1fa00:			; <UNDEFINED> instruction: 0x0001fab8
   1fa04:	ldrdeq	pc, [r1], -ip
   1fa08:	andeq	pc, r1, r8, ror #21
   1fa0c:	strdeq	pc, [r1], -r4
   1fa10:	andeq	pc, r1, r0, lsl #22
   1fa14:	andeq	pc, r1, r4, asr #21
   1fa18:	ldrdeq	pc, [r1], -r0
   1fa1c:	andeq	pc, r1, r4, lsl r9	; <UNPREDICTABLE>
   1fa20:	add	fp, pc, #288	; 0x120
   1fa24:	ldrd	sl, [fp]
   1fa28:	mov	r4, #0
   1fa2c:	cmp	r5, fp
   1fa30:	cmpeq	r4, sl
   1fa34:	bne	1f9e4 <_start@@Base+0xa958>
   1fa38:	ldr	r3, [sp, #52]	; 0x34
   1fa3c:	mov	r1, r6
   1fa40:	str	r3, [sp]
   1fa44:	mov	r3, #4
   1fa48:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   1fa4c:	cmp	r6, r0
   1fa50:	mvnne	r4, #11
   1fa54:	beq	1f9e4 <_start@@Base+0xa958>
   1fa58:	ldr	r2, [sp, #48]	; 0x30
   1fa5c:	mvn	r5, #0
   1fa60:	mov	r3, #1
   1fa64:	mov	r6, r0
   1fa68:	strd	r4, [r2]
   1fa6c:	mov	r0, r6
   1fa70:	str	r3, [r7]
   1fa74:	add	sp, sp, #12
   1fa78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa7c:	ldr	r3, [sp, #52]	; 0x34
   1fa80:	mov	r1, r6
   1fa84:	str	r3, [sp]
   1fa88:	mov	r3, #4
   1fa8c:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   1fa90:	cmp	r6, r0
   1fa94:	beq	1f9e4 <_start@@Base+0xa958>
   1fa98:	ldr	r2, [sp, #48]	; 0x30
   1fa9c:	mov	r6, r0
   1faa0:	mvn	r1, #0
   1faa4:	mvn	r0, #10
   1faa8:	mov	r3, #1
   1faac:	strd	r0, [r2]
   1fab0:	str	r3, [r7]
   1fab4:	b	1f9e4 <_start@@Base+0xa958>
   1fab8:	mov	r8, #0
   1fabc:	mov	r9, #0
   1fac0:	b	1f990 <_start@@Base+0xa904>
   1fac4:	mov	sl, #0
   1fac8:	mov	fp, #0
   1facc:	b	1f930 <_start@@Base+0xa8a4>
   1fad0:	mov	sl, #0
   1fad4:	mov	fp, #0
   1fad8:	b	1f91c <_start@@Base+0xa890>
   1fadc:	mov	sl, #0
   1fae0:	mov	fp, #0
   1fae4:	b	1f97c <_start@@Base+0xa8f0>
   1fae8:	mov	sl, #0
   1faec:	mov	fp, #0
   1faf0:	b	1f968 <_start@@Base+0xa8dc>
   1faf4:	mov	sl, #0
   1faf8:	mov	fp, #0
   1fafc:	b	1f958 <_start@@Base+0xa8cc>
   1fb00:	mov	r8, #0
   1fb04:	mov	r9, #0
   1fb08:	b	1f944 <_start@@Base+0xa8b8>
   1fb0c:	ldr	r3, [sp, #52]	; 0x34
   1fb10:	mov	r1, r6
   1fb14:	str	r3, [sp]
   1fb18:	mov	r3, #4
   1fb1c:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   1fb20:	cmp	r6, r0
   1fb24:	beq	1f9e4 <_start@@Base+0xa958>
   1fb28:	mvn	r4, #9
   1fb2c:	b	1fa58 <_start@@Base+0xa9cc>
   1fb30:			; <UNDEFINED> instruction: 0xffffffff
   1fb34:	mcrvs	7, 3, r6, cr5, cr1, {1}
   1fb38:	andeq	r0, r0, r0
   1fb3c:	mcrvs	7, 3, r6, cr5, cr3, {1}
   1fb40:	andeq	r0, r0, r0
   1fb44:	mcrvs	7, 3, r6, cr5, cr2, {1}
   1fb48:	andeq	r0, r0, r0
   1fb4c:	mcrvs	7, 3, r6, cr5, cr1, {1}
   1fb50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb54:	mov	r6, r1
   1fb58:	sub	r1, r2, r1
   1fb5c:	cmp	r1, #8
   1fb60:	sub	sp, sp, #12
   1fb64:	mov	ip, r0
   1fb68:	mov	r7, r3
   1fb6c:	bls	1fc5c <_start@@Base+0xabd0>
   1fb70:	ldrb	r8, [r6, #7]
   1fb74:	mov	r9, #0
   1fb78:	ldrb	r0, [r6, #6]
   1fb7c:	lsr	r5, r0, #24
   1fb80:	lsl	r4, r0, #8
   1fb84:	orr	r8, r8, r4
   1fb88:	orr	r9, r9, r5
   1fb8c:	ldrb	r0, [r6, #5]
   1fb90:	lsr	r5, r0, #16
   1fb94:	lsl	r4, r0, #16
   1fb98:	orr	r4, r4, r8
   1fb9c:	orr	r5, r5, r9
   1fba0:	ldrb	r0, [r6, #4]
   1fba4:	lsr	r9, r0, #8
   1fba8:	lsl	r8, r0, #24
   1fbac:	orr	r8, r8, r4
   1fbb0:	orr	r9, r9, r5
   1fbb4:	ldrb	r1, [r6, #3]
   1fbb8:	mov	r0, #0
   1fbbc:	orr	r8, r8, r0
   1fbc0:	orr	r9, r9, r1
   1fbc4:	ldrb	r4, [r6, #2]
   1fbc8:	mov	r0, #0
   1fbcc:	orr	r8, r8, r0
   1fbd0:	lsl	r1, r4, #8
   1fbd4:	orr	r9, r9, r1
   1fbd8:	ldrb	r4, [r6, #1]
   1fbdc:	mov	r0, #0
   1fbe0:	orr	r0, r0, r8
   1fbe4:	lsl	r1, r4, #16
   1fbe8:	orr	r1, r1, r9
   1fbec:	ldrb	r8, [r6]
   1fbf0:	mov	r4, #0
   1fbf4:	orr	r0, r0, r4
   1fbf8:	lsl	r5, r8, #24
   1fbfc:	add	r9, pc, #428	; 0x1ac
   1fc00:	ldrd	r8, [r9]
   1fc04:	orr	r1, r1, r5
   1fc08:	cmp	r1, r9
   1fc0c:	cmpeq	r0, r8
   1fc10:	bls	1fc8c <_start@@Base+0xac00>
   1fc14:	add	fp, pc, #412	; 0x19c
   1fc18:	ldrd	sl, [fp]
   1fc1c:	ldr	r8, [pc, #436]	; 1fdd8 <_start@@Base+0xad4c>
   1fc20:	mvn	r9, #0
   1fc24:	and	r9, r9, r1
   1fc28:	and	r8, r8, r0
   1fc2c:	cmp	r9, fp
   1fc30:	cmpeq	r8, sl
   1fc34:	beq	1fd70 <_start@@Base+0xace4>
   1fc38:	add	r9, pc, #384	; 0x180
   1fc3c:	ldrd	r8, [r9]
   1fc40:	mov	r0, #0
   1fc44:	cmp	r1, r9
   1fc48:	cmpeq	r0, r8
   1fc4c:	beq	1fce0 <_start@@Base+0xac54>
   1fc50:	mov	r0, r6
   1fc54:	add	sp, sp, #12
   1fc58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc5c:	sub	r1, r1, #1
   1fc60:	cmp	r1, #7
   1fc64:	ldrls	pc, [pc, r1, lsl #2]
   1fc68:	b	1fc50 <_start@@Base+0xabc4>
   1fc6c:	andeq	pc, r1, ip, lsl sp	; <UNPREDICTABLE>
   1fc70:	andeq	pc, r1, r0, asr #26
   1fc74:	andeq	pc, r1, ip, asr #26
   1fc78:	andeq	pc, r1, r8, asr sp	; <UNPREDICTABLE>
   1fc7c:	andeq	pc, r1, r4, ror #26
   1fc80:	andeq	pc, r1, r8, lsr #26
   1fc84:	andeq	pc, r1, r4, lsr sp	; <UNPREDICTABLE>
   1fc88:	andeq	pc, r1, r0, ror fp	; <UNPREDICTABLE>
   1fc8c:	add	r9, pc, #308	; 0x134
   1fc90:	ldrd	r8, [r9]
   1fc94:	mov	r0, #0
   1fc98:	cmp	r1, r9
   1fc9c:	cmpeq	r0, r8
   1fca0:	bne	1fc50 <_start@@Base+0xabc4>
   1fca4:	ldr	r3, [sp, #52]	; 0x34
   1fca8:	mov	r0, ip
   1fcac:	str	r3, [sp]
   1fcb0:	mov	r1, r6
   1fcb4:	mov	r3, #4
   1fcb8:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   1fcbc:	cmp	r6, r0
   1fcc0:	beq	1fc50 <_start@@Base+0xabc4>
   1fcc4:	ldr	r1, [sp, #48]	; 0x30
   1fcc8:	mov	r2, #3
   1fccc:	mov	r3, #0
   1fcd0:	mov	r6, r0
   1fcd4:	strd	r2, [r1]
   1fcd8:	str	r4, [r7]
   1fcdc:	b	1fc50 <_start@@Base+0xabc4>
   1fce0:	ldr	r3, [sp, #52]	; 0x34
   1fce4:	mov	r0, ip
   1fce8:	str	r3, [sp]
   1fcec:	mov	r1, r6
   1fcf0:	mov	r3, #4
   1fcf4:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   1fcf8:	cmp	r6, r0
   1fcfc:	beq	1fc50 <_start@@Base+0xabc4>
   1fd00:	add	r3, pc, #200	; 0xc8
   1fd04:	ldrd	r2, [r3]
   1fd08:	ldr	r1, [sp, #48]	; 0x30
   1fd0c:	mov	r6, r0
   1fd10:	strd	r2, [r1]
   1fd14:	str	r4, [r7]
   1fd18:	b	1fc50 <_start@@Base+0xabc4>
   1fd1c:	mov	r0, #0
   1fd20:	mov	r1, #0
   1fd24:	b	1fbec <_start@@Base+0xab60>
   1fd28:	mov	r8, #0
   1fd2c:	mov	r9, #0
   1fd30:	b	1fb8c <_start@@Base+0xab00>
   1fd34:	mov	r8, #0
   1fd38:	mov	r9, #0
   1fd3c:	b	1fb78 <_start@@Base+0xaaec>
   1fd40:	mov	r8, #0
   1fd44:	mov	r9, #0
   1fd48:	b	1fbd8 <_start@@Base+0xab4c>
   1fd4c:	mov	r8, #0
   1fd50:	mov	r9, #0
   1fd54:	b	1fbc4 <_start@@Base+0xab38>
   1fd58:	mov	r8, #0
   1fd5c:	mov	r9, #0
   1fd60:	b	1fbb4 <_start@@Base+0xab28>
   1fd64:	mov	r4, #0
   1fd68:	mov	r5, #0
   1fd6c:	b	1fba0 <_start@@Base+0xab14>
   1fd70:	ldr	r3, [sp, #52]	; 0x34
   1fd74:	mov	r0, ip
   1fd78:	str	r3, [sp]
   1fd7c:	mov	r1, r6
   1fd80:	mov	r3, #6
   1fd84:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   1fd88:	cmp	r6, r0
   1fd8c:	beq	1fc50 <_start@@Base+0xabc4>
   1fd90:	ldr	r2, [sp, #48]	; 0x30
   1fd94:	mvn	r4, #1
   1fd98:	mvn	r5, #0
   1fd9c:	mov	r3, #1
   1fda0:	strd	r4, [r2]
   1fda4:	mov	r6, r0
   1fda8:	str	r3, [r7]
   1fdac:	b	1fc50 <_start@@Base+0xabc4>
   1fdb0:			; <UNDEFINED> instruction: 0xffffffff
   1fdb4:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   1fdb8:	strbvs	r0, [r7, #-0]!
   1fdbc:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   1fdc0:	andeq	r0, r0, r0
   1fdc4:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   1fdc8:	andeq	r0, r0, r0
   1fdcc:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   1fdd0:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   1fdd4:	andeq	r0, r0, r0
   1fdd8:			; <UNDEFINED> instruction: 0xffff0000
   1fddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fde0:	mov	r6, r1
   1fde4:	sub	r1, r2, r1
   1fde8:	cmp	r1, #8
   1fdec:	sub	sp, sp, #12
   1fdf0:	mov	ip, r0
   1fdf4:	mov	r7, r3
   1fdf8:	bls	1fee0 <_start@@Base+0xae54>
   1fdfc:	ldrb	r8, [r6, #7]
   1fe00:	mov	r9, #0
   1fe04:	ldrb	r0, [r6, #6]
   1fe08:	lsr	r5, r0, #24
   1fe0c:	lsl	r4, r0, #8
   1fe10:	orr	r8, r8, r4
   1fe14:	orr	r9, r9, r5
   1fe18:	ldrb	r0, [r6, #5]
   1fe1c:	lsr	r5, r0, #16
   1fe20:	lsl	r4, r0, #16
   1fe24:	orr	r4, r4, r8
   1fe28:	orr	r5, r5, r9
   1fe2c:	ldrb	r0, [r6, #4]
   1fe30:	lsr	r9, r0, #8
   1fe34:	lsl	r8, r0, #24
   1fe38:	orr	r8, r8, r4
   1fe3c:	orr	r9, r9, r5
   1fe40:	ldrb	r1, [r6, #3]
   1fe44:	mov	r0, #0
   1fe48:	orr	r8, r8, r0
   1fe4c:	orr	r9, r9, r1
   1fe50:	ldrb	r4, [r6, #2]
   1fe54:	mov	r0, #0
   1fe58:	orr	r8, r8, r0
   1fe5c:	lsl	r1, r4, #8
   1fe60:	orr	r9, r9, r1
   1fe64:	ldrb	r4, [r6, #1]
   1fe68:	mov	r0, #0
   1fe6c:	orr	r0, r0, r8
   1fe70:	lsl	r1, r4, #16
   1fe74:	orr	r1, r1, r9
   1fe78:	ldrb	r8, [r6]
   1fe7c:	mov	r4, #0
   1fe80:	orr	r0, r0, r4
   1fe84:	lsl	r5, r8, #24
   1fe88:	add	r9, pc, #408	; 0x198
   1fe8c:	ldrd	r8, [r9]
   1fe90:	orr	r1, r1, r5
   1fe94:	cmp	r1, r9
   1fe98:	cmpeq	r0, r8
   1fe9c:	bls	1ff10 <_start@@Base+0xae84>
   1fea0:	add	r9, pc, #392	; 0x188
   1fea4:	ldrd	r8, [r9]
   1fea8:	bic	fp, r1, #255	; 0xff
   1feac:	mov	sl, #0
   1feb0:	cmp	fp, r9
   1feb4:	cmpeq	sl, r8
   1feb8:	beq	1fffc <_start@@Base+0xaf70>
   1febc:	add	r9, pc, #372	; 0x174
   1fec0:	ldrd	r8, [r9]
   1fec4:	and	r0, r0, #-16777216	; 0xff000000
   1fec8:	cmp	r1, r9
   1fecc:	cmpeq	r0, r8
   1fed0:	beq	1ff6c <_start@@Base+0xaee0>
   1fed4:	mov	r0, r6
   1fed8:	add	sp, sp, #12
   1fedc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fee0:	sub	r1, r1, #1
   1fee4:	cmp	r1, #7
   1fee8:	ldrls	pc, [pc, r1, lsl #2]
   1feec:	b	1fed4 <_start@@Base+0xae48>
   1fef0:	andeq	pc, r1, r8, lsr #31
   1fef4:	andeq	pc, r1, ip, asr #31
   1fef8:	ldrdeq	pc, [r1], -r8
   1fefc:	andeq	pc, r1, r4, ror #31
   1ff00:	strdeq	pc, [r1], -r0
   1ff04:			; <UNDEFINED> instruction: 0x0001ffb4
   1ff08:	andeq	pc, r1, r0, asr #31
   1ff0c:	strdeq	pc, [r1], -ip
   1ff10:	add	r9, pc, #296	; 0x128
   1ff14:	ldrd	r8, [r9]
   1ff18:	mov	r0, #0
   1ff1c:	cmp	r1, r9
   1ff20:	cmpeq	r0, r8
   1ff24:	bne	1fed4 <_start@@Base+0xae48>
   1ff28:	ldr	r3, [sp, #52]	; 0x34
   1ff2c:	mov	r0, ip
   1ff30:	str	r3, [sp]
   1ff34:	mov	r1, r6
   1ff38:	mov	r3, #4
   1ff3c:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   1ff40:	cmp	r6, r0
   1ff44:	movne	r2, #8
   1ff48:	beq	1fed4 <_start@@Base+0xae48>
   1ff4c:	ldr	r1, [sp, #48]	; 0x30
   1ff50:	mov	r3, #0
   1ff54:	mov	r6, r0
   1ff58:	strd	r2, [r1]
   1ff5c:	mov	r0, r6
   1ff60:	str	r4, [r7]
   1ff64:	add	sp, sp, #12
   1ff68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff6c:	ldr	r3, [sp, #52]	; 0x34
   1ff70:	mov	r0, ip
   1ff74:	str	r3, [sp]
   1ff78:	mov	r1, r6
   1ff7c:	mov	r3, #5
   1ff80:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   1ff84:	cmp	r6, r0
   1ff88:	beq	1fed4 <_start@@Base+0xae48>
   1ff8c:	ldr	r1, [sp, #48]	; 0x30
   1ff90:	mov	r2, #2
   1ff94:	mov	r3, #0
   1ff98:	mov	r6, r0
   1ff9c:	strd	r2, [r1]
   1ffa0:	str	r4, [r7]
   1ffa4:	b	1fed4 <_start@@Base+0xae48>
   1ffa8:	mov	r0, #0
   1ffac:	mov	r1, #0
   1ffb0:	b	1fe78 <_start@@Base+0xadec>
   1ffb4:	mov	r8, #0
   1ffb8:	mov	r9, #0
   1ffbc:	b	1fe18 <_start@@Base+0xad8c>
   1ffc0:	mov	r8, #0
   1ffc4:	mov	r9, #0
   1ffc8:	b	1fe04 <_start@@Base+0xad78>
   1ffcc:	mov	r8, #0
   1ffd0:	mov	r9, #0
   1ffd4:	b	1fe64 <_start@@Base+0xadd8>
   1ffd8:	mov	r8, #0
   1ffdc:	mov	r9, #0
   1ffe0:	b	1fe50 <_start@@Base+0xadc4>
   1ffe4:	mov	r8, #0
   1ffe8:	mov	r9, #0
   1ffec:	b	1fe40 <_start@@Base+0xadb4>
   1fff0:	mov	r4, #0
   1fff4:	mov	r5, #0
   1fff8:	b	1fe2c <_start@@Base+0xada0>
   1fffc:	ldr	r3, [sp, #52]	; 0x34
   20000:	mov	r0, ip
   20004:	str	r3, [sp]
   20008:	mov	r1, r6
   2000c:	mov	r3, #3
   20010:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   20014:	cmp	r6, r0
   20018:	beq	1fed4 <_start@@Base+0xae48>
   2001c:	mov	r2, #1
   20020:	b	1ff4c <_start@@Base+0xaec0>
   20024:	nop			; (mov r0, r0)
   20028:	ldclvs	15, cr15, [pc, #1020]!	; 2042c <_start@@Base+0xb3a0>
   2002c:	ldrbmi	r6, [r2, -r5, ror #10]!
   20030:	andeq	r0, r0, r0
   20034:	rsbpl	r6, r5, #0, 8
   20038:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   2003c:	ldrbmi	r6, [r2, -r5, ror #10]!
   20040:	andeq	r0, r0, r0
   20044:	rsbmi	r7, ip, #423624704	; 0x19400000
   20048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2004c:	sub	sp, sp, #700	; 0x2bc
   20050:	mov	sl, r0
   20054:	mov	r0, r3
   20058:	str	r3, [sp, #652]	; 0x28c
   2005c:	mov	r3, #0
   20060:	str	r3, [r0]
   20064:	mov	r4, r1
   20068:	ldr	r0, [sl]
   2006c:	mov	r1, #4
   20070:	mov	fp, r2
   20074:	bl	27fa8 <flatcc_builder_start_table@@Base>
   20078:	cmp	r0, #0
   2007c:	bne	20360 <_start@@Base+0xb2d4>
   20080:	add	r3, sp, #664	; 0x298
   20084:	str	r3, [sp]
   20088:	mov	r2, fp
   2008c:	mov	r3, #1
   20090:	mov	r1, r4
   20094:	mov	r0, sl
   20098:	bl	32598 <flatcc_json_parser_prepare_unions@@Base>
   2009c:	cmp	fp, r0
   200a0:	beq	20360 <_start@@Base+0xb2d4>
   200a4:	mov	r1, r4
   200a8:	add	r3, sp, #656	; 0x290
   200ac:	mov	r2, fp
   200b0:	mov	r0, sl
   200b4:	bl	17c44 <_start@@Base+0x2bb8>
   200b8:	ldr	r3, [sp, #656]	; 0x290
   200bc:	mov	r4, r0
   200c0:	cmp	r3, #0
   200c4:	beq	20354 <_start@@Base+0xb2c8>
   200c8:	mov	r3, fp
   200cc:	mov	fp, sl
   200d0:	mov	sl, r3
   200d4:	cmp	sl, r4
   200d8:	beq	216e0 <_start@@Base+0xc654>
   200dc:	ldrb	r3, [r4]
   200e0:	cmp	r3, #34	; 0x22
   200e4:	bne	2037c <_start@@Base+0xb2f0>
   200e8:	add	r4, r4, #1
   200ec:	sub	r5, sl, r4
   200f0:	cmp	r5, #8
   200f4:	bls	203a0 <_start@@Base+0xb314>
   200f8:	ldrb	r6, [r4, #7]
   200fc:	mov	r7, #0
   20100:	ldrb	r2, [r4, #6]
   20104:	lsl	r3, r2, #8
   20108:	str	r3, [sp, #544]	; 0x220
   2010c:	add	r3, sp, #544	; 0x220
   20110:	lsr	r1, r2, #24
   20114:	str	r1, [sp, #548]	; 0x224
   20118:	ldrd	r2, [r3]
   2011c:	orr	r2, r2, r6
   20120:	orr	r3, r3, r7
   20124:	mov	r6, r2
   20128:	mov	r7, r3
   2012c:	ldrb	r2, [r4, #5]
   20130:	lsl	r3, r2, #16
   20134:	str	r3, [sp, #464]	; 0x1d0
   20138:	add	r3, sp, #464	; 0x1d0
   2013c:	lsr	r1, r2, #16
   20140:	str	r1, [sp, #468]	; 0x1d4
   20144:	ldrd	r2, [r3]
   20148:	orr	r2, r2, r6
   2014c:	orr	r3, r3, r7
   20150:	mov	r6, r2
   20154:	mov	r7, r3
   20158:	ldrb	r2, [r4, #4]
   2015c:	lsl	r3, r2, #24
   20160:	str	r3, [sp, #392]	; 0x188
   20164:	add	r3, sp, #392	; 0x188
   20168:	lsr	r1, r2, #8
   2016c:	str	r1, [sp, #396]	; 0x18c
   20170:	ldrd	r2, [r3]
   20174:	orr	r2, r2, r6
   20178:	orr	r3, r3, r7
   2017c:	mov	r6, r2
   20180:	mov	r7, r3
   20184:	ldrb	r3, [r4, #3]
   20188:	str	r3, [sp, #420]	; 0x1a4
   2018c:	mov	r3, #0
   20190:	str	r3, [sp, #416]	; 0x1a0
   20194:	add	r3, sp, #416	; 0x1a0
   20198:	ldrd	r2, [r3]
   2019c:	orr	r2, r2, r6
   201a0:	orr	r3, r3, r7
   201a4:	mov	r6, r2
   201a8:	mov	r7, r3
   201ac:	ldrb	r2, [r4, #2]
   201b0:	lsl	r3, r2, #8
   201b4:	str	r3, [sp, #380]	; 0x17c
   201b8:	mov	r3, #0
   201bc:	str	r3, [sp, #376]	; 0x178
   201c0:	add	r3, sp, #376	; 0x178
   201c4:	ldrd	r2, [r3]
   201c8:	orr	r2, r2, r6
   201cc:	orr	r3, r3, r7
   201d0:	mov	r6, r2
   201d4:	mov	r7, r3
   201d8:	ldrb	r2, [r4, #1]
   201dc:	lsl	r3, r2, #16
   201e0:	str	r3, [sp, #308]	; 0x134
   201e4:	mov	r3, #0
   201e8:	str	r3, [sp, #304]	; 0x130
   201ec:	add	r3, sp, #304	; 0x130
   201f0:	ldrd	r2, [r3]
   201f4:	orr	r2, r2, r6
   201f8:	orr	r3, r3, r7
   201fc:	mov	r6, r2
   20200:	mov	r7, r3
   20204:	ldrb	r2, [r4]
   20208:	lsl	r3, r2, #24
   2020c:	str	r3, [sp, #268]	; 0x10c
   20210:	mov	r3, #0
   20214:	str	r3, [sp, #264]	; 0x108
   20218:	add	r3, sp, #264	; 0x108
   2021c:	ldrd	r2, [r3]
   20220:	orr	r2, r2, r6
   20224:	orr	r3, r3, r7
   20228:	mov	r6, r2
   2022c:	mov	r7, r3
   20230:	add	r3, pc, #872	; 0x368
   20234:	ldrd	r2, [r3]
   20238:	cmp	r7, r3
   2023c:	cmpeq	r6, r2
   20240:	beq	20424 <_start@@Base+0xb398>
   20244:	add	r3, pc, #860	; 0x35c
   20248:	ldrd	r2, [r3]
   2024c:	bic	r0, r6, #255	; 0xff
   20250:	cmp	r7, r3
   20254:	cmpeq	r0, r2
   20258:	movne	r8, #1
   2025c:	moveq	r8, #0
   20260:	cmp	r5, #7
   20264:	orrle	r8, r8, #1
   20268:	cmp	r8, #0
   2026c:	beq	2179c <_start@@Base+0xc710>
   20270:	add	r1, pc, #824	; 0x338
   20274:	ldrd	r0, [r1]
   20278:	ldr	r2, [pc, #840]	; 205c8 <_start@@Base+0xb53c>
   2027c:	mvn	r3, #0
   20280:	and	r3, r3, r7
   20284:	and	r2, r2, r6
   20288:	cmp	r3, r1
   2028c:	cmpeq	r2, r0
   20290:	beq	205cc <_start@@Base+0xb540>
   20294:	add	r3, pc, #796	; 0x31c
   20298:	ldrd	r2, [r3]
   2029c:	and	r6, r6, #-16777216	; 0xff000000
   202a0:	cmp	r7, r3
   202a4:	cmpeq	r6, r2
   202a8:	bne	202b8 <_start@@Base+0xb22c>
   202ac:	sub	r3, sl, r4
   202b0:	cmp	r3, #5
   202b4:	bgt	21734 <_start@@Base+0xc6a8>
   202b8:	mov	r1, r4
   202bc:	mov	r2, sl
   202c0:	mov	r0, fp
   202c4:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   202c8:	mov	r6, r0
   202cc:	sub	r3, sl, r6
   202d0:	cmp	r3, #1
   202d4:	ble	202e8 <_start@@Base+0xb25c>
   202d8:	ldrb	r3, [r6]
   202dc:	cmp	r3, #32
   202e0:	bhi	202fc <_start@@Base+0xb270>
   202e4:	beq	2154c <_start@@Base+0xc4c0>
   202e8:	mov	r1, r6
   202ec:	mov	r2, sl
   202f0:	mov	r0, fp
   202f4:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   202f8:	mov	r6, r0
   202fc:	cmp	sl, r6
   20300:	beq	21564 <_start@@Base+0xc4d8>
   20304:	ldrb	r3, [r6]
   20308:	cmp	r3, #44	; 0x2c
   2030c:	beq	21688 <_start@@Base+0xc5fc>
   20310:	mov	r3, sl
   20314:	mov	sl, fp
   20318:	mov	fp, r3
   2031c:	mov	r3, #0
   20320:	str	r3, [sp, #656]	; 0x290
   20324:	ldrb	r3, [r6]
   20328:	cmp	r3, #125	; 0x7d
   2032c:	beq	20564 <_start@@Base+0xb4d8>
   20330:	mov	r3, #10
   20334:	mov	r1, r6
   20338:	mov	r2, fp
   2033c:	mov	r0, sl
   20340:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   20344:	ldr	r3, [sp, #656]	; 0x290
   20348:	cmp	r3, #0
   2034c:	mov	r4, r0
   20350:	bne	200c8 <_start@@Base+0xb03c>
   20354:	ldr	r3, [sl, #20]
   20358:	cmp	r3, #0
   2035c:	beq	22e08 <_start@@Base+0xdd7c>
   20360:	mov	r2, fp
   20364:	mov	r1, r4
   20368:	mov	r0, sl
   2036c:	mov	r3, #33	; 0x21
   20370:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   20374:	add	sp, sp, #700	; 0x2bc
   20378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2037c:	mov	r1, r4
   20380:	mov	r3, #5
   20384:	mov	r2, sl
   20388:	mov	r0, fp
   2038c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   20390:	sub	r5, sl, r0
   20394:	cmp	r5, #8
   20398:	mov	r4, r0
   2039c:	bhi	200f8 <_start@@Base+0xb06c>
   203a0:	sub	r3, r5, #1
   203a4:	cmp	r3, #7
   203a8:	ldrls	pc, [pc, r3, lsl #2]
   203ac:	b	216e0 <_start@@Base+0xc654>
   203b0:	andeq	r0, r2, r8, lsl r4
   203b4:	andeq	r0, r2, ip, lsl #8
   203b8:	andeq	r0, r2, r0, lsl #8
   203bc:	strdeq	r0, [r2], -r4
   203c0:	andeq	r0, r2, r8, ror #7
   203c4:	ldrdeq	r0, [r2], -ip
   203c8:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   203cc:	strdeq	r0, [r2], -r8
   203d0:	mov	r6, #0
   203d4:	mov	r7, #0
   203d8:	b	20100 <_start@@Base+0xb074>
   203dc:	mov	r6, #0
   203e0:	mov	r7, #0
   203e4:	b	2012c <_start@@Base+0xb0a0>
   203e8:	mov	r6, #0
   203ec:	mov	r7, #0
   203f0:	b	20158 <_start@@Base+0xb0cc>
   203f4:	mov	r6, #0
   203f8:	mov	r7, #0
   203fc:	b	20184 <_start@@Base+0xb0f8>
   20400:	mov	r6, #0
   20404:	mov	r7, #0
   20408:	b	201ac <_start@@Base+0xb120>
   2040c:	mov	r6, #0
   20410:	mov	r7, #0
   20414:	b	201d8 <_start@@Base+0xb14c>
   20418:	mov	r6, #0
   2041c:	mov	r7, #0
   20420:	b	20204 <_start@@Base+0xb178>
   20424:	add	r5, r4, #8
   20428:	sub	ip, sl, r5
   2042c:	cmp	ip, #8
   20430:	bls	2158c <_start@@Base+0xc500>
   20434:	ldrb	r0, [r4, #14]
   20438:	mov	r3, #0
   2043c:	lsl	r1, r0, #8
   20440:	str	r1, [sp, #640]	; 0x280
   20444:	add	r1, sp, #640	; 0x280
   20448:	lsr	lr, r0, #24
   2044c:	str	lr, [sp, #644]	; 0x284
   20450:	ldrd	r0, [r1]
   20454:	orr	r1, r1, r3
   20458:	mov	r3, r1
   2045c:	ldrb	r0, [r4, #13]
   20460:	lsl	r1, r0, #16
   20464:	str	r1, [sp, #632]	; 0x278
   20468:	add	r1, sp, #632	; 0x278
   2046c:	lsr	lr, r0, #16
   20470:	str	lr, [sp, #636]	; 0x27c
   20474:	ldrd	r0, [r1]
   20478:	orr	r1, r1, r3
   2047c:	mov	r3, r1
   20480:	ldrb	r0, [r4, #12]
   20484:	lsl	r1, r0, #24
   20488:	str	r1, [sp, #608]	; 0x260
   2048c:	add	r1, sp, #608	; 0x260
   20490:	lsr	lr, r0, #8
   20494:	str	lr, [sp, #612]	; 0x264
   20498:	ldrd	r0, [r1]
   2049c:	orr	r1, r1, r3
   204a0:	mov	r3, r1
   204a4:	ldrb	r1, [r4, #11]
   204a8:	str	r1, [sp, #620]	; 0x26c
   204ac:	mov	r1, #0
   204b0:	str	r1, [sp, #616]	; 0x268
   204b4:	add	r1, sp, #616	; 0x268
   204b8:	ldrd	r0, [r1]
   204bc:	orr	r1, r1, r3
   204c0:	mov	r3, r1
   204c4:	ldrb	r0, [r4, #10]
   204c8:	lsl	r1, r0, #8
   204cc:	str	r1, [sp, #596]	; 0x254
   204d0:	mov	r1, #0
   204d4:	str	r1, [sp, #592]	; 0x250
   204d8:	add	r1, sp, #592	; 0x250
   204dc:	ldrd	r0, [r1]
   204e0:	orr	r1, r1, r3
   204e4:	mov	r3, r1
   204e8:	ldrb	r0, [r4, #9]
   204ec:	lsl	r1, r0, #16
   204f0:	str	r1, [sp, #580]	; 0x244
   204f4:	mov	r1, #0
   204f8:	str	r1, [sp, #576]	; 0x240
   204fc:	add	r1, sp, #576	; 0x240
   20500:	ldrd	r0, [r1]
   20504:	orr	r1, r1, r3
   20508:	mov	r3, r1
   2050c:	ldrb	r0, [r4, #8]
   20510:	add	lr, sp, #536	; 0x218
   20514:	mov	r2, #0
   20518:	lsl	r1, r0, #24
   2051c:	str	r1, [sp, #540]	; 0x21c
   20520:	mov	r1, #0
   20524:	str	r1, [sp, #536]	; 0x218
   20528:	ldrd	r6, [lr]
   2052c:	add	r1, pc, #140	; 0x8c
   20530:	ldrd	r0, [r1]
   20534:	orr	r7, r7, r3
   20538:	cmp	r7, r1
   2053c:	cmpeq	r2, r0
   20540:	bne	2054c <_start@@Base+0xb4c0>
   20544:	cmp	ip, #4
   20548:	bgt	222b4 <_start@@Base+0xd228>
   2054c:	mov	r1, r5
   20550:	mov	r2, sl
   20554:	mov	r0, fp
   20558:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   2055c:	mov	r6, r0
   20560:	b	202cc <_start@@Base+0xb240>
   20564:	add	r4, r6, #1
   20568:	sub	r3, fp, r4
   2056c:	cmp	r3, #1
   20570:	ble	20584 <_start@@Base+0xb4f8>
   20574:	ldrb	r3, [r6, #1]
   20578:	cmp	r3, #32
   2057c:	bhi	20354 <_start@@Base+0xb2c8>
   20580:	beq	22c74 <_start@@Base+0xdbe8>
   20584:	mov	r1, r4
   20588:	mov	r2, fp
   2058c:	mov	r0, sl
   20590:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   20594:	ldr	r3, [sp, #656]	; 0x290
   20598:	mov	r4, r0
   2059c:	b	200c0 <_start@@Base+0xb034>
   205a0:	cmnvs	lr, pc, asr r9
   205a4:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   205a8:	cmnvs	lr, r0, lsl #18
   205ac:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   205b0:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   205b4:	rsbsvc	r6, r2, r6, ror #10
   205b8:	strvs	r0, [r0, #-0]
   205bc:	stclvs	6, cr7, [pc, #-420]!	; 20420 <_start@@Base+0xb394>
   205c0:	andeq	r0, r0, r0
   205c4:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   205c8:			; <UNDEFINED> instruction: 0xffff0000
   205cc:	cmp	r5, #6
   205d0:	ble	202b8 <_start@@Base+0xb22c>
   205d4:	mov	r3, #6
   205d8:	mov	r2, sl
   205dc:	mov	r1, r4
   205e0:	mov	r0, fp
   205e4:	bl	18e7c <_start@@Base+0x3df0>
   205e8:	cmp	r4, r0
   205ec:	mov	r6, r0
   205f0:	beq	202b8 <_start@@Base+0xb22c>
   205f4:	mov	r3, #0
   205f8:	mov	r1, #3
   205fc:	ldr	r0, [fp]
   20600:	str	r3, [sp, #660]	; 0x294
   20604:	bl	27fa8 <flatcc_builder_start_table@@Base>
   20608:	cmp	r0, #0
   2060c:	bne	20b78 <_start@@Base+0xbaec>
   20610:	add	r3, sp, #668	; 0x29c
   20614:	mov	r1, r6
   20618:	mov	r2, sl
   2061c:	mov	r0, fp
   20620:	bl	17c44 <_start@@Base+0x2bb8>
   20624:	ldr	r3, [sp, #668]	; 0x29c
   20628:	cmp	r3, #0
   2062c:	beq	20b30 <_start@@Base+0xbaa4>
   20630:	cmp	sl, r0
   20634:	beq	20bbc <_start@@Base+0xbb30>
   20638:	ldrb	r3, [r0]
   2063c:	cmp	r3, #34	; 0x22
   20640:	addeq	r0, r0, #1
   20644:	beq	2065c <_start@@Base+0xb5d0>
   20648:	mov	r1, r0
   2064c:	mov	r3, #5
   20650:	mov	r2, sl
   20654:	mov	r0, fp
   20658:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   2065c:	sub	r3, sl, r0
   20660:	cmp	r3, #8
   20664:	bls	20bd4 <_start@@Base+0xbb48>
   20668:	ldrb	r2, [r0, #7]
   2066c:	mov	r3, #0
   20670:	ldrb	r4, [r0, #6]
   20674:	lsr	r1, r4, #24
   20678:	str	r1, [sp, #316]	; 0x13c
   2067c:	lsl	r1, r4, #8
   20680:	str	r1, [sp, #312]	; 0x138
   20684:	add	r1, sp, #312	; 0x138
   20688:	ldrd	r4, [r1]
   2068c:	orr	r4, r4, r2
   20690:	orr	r5, r5, r3
   20694:	mov	r2, r4
   20698:	mov	r3, r5
   2069c:	ldrb	r4, [r0, #5]
   206a0:	lsr	r1, r4, #16
   206a4:	str	r1, [sp, #196]	; 0xc4
   206a8:	lsl	r1, r4, #16
   206ac:	str	r1, [sp, #192]	; 0xc0
   206b0:	ldrd	r4, [sp, #192]	; 0xc0
   206b4:	orr	r4, r4, r2
   206b8:	orr	r5, r5, r3
   206bc:	mov	r2, r4
   206c0:	mov	r3, r5
   206c4:	ldrb	r4, [r0, #4]
   206c8:	lsr	r1, r4, #8
   206cc:	str	r1, [sp, #132]	; 0x84
   206d0:	lsl	r1, r4, #24
   206d4:	str	r1, [sp, #128]	; 0x80
   206d8:	ldrd	r4, [sp, #128]	; 0x80
   206dc:	orr	r4, r4, r2
   206e0:	orr	r5, r5, r3
   206e4:	mov	r2, r4
   206e8:	mov	r3, r5
   206ec:	ldrb	r1, [r0, #3]
   206f0:	str	r1, [sp, #148]	; 0x94
   206f4:	mov	r1, #0
   206f8:	str	r1, [sp, #144]	; 0x90
   206fc:	ldrd	r4, [sp, #144]	; 0x90
   20700:	orr	r4, r4, r2
   20704:	orr	r5, r5, r3
   20708:	mov	r2, r4
   2070c:	mov	r3, r5
   20710:	ldrb	r4, [r0, #2]
   20714:	lsl	r1, r4, #8
   20718:	str	r1, [sp, #108]	; 0x6c
   2071c:	mov	r1, #0
   20720:	str	r1, [sp, #104]	; 0x68
   20724:	ldrd	r4, [sp, #104]	; 0x68
   20728:	orr	r4, r4, r2
   2072c:	orr	r5, r5, r3
   20730:	mov	r2, r4
   20734:	mov	r3, r5
   20738:	ldrb	r4, [r0, #1]
   2073c:	lsl	r1, r4, #16
   20740:	str	r1, [sp, #76]	; 0x4c
   20744:	mov	r1, #0
   20748:	str	r1, [sp, #72]	; 0x48
   2074c:	ldrd	r4, [sp, #72]	; 0x48
   20750:	orr	r4, r4, r2
   20754:	orr	r5, r5, r3
   20758:	mov	r2, r4
   2075c:	mov	r3, r5
   20760:	ldrb	r4, [r0]
   20764:	lsl	r1, r4, #24
   20768:	str	r1, [sp, #52]	; 0x34
   2076c:	mov	r1, #0
   20770:	str	r1, [sp, #48]	; 0x30
   20774:	ldrd	r4, [sp, #48]	; 0x30
   20778:	orr	r4, r4, r2
   2077c:	orr	r5, r5, r3
   20780:	mov	r2, r4
   20784:	mov	r3, r5
   20788:	add	r5, pc, #952	; 0x3b8
   2078c:	ldrd	r4, [r5]
   20790:	cmp	r3, r5
   20794:	cmpeq	r2, r4
   20798:	bne	20bbc <_start@@Base+0xbb30>
   2079c:	add	r1, r0, #8
   207a0:	sub	r3, sl, r1
   207a4:	cmp	r3, #8
   207a8:	bls	20c58 <_start@@Base+0xbbcc>
   207ac:	ldrb	r2, [r0, #15]
   207b0:	mov	r3, #0
   207b4:	ldrb	r4, [r0, #14]
   207b8:	lsr	ip, r4, #24
   207bc:	str	ip, [sp, #492]	; 0x1ec
   207c0:	lsl	ip, r4, #8
   207c4:	str	ip, [sp, #488]	; 0x1e8
   207c8:	add	ip, sp, #488	; 0x1e8
   207cc:	ldrd	r4, [ip]
   207d0:	orr	r4, r4, r2
   207d4:	orr	r5, r5, r3
   207d8:	mov	r2, r4
   207dc:	mov	r3, r5
   207e0:	ldrb	r4, [r0, #13]
   207e4:	lsr	ip, r4, #16
   207e8:	str	ip, [sp, #412]	; 0x19c
   207ec:	lsl	ip, r4, #16
   207f0:	str	ip, [sp, #408]	; 0x198
   207f4:	add	ip, sp, #408	; 0x198
   207f8:	ldrd	r4, [ip]
   207fc:	orr	r4, r4, r2
   20800:	orr	r5, r5, r3
   20804:	mov	r2, r4
   20808:	mov	r3, r5
   2080c:	ldrb	r4, [r0, #12]
   20810:	lsr	ip, r4, #8
   20814:	str	ip, [sp, #324]	; 0x144
   20818:	lsl	ip, r4, #24
   2081c:	str	ip, [sp, #320]	; 0x140
   20820:	add	ip, sp, #320	; 0x140
   20824:	ldrd	r4, [ip]
   20828:	orr	r4, r4, r2
   2082c:	orr	r5, r5, r3
   20830:	mov	r2, r4
   20834:	mov	r3, r5
   20838:	ldrb	ip, [r0, #11]
   2083c:	str	ip, [sp, #356]	; 0x164
   20840:	mov	ip, #0
   20844:	str	ip, [sp, #352]	; 0x160
   20848:	add	ip, sp, #352	; 0x160
   2084c:	ldrd	r4, [ip]
   20850:	orr	r4, r4, r2
   20854:	orr	r5, r5, r3
   20858:	mov	r2, r4
   2085c:	mov	r3, r5
   20860:	ldrb	r4, [r0, #10]
   20864:	lsl	ip, r4, #8
   20868:	str	ip, [sp, #276]	; 0x114
   2086c:	mov	ip, #0
   20870:	str	ip, [sp, #272]	; 0x110
   20874:	add	ip, sp, #272	; 0x110
   20878:	ldrd	r4, [ip]
   2087c:	orr	r4, r4, r2
   20880:	orr	r5, r5, r3
   20884:	mov	r2, r4
   20888:	mov	r3, r5
   2088c:	ldrb	r4, [r0, #9]
   20890:	lsl	ip, r4, #16
   20894:	str	ip, [sp, #236]	; 0xec
   20898:	mov	ip, #0
   2089c:	str	ip, [sp, #232]	; 0xe8
   208a0:	ldrd	r4, [sp, #232]	; 0xe8
   208a4:	orr	r4, r4, r2
   208a8:	orr	r5, r5, r3
   208ac:	mov	r2, r4
   208b0:	mov	r3, r5
   208b4:	ldrb	r4, [r0, #8]
   208b8:	lsl	ip, r4, #24
   208bc:	str	ip, [sp, #204]	; 0xcc
   208c0:	mov	ip, #0
   208c4:	str	ip, [sp, #200]	; 0xc8
   208c8:	ldrd	r4, [sp, #200]	; 0xc8
   208cc:	orr	r4, r4, r2
   208d0:	orr	r5, r5, r3
   208d4:	mov	r2, r4
   208d8:	mov	r3, r5
   208dc:	add	r5, pc, #620	; 0x26c
   208e0:	ldrd	r4, [r5]
   208e4:	cmp	r3, r5
   208e8:	cmpeq	r2, r4
   208ec:	bne	20bc0 <_start@@Base+0xbb34>
   208f0:	add	r8, r0, #16
   208f4:	sub	r5, sl, r8
   208f8:	cmp	r5, #8
   208fc:	bls	20dac <_start@@Base+0xbd20>
   20900:	ldrb	r2, [r0, #23]
   20904:	mov	r3, #0
   20908:	ldrb	r6, [r0, #22]
   2090c:	lsr	r1, r6, #24
   20910:	str	r1, [sp, #604]	; 0x25c
   20914:	lsl	r1, r6, #8
   20918:	str	r1, [sp, #600]	; 0x258
   2091c:	add	r1, sp, #600	; 0x258
   20920:	ldrd	r6, [r1]
   20924:	orr	r6, r6, r2
   20928:	orr	r7, r7, r3
   2092c:	mov	r2, r6
   20930:	mov	r3, r7
   20934:	ldrb	r6, [r0, #21]
   20938:	lsr	r1, r6, #16
   2093c:	str	r1, [sp, #572]	; 0x23c
   20940:	lsl	r1, r6, #16
   20944:	str	r1, [sp, #568]	; 0x238
   20948:	add	r1, sp, #568	; 0x238
   2094c:	ldrd	r6, [r1]
   20950:	orr	r6, r6, r2
   20954:	orr	r7, r7, r3
   20958:	mov	r2, r6
   2095c:	mov	r3, r7
   20960:	ldrb	r6, [r0, #20]
   20964:	lsr	r1, r6, #8
   20968:	str	r1, [sp, #508]	; 0x1fc
   2096c:	lsl	r1, r6, #24
   20970:	str	r1, [sp, #504]	; 0x1f8
   20974:	add	r1, sp, #504	; 0x1f8
   20978:	ldrd	r6, [r1]
   2097c:	orr	r6, r6, r2
   20980:	orr	r7, r7, r3
   20984:	mov	r2, r6
   20988:	mov	r3, r7
   2098c:	ldrb	r1, [r0, #19]
   20990:	str	r1, [sp, #524]	; 0x20c
   20994:	mov	r1, #0
   20998:	str	r1, [sp, #520]	; 0x208
   2099c:	add	r1, sp, #520	; 0x208
   209a0:	ldrd	r6, [r1]
   209a4:	orr	r6, r6, r2
   209a8:	orr	r7, r7, r3
   209ac:	mov	r2, r6
   209b0:	mov	r3, r7
   209b4:	ldrb	r6, [r0, #18]
   209b8:	lsl	r1, r6, #8
   209bc:	str	r1, [sp, #476]	; 0x1dc
   209c0:	mov	r1, #0
   209c4:	str	r1, [sp, #472]	; 0x1d8
   209c8:	add	r1, sp, #472	; 0x1d8
   209cc:	ldrd	r6, [r1]
   209d0:	orr	r6, r6, r2
   209d4:	orr	r7, r7, r3
   209d8:	mov	r2, r6
   209dc:	mov	r3, r7
   209e0:	ldrb	r6, [r0, #17]
   209e4:	lsl	r1, r6, #16
   209e8:	str	r1, [sp, #460]	; 0x1cc
   209ec:	mov	r1, #0
   209f0:	str	r1, [sp, #456]	; 0x1c8
   209f4:	add	r1, sp, #456	; 0x1c8
   209f8:	ldrd	r6, [r1]
   209fc:	orr	r6, r6, r2
   20a00:	orr	r7, r7, r3
   20a04:	mov	r2, r6
   20a08:	mov	r3, r7
   20a0c:	ldrb	r6, [r0, #16]
   20a10:	add	r1, pc, #320	; 0x140
   20a14:	ldrd	r0, [r1]
   20a18:	lsl	ip, r6, #24
   20a1c:	str	ip, [sp, #404]	; 0x194
   20a20:	mov	ip, #0
   20a24:	str	ip, [sp, #400]	; 0x190
   20a28:	add	ip, sp, #400	; 0x190
   20a2c:	ldrd	r6, [ip]
   20a30:	orr	r6, r6, r2
   20a34:	orr	r7, r7, r3
   20a38:	mov	r2, r6
   20a3c:	mov	r3, r7
   20a40:	ldr	r6, [pc, #296]	; 20b70 <_start@@Base+0xbae4>
   20a44:	mvn	r7, #0
   20a48:	and	r7, r7, r3
   20a4c:	and	r6, r6, r2
   20a50:	cmp	r7, r1
   20a54:	cmpeq	r6, r0
   20a58:	beq	20e30 <_start@@Base+0xbda4>
   20a5c:	add	r1, pc, #252	; 0xfc
   20a60:	ldrd	r0, [r1]
   20a64:	and	r2, r2, #-16777216	; 0xff000000
   20a68:	cmp	r3, r1
   20a6c:	cmpeq	r2, r0
   20a70:	movne	r3, #1
   20a74:	moveq	r3, #0
   20a78:	cmp	r5, #5
   20a7c:	orrle	r3, r3, #1
   20a80:	cmp	r3, #0
   20a84:	beq	22368 <_start@@Base+0xd2dc>
   20a88:	add	r3, pc, #216	; 0xd8
   20a8c:	ldrd	r2, [r3]
   20a90:	cmp	r7, r3
   20a94:	cmpeq	r6, r2
   20a98:	bne	20aa4 <_start@@Base+0xba18>
   20a9c:	cmp	r5, #6
   20aa0:	bgt	217e4 <_start@@Base+0xc758>
   20aa4:	mov	r1, r8
   20aa8:	mov	r2, sl
   20aac:	mov	r0, fp
   20ab0:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   20ab4:	mov	r9, r0
   20ab8:	sub	r3, sl, r9
   20abc:	cmp	r3, #1
   20ac0:	ble	20ad4 <_start@@Base+0xba48>
   20ac4:	ldrb	r3, [r9]
   20ac8:	cmp	r3, #32
   20acc:	bhi	20ae8 <_start@@Base+0xba5c>
   20ad0:	beq	20d14 <_start@@Base+0xbc88>
   20ad4:	mov	r1, r9
   20ad8:	mov	r2, sl
   20adc:	mov	r0, fp
   20ae0:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   20ae4:	mov	r9, r0
   20ae8:	cmp	sl, r9
   20aec:	beq	20d2c <_start@@Base+0xbca0>
   20af0:	ldrb	r3, [r9]
   20af4:	cmp	r3, #44	; 0x2c
   20af8:	beq	20d5c <_start@@Base+0xbcd0>
   20afc:	mov	r3, #0
   20b00:	str	r3, [sp, #668]	; 0x29c
   20b04:	ldrb	r3, [r9]
   20b08:	cmp	r3, #125	; 0x7d
   20b0c:	beq	20cdc <_start@@Base+0xbc50>
   20b10:	mov	r3, #10
   20b14:	mov	r1, r9
   20b18:	mov	r2, sl
   20b1c:	mov	r0, fp
   20b20:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   20b24:	ldr	r3, [sp, #668]	; 0x29c
   20b28:	cmp	r3, #0
   20b2c:	bne	20630 <_start@@Base+0xb5a4>
   20b30:	mov	r6, r0
   20b34:	ldr	r3, [fp, #20]
   20b38:	cmp	r3, #0
   20b3c:	beq	20d44 <_start@@Base+0xbcb8>
   20b40:	b	20b78 <_start@@Base+0xbaec>
   20b44:	nop			; (mov r0, r0)
   20b48:	bvs	1cfc908 <__bss_end__@@Base+0x1ca554c>
   20b4c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   20b50:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   20b54:	rsbsvc	r6, r2, r6, ror #10
   20b58:	ldrvs	r0, [r2, -r0]!
   20b5c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   20b60:	strvs	r0, [r0, -r0]
   20b64:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   20b68:	ldrvs	r0, [r3, -r0]!
   20b6c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   20b70:			; <UNDEFINED> instruction: 0xffff0000
   20b74:	muleq	r5, r8, r2
   20b78:	mov	r1, r6
   20b7c:	mov	r3, #33	; 0x21
   20b80:	mov	r2, sl
   20b84:	mov	r0, fp
   20b88:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   20b8c:	ldr	r3, [sp, #660]	; 0x294
   20b90:	cmp	r3, #0
   20b94:	mov	r6, r0
   20b98:	beq	21788 <_start@@Base+0xc6fc>
   20b9c:	mov	r1, #0
   20ba0:	ldr	r0, [fp]
   20ba4:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   20ba8:	cmp	r0, #0
   20bac:	beq	21788 <_start@@Base+0xc6fc>
   20bb0:	ldr	r3, [sp, #660]	; 0x294
   20bb4:	str	r3, [r0]
   20bb8:	b	202cc <_start@@Base+0xb240>
   20bbc:	mov	r1, r0
   20bc0:	mov	r2, sl
   20bc4:	mov	r0, fp
   20bc8:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   20bcc:	mov	r9, r0
   20bd0:	b	20ab8 <_start@@Base+0xba2c>
   20bd4:	sub	r3, r3, #1
   20bd8:	cmp	r3, #7
   20bdc:	ldrls	pc, [pc, r3, lsl #2]
   20be0:	b	20bbc <_start@@Base+0xbb30>
   20be4:	andeq	r0, r2, ip, asr #24
   20be8:	andeq	r0, r2, r0, asr #24
   20bec:	andeq	r0, r2, r4, lsr ip
   20bf0:	andeq	r0, r2, r8, lsr #24
   20bf4:	andeq	r0, r2, ip, lsl ip
   20bf8:	andeq	r0, r2, r0, lsl ip
   20bfc:	andeq	r0, r2, r4, lsl #24
   20c00:	andeq	r0, r2, r8, ror #12
   20c04:	mov	r2, #0
   20c08:	mov	r3, #0
   20c0c:	b	20670 <_start@@Base+0xb5e4>
   20c10:	mov	r2, #0
   20c14:	mov	r3, #0
   20c18:	b	2069c <_start@@Base+0xb610>
   20c1c:	mov	r2, #0
   20c20:	mov	r3, #0
   20c24:	b	206c4 <_start@@Base+0xb638>
   20c28:	mov	r2, #0
   20c2c:	mov	r3, #0
   20c30:	b	206ec <_start@@Base+0xb660>
   20c34:	mov	r2, #0
   20c38:	mov	r3, #0
   20c3c:	b	20710 <_start@@Base+0xb684>
   20c40:	mov	r2, #0
   20c44:	mov	r3, #0
   20c48:	b	20738 <_start@@Base+0xb6ac>
   20c4c:	mov	r2, #0
   20c50:	mov	r3, #0
   20c54:	b	20760 <_start@@Base+0xb6d4>
   20c58:	sub	r3, r3, #1
   20c5c:	cmp	r3, #7
   20c60:	ldrls	pc, [pc, r3, lsl #2]
   20c64:	b	20bc0 <_start@@Base+0xbb34>
   20c68:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20c6c:	andeq	r0, r2, r4, asr #25
   20c70:			; <UNDEFINED> instruction: 0x00020cb8
   20c74:	andeq	r0, r2, ip, lsr #25
   20c78:	andeq	r0, r2, r0, lsr #25
   20c7c:	muleq	r2, r4, ip
   20c80:	andeq	r0, r2, r8, lsl #25
   20c84:	andeq	r0, r2, ip, lsr #15
   20c88:	mov	r2, #0
   20c8c:	mov	r3, #0
   20c90:	b	207b4 <_start@@Base+0xb728>
   20c94:	mov	r2, #0
   20c98:	mov	r3, #0
   20c9c:	b	207e0 <_start@@Base+0xb754>
   20ca0:	mov	r2, #0
   20ca4:	mov	r3, #0
   20ca8:	b	2080c <_start@@Base+0xb780>
   20cac:	mov	r2, #0
   20cb0:	mov	r3, #0
   20cb4:	b	20838 <_start@@Base+0xb7ac>
   20cb8:	mov	r2, #0
   20cbc:	mov	r3, #0
   20cc0:	b	20860 <_start@@Base+0xb7d4>
   20cc4:	mov	r2, #0
   20cc8:	mov	r3, #0
   20ccc:	b	2088c <_start@@Base+0xb800>
   20cd0:	mov	r2, #0
   20cd4:	mov	r3, #0
   20cd8:	b	208b4 <_start@@Base+0xb828>
   20cdc:	add	r0, r9, #1
   20ce0:	sub	r3, sl, r0
   20ce4:	cmp	r3, #1
   20ce8:	ble	20cfc <_start@@Base+0xbc70>
   20cec:	ldrb	r3, [r9, #1]
   20cf0:	cmp	r3, #32
   20cf4:	bhi	20b30 <_start@@Base+0xbaa4>
   20cf8:	beq	21704 <_start@@Base+0xc678>
   20cfc:	mov	r1, r0
   20d00:	mov	r2, sl
   20d04:	mov	r0, fp
   20d08:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   20d0c:	ldr	r3, [sp, #668]	; 0x29c
   20d10:	b	20628 <_start@@Base+0xb59c>
   20d14:	ldrb	r3, [r9, #1]
   20d18:	cmp	r3, #32
   20d1c:	addhi	r9, r9, #1
   20d20:	bls	20ad4 <_start@@Base+0xba48>
   20d24:	cmp	sl, r9
   20d28:	bne	20af0 <_start@@Base+0xba64>
   20d2c:	mov	r3, #0
   20d30:	str	r3, [sp, #668]	; 0x29c
   20d34:	ldr	r3, [fp, #20]
   20d38:	mov	r6, sl
   20d3c:	cmp	r3, #0
   20d40:	bne	20b78 <_start@@Base+0xbaec>
   20d44:	ldr	r0, [fp]
   20d48:	bl	289e8 <flatcc_builder_end_table@@Base>
   20d4c:	cmp	r0, #0
   20d50:	str	r0, [sp, #660]	; 0x294
   20d54:	beq	20b78 <_start@@Base+0xbaec>
   20d58:	b	20b9c <_start@@Base+0xbb10>
   20d5c:	add	r0, r9, #1
   20d60:	sub	r3, sl, r0
   20d64:	cmp	r3, #1
   20d68:	ble	20d7c <_start@@Base+0xbcf0>
   20d6c:	ldrb	r3, [r9, #1]
   20d70:	cmp	r3, #32
   20d74:	bhi	20d8c <_start@@Base+0xbd00>
   20d78:	beq	221e8 <_start@@Base+0xd15c>
   20d7c:	mov	r1, r0
   20d80:	mov	r2, sl
   20d84:	mov	r0, fp
   20d88:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   20d8c:	cmp	sl, r0
   20d90:	beq	22200 <_start@@Base+0xd174>
   20d94:	ldrb	r3, [r0]
   20d98:	cmp	r3, #125	; 0x7d
   20d9c:	beq	22c88 <_start@@Base+0xdbfc>
   20da0:	mov	r3, #1
   20da4:	str	r3, [sp, #668]	; 0x29c
   20da8:	b	20630 <_start@@Base+0xb5a4>
   20dac:	sub	r3, r5, #1
   20db0:	cmp	r3, #7
   20db4:	ldrls	pc, [pc, r3, lsl #2]
   20db8:	b	20aa4 <_start@@Base+0xba18>
   20dbc:	andeq	r0, r2, r4, lsr #28
   20dc0:	andeq	r0, r2, r8, lsl lr
   20dc4:	andeq	r0, r2, ip, lsl #28
   20dc8:	andeq	r0, r2, r0, lsl #28
   20dcc:	strdeq	r0, [r2], -r4
   20dd0:	andeq	r0, r2, r8, ror #27
   20dd4:	ldrdeq	r0, [r2], -ip
   20dd8:	andeq	r0, r2, r0, lsl #18
   20ddc:	mov	r2, #0
   20de0:	mov	r3, #0
   20de4:	b	20908 <_start@@Base+0xb87c>
   20de8:	mov	r2, #0
   20dec:	mov	r3, #0
   20df0:	b	20934 <_start@@Base+0xb8a8>
   20df4:	mov	r2, #0
   20df8:	mov	r3, #0
   20dfc:	b	20960 <_start@@Base+0xb8d4>
   20e00:	mov	r2, #0
   20e04:	mov	r3, #0
   20e08:	b	2098c <_start@@Base+0xb900>
   20e0c:	mov	r2, #0
   20e10:	mov	r3, #0
   20e14:	b	209b4 <_start@@Base+0xb928>
   20e18:	mov	r2, #0
   20e1c:	mov	r3, #0
   20e20:	b	209e0 <_start@@Base+0xb954>
   20e24:	mov	r2, #0
   20e28:	mov	r3, #0
   20e2c:	b	20a0c <_start@@Base+0xb980>
   20e30:	cmp	r5, #6
   20e34:	ble	20aa4 <_start@@Base+0xba18>
   20e38:	mov	r3, #6
   20e3c:	mov	r2, sl
   20e40:	mov	r1, r8
   20e44:	mov	r0, fp
   20e48:	bl	18e7c <_start@@Base+0x3df0>
   20e4c:	cmp	r8, r0
   20e50:	mov	r9, r0
   20e54:	beq	20aa4 <_start@@Base+0xba18>
   20e58:	mov	r1, #2
   20e5c:	ldr	r0, [fp]
   20e60:	bl	27fa8 <flatcc_builder_start_table@@Base>
   20e64:	cmp	r0, #0
   20e68:	bne	21224 <_start@@Base+0xc198>
   20e6c:	mov	r1, r9
   20e70:	add	r3, sp, #672	; 0x2a0
   20e74:	mov	r2, sl
   20e78:	mov	r0, fp
   20e7c:	bl	17c44 <_start@@Base+0x2bb8>
   20e80:	mov	r6, #0
   20e84:	ldr	r8, [pc, #-792]	; 20b74 <_start@@Base+0xbae8>
   20e88:	ldr	r3, [sp, #672]	; 0x2a0
   20e8c:	mov	r5, r6
   20e90:	mov	r9, fp
   20e94:	mov	r7, sl
   20e98:	cmp	r3, #0
   20e9c:	beq	2120c <_start@@Base+0xc180>
   20ea0:	mov	r1, r0
   20ea4:	cmp	r7, r1
   20ea8:	beq	21240 <_start@@Base+0xc1b4>
   20eac:	ldrb	r3, [r1]
   20eb0:	cmp	r3, #34	; 0x22
   20eb4:	addeq	r1, r1, #1
   20eb8:	beq	20ed0 <_start@@Base+0xbe44>
   20ebc:	mov	r3, #5
   20ec0:	mov	r2, r7
   20ec4:	mov	r0, r9
   20ec8:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   20ecc:	mov	r1, r0
   20ed0:	sub	r3, r7, r1
   20ed4:	cmp	r3, #8
   20ed8:	bls	21254 <_start@@Base+0xc1c8>
   20edc:	ldrb	sl, [r1, #7]
   20ee0:	mov	fp, #0
   20ee4:	ldrb	r2, [r1, #6]
   20ee8:	lsl	r3, r2, #8
   20eec:	str	r3, [sp, #336]	; 0x150
   20ef0:	add	r3, sp, #336	; 0x150
   20ef4:	lsr	r0, r2, #24
   20ef8:	str	r0, [sp, #340]	; 0x154
   20efc:	ldrd	r2, [r3]
   20f00:	orr	r2, r2, sl
   20f04:	orr	r3, r3, fp
   20f08:	ldrb	sl, [r1, #5]
   20f0c:	lsr	r0, sl, #16
   20f10:	str	r0, [sp, #212]	; 0xd4
   20f14:	lsl	r0, sl, #16
   20f18:	str	r0, [sp, #208]	; 0xd0
   20f1c:	ldrd	sl, [sp, #208]	; 0xd0
   20f20:	orr	sl, sl, r2
   20f24:	orr	fp, fp, r3
   20f28:	mov	r2, sl
   20f2c:	mov	r3, fp
   20f30:	ldrb	sl, [r1, #4]
   20f34:	lsr	r0, sl, #8
   20f38:	str	r0, [sp, #140]	; 0x8c
   20f3c:	lsl	r0, sl, #24
   20f40:	str	r0, [sp, #136]	; 0x88
   20f44:	ldrd	sl, [sp, #136]	; 0x88
   20f48:	orr	sl, sl, r2
   20f4c:	orr	fp, fp, r3
   20f50:	mov	r2, sl
   20f54:	mov	r3, fp
   20f58:	ldrb	r0, [r1, #3]
   20f5c:	str	r0, [sp, #156]	; 0x9c
   20f60:	mov	r0, #0
   20f64:	str	r0, [sp, #152]	; 0x98
   20f68:	ldrd	sl, [sp, #152]	; 0x98
   20f6c:	orr	sl, sl, r2
   20f70:	orr	fp, fp, r3
   20f74:	mov	r2, sl
   20f78:	mov	r3, fp
   20f7c:	ldrb	sl, [r1, #2]
   20f80:	lsl	r0, sl, #8
   20f84:	str	r0, [sp, #116]	; 0x74
   20f88:	mov	r0, #0
   20f8c:	str	r0, [sp, #112]	; 0x70
   20f90:	ldrd	sl, [sp, #112]	; 0x70
   20f94:	orr	sl, sl, r2
   20f98:	orr	fp, fp, r3
   20f9c:	mov	r2, sl
   20fa0:	mov	r3, fp
   20fa4:	ldrb	sl, [r1, #1]
   20fa8:	lsl	r0, sl, #16
   20fac:	str	r0, [sp, #92]	; 0x5c
   20fb0:	mov	r0, #0
   20fb4:	str	r0, [sp, #88]	; 0x58
   20fb8:	ldrd	sl, [sp, #88]	; 0x58
   20fbc:	orr	sl, sl, r2
   20fc0:	orr	fp, fp, r3
   20fc4:	mov	r2, sl
   20fc8:	mov	r3, fp
   20fcc:	ldrb	sl, [r1]
   20fd0:	lsl	r0, sl, #24
   20fd4:	str	r0, [sp, #60]	; 0x3c
   20fd8:	mov	r0, #0
   20fdc:	str	r0, [sp, #56]	; 0x38
   20fe0:	ldrd	sl, [sp, #56]	; 0x38
   20fe4:	orr	sl, sl, r2
   20fe8:	orr	fp, fp, r3
   20fec:	mov	r2, sl
   20ff0:	mov	r3, fp
   20ff4:	add	fp, pc, #924	; 0x39c
   20ff8:	ldrd	sl, [fp]
   20ffc:	cmp	r3, fp
   21000:	cmpeq	r2, sl
   21004:	bne	21240 <_start@@Base+0xc1b4>
   21008:	add	r4, r1, #8
   2100c:	sub	r0, r7, r4
   21010:	cmp	r0, #8
   21014:	bls	212d8 <_start@@Base+0xc24c>
   21018:	ldrb	sl, [r1, #15]
   2101c:	mov	fp, #0
   21020:	ldrb	r2, [r1, #14]
   21024:	lsl	r3, r2, #8
   21028:	str	r3, [sp, #512]	; 0x200
   2102c:	add	r3, sp, #512	; 0x200
   21030:	lsr	ip, r2, #24
   21034:	str	ip, [sp, #516]	; 0x204
   21038:	ldrd	r2, [r3]
   2103c:	orr	r2, r2, sl
   21040:	orr	r3, r3, fp
   21044:	mov	sl, r2
   21048:	mov	fp, r3
   2104c:	ldrb	r2, [r1, #13]
   21050:	lsl	r3, r2, #16
   21054:	str	r3, [sp, #432]	; 0x1b0
   21058:	add	r3, sp, #432	; 0x1b0
   2105c:	lsr	ip, r2, #16
   21060:	str	ip, [sp, #436]	; 0x1b4
   21064:	ldrd	r2, [r3]
   21068:	orr	r2, r2, sl
   2106c:	orr	r3, r3, fp
   21070:	mov	sl, r2
   21074:	mov	fp, r3
   21078:	ldrb	r2, [r1, #12]
   2107c:	lsl	r3, r2, #24
   21080:	str	r3, [sp, #344]	; 0x158
   21084:	add	r3, sp, #344	; 0x158
   21088:	lsr	ip, r2, #8
   2108c:	str	ip, [sp, #348]	; 0x15c
   21090:	ldrd	r2, [r3]
   21094:	orr	r2, r2, sl
   21098:	orr	r3, r3, fp
   2109c:	ldrb	ip, [r1, #11]
   210a0:	str	ip, [sp, #372]	; 0x174
   210a4:	mov	ip, #0
   210a8:	str	ip, [sp, #368]	; 0x170
   210ac:	add	ip, sp, #368	; 0x170
   210b0:	ldrd	sl, [ip]
   210b4:	orr	sl, sl, r2
   210b8:	orr	fp, fp, r3
   210bc:	mov	r2, sl
   210c0:	mov	r3, fp
   210c4:	ldrb	sl, [r1, #10]
   210c8:	lsl	ip, sl, #8
   210cc:	str	ip, [sp, #292]	; 0x124
   210d0:	mov	ip, #0
   210d4:	str	ip, [sp, #288]	; 0x120
   210d8:	add	ip, sp, #288	; 0x120
   210dc:	ldrd	sl, [ip]
   210e0:	orr	sl, sl, r2
   210e4:	orr	fp, fp, r3
   210e8:	mov	r2, sl
   210ec:	mov	r3, fp
   210f0:	ldrb	sl, [r1, #9]
   210f4:	lsl	ip, sl, #16
   210f8:	str	ip, [sp, #260]	; 0x104
   210fc:	mov	ip, #0
   21100:	str	ip, [sp, #256]	; 0x100
   21104:	add	ip, sp, #256	; 0x100
   21108:	ldrd	sl, [ip]
   2110c:	orr	sl, sl, r2
   21110:	orr	fp, fp, r3
   21114:	mov	r2, sl
   21118:	mov	r3, fp
   2111c:	ldrb	sl, [r1, #8]
   21120:	lsl	r1, sl, #24
   21124:	str	r1, [sp, #172]	; 0xac
   21128:	mov	r1, #0
   2112c:	str	r1, [sp, #168]	; 0xa8
   21130:	ldrd	sl, [sp, #168]	; 0xa8
   21134:	orr	sl, sl, r2
   21138:	orr	fp, fp, r3
   2113c:	add	r3, sp, #384	; 0x180
   21140:	strd	sl, [r3]
   21144:	add	r3, pc, #596	; 0x254
   21148:	ldrd	r2, [r3]
   2114c:	bic	sl, sl, #255	; 0xff
   21150:	cmp	fp, r3
   21154:	cmpeq	sl, r2
   21158:	beq	2141c <_start@@Base+0xc390>
   2115c:	add	r1, sp, #384	; 0x180
   21160:	add	r3, pc, #576	; 0x240
   21164:	ldrd	r2, [r3]
   21168:	ldrd	sl, [r1]
   2116c:	cmp	fp, r3
   21170:	cmpeq	sl, r2
   21174:	bne	21180 <_start@@Base+0xc0f4>
   21178:	cmp	r0, #8
   2117c:	bgt	215bc <_start@@Base+0xc530>
   21180:	mov	r1, r4
   21184:	mov	r2, r7
   21188:	mov	r0, r9
   2118c:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   21190:	mov	r4, r0
   21194:	sub	r3, r7, r4
   21198:	cmp	r3, #1
   2119c:	ble	211b0 <_start@@Base+0xc124>
   211a0:	ldrb	r3, [r4]
   211a4:	cmp	r3, #32
   211a8:	bhi	211c4 <_start@@Base+0xc138>
   211ac:	beq	213b8 <_start@@Base+0xc32c>
   211b0:	mov	r1, r4
   211b4:	mov	r2, r7
   211b8:	mov	r0, r9
   211bc:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   211c0:	mov	r4, r0
   211c4:	cmp	r7, r4
   211c8:	beq	213d0 <_start@@Base+0xc344>
   211cc:	ldrb	r3, [r4]
   211d0:	cmp	r3, #44	; 0x2c
   211d4:	beq	214fc <_start@@Base+0xc470>
   211d8:	mov	r3, #0
   211dc:	str	r3, [sp, #672]	; 0x2a0
   211e0:	ldrb	r3, [r4]
   211e4:	cmp	r3, #125	; 0x7d
   211e8:	beq	2135c <_start@@Base+0xc2d0>
   211ec:	mov	r3, #10
   211f0:	mov	r1, r4
   211f4:	mov	r2, r7
   211f8:	mov	r0, r9
   211fc:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   21200:	ldr	r3, [sp, #672]	; 0x2a0
   21204:	cmp	r3, #0
   21208:	bne	20ea0 <_start@@Base+0xbe14>
   2120c:	mov	fp, r9
   21210:	mov	sl, r7
   21214:	mov	r9, r0
   21218:	ldr	r3, [fp, #20]
   2121c:	cmp	r3, #0
   21220:	beq	213f0 <_start@@Base+0xc364>
   21224:	mov	r1, r9
   21228:	mov	r3, #33	; 0x21
   2122c:	mov	r2, sl
   21230:	mov	r0, fp
   21234:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   21238:	mov	r6, r0
   2123c:	b	20b78 <_start@@Base+0xbaec>
   21240:	mov	r2, r7
   21244:	mov	r0, r9
   21248:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   2124c:	mov	r4, r0
   21250:	b	21194 <_start@@Base+0xc108>
   21254:	sub	r3, r3, #1
   21258:	cmp	r3, #7
   2125c:	ldrls	pc, [pc, r3, lsl #2]
   21260:	b	21240 <_start@@Base+0xc1b4>
   21264:	andeq	r1, r2, ip, asr #5
   21268:	andeq	r1, r2, r0, asr #5
   2126c:			; <UNDEFINED> instruction: 0x000212b4
   21270:	andeq	r1, r2, r8, lsr #5
   21274:	muleq	r2, ip, r2
   21278:	muleq	r2, r0, r2
   2127c:	andeq	r1, r2, r4, lsl #5
   21280:	ldrdeq	r0, [r2], -ip
   21284:	mov	sl, r6
   21288:	mov	fp, r5
   2128c:	b	20ee4 <_start@@Base+0xbe58>
   21290:	mov	r2, r6
   21294:	mov	r3, r5
   21298:	b	20f08 <_start@@Base+0xbe7c>
   2129c:	mov	r2, r6
   212a0:	mov	r3, r5
   212a4:	b	20f30 <_start@@Base+0xbea4>
   212a8:	mov	r2, r6
   212ac:	mov	r3, r5
   212b0:	b	20f58 <_start@@Base+0xbecc>
   212b4:	mov	r2, r6
   212b8:	mov	r3, r5
   212bc:	b	20f7c <_start@@Base+0xbef0>
   212c0:	mov	r2, r6
   212c4:	mov	r3, r5
   212c8:	b	20fa4 <_start@@Base+0xbf18>
   212cc:	mov	r2, r6
   212d0:	mov	r3, r5
   212d4:	b	20fcc <_start@@Base+0xbf40>
   212d8:	sub	r3, r0, #1
   212dc:	cmp	r3, #7
   212e0:	ldrls	pc, [pc, r3, lsl #2]
   212e4:	b	21180 <_start@@Base+0xc0f4>
   212e8:	andeq	r1, r2, r0, asr r3
   212ec:	andeq	r1, r2, r4, asr #6
   212f0:	andeq	r1, r2, r8, lsr r3
   212f4:	andeq	r1, r2, ip, lsr #6
   212f8:	andeq	r1, r2, r0, lsr #6
   212fc:	andeq	r1, r2, r4, lsl r3
   21300:	andeq	r1, r2, r8, lsl #6
   21304:	andeq	r1, r2, r8, lsl r0
   21308:	mov	sl, r6
   2130c:	mov	fp, r5
   21310:	b	21020 <_start@@Base+0xbf94>
   21314:	mov	sl, r6
   21318:	mov	fp, r5
   2131c:	b	2104c <_start@@Base+0xbfc0>
   21320:	mov	sl, r6
   21324:	mov	fp, r5
   21328:	b	21078 <_start@@Base+0xbfec>
   2132c:	mov	r2, r6
   21330:	mov	r3, r5
   21334:	b	2109c <_start@@Base+0xc010>
   21338:	mov	r2, r6
   2133c:	mov	r3, r5
   21340:	b	210c4 <_start@@Base+0xc038>
   21344:	mov	r2, r6
   21348:	mov	r3, r5
   2134c:	b	210f0 <_start@@Base+0xc064>
   21350:	mov	r2, r6
   21354:	mov	r3, r5
   21358:	b	2111c <_start@@Base+0xc090>
   2135c:	add	r0, r4, #1
   21360:	sub	r3, r7, r0
   21364:	cmp	r3, #1
   21368:	ble	2137c <_start@@Base+0xc2f0>
   2136c:	ldrb	r3, [r4, #1]
   21370:	cmp	r3, #32
   21374:	bhi	2120c <_start@@Base+0xc180>
   21378:	beq	21718 <_start@@Base+0xc68c>
   2137c:	mov	r1, r0
   21380:	mov	r2, r7
   21384:	mov	r0, r9
   21388:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   2138c:	ldr	r3, [sp, #672]	; 0x2a0
   21390:	b	20e98 <_start@@Base+0xbe0c>
   21394:	nop			; (mov r0, r0)
   21398:	svcpl	0x00626262
   2139c:	cmnvs	r1, r1, ror #2
   213a0:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   213a4:	subsvs	r7, pc, #116, 6	; 0xd0000001
   213a8:	cmnvs	r2, pc, asr r4
   213ac:	subsvs	r7, pc, #116, 6	; 0xd0000001
   213b0:	muleq	r2, r8, r0
   213b4:	strdeq	r7, [r5], -r8
   213b8:	ldrb	r3, [r4, #1]
   213bc:	cmp	r3, #32
   213c0:	addhi	r4, r4, #1
   213c4:	bls	211b0 <_start@@Base+0xc124>
   213c8:	cmp	r7, r4
   213cc:	bne	211cc <_start@@Base+0xc140>
   213d0:	mov	fp, r9
   213d4:	mov	r3, #0
   213d8:	str	r3, [sp, #672]	; 0x2a0
   213dc:	ldr	r3, [fp, #20]
   213e0:	mov	sl, r7
   213e4:	cmp	r3, #0
   213e8:	mov	r9, r7
   213ec:	bne	21224 <_start@@Base+0xc198>
   213f0:	ldr	r0, [fp]
   213f4:	bl	289e8 <flatcc_builder_end_table@@Base>
   213f8:	subs	r4, r0, #0
   213fc:	beq	21224 <_start@@Base+0xc198>
   21400:	mov	r1, #1
   21404:	ldr	r0, [fp]
   21408:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   2140c:	cmp	r0, #0
   21410:	bne	21bd8 <_start@@Base+0xcb4c>
   21414:	mov	r6, r9
   21418:	b	20b78 <_start@@Base+0xbaec>
   2141c:	cmp	r0, #7
   21420:	ble	21180 <_start@@Base+0xc0f4>
   21424:	mov	r3, #7
   21428:	mov	r2, r7
   2142c:	mov	r1, r4
   21430:	mov	r0, r9
   21434:	bl	18e7c <_start@@Base+0x3df0>
   21438:	cmp	r4, r0
   2143c:	mov	sl, r0
   21440:	beq	21180 <_start@@Base+0xc0f4>
   21444:	ldr	r3, [sp, #168]	; 0xa8
   21448:	cmp	r7, r0
   2144c:	str	r6, [sp, #680]	; 0x2a8
   21450:	str	r5, [sp, #684]	; 0x2ac
   21454:	str	r6, [sp, #688]	; 0x2b0
   21458:	str	r5, [sp, #692]	; 0x2b4
   2145c:	str	r3, [sp, #676]	; 0x2a4
   21460:	beq	22e40 <_start@@Base+0xddb4>
   21464:	add	r3, sp, #688	; 0x2b0
   21468:	str	r3, [sp]
   2146c:	mov	r1, r0
   21470:	add	r3, sp, #676	; 0x2a4
   21474:	mov	r2, r7
   21478:	mov	r0, r9
   2147c:	bl	31c94 <flatcc_json_parser_integer@@Base>
   21480:	cmp	sl, r0
   21484:	mov	r4, r0
   21488:	beq	22e40 <_start@@Base+0xddb4>
   2148c:	ldr	r1, [sp, #676]	; 0x2a4
   21490:	add	r3, sp, #688	; 0x2b0
   21494:	cmp	r1, #0
   21498:	ldrd	r2, [r3]
   2149c:	beq	216ec <_start@@Base+0xc660>
   214a0:	cmp	r3, #-2147483648	; 0x80000000
   214a4:	cmpeq	r2, #0
   214a8:	bhi	22d2c <_start@@Base+0xdca0>
   214ac:	rsbs	r2, r2, #0
   214b0:	rsc	r3, r3, #0
   214b4:	add	r1, sp, #680	; 0x2a8
   214b8:	strd	r2, [r1]
   214bc:	orrs	r3, r2, r3
   214c0:	bne	214d0 <_start@@Base+0xc444>
   214c4:	ldr	r3, [r9, #8]
   214c8:	tst	r3, #2
   214cc:	beq	21194 <_start@@Base+0xc108>
   214d0:	mov	r3, #8
   214d4:	mov	r2, r3
   214d8:	mov	r1, #0
   214dc:	ldr	r0, [r9]
   214e0:	bl	2a114 <flatcc_builder_table_add@@Base>
   214e4:	cmp	r0, #0
   214e8:	beq	22c64 <_start@@Base+0xdbd8>
   214ec:	add	r3, sp, #680	; 0x2a8
   214f0:	ldrd	r2, [r3]
   214f4:	strd	r2, [r0]
   214f8:	b	21194 <_start@@Base+0xc108>
   214fc:	add	r1, r4, #1
   21500:	sub	r3, r7, r1
   21504:	cmp	r3, #1
   21508:	ble	2151c <_start@@Base+0xc490>
   2150c:	ldrb	r3, [r4, #1]
   21510:	cmp	r3, #32
   21514:	bhi	2152c <_start@@Base+0xc4a0>
   21518:	beq	22278 <_start@@Base+0xd1ec>
   2151c:	mov	r2, r7
   21520:	mov	r0, r9
   21524:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   21528:	mov	r1, r0
   2152c:	cmp	r7, r1
   21530:	beq	22290 <_start@@Base+0xd204>
   21534:	ldrb	r3, [r1]
   21538:	cmp	r3, #125	; 0x7d
   2153c:	beq	22cc4 <_start@@Base+0xdc38>
   21540:	mov	r3, #1
   21544:	str	r3, [sp, #672]	; 0x2a0
   21548:	b	20ea4 <_start@@Base+0xbe18>
   2154c:	ldrb	r3, [r6, #1]
   21550:	cmp	r3, #32
   21554:	addhi	r6, r6, #1
   21558:	bls	202e8 <_start@@Base+0xb25c>
   2155c:	cmp	sl, r6
   21560:	bne	20304 <_start@@Base+0xb278>
   21564:	mov	r3, sl
   21568:	mov	sl, fp
   2156c:	mov	fp, r3
   21570:	mov	r3, #0
   21574:	str	r3, [sp, #656]	; 0x290
   21578:	ldr	r3, [sl, #20]
   2157c:	mov	r4, fp
   21580:	cmp	r3, #0
   21584:	bne	20360 <_start@@Base+0xb2d4>
   21588:	b	22e08 <_start@@Base+0xdd7c>
   2158c:	sub	r3, ip, #1
   21590:	cmp	r3, #7
   21594:	ldrls	pc, [pc, r3, lsl #2]
   21598:	b	2054c <_start@@Base+0xb4c0>
   2159c:	andeq	r2, r2, ip, asr #27
   215a0:	andeq	r2, r2, r4, asr #27
   215a4:			; <UNDEFINED> instruction: 0x00022dbc
   215a8:			; <UNDEFINED> instruction: 0x00022db4
   215ac:	andeq	r2, r2, ip, lsr #27
   215b0:	andeq	r2, r2, r4, lsr #27
   215b4:	andeq	r0, r2, r4, lsr r4
   215b8:	andeq	r0, r2, r4, lsr r4
   215bc:	mov	r3, #8
   215c0:	mov	r2, r7
   215c4:	mov	r1, r4
   215c8:	mov	r0, r9
   215cc:	bl	18e7c <_start@@Base+0x3df0>
   215d0:	cmp	r4, r0
   215d4:	mov	sl, r0
   215d8:	beq	21180 <_start@@Base+0xc0f4>
   215dc:	ldrd	r2, [sp, #168]	; 0xa8
   215e0:	cmp	r7, r0
   215e4:	str	r6, [sp, #688]	; 0x2b0
   215e8:	str	r2, [sp, #676]	; 0x2a4
   215ec:	str	r5, [sp, #692]	; 0x2b4
   215f0:	str	r2, [sp, #680]	; 0x2a8
   215f4:	beq	22d58 <_start@@Base+0xdccc>
   215f8:	add	r3, sp, #688	; 0x2b0
   215fc:	str	r3, [sp]
   21600:	mov	r1, r0
   21604:	add	r3, sp, #680	; 0x2a8
   21608:	mov	r2, r7
   2160c:	mov	r0, r9
   21610:	bl	31c94 <flatcc_json_parser_integer@@Base>
   21614:	cmp	sl, r0
   21618:	mov	r4, r0
   2161c:	beq	22d58 <_start@@Base+0xdccc>
   21620:	ldr	r3, [sp, #680]	; 0x2a8
   21624:	cmp	r3, #0
   21628:	bne	22250 <_start@@Base+0xd1c4>
   2162c:	add	r3, sp, #688	; 0x2b0
   21630:	mov	r1, #0
   21634:	ldrd	r2, [r3]
   21638:	mvn	r0, #0
   2163c:	cmp	r3, r1
   21640:	cmpeq	r2, r0
   21644:	strls	r2, [sp, #676]	; 0x2a4
   21648:	bhi	2234c <_start@@Base+0xd2c0>
   2164c:	cmp	r2, #0
   21650:	bne	21660 <_start@@Base+0xc5d4>
   21654:	ldr	r3, [r9, #8]
   21658:	tst	r3, #2
   2165c:	beq	21194 <_start@@Base+0xc108>
   21660:	mov	r3, #4
   21664:	mov	r2, r3
   21668:	mov	r1, #1
   2166c:	ldr	r0, [r9]
   21670:	bl	2a114 <flatcc_builder_table_add@@Base>
   21674:	cmp	r0, #0
   21678:	beq	22c64 <_start@@Base+0xdbd8>
   2167c:	ldr	r3, [sp, #676]	; 0x2a4
   21680:	str	r3, [r0]
   21684:	b	21194 <_start@@Base+0xc108>
   21688:	add	r4, r6, #1
   2168c:	sub	r3, sl, r4
   21690:	cmp	r3, #1
   21694:	ble	216a8 <_start@@Base+0xc61c>
   21698:	ldrb	r3, [r6, #1]
   2169c:	cmp	r3, #32
   216a0:	bhi	216bc <_start@@Base+0xc630>
   216a4:	beq	22e70 <_start@@Base+0xdde4>
   216a8:	mov	r1, r4
   216ac:	mov	r2, sl
   216b0:	mov	r0, fp
   216b4:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   216b8:	mov	r4, r0
   216bc:	cmp	sl, r4
   216c0:	beq	22fb0 <_start@@Base+0xdf24>
   216c4:	ldrb	r3, [r4]
   216c8:	cmp	r3, #125	; 0x7d
   216cc:	beq	22ee0 <_start@@Base+0xde54>
   216d0:	mov	r3, #1
   216d4:	cmp	sl, r4
   216d8:	str	r3, [sp, #656]	; 0x290
   216dc:	bne	200dc <_start@@Base+0xb050>
   216e0:	mov	r6, #0
   216e4:	mov	r7, #0
   216e8:	b	20294 <_start@@Base+0xb208>
   216ec:	cmp	r2, #0
   216f0:	sbcs	r1, r3, #0
   216f4:	blt	22f68 <_start@@Base+0xdedc>
   216f8:	add	r1, sp, #680	; 0x2a8
   216fc:	strd	r2, [r1]
   21700:	b	214bc <_start@@Base+0xc430>
   21704:	ldrb	r3, [r9, #2]
   21708:	cmp	r3, #32
   2170c:	bls	20cfc <_start@@Base+0xbc70>
   21710:	add	r6, r9, #2
   21714:	b	20b34 <_start@@Base+0xbaa8>
   21718:	ldrb	r3, [r4, #2]
   2171c:	cmp	r3, #32
   21720:	bls	2137c <_start@@Base+0xc2f0>
   21724:	mov	fp, r9
   21728:	mov	sl, r7
   2172c:	add	r9, r4, #2
   21730:	b	21218 <_start@@Base+0xc18c>
   21734:	mov	r1, r4
   21738:	mov	r3, #5
   2173c:	mov	r2, sl
   21740:	mov	r0, fp
   21744:	bl	18e7c <_start@@Base+0x3df0>
   21748:	cmp	r0, r4
   2174c:	mov	r1, r0
   21750:	beq	202b8 <_start@@Base+0xb22c>
   21754:	add	r3, sp, #660	; 0x294
   21758:	mov	r2, sl
   2175c:	mov	r0, fp
   21760:	bl	19c40 <_start@@Base+0x4bb4>
   21764:	ldr	r3, [sp, #660]	; 0x294
   21768:	cmp	r3, #0
   2176c:	mov	r6, r0
   21770:	beq	21788 <_start@@Base+0xc6fc>
   21774:	mov	r1, #1
   21778:	ldr	r0, [fp]
   2177c:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   21780:	cmp	r0, #0
   21784:	bne	20bb0 <_start@@Base+0xbb24>
   21788:	mov	r3, sl
   2178c:	mov	r4, r6
   21790:	mov	sl, fp
   21794:	mov	fp, r3
   21798:	b	20360 <_start@@Base+0xb2d4>
   2179c:	mov	r1, r4
   217a0:	mov	r3, #7
   217a4:	mov	r2, sl
   217a8:	mov	r0, fp
   217ac:	bl	18e7c <_start@@Base+0x3df0>
   217b0:	cmp	r4, r0
   217b4:	mov	r1, r0
   217b8:	beq	20270 <_start@@Base+0xb1e4>
   217bc:	ldr	lr, [pc, #-1044]	; 213b0 <_start@@Base+0xc324>
   217c0:	ldr	ip, [sp, #664]	; 0x298
   217c4:	mov	r2, #3
   217c8:	mov	r3, r8
   217cc:	stm	sp, {r2, ip, lr}
   217d0:	mov	r0, fp
   217d4:	mov	r2, sl
   217d8:	bl	32bb0 <flatcc_json_parser_union_vector@@Base>
   217dc:	mov	r6, r0
   217e0:	b	202cc <_start@@Base+0xb240>
   217e4:	mov	r3, #6
   217e8:	mov	r2, sl
   217ec:	mov	r1, r8
   217f0:	mov	r0, fp
   217f4:	bl	18e7c <_start@@Base+0x3df0>
   217f8:	cmp	r8, r0
   217fc:	mov	r9, r0
   21800:	beq	20aa4 <_start@@Base+0xba18>
   21804:	mov	r1, #2
   21808:	ldr	r0, [fp]
   2180c:	bl	27fa8 <flatcc_builder_start_table@@Base>
   21810:	cmp	r0, #0
   21814:	bne	21224 <_start@@Base+0xc198>
   21818:	mov	r1, r9
   2181c:	add	r3, sp, #672	; 0x2a0
   21820:	mov	r2, sl
   21824:	mov	r0, fp
   21828:	bl	17c44 <_start@@Base+0x2bb8>
   2182c:	mov	r6, #0
   21830:	ldr	r8, [pc, #-1156]	; 213b4 <_start@@Base+0xc328>
   21834:	ldr	r3, [sp, #672]	; 0x2a0
   21838:	mov	r5, r6
   2183c:	mov	r9, fp
   21840:	mov	r7, sl
   21844:	cmp	r3, #0
   21848:	beq	21b9c <_start@@Base+0xcb10>
   2184c:	mov	r1, r0
   21850:	cmp	r7, r1
   21854:	beq	21be0 <_start@@Base+0xcb54>
   21858:	ldrb	r3, [r1]
   2185c:	cmp	r3, #34	; 0x22
   21860:	addeq	r1, r1, #1
   21864:	beq	2187c <_start@@Base+0xc7f0>
   21868:	mov	r3, #5
   2186c:	mov	r2, r7
   21870:	mov	r0, r9
   21874:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   21878:	mov	r1, r0
   2187c:	sub	r3, r7, r1
   21880:	cmp	r3, #8
   21884:	bls	21bf4 <_start@@Base+0xcb68>
   21888:	ldrb	sl, [r1, #7]
   2188c:	mov	fp, #0
   21890:	ldrb	r2, [r1, #6]
   21894:	lsr	r0, r2, #24
   21898:	lsl	r3, r2, #8
   2189c:	str	r0, [sp, #220]	; 0xdc
   218a0:	str	r3, [sp, #216]	; 0xd8
   218a4:	ldrd	r2, [sp, #216]	; 0xd8
   218a8:	orr	r2, r2, sl
   218ac:	orr	r3, r3, fp
   218b0:	ldrb	sl, [r1, #5]
   218b4:	lsr	r0, sl, #16
   218b8:	str	r0, [sp, #124]	; 0x7c
   218bc:	lsl	r0, sl, #16
   218c0:	str	r0, [sp, #120]	; 0x78
   218c4:	ldrd	sl, [sp, #120]	; 0x78
   218c8:	orr	sl, sl, r2
   218cc:	orr	fp, fp, r3
   218d0:	mov	r2, sl
   218d4:	mov	r3, fp
   218d8:	ldrb	sl, [r1, #4]
   218dc:	lsr	r0, sl, #8
   218e0:	str	r0, [sp, #68]	; 0x44
   218e4:	lsl	r0, sl, #24
   218e8:	str	r0, [sp, #64]	; 0x40
   218ec:	ldrd	sl, [sp, #64]	; 0x40
   218f0:	orr	sl, sl, r2
   218f4:	orr	fp, fp, r3
   218f8:	mov	r2, sl
   218fc:	mov	r3, fp
   21900:	ldrb	r0, [r1, #3]
   21904:	str	r0, [sp, #84]	; 0x54
   21908:	mov	r0, #0
   2190c:	str	r0, [sp, #80]	; 0x50
   21910:	ldrd	sl, [sp, #80]	; 0x50
   21914:	orr	sl, sl, r2
   21918:	orr	fp, fp, r3
   2191c:	mov	r2, sl
   21920:	mov	r3, fp
   21924:	ldrb	sl, [r1, #2]
   21928:	lsl	r0, sl, #8
   2192c:	str	r0, [sp, #44]	; 0x2c
   21930:	mov	r0, #0
   21934:	str	r0, [sp, #40]	; 0x28
   21938:	ldrd	sl, [sp, #40]	; 0x28
   2193c:	orr	sl, sl, r2
   21940:	orr	fp, fp, r3
   21944:	mov	r2, sl
   21948:	mov	r3, fp
   2194c:	ldrb	sl, [r1, #1]
   21950:	lsl	r0, sl, #16
   21954:	str	r0, [sp, #36]	; 0x24
   21958:	mov	r0, #0
   2195c:	str	r0, [sp, #32]
   21960:	ldrd	sl, [sp, #32]
   21964:	orr	sl, sl, r2
   21968:	orr	fp, fp, r3
   2196c:	mov	r2, sl
   21970:	mov	r3, fp
   21974:	ldrb	sl, [r1]
   21978:	lsl	r0, sl, #24
   2197c:	str	r0, [sp, #28]
   21980:	mov	r0, #0
   21984:	str	r0, [sp, #24]
   21988:	ldrd	sl, [sp, #24]
   2198c:	orr	sl, sl, r2
   21990:	orr	fp, fp, r3
   21994:	mov	r2, sl
   21998:	mov	r3, fp
   2199c:	add	fp, pc, #964	; 0x3c4
   219a0:	ldrd	sl, [fp]
   219a4:	cmp	r3, fp
   219a8:	cmpeq	r2, sl
   219ac:	bne	21be0 <_start@@Base+0xcb54>
   219b0:	add	r4, r1, #8
   219b4:	sub	r0, r7, r4
   219b8:	cmp	r0, #8
   219bc:	bls	21c78 <_start@@Base+0xcbec>
   219c0:	ldrb	sl, [r1, #15]
   219c4:	mov	fp, #0
   219c8:	ldrb	r2, [r1, #14]
   219cc:	lsl	r3, r2, #8
   219d0:	str	r3, [sp, #448]	; 0x1c0
   219d4:	add	r3, sp, #448	; 0x1c0
   219d8:	lsr	ip, r2, #24
   219dc:	str	ip, [sp, #452]	; 0x1c4
   219e0:	ldrd	r2, [r3]
   219e4:	orr	r2, r2, sl
   219e8:	orr	r3, r3, fp
   219ec:	mov	sl, r2
   219f0:	mov	fp, r3
   219f4:	ldrb	r2, [r1, #13]
   219f8:	lsl	r3, r2, #16
   219fc:	str	r3, [sp, #296]	; 0x128
   21a00:	add	r3, sp, #296	; 0x128
   21a04:	lsr	ip, r2, #16
   21a08:	str	ip, [sp, #300]	; 0x12c
   21a0c:	ldrd	r2, [r3]
   21a10:	orr	r2, r2, sl
   21a14:	orr	r3, r3, fp
   21a18:	mov	sl, r2
   21a1c:	mov	fp, r3
   21a20:	ldrb	r2, [r1, #12]
   21a24:	lsr	ip, r2, #8
   21a28:	lsl	r3, r2, #24
   21a2c:	str	ip, [sp, #228]	; 0xe4
   21a30:	str	r3, [sp, #224]	; 0xe0
   21a34:	ldrd	r2, [sp, #224]	; 0xe0
   21a38:	orr	r2, r2, sl
   21a3c:	orr	r3, r3, fp
   21a40:	mov	sl, r2
   21a44:	mov	fp, r3
   21a48:	ldrb	r3, [r1, #11]
   21a4c:	str	r3, [sp, #244]	; 0xf4
   21a50:	mov	r3, #0
   21a54:	str	r3, [sp, #240]	; 0xf0
   21a58:	ldrd	r2, [sp, #240]	; 0xf0
   21a5c:	orr	r2, r2, sl
   21a60:	orr	r3, r3, fp
   21a64:	mov	sl, r2
   21a68:	mov	fp, r3
   21a6c:	ldrb	r2, [r1, #10]
   21a70:	lsl	r3, r2, #8
   21a74:	str	r3, [sp, #180]	; 0xb4
   21a78:	mov	r3, #0
   21a7c:	str	r3, [sp, #176]	; 0xb0
   21a80:	ldrd	r2, [sp, #176]	; 0xb0
   21a84:	orr	r2, r2, sl
   21a88:	orr	r3, r3, fp
   21a8c:	ldrb	sl, [r1, #9]
   21a90:	lsl	ip, sl, #16
   21a94:	str	ip, [sp, #164]	; 0xa4
   21a98:	mov	ip, #0
   21a9c:	str	ip, [sp, #160]	; 0xa0
   21aa0:	ldrd	sl, [sp, #160]	; 0xa0
   21aa4:	orr	sl, sl, r2
   21aa8:	orr	fp, fp, r3
   21aac:	mov	r2, sl
   21ab0:	mov	r3, fp
   21ab4:	ldrb	sl, [r1, #8]
   21ab8:	lsl	ip, sl, #24
   21abc:	str	ip, [sp, #100]	; 0x64
   21ac0:	mov	ip, #0
   21ac4:	str	ip, [sp, #96]	; 0x60
   21ac8:	ldrd	sl, [sp, #96]	; 0x60
   21acc:	orr	sl, sl, r2
   21ad0:	orr	fp, fp, r3
   21ad4:	mov	r2, sl
   21ad8:	mov	r3, fp
   21adc:	add	fp, pc, #652	; 0x28c
   21ae0:	ldrd	sl, [fp]
   21ae4:	cmp	r3, fp
   21ae8:	cmpeq	r2, sl
   21aec:	beq	21d98 <_start@@Base+0xcd0c>
   21af0:	add	fp, pc, #640	; 0x280
   21af4:	ldrd	sl, [fp]
   21af8:	bic	r2, r2, #255	; 0xff
   21afc:	cmp	r3, fp
   21b00:	cmpeq	r2, sl
   21b04:	bne	21b10 <_start@@Base+0xca84>
   21b08:	cmp	r0, #7
   21b0c:	bgt	220a0 <_start@@Base+0xd014>
   21b10:	mov	r1, r4
   21b14:	mov	r2, r7
   21b18:	mov	r0, r9
   21b1c:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   21b20:	mov	r4, r0
   21b24:	sub	r3, r7, r4
   21b28:	cmp	r3, #1
   21b2c:	ble	21b40 <_start@@Base+0xcab4>
   21b30:	ldrb	r3, [r4]
   21b34:	cmp	r3, #32
   21b38:	bhi	21b54 <_start@@Base+0xcac8>
   21b3c:	beq	21d34 <_start@@Base+0xcca8>
   21b40:	mov	r1, r4
   21b44:	mov	r2, r7
   21b48:	mov	r0, r9
   21b4c:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   21b50:	mov	r4, r0
   21b54:	cmp	r7, r4
   21b58:	beq	21d4c <_start@@Base+0xccc0>
   21b5c:	ldrb	r3, [r4]
   21b60:	cmp	r3, #44	; 0x2c
   21b64:	beq	21fcc <_start@@Base+0xcf40>
   21b68:	mov	r3, #0
   21b6c:	str	r3, [sp, #672]	; 0x2a0
   21b70:	ldrb	r3, [r4]
   21b74:	cmp	r3, #125	; 0x7d
   21b78:	beq	21cfc <_start@@Base+0xcc70>
   21b7c:	mov	r3, #10
   21b80:	mov	r1, r4
   21b84:	mov	r2, r7
   21b88:	mov	r0, r9
   21b8c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   21b90:	ldr	r3, [sp, #672]	; 0x2a0
   21b94:	cmp	r3, #0
   21b98:	bne	2184c <_start@@Base+0xc7c0>
   21b9c:	mov	fp, r9
   21ba0:	mov	sl, r7
   21ba4:	mov	r9, r0
   21ba8:	ldr	r3, [fp, #20]
   21bac:	cmp	r3, #0
   21bb0:	bne	21224 <_start@@Base+0xc198>
   21bb4:	ldr	r0, [fp]
   21bb8:	bl	289e8 <flatcc_builder_end_table@@Base>
   21bbc:	subs	r4, r0, #0
   21bc0:	beq	21224 <_start@@Base+0xc198>
   21bc4:	mov	r1, #2
   21bc8:	ldr	r0, [fp]
   21bcc:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   21bd0:	cmp	r0, #0
   21bd4:	beq	21414 <_start@@Base+0xc388>
   21bd8:	str	r4, [r0]
   21bdc:	b	20ab8 <_start@@Base+0xba2c>
   21be0:	mov	r2, r7
   21be4:	mov	r0, r9
   21be8:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   21bec:	mov	r4, r0
   21bf0:	b	21b24 <_start@@Base+0xca98>
   21bf4:	sub	r3, r3, #1
   21bf8:	cmp	r3, #7
   21bfc:	ldrls	pc, [pc, r3, lsl #2]
   21c00:	b	21be0 <_start@@Base+0xcb54>
   21c04:	andeq	r1, r2, ip, ror #24
   21c08:	andeq	r1, r2, r0, ror #24
   21c0c:	andeq	r1, r2, r4, asr ip
   21c10:	andeq	r1, r2, r8, asr #24
   21c14:	andeq	r1, r2, ip, lsr ip
   21c18:	andeq	r1, r2, r0, lsr ip
   21c1c:	andeq	r1, r2, r4, lsr #24
   21c20:	andeq	r1, r2, r8, lsl #17
   21c24:	mov	sl, r6
   21c28:	mov	fp, r5
   21c2c:	b	21890 <_start@@Base+0xc804>
   21c30:	mov	r2, r6
   21c34:	mov	r3, r5
   21c38:	b	218b0 <_start@@Base+0xc824>
   21c3c:	mov	r2, r6
   21c40:	mov	r3, r5
   21c44:	b	218d8 <_start@@Base+0xc84c>
   21c48:	mov	r2, r6
   21c4c:	mov	r3, r5
   21c50:	b	21900 <_start@@Base+0xc874>
   21c54:	mov	r2, r6
   21c58:	mov	r3, r5
   21c5c:	b	21924 <_start@@Base+0xc898>
   21c60:	mov	r2, r6
   21c64:	mov	r3, r5
   21c68:	b	2194c <_start@@Base+0xc8c0>
   21c6c:	mov	r2, r6
   21c70:	mov	r3, r5
   21c74:	b	21974 <_start@@Base+0xc8e8>
   21c78:	sub	r3, r0, #1
   21c7c:	cmp	r3, #7
   21c80:	ldrls	pc, [pc, r3, lsl #2]
   21c84:	b	21b10 <_start@@Base+0xca84>
   21c88:	strdeq	r1, [r2], -r0
   21c8c:	andeq	r1, r2, r4, ror #25
   21c90:	ldrdeq	r1, [r2], -r8
   21c94:	andeq	r1, r2, ip, asr #25
   21c98:	andeq	r1, r2, r0, asr #25
   21c9c:			; <UNDEFINED> instruction: 0x00021cb4
   21ca0:	andeq	r1, r2, r8, lsr #25
   21ca4:	andeq	r1, r2, r0, asr #19
   21ca8:	mov	sl, r6
   21cac:	mov	fp, r5
   21cb0:	b	219c8 <_start@@Base+0xc93c>
   21cb4:	mov	sl, r6
   21cb8:	mov	fp, r5
   21cbc:	b	219f4 <_start@@Base+0xc968>
   21cc0:	mov	sl, r6
   21cc4:	mov	fp, r5
   21cc8:	b	21a20 <_start@@Base+0xc994>
   21ccc:	mov	sl, r6
   21cd0:	mov	fp, r5
   21cd4:	b	21a48 <_start@@Base+0xc9bc>
   21cd8:	mov	sl, r6
   21cdc:	mov	fp, r5
   21ce0:	b	21a6c <_start@@Base+0xc9e0>
   21ce4:	mov	r2, r6
   21ce8:	mov	r3, r5
   21cec:	b	21a8c <_start@@Base+0xca00>
   21cf0:	mov	r2, r6
   21cf4:	mov	r3, r5
   21cf8:	b	21ab4 <_start@@Base+0xca28>
   21cfc:	add	r0, r4, #1
   21d00:	sub	r3, r7, r0
   21d04:	cmp	r3, #1
   21d08:	ble	21d1c <_start@@Base+0xcc90>
   21d0c:	ldrb	r3, [r4, #1]
   21d10:	cmp	r3, #32
   21d14:	bhi	21b9c <_start@@Base+0xcb10>
   21d18:	beq	22190 <_start@@Base+0xd104>
   21d1c:	mov	r1, r0
   21d20:	mov	r2, r7
   21d24:	mov	r0, r9
   21d28:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   21d2c:	ldr	r3, [sp, #672]	; 0x2a0
   21d30:	b	21844 <_start@@Base+0xc7b8>
   21d34:	ldrb	r3, [r4, #1]
   21d38:	cmp	r3, #32
   21d3c:	addhi	r4, r4, #1
   21d40:	bls	21b40 <_start@@Base+0xcab4>
   21d44:	cmp	r7, r4
   21d48:	bne	21b5c <_start@@Base+0xcad0>
   21d4c:	mov	r3, #0
   21d50:	mov	fp, r9
   21d54:	mov	sl, r7
   21d58:	str	r3, [sp, #672]	; 0x2a0
   21d5c:	mov	r9, r7
   21d60:	b	21ba8 <_start@@Base+0xcb1c>
   21d64:	nop			; (mov r0, r0)
   21d68:	svcpl	0x00626262
   21d6c:	cmnvs	r1, r1, ror #2
   21d70:	cmnvs	r2, pc, asr r4
   21d74:	subsvs	r7, pc, #116, 6	; 0xd0000001
   21d78:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   21d7c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   21d80:	movwvc	r0, #0
   21d84:	cmnvc	r4, #112, 10	; 0x1c000000
   21d88:	andeq	r7, r5, r0, ror #5
   21d8c:	andeq	r7, r5, ip, ror r2
   21d90:	muleq	r2, r8, r0
   21d94:	strdeq	r5, [r1], -r0
   21d98:	add	r4, r1, #16
   21d9c:	sub	r0, r7, r4
   21da0:	cmp	r0, #8
   21da4:	bls	2201c <_start@@Base+0xcf90>
   21da8:	ldrb	sl, [r1, #23]
   21dac:	mov	fp, #0
   21db0:	ldrb	r2, [r1, #22]
   21db4:	lsl	r3, r2, #8
   21db8:	str	r3, [sp, #624]	; 0x270
   21dbc:	add	r3, sp, #624	; 0x270
   21dc0:	lsr	ip, r2, #24
   21dc4:	str	ip, [sp, #628]	; 0x274
   21dc8:	ldrd	r2, [r3]
   21dcc:	orr	r2, r2, sl
   21dd0:	orr	r3, r3, fp
   21dd4:	mov	sl, r2
   21dd8:	mov	fp, r3
   21ddc:	ldrb	r2, [r1, #21]
   21de0:	lsl	r3, r2, #16
   21de4:	str	r3, [sp, #584]	; 0x248
   21de8:	add	r3, sp, #584	; 0x248
   21dec:	lsr	ip, r2, #16
   21df0:	str	ip, [sp, #588]	; 0x24c
   21df4:	ldrd	r2, [r3]
   21df8:	orr	r2, r2, sl
   21dfc:	orr	r3, r3, fp
   21e00:	mov	sl, r2
   21e04:	mov	fp, r3
   21e08:	ldrb	r2, [r1, #20]
   21e0c:	lsl	r3, r2, #24
   21e10:	str	r3, [sp, #552]	; 0x228
   21e14:	add	r3, sp, #552	; 0x228
   21e18:	lsr	ip, r2, #8
   21e1c:	str	ip, [sp, #556]	; 0x22c
   21e20:	ldrd	r2, [r3]
   21e24:	orr	r2, r2, sl
   21e28:	orr	r3, r3, fp
   21e2c:	mov	sl, r2
   21e30:	mov	fp, r3
   21e34:	ldrb	r3, [r1, #19]
   21e38:	str	r3, [sp, #564]	; 0x234
   21e3c:	mov	r3, #0
   21e40:	str	r3, [sp, #560]	; 0x230
   21e44:	add	r3, sp, #560	; 0x230
   21e48:	ldrd	r2, [r3]
   21e4c:	orr	r2, r2, sl
   21e50:	orr	r3, r3, fp
   21e54:	mov	sl, r2
   21e58:	mov	fp, r3
   21e5c:	ldrb	r2, [r1, #18]
   21e60:	lsl	r3, r2, #8
   21e64:	str	r3, [sp, #532]	; 0x214
   21e68:	mov	r3, #0
   21e6c:	str	r3, [sp, #528]	; 0x210
   21e70:	add	r3, sp, #528	; 0x210
   21e74:	ldrd	r2, [r3]
   21e78:	orr	r2, r2, sl
   21e7c:	orr	r3, r3, fp
   21e80:	mov	sl, r2
   21e84:	mov	fp, r3
   21e88:	ldrb	r2, [r1, #17]
   21e8c:	lsl	r3, r2, #16
   21e90:	str	r3, [sp, #484]	; 0x1e4
   21e94:	mov	r3, #0
   21e98:	str	r3, [sp, #480]	; 0x1e0
   21e9c:	add	r3, sp, #480	; 0x1e0
   21ea0:	ldrd	r2, [r3]
   21ea4:	orr	r2, r2, sl
   21ea8:	orr	r3, r3, fp
   21eac:	mov	sl, r2
   21eb0:	mov	fp, r3
   21eb4:	ldrb	r2, [r1, #16]
   21eb8:	lsl	r3, r2, #24
   21ebc:	str	r3, [sp, #444]	; 0x1bc
   21ec0:	mov	r3, #0
   21ec4:	str	r3, [sp, #440]	; 0x1b8
   21ec8:	add	r3, sp, #440	; 0x1b8
   21ecc:	ldrd	r2, [r3]
   21ed0:	orr	r2, r2, sl
   21ed4:	orr	r3, r3, fp
   21ed8:	mov	fp, r3
   21edc:	and	sl, r2, #-16777216	; 0xff000000
   21ee0:	sub	r3, pc, #360	; 0x168
   21ee4:	ldrd	r2, [r3]
   21ee8:	cmp	fp, r3
   21eec:	cmpeq	sl, r2
   21ef0:	bne	21b10 <_start@@Base+0xca84>
   21ef4:	cmp	r0, #5
   21ef8:	ble	21b10 <_start@@Base+0xca84>
   21efc:	mov	r3, #5
   21f00:	mov	r2, r7
   21f04:	mov	r1, r4
   21f08:	mov	r0, r9
   21f0c:	bl	18e7c <_start@@Base+0x3df0>
   21f10:	cmp	r4, r0
   21f14:	mov	sl, r0
   21f18:	beq	21b10 <_start@@Base+0xca84>
   21f1c:	add	r3, sp, #440	; 0x1b8
   21f20:	cmp	r7, r0
   21f24:	ldrd	r2, [r3]
   21f28:	str	r6, [sp, #688]	; 0x2b0
   21f2c:	str	r5, [sp, #692]	; 0x2b4
   21f30:	str	r2, [sp, #676]	; 0x2a4
   21f34:	str	r2, [sp, #680]	; 0x2a8
   21f38:	beq	22ea0 <_start@@Base+0xde14>
   21f3c:	add	r3, sp, #688	; 0x2b0
   21f40:	str	r3, [sp]
   21f44:	mov	r1, r0
   21f48:	add	r3, sp, #680	; 0x2a8
   21f4c:	mov	r2, r7
   21f50:	mov	r0, r9
   21f54:	bl	31c94 <flatcc_json_parser_integer@@Base>
   21f58:	cmp	sl, r0
   21f5c:	mov	r4, r0
   21f60:	beq	22ea0 <_start@@Base+0xde14>
   21f64:	ldr	r3, [sp, #680]	; 0x2a8
   21f68:	cmp	r3, #0
   21f6c:	bne	22d04 <_start@@Base+0xdc78>
   21f70:	add	r3, sp, #688	; 0x2b0
   21f74:	mov	r1, #0
   21f78:	ldrd	r2, [r3]
   21f7c:	mvn	r0, #0
   21f80:	cmp	r3, r1
   21f84:	cmpeq	r2, r0
   21f88:	strls	r2, [sp, #676]	; 0x2a4
   21f8c:	bhi	22d88 <_start@@Base+0xdcfc>
   21f90:	cmp	r2, #0
   21f94:	bne	21fa4 <_start@@Base+0xcf18>
   21f98:	ldr	r3, [r9, #8]
   21f9c:	tst	r3, #2
   21fa0:	beq	21b24 <_start@@Base+0xca98>
   21fa4:	mov	r3, #4
   21fa8:	mov	r2, r3
   21fac:	mov	r1, #1
   21fb0:	ldr	r0, [r9]
   21fb4:	bl	2a114 <flatcc_builder_table_add@@Base>
   21fb8:	cmp	r0, #0
   21fbc:	beq	22c64 <_start@@Base+0xdbd8>
   21fc0:	ldr	r3, [sp, #676]	; 0x2a4
   21fc4:	str	r3, [r0]
   21fc8:	b	21b24 <_start@@Base+0xca98>
   21fcc:	add	r1, r4, #1
   21fd0:	sub	r3, r7, r1
   21fd4:	cmp	r3, #1
   21fd8:	ble	21fec <_start@@Base+0xcf60>
   21fdc:	ldrb	r3, [r4, #1]
   21fe0:	cmp	r3, #32
   21fe4:	bhi	21ffc <_start@@Base+0xcf70>
   21fe8:	beq	221ac <_start@@Base+0xd120>
   21fec:	mov	r2, r7
   21ff0:	mov	r0, r9
   21ff4:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   21ff8:	mov	r1, r0
   21ffc:	cmp	r7, r1
   22000:	beq	221c4 <_start@@Base+0xd138>
   22004:	ldrb	r3, [r1]
   22008:	cmp	r3, #125	; 0x7d
   2200c:	beq	2230c <_start@@Base+0xd280>
   22010:	mov	r3, #1
   22014:	str	r3, [sp, #672]	; 0x2a0
   22018:	b	21850 <_start@@Base+0xc7c4>
   2201c:	sub	r3, r0, #1
   22020:	cmp	r3, #7
   22024:	ldrls	pc, [pc, r3, lsl #2]
   22028:	b	21b10 <_start@@Base+0xca84>
   2202c:	muleq	r2, r4, r0
   22030:	andeq	r2, r2, r8, lsl #1
   22034:	andeq	r2, r2, ip, ror r0
   22038:	andeq	r2, r2, r0, ror r0
   2203c:	andeq	r2, r2, r4, rrx
   22040:	andeq	r2, r2, r8, asr r0
   22044:	andeq	r2, r2, ip, asr #32
   22048:	andeq	r1, r2, r8, lsr #27
   2204c:	mov	sl, r6
   22050:	mov	fp, r5
   22054:	b	21db0 <_start@@Base+0xcd24>
   22058:	mov	sl, r6
   2205c:	mov	fp, r5
   22060:	b	21ddc <_start@@Base+0xcd50>
   22064:	mov	sl, r6
   22068:	mov	fp, r5
   2206c:	b	21e08 <_start@@Base+0xcd7c>
   22070:	mov	sl, r6
   22074:	mov	fp, r5
   22078:	b	21e34 <_start@@Base+0xcda8>
   2207c:	mov	sl, r6
   22080:	mov	fp, r5
   22084:	b	21e5c <_start@@Base+0xcdd0>
   22088:	mov	sl, r6
   2208c:	mov	fp, r5
   22090:	b	21e88 <_start@@Base+0xcdfc>
   22094:	mov	sl, r6
   22098:	mov	fp, r5
   2209c:	b	21eb4 <_start@@Base+0xce28>
   220a0:	mov	r3, #7
   220a4:	mov	r2, r7
   220a8:	mov	r1, r4
   220ac:	mov	r0, r9
   220b0:	bl	18e7c <_start@@Base+0x3df0>
   220b4:	cmp	r4, r0
   220b8:	mov	sl, r0
   220bc:	beq	21b10 <_start@@Base+0xca84>
   220c0:	ldr	r3, [sp, #96]	; 0x60
   220c4:	cmp	r7, r0
   220c8:	str	r6, [sp, #680]	; 0x2a8
   220cc:	str	r5, [sp, #684]	; 0x2ac
   220d0:	str	r6, [sp, #688]	; 0x2b0
   220d4:	str	r5, [sp, #692]	; 0x2b4
   220d8:	str	r3, [sp, #676]	; 0x2a4
   220dc:	beq	22c38 <_start@@Base+0xdbac>
   220e0:	add	r3, sp, #688	; 0x2b0
   220e4:	str	r3, [sp]
   220e8:	mov	r1, r0
   220ec:	add	r3, sp, #676	; 0x2a4
   220f0:	mov	r2, r7
   220f4:	mov	r0, r9
   220f8:	bl	31c94 <flatcc_json_parser_integer@@Base>
   220fc:	cmp	sl, r0
   22100:	mov	r4, r0
   22104:	beq	22c38 <_start@@Base+0xdbac>
   22108:	ldr	r1, [sp, #676]	; 0x2a4
   2210c:	add	r3, sp, #688	; 0x2b0
   22110:	cmp	r1, #0
   22114:	ldrd	r2, [r3]
   22118:	beq	22178 <_start@@Base+0xd0ec>
   2211c:	cmp	r3, #-2147483648	; 0x80000000
   22120:	cmpeq	r2, #0
   22124:	bhi	22224 <_start@@Base+0xd198>
   22128:	rsbs	r2, r2, #0
   2212c:	rsc	r3, r3, #0
   22130:	add	r1, sp, #680	; 0x2a8
   22134:	strd	r2, [r1]
   22138:	orrs	r3, r2, r3
   2213c:	bne	2214c <_start@@Base+0xd0c0>
   22140:	ldr	r3, [r9, #8]
   22144:	tst	r3, #2
   22148:	beq	21b24 <_start@@Base+0xca98>
   2214c:	mov	r3, #8
   22150:	mov	r2, r3
   22154:	mov	r1, #0
   22158:	ldr	r0, [r9]
   2215c:	bl	2a114 <flatcc_builder_table_add@@Base>
   22160:	cmp	r0, #0
   22164:	beq	22c64 <_start@@Base+0xdbd8>
   22168:	add	r3, sp, #680	; 0x2a8
   2216c:	ldrd	r2, [r3]
   22170:	strd	r2, [r0]
   22174:	b	21b24 <_start@@Base+0xca98>
   22178:	cmp	r2, #0
   2217c:	sbcs	r1, r3, #0
   22180:	blt	22e84 <_start@@Base+0xddf8>
   22184:	add	r1, sp, #680	; 0x2a8
   22188:	strd	r2, [r1]
   2218c:	b	22138 <_start@@Base+0xd0ac>
   22190:	ldrb	r3, [r4, #2]
   22194:	cmp	r3, #32
   22198:	bls	21d1c <_start@@Base+0xcc90>
   2219c:	mov	fp, r9
   221a0:	mov	sl, r7
   221a4:	add	r9, r4, #2
   221a8:	b	21ba8 <_start@@Base+0xcb1c>
   221ac:	ldrb	r3, [r4, #2]
   221b0:	cmp	r3, #32
   221b4:	addhi	r1, r4, #2
   221b8:	bls	21fec <_start@@Base+0xcf60>
   221bc:	cmp	r7, r1
   221c0:	bne	22004 <_start@@Base+0xcf78>
   221c4:	mov	ip, #0
   221c8:	mov	r3, #10
   221cc:	mov	r2, r7
   221d0:	mov	r1, r7
   221d4:	mov	r0, r9
   221d8:	str	ip, [sp, #672]	; 0x2a0
   221dc:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   221e0:	ldr	r3, [sp, #672]	; 0x2a0
   221e4:	b	21844 <_start@@Base+0xc7b8>
   221e8:	ldrb	r3, [r9, #2]
   221ec:	cmp	r3, #32
   221f0:	addhi	r0, r9, #2
   221f4:	bls	20d7c <_start@@Base+0xbcf0>
   221f8:	cmp	sl, r0
   221fc:	bne	20d94 <_start@@Base+0xbd08>
   22200:	mov	ip, #0
   22204:	mov	r3, #10
   22208:	mov	r2, sl
   2220c:	mov	r1, sl
   22210:	mov	r0, fp
   22214:	str	ip, [sp, #668]	; 0x29c
   22218:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   2221c:	ldr	r3, [sp, #668]	; 0x29c
   22220:	b	20628 <_start@@Base+0xb59c>
   22224:	mov	r1, r0
   22228:	mov	r3, #8
   2222c:	mov	r2, r7
   22230:	mov	r0, r9
   22234:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   22238:	mov	r4, r0
   2223c:	cmp	sl, r4
   22240:	beq	22c38 <_start@@Base+0xdbac>
   22244:	add	r3, sp, #680	; 0x2a8
   22248:	ldrd	r2, [r3]
   2224c:	b	22138 <_start@@Base+0xd0ac>
   22250:	mov	r1, r0
   22254:	mov	r3, #8
   22258:	mov	r2, r7
   2225c:	mov	r0, r9
   22260:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   22264:	mov	r4, r0
   22268:	cmp	sl, r4
   2226c:	beq	22d58 <_start@@Base+0xdccc>
   22270:	ldr	r2, [sp, #676]	; 0x2a4
   22274:	b	2164c <_start@@Base+0xc5c0>
   22278:	ldrb	r3, [r4, #2]
   2227c:	cmp	r3, #32
   22280:	addhi	r1, r4, #2
   22284:	bls	2151c <_start@@Base+0xc490>
   22288:	cmp	r7, r1
   2228c:	bne	21534 <_start@@Base+0xc4a8>
   22290:	mov	ip, #0
   22294:	mov	r3, #10
   22298:	mov	r2, r7
   2229c:	mov	r1, r7
   222a0:	mov	r0, r9
   222a4:	str	ip, [sp, #672]	; 0x2a0
   222a8:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   222ac:	ldr	r3, [sp, #672]	; 0x2a0
   222b0:	b	20e98 <_start@@Base+0xbe0c>
   222b4:	mov	r1, r5
   222b8:	mov	r3, #4
   222bc:	mov	r2, sl
   222c0:	mov	r0, fp
   222c4:	bl	18e7c <_start@@Base+0x3df0>
   222c8:	cmp	r5, r0
   222cc:	mov	r1, r0
   222d0:	beq	2054c <_start@@Base+0xb4c0>
   222d4:	ldr	r2, [sp, #664]	; 0x298
   222d8:	ldr	r3, [pc, #-1356]	; 21d94 <_start@@Base+0xcd08>
   222dc:	ldr	lr, [pc, #-1364]	; 21d90 <_start@@Base+0xcd04>
   222e0:	ldr	ip, [pc, #-1372]	; 21d8c <_start@@Base+0xcd00>
   222e4:	str	r3, [sp, #16]
   222e8:	mov	r3, #3
   222ec:	stmib	sp, {r2, ip, lr}
   222f0:	mov	r0, fp
   222f4:	str	r3, [sp]
   222f8:	mov	r2, sl
   222fc:	ldr	r3, [sp, #536]	; 0x218
   22300:	bl	32c9c <flatcc_json_parser_union_type_vector@@Base>
   22304:	mov	r6, r0
   22308:	b	202cc <_start@@Base+0xb240>
   2230c:	mov	r0, r1
   22310:	add	r1, r1, #1
   22314:	sub	r3, r7, r1
   22318:	cmp	r3, #1
   2231c:	mov	r3, #0
   22320:	str	r3, [sp, #672]	; 0x2a0
   22324:	ble	22338 <_start@@Base+0xd2ac>
   22328:	ldrb	r3, [r0, #1]
   2232c:	cmp	r3, #32
   22330:	bhi	22ed0 <_start@@Base+0xde44>
   22334:	beq	22dec <_start@@Base+0xdd60>
   22338:	mov	r2, r7
   2233c:	mov	r0, r9
   22340:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   22344:	ldr	r3, [sp, #672]	; 0x2a0
   22348:	b	21844 <_start@@Base+0xc7b8>
   2234c:	mov	r1, r4
   22350:	mov	r3, #7
   22354:	mov	r2, r7
   22358:	mov	r0, r9
   2235c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   22360:	mov	r4, r0
   22364:	b	22268 <_start@@Base+0xd1dc>
   22368:	mov	r3, #5
   2236c:	mov	r2, sl
   22370:	mov	r1, r8
   22374:	mov	r0, fp
   22378:	bl	18e7c <_start@@Base+0x3df0>
   2237c:	cmp	r8, r0
   22380:	mov	r9, r0
   22384:	beq	20a88 <_start@@Base+0xb9fc>
   22388:	mov	r1, #9
   2238c:	ldr	r0, [fp]
   22390:	bl	27fa8 <flatcc_builder_start_table@@Base>
   22394:	cmp	r0, #0
   22398:	bne	21224 <_start@@Base+0xc198>
   2239c:	mov	r1, r9
   223a0:	add	r3, sp, #676	; 0x2a4
   223a4:	mov	r2, sl
   223a8:	mov	r0, fp
   223ac:	bl	17c44 <_start@@Base+0x2bb8>
   223b0:	ldr	r3, [sp, #676]	; 0x2a4
   223b4:	cmp	r3, #0
   223b8:	mov	r9, r0
   223bc:	beq	2267c <_start@@Base+0xd5f0>
   223c0:	ldr	r8, [pc, #-1600]	; 21d88 <_start@@Base+0xccfc>
   223c4:	cmp	sl, r9
   223c8:	beq	22640 <_start@@Base+0xd5b4>
   223cc:	ldrb	r3, [r9]
   223d0:	cmp	r3, #34	; 0x22
   223d4:	addeq	r9, r9, #1
   223d8:	beq	223f4 <_start@@Base+0xd368>
   223dc:	mov	r1, r9
   223e0:	mov	r3, #5
   223e4:	mov	r2, sl
   223e8:	mov	r0, fp
   223ec:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   223f0:	mov	r9, r0
   223f4:	sub	ip, sl, r9
   223f8:	cmp	ip, #8
   223fc:	bls	22764 <_start@@Base+0xd6d8>
   22400:	ldrb	r2, [r9, #7]
   22404:	mov	r3, #0
   22408:	ldrb	r0, [r9, #6]
   2240c:	lsl	r1, r0, #8
   22410:	str	r1, [sp, #496]	; 0x1f0
   22414:	add	r1, sp, #496	; 0x1f0
   22418:	lsr	lr, r0, #24
   2241c:	str	lr, [sp, #500]	; 0x1f4
   22420:	ldrd	r0, [r1]
   22424:	orr	r0, r0, r2
   22428:	orr	r1, r1, r3
   2242c:	mov	r2, r0
   22430:	mov	r3, r1
   22434:	ldrb	r0, [r9, #5]
   22438:	lsl	r1, r0, #16
   2243c:	str	r1, [sp, #424]	; 0x1a8
   22440:	add	r1, sp, #424	; 0x1a8
   22444:	lsr	lr, r0, #16
   22448:	str	lr, [sp, #428]	; 0x1ac
   2244c:	ldrd	r0, [r1]
   22450:	orr	r0, r0, r2
   22454:	orr	r1, r1, r3
   22458:	mov	r2, r0
   2245c:	mov	r3, r1
   22460:	ldrb	r0, [r9, #4]
   22464:	lsl	r1, r0, #24
   22468:	str	r1, [sp, #328]	; 0x148
   2246c:	add	r1, sp, #328	; 0x148
   22470:	lsr	lr, r0, #8
   22474:	str	lr, [sp, #332]	; 0x14c
   22478:	ldrd	r0, [r1]
   2247c:	orr	r0, r0, r2
   22480:	orr	r1, r1, r3
   22484:	mov	r2, r0
   22488:	mov	r3, r1
   2248c:	ldrb	r1, [r9, #3]
   22490:	str	r1, [sp, #364]	; 0x16c
   22494:	mov	r1, #0
   22498:	str	r1, [sp, #360]	; 0x168
   2249c:	add	r1, sp, #360	; 0x168
   224a0:	ldrd	r0, [r1]
   224a4:	orr	r0, r0, r2
   224a8:	orr	r1, r1, r3
   224ac:	mov	r2, r0
   224b0:	mov	r3, r1
   224b4:	ldrb	r0, [r9, #2]
   224b8:	lsl	r1, r0, #8
   224bc:	str	r1, [sp, #284]	; 0x11c
   224c0:	mov	r1, #0
   224c4:	str	r1, [sp, #280]	; 0x118
   224c8:	add	r1, sp, #280	; 0x118
   224cc:	ldrd	r0, [r1]
   224d0:	orr	r0, r0, r2
   224d4:	orr	r1, r1, r3
   224d8:	mov	r2, r0
   224dc:	mov	r3, r1
   224e0:	ldrb	r0, [r9, #1]
   224e4:	lsl	r1, r0, #16
   224e8:	str	r1, [sp, #252]	; 0xfc
   224ec:	mov	r1, #0
   224f0:	str	r1, [sp, #248]	; 0xf8
   224f4:	ldrd	r0, [sp, #248]	; 0xf8
   224f8:	orr	r0, r0, r2
   224fc:	orr	r1, r1, r3
   22500:	mov	r2, r0
   22504:	mov	r3, r1
   22508:	ldrb	r6, [r9]
   2250c:	add	r1, pc, #916	; 0x394
   22510:	ldrd	r0, [r1]
   22514:	lsl	lr, r6, #24
   22518:	str	lr, [sp, #188]	; 0xbc
   2251c:	mov	lr, #0
   22520:	str	lr, [sp, #184]	; 0xb8
   22524:	ldrd	r4, [sp, #184]	; 0xb8
   22528:	orr	r5, r5, r3
   2252c:	orr	r4, r4, r2
   22530:	cmp	r5, r1
   22534:	cmpeq	r4, r0
   22538:	mov	r2, r4
   2253c:	mov	r3, r5
   22540:	bls	226a4 <_start@@Base+0xd618>
   22544:	add	r1, pc, #868	; 0x364
   22548:	ldrd	r0, [r1]
   2254c:	cmp	r5, r1
   22550:	cmpeq	r4, r0
   22554:	beq	227e8 <_start@@Base+0xd75c>
   22558:	add	r1, pc, #856	; 0x358
   2255c:	ldrd	r0, [r1]
   22560:	mov	r6, #0
   22564:	cmp	r5, r1
   22568:	cmpeq	r6, r0
   2256c:	beq	229c0 <_start@@Base+0xd934>
   22570:	add	r1, pc, #840	; 0x348
   22574:	ldrd	r0, [r1]
   22578:	cmp	r5, r1
   2257c:	cmpeq	r4, r0
   22580:	bne	22644 <_start@@Base+0xd5b8>
   22584:	cmp	ip, #8
   22588:	bgt	22b20 <_start@@Base+0xda94>
   2258c:	add	r9, r9, #8
   22590:	mov	r0, r9
   22594:	mov	r1, sl
   22598:	bl	151b8 <_start@@Base+0x12c>
   2259c:	mov	r0, #0
   225a0:	and	r1, r1, #-16777216	; 0xff000000
   225a4:	cmp	r1, #889192448	; 0x35000000
   225a8:	cmpeq	r0, #0
   225ac:	bne	22644 <_start@@Base+0xd5b8>
   225b0:	sub	r3, sl, r9
   225b4:	cmp	r3, #1
   225b8:	ble	22644 <_start@@Base+0xd5b8>
   225bc:	mov	r3, #1
   225c0:	mov	r2, sl
   225c4:	mov	r1, r9
   225c8:	mov	r0, fp
   225cc:	bl	18e7c <_start@@Base+0x3df0>
   225d0:	cmp	r9, r0
   225d4:	mov	r5, r0
   225d8:	beq	22644 <_start@@Base+0xd5b8>
   225dc:	add	r4, sp, #696	; 0x2b8
   225e0:	mov	r3, #0
   225e4:	str	r3, [r4, #-8]!
   225e8:	mov	r1, r0
   225ec:	mov	r2, sl
   225f0:	mov	r3, r4
   225f4:	mov	r0, fp
   225f8:	bl	1750c <_start@@Base+0x2480>
   225fc:	cmp	r5, r0
   22600:	mov	r9, r0
   22604:	beq	23040 <_start@@Base+0xdfb4>
   22608:	ldr	r3, [sp, #688]	; 0x2b0
   2260c:	cmp	r3, #0
   22610:	bne	22620 <_start@@Base+0xd594>
   22614:	ldr	r3, [fp, #8]
   22618:	tst	r3, #2
   2261c:	beq	22658 <_start@@Base+0xd5cc>
   22620:	mov	r3, #4
   22624:	mov	r2, r3
   22628:	mov	r1, #8
   2262c:	ldr	r0, [fp]
   22630:	bl	2a114 <flatcc_builder_table_add@@Base>
   22634:	cmp	r0, #0
   22638:	bne	229b4 <_start@@Base+0xd928>
   2263c:	b	21224 <_start@@Base+0xc198>
   22640:	mov	r9, sl
   22644:	mov	r1, r9
   22648:	mov	r2, sl
   2264c:	mov	r0, fp
   22650:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   22654:	mov	r9, r0
   22658:	mov	r1, r9
   2265c:	add	r3, sp, #676	; 0x2a4
   22660:	mov	r2, sl
   22664:	mov	r0, fp
   22668:	bl	19abc <_start@@Base+0x4a30>
   2266c:	ldr	r3, [sp, #676]	; 0x2a4
   22670:	cmp	r3, #0
   22674:	mov	r9, r0
   22678:	bne	223c4 <_start@@Base+0xd338>
   2267c:	ldr	r1, [fp, #20]
   22680:	cmp	r1, #0
   22684:	bne	21224 <_start@@Base+0xc198>
   22688:	ldr	r0, [fp]
   2268c:	str	r1, [sp, #384]	; 0x180
   22690:	bl	289e8 <flatcc_builder_end_table@@Base>
   22694:	ldr	r1, [sp, #384]	; 0x180
   22698:	subs	r4, r0, #0
   2269c:	beq	21224 <_start@@Base+0xc198>
   226a0:	b	21bc8 <_start@@Base+0xcb3c>
   226a4:	add	r1, pc, #540	; 0x21c
   226a8:	ldrd	r0, [r1]
   226ac:	cmp	r5, r1
   226b0:	cmpeq	r4, r0
   226b4:	beq	22904 <_start@@Base+0xd878>
   226b8:	add	r7, pc, #528	; 0x210
   226bc:	ldrd	r6, [r7]
   226c0:	mov	r0, #0
   226c4:	mov	r1, r5
   226c8:	cmp	r5, r7
   226cc:	cmpeq	r0, r6
   226d0:	beq	22a20 <_start@@Base+0xd994>
   226d4:	add	r5, pc, #508	; 0x1fc
   226d8:	ldrd	r4, [r5]
   226dc:	cmp	r3, r5
   226e0:	cmpeq	r2, r4
   226e4:	beq	22a80 <_start@@Base+0xd9f4>
   226e8:	add	r3, pc, #496	; 0x1f0
   226ec:	ldrd	r2, [r3]
   226f0:	cmp	r1, r3
   226f4:	cmpeq	r0, r2
   226f8:	bne	22644 <_start@@Base+0xd5b8>
   226fc:	cmp	ip, #4
   22700:	ble	22644 <_start@@Base+0xd5b8>
   22704:	mov	r1, r9
   22708:	mov	r3, #4
   2270c:	mov	r2, sl
   22710:	mov	r0, fp
   22714:	bl	18e7c <_start@@Base+0x3df0>
   22718:	cmp	r9, r0
   2271c:	mov	r1, r0
   22720:	beq	22644 <_start@@Base+0xd5b8>
   22724:	add	r3, sp, #680	; 0x2a8
   22728:	mov	r2, sl
   2272c:	mov	r0, fp
   22730:	bl	32270 <flatcc_json_parser_build_string@@Base>
   22734:	ldr	r3, [sp, #680]	; 0x2a8
   22738:	cmp	r3, #0
   2273c:	mov	r9, r0
   22740:	beq	21224 <_start@@Base+0xc198>
   22744:	mov	r1, #2
   22748:	ldr	r0, [fp]
   2274c:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   22750:	cmp	r0, #0
   22754:	beq	21224 <_start@@Base+0xc198>
   22758:	ldr	r3, [sp, #680]	; 0x2a8
   2275c:	str	r3, [r0]
   22760:	b	22658 <_start@@Base+0xd5cc>
   22764:	sub	r3, ip, #1
   22768:	cmp	r3, #7
   2276c:	ldrls	pc, [pc, r3, lsl #2]
   22770:	b	22644 <_start@@Base+0xd5b8>
   22774:	ldrdeq	r2, [r2], -ip
   22778:	ldrdeq	r2, [r2], -r0
   2277c:	andeq	r2, r2, r4, asr #15
   22780:			; <UNDEFINED> instruction: 0x000227b8
   22784:	andeq	r2, r2, ip, lsr #15
   22788:	andeq	r2, r2, r0, lsr #15
   2278c:	muleq	r2, r4, r7
   22790:	andeq	r2, r2, r0, lsl #8
   22794:	mov	r2, #0
   22798:	mov	r3, #0
   2279c:	b	22408 <_start@@Base+0xd37c>
   227a0:	mov	r2, #0
   227a4:	mov	r3, #0
   227a8:	b	22434 <_start@@Base+0xd3a8>
   227ac:	mov	r2, #0
   227b0:	mov	r3, #0
   227b4:	b	22460 <_start@@Base+0xd3d4>
   227b8:	mov	r2, #0
   227bc:	mov	r3, #0
   227c0:	b	2248c <_start@@Base+0xd400>
   227c4:	mov	r2, #0
   227c8:	mov	r3, #0
   227cc:	b	224b4 <_start@@Base+0xd428>
   227d0:	mov	r2, #0
   227d4:	mov	r3, #0
   227d8:	b	224e0 <_start@@Base+0xd454>
   227dc:	mov	r2, #0
   227e0:	mov	r3, #0
   227e4:	b	22508 <_start@@Base+0xd47c>
   227e8:	cmp	ip, #8
   227ec:	bgt	22bac <_start@@Base+0xdb20>
   227f0:	add	r9, r9, #8
   227f4:	mov	r0, r9
   227f8:	mov	r1, sl
   227fc:	bl	151b8 <_start@@Base+0x12c>
   22800:	mov	r0, #0
   22804:	and	r1, r1, #-16777216	; 0xff000000
   22808:	cmp	r1, #889192448	; 0x35000000
   2280c:	cmpeq	r0, #0
   22810:	bne	22644 <_start@@Base+0xd5b8>
   22814:	sub	r3, sl, r9
   22818:	cmp	r3, #1
   2281c:	ble	22644 <_start@@Base+0xd5b8>
   22820:	mov	r3, #1
   22824:	mov	r2, sl
   22828:	mov	r1, r9
   2282c:	mov	r0, fp
   22830:	bl	18e7c <_start@@Base+0x3df0>
   22834:	cmp	r9, r0
   22838:	mov	r5, r0
   2283c:	beq	22644 <_start@@Base+0xd5b8>
   22840:	add	r4, sp, #696	; 0x2b8
   22844:	mov	r3, #0
   22848:	str	r3, [r4, #-8]!
   2284c:	mov	r1, r0
   22850:	mov	r2, sl
   22854:	mov	r3, r4
   22858:	mov	r0, fp
   2285c:	bl	1750c <_start@@Base+0x2480>
   22860:	cmp	r5, r0
   22864:	mov	r9, r0
   22868:	beq	2306c <_start@@Base+0xdfe0>
   2286c:	ldr	r3, [sp, #688]	; 0x2b0
   22870:	cmp	r3, #0
   22874:	bne	22884 <_start@@Base+0xd7f8>
   22878:	ldr	r3, [fp, #8]
   2287c:	tst	r3, #2
   22880:	beq	22658 <_start@@Base+0xd5cc>
   22884:	mov	r3, #4
   22888:	mov	r2, r3
   2288c:	mov	r1, #6
   22890:	ldr	r0, [fp]
   22894:	bl	2a114 <flatcc_builder_table_add@@Base>
   22898:	cmp	r0, #0
   2289c:	bne	229b4 <_start@@Base+0xd928>
   228a0:	b	21224 <_start@@Base+0xc198>
   228a4:	nop			; (mov r0, r0)
   228a8:			; <UNDEFINED> instruction: 0xffffffff
   228ac:	cmnvs	r3, #-2013265919	; 0x88000001
   228b0:	teqcc	r2, r4, lsr r3
   228b4:	cmnvs	r3, #-1946157055	; 0x8c000001
   228b8:	andeq	r0, r0, r0
   228bc:	cmnvs	r3, #-1946157055	; 0x8c000001
   228c0:	teqcc	r2, r4, lsr r3
   228c4:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   228c8:	teqcc	r2, r4, lsr r3
   228cc:	cmnvs	r1, r1, ror #2
   228d0:	andeq	r0, r0, r0
   228d4:	cmnvs	r1, r1, ror #2
   228d8:	teqcc	r2, r4, lsr r3
   228dc:	rsbvs	r6, r2, #536870918	; 0x20000006
   228e0:	andeq	r0, r0, r0
   228e4:	rsbvs	r6, r2, #536870918	; 0x20000006
   228e8:	andeq	r7, r5, ip, lsl #5
   228ec:	andeq	r7, r5, ip, ror #5
   228f0:	ldrdeq	r7, [r5], -r4
   228f4:			; <UNDEFINED> instruction: 0x000572bc
   228f8:			; <UNDEFINED> instruction: 0x000572b0
   228fc:	andeq	r7, r5, r4, lsr #5
   22900:	andeq	r7, r5, r8, asr #5
   22904:	add	r9, r9, #8
   22908:	mov	r0, r9
   2290c:	mov	r1, sl
   22910:	bl	151b8 <_start@@Base+0x12c>
   22914:	mov	r0, #0
   22918:	and	r1, r1, #-16777216	; 0xff000000
   2291c:	cmp	r1, #889192448	; 0x35000000
   22920:	cmpeq	r0, #0
   22924:	bne	22644 <_start@@Base+0xd5b8>
   22928:	sub	r3, sl, r9
   2292c:	cmp	r3, #1
   22930:	ble	22644 <_start@@Base+0xd5b8>
   22934:	mov	r3, #1
   22938:	mov	r2, sl
   2293c:	mov	r1, r9
   22940:	mov	r0, fp
   22944:	bl	18e7c <_start@@Base+0x3df0>
   22948:	cmp	r9, r0
   2294c:	mov	r5, r0
   22950:	beq	22644 <_start@@Base+0xd5b8>
   22954:	ldr	r3, [sp, #184]	; 0xb8
   22958:	add	r4, sp, #696	; 0x2b8
   2295c:	mov	r1, r0
   22960:	str	r3, [r4, #-8]!
   22964:	mov	r2, sl
   22968:	mov	r3, r4
   2296c:	mov	r0, fp
   22970:	bl	1750c <_start@@Base+0x2480>
   22974:	cmp	r5, r0
   22978:	mov	r9, r0
   2297c:	beq	22fe4 <_start@@Base+0xdf58>
   22980:	ldr	r3, [sp, #688]	; 0x2b0
   22984:	cmp	r3, #0
   22988:	bne	22998 <_start@@Base+0xd90c>
   2298c:	ldr	r3, [fp, #8]
   22990:	tst	r3, #2
   22994:	beq	22658 <_start@@Base+0xd5cc>
   22998:	mov	r3, #4
   2299c:	mov	r2, r3
   229a0:	mov	r1, #1
   229a4:	ldr	r0, [fp]
   229a8:	bl	2a114 <flatcc_builder_table_add@@Base>
   229ac:	cmp	r0, #0
   229b0:	beq	21224 <_start@@Base+0xc198>
   229b4:	ldr	r3, [sp, #688]	; 0x2b0
   229b8:	str	r3, [r0]
   229bc:	b	22658 <_start@@Base+0xd5cc>
   229c0:	cmp	ip, #4
   229c4:	ble	22644 <_start@@Base+0xd5b8>
   229c8:	mov	r1, r9
   229cc:	mov	r3, #4
   229d0:	mov	r2, sl
   229d4:	mov	r0, fp
   229d8:	bl	18e7c <_start@@Base+0x3df0>
   229dc:	cmp	r9, r0
   229e0:	mov	r1, r0
   229e4:	beq	22644 <_start@@Base+0xd5b8>
   229e8:	add	r3, sp, #680	; 0x2a8
   229ec:	mov	r2, sl
   229f0:	mov	r0, fp
   229f4:	bl	32270 <flatcc_json_parser_build_string@@Base>
   229f8:	ldr	r3, [sp, #680]	; 0x2a8
   229fc:	cmp	r3, #0
   22a00:	mov	r9, r0
   22a04:	beq	21224 <_start@@Base+0xc198>
   22a08:	mov	r1, #4
   22a0c:	ldr	r0, [fp]
   22a10:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   22a14:	cmp	r0, #0
   22a18:	bne	22758 <_start@@Base+0xd6cc>
   22a1c:	b	21224 <_start@@Base+0xc198>
   22a20:	cmp	ip, #4
   22a24:	ble	22644 <_start@@Base+0xd5b8>
   22a28:	mov	r1, r9
   22a2c:	mov	r3, #4
   22a30:	mov	r2, sl
   22a34:	mov	r0, fp
   22a38:	bl	18e7c <_start@@Base+0x3df0>
   22a3c:	cmp	r9, r0
   22a40:	mov	r1, r0
   22a44:	beq	22644 <_start@@Base+0xd5b8>
   22a48:	add	r3, sp, #680	; 0x2a8
   22a4c:	mov	r2, sl
   22a50:	mov	r0, fp
   22a54:	bl	32270 <flatcc_json_parser_build_string@@Base>
   22a58:	ldr	r3, [sp, #680]	; 0x2a8
   22a5c:	cmp	r3, #0
   22a60:	mov	r9, r0
   22a64:	beq	21224 <_start@@Base+0xc198>
   22a68:	ldr	r1, [sp, #184]	; 0xb8
   22a6c:	ldr	r0, [fp]
   22a70:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   22a74:	cmp	r0, #0
   22a78:	bne	22758 <_start@@Base+0xd6cc>
   22a7c:	b	21224 <_start@@Base+0xc198>
   22a80:	cmp	ip, #8
   22a84:	ble	22644 <_start@@Base+0xd5b8>
   22a88:	mov	r3, #8
   22a8c:	mov	r2, sl
   22a90:	mov	r1, r9
   22a94:	mov	r0, fp
   22a98:	bl	18e7c <_start@@Base+0x3df0>
   22a9c:	cmp	r9, r0
   22aa0:	mov	r5, r0
   22aa4:	beq	22644 <_start@@Base+0xd5b8>
   22aa8:	mov	r0, #0
   22aac:	mov	r1, #0
   22ab0:	add	r4, sp, #696	; 0x2b8
   22ab4:	mov	r2, sl
   22ab8:	strd	r0, [r4, #-8]!
   22abc:	mov	r1, r5
   22ac0:	mov	r3, r4
   22ac4:	mov	r0, fp
   22ac8:	bl	170fc <_start@@Base+0x2070>
   22acc:	cmp	r5, r0
   22ad0:	mov	r9, r0
   22ad4:	beq	22f84 <_start@@Base+0xdef8>
   22ad8:	add	r3, sp, #688	; 0x2b0
   22adc:	ldrd	r2, [r3]
   22ae0:	orrs	r3, r2, r3
   22ae4:	bne	22af4 <_start@@Base+0xda68>
   22ae8:	ldr	r3, [fp, #8]
   22aec:	tst	r3, #2
   22af0:	beq	22658 <_start@@Base+0xd5cc>
   22af4:	mov	r3, #8
   22af8:	mov	r2, r3
   22afc:	mov	r1, #3
   22b00:	ldr	r0, [fp]
   22b04:	bl	2a114 <flatcc_builder_table_add@@Base>
   22b08:	cmp	r0, #0
   22b0c:	beq	21224 <_start@@Base+0xc198>
   22b10:	add	r3, sp, #688	; 0x2b0
   22b14:	ldrd	r2, [r3]
   22b18:	strd	r2, [r0]
   22b1c:	b	22658 <_start@@Base+0xd5cc>
   22b20:	mov	r3, #8
   22b24:	mov	r2, sl
   22b28:	mov	r1, r9
   22b2c:	mov	r0, fp
   22b30:	bl	18e7c <_start@@Base+0x3df0>
   22b34:	cmp	r9, r0
   22b38:	mov	r5, r0
   22b3c:	beq	2258c <_start@@Base+0xd500>
   22b40:	mov	r0, #0
   22b44:	mov	r1, #0
   22b48:	add	r4, sp, #696	; 0x2b8
   22b4c:	mov	r2, sl
   22b50:	strd	r0, [r4, #-8]!
   22b54:	mov	r1, r5
   22b58:	mov	r3, r4
   22b5c:	mov	r0, fp
   22b60:	bl	170fc <_start@@Base+0x2070>
   22b64:	cmp	r5, r0
   22b68:	mov	r9, r0
   22b6c:	beq	22f10 <_start@@Base+0xde84>
   22b70:	add	r3, sp, #688	; 0x2b0
   22b74:	ldrd	r2, [r3]
   22b78:	orrs	r3, r2, r3
   22b7c:	bne	22b8c <_start@@Base+0xdb00>
   22b80:	ldr	r3, [fp, #8]
   22b84:	tst	r3, #2
   22b88:	beq	22658 <_start@@Base+0xd5cc>
   22b8c:	mov	r3, #8
   22b90:	mov	r2, r3
   22b94:	mov	r1, #7
   22b98:	ldr	r0, [fp]
   22b9c:	bl	2a114 <flatcc_builder_table_add@@Base>
   22ba0:	cmp	r0, #0
   22ba4:	bne	22b10 <_start@@Base+0xda84>
   22ba8:	b	21224 <_start@@Base+0xc198>
   22bac:	mov	r3, #8
   22bb0:	mov	r2, sl
   22bb4:	mov	r1, r9
   22bb8:	mov	r0, fp
   22bbc:	bl	18e7c <_start@@Base+0x3df0>
   22bc0:	cmp	r9, r0
   22bc4:	mov	r5, r0
   22bc8:	beq	227f0 <_start@@Base+0xd764>
   22bcc:	mov	r0, #0
   22bd0:	mov	r1, #0
   22bd4:	add	r4, sp, #696	; 0x2b8
   22bd8:	mov	r2, sl
   22bdc:	strd	r0, [r4, #-8]!
   22be0:	mov	r1, r5
   22be4:	mov	r3, r4
   22be8:	mov	r0, fp
   22bec:	bl	170fc <_start@@Base+0x2070>
   22bf0:	cmp	r5, r0
   22bf4:	mov	r9, r0
   22bf8:	beq	22f3c <_start@@Base+0xdeb0>
   22bfc:	add	r3, sp, #688	; 0x2b0
   22c00:	ldrd	r2, [r3]
   22c04:	orrs	r3, r2, r3
   22c08:	bne	22c18 <_start@@Base+0xdb8c>
   22c0c:	ldr	r3, [fp, #8]
   22c10:	tst	r3, #2
   22c14:	beq	22658 <_start@@Base+0xd5cc>
   22c18:	mov	r3, #8
   22c1c:	mov	r2, r3
   22c20:	mov	r1, #5
   22c24:	ldr	r0, [fp]
   22c28:	bl	2a114 <flatcc_builder_table_add@@Base>
   22c2c:	cmp	r0, #0
   22c30:	bne	22b10 <_start@@Base+0xda84>
   22c34:	b	21224 <_start@@Base+0xc198>
   22c38:	add	r3, sp, #680	; 0x2a8
   22c3c:	str	r3, [sp]
   22c40:	mov	r2, r7
   22c44:	mov	r3, r8
   22c48:	mov	r1, sl
   22c4c:	mov	r0, r9
   22c50:	bl	18bf0 <_start@@Base+0x3b64>
   22c54:	cmp	r7, r0
   22c58:	cmpne	r0, sl
   22c5c:	mov	r4, r0
   22c60:	bne	22244 <_start@@Base+0xd1b8>
   22c64:	mov	fp, r9
   22c68:	mov	sl, r7
   22c6c:	mov	r9, r4
   22c70:	b	21224 <_start@@Base+0xc198>
   22c74:	ldrb	r3, [r6, #2]
   22c78:	cmp	r3, #32
   22c7c:	bls	20584 <_start@@Base+0xb4f8>
   22c80:	add	r4, r6, #2
   22c84:	b	20354 <_start@@Base+0xb2c8>
   22c88:	add	r1, r0, #1
   22c8c:	sub	r3, sl, r1
   22c90:	cmp	r3, #1
   22c94:	mov	r3, #0
   22c98:	str	r3, [sp, #668]	; 0x29c
   22c9c:	ble	22cb0 <_start@@Base+0xdc24>
   22ca0:	ldrb	r3, [r0, #1]
   22ca4:	cmp	r3, #32
   22ca8:	bhi	22dd4 <_start@@Base+0xdd48>
   22cac:	beq	23010 <_start@@Base+0xdf84>
   22cb0:	mov	r2, sl
   22cb4:	mov	r0, fp
   22cb8:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   22cbc:	ldr	r3, [sp, #668]	; 0x29c
   22cc0:	b	20628 <_start@@Base+0xb59c>
   22cc4:	mov	r0, r1
   22cc8:	add	r1, r1, #1
   22ccc:	sub	r3, r7, r1
   22cd0:	cmp	r3, #1
   22cd4:	mov	r3, #0
   22cd8:	str	r3, [sp, #672]	; 0x2a0
   22cdc:	ble	22cf0 <_start@@Base+0xdc64>
   22ce0:	ldrb	r3, [r0, #1]
   22ce4:	cmp	r3, #32
   22ce8:	bhi	22ddc <_start@@Base+0xdd50>
   22cec:	beq	23024 <_start@@Base+0xdf98>
   22cf0:	mov	r2, r7
   22cf4:	mov	r0, r9
   22cf8:	bl	2e9b4 <flatcc_json_parser_space_ext@@Base>
   22cfc:	ldr	r3, [sp, #672]	; 0x2a0
   22d00:	b	20e98 <_start@@Base+0xbe0c>
   22d04:	mov	r1, r0
   22d08:	mov	r3, #8
   22d0c:	mov	r2, r7
   22d10:	mov	r0, r9
   22d14:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   22d18:	mov	r4, r0
   22d1c:	cmp	sl, r4
   22d20:	beq	22ea0 <_start@@Base+0xde14>
   22d24:	ldr	r2, [sp, #676]	; 0x2a4
   22d28:	b	21f90 <_start@@Base+0xcf04>
   22d2c:	mov	r1, r0
   22d30:	mov	r3, #8
   22d34:	mov	r2, r7
   22d38:	mov	r0, r9
   22d3c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   22d40:	mov	r4, r0
   22d44:	cmp	sl, r4
   22d48:	beq	22e40 <_start@@Base+0xddb4>
   22d4c:	add	r3, sp, #680	; 0x2a8
   22d50:	ldrd	r2, [r3]
   22d54:	b	214bc <_start@@Base+0xc430>
   22d58:	add	r3, sp, #676	; 0x2a4
   22d5c:	str	r3, [sp]
   22d60:	mov	r2, r7
   22d64:	mov	r3, r8
   22d68:	mov	r1, sl
   22d6c:	mov	r0, r9
   22d70:	bl	1887c <_start@@Base+0x37f0>
   22d74:	cmp	r7, r0
   22d78:	cmpne	r0, sl
   22d7c:	mov	r4, r0
   22d80:	bne	22270 <_start@@Base+0xd1e4>
   22d84:	b	22c64 <_start@@Base+0xdbd8>
   22d88:	mov	r1, r4
   22d8c:	mov	r3, #7
   22d90:	mov	r2, r7
   22d94:	mov	r0, r9
   22d98:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   22d9c:	mov	r4, r0
   22da0:	b	22d1c <_start@@Base+0xdc90>
   22da4:	mov	r3, #0
   22da8:	b	2045c <_start@@Base+0xb3d0>
   22dac:	mov	r3, #0
   22db0:	b	20480 <_start@@Base+0xb3f4>
   22db4:	mov	r3, #0
   22db8:	b	204a4 <_start@@Base+0xb418>
   22dbc:	mov	r3, #0
   22dc0:	b	204c4 <_start@@Base+0xb438>
   22dc4:	mov	r3, #0
   22dc8:	b	204e8 <_start@@Base+0xb45c>
   22dcc:	mov	r3, #0
   22dd0:	b	2050c <_start@@Base+0xb480>
   22dd4:	mov	r6, r1
   22dd8:	b	20b34 <_start@@Base+0xbaa8>
   22ddc:	mov	fp, r9
   22de0:	mov	sl, r7
   22de4:	mov	r9, r1
   22de8:	b	21218 <_start@@Base+0xc18c>
   22dec:	ldrb	r3, [r0, #2]
   22df0:	cmp	r3, #32
   22df4:	bls	22338 <_start@@Base+0xd2ac>
   22df8:	mov	fp, r9
   22dfc:	mov	sl, r7
   22e00:	add	r9, r0, #2
   22e04:	b	21ba8 <_start@@Base+0xcb1c>
   22e08:	mov	r1, r4
   22e0c:	ldr	r3, [sp, #664]	; 0x298
   22e10:	mov	r2, fp
   22e14:	mov	r0, sl
   22e18:	bl	32624 <flatcc_json_parser_finalize_unions@@Base>
   22e1c:	mov	r4, r0
   22e20:	ldr	r0, [sl]
   22e24:	bl	289e8 <flatcc_builder_end_table@@Base>
   22e28:	ldr	r3, [sp, #652]	; 0x28c
   22e2c:	cmp	r0, #0
   22e30:	str	r0, [r3]
   22e34:	beq	20360 <_start@@Base+0xb2d4>
   22e38:	mov	r0, r4
   22e3c:	b	20374 <_start@@Base+0xb2e8>
   22e40:	add	r3, sp, #680	; 0x2a8
   22e44:	str	r3, [sp]
   22e48:	mov	r2, r7
   22e4c:	ldr	r3, [pc, #-1388]	; 228e8 <_start@@Base+0xd85c>
   22e50:	mov	r1, sl
   22e54:	mov	r0, r9
   22e58:	bl	18bf0 <_start@@Base+0x3b64>
   22e5c:	cmp	r7, r0
   22e60:	cmpne	r0, sl
   22e64:	mov	r4, r0
   22e68:	bne	22d4c <_start@@Base+0xdcc0>
   22e6c:	b	22c64 <_start@@Base+0xdbd8>
   22e70:	ldrb	r3, [r6, #2]
   22e74:	cmp	r3, #32
   22e78:	addhi	r4, r6, #2
   22e7c:	bls	216a8 <_start@@Base+0xc61c>
   22e80:	b	216bc <_start@@Base+0xc630>
   22e84:	mov	r1, r0
   22e88:	mov	r3, #7
   22e8c:	mov	r2, r7
   22e90:	mov	r0, r9
   22e94:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   22e98:	mov	r4, r0
   22e9c:	b	2223c <_start@@Base+0xd1b0>
   22ea0:	add	r3, sp, #676	; 0x2a4
   22ea4:	str	r3, [sp]
   22ea8:	mov	r2, r7
   22eac:	ldr	r3, [pc, #-1480]	; 228ec <_start@@Base+0xd860>
   22eb0:	mov	r1, sl
   22eb4:	mov	r0, r9
   22eb8:	bl	1887c <_start@@Base+0x37f0>
   22ebc:	cmp	r7, r0
   22ec0:	cmpne	r0, sl
   22ec4:	mov	r4, r0
   22ec8:	bne	22d24 <_start@@Base+0xdc98>
   22ecc:	b	22c64 <_start@@Base+0xdbd8>
   22ed0:	mov	fp, r9
   22ed4:	mov	sl, r7
   22ed8:	mov	r9, r1
   22edc:	b	21ba8 <_start@@Base+0xcb1c>
   22ee0:	mov	r3, sl
   22ee4:	mov	sl, fp
   22ee8:	mov	fp, r3
   22eec:	add	r1, r4, #1
   22ef0:	mov	r3, #0
   22ef4:	mov	r2, fp
   22ef8:	mov	r0, sl
   22efc:	str	r3, [sp, #656]	; 0x290
   22f00:	bl	167a8 <_start@@Base+0x171c>
   22f04:	ldr	r3, [sp, #656]	; 0x290
   22f08:	mov	r4, r0
   22f0c:	b	200c0 <_start@@Base+0xb034>
   22f10:	mov	r1, r0
   22f14:	str	r4, [sp]
   22f18:	ldr	r3, [pc, #-1584]	; 228f0 <_start@@Base+0xd864>
   22f1c:	mov	r2, sl
   22f20:	mov	r0, fp
   22f24:	bl	18bf0 <_start@@Base+0x3b64>
   22f28:	cmp	sl, r0
   22f2c:	cmpne	r9, r0
   22f30:	mov	r9, r0
   22f34:	bne	22b70 <_start@@Base+0xdae4>
   22f38:	b	21224 <_start@@Base+0xc198>
   22f3c:	mov	r1, r0
   22f40:	str	r4, [sp]
   22f44:	ldr	r3, [pc, #-1624]	; 228f4 <_start@@Base+0xd868>
   22f48:	mov	r2, sl
   22f4c:	mov	r0, fp
   22f50:	bl	18bf0 <_start@@Base+0x3b64>
   22f54:	cmp	sl, r0
   22f58:	cmpne	r9, r0
   22f5c:	mov	r9, r0
   22f60:	bne	22bfc <_start@@Base+0xdb70>
   22f64:	b	21224 <_start@@Base+0xc198>
   22f68:	mov	r1, r0
   22f6c:	mov	r3, #7
   22f70:	mov	r2, r7
   22f74:	mov	r0, r9
   22f78:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   22f7c:	mov	r4, r0
   22f80:	b	22d44 <_start@@Base+0xdcb8>
   22f84:	mov	r1, r0
   22f88:	str	r4, [sp]
   22f8c:	ldr	r3, [pc, #-1692]	; 228f8 <_start@@Base+0xd86c>
   22f90:	mov	r2, sl
   22f94:	mov	r0, fp
   22f98:	bl	18bf0 <_start@@Base+0x3b64>
   22f9c:	cmp	sl, r0
   22fa0:	cmpne	r9, r0
   22fa4:	mov	r9, r0
   22fa8:	bne	22ad8 <_start@@Base+0xda4c>
   22fac:	b	21224 <_start@@Base+0xc198>
   22fb0:	mov	r3, sl
   22fb4:	mov	sl, fp
   22fb8:	mov	fp, r3
   22fbc:	mov	ip, #0
   22fc0:	mov	r3, #10
   22fc4:	mov	r2, fp
   22fc8:	mov	r1, fp
   22fcc:	mov	r0, sl
   22fd0:	str	ip, [sp, #656]	; 0x290
   22fd4:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   22fd8:	ldr	r3, [sp, #656]	; 0x290
   22fdc:	mov	r4, r0
   22fe0:	b	200c0 <_start@@Base+0xb034>
   22fe4:	mov	r1, r0
   22fe8:	str	r4, [sp]
   22fec:	ldr	r3, [pc, #-1784]	; 228fc <_start@@Base+0xd870>
   22ff0:	mov	r2, sl
   22ff4:	mov	r0, fp
   22ff8:	bl	1887c <_start@@Base+0x37f0>
   22ffc:	cmp	sl, r0
   23000:	cmpne	r9, r0
   23004:	mov	r9, r0
   23008:	bne	22980 <_start@@Base+0xd8f4>
   2300c:	b	21224 <_start@@Base+0xc198>
   23010:	ldrb	r3, [r0, #2]
   23014:	cmp	r3, #32
   23018:	bls	22cb0 <_start@@Base+0xdc24>
   2301c:	add	r6, r0, #2
   23020:	b	20b34 <_start@@Base+0xbaa8>
   23024:	ldrb	r3, [r0, #2]
   23028:	cmp	r3, #32
   2302c:	bls	22cf0 <_start@@Base+0xdc64>
   23030:	mov	fp, r9
   23034:	mov	sl, r7
   23038:	add	r9, r0, #2
   2303c:	b	21218 <_start@@Base+0xc18c>
   23040:	mov	r1, r0
   23044:	str	r4, [sp]
   23048:	mov	r3, r8
   2304c:	mov	r2, sl
   23050:	mov	r0, fp
   23054:	bl	1887c <_start@@Base+0x37f0>
   23058:	cmp	sl, r0
   2305c:	cmpne	r9, r0
   23060:	mov	r9, r0
   23064:	bne	22608 <_start@@Base+0xd57c>
   23068:	b	21224 <_start@@Base+0xc198>
   2306c:	mov	r1, r0
   23070:	str	r4, [sp]
   23074:	ldr	r3, [pc, #-1916]	; 22900 <_start@@Base+0xd874>
   23078:	mov	r2, sl
   2307c:	mov	r0, fp
   23080:	bl	1887c <_start@@Base+0x37f0>
   23084:	cmp	sl, r0
   23088:	cmpne	r9, r0
   2308c:	mov	r9, r0
   23090:	bne	2286c <_start@@Base+0xd7e0>
   23094:	b	21224 <_start@@Base+0xc198>
   23098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2309c:	sub	sp, sp, #92	; 0x5c
   230a0:	mov	r5, r2
   230a4:	ldr	r2, [sp, #128]	; 0x80
   230a8:	mov	ip, #0
   230ac:	mov	r8, r0
   230b0:	mov	r4, r1
   230b4:	str	ip, [r2]
   230b8:	cmp	r3, #4
   230bc:	ldrls	pc, [pc, r3, lsl #2]
   230c0:	b	23718 <_start@@Base+0xe68c>
   230c4:	andeq	r3, r2, ip, lsl r1
   230c8:	andeq	r3, r2, r0, ror #2
   230cc:	andeq	r3, r2, r0, ror r1
   230d0:	andeq	r3, r2, r8, lsl #8
   230d4:	ldrdeq	r3, [r2], -r8
   230d8:	ldr	r3, [sp, #128]	; 0x80
   230dc:	mov	r2, r5
   230e0:	bl	20048 <_start@@Base+0xafbc>
   230e4:	ldr	r3, [r8, #20]
   230e8:	cmp	r3, #0
   230ec:	bne	23114 <_start@@Base+0xe088>
   230f0:	ldr	r3, [sp, #128]	; 0x80
   230f4:	ldr	r3, [r3]
   230f8:	cmp	r3, #0
   230fc:	bne	23114 <_start@@Base+0xe088>
   23100:	mov	r1, r0
   23104:	mov	r2, r5
   23108:	mov	r0, r8
   2310c:	mov	r3, #33	; 0x21
   23110:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   23114:	add	sp, sp, #92	; 0x5c
   23118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2311c:	sub	r3, r5, r1
   23120:	cmp	r3, #3
   23124:	ble	23144 <_start@@Base+0xe0b8>
   23128:	mov	r2, #4
   2312c:	ldr	r1, [pc, #1268]	; 23628 <_start@@Base+0xe59c>
   23130:	mov	r0, r4
   23134:	bl	14558 <memcmp@plt>
   23138:	cmp	r0, #0
   2313c:	addeq	r0, r4, #4
   23140:	beq	23114 <_start@@Base+0xe088>
   23144:	mov	r2, r5
   23148:	mov	r1, r4
   2314c:	mov	r0, r8
   23150:	mov	r3, #26
   23154:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   23158:	add	sp, sp, #92	; 0x5c
   2315c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23160:	ldr	r3, [sp, #128]	; 0x80
   23164:	mov	r2, r5
   23168:	bl	1b7e0 <_start@@Base+0x6754>
   2316c:	b	230e4 <_start@@Base+0xe058>
   23170:	mov	r1, #4
   23174:	ldr	r0, [r0]
   23178:	bl	27fa8 <flatcc_builder_start_table@@Base>
   2317c:	cmp	r0, #0
   23180:	bne	23700 <_start@@Base+0xe674>
   23184:	mov	r1, r4
   23188:	add	r3, sp, #72	; 0x48
   2318c:	mov	r2, r5
   23190:	mov	r0, r8
   23194:	bl	17c44 <_start@@Base+0x2bb8>
   23198:	ldr	r3, [sp, #72]	; 0x48
   2319c:	cmp	r3, #0
   231a0:	mov	r4, r0
   231a4:	bne	2339c <_start@@Base+0xe310>
   231a8:	b	23980 <_start@@Base+0xe8f4>
   231ac:	ldrb	r6, [r4, #7]
   231b0:	mov	r7, #0
   231b4:	ldrb	r2, [r4, #6]
   231b8:	lsr	r1, r2, #24
   231bc:	lsl	r3, r2, #8
   231c0:	str	r1, [sp, #60]	; 0x3c
   231c4:	str	r3, [sp, #56]	; 0x38
   231c8:	ldrd	r2, [sp, #56]	; 0x38
   231cc:	orr	r2, r2, r6
   231d0:	orr	r3, r3, r7
   231d4:	mov	r6, r2
   231d8:	mov	r7, r3
   231dc:	ldrb	r2, [r4, #5]
   231e0:	lsr	r1, r2, #16
   231e4:	lsl	r3, r2, #16
   231e8:	str	r1, [sp, #52]	; 0x34
   231ec:	str	r3, [sp, #48]	; 0x30
   231f0:	ldrd	r2, [sp, #48]	; 0x30
   231f4:	orr	r2, r2, r6
   231f8:	orr	r3, r3, r7
   231fc:	mov	r6, r2
   23200:	mov	r7, r3
   23204:	ldrb	r2, [r4, #4]
   23208:	lsr	r1, r2, #8
   2320c:	lsl	r3, r2, #24
   23210:	str	r1, [sp, #36]	; 0x24
   23214:	str	r3, [sp, #32]
   23218:	ldrd	r2, [sp, #32]
   2321c:	orr	r2, r2, r6
   23220:	orr	r3, r3, r7
   23224:	mov	r6, r2
   23228:	mov	r7, r3
   2322c:	ldrb	r3, [r4, #3]
   23230:	str	r3, [sp, #44]	; 0x2c
   23234:	mov	r3, #0
   23238:	str	r3, [sp, #40]	; 0x28
   2323c:	ldrd	r2, [sp, #40]	; 0x28
   23240:	orr	r2, r2, r6
   23244:	orr	r3, r3, r7
   23248:	mov	r6, r2
   2324c:	mov	r7, r3
   23250:	ldrb	r2, [r4, #2]
   23254:	lsl	r3, r2, #8
   23258:	str	r3, [sp, #28]
   2325c:	mov	r3, #0
   23260:	str	r3, [sp, #24]
   23264:	ldrd	r2, [sp, #24]
   23268:	orr	r2, r2, r6
   2326c:	orr	r3, r3, r7
   23270:	mov	r6, r2
   23274:	mov	r7, r3
   23278:	ldrb	r2, [r4, #1]
   2327c:	lsl	r3, r2, #16
   23280:	str	r3, [sp, #20]
   23284:	mov	r3, #0
   23288:	str	r3, [sp, #16]
   2328c:	ldrd	r2, [sp, #16]
   23290:	orr	r2, r2, r6
   23294:	orr	r3, r3, r7
   23298:	mov	r6, r2
   2329c:	mov	r7, r3
   232a0:	ldrb	r2, [r4]
   232a4:	add	r1, pc, #868	; 0x364
   232a8:	ldrd	r0, [r1]
   232ac:	lsl	r3, r2, #24
   232b0:	str	r3, [sp, #12]
   232b4:	mov	r3, #0
   232b8:	str	r3, [sp, #8]
   232bc:	ldrd	r2, [sp, #8]
   232c0:	orr	r2, r2, r6
   232c4:	orr	r3, r3, r7
   232c8:	mov	r6, r2
   232cc:	mov	r7, r3
   232d0:	ldr	r2, [pc, #852]	; 2362c <_start@@Base+0xe5a0>
   232d4:	mvn	r3, #0
   232d8:	and	r3, r3, r7
   232dc:	and	r2, r2, r6
   232e0:	cmp	r3, r1
   232e4:	cmpeq	r2, r0
   232e8:	beq	2346c <_start@@Base+0xe3e0>
   232ec:	add	r3, pc, #804	; 0x324
   232f0:	ldrd	r2, [r3]
   232f4:	and	r0, r6, #-16777216	; 0xff000000
   232f8:	cmp	r7, r3
   232fc:	cmpeq	r0, r2
   23300:	movne	sl, #1
   23304:	moveq	sl, #0
   23308:	cmp	r9, #5
   2330c:	orrle	sl, sl, #1
   23310:	cmp	sl, #0
   23314:	beq	23770 <_start@@Base+0xe6e4>
   23318:	add	r3, pc, #768	; 0x300
   2331c:	ldrd	r2, [r3]
   23320:	bic	r1, r7, #255	; 0xff
   23324:	mov	r0, #0
   23328:	cmp	r1, r3
   2332c:	cmpeq	r0, r2
   23330:	beq	23540 <_start@@Base+0xe4b4>
   23334:	ldr	r3, [pc, #752]	; 2362c <_start@@Base+0xe5a0>
   23338:	mov	r2, #0
   2333c:	and	r7, r7, r3
   23340:	ldr	r3, [pc, #744]	; 23630 <_start@@Base+0xe5a4>
   23344:	and	r6, r6, r2
   23348:	cmp	r7, r3
   2334c:	mov	r2, #0
   23350:	cmpeq	r6, r2
   23354:	bne	23364 <_start@@Base+0xe2d8>
   23358:	sub	r3, r5, r4
   2335c:	cmp	r3, #2
   23360:	bgt	23644 <_start@@Base+0xe5b8>
   23364:	mov	r1, r4
   23368:	mov	r2, r5
   2336c:	mov	r0, r8
   23370:	bl	318a0 <flatcc_json_parser_unmatched_symbol@@Base>
   23374:	mov	r4, r0
   23378:	mov	r1, r4
   2337c:	add	r3, sp, #72	; 0x48
   23380:	mov	r2, r5
   23384:	mov	r0, r8
   23388:	bl	19abc <_start@@Base+0x4a30>
   2338c:	ldr	r3, [sp, #72]	; 0x48
   23390:	cmp	r3, #0
   23394:	mov	r4, r0
   23398:	beq	23980 <_start@@Base+0xe8f4>
   2339c:	cmp	r5, r4
   233a0:	beq	23830 <_start@@Base+0xe7a4>
   233a4:	ldrb	r3, [r4]
   233a8:	cmp	r3, #34	; 0x22
   233ac:	addeq	r4, r4, #1
   233b0:	beq	233cc <_start@@Base+0xe340>
   233b4:	mov	r1, r4
   233b8:	mov	r3, #5
   233bc:	mov	r2, r5
   233c0:	mov	r0, r8
   233c4:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   233c8:	mov	r4, r0
   233cc:	sub	r9, r5, r4
   233d0:	cmp	r9, #8
   233d4:	bhi	231ac <_start@@Base+0xe120>
   233d8:	sub	r3, r9, #1
   233dc:	cmp	r3, #7
   233e0:	ldrls	pc, [pc, r3, lsl #2]
   233e4:	b	23830 <_start@@Base+0xe7a4>
   233e8:	andeq	r3, r2, r0, ror #8
   233ec:	andeq	r3, r2, r4, asr r4
   233f0:	andeq	r3, r2, r8, asr #8
   233f4:	andeq	r3, r2, ip, lsr r4
   233f8:	andeq	r3, r2, r0, lsr r4
   233fc:	andeq	r3, r2, r4, lsr #8
   23400:	andeq	r3, r2, r8, lsl r4
   23404:	andeq	r3, r2, ip, lsr #3
   23408:	ldr	r3, [sp, #128]	; 0x80
   2340c:	mov	r2, r5
   23410:	bl	1b554 <_start@@Base+0x64c8>
   23414:	b	230e4 <_start@@Base+0xe058>
   23418:	mov	r6, #0
   2341c:	mov	r7, #0
   23420:	b	231b4 <_start@@Base+0xe128>
   23424:	mov	r6, #0
   23428:	mov	r7, #0
   2342c:	b	231dc <_start@@Base+0xe150>
   23430:	mov	r6, #0
   23434:	mov	r7, #0
   23438:	b	23204 <_start@@Base+0xe178>
   2343c:	mov	r6, #0
   23440:	mov	r7, #0
   23444:	b	2322c <_start@@Base+0xe1a0>
   23448:	mov	r6, #0
   2344c:	mov	r7, #0
   23450:	b	23250 <_start@@Base+0xe1c4>
   23454:	mov	r6, #0
   23458:	mov	r7, #0
   2345c:	b	23278 <_start@@Base+0xe1ec>
   23460:	mov	r6, #0
   23464:	mov	r7, #0
   23468:	b	232a0 <_start@@Base+0xe214>
   2346c:	cmp	r9, #6
   23470:	ble	23334 <_start@@Base+0xe2a8>
   23474:	mov	r3, #6
   23478:	mov	r2, r5
   2347c:	mov	r1, r4
   23480:	mov	r0, r8
   23484:	bl	18e7c <_start@@Base+0x3df0>
   23488:	cmp	r4, r0
   2348c:	mov	r9, r0
   23490:	beq	23334 <_start@@Base+0xe2a8>
   23494:	cmp	r5, r0
   23498:	ldrd	r0, [sp, #8]
   2349c:	mov	r2, #0
   234a0:	mov	r3, #0
   234a4:	strb	r0, [sp, #71]	; 0x47
   234a8:	str	r0, [sp, #76]	; 0x4c
   234ac:	strd	r2, [sp, #80]	; 0x50
   234b0:	beq	238b4 <_start@@Base+0xe828>
   234b4:	add	r3, sp, #80	; 0x50
   234b8:	str	r3, [sp]
   234bc:	mov	r2, r5
   234c0:	add	r3, sp, #76	; 0x4c
   234c4:	mov	r1, r9
   234c8:	mov	r0, r8
   234cc:	bl	31c94 <flatcc_json_parser_integer@@Base>
   234d0:	cmp	r9, r0
   234d4:	mov	r4, r0
   234d8:	beq	238b0 <_start@@Base+0xe824>
   234dc:	ldr	r1, [sp, #76]	; 0x4c
   234e0:	ldrd	r2, [sp, #80]	; 0x50
   234e4:	cmp	r1, #0
   234e8:	beq	23734 <_start@@Base+0xe6a8>
   234ec:	cmp	r3, #0
   234f0:	cmpeq	r2, #128	; 0x80
   234f4:	rsbls	r2, r2, #0
   234f8:	sxtbls	r2, r2
   234fc:	strbls	r2, [sp, #71]	; 0x47
   23500:	bhi	239ec <_start@@Base+0xe960>
   23504:	cmp	r2, #2
   23508:	bne	23518 <_start@@Base+0xe48c>
   2350c:	ldr	r3, [r8, #8]
   23510:	tst	r3, #2
   23514:	beq	23378 <_start@@Base+0xe2ec>
   23518:	mov	r3, #1
   2351c:	mov	r2, r3
   23520:	mov	r1, r3
   23524:	ldr	r0, [r8]
   23528:	bl	2a114 <flatcc_builder_table_add@@Base>
   2352c:	cmp	r0, #0
   23530:	beq	23700 <_start@@Base+0xe674>
   23534:	ldrsb	r3, [sp, #71]	; 0x47
   23538:	strb	r3, [r0]
   2353c:	b	23378 <_start@@Base+0xe2ec>
   23540:	cmp	r9, #3
   23544:	ble	23364 <_start@@Base+0xe2d8>
   23548:	mov	r3, #3
   2354c:	mov	r2, r5
   23550:	mov	r1, r4
   23554:	mov	r0, r8
   23558:	bl	18e7c <_start@@Base+0x3df0>
   2355c:	cmp	r4, r0
   23560:	mov	r6, r0
   23564:	beq	23364 <_start@@Base+0xe2d8>
   23568:	mov	r0, #0
   2356c:	mov	r1, #0
   23570:	mov	r3, #0
   23574:	cmp	r5, r6
   23578:	strd	r0, [sp, #80]	; 0x50
   2357c:	strb	r3, [sp, #71]	; 0x47
   23580:	str	r3, [sp, #76]	; 0x4c
   23584:	beq	238f0 <_start@@Base+0xe864>
   23588:	add	r3, sp, #80	; 0x50
   2358c:	str	r3, [sp]
   23590:	mov	r2, r5
   23594:	add	r3, sp, #76	; 0x4c
   23598:	mov	r1, r6
   2359c:	mov	r0, r8
   235a0:	bl	31c94 <flatcc_json_parser_integer@@Base>
   235a4:	cmp	r6, r0
   235a8:	mov	r4, r0
   235ac:	beq	238ec <_start@@Base+0xe860>
   235b0:	ldr	r3, [sp, #76]	; 0x4c
   235b4:	cmp	r3, #0
   235b8:	bne	239ac <_start@@Base+0xe920>
   235bc:	ldrd	r2, [sp, #80]	; 0x50
   235c0:	cmp	r3, #0
   235c4:	cmpeq	r2, #255	; 0xff
   235c8:	uxtbls	r2, r2
   235cc:	strbls	r2, [sp, #71]	; 0x47
   235d0:	bhi	23a08 <_start@@Base+0xe97c>
   235d4:	cmp	r2, #2
   235d8:	bne	235e8 <_start@@Base+0xe55c>
   235dc:	ldr	r3, [r8, #8]
   235e0:	tst	r3, #2
   235e4:	beq	23378 <_start@@Base+0xe2ec>
   235e8:	mov	r3, #1
   235ec:	mov	r2, r3
   235f0:	mov	r1, #3
   235f4:	ldr	r0, [r8]
   235f8:	bl	2a114 <flatcc_builder_table_add@@Base>
   235fc:	cmp	r0, #0
   23600:	beq	23700 <_start@@Base+0xe674>
   23604:	ldrb	r3, [sp, #71]	; 0x47
   23608:	strb	r3, [r0]
   2360c:	b	23378 <_start@@Base+0xe2ec>
   23610:	eorsvc	r0, r2, #0
   23614:	cmnvs	pc, #28416	; 0x6f00
   23618:	andvc	r0, r0, #0
   2361c:	cmnvs	pc, #28416	; 0x6f00
   23620:	andeq	r0, r0, r0
   23624:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   23628:	andeq	r1, r4, r4, asr ip
   2362c:			; <UNDEFINED> instruction: 0xffff0000
   23630:	strbvc	r0, [r3, #-0]!
   23634:	andeq	r7, r5, r0, lsr r3
   23638:	andeq	r7, r5, r4, lsl #6
   2363c:	andeq	r7, r5, r4, lsr #6
   23640:	andeq	r7, r5, r4, lsl r3
   23644:	mov	r3, #2
   23648:	mov	r2, r5
   2364c:	mov	r1, r4
   23650:	mov	r0, r8
   23654:	bl	18e7c <_start@@Base+0x3df0>
   23658:	cmp	r0, r4
   2365c:	mov	r6, r0
   23660:	beq	23364 <_start@@Base+0xe2d8>
   23664:	mov	r0, #0
   23668:	mov	r1, #0
   2366c:	mov	r3, #0
   23670:	cmp	r5, r6
   23674:	strd	r0, [sp, #80]	; 0x50
   23678:	strb	r3, [sp, #71]	; 0x47
   2367c:	str	r3, [sp, #76]	; 0x4c
   23680:	beq	2387c <_start@@Base+0xe7f0>
   23684:	add	r3, sp, #80	; 0x50
   23688:	str	r3, [sp]
   2368c:	mov	r2, r5
   23690:	add	r3, sp, #76	; 0x4c
   23694:	mov	r1, r6
   23698:	mov	r0, r8
   2369c:	bl	31c94 <flatcc_json_parser_integer@@Base>
   236a0:	cmp	r6, r0
   236a4:	mov	r4, r0
   236a8:	beq	23878 <_start@@Base+0xe7ec>
   236ac:	ldr	r3, [sp, #76]	; 0x4c
   236b0:	cmp	r3, #0
   236b4:	bne	23924 <_start@@Base+0xe898>
   236b8:	ldrd	r2, [sp, #80]	; 0x50
   236bc:	cmp	r3, #0
   236c0:	cmpeq	r2, #255	; 0xff
   236c4:	uxtbls	r2, r2
   236c8:	strbls	r2, [sp, #71]	; 0x47
   236cc:	bhi	239d0 <_start@@Base+0xe944>
   236d0:	cmp	r2, #2
   236d4:	bne	236e4 <_start@@Base+0xe658>
   236d8:	ldr	r3, [r8, #8]
   236dc:	tst	r3, #2
   236e0:	beq	23378 <_start@@Base+0xe2ec>
   236e4:	mov	r3, #1
   236e8:	mov	r2, r3
   236ec:	mov	r1, #2
   236f0:	ldr	r0, [r8]
   236f4:	bl	2a114 <flatcc_builder_table_add@@Base>
   236f8:	cmp	r0, #0
   236fc:	bne	23604 <_start@@Base+0xe578>
   23700:	mov	r1, r4
   23704:	mov	r3, #33	; 0x21
   23708:	mov	r2, r5
   2370c:	mov	r0, r8
   23710:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   23714:	b	230e4 <_start@@Base+0xe058>
   23718:	ldr	r3, [r0, #8]
   2371c:	mov	r2, r5
   23720:	tst	r3, #1
   23724:	bne	238e4 <_start@@Base+0xe858>
   23728:	mov	r3, #15
   2372c:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   23730:	b	23114 <_start@@Base+0xe088>
   23734:	cmp	r3, #0
   23738:	cmpeq	r2, #127	; 0x7f
   2373c:	sxtbls	r2, r2
   23740:	strbls	r2, [sp, #71]	; 0x47
   23744:	bls	23504 <_start@@Base+0xe478>
   23748:	mov	r1, r0
   2374c:	mov	r3, #7
   23750:	mov	r2, r5
   23754:	mov	r0, r8
   23758:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   2375c:	mov	r4, r0
   23760:	cmp	r9, r4
   23764:	beq	238b4 <_start@@Base+0xe828>
   23768:	ldrsb	r2, [sp, #71]	; 0x47
   2376c:	b	23504 <_start@@Base+0xe478>
   23770:	mov	r3, #5
   23774:	mov	r2, r5
   23778:	mov	r1, r4
   2377c:	mov	r0, r8
   23780:	bl	18e7c <_start@@Base+0x3df0>
   23784:	cmp	r4, r0
   23788:	mov	fp, r0
   2378c:	beq	23318 <_start@@Base+0xe28c>
   23790:	mov	r2, #0
   23794:	mov	r3, #0
   23798:	cmp	r5, r0
   2379c:	strb	sl, [sp, #71]	; 0x47
   237a0:	str	sl, [sp, #76]	; 0x4c
   237a4:	strd	r2, [sp, #80]	; 0x50
   237a8:	beq	23950 <_start@@Base+0xe8c4>
   237ac:	add	r3, sp, #80	; 0x50
   237b0:	str	r3, [sp]
   237b4:	mov	r1, r0
   237b8:	add	r3, sp, #76	; 0x4c
   237bc:	mov	r2, r5
   237c0:	mov	r0, r8
   237c4:	bl	31c94 <flatcc_json_parser_integer@@Base>
   237c8:	cmp	fp, r0
   237cc:	mov	r4, r0
   237d0:	beq	2394c <_start@@Base+0xe8c0>
   237d4:	ldr	r1, [sp, #76]	; 0x4c
   237d8:	ldrd	r2, [sp, #80]	; 0x50
   237dc:	cmp	r1, #0
   237e0:	beq	2383c <_start@@Base+0xe7b0>
   237e4:	cmp	r3, #0
   237e8:	cmpeq	r2, #128	; 0x80
   237ec:	rsbls	r2, r2, #0
   237f0:	sxtbls	r2, r2
   237f4:	strbls	r2, [sp, #71]	; 0x47
   237f8:	bhi	23a24 <_start@@Base+0xe998>
   237fc:	cmp	r2, #2
   23800:	bne	23810 <_start@@Base+0xe784>
   23804:	ldr	r3, [r8, #8]
   23808:	tst	r3, #2
   2380c:	beq	23378 <_start@@Base+0xe2ec>
   23810:	mov	r3, #1
   23814:	mov	r2, r3
   23818:	mov	r1, #0
   2381c:	ldr	r0, [r8]
   23820:	bl	2a114 <flatcc_builder_table_add@@Base>
   23824:	cmp	r0, #0
   23828:	bne	23534 <_start@@Base+0xe4a8>
   2382c:	b	23700 <_start@@Base+0xe674>
   23830:	mov	r6, #0
   23834:	mov	r7, #0
   23838:	b	23334 <_start@@Base+0xe2a8>
   2383c:	cmp	r3, #0
   23840:	cmpeq	r2, #127	; 0x7f
   23844:	sxtbls	r2, r2
   23848:	strbls	r2, [sp, #71]	; 0x47
   2384c:	bls	237fc <_start@@Base+0xe770>
   23850:	mov	r1, r0
   23854:	mov	r3, #7
   23858:	mov	r2, r5
   2385c:	mov	r0, r8
   23860:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   23864:	mov	r4, r0
   23868:	cmp	fp, r4
   2386c:	beq	23950 <_start@@Base+0xe8c4>
   23870:	ldrsb	r2, [sp, #71]	; 0x47
   23874:	b	237fc <_start@@Base+0xe770>
   23878:	mov	r6, r0
   2387c:	add	r3, sp, #71	; 0x47
   23880:	str	r3, [sp]
   23884:	mov	r2, r5
   23888:	ldr	r3, [pc, #-604]	; 23634 <_start@@Base+0xe5a8>
   2388c:	mov	r1, r6
   23890:	mov	r0, r8
   23894:	bl	1834c <_start@@Base+0x32c0>
   23898:	cmp	r5, r0
   2389c:	cmpne	r0, r6
   238a0:	mov	r4, r0
   238a4:	beq	23700 <_start@@Base+0xe674>
   238a8:	ldrb	r2, [sp, #71]	; 0x47
   238ac:	b	236d0 <_start@@Base+0xe644>
   238b0:	mov	r9, r0
   238b4:	add	r3, sp, #71	; 0x47
   238b8:	str	r3, [sp]
   238bc:	mov	r2, r5
   238c0:	ldr	r3, [pc, #-656]	; 23638 <_start@@Base+0xe5ac>
   238c4:	mov	r1, r9
   238c8:	mov	r0, r8
   238cc:	bl	18500 <_start@@Base+0x3474>
   238d0:	cmp	r5, r0
   238d4:	cmpne	r0, r9
   238d8:	mov	r4, r0
   238dc:	bne	23768 <_start@@Base+0xe6dc>
   238e0:	b	23700 <_start@@Base+0xe674>
   238e4:	bl	2f628 <flatcc_json_parser_generic_json@@Base>
   238e8:	b	23114 <_start@@Base+0xe088>
   238ec:	mov	r6, r0
   238f0:	add	r3, sp, #71	; 0x47
   238f4:	str	r3, [sp]
   238f8:	mov	r2, r5
   238fc:	ldr	r3, [pc, #-712]	; 2363c <_start@@Base+0xe5b0>
   23900:	mov	r1, r6
   23904:	mov	r0, r8
   23908:	bl	1834c <_start@@Base+0x32c0>
   2390c:	cmp	r5, r0
   23910:	cmpne	r0, r6
   23914:	mov	r4, r0
   23918:	beq	23700 <_start@@Base+0xe674>
   2391c:	ldrb	r2, [sp, #71]	; 0x47
   23920:	b	235d4 <_start@@Base+0xe548>
   23924:	mov	r1, r0
   23928:	mov	r3, #8
   2392c:	mov	r2, r5
   23930:	mov	r0, r8
   23934:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   23938:	mov	r4, r0
   2393c:	cmp	r6, r4
   23940:	beq	2387c <_start@@Base+0xe7f0>
   23944:	ldrb	r2, [sp, #71]	; 0x47
   23948:	b	236d0 <_start@@Base+0xe644>
   2394c:	mov	fp, r0
   23950:	add	r3, sp, #71	; 0x47
   23954:	str	r3, [sp]
   23958:	mov	r2, r5
   2395c:	ldr	r3, [pc, #-804]	; 23640 <_start@@Base+0xe5b4>
   23960:	mov	r1, fp
   23964:	mov	r0, r8
   23968:	bl	18500 <_start@@Base+0x3474>
   2396c:	cmp	r5, r0
   23970:	cmpne	r0, fp
   23974:	mov	r4, r0
   23978:	bne	23870 <_start@@Base+0xe7e4>
   2397c:	b	23700 <_start@@Base+0xe674>
   23980:	ldr	r3, [r8, #20]
   23984:	cmp	r3, #0
   23988:	bne	23700 <_start@@Base+0xe674>
   2398c:	ldr	r0, [r8]
   23990:	bl	289e8 <flatcc_builder_end_table@@Base>
   23994:	ldr	r3, [sp, #128]	; 0x80
   23998:	cmp	r0, #0
   2399c:	str	r0, [r3]
   239a0:	movne	r0, r4
   239a4:	beq	23700 <_start@@Base+0xe674>
   239a8:	b	230e4 <_start@@Base+0xe058>
   239ac:	mov	r1, r0
   239b0:	mov	r3, #8
   239b4:	mov	r2, r5
   239b8:	mov	r0, r8
   239bc:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   239c0:	mov	r4, r0
   239c4:	cmp	r6, r4
   239c8:	bne	2391c <_start@@Base+0xe890>
   239cc:	b	238f0 <_start@@Base+0xe864>
   239d0:	mov	r1, r0
   239d4:	mov	r3, #7
   239d8:	mov	r2, r5
   239dc:	mov	r0, r8
   239e0:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   239e4:	mov	r4, r0
   239e8:	b	2393c <_start@@Base+0xe8b0>
   239ec:	mov	r1, r0
   239f0:	mov	r3, #8
   239f4:	mov	r2, r5
   239f8:	mov	r0, r8
   239fc:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   23a00:	mov	r4, r0
   23a04:	b	23760 <_start@@Base+0xe6d4>
   23a08:	mov	r1, r0
   23a0c:	mov	r3, #7
   23a10:	mov	r2, r5
   23a14:	mov	r0, r8
   23a18:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   23a1c:	mov	r4, r0
   23a20:	b	239c4 <_start@@Base+0xe938>
   23a24:	mov	r1, r0
   23a28:	mov	r3, #8
   23a2c:	mov	r2, r5
   23a30:	mov	r0, r8
   23a34:	bl	2e8b4 <flatcc_json_parser_set_error@@Base>
   23a38:	mov	r4, r0
   23a3c:	b	23868 <_start@@Base+0xe7dc>
   23a40:	push	{r4, r5, r6, r7, r8, r9, lr}
   23a44:	mov	r6, r1
   23a48:	sub	r1, r2, r1
   23a4c:	cmp	r1, #8
   23a50:	sub	sp, sp, #12
   23a54:	mov	ip, r0
   23a58:	mov	r7, r3
   23a5c:	bls	23b3c <_start@@Base+0xeab0>
   23a60:	ldrb	r8, [r6, #7]
   23a64:	mov	r9, #0
   23a68:	ldrb	r0, [r6, #6]
   23a6c:	lsr	r5, r0, #24
   23a70:	lsl	r4, r0, #8
   23a74:	orr	r8, r8, r4
   23a78:	orr	r9, r9, r5
   23a7c:	ldrb	r0, [r6, #5]
   23a80:	lsr	r5, r0, #16
   23a84:	lsl	r4, r0, #16
   23a88:	orr	r4, r4, r8
   23a8c:	orr	r5, r5, r9
   23a90:	ldrb	r0, [r6, #4]
   23a94:	lsr	r9, r0, #8
   23a98:	lsl	r8, r0, #24
   23a9c:	orr	r8, r8, r4
   23aa0:	orr	r9, r9, r5
   23aa4:	ldrb	r1, [r6, #3]
   23aa8:	mov	r0, #0
   23aac:	orr	r8, r8, r0
   23ab0:	orr	r9, r9, r1
   23ab4:	ldrb	r4, [r6, #2]
   23ab8:	mov	r0, #0
   23abc:	orr	r8, r8, r0
   23ac0:	lsl	r1, r4, #8
   23ac4:	orr	r9, r9, r1
   23ac8:	ldrb	r4, [r6, #1]
   23acc:	mov	r0, #0
   23ad0:	orr	r0, r0, r8
   23ad4:	lsl	r1, r4, #16
   23ad8:	orr	r1, r1, r9
   23adc:	ldrb	r8, [r6]
   23ae0:	mov	r4, #0
   23ae4:	orr	r0, r0, r4
   23ae8:	lsl	r5, r8, #24
   23aec:	add	r9, pc, #524	; 0x20c
   23af0:	ldrd	r8, [r9]
   23af4:	orr	r1, r1, r5
   23af8:	cmp	r1, r9
   23afc:	cmpeq	r0, r8
   23b00:	bls	23b6c <_start@@Base+0xeae0>
   23b04:	add	r9, pc, #508	; 0x1fc
   23b08:	ldrd	r8, [r9]
   23b0c:	cmp	r1, r9
   23b10:	cmpeq	r0, r8
   23b14:	bhi	23bc8 <_start@@Base+0xeb3c>
   23b18:	add	r9, pc, #496	; 0x1f0
   23b1c:	ldrd	r8, [r9]
   23b20:	mov	r0, #0
   23b24:	cmp	r1, r9
   23b28:	cmpeq	r0, r8
   23b2c:	beq	23c98 <_start@@Base+0xec0c>
   23b30:	mov	r0, r6
   23b34:	add	sp, sp, #12
   23b38:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23b3c:	sub	r1, r1, #1
   23b40:	cmp	r1, #7
   23b44:	ldrls	pc, [pc, r1, lsl #2]
   23b48:	b	23b30 <_start@@Base+0xeaa4>
   23b4c:	andeq	r3, r2, r4, asr #24
   23b50:	andeq	r3, r2, r0, asr ip
   23b54:	andeq	r3, r2, ip, asr ip
   23b58:	andeq	r3, r2, r8, ror #24
   23b5c:	andeq	r3, r2, r4, ror ip
   23b60:	andeq	r3, r2, r0, lsl #25
   23b64:	andeq	r3, r2, ip, lsl #25
   23b68:	andeq	r3, r2, r0, ror #20
   23b6c:	add	r9, pc, #420	; 0x1a4
   23b70:	ldrd	r8, [r9]
   23b74:	mov	r0, #0
   23b78:	cmp	r1, r9
   23b7c:	cmpeq	r0, r8
   23b80:	bne	23b30 <_start@@Base+0xeaa4>
   23b84:	ldr	r3, [sp, #44]	; 0x2c
   23b88:	mov	r0, ip
   23b8c:	str	r3, [sp]
   23b90:	mov	r1, r6
   23b94:	mov	r3, #4
   23b98:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   23b9c:	cmp	r6, r0
   23ba0:	movne	r2, #2
   23ba4:	beq	23b30 <_start@@Base+0xeaa4>
   23ba8:	ldr	r1, [sp, #40]	; 0x28
   23bac:	mov	r3, #0
   23bb0:	mov	r6, r0
   23bb4:	strd	r2, [r1]
   23bb8:	mov	r0, r6
   23bbc:	str	r4, [r7]
   23bc0:	add	sp, sp, #12
   23bc4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23bc8:	add	r5, pc, #336	; 0x150
   23bcc:	ldrd	r4, [r5]
   23bd0:	bic	r8, r0, #255	; 0xff
   23bd4:	cmp	r1, r5
   23bd8:	cmpeq	r8, r4
   23bdc:	beq	23cc0 <_start@@Base+0xec34>
   23be0:	add	r9, pc, #320	; 0x140
   23be4:	ldrd	r8, [r9]
   23be8:	ldr	r4, [pc, #320]	; 23d30 <_start@@Base+0xeca4>
   23bec:	mvn	r5, #0
   23bf0:	and	r1, r1, r5
   23bf4:	and	r0, r0, r4
   23bf8:	cmp	r1, r9
   23bfc:	cmpeq	r0, r8
   23c00:	bne	23b30 <_start@@Base+0xeaa4>
   23c04:	ldr	r3, [sp, #44]	; 0x2c
   23c08:	mov	r0, ip
   23c0c:	str	r3, [sp]
   23c10:	mov	r1, r6
   23c14:	mov	r3, #6
   23c18:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   23c1c:	cmp	r6, r0
   23c20:	beq	23b30 <_start@@Base+0xeaa4>
   23c24:	ldr	r2, [sp, #40]	; 0x28
   23c28:	mov	r6, r0
   23c2c:	mvn	r1, #0
   23c30:	mvn	r0, #1
   23c34:	mov	r3, #1
   23c38:	strd	r0, [r2]
   23c3c:	str	r3, [r7]
   23c40:	b	23b30 <_start@@Base+0xeaa4>
   23c44:	mov	r0, #0
   23c48:	mov	r1, #0
   23c4c:	b	23adc <_start@@Base+0xea50>
   23c50:	mov	r8, #0
   23c54:	mov	r9, #0
   23c58:	b	23ac8 <_start@@Base+0xea3c>
   23c5c:	mov	r8, #0
   23c60:	mov	r9, #0
   23c64:	b	23ab4 <_start@@Base+0xea28>
   23c68:	mov	r8, #0
   23c6c:	mov	r9, #0
   23c70:	b	23aa4 <_start@@Base+0xea18>
   23c74:	mov	r4, #0
   23c78:	mov	r5, #0
   23c7c:	b	23a90 <_start@@Base+0xea04>
   23c80:	mov	r8, #0
   23c84:	mov	r9, #0
   23c88:	b	23a7c <_start@@Base+0xe9f0>
   23c8c:	mov	r8, #0
   23c90:	mov	r9, #0
   23c94:	b	23a68 <_start@@Base+0xe9dc>
   23c98:	ldr	r3, [sp, #44]	; 0x2c
   23c9c:	mov	r0, ip
   23ca0:	str	r3, [sp]
   23ca4:	mov	r1, r6
   23ca8:	mov	r3, #4
   23cac:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   23cb0:	cmp	r6, r0
   23cb4:	beq	23b30 <_start@@Base+0xeaa4>
   23cb8:	mov	r2, #42	; 0x2a
   23cbc:	b	23ba8 <_start@@Base+0xeb1c>
   23cc0:	ldr	r3, [sp, #44]	; 0x2c
   23cc4:	mov	r0, ip
   23cc8:	str	r3, [sp]
   23ccc:	mov	r1, r6
   23cd0:	mov	r3, #7
   23cd4:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   23cd8:	cmp	r6, r0
   23cdc:	beq	23b30 <_start@@Base+0xeaa4>
   23ce0:	ldr	r2, [sp, #40]	; 0x28
   23ce4:	mvn	r4, #0
   23ce8:	mvn	r5, #0
   23cec:	mov	r3, #1
   23cf0:	strd	r4, [r2]
   23cf4:	mov	r6, r0
   23cf8:	str	r3, [r7]
   23cfc:	b	23b30 <_start@@Base+0xeaa4>
   23d00:			; <UNDEFINED> instruction: 0xffffffff
   23d04:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   23d08:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   23d0c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   23d10:	andeq	r0, r0, r0
   23d14:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   23d18:	andeq	r0, r0, r0
   23d1c:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   23d20:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   23d24:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   23d28:	strbvs	r0, [r7, #-0]!
   23d2c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   23d30:			; <UNDEFINED> instruction: 0xffff0000
   23d34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d38:	mov	r4, r1
   23d3c:	sub	sp, sp, #28
   23d40:	mov	r1, r2
   23d44:	mov	r8, r0
   23d48:	mov	r0, r4
   23d4c:	mov	r5, r2
   23d50:	mov	sl, r3
   23d54:	bl	151b8 <_start@@Base+0x12c>
   23d58:	add	r3, pc, #952	; 0x3b8
   23d5c:	ldrd	r2, [r3]
   23d60:	ldr	r7, [sp, #64]	; 0x40
   23d64:	ldr	fp, [sp, #68]	; 0x44
   23d68:	cmp	r1, r3
   23d6c:	cmpeq	r0, r2
   23d70:	bhi	23d94 <_start@@Base+0xed08>
   23d74:	add	r3, pc, #932	; 0x3a4
   23d78:	ldrd	r2, [r3]
   23d7c:	cmp	r1, r3
   23d80:	cmpeq	r0, r2
   23d84:	beq	23ea8 <_start@@Base+0xee1c>
   23d88:	mov	r0, r4
   23d8c:	add	sp, sp, #28
   23d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d94:	add	r3, pc, #908	; 0x38c
   23d98:	ldrd	r2, [r3]
   23d9c:	cmp	r1, r3
   23da0:	cmpeq	r0, r2
   23da4:	beq	23f28 <_start@@Base+0xee9c>
   23da8:	add	r3, pc, #896	; 0x380
   23dac:	ldrd	r2, [r3]
   23db0:	cmp	r1, r3
   23db4:	cmpeq	r0, r2
   23db8:	bne	23d88 <_start@@Base+0xecfc>
   23dbc:	mov	r1, r5
   23dc0:	add	r0, r4, #8
   23dc4:	bl	151b8 <_start@@Base+0x12c>
   23dc8:	add	r3, pc, #872	; 0x368
   23dcc:	ldrd	r2, [r3]
   23dd0:	cmp	r1, r3
   23dd4:	cmpeq	r0, r2
   23dd8:	bne	23d88 <_start@@Base+0xecfc>
   23ddc:	mov	r1, r5
   23de0:	add	r0, r4, #16
   23de4:	bl	151b8 <_start@@Base+0x12c>
   23de8:	add	r3, pc, #848	; 0x350
   23dec:	ldrd	r2, [r3]
   23df0:	cmp	r1, r3
   23df4:	cmpeq	r0, r2
   23df8:	bne	23d88 <_start@@Base+0xecfc>
   23dfc:	mov	r1, r5
   23e00:	add	r0, r4, #24
   23e04:	bl	151b8 <_start@@Base+0x12c>
   23e08:	add	r3, pc, #824	; 0x338
   23e0c:	ldrd	r2, [r3]
   23e10:	cmp	r1, r3
   23e14:	cmpeq	r0, r2
   23e18:	bne	23d88 <_start@@Base+0xecfc>
   23e1c:	add	r6, r4, #32
   23e20:	mov	r0, r6
   23e24:	mov	r1, r5
   23e28:	bl	151b8 <_start@@Base+0x12c>
   23e2c:	mov	r0, #0
   23e30:	and	r1, r1, #-16777216	; 0xff000000
   23e34:	cmp	r1, #1694498816	; 0x65000000
   23e38:	cmpeq	r0, #0
   23e3c:	bne	23d88 <_start@@Base+0xecfc>
   23e40:	sub	r6, r5, r6
   23e44:	cmp	r6, #1
   23e48:	ble	23d88 <_start@@Base+0xecfc>
   23e4c:	ldrb	r3, [r4, #33]	; 0x21
   23e50:	cmp	r3, #46	; 0x2e
   23e54:	bne	23d88 <_start@@Base+0xecfc>
   23e58:	add	r9, r4, #34	; 0x22
   23e5c:	mov	r0, r9
   23e60:	mov	r1, r5
   23e64:	bl	151b8 <_start@@Base+0x12c>
   23e68:	mov	r2, #0
   23e6c:	bic	r3, r1, #255	; 0xff
   23e70:	strd	r0, [sp, #8]
   23e74:	add	r1, pc, #724	; 0x2d4
   23e78:	ldrd	r0, [r1]
   23e7c:	cmp	r3, r1
   23e80:	cmpeq	r2, r0
   23e84:	beq	244b4 <_start@@Base+0xf428>
   23e88:	add	r3, pc, #712	; 0x2c8
   23e8c:	ldrd	r2, [r3]
   23e90:	ldrd	r0, [sp, #8]
   23e94:	cmp	r1, r3
   23e98:	cmpeq	r0, r2
   23e9c:	beq	24444 <_start@@Base+0xf3b8>
   23ea0:	mov	r4, r9
   23ea4:	b	23d88 <_start@@Base+0xecfc>
   23ea8:	mov	r1, r5
   23eac:	add	r0, r4, #8
   23eb0:	bl	151b8 <_start@@Base+0x12c>
   23eb4:	add	r3, pc, #676	; 0x2a4
   23eb8:	ldrd	r2, [r3]
   23ebc:	cmp	r1, r3
   23ec0:	cmpeq	r0, r2
   23ec4:	bne	23d88 <_start@@Base+0xecfc>
   23ec8:	add	r6, r4, #16
   23ecc:	mov	r0, r6
   23ed0:	mov	r1, r5
   23ed4:	bl	151b8 <_start@@Base+0x12c>
   23ed8:	mov	r0, #0
   23edc:	and	r1, r1, #-16777216	; 0xff000000
   23ee0:	cmp	r1, #1912602624	; 0x72000000
   23ee4:	cmpeq	r0, #0
   23ee8:	bne	23d88 <_start@@Base+0xecfc>
   23eec:	sub	r6, r5, r6
   23ef0:	cmp	r6, #1
   23ef4:	ble	23d88 <_start@@Base+0xecfc>
   23ef8:	ldrb	r3, [r4, #17]
   23efc:	cmp	r3, #46	; 0x2e
   23f00:	bne	23d88 <_start@@Base+0xecfc>
   23f04:	str	fp, [sp, #68]	; 0x44
   23f08:	str	r7, [sp, #64]	; 0x40
   23f0c:	mov	r3, sl
   23f10:	mov	r2, r5
   23f14:	add	r1, r4, #18
   23f18:	mov	r0, r8
   23f1c:	add	sp, sp, #28
   23f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f24:	b	16274 <_start@@Base+0x11e8>
   23f28:	mov	r1, r5
   23f2c:	add	r0, r4, #8
   23f30:	bl	151b8 <_start@@Base+0x12c>
   23f34:	add	r3, pc, #556	; 0x22c
   23f38:	ldrd	r2, [r3]
   23f3c:	cmp	r1, r3
   23f40:	cmpeq	r0, r2
   23f44:	bhi	23ff4 <_start@@Base+0xef68>
   23f48:	add	r3, pc, #544	; 0x220
   23f4c:	ldrd	r2, [r3]
   23f50:	cmp	r1, r3
   23f54:	cmpeq	r0, r2
   23f58:	bls	24094 <_start@@Base+0xf008>
   23f5c:	add	r3, pc, #532	; 0x214
   23f60:	ldrd	r2, [r3]
   23f64:	cmp	r1, r3
   23f68:	cmpeq	r0, r2
   23f6c:	beq	243a4 <_start@@Base+0xf318>
   23f70:	add	r3, pc, #520	; 0x208
   23f74:	ldrd	r2, [r3]
   23f78:	cmp	r1, r3
   23f7c:	cmpeq	r0, r2
   23f80:	bne	23d88 <_start@@Base+0xecfc>
   23f84:	add	r6, r4, #16
   23f88:	mov	r0, r6
   23f8c:	mov	r1, r5
   23f90:	bl	151b8 <_start@@Base+0x12c>
   23f94:	ldr	r3, [pc, #532]	; 241b0 <_start@@Base+0xf124>
   23f98:	mov	r2, #0
   23f9c:	and	r3, r3, r1
   23fa0:	ldr	r1, [pc, #524]	; 241b4 <_start@@Base+0xf128>
   23fa4:	and	r2, r2, r0
   23fa8:	cmp	r3, r1
   23fac:	mov	r0, #0
   23fb0:	cmpeq	r2, r0
   23fb4:	bne	23d88 <_start@@Base+0xecfc>
   23fb8:	sub	r6, r5, r6
   23fbc:	cmp	r6, #2
   23fc0:	ble	23d88 <_start@@Base+0xecfc>
   23fc4:	ldrb	r3, [r4, #18]
   23fc8:	cmp	r3, #46	; 0x2e
   23fcc:	bne	23d88 <_start@@Base+0xecfc>
   23fd0:	str	fp, [sp, #68]	; 0x44
   23fd4:	str	r7, [sp, #64]	; 0x40
   23fd8:	mov	r3, sl
   23fdc:	mov	r2, r5
   23fe0:	add	r1, r4, #19
   23fe4:	mov	r0, r8
   23fe8:	add	sp, sp, #28
   23fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ff0:	b	1f6ac <_start@@Base+0xa620>
   23ff4:	add	r3, pc, #396	; 0x18c
   23ff8:	ldrd	r2, [r3]
   23ffc:	cmp	r1, r3
   24000:	cmpeq	r0, r2
   24004:	beq	241bc <_start@@Base+0xf130>
   24008:	add	r3, pc, #384	; 0x180
   2400c:	ldrd	r2, [r3]
   24010:	cmp	r1, r3
   24014:	cmpeq	r0, r2
   24018:	bhi	24220 <_start@@Base+0xf194>
   2401c:	add	r3, pc, #372	; 0x174
   24020:	ldrd	r2, [r3]
   24024:	cmp	r1, r3
   24028:	cmpeq	r0, r2
   2402c:	bne	23d88 <_start@@Base+0xecfc>
   24030:	add	r6, r4, #16
   24034:	mov	r0, r6
   24038:	mov	r1, r5
   2403c:	bl	151b8 <_start@@Base+0x12c>
   24040:	add	r3, pc, #344	; 0x158
   24044:	ldrd	r2, [r3]
   24048:	bic	r0, r0, #255	; 0xff
   2404c:	cmp	r1, r3
   24050:	cmpeq	r0, r2
   24054:	bne	23d88 <_start@@Base+0xecfc>
   24058:	sub	r6, r5, r6
   2405c:	cmp	r6, #7
   24060:	ble	23d88 <_start@@Base+0xecfc>
   24064:	ldrb	r3, [r4, #23]
   24068:	cmp	r3, #46	; 0x2e
   2406c:	bne	23d88 <_start@@Base+0xecfc>
   24070:	str	fp, [sp, #68]	; 0x44
   24074:	str	r7, [sp, #64]	; 0x40
   24078:	mov	r3, sl
   2407c:	mov	r2, r5
   24080:	add	r1, r4, #24
   24084:	mov	r0, r8
   24088:	add	sp, sp, #28
   2408c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24090:	b	23a40 <_start@@Base+0xe9b4>
   24094:	add	r3, pc, #268	; 0x10c
   24098:	ldrd	r2, [r3]
   2409c:	cmp	r1, r3
   240a0:	cmpeq	r0, r2
   240a4:	bne	23d88 <_start@@Base+0xecfc>
   240a8:	add	r6, r4, #16
   240ac:	mov	r0, r6
   240b0:	mov	r1, r5
   240b4:	bl	151b8 <_start@@Base+0x12c>
   240b8:	ldr	r3, [pc, #240]	; 241b0 <_start@@Base+0xf124>
   240bc:	mov	r2, #0
   240c0:	and	r3, r3, r1
   240c4:	ldr	r1, [pc, #236]	; 241b8 <_start@@Base+0xf12c>
   240c8:	and	r2, r2, r0
   240cc:	cmp	r3, r1
   240d0:	mov	r0, #0
   240d4:	cmpeq	r2, r0
   240d8:	bne	23d88 <_start@@Base+0xecfc>
   240dc:	sub	r6, r5, r6
   240e0:	cmp	r6, #2
   240e4:	ble	23d88 <_start@@Base+0xecfc>
   240e8:	ldrb	r3, [r4, #18]
   240ec:	cmp	r3, #46	; 0x2e
   240f0:	bne	23d88 <_start@@Base+0xecfc>
   240f4:	str	fp, [sp, #68]	; 0x44
   240f8:	str	r7, [sp, #64]	; 0x40
   240fc:	mov	r3, sl
   24100:	mov	r2, r5
   24104:	add	r1, r4, #19
   24108:	mov	r0, r8
   2410c:	add	sp, sp, #28
   24110:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24114:	b	1656c <_start@@Base+0x14e0>
   24118:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   2411c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   24120:	cmnvs	r3, lr, lsr #18
   24124:			; <UNDEFINED> instruction: 0x46616e74
   24128:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   2412c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   24130:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   24134:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   24138:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   2413c:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   24140:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   24144:	cmnpl	r0, #-1073741800	; 0xc0000018
   24148:	cmnvs	ip, #100, 10	; 0x19000000
   2414c:	svcvs	0x006d496e
   24150:	andeq	r0, r0, r0
   24154:	strbtmi	r6, [pc], -r0, lsl #30
   24158:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   2415c:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   24160:	cmnvs	r3, r5, ror #8
   24164:	cmnmi	r8, #-2147483620	; 0x8000001c
   24168:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   2416c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24170:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   24174:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24178:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   2417c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24180:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   24184:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24188:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   2418c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24190:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   24194:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24198:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   2419c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   241a0:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   241a4:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   241a8:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   241ac:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   241b0:			; <UNDEFINED> instruction: 0xffff0000
   241b4:	svcvs	0x006f0000
   241b8:	cdpvs	0, 7, cr0, cr9, cr0, {0}
   241bc:	add	r6, r4, #16
   241c0:	mov	r0, r6
   241c4:	mov	r1, r5
   241c8:	bl	151b8 <_start@@Base+0x12c>
   241cc:	add	r3, pc, #940	; 0x3ac
   241d0:	ldrd	r2, [r3]
   241d4:	bic	r0, r0, #255	; 0xff
   241d8:	cmp	r1, r3
   241dc:	cmpeq	r0, r2
   241e0:	bne	23d88 <_start@@Base+0xecfc>
   241e4:	sub	r6, r5, r6
   241e8:	cmp	r6, #7
   241ec:	ble	23d88 <_start@@Base+0xecfc>
   241f0:	ldrb	r3, [r4, #23]
   241f4:	cmp	r3, #46	; 0x2e
   241f8:	bne	23d88 <_start@@Base+0xecfc>
   241fc:	str	fp, [sp, #68]	; 0x44
   24200:	str	r7, [sp, #64]	; 0x40
   24204:	mov	r3, sl
   24208:	mov	r2, r5
   2420c:	add	r1, r4, #24
   24210:	mov	r0, r8
   24214:	add	sp, sp, #28
   24218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2421c:	b	1fb50 <_start@@Base+0xaac4>
   24220:	add	r3, pc, #864	; 0x360
   24224:	ldrd	r2, [r3]
   24228:	cmp	r1, r3
   2422c:	cmpeq	r0, r2
   24230:	bne	23d88 <_start@@Base+0xecfc>
   24234:	add	r9, r4, #16
   24238:	mov	r0, r9
   2423c:	mov	r1, r5
   24240:	bl	151b8 <_start@@Base+0x12c>
   24244:	mov	r3, r1
   24248:	bic	r2, r0, #255	; 0xff
   2424c:	strd	r0, [sp, #8]
   24250:	add	r1, pc, #824	; 0x338
   24254:	ldrd	r0, [r1]
   24258:	cmp	r3, r1
   2425c:	cmpeq	r2, r0
   24260:	beq	24408 <_start@@Base+0xf37c>
   24264:	add	r3, pc, #812	; 0x32c
   24268:	ldrd	r2, [r3]
   2426c:	ldrd	r0, [sp, #8]
   24270:	cmp	r1, r3
   24274:	cmpeq	r0, r2
   24278:	bne	23d88 <_start@@Base+0xecfc>
   2427c:	add	r6, r4, #24
   24280:	mov	r0, r6
   24284:	mov	r1, r5
   24288:	bl	151b8 <_start@@Base+0x12c>
   2428c:	add	r3, pc, #780	; 0x30c
   24290:	ldrd	r2, [r3]
   24294:	mov	r0, #0
   24298:	bic	r1, r1, #255	; 0xff
   2429c:	cmp	r1, r3
   242a0:	cmpeq	r0, r2
   242a4:	bne	23d88 <_start@@Base+0xecfc>
   242a8:	sub	r6, r5, r6
   242ac:	cmp	r6, #3
   242b0:	ble	23d88 <_start@@Base+0xecfc>
   242b4:	ldrb	r3, [r4, #27]
   242b8:	cmp	r3, #46	; 0x2e
   242bc:	bne	23d88 <_start@@Base+0xecfc>
   242c0:	add	r6, r4, #28
   242c4:	sub	r3, r5, r6
   242c8:	cmp	r3, #8
   242cc:	bls	244f0 <_start@@Base+0xf464>
   242d0:	ldrb	r2, [r4, #35]	; 0x23
   242d4:	mov	r3, #0
   242d8:	strd	r2, [sp, #8]
   242dc:	ldrb	r0, [r4, #34]	; 0x22
   242e0:	lsr	r3, r0, #24
   242e4:	lsl	r2, r0, #8
   242e8:	ldrd	r0, [sp, #8]
   242ec:	orr	r0, r0, r2
   242f0:	orr	r1, r1, r3
   242f4:	strd	r0, [sp, #8]
   242f8:	ldrb	r0, [r4, #33]	; 0x21
   242fc:	lsr	r3, r0, #16
   24300:	lsl	r2, r0, #16
   24304:	ldrd	r0, [sp, #8]
   24308:	orr	r0, r0, r2
   2430c:	orr	r1, r1, r3
   24310:	strd	r0, [sp, #8]
   24314:	ldrb	r0, [r4, #32]
   24318:	lsr	r3, r0, #8
   2431c:	ldrd	r0, [sp, #8]
   24320:	orr	r1, r1, r3
   24324:	mov	r3, r1
   24328:	ldrb	r1, [r4, #31]
   2432c:	orr	r1, r1, r3
   24330:	ldrb	r2, [r4, #30]
   24334:	mov	r3, #0
   24338:	strd	r2, [sp, #8]
   2433c:	ldr	ip, [sp, #8]
   24340:	lsl	r3, ip, #8
   24344:	orr	r3, r3, r1
   24348:	ldrb	r0, [r4, #29]
   2434c:	mov	r1, #0
   24350:	strd	r0, [sp, #8]
   24354:	ldr	ip, [sp, #8]
   24358:	lsl	r1, ip, #16
   2435c:	orr	r3, r3, r1
   24360:	ldrb	r0, [r4, #28]
   24364:	mov	r1, #0
   24368:	mov	r2, #0
   2436c:	strd	r0, [sp, #16]
   24370:	ldr	r1, [sp, #16]
   24374:	lsl	r1, r1, #24
   24378:	str	r1, [sp, #12]
   2437c:	mov	r1, #0
   24380:	str	r1, [sp, #8]
   24384:	ldrd	r0, [sp, #8]
   24388:	orr	r1, r1, r3
   2438c:	and	r3, r1, #-16777216	; 0xff000000
   24390:	cmp	r3, #2013265920	; 0x78000000
   24394:	cmpeq	r2, #0
   24398:	beq	24520 <_start@@Base+0xf494>
   2439c:	mov	r4, r6
   243a0:	b	23d88 <_start@@Base+0xecfc>
   243a4:	add	r6, r4, #16
   243a8:	mov	r0, r6
   243ac:	mov	r1, r5
   243b0:	bl	151b8 <_start@@Base+0x12c>
   243b4:	add	r3, pc, #492	; 0x1ec
   243b8:	ldrd	r2, [r3]
   243bc:	mov	r0, #0
   243c0:	cmp	r1, r3
   243c4:	cmpeq	r0, r2
   243c8:	bne	23d88 <_start@@Base+0xecfc>
   243cc:	sub	r6, r5, r6
   243d0:	cmp	r6, #4
   243d4:	ble	23d88 <_start@@Base+0xecfc>
   243d8:	ldrb	r3, [r4, #20]
   243dc:	cmp	r3, #46	; 0x2e
   243e0:	bne	23d88 <_start@@Base+0xecfc>
   243e4:	str	fp, [sp, #68]	; 0x44
   243e8:	str	r7, [sp, #64]	; 0x40
   243ec:	mov	r3, sl
   243f0:	mov	r2, r5
   243f4:	add	r1, r4, #21
   243f8:	mov	r0, r8
   243fc:	add	sp, sp, #28
   24400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24404:	b	1fddc <_start@@Base+0xad50>
   24408:	sub	r9, r5, r9
   2440c:	cmp	r9, #7
   24410:	ble	23d88 <_start@@Base+0xecfc>
   24414:	ldrb	r3, [r4, #23]
   24418:	cmp	r3, #46	; 0x2e
   2441c:	bne	23d88 <_start@@Base+0xecfc>
   24420:	str	fp, [sp, #68]	; 0x44
   24424:	str	r7, [sp, #64]	; 0x40
   24428:	mov	r3, sl
   2442c:	mov	r2, r5
   24430:	add	r1, r4, #24
   24434:	mov	r0, r8
   24438:	add	sp, sp, #28
   2443c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24440:	b	1f8f8 <_start@@Base+0xa86c>
   24444:	add	r6, r4, #42	; 0x2a
   24448:	mov	r0, r6
   2444c:	mov	r1, r5
   24450:	bl	151b8 <_start@@Base+0x12c>
   24454:	ldr	r3, [pc, #340]	; 245b0 <_start@@Base+0xf524>
   24458:	mov	r2, #0
   2445c:	and	r3, r3, r1
   24460:	ldr	r1, [pc, #332]	; 245b4 <_start@@Base+0xf528>
   24464:	and	r2, r2, r0
   24468:	cmp	r3, r1
   2446c:	mov	r0, #0
   24470:	cmpeq	r2, r0
   24474:	bne	23ea0 <_start@@Base+0xee14>
   24478:	str	fp, [sp]
   2447c:	mov	r2, r5
   24480:	mov	r0, r8
   24484:	mov	r3, #2
   24488:	mov	r1, r6
   2448c:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   24490:	cmp	r6, r0
   24494:	mov	r4, r0
   24498:	beq	23ea0 <_start@@Base+0xee14>
   2449c:	mov	r0, #0
   244a0:	mov	r1, #0
   244a4:	mov	r3, #0
   244a8:	strd	r0, [r7]
   244ac:	str	r3, [sl]
   244b0:	b	23d88 <_start@@Base+0xecfc>
   244b4:	str	fp, [sp]
   244b8:	mov	r2, r5
   244bc:	mov	r0, r8
   244c0:	mov	r3, #3
   244c4:	mov	r1, r9
   244c8:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   244cc:	cmp	r9, r0
   244d0:	mov	r4, r0
   244d4:	beq	23d88 <_start@@Base+0xecfc>
   244d8:	mov	r0, #17
   244dc:	mov	r1, #0
   244e0:	mov	r3, #0
   244e4:	strd	r0, [r7]
   244e8:	str	r3, [sl]
   244ec:	b	23d88 <_start@@Base+0xecfc>
   244f0:	sub	r3, r3, #1
   244f4:	cmp	r3, #7
   244f8:	ldrls	pc, [pc, r3, lsl #2]
   244fc:	b	2439c <_start@@Base+0xf310>
   24500:	andeq	r4, r2, r0, ror #11
   24504:	ldrdeq	r4, [r2], -r8
   24508:	ldrdeq	r4, [r2], -r0
   2450c:	andeq	r4, r2, r8, asr #11
   24510:			; <UNDEFINED> instruction: 0x000245b8
   24514:	andeq	r4, r2, ip, ror #10
   24518:	andeq	r4, r2, ip, asr r5
   2451c:	ldrdeq	r4, [r2], -r0
   24520:	str	fp, [sp]
   24524:	mov	r2, r5
   24528:	mov	r0, r8
   2452c:	mov	r3, #1
   24530:	mov	r1, r6
   24534:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   24538:	cmp	r6, r0
   2453c:	mov	r4, r0
   24540:	beq	23d88 <_start@@Base+0xecfc>
   24544:	mov	r3, #0
   24548:	mov	r2, #0
   2454c:	strd	r2, [r7]
   24550:	ldr	r3, [sp, #8]
   24554:	str	r3, [sl]
   24558:	b	23d88 <_start@@Base+0xecfc>
   2455c:	mov	r2, #0
   24560:	mov	r3, #0
   24564:	strd	r2, [sp, #8]
   24568:	b	242dc <_start@@Base+0xf250>
   2456c:	mov	r2, #0
   24570:	mov	r3, #0
   24574:	strd	r2, [sp, #8]
   24578:	b	242f8 <_start@@Base+0xf26c>
   2457c:	nop			; (mov r0, r0)
   24580:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   24584:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   24588:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   2458c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   24590:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   24594:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   24598:	rsbsvc	r7, r4, r5, ror #18
   2459c:	svcvs	0x0074656d
   245a0:	andeq	r0, r0, r0
   245a4:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   245a8:	andeq	r0, r0, r0
   245ac:	svcvs	0x006c6f72
   245b0:			; <UNDEFINED> instruction: 0xffff0000
   245b4:	cmnvs	ip, r0
   245b8:	mov	r2, #0
   245bc:	mov	r3, #0
   245c0:	strd	r2, [sp, #8]
   245c4:	b	24314 <_start@@Base+0xf288>
   245c8:	mov	r3, #0
   245cc:	b	24328 <_start@@Base+0xf29c>
   245d0:	mov	r1, #0
   245d4:	b	24330 <_start@@Base+0xf2a4>
   245d8:	mov	r3, #0
   245dc:	b	24348 <_start@@Base+0xf2bc>
   245e0:	mov	r3, #0
   245e4:	b	24360 <_start@@Base+0xf2d4>
   245e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   245ec:	mov	r4, r1
   245f0:	sub	sp, sp, #12
   245f4:	mov	r1, r2
   245f8:	mov	r5, r0
   245fc:	mov	r0, r4
   24600:	mov	sl, r2
   24604:	mov	fp, r3
   24608:	bl	151b8 <_start@@Base+0x12c>
   2460c:	add	r3, pc, #780	; 0x30c
   24610:	ldrd	r2, [r3]
   24614:	ldr	r8, [sp, #48]	; 0x30
   24618:	ldr	r9, [sp, #52]	; 0x34
   2461c:	cmp	r1, r3
   24620:	cmpeq	r0, r2
   24624:	bhi	24664 <_start@@Base+0xf5d8>
   24628:	add	r3, pc, #760	; 0x2f8
   2462c:	ldrd	r2, [r3]
   24630:	cmp	r1, r3
   24634:	cmpeq	r0, r2
   24638:	bhi	247b0 <_start@@Base+0xf724>
   2463c:	add	r3, pc, #748	; 0x2ec
   24640:	ldrd	r2, [r3]
   24644:	bic	r1, r1, #255	; 0xff
   24648:	mov	r0, #0
   2464c:	cmp	r1, r3
   24650:	cmpeq	r0, r2
   24654:	beq	24870 <_start@@Base+0xf7e4>
   24658:	mov	r0, r4
   2465c:	add	sp, sp, #12
   24660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24664:	add	r3, pc, #716	; 0x2cc
   24668:	ldrd	r2, [r3]
   2466c:	cmp	r1, r3
   24670:	cmpeq	r0, r2
   24674:	bhi	246c8 <_start@@Base+0xf63c>
   24678:	add	r3, pc, #704	; 0x2c0
   2467c:	ldrd	r2, [r3]
   24680:	cmp	r1, r3
   24684:	cmpeq	r0, r2
   24688:	bne	24658 <_start@@Base+0xf5cc>
   2468c:	sub	r3, sl, r4
   24690:	cmp	r3, #8
   24694:	ble	24658 <_start@@Base+0xf5cc>
   24698:	ldrb	r3, [r4, #8]
   2469c:	cmp	r3, #46	; 0x2e
   246a0:	bne	24658 <_start@@Base+0xf5cc>
   246a4:	str	r9, [sp, #52]	; 0x34
   246a8:	str	r8, [sp, #48]	; 0x30
   246ac:	mov	r3, fp
   246b0:	mov	r2, sl
   246b4:	add	r1, r4, #9
   246b8:	mov	r0, r5
   246bc:	add	sp, sp, #12
   246c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   246c4:	b	1fb50 <_start@@Base+0xaac4>
   246c8:	add	r3, pc, #632	; 0x278
   246cc:	ldrd	r2, [r3]
   246d0:	cmp	r1, r3
   246d4:	cmpeq	r0, r2
   246d8:	bls	24820 <_start@@Base+0xf794>
   246dc:	add	r3, pc, #620	; 0x26c
   246e0:	ldrd	r2, [r3]
   246e4:	cmp	r1, r3
   246e8:	cmpeq	r0, r2
   246ec:	beq	248e0 <_start@@Base+0xf854>
   246f0:	add	r3, pc, #608	; 0x260
   246f4:	ldrd	r2, [r3]
   246f8:	cmp	r1, r3
   246fc:	cmpeq	r0, r2
   24700:	bne	24658 <_start@@Base+0xf5cc>
   24704:	add	r6, r4, #8
   24708:	mov	r0, r6
   2470c:	mov	r1, sl
   24710:	bl	151b8 <_start@@Base+0x12c>
   24714:	add	r3, pc, #580	; 0x244
   24718:	ldrd	r2, [r3]
   2471c:	mov	r0, #0
   24720:	cmp	r1, r3
   24724:	cmpeq	r0, r2
   24728:	bne	24658 <_start@@Base+0xf5cc>
   2472c:	sub	r3, sl, r6
   24730:	cmp	r3, #4
   24734:	ble	24658 <_start@@Base+0xf5cc>
   24738:	ldrb	r3, [r4, #12]
   2473c:	cmp	r3, #46	; 0x2e
   24740:	bne	24658 <_start@@Base+0xf5cc>
   24744:	add	r7, r4, #13
   24748:	cmp	r6, r7
   2474c:	beq	24658 <_start@@Base+0xf5cc>
   24750:	mov	r1, sl
   24754:	mov	r0, r7
   24758:	bl	151b8 <_start@@Base+0x12c>
   2475c:	mov	r0, #0
   24760:	and	r1, r1, #-16777216	; 0xff000000
   24764:	cmp	r1, #2013265920	; 0x78000000
   24768:	cmpeq	r0, #0
   2476c:	movne	r4, r7
   24770:	bne	24658 <_start@@Base+0xf5cc>
   24774:	str	r9, [sp]
   24778:	mov	r2, sl
   2477c:	mov	r0, r5
   24780:	mov	r3, #1
   24784:	mov	r1, r7
   24788:	bl	2f1c0 <flatcc_json_parser_match_constant@@Base>
   2478c:	cmp	r7, r0
   24790:	mov	r4, r0
   24794:	beq	24658 <_start@@Base+0xf5cc>
   24798:	mov	r0, #0
   2479c:	mov	r1, #0
   247a0:	mov	r3, #0
   247a4:	strd	r0, [r8]
   247a8:	str	r3, [fp]
   247ac:	b	24658 <_start@@Base+0xf5cc>
   247b0:	add	r7, pc, #432	; 0x1b0
   247b4:	ldrd	r6, [r7]
   247b8:	bic	r3, r1, #255	; 0xff
   247bc:	mov	r2, #0
   247c0:	cmp	r3, r7
   247c4:	cmpeq	r2, r6
   247c8:	beq	248a4 <_start@@Base+0xf818>
   247cc:	add	r3, pc, #412	; 0x19c
   247d0:	ldrd	r2, [r3]
   247d4:	and	r0, r0, #-16777216	; 0xff000000
   247d8:	cmp	r1, r3
   247dc:	cmpeq	r0, r2
   247e0:	bne	24658 <_start@@Base+0xf5cc>
   247e4:	sub	r3, sl, r4
   247e8:	cmp	r3, #5
   247ec:	ble	24658 <_start@@Base+0xf5cc>
   247f0:	ldrb	r3, [r4, #5]
   247f4:	cmp	r3, #46	; 0x2e
   247f8:	bne	24658 <_start@@Base+0xf5cc>
   247fc:	str	r9, [sp, #52]	; 0x34
   24800:	str	r8, [sp, #48]	; 0x30
   24804:	mov	r3, fp
   24808:	mov	r2, sl
   2480c:	add	r1, r4, #6
   24810:	mov	r0, r5
   24814:	add	sp, sp, #12
   24818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2481c:	b	1fddc <_start@@Base+0xad50>
   24820:	add	r3, pc, #336	; 0x150
   24824:	ldrd	r2, [r3]
   24828:	cmp	r1, r3
   2482c:	cmpeq	r0, r2
   24830:	bne	24658 <_start@@Base+0xf5cc>
   24834:	sub	r3, sl, r4
   24838:	cmp	r3, #8
   2483c:	ble	24658 <_start@@Base+0xf5cc>
   24840:	ldrb	r3, [r4, #8]
   24844:	cmp	r3, #46	; 0x2e
   24848:	bne	24658 <_start@@Base+0xf5cc>
   2484c:	str	r9, [sp, #52]	; 0x34
   24850:	str	r8, [sp, #48]	; 0x30
   24854:	mov	r3, fp
   24858:	mov	r2, sl
   2485c:	add	r1, r4, #9
   24860:	mov	r0, r5
   24864:	add	sp, sp, #12
   24868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2486c:	b	23a40 <_start@@Base+0xe9b4>
   24870:	sub	r3, sl, r4
   24874:	cmp	r3, #3
   24878:	ble	24658 <_start@@Base+0xf5cc>
   2487c:	ldrb	r3, [r4, #3]
   24880:	cmp	r3, #46	; 0x2e
   24884:	bne	24658 <_start@@Base+0xf5cc>
   24888:	mov	r3, fp
   2488c:	mov	r2, sl
   24890:	add	r1, r4, #4
   24894:	mov	r0, r5
   24898:	add	sp, sp, #12
   2489c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   248a0:	b	1656c <_start@@Base+0x14e0>
   248a4:	sub	r3, sl, r4
   248a8:	cmp	r3, #3
   248ac:	ble	24658 <_start@@Base+0xf5cc>
   248b0:	ldrb	r3, [r4, #3]
   248b4:	cmp	r3, #46	; 0x2e
   248b8:	bne	24658 <_start@@Base+0xf5cc>
   248bc:	str	r9, [sp, #52]	; 0x34
   248c0:	str	r8, [sp, #48]	; 0x30
   248c4:	mov	r3, fp
   248c8:	mov	r2, sl
   248cc:	add	r1, r4, #4
   248d0:	mov	r0, r5
   248d4:	add	sp, sp, #12
   248d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   248dc:	b	1f6ac <_start@@Base+0xa620>
   248e0:	sub	r3, sl, r4
   248e4:	cmp	r3, #8
   248e8:	ble	24658 <_start@@Base+0xf5cc>
   248ec:	ldrb	r3, [r4, #8]
   248f0:	cmp	r3, #46	; 0x2e
   248f4:	bne	24658 <_start@@Base+0xf5cc>
   248f8:	str	r9, [sp, #52]	; 0x34
   248fc:	str	r8, [sp, #48]	; 0x30
   24900:	mov	r3, fp
   24904:	mov	r2, sl
   24908:	add	r1, r4, #9
   2490c:	mov	r0, r5
   24910:	add	sp, sp, #12
   24914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24918:	b	1f8f8 <_start@@Base+0xa86c>
   2491c:	nop			; (mov r0, r0)
   24920:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   24924:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   24928:	ldrshvc	pc, [pc, #255]	; 24a2f <test_json@@Base+0xaf>	; <UNPREDICTABLE>
   2492c:	cmnmi	pc, #28416	; 0x6f00
   24930:	andeq	r0, r0, r0
   24934:	cmnmi	lr, r0, lsl #18
   24938:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   2493c:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   24940:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   24944:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   24948:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   2494c:	mcrvs	7, 3, r6, cr5, cr15, {2}
   24950:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   24954:	mcrvs	7, 3, r6, cr5, cr15, {2}
   24958:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   2495c:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   24960:	andeq	r0, r0, r0
   24964:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   24968:	andeq	r0, r0, r0
   2496c:	strbtmi	r6, [pc], -r0, lsl #30
   24970:	andvc	r0, r0, #0
   24974:	cmnmi	pc, #28416	; 0x6f00
   24978:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   2497c:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^

00024980 <test_json@@Base>:
   24980:	push	{r4, r5, r6, r7, r8, r9, lr}
   24984:	sub	sp, sp, #348	; 0x15c
   24988:	mov	r5, r0
   2498c:	ldr	r4, [sp, #380]	; 0x17c
   24990:	add	r0, sp, #112	; 0x70
   24994:	mov	r8, r2
   24998:	mov	r7, r3
   2499c:	mov	r6, r1
   249a0:	ldr	r9, [sp, #376]	; 0x178
   249a4:	bl	258d8 <flatcc_builder_init@@Base>
   249a8:	mov	r1, #0
   249ac:	add	r0, sp, #64	; 0x40
   249b0:	bl	40b14 <flatcc_json_printer_init_dynamic_buffer@@Base>
   249b4:	lsr	r3, r4, #3
   249b8:	tst	r4, #16
   249bc:	and	r3, r3, #1
   249c0:	lsr	r1, r4, #1
   249c4:	and	r1, r1, #1
   249c8:	lsr	r2, r4, #2
   249cc:	strb	r3, [sp, #93]	; 0x5d
   249d0:	movne	r3, #2
   249d4:	and	r2, r2, #1
   249d8:	strb	r1, [sp, #91]	; 0x5b
   249dc:	strbne	r3, [sp, #89]	; 0x59
   249e0:	and	r1, r4, #1
   249e4:	tst	r4, #32
   249e8:	strb	r2, [sp, #92]	; 0x5c
   249ec:	strb	r1, [sp, #90]	; 0x5a
   249f0:	beq	24a0c <test_json@@Base+0x8c>
   249f4:	mov	r3, #2
   249f8:	mov	r2, #1
   249fc:	strb	r3, [sp, #89]	; 0x59
   24a00:	mov	r3, #0
   24a04:	strb	r2, [sp, #90]	; 0x5a
   24a08:	strb	r3, [sp, #91]	; 0x5b
   24a0c:	mov	r0, r6
   24a10:	bl	145a0 <strlen@plt>
   24a14:	ldr	r2, [r5, #4]
   24a18:	ldr	r3, [r5]
   24a1c:	add	r1, sp, #24
   24a20:	str	r2, [sp, #8]
   24a24:	str	r3, [sp, #4]
   24a28:	str	r9, [sp]
   24a2c:	mov	r2, r6
   24a30:	mov	r3, r0
   24a34:	add	r0, sp, #112	; 0x70
   24a38:	bl	33a28 <flatcc_json_parser_table_as_root@@Base>
   24a3c:	cmp	r0, r7
   24a40:	beq	24b48 <test_json@@Base+0x1c8>
   24a44:	cmp	r7, #0
   24a48:	ldr	r5, [pc, #544]	; 24c70 <test_json@@Base+0x2f0>
   24a4c:	beq	24bc4 <test_json@@Base+0x244>
   24a50:	cmp	r0, #0
   24a54:	bne	24afc <test_json@@Base+0x17c>
   24a58:	mov	r0, r7
   24a5c:	ldr	r4, [r5]
   24a60:	bl	2e894 <flatcc_json_parser_error_string@@Base>
   24a64:	ldr	r2, [sp, #384]	; 0x180
   24a68:	ldr	r1, [pc, #516]	; 24c74 <test_json@@Base+0x2f4>
   24a6c:	mov	r3, r0
   24a70:	mov	r0, r4
   24a74:	bl	145ac <fprintf@plt>
   24a78:	mov	r2, r6
   24a7c:	ldr	r0, [r5]
   24a80:	ldr	r1, [pc, #496]	; 24c78 <test_json@@Base+0x2f8>
   24a84:	bl	145ac <fprintf@plt>
   24a88:	ldr	r3, [sp, #40]	; 0x28
   24a8c:	cmp	r3, #1
   24a90:	movgt	r4, #0
   24a94:	movgt	r6, #32
   24a98:	ble	24abc <test_json@@Base+0x13c>
   24a9c:	ldr	r1, [r5]
   24aa0:	mov	r0, r6
   24aa4:	bl	145f4 <fputc@plt>
   24aa8:	ldr	r3, [sp, #40]	; 0x28
   24aac:	add	r4, r4, #1
   24ab0:	sub	r3, r3, #1
   24ab4:	cmp	r3, r4
   24ab8:	bgt	24a9c <test_json@@Base+0x11c>
   24abc:	ldr	r3, [r5]
   24ac0:	mov	r2, #2
   24ac4:	mov	r1, #1
   24ac8:	ldr	r0, [pc, #428]	; 24c7c <test_json@@Base+0x2fc>
   24acc:	bl	14570 <fwrite@plt>
   24ad0:	mov	r4, #0
   24ad4:	mvn	r5, #0
   24ad8:	mov	r0, r4
   24adc:	bl	2ac9c <flatcc_builder_aligned_free@@Base>
   24ae0:	add	r0, sp, #112	; 0x70
   24ae4:	bl	25b44 <flatcc_builder_clear@@Base>
   24ae8:	add	r0, sp, #64	; 0x40
   24aec:	bl	40c24 <flatcc_json_printer_clear@@Base>
   24af0:	mov	r0, r5
   24af4:	add	sp, sp, #348	; 0x15c
   24af8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   24afc:	ldr	r4, [r5]
   24b00:	bl	2e894 <flatcc_json_parser_error_string@@Base>
   24b04:	ldr	r2, [sp, #384]	; 0x180
   24b08:	ldr	r1, [pc, #368]	; 24c80 <test_json@@Base+0x300>
   24b0c:	mov	r3, r0
   24b10:	mov	r0, r4
   24b14:	bl	145ac <fprintf@plt>
   24b18:	mov	r0, r7
   24b1c:	ldr	r4, [r5]
   24b20:	bl	2e894 <flatcc_json_parser_error_string@@Base>
   24b24:	ldr	r1, [pc, #344]	; 24c84 <test_json@@Base+0x304>
   24b28:	mov	r2, r0
   24b2c:	mov	r0, r4
   24b30:	bl	145ac <fprintf@plt>
   24b34:	mov	r2, r6
   24b38:	ldr	r0, [r5]
   24b3c:	ldr	r1, [pc, #308]	; 24c78 <test_json@@Base+0x2f8>
   24b40:	bl	145ac <fprintf@plt>
   24b44:	b	24a88 <test_json@@Base+0x108>
   24b48:	cmp	r7, #0
   24b4c:	movne	r4, #0
   24b50:	movne	r5, r4
   24b54:	bne	24ad8 <test_json@@Base+0x158>
   24b58:	add	r1, sp, #16
   24b5c:	add	r0, sp, #112	; 0x70
   24b60:	bl	2ab8c <flatcc_builder_finalize_aligned_buffer@@Base>
   24b64:	ldr	r3, [r5, #12]
   24b68:	ldr	r2, [r5]
   24b6c:	ldr	r1, [sp, #16]
   24b70:	mov	r4, r0
   24b74:	bl	2bf88 <flatcc_verify_table_as_root@@Base>
   24b78:	cmp	r0, #0
   24b7c:	beq	24be0 <test_json@@Base+0x260>
   24b80:	ldr	r5, [pc, #232]	; 24c70 <test_json@@Base+0x2f0>
   24b84:	ldr	r6, [r5]
   24b88:	bl	2b268 <flatcc_verify_error_string@@Base>
   24b8c:	ldr	r3, [sp, #384]	; 0x180
   24b90:	ldr	r2, [pc, #240]	; 24c88 <test_json@@Base+0x308>
   24b94:	ldr	r1, [pc, #240]	; 24c8c <test_json@@Base+0x30c>
   24b98:	str	r0, [sp]
   24b9c:	mov	r0, r6
   24ba0:	bl	145ac <fprintf@plt>
   24ba4:	cmp	r4, #0
   24ba8:	beq	24bbc <test_json@@Base+0x23c>
   24bac:	ldr	r2, [r5]
   24bb0:	ldr	r1, [sp, #16]
   24bb4:	mov	r0, r4
   24bb8:	bl	171c4 <_start@@Base+0x2138>
   24bbc:	mvn	r5, #0
   24bc0:	b	24ad8 <test_json@@Base+0x158>
   24bc4:	ldr	r4, [r5]
   24bc8:	bl	2e894 <flatcc_json_parser_error_string@@Base>
   24bcc:	ldr	r2, [sp, #384]	; 0x180
   24bd0:	ldr	r1, [pc, #184]	; 24c90 <test_json@@Base+0x310>
   24bd4:	mov	r3, r0
   24bd8:	mov	r0, r4
   24bdc:	b	24a74 <test_json@@Base+0xf4>
   24be0:	ldr	r1, [r5, #8]
   24be4:	ldr	r3, [r5]
   24be8:	ldr	r2, [sp, #16]
   24bec:	str	r1, [sp]
   24bf0:	add	r0, sp, #64	; 0x40
   24bf4:	mov	r1, r4
   24bf8:	bl	40520 <flatcc_json_printer_table_as_root@@Base>
   24bfc:	add	r1, sp, #20
   24c00:	add	r0, sp, #64	; 0x40
   24c04:	bl	40bb0 <flatcc_json_printer_get_buffer@@Base>
   24c08:	subs	r6, r0, #0
   24c0c:	beq	24c24 <test_json@@Base+0x2a4>
   24c10:	mov	r1, r6
   24c14:	mov	r0, r8
   24c18:	bl	14528 <strcmp@plt>
   24c1c:	subs	r5, r0, #0
   24c20:	beq	24ad8 <test_json@@Base+0x158>
   24c24:	ldr	r5, [pc, #68]	; 24c70 <test_json@@Base+0x2f0>
   24c28:	ldr	r2, [sp, #384]	; 0x180
   24c2c:	ldr	r1, [pc, #96]	; 24c94 <test_json@@Base+0x314>
   24c30:	ldr	r0, [r5]
   24c34:	bl	145ac <fprintf@plt>
   24c38:	mov	r2, r6
   24c3c:	ldr	r0, [r5]
   24c40:	ldr	r1, [pc, #48]	; 24c78 <test_json@@Base+0x2f8>
   24c44:	bl	145ac <fprintf@plt>
   24c48:	ldr	r3, [r5]
   24c4c:	mov	r2, #10
   24c50:	mov	r1, #1
   24c54:	ldr	r0, [pc, #60]	; 24c98 <test_json@@Base+0x318>
   24c58:	bl	14570 <fwrite@plt>
   24c5c:	mov	r2, r8
   24c60:	ldr	r0, [r5]
   24c64:	ldr	r1, [pc, #12]	; 24c78 <test_json@@Base+0x2f8>
   24c68:	bl	145ac <fprintf@plt>
   24c6c:	b	24ba4 <test_json@@Base+0x224>
   24c70:			; <UNDEFINED> instruction: 0x000573b0
   24c74:	andeq	r1, r4, r4, lsr fp
   24c78:	andeq	r1, r4, r0, ror fp
   24c7c:	andeq	r1, r4, r4, ror fp
   24c80:	andeq	r1, r4, ip, ror #21
   24c84:	andeq	r1, r4, r4, lsl fp
   24c88:	muleq	r4, ip, fp
   24c8c:	andeq	r1, r4, r8, ror #23
   24c90:	andeq	r1, r4, r8, ror fp
   24c94:	andeq	r1, r4, r0, lsl ip
   24c98:	andeq	r1, r4, r8, asr #24

00024c9c <edge_case_tests@@Base>:
   24c9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ca0:	sub	sp, sp, #12
   24ca4:	ldr	r4, [pc, #360]	; 24e14 <edge_case_tests@@Base+0x178>
   24ca8:	mov	r5, #0
   24cac:	mov	r3, #158	; 0x9e
   24cb0:	str	r3, [sp, #4]
   24cb4:	mov	r0, r4
   24cb8:	mov	r3, r5
   24cbc:	str	r5, [sp]
   24cc0:	ldr	r2, [pc, #336]	; 24e18 <edge_case_tests@@Base+0x17c>
   24cc4:	ldr	r1, [pc, #336]	; 24e1c <edge_case_tests@@Base+0x180>
   24cc8:	bl	179c4 <_start@@Base+0x2938>
   24ccc:	ldr	r9, [pc, #332]	; 24e20 <edge_case_tests@@Base+0x184>
   24cd0:	ldr	sl, [pc, #332]	; 24e24 <edge_case_tests@@Base+0x188>
   24cd4:	mov	r3, #168	; 0xa8
   24cd8:	mov	r2, r9
   24cdc:	mov	r1, sl
   24ce0:	str	r3, [sp, #4]
   24ce4:	str	r5, [sp]
   24ce8:	mov	r3, #2
   24cec:	mov	r7, #2
   24cf0:	ldr	r8, [pc, #304]	; 24e28 <edge_case_tests@@Base+0x18c>
   24cf4:	mov	r6, #1
   24cf8:	mov	fp, r0
   24cfc:	mov	r0, r4
   24d00:	bl	179c4 <_start@@Base+0x2938>
   24d04:	mov	r2, #172	; 0xac
   24d08:	mov	r3, r5
   24d0c:	str	r2, [sp, #4]
   24d10:	str	r7, [sp]
   24d14:	ldr	r2, [pc, #272]	; 24e2c <edge_case_tests@@Base+0x190>
   24d18:	ldr	r1, [pc, #272]	; 24e30 <edge_case_tests@@Base+0x194>
   24d1c:	orr	fp, fp, r0
   24d20:	mov	r0, r4
   24d24:	bl	179c4 <_start@@Base+0x2938>
   24d28:	mov	r2, #176	; 0xb0
   24d2c:	str	r2, [sp, #4]
   24d30:	mov	r2, #4
   24d34:	mov	r1, sl
   24d38:	mov	r3, r7
   24d3c:	str	r2, [sp]
   24d40:	ldr	r2, [pc, #236]	; 24e34 <edge_case_tests@@Base+0x198>
   24d44:	orr	fp, fp, r0
   24d48:	mov	r0, r4
   24d4c:	bl	179c4 <_start@@Base+0x2938>
   24d50:	mov	r1, #180	; 0xb4
   24d54:	mov	r2, #8
   24d58:	mov	r3, r5
   24d5c:	str	r1, [sp, #4]
   24d60:	str	r2, [sp]
   24d64:	ldr	r1, [pc, #204]	; 24e38 <edge_case_tests@@Base+0x19c>
   24d68:	ldr	r2, [pc, #204]	; 24e3c <edge_case_tests@@Base+0x1a0>
   24d6c:	orr	fp, fp, r0
   24d70:	mov	r0, r4
   24d74:	bl	179c4 <_start@@Base+0x2938>
   24d78:	mov	r1, #195	; 0xc3
   24d7c:	mov	r3, r7
   24d80:	mov	r2, r9
   24d84:	str	r1, [sp, #4]
   24d88:	str	r5, [sp]
   24d8c:	ldr	r1, [pc, #172]	; 24e40 <edge_case_tests@@Base+0x1a4>
   24d90:	orr	r7, fp, r0
   24d94:	mov	r0, r4
   24d98:	bl	179c4 <_start@@Base+0x2938>
   24d9c:	mov	r3, #199	; 0xc7
   24da0:	mov	r1, r8
   24da4:	str	r3, [sp, #4]
   24da8:	str	r5, [sp]
   24dac:	mov	r3, r6
   24db0:	ldr	r2, [pc, #140]	; 24e44 <edge_case_tests@@Base+0x1a8>
   24db4:	orr	r7, r7, r0
   24db8:	mov	r0, r4
   24dbc:	bl	179c4 <_start@@Base+0x2938>
   24dc0:	mov	r3, #203	; 0xcb
   24dc4:	mov	r1, r8
   24dc8:	str	r3, [sp, #4]
   24dcc:	str	r6, [sp]
   24dd0:	mov	r3, r6
   24dd4:	ldr	r2, [pc, #108]	; 24e48 <edge_case_tests@@Base+0x1ac>
   24dd8:	orr	r7, r7, r0
   24ddc:	mov	r0, r4
   24de0:	bl	179c4 <_start@@Base+0x2938>
   24de4:	mov	r1, #209	; 0xd1
   24de8:	str	r1, [sp, #4]
   24dec:	str	r5, [sp]
   24df0:	mov	r3, r6
   24df4:	ldr	r2, [pc, #72]	; 24e44 <edge_case_tests@@Base+0x1a8>
   24df8:	ldr	r1, [pc, #76]	; 24e4c <edge_case_tests@@Base+0x1b0>
   24dfc:	orr	r7, r7, r0
   24e00:	mov	r0, r4
   24e04:	bl	179c4 <_start@@Base+0x2938>
   24e08:	orr	r0, r7, r0
   24e0c:	add	sp, sp, #12
   24e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e14:	andeq	r1, r4, r4, asr r6
   24e18:	andeq	r1, r4, ip, ror #24
   24e1c:	andeq	r1, r4, ip, lsl #25
   24e20:	andeq	r1, r4, r4, asr #25
   24e24:	andeq	r1, r4, r8, ror #25
   24e28:	andeq	r1, r4, r4, ror #29
   24e2c:	andeq	r1, r4, ip, lsl #26
   24e30:	andeq	r1, r4, ip, lsr #26
   24e34:	andeq	r1, r4, r4, asr sp
   24e38:	andeq	r1, r4, ip, ror lr
   24e3c:	andeq	r1, r4, r8, ror #26
   24e40:	andeq	r1, r4, r0, lsr #29
   24e44:	andeq	r1, r4, r8, asr #29
   24e48:	andeq	r1, r4, r8, lsl pc
   24e4c:	andeq	r1, r4, r0, lsr pc

00024e50 <error_case_tests@@Base>:
   24e50:	push	{r4, lr}
   24e54:	mov	r1, #0
   24e58:	ldr	r2, [pc, #232]	; 24f48 <error_case_tests@@Base+0xf8>
   24e5c:	ldr	r0, [pc, #232]	; 24f4c <error_case_tests@@Base+0xfc>
   24e60:	bl	1767c <_start@@Base+0x25f0>
   24e64:	ldr	r2, [pc, #228]	; 24f50 <error_case_tests@@Base+0x100>
   24e68:	mov	r1, #0
   24e6c:	mov	r4, r0
   24e70:	ldr	r0, [pc, #220]	; 24f54 <error_case_tests@@Base+0x104>
   24e74:	bl	1767c <_start@@Base+0x25f0>
   24e78:	ldr	r2, [pc, #216]	; 24f58 <error_case_tests@@Base+0x108>
   24e7c:	mov	r1, #0
   24e80:	orr	r4, r4, r0
   24e84:	ldr	r0, [pc, #208]	; 24f5c <error_case_tests@@Base+0x10c>
   24e88:	bl	1767c <_start@@Base+0x25f0>
   24e8c:	ldr	r2, [pc, #204]	; 24f60 <error_case_tests@@Base+0x110>
   24e90:	mov	r1, #0
   24e94:	orr	r4, r4, r0
   24e98:	ldr	r0, [pc, #196]	; 24f64 <error_case_tests@@Base+0x114>
   24e9c:	bl	1767c <_start@@Base+0x25f0>
   24ea0:	ldr	r2, [pc, #192]	; 24f68 <error_case_tests@@Base+0x118>
   24ea4:	mov	r1, #0
   24ea8:	orr	r4, r4, r0
   24eac:	ldr	r0, [pc, #184]	; 24f6c <error_case_tests@@Base+0x11c>
   24eb0:	bl	1767c <_start@@Base+0x25f0>
   24eb4:	mov	r2, #296	; 0x128
   24eb8:	mov	r1, #0
   24ebc:	orr	r4, r4, r0
   24ec0:	ldr	r0, [pc, #168]	; 24f70 <error_case_tests@@Base+0x120>
   24ec4:	bl	1767c <_start@@Base+0x25f0>
   24ec8:	ldr	r2, [pc, #164]	; 24f74 <error_case_tests@@Base+0x124>
   24ecc:	mov	r1, #0
   24ed0:	orr	r4, r4, r0
   24ed4:	ldr	r0, [pc, #156]	; 24f78 <error_case_tests@@Base+0x128>
   24ed8:	bl	1767c <_start@@Base+0x25f0>
   24edc:	ldr	r2, [pc, #152]	; 24f7c <error_case_tests@@Base+0x12c>
   24ee0:	mov	r1, #0
   24ee4:	orr	r4, r4, r0
   24ee8:	ldr	r0, [pc, #144]	; 24f80 <error_case_tests@@Base+0x130>
   24eec:	bl	1767c <_start@@Base+0x25f0>
   24ef0:	ldr	r2, [pc, #140]	; 24f84 <error_case_tests@@Base+0x134>
   24ef4:	mov	r1, #0
   24ef8:	orr	r4, r4, r0
   24efc:	ldr	r0, [pc, #132]	; 24f88 <error_case_tests@@Base+0x138>
   24f00:	bl	1767c <_start@@Base+0x25f0>
   24f04:	ldr	r2, [pc, #128]	; 24f8c <error_case_tests@@Base+0x13c>
   24f08:	mov	r1, #0
   24f0c:	orr	r4, r4, r0
   24f10:	ldr	r0, [pc, #120]	; 24f90 <error_case_tests@@Base+0x140>
   24f14:	bl	17308 <_start@@Base+0x227c>
   24f18:	ldr	r2, [pc, #116]	; 24f94 <error_case_tests@@Base+0x144>
   24f1c:	mov	r1, #0
   24f20:	orr	r4, r4, r0
   24f24:	ldr	r0, [pc, #108]	; 24f98 <error_case_tests@@Base+0x148>
   24f28:	bl	17308 <_start@@Base+0x227c>
   24f2c:	ldr	r2, [pc, #104]	; 24f9c <error_case_tests@@Base+0x14c>
   24f30:	mov	r1, #0
   24f34:	orr	r4, r4, r0
   24f38:	ldr	r0, [pc, #96]	; 24fa0 <error_case_tests@@Base+0x150>
   24f3c:	bl	17308 <_start@@Base+0x227c>
   24f40:	orr	r0, r4, r0
   24f44:	pop	{r4, pc}
   24f48:	andeq	r0, r0, sp, lsl r1
   24f4c:	andeq	r1, r4, r4, lsr #31
   24f50:	andeq	r0, r0, pc, lsl r1
   24f54:	andeq	r1, r4, r0, asr #31
   24f58:	andeq	r0, r0, r1, lsr #2
   24f5c:	andeq	r2, r4, r4, lsr #32
   24f60:	andeq	r0, r0, r3, lsr #2
   24f64:	andeq	r2, r4, r4, lsl #1
   24f68:	andeq	r0, r0, r5, lsr #2
   24f6c:	ldrdeq	r2, [r4], -ip
   24f70:	andeq	r2, r4, r4, lsr r1
   24f74:	andeq	r0, r0, fp, lsr #2
   24f78:	ldrdeq	r2, [r4], -r4
   24f7c:	andeq	r0, r0, pc, lsr #2
   24f80:	andeq	r2, r4, r0, ror r2
   24f84:	andeq	r0, r0, r3, lsr r1
   24f88:	andeq	r2, r4, r8, lsr r3
   24f8c:	andeq	r0, r0, r7, lsr r1
   24f90:	andeq	r2, r4, r0, lsl #8
   24f94:	andeq	r0, r0, sl, lsr r1
   24f98:	andeq	r2, r4, r8, lsl r4
   24f9c:	andeq	r0, r0, sp, lsr r1
   24fa0:	andeq	r2, r4, r0, asr #8

00024fa4 <base64_tests@@Base>:
   24fa4:	push	{r4, r5, r6, r7, r8, lr}
   24fa8:	sub	sp, sp, #16
   24fac:	ldr	r6, [pc, #312]	; 250ec <base64_tests@@Base+0x148>
   24fb0:	ldr	r3, [pc, #312]	; 250f0 <base64_tests@@Base+0x14c>
   24fb4:	mov	r4, #0
   24fb8:	str	r3, [sp, #4]
   24fbc:	mov	r0, r6
   24fc0:	mov	r3, r4
   24fc4:	str	r4, [sp]
   24fc8:	ldr	r2, [pc, #292]	; 250f4 <base64_tests@@Base+0x150>
   24fcc:	ldr	r1, [pc, #292]	; 250f8 <base64_tests@@Base+0x154>
   24fd0:	bl	179c4 <_start@@Base+0x2938>
   24fd4:	mov	r2, #372	; 0x174
   24fd8:	mov	r3, r4
   24fdc:	str	r2, [sp, #4]
   24fe0:	str	r4, [sp]
   24fe4:	ldr	r2, [pc, #272]	; 250fc <base64_tests@@Base+0x158>
   24fe8:	ldr	r1, [pc, #272]	; 25100 <base64_tests@@Base+0x15c>
   24fec:	ldr	r8, [pc, #272]	; 25104 <base64_tests@@Base+0x160>
   24ff0:	ldr	r7, [pc, #272]	; 25108 <base64_tests@@Base+0x164>
   24ff4:	mov	r5, r0
   24ff8:	mov	r0, r6
   24ffc:	bl	179c4 <_start@@Base+0x2938>
   25000:	mov	r1, #376	; 0x178
   25004:	mov	r3, r4
   25008:	mov	r2, r8
   2500c:	str	r1, [sp, #4]
   25010:	str	r4, [sp]
   25014:	ldr	r1, [pc, #240]	; 2510c <base64_tests@@Base+0x168>
   25018:	orr	r5, r5, r0
   2501c:	mov	r0, r6
   25020:	bl	179c4 <_start@@Base+0x2938>
   25024:	ldr	r1, [pc, #228]	; 25110 <base64_tests@@Base+0x16c>
   25028:	mov	r3, r4
   2502c:	mov	r2, r7
   25030:	str	r1, [sp, #4]
   25034:	str	r4, [sp]
   25038:	ldr	r1, [pc, #212]	; 25114 <base64_tests@@Base+0x170>
   2503c:	orr	r5, r5, r0
   25040:	mov	r0, r6
   25044:	bl	179c4 <_start@@Base+0x2938>
   25048:	ldr	r1, [pc, #200]	; 25118 <base64_tests@@Base+0x174>
   2504c:	mov	r2, r8
   25050:	mov	r3, r4
   25054:	str	r1, [sp, #4]
   25058:	str	r4, [sp]
   2505c:	ldr	r1, [pc, #184]	; 2511c <base64_tests@@Base+0x178>
   25060:	orr	r5, r5, r0
   25064:	mov	r0, r6
   25068:	bl	179c4 <_start@@Base+0x2938>
   2506c:	ldr	r1, [pc, #172]	; 25120 <base64_tests@@Base+0x17c>
   25070:	mov	r2, r7
   25074:	mov	r3, r4
   25078:	str	r1, [sp, #4]
   2507c:	str	r4, [sp]
   25080:	ldr	r1, [pc, #156]	; 25124 <base64_tests@@Base+0x180>
   25084:	orr	r5, r5, r0
   25088:	mov	r0, r6
   2508c:	bl	179c4 <_start@@Base+0x2938>
   25090:	mov	r3, #388	; 0x184
   25094:	mov	r2, r4
   25098:	str	r3, [sp, #8]
   2509c:	str	r4, [sp, #4]
   250a0:	str	r4, [sp]
   250a4:	mov	r3, #31
   250a8:	ldr	r1, [pc, #120]	; 25128 <base64_tests@@Base+0x184>
   250ac:	orr	r5, r5, r0
   250b0:	mov	r0, r6
   250b4:	bl	24980 <test_json@@Base>
   250b8:	ldr	r3, [pc, #108]	; 2512c <base64_tests@@Base+0x188>
   250bc:	str	r4, [sp, #4]
   250c0:	str	r3, [sp, #8]
   250c4:	str	r4, [sp]
   250c8:	mov	r2, r4
   250cc:	mov	r3, #32
   250d0:	ldr	r1, [pc, #88]	; 25130 <base64_tests@@Base+0x18c>
   250d4:	orr	r5, r5, r0
   250d8:	mov	r0, r6
   250dc:	bl	24980 <test_json@@Base>
   250e0:	orr	r0, r5, r0
   250e4:	add	sp, sp, #16
   250e8:	pop	{r4, r5, r6, r7, r8, pc}
   250ec:	andeq	r1, r4, r4, asr r6
   250f0:	andeq	r0, r0, r1, ror r1
   250f4:	andeq	r1, r4, r4, asr sp
   250f8:	andeq	r2, r4, r8, ror r4
   250fc:	muleq	r4, r0, r4
   25100:			; <UNDEFINED> instruction: 0x000424b4
   25104:	ldrdeq	r2, [r4], -ip
   25108:	andeq	r2, r4, ip, asr #12
   2510c:	muleq	r4, r0, r5
   25110:	andeq	r0, r0, fp, ror r1
   25114:	andeq	r2, r4, r4, lsl #14
   25118:	andeq	r0, r0, lr, ror r1
   2511c:	andeq	r2, r4, r0, asr #15
   25120:	andeq	r0, r0, r1, lsl #3
   25124:	andeq	r2, r4, r8, ror r8
   25128:	andeq	r2, r4, r4, lsr r9
   2512c:	andeq	r0, r0, r7, lsl #3
   25130:	strdeq	r2, [r4], -r0

00025134 <mixed_type_union_tests@@Base>:
   25134:	push	{r4, r5, r6, r7, lr}
   25138:	sub	sp, sp, #12
   2513c:	ldr	r6, [pc, #264]	; 2524c <mixed_type_union_tests@@Base+0x118>
   25140:	mov	r4, #0
   25144:	mov	r3, #432	; 0x1b0
   25148:	str	r3, [sp, #4]
   2514c:	mov	r0, r6
   25150:	mov	r3, r4
   25154:	str	r4, [sp]
   25158:	ldr	r2, [pc, #240]	; 25250 <mixed_type_union_tests@@Base+0x11c>
   2515c:	ldr	r1, [pc, #240]	; 25254 <mixed_type_union_tests@@Base+0x120>
   25160:	bl	179c4 <_start@@Base+0x2938>
   25164:	ldr	r7, [pc, #236]	; 25258 <mixed_type_union_tests@@Base+0x124>
   25168:	ldr	r1, [pc, #236]	; 2525c <mixed_type_union_tests@@Base+0x128>
   2516c:	mov	r3, r4
   25170:	mov	r2, r7
   25174:	str	r1, [sp, #4]
   25178:	str	r4, [sp]
   2517c:	ldr	r1, [pc, #220]	; 25260 <mixed_type_union_tests@@Base+0x12c>
   25180:	mov	r5, r0
   25184:	mov	r0, r6
   25188:	bl	179c4 <_start@@Base+0x2938>
   2518c:	ldr	r1, [pc, #208]	; 25264 <mixed_type_union_tests@@Base+0x130>
   25190:	mov	r3, r4
   25194:	mov	r2, r7
   25198:	str	r1, [sp, #4]
   2519c:	str	r4, [sp]
   251a0:	ldr	r1, [pc, #192]	; 25268 <mixed_type_union_tests@@Base+0x134>
   251a4:	orr	r5, r5, r0
   251a8:	mov	r0, r6
   251ac:	bl	179c4 <_start@@Base+0x2938>
   251b0:	ldr	r2, [pc, #180]	; 2526c <mixed_type_union_tests@@Base+0x138>
   251b4:	mov	r3, r4
   251b8:	str	r2, [sp, #4]
   251bc:	str	r4, [sp]
   251c0:	ldr	r2, [pc, #168]	; 25270 <mixed_type_union_tests@@Base+0x13c>
   251c4:	ldr	r1, [pc, #168]	; 25274 <mixed_type_union_tests@@Base+0x140>
   251c8:	orr	r5, r5, r0
   251cc:	mov	r0, r6
   251d0:	bl	179c4 <_start@@Base+0x2938>
   251d4:	ldr	r2, [pc, #156]	; 25278 <mixed_type_union_tests@@Base+0x144>
   251d8:	mov	r3, r4
   251dc:	str	r2, [sp, #4]
   251e0:	str	r4, [sp]
   251e4:	ldr	r2, [pc, #144]	; 2527c <mixed_type_union_tests@@Base+0x148>
   251e8:	ldr	r1, [pc, #144]	; 25280 <mixed_type_union_tests@@Base+0x14c>
   251ec:	orr	r5, r5, r0
   251f0:	mov	r0, r6
   251f4:	bl	179c4 <_start@@Base+0x2938>
   251f8:	ldr	r2, [pc, #132]	; 25284 <mixed_type_union_tests@@Base+0x150>
   251fc:	mov	r3, r4
   25200:	str	r2, [sp, #4]
   25204:	str	r4, [sp]
   25208:	ldr	r2, [pc, #120]	; 25288 <mixed_type_union_tests@@Base+0x154>
   2520c:	ldr	r1, [pc, #120]	; 2528c <mixed_type_union_tests@@Base+0x158>
   25210:	orr	r5, r5, r0
   25214:	mov	r0, r6
   25218:	bl	179c4 <_start@@Base+0x2938>
   2521c:	ldr	r1, [pc, #108]	; 25290 <mixed_type_union_tests@@Base+0x15c>
   25220:	str	r4, [sp]
   25224:	str	r1, [sp, #4]
   25228:	mov	r3, r4
   2522c:	mov	r2, r7
   25230:	ldr	r1, [pc, #92]	; 25294 <mixed_type_union_tests@@Base+0x160>
   25234:	orr	r5, r5, r0
   25238:	mov	r0, r6
   2523c:	bl	179c4 <_start@@Base+0x2938>
   25240:	orr	r0, r5, r0
   25244:	add	sp, sp, #12
   25248:	pop	{r4, r5, r6, r7, pc}
   2524c:	andeq	r1, r4, r4, ror #12
   25250:	andeq	r2, r4, ip, lsr #21
   25254:	strdeq	r2, [r4], -r4
   25258:	andeq	r2, r4, r4, asr #22
   2525c:			; <UNDEFINED> instruction: 0x000001b5
   25260:			; <UNDEFINED> instruction: 0x00042bbc
   25264:			; <UNDEFINED> instruction: 0x000001ba
   25268:	andeq	r2, r4, r0, asr #24
   2526c:	andeq	r0, r0, r1, asr #3
   25270:	ldrdeq	r2, [r4], -r8
   25274:	muleq	r4, r4, sp
   25278:	andeq	r0, r0, sl, asr #3
   2527c:	andeq	r2, r4, r4, ror lr
   25280:	andeq	r2, r4, r4, asr pc
   25284:	ldrdeq	r0, [r0], -r5
   25288:	andeq	r3, r4, ip, asr r0
   2528c:	andeq	r3, r4, r4, lsr #3
   25290:	ldrdeq	r0, [r0], -sl
   25294:	andeq	r3, r4, r8, lsr #6

00025298 <union_vector_tests@@Base>:
   25298:	push	{r4, r5, r6, r7, lr}
   2529c:	sub	sp, sp, #12
   252a0:	ldr	r6, [pc, #228]	; 2538c <union_vector_tests@@Base+0xf4>
   252a4:	ldr	r7, [pc, #228]	; 25390 <union_vector_tests@@Base+0xf8>
   252a8:	ldr	r3, [pc, #228]	; 25394 <union_vector_tests@@Base+0xfc>
   252ac:	mov	r4, #0
   252b0:	mov	r2, r7
   252b4:	str	r3, [sp, #4]
   252b8:	mov	r0, r6
   252bc:	mov	r3, r4
   252c0:	str	r4, [sp]
   252c4:	ldr	r1, [pc, #204]	; 25398 <union_vector_tests@@Base+0x100>
   252c8:	bl	179c4 <_start@@Base+0x2938>
   252cc:	mov	r2, #488	; 0x1e8
   252d0:	mov	r3, r4
   252d4:	str	r2, [sp, #4]
   252d8:	str	r4, [sp]
   252dc:	ldr	r2, [pc, #184]	; 2539c <union_vector_tests@@Base+0x104>
   252e0:	ldr	r1, [pc, #184]	; 253a0 <union_vector_tests@@Base+0x108>
   252e4:	mov	r5, r0
   252e8:	mov	r0, r6
   252ec:	bl	179c4 <_start@@Base+0x2938>
   252f0:	ldr	r2, [pc, #172]	; 253a4 <union_vector_tests@@Base+0x10c>
   252f4:	mov	r3, r4
   252f8:	str	r2, [sp, #4]
   252fc:	str	r4, [sp]
   25300:	ldr	r2, [pc, #160]	; 253a8 <union_vector_tests@@Base+0x110>
   25304:	ldr	r1, [pc, #160]	; 253ac <union_vector_tests@@Base+0x114>
   25308:	orr	r5, r5, r0
   2530c:	mov	r0, r6
   25310:	bl	179c4 <_start@@Base+0x2938>
   25314:	ldr	r2, [pc, #148]	; 253b0 <union_vector_tests@@Base+0x118>
   25318:	mov	r3, r4
   2531c:	str	r2, [sp, #4]
   25320:	str	r4, [sp]
   25324:	ldr	r2, [pc, #136]	; 253b4 <union_vector_tests@@Base+0x11c>
   25328:	ldr	r1, [pc, #136]	; 253b8 <union_vector_tests@@Base+0x120>
   2532c:	orr	r5, r5, r0
   25330:	mov	r0, r6
   25334:	bl	179c4 <_start@@Base+0x2938>
   25338:	ldr	r1, [pc, #124]	; 253bc <union_vector_tests@@Base+0x124>
   2533c:	mov	r2, r7
   25340:	mov	r3, r4
   25344:	str	r1, [sp, #4]
   25348:	str	r4, [sp]
   2534c:	ldr	r1, [pc, #108]	; 253c0 <union_vector_tests@@Base+0x128>
   25350:	orr	r5, r5, r0
   25354:	mov	r0, r6
   25358:	bl	179c4 <_start@@Base+0x2938>
   2535c:	mov	r2, #500	; 0x1f4
   25360:	str	r2, [sp, #4]
   25364:	str	r4, [sp]
   25368:	mov	r3, r4
   2536c:	ldr	r2, [pc, #80]	; 253c4 <union_vector_tests@@Base+0x12c>
   25370:	ldr	r1, [pc, #80]	; 253c8 <union_vector_tests@@Base+0x130>
   25374:	orr	r5, r5, r0
   25378:	mov	r0, r6
   2537c:	bl	179c4 <_start@@Base+0x2938>
   25380:	orr	r0, r5, r0
   25384:	add	sp, sp, #12
   25388:	pop	{r4, r5, r6, r7, pc}
   2538c:	andeq	r1, r4, r4, ror r6
   25390:			; <UNDEFINED> instruction: 0x000433b8
   25394:	andeq	r0, r0, r5, ror #3
   25398:	strdeq	r3, [r4], -r0
   2539c:	andeq	r3, r4, r0, lsr r4
   253a0:	andeq	r3, r4, ip, asr r4
   253a4:	andeq	r0, r0, fp, ror #3
   253a8:	muleq	r4, r0, r4
   253ac:	ldrdeq	r3, [r4], -r4
   253b0:	andeq	r0, r0, lr, ror #3
   253b4:	andeq	r3, r4, r4, lsr #10
   253b8:	muleq	r4, r0, r5
   253bc:	strdeq	r0, [r0], -r1
   253c0:	andeq	r3, r4, r0, lsl r6
   253c4:	andeq	r3, r4, r0, asr r6
   253c8:	andeq	r3, r4, ip, lsr #13

000253cc <flatcc_builder_default_alloc@@Base>:
   253cc:	push	{r4, r5, r6, r7, r8, lr}
   253d0:	subs	r5, r2, #0
   253d4:	mov	r6, r1
   253d8:	bne	253fc <flatcc_builder_default_alloc@@Base+0x30>
   253dc:	ldr	r0, [r1]
   253e0:	cmp	r0, #0
   253e4:	popeq	{r4, r5, r6, r7, r8, pc}
   253e8:	bl	14540 <free@plt>
   253ec:	str	r5, [r6]
   253f0:	str	r5, [r6, #4]
   253f4:	mov	r0, r5
   253f8:	pop	{r4, r5, r6, r7, r8, pc}
   253fc:	mov	r7, r3
   25400:	ldr	r3, [sp, #24]
   25404:	sub	r2, r3, #1
   25408:	cmp	r2, #6
   2540c:	ldrls	pc, [pc, r2, lsl #2]
   25410:	b	254ac <flatcc_builder_default_alloc@@Base+0xe0>
   25414:	andeq	r5, r2, r0, lsl #9
   25418:	andeq	r5, r2, ip, lsr #9
   2541c:	andeq	r5, r2, ip, lsr #9
   25420:	andeq	r5, r2, r4, lsr #9
   25424:	andeq	r5, r2, r0, lsr r4
   25428:	andeq	r5, r2, ip, lsr #9
   2542c:	muleq	r2, ip, r4
   25430:	mov	r4, r5
   25434:	ldr	r3, [r6, #4]
   25438:	cmp	r5, r3
   2543c:	bhi	25448 <flatcc_builder_default_alloc@@Base+0x7c>
   25440:	cmp	r4, r3, lsr #1
   25444:	bls	254b4 <flatcc_builder_default_alloc@@Base+0xe8>
   25448:	mov	r1, r4
   2544c:	ldr	r0, [r6]
   25450:	bl	14564 <realloc@plt>
   25454:	subs	r5, r0, #0
   25458:	beq	254d0 <flatcc_builder_default_alloc@@Base+0x104>
   2545c:	cmp	r7, #0
   25460:	beq	25470 <flatcc_builder_default_alloc@@Base+0xa4>
   25464:	ldr	r0, [r6, #4]
   25468:	cmp	r0, r4
   2546c:	bcc	254bc <flatcc_builder_default_alloc@@Base+0xf0>
   25470:	str	r5, [r6]
   25474:	str	r4, [r6, #4]
   25478:	mov	r0, #0
   2547c:	pop	{r4, r5, r6, r7, r8, pc}
   25480:	mov	r4, #256	; 0x100
   25484:	cmp	r5, r4
   25488:	bls	25434 <flatcc_builder_default_alloc@@Base+0x68>
   2548c:	lsl	r4, r4, #1
   25490:	cmp	r5, r4
   25494:	bhi	2548c <flatcc_builder_default_alloc@@Base+0xc0>
   25498:	b	25434 <flatcc_builder_default_alloc@@Base+0x68>
   2549c:	mov	r4, #64	; 0x40
   254a0:	b	25484 <flatcc_builder_default_alloc@@Base+0xb8>
   254a4:	mov	r4, #288	; 0x120
   254a8:	b	25484 <flatcc_builder_default_alloc@@Base+0xb8>
   254ac:	mov	r4, #32
   254b0:	b	25484 <flatcc_builder_default_alloc@@Base+0xb8>
   254b4:	mov	r0, #0
   254b8:	pop	{r4, r5, r6, r7, r8, pc}
   254bc:	sub	r2, r4, r0
   254c0:	mov	r1, #0
   254c4:	add	r0, r5, r0
   254c8:	bl	145c4 <memset@plt>
   254cc:	b	25470 <flatcc_builder_default_alloc@@Base+0xa4>
   254d0:	mvn	r0, #0
   254d4:	pop	{r4, r5, r6, r7, r8, pc}
   254d8:	push	{r4, r5, r6, r7, r8, lr}
   254dc:	mov	r5, r0
   254e0:	ldrh	r0, [r0, #128]	; 0x80
   254e4:	sub	sp, sp, #88	; 0x58
   254e8:	mov	r7, #4
   254ec:	cmp	r0, #3
   254f0:	movls	r0, #4
   254f4:	strhls	r0, [r5, #128]	; 0x80
   254f8:	ldr	r0, [r5, #136]	; 0x88
   254fc:	lsls	r4, r2, #2
   25500:	mov	r8, #1
   25504:	str	r7, [sp, #16]
   25508:	str	r8, [sp, #20]
   2550c:	and	ip, r0, #3
   25510:	movne	r8, #2
   25514:	str	r7, [sp, #28]
   25518:	addne	r7, r4, r7
   2551c:	strne	r4, [sp, #36]	; 0x24
   25520:	add	lr, sp, #12
   25524:	strne	r1, [sp, #32]
   25528:	strne	r7, [sp, #16]
   2552c:	strne	r8, [sp, #20]
   25530:	movne	r4, #3
   25534:	moveq	r4, #2
   25538:	cmp	ip, #0
   2553c:	str	r2, [sp, #12]
   25540:	str	lr, [sp, #24]
   25544:	beq	25570 <flatcc_builder_default_alloc@@Base+0x1a4>
   25548:	add	lr, r8, #1
   2554c:	add	r8, sp, #88	; 0x58
   25550:	add	lr, r8, lr, lsl #3
   25554:	ldr	r6, [pc, #320]	; 2569c <flatcc_builder_default_alloc@@Base+0x2d0>
   25558:	mov	r8, r4
   2555c:	add	r7, r7, ip
   25560:	str	ip, [lr, #-68]	; 0xffffffbc
   25564:	str	r7, [sp, #16]
   25568:	str	r4, [sp, #20]
   2556c:	str	r6, [lr, #-72]	; 0xffffffb8
   25570:	cmp	r2, #0
   25574:	sub	r4, r0, r7
   25578:	beq	2560c <flatcc_builder_default_alloc@@Base+0x240>
   2557c:	cmp	r3, #0
   25580:	addne	r6, r3, r2
   25584:	mvnne	r0, #3
   25588:	bne	255bc <flatcc_builder_default_alloc@@Base+0x1f0>
   2558c:	b	25648 <flatcc_builder_default_alloc@@Base+0x27c>
   25590:	sub	lr, r0, r4
   25594:	add	ip, lr, ip
   25598:	str	ip, [r1]
   2559c:	ldrb	ip, [r3]
   255a0:	cmp	ip, #0
   255a4:	beq	25670 <flatcc_builder_default_alloc@@Base+0x2a4>
   255a8:	add	r3, r3, #1
   255ac:	cmp	r3, r6
   255b0:	add	r1, r1, #4
   255b4:	sub	r0, r0, #4
   255b8:	beq	25604 <flatcc_builder_default_alloc@@Base+0x238>
   255bc:	ldr	ip, [r1]
   255c0:	cmp	ip, #0
   255c4:	bne	25590 <flatcc_builder_default_alloc@@Base+0x1c4>
   255c8:	ldrb	ip, [r3]
   255cc:	cmp	ip, #0
   255d0:	beq	255a8 <flatcc_builder_default_alloc@@Base+0x1dc>
   255d4:	ldr	r3, [pc, #196]	; 256a0 <flatcc_builder_default_alloc@@Base+0x2d4>
   255d8:	ldr	r2, [pc, #196]	; 256a4 <flatcc_builder_default_alloc@@Base+0x2d8>
   255dc:	ldr	r1, [pc, #196]	; 256a8 <flatcc_builder_default_alloc@@Base+0x2dc>
   255e0:	ldr	r0, [pc, #196]	; 256ac <flatcc_builder_default_alloc@@Base+0x2e0>
   255e4:	bl	14618 <__assert_fail@plt>
   255e8:	sub	r1, r0, r4
   255ec:	add	r3, r3, #1
   255f0:	add	r1, r1, lr
   255f4:	cmp	r2, r3
   255f8:	str	r1, [ip, #4]!
   255fc:	sub	r0, r0, #4
   25600:	bne	25650 <flatcc_builder_default_alloc@@Base+0x284>
   25604:	ldr	r0, [r5, #136]	; 0x88
   25608:	sub	r4, r0, r7
   2560c:	cmp	r4, r0
   25610:	bge	25698 <flatcc_builder_default_alloc@@Base+0x2cc>
   25614:	ldr	r0, [r5, #36]	; 0x24
   25618:	mov	r2, r8
   2561c:	str	r7, [sp]
   25620:	mov	r3, r4
   25624:	ldr	r6, [r5, #44]	; 0x2c
   25628:	add	r1, sp, #24
   2562c:	blx	r6
   25630:	cmp	r0, #0
   25634:	bne	25684 <flatcc_builder_default_alloc@@Base+0x2b8>
   25638:	mov	r0, r4
   2563c:	str	r4, [r5, #136]	; 0x88
   25640:	add	sp, sp, #88	; 0x58
   25644:	pop	{r4, r5, r6, r7, r8, pc}
   25648:	sub	ip, r1, #4
   2564c:	mvn	r0, #3
   25650:	ldr	lr, [ip, #4]
   25654:	cmp	lr, #0
   25658:	bne	255e8 <flatcc_builder_default_alloc@@Base+0x21c>
   2565c:	ldr	r3, [pc, #60]	; 256a0 <flatcc_builder_default_alloc@@Base+0x2d4>
   25660:	ldr	r2, [pc, #72]	; 256b0 <flatcc_builder_default_alloc@@Base+0x2e4>
   25664:	ldr	r1, [pc, #60]	; 256a8 <flatcc_builder_default_alloc@@Base+0x2dc>
   25668:	ldr	r0, [pc, #68]	; 256b4 <flatcc_builder_default_alloc@@Base+0x2e8>
   2566c:	bl	14618 <__assert_fail@plt>
   25670:	ldr	r3, [pc, #40]	; 256a0 <flatcc_builder_default_alloc@@Base+0x2d4>
   25674:	ldr	r2, [pc, #60]	; 256b8 <flatcc_builder_default_alloc@@Base+0x2ec>
   25678:	ldr	r1, [pc, #40]	; 256a8 <flatcc_builder_default_alloc@@Base+0x2dc>
   2567c:	ldr	r0, [pc, #56]	; 256bc <flatcc_builder_default_alloc@@Base+0x2f0>
   25680:	bl	14618 <__assert_fail@plt>
   25684:	ldr	r3, [pc, #52]	; 256c0 <flatcc_builder_default_alloc@@Base+0x2f4>
   25688:	ldr	r2, [pc, #52]	; 256c4 <flatcc_builder_default_alloc@@Base+0x2f8>
   2568c:	ldr	r1, [pc, #20]	; 256a8 <flatcc_builder_default_alloc@@Base+0x2dc>
   25690:	ldr	r0, [pc, #28]	; 256b4 <flatcc_builder_default_alloc@@Base+0x2e8>
   25694:	bl	14618 <__assert_fail@plt>
   25698:	bl	147f4 <__assert_fail@plt+0x1dc>
   2569c:	andeq	r4, r4, ip, asr #15
   256a0:	andeq	r4, r4, ip, asr #19
   256a4:			; <UNDEFINED> instruction: 0x000005b5
   256a8:	andeq	r4, r4, r4, lsl #29
   256ac:	andeq	r4, r4, r8, asr #30
   256b0:			; <UNDEFINED> instruction: 0x000005b7
   256b4:	andeq	r4, r4, r4, asr #30
   256b8:			; <UNDEFINED> instruction: 0x000005b1
   256bc:	andeq	r4, r4, r8, lsr pc
   256c0:	andeq	r4, r4, r0, asr r7
   256c4:	andeq	r0, r0, fp, lsl #5
   256c8:	ldrh	r3, [r0, #128]	; 0x80
   256cc:	push	{r4, r5, r6, r7, lr}
   256d0:	sub	sp, sp, #92	; 0x5c
   256d4:	cmp	r3, #3
   256d8:	movls	r3, #4
   256dc:	ldr	lr, [r0, #136]	; 0x88
   256e0:	mov	ip, #4
   256e4:	strhls	r3, [r0, #128]	; 0x80
   256e8:	mov	r4, r0
   256ec:	lsls	r6, r2, #2
   256f0:	mov	r0, #1
   256f4:	add	r5, sp, #12
   256f8:	str	ip, [sp, #16]
   256fc:	str	r0, [sp, #20]
   25700:	and	r3, lr, #3
   25704:	movne	r0, #2
   25708:	str	ip, [sp, #28]
   2570c:	addne	ip, r6, ip
   25710:	str	r5, [sp, #24]
   25714:	strne	r6, [sp, #36]	; 0x24
   25718:	strne	r1, [sp, #32]
   2571c:	strne	ip, [sp, #16]
   25720:	strne	r0, [sp, #20]
   25724:	movne	r5, r0
   25728:	movne	r6, #3
   2572c:	moveq	r5, r0
   25730:	moveq	r6, #2
   25734:	cmp	r3, #0
   25738:	str	r2, [sp, #12]
   2573c:	beq	25768 <flatcc_builder_default_alloc@@Base+0x39c>
   25740:	add	r0, r5, #1
   25744:	add	r5, sp, #88	; 0x58
   25748:	add	r0, r5, r0, lsl #3
   2574c:	ldr	r7, [pc, #204]	; 25820 <flatcc_builder_default_alloc@@Base+0x454>
   25750:	mov	r5, r6
   25754:	add	ip, ip, r3
   25758:	str	r3, [r0, #-68]	; 0xffffffbc
   2575c:	str	ip, [sp, #16]
   25760:	str	r6, [sp, #20]
   25764:	str	r7, [r0, #-72]	; 0xffffffb8
   25768:	cmp	r2, #0
   2576c:	beq	257c8 <flatcc_builder_default_alloc@@Base+0x3fc>
   25770:	ldr	r3, [r1]
   25774:	cmp	r3, #0
   25778:	beq	257b0 <flatcc_builder_default_alloc@@Base+0x3e4>
   2577c:	sub	r6, lr, ip
   25780:	mov	r0, #0
   25784:	mvn	lr, #3
   25788:	sub	r3, r3, r6
   2578c:	add	r0, r0, #1
   25790:	add	r3, r3, lr
   25794:	cmp	r2, r0
   25798:	str	r3, [r1]
   2579c:	beq	257c4 <flatcc_builder_default_alloc@@Base+0x3f8>
   257a0:	ldr	r3, [r1, #4]!
   257a4:	sub	lr, lr, #4
   257a8:	cmp	r3, #0
   257ac:	bne	25788 <flatcc_builder_default_alloc@@Base+0x3bc>
   257b0:	ldr	r3, [pc, #108]	; 25824 <flatcc_builder_default_alloc@@Base+0x458>
   257b4:	ldr	r2, [pc, #108]	; 25828 <flatcc_builder_default_alloc@@Base+0x45c>
   257b8:	ldr	r1, [pc, #108]	; 2582c <flatcc_builder_default_alloc@@Base+0x460>
   257bc:	ldr	r0, [pc, #108]	; 25830 <flatcc_builder_default_alloc@@Base+0x464>
   257c0:	bl	14618 <__assert_fail@plt>
   257c4:	ldr	lr, [r4, #136]	; 0x88
   257c8:	sub	r6, lr, ip
   257cc:	cmp	r6, lr
   257d0:	bge	2581c <flatcc_builder_default_alloc@@Base+0x450>
   257d4:	ldr	r0, [r4, #36]	; 0x24
   257d8:	mov	r2, r5
   257dc:	str	ip, [sp]
   257e0:	mov	r3, r6
   257e4:	ldr	r5, [r4, #44]	; 0x2c
   257e8:	add	r1, sp, #24
   257ec:	blx	r5
   257f0:	cmp	r0, #0
   257f4:	bne	25808 <flatcc_builder_default_alloc@@Base+0x43c>
   257f8:	mov	r0, r6
   257fc:	str	r6, [r4, #136]	; 0x88
   25800:	add	sp, sp, #92	; 0x5c
   25804:	pop	{r4, r5, r6, r7, pc}
   25808:	ldr	r3, [pc, #36]	; 25834 <flatcc_builder_default_alloc@@Base+0x468>
   2580c:	ldr	r2, [pc, #36]	; 25838 <flatcc_builder_default_alloc@@Base+0x46c>
   25810:	ldr	r1, [pc, #20]	; 2582c <flatcc_builder_default_alloc@@Base+0x460>
   25814:	ldr	r0, [pc, #20]	; 25830 <flatcc_builder_default_alloc@@Base+0x464>
   25818:	bl	14618 <__assert_fail@plt>
   2581c:	bl	147f4 <__assert_fail@plt+0x1dc>
   25820:	andeq	r4, r4, ip, asr #15
   25824:	andeq	r4, r4, ip, asr #19
   25828:			; <UNDEFINED> instruction: 0x000005b7
   2582c:	andeq	r4, r4, r4, lsl #29
   25830:	andeq	r4, r4, r4, asr #30
   25834:	andeq	r4, r4, r0, asr r7
   25838:	andeq	r0, r0, fp, lsl #5

0002583c <flatcc_builder_flush_vtable_cache@@Base>:
   2583c:	ldr	r3, [r0, #116]	; 0x74
   25840:	cmp	r3, #0
   25844:	bxeq	lr
   25848:	ldr	r2, [r0, #96]	; 0x60
   2584c:	push	{r4, lr}
   25850:	mov	r1, #0
   25854:	mov	r4, r0
   25858:	ldr	r0, [r0, #92]	; 0x5c
   2585c:	bl	145c4 <memset@plt>
   25860:	mov	r2, #16
   25864:	mov	r3, #0
   25868:	str	r2, [r4, #124]	; 0x7c
   2586c:	str	r3, [r4, #120]	; 0x78
   25870:	pop	{r4, pc}

00025874 <flatcc_builder_custom_init@@Base>:
   25874:	push	{r4, r5, r6, r7, r8, lr}
   25878:	mov	r6, r1
   2587c:	mov	r7, r2
   25880:	mov	r1, #0
   25884:	mov	r2, #232	; 0xe8
   25888:	mov	r4, r0
   2588c:	mov	r5, r3
   25890:	ldr	r8, [sp, #24]
   25894:	bl	145c4 <memset@plt>
   25898:	cmp	r6, #0
   2589c:	moveq	r3, #1
   258a0:	ldreq	r6, [pc, #40]	; 258d0 <flatcc_builder_custom_init@@Base+0x5c>
   258a4:	addeq	r7, r4, #188	; 0xbc
   258a8:	str	r8, [r4, #40]	; 0x28
   258ac:	str	r7, [r4, #36]	; 0x24
   258b0:	str	r6, [r4, #44]	; 0x2c
   258b4:	mov	r0, #0
   258b8:	streq	r3, [r4, #184]	; 0xb8
   258bc:	ldr	r3, [pc, #16]	; 258d4 <flatcc_builder_custom_init@@Base+0x60>
   258c0:	cmp	r5, #0
   258c4:	moveq	r5, r3
   258c8:	str	r5, [r4, #48]	; 0x30
   258cc:	pop	{r4, r5, r6, r7, r8, pc}
   258d0:	andeq	sl, r2, r8, lsr #28
   258d4:	andeq	r5, r2, ip, asr #7

000258d8 <flatcc_builder_init@@Base>:
   258d8:	push	{r4, lr}
   258dc:	mov	r2, #232	; 0xe8
   258e0:	mov	r1, #0
   258e4:	mov	r4, r0
   258e8:	bl	145c4 <memset@plt>
   258ec:	ldr	r1, [pc, #32]	; 25914 <flatcc_builder_init@@Base+0x3c>
   258f0:	ldr	r3, [pc, #32]	; 25918 <flatcc_builder_init@@Base+0x40>
   258f4:	mov	r0, #1
   258f8:	add	r2, r4, #188	; 0xbc
   258fc:	str	r0, [r4, #184]	; 0xb8
   25900:	str	r1, [r4, #48]	; 0x30
   25904:	str	r2, [r4, #36]	; 0x24
   25908:	str	r3, [r4, #44]	; 0x2c
   2590c:	mov	r0, #0
   25910:	pop	{r4, pc}
   25914:	andeq	r5, r2, ip, asr #7
   25918:	andeq	sl, r2, r8, lsr #28

0002591c <flatcc_builder_custom_reset@@Base>:
   2591c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25920:	add	r7, r0, #52	; 0x34
   25924:	mov	r4, #0
   25928:	sub	sp, sp, #12
   2592c:	mov	r5, r0
   25930:	mov	sl, r1
   25934:	mov	r8, r2
   25938:	mov	r6, r7
   2593c:	mov	r9, r4
   25940:	mov	fp, #1
   25944:	b	25998 <flatcc_builder_custom_reset@@Base+0x7c>
   25948:	cmp	r4, #5
   2594c:	cmpne	r8, #0
   25950:	beq	2597c <flatcc_builder_custom_reset@@Base+0x60>
   25954:	ldr	r0, [r5, #40]	; 0x28
   25958:	mov	r3, fp
   2595c:	str	r4, [sp]
   25960:	mov	r2, #1
   25964:	mov	r1, r6
   25968:	ldr	ip, [r5, #48]	; 0x30
   2596c:	blx	ip
   25970:	cmp	r0, #0
   25974:	bne	25a4c <flatcc_builder_custom_reset@@Base+0x130>
   25978:	ldr	r0, [r7, r4, lsl #3]
   2597c:	ldr	r2, [r6, #4]
   25980:	mov	r1, r9
   25984:	bl	145c4 <memset@plt>
   25988:	add	r4, r4, #1
   2598c:	cmp	r4, #8
   25990:	add	r6, r6, #8
   25994:	beq	259c4 <flatcc_builder_custom_reset@@Base+0xa8>
   25998:	ldr	r0, [r7, r4, lsl #3]
   2599c:	cmp	r0, #0
   259a0:	bne	25948 <flatcc_builder_custom_reset@@Base+0x2c>
   259a4:	ldr	r3, [r6, #4]
   259a8:	cmp	r3, #0
   259ac:	beq	25988 <flatcc_builder_custom_reset@@Base+0x6c>
   259b0:	ldr	r3, [pc, #156]	; 25a54 <flatcc_builder_custom_reset@@Base+0x138>
   259b4:	ldr	r2, [pc, #156]	; 25a58 <flatcc_builder_custom_reset@@Base+0x13c>
   259b8:	ldr	r1, [pc, #156]	; 25a5c <flatcc_builder_custom_reset@@Base+0x140>
   259bc:	ldr	r0, [pc, #156]	; 25a60 <flatcc_builder_custom_reset@@Base+0x144>
   259c0:	bl	14618 <__assert_fail@plt>
   259c4:	ldr	r2, [r5, #124]	; 0x7c
   259c8:	mov	r3, #0
   259cc:	ldr	r0, [r5, #60]	; 0x3c
   259d0:	cmp	r2, r3
   259d4:	str	r3, [r5, #120]	; 0x78
   259d8:	ldr	r1, [r5, #76]	; 0x4c
   259dc:	movne	r3, #16
   259e0:	ldr	r2, [r5, #52]	; 0x34
   259e4:	str	r0, [r5, #16]
   259e8:	ldr	r0, [r5, #184]	; 0xb8
   259ec:	strne	r3, [r5, #124]	; 0x7c
   259f0:	mov	r3, #0
   259f4:	cmp	sl, #0
   259f8:	strne	r3, [r5, #172]	; 0xac
   259fc:	strne	r3, [r5, #176]	; 0xb0
   25a00:	strne	r3, [r5, #180]	; 0xb4
   25a04:	cmp	r0, #0
   25a08:	stm	r5, {r1, r2}
   25a0c:	strh	r3, [r5, #128]	; 0x80
   25a10:	str	r3, [r5, #136]	; 0x88
   25a14:	str	r3, [r5, #140]	; 0x8c
   25a18:	str	r3, [r5, #156]	; 0x9c
   25a1c:	str	r3, [r5, #160]	; 0xa0
   25a20:	str	r3, [r5, #20]
   25a24:	str	r3, [r5, #24]
   25a28:	str	r3, [r5, #148]	; 0x94
   25a2c:	str	r3, [r5, #152]	; 0x98
   25a30:	str	r3, [r5, #32]
   25a34:	beq	25a44 <flatcc_builder_custom_reset@@Base+0x128>
   25a38:	add	r0, r5, #188	; 0xbc
   25a3c:	bl	2ad00 <flatcc_emitter_reset@@Base>
   25a40:	mov	r0, #0
   25a44:	add	sp, sp, #12
   25a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a4c:	mvn	r0, #0
   25a50:	b	25a44 <flatcc_builder_custom_reset@@Base+0x128>
   25a54:	andeq	r4, r4, ip, ror #19
   25a58:			; <UNDEFINED> instruction: 0x000001b2
   25a5c:	andeq	r4, r4, r4, lsl #29
   25a60:	andeq	r4, r4, r8, asr pc

00025a64 <flatcc_builder_reset@@Base>:
   25a64:	push	{r4, r5, r6, r7, r8, lr}
   25a68:	mov	r5, r0
   25a6c:	add	r4, r0, #52	; 0x34
   25a70:	add	r6, r0, #116	; 0x74
   25a74:	mov	r7, #0
   25a78:	b	25a94 <flatcc_builder_reset@@Base+0x30>
   25a7c:	ldr	r2, [r4, #4]
   25a80:	mov	r1, r7
   25a84:	bl	145c4 <memset@plt>
   25a88:	add	r4, r4, #8
   25a8c:	cmp	r6, r4
   25a90:	beq	25ac0 <flatcc_builder_reset@@Base+0x5c>
   25a94:	ldr	r0, [r4]
   25a98:	cmp	r0, #0
   25a9c:	bne	25a7c <flatcc_builder_reset@@Base+0x18>
   25aa0:	ldr	r3, [r4, #4]
   25aa4:	cmp	r3, #0
   25aa8:	beq	25a88 <flatcc_builder_reset@@Base+0x24>
   25aac:	ldr	r3, [pc, #128]	; 25b34 <flatcc_builder_reset@@Base+0xd0>
   25ab0:	ldr	r2, [pc, #128]	; 25b38 <flatcc_builder_reset@@Base+0xd4>
   25ab4:	ldr	r1, [pc, #128]	; 25b3c <flatcc_builder_reset@@Base+0xd8>
   25ab8:	ldr	r0, [pc, #128]	; 25b40 <flatcc_builder_reset@@Base+0xdc>
   25abc:	bl	14618 <__assert_fail@plt>
   25ac0:	ldr	r2, [r5, #124]	; 0x7c
   25ac4:	mov	r3, #0
   25ac8:	cmp	r2, r3
   25acc:	str	r3, [r5, #120]	; 0x78
   25ad0:	movne	r3, #16
   25ad4:	strne	r3, [r5, #124]	; 0x7c
   25ad8:	ldr	r1, [r5, #76]	; 0x4c
   25adc:	ldr	r3, [r5, #184]	; 0xb8
   25ae0:	ldr	r2, [r5, #52]	; 0x34
   25ae4:	ldr	r0, [r5, #60]	; 0x3c
   25ae8:	cmp	r3, #0
   25aec:	mov	r3, #0
   25af0:	str	r0, [r5, #16]
   25af4:	stm	r5, {r1, r2}
   25af8:	strh	r3, [r5, #128]	; 0x80
   25afc:	str	r3, [r5, #136]	; 0x88
   25b00:	str	r3, [r5, #140]	; 0x8c
   25b04:	str	r3, [r5, #156]	; 0x9c
   25b08:	str	r3, [r5, #160]	; 0xa0
   25b0c:	str	r3, [r5, #20]
   25b10:	str	r3, [r5, #24]
   25b14:	str	r3, [r5, #148]	; 0x94
   25b18:	str	r3, [r5, #152]	; 0x98
   25b1c:	str	r3, [r5, #32]
   25b20:	beq	25b2c <flatcc_builder_reset@@Base+0xc8>
   25b24:	add	r0, r5, #188	; 0xbc
   25b28:	bl	2ad00 <flatcc_emitter_reset@@Base>
   25b2c:	mov	r0, #0
   25b30:	pop	{r4, r5, r6, r7, r8, pc}
   25b34:	andeq	r4, r4, ip, ror #19
   25b38:			; <UNDEFINED> instruction: 0x000001b2
   25b3c:	andeq	r4, r4, r4, lsl #29
   25b40:	andeq	r4, r4, r8, asr pc

00025b44 <flatcc_builder_clear@@Base>:
   25b44:	push	{r4, r5, r6, r7, r8, lr}
   25b48:	mov	r4, #0
   25b4c:	sub	sp, sp, #8
   25b50:	mov	r6, r0
   25b54:	add	r5, r0, #52	; 0x34
   25b58:	mov	r8, r4
   25b5c:	ldr	r0, [r6, #40]	; 0x28
   25b60:	mov	r1, r5
   25b64:	str	r4, [sp]
   25b68:	mov	r3, r8
   25b6c:	add	r4, r4, #1
   25b70:	ldr	r7, [r6, #48]	; 0x30
   25b74:	mov	r2, #0
   25b78:	blx	r7
   25b7c:	cmp	r4, #8
   25b80:	add	r5, r5, #8
   25b84:	bne	25b5c <flatcc_builder_clear@@Base+0x18>
   25b88:	ldr	r3, [r6, #184]	; 0xb8
   25b8c:	cmp	r3, #0
   25b90:	beq	25b9c <flatcc_builder_clear@@Base+0x58>
   25b94:	add	r0, r6, #188	; 0xbc
   25b98:	bl	2adbc <flatcc_emitter_clear@@Base>
   25b9c:	mov	r0, r6
   25ba0:	mov	r2, #232	; 0xe8
   25ba4:	mov	r1, #0
   25ba8:	add	sp, sp, #8
   25bac:	pop	{r4, r5, r6, r7, r8, lr}
   25bb0:	b	145c4 <memset@plt>

00025bb4 <flatcc_builder_enter_user_frame_ptr@@Base>:
   25bb4:	push	{r4, r5, r6, r7, r8, lr}
   25bb8:	add	r4, r1, #3
   25bbc:	bic	r4, r4, #3
   25bc0:	ldr	r7, [r0, #228]	; 0xe4
   25bc4:	add	r4, r4, #4
   25bc8:	ldr	r3, [r0, #112]	; 0x70
   25bcc:	add	r2, r4, r7
   25bd0:	cmp	r2, r3
   25bd4:	sub	sp, sp, #8
   25bd8:	mov	r6, r0
   25bdc:	bhi	25c24 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   25be0:	ldr	r8, [r6, #108]	; 0x6c
   25be4:	adds	r5, r8, r7
   25be8:	beq	25c4c <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   25bec:	mov	r2, r4
   25bf0:	mov	r1, #0
   25bf4:	mov	r0, r5
   25bf8:	bl	145c4 <memset@plt>
   25bfc:	ldr	r3, [r6, #224]	; 0xe0
   25c00:	add	r0, r5, #4
   25c04:	str	r3, [r8, r7]
   25c08:	ldr	r3, [r6, #228]	; 0xe4
   25c0c:	add	r4, r4, r3
   25c10:	add	r3, r3, #4
   25c14:	str	r4, [r6, #228]	; 0xe4
   25c18:	str	r3, [r6, #224]	; 0xe0
   25c1c:	add	sp, sp, #8
   25c20:	pop	{r4, r5, r6, r7, r8, pc}
   25c24:	mov	r3, #7
   25c28:	ldr	r0, [r0, #40]	; 0x28
   25c2c:	add	r1, r6, #108	; 0x6c
   25c30:	str	r3, [sp]
   25c34:	mov	r3, #0
   25c38:	ldr	r5, [r6, #48]	; 0x30
   25c3c:	blx	r5
   25c40:	cmp	r0, #0
   25c44:	beq	25be0 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   25c48:	bl	147a8 <__assert_fail@plt+0x190>
   25c4c:	mov	r0, r5
   25c50:	b	25c1c <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

00025c54 <flatcc_builder_enter_user_frame@@Base>:
   25c54:	push	{r4, r5, r6, r7, lr}
   25c58:	add	r4, r1, #3
   25c5c:	bic	r4, r4, #3
   25c60:	ldr	r6, [r0, #228]	; 0xe4
   25c64:	add	r4, r4, #4
   25c68:	ldr	r3, [r0, #112]	; 0x70
   25c6c:	add	r2, r4, r6
   25c70:	cmp	r2, r3
   25c74:	sub	sp, sp, #12
   25c78:	mov	r5, r0
   25c7c:	bhi	25cbc <flatcc_builder_enter_user_frame@@Base+0x68>
   25c80:	ldr	r7, [r5, #108]	; 0x6c
   25c84:	adds	r0, r7, r6
   25c88:	beq	25cb4 <flatcc_builder_enter_user_frame@@Base+0x60>
   25c8c:	mov	r2, r4
   25c90:	mov	r1, #0
   25c94:	bl	145c4 <memset@plt>
   25c98:	ldr	r3, [r5, #224]	; 0xe0
   25c9c:	str	r3, [r7, r6]
   25ca0:	ldr	r0, [r5, #228]	; 0xe4
   25ca4:	add	r4, r4, r0
   25ca8:	add	r0, r0, #4
   25cac:	str	r4, [r5, #228]	; 0xe4
   25cb0:	str	r0, [r5, #224]	; 0xe0
   25cb4:	add	sp, sp, #12
   25cb8:	pop	{r4, r5, r6, r7, pc}
   25cbc:	mov	r3, #7
   25cc0:	ldr	r0, [r0, #40]	; 0x28
   25cc4:	add	r1, r5, #108	; 0x6c
   25cc8:	str	r3, [sp]
   25ccc:	mov	r3, #0
   25cd0:	ldr	r7, [r5, #48]	; 0x30
   25cd4:	blx	r7
   25cd8:	cmp	r0, #0
   25cdc:	beq	25c80 <flatcc_builder_enter_user_frame@@Base+0x2c>
   25ce0:	bl	147a8 <__assert_fail@plt+0x190>

00025ce4 <flatcc_builder_exit_user_frame@@Base>:
   25ce4:	ldr	r3, [r0, #224]	; 0xe0
   25ce8:	cmp	r3, #0
   25cec:	beq	25d10 <flatcc_builder_exit_user_frame@@Base+0x2c>
   25cf0:	ldr	r2, [r0, #108]	; 0x6c
   25cf4:	sub	r1, r3, #4
   25cf8:	add	r3, r2, r3
   25cfc:	str	r1, [r0, #228]	; 0xe4
   25d00:	ldr	r3, [r3, #-4]
   25d04:	str	r3, [r0, #224]	; 0xe0
   25d08:	mov	r0, r3
   25d0c:	bx	lr
   25d10:	push	{r4, lr}
   25d14:	bl	14840 <__assert_fail@plt+0x228>

00025d18 <flatcc_builder_exit_user_frame_at@@Base>:
   25d18:	ldr	r3, [r0, #224]	; 0xe0
   25d1c:	push	{r4, lr}
   25d20:	cmp	r3, r1
   25d24:	bcc	25d54 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   25d28:	cmp	r1, #0
   25d2c:	str	r1, [r0, #224]	; 0xe0
   25d30:	beq	25d68 <flatcc_builder_exit_user_frame_at@@Base+0x50>
   25d34:	ldr	r3, [r0, #108]	; 0x6c
   25d38:	sub	r2, r1, #4
   25d3c:	add	r1, r3, r1
   25d40:	str	r2, [r0, #228]	; 0xe4
   25d44:	ldr	r3, [r1, #-4]
   25d48:	str	r3, [r0, #224]	; 0xe0
   25d4c:	mov	r0, r3
   25d50:	pop	{r4, pc}
   25d54:	ldr	r3, [pc, #16]	; 25d6c <flatcc_builder_exit_user_frame_at@@Base+0x54>
   25d58:	ldr	r2, [pc, #16]	; 25d70 <flatcc_builder_exit_user_frame_at@@Base+0x58>
   25d5c:	ldr	r1, [pc, #16]	; 25d74 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   25d60:	ldr	r0, [pc, #16]	; 25d78 <flatcc_builder_exit_user_frame_at@@Base+0x60>
   25d64:	bl	14618 <__assert_fail@plt>
   25d68:	bl	14840 <__assert_fail@plt+0x228>
   25d6c:	andeq	r4, r4, r8, lsl #20
   25d70:	andeq	r0, r0, r7, lsr #4
   25d74:	andeq	r4, r4, r4, lsl #29
   25d78:	andeq	r4, r4, ip, ror #30

00025d7c <flatcc_builder_get_current_user_frame@@Base>:
   25d7c:	ldr	r0, [r0, #224]	; 0xe0
   25d80:	bx	lr

00025d84 <flatcc_builder_get_user_frame_ptr@@Base>:
   25d84:	ldr	r0, [r0, #108]	; 0x6c
   25d88:	add	r0, r0, r1
   25d8c:	bx	lr

00025d90 <flatcc_builder_embed_buffer@@Base>:
   25d90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d94:	sub	sp, sp, #92	; 0x5c
   25d98:	cmp	r1, #0
   25d9c:	ldr	r6, [sp, #132]	; 0x84
   25da0:	mov	r8, r2
   25da4:	mov	r5, r0
   25da8:	mov	r7, r3
   25dac:	ldr	r2, [r0, #152]	; 0x98
   25db0:	and	r6, r6, #2
   25db4:	ldrh	r4, [sp, #128]	; 0x80
   25db8:	bne	25dc8 <flatcc_builder_embed_buffer@@Base+0x38>
   25dbc:	ldrh	r1, [r0, #132]	; 0x84
   25dc0:	cmp	r1, #0
   25dc4:	beq	25f50 <flatcc_builder_embed_buffer@@Base+0x1c0>
   25dc8:	cmp	r4, #4
   25dcc:	movcc	r4, #4
   25dd0:	cmp	r1, r4
   25dd4:	movcs	r4, r1
   25dd8:	cmp	r2, #0
   25ddc:	bne	25e44 <flatcc_builder_embed_buffer@@Base+0xb4>
   25de0:	ldr	r9, [r5, #140]	; 0x8c
   25de4:	sub	r1, r1, #1
   25de8:	ands	r1, r1, r9
   25dec:	beq	25e44 <flatcc_builder_embed_buffer@@Base+0xb4>
   25df0:	add	r3, r9, r1
   25df4:	ldr	sl, [pc, #420]	; 25fa0 <flatcc_builder_embed_buffer@@Base+0x210>
   25df8:	mov	r2, #1
   25dfc:	cmp	r9, r3
   25e00:	str	r1, [sp, #16]
   25e04:	str	r1, [sp, #28]
   25e08:	str	sl, [sp, #24]
   25e0c:	str	r3, [r5, #140]	; 0x8c
   25e10:	str	r2, [sp, #20]
   25e14:	bgt	25f74 <flatcc_builder_embed_buffer@@Base+0x1e4>
   25e18:	ldr	r0, [r5, #36]	; 0x24
   25e1c:	mov	r3, r9
   25e20:	str	r1, [sp]
   25e24:	add	r1, sp, #24
   25e28:	ldr	fp, [r5, #44]	; 0x2c
   25e2c:	blx	fp
   25e30:	cmp	r0, #0
   25e34:	bne	25f78 <flatcc_builder_embed_buffer@@Base+0x1e8>
   25e38:	cmn	r9, #1
   25e3c:	beq	25f8c <flatcc_builder_embed_buffer@@Base+0x1fc>
   25e40:	ldr	r2, [r5, #152]	; 0x98
   25e44:	ldr	r1, [r5, #136]	; 0x88
   25e48:	cmp	r6, #0
   25e4c:	movne	r6, #4
   25e50:	moveq	r6, #0
   25e54:	sub	r3, r1, r7
   25e58:	sub	r6, r3, r6
   25e5c:	sub	r4, r4, #1
   25e60:	and	r4, r4, r6
   25e64:	mov	r3, #0
   25e68:	add	r0, r7, r4
   25e6c:	cmp	r2, #0
   25e70:	str	r0, [sp, #12]
   25e74:	str	r3, [sp, #16]
   25e78:	str	r3, [sp, #20]
   25e7c:	bne	25f28 <flatcc_builder_embed_buffer@@Base+0x198>
   25e80:	mov	r3, r2
   25e84:	mov	ip, #2
   25e88:	mov	r0, #1
   25e8c:	cmp	r7, #0
   25e90:	beq	25ebc <flatcc_builder_embed_buffer@@Base+0x12c>
   25e94:	add	r2, r2, #1
   25e98:	add	lr, sp, #88	; 0x58
   25e9c:	add	r2, lr, r2, lsl #3
   25ea0:	add	r3, r3, r7
   25ea4:	str	r3, [sp, #16]
   25ea8:	str	r8, [r2, #-72]	; 0xffffffb8
   25eac:	str	r7, [r2, #-68]	; 0xffffffbc
   25eb0:	mov	r2, r0
   25eb4:	str	r0, [sp, #20]
   25eb8:	mov	r0, ip
   25ebc:	cmp	r4, #0
   25ec0:	beq	25eec <flatcc_builder_embed_buffer@@Base+0x15c>
   25ec4:	add	r2, r2, #1
   25ec8:	add	ip, sp, #88	; 0x58
   25ecc:	add	ip, ip, r2, lsl #3
   25ed0:	ldr	lr, [pc, #200]	; 25fa0 <flatcc_builder_embed_buffer@@Base+0x210>
   25ed4:	mov	r2, r0
   25ed8:	add	r3, r3, r4
   25edc:	str	r3, [sp, #16]
   25ee0:	str	r4, [ip, #-68]	; 0xffffffbc
   25ee4:	str	lr, [ip, #-72]	; 0xffffffb8
   25ee8:	str	r0, [sp, #20]
   25eec:	sub	r4, r1, r3
   25ef0:	cmp	r1, r4
   25ef4:	ble	25f5c <flatcc_builder_embed_buffer@@Base+0x1cc>
   25ef8:	ldr	r0, [r5, #36]	; 0x24
   25efc:	add	r1, sp, #24
   25f00:	str	r3, [sp]
   25f04:	mov	r3, r4
   25f08:	ldr	r6, [r5, #44]	; 0x2c
   25f0c:	blx	r6
   25f10:	cmp	r0, #0
   25f14:	bne	25f60 <flatcc_builder_embed_buffer@@Base+0x1d0>
   25f18:	mov	r0, r4
   25f1c:	str	r4, [r5, #136]	; 0x88
   25f20:	add	sp, sp, #92	; 0x5c
   25f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25f28:	mov	r3, #4
   25f2c:	add	r0, sp, #12
   25f30:	mov	r2, #1
   25f34:	str	r0, [sp, #24]
   25f38:	str	r3, [sp, #16]
   25f3c:	str	r3, [sp, #28]
   25f40:	str	r2, [sp, #20]
   25f44:	mov	ip, #3
   25f48:	mov	r0, #2
   25f4c:	b	25e8c <flatcc_builder_embed_buffer@@Base+0xfc>
   25f50:	cmp	r4, #4
   25f54:	movcc	r4, #4
   25f58:	b	25e44 <flatcc_builder_embed_buffer@@Base+0xb4>
   25f5c:	bl	147f4 <__assert_fail@plt+0x1dc>
   25f60:	ldr	r3, [pc, #60]	; 25fa4 <flatcc_builder_embed_buffer@@Base+0x214>
   25f64:	ldr	r2, [pc, #60]	; 25fa8 <flatcc_builder_embed_buffer@@Base+0x218>
   25f68:	ldr	r1, [pc, #60]	; 25fac <flatcc_builder_embed_buffer@@Base+0x21c>
   25f6c:	ldr	r0, [pc, #60]	; 25fb0 <flatcc_builder_embed_buffer@@Base+0x220>
   25f70:	bl	14618 <__assert_fail@plt>
   25f74:	bl	147cc <__assert_fail@plt+0x1b4>
   25f78:	ldr	r3, [pc, #52]	; 25fb4 <flatcc_builder_embed_buffer@@Base+0x224>
   25f7c:	ldr	r2, [pc, #52]	; 25fb8 <flatcc_builder_embed_buffer@@Base+0x228>
   25f80:	ldr	r1, [pc, #36]	; 25fac <flatcc_builder_embed_buffer@@Base+0x21c>
   25f84:	ldr	r0, [pc, #36]	; 25fb0 <flatcc_builder_embed_buffer@@Base+0x220>
   25f88:	bl	14618 <__assert_fail@plt>
   25f8c:	add	r3, sl, #608	; 0x260
   25f90:	ldr	r2, [pc, #36]	; 25fbc <flatcc_builder_embed_buffer@@Base+0x22c>
   25f94:	ldr	r1, [pc, #16]	; 25fac <flatcc_builder_embed_buffer@@Base+0x21c>
   25f98:	ldr	r0, [pc, #16]	; 25fb0 <flatcc_builder_embed_buffer@@Base+0x220>
   25f9c:	bl	14618 <__assert_fail@plt>
   25fa0:	andeq	r4, r4, ip, asr #15
   25fa4:	andeq	r4, r4, r0, asr r7
   25fa8:	andeq	r0, r0, fp, lsl #5
   25fac:	andeq	r4, r4, r4, lsl #29
   25fb0:	andeq	r4, r4, r4, asr #30
   25fb4:	andeq	r4, r4, r4, asr #14
   25fb8:	andeq	r0, r0, r5, lsr #5
   25fbc:			; <UNDEFINED> instruction: 0x000002be

00025fc0 <flatcc_builder_create_buffer@@Base>:
   25fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25fc4:	sub	sp, sp, #100	; 0x64
   25fc8:	mov	ip, #0
   25fcc:	ldr	r5, [sp, #140]	; 0x8c
   25fd0:	cmp	r2, #0
   25fd4:	mov	r6, r0
   25fd8:	mov	r8, r1
   25fdc:	mov	sl, r3
   25fe0:	and	r7, r5, #1
   25fe4:	str	ip, [sp, #20]
   25fe8:	ldrh	r4, [sp, #136]	; 0x88
   25fec:	bne	25ffc <flatcc_builder_create_buffer@@Base+0x3c>
   25ff0:	ldrh	r2, [r0, #132]	; 0x84
   25ff4:	cmp	r2, ip
   25ff8:	beq	26208 <flatcc_builder_create_buffer@@Base+0x248>
   25ffc:	cmp	r4, #4
   26000:	movcc	r4, #4
   26004:	cmp	r2, r4
   26008:	movcs	r4, r2
   2600c:	cmp	r7, #0
   26010:	bne	26074 <flatcc_builder_create_buffer@@Base+0xb4>
   26014:	ldr	r9, [r6, #140]	; 0x8c
   26018:	sub	r2, r2, #1
   2601c:	ands	r3, r2, r9
   26020:	beq	26074 <flatcc_builder_create_buffer@@Base+0xb4>
   26024:	add	r1, r9, r3
   26028:	ldr	fp, [pc, #584]	; 26278 <flatcc_builder_create_buffer@@Base+0x2b8>
   2602c:	mov	r2, #1
   26030:	cmp	r9, r1
   26034:	str	r3, [sp, #24]
   26038:	str	r3, [sp, #36]	; 0x24
   2603c:	str	fp, [sp, #32]
   26040:	str	r1, [r6, #140]	; 0x8c
   26044:	str	r2, [sp, #28]
   26048:	bgt	26260 <flatcc_builder_create_buffer@@Base+0x2a0>
   2604c:	ldr	r0, [r6, #36]	; 0x24
   26050:	add	r1, sp, #32
   26054:	str	r3, [sp]
   26058:	mov	r3, r9
   2605c:	ldr	ip, [r6, #44]	; 0x2c
   26060:	blx	ip
   26064:	cmp	r0, #0
   26068:	bne	26264 <flatcc_builder_create_buffer@@Base+0x2a4>
   2606c:	cmn	r9, #1
   26070:	beq	26220 <flatcc_builder_create_buffer@@Base+0x260>
   26074:	ldrh	r3, [r6, #128]	; 0x80
   26078:	ldr	r0, [r6, #136]	; 0x88
   2607c:	uxtb	lr, r7
   26080:	cmp	r3, r4
   26084:	strhcc	r4, [r6, #128]	; 0x80
   26088:	cmp	r8, #0
   2608c:	ldreq	r1, [sp, #20]
   26090:	ldrne	r1, [r8]
   26094:	ldrne	r3, [r8]
   26098:	strne	r3, [sp, #20]
   2609c:	cmp	r1, #0
   260a0:	movne	r1, #4
   260a4:	moveq	r1, #0
   260a8:	ands	r5, r5, #2
   260ac:	bne	261d0 <flatcc_builder_create_buffer@@Base+0x210>
   260b0:	sub	r3, r4, #1
   260b4:	sub	r4, r0, #4
   260b8:	cmp	lr, #0
   260bc:	sub	r4, r4, r1
   260c0:	and	r4, r4, r3
   260c4:	moveq	r8, #3
   260c8:	moveq	ip, #2
   260cc:	moveq	r2, #1
   260d0:	moveq	r3, #4
   260d4:	bne	261e0 <flatcc_builder_create_buffer@@Base+0x220>
   260d8:	add	r5, r5, #1
   260dc:	add	r9, sp, #96	; 0x60
   260e0:	add	r5, r9, r5, lsl #3
   260e4:	add	fp, sp, #12
   260e8:	mov	r9, #4
   260ec:	cmp	r1, #0
   260f0:	str	r3, [sp, #24]
   260f4:	str	fp, [r5, #-72]	; 0xffffffb8
   260f8:	str	r9, [r5, #-68]	; 0xffffffbc
   260fc:	str	r2, [sp, #28]
   26100:	beq	26130 <flatcc_builder_create_buffer@@Base+0x170>
   26104:	add	r2, r2, #1
   26108:	add	r5, sp, #96	; 0x60
   2610c:	add	r2, r5, r2, lsl #3
   26110:	add	r3, r3, r1
   26114:	add	r5, sp, #20
   26118:	str	r3, [sp, #24]
   2611c:	str	r1, [r2, #-68]	; 0xffffffbc
   26120:	str	r5, [r2, #-72]	; 0xffffffb8
   26124:	mov	r2, ip
   26128:	str	ip, [sp, #28]
   2612c:	mov	ip, r8
   26130:	cmp	r4, #0
   26134:	beq	26160 <flatcc_builder_create_buffer@@Base+0x1a0>
   26138:	add	r2, r2, #1
   2613c:	add	r1, sp, #96	; 0x60
   26140:	add	r1, r1, r2, lsl #3
   26144:	ldr	r5, [pc, #300]	; 26278 <flatcc_builder_create_buffer@@Base+0x2b8>
   26148:	mov	r2, ip
   2614c:	add	r3, r3, r4
   26150:	str	r3, [sp, #24]
   26154:	str	r4, [r1, #-68]	; 0xffffffbc
   26158:	str	r5, [r1, #-72]	; 0xffffffb8
   2615c:	str	ip, [sp, #28]
   26160:	sub	r4, r0, r3
   26164:	cmp	lr, #0
   26168:	mov	r1, r4
   2616c:	beq	26214 <flatcc_builder_create_buffer@@Base+0x254>
   26170:	cmp	r7, #0
   26174:	add	r1, r4, #4
   26178:	beq	26214 <flatcc_builder_create_buffer@@Base+0x254>
   2617c:	ldr	ip, [r6, #144]	; 0x90
   26180:	sub	ip, ip, r1
   26184:	sub	sl, sl, r1
   26188:	cmp	r4, r0
   2618c:	str	sl, [sp, #12]
   26190:	str	ip, [sp, #16]
   26194:	bge	26234 <flatcc_builder_create_buffer@@Base+0x274>
   26198:	ldr	r0, [r6, #36]	; 0x24
   2619c:	add	r1, sp, #32
   261a0:	str	r3, [sp]
   261a4:	mov	r3, r4
   261a8:	ldr	r5, [r6, #44]	; 0x2c
   261ac:	blx	r5
   261b0:	cmp	r0, #0
   261b4:	bne	26238 <flatcc_builder_create_buffer@@Base+0x278>
   261b8:	cmp	r4, #0
   261bc:	str	r4, [r6, #136]	; 0x88
   261c0:	beq	2624c <flatcc_builder_create_buffer@@Base+0x28c>
   261c4:	mov	r0, r4
   261c8:	add	sp, sp, #100	; 0x64
   261cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   261d0:	sub	r3, r0, #8
   261d4:	sub	r4, r4, #1
   261d8:	sub	r3, r3, r1
   261dc:	and	r4, r4, r3
   261e0:	add	r3, sp, #16
   261e4:	mov	r8, #4
   261e8:	mov	r5, #1
   261ec:	str	r3, [sp, #32]
   261f0:	str	r8, [sp, #36]	; 0x24
   261f4:	mov	lr, r5
   261f8:	mov	ip, #3
   261fc:	mov	r2, #2
   26200:	mov	r3, #8
   26204:	b	260d8 <flatcc_builder_create_buffer@@Base+0x118>
   26208:	cmp	r4, #4
   2620c:	movcc	r4, #4
   26210:	b	26074 <flatcc_builder_create_buffer@@Base+0xb4>
   26214:	ldr	ip, [r6, #140]	; 0x8c
   26218:	sub	ip, ip, r1
   2621c:	b	26184 <flatcc_builder_create_buffer@@Base+0x1c4>
   26220:	add	r3, fp, #608	; 0x260
   26224:	ldr	r2, [pc, #80]	; 2627c <flatcc_builder_create_buffer@@Base+0x2bc>
   26228:	ldr	r1, [pc, #80]	; 26280 <flatcc_builder_create_buffer@@Base+0x2c0>
   2622c:	ldr	r0, [pc, #80]	; 26284 <flatcc_builder_create_buffer@@Base+0x2c4>
   26230:	bl	14618 <__assert_fail@plt>
   26234:	bl	147f4 <__assert_fail@plt+0x1dc>
   26238:	ldr	r3, [pc, #72]	; 26288 <flatcc_builder_create_buffer@@Base+0x2c8>
   2623c:	ldr	r2, [pc, #72]	; 2628c <flatcc_builder_create_buffer@@Base+0x2cc>
   26240:	ldr	r1, [pc, #56]	; 26280 <flatcc_builder_create_buffer@@Base+0x2c0>
   26244:	ldr	r0, [pc, #56]	; 26284 <flatcc_builder_create_buffer@@Base+0x2c4>
   26248:	bl	14618 <__assert_fail@plt>
   2624c:	ldr	r3, [pc, #60]	; 26290 <flatcc_builder_create_buffer@@Base+0x2d0>
   26250:	mov	r2, #772	; 0x304
   26254:	ldr	r1, [pc, #36]	; 26280 <flatcc_builder_create_buffer@@Base+0x2c0>
   26258:	ldr	r0, [pc, #36]	; 26284 <flatcc_builder_create_buffer@@Base+0x2c4>
   2625c:	bl	14618 <__assert_fail@plt>
   26260:	bl	147cc <__assert_fail@plt+0x1b4>
   26264:	ldr	r3, [pc, #40]	; 26294 <flatcc_builder_create_buffer@@Base+0x2d4>
   26268:	ldr	r2, [pc, #40]	; 26298 <flatcc_builder_create_buffer@@Base+0x2d8>
   2626c:	ldr	r1, [pc, #12]	; 26280 <flatcc_builder_create_buffer@@Base+0x2c0>
   26270:	ldr	r0, [pc, #12]	; 26284 <flatcc_builder_create_buffer@@Base+0x2c4>
   26274:	bl	14618 <__assert_fail@plt>
   26278:	andeq	r4, r4, ip, asr #15
   2627c:			; <UNDEFINED> instruction: 0x000002be
   26280:	andeq	r4, r4, r4, lsl #29
   26284:	andeq	r4, r4, r4, asr #30
   26288:	andeq	r4, r4, r0, asr r7
   2628c:	andeq	r0, r0, fp, lsl #5
   26290:	andeq	r4, r4, ip, lsr sl
   26294:	andeq	r4, r4, r4, asr #14
   26298:	andeq	r0, r0, r5, lsr #5

0002629c <flatcc_builder_create_struct@@Base>:
   2629c:	cmp	r3, #0
   262a0:	push	{r4, r5, r6, lr}
   262a4:	sub	sp, sp, #80	; 0x50
   262a8:	beq	26394 <flatcc_builder_create_struct@@Base+0xf8>
   262ac:	mov	ip, r2
   262b0:	ldrh	r2, [r0, #128]	; 0x80
   262b4:	mov	r5, r0
   262b8:	cmp	r2, r3
   262bc:	strhcc	r3, [r0, #128]	; 0x80
   262c0:	ldr	r0, [r0, #136]	; 0x88
   262c4:	mov	r2, #0
   262c8:	sub	r3, r3, #1
   262cc:	sub	r4, r0, ip
   262d0:	cmp	ip, #0
   262d4:	and	r3, r3, r4
   262d8:	str	r2, [sp, #8]
   262dc:	str	r2, [sp, #12]
   262e0:	bne	26354 <flatcc_builder_create_struct@@Base+0xb8>
   262e4:	cmp	r3, #0
   262e8:	movne	r2, #1
   262ec:	movne	r1, ip
   262f0:	beq	2637c <flatcc_builder_create_struct@@Base+0xe0>
   262f4:	add	r1, r1, #1
   262f8:	add	r4, sp, #80	; 0x50
   262fc:	add	ip, ip, r3
   26300:	add	r1, r4, r1, lsl #3
   26304:	ldr	lr, [pc, #156]	; 263a8 <flatcc_builder_create_struct@@Base+0x10c>
   26308:	sub	r4, r0, ip
   2630c:	str	r3, [r1, #-68]	; 0xffffffbc
   26310:	str	ip, [sp, #8]
   26314:	str	r2, [sp, #12]
   26318:	str	lr, [r1, #-72]	; 0xffffffb8
   2631c:	cmp	r0, r4
   26320:	ble	2637c <flatcc_builder_create_struct@@Base+0xe0>
   26324:	ldr	r0, [r5, #36]	; 0x24
   26328:	mov	r3, r4
   2632c:	str	ip, [sp]
   26330:	add	r1, sp, #16
   26334:	ldr	r6, [r5, #44]	; 0x2c
   26338:	blx	r6
   2633c:	cmp	r0, #0
   26340:	bne	26380 <flatcc_builder_create_struct@@Base+0xe4>
   26344:	mov	r0, r4
   26348:	str	r4, [r5, #136]	; 0x88
   2634c:	add	sp, sp, #80	; 0x50
   26350:	pop	{r4, r5, r6, pc}
   26354:	cmp	r3, r2
   26358:	mov	r2, #1
   2635c:	str	r1, [sp, #16]
   26360:	str	r2, [sp, #12]
   26364:	movne	r1, r2
   26368:	str	ip, [sp, #8]
   2636c:	str	ip, [sp, #20]
   26370:	movne	r2, #2
   26374:	beq	2631c <flatcc_builder_create_struct@@Base+0x80>
   26378:	b	262f4 <flatcc_builder_create_struct@@Base+0x58>
   2637c:	bl	147f4 <__assert_fail@plt+0x1dc>
   26380:	ldr	r3, [pc, #36]	; 263ac <flatcc_builder_create_struct@@Base+0x110>
   26384:	ldr	r2, [pc, #36]	; 263b0 <flatcc_builder_create_struct@@Base+0x114>
   26388:	ldr	r1, [pc, #36]	; 263b4 <flatcc_builder_create_struct@@Base+0x118>
   2638c:	ldr	r0, [pc, #36]	; 263b8 <flatcc_builder_create_struct@@Base+0x11c>
   26390:	bl	14618 <__assert_fail@plt>
   26394:	ldr	r3, [pc, #32]	; 263bc <flatcc_builder_create_struct@@Base+0x120>
   26398:	ldr	r2, [pc, #32]	; 263c0 <flatcc_builder_create_struct@@Base+0x124>
   2639c:	ldr	r1, [pc, #16]	; 263b4 <flatcc_builder_create_struct@@Base+0x118>
   263a0:	ldr	r0, [pc, #28]	; 263c4 <flatcc_builder_create_struct@@Base+0x128>
   263a4:	bl	14618 <__assert_fail@plt>
   263a8:	andeq	r4, r4, ip, asr #15
   263ac:	andeq	r4, r4, r0, asr r7
   263b0:	andeq	r0, r0, fp, lsl #5
   263b4:	andeq	r4, r4, r4, lsl #29
   263b8:	andeq	r4, r4, r4, asr #30
   263bc:	andeq	r4, r4, ip, asr sl
   263c0:	andeq	r0, r0, pc, lsl #6
   263c4:	andeq	r4, r4, ip, lsl #31

000263c8 <flatcc_builder_start_buffer@@Base>:
   263c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   263cc:	mov	r4, r0
   263d0:	ldr	r0, [r0, #156]	; 0x9c
   263d4:	ldr	ip, [r4, #160]	; 0xa0
   263d8:	mov	r5, r1
   263dc:	add	r1, r0, #1
   263e0:	cmp	r1, ip
   263e4:	sub	sp, sp, #8
   263e8:	mov	r7, r2
   263ec:	mov	r6, r3
   263f0:	str	r1, [r4, #156]	; 0x9c
   263f4:	ldrh	r8, [r4, #128]	; 0x80
   263f8:	ble	26468 <flatcc_builder_start_buffer@@Base+0xa0>
   263fc:	ldr	r3, [r4, #176]	; 0xb0
   26400:	cmp	r3, #0
   26404:	cmpgt	r1, r3
   26408:	movgt	r3, #1
   2640c:	movle	r3, #0
   26410:	bgt	26544 <flatcc_builder_start_buffer@@Base+0x17c>
   26414:	add	r0, r0, r0, lsl #3
   26418:	ldr	r1, [r4, #88]	; 0x58
   2641c:	lsl	r9, r0, #2
   26420:	add	r2, r9, #36	; 0x24
   26424:	cmp	r2, r1
   26428:	bhi	26520 <flatcc_builder_start_buffer@@Base+0x158>
   2642c:	ldr	r3, [r4, #84]	; 0x54
   26430:	add	r3, r3, r9
   26434:	cmp	r3, #0
   26438:	str	r3, [r4, #32]
   2643c:	beq	26544 <flatcc_builder_start_buffer@@Base+0x17c>
   26440:	ldr	r2, [r4, #88]	; 0x58
   26444:	ldr	r0, [pc, #256]	; 2654c <flatcc_builder_start_buffer@@Base+0x184>
   26448:	ldr	r1, [r4, #176]	; 0xb0
   2644c:	umull	r0, r2, r0, r2
   26450:	lsr	r2, r2, #3
   26454:	cmp	r1, #0
   26458:	cmpgt	r2, r1
   2645c:	str	r2, [r4, #160]	; 0xa0
   26460:	strgt	r1, [r4, #160]	; 0xa0
   26464:	b	26474 <flatcc_builder_start_buffer@@Base+0xac>
   26468:	ldr	r3, [r4, #32]
   2646c:	add	r3, r3, #36	; 0x24
   26470:	str	r3, [r4, #32]
   26474:	ldr	r0, [r4, #20]
   26478:	ldr	r1, [r4, #28]
   2647c:	ldrh	lr, [r4, #130]	; 0x82
   26480:	ldrh	ip, [r4, #132]	; 0x84
   26484:	add	r2, r0, r1
   26488:	add	r2, r2, #7
   2648c:	str	r0, [r3, #8]
   26490:	strh	lr, [r3, #12]
   26494:	bic	r2, r2, #7
   26498:	strh	r8, [r4, #130]	; 0x82
   2649c:	mvn	lr, #3
   264a0:	str	r1, [r3]
   264a4:	mov	r0, #0
   264a8:	mov	r1, #1
   264ac:	str	lr, [r3, #4]
   264b0:	str	r2, [r4, #28]
   264b4:	str	r0, [r4, #20]
   264b8:	strh	r1, [r4, #128]	; 0x80
   264bc:	strh	ip, [r3, #34]	; 0x22
   264c0:	ldrh	r2, [r4, #164]	; 0xa4
   264c4:	strh	r7, [r4, #132]	; 0x84
   264c8:	ldr	ip, [pc, #128]	; 26550 <flatcc_builder_start_buffer@@Base+0x188>
   264cc:	strh	r2, [r3, #32]
   264d0:	ldr	r2, [r4, #144]	; 0x90
   264d4:	strh	r6, [r4, #164]	; 0xa4
   264d8:	str	r2, [r3, #20]
   264dc:	ldr	r2, [r4, #152]	; 0x98
   264e0:	cmp	r5, r0
   264e4:	str	r2, [r3, #28]
   264e8:	ldr	r2, [r4, #148]	; 0x94
   264ec:	ldr	lr, [r4, #136]	; 0x88
   264f0:	moveq	r5, ip
   264f4:	ldr	ip, [r4, #168]	; 0xa8
   264f8:	add	r6, r2, r1
   264fc:	str	r2, [r4, #152]	; 0x98
   26500:	str	r6, [r4, #148]	; 0x94
   26504:	str	lr, [r4, #144]	; 0x90
   26508:	str	ip, [r3, #16]
   2650c:	ldr	r2, [r5]
   26510:	str	r2, [r4, #168]	; 0xa8
   26514:	strh	r1, [r3, #14]
   26518:	add	sp, sp, #8
   2651c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26520:	mov	r1, #4
   26524:	ldr	r0, [r4, #40]	; 0x28
   26528:	str	r1, [sp]
   2652c:	add	r1, r4, #84	; 0x54
   26530:	ldr	sl, [r4, #48]	; 0x30
   26534:	blx	sl
   26538:	cmp	r0, #0
   2653c:	beq	2642c <flatcc_builder_start_buffer@@Base+0x64>
   26540:	bl	147a8 <__assert_fail@plt+0x190>
   26544:	mvn	r0, #0
   26548:	b	26518 <flatcc_builder_start_buffer@@Base+0x150>
   2654c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   26550:	andeq	r4, r4, ip, asr #15

00026554 <flatcc_builder_end_buffer@@Base>:
   26554:	ldr	r3, [r0, #32]
   26558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2655c:	sub	sp, sp, #100	; 0x64
   26560:	ldrh	r5, [r0, #164]	; 0xa4
   26564:	ldrh	r3, [r3, #14]
   26568:	ldr	r2, [r0, #152]	; 0x98
   2656c:	and	r5, r5, #2
   26570:	cmp	r2, #0
   26574:	orrne	r5, r5, #1
   26578:	cmp	r3, #1
   2657c:	bne	26868 <flatcc_builder_end_buffer@@Base+0x314>
   26580:	ldrh	r3, [r0, #132]	; 0x84
   26584:	ldrh	r2, [r0, #128]	; 0x80
   26588:	mov	r9, r1
   2658c:	mov	r1, #0
   26590:	cmp	r3, r2
   26594:	movhi	r2, r3
   26598:	strhhi	r3, [r0, #128]	; 0x80
   2659c:	cmp	r3, #0
   265a0:	mov	r4, r0
   265a4:	str	r1, [sp, #20]
   265a8:	and	r7, r5, #1
   265ac:	beq	26814 <flatcc_builder_end_buffer@@Base+0x2c0>
   265b0:	cmp	r3, #4
   265b4:	movcc	r6, #4
   265b8:	movcs	r6, r3
   265bc:	cmp	r6, r2
   265c0:	movcc	r6, r2
   265c4:	cmp	r7, r1
   265c8:	bne	26630 <flatcc_builder_end_buffer@@Base+0xdc>
   265cc:	ldr	r8, [r0, #140]	; 0x8c
   265d0:	sub	r3, r3, #1
   265d4:	ands	r3, r3, r8
   265d8:	beq	26630 <flatcc_builder_end_buffer@@Base+0xdc>
   265dc:	add	r1, r8, r3
   265e0:	ldr	sl, [pc, #748]	; 268d4 <flatcc_builder_end_buffer@@Base+0x380>
   265e4:	mov	r2, #1
   265e8:	cmp	r8, r1
   265ec:	str	r3, [sp, #24]
   265f0:	str	r3, [sp, #36]	; 0x24
   265f4:	str	sl, [sp, #32]
   265f8:	str	r1, [r0, #140]	; 0x8c
   265fc:	str	r2, [sp, #28]
   26600:	bgt	268bc <flatcc_builder_end_buffer@@Base+0x368>
   26604:	ldr	r0, [r0, #36]	; 0x24
   26608:	add	r1, sp, #32
   2660c:	str	r3, [sp]
   26610:	mov	r3, r8
   26614:	ldr	fp, [r4, #44]	; 0x2c
   26618:	blx	fp
   2661c:	cmp	r0, #0
   26620:	bne	268c0 <flatcc_builder_end_buffer@@Base+0x36c>
   26624:	cmn	r8, #1
   26628:	beq	268a8 <flatcc_builder_end_buffer@@Base+0x354>
   2662c:	ldrh	r2, [r4, #128]	; 0x80
   26630:	ldr	r3, [r4, #168]	; 0xa8
   26634:	cmp	r2, r6
   26638:	strhcc	r6, [r4, #128]	; 0x80
   2663c:	cmp	r3, #0
   26640:	movne	r1, #4
   26644:	moveq	r1, #0
   26648:	ands	r5, r5, #2
   2664c:	uxtb	ip, r7
   26650:	str	r3, [sp, #20]
   26654:	ldr	r0, [r4, #136]	; 0x88
   26658:	bne	26824 <flatcc_builder_end_buffer@@Base+0x2d0>
   2665c:	sub	r3, r6, #1
   26660:	sub	r6, r0, #4
   26664:	cmp	ip, #0
   26668:	sub	r6, r6, r1
   2666c:	and	r6, r6, r3
   26670:	moveq	r8, #3
   26674:	moveq	lr, #2
   26678:	moveq	r2, #1
   2667c:	moveq	r3, #4
   26680:	bne	26834 <flatcc_builder_end_buffer@@Base+0x2e0>
   26684:	add	r5, r5, #1
   26688:	add	sl, sp, #96	; 0x60
   2668c:	add	r5, sl, r5, lsl #3
   26690:	add	fp, sp, #12
   26694:	mov	sl, #4
   26698:	cmp	r1, #0
   2669c:	str	r3, [sp, #24]
   266a0:	str	fp, [r5, #-72]	; 0xffffffb8
   266a4:	str	sl, [r5, #-68]	; 0xffffffbc
   266a8:	str	r2, [sp, #28]
   266ac:	beq	266dc <flatcc_builder_end_buffer@@Base+0x188>
   266b0:	add	r2, r2, #1
   266b4:	add	r5, sp, #96	; 0x60
   266b8:	add	r2, r5, r2, lsl #3
   266bc:	add	r3, r3, r1
   266c0:	add	r5, sp, #20
   266c4:	str	r3, [sp, #24]
   266c8:	str	r1, [r2, #-68]	; 0xffffffbc
   266cc:	str	r5, [r2, #-72]	; 0xffffffb8
   266d0:	mov	r2, lr
   266d4:	str	lr, [sp, #28]
   266d8:	mov	lr, r8
   266dc:	cmp	r6, #0
   266e0:	beq	2670c <flatcc_builder_end_buffer@@Base+0x1b8>
   266e4:	add	r2, r2, #1
   266e8:	add	r1, sp, #96	; 0x60
   266ec:	add	r1, r1, r2, lsl #3
   266f0:	ldr	r5, [pc, #476]	; 268d4 <flatcc_builder_end_buffer@@Base+0x380>
   266f4:	mov	r2, lr
   266f8:	add	r3, r3, r6
   266fc:	str	r3, [sp, #24]
   26700:	str	r6, [r1, #-68]	; 0xffffffbc
   26704:	str	r5, [r1, #-72]	; 0xffffffb8
   26708:	str	lr, [sp, #28]
   2670c:	sub	r5, r0, r3
   26710:	cmp	ip, #0
   26714:	mov	r1, r5
   26718:	beq	2685c <flatcc_builder_end_buffer@@Base+0x308>
   2671c:	cmp	r7, #0
   26720:	add	r1, r5, #4
   26724:	beq	2685c <flatcc_builder_end_buffer@@Base+0x308>
   26728:	ldr	ip, [r4, #144]	; 0x90
   2672c:	sub	ip, ip, r1
   26730:	sub	r9, r9, r1
   26734:	cmp	r5, r0
   26738:	str	r9, [sp, #12]
   2673c:	str	ip, [sp, #16]
   26740:	bge	2687c <flatcc_builder_end_buffer@@Base+0x328>
   26744:	ldr	r0, [r4, #36]	; 0x24
   26748:	add	r1, sp, #32
   2674c:	str	r3, [sp]
   26750:	mov	r3, r5
   26754:	ldr	r6, [r4, #44]	; 0x2c
   26758:	blx	r6
   2675c:	subs	r1, r0, #0
   26760:	bne	26880 <flatcc_builder_end_buffer@@Base+0x32c>
   26764:	cmp	r5, #0
   26768:	str	r5, [r4, #136]	; 0x88
   2676c:	beq	26894 <flatcc_builder_end_buffer@@Base+0x340>
   26770:	ldr	r3, [r4, #32]
   26774:	ldr	r2, [r4, #20]
   26778:	ldr	r0, [r4, #16]
   2677c:	ldr	ip, [r3, #20]
   26780:	str	ip, [r4, #144]	; 0x90
   26784:	ldr	ip, [r3, #28]
   26788:	str	ip, [r4, #152]	; 0x98
   2678c:	ldr	ip, [r3, #16]
   26790:	str	ip, [r4, #168]	; 0xa8
   26794:	ldrh	r3, [r3, #32]
   26798:	strh	r3, [r4, #164]	; 0xa4
   2679c:	bl	145c4 <memset@plt>
   267a0:	ldr	r3, [r4, #32]
   267a4:	ldr	r2, [r4, #64]	; 0x40
   267a8:	ldrh	lr, [r4, #130]	; 0x82
   267ac:	ldr	ip, [r3]
   267b0:	ldr	r1, [r3, #4]
   267b4:	ldrh	r0, [r4, #128]	; 0x80
   267b8:	sub	r2, r2, ip
   267bc:	cmp	r2, r1
   267c0:	movcs	r2, r1
   267c4:	cmp	r0, lr
   267c8:	ldr	r0, [r4, #60]	; 0x3c
   267cc:	ldr	r6, [r3, #8]
   267d0:	str	r2, [r4, #24]
   267d4:	add	r2, r0, ip
   267d8:	str	r2, [r4, #16]
   267dc:	str	r6, [r4, #20]
   267e0:	ldr	r2, [r4, #156]	; 0x9c
   267e4:	str	ip, [r4, #28]
   267e8:	str	r1, [r3, #4]
   267ec:	strhcc	lr, [r4, #128]	; 0x80
   267f0:	ldrh	r1, [r3, #12]
   267f4:	sub	r2, r2, #1
   267f8:	sub	r3, r3, #36	; 0x24
   267fc:	mov	r0, r5
   26800:	str	r2, [r4, #156]	; 0x9c
   26804:	strh	r1, [r4, #130]	; 0x82
   26808:	str	r3, [r4, #32]
   2680c:	add	sp, sp, #100	; 0x64
   26810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26814:	cmp	r2, #4
   26818:	movcs	r6, r2
   2681c:	movcc	r6, #4
   26820:	b	26630 <flatcc_builder_end_buffer@@Base+0xdc>
   26824:	sub	r3, r0, #8
   26828:	sub	r6, r6, #1
   2682c:	sub	r3, r3, r1
   26830:	and	r6, r6, r3
   26834:	add	r3, sp, #16
   26838:	mov	r8, #4
   2683c:	mov	r5, #1
   26840:	str	r3, [sp, #32]
   26844:	str	r8, [sp, #36]	; 0x24
   26848:	mov	ip, r5
   2684c:	mov	lr, #3
   26850:	mov	r2, #2
   26854:	mov	r3, #8
   26858:	b	26684 <flatcc_builder_end_buffer@@Base+0x130>
   2685c:	ldr	ip, [r4, #140]	; 0x8c
   26860:	sub	ip, ip, r1
   26864:	b	26730 <flatcc_builder_end_buffer@@Base+0x1dc>
   26868:	ldr	r3, [pc, #104]	; 268d8 <flatcc_builder_end_buffer@@Base+0x384>
   2686c:	ldr	r2, [pc, #104]	; 268dc <flatcc_builder_end_buffer@@Base+0x388>
   26870:	ldr	r1, [pc, #104]	; 268e0 <flatcc_builder_end_buffer@@Base+0x38c>
   26874:	ldr	r0, [pc, #104]	; 268e4 <flatcc_builder_end_buffer@@Base+0x390>
   26878:	bl	14618 <__assert_fail@plt>
   2687c:	bl	147f4 <__assert_fail@plt+0x1dc>
   26880:	ldr	r3, [pc, #96]	; 268e8 <flatcc_builder_end_buffer@@Base+0x394>
   26884:	ldr	r2, [pc, #96]	; 268ec <flatcc_builder_end_buffer@@Base+0x398>
   26888:	ldr	r1, [pc, #80]	; 268e0 <flatcc_builder_end_buffer@@Base+0x38c>
   2688c:	ldr	r0, [pc, #92]	; 268f0 <flatcc_builder_end_buffer@@Base+0x39c>
   26890:	bl	14618 <__assert_fail@plt>
   26894:	ldr	r3, [pc, #88]	; 268f4 <flatcc_builder_end_buffer@@Base+0x3a0>
   26898:	mov	r2, #772	; 0x304
   2689c:	ldr	r1, [pc, #60]	; 268e0 <flatcc_builder_end_buffer@@Base+0x38c>
   268a0:	ldr	r0, [pc, #72]	; 268f0 <flatcc_builder_end_buffer@@Base+0x39c>
   268a4:	bl	14618 <__assert_fail@plt>
   268a8:	add	r3, sl, #608	; 0x260
   268ac:	ldr	r2, [pc, #68]	; 268f8 <flatcc_builder_end_buffer@@Base+0x3a4>
   268b0:	ldr	r1, [pc, #40]	; 268e0 <flatcc_builder_end_buffer@@Base+0x38c>
   268b4:	ldr	r0, [pc, #52]	; 268f0 <flatcc_builder_end_buffer@@Base+0x39c>
   268b8:	bl	14618 <__assert_fail@plt>
   268bc:	bl	147cc <__assert_fail@plt+0x1b4>
   268c0:	ldr	r3, [pc, #52]	; 268fc <flatcc_builder_end_buffer@@Base+0x3a8>
   268c4:	ldr	r2, [pc, #52]	; 26900 <flatcc_builder_end_buffer@@Base+0x3ac>
   268c8:	ldr	r1, [pc, #16]	; 268e0 <flatcc_builder_end_buffer@@Base+0x38c>
   268cc:	ldr	r0, [pc, #28]	; 268f0 <flatcc_builder_end_buffer@@Base+0x39c>
   268d0:	bl	14618 <__assert_fail@plt>
   268d4:	andeq	r4, r4, ip, asr #15
   268d8:	andeq	r4, r4, ip, ror sl
   268dc:	andeq	r0, r0, r6, asr #6
   268e0:	andeq	r4, r4, r4, lsl #29
   268e4:	muleq	r4, r8, pc	; <UNPREDICTABLE>
   268e8:	andeq	r4, r4, r0, asr r7
   268ec:	andeq	r0, r0, fp, lsl #5
   268f0:	andeq	r4, r4, r4, asr #30
   268f4:	andeq	r4, r4, ip, lsr sl
   268f8:			; <UNDEFINED> instruction: 0x000002be
   268fc:	andeq	r4, r4, r4, asr #14
   26900:	andeq	r0, r0, r5, lsr #5

00026904 <flatcc_builder_start_struct@@Base>:
   26904:	push	{r4, r5, r6, r7, r8, lr}
   26908:	mov	r4, r0
   2690c:	ldr	r0, [r0, #156]	; 0x9c
   26910:	ldr	r3, [r4, #160]	; 0xa0
   26914:	mov	r6, r1
   26918:	add	r1, r0, #1
   2691c:	cmp	r1, r3
   26920:	sub	sp, sp, #8
   26924:	mov	r5, r2
   26928:	str	r1, [r4, #156]	; 0x9c
   2692c:	ble	2699c <flatcc_builder_start_struct@@Base+0x98>
   26930:	ldr	r3, [r4, #176]	; 0xb0
   26934:	cmp	r3, #0
   26938:	cmpgt	r1, r3
   2693c:	movgt	r3, #1
   26940:	movle	r3, #0
   26944:	bgt	26aac <flatcc_builder_start_struct@@Base+0x1a8>
   26948:	add	r0, r0, r0, lsl #3
   2694c:	ldr	r1, [r4, #88]	; 0x58
   26950:	lsl	r7, r0, #2
   26954:	add	r2, r7, #36	; 0x24
   26958:	cmp	r2, r1
   2695c:	bhi	26a88 <flatcc_builder_start_struct@@Base+0x184>
   26960:	ldr	r3, [r4, #84]	; 0x54
   26964:	add	r3, r3, r7
   26968:	cmp	r3, #0
   2696c:	str	r3, [r4, #32]
   26970:	beq	26aac <flatcc_builder_start_struct@@Base+0x1a8>
   26974:	ldr	r2, [r4, #88]	; 0x58
   26978:	ldr	r0, [pc, #308]	; 26ab4 <flatcc_builder_start_struct@@Base+0x1b0>
   2697c:	ldr	r1, [r4, #176]	; 0xb0
   26980:	umull	r0, r2, r0, r2
   26984:	lsr	r2, r2, #3
   26988:	cmp	r1, #0
   2698c:	cmpgt	r2, r1
   26990:	str	r2, [r4, #160]	; 0xa0
   26994:	strgt	r1, [r4, #160]	; 0xa0
   26998:	b	269a8 <flatcc_builder_start_struct@@Base+0xa4>
   2699c:	ldr	r3, [r4, #32]
   269a0:	add	r3, r3, #36	; 0x24
   269a4:	str	r3, [r4, #32]
   269a8:	ldr	lr, [r4, #20]
   269ac:	ldr	ip, [r4, #28]
   269b0:	ldr	r1, [r4, #64]	; 0x40
   269b4:	add	r2, lr, ip
   269b8:	add	r2, r2, #7
   269bc:	ldrh	r7, [r4, #130]	; 0x82
   269c0:	bic	r2, r2, #7
   269c4:	sub	r1, r1, r2
   269c8:	ldr	r0, [r4, #60]	; 0x3c
   269cc:	cmn	r1, #4
   269d0:	str	lr, [r3, #8]
   269d4:	mvn	lr, #3
   269d8:	strh	r7, [r3, #12]
   269dc:	movhi	r1, lr
   269e0:	strh	r5, [r4, #130]	; 0x82
   269e4:	str	ip, [r3]
   269e8:	mov	r5, #0
   269ec:	mov	ip, #2
   269f0:	str	lr, [r3, #4]
   269f4:	add	r0, r0, r2
   269f8:	str	r5, [r4, #20]
   269fc:	str	r2, [r4, #28]
   26a00:	mvn	r5, #3
   26a04:	strh	ip, [r3, #14]
   26a08:	strls	r1, [r4, #24]
   26a0c:	strhi	lr, [r4, #24]
   26a10:	cmp	r6, r1
   26a14:	str	r0, [r4, #16]
   26a18:	str	r5, [r3, #4]
   26a1c:	str	r6, [r4, #20]
   26a20:	bcs	26a2c <flatcc_builder_start_struct@@Base+0x128>
   26a24:	add	sp, sp, #8
   26a28:	pop	{r4, r5, r6, r7, r8, pc}
   26a2c:	add	r6, r6, #1
   26a30:	mov	r3, #1
   26a34:	ldr	r0, [r4, #40]	; 0x28
   26a38:	add	r2, r6, r2
   26a3c:	str	r3, [sp]
   26a40:	add	r1, r4, #60	; 0x3c
   26a44:	ldr	r6, [r4, #48]	; 0x30
   26a48:	blx	r6
   26a4c:	cmp	r0, #0
   26a50:	bne	26aac <flatcc_builder_start_struct@@Base+0x1a8>
   26a54:	ldr	r2, [r4, #28]
   26a58:	ldr	r3, [r4, #64]	; 0x40
   26a5c:	ldr	r0, [r4, #60]	; 0x3c
   26a60:	sub	r3, r3, r2
   26a64:	ldr	r1, [r4, #32]
   26a68:	cmp	r3, r5
   26a6c:	add	r0, r0, r2
   26a70:	movhi	r3, r5
   26a74:	str	r3, [r4, #24]
   26a78:	str	r0, [r4, #16]
   26a7c:	str	r5, [r1, #4]
   26a80:	add	sp, sp, #8
   26a84:	pop	{r4, r5, r6, r7, r8, pc}
   26a88:	mov	r1, #4
   26a8c:	ldr	r0, [r4, #40]	; 0x28
   26a90:	str	r1, [sp]
   26a94:	add	r1, r4, #84	; 0x54
   26a98:	ldr	r8, [r4, #48]	; 0x30
   26a9c:	blx	r8
   26aa0:	cmp	r0, #0
   26aa4:	beq	26960 <flatcc_builder_start_struct@@Base+0x5c>
   26aa8:	bl	147a8 <__assert_fail@plt+0x190>
   26aac:	mov	r0, #0
   26ab0:	b	26a24 <flatcc_builder_start_struct@@Base+0x120>
   26ab4:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00026ab8 <flatcc_builder_struct_edit@@Base>:
   26ab8:	ldr	r0, [r0, #16]
   26abc:	bx	lr

00026ac0 <flatcc_builder_end_struct@@Base>:
   26ac0:	ldr	r3, [r0, #32]
   26ac4:	push	{r4, r5, r6, lr}
   26ac8:	sub	sp, sp, #80	; 0x50
   26acc:	ldrh	r3, [r3, #14]
   26ad0:	cmp	r3, #2
   26ad4:	bne	26c60 <flatcc_builder_end_struct@@Base+0x1a0>
   26ad8:	ldrh	r3, [r0, #130]	; 0x82
   26adc:	mov	r4, r0
   26ae0:	ldr	r0, [r0, #16]
   26ae4:	cmp	r3, #0
   26ae8:	ldr	r1, [r4, #20]
   26aec:	beq	26c4c <flatcc_builder_end_struct@@Base+0x18c>
   26af0:	ldrh	r2, [r4, #128]	; 0x80
   26af4:	ldr	ip, [r4, #136]	; 0x88
   26af8:	cmp	r2, r3
   26afc:	strhcc	r3, [r4, #128]	; 0x80
   26b00:	mov	r2, #0
   26b04:	sub	r3, r3, #1
   26b08:	sub	r5, ip, r1
   26b0c:	cmp	r1, #0
   26b10:	and	r3, r3, r5
   26b14:	str	r2, [sp, #8]
   26b18:	str	r2, [sp, #12]
   26b1c:	bne	26c0c <flatcc_builder_end_struct@@Base+0x14c>
   26b20:	cmp	r3, #0
   26b24:	movne	r2, #1
   26b28:	movne	r0, r1
   26b2c:	beq	26c34 <flatcc_builder_end_struct@@Base+0x174>
   26b30:	add	r0, r0, #1
   26b34:	add	r5, sp, #80	; 0x50
   26b38:	add	r1, r1, r3
   26b3c:	add	r0, r5, r0, lsl #3
   26b40:	ldr	lr, [pc, #300]	; 26c74 <flatcc_builder_end_struct@@Base+0x1b4>
   26b44:	sub	r5, ip, r1
   26b48:	str	r3, [r0, #-68]	; 0xffffffbc
   26b4c:	str	r1, [sp, #8]
   26b50:	str	r2, [sp, #12]
   26b54:	str	lr, [r0, #-72]	; 0xffffffb8
   26b58:	cmp	ip, r5
   26b5c:	ble	26c34 <flatcc_builder_end_struct@@Base+0x174>
   26b60:	ldr	r0, [r4, #36]	; 0x24
   26b64:	mov	r3, r5
   26b68:	str	r1, [sp]
   26b6c:	add	r1, sp, #16
   26b70:	ldr	r6, [r4, #44]	; 0x2c
   26b74:	blx	r6
   26b78:	subs	r1, r0, #0
   26b7c:	bne	26c38 <flatcc_builder_end_struct@@Base+0x178>
   26b80:	cmp	r5, #0
   26b84:	str	r5, [r4, #136]	; 0x88
   26b88:	beq	26c00 <flatcc_builder_end_struct@@Base+0x140>
   26b8c:	ldr	r2, [r4, #20]
   26b90:	ldr	r0, [r4, #16]
   26b94:	bl	145c4 <memset@plt>
   26b98:	ldr	r3, [r4, #32]
   26b9c:	ldr	r2, [r4, #64]	; 0x40
   26ba0:	ldrh	lr, [r4, #130]	; 0x82
   26ba4:	ldr	ip, [r3]
   26ba8:	ldr	r1, [r3, #4]
   26bac:	ldrh	r0, [r4, #128]	; 0x80
   26bb0:	sub	r2, r2, ip
   26bb4:	cmp	r2, r1
   26bb8:	movcs	r2, r1
   26bbc:	cmp	r0, lr
   26bc0:	ldr	r0, [r4, #60]	; 0x3c
   26bc4:	ldr	r6, [r3, #8]
   26bc8:	str	r2, [r4, #24]
   26bcc:	add	r2, r0, ip
   26bd0:	str	r2, [r4, #16]
   26bd4:	str	r6, [r4, #20]
   26bd8:	ldr	r2, [r4, #156]	; 0x9c
   26bdc:	str	ip, [r4, #28]
   26be0:	str	r1, [r3, #4]
   26be4:	strhcc	lr, [r4, #128]	; 0x80
   26be8:	ldrh	r1, [r3, #12]
   26bec:	sub	r2, r2, #1
   26bf0:	sub	r3, r3, #36	; 0x24
   26bf4:	str	r2, [r4, #156]	; 0x9c
   26bf8:	strh	r1, [r4, #130]	; 0x82
   26bfc:	str	r3, [r4, #32]
   26c00:	mov	r0, r5
   26c04:	add	sp, sp, #80	; 0x50
   26c08:	pop	{r4, r5, r6, pc}
   26c0c:	cmp	r3, r2
   26c10:	mov	r2, #1
   26c14:	str	r0, [sp, #16]
   26c18:	str	r2, [sp, #12]
   26c1c:	movne	r0, r2
   26c20:	str	r1, [sp, #8]
   26c24:	str	r1, [sp, #20]
   26c28:	movne	r2, #2
   26c2c:	beq	26b58 <flatcc_builder_end_struct@@Base+0x98>
   26c30:	b	26b30 <flatcc_builder_end_struct@@Base+0x70>
   26c34:	bl	147f4 <__assert_fail@plt+0x1dc>
   26c38:	ldr	r3, [pc, #56]	; 26c78 <flatcc_builder_end_struct@@Base+0x1b8>
   26c3c:	ldr	r2, [pc, #56]	; 26c7c <flatcc_builder_end_struct@@Base+0x1bc>
   26c40:	ldr	r1, [pc, #56]	; 26c80 <flatcc_builder_end_struct@@Base+0x1c0>
   26c44:	ldr	r0, [pc, #56]	; 26c84 <flatcc_builder_end_struct@@Base+0x1c4>
   26c48:	bl	14618 <__assert_fail@plt>
   26c4c:	ldr	r3, [pc, #52]	; 26c88 <flatcc_builder_end_struct@@Base+0x1c8>
   26c50:	ldr	r2, [pc, #52]	; 26c8c <flatcc_builder_end_struct@@Base+0x1cc>
   26c54:	ldr	r1, [pc, #36]	; 26c80 <flatcc_builder_end_struct@@Base+0x1c0>
   26c58:	ldr	r0, [pc, #48]	; 26c90 <flatcc_builder_end_struct@@Base+0x1d0>
   26c5c:	bl	14618 <__assert_fail@plt>
   26c60:	ldr	r3, [pc, #44]	; 26c94 <flatcc_builder_end_struct@@Base+0x1d4>
   26c64:	mov	r2, #872	; 0x368
   26c68:	ldr	r1, [pc, #16]	; 26c80 <flatcc_builder_end_struct@@Base+0x1c0>
   26c6c:	ldr	r0, [pc, #36]	; 26c98 <flatcc_builder_end_struct@@Base+0x1d8>
   26c70:	bl	14618 <__assert_fail@plt>
   26c74:	andeq	r4, r4, ip, asr #15
   26c78:	andeq	r4, r4, r0, asr r7
   26c7c:	andeq	r0, r0, fp, lsl #5
   26c80:	andeq	r4, r4, r4, lsl #29
   26c84:	andeq	r4, r4, r4, asr #30
   26c88:	andeq	r4, r4, ip, asr sl
   26c8c:	andeq	r0, r0, pc, lsl #6
   26c90:	andeq	r4, r4, ip, lsl #31
   26c94:	muleq	r4, r8, sl
   26c98:	andeq	r4, r4, r4, asr #31

00026c9c <flatcc_builder_extend_vector@@Base>:
   26c9c:	ldr	r3, [r0, #32]
   26ca0:	push	{r4, r5, r6, r7, lr}
   26ca4:	mov	r5, r0
   26ca8:	ldr	r0, [r3, #20]
   26cac:	ldr	r4, [r3, #24]
   26cb0:	add	ip, r1, r0
   26cb4:	cmp	r0, ip
   26cb8:	movls	r0, #0
   26cbc:	movhi	r0, #1
   26cc0:	cmp	r4, ip
   26cc4:	movcs	r4, r0
   26cc8:	orrcc	r4, r0, #1
   26ccc:	cmp	r4, #0
   26cd0:	sub	sp, sp, #12
   26cd4:	bne	26d70 <flatcc_builder_extend_vector@@Base+0xd4>
   26cd8:	ldr	r2, [r3, #16]
   26cdc:	str	ip, [r3, #20]
   26ce0:	ldr	r6, [r5, #20]
   26ce4:	ldr	r3, [r5, #24]
   26ce8:	mla	r1, r2, r1, r6
   26cec:	cmp	r1, r3
   26cf0:	str	r1, [r5, #20]
   26cf4:	bcs	26d08 <flatcc_builder_extend_vector@@Base+0x6c>
   26cf8:	ldr	r0, [r5, #16]
   26cfc:	add	r0, r0, r6
   26d00:	add	sp, sp, #12
   26d04:	pop	{r4, r5, r6, r7, pc}
   26d08:	ldr	r2, [r5, #28]
   26d0c:	mov	r3, #1
   26d10:	add	r2, r2, #1
   26d14:	ldr	r0, [r5, #40]	; 0x28
   26d18:	add	r2, r2, r1
   26d1c:	str	r3, [sp]
   26d20:	add	r1, r5, #60	; 0x3c
   26d24:	ldr	r7, [r5, #48]	; 0x30
   26d28:	blx	r7
   26d2c:	cmp	r0, #0
   26d30:	bne	26d68 <flatcc_builder_extend_vector@@Base+0xcc>
   26d34:	ldr	r2, [r5, #28]
   26d38:	ldr	r3, [r5, #64]	; 0x40
   26d3c:	ldr	r0, [r5, #60]	; 0x3c
   26d40:	sub	r3, r3, r2
   26d44:	cmn	r3, #4
   26d48:	mvnhi	r3, #3
   26d4c:	str	r3, [r5, #24]
   26d50:	ldr	r3, [r5, #32]
   26d54:	add	r0, r0, r2
   26d58:	mvn	r2, #3
   26d5c:	str	r0, [r5, #16]
   26d60:	str	r2, [r3, #4]
   26d64:	b	26cfc <flatcc_builder_extend_vector@@Base+0x60>
   26d68:	mov	r0, r4
   26d6c:	b	26d00 <flatcc_builder_extend_vector@@Base+0x64>
   26d70:	bl	1481c <__assert_fail@plt+0x204>

00026d74 <flatcc_builder_vector_push@@Base>:
   26d74:	ldr	r3, [r0, #32]
   26d78:	push	{r4, r5, r6, r7, r8, lr}
   26d7c:	sub	sp, sp, #8
   26d80:	ldrh	r2, [r3, #14]
   26d84:	cmp	r2, #4
   26d88:	bne	26e70 <flatcc_builder_vector_push@@Base+0xfc>
   26d8c:	mov	r5, r1
   26d90:	ldr	r2, [r3, #20]
   26d94:	ldr	r1, [r3, #24]
   26d98:	cmp	r2, r1
   26d9c:	bhi	26e5c <flatcc_builder_vector_push@@Base+0xe8>
   26da0:	add	r2, r2, #1
   26da4:	str	r2, [r3, #20]
   26da8:	ldr	r7, [r3, #16]
   26dac:	ldr	r6, [r0, #20]
   26db0:	ldr	r3, [r0, #24]
   26db4:	add	r1, r7, r6
   26db8:	cmp	r1, r3
   26dbc:	mov	r4, r0
   26dc0:	str	r1, [r0, #20]
   26dc4:	bcs	26df4 <flatcc_builder_vector_push@@Base+0x80>
   26dc8:	ldr	r3, [r0, #16]
   26dcc:	adds	r3, r3, r6
   26dd0:	beq	26de8 <flatcc_builder_vector_push@@Base+0x74>
   26dd4:	mov	r0, r3
   26dd8:	mov	r2, r7
   26ddc:	mov	r1, r5
   26de0:	bl	1454c <memcpy@plt>
   26de4:	mov	r3, r0
   26de8:	mov	r0, r3
   26dec:	add	sp, sp, #8
   26df0:	pop	{r4, r5, r6, r7, r8, pc}
   26df4:	ldr	r2, [r0, #28]
   26df8:	mov	r3, #1
   26dfc:	add	r2, r2, #1
   26e00:	ldr	r0, [r0, #40]	; 0x28
   26e04:	add	r2, r2, r1
   26e08:	str	r3, [sp]
   26e0c:	add	r1, r4, #60	; 0x3c
   26e10:	ldr	r8, [r4, #48]	; 0x30
   26e14:	blx	r8
   26e18:	cmp	r0, #0
   26e1c:	bne	26e54 <flatcc_builder_vector_push@@Base+0xe0>
   26e20:	ldr	r1, [r4, #28]
   26e24:	ldr	r2, [r4, #64]	; 0x40
   26e28:	ldr	r3, [r4, #60]	; 0x3c
   26e2c:	sub	r2, r2, r1
   26e30:	cmn	r2, #4
   26e34:	mvnhi	r2, #3
   26e38:	str	r2, [r4, #24]
   26e3c:	ldr	r2, [r4, #32]
   26e40:	add	r3, r3, r1
   26e44:	mvn	r1, #3
   26e48:	str	r3, [r4, #16]
   26e4c:	str	r1, [r2, #4]
   26e50:	b	26dcc <flatcc_builder_vector_push@@Base+0x58>
   26e54:	mov	r3, #0
   26e58:	b	26de8 <flatcc_builder_vector_push@@Base+0x74>
   26e5c:	ldr	r3, [pc, #32]	; 26e84 <flatcc_builder_vector_push@@Base+0x110>
   26e60:	mov	r2, #908	; 0x38c
   26e64:	ldr	r1, [pc, #28]	; 26e88 <flatcc_builder_vector_push@@Base+0x114>
   26e68:	ldr	r0, [pc, #28]	; 26e8c <flatcc_builder_vector_push@@Base+0x118>
   26e6c:	bl	14618 <__assert_fail@plt>
   26e70:	ldr	r3, [pc, #12]	; 26e84 <flatcc_builder_vector_push@@Base+0x110>
   26e74:	ldr	r2, [pc, #20]	; 26e90 <flatcc_builder_vector_push@@Base+0x11c>
   26e78:	ldr	r1, [pc, #8]	; 26e88 <flatcc_builder_vector_push@@Base+0x114>
   26e7c:	ldr	r0, [pc, #16]	; 26e94 <flatcc_builder_vector_push@@Base+0x120>
   26e80:	bl	14618 <__assert_fail@plt>
   26e84:			; <UNDEFINED> instruction: 0x00044ab4
   26e88:	andeq	r4, r4, r4, lsl #29
   26e8c:	andeq	r5, r4, ip, lsl r0
   26e90:	andeq	r0, r0, fp, lsl #7
   26e94:	strdeq	r4, [r4], -r0

00026e98 <flatcc_builder_append_vector@@Base>:
   26e98:	push	{r4, r5, r6, r7, r8, r9, lr}
   26e9c:	mov	r5, r1
   26ea0:	ldr	r1, [r0, #32]
   26ea4:	sub	sp, sp, #12
   26ea8:	ldrh	r3, [r1, #14]
   26eac:	cmp	r3, #4
   26eb0:	bne	26fa0 <flatcc_builder_append_vector@@Base+0x108>
   26eb4:	ldr	r3, [r1, #20]
   26eb8:	mov	r6, r0
   26ebc:	add	r0, r2, r3
   26ec0:	cmp	r3, r0
   26ec4:	ldr	r4, [r1, #24]
   26ec8:	movls	r3, #0
   26ecc:	movhi	r3, #1
   26ed0:	cmp	r4, r0
   26ed4:	movcs	r4, r3
   26ed8:	orrcc	r4, r3, #1
   26edc:	cmp	r4, #0
   26ee0:	bne	26f9c <flatcc_builder_append_vector@@Base+0x104>
   26ee4:	ldr	r7, [r1, #16]
   26ee8:	str	r0, [r1, #20]
   26eec:	ldr	r8, [r6, #20]
   26ef0:	mul	r7, r7, r2
   26ef4:	ldr	r3, [r6, #24]
   26ef8:	add	r1, r7, r8
   26efc:	cmp	r1, r3
   26f00:	str	r1, [r6, #20]
   26f04:	bcs	26f34 <flatcc_builder_append_vector@@Base+0x9c>
   26f08:	ldr	r3, [r6, #16]
   26f0c:	adds	r3, r3, r8
   26f10:	beq	26f28 <flatcc_builder_append_vector@@Base+0x90>
   26f14:	mov	r0, r3
   26f18:	mov	r2, r7
   26f1c:	mov	r1, r5
   26f20:	bl	1454c <memcpy@plt>
   26f24:	mov	r3, r0
   26f28:	mov	r0, r3
   26f2c:	add	sp, sp, #12
   26f30:	pop	{r4, r5, r6, r7, r8, r9, pc}
   26f34:	ldr	r2, [r6, #28]
   26f38:	mov	r3, #1
   26f3c:	add	r2, r2, #1
   26f40:	ldr	r0, [r6, #40]	; 0x28
   26f44:	add	r2, r2, r1
   26f48:	str	r3, [sp]
   26f4c:	add	r1, r6, #60	; 0x3c
   26f50:	ldr	r9, [r6, #48]	; 0x30
   26f54:	blx	r9
   26f58:	cmp	r0, #0
   26f5c:	bne	26f94 <flatcc_builder_append_vector@@Base+0xfc>
   26f60:	ldr	r1, [r6, #28]
   26f64:	ldr	r2, [r6, #64]	; 0x40
   26f68:	ldr	r3, [r6, #60]	; 0x3c
   26f6c:	sub	r2, r2, r1
   26f70:	cmn	r2, #4
   26f74:	mvnhi	r2, #3
   26f78:	str	r2, [r6, #24]
   26f7c:	ldr	r2, [r6, #32]
   26f80:	add	r3, r3, r1
   26f84:	mvn	r1, #3
   26f88:	str	r3, [r6, #16]
   26f8c:	str	r1, [r2, #4]
   26f90:	b	26f0c <flatcc_builder_append_vector@@Base+0x74>
   26f94:	mov	r3, r4
   26f98:	b	26f28 <flatcc_builder_append_vector@@Base+0x90>
   26f9c:	bl	1481c <__assert_fail@plt+0x204>
   26fa0:	ldr	r3, [pc, #12]	; 26fb4 <flatcc_builder_append_vector@@Base+0x11c>
   26fa4:	ldr	r2, [pc, #12]	; 26fb8 <flatcc_builder_append_vector@@Base+0x120>
   26fa8:	ldr	r1, [pc, #12]	; 26fbc <flatcc_builder_append_vector@@Base+0x124>
   26fac:	ldr	r0, [pc, #12]	; 26fc0 <flatcc_builder_append_vector@@Base+0x128>
   26fb0:	bl	14618 <__assert_fail@plt>
   26fb4:	ldrdeq	r4, [r4], -r0
   26fb8:	muleq	r0, r3, r3
   26fbc:	andeq	r4, r4, r4, lsl #29
   26fc0:	strdeq	r4, [r4], -r0

00026fc4 <flatcc_builder_extend_offset_vector@@Base>:
   26fc4:	ldr	ip, [r0, #32]
   26fc8:	push	{r4, r5, r6, r7, lr}
   26fcc:	mov	r4, r0
   26fd0:	ldr	r3, [ip, #20]
   26fd4:	sub	sp, sp, #12
   26fd8:	adds	r3, r1, r3
   26fdc:	movcs	r2, #1
   26fe0:	movcc	r2, #0
   26fe4:	cmn	r3, #-1073741823	; 0xc0000001
   26fe8:	movls	r0, #0
   26fec:	movhi	r0, #1
   26ff0:	orrs	r5, r2, r0
   26ff4:	bne	2708c <flatcc_builder_extend_offset_vector@@Base+0xc8>
   26ff8:	str	r3, [ip, #20]
   26ffc:	ldr	r6, [r4, #20]
   27000:	ldr	r3, [r4, #24]
   27004:	add	r1, r6, r1, lsl #2
   27008:	cmp	r1, r3
   2700c:	str	r1, [r4, #20]
   27010:	bcs	27024 <flatcc_builder_extend_offset_vector@@Base+0x60>
   27014:	ldr	r0, [r4, #16]
   27018:	add	r0, r0, r6
   2701c:	add	sp, sp, #12
   27020:	pop	{r4, r5, r6, r7, pc}
   27024:	ldr	r2, [r4, #28]
   27028:	mov	r3, #1
   2702c:	add	r2, r2, #1
   27030:	ldr	r0, [r4, #40]	; 0x28
   27034:	add	r2, r2, r1
   27038:	str	r3, [sp]
   2703c:	add	r1, r4, #60	; 0x3c
   27040:	ldr	r7, [r4, #48]	; 0x30
   27044:	blx	r7
   27048:	cmp	r0, #0
   2704c:	bne	27084 <flatcc_builder_extend_offset_vector@@Base+0xc0>
   27050:	ldr	r2, [r4, #28]
   27054:	ldr	r3, [r4, #64]	; 0x40
   27058:	ldr	r0, [r4, #60]	; 0x3c
   2705c:	sub	r3, r3, r2
   27060:	cmn	r3, #4
   27064:	mvnhi	r3, #3
   27068:	str	r3, [r4, #24]
   2706c:	ldr	r3, [r4, #32]
   27070:	add	r0, r0, r2
   27074:	mvn	r2, #3
   27078:	str	r0, [r4, #16]
   2707c:	str	r2, [r3, #4]
   27080:	b	27018 <flatcc_builder_extend_offset_vector@@Base+0x54>
   27084:	mov	r0, r5
   27088:	b	2701c <flatcc_builder_extend_offset_vector@@Base+0x58>
   2708c:	bl	1481c <__assert_fail@plt+0x204>

00027090 <flatcc_builder_offset_vector_push@@Base>:
   27090:	ldr	r2, [r0, #32]
   27094:	push	{r4, r5, r6, r7, lr}
   27098:	sub	sp, sp, #12
   2709c:	ldrh	r3, [r2, #14]
   270a0:	cmp	r3, #5
   270a4:	bne	2715c <flatcc_builder_offset_vector_push@@Base+0xcc>
   270a8:	ldr	r3, [r2, #20]
   270ac:	cmn	r3, #-1073741823	; 0xc0000001
   270b0:	beq	27150 <flatcc_builder_offset_vector_push@@Base+0xc0>
   270b4:	add	r3, r3, #1
   270b8:	str	r3, [r2, #20]
   270bc:	ldr	r5, [r0, #20]
   270c0:	ldr	r2, [r0, #24]
   270c4:	add	r3, r5, #4
   270c8:	cmp	r3, r2
   270cc:	mov	r4, r0
   270d0:	mov	r6, r1
   270d4:	str	r3, [r0, #20]
   270d8:	bcs	270f0 <flatcc_builder_offset_vector_push@@Base+0x60>
   270dc:	ldr	r3, [r0, #16]
   270e0:	adds	r0, r3, r5
   270e4:	strne	r6, [r3, r5]
   270e8:	add	sp, sp, #12
   270ec:	pop	{r4, r5, r6, r7, pc}
   270f0:	ldr	r2, [r0, #28]
   270f4:	mov	r3, #1
   270f8:	add	r2, r5, r2
   270fc:	ldr	r0, [r0, #40]	; 0x28
   27100:	add	r2, r2, #5
   27104:	str	r3, [sp]
   27108:	add	r1, r4, #60	; 0x3c
   2710c:	ldr	r7, [r4, #48]	; 0x30
   27110:	blx	r7
   27114:	cmp	r0, #0
   27118:	bne	27150 <flatcc_builder_offset_vector_push@@Base+0xc0>
   2711c:	ldr	r1, [r4, #28]
   27120:	ldr	r2, [r4, #64]	; 0x40
   27124:	ldr	r3, [r4, #60]	; 0x3c
   27128:	sub	r2, r2, r1
   2712c:	cmn	r2, #4
   27130:	mvnhi	r2, #3
   27134:	str	r2, [r4, #24]
   27138:	ldr	r2, [r4, #32]
   2713c:	add	r3, r3, r1
   27140:	mvn	r1, #3
   27144:	str	r3, [r4, #16]
   27148:	str	r1, [r2, #4]
   2714c:	b	270e0 <flatcc_builder_offset_vector_push@@Base+0x50>
   27150:	mov	r0, #0
   27154:	add	sp, sp, #12
   27158:	pop	{r4, r5, r6, r7, pc}
   2715c:	ldr	r3, [pc, #12]	; 27170 <flatcc_builder_offset_vector_push@@Base+0xe0>
   27160:	ldr	r2, [pc, #12]	; 27174 <flatcc_builder_offset_vector_push@@Base+0xe4>
   27164:	ldr	r1, [pc, #12]	; 27178 <flatcc_builder_offset_vector_push@@Base+0xe8>
   27168:	ldr	r0, [pc, #12]	; 2717c <flatcc_builder_offset_vector_push@@Base+0xec>
   2716c:	bl	14618 <__assert_fail@plt>
   27170:	strdeq	r4, [r4], -r0
   27174:	andeq	r0, r0, r6, lsr #7
   27178:	andeq	r4, r4, r4, lsl #29
   2717c:	andeq	r5, r4, ip, asr r0

00027180 <flatcc_builder_append_offset_vector@@Base>:
   27180:	push	{r4, r5, r6, r7, r8, r9, lr}
   27184:	mov	r5, r0
   27188:	ldr	r0, [r0, #32]
   2718c:	sub	sp, sp, #12
   27190:	ldrh	r3, [r0, #14]
   27194:	cmp	r3, #5
   27198:	bne	2727c <flatcc_builder_append_offset_vector@@Base+0xfc>
   2719c:	mov	r7, r1
   271a0:	ldr	r1, [r0, #20]
   271a4:	adds	r1, r2, r1
   271a8:	movcs	r4, #1
   271ac:	movcc	r4, #0
   271b0:	cmn	r1, #-1073741823	; 0xc0000001
   271b4:	movls	r3, #0
   271b8:	movhi	r3, #1
   271bc:	orrs	r4, r4, r3
   271c0:	bne	27278 <flatcc_builder_append_offset_vector@@Base+0xf8>
   271c4:	str	r1, [r0, #20]
   271c8:	ldr	r8, [r5, #20]
   271cc:	lsl	r6, r2, #2
   271d0:	ldr	r3, [r5, #24]
   271d4:	add	r1, r6, r8
   271d8:	cmp	r1, r3
   271dc:	str	r1, [r5, #20]
   271e0:	bcs	27210 <flatcc_builder_append_offset_vector@@Base+0x90>
   271e4:	ldr	r3, [r5, #16]
   271e8:	adds	r3, r3, r8
   271ec:	beq	27204 <flatcc_builder_append_offset_vector@@Base+0x84>
   271f0:	mov	r0, r3
   271f4:	mov	r2, r6
   271f8:	mov	r1, r7
   271fc:	bl	1454c <memcpy@plt>
   27200:	mov	r3, r0
   27204:	mov	r0, r3
   27208:	add	sp, sp, #12
   2720c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   27210:	ldr	r2, [r5, #28]
   27214:	mov	r3, #1
   27218:	add	r2, r2, #1
   2721c:	ldr	r0, [r5, #40]	; 0x28
   27220:	add	r2, r2, r1
   27224:	str	r3, [sp]
   27228:	add	r1, r5, #60	; 0x3c
   2722c:	ldr	r9, [r5, #48]	; 0x30
   27230:	blx	r9
   27234:	cmp	r0, #0
   27238:	bne	27270 <flatcc_builder_append_offset_vector@@Base+0xf0>
   2723c:	ldr	r1, [r5, #28]
   27240:	ldr	r2, [r5, #64]	; 0x40
   27244:	ldr	r3, [r5, #60]	; 0x3c
   27248:	sub	r2, r2, r1
   2724c:	cmn	r2, #4
   27250:	mvnhi	r2, #3
   27254:	str	r2, [r5, #24]
   27258:	ldr	r2, [r5, #32]
   2725c:	add	r3, r3, r1
   27260:	mvn	r1, #3
   27264:	str	r3, [r5, #16]
   27268:	str	r1, [r2, #4]
   2726c:	b	271e8 <flatcc_builder_append_offset_vector@@Base+0x68>
   27270:	mov	r3, r4
   27274:	b	27204 <flatcc_builder_append_offset_vector@@Base+0x84>
   27278:	bl	1481c <__assert_fail@plt+0x204>
   2727c:	ldr	r3, [pc, #12]	; 27290 <flatcc_builder_append_offset_vector@@Base+0x110>
   27280:	mov	r2, #948	; 0x3b4
   27284:	ldr	r1, [pc, #8]	; 27294 <flatcc_builder_append_offset_vector@@Base+0x114>
   27288:	ldr	r0, [pc, #8]	; 27298 <flatcc_builder_append_offset_vector@@Base+0x118>
   2728c:	bl	14618 <__assert_fail@plt>
   27290:	andeq	r4, r4, r4, lsl fp
   27294:	andeq	r4, r4, r4, lsl #29
   27298:	andeq	r5, r4, ip, asr r0

0002729c <flatcc_builder_extend_string@@Base>:
   2729c:	ldr	r2, [r0, #32]
   272a0:	push	{r4, r5, r6, lr}
   272a4:	sub	sp, sp, #8
   272a8:	ldrh	r3, [r2, #14]
   272ac:	cmp	r3, #6
   272b0:	bne	2735c <flatcc_builder_extend_string@@Base+0xc0>
   272b4:	ldr	r3, [r2, #20]
   272b8:	adds	r3, r1, r3
   272bc:	bcs	27358 <flatcc_builder_extend_string@@Base+0xbc>
   272c0:	str	r3, [r2, #20]
   272c4:	ldr	r5, [r0, #20]
   272c8:	ldr	r3, [r0, #24]
   272cc:	add	r1, r1, r5
   272d0:	cmp	r1, r3
   272d4:	mov	r4, r0
   272d8:	str	r1, [r0, #20]
   272dc:	bcs	272f0 <flatcc_builder_extend_string@@Base+0x54>
   272e0:	ldr	r0, [r0, #16]
   272e4:	add	r0, r0, r5
   272e8:	add	sp, sp, #8
   272ec:	pop	{r4, r5, r6, pc}
   272f0:	ldr	r2, [r0, #28]
   272f4:	mov	r3, #1
   272f8:	add	r2, r2, #1
   272fc:	ldr	r0, [r0, #40]	; 0x28
   27300:	add	r2, r2, r1
   27304:	str	r3, [sp]
   27308:	add	r1, r4, #60	; 0x3c
   2730c:	ldr	r6, [r4, #48]	; 0x30
   27310:	blx	r6
   27314:	cmp	r0, #0
   27318:	bne	27350 <flatcc_builder_extend_string@@Base+0xb4>
   2731c:	ldr	r2, [r4, #28]
   27320:	ldr	r3, [r4, #64]	; 0x40
   27324:	ldr	r0, [r4, #60]	; 0x3c
   27328:	sub	r3, r3, r2
   2732c:	cmn	r3, #4
   27330:	mvnhi	r3, #3
   27334:	str	r3, [r4, #24]
   27338:	ldr	r3, [r4, #32]
   2733c:	add	r0, r0, r2
   27340:	mvn	r2, #3
   27344:	str	r0, [r4, #16]
   27348:	str	r2, [r3, #4]
   2734c:	b	272e4 <flatcc_builder_extend_string@@Base+0x48>
   27350:	mov	r0, #0
   27354:	b	272e8 <flatcc_builder_extend_string@@Base+0x4c>
   27358:	bl	1481c <__assert_fail@plt+0x204>
   2735c:	ldr	r3, [pc, #12]	; 27370 <flatcc_builder_extend_string@@Base+0xd4>
   27360:	ldr	r2, [pc, #12]	; 27374 <flatcc_builder_extend_string@@Base+0xd8>
   27364:	ldr	r1, [pc, #12]	; 27378 <flatcc_builder_extend_string@@Base+0xdc>
   27368:	ldr	r0, [pc, #12]	; 2737c <flatcc_builder_extend_string@@Base+0xe0>
   2736c:	bl	14618 <__assert_fail@plt>
   27370:	andeq	r4, r4, r8, lsr fp
   27374:			; <UNDEFINED> instruction: 0x000003bd
   27378:	andeq	r4, r4, r4, lsl #29
   2737c:	andeq	r4, r4, r4, lsl #30

00027380 <flatcc_builder_append_string@@Base>:
   27380:	push	{r4, r5, r6, r7, r8, lr}
   27384:	mov	r6, r1
   27388:	ldr	r1, [r0, #32]
   2738c:	sub	sp, sp, #8
   27390:	ldrh	r3, [r1, #14]
   27394:	cmp	r3, #6
   27398:	bne	27464 <flatcc_builder_append_string@@Base+0xe4>
   2739c:	ldr	r3, [r1, #20]
   273a0:	mov	r5, r2
   273a4:	adds	r3, r2, r3
   273a8:	bcs	27460 <flatcc_builder_append_string@@Base+0xe0>
   273ac:	str	r3, [r1, #20]
   273b0:	ldr	r7, [r0, #20]
   273b4:	ldr	r3, [r0, #24]
   273b8:	add	r1, r2, r7
   273bc:	cmp	r1, r3
   273c0:	mov	r4, r0
   273c4:	str	r1, [r0, #20]
   273c8:	bcs	273f8 <flatcc_builder_append_string@@Base+0x78>
   273cc:	ldr	r3, [r0, #16]
   273d0:	adds	r3, r3, r7
   273d4:	beq	273ec <flatcc_builder_append_string@@Base+0x6c>
   273d8:	mov	r0, r3
   273dc:	mov	r2, r5
   273e0:	mov	r1, r6
   273e4:	bl	1454c <memcpy@plt>
   273e8:	mov	r3, r0
   273ec:	mov	r0, r3
   273f0:	add	sp, sp, #8
   273f4:	pop	{r4, r5, r6, r7, r8, pc}
   273f8:	ldr	r2, [r0, #28]
   273fc:	mov	r3, #1
   27400:	add	r2, r2, #1
   27404:	ldr	r0, [r0, #40]	; 0x28
   27408:	add	r2, r2, r1
   2740c:	str	r3, [sp]
   27410:	add	r1, r4, #60	; 0x3c
   27414:	ldr	r8, [r4, #48]	; 0x30
   27418:	blx	r8
   2741c:	cmp	r0, #0
   27420:	bne	27458 <flatcc_builder_append_string@@Base+0xd8>
   27424:	ldr	r1, [r4, #28]
   27428:	ldr	r2, [r4, #64]	; 0x40
   2742c:	ldr	r3, [r4, #60]	; 0x3c
   27430:	sub	r2, r2, r1
   27434:	cmn	r2, #4
   27438:	mvnhi	r2, #3
   2743c:	str	r2, [r4, #24]
   27440:	ldr	r2, [r4, #32]
   27444:	add	r3, r3, r1
   27448:	mvn	r1, #3
   2744c:	str	r3, [r4, #16]
   27450:	str	r1, [r2, #4]
   27454:	b	273d0 <flatcc_builder_append_string@@Base+0x50>
   27458:	mov	r3, #0
   2745c:	b	273ec <flatcc_builder_append_string@@Base+0x6c>
   27460:	bl	1481c <__assert_fail@plt+0x204>
   27464:	bl	14868 <__assert_fail@plt+0x250>

00027468 <flatcc_builder_append_string_str@@Base>:
   27468:	push	{r4, r5, r6, r7, r8, lr}
   2746c:	mov	r4, r0
   27470:	sub	sp, sp, #8
   27474:	mov	r0, r1
   27478:	mov	r6, r1
   2747c:	bl	145a0 <strlen@plt>
   27480:	ldr	r2, [r4, #32]
   27484:	ldrh	r3, [r2, #14]
   27488:	cmp	r3, #6
   2748c:	bne	27554 <flatcc_builder_append_string_str@@Base+0xec>
   27490:	ldr	r3, [r2, #20]
   27494:	mov	r5, r0
   27498:	adds	r3, r0, r3
   2749c:	bcs	27550 <flatcc_builder_append_string_str@@Base+0xe8>
   274a0:	str	r3, [r2, #20]
   274a4:	ldr	r7, [r4, #20]
   274a8:	ldr	r3, [r4, #24]
   274ac:	add	r1, r0, r7
   274b0:	cmp	r1, r3
   274b4:	str	r1, [r4, #20]
   274b8:	bcs	274e8 <flatcc_builder_append_string_str@@Base+0x80>
   274bc:	ldr	r3, [r4, #16]
   274c0:	adds	r3, r3, r7
   274c4:	beq	274dc <flatcc_builder_append_string_str@@Base+0x74>
   274c8:	mov	r0, r3
   274cc:	mov	r2, r5
   274d0:	mov	r1, r6
   274d4:	bl	1454c <memcpy@plt>
   274d8:	mov	r3, r0
   274dc:	mov	r0, r3
   274e0:	add	sp, sp, #8
   274e4:	pop	{r4, r5, r6, r7, r8, pc}
   274e8:	ldr	r2, [r4, #28]
   274ec:	mov	r3, #1
   274f0:	add	r2, r2, #1
   274f4:	ldr	r0, [r4, #40]	; 0x28
   274f8:	add	r2, r2, r1
   274fc:	str	r3, [sp]
   27500:	add	r1, r4, #60	; 0x3c
   27504:	ldr	r8, [r4, #48]	; 0x30
   27508:	blx	r8
   2750c:	cmp	r0, #0
   27510:	bne	27548 <flatcc_builder_append_string_str@@Base+0xe0>
   27514:	ldr	r1, [r4, #28]
   27518:	ldr	r2, [r4, #64]	; 0x40
   2751c:	ldr	r3, [r4, #60]	; 0x3c
   27520:	sub	r2, r2, r1
   27524:	cmn	r2, #4
   27528:	mvnhi	r2, #3
   2752c:	str	r2, [r4, #24]
   27530:	ldr	r2, [r4, #32]
   27534:	add	r3, r3, r1
   27538:	mvn	r1, #3
   2753c:	str	r3, [r4, #16]
   27540:	str	r1, [r2, #4]
   27544:	b	274c0 <flatcc_builder_append_string_str@@Base+0x58>
   27548:	mov	r3, #0
   2754c:	b	274dc <flatcc_builder_append_string_str@@Base+0x74>
   27550:	bl	1481c <__assert_fail@plt+0x204>
   27554:	bl	14868 <__assert_fail@plt+0x250>

00027558 <flatcc_builder_append_string_strn@@Base>:
   27558:	push	{r4, r5, r6, r7, r8, lr}
   2755c:	mov	r6, r1
   27560:	mov	r4, r0
   27564:	sub	sp, sp, #8
   27568:	mov	r1, #0
   2756c:	mov	r0, r6
   27570:	mov	r5, r2
   27574:	bl	145e8 <memchr@plt>
   27578:	ldr	r2, [r4, #32]
   2757c:	ldrh	r3, [r2, #14]
   27580:	cmp	r0, #0
   27584:	subne	r5, r0, r6
   27588:	cmp	r3, #6
   2758c:	bne	27650 <flatcc_builder_append_string_strn@@Base+0xf8>
   27590:	ldr	r3, [r2, #20]
   27594:	adds	r3, r5, r3
   27598:	bcs	2764c <flatcc_builder_append_string_strn@@Base+0xf4>
   2759c:	str	r3, [r2, #20]
   275a0:	ldr	r7, [r4, #20]
   275a4:	ldr	r3, [r4, #24]
   275a8:	add	r1, r5, r7
   275ac:	cmp	r1, r3
   275b0:	str	r1, [r4, #20]
   275b4:	bcs	275e4 <flatcc_builder_append_string_strn@@Base+0x8c>
   275b8:	ldr	r3, [r4, #16]
   275bc:	adds	r3, r3, r7
   275c0:	beq	275d8 <flatcc_builder_append_string_strn@@Base+0x80>
   275c4:	mov	r0, r3
   275c8:	mov	r2, r5
   275cc:	mov	r1, r6
   275d0:	bl	1454c <memcpy@plt>
   275d4:	mov	r3, r0
   275d8:	mov	r0, r3
   275dc:	add	sp, sp, #8
   275e0:	pop	{r4, r5, r6, r7, r8, pc}
   275e4:	ldr	r2, [r4, #28]
   275e8:	mov	r3, #1
   275ec:	add	r2, r2, #1
   275f0:	ldr	r0, [r4, #40]	; 0x28
   275f4:	add	r2, r2, r1
   275f8:	str	r3, [sp]
   275fc:	add	r1, r4, #60	; 0x3c
   27600:	ldr	r8, [r4, #48]	; 0x30
   27604:	blx	r8
   27608:	cmp	r0, #0
   2760c:	bne	27644 <flatcc_builder_append_string_strn@@Base+0xec>
   27610:	ldr	r1, [r4, #28]
   27614:	ldr	r2, [r4, #64]	; 0x40
   27618:	ldr	r3, [r4, #60]	; 0x3c
   2761c:	sub	r2, r2, r1
   27620:	cmn	r2, #4
   27624:	mvnhi	r2, #3
   27628:	str	r2, [r4, #24]
   2762c:	ldr	r2, [r4, #32]
   27630:	add	r3, r3, r1
   27634:	mvn	r1, #3
   27638:	str	r3, [r4, #16]
   2763c:	str	r1, [r2, #4]
   27640:	b	275bc <flatcc_builder_append_string_strn@@Base+0x64>
   27644:	mov	r3, #0
   27648:	b	275d8 <flatcc_builder_append_string_strn@@Base+0x80>
   2764c:	bl	1481c <__assert_fail@plt+0x204>
   27650:	bl	14868 <__assert_fail@plt+0x250>

00027654 <flatcc_builder_truncate_vector@@Base>:
   27654:	ldr	r3, [r0, #32]
   27658:	push	{r4, lr}
   2765c:	ldrh	r2, [r3, #14]
   27660:	cmp	r2, #4
   27664:	bne	276a8 <flatcc_builder_truncate_vector@@Base+0x54>
   27668:	ldr	ip, [r3, #20]
   2766c:	cmp	ip, r1
   27670:	bcc	276bc <flatcc_builder_truncate_vector@@Base+0x68>
   27674:	ldr	r2, [r3, #16]
   27678:	sub	ip, ip, r1
   2767c:	str	ip, [r3, #20]
   27680:	mul	r2, r2, r1
   27684:	ldr	r3, [r0, #20]
   27688:	ldr	r1, [r0, #16]
   2768c:	sub	r3, r3, r2
   27690:	str	r3, [r0, #20]
   27694:	add	r0, r1, r3
   27698:	mov	r1, #0
   2769c:	bl	145c4 <memset@plt>
   276a0:	mov	r0, #0
   276a4:	pop	{r4, pc}
   276a8:	ldr	r3, [pc, #32]	; 276d0 <flatcc_builder_truncate_vector@@Base+0x7c>
   276ac:	ldr	r2, [pc, #32]	; 276d4 <flatcc_builder_truncate_vector@@Base+0x80>
   276b0:	ldr	r1, [pc, #32]	; 276d8 <flatcc_builder_truncate_vector@@Base+0x84>
   276b4:	ldr	r0, [pc, #32]	; 276dc <flatcc_builder_truncate_vector@@Base+0x88>
   276b8:	bl	14618 <__assert_fail@plt>
   276bc:	ldr	r3, [pc, #12]	; 276d0 <flatcc_builder_truncate_vector@@Base+0x7c>
   276c0:	ldr	r2, [pc, #24]	; 276e0 <flatcc_builder_truncate_vector@@Base+0x8c>
   276c4:	ldr	r1, [pc, #12]	; 276d8 <flatcc_builder_truncate_vector@@Base+0x84>
   276c8:	ldr	r0, [pc, #20]	; 276e4 <flatcc_builder_truncate_vector@@Base+0x90>
   276cc:	bl	14618 <__assert_fail@plt>
   276d0:	andeq	r4, r4, r8, asr fp
   276d4:	ldrdeq	r0, [r0], -r9
   276d8:	andeq	r4, r4, r4, lsl #29
   276dc:	strdeq	r4, [r4], -r0
   276e0:	ldrdeq	r0, [r0], -sl
   276e4:	muleq	r4, r0, r0

000276e8 <flatcc_builder_truncate_offset_vector@@Base>:
   276e8:	ldr	r3, [r0, #32]
   276ec:	push	{r4, lr}
   276f0:	ldrh	r2, [r3, #14]
   276f4:	cmp	r2, #5
   276f8:	bne	2773c <flatcc_builder_truncate_offset_vector@@Base+0x54>
   276fc:	ldr	ip, [r3, #20]
   27700:	cmp	ip, r1
   27704:	bcc	27750 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   27708:	ldr	r2, [r3, #16]
   2770c:	sub	ip, ip, r1
   27710:	str	ip, [r3, #20]
   27714:	mul	r2, r2, r1
   27718:	ldr	r3, [r0, #20]
   2771c:	ldr	r1, [r0, #16]
   27720:	sub	r3, r3, r2
   27724:	str	r3, [r0, #20]
   27728:	add	r0, r1, r3
   2772c:	mov	r1, #0
   27730:	bl	145c4 <memset@plt>
   27734:	mov	r0, #0
   27738:	pop	{r4, pc}
   2773c:	ldr	r3, [pc, #32]	; 27764 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   27740:	ldr	r2, [pc, #32]	; 27768 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   27744:	ldr	r1, [pc, #32]	; 2776c <flatcc_builder_truncate_offset_vector@@Base+0x84>
   27748:	ldr	r0, [pc, #32]	; 27770 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   2774c:	bl	14618 <__assert_fail@plt>
   27750:	ldr	r3, [pc, #12]	; 27764 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   27754:	ldr	r2, [pc, #24]	; 27774 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   27758:	ldr	r1, [pc, #12]	; 2776c <flatcc_builder_truncate_offset_vector@@Base+0x84>
   2775c:	ldr	r0, [pc, #20]	; 27778 <flatcc_builder_truncate_offset_vector@@Base+0x90>
   27760:	bl	14618 <__assert_fail@plt>
   27764:	andeq	r4, r4, r8, ror fp
   27768:	andeq	r0, r0, r2, ror #7
   2776c:	andeq	r4, r4, r4, lsl #29
   27770:	andeq	r5, r4, ip, asr r0
   27774:	andeq	r0, r0, r3, ror #7
   27778:	strheq	r5, [r4], -r4

0002777c <flatcc_builder_truncate_string@@Base>:
   2777c:	ldr	r2, [r0, #32]
   27780:	push	{r4, lr}
   27784:	ldrh	r3, [r2, #14]
   27788:	cmp	r3, #6
   2778c:	bne	277cc <flatcc_builder_truncate_string@@Base+0x50>
   27790:	ldr	r3, [r2, #20]
   27794:	cmp	r3, r1
   27798:	bcc	277e0 <flatcc_builder_truncate_string@@Base+0x64>
   2779c:	sub	r3, r3, r1
   277a0:	str	r3, [r2, #20]
   277a4:	ldr	r3, [r0, #20]
   277a8:	ldr	r2, [r0, #16]
   277ac:	sub	r3, r3, r1
   277b0:	str	r3, [r0, #20]
   277b4:	add	r0, r2, r3
   277b8:	mov	r2, r1
   277bc:	mov	r1, #0
   277c0:	bl	145c4 <memset@plt>
   277c4:	mov	r0, #0
   277c8:	pop	{r4, pc}
   277cc:	ldr	r3, [pc, #32]	; 277f4 <flatcc_builder_truncate_string@@Base+0x78>
   277d0:	ldr	r2, [pc, #32]	; 277f8 <flatcc_builder_truncate_string@@Base+0x7c>
   277d4:	ldr	r1, [pc, #32]	; 277fc <flatcc_builder_truncate_string@@Base+0x80>
   277d8:	ldr	r0, [pc, #32]	; 27800 <flatcc_builder_truncate_string@@Base+0x84>
   277dc:	bl	14618 <__assert_fail@plt>
   277e0:	ldr	r3, [pc, #12]	; 277f4 <flatcc_builder_truncate_string@@Base+0x78>
   277e4:	mov	r2, #1004	; 0x3ec
   277e8:	ldr	r1, [pc, #12]	; 277fc <flatcc_builder_truncate_string@@Base+0x80>
   277ec:	ldr	r0, [pc, #16]	; 27804 <flatcc_builder_truncate_string@@Base+0x88>
   277f0:	bl	14618 <__assert_fail@plt>
   277f4:	andeq	r4, r4, r0, lsr #23
   277f8:	andeq	r0, r0, fp, ror #7
   277fc:	andeq	r4, r4, r4, lsl #29
   27800:	andeq	r4, r4, r4, lsl #30
   27804:	strdeq	r5, [r4], -r0

00027808 <flatcc_builder_start_vector@@Base>:
   27808:	ldr	ip, [r0, #156]	; 0x9c
   2780c:	push	{r4, r5, r6, r7, r8, r9, lr}
   27810:	cmp	r2, #4
   27814:	ldr	lr, [r0, #160]	; 0xa0
   27818:	mov	r4, r0
   2781c:	add	r0, ip, #1
   27820:	movcs	r7, r2
   27824:	movcc	r7, #4
   27828:	cmp	r0, lr
   2782c:	sub	sp, sp, #12
   27830:	mov	r6, r1
   27834:	mov	r5, r3
   27838:	str	r0, [r4, #156]	; 0x9c
   2783c:	ble	278ac <flatcc_builder_start_vector@@Base+0xa4>
   27840:	ldr	r3, [r4, #176]	; 0xb0
   27844:	cmp	r3, #0
   27848:	cmpgt	r0, r3
   2784c:	movgt	r3, #1
   27850:	movle	r3, #0
   27854:	bgt	27954 <flatcc_builder_start_vector@@Base+0x14c>
   27858:	add	ip, ip, ip, lsl #3
   2785c:	ldr	r1, [r4, #88]	; 0x58
   27860:	lsl	r8, ip, #2
   27864:	add	r2, r8, #36	; 0x24
   27868:	cmp	r2, r1
   2786c:	bhi	27930 <flatcc_builder_start_vector@@Base+0x128>
   27870:	ldr	r3, [r4, #84]	; 0x54
   27874:	add	r3, r3, r8
   27878:	cmp	r3, #0
   2787c:	str	r3, [r4, #32]
   27880:	beq	27954 <flatcc_builder_start_vector@@Base+0x14c>
   27884:	ldr	r2, [r4, #88]	; 0x58
   27888:	ldr	r0, [pc, #204]	; 2795c <flatcc_builder_start_vector@@Base+0x154>
   2788c:	ldr	r1, [r4, #176]	; 0xb0
   27890:	umull	r0, r2, r0, r2
   27894:	lsr	r2, r2, #3
   27898:	cmp	r1, #0
   2789c:	cmpgt	r2, r1
   278a0:	str	r2, [r4, #160]	; 0xa0
   278a4:	strgt	r1, [r4, #160]	; 0xa0
   278a8:	b	278b8 <flatcc_builder_start_vector@@Base+0xb0>
   278ac:	ldr	r3, [r4, #32]
   278b0:	add	r3, r3, #36	; 0x24
   278b4:	str	r3, [r4, #32]
   278b8:	ldr	r0, [r4, #20]
   278bc:	ldr	r1, [r4, #28]
   278c0:	ldrh	ip, [r4, #130]	; 0x82
   278c4:	add	r2, r0, r1
   278c8:	add	r2, r2, #7
   278cc:	str	r0, [r3, #8]
   278d0:	bic	r2, r2, #7
   278d4:	mov	r0, #0
   278d8:	strh	ip, [r3, #12]
   278dc:	strh	r7, [r4, #130]	; 0x82
   278e0:	str	r1, [r3]
   278e4:	str	r2, [r4, #28]
   278e8:	str	r0, [r4, #20]
   278ec:	str	r0, [r3, #20]
   278f0:	str	r6, [r3, #16]
   278f4:	str	r5, [r3, #24]
   278f8:	ldr	r1, [r4, #64]	; 0x40
   278fc:	ldr	ip, [r4, #60]	; 0x3c
   27900:	sub	r1, r1, r2
   27904:	mvn	lr, #3
   27908:	cmp	r1, lr
   2790c:	add	r2, ip, r2
   27910:	movhi	r1, lr
   27914:	mov	ip, #4
   27918:	strh	ip, [r3, #14]
   2791c:	str	r2, [r4, #16]
   27920:	str	r1, [r4, #24]
   27924:	str	lr, [r3, #4]
   27928:	add	sp, sp, #12
   2792c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   27930:	mov	r1, #4
   27934:	ldr	r0, [r4, #40]	; 0x28
   27938:	str	r1, [sp]
   2793c:	add	r1, r4, #84	; 0x54
   27940:	ldr	r9, [r4, #48]	; 0x30
   27944:	blx	r9
   27948:	cmp	r0, #0
   2794c:	beq	27870 <flatcc_builder_start_vector@@Base+0x68>
   27950:	bl	147a8 <__assert_fail@plt+0x190>
   27954:	mvn	r0, #0
   27958:	b	27928 <flatcc_builder_start_vector@@Base+0x120>
   2795c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00027960 <flatcc_builder_start_offset_vector@@Base>:
   27960:	ldr	r1, [r0, #156]	; 0x9c
   27964:	ldr	r3, [r0, #160]	; 0xa0
   27968:	add	r2, r1, #1
   2796c:	cmp	r2, r3
   27970:	push	{r4, r5, r6, lr}
   27974:	mov	r4, r0
   27978:	sub	sp, sp, #8
   2797c:	str	r2, [r0, #156]	; 0x9c
   27980:	ble	279f0 <flatcc_builder_start_offset_vector@@Base+0x90>
   27984:	ldr	r3, [r0, #176]	; 0xb0
   27988:	cmp	r3, #0
   2798c:	cmpgt	r2, r3
   27990:	movgt	r3, #1
   27994:	movle	r3, #0
   27998:	bgt	27a98 <flatcc_builder_start_offset_vector@@Base+0x138>
   2799c:	add	r1, r1, r1, lsl #3
   279a0:	ldr	r0, [r0, #88]	; 0x58
   279a4:	lsl	r5, r1, #2
   279a8:	add	r2, r5, #36	; 0x24
   279ac:	cmp	r2, r0
   279b0:	bhi	27a74 <flatcc_builder_start_offset_vector@@Base+0x114>
   279b4:	ldr	r3, [r4, #84]	; 0x54
   279b8:	add	r3, r3, r5
   279bc:	cmp	r3, #0
   279c0:	str	r3, [r4, #32]
   279c4:	beq	27a98 <flatcc_builder_start_offset_vector@@Base+0x138>
   279c8:	ldr	r2, [r4, #88]	; 0x58
   279cc:	ldr	r0, [pc, #204]	; 27aa0 <flatcc_builder_start_offset_vector@@Base+0x140>
   279d0:	ldr	r1, [r4, #176]	; 0xb0
   279d4:	umull	r0, r2, r0, r2
   279d8:	lsr	r2, r2, #3
   279dc:	cmp	r1, #0
   279e0:	cmpgt	r2, r1
   279e4:	str	r2, [r4, #160]	; 0xa0
   279e8:	strgt	r1, [r4, #160]	; 0xa0
   279ec:	b	279fc <flatcc_builder_start_offset_vector@@Base+0x9c>
   279f0:	ldr	r3, [r0, #32]
   279f4:	add	r3, r3, #36	; 0x24
   279f8:	str	r3, [r0, #32]
   279fc:	ldr	lr, [r4, #20]
   27a00:	ldr	ip, [r4, #28]
   27a04:	ldrh	r5, [r4, #130]	; 0x82
   27a08:	add	r2, lr, ip
   27a0c:	add	r2, r2, #7
   27a10:	bic	r2, r2, #7
   27a14:	mov	r1, #4
   27a18:	mov	r0, #0
   27a1c:	str	lr, [r3, #8]
   27a20:	strh	r5, [r3, #12]
   27a24:	strh	r1, [r4, #130]	; 0x82
   27a28:	str	ip, [r3]
   27a2c:	str	r2, [r4, #28]
   27a30:	str	r0, [r4, #20]
   27a34:	str	r1, [r3, #16]
   27a38:	str	r0, [r3, #20]
   27a3c:	ldr	r1, [r4, #64]	; 0x40
   27a40:	ldr	ip, [r4, #60]	; 0x3c
   27a44:	sub	r1, r1, r2
   27a48:	mvn	lr, #3
   27a4c:	cmp	r1, lr
   27a50:	add	r2, ip, r2
   27a54:	movhi	r1, lr
   27a58:	mov	ip, #5
   27a5c:	strh	ip, [r3, #14]
   27a60:	str	r2, [r4, #16]
   27a64:	str	r1, [r4, #24]
   27a68:	str	lr, [r3, #4]
   27a6c:	add	sp, sp, #8
   27a70:	pop	{r4, r5, r6, pc}
   27a74:	mov	r1, #4
   27a78:	ldr	r0, [r4, #40]	; 0x28
   27a7c:	str	r1, [sp]
   27a80:	add	r1, r4, #84	; 0x54
   27a84:	ldr	r6, [r4, #48]	; 0x30
   27a88:	blx	r6
   27a8c:	cmp	r0, #0
   27a90:	beq	279b4 <flatcc_builder_start_offset_vector@@Base+0x54>
   27a94:	bl	147a8 <__assert_fail@plt+0x190>
   27a98:	mvn	r0, #0
   27a9c:	b	27a6c <flatcc_builder_start_offset_vector@@Base+0x10c>
   27aa0:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00027aa4 <flatcc_builder_create_offset_vector@@Base>:
   27aa4:	push	{r4, r5, r6, r7, r8, lr}
   27aa8:	mov	r4, r0
   27aac:	ldr	r0, [r0, #156]	; 0x9c
   27ab0:	ldr	r3, [r4, #160]	; 0xa0
   27ab4:	mov	r7, r1
   27ab8:	add	r1, r0, #1
   27abc:	cmp	r1, r3
   27ac0:	sub	sp, sp, #8
   27ac4:	mov	r5, r2
   27ac8:	str	r1, [r4, #156]	; 0x9c
   27acc:	ble	27b3c <flatcc_builder_create_offset_vector@@Base+0x98>
   27ad0:	ldr	r3, [r4, #176]	; 0xb0
   27ad4:	cmp	r1, r3
   27ad8:	cmpgt	r3, #0
   27adc:	movgt	r3, #1
   27ae0:	movle	r3, #0
   27ae4:	bgt	27c0c <flatcc_builder_create_offset_vector@@Base+0x168>
   27ae8:	add	r0, r0, r0, lsl #3
   27aec:	ldr	r1, [r4, #88]	; 0x58
   27af0:	lsl	r6, r0, #2
   27af4:	add	r2, r6, #36	; 0x24
   27af8:	cmp	r2, r1
   27afc:	bhi	27c74 <flatcc_builder_create_offset_vector@@Base+0x1d0>
   27b00:	ldr	r3, [r4, #84]	; 0x54
   27b04:	add	r3, r3, r6
   27b08:	cmp	r3, #0
   27b0c:	str	r3, [r4, #32]
   27b10:	beq	27c0c <flatcc_builder_create_offset_vector@@Base+0x168>
   27b14:	ldr	r2, [r4, #88]	; 0x58
   27b18:	ldr	r0, [pc, #552]	; 27d48 <flatcc_builder_create_offset_vector@@Base+0x2a4>
   27b1c:	ldr	r1, [r4, #176]	; 0xb0
   27b20:	umull	r0, r2, r0, r2
   27b24:	lsr	r2, r2, #3
   27b28:	cmp	r1, #0
   27b2c:	cmpgt	r2, r1
   27b30:	str	r2, [r4, #160]	; 0xa0
   27b34:	strgt	r1, [r4, #160]	; 0xa0
   27b38:	b	27b48 <flatcc_builder_create_offset_vector@@Base+0xa4>
   27b3c:	ldr	r3, [r4, #32]
   27b40:	add	r3, r3, #36	; 0x24
   27b44:	str	r3, [r4, #32]
   27b48:	ldr	r2, [r4, #20]
   27b4c:	ldr	ip, [r4, #28]
   27b50:	ldrh	r6, [r4, #130]	; 0x82
   27b54:	add	r1, r2, ip
   27b58:	mvn	lr, #3
   27b5c:	add	r1, r1, #7
   27b60:	str	r2, [r3, #8]
   27b64:	bic	r1, r1, #7
   27b68:	mov	r0, #4
   27b6c:	mov	r2, #0
   27b70:	strh	r6, [r3, #12]
   27b74:	strh	r0, [r4, #130]	; 0x82
   27b78:	stm	r3, {ip, lr}
   27b7c:	str	r2, [r4, #20]
   27b80:	str	r1, [r4, #28]
   27b84:	str	r0, [r3, #16]
   27b88:	str	r2, [r3, #20]
   27b8c:	ldr	r2, [r4, #64]	; 0x40
   27b90:	ldr	r0, [r4, #60]	; 0x3c
   27b94:	sub	r2, r2, r1
   27b98:	cmp	r2, lr
   27b9c:	mov	ip, #5
   27ba0:	strh	ip, [r3, #14]
   27ba4:	add	r0, r0, r1
   27ba8:	strls	r2, [r4, #24]
   27bac:	strhi	lr, [r4, #24]
   27bb0:	movhi	r2, lr
   27bb4:	mvn	r6, #3
   27bb8:	cmn	r5, #-1073741823	; 0xc0000001
   27bbc:	str	r0, [r4, #16]
   27bc0:	str	r6, [r3, #4]
   27bc4:	bhi	27d30 <flatcc_builder_create_offset_vector@@Base+0x28c>
   27bc8:	lsl	r8, r5, #2
   27bcc:	cmp	r8, r2
   27bd0:	str	r5, [r3, #20]
   27bd4:	str	r8, [r4, #20]
   27bd8:	bcs	27c1c <flatcc_builder_create_offset_vector@@Base+0x178>
   27bdc:	cmp	r0, #0
   27be0:	beq	27c0c <flatcc_builder_create_offset_vector@@Base+0x168>
   27be4:	mov	r2, r8
   27be8:	mov	r1, r7
   27bec:	bl	1454c <memcpy@plt>
   27bf0:	ldr	r3, [r4, #32]
   27bf4:	ldrh	r2, [r3, #14]
   27bf8:	cmp	r2, #5
   27bfc:	bne	27d34 <flatcc_builder_create_offset_vector@@Base+0x290>
   27c00:	ldr	r2, [r3, #20]
   27c04:	cmn	r2, #-1073741823	; 0xc0000001
   27c08:	bls	27c98 <flatcc_builder_create_offset_vector@@Base+0x1f4>
   27c0c:	mov	r5, #0
   27c10:	mov	r0, r5
   27c14:	add	sp, sp, #8
   27c18:	pop	{r4, r5, r6, r7, r8, pc}
   27c1c:	mov	r3, #1
   27c20:	add	r2, r8, #1
   27c24:	ldr	r0, [r4, #40]	; 0x28
   27c28:	add	r2, r2, r1
   27c2c:	str	r3, [sp]
   27c30:	add	r1, r4, #60	; 0x3c
   27c34:	ldr	r5, [r4, #48]	; 0x30
   27c38:	blx	r5
   27c3c:	cmp	r0, #0
   27c40:	bne	27c0c <flatcc_builder_create_offset_vector@@Base+0x168>
   27c44:	ldr	r2, [r4, #28]
   27c48:	ldr	r3, [r4, #64]	; 0x40
   27c4c:	ldr	r0, [r4, #60]	; 0x3c
   27c50:	sub	r3, r3, r2
   27c54:	ldr	r1, [r4, #32]
   27c58:	cmn	r3, #4
   27c5c:	movhi	r3, r6
   27c60:	add	r0, r0, r2
   27c64:	str	r3, [r4, #24]
   27c68:	str	r0, [r4, #16]
   27c6c:	str	r6, [r1, #4]
   27c70:	b	27bdc <flatcc_builder_create_offset_vector@@Base+0x138>
   27c74:	mov	r1, #4
   27c78:	ldr	r0, [r4, #40]	; 0x28
   27c7c:	str	r1, [sp]
   27c80:	add	r1, r4, #84	; 0x54
   27c84:	ldr	r8, [r4, #48]	; 0x30
   27c88:	blx	r8
   27c8c:	cmp	r0, #0
   27c90:	beq	27b00 <flatcc_builder_create_offset_vector@@Base+0x5c>
   27c94:	bl	147a8 <__assert_fail@plt+0x190>
   27c98:	ldr	r1, [r4, #16]
   27c9c:	mov	r0, r4
   27ca0:	bl	256c8 <flatcc_builder_default_alloc@@Base+0x2fc>
   27ca4:	subs	r5, r0, #0
   27ca8:	beq	27c0c <flatcc_builder_create_offset_vector@@Base+0x168>
   27cac:	ldr	r2, [r4, #20]
   27cb0:	mov	r1, #0
   27cb4:	ldr	r0, [r4, #16]
   27cb8:	bl	145c4 <memset@plt>
   27cbc:	ldr	r3, [r4, #32]
   27cc0:	ldr	r2, [r4, #64]	; 0x40
   27cc4:	ldrh	lr, [r4, #130]	; 0x82
   27cc8:	ldr	ip, [r3]
   27ccc:	ldr	r1, [r3, #4]
   27cd0:	ldrh	r0, [r4, #128]	; 0x80
   27cd4:	sub	r2, r2, ip
   27cd8:	cmp	r2, r1
   27cdc:	movcs	r2, r1
   27ce0:	cmp	r0, lr
   27ce4:	ldr	r0, [r4, #60]	; 0x3c
   27ce8:	ldr	r6, [r3, #8]
   27cec:	str	r2, [r4, #24]
   27cf0:	add	r2, r0, ip
   27cf4:	str	r2, [r4, #16]
   27cf8:	str	r6, [r4, #20]
   27cfc:	ldr	r2, [r4, #156]	; 0x9c
   27d00:	str	ip, [r4, #28]
   27d04:	str	r1, [r3, #4]
   27d08:	strhcc	lr, [r4, #128]	; 0x80
   27d0c:	ldrh	r1, [r3, #12]
   27d10:	sub	r2, r2, #1
   27d14:	sub	r3, r3, #36	; 0x24
   27d18:	mov	r0, r5
   27d1c:	str	r2, [r4, #156]	; 0x9c
   27d20:	strh	r1, [r4, #130]	; 0x82
   27d24:	str	r3, [r4, #32]
   27d28:	add	sp, sp, #8
   27d2c:	pop	{r4, r5, r6, r7, r8, pc}
   27d30:	bl	1481c <__assert_fail@plt+0x204>
   27d34:	ldr	r3, [pc, #16]	; 27d4c <flatcc_builder_create_offset_vector@@Base+0x2a8>
   27d38:	ldr	r2, [pc, #16]	; 27d50 <flatcc_builder_create_offset_vector@@Base+0x2ac>
   27d3c:	ldr	r1, [pc, #16]	; 27d54 <flatcc_builder_create_offset_vector@@Base+0x2b0>
   27d40:	ldr	r0, [pc, #16]	; 27d58 <flatcc_builder_create_offset_vector@@Base+0x2b4>
   27d44:	bl	14618 <__assert_fail@plt>
   27d48:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   27d4c:	andeq	r4, r4, r0, asr #23
   27d50:	andeq	r0, r0, r8, asr #11
   27d54:	andeq	r4, r4, r4, lsl #29
   27d58:	andeq	r5, r4, ip, asr r0

00027d5c <flatcc_builder_start_string@@Base>:
   27d5c:	ldr	r1, [r0, #156]	; 0x9c
   27d60:	ldr	r3, [r0, #160]	; 0xa0
   27d64:	add	r2, r1, #1
   27d68:	cmp	r2, r3
   27d6c:	push	{r4, r5, r6, lr}
   27d70:	mov	r4, r0
   27d74:	sub	sp, sp, #8
   27d78:	str	r2, [r0, #156]	; 0x9c
   27d7c:	ble	27dec <flatcc_builder_start_string@@Base+0x90>
   27d80:	ldr	r3, [r0, #176]	; 0xb0
   27d84:	cmp	r3, #0
   27d88:	cmpgt	r2, r3
   27d8c:	movgt	r3, #1
   27d90:	movle	r3, #0
   27d94:	bgt	27e94 <flatcc_builder_start_string@@Base+0x138>
   27d98:	add	r1, r1, r1, lsl #3
   27d9c:	ldr	r0, [r0, #88]	; 0x58
   27da0:	lsl	r5, r1, #2
   27da4:	add	r2, r5, #36	; 0x24
   27da8:	cmp	r2, r0
   27dac:	bhi	27e70 <flatcc_builder_start_string@@Base+0x114>
   27db0:	ldr	r3, [r4, #84]	; 0x54
   27db4:	add	r3, r3, r5
   27db8:	cmp	r3, #0
   27dbc:	str	r3, [r4, #32]
   27dc0:	beq	27e94 <flatcc_builder_start_string@@Base+0x138>
   27dc4:	ldr	r2, [r4, #88]	; 0x58
   27dc8:	ldr	r0, [pc, #204]	; 27e9c <flatcc_builder_start_string@@Base+0x140>
   27dcc:	ldr	r1, [r4, #176]	; 0xb0
   27dd0:	umull	r0, r2, r0, r2
   27dd4:	lsr	r2, r2, #3
   27dd8:	cmp	r1, #0
   27ddc:	cmpgt	r2, r1
   27de0:	str	r2, [r4, #160]	; 0xa0
   27de4:	strgt	r1, [r4, #160]	; 0xa0
   27de8:	b	27df8 <flatcc_builder_start_string@@Base+0x9c>
   27dec:	ldr	r3, [r0, #32]
   27df0:	add	r3, r3, #36	; 0x24
   27df4:	str	r3, [r0, #32]
   27df8:	ldr	lr, [r4, #20]
   27dfc:	ldr	ip, [r4, #28]
   27e00:	ldrh	r5, [r4, #130]	; 0x82
   27e04:	add	r2, lr, ip
   27e08:	add	r2, r2, #7
   27e0c:	bic	r2, r2, #7
   27e10:	mov	r1, #1
   27e14:	mov	r0, #0
   27e18:	str	lr, [r3, #8]
   27e1c:	strh	r5, [r3, #12]
   27e20:	strh	r1, [r4, #130]	; 0x82
   27e24:	str	ip, [r3]
   27e28:	str	r2, [r4, #28]
   27e2c:	str	r0, [r4, #20]
   27e30:	str	r1, [r3, #16]
   27e34:	str	r0, [r3, #20]
   27e38:	ldr	r1, [r4, #64]	; 0x40
   27e3c:	ldr	ip, [r4, #60]	; 0x3c
   27e40:	sub	r1, r1, r2
   27e44:	mvn	lr, #3
   27e48:	cmp	r1, lr
   27e4c:	add	r2, ip, r2
   27e50:	movhi	r1, lr
   27e54:	mov	ip, #6
   27e58:	strh	ip, [r3, #14]
   27e5c:	str	r2, [r4, #16]
   27e60:	str	r1, [r4, #24]
   27e64:	str	lr, [r3, #4]
   27e68:	add	sp, sp, #8
   27e6c:	pop	{r4, r5, r6, pc}
   27e70:	mov	r1, #4
   27e74:	ldr	r0, [r4, #40]	; 0x28
   27e78:	str	r1, [sp]
   27e7c:	add	r1, r4, #84	; 0x54
   27e80:	ldr	r6, [r4, #48]	; 0x30
   27e84:	blx	r6
   27e88:	cmp	r0, #0
   27e8c:	beq	27db0 <flatcc_builder_start_string@@Base+0x54>
   27e90:	bl	147a8 <__assert_fail@plt+0x190>
   27e94:	mvn	r0, #0
   27e98:	b	27e68 <flatcc_builder_start_string@@Base+0x10c>
   27e9c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00027ea0 <flatcc_builder_reserve_table@@Base>:
   27ea0:	cmp	r1, #0
   27ea4:	push	{r4, r5, r6, r7, lr}
   27ea8:	sub	sp, sp, #12
   27eac:	blt	27f84 <flatcc_builder_reserve_table@@Base+0xe4>
   27eb0:	ldr	r2, [r0, #32]
   27eb4:	add	r1, r1, #2
   27eb8:	mov	r5, r0
   27ebc:	ldrh	r6, [r2, #28]
   27ec0:	ldr	r3, [r2, #16]
   27ec4:	ldr	r0, [r0, #56]	; 0x38
   27ec8:	lsl	r4, r1, #1
   27ecc:	add	r6, r3, r6, lsl #1
   27ed0:	add	r2, r6, r4
   27ed4:	cmp	r2, r0
   27ed8:	bhi	27f34 <flatcc_builder_reserve_table@@Base+0x94>
   27edc:	ldr	r3, [r5, #52]	; 0x34
   27ee0:	adds	r3, r3, r6
   27ee4:	streq	r3, [r5, #4]
   27ee8:	mvneq	r0, #0
   27eec:	beq	27f2c <flatcc_builder_reserve_table@@Base+0x8c>
   27ef0:	ldr	r2, [r5, #32]
   27ef4:	add	r3, r3, #4
   27ef8:	str	r3, [r5, #4]
   27efc:	ldr	r6, [r2, #20]
   27f00:	ldr	r3, [r5, #80]	; 0x50
   27f04:	add	r2, r4, r6
   27f08:	sub	r2, r2, #3
   27f0c:	cmp	r2, r3
   27f10:	bhi	27f5c <flatcc_builder_reserve_table@@Base+0xbc>
   27f14:	ldr	r3, [r5, #76]	; 0x4c
   27f18:	add	r3, r3, r6
   27f1c:	cmp	r3, #0
   27f20:	movne	r0, #0
   27f24:	mvneq	r0, #0
   27f28:	str	r3, [r5]
   27f2c:	add	sp, sp, #12
   27f30:	pop	{r4, r5, r6, r7, pc}
   27f34:	mov	r3, #0
   27f38:	ldr	r0, [r5, #40]	; 0x28
   27f3c:	add	r1, r5, #52	; 0x34
   27f40:	str	r3, [sp]
   27f44:	mov	r3, #1
   27f48:	ldr	r7, [r5, #48]	; 0x30
   27f4c:	blx	r7
   27f50:	cmp	r0, #0
   27f54:	beq	27edc <flatcc_builder_reserve_table@@Base+0x3c>
   27f58:	bl	147a8 <__assert_fail@plt+0x190>
   27f5c:	mov	r3, #3
   27f60:	ldr	r0, [r5, #40]	; 0x28
   27f64:	add	r1, r5, #76	; 0x4c
   27f68:	str	r3, [sp]
   27f6c:	mov	r3, #0
   27f70:	ldr	r4, [r5, #48]	; 0x30
   27f74:	blx	r4
   27f78:	cmp	r0, #0
   27f7c:	beq	27f14 <flatcc_builder_reserve_table@@Base+0x74>
   27f80:	b	27f58 <flatcc_builder_reserve_table@@Base+0xb8>
   27f84:	ldr	r3, [pc, #12]	; 27f98 <flatcc_builder_reserve_table@@Base+0xf8>
   27f88:	ldr	r2, [pc, #12]	; 27f9c <flatcc_builder_reserve_table@@Base+0xfc>
   27f8c:	ldr	r1, [pc, #12]	; 27fa0 <flatcc_builder_reserve_table@@Base+0x100>
   27f90:	ldr	r0, [pc, #12]	; 27fa4 <flatcc_builder_reserve_table@@Base+0x104>
   27f94:	bl	14618 <__assert_fail@plt>
   27f98:	andeq	r4, r4, r4, ror #23
   27f9c:	andeq	r0, r0, r9, lsr #8
   27fa0:	andeq	r4, r4, r4, lsl #29
   27fa4:	andeq	r5, r4, r4, lsl r1

00027fa8 <flatcc_builder_start_table@@Base>:
   27fa8:	push	{r4, r5, r6, r7, lr}
   27fac:	mov	r5, r1
   27fb0:	ldr	r1, [r0, #156]	; 0x9c
   27fb4:	ldr	r3, [r0, #160]	; 0xa0
   27fb8:	add	r2, r1, #1
   27fbc:	cmp	r2, r3
   27fc0:	sub	sp, sp, #12
   27fc4:	mov	r4, r0
   27fc8:	str	r2, [r0, #156]	; 0x9c
   27fcc:	ble	2803c <flatcc_builder_start_table@@Base+0x94>
   27fd0:	ldr	r3, [r0, #176]	; 0xb0
   27fd4:	cmp	r3, #0
   27fd8:	cmpgt	r2, r3
   27fdc:	movgt	r3, #1
   27fe0:	movle	r3, #0
   27fe4:	bgt	281dc <flatcc_builder_start_table@@Base+0x234>
   27fe8:	add	r1, r1, r1, lsl #3
   27fec:	ldr	r0, [r0, #88]	; 0x58
   27ff0:	lsl	r6, r1, #2
   27ff4:	add	r2, r6, #36	; 0x24
   27ff8:	cmp	r2, r0
   27ffc:	bhi	281b8 <flatcc_builder_start_table@@Base+0x210>
   28000:	ldr	r3, [r4, #84]	; 0x54
   28004:	add	r3, r3, r6
   28008:	cmp	r3, #0
   2800c:	str	r3, [r4, #32]
   28010:	beq	281dc <flatcc_builder_start_table@@Base+0x234>
   28014:	ldr	r2, [r4, #88]	; 0x58
   28018:	ldr	r0, [pc, #452]	; 281e4 <flatcc_builder_start_table@@Base+0x23c>
   2801c:	ldr	r1, [r4, #176]	; 0xb0
   28020:	umull	r0, r2, r0, r2
   28024:	lsr	r2, r2, #3
   28028:	cmp	r2, r1
   2802c:	cmpgt	r1, #0
   28030:	str	r2, [r4, #160]	; 0xa0
   28034:	strgt	r1, [r4, #160]	; 0xa0
   28038:	b	28048 <flatcc_builder_start_table@@Base+0xa0>
   2803c:	ldr	r3, [r0, #32]
   28040:	add	r3, r3, #36	; 0x24
   28044:	str	r3, [r0, #32]
   28048:	ldr	ip, [r4, #20]
   2804c:	ldr	lr, [r4, #28]
   28050:	ldrh	r7, [r4, #130]	; 0x82
   28054:	ldr	r6, [r4, #4]
   28058:	ldr	r0, [r4, #52]	; 0x34
   2805c:	add	r2, ip, lr
   28060:	str	ip, [r3, #8]
   28064:	add	r2, r2, #7
   28068:	mov	ip, #4
   2806c:	strh	r7, [r3, #12]
   28070:	sub	r1, r6, r0
   28074:	strh	ip, [r4, #130]	; 0x82
   28078:	bic	r2, r2, #7
   2807c:	mvn	r6, #3
   28080:	mov	ip, #0
   28084:	str	lr, [r3]
   28088:	str	r6, [r3, #4]
   2808c:	str	r2, [r4, #28]
   28090:	str	ip, [r4, #20]
   28094:	str	r1, [r3, #16]
   28098:	ldr	lr, [r4, #76]	; 0x4c
   2809c:	ldr	r2, [r4]
   280a0:	add	r5, r5, #2
   280a4:	sub	r2, r2, lr
   280a8:	str	r2, [r3, #20]
   280ac:	ldr	r2, [r4, #12]
   280b0:	lsl	r5, r5, #1
   280b4:	str	r2, [r3, #24]
   280b8:	ldrh	r6, [r4, #8]
   280bc:	ldr	lr, [pc, #292]	; 281e8 <flatcc_builder_start_table@@Base+0x240>
   280c0:	strh	r6, [r3, #28]
   280c4:	add	r6, r1, r6, lsl #1
   280c8:	ldr	r1, [r4, #56]	; 0x38
   280cc:	add	r2, r6, r5
   280d0:	cmp	r2, r1
   280d4:	mov	r1, #3
   280d8:	strh	ip, [r4, #8]
   280dc:	str	lr, [r4, #12]
   280e0:	strh	r1, [r3, #14]
   280e4:	bhi	28168 <flatcc_builder_start_table@@Base+0x1c0>
   280e8:	adds	r6, r6, r0
   280ec:	streq	r6, [r4, #4]
   280f0:	beq	281dc <flatcc_builder_start_table@@Base+0x234>
   280f4:	ldr	r3, [r4, #32]
   280f8:	add	r6, r6, #4
   280fc:	str	r6, [r4, #4]
   28100:	ldr	r6, [r3, #20]
   28104:	sub	r2, r5, #3
   28108:	ldr	r3, [r4, #80]	; 0x50
   2810c:	add	r2, r2, r6
   28110:	cmp	r2, r3
   28114:	bhi	28190 <flatcc_builder_start_table@@Base+0x1e8>
   28118:	ldr	r3, [r4, #76]	; 0x4c
   2811c:	add	r3, r3, r6
   28120:	cmp	r3, #0
   28124:	str	r3, [r4]
   28128:	beq	281dc <flatcc_builder_start_table@@Base+0x234>
   2812c:	ldr	ip, [r4, #28]
   28130:	ldr	r3, [r4, #64]	; 0x40
   28134:	ldr	r2, [pc, #176]	; 281ec <flatcc_builder_start_table@@Base+0x244>
   28138:	sub	r3, r3, ip
   2813c:	ldr	r1, [r4, #60]	; 0x3c
   28140:	ldr	lr, [r4, #32]
   28144:	cmp	r3, r2
   28148:	mov	r0, #0
   2814c:	add	r1, r1, ip
   28150:	movcs	r3, r2
   28154:	str	r1, [r4, #16]
   28158:	str	r3, [r4, #24]
   2815c:	str	r2, [lr, #4]
   28160:	add	sp, sp, #12
   28164:	pop	{r4, r5, r6, r7, pc}
   28168:	ldr	r0, [r4, #40]	; 0x28
   2816c:	mov	r3, #1
   28170:	str	ip, [sp]
   28174:	add	r1, r4, #52	; 0x34
   28178:	ldr	r7, [r4, #48]	; 0x30
   2817c:	blx	r7
   28180:	cmp	r0, #0
   28184:	bne	281b4 <flatcc_builder_start_table@@Base+0x20c>
   28188:	ldr	r0, [r4, #52]	; 0x34
   2818c:	b	280e8 <flatcc_builder_start_table@@Base+0x140>
   28190:	mov	r3, #3
   28194:	ldr	r0, [r4, #40]	; 0x28
   28198:	add	r1, r4, #76	; 0x4c
   2819c:	str	r3, [sp]
   281a0:	mov	r3, #0
   281a4:	ldr	r5, [r4, #48]	; 0x30
   281a8:	blx	r5
   281ac:	cmp	r0, #0
   281b0:	beq	28118 <flatcc_builder_start_table@@Base+0x170>
   281b4:	bl	147a8 <__assert_fail@plt+0x190>
   281b8:	mov	r1, #4
   281bc:	ldr	r0, [r4, #40]	; 0x28
   281c0:	str	r1, [sp]
   281c4:	add	r1, r4, #84	; 0x54
   281c8:	ldr	r7, [r4, #48]	; 0x30
   281cc:	blx	r7
   281d0:	cmp	r0, #0
   281d4:	beq	28000 <flatcc_builder_start_table@@Base+0x58>
   281d8:	b	281b4 <flatcc_builder_start_table@@Base+0x20c>
   281dc:	mvn	r0, #0
   281e0:	b	28160 <flatcc_builder_start_table@@Base+0x1b8>
   281e4:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   281e8:	svccs	0x00693b52
   281ec:	strdeq	pc, [r0], -ip

000281f0 <flatcc_builder_create_vtable@@Base>:
   281f0:	push	{r4, r5, r6, lr}
   281f4:	sub	sp, sp, #80	; 0x50
   281f8:	mov	r3, #0
   281fc:	cmp	r2, #0
   28200:	str	r3, [sp, #8]
   28204:	str	r3, [sp, #12]
   28208:	mov	r4, r0
   2820c:	ldr	r3, [r0, #152]	; 0x98
   28210:	beq	28284 <flatcc_builder_create_vtable@@Base+0x94>
   28214:	mov	r0, #1
   28218:	cmp	r3, #0
   2821c:	str	r1, [sp, #16]
   28220:	str	r2, [sp, #8]
   28224:	str	r2, [sp, #20]
   28228:	str	r0, [sp, #12]
   2822c:	mov	r1, r2
   28230:	beq	2829c <flatcc_builder_create_vtable@@Base+0xac>
   28234:	ldr	r3, [r4, #136]	; 0x88
   28238:	sub	r5, r3, r2
   2823c:	cmp	r3, r5
   28240:	ble	28298 <flatcc_builder_create_vtable@@Base+0xa8>
   28244:	ldr	r0, [r4, #36]	; 0x24
   28248:	mov	r3, r5
   2824c:	str	r2, [sp]
   28250:	add	r1, sp, #16
   28254:	ldr	r6, [r4, #44]	; 0x2c
   28258:	mov	r2, #1
   2825c:	blx	r6
   28260:	cmp	r0, #0
   28264:	bne	28300 <flatcc_builder_create_vtable@@Base+0x110>
   28268:	cmp	r5, #0
   2826c:	str	r5, [r4, #136]	; 0x88
   28270:	beq	28278 <flatcc_builder_create_vtable@@Base+0x88>
   28274:	add	r5, r5, #1
   28278:	mov	r0, r5
   2827c:	add	sp, sp, #80	; 0x50
   28280:	pop	{r4, r5, r6, pc}
   28284:	cmp	r3, #0
   28288:	bne	28298 <flatcc_builder_create_vtable@@Base+0xa8>
   2828c:	ldr	r2, [r0, #180]	; 0xb4
   28290:	cmp	r2, #0
   28294:	beq	282f4 <flatcc_builder_create_vtable@@Base+0x104>
   28298:	bl	147f4 <__assert_fail@plt+0x1dc>
   2829c:	ldr	r3, [r4, #180]	; 0xb4
   282a0:	cmp	r3, #0
   282a4:	bne	28234 <flatcc_builder_create_vtable@@Base+0x44>
   282a8:	ldr	r5, [r4, #140]	; 0x8c
   282ac:	add	r3, r5, r2
   282b0:	cmp	r5, r3
   282b4:	str	r3, [r4, #140]	; 0x8c
   282b8:	movle	r2, r0
   282bc:	bgt	28314 <flatcc_builder_create_vtable@@Base+0x124>
   282c0:	ldr	r0, [r4, #36]	; 0x24
   282c4:	mov	r3, r5
   282c8:	str	r1, [sp]
   282cc:	add	r1, sp, #16
   282d0:	ldr	r4, [r4, #44]	; 0x2c
   282d4:	blx	r4
   282d8:	cmp	r0, #0
   282dc:	beq	28274 <flatcc_builder_create_vtable@@Base+0x84>
   282e0:	ldr	r3, [pc, #48]	; 28318 <flatcc_builder_create_vtable@@Base+0x128>
   282e4:	ldr	r2, [pc, #48]	; 2831c <flatcc_builder_create_vtable@@Base+0x12c>
   282e8:	ldr	r1, [pc, #48]	; 28320 <flatcc_builder_create_vtable@@Base+0x130>
   282ec:	ldr	r0, [pc, #48]	; 28324 <flatcc_builder_create_vtable@@Base+0x134>
   282f0:	bl	14618 <__assert_fail@plt>
   282f4:	ldr	r5, [r4, #140]	; 0x8c
   282f8:	mov	r1, r2
   282fc:	b	282c0 <flatcc_builder_create_vtable@@Base+0xd0>
   28300:	ldr	r3, [pc, #32]	; 28328 <flatcc_builder_create_vtable@@Base+0x138>
   28304:	ldr	r2, [pc, #32]	; 2832c <flatcc_builder_create_vtable@@Base+0x13c>
   28308:	ldr	r1, [pc, #16]	; 28320 <flatcc_builder_create_vtable@@Base+0x130>
   2830c:	ldr	r0, [pc, #16]	; 28324 <flatcc_builder_create_vtable@@Base+0x134>
   28310:	bl	14618 <__assert_fail@plt>
   28314:	bl	147cc <__assert_fail@plt+0x1b4>
   28318:	andeq	r4, r4, r4, asr #14
   2831c:	andeq	r0, r0, r5, lsr #5
   28320:	andeq	r4, r4, r4, lsl #29
   28324:	andeq	r4, r4, r4, asr #30
   28328:	andeq	r4, r4, r0, asr r7
   2832c:	andeq	r0, r0, fp, lsl #5

00028330 <flatcc_builder_create_cached_vtable@@Base>:
   28330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28334:	sub	sp, sp, #28
   28338:	ldr	r4, [r0, #116]	; 0x74
   2833c:	mov	sl, r3
   28340:	cmp	r4, #0
   28344:	mov	r8, r0
   28348:	str	r1, [sp, #8]
   2834c:	mov	r7, r2
   28350:	rsbne	r3, r4, #32
   28354:	beq	284ac <flatcc_builder_create_cached_vtable@@Base+0x17c>
   28358:	lsr	sl, sl, r3
   2835c:	ldr	r3, [r8, #92]	; 0x5c
   28360:	adds	r2, r3, sl, lsl #2
   28364:	str	r3, [sp, #16]
   28368:	str	r2, [sp, #20]
   2836c:	beq	284a0 <flatcc_builder_create_cached_vtable@@Base+0x170>
   28370:	ldr	r5, [r3, sl, lsl #2]
   28374:	cmp	r5, #0
   28378:	beq	2859c <flatcc_builder_create_cached_vtable@@Base+0x26c>
   2837c:	mov	r3, #0
   28380:	ldr	fp, [r8, #100]	; 0x64
   28384:	ldr	r6, [r8, #68]	; 0x44
   28388:	mov	r9, r2
   2838c:	str	r3, [sp, #12]
   28390:	b	283a4 <flatcc_builder_create_cached_vtable@@Base+0x74>
   28394:	ldr	r5, [r4, #12]
   28398:	add	r9, r4, #12
   2839c:	cmp	r5, #0
   283a0:	beq	283f4 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   283a4:	add	r4, fp, r5
   283a8:	ldr	r2, [r4, #8]
   283ac:	add	r1, r6, r2
   283b0:	ldrh	r2, [r6, r2]
   283b4:	cmp	r2, r7
   283b8:	bne	28394 <flatcc_builder_create_cached_vtable@@Base+0x64>
   283bc:	mov	r2, r7
   283c0:	ldr	r0, [sp, #8]
   283c4:	bl	14558 <memcmp@plt>
   283c8:	cmp	r0, #0
   283cc:	bne	28394 <flatcc_builder_create_cached_vtable@@Base+0x64>
   283d0:	ldr	r1, [r4, #4]
   283d4:	ldr	r2, [r8, #152]	; 0x98
   283d8:	cmp	r1, r2
   283dc:	beq	28470 <flatcc_builder_create_cached_vtable@@Base+0x140>
   283e0:	ldr	r5, [r4, #12]
   283e4:	add	r9, r4, #12
   283e8:	cmp	r5, #0
   283ec:	str	r4, [sp, #12]
   283f0:	bne	283a4 <flatcc_builder_create_cached_vtable@@Base+0x74>
   283f4:	ldr	r4, [r8, #124]	; 0x7c
   283f8:	ldr	r3, [r8, #104]	; 0x68
   283fc:	add	r2, r4, #16
   28400:	cmp	r2, r3
   28404:	bhi	28574 <flatcc_builder_create_cached_vtable@@Base+0x244>
   28408:	ldr	r5, [r8, #100]	; 0x64
   2840c:	adds	r6, r5, r4
   28410:	beq	284a0 <flatcc_builder_create_cached_vtable@@Base+0x170>
   28414:	ldr	r3, [r8, #124]	; 0x7c
   28418:	ldr	r0, [sp, #16]
   2841c:	ldr	r2, [r8, #152]	; 0x98
   28420:	add	r1, r3, #16
   28424:	str	r1, [r8, #124]	; 0x7c
   28428:	str	r2, [r6, #4]
   2842c:	ldr	r1, [r0, sl, lsl #2]
   28430:	mov	r2, r7
   28434:	str	r1, [r6, #12]
   28438:	str	r3, [r0, sl, lsl #2]
   2843c:	ldr	r1, [sp, #8]
   28440:	mov	r0, r8
   28444:	bl	281f0 <flatcc_builder_create_vtable@@Base>
   28448:	cmp	r0, #0
   2844c:	str	r0, [r5, r4]
   28450:	beq	284a0 <flatcc_builder_create_cached_vtable@@Base+0x170>
   28454:	ldr	r3, [sp, #12]
   28458:	cmp	r3, #0
   2845c:	beq	285a4 <flatcc_builder_create_cached_vtable@@Base+0x274>
   28460:	ldr	r3, [r3, #8]
   28464:	str	r3, [r6, #8]
   28468:	add	sp, sp, #28
   2846c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28470:	ldr	r3, [sp, #20]
   28474:	cmp	r3, r9
   28478:	beq	28494 <flatcc_builder_create_cached_vtable@@Base+0x164>
   2847c:	ldr	r2, [sp, #16]
   28480:	ldr	r3, [r4, #12]
   28484:	str	r3, [r9]
   28488:	ldr	r3, [r2, sl, lsl #2]
   2848c:	str	r3, [r4, #12]
   28490:	str	r5, [r2, sl, lsl #2]
   28494:	ldr	r0, [r4]
   28498:	add	sp, sp, #28
   2849c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   284a0:	mov	r0, #0
   284a4:	add	sp, sp, #28
   284a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   284ac:	ldr	r3, [r0, #124]	; 0x7c
   284b0:	add	r5, r0, #92	; 0x5c
   284b4:	cmp	r3, #0
   284b8:	bne	28668 <flatcc_builder_create_cached_vtable@@Base+0x338>
   284bc:	ldr	r3, [r0, #104]	; 0x68
   284c0:	cmp	r3, #15
   284c4:	bls	28548 <flatcc_builder_create_cached_vtable@@Base+0x218>
   284c8:	ldr	r3, [r8, #100]	; 0x64
   284cc:	cmp	r3, #0
   284d0:	beq	284a0 <flatcc_builder_create_cached_vtable@@Base+0x170>
   284d4:	mov	r2, #16
   284d8:	mov	r3, #5
   284dc:	str	r2, [r8, #124]	; 0x7c
   284e0:	ldr	r0, [r8, #40]	; 0x28
   284e4:	mov	r1, r5
   284e8:	str	r3, [sp]
   284ec:	mov	r2, #256	; 0x100
   284f0:	ldr	r5, [r8, #48]	; 0x30
   284f4:	mov	r3, #1
   284f8:	blx	r5
   284fc:	cmp	r0, #0
   28500:	bne	284a0 <flatcc_builder_create_cached_vtable@@Base+0x170>
   28504:	ldr	r1, [r8, #96]	; 0x60
   28508:	mov	r3, #256	; 0x100
   2850c:	b	28514 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   28510:	mov	r3, r2
   28514:	lsl	r2, r3, #1
   28518:	cmp	r2, r1
   2851c:	bls	28510 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   28520:	lsr	r3, r3, #2
   28524:	cmp	r3, #1
   28528:	bls	285f4 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   2852c:	mov	r2, #1
   28530:	add	r4, r4, #1
   28534:	cmp	r3, r2, lsl r4
   28538:	bhi	28530 <flatcc_builder_create_cached_vtable@@Base+0x200>
   2853c:	rsb	r3, r4, #32
   28540:	str	r4, [r8, #116]	; 0x74
   28544:	b	28358 <flatcc_builder_create_cached_vtable@@Base+0x28>
   28548:	mov	r3, #6
   2854c:	ldr	r0, [r0, #40]	; 0x28
   28550:	mov	r2, #16
   28554:	str	r3, [sp]
   28558:	add	r1, r8, #100	; 0x64
   2855c:	ldr	r6, [r8, #48]	; 0x30
   28560:	mov	r3, r4
   28564:	blx	r6
   28568:	cmp	r0, #0
   2856c:	beq	284c8 <flatcc_builder_create_cached_vtable@@Base+0x198>
   28570:	b	2865c <flatcc_builder_create_cached_vtable@@Base+0x32c>
   28574:	mov	r3, #6
   28578:	ldr	r0, [r8, #40]	; 0x28
   2857c:	add	r1, r8, #100	; 0x64
   28580:	str	r3, [sp]
   28584:	mov	r3, #0
   28588:	ldr	r5, [r8, #48]	; 0x30
   2858c:	blx	r5
   28590:	cmp	r0, #0
   28594:	beq	28408 <flatcc_builder_create_cached_vtable@@Base+0xd8>
   28598:	b	2865c <flatcc_builder_create_cached_vtable@@Base+0x32c>
   2859c:	str	r5, [sp, #12]
   285a0:	b	283f4 <flatcc_builder_create_cached_vtable@@Base+0xc4>
   285a4:	ldr	r3, [r8, #172]	; 0xac
   285a8:	ldr	r9, [r8, #120]	; 0x78
   285ac:	cmp	r3, #0
   285b0:	add	r2, r9, r7
   285b4:	beq	285fc <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   285b8:	cmp	r3, r2
   285bc:	bcs	285fc <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   285c0:	ldr	r3, [r8, #116]	; 0x74
   285c4:	cmp	r3, #0
   285c8:	beq	28468 <flatcc_builder_create_cached_vtable@@Base+0x138>
   285cc:	ldr	r6, [sp, #12]
   285d0:	ldr	r2, [r8, #96]	; 0x60
   285d4:	mov	r1, r6
   285d8:	ldr	r0, [r8, #92]	; 0x5c
   285dc:	bl	145c4 <memset@plt>
   285e0:	mov	r3, #16
   285e4:	ldr	r0, [r5, r4]
   285e8:	str	r6, [r8, #120]	; 0x78
   285ec:	str	r3, [r8, #124]	; 0x7c
   285f0:	b	28468 <flatcc_builder_create_cached_vtable@@Base+0x138>
   285f4:	mov	r3, #32
   285f8:	b	28540 <flatcc_builder_create_cached_vtable@@Base+0x210>
   285fc:	ldr	r3, [r8, #72]	; 0x48
   28600:	cmp	r3, r2
   28604:	bcc	28638 <flatcc_builder_create_cached_vtable@@Base+0x308>
   28608:	ldr	r3, [r8, #68]	; 0x44
   2860c:	adds	r0, r3, r9
   28610:	beq	28660 <flatcc_builder_create_cached_vtable@@Base+0x330>
   28614:	ldr	r3, [r8, #120]	; 0x78
   28618:	ldr	r1, [sp, #8]
   2861c:	add	ip, r3, r7
   28620:	str	r3, [r6, #8]
   28624:	mov	r2, r7
   28628:	str	ip, [r8, #120]	; 0x78
   2862c:	bl	1454c <memcpy@plt>
   28630:	ldr	r0, [r5, r4]
   28634:	b	28468 <flatcc_builder_create_cached_vtable@@Base+0x138>
   28638:	mov	r3, #2
   2863c:	ldr	r0, [r8, #40]	; 0x28
   28640:	add	r1, r8, #68	; 0x44
   28644:	str	r3, [sp]
   28648:	mov	r3, #0
   2864c:	ldr	sl, [r8, #48]	; 0x30
   28650:	blx	sl
   28654:	cmp	r0, #0
   28658:	beq	28608 <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   2865c:	bl	147a8 <__assert_fail@plt+0x190>
   28660:	mvn	r0, #0
   28664:	b	28468 <flatcc_builder_create_cached_vtable@@Base+0x138>
   28668:	ldr	r3, [pc, #12]	; 2867c <flatcc_builder_create_cached_vtable@@Base+0x34c>
   2866c:	ldr	r2, [pc, #12]	; 28680 <flatcc_builder_create_cached_vtable@@Base+0x350>
   28670:	ldr	r1, [pc, #12]	; 28684 <flatcc_builder_create_cached_vtable@@Base+0x354>
   28674:	ldr	r0, [pc, #12]	; 28688 <flatcc_builder_create_cached_vtable@@Base+0x358>
   28678:	bl	14618 <__assert_fail@plt>
   2867c:	andeq	r4, r4, r4, lsl #24
   28680:	andeq	r0, r0, r6, asr r1
   28684:	andeq	r4, r4, r4, lsl #29
   28688:	andeq	r5, r4, r0, lsr #2

0002868c <flatcc_builder_create_table@@Base>:
   2868c:	push	{r4, r5, r6, r7, r8, lr}
   28690:	sub	sp, sp, #88	; 0x58
   28694:	ldr	r4, [sp, #116]	; 0x74
   28698:	ldr	lr, [sp, #120]	; 0x78
   2869c:	cmp	r4, #0
   286a0:	blt	287d8 <flatcc_builder_create_table@@Base+0x14c>
   286a4:	mov	r8, r2
   286a8:	ands	r2, lr, #1
   286ac:	beq	28804 <flatcc_builder_create_table@@Base+0x178>
   286b0:	mov	r5, r0
   286b4:	ldrh	r0, [r0, #128]	; 0x80
   286b8:	cmp	r3, #4
   286bc:	movcc	r3, #4
   286c0:	ldr	ip, [r5, #136]	; 0x88
   286c4:	cmp	r0, r3
   286c8:	mvn	r0, #3
   286cc:	strhcc	r3, [r5, #128]	; 0x80
   286d0:	sub	r7, ip, r8
   286d4:	sub	r3, r3, #1
   286d8:	sub	r0, r0, r8
   286dc:	and	r7, r7, r3
   286e0:	add	r0, r0, ip
   286e4:	sub	lr, lr, #1
   286e8:	sub	r0, r0, r7
   286ec:	sub	lr, r0, lr
   286f0:	cmp	r4, #0
   286f4:	str	lr, [sp, #12]
   286f8:	beq	2872c <flatcc_builder_create_table@@Base+0xa0>
   286fc:	ldr	ip, [sp, #112]	; 0x70
   28700:	mvn	r6, #3
   28704:	add	r4, ip, r4, lsl #1
   28708:	sub	r6, r6, r0
   2870c:	ldrh	r3, [ip], #2
   28710:	sub	lr, r6, r3
   28714:	ldr	r0, [r1, r3]
   28718:	cmp	r4, ip
   2871c:	add	r0, r0, lr
   28720:	str	r0, [r1, r3]
   28724:	bne	2870c <flatcc_builder_create_table@@Base+0x80>
   28728:	ldr	ip, [r5, #136]	; 0x88
   2872c:	cmp	r8, #0
   28730:	mov	r3, #4
   28734:	mov	r0, #1
   28738:	str	r3, [sp, #16]
   2873c:	movne	r2, #2
   28740:	str	r3, [sp, #28]
   28744:	addne	r3, r8, r3
   28748:	str	r0, [sp, #20]
   2874c:	add	lr, sp, #12
   28750:	strne	r1, [sp, #32]
   28754:	strne	r8, [sp, #36]	; 0x24
   28758:	strne	r3, [sp, #16]
   2875c:	strne	r2, [sp, #20]
   28760:	movne	r0, #3
   28764:	moveq	r0, #2
   28768:	cmp	r7, #0
   2876c:	str	lr, [sp, #24]
   28770:	beq	2879c <flatcc_builder_create_table@@Base+0x110>
   28774:	add	r2, r2, #1
   28778:	add	r1, sp, #88	; 0x58
   2877c:	add	r1, r1, r2, lsl #3
   28780:	ldr	lr, [pc, #144]	; 28818 <flatcc_builder_create_table@@Base+0x18c>
   28784:	mov	r2, r0
   28788:	add	r3, r3, r7
   2878c:	str	r7, [r1, #-68]	; 0xffffffbc
   28790:	str	r3, [sp, #16]
   28794:	str	r0, [sp, #20]
   28798:	str	lr, [r1, #-72]	; 0xffffffb8
   2879c:	sub	r4, ip, r3
   287a0:	cmp	r4, ip
   287a4:	bge	28800 <flatcc_builder_create_table@@Base+0x174>
   287a8:	ldr	r0, [r5, #36]	; 0x24
   287ac:	add	r1, sp, #24
   287b0:	str	r3, [sp]
   287b4:	mov	r3, r4
   287b8:	ldr	r6, [r5, #44]	; 0x2c
   287bc:	blx	r6
   287c0:	cmp	r0, #0
   287c4:	bne	287ec <flatcc_builder_create_table@@Base+0x160>
   287c8:	mov	r0, r4
   287cc:	str	r4, [r5, #136]	; 0x88
   287d0:	add	sp, sp, #88	; 0x58
   287d4:	pop	{r4, r5, r6, r7, r8, pc}
   287d8:	ldr	r3, [pc, #60]	; 2881c <flatcc_builder_create_table@@Base+0x190>
   287dc:	ldr	r2, [pc, #60]	; 28820 <flatcc_builder_create_table@@Base+0x194>
   287e0:	ldr	r1, [pc, #60]	; 28824 <flatcc_builder_create_table@@Base+0x198>
   287e4:	ldr	r0, [pc, #60]	; 28828 <flatcc_builder_create_table@@Base+0x19c>
   287e8:	bl	14618 <__assert_fail@plt>
   287ec:	ldr	r3, [pc, #56]	; 2882c <flatcc_builder_create_table@@Base+0x1a0>
   287f0:	ldr	r2, [pc, #56]	; 28830 <flatcc_builder_create_table@@Base+0x1a4>
   287f4:	ldr	r1, [pc, #40]	; 28824 <flatcc_builder_create_table@@Base+0x198>
   287f8:	ldr	r0, [pc, #52]	; 28834 <flatcc_builder_create_table@@Base+0x1a8>
   287fc:	bl	14618 <__assert_fail@plt>
   28800:	bl	147f4 <__assert_fail@plt+0x1dc>
   28804:	ldr	r3, [pc, #16]	; 2881c <flatcc_builder_create_table@@Base+0x190>
   28808:	ldr	r2, [pc, #40]	; 28838 <flatcc_builder_create_table@@Base+0x1ac>
   2880c:	ldr	r1, [pc, #16]	; 28824 <flatcc_builder_create_table@@Base+0x198>
   28810:	ldr	r0, [pc, #36]	; 2883c <flatcc_builder_create_table@@Base+0x1b0>
   28814:	bl	14618 <__assert_fail@plt>
   28818:	andeq	r4, r4, ip, asr #15
   2881c:	andeq	r4, r4, r0, lsl ip
   28820:	ldrdeq	r0, [r0], -r5
   28824:	andeq	r4, r4, r4, lsl #29
   28828:	andeq	r5, r4, r0, lsr r1
   2882c:	andeq	r4, r4, r0, asr r7
   28830:	andeq	r0, r0, fp, lsl #5
   28834:	andeq	r4, r4, r4, asr #30
   28838:	ldrdeq	r0, [r0], -fp
   2883c:	andeq	r5, r4, r4, asr #2

00028840 <flatcc_builder_check_required_field@@Base>:
   28840:	ldr	r3, [r0, #32]
   28844:	ldrh	r3, [r3, #14]
   28848:	cmp	r3, #3
   2884c:	bne	28878 <flatcc_builder_check_required_field@@Base+0x38>
   28850:	ldrh	r3, [r0, #8]
   28854:	cmp	r3, r1
   28858:	movls	r0, #0
   2885c:	bls	28874 <flatcc_builder_check_required_field@@Base+0x34>
   28860:	ldr	r3, [r0, #4]
   28864:	lsl	r1, r1, #1
   28868:	ldrh	r0, [r3, r1]
   2886c:	adds	r0, r0, #0
   28870:	movne	r0, #1
   28874:	bx	lr
   28878:	push	{r4, lr}
   2887c:	ldr	r3, [pc, #12]	; 28890 <flatcc_builder_check_required_field@@Base+0x50>
   28880:	ldr	r2, [pc, #12]	; 28894 <flatcc_builder_check_required_field@@Base+0x54>
   28884:	ldr	r1, [pc, #12]	; 28898 <flatcc_builder_check_required_field@@Base+0x58>
   28888:	ldr	r0, [pc, #12]	; 2889c <flatcc_builder_check_required_field@@Base+0x5c>
   2888c:	bl	14618 <__assert_fail@plt>
   28890:	andeq	r4, r4, ip, lsr #24
   28894:	strdeq	r0, [r0], -r8
   28898:	andeq	r4, r4, r4, lsl #29
   2889c:	andeq	r5, r4, r0, asr r1

000288a0 <flatcc_builder_check_union_field@@Base>:
   288a0:	ldr	r3, [r0, #32]
   288a4:	ldrh	r3, [r3, #14]
   288a8:	cmp	r3, #3
   288ac:	bne	28928 <flatcc_builder_check_union_field@@Base+0x88>
   288b0:	cmp	r1, #0
   288b4:	beq	28900 <flatcc_builder_check_union_field@@Base+0x60>
   288b8:	ldrh	r3, [r0, #8]
   288bc:	cmp	r3, r1
   288c0:	bls	28900 <flatcc_builder_check_union_field@@Base+0x60>
   288c4:	sub	r1, r1, #-2147483647	; 0x80000001
   288c8:	ldr	r3, [r0, #4]
   288cc:	lsl	r1, r1, #1
   288d0:	ldrh	r2, [r3, r1]
   288d4:	cmp	r2, #0
   288d8:	beq	28914 <flatcc_builder_check_union_field@@Base+0x74>
   288dc:	ldr	r0, [r0, #16]
   288e0:	add	r1, r3, r1
   288e4:	ldrb	r2, [r0, r2]
   288e8:	ldrh	r1, [r1, #2]
   288ec:	cmp	r2, #0
   288f0:	bne	28908 <flatcc_builder_check_union_field@@Base+0x68>
   288f4:	clz	r0, r1
   288f8:	lsr	r0, r0, #5
   288fc:	bx	lr
   28900:	mov	r0, #0
   28904:	bx	lr
   28908:	adds	r0, r1, #0
   2890c:	movne	r0, #1
   28910:	b	28904 <flatcc_builder_check_union_field@@Base+0x64>
   28914:	add	r1, r3, r1
   28918:	ldrh	r1, [r1, #2]
   2891c:	clz	r0, r1
   28920:	lsr	r0, r0, #5
   28924:	bx	lr
   28928:	push	{r4, lr}
   2892c:	ldr	r3, [pc, #12]	; 28940 <flatcc_builder_check_union_field@@Base+0xa0>
   28930:	ldr	r2, [pc, #12]	; 28944 <flatcc_builder_check_union_field@@Base+0xa4>
   28934:	ldr	r1, [pc, #12]	; 28948 <flatcc_builder_check_union_field@@Base+0xa8>
   28938:	ldr	r0, [pc, #12]	; 2894c <flatcc_builder_check_union_field@@Base+0xac>
   2893c:	bl	14618 <__assert_fail@plt>
   28940:	andeq	r4, r4, r0, asr ip
   28944:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   28948:	andeq	r4, r4, r4, lsl #29
   2894c:	andeq	r5, r4, r0, asr r1

00028950 <flatcc_builder_check_required@@Base>:
   28950:	ldr	r3, [r0, #32]
   28954:	ldrh	r3, [r3, #14]
   28958:	cmp	r3, #3
   2895c:	bne	289c0 <flatcc_builder_check_required@@Base+0x70>
   28960:	ldrh	r3, [r0, #8]
   28964:	cmp	r3, r2
   28968:	movlt	r0, #0
   2896c:	blt	289bc <flatcc_builder_check_required@@Base+0x6c>
   28970:	cmp	r2, #0
   28974:	ble	289b8 <flatcc_builder_check_required@@Base+0x68>
   28978:	ldrh	r3, [r1]
   2897c:	ldr	ip, [r0, #4]
   28980:	lsl	r3, r3, #1
   28984:	ldrh	r0, [ip, r3]
   28988:	cmp	r0, #0
   2898c:	beq	289bc <flatcc_builder_check_required@@Base+0x6c>
   28990:	add	r2, r1, r2, lsl #1
   28994:	add	r1, r1, #2
   28998:	b	289b0 <flatcc_builder_check_required@@Base+0x60>
   2899c:	ldrh	r3, [r1], #2
   289a0:	lsl	r3, r3, #1
   289a4:	ldrh	r0, [ip, r3]
   289a8:	cmp	r0, #0
   289ac:	beq	289bc <flatcc_builder_check_required@@Base+0x6c>
   289b0:	cmp	r1, r2
   289b4:	bne	2899c <flatcc_builder_check_required@@Base+0x4c>
   289b8:	mov	r0, #1
   289bc:	bx	lr
   289c0:	push	{r4, lr}
   289c4:	ldr	r3, [pc, #12]	; 289d8 <flatcc_builder_check_required@@Base+0x88>
   289c8:	ldr	r2, [pc, #12]	; 289dc <flatcc_builder_check_required@@Base+0x8c>
   289cc:	ldr	r1, [pc, #12]	; 289e0 <flatcc_builder_check_required@@Base+0x90>
   289d0:	ldr	r0, [pc, #12]	; 289e4 <flatcc_builder_check_required@@Base+0x94>
   289d4:	bl	14618 <__assert_fail@plt>
   289d8:	andeq	r4, r4, r4, ror ip
   289dc:	andeq	r0, r0, r1, lsl r5
   289e0:	andeq	r4, r4, r4, lsl #29
   289e4:	andeq	r5, r4, r0, asr r1

000289e8 <flatcc_builder_end_table@@Base>:
   289e8:	ldr	r3, [r0, #32]
   289ec:	push	{r4, r5, r6, r7, lr}
   289f0:	sub	sp, sp, #20
   289f4:	ldrh	r3, [r3, #14]
   289f8:	cmp	r3, #3
   289fc:	bne	28b80 <flatcc_builder_end_table@@Base+0x198>
   28a00:	ldrh	r5, [r0, #8]
   28a04:	ldr	r3, [r0, #12]
   28a08:	ldr	r1, [pc, #388]	; 28b94 <flatcc_builder_end_table@@Base+0x1ac>
   28a0c:	add	r5, r5, #2
   28a10:	ldr	r2, [r0, #20]
   28a14:	lsl	r5, r5, #1
   28a18:	add	r2, r2, #4
   28a1c:	uxth	r5, r5
   28a20:	eor	r3, r3, r5
   28a24:	uxth	r2, r2
   28a28:	mul	r3, r1, r3
   28a2c:	ldr	ip, [r0, #4]
   28a30:	eor	r3, r3, r2
   28a34:	sub	r6, ip, #4
   28a38:	mul	r1, r1, r3
   28a3c:	strh	r2, [ip, #-2]
   28a40:	strh	r5, [ip, #-4]
   28a44:	mov	r3, r1
   28a48:	str	r1, [r0, #12]
   28a4c:	mov	r2, r5
   28a50:	mov	r1, r6
   28a54:	mov	r4, r0
   28a58:	bl	28330 <flatcc_builder_create_cached_vtable@@Base>
   28a5c:	subs	r7, r0, #0
   28a60:	bne	28a74 <flatcc_builder_end_table@@Base+0x8c>
   28a64:	mov	r5, #0
   28a68:	mov	r0, r5
   28a6c:	add	sp, sp, #20
   28a70:	pop	{r4, r5, r6, r7, pc}
   28a74:	mov	r2, r5
   28a78:	mov	r1, #0
   28a7c:	mov	r0, r6
   28a80:	bl	145c4 <memset@plt>
   28a84:	ldr	r3, [r4, #32]
   28a88:	ldr	ip, [r4, #76]	; 0x4c
   28a8c:	ldr	r0, [r4]
   28a90:	ldr	r2, [r3, #20]
   28a94:	ldr	r1, [r4, #16]
   28a98:	add	ip, ip, r2
   28a9c:	sub	r0, r0, ip
   28aa0:	ldrh	r3, [r4, #130]	; 0x82
   28aa4:	asr	r0, r0, #1
   28aa8:	ldr	r2, [r4, #20]
   28aac:	str	r0, [sp, #4]
   28ab0:	str	r7, [sp, #8]
   28ab4:	str	ip, [sp]
   28ab8:	mov	r0, r4
   28abc:	bl	2868c <flatcc_builder_create_table@@Base>
   28ac0:	subs	r5, r0, #0
   28ac4:	beq	28a64 <flatcc_builder_end_table@@Base+0x7c>
   28ac8:	ldr	r3, [r4, #32]
   28acc:	ldr	r0, [r4, #52]	; 0x34
   28ad0:	ldr	ip, [r4, #76]	; 0x4c
   28ad4:	ldr	r1, [r3, #24]
   28ad8:	ldr	r2, [r4, #20]
   28adc:	str	r1, [r4, #12]
   28ae0:	ldrh	lr, [r3, #28]
   28ae4:	mov	r1, #0
   28ae8:	strh	lr, [r4, #8]
   28aec:	ldr	lr, [r3, #16]
   28af0:	add	r0, r0, lr
   28af4:	str	r0, [r4, #4]
   28af8:	ldr	r3, [r3, #20]
   28afc:	ldr	r0, [r4, #16]
   28b00:	add	r3, ip, r3
   28b04:	str	r3, [r4]
   28b08:	bl	145c4 <memset@plt>
   28b0c:	ldr	r3, [r4, #32]
   28b10:	ldr	r2, [r4, #64]	; 0x40
   28b14:	ldrh	lr, [r4, #130]	; 0x82
   28b18:	ldr	ip, [r3]
   28b1c:	ldr	r1, [r3, #4]
   28b20:	ldrh	r0, [r4, #128]	; 0x80
   28b24:	sub	r2, r2, ip
   28b28:	cmp	r2, r1
   28b2c:	movcs	r2, r1
   28b30:	cmp	r0, lr
   28b34:	ldr	r0, [r4, #60]	; 0x3c
   28b38:	ldr	r6, [r3, #8]
   28b3c:	str	r2, [r4, #24]
   28b40:	add	r2, r0, ip
   28b44:	str	r2, [r4, #16]
   28b48:	str	r6, [r4, #20]
   28b4c:	ldr	r2, [r4, #156]	; 0x9c
   28b50:	str	ip, [r4, #28]
   28b54:	str	r1, [r3, #4]
   28b58:	strhcc	lr, [r4, #128]	; 0x80
   28b5c:	ldrh	r1, [r3, #12]
   28b60:	sub	r2, r2, #1
   28b64:	sub	r3, r3, #36	; 0x24
   28b68:	mov	r0, r5
   28b6c:	str	r2, [r4, #156]	; 0x9c
   28b70:	strh	r1, [r4, #130]	; 0x82
   28b74:	str	r3, [r4, #32]
   28b78:	add	sp, sp, #20
   28b7c:	pop	{r4, r5, r6, r7, pc}
   28b80:	ldr	r3, [pc, #16]	; 28b98 <flatcc_builder_end_table@@Base+0x1b0>
   28b84:	ldr	r2, [pc, #16]	; 28b9c <flatcc_builder_end_table@@Base+0x1b4>
   28b88:	ldr	r1, [pc, #16]	; 28ba0 <flatcc_builder_end_table@@Base+0x1b8>
   28b8c:	ldr	r0, [pc, #16]	; 28ba4 <flatcc_builder_end_table@@Base+0x1bc>
   28b90:	bl	14618 <__assert_fail@plt>
   28b94:			; <UNDEFINED> instruction: 0x9e3779b1
   28b98:	muleq	r4, r4, ip
   28b9c:	andeq	r0, r0, r5, lsr #10
   28ba0:	andeq	r4, r4, r4, lsl #29
   28ba4:	andeq	r5, r4, r0, asr r1

00028ba8 <flatcc_builder_create_vector@@Base>:
   28ba8:	push	{r4, r5, r6, lr}
   28bac:	sub	sp, sp, #88	; 0x58
   28bb0:	mov	r4, r0
   28bb4:	ldr	ip, [sp, #108]	; 0x6c
   28bb8:	ldrh	r0, [sp, #104]	; 0x68
   28bbc:	cmp	r2, ip
   28bc0:	bhi	28c9c <flatcc_builder_create_vector@@Base+0xf4>
   28bc4:	ldrh	ip, [r4, #128]	; 0x80
   28bc8:	mul	r3, r3, r2
   28bcc:	cmp	r0, #4
   28bd0:	movcc	r0, #4
   28bd4:	ldr	lr, [r4, #136]	; 0x88
   28bd8:	cmp	ip, r0
   28bdc:	sub	r6, lr, r3
   28be0:	mov	ip, #4
   28be4:	strhcc	r0, [r4, #128]	; 0x80
   28be8:	str	r2, [sp, #12]
   28bec:	cmp	r3, #0
   28bf0:	mov	r2, #1
   28bf4:	sub	r0, r0, #1
   28bf8:	str	ip, [sp, #16]
   28bfc:	str	r2, [sp, #20]
   28c00:	and	r0, r0, r6
   28c04:	movne	r2, #2
   28c08:	str	ip, [sp, #28]
   28c0c:	addne	ip, r3, ip
   28c10:	strne	r3, [sp, #36]	; 0x24
   28c14:	add	r5, sp, #12
   28c18:	strne	r1, [sp, #32]
   28c1c:	strne	ip, [sp, #16]
   28c20:	strne	r2, [sp, #20]
   28c24:	movne	r3, #3
   28c28:	moveq	r3, #2
   28c2c:	cmp	r0, #0
   28c30:	str	r5, [sp, #24]
   28c34:	beq	28c60 <flatcc_builder_create_vector@@Base+0xb8>
   28c38:	add	r2, r2, #1
   28c3c:	add	r1, sp, #88	; 0x58
   28c40:	add	r1, r1, r2, lsl #3
   28c44:	ldr	r5, [pc, #124]	; 28cc8 <flatcc_builder_create_vector@@Base+0x120>
   28c48:	mov	r2, r3
   28c4c:	add	ip, ip, r0
   28c50:	str	r0, [r1, #-68]	; 0xffffffbc
   28c54:	str	ip, [sp, #16]
   28c58:	str	r3, [sp, #20]
   28c5c:	str	r5, [r1, #-72]	; 0xffffffb8
   28c60:	sub	r5, lr, ip
   28c64:	cmp	lr, r5
   28c68:	ble	28cc4 <flatcc_builder_create_vector@@Base+0x11c>
   28c6c:	ldr	r0, [r4, #36]	; 0x24
   28c70:	mov	r3, r5
   28c74:	str	ip, [sp]
   28c78:	add	r1, sp, #24
   28c7c:	ldr	r6, [r4, #44]	; 0x2c
   28c80:	blx	r6
   28c84:	cmp	r0, #0
   28c88:	bne	28cb0 <flatcc_builder_create_vector@@Base+0x108>
   28c8c:	mov	r0, r5
   28c90:	str	r5, [r4, #136]	; 0x88
   28c94:	add	sp, sp, #88	; 0x58
   28c98:	pop	{r4, r5, r6, pc}
   28c9c:	ldr	r3, [pc, #40]	; 28ccc <flatcc_builder_create_vector@@Base+0x124>
   28ca0:	ldr	r2, [pc, #40]	; 28cd0 <flatcc_builder_create_vector@@Base+0x128>
   28ca4:	ldr	r1, [pc, #40]	; 28cd4 <flatcc_builder_create_vector@@Base+0x12c>
   28ca8:	ldr	r0, [pc, #40]	; 28cd8 <flatcc_builder_create_vector@@Base+0x130>
   28cac:	bl	14618 <__assert_fail@plt>
   28cb0:	ldr	r3, [pc, #36]	; 28cdc <flatcc_builder_create_vector@@Base+0x134>
   28cb4:	ldr	r2, [pc, #36]	; 28ce0 <flatcc_builder_create_vector@@Base+0x138>
   28cb8:	ldr	r1, [pc, #20]	; 28cd4 <flatcc_builder_create_vector@@Base+0x12c>
   28cbc:	ldr	r0, [pc, #32]	; 28ce4 <flatcc_builder_create_vector@@Base+0x13c>
   28cc0:	bl	14618 <__assert_fail@plt>
   28cc4:	bl	147f4 <__assert_fail@plt+0x1dc>
   28cc8:	andeq	r4, r4, ip, asr #15
   28ccc:			; <UNDEFINED> instruction: 0x00044cb0
   28cd0:	andeq	r0, r0, r5, asr r5
   28cd4:	andeq	r4, r4, r4, lsl #29
   28cd8:	andeq	r5, r4, ip, ror r1
   28cdc:	andeq	r4, r4, r0, asr r7
   28ce0:	andeq	r0, r0, fp, lsl #5
   28ce4:	andeq	r4, r4, r4, asr #30

00028ce8 <flatcc_builder_end_vector@@Base>:
   28ce8:	ldr	r3, [r0, #32]
   28cec:	push	{r4, r5, r6, lr}
   28cf0:	sub	sp, sp, #88	; 0x58
   28cf4:	ldrh	r2, [r3, #14]
   28cf8:	cmp	r2, #4
   28cfc:	bne	28ea0 <flatcc_builder_end_vector@@Base+0x1b8>
   28d00:	ldr	lr, [r3, #20]
   28d04:	ldr	r2, [r3, #24]
   28d08:	ldr	r1, [r3, #16]
   28d0c:	cmp	lr, r2
   28d10:	mov	r4, r0
   28d14:	ldr	r5, [r0, #16]
   28d18:	ldrh	r3, [r0, #130]	; 0x82
   28d1c:	bhi	28e8c <flatcc_builder_end_vector@@Base+0x1a4>
   28d20:	ldrh	r2, [r0, #128]	; 0x80
   28d24:	mul	r1, r1, lr
   28d28:	cmp	r3, #4
   28d2c:	movcc	r3, #4
   28d30:	ldr	ip, [r0, #136]	; 0x88
   28d34:	cmp	r2, r3
   28d38:	strhcc	r3, [r0, #128]	; 0x80
   28d3c:	sub	r2, r3, #1
   28d40:	sub	r0, ip, r1
   28d44:	cmp	r1, #0
   28d48:	mov	r3, #4
   28d4c:	and	r0, r0, r2
   28d50:	mov	r2, #1
   28d54:	str	r3, [sp, #16]
   28d58:	str	r2, [sp, #20]
   28d5c:	str	r3, [sp, #28]
   28d60:	movne	r2, #2
   28d64:	addne	r3, r1, r3
   28d68:	strne	r1, [sp, #36]	; 0x24
   28d6c:	str	lr, [sp, #12]
   28d70:	strne	r5, [sp, #32]
   28d74:	add	lr, sp, #12
   28d78:	strne	r3, [sp, #16]
   28d7c:	strne	r2, [sp, #20]
   28d80:	movne	r1, #3
   28d84:	moveq	r1, #2
   28d88:	cmp	r0, #0
   28d8c:	str	lr, [sp, #24]
   28d90:	beq	28dbc <flatcc_builder_end_vector@@Base+0xd4>
   28d94:	add	r2, r2, #1
   28d98:	add	lr, sp, #88	; 0x58
   28d9c:	add	lr, lr, r2, lsl #3
   28da0:	ldr	r5, [pc, #268]	; 28eb4 <flatcc_builder_end_vector@@Base+0x1cc>
   28da4:	mov	r2, r1
   28da8:	add	r3, r3, r0
   28dac:	str	r0, [lr, #-68]	; 0xffffffbc
   28db0:	str	r3, [sp, #16]
   28db4:	str	r1, [sp, #20]
   28db8:	str	r5, [lr, #-72]	; 0xffffffb8
   28dbc:	sub	r5, ip, r3
   28dc0:	cmp	ip, r5
   28dc4:	ble	28e88 <flatcc_builder_end_vector@@Base+0x1a0>
   28dc8:	ldr	r0, [r4, #36]	; 0x24
   28dcc:	add	r1, sp, #24
   28dd0:	str	r3, [sp]
   28dd4:	mov	r3, r5
   28dd8:	ldr	r6, [r4, #44]	; 0x2c
   28ddc:	blx	r6
   28de0:	subs	r1, r0, #0
   28de4:	bne	28e74 <flatcc_builder_end_vector@@Base+0x18c>
   28de8:	cmp	r5, #0
   28dec:	str	r5, [r4, #136]	; 0x88
   28df0:	beq	28e68 <flatcc_builder_end_vector@@Base+0x180>
   28df4:	ldr	r2, [r4, #20]
   28df8:	ldr	r0, [r4, #16]
   28dfc:	bl	145c4 <memset@plt>
   28e00:	ldr	r3, [r4, #32]
   28e04:	ldr	r2, [r4, #64]	; 0x40
   28e08:	ldrh	lr, [r4, #130]	; 0x82
   28e0c:	ldr	ip, [r3]
   28e10:	ldr	r1, [r3, #4]
   28e14:	ldrh	r0, [r4, #128]	; 0x80
   28e18:	sub	r2, r2, ip
   28e1c:	cmp	r2, r1
   28e20:	movcs	r2, r1
   28e24:	cmp	r0, lr
   28e28:	ldr	r0, [r4, #60]	; 0x3c
   28e2c:	ldr	r6, [r3, #8]
   28e30:	str	r2, [r4, #24]
   28e34:	add	r2, r0, ip
   28e38:	str	r2, [r4, #16]
   28e3c:	str	r6, [r4, #20]
   28e40:	ldr	r2, [r4, #156]	; 0x9c
   28e44:	str	ip, [r4, #28]
   28e48:	str	r1, [r3, #4]
   28e4c:	strhcc	lr, [r4, #128]	; 0x80
   28e50:	ldrh	r1, [r3, #12]
   28e54:	sub	r2, r2, #1
   28e58:	sub	r3, r3, #36	; 0x24
   28e5c:	str	r2, [r4, #156]	; 0x9c
   28e60:	strh	r1, [r4, #130]	; 0x82
   28e64:	str	r3, [r4, #32]
   28e68:	mov	r0, r5
   28e6c:	add	sp, sp, #88	; 0x58
   28e70:	pop	{r4, r5, r6, pc}
   28e74:	ldr	r3, [pc, #60]	; 28eb8 <flatcc_builder_end_vector@@Base+0x1d0>
   28e78:	ldr	r2, [pc, #60]	; 28ebc <flatcc_builder_end_vector@@Base+0x1d4>
   28e7c:	ldr	r1, [pc, #60]	; 28ec0 <flatcc_builder_end_vector@@Base+0x1d8>
   28e80:	ldr	r0, [pc, #60]	; 28ec4 <flatcc_builder_end_vector@@Base+0x1dc>
   28e84:	bl	14618 <__assert_fail@plt>
   28e88:	bl	147f4 <__assert_fail@plt+0x1dc>
   28e8c:	ldr	r3, [pc, #52]	; 28ec8 <flatcc_builder_end_vector@@Base+0x1e0>
   28e90:	ldr	r2, [pc, #52]	; 28ecc <flatcc_builder_end_vector@@Base+0x1e4>
   28e94:	ldr	r1, [pc, #36]	; 28ec0 <flatcc_builder_end_vector@@Base+0x1d8>
   28e98:	ldr	r0, [pc, #48]	; 28ed0 <flatcc_builder_end_vector@@Base+0x1e8>
   28e9c:	bl	14618 <__assert_fail@plt>
   28ea0:	ldr	r3, [pc, #44]	; 28ed4 <flatcc_builder_end_vector@@Base+0x1ec>
   28ea4:	ldr	r2, [pc, #44]	; 28ed8 <flatcc_builder_end_vector@@Base+0x1f0>
   28ea8:	ldr	r1, [pc, #16]	; 28ec0 <flatcc_builder_end_vector@@Base+0x1d8>
   28eac:	ldr	r0, [pc, #40]	; 28edc <flatcc_builder_end_vector@@Base+0x1f4>
   28eb0:	bl	14618 <__assert_fail@plt>
   28eb4:	andeq	r4, r4, ip, asr #15
   28eb8:	andeq	r4, r4, r0, asr r7
   28ebc:	andeq	r0, r0, fp, lsl #5
   28ec0:	andeq	r4, r4, r4, lsl #29
   28ec4:	andeq	r4, r4, r4, asr #30
   28ec8:			; <UNDEFINED> instruction: 0x00044cb0
   28ecc:	andeq	r0, r0, r5, asr r5
   28ed0:	andeq	r5, r4, ip, ror r1
   28ed4:	ldrdeq	r4, [r4], -r0
   28ed8:	andeq	r0, r0, r8, ror r5
   28edc:	strdeq	r4, [r4], -r0

00028ee0 <flatcc_builder_vector_count@@Base>:
   28ee0:	ldr	r3, [r0, #32]
   28ee4:	ldr	r0, [r3, #20]
   28ee8:	bx	lr

00028eec <flatcc_builder_vector_edit@@Base>:
   28eec:	ldr	r0, [r0, #16]
   28ef0:	bx	lr

00028ef4 <flatcc_builder_create_offset_vector_direct@@Base>:
   28ef4:	cmn	r2, #-1073741823	; 0xc0000001
   28ef8:	bls	28f04 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   28efc:	mov	r0, #0
   28f00:	bx	lr
   28f04:	b	256c8 <flatcc_builder_default_alloc@@Base+0x2fc>

00028f08 <flatcc_builder_end_offset_vector@@Base>:
   28f08:	ldr	r3, [r0, #32]
   28f0c:	push	{r4, r5, r6, lr}
   28f10:	ldrh	r2, [r3, #14]
   28f14:	cmp	r2, #5
   28f18:	bne	28fc8 <flatcc_builder_end_offset_vector@@Base+0xc0>
   28f1c:	ldr	r2, [r3, #20]
   28f20:	cmn	r2, #-1073741823	; 0xc0000001
   28f24:	bls	28f34 <flatcc_builder_end_offset_vector@@Base+0x2c>
   28f28:	mov	r5, #0
   28f2c:	mov	r0, r5
   28f30:	pop	{r4, r5, r6, pc}
   28f34:	ldr	r1, [r0, #16]
   28f38:	mov	r4, r0
   28f3c:	bl	256c8 <flatcc_builder_default_alloc@@Base+0x2fc>
   28f40:	subs	r5, r0, #0
   28f44:	beq	28f28 <flatcc_builder_end_offset_vector@@Base+0x20>
   28f48:	ldr	r2, [r4, #20]
   28f4c:	mov	r1, #0
   28f50:	ldr	r0, [r4, #16]
   28f54:	bl	145c4 <memset@plt>
   28f58:	ldr	r3, [r4, #32]
   28f5c:	ldr	r2, [r4, #64]	; 0x40
   28f60:	ldrh	lr, [r4, #130]	; 0x82
   28f64:	ldr	ip, [r3]
   28f68:	ldr	r1, [r3, #4]
   28f6c:	ldrh	r0, [r4, #128]	; 0x80
   28f70:	sub	r2, r2, ip
   28f74:	cmp	r2, r1
   28f78:	movcs	r2, r1
   28f7c:	cmp	r0, lr
   28f80:	ldr	r0, [r4, #60]	; 0x3c
   28f84:	ldr	r6, [r3, #8]
   28f88:	str	r2, [r4, #24]
   28f8c:	add	r2, r0, ip
   28f90:	str	r2, [r4, #16]
   28f94:	str	r6, [r4, #20]
   28f98:	ldr	r2, [r4, #156]	; 0x9c
   28f9c:	str	ip, [r4, #28]
   28fa0:	str	r1, [r3, #4]
   28fa4:	strhcc	lr, [r4, #128]	; 0x80
   28fa8:	ldrh	r1, [r3, #12]
   28fac:	sub	r2, r2, #1
   28fb0:	sub	r3, r3, #36	; 0x24
   28fb4:	str	r2, [r4, #156]	; 0x9c
   28fb8:	strh	r1, [r4, #130]	; 0x82
   28fbc:	str	r3, [r4, #32]
   28fc0:	mov	r0, r5
   28fc4:	pop	{r4, r5, r6, pc}
   28fc8:	ldr	r3, [pc, #12]	; 28fdc <flatcc_builder_end_offset_vector@@Base+0xd4>
   28fcc:	ldr	r2, [pc, #12]	; 28fe0 <flatcc_builder_end_offset_vector@@Base+0xd8>
   28fd0:	ldr	r1, [pc, #12]	; 28fe4 <flatcc_builder_end_offset_vector@@Base+0xdc>
   28fd4:	ldr	r0, [pc, #12]	; 28fe8 <flatcc_builder_end_offset_vector@@Base+0xe0>
   28fd8:	bl	14618 <__assert_fail@plt>
   28fdc:	andeq	r4, r4, r0, asr #23
   28fe0:	andeq	r0, r0, r8, asr #11
   28fe4:	andeq	r4, r4, r4, lsl #29
   28fe8:	andeq	r5, r4, ip, asr r0

00028fec <flatcc_builder_end_offset_vector_for_unions@@Base>:
   28fec:	ldr	r2, [r0, #32]
   28ff0:	push	{r4, r5, r6, lr}
   28ff4:	ldrh	ip, [r2, #14]
   28ff8:	cmp	ip, #5
   28ffc:	bne	290b0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   29000:	ldr	r2, [r2, #20]
   29004:	cmn	r2, #-1073741823	; 0xc0000001
   29008:	bls	29018 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   2900c:	mov	r5, #0
   29010:	mov	r0, r5
   29014:	pop	{r4, r5, r6, pc}
   29018:	mov	r3, r1
   2901c:	ldr	r1, [r0, #16]
   29020:	mov	r4, r0
   29024:	bl	254d8 <flatcc_builder_default_alloc@@Base+0x10c>
   29028:	subs	r5, r0, #0
   2902c:	beq	2900c <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   29030:	ldr	r2, [r4, #20]
   29034:	mov	r1, #0
   29038:	ldr	r0, [r4, #16]
   2903c:	bl	145c4 <memset@plt>
   29040:	ldr	r3, [r4, #32]
   29044:	ldr	r2, [r4, #64]	; 0x40
   29048:	ldrh	lr, [r4, #130]	; 0x82
   2904c:	ldr	ip, [r3]
   29050:	ldr	r1, [r3, #4]
   29054:	ldrh	r0, [r4, #128]	; 0x80
   29058:	sub	r2, r2, ip
   2905c:	cmp	r2, r1
   29060:	movcs	r2, r1
   29064:	cmp	r0, lr
   29068:	ldr	r0, [r4, #60]	; 0x3c
   2906c:	ldr	r6, [r3, #8]
   29070:	str	r2, [r4, #24]
   29074:	add	r2, r0, ip
   29078:	str	r2, [r4, #16]
   2907c:	str	r6, [r4, #20]
   29080:	ldr	r2, [r4, #156]	; 0x9c
   29084:	str	ip, [r4, #28]
   29088:	str	r1, [r3, #4]
   2908c:	strhcc	lr, [r4, #128]	; 0x80
   29090:	ldrh	r1, [r3, #12]
   29094:	sub	r2, r2, #1
   29098:	sub	r3, r3, #36	; 0x24
   2909c:	str	r2, [r4, #156]	; 0x9c
   290a0:	strh	r1, [r4, #130]	; 0x82
   290a4:	str	r3, [r4, #32]
   290a8:	mov	r0, r5
   290ac:	pop	{r4, r5, r6, pc}
   290b0:	ldr	r3, [pc, #12]	; 290c4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   290b4:	ldr	r2, [pc, #12]	; 290c8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   290b8:	ldr	r1, [pc, #12]	; 290cc <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   290bc:	ldr	r0, [pc, #12]	; 290d0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe4>
   290c0:	bl	14618 <__assert_fail@plt>
   290c4:	andeq	r4, r4, ip, ror #25
   290c8:	ldrdeq	r0, [r0], -r5
   290cc:	andeq	r4, r4, r4, lsl #29
   290d0:	andeq	r5, r4, ip, asr r0

000290d4 <flatcc_builder_offset_vector_edit@@Base>:
   290d4:	ldr	r0, [r0, #16]
   290d8:	bx	lr

000290dc <flatcc_builder_offset_vector_count@@Base>:
   290dc:	ldr	r3, [r0, #32]
   290e0:	ldr	r0, [r3, #20]
   290e4:	bx	lr

000290e8 <flatcc_builder_create_union_vector@@Base>:
   290e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   290ec:	mov	r6, r0
   290f0:	ldr	r0, [r1, #156]	; 0x9c
   290f4:	ldr	ip, [r1, #160]	; 0xa0
   290f8:	mov	r4, r1
   290fc:	add	r1, r0, #1
   29100:	cmp	r1, ip
   29104:	sub	sp, sp, #12
   29108:	mov	r5, r2
   2910c:	mov	r7, r3
   29110:	str	r1, [r4, #156]	; 0x9c
   29114:	ble	2919c <flatcc_builder_create_union_vector@@Base+0xb4>
   29118:	ldr	r3, [r4, #176]	; 0xb0
   2911c:	cmp	r1, r3
   29120:	cmpgt	r3, #0
   29124:	movgt	r3, #1
   29128:	movle	r3, #0
   2912c:	bgt	29184 <flatcc_builder_create_union_vector@@Base+0x9c>
   29130:	add	r0, r0, r0, lsl #3
   29134:	ldr	r1, [r4, #88]	; 0x58
   29138:	lsl	r8, r0, #2
   2913c:	add	r2, r8, #36	; 0x24
   29140:	cmp	r2, r1
   29144:	bhi	293b8 <flatcc_builder_create_union_vector@@Base+0x2d0>
   29148:	ldr	r3, [r4, #84]	; 0x54
   2914c:	add	r3, r3, r8
   29150:	cmp	r3, #0
   29154:	str	r3, [r4, #32]
   29158:	beq	29184 <flatcc_builder_create_union_vector@@Base+0x9c>
   2915c:	ldr	r2, [r4, #88]	; 0x58
   29160:	ldr	r0, [pc, #732]	; 29444 <flatcc_builder_create_union_vector@@Base+0x35c>
   29164:	ldr	r1, [r4, #176]	; 0xb0
   29168:	umull	r0, r2, r0, r2
   2916c:	lsr	r2, r2, #3
   29170:	cmp	r1, #0
   29174:	cmpgt	r2, r1
   29178:	str	r2, [r4, #160]	; 0xa0
   2917c:	strgt	r1, [r4, #160]	; 0xa0
   29180:	b	291a8 <flatcc_builder_create_union_vector@@Base+0xc0>
   29184:	mov	r3, #0
   29188:	mov	r0, r6
   2918c:	str	r3, [r6]
   29190:	str	r3, [r6, #4]
   29194:	add	sp, sp, #12
   29198:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2919c:	ldr	r3, [r4, #32]
   291a0:	add	r3, r3, #36	; 0x24
   291a4:	str	r3, [r4, #32]
   291a8:	ldr	r1, [r4, #20]
   291ac:	ldr	ip, [r4, #28]
   291b0:	ldrh	r8, [r4, #130]	; 0x82
   291b4:	add	r2, r1, ip
   291b8:	mvn	lr, #3
   291bc:	add	r2, r2, #7
   291c0:	str	r1, [r3, #8]
   291c4:	bic	r2, r2, #7
   291c8:	mov	r0, #4
   291cc:	mov	r1, #0
   291d0:	strh	r8, [r3, #12]
   291d4:	strh	r0, [r4, #130]	; 0x82
   291d8:	stm	r3, {ip, lr}
   291dc:	str	r1, [r4, #20]
   291e0:	str	r2, [r4, #28]
   291e4:	str	r0, [r3, #16]
   291e8:	str	r1, [r3, #20]
   291ec:	ldr	r0, [r4, #64]	; 0x40
   291f0:	ldr	r1, [r4, #60]	; 0x3c
   291f4:	sub	r0, r0, r2
   291f8:	cmp	r0, lr
   291fc:	mov	ip, #5
   29200:	strh	ip, [r3, #14]
   29204:	add	r1, r1, r2
   29208:	strls	r0, [r4, #24]
   2920c:	strhi	lr, [r4, #24]
   29210:	movhi	r0, lr
   29214:	mvn	r8, #3
   29218:	cmn	r7, #-1073741823	; 0xc0000001
   2921c:	str	r1, [r4, #16]
   29220:	str	r8, [r3, #4]
   29224:	bhi	29438 <flatcc_builder_create_union_vector@@Base+0x350>
   29228:	lsl	ip, r7, #2
   2922c:	cmp	ip, r0
   29230:	str	r7, [r3, #20]
   29234:	str	ip, [r4, #20]
   29238:	bcs	29360 <flatcc_builder_create_union_vector@@Base+0x278>
   2923c:	cmp	r1, #0
   29240:	beq	29184 <flatcc_builder_create_union_vector@@Base+0x9c>
   29244:	ldr	r8, [r4, #20]
   29248:	ldr	r0, [r4, #24]
   2924c:	add	r3, r7, r8
   29250:	cmp	r3, r0
   29254:	str	r3, [r4, #20]
   29258:	bcs	293dc <flatcc_builder_create_union_vector@@Base+0x2f4>
   2925c:	adds	r8, r1, r8
   29260:	beq	29184 <flatcc_builder_create_union_vector@@Base+0x9c>
   29264:	cmp	r7, #0
   29268:	movne	r2, r5
   2926c:	addne	lr, r2, r7, lsl #3
   29270:	subne	r0, r8, #1
   29274:	subne	r3, r1, #4
   29278:	beq	29298 <flatcc_builder_create_union_vector@@Base+0x1b0>
   2927c:	ldrb	ip, [r2]
   29280:	add	r2, r2, #8
   29284:	strb	ip, [r0, #1]!
   29288:	ldr	ip, [r2, #-4]
   2928c:	cmp	lr, r2
   29290:	str	ip, [r3, #4]!
   29294:	bne	2927c <flatcc_builder_create_union_vector@@Base+0x194>
   29298:	mov	r3, r8
   2929c:	mov	r2, r7
   292a0:	mov	r0, r4
   292a4:	bl	254d8 <flatcc_builder_default_alloc@@Base+0x10c>
   292a8:	subs	r5, r0, #0
   292ac:	beq	2943c <flatcc_builder_create_union_vector@@Base+0x354>
   292b0:	mvn	r0, #0
   292b4:	mov	r3, #1
   292b8:	mov	r2, r7
   292bc:	str	r0, [sp, #4]
   292c0:	mov	r1, r8
   292c4:	str	r3, [sp]
   292c8:	mov	r0, r4
   292cc:	bl	28ba8 <flatcc_builder_create_vector@@Base>
   292d0:	mov	r7, r0
   292d4:	ldr	r2, [r4, #20]
   292d8:	mov	r1, #0
   292dc:	ldr	r0, [r4, #16]
   292e0:	bl	145c4 <memset@plt>
   292e4:	ldr	r3, [r4, #32]
   292e8:	ldr	r2, [r4, #64]	; 0x40
   292ec:	ldrh	lr, [r4, #130]	; 0x82
   292f0:	ldr	ip, [r3]
   292f4:	ldr	r1, [r3, #4]
   292f8:	ldrh	r0, [r4, #128]	; 0x80
   292fc:	sub	r2, r2, ip
   29300:	cmp	r2, r1
   29304:	movcs	r2, r1
   29308:	cmp	r0, lr
   2930c:	ldr	r0, [r4, #60]	; 0x3c
   29310:	ldr	r8, [r3, #8]
   29314:	str	r2, [r4, #24]
   29318:	add	r2, r0, ip
   2931c:	str	r2, [r4, #16]
   29320:	str	r8, [r4, #20]
   29324:	ldr	r2, [r4, #156]	; 0x9c
   29328:	str	ip, [r4, #28]
   2932c:	str	r1, [r3, #4]
   29330:	strhcc	lr, [r4, #128]	; 0x80
   29334:	ldrh	r1, [r3, #12]
   29338:	sub	r2, r2, #1
   2933c:	sub	r3, r3, #36	; 0x24
   29340:	mov	r0, r6
   29344:	str	r7, [r6]
   29348:	str	r5, [r6, #4]
   2934c:	str	r2, [r4, #156]	; 0x9c
   29350:	strh	r1, [r4, #130]	; 0x82
   29354:	str	r3, [r4, #32]
   29358:	add	sp, sp, #12
   2935c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   29360:	add	ip, ip, #1
   29364:	mov	r3, #1
   29368:	ldr	r0, [r4, #40]	; 0x28
   2936c:	add	r2, ip, r2
   29370:	str	r3, [sp]
   29374:	add	r1, r4, #60	; 0x3c
   29378:	ldr	r9, [r4, #48]	; 0x30
   2937c:	blx	r9
   29380:	cmp	r0, #0
   29384:	bne	29184 <flatcc_builder_create_union_vector@@Base+0x9c>
   29388:	ldr	r2, [r4, #28]
   2938c:	ldr	r3, [r4, #64]	; 0x40
   29390:	ldr	r1, [r4, #60]	; 0x3c
   29394:	sub	r3, r3, r2
   29398:	ldr	r0, [r4, #32]
   2939c:	cmn	r3, #4
   293a0:	movhi	r3, r8
   293a4:	add	r1, r1, r2
   293a8:	str	r3, [r4, #24]
   293ac:	str	r1, [r4, #16]
   293b0:	str	r8, [r0, #4]
   293b4:	b	2923c <flatcc_builder_create_union_vector@@Base+0x154>
   293b8:	mov	r1, #4
   293bc:	ldr	r0, [r4, #40]	; 0x28
   293c0:	str	r1, [sp]
   293c4:	add	r1, r4, #84	; 0x54
   293c8:	ldr	r9, [r4, #48]	; 0x30
   293cc:	blx	r9
   293d0:	cmp	r0, #0
   293d4:	beq	29148 <flatcc_builder_create_union_vector@@Base+0x60>
   293d8:	bl	147a8 <__assert_fail@plt+0x190>
   293dc:	add	r1, r3, #1
   293e0:	mov	r3, #1
   293e4:	ldr	r0, [r4, #40]	; 0x28
   293e8:	add	r2, r1, r2
   293ec:	str	r3, [sp]
   293f0:	add	r1, r4, #60	; 0x3c
   293f4:	ldr	r9, [r4, #48]	; 0x30
   293f8:	blx	r9
   293fc:	cmp	r0, #0
   29400:	bne	29184 <flatcc_builder_create_union_vector@@Base+0x9c>
   29404:	ldr	r2, [r4, #28]
   29408:	ldr	r3, [r4, #64]	; 0x40
   2940c:	ldr	r1, [r4, #60]	; 0x3c
   29410:	sub	r3, r3, r2
   29414:	cmn	r3, #4
   29418:	mvnhi	r3, #3
   2941c:	str	r3, [r4, #24]
   29420:	ldr	r3, [r4, #32]
   29424:	add	r1, r1, r2
   29428:	mvn	r2, #3
   2942c:	str	r1, [r4, #16]
   29430:	str	r2, [r3, #4]
   29434:	b	2925c <flatcc_builder_create_union_vector@@Base+0x174>
   29438:	bl	1481c <__assert_fail@plt+0x204>
   2943c:	mov	r7, r5
   29440:	b	292d4 <flatcc_builder_create_union_vector@@Base+0x1ec>
   29444:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00029448 <flatcc_builder_create_union_vector_direct@@Base>:
   29448:	push	{r4, r5, r6, r7, r8, lr}
   2944c:	sub	sp, sp, #88	; 0x58
   29450:	mov	r4, r0
   29454:	ldr	r5, [sp, #112]	; 0x70
   29458:	cmn	r5, #-1073741823	; 0xc0000001
   2945c:	bls	29478 <flatcc_builder_create_union_vector_direct@@Base+0x30>
   29460:	mov	r3, #0
   29464:	mov	r0, r4
   29468:	str	r3, [r4]
   2946c:	str	r3, [r4, #4]
   29470:	add	sp, sp, #88	; 0x58
   29474:	pop	{r4, r5, r6, r7, r8, pc}
   29478:	mov	r6, r1
   2947c:	mov	r8, r2
   29480:	mov	r1, r3
   29484:	mov	r0, r6
   29488:	mov	r3, r2
   2948c:	mov	r2, r5
   29490:	bl	254d8 <flatcc_builder_default_alloc@@Base+0x10c>
   29494:	subs	r7, r0, #0
   29498:	beq	29460 <flatcc_builder_create_union_vector_direct@@Base+0x18>
   2949c:	ldrh	r3, [r6, #128]	; 0x80
   294a0:	ldr	r0, [r6, #136]	; 0x88
   294a4:	mov	r2, #1
   294a8:	cmp	r3, #3
   294ac:	movls	r3, #4
   294b0:	strhls	r3, [r6, #128]	; 0x80
   294b4:	sub	r1, r0, r5
   294b8:	cmp	r5, #0
   294bc:	mov	r3, #4
   294c0:	add	ip, sp, #12
   294c4:	str	r3, [sp, #16]
   294c8:	str	r2, [sp, #20]
   294cc:	and	r1, r1, #3
   294d0:	movne	r2, #2
   294d4:	str	r3, [sp, #28]
   294d8:	addne	r3, r5, r3
   294dc:	str	ip, [sp, #24]
   294e0:	strne	r8, [sp, #32]
   294e4:	strne	r5, [sp, #36]	; 0x24
   294e8:	strne	r3, [sp, #16]
   294ec:	strne	r2, [sp, #20]
   294f0:	movne	ip, #3
   294f4:	moveq	ip, #2
   294f8:	cmp	r1, #0
   294fc:	str	r5, [sp, #12]
   29500:	beq	2952c <flatcc_builder_create_union_vector_direct@@Base+0xe4>
   29504:	add	r2, r2, #1
   29508:	add	lr, sp, #88	; 0x58
   2950c:	add	lr, lr, r2, lsl #3
   29510:	ldr	r5, [pc, #108]	; 29584 <flatcc_builder_create_union_vector_direct@@Base+0x13c>
   29514:	mov	r2, ip
   29518:	add	r3, r3, r1
   2951c:	str	r1, [lr, #-68]	; 0xffffffbc
   29520:	str	r3, [sp, #16]
   29524:	str	ip, [sp, #20]
   29528:	str	r5, [lr, #-72]	; 0xffffffb8
   2952c:	sub	r5, r0, r3
   29530:	cmp	r0, r5
   29534:	ble	2956c <flatcc_builder_create_union_vector_direct@@Base+0x124>
   29538:	ldr	r0, [r6, #36]	; 0x24
   2953c:	add	r1, sp, #24
   29540:	str	r3, [sp]
   29544:	mov	r3, r5
   29548:	ldr	r8, [r6, #44]	; 0x2c
   2954c:	blx	r8
   29550:	cmp	r0, #0
   29554:	bne	29570 <flatcc_builder_create_union_vector_direct@@Base+0x128>
   29558:	mov	r0, r4
   2955c:	str	r5, [r6, #136]	; 0x88
   29560:	stm	r4, {r5, r7}
   29564:	add	sp, sp, #88	; 0x58
   29568:	pop	{r4, r5, r6, r7, r8, pc}
   2956c:	bl	147f4 <__assert_fail@plt+0x1dc>
   29570:	ldr	r3, [pc, #16]	; 29588 <flatcc_builder_create_union_vector_direct@@Base+0x140>
   29574:	ldr	r2, [pc, #16]	; 2958c <flatcc_builder_create_union_vector_direct@@Base+0x144>
   29578:	ldr	r1, [pc, #16]	; 29590 <flatcc_builder_create_union_vector_direct@@Base+0x148>
   2957c:	ldr	r0, [pc, #16]	; 29594 <flatcc_builder_create_union_vector_direct@@Base+0x14c>
   29580:	bl	14618 <__assert_fail@plt>
   29584:	andeq	r4, r4, ip, asr #15
   29588:	andeq	r4, r4, r0, asr r7
   2958c:	andeq	r0, r0, fp, lsl #5
   29590:	andeq	r4, r4, r4, lsl #29
   29594:	andeq	r4, r4, r4, asr #30

00029598 <flatcc_builder_start_union_vector@@Base>:
   29598:	ldr	r1, [r0, #156]	; 0x9c
   2959c:	ldr	r3, [r0, #160]	; 0xa0
   295a0:	add	r2, r1, #1
   295a4:	cmp	r2, r3
   295a8:	push	{r4, r5, r6, lr}
   295ac:	mov	r4, r0
   295b0:	sub	sp, sp, #8
   295b4:	str	r2, [r0, #156]	; 0x9c
   295b8:	ble	29628 <flatcc_builder_start_union_vector@@Base+0x90>
   295bc:	ldr	r3, [r0, #176]	; 0xb0
   295c0:	cmp	r3, #0
   295c4:	cmpgt	r2, r3
   295c8:	movgt	r3, #1
   295cc:	movle	r3, #0
   295d0:	bgt	296d4 <flatcc_builder_start_union_vector@@Base+0x13c>
   295d4:	add	r1, r1, r1, lsl #3
   295d8:	ldr	r0, [r0, #88]	; 0x58
   295dc:	lsl	r5, r1, #2
   295e0:	add	r2, r5, #36	; 0x24
   295e4:	cmp	r2, r0
   295e8:	bhi	296b0 <flatcc_builder_start_union_vector@@Base+0x118>
   295ec:	ldr	r3, [r4, #84]	; 0x54
   295f0:	add	r3, r3, r5
   295f4:	cmp	r3, #0
   295f8:	str	r3, [r4, #32]
   295fc:	beq	296d4 <flatcc_builder_start_union_vector@@Base+0x13c>
   29600:	ldr	r2, [r4, #88]	; 0x58
   29604:	ldr	r0, [pc, #208]	; 296dc <flatcc_builder_start_union_vector@@Base+0x144>
   29608:	ldr	r1, [r4, #176]	; 0xb0
   2960c:	umull	r0, r2, r0, r2
   29610:	lsr	r2, r2, #3
   29614:	cmp	r1, #0
   29618:	cmpgt	r2, r1
   2961c:	str	r2, [r4, #160]	; 0xa0
   29620:	strgt	r1, [r4, #160]	; 0xa0
   29624:	b	29634 <flatcc_builder_start_union_vector@@Base+0x9c>
   29628:	ldr	r3, [r0, #32]
   2962c:	add	r3, r3, #36	; 0x24
   29630:	str	r3, [r0, #32]
   29634:	ldr	ip, [r4, #20]
   29638:	ldr	r1, [r4, #28]
   2963c:	ldrh	r5, [r4, #130]	; 0x82
   29640:	add	r2, ip, r1
   29644:	add	r2, r2, #7
   29648:	str	ip, [r3, #8]
   2964c:	bic	r2, r2, #7
   29650:	mov	lr, #4
   29654:	mov	r0, #0
   29658:	mov	ip, #8
   2965c:	strh	r5, [r3, #12]
   29660:	strh	lr, [r4, #130]	; 0x82
   29664:	str	r1, [r3]
   29668:	str	r2, [r4, #28]
   2966c:	str	r0, [r4, #20]
   29670:	str	r0, [r3, #20]
   29674:	str	ip, [r3, #16]
   29678:	ldr	r1, [r4, #64]	; 0x40
   2967c:	ldr	ip, [r4, #60]	; 0x3c
   29680:	sub	r1, r1, r2
   29684:	mvn	lr, #3
   29688:	cmp	r1, lr
   2968c:	add	r2, ip, r2
   29690:	movhi	r1, lr
   29694:	mov	ip, #7
   29698:	strh	ip, [r3, #14]
   2969c:	str	r2, [r4, #16]
   296a0:	str	r1, [r4, #24]
   296a4:	str	lr, [r3, #4]
   296a8:	add	sp, sp, #8
   296ac:	pop	{r4, r5, r6, pc}
   296b0:	mov	r1, #4
   296b4:	ldr	r0, [r4, #40]	; 0x28
   296b8:	str	r1, [sp]
   296bc:	add	r1, r4, #84	; 0x54
   296c0:	ldr	r6, [r4, #48]	; 0x30
   296c4:	blx	r6
   296c8:	cmp	r0, #0
   296cc:	beq	295ec <flatcc_builder_start_union_vector@@Base+0x54>
   296d0:	bl	147a8 <__assert_fail@plt+0x190>
   296d4:	mvn	r0, #0
   296d8:	b	296a8 <flatcc_builder_start_union_vector@@Base+0x110>
   296dc:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

000296e0 <flatcc_builder_end_union_vector@@Base>:
   296e0:	ldr	r3, [r1, #32]
   296e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   296e8:	sub	sp, sp, #12
   296ec:	ldrh	r2, [r3, #14]
   296f0:	cmp	r2, #7
   296f4:	bne	298b4 <flatcc_builder_end_union_vector@@Base+0x1d4>
   296f8:	ldr	r5, [r3, #20]
   296fc:	ldr	r8, [r1, #20]
   29700:	ldr	r3, [r1, #24]
   29704:	lsl	r7, r5, #2
   29708:	add	r2, r7, r5
   2970c:	add	r2, r2, r8
   29710:	cmp	r2, r3
   29714:	mov	r4, r1
   29718:	mov	r6, r0
   2971c:	str	r2, [r1, #20]
   29720:	bcs	297fc <flatcc_builder_end_union_vector@@Base+0x11c>
   29724:	ldr	r3, [r1, #16]
   29728:	adds	r1, r3, r8
   2972c:	beq	2989c <flatcc_builder_end_union_vector@@Base+0x1bc>
   29730:	cmp	r5, #0
   29734:	add	r7, r1, r7
   29738:	addne	lr, r3, r5, lsl #3
   2973c:	subne	r0, r7, #1
   29740:	subne	r2, r1, #4
   29744:	beq	2985c <flatcc_builder_end_union_vector@@Base+0x17c>
   29748:	ldrb	ip, [r3]
   2974c:	add	r3, r3, #8
   29750:	strb	ip, [r0, #1]!
   29754:	ldr	ip, [r3, #-4]
   29758:	cmp	lr, r3
   2975c:	str	ip, [r2, #4]!
   29760:	bne	29748 <flatcc_builder_end_union_vector@@Base+0x68>
   29764:	cmn	r5, #-1073741823	; 0xc0000001
   29768:	bls	2985c <flatcc_builder_end_union_vector@@Base+0x17c>
   2976c:	mov	r8, #0
   29770:	mov	r5, r8
   29774:	ldr	r2, [r4, #20]
   29778:	mov	r1, #0
   2977c:	ldr	r0, [r4, #16]
   29780:	bl	145c4 <memset@plt>
   29784:	ldr	r3, [r4, #32]
   29788:	ldr	r2, [r4, #64]	; 0x40
   2978c:	ldrh	lr, [r4, #130]	; 0x82
   29790:	ldr	ip, [r3]
   29794:	ldr	r1, [r3, #4]
   29798:	ldrh	r0, [r4, #128]	; 0x80
   2979c:	sub	r2, r2, ip
   297a0:	cmp	r2, r1
   297a4:	movcs	r2, r1
   297a8:	cmp	r0, lr
   297ac:	ldr	r0, [r4, #60]	; 0x3c
   297b0:	ldr	r7, [r3, #8]
   297b4:	str	r2, [r4, #24]
   297b8:	add	r2, r0, ip
   297bc:	str	r2, [r4, #16]
   297c0:	str	r7, [r4, #20]
   297c4:	ldr	r2, [r4, #156]	; 0x9c
   297c8:	str	ip, [r4, #28]
   297cc:	str	r1, [r3, #4]
   297d0:	strhcc	lr, [r4, #128]	; 0x80
   297d4:	ldrh	r1, [r3, #12]
   297d8:	sub	r2, r2, #1
   297dc:	sub	r3, r3, #36	; 0x24
   297e0:	mov	r0, r6
   297e4:	stm	r6, {r5, r8}
   297e8:	str	r2, [r4, #156]	; 0x9c
   297ec:	strh	r1, [r4, #130]	; 0x82
   297f0:	str	r3, [r4, #32]
   297f4:	add	sp, sp, #12
   297f8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   297fc:	ldr	r1, [r1, #28]
   29800:	mov	r3, #1
   29804:	add	r1, r1, #1
   29808:	ldr	r0, [r4, #40]	; 0x28
   2980c:	add	r2, r1, r2
   29810:	str	r3, [sp]
   29814:	add	r1, r4, #60	; 0x3c
   29818:	ldr	r9, [r4, #48]	; 0x30
   2981c:	blx	r9
   29820:	cmp	r0, #0
   29824:	bne	2989c <flatcc_builder_end_union_vector@@Base+0x1bc>
   29828:	ldr	r1, [r4, #28]
   2982c:	ldr	r2, [r4, #64]	; 0x40
   29830:	ldr	r3, [r4, #60]	; 0x3c
   29834:	sub	r2, r2, r1
   29838:	cmn	r2, #4
   2983c:	mvnhi	r2, #3
   29840:	str	r2, [r4, #24]
   29844:	ldr	r2, [r4, #32]
   29848:	add	r3, r3, r1
   2984c:	mvn	r1, #3
   29850:	str	r3, [r4, #16]
   29854:	str	r1, [r2, #4]
   29858:	b	29728 <flatcc_builder_end_union_vector@@Base+0x48>
   2985c:	mov	r3, r7
   29860:	mov	r2, r5
   29864:	mov	r0, r4
   29868:	bl	254d8 <flatcc_builder_default_alloc@@Base+0x10c>
   2986c:	subs	r8, r0, #0
   29870:	beq	2976c <flatcc_builder_end_union_vector@@Base+0x8c>
   29874:	mvn	r0, #0
   29878:	mov	r3, #1
   2987c:	mov	r2, r5
   29880:	str	r0, [sp, #4]
   29884:	mov	r1, r7
   29888:	str	r3, [sp]
   2988c:	mov	r0, r4
   29890:	bl	28ba8 <flatcc_builder_create_vector@@Base>
   29894:	mov	r5, r0
   29898:	b	29774 <flatcc_builder_end_union_vector@@Base+0x94>
   2989c:	mov	r3, #0
   298a0:	mov	r0, r6
   298a4:	str	r3, [r6]
   298a8:	str	r3, [r6, #4]
   298ac:	add	sp, sp, #12
   298b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   298b4:	ldr	r3, [pc, #12]	; 298c8 <flatcc_builder_end_union_vector@@Base+0x1e8>
   298b8:	ldr	r2, [pc, #12]	; 298cc <flatcc_builder_end_union_vector@@Base+0x1ec>
   298bc:	ldr	r1, [pc, #12]	; 298d0 <flatcc_builder_end_union_vector@@Base+0x1f0>
   298c0:	ldr	r0, [pc, #12]	; 298d4 <flatcc_builder_end_union_vector@@Base+0x1f4>
   298c4:	bl	14618 <__assert_fail@plt>
   298c8:	andeq	r4, r4, r8, lsl sp
   298cc:	andeq	r0, r0, r1, asr r6
   298d0:	andeq	r4, r4, r4, lsl #29
   298d4:	muleq	r4, r0, r1

000298d8 <flatcc_builder_union_vector_edit@@Base>:
   298d8:	ldr	r0, [r0, #16]
   298dc:	bx	lr

000298e0 <flatcc_builder_union_vector_count@@Base>:
   298e0:	ldr	r3, [r0, #32]
   298e4:	ldr	r0, [r3, #20]
   298e8:	bx	lr

000298ec <flatcc_builder_extend_union_vector@@Base>:
   298ec:	ldr	ip, [r0, #32]
   298f0:	push	{r4, r5, r6, r7, lr}
   298f4:	mov	r4, r0
   298f8:	ldr	r3, [ip, #20]
   298fc:	sub	sp, sp, #12
   29900:	adds	r3, r1, r3
   29904:	movcs	r2, #1
   29908:	movcc	r2, #0
   2990c:	cmn	r3, #-536870911	; 0xe0000001
   29910:	movls	r0, #0
   29914:	movhi	r0, #1
   29918:	orrs	r5, r2, r0
   2991c:	bne	299b4 <flatcc_builder_extend_union_vector@@Base+0xc8>
   29920:	str	r3, [ip, #20]
   29924:	ldr	r6, [r4, #20]
   29928:	ldr	r3, [r4, #24]
   2992c:	add	r1, r6, r1, lsl #3
   29930:	cmp	r1, r3
   29934:	str	r1, [r4, #20]
   29938:	bcs	2994c <flatcc_builder_extend_union_vector@@Base+0x60>
   2993c:	ldr	r0, [r4, #16]
   29940:	add	r0, r0, r6
   29944:	add	sp, sp, #12
   29948:	pop	{r4, r5, r6, r7, pc}
   2994c:	ldr	r2, [r4, #28]
   29950:	mov	r3, #1
   29954:	add	r2, r2, #1
   29958:	ldr	r0, [r4, #40]	; 0x28
   2995c:	add	r2, r2, r1
   29960:	str	r3, [sp]
   29964:	add	r1, r4, #60	; 0x3c
   29968:	ldr	r7, [r4, #48]	; 0x30
   2996c:	blx	r7
   29970:	cmp	r0, #0
   29974:	bne	299ac <flatcc_builder_extend_union_vector@@Base+0xc0>
   29978:	ldr	r2, [r4, #28]
   2997c:	ldr	r3, [r4, #64]	; 0x40
   29980:	ldr	r0, [r4, #60]	; 0x3c
   29984:	sub	r3, r3, r2
   29988:	cmn	r3, #4
   2998c:	mvnhi	r3, #3
   29990:	str	r3, [r4, #24]
   29994:	ldr	r3, [r4, #32]
   29998:	add	r0, r0, r2
   2999c:	mvn	r2, #3
   299a0:	str	r0, [r4, #16]
   299a4:	str	r2, [r3, #4]
   299a8:	b	29940 <flatcc_builder_extend_union_vector@@Base+0x54>
   299ac:	mov	r0, r5
   299b0:	b	29944 <flatcc_builder_extend_union_vector@@Base+0x58>
   299b4:	bl	1481c <__assert_fail@plt+0x204>

000299b8 <flatcc_builder_truncate_union_vector@@Base>:
   299b8:	ldr	r3, [r0, #32]
   299bc:	push	{r4, lr}
   299c0:	ldrh	r2, [r3, #14]
   299c4:	cmp	r2, #7
   299c8:	bne	29a0c <flatcc_builder_truncate_union_vector@@Base+0x54>
   299cc:	ldr	ip, [r3, #20]
   299d0:	cmp	ip, r1
   299d4:	bcc	29a20 <flatcc_builder_truncate_union_vector@@Base+0x68>
   299d8:	ldr	r2, [r3, #16]
   299dc:	sub	ip, ip, r1
   299e0:	str	ip, [r3, #20]
   299e4:	mul	r2, r2, r1
   299e8:	ldr	r3, [r0, #20]
   299ec:	ldr	r1, [r0, #16]
   299f0:	sub	r3, r3, r2
   299f4:	str	r3, [r0, #20]
   299f8:	add	r0, r1, r3
   299fc:	mov	r1, #0
   29a00:	bl	145c4 <memset@plt>
   29a04:	mov	r0, #0
   29a08:	pop	{r4, pc}
   29a0c:	ldr	r3, [pc, #32]	; 29a34 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   29a10:	ldr	r2, [pc, #32]	; 29a38 <flatcc_builder_truncate_union_vector@@Base+0x80>
   29a14:	ldr	r1, [pc, #32]	; 29a3c <flatcc_builder_truncate_union_vector@@Base+0x84>
   29a18:	ldr	r0, [pc, #32]	; 29a40 <flatcc_builder_truncate_union_vector@@Base+0x88>
   29a1c:	bl	14618 <__assert_fail@plt>
   29a20:	ldr	r3, [pc, #12]	; 29a34 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   29a24:	ldr	r2, [pc, #24]	; 29a44 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   29a28:	ldr	r1, [pc, #12]	; 29a3c <flatcc_builder_truncate_union_vector@@Base+0x84>
   29a2c:	ldr	r0, [pc, #20]	; 29a48 <flatcc_builder_truncate_union_vector@@Base+0x90>
   29a30:	bl	14618 <__assert_fail@plt>
   29a34:	andeq	r4, r4, r8, lsr sp
   29a38:	andeq	r0, r0, r1, lsl #13
   29a3c:	andeq	r4, r4, r4, lsl #29
   29a40:	muleq	r4, r0, r1
   29a44:	andeq	r0, r0, r2, lsl #13
   29a48:	strheq	r5, [r4], -r4

00029a4c <flatcc_builder_union_vector_push@@Base>:
   29a4c:	push	{r4, r5, r6, r7, lr}
   29a50:	mov	r4, r0
   29a54:	ldr	r0, [r0, #32]
   29a58:	sub	sp, sp, #20
   29a5c:	add	r5, sp, #8
   29a60:	ldrh	r3, [r0, #14]
   29a64:	stm	r5, {r1, r2}
   29a68:	cmp	r3, #7
   29a6c:	bne	29b30 <flatcc_builder_union_vector_push@@Base+0xe4>
   29a70:	ldr	r3, [r0, #20]
   29a74:	cmn	r3, #-536870911	; 0xe0000001
   29a78:	beq	29b20 <flatcc_builder_union_vector_push@@Base+0xd4>
   29a7c:	add	r3, r3, #1
   29a80:	str	r3, [r0, #20]
   29a84:	ldr	r6, [r4, #20]
   29a88:	ldr	r2, [r4, #24]
   29a8c:	add	r3, r6, #8
   29a90:	cmp	r3, r2
   29a94:	str	r3, [r4, #20]
   29a98:	bcs	29ac0 <flatcc_builder_union_vector_push@@Base+0x74>
   29a9c:	ldr	r3, [r4, #16]
   29aa0:	adds	r3, r3, r6
   29aa4:	movne	r2, r3
   29aa8:	ldmne	r5, {r0, r1}
   29aac:	moveq	r2, r3
   29ab0:	stmne	r3, {r0, r1}
   29ab4:	mov	r0, r2
   29ab8:	add	sp, sp, #20
   29abc:	pop	{r4, r5, r6, r7, pc}
   29ac0:	ldr	r2, [r4, #28]
   29ac4:	mov	r3, #1
   29ac8:	add	r2, r6, r2
   29acc:	ldr	r0, [r4, #40]	; 0x28
   29ad0:	add	r2, r2, #9
   29ad4:	str	r3, [sp]
   29ad8:	add	r1, r4, #60	; 0x3c
   29adc:	ldr	r7, [r4, #48]	; 0x30
   29ae0:	blx	r7
   29ae4:	cmp	r0, #0
   29ae8:	bne	29b20 <flatcc_builder_union_vector_push@@Base+0xd4>
   29aec:	ldr	r1, [r4, #28]
   29af0:	ldr	r2, [r4, #64]	; 0x40
   29af4:	ldr	r3, [r4, #60]	; 0x3c
   29af8:	sub	r2, r2, r1
   29afc:	cmn	r2, #4
   29b00:	mvnhi	r2, #3
   29b04:	str	r2, [r4, #24]
   29b08:	ldr	r2, [r4, #32]
   29b0c:	add	r3, r3, r1
   29b10:	mvn	r1, #3
   29b14:	str	r3, [r4, #16]
   29b18:	str	r1, [r2, #4]
   29b1c:	b	29aa0 <flatcc_builder_union_vector_push@@Base+0x54>
   29b20:	mov	r2, #0
   29b24:	mov	r0, r2
   29b28:	add	sp, sp, #20
   29b2c:	pop	{r4, r5, r6, r7, pc}
   29b30:	ldr	r3, [pc, #12]	; 29b44 <flatcc_builder_union_vector_push@@Base+0xf8>
   29b34:	ldr	r2, [pc, #12]	; 29b48 <flatcc_builder_union_vector_push@@Base+0xfc>
   29b38:	ldr	r1, [pc, #12]	; 29b4c <flatcc_builder_union_vector_push@@Base+0x100>
   29b3c:	ldr	r0, [pc, #12]	; 29b50 <flatcc_builder_union_vector_push@@Base+0x104>
   29b40:	bl	14618 <__assert_fail@plt>
   29b44:	andeq	r4, r4, r0, ror #26
   29b48:	andeq	r0, r0, sp, lsl #13
   29b4c:	andeq	r4, r4, r4, lsl #29
   29b50:	muleq	r4, r0, r1

00029b54 <flatcc_builder_append_union_vector@@Base>:
   29b54:	push	{r4, r5, r6, r7, r8, r9, lr}
   29b58:	mov	r5, r0
   29b5c:	ldr	r0, [r0, #32]
   29b60:	sub	sp, sp, #12
   29b64:	ldrh	r3, [r0, #14]
   29b68:	cmp	r3, #7
   29b6c:	bne	29c50 <flatcc_builder_append_union_vector@@Base+0xfc>
   29b70:	mov	r7, r1
   29b74:	ldr	r1, [r0, #20]
   29b78:	adds	r1, r2, r1
   29b7c:	movcs	r4, #1
   29b80:	movcc	r4, #0
   29b84:	cmn	r1, #-536870911	; 0xe0000001
   29b88:	movls	r3, #0
   29b8c:	movhi	r3, #1
   29b90:	orrs	r4, r4, r3
   29b94:	bne	29c4c <flatcc_builder_append_union_vector@@Base+0xf8>
   29b98:	str	r1, [r0, #20]
   29b9c:	ldr	r8, [r5, #20]
   29ba0:	lsl	r6, r2, #3
   29ba4:	ldr	r3, [r5, #24]
   29ba8:	add	r1, r6, r8
   29bac:	cmp	r1, r3
   29bb0:	str	r1, [r5, #20]
   29bb4:	bcs	29be4 <flatcc_builder_append_union_vector@@Base+0x90>
   29bb8:	ldr	r3, [r5, #16]
   29bbc:	adds	r3, r3, r8
   29bc0:	beq	29bd8 <flatcc_builder_append_union_vector@@Base+0x84>
   29bc4:	mov	r0, r3
   29bc8:	mov	r2, r6
   29bcc:	mov	r1, r7
   29bd0:	bl	1454c <memcpy@plt>
   29bd4:	mov	r3, r0
   29bd8:	mov	r0, r3
   29bdc:	add	sp, sp, #12
   29be0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   29be4:	ldr	r2, [r5, #28]
   29be8:	mov	r3, #1
   29bec:	add	r2, r2, #1
   29bf0:	ldr	r0, [r5, #40]	; 0x28
   29bf4:	add	r2, r2, r1
   29bf8:	str	r3, [sp]
   29bfc:	add	r1, r5, #60	; 0x3c
   29c00:	ldr	r9, [r5, #48]	; 0x30
   29c04:	blx	r9
   29c08:	cmp	r0, #0
   29c0c:	bne	29c44 <flatcc_builder_append_union_vector@@Base+0xf0>
   29c10:	ldr	r1, [r5, #28]
   29c14:	ldr	r2, [r5, #64]	; 0x40
   29c18:	ldr	r3, [r5, #60]	; 0x3c
   29c1c:	sub	r2, r2, r1
   29c20:	cmn	r2, #4
   29c24:	mvnhi	r2, #3
   29c28:	str	r2, [r5, #24]
   29c2c:	ldr	r2, [r5, #32]
   29c30:	add	r3, r3, r1
   29c34:	mvn	r1, #3
   29c38:	str	r3, [r5, #16]
   29c3c:	str	r1, [r2, #4]
   29c40:	b	29bbc <flatcc_builder_append_union_vector@@Base+0x68>
   29c44:	mov	r3, r4
   29c48:	b	29bd8 <flatcc_builder_append_union_vector@@Base+0x84>
   29c4c:	bl	1481c <__assert_fail@plt+0x204>
   29c50:	ldr	r3, [pc, #12]	; 29c64 <flatcc_builder_append_union_vector@@Base+0x110>
   29c54:	ldr	r2, [pc, #12]	; 29c68 <flatcc_builder_append_union_vector@@Base+0x114>
   29c58:	ldr	r1, [pc, #12]	; 29c6c <flatcc_builder_append_union_vector@@Base+0x118>
   29c5c:	ldr	r0, [pc, #12]	; 29c70 <flatcc_builder_append_union_vector@@Base+0x11c>
   29c60:	bl	14618 <__assert_fail@plt>
   29c64:	andeq	r4, r4, r4, lsl #27
   29c68:	muleq	r0, ip, r6
   29c6c:	andeq	r4, r4, r4, lsl #29
   29c70:	muleq	r4, r0, r1

00029c74 <flatcc_builder_create_string@@Base>:
   29c74:	push	{r4, r5, r6, lr}
   29c78:	sub	sp, sp, #88	; 0x58
   29c7c:	ldr	lr, [r0, #136]	; 0x88
   29c80:	mov	r4, r0
   29c84:	add	r0, sp, #88	; 0x58
   29c88:	cmp	r2, #0
   29c8c:	sub	r3, lr, r2
   29c90:	str	r2, [r0, #-76]!	; 0xffffffb4
   29c94:	sub	r3, r3, #1
   29c98:	str	r0, [sp, #24]
   29c9c:	moveq	r0, #1
   29ca0:	strne	r1, [sp, #32]
   29ca4:	mov	ip, #4
   29ca8:	moveq	r1, r0
   29cac:	movne	r1, #2
   29cb0:	and	r3, r3, #3
   29cb4:	str	ip, [sp, #28]
   29cb8:	add	r3, r3, #1
   29cbc:	addne	ip, r2, ip
   29cc0:	add	r1, r1, #1
   29cc4:	add	ip, ip, r3
   29cc8:	add	r0, sp, #88	; 0x58
   29ccc:	add	r1, r0, r1, lsl #3
   29cd0:	sub	r5, lr, ip
   29cd4:	ldr	r0, [pc, #104]	; 29d44 <flatcc_builder_create_string@@Base+0xd0>
   29cd8:	strne	r2, [sp, #36]	; 0x24
   29cdc:	moveq	r2, #2
   29ce0:	movne	r2, #3
   29ce4:	cmp	lr, r5
   29ce8:	str	r3, [r1, #-68]	; 0xffffffbc
   29cec:	str	ip, [sp, #16]
   29cf0:	str	r2, [sp, #20]
   29cf4:	str	r0, [r1, #-72]	; 0xffffffb8
   29cf8:	ble	29d2c <flatcc_builder_create_string@@Base+0xb8>
   29cfc:	ldr	r0, [r4, #36]	; 0x24
   29d00:	mov	r3, r5
   29d04:	str	ip, [sp]
   29d08:	add	r1, sp, #24
   29d0c:	ldr	r6, [r4, #44]	; 0x2c
   29d10:	blx	r6
   29d14:	cmp	r0, #0
   29d18:	bne	29d30 <flatcc_builder_create_string@@Base+0xbc>
   29d1c:	mov	r0, r5
   29d20:	str	r5, [r4, #136]	; 0x88
   29d24:	add	sp, sp, #88	; 0x58
   29d28:	pop	{r4, r5, r6, pc}
   29d2c:	bl	147f4 <__assert_fail@plt+0x1dc>
   29d30:	ldr	r3, [pc, #16]	; 29d48 <flatcc_builder_create_string@@Base+0xd4>
   29d34:	ldr	r2, [pc, #16]	; 29d4c <flatcc_builder_create_string@@Base+0xd8>
   29d38:	ldr	r1, [pc, #16]	; 29d50 <flatcc_builder_create_string@@Base+0xdc>
   29d3c:	ldr	r0, [pc, #16]	; 29d54 <flatcc_builder_create_string@@Base+0xe0>
   29d40:	bl	14618 <__assert_fail@plt>
   29d44:	andeq	r4, r4, ip, asr #15
   29d48:	andeq	r4, r4, r0, asr r7
   29d4c:	andeq	r0, r0, fp, lsl #5
   29d50:	andeq	r4, r4, r4, lsl #29
   29d54:	andeq	r4, r4, r4, asr #30

00029d58 <flatcc_builder_create_string_str@@Base>:
   29d58:	push	{r4, r5, r6, lr}
   29d5c:	mov	r4, r0
   29d60:	sub	sp, sp, #88	; 0x58
   29d64:	mov	r0, r1
   29d68:	mov	r5, r1
   29d6c:	bl	145a0 <strlen@plt>
   29d70:	ldr	lr, [r4, #136]	; 0x88
   29d74:	add	r2, sp, #88	; 0x58
   29d78:	sub	r3, lr, #1
   29d7c:	mov	ip, #4
   29d80:	str	ip, [sp, #28]
   29d84:	cmp	r0, #0
   29d88:	str	r0, [r2, #-76]!	; 0xffffffb4
   29d8c:	sub	r3, r3, r0
   29d90:	str	r2, [sp, #24]
   29d94:	moveq	r2, #1
   29d98:	moveq	r1, r2
   29d9c:	movne	r1, #2
   29da0:	and	r3, r3, #3
   29da4:	addne	ip, r0, ip
   29da8:	add	r3, r3, #1
   29dac:	add	r1, r1, #1
   29db0:	strne	r0, [sp, #36]	; 0x24
   29db4:	add	ip, ip, r3
   29db8:	add	r0, sp, #88	; 0x58
   29dbc:	strne	r5, [sp, #32]
   29dc0:	add	r1, r0, r1, lsl #3
   29dc4:	sub	r5, lr, ip
   29dc8:	ldr	r0, [pc, #100]	; 29e34 <flatcc_builder_create_string_str@@Base+0xdc>
   29dcc:	movne	r2, #3
   29dd0:	moveq	r2, #2
   29dd4:	cmp	lr, r5
   29dd8:	str	r3, [r1, #-68]	; 0xffffffbc
   29ddc:	str	ip, [sp, #16]
   29de0:	str	r2, [sp, #20]
   29de4:	str	r0, [r1, #-72]	; 0xffffffb8
   29de8:	ble	29e1c <flatcc_builder_create_string_str@@Base+0xc4>
   29dec:	ldr	r0, [r4, #36]	; 0x24
   29df0:	mov	r3, r5
   29df4:	str	ip, [sp]
   29df8:	add	r1, sp, #24
   29dfc:	ldr	r6, [r4, #44]	; 0x2c
   29e00:	blx	r6
   29e04:	cmp	r0, #0
   29e08:	bne	29e20 <flatcc_builder_create_string_str@@Base+0xc8>
   29e0c:	mov	r0, r5
   29e10:	str	r5, [r4, #136]	; 0x88
   29e14:	add	sp, sp, #88	; 0x58
   29e18:	pop	{r4, r5, r6, pc}
   29e1c:	bl	147f4 <__assert_fail@plt+0x1dc>
   29e20:	ldr	r3, [pc, #16]	; 29e38 <flatcc_builder_create_string_str@@Base+0xe0>
   29e24:	ldr	r2, [pc, #16]	; 29e3c <flatcc_builder_create_string_str@@Base+0xe4>
   29e28:	ldr	r1, [pc, #16]	; 29e40 <flatcc_builder_create_string_str@@Base+0xe8>
   29e2c:	ldr	r0, [pc, #16]	; 29e44 <flatcc_builder_create_string_str@@Base+0xec>
   29e30:	bl	14618 <__assert_fail@plt>
   29e34:	andeq	r4, r4, ip, asr #15
   29e38:	andeq	r4, r4, r0, asr r7
   29e3c:	andeq	r0, r0, fp, lsl #5
   29e40:	andeq	r4, r4, r4, lsl #29
   29e44:	andeq	r4, r4, r4, asr #30

00029e48 <flatcc_builder_create_string_strn@@Base>:
   29e48:	push	{r4, r5, r6, lr}
   29e4c:	mov	r6, r1
   29e50:	sub	sp, sp, #88	; 0x58
   29e54:	mov	r4, r0
   29e58:	mov	r1, #0
   29e5c:	mov	r0, r6
   29e60:	mov	r5, r2
   29e64:	bl	145e8 <memchr@plt>
   29e68:	mov	ip, #4
   29e6c:	mov	r1, #1
   29e70:	add	r2, sp, #88	; 0x58
   29e74:	str	ip, [sp, #28]
   29e78:	add	lr, sp, #88	; 0x58
   29e7c:	cmp	r0, #0
   29e80:	subne	r5, r0, r6
   29e84:	ldr	r0, [r4, #136]	; 0x88
   29e88:	cmp	r5, #0
   29e8c:	sub	r3, r0, #1
   29e90:	sub	r3, r3, r5
   29e94:	movne	r1, #2
   29e98:	and	r3, r3, #3
   29e9c:	addne	ip, r5, ip
   29ea0:	add	r3, r3, #1
   29ea4:	add	r1, r1, #1
   29ea8:	add	ip, r3, ip
   29eac:	str	r5, [r2, #-76]!	; 0xffffffb4
   29eb0:	strne	r5, [sp, #36]	; 0x24
   29eb4:	add	r1, lr, r1, lsl #3
   29eb8:	sub	r5, r0, ip
   29ebc:	ldr	lr, [pc, #108]	; 29f30 <flatcc_builder_create_string_strn@@Base+0xe8>
   29ec0:	str	r2, [sp, #24]
   29ec4:	strne	r6, [sp, #32]
   29ec8:	movne	r2, #3
   29ecc:	moveq	r2, #2
   29ed0:	cmp	r0, r5
   29ed4:	str	r3, [r1, #-68]	; 0xffffffbc
   29ed8:	str	ip, [sp, #16]
   29edc:	str	r2, [sp, #20]
   29ee0:	str	lr, [r1, #-72]	; 0xffffffb8
   29ee4:	ble	29f18 <flatcc_builder_create_string_strn@@Base+0xd0>
   29ee8:	ldr	r0, [r4, #36]	; 0x24
   29eec:	mov	r3, r5
   29ef0:	str	ip, [sp]
   29ef4:	add	r1, sp, #24
   29ef8:	ldr	r6, [r4, #44]	; 0x2c
   29efc:	blx	r6
   29f00:	cmp	r0, #0
   29f04:	bne	29f1c <flatcc_builder_create_string_strn@@Base+0xd4>
   29f08:	mov	r0, r5
   29f0c:	str	r5, [r4, #136]	; 0x88
   29f10:	add	sp, sp, #88	; 0x58
   29f14:	pop	{r4, r5, r6, pc}
   29f18:	bl	147f4 <__assert_fail@plt+0x1dc>
   29f1c:	ldr	r3, [pc, #16]	; 29f34 <flatcc_builder_create_string_strn@@Base+0xec>
   29f20:	ldr	r2, [pc, #16]	; 29f38 <flatcc_builder_create_string_strn@@Base+0xf0>
   29f24:	ldr	r1, [pc, #16]	; 29f3c <flatcc_builder_create_string_strn@@Base+0xf4>
   29f28:	ldr	r0, [pc, #16]	; 29f40 <flatcc_builder_create_string_strn@@Base+0xf8>
   29f2c:	bl	14618 <__assert_fail@plt>
   29f30:	andeq	r4, r4, ip, asr #15
   29f34:	andeq	r4, r4, r0, asr r7
   29f38:	andeq	r0, r0, fp, lsl #5
   29f3c:	andeq	r4, r4, r4, lsl #29
   29f40:	andeq	r4, r4, r4, asr #30

00029f44 <flatcc_builder_end_string@@Base>:
   29f44:	ldr	r3, [r0, #32]
   29f48:	push	{r4, r5, r6, lr}
   29f4c:	sub	sp, sp, #88	; 0x58
   29f50:	ldrh	r2, [r3, #14]
   29f54:	cmp	r2, #6
   29f58:	bne	2a0c4 <flatcc_builder_end_string@@Base+0x180>
   29f5c:	ldr	r2, [r3, #20]
   29f60:	ldr	r3, [r0, #20]
   29f64:	mov	r4, r0
   29f68:	cmp	r2, r3
   29f6c:	bne	2a0b0 <flatcc_builder_end_string@@Base+0x16c>
   29f70:	ldr	r0, [r0, #136]	; 0x88
   29f74:	add	r1, sp, #88	; 0x58
   29f78:	sub	r3, r0, #1
   29f7c:	cmp	r2, #0
   29f80:	sub	r3, r3, r2
   29f84:	str	r2, [r1, #-76]!	; 0xffffffb4
   29f88:	mov	ip, #4
   29f8c:	str	r1, [sp, #24]
   29f90:	ldr	lr, [r4, #16]
   29f94:	mov	r1, #1
   29f98:	and	r3, r3, #3
   29f9c:	movne	r1, #2
   29fa0:	str	ip, [sp, #28]
   29fa4:	add	r3, r3, #1
   29fa8:	addne	ip, r2, ip
   29fac:	add	r1, r1, #1
   29fb0:	strne	lr, [sp, #32]
   29fb4:	add	ip, ip, r3
   29fb8:	add	lr, sp, #88	; 0x58
   29fbc:	add	r1, lr, r1, lsl #3
   29fc0:	sub	r5, r0, ip
   29fc4:	ldr	lr, [pc, #268]	; 2a0d8 <flatcc_builder_end_string@@Base+0x194>
   29fc8:	strne	r2, [sp, #36]	; 0x24
   29fcc:	moveq	r2, #2
   29fd0:	movne	r2, #3
   29fd4:	cmp	r0, r5
   29fd8:	str	r3, [r1, #-68]	; 0xffffffbc
   29fdc:	str	ip, [sp, #16]
   29fe0:	str	r2, [sp, #20]
   29fe4:	str	lr, [r1, #-72]	; 0xffffffb8
   29fe8:	ble	2a0ac <flatcc_builder_end_string@@Base+0x168>
   29fec:	ldr	r0, [r4, #36]	; 0x24
   29ff0:	add	r1, sp, #24
   29ff4:	str	ip, [sp]
   29ff8:	mov	r3, r5
   29ffc:	ldr	r6, [r4, #44]	; 0x2c
   2a000:	blx	r6
   2a004:	subs	r1, r0, #0
   2a008:	bne	2a098 <flatcc_builder_end_string@@Base+0x154>
   2a00c:	cmp	r5, #0
   2a010:	str	r5, [r4, #136]	; 0x88
   2a014:	beq	2a08c <flatcc_builder_end_string@@Base+0x148>
   2a018:	ldr	r2, [r4, #20]
   2a01c:	ldr	r0, [r4, #16]
   2a020:	bl	145c4 <memset@plt>
   2a024:	ldr	r3, [r4, #32]
   2a028:	ldr	r2, [r4, #64]	; 0x40
   2a02c:	ldrh	lr, [r4, #130]	; 0x82
   2a030:	ldr	ip, [r3]
   2a034:	ldr	r1, [r3, #4]
   2a038:	ldrh	r0, [r4, #128]	; 0x80
   2a03c:	sub	r2, r2, ip
   2a040:	cmp	r2, r1
   2a044:	movcs	r2, r1
   2a048:	cmp	r0, lr
   2a04c:	ldr	r0, [r4, #60]	; 0x3c
   2a050:	ldr	r6, [r3, #8]
   2a054:	str	r2, [r4, #24]
   2a058:	add	r2, r0, ip
   2a05c:	str	r2, [r4, #16]
   2a060:	str	r6, [r4, #20]
   2a064:	ldr	r2, [r4, #156]	; 0x9c
   2a068:	str	ip, [r4, #28]
   2a06c:	str	r1, [r3, #4]
   2a070:	strhcc	lr, [r4, #128]	; 0x80
   2a074:	ldrh	r1, [r3, #12]
   2a078:	sub	r2, r2, #1
   2a07c:	sub	r3, r3, #36	; 0x24
   2a080:	str	r2, [r4, #156]	; 0x9c
   2a084:	strh	r1, [r4, #130]	; 0x82
   2a088:	str	r3, [r4, #32]
   2a08c:	mov	r0, r5
   2a090:	add	sp, sp, #88	; 0x58
   2a094:	pop	{r4, r5, r6, pc}
   2a098:	ldr	r3, [pc, #60]	; 2a0dc <flatcc_builder_end_string@@Base+0x198>
   2a09c:	ldr	r2, [pc, #60]	; 2a0e0 <flatcc_builder_end_string@@Base+0x19c>
   2a0a0:	ldr	r1, [pc, #60]	; 2a0e4 <flatcc_builder_end_string@@Base+0x1a0>
   2a0a4:	ldr	r0, [pc, #60]	; 2a0e8 <flatcc_builder_end_string@@Base+0x1a4>
   2a0a8:	bl	14618 <__assert_fail@plt>
   2a0ac:	bl	147f4 <__assert_fail@plt+0x1dc>
   2a0b0:	ldr	r3, [pc, #52]	; 2a0ec <flatcc_builder_end_string@@Base+0x1a8>
   2a0b4:	ldr	r2, [pc, #52]	; 2a0f0 <flatcc_builder_end_string@@Base+0x1ac>
   2a0b8:	ldr	r1, [pc, #36]	; 2a0e4 <flatcc_builder_end_string@@Base+0x1a0>
   2a0bc:	ldr	r0, [pc, #48]	; 2a0f4 <flatcc_builder_end_string@@Base+0x1b0>
   2a0c0:	bl	14618 <__assert_fail@plt>
   2a0c4:	ldr	r3, [pc, #32]	; 2a0ec <flatcc_builder_end_string@@Base+0x1a8>
   2a0c8:	ldr	r2, [pc, #40]	; 2a0f8 <flatcc_builder_end_string@@Base+0x1b4>
   2a0cc:	ldr	r1, [pc, #16]	; 2a0e4 <flatcc_builder_end_string@@Base+0x1a0>
   2a0d0:	ldr	r0, [pc, #36]	; 2a0fc <flatcc_builder_end_string@@Base+0x1b8>
   2a0d4:	bl	14618 <__assert_fail@plt>
   2a0d8:	andeq	r4, r4, ip, asr #15
   2a0dc:	andeq	r4, r4, r0, asr r7
   2a0e0:	andeq	r0, r0, fp, lsl #5
   2a0e4:	andeq	r4, r4, r4, lsl #29
   2a0e8:	andeq	r4, r4, r4, asr #30
   2a0ec:	andeq	r4, r4, r8, lsr #27
   2a0f0:	andeq	r0, r0, r5, asr #13
   2a0f4:	andeq	r5, r4, r4, asr #3
   2a0f8:	andeq	r0, r0, r4, asr #13
   2a0fc:	andeq	r4, r4, r4, lsl #30

0002a100 <flatcc_builder_string_edit@@Base>:
   2a100:	ldr	r0, [r0, #16]
   2a104:	bx	lr

0002a108 <flatcc_builder_string_len@@Base>:
   2a108:	ldr	r3, [r0, #32]
   2a10c:	ldr	r0, [r3, #20]
   2a110:	bx	lr

0002a114 <flatcc_builder_table_add@@Base>:
   2a114:	push	{r4, r5, r6, r7, r8, r9, lr}
   2a118:	mov	r4, r0
   2a11c:	ldr	r0, [r0, #32]
   2a120:	sub	sp, sp, #12
   2a124:	ldrh	r0, [r0, #14]
   2a128:	cmp	r0, #3
   2a12c:	bne	2a268 <flatcc_builder_table_add@@Base+0x154>
   2a130:	ldr	r0, [pc, #324]	; 2a27c <flatcc_builder_table_add@@Base+0x168>
   2a134:	cmp	r1, r0
   2a138:	bhi	2a254 <flatcc_builder_table_add@@Base+0x140>
   2a13c:	ldrh	r0, [r4, #130]	; 0x82
   2a140:	lsl	r7, r1, #1
   2a144:	cmp	r0, r3
   2a148:	ldr	r0, [r4, #4]
   2a14c:	strhcc	r3, [r4, #130]	; 0x82
   2a150:	add	lr, r0, r7
   2a154:	ldrh	r6, [r0, r7]
   2a158:	cmp	r6, #0
   2a15c:	bne	2a240 <flatcc_builder_table_add@@Base+0x12c>
   2a160:	ldr	ip, [r4, #12]
   2a164:	ldr	r9, [pc, #276]	; 2a280 <flatcc_builder_table_add@@Base+0x16c>
   2a168:	eor	ip, ip, r1
   2a16c:	uxth	r5, r1
   2a170:	mul	r1, r9, ip
   2a174:	ldr	r0, [r4, #20]
   2a178:	eor	r1, r1, r2
   2a17c:	sub	r8, r3, #1
   2a180:	add	r8, r8, r0
   2a184:	rsb	r3, r3, #0
   2a188:	and	r8, r8, r3
   2a18c:	mul	r1, r9, r1
   2a190:	ldr	r3, [r4, #24]
   2a194:	add	r2, r2, r8
   2a198:	cmp	r2, r3
   2a19c:	str	r1, [r4, #12]
   2a1a0:	str	r2, [r4, #20]
   2a1a4:	bcs	2a1d0 <flatcc_builder_table_add@@Base+0xbc>
   2a1a8:	ldr	r0, [r4, #16]
   2a1ac:	add	r3, r8, #4
   2a1b0:	strh	r3, [lr]
   2a1b4:	ldrh	r3, [r4, #8]
   2a1b8:	add	r0, r0, r8
   2a1bc:	cmp	r3, r5
   2a1c0:	addls	r5, r5, #1
   2a1c4:	strhls	r5, [r4, #8]
   2a1c8:	add	sp, sp, #12
   2a1cc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2a1d0:	ldr	r1, [r4, #28]
   2a1d4:	mov	r3, #1
   2a1d8:	add	r1, r1, #1
   2a1dc:	ldr	r0, [r4, #40]	; 0x28
   2a1e0:	add	r2, r1, r2
   2a1e4:	str	r3, [sp]
   2a1e8:	add	r1, r4, #60	; 0x3c
   2a1ec:	ldr	r9, [r4, #48]	; 0x30
   2a1f0:	blx	r9
   2a1f4:	cmp	r0, #0
   2a1f8:	bne	2a238 <flatcc_builder_table_add@@Base+0x124>
   2a1fc:	ldr	r6, [r4, #28]
   2a200:	ldr	r3, [r4, #64]	; 0x40
   2a204:	ldr	r2, [pc, #120]	; 2a284 <flatcc_builder_table_add@@Base+0x170>
   2a208:	sub	r3, r3, r6
   2a20c:	ldr	r0, [r4, #60]	; 0x3c
   2a210:	ldr	r1, [r4, #32]
   2a214:	ldr	lr, [r4, #4]
   2a218:	cmp	r3, r2
   2a21c:	add	r0, r0, r6
   2a220:	movcs	r3, r2
   2a224:	str	r0, [r4, #16]
   2a228:	str	r3, [r4, #24]
   2a22c:	add	lr, lr, r7
   2a230:	str	r2, [r1, #4]
   2a234:	b	2a1ac <flatcc_builder_table_add@@Base+0x98>
   2a238:	mov	r0, r6
   2a23c:	b	2a1c8 <flatcc_builder_table_add@@Base+0xb4>
   2a240:	ldr	r3, [pc, #64]	; 2a288 <flatcc_builder_table_add@@Base+0x174>
   2a244:	ldr	r2, [pc, #64]	; 2a28c <flatcc_builder_table_add@@Base+0x178>
   2a248:	ldr	r1, [pc, #64]	; 2a290 <flatcc_builder_table_add@@Base+0x17c>
   2a24c:	ldr	r0, [pc, #64]	; 2a294 <flatcc_builder_table_add@@Base+0x180>
   2a250:	bl	14618 <__assert_fail@plt>
   2a254:	ldr	r3, [pc, #44]	; 2a288 <flatcc_builder_table_add@@Base+0x174>
   2a258:	ldr	r2, [pc, #56]	; 2a298 <flatcc_builder_table_add@@Base+0x184>
   2a25c:	ldr	r1, [pc, #44]	; 2a290 <flatcc_builder_table_add@@Base+0x17c>
   2a260:	ldr	r0, [pc, #52]	; 2a29c <flatcc_builder_table_add@@Base+0x188>
   2a264:	bl	14618 <__assert_fail@plt>
   2a268:	ldr	r3, [pc, #24]	; 2a288 <flatcc_builder_table_add@@Base+0x174>
   2a26c:	ldr	r2, [pc, #44]	; 2a2a0 <flatcc_builder_table_add@@Base+0x18c>
   2a270:	ldr	r1, [pc, #24]	; 2a290 <flatcc_builder_table_add@@Base+0x17c>
   2a274:	ldr	r0, [pc, #40]	; 2a2a4 <flatcc_builder_table_add@@Base+0x190>
   2a278:	bl	14618 <__assert_fail@plt>
   2a27c:	strdeq	r7, [r0], -ip
   2a280:			; <UNDEFINED> instruction: 0x9e3779b1
   2a284:	strdeq	pc, [r0], -ip
   2a288:	andeq	r4, r4, r4, asr #27
   2a28c:	strdeq	r0, [r0], -r8
   2a290:	andeq	r4, r4, r4, lsl #29
   2a294:	andeq	r4, r4, r4, asr #30
   2a298:	andeq	r0, r0, lr, ror #13
   2a29c:	andeq	r5, r4, r8, ror #3
   2a2a0:	andeq	r0, r0, sp, ror #13
   2a2a4:	andeq	r5, r4, r0, asr r1

0002a2a8 <flatcc_builder_table_edit@@Base>:
   2a2a8:	ldr	r3, [r0, #32]
   2a2ac:	ldrh	r3, [r3, #14]
   2a2b0:	cmp	r3, #3
   2a2b4:	bne	2a2cc <flatcc_builder_table_edit@@Base+0x24>
   2a2b8:	ldr	r3, [r0, #20]
   2a2bc:	ldr	r0, [r0, #16]
   2a2c0:	sub	r1, r3, r1
   2a2c4:	add	r0, r0, r1
   2a2c8:	bx	lr
   2a2cc:	push	{r4, lr}
   2a2d0:	ldr	r3, [pc, #12]	; 2a2e4 <flatcc_builder_table_edit@@Base+0x3c>
   2a2d4:	ldr	r2, [pc, #12]	; 2a2e8 <flatcc_builder_table_edit@@Base+0x40>
   2a2d8:	ldr	r1, [pc, #12]	; 2a2ec <flatcc_builder_table_edit@@Base+0x44>
   2a2dc:	ldr	r0, [pc, #12]	; 2a2f0 <flatcc_builder_table_edit@@Base+0x48>
   2a2e0:	bl	14618 <__assert_fail@plt>
   2a2e4:	andeq	r4, r4, r0, ror #27
   2a2e8:	andeq	r0, r0, r2, lsl #14
   2a2ec:	andeq	r4, r4, r4, lsl #29
   2a2f0:	andeq	r5, r4, r0, asr r1

0002a2f4 <flatcc_builder_table_add_copy@@Base>:
   2a2f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a2f8:	mov	r4, r0
   2a2fc:	ldr	r0, [r0, #32]
   2a300:	mov	r7, r3
   2a304:	sub	sp, sp, #12
   2a308:	ldrh	r3, [r0, #14]
   2a30c:	ldrh	ip, [sp, #48]	; 0x30
   2a310:	cmp	r3, #3
   2a314:	bne	2a470 <flatcc_builder_table_add_copy@@Base+0x17c>
   2a318:	ldr	r3, [pc, #356]	; 2a484 <flatcc_builder_table_add_copy@@Base+0x190>
   2a31c:	cmp	r1, r3
   2a320:	bhi	2a45c <flatcc_builder_table_add_copy@@Base+0x168>
   2a324:	ldrh	r3, [r4, #130]	; 0x82
   2a328:	lsl	sl, r1, #1
   2a32c:	mov	r8, r2
   2a330:	cmp	r3, ip
   2a334:	ldr	r3, [r4, #4]
   2a338:	strhcc	ip, [r4, #130]	; 0x82
   2a33c:	add	r0, r3, sl
   2a340:	ldrh	r5, [r3, sl]
   2a344:	cmp	r5, #0
   2a348:	bne	2a448 <flatcc_builder_table_add_copy@@Base+0x154>
   2a34c:	ldr	r2, [r4, #12]
   2a350:	ldr	lr, [pc, #304]	; 2a488 <flatcc_builder_table_add_copy@@Base+0x194>
   2a354:	eor	r2, r2, r1
   2a358:	ldr	r6, [r4, #20]
   2a35c:	mul	r2, lr, r2
   2a360:	sub	r3, ip, #1
   2a364:	eor	r2, r2, r7
   2a368:	add	r3, r3, r6
   2a36c:	rsb	ip, ip, #0
   2a370:	and	r6, r3, ip
   2a374:	mul	lr, lr, r2
   2a378:	ldr	r3, [r4, #24]
   2a37c:	uxth	r9, r1
   2a380:	add	r1, r7, r6
   2a384:	cmp	r1, r3
   2a388:	str	lr, [r4, #12]
   2a38c:	str	r1, [r4, #20]
   2a390:	bcs	2a3d8 <flatcc_builder_table_add_copy@@Base+0xe4>
   2a394:	ldr	r3, [r4, #16]
   2a398:	add	r2, r6, #4
   2a39c:	strh	r2, [r0]
   2a3a0:	ldrh	r2, [r4, #8]
   2a3a4:	cmp	r2, r9
   2a3a8:	addls	r9, r9, #1
   2a3ac:	strhls	r9, [r4, #8]
   2a3b0:	adds	r3, r3, r6
   2a3b4:	beq	2a3cc <flatcc_builder_table_add_copy@@Base+0xd8>
   2a3b8:	mov	r0, r3
   2a3bc:	mov	r2, r7
   2a3c0:	mov	r1, r8
   2a3c4:	bl	1454c <memcpy@plt>
   2a3c8:	mov	r3, r0
   2a3cc:	mov	r0, r3
   2a3d0:	add	sp, sp, #12
   2a3d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3d8:	ldr	r2, [r4, #28]
   2a3dc:	mov	r3, #1
   2a3e0:	add	r2, r2, #1
   2a3e4:	ldr	r0, [r4, #40]	; 0x28
   2a3e8:	add	r2, r2, r1
   2a3ec:	str	r3, [sp]
   2a3f0:	add	r1, r4, #60	; 0x3c
   2a3f4:	ldr	fp, [r4, #48]	; 0x30
   2a3f8:	blx	fp
   2a3fc:	cmp	r0, #0
   2a400:	bne	2a440 <flatcc_builder_table_add_copy@@Base+0x14c>
   2a404:	ldr	r0, [r4, #28]
   2a408:	ldr	r2, [r4, #64]	; 0x40
   2a40c:	ldr	r1, [pc, #120]	; 2a48c <flatcc_builder_table_add_copy@@Base+0x198>
   2a410:	ldr	r3, [r4, #60]	; 0x3c
   2a414:	sub	r2, r2, r0
   2a418:	ldr	ip, [r4, #32]
   2a41c:	add	r3, r3, r0
   2a420:	cmp	r2, r1
   2a424:	ldr	r0, [r4, #4]
   2a428:	movcs	r2, r1
   2a42c:	str	r3, [r4, #16]
   2a430:	str	r2, [r4, #24]
   2a434:	add	r0, r0, sl
   2a438:	str	r1, [ip, #4]
   2a43c:	b	2a398 <flatcc_builder_table_add_copy@@Base+0xa4>
   2a440:	mov	r3, r5
   2a444:	b	2a3cc <flatcc_builder_table_add_copy@@Base+0xd8>
   2a448:	ldr	r3, [pc, #64]	; 2a490 <flatcc_builder_table_add_copy@@Base+0x19c>
   2a44c:	ldr	r2, [pc, #64]	; 2a494 <flatcc_builder_table_add_copy@@Base+0x1a0>
   2a450:	ldr	r1, [pc, #64]	; 2a498 <flatcc_builder_table_add_copy@@Base+0x1a4>
   2a454:	ldr	r0, [pc, #64]	; 2a49c <flatcc_builder_table_add_copy@@Base+0x1a8>
   2a458:	bl	14618 <__assert_fail@plt>
   2a45c:	ldr	r3, [pc, #44]	; 2a490 <flatcc_builder_table_add_copy@@Base+0x19c>
   2a460:	ldr	r2, [pc, #56]	; 2a4a0 <flatcc_builder_table_add_copy@@Base+0x1ac>
   2a464:	ldr	r1, [pc, #44]	; 2a498 <flatcc_builder_table_add_copy@@Base+0x1a4>
   2a468:	ldr	r0, [pc, #52]	; 2a4a4 <flatcc_builder_table_add_copy@@Base+0x1b0>
   2a46c:	bl	14618 <__assert_fail@plt>
   2a470:	ldr	r3, [pc, #24]	; 2a490 <flatcc_builder_table_add_copy@@Base+0x19c>
   2a474:	ldr	r2, [pc, #44]	; 2a4a8 <flatcc_builder_table_add_copy@@Base+0x1b4>
   2a478:	ldr	r1, [pc, #24]	; 2a498 <flatcc_builder_table_add_copy@@Base+0x1a4>
   2a47c:	ldr	r0, [pc, #40]	; 2a4ac <flatcc_builder_table_add_copy@@Base+0x1b8>
   2a480:	bl	14618 <__assert_fail@plt>
   2a484:	strdeq	r7, [r0], -ip
   2a488:			; <UNDEFINED> instruction: 0x9e3779b1
   2a48c:	strdeq	pc, [r0], -ip
   2a490:	andeq	r4, r4, r4, asr #27
   2a494:	strdeq	r0, [r0], -r8
   2a498:	andeq	r4, r4, r4, lsl #29
   2a49c:	andeq	r4, r4, r4, asr #30
   2a4a0:	andeq	r0, r0, lr, ror #13
   2a4a4:	andeq	r5, r4, r8, ror #3
   2a4a8:	andeq	r0, r0, sp, ror #13
   2a4ac:	andeq	r5, r4, r0, asr r1

0002a4b0 <flatcc_builder_table_add_offset@@Base>:
   2a4b0:	ldr	r3, [r0, #32]
   2a4b4:	push	{r4, r5, r6, r7, r8, r9, lr}
   2a4b8:	sub	sp, sp, #12
   2a4bc:	ldrh	r3, [r3, #14]
   2a4c0:	cmp	r3, #3
   2a4c4:	bne	2a600 <flatcc_builder_table_add_offset@@Base+0x150>
   2a4c8:	ldr	r3, [pc, #324]	; 2a614 <flatcc_builder_table_add_offset@@Base+0x164>
   2a4cc:	cmp	r1, r3
   2a4d0:	bhi	2a5ec <flatcc_builder_table_add_offset@@Base+0x13c>
   2a4d4:	ldr	r3, [r0, #4]
   2a4d8:	lsl	r7, r1, #1
   2a4dc:	mov	r4, r0
   2a4e0:	ldrh	r6, [r3, r7]
   2a4e4:	add	ip, r3, r7
   2a4e8:	cmp	r6, #0
   2a4ec:	bne	2a5d8 <flatcc_builder_table_add_offset@@Base+0x128>
   2a4f0:	ldr	r3, [r0, #12]
   2a4f4:	ldr	r2, [pc, #284]	; 2a618 <flatcc_builder_table_add_offset@@Base+0x168>
   2a4f8:	eor	r3, r3, r1
   2a4fc:	ldr	r5, [r0, #20]
   2a500:	mul	r3, r2, r3
   2a504:	add	r5, r5, #3
   2a508:	eor	r3, r3, #4
   2a50c:	ldr	r0, [r0, #24]
   2a510:	mul	r3, r2, r3
   2a514:	bic	r5, r5, #3
   2a518:	add	r2, r5, #4
   2a51c:	cmp	r2, r0
   2a520:	uxth	r8, r1
   2a524:	str	r3, [r4, #12]
   2a528:	str	r2, [r4, #20]
   2a52c:	bhi	2a56c <flatcc_builder_table_add_offset@@Base+0xbc>
   2a530:	ldr	r0, [r4, #16]
   2a534:	uxth	r2, r5
   2a538:	add	r3, r2, #4
   2a53c:	strh	r3, [ip]
   2a540:	ldrh	r3, [r4, #8]
   2a544:	add	r0, r0, r5
   2a548:	cmp	r3, r8
   2a54c:	ldr	r3, [r4]
   2a550:	addls	r1, r8, #1
   2a554:	strhls	r1, [r4, #8]
   2a558:	add	r1, r3, #2
   2a55c:	str	r1, [r4]
   2a560:	strh	r2, [r3]
   2a564:	add	sp, sp, #12
   2a568:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2a56c:	ldr	r1, [r4, #28]
   2a570:	mov	r3, #1
   2a574:	ldr	r0, [r4, #40]	; 0x28
   2a578:	add	r2, r2, r1
   2a57c:	str	r3, [sp]
   2a580:	add	r1, r4, #60	; 0x3c
   2a584:	ldr	r9, [r4, #48]	; 0x30
   2a588:	blx	r9
   2a58c:	cmp	r0, #0
   2a590:	bne	2a5d0 <flatcc_builder_table_add_offset@@Base+0x120>
   2a594:	ldr	r6, [r4, #28]
   2a598:	ldr	r3, [r4, #64]	; 0x40
   2a59c:	ldr	r2, [pc, #120]	; 2a61c <flatcc_builder_table_add_offset@@Base+0x16c>
   2a5a0:	sub	r3, r3, r6
   2a5a4:	ldr	r0, [r4, #60]	; 0x3c
   2a5a8:	ldr	r1, [r4, #32]
   2a5ac:	ldr	ip, [r4, #4]
   2a5b0:	cmp	r3, r2
   2a5b4:	add	r0, r0, r6
   2a5b8:	movcs	r3, r2
   2a5bc:	str	r0, [r4, #16]
   2a5c0:	str	r3, [r4, #24]
   2a5c4:	add	ip, ip, r7
   2a5c8:	str	r2, [r1, #4]
   2a5cc:	b	2a534 <flatcc_builder_table_add_offset@@Base+0x84>
   2a5d0:	mov	r0, r6
   2a5d4:	b	2a564 <flatcc_builder_table_add_offset@@Base+0xb4>
   2a5d8:	ldr	r3, [pc, #64]	; 2a620 <flatcc_builder_table_add_offset@@Base+0x170>
   2a5dc:	ldr	r2, [pc, #64]	; 2a624 <flatcc_builder_table_add_offset@@Base+0x174>
   2a5e0:	ldr	r1, [pc, #64]	; 2a628 <flatcc_builder_table_add_offset@@Base+0x178>
   2a5e4:	ldr	r0, [pc, #64]	; 2a62c <flatcc_builder_table_add_offset@@Base+0x17c>
   2a5e8:	bl	14618 <__assert_fail@plt>
   2a5ec:	ldr	r3, [pc, #44]	; 2a620 <flatcc_builder_table_add_offset@@Base+0x170>
   2a5f0:	ldr	r2, [pc, #56]	; 2a630 <flatcc_builder_table_add_offset@@Base+0x180>
   2a5f4:	ldr	r1, [pc, #44]	; 2a628 <flatcc_builder_table_add_offset@@Base+0x178>
   2a5f8:	ldr	r0, [pc, #52]	; 2a634 <flatcc_builder_table_add_offset@@Base+0x184>
   2a5fc:	bl	14618 <__assert_fail@plt>
   2a600:	ldr	r3, [pc, #24]	; 2a620 <flatcc_builder_table_add_offset@@Base+0x170>
   2a604:	ldr	r2, [pc, #44]	; 2a638 <flatcc_builder_table_add_offset@@Base+0x188>
   2a608:	ldr	r1, [pc, #24]	; 2a628 <flatcc_builder_table_add_offset@@Base+0x178>
   2a60c:	ldr	r0, [pc, #40]	; 2a63c <flatcc_builder_table_add_offset@@Base+0x18c>
   2a610:	bl	14618 <__assert_fail@plt>
   2a614:	strdeq	r7, [r0], -ip
   2a618:			; <UNDEFINED> instruction: 0x9e3779b1
   2a61c:	strdeq	pc, [r0], -ip
   2a620:	strdeq	r4, [r4], -ip
   2a624:	andeq	r0, r0, fp, lsl r7
   2a628:	andeq	r4, r4, r4, lsl #29
   2a62c:	andeq	r4, r4, r4, asr #30
   2a630:	andeq	r0, r0, r4, lsl r7
   2a634:	andeq	r5, r4, r8, ror #3
   2a638:	andeq	r0, r0, r3, lsl r7
   2a63c:	andeq	r5, r4, r0, asr r1

0002a640 <flatcc_builder_table_add_union@@Base>:
   2a640:	push	{r4, r5, r6, r7, r8, r9, lr}
   2a644:	sub	sp, sp, #20
   2a648:	add	ip, sp, #16
   2a64c:	stmdb	ip, {r2, r3}
   2a650:	ldr	r3, [r0, #32]
   2a654:	ldrb	r6, [sp, #8]
   2a658:	ldr	r5, [sp, #12]
   2a65c:	ldrh	r3, [r3, #14]
   2a660:	cmp	r3, #3
   2a664:	bne	2a7f0 <flatcc_builder_table_add_union@@Base+0x1b0>
   2a668:	cmp	r6, #0
   2a66c:	mov	r4, r0
   2a670:	mov	r7, r1
   2a674:	beq	2a744 <flatcc_builder_table_add_union@@Base+0x104>
   2a678:	cmp	r5, #0
   2a67c:	beq	2a6a0 <flatcc_builder_table_add_union@@Base+0x60>
   2a680:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   2a684:	cmp	r0, #0
   2a688:	beq	2a82c <flatcc_builder_table_add_union@@Base+0x1ec>
   2a68c:	ldr	r3, [r4, #32]
   2a690:	str	r5, [r0]
   2a694:	ldrh	r3, [r3, #14]
   2a698:	cmp	r3, #3
   2a69c:	bne	2a804 <flatcc_builder_table_add_union@@Base+0x1c4>
   2a6a0:	ldr	r3, [pc, #408]	; 2a840 <flatcc_builder_table_add_union@@Base+0x200>
   2a6a4:	sub	r1, r7, #1
   2a6a8:	cmp	r1, r3
   2a6ac:	bhi	2a818 <flatcc_builder_table_add_union@@Base+0x1d8>
   2a6b0:	ldrh	r3, [r4, #130]	; 0x82
   2a6b4:	lsl	r5, r1, #1
   2a6b8:	cmp	r3, #0
   2a6bc:	moveq	r3, #1
   2a6c0:	strheq	r3, [r4, #130]	; 0x82
   2a6c4:	ldr	r3, [r4, #4]
   2a6c8:	add	r0, r3, r5
   2a6cc:	ldrh	r3, [r3, r5]
   2a6d0:	cmp	r3, #0
   2a6d4:	bne	2a7dc <flatcc_builder_table_add_union@@Base+0x19c>
   2a6d8:	ldr	r3, [r4, #12]
   2a6dc:	ldr	r2, [pc, #352]	; 2a844 <flatcc_builder_table_add_union@@Base+0x204>
   2a6e0:	eor	r3, r3, r1
   2a6e4:	ldr	r7, [r4, #20]
   2a6e8:	mul	r3, r2, r3
   2a6ec:	uxth	r8, r1
   2a6f0:	eor	r3, r3, #1
   2a6f4:	ldr	r1, [r4, #24]
   2a6f8:	mul	r3, r2, r3
   2a6fc:	add	r2, r7, #1
   2a700:	cmp	r2, r1
   2a704:	str	r3, [r4, #12]
   2a708:	str	r2, [r4, #20]
   2a70c:	bcs	2a760 <flatcc_builder_table_add_union@@Base+0x120>
   2a710:	ldr	r3, [r4, #16]
   2a714:	add	r2, r7, #4
   2a718:	strh	r2, [r0]
   2a71c:	ldrh	r2, [r4, #8]
   2a720:	cmp	r2, r8
   2a724:	addls	r1, r8, #1
   2a728:	strhls	r1, [r4, #8]
   2a72c:	cmn	r3, r7
   2a730:	beq	2a7c8 <flatcc_builder_table_add_union@@Base+0x188>
   2a734:	mov	r0, #0
   2a738:	strb	r6, [r3, r7]
   2a73c:	add	sp, sp, #20
   2a740:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2a744:	cmp	r5, #0
   2a748:	beq	2a6a0 <flatcc_builder_table_add_union@@Base+0x60>
   2a74c:	ldr	r3, [pc, #244]	; 2a848 <flatcc_builder_table_add_union@@Base+0x208>
   2a750:	ldr	r2, [pc, #244]	; 2a84c <flatcc_builder_table_add_union@@Base+0x20c>
   2a754:	ldr	r1, [pc, #244]	; 2a850 <flatcc_builder_table_add_union@@Base+0x210>
   2a758:	ldr	r0, [pc, #244]	; 2a854 <flatcc_builder_table_add_union@@Base+0x214>
   2a75c:	bl	14618 <__assert_fail@plt>
   2a760:	ldr	r2, [r4, #28]
   2a764:	mov	r3, #1
   2a768:	add	r2, r7, r2
   2a76c:	ldr	r0, [r4, #40]	; 0x28
   2a770:	add	r2, r2, #2
   2a774:	str	r3, [sp]
   2a778:	add	r1, r4, #60	; 0x3c
   2a77c:	ldr	r9, [r4, #48]	; 0x30
   2a780:	blx	r9
   2a784:	cmp	r0, #0
   2a788:	bne	2a7c8 <flatcc_builder_table_add_union@@Base+0x188>
   2a78c:	ldr	r0, [r4, #28]
   2a790:	ldr	r2, [r4, #64]	; 0x40
   2a794:	ldr	r1, [pc, #188]	; 2a858 <flatcc_builder_table_add_union@@Base+0x218>
   2a798:	ldr	r3, [r4, #60]	; 0x3c
   2a79c:	sub	r2, r2, r0
   2a7a0:	ldr	ip, [r4, #32]
   2a7a4:	add	r3, r3, r0
   2a7a8:	cmp	r2, r1
   2a7ac:	ldr	r0, [r4, #4]
   2a7b0:	movcs	r2, r1
   2a7b4:	str	r3, [r4, #16]
   2a7b8:	str	r2, [r4, #24]
   2a7bc:	add	r0, r0, r5
   2a7c0:	str	r1, [ip, #4]
   2a7c4:	b	2a714 <flatcc_builder_table_add_union@@Base+0xd4>
   2a7c8:	ldr	r3, [pc, #120]	; 2a848 <flatcc_builder_table_add_union@@Base+0x208>
   2a7cc:	ldr	r2, [pc, #136]	; 2a85c <flatcc_builder_table_add_union@@Base+0x21c>
   2a7d0:	ldr	r1, [pc, #120]	; 2a850 <flatcc_builder_table_add_union@@Base+0x210>
   2a7d4:	ldr	r0, [pc, #132]	; 2a860 <flatcc_builder_table_add_union@@Base+0x220>
   2a7d8:	bl	14618 <__assert_fail@plt>
   2a7dc:	ldr	r3, [pc, #128]	; 2a864 <flatcc_builder_table_add_union@@Base+0x224>
   2a7e0:	ldr	r2, [pc, #128]	; 2a868 <flatcc_builder_table_add_union@@Base+0x228>
   2a7e4:	ldr	r1, [pc, #100]	; 2a850 <flatcc_builder_table_add_union@@Base+0x210>
   2a7e8:	ldr	r0, [pc, #124]	; 2a86c <flatcc_builder_table_add_union@@Base+0x22c>
   2a7ec:	bl	14618 <__assert_fail@plt>
   2a7f0:	ldr	r3, [pc, #80]	; 2a848 <flatcc_builder_table_add_union@@Base+0x208>
   2a7f4:	ldr	r2, [pc, #116]	; 2a870 <flatcc_builder_table_add_union@@Base+0x230>
   2a7f8:	ldr	r1, [pc, #80]	; 2a850 <flatcc_builder_table_add_union@@Base+0x210>
   2a7fc:	ldr	r0, [pc, #112]	; 2a874 <flatcc_builder_table_add_union@@Base+0x234>
   2a800:	bl	14618 <__assert_fail@plt>
   2a804:	ldr	r3, [pc, #88]	; 2a864 <flatcc_builder_table_add_union@@Base+0x224>
   2a808:	ldr	r2, [pc, #104]	; 2a878 <flatcc_builder_table_add_union@@Base+0x238>
   2a80c:	ldr	r1, [pc, #60]	; 2a850 <flatcc_builder_table_add_union@@Base+0x210>
   2a810:	ldr	r0, [pc, #92]	; 2a874 <flatcc_builder_table_add_union@@Base+0x234>
   2a814:	bl	14618 <__assert_fail@plt>
   2a818:	ldr	r3, [pc, #68]	; 2a864 <flatcc_builder_table_add_union@@Base+0x224>
   2a81c:	ldr	r2, [pc, #88]	; 2a87c <flatcc_builder_table_add_union@@Base+0x23c>
   2a820:	ldr	r1, [pc, #40]	; 2a850 <flatcc_builder_table_add_union@@Base+0x210>
   2a824:	ldr	r0, [pc, #84]	; 2a880 <flatcc_builder_table_add_union@@Base+0x240>
   2a828:	bl	14618 <__assert_fail@plt>
   2a82c:	ldr	r3, [pc, #20]	; 2a848 <flatcc_builder_table_add_union@@Base+0x208>
   2a830:	ldr	r2, [pc, #76]	; 2a884 <flatcc_builder_table_add_union@@Base+0x244>
   2a834:	ldr	r1, [pc, #20]	; 2a850 <flatcc_builder_table_add_union@@Base+0x210>
   2a838:	ldr	r0, [pc, #72]	; 2a888 <flatcc_builder_table_add_union@@Base+0x248>
   2a83c:	bl	14618 <__assert_fail@plt>
   2a840:	strdeq	r7, [r0], -ip
   2a844:			; <UNDEFINED> instruction: 0x9e3779b1
   2a848:	andeq	r4, r4, ip, lsl lr
   2a84c:	andeq	r0, r0, pc, ror #11
   2a850:	andeq	r4, r4, r4, lsl #29
   2a854:	andeq	r5, r4, ip, lsr #4
   2a858:	strdeq	pc, [r0], -ip
   2a85c:	strdeq	r0, [r0], -r6
   2a860:	andeq	r5, r4, ip, asr r2
   2a864:	andeq	r4, r4, r4, asr #27
   2a868:	strdeq	r0, [r0], -r8
   2a86c:	andeq	r4, r4, r4, asr #30
   2a870:	andeq	r0, r0, lr, ror #11
   2a874:	andeq	r5, r4, r0, asr r1
   2a878:	andeq	r0, r0, sp, ror #13
   2a87c:	andeq	r0, r0, lr, ror #13
   2a880:	andeq	r5, r4, r8, ror #3
   2a884:	strdeq	r0, [r0], -r2
   2a888:	andeq	r5, r4, r0, asr r2

0002a88c <flatcc_builder_table_add_union_vector@@Base>:
   2a88c:	push	{r4, r5, r6, r7, lr}
   2a890:	sub	sp, sp, #12
   2a894:	add	ip, sp, #8
   2a898:	stmdb	ip, {r2, r3}
   2a89c:	ldr	r3, [r0, #32]
   2a8a0:	ldr	r4, [sp]
   2a8a4:	ldr	r6, [sp, #4]
   2a8a8:	ldrh	r3, [r3, #14]
   2a8ac:	cmp	r3, #3
   2a8b0:	bne	2a940 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   2a8b4:	clz	r3, r6
   2a8b8:	clz	r2, r4
   2a8bc:	lsr	r3, r3, #5
   2a8c0:	lsr	r2, r2, #5
   2a8c4:	cmp	r2, r3
   2a8c8:	beq	2a8e8 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   2a8cc:	adds	r4, r4, #0
   2a8d0:	movne	r4, #1
   2a8d4:	cmp	r4, r3
   2a8d8:	mvnne	r0, #0
   2a8dc:	beq	2a954 <flatcc_builder_table_add_union_vector@@Base+0xc8>
   2a8e0:	add	sp, sp, #12
   2a8e4:	pop	{r4, r5, r6, r7, pc}
   2a8e8:	cmp	r4, #0
   2a8ec:	moveq	r0, r4
   2a8f0:	beq	2a8e0 <flatcc_builder_table_add_union_vector@@Base+0x54>
   2a8f4:	mov	r7, r1
   2a8f8:	sub	r1, r1, #1
   2a8fc:	mov	r5, r0
   2a900:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   2a904:	cmp	r0, #0
   2a908:	beq	2a968 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   2a90c:	str	r4, [r0]
   2a910:	mov	r1, r7
   2a914:	mov	r0, r5
   2a918:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   2a91c:	cmp	r0, #0
   2a920:	strne	r6, [r0]
   2a924:	movne	r0, #0
   2a928:	bne	2a8e0 <flatcc_builder_table_add_union_vector@@Base+0x54>
   2a92c:	ldr	r3, [pc, #72]	; 2a97c <flatcc_builder_table_add_union_vector@@Base+0xf0>
   2a930:	ldr	r2, [pc, #72]	; 2a980 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   2a934:	ldr	r1, [pc, #72]	; 2a984 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   2a938:	ldr	r0, [pc, #72]	; 2a988 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   2a93c:	bl	14618 <__assert_fail@plt>
   2a940:	ldr	r3, [pc, #52]	; 2a97c <flatcc_builder_table_add_union_vector@@Base+0xf0>
   2a944:	mov	r2, #1536	; 0x600
   2a948:	ldr	r1, [pc, #52]	; 2a984 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   2a94c:	ldr	r0, [pc, #56]	; 2a98c <flatcc_builder_table_add_union_vector@@Base+0x100>
   2a950:	bl	14618 <__assert_fail@plt>
   2a954:	ldr	r3, [pc, #32]	; 2a97c <flatcc_builder_table_add_union_vector@@Base+0xf0>
   2a958:	ldr	r2, [pc, #48]	; 2a990 <flatcc_builder_table_add_union_vector@@Base+0x104>
   2a95c:	ldr	r1, [pc, #32]	; 2a984 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   2a960:	ldr	r0, [pc, #44]	; 2a994 <flatcc_builder_table_add_union_vector@@Base+0x108>
   2a964:	bl	14618 <__assert_fail@plt>
   2a968:	ldr	r3, [pc, #12]	; 2a97c <flatcc_builder_table_add_union_vector@@Base+0xf0>
   2a96c:	ldr	r2, [pc, #36]	; 2a998 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   2a970:	ldr	r1, [pc, #12]	; 2a984 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   2a974:	ldr	r0, [pc, #12]	; 2a988 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   2a978:	bl	14618 <__assert_fail@plt>
   2a97c:	andeq	r4, r4, ip, lsr lr
   2a980:	andeq	r0, r0, r8, lsl #12
   2a984:	andeq	r4, r4, r4, lsl #29
   2a988:	andeq	r5, r4, r0, asr r2
   2a98c:	andeq	r5, r4, r0, asr r1
   2a990:	andeq	r0, r0, r1, lsl #12
   2a994:	andeq	r5, r4, r8, ror #4
   2a998:	andeq	r0, r0, r4, lsl #12

0002a99c <flatcc_builder_push_buffer_alignment@@Base>:
   2a99c:	mov	r3, r0
   2a9a0:	mov	r2, #4
   2a9a4:	ldrh	r0, [r0, #128]	; 0x80
   2a9a8:	strh	r2, [r3, #128]	; 0x80
   2a9ac:	bx	lr

0002a9b0 <flatcc_builder_pop_buffer_alignment@@Base>:
   2a9b0:	ldrh	r3, [r0, #128]	; 0x80
   2a9b4:	cmp	r3, r1
   2a9b8:	strhcc	r1, [r0, #128]	; 0x80
   2a9bc:	bx	lr

0002a9c0 <flatcc_builder_get_buffer_alignment@@Base>:
   2a9c0:	ldrh	r0, [r0, #128]	; 0x80
   2a9c4:	bx	lr

0002a9c8 <flatcc_builder_set_vtable_clustering@@Base>:
   2a9c8:	clz	r1, r1
   2a9cc:	lsr	r1, r1, #5
   2a9d0:	str	r1, [r0, #180]	; 0xb4
   2a9d4:	bx	lr

0002a9d8 <flatcc_builder_set_block_align@@Base>:
   2a9d8:	strh	r1, [r0, #132]	; 0x84
   2a9dc:	bx	lr

0002a9e0 <flatcc_builder_get_level@@Base>:
   2a9e0:	ldr	r0, [r0, #156]	; 0x9c
   2a9e4:	bx	lr

0002a9e8 <flatcc_builder_set_max_level@@Base>:
   2a9e8:	ldr	r3, [r0, #160]	; 0xa0
   2a9ec:	str	r1, [r0, #176]	; 0xb0
   2a9f0:	cmp	r1, r3
   2a9f4:	strgt	r1, [r0, #160]	; 0xa0
   2a9f8:	bx	lr

0002a9fc <flatcc_builder_get_buffer_size@@Base>:
   2a9fc:	ldr	r2, [r0, #140]	; 0x8c
   2aa00:	ldr	r0, [r0, #136]	; 0x88
   2aa04:	sub	r0, r2, r0
   2aa08:	bx	lr

0002aa0c <flatcc_builder_get_buffer_start@@Base>:
   2aa0c:	ldr	r0, [r0, #136]	; 0x88
   2aa10:	bx	lr

0002aa14 <flatcc_builder_get_buffer_end@@Base>:
   2aa14:	ldr	r0, [r0, #140]	; 0x8c
   2aa18:	bx	lr

0002aa1c <flatcc_builder_set_vtable_cache_limit@@Base>:
   2aa1c:	str	r1, [r0, #172]	; 0xac
   2aa20:	bx	lr

0002aa24 <flatcc_builder_set_identifier@@Base>:
   2aa24:	ldr	r3, [pc, #16]	; 2aa3c <flatcc_builder_set_identifier@@Base+0x18>
   2aa28:	cmp	r1, #0
   2aa2c:	moveq	r1, r3
   2aa30:	ldr	r3, [r1]
   2aa34:	str	r3, [r0, #168]	; 0xa8
   2aa38:	bx	lr
   2aa3c:	andeq	r4, r4, ip, asr #15

0002aa40 <flatcc_builder_get_type@@Base>:
   2aa40:	ldr	r0, [r0, #32]
   2aa44:	cmp	r0, #0
   2aa48:	ldrhne	r0, [r0, #14]
   2aa4c:	bx	lr

0002aa50 <flatcc_builder_get_type_at@@Base>:
   2aa50:	cmp	r1, #0
   2aa54:	ble	2aa7c <flatcc_builder_get_type_at@@Base+0x2c>
   2aa58:	ldr	r3, [r0, #156]	; 0x9c
   2aa5c:	cmp	r1, r3
   2aa60:	bgt	2aa7c <flatcc_builder_get_type_at@@Base+0x2c>
   2aa64:	sub	r1, r1, r3
   2aa68:	ldr	r3, [r0, #32]
   2aa6c:	add	r1, r1, r1, lsl #3
   2aa70:	add	r1, r3, r1, lsl #2
   2aa74:	ldrh	r0, [r1, #14]
   2aa78:	bx	lr
   2aa7c:	mov	r0, #0
   2aa80:	bx	lr

0002aa84 <flatcc_builder_get_direct_buffer@@Base>:
   2aa84:	ldr	r3, [r0, #184]	; 0xb8
   2aa88:	cmp	r3, #0
   2aa8c:	beq	2aaa0 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   2aa90:	ldr	r2, [r0, #188]	; 0xbc
   2aa94:	ldr	r3, [r0, #192]	; 0xc0
   2aa98:	cmp	r2, r3
   2aa9c:	beq	2aab4 <flatcc_builder_get_direct_buffer@@Base+0x30>
   2aaa0:	cmp	r1, #0
   2aaa4:	movne	r0, #0
   2aaa8:	strne	r0, [r1]
   2aaac:	moveq	r0, r1
   2aab0:	bx	lr
   2aab4:	cmp	r1, #0
   2aab8:	ldrne	r3, [r0, #212]	; 0xd4
   2aabc:	ldr	r0, [r0, #196]	; 0xc4
   2aac0:	strne	r3, [r1]
   2aac4:	bx	lr

0002aac8 <flatcc_builder_copy_buffer@@Base>:
   2aac8:	ldr	r3, [r0, #184]	; 0xb8
   2aacc:	cmp	r3, #0
   2aad0:	beq	2aaec <flatcc_builder_copy_buffer@@Base+0x24>
   2aad4:	push	{r4, lr}
   2aad8:	add	r0, r0, #188	; 0xbc
   2aadc:	bl	2b1a0 <flatcc_emitter_copy_buffer@@Base>
   2aae0:	cmp	r0, #0
   2aae4:	popne	{r4, pc}
   2aae8:	bl	14890 <__assert_fail@plt+0x278>
   2aaec:	mov	r0, r3
   2aaf0:	bx	lr

0002aaf4 <flatcc_builder_finalize_buffer@@Base>:
   2aaf4:	push	{r4, r5, r6, lr}
   2aaf8:	cmp	r1, #0
   2aafc:	ldr	r4, [r0, #140]	; 0x8c
   2ab00:	ldr	r2, [r0, #136]	; 0x88
   2ab04:	mov	r5, r0
   2ab08:	sub	r4, r4, r2
   2ab0c:	strne	r4, [r1]
   2ab10:	mov	r0, r4
   2ab14:	bl	1457c <malloc@plt>
   2ab18:	subs	r6, r0, #0
   2ab1c:	beq	2ab60 <flatcc_builder_finalize_buffer@@Base+0x6c>
   2ab20:	ldr	r3, [r5, #184]	; 0xb8
   2ab24:	cmp	r3, #0
   2ab28:	beq	2ab4c <flatcc_builder_finalize_buffer@@Base+0x58>
   2ab2c:	mov	r2, r4
   2ab30:	add	r0, r5, #188	; 0xbc
   2ab34:	mov	r1, r6
   2ab38:	bl	2b1a0 <flatcc_emitter_copy_buffer@@Base>
   2ab3c:	cmp	r0, #0
   2ab40:	beq	2ab74 <flatcc_builder_finalize_buffer@@Base+0x80>
   2ab44:	mov	r0, r6
   2ab48:	pop	{r4, r5, r6, pc}
   2ab4c:	ldr	r3, [pc, #36]	; 2ab78 <flatcc_builder_finalize_buffer@@Base+0x84>
   2ab50:	ldr	r2, [pc, #36]	; 2ab7c <flatcc_builder_finalize_buffer@@Base+0x88>
   2ab54:	ldr	r1, [pc, #36]	; 2ab80 <flatcc_builder_finalize_buffer@@Base+0x8c>
   2ab58:	ldr	r0, [pc, #36]	; 2ab84 <flatcc_builder_finalize_buffer@@Base+0x90>
   2ab5c:	bl	14618 <__assert_fail@plt>
   2ab60:	ldr	r3, [pc, #16]	; 2ab78 <flatcc_builder_finalize_buffer@@Base+0x84>
   2ab64:	ldr	r2, [pc, #28]	; 2ab88 <flatcc_builder_finalize_buffer@@Base+0x94>
   2ab68:	ldr	r1, [pc, #16]	; 2ab80 <flatcc_builder_finalize_buffer@@Base+0x8c>
   2ab6c:	ldr	r0, [pc, #16]	; 2ab84 <flatcc_builder_finalize_buffer@@Base+0x90>
   2ab70:	bl	14618 <__assert_fail@plt>
   2ab74:	bl	14890 <__assert_fail@plt+0x278>
   2ab78:	andeq	r4, r4, r4, ror #28
   2ab7c:	muleq	r0, ip, r7
   2ab80:	andeq	r4, r4, r4, lsl #29
   2ab84:	andeq	r4, r4, r4, asr #30
   2ab88:	muleq	r0, r8, r7

0002ab8c <flatcc_builder_finalize_aligned_buffer@@Base>:
   2ab8c:	push	{r4, r5, r6, r7, lr}
   2ab90:	subs	r7, r1, #0
   2ab94:	ldrh	r1, [r0, #128]	; 0x80
   2ab98:	ldr	r4, [r0, #140]	; 0x8c
   2ab9c:	ldr	r3, [r0, #136]	; 0x88
   2aba0:	sub	sp, sp, #12
   2aba4:	sub	r3, r4, r3
   2aba8:	sub	r4, r1, #1
   2abac:	strne	r3, [r7]
   2abb0:	add	r4, r4, r3
   2abb4:	mov	r5, r0
   2abb8:	rsb	r3, r1, #0
   2abbc:	add	r0, sp, #8
   2abc0:	cmp	r1, #4
   2abc4:	mov	ip, #0
   2abc8:	and	r4, r4, r3
   2abcc:	movcc	r1, #4
   2abd0:	mov	r2, r4
   2abd4:	str	ip, [r0, #-4]!
   2abd8:	bl	145b8 <posix_memalign@plt>
   2abdc:	cmp	r0, #0
   2abe0:	beq	2ac10 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   2abe4:	ldr	r0, [sp, #4]
   2abe8:	cmp	r0, #0
   2abec:	beq	2abf4 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   2abf0:	bl	14540 <free@plt>
   2abf4:	cmp	r7, #0
   2abf8:	moveq	r6, r7
   2abfc:	movne	r6, #0
   2ac00:	strne	r6, [r7]
   2ac04:	mov	r0, r6
   2ac08:	add	sp, sp, #12
   2ac0c:	pop	{r4, r5, r6, r7, pc}
   2ac10:	ldr	r6, [sp, #4]
   2ac14:	cmp	r6, #0
   2ac18:	beq	2abf4 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   2ac1c:	ldr	r3, [r5, #184]	; 0xb8
   2ac20:	cmp	r3, #0
   2ac24:	beq	2ac44 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   2ac28:	mov	r2, r4
   2ac2c:	add	r0, r5, #188	; 0xbc
   2ac30:	mov	r1, r6
   2ac34:	bl	2b1a0 <flatcc_emitter_copy_buffer@@Base>
   2ac38:	cmp	r0, #0
   2ac3c:	bne	2ac04 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   2ac40:	bl	14890 <__assert_fail@plt+0x278>
   2ac44:	mov	r0, r6
   2ac48:	b	2abf0 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>

0002ac4c <flatcc_builder_aligned_alloc@@Base>:
   2ac4c:	push	{r4, lr}
   2ac50:	sub	sp, sp, #8
   2ac54:	add	r3, sp, #8
   2ac58:	cmp	r0, #4
   2ac5c:	mov	r4, #0
   2ac60:	mov	r2, r1
   2ac64:	str	r4, [r3, #-4]!
   2ac68:	movcs	r1, r0
   2ac6c:	movcc	r1, #4
   2ac70:	mov	r0, r3
   2ac74:	bl	145b8 <posix_memalign@plt>
   2ac78:	cmp	r0, r4
   2ac7c:	ldr	r0, [sp, #4]
   2ac80:	beq	2ac94 <flatcc_builder_aligned_alloc@@Base+0x48>
   2ac84:	cmp	r0, #0
   2ac88:	beq	2ac94 <flatcc_builder_aligned_alloc@@Base+0x48>
   2ac8c:	bl	14540 <free@plt>
   2ac90:	mov	r0, r4
   2ac94:	add	sp, sp, #8
   2ac98:	pop	{r4, pc}

0002ac9c <flatcc_builder_aligned_free@@Base>:
   2ac9c:	b	14540 <free@plt>

0002aca0 <flatcc_builder_get_emit_context@@Base>:
   2aca0:	ldr	r0, [r0, #36]	; 0x24
   2aca4:	bx	lr

0002aca8 <flatcc_emitter_recycle_page@@Base>:
   2aca8:	ldr	r3, [r0]
   2acac:	cmp	r3, r1
   2acb0:	beq	2acf8 <flatcc_emitter_recycle_page@@Base+0x50>
   2acb4:	ldr	r2, [r0, #4]
   2acb8:	cmp	r1, r2
   2acbc:	beq	2acf8 <flatcc_emitter_recycle_page@@Base+0x50>
   2acc0:	ldr	ip, [r1, #2944]	; 0xb80
   2acc4:	ldr	r2, [r1, #2948]	; 0xb84
   2acc8:	push	{lr}		; (str lr, [sp, #-4]!)
   2accc:	mov	r0, #0
   2acd0:	str	r2, [ip, #2948]	; 0xb84
   2acd4:	ldr	r2, [r3, #2948]	; 0xb84
   2acd8:	ldr	lr, [r1, #2948]	; 0xb84
   2acdc:	str	ip, [lr, #2944]	; 0xb80
   2ace0:	str	r3, [r1, #2944]	; 0xb80
   2ace4:	str	r2, [r1, #2948]	; 0xb84
   2ace8:	str	r1, [r2, #2944]	; 0xb80
   2acec:	ldr	r3, [r1, #2944]	; 0xb80
   2acf0:	str	r1, [r3, #2948]	; 0xb84
   2acf4:	pop	{pc}		; (ldr pc, [sp], #4)
   2acf8:	mvn	r0, #0
   2acfc:	bx	lr

0002ad00 <flatcc_emitter_reset@@Base>:
   2ad00:	ldr	r2, [r0]
   2ad04:	cmp	r2, #0
   2ad08:	bxeq	lr
   2ad0c:	ldr	r3, [r0, #32]
   2ad10:	mov	r1, #1472	; 0x5c0
   2ad14:	push	{r4, lr}
   2ad18:	cmp	r3, #0
   2ad1c:	str	r1, [r0, #12]
   2ad20:	str	r1, [r0, #20]
   2ad24:	ldr	r1, [r0, #24]
   2ad28:	add	ip, r2, #1472	; 0x5c0
   2ad2c:	moveq	r3, r1
   2ad30:	stmib	r0, {r2, ip}
   2ad34:	str	ip, [r0, #16]
   2ad38:	add	ip, r3, r3, lsl #1
   2ad3c:	lsr	r3, r1, #2
   2ad40:	add	r3, r3, ip, lsr #2
   2ad44:	ldr	ip, [r0, #28]
   2ad48:	ldr	lr, [pc, #104]	; 2adb8 <flatcc_emitter_reset@@Base+0xb8>
   2ad4c:	cmp	ip, r3, lsl #1
   2ad50:	mov	r1, #0
   2ad54:	str	lr, [r2, #2952]	; 0xb88
   2ad58:	str	r3, [r0, #32]
   2ad5c:	str	r1, [r0, #24]
   2ad60:	popls	{r4, pc}
   2ad64:	ldr	r3, [r2, #2944]	; 0xb80
   2ad68:	mov	r4, r0
   2ad6c:	cmp	r2, r3
   2ad70:	popeq	{r4, pc}
   2ad74:	ldr	r1, [r3, #2944]	; 0xb80
   2ad78:	mov	r0, r3
   2ad7c:	str	r1, [r2, #2944]	; 0xb80
   2ad80:	ldr	r3, [r3, #2944]	; 0xb80
   2ad84:	str	r2, [r3, #2948]	; 0xb84
   2ad88:	bl	14540 <free@plt>
   2ad8c:	ldr	r3, [r4, #28]
   2ad90:	ldr	r2, [r4, #32]
   2ad94:	sub	r3, r3, #2944	; 0xb80
   2ad98:	str	r3, [r4, #28]
   2ad9c:	cmp	r3, r2, lsl #1
   2ada0:	popls	{r4, pc}
   2ada4:	ldm	r4, {r1, r2}
   2ada8:	ldr	r3, [r2, #2944]	; 0xb80
   2adac:	cmp	r3, r1
   2adb0:	bne	2ad74 <flatcc_emitter_reset@@Base+0x74>
   2adb4:	pop	{r4, pc}
   2adb8:			; <UNDEFINED> instruction: 0xfffffa40

0002adbc <flatcc_emitter_clear@@Base>:
   2adbc:	ldr	r3, [r0]
   2adc0:	cmp	r3, #0
   2adc4:	bxeq	lr
   2adc8:	ldr	r2, [r3, #2948]	; 0xb84
   2adcc:	mov	r1, #0
   2add0:	push	{r4, r5, r6, lr}
   2add4:	mov	r5, r0
   2add8:	str	r1, [r2, #2944]	; 0xb80
   2addc:	ldr	r4, [r3, #2944]	; 0xb80
   2ade0:	cmp	r4, r1
   2ade4:	bne	2adf0 <flatcc_emitter_clear@@Base+0x34>
   2ade8:	b	2ae20 <flatcc_emitter_clear@@Base+0x64>
   2adec:	mov	r4, r3
   2adf0:	ldr	r0, [r4, #2948]	; 0xb84
   2adf4:	bl	14540 <free@plt>
   2adf8:	ldr	r3, [r4, #2944]	; 0xb80
   2adfc:	cmp	r3, #0
   2ae00:	bne	2adec <flatcc_emitter_clear@@Base+0x30>
   2ae04:	mov	r0, r4
   2ae08:	bl	14540 <free@plt>
   2ae0c:	mov	r0, r5
   2ae10:	mov	r2, #36	; 0x24
   2ae14:	mov	r1, #0
   2ae18:	pop	{r4, r5, r6, lr}
   2ae1c:	b	145c4 <memset@plt>
   2ae20:	mov	r4, r3
   2ae24:	b	2ae04 <flatcc_emitter_clear@@Base+0x48>

0002ae28 <flatcc_emitter@@Base>:
   2ae28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ae2c:	sub	sp, sp, #12
   2ae30:	mov	r5, r0
   2ae34:	ldr	ip, [sp, #48]	; 0x30
   2ae38:	ldr	r0, [r0, #24]
   2ae3c:	cmp	r3, #0
   2ae40:	add	r0, r0, ip
   2ae44:	str	r0, [r5, #24]
   2ae48:	blt	2b010 <flatcc_emitter@@Base+0x1e8>
   2ae4c:	ldr	r0, [r5, #20]
   2ae50:	cmp	ip, r0
   2ae54:	bls	2aee4 <flatcc_emitter@@Base+0xbc>
   2ae58:	cmp	r2, #0
   2ae5c:	addne	r7, r1, #8
   2ae60:	movne	r8, r2
   2ae64:	movne	r9, #2944	; 0xb80
   2ae68:	beq	2aed8 <flatcc_emitter@@Base+0xb0>
   2ae6c:	ldr	r6, [r7, #-4]
   2ae70:	ldr	sl, [r7, #-8]
   2ae74:	cmp	r6, #0
   2ae78:	movne	r4, r0
   2ae7c:	beq	2aecc <flatcc_emitter@@Base+0xa4>
   2ae80:	cmp	r6, r4
   2ae84:	bls	2af2c <flatcc_emitter@@Base+0x104>
   2ae88:	cmp	r4, #0
   2ae8c:	beq	2af38 <flatcc_emitter@@Base+0x110>
   2ae90:	sub	r6, r6, r4
   2ae94:	mov	r2, r4
   2ae98:	mov	r1, sl
   2ae9c:	ldr	r0, [r5, #16]
   2aea0:	bl	1454c <memcpy@plt>
   2aea4:	ldr	r0, [r5, #20]
   2aea8:	ldr	r3, [r5, #16]
   2aeac:	add	sl, sl, r4
   2aeb0:	add	r3, r3, r4
   2aeb4:	cmp	r6, #0
   2aeb8:	sub	r4, r0, r4
   2aebc:	str	r3, [r5, #16]
   2aec0:	str	r4, [r5, #20]
   2aec4:	mov	r0, r4
   2aec8:	bne	2ae80 <flatcc_emitter@@Base+0x58>
   2aecc:	subs	r8, r8, #1
   2aed0:	add	r7, r7, #8
   2aed4:	bne	2ae6c <flatcc_emitter@@Base+0x44>
   2aed8:	mov	r0, #0
   2aedc:	add	sp, sp, #12
   2aee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aee4:	ldr	r3, [r5, #16]
   2aee8:	sub	r0, r0, ip
   2aeec:	add	ip, r3, ip
   2aef0:	str	r0, [r5, #20]
   2aef4:	str	ip, [r5, #16]
   2aef8:	cmp	r2, #0
   2aefc:	addne	r4, r1, #8
   2af00:	movne	r7, r2
   2af04:	beq	2aed8 <flatcc_emitter@@Base+0xb0>
   2af08:	ldmdb	r4, {r1, r2}
   2af0c:	mov	r0, r3
   2af10:	bl	1454c <memcpy@plt>
   2af14:	ldr	r2, [r4, #-4]
   2af18:	subs	r7, r7, #1
   2af1c:	add	r4, r4, #8
   2af20:	add	r3, r0, r2
   2af24:	bne	2af08 <flatcc_emitter@@Base+0xe0>
   2af28:	b	2aed8 <flatcc_emitter@@Base+0xb0>
   2af2c:	mov	r4, r6
   2af30:	mov	r6, #0
   2af34:	b	2ae94 <flatcc_emitter@@Base+0x6c>
   2af38:	ldr	r4, [r5, #4]
   2af3c:	cmp	r4, #0
   2af40:	beq	2afb0 <flatcc_emitter@@Base+0x188>
   2af44:	ldr	fp, [r4, #2944]	; 0xb80
   2af48:	ldr	r3, [r5]
   2af4c:	cmp	fp, r3
   2af50:	beq	2af78 <flatcc_emitter@@Base+0x150>
   2af54:	str	fp, [r5, #4]
   2af58:	ldr	r3, [fp, #2948]	; 0xb84
   2af5c:	mov	r4, #2944	; 0xb80
   2af60:	str	fp, [r5, #16]
   2af64:	ldr	r3, [r3, #2952]	; 0xb88
   2af68:	str	r9, [r5, #20]
   2af6c:	add	r3, r3, r4
   2af70:	str	r3, [fp, #2952]	; 0xb88
   2af74:	b	2ae80 <flatcc_emitter@@Base+0x58>
   2af78:	ldr	r0, [pc, #540]	; 2b19c <flatcc_emitter@@Base+0x374>
   2af7c:	bl	1457c <malloc@plt>
   2af80:	cmp	r0, #0
   2af84:	beq	2afc0 <flatcc_emitter@@Base+0x198>
   2af88:	ldr	r3, [r5, #28]
   2af8c:	str	fp, [r0, #2944]	; 0xb80
   2af90:	add	r3, r3, #2944	; 0xb80
   2af94:	str	r4, [r0, #2948]	; 0xb84
   2af98:	str	r3, [r5, #28]
   2af9c:	str	r0, [fp, #2948]	; 0xb84
   2afa0:	str	r0, [r4, #2944]	; 0xb80
   2afa4:	mov	fp, r0
   2afa8:	str	r0, [r5, #4]
   2afac:	b	2af58 <flatcc_emitter@@Base+0x130>
   2afb0:	ldr	r0, [pc, #484]	; 2b19c <flatcc_emitter@@Base+0x374>
   2afb4:	bl	1457c <malloc@plt>
   2afb8:	cmp	r0, #0
   2afbc:	bne	2afcc <flatcc_emitter@@Base+0x1a4>
   2afc0:	mvn	r0, #0
   2afc4:	add	sp, sp, #12
   2afc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2afcc:	mov	r2, #1472	; 0x5c0
   2afd0:	ldr	r3, [r5, #28]
   2afd4:	str	r2, [r5, #12]
   2afd8:	str	r2, [r5, #20]
   2afdc:	sub	r2, r2, #2944	; 0xb80
   2afe0:	str	r2, [r0, #2952]	; 0xb88
   2afe4:	str	r0, [r5]
   2afe8:	add	r3, r3, #2944	; 0xb80
   2afec:	str	r0, [r5, #4]
   2aff0:	str	r0, [r0, #2944]	; 0xb80
   2aff4:	str	r0, [r0, #2948]	; 0xb84
   2aff8:	add	r0, r0, #1472	; 0x5c0
   2affc:	str	r0, [r5, #8]
   2b000:	str	r0, [r5, #16]
   2b004:	str	r3, [r5, #28]
   2b008:	mov	r4, #1472	; 0x5c0
   2b00c:	b	2ae80 <flatcc_emitter@@Base+0x58>
   2b010:	ldr	r0, [r5, #12]
   2b014:	cmp	ip, r0
   2b018:	bls	2b098 <flatcc_emitter@@Base+0x270>
   2b01c:	add	r6, r1, r2, lsl #3
   2b020:	mov	r7, r2
   2b024:	mov	r9, #2944	; 0xb80
   2b028:	mov	r8, #0
   2b02c:	cmp	r7, #0
   2b030:	beq	2aed8 <flatcc_emitter@@Base+0xb0>
   2b034:	ldr	r4, [r6, #-4]
   2b038:	ldr	sl, [r6, #-8]
   2b03c:	cmp	r4, #0
   2b040:	add	sl, sl, r4
   2b044:	beq	2b08c <flatcc_emitter@@Base+0x264>
   2b048:	ldr	r2, [r5, #12]
   2b04c:	cmp	r2, r4
   2b050:	bcs	2b0b0 <flatcc_emitter@@Base+0x288>
   2b054:	cmp	r2, #0
   2b058:	beq	2b0c0 <flatcc_emitter@@Base+0x298>
   2b05c:	sub	r4, r4, r2
   2b060:	mov	r1, r8
   2b064:	ldr	r0, [r5, #8]
   2b068:	rsb	r3, r2, #0
   2b06c:	add	r0, r0, r3
   2b070:	add	sl, sl, r3
   2b074:	str	r1, [r5, #12]
   2b078:	str	r0, [r5, #8]
   2b07c:	mov	r1, sl
   2b080:	bl	1454c <memcpy@plt>
   2b084:	cmp	r4, #0
   2b088:	bne	2b048 <flatcc_emitter@@Base+0x220>
   2b08c:	sub	r6, r6, #8
   2b090:	sub	r7, r7, #1
   2b094:	b	2b02c <flatcc_emitter@@Base+0x204>
   2b098:	ldr	r3, [r5, #8]
   2b09c:	sub	r0, r0, ip
   2b0a0:	sub	r3, r3, ip
   2b0a4:	str	r0, [r5, #12]
   2b0a8:	str	r3, [r5, #8]
   2b0ac:	b	2aef8 <flatcc_emitter@@Base+0xd0>
   2b0b0:	sub	r1, r2, r4
   2b0b4:	mov	r2, r4
   2b0b8:	mov	r4, #0
   2b0bc:	b	2b064 <flatcc_emitter@@Base+0x23c>
   2b0c0:	ldr	r3, [r5]
   2b0c4:	cmp	r3, #0
   2b0c8:	beq	2b14c <flatcc_emitter@@Base+0x324>
   2b0cc:	ldr	fp, [r3, #2948]	; 0xb84
   2b0d0:	ldr	r2, [r5, #4]
   2b0d4:	cmp	fp, r2
   2b0d8:	beq	2b10c <flatcc_emitter@@Base+0x2e4>
   2b0dc:	ldr	r3, [r3, #2952]	; 0xb88
   2b0e0:	sub	r3, r3, #2944	; 0xb80
   2b0e4:	str	r3, [fp, #2952]	; 0xb88
   2b0e8:	str	fp, [r5]
   2b0ec:	ldr	r3, [fp, #2944]	; 0xb80
   2b0f0:	add	r2, fp, #2944	; 0xb80
   2b0f4:	str	r9, [r5, #12]
   2b0f8:	ldr	r3, [r3, #2952]	; 0xb88
   2b0fc:	str	r2, [r5, #8]
   2b100:	sub	r3, r3, #2944	; 0xb80
   2b104:	str	r3, [fp, #2952]	; 0xb88
   2b108:	b	2b048 <flatcc_emitter@@Base+0x220>
   2b10c:	ldr	r0, [pc, #136]	; 2b19c <flatcc_emitter@@Base+0x374>
   2b110:	str	r3, [sp, #4]
   2b114:	bl	1457c <malloc@plt>
   2b118:	ldr	r3, [sp, #4]
   2b11c:	cmp	r0, #0
   2b120:	beq	2afc0 <flatcc_emitter@@Base+0x198>
   2b124:	ldr	r2, [r5, #28]
   2b128:	str	fp, [r0, #2948]	; 0xb84
   2b12c:	add	r2, r2, #2944	; 0xb80
   2b130:	str	r3, [r0, #2944]	; 0xb80
   2b134:	str	r2, [r5, #28]
   2b138:	str	r0, [r3, #2948]	; 0xb84
   2b13c:	str	r0, [fp, #2944]	; 0xb80
   2b140:	str	r0, [r5]
   2b144:	mov	fp, r0
   2b148:	b	2b0ec <flatcc_emitter@@Base+0x2c4>
   2b14c:	ldr	r0, [pc, #72]	; 2b19c <flatcc_emitter@@Base+0x374>
   2b150:	bl	1457c <malloc@plt>
   2b154:	cmp	r0, #0
   2b158:	beq	2afc0 <flatcc_emitter@@Base+0x198>
   2b15c:	mov	r2, #1472	; 0x5c0
   2b160:	ldr	r3, [r5, #28]
   2b164:	str	r2, [r5, #12]
   2b168:	str	r2, [r5, #20]
   2b16c:	sub	r2, r2, #2944	; 0xb80
   2b170:	str	r2, [r0, #2952]	; 0xb88
   2b174:	str	r0, [r5]
   2b178:	add	r3, r3, #2944	; 0xb80
   2b17c:	str	r0, [r5, #4]
   2b180:	str	r0, [r0, #2944]	; 0xb80
   2b184:	str	r0, [r0, #2948]	; 0xb84
   2b188:	add	r0, r0, #1472	; 0x5c0
   2b18c:	str	r0, [r5, #8]
   2b190:	str	r0, [r5, #16]
   2b194:	str	r3, [r5, #28]
   2b198:	b	2b048 <flatcc_emitter@@Base+0x220>
   2b19c:	andeq	r0, r0, ip, lsl #23

0002b1a0 <flatcc_emitter_copy_buffer@@Base>:
   2b1a0:	ldr	ip, [r0, #24]
   2b1a4:	cmp	ip, r2
   2b1a8:	bhi	2b244 <flatcc_emitter_copy_buffer@@Base+0xa4>
   2b1ac:	ldr	r2, [r0]
   2b1b0:	cmp	r2, #0
   2b1b4:	beq	2b244 <flatcc_emitter_copy_buffer@@Base+0xa4>
   2b1b8:	mov	r3, r1
   2b1bc:	ldr	r1, [r0, #4]
   2b1c0:	push	{r4, r5, r6, lr}
   2b1c4:	cmp	r2, r1
   2b1c8:	mov	r5, r0
   2b1cc:	beq	2b250 <flatcc_emitter_copy_buffer@@Base+0xb0>
   2b1d0:	ldr	r4, [r0, #12]
   2b1d4:	ldr	r1, [r5, #8]
   2b1d8:	rsb	r4, r4, #2944	; 0xb80
   2b1dc:	mov	r2, r4
   2b1e0:	mov	r0, r3
   2b1e4:	bl	1454c <memcpy@plt>
   2b1e8:	ldr	r2, [r5]
   2b1ec:	ldr	r1, [r5, #4]
   2b1f0:	add	r3, r0, r4
   2b1f4:	ldr	r4, [r2, #2944]	; 0xb80
   2b1f8:	cmp	r4, r1
   2b1fc:	beq	2b228 <flatcc_emitter_copy_buffer@@Base+0x88>
   2b200:	mov	r6, #2944	; 0xb80
   2b204:	mov	r1, r4
   2b208:	mov	r0, r3
   2b20c:	mov	r2, r6
   2b210:	bl	1454c <memcpy@plt>
   2b214:	ldr	r4, [r4, #2944]	; 0xb80
   2b218:	ldr	r1, [r5, #4]
   2b21c:	cmp	r1, r4
   2b220:	add	r3, r0, #2944	; 0xb80
   2b224:	bne	2b204 <flatcc_emitter_copy_buffer@@Base+0x64>
   2b228:	ldr	r2, [r5, #20]
   2b22c:	mov	r0, r3
   2b230:	rsb	r2, r2, #2944	; 0xb80
   2b234:	bl	1454c <memcpy@plt>
   2b238:	mov	r3, r0
   2b23c:	mov	r0, r3
   2b240:	pop	{r4, r5, r6, pc}
   2b244:	mov	r3, #0
   2b248:	mov	r0, r3
   2b24c:	bx	lr
   2b250:	ldr	r1, [r0, #8]
   2b254:	mov	r2, ip
   2b258:	mov	r0, r3
   2b25c:	bl	1454c <memcpy@plt>
   2b260:	mov	r3, r0
   2b264:	b	2b23c <flatcc_emitter_copy_buffer@@Base+0x9c>

0002b268 <flatcc_verify_error_string@@Base>:
   2b268:	cmp	r0, #36	; 0x24
   2b26c:	ldrls	r3, [pc, #8]	; 2b27c <flatcc_verify_error_string@@Base+0x14>
   2b270:	ldrls	r0, [r3, r0, lsl #2]
   2b274:	ldrhi	r0, [pc, #4]	; 2b280 <flatcc_verify_error_string@@Base+0x18>
   2b278:	bx	lr
   2b27c:	muleq	r4, r0, r2
   2b280:	andeq	r5, r4, r4, lsr #6

0002b284 <flatcc_verify_field@@Base>:
   2b284:	add	r1, r1, #2
   2b288:	ldrh	ip, [r0, #22]
   2b28c:	lsl	r1, r1, #1
   2b290:	uxth	r1, r1
   2b294:	cmp	ip, r1
   2b298:	bls	2b2cc <flatcc_verify_field@@Base+0x48>
   2b29c:	ldr	ip, [r0, #12]
   2b2a0:	ldrh	r1, [ip, r1]
   2b2a4:	cmp	r1, #0
   2b2a8:	beq	2b2cc <flatcc_verify_field@@Base+0x48>
   2b2ac:	push	{lr}		; (str lr, [sp, #-4]!)
   2b2b0:	add	r2, r2, r1
   2b2b4:	ldrh	lr, [r0, #20]
   2b2b8:	ldr	ip, [r0]
   2b2bc:	cmp	r2, lr
   2b2c0:	bls	2b2d4 <flatcc_verify_field@@Base+0x50>
   2b2c4:	mov	r0, #13
   2b2c8:	pop	{pc}		; (ldr pc, [sp], #4)
   2b2cc:	mov	r0, #0
   2b2d0:	bx	lr
   2b2d4:	ldr	r0, [r0, #16]
   2b2d8:	sub	r3, r3, #1
   2b2dc:	add	r0, ip, r0
   2b2e0:	add	r0, r0, r1
   2b2e4:	tst	r0, r3
   2b2e8:	moveq	r0, #0
   2b2ec:	movne	r0, #12
   2b2f0:	pop	{pc}		; (ldr pc, [sp], #4)

0002b2f4 <flatcc_verify_string_field@@Base>:
   2b2f4:	add	r1, r1, #2
   2b2f8:	ldrh	r3, [r0, #22]
   2b2fc:	lsl	r1, r1, #1
   2b300:	uxth	r1, r1
   2b304:	cmp	r3, r1
   2b308:	bls	2b334 <flatcc_verify_string_field@@Base+0x40>
   2b30c:	ldr	r3, [r0, #12]
   2b310:	ldrh	r3, [r3, r1]
   2b314:	cmp	r3, #0
   2b318:	beq	2b334 <flatcc_verify_string_field@@Base+0x40>
   2b31c:	ldrh	r2, [r0, #20]
   2b320:	add	r1, r3, #4
   2b324:	cmp	r1, r2
   2b328:	bls	2b344 <flatcc_verify_string_field@@Base+0x50>
   2b32c:	mov	r0, #13
   2b330:	bx	lr
   2b334:	cmp	r2, #0
   2b338:	movne	r0, #4
   2b33c:	moveq	r0, #0
   2b340:	bx	lr
   2b344:	ldr	r2, [r0, #16]
   2b348:	add	r2, r3, r2
   2b34c:	tst	r2, #3
   2b350:	beq	2b35c <flatcc_verify_string_field@@Base+0x68>
   2b354:	mov	r0, #12
   2b358:	bx	lr
   2b35c:	cmp	r2, #0
   2b360:	beq	2b3b4 <flatcc_verify_string_field@@Base+0xc0>
   2b364:	ldr	r1, [r0]
   2b368:	ldr	r3, [r1, r2]
   2b36c:	add	r3, r2, r3
   2b370:	cmp	r2, r3
   2b374:	bcs	2b3ac <flatcc_verify_string_field@@Base+0xb8>
   2b378:	ldr	r2, [r0, #4]
   2b37c:	add	r0, r3, #4
   2b380:	cmp	r2, r0
   2b384:	bcc	2b3ac <flatcc_verify_string_field@@Base+0xb8>
   2b388:	tst	r3, #3
   2b38c:	bne	2b3ac <flatcc_verify_string_field@@Base+0xb8>
   2b390:	ldr	r3, [r1, r3]
   2b394:	sub	r2, r2, r0
   2b398:	add	ip, r3, #1
   2b39c:	cmp	r2, ip
   2b3a0:	bcs	2b3bc <flatcc_verify_string_field@@Base+0xc8>
   2b3a4:	mov	r0, #8
   2b3a8:	bx	lr
   2b3ac:	mov	r0, #17
   2b3b0:	bx	lr
   2b3b4:	mov	r0, r2
   2b3b8:	bx	lr
   2b3bc:	add	r1, r1, r0
   2b3c0:	ldrb	r0, [r1, r3]
   2b3c4:	cmp	r0, #0
   2b3c8:	movne	r0, #7
   2b3cc:	moveq	r0, #0
   2b3d0:	bx	lr

0002b3d4 <flatcc_verify_vector_field@@Base>:
   2b3d4:	add	r1, r1, #2
   2b3d8:	ldrh	ip, [r0, #22]
   2b3dc:	lsl	r1, r1, #1
   2b3e0:	push	{lr}		; (str lr, [sp, #-4]!)
   2b3e4:	uxth	r1, r1
   2b3e8:	cmp	ip, r1
   2b3ec:	ldrh	ip, [sp, #4]
   2b3f0:	bls	2b41c <flatcc_verify_vector_field@@Base+0x48>
   2b3f4:	ldr	lr, [r0, #12]
   2b3f8:	ldrh	r1, [lr, r1]
   2b3fc:	cmp	r1, #0
   2b400:	beq	2b41c <flatcc_verify_vector_field@@Base+0x48>
   2b404:	ldrh	r2, [r0, #20]
   2b408:	add	lr, r1, #4
   2b40c:	cmp	lr, r2
   2b410:	bls	2b42c <flatcc_verify_vector_field@@Base+0x58>
   2b414:	mov	r0, #13
   2b418:	pop	{pc}		; (ldr pc, [sp], #4)
   2b41c:	cmp	r2, #0
   2b420:	movne	r0, #4
   2b424:	moveq	r0, #0
   2b428:	pop	{pc}		; (ldr pc, [sp], #4)
   2b42c:	ldr	r2, [r0, #16]
   2b430:	add	r2, r1, r2
   2b434:	tst	r2, #3
   2b438:	beq	2b444 <flatcc_verify_vector_field@@Base+0x70>
   2b43c:	mov	r0, #12
   2b440:	pop	{pc}		; (ldr pc, [sp], #4)
   2b444:	cmp	r2, #0
   2b448:	beq	2b4a8 <flatcc_verify_vector_field@@Base+0xd4>
   2b44c:	ldr	lr, [r0]
   2b450:	ldr	r1, [lr, r2]
   2b454:	add	r1, r2, r1
   2b458:	cmp	r1, r2
   2b45c:	bls	2b4a0 <flatcc_verify_vector_field@@Base+0xcc>
   2b460:	ldr	r2, [r0, #4]
   2b464:	add	r0, r1, #4
   2b468:	cmp	r2, r0
   2b46c:	bcc	2b4a0 <flatcc_verify_vector_field@@Base+0xcc>
   2b470:	cmp	ip, #4
   2b474:	movcc	ip, #4
   2b478:	sub	ip, ip, #1
   2b47c:	orr	ip, ip, #3
   2b480:	tst	ip, r0
   2b484:	bne	2b4a0 <flatcc_verify_vector_field@@Base+0xcc>
   2b488:	ldr	r1, [lr, r1]
   2b48c:	ldr	ip, [sp, #8]
   2b490:	cmp	ip, r1
   2b494:	bcs	2b4b0 <flatcc_verify_vector_field@@Base+0xdc>
   2b498:	mov	r0, #25
   2b49c:	pop	{pc}		; (ldr pc, [sp], #4)
   2b4a0:	mov	r0, #16
   2b4a4:	pop	{pc}		; (ldr pc, [sp], #4)
   2b4a8:	mov	r0, r2
   2b4ac:	pop	{pc}		; (ldr pc, [sp], #4)
   2b4b0:	mul	r3, r1, r3
   2b4b4:	sub	r2, r2, r0
   2b4b8:	cmp	r2, r3
   2b4bc:	movcc	r0, #26
   2b4c0:	movcs	r0, #0
   2b4c4:	pop	{pc}		; (ldr pc, [sp], #4)

0002b4c8 <flatcc_verify_string_vector_field@@Base>:
   2b4c8:	add	r1, r1, #2
   2b4cc:	ldrh	r3, [r0, #22]
   2b4d0:	lsl	r1, r1, #1
   2b4d4:	uxth	r1, r1
   2b4d8:	cmp	r3, r1
   2b4dc:	bls	2b508 <flatcc_verify_string_vector_field@@Base+0x40>
   2b4e0:	ldr	r3, [r0, #12]
   2b4e4:	ldrh	r3, [r3, r1]
   2b4e8:	cmp	r3, #0
   2b4ec:	beq	2b508 <flatcc_verify_string_vector_field@@Base+0x40>
   2b4f0:	ldrh	r2, [r0, #20]
   2b4f4:	add	r1, r3, #4
   2b4f8:	cmp	r1, r2
   2b4fc:	bls	2b518 <flatcc_verify_string_vector_field@@Base+0x50>
   2b500:	mov	r0, #13
   2b504:	bx	lr
   2b508:	cmp	r2, #0
   2b50c:	movne	r0, #4
   2b510:	moveq	r0, #0
   2b514:	bx	lr
   2b518:	ldr	r2, [r0, #16]
   2b51c:	add	r2, r3, r2
   2b520:	tst	r2, #3
   2b524:	beq	2b530 <flatcc_verify_string_vector_field@@Base+0x68>
   2b528:	mov	r0, #12
   2b52c:	bx	lr
   2b530:	cmp	r2, #0
   2b534:	beq	2b5f4 <flatcc_verify_string_vector_field@@Base+0x12c>
   2b538:	push	{r4, r5, r6, lr}
   2b53c:	ldr	lr, [r0]
   2b540:	ldr	r1, [lr, r2]
   2b544:	add	r1, r2, r1
   2b548:	cmp	r2, r1
   2b54c:	bcs	2b588 <flatcc_verify_string_vector_field@@Base+0xc0>
   2b550:	ldr	r5, [r0, #4]
   2b554:	add	r3, r1, #4
   2b558:	cmp	r5, r3
   2b55c:	bcc	2b588 <flatcc_verify_string_vector_field@@Base+0xc0>
   2b560:	tst	r3, #3
   2b564:	bne	2b588 <flatcc_verify_string_vector_field@@Base+0xc0>
   2b568:	ldr	r0, [lr, r1]
   2b56c:	cmn	r0, #-1073741823	; 0xc0000001
   2b570:	bls	2b590 <flatcc_verify_string_vector_field@@Base+0xc8>
   2b574:	ldr	r2, [lr, r1]
   2b578:	cmn	r2, #-1073741823	; 0xc0000001
   2b57c:	bls	2b5fc <flatcc_verify_string_vector_field@@Base+0x134>
   2b580:	mov	r0, #25
   2b584:	pop	{r4, r5, r6, pc}
   2b588:	mov	r0, #16
   2b58c:	pop	{r4, r5, r6, pc}
   2b590:	lsl	r4, r0, #2
   2b594:	sub	r2, r5, r3
   2b598:	cmp	r2, r4
   2b59c:	bcc	2b574 <flatcc_verify_string_vector_field@@Base+0xac>
   2b5a0:	cmp	r0, #0
   2b5a4:	popeq	{r4, r5, r6, pc}
   2b5a8:	ldr	r2, [lr, r3]
   2b5ac:	add	ip, lr, r3
   2b5b0:	add	r2, r3, r2
   2b5b4:	cmp	r3, r2
   2b5b8:	bcs	2b5ec <flatcc_verify_string_vector_field@@Base+0x124>
   2b5bc:	add	r1, r2, #4
   2b5c0:	cmp	r5, r1
   2b5c4:	bcc	2b5ec <flatcc_verify_string_vector_field@@Base+0x124>
   2b5c8:	tst	r2, #3
   2b5cc:	bne	2b5ec <flatcc_verify_string_vector_field@@Base+0x124>
   2b5d0:	ldr	r2, [lr, r2]
   2b5d4:	sub	r0, r5, r1
   2b5d8:	add	r6, r2, #1
   2b5dc:	cmp	r6, r0
   2b5e0:	bls	2b610 <flatcc_verify_string_vector_field@@Base+0x148>
   2b5e4:	mov	r0, #8
   2b5e8:	pop	{r4, r5, r6, pc}
   2b5ec:	mov	r0, #17
   2b5f0:	pop	{r4, r5, r6, pc}
   2b5f4:	mov	r0, r2
   2b5f8:	bx	lr
   2b5fc:	sub	r3, r5, r3
   2b600:	cmp	r3, r2, lsl #2
   2b604:	movcs	r0, #0
   2b608:	movcc	r0, #26
   2b60c:	pop	{r4, r5, r6, pc}
   2b610:	add	r4, r3, r4
   2b614:	add	r1, lr, r1
   2b618:	ldrb	r0, [r1, r2]
   2b61c:	cmp	r0, #0
   2b620:	beq	2b62c <flatcc_verify_string_vector_field@@Base+0x164>
   2b624:	mov	r0, #7
   2b628:	pop	{r4, r5, r6, pc}
   2b62c:	add	r3, r3, #4
   2b630:	cmp	r4, r3
   2b634:	beq	2b678 <flatcc_verify_string_vector_field@@Base+0x1b0>
   2b638:	ldr	r2, [ip, #4]!
   2b63c:	add	r2, r3, r2
   2b640:	cmp	r3, r2
   2b644:	add	r1, r2, #4
   2b648:	bcs	2b5ec <flatcc_verify_string_vector_field@@Base+0x124>
   2b64c:	cmp	r5, r1
   2b650:	bcc	2b5ec <flatcc_verify_string_vector_field@@Base+0x124>
   2b654:	tst	r2, #3
   2b658:	sub	r6, r5, r1
   2b65c:	bne	2b5ec <flatcc_verify_string_vector_field@@Base+0x124>
   2b660:	ldr	r2, [lr, r2]
   2b664:	add	r0, r2, #1
   2b668:	cmp	r6, r0
   2b66c:	bcs	2b614 <flatcc_verify_string_vector_field@@Base+0x14c>
   2b670:	mov	r0, #8
   2b674:	pop	{r4, r5, r6, pc}
   2b678:	pop	{r4, r5, r6, pc}

0002b67c <flatcc_verify_table_field@@Base>:
   2b67c:	add	r1, r1, #2
   2b680:	ldrh	ip, [r0, #22]
   2b684:	lsl	r1, r1, #1
   2b688:	uxth	r1, r1
   2b68c:	cmp	ip, r1
   2b690:	bls	2b6bc <flatcc_verify_table_field@@Base+0x40>
   2b694:	ldr	ip, [r0, #12]
   2b698:	ldrh	r1, [ip, r1]
   2b69c:	cmp	r1, #0
   2b6a0:	beq	2b6bc <flatcc_verify_table_field@@Base+0x40>
   2b6a4:	ldrh	r2, [r0, #20]
   2b6a8:	add	ip, r1, #4
   2b6ac:	cmp	ip, r2
   2b6b0:	bls	2b6cc <flatcc_verify_table_field@@Base+0x50>
   2b6b4:	mov	r0, #13
   2b6b8:	bx	lr
   2b6bc:	cmp	r2, #0
   2b6c0:	movne	r0, #4
   2b6c4:	moveq	r0, #0
   2b6c8:	bx	lr
   2b6cc:	ldr	r2, [r0, #16]
   2b6d0:	add	r2, r1, r2
   2b6d4:	tst	r2, #3
   2b6d8:	beq	2b6e4 <flatcc_verify_table_field@@Base+0x68>
   2b6dc:	mov	r0, #12
   2b6e0:	bx	lr
   2b6e4:	cmp	r2, #0
   2b6e8:	beq	2b720 <flatcc_verify_table_field@@Base+0xa4>
   2b6ec:	ldr	r1, [r0, #8]
   2b6f0:	ldr	ip, [r0]
   2b6f4:	push	{r4, r5, lr}
   2b6f8:	sub	r1, r1, #1
   2b6fc:	sub	sp, sp, #28
   2b700:	cmp	r1, #0
   2b704:	ldr	lr, [r0, #4]
   2b708:	ldr	r0, [ip, r2]
   2b70c:	str	r1, [sp, #8]
   2b710:	moveq	r0, #3
   2b714:	bne	2b728 <flatcc_verify_table_field@@Base+0xac>
   2b718:	add	sp, sp, #28
   2b71c:	pop	{r4, r5, pc}
   2b720:	mov	r0, r2
   2b724:	bx	lr
   2b728:	add	r1, r0, r2
   2b72c:	cmp	r2, r1
   2b730:	bcs	2b7c8 <flatcc_verify_table_field@@Base+0x14c>
   2b734:	add	r2, r1, #4
   2b738:	cmp	lr, r2
   2b73c:	bcc	2b7c8 <flatcc_verify_table_field@@Base+0x14c>
   2b740:	tst	r1, #3
   2b744:	bne	2b7c8 <flatcc_verify_table_field@@Base+0x14c>
   2b748:	str	r1, [sp, #16]
   2b74c:	ldr	r2, [ip, r1]
   2b750:	subs	r2, r1, r2
   2b754:	bmi	2b7d0 <flatcc_verify_table_field@@Base+0x154>
   2b758:	tst	r2, #1
   2b75c:	bne	2b7d0 <flatcc_verify_table_field@@Base+0x154>
   2b760:	add	r0, r2, #2
   2b764:	cmp	lr, r0
   2b768:	movcc	r0, #27
   2b76c:	bcc	2b718 <flatcc_verify_table_field@@Base+0x9c>
   2b770:	ldrh	r4, [ip, r2]
   2b774:	add	r5, ip, r2
   2b778:	add	r2, r4, r2
   2b77c:	cmp	lr, r2
   2b780:	strh	r4, [sp, #22]
   2b784:	bcc	2b7d8 <flatcc_verify_table_field@@Base+0x15c>
   2b788:	tst	r4, #1
   2b78c:	bne	2b7d8 <flatcc_verify_table_field@@Base+0x15c>
   2b790:	cmp	r4, #3
   2b794:	movls	r0, #28
   2b798:	bls	2b718 <flatcc_verify_table_field@@Base+0x9c>
   2b79c:	ldrh	r2, [ip, r0]
   2b7a0:	sub	r1, lr, r1
   2b7a4:	cmp	r1, r2
   2b7a8:	strh	r2, [sp, #20]
   2b7ac:	movcc	r0, #20
   2b7b0:	bcc	2b718 <flatcc_verify_table_field@@Base+0x9c>
   2b7b4:	mov	r0, sp
   2b7b8:	str	r5, [sp, #12]
   2b7bc:	stm	sp, {ip, lr}
   2b7c0:	blx	r3
   2b7c4:	b	2b718 <flatcc_verify_table_field@@Base+0x9c>
   2b7c8:	mov	r0, #15
   2b7cc:	b	2b718 <flatcc_verify_table_field@@Base+0x9c>
   2b7d0:	mov	r0, #29
   2b7d4:	b	2b718 <flatcc_verify_table_field@@Base+0x9c>
   2b7d8:	mov	r0, #30
   2b7dc:	b	2b718 <flatcc_verify_table_field@@Base+0x9c>

0002b7e0 <flatcc_verify_table_vector_field@@Base>:
   2b7e0:	add	r1, r1, #2
   2b7e4:	ldrh	ip, [r0, #22]
   2b7e8:	lsl	r1, r1, #1
   2b7ec:	uxth	r1, r1
   2b7f0:	cmp	ip, r1
   2b7f4:	bls	2b820 <flatcc_verify_table_vector_field@@Base+0x40>
   2b7f8:	ldr	ip, [r0, #12]
   2b7fc:	ldrh	r1, [ip, r1]
   2b800:	cmp	r1, #0
   2b804:	beq	2b820 <flatcc_verify_table_vector_field@@Base+0x40>
   2b808:	ldrh	r2, [r0, #20]
   2b80c:	add	ip, r1, #4
   2b810:	cmp	ip, r2
   2b814:	bls	2b838 <flatcc_verify_table_vector_field@@Base+0x58>
   2b818:	mov	r0, #13
   2b81c:	bx	lr
   2b820:	cmp	r2, #0
   2b824:	beq	2b830 <flatcc_verify_table_vector_field@@Base+0x50>
   2b828:	mov	r0, #4
   2b82c:	bx	lr
   2b830:	mov	r0, #0
   2b834:	bx	lr
   2b838:	ldr	r2, [r0, #16]
   2b83c:	add	r1, r1, r2
   2b840:	tst	r1, #3
   2b844:	beq	2b850 <flatcc_verify_table_vector_field@@Base+0x70>
   2b848:	mov	r0, #12
   2b84c:	bx	lr
   2b850:	cmp	r1, #0
   2b854:	beq	2b830 <flatcc_verify_table_vector_field@@Base+0x50>
   2b858:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b85c:	sub	sp, sp, #32
   2b860:	ldr	r7, [r0, #8]
   2b864:	cmp	r7, #0
   2b868:	ble	2b8dc <flatcc_verify_table_vector_field@@Base+0xfc>
   2b86c:	ldr	r8, [r0]
   2b870:	ldr	ip, [r8, r1]
   2b874:	add	ip, r1, ip
   2b878:	cmp	r1, ip
   2b87c:	bcs	2b8d0 <flatcc_verify_table_vector_field@@Base+0xf0>
   2b880:	ldr	r9, [r0, #4]
   2b884:	add	r4, ip, #4
   2b888:	cmp	r9, r4
   2b88c:	bcc	2b8d0 <flatcc_verify_table_vector_field@@Base+0xf0>
   2b890:	tst	r4, #3
   2b894:	bne	2b8d0 <flatcc_verify_table_vector_field@@Base+0xf0>
   2b898:	ldr	r2, [r8, ip]
   2b89c:	cmn	r2, #-1073741823	; 0xc0000001
   2b8a0:	bls	2b8e8 <flatcc_verify_table_vector_field@@Base+0x108>
   2b8a4:	ldr	r3, [r8, ip]
   2b8a8:	cmn	r3, #-1073741823	; 0xc0000001
   2b8ac:	movhi	r0, #25
   2b8b0:	bhi	2b8d4 <flatcc_verify_table_vector_field@@Base+0xf4>
   2b8b4:	sub	r4, r9, r4
   2b8b8:	cmp	r4, r3, lsl #2
   2b8bc:	movcc	r0, #26
   2b8c0:	bcc	2b8d4 <flatcc_verify_table_vector_field@@Base+0xf4>
   2b8c4:	mov	r0, #0
   2b8c8:	add	sp, sp, #32
   2b8cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b8d0:	mov	r0, #16
   2b8d4:	add	sp, sp, #32
   2b8d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b8dc:	mov	r0, #3
   2b8e0:	add	sp, sp, #32
   2b8e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b8e8:	lsl	r6, r2, #2
   2b8ec:	sub	r1, r9, r4
   2b8f0:	cmp	r1, r6
   2b8f4:	bcc	2b8a4 <flatcc_verify_table_vector_field@@Base+0xc4>
   2b8f8:	cmp	r2, #0
   2b8fc:	beq	2b8c4 <flatcc_verify_table_vector_field@@Base+0xe4>
   2b900:	sub	r7, r7, #2
   2b904:	cmp	r7, #0
   2b908:	ldr	r2, [r8, r4]
   2b90c:	add	r1, r8, r4
   2b910:	str	r7, [sp, #16]
   2b914:	beq	2b8dc <flatcc_verify_table_vector_field@@Base+0xfc>
   2b918:	add	r2, r4, r2
   2b91c:	cmp	r2, r4
   2b920:	bls	2baac <flatcc_verify_table_vector_field@@Base+0x2cc>
   2b924:	add	r0, r2, #4
   2b928:	cmp	r9, r0
   2b92c:	bcc	2baac <flatcc_verify_table_vector_field@@Base+0x2cc>
   2b930:	tst	r2, #3
   2b934:	bne	2baac <flatcc_verify_table_vector_field@@Base+0x2cc>
   2b938:	add	ip, ip, #8
   2b93c:	add	r5, r8, ip
   2b940:	mov	sl, r1
   2b944:	add	r6, r4, r6
   2b948:	str	r2, [sp, #24]
   2b94c:	ldr	r1, [r8, r2]
   2b950:	subs	r1, r2, r1
   2b954:	bmi	2b960 <flatcc_verify_table_vector_field@@Base+0x180>
   2b958:	tst	r1, #1
   2b95c:	beq	2ba0c <flatcc_verify_table_vector_field@@Base+0x22c>
   2b960:	ldr	r2, [sl]
   2b964:	str	r7, [sp, #16]
   2b968:	add	r2, r4, r2
   2b96c:	cmp	r2, r4
   2b970:	bls	2bab8 <flatcc_verify_table_vector_field@@Base+0x2d8>
   2b974:	add	r1, r2, #4
   2b978:	cmp	r9, r1
   2b97c:	bcc	2bab8 <flatcc_verify_table_vector_field@@Base+0x2d8>
   2b980:	tst	r2, #3
   2b984:	bne	2bab8 <flatcc_verify_table_vector_field@@Base+0x2d8>
   2b988:	str	r2, [sp, #24]
   2b98c:	ldr	r1, [r8, r2]
   2b990:	subs	r1, r2, r1
   2b994:	bmi	2bac0 <flatcc_verify_table_vector_field@@Base+0x2e0>
   2b998:	tst	r1, #1
   2b99c:	bne	2bac0 <flatcc_verify_table_vector_field@@Base+0x2e0>
   2b9a0:	add	ip, r1, #2
   2b9a4:	cmp	r9, ip
   2b9a8:	movcc	r0, #27
   2b9ac:	bcc	2b8d4 <flatcc_verify_table_vector_field@@Base+0xf4>
   2b9b0:	ldrh	r0, [r8, r1]
   2b9b4:	add	lr, r8, r1
   2b9b8:	add	r1, r0, r1
   2b9bc:	cmp	r9, r1
   2b9c0:	strh	r0, [sp, #30]
   2b9c4:	bcc	2bac8 <flatcc_verify_table_vector_field@@Base+0x2e8>
   2b9c8:	tst	r0, #1
   2b9cc:	bne	2bac8 <flatcc_verify_table_vector_field@@Base+0x2e8>
   2b9d0:	cmp	r0, #3
   2b9d4:	movls	r0, #28
   2b9d8:	bls	2b8d4 <flatcc_verify_table_vector_field@@Base+0xf4>
   2b9dc:	ldrh	r1, [r8, ip]
   2b9e0:	sub	r2, r9, r2
   2b9e4:	cmp	r2, r1
   2b9e8:	strh	r1, [sp, #28]
   2b9ec:	movcc	r0, #20
   2b9f0:	bcc	2b8d4 <flatcc_verify_table_vector_field@@Base+0xf4>
   2b9f4:	add	r0, sp, #8
   2b9f8:	str	lr, [sp, #20]
   2b9fc:	str	r8, [sp, #8]
   2ba00:	str	r9, [sp, #12]
   2ba04:	blx	r3
   2ba08:	b	2b8d4 <flatcc_verify_table_vector_field@@Base+0xf4>
   2ba0c:	add	r0, r1, #2
   2ba10:	cmp	r9, r0
   2ba14:	bcc	2b960 <flatcc_verify_table_vector_field@@Base+0x180>
   2ba18:	ldrh	lr, [r8, r1]
   2ba1c:	add	ip, r8, r1
   2ba20:	add	r1, lr, r1
   2ba24:	cmp	r9, r1
   2ba28:	strh	lr, [sp, #30]
   2ba2c:	bcc	2b960 <flatcc_verify_table_vector_field@@Base+0x180>
   2ba30:	tst	lr, #1
   2ba34:	bne	2b960 <flatcc_verify_table_vector_field@@Base+0x180>
   2ba38:	cmp	lr, #3
   2ba3c:	bls	2b960 <flatcc_verify_table_vector_field@@Base+0x180>
   2ba40:	ldrh	r1, [r8, r0]
   2ba44:	sub	r2, r9, r2
   2ba48:	cmp	r2, r1
   2ba4c:	strh	r1, [sp, #28]
   2ba50:	bcc	2b960 <flatcc_verify_table_vector_field@@Base+0x180>
   2ba54:	add	r0, sp, #8
   2ba58:	stmib	sp, {r3, r8, r9}
   2ba5c:	str	ip, [sp, #20]
   2ba60:	blx	r3
   2ba64:	ldr	r3, [sp, #4]
   2ba68:	cmp	r0, #0
   2ba6c:	bne	2b960 <flatcc_verify_table_vector_field@@Base+0x180>
   2ba70:	add	r4, r4, #4
   2ba74:	cmp	r6, r4
   2ba78:	beq	2b8c4 <flatcc_verify_table_vector_field@@Base+0xe4>
   2ba7c:	mov	r1, r5
   2ba80:	ldr	r2, [r5], #4
   2ba84:	str	r7, [sp, #16]
   2ba88:	add	r2, r2, r4
   2ba8c:	cmp	r4, r2
   2ba90:	bcs	2baac <flatcc_verify_table_vector_field@@Base+0x2cc>
   2ba94:	add	r0, r2, #4
   2ba98:	cmp	r9, r0
   2ba9c:	bcc	2baac <flatcc_verify_table_vector_field@@Base+0x2cc>
   2baa0:	tst	r2, #3
   2baa4:	add	sl, sl, #4
   2baa8:	beq	2b948 <flatcc_verify_table_vector_field@@Base+0x168>
   2baac:	ldr	r2, [r1]
   2bab0:	str	r7, [sp, #16]
   2bab4:	b	2b968 <flatcc_verify_table_vector_field@@Base+0x188>
   2bab8:	mov	r0, #15
   2babc:	b	2b8d4 <flatcc_verify_table_vector_field@@Base+0xf4>
   2bac0:	mov	r0, #29
   2bac4:	b	2b8d4 <flatcc_verify_table_vector_field@@Base+0xf4>
   2bac8:	mov	r0, #30
   2bacc:	b	2b8d4 <flatcc_verify_table_vector_field@@Base+0xf4>

0002bad0 <flatcc_verify_union_table@@Base>:
   2bad0:	ldr	r3, [r0, #8]
   2bad4:	push	{r4, r5, lr}
   2bad8:	sub	r3, r3, #1
   2badc:	sub	sp, sp, #28
   2bae0:	cmp	r3, #0
   2bae4:	ldr	lr, [r0]
   2bae8:	str	r3, [sp, #8]
   2baec:	ldr	ip, [r0, #4]
   2baf0:	ldr	r2, [r0, #16]
   2baf4:	ldr	r3, [r0, #20]
   2baf8:	moveq	r0, #3
   2bafc:	bne	2bb08 <flatcc_verify_union_table@@Base+0x38>
   2bb00:	add	sp, sp, #28
   2bb04:	pop	{r4, r5, pc}
   2bb08:	add	r3, r2, r3
   2bb0c:	cmp	r2, r3
   2bb10:	bcs	2bbac <flatcc_verify_union_table@@Base+0xdc>
   2bb14:	add	r2, r3, #4
   2bb18:	cmp	ip, r2
   2bb1c:	bcc	2bbac <flatcc_verify_union_table@@Base+0xdc>
   2bb20:	tst	r3, #3
   2bb24:	bne	2bbac <flatcc_verify_union_table@@Base+0xdc>
   2bb28:	str	r3, [sp, #16]
   2bb2c:	ldr	r2, [lr, r3]
   2bb30:	subs	r2, r3, r2
   2bb34:	bmi	2bbb8 <flatcc_verify_union_table@@Base+0xe8>
   2bb38:	tst	r2, #1
   2bb3c:	bne	2bbb8 <flatcc_verify_union_table@@Base+0xe8>
   2bb40:	add	r0, r2, #2
   2bb44:	cmp	ip, r0
   2bb48:	movcc	r0, #27
   2bb4c:	bcc	2bb00 <flatcc_verify_union_table@@Base+0x30>
   2bb50:	ldrh	r4, [lr, r2]
   2bb54:	add	r5, lr, r2
   2bb58:	add	r2, r4, r2
   2bb5c:	cmp	ip, r2
   2bb60:	strh	r4, [sp, #22]
   2bb64:	bcc	2bbc0 <flatcc_verify_union_table@@Base+0xf0>
   2bb68:	tst	r4, #1
   2bb6c:	bne	2bbc0 <flatcc_verify_union_table@@Base+0xf0>
   2bb70:	cmp	r4, #3
   2bb74:	movls	r0, #28
   2bb78:	bls	2bb00 <flatcc_verify_union_table@@Base+0x30>
   2bb7c:	ldrh	r2, [lr, r0]
   2bb80:	sub	r3, ip, r3
   2bb84:	cmp	r3, r2
   2bb88:	strh	r2, [sp, #20]
   2bb8c:	movcc	r0, #20
   2bb90:	bcc	2bb00 <flatcc_verify_union_table@@Base+0x30>
   2bb94:	mov	r0, sp
   2bb98:	str	r5, [sp, #12]
   2bb9c:	str	lr, [sp]
   2bba0:	str	ip, [sp, #4]
   2bba4:	blx	r1
   2bba8:	b	2bb00 <flatcc_verify_union_table@@Base+0x30>
   2bbac:	mov	r0, #15
   2bbb0:	add	sp, sp, #28
   2bbb4:	pop	{r4, r5, pc}
   2bbb8:	mov	r0, #29
   2bbbc:	b	2bb00 <flatcc_verify_union_table@@Base+0x30>
   2bbc0:	mov	r0, #30
   2bbc4:	b	2bb00 <flatcc_verify_union_table@@Base+0x30>

0002bbc8 <flatcc_verify_union_struct@@Base>:
   2bbc8:	ldr	r3, [r0, #20]
   2bbcc:	ldr	ip, [r0, #4]
   2bbd0:	cmp	r3, #0
   2bbd4:	ldr	r0, [r0, #16]
   2bbd8:	bne	2bbe4 <flatcc_verify_union_struct@@Base+0x1c>
   2bbdc:	mov	r0, #18
   2bbe0:	bx	lr
   2bbe4:	add	r3, r0, r3
   2bbe8:	cmp	ip, r3
   2bbec:	bcc	2bbdc <flatcc_verify_union_struct@@Base+0x14>
   2bbf0:	adds	r1, r1, r3
   2bbf4:	bcc	2bc00 <flatcc_verify_union_struct@@Base+0x38>
   2bbf8:	mov	r0, #10
   2bbfc:	bx	lr
   2bc00:	cmp	ip, r1
   2bc04:	bcs	2bc10 <flatcc_verify_union_struct@@Base+0x48>
   2bc08:	mov	r0, #9
   2bc0c:	bx	lr
   2bc10:	sub	r2, r2, #1
   2bc14:	tst	r2, r3
   2bc18:	movne	r0, #11
   2bc1c:	moveq	r0, #0
   2bc20:	bx	lr

0002bc24 <flatcc_verify_union_string@@Base>:
   2bc24:	ldr	r2, [r0, #16]
   2bc28:	ldr	r3, [r0, #20]
   2bc2c:	add	r3, r2, r3
   2bc30:	cmp	r2, r3
   2bc34:	bcs	2bc70 <flatcc_verify_union_string@@Base+0x4c>
   2bc38:	ldr	r2, [r0, #4]
   2bc3c:	add	r1, r3, #4
   2bc40:	cmp	r2, r1
   2bc44:	bcc	2bc70 <flatcc_verify_union_string@@Base+0x4c>
   2bc48:	tst	r3, #3
   2bc4c:	bne	2bc70 <flatcc_verify_union_string@@Base+0x4c>
   2bc50:	ldr	r0, [r0]
   2bc54:	sub	r2, r2, r1
   2bc58:	ldr	r3, [r0, r3]
   2bc5c:	add	ip, r3, #1
   2bc60:	cmp	r2, ip
   2bc64:	bcs	2bc78 <flatcc_verify_union_string@@Base+0x54>
   2bc68:	mov	r0, #8
   2bc6c:	bx	lr
   2bc70:	mov	r0, #17
   2bc74:	bx	lr
   2bc78:	add	r1, r0, r1
   2bc7c:	ldrb	r0, [r1, r3]
   2bc80:	cmp	r0, #0
   2bc84:	movne	r0, #7
   2bc88:	moveq	r0, #0
   2bc8c:	bx	lr

0002bc90 <flatcc_verify_buffer_header@@Base>:
   2bc90:	ands	r3, r0, #3
   2bc94:	beq	2bca0 <flatcc_verify_buffer_header@@Base+0x10>
   2bc98:	mov	r0, #5
   2bc9c:	bx	lr
   2bca0:	cmn	r1, #9
   2bca4:	bls	2bcb0 <flatcc_verify_buffer_header@@Base+0x20>
   2bca8:	mov	r0, #6
   2bcac:	bx	lr
   2bcb0:	cmp	r1, #7
   2bcb4:	bls	2bd00 <flatcc_verify_buffer_header@@Base+0x70>
   2bcb8:	cmp	r2, #0
   2bcbc:	beq	2bd08 <flatcc_verify_buffer_header@@Base+0x78>
   2bcc0:	push	{r4, lr}
   2bcc4:	sub	sp, sp, #8
   2bcc8:	mov	r4, r0
   2bccc:	add	r0, sp, #8
   2bcd0:	mov	r1, r2
   2bcd4:	str	r3, [r0, #-4]!
   2bcd8:	mov	r2, #4
   2bcdc:	bl	145d0 <strncpy@plt>
   2bce0:	ldr	r2, [r4, #4]
   2bce4:	ldr	r3, [sp, #4]
   2bce8:	cmp	r3, #0
   2bcec:	cmpne	r2, r3
   2bcf0:	moveq	r0, #0
   2bcf4:	movne	r0, #2
   2bcf8:	add	sp, sp, #8
   2bcfc:	pop	{r4, pc}
   2bd00:	mov	r0, #1
   2bd04:	bx	lr
   2bd08:	mov	r0, #0
   2bd0c:	bx	lr

0002bd10 <flatcc_verify_typed_buffer_header@@Base>:
   2bd10:	tst	r0, #3
   2bd14:	beq	2bd20 <flatcc_verify_typed_buffer_header@@Base+0x10>
   2bd18:	mov	r0, #5
   2bd1c:	bx	lr
   2bd20:	cmn	r1, #9
   2bd24:	bls	2bd30 <flatcc_verify_typed_buffer_header@@Base+0x20>
   2bd28:	mov	r0, #6
   2bd2c:	bx	lr
   2bd30:	cmp	r1, #7
   2bd34:	bls	2bd5c <flatcc_verify_typed_buffer_header@@Base+0x4c>
   2bd38:	cmp	r2, #0
   2bd3c:	beq	2bd54 <flatcc_verify_typed_buffer_header@@Base+0x44>
   2bd40:	ldr	r0, [r0, #4]
   2bd44:	cmp	r2, r0
   2bd48:	movne	r0, #2
   2bd4c:	moveq	r0, #0
   2bd50:	bx	lr
   2bd54:	mov	r0, r2
   2bd58:	bx	lr
   2bd5c:	mov	r0, #1
   2bd60:	bx	lr

0002bd64 <flatcc_verify_struct_as_root@@Base>:
   2bd64:	cmn	r1, #9
   2bd68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bd6c:	mov	r6, r1
   2bd70:	movls	r5, #0
   2bd74:	movhi	r5, #1
   2bd78:	ands	r1, r0, #3
   2bd7c:	movne	r1, #1
   2bd80:	orr	r5, r5, r1
   2bd84:	sub	sp, sp, #16
   2bd88:	cmp	r6, #7
   2bd8c:	movhi	r7, r5
   2bd90:	orrls	r7, r5, #1
   2bd94:	cmp	r7, #0
   2bd98:	mov	r4, r0
   2bd9c:	mov	sl, r2
   2bda0:	and	r9, r0, #3
   2bda4:	ldrh	r8, [sp, #48]	; 0x30
   2bda8:	bne	2bde4 <flatcc_verify_struct_as_root@@Base+0x80>
   2bdac:	cmp	r2, #0
   2bdb0:	beq	2be40 <flatcc_verify_struct_as_root@@Base+0xdc>
   2bdb4:	add	r0, sp, #16
   2bdb8:	mov	r2, #4
   2bdbc:	mov	r1, sl
   2bdc0:	str	r7, [r0, #-4]!
   2bdc4:	str	r3, [sp, #4]
   2bdc8:	bl	145d0 <strncpy@plt>
   2bdcc:	ldr	r2, [sp, #12]
   2bdd0:	ldr	r1, [r4, #4]
   2bdd4:	ldr	r3, [sp, #4]
   2bdd8:	cmp	r2, #0
   2bddc:	cmpne	r1, r2
   2bde0:	beq	2be40 <flatcc_verify_struct_as_root@@Base+0xdc>
   2bde4:	cmp	r9, #0
   2bde8:	movne	r0, #5
   2bdec:	bne	2be60 <flatcc_verify_struct_as_root@@Base+0xfc>
   2bdf0:	cmp	r5, #0
   2bdf4:	movne	r0, #6
   2bdf8:	bne	2be60 <flatcc_verify_struct_as_root@@Base+0xfc>
   2bdfc:	cmp	r7, #0
   2be00:	movne	r0, #1
   2be04:	bne	2be60 <flatcc_verify_struct_as_root@@Base+0xfc>
   2be08:	cmp	sl, #0
   2be0c:	beq	2be90 <flatcc_verify_struct_as_root@@Base+0x12c>
   2be10:	add	r0, sp, #16
   2be14:	mov	r2, #4
   2be18:	mov	r1, sl
   2be1c:	str	r7, [r0, #-4]!
   2be20:	bl	145d0 <strncpy@plt>
   2be24:	ldr	r2, [r4, #4]
   2be28:	ldr	r3, [sp, #12]
   2be2c:	cmp	r3, #0
   2be30:	cmpne	r2, r3
   2be34:	movne	r0, #2
   2be38:	bne	2be60 <flatcc_verify_struct_as_root@@Base+0xfc>
   2be3c:	b	2be90 <flatcc_verify_struct_as_root@@Base+0x12c>
   2be40:	ldr	r1, [r4]
   2be44:	clz	r2, r1
   2be48:	lsr	r2, r2, #5
   2be4c:	cmp	r6, r1
   2be50:	orrcc	r2, r2, #1
   2be54:	cmp	r2, #0
   2be58:	movne	r0, #18
   2be5c:	beq	2be68 <flatcc_verify_struct_as_root@@Base+0x104>
   2be60:	add	sp, sp, #16
   2be64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2be68:	adds	r3, r3, r1
   2be6c:	movcs	r0, #10
   2be70:	bcs	2be60 <flatcc_verify_struct_as_root@@Base+0xfc>
   2be74:	cmp	r6, r3
   2be78:	movcc	r0, #9
   2be7c:	bcc	2be60 <flatcc_verify_struct_as_root@@Base+0xfc>
   2be80:	sub	r8, r8, #1
   2be84:	tst	r8, r1
   2be88:	movne	r0, #11
   2be8c:	bne	2be60 <flatcc_verify_struct_as_root@@Base+0xfc>
   2be90:	mov	r0, #0
   2be94:	b	2be60 <flatcc_verify_struct_as_root@@Base+0xfc>

0002be98 <flatcc_verify_struct_as_typed_root@@Base>:
   2be98:	push	{lr}		; (str lr, [sp, #-4]!)
   2be9c:	sub	lr, r1, #8
   2bea0:	cmn	lr, #17
   2bea4:	movls	lr, #0
   2bea8:	movhi	lr, #1
   2beac:	ands	ip, r0, #3
   2beb0:	movne	ip, #1
   2beb4:	orrs	ip, lr, ip
   2beb8:	ldrh	lr, [sp, #4]
   2bebc:	bne	2bf0c <flatcc_verify_struct_as_typed_root@@Base+0x74>
   2bec0:	cmp	r2, #0
   2bec4:	beq	2bee4 <flatcc_verify_struct_as_typed_root@@Base+0x4c>
   2bec8:	ldr	ip, [r0, #4]
   2becc:	cmp	r2, ip
   2bed0:	beq	2bee4 <flatcc_verify_struct_as_typed_root@@Base+0x4c>
   2bed4:	cmn	r1, #9
   2bed8:	bls	2bf30 <flatcc_verify_struct_as_typed_root@@Base+0x98>
   2bedc:	mov	r0, #6
   2bee0:	pop	{pc}		; (ldr pc, [sp], #4)
   2bee4:	ldr	r0, [r0]
   2bee8:	cmp	r1, r0
   2beec:	movcs	r2, #0
   2bef0:	movcc	r2, #1
   2bef4:	cmp	r0, #0
   2bef8:	orreq	r2, r2, #1
   2befc:	cmp	r2, #0
   2bf00:	beq	2bf20 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   2bf04:	mov	r0, #18
   2bf08:	pop	{pc}		; (ldr pc, [sp], #4)
   2bf0c:	and	ip, r0, #3
   2bf10:	cmp	ip, #0
   2bf14:	beq	2bed4 <flatcc_verify_struct_as_typed_root@@Base+0x3c>
   2bf18:	mov	r0, #5
   2bf1c:	pop	{pc}		; (ldr pc, [sp], #4)
   2bf20:	adds	r3, r3, r0
   2bf24:	bcc	2bf5c <flatcc_verify_struct_as_typed_root@@Base+0xc4>
   2bf28:	mov	r0, #10
   2bf2c:	pop	{pc}		; (ldr pc, [sp], #4)
   2bf30:	cmp	r1, #7
   2bf34:	bls	2bf54 <flatcc_verify_struct_as_typed_root@@Base+0xbc>
   2bf38:	cmp	r2, #0
   2bf3c:	beq	2bf6c <flatcc_verify_struct_as_typed_root@@Base+0xd4>
   2bf40:	ldr	r0, [r0, #4]
   2bf44:	cmp	r2, r0
   2bf48:	movne	r0, #2
   2bf4c:	moveq	r0, #0
   2bf50:	pop	{pc}		; (ldr pc, [sp], #4)
   2bf54:	mov	r0, #1
   2bf58:	pop	{pc}		; (ldr pc, [sp], #4)
   2bf5c:	cmp	r1, r3
   2bf60:	bcs	2bf74 <flatcc_verify_struct_as_typed_root@@Base+0xdc>
   2bf64:	mov	r0, #9
   2bf68:	pop	{pc}		; (ldr pc, [sp], #4)
   2bf6c:	mov	r0, r2
   2bf70:	pop	{pc}		; (ldr pc, [sp], #4)
   2bf74:	sub	lr, lr, #1
   2bf78:	tst	lr, r0
   2bf7c:	moveq	r0, #0
   2bf80:	movne	r0, #11
   2bf84:	pop	{pc}		; (ldr pc, [sp], #4)

0002bf88 <flatcc_verify_table_as_root@@Base>:
   2bf88:	push	{r4, r5, r6, lr}
   2bf8c:	mov	r5, r1
   2bf90:	sub	r1, r1, #8
   2bf94:	cmn	r1, #17
   2bf98:	movls	r1, #0
   2bf9c:	movhi	r1, #1
   2bfa0:	mov	r4, r0
   2bfa4:	ands	r0, r0, #3
   2bfa8:	movne	r0, #1
   2bfac:	orrs	r1, r1, r0
   2bfb0:	sub	sp, sp, #32
   2bfb4:	mov	r6, r2
   2bfb8:	bne	2c0f8 <flatcc_verify_table_as_root@@Base+0x170>
   2bfbc:	cmp	r2, #0
   2bfc0:	beq	2c04c <flatcc_verify_table_as_root@@Base+0xc4>
   2bfc4:	add	r0, sp, #32
   2bfc8:	mov	r2, #4
   2bfcc:	str	r1, [r0, #-24]!	; 0xffffffe8
   2bfd0:	mov	r1, r6
   2bfd4:	str	r3, [sp, #4]
   2bfd8:	bl	145d0 <strncpy@plt>
   2bfdc:	ldr	r2, [sp, #8]
   2bfe0:	ldr	r1, [r4, #4]
   2bfe4:	ldr	r3, [sp, #4]
   2bfe8:	cmp	r2, #0
   2bfec:	cmpne	r1, r2
   2bff0:	beq	2c04c <flatcc_verify_table_as_root@@Base+0xc4>
   2bff4:	cmn	r5, #9
   2bff8:	movhi	r0, #6
   2bffc:	bhi	2c108 <flatcc_verify_table_as_root@@Base+0x180>
   2c000:	cmp	r5, #7
   2c004:	movls	r0, #1
   2c008:	bls	2c108 <flatcc_verify_table_as_root@@Base+0x180>
   2c00c:	cmp	r6, #0
   2c010:	beq	2c044 <flatcc_verify_table_as_root@@Base+0xbc>
   2c014:	add	r0, sp, #32
   2c018:	mov	r3, #0
   2c01c:	str	r3, [r0, #-24]!	; 0xffffffe8
   2c020:	mov	r2, #4
   2c024:	mov	r1, r6
   2c028:	bl	145d0 <strncpy@plt>
   2c02c:	ldr	r2, [r4, #4]
   2c030:	ldr	r3, [sp, #8]
   2c034:	cmp	r3, #0
   2c038:	cmpne	r2, r3
   2c03c:	movne	r0, #2
   2c040:	bne	2c108 <flatcc_verify_table_as_root@@Base+0x180>
   2c044:	mov	r0, #0
   2c048:	b	2c108 <flatcc_verify_table_as_root@@Base+0x180>
   2c04c:	ldr	r2, [r4]
   2c050:	mov	r1, #99	; 0x63
   2c054:	cmp	r2, #0
   2c058:	str	r1, [sp, #16]
   2c05c:	beq	2c110 <flatcc_verify_table_as_root@@Base+0x188>
   2c060:	add	r1, r2, #4
   2c064:	cmp	r5, r1
   2c068:	bcc	2c110 <flatcc_verify_table_as_root@@Base+0x188>
   2c06c:	tst	r2, #3
   2c070:	bne	2c110 <flatcc_verify_table_as_root@@Base+0x188>
   2c074:	ldr	r1, [r4, r2]
   2c078:	str	r2, [sp, #24]
   2c07c:	subs	r1, r2, r1
   2c080:	bmi	2c11c <flatcc_verify_table_as_root@@Base+0x194>
   2c084:	tst	r1, #1
   2c088:	bne	2c11c <flatcc_verify_table_as_root@@Base+0x194>
   2c08c:	add	r0, r1, #2
   2c090:	cmp	r5, r0
   2c094:	movcc	r0, #27
   2c098:	bcc	2c108 <flatcc_verify_table_as_root@@Base+0x180>
   2c09c:	ldrh	ip, [r4, r1]
   2c0a0:	add	lr, r4, r1
   2c0a4:	add	r1, ip, r1
   2c0a8:	cmp	r5, r1
   2c0ac:	strh	ip, [sp, #30]
   2c0b0:	bcc	2c124 <flatcc_verify_table_as_root@@Base+0x19c>
   2c0b4:	tst	ip, #1
   2c0b8:	bne	2c124 <flatcc_verify_table_as_root@@Base+0x19c>
   2c0bc:	cmp	ip, #3
   2c0c0:	movls	r0, #28
   2c0c4:	bls	2c108 <flatcc_verify_table_as_root@@Base+0x180>
   2c0c8:	ldrh	r1, [r4, r0]
   2c0cc:	sub	r2, r5, r2
   2c0d0:	cmp	r2, r1
   2c0d4:	strh	r1, [sp, #28]
   2c0d8:	movcc	r0, #20
   2c0dc:	bcc	2c108 <flatcc_verify_table_as_root@@Base+0x180>
   2c0e0:	add	r0, sp, #8
   2c0e4:	str	lr, [sp, #20]
   2c0e8:	str	r4, [sp, #8]
   2c0ec:	str	r5, [sp, #12]
   2c0f0:	blx	r3
   2c0f4:	b	2c108 <flatcc_verify_table_as_root@@Base+0x180>
   2c0f8:	and	r2, r4, #3
   2c0fc:	cmp	r2, #0
   2c100:	movne	r0, #5
   2c104:	beq	2bff4 <flatcc_verify_table_as_root@@Base+0x6c>
   2c108:	add	sp, sp, #32
   2c10c:	pop	{r4, r5, r6, pc}
   2c110:	mov	r0, #15
   2c114:	add	sp, sp, #32
   2c118:	pop	{r4, r5, r6, pc}
   2c11c:	mov	r0, #29
   2c120:	b	2c108 <flatcc_verify_table_as_root@@Base+0x180>
   2c124:	mov	r0, #30
   2c128:	b	2c108 <flatcc_verify_table_as_root@@Base+0x180>

0002c12c <flatcc_verify_table_as_typed_root@@Base>:
   2c12c:	push	{r4, r5, lr}
   2c130:	sub	lr, r1, #8
   2c134:	cmn	lr, #17
   2c138:	movls	lr, #0
   2c13c:	movhi	lr, #1
   2c140:	ands	ip, r0, #3
   2c144:	movne	ip, #1
   2c148:	orrs	ip, lr, ip
   2c14c:	sub	sp, sp, #28
   2c150:	bne	2c1a0 <flatcc_verify_table_as_typed_root@@Base+0x74>
   2c154:	cmp	r2, #0
   2c158:	beq	2c1b8 <flatcc_verify_table_as_typed_root@@Base+0x8c>
   2c15c:	ldr	ip, [r0, #4]
   2c160:	cmp	r2, ip
   2c164:	beq	2c1b8 <flatcc_verify_table_as_typed_root@@Base+0x8c>
   2c168:	cmn	r1, #9
   2c16c:	movhi	r0, #6
   2c170:	bhi	2c1b0 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2c174:	cmp	r1, #7
   2c178:	movls	r0, #1
   2c17c:	bls	2c1b0 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2c180:	cmp	r2, #0
   2c184:	moveq	r0, r2
   2c188:	beq	2c1b0 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2c18c:	ldr	r0, [r0, #4]
   2c190:	cmp	r2, r0
   2c194:	movne	r0, #2
   2c198:	moveq	r0, #0
   2c19c:	b	2c1b0 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2c1a0:	and	ip, r0, #3
   2c1a4:	cmp	ip, #0
   2c1a8:	movne	r0, #5
   2c1ac:	beq	2c168 <flatcc_verify_table_as_typed_root@@Base+0x3c>
   2c1b0:	add	sp, sp, #28
   2c1b4:	pop	{r4, r5, pc}
   2c1b8:	ldr	r2, [r0]
   2c1bc:	mov	ip, #99	; 0x63
   2c1c0:	cmp	r2, #0
   2c1c4:	str	ip, [sp, #8]
   2c1c8:	beq	2c268 <flatcc_verify_table_as_typed_root@@Base+0x13c>
   2c1cc:	add	ip, r2, #4
   2c1d0:	cmp	r1, ip
   2c1d4:	bcc	2c268 <flatcc_verify_table_as_typed_root@@Base+0x13c>
   2c1d8:	tst	r2, #3
   2c1dc:	bne	2c268 <flatcc_verify_table_as_typed_root@@Base+0x13c>
   2c1e0:	ldr	ip, [r0, r2]
   2c1e4:	str	r2, [sp, #16]
   2c1e8:	subs	ip, r2, ip
   2c1ec:	bmi	2c274 <flatcc_verify_table_as_typed_root@@Base+0x148>
   2c1f0:	tst	ip, #1
   2c1f4:	bne	2c274 <flatcc_verify_table_as_typed_root@@Base+0x148>
   2c1f8:	add	lr, ip, #2
   2c1fc:	cmp	r1, lr
   2c200:	movcc	r0, #27
   2c204:	bcc	2c1b0 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2c208:	ldrh	r4, [r0, ip]
   2c20c:	add	r5, r0, ip
   2c210:	add	ip, r4, ip
   2c214:	cmp	r1, ip
   2c218:	strh	r4, [sp, #22]
   2c21c:	bcc	2c27c <flatcc_verify_table_as_typed_root@@Base+0x150>
   2c220:	tst	r4, #1
   2c224:	bne	2c27c <flatcc_verify_table_as_typed_root@@Base+0x150>
   2c228:	cmp	r4, #3
   2c22c:	movls	r0, #28
   2c230:	bls	2c1b0 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2c234:	ldrh	ip, [r0, lr]
   2c238:	sub	r2, r1, r2
   2c23c:	cmp	r2, ip
   2c240:	strh	ip, [sp, #20]
   2c244:	movcc	r0, #20
   2c248:	bcc	2c1b0 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2c24c:	mov	r2, r0
   2c250:	mov	r0, sp
   2c254:	str	r5, [sp, #12]
   2c258:	str	r2, [sp]
   2c25c:	str	r1, [sp, #4]
   2c260:	blx	r3
   2c264:	b	2c1b0 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2c268:	mov	r0, #15
   2c26c:	add	sp, sp, #28
   2c270:	pop	{r4, r5, pc}
   2c274:	mov	r0, #29
   2c278:	b	2c1b0 <flatcc_verify_table_as_typed_root@@Base+0x84>
   2c27c:	mov	r0, #30
   2c280:	b	2c1b0 <flatcc_verify_table_as_typed_root@@Base+0x84>

0002c284 <flatcc_verify_struct_as_nested_root@@Base>:
   2c284:	add	ip, r1, #2
   2c288:	push	{r4, r5, r6, r7, r8, lr}
   2c28c:	lsl	ip, ip, #1
   2c290:	ldrh	lr, [r0, #22]
   2c294:	sub	sp, sp, #16
   2c298:	uxth	ip, ip
   2c29c:	cmp	lr, ip
   2c2a0:	ldr	r5, [sp, #40]	; 0x28
   2c2a4:	ldrh	r4, [sp, #44]	; 0x2c
   2c2a8:	bls	2c2ec <flatcc_verify_struct_as_nested_root@@Base+0x68>
   2c2ac:	ldr	lr, [r0, #12]
   2c2b0:	ldrh	ip, [lr, ip]
   2c2b4:	cmp	ip, #0
   2c2b8:	beq	2c2ec <flatcc_verify_struct_as_nested_root@@Base+0x68>
   2c2bc:	ldrh	lr, [r0, #20]
   2c2c0:	add	r6, ip, #4
   2c2c4:	cmp	r6, lr
   2c2c8:	bls	2c300 <flatcc_verify_struct_as_nested_root@@Base+0x7c>
   2c2cc:	mvn	lr, #0
   2c2d0:	mov	ip, #1
   2c2d4:	mov	r3, r4
   2c2d8:	str	lr, [sp, #44]	; 0x2c
   2c2dc:	str	ip, [sp, #40]	; 0x28
   2c2e0:	add	sp, sp, #16
   2c2e4:	pop	{r4, r5, r6, r7, r8, lr}
   2c2e8:	b	2b3d4 <flatcc_verify_vector_field@@Base>
   2c2ec:	cmp	r2, #0
   2c2f0:	bne	2c2cc <flatcc_verify_struct_as_nested_root@@Base+0x48>
   2c2f4:	mov	r0, #0
   2c2f8:	add	sp, sp, #16
   2c2fc:	pop	{r4, r5, r6, r7, r8, pc}
   2c300:	ldr	lr, [r0, #16]
   2c304:	add	ip, ip, lr
   2c308:	tst	ip, #3
   2c30c:	bne	2c2cc <flatcc_verify_struct_as_nested_root@@Base+0x48>
   2c310:	cmp	ip, #0
   2c314:	beq	2c410 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   2c318:	ldr	r7, [r0]
   2c31c:	add	lr, r7, ip
   2c320:	ldr	r6, [r7, ip]
   2c324:	add	r6, ip, r6
   2c328:	cmp	r6, ip
   2c32c:	bls	2c2cc <flatcc_verify_struct_as_nested_root@@Base+0x48>
   2c330:	ldr	ip, [r0, #4]
   2c334:	add	r8, r6, #4
   2c338:	cmp	ip, r8
   2c33c:	bcc	2c2cc <flatcc_verify_struct_as_nested_root@@Base+0x48>
   2c340:	tst	r8, #3
   2c344:	bne	2c2cc <flatcc_verify_struct_as_nested_root@@Base+0x48>
   2c348:	ldr	r6, [r7, r6]
   2c34c:	sub	ip, ip, r8
   2c350:	mul	r6, r6, r4
   2c354:	cmp	ip, r6
   2c358:	bcc	2c2cc <flatcc_verify_struct_as_nested_root@@Base+0x48>
   2c35c:	ldr	r2, [lr]
   2c360:	add	r6, lr, r2
   2c364:	ldr	r7, [lr, r2]
   2c368:	and	r0, r6, #3
   2c36c:	sub	r2, r7, #8
   2c370:	cmn	r2, #17
   2c374:	movls	r2, #0
   2c378:	movhi	r2, #1
   2c37c:	ands	r1, r6, #3
   2c380:	movne	r1, #1
   2c384:	orrs	r1, r2, r1
   2c388:	bne	2c420 <flatcc_verify_struct_as_nested_root@@Base+0x19c>
   2c38c:	cmp	r3, #0
   2c390:	beq	2c3c4 <flatcc_verify_struct_as_nested_root@@Base+0x140>
   2c394:	add	r0, sp, #16
   2c398:	mov	r2, #4
   2c39c:	str	r1, [r0, #-4]!
   2c3a0:	mov	r1, r3
   2c3a4:	str	r3, [sp, #4]
   2c3a8:	bl	145d0 <strncpy@plt>
   2c3ac:	ldr	r2, [sp, #12]
   2c3b0:	ldr	r1, [r6, #8]
   2c3b4:	ldr	r3, [sp, #4]
   2c3b8:	cmp	r2, #0
   2c3bc:	cmpne	r1, r2
   2c3c0:	bne	2c42c <flatcc_verify_struct_as_nested_root@@Base+0x1a8>
   2c3c4:	ldr	r2, [r6, #4]
   2c3c8:	clz	r3, r2
   2c3cc:	lsr	r3, r3, #5
   2c3d0:	cmp	r7, r2
   2c3d4:	orrcc	r3, r3, #1
   2c3d8:	cmp	r3, #0
   2c3dc:	movne	r0, #18
   2c3e0:	bne	2c2f8 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2c3e4:	adds	r5, r5, r2
   2c3e8:	movcs	r0, #10
   2c3ec:	bcs	2c2f8 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2c3f0:	cmp	r7, r5
   2c3f4:	movcc	r0, #9
   2c3f8:	bcc	2c2f8 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2c3fc:	sub	r4, r4, #1
   2c400:	tst	r4, r2
   2c404:	movne	r0, #11
   2c408:	bne	2c2f8 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2c40c:	b	2c2f4 <flatcc_verify_struct_as_nested_root@@Base+0x70>
   2c410:	ldr	lr, [r0]
   2c414:	cmp	lr, #0
   2c418:	bne	2c35c <flatcc_verify_struct_as_nested_root@@Base+0xd8>
   2c41c:	b	2c2f4 <flatcc_verify_struct_as_nested_root@@Base+0x70>
   2c420:	cmp	r0, #0
   2c424:	movne	r0, #5
   2c428:	bne	2c2f8 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2c42c:	cmn	r7, #9
   2c430:	movhi	r0, #6
   2c434:	bhi	2c2f8 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2c438:	cmp	r7, #7
   2c43c:	movls	r0, #1
   2c440:	bls	2c2f8 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2c444:	cmp	r3, #0
   2c448:	beq	2c2f4 <flatcc_verify_struct_as_nested_root@@Base+0x70>
   2c44c:	add	r0, sp, #16
   2c450:	mov	r2, #0
   2c454:	mov	r1, r3
   2c458:	str	r2, [r0, #-4]!
   2c45c:	mov	r2, #4
   2c460:	bl	145d0 <strncpy@plt>
   2c464:	ldr	r2, [r6, #8]
   2c468:	ldr	r3, [sp, #12]
   2c46c:	cmp	r3, #0
   2c470:	cmpne	r2, r3
   2c474:	movne	r0, #2
   2c478:	bne	2c2f8 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   2c47c:	b	2c2f4 <flatcc_verify_struct_as_nested_root@@Base+0x70>

0002c480 <flatcc_verify_table_as_nested_root@@Base>:
   2c480:	push	{r4, r5, r6, r7, lr}
   2c484:	mov	r4, r0
   2c488:	add	r0, r1, #2
   2c48c:	ldrh	ip, [r4, #22]
   2c490:	lsl	r0, r0, #1
   2c494:	sub	sp, sp, #44	; 0x2c
   2c498:	uxth	r0, r0
   2c49c:	cmp	ip, r0
   2c4a0:	ldrh	r5, [sp, #64]	; 0x40
   2c4a4:	bls	2c4e8 <flatcc_verify_table_as_nested_root@@Base+0x68>
   2c4a8:	ldr	ip, [r4, #12]
   2c4ac:	ldrh	r0, [ip, r0]
   2c4b0:	cmp	r0, #0
   2c4b4:	beq	2c4e8 <flatcc_verify_table_as_nested_root@@Base+0x68>
   2c4b8:	ldrh	ip, [r4, #20]
   2c4bc:	add	lr, r0, #4
   2c4c0:	cmp	lr, ip
   2c4c4:	bls	2c4fc <flatcc_verify_table_as_nested_root@@Base+0x7c>
   2c4c8:	mvn	lr, #0
   2c4cc:	mov	ip, #1
   2c4d0:	mov	r3, r5
   2c4d4:	mov	r0, r4
   2c4d8:	stm	sp, {ip, lr}
   2c4dc:	bl	2b3d4 <flatcc_verify_vector_field@@Base>
   2c4e0:	add	sp, sp, #44	; 0x2c
   2c4e4:	pop	{r4, r5, r6, r7, pc}
   2c4e8:	cmp	r2, #0
   2c4ec:	bne	2c4c8 <flatcc_verify_table_as_nested_root@@Base+0x48>
   2c4f0:	mov	r0, #0
   2c4f4:	add	sp, sp, #44	; 0x2c
   2c4f8:	pop	{r4, r5, r6, r7, pc}
   2c4fc:	ldr	ip, [r4, #16]
   2c500:	add	r0, r0, ip
   2c504:	tst	r0, #3
   2c508:	bne	2c4c8 <flatcc_verify_table_as_nested_root@@Base+0x48>
   2c50c:	cmp	r0, #0
   2c510:	beq	2c690 <flatcc_verify_table_as_nested_root@@Base+0x210>
   2c514:	ldr	r6, [r4]
   2c518:	add	ip, r6, r0
   2c51c:	ldr	lr, [r6, r0]
   2c520:	add	lr, r0, lr
   2c524:	cmp	lr, r0
   2c528:	bls	2c4c8 <flatcc_verify_table_as_nested_root@@Base+0x48>
   2c52c:	ldr	r0, [r4, #4]
   2c530:	add	r7, lr, #4
   2c534:	cmp	r0, r7
   2c538:	bcc	2c4c8 <flatcc_verify_table_as_nested_root@@Base+0x48>
   2c53c:	tst	r7, #3
   2c540:	bne	2c4c8 <flatcc_verify_table_as_nested_root@@Base+0x48>
   2c544:	ldr	lr, [r6, lr]
   2c548:	sub	r0, r0, r7
   2c54c:	mul	lr, lr, r5
   2c550:	cmp	r0, lr
   2c554:	bcc	2c4c8 <flatcc_verify_table_as_nested_root@@Base+0x48>
   2c558:	ldr	r2, [ip]
   2c55c:	add	r6, ip, r2
   2c560:	ldr	r7, [ip, r2]
   2c564:	add	r5, r6, #4
   2c568:	sub	r2, r7, #8
   2c56c:	cmn	r2, #17
   2c570:	movls	r2, #0
   2c574:	movhi	r2, #1
   2c578:	ands	r1, r5, #3
   2c57c:	movne	r1, #1
   2c580:	orrs	r1, r2, r1
   2c584:	and	r2, r5, #3
   2c588:	bne	2c6a0 <flatcc_verify_table_as_nested_root@@Base+0x220>
   2c58c:	cmp	r3, #0
   2c590:	beq	2c5c4 <flatcc_verify_table_as_nested_root@@Base+0x144>
   2c594:	add	r0, sp, #40	; 0x28
   2c598:	mov	r2, #4
   2c59c:	str	r1, [r0, #-24]!	; 0xffffffe8
   2c5a0:	mov	r1, r3
   2c5a4:	str	r3, [sp, #12]
   2c5a8:	bl	145d0 <strncpy@plt>
   2c5ac:	ldr	r2, [sp, #16]
   2c5b0:	ldr	r1, [r6, #8]
   2c5b4:	ldr	r3, [sp, #12]
   2c5b8:	cmp	r2, #0
   2c5bc:	cmpne	r1, r2
   2c5c0:	bne	2c6ac <flatcc_verify_table_as_nested_root@@Base+0x22c>
   2c5c4:	ldr	r3, [r4, #8]
   2c5c8:	ldr	r2, [r6, #4]
   2c5cc:	sub	r3, r3, #1
   2c5d0:	cmp	r3, #0
   2c5d4:	str	r3, [sp, #24]
   2c5d8:	moveq	r0, #3
   2c5dc:	beq	2c4e0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2c5e0:	cmp	r2, #0
   2c5e4:	beq	2c684 <flatcc_verify_table_as_nested_root@@Base+0x204>
   2c5e8:	add	r3, r2, #4
   2c5ec:	cmp	r7, r3
   2c5f0:	bcc	2c684 <flatcc_verify_table_as_nested_root@@Base+0x204>
   2c5f4:	tst	r2, #3
   2c5f8:	bne	2c684 <flatcc_verify_table_as_nested_root@@Base+0x204>
   2c5fc:	str	r2, [sp, #32]
   2c600:	ldr	r3, [r5, r2]
   2c604:	subs	r3, r2, r3
   2c608:	bmi	2c700 <flatcc_verify_table_as_nested_root@@Base+0x280>
   2c60c:	tst	r3, #1
   2c610:	bne	2c700 <flatcc_verify_table_as_nested_root@@Base+0x280>
   2c614:	add	r1, r3, #2
   2c618:	cmp	r7, r1
   2c61c:	movcc	r0, #27
   2c620:	bcc	2c4e0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2c624:	ldrh	r0, [r5, r3]
   2c628:	add	ip, r5, r3
   2c62c:	add	r3, r0, r3
   2c630:	cmp	r7, r3
   2c634:	strh	r0, [sp, #38]	; 0x26
   2c638:	bcc	2c708 <flatcc_verify_table_as_nested_root@@Base+0x288>
   2c63c:	tst	r0, #1
   2c640:	bne	2c708 <flatcc_verify_table_as_nested_root@@Base+0x288>
   2c644:	cmp	r0, #3
   2c648:	movls	r0, #28
   2c64c:	bls	2c4e0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2c650:	ldrh	r3, [r5, r1]
   2c654:	sub	r2, r7, r2
   2c658:	cmp	r2, r3
   2c65c:	strh	r3, [sp, #36]	; 0x24
   2c660:	movcc	r0, #20
   2c664:	bcc	2c4e0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2c668:	add	r0, sp, #16
   2c66c:	ldr	r3, [sp, #68]	; 0x44
   2c670:	str	ip, [sp, #28]
   2c674:	str	r5, [sp, #16]
   2c678:	str	r7, [sp, #20]
   2c67c:	blx	r3
   2c680:	b	2c4e0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2c684:	mov	r0, #15
   2c688:	add	sp, sp, #44	; 0x2c
   2c68c:	pop	{r4, r5, r6, r7, pc}
   2c690:	ldr	ip, [r4]
   2c694:	cmp	ip, #0
   2c698:	bne	2c558 <flatcc_verify_table_as_nested_root@@Base+0xd8>
   2c69c:	b	2c4f0 <flatcc_verify_table_as_nested_root@@Base+0x70>
   2c6a0:	cmp	r2, #0
   2c6a4:	movne	r0, #5
   2c6a8:	bne	2c4e0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2c6ac:	cmn	r7, #9
   2c6b0:	movhi	r0, #6
   2c6b4:	bhi	2c4e0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2c6b8:	cmp	r7, #7
   2c6bc:	movls	r0, #1
   2c6c0:	bls	2c4e0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2c6c4:	cmp	r3, #0
   2c6c8:	beq	2c4f0 <flatcc_verify_table_as_nested_root@@Base+0x70>
   2c6cc:	add	r0, sp, #40	; 0x28
   2c6d0:	mov	r2, #0
   2c6d4:	mov	r1, r3
   2c6d8:	str	r2, [r0, #-24]!	; 0xffffffe8
   2c6dc:	mov	r2, #4
   2c6e0:	bl	145d0 <strncpy@plt>
   2c6e4:	ldr	r2, [r6, #8]
   2c6e8:	ldr	r3, [sp, #16]
   2c6ec:	cmp	r3, #0
   2c6f0:	cmpne	r2, r3
   2c6f4:	movne	r0, #2
   2c6f8:	bne	2c4e0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2c6fc:	b	2c4f0 <flatcc_verify_table_as_nested_root@@Base+0x70>
   2c700:	mov	r0, #29
   2c704:	b	2c4e0 <flatcc_verify_table_as_nested_root@@Base+0x60>
   2c708:	mov	r0, #30
   2c70c:	b	2c4e0 <flatcc_verify_table_as_nested_root@@Base+0x60>

0002c710 <flatcc_verify_union_field@@Base>:
   2c710:	sub	ip, r1, #1
   2c714:	push	{r4, r5, r6, r7, lr}
   2c718:	uxth	ip, ip
   2c71c:	add	ip, ip, #2
   2c720:	ldrh	lr, [r0, #22]
   2c724:	lsl	ip, ip, #1
   2c728:	sub	sp, sp, #28
   2c72c:	uxth	ip, ip
   2c730:	cmp	ip, lr
   2c734:	ldr	r4, [r0, #12]
   2c738:	bcs	2c764 <flatcc_verify_union_field@@Base+0x54>
   2c73c:	ldrh	ip, [r4, ip]
   2c740:	cmp	ip, #0
   2c744:	beq	2c764 <flatcc_verify_union_field@@Base+0x54>
   2c748:	ldrh	r5, [r0, #20]
   2c74c:	add	r6, ip, #1
   2c750:	cmp	r6, r5
   2c754:	bls	2c7a4 <flatcc_verify_union_field@@Base+0x94>
   2c758:	mov	r0, #13
   2c75c:	add	sp, sp, #28
   2c760:	pop	{r4, r5, r6, r7, pc}
   2c764:	add	r1, r1, #2
   2c768:	lsl	r1, r1, #1
   2c76c:	uxth	r1, r1
   2c770:	cmp	lr, r1
   2c774:	bhi	2c78c <flatcc_verify_union_field@@Base+0x7c>
   2c778:	cmp	r2, #0
   2c77c:	movne	r0, #21
   2c780:	moveq	r0, #0
   2c784:	add	sp, sp, #28
   2c788:	pop	{r4, r5, r6, r7, pc}
   2c78c:	ldrh	r3, [r4, r1]
   2c790:	cmp	r3, #0
   2c794:	movne	r0, #23
   2c798:	beq	2c778 <flatcc_verify_union_field@@Base+0x68>
   2c79c:	add	sp, sp, #28
   2c7a0:	pop	{r4, r5, r6, r7, pc}
   2c7a4:	add	r1, r1, #2
   2c7a8:	ldr	r6, [r0]
   2c7ac:	lsl	r1, r1, #1
   2c7b0:	uxth	r1, r1
   2c7b4:	cmp	lr, r1
   2c7b8:	bls	2c7f0 <flatcc_verify_union_field@@Base+0xe0>
   2c7bc:	ldr	r7, [r0, #16]
   2c7c0:	ldrh	r4, [r4, r1]
   2c7c4:	add	ip, r7, ip
   2c7c8:	ldrb	r1, [r6, ip]
   2c7cc:	adds	lr, r1, #0
   2c7d0:	movne	lr, #1
   2c7d4:	cmp	r4, #0
   2c7d8:	orreq	lr, lr, #1
   2c7dc:	cmp	lr, #0
   2c7e0:	bne	2c814 <flatcc_verify_union_field@@Base+0x104>
   2c7e4:	mov	r0, #24
   2c7e8:	add	sp, sp, #28
   2c7ec:	pop	{r4, r5, r6, r7, pc}
   2c7f0:	ldr	r3, [r0, #16]
   2c7f4:	add	ip, r6, ip
   2c7f8:	ldrb	r0, [ip, r3]
   2c7fc:	cmp	r0, #0
   2c800:	beq	2c75c <flatcc_verify_union_field@@Base+0x4c>
   2c804:	cmp	r2, #0
   2c808:	movne	r0, #4
   2c80c:	moveq	r0, #0
   2c810:	b	2c75c <flatcc_verify_union_field@@Base+0x4c>
   2c814:	cmp	r1, #0
   2c818:	beq	2c874 <flatcc_verify_union_field@@Base+0x164>
   2c81c:	cmp	r4, #0
   2c820:	beq	2c804 <flatcc_verify_union_field@@Base+0xf4>
   2c824:	add	r2, r4, #4
   2c828:	cmp	r5, r2
   2c82c:	bcc	2c758 <flatcc_verify_union_field@@Base+0x48>
   2c830:	add	r7, r7, r4
   2c834:	tst	r7, #3
   2c838:	movne	r0, #12
   2c83c:	bne	2c75c <flatcc_verify_union_field@@Base+0x4c>
   2c840:	cmp	r7, #0
   2c844:	beq	2c874 <flatcc_verify_union_field@@Base+0x164>
   2c848:	ldmib	r0, {r1, r2}
   2c84c:	str	r7, [sp, #16]
   2c850:	mov	r0, sp
   2c854:	stmib	sp, {r1, r2}
   2c858:	ldr	r2, [r6, r7]
   2c85c:	str	r6, [sp]
   2c860:	str	r2, [sp, #20]
   2c864:	ldrb	r2, [r6, ip]
   2c868:	strb	r2, [sp, #12]
   2c86c:	blx	r3
   2c870:	b	2c75c <flatcc_verify_union_field@@Base+0x4c>
   2c874:	mov	r0, #0
   2c878:	b	2c75c <flatcc_verify_union_field@@Base+0x4c>

0002c87c <flatcc_verify_union_vector_field@@Base>:
   2c87c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c880:	sub	r4, r1, #1
   2c884:	ldrh	lr, [r0, #22]
   2c888:	uxth	r4, r4
   2c88c:	add	ip, r4, #2
   2c890:	sub	sp, sp, #44	; 0x2c
   2c894:	lsl	ip, ip, #1
   2c898:	ldr	r5, [r0, #12]
   2c89c:	uxth	ip, ip
   2c8a0:	cmp	ip, lr
   2c8a4:	bcs	2c9d4 <flatcc_verify_union_vector_field@@Base+0x158>
   2c8a8:	ldrh	ip, [r5, ip]
   2c8ac:	cmp	ip, #0
   2c8b0:	beq	2c9d4 <flatcc_verify_union_vector_field@@Base+0x158>
   2c8b4:	ldrh	r7, [r0, #20]
   2c8b8:	add	r6, ip, #4
   2c8bc:	cmp	r6, r7
   2c8c0:	bhi	2c9fc <flatcc_verify_union_vector_field@@Base+0x180>
   2c8c4:	ldr	r8, [r0, #16]
   2c8c8:	add	ip, ip, r8
   2c8cc:	tst	ip, #3
   2c8d0:	bne	2c9fc <flatcc_verify_union_vector_field@@Base+0x180>
   2c8d4:	cmp	ip, #0
   2c8d8:	beq	2cb10 <flatcc_verify_union_vector_field@@Base+0x294>
   2c8dc:	ldr	r6, [r0]
   2c8e0:	ldr	r9, [r6, ip]
   2c8e4:	add	r9, ip, r9
   2c8e8:	cmp	r9, ip
   2c8ec:	bls	2c9fc <flatcc_verify_union_vector_field@@Base+0x180>
   2c8f0:	ldr	sl, [r0, #4]
   2c8f4:	add	fp, r9, #4
   2c8f8:	cmp	sl, fp
   2c8fc:	bcc	2c9fc <flatcc_verify_union_vector_field@@Base+0x180>
   2c900:	tst	fp, #3
   2c904:	bne	2c9fc <flatcc_verify_union_vector_field@@Base+0x180>
   2c908:	ldr	r9, [r6, r9]
   2c90c:	sub	sl, sl, fp
   2c910:	cmp	r9, sl
   2c914:	bhi	2c9fc <flatcc_verify_union_vector_field@@Base+0x180>
   2c918:	adds	ip, r6, ip
   2c91c:	beq	2c9c8 <flatcc_verify_union_vector_field@@Base+0x14c>
   2c920:	add	r1, r1, #2
   2c924:	lsl	r1, r1, #1
   2c928:	uxth	r1, r1
   2c92c:	cmp	lr, r1
   2c930:	bls	2ca2c <flatcc_verify_union_vector_field@@Base+0x1b0>
   2c934:	ldrh	r1, [r5, r1]
   2c938:	cmp	r1, #0
   2c93c:	beq	2ca2c <flatcc_verify_union_vector_field@@Base+0x1b0>
   2c940:	add	r2, r1, #4
   2c944:	cmp	r2, r7
   2c948:	movhi	r0, #13
   2c94c:	bhi	2ca10 <flatcc_verify_union_vector_field@@Base+0x194>
   2c950:	add	r2, r1, r8
   2c954:	tst	r2, #3
   2c958:	movne	r0, #12
   2c95c:	bne	2ca10 <flatcc_verify_union_vector_field@@Base+0x194>
   2c960:	cmp	r2, #0
   2c964:	beq	2c9c8 <flatcc_verify_union_vector_field@@Base+0x14c>
   2c968:	ldr	lr, [r0, #8]
   2c96c:	cmp	lr, #0
   2c970:	movle	r0, #3
   2c974:	ble	2ca10 <flatcc_verify_union_vector_field@@Base+0x194>
   2c978:	ldr	r1, [r6, r2]
   2c97c:	add	r1, r2, r1
   2c980:	cmp	r2, r1
   2c984:	bcs	2ca40 <flatcc_verify_union_vector_field@@Base+0x1c4>
   2c988:	ldr	r9, [r0, #4]
   2c98c:	add	r4, r1, #4
   2c990:	cmp	r9, r4
   2c994:	bcc	2ca40 <flatcc_verify_union_vector_field@@Base+0x1c4>
   2c998:	ands	r2, r4, #3
   2c99c:	beq	2ca48 <flatcc_verify_union_vector_field@@Base+0x1cc>
   2c9a0:	cmp	r2, #0
   2c9a4:	bne	2ca40 <flatcc_verify_union_vector_field@@Base+0x1c4>
   2c9a8:	ldr	r3, [r6, r1]
   2c9ac:	cmn	r3, #-1073741823	; 0xc0000001
   2c9b0:	movhi	r0, #25
   2c9b4:	bhi	2ca10 <flatcc_verify_union_vector_field@@Base+0x194>
   2c9b8:	sub	r4, r9, r4
   2c9bc:	cmp	r4, r3, lsl #2
   2c9c0:	movcc	r0, #26
   2c9c4:	bcc	2ca10 <flatcc_verify_union_vector_field@@Base+0x194>
   2c9c8:	mov	r0, #0
   2c9cc:	add	sp, sp, #44	; 0x2c
   2c9d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c9d4:	add	r3, r1, #2
   2c9d8:	lsl	r3, r3, #1
   2c9dc:	uxth	r3, r3
   2c9e0:	cmp	lr, r3
   2c9e4:	bls	2ca18 <flatcc_verify_union_vector_field@@Base+0x19c>
   2c9e8:	ldrh	r3, [r5, r3]
   2c9ec:	cmp	r3, #0
   2c9f0:	beq	2ca18 <flatcc_verify_union_vector_field@@Base+0x19c>
   2c9f4:	cmp	r2, #0
   2c9f8:	beq	2c9c8 <flatcc_verify_union_vector_field@@Base+0x14c>
   2c9fc:	mvn	ip, #0
   2ca00:	mov	r3, #1
   2ca04:	mov	r1, r4
   2ca08:	stm	sp, {r3, ip}
   2ca0c:	bl	2b3d4 <flatcc_verify_vector_field@@Base>
   2ca10:	add	sp, sp, #44	; 0x2c
   2ca14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ca18:	cmp	r2, #0
   2ca1c:	movne	r0, #22
   2ca20:	moveq	r0, #0
   2ca24:	add	sp, sp, #44	; 0x2c
   2ca28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ca2c:	cmp	r2, #0
   2ca30:	movne	r0, #4
   2ca34:	moveq	r0, #0
   2ca38:	add	sp, sp, #44	; 0x2c
   2ca3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ca40:	mov	r0, #16
   2ca44:	b	2ca10 <flatcc_verify_union_vector_field@@Base+0x194>
   2ca48:	ldr	r7, [r6, r1]
   2ca4c:	add	r2, r6, r1
   2ca50:	cmn	r7, #-1073741823	; 0xc0000001
   2ca54:	bhi	2c9a8 <flatcc_verify_union_vector_field@@Base+0x12c>
   2ca58:	lsl	r0, r7, #2
   2ca5c:	sub	r5, r9, r4
   2ca60:	cmp	r5, r0
   2ca64:	bcc	2c9a8 <flatcc_verify_union_vector_field@@Base+0x12c>
   2ca68:	ldr	r8, [ip]
   2ca6c:	add	r5, ip, r8
   2ca70:	ldr	ip, [ip, r8]
   2ca74:	cmp	ip, r7
   2ca78:	movne	r0, #34	; 0x22
   2ca7c:	bne	2ca10 <flatcc_verify_union_vector_field@@Base+0x194>
   2ca80:	sub	lr, lr, #1
   2ca84:	cmp	ip, #0
   2ca88:	str	lr, [sp, #24]
   2ca8c:	str	r6, [sp, #16]
   2ca90:	str	r9, [sp, #20]
   2ca94:	beq	2c9c8 <flatcc_verify_union_vector_field@@Base+0x14c>
   2ca98:	add	r1, r1, r0
   2ca9c:	add	r7, r6, r1
   2caa0:	add	r5, r5, #4
   2caa4:	mov	r6, r2
   2caa8:	b	2cac8 <flatcc_verify_union_vector_field@@Base+0x24c>
   2caac:	ldrb	r2, [r5]
   2cab0:	cmp	r2, #0
   2cab4:	bne	2cb18 <flatcc_verify_union_vector_field@@Base+0x29c>
   2cab8:	cmp	r7, r6
   2cabc:	add	r4, r4, #4
   2cac0:	add	r5, r5, #1
   2cac4:	beq	2c9c8 <flatcc_verify_union_vector_field@@Base+0x14c>
   2cac8:	ldr	r2, [r6, #4]!
   2cacc:	add	r0, sp, #16
   2cad0:	cmp	r2, #0
   2cad4:	beq	2caac <flatcc_verify_union_vector_field@@Base+0x230>
   2cad8:	ldrb	r1, [r5]
   2cadc:	cmp	r1, #0
   2cae0:	beq	2cb20 <flatcc_verify_union_vector_field@@Base+0x2a4>
   2cae4:	str	r3, [sp, #12]
   2cae8:	strb	r1, [sp, #28]
   2caec:	str	r4, [sp, #32]
   2caf0:	str	r2, [sp, #36]	; 0x24
   2caf4:	blx	r3
   2caf8:	ldr	r3, [sp, #12]
   2cafc:	cmp	r0, #0
   2cb00:	beq	2cab8 <flatcc_verify_union_vector_field@@Base+0x23c>
   2cb04:	add	r0, sp, #16
   2cb08:	blx	r3
   2cb0c:	b	2ca10 <flatcc_verify_union_vector_field@@Base+0x194>
   2cb10:	ldr	r6, [r0]
   2cb14:	b	2c918 <flatcc_verify_union_vector_field@@Base+0x9c>
   2cb18:	mov	r0, #32
   2cb1c:	b	2ca10 <flatcc_verify_union_vector_field@@Base+0x194>
   2cb20:	mov	r0, #33	; 0x21
   2cb24:	b	2ca10 <flatcc_verify_union_vector_field@@Base+0x194>
   2cb28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cb2c:	sub	sp, sp, #28
   2cb30:	mov	r6, r2
   2cb34:	ldr	r7, [sp, #64]	; 0x40
   2cb38:	cmp	r1, r2
   2cb3c:	mov	r2, #0
   2cb40:	mov	r8, r0
   2cb44:	mov	fp, r3
   2cb48:	strb	r2, [r7]
   2cb4c:	beq	2cb68 <flatcc_verify_union_vector_field@@Base+0x2ec>
   2cb50:	ldrb	r3, [r1]
   2cb54:	cmp	r3, #34	; 0x22
   2cb58:	beq	2cdb8 <flatcc_verify_union_vector_field@@Base+0x53c>
   2cb5c:	ldr	r3, [r0, #20]
   2cb60:	cmp	r3, #0
   2cb64:	beq	2ccc4 <flatcc_verify_union_vector_field@@Base+0x448>
   2cb68:	mov	r4, r6
   2cb6c:	mov	r1, #0
   2cb70:	cmp	r6, r4
   2cb74:	beq	2cba4 <flatcc_verify_union_vector_field@@Base+0x328>
   2cb78:	ldrb	r2, [r4]
   2cb7c:	cmp	r2, #32
   2cb80:	bne	2cbb0 <flatcc_verify_union_vector_field@@Base+0x334>
   2cb84:	add	r3, r4, #1
   2cb88:	b	2cb98 <flatcc_verify_union_vector_field@@Base+0x31c>
   2cb8c:	ldrb	r2, [r3], #1
   2cb90:	cmp	r2, #32
   2cb94:	bne	2cbb0 <flatcc_verify_union_vector_field@@Base+0x334>
   2cb98:	cmp	r3, r6
   2cb9c:	mov	r4, r3
   2cba0:	bne	2cb8c <flatcc_verify_union_vector_field@@Base+0x310>
   2cba4:	mov	r0, r6
   2cba8:	add	sp, sp, #28
   2cbac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cbb0:	cmp	r2, #32
   2cbb4:	bhi	2cc70 <flatcc_verify_union_vector_field@@Base+0x3f4>
   2cbb8:	sub	r2, r2, #9
   2cbbc:	cmp	r2, #23
   2cbc0:	ldrls	pc, [pc, r2, lsl #2]
   2cbc4:	b	2cce4 <flatcc_verify_union_vector_field@@Base+0x468>
   2cbc8:			; <UNDEFINED> instruction: 0x0002ccbc
   2cbcc:	andeq	ip, r2, r8, asr #24
   2cbd0:	andeq	ip, r2, r4, ror #25
   2cbd4:	andeq	ip, r2, r4, ror #25
   2cbd8:	andeq	ip, r2, r8, lsr #24
   2cbdc:	andeq	ip, r2, r4, ror #25
   2cbe0:	andeq	ip, r2, r4, ror #25
   2cbe4:	andeq	ip, r2, r4, ror #25
   2cbe8:	andeq	ip, r2, r4, ror #25
   2cbec:	andeq	ip, r2, r4, ror #25
   2cbf0:	andeq	ip, r2, r4, ror #25
   2cbf4:	andeq	ip, r2, r4, ror #25
   2cbf8:	andeq	ip, r2, r4, ror #25
   2cbfc:	andeq	ip, r2, r4, ror #25
   2cc00:	andeq	ip, r2, r4, ror #25
   2cc04:	andeq	ip, r2, r4, ror #25
   2cc08:	andeq	ip, r2, r4, ror #25
   2cc0c:	andeq	ip, r2, r4, ror #25
   2cc10:	andeq	ip, r2, r4, ror #25
   2cc14:	andeq	ip, r2, r4, ror #25
   2cc18:	andeq	ip, r2, r4, ror #25
   2cc1c:	andeq	ip, r2, r4, ror #25
   2cc20:	andeq	ip, r2, r4, ror #25
   2cc24:	andeq	ip, r2, r0, ror fp
   2cc28:	sub	r3, r6, r4
   2cc2c:	cmp	r3, #1
   2cc30:	movle	r3, r1
   2cc34:	ldrbgt	r3, [r4, #1]
   2cc38:	subgt	r3, r3, #10
   2cc3c:	clzgt	r3, r3
   2cc40:	lsrgt	r3, r3, #5
   2cc44:	add	r4, r4, r3
   2cc48:	ldr	r3, [r8, #12]
   2cc4c:	add	r4, r4, #1
   2cc50:	add	r3, r3, #1
   2cc54:	str	r4, [r8, #4]
   2cc58:	str	r3, [r8, #12]
   2cc5c:	cmp	r6, r4
   2cc60:	beq	2cba4 <flatcc_verify_union_vector_field@@Base+0x328>
   2cc64:	ldrb	r2, [r4]
   2cc68:	cmp	r2, #32
   2cc6c:	bls	2cbb8 <flatcc_verify_union_vector_field@@Base+0x33c>
   2cc70:	add	sl, sp, #12
   2cc74:	add	r9, sp, #16
   2cc78:	mov	r5, fp
   2cc7c:	b	2cc94 <flatcc_verify_union_vector_field@@Base+0x418>
   2cc80:	cmp	r4, r0
   2cc84:	bne	2cd18 <flatcc_verify_union_vector_field@@Base+0x49c>
   2cc88:	ldr	r3, [r5, #4]!
   2cc8c:	cmp	r3, #0
   2cc90:	beq	2cd58 <flatcc_verify_union_vector_field@@Base+0x4dc>
   2cc94:	stm	sp, {r9, sl}
   2cc98:	add	r3, sp, #8
   2cc9c:	mov	r2, r6
   2cca0:	mov	r1, r4
   2cca4:	mov	r0, r8
   2cca8:	ldr	ip, [r5]
   2ccac:	blx	ip
   2ccb0:	cmp	r6, r0
   2ccb4:	bne	2cc80 <flatcc_verify_union_vector_field@@Base+0x404>
   2ccb8:	b	2cba4 <flatcc_verify_union_vector_field@@Base+0x328>
   2ccbc:	add	r4, r4, #1
   2ccc0:	b	2cc5c <flatcc_verify_union_vector_field@@Base+0x3e0>
   2ccc4:	ldr	r3, [r0, #4]
   2ccc8:	mov	r2, #5
   2cccc:	sub	r3, r1, r3
   2ccd0:	add	r3, r3, #1
   2ccd4:	str	r1, [r0, #32]
   2ccd8:	str	r3, [r0, #16]
   2ccdc:	str	r2, [r0, #20]
   2cce0:	b	2cb68 <flatcc_verify_union_vector_field@@Base+0x2ec>
   2cce4:	ldr	r3, [r8, #20]
   2cce8:	cmp	r3, #0
   2ccec:	bne	2cba4 <flatcc_verify_union_vector_field@@Base+0x328>
   2ccf0:	ldr	r3, [r8, #4]
   2ccf4:	mov	r2, #5
   2ccf8:	sub	r3, r4, r3
   2ccfc:	add	r3, r3, #1
   2cd00:	mov	r0, r6
   2cd04:	str	r4, [r8, #32]
   2cd08:	str	r3, [r8, #16]
   2cd0c:	str	r2, [r8, #20]
   2cd10:	add	sp, sp, #28
   2cd14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cd18:	ldr	r3, [sp, #8]
   2cd1c:	cmp	r3, #0
   2cd20:	beq	2cd70 <flatcc_verify_union_vector_field@@Base+0x4f4>
   2cd24:	ldr	r3, [r8, #20]
   2cd28:	cmp	r3, #0
   2cd2c:	bne	2cba4 <flatcc_verify_union_vector_field@@Base+0x328>
   2cd30:	ldr	r3, [r8, #4]
   2cd34:	mov	r2, #8
   2cd38:	sub	r3, r0, r3
   2cd3c:	add	r3, r3, #1
   2cd40:	str	r0, [r8, #32]
   2cd44:	str	r3, [r8, #16]
   2cd48:	mov	r0, r6
   2cd4c:	str	r2, [r8, #20]
   2cd50:	add	sp, sp, #28
   2cd54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cd58:	ldr	r3, [r8, #20]
   2cd5c:	cmp	r3, #0
   2cd60:	bne	2cba4 <flatcc_verify_union_vector_field@@Base+0x328>
   2cd64:	ldr	r3, [r8, #4]
   2cd68:	mov	r2, #23
   2cd6c:	b	2ccf8 <flatcc_verify_union_vector_field@@Base+0x47c>
   2cd70:	ldrd	r4, [sp, #16]
   2cd74:	cmp	r5, #0
   2cd78:	cmpeq	r4, #255	; 0xff
   2cd7c:	bls	2cd98 <flatcc_verify_union_vector_field@@Base+0x51c>
   2cd80:	ldr	r3, [r8, #20]
   2cd84:	cmp	r3, #0
   2cd88:	bne	2cba4 <flatcc_verify_union_vector_field@@Base+0x328>
   2cd8c:	ldr	r3, [r8, #4]
   2cd90:	mov	r2, #7
   2cd94:	b	2cd38 <flatcc_verify_union_vector_field@@Base+0x4bc>
   2cd98:	ldrb	r3, [r7]
   2cd9c:	ldr	r1, [sp, #12]
   2cda0:	add	r3, r3, r4
   2cda4:	cmp	r1, #0
   2cda8:	strb	r3, [r7]
   2cdac:	beq	2cdf4 <flatcc_verify_union_vector_field@@Base+0x578>
   2cdb0:	mov	r4, r0
   2cdb4:	b	2cc78 <flatcc_verify_union_vector_field@@Base+0x3fc>
   2cdb8:	add	r4, r1, #1
   2cdbc:	sub	r3, r6, r4
   2cdc0:	cmp	r3, #1
   2cdc4:	ble	2cb6c <flatcc_verify_union_vector_field@@Base+0x2f0>
   2cdc8:	ldrb	r3, [r1, #1]
   2cdcc:	cmp	r3, #32
   2cdd0:	bhi	2cde8 <flatcc_verify_union_vector_field@@Base+0x56c>
   2cdd4:	bne	2cb6c <flatcc_verify_union_vector_field@@Base+0x2f0>
   2cdd8:	ldrb	r3, [r1, #2]
   2cddc:	cmp	r3, #32
   2cde0:	addhi	r4, r1, #2
   2cde4:	bls	2cb6c <flatcc_verify_union_vector_field@@Base+0x2f0>
   2cde8:	cmp	r6, r4
   2cdec:	bne	2cc70 <flatcc_verify_union_vector_field@@Base+0x3f4>
   2cdf0:	b	2cba4 <flatcc_verify_union_vector_field@@Base+0x328>
   2cdf4:	mov	r6, r0
   2cdf8:	b	2cba4 <flatcc_verify_union_vector_field@@Base+0x328>
   2cdfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ce00:	sub	sp, sp, #28
   2ce04:	mov	r9, r3
   2ce08:	ldrh	r3, [sp, #68]	; 0x44
   2ce0c:	mov	ip, #0
   2ce10:	mov	r6, r0
   2ce14:	ldr	r0, [r0]
   2ce18:	mov	r4, r1
   2ce1c:	mov	r5, r2
   2ce20:	str	ip, [sp, #20]
   2ce24:	str	r3, [sp, #12]
   2ce28:	bl	27960 <flatcc_builder_start_offset_vector@@Base>
   2ce2c:	cmp	r0, #0
   2ce30:	beq	2ce74 <flatcc_verify_union_vector_field@@Base+0x5f8>
   2ce34:	ldr	r3, [r6, #20]
   2ce38:	cmp	r3, #0
   2ce3c:	beq	2ce4c <flatcc_verify_union_vector_field@@Base+0x5d0>
   2ce40:	mov	r0, r5
   2ce44:	add	sp, sp, #28
   2ce48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ce4c:	ldr	r3, [r6, #4]
   2ce50:	mov	r2, #33	; 0x21
   2ce54:	sub	r3, r4, r3
   2ce58:	add	r3, r3, #1
   2ce5c:	mov	r0, r5
   2ce60:	str	r4, [r6, #32]
   2ce64:	str	r3, [r6, #16]
   2ce68:	str	r2, [r6, #20]
   2ce6c:	add	sp, sp, #28
   2ce70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ce74:	cmp	r4, r5
   2ce78:	beq	2ce88 <flatcc_verify_union_vector_field@@Base+0x60c>
   2ce7c:	ldrb	r3, [r4]
   2ce80:	cmp	r3, #91	; 0x5b
   2ce84:	beq	2cf10 <flatcc_verify_union_vector_field@@Base+0x694>
   2ce88:	ldr	r7, [r6, #20]
   2ce8c:	cmp	r7, #0
   2ce90:	beq	2cef0 <flatcc_verify_union_vector_field@@Base+0x674>
   2ce94:	mov	r7, #0
   2ce98:	ldr	r3, [sp, #64]	; 0x40
   2ce9c:	cmp	r3, r7
   2cea0:	moveq	r4, r5
   2cea4:	bne	2ce40 <flatcc_verify_union_vector_field@@Base+0x5c4>
   2cea8:	mov	r1, r9
   2ceac:	ldr	r0, [r6]
   2ceb0:	bl	25d84 <flatcc_builder_get_user_frame_ptr@@Base>
   2ceb4:	mov	r1, r0
   2ceb8:	ldr	r0, [r6]
   2cebc:	bl	28fec <flatcc_builder_end_offset_vector_for_unions@@Base>
   2cec0:	cmp	r0, #0
   2cec4:	str	r0, [sp, #20]
   2cec8:	beq	2ce34 <flatcc_verify_union_vector_field@@Base+0x5b8>
   2cecc:	ldr	r1, [sp, #12]
   2ced0:	ldr	r0, [r6]
   2ced4:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   2ced8:	cmp	r0, #0
   2cedc:	beq	2ce34 <flatcc_verify_union_vector_field@@Base+0x5b8>
   2cee0:	ldr	r3, [sp, #20]
   2cee4:	mov	r5, r4
   2cee8:	str	r3, [r0]
   2ceec:	b	2ce40 <flatcc_verify_union_vector_field@@Base+0x5c4>
   2cef0:	ldr	r3, [r6, #4]
   2cef4:	mov	r2, #22
   2cef8:	sub	r3, r4, r3
   2cefc:	add	r3, r3, #1
   2cf00:	str	r4, [r6, #32]
   2cf04:	str	r3, [r6, #16]
   2cf08:	str	r2, [r6, #20]
   2cf0c:	b	2ce98 <flatcc_verify_union_vector_field@@Base+0x61c>
   2cf10:	add	r8, r4, #1
   2cf14:	sub	r3, r5, r8
   2cf18:	cmp	r3, #1
   2cf1c:	ble	2cf30 <flatcc_verify_union_vector_field@@Base+0x6b4>
   2cf20:	ldrb	r1, [r4, #1]
   2cf24:	cmp	r1, #32
   2cf28:	bhi	2d790 <flatcc_verify_union_vector_field@@Base+0xf14>
   2cf2c:	beq	2d780 <flatcc_verify_union_vector_field@@Base+0xf04>
   2cf30:	mov	r0, #0
   2cf34:	cmp	r5, r8
   2cf38:	beq	2d7e4 <flatcc_verify_union_vector_field@@Base+0xf68>
   2cf3c:	ldrb	r1, [r8]
   2cf40:	cmp	r1, #32
   2cf44:	bne	2d630 <flatcc_verify_union_vector_field@@Base+0xdb4>
   2cf48:	add	r3, r8, #1
   2cf4c:	b	2cf5c <flatcc_verify_union_vector_field@@Base+0x6e0>
   2cf50:	ldrb	r1, [r3], #1
   2cf54:	cmp	r1, #32
   2cf58:	bne	2d630 <flatcc_verify_union_vector_field@@Base+0xdb4>
   2cf5c:	cmp	r3, r5
   2cf60:	mov	r8, r3
   2cf64:	bne	2cf50 <flatcc_verify_union_vector_field@@Base+0x6d4>
   2cf68:	ldr	r3, [sp, #64]	; 0x40
   2cf6c:	cmp	r3, #0
   2cf70:	beq	2d384 <flatcc_verify_union_vector_field@@Base+0xb08>
   2cf74:	mov	r7, #0
   2cf78:	add	sl, sp, #20
   2cf7c:	mov	fp, #1
   2cf80:	mov	r1, r9
   2cf84:	ldr	r0, [r6]
   2cf88:	bl	25d84 <flatcc_builder_get_user_frame_ptr@@Base>
   2cf8c:	mov	r1, r8
   2cf90:	mov	r2, r5
   2cf94:	ldr	ip, [sp, #72]	; 0x48
   2cf98:	ldrb	r3, [r0, r7]
   2cf9c:	str	sl, [sp]
   2cfa0:	mov	r0, r6
   2cfa4:	blx	ip
   2cfa8:	cmp	r5, r0
   2cfac:	mov	r4, r0
   2cfb0:	beq	2ce40 <flatcc_verify_union_vector_field@@Base+0x5c4>
   2cfb4:	mov	r1, fp
   2cfb8:	ldr	r0, [r6]
   2cfbc:	bl	26fc4 <flatcc_builder_extend_offset_vector@@Base>
   2cfc0:	cmp	r0, #0
   2cfc4:	beq	2ce34 <flatcc_verify_union_vector_field@@Base+0x5b8>
   2cfc8:	sub	r2, r5, r4
   2cfcc:	ldr	r3, [sp, #20]
   2cfd0:	cmp	r2, #1
   2cfd4:	str	r3, [r0]
   2cfd8:	ldrb	r2, [r4]
   2cfdc:	ble	2d154 <flatcc_verify_union_vector_field@@Base+0x8d8>
   2cfe0:	cmp	r2, #32
   2cfe4:	bhi	2d0ac <flatcc_verify_union_vector_field@@Base+0x830>
   2cfe8:	beq	2d184 <flatcc_verify_union_vector_field@@Base+0x908>
   2cfec:	cmp	r2, #32
   2cff0:	bhi	2d0ac <flatcc_verify_union_vector_field@@Base+0x830>
   2cff4:	sub	r2, r2, #9
   2cff8:	cmp	r2, #23
   2cffc:	ldrls	pc, [pc, r2, lsl #2]
   2d000:	b	2d140 <flatcc_verify_union_vector_field@@Base+0x8c4>
   2d004:	ldrdeq	sp, [r2], -r0
   2d008:	andeq	sp, r2, r4, lsl #1
   2d00c:	andeq	sp, r2, r0, asr #2
   2d010:	andeq	sp, r2, r0, asr #2
   2d014:	andeq	sp, r2, r4, rrx
   2d018:	andeq	sp, r2, r0, asr #2
   2d01c:	andeq	sp, r2, r0, asr #2
   2d020:	andeq	sp, r2, r0, asr #2
   2d024:	andeq	sp, r2, r0, asr #2
   2d028:	andeq	sp, r2, r0, asr #2
   2d02c:	andeq	sp, r2, r0, asr #2
   2d030:	andeq	sp, r2, r0, asr #2
   2d034:	andeq	sp, r2, r0, asr #2
   2d038:	andeq	sp, r2, r0, asr #2
   2d03c:	andeq	sp, r2, r0, asr #2
   2d040:	andeq	sp, r2, r0, asr #2
   2d044:	andeq	sp, r2, r0, asr #2
   2d048:	andeq	sp, r2, r0, asr #2
   2d04c:	andeq	sp, r2, r0, asr #2
   2d050:	andeq	sp, r2, r0, asr #2
   2d054:	andeq	sp, r2, r0, asr #2
   2d058:	andeq	sp, r2, r0, asr #2
   2d05c:	andeq	sp, r2, r0, asr #2
   2d060:	ldrdeq	sp, [r2], -r8
   2d064:	sub	r3, r5, r4
   2d068:	cmp	r3, #1
   2d06c:	movle	r3, #0
   2d070:	ldrbgt	r3, [r4, #1]
   2d074:	subgt	r3, r3, #10
   2d078:	clzgt	r3, r3
   2d07c:	lsrgt	r3, r3, #5
   2d080:	add	r4, r4, r3
   2d084:	ldr	r3, [r6, #12]
   2d088:	add	r4, r4, #1
   2d08c:	add	r3, r3, #1
   2d090:	str	r4, [r6, #4]
   2d094:	str	r3, [r6, #12]
   2d098:	cmp	r5, r4
   2d09c:	beq	2d14c <flatcc_verify_union_vector_field@@Base+0x8d0>
   2d0a0:	ldrb	r2, [r4]
   2d0a4:	cmp	r2, #32
   2d0a8:	bls	2cff4 <flatcc_verify_union_vector_field@@Base+0x778>
   2d0ac:	cmp	r2, #44	; 0x2c
   2d0b0:	beq	2d1a4 <flatcc_verify_union_vector_field@@Base+0x928>
   2d0b4:	cmp	r2, #93	; 0x5d
   2d0b8:	beq	2d24c <flatcc_verify_union_vector_field@@Base+0x9d0>
   2d0bc:	ldr	r3, [r6, #20]
   2d0c0:	cmp	r3, #0
   2d0c4:	beq	2d160 <flatcc_verify_union_vector_field@@Base+0x8e4>
   2d0c8:	add	r7, r7, #1
   2d0cc:	b	2ce98 <flatcc_verify_union_vector_field@@Base+0x61c>
   2d0d0:	add	r4, r4, #1
   2d0d4:	b	2d098 <flatcc_verify_union_vector_field@@Base+0x81c>
   2d0d8:	cmp	r5, r4
   2d0dc:	beq	2d14c <flatcc_verify_union_vector_field@@Base+0x8d0>
   2d0e0:	add	r3, r4, #1
   2d0e4:	b	2d0f4 <flatcc_verify_union_vector_field@@Base+0x878>
   2d0e8:	ldrb	r2, [r3], #1
   2d0ec:	cmp	r2, #32
   2d0f0:	bne	2cfec <flatcc_verify_union_vector_field@@Base+0x770>
   2d0f4:	cmp	r5, r3
   2d0f8:	mov	r4, r3
   2d0fc:	bne	2d0e8 <flatcc_verify_union_vector_field@@Base+0x86c>
   2d100:	add	r7, r7, #1
   2d104:	mov	r1, r4
   2d108:	ldr	r3, [sp, #64]	; 0x40
   2d10c:	cmp	r3, r7
   2d110:	beq	2d7dc <flatcc_verify_union_vector_field@@Base+0xf60>
   2d114:	ldr	r3, [r6, #20]
   2d118:	cmp	r3, #0
   2d11c:	bne	2ce40 <flatcc_verify_union_vector_field@@Base+0x5c4>
   2d120:	ldr	r3, [r6, #4]
   2d124:	mov	r2, #30
   2d128:	sub	r3, r1, r3
   2d12c:	add	r3, r3, #1
   2d130:	str	r1, [r6, #32]
   2d134:	str	r3, [r6, #16]
   2d138:	str	r2, [r6, #20]
   2d13c:	b	2ce40 <flatcc_verify_union_vector_field@@Base+0x5c4>
   2d140:	ldr	r3, [r6, #20]
   2d144:	cmp	r3, #0
   2d148:	beq	2d228 <flatcc_verify_union_vector_field@@Base+0x9ac>
   2d14c:	mov	r4, r5
   2d150:	b	2d100 <flatcc_verify_union_vector_field@@Base+0x884>
   2d154:	cmp	r2, #32
   2d158:	beq	2d0e0 <flatcc_verify_union_vector_field@@Base+0x864>
   2d15c:	b	2cfec <flatcc_verify_union_vector_field@@Base+0x770>
   2d160:	ldr	r3, [r6, #4]
   2d164:	str	r4, [r6, #32]
   2d168:	sub	r4, r4, r3
   2d16c:	add	r4, r4, #1
   2d170:	mov	r3, #9
   2d174:	add	r7, r7, #1
   2d178:	str	r4, [r6, #16]
   2d17c:	str	r3, [r6, #20]
   2d180:	b	2ce98 <flatcc_verify_union_vector_field@@Base+0x61c>
   2d184:	ldrb	r2, [r4, #1]
   2d188:	cmp	r2, #32
   2d18c:	bls	2d0e0 <flatcc_verify_union_vector_field@@Base+0x864>
   2d190:	add	r4, r4, #1
   2d194:	cmp	r5, r4
   2d198:	beq	2d14c <flatcc_verify_union_vector_field@@Base+0x8d0>
   2d19c:	cmp	r2, #44	; 0x2c
   2d1a0:	bne	2d0b4 <flatcc_verify_union_vector_field@@Base+0x838>
   2d1a4:	add	r8, r4, #1
   2d1a8:	sub	r3, r5, r8
   2d1ac:	cmp	r3, #1
   2d1b0:	ble	2d1c4 <flatcc_verify_union_vector_field@@Base+0x948>
   2d1b4:	ldrb	r1, [r4, #1]
   2d1b8:	cmp	r1, #32
   2d1bc:	bhi	2d3f4 <flatcc_verify_union_vector_field@@Base+0xb78>
   2d1c0:	beq	2d3e4 <flatcc_verify_union_vector_field@@Base+0xb68>
   2d1c4:	cmp	r5, r8
   2d1c8:	beq	2d3fc <flatcc_verify_union_vector_field@@Base+0xb80>
   2d1cc:	ldrb	r1, [r8]
   2d1d0:	cmp	r1, #32
   2d1d4:	bne	2d2ac <flatcc_verify_union_vector_field@@Base+0xa30>
   2d1d8:	add	r3, r8, #1
   2d1dc:	b	2d1ec <flatcc_verify_union_vector_field@@Base+0x970>
   2d1e0:	ldrb	r1, [r3], #1
   2d1e4:	cmp	r1, #32
   2d1e8:	bne	2d2ac <flatcc_verify_union_vector_field@@Base+0xa30>
   2d1ec:	cmp	r3, r5
   2d1f0:	mov	r8, r3
   2d1f4:	bne	2d1e0 <flatcc_verify_union_vector_field@@Base+0x964>
   2d1f8:	ldr	r3, [r6, #20]
   2d1fc:	cmp	r3, #0
   2d200:	bne	2d0c8 <flatcc_verify_union_vector_field@@Base+0x84c>
   2d204:	ldr	r3, [r6, #4]
   2d208:	mov	r2, #9
   2d20c:	sub	r3, r8, r3
   2d210:	add	r3, r3, #1
   2d214:	str	r8, [r6, #32]
   2d218:	add	r7, r7, #1
   2d21c:	str	r3, [r6, #16]
   2d220:	str	r2, [r6, #20]
   2d224:	b	2ce98 <flatcc_verify_union_vector_field@@Base+0x61c>
   2d228:	ldr	r3, [r6, #4]
   2d22c:	mov	r2, #5
   2d230:	sub	r3, r4, r3
   2d234:	add	r3, r3, #1
   2d238:	str	r4, [r6, #32]
   2d23c:	str	r3, [r6, #16]
   2d240:	str	r2, [r6, #20]
   2d244:	mov	r4, r5
   2d248:	b	2d100 <flatcc_verify_union_vector_field@@Base+0x884>
   2d24c:	add	r1, r4, #1
   2d250:	sub	r3, r5, r1
   2d254:	cmp	r3, #1
   2d258:	ble	2d26c <flatcc_verify_union_vector_field@@Base+0x9f0>
   2d25c:	ldrb	r3, [r4, #1]
   2d260:	cmp	r3, #32
   2d264:	bhi	2d2a4 <flatcc_verify_union_vector_field@@Base+0xa28>
   2d268:	beq	2d500 <flatcc_verify_union_vector_field@@Base+0xc84>
   2d26c:	mov	r0, #0
   2d270:	cmp	r5, r1
   2d274:	beq	2d79c <flatcc_verify_union_vector_field@@Base+0xf20>
   2d278:	ldrb	r2, [r1]
   2d27c:	cmp	r2, #32
   2d280:	bne	2d404 <flatcc_verify_union_vector_field@@Base+0xb88>
   2d284:	add	r3, r1, #1
   2d288:	b	2d298 <flatcc_verify_union_vector_field@@Base+0xa1c>
   2d28c:	ldrb	r2, [r3], #1
   2d290:	cmp	r2, #32
   2d294:	bne	2d404 <flatcc_verify_union_vector_field@@Base+0xb88>
   2d298:	cmp	r3, r5
   2d29c:	mov	r1, r3
   2d2a0:	bne	2d28c <flatcc_verify_union_vector_field@@Base+0xa10>
   2d2a4:	add	r7, r7, #1
   2d2a8:	b	2d108 <flatcc_verify_union_vector_field@@Base+0x88c>
   2d2ac:	cmp	r1, #32
   2d2b0:	bhi	2d36c <flatcc_verify_union_vector_field@@Base+0xaf0>
   2d2b4:	sub	r1, r1, #9
   2d2b8:	cmp	r1, #23
   2d2bc:	ldrls	pc, [pc, r1, lsl #2]
   2d2c0:	b	2d3b8 <flatcc_verify_union_vector_field@@Base+0xb3c>
   2d2c4:			; <UNDEFINED> instruction: 0x0002d3b0
   2d2c8:	andeq	sp, r2, r4, asr #6
   2d2cc:			; <UNDEFINED> instruction: 0x0002d3b8
   2d2d0:			; <UNDEFINED> instruction: 0x0002d3b8
   2d2d4:	andeq	sp, r2, r4, lsr #6
   2d2d8:			; <UNDEFINED> instruction: 0x0002d3b8
   2d2dc:			; <UNDEFINED> instruction: 0x0002d3b8
   2d2e0:			; <UNDEFINED> instruction: 0x0002d3b8
   2d2e4:			; <UNDEFINED> instruction: 0x0002d3b8
   2d2e8:			; <UNDEFINED> instruction: 0x0002d3b8
   2d2ec:			; <UNDEFINED> instruction: 0x0002d3b8
   2d2f0:			; <UNDEFINED> instruction: 0x0002d3b8
   2d2f4:			; <UNDEFINED> instruction: 0x0002d3b8
   2d2f8:			; <UNDEFINED> instruction: 0x0002d3b8
   2d2fc:			; <UNDEFINED> instruction: 0x0002d3b8
   2d300:			; <UNDEFINED> instruction: 0x0002d3b8
   2d304:			; <UNDEFINED> instruction: 0x0002d3b8
   2d308:			; <UNDEFINED> instruction: 0x0002d3b8
   2d30c:			; <UNDEFINED> instruction: 0x0002d3b8
   2d310:			; <UNDEFINED> instruction: 0x0002d3b8
   2d314:			; <UNDEFINED> instruction: 0x0002d3b8
   2d318:			; <UNDEFINED> instruction: 0x0002d3b8
   2d31c:			; <UNDEFINED> instruction: 0x0002d3b8
   2d320:	andeq	sp, r2, r4, asr #3
   2d324:	sub	r3, r5, r8
   2d328:	cmp	r3, #1
   2d32c:	movle	r3, #0
   2d330:	ldrbgt	r3, [r8, #1]
   2d334:	subgt	r3, r3, #10
   2d338:	clzgt	r3, r3
   2d33c:	lsrgt	r3, r3, #5
   2d340:	add	r8, r8, r3
   2d344:	ldr	r3, [r6, #12]
   2d348:	add	r8, r8, #1
   2d34c:	add	r3, r3, #1
   2d350:	str	r8, [r6, #4]
   2d354:	str	r3, [r6, #12]
   2d358:	cmp	r5, r8
   2d35c:	beq	2d3fc <flatcc_verify_union_vector_field@@Base+0xb80>
   2d360:	ldrb	r1, [r8]
   2d364:	cmp	r1, #32
   2d368:	bls	2d2b4 <flatcc_verify_union_vector_field@@Base+0xa38>
   2d36c:	cmp	r1, #93	; 0x5d
   2d370:	beq	2d514 <flatcc_verify_union_vector_field@@Base+0xc98>
   2d374:	ldr	r3, [sp, #64]	; 0x40
   2d378:	add	r7, r7, #1
   2d37c:	cmp	r3, r7
   2d380:	bne	2cf80 <flatcc_verify_union_vector_field@@Base+0x704>
   2d384:	ldr	r3, [r6, #20]
   2d388:	cmp	r3, #0
   2d38c:	bne	2ce40 <flatcc_verify_union_vector_field@@Base+0x5c4>
   2d390:	ldr	r3, [r6, #4]
   2d394:	mov	r1, #30
   2d398:	sub	r3, r8, r3
   2d39c:	add	r3, r3, #1
   2d3a0:	str	r8, [r6, #32]
   2d3a4:	str	r3, [r6, #16]
   2d3a8:	str	r1, [r6, #20]
   2d3ac:	b	2ce40 <flatcc_verify_union_vector_field@@Base+0x5c4>
   2d3b0:	add	r8, r8, #1
   2d3b4:	b	2d358 <flatcc_verify_union_vector_field@@Base+0xadc>
   2d3b8:	ldr	r3, [r6, #20]
   2d3bc:	cmp	r3, #0
   2d3c0:	bne	2d0c8 <flatcc_verify_union_vector_field@@Base+0x84c>
   2d3c4:	ldr	r3, [r6, #4]
   2d3c8:	mov	r2, #5
   2d3cc:	sub	r3, r8, r3
   2d3d0:	add	r3, r3, #1
   2d3d4:	str	r8, [r6, #32]
   2d3d8:	str	r3, [r6, #16]
   2d3dc:	str	r2, [r6, #20]
   2d3e0:	b	2d0c8 <flatcc_verify_union_vector_field@@Base+0x84c>
   2d3e4:	ldrb	r1, [r4, #2]
   2d3e8:	cmp	r1, #32
   2d3ec:	addhi	r8, r4, #2
   2d3f0:	bls	2d1c4 <flatcc_verify_union_vector_field@@Base+0x948>
   2d3f4:	cmp	r5, r8
   2d3f8:	bne	2d36c <flatcc_verify_union_vector_field@@Base+0xaf0>
   2d3fc:	mov	r8, r5
   2d400:	b	2d1f8 <flatcc_verify_union_vector_field@@Base+0x97c>
   2d404:	cmp	r2, #32
   2d408:	bhi	2d2a4 <flatcc_verify_union_vector_field@@Base+0xa28>
   2d40c:	sub	r2, r2, #9
   2d410:	cmp	r2, #23
   2d414:	ldrls	pc, [pc, r2, lsl #2]
   2d418:	b	2d4d0 <flatcc_verify_union_vector_field@@Base+0xc54>
   2d41c:	andeq	sp, r2, r8, asr #9
   2d420:	muleq	r2, ip, r4
   2d424:	ldrdeq	sp, [r2], -r0
   2d428:	ldrdeq	sp, [r2], -r0
   2d42c:	andeq	sp, r2, ip, ror r4
   2d430:	ldrdeq	sp, [r2], -r0
   2d434:	ldrdeq	sp, [r2], -r0
   2d438:	ldrdeq	sp, [r2], -r0
   2d43c:	ldrdeq	sp, [r2], -r0
   2d440:	ldrdeq	sp, [r2], -r0
   2d444:	ldrdeq	sp, [r2], -r0
   2d448:	ldrdeq	sp, [r2], -r0
   2d44c:	ldrdeq	sp, [r2], -r0
   2d450:	ldrdeq	sp, [r2], -r0
   2d454:	ldrdeq	sp, [r2], -r0
   2d458:	ldrdeq	sp, [r2], -r0
   2d45c:	ldrdeq	sp, [r2], -r0
   2d460:	ldrdeq	sp, [r2], -r0
   2d464:	ldrdeq	sp, [r2], -r0
   2d468:	ldrdeq	sp, [r2], -r0
   2d46c:	ldrdeq	sp, [r2], -r0
   2d470:	ldrdeq	sp, [r2], -r0
   2d474:	ldrdeq	sp, [r2], -r0
   2d478:	andeq	sp, r2, r0, ror r2
   2d47c:	sub	r3, r5, r1
   2d480:	cmp	r3, #1
   2d484:	movle	r3, r0
   2d488:	ldrbgt	r3, [r1, #1]
   2d48c:	subgt	r3, r3, #10
   2d490:	clzgt	r3, r3
   2d494:	lsrgt	r3, r3, #5
   2d498:	add	r1, r1, r3
   2d49c:	ldr	r3, [r6, #12]
   2d4a0:	add	r1, r1, #1
   2d4a4:	add	r3, r3, #1
   2d4a8:	str	r1, [r6, #4]
   2d4ac:	str	r3, [r6, #12]
   2d4b0:	cmp	r5, r1
   2d4b4:	beq	2d79c <flatcc_verify_union_vector_field@@Base+0xf20>
   2d4b8:	ldrb	r2, [r1]
   2d4bc:	cmp	r2, #32
   2d4c0:	bls	2d40c <flatcc_verify_union_vector_field@@Base+0xb90>
   2d4c4:	b	2d2a4 <flatcc_verify_union_vector_field@@Base+0xa28>
   2d4c8:	add	r1, r1, #1
   2d4cc:	b	2d4b0 <flatcc_verify_union_vector_field@@Base+0xc34>
   2d4d0:	ldr	r3, [r6, #20]
   2d4d4:	cmp	r3, #0
   2d4d8:	bne	2d0c8 <flatcc_verify_union_vector_field@@Base+0x84c>
   2d4dc:	ldr	r3, [r6, #4]
   2d4e0:	mov	r2, #5
   2d4e4:	sub	r3, r1, r3
   2d4e8:	add	r3, r3, #1
   2d4ec:	str	r1, [r6, #32]
   2d4f0:	add	r7, r7, #1
   2d4f4:	str	r3, [r6, #16]
   2d4f8:	str	r2, [r6, #20]
   2d4fc:	b	2ce98 <flatcc_verify_union_vector_field@@Base+0x61c>
   2d500:	ldrb	r3, [r4, #2]
   2d504:	cmp	r3, #32
   2d508:	bls	2d26c <flatcc_verify_union_vector_field@@Base+0x9f0>
   2d50c:	add	r1, r4, #2
   2d510:	b	2d2a4 <flatcc_verify_union_vector_field@@Base+0xa28>
   2d514:	add	r1, r8, #1
   2d518:	sub	r3, r5, r1
   2d51c:	cmp	r3, #1
   2d520:	ble	2d534 <flatcc_verify_union_vector_field@@Base+0xcb8>
   2d524:	ldrb	r3, [r8, #1]
   2d528:	cmp	r3, #32
   2d52c:	bhi	2d2a4 <flatcc_verify_union_vector_field@@Base+0xa28>
   2d530:	beq	2d7a4 <flatcc_verify_union_vector_field@@Base+0xf28>
   2d534:	mov	r0, #0
   2d538:	cmp	r5, r1
   2d53c:	beq	2d79c <flatcc_verify_union_vector_field@@Base+0xf20>
   2d540:	ldrb	r2, [r1]
   2d544:	cmp	r2, #32
   2d548:	bne	2d5b0 <flatcc_verify_union_vector_field@@Base+0xd34>
   2d54c:	add	r3, r1, #1
   2d550:	b	2d560 <flatcc_verify_union_vector_field@@Base+0xce4>
   2d554:	ldrb	r2, [r3], #1
   2d558:	cmp	r2, #32
   2d55c:	bne	2d5b0 <flatcc_verify_union_vector_field@@Base+0xd34>
   2d560:	cmp	r5, r3
   2d564:	mov	r1, r3
   2d568:	bne	2d554 <flatcc_verify_union_vector_field@@Base+0xcd8>
   2d56c:	b	2d2a4 <flatcc_verify_union_vector_field@@Base+0xa28>
   2d570:	sub	r3, r5, r1
   2d574:	cmp	r3, #1
   2d578:	movle	r3, r0
   2d57c:	ldrbgt	r3, [r1, #1]
   2d580:	subgt	r3, r3, #10
   2d584:	clzgt	r3, r3
   2d588:	lsrgt	r3, r3, #5
   2d58c:	add	r1, r1, r3
   2d590:	ldr	r3, [r6, #12]
   2d594:	add	r1, r1, #1
   2d598:	add	r3, r3, #1
   2d59c:	str	r1, [r6, #4]
   2d5a0:	str	r3, [r6, #12]
   2d5a4:	cmp	r5, r1
   2d5a8:	beq	2d79c <flatcc_verify_union_vector_field@@Base+0xf20>
   2d5ac:	ldrb	r2, [r1]
   2d5b0:	cmp	r2, #32
   2d5b4:	bhi	2d2a4 <flatcc_verify_union_vector_field@@Base+0xa28>
   2d5b8:	sub	r2, r2, #9
   2d5bc:	cmp	r2, #23
   2d5c0:	ldrls	pc, [pc, r2, lsl #2]
   2d5c4:	b	2d4d0 <flatcc_verify_union_vector_field@@Base+0xc54>
   2d5c8:	andeq	sp, r2, r8, lsr #12
   2d5cc:	muleq	r2, r0, r5
   2d5d0:	ldrdeq	sp, [r2], -r0
   2d5d4:	ldrdeq	sp, [r2], -r0
   2d5d8:	andeq	sp, r2, r0, ror r5
   2d5dc:	ldrdeq	sp, [r2], -r0
   2d5e0:	ldrdeq	sp, [r2], -r0
   2d5e4:	ldrdeq	sp, [r2], -r0
   2d5e8:	ldrdeq	sp, [r2], -r0
   2d5ec:	ldrdeq	sp, [r2], -r0
   2d5f0:	ldrdeq	sp, [r2], -r0
   2d5f4:	ldrdeq	sp, [r2], -r0
   2d5f8:	ldrdeq	sp, [r2], -r0
   2d5fc:	ldrdeq	sp, [r2], -r0
   2d600:	ldrdeq	sp, [r2], -r0
   2d604:	ldrdeq	sp, [r2], -r0
   2d608:	ldrdeq	sp, [r2], -r0
   2d60c:	ldrdeq	sp, [r2], -r0
   2d610:	ldrdeq	sp, [r2], -r0
   2d614:	ldrdeq	sp, [r2], -r0
   2d618:	ldrdeq	sp, [r2], -r0
   2d61c:	ldrdeq	sp, [r2], -r0
   2d620:	ldrdeq	sp, [r2], -r0
   2d624:	andeq	sp, r2, r8, lsr r5
   2d628:	add	r1, r1, #1
   2d62c:	b	2d5a4 <flatcc_verify_union_vector_field@@Base+0xd28>
   2d630:	cmp	r1, #32
   2d634:	bhi	2d6f0 <flatcc_verify_union_vector_field@@Base+0xe74>
   2d638:	sub	r1, r1, #9
   2d63c:	cmp	r1, #23
   2d640:	ldrls	pc, [pc, r1, lsl #2]
   2d644:	b	2d760 <flatcc_verify_union_vector_field@@Base+0xee4>
   2d648:	andeq	sp, r2, r8, asr r7
   2d64c:	andeq	sp, r2, r8, asr #13
   2d650:	andeq	sp, r2, r0, ror #14
   2d654:	andeq	sp, r2, r0, ror #14
   2d658:	andeq	sp, r2, r8, lsr #13
   2d65c:	andeq	sp, r2, r0, ror #14
   2d660:	andeq	sp, r2, r0, ror #14
   2d664:	andeq	sp, r2, r0, ror #14
   2d668:	andeq	sp, r2, r0, ror #14
   2d66c:	andeq	sp, r2, r0, ror #14
   2d670:	andeq	sp, r2, r0, ror #14
   2d674:	andeq	sp, r2, r0, ror #14
   2d678:	andeq	sp, r2, r0, ror #14
   2d67c:	andeq	sp, r2, r0, ror #14
   2d680:	andeq	sp, r2, r0, ror #14
   2d684:	andeq	sp, r2, r0, ror #14
   2d688:	andeq	sp, r2, r0, ror #14
   2d68c:	andeq	sp, r2, r0, ror #14
   2d690:	andeq	sp, r2, r0, ror #14
   2d694:	andeq	sp, r2, r0, ror #14
   2d698:	andeq	sp, r2, r0, ror #14
   2d69c:	andeq	sp, r2, r0, ror #14
   2d6a0:	andeq	sp, r2, r0, ror #14
   2d6a4:	andeq	ip, r2, r4, lsr pc
   2d6a8:	sub	r3, r5, r8
   2d6ac:	cmp	r3, #1
   2d6b0:	movle	r3, r0
   2d6b4:	ldrbgt	r3, [r8, #1]
   2d6b8:	subgt	r3, r3, #10
   2d6bc:	clzgt	r3, r3
   2d6c0:	lsrgt	r3, r3, #5
   2d6c4:	add	r8, r8, r3
   2d6c8:	ldr	r3, [r6, #12]
   2d6cc:	add	r8, r8, #1
   2d6d0:	add	r3, r3, #1
   2d6d4:	str	r8, [r6, #4]
   2d6d8:	str	r3, [r6, #12]
   2d6dc:	cmp	r5, r8
   2d6e0:	beq	2d7e4 <flatcc_verify_union_vector_field@@Base+0xf68>
   2d6e4:	ldrb	r1, [r8]
   2d6e8:	cmp	r1, #32
   2d6ec:	bls	2d638 <flatcc_verify_union_vector_field@@Base+0xdbc>
   2d6f0:	cmp	r1, #93	; 0x5d
   2d6f4:	bne	2cf68 <flatcc_verify_union_vector_field@@Base+0x6ec>
   2d6f8:	add	r1, r8, #1
   2d6fc:	sub	r3, r5, r1
   2d700:	cmp	r3, #1
   2d704:	ble	2d718 <flatcc_verify_union_vector_field@@Base+0xe9c>
   2d708:	ldrb	r3, [r8, #1]
   2d70c:	cmp	r3, #32
   2d710:	bhi	2d750 <flatcc_verify_union_vector_field@@Base+0xed4>
   2d714:	beq	2d7ec <flatcc_verify_union_vector_field@@Base+0xf70>
   2d718:	mov	r0, #0
   2d71c:	cmp	r5, r1
   2d720:	beq	2d8fc <flatcc_verify_union_vector_field@@Base+0x1080>
   2d724:	ldrb	r3, [r1]
   2d728:	cmp	r3, #32
   2d72c:	bne	2d804 <flatcc_verify_union_vector_field@@Base+0xf88>
   2d730:	add	r2, r1, #1
   2d734:	b	2d744 <flatcc_verify_union_vector_field@@Base+0xec8>
   2d738:	ldrb	r3, [r2], #1
   2d73c:	cmp	r3, #32
   2d740:	bne	2d804 <flatcc_verify_union_vector_field@@Base+0xf88>
   2d744:	cmp	r2, r5
   2d748:	mov	r1, r2
   2d74c:	bne	2d738 <flatcc_verify_union_vector_field@@Base+0xebc>
   2d750:	mov	r7, #0
   2d754:	b	2d108 <flatcc_verify_union_vector_field@@Base+0x88c>
   2d758:	add	r8, r8, #1
   2d75c:	b	2d6dc <flatcc_verify_union_vector_field@@Base+0xe60>
   2d760:	ldr	r3, [r6, #20]
   2d764:	cmp	r3, #0
   2d768:	beq	2d7bc <flatcc_verify_union_vector_field@@Base+0xf40>
   2d76c:	ldr	r3, [sp, #64]	; 0x40
   2d770:	cmp	r3, #0
   2d774:	beq	2ce40 <flatcc_verify_union_vector_field@@Base+0x5c4>
   2d778:	mov	r8, r5
   2d77c:	b	2cf74 <flatcc_verify_union_vector_field@@Base+0x6f8>
   2d780:	ldrb	r1, [r4, #2]
   2d784:	cmp	r1, #32
   2d788:	addhi	r8, r4, #2
   2d78c:	bls	2cf30 <flatcc_verify_union_vector_field@@Base+0x6b4>
   2d790:	cmp	r5, r8
   2d794:	bne	2d6f0 <flatcc_verify_union_vector_field@@Base+0xe74>
   2d798:	b	2cf68 <flatcc_verify_union_vector_field@@Base+0x6ec>
   2d79c:	mov	r1, r5
   2d7a0:	b	2d2a4 <flatcc_verify_union_vector_field@@Base+0xa28>
   2d7a4:	ldrb	r3, [r8, #2]
   2d7a8:	cmp	r3, #32
   2d7ac:	addhi	r1, r8, #2
   2d7b0:	addhi	r7, r7, #1
   2d7b4:	bls	2d534 <flatcc_verify_union_vector_field@@Base+0xcb8>
   2d7b8:	b	2d108 <flatcc_verify_union_vector_field@@Base+0x88c>
   2d7bc:	ldr	r3, [r6, #4]
   2d7c0:	mov	r2, #5
   2d7c4:	sub	r3, r8, r3
   2d7c8:	add	r3, r3, #1
   2d7cc:	str	r8, [r6, #32]
   2d7d0:	str	r3, [r6, #16]
   2d7d4:	str	r2, [r6, #20]
   2d7d8:	b	2d76c <flatcc_verify_union_vector_field@@Base+0xef0>
   2d7dc:	mov	r4, r1
   2d7e0:	b	2cea8 <flatcc_verify_union_vector_field@@Base+0x62c>
   2d7e4:	mov	r8, r5
   2d7e8:	b	2cf68 <flatcc_verify_union_vector_field@@Base+0x6ec>
   2d7ec:	ldrb	r3, [r8, #2]
   2d7f0:	cmp	r3, #32
   2d7f4:	addhi	r1, r8, #2
   2d7f8:	movhi	r7, #0
   2d7fc:	bls	2d718 <flatcc_verify_union_vector_field@@Base+0xe9c>
   2d800:	b	2d108 <flatcc_verify_union_vector_field@@Base+0x88c>
   2d804:	cmp	r3, #32
   2d808:	bhi	2d750 <flatcc_verify_union_vector_field@@Base+0xed4>
   2d80c:	sub	r3, r3, #9
   2d810:	cmp	r3, #23
   2d814:	ldrls	pc, [pc, r3, lsl #2]
   2d818:	b	2d8d0 <flatcc_verify_union_vector_field@@Base+0x1054>
   2d81c:	andeq	sp, r2, r8, asr #17
   2d820:	muleq	r2, ip, r8
   2d824:	ldrdeq	sp, [r2], -r0
   2d828:	ldrdeq	sp, [r2], -r0
   2d82c:	andeq	sp, r2, ip, ror r8
   2d830:	ldrdeq	sp, [r2], -r0
   2d834:	ldrdeq	sp, [r2], -r0
   2d838:	ldrdeq	sp, [r2], -r0
   2d83c:	ldrdeq	sp, [r2], -r0
   2d840:	ldrdeq	sp, [r2], -r0
   2d844:	ldrdeq	sp, [r2], -r0
   2d848:	ldrdeq	sp, [r2], -r0
   2d84c:	ldrdeq	sp, [r2], -r0
   2d850:	ldrdeq	sp, [r2], -r0
   2d854:	ldrdeq	sp, [r2], -r0
   2d858:	ldrdeq	sp, [r2], -r0
   2d85c:	ldrdeq	sp, [r2], -r0
   2d860:	ldrdeq	sp, [r2], -r0
   2d864:	ldrdeq	sp, [r2], -r0
   2d868:	ldrdeq	sp, [r2], -r0
   2d86c:	ldrdeq	sp, [r2], -r0
   2d870:	ldrdeq	sp, [r2], -r0
   2d874:	ldrdeq	sp, [r2], -r0
   2d878:	andeq	sp, r2, ip, lsl r7
   2d87c:	sub	r3, r5, r1
   2d880:	cmp	r3, #1
   2d884:	movle	r3, r0
   2d888:	ldrbgt	r3, [r1, #1]
   2d88c:	subgt	r3, r3, #10
   2d890:	clzgt	r3, r3
   2d894:	lsrgt	r3, r3, #5
   2d898:	add	r1, r1, r3
   2d89c:	ldr	r3, [r6, #12]
   2d8a0:	add	r1, r1, #1
   2d8a4:	add	r3, r3, #1
   2d8a8:	str	r1, [r6, #4]
   2d8ac:	str	r3, [r6, #12]
   2d8b0:	cmp	r5, r1
   2d8b4:	beq	2d8fc <flatcc_verify_union_vector_field@@Base+0x1080>
   2d8b8:	ldrb	r3, [r1]
   2d8bc:	cmp	r3, #32
   2d8c0:	bls	2d80c <flatcc_verify_union_vector_field@@Base+0xf90>
   2d8c4:	b	2d750 <flatcc_verify_union_vector_field@@Base+0xed4>
   2d8c8:	add	r1, r1, #1
   2d8cc:	b	2d8b0 <flatcc_verify_union_vector_field@@Base+0x1034>
   2d8d0:	ldr	r7, [r6, #20]
   2d8d4:	cmp	r7, #0
   2d8d8:	bne	2ce94 <flatcc_verify_union_vector_field@@Base+0x618>
   2d8dc:	ldr	r3, [r6, #4]
   2d8e0:	mov	r2, #5
   2d8e4:	sub	r3, r1, r3
   2d8e8:	add	r3, r3, #1
   2d8ec:	str	r1, [r6, #32]
   2d8f0:	str	r3, [r6, #16]
   2d8f4:	str	r2, [r6, #20]
   2d8f8:	b	2ce98 <flatcc_verify_union_vector_field@@Base+0x61c>
   2d8fc:	mov	r1, r5
   2d900:	b	2d750 <flatcc_verify_union_vector_field@@Base+0xed4>

0002d904 <grisu3_diy_fp_encode_double@@Base>:
   2d904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d908:	sub	sp, sp, #60	; 0x3c
   2d90c:	mov	sl, r0
   2d910:	ldr	lr, [sp, #96]	; 0x60
   2d914:	mov	fp, r1
   2d918:	cmp	lr, #0
   2d91c:	mov	r6, r3
   2d920:	movne	lr, #4
   2d924:	orrs	r3, sl, fp
   2d928:	sub	r2, r2, r6
   2d92c:	beq	2de54 <grisu3_diy_fp_encode_double@@Base+0x550>
   2d930:	ldr	r1, [pc, #1312]	; 2de58 <grisu3_diy_fp_encode_double@@Base+0x554>
   2d934:	mov	r0, #0
   2d938:	and	r0, r0, sl
   2d93c:	and	r1, r1, fp
   2d940:	orrs	r3, r0, r1
   2d944:	movne	ip, #0
   2d948:	bne	2d984 <grisu3_diy_fp_encode_double@@Base+0x80>
   2d94c:	mvn	r4, #9
   2d950:	lsl	r3, fp, #10
   2d954:	lsl	r1, sl, #10
   2d958:	orr	r3, r3, sl, lsr #22
   2d95c:	mov	sl, r1
   2d960:	ldr	r1, [pc, #1264]	; 2de58 <grisu3_diy_fp_encode_double@@Base+0x554>
   2d964:	mov	r0, #0
   2d968:	and	r0, r0, sl
   2d96c:	and	r1, r1, r3
   2d970:	mov	fp, r3
   2d974:	orrs	r3, r0, r1
   2d978:	mov	ip, r4
   2d97c:	sub	r4, r4, #10
   2d980:	beq	2d950 <grisu3_diy_fp_encode_double@@Base+0x4c>
   2d984:	cmp	sl, #0
   2d988:	sbcs	r3, fp, #0
   2d98c:	blt	2d9a8 <grisu3_diy_fp_encode_double@@Base+0xa4>
   2d990:	adds	sl, sl, sl
   2d994:	adc	fp, fp, fp
   2d998:	cmp	sl, #0
   2d99c:	sbcs	r3, fp, #0
   2d9a0:	sub	ip, ip, #1
   2d9a4:	bge	2d990 <grisu3_diy_fp_encode_double@@Base+0x8c>
   2d9a8:	rsb	r3, ip, #0
   2d9ac:	cmn	r2, #348	; 0x15c
   2d9b0:	lsl	r3, lr, r3
   2d9b4:	str	r3, [sp, #20]
   2d9b8:	blt	2de40 <grisu3_diy_fp_encode_double@@Base+0x53c>
   2d9bc:	cmp	r2, #348	; 0x15c
   2d9c0:	bge	2de2c <grisu3_diy_fp_encode_double@@Base+0x528>
   2d9c4:	add	r1, r2, #348	; 0x15c
   2d9c8:	ldr	r3, [pc, #1164]	; 2de5c <grisu3_diy_fp_encode_double@@Base+0x558>
   2d9cc:	asr	r1, r1, #3
   2d9d0:	add	r1, r3, r1, lsl #4
   2d9d4:	ldrsh	r7, [r1, #66]	; 0x42
   2d9d8:	ldrd	r4, [r1, #56]	; 0x38
   2d9dc:	ldrsh	r1, [r1, #64]	; 0x40
   2d9e0:	cmp	r2, r7
   2d9e4:	strd	r4, [sp]
   2d9e8:	str	r1, [sp, #40]	; 0x28
   2d9ec:	blt	2de18 <grisu3_diy_fp_encode_double@@Base+0x514>
   2d9f0:	add	r1, r7, #7
   2d9f4:	cmp	r2, r1
   2d9f8:	bgt	2de04 <grisu3_diy_fp_encode_double@@Base+0x500>
   2d9fc:	cmp	r2, r7
   2da00:	beq	2daec <grisu3_diy_fp_encode_double@@Base+0x1e8>
   2da04:	sub	r2, r2, r7
   2da08:	sub	r7, r2, #1
   2da0c:	cmp	r7, #6
   2da10:	bhi	2ddf0 <grisu3_diy_fp_encode_double@@Base+0x4ec>
   2da14:	ldr	r0, [pc, #1092]	; 2de60 <grisu3_diy_fp_encode_double@@Base+0x55c>
   2da18:	lsl	r1, r7, #4
   2da1c:	mov	r3, #0
   2da20:	ldrd	r4, [r0, r1]
   2da24:	add	r1, r0, r1
   2da28:	str	r1, [sp, #44]	; 0x2c
   2da2c:	mov	r8, r4
   2da30:	mov	r0, r4
   2da34:	strd	r4, [sp, #24]
   2da38:	umull	r4, r5, sl, r5
   2da3c:	mov	r1, #0
   2da40:	strd	r4, [sp, #32]
   2da44:	umull	r4, r5, fp, r8
   2da48:	mul	lr, sl, r1
   2da4c:	mla	r2, fp, r1, r5
   2da50:	mla	lr, r8, r3, lr
   2da54:	ldr	r1, [sp, #28]
   2da58:	umull	r8, r9, sl, r0
   2da5c:	ldr	r0, [sp, #36]	; 0x24
   2da60:	strd	r4, [sp, #48]	; 0x30
   2da64:	mla	r3, r1, r3, r0
   2da68:	add	r0, lr, r9
   2da6c:	mov	lr, #0
   2da70:	str	r0, [sp, #8]
   2da74:	str	lr, [sp, #12]
   2da78:	mov	r4, r2
   2da7c:	mov	r0, r3
   2da80:	ldrd	r2, [sp, #8]
   2da84:	ldr	r8, [sp, #48]	; 0x30
   2da88:	add	r6, r6, #1
   2da8c:	adds	r2, r2, r8
   2da90:	adc	r3, r3, #0
   2da94:	adds	r0, r0, r4
   2da98:	ldr	r4, [sp, #28]
   2da9c:	adc	r1, lr, lr
   2daa0:	adds	r2, r2, #-2147483648	; 0x80000000
   2daa4:	umlal	r0, r1, r4, fp
   2daa8:	mov	fp, r1
   2daac:	ldr	r1, [sp, #44]	; 0x2c
   2dab0:	adc	r3, r3, #0
   2dab4:	mov	sl, r0
   2dab8:	ldr	r4, [r1, #8]
   2dabc:	ldr	r1, [sp, #32]
   2dac0:	add	r7, r6, r7
   2dac4:	adds	r2, r2, r1
   2dac8:	adc	r3, r3, #0
   2dacc:	adds	sl, sl, r3
   2dad0:	adc	fp, fp, lr
   2dad4:	cmp	r7, #19
   2dad8:	add	ip, ip, r4
   2dadc:	ldrgt	r3, [sp, #20]
   2dae0:	add	ip, ip, #64	; 0x40
   2dae4:	addgt	r3, r3, #4
   2dae8:	strgt	r3, [sp, #20]
   2daec:	ldrd	r0, [sp]
   2daf0:	mov	r3, #0
   2daf4:	mov	r5, #0
   2daf8:	mov	r2, r0
   2dafc:	umull	r6, r7, sl, r1
   2db00:	umull	r8, r9, fp, r2
   2db04:	mul	lr, sl, r3
   2db08:	mla	r9, fp, r3, r9
   2db0c:	ldr	r3, [sp, #4]
   2db10:	umull	r0, r1, sl, r2
   2db14:	mla	r0, r2, r5, lr
   2db18:	mla	lr, r3, r5, r7
   2db1c:	add	r2, r0, r1
   2db20:	adds	r2, r2, r8
   2db24:	mov	r0, lr
   2db28:	ldr	r4, [sp, #4]
   2db2c:	mov	lr, #0
   2db30:	adc	r3, lr, #0
   2db34:	adds	r0, r0, r9
   2db38:	adc	r1, lr, lr
   2db3c:	umlal	r0, r1, r4, fp
   2db40:	adds	r2, r2, #-2147483648	; 0x80000000
   2db44:	adc	r3, r3, #0
   2db48:	adds	r2, r2, r6
   2db4c:	adc	r3, r3, #0
   2db50:	adds	r6, r3, r0
   2db54:	ldr	r3, [sp, #40]	; 0x28
   2db58:	adc	r7, lr, r1
   2db5c:	add	ip, ip, r3
   2db60:	ldr	r3, [sp, #20]
   2db64:	cmp	r3, lr
   2db68:	moveq	r2, #8
   2db6c:	movne	r2, #9
   2db70:	orrs	r1, r6, r7
   2db74:	add	r2, r3, r2
   2db78:	add	lr, ip, #64	; 0x40
   2db7c:	beq	2de54 <grisu3_diy_fp_encode_double@@Base+0x550>
   2db80:	ldr	r1, [pc, #720]	; 2de58 <grisu3_diy_fp_encode_double@@Base+0x554>
   2db84:	mov	r0, #0
   2db88:	and	r0, r0, r6
   2db8c:	and	r1, r1, r7
   2db90:	orrs	r3, r0, r1
   2db94:	bne	2ddc8 <grisu3_diy_fp_encode_double@@Base+0x4c4>
   2db98:	add	ip, ip, #54	; 0x36
   2db9c:	lsl	r3, r7, #10
   2dba0:	lsl	r1, r6, #10
   2dba4:	orr	r3, r3, r6, lsr #22
   2dba8:	mov	r6, r1
   2dbac:	ldr	r1, [pc, #676]	; 2de58 <grisu3_diy_fp_encode_double@@Base+0x554>
   2dbb0:	mov	r0, #0
   2dbb4:	and	r1, r1, r3
   2dbb8:	and	r0, r0, r6
   2dbbc:	mov	r7, r3
   2dbc0:	orrs	r3, r0, r1
   2dbc4:	mov	r3, ip
   2dbc8:	sub	ip, ip, #10
   2dbcc:	beq	2db9c <grisu3_diy_fp_encode_double@@Base+0x298>
   2dbd0:	cmp	r6, #0
   2dbd4:	sbcs	r1, r7, #0
   2dbd8:	blt	2dbf4 <grisu3_diy_fp_encode_double@@Base+0x2f0>
   2dbdc:	adds	r6, r6, r6
   2dbe0:	adc	r7, r7, r7
   2dbe4:	cmp	r6, #0
   2dbe8:	sbcs	r1, r7, #0
   2dbec:	sub	r3, r3, #1
   2dbf0:	bge	2dbdc <grisu3_diy_fp_encode_double@@Base+0x2d8>
   2dbf4:	ldr	r0, [pc, #616]	; 2de64 <grisu3_diy_fp_encode_double@@Base+0x560>
   2dbf8:	sub	lr, lr, r3
   2dbfc:	add	r1, r3, #64	; 0x40
   2dc00:	cmp	r1, r0
   2dc04:	lsl	r2, r2, lr
   2dc08:	blt	2dd4c <grisu3_diy_fp_encode_double@@Base+0x448>
   2dc0c:	mov	r1, #0
   2dc10:	mov	lr, r1
   2dc14:	mov	r0, #4
   2dc18:	lsr	r4, r6, lr
   2dc1c:	rsb	r6, lr, #32
   2dc20:	sub	ip, lr, #32
   2dc24:	orr	r4, r4, r7, lsl r6
   2dc28:	orr	r4, r4, r7, lsr ip
   2dc2c:	add	ip, r2, r0
   2dc30:	cmp	lr, ip
   2dc34:	add	r3, lr, r3
   2dc38:	lsr	r5, r7, lr
   2dc3c:	blt	2dc64 <grisu3_diy_fp_encode_double@@Base+0x360>
   2dc40:	adds	r4, r4, #1
   2dc44:	adc	r5, r5, #0
   2dc48:	mov	r6, #0
   2dc4c:	and	r7, r5, #2097152	; 0x200000
   2dc50:	orrs	lr, r6, r7
   2dc54:	beq	2dc64 <grisu3_diy_fp_encode_double@@Base+0x360>
   2dc58:	lsrs	r5, r5, #1
   2dc5c:	rrx	r4, r4
   2dc60:	add	r3, r3, #1
   2dc64:	ldr	r7, [pc, #508]	; 2de68 <grisu3_diy_fp_encode_double@@Base+0x564>
   2dc68:	mvn	r6, #0
   2dc6c:	cmp	r5, r7
   2dc70:	cmpeq	r4, r6
   2dc74:	bls	2dc90 <grisu3_diy_fp_encode_double@@Base+0x38c>
   2dc78:	lsrs	r5, r5, #1
   2dc7c:	rrx	r4, r4
   2dc80:	cmp	r5, r7
   2dc84:	cmpeq	r4, r6
   2dc88:	add	r3, r3, #1
   2dc8c:	bhi	2dc78 <grisu3_diy_fp_encode_double@@Base+0x374>
   2dc90:	ldr	r8, [pc, #468]	; 2de6c <grisu3_diy_fp_encode_double@@Base+0x568>
   2dc94:	cmp	r3, r8
   2dc98:	movlt	r8, #0
   2dc9c:	movlt	r9, #0
   2dca0:	blt	2dd20 <grisu3_diy_fp_encode_double@@Base+0x41c>
   2dca4:	beq	2dcf4 <grisu3_diy_fp_encode_double@@Base+0x3f0>
   2dca8:	mov	r6, #0
   2dcac:	and	r7, r5, #1048576	; 0x100000
   2dcb0:	orrs	lr, r6, r7
   2dcb4:	addne	r3, r3, #1072	; 0x430
   2dcb8:	addne	r3, r3, #3
   2dcbc:	movne	r8, #0
   2dcc0:	lslne	r9, r3, #20
   2dcc4:	beq	2dce0 <grisu3_diy_fp_encode_double@@Base+0x3dc>
   2dcc8:	b	2dd08 <grisu3_diy_fp_encode_double@@Base+0x404>
   2dccc:	mov	r6, #0
   2dcd0:	and	r7, r5, #1048576	; 0x100000
   2dcd4:	orrs	r6, r6, r7
   2dcd8:	bne	2ddac <grisu3_diy_fp_encode_double@@Base+0x4a8>
   2dcdc:	mov	r3, lr
   2dce0:	adds	r4, r4, r4
   2dce4:	sub	lr, r3, #1
   2dce8:	adc	r5, r5, r5
   2dcec:	cmp	lr, r8
   2dcf0:	bne	2dccc <grisu3_diy_fp_encode_double@@Base+0x3c8>
   2dcf4:	mov	r8, #0
   2dcf8:	and	r9, r5, #1048576	; 0x100000
   2dcfc:	orrs	r3, r8, r9
   2dd00:	movne	r8, #0
   2dd04:	movne	r9, #1048576	; 0x100000
   2dd08:	ldr	r7, [pc, #352]	; 2de70 <grisu3_diy_fp_encode_double@@Base+0x56c>
   2dd0c:	mvn	r6, #0
   2dd10:	and	r4, r4, r6
   2dd14:	and	r5, r5, r7
   2dd18:	orr	r8, r8, r4
   2dd1c:	orr	r9, r9, r5
   2dd20:	ldr	r3, [sp, #100]	; 0x64
   2dd24:	cmp	ip, r1
   2dd28:	sub	r0, r0, r2
   2dd2c:	movgt	ip, #0
   2dd30:	movle	ip, #1
   2dd34:	cmp	r0, r1
   2dd38:	movlt	r0, ip
   2dd3c:	orrge	r0, ip, #1
   2dd40:	strd	r8, [r3]
   2dd44:	add	sp, sp, #60	; 0x3c
   2dd48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dd4c:	mvn	r0, #1072	; 0x430
   2dd50:	cmp	r1, r0
   2dd54:	blt	2ddc0 <grisu3_diy_fp_encode_double@@Base+0x4bc>
   2dd58:	add	r1, r3, #1136	; 0x470
   2dd5c:	add	r1, r1, #2
   2dd60:	rsb	lr, r1, #64	; 0x40
   2dd64:	cmp	lr, #60	; 0x3c
   2dd68:	rsbgt	r1, r1, #2
   2dd6c:	ble	2ddd0 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2dd70:	rsb	r0, r1, #32
   2dd74:	lsr	ip, r6, r1
   2dd78:	orr	ip, ip, r7, lsl r0
   2dd7c:	sub	r0, r1, #32
   2dd80:	lsr	lr, r7, r1
   2dd84:	orr	ip, ip, r7, lsr r0
   2dd88:	asr	r2, r2, r1
   2dd8c:	add	r3, r3, r1
   2dd90:	mov	r1, #0
   2dd94:	mov	r7, lr
   2dd98:	mov	r6, ip
   2dd9c:	add	r2, r2, #9
   2dda0:	mov	r0, r1
   2dda4:	mov	lr, #62	; 0x3e
   2dda8:	b	2dc18 <grisu3_diy_fp_encode_double@@Base+0x314>
   2ddac:	add	r3, r3, #1072	; 0x430
   2ddb0:	add	r3, r3, #2
   2ddb4:	mov	r8, #0
   2ddb8:	lsl	r9, r3, #20
   2ddbc:	b	2dd08 <grisu3_diy_fp_encode_double@@Base+0x404>
   2ddc0:	mov	r1, #2
   2ddc4:	b	2dd70 <grisu3_diy_fp_encode_double@@Base+0x46c>
   2ddc8:	mov	r3, lr
   2ddcc:	b	2dbd0 <grisu3_diy_fp_encode_double@@Base+0x2cc>
   2ddd0:	rsb	r1, r1, #63	; 0x3f
   2ddd4:	mov	ip, #1
   2ddd8:	mov	r0, #8
   2dddc:	lsl	r4, ip, r1
   2dde0:	and	r4, r4, r6
   2dde4:	lsl	r0, r0, r1
   2dde8:	lsl	r1, r4, #3
   2ddec:	b	2dc18 <grisu3_diy_fp_encode_double@@Base+0x314>
   2ddf0:	ldr	r3, [pc, #124]	; 2de74 <grisu3_diy_fp_encode_double@@Base+0x570>
   2ddf4:	mov	r2, #185	; 0xb9
   2ddf8:	ldr	r1, [pc, #120]	; 2de78 <grisu3_diy_fp_encode_double@@Base+0x574>
   2ddfc:	ldr	r0, [pc, #120]	; 2de7c <grisu3_diy_fp_encode_double@@Base+0x578>
   2de00:	bl	14618 <__assert_fail@plt>
   2de04:	add	r3, r3, #24
   2de08:	mov	r2, #89	; 0x59
   2de0c:	ldr	r1, [pc, #100]	; 2de78 <grisu3_diy_fp_encode_double@@Base+0x574>
   2de10:	ldr	r0, [pc, #104]	; 2de80 <grisu3_diy_fp_encode_double@@Base+0x57c>
   2de14:	bl	14618 <__assert_fail@plt>
   2de18:	add	r3, r3, #24
   2de1c:	mov	r2, #88	; 0x58
   2de20:	ldr	r1, [pc, #80]	; 2de78 <grisu3_diy_fp_encode_double@@Base+0x574>
   2de24:	ldr	r0, [pc, #88]	; 2de84 <grisu3_diy_fp_encode_double@@Base+0x580>
   2de28:	bl	14618 <__assert_fail@plt>
   2de2c:	ldr	r3, [pc, #84]	; 2de88 <grisu3_diy_fp_encode_double@@Base+0x584>
   2de30:	mov	r2, #81	; 0x51
   2de34:	ldr	r1, [pc, #60]	; 2de78 <grisu3_diy_fp_encode_double@@Base+0x574>
   2de38:	ldr	r0, [pc, #76]	; 2de8c <grisu3_diy_fp_encode_double@@Base+0x588>
   2de3c:	bl	14618 <__assert_fail@plt>
   2de40:	ldr	r3, [pc, #64]	; 2de88 <grisu3_diy_fp_encode_double@@Base+0x584>
   2de44:	mov	r2, #80	; 0x50
   2de48:	ldr	r1, [pc, #40]	; 2de78 <grisu3_diy_fp_encode_double@@Base+0x574>
   2de4c:	ldr	r0, [pc, #60]	; 2de90 <grisu3_diy_fp_encode_double@@Base+0x58c>
   2de50:	bl	14618 <__assert_fail@plt>
   2de54:	bl	148b8 <__assert_fail@plt+0x2a0>
   2de58:			; <UNDEFINED> instruction: 0xffc00000
   2de5c:			; <UNDEFINED> instruction: 0x000457b8
   2de60:	andeq	r7, r5, r0, asr #6
   2de64:			; <UNDEFINED> instruction: 0xfffffc0e
   2de68:			; <UNDEFINED> instruction: 0x001fffff
   2de6c:			; <UNDEFINED> instruction: 0xfffffbce
   2de70:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   2de74:	andeq	r5, r4, r0, ror #26
   2de78:	strheq	r6, [r4], -r4
   2de7c:	andeq	r6, r4, r4, lsl #3
   2de80:	andeq	r6, r4, r8, ror #2
   2de84:	andeq	r6, r4, r8, asr r1
   2de88:	ldrdeq	r5, [r4], -r0
   2de8c:	andeq	r6, r4, ip, lsr #2
   2de90:	andeq	r6, r4, ip, lsl #2
   2de94:	cmp	r1, #1000	; 0x3e8
   2de98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2de9c:	addle	r1, r1, #1
   2dea0:	addgt	lr, r0, #1000	; 0x3e8
   2dea4:	mov	r4, #0
   2dea8:	mov	r5, #0
   2deac:	addle	lr, r0, r1
   2deb0:	addgt	lr, lr, #1
   2deb4:	cmp	lr, r0
   2deb8:	sub	sp, sp, #44	; 0x2c
   2debc:	mov	fp, r2
   2dec0:	mov	sl, r0
   2dec4:	strd	r4, [r2]
   2dec8:	beq	2e404 <grisu3_diy_fp_encode_double@@Base+0xb00>
   2decc:	ldrb	r0, [r0]
   2ded0:	cmp	r0, #45	; 0x2d
   2ded4:	movne	r2, #0
   2ded8:	movne	r3, sl
   2dedc:	strne	r2, [sp, #16]
   2dee0:	beq	2e294 <grisu3_diy_fp_encode_double@@Base+0x990>
   2dee4:	cmp	r0, #48	; 0x30
   2dee8:	beq	2e2b4 <grisu3_diy_fp_encode_double@@Base+0x9b0>
   2deec:	sub	r2, r0, #49	; 0x31
   2def0:	cmp	r2, #8
   2def4:	bhi	2dff4 <grisu3_diy_fp_encode_double@@Base+0x6f0>
   2def8:	add	r9, r3, #1
   2defc:	sub	r0, r0, #48	; 0x30
   2df00:	cmp	lr, r9
   2df04:	asr	r1, r0, #31
   2df08:	beq	2e864 <grisu3_diy_fp_encode_double@@Base+0xf60>
   2df0c:	ldrb	ip, [r3, #1]
   2df10:	sub	r3, ip, #48	; 0x30
   2df14:	cmp	r3, #9
   2df18:	movhi	r4, r9
   2df1c:	movhi	r9, #0
   2df20:	bhi	2df84 <grisu3_diy_fp_encode_double@@Base+0x680>
   2df24:	add	r5, r9, #1
   2df28:	mov	r8, #10
   2df2c:	add	r7, pc, #988	; 0x3dc
   2df30:	ldrd	r6, [r7]
   2df34:	b	2df48 <grisu3_diy_fp_encode_double@@Base+0x644>
   2df38:	cmp	r1, r7
   2df3c:	cmpeq	r0, r6
   2df40:	bhi	2e010 <grisu3_diy_fp_encode_double@@Base+0x70c>
   2df44:	mov	r5, r3
   2df48:	umull	r2, r3, r0, r8
   2df4c:	mla	r3, r8, r1, r3
   2df50:	adds	r0, r2, ip
   2df54:	adc	r1, r3, #0
   2df58:	subs	r0, r0, #48	; 0x30
   2df5c:	sbc	r1, r1, #0
   2df60:	cmp	lr, r5
   2df64:	mov	r4, r5
   2df68:	beq	2e698 <grisu3_diy_fp_encode_double@@Base+0xd94>
   2df6c:	ldrb	ip, [r5]
   2df70:	add	r3, r5, #1
   2df74:	sub	r2, ip, #48	; 0x30
   2df78:	cmp	r2, #9
   2df7c:	bls	2df38 <grisu3_diy_fp_encode_double@@Base+0x634>
   2df80:	sub	r9, r5, r9
   2df84:	mov	r8, #0
   2df88:	mov	r2, r8
   2df8c:	sub	r3, ip, #49	; 0x31
   2df90:	cmp	r3, #8
   2df94:	bhi	2e1d0 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   2df98:	add	r6, r4, #1
   2df9c:	cmp	lr, r6
   2dfa0:	add	r5, r2, #1
   2dfa4:	beq	2e340 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   2dfa8:	ldrb	ip, [r4, #1]
   2dfac:	sub	r3, ip, #48	; 0x30
   2dfb0:	cmp	r3, #9
   2dfb4:	bhi	2e1c4 <grisu3_diy_fp_encode_double@@Base+0x8c0>
   2dfb8:	sub	r2, r2, r4
   2dfbc:	add	r4, r4, #2
   2dfc0:	b	2dfd4 <grisu3_diy_fp_encode_double@@Base+0x6d0>
   2dfc4:	ldrb	ip, [r4], #1
   2dfc8:	sub	r3, ip, #48	; 0x30
   2dfcc:	cmp	r3, #9
   2dfd0:	bhi	2e1c4 <grisu3_diy_fp_encode_double@@Base+0x8c0>
   2dfd4:	cmp	r4, lr
   2dfd8:	add	r5, r2, r4
   2dfdc:	mov	r6, r4
   2dfe0:	bne	2dfc4 <grisu3_diy_fp_encode_double@@Base+0x6c0>
   2dfe4:	add	r5, r5, r9
   2dfe8:	mov	r4, lr
   2dfec:	mov	r8, #1
   2dff0:	b	2e064 <grisu3_diy_fp_encode_double@@Base+0x760>
   2dff4:	ldr	r3, [sp, #16]
   2dff8:	cmp	r3, #0
   2dffc:	moveq	r4, sl
   2e000:	movne	r4, #0
   2e004:	mov	r0, r4
   2e008:	add	sp, sp, #44	; 0x2c
   2e00c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e010:	cmp	ip, #52	; 0x34
   2e014:	movls	r2, #0
   2e018:	movhi	r2, #1
   2e01c:	adds	r0, r0, r2
   2e020:	adc	r1, r1, #0
   2e024:	cmp	ip, #48	; 0x30
   2e028:	sub	r9, r4, r9
   2e02c:	movne	r8, #1
   2e030:	movne	r2, #0
   2e034:	beq	2e04c <grisu3_diy_fp_encode_double@@Base+0x748>
   2e038:	b	2df8c <grisu3_diy_fp_encode_double@@Base+0x688>
   2e03c:	ldrb	ip, [r3]
   2e040:	add	r3, r3, #1
   2e044:	cmp	ip, #48	; 0x30
   2e048:	bne	2e308 <grisu3_diy_fp_encode_double@@Base+0xa04>
   2e04c:	cmp	lr, r3
   2e050:	mov	r4, r3
   2e054:	sub	r2, r3, r5
   2e058:	bne	2e03c <grisu3_diy_fp_encode_double@@Base+0x738>
   2e05c:	add	r5, r2, r9
   2e060:	mov	r8, #1
   2e064:	cmp	lr, r4
   2e068:	beq	2e340 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   2e06c:	orrs	r3, r0, r1
   2e070:	moveq	r2, #1
   2e074:	movne	r2, #0
   2e078:	cmn	r5, #324	; 0x144
   2e07c:	movge	r3, #0
   2e080:	movlt	r3, #1
   2e084:	orrs	r3, r2, r3
   2e088:	bne	2e1a0 <grisu3_diy_fp_encode_double@@Base+0x89c>
   2e08c:	ldr	r3, [pc, #652]	; 2e320 <grisu3_diy_fp_encode_double@@Base+0xa1c>
   2e090:	cmp	r5, r3
   2e094:	bgt	2e330 <grisu3_diy_fp_encode_double@@Base+0xa2c>
   2e098:	ldr	r3, [pc, #644]	; 2e324 <grisu3_diy_fp_encode_double@@Base+0xa20>
   2e09c:	mvn	r2, #0
   2e0a0:	cmp	r1, r3
   2e0a4:	cmpeq	r0, r2
   2e0a8:	movls	r3, #1
   2e0ac:	movhi	r3, #0
   2e0b0:	cmp	r5, #22
   2e0b4:	movhi	r3, #0
   2e0b8:	andls	r3, r3, #1
   2e0bc:	cmp	r3, #0
   2e0c0:	beq	2e42c <grisu3_diy_fp_encode_double@@Base+0xb28>
   2e0c4:	bl	411ac <flatcc_json_printer_clear@@Base+0x588>
   2e0c8:	sub	r9, r5, r9
   2e0cc:	add	r3, r9, #22
   2e0d0:	vmov	d7, r0, r1
   2e0d4:	cmp	r3, #44	; 0x2c
   2e0d8:	ldrls	pc, [pc, r3, lsl #2]
   2e0dc:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e0e0:	muleq	r2, r0, r5
   2e0e4:	muleq	r2, ip, r5
   2e0e8:	andeq	lr, r2, r4, lsl #11
   2e0ec:	andeq	lr, r2, ip, asr r6
   2e0f0:	andeq	lr, r2, r0, asr r6
   2e0f4:	andeq	lr, r2, r4, asr #12
   2e0f8:	andeq	lr, r2, r8, lsr r6
   2e0fc:	andeq	lr, r2, ip, lsr #12
   2e100:	andeq	lr, r2, r0, lsr #12
   2e104:	andeq	lr, r2, r4, lsl r6
   2e108:	andeq	lr, r2, r8, lsl #12
   2e10c:	strdeq	lr, [r2], -ip
   2e110:	strdeq	lr, [r2], -r0
   2e114:	andeq	lr, r2, r4, ror #11
   2e118:	ldrdeq	lr, [r2], -r8
   2e11c:	andeq	lr, r2, ip, asr #11
   2e120:	andeq	lr, r2, r0, asr #11
   2e124:			; <UNDEFINED> instruction: 0x0002e5b4
   2e128:	andeq	lr, r2, r8, lsr #11
   2e12c:	andeq	lr, r2, ip, lsl #10
   2e130:	andeq	lr, r2, r0, lsl #10
   2e134:	strdeq	lr, [r2], -r4
   2e138:	muleq	r2, ip, r1
   2e13c:	ldrdeq	lr, [r2], -ip
   2e140:	ldrdeq	lr, [r2], -r0
   2e144:	andeq	lr, r2, r4, asr #9
   2e148:			; <UNDEFINED> instruction: 0x0002e4b8
   2e14c:	andeq	lr, r2, ip, lsr #9
   2e150:	andeq	lr, r2, r0, lsr #9
   2e154:	muleq	r2, r4, r4
   2e158:	andeq	lr, r2, r8, lsl #9
   2e15c:	andeq	lr, r2, ip, ror r4
   2e160:	andeq	lr, r2, r0, ror r4
   2e164:	andeq	lr, r2, r4, ror #8
   2e168:	muleq	r2, r4, r1
   2e16c:	andeq	lr, r2, ip, ror #10
   2e170:	andeq	lr, r2, r0, ror #10
   2e174:	andeq	lr, r2, r4, asr r5
   2e178:	andeq	lr, r2, r8, asr #10
   2e17c:	andeq	lr, r2, ip, lsr r5
   2e180:	andeq	lr, r2, r0, lsr r5
   2e184:	andeq	lr, r2, r4, lsr #10
   2e188:	andeq	lr, r2, r8, lsl r5
   2e18c:	andeq	lr, r2, r8, ror r5
   2e190:	andeq	lr, r2, r8, ror #9
   2e194:	vldr	d6, [pc, #380]	; 2e318 <grisu3_diy_fp_encode_double@@Base+0xa14>
   2e198:	vmul.f64	d7, d7, d6
   2e19c:	vstr	d7, [fp]
   2e1a0:	ldr	r3, [sp, #16]
   2e1a4:	cmp	r3, #0
   2e1a8:	beq	2e004 <grisu3_diy_fp_encode_double@@Base+0x700>
   2e1ac:	vldr	d7, [fp]
   2e1b0:	mov	r0, r4
   2e1b4:	vneg.f64	d7, d7
   2e1b8:	vstr	d7, [fp]
   2e1bc:	add	sp, sp, #44	; 0x2c
   2e1c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e1c4:	mov	r2, r5
   2e1c8:	mov	r4, r6
   2e1cc:	mov	r8, #1
   2e1d0:	cmp	ip, #46	; 0x2e
   2e1d4:	beq	2e348 <grisu3_diy_fp_encode_double@@Base+0xa44>
   2e1d8:	cmp	lr, r4
   2e1dc:	add	r5, r2, r9
   2e1e0:	beq	2e340 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   2e1e4:	orr	ip, ip, #32
   2e1e8:	cmp	ip, #101	; 0x65
   2e1ec:	bne	2e06c <grisu3_diy_fp_encode_double@@Base+0x768>
   2e1f0:	sub	r3, lr, r4
   2e1f4:	cmp	r3, #1
   2e1f8:	ble	2e340 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   2e1fc:	ldrb	r2, [r4, #1]
   2e200:	cmp	r2, #43	; 0x2b
   2e204:	beq	2e67c <grisu3_diy_fp_encode_double@@Base+0xd78>
   2e208:	cmp	r2, #45	; 0x2d
   2e20c:	beq	2e840 <grisu3_diy_fp_encode_double@@Base+0xf3c>
   2e210:	add	ip, r4, #1
   2e214:	mov	r3, #0
   2e218:	str	r3, [sp, #8]
   2e21c:	sub	r2, r2, #48	; 0x30
   2e220:	uxtb	r3, r2
   2e224:	cmp	r3, #9
   2e228:	bhi	2e340 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   2e22c:	add	r4, ip, #1
   2e230:	cmp	lr, r4
   2e234:	beq	2e280 <grisu3_diy_fp_encode_double@@Base+0x97c>
   2e238:	ldrb	r3, [ip, #1]
   2e23c:	sub	r6, r3, #48	; 0x30
   2e240:	cmp	r6, #9
   2e244:	bhi	2e668 <grisu3_diy_fp_encode_double@@Base+0xd64>
   2e248:	ldr	r7, [pc, #216]	; 2e328 <grisu3_diy_fp_encode_double@@Base+0xa24>
   2e24c:	add	ip, ip, #2
   2e250:	b	2e264 <grisu3_diy_fp_encode_double@@Base+0x960>
   2e254:	ldrb	r3, [ip], #1
   2e258:	sub	r6, r3, #48	; 0x30
   2e25c:	cmp	r6, #9
   2e260:	bhi	2e668 <grisu3_diy_fp_encode_double@@Base+0xd64>
   2e264:	add	r4, r2, r2, lsl #2
   2e268:	cmp	r2, r7
   2e26c:	add	r4, r3, r4, lsl #1
   2e270:	suble	r2, r4, #48	; 0x30
   2e274:	cmp	lr, ip
   2e278:	mov	r4, ip
   2e27c:	bne	2e254 <grisu3_diy_fp_encode_double@@Base+0x950>
   2e280:	ldr	r3, [sp, #8]
   2e284:	cmp	r3, #0
   2e288:	beq	2e340 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   2e28c:	sub	r5, r5, r2
   2e290:	b	2e064 <grisu3_diy_fp_encode_double@@Base+0x760>
   2e294:	add	r3, sl, #1
   2e298:	cmp	lr, r3
   2e29c:	beq	2e340 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   2e2a0:	ldrb	r0, [sl, #1]
   2e2a4:	mov	r2, #1
   2e2a8:	str	r2, [sp, #16]
   2e2ac:	cmp	r0, #48	; 0x30
   2e2b0:	bne	2deec <grisu3_diy_fp_encode_double@@Base+0x5e8>
   2e2b4:	add	r4, r3, #1
   2e2b8:	cmp	lr, r4
   2e2bc:	beq	2e414 <grisu3_diy_fp_encode_double@@Base+0xb10>
   2e2c0:	ldrb	ip, [r3, #1]
   2e2c4:	orr	r2, ip, #32
   2e2c8:	cmp	r2, #120	; 0x78
   2e2cc:	moveq	r4, sl
   2e2d0:	beq	2e004 <grisu3_diy_fp_encode_double@@Base+0x700>
   2e2d4:	cmp	ip, #48	; 0x30
   2e2d8:	bne	2e2f8 <grisu3_diy_fp_encode_double@@Base+0x9f4>
   2e2dc:	add	r3, r3, #2
   2e2e0:	cmp	lr, r3
   2e2e4:	mov	r4, r3
   2e2e8:	beq	2e414 <grisu3_diy_fp_encode_double@@Base+0xb10>
   2e2ec:	ldrb	ip, [r3], #1
   2e2f0:	cmp	ip, #48	; 0x30
   2e2f4:	beq	2e2e0 <grisu3_diy_fp_encode_double@@Base+0x9dc>
   2e2f8:	mov	r9, r4
   2e2fc:	mov	r0, #0
   2e300:	mov	r1, #0
   2e304:	b	2df10 <grisu3_diy_fp_encode_double@@Base+0x60c>
   2e308:	mov	r8, #1
   2e30c:	b	2df8c <grisu3_diy_fp_encode_double@@Base+0x688>
   2e310:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2e314:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   2e318:	andge	r0, r0, #0
   2e31c:	rsbmi	r1, sp, #148, 20	; 0x94000
   2e320:	andeq	r0, r0, r6, lsr r1
   2e324:			; <UNDEFINED> instruction: 0x001fffff
   2e328:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   2e32c:	svcvc	0x00f00000	; IMB
   2e330:	ldr	r3, [pc, #-12]	; 2e32c <grisu3_diy_fp_encode_double@@Base+0xa28>
   2e334:	mov	r2, #0
   2e338:	strd	r2, [fp]
   2e33c:	b	2e1a0 <grisu3_diy_fp_encode_double@@Base+0x89c>
   2e340:	mov	r4, #0
   2e344:	b	2e004 <grisu3_diy_fp_encode_double@@Base+0x700>
   2e348:	ldrb	r3, [r4, #1]
   2e34c:	add	ip, r4, #1
   2e350:	mov	r5, ip
   2e354:	str	ip, [sp, #20]
   2e358:	sub	ip, r3, #48	; 0x30
   2e35c:	cmp	ip, #9
   2e360:	bhi	2e340 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   2e364:	cmp	lr, r5
   2e368:	beq	2e880 <grisu3_diy_fp_encode_double@@Base+0xf7c>
   2e36c:	add	r7, pc, #980	; 0x3d4
   2e370:	ldrd	r6, [r7]
   2e374:	cmp	r1, r7
   2e378:	cmpeq	r0, r6
   2e37c:	bhi	2e870 <grisu3_diy_fp_encode_double@@Base+0xf6c>
   2e380:	add	r4, r4, #2
   2e384:	strd	r6, [sp, #8]
   2e388:	mov	ip, #10
   2e38c:	str	r9, [sp, #24]
   2e390:	str	r8, [sp, #28]
   2e394:	b	2e3bc <grisu3_diy_fp_encode_double@@Base+0xab8>
   2e398:	ldrb	r3, [r4]
   2e39c:	add	r4, r4, #1
   2e3a0:	sub	r5, r3, #48	; 0x30
   2e3a4:	cmp	r5, #9
   2e3a8:	bhi	2e6a0 <grisu3_diy_fp_encode_double@@Base+0xd9c>
   2e3ac:	ldrd	r8, [sp, #8]
   2e3b0:	cmp	r1, r9
   2e3b4:	cmpeq	r0, r8
   2e3b8:	bhi	2e800 <grisu3_diy_fp_encode_double@@Base+0xefc>
   2e3bc:	umull	r6, r7, r0, ip
   2e3c0:	mla	r7, ip, r1, r7
   2e3c4:	adds	r0, r6, r3
   2e3c8:	adc	r1, r7, #0
   2e3cc:	subs	r0, r0, #48	; 0x30
   2e3d0:	sbc	r1, r1, #0
   2e3d4:	cmp	lr, r4
   2e3d8:	sub	r2, r2, #1
   2e3dc:	mov	r6, r4
   2e3e0:	bne	2e398 <grisu3_diy_fp_encode_double@@Base+0xa94>
   2e3e4:	ldr	r3, [sp, #20]
   2e3e8:	ldr	r9, [sp, #24]
   2e3ec:	ldr	r8, [sp, #28]
   2e3f0:	sub	r3, lr, r3
   2e3f4:	mov	r4, lr
   2e3f8:	add	r9, r9, r3
   2e3fc:	add	r5, r2, r9
   2e400:	b	2e064 <grisu3_diy_fp_encode_double@@Base+0x760>
   2e404:	mov	r4, lr
   2e408:	mov	r0, r4
   2e40c:	add	sp, sp, #44	; 0x2c
   2e410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e414:	mov	r9, #0
   2e418:	mov	r0, #0
   2e41c:	mov	r1, #0
   2e420:	mov	r5, r9
   2e424:	mov	r8, #0
   2e428:	b	2e064 <grisu3_diy_fp_encode_double@@Base+0x760>
   2e42c:	stm	sp, {r8, fp}
   2e430:	mov	r3, r9
   2e434:	mov	r2, r5
   2e438:	bl	2d904 <grisu3_diy_fp_encode_double@@Base>
   2e43c:	cmp	r0, #0
   2e440:	bne	2e1a0 <grisu3_diy_fp_encode_double@@Base+0x89c>
   2e444:	mov	r0, sl
   2e448:	add	r1, sp, #36	; 0x24
   2e44c:	bl	145dc <strtod@plt>
   2e450:	ldr	r3, [sp, #36]	; 0x24
   2e454:	cmp	r4, r3
   2e458:	movcs	r4, r3
   2e45c:	vstr	d0, [fp]
   2e460:	b	2e004 <grisu3_diy_fp_encode_double@@Base+0x700>
   2e464:	vldr	d6, [pc, #740]	; 2e750 <grisu3_diy_fp_encode_double@@Base+0xe4c>
   2e468:	vmul.f64	d7, d7, d6
   2e46c:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e470:	vldr	d6, [pc, #736]	; 2e758 <grisu3_diy_fp_encode_double@@Base+0xe54>
   2e474:	vmul.f64	d7, d7, d6
   2e478:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e47c:	vldr	d6, [pc, #732]	; 2e760 <grisu3_diy_fp_encode_double@@Base+0xe5c>
   2e480:	vmul.f64	d7, d7, d6
   2e484:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e488:	vldr	d6, [pc, #728]	; 2e768 <grisu3_diy_fp_encode_double@@Base+0xe64>
   2e48c:	vmul.f64	d7, d7, d6
   2e490:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e494:	vldr	d6, [pc, #724]	; 2e770 <grisu3_diy_fp_encode_double@@Base+0xe6c>
   2e498:	vmul.f64	d7, d7, d6
   2e49c:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e4a0:	vldr	d6, [pc, #720]	; 2e778 <grisu3_diy_fp_encode_double@@Base+0xe74>
   2e4a4:	vmul.f64	d7, d7, d6
   2e4a8:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e4ac:	vldr	d6, [pc, #716]	; 2e780 <grisu3_diy_fp_encode_double@@Base+0xe7c>
   2e4b0:	vmul.f64	d7, d7, d6
   2e4b4:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e4b8:	vldr	d6, [pc, #712]	; 2e788 <grisu3_diy_fp_encode_double@@Base+0xe84>
   2e4bc:	vmul.f64	d7, d7, d6
   2e4c0:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e4c4:	vldr	d6, [pc, #708]	; 2e790 <grisu3_diy_fp_encode_double@@Base+0xe8c>
   2e4c8:	vmul.f64	d7, d7, d6
   2e4cc:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e4d0:	vldr	d6, [pc, #704]	; 2e798 <grisu3_diy_fp_encode_double@@Base+0xe94>
   2e4d4:	vmul.f64	d7, d7, d6
   2e4d8:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e4dc:	vldr	d6, [pc, #700]	; 2e7a0 <grisu3_diy_fp_encode_double@@Base+0xe9c>
   2e4e0:	vmul.f64	d7, d7, d6
   2e4e4:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e4e8:	vldr	d6, [pc, #696]	; 2e7a8 <grisu3_diy_fp_encode_double@@Base+0xea4>
   2e4ec:	vmul.f64	d7, d7, d6
   2e4f0:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e4f4:	vldr	d6, [pc, #676]	; 2e7a0 <grisu3_diy_fp_encode_double@@Base+0xe9c>
   2e4f8:	vdiv.f64	d7, d7, d6
   2e4fc:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e500:	vldr	d6, [pc, #656]	; 2e798 <grisu3_diy_fp_encode_double@@Base+0xe94>
   2e504:	vdiv.f64	d7, d7, d6
   2e508:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e50c:	vldr	d6, [pc, #636]	; 2e790 <grisu3_diy_fp_encode_double@@Base+0xe8c>
   2e510:	vdiv.f64	d7, d7, d6
   2e514:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e518:	vldr	d6, [pc, #656]	; 2e7b0 <grisu3_diy_fp_encode_double@@Base+0xeac>
   2e51c:	vmul.f64	d7, d7, d6
   2e520:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e524:	vldr	d6, [pc, #652]	; 2e7b8 <grisu3_diy_fp_encode_double@@Base+0xeb4>
   2e528:	vmul.f64	d7, d7, d6
   2e52c:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e530:	vldr	d6, [pc, #648]	; 2e7c0 <grisu3_diy_fp_encode_double@@Base+0xebc>
   2e534:	vmul.f64	d7, d7, d6
   2e538:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e53c:	vldr	d6, [pc, #644]	; 2e7c8 <grisu3_diy_fp_encode_double@@Base+0xec4>
   2e540:	vmul.f64	d7, d7, d6
   2e544:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e548:	vldr	d6, [pc, #640]	; 2e7d0 <grisu3_diy_fp_encode_double@@Base+0xecc>
   2e54c:	vmul.f64	d7, d7, d6
   2e550:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e554:	vldr	d6, [pc, #636]	; 2e7d8 <grisu3_diy_fp_encode_double@@Base+0xed4>
   2e558:	vmul.f64	d7, d7, d6
   2e55c:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e560:	vldr	d6, [pc, #632]	; 2e7e0 <grisu3_diy_fp_encode_double@@Base+0xedc>
   2e564:	vmul.f64	d7, d7, d6
   2e568:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e56c:	vldr	d6, [pc, #628]	; 2e7e8 <grisu3_diy_fp_encode_double@@Base+0xee4>
   2e570:	vmul.f64	d7, d7, d6
   2e574:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e578:	vldr	d6, [pc, #624]	; 2e7f0 <grisu3_diy_fp_encode_double@@Base+0xeec>
   2e57c:	vmul.f64	d7, d7, d6
   2e580:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e584:	vldr	d6, [pc, #548]	; 2e7b0 <grisu3_diy_fp_encode_double@@Base+0xeac>
   2e588:	vdiv.f64	d7, d7, d6
   2e58c:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e590:	vldr	d6, [pc, #528]	; 2e7a8 <grisu3_diy_fp_encode_double@@Base+0xea4>
   2e594:	vdiv.f64	d7, d7, d6
   2e598:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e59c:	vldr	d6, [pc, #588]	; 2e7f0 <grisu3_diy_fp_encode_double@@Base+0xeec>
   2e5a0:	vdiv.f64	d7, d7, d6
   2e5a4:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e5a8:	vldr	d6, [pc, #472]	; 2e788 <grisu3_diy_fp_encode_double@@Base+0xe84>
   2e5ac:	vdiv.f64	d7, d7, d6
   2e5b0:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e5b4:	vldr	d6, [pc, #452]	; 2e780 <grisu3_diy_fp_encode_double@@Base+0xe7c>
   2e5b8:	vdiv.f64	d7, d7, d6
   2e5bc:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e5c0:	vldr	d6, [pc, #432]	; 2e778 <grisu3_diy_fp_encode_double@@Base+0xe74>
   2e5c4:	vdiv.f64	d7, d7, d6
   2e5c8:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e5cc:	vldr	d6, [pc, #412]	; 2e770 <grisu3_diy_fp_encode_double@@Base+0xe6c>
   2e5d0:	vdiv.f64	d7, d7, d6
   2e5d4:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e5d8:	vldr	d6, [pc, #392]	; 2e768 <grisu3_diy_fp_encode_double@@Base+0xe64>
   2e5dc:	vdiv.f64	d7, d7, d6
   2e5e0:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e5e4:	vldr	d6, [pc, #372]	; 2e760 <grisu3_diy_fp_encode_double@@Base+0xe5c>
   2e5e8:	vdiv.f64	d7, d7, d6
   2e5ec:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e5f0:	vldr	d6, [pc, #352]	; 2e758 <grisu3_diy_fp_encode_double@@Base+0xe54>
   2e5f4:	vdiv.f64	d7, d7, d6
   2e5f8:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e5fc:	vldr	d6, [pc, #332]	; 2e750 <grisu3_diy_fp_encode_double@@Base+0xe4c>
   2e600:	vdiv.f64	d7, d7, d6
   2e604:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e608:	vldr	d6, [pc, #488]	; 2e7f8 <grisu3_diy_fp_encode_double@@Base+0xef4>
   2e60c:	vdiv.f64	d7, d7, d6
   2e610:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e614:	vldr	d6, [pc, #460]	; 2e7e8 <grisu3_diy_fp_encode_double@@Base+0xee4>
   2e618:	vdiv.f64	d7, d7, d6
   2e61c:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e620:	vldr	d6, [pc, #440]	; 2e7e0 <grisu3_diy_fp_encode_double@@Base+0xedc>
   2e624:	vdiv.f64	d7, d7, d6
   2e628:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e62c:	vldr	d6, [pc, #420]	; 2e7d8 <grisu3_diy_fp_encode_double@@Base+0xed4>
   2e630:	vdiv.f64	d7, d7, d6
   2e634:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e638:	vldr	d6, [pc, #400]	; 2e7d0 <grisu3_diy_fp_encode_double@@Base+0xecc>
   2e63c:	vdiv.f64	d7, d7, d6
   2e640:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e644:	vldr	d6, [pc, #380]	; 2e7c8 <grisu3_diy_fp_encode_double@@Base+0xec4>
   2e648:	vdiv.f64	d7, d7, d6
   2e64c:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e650:	vldr	d6, [pc, #360]	; 2e7c0 <grisu3_diy_fp_encode_double@@Base+0xebc>
   2e654:	vdiv.f64	d7, d7, d6
   2e658:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e65c:	vldr	d6, [pc, #340]	; 2e7b8 <grisu3_diy_fp_encode_double@@Base+0xeb4>
   2e660:	vdiv.f64	d7, d7, d6
   2e664:	b	2e19c <grisu3_diy_fp_encode_double@@Base+0x898>
   2e668:	ldr	r3, [sp, #8]
   2e66c:	cmp	r3, #0
   2e670:	bne	2e28c <grisu3_diy_fp_encode_double@@Base+0x988>
   2e674:	add	r5, r5, r2
   2e678:	b	2e06c <grisu3_diy_fp_encode_double@@Base+0x768>
   2e67c:	add	ip, r4, #2
   2e680:	cmp	lr, ip
   2e684:	beq	2e340 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   2e688:	mov	r3, #0
   2e68c:	ldrb	r2, [r4, #2]
   2e690:	str	r3, [sp, #8]
   2e694:	b	2e21c <grisu3_diy_fp_encode_double@@Base+0x918>
   2e698:	sub	r9, lr, r9
   2e69c:	b	2e420 <grisu3_diy_fp_encode_double@@Base+0xb1c>
   2e6a0:	ldr	r3, [sp, #20]
   2e6a4:	ldr	r9, [sp, #24]
   2e6a8:	sub	r3, r6, r3
   2e6ac:	ldr	r8, [sp, #28]
   2e6b0:	add	r9, r9, r3
   2e6b4:	ldrb	ip, [r6]
   2e6b8:	cmp	ip, #48	; 0x30
   2e6bc:	bne	2e85c <grisu3_diy_fp_encode_double@@Base+0xf58>
   2e6c0:	sub	r3, r2, r6
   2e6c4:	add	r6, r6, #1
   2e6c8:	cmp	r6, lr
   2e6cc:	mov	r4, r6
   2e6d0:	add	r2, r3, r6
   2e6d4:	beq	2e3fc <grisu3_diy_fp_encode_double@@Base+0xaf8>
   2e6d8:	ldrb	ip, [r6], #1
   2e6dc:	cmp	ip, #48	; 0x30
   2e6e0:	beq	2e6c8 <grisu3_diy_fp_encode_double@@Base+0xdc4>
   2e6e4:	sub	r3, ip, #49	; 0x31
   2e6e8:	cmp	r3, #8
   2e6ec:	bhi	2e740 <grisu3_diy_fp_encode_double@@Base+0xe3c>
   2e6f0:	add	r3, r4, #1
   2e6f4:	cmp	lr, r3
   2e6f8:	beq	2e340 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   2e6fc:	ldrb	ip, [r4, #1]
   2e700:	sub	r5, ip, #48	; 0x30
   2e704:	cmp	r5, #9
   2e708:	bhi	2e738 <grisu3_diy_fp_encode_double@@Base+0xe34>
   2e70c:	add	r3, r4, #2
   2e710:	b	2e728 <grisu3_diy_fp_encode_double@@Base+0xe24>
   2e714:	ldrb	ip, [r3]
   2e718:	add	r3, r3, #1
   2e71c:	sub	r5, ip, #48	; 0x30
   2e720:	cmp	r5, #9
   2e724:	bhi	2e73c <grisu3_diy_fp_encode_double@@Base+0xe38>
   2e728:	cmp	r3, lr
   2e72c:	mov	r4, r3
   2e730:	bne	2e714 <grisu3_diy_fp_encode_double@@Base+0xe10>
   2e734:	b	2e05c <grisu3_diy_fp_encode_double@@Base+0x758>
   2e738:	mov	r4, r3
   2e73c:	mov	r8, #1
   2e740:	add	r5, r2, r9
   2e744:	b	2e1e4 <grisu3_diy_fp_encode_double@@Base+0x8e0>
   2e748:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2e74c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   2e750:	stmda	r0, {}	; <UNPREDICTABLE>
   2e754:	eorsmi	r4, r7, #7733248	; 0x760000
   2e758:	andcs	r0, r0, r0
   2e75c:	andmi	sl, r2, #95	; 0x5f
   2e760:	andeq	r0, r0, r0
   2e764:	bicmi	ip, sp, r5, ror #26
   2e768:	andeq	r0, r0, r0
   2e76c:	orrsmi	sp, r7, r4, lsl #15
   2e770:	andeq	r0, r0, r0
   2e774:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   2e778:	andeq	r0, r0, r0
   2e77c:	smlawbmi	lr, r0, r4, r8
   2e780:	andeq	r0, r0, r0
   2e784:	rscsmi	r6, r8, r0, lsl #20
   2e788:	andeq	r0, r0, r0
   2e78c:	sbcmi	r8, r3, r0, lsl #16
   2e790:	andeq	r0, r0, r0
   2e794:	addmi	r4, pc, r0
   2e798:	andeq	r0, r0, r0
   2e79c:	subsmi	r0, r9, r0
   2e7a0:	andeq	r0, r0, r0
   2e7a4:	eormi	r0, r4, r0
   2e7a8:			; <UNDEFINED> instruction: 0x064dd592
   2e7ac:	strmi	pc, [r0], #207	; 0xcf
   2e7b0:	ldmvc	r5!, {r6, sl, fp, pc}
   2e7b4:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   2e7b8:	addsvs	r3, r1, r0, lsl #26
   2e7bc:	mvnmi	r5, #228, 16	; 0xe40000
   2e7c0:	strbvs	ip, [lr, -r0, lsl #16]
   2e7c4:			; <UNDEFINED> instruction: 0x43abc16d
   2e7c8:	ldrbhi	sl, [r8]
   2e7cc:	cmnmi	r6, #1459617792	; 0x57000000
   2e7d0:	strbcc	r8, [r0, r0]!
   2e7d4:	movtmi	ip, #4985	; 0x1379
   2e7d8:	ldrtcs	r0, [r4], -r0
   2e7dc:	movwmi	r6, #52213	; 0xcbf5
   2e7e0:	cdpne	0, 9, cr0, cr0, cr0, {0}
   2e7e4:	sbcsmi	fp, r6, #196, 24	; 0xc400
   2e7e8:	strb	r0, [r0, #-0]
   2e7ec:	adcmi	r3, r2, #156	; 0x9c
   2e7f0:	usatle	lr, #2, r0, asr #30
   2e7f4:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   2e7f8:	andge	r0, r0, #0
   2e7fc:	rsbmi	r1, sp, #148, 20	; 0x94000
   2e800:	ldr	r8, [sp, #28]
   2e804:	ldr	ip, [sp, #20]
   2e808:	cmp	r8, #0
   2e80c:	ldr	r9, [sp, #24]
   2e810:	sub	r8, r6, ip
   2e814:	bne	2e82c <grisu3_diy_fp_encode_double@@Base+0xf28>
   2e818:	cmp	r3, #52	; 0x34
   2e81c:	movls	r3, #0
   2e820:	movhi	r3, #1
   2e824:	adds	r0, r0, r3
   2e828:	adc	r1, r1, #0
   2e82c:	cmp	lr, r6
   2e830:	add	r9, r9, r8
   2e834:	beq	2e340 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   2e838:	mov	r8, #1
   2e83c:	b	2e6b4 <grisu3_diy_fp_encode_double@@Base+0xdb0>
   2e840:	add	ip, r4, #2
   2e844:	cmp	lr, ip
   2e848:	beq	2e340 <grisu3_diy_fp_encode_double@@Base+0xa3c>
   2e84c:	mov	r3, #1
   2e850:	ldrb	r2, [r4, #2]
   2e854:	str	r3, [sp, #8]
   2e858:	b	2e21c <grisu3_diy_fp_encode_double@@Base+0x918>
   2e85c:	mov	r4, r6
   2e860:	b	2e6e4 <grisu3_diy_fp_encode_double@@Base+0xde0>
   2e864:	mov	r4, lr
   2e868:	mov	r9, #0
   2e86c:	b	2e420 <grisu3_diy_fp_encode_double@@Base+0xb1c>
   2e870:	cmp	r8, #0
   2e874:	bne	2e88c <grisu3_diy_fp_encode_double@@Base+0xf88>
   2e878:	mov	r6, r5
   2e87c:	b	2e818 <grisu3_diy_fp_encode_double@@Base+0xf14>
   2e880:	mov	r4, lr
   2e884:	mov	r3, #0
   2e888:	b	2e3f8 <grisu3_diy_fp_encode_double@@Base+0xaf4>
   2e88c:	mov	r6, r5
   2e890:	b	2e6b4 <grisu3_diy_fp_encode_double@@Base+0xdb0>

0002e894 <flatcc_json_parser_error_string@@Base>:
   2e894:	cmp	r0, #34	; 0x22
   2e898:	ldrls	r3, [pc, #12]	; 2e8ac <flatcc_json_parser_error_string@@Base+0x18>
   2e89c:	addls	r0, r3, r0, lsl #2
   2e8a0:	ldrls	r0, [r0, #1476]	; 0x5c4
   2e8a4:	ldrhi	r0, [pc, #4]	; 2e8b0 <flatcc_json_parser_error_string@@Base+0x1c>
   2e8a8:	bx	lr
   2e8ac:			; <UNDEFINED> instruction: 0x000457b8
   2e8b0:	andeq	r5, r4, r4, lsr #6

0002e8b4 <flatcc_json_parser_set_error@@Base>:
   2e8b4:	ldr	ip, [r0, #20]
   2e8b8:	cmp	ip, #0
   2e8bc:	bne	2e8d8 <flatcc_json_parser_set_error@@Base+0x24>
   2e8c0:	ldr	ip, [r0, #4]
   2e8c4:	str	r3, [r0, #20]
   2e8c8:	sub	r3, r1, ip
   2e8cc:	add	r3, r3, #1
   2e8d0:	str	r1, [r0, #32]
   2e8d4:	str	r3, [r0, #16]
   2e8d8:	mov	r0, r2
   2e8dc:	bx	lr

0002e8e0 <flatcc_json_parser_string_part@@Base>:
   2e8e0:	cmp	r1, r2
   2e8e4:	push	{lr}		; (str lr, [sp, #-4]!)
   2e8e8:	beq	2e950 <flatcc_json_parser_string_part@@Base+0x70>
   2e8ec:	ldrb	r3, [r1]
   2e8f0:	cmp	r3, #34	; 0x22
   2e8f4:	cmpne	r3, #31
   2e8f8:	movhi	ip, #1
   2e8fc:	movls	ip, #0
   2e900:	cmp	r3, #92	; 0x5c
   2e904:	moveq	ip, #0
   2e908:	andne	ip, ip, #1
   2e90c:	cmp	ip, #0
   2e910:	beq	2e964 <flatcc_json_parser_string_part@@Base+0x84>
   2e914:	add	ip, r1, #1
   2e918:	b	2e944 <flatcc_json_parser_string_part@@Base+0x64>
   2e91c:	ldrb	r3, [ip], #1
   2e920:	cmp	r3, #34	; 0x22
   2e924:	cmpne	r3, #31
   2e928:	movhi	lr, #1
   2e92c:	movls	lr, #0
   2e930:	cmp	r3, #92	; 0x5c
   2e934:	moveq	lr, #0
   2e938:	andne	lr, lr, #1
   2e93c:	cmp	lr, #0
   2e940:	beq	2e964 <flatcc_json_parser_string_part@@Base+0x84>
   2e944:	cmp	ip, r2
   2e948:	mov	r1, ip
   2e94c:	bne	2e91c <flatcc_json_parser_string_part@@Base+0x3c>
   2e950:	ldr	r3, [r0, #20]
   2e954:	cmp	r3, #0
   2e958:	beq	2e9a8 <flatcc_json_parser_string_part@@Base+0xc8>
   2e95c:	mov	r0, r2
   2e960:	pop	{pc}		; (ldr pc, [sp], #4)
   2e964:	cmp	r3, #31
   2e968:	bhi	2e99c <flatcc_json_parser_string_part@@Base+0xbc>
   2e96c:	ldr	r3, [r0, #20]
   2e970:	cmp	r3, #0
   2e974:	bne	2e95c <flatcc_json_parser_string_part@@Base+0x7c>
   2e978:	ldr	r3, [r0, #4]
   2e97c:	mov	ip, #17
   2e980:	sub	r3, r1, r3
   2e984:	add	r3, r3, #1
   2e988:	str	r1, [r0, #32]
   2e98c:	str	r3, [r0, #16]
   2e990:	str	ip, [r0, #20]
   2e994:	mov	r0, r2
   2e998:	pop	{pc}		; (ldr pc, [sp], #4)
   2e99c:	mov	r2, r1
   2e9a0:	mov	r0, r2
   2e9a4:	pop	{pc}		; (ldr pc, [sp], #4)
   2e9a8:	ldr	r3, [r0, #4]
   2e9ac:	mov	ip, #20
   2e9b0:	b	2e980 <flatcc_json_parser_string_part@@Base+0xa0>

0002e9b4 <flatcc_json_parser_space_ext@@Base>:
   2e9b4:	push	{lr}		; (str lr, [sp, #-4]!)
   2e9b8:	mov	lr, #0
   2e9bc:	cmp	r1, r2
   2e9c0:	beq	2ead0 <flatcc_json_parser_space_ext@@Base+0x11c>
   2e9c4:	ldrb	ip, [r1]
   2e9c8:	cmp	ip, #32
   2e9cc:	bne	2e9f8 <flatcc_json_parser_space_ext@@Base+0x44>
   2e9d0:	add	r3, r1, #1
   2e9d4:	b	2e9e4 <flatcc_json_parser_space_ext@@Base+0x30>
   2e9d8:	ldrb	ip, [r3], #1
   2e9dc:	cmp	ip, #32
   2e9e0:	bne	2e9f8 <flatcc_json_parser_space_ext@@Base+0x44>
   2e9e4:	cmp	r3, r2
   2e9e8:	mov	r1, r3
   2e9ec:	bne	2e9d8 <flatcc_json_parser_space_ext@@Base+0x24>
   2e9f0:	mov	r0, r1
   2e9f4:	pop	{pc}		; (ldr pc, [sp], #4)
   2e9f8:	cmp	ip, #32
   2e9fc:	bhi	2e9f0 <flatcc_json_parser_space_ext@@Base+0x3c>
   2ea00:	sub	ip, ip, #9
   2ea04:	cmp	ip, #23
   2ea08:	ldrls	pc, [pc, ip, lsl #2]
   2ea0c:	b	2eac4 <flatcc_json_parser_space_ext@@Base+0x110>
   2ea10:			; <UNDEFINED> instruction: 0x0002eabc
   2ea14:	muleq	r2, r0, sl
   2ea18:	andeq	lr, r2, r4, asr #21
   2ea1c:	andeq	lr, r2, r4, asr #21
   2ea20:	andeq	lr, r2, r0, ror sl
   2ea24:	andeq	lr, r2, r4, asr #21
   2ea28:	andeq	lr, r2, r4, asr #21
   2ea2c:	andeq	lr, r2, r4, asr #21
   2ea30:	andeq	lr, r2, r4, asr #21
   2ea34:	andeq	lr, r2, r4, asr #21
   2ea38:	andeq	lr, r2, r4, asr #21
   2ea3c:	andeq	lr, r2, r4, asr #21
   2ea40:	andeq	lr, r2, r4, asr #21
   2ea44:	andeq	lr, r2, r4, asr #21
   2ea48:	andeq	lr, r2, r4, asr #21
   2ea4c:	andeq	lr, r2, r4, asr #21
   2ea50:	andeq	lr, r2, r4, asr #21
   2ea54:	andeq	lr, r2, r4, asr #21
   2ea58:	andeq	lr, r2, r4, asr #21
   2ea5c:	andeq	lr, r2, r4, asr #21
   2ea60:	andeq	lr, r2, r4, asr #21
   2ea64:	andeq	lr, r2, r4, asr #21
   2ea68:	andeq	lr, r2, r4, asr #21
   2ea6c:			; <UNDEFINED> instruction: 0x0002e9bc
   2ea70:	sub	r3, r2, r1
   2ea74:	cmp	r3, #1
   2ea78:	movle	r3, lr
   2ea7c:	ldrbgt	r3, [r1, #1]
   2ea80:	subgt	r3, r3, #10
   2ea84:	clzgt	r3, r3
   2ea88:	lsrgt	r3, r3, #5
   2ea8c:	add	r1, r1, r3
   2ea90:	ldr	r3, [r0, #12]
   2ea94:	add	r1, r1, #1
   2ea98:	add	r3, r3, #1
   2ea9c:	str	r1, [r0, #4]
   2eaa0:	str	r3, [r0, #12]
   2eaa4:	cmp	r2, r1
   2eaa8:	beq	2ead0 <flatcc_json_parser_space_ext@@Base+0x11c>
   2eaac:	ldrb	ip, [r1]
   2eab0:	cmp	ip, #32
   2eab4:	bls	2ea00 <flatcc_json_parser_space_ext@@Base+0x4c>
   2eab8:	b	2e9f0 <flatcc_json_parser_space_ext@@Base+0x3c>
   2eabc:	add	r1, r1, #1
   2eac0:	b	2eaa4 <flatcc_json_parser_space_ext@@Base+0xf0>
   2eac4:	ldr	r3, [r0, #20]
   2eac8:	cmp	r3, #0
   2eacc:	beq	2eadc <flatcc_json_parser_space_ext@@Base+0x128>
   2ead0:	mov	r1, r2
   2ead4:	mov	r0, r1
   2ead8:	pop	{pc}		; (ldr pc, [sp], #4)
   2eadc:	ldr	r3, [r0, #4]
   2eae0:	str	r1, [r0, #32]
   2eae4:	sub	r3, r1, r3
   2eae8:	mov	ip, #5
   2eaec:	add	r3, r3, #1
   2eaf0:	mov	r1, r2
   2eaf4:	str	r3, [r0, #16]
   2eaf8:	str	ip, [r0, #20]
   2eafc:	mov	r0, r1
   2eb00:	pop	{pc}		; (ldr pc, [sp], #4)

0002eb04 <flatcc_json_parser_string_escape@@Base>:
   2eb04:	push	{r4, r5, lr}
   2eb08:	sub	lr, r2, r1
   2eb0c:	cmp	lr, #1
   2eb10:	mov	ip, r0
   2eb14:	ble	2eb24 <flatcc_json_parser_string_escape@@Base+0x20>
   2eb18:	ldrb	r0, [r1]
   2eb1c:	cmp	r0, #92	; 0x5c
   2eb20:	beq	2eb64 <flatcc_json_parser_string_escape@@Base+0x60>
   2eb24:	mov	r0, #0
   2eb28:	strb	r0, [r3]
   2eb2c:	ldr	r3, [ip, #20]
   2eb30:	cmp	r3, r0
   2eb34:	beq	2eb40 <flatcc_json_parser_string_escape@@Base+0x3c>
   2eb38:	mov	r0, r2
   2eb3c:	pop	{r4, r5, pc}
   2eb40:	ldr	r3, [ip, #4]
   2eb44:	mov	lr, #18
   2eb48:	sub	r3, r1, r3
   2eb4c:	add	r3, r3, #1
   2eb50:	str	r1, [ip, #32]
   2eb54:	mov	r0, r2
   2eb58:	str	r3, [ip, #16]
   2eb5c:	str	lr, [ip, #20]
   2eb60:	pop	{r4, r5, pc}
   2eb64:	ldrb	r0, [r1, #1]
   2eb68:	sub	r0, r0, #34	; 0x22
   2eb6c:	cmp	r0, #86	; 0x56
   2eb70:	ldrls	pc, [pc, r0, lsl #2]
   2eb74:	b	2eef0 <flatcc_json_parser_string_escape@@Base+0x3ec>
   2eb78:	andeq	lr, r2, ip, asr sp
   2eb7c:	strdeq	lr, [r2], -r0
   2eb80:	strdeq	lr, [r2], -r0
   2eb84:	strdeq	lr, [r2], -r0
   2eb88:	strdeq	lr, [r2], -r0
   2eb8c:	strdeq	lr, [r2], -r0
   2eb90:	strdeq	lr, [r2], -r0
   2eb94:	strdeq	lr, [r2], -r0
   2eb98:	strdeq	lr, [r2], -r0
   2eb9c:	strdeq	lr, [r2], -r0
   2eba0:	strdeq	lr, [r2], -r0
   2eba4:	strdeq	lr, [r2], -r0
   2eba8:	strdeq	lr, [r2], -r0
   2ebac:	andeq	lr, r2, r4, ror sp
   2ebb0:	strdeq	lr, [r2], -r0
   2ebb4:	strdeq	lr, [r2], -r0
   2ebb8:	strdeq	lr, [r2], -r0
   2ebbc:	strdeq	lr, [r2], -r0
   2ebc0:	strdeq	lr, [r2], -r0
   2ebc4:	strdeq	lr, [r2], -r0
   2ebc8:	strdeq	lr, [r2], -r0
   2ebcc:	strdeq	lr, [r2], -r0
   2ebd0:	strdeq	lr, [r2], -r0
   2ebd4:	strdeq	lr, [r2], -r0
   2ebd8:	strdeq	lr, [r2], -r0
   2ebdc:	strdeq	lr, [r2], -r0
   2ebe0:	strdeq	lr, [r2], -r0
   2ebe4:	strdeq	lr, [r2], -r0
   2ebe8:	strdeq	lr, [r2], -r0
   2ebec:	strdeq	lr, [r2], -r0
   2ebf0:	strdeq	lr, [r2], -r0
   2ebf4:	strdeq	lr, [r2], -r0
   2ebf8:	strdeq	lr, [r2], -r0
   2ebfc:	strdeq	lr, [r2], -r0
   2ec00:	strdeq	lr, [r2], -r0
   2ec04:	strdeq	lr, [r2], -r0
   2ec08:	strdeq	lr, [r2], -r0
   2ec0c:	strdeq	lr, [r2], -r0
   2ec10:	strdeq	lr, [r2], -r0
   2ec14:	strdeq	lr, [r2], -r0
   2ec18:	strdeq	lr, [r2], -r0
   2ec1c:	strdeq	lr, [r2], -r0
   2ec20:	strdeq	lr, [r2], -r0
   2ec24:	strdeq	lr, [r2], -r0
   2ec28:	strdeq	lr, [r2], -r0
   2ec2c:	strdeq	lr, [r2], -r0
   2ec30:	strdeq	lr, [r2], -r0
   2ec34:	strdeq	lr, [r2], -r0
   2ec38:	strdeq	lr, [r2], -r0
   2ec3c:	strdeq	lr, [r2], -r0
   2ec40:	strdeq	lr, [r2], -r0
   2ec44:	strdeq	lr, [r2], -r0
   2ec48:	strdeq	lr, [r2], -r0
   2ec4c:	strdeq	lr, [r2], -r0
   2ec50:	strdeq	lr, [r2], -r0
   2ec54:	strdeq	lr, [r2], -r0
   2ec58:	strdeq	lr, [r2], -r0
   2ec5c:	strdeq	lr, [r2], -r0
   2ec60:	andeq	lr, r2, ip, lsl #27
   2ec64:	strdeq	lr, [r2], -r0
   2ec68:	strdeq	lr, [r2], -r0
   2ec6c:	strdeq	lr, [r2], -r0
   2ec70:	strdeq	lr, [r2], -r0
   2ec74:	strdeq	lr, [r2], -r0
   2ec78:	andeq	lr, r2, r4, lsr #27
   2ec7c:	strdeq	lr, [r2], -r0
   2ec80:	strdeq	lr, [r2], -r0
   2ec84:	strdeq	lr, [r2], -r0
   2ec88:			; <UNDEFINED> instruction: 0x0002edbc
   2ec8c:	strdeq	lr, [r2], -r0
   2ec90:	strdeq	lr, [r2], -r0
   2ec94:	strdeq	lr, [r2], -r0
   2ec98:	strdeq	lr, [r2], -r0
   2ec9c:	strdeq	lr, [r2], -r0
   2eca0:	strdeq	lr, [r2], -r0
   2eca4:	strdeq	lr, [r2], -r0
   2eca8:	ldrdeq	lr, [r2], -r4
   2ecac:	strdeq	lr, [r2], -r0
   2ecb0:	strdeq	lr, [r2], -r0
   2ecb4:	strdeq	lr, [r2], -r0
   2ecb8:	andeq	lr, r2, ip, ror #27
   2ecbc:	strdeq	lr, [r2], -r0
   2ecc0:	andeq	lr, r2, r4, lsl #28
   2ecc4:	andeq	lr, r2, ip, lsl lr
   2ecc8:	strdeq	lr, [r2], -r0
   2eccc:	strdeq	lr, [r2], -r0
   2ecd0:	ldrdeq	lr, [r2], -r4
   2ecd4:	mov	r0, #1
   2ecd8:	cmp	lr, #3
   2ecdc:	strb	r0, [r3]
   2ece0:	ble	2eb24 <flatcc_json_parser_string_escape@@Base+0x20>
   2ece4:	ldrb	r0, [r1, #2]
   2ece8:	sub	lr, r0, #48	; 0x30
   2ecec:	uxtb	r4, lr
   2ecf0:	cmp	r4, #9
   2ecf4:	lslls	r0, lr, #4
   2ecf8:	uxtbls	r0, r0
   2ecfc:	bls	2ed1c <flatcc_json_parser_string_escape@@Base+0x218>
   2ed00:	orr	r0, r0, #32
   2ed04:	sub	lr, r0, #97	; 0x61
   2ed08:	cmp	lr, #5
   2ed0c:	bhi	2eb24 <flatcc_json_parser_string_escape@@Base+0x20>
   2ed10:	sub	r0, r0, #87	; 0x57
   2ed14:	lsl	r0, r0, #4
   2ed18:	uxtb	r0, r0
   2ed1c:	ldrb	lr, [r1, #3]
   2ed20:	sub	r4, lr, #48	; 0x30
   2ed24:	uxtb	r4, r4
   2ed28:	cmp	r4, #9
   2ed2c:	orrls	r0, r4, r0
   2ed30:	bls	2ed50 <flatcc_json_parser_string_escape@@Base+0x24c>
   2ed34:	orr	lr, lr, #32
   2ed38:	sub	r4, lr, #97	; 0x61
   2ed3c:	cmp	r4, #5
   2ed40:	bhi	2eb24 <flatcc_json_parser_string_escape@@Base+0x20>
   2ed44:	sub	lr, lr, #87	; 0x57
   2ed48:	orr	r0, lr, r0
   2ed4c:	uxtb	r0, r0
   2ed50:	strb	r0, [r3, #1]
   2ed54:	add	r0, r1, #4
   2ed58:	pop	{r4, r5, pc}
   2ed5c:	mov	ip, #1
   2ed60:	mov	r2, #34	; 0x22
   2ed64:	add	r0, r1, #2
   2ed68:	strb	ip, [r3]
   2ed6c:	strb	r2, [r3, #1]
   2ed70:	pop	{r4, r5, pc}
   2ed74:	mov	ip, #1
   2ed78:	mov	r2, #47	; 0x2f
   2ed7c:	add	r0, r1, #2
   2ed80:	strb	ip, [r3]
   2ed84:	strb	r2, [r3, #1]
   2ed88:	pop	{r4, r5, pc}
   2ed8c:	mov	ip, #1
   2ed90:	mov	r2, #92	; 0x5c
   2ed94:	add	r0, r1, #2
   2ed98:	strb	ip, [r3]
   2ed9c:	strb	r2, [r3, #1]
   2eda0:	pop	{r4, r5, pc}
   2eda4:	mov	ip, #1
   2eda8:	mov	r2, #8
   2edac:	add	r0, r1, #2
   2edb0:	strb	ip, [r3]
   2edb4:	strb	r2, [r3, #1]
   2edb8:	pop	{r4, r5, pc}
   2edbc:	mov	ip, #1
   2edc0:	mov	r2, #12
   2edc4:	add	r0, r1, #2
   2edc8:	strb	ip, [r3]
   2edcc:	strb	r2, [r3, #1]
   2edd0:	pop	{r4, r5, pc}
   2edd4:	mov	ip, #1
   2edd8:	mov	r2, #10
   2eddc:	add	r0, r1, #2
   2ede0:	strb	ip, [r3]
   2ede4:	strb	r2, [r3, #1]
   2ede8:	pop	{r4, r5, pc}
   2edec:	mov	ip, #1
   2edf0:	mov	r2, #13
   2edf4:	add	r0, r1, #2
   2edf8:	strb	ip, [r3]
   2edfc:	strb	r2, [r3, #1]
   2ee00:	pop	{r4, r5, pc}
   2ee04:	mov	ip, #1
   2ee08:	mov	r2, #9
   2ee0c:	add	r0, r1, #2
   2ee10:	strb	ip, [r3]
   2ee14:	strb	r2, [r3, #1]
   2ee18:	pop	{r4, r5, pc}
   2ee1c:	cmp	lr, #5
   2ee20:	ble	2eb24 <flatcc_json_parser_string_escape@@Base+0x20>
   2ee24:	ldrb	r0, [r1, #2]
   2ee28:	sub	lr, r0, #48	; 0x30
   2ee2c:	uxtb	r4, lr
   2ee30:	cmp	r4, #9
   2ee34:	lslls	r0, lr, #12
   2ee38:	uxthls	r0, r0
   2ee3c:	bls	2ee5c <flatcc_json_parser_string_escape@@Base+0x358>
   2ee40:	orr	r0, r0, #32
   2ee44:	sub	lr, r0, #97	; 0x61
   2ee48:	cmp	lr, #5
   2ee4c:	bhi	2eb24 <flatcc_json_parser_string_escape@@Base+0x20>
   2ee50:	sub	r0, r0, #87	; 0x57
   2ee54:	lsl	r0, r0, #12
   2ee58:	and	r0, r0, #61440	; 0xf000
   2ee5c:	ldrb	lr, [r1, #3]
   2ee60:	sub	r4, lr, #48	; 0x30
   2ee64:	uxtb	r5, r4
   2ee68:	cmp	r5, #9
   2ee6c:	bhi	2ef28 <flatcc_json_parser_string_escape@@Base+0x424>
   2ee70:	uxth	r4, r4
   2ee74:	orr	r0, r0, r4, lsl #8
   2ee78:	and	r0, r0, #65280	; 0xff00
   2ee7c:	ldrb	lr, [r1, #4]
   2ee80:	sub	r4, lr, #48	; 0x30
   2ee84:	uxtb	r5, r4
   2ee88:	cmp	r5, #9
   2ee8c:	bhi	2ef4c <flatcc_json_parser_string_escape@@Base+0x448>
   2ee90:	uxth	r4, r4
   2ee94:	orr	r0, r0, r4, lsl #4
   2ee98:	uxth	r0, r0
   2ee9c:	ldrb	lr, [r1, #5]
   2eea0:	sub	r4, lr, #48	; 0x30
   2eea4:	uxtb	r5, r4
   2eea8:	cmp	r5, #9
   2eeac:	orrls	r2, r0, r4
   2eeb0:	uxthls	r2, r2
   2eeb4:	bls	2eed4 <flatcc_json_parser_string_escape@@Base+0x3d0>
   2eeb8:	orr	lr, lr, #32
   2eebc:	sub	r4, lr, #97	; 0x61
   2eec0:	cmp	r4, #5
   2eec4:	bhi	2eb24 <flatcc_json_parser_string_escape@@Base+0x20>
   2eec8:	sub	r2, lr, #87	; 0x57
   2eecc:	orr	r2, r0, r2
   2eed0:	uxth	r2, r2
   2eed4:	cmp	r2, #127	; 0x7f
   2eed8:	bhi	2ef70 <flatcc_json_parser_string_escape@@Base+0x46c>
   2eedc:	mov	r0, #1
   2eee0:	strb	r2, [r3, #1]
   2eee4:	strb	r0, [r3]
   2eee8:	add	r0, r1, #6
   2eeec:	pop	{r4, r5, pc}
   2eef0:	mov	r0, #0
   2eef4:	strb	r0, [r3]
   2eef8:	ldr	r3, [ip, #20]
   2eefc:	cmp	r3, r0
   2ef00:	bne	2eb38 <flatcc_json_parser_string_escape@@Base+0x34>
   2ef04:	ldr	r3, [ip, #4]
   2ef08:	mov	r0, r2
   2ef0c:	sub	r3, r1, r3
   2ef10:	add	r3, r3, #1
   2ef14:	mov	r2, #18
   2ef18:	str	r1, [ip, #32]
   2ef1c:	str	r3, [ip, #16]
   2ef20:	str	r2, [ip, #20]
   2ef24:	pop	{r4, r5, pc}
   2ef28:	orr	lr, lr, #32
   2ef2c:	sub	r4, lr, #97	; 0x61
   2ef30:	cmp	r4, #5
   2ef34:	bhi	2eb24 <flatcc_json_parser_string_escape@@Base+0x20>
   2ef38:	sub	lr, lr, #87	; 0x57
   2ef3c:	uxth	lr, lr
   2ef40:	orr	r0, r0, lr, lsl #8
   2ef44:	and	r0, r0, #65280	; 0xff00
   2ef48:	b	2ee7c <flatcc_json_parser_string_escape@@Base+0x378>
   2ef4c:	orr	lr, lr, #32
   2ef50:	sub	r4, lr, #97	; 0x61
   2ef54:	cmp	r4, #5
   2ef58:	bhi	2eb24 <flatcc_json_parser_string_escape@@Base+0x20>
   2ef5c:	sub	lr, lr, #87	; 0x57
   2ef60:	uxth	lr, lr
   2ef64:	orr	r0, r0, lr, lsl #4
   2ef68:	uxth	r0, r0
   2ef6c:	b	2ee9c <flatcc_json_parser_string_escape@@Base+0x398>
   2ef70:	cmp	r2, #2048	; 0x800
   2ef74:	bcs	2efa0 <flatcc_json_parser_string_escape@@Base+0x49c>
   2ef78:	and	r0, r2, #63	; 0x3f
   2ef7c:	mvn	ip, #63	; 0x3f
   2ef80:	mvn	r0, r0, lsl #25
   2ef84:	orr	r2, ip, r2, lsr #6
   2ef88:	mvn	r0, r0, lsr #25
   2ef8c:	mov	ip, #2
   2ef90:	strb	r0, [r3, #2]
   2ef94:	strb	r2, [r3, #1]
   2ef98:	strb	ip, [r3]
   2ef9c:	b	2eee8 <flatcc_json_parser_string_escape@@Base+0x3e4>
   2efa0:	lsl	lr, r2, #20
   2efa4:	mvn	r4, #127	; 0x7f
   2efa8:	and	ip, r2, #63	; 0x3f
   2efac:	mvn	r0, #31
   2efb0:	orr	r2, r0, r2, lsr #12
   2efb4:	orr	lr, r4, lr, lsr #26
   2efb8:	orr	ip, ip, r4
   2efbc:	mov	r0, #3
   2efc0:	strb	lr, [r3, #2]
   2efc4:	strb	ip, [r3, #3]
   2efc8:	strb	r2, [r3, #1]
   2efcc:	strb	r0, [r3]
   2efd0:	b	2eee8 <flatcc_json_parser_string_escape@@Base+0x3e4>

0002efd4 <flatcc_json_parser_skip_constant@@Base>:
   2efd4:	cmp	r1, r2
   2efd8:	beq	2f1b8 <flatcc_json_parser_skip_constant@@Base+0x1e4>
   2efdc:	push	{r4, lr}
   2efe0:	mov	r4, r0
   2efe4:	ldrb	r3, [r1]
   2efe8:	b	2f000 <flatcc_json_parser_skip_constant@@Base+0x2c>
   2efec:	add	ip, r1, #1
   2eff0:	cmp	r2, ip
   2eff4:	beq	2f174 <flatcc_json_parser_skip_constant@@Base+0x1a0>
   2eff8:	ldrb	r3, [r1, #1]
   2effc:	mov	r1, ip
   2f000:	sub	ip, r3, #95	; 0x5f
   2f004:	clz	ip, ip
   2f008:	lsr	ip, ip, #5
   2f00c:	orrs	r0, ip, r3, lsr #7
   2f010:	bne	2efec <flatcc_json_parser_skip_constant@@Base+0x18>
   2f014:	sub	ip, r3, #48	; 0x30
   2f018:	cmp	r3, #46	; 0x2e
   2f01c:	cmpne	ip, #9
   2f020:	movls	lr, #1
   2f024:	movhi	lr, #0
   2f028:	bls	2efec <flatcc_json_parser_skip_constant@@Base+0x18>
   2f02c:	orr	ip, r3, #32
   2f030:	sub	ip, ip, #97	; 0x61
   2f034:	cmp	ip, #25
   2f038:	bls	2efec <flatcc_json_parser_skip_constant@@Base+0x18>
   2f03c:	sub	r0, r2, r1
   2f040:	cmp	r0, #1
   2f044:	ble	2f054 <flatcc_json_parser_skip_constant@@Base+0x80>
   2f048:	cmp	r3, #32
   2f04c:	bhi	2f17c <flatcc_json_parser_skip_constant@@Base+0x1a8>
   2f050:	beq	2f184 <flatcc_json_parser_skip_constant@@Base+0x1b0>
   2f054:	mov	r0, r1
   2f058:	cmp	r2, r0
   2f05c:	popeq	{r4, pc}
   2f060:	ldrb	r3, [r0]
   2f064:	cmp	r3, #32
   2f068:	bne	2f088 <flatcc_json_parser_skip_constant@@Base+0xb4>
   2f06c:	add	ip, r0, #1
   2f070:	cmp	ip, r2
   2f074:	mov	r0, ip
   2f078:	popeq	{r4, pc}
   2f07c:	ldrb	r3, [ip], #1
   2f080:	cmp	r3, #32
   2f084:	beq	2f070 <flatcc_json_parser_skip_constant@@Base+0x9c>
   2f088:	cmp	r3, #32
   2f08c:	bhi	2f148 <flatcc_json_parser_skip_constant@@Base+0x174>
   2f090:	sub	r3, r3, #9
   2f094:	cmp	r3, #23
   2f098:	ldrls	pc, [pc, r3, lsl #2]
   2f09c:	b	2f168 <flatcc_json_parser_skip_constant@@Base+0x194>
   2f0a0:	andeq	pc, r2, r8, asr r1	; <UNPREDICTABLE>
   2f0a4:	andeq	pc, r2, r0, lsr #2
   2f0a8:	andeq	pc, r2, r8, ror #2
   2f0ac:	andeq	pc, r2, r8, ror #2
   2f0b0:	andeq	pc, r2, r0, lsl #2
   2f0b4:	andeq	pc, r2, r8, ror #2
   2f0b8:	andeq	pc, r2, r8, ror #2
   2f0bc:	andeq	pc, r2, r8, ror #2
   2f0c0:	andeq	pc, r2, r8, ror #2
   2f0c4:	andeq	pc, r2, r8, ror #2
   2f0c8:	andeq	pc, r2, r8, ror #2
   2f0cc:	andeq	pc, r2, r8, ror #2
   2f0d0:	andeq	pc, r2, r8, ror #2
   2f0d4:	andeq	pc, r2, r8, ror #2
   2f0d8:	andeq	pc, r2, r8, ror #2
   2f0dc:	andeq	pc, r2, r8, ror #2
   2f0e0:	andeq	pc, r2, r8, ror #2
   2f0e4:	andeq	pc, r2, r8, ror #2
   2f0e8:	andeq	pc, r2, r8, ror #2
   2f0ec:	andeq	pc, r2, r8, ror #2
   2f0f0:	andeq	pc, r2, r8, ror #2
   2f0f4:	andeq	pc, r2, r8, ror #2
   2f0f8:	andeq	pc, r2, r8, ror #2
   2f0fc:	andeq	pc, r2, r8, asr r0	; <UNPREDICTABLE>
   2f100:	sub	r3, r2, r0
   2f104:	cmp	r3, #1
   2f108:	movle	r3, lr
   2f10c:	ldrbgt	r3, [r0, #1]
   2f110:	subgt	r3, r3, #10
   2f114:	clzgt	r3, r3
   2f118:	lsrgt	r3, r3, #5
   2f11c:	add	r0, r0, r3
   2f120:	ldr	r3, [r4, #12]
   2f124:	add	r0, r0, #1
   2f128:	cmp	r2, r0
   2f12c:	add	r3, r3, #1
   2f130:	str	r0, [r4, #4]
   2f134:	str	r3, [r4, #12]
   2f138:	popeq	{r4, pc}
   2f13c:	ldrb	r3, [r0]
   2f140:	cmp	r3, #32
   2f144:	bls	2f090 <flatcc_json_parser_skip_constant@@Base+0xbc>
   2f148:	cmp	r0, r1
   2f14c:	popeq	{r4, pc}
   2f150:	mov	r1, r0
   2f154:	b	2f000 <flatcc_json_parser_skip_constant@@Base+0x2c>
   2f158:	add	r0, r0, #1
   2f15c:	cmp	r2, r0
   2f160:	bne	2f13c <flatcc_json_parser_skip_constant@@Base+0x168>
   2f164:	pop	{r4, pc}
   2f168:	ldr	r3, [r4, #20]
   2f16c:	cmp	r3, #0
   2f170:	beq	2f194 <flatcc_json_parser_skip_constant@@Base+0x1c0>
   2f174:	mov	r0, r2
   2f178:	pop	{r4, pc}
   2f17c:	mov	r0, r1
   2f180:	pop	{r4, pc}
   2f184:	ldrb	r3, [r1, #1]
   2f188:	cmp	r3, #32
   2f18c:	bls	2f054 <flatcc_json_parser_skip_constant@@Base+0x80>
   2f190:	b	2efec <flatcc_json_parser_skip_constant@@Base+0x18>
   2f194:	ldr	r3, [r4, #4]
   2f198:	mov	r1, #5
   2f19c:	sub	r3, r0, r3
   2f1a0:	add	r3, r3, #1
   2f1a4:	str	r0, [r4, #32]
   2f1a8:	str	r3, [r4, #16]
   2f1ac:	mov	r0, r2
   2f1b0:	str	r1, [r4, #20]
   2f1b4:	pop	{r4, pc}
   2f1b8:	mov	r0, r1
   2f1bc:	bx	lr

0002f1c0 <flatcc_json_parser_match_constant@@Base>:
   2f1c0:	sub	ip, r2, r1
   2f1c4:	push	{r4, lr}
   2f1c8:	cmp	r3, ip
   2f1cc:	ldr	r4, [sp, #8]
   2f1d0:	bge	2f1f4 <flatcc_json_parser_match_constant@@Base+0x34>
   2f1d4:	ldrb	ip, [r1, r3]
   2f1d8:	add	r3, r1, r3
   2f1dc:	cmp	ip, #32
   2f1e0:	beq	2f204 <flatcc_json_parser_match_constant@@Base+0x44>
   2f1e4:	cmp	ip, #34	; 0x22
   2f1e8:	beq	2f288 <flatcc_json_parser_match_constant@@Base+0xc8>
   2f1ec:	cmp	ip, #92	; 0x5c
   2f1f0:	beq	2f24c <flatcc_json_parser_match_constant@@Base+0x8c>
   2f1f4:	mov	r3, #0
   2f1f8:	str	r3, [r4]
   2f1fc:	mov	r0, r1
   2f200:	pop	{r4, pc}
   2f204:	add	r1, r3, #1
   2f208:	cmp	r2, r1
   2f20c:	beq	2f400 <flatcc_json_parser_match_constant@@Base+0x240>
   2f210:	ldrb	lr, [r3, #1]
   2f214:	cmp	lr, #32
   2f218:	bne	2f3d0 <flatcc_json_parser_match_constant@@Base+0x210>
   2f21c:	add	ip, r3, #2
   2f220:	b	2f230 <flatcc_json_parser_match_constant@@Base+0x70>
   2f224:	ldrb	lr, [ip], #1
   2f228:	cmp	lr, #32
   2f22c:	bne	2f3d4 <flatcc_json_parser_match_constant@@Base+0x214>
   2f230:	cmp	r2, ip
   2f234:	mov	r3, ip
   2f238:	bne	2f224 <flatcc_json_parser_match_constant@@Base+0x64>
   2f23c:	mov	r2, #0
   2f240:	mov	r1, r3
   2f244:	str	r2, [r4]
   2f248:	b	2f1fc <flatcc_json_parser_match_constant@@Base+0x3c>
   2f24c:	mov	r1, #0
   2f250:	str	r1, [r4]
   2f254:	ldr	r1, [r0, #20]
   2f258:	cmp	r1, #0
   2f25c:	movne	r1, r2
   2f260:	bne	2f1fc <flatcc_json_parser_match_constant@@Base+0x3c>
   2f264:	ldr	ip, [r0, #4]
   2f268:	mov	lr, #18
   2f26c:	sub	ip, r3, ip
   2f270:	add	ip, ip, #1
   2f274:	str	r3, [r0, #32]
   2f278:	mov	r1, r2
   2f27c:	str	ip, [r0, #16]
   2f280:	str	lr, [r0, #20]
   2f284:	b	2f1fc <flatcc_json_parser_match_constant@@Base+0x3c>
   2f288:	add	r1, r3, #1
   2f28c:	cmn	r1, #1
   2f290:	bge	2f2a4 <flatcc_json_parser_match_constant@@Base+0xe4>
   2f294:	ldrb	r2, [r3, #1]
   2f298:	cmp	r2, #32
   2f29c:	bhi	2f1f4 <flatcc_json_parser_match_constant@@Base+0x34>
   2f2a0:	beq	2f3ec <flatcc_json_parser_match_constant@@Base+0x22c>
   2f2a4:	mov	ip, #0
   2f2a8:	cmp	r1, #0
   2f2ac:	beq	2f2dc <flatcc_json_parser_match_constant@@Base+0x11c>
   2f2b0:	ldrb	r2, [r1]
   2f2b4:	cmp	r2, #32
   2f2b8:	bne	2f320 <flatcc_json_parser_match_constant@@Base+0x160>
   2f2bc:	add	r3, r1, #1
   2f2c0:	b	2f2d0 <flatcc_json_parser_match_constant@@Base+0x110>
   2f2c4:	ldrb	r2, [r3], #1
   2f2c8:	cmp	r2, #32
   2f2cc:	bne	2f320 <flatcc_json_parser_match_constant@@Base+0x160>
   2f2d0:	cmp	r3, #0
   2f2d4:	mov	r1, r3
   2f2d8:	bne	2f2c4 <flatcc_json_parser_match_constant@@Base+0x104>
   2f2dc:	mov	r1, #0
   2f2e0:	b	2f1f4 <flatcc_json_parser_match_constant@@Base+0x34>
   2f2e4:	cmn	r1, #1
   2f2e8:	movge	r3, ip
   2f2ec:	ldrblt	r3, [r1, #1]
   2f2f0:	sublt	r3, r3, #10
   2f2f4:	clzlt	r3, r3
   2f2f8:	lsrlt	r3, r3, #5
   2f2fc:	add	r1, r1, r3
   2f300:	ldr	r3, [r0, #12]
   2f304:	add	r1, r1, #1
   2f308:	add	r3, r3, #1
   2f30c:	str	r1, [r0, #4]
   2f310:	str	r3, [r0, #12]
   2f314:	cmp	r1, #0
   2f318:	beq	2f2dc <flatcc_json_parser_match_constant@@Base+0x11c>
   2f31c:	ldrb	r2, [r1]
   2f320:	cmp	r2, #32
   2f324:	bhi	2f1f4 <flatcc_json_parser_match_constant@@Base+0x34>
   2f328:	sub	r2, r2, #9
   2f32c:	cmp	r2, #23
   2f330:	ldrls	pc, [pc, r2, lsl #2]
   2f334:	b	2f3a0 <flatcc_json_parser_match_constant@@Base+0x1e0>
   2f338:	muleq	r2, r8, r3
   2f33c:	andeq	pc, r2, r0, lsl #6
   2f340:	andeq	pc, r2, r0, lsr #7
   2f344:	andeq	pc, r2, r0, lsr #7
   2f348:	andeq	pc, r2, r4, ror #5
   2f34c:	andeq	pc, r2, r0, lsr #7
   2f350:	andeq	pc, r2, r0, lsr #7
   2f354:	andeq	pc, r2, r0, lsr #7
   2f358:	andeq	pc, r2, r0, lsr #7
   2f35c:	andeq	pc, r2, r0, lsr #7
   2f360:	andeq	pc, r2, r0, lsr #7
   2f364:	andeq	pc, r2, r0, lsr #7
   2f368:	andeq	pc, r2, r0, lsr #7
   2f36c:	andeq	pc, r2, r0, lsr #7
   2f370:	andeq	pc, r2, r0, lsr #7
   2f374:	andeq	pc, r2, r0, lsr #7
   2f378:	andeq	pc, r2, r0, lsr #7
   2f37c:	andeq	pc, r2, r0, lsr #7
   2f380:	andeq	pc, r2, r0, lsr #7
   2f384:	andeq	pc, r2, r0, lsr #7
   2f388:	andeq	pc, r2, r0, lsr #7
   2f38c:	andeq	pc, r2, r0, lsr #7
   2f390:	andeq	pc, r2, r0, lsr #7
   2f394:	andeq	pc, r2, r8, lsr #5
   2f398:	add	r1, r1, #1
   2f39c:	b	2f314 <flatcc_json_parser_match_constant@@Base+0x154>
   2f3a0:	ldr	r3, [r0, #20]
   2f3a4:	cmp	r3, #0
   2f3a8:	bne	2f2dc <flatcc_json_parser_match_constant@@Base+0x11c>
   2f3ac:	ldr	r2, [r0, #4]
   2f3b0:	mov	ip, #5
   2f3b4:	sub	r2, r1, r2
   2f3b8:	add	r2, r2, #1
   2f3bc:	str	r1, [r0, #32]
   2f3c0:	str	r2, [r0, #16]
   2f3c4:	mov	r1, r3
   2f3c8:	str	ip, [r0, #20]
   2f3cc:	b	2f1f4 <flatcc_json_parser_match_constant@@Base+0x34>
   2f3d0:	mov	r3, r1
   2f3d4:	cmp	lr, #34	; 0x22
   2f3d8:	beq	2f288 <flatcc_json_parser_match_constant@@Base+0xc8>
   2f3dc:	mov	r2, #1
   2f3e0:	mov	r1, r3
   2f3e4:	str	r2, [r4]
   2f3e8:	b	2f1fc <flatcc_json_parser_match_constant@@Base+0x3c>
   2f3ec:	ldrb	r2, [r3, #2]
   2f3f0:	cmp	r2, #32
   2f3f4:	addhi	r1, r3, #2
   2f3f8:	bls	2f2a4 <flatcc_json_parser_match_constant@@Base+0xe4>
   2f3fc:	b	2f1f4 <flatcc_json_parser_match_constant@@Base+0x34>
   2f400:	mov	r3, r2
   2f404:	b	2f23c <flatcc_json_parser_match_constant@@Base+0x7c>

0002f408 <flatcc_json_parser_double@@Base>:
   2f408:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f40c:	mov	r8, #0
   2f410:	mov	r9, #0
   2f414:	cmp	r1, r2
   2f418:	mov	r5, r2
   2f41c:	strd	r8, [r3]
   2f420:	beq	2f4e4 <flatcc_json_parser_double@@Base+0xdc>
   2f424:	mov	r6, r3
   2f428:	ldrb	r3, [r1]
   2f42c:	mov	r4, r1
   2f430:	mov	r7, r0
   2f434:	cmp	r3, #45	; 0x2d
   2f438:	addeq	r3, r1, #1
   2f43c:	movne	r3, r1
   2f440:	sub	r2, r2, r3
   2f444:	cmp	r2, #1
   2f448:	ble	2f460 <flatcc_json_parser_double@@Base+0x58>
   2f44c:	ldrb	r2, [r3]
   2f450:	cmp	r2, #46	; 0x2e
   2f454:	beq	2f4d8 <flatcc_json_parser_double@@Base+0xd0>
   2f458:	cmp	r2, #48	; 0x30
   2f45c:	beq	2f4cc <flatcc_json_parser_double@@Base+0xc4>
   2f460:	mov	r2, r6
   2f464:	sub	r1, r5, r4
   2f468:	mov	r0, r4
   2f46c:	bl	2de94 <grisu3_diy_fp_encode_double@@Base+0x590>
   2f470:	cmp	r4, r0
   2f474:	cmpne	r0, #0
   2f478:	mov	r3, r0
   2f47c:	bne	2f4c4 <flatcc_json_parser_double@@Base+0xbc>
   2f480:	vldr	d7, [r6]
   2f484:	vldr	d6, [pc, #116]	; 2f500 <flatcc_json_parser_double@@Base+0xf8>
   2f488:	vabs.f64	d7, d7
   2f48c:	vcmp.f64	d7, d6
   2f490:	vmrs	APSR_nzcv, fpscr
   2f494:	ble	2f4d8 <flatcc_json_parser_double@@Base+0xd0>
   2f498:	ldr	r3, [r7, #20]
   2f49c:	cmp	r3, #0
   2f4a0:	bne	2f4e4 <flatcc_json_parser_double@@Base+0xdc>
   2f4a4:	ldr	r2, [r7, #4]
   2f4a8:	mov	r1, #7
   2f4ac:	sub	r2, r4, r2
   2f4b0:	mov	r3, r5
   2f4b4:	add	r2, r2, #1
   2f4b8:	str	r4, [r7, #32]
   2f4bc:	str	r2, [r7, #16]
   2f4c0:	str	r1, [r7, #20]
   2f4c4:	mov	r0, r3
   2f4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f4cc:	ldrb	r3, [r3, #1]
   2f4d0:	cmp	r3, #48	; 0x30
   2f4d4:	bne	2f460 <flatcc_json_parser_double@@Base+0x58>
   2f4d8:	ldr	r3, [r7, #20]
   2f4dc:	cmp	r3, #0
   2f4e0:	beq	2f4f0 <flatcc_json_parser_double@@Base+0xe8>
   2f4e4:	mov	r3, r5
   2f4e8:	mov	r0, r3
   2f4ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f4f0:	ldr	r2, [r7, #4]
   2f4f4:	mov	r1, #6
   2f4f8:	b	2f4ac <flatcc_json_parser_double@@Base+0xa4>
   2f4fc:	nop			; (mov r0, r0)
   2f500:			; <UNDEFINED> instruction: 0xffffffff
   2f504:	svcvc	0x00efffff

0002f508 <flatcc_json_parser_float@@Base>:
   2f508:	mov	ip, #0
   2f50c:	cmp	r1, r2
   2f510:	push	{r4, r5, r6, r7, lr}
   2f514:	mov	r5, r2
   2f518:	sub	sp, sp, #12
   2f51c:	str	ip, [r3]
   2f520:	beq	2f5b4 <flatcc_json_parser_float@@Base+0xac>
   2f524:	mov	r6, r3
   2f528:	ldrb	r3, [r1]
   2f52c:	mov	r4, r1
   2f530:	mov	r7, r0
   2f534:	cmp	r3, #45	; 0x2d
   2f538:	addeq	r3, r1, #1
   2f53c:	movne	r3, r1
   2f540:	sub	r2, r2, r3
   2f544:	cmp	r2, #1
   2f548:	ble	2f560 <flatcc_json_parser_float@@Base+0x58>
   2f54c:	ldrb	r2, [r3]
   2f550:	cmp	r2, #46	; 0x2e
   2f554:	beq	2f5cc <flatcc_json_parser_float@@Base+0xc4>
   2f558:	cmp	r2, #48	; 0x30
   2f55c:	beq	2f600 <flatcc_json_parser_float@@Base+0xf8>
   2f560:	mov	r2, sp
   2f564:	sub	r1, r5, r4
   2f568:	mov	r0, r4
   2f56c:	bl	2de94 <grisu3_diy_fp_encode_double@@Base+0x590>
   2f570:	vldr	d6, [sp]
   2f574:	vldr	s14, [pc, #160]	; 2f61c <flatcc_json_parser_float@@Base+0x114>
   2f578:	vcvt.f32.f64	s15, d6
   2f57c:	vabs.f32	s11, s15
   2f580:	vstr	s15, [r6]
   2f584:	vcmp.f32	s11, s14
   2f588:	vmrs	APSR_nzcv, fpscr
   2f58c:	ble	2f5c0 <flatcc_json_parser_float@@Base+0xb8>
   2f590:	vcmpe.f64	d6, #0.0
   2f594:	vldr	s15, [pc, #132]	; 2f620 <flatcc_json_parser_float@@Base+0x118>
   2f598:	vldr	s14, [pc, #132]	; 2f624 <flatcc_json_parser_float@@Base+0x11c>
   2f59c:	ldr	r3, [r7, #20]
   2f5a0:	vmrs	APSR_nzcv, fpscr
   2f5a4:	vmovpl.f32	s15, s14
   2f5a8:	cmp	r3, #0
   2f5ac:	vstr	s15, [r6]
   2f5b0:	beq	2f610 <flatcc_json_parser_float@@Base+0x108>
   2f5b4:	mov	r0, r5
   2f5b8:	add	sp, sp, #12
   2f5bc:	pop	{r4, r5, r6, r7, pc}
   2f5c0:	cmp	r4, r0
   2f5c4:	cmpne	r0, #0
   2f5c8:	bne	2f5b8 <flatcc_json_parser_float@@Base+0xb0>
   2f5cc:	ldr	r3, [r7, #20]
   2f5d0:	cmp	r3, #0
   2f5d4:	bne	2f5b4 <flatcc_json_parser_float@@Base+0xac>
   2f5d8:	ldr	r3, [r7, #4]
   2f5dc:	mov	r2, #6
   2f5e0:	sub	r3, r4, r3
   2f5e4:	add	r3, r3, #1
   2f5e8:	mov	r0, r5
   2f5ec:	str	r4, [r7, #32]
   2f5f0:	str	r3, [r7, #16]
   2f5f4:	str	r2, [r7, #20]
   2f5f8:	add	sp, sp, #12
   2f5fc:	pop	{r4, r5, r6, r7, pc}
   2f600:	ldrb	r3, [r3, #1]
   2f604:	cmp	r3, #48	; 0x30
   2f608:	bne	2f560 <flatcc_json_parser_float@@Base+0x58>
   2f60c:	b	2f5cc <flatcc_json_parser_float@@Base+0xc4>
   2f610:	ldr	r3, [r7, #4]
   2f614:	mov	r2, #7
   2f618:	b	2f5e0 <flatcc_json_parser_float@@Base+0xd8>
   2f61c:	svcvc	0x007fffff
   2f620:			; <UNDEFINED> instruction: 0xff800000
   2f624:	svcvc	0x00800000

0002f628 <flatcc_json_parser_generic_json@@Base>:
   2f628:	cmp	r1, r2
   2f62c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f630:	mov	r4, r2
   2f634:	sub	sp, sp, #532	; 0x214
   2f638:	beq	2f864 <flatcc_json_parser_generic_json@@Base+0x23c>
   2f63c:	ldrb	r3, [r1]
   2f640:	add	r7, sp, #16
   2f644:	mov	sl, r1
   2f648:	mov	r5, r0
   2f64c:	mov	r6, r7
   2f650:	mov	r9, #125	; 0x7d
   2f654:	mov	r8, #0
   2f658:	mov	fp, #93	; 0x5d
   2f65c:	cmp	r6, r7
   2f660:	beq	2fb94 <flatcc_json_parser_generic_json@@Base+0x56c>
   2f664:	ldrb	r2, [r6, #-1]
   2f668:	cmp	r2, #125	; 0x7d
   2f66c:	beq	2fb18 <flatcc_json_parser_generic_json@@Base+0x4f0>
   2f670:	sub	r2, r3, #34	; 0x22
   2f674:	cmp	r2, #89	; 0x59
   2f678:	ldrls	pc, [pc, r2, lsl #2]
   2f67c:	b	2fac8 <flatcc_json_parser_generic_json@@Base+0x4a0>
   2f680:	andeq	r0, r3, r8, ror #5
   2f684:	andeq	pc, r2, r8, asr #21
   2f688:	andeq	pc, r2, r8, asr #21
   2f68c:	andeq	pc, r2, r8, asr #21
   2f690:	andeq	pc, r2, r8, asr #21
   2f694:	andeq	pc, r2, r8, asr #21
   2f698:	andeq	pc, r2, r8, asr #21
   2f69c:	andeq	pc, r2, r8, asr #21
   2f6a0:	andeq	pc, r2, r8, asr #21
   2f6a4:	andeq	pc, r2, r8, asr #21
   2f6a8:	andeq	pc, r2, r8, asr #21
   2f6ac:	andeq	pc, r2, ip, ror #15
   2f6b0:	andeq	pc, r2, r8, asr #21
   2f6b4:	andeq	pc, r2, r8, asr #21
   2f6b8:	andeq	pc, r2, ip, ror #15
   2f6bc:	andeq	pc, r2, ip, ror #15
   2f6c0:	andeq	pc, r2, ip, ror #15
   2f6c4:	andeq	pc, r2, ip, ror #15
   2f6c8:	andeq	pc, r2, ip, ror #15
   2f6cc:	andeq	pc, r2, ip, ror #15
   2f6d0:	andeq	pc, r2, ip, ror #15
   2f6d4:	andeq	pc, r2, ip, ror #15
   2f6d8:	andeq	pc, r2, ip, ror #15
   2f6dc:	andeq	pc, r2, ip, ror #15
   2f6e0:	andeq	pc, r2, r8, asr #21
   2f6e4:	andeq	pc, r2, r8, asr #21
   2f6e8:	andeq	pc, r2, r8, asr #21
   2f6ec:	andeq	pc, r2, r8, asr #21
   2f6f0:	andeq	pc, r2, r8, asr #21
   2f6f4:	andeq	pc, r2, r8, asr #21
   2f6f8:	andeq	pc, r2, r8, asr #21
   2f6fc:	andeq	pc, r2, r8, asr #21
   2f700:	andeq	pc, r2, r8, asr #21
   2f704:	andeq	pc, r2, r8, asr #21
   2f708:	andeq	pc, r2, r8, asr #21
   2f70c:	andeq	pc, r2, r8, asr #21
   2f710:	andeq	pc, r2, r8, asr #21
   2f714:	andeq	pc, r2, r8, asr #21
   2f718:	andeq	pc, r2, r8, asr #21
   2f71c:	andeq	pc, r2, r8, asr #21
   2f720:	andeq	pc, r2, r8, asr #21
   2f724:	andeq	pc, r2, r8, asr #21
   2f728:	andeq	pc, r2, r8, asr #21
   2f72c:	andeq	pc, r2, r8, asr #21
   2f730:	andeq	pc, r2, r8, asr #21
   2f734:	andeq	pc, r2, r8, asr #21
   2f738:	andeq	pc, r2, r8, asr #21
   2f73c:	andeq	pc, r2, r8, asr #21
   2f740:	andeq	pc, r2, r8, asr #21
   2f744:	andeq	pc, r2, r8, asr #21
   2f748:	andeq	pc, r2, r8, asr #21
   2f74c:	andeq	pc, r2, r8, asr #21
   2f750:	andeq	pc, r2, r8, asr #21
   2f754:	andeq	pc, r2, r8, asr #21
   2f758:	andeq	pc, r2, r8, asr #21
   2f75c:	andeq	pc, r2, r8, asr #21
   2f760:	andeq	pc, r2, r8, asr #21
   2f764:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   2f768:	andeq	pc, r2, r8, asr #21
   2f76c:	andeq	pc, r2, r8, asr #21
   2f770:	andeq	pc, r2, r8, asr #21
   2f774:	andeq	pc, r2, r8, asr #21
   2f778:	andeq	pc, r2, r8, asr #21
   2f77c:	andeq	pc, r2, r8, asr #21
   2f780:	andeq	pc, r2, r8, asr #21
   2f784:	andeq	pc, r2, r8, asr #21
   2f788:	andeq	pc, r2, r8, asr #21
   2f78c:	andeq	pc, r2, r8, asr #21
   2f790:	andeq	pc, r2, r0, lsl #19
   2f794:	andeq	pc, r2, r8, asr #21
   2f798:	andeq	pc, r2, r8, asr #21
   2f79c:	andeq	pc, r2, r8, asr #21
   2f7a0:	andeq	pc, r2, r8, asr #21
   2f7a4:	andeq	pc, r2, r8, asr #21
   2f7a8:	andeq	pc, r2, r8, asr #21
   2f7ac:	andeq	pc, r2, r8, asr #21
   2f7b0:	andeq	pc, r2, r0, asr r9	; <UNPREDICTABLE>
   2f7b4:	andeq	pc, r2, r8, asr #21
   2f7b8:	andeq	pc, r2, r8, asr #21
   2f7bc:	andeq	pc, r2, r8, asr #21
   2f7c0:	andeq	pc, r2, r8, asr #21
   2f7c4:	andeq	pc, r2, r8, asr #21
   2f7c8:	andeq	pc, r2, r0, lsl #19
   2f7cc:	andeq	pc, r2, r8, asr #21
   2f7d0:	andeq	pc, r2, r8, asr #21
   2f7d4:	andeq	pc, r2, r8, asr #21
   2f7d8:	andeq	pc, r2, r8, asr #21
   2f7dc:	andeq	pc, r2, r8, asr #21
   2f7e0:	andeq	pc, r2, r8, asr #21
   2f7e4:	andeq	pc, r2, r4, ror r8	; <UNPREDICTABLE>
   2f7e8:	mov	sl, r2
   2f7ec:	cmp	r4, sl
   2f7f0:	beq	2f820 <flatcc_json_parser_generic_json@@Base+0x1f8>
   2f7f4:	cmp	r3, #45	; 0x2d
   2f7f8:	beq	313c8 <flatcc_json_parser_generic_json@@Base+0x1da0>
   2f7fc:	cmp	r3, #48	; 0x30
   2f800:	beq	311a8 <flatcc_json_parser_generic_json@@Base+0x1b80>
   2f804:	sub	r3, r3, #49	; 0x31
   2f808:	uxtb	r3, r3
   2f80c:	cmp	r3, #8
   2f810:	bls	31378 <flatcc_json_parser_generic_json@@Base+0x1d50>
   2f814:	ldr	r3, [r5, #20]
   2f818:	cmp	r3, #0
   2f81c:	beq	315bc <flatcc_json_parser_generic_json@@Base+0x1f94>
   2f820:	mov	r1, r6
   2f824:	mov	r0, r4
   2f828:	cmp	r1, r7
   2f82c:	beq	2f868 <flatcc_json_parser_generic_json@@Base+0x240>
   2f830:	ldrb	r2, [r1, #-1]
   2f834:	ldr	r3, [r5, #20]
   2f838:	cmp	r2, #93	; 0x5d
   2f83c:	movne	r2, #10
   2f840:	moveq	r2, #9
   2f844:	cmp	r3, #0
   2f848:	bne	2f864 <flatcc_json_parser_generic_json@@Base+0x23c>
   2f84c:	ldr	r3, [r5, #4]
   2f850:	str	r0, [r5, #32]
   2f854:	sub	r3, r0, r3
   2f858:	add	r3, r3, #1
   2f85c:	str	r2, [r5, #20]
   2f860:	str	r3, [r5, #16]
   2f864:	mov	r0, r4
   2f868:	add	sp, sp, #532	; 0x214
   2f86c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f870:	mov	sl, r4
   2f874:	add	r3, sp, #528	; 0x210
   2f878:	cmp	r6, r3
   2f87c:	beq	316e8 <flatcc_json_parser_generic_json@@Base+0x20c0>
   2f880:	add	r0, sl, #1
   2f884:	sub	r3, r4, r0
   2f888:	cmp	r3, #1
   2f88c:	strb	r9, [r6]
   2f890:	ble	2f8a4 <flatcc_json_parser_generic_json@@Base+0x27c>
   2f894:	ldrb	r3, [sl, #1]
   2f898:	cmp	r3, #32
   2f89c:	bhi	306c4 <flatcc_json_parser_generic_json@@Base+0x109c>
   2f8a0:	beq	31480 <flatcc_json_parser_generic_json@@Base+0x1e58>
   2f8a4:	cmp	r4, r0
   2f8a8:	beq	2f868 <flatcc_json_parser_generic_json@@Base+0x240>
   2f8ac:	ldrb	r3, [r0]
   2f8b0:	cmp	r3, #32
   2f8b4:	bne	2f8d4 <flatcc_json_parser_generic_json@@Base+0x2ac>
   2f8b8:	add	r2, r0, #1
   2f8bc:	cmp	r2, r4
   2f8c0:	mov	r0, r2
   2f8c4:	beq	2f868 <flatcc_json_parser_generic_json@@Base+0x240>
   2f8c8:	ldrb	r3, [r2], #1
   2f8cc:	cmp	r3, #32
   2f8d0:	beq	2f8bc <flatcc_json_parser_generic_json@@Base+0x294>
   2f8d4:	cmp	r3, #32
   2f8d8:	bhi	316ac <flatcc_json_parser_generic_json@@Base+0x2084>
   2f8dc:	sub	r3, r3, #9
   2f8e0:	cmp	r3, #23
   2f8e4:	ldrls	pc, [pc, r3, lsl #2]
   2f8e8:	b	306e0 <flatcc_json_parser_generic_json@@Base+0x10b8>
   2f8ec:	andeq	r0, r3, r4, lsl r5
   2f8f0:	andeq	r0, r3, r4, ror #9
   2f8f4:	andeq	r0, r3, r0, ror #13
   2f8f8:	andeq	r0, r3, r0, ror #13
   2f8fc:	andeq	r0, r3, r4, asr #9
   2f900:	andeq	r0, r3, r0, ror #13
   2f904:	andeq	r0, r3, r0, ror #13
   2f908:	andeq	r0, r3, r0, ror #13
   2f90c:	andeq	r0, r3, r0, ror #13
   2f910:	andeq	r0, r3, r0, ror #13
   2f914:	andeq	r0, r3, r0, ror #13
   2f918:	andeq	r0, r3, r0, ror #13
   2f91c:	andeq	r0, r3, r0, ror #13
   2f920:	andeq	r0, r3, r0, ror #13
   2f924:	andeq	r0, r3, r0, ror #13
   2f928:	andeq	r0, r3, r0, ror #13
   2f92c:	andeq	r0, r3, r0, ror #13
   2f930:	andeq	r0, r3, r0, ror #13
   2f934:	andeq	r0, r3, r0, ror #13
   2f938:	andeq	r0, r3, r0, ror #13
   2f93c:	andeq	r0, r3, r0, ror #13
   2f940:	andeq	r0, r3, r0, ror #13
   2f944:	andeq	r0, r3, r0, ror #13
   2f948:	andeq	pc, r2, r4, lsr #17
   2f94c:	mov	sl, r4
   2f950:	sub	r3, r4, sl
   2f954:	cmp	r3, #3
   2f958:	ble	2fac8 <flatcc_json_parser_generic_json@@Base+0x4a0>
   2f95c:	mov	r2, #4
   2f960:	ldr	r1, [pc, #4060]	; 30944 <flatcc_json_parser_generic_json@@Base+0x131c>
   2f964:	mov	r0, sl
   2f968:	bl	14558 <memcmp@plt>
   2f96c:	cmp	r0, #0
   2f970:	bne	2fac8 <flatcc_json_parser_generic_json@@Base+0x4a0>
   2f974:	add	r0, sl, #4
   2f978:	b	2f9dc <flatcc_json_parser_generic_json@@Base+0x3b4>
   2f97c:	mov	sl, r4
   2f980:	sub	r3, r4, sl
   2f984:	cmp	r3, #3
   2f988:	str	r3, [sp, #4]
   2f98c:	ble	2faf8 <flatcc_json_parser_generic_json@@Base+0x4d0>
   2f990:	mov	r2, #4
   2f994:	ldr	r1, [pc, #4012]	; 30948 <flatcc_json_parser_generic_json@@Base+0x1320>
   2f998:	mov	r0, sl
   2f99c:	bl	14558 <memcmp@plt>
   2f9a0:	ldr	r3, [sp, #4]
   2f9a4:	cmp	r0, #0
   2f9a8:	addeq	r0, sl, #4
   2f9ac:	beq	2f9d4 <flatcc_json_parser_generic_json@@Base+0x3ac>
   2f9b0:	cmp	r3, #4
   2f9b4:	beq	2faf8 <flatcc_json_parser_generic_json@@Base+0x4d0>
   2f9b8:	mov	r2, #5
   2f9bc:	ldr	r1, [pc, #3976]	; 3094c <flatcc_json_parser_generic_json@@Base+0x1324>
   2f9c0:	mov	r0, sl
   2f9c4:	bl	14558 <memcmp@plt>
   2f9c8:	cmp	r0, #0
   2f9cc:	bne	2faf8 <flatcc_json_parser_generic_json@@Base+0x4d0>
   2f9d0:	add	r0, sl, #5
   2f9d4:	cmp	r0, sl
   2f9d8:	beq	2fafc <flatcc_json_parser_generic_json@@Base+0x4d4>
   2f9dc:	cmp	r4, r0
   2f9e0:	beq	2f820 <flatcc_json_parser_generic_json@@Base+0x1f8>
   2f9e4:	cmp	r6, r7
   2f9e8:	beq	2f868 <flatcc_json_parser_generic_json@@Base+0x240>
   2f9ec:	ldrb	r3, [r6, #-1]
   2f9f0:	sub	r1, r6, #1
   2f9f4:	cmp	r3, #93	; 0x5d
   2f9f8:	sub	r3, r4, r0
   2f9fc:	beq	30950 <flatcc_json_parser_generic_json@@Base+0x1328>
   2fa00:	cmp	r3, #1
   2fa04:	ble	2fa18 <flatcc_json_parser_generic_json@@Base+0x3f0>
   2fa08:	ldrb	r2, [r0]
   2fa0c:	cmp	r2, #32
   2fa10:	bhi	308dc <flatcc_json_parser_generic_json@@Base+0x12b4>
   2fa14:	beq	308cc <flatcc_json_parser_generic_json@@Base+0x12a4>
   2fa18:	cmp	r4, r0
   2fa1c:	beq	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   2fa20:	ldrb	r2, [r0]
   2fa24:	cmp	r2, #32
   2fa28:	bne	2fa48 <flatcc_json_parser_generic_json@@Base+0x420>
   2fa2c:	add	r3, r0, #1
   2fa30:	cmp	r3, r4
   2fa34:	mov	r0, r3
   2fa38:	beq	2f828 <flatcc_json_parser_generic_json@@Base+0x200>
   2fa3c:	ldrb	r2, [r3], #1
   2fa40:	cmp	r2, #32
   2fa44:	beq	2fa30 <flatcc_json_parser_generic_json@@Base+0x408>
   2fa48:	cmp	r2, #32
   2fa4c:	bhi	303e0 <flatcc_json_parser_generic_json@@Base+0xdb8>
   2fa50:	sub	r2, r2, #9
   2fa54:	cmp	r2, #23
   2fa58:	ldrls	pc, [pc, r2, lsl #2]
   2fa5c:	b	30410 <flatcc_json_parser_generic_json@@Base+0xde8>
   2fa60:	andeq	r0, r3, r8, lsl #8
   2fa64:			; <UNDEFINED> instruction: 0x000303b8
   2fa68:	andeq	r0, r3, r0, lsl r4
   2fa6c:	andeq	r0, r3, r0, lsl r4
   2fa70:	muleq	r3, r8, r3
   2fa74:	andeq	r0, r3, r0, lsl r4
   2fa78:	andeq	r0, r3, r0, lsl r4
   2fa7c:	andeq	r0, r3, r0, lsl r4
   2fa80:	andeq	r0, r3, r0, lsl r4
   2fa84:	andeq	r0, r3, r0, lsl r4
   2fa88:	andeq	r0, r3, r0, lsl r4
   2fa8c:	andeq	r0, r3, r0, lsl r4
   2fa90:	andeq	r0, r3, r0, lsl r4
   2fa94:	andeq	r0, r3, r0, lsl r4
   2fa98:	andeq	r0, r3, r0, lsl r4
   2fa9c:	andeq	r0, r3, r0, lsl r4
   2faa0:	andeq	r0, r3, r0, lsl r4
   2faa4:	andeq	r0, r3, r0, lsl r4
   2faa8:	andeq	r0, r3, r0, lsl r4
   2faac:	andeq	r0, r3, r0, lsl r4
   2fab0:	andeq	r0, r3, r0, lsl r4
   2fab4:	andeq	r0, r3, r0, lsl r4
   2fab8:	andeq	r0, r3, r0, lsl r4
   2fabc:	andeq	pc, r2, r8, lsl sl	; <UNPREDICTABLE>
   2fac0:	mov	r2, sl
   2fac4:	mov	sl, r2
   2fac8:	ldr	r3, [r5, #20]
   2facc:	cmp	r3, #0
   2fad0:	bne	2f864 <flatcc_json_parser_generic_json@@Base+0x23c>
   2fad4:	ldr	r3, [r5, #4]
   2fad8:	mov	r2, #5
   2fadc:	sub	r3, sl, r3
   2fae0:	add	r3, r3, #1
   2fae4:	str	sl, [r5, #32]
   2fae8:	mov	r0, r4
   2faec:	str	r3, [r5, #16]
   2faf0:	str	r2, [r5, #20]
   2faf4:	b	2f868 <flatcc_json_parser_generic_json@@Base+0x240>
   2faf8:	mov	r0, sl
   2fafc:	ldr	r3, [r5, #20]
   2fb00:	cmp	r3, #0
   2fb04:	bne	2f864 <flatcc_json_parser_generic_json@@Base+0x23c>
   2fb08:	ldr	r3, [r5, #4]
   2fb0c:	mov	r2, #5
   2fb10:	sub	r3, sl, r3
   2fb14:	b	306f8 <flatcc_json_parser_generic_json@@Base+0x10d0>
   2fb18:	cmp	r3, #34	; 0x22
   2fb1c:	beq	310dc <flatcc_json_parser_generic_json@@Base+0x1ab4>
   2fb20:	ldr	r3, [r5, #20]
   2fb24:	cmp	r3, #0
   2fb28:	beq	31270 <flatcc_json_parser_generic_json@@Base+0x1c48>
   2fb2c:	mov	r1, r4
   2fb30:	cmp	r4, r1
   2fb34:	beq	31168 <flatcc_json_parser_generic_json@@Base+0x1b40>
   2fb38:	ldrb	r2, [r1]
   2fb3c:	cmp	r2, #32
   2fb40:	bne	2fde8 <flatcc_json_parser_generic_json@@Base+0x7c0>
   2fb44:	add	r3, r1, #1
   2fb48:	b	2fb58 <flatcc_json_parser_generic_json@@Base+0x530>
   2fb4c:	ldrb	r2, [r3], #1
   2fb50:	cmp	r2, #32
   2fb54:	bne	2fde8 <flatcc_json_parser_generic_json@@Base+0x7c0>
   2fb58:	cmp	r4, r3
   2fb5c:	mov	r1, r3
   2fb60:	bne	2fb4c <flatcc_json_parser_generic_json@@Base+0x524>
   2fb64:	ldr	r3, [r5, #20]
   2fb68:	cmp	r3, #0
   2fb6c:	bne	2f864 <flatcc_json_parser_generic_json@@Base+0x23c>
   2fb70:	ldr	r3, [r5, #4]
   2fb74:	mov	r2, #10
   2fb78:	sub	r3, r1, r3
   2fb7c:	add	r3, r3, #1
   2fb80:	str	r1, [r5, #32]
   2fb84:	mov	r0, r4
   2fb88:	str	r3, [r5, #16]
   2fb8c:	str	r2, [r5, #20]
   2fb90:	b	2f868 <flatcc_json_parser_generic_json@@Base+0x240>
   2fb94:	sub	r2, r3, #34	; 0x22
   2fb98:	cmp	r2, #89	; 0x59
   2fb9c:	ldrls	pc, [pc, r2, lsl #2]
   2fba0:	b	2fac8 <flatcc_json_parser_generic_json@@Base+0x4a0>
   2fba4:	andeq	r0, r3, r8, ror #5
   2fba8:	andeq	pc, r2, r8, asr #21
   2fbac:	andeq	pc, r2, r8, asr #21
   2fbb0:	andeq	pc, r2, r8, asr #21
   2fbb4:	andeq	pc, r2, r8, asr #21
   2fbb8:	andeq	pc, r2, r8, asr #21
   2fbbc:	andeq	pc, r2, r8, asr #21
   2fbc0:	andeq	pc, r2, r8, asr #21
   2fbc4:	andeq	pc, r2, r8, asr #21
   2fbc8:	andeq	pc, r2, r8, asr #21
   2fbcc:	andeq	pc, r2, r8, asr #21
   2fbd0:	andeq	pc, r2, ip, ror #15
   2fbd4:	andeq	pc, r2, r8, asr #21
   2fbd8:	andeq	pc, r2, r8, asr #21
   2fbdc:	andeq	pc, r2, ip, ror #15
   2fbe0:	andeq	pc, r2, ip, ror #15
   2fbe4:	andeq	pc, r2, ip, ror #15
   2fbe8:	andeq	pc, r2, ip, ror #15
   2fbec:	andeq	pc, r2, ip, ror #15
   2fbf0:	andeq	pc, r2, ip, ror #15
   2fbf4:	andeq	pc, r2, ip, ror #15
   2fbf8:	andeq	pc, r2, ip, ror #15
   2fbfc:	andeq	pc, r2, ip, ror #15
   2fc00:	andeq	pc, r2, ip, ror #15
   2fc04:	andeq	pc, r2, r8, asr #21
   2fc08:	andeq	pc, r2, r8, asr #21
   2fc0c:	andeq	pc, r2, r8, asr #21
   2fc10:	andeq	pc, r2, r8, asr #21
   2fc14:	andeq	pc, r2, r8, asr #21
   2fc18:	andeq	pc, r2, r8, asr #21
   2fc1c:	andeq	pc, r2, r8, asr #21
   2fc20:	andeq	pc, r2, r8, asr #21
   2fc24:	andeq	pc, r2, r8, asr #21
   2fc28:	andeq	pc, r2, r8, asr #21
   2fc2c:	andeq	pc, r2, r8, asr #21
   2fc30:	andeq	pc, r2, r8, asr #21
   2fc34:	andeq	pc, r2, r8, asr #21
   2fc38:	andeq	pc, r2, r8, asr #21
   2fc3c:	andeq	pc, r2, r8, asr #21
   2fc40:	andeq	pc, r2, r8, asr #21
   2fc44:	andeq	pc, r2, r8, asr #21
   2fc48:	andeq	pc, r2, r8, asr #21
   2fc4c:	andeq	pc, r2, r8, asr #21
   2fc50:	andeq	pc, r2, r8, asr #21
   2fc54:	andeq	pc, r2, r8, asr #21
   2fc58:	andeq	pc, r2, r8, asr #21
   2fc5c:	andeq	pc, r2, r8, asr #21
   2fc60:	andeq	pc, r2, r8, asr #21
   2fc64:	andeq	pc, r2, r8, asr #21
   2fc68:	andeq	pc, r2, r8, asr #21
   2fc6c:	andeq	pc, r2, r8, asr #21
   2fc70:	andeq	pc, r2, r8, asr #21
   2fc74:	andeq	pc, r2, r8, asr #21
   2fc78:	andeq	pc, r2, r8, asr #21
   2fc7c:	andeq	pc, r2, r8, asr #21
   2fc80:	andeq	pc, r2, r8, asr #21
   2fc84:	andeq	pc, r2, r8, asr #21
   2fc88:	andeq	pc, r2, ip, lsl sp	; <UNPREDICTABLE>
   2fc8c:	andeq	pc, r2, r8, asr #21
   2fc90:	andeq	pc, r2, r8, asr #21
   2fc94:	andeq	pc, r2, r8, asr #21
   2fc98:	andeq	pc, r2, r8, asr #21
   2fc9c:	andeq	pc, r2, r8, asr #21
   2fca0:	andeq	pc, r2, r8, asr #21
   2fca4:	andeq	pc, r2, r8, asr #21
   2fca8:	andeq	pc, r2, r8, asr #21
   2fcac:	andeq	pc, r2, r8, asr #21
   2fcb0:	andeq	pc, r2, r8, asr #21
   2fcb4:	andeq	pc, r2, r0, lsl #19
   2fcb8:	andeq	pc, r2, r8, asr #21
   2fcbc:	andeq	pc, r2, r8, asr #21
   2fcc0:	andeq	pc, r2, r8, asr #21
   2fcc4:	andeq	pc, r2, r8, asr #21
   2fcc8:	andeq	pc, r2, r8, asr #21
   2fccc:	andeq	pc, r2, r8, asr #21
   2fcd0:	andeq	pc, r2, r8, asr #21
   2fcd4:	andeq	pc, r2, r0, asr r9	; <UNPREDICTABLE>
   2fcd8:	andeq	pc, r2, r8, asr #21
   2fcdc:	andeq	pc, r2, r8, asr #21
   2fce0:	andeq	pc, r2, r8, asr #21
   2fce4:	andeq	pc, r2, r8, asr #21
   2fce8:	andeq	pc, r2, r8, asr #21
   2fcec:	andeq	pc, r2, r0, lsl #19
   2fcf0:	andeq	pc, r2, r8, asr #21
   2fcf4:	andeq	pc, r2, r8, asr #21
   2fcf8:	andeq	pc, r2, r8, asr #21
   2fcfc:	andeq	pc, r2, r8, asr #21
   2fd00:	andeq	pc, r2, r8, asr #21
   2fd04:	andeq	pc, r2, r8, asr #21
   2fd08:	andeq	pc, r2, r4, ror r8	; <UNPREDICTABLE>
   2fd0c:	mov	sl, r4
   2fd10:	add	r3, sp, #528	; 0x210
   2fd14:	cmp	r6, r3
   2fd18:	beq	316e8 <flatcc_json_parser_generic_json@@Base+0x20c0>
   2fd1c:	add	r0, sl, #1
   2fd20:	sub	r3, r4, r0
   2fd24:	cmp	r3, #1
   2fd28:	strb	fp, [r6]
   2fd2c:	ble	2fd40 <flatcc_json_parser_generic_json@@Base+0x718>
   2fd30:	ldrb	r3, [sl, #1]
   2fd34:	cmp	r3, #32
   2fd38:	bhi	306a4 <flatcc_json_parser_generic_json@@Base+0x107c>
   2fd3c:	beq	31494 <flatcc_json_parser_generic_json@@Base+0x1e6c>
   2fd40:	cmp	r4, r0
   2fd44:	beq	2f868 <flatcc_json_parser_generic_json@@Base+0x240>
   2fd48:	ldrb	r3, [r0]
   2fd4c:	cmp	r3, #32
   2fd50:	bne	2fd70 <flatcc_json_parser_generic_json@@Base+0x748>
   2fd54:	add	r2, r0, #1
   2fd58:	cmp	r2, r4
   2fd5c:	mov	r0, r2
   2fd60:	beq	2f868 <flatcc_json_parser_generic_json@@Base+0x240>
   2fd64:	ldrb	r3, [r2], #1
   2fd68:	cmp	r3, #32
   2fd6c:	beq	2fd58 <flatcc_json_parser_generic_json@@Base+0x730>
   2fd70:	cmp	r3, #32
   2fd74:	bhi	316c0 <flatcc_json_parser_generic_json@@Base+0x2098>
   2fd78:	sub	r3, r3, #9
   2fd7c:	cmp	r3, #23
   2fd80:	ldrls	pc, [pc, r3, lsl #2]
   2fd84:	b	306e0 <flatcc_json_parser_generic_json@@Base+0x10b8>
   2fd88:			; <UNDEFINED> instruction: 0x000304bc
   2fd8c:	andeq	r0, r3, ip, lsl #9
   2fd90:	andeq	r0, r3, r0, ror #13
   2fd94:	andeq	r0, r3, r0, ror #13
   2fd98:	andeq	r0, r3, ip, ror #8
   2fd9c:	andeq	r0, r3, r0, ror #13
   2fda0:	andeq	r0, r3, r0, ror #13
   2fda4:	andeq	r0, r3, r0, ror #13
   2fda8:	andeq	r0, r3, r0, ror #13
   2fdac:	andeq	r0, r3, r0, ror #13
   2fdb0:	andeq	r0, r3, r0, ror #13
   2fdb4:	andeq	r0, r3, r0, ror #13
   2fdb8:	andeq	r0, r3, r0, ror #13
   2fdbc:	andeq	r0, r3, r0, ror #13
   2fdc0:	andeq	r0, r3, r0, ror #13
   2fdc4:	andeq	r0, r3, r0, ror #13
   2fdc8:	andeq	r0, r3, r0, ror #13
   2fdcc:	andeq	r0, r3, r0, ror #13
   2fdd0:	andeq	r0, r3, r0, ror #13
   2fdd4:	andeq	r0, r3, r0, ror #13
   2fdd8:	andeq	r0, r3, r0, ror #13
   2fddc:	andeq	r0, r3, r0, ror #13
   2fde0:	andeq	r0, r3, r0, ror #13
   2fde4:	andeq	pc, r2, r0, asr #26
   2fde8:	cmp	r2, #32
   2fdec:	bhi	2fea8 <flatcc_json_parser_generic_json@@Base+0x880>
   2fdf0:	sub	r2, r2, #9
   2fdf4:	cmp	r2, #23
   2fdf8:	ldrls	pc, [pc, r2, lsl #2]
   2fdfc:	b	30440 <flatcc_json_parser_generic_json@@Base+0xe18>
   2fe00:	ldrdeq	r0, [r3], -ip
   2fe04:	andeq	pc, r2, r0, lsl #29
   2fe08:	andeq	r0, r3, r0, asr #8
   2fe0c:	andeq	r0, r3, r0, asr #8
   2fe10:	andeq	pc, r2, r0, ror #28
   2fe14:	andeq	r0, r3, r0, asr #8
   2fe18:	andeq	r0, r3, r0, asr #8
   2fe1c:	andeq	r0, r3, r0, asr #8
   2fe20:	andeq	r0, r3, r0, asr #8
   2fe24:	andeq	r0, r3, r0, asr #8
   2fe28:	andeq	r0, r3, r0, asr #8
   2fe2c:	andeq	r0, r3, r0, asr #8
   2fe30:	andeq	r0, r3, r0, asr #8
   2fe34:	andeq	r0, r3, r0, asr #8
   2fe38:	andeq	r0, r3, r0, asr #8
   2fe3c:	andeq	r0, r3, r0, asr #8
   2fe40:	andeq	r0, r3, r0, asr #8
   2fe44:	andeq	r0, r3, r0, asr #8
   2fe48:	andeq	r0, r3, r0, asr #8
   2fe4c:	andeq	r0, r3, r0, asr #8
   2fe50:	andeq	r0, r3, r0, asr #8
   2fe54:	andeq	r0, r3, r0, asr #8
   2fe58:	andeq	r0, r3, r0, asr #8
   2fe5c:	andeq	pc, r2, r0, lsr fp	; <UNPREDICTABLE>
   2fe60:	sub	r3, r4, r1
   2fe64:	cmp	r3, #1
   2fe68:	movle	r3, r8
   2fe6c:	ldrbgt	r3, [r1, #1]
   2fe70:	subgt	r3, r3, #10
   2fe74:	clzgt	r3, r3
   2fe78:	lsrgt	r3, r3, #5
   2fe7c:	add	r1, r1, r3
   2fe80:	ldr	r3, [r5, #12]
   2fe84:	add	r1, r1, #1
   2fe88:	add	r3, r3, #1
   2fe8c:	str	r1, [r5, #4]
   2fe90:	str	r3, [r5, #12]
   2fe94:	cmp	r4, r1
   2fe98:	beq	31168 <flatcc_json_parser_generic_json@@Base+0x1b40>
   2fe9c:	ldrb	r2, [r1]
   2fea0:	cmp	r2, #32
   2fea4:	bls	2fdf0 <flatcc_json_parser_generic_json@@Base+0x7c8>
   2fea8:	cmp	r2, #58	; 0x3a
   2feac:	bne	31654 <flatcc_json_parser_generic_json@@Base+0x202c>
   2feb0:	add	sl, r1, #1
   2feb4:	sub	r3, r4, sl
   2feb8:	cmp	r3, #1
   2febc:	ldrble	r2, [r1, #1]
   2fec0:	ble	2fed8 <flatcc_json_parser_generic_json@@Base+0x8b0>
   2fec4:	ldrb	r3, [r1, #1]
   2fec8:	cmp	r3, #32
   2fecc:	mov	r2, r3
   2fed0:	bhi	30720 <flatcc_json_parser_generic_json@@Base+0x10f8>
   2fed4:	beq	30710 <flatcc_json_parser_generic_json@@Base+0x10e8>
   2fed8:	cmp	r4, sl
   2fedc:	mov	r3, r2
   2fee0:	beq	2ff0c <flatcc_json_parser_generic_json@@Base+0x8e4>
   2fee4:	cmp	r2, #32
   2fee8:	beq	2fefc <flatcc_json_parser_generic_json@@Base+0x8d4>
   2feec:	b	30084 <flatcc_json_parser_generic_json@@Base+0xa5c>
   2fef0:	cmp	r3, #32
   2fef4:	mov	sl, r2
   2fef8:	bne	30088 <flatcc_json_parser_generic_json@@Base+0xa60>
   2fefc:	add	r2, sl, #1
   2ff00:	cmp	r4, r2
   2ff04:	ldrb	r3, [sl, #1]
   2ff08:	bne	2fef0 <flatcc_json_parser_generic_json@@Base+0x8c8>
   2ff0c:	sub	r3, r3, #34	; 0x22
   2ff10:	cmp	r3, #89	; 0x59
   2ff14:	ldrls	pc, [pc, r3, lsl #2]
   2ff18:	b	302cc <flatcc_json_parser_generic_json@@Base+0xca4>
   2ff1c:	andeq	r0, r3, r0, lsr #17
   2ff20:	andeq	r0, r3, ip, asr #5
   2ff24:	andeq	r0, r3, ip, asr #5
   2ff28:	andeq	r0, r3, ip, asr #5
   2ff2c:	andeq	r0, r3, ip, asr #5
   2ff30:	andeq	r0, r3, ip, asr #5
   2ff34:	andeq	r0, r3, ip, asr #5
   2ff38:	andeq	r0, r3, ip, asr #5
   2ff3c:	andeq	r0, r3, ip, asr #5
   2ff40:	andeq	r0, r3, ip, asr #5
   2ff44:	andeq	r0, r3, ip, asr #5
   2ff48:	andeq	pc, r2, r0, lsr #16
   2ff4c:	andeq	r0, r3, ip, asr #5
   2ff50:	andeq	r0, r3, ip, asr #5
   2ff54:	andeq	pc, r2, r0, lsr #16
   2ff58:	andeq	pc, r2, r0, lsr #16
   2ff5c:	andeq	pc, r2, r0, lsr #16
   2ff60:	andeq	pc, r2, r0, lsr #16
   2ff64:	andeq	pc, r2, r0, lsr #16
   2ff68:	andeq	pc, r2, r0, lsr #16
   2ff6c:	andeq	pc, r2, r0, lsr #16
   2ff70:	andeq	pc, r2, r0, lsr #16
   2ff74:	andeq	pc, r2, r0, lsr #16
   2ff78:	andeq	pc, r2, r0, lsr #16
   2ff7c:	andeq	r0, r3, ip, asr #5
   2ff80:	andeq	r0, r3, ip, asr #5
   2ff84:	andeq	r0, r3, ip, asr #5
   2ff88:	andeq	r0, r3, ip, asr #5
   2ff8c:	andeq	r0, r3, ip, asr #5
   2ff90:	andeq	r0, r3, ip, asr #5
   2ff94:	andeq	r0, r3, ip, asr #5
   2ff98:	andeq	r0, r3, ip, asr #5
   2ff9c:	andeq	r0, r3, ip, asr #5
   2ffa0:	andeq	r0, r3, ip, asr #5
   2ffa4:	andeq	r0, r3, ip, asr #5
   2ffa8:	andeq	r0, r3, ip, asr #5
   2ffac:	andeq	r0, r3, ip, asr #5
   2ffb0:	andeq	r0, r3, ip, asr #5
   2ffb4:	andeq	r0, r3, ip, asr #5
   2ffb8:	andeq	r0, r3, ip, asr #5
   2ffbc:	andeq	r0, r3, ip, asr #5
   2ffc0:	andeq	r0, r3, ip, asr #5
   2ffc4:	andeq	r0, r3, ip, asr #5
   2ffc8:	andeq	r0, r3, ip, asr #5
   2ffcc:	andeq	r0, r3, ip, asr #5
   2ffd0:	andeq	r0, r3, ip, asr #5
   2ffd4:	andeq	r0, r3, ip, asr #5
   2ffd8:	andeq	r0, r3, ip, asr #5
   2ffdc:	andeq	r0, r3, ip, asr #5
   2ffe0:	andeq	r0, r3, ip, asr #5
   2ffe4:	andeq	r0, r3, ip, asr #5
   2ffe8:	andeq	r0, r3, ip, asr #5
   2ffec:	andeq	r0, r3, ip, asr #5
   2fff0:	andeq	r0, r3, ip, asr #5
   2fff4:	andeq	r0, r3, ip, asr #5
   2fff8:	andeq	r0, r3, ip, asr #5
   2fffc:	andeq	r0, r3, ip, asr #5
   30000:	andeq	pc, r2, ip, lsl #26
   30004:	andeq	r0, r3, ip, asr #5
   30008:	andeq	r0, r3, ip, asr #5
   3000c:	andeq	r0, r3, ip, asr #5
   30010:	andeq	r0, r3, ip, asr #5
   30014:	andeq	r0, r3, ip, asr #5
   30018:	andeq	r0, r3, ip, asr #5
   3001c:	andeq	r0, r3, ip, asr #5
   30020:	andeq	r0, r3, ip, asr #5
   30024:	andeq	r0, r3, ip, asr #5
   30028:	andeq	r0, r3, ip, asr #5
   3002c:	andeq	pc, r2, ip, ror r9	; <UNPREDICTABLE>
   30030:	andeq	r0, r3, ip, asr #5
   30034:	andeq	r0, r3, ip, asr #5
   30038:	andeq	r0, r3, ip, asr #5
   3003c:	andeq	r0, r3, ip, asr #5
   30040:	andeq	r0, r3, ip, asr #5
   30044:	andeq	r0, r3, ip, asr #5
   30048:	andeq	r0, r3, ip, asr #5
   3004c:	andeq	pc, r2, ip, asr #18
   30050:	andeq	r0, r3, ip, asr #5
   30054:	andeq	r0, r3, ip, asr #5
   30058:	andeq	r0, r3, ip, asr #5
   3005c:	andeq	r0, r3, ip, asr #5
   30060:	andeq	r0, r3, ip, asr #5
   30064:	andeq	pc, r2, ip, ror r9	; <UNPREDICTABLE>
   30068:	andeq	r0, r3, ip, asr #5
   3006c:	andeq	r0, r3, ip, asr #5
   30070:	andeq	r0, r3, ip, asr #5
   30074:	andeq	r0, r3, ip, asr #5
   30078:	andeq	r0, r3, ip, asr #5
   3007c:	andeq	r0, r3, ip, asr #5
   30080:	andeq	pc, r2, r0, ror r8	; <UNPREDICTABLE>
   30084:	mov	r2, sl
   30088:	cmp	r3, #32
   3008c:	movls	sl, r2
   30090:	bhi	31700 <flatcc_json_parser_generic_json@@Base+0x20d8>
   30094:	sub	r3, r3, #9
   30098:	cmp	r3, #23
   3009c:	ldrls	pc, [pc, r3, lsl #2]
   300a0:	b	3051c <flatcc_json_parser_generic_json@@Base+0xef4>
   300a4:	ldrdeq	r0, [r3], -r4
   300a8:	andeq	r0, r3, r4, lsr #2
   300ac:	andeq	r0, r3, ip, lsl r5
   300b0:	andeq	r0, r3, ip, lsl r5
   300b4:	andeq	r0, r3, r4, lsl #2
   300b8:	andeq	r0, r3, ip, lsl r5
   300bc:	andeq	r0, r3, ip, lsl r5
   300c0:	andeq	r0, r3, ip, lsl r5
   300c4:	andeq	r0, r3, ip, lsl r5
   300c8:	andeq	r0, r3, ip, lsl r5
   300cc:	andeq	r0, r3, ip, lsl r5
   300d0:	andeq	r0, r3, ip, lsl r5
   300d4:	andeq	r0, r3, ip, lsl r5
   300d8:	andeq	r0, r3, ip, lsl r5
   300dc:	andeq	r0, r3, ip, lsl r5
   300e0:	andeq	r0, r3, ip, lsl r5
   300e4:	andeq	r0, r3, ip, lsl r5
   300e8:	andeq	r0, r3, ip, lsl r5
   300ec:	andeq	r0, r3, ip, lsl r5
   300f0:	andeq	r0, r3, ip, lsl r5
   300f4:	andeq	r0, r3, ip, lsl r5
   300f8:	andeq	r0, r3, ip, lsl r5
   300fc:	andeq	r0, r3, ip, lsl r5
   30100:	andeq	r0, r3, r4, asr #5
   30104:	sub	r3, r4, sl
   30108:	cmp	r3, #1
   3010c:	movle	r3, r8
   30110:	ldrbgt	r3, [sl, #1]
   30114:	subgt	r3, r3, #10
   30118:	clzgt	r3, r3
   3011c:	lsrgt	r3, r3, #5
   30120:	add	sl, sl, r3
   30124:	ldr	r3, [r5, #12]
   30128:	add	sl, sl, #1
   3012c:	add	r3, r3, #1
   30130:	str	sl, [r5, #4]
   30134:	str	r3, [r5, #12]
   30138:	cmp	r4, sl
   3013c:	beq	31878 <flatcc_json_parser_generic_json@@Base+0x2250>
   30140:	ldrb	r3, [sl]
   30144:	cmp	r3, #32
   30148:	bls	30094 <flatcc_json_parser_generic_json@@Base+0xa6c>
   3014c:	sub	r2, r3, #34	; 0x22
   30150:	cmp	r2, #89	; 0x59
   30154:	ldrls	pc, [pc, r2, lsl #2]
   30158:	b	2fac0 <flatcc_json_parser_generic_json@@Base+0x498>
   3015c:	andeq	r0, r3, r8, ror #5
   30160:	andeq	pc, r2, r0, asr #21
   30164:	andeq	pc, r2, r0, asr #21
   30168:	andeq	pc, r2, r0, asr #21
   3016c:	andeq	pc, r2, r0, asr #21
   30170:	andeq	pc, r2, r0, asr #21
   30174:	andeq	pc, r2, r0, asr #21
   30178:	andeq	pc, r2, r0, asr #21
   3017c:	andeq	pc, r2, r0, asr #21
   30180:	andeq	pc, r2, r0, asr #21
   30184:	andeq	pc, r2, r0, asr #21
   30188:	strdeq	pc, [r2], -r4
   3018c:	andeq	pc, r2, r0, asr #21
   30190:	andeq	pc, r2, r0, asr #21
   30194:	strdeq	pc, [r2], -r4
   30198:	strdeq	pc, [r2], -r4
   3019c:	strdeq	pc, [r2], -r4
   301a0:	strdeq	pc, [r2], -r4
   301a4:	strdeq	pc, [r2], -r4
   301a8:	strdeq	pc, [r2], -r4
   301ac:	strdeq	pc, [r2], -r4
   301b0:	strdeq	pc, [r2], -r4
   301b4:	strdeq	pc, [r2], -r4
   301b8:	strdeq	pc, [r2], -r4
   301bc:	andeq	pc, r2, r0, asr #21
   301c0:	andeq	pc, r2, r0, asr #21
   301c4:	andeq	pc, r2, r0, asr #21
   301c8:	andeq	pc, r2, r0, asr #21
   301cc:	andeq	pc, r2, r0, asr #21
   301d0:	andeq	pc, r2, r0, asr #21
   301d4:	andeq	pc, r2, r0, asr #21
   301d8:	andeq	pc, r2, r0, asr #21
   301dc:	andeq	pc, r2, r0, asr #21
   301e0:	andeq	pc, r2, r0, asr #21
   301e4:	andeq	pc, r2, r0, asr #21
   301e8:	andeq	pc, r2, r0, asr #21
   301ec:	andeq	pc, r2, r0, asr #21
   301f0:	andeq	pc, r2, r0, asr #21
   301f4:	andeq	pc, r2, r0, asr #21
   301f8:	andeq	pc, r2, r0, asr #21
   301fc:	andeq	pc, r2, r0, asr #21
   30200:	andeq	pc, r2, r0, asr #21
   30204:	andeq	pc, r2, r0, asr #21
   30208:	andeq	pc, r2, r0, asr #21
   3020c:	andeq	pc, r2, r0, asr #21
   30210:	andeq	pc, r2, r0, asr #21
   30214:	andeq	pc, r2, r0, asr #21
   30218:	andeq	pc, r2, r0, asr #21
   3021c:	andeq	pc, r2, r0, asr #21
   30220:	andeq	pc, r2, r0, asr #21
   30224:	andeq	pc, r2, r0, asr #21
   30228:	andeq	pc, r2, r0, asr #21
   3022c:	andeq	pc, r2, r0, asr #21
   30230:	andeq	pc, r2, r0, asr #21
   30234:	andeq	pc, r2, r0, asr #21
   30238:	andeq	pc, r2, r0, asr #21
   3023c:	andeq	pc, r2, r0, asr #21
   30240:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   30244:	andeq	pc, r2, r0, asr #21
   30248:	andeq	pc, r2, r0, asr #21
   3024c:	andeq	pc, r2, r0, asr #21
   30250:	andeq	pc, r2, r0, asr #21
   30254:	andeq	pc, r2, r0, asr #21
   30258:	andeq	pc, r2, r0, asr #21
   3025c:	andeq	pc, r2, r0, asr #21
   30260:	andeq	pc, r2, r0, asr #21
   30264:	andeq	pc, r2, r0, asr #21
   30268:	andeq	pc, r2, r0, asr #21
   3026c:	andeq	pc, r2, r0, lsl #19
   30270:	andeq	pc, r2, r0, asr #21
   30274:	andeq	pc, r2, r0, asr #21
   30278:	andeq	pc, r2, r0, asr #21
   3027c:	andeq	pc, r2, r0, asr #21
   30280:	andeq	pc, r2, r0, asr #21
   30284:	andeq	pc, r2, r0, asr #21
   30288:	andeq	pc, r2, r0, asr #21
   3028c:	andeq	pc, r2, r0, asr r9	; <UNPREDICTABLE>
   30290:	andeq	pc, r2, r0, asr #21
   30294:	andeq	pc, r2, r0, asr #21
   30298:	andeq	pc, r2, r0, asr #21
   3029c:	andeq	pc, r2, r0, asr #21
   302a0:	andeq	pc, r2, r0, asr #21
   302a4:	andeq	pc, r2, r0, lsl #19
   302a8:	andeq	pc, r2, r0, asr #21
   302ac:	andeq	pc, r2, r0, asr #21
   302b0:	andeq	pc, r2, r0, asr #21
   302b4:	andeq	pc, r2, r0, asr #21
   302b8:	andeq	pc, r2, r0, asr #21
   302bc:	andeq	pc, r2, r0, asr #21
   302c0:	andeq	pc, r2, r4, ror r8	; <UNPREDICTABLE>
   302c4:	cmp	r4, sl
   302c8:	bne	2fefc <flatcc_json_parser_generic_json@@Base+0x8d4>
   302cc:	mov	sl, r4
   302d0:	b	2fac8 <flatcc_json_parser_generic_json@@Base+0x4a0>
   302d4:	add	sl, sl, #1
   302d8:	b	30138 <flatcc_json_parser_generic_json@@Base+0xb10>
   302dc:	add	r1, r1, #1
   302e0:	b	2fe94 <flatcc_json_parser_generic_json@@Base+0x86c>
   302e4:	mov	sl, r2
   302e8:	add	r0, sl, #1
   302ec:	cmp	r4, r0
   302f0:	beq	316d0 <flatcc_json_parser_generic_json@@Base+0x20a8>
   302f4:	ldrb	r3, [sl, #1]
   302f8:	cmp	r3, #34	; 0x22
   302fc:	movne	sl, #17
   30300:	beq	30390 <flatcc_json_parser_generic_json@@Base+0xd68>
   30304:	cmp	r4, r0
   30308:	beq	30358 <flatcc_json_parser_generic_json@@Base+0xd30>
   3030c:	cmp	r3, #92	; 0x5c
   30310:	cmpne	r3, #31
   30314:	addhi	r1, r0, #1
   30318:	bhi	3034c <flatcc_json_parser_generic_json@@Base+0xd24>
   3031c:	b	313bc <flatcc_json_parser_generic_json@@Base+0x1d94>
   30320:	ldrb	r3, [r1]
   30324:	add	r1, r1, #1
   30328:	cmp	r3, #34	; 0x22
   3032c:	cmpne	r3, #31
   30330:	movhi	r2, #1
   30334:	movls	r2, #0
   30338:	cmp	r3, #92	; 0x5c
   3033c:	moveq	r2, #0
   30340:	andne	r2, r2, #1
   30344:	cmp	r2, #0
   30348:	beq	30b2c <flatcc_json_parser_generic_json@@Base+0x1504>
   3034c:	cmp	r1, r4
   30350:	mov	r0, r1
   30354:	bne	30320 <flatcc_json_parser_generic_json@@Base+0xcf8>
   30358:	ldr	r3, [r5, #20]
   3035c:	cmp	r3, #0
   30360:	beq	31170 <flatcc_json_parser_generic_json@@Base+0x1b48>
   30364:	mov	r0, r4
   30368:	mov	r1, r0
   3036c:	add	r3, sp, #12
   30370:	mov	r2, r4
   30374:	mov	r0, r5
   30378:	bl	2eb04 <flatcc_json_parser_string_escape@@Base>
   3037c:	cmp	r4, r0
   30380:	beq	316d0 <flatcc_json_parser_generic_json@@Base+0x20a8>
   30384:	ldrb	r3, [r0]
   30388:	cmp	r3, #34	; 0x22
   3038c:	bne	30304 <flatcc_json_parser_generic_json@@Base+0xcdc>
   30390:	add	r0, r0, #1
   30394:	b	2f9dc <flatcc_json_parser_generic_json@@Base+0x3b4>
   30398:	sub	r3, r4, r0
   3039c:	cmp	r3, #1
   303a0:	movle	r3, r8
   303a4:	ldrbgt	r3, [r0, #1]
   303a8:	subgt	r3, r3, #10
   303ac:	clzgt	r3, r3
   303b0:	lsrgt	r3, r3, #5
   303b4:	add	r0, r0, r3
   303b8:	ldr	r3, [r5, #12]
   303bc:	add	r0, r0, #1
   303c0:	add	r3, r3, #1
   303c4:	str	r0, [r5, #4]
   303c8:	str	r3, [r5, #12]
   303cc:	cmp	r4, r0
   303d0:	beq	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   303d4:	ldrb	r2, [r0]
   303d8:	cmp	r2, #32
   303dc:	bls	2fa50 <flatcc_json_parser_generic_json@@Base+0x428>
   303e0:	cmp	r2, #44	; 0x2c
   303e4:	beq	308ec <flatcc_json_parser_generic_json@@Base+0x12c4>
   303e8:	cmp	r2, #125	; 0x7d
   303ec:	beq	30b6c <flatcc_json_parser_generic_json@@Base+0x1544>
   303f0:	ldr	r3, [r5, #20]
   303f4:	cmp	r3, #0
   303f8:	bne	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   303fc:	ldr	r3, [r5, #4]
   30400:	mov	r2, #10
   30404:	b	30424 <flatcc_json_parser_generic_json@@Base+0xdfc>
   30408:	add	r0, r0, #1
   3040c:	b	303cc <flatcc_json_parser_generic_json@@Base+0xda4>
   30410:	ldr	r3, [r5, #20]
   30414:	cmp	r3, #0
   30418:	bne	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   3041c:	ldr	r3, [r5, #4]
   30420:	mov	r2, #5
   30424:	sub	r3, r0, r3
   30428:	add	r3, r3, #1
   3042c:	str	r0, [r5, #32]
   30430:	str	r3, [r5, #16]
   30434:	str	r2, [r5, #20]
   30438:	mov	r0, r4
   3043c:	b	2f828 <flatcc_json_parser_generic_json@@Base+0x200>
   30440:	ldr	r3, [r5, #20]
   30444:	cmp	r3, #0
   30448:	bne	2f864 <flatcc_json_parser_generic_json@@Base+0x23c>
   3044c:	ldr	r3, [r5, #4]
   30450:	mov	r2, #5
   30454:	sub	r3, r1, r3
   30458:	add	r3, r3, #1
   3045c:	str	r1, [r5, #32]
   30460:	str	r3, [r5, #16]
   30464:	str	r2, [r5, #20]
   30468:	b	2f864 <flatcc_json_parser_generic_json@@Base+0x23c>
   3046c:	sub	r3, r4, r0
   30470:	cmp	r3, #1
   30474:	movle	r3, r8
   30478:	ldrbgt	r3, [r0, #1]
   3047c:	subgt	r3, r3, #10
   30480:	clzgt	r3, r3
   30484:	lsrgt	r3, r3, #5
   30488:	add	r0, r0, r3
   3048c:	ldr	r3, [r5, #12]
   30490:	add	r0, r0, #1
   30494:	add	r3, r3, #1
   30498:	str	r0, [r5, #4]
   3049c:	str	r3, [r5, #12]
   304a0:	cmp	r4, r0
   304a4:	beq	2f868 <flatcc_json_parser_generic_json@@Base+0x240>
   304a8:	ldrb	r3, [r0]
   304ac:	cmp	r3, #32
   304b0:	bls	2fd78 <flatcc_json_parser_generic_json@@Base+0x750>
   304b4:	mov	sl, r0
   304b8:	b	306b0 <flatcc_json_parser_generic_json@@Base+0x1088>
   304bc:	add	r0, r0, #1
   304c0:	b	304a0 <flatcc_json_parser_generic_json@@Base+0xe78>
   304c4:	sub	r3, r4, r0
   304c8:	cmp	r3, #1
   304cc:	movle	r3, r8
   304d0:	ldrbgt	r3, [r0, #1]
   304d4:	subgt	r3, r3, #10
   304d8:	clzgt	r3, r3
   304dc:	lsrgt	r3, r3, #5
   304e0:	add	r0, r0, r3
   304e4:	ldr	r3, [r5, #12]
   304e8:	add	r0, r0, #1
   304ec:	add	r3, r3, #1
   304f0:	str	r0, [r5, #4]
   304f4:	str	r3, [r5, #12]
   304f8:	cmp	r4, r0
   304fc:	beq	2f868 <flatcc_json_parser_generic_json@@Base+0x240>
   30500:	ldrb	r3, [r0]
   30504:	cmp	r3, #32
   30508:	bls	2f8dc <flatcc_json_parser_generic_json@@Base+0x2b4>
   3050c:	mov	sl, r0
   30510:	b	306d0 <flatcc_json_parser_generic_json@@Base+0x10a8>
   30514:	add	r0, r0, #1
   30518:	b	304f8 <flatcc_json_parser_generic_json@@Base+0xed0>
   3051c:	ldr	r3, [r5, #20]
   30520:	cmp	r3, #0
   30524:	beq	3140c <flatcc_json_parser_generic_json@@Base+0x1de4>
   30528:	ldrb	r3, [r4]
   3052c:	sub	r3, r3, #34	; 0x22
   30530:	cmp	r3, #89	; 0x59
   30534:	ldrls	pc, [pc, r3, lsl #2]
   30538:	b	302cc <flatcc_json_parser_generic_json@@Base+0xca4>
   3053c:	andeq	pc, r2, r0, lsr #16
   30540:	andeq	r0, r3, ip, asr #5
   30544:	andeq	r0, r3, ip, asr #5
   30548:	andeq	r0, r3, ip, asr #5
   3054c:	andeq	r0, r3, ip, asr #5
   30550:	andeq	r0, r3, ip, asr #5
   30554:	andeq	r0, r3, ip, asr #5
   30558:	andeq	r0, r3, ip, asr #5
   3055c:	andeq	r0, r3, ip, asr #5
   30560:	andeq	r0, r3, ip, asr #5
   30564:	andeq	r0, r3, ip, asr #5
   30568:	andeq	pc, r2, r0, lsr #16
   3056c:	andeq	r0, r3, ip, asr #5
   30570:	andeq	r0, r3, ip, asr #5
   30574:	andeq	pc, r2, r0, lsr #16
   30578:	andeq	pc, r2, r0, lsr #16
   3057c:	andeq	pc, r2, r0, lsr #16
   30580:	andeq	pc, r2, r0, lsr #16
   30584:	andeq	pc, r2, r0, lsr #16
   30588:	andeq	pc, r2, r0, lsr #16
   3058c:	andeq	pc, r2, r0, lsr #16
   30590:	andeq	pc, r2, r0, lsr #16
   30594:	andeq	pc, r2, r0, lsr #16
   30598:	andeq	pc, r2, r0, lsr #16
   3059c:	andeq	r0, r3, ip, asr #5
   305a0:	andeq	r0, r3, ip, asr #5
   305a4:	andeq	r0, r3, ip, asr #5
   305a8:	andeq	r0, r3, ip, asr #5
   305ac:	andeq	r0, r3, ip, asr #5
   305b0:	andeq	r0, r3, ip, asr #5
   305b4:	andeq	r0, r3, ip, asr #5
   305b8:	andeq	r0, r3, ip, asr #5
   305bc:	andeq	r0, r3, ip, asr #5
   305c0:	andeq	r0, r3, ip, asr #5
   305c4:	andeq	r0, r3, ip, asr #5
   305c8:	andeq	r0, r3, ip, asr #5
   305cc:	andeq	r0, r3, ip, asr #5
   305d0:	andeq	r0, r3, ip, asr #5
   305d4:	andeq	r0, r3, ip, asr #5
   305d8:	andeq	r0, r3, ip, asr #5
   305dc:	andeq	r0, r3, ip, asr #5
   305e0:	andeq	r0, r3, ip, asr #5
   305e4:	andeq	r0, r3, ip, asr #5
   305e8:	andeq	r0, r3, ip, asr #5
   305ec:	andeq	r0, r3, ip, asr #5
   305f0:	andeq	r0, r3, ip, asr #5
   305f4:	andeq	r0, r3, ip, asr #5
   305f8:	andeq	r0, r3, ip, asr #5
   305fc:	andeq	r0, r3, ip, asr #5
   30600:	andeq	r0, r3, ip, asr #5
   30604:	andeq	r0, r3, ip, asr #5
   30608:	andeq	r0, r3, ip, asr #5
   3060c:	andeq	r0, r3, ip, asr #5
   30610:	andeq	r0, r3, ip, asr #5
   30614:	andeq	r0, r3, ip, asr #5
   30618:	andeq	r0, r3, ip, asr #5
   3061c:	andeq	r0, r3, ip, asr #5
   30620:	andeq	pc, r2, ip, lsl #26
   30624:	andeq	r0, r3, ip, asr #5
   30628:	andeq	r0, r3, ip, asr #5
   3062c:	andeq	r0, r3, ip, asr #5
   30630:	andeq	r0, r3, ip, asr #5
   30634:	andeq	r0, r3, ip, asr #5
   30638:	andeq	r0, r3, ip, asr #5
   3063c:	andeq	r0, r3, ip, asr #5
   30640:	andeq	r0, r3, ip, asr #5
   30644:	andeq	r0, r3, ip, asr #5
   30648:	andeq	r0, r3, ip, asr #5
   3064c:	andeq	pc, r2, ip, ror r9	; <UNPREDICTABLE>
   30650:	andeq	r0, r3, ip, asr #5
   30654:	andeq	r0, r3, ip, asr #5
   30658:	andeq	r0, r3, ip, asr #5
   3065c:	andeq	r0, r3, ip, asr #5
   30660:	andeq	r0, r3, ip, asr #5
   30664:	andeq	r0, r3, ip, asr #5
   30668:	andeq	r0, r3, ip, asr #5
   3066c:	andeq	pc, r2, ip, asr #18
   30670:	andeq	r0, r3, ip, asr #5
   30674:	andeq	r0, r3, ip, asr #5
   30678:	andeq	r0, r3, ip, asr #5
   3067c:	andeq	r0, r3, ip, asr #5
   30680:	andeq	r0, r3, ip, asr #5
   30684:	andeq	pc, r2, ip, ror r9	; <UNPREDICTABLE>
   30688:	andeq	r0, r3, ip, asr #5
   3068c:	andeq	r0, r3, ip, asr #5
   30690:	andeq	r0, r3, ip, asr #5
   30694:	andeq	r0, r3, ip, asr #5
   30698:	andeq	r0, r3, ip, asr #5
   3069c:	andeq	r0, r3, ip, asr #5
   306a0:	andeq	pc, r2, r0, ror r8	; <UNPREDICTABLE>
   306a4:	mov	sl, r0
   306a8:	cmp	r4, sl
   306ac:	beq	2f864 <flatcc_json_parser_generic_json@@Base+0x23c>
   306b0:	cmp	r3, #93	; 0x5d
   306b4:	add	r6, r6, #1
   306b8:	bne	2f65c <flatcc_json_parser_generic_json@@Base+0x34>
   306bc:	mov	r0, sl
   306c0:	b	2f9e4 <flatcc_json_parser_generic_json@@Base+0x3bc>
   306c4:	mov	sl, r0
   306c8:	cmp	r4, sl
   306cc:	beq	2f864 <flatcc_json_parser_generic_json@@Base+0x23c>
   306d0:	cmp	r3, #125	; 0x7d
   306d4:	add	r6, r6, #1
   306d8:	bne	2f65c <flatcc_json_parser_generic_json@@Base+0x34>
   306dc:	b	306bc <flatcc_json_parser_generic_json@@Base+0x1094>
   306e0:	ldr	r3, [r5, #20]
   306e4:	cmp	r3, #0
   306e8:	bne	2f864 <flatcc_json_parser_generic_json@@Base+0x23c>
   306ec:	ldr	r3, [r5, #4]
   306f0:	mov	r2, #5
   306f4:	sub	r3, r0, r3
   306f8:	add	r3, r3, #1
   306fc:	str	r0, [r5, #32]
   30700:	str	r3, [r5, #16]
   30704:	mov	r0, r4
   30708:	str	r2, [r5, #20]
   3070c:	b	2f868 <flatcc_json_parser_generic_json@@Base+0x240>
   30710:	ldrb	r3, [r1, #2]
   30714:	cmp	r3, #32
   30718:	bls	2fed8 <flatcc_json_parser_generic_json@@Base+0x8b0>
   3071c:	add	sl, r1, #2
   30720:	sub	r2, r3, #34	; 0x22
   30724:	cmp	r2, #89	; 0x59
   30728:	ldrls	pc, [pc, r2, lsl #2]
   3072c:	b	2fac8 <flatcc_json_parser_generic_json@@Base+0x4a0>
   30730:	muleq	r3, r8, r8
   30734:	andeq	pc, r2, r8, asr #21
   30738:	andeq	pc, r2, r8, asr #21
   3073c:	andeq	pc, r2, r8, asr #21
   30740:	andeq	pc, r2, r8, asr #21
   30744:	andeq	pc, r2, r8, asr #21
   30748:	andeq	pc, r2, r8, asr #21
   3074c:	andeq	pc, r2, r8, asr #21
   30750:	andeq	pc, r2, r8, asr #21
   30754:	andeq	pc, r2, r8, asr #21
   30758:	andeq	pc, r2, r8, asr #21
   3075c:	andeq	pc, r2, ip, ror #15
   30760:	andeq	pc, r2, r8, asr #21
   30764:	andeq	pc, r2, r8, asr #21
   30768:	andeq	pc, r2, ip, ror #15
   3076c:	andeq	pc, r2, ip, ror #15
   30770:	andeq	pc, r2, ip, ror #15
   30774:	andeq	pc, r2, ip, ror #15
   30778:	andeq	pc, r2, ip, ror #15
   3077c:	andeq	pc, r2, ip, ror #15
   30780:	andeq	pc, r2, ip, ror #15
   30784:	andeq	pc, r2, ip, ror #15
   30788:	andeq	pc, r2, ip, ror #15
   3078c:	andeq	pc, r2, ip, ror #15
   30790:	andeq	pc, r2, r8, asr #21
   30794:	andeq	pc, r2, r8, asr #21
   30798:	andeq	pc, r2, r8, asr #21
   3079c:	andeq	pc, r2, r8, asr #21
   307a0:	andeq	pc, r2, r8, asr #21
   307a4:	andeq	pc, r2, r8, asr #21
   307a8:	andeq	pc, r2, r8, asr #21
   307ac:	andeq	pc, r2, r8, asr #21
   307b0:	andeq	pc, r2, r8, asr #21
   307b4:	andeq	pc, r2, r8, asr #21
   307b8:	andeq	pc, r2, r8, asr #21
   307bc:	andeq	pc, r2, r8, asr #21
   307c0:	andeq	pc, r2, r8, asr #21
   307c4:	andeq	pc, r2, r8, asr #21
   307c8:	andeq	pc, r2, r8, asr #21
   307cc:	andeq	pc, r2, r8, asr #21
   307d0:	andeq	pc, r2, r8, asr #21
   307d4:	andeq	pc, r2, r8, asr #21
   307d8:	andeq	pc, r2, r8, asr #21
   307dc:	andeq	pc, r2, r8, asr #21
   307e0:	andeq	pc, r2, r8, asr #21
   307e4:	andeq	pc, r2, r8, asr #21
   307e8:	andeq	pc, r2, r8, asr #21
   307ec:	andeq	pc, r2, r8, asr #21
   307f0:	andeq	pc, r2, r8, asr #21
   307f4:	andeq	pc, r2, r8, asr #21
   307f8:	andeq	pc, r2, r8, asr #21
   307fc:	andeq	pc, r2, r8, asr #21
   30800:	andeq	pc, r2, r8, asr #21
   30804:	andeq	pc, r2, r8, asr #21
   30808:	andeq	pc, r2, r8, asr #21
   3080c:	andeq	pc, r2, r8, asr #21
   30810:	andeq	pc, r2, r8, asr #21
   30814:	andeq	pc, r2, r0, lsl sp	; <UNPREDICTABLE>
   30818:	andeq	pc, r2, r8, asr #21
   3081c:	andeq	pc, r2, r8, asr #21
   30820:	andeq	pc, r2, r8, asr #21
   30824:	andeq	pc, r2, r8, asr #21
   30828:	andeq	pc, r2, r8, asr #21
   3082c:	andeq	pc, r2, r8, asr #21
   30830:	andeq	pc, r2, r8, asr #21
   30834:	andeq	pc, r2, r8, asr #21
   30838:	andeq	pc, r2, r8, asr #21
   3083c:	andeq	pc, r2, r8, asr #21
   30840:	andeq	pc, r2, r0, lsl #19
   30844:	andeq	pc, r2, r8, asr #21
   30848:	andeq	pc, r2, r8, asr #21
   3084c:	andeq	pc, r2, r8, asr #21
   30850:	andeq	pc, r2, r8, asr #21
   30854:	andeq	pc, r2, r8, asr #21
   30858:	andeq	pc, r2, r8, asr #21
   3085c:	andeq	pc, r2, r8, asr #21
   30860:	andeq	pc, r2, r0, asr r9	; <UNPREDICTABLE>
   30864:	andeq	pc, r2, r8, asr #21
   30868:	andeq	pc, r2, r8, asr #21
   3086c:	andeq	pc, r2, r8, asr #21
   30870:	andeq	pc, r2, r8, asr #21
   30874:	andeq	pc, r2, r8, asr #21
   30878:	andeq	pc, r2, r0, lsl #19
   3087c:	andeq	pc, r2, r8, asr #21
   30880:	andeq	pc, r2, r8, asr #21
   30884:	andeq	pc, r2, r8, asr #21
   30888:	andeq	pc, r2, r8, asr #21
   3088c:	andeq	pc, r2, r8, asr #21
   30890:	andeq	pc, r2, r8, asr #21
   30894:	andeq	pc, r2, r4, ror r8	; <UNPREDICTABLE>
   30898:	cmp	sl, r4
   3089c:	bne	302e8 <flatcc_json_parser_generic_json@@Base+0xcc0>
   308a0:	ldr	r3, [r5, #20]
   308a4:	cmp	r3, #0
   308a8:	bne	2f820 <flatcc_json_parser_generic_json@@Base+0x1f8>
   308ac:	ldr	r3, [r5, #4]
   308b0:	mov	r2, #16
   308b4:	sub	r3, r4, r3
   308b8:	add	r3, r3, #1
   308bc:	str	r4, [r5, #32]
   308c0:	str	r3, [r5, #16]
   308c4:	str	r2, [r5, #20]
   308c8:	b	2f820 <flatcc_json_parser_generic_json@@Base+0x1f8>
   308cc:	ldrb	r2, [r0, #1]
   308d0:	cmp	r2, #32
   308d4:	addhi	r0, r0, #1
   308d8:	bls	2fa18 <flatcc_json_parser_generic_json@@Base+0x3f0>
   308dc:	cmp	r4, r0
   308e0:	beq	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   308e4:	cmp	r2, #44	; 0x2c
   308e8:	bne	303e8 <flatcc_json_parser_generic_json@@Base+0xdc0>
   308ec:	add	sl, r0, #1
   308f0:	sub	r3, r4, sl
   308f4:	cmp	r3, #1
   308f8:	ble	3090c <flatcc_json_parser_generic_json@@Base+0x12e4>
   308fc:	ldrb	r3, [r0, #1]
   30900:	cmp	r3, #32
   30904:	bhi	30ddc <flatcc_json_parser_generic_json@@Base+0x17b4>
   30908:	beq	30dcc <flatcc_json_parser_generic_json@@Base+0x17a4>
   3090c:	cmp	r4, sl
   30910:	beq	30de4 <flatcc_json_parser_generic_json@@Base+0x17bc>
   30914:	ldrb	r3, [sl]
   30918:	cmp	r3, #32
   3091c:	bne	30cc4 <flatcc_json_parser_generic_json@@Base+0x169c>
   30920:	add	r2, sl, #1
   30924:	b	30934 <flatcc_json_parser_generic_json@@Base+0x130c>
   30928:	ldrb	r3, [r2], #1
   3092c:	cmp	r3, #32
   30930:	bne	30cc4 <flatcc_json_parser_generic_json@@Base+0x169c>
   30934:	cmp	r2, r4
   30938:	mov	sl, r2
   3093c:	bne	30928 <flatcc_json_parser_generic_json@@Base+0x1300>
   30940:	b	30de8 <flatcc_json_parser_generic_json@@Base+0x17c0>
   30944:	andeq	r1, r4, r4, asr ip
   30948:	andeq	r1, r4, ip, asr ip
   3094c:	andeq	r1, r4, r4, ror #24
   30950:	cmp	r3, #1
   30954:	ble	30968 <flatcc_json_parser_generic_json@@Base+0x1340>
   30958:	ldrb	r2, [r0]
   3095c:	cmp	r2, #32
   30960:	bhi	30a98 <flatcc_json_parser_generic_json@@Base+0x1470>
   30964:	beq	30a88 <flatcc_json_parser_generic_json@@Base+0x1460>
   30968:	cmp	r4, r0
   3096c:	beq	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   30970:	ldrb	r2, [r0]
   30974:	cmp	r2, #32
   30978:	bne	30998 <flatcc_json_parser_generic_json@@Base+0x1370>
   3097c:	add	r3, r0, #1
   30980:	cmp	r3, r4
   30984:	mov	r0, r3
   30988:	beq	2f828 <flatcc_json_parser_generic_json@@Base+0x200>
   3098c:	ldrb	r2, [r3], #1
   30990:	cmp	r2, #32
   30994:	beq	30980 <flatcc_json_parser_generic_json@@Base+0x1358>
   30998:	cmp	r2, #32
   3099c:	bhi	30a58 <flatcc_json_parser_generic_json@@Base+0x1430>
   309a0:	sub	r2, r2, #9
   309a4:	cmp	r2, #23
   309a8:	ldrls	pc, [pc, r2, lsl #2]
   309ac:	b	30410 <flatcc_json_parser_generic_json@@Base+0xde8>
   309b0:	andeq	r0, r3, r0, lsl #21
   309b4:	andeq	r0, r3, r0, lsr sl
   309b8:	andeq	r0, r3, r0, lsl r4
   309bc:	andeq	r0, r3, r0, lsl r4
   309c0:	andeq	r0, r3, r0, lsl sl
   309c4:	andeq	r0, r3, r0, lsl r4
   309c8:	andeq	r0, r3, r0, lsl r4
   309cc:	andeq	r0, r3, r0, lsl r4
   309d0:	andeq	r0, r3, r0, lsl r4
   309d4:	andeq	r0, r3, r0, lsl r4
   309d8:	andeq	r0, r3, r0, lsl r4
   309dc:	andeq	r0, r3, r0, lsl r4
   309e0:	andeq	r0, r3, r0, lsl r4
   309e4:	andeq	r0, r3, r0, lsl r4
   309e8:	andeq	r0, r3, r0, lsl r4
   309ec:	andeq	r0, r3, r0, lsl r4
   309f0:	andeq	r0, r3, r0, lsl r4
   309f4:	andeq	r0, r3, r0, lsl r4
   309f8:	andeq	r0, r3, r0, lsl r4
   309fc:	andeq	r0, r3, r0, lsl r4
   30a00:	andeq	r0, r3, r0, lsl r4
   30a04:	andeq	r0, r3, r0, lsl r4
   30a08:	andeq	r0, r3, r0, lsl r4
   30a0c:	andeq	r0, r3, r8, ror #18
   30a10:	sub	r3, r4, r0
   30a14:	cmp	r3, #1
   30a18:	movle	r3, r8
   30a1c:	ldrbgt	r3, [r0, #1]
   30a20:	subgt	r3, r3, #10
   30a24:	clzgt	r3, r3
   30a28:	lsrgt	r3, r3, #5
   30a2c:	add	r0, r0, r3
   30a30:	ldr	r3, [r5, #12]
   30a34:	add	r0, r0, #1
   30a38:	add	r3, r3, #1
   30a3c:	str	r0, [r5, #4]
   30a40:	str	r3, [r5, #12]
   30a44:	cmp	r4, r0
   30a48:	beq	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   30a4c:	ldrb	r2, [r0]
   30a50:	cmp	r2, #32
   30a54:	bls	309a0 <flatcc_json_parser_generic_json@@Base+0x1378>
   30a58:	cmp	r2, #44	; 0x2c
   30a5c:	beq	30aa8 <flatcc_json_parser_generic_json@@Base+0x1480>
   30a60:	cmp	r2, #93	; 0x5d
   30a64:	beq	30e00 <flatcc_json_parser_generic_json@@Base+0x17d8>
   30a68:	ldr	r3, [r5, #20]
   30a6c:	cmp	r3, #0
   30a70:	bne	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   30a74:	ldr	r3, [r5, #4]
   30a78:	mov	r2, #9
   30a7c:	b	30424 <flatcc_json_parser_generic_json@@Base+0xdfc>
   30a80:	add	r0, r0, #1
   30a84:	b	30a44 <flatcc_json_parser_generic_json@@Base+0x141c>
   30a88:	ldrb	r2, [r0, #1]
   30a8c:	cmp	r2, #32
   30a90:	addhi	r0, r0, #1
   30a94:	bls	30968 <flatcc_json_parser_generic_json@@Base+0x1340>
   30a98:	cmp	r4, r0
   30a9c:	beq	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   30aa0:	cmp	r2, #44	; 0x2c
   30aa4:	bne	30a60 <flatcc_json_parser_generic_json@@Base+0x1438>
   30aa8:	add	sl, r0, #1
   30aac:	sub	r3, r4, sl
   30ab0:	cmp	r3, #1
   30ab4:	ble	30ac8 <flatcc_json_parser_generic_json@@Base+0x14a0>
   30ab8:	ldrb	r3, [r0, #1]
   30abc:	cmp	r3, #32
   30ac0:	bhi	310cc <flatcc_json_parser_generic_json@@Base+0x1aa4>
   30ac4:	beq	310bc <flatcc_json_parser_generic_json@@Base+0x1a94>
   30ac8:	cmp	r4, sl
   30acc:	beq	310d4 <flatcc_json_parser_generic_json@@Base+0x1aac>
   30ad0:	ldrb	r3, [sl]
   30ad4:	cmp	r3, #32
   30ad8:	bne	30f20 <flatcc_json_parser_generic_json@@Base+0x18f8>
   30adc:	add	r2, sl, #1
   30ae0:	b	30af0 <flatcc_json_parser_generic_json@@Base+0x14c8>
   30ae4:	ldrb	r3, [r2], #1
   30ae8:	cmp	r3, #32
   30aec:	bne	30f20 <flatcc_json_parser_generic_json@@Base+0x18f8>
   30af0:	cmp	r2, r4
   30af4:	mov	sl, r2
   30af8:	bne	30ae4 <flatcc_json_parser_generic_json@@Base+0x14bc>
   30afc:	ldr	r3, [r5, #20]
   30b00:	cmp	r3, #0
   30b04:	bne	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   30b08:	ldr	r3, [r5, #4]
   30b0c:	mov	r2, #9
   30b10:	sub	r3, sl, r3
   30b14:	add	r3, r3, #1
   30b18:	str	sl, [r5, #32]
   30b1c:	str	r3, [r5, #16]
   30b20:	str	r2, [r5, #20]
   30b24:	mov	r0, r4
   30b28:	b	2f828 <flatcc_json_parser_generic_json@@Base+0x200>
   30b2c:	cmp	r3, #31
   30b30:	bhi	30b60 <flatcc_json_parser_generic_json@@Base+0x1538>
   30b34:	ldr	r3, [r5, #20]
   30b38:	cmp	r3, #0
   30b3c:	bne	30364 <flatcc_json_parser_generic_json@@Base+0xd3c>
   30b40:	ldr	r3, [r5, #4]
   30b44:	str	r0, [r5, #32]
   30b48:	sub	r3, r0, r3
   30b4c:	add	r3, r3, #1
   30b50:	str	sl, [r5, #20]
   30b54:	str	r3, [r5, #16]
   30b58:	mov	r0, r4
   30b5c:	b	30368 <flatcc_json_parser_generic_json@@Base+0xd40>
   30b60:	cmp	r3, #34	; 0x22
   30b64:	bne	30368 <flatcc_json_parser_generic_json@@Base+0xd40>
   30b68:	b	30390 <flatcc_json_parser_generic_json@@Base+0xd68>
   30b6c:	add	r3, r0, #1
   30b70:	sub	r2, r4, r3
   30b74:	cmp	r2, #1
   30b78:	ble	30b8c <flatcc_json_parser_generic_json@@Base+0x1564>
   30b7c:	ldrb	r2, [r0, #1]
   30b80:	cmp	r2, #32
   30b84:	bhi	312c0 <flatcc_json_parser_generic_json@@Base+0x1c98>
   30b88:	beq	31194 <flatcc_json_parser_generic_json@@Base+0x1b6c>
   30b8c:	cmp	r4, r3
   30b90:	beq	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   30b94:	ldrb	r2, [r3]
   30b98:	cmp	r2, #32
   30b9c:	bne	315b4 <flatcc_json_parser_generic_json@@Base+0x1f8c>
   30ba0:	add	r3, r3, #1
   30ba4:	cmp	r3, r4
   30ba8:	mov	r0, r3
   30bac:	beq	2f828 <flatcc_json_parser_generic_json@@Base+0x200>
   30bb0:	ldrb	r2, [r3], #1
   30bb4:	cmp	r2, #32
   30bb8:	beq	30ba4 <flatcc_json_parser_generic_json@@Base+0x157c>
   30bbc:	cmp	r2, #32
   30bc0:	mov	r3, r0
   30bc4:	bhi	30c80 <flatcc_json_parser_generic_json@@Base+0x1658>
   30bc8:	sub	r2, r2, #9
   30bcc:	cmp	r2, #23
   30bd0:	ldrls	pc, [pc, r2, lsl #2]
   30bd4:	b	30c94 <flatcc_json_parser_generic_json@@Base+0x166c>
   30bd8:	andeq	r0, r3, ip, lsl #25
   30bdc:	andeq	r0, r3, r8, asr ip
   30be0:	muleq	r3, r4, ip
   30be4:	muleq	r3, r4, ip
   30be8:	andeq	r0, r3, r8, lsr ip
   30bec:	muleq	r3, r4, ip
   30bf0:	muleq	r3, r4, ip
   30bf4:	muleq	r3, r4, ip
   30bf8:	muleq	r3, r4, ip
   30bfc:	muleq	r3, r4, ip
   30c00:	muleq	r3, r4, ip
   30c04:	muleq	r3, r4, ip
   30c08:	muleq	r3, r4, ip
   30c0c:	muleq	r3, r4, ip
   30c10:	muleq	r3, r4, ip
   30c14:	muleq	r3, r4, ip
   30c18:	muleq	r3, r4, ip
   30c1c:	muleq	r3, r4, ip
   30c20:	muleq	r3, r4, ip
   30c24:	muleq	r3, r4, ip
   30c28:	muleq	r3, r4, ip
   30c2c:	muleq	r3, r4, ip
   30c30:	muleq	r3, r4, ip
   30c34:	andeq	r0, r3, ip, lsl #23
   30c38:	sub	r2, r4, r3
   30c3c:	cmp	r2, #1
   30c40:	movle	r2, r8
   30c44:	ldrbgt	r2, [r3, #1]
   30c48:	subgt	r2, r2, #10
   30c4c:	clzgt	r2, r2
   30c50:	lsrgt	r2, r2, #5
   30c54:	add	r3, r3, r2
   30c58:	ldr	r2, [r5, #12]
   30c5c:	add	r3, r3, #1
   30c60:	add	r2, r2, #1
   30c64:	str	r3, [r5, #4]
   30c68:	str	r2, [r5, #12]
   30c6c:	cmp	r4, r3
   30c70:	beq	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   30c74:	ldrb	r2, [r3]
   30c78:	cmp	r2, #32
   30c7c:	bls	30bc8 <flatcc_json_parser_generic_json@@Base+0x15a0>
   30c80:	mov	r0, r3
   30c84:	mov	r6, r1
   30c88:	b	2f9e4 <flatcc_json_parser_generic_json@@Base+0x3bc>
   30c8c:	add	r3, r3, #1
   30c90:	b	30c6c <flatcc_json_parser_generic_json@@Base+0x1644>
   30c94:	ldr	r2, [r5, #20]
   30c98:	cmp	r2, #0
   30c9c:	bne	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   30ca0:	ldr	r2, [r5, #4]
   30ca4:	mov	r0, #5
   30ca8:	sub	r2, r3, r2
   30cac:	add	r2, r2, #1
   30cb0:	str	r0, [r5, #20]
   30cb4:	str	r3, [r5, #32]
   30cb8:	str	r2, [r5, #16]
   30cbc:	mov	r0, r4
   30cc0:	b	2f828 <flatcc_json_parser_generic_json@@Base+0x200>
   30cc4:	cmp	r3, #32
   30cc8:	bhi	30d84 <flatcc_json_parser_generic_json@@Base+0x175c>
   30ccc:	sub	r3, r3, #9
   30cd0:	cmp	r3, #23
   30cd4:	ldrls	pc, [pc, r3, lsl #2]
   30cd8:	b	30da0 <flatcc_json_parser_generic_json@@Base+0x1778>
   30cdc:	muleq	r3, r8, sp
   30ce0:	andeq	r0, r3, ip, asr sp
   30ce4:	andeq	r0, r3, r0, lsr #27
   30ce8:	andeq	r0, r3, r0, lsr #27
   30cec:	andeq	r0, r3, ip, lsr sp
   30cf0:	andeq	r0, r3, r0, lsr #27
   30cf4:	andeq	r0, r3, r0, lsr #27
   30cf8:	andeq	r0, r3, r0, lsr #27
   30cfc:	andeq	r0, r3, r0, lsr #27
   30d00:	andeq	r0, r3, r0, lsr #27
   30d04:	andeq	r0, r3, r0, lsr #27
   30d08:	andeq	r0, r3, r0, lsr #27
   30d0c:	andeq	r0, r3, r0, lsr #27
   30d10:	andeq	r0, r3, r0, lsr #27
   30d14:	andeq	r0, r3, r0, lsr #27
   30d18:	andeq	r0, r3, r0, lsr #27
   30d1c:	andeq	r0, r3, r0, lsr #27
   30d20:	andeq	r0, r3, r0, lsr #27
   30d24:	andeq	r0, r3, r0, lsr #27
   30d28:	andeq	r0, r3, r0, lsr #27
   30d2c:	andeq	r0, r3, r0, lsr #27
   30d30:	andeq	r0, r3, r0, lsr #27
   30d34:	andeq	r0, r3, r0, lsr #27
   30d38:	andeq	r0, r3, ip, lsl #18
   30d3c:	sub	r3, r4, sl
   30d40:	cmp	r3, #1
   30d44:	movle	r3, r8
   30d48:	ldrbgt	r3, [sl, #1]
   30d4c:	subgt	r3, r3, #10
   30d50:	clzgt	r3, r3
   30d54:	lsrgt	r3, r3, #5
   30d58:	add	sl, sl, r3
   30d5c:	ldr	r3, [r5, #12]
   30d60:	add	sl, sl, #1
   30d64:	add	r3, r3, #1
   30d68:	str	sl, [r5, #4]
   30d6c:	str	r3, [r5, #12]
   30d70:	cmp	r4, sl
   30d74:	beq	30de4 <flatcc_json_parser_generic_json@@Base+0x17bc>
   30d78:	ldrb	r3, [sl]
   30d7c:	cmp	r3, #32
   30d80:	bls	30ccc <flatcc_json_parser_generic_json@@Base+0x16a4>
   30d84:	cmp	r3, #125	; 0x7d
   30d88:	beq	31290 <flatcc_json_parser_generic_json@@Base+0x1c68>
   30d8c:	cmp	r4, sl
   30d90:	bne	2f65c <flatcc_json_parser_generic_json@@Base+0x34>
   30d94:	b	2f864 <flatcc_json_parser_generic_json@@Base+0x23c>
   30d98:	add	sl, sl, #1
   30d9c:	b	30d70 <flatcc_json_parser_generic_json@@Base+0x1748>
   30da0:	ldr	r3, [r5, #20]
   30da4:	cmp	r3, #0
   30da8:	bne	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   30dac:	ldr	r3, [r5, #4]
   30db0:	mov	r2, #5
   30db4:	sub	r3, sl, r3
   30db8:	add	r3, r3, #1
   30dbc:	str	sl, [r5, #32]
   30dc0:	str	r3, [r5, #16]
   30dc4:	str	r2, [r5, #20]
   30dc8:	b	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   30dcc:	ldrb	r3, [r0, #2]
   30dd0:	cmp	r3, #32
   30dd4:	addhi	sl, r0, #2
   30dd8:	bls	3090c <flatcc_json_parser_generic_json@@Base+0x12e4>
   30ddc:	cmp	r4, sl
   30de0:	bne	30d84 <flatcc_json_parser_generic_json@@Base+0x175c>
   30de4:	mov	sl, r4
   30de8:	ldr	r3, [r5, #20]
   30dec:	cmp	r3, #0
   30df0:	bne	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   30df4:	ldr	r3, [r5, #4]
   30df8:	mov	r2, #10
   30dfc:	b	30b10 <flatcc_json_parser_generic_json@@Base+0x14e8>
   30e00:	add	r3, r0, #1
   30e04:	sub	r2, r4, r3
   30e08:	cmp	r2, #1
   30e0c:	ble	30e20 <flatcc_json_parser_generic_json@@Base+0x17f8>
   30e10:	ldrb	r2, [r0, #1]
   30e14:	cmp	r2, #32
   30e18:	bhi	312c0 <flatcc_json_parser_generic_json@@Base+0x1c98>
   30e1c:	beq	315a4 <flatcc_json_parser_generic_json@@Base+0x1f7c>
   30e20:	cmp	r4, r3
   30e24:	beq	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   30e28:	ldrb	r2, [r3]
   30e2c:	cmp	r2, #32
   30e30:	bne	31678 <flatcc_json_parser_generic_json@@Base+0x2050>
   30e34:	add	r3, r3, #1
   30e38:	cmp	r3, r4
   30e3c:	mov	r0, r3
   30e40:	beq	2f828 <flatcc_json_parser_generic_json@@Base+0x200>
   30e44:	ldrb	r2, [r3], #1
   30e48:	cmp	r2, #32
   30e4c:	beq	30e38 <flatcc_json_parser_generic_json@@Base+0x1810>
   30e50:	cmp	r2, #32
   30e54:	mov	r3, r0
   30e58:	bhi	30c80 <flatcc_json_parser_generic_json@@Base+0x1658>
   30e5c:	sub	r2, r2, #9
   30e60:	cmp	r2, #23
   30e64:	ldrls	pc, [pc, r2, lsl #2]
   30e68:	b	30c94 <flatcc_json_parser_generic_json@@Base+0x166c>
   30e6c:	andeq	r0, r3, r8, lsl pc
   30e70:	andeq	r0, r3, ip, ror #29
   30e74:	muleq	r3, r4, ip
   30e78:	muleq	r3, r4, ip
   30e7c:	andeq	r0, r3, ip, asr #29
   30e80:	muleq	r3, r4, ip
   30e84:	muleq	r3, r4, ip
   30e88:	muleq	r3, r4, ip
   30e8c:	muleq	r3, r4, ip
   30e90:	muleq	r3, r4, ip
   30e94:	muleq	r3, r4, ip
   30e98:	muleq	r3, r4, ip
   30e9c:	muleq	r3, r4, ip
   30ea0:	muleq	r3, r4, ip
   30ea4:	muleq	r3, r4, ip
   30ea8:	muleq	r3, r4, ip
   30eac:	muleq	r3, r4, ip
   30eb0:	muleq	r3, r4, ip
   30eb4:	muleq	r3, r4, ip
   30eb8:	muleq	r3, r4, ip
   30ebc:	muleq	r3, r4, ip
   30ec0:	muleq	r3, r4, ip
   30ec4:	muleq	r3, r4, ip
   30ec8:	andeq	r0, r3, r0, lsr #28
   30ecc:	sub	r2, r4, r3
   30ed0:	cmp	r2, #1
   30ed4:	movle	r2, r8
   30ed8:	ldrbgt	r2, [r3, #1]
   30edc:	subgt	r2, r2, #10
   30ee0:	clzgt	r2, r2
   30ee4:	lsrgt	r2, r2, #5
   30ee8:	add	r3, r3, r2
   30eec:	ldr	r2, [r5, #12]
   30ef0:	add	r3, r3, #1
   30ef4:	add	r2, r2, #1
   30ef8:	str	r3, [r5, #4]
   30efc:	str	r2, [r5, #12]
   30f00:	cmp	r4, r3
   30f04:	beq	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   30f08:	ldrb	r2, [r3]
   30f0c:	cmp	r2, #32
   30f10:	bls	30e5c <flatcc_json_parser_generic_json@@Base+0x1834>
   30f14:	b	30c80 <flatcc_json_parser_generic_json@@Base+0x1658>
   30f18:	add	r3, r3, #1
   30f1c:	b	30f00 <flatcc_json_parser_generic_json@@Base+0x18d8>
   30f20:	cmp	r3, #32
   30f24:	bhi	30fe0 <flatcc_json_parser_generic_json@@Base+0x19b8>
   30f28:	sub	r3, r3, #9
   30f2c:	cmp	r3, #23
   30f30:	ldrls	pc, [pc, r3, lsl #2]
   30f34:	b	30da0 <flatcc_json_parser_generic_json@@Base+0x1778>
   30f38:	strheq	r1, [r3], -r4
   30f3c:			; <UNDEFINED> instruction: 0x00030fb8
   30f40:	andeq	r0, r3, r0, lsr #27
   30f44:	andeq	r0, r3, r0, lsr #27
   30f48:	muleq	r3, r8, pc	; <UNPREDICTABLE>
   30f4c:	andeq	r0, r3, r0, lsr #27
   30f50:	andeq	r0, r3, r0, lsr #27
   30f54:	andeq	r0, r3, r0, lsr #27
   30f58:	andeq	r0, r3, r0, lsr #27
   30f5c:	andeq	r0, r3, r0, lsr #27
   30f60:	andeq	r0, r3, r0, lsr #27
   30f64:	andeq	r0, r3, r0, lsr #27
   30f68:	andeq	r0, r3, r0, lsr #27
   30f6c:	andeq	r0, r3, r0, lsr #27
   30f70:	andeq	r0, r3, r0, lsr #27
   30f74:	andeq	r0, r3, r0, lsr #27
   30f78:	andeq	r0, r3, r0, lsr #27
   30f7c:	andeq	r0, r3, r0, lsr #27
   30f80:	andeq	r0, r3, r0, lsr #27
   30f84:	andeq	r0, r3, r0, lsr #27
   30f88:	andeq	r0, r3, r0, lsr #27
   30f8c:	andeq	r0, r3, r0, lsr #27
   30f90:	andeq	r0, r3, r0, lsr #27
   30f94:	andeq	r0, r3, r8, asr #21
   30f98:	sub	r3, r4, sl
   30f9c:	cmp	r3, #1
   30fa0:	movle	r3, r8
   30fa4:	ldrbgt	r3, [sl, #1]
   30fa8:	subgt	r3, r3, #10
   30fac:	clzgt	r3, r3
   30fb0:	lsrgt	r3, r3, #5
   30fb4:	add	sl, sl, r3
   30fb8:	ldr	r3, [r5, #12]
   30fbc:	add	sl, sl, #1
   30fc0:	add	r3, r3, #1
   30fc4:	str	sl, [r5, #4]
   30fc8:	str	r3, [r5, #12]
   30fcc:	cmp	r4, sl
   30fd0:	beq	310d4 <flatcc_json_parser_generic_json@@Base+0x1aac>
   30fd4:	ldrb	r3, [sl]
   30fd8:	cmp	r3, #32
   30fdc:	bls	30f28 <flatcc_json_parser_generic_json@@Base+0x1900>
   30fe0:	cmp	r3, #93	; 0x5d
   30fe4:	bne	30d8c <flatcc_json_parser_generic_json@@Base+0x1764>
   30fe8:	add	r3, sl, #1
   30fec:	sub	r2, r4, r3
   30ff0:	cmp	r2, #1
   30ff4:	ble	31008 <flatcc_json_parser_generic_json@@Base+0x19e0>
   30ff8:	ldrb	r2, [sl, #1]
   30ffc:	cmp	r2, #32
   31000:	bhi	312c0 <flatcc_json_parser_generic_json@@Base+0x1c98>
   31004:	beq	31688 <flatcc_json_parser_generic_json@@Base+0x2060>
   31008:	mov	r0, r3
   3100c:	cmp	r4, r0
   31010:	beq	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   31014:	ldrb	r3, [r0]
   31018:	cmp	r3, #32
   3101c:	bne	3103c <flatcc_json_parser_generic_json@@Base+0x1a14>
   31020:	add	r2, r0, #1
   31024:	cmp	r2, r4
   31028:	mov	r0, r2
   3102c:	beq	2f828 <flatcc_json_parser_generic_json@@Base+0x200>
   31030:	ldrb	r3, [r2], #1
   31034:	cmp	r3, #32
   31038:	beq	31024 <flatcc_json_parser_generic_json@@Base+0x19fc>
   3103c:	cmp	r3, #32
   31040:	bhi	3150c <flatcc_json_parser_generic_json@@Base+0x1ee4>
   31044:	sub	r3, r3, #9
   31048:	cmp	r3, #23
   3104c:	ldrls	pc, [pc, r3, lsl #2]
   31050:	b	30410 <flatcc_json_parser_generic_json@@Base+0xde8>
   31054:	andeq	r1, r3, r4, lsl r5
   31058:	andeq	r1, r3, r4, ror #9
   3105c:	andeq	r0, r3, r0, lsl r4
   31060:	andeq	r0, r3, r0, lsl r4
   31064:	andeq	r1, r3, r4, asr #9
   31068:	andeq	r0, r3, r0, lsl r4
   3106c:	andeq	r0, r3, r0, lsl r4
   31070:	andeq	r0, r3, r0, lsl r4
   31074:	andeq	r0, r3, r0, lsl r4
   31078:	andeq	r0, r3, r0, lsl r4
   3107c:	andeq	r0, r3, r0, lsl r4
   31080:	andeq	r0, r3, r0, lsl r4
   31084:	andeq	r0, r3, r0, lsl r4
   31088:	andeq	r0, r3, r0, lsl r4
   3108c:	andeq	r0, r3, r0, lsl r4
   31090:	andeq	r0, r3, r0, lsl r4
   31094:	andeq	r0, r3, r0, lsl r4
   31098:	andeq	r0, r3, r0, lsl r4
   3109c:	andeq	r0, r3, r0, lsl r4
   310a0:	andeq	r0, r3, r0, lsl r4
   310a4:	andeq	r0, r3, r0, lsl r4
   310a8:	andeq	r0, r3, r0, lsl r4
   310ac:	andeq	r0, r3, r0, lsl r4
   310b0:	andeq	r1, r3, ip
   310b4:	add	sl, sl, #1
   310b8:	b	30fcc <flatcc_json_parser_generic_json@@Base+0x19a4>
   310bc:	ldrb	r3, [r0, #2]
   310c0:	cmp	r3, #32
   310c4:	addhi	sl, r0, #2
   310c8:	bls	30ac8 <flatcc_json_parser_generic_json@@Base+0x14a0>
   310cc:	cmp	r4, sl
   310d0:	bne	30fe0 <flatcc_json_parser_generic_json@@Base+0x19b8>
   310d4:	mov	sl, r4
   310d8:	b	30afc <flatcc_json_parser_generic_json@@Base+0x14d4>
   310dc:	add	r3, sl, #1
   310e0:	cmp	r4, r3
   310e4:	beq	315dc <flatcc_json_parser_generic_json@@Base+0x1fb4>
   310e8:	ldrb	r1, [sl, #1]
   310ec:	cmp	r1, #34	; 0x22
   310f0:	bne	31110 <flatcc_json_parser_generic_json@@Base+0x1ae8>
   310f4:	b	31130 <flatcc_json_parser_generic_json@@Base+0x1b08>
   310f8:	add	r3, r2, #1
   310fc:	cmp	r4, r3
   31100:	beq	315dc <flatcc_json_parser_generic_json@@Base+0x1fb4>
   31104:	ldrb	r1, [r2, #1]
   31108:	cmp	r1, #34	; 0x22
   3110c:	beq	31130 <flatcc_json_parser_generic_json@@Base+0x1b08>
   31110:	cmp	r1, #92	; 0x5c
   31114:	mov	r2, r3
   31118:	bne	310f8 <flatcc_json_parser_generic_json@@Base+0x1ad0>
   3111c:	sub	r2, r4, r3
   31120:	cmp	r2, #1
   31124:	ble	315e0 <flatcc_json_parser_generic_json@@Base+0x1fb8>
   31128:	add	r2, r3, #1
   3112c:	b	310f8 <flatcc_json_parser_generic_json@@Base+0x1ad0>
   31130:	add	r1, r3, #1
   31134:	sub	r2, r4, r1
   31138:	cmp	r2, #1
   3113c:	ble	2fb30 <flatcc_json_parser_generic_json@@Base+0x508>
   31140:	ldrb	r2, [r3, #1]
   31144:	cmp	r2, #32
   31148:	bhi	31160 <flatcc_json_parser_generic_json@@Base+0x1b38>
   3114c:	bne	2fb30 <flatcc_json_parser_generic_json@@Base+0x508>
   31150:	ldrb	r2, [r3, #2]
   31154:	cmp	r2, #32
   31158:	addhi	r1, r3, #2
   3115c:	bls	2fb30 <flatcc_json_parser_generic_json@@Base+0x508>
   31160:	cmp	r4, r1
   31164:	bne	2fea8 <flatcc_json_parser_generic_json@@Base+0x880>
   31168:	mov	r1, r4
   3116c:	b	2fb64 <flatcc_json_parser_generic_json@@Base+0x53c>
   31170:	ldr	r3, [r5, #4]
   31174:	mov	r2, #20
   31178:	sub	r3, r0, r3
   3117c:	add	r3, r3, #1
   31180:	str	r0, [r5, #32]
   31184:	str	r2, [r5, #20]
   31188:	str	r3, [r5, #16]
   3118c:	mov	r0, r4
   31190:	b	30368 <flatcc_json_parser_generic_json@@Base+0xd40>
   31194:	ldrb	r2, [r0, #2]
   31198:	cmp	r2, #32
   3119c:	bls	30b8c <flatcc_json_parser_generic_json@@Base+0x1564>
   311a0:	add	r3, r0, #2
   311a4:	b	312c0 <flatcc_json_parser_generic_json@@Base+0x1c98>
   311a8:	add	r0, sl, #1
   311ac:	cmp	r4, r0
   311b0:	beq	316a4 <flatcc_json_parser_generic_json@@Base+0x207c>
   311b4:	ldrb	r3, [sl, #1]
   311b8:	cmp	r3, #46	; 0x2e
   311bc:	beq	31534 <flatcc_json_parser_generic_json@@Base+0x1f0c>
   311c0:	and	r2, r3, #223	; 0xdf
   311c4:	cmp	r2, #69	; 0x45
   311c8:	bne	313e0 <flatcc_json_parser_generic_json@@Base+0x1db8>
   311cc:	add	r2, r0, #1
   311d0:	cmp	r4, r2
   311d4:	beq	3151c <flatcc_json_parser_generic_json@@Base+0x1ef4>
   311d8:	ldrb	r3, [r0, #1]
   311dc:	sub	r1, r3, #43	; 0x2b
   311e0:	tst	r1, #253	; 0xfd
   311e4:	bne	311f8 <flatcc_json_parser_generic_json@@Base+0x1bd0>
   311e8:	add	r2, r0, #2
   311ec:	cmp	r4, r2
   311f0:	beq	31574 <flatcc_json_parser_generic_json@@Base+0x1f4c>
   311f4:	ldrb	r3, [r0, #2]
   311f8:	sub	r3, r3, #48	; 0x30
   311fc:	cmp	r3, #9
   31200:	bhi	31578 <flatcc_json_parser_generic_json@@Base+0x1f50>
   31204:	add	r0, r2, #1
   31208:	cmp	r4, r0
   3120c:	beq	316a4 <flatcc_json_parser_generic_json@@Base+0x207c>
   31210:	ldrb	r3, [r2, #1]
   31214:	sub	r1, r3, #48	; 0x30
   31218:	cmp	r1, #9
   3121c:	bhi	313e0 <flatcc_json_parser_generic_json@@Base+0x1db8>
   31220:	add	r2, r2, #2
   31224:	b	31238 <flatcc_json_parser_generic_json@@Base+0x1c10>
   31228:	ldrb	r3, [r2], #1
   3122c:	sub	r1, r3, #48	; 0x30
   31230:	cmp	r1, #9
   31234:	bhi	313e0 <flatcc_json_parser_generic_json@@Base+0x1db8>
   31238:	cmp	r2, r4
   3123c:	mov	r0, r2
   31240:	bne	31228 <flatcc_json_parser_generic_json@@Base+0x1c00>
   31244:	ldr	r3, [r5, #20]
   31248:	cmp	r3, #0
   3124c:	bne	2f820 <flatcc_json_parser_generic_json@@Base+0x1f8>
   31250:	ldr	r3, [r5, #4]
   31254:	mov	r2, #6
   31258:	sub	r3, r0, r3
   3125c:	add	r3, r3, #1
   31260:	str	r0, [r5, #32]
   31264:	str	r3, [r5, #16]
   31268:	str	r2, [r5, #20]
   3126c:	b	2f820 <flatcc_json_parser_generic_json@@Base+0x1f8>
   31270:	ldr	r3, [r5, #4]
   31274:	mov	r2, #5
   31278:	sub	r3, sl, r3
   3127c:	add	r3, r3, #1
   31280:	str	sl, [r5, #32]
   31284:	str	r3, [r5, #16]
   31288:	str	r2, [r5, #20]
   3128c:	b	2fb2c <flatcc_json_parser_generic_json@@Base+0x504>
   31290:	add	r3, sl, #1
   31294:	sub	r2, r4, r3
   31298:	cmp	r2, #1
   3129c:	ble	312cc <flatcc_json_parser_generic_json@@Base+0x1ca4>
   312a0:	ldrb	r2, [sl, #1]
   312a4:	cmp	r2, #32
   312a8:	bhi	312c0 <flatcc_json_parser_generic_json@@Base+0x1c98>
   312ac:	bne	312cc <flatcc_json_parser_generic_json@@Base+0x1ca4>
   312b0:	ldrb	r2, [sl, #2]
   312b4:	cmp	r2, #32
   312b8:	bls	312cc <flatcc_json_parser_generic_json@@Base+0x1ca4>
   312bc:	add	r3, sl, #2
   312c0:	cmp	r4, r3
   312c4:	bne	30c80 <flatcc_json_parser_generic_json@@Base+0x1658>
   312c8:	b	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   312cc:	cmp	r4, r3
   312d0:	beq	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   312d4:	ldrb	r2, [r3]
   312d8:	cmp	r2, #32
   312dc:	bne	31680 <flatcc_json_parser_generic_json@@Base+0x2058>
   312e0:	add	r3, r3, #1
   312e4:	cmp	r4, r3
   312e8:	mov	r0, r3
   312ec:	beq	2f828 <flatcc_json_parser_generic_json@@Base+0x200>
   312f0:	ldrb	r2, [r3], #1
   312f4:	cmp	r2, #32
   312f8:	beq	312e4 <flatcc_json_parser_generic_json@@Base+0x1cbc>
   312fc:	cmp	r2, #32
   31300:	mov	r3, r0
   31304:	bhi	30c80 <flatcc_json_parser_generic_json@@Base+0x1658>
   31308:	sub	r2, r2, #9
   3130c:	cmp	r2, #23
   31310:	ldrls	pc, [pc, r2, lsl #2]
   31314:	b	30c94 <flatcc_json_parser_generic_json@@Base+0x166c>
   31318:	andeq	r1, r3, r8, ror r4
   3131c:	andeq	r1, r3, ip, asr #8
   31320:	muleq	r3, r4, ip
   31324:	muleq	r3, r4, ip
   31328:	andeq	r1, r3, ip, lsr #8
   3132c:	muleq	r3, r4, ip
   31330:	muleq	r3, r4, ip
   31334:	muleq	r3, r4, ip
   31338:	muleq	r3, r4, ip
   3133c:	muleq	r3, r4, ip
   31340:	muleq	r3, r4, ip
   31344:	muleq	r3, r4, ip
   31348:	muleq	r3, r4, ip
   3134c:	muleq	r3, r4, ip
   31350:	muleq	r3, r4, ip
   31354:	muleq	r3, r4, ip
   31358:	muleq	r3, r4, ip
   3135c:	muleq	r3, r4, ip
   31360:	muleq	r3, r4, ip
   31364:	muleq	r3, r4, ip
   31368:	muleq	r3, r4, ip
   3136c:	muleq	r3, r4, ip
   31370:	muleq	r3, r4, ip
   31374:	andeq	r1, r3, ip, asr #5
   31378:	add	r0, sl, #1
   3137c:	cmp	r4, r0
   31380:	beq	316a4 <flatcc_json_parser_generic_json@@Base+0x207c>
   31384:	ldrb	r3, [sl, #1]
   31388:	sub	r2, r3, #48	; 0x30
   3138c:	cmp	r2, #9
   31390:	bhi	311b8 <flatcc_json_parser_generic_json@@Base+0x1b90>
   31394:	add	sl, sl, #2
   31398:	b	313ac <flatcc_json_parser_generic_json@@Base+0x1d84>
   3139c:	ldrb	r3, [sl], #1
   313a0:	sub	r2, r3, #48	; 0x30
   313a4:	cmp	r2, #9
   313a8:	bhi	311b8 <flatcc_json_parser_generic_json@@Base+0x1b90>
   313ac:	cmp	r4, sl
   313b0:	mov	r0, sl
   313b4:	bne	3139c <flatcc_json_parser_generic_json@@Base+0x1d74>
   313b8:	b	31244 <flatcc_json_parser_generic_json@@Base+0x1c1c>
   313bc:	cmp	r3, #31
   313c0:	bls	30b34 <flatcc_json_parser_generic_json@@Base+0x150c>
   313c4:	b	30368 <flatcc_json_parser_generic_json@@Base+0xd40>
   313c8:	add	r2, sl, #1
   313cc:	cmp	r4, r2
   313d0:	beq	3151c <flatcc_json_parser_generic_json@@Base+0x1ef4>
   313d4:	ldrb	r3, [sl, #1]
   313d8:	mov	sl, r2
   313dc:	b	2f7fc <flatcc_json_parser_generic_json@@Base+0x1d4>
   313e0:	cmp	r3, #32
   313e4:	beq	2f9dc <flatcc_json_parser_generic_json@@Base+0x3b4>
   313e8:	bls	314a8 <flatcc_json_parser_generic_json@@Base+0x1e80>
   313ec:	cmp	r3, #58	; 0x3a
   313f0:	beq	2f9dc <flatcc_json_parser_generic_json@@Base+0x3b4>
   313f4:	bls	3166c <flatcc_json_parser_generic_json@@Base+0x2044>
   313f8:	cmp	r3, #93	; 0x5d
   313fc:	beq	2f9dc <flatcc_json_parser_generic_json@@Base+0x3b4>
   31400:	cmp	r3, #125	; 0x7d
   31404:	bne	31244 <flatcc_json_parser_generic_json@@Base+0x1c1c>
   31408:	b	2f9dc <flatcc_json_parser_generic_json@@Base+0x3b4>
   3140c:	ldr	r3, [r5, #4]
   31410:	mov	r2, #5
   31414:	sub	r3, sl, r3
   31418:	add	r3, r3, #1
   3141c:	str	sl, [r5, #32]
   31420:	str	r3, [r5, #16]
   31424:	str	r2, [r5, #20]
   31428:	b	30528 <flatcc_json_parser_generic_json@@Base+0xf00>
   3142c:	sub	r2, r4, r3
   31430:	cmp	r2, #1
   31434:	movle	r2, r8
   31438:	ldrbgt	r2, [r3, #1]
   3143c:	subgt	r2, r2, #10
   31440:	clzgt	r2, r2
   31444:	lsrgt	r2, r2, #5
   31448:	add	r3, r3, r2
   3144c:	ldr	r2, [r5, #12]
   31450:	add	r3, r3, #1
   31454:	add	r2, r2, #1
   31458:	str	r3, [r5, #4]
   3145c:	str	r2, [r5, #12]
   31460:	cmp	r4, r3
   31464:	beq	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   31468:	ldrb	r2, [r3]
   3146c:	cmp	r2, #32
   31470:	bls	31308 <flatcc_json_parser_generic_json@@Base+0x1ce0>
   31474:	b	30c80 <flatcc_json_parser_generic_json@@Base+0x1658>
   31478:	add	r3, r3, #1
   3147c:	b	31460 <flatcc_json_parser_generic_json@@Base+0x1e38>
   31480:	ldrb	r3, [sl, #2]
   31484:	cmp	r3, #32
   31488:	addhi	sl, sl, #2
   3148c:	bls	2f8a4 <flatcc_json_parser_generic_json@@Base+0x27c>
   31490:	b	306c8 <flatcc_json_parser_generic_json@@Base+0x10a0>
   31494:	ldrb	r3, [sl, #2]
   31498:	cmp	r3, #32
   3149c:	addhi	sl, sl, #2
   314a0:	bls	2fd40 <flatcc_json_parser_generic_json@@Base+0x718>
   314a4:	b	306a8 <flatcc_json_parser_generic_json@@Base+0x1080>
   314a8:	cmp	r3, #9
   314ac:	bcc	31244 <flatcc_json_parser_generic_json@@Base+0x1c1c>
   314b0:	cmp	r3, #11
   314b4:	bls	2f9dc <flatcc_json_parser_generic_json@@Base+0x3b4>
   314b8:	cmp	r3, #13
   314bc:	bne	31244 <flatcc_json_parser_generic_json@@Base+0x1c1c>
   314c0:	b	2f9dc <flatcc_json_parser_generic_json@@Base+0x3b4>
   314c4:	sub	r3, r4, r0
   314c8:	cmp	r3, #1
   314cc:	movle	r3, r8
   314d0:	ldrbgt	r3, [r0, #1]
   314d4:	subgt	r3, r3, #10
   314d8:	clzgt	r3, r3
   314dc:	lsrgt	r3, r3, #5
   314e0:	add	r0, r0, r3
   314e4:	ldr	r3, [r5, #12]
   314e8:	add	r0, r0, #1
   314ec:	add	r3, r3, #1
   314f0:	str	r0, [r5, #4]
   314f4:	str	r3, [r5, #12]
   314f8:	cmp	r4, r0
   314fc:	beq	2f824 <flatcc_json_parser_generic_json@@Base+0x1fc>
   31500:	ldrb	r3, [r0]
   31504:	cmp	r3, #32
   31508:	bls	31044 <flatcc_json_parser_generic_json@@Base+0x1a1c>
   3150c:	mov	r3, r0
   31510:	b	30c80 <flatcc_json_parser_generic_json@@Base+0x1658>
   31514:	add	r0, r0, #1
   31518:	b	314f8 <flatcc_json_parser_generic_json@@Base+0x1ed0>
   3151c:	ldr	r3, [r5, #20]
   31520:	cmp	r3, #0
   31524:	bne	2f820 <flatcc_json_parser_generic_json@@Base+0x1f8>
   31528:	ldr	r3, [r5, #4]
   3152c:	mov	r2, #6
   31530:	b	308b4 <flatcc_json_parser_generic_json@@Base+0x128c>
   31534:	ldrb	r3, [r0, #1]
   31538:	sub	r3, r3, #48	; 0x30
   3153c:	cmp	r3, #9
   31540:	bls	31610 <flatcc_json_parser_generic_json@@Base+0x1fe8>
   31544:	ldr	r3, [r5, #20]
   31548:	cmp	r3, #0
   3154c:	bne	2f820 <flatcc_json_parser_generic_json@@Base+0x1f8>
   31550:	ldr	r3, [r5, #4]
   31554:	add	r0, r0, #1
   31558:	sub	r3, r0, r3
   3155c:	add	r3, r3, #1
   31560:	mov	r2, #6
   31564:	str	r0, [r5, #32]
   31568:	str	r3, [r5, #16]
   3156c:	str	r2, [r5, #20]
   31570:	b	2f820 <flatcc_json_parser_generic_json@@Base+0x1f8>
   31574:	mov	r2, r4
   31578:	ldr	r3, [r5, #20]
   3157c:	cmp	r3, #0
   31580:	bne	2f820 <flatcc_json_parser_generic_json@@Base+0x1f8>
   31584:	ldr	r3, [r5, #4]
   31588:	mov	r1, #6
   3158c:	sub	r3, r2, r3
   31590:	add	r3, r3, #1
   31594:	str	r2, [r5, #32]
   31598:	str	r3, [r5, #16]
   3159c:	str	r1, [r5, #20]
   315a0:	b	2f820 <flatcc_json_parser_generic_json@@Base+0x1f8>
   315a4:	ldrb	r2, [r0, #2]
   315a8:	cmp	r2, #32
   315ac:	bls	30e20 <flatcc_json_parser_generic_json@@Base+0x17f8>
   315b0:	b	311a0 <flatcc_json_parser_generic_json@@Base+0x1b78>
   315b4:	mov	r0, r3
   315b8:	b	30bbc <flatcc_json_parser_generic_json@@Base+0x1594>
   315bc:	ldr	r3, [r5, #4]
   315c0:	mov	r2, #6
   315c4:	sub	r3, sl, r3
   315c8:	add	r3, r3, #1
   315cc:	str	sl, [r5, #32]
   315d0:	str	r3, [r5, #16]
   315d4:	str	r2, [r5, #20]
   315d8:	b	2f820 <flatcc_json_parser_generic_json@@Base+0x1f8>
   315dc:	mov	r3, r4
   315e0:	ldr	r2, [r5, #20]
   315e4:	cmp	r2, #0
   315e8:	bne	2fb2c <flatcc_json_parser_generic_json@@Base+0x504>
   315ec:	ldr	r2, [r5, #4]
   315f0:	str	r3, [r5, #32]
   315f4:	sub	r3, r3, r2
   315f8:	add	r3, r3, #1
   315fc:	mov	r2, #20
   31600:	str	r3, [r5, #16]
   31604:	str	r2, [r5, #20]
   31608:	mov	r1, r4
   3160c:	b	2fb30 <flatcc_json_parser_generic_json@@Base+0x508>
   31610:	add	r2, r0, #2
   31614:	cmp	r4, r2
   31618:	beq	316a4 <flatcc_json_parser_generic_json@@Base+0x207c>
   3161c:	ldrb	r3, [r0, #2]
   31620:	sub	r1, r3, #48	; 0x30
   31624:	cmp	r1, #9
   31628:	bhi	3169c <flatcc_json_parser_generic_json@@Base+0x2074>
   3162c:	add	r2, r0, #3
   31630:	b	31644 <flatcc_json_parser_generic_json@@Base+0x201c>
   31634:	ldrb	r3, [r2], #1
   31638:	sub	r1, r3, #48	; 0x30
   3163c:	cmp	r1, #9
   31640:	bhi	31698 <flatcc_json_parser_generic_json@@Base+0x2070>
   31644:	cmp	r2, r4
   31648:	mov	r0, r2
   3164c:	bne	31634 <flatcc_json_parser_generic_json@@Base+0x200c>
   31650:	b	31244 <flatcc_json_parser_generic_json@@Base+0x1c1c>
   31654:	ldr	r3, [r5, #20]
   31658:	cmp	r3, #0
   3165c:	bne	2f864 <flatcc_json_parser_generic_json@@Base+0x23c>
   31660:	ldr	r3, [r5, #4]
   31664:	mov	r2, #4
   31668:	b	2fb78 <flatcc_json_parser_generic_json@@Base+0x550>
   3166c:	cmp	r3, #44	; 0x2c
   31670:	bne	31244 <flatcc_json_parser_generic_json@@Base+0x1c1c>
   31674:	b	2f9dc <flatcc_json_parser_generic_json@@Base+0x3b4>
   31678:	mov	r0, r3
   3167c:	b	30e50 <flatcc_json_parser_generic_json@@Base+0x1828>
   31680:	mov	r0, r3
   31684:	b	312fc <flatcc_json_parser_generic_json@@Base+0x1cd4>
   31688:	ldrb	r2, [sl, #2]
   3168c:	cmp	r2, #32
   31690:	bls	31008 <flatcc_json_parser_generic_json@@Base+0x19e0>
   31694:	b	312bc <flatcc_json_parser_generic_json@@Base+0x1c94>
   31698:	mov	r2, r0
   3169c:	mov	r0, r2
   316a0:	b	311c0 <flatcc_json_parser_generic_json@@Base+0x1b98>
   316a4:	mov	r0, r4
   316a8:	b	31244 <flatcc_json_parser_generic_json@@Base+0x1c1c>
   316ac:	cmp	r3, #125	; 0x7d
   316b0:	add	r6, r6, #1
   316b4:	beq	2f9e4 <flatcc_json_parser_generic_json@@Base+0x3bc>
   316b8:	mov	sl, r0
   316bc:	b	30d8c <flatcc_json_parser_generic_json@@Base+0x1764>
   316c0:	cmp	r3, #93	; 0x5d
   316c4:	add	r6, r6, #1
   316c8:	bne	316b8 <flatcc_json_parser_generic_json@@Base+0x2090>
   316cc:	b	2f9e4 <flatcc_json_parser_generic_json@@Base+0x3bc>
   316d0:	ldr	r3, [r5, #20]
   316d4:	cmp	r3, #0
   316d8:	bne	2f820 <flatcc_json_parser_generic_json@@Base+0x1f8>
   316dc:	ldr	r3, [r5, #4]
   316e0:	mov	r2, #20
   316e4:	b	308b4 <flatcc_json_parser_generic_json@@Base+0x128c>
   316e8:	ldr	r3, [r5, #20]
   316ec:	cmp	r3, #0
   316f0:	bne	2f864 <flatcc_json_parser_generic_json@@Base+0x23c>
   316f4:	ldr	r3, [r5, #4]
   316f8:	mov	r2, #2
   316fc:	b	2fadc <flatcc_json_parser_generic_json@@Base+0x4b4>
   31700:	sub	r1, r3, #34	; 0x22
   31704:	cmp	r1, #89	; 0x59
   31708:	ldrls	pc, [pc, r1, lsl #2]
   3170c:	b	2fac4 <flatcc_json_parser_generic_json@@Base+0x49c>
   31710:	andeq	r0, r3, r4, ror #5
   31714:	andeq	pc, r2, r4, asr #21
   31718:	andeq	pc, r2, r4, asr #21
   3171c:	andeq	pc, r2, r4, asr #21
   31720:	andeq	pc, r2, r4, asr #21
   31724:	andeq	pc, r2, r4, asr #21
   31728:	andeq	pc, r2, r4, asr #21
   3172c:	andeq	pc, r2, r4, asr #21
   31730:	andeq	pc, r2, r4, asr #21
   31734:	andeq	pc, r2, r4, asr #21
   31738:	andeq	pc, r2, r4, asr #21
   3173c:	andeq	pc, r2, r8, ror #15
   31740:	andeq	pc, r2, r4, asr #21
   31744:	andeq	pc, r2, r4, asr #21
   31748:	andeq	pc, r2, r8, ror #15
   3174c:	andeq	pc, r2, r8, ror #15
   31750:	andeq	pc, r2, r8, ror #15
   31754:	andeq	pc, r2, r8, ror #15
   31758:	andeq	pc, r2, r8, ror #15
   3175c:	andeq	pc, r2, r8, ror #15
   31760:	andeq	pc, r2, r8, ror #15
   31764:	andeq	pc, r2, r8, ror #15
   31768:	andeq	pc, r2, r8, ror #15
   3176c:	andeq	pc, r2, r8, ror #15
   31770:	andeq	pc, r2, r4, asr #21
   31774:	andeq	pc, r2, r4, asr #21
   31778:	andeq	pc, r2, r4, asr #21
   3177c:	andeq	pc, r2, r4, asr #21
   31780:	andeq	pc, r2, r4, asr #21
   31784:	andeq	pc, r2, r4, asr #21
   31788:	andeq	pc, r2, r4, asr #21
   3178c:	andeq	pc, r2, r4, asr #21
   31790:	andeq	pc, r2, r4, asr #21
   31794:	andeq	pc, r2, r4, asr #21
   31798:	andeq	pc, r2, r4, asr #21
   3179c:	andeq	pc, r2, r4, asr #21
   317a0:	andeq	pc, r2, r4, asr #21
   317a4:	andeq	pc, r2, r4, asr #21
   317a8:	andeq	pc, r2, r4, asr #21
   317ac:	andeq	pc, r2, r4, asr #21
   317b0:	andeq	pc, r2, r4, asr #21
   317b4:	andeq	pc, r2, r4, asr #21
   317b8:	andeq	pc, r2, r4, asr #21
   317bc:	andeq	pc, r2, r4, asr #21
   317c0:	andeq	pc, r2, r4, asr #21
   317c4:	andeq	pc, r2, r4, asr #21
   317c8:	andeq	pc, r2, r4, asr #21
   317cc:	andeq	pc, r2, r4, asr #21
   317d0:	andeq	pc, r2, r4, asr #21
   317d4:	andeq	pc, r2, r4, asr #21
   317d8:	andeq	pc, r2, r4, asr #21
   317dc:	andeq	pc, r2, r4, asr #21
   317e0:	andeq	pc, r2, r4, asr #21
   317e4:	andeq	pc, r2, r4, asr #21
   317e8:	andeq	pc, r2, r4, asr #21
   317ec:	andeq	pc, r2, r4, asr #21
   317f0:	andeq	pc, r2, r4, asr #21
   317f4:	muleq	r3, r8, r8
   317f8:	andeq	pc, r2, r4, asr #21
   317fc:	andeq	pc, r2, r4, asr #21
   31800:	andeq	pc, r2, r4, asr #21
   31804:	andeq	pc, r2, r4, asr #21
   31808:	andeq	pc, r2, r4, asr #21
   3180c:	andeq	pc, r2, r4, asr #21
   31810:	andeq	pc, r2, r4, asr #21
   31814:	andeq	pc, r2, r4, asr #21
   31818:	andeq	pc, r2, r4, asr #21
   3181c:	andeq	pc, r2, r4, asr #21
   31820:	muleq	r3, r0, r8
   31824:	andeq	pc, r2, r4, asr #21
   31828:	andeq	pc, r2, r4, asr #21
   3182c:	andeq	pc, r2, r4, asr #21
   31830:	andeq	pc, r2, r4, asr #21
   31834:	andeq	pc, r2, r4, asr #21
   31838:	andeq	pc, r2, r4, asr #21
   3183c:	andeq	pc, r2, r4, asr #21
   31840:	andeq	r1, r3, r8, lsl #17
   31844:	andeq	pc, r2, r4, asr #21
   31848:	andeq	pc, r2, r4, asr #21
   3184c:	andeq	pc, r2, r4, asr #21
   31850:	andeq	pc, r2, r4, asr #21
   31854:	andeq	pc, r2, r4, asr #21
   31858:	muleq	r3, r0, r8
   3185c:	andeq	pc, r2, r4, asr #21
   31860:	andeq	pc, r2, r4, asr #21
   31864:	andeq	pc, r2, r4, asr #21
   31868:	andeq	pc, r2, r4, asr #21
   3186c:	andeq	pc, r2, r4, asr #21
   31870:	andeq	pc, r2, r4, asr #21
   31874:	andeq	r1, r3, r0, lsl #17
   31878:	ldrb	r3, [r4]
   3187c:	b	2ff0c <flatcc_json_parser_generic_json@@Base+0x8e4>
   31880:	mov	sl, r2
   31884:	b	2f874 <flatcc_json_parser_generic_json@@Base+0x24c>
   31888:	mov	sl, r2
   3188c:	b	2f950 <flatcc_json_parser_generic_json@@Base+0x328>
   31890:	mov	sl, r2
   31894:	b	2f980 <flatcc_json_parser_generic_json@@Base+0x358>
   31898:	mov	sl, r2
   3189c:	b	2fd10 <flatcc_json_parser_generic_json@@Base+0x6e8>

000318a0 <flatcc_json_parser_unmatched_symbol@@Base>:
   318a0:	ldr	r3, [r0, #8]
   318a4:	tst	r3, #1
   318a8:	bne	318e4 <flatcc_json_parser_unmatched_symbol@@Base+0x44>
   318ac:	ldr	r3, [r0, #20]
   318b0:	cmp	r3, #0
   318b4:	beq	318c0 <flatcc_json_parser_unmatched_symbol@@Base+0x20>
   318b8:	mov	r0, r2
   318bc:	bx	lr
   318c0:	ldr	r3, [r0, #4]
   318c4:	mov	ip, #13
   318c8:	sub	r3, r1, r3
   318cc:	add	r3, r3, #1
   318d0:	str	r1, [r0, #32]
   318d4:	str	r3, [r0, #16]
   318d8:	str	ip, [r0, #20]
   318dc:	mov	r0, r2
   318e0:	bx	lr
   318e4:	cmp	r1, r2
   318e8:	push	{r4, lr}
   318ec:	beq	31c54 <flatcc_json_parser_unmatched_symbol@@Base+0x3b4>
   318f0:	ldrb	ip, [r1]
   318f4:	mov	r4, r2
   318f8:	cmp	ip, #34	; 0x22
   318fc:	bne	3191c <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   31900:	b	31b28 <flatcc_json_parser_unmatched_symbol@@Base+0x288>
   31904:	add	r1, r3, #1
   31908:	cmp	r2, r1
   3190c:	beq	31944 <flatcc_json_parser_unmatched_symbol@@Base+0xa4>
   31910:	ldrb	ip, [r3, #1]
   31914:	cmp	ip, #34	; 0x22
   31918:	beq	31b28 <flatcc_json_parser_unmatched_symbol@@Base+0x288>
   3191c:	cmp	ip, #92	; 0x5c
   31920:	mov	r3, r1
   31924:	bne	31904 <flatcc_json_parser_unmatched_symbol@@Base+0x64>
   31928:	sub	r3, r2, r1
   3192c:	cmp	r3, #1
   31930:	ble	31948 <flatcc_json_parser_unmatched_symbol@@Base+0xa8>
   31934:	add	r3, r1, #1
   31938:	add	r1, r3, #1
   3193c:	cmp	r2, r1
   31940:	bne	31910 <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   31944:	mov	r1, r2
   31948:	ldr	r3, [r0, #20]
   3194c:	cmp	r3, #0
   31950:	beq	319c0 <flatcc_json_parser_unmatched_symbol@@Base+0x120>
   31954:	mov	lr, r2
   31958:	mov	r1, #0
   3195c:	cmp	r2, lr
   31960:	beq	31b6c <flatcc_json_parser_unmatched_symbol@@Base+0x2cc>
   31964:	ldrb	ip, [lr]
   31968:	cmp	ip, #32
   3196c:	bne	319e0 <flatcc_json_parser_unmatched_symbol@@Base+0x140>
   31970:	add	r3, lr, #1
   31974:	b	31984 <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
   31978:	ldrb	ip, [r3], #1
   3197c:	cmp	ip, #32
   31980:	bne	319e0 <flatcc_json_parser_unmatched_symbol@@Base+0x140>
   31984:	cmp	r3, r2
   31988:	mov	lr, r3
   3198c:	bne	31978 <flatcc_json_parser_unmatched_symbol@@Base+0xd8>
   31990:	ldr	r3, [r0, #20]
   31994:	cmp	r3, #0
   31998:	bne	319b8 <flatcc_json_parser_unmatched_symbol@@Base+0x118>
   3199c:	ldr	r3, [r0, #4]
   319a0:	mov	r1, #4
   319a4:	sub	r3, lr, r3
   319a8:	add	r3, r3, #1
   319ac:	str	lr, [r0, #32]
   319b0:	str	r3, [r0, #16]
   319b4:	str	r1, [r0, #20]
   319b8:	mov	r0, r2
   319bc:	pop	{r4, pc}
   319c0:	ldr	r3, [r0, #4]
   319c4:	mov	ip, #20
   319c8:	sub	r3, r1, r3
   319cc:	add	r3, r3, #1
   319d0:	str	r1, [r0, #32]
   319d4:	str	r3, [r0, #16]
   319d8:	str	ip, [r0, #20]
   319dc:	b	31954 <flatcc_json_parser_unmatched_symbol@@Base+0xb4>
   319e0:	cmp	ip, #32
   319e4:	bhi	31aa0 <flatcc_json_parser_unmatched_symbol@@Base+0x200>
   319e8:	sub	ip, ip, #9
   319ec:	cmp	ip, #23
   319f0:	ldrls	pc, [pc, ip, lsl #2]
   319f4:	b	31b10 <flatcc_json_parser_unmatched_symbol@@Base+0x270>
   319f8:	andeq	r1, r3, r8, lsl #22
   319fc:	andeq	r1, r3, r8, ror sl
   31a00:	andeq	r1, r3, r0, lsl fp
   31a04:	andeq	r1, r3, r0, lsl fp
   31a08:	andeq	r1, r3, r8, asr sl
   31a0c:	andeq	r1, r3, r0, lsl fp
   31a10:	andeq	r1, r3, r0, lsl fp
   31a14:	andeq	r1, r3, r0, lsl fp
   31a18:	andeq	r1, r3, r0, lsl fp
   31a1c:	andeq	r1, r3, r0, lsl fp
   31a20:	andeq	r1, r3, r0, lsl fp
   31a24:	andeq	r1, r3, r0, lsl fp
   31a28:	andeq	r1, r3, r0, lsl fp
   31a2c:	andeq	r1, r3, r0, lsl fp
   31a30:	andeq	r1, r3, r0, lsl fp
   31a34:	andeq	r1, r3, r0, lsl fp
   31a38:	andeq	r1, r3, r0, lsl fp
   31a3c:	andeq	r1, r3, r0, lsl fp
   31a40:	andeq	r1, r3, r0, lsl fp
   31a44:	andeq	r1, r3, r0, lsl fp
   31a48:	andeq	r1, r3, r0, lsl fp
   31a4c:	andeq	r1, r3, r0, lsl fp
   31a50:	andeq	r1, r3, r0, lsl fp
   31a54:	andeq	r1, r3, ip, asr r9
   31a58:	sub	r3, r4, lr
   31a5c:	cmp	r3, #1
   31a60:	movle	r3, r1
   31a64:	ldrbgt	r3, [lr, #1]
   31a68:	subgt	r3, r3, #10
   31a6c:	clzgt	r3, r3
   31a70:	lsrgt	r3, r3, #5
   31a74:	add	lr, lr, r3
   31a78:	ldr	r3, [r0, #12]
   31a7c:	add	lr, lr, #1
   31a80:	add	r3, r3, #1
   31a84:	str	lr, [r0, #4]
   31a88:	str	r3, [r0, #12]
   31a8c:	cmp	r2, lr
   31a90:	beq	31b6c <flatcc_json_parser_unmatched_symbol@@Base+0x2cc>
   31a94:	ldrb	ip, [lr]
   31a98:	cmp	ip, #32
   31a9c:	bls	319e8 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   31aa0:	cmp	ip, #58	; 0x3a
   31aa4:	bne	31990 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   31aa8:	add	r1, lr, #1
   31aac:	sub	r3, r4, r1
   31ab0:	cmp	r3, #1
   31ab4:	ble	31ac8 <flatcc_json_parser_unmatched_symbol@@Base+0x228>
   31ab8:	ldrb	r3, [lr, #1]
   31abc:	cmp	r3, #32
   31ac0:	bhi	31b00 <flatcc_json_parser_unmatched_symbol@@Base+0x260>
   31ac4:	beq	31c5c <flatcc_json_parser_unmatched_symbol@@Base+0x3bc>
   31ac8:	mov	lr, #0
   31acc:	cmp	r2, r1
   31ad0:	beq	31c4c <flatcc_json_parser_unmatched_symbol@@Base+0x3ac>
   31ad4:	ldrb	ip, [r1]
   31ad8:	cmp	ip, #32
   31adc:	bne	31b74 <flatcc_json_parser_unmatched_symbol@@Base+0x2d4>
   31ae0:	add	r3, r1, #1
   31ae4:	b	31af4 <flatcc_json_parser_unmatched_symbol@@Base+0x254>
   31ae8:	ldrb	ip, [r3], #1
   31aec:	cmp	ip, #32
   31af0:	bne	31b74 <flatcc_json_parser_unmatched_symbol@@Base+0x2d4>
   31af4:	cmp	r3, r2
   31af8:	mov	r1, r3
   31afc:	bne	31ae8 <flatcc_json_parser_unmatched_symbol@@Base+0x248>
   31b00:	pop	{r4, lr}
   31b04:	b	2f628 <flatcc_json_parser_generic_json@@Base>
   31b08:	add	lr, lr, #1
   31b0c:	b	31a8c <flatcc_json_parser_unmatched_symbol@@Base+0x1ec>
   31b10:	ldr	r3, [r0, #20]
   31b14:	cmp	r3, #0
   31b18:	bne	319b8 <flatcc_json_parser_unmatched_symbol@@Base+0x118>
   31b1c:	ldr	r3, [r0, #4]
   31b20:	mov	r1, #5
   31b24:	b	319a4 <flatcc_json_parser_unmatched_symbol@@Base+0x104>
   31b28:	add	lr, r1, #1
   31b2c:	sub	r3, r2, lr
   31b30:	cmp	r3, #1
   31b34:	ble	31958 <flatcc_json_parser_unmatched_symbol@@Base+0xb8>
   31b38:	ldrb	ip, [r1, #1]
   31b3c:	cmp	ip, #32
   31b40:	bhi	31b58 <flatcc_json_parser_unmatched_symbol@@Base+0x2b8>
   31b44:	bne	31958 <flatcc_json_parser_unmatched_symbol@@Base+0xb8>
   31b48:	ldrb	ip, [r1, #2]
   31b4c:	cmp	ip, #32
   31b50:	addhi	lr, r1, #2
   31b54:	bls	31958 <flatcc_json_parser_unmatched_symbol@@Base+0xb8>
   31b58:	cmp	r2, lr
   31b5c:	beq	31990 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   31b60:	cmp	ip, #58	; 0x3a
   31b64:	bne	31990 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   31b68:	b	31aa8 <flatcc_json_parser_unmatched_symbol@@Base+0x208>
   31b6c:	mov	lr, r2
   31b70:	b	31990 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   31b74:	cmp	ip, #32
   31b78:	bhi	31b00 <flatcc_json_parser_unmatched_symbol@@Base+0x260>
   31b7c:	sub	ip, ip, #9
   31b80:	cmp	ip, #23
   31b84:	ldrls	pc, [pc, ip, lsl #2]
   31b88:	b	31c40 <flatcc_json_parser_unmatched_symbol@@Base+0x3a0>
   31b8c:	andeq	r1, r3, r8, lsr ip
   31b90:	andeq	r1, r3, ip, lsl #24
   31b94:	andeq	r1, r3, r0, asr #24
   31b98:	andeq	r1, r3, r0, asr #24
   31b9c:	andeq	r1, r3, ip, ror #23
   31ba0:	andeq	r1, r3, r0, asr #24
   31ba4:	andeq	r1, r3, r0, asr #24
   31ba8:	andeq	r1, r3, r0, asr #24
   31bac:	andeq	r1, r3, r0, asr #24
   31bb0:	andeq	r1, r3, r0, asr #24
   31bb4:	andeq	r1, r3, r0, asr #24
   31bb8:	andeq	r1, r3, r0, asr #24
   31bbc:	andeq	r1, r3, r0, asr #24
   31bc0:	andeq	r1, r3, r0, asr #24
   31bc4:	andeq	r1, r3, r0, asr #24
   31bc8:	andeq	r1, r3, r0, asr #24
   31bcc:	andeq	r1, r3, r0, asr #24
   31bd0:	andeq	r1, r3, r0, asr #24
   31bd4:	andeq	r1, r3, r0, asr #24
   31bd8:	andeq	r1, r3, r0, asr #24
   31bdc:	andeq	r1, r3, r0, asr #24
   31be0:	andeq	r1, r3, r0, asr #24
   31be4:	andeq	r1, r3, r0, asr #24
   31be8:	andeq	r1, r3, ip, asr #21
   31bec:	sub	r3, r4, r1
   31bf0:	cmp	r3, #1
   31bf4:	movle	r3, lr
   31bf8:	ldrbgt	r3, [r1, #1]
   31bfc:	subgt	r3, r3, #10
   31c00:	clzgt	r3, r3
   31c04:	lsrgt	r3, r3, #5
   31c08:	add	r1, r1, r3
   31c0c:	ldr	r3, [r0, #12]
   31c10:	add	r1, r1, #1
   31c14:	add	r3, r3, #1
   31c18:	str	r1, [r0, #4]
   31c1c:	str	r3, [r0, #12]
   31c20:	cmp	r2, r1
   31c24:	beq	31c4c <flatcc_json_parser_unmatched_symbol@@Base+0x3ac>
   31c28:	ldrb	ip, [r1]
   31c2c:	cmp	ip, #32
   31c30:	bls	31b7c <flatcc_json_parser_unmatched_symbol@@Base+0x2dc>
   31c34:	b	31b00 <flatcc_json_parser_unmatched_symbol@@Base+0x260>
   31c38:	add	r1, r1, #1
   31c3c:	b	31c20 <flatcc_json_parser_unmatched_symbol@@Base+0x380>
   31c40:	ldr	r3, [r0, #20]
   31c44:	cmp	r3, #0
   31c48:	beq	31c70 <flatcc_json_parser_unmatched_symbol@@Base+0x3d0>
   31c4c:	mov	r1, r2
   31c50:	b	31b00 <flatcc_json_parser_unmatched_symbol@@Base+0x260>
   31c54:	mov	r4, r1
   31c58:	b	31948 <flatcc_json_parser_unmatched_symbol@@Base+0xa8>
   31c5c:	ldrb	r3, [lr, #2]
   31c60:	cmp	r3, #32
   31c64:	addhi	r1, lr, #2
   31c68:	bls	31ac8 <flatcc_json_parser_unmatched_symbol@@Base+0x228>
   31c6c:	b	31b00 <flatcc_json_parser_unmatched_symbol@@Base+0x260>
   31c70:	ldr	r3, [r0, #4]
   31c74:	mov	ip, #5
   31c78:	sub	r3, r1, r3
   31c7c:	add	r3, r3, #1
   31c80:	str	r1, [r0, #32]
   31c84:	str	r3, [r0, #16]
   31c88:	str	ip, [r0, #20]
   31c8c:	mov	r1, r2
   31c90:	b	31b00 <flatcc_json_parser_unmatched_symbol@@Base+0x260>

00031c94 <flatcc_json_parser_integer@@Base>:
   31c94:	cmp	r1, r2
   31c98:	beq	31db8 <flatcc_json_parser_integer@@Base+0x124>
   31c9c:	push	{r4, r5, r6, r7, r8, r9, lr}
   31ca0:	mov	r8, r0
   31ca4:	ldrb	ip, [r1]
   31ca8:	sub	ip, ip, #45	; 0x2d
   31cac:	clz	ip, ip
   31cb0:	lsr	ip, ip, #5
   31cb4:	add	r0, r1, ip
   31cb8:	cmp	r2, r0
   31cbc:	str	ip, [r3]
   31cc0:	beq	31dc4 <flatcc_json_parser_integer@@Base+0x130>
   31cc4:	ldrb	ip, [r1, ip]
   31cc8:	sub	r3, ip, #48	; 0x30
   31ccc:	cmp	r3, #9
   31cd0:	bhi	31d48 <flatcc_json_parser_integer@@Base+0xb4>
   31cd4:	uxtb	r6, ip
   31cd8:	mov	r7, #0
   31cdc:	subs	r6, r6, #48	; 0x30
   31ce0:	add	r3, r0, #1
   31ce4:	sbc	r7, r7, #0
   31ce8:	mov	lr, #10
   31cec:	b	31d28 <flatcc_json_parser_integer@@Base+0x94>
   31cf0:	ldrb	ip, [r3]
   31cf4:	add	r3, r3, #1
   31cf8:	sub	r9, ip, #48	; 0x30
   31cfc:	cmp	r9, #9
   31d00:	bhi	31d50 <flatcc_json_parser_integer@@Base+0xbc>
   31d04:	subs	r4, r4, #48	; 0x30
   31d08:	sbc	r5, r5, #0
   31d0c:	adds	r4, r4, ip
   31d10:	adc	r5, r5, #0
   31d14:	cmp	r5, r7
   31d18:	cmpeq	r4, r6
   31d1c:	mov	r7, r5
   31d20:	mov	r6, r4
   31d24:	bcc	31d7c <flatcc_json_parser_integer@@Base+0xe8>
   31d28:	umull	r4, r5, r6, lr
   31d2c:	cmp	r3, r2
   31d30:	mla	r5, lr, r7, r5
   31d34:	mov	r0, r3
   31d38:	bne	31cf0 <flatcc_json_parser_integer@@Base+0x5c>
   31d3c:	ldr	r3, [sp, #28]
   31d40:	strd	r6, [r3]
   31d44:	pop	{r4, r5, r6, r7, r8, r9, pc}
   31d48:	mov	r6, #0
   31d4c:	mov	r7, #0
   31d50:	cmp	r1, r0
   31d54:	beq	31dc0 <flatcc_json_parser_integer@@Base+0x12c>
   31d58:	and	r3, ip, #223	; 0xdf
   31d5c:	cmp	ip, #46	; 0x2e
   31d60:	cmpne	r3, #69	; 0x45
   31d64:	bne	31d3c <flatcc_json_parser_integer@@Base+0xa8>
   31d68:	ldr	r3, [r8, #20]
   31d6c:	cmp	r3, #0
   31d70:	beq	31dac <flatcc_json_parser_integer@@Base+0x118>
   31d74:	mov	r0, r2
   31d78:	pop	{r4, r5, r6, r7, r8, r9, pc}
   31d7c:	ldr	r3, [r8, #20]
   31d80:	cmp	r3, #0
   31d84:	bne	31d74 <flatcc_json_parser_integer@@Base+0xe0>
   31d88:	ldr	r3, [r8, #4]
   31d8c:	mov	r1, #8
   31d90:	sub	r3, r0, r3
   31d94:	add	r3, r3, #1
   31d98:	str	r0, [r8, #32]
   31d9c:	str	r3, [r8, #16]
   31da0:	mov	r0, r2
   31da4:	str	r1, [r8, #20]
   31da8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   31dac:	ldr	r3, [r8, #4]
   31db0:	mov	r1, #12
   31db4:	b	31d90 <flatcc_json_parser_integer@@Base+0xfc>
   31db8:	mov	r0, r2
   31dbc:	bx	lr
   31dc0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   31dc4:	mov	r6, #0
   31dc8:	mov	r7, #0
   31dcc:	b	31d3c <flatcc_json_parser_integer@@Base+0xa8>

00031dd0 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   31dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31dd4:	sub	sp, sp, #36	; 0x24
   31dd8:	mov	r4, r2
   31ddc:	ldr	r7, [sp, #72]	; 0x48
   31de0:	mov	r6, r0
   31de4:	adds	r9, r7, #0
   31de8:	movne	r9, #1
   31dec:	cmp	r1, r2
   31df0:	mov	r8, r3
   31df4:	beq	31e04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x34>
   31df8:	ldrb	r3, [r1]
   31dfc:	cmp	r3, #34	; 0x22
   31e00:	beq	31e64 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x94>
   31e04:	ldr	r3, [r6, #20]
   31e08:	cmp	r3, #0
   31e0c:	beq	31f88 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   31e10:	mov	r5, r4
   31e14:	mov	r3, #0
   31e18:	str	r3, [r8]
   31e1c:	ldr	r3, [r6, #20]
   31e20:	cmp	r7, #0
   31e24:	moveq	r7, #31
   31e28:	movne	r7, #32
   31e2c:	cmp	r3, #0
   31e30:	beq	31e40 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x70>
   31e34:	mov	r0, r4
   31e38:	add	sp, sp, #36	; 0x24
   31e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31e40:	ldr	r3, [r6, #4]
   31e44:	mov	r0, r4
   31e48:	sub	r3, r5, r3
   31e4c:	add	r3, r3, #1
   31e50:	str	r7, [r6, #20]
   31e54:	str	r5, [r6, #32]
   31e58:	str	r3, [r6, #16]
   31e5c:	add	sp, sp, #36	; 0x24
   31e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31e64:	add	fp, r1, #1
   31e68:	cmp	r2, fp
   31e6c:	beq	32250 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x480>
   31e70:	ldrb	r3, [r1, #1]
   31e74:	cmp	r3, #34	; 0x22
   31e78:	cmpne	r3, #31
   31e7c:	movhi	r2, #1
   31e80:	movls	r2, #0
   31e84:	cmp	r3, #92	; 0x5c
   31e88:	moveq	r2, #0
   31e8c:	andne	r2, r2, #1
   31e90:	cmp	r2, #0
   31e94:	beq	321c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3f8>
   31e98:	add	r1, r1, #2
   31e9c:	cmp	r4, r1
   31ea0:	mov	r5, r1
   31ea4:	beq	32254 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x484>
   31ea8:	ldrb	r3, [r1], #1
   31eac:	cmp	r3, #34	; 0x22
   31eb0:	cmpne	r3, #31
   31eb4:	movhi	r2, #1
   31eb8:	movls	r2, #0
   31ebc:	cmp	r3, #92	; 0x5c
   31ec0:	moveq	r2, #0
   31ec4:	andne	r2, r2, #1
   31ec8:	cmp	r2, #0
   31ecc:	bne	31e9c <flatcc_json_parser_build_uint8_vector_base64@@Base+0xcc>
   31ed0:	cmp	r3, #31
   31ed4:	bhi	31f04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x134>
   31ed8:	ldr	r3, [r6, #20]
   31edc:	cmp	r3, #0
   31ee0:	bne	31e10 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   31ee4:	ldr	r3, [r6, #4]
   31ee8:	mov	r2, #17
   31eec:	sub	r3, r5, r3
   31ef0:	add	r3, r3, #1
   31ef4:	str	r5, [r6, #32]
   31ef8:	str	r3, [r6, #16]
   31efc:	str	r2, [r6, #20]
   31f00:	b	31e10 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   31f04:	cmp	r3, #34	; 0x22
   31f08:	bne	31e14 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x44>
   31f0c:	sub	sl, r5, fp
   31f10:	and	r2, sl, #3
   31f14:	lsr	r3, sl, #2
   31f18:	cmp	r2, #2
   31f1c:	add	r3, r3, r3, lsl #1
   31f20:	str	r3, [sp]
   31f24:	beq	31fa8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d8>
   31f28:	cmp	r2, #3
   31f2c:	addeq	r3, r3, #2
   31f30:	streq	r3, [sp]
   31f34:	mov	r2, #1
   31f38:	mov	r1, r2
   31f3c:	mvn	r3, #0
   31f40:	ldr	r0, [r6]
   31f44:	bl	27808 <flatcc_builder_start_vector@@Base>
   31f48:	cmp	r0, #0
   31f4c:	beq	31fb4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e4>
   31f50:	mov	r3, #0
   31f54:	str	r3, [r8]
   31f58:	ldr	r3, [r6, #20]
   31f5c:	cmp	r3, #0
   31f60:	bne	31e34 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x64>
   31f64:	ldr	r3, [r6, #4]
   31f68:	mov	r2, #33	; 0x21
   31f6c:	sub	r3, r5, r3
   31f70:	add	r3, r3, #1
   31f74:	str	r5, [r6, #32]
   31f78:	mov	r0, r4
   31f7c:	str	r3, [r6, #16]
   31f80:	str	r2, [r6, #20]
   31f84:	b	31e38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   31f88:	ldr	r3, [r6, #4]
   31f8c:	mov	r2, #16
   31f90:	sub	r3, r1, r3
   31f94:	add	r3, r3, #1
   31f98:	str	r1, [r6, #32]
   31f9c:	str	r3, [r6, #16]
   31fa0:	str	r2, [r6, #20]
   31fa4:	b	31e10 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   31fa8:	add	r3, r3, #1
   31fac:	str	r3, [sp]
   31fb0:	b	31f34 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x164>
   31fb4:	ldr	r1, [sp]
   31fb8:	ldr	r0, [r6]
   31fbc:	bl	26c9c <flatcc_builder_extend_vector@@Base>
   31fc0:	subs	r2, r0, #0
   31fc4:	mov	lr, r2
   31fc8:	str	r2, [sp, #8]
   31fcc:	beq	31f50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   31fd0:	ldr	r3, [pc, #660]	; 3226c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x49c>
   31fd4:	cmp	r9, #0
   31fd8:	add	r2, r3, #256	; 0x100
   31fdc:	movne	r9, r3
   31fe0:	ldr	r3, [sp]
   31fe4:	moveq	r9, r2
   31fe8:	cmp	r3, #0
   31fec:	mvneq	r3, #0
   31ff0:	str	r3, [sp, #12]
   31ff4:	mov	ip, fp
   31ff8:	mov	r3, sl
   31ffc:	str	sl, [sp, #4]
   32000:	cmp	r3, #0
   32004:	beq	320c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2f0>
   32008:	mov	r2, #0
   3200c:	ldrb	r1, [ip, r2]
   32010:	ldrb	r0, [r9, r1]
   32014:	add	r1, sp, #32
   32018:	add	r1, r1, r2
   3201c:	cmp	r0, #63	; 0x3f
   32020:	strb	r0, [r1, #-4]
   32024:	bls	32074 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a4>
   32028:	cmp	r0, #65	; 0x41
   3202c:	beq	32068 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x298>
   32030:	cmp	r0, #66	; 0x42
   32034:	movne	r1, r2
   32038:	beq	32124 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x354>
   3203c:	sub	r3, r3, r1
   32040:	cmp	r2, #2
   32044:	beq	32090 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c0>
   32048:	cmp	r2, #3
   3204c:	beq	32178 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3a8>
   32050:	cmp	r2, #0
   32054:	beq	320b0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   32058:	ldr	r3, [sp, #4]
   3205c:	sub	lr, sl, r3
   32060:	add	r5, fp, lr
   32064:	b	31e14 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x44>
   32068:	add	ip, ip, #1
   3206c:	sub	r3, r3, #1
   32070:	sub	r2, r2, #1
   32074:	add	r2, r2, #1
   32078:	cmp	r2, #3
   3207c:	bhi	321d0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x400>
   32080:	cmp	r2, r3
   32084:	bne	3200c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x23c>
   32088:	mov	r3, #0
   3208c:	b	32040 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x270>
   32090:	ldrb	r2, [sp, #29]
   32094:	lsl	r1, r2, #4
   32098:	tst	r1, #240	; 0xf0
   3209c:	bne	32058 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   320a0:	ldrb	r1, [sp, #28]
   320a4:	lsr	r2, r2, #4
   320a8:	orr	r2, r2, r1, lsl #2
   320ac:	strb	r2, [lr], #1
   320b0:	sub	r3, sl, r3
   320b4:	cmp	sl, r3
   320b8:	addne	r5, fp, r3
   320bc:	bne	31e14 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x44>
   320c0:	ldr	r3, [sp, #8]
   320c4:	sub	r1, lr, r3
   320c8:	ldr	r3, [sp]
   320cc:	cmp	r3, r1
   320d0:	bls	320e8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x318>
   320d4:	sub	r1, r3, r1
   320d8:	ldr	r0, [r6]
   320dc:	bl	27654 <flatcc_builder_truncate_vector@@Base>
   320e0:	cmp	r0, #0
   320e4:	bne	31f50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   320e8:	ldr	r0, [r6]
   320ec:	bl	28ce8 <flatcc_builder_end_vector@@Base>
   320f0:	cmp	r0, #0
   320f4:	str	r0, [r8]
   320f8:	beq	31f50 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x180>
   320fc:	ldrb	r3, [r5]
   32100:	cmp	r3, #34	; 0x22
   32104:	addeq	r0, r5, #1
   32108:	beq	31e38 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   3210c:	ldr	r3, [r6, #20]
   32110:	cmp	r3, #0
   32114:	bne	31e34 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x64>
   32118:	ldr	r3, [r6, #4]
   3211c:	mov	r2, #20
   32120:	b	31f6c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x19c>
   32124:	add	r1, r2, #1
   32128:	cmp	r1, #7
   3212c:	cmpls	r1, r3
   32130:	bcs	3203c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   32134:	ldrb	r0, [ip, r1]
   32138:	add	ip, ip, r1
   3213c:	ldrb	r0, [r9, r0]
   32140:	sub	r0, r0, #65	; 0x41
   32144:	cmp	r0, #1
   32148:	bls	32164 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x394>
   3214c:	b	3203c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   32150:	ldrb	r0, [ip, #1]!
   32154:	ldrb	r0, [r9, r0]
   32158:	sub	r0, r0, #65	; 0x41
   3215c:	cmp	r0, #1
   32160:	bhi	3203c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   32164:	add	r1, r1, #1
   32168:	cmp	r1, #7
   3216c:	cmpls	r1, r3
   32170:	bcc	32150 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x380>
   32174:	b	3203c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x26c>
   32178:	ldrb	r2, [sp, #30]
   3217c:	ldr	r0, [sp, #12]
   32180:	lsl	r1, r2, #6
   32184:	tst	r1, #192	; 0xc0
   32188:	movne	r1, #1
   3218c:	moveq	r1, #0
   32190:	cmp	r0, #1
   32194:	orreq	r1, r1, #1
   32198:	cmp	r1, #0
   3219c:	bne	32058 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   321a0:	ldrb	r1, [sp, #29]
   321a4:	ldrb	r0, [sp, #28]
   321a8:	lsr	r2, r2, #2
   321ac:	add	lr, lr, #2
   321b0:	orr	r2, r2, r1, lsl #4
   321b4:	lsr	r1, r1, #4
   321b8:	orr	r0, r1, r0, lsl #2
   321bc:	strb	r2, [lr, #-1]
   321c0:	strb	r0, [lr, #-2]
   321c4:	b	320b0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   321c8:	mov	r5, fp
   321cc:	b	31ed0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x100>
   321d0:	ldr	r2, [sp, #12]
   321d4:	cmp	r2, #2
   321d8:	bls	32058 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x288>
   321dc:	ldrb	r1, [sp, #29]
   321e0:	subs	r2, r2, #3
   321e4:	str	r2, [sp, #12]
   321e8:	mov	r0, r1
   321ec:	ldrb	r1, [sp, #30]
   321f0:	str	r0, [sp, #4]
   321f4:	lsr	r0, r0, #4
   321f8:	str	r1, [sp, #16]
   321fc:	ldrb	r1, [sp, #28]
   32200:	add	ip, ip, #4
   32204:	sub	r3, r3, #4
   32208:	str	r1, [sp, #20]
   3220c:	ldr	r2, [sp, #20]
   32210:	ldrb	r1, [sp, #31]
   32214:	add	lr, lr, #3
   32218:	orr	r0, r0, r2, lsl #2
   3221c:	ldr	r2, [sp, #16]
   32220:	strb	r0, [lr, #-3]
   32224:	orr	r1, r1, r2, lsl #6
   32228:	str	r1, [sp, #16]
   3222c:	ldr	r1, [sp, #4]
   32230:	lsr	r2, r2, #2
   32234:	orr	r2, r2, r1, lsl #4
   32238:	strb	r2, [lr, #-2]
   3223c:	ldrb	r2, [sp, #16]
   32240:	strb	r2, [lr, #-1]
   32244:	beq	320b0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e0>
   32248:	str	r3, [sp, #4]
   3224c:	b	32000 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   32250:	mov	r5, r2
   32254:	ldr	r3, [r6, #20]
   32258:	cmp	r3, #0
   3225c:	bne	31e10 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   32260:	ldr	r3, [r6, #4]
   32264:	mov	r2, #20
   32268:	b	31eec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   3226c:	andeq	r5, r4, r8, lsl #28

00032270 <flatcc_json_parser_build_string@@Base>:
   32270:	cmp	r1, r2
   32274:	push	{r4, r5, r6, r7, r8, lr}
   32278:	mov	r5, r2
   3227c:	sub	sp, sp, #8
   32280:	mov	r6, r0
   32284:	mov	r7, r3
   32288:	beq	32298 <flatcc_json_parser_build_string@@Base+0x28>
   3228c:	ldrb	r3, [r1]
   32290:	cmp	r3, #34	; 0x22
   32294:	beq	3243c <flatcc_json_parser_build_string@@Base+0x1cc>
   32298:	ldr	r3, [r6, #20]
   3229c:	cmp	r3, #0
   322a0:	beq	324f4 <flatcc_json_parser_build_string@@Base+0x284>
   322a4:	mov	r4, r5
   322a8:	mov	r8, r5
   322ac:	ldr	r0, [r6]
   322b0:	bl	27d5c <flatcc_builder_start_string@@Base>
   322b4:	cmp	r0, #0
   322b8:	beq	322d0 <flatcc_json_parser_build_string@@Base+0x60>
   322bc:	mov	r3, #0
   322c0:	str	r3, [r7]
   322c4:	mov	r0, r4
   322c8:	add	sp, sp, #8
   322cc:	pop	{r4, r5, r6, r7, r8, pc}
   322d0:	sub	r2, r4, r8
   322d4:	mov	r1, r8
   322d8:	ldr	r0, [r6]
   322dc:	bl	27380 <flatcc_builder_append_string@@Base>
   322e0:	cmp	r0, #0
   322e4:	beq	322bc <flatcc_json_parser_build_string@@Base+0x4c>
   322e8:	cmp	r5, r4
   322ec:	beq	32564 <flatcc_json_parser_build_string@@Base+0x2f4>
   322f0:	ldrb	r3, [r4]
   322f4:	cmp	r3, #34	; 0x22
   322f8:	beq	32544 <flatcc_json_parser_build_string@@Base+0x2d4>
   322fc:	mov	r1, r4
   32300:	add	r3, sp, #4
   32304:	mov	r2, r5
   32308:	mov	r0, r6
   3230c:	bl	2eb04 <flatcc_json_parser_string_escape@@Base>
   32310:	ldrb	r2, [sp, #4]
   32314:	add	r1, sp, #5
   32318:	mov	r8, r0
   3231c:	ldr	r0, [r6]
   32320:	bl	27380 <flatcc_builder_append_string@@Base>
   32324:	cmp	r0, #0
   32328:	beq	3255c <flatcc_json_parser_build_string@@Base+0x2ec>
   3232c:	cmp	r5, r8
   32330:	beq	32554 <flatcc_json_parser_build_string@@Base+0x2e4>
   32334:	ldrb	r3, [r8]
   32338:	cmp	r3, #34	; 0x22
   3233c:	cmpne	r3, #31
   32340:	movhi	r2, #1
   32344:	movls	r2, #0
   32348:	cmp	r3, #92	; 0x5c
   3234c:	moveq	r2, #0
   32350:	andne	r2, r2, #1
   32354:	cmp	r2, #0
   32358:	beq	323e8 <flatcc_json_parser_build_string@@Base+0x178>
   3235c:	add	r2, r8, #1
   32360:	b	3238c <flatcc_json_parser_build_string@@Base+0x11c>
   32364:	ldrb	r3, [r2], #1
   32368:	cmp	r3, #34	; 0x22
   3236c:	cmpne	r3, #31
   32370:	movhi	r1, #1
   32374:	movls	r1, #0
   32378:	cmp	r3, #92	; 0x5c
   3237c:	moveq	r1, #0
   32380:	andne	r1, r1, #1
   32384:	cmp	r1, #0
   32388:	beq	323ec <flatcc_json_parser_build_string@@Base+0x17c>
   3238c:	cmp	r5, r2
   32390:	mov	r4, r2
   32394:	bne	32364 <flatcc_json_parser_build_string@@Base+0xf4>
   32398:	ldr	r3, [r6, #20]
   3239c:	cmp	r3, #0
   323a0:	beq	32538 <flatcc_json_parser_build_string@@Base+0x2c8>
   323a4:	ldr	r0, [r6]
   323a8:	bl	29f44 <flatcc_builder_end_string@@Base>
   323ac:	mov	r4, r5
   323b0:	str	r0, [r7]
   323b4:	ldr	r3, [r6, #20]
   323b8:	cmp	r3, #0
   323bc:	movne	r4, r5
   323c0:	bne	322c4 <flatcc_json_parser_build_string@@Base+0x54>
   323c4:	ldr	r3, [r6, #4]
   323c8:	mov	r2, #20
   323cc:	sub	r3, r4, r3
   323d0:	add	r3, r3, #1
   323d4:	str	r4, [r6, #32]
   323d8:	str	r3, [r6, #16]
   323dc:	mov	r4, r5
   323e0:	str	r2, [r6, #20]
   323e4:	b	322c4 <flatcc_json_parser_build_string@@Base+0x54>
   323e8:	mov	r4, r8
   323ec:	cmp	r3, #31
   323f0:	bhi	32420 <flatcc_json_parser_build_string@@Base+0x1b0>
   323f4:	ldr	r3, [r6, #20]
   323f8:	cmp	r3, #0
   323fc:	bne	323a4 <flatcc_json_parser_build_string@@Base+0x134>
   32400:	ldr	r3, [r6, #4]
   32404:	mov	r2, #17
   32408:	sub	r3, r4, r3
   3240c:	add	r3, r3, #1
   32410:	str	r4, [r6, #32]
   32414:	str	r3, [r6, #16]
   32418:	str	r2, [r6, #20]
   3241c:	b	323a4 <flatcc_json_parser_build_string@@Base+0x134>
   32420:	sub	r2, r4, r8
   32424:	mov	r1, r8
   32428:	ldr	r0, [r6]
   3242c:	bl	27380 <flatcc_builder_append_string@@Base>
   32430:	cmp	r0, #0
   32434:	bne	322f0 <flatcc_json_parser_build_string@@Base+0x80>
   32438:	b	322bc <flatcc_json_parser_build_string@@Base+0x4c>
   3243c:	add	r8, r1, #1
   32440:	cmp	r2, r8
   32444:	beq	3257c <flatcc_json_parser_build_string@@Base+0x30c>
   32448:	ldrb	r2, [r1, #1]
   3244c:	cmp	r2, #34	; 0x22
   32450:	cmpne	r2, #31
   32454:	movhi	r3, #1
   32458:	movls	r3, #0
   3245c:	cmp	r2, #92	; 0x5c
   32460:	moveq	r3, #0
   32464:	andne	r3, r3, #1
   32468:	cmp	r3, #0
   3246c:	beq	32574 <flatcc_json_parser_build_string@@Base+0x304>
   32470:	add	r3, r1, #2
   32474:	cmp	r5, r3
   32478:	mov	r4, r3
   3247c:	beq	32580 <flatcc_json_parser_build_string@@Base+0x310>
   32480:	ldrb	r2, [r3], #1
   32484:	cmp	r2, #34	; 0x22
   32488:	cmpne	r2, #31
   3248c:	movhi	r0, #1
   32490:	movls	r0, #0
   32494:	cmp	r2, #92	; 0x5c
   32498:	moveq	r0, #0
   3249c:	andne	r0, r0, #1
   324a0:	cmp	r0, #0
   324a4:	bne	32474 <flatcc_json_parser_build_string@@Base+0x204>
   324a8:	cmp	r2, #31
   324ac:	bhi	324c4 <flatcc_json_parser_build_string@@Base+0x254>
   324b0:	ldr	r3, [r6, #20]
   324b4:	cmp	r3, #0
   324b8:	beq	32514 <flatcc_json_parser_build_string@@Base+0x2a4>
   324bc:	mov	r4, r5
   324c0:	b	322ac <flatcc_json_parser_build_string@@Base+0x3c>
   324c4:	cmp	r2, #34	; 0x22
   324c8:	bne	322ac <flatcc_json_parser_build_string@@Base+0x3c>
   324cc:	sub	r2, r4, r8
   324d0:	mov	r1, r8
   324d4:	ldr	r0, [r6]
   324d8:	bl	29c74 <flatcc_builder_create_string@@Base>
   324dc:	str	r0, [r7]
   324e0:	ldrb	r3, [r4]
   324e4:	cmp	r3, #34	; 0x22
   324e8:	addeq	r4, r4, #1
   324ec:	bne	323b4 <flatcc_json_parser_build_string@@Base+0x144>
   324f0:	b	322c4 <flatcc_json_parser_build_string@@Base+0x54>
   324f4:	ldr	r3, [r6, #4]
   324f8:	mov	r2, #16
   324fc:	sub	r3, r1, r3
   32500:	add	r3, r3, #1
   32504:	str	r1, [r6, #32]
   32508:	str	r3, [r6, #16]
   3250c:	str	r2, [r6, #20]
   32510:	b	322a4 <flatcc_json_parser_build_string@@Base+0x34>
   32514:	ldr	r3, [r6, #4]
   32518:	mov	r2, #17
   3251c:	sub	r3, r4, r3
   32520:	add	r3, r3, #1
   32524:	str	r4, [r6, #32]
   32528:	str	r3, [r6, #16]
   3252c:	str	r2, [r6, #20]
   32530:	mov	r4, r5
   32534:	b	322ac <flatcc_json_parser_build_string@@Base+0x3c>
   32538:	ldr	r3, [r6, #4]
   3253c:	mov	r2, #20
   32540:	b	32408 <flatcc_json_parser_build_string@@Base+0x198>
   32544:	ldr	r0, [r6]
   32548:	bl	29f44 <flatcc_builder_end_string@@Base>
   3254c:	str	r0, [r7]
   32550:	b	324e0 <flatcc_json_parser_build_string@@Base+0x270>
   32554:	mov	r4, r5
   32558:	b	32398 <flatcc_json_parser_build_string@@Base+0x128>
   3255c:	mov	r4, r8
   32560:	b	322bc <flatcc_json_parser_build_string@@Base+0x4c>
   32564:	ldr	r0, [r6]
   32568:	bl	29f44 <flatcc_builder_end_string@@Base>
   3256c:	str	r0, [r7]
   32570:	b	323b4 <flatcc_json_parser_build_string@@Base+0x144>
   32574:	mov	r4, r8
   32578:	b	324a8 <flatcc_json_parser_build_string@@Base+0x238>
   3257c:	mov	r4, r2
   32580:	ldr	r3, [r6, #20]
   32584:	cmp	r3, #0
   32588:	bne	324bc <flatcc_json_parser_build_string@@Base+0x24c>
   3258c:	ldr	r3, [r6, #4]
   32590:	mov	r2, #20
   32594:	b	3251c <flatcc_json_parser_build_string@@Base+0x2ac>

00032598 <flatcc_json_parser_prepare_unions@@Base>:
   32598:	push	{r4, r5, r6, r7, r8, lr}
   3259c:	mov	r4, r0
   325a0:	add	r0, r3, r3, lsl #1
   325a4:	mov	r8, r1
   325a8:	lsl	r1, r0, #3
   325ac:	add	r1, r1, #8
   325b0:	ldr	r0, [r4]
   325b4:	ldr	r7, [sp, #24]
   325b8:	mov	r5, r3
   325bc:	mov	r6, r2
   325c0:	bl	25c54 <flatcc_builder_enter_user_frame@@Base>
   325c4:	cmp	r0, #0
   325c8:	str	r0, [r7]
   325cc:	bne	325e4 <flatcc_json_parser_prepare_unions@@Base+0x4c>
   325d0:	ldr	r3, [r4, #20]
   325d4:	cmp	r3, #0
   325d8:	beq	32600 <flatcc_json_parser_prepare_unions@@Base+0x68>
   325dc:	mov	r0, r6
   325e0:	pop	{r4, r5, r6, r7, r8, pc}
   325e4:	mov	r1, r0
   325e8:	ldr	r0, [r4]
   325ec:	bl	25d84 <flatcc_builder_get_user_frame_ptr@@Base>
   325f0:	mov	r6, r8
   325f4:	str	r5, [r0]
   325f8:	mov	r0, r6
   325fc:	pop	{r4, r5, r6, r7, r8, pc}
   32600:	ldr	r3, [r4, #4]
   32604:	mov	r2, #33	; 0x21
   32608:	sub	r3, r8, r3
   3260c:	add	r3, r3, #1
   32610:	str	r8, [r4, #32]
   32614:	str	r3, [r4, #16]
   32618:	str	r2, [r4, #20]
   3261c:	mov	r0, r6
   32620:	pop	{r4, r5, r6, r7, r8, pc}

00032624 <flatcc_json_parser_finalize_unions@@Base>:
   32624:	push	{r4, r5, r6, r7, r8, lr}
   32628:	mov	r5, r1
   3262c:	mov	r4, r0
   32630:	mov	r1, r3
   32634:	ldr	r0, [r0]
   32638:	mov	r6, r3
   3263c:	mov	r7, r2
   32640:	bl	25d84 <flatcc_builder_get_user_frame_ptr@@Base>
   32644:	ldr	r3, [r0, #4]
   32648:	cmp	r3, #0
   3264c:	moveq	r7, r5
   32650:	beq	32660 <flatcc_json_parser_finalize_unions@@Base+0x3c>
   32654:	ldr	r3, [r4, #20]
   32658:	cmp	r3, #0
   3265c:	beq	32674 <flatcc_json_parser_finalize_unions@@Base+0x50>
   32660:	mov	r1, r6
   32664:	ldr	r0, [r4]
   32668:	bl	25d18 <flatcc_builder_exit_user_frame_at@@Base>
   3266c:	mov	r0, r7
   32670:	pop	{r4, r5, r6, r7, r8, pc}
   32674:	ldr	r3, [r4, #4]
   32678:	mov	r2, #27
   3267c:	sub	r3, r5, r3
   32680:	add	r3, r3, #1
   32684:	str	r5, [r4, #32]
   32688:	str	r3, [r4, #16]
   3268c:	str	r2, [r4, #20]
   32690:	b	32660 <flatcc_json_parser_finalize_unions@@Base+0x3c>

00032694 <flatcc_json_parser_union@@Base>:
   32694:	push	{r4, r5, r6, r7, r8, lr}
   32698:	sub	sp, sp, #16
   3269c:	mov	r5, r0
   326a0:	mov	r8, r1
   326a4:	ldr	r0, [r0]
   326a8:	ldr	r1, [sp, #44]	; 0x2c
   326ac:	mov	r4, r3
   326b0:	mov	r6, r2
   326b4:	ldrh	r7, [sp, #40]	; 0x28
   326b8:	bl	25d84 <flatcc_builder_get_user_frame_ptr@@Base>
   326bc:	add	r4, r4, r4, lsl #1
   326c0:	add	r4, r0, r4, lsl #3
   326c4:	ldr	r3, [r4, #8]
   326c8:	cmp	r3, #0
   326cc:	beq	32718 <flatcc_json_parser_union@@Base+0x84>
   326d0:	ldr	r3, [r5, #20]
   326d4:	cmp	r3, #0
   326d8:	beq	326ec <flatcc_json_parser_union@@Base+0x58>
   326dc:	mov	r4, r6
   326e0:	mov	r0, r4
   326e4:	add	sp, sp, #16
   326e8:	pop	{r4, r5, r6, r7, r8, pc}
   326ec:	ldr	r3, [r5, #4]
   326f0:	mov	r2, #28
   326f4:	sub	r3, r8, r3
   326f8:	add	r3, r3, #1
   326fc:	mov	r4, r6
   32700:	mov	r0, r4
   32704:	str	r8, [r5, #32]
   32708:	str	r3, [r5, #16]
   3270c:	str	r2, [r5, #20]
   32710:	add	sp, sp, #16
   32714:	pop	{r4, r5, r6, r7, r8, pc}
   32718:	ldrb	r3, [r4, #20]
   3271c:	cmp	r3, #0
   32720:	beq	327cc <flatcc_json_parser_union@@Base+0x138>
   32724:	ldrb	r3, [r4, #21]
   32728:	cmp	r3, #0
   3272c:	strb	r3, [sp, #8]
   32730:	bne	3274c <flatcc_json_parser_union@@Base+0xb8>
   32734:	ldr	r3, [r5, #20]
   32738:	cmp	r3, #0
   3273c:	bne	326dc <flatcc_json_parser_union@@Base+0x48>
   32740:	ldr	r3, [r5, #4]
   32744:	mov	r2, #25
   32748:	b	326f4 <flatcc_json_parser_union@@Base+0x60>
   3274c:	ldr	r2, [r0, #4]
   32750:	add	ip, sp, #12
   32754:	sub	r2, r2, #1
   32758:	str	r2, [r0, #4]
   3275c:	mov	r1, r8
   32760:	str	ip, [sp]
   32764:	mov	r2, r6
   32768:	mov	r0, r5
   3276c:	ldr	ip, [sp, #48]	; 0x30
   32770:	blx	ip
   32774:	add	r3, sp, #8
   32778:	cmp	r6, r0
   3277c:	mov	r4, r0
   32780:	beq	326e0 <flatcc_json_parser_union@@Base+0x4c>
   32784:	mov	r1, r7
   32788:	ldm	r3, {r2, r3}
   3278c:	ldr	r0, [r5]
   32790:	bl	2a640 <flatcc_builder_table_add_union@@Base>
   32794:	cmp	r0, #0
   32798:	beq	326e0 <flatcc_json_parser_union@@Base+0x4c>
   3279c:	ldr	r3, [r5, #20]
   327a0:	cmp	r3, #0
   327a4:	bne	326dc <flatcc_json_parser_union@@Base+0x48>
   327a8:	ldr	r3, [r5, #4]
   327ac:	mov	r2, #28
   327b0:	sub	r3, r4, r3
   327b4:	add	r3, r3, #1
   327b8:	str	r4, [r5, #32]
   327bc:	str	r3, [r5, #16]
   327c0:	mov	r4, r6
   327c4:	str	r2, [r5, #20]
   327c8:	b	326e0 <flatcc_json_parser_union@@Base+0x4c>
   327cc:	ldr	r3, [r0, #4]
   327d0:	ldr	lr, [r5, #12]
   327d4:	ldr	ip, [r5, #4]
   327d8:	add	r3, r3, #1
   327dc:	str	r3, [r0, #4]
   327e0:	mov	r2, r6
   327e4:	str	lr, [r4, #16]
   327e8:	str	ip, [r4, #12]
   327ec:	str	r8, [r4, #8]
   327f0:	mov	r1, r8
   327f4:	mov	r0, r5
   327f8:	bl	2f628 <flatcc_json_parser_generic_json@@Base>
   327fc:	mov	r4, r0
   32800:	b	326e0 <flatcc_json_parser_union@@Base+0x4c>

00032804 <flatcc_json_parser_union_type@@Base>:
   32804:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32808:	sub	sp, sp, #36	; 0x24
   3280c:	mov	sl, r3
   32810:	ldrh	r3, [sp, #72]	; 0x48
   32814:	mov	r4, r0
   32818:	mov	r9, r1
   3281c:	ldr	r0, [r0]
   32820:	ldr	r1, [sp, #76]	; 0x4c
   32824:	mov	r5, r2
   32828:	str	r3, [sp, #16]
   3282c:	bl	25d84 <flatcc_builder_get_user_frame_ptr@@Base>
   32830:	add	sl, sl, sl, lsl #1
   32834:	lsl	r2, sl, #3
   32838:	str	r2, [sp, #12]
   3283c:	add	r3, r0, #8
   32840:	add	r6, r3, r2
   32844:	str	r3, [sp, #8]
   32848:	ldrb	r3, [r6, #12]
   3284c:	cmp	r3, #0
   32850:	beq	32870 <flatcc_json_parser_union_type@@Base+0x6c>
   32854:	ldr	r3, [r4, #20]
   32858:	cmp	r3, #0
   3285c:	beq	32a28 <flatcc_json_parser_union_type@@Base+0x224>
   32860:	mov	r7, r5
   32864:	mov	r0, r7
   32868:	add	sp, sp, #36	; 0x24
   3286c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32870:	mov	r2, #1
   32874:	cmp	r9, r5
   32878:	mov	r8, r0
   3287c:	strb	r3, [r6, #13]
   32880:	strb	r2, [r6, #12]
   32884:	beq	32a54 <flatcc_json_parser_union_type@@Base+0x250>
   32888:	ldrb	r3, [r9]
   3288c:	str	r3, [sp, #20]
   32890:	sub	r3, r3, #45	; 0x2d
   32894:	clz	r3, r3
   32898:	lsr	r3, r3, #5
   3289c:	add	r7, r9, r3
   328a0:	cmp	r5, r7
   328a4:	beq	32af8 <flatcc_json_parser_union_type@@Base+0x2f4>
   328a8:	ldrb	ip, [r9, r3]
   328ac:	sub	r3, ip, #48	; 0x30
   328b0:	cmp	r3, #9
   328b4:	bhi	32a7c <flatcc_json_parser_union_type@@Base+0x278>
   328b8:	uxtb	sl, ip
   328bc:	mov	fp, #0
   328c0:	subs	sl, sl, #48	; 0x30
   328c4:	add	r1, r7, r2
   328c8:	sbc	fp, fp, #0
   328cc:	mov	lr, #10
   328d0:	b	32918 <flatcc_json_parser_union_type@@Base+0x114>
   328d4:	mov	r0, r1
   328d8:	ldrb	ip, [r0], #1
   328dc:	sub	r3, ip, #48	; 0x30
   328e0:	cmp	r3, #9
   328e4:	bhi	32a84 <flatcc_json_parser_union_type@@Base+0x280>
   328e8:	umull	r2, r3, sl, lr
   328ec:	mla	r3, lr, fp, r3
   328f0:	subs	r2, r2, #48	; 0x30
   328f4:	sbc	r3, r3, #0
   328f8:	adds	r2, r2, ip
   328fc:	adc	r3, r3, #0
   32900:	cmp	r3, fp
   32904:	cmpeq	r2, sl
   32908:	bcc	32b04 <flatcc_json_parser_union_type@@Base+0x300>
   3290c:	mov	r1, r0
   32910:	mov	sl, r2
   32914:	mov	fp, r3
   32918:	cmp	r1, r5
   3291c:	mov	r7, r1
   32920:	bne	328d4 <flatcc_json_parser_union_type@@Base+0xd0>
   32924:	ldr	r3, [sp, #20]
   32928:	cmp	r3, #45	; 0x2d
   3292c:	beq	32abc <flatcc_json_parser_union_type@@Base+0x2b8>
   32930:	cmp	fp, #0
   32934:	cmpeq	sl, #255	; 0xff
   32938:	bls	32b24 <flatcc_json_parser_union_type@@Base+0x320>
   3293c:	ldr	r3, [r4, #20]
   32940:	cmp	r3, #0
   32944:	bne	32ab4 <flatcc_json_parser_union_type@@Base+0x2b0>
   32948:	ldr	r3, [r4, #4]
   3294c:	str	r7, [r4, #32]
   32950:	sub	r3, r7, r3
   32954:	mov	r7, r5
   32958:	add	r3, r3, #1
   3295c:	mov	r2, #7
   32960:	str	r3, [r4, #16]
   32964:	str	r2, [r4, #20]
   32968:	ldr	r3, [sp, #8]
   3296c:	ldr	r2, [sp, #12]
   32970:	ldr	r1, [r3, r2]
   32974:	cmp	r1, #0
   32978:	beq	32b34 <flatcc_json_parser_union_type@@Base+0x330>
   3297c:	ldr	r3, [r8, #4]
   32980:	cmp	r3, #0
   32984:	beq	32b8c <flatcc_json_parser_union_type@@Base+0x388>
   32988:	ldr	r0, [r6, #8]
   3298c:	ldr	r2, [r6, #4]
   32990:	sub	r3, r3, #1
   32994:	str	r3, [r8, #4]
   32998:	ldr	r9, [r4, #12]
   3299c:	ldr	r8, [r4, #4]
   329a0:	str	r0, [r4, #12]
   329a4:	str	r2, [r4, #4]
   329a8:	ldrb	ip, [r6, #13]
   329ac:	add	r6, sp, #32
   329b0:	add	r2, sp, #28
   329b4:	str	r2, [sp]
   329b8:	mov	r3, ip
   329bc:	strb	ip, [r6, #-8]!
   329c0:	mov	r2, r5
   329c4:	mov	r0, r4
   329c8:	ldr	ip, [sp, #84]	; 0x54
   329cc:	blx	ip
   329d0:	cmp	r5, r0
   329d4:	beq	32860 <flatcc_json_parser_union_type@@Base+0x5c>
   329d8:	ldr	r1, [sp, #16]
   329dc:	ldm	r6, {r2, r3}
   329e0:	ldr	r0, [r4]
   329e4:	bl	2a640 <flatcc_builder_table_add_union@@Base>
   329e8:	cmp	r0, #0
   329ec:	streq	r9, [r4, #12]
   329f0:	streq	r8, [r4, #4]
   329f4:	beq	32864 <flatcc_json_parser_union_type@@Base+0x60>
   329f8:	ldr	r3, [r4, #20]
   329fc:	cmp	r3, #0
   32a00:	bne	32860 <flatcc_json_parser_union_type@@Base+0x5c>
   32a04:	ldr	r3, [r4, #4]
   32a08:	mov	r2, #28
   32a0c:	sub	r3, r7, r3
   32a10:	add	r3, r3, #1
   32a14:	str	r7, [r4, #32]
   32a18:	str	r3, [r4, #16]
   32a1c:	mov	r7, r5
   32a20:	str	r2, [r4, #20]
   32a24:	b	32864 <flatcc_json_parser_union_type@@Base+0x60>
   32a28:	ldr	r3, [r4, #4]
   32a2c:	mov	r2, #28
   32a30:	sub	r3, r9, r3
   32a34:	add	r3, r3, #1
   32a38:	mov	r7, r5
   32a3c:	mov	r0, r7
   32a40:	str	r9, [r4, #32]
   32a44:	str	r3, [r4, #16]
   32a48:	str	r2, [r4, #20]
   32a4c:	add	sp, sp, #36	; 0x24
   32a50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32a54:	mov	r7, r5
   32a58:	add	r3, r6, #13
   32a5c:	mov	r1, r7
   32a60:	str	r3, [sp]
   32a64:	mov	r2, r5
   32a68:	ldr	r3, [sp, #80]	; 0x50
   32a6c:	mov	r0, r4
   32a70:	bl	2cb28 <flatcc_verify_union_vector_field@@Base+0x2ac>
   32a74:	mov	r7, r0
   32a78:	b	32968 <flatcc_json_parser_union_type@@Base+0x164>
   32a7c:	mov	sl, #0
   32a80:	mov	fp, #0
   32a84:	cmp	r9, r7
   32a88:	beq	32a58 <flatcc_json_parser_union_type@@Base+0x254>
   32a8c:	and	r3, ip, #223	; 0xdf
   32a90:	cmp	ip, #46	; 0x2e
   32a94:	cmpne	r3, #69	; 0x45
   32a98:	bne	32924 <flatcc_json_parser_union_type@@Base+0x120>
   32a9c:	ldr	r3, [r4, #20]
   32aa0:	cmp	r3, #0
   32aa4:	beq	32b4c <flatcc_json_parser_union_type@@Base+0x348>
   32aa8:	ldr	r3, [sp, #20]
   32aac:	cmp	r3, #45	; 0x2d
   32ab0:	bne	32ae8 <flatcc_json_parser_union_type@@Base+0x2e4>
   32ab4:	mov	r7, r5
   32ab8:	b	32968 <flatcc_json_parser_union_type@@Base+0x164>
   32abc:	ldr	r3, [r4, #20]
   32ac0:	cmp	r3, #0
   32ac4:	bne	32ab4 <flatcc_json_parser_union_type@@Base+0x2b0>
   32ac8:	ldr	r3, [r4, #4]
   32acc:	mov	r2, #8
   32ad0:	sub	r3, r7, r3
   32ad4:	add	r3, r3, #1
   32ad8:	str	r7, [r4, #32]
   32adc:	str	r3, [r4, #16]
   32ae0:	str	r2, [r4, #20]
   32ae4:	b	32ab4 <flatcc_json_parser_union_type@@Base+0x2b0>
   32ae8:	mov	r3, #0
   32aec:	strb	r3, [r6, #13]
   32af0:	mov	r7, r5
   32af4:	b	32968 <flatcc_json_parser_union_type@@Base+0x164>
   32af8:	mov	sl, #0
   32afc:	mov	fp, #0
   32b00:	b	32924 <flatcc_json_parser_union_type@@Base+0x120>
   32b04:	ldr	r3, [r4, #20]
   32b08:	cmp	r3, #0
   32b0c:	beq	32b6c <flatcc_json_parser_union_type@@Base+0x368>
   32b10:	ldr	r3, [sp, #20]
   32b14:	cmp	r3, #45	; 0x2d
   32b18:	movne	r7, r5
   32b1c:	movne	sl, #0
   32b20:	beq	32ab4 <flatcc_json_parser_union_type@@Base+0x2b0>
   32b24:	cmp	r9, r7
   32b28:	strb	sl, [r6, #13]
   32b2c:	bne	32968 <flatcc_json_parser_union_type@@Base+0x164>
   32b30:	b	32a58 <flatcc_json_parser_union_type@@Base+0x254>
   32b34:	ldrb	r2, [r6, #13]
   32b38:	ldr	r3, [r8, #4]
   32b3c:	cmp	r2, #0
   32b40:	addne	r3, r3, #1
   32b44:	str	r3, [r8, #4]
   32b48:	b	32864 <flatcc_json_parser_union_type@@Base+0x60>
   32b4c:	ldr	r3, [r4, #4]
   32b50:	mov	r2, #12
   32b54:	sub	r3, r7, r3
   32b58:	add	r3, r3, #1
   32b5c:	str	r7, [r4, #32]
   32b60:	str	r3, [r4, #16]
   32b64:	str	r2, [r4, #20]
   32b68:	b	32b10 <flatcc_json_parser_union_type@@Base+0x30c>
   32b6c:	ldr	r3, [r4, #4]
   32b70:	mov	r2, #8
   32b74:	sub	r3, r1, r3
   32b78:	add	r3, r3, #1
   32b7c:	str	r1, [r4, #32]
   32b80:	str	r3, [r4, #16]
   32b84:	str	r2, [r4, #20]
   32b88:	b	32b10 <flatcc_json_parser_union_type@@Base+0x30c>
   32b8c:	ldr	r3, [pc, #12]	; 32ba0 <flatcc_json_parser_union_type@@Base+0x39c>
   32b90:	ldr	r2, [pc, #12]	; 32ba4 <flatcc_json_parser_union_type@@Base+0x3a0>
   32b94:	ldr	r1, [pc, #12]	; 32ba8 <flatcc_json_parser_union_type@@Base+0x3a4>
   32b98:	ldr	r0, [pc, #12]	; 32bac <flatcc_json_parser_union_type@@Base+0x3a8>
   32b9c:	bl	14618 <__assert_fail@plt>
   32ba0:	andeq	r6, r4, r8
   32ba4:	andeq	r0, r0, r5, asr #7
   32ba8:	andeq	r6, r4, r0, lsr #3
   32bac:	andeq	r6, r4, ip, ror #3

00032bb0 <flatcc_json_parser_union_vector@@Base>:
   32bb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32bb4:	mov	r5, r0
   32bb8:	mov	r6, r1
   32bbc:	ldr	r0, [r0]
   32bc0:	ldr	r1, [sp, #36]	; 0x24
   32bc4:	mov	r4, r3
   32bc8:	mov	r9, r2
   32bcc:	ldrh	r7, [sp, #32]
   32bd0:	ldr	r8, [sp, #40]	; 0x28
   32bd4:	bl	25d84 <flatcc_builder_get_user_frame_ptr@@Base>
   32bd8:	add	r3, r4, r4, lsl #1
   32bdc:	lsl	r3, r3, #3
   32be0:	add	ip, r0, #8
   32be4:	add	r1, ip, r3
   32be8:	ldr	r2, [ip, r3]
   32bec:	cmp	r2, #0
   32bf0:	beq	32c2c <flatcc_json_parser_union_vector@@Base+0x7c>
   32bf4:	ldr	r3, [r5, #20]
   32bf8:	cmp	r3, #0
   32bfc:	beq	32c08 <flatcc_json_parser_union_vector@@Base+0x58>
   32c00:	mov	r0, r9
   32c04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32c08:	ldr	r3, [r5, #4]
   32c0c:	mov	r2, #28
   32c10:	sub	r3, r6, r3
   32c14:	add	r3, r3, #1
   32c18:	str	r6, [r5, #32]
   32c1c:	str	r3, [r5, #16]
   32c20:	str	r2, [r5, #20]
   32c24:	mov	r0, r9
   32c28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32c2c:	ldrb	r2, [r1, #12]
   32c30:	cmp	r2, #0
   32c34:	beq	32c6c <flatcc_json_parser_union_vector@@Base+0xbc>
   32c38:	ldr	r3, [r0, #4]
   32c3c:	mov	r2, r9
   32c40:	sub	r3, r3, #1
   32c44:	str	r3, [r0, #4]
   32c48:	ldr	r3, [r1, #20]
   32c4c:	str	r8, [sp, #40]	; 0x28
   32c50:	str	r7, [sp, #36]	; 0x24
   32c54:	ldr	ip, [r1, #16]
   32c58:	mov	r0, r5
   32c5c:	mov	r1, r6
   32c60:	str	ip, [sp, #32]
   32c64:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   32c68:	b	2cdfc <flatcc_verify_union_vector_field@@Base+0x580>
   32c6c:	ldr	lr, [r0, #4]
   32c70:	ldr	r4, [r5, #12]
   32c74:	add	lr, lr, #1
   32c78:	str	lr, [r0, #4]
   32c7c:	ldr	r0, [r5, #4]
   32c80:	mov	r2, r9
   32c84:	stmib	r1, {r0, r4}
   32c88:	mov	r1, r6
   32c8c:	str	r6, [ip, r3]
   32c90:	mov	r0, r5
   32c94:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   32c98:	b	2f628 <flatcc_json_parser_generic_json@@Base>

00032c9c <flatcc_json_parser_union_type_vector@@Base>:
   32c9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32ca0:	sub	sp, sp, #44	; 0x2c
   32ca4:	mov	r4, r3
   32ca8:	ldrh	r3, [sp, #80]	; 0x50
   32cac:	mov	sl, r0
   32cb0:	mov	fp, r1
   32cb4:	ldr	r0, [r0]
   32cb8:	ldr	r1, [sp, #84]	; 0x54
   32cbc:	str	r3, [sp, #24]
   32cc0:	mov	r9, r2
   32cc4:	bl	25d84 <flatcc_builder_get_user_frame_ptr@@Base>
   32cc8:	add	r4, r4, r4, lsl #1
   32ccc:	lsl	r3, r4, #3
   32cd0:	str	r3, [sp, #28]
   32cd4:	add	r0, r0, #8
   32cd8:	add	r3, r0, r3
   32cdc:	str	r3, [sp, #20]
   32ce0:	ldrb	r3, [r3, #12]
   32ce4:	cmp	r3, #0
   32ce8:	beq	32d08 <flatcc_json_parser_union_type_vector@@Base+0x6c>
   32cec:	ldr	r3, [sl, #20]
   32cf0:	cmp	r3, #0
   32cf4:	beq	32d44 <flatcc_json_parser_union_type_vector@@Base+0xa8>
   32cf8:	mov	r8, r9
   32cfc:	mov	r0, r8
   32d00:	add	sp, sp, #44	; 0x2c
   32d04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32d08:	ldr	r3, [sp, #20]
   32d0c:	mov	r2, #1
   32d10:	mov	r1, r2
   32d14:	strb	r2, [r3, #12]
   32d18:	mvn	r3, #0
   32d1c:	ldr	r0, [sl]
   32d20:	bl	27808 <flatcc_builder_start_vector@@Base>
   32d24:	cmp	r0, #0
   32d28:	beq	32d70 <flatcc_json_parser_union_type_vector@@Base+0xd4>
   32d2c:	ldr	r3, [sl, #20]
   32d30:	cmp	r3, #0
   32d34:	bne	32cf8 <flatcc_json_parser_union_type_vector@@Base+0x5c>
   32d38:	ldr	r3, [sl, #4]
   32d3c:	mov	r2, #33	; 0x21
   32d40:	b	32d4c <flatcc_json_parser_union_type_vector@@Base+0xb0>
   32d44:	ldr	r3, [sl, #4]
   32d48:	mov	r2, #28
   32d4c:	sub	r3, fp, r3
   32d50:	add	r3, r3, #1
   32d54:	mov	r8, r9
   32d58:	mov	r0, r8
   32d5c:	str	fp, [sl, #32]
   32d60:	str	r3, [sl, #16]
   32d64:	str	r2, [sl, #20]
   32d68:	add	sp, sp, #44	; 0x2c
   32d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32d70:	cmp	fp, r9
   32d74:	beq	32d84 <flatcc_json_parser_union_type_vector@@Base+0xe8>
   32d78:	ldrb	r3, [fp]
   32d7c:	cmp	r3, #91	; 0x5b
   32d80:	beq	32ec8 <flatcc_json_parser_union_type_vector@@Base+0x22c>
   32d84:	ldr	r3, [sl, #20]
   32d88:	cmp	r3, #0
   32d8c:	beq	32ea4 <flatcc_json_parser_union_type_vector@@Base+0x208>
   32d90:	mov	r8, r9
   32d94:	ldr	r0, [sl]
   32d98:	bl	28ee0 <flatcc_builder_vector_count@@Base>
   32d9c:	ldr	r3, [sp, #20]
   32da0:	mov	r1, r0
   32da4:	str	r0, [r3, #16]
   32da8:	mov	r4, r0
   32dac:	ldr	r0, [sl]
   32db0:	bl	25c54 <flatcc_builder_enter_user_frame@@Base>
   32db4:	mov	r1, r0
   32db8:	mov	r5, r0
   32dbc:	ldr	r0, [sl]
   32dc0:	bl	25d84 <flatcc_builder_get_user_frame_ptr@@Base>
   32dc4:	mov	r6, r0
   32dc8:	ldr	r0, [sl]
   32dcc:	bl	28eec <flatcc_builder_vector_edit@@Base>
   32dd0:	mov	r2, r4
   32dd4:	mov	r1, r0
   32dd8:	mov	r0, r6
   32ddc:	bl	1454c <memcpy@plt>
   32de0:	ldr	r0, [sl]
   32de4:	bl	28ce8 <flatcc_builder_end_vector@@Base>
   32de8:	subs	r6, r0, #0
   32dec:	bne	32df8 <flatcc_json_parser_union_type_vector@@Base+0x15c>
   32df0:	mov	fp, r8
   32df4:	b	32d2c <flatcc_json_parser_union_type_vector@@Base+0x90>
   32df8:	ldr	r3, [sp, #24]
   32dfc:	ldr	r0, [sl]
   32e00:	sub	r1, r3, #1
   32e04:	bl	2a4b0 <flatcc_builder_table_add_offset@@Base>
   32e08:	cmp	r0, #0
   32e0c:	beq	32df0 <flatcc_json_parser_union_type_vector@@Base+0x154>
   32e10:	str	r6, [r0]
   32e14:	ldr	r1, [sp, #84]	; 0x54
   32e18:	ldr	r0, [sl]
   32e1c:	bl	25d84 <flatcc_builder_get_user_frame_ptr@@Base>
   32e20:	ldr	r1, [sp, #28]
   32e24:	add	r3, r0, #8
   32e28:	add	r2, r3, r1
   32e2c:	ldr	r1, [r3, r1]
   32e30:	ldr	r3, [r0, #4]
   32e34:	cmp	r1, #0
   32e38:	addeq	r3, r3, #1
   32e3c:	str	r5, [r2, #20]
   32e40:	streq	r3, [r0, #4]
   32e44:	beq	32cfc <flatcc_json_parser_union_type_vector@@Base+0x60>
   32e48:	cmp	r3, #0
   32e4c:	beq	339b0 <flatcc_json_parser_union_type_vector@@Base+0xd14>
   32e50:	sub	r3, r3, #1
   32e54:	ldmib	r2, {r2, ip}
   32e58:	str	r3, [r0, #4]
   32e5c:	ldr	r0, [sp, #92]	; 0x5c
   32e60:	str	r4, [sp]
   32e64:	str	r0, [sp, #8]
   32e68:	ldr	r0, [sp, #24]
   32e6c:	mov	r3, r5
   32e70:	str	r0, [sp, #4]
   32e74:	mov	r0, sl
   32e78:	ldr	r5, [sl, #12]
   32e7c:	ldr	r4, [sl, #4]
   32e80:	str	ip, [sl, #12]
   32e84:	str	r2, [sl, #4]
   32e88:	mov	r2, r9
   32e8c:	bl	2cdfc <flatcc_verify_union_vector_field@@Base+0x580>
   32e90:	cmp	r9, r0
   32e94:	beq	32cf8 <flatcc_json_parser_union_type_vector@@Base+0x5c>
   32e98:	str	r5, [sl, #12]
   32e9c:	str	r4, [sl, #4]
   32ea0:	b	32cfc <flatcc_json_parser_union_type_vector@@Base+0x60>
   32ea4:	ldr	r3, [sl, #4]
   32ea8:	mov	r2, #22
   32eac:	sub	r3, fp, r3
   32eb0:	add	r3, r3, #1
   32eb4:	str	fp, [sl, #32]
   32eb8:	str	r3, [sl, #16]
   32ebc:	str	r2, [sl, #20]
   32ec0:	mov	r8, r9
   32ec4:	b	32d94 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   32ec8:	add	r3, fp, #1
   32ecc:	sub	r2, r9, r3
   32ed0:	cmp	r2, #1
   32ed4:	ble	32ee8 <flatcc_json_parser_union_type_vector@@Base+0x24c>
   32ed8:	ldrb	r2, [fp, #1]
   32edc:	cmp	r2, #32
   32ee0:	bhi	3393c <flatcc_json_parser_union_type_vector@@Base+0xca0>
   32ee4:	beq	33970 <flatcc_json_parser_union_type_vector@@Base+0xcd4>
   32ee8:	mov	r1, #0
   32eec:	cmp	r9, r3
   32ef0:	beq	33934 <flatcc_json_parser_union_type_vector@@Base+0xc98>
   32ef4:	ldrb	r2, [r3]
   32ef8:	cmp	r2, #32
   32efc:	bne	33780 <flatcc_json_parser_union_type_vector@@Base+0xae4>
   32f00:	add	r3, r3, #1
   32f04:	b	32f14 <flatcc_json_parser_union_type_vector@@Base+0x278>
   32f08:	ldrb	r2, [r3], #1
   32f0c:	cmp	r2, #32
   32f10:	bne	33784 <flatcc_json_parser_union_type_vector@@Base+0xae8>
   32f14:	cmp	r9, r3
   32f18:	mov	fp, r3
   32f1c:	bne	32f08 <flatcc_json_parser_union_type_vector@@Base+0x26c>
   32f20:	mov	r5, #0
   32f24:	mov	r1, #1
   32f28:	ldr	r0, [sl]
   32f2c:	bl	26c9c <flatcc_builder_extend_vector@@Base>
   32f30:	subs	r3, r0, #0
   32f34:	str	r3, [sp, #16]
   32f38:	beq	32d2c <flatcc_json_parser_union_type_vector@@Base+0x90>
   32f3c:	cmp	r9, fp
   32f40:	strb	r5, [sp, #39]	; 0x27
   32f44:	beq	33360 <flatcc_json_parser_union_type_vector@@Base+0x6c4>
   32f48:	ldrb	r4, [fp]
   32f4c:	sub	r3, r4, #45	; 0x2d
   32f50:	clz	r3, r3
   32f54:	lsr	r3, r3, #5
   32f58:	add	r8, fp, r3
   32f5c:	cmp	r9, r8
   32f60:	beq	332a0 <flatcc_json_parser_union_type_vector@@Base+0x604>
   32f64:	ldrb	ip, [fp, r3]
   32f68:	sub	r3, ip, #48	; 0x30
   32f6c:	cmp	r3, #9
   32f70:	bhi	3325c <flatcc_json_parser_union_type_vector@@Base+0x5c0>
   32f74:	uxtb	r6, ip
   32f78:	mov	r7, #0
   32f7c:	subs	r6, r6, #48	; 0x30
   32f80:	add	r1, r8, #1
   32f84:	sbc	r7, r7, #0
   32f88:	mov	lr, #10
   32f8c:	b	32fd4 <flatcc_json_parser_union_type_vector@@Base+0x338>
   32f90:	mov	r0, r1
   32f94:	ldrb	ip, [r0], #1
   32f98:	sub	r3, ip, #48	; 0x30
   32f9c:	cmp	r3, #9
   32fa0:	bhi	33264 <flatcc_json_parser_union_type_vector@@Base+0x5c8>
   32fa4:	umull	r2, r3, r6, lr
   32fa8:	mla	r3, lr, r7, r3
   32fac:	subs	r2, r2, #48	; 0x30
   32fb0:	sbc	r3, r3, #0
   32fb4:	adds	r2, r2, ip
   32fb8:	adc	r3, r3, #0
   32fbc:	cmp	r3, r7
   32fc0:	cmpeq	r2, r6
   32fc4:	bcc	33300 <flatcc_json_parser_union_type_vector@@Base+0x664>
   32fc8:	mov	r1, r0
   32fcc:	mov	r6, r2
   32fd0:	mov	r7, r3
   32fd4:	cmp	r1, r9
   32fd8:	mov	r8, r1
   32fdc:	bne	32f90 <flatcc_json_parser_union_type_vector@@Base+0x2f4>
   32fe0:	cmp	r4, #45	; 0x2d
   32fe4:	beq	332ac <flatcc_json_parser_union_type_vector@@Base+0x610>
   32fe8:	cmp	r7, #0
   32fec:	cmpeq	r6, #255	; 0xff
   32ff0:	bhi	33334 <flatcc_json_parser_union_type_vector@@Base+0x698>
   32ff4:	uxtb	r0, r6
   32ff8:	cmp	r8, fp
   32ffc:	strb	r0, [sp, #39]	; 0x27
   33000:	beq	33360 <flatcc_json_parser_union_type_vector@@Base+0x6c4>
   33004:	ldr	r3, [sp, #96]	; 0x60
   33008:	blx	r3
   3300c:	cmp	r0, #0
   33010:	ldrbne	r2, [sp, #39]	; 0x27
   33014:	bne	3302c <flatcc_json_parser_union_type_vector@@Base+0x390>
   33018:	ldr	r3, [sl, #8]
   3301c:	tst	r3, #1
   33020:	beq	33734 <flatcc_json_parser_union_type_vector@@Base+0xa98>
   33024:	mov	r2, #0
   33028:	strb	r5, [sp, #39]	; 0x27
   3302c:	sub	r3, r9, r8
   33030:	cmp	r3, #1
   33034:	ldr	r3, [sp, #16]
   33038:	strb	r2, [r3]
   3303c:	ble	33050 <flatcc_json_parser_union_type_vector@@Base+0x3b4>
   33040:	ldrb	r2, [r8]
   33044:	cmp	r2, #32
   33048:	bhi	331c8 <flatcc_json_parser_union_type_vector@@Base+0x52c>
   3304c:	beq	331b8 <flatcc_json_parser_union_type_vector@@Base+0x51c>
   33050:	cmp	r9, r8
   33054:	beq	32d90 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   33058:	ldrb	r2, [r8]
   3305c:	cmp	r2, #32
   33060:	bne	33080 <flatcc_json_parser_union_type_vector@@Base+0x3e4>
   33064:	add	r3, r8, #1
   33068:	cmp	r9, r3
   3306c:	mov	r8, r3
   33070:	beq	32d94 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   33074:	ldrb	r2, [r3], #1
   33078:	cmp	r2, #32
   3307c:	beq	33068 <flatcc_json_parser_union_type_vector@@Base+0x3cc>
   33080:	cmp	r2, #32
   33084:	bhi	33140 <flatcc_json_parser_union_type_vector@@Base+0x4a4>
   33088:	sub	r2, r2, #9
   3308c:	cmp	r2, #23
   33090:	ldrls	pc, [pc, r2, lsl #2]
   33094:	b	33188 <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   33098:	andeq	r3, r3, r0, lsl #3
   3309c:	andeq	r3, r3, r8, lsl r1
   330a0:	andeq	r3, r3, r8, lsl #3
   330a4:	andeq	r3, r3, r8, lsl #3
   330a8:	strdeq	r3, [r3], -r8
   330ac:	andeq	r3, r3, r8, lsl #3
   330b0:	andeq	r3, r3, r8, lsl #3
   330b4:	andeq	r3, r3, r8, lsl #3
   330b8:	andeq	r3, r3, r8, lsl #3
   330bc:	andeq	r3, r3, r8, lsl #3
   330c0:	andeq	r3, r3, r8, lsl #3
   330c4:	andeq	r3, r3, r8, lsl #3
   330c8:	andeq	r3, r3, r8, lsl #3
   330cc:	andeq	r3, r3, r8, lsl #3
   330d0:	andeq	r3, r3, r8, lsl #3
   330d4:	andeq	r3, r3, r8, lsl #3
   330d8:	andeq	r3, r3, r8, lsl #3
   330dc:	andeq	r3, r3, r8, lsl #3
   330e0:	andeq	r3, r3, r8, lsl #3
   330e4:	andeq	r3, r3, r8, lsl #3
   330e8:	andeq	r3, r3, r8, lsl #3
   330ec:	andeq	r3, r3, r8, lsl #3
   330f0:	andeq	r3, r3, r8, lsl #3
   330f4:	andeq	r3, r3, r0, asr r0
   330f8:	sub	r3, r9, r8
   330fc:	cmp	r3, #1
   33100:	movle	r3, r5
   33104:	ldrbgt	r3, [r8, #1]
   33108:	subgt	r3, r3, #10
   3310c:	clzgt	r3, r3
   33110:	lsrgt	r3, r3, #5
   33114:	add	r8, r8, r3
   33118:	ldr	r3, [sl, #12]
   3311c:	add	r8, r8, #1
   33120:	add	r3, r3, #1
   33124:	str	r8, [sl, #4]
   33128:	str	r3, [sl, #12]
   3312c:	cmp	r9, r8
   33130:	beq	32d90 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   33134:	ldrb	r2, [r8]
   33138:	cmp	r2, #32
   3313c:	bls	33088 <flatcc_json_parser_union_type_vector@@Base+0x3ec>
   33140:	cmp	r2, #44	; 0x2c
   33144:	beq	331d8 <flatcc_json_parser_union_type_vector@@Base+0x53c>
   33148:	cmp	r2, #93	; 0x5d
   3314c:	beq	333bc <flatcc_json_parser_union_type_vector@@Base+0x720>
   33150:	ldr	r3, [sl, #20]
   33154:	cmp	r3, #0
   33158:	bne	32d90 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   3315c:	ldr	r3, [sl, #4]
   33160:	str	r8, [sl, #32]
   33164:	sub	r8, r8, r3
   33168:	add	r8, r8, #1
   3316c:	mov	r3, #9
   33170:	str	r8, [sl, #16]
   33174:	str	r3, [sl, #20]
   33178:	mov	r8, r9
   3317c:	b	32d94 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   33180:	add	r8, r8, #1
   33184:	b	3312c <flatcc_json_parser_union_type_vector@@Base+0x490>
   33188:	ldr	r3, [sl, #20]
   3318c:	cmp	r3, #0
   33190:	bne	32d90 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   33194:	ldr	r3, [sl, #4]
   33198:	str	r8, [sl, #32]
   3319c:	sub	r3, r8, r3
   331a0:	add	r3, r3, #1
   331a4:	mov	r2, #5
   331a8:	str	r3, [sl, #16]
   331ac:	str	r2, [sl, #20]
   331b0:	mov	r8, r9
   331b4:	b	32d94 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   331b8:	ldrb	r2, [r8, #1]
   331bc:	cmp	r2, #32
   331c0:	addhi	r8, r8, #1
   331c4:	bls	33050 <flatcc_json_parser_union_type_vector@@Base+0x3b4>
   331c8:	cmp	r9, r8
   331cc:	beq	32d90 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   331d0:	cmp	r2, #44	; 0x2c
   331d4:	bne	33148 <flatcc_json_parser_union_type_vector@@Base+0x4ac>
   331d8:	add	fp, r8, #1
   331dc:	sub	r3, r9, fp
   331e0:	cmp	r3, #1
   331e4:	ble	331f8 <flatcc_json_parser_union_type_vector@@Base+0x55c>
   331e8:	ldrb	r2, [r8, #1]
   331ec:	cmp	r2, #32
   331f0:	bhi	33724 <flatcc_json_parser_union_type_vector@@Base+0xa88>
   331f4:	beq	33714 <flatcc_json_parser_union_type_vector@@Base+0xa78>
   331f8:	cmp	r9, fp
   331fc:	beq	3372c <flatcc_json_parser_union_type_vector@@Base+0xa90>
   33200:	ldrb	r2, [fp]
   33204:	cmp	r2, #32
   33208:	bne	33500 <flatcc_json_parser_union_type_vector@@Base+0x864>
   3320c:	add	r3, fp, #1
   33210:	b	33220 <flatcc_json_parser_union_type_vector@@Base+0x584>
   33214:	ldrb	r2, [r3], #1
   33218:	cmp	r2, #32
   3321c:	bne	33500 <flatcc_json_parser_union_type_vector@@Base+0x864>
   33220:	cmp	r3, r9
   33224:	mov	fp, r3
   33228:	bne	33214 <flatcc_json_parser_union_type_vector@@Base+0x578>
   3322c:	ldr	r3, [sl, #20]
   33230:	cmp	r3, #0
   33234:	bne	32d90 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   33238:	ldr	r3, [sl, #4]
   3323c:	mov	r2, #9
   33240:	sub	r3, fp, r3
   33244:	add	r3, r3, #1
   33248:	str	fp, [sl, #32]
   3324c:	str	r3, [sl, #16]
   33250:	str	r2, [sl, #20]
   33254:	mov	r8, r9
   33258:	b	32d94 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   3325c:	mov	r6, #0
   33260:	mov	r7, r6
   33264:	cmp	r8, fp
   33268:	beq	33360 <flatcc_json_parser_union_type_vector@@Base+0x6c4>
   3326c:	and	r3, ip, #223	; 0xdf
   33270:	cmp	ip, #46	; 0x2e
   33274:	cmpne	r3, #69	; 0x45
   33278:	bne	32fe0 <flatcc_json_parser_union_type_vector@@Base+0x344>
   3327c:	ldr	r3, [sl, #20]
   33280:	cmp	r3, #0
   33284:	beq	33394 <flatcc_json_parser_union_type_vector@@Base+0x6f8>
   33288:	cmp	r4, #45	; 0x2d
   3328c:	beq	332d4 <flatcc_json_parser_union_type_vector@@Base+0x638>
   33290:	strb	r5, [sp, #39]	; 0x27
   33294:	mov	r8, r9
   33298:	mov	r0, #0
   3329c:	b	33004 <flatcc_json_parser_union_type_vector@@Base+0x368>
   332a0:	cmp	r4, #45	; 0x2d
   332a4:	movne	r6, #0
   332a8:	bne	32ff4 <flatcc_json_parser_union_type_vector@@Base+0x358>
   332ac:	ldr	r3, [sl, #20]
   332b0:	cmp	r3, #0
   332b4:	bne	332d4 <flatcc_json_parser_union_type_vector@@Base+0x638>
   332b8:	ldr	r3, [sl, #4]
   332bc:	mov	r2, #8
   332c0:	sub	r3, r8, r3
   332c4:	add	r3, r3, #1
   332c8:	str	r2, [sl, #20]
   332cc:	str	r8, [sl, #32]
   332d0:	str	r3, [sl, #16]
   332d4:	mov	r0, r5
   332d8:	ldr	r3, [sp, #96]	; 0x60
   332dc:	blx	r3
   332e0:	cmp	r0, #0
   332e4:	moveq	r8, r9
   332e8:	beq	33018 <flatcc_json_parser_union_type_vector@@Base+0x37c>
   332ec:	ldrb	r3, [sp, #39]	; 0x27
   332f0:	ldr	r2, [sp, #16]
   332f4:	mov	r8, r9
   332f8:	strb	r3, [r2]
   332fc:	b	33050 <flatcc_json_parser_union_type_vector@@Base+0x3b4>
   33300:	ldr	r3, [sl, #20]
   33304:	cmp	r3, #0
   33308:	bne	33288 <flatcc_json_parser_union_type_vector@@Base+0x5ec>
   3330c:	ldr	r3, [sl, #4]
   33310:	mov	r2, #8
   33314:	sub	r3, r1, r3
   33318:	add	r3, r3, #1
   3331c:	cmp	r4, #45	; 0x2d
   33320:	str	r2, [sl, #20]
   33324:	str	r1, [sl, #32]
   33328:	str	r3, [sl, #16]
   3332c:	beq	332d4 <flatcc_json_parser_union_type_vector@@Base+0x638>
   33330:	b	33290 <flatcc_json_parser_union_type_vector@@Base+0x5f4>
   33334:	ldr	r3, [sl, #20]
   33338:	cmp	r3, #0
   3333c:	bne	332d4 <flatcc_json_parser_union_type_vector@@Base+0x638>
   33340:	ldr	r3, [sl, #4]
   33344:	mov	r2, #7
   33348:	sub	r3, r8, r3
   3334c:	add	r3, r3, #1
   33350:	str	r8, [sl, #32]
   33354:	str	r3, [sl, #16]
   33358:	str	r2, [sl, #20]
   3335c:	b	332d4 <flatcc_json_parser_union_type_vector@@Base+0x638>
   33360:	add	r3, sp, #39	; 0x27
   33364:	str	r3, [sp]
   33368:	mov	r2, r9
   3336c:	ldr	r3, [sp, #88]	; 0x58
   33370:	mov	r1, fp
   33374:	mov	r0, sl
   33378:	bl	2cb28 <flatcc_verify_union_vector_field@@Base+0x2ac>
   3337c:	cmp	r9, r0
   33380:	cmpne	r0, fp
   33384:	mov	r8, r0
   33388:	beq	32df0 <flatcc_json_parser_union_type_vector@@Base+0x154>
   3338c:	ldrb	r0, [sp, #39]	; 0x27
   33390:	b	33004 <flatcc_json_parser_union_type_vector@@Base+0x368>
   33394:	ldr	r3, [sl, #4]
   33398:	mov	r2, #12
   3339c:	sub	r3, r8, r3
   333a0:	add	r3, r3, #1
   333a4:	cmp	r4, #45	; 0x2d
   333a8:	str	r2, [sl, #20]
   333ac:	str	r8, [sl, #32]
   333b0:	str	r3, [sl, #16]
   333b4:	beq	332d4 <flatcc_json_parser_union_type_vector@@Base+0x638>
   333b8:	b	33290 <flatcc_json_parser_union_type_vector@@Base+0x5f4>
   333bc:	add	r3, r8, #1
   333c0:	sub	r2, r9, r3
   333c4:	cmp	r2, #1
   333c8:	ble	333dc <flatcc_json_parser_union_type_vector@@Base+0x740>
   333cc:	ldrb	r2, [r8, #1]
   333d0:	cmp	r2, #32
   333d4:	bhi	334d4 <flatcc_json_parser_union_type_vector@@Base+0x838>
   333d8:	beq	33764 <flatcc_json_parser_union_type_vector@@Base+0xac8>
   333dc:	mov	r1, #0
   333e0:	cmp	r9, r3
   333e4:	beq	32d90 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   333e8:	ldrb	r2, [r3]
   333ec:	cmp	r2, #32
   333f0:	bne	33778 <flatcc_json_parser_union_type_vector@@Base+0xadc>
   333f4:	add	r3, r3, #1
   333f8:	cmp	r3, r9
   333fc:	mov	r8, r3
   33400:	beq	32d94 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   33404:	ldrb	r2, [r3], #1
   33408:	cmp	r2, #32
   3340c:	beq	333f8 <flatcc_json_parser_union_type_vector@@Base+0x75c>
   33410:	cmp	r2, #32
   33414:	bhi	33984 <flatcc_json_parser_union_type_vector@@Base+0xce8>
   33418:	mov	r3, r8
   3341c:	sub	r2, r2, #9
   33420:	cmp	r2, #23
   33424:	ldrls	pc, [pc, r2, lsl #2]
   33428:	b	334e4 <flatcc_json_parser_union_type_vector@@Base+0x848>
   3342c:	ldrdeq	r3, [r3], -ip
   33430:	andeq	r3, r3, ip, lsr #9
   33434:	andeq	r3, r3, r4, ror #9
   33438:	andeq	r3, r3, r4, ror #9
   3343c:	andeq	r3, r3, ip, lsl #9
   33440:	andeq	r3, r3, r4, ror #9
   33444:	andeq	r3, r3, r4, ror #9
   33448:	andeq	r3, r3, r4, ror #9
   3344c:	andeq	r3, r3, r4, ror #9
   33450:	andeq	r3, r3, r4, ror #9
   33454:	andeq	r3, r3, r4, ror #9
   33458:	andeq	r3, r3, r4, ror #9
   3345c:	andeq	r3, r3, r4, ror #9
   33460:	andeq	r3, r3, r4, ror #9
   33464:	andeq	r3, r3, r4, ror #9
   33468:	andeq	r3, r3, r4, ror #9
   3346c:	andeq	r3, r3, r4, ror #9
   33470:	andeq	r3, r3, r4, ror #9
   33474:	andeq	r3, r3, r4, ror #9
   33478:	andeq	r3, r3, r4, ror #9
   3347c:	andeq	r3, r3, r4, ror #9
   33480:	andeq	r3, r3, r4, ror #9
   33484:	andeq	r3, r3, r4, ror #9
   33488:	andeq	r3, r3, r0, ror #7
   3348c:	sub	r2, r9, r3
   33490:	cmp	r2, #1
   33494:	movle	r2, r1
   33498:	ldrbgt	r2, [r3, #1]
   3349c:	subgt	r2, r2, #10
   334a0:	clzgt	r2, r2
   334a4:	lsrgt	r2, r2, #5
   334a8:	add	r3, r3, r2
   334ac:	ldr	r2, [sl, #12]
   334b0:	add	r3, r3, #1
   334b4:	add	r2, r2, #1
   334b8:	str	r3, [sl, #4]
   334bc:	str	r2, [sl, #12]
   334c0:	cmp	r9, r3
   334c4:	beq	32d90 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   334c8:	ldrb	r2, [r3]
   334cc:	cmp	r2, #32
   334d0:	bls	3341c <flatcc_json_parser_union_type_vector@@Base+0x780>
   334d4:	mov	r8, r3
   334d8:	b	32d94 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   334dc:	add	r3, r3, #1
   334e0:	b	334c0 <flatcc_json_parser_union_type_vector@@Base+0x824>
   334e4:	ldr	r2, [sl, #20]
   334e8:	cmp	r2, #0
   334ec:	bne	32d90 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   334f0:	ldr	r2, [sl, #4]
   334f4:	str	r3, [sl, #32]
   334f8:	sub	r3, r3, r2
   334fc:	b	331a0 <flatcc_json_parser_union_type_vector@@Base+0x504>
   33500:	cmp	r2, #32
   33504:	bhi	335c0 <flatcc_json_parser_union_type_vector@@Base+0x924>
   33508:	sub	r3, r2, #9
   3350c:	cmp	r3, #23
   33510:	ldrls	pc, [pc, r3, lsl #2]
   33514:	b	3369c <flatcc_json_parser_union_type_vector@@Base+0xa00>
   33518:	muleq	r3, r4, r6
   3351c:	muleq	r3, r8, r5
   33520:	muleq	r3, ip, r6
   33524:	muleq	r3, ip, r6
   33528:	andeq	r3, r3, r8, ror r5
   3352c:	muleq	r3, ip, r6
   33530:	muleq	r3, ip, r6
   33534:	muleq	r3, ip, r6
   33538:	muleq	r3, ip, r6
   3353c:	muleq	r3, ip, r6
   33540:	muleq	r3, ip, r6
   33544:	muleq	r3, ip, r6
   33548:	muleq	r3, ip, r6
   3354c:	muleq	r3, ip, r6
   33550:	muleq	r3, ip, r6
   33554:	muleq	r3, ip, r6
   33558:	muleq	r3, ip, r6
   3355c:	muleq	r3, ip, r6
   33560:	muleq	r3, ip, r6
   33564:	muleq	r3, ip, r6
   33568:	muleq	r3, ip, r6
   3356c:	muleq	r3, ip, r6
   33570:	muleq	r3, ip, r6
   33574:	strdeq	r3, [r3], -r8
   33578:	sub	r3, r9, fp
   3357c:	cmp	r3, #1
   33580:	movle	r3, r5
   33584:	ldrbgt	r3, [fp, #1]
   33588:	subgt	r3, r3, #10
   3358c:	clzgt	r3, r3
   33590:	lsrgt	r3, r3, #5
   33594:	add	fp, fp, r3
   33598:	ldr	r3, [sl, #12]
   3359c:	add	fp, fp, #1
   335a0:	add	r3, r3, #1
   335a4:	str	fp, [sl, #4]
   335a8:	str	r3, [sl, #12]
   335ac:	cmp	r9, fp
   335b0:	beq	3372c <flatcc_json_parser_union_type_vector@@Base+0xa90>
   335b4:	ldrb	r2, [fp]
   335b8:	cmp	r2, #32
   335bc:	bls	33508 <flatcc_json_parser_union_type_vector@@Base+0x86c>
   335c0:	cmp	r2, #93	; 0x5d
   335c4:	bne	32f24 <flatcc_json_parser_union_type_vector@@Base+0x288>
   335c8:	add	r8, fp, #1
   335cc:	sub	r3, r9, r8
   335d0:	cmp	r3, #1
   335d4:	ble	335e8 <flatcc_json_parser_union_type_vector@@Base+0x94c>
   335d8:	ldrb	r3, [fp, #1]
   335dc:	cmp	r3, #32
   335e0:	bhi	32d94 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   335e4:	beq	3398c <flatcc_json_parser_union_type_vector@@Base+0xcf0>
   335e8:	mov	r1, #0
   335ec:	cmp	r9, r8
   335f0:	beq	32d90 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   335f4:	ldrb	r2, [r8]
   335f8:	cmp	r2, #32
   335fc:	bne	3361c <flatcc_json_parser_union_type_vector@@Base+0x980>
   33600:	add	r3, r8, #1
   33604:	cmp	r3, r9
   33608:	mov	r8, r3
   3360c:	beq	32d94 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   33610:	ldrb	r2, [r3], #1
   33614:	cmp	r2, #32
   33618:	beq	33604 <flatcc_json_parser_union_type_vector@@Base+0x968>
   3361c:	cmp	r2, #32
   33620:	bhi	33984 <flatcc_json_parser_union_type_vector@@Base+0xce8>
   33624:	sub	r2, r2, #9
   33628:	cmp	r2, #23
   3362c:	ldrls	pc, [pc, r2, lsl #2]
   33630:	b	33188 <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   33634:	andeq	r3, r3, ip, lsl #14
   33638:	andeq	r3, r3, r8, ror #13
   3363c:	andeq	r3, r3, r8, lsl #3
   33640:	andeq	r3, r3, r8, lsl #3
   33644:	andeq	r3, r3, r8, asr #13
   33648:	andeq	r3, r3, r8, lsl #3
   3364c:	andeq	r3, r3, r8, lsl #3
   33650:	andeq	r3, r3, r8, lsl #3
   33654:	andeq	r3, r3, r8, lsl #3
   33658:	andeq	r3, r3, r8, lsl #3
   3365c:	andeq	r3, r3, r8, lsl #3
   33660:	andeq	r3, r3, r8, lsl #3
   33664:	andeq	r3, r3, r8, lsl #3
   33668:	andeq	r3, r3, r8, lsl #3
   3366c:	andeq	r3, r3, r8, lsl #3
   33670:	andeq	r3, r3, r8, lsl #3
   33674:	andeq	r3, r3, r8, lsl #3
   33678:	andeq	r3, r3, r8, lsl #3
   3367c:	andeq	r3, r3, r8, lsl #3
   33680:	andeq	r3, r3, r8, lsl #3
   33684:	andeq	r3, r3, r8, lsl #3
   33688:	andeq	r3, r3, r8, lsl #3
   3368c:	andeq	r3, r3, r8, lsl #3
   33690:	andeq	r3, r3, ip, ror #11
   33694:	add	fp, fp, #1
   33698:	b	335ac <flatcc_json_parser_union_type_vector@@Base+0x910>
   3369c:	ldr	r3, [sl, #20]
   336a0:	cmp	r3, #0
   336a4:	bne	32d90 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   336a8:	ldr	r3, [sl, #4]
   336ac:	mov	r2, #5
   336b0:	sub	r3, fp, r3
   336b4:	add	r3, r3, #1
   336b8:	str	fp, [sl, #32]
   336bc:	str	r3, [sl, #16]
   336c0:	str	r2, [sl, #20]
   336c4:	b	32d90 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   336c8:	sub	r3, r9, r8
   336cc:	cmp	r3, #1
   336d0:	movle	r3, r1
   336d4:	ldrbgt	r3, [r8, #1]
   336d8:	subgt	r3, r3, #10
   336dc:	clzgt	r3, r3
   336e0:	lsrgt	r3, r3, #5
   336e4:	add	r8, r8, r3
   336e8:	ldr	r3, [sl, #12]
   336ec:	add	r8, r8, #1
   336f0:	add	r3, r3, #1
   336f4:	str	r8, [sl, #4]
   336f8:	str	r3, [sl, #12]
   336fc:	cmp	r9, r8
   33700:	beq	32d90 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   33704:	ldrb	r2, [r8]
   33708:	b	3361c <flatcc_json_parser_union_type_vector@@Base+0x980>
   3370c:	add	r8, r8, #1
   33710:	b	336fc <flatcc_json_parser_union_type_vector@@Base+0xa60>
   33714:	ldrb	r2, [r8, #2]
   33718:	cmp	r2, #32
   3371c:	addhi	fp, r8, #2
   33720:	bls	331f8 <flatcc_json_parser_union_type_vector@@Base+0x55c>
   33724:	cmp	r9, fp
   33728:	bne	335c0 <flatcc_json_parser_union_type_vector@@Base+0x924>
   3372c:	mov	fp, r9
   33730:	b	3322c <flatcc_json_parser_union_type_vector@@Base+0x590>
   33734:	ldr	r3, [sl, #20]
   33738:	cmp	r3, #0
   3373c:	bne	32cf8 <flatcc_json_parser_union_type_vector@@Base+0x5c>
   33740:	ldr	r3, [sl, #4]
   33744:	mov	r2, #15
   33748:	sub	r3, r8, r3
   3374c:	add	r3, r3, #1
   33750:	str	r8, [sl, #32]
   33754:	str	r3, [sl, #16]
   33758:	mov	r8, r9
   3375c:	str	r2, [sl, #20]
   33760:	b	32cfc <flatcc_json_parser_union_type_vector@@Base+0x60>
   33764:	ldrb	r2, [r8, #2]
   33768:	cmp	r2, #32
   3376c:	addhi	r8, r8, #2
   33770:	bls	333dc <flatcc_json_parser_union_type_vector@@Base+0x740>
   33774:	b	32d94 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   33778:	mov	r8, r3
   3377c:	b	33410 <flatcc_json_parser_union_type_vector@@Base+0x774>
   33780:	mov	fp, r3
   33784:	cmp	r2, #32
   33788:	bhi	3384c <flatcc_json_parser_union_type_vector@@Base+0xbb0>
   3378c:	mov	r3, fp
   33790:	sub	r2, r2, #9
   33794:	cmp	r2, #23
   33798:	ldrls	pc, [pc, r2, lsl #2]
   3379c:	b	33928 <flatcc_json_parser_union_type_vector@@Base+0xc8c>
   337a0:	andeq	r3, r3, r0, lsr #18
   337a4:	andeq	r3, r3, r0, lsr #16
   337a8:	andeq	r3, r3, r8, lsr #18
   337ac:	andeq	r3, r3, r8, lsr #18
   337b0:	andeq	r3, r3, r0, lsl #16
   337b4:	andeq	r3, r3, r8, lsr #18
   337b8:	andeq	r3, r3, r8, lsr #18
   337bc:	andeq	r3, r3, r8, lsr #18
   337c0:	andeq	r3, r3, r8, lsr #18
   337c4:	andeq	r3, r3, r8, lsr #18
   337c8:	andeq	r3, r3, r8, lsr #18
   337cc:	andeq	r3, r3, r8, lsr #18
   337d0:	andeq	r3, r3, r8, lsr #18
   337d4:	andeq	r3, r3, r8, lsr #18
   337d8:	andeq	r3, r3, r8, lsr #18
   337dc:	andeq	r3, r3, r8, lsr #18
   337e0:	andeq	r3, r3, r8, lsr #18
   337e4:	andeq	r3, r3, r8, lsr #18
   337e8:	andeq	r3, r3, r8, lsr #18
   337ec:	andeq	r3, r3, r8, lsr #18
   337f0:	andeq	r3, r3, r8, lsr #18
   337f4:	andeq	r3, r3, r8, lsr #18
   337f8:	andeq	r3, r3, r8, lsr #18
   337fc:	andeq	r2, r3, ip, ror #29
   33800:	sub	r2, r9, r3
   33804:	cmp	r2, #1
   33808:	movle	r2, r1
   3380c:	ldrbgt	r2, [r3, #1]
   33810:	subgt	r2, r2, #10
   33814:	clzgt	r2, r2
   33818:	lsrgt	r2, r2, #5
   3381c:	add	r3, r3, r2
   33820:	ldr	r2, [sl, #12]
   33824:	add	r3, r3, #1
   33828:	add	r2, r2, #1
   3382c:	str	r3, [sl, #4]
   33830:	str	r2, [sl, #12]
   33834:	cmp	r9, r3
   33838:	beq	33934 <flatcc_json_parser_union_type_vector@@Base+0xc98>
   3383c:	ldrb	r2, [r3]
   33840:	cmp	r2, #32
   33844:	bls	33790 <flatcc_json_parser_union_type_vector@@Base+0xaf4>
   33848:	mov	fp, r3
   3384c:	cmp	r2, #93	; 0x5d
   33850:	bne	32f20 <flatcc_json_parser_union_type_vector@@Base+0x284>
   33854:	add	r8, fp, #1
   33858:	sub	r3, r9, r8
   3385c:	cmp	r3, #1
   33860:	ble	33874 <flatcc_json_parser_union_type_vector@@Base+0xbd8>
   33864:	ldrb	r3, [fp, #1]
   33868:	cmp	r3, #32
   3386c:	bhi	32d94 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   33870:	beq	339a0 <flatcc_json_parser_union_type_vector@@Base+0xd04>
   33874:	mov	r1, #0
   33878:	cmp	r9, r8
   3387c:	beq	32d90 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   33880:	ldrb	r3, [r8]
   33884:	cmp	r3, #32
   33888:	bne	338a8 <flatcc_json_parser_union_type_vector@@Base+0xc0c>
   3388c:	add	r2, r8, #1
   33890:	cmp	r2, r9
   33894:	mov	r8, r2
   33898:	beq	32d94 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   3389c:	ldrb	r3, [r2], #1
   338a0:	cmp	r3, #32
   338a4:	beq	33890 <flatcc_json_parser_union_type_vector@@Base+0xbf4>
   338a8:	cmp	r3, #32
   338ac:	bhi	32d94 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   338b0:	sub	r3, r3, #9
   338b4:	cmp	r3, #23
   338b8:	ldrls	pc, [pc, r3, lsl #2]
   338bc:	b	33188 <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   338c0:	andeq	r3, r3, r0, lsl sl
   338c4:	andeq	r3, r3, r4, ror #19
   338c8:	andeq	r3, r3, r8, lsl #3
   338cc:	andeq	r3, r3, r8, lsl #3
   338d0:	andeq	r3, r3, r4, asr #19
   338d4:	andeq	r3, r3, r8, lsl #3
   338d8:	andeq	r3, r3, r8, lsl #3
   338dc:	andeq	r3, r3, r8, lsl #3
   338e0:	andeq	r3, r3, r8, lsl #3
   338e4:	andeq	r3, r3, r8, lsl #3
   338e8:	andeq	r3, r3, r8, lsl #3
   338ec:	andeq	r3, r3, r8, lsl #3
   338f0:	andeq	r3, r3, r8, lsl #3
   338f4:	andeq	r3, r3, r8, lsl #3
   338f8:	andeq	r3, r3, r8, lsl #3
   338fc:	andeq	r3, r3, r8, lsl #3
   33900:	andeq	r3, r3, r8, lsl #3
   33904:	andeq	r3, r3, r8, lsl #3
   33908:	andeq	r3, r3, r8, lsl #3
   3390c:	andeq	r3, r3, r8, lsl #3
   33910:	andeq	r3, r3, r8, lsl #3
   33914:	andeq	r3, r3, r8, lsl #3
   33918:	andeq	r3, r3, r8, lsl #3
   3391c:	andeq	r3, r3, r8, ror r8
   33920:	add	r3, r3, #1
   33924:	b	33834 <flatcc_json_parser_union_type_vector@@Base+0xb98>
   33928:	ldr	r2, [sl, #20]
   3392c:	cmp	r2, #0
   33930:	beq	3394c <flatcc_json_parser_union_type_vector@@Base+0xcb0>
   33934:	mov	fp, r9
   33938:	b	32f20 <flatcc_json_parser_union_type_vector@@Base+0x284>
   3393c:	mov	fp, r3
   33940:	cmp	r9, fp
   33944:	bne	3384c <flatcc_json_parser_union_type_vector@@Base+0xbb0>
   33948:	b	32f20 <flatcc_json_parser_union_type_vector@@Base+0x284>
   3394c:	ldr	r2, [sl, #4]
   33950:	str	r3, [sl, #32]
   33954:	sub	r3, r3, r2
   33958:	add	r3, r3, #1
   3395c:	mov	r2, #5
   33960:	str	r3, [sl, #16]
   33964:	str	r2, [sl, #20]
   33968:	mov	fp, r9
   3396c:	b	32f20 <flatcc_json_parser_union_type_vector@@Base+0x284>
   33970:	ldrb	r2, [fp, #2]
   33974:	cmp	r2, #32
   33978:	addhi	fp, fp, #2
   3397c:	bls	32ee8 <flatcc_json_parser_union_type_vector@@Base+0x24c>
   33980:	b	33940 <flatcc_json_parser_union_type_vector@@Base+0xca4>
   33984:	mov	r3, r8
   33988:	b	334d4 <flatcc_json_parser_union_type_vector@@Base+0x838>
   3398c:	ldrb	r3, [fp, #2]
   33990:	cmp	r3, #32
   33994:	bls	335e8 <flatcc_json_parser_union_type_vector@@Base+0x94c>
   33998:	add	r8, fp, #2
   3399c:	b	32d94 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   339a0:	ldrb	r3, [fp, #2]
   339a4:	cmp	r3, #32
   339a8:	bls	33874 <flatcc_json_parser_union_type_vector@@Base+0xbd8>
   339ac:	b	33998 <flatcc_json_parser_union_type_vector@@Base+0xcfc>
   339b0:	ldr	r3, [pc, #96]	; 33a18 <flatcc_json_parser_union_type_vector@@Base+0xd7c>
   339b4:	ldr	r2, [pc, #96]	; 33a1c <flatcc_json_parser_union_type_vector@@Base+0xd80>
   339b8:	ldr	r1, [pc, #96]	; 33a20 <flatcc_json_parser_union_type_vector@@Base+0xd84>
   339bc:	ldr	r0, [pc, #96]	; 33a24 <flatcc_json_parser_union_type_vector@@Base+0xd88>
   339c0:	bl	14618 <__assert_fail@plt>
   339c4:	sub	r3, r9, r8
   339c8:	cmp	r3, #1
   339cc:	movle	r3, r1
   339d0:	ldrbgt	r3, [r8, #1]
   339d4:	subgt	r3, r3, #10
   339d8:	clzgt	r3, r3
   339dc:	lsrgt	r3, r3, #5
   339e0:	add	r8, r8, r3
   339e4:	ldr	r3, [sl, #12]
   339e8:	add	r8, r8, #1
   339ec:	add	r3, r3, #1
   339f0:	str	r8, [sl, #4]
   339f4:	str	r3, [sl, #12]
   339f8:	cmp	r9, r8
   339fc:	beq	32d90 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   33a00:	ldrb	r3, [r8]
   33a04:	cmp	r3, #32
   33a08:	bls	338b0 <flatcc_json_parser_union_type_vector@@Base+0xc14>
   33a0c:	b	32d94 <flatcc_json_parser_union_type_vector@@Base+0xf8>
   33a10:	add	r8, r8, #1
   33a14:	b	339f8 <flatcc_json_parser_union_type_vector@@Base+0xd5c>
   33a18:	andeq	r6, r4, r8, lsr #32
   33a1c:	andeq	r0, r0, r2, ror #8
   33a20:	andeq	r6, r4, r0, lsr #3
   33a24:	andeq	r6, r4, ip, ror #3

00033a28 <flatcc_json_parser_table_as_root@@Base>:
   33a28:	push	{r4, r5, r6, r7, r8, r9, lr}
   33a2c:	sub	sp, sp, #52	; 0x34
   33a30:	mov	r5, r2
   33a34:	ldr	r8, [sp, #80]	; 0x50
   33a38:	mov	r9, r0
   33a3c:	ands	r7, r8, #4
   33a40:	movne	r7, #2
   33a44:	subs	r4, r1, #0
   33a48:	addeq	r4, sp, #8
   33a4c:	mov	r2, #40	; 0x28
   33a50:	mov	r1, #0
   33a54:	mov	r0, r4
   33a58:	add	r6, r5, r3
   33a5c:	bl	145c4 <memset@plt>
   33a60:	mov	r2, #1
   33a64:	str	r2, [r4, #12]
   33a68:	str	r6, [r4, #28]
   33a6c:	str	r9, [r4]
   33a70:	stmib	r4, {r5, r8}
   33a74:	str	r5, [r4, #24]
   33a78:	str	r5, [r4, #32]
   33a7c:	mov	r3, r7
   33a80:	mov	r2, #0
   33a84:	ldr	r1, [sp, #84]	; 0x54
   33a88:	mov	r0, r9
   33a8c:	bl	263c8 <flatcc_builder_start_buffer@@Base>
   33a90:	cmp	r0, #0
   33a94:	bne	33aec <flatcc_json_parser_table_as_root@@Base+0xc4>
   33a98:	mov	r2, r6
   33a9c:	add	r3, sp, #4
   33aa0:	mov	r1, r5
   33aa4:	mov	r0, r4
   33aa8:	ldr	ip, [sp, #88]	; 0x58
   33aac:	blx	ip
   33ab0:	ldr	r6, [r4, #20]
   33ab4:	cmp	r6, #0
   33ab8:	beq	33ac8 <flatcc_json_parser_table_as_root@@Base+0xa0>
   33abc:	mov	r0, r6
   33ac0:	add	sp, sp, #52	; 0x34
   33ac4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   33ac8:	mov	r0, r9
   33acc:	ldr	r1, [sp, #4]
   33ad0:	bl	26554 <flatcc_builder_end_buffer@@Base>
   33ad4:	cmp	r0, #0
   33ad8:	beq	33aec <flatcc_json_parser_table_as_root@@Base+0xc4>
   33adc:	mov	r0, r6
   33ae0:	str	r5, [r4, #36]	; 0x24
   33ae4:	add	sp, sp, #52	; 0x34
   33ae8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   33aec:	mvn	r6, #0
   33af0:	mov	r0, r6
   33af4:	add	sp, sp, #52	; 0x34
   33af8:	pop	{r4, r5, r6, r7, r8, r9, pc}

00033afc <flatcc_json_parser_struct_as_root@@Base>:
   33afc:	push	{r4, r5, r6, r7, r8, r9, lr}
   33b00:	sub	sp, sp, #52	; 0x34
   33b04:	mov	r5, r2
   33b08:	ldr	r8, [sp, #80]	; 0x50
   33b0c:	mov	r9, r0
   33b10:	ands	r7, r8, #4
   33b14:	movne	r7, #2
   33b18:	subs	r4, r1, #0
   33b1c:	addeq	r4, sp, #8
   33b20:	mov	r2, #40	; 0x28
   33b24:	mov	r1, #0
   33b28:	mov	r0, r4
   33b2c:	add	r6, r5, r3
   33b30:	bl	145c4 <memset@plt>
   33b34:	mov	r2, #1
   33b38:	str	r2, [r4, #12]
   33b3c:	str	r6, [r4, #28]
   33b40:	str	r9, [r4]
   33b44:	stmib	r4, {r5, r8}
   33b48:	str	r5, [r4, #24]
   33b4c:	str	r5, [r4, #32]
   33b50:	mov	r3, r7
   33b54:	mov	r2, #0
   33b58:	ldr	r1, [sp, #84]	; 0x54
   33b5c:	mov	r0, r9
   33b60:	bl	263c8 <flatcc_builder_start_buffer@@Base>
   33b64:	cmp	r0, #0
   33b68:	bne	33bc0 <flatcc_json_parser_struct_as_root@@Base+0xc4>
   33b6c:	mov	r2, r6
   33b70:	add	r3, sp, #4
   33b74:	mov	r1, r5
   33b78:	mov	r0, r4
   33b7c:	ldr	ip, [sp, #88]	; 0x58
   33b80:	blx	ip
   33b84:	ldr	r6, [r4, #20]
   33b88:	cmp	r6, #0
   33b8c:	beq	33b9c <flatcc_json_parser_struct_as_root@@Base+0xa0>
   33b90:	mov	r0, r6
   33b94:	add	sp, sp, #52	; 0x34
   33b98:	pop	{r4, r5, r6, r7, r8, r9, pc}
   33b9c:	mov	r0, r9
   33ba0:	ldr	r1, [sp, #4]
   33ba4:	bl	26554 <flatcc_builder_end_buffer@@Base>
   33ba8:	cmp	r0, #0
   33bac:	beq	33bc0 <flatcc_json_parser_struct_as_root@@Base+0xc4>
   33bb0:	mov	r0, r6
   33bb4:	str	r5, [r4, #36]	; 0x24
   33bb8:	add	sp, sp, #52	; 0x34
   33bbc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   33bc0:	mvn	r6, #0
   33bc4:	mov	r0, r6
   33bc8:	add	sp, sp, #52	; 0x34
   33bcc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   33bd0:	cmp	r0, #1000	; 0x3e8
   33bd4:	push	{r4, r5, lr}
   33bd8:	mov	r3, r0
   33bdc:	bcc	33c4c <flatcc_json_parser_struct_as_root@@Base+0x150>
   33be0:	ldr	r2, [pc, #324]	; 33d2c <flatcc_json_parser_struct_as_root@@Base+0x230>
   33be4:	cmp	r0, r2
   33be8:	bhi	33cac <flatcc_json_parser_struct_as_root@@Base+0x1b0>
   33bec:	ldr	lr, [pc, #316]	; 33d30 <flatcc_json_parser_struct_as_root@@Base+0x234>
   33bf0:	mov	ip, #100	; 0x64
   33bf4:	ldr	r2, [pc, #312]	; 33d34 <flatcc_json_parser_struct_as_root@@Base+0x238>
   33bf8:	umull	r0, lr, lr, r3
   33bfc:	mov	r0, #0
   33c00:	lsr	lr, lr, #5
   33c04:	strb	r0, [r1, #4]
   33c08:	mul	ip, ip, lr
   33c0c:	add	r4, r1, #2
   33c10:	sub	r3, r3, ip
   33c14:	mov	r0, #4
   33c18:	uxth	ip, r3
   33c1c:	uxth	r3, lr
   33c20:	ldrb	lr, [r2, ip, lsl #1]
   33c24:	add	ip, r2, ip, lsl #1
   33c28:	strb	lr, [r1, #2]
   33c2c:	ldrb	ip, [ip, #1]
   33c30:	strb	ip, [r1, #3]
   33c34:	ldrb	r1, [r2, r3, lsl #1]
   33c38:	add	r3, r2, r3, lsl #1
   33c3c:	strb	r1, [r4, #-2]
   33c40:	ldrb	r3, [r3, #1]
   33c44:	strb	r3, [r4, #-1]
   33c48:	pop	{r4, r5, pc}
   33c4c:	cmp	r0, #99	; 0x63
   33c50:	bls	33cf8 <flatcc_json_parser_struct_as_root@@Base+0x1fc>
   33c54:	mov	r2, #0
   33c58:	strb	r2, [r1, #3]
   33c5c:	ldr	r2, [pc, #208]	; 33d34 <flatcc_json_parser_struct_as_root@@Base+0x238>
   33c60:	add	lr, r1, #3
   33c64:	mov	r0, #3
   33c68:	ldr	r4, [pc, #192]	; 33d30 <flatcc_json_parser_struct_as_root@@Base+0x234>
   33c6c:	mov	ip, #100	; 0x64
   33c70:	sub	r1, lr, #2
   33c74:	umull	r5, r4, r4, r3
   33c78:	lsr	r4, r4, #5
   33c7c:	mul	ip, ip, r4
   33c80:	sub	ip, r3, ip
   33c84:	uxth	r3, r4
   33c88:	uxth	ip, ip
   33c8c:	ldrb	r4, [r2, ip, lsl #1]
   33c90:	add	r2, r2, ip, lsl #1
   33c94:	strb	r4, [lr, #-2]
   33c98:	ldrb	r2, [r2, #1]
   33c9c:	strb	r2, [lr, #-1]
   33ca0:	add	r3, r3, #48	; 0x30
   33ca4:	strb	r3, [r1, #-1]
   33ca8:	pop	{r4, r5, pc}
   33cac:	ldr	r4, [pc, #124]	; 33d30 <flatcc_json_parser_struct_as_root@@Base+0x234>
   33cb0:	mov	ip, #100	; 0x64
   33cb4:	ldr	r2, [pc, #120]	; 33d34 <flatcc_json_parser_struct_as_root@@Base+0x238>
   33cb8:	umull	r0, r4, r4, r3
   33cbc:	mov	r0, #0
   33cc0:	lsr	r4, r4, #5
   33cc4:	strb	r0, [r1, #5]
   33cc8:	mul	ip, ip, r4
   33ccc:	add	lr, r1, #3
   33cd0:	sub	r3, r3, ip
   33cd4:	mov	r0, #5
   33cd8:	uxth	ip, r3
   33cdc:	uxth	r3, r4
   33ce0:	ldrb	r4, [r2, ip, lsl #1]
   33ce4:	add	ip, r2, ip, lsl #1
   33ce8:	strb	r4, [r1, #3]
   33cec:	ldrb	ip, [ip, #1]
   33cf0:	strb	ip, [r1, #4]
   33cf4:	b	33c68 <flatcc_json_parser_struct_as_root@@Base+0x16c>
   33cf8:	cmp	r0, #9
   33cfc:	bls	33d18 <flatcc_json_parser_struct_as_root@@Base+0x21c>
   33d00:	mov	r2, #0
   33d04:	strb	r2, [r1, #2]
   33d08:	add	r4, r1, #2
   33d0c:	mov	r0, #2
   33d10:	ldr	r2, [pc, #28]	; 33d34 <flatcc_json_parser_struct_as_root@@Base+0x238>
   33d14:	b	33c34 <flatcc_json_parser_struct_as_root@@Base+0x138>
   33d18:	mov	r2, #0
   33d1c:	strb	r2, [r1, #1]
   33d20:	mov	r0, #1
   33d24:	add	r1, r1, #1
   33d28:	b	33ca0 <flatcc_json_parser_struct_as_root@@Base+0x1a4>
   33d2c:	andeq	r2, r0, pc, lsl #14
   33d30:	mvnpl	r8, pc, lsl r5
   33d34:	andeq	r6, r4, r0, lsl #9
   33d38:	ldr	r2, [pc, #768]	; 34040 <flatcc_json_parser_struct_as_root@@Base+0x544>
   33d3c:	push	{r4, r5, lr}
   33d40:	cmp	r0, r2
   33d44:	mov	r3, r0
   33d48:	bls	33e5c <flatcc_json_parser_struct_as_root@@Base+0x360>
   33d4c:	ldr	r2, [pc, #752]	; 34044 <flatcc_json_parser_struct_as_root@@Base+0x548>
   33d50:	cmp	r0, r2
   33d54:	bls	33ea4 <flatcc_json_parser_struct_as_root@@Base+0x3a8>
   33d58:	ldr	r2, [pc, #744]	; 34048 <flatcc_json_parser_struct_as_root@@Base+0x54c>
   33d5c:	cmp	r0, r2
   33d60:	bls	33f98 <flatcc_json_parser_struct_as_root@@Base+0x49c>
   33d64:	ldr	lr, [pc, #736]	; 3404c <flatcc_json_parser_struct_as_root@@Base+0x550>
   33d68:	mov	r0, #100	; 0x64
   33d6c:	ldr	r2, [pc, #732]	; 34050 <flatcc_json_parser_struct_as_root@@Base+0x554>
   33d70:	umull	ip, lr, lr, r3
   33d74:	mov	ip, #0
   33d78:	lsr	lr, lr, #5
   33d7c:	strb	ip, [r1, #10]
   33d80:	mul	r0, r0, lr
   33d84:	add	r4, r1, #8
   33d88:	sub	r3, r3, r0
   33d8c:	mov	r0, #10
   33d90:	ldrb	r5, [r2, r3, lsl #1]
   33d94:	add	ip, r2, r3, lsl #1
   33d98:	mov	r3, lr
   33d9c:	strb	r5, [r1, #8]
   33da0:	ldrb	ip, [ip, #1]
   33da4:	strb	ip, [r1, #9]
   33da8:	ldr	lr, [pc, #668]	; 3404c <flatcc_json_parser_struct_as_root@@Base+0x550>
   33dac:	mov	ip, #100	; 0x64
   33db0:	sub	r1, r4, #2
   33db4:	umull	r5, lr, lr, r3
   33db8:	lsr	lr, lr, #5
   33dbc:	mul	ip, ip, lr
   33dc0:	sub	ip, r3, ip
   33dc4:	mov	r3, lr
   33dc8:	ldrb	lr, [r2, ip, lsl #1]
   33dcc:	add	ip, r2, ip, lsl #1
   33dd0:	strb	lr, [r4, #-2]
   33dd4:	ldrb	ip, [ip, #1]
   33dd8:	strb	ip, [r4, #-1]
   33ddc:	ldr	lr, [pc, #616]	; 3404c <flatcc_json_parser_struct_as_root@@Base+0x550>
   33de0:	mov	ip, #100	; 0x64
   33de4:	sub	r4, r1, #2
   33de8:	umull	r5, lr, lr, r3
   33dec:	lsr	lr, lr, #5
   33df0:	mul	ip, ip, lr
   33df4:	sub	ip, r3, ip
   33df8:	mov	r3, lr
   33dfc:	ldrb	lr, [r2, ip, lsl #1]
   33e00:	add	ip, r2, ip, lsl #1
   33e04:	strb	lr, [r1, #-2]
   33e08:	ldrb	ip, [ip, #1]
   33e0c:	strb	ip, [r1, #-1]
   33e10:	ldr	lr, [pc, #564]	; 3404c <flatcc_json_parser_struct_as_root@@Base+0x550>
   33e14:	mov	ip, #100	; 0x64
   33e18:	sub	r1, r4, #2
   33e1c:	umull	r5, lr, lr, r3
   33e20:	lsr	lr, lr, #5
   33e24:	mul	ip, ip, lr
   33e28:	sub	ip, r3, ip
   33e2c:	mov	r3, lr
   33e30:	ldrb	lr, [r2, ip, lsl #1]
   33e34:	add	ip, r2, ip, lsl #1
   33e38:	strb	lr, [r4, #-2]
   33e3c:	ldrb	ip, [ip, #1]
   33e40:	strb	ip, [r4, #-1]
   33e44:	ldrb	ip, [r2, r3, lsl #1]
   33e48:	add	r3, r2, r3, lsl #1
   33e4c:	strb	ip, [r1, #-2]
   33e50:	ldrb	r3, [r3, #1]
   33e54:	strb	r3, [r1, #-1]
   33e58:	pop	{r4, r5, pc}
   33e5c:	cmp	r0, #99	; 0x63
   33e60:	bls	33e84 <flatcc_json_parser_struct_as_root@@Base+0x388>
   33e64:	cmp	r0, #1000	; 0x3e8
   33e68:	bcc	33f6c <flatcc_json_parser_struct_as_root@@Base+0x470>
   33e6c:	mov	r2, #0
   33e70:	strb	r2, [r1, #4]
   33e74:	add	r4, r1, #4
   33e78:	mov	r0, #4
   33e7c:	ldr	r2, [pc, #460]	; 34050 <flatcc_json_parser_struct_as_root@@Base+0x554>
   33e80:	b	33e10 <flatcc_json_parser_struct_as_root@@Base+0x314>
   33e84:	cmp	r0, #9
   33e88:	bls	33f84 <flatcc_json_parser_struct_as_root@@Base+0x488>
   33e8c:	mov	r2, #0
   33e90:	strb	r2, [r1, #2]
   33e94:	mov	r0, #2
   33e98:	add	r1, r1, #2
   33e9c:	ldr	r2, [pc, #428]	; 34050 <flatcc_json_parser_struct_as_root@@Base+0x554>
   33ea0:	b	33e44 <flatcc_json_parser_struct_as_root@@Base+0x348>
   33ea4:	ldr	r2, [pc, #424]	; 34054 <flatcc_json_parser_struct_as_root@@Base+0x558>
   33ea8:	cmp	r0, r2
   33eac:	bls	33fec <flatcc_json_parser_struct_as_root@@Base+0x4f0>
   33eb0:	mov	r2, #0
   33eb4:	strb	r2, [r1, #7]
   33eb8:	ldr	r2, [pc, #400]	; 34050 <flatcc_json_parser_struct_as_root@@Base+0x554>
   33ebc:	add	r4, r1, #7
   33ec0:	mov	r0, #7
   33ec4:	ldr	lr, [pc, #384]	; 3404c <flatcc_json_parser_struct_as_root@@Base+0x550>
   33ec8:	mov	ip, #100	; 0x64
   33ecc:	sub	r1, r4, #2
   33ed0:	umull	r5, lr, lr, r3
   33ed4:	lsr	lr, lr, #5
   33ed8:	mul	ip, ip, lr
   33edc:	sub	ip, r3, ip
   33ee0:	mov	r3, lr
   33ee4:	ldrb	lr, [r2, ip, lsl #1]
   33ee8:	add	ip, r2, ip, lsl #1
   33eec:	strb	lr, [r4, #-2]
   33ef0:	ldrb	ip, [ip, #1]
   33ef4:	strb	ip, [r4, #-1]
   33ef8:	ldr	lr, [pc, #332]	; 3404c <flatcc_json_parser_struct_as_root@@Base+0x550>
   33efc:	mov	ip, #100	; 0x64
   33f00:	sub	r4, r1, #2
   33f04:	umull	r5, lr, lr, r3
   33f08:	lsr	lr, lr, #5
   33f0c:	mul	ip, ip, lr
   33f10:	sub	ip, r3, ip
   33f14:	mov	r3, lr
   33f18:	ldrb	lr, [r2, ip, lsl #1]
   33f1c:	add	ip, r2, ip, lsl #1
   33f20:	strb	lr, [r1, #-2]
   33f24:	ldrb	ip, [ip, #1]
   33f28:	strb	ip, [r1, #-1]
   33f2c:	ldr	lr, [pc, #280]	; 3404c <flatcc_json_parser_struct_as_root@@Base+0x550>
   33f30:	mov	ip, #100	; 0x64
   33f34:	sub	r1, r4, #2
   33f38:	umull	r5, lr, lr, r3
   33f3c:	lsr	lr, lr, #5
   33f40:	mul	ip, ip, lr
   33f44:	sub	ip, r3, ip
   33f48:	mov	r3, lr
   33f4c:	ldrb	lr, [r2, ip, lsl #1]
   33f50:	add	r2, r2, ip, lsl #1
   33f54:	strb	lr, [r4, #-2]
   33f58:	ldrb	r2, [r2, #1]
   33f5c:	strb	r2, [r4, #-1]
   33f60:	add	r3, r3, #48	; 0x30
   33f64:	strb	r3, [r1, #-1]
   33f68:	pop	{r4, r5, pc}
   33f6c:	mov	r2, #0
   33f70:	strb	r2, [r1, #3]
   33f74:	add	r4, r1, #3
   33f78:	mov	r0, #3
   33f7c:	ldr	r2, [pc, #204]	; 34050 <flatcc_json_parser_struct_as_root@@Base+0x554>
   33f80:	b	33f2c <flatcc_json_parser_struct_as_root@@Base+0x430>
   33f84:	mov	r2, #0
   33f88:	strb	r2, [r1, #1]
   33f8c:	mov	r0, #1
   33f90:	add	r1, r1, #1
   33f94:	b	33f60 <flatcc_json_parser_struct_as_root@@Base+0x464>
   33f98:	ldr	r2, [pc, #184]	; 34058 <flatcc_json_parser_struct_as_root@@Base+0x55c>
   33f9c:	cmp	r0, r2
   33fa0:	bls	34028 <flatcc_json_parser_struct_as_root@@Base+0x52c>
   33fa4:	ldr	lr, [pc, #160]	; 3404c <flatcc_json_parser_struct_as_root@@Base+0x550>
   33fa8:	mov	r0, #100	; 0x64
   33fac:	ldr	r2, [pc, #156]	; 34050 <flatcc_json_parser_struct_as_root@@Base+0x554>
   33fb0:	umull	ip, lr, lr, r3
   33fb4:	mov	ip, #0
   33fb8:	lsr	lr, lr, #5
   33fbc:	strb	ip, [r1, #9]
   33fc0:	mul	r0, r0, lr
   33fc4:	add	r4, r1, #7
   33fc8:	sub	r3, r3, r0
   33fcc:	mov	r0, #9
   33fd0:	ldrb	r5, [r2, r3, lsl #1]
   33fd4:	add	ip, r2, r3, lsl #1
   33fd8:	mov	r3, lr
   33fdc:	strb	r5, [r1, #7]
   33fe0:	ldrb	ip, [ip, #1]
   33fe4:	strb	ip, [r1, #8]
   33fe8:	b	33ec4 <flatcc_json_parser_struct_as_root@@Base+0x3c8>
   33fec:	ldr	r2, [pc, #104]	; 3405c <flatcc_json_parser_struct_as_root@@Base+0x560>
   33ff0:	cmp	r0, r2
   33ff4:	bls	34010 <flatcc_json_parser_struct_as_root@@Base+0x514>
   33ff8:	mov	r2, #0
   33ffc:	strb	r2, [r1, #6]
   34000:	mov	r0, #6
   34004:	add	r1, r1, #6
   34008:	ldr	r2, [pc, #64]	; 34050 <flatcc_json_parser_struct_as_root@@Base+0x554>
   3400c:	b	33ddc <flatcc_json_parser_struct_as_root@@Base+0x2e0>
   34010:	mov	r2, #0
   34014:	strb	r2, [r1, #5]
   34018:	mov	r0, #5
   3401c:	add	r1, r1, #5
   34020:	ldr	r2, [pc, #40]	; 34050 <flatcc_json_parser_struct_as_root@@Base+0x554>
   34024:	b	33ef8 <flatcc_json_parser_struct_as_root@@Base+0x3fc>
   34028:	mov	r2, #0
   3402c:	strb	r2, [r1, #8]
   34030:	add	r4, r1, #8
   34034:	mov	r0, #8
   34038:	ldr	r2, [pc, #16]	; 34050 <flatcc_json_parser_struct_as_root@@Base+0x554>
   3403c:	b	33da8 <flatcc_json_parser_struct_as_root@@Base+0x2ac>
   34040:	andeq	r2, r0, pc, lsl #14
   34044:	addseq	r9, r8, pc, ror r6
   34048:	blcc	fe6e684c <__bss_end__@@Base+0xfe68f490>
   3404c:	mvnpl	r8, pc, lsl r5
   34050:	andeq	r6, r4, r0, lsl #9
   34054:	andeq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
   34058:	ldrbeq	lr, [r5, #255]!	; 0xff
   3405c:	muleq	r1, pc, r6	; <UNPREDICTABLE>
   34060:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34064:	mov	r6, r0
   34068:	add	r9, pc, #944	; 0x3b0
   3406c:	ldrd	r8, [r9]
   34070:	mov	r5, r2
   34074:	cmp	r1, r9
   34078:	cmpeq	r0, r8
   3407c:	bls	34414 <flatcc_json_parser_struct_as_root@@Base+0x918>
   34080:	add	r3, pc, #928	; 0x3a0
   34084:	ldrd	r2, [r3]
   34088:	mov	r7, r1
   3408c:	cmp	r1, r3
   34090:	cmpeq	r0, r2
   34094:	bls	342a8 <flatcc_json_parser_struct_as_root@@Base+0x7ac>
   34098:	add	r3, pc, #912	; 0x390
   3409c:	ldrd	r2, [r3]
   340a0:	cmp	r1, r3
   340a4:	cmpeq	r0, r2
   340a8:	bls	34464 <flatcc_json_parser_struct_as_root@@Base+0x968>
   340ac:	add	r3, pc, #900	; 0x384
   340b0:	ldrd	r2, [r3]
   340b4:	cmp	r1, r3
   340b8:	cmpeq	r0, r2
   340bc:	bls	34624 <flatcc_json_parser_struct_as_root@@Base+0xb28>
   340c0:	add	r3, pc, #888	; 0x378
   340c4:	ldrd	r2, [r3]
   340c8:	cmp	r1, r3
   340cc:	cmpeq	r0, r2
   340d0:	bls	3451c <flatcc_json_parser_struct_as_root@@Base+0xa20>
   340d4:	mov	r3, #0
   340d8:	strb	r3, [r5, #20]
   340dc:	mov	r2, #100	; 0x64
   340e0:	mov	r3, #0
   340e4:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   340e8:	mov	r0, r6
   340ec:	mov	r1, r7
   340f0:	mov	r3, #0
   340f4:	ldr	r4, [pc, #860]	; 34458 <flatcc_json_parser_struct_as_root@@Base+0x95c>
   340f8:	mov	r9, #20
   340fc:	mov	r8, r2
   34100:	mov	r2, #100	; 0x64
   34104:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   34108:	ldrb	r2, [r4, r8, lsl #1]
   3410c:	add	r3, r4, r8, lsl #1
   34110:	add	r8, r5, #18
   34114:	strb	r2, [r5, #18]
   34118:	ldrb	r3, [r3, #1]
   3411c:	strb	r3, [r5, #19]
   34120:	mov	r6, r0
   34124:	mov	r7, r1
   34128:	mov	r0, r6
   3412c:	mov	r1, r7
   34130:	mov	r2, #100	; 0x64
   34134:	mov	r3, #0
   34138:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   3413c:	mov	r0, r6
   34140:	mov	r1, r7
   34144:	mov	r3, #0
   34148:	mov	r5, r2
   3414c:	mov	r2, #100	; 0x64
   34150:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   34154:	ldrb	r2, [r4, r5, lsl #1]
   34158:	add	r3, r4, r5, lsl #1
   3415c:	sub	r5, r8, #2
   34160:	strb	r2, [r8, #-2]
   34164:	ldrb	r3, [r3, #1]
   34168:	strb	r3, [r8, #-1]
   3416c:	mov	r6, r0
   34170:	mov	r7, r1
   34174:	mov	r0, r6
   34178:	mov	r1, r7
   3417c:	mov	r2, #100	; 0x64
   34180:	mov	r3, #0
   34184:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   34188:	mov	r0, r6
   3418c:	mov	r1, r7
   34190:	mov	r3, #0
   34194:	sub	fp, r5, #2
   34198:	mov	r8, r2
   3419c:	mov	r2, #100	; 0x64
   341a0:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   341a4:	ldrb	r3, [r4, r8, lsl #1]
   341a8:	add	r8, r4, r8, lsl #1
   341ac:	strb	r3, [r5, #-2]
   341b0:	ldrb	r3, [r8, #1]
   341b4:	strb	r3, [r5, #-1]
   341b8:	mov	r6, r0
   341bc:	mov	r7, r1
   341c0:	mov	r0, r6
   341c4:	mov	r1, r7
   341c8:	mov	r2, #100	; 0x64
   341cc:	mov	r3, #0
   341d0:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   341d4:	mov	r0, r6
   341d8:	mov	r1, r7
   341dc:	mov	r3, #0
   341e0:	sub	sl, fp, #2
   341e4:	mov	r8, r2
   341e8:	mov	r2, #100	; 0x64
   341ec:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   341f0:	ldrb	r3, [r4, r8, lsl #1]
   341f4:	add	r8, r4, r8, lsl #1
   341f8:	strb	r3, [fp, #-2]
   341fc:	ldrb	r3, [r8, #1]
   34200:	strb	r3, [fp, #-1]
   34204:	mov	r6, r0
   34208:	mov	r7, r1
   3420c:	mov	r0, r6
   34210:	mov	r1, r7
   34214:	mov	r2, #100	; 0x64
   34218:	mov	r3, #0
   3421c:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   34220:	mov	r0, r6
   34224:	mov	r1, r7
   34228:	mov	r3, #0
   3422c:	sub	r5, sl, #2
   34230:	mov	r8, r2
   34234:	mov	r2, #100	; 0x64
   34238:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   3423c:	ldrb	r3, [r4, r8, lsl #1]
   34240:	add	r8, r4, r8, lsl #1
   34244:	strb	r3, [sl, #-2]
   34248:	ldrb	r3, [r8, #1]
   3424c:	strb	r3, [sl, #-1]
   34250:	mov	r6, r0
   34254:	mov	r7, r1
   34258:	mov	r0, r6
   3425c:	mov	r1, r7
   34260:	mov	r2, #100	; 0x64
   34264:	mov	r3, #0
   34268:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   3426c:	mov	r0, r6
   34270:	mov	r1, r7
   34274:	mov	r3, #0
   34278:	mov	r8, r2
   3427c:	mov	r2, #100	; 0x64
   34280:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   34284:	ldrb	r2, [r4, r8, lsl #1]
   34288:	add	r3, r4, r8, lsl #1
   3428c:	sub	r8, r5, #2
   34290:	strb	r2, [r5, #-2]
   34294:	ldrb	r3, [r3, #1]
   34298:	strb	r3, [r5, #-1]
   3429c:	mov	r6, r0
   342a0:	mov	r7, r1
   342a4:	b	34354 <flatcc_json_parser_struct_as_root@@Base+0x858>
   342a8:	add	r3, pc, #408	; 0x198
   342ac:	ldrd	r2, [r3]
   342b0:	cmp	r1, r3
   342b4:	cmpeq	r0, r2
   342b8:	bhi	344a4 <flatcc_json_parser_struct_as_root@@Base+0x9a8>
   342bc:	add	r3, pc, #396	; 0x18c
   342c0:	ldrd	r2, [r3]
   342c4:	cmp	r1, r3
   342c8:	cmpeq	r0, r2
   342cc:	bls	34650 <flatcc_json_parser_struct_as_root@@Base+0xb54>
   342d0:	mov	r3, #0
   342d4:	ldr	r4, [pc, #380]	; 34458 <flatcc_json_parser_struct_as_root@@Base+0x95c>
   342d8:	strb	r3, [r5, #11]
   342dc:	mov	r9, #11
   342e0:	add	r5, r5, #11
   342e4:	mov	r0, r6
   342e8:	mov	r1, r7
   342ec:	mov	r2, #100	; 0x64
   342f0:	mov	r3, #0
   342f4:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   342f8:	mov	r0, r6
   342fc:	sub	r8, r5, #3
   34300:	ldrb	r3, [r4, r2, lsl #1]
   34304:	add	r2, r4, r2, lsl #1
   34308:	strb	r3, [r5, #-2]
   3430c:	ldrb	r1, [r2, #1]
   34310:	mov	r3, #0
   34314:	mov	r2, #100	; 0x64
   34318:	strb	r1, [r5, #-1]
   3431c:	mov	r1, r7
   34320:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   34324:	mov	r2, #10
   34328:	mov	r3, #0
   3432c:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   34330:	mov	r0, r6
   34334:	mov	r1, r7
   34338:	mov	r3, #0
   3433c:	add	r2, r2, #48	; 0x30
   34340:	strb	r2, [r5, #-3]
   34344:	mov	r2, #1000	; 0x3e8
   34348:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   3434c:	mov	r6, r0
   34350:	mov	r7, r1
   34354:	mov	r0, r6
   34358:	mov	r1, r7
   3435c:	mov	r2, #100	; 0x64
   34360:	mov	r3, #0
   34364:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   34368:	mov	r0, r6
   3436c:	ldrb	r3, [r4, r2, lsl #1]
   34370:	add	r2, r4, r2, lsl #1
   34374:	strb	r3, [r8, #-2]
   34378:	ldrb	r1, [r2, #1]
   3437c:	mov	r3, #0
   34380:	mov	r2, #100	; 0x64
   34384:	strb	r1, [r8, #-1]
   34388:	mov	r1, r7
   3438c:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   34390:	mov	r2, #100	; 0x64
   34394:	mov	r3, #0
   34398:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   3439c:	mov	r0, r6
   343a0:	ldrb	r3, [r4, r2, lsl #1]
   343a4:	add	r2, r4, r2, lsl #1
   343a8:	strb	r3, [r8, #-4]
   343ac:	ldrb	r1, [r2, #1]
   343b0:	mov	r3, #0
   343b4:	ldr	r2, [pc, #160]	; 3445c <flatcc_json_parser_struct_as_root@@Base+0x960>
   343b8:	strb	r1, [r8, #-3]
   343bc:	mov	r1, r7
   343c0:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   343c4:	mov	r2, #100	; 0x64
   343c8:	mov	r3, #0
   343cc:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   343d0:	mov	r0, r6
   343d4:	mov	r1, r7
   343d8:	mov	r3, #0
   343dc:	ldrb	lr, [r4, r2, lsl #1]
   343e0:	add	ip, r4, r2, lsl #1
   343e4:	ldr	r2, [pc, #116]	; 34460 <flatcc_json_parser_struct_as_root@@Base+0x964>
   343e8:	strb	lr, [r8, #-6]
   343ec:	ldrb	ip, [ip, #1]
   343f0:	strb	ip, [r8, #-5]
   343f4:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   343f8:	ldrb	r3, [r4, r0, lsl #1]
   343fc:	add	r0, r4, r0, lsl #1
   34400:	strb	r3, [r8, #-8]
   34404:	ldrb	r3, [r0, #1]
   34408:	mov	r0, r9
   3440c:	strb	r3, [r8, #-7]
   34410:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34414:	mov	r1, r2
   34418:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3441c:	b	33d38 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   34420:	blcc	fe6e6c24 <__bss_end__@@Base+0xfe68f868>
   34424:	andeq	r0, r0, r0
   34428:	mrcmi	15, 3, r9, cr2, cr15, {7}
   3442c:	andeq	r0, r0, r8, lsl r9
   34430:	svcvs	0x00c0ffff
   34434:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   34438:			; <UNDEFINED> instruction: 0xa763ffff
   3443c:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   34440:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   34444:	bhi	ff1fd05c <__bss_end__@@Base+0xff1a5ca0>
   34448:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   3444c:	andeq	r0, r0, r7, lsl r0
   34450:	strpl	lr, [fp], #-1023	; 0xfffffc01
   34454:	andeq	r0, r0, r2
   34458:	andeq	r6, r4, r0, lsl #9
   3445c:	andeq	r2, r0, r0, lsl r7
   34460:	andeq	r4, pc, r0, asr #4
   34464:	add	r3, pc, #580	; 0x244
   34468:	ldrd	r2, [r3]
   3446c:	cmp	r1, r3
   34470:	cmpeq	r0, r2
   34474:	bhi	3460c <flatcc_json_parser_struct_as_root@@Base+0xb10>
   34478:	add	r3, pc, #568	; 0x238
   3447c:	ldrd	r2, [r3]
   34480:	cmp	r1, r3
   34484:	cmpeq	r0, r2
   34488:	bls	34698 <flatcc_json_parser_struct_as_root@@Base+0xb9c>
   3448c:	mov	r3, #0
   34490:	strb	r3, [r5, #15]
   34494:	mov	r9, #15
   34498:	add	r5, r5, #15
   3449c:	ldr	r4, [pc, #556]	; 346d0 <flatcc_json_parser_struct_as_root@@Base+0xbd4>
   344a0:	b	345bc <flatcc_json_parser_struct_as_root@@Base+0xac0>
   344a4:	add	r3, pc, #532	; 0x214
   344a8:	ldrd	r2, [r3]
   344ac:	cmp	r1, r3
   344b0:	cmpeq	r0, r2
   344b4:	bls	34668 <flatcc_json_parser_struct_as_root@@Base+0xb6c>
   344b8:	ldr	r4, [pc, #528]	; 346d0 <flatcc_json_parser_struct_as_root@@Base+0xbd4>
   344bc:	add	sl, r5, #13
   344c0:	mov	r9, #13
   344c4:	mov	r3, #0
   344c8:	strb	r3, [r5, #13]
   344cc:	mov	r0, r6
   344d0:	mov	r1, r7
   344d4:	mov	r2, #100	; 0x64
   344d8:	mov	r3, #0
   344dc:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   344e0:	mov	r0, r6
   344e4:	mov	r1, r7
   344e8:	mov	r3, #0
   344ec:	sub	r5, sl, #2
   344f0:	mov	r8, r2
   344f4:	mov	r2, #100	; 0x64
   344f8:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   344fc:	ldrb	r3, [r4, r8, lsl #1]
   34500:	add	r8, r4, r8, lsl #1
   34504:	strb	r3, [sl, #-2]
   34508:	ldrb	r3, [r8, #1]
   3450c:	strb	r3, [sl, #-1]
   34510:	mov	r6, r0
   34514:	mov	r7, r1
   34518:	b	342e4 <flatcc_json_parser_struct_as_root@@Base+0x7e8>
   3451c:	mov	r3, #0
   34520:	strb	r3, [r5, #19]
   34524:	mov	r2, #100	; 0x64
   34528:	mov	r3, #0
   3452c:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   34530:	mov	r0, r6
   34534:	mov	r1, r7
   34538:	mov	r3, #0
   3453c:	ldr	r4, [pc, #396]	; 346d0 <flatcc_json_parser_struct_as_root@@Base+0xbd4>
   34540:	mov	r9, #19
   34544:	mov	r8, r2
   34548:	mov	r2, #100	; 0x64
   3454c:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   34550:	ldrb	r2, [r4, r8, lsl #1]
   34554:	add	r3, r4, r8, lsl #1
   34558:	add	r8, r5, #17
   3455c:	strb	r2, [r5, #17]
   34560:	ldrb	r3, [r3, #1]
   34564:	strb	r3, [r5, #18]
   34568:	mov	r6, r0
   3456c:	mov	r7, r1
   34570:	mov	r0, r6
   34574:	mov	r1, r7
   34578:	mov	r2, #100	; 0x64
   3457c:	mov	r3, #0
   34580:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   34584:	mov	r0, r6
   34588:	mov	r1, r7
   3458c:	mov	r3, #0
   34590:	mov	r5, r2
   34594:	mov	r2, #100	; 0x64
   34598:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   3459c:	ldrb	r2, [r4, r5, lsl #1]
   345a0:	add	r3, r4, r5, lsl #1
   345a4:	sub	r5, r8, #2
   345a8:	strb	r2, [r8, #-2]
   345ac:	ldrb	r3, [r3, #1]
   345b0:	strb	r3, [r8, #-1]
   345b4:	mov	r6, r0
   345b8:	mov	r7, r1
   345bc:	mov	r0, r6
   345c0:	mov	r1, r7
   345c4:	mov	r2, #100	; 0x64
   345c8:	mov	r3, #0
   345cc:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   345d0:	mov	r0, r6
   345d4:	mov	r1, r7
   345d8:	mov	r3, #0
   345dc:	sub	sl, r5, #2
   345e0:	mov	r8, r2
   345e4:	mov	r2, #100	; 0x64
   345e8:	bl	41470 <flatcc_json_printer_clear@@Base+0x84c>
   345ec:	ldrb	r3, [r4, r8, lsl #1]
   345f0:	add	r8, r4, r8, lsl #1
   345f4:	strb	r3, [r5, #-2]
   345f8:	ldrb	r3, [r8, #1]
   345fc:	strb	r3, [r5, #-1]
   34600:	mov	r6, r0
   34604:	mov	r7, r1
   34608:	b	344cc <flatcc_json_parser_struct_as_root@@Base+0x9d0>
   3460c:	mov	r3, #0
   34610:	strb	r3, [r5, #16]
   34614:	mov	r9, #16
   34618:	add	r5, r5, #16
   3461c:	ldr	r4, [pc, #172]	; 346d0 <flatcc_json_parser_struct_as_root@@Base+0xbd4>
   34620:	b	34174 <flatcc_json_parser_struct_as_root@@Base+0x678>
   34624:	add	r3, pc, #156	; 0x9c
   34628:	ldrd	r2, [r3]
   3462c:	cmp	r1, r3
   34630:	cmpeq	r0, r2
   34634:	bls	34680 <flatcc_json_parser_struct_as_root@@Base+0xb84>
   34638:	mov	r3, #0
   3463c:	strb	r3, [r5, #18]
   34640:	add	r8, r5, #18
   34644:	mov	r9, #18
   34648:	ldr	r4, [pc, #128]	; 346d0 <flatcc_json_parser_struct_as_root@@Base+0xbd4>
   3464c:	b	34128 <flatcc_json_parser_struct_as_root@@Base+0x62c>
   34650:	mov	r3, #0
   34654:	strb	r3, [r5, #10]
   34658:	mov	r9, #10
   3465c:	add	r5, r5, #10
   34660:	ldr	r4, [pc, #104]	; 346d0 <flatcc_json_parser_struct_as_root@@Base+0xbd4>
   34664:	b	34258 <flatcc_json_parser_struct_as_root@@Base+0x75c>
   34668:	mov	r3, #0
   3466c:	strb	r3, [r5, #12]
   34670:	add	sl, r5, #12
   34674:	mov	r9, #12
   34678:	ldr	r4, [pc, #80]	; 346d0 <flatcc_json_parser_struct_as_root@@Base+0xbd4>
   3467c:	b	3420c <flatcc_json_parser_struct_as_root@@Base+0x710>
   34680:	mov	r3, #0
   34684:	strb	r3, [r5, #17]
   34688:	add	r8, r5, #17
   3468c:	mov	r9, #17
   34690:	ldr	r4, [pc, #56]	; 346d0 <flatcc_json_parser_struct_as_root@@Base+0xbd4>
   34694:	b	34570 <flatcc_json_parser_struct_as_root@@Base+0xa74>
   34698:	mov	r3, #0
   3469c:	strb	r3, [r5, #14]
   346a0:	add	fp, r5, #14
   346a4:	mov	r9, #14
   346a8:	ldr	r4, [pc, #32]	; 346d0 <flatcc_json_parser_struct_as_root@@Base+0xbd4>
   346ac:	b	341c0 <flatcc_json_parser_struct_as_root@@Base+0x6c4>
   346b0:	strbge	r7, [r6], #4095	; 0xfff
   346b4:	andeq	r8, r3, lr, ror sp
   346b8:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   346bc:	strdeq	r5, [r0], -r3
   346c0:	strtle	r0, [r5], #4095	; 0xfff
   346c4:	andeq	r0, r0, r8, ror #1
   346c8:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   346cc:	smceq	13400	; 0x3458
   346d0:	andeq	r6, r4, r0, lsl #9
   346d4:	ldr	r3, [r0, #20]
   346d8:	ldr	r2, [r0, #16]
   346dc:	cmp	r3, r2
   346e0:	bcc	34710 <flatcc_json_parser_struct_as_root@@Base+0xc14>
   346e4:	ldr	r2, [r0, #36]	; 0x24
   346e8:	mov	r1, r3
   346ec:	cmp	r2, #0
   346f0:	moveq	r2, #3
   346f4:	ldr	r3, [r0]
   346f8:	streq	r2, [r0, #36]	; 0x24
   346fc:	ldr	r2, [r0, #12]
   34700:	sub	r1, r1, r3
   34704:	add	r2, r2, r1
   34708:	str	r3, [r0, #20]
   3470c:	str	r2, [r0, #12]
   34710:	mov	r2, #0
   34714:	strb	r2, [r3]
   34718:	bx	lr
   3471c:	push	{r4, r5, r6, r7, r8, lr}
   34720:	mov	r4, r0
   34724:	ldrb	r2, [r0, #25]
   34728:	ldr	r6, [r0, #32]
   3472c:	ldr	r3, [r0, #20]
   34730:	ldr	r5, [r0, #16]
   34734:	mul	r6, r6, r2
   34738:	add	r2, r3, r6
   3473c:	cmp	r5, r2
   34740:	bcc	34764 <flatcc_json_parser_struct_as_root@@Base+0xc68>
   34744:	mov	r0, r3
   34748:	mov	r2, r6
   3474c:	mov	r1, #32
   34750:	bl	145c4 <memset@plt>
   34754:	ldr	r3, [r4, #20]
   34758:	add	r6, r3, r6
   3475c:	str	r6, [r4, #20]
   34760:	pop	{r4, r5, r6, r7, r8, pc}
   34764:	cmp	r3, r5
   34768:	bcs	347c8 <flatcc_json_parser_struct_as_root@@Base+0xccc>
   3476c:	sub	r5, r5, r3
   34770:	cmp	r6, r5
   34774:	bls	34744 <flatcc_json_parser_struct_as_root@@Base+0xc48>
   34778:	mov	r8, #32
   3477c:	mov	r7, #0
   34780:	mov	r2, r5
   34784:	mov	r0, r3
   34788:	mov	r1, r8
   3478c:	bl	145c4 <memset@plt>
   34790:	ldr	r3, [r4, #20]
   34794:	ldr	r2, [r4, #44]	; 0x2c
   34798:	add	r3, r3, r5
   3479c:	str	r3, [r4, #20]
   347a0:	mov	r1, r7
   347a4:	mov	r0, r4
   347a8:	blx	r2
   347ac:	ldr	r3, [r4, #20]
   347b0:	ldr	r2, [r4, #16]
   347b4:	sub	r6, r6, r5
   347b8:	sub	r5, r2, r3
   347bc:	cmp	r6, r5
   347c0:	bhi	34780 <flatcc_json_parser_struct_as_root@@Base+0xc84>
   347c4:	b	34744 <flatcc_json_parser_struct_as_root@@Base+0xc48>
   347c8:	ldr	r3, [r0, #44]	; 0x2c
   347cc:	mov	r1, #0
   347d0:	blx	r3
   347d4:	ldr	r5, [r4, #16]
   347d8:	ldr	r3, [r4, #20]
   347dc:	b	3476c <flatcc_json_parser_struct_as_root@@Base+0xc70>
   347e0:	cmp	r1, #0
   347e4:	push	{r4, r5, r6, lr}
   347e8:	mov	r4, r0
   347ec:	ldr	ip, [r0, #20]
   347f0:	bne	34800 <flatcc_json_parser_struct_as_root@@Base+0xd04>
   347f4:	ldr	r5, [r0, #16]
   347f8:	cmp	ip, r5
   347fc:	bcs	34838 <flatcc_json_parser_struct_as_root@@Base+0xd3c>
   34800:	ldr	r0, [r4]
   34804:	ldr	r3, [r4, #40]	; 0x28
   34808:	sub	r5, ip, r0
   3480c:	mov	r1, r5
   34810:	mov	r2, #1
   34814:	bl	14570 <fwrite@plt>
   34818:	ldr	ip, [r4, #12]
   3481c:	ldr	r3, [r4]
   34820:	add	ip, ip, r5
   34824:	str	ip, [r4, #12]
   34828:	str	r3, [r4, #20]
   3482c:	mov	r2, #0
   34830:	strb	r2, [r3]
   34834:	pop	{r4, r5, r6, pc}
   34838:	ldr	r3, [r0, #40]	; 0x28
   3483c:	ldr	r1, [r0, #8]
   34840:	mov	r2, #1
   34844:	ldr	r0, [r0]
   34848:	sub	r5, ip, r5
   3484c:	bl	14570 <fwrite@plt>
   34850:	ldr	r0, [r4]
   34854:	ldr	r1, [r4, #8]
   34858:	mov	r2, r5
   3485c:	add	r1, r0, r1
   34860:	bl	1454c <memcpy@plt>
   34864:	ldr	r2, [r4, #12]
   34868:	ldr	r3, [r4]
   3486c:	ldr	r1, [r4, #8]
   34870:	add	r3, r3, r5
   34874:	add	r2, r2, r1
   34878:	str	r3, [r4, #20]
   3487c:	str	r2, [r4, #12]
   34880:	b	3482c <flatcc_json_parser_struct_as_root@@Base+0xd30>
   34884:	ldr	r3, [r0, #20]
   34888:	mov	r2, #0
   3488c:	push	{r4, r5, r6, lr}
   34890:	ldr	r5, [r0]
   34894:	strb	r2, [r3]
   34898:	ldr	r1, [r0, #20]
   3489c:	ldr	r2, [r0, #16]
   348a0:	cmp	r1, r2
   348a4:	popcc	{r4, r5, r6, pc}
   348a8:	mov	r4, r0
   348ac:	ldm	r0, {r0, r1}
   348b0:	sub	r5, r3, r5
   348b4:	lsl	r1, r1, #1
   348b8:	bl	14564 <realloc@plt>
   348bc:	cmp	r0, #0
   348c0:	beq	348f4 <flatcc_json_parser_struct_as_root@@Base+0xdf8>
   348c4:	ldr	r3, [r4, #4]
   348c8:	add	r2, r0, r5
   348cc:	str	r2, [r4, #20]
   348d0:	lsl	r3, r3, #1
   348d4:	sub	r1, r3, #64	; 0x40
   348d8:	add	ip, r0, r1
   348dc:	stm	r4, {r0, r3}
   348e0:	str	ip, [r4, #16]
   348e4:	str	r1, [r4, #8]
   348e8:	mov	r3, #0
   348ec:	strb	r3, [r2]
   348f0:	pop	{r4, r5, r6, pc}
   348f4:	ldr	r3, [r4, #36]	; 0x24
   348f8:	ldr	r2, [r4]
   348fc:	cmp	r3, #0
   34900:	moveq	r3, #3
   34904:	streq	r3, [r4, #36]	; 0x24
   34908:	ldr	r3, [r4, #12]
   3490c:	str	r2, [r4, #20]
   34910:	add	r3, r3, r5
   34914:	str	r3, [r4, #12]
   34918:	b	348e8 <flatcc_json_parser_struct_as_root@@Base+0xdec>
   3491c:	cmp	r0, #99	; 0x63
   34920:	mov	r3, r0
   34924:	bls	34978 <flatcc_json_parser_struct_as_root@@Base+0xe7c>
   34928:	ldr	r2, [pc, #148]	; 349c4 <flatcc_json_parser_struct_as_root@@Base+0xec8>
   3492c:	push	{lr}		; (str lr, [sp, #-4]!)
   34930:	mov	r0, #100	; 0x64
   34934:	umull	lr, r2, r2, r3
   34938:	ldr	ip, [pc, #136]	; 349c8 <flatcc_json_parser_struct_as_root@@Base+0xecc>
   3493c:	mov	lr, #0
   34940:	lsr	r2, r2, #5
   34944:	strb	lr, [r1, #3]
   34948:	mul	r0, r0, r2
   3494c:	add	r2, r2, #48	; 0x30
   34950:	sub	r3, r3, r0
   34954:	mov	r0, #3
   34958:	uxtb	r3, r3
   3495c:	ldrb	lr, [ip, r3, lsl #1]
   34960:	add	r3, ip, r3, lsl #1
   34964:	strb	lr, [r1, #1]
   34968:	ldrb	r3, [r3, #1]
   3496c:	strb	r2, [r1]
   34970:	strb	r3, [r1, #2]
   34974:	pop	{pc}		; (ldr pc, [sp], #4)
   34978:	cmp	r0, #9
   3497c:	bls	349ac <flatcc_json_parser_struct_as_root@@Base+0xeb0>
   34980:	ldr	r2, [pc, #64]	; 349c8 <flatcc_json_parser_struct_as_root@@Base+0xecc>
   34984:	sxth	r3, r0
   34988:	mov	r0, #0
   3498c:	strb	r0, [r1, #2]
   34990:	ldrb	ip, [r2, r3, lsl #1]
   34994:	add	r3, r2, r3, lsl #1
   34998:	mov	r0, #2
   3499c:	strb	ip, [r1]
   349a0:	ldrb	r3, [r3, #1]
   349a4:	strb	r3, [r1, #1]
   349a8:	bx	lr
   349ac:	add	r3, r3, #48	; 0x30
   349b0:	mov	r2, #0
   349b4:	mov	r0, #1
   349b8:	strb	r3, [r1]
   349bc:	strb	r2, [r1, #1]
   349c0:	bx	lr
   349c4:	mvnpl	r8, pc, lsl r5
   349c8:	andeq	r6, r4, r0, lsl #9
   349cc:	push	{r4, lr}
   349d0:	mov	r2, #239	; 0xef
   349d4:	ldr	r3, [pc, #8]	; 349e4 <flatcc_json_parser_struct_as_root@@Base+0xee8>
   349d8:	ldr	r1, [pc, #8]	; 349e8 <flatcc_json_parser_struct_as_root@@Base+0xeec>
   349dc:	ldr	r0, [pc, #8]	; 349ec <flatcc_json_parser_struct_as_root@@Base+0xef0>
   349e0:	bl	14618 <__assert_fail@plt>
   349e4:	andeq	r6, r4, r4, ror #10
   349e8:	andeq	r6, r4, r0, asr r0
   349ec:	ldrdeq	r6, [r4], -r0
   349f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   349f4:	mov	sl, r1
   349f8:	sub	sp, sp, #12
   349fc:	ldr	r1, [r0, #20]
   34a00:	str	r2, [sp, #4]
   34a04:	mov	r5, r0
   34a08:	add	r2, r1, #1
   34a0c:	mov	fp, #0
   34a10:	str	r2, [r0, #20]
   34a14:	mov	r2, #34	; 0x22
   34a18:	strb	r2, [r1]
   34a1c:	ldrb	r4, [sl]
   34a20:	mov	r7, sl
   34a24:	cmp	r4, #34	; 0x22
   34a28:	cmpne	r4, #31
   34a2c:	bls	34cb4 <flatcc_json_parser_struct_as_root@@Base+0x11b8>
   34a30:	cmp	r4, #92	; 0x5c
   34a34:	bne	34a44 <flatcc_json_parser_struct_as_root@@Base+0xf48>
   34a38:	b	34cb4 <flatcc_json_parser_struct_as_root@@Base+0x11b8>
   34a3c:	cmp	r4, #92	; 0x5c
   34a40:	beq	34a54 <flatcc_json_parser_struct_as_root@@Base+0xf58>
   34a44:	ldrb	r4, [r7, #1]!
   34a48:	cmp	r4, #34	; 0x22
   34a4c:	cmpne	r4, #31
   34a50:	bhi	34a3c <flatcc_json_parser_struct_as_root@@Base+0xf40>
   34a54:	sub	r9, r7, sl
   34a58:	ldr	r0, [r5, #20]
   34a5c:	ldr	r6, [r5, #16]
   34a60:	add	r3, r0, r9
   34a64:	cmp	r6, r3
   34a68:	bls	34b88 <flatcc_json_parser_struct_as_root@@Base+0x108c>
   34a6c:	mov	r2, r9
   34a70:	mov	r1, sl
   34a74:	bl	1454c <memcpy@plt>
   34a78:	ldr	r3, [r5, #20]
   34a7c:	ldr	r2, [sp, #4]
   34a80:	add	r3, r3, r9
   34a84:	subs	r8, r2, r9
   34a88:	str	r3, [r5, #20]
   34a8c:	beq	34c08 <flatcc_json_parser_struct_as_root@@Base+0x110c>
   34a90:	add	r2, r3, #1
   34a94:	str	r2, [r5, #20]
   34a98:	cmp	r4, #12
   34a9c:	mov	r2, #92	; 0x5c
   34aa0:	strb	r2, [r3]
   34aa4:	beq	34c38 <flatcc_json_parser_struct_as_root@@Base+0x113c>
   34aa8:	bhi	34b58 <flatcc_json_parser_struct_as_root@@Base+0x105c>
   34aac:	cmp	r4, #9
   34ab0:	beq	34c80 <flatcc_json_parser_struct_as_root@@Base+0x1184>
   34ab4:	cmp	r4, #10
   34ab8:	beq	34c68 <flatcc_json_parser_struct_as_root@@Base+0x116c>
   34abc:	cmp	r4, #8
   34ac0:	beq	34c50 <flatcc_json_parser_struct_as_root@@Base+0x1154>
   34ac4:	ldr	r3, [r5, #20]
   34ac8:	lsr	r1, r4, #4
   34acc:	add	r2, r3, #1
   34ad0:	str	r2, [r5, #20]
   34ad4:	mov	r2, #117	; 0x75
   34ad8:	strb	r2, [r3]
   34adc:	ldr	r3, [r5, #20]
   34ae0:	cmp	r1, #9
   34ae4:	add	r2, r3, #1
   34ae8:	str	r2, [r5, #20]
   34aec:	mov	r2, #48	; 0x30
   34af0:	strb	r2, [r3]
   34af4:	ldr	r2, [r5, #20]
   34af8:	movhi	r3, #87	; 0x57
   34afc:	add	r0, r2, #1
   34b00:	str	r0, [r5, #20]
   34b04:	mov	r0, #48	; 0x30
   34b08:	strb	r0, [r2]
   34b0c:	ldr	r2, [r5, #20]
   34b10:	movls	r3, #48	; 0x30
   34b14:	add	r3, r3, r1
   34b18:	and	r4, r4, #15
   34b1c:	add	r1, r2, #1
   34b20:	str	r1, [r5, #20]
   34b24:	cmp	r4, #9
   34b28:	strb	r3, [r2]
   34b2c:	ldr	r2, [r5, #20]
   34b30:	movhi	r3, #87	; 0x57
   34b34:	movls	r3, #48	; 0x30
   34b38:	add	r1, r2, #1
   34b3c:	add	r3, r3, r4
   34b40:	str	r1, [r5, #20]
   34b44:	strb	r3, [r2]
   34b48:	sub	r3, r8, #1
   34b4c:	str	r3, [sp, #4]
   34b50:	add	sl, r7, #1
   34b54:	b	34a1c <flatcc_json_parser_struct_as_root@@Base+0xf20>
   34b58:	cmp	r4, #34	; 0x22
   34b5c:	beq	34c24 <flatcc_json_parser_struct_as_root@@Base+0x1128>
   34b60:	cmp	r4, #92	; 0x5c
   34b64:	beq	34c24 <flatcc_json_parser_struct_as_root@@Base+0x1128>
   34b68:	cmp	r4, #13
   34b6c:	bne	34ac4 <flatcc_json_parser_struct_as_root@@Base+0xfc8>
   34b70:	ldr	r3, [r5, #20]
   34b74:	add	r2, r3, #1
   34b78:	str	r2, [r5, #20]
   34b7c:	mov	r2, #114	; 0x72
   34b80:	strb	r2, [r3]
   34b84:	b	34b48 <flatcc_json_parser_struct_as_root@@Base+0x104c>
   34b88:	cmp	r0, r6
   34b8c:	bcs	34c98 <flatcc_json_parser_struct_as_root@@Base+0x119c>
   34b90:	sub	r6, r6, r0
   34b94:	cmp	r6, r9
   34b98:	mov	r8, r9
   34b9c:	bcs	34be4 <flatcc_json_parser_struct_as_root@@Base+0x10e8>
   34ba0:	mov	r2, r6
   34ba4:	mov	r1, sl
   34ba8:	bl	1454c <memcpy@plt>
   34bac:	ldr	r3, [r5, #20]
   34bb0:	mov	r0, r5
   34bb4:	add	r3, r3, r6
   34bb8:	str	r3, [r5, #20]
   34bbc:	ldr	r2, [r5, #44]	; 0x2c
   34bc0:	mov	r1, fp
   34bc4:	blx	r2
   34bc8:	ldr	r0, [r5, #20]
   34bcc:	ldr	r3, [r5, #16]
   34bd0:	sub	r8, r8, r6
   34bd4:	add	sl, sl, r6
   34bd8:	sub	r6, r3, r0
   34bdc:	cmp	r8, r6
   34be0:	bhi	34ba0 <flatcc_json_parser_struct_as_root@@Base+0x10a4>
   34be4:	mov	r2, r8
   34be8:	mov	r1, sl
   34bec:	bl	1454c <memcpy@plt>
   34bf0:	ldr	r2, [r5, #20]
   34bf4:	add	r3, r2, r8
   34bf8:	ldr	r2, [sp, #4]
   34bfc:	str	r3, [r5, #20]
   34c00:	subs	r8, r2, r9
   34c04:	bne	34a90 <flatcc_json_parser_struct_as_root@@Base+0xf94>
   34c08:	mov	r8, r3
   34c0c:	add	r2, r3, #1
   34c10:	mov	r3, #34	; 0x22
   34c14:	str	r2, [r5, #20]
   34c18:	strb	r3, [r8]
   34c1c:	add	sp, sp, #12
   34c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34c24:	ldr	r3, [r5, #20]
   34c28:	add	r2, r3, #1
   34c2c:	str	r2, [r5, #20]
   34c30:	strb	r4, [r3]
   34c34:	b	34b48 <flatcc_json_parser_struct_as_root@@Base+0x104c>
   34c38:	ldr	r3, [r5, #20]
   34c3c:	add	r2, r3, #1
   34c40:	str	r2, [r5, #20]
   34c44:	mov	r2, #102	; 0x66
   34c48:	strb	r2, [r3]
   34c4c:	b	34b48 <flatcc_json_parser_struct_as_root@@Base+0x104c>
   34c50:	ldr	r3, [r5, #20]
   34c54:	mov	r2, #98	; 0x62
   34c58:	add	r1, r3, #1
   34c5c:	str	r1, [r5, #20]
   34c60:	strb	r2, [r3]
   34c64:	b	34b48 <flatcc_json_parser_struct_as_root@@Base+0x104c>
   34c68:	ldr	r3, [r5, #20]
   34c6c:	mov	r2, #110	; 0x6e
   34c70:	add	r1, r3, #1
   34c74:	str	r1, [r5, #20]
   34c78:	strb	r2, [r3]
   34c7c:	b	34b48 <flatcc_json_parser_struct_as_root@@Base+0x104c>
   34c80:	ldr	r3, [r5, #20]
   34c84:	mov	r2, #116	; 0x74
   34c88:	add	r1, r3, #1
   34c8c:	str	r1, [r5, #20]
   34c90:	strb	r2, [r3]
   34c94:	b	34b48 <flatcc_json_parser_struct_as_root@@Base+0x104c>
   34c98:	mov	r0, r5
   34c9c:	ldr	r3, [r5, #44]	; 0x2c
   34ca0:	mov	r1, fp
   34ca4:	blx	r3
   34ca8:	ldr	r6, [r5, #16]
   34cac:	ldr	r0, [r5, #20]
   34cb0:	b	34b90 <flatcc_json_parser_struct_as_root@@Base+0x1094>
   34cb4:	mov	r9, fp
   34cb8:	b	34a58 <flatcc_json_parser_struct_as_root@@Base+0xf5c>
   34cbc:	push	{r4, r5, r6, r7, r8, lr}
   34cc0:	mov	r7, r1
   34cc4:	ldrb	r1, [r0, #25]
   34cc8:	mov	r4, r0
   34ccc:	mov	r6, r2
   34cd0:	cmp	r1, #0
   34cd4:	ldr	r3, [r0, #20]
   34cd8:	bne	34de8 <flatcc_json_parser_struct_as_root@@Base+0x12ec>
   34cdc:	ldr	r2, [r0, #16]
   34ce0:	cmp	r3, r2
   34ce4:	bcs	34dd8 <flatcc_json_parser_struct_as_root@@Base+0x12dc>
   34ce8:	mov	r2, #34	; 0x22
   34cec:	strb	r2, [r3]
   34cf0:	ldrb	r3, [r4, #26]
   34cf4:	ldr	r0, [r4, #20]
   34cf8:	ldr	r5, [r4, #16]
   34cfc:	cmp	r3, #0
   34d00:	addeq	r0, r0, #1
   34d04:	add	r3, r0, r6
   34d08:	cmp	r5, r3
   34d0c:	str	r0, [r4, #20]
   34d10:	bhi	34d70 <flatcc_json_parser_struct_as_root@@Base+0x1274>
   34d14:	cmp	r0, r5
   34d18:	bcs	34e04 <flatcc_json_parser_struct_as_root@@Base+0x1308>
   34d1c:	sub	r5, r5, r0
   34d20:	cmp	r6, r5
   34d24:	bls	34d70 <flatcc_json_parser_struct_as_root@@Base+0x1274>
   34d28:	mov	r8, #0
   34d2c:	mov	r2, r5
   34d30:	mov	r1, r7
   34d34:	bl	1454c <memcpy@plt>
   34d38:	ldr	r3, [r4, #20]
   34d3c:	mov	r0, r4
   34d40:	add	r3, r3, r5
   34d44:	str	r3, [r4, #20]
   34d48:	ldr	r2, [r4, #44]	; 0x2c
   34d4c:	mov	r1, r8
   34d50:	blx	r2
   34d54:	ldr	r0, [r4, #20]
   34d58:	ldr	r3, [r4, #16]
   34d5c:	sub	r6, r6, r5
   34d60:	add	r7, r7, r5
   34d64:	sub	r5, r3, r0
   34d68:	cmp	r6, r5
   34d6c:	bhi	34d2c <flatcc_json_parser_struct_as_root@@Base+0x1230>
   34d70:	mov	r2, r6
   34d74:	mov	r1, r7
   34d78:	bl	1454c <memcpy@plt>
   34d7c:	ldr	r3, [r4, #20]
   34d80:	mov	r0, #58	; 0x3a
   34d84:	add	r6, r3, r6
   34d88:	mov	r3, #34	; 0x22
   34d8c:	str	r6, [r4, #20]
   34d90:	strb	r3, [r6]
   34d94:	ldr	r1, [r4, #20]
   34d98:	ldrb	r3, [r4, #26]
   34d9c:	clz	r3, r3
   34da0:	lsr	r3, r3, #5
   34da4:	add	r2, r1, r3
   34da8:	add	r2, r2, #1
   34dac:	str	r2, [r4, #20]
   34db0:	strb	r0, [r1, r3]
   34db4:	ldr	r3, [r4, #20]
   34db8:	mov	r2, #32
   34dbc:	strb	r2, [r3]
   34dc0:	ldrb	r2, [r4, #25]
   34dc4:	ldr	r3, [r4, #20]
   34dc8:	cmp	r2, #0
   34dcc:	addne	r3, r3, #1
   34dd0:	str	r3, [r4, #20]
   34dd4:	pop	{r4, r5, r6, r7, r8, pc}
   34dd8:	ldr	r3, [r0, #44]	; 0x2c
   34ddc:	blx	r3
   34de0:	ldr	r3, [r4, #20]
   34de4:	b	34ce8 <flatcc_json_parser_struct_as_root@@Base+0x11ec>
   34de8:	add	r1, r3, #1
   34dec:	mov	r2, #10
   34df0:	str	r1, [r0, #20]
   34df4:	strb	r2, [r3]
   34df8:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   34dfc:	ldr	r3, [r4, #20]
   34e00:	b	34ce8 <flatcc_json_parser_struct_as_root@@Base+0x11ec>
   34e04:	mov	r0, r4
   34e08:	ldr	r3, [r4, #44]	; 0x2c
   34e0c:	mov	r1, #0
   34e10:	blx	r3
   34e14:	ldr	r5, [r4, #16]
   34e18:	ldr	r0, [r4, #20]
   34e1c:	b	34d1c <flatcc_json_parser_struct_as_root@@Base+0x1220>
   34e20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34e24:	sub	sp, sp, #148	; 0x94
   34e28:	subs	r1, r0, #0
   34e2c:	vstr	d0, [sp, #56]	; 0x38
   34e30:	str	r1, [sp, #96]	; 0x60
   34e34:	beq	35e08 <flatcc_json_parser_struct_as_root@@Base+0x230c>
   34e38:	vmov	r2, r3, d0
   34e3c:	vmov	r4, s0
   34e40:	adds	r6, r2, r2
   34e44:	adc	r7, r3, r3
   34e48:	mov	r5, r3
   34e4c:	ldr	r3, [pc, #1356]	; 353a0 <flatcc_json_parser_struct_as_root@@Base+0x18a4>
   34e50:	mov	r2, #0
   34e54:	cmp	r7, r3
   34e58:	cmpeq	r6, r2
   34e5c:	bhi	35898 <flatcc_json_parser_struct_as_root@@Base+0x1d9c>
   34e60:	cmp	r4, #0
   34e64:	sbcs	r3, r5, #0
   34e68:	movlt	r2, r1
   34e6c:	vldrlt	d7, [sp, #56]	; 0x38
   34e70:	movlt	r3, #45	; 0x2d
   34e74:	strblt	r3, [r2]
   34e78:	movge	r3, r1
   34e7c:	vneglt.f64	d7, d7
   34e80:	addlt	r3, r2, #1
   34e84:	addlt	r5, r5, #-2147483648	; 0x80000000
   34e88:	str	r3, [sp, #12]
   34e8c:	vstrlt	d7, [sp, #56]	; 0x38
   34e90:	orrs	r3, r4, r5
   34e94:	beq	35870 <flatcc_json_parser_struct_as_root@@Base+0x1d74>
   34e98:	ldr	r3, [pc, #1284]	; 353a4 <flatcc_json_parser_struct_as_root@@Base+0x18a8>
   34e9c:	mov	r2, #0
   34ea0:	cmp	r5, r3
   34ea4:	cmpeq	r4, r2
   34ea8:	beq	359ac <flatcc_json_parser_struct_as_root@@Base+0x1eb0>
   34eac:	ldrd	r4, [sp, #56]	; 0x38
   34eb0:	and	r0, r4, r2
   34eb4:	and	r1, r5, r3
   34eb8:	orrs	r3, r0, r1
   34ebc:	strd	r0, [sp, #24]
   34ec0:	beq	358b0 <flatcc_json_parser_struct_as_root@@Base+0x1db4>
   34ec4:	ldr	r6, [pc, #1244]	; 353a8 <flatcc_json_parser_struct_as_root@@Base+0x18ac>
   34ec8:	ldr	r9, [pc, #1264]	; 353c0 <flatcc_json_parser_struct_as_root@@Base+0x18c4>
   34ecc:	mvn	r8, #0
   34ed0:	and	r6, r6, r5, lsr #20
   34ed4:	and	r3, r9, r5
   34ed8:	sub	r6, r6, #1072	; 0x430
   34edc:	and	r2, r8, r4
   34ee0:	mov	r1, r3
   34ee4:	mov	r8, r2
   34ee8:	mov	r9, r3
   34eec:	adds	r2, r2, #0
   34ef0:	sub	r3, r6, #3
   34ef4:	str	r3, [sp, #16]
   34ef8:	adc	r3, r1, #1048576	; 0x100000
   34efc:	mov	fp, r3
   34f00:	ldr	r3, [sp, #16]
   34f04:	sub	r7, r6, #4
   34f08:	mov	sl, r2
   34f0c:	sub	lr, r3, #10
   34f10:	mov	r2, sl
   34f14:	mov	r3, fp
   34f18:	lsl	r1, r3, #10
   34f1c:	orr	r1, r1, r2, lsr #22
   34f20:	lsl	r0, r2, #10
   34f24:	mov	r3, r1
   34f28:	ldr	r1, [pc, #1148]	; 353ac <flatcc_json_parser_struct_as_root@@Base+0x18b0>
   34f2c:	mov	r2, r0
   34f30:	mov	r0, #0
   34f34:	and	r4, r0, r2
   34f38:	and	r5, r1, r3
   34f3c:	orrs	r1, r4, r5
   34f40:	mov	ip, lr
   34f44:	sub	lr, lr, #10
   34f48:	beq	34f18 <flatcc_json_parser_struct_as_root@@Base+0x141c>
   34f4c:	mov	r5, r3
   34f50:	mov	r4, r2
   34f54:	cmp	r2, #0
   34f58:	sbcs	r3, r3, #0
   34f5c:	strd	r4, [sp]
   34f60:	blt	34f8c <flatcc_json_parser_struct_as_root@@Base+0x1490>
   34f64:	sub	r1, ip, #1
   34f68:	mov	r3, r5
   34f6c:	adds	r2, r2, r2
   34f70:	adc	r3, r3, r3
   34f74:	cmp	r2, #0
   34f78:	sbcs	r0, r3, #0
   34f7c:	mov	ip, r1
   34f80:	sub	r1, r1, #1
   34f84:	bge	34f6c <flatcc_json_parser_struct_as_root@@Base+0x1470>
   34f88:	strd	r2, [sp]
   34f8c:	adds	r2, sl, sl
   34f90:	adc	r3, fp, fp
   34f94:	adds	r0, r2, #1
   34f98:	adc	r1, r3, #0
   34f9c:	sub	r6, r7, #10
   34fa0:	strd	r2, [sp, #40]	; 0x28
   34fa4:	lsl	lr, r1, #10
   34fa8:	lsl	r4, r0, #10
   34fac:	ldr	r5, [pc, #1016]	; 353ac <flatcc_json_parser_struct_as_root@@Base+0x18b0>
   34fb0:	orr	lr, lr, r0, lsr #22
   34fb4:	mov	r0, r4
   34fb8:	mov	r4, #0
   34fbc:	and	r3, r5, lr
   34fc0:	and	r2, r4, r0
   34fc4:	mov	r4, r2
   34fc8:	mov	r5, r3
   34fcc:	mov	r1, lr
   34fd0:	orrs	lr, r4, r5
   34fd4:	mov	lr, r6
   34fd8:	sub	r6, r6, #10
   34fdc:	beq	34fa4 <flatcc_json_parser_struct_as_root@@Base+0x14a8>
   34fe0:	cmp	r0, #0
   34fe4:	sbcs	r3, r1, #0
   34fe8:	strd	r0, [sp, #32]
   34fec:	blt	3501c <flatcc_json_parser_struct_as_root@@Base+0x1520>
   34ff0:	ldrd	r2, [sp]
   34ff4:	sub	r4, lr, #1
   34ff8:	adds	r0, r0, r0
   34ffc:	adc	r1, r1, r1
   35000:	cmp	r0, #0
   35004:	sbcs	lr, r1, #0
   35008:	mov	lr, r4
   3500c:	sub	r4, r4, #1
   35010:	bge	34ff8 <flatcc_json_parser_struct_as_root@@Base+0x14fc>
   35014:	strd	r2, [sp]
   35018:	strd	r0, [sp, #32]
   3501c:	vldr	d7, [sp, #56]	; 0x38
   35020:	vcmpe.f64	d7, #0.0
   35024:	vmrs	APSR_nzcv, fpscr
   35028:	ble	35e20 <flatcc_json_parser_struct_as_root@@Base+0x2324>
   3502c:	vmov.f64	d6, d7
   35030:	vldr	d7, [pc, #848]	; 35388 <flatcc_json_parser_struct_as_root@@Base+0x188c>
   35034:	vcmpe.f64	d6, d7
   35038:	vmrs	APSR_nzcv, fpscr
   3503c:	bhi	35e20 <flatcc_json_parser_struct_as_root@@Base+0x2324>
   35040:	ldr	r5, [sp, #28]
   35044:	orr	r4, r8, r9
   35048:	adds	r5, r5, #0
   3504c:	movne	r5, #1
   35050:	cmp	r4, #0
   35054:	movne	r5, #0
   35058:	cmp	r5, #0
   3505c:	bne	35c90 <flatcc_json_parser_struct_as_root@@Base+0x2194>
   35060:	ldrd	r4, [sp, #40]	; 0x28
   35064:	subs	r4, r4, #1
   35068:	sbc	r5, r5, #0
   3506c:	mov	r2, r4
   35070:	mov	r3, r5
   35074:	mvn	r6, #60	; 0x3c
   35078:	sub	r6, r6, ip
   3507c:	vldr	d5, [pc, #780]	; 35390 <flatcc_json_parser_struct_as_root@@Base+0x1894>
   35080:	vmov	s15, r6
   35084:	vldr	d6, [pc, #780]	; 35398 <flatcc_json_parser_struct_as_root@@Base+0x189c>
   35088:	sub	r6, r7, lr
   3508c:	sub	r7, r6, #32
   35090:	vcvt.f64.s32	d7, s15
   35094:	lsl	fp, r3, r6
   35098:	rsb	r5, r6, #32
   3509c:	orr	fp, fp, r2, lsl r7
   350a0:	lsl	sl, r2, r6
   350a4:	vmul.f64	d7, d7, d5
   350a8:	orr	fp, fp, r2, lsr r5
   350ac:	vcmpe.f64	d7, d6
   350b0:	vcvt.s32.f64	s11, d7
   350b4:	vmrs	APSR_nzcv, fpscr
   350b8:	vmov	r4, s11
   350bc:	bmi	350d4 <flatcc_json_parser_struct_as_root@@Base+0x15d8>
   350c0:	vcvt.f64.s32	d5, s11
   350c4:	vsub.f64	d7, d7, d5
   350c8:	vcmp.f64	d7, d6
   350cc:	vmrs	APSR_nzcv, fpscr
   350d0:	addne	r4, r4, #1
   350d4:	add	r4, r4, #344	; 0x158
   350d8:	adds	r8, r4, #3
   350dc:	addmi	r8, r4, #10
   350e0:	ldr	r3, [pc, #712]	; 353b0 <flatcc_json_parser_struct_as_root@@Base+0x18b4>
   350e4:	asr	r8, r8, #3
   350e8:	add	r8, r8, #1
   350ec:	add	r4, r3, #304	; 0x130
   350f0:	lsl	r3, r8, #4
   350f4:	add	r4, r4, r3
   350f8:	str	r3, [sp, #100]	; 0x64
   350fc:	mov	r3, #0
   35100:	mov	r1, r3
   35104:	ldrd	r2, [r4, #-8]
   35108:	ldrd	r6, [sp]
   3510c:	mov	r7, #0
   35110:	mov	r8, r2
   35114:	mov	r9, r3
   35118:	ldrd	r2, [sp, #32]
   3511c:	mov	r3, #0
   35120:	mov	r5, r3
   35124:	mov	r4, r2
   35128:	mul	r2, r8, r1
   3512c:	strd	r4, [sp, #24]
   35130:	mov	r4, sl
   35134:	mov	r5, r1
   35138:	ldr	r1, [sp, #28]
   3513c:	strd	r4, [sp, #80]	; 0x50
   35140:	strd	r6, [sp, #40]	; 0x28
   35144:	mul	r0, r8, r1
   35148:	ldr	r1, [sp, #80]	; 0x50
   3514c:	mov	r7, #0
   35150:	ldr	r3, [sp, #4]
   35154:	mla	r2, r1, r7, r2
   35158:	ldr	r1, [sp, #24]
   3515c:	umull	r4, r5, r8, sl
   35160:	mla	r1, r1, r7, r0
   35164:	mov	r6, r8
   35168:	str	r1, [sp, #124]	; 0x7c
   3516c:	umull	r0, r1, r3, r8
   35170:	add	r3, r2, r5
   35174:	ldrd	r4, [sp, #40]	; 0x28
   35178:	strd	r0, [sp, #72]	; 0x48
   3517c:	umull	r0, r1, r8, fp
   35180:	str	r3, [sp, #48]	; 0x30
   35184:	umull	r2, r3, r4, r9
   35188:	strd	r0, [sp, #88]	; 0x58
   3518c:	mov	r0, r8
   35190:	strd	r2, [sp, #64]	; 0x40
   35194:	ldr	r3, [sp, #92]	; 0x5c
   35198:	mov	r1, r9
   3519c:	mla	r2, fp, r7, r3
   351a0:	umull	sl, fp, r9, fp
   351a4:	ldr	r9, [pc, #516]	; 353b0 <flatcc_json_parser_struct_as_root@@Base+0x18b4>
   351a8:	ldr	r3, [sp, #100]	; 0x64
   351ac:	strd	sl, [sp, #112]	; 0x70
   351b0:	mov	fp, r5
   351b4:	mul	r5, r4, r7
   351b8:	strd	r0, [sp, #16]
   351bc:	add	r0, r9, #296	; 0x128
   351c0:	mla	r9, r8, fp, r5
   351c4:	add	r3, r0, r3
   351c8:	mov	r0, #0
   351cc:	str	r0, [sp, #52]	; 0x34
   351d0:	str	r9, [sp, #120]	; 0x78
   351d4:	ldrd	r8, [sp, #48]	; 0x30
   351d8:	str	r3, [sp, #100]	; 0x64
   351dc:	ldr	r3, [sp, #88]	; 0x58
   351e0:	str	r2, [sp, #48]	; 0x30
   351e4:	adds	r8, r8, r3
   351e8:	adc	r9, r9, #0
   351ec:	adds	sl, r8, #-2147483648	; 0x80000000
   351f0:	adc	fp, r9, #0
   351f4:	ldr	r3, [sp, #36]	; 0x24
   351f8:	strd	sl, [sp, #104]	; 0x68
   351fc:	ldr	fp, [sp, #24]
   35200:	umull	r8, r9, r6, r3
   35204:	umull	r4, r5, r6, fp
   35208:	strd	r8, [sp, #88]	; 0x58
   3520c:	strd	r4, [sp, #128]	; 0x80
   35210:	ldrd	sl, [sp, #112]	; 0x70
   35214:	str	r0, [sp, #52]	; 0x34
   35218:	ldrd	r8, [sp, #80]	; 0x50
   3521c:	subs	sl, sl, #1
   35220:	sbc	fp, fp, #0
   35224:	mov	r4, sl
   35228:	mov	r5, fp
   3522c:	ldrd	sl, [sp, #48]	; 0x30
   35230:	ldrd	r2, [sp, #16]
   35234:	adds	sl, sl, r4
   35238:	adc	fp, fp, r5
   3523c:	umull	r4, r5, r3, r8
   35240:	mov	r8, r9
   35244:	mla	r2, r3, r8, r5
   35248:	ldrd	r8, [sp, #104]	; 0x68
   3524c:	adds	r8, r8, r4
   35250:	adc	r9, r9, #0
   35254:	adds	r2, sl, r2
   35258:	adc	r3, fp, r0
   3525c:	ldrd	r4, [sp, #32]
   35260:	strd	r2, [sp, #80]	; 0x50
   35264:	ldrd	r2, [sp, #16]
   35268:	mov	sl, r9
   3526c:	ldr	r9, [sp, #92]	; 0x5c
   35270:	mla	r1, r5, r7, r9
   35274:	umull	r4, r5, r3, r5
   35278:	strd	r4, [sp, #32]
   3527c:	ldrd	r4, [sp, #24]
   35280:	str	r0, [sp, #28]
   35284:	umull	r8, r9, r3, r4
   35288:	mla	r2, r3, r5, r9
   3528c:	ldrd	r4, [sp, #32]
   35290:	strd	r8, [sp, #48]	; 0x30
   35294:	ldrd	r8, [sp, #80]	; 0x50
   35298:	adds	r4, r4, #1
   3529c:	adc	r5, r5, #0
   352a0:	adds	r8, r8, sl
   352a4:	adc	r9, r9, r0
   352a8:	adds	sl, r1, r4
   352ac:	mov	r4, r2
   352b0:	ldrd	r2, [sp, #40]	; 0x28
   352b4:	strd	r8, [sp, #32]
   352b8:	ldr	r1, [sp, #76]	; 0x4c
   352bc:	umull	r8, r9, r2, r6
   352c0:	ldr	r2, [sp, #68]	; 0x44
   352c4:	adc	fp, r0, r5
   352c8:	strd	r8, [sp, #40]	; 0x28
   352cc:	ldr	r8, [sp, #4]
   352d0:	adds	r6, sl, r4
   352d4:	ldr	r5, [sp, #124]	; 0x7c
   352d8:	mla	r1, r8, r7, r1
   352dc:	ldr	r7, [sp, #20]
   352e0:	ldr	sl, [sp, #88]	; 0x58
   352e4:	mla	r2, r7, r3, r2
   352e8:	adc	r7, fp, r0
   352ec:	strd	r6, [sp, #80]	; 0x50
   352f0:	ldr	r7, [sp, #132]	; 0x84
   352f4:	add	r3, r5, r7
   352f8:	adds	r6, r3, sl
   352fc:	ldr	r5, [sp, #120]	; 0x78
   35300:	ldr	r3, [sp, #44]	; 0x2c
   35304:	adc	r7, r0, #0
   35308:	adds	r8, r6, #-2147483648	; 0x80000000
   3530c:	adc	r9, r7, #0
   35310:	add	r3, r5, r3
   35314:	str	r3, [sp, #24]
   35318:	ldr	r7, [sp, #72]	; 0x48
   3531c:	strd	r8, [sp, #40]	; 0x28
   35320:	ldrd	r4, [sp, #24]
   35324:	ldrd	r8, [sp, #40]	; 0x28
   35328:	ldr	sl, [sp, #48]	; 0x30
   3532c:	adds	r4, r4, r7
   35330:	adc	r5, r5, #0
   35334:	adds	r6, r2, r1
   35338:	adc	r7, r0, r0
   3533c:	adds	r8, r8, sl
   35340:	adc	r9, r9, #0
   35344:	adds	r2, r4, #-2147483648	; 0x80000000
   35348:	adc	r3, r5, #0
   3534c:	ldr	r5, [sp, #20]
   35350:	strd	r2, [sp, #24]
   35354:	ldr	r3, [sp, #4]
   35358:	ldr	r2, [sp, #64]	; 0x40
   3535c:	ldr	r1, [sp, #100]	; 0x64
   35360:	umlal	r6, r7, r5, r3
   35364:	ldrd	r4, [sp, #24]
   35368:	ldrsh	r3, [r1, #8]
   3536c:	strd	r6, [sp]
   35370:	adds	r4, r4, r2
   35374:	adc	r5, r5, #0
   35378:	mov	r6, r5
   3537c:	ldrd	r4, [sp, #80]	; 0x50
   35380:	b	353e8 <flatcc_json_parser_struct_as_root@@Base+0x18ec>
   35384:	nop			; (mov r0, r0)
   35388:			; <UNDEFINED> instruction: 0xffffffff
   3538c:	svcvc	0x00efffff
   35390:			; <UNDEFINED> instruction: 0x509f79fe
   35394:	svccc	0x00d34413
	...
   353a0:			; <UNDEFINED> instruction: 0xffe00000
   353a4:	svcvc	0x00f00000	; IMB
   353a8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   353ac:			; <UNDEFINED> instruction: 0xffc00000
   353b0:	andeq	r6, r4, r0, lsl #9
   353b4:	stclgt	12, cr12, [ip], {205}	; 0xcd
   353b8:	andeq	r6, r4, r8, ror #25
   353bc:			; <UNDEFINED> instruction: 0x00046cb0
   353c0:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   353c4:			; <UNDEFINED> instruction: 0xfffffbce
   353c8:			; <UNDEFINED> instruction: 0xfffffbcd
   353cc:	rsbeq	r6, r6, r9, ror #28
   353d0:	strbtvs	r6, [r6], -r7, ror #12
   353d4:	andeq	r6, r4, r8, lsl #11
   353d8:	andeq	r6, r4, ip, lsr #25
   353dc:	muleq	r4, ip, r5
   353e0:	andeq	r6, r4, r4, asr ip
   353e4:	andeq	r6, r4, r0, asr #25
   353e8:	add	lr, lr, r3
   353ec:	add	ip, r3, ip
   353f0:	adds	r4, r4, r9
   353f4:	adc	r5, r5, r0
   353f8:	mov	sl, r4
   353fc:	mov	fp, r5
   35400:	ldrd	r4, [sp, #32]
   35404:	ldrd	r8, [sp]
   35408:	add	r3, lr, #64	; 0x40
   3540c:	subs	r4, sl, r4
   35410:	sbc	r5, fp, r5
   35414:	str	r3, [sp, #120]	; 0x78
   35418:	strd	r4, [sp, #16]
   3541c:	ldrd	r4, [sp, #32]
   35420:	ldrsh	r3, [r1, #10]
   35424:	adds	r8, r8, r6
   35428:	adc	r9, r9, r0
   3542c:	cmp	r5, fp
   35430:	str	r3, [sp, #104]	; 0x68
   35434:	cmpeq	r4, sl
   35438:	add	r3, ip, #64	; 0x40
   3543c:	strd	sl, [sp, #80]	; 0x50
   35440:	strd	r8, [sp, #88]	; 0x58
   35444:	str	r3, [sp, #100]	; 0x64
   35448:	bhi	35e1c <flatcc_json_parser_struct_as_root@@Base+0x2320>
   3544c:	add	r3, ip, #129	; 0x81
   35450:	mvn	r8, #63	; 0x3f
   35454:	add	r1, r3, r3, lsl #4
   35458:	sub	r8, r8, ip
   3545c:	add	r3, r3, r1, lsl #3
   35460:	sub	lr, r8, #32
   35464:	mov	r1, #1
   35468:	add	r3, r3, r3, lsl #3
   3546c:	mov	r4, #0
   35470:	asr	ip, r3, #12
   35474:	mov	r5, #0
   35478:	lsl	r3, r1, lr
   3547c:	strd	r4, [sp, #64]	; 0x40
   35480:	str	r3, [sp, #68]	; 0x44
   35484:	rsb	r9, r8, #32
   35488:	ldrd	r2, [sp, #80]	; 0x50
   3548c:	ldr	r4, [sp, #68]	; 0x44
   35490:	add	r6, ip, r1
   35494:	ldr	r0, [pc, #-236]	; 353b0 <flatcc_json_parser_struct_as_root@@Base+0x18b4>
   35498:	orr	r4, r4, r1, lsr r9
   3549c:	lsl	r1, r1, r8
   354a0:	add	r0, r0, r6, lsl #2
   354a4:	lsr	r5, r2, r8
   354a8:	str	r4, [sp, #68]	; 0x44
   354ac:	str	r1, [sp, #64]	; 0x40
   354b0:	ldr	r4, [r0, #1688]	; 0x698
   354b4:	orr	r5, r5, r3, lsl r9
   354b8:	ldrd	r0, [sp, #64]	; 0x40
   354bc:	orr	r5, r5, r3, lsr lr
   354c0:	subs	r0, r0, #1
   354c4:	sbc	r1, r1, #0
   354c8:	cmp	r5, r4
   354cc:	strd	r0, [sp, #72]	; 0x48
   354d0:	and	r3, r3, r1
   354d4:	ldrcc	r1, [pc, #-300]	; 353b0 <flatcc_json_parser_struct_as_root@@Base+0x18b4>
   354d8:	movcc	r6, ip
   354dc:	addcc	r1, r1, ip, lsl #2
   354e0:	str	lr, [sp]
   354e4:	ldrcc	r4, [r1, #1688]	; 0x698
   354e8:	cmp	r6, #0
   354ec:	and	r2, r2, r0
   354f0:	ble	35dd4 <flatcc_json_parser_struct_as_root@@Base+0x22d8>
   354f4:	mov	r1, r4
   354f8:	mov	r0, r5
   354fc:	strd	r2, [sp, #24]
   35500:	bl	40c5c <flatcc_json_printer_clear@@Base+0x38>
   35504:	ldr	r3, [sp, #12]
   35508:	mov	r1, r4
   3550c:	sub	r6, r6, #1
   35510:	add	r0, r0, #48	; 0x30
   35514:	strb	r0, [r3]
   35518:	mov	r0, r5
   3551c:	bl	40e48 <flatcc_json_printer_clear@@Base+0x224>
   35520:	ldr	r3, [sp]
   35524:	mov	ip, #0
   35528:	mov	r5, r1
   3552c:	lsl	r1, r1, r3
   35530:	ldrd	r2, [sp, #24]
   35534:	lsl	r0, r5, r8
   35538:	orr	r1, r1, r5, lsr r9
   3553c:	adds	sl, r0, r2
   35540:	adc	fp, r1, r3
   35544:	ldrd	r0, [sp, #16]
   35548:	strd	sl, [sp, #40]	; 0x28
   3554c:	cmp	r1, fp
   35550:	cmpeq	r0, sl
   35554:	bhi	35ddc <flatcc_json_parser_struct_as_root@@Base+0x22e0>
   35558:	ldr	fp, [pc, #-428]	; 353b4 <flatcc_json_parser_struct_as_root@@Base+0x18b8>
   3555c:	str	ip, [sp, #48]	; 0x30
   35560:	ldr	sl, [sp, #12]
   35564:	mov	r7, #1
   35568:	str	r8, [sp, #24]
   3556c:	strd	r2, [sp, #40]	; 0x28
   35570:	str	r9, [sp, #32]
   35574:	b	355d8 <flatcc_json_parser_struct_as_root@@Base+0x1adc>
   35578:	mov	r1, r4
   3557c:	mov	r0, r5
   35580:	bl	40c5c <flatcc_json_printer_clear@@Base+0x38>
   35584:	mov	r1, r4
   35588:	add	r7, r7, #1
   3558c:	sub	r6, r6, #1
   35590:	add	r0, r0, #48	; 0x30
   35594:	strb	r0, [sl, #1]!
   35598:	mov	r0, r5
   3559c:	bl	40e48 <flatcc_json_printer_clear@@Base+0x224>
   355a0:	ldr	r3, [sp]
   355a4:	lsl	r9, r1, r3
   355a8:	ldr	r3, [sp, #32]
   355ac:	mov	r5, r1
   355b0:	orr	r9, r9, r1, lsr r3
   355b4:	ldr	r3, [sp, #24]
   355b8:	lsl	r8, r1, r3
   355bc:	ldrd	r0, [sp, #40]	; 0x28
   355c0:	ldrd	r2, [sp, #16]
   355c4:	adds	r0, r0, r8
   355c8:	adc	r1, r1, r9
   355cc:	cmp	r3, r1
   355d0:	cmpeq	r2, r0
   355d4:	bhi	359c8 <flatcc_json_parser_struct_as_root@@Base+0x1ecc>
   355d8:	umull	r3, r4, fp, r4
   355dc:	cmp	r6, #0
   355e0:	lsr	r4, r4, #3
   355e4:	bne	35578 <flatcc_json_parser_struct_as_root@@Base+0x1a7c>
   355e8:	ldr	r8, [sp, #24]
   355ec:	ldrd	r2, [sp, #40]	; 0x28
   355f0:	ldr	r9, [sp, #32]
   355f4:	ldr	r1, [sp, #12]
   355f8:	str	r8, [sp, #24]
   355fc:	add	r4, r1, r7
   35600:	str	r9, [sp, #32]
   35604:	ldrd	r8, [sp, #16]
   35608:	mov	sl, #1
   3560c:	mov	fp, #0
   35610:	mov	lr, #10
   35614:	mov	r0, r4
   35618:	umull	r4, r5, r2, lr
   3561c:	mul	r1, lr, r9
   35620:	mla	r5, lr, r3, r5
   35624:	ldr	r3, [sp, #24]
   35628:	str	r1, [sp, #16]
   3562c:	umull	r8, r9, r8, lr
   35630:	lsr	r1, r4, r3
   35634:	ldr	r3, [sp, #32]
   35638:	mul	ip, lr, fp
   3563c:	orr	r1, r1, r5, lsl r3
   35640:	ldr	r3, [sp]
   35644:	umull	sl, fp, sl, lr
   35648:	orr	r1, r1, r5, lsr r3
   3564c:	ldrd	r2, [sp, #72]	; 0x48
   35650:	add	r1, r1, #48	; 0x30
   35654:	add	r7, r7, #1
   35658:	and	r2, r2, r4
   3565c:	ldr	r4, [sp, #16]
   35660:	and	r3, r3, r5
   35664:	add	r9, r4, r9
   35668:	cmp	r9, r3
   3566c:	cmpeq	r8, r2
   35670:	sub	r6, r6, #1
   35674:	strb	r1, [r0], #1
   35678:	add	fp, ip, fp
   3567c:	bls	35618 <flatcc_json_parser_struct_as_root@@Base+0x1b1c>
   35680:	ldrd	r4, [sp, #88]	; 0x58
   35684:	ldrd	r0, [sp, #80]	; 0x50
   35688:	strd	r8, [sp, #16]
   3568c:	subs	r0, r0, r4
   35690:	sbc	r1, r1, r5
   35694:	strd	r0, [sp]
   35698:	ldrd	r0, [sp, #80]	; 0x50
   3569c:	cmp	r5, r1
   356a0:	cmpeq	r4, r0
   356a4:	ldr	r1, [sp, #100]	; 0x64
   356a8:	ldr	r0, [sp, #120]	; 0x78
   356ac:	movhi	lr, #1
   356b0:	movls	lr, #0
   356b4:	cmp	r1, r0
   356b8:	orrne	lr, lr, #1
   356bc:	cmp	lr, #0
   356c0:	bne	35e1c <flatcc_json_parser_struct_as_root@@Base+0x2320>
   356c4:	ldrd	r4, [sp]
   356c8:	ldr	r0, [sp]
   356cc:	mul	r1, sl, r5
   356d0:	umull	r4, r5, sl, r4
   356d4:	mla	r0, r0, fp, r1
   356d8:	strd	r4, [sp, #32]
   356dc:	add	r1, r0, r5
   356e0:	str	r1, [sp, #36]	; 0x24
   356e4:	ldrd	r0, [sp, #32]
   356e8:	subs	r0, r0, sl
   356ec:	sbc	r1, r1, fp
   356f0:	cmp	r3, r1
   356f4:	cmpeq	r2, r0
   356f8:	strd	r0, [sp]
   356fc:	bcs	35dc0 <flatcc_json_parser_struct_as_root@@Base+0x22c4>
   35700:	subs	r0, r8, r2
   35704:	sbc	r1, r9, r3
   35708:	mov	r4, r8
   3570c:	mov	r5, r9
   35710:	ldrd	r8, [sp, #64]	; 0x40
   35714:	cmp	r9, r1
   35718:	cmpeq	r8, r0
   3571c:	bhi	35dec <flatcc_json_parser_struct_as_root@@Base+0x22f0>
   35720:	subs	r4, r4, r8
   35724:	ldr	r0, [sp, #12]
   35728:	sbc	r5, r5, r9
   3572c:	sub	r1, r7, #1
   35730:	subs	r4, r4, r2
   35734:	strd	sl, [sp, #24]
   35738:	sbc	r5, r5, r3
   3573c:	add	lr, r0, r1
   35740:	mov	ip, r7
   35744:	mov	fp, r6
   35748:	ldrd	r6, [sp]
   3574c:	adds	r0, r8, r2
   35750:	adc	r1, r9, r3
   35754:	cmp	r7, r1
   35758:	cmpeq	r6, r0
   3575c:	bhi	35978 <flatcc_json_parser_struct_as_root@@Base+0x1e7c>
   35760:	mov	r4, r6
   35764:	mov	r5, r7
   35768:	subs	r8, r4, r2
   3576c:	sbc	r9, r5, r3
   35770:	subs	r4, r0, r4
   35774:	sbc	r5, r1, r5
   35778:	cmp	r9, r5
   3577c:	cmpeq	r8, r4
   35780:	mov	r6, fp
   35784:	mov	r7, ip
   35788:	ldrd	sl, [sp, #24]
   3578c:	bcc	35dc0 <flatcc_json_parser_struct_as_root@@Base+0x22c4>
   35790:	ldr	r3, [sp, #12]
   35794:	sub	ip, ip, #1
   35798:	ldrb	r2, [r3, ip]
   3579c:	sub	r2, r2, #1
   357a0:	strb	r2, [r3, ip]
   357a4:	ldrd	r8, [sp, #32]
   357a8:	adds	r8, r8, sl
   357ac:	adc	r9, r9, fp
   357b0:	cmp	r9, r1
   357b4:	cmpeq	r8, r0
   357b8:	bls	35810 <flatcc_json_parser_struct_as_root@@Base+0x1d14>
   357bc:	ldrd	r4, [sp, #16]
   357c0:	ldrd	r2, [sp, #64]	; 0x40
   357c4:	subs	r4, r4, r0
   357c8:	sbc	r5, r5, r1
   357cc:	cmp	r3, r5
   357d0:	cmpeq	r2, r4
   357d4:	bhi	35810 <flatcc_json_parser_struct_as_root@@Base+0x1d14>
   357d8:	adds	r2, r2, r0
   357dc:	adc	r3, r3, r1
   357e0:	mov	r5, r3
   357e4:	mov	r4, r2
   357e8:	cmp	r9, r5
   357ec:	cmpeq	r8, r4
   357f0:	bhi	35848 <flatcc_json_parser_struct_as_root@@Base+0x1d4c>
   357f4:	subs	r2, r4, r8
   357f8:	sbc	r3, r5, r9
   357fc:	subs	r8, r8, r0
   35800:	sbc	r9, r9, r1
   35804:	cmp	r9, r3
   35808:	cmpeq	r8, r2
   3580c:	bhi	35848 <flatcc_json_parser_struct_as_root@@Base+0x1d4c>
   35810:	adds	r4, sl, sl
   35814:	adc	r5, fp, fp
   35818:	cmp	r5, r1
   3581c:	cmpeq	r4, r0
   35820:	bhi	35848 <flatcc_json_parser_struct_as_root@@Base+0x1d4c>
   35824:	ldrd	r2, [sp, #16]
   35828:	lsl	r5, fp, #2
   3582c:	lsl	r4, sl, #2
   35830:	subs	r2, r2, r4
   35834:	orr	r5, r5, sl, lsr #30
   35838:	sbc	r3, r3, r5
   3583c:	cmp	r3, r1
   35840:	cmpeq	r2, r0
   35844:	bcs	35914 <flatcc_json_parser_struct_as_root@@Base+0x1e18>
   35848:	ldr	r4, [sp, #12]
   3584c:	ldrd	r2, [sp, #56]	; 0x38
   35850:	ldr	r1, [pc, #-1184]	; 353b8 <flatcc_json_parser_struct_as_root@@Base+0x18bc>
   35854:	mov	r0, r4
   35858:	bl	14600 <sprintf@plt>
   3585c:	ldr	r3, [sp, #96]	; 0x60
   35860:	sub	r3, r4, r3
   35864:	add	r0, r3, r0
   35868:	add	sp, sp, #148	; 0x94
   3586c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35870:	ldr	r1, [sp, #12]
   35874:	mov	r2, #48	; 0x30
   35878:	mov	r0, r1
   3587c:	mov	r3, #0
   35880:	strb	r2, [r1]
   35884:	strb	r3, [r0, #1]!
   35888:	ldr	r3, [sp, #96]	; 0x60
   3588c:	sub	r0, r0, r3
   35890:	add	sp, sp, #148	; 0x94
   35894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35898:	vmov	r3, s0
   3589c:	mov	r2, r5
   358a0:	ldr	r1, [pc, #-1260]	; 353bc <flatcc_json_parser_struct_as_root@@Base+0x18c0>
   358a4:	add	sp, sp, #148	; 0x94
   358a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   358ac:	b	14600 <sprintf@plt>
   358b0:	ldr	fp, [pc, #-1272]	; 353c0 <flatcc_json_parser_struct_as_root@@Base+0x18c4>
   358b4:	mvn	sl, #0
   358b8:	and	r3, fp, r5
   358bc:	and	r2, sl, r4
   358c0:	mov	r1, r3
   358c4:	mov	fp, r3
   358c8:	orrs	r3, r2, r3
   358cc:	mov	sl, r2
   358d0:	beq	35e34 <flatcc_json_parser_struct_as_root@@Base+0x2338>
   358d4:	ldr	r3, [pc, #-1304]	; 353c4 <flatcc_json_parser_struct_as_root@@Base+0x18c8>
   358d8:	mov	r8, r2
   358dc:	mov	r9, r1
   358e0:	ldr	r7, [pc, #-1312]	; 353c8 <flatcc_json_parser_struct_as_root@@Base+0x18cc>
   358e4:	str	r3, [sp, #16]
   358e8:	b	34f0c <flatcc_json_parser_struct_as_root@@Base+0x1410>
   358ec:	mov	r7, lr
   358f0:	cmp	fp, #0
   358f4:	cmpeq	sl, #1
   358f8:	bls	35848 <flatcc_json_parser_struct_as_root@@Base+0x1d4c>
   358fc:	ldrd	r4, [sp, #16]
   35900:	subs	r4, r4, #4
   35904:	sbc	r5, r5, #0
   35908:	cmp	r5, fp
   3590c:	cmpeq	r4, sl
   35910:	bcc	35848 <flatcc_json_parser_struct_as_root@@Base+0x1d4c>
   35914:	ldr	r3, [sp, #104]	; 0x68
   35918:	cmp	r7, #2
   3591c:	sub	r6, r6, r3
   35920:	movle	r2, #1
   35924:	subgt	r2, r7, #1
   35928:	cmp	r6, #0
   3592c:	blt	35b8c <flatcc_json_parser_struct_as_root@@Base+0x2090>
   35930:	cmp	r6, #2
   35934:	bgt	35da4 <flatcc_json_parser_struct_as_root@@Base+0x22a8>
   35938:	cmp	r6, #0
   3593c:	ble	35de4 <flatcc_json_parser_struct_as_root@@Base+0x22e8>
   35940:	ldr	r3, [sp, #12]
   35944:	mov	r2, r6
   35948:	mov	r1, #48	; 0x30
   3594c:	add	r0, r3, r7
   35950:	bl	145c4 <memset@plt>
   35954:	add	ip, r6, r7
   35958:	ldr	r2, [sp, #12]
   3595c:	ldr	r1, [sp, #96]	; 0x60
   35960:	add	r0, r2, ip
   35964:	mov	r3, #0
   35968:	sub	r0, r0, r1
   3596c:	strb	r3, [r2, ip]
   35970:	add	sp, sp, #148	; 0x94
   35974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35978:	ldrb	r3, [lr]
   3597c:	subs	r6, r4, r8
   35980:	sbc	r7, r5, r9
   35984:	cmp	r9, r5
   35988:	sub	r3, r3, #1
   3598c:	cmpeq	r8, r4
   35990:	strb	r3, [lr]
   35994:	mov	r2, r0
   35998:	mov	r3, r1
   3599c:	bhi	35cb0 <flatcc_json_parser_struct_as_root@@Base+0x21b4>
   359a0:	mov	r4, r6
   359a4:	mov	r5, r7
   359a8:	b	35748 <flatcc_json_parser_struct_as_root@@Base+0x1c4c>
   359ac:	ldr	r0, [sp, #12]
   359b0:	ldr	r3, [pc, #-1516]	; 353cc <flatcc_json_parser_struct_as_root@@Base+0x18d0>
   359b4:	str	r3, [r0], #3
   359b8:	ldr	r3, [sp, #96]	; 0x60
   359bc:	sub	r0, r0, r3
   359c0:	add	sp, sp, #148	; 0x94
   359c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   359c8:	ldr	r8, [sp, #24]
   359cc:	ldr	r9, [sp, #32]
   359d0:	strd	r0, [sp, #40]	; 0x28
   359d4:	ldrd	r0, [sp, #80]	; 0x50
   359d8:	ldrd	sl, [sp, #88]	; 0x58
   359dc:	subs	r2, r0, sl
   359e0:	sbc	r3, r1, fp
   359e4:	cmp	fp, r1
   359e8:	cmpeq	sl, r0
   359ec:	ldr	r1, [sp, #100]	; 0x64
   359f0:	ldr	r0, [sp, #120]	; 0x78
   359f4:	movhi	lr, #1
   359f8:	movls	lr, #0
   359fc:	cmp	r1, r0
   35a00:	orrne	lr, lr, #1
   35a04:	cmp	lr, #0
   35a08:	strd	r2, [sp, #32]
   35a0c:	bne	35e1c <flatcc_json_parser_struct_as_root@@Base+0x2320>
   35a10:	ldr	r1, [sp]
   35a14:	subs	r2, r2, #1
   35a18:	ldrd	sl, [sp, #40]	; 0x28
   35a1c:	sbc	r3, r3, #0
   35a20:	lsl	r1, r4, r1
   35a24:	cmp	r3, fp
   35a28:	strd	r2, [sp]
   35a2c:	orr	r1, r1, r4, lsr r9
   35a30:	lsl	r3, r4, r8
   35a34:	cmpeq	r2, sl
   35a38:	str	r1, [sp, #28]
   35a3c:	str	r3, [sp, #24]
   35a40:	bls	35ae8 <flatcc_json_parser_struct_as_root@@Base+0x1fec>
   35a44:	ldrd	r4, [sp, #16]
   35a48:	ldrd	r8, [sp, #24]
   35a4c:	subs	r2, r4, sl
   35a50:	sbc	r3, r5, fp
   35a54:	mov	r5, r3
   35a58:	mov	r4, r2
   35a5c:	cmp	r9, r5
   35a60:	cmpeq	r8, r4
   35a64:	mov	r2, r8
   35a68:	bhi	358f0 <flatcc_json_parser_struct_as_root@@Base+0x1df4>
   35a6c:	ldr	r3, [sp, #12]
   35a70:	subs	r0, r4, r8
   35a74:	sub	r2, r7, #1
   35a78:	sbc	r1, r5, r9
   35a7c:	add	r2, r3, r2
   35a80:	mov	r4, r0
   35a84:	mov	r5, r1
   35a88:	mov	r0, sl
   35a8c:	mov	r1, fp
   35a90:	mov	lr, r7
   35a94:	mov	ip, r2
   35a98:	ldrd	r2, [sp]
   35a9c:	adds	sl, r0, r8
   35aa0:	adc	fp, r1, r9
   35aa4:	cmp	r3, fp
   35aa8:	cmpeq	r2, sl
   35aac:	bhi	35b58 <flatcc_json_parser_struct_as_root@@Base+0x205c>
   35ab0:	strd	r0, [sp, #40]	; 0x28
   35ab4:	subs	r0, r2, r0
   35ab8:	sbc	r1, r3, r1
   35abc:	subs	r4, sl, r2
   35ac0:	sbc	r5, fp, r3
   35ac4:	cmp	r1, r5
   35ac8:	cmpeq	r0, r4
   35acc:	mov	r7, lr
   35ad0:	bcc	35dcc <flatcc_json_parser_struct_as_root@@Base+0x22d0>
   35ad4:	ldr	r3, [sp, #12]
   35ad8:	sub	r1, lr, #1
   35adc:	ldrb	r2, [r3, r1]
   35ae0:	sub	r2, r2, #1
   35ae4:	strb	r2, [r3, r1]
   35ae8:	ldrd	r4, [sp, #32]
   35aec:	adds	r4, r4, #1
   35af0:	adc	r5, r5, #0
   35af4:	cmp	r5, fp
   35af8:	cmpeq	r4, sl
   35afc:	bls	358f0 <flatcc_json_parser_struct_as_root@@Base+0x1df4>
   35b00:	ldrd	r0, [sp, #16]
   35b04:	ldrd	r2, [sp, #24]
   35b08:	subs	r0, r0, sl
   35b0c:	sbc	r1, r1, fp
   35b10:	cmp	r3, r1
   35b14:	cmpeq	r2, r0
   35b18:	bhi	358f0 <flatcc_json_parser_struct_as_root@@Base+0x1df4>
   35b1c:	adds	r8, r2, sl
   35b20:	adc	r9, r3, fp
   35b24:	cmp	r5, r9
   35b28:	cmpeq	r4, r8
   35b2c:	mov	r2, r8
   35b30:	mov	r3, r9
   35b34:	bhi	35848 <flatcc_json_parser_struct_as_root@@Base+0x1d4c>
   35b38:	subs	r8, r2, r4
   35b3c:	sbc	r9, r3, r5
   35b40:	subs	r4, r4, sl
   35b44:	sbc	r5, r5, fp
   35b48:	cmp	r5, r9
   35b4c:	cmpeq	r4, r8
   35b50:	bls	358f0 <flatcc_json_parser_struct_as_root@@Base+0x1df4>
   35b54:	b	35848 <flatcc_json_parser_struct_as_root@@Base+0x1d4c>
   35b58:	ldrb	r1, [ip]
   35b5c:	subs	r2, r4, r8
   35b60:	sbc	r3, r5, r9
   35b64:	cmp	r9, r5
   35b68:	sub	r1, r1, #1
   35b6c:	cmpeq	r8, r4
   35b70:	strb	r1, [ip]
   35b74:	mov	r0, sl
   35b78:	mov	r1, fp
   35b7c:	bhi	358ec <flatcc_json_parser_struct_as_root@@Base+0x1df0>
   35b80:	mov	r4, r2
   35b84:	mov	r5, r3
   35b88:	b	35a98 <flatcc_json_parser_struct_as_root@@Base+0x1f9c>
   35b8c:	rsb	r4, r6, #0
   35b90:	add	r1, r7, r6
   35b94:	cmp	r4, r7
   35b98:	cmnge	r1, #2
   35b9c:	bge	35cc0 <flatcc_json_parser_struct_as_root@@Base+0x21c4>
   35ba0:	cmp	r7, #1
   35ba4:	beq	35d0c <flatcc_json_parser_struct_as_root@@Base+0x2210>
   35ba8:	cmp	r2, r4
   35bac:	movlt	r4, r2
   35bb0:	cmp	r4, #0
   35bb4:	add	r5, r7, #1
   35bb8:	ble	35df8 <flatcc_json_parser_struct_as_root@@Base+0x22fc>
   35bbc:	ldr	r3, [sp, #12]
   35bc0:	sub	r0, r5, r4
   35bc4:	sub	r8, r7, r4
   35bc8:	add	r0, r3, r0
   35bcc:	add	r1, r3, r8
   35bd0:	mov	r2, r4
   35bd4:	bl	14534 <memmove@plt>
   35bd8:	ldr	r3, [sp, #12]
   35bdc:	add	r6, r4, r6
   35be0:	mov	r2, #46	; 0x2e
   35be4:	cmp	r6, #0
   35be8:	strb	r2, [r3, r8]
   35bec:	mov	ip, r5
   35bf0:	beq	35958 <flatcc_json_parser_struct_as_root@@Base+0x1e5c>
   35bf4:	mov	r1, r3
   35bf8:	add	r3, r7, #2
   35bfc:	mov	r2, #101	; 0x65
   35c00:	add	lr, r1, r3
   35c04:	strb	r2, [r1, r5]
   35c08:	addlt	ip, lr, #1
   35c0c:	movge	ip, lr
   35c10:	ldr	r5, [pc, #-2120]	; 353d0 <flatcc_json_parser_struct_as_root@@Base+0x18d4>
   35c14:	rsblt	r6, r6, #0
   35c18:	mov	r0, ip
   35c1c:	mvn	r4, #9
   35c20:	movlt	r2, #45	; 0x2d
   35c24:	strblt	r2, [r1, r3]
   35c28:	smull	r2, r1, r5, r6
   35c2c:	asr	r2, r6, #31
   35c30:	rsb	r2, r2, r1, asr #2
   35c34:	mla	r1, r4, r2, r6
   35c38:	subs	r6, r2, #0
   35c3c:	add	r2, r1, #48	; 0x30
   35c40:	strb	r2, [r0], #1
   35c44:	bne	35c28 <flatcc_json_parser_struct_as_root@@Base+0x212c>
   35c48:	sub	r5, r0, ip
   35c4c:	strb	r6, [r0]
   35c50:	add	r5, r5, r5, lsr #31
   35c54:	asr	r5, r5, #1
   35c58:	cmp	r5, #0
   35c5c:	movgt	r2, ip
   35c60:	addgt	r5, r2, r5
   35c64:	movgt	r1, r0
   35c68:	ble	35c84 <flatcc_json_parser_struct_as_root@@Base+0x2188>
   35c6c:	ldrb	r4, [r1, #-1]
   35c70:	ldrb	ip, [r2]
   35c74:	strb	r4, [r2], #1
   35c78:	cmp	r2, r5
   35c7c:	strb	ip, [r1, #-1]!
   35c80:	bne	35c6c <flatcc_json_parser_struct_as_root@@Base+0x2170>
   35c84:	sub	ip, r0, lr
   35c88:	add	ip, ip, r3
   35c8c:	b	35958 <flatcc_json_parser_struct_as_root@@Base+0x1e5c>
   35c90:	ldr	r3, [sp, #16]
   35c94:	lsl	r5, fp, #2
   35c98:	lsl	r4, sl, #2
   35c9c:	orr	r5, r5, sl, lsr #30
   35ca0:	subs	r2, r4, #1
   35ca4:	sub	r7, r3, #2
   35ca8:	sbc	r3, r5, #0
   35cac:	b	35074 <flatcc_json_parser_struct_as_root@@Base+0x1578>
   35cb0:	mov	r6, fp
   35cb4:	mov	r7, ip
   35cb8:	ldrd	sl, [sp, #24]
   35cbc:	b	35810 <flatcc_json_parser_struct_as_root@@Base+0x1d14>
   35cc0:	ldr	r4, [sp, #12]
   35cc4:	rsb	r0, r7, #2
   35cc8:	sub	r0, r0, r6
   35ccc:	rsb	r6, r6, #2
   35cd0:	mov	r2, r7
   35cd4:	mov	r1, r4
   35cd8:	add	r0, r4, r0
   35cdc:	sub	r6, r6, r7
   35ce0:	bl	14534 <memmove@plt>
   35ce4:	mov	r1, #48	; 0x30
   35ce8:	mov	r2, #46	; 0x2e
   35cec:	cmp	r6, #2
   35cf0:	strb	r1, [r4]
   35cf4:	strb	r2, [r4, #1]
   35cf8:	ble	35e00 <flatcc_json_parser_struct_as_root@@Base+0x2304>
   35cfc:	sub	r2, r6, #2
   35d00:	add	r0, r4, #2
   35d04:	bl	145c4 <memset@plt>
   35d08:	b	35954 <flatcc_json_parser_struct_as_root@@Base+0x1e58>
   35d0c:	ldr	r1, [sp, #12]
   35d10:	mov	r6, r4
   35d14:	add	lr, r1, #2
   35d18:	add	r0, r1, #3
   35d1c:	mov	ip, #2
   35d20:	mov	r2, #101	; 0x65
   35d24:	mov	r3, #45	; 0x2d
   35d28:	strb	r2, [r1, #1]
   35d2c:	strb	r3, [r1, #2]
   35d30:	ldr	r5, [pc, #-2408]	; 353d0 <flatcc_json_parser_struct_as_root@@Base+0x18d4>
   35d34:	mov	r1, r0
   35d38:	mvn	r4, #9
   35d3c:	smull	r3, r2, r5, r6
   35d40:	asr	r3, r6, #31
   35d44:	rsb	r3, r3, r2, asr #2
   35d48:	mla	r2, r4, r3, r6
   35d4c:	subs	r6, r3, #0
   35d50:	add	r3, r2, #48	; 0x30
   35d54:	strb	r3, [r1], #1
   35d58:	bne	35d3c <flatcc_json_parser_struct_as_root@@Base+0x2240>
   35d5c:	sub	r3, r1, r0
   35d60:	strb	r6, [r1]
   35d64:	add	r3, r3, r3, lsr #31
   35d68:	asr	r2, r3, #1
   35d6c:	cmp	r2, #0
   35d70:	movgt	r3, r0
   35d74:	addgt	r0, r3, r2
   35d78:	movgt	r2, r1
   35d7c:	ble	35d98 <flatcc_json_parser_struct_as_root@@Base+0x229c>
   35d80:	ldrb	r5, [r2, #-1]
   35d84:	ldrb	r4, [r3]
   35d88:	strb	r5, [r3], #1
   35d8c:	cmp	r3, r0
   35d90:	strb	r4, [r2, #-1]!
   35d94:	bne	35d80 <flatcc_json_parser_struct_as_root@@Base+0x2284>
   35d98:	sub	r1, r1, lr
   35d9c:	add	ip, r1, ip
   35da0:	b	35958 <flatcc_json_parser_struct_as_root@@Base+0x1e5c>
   35da4:	ldr	r3, [sp, #12]
   35da8:	add	ip, r7, #1
   35dac:	add	r0, r3, ip
   35db0:	mov	r2, #101	; 0x65
   35db4:	mov	lr, r0
   35db8:	strb	r2, [r3, r7]
   35dbc:	b	35d30 <flatcc_json_parser_struct_as_root@@Base+0x2234>
   35dc0:	mov	r0, r2
   35dc4:	mov	r1, r3
   35dc8:	b	357a4 <flatcc_json_parser_struct_as_root@@Base+0x1ca8>
   35dcc:	ldrd	sl, [sp, #40]	; 0x28
   35dd0:	b	35ae8 <flatcc_json_parser_struct_as_root@@Base+0x1fec>
   35dd4:	mov	r7, #0
   35dd8:	b	355f4 <flatcc_json_parser_struct_as_root@@Base+0x1af8>
   35ddc:	mov	r7, #1
   35de0:	b	359d4 <flatcc_json_parser_struct_as_root@@Base+0x1ed8>
   35de4:	mov	ip, r7
   35de8:	b	35958 <flatcc_json_parser_struct_as_root@@Base+0x1e5c>
   35dec:	mov	r0, r2
   35df0:	mov	r1, r3
   35df4:	b	35810 <flatcc_json_parser_struct_as_root@@Base+0x1d14>
   35df8:	sub	r8, r7, r4
   35dfc:	b	35bd8 <flatcc_json_parser_struct_as_root@@Base+0x20dc>
   35e00:	mov	r6, #2
   35e04:	b	35954 <flatcc_json_parser_struct_as_root@@Base+0x1e58>
   35e08:	ldr	r3, [pc, #-2620]	; 353d4 <flatcc_json_parser_struct_as_root@@Base+0x18d8>
   35e0c:	mov	r2, #189	; 0xbd
   35e10:	ldr	r1, [pc, #-2616]	; 353e0 <flatcc_json_parser_struct_as_root@@Base+0x18e4>
   35e14:	ldr	r0, [pc, #-2628]	; 353d8 <flatcc_json_parser_struct_as_root@@Base+0x18dc>
   35e18:	bl	14618 <__assert_fail@plt>
   35e1c:	bl	349cc <flatcc_json_parser_struct_as_root@@Base+0xed0>
   35e20:	ldr	r3, [pc, #-2636]	; 353dc <flatcc_json_parser_struct_as_root@@Base+0x18e0>
   35e24:	mov	r2, #138	; 0x8a
   35e28:	ldr	r1, [pc, #-2640]	; 353e0 <flatcc_json_parser_struct_as_root@@Base+0x18e4>
   35e2c:	ldr	r0, [pc, #-2640]	; 353e4 <flatcc_json_parser_struct_as_root@@Base+0x18e8>
   35e30:	bl	14618 <__assert_fail@plt>
   35e34:	bl	148dc <__assert_fail@plt+0x2c4>

00035e38 <flatcc_json_printer_error_string@@Base>:
   35e38:	cmp	r0, #3
   35e3c:	ldrls	r3, [pc, #12]	; 35e50 <flatcc_json_printer_error_string@@Base+0x18>
   35e40:	addls	r0, r3, r0, lsl #2
   35e44:	ldrls	r0, [r0, #1732]	; 0x6c4
   35e48:	ldrhi	r0, [pc, #4]	; 35e54 <flatcc_json_printer_error_string@@Base+0x1c>
   35e4c:	bx	lr
   35e50:	andeq	r6, r4, r0, lsl #9
   35e54:	andeq	r5, r4, r4, lsr #6

00035e58 <flatcc_json_printer_fmt_float@@Base>:
   35e58:	vcvt.f64.f32	d0, s0
   35e5c:	b	34e20 <flatcc_json_parser_struct_as_root@@Base+0x1324>

00035e60 <flatcc_json_printer_fmt_double@@Base>:
   35e60:	b	34e20 <flatcc_json_parser_struct_as_root@@Base+0x1324>

00035e64 <flatcc_json_printer_fmt_bool@@Base>:
   35e64:	cmp	r1, #0
   35e68:	mov	r3, r0
   35e6c:	ldreq	r1, [pc, #36]	; 35e98 <flatcc_json_printer_fmt_bool@@Base+0x34>
   35e70:	ldrne	r1, [pc, #36]	; 35e9c <flatcc_json_printer_fmt_bool@@Base+0x38>
   35e74:	movne	r2, #4
   35e78:	ldrbeq	ip, [r1, #4]
   35e7c:	ldrne	r0, [r1]
   35e80:	ldreq	r0, [r1]
   35e84:	moveq	r2, #5
   35e88:	str	r0, [r3]
   35e8c:	strbeq	ip, [r3, #4]
   35e90:	mov	r0, r2
   35e94:	bx	lr
   35e98:	andeq	r1, r4, r4, ror #24
   35e9c:	andeq	r1, r4, ip, asr ip

00035ea0 <flatcc_json_printer_string@@Base>:
   35ea0:	b	349f0 <flatcc_json_parser_struct_as_root@@Base+0xef4>

00035ea4 <flatcc_json_printer_write@@Base>:
   35ea4:	ldr	r3, [r0, #20]
   35ea8:	push	{r4, r5, r6, r7, r8, lr}
   35eac:	add	ip, r3, r2
   35eb0:	ldr	r5, [r0, #16]
   35eb4:	mov	r4, r0
   35eb8:	cmp	r5, ip
   35ebc:	mov	r6, r2
   35ec0:	bls	35edc <flatcc_json_printer_write@@Base+0x38>
   35ec4:	mov	r0, r3
   35ec8:	bl	1454c <memcpy@plt>
   35ecc:	ldr	r3, [r4, #20]
   35ed0:	add	r6, r3, r6
   35ed4:	str	r6, [r4, #20]
   35ed8:	pop	{r4, r5, r6, r7, r8, pc}
   35edc:	cmp	r3, r5
   35ee0:	mov	r7, r1
   35ee4:	bcs	35f60 <flatcc_json_printer_write@@Base+0xbc>
   35ee8:	sub	r5, r5, r3
   35eec:	cmp	r6, r5
   35ef0:	bls	35f40 <flatcc_json_printer_write@@Base+0x9c>
   35ef4:	mov	r8, #0
   35ef8:	mov	r2, r5
   35efc:	mov	r1, r7
   35f00:	mov	r0, r3
   35f04:	bl	1454c <memcpy@plt>
   35f08:	ldr	r3, [r4, #20]
   35f0c:	ldr	r2, [r4, #44]	; 0x2c
   35f10:	add	r3, r3, r5
   35f14:	str	r3, [r4, #20]
   35f18:	mov	r1, r8
   35f1c:	mov	r0, r4
   35f20:	blx	r2
   35f24:	ldr	r3, [r4, #20]
   35f28:	ldr	r2, [r4, #16]
   35f2c:	sub	r6, r6, r5
   35f30:	add	r7, r7, r5
   35f34:	sub	r5, r2, r3
   35f38:	cmp	r6, r5
   35f3c:	bhi	35ef8 <flatcc_json_printer_write@@Base+0x54>
   35f40:	mov	r0, r3
   35f44:	mov	r2, r6
   35f48:	mov	r1, r7
   35f4c:	bl	1454c <memcpy@plt>
   35f50:	ldr	r3, [r4, #20]
   35f54:	add	r6, r3, r6
   35f58:	str	r6, [r4, #20]
   35f5c:	pop	{r4, r5, r6, r7, r8, pc}
   35f60:	ldr	r3, [r0, #44]	; 0x2c
   35f64:	mov	r1, #0
   35f68:	blx	r3
   35f6c:	ldr	r5, [r4, #16]
   35f70:	ldr	r3, [r4, #20]
   35f74:	b	35ee8 <flatcc_json_printer_write@@Base+0x44>

00035f78 <flatcc_json_printer_nl@@Base>:
   35f78:	ldr	r2, [r0, #20]
   35f7c:	mov	r1, #10
   35f80:	add	ip, r2, #1
   35f84:	str	ip, [r0, #20]
   35f88:	strb	r1, [r2]
   35f8c:	ldr	r1, [r0, #20]
   35f90:	ldr	r2, [r0, #16]
   35f94:	cmp	r1, r2
   35f98:	bxcc	lr
   35f9c:	ldr	r3, [r0, #44]	; 0x2c
   35fa0:	mov	r1, #0
   35fa4:	bx	r3

00035fa8 <flatcc_json_printer_char@@Base>:
   35fa8:	ldr	r3, [r0, #20]
   35fac:	add	r2, r3, #1
   35fb0:	str	r2, [r0, #20]
   35fb4:	strb	r1, [r3]
   35fb8:	bx	lr

00035fbc <flatcc_json_printer_indent@@Base>:
   35fbc:	push	{r4, r5, r6, r7, r8, lr}
   35fc0:	mov	r4, r0
   35fc4:	ldrb	r2, [r0, #25]
   35fc8:	ldr	r6, [r0, #32]
   35fcc:	ldr	r3, [r0, #20]
   35fd0:	ldr	r5, [r0, #16]
   35fd4:	mul	r6, r6, r2
   35fd8:	add	r2, r3, r6
   35fdc:	cmp	r5, r2
   35fe0:	bcc	36004 <flatcc_json_printer_indent@@Base+0x48>
   35fe4:	mov	r0, r3
   35fe8:	mov	r2, r6
   35fec:	mov	r1, #32
   35ff0:	bl	145c4 <memset@plt>
   35ff4:	ldr	r3, [r4, #20]
   35ff8:	add	r6, r3, r6
   35ffc:	str	r6, [r4, #20]
   36000:	pop	{r4, r5, r6, r7, r8, pc}
   36004:	cmp	r3, r5
   36008:	bcs	36068 <flatcc_json_printer_indent@@Base+0xac>
   3600c:	sub	r5, r5, r3
   36010:	cmp	r6, r5
   36014:	bls	35fe4 <flatcc_json_printer_indent@@Base+0x28>
   36018:	mov	r8, #32
   3601c:	mov	r7, #0
   36020:	mov	r2, r5
   36024:	mov	r0, r3
   36028:	mov	r1, r8
   3602c:	bl	145c4 <memset@plt>
   36030:	ldr	r3, [r4, #20]
   36034:	ldr	r2, [r4, #44]	; 0x2c
   36038:	add	r3, r3, r5
   3603c:	str	r3, [r4, #20]
   36040:	mov	r1, r7
   36044:	mov	r0, r4
   36048:	blx	r2
   3604c:	ldr	r3, [r4, #20]
   36050:	ldr	r2, [r4, #16]
   36054:	sub	r6, r6, r5
   36058:	sub	r5, r2, r3
   3605c:	cmp	r6, r5
   36060:	bhi	36020 <flatcc_json_printer_indent@@Base+0x64>
   36064:	b	35fe4 <flatcc_json_printer_indent@@Base+0x28>
   36068:	ldr	r3, [r0, #44]	; 0x2c
   3606c:	mov	r1, #0
   36070:	blx	r3
   36074:	ldr	r5, [r4, #16]
   36078:	ldr	r3, [r4, #20]
   3607c:	b	3600c <flatcc_json_printer_indent@@Base+0x50>

00036080 <flatcc_json_printer_add_level@@Base>:
   36080:	ldr	r3, [r0, #32]
   36084:	add	r1, r3, r1
   36088:	str	r1, [r0, #32]
   3608c:	bx	lr

00036090 <flatcc_json_printer_get_level@@Base>:
   36090:	ldr	r0, [r0, #32]
   36094:	bx	lr

00036098 <flatcc_json_printer_uint8@@Base>:
   36098:	cmp	r1, #99	; 0x63
   3609c:	push	{r4, lr}
   360a0:	ldr	r2, [r0, #20]
   360a4:	bls	36100 <flatcc_json_printer_uint8@@Base+0x68>
   360a8:	ldr	r3, [pc, #156]	; 3614c <flatcc_json_printer_uint8@@Base+0xb4>
   360ac:	mov	lr, #100	; 0x64
   360b0:	ldr	ip, [pc, #152]	; 36150 <flatcc_json_printer_uint8@@Base+0xb8>
   360b4:	umull	r4, r3, r3, r1
   360b8:	mov	r4, #0
   360bc:	lsr	r3, r3, #5
   360c0:	strb	r4, [r2, #3]
   360c4:	mul	lr, lr, r3
   360c8:	add	r3, r3, #48	; 0x30
   360cc:	sub	r1, r1, lr
   360d0:	mov	lr, #3
   360d4:	uxtb	r1, r1
   360d8:	ldrb	r4, [ip, r1, lsl #1]
   360dc:	add	r1, ip, r1, lsl #1
   360e0:	strb	r4, [r2, #1]
   360e4:	ldrb	r1, [r1, #1]
   360e8:	strb	r3, [r2]
   360ec:	strb	r1, [r2, #2]
   360f0:	ldr	r3, [r0, #20]
   360f4:	add	r3, r3, lr
   360f8:	str	r3, [r0, #20]
   360fc:	pop	{r4, pc}
   36100:	cmp	r1, #9
   36104:	bls	36134 <flatcc_json_printer_uint8@@Base+0x9c>
   36108:	ldr	r3, [pc, #64]	; 36150 <flatcc_json_printer_uint8@@Base+0xb8>
   3610c:	sxth	r1, r1
   36110:	mov	ip, #0
   36114:	strb	ip, [r2, #2]
   36118:	ldrb	ip, [r3, r1, lsl #1]
   3611c:	add	r1, r3, r1, lsl #1
   36120:	mov	lr, #2
   36124:	strb	ip, [r2]
   36128:	ldrb	r3, [r1, #1]
   3612c:	strb	r3, [r2, #1]
   36130:	b	360f0 <flatcc_json_printer_uint8@@Base+0x58>
   36134:	add	r1, r1, #48	; 0x30
   36138:	mov	r3, #0
   3613c:	mov	lr, #1
   36140:	strb	r1, [r2]
   36144:	strb	r3, [r2, #1]
   36148:	b	360f0 <flatcc_json_printer_uint8@@Base+0x58>
   3614c:	mvnpl	r8, pc, lsl r5
   36150:	andeq	r6, r4, r0, lsl #9

00036154 <flatcc_json_printer_uint16@@Base>:
   36154:	push	{r4, lr}
   36158:	mov	r4, r0
   3615c:	mov	r0, r1
   36160:	ldr	r1, [r4, #20]
   36164:	bl	33bd0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   36168:	ldr	r3, [r4, #20]
   3616c:	add	r0, r3, r0
   36170:	str	r0, [r4, #20]
   36174:	pop	{r4, pc}

00036178 <flatcc_json_printer_uint32@@Base>:
   36178:	push	{r4, lr}
   3617c:	mov	r4, r0
   36180:	mov	r0, r1
   36184:	ldr	r1, [r4, #20]
   36188:	bl	33d38 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   3618c:	ldr	r3, [r4, #20]
   36190:	add	r0, r3, r0
   36194:	str	r0, [r4, #20]
   36198:	pop	{r4, pc}

0003619c <flatcc_json_printer_uint64@@Base>:
   3619c:	push	{r4, lr}
   361a0:	mov	r4, r0
   361a4:	mov	r1, r3
   361a8:	mov	r0, r2
   361ac:	ldr	r2, [r4, #20]
   361b0:	bl	34060 <flatcc_json_parser_struct_as_root@@Base+0x564>
   361b4:	ldr	r3, [r4, #20]
   361b8:	add	r0, r3, r0
   361bc:	str	r0, [r4, #20]
   361c0:	pop	{r4, pc}

000361c4 <flatcc_json_printer_int8@@Base>:
   361c4:	cmp	r1, #0
   361c8:	lsr	ip, r1, #31
   361cc:	rsblt	r1, r1, #0
   361d0:	ldr	r3, [r0, #20]
   361d4:	sxtblt	r1, r1
   361d8:	movlt	r2, #45	; 0x2d
   361dc:	uxtb	r1, r1
   361e0:	push	{r4, r5, lr}
   361e4:	strblt	r2, [r3]
   361e8:	addlt	r3, r3, #1
   361ec:	cmp	r1, #99	; 0x63
   361f0:	bls	36250 <flatcc_json_printer_int8@@Base+0x8c>
   361f4:	ldr	r2, [pc, #160]	; 3629c <flatcc_json_printer_int8@@Base+0xd8>
   361f8:	mov	r4, #100	; 0x64
   361fc:	ldr	lr, [pc, #156]	; 362a0 <flatcc_json_printer_int8@@Base+0xdc>
   36200:	umull	r5, r2, r2, r1
   36204:	mov	r5, #0
   36208:	lsr	r2, r2, #5
   3620c:	strb	r5, [r3, #3]
   36210:	mul	r2, r4, r2
   36214:	mov	r4, #49	; 0x31
   36218:	sub	r1, r1, r2
   3621c:	mov	r2, #3
   36220:	uxtb	r1, r1
   36224:	ldrb	r5, [lr, r1, lsl #1]
   36228:	add	r1, lr, r1, lsl #1
   3622c:	strb	r5, [r3, #1]
   36230:	ldrb	r1, [r1, #1]
   36234:	strb	r4, [r3]
   36238:	strb	r1, [r3, #2]
   3623c:	ldr	r3, [r0, #20]
   36240:	add	r2, ip, r2
   36244:	add	r3, r3, r2
   36248:	str	r3, [r0, #20]
   3624c:	pop	{r4, r5, pc}
   36250:	cmp	r1, #9
   36254:	bls	36284 <flatcc_json_printer_int8@@Base+0xc0>
   36258:	ldr	r2, [pc, #64]	; 362a0 <flatcc_json_printer_int8@@Base+0xdc>
   3625c:	sxth	r1, r1
   36260:	mov	lr, #0
   36264:	strb	lr, [r3, #2]
   36268:	ldrb	lr, [r2, r1, lsl #1]
   3626c:	add	r1, r2, r1, lsl #1
   36270:	mov	r2, #2
   36274:	strb	lr, [r3]
   36278:	ldrb	r1, [r1, #1]
   3627c:	strb	r1, [r3, #1]
   36280:	b	3623c <flatcc_json_printer_int8@@Base+0x78>
   36284:	add	r1, r1, #48	; 0x30
   36288:	mov	lr, #0
   3628c:	mov	r2, #1
   36290:	strb	r1, [r3]
   36294:	strb	lr, [r3, #1]
   36298:	b	3623c <flatcc_json_printer_int8@@Base+0x78>
   3629c:	mvnpl	r8, pc, lsl r5
   362a0:	andeq	r6, r4, r0, lsl #9

000362a4 <flatcc_json_printer_int16@@Base>:
   362a4:	push	{r4, r5, r6, lr}
   362a8:	mov	r4, r0
   362ac:	subs	r0, r1, #0
   362b0:	ldr	r1, [r4, #20]
   362b4:	lsr	r5, r0, #31
   362b8:	rsblt	r0, r0, #0
   362bc:	movlt	r3, #45	; 0x2d
   362c0:	sxthlt	r0, r0
   362c4:	strblt	r3, [r1]
   362c8:	uxth	r0, r0
   362cc:	addlt	r1, r1, #1
   362d0:	bl	33bd0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   362d4:	ldr	r3, [r4, #20]
   362d8:	add	r0, r5, r0
   362dc:	add	r3, r3, r0
   362e0:	str	r3, [r4, #20]
   362e4:	pop	{r4, r5, r6, pc}

000362e8 <flatcc_json_printer_int32@@Base>:
   362e8:	push	{r4, r5, r6, lr}
   362ec:	mov	r4, r0
   362f0:	subs	r0, r1, #0
   362f4:	ldr	r1, [r4, #20]
   362f8:	movlt	r3, #45	; 0x2d
   362fc:	lsr	r5, r0, #31
   36300:	strblt	r3, [r1]
   36304:	rsblt	r0, r0, #0
   36308:	addlt	r1, r1, #1
   3630c:	bl	33d38 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   36310:	ldr	r3, [r4, #20]
   36314:	add	r0, r5, r0
   36318:	add	r3, r3, r0
   3631c:	str	r3, [r4, #20]
   36320:	pop	{r4, r5, r6, pc}

00036324 <flatcc_json_printer_int64@@Base>:
   36324:	push	{r4, r5, r6, lr}
   36328:	mov	r1, r3
   3632c:	mov	r4, r0
   36330:	cmp	r2, #0
   36334:	sbcs	r3, r3, #0
   36338:	mov	r0, r2
   3633c:	lsr	r5, r1, #31
   36340:	ldr	r2, [r4, #20]
   36344:	bge	3635c <flatcc_json_printer_int64@@Base+0x38>
   36348:	mov	r3, #45	; 0x2d
   3634c:	rsbs	r0, r0, #0
   36350:	strb	r3, [r2]
   36354:	rsc	r1, r1, #0
   36358:	add	r2, r2, #1
   3635c:	bl	34060 <flatcc_json_parser_struct_as_root@@Base+0x564>
   36360:	ldr	r3, [r4, #20]
   36364:	add	r0, r5, r0
   36368:	add	r3, r3, r0
   3636c:	str	r3, [r4, #20]
   36370:	pop	{r4, r5, r6, pc}

00036374 <flatcc_json_printer_float@@Base>:
   36374:	push	{r4, lr}
   36378:	vcvt.f64.f32	d0, s0
   3637c:	mov	r4, r0
   36380:	ldr	r0, [r0, #20]
   36384:	bl	34e20 <flatcc_json_parser_struct_as_root@@Base+0x1324>
   36388:	ldr	r3, [r4, #20]
   3638c:	add	r0, r3, r0
   36390:	str	r0, [r4, #20]
   36394:	pop	{r4, pc}

00036398 <flatcc_json_printer_double@@Base>:
   36398:	push	{r4, lr}
   3639c:	mov	r4, r0
   363a0:	ldr	r0, [r0, #20]
   363a4:	bl	34e20 <flatcc_json_parser_struct_as_root@@Base+0x1324>
   363a8:	ldr	r3, [r4, #20]
   363ac:	add	r0, r3, r0
   363b0:	str	r0, [r4, #20]
   363b4:	pop	{r4, pc}

000363b8 <flatcc_json_printer_enum@@Base>:
   363b8:	ldr	r3, [r0, #20]
   363bc:	mov	ip, #34	; 0x22
   363c0:	push	{r4, r5, r6, r7, r8, lr}
   363c4:	mov	r4, r0
   363c8:	strb	ip, [r3]
   363cc:	ldrb	ip, [r0, #26]
   363d0:	ldr	r3, [r0, #20]
   363d4:	ldr	r5, [r0, #16]
   363d8:	cmp	ip, #0
   363dc:	addeq	r3, r3, #1
   363e0:	add	ip, r3, r2
   363e4:	cmp	r5, ip
   363e8:	mov	r6, r2
   363ec:	str	r3, [r0, #20]
   363f0:	bhi	36494 <flatcc_json_printer_enum@@Base+0xdc>
   363f4:	cmp	r3, r5
   363f8:	mov	r7, r1
   363fc:	bcs	364ac <flatcc_json_printer_enum@@Base+0xf4>
   36400:	sub	r5, r5, r3
   36404:	cmp	r6, r5
   36408:	bls	36458 <flatcc_json_printer_enum@@Base+0xa0>
   3640c:	mov	r8, #0
   36410:	mov	r2, r5
   36414:	mov	r1, r7
   36418:	mov	r0, r3
   3641c:	bl	1454c <memcpy@plt>
   36420:	ldr	r3, [r4, #20]
   36424:	ldr	r2, [r4, #44]	; 0x2c
   36428:	add	r3, r3, r5
   3642c:	str	r3, [r4, #20]
   36430:	mov	r1, r8
   36434:	mov	r0, r4
   36438:	blx	r2
   3643c:	ldr	r3, [r4, #20]
   36440:	ldr	r2, [r4, #16]
   36444:	sub	r6, r6, r5
   36448:	add	r7, r7, r5
   3644c:	sub	r5, r2, r3
   36450:	cmp	r6, r5
   36454:	bhi	36410 <flatcc_json_printer_enum@@Base+0x58>
   36458:	mov	r0, r3
   3645c:	mov	r2, r6
   36460:	mov	r1, r7
   36464:	bl	1454c <memcpy@plt>
   36468:	ldr	r3, [r4, #20]
   3646c:	add	r6, r3, r6
   36470:	str	r6, [r4, #20]
   36474:	mov	r3, #34	; 0x22
   36478:	strb	r3, [r6]
   3647c:	ldrb	r2, [r4, #26]
   36480:	ldr	r3, [r4, #20]
   36484:	cmp	r2, #0
   36488:	addeq	r3, r3, #1
   3648c:	str	r3, [r4, #20]
   36490:	pop	{r4, r5, r6, r7, r8, pc}
   36494:	mov	r0, r3
   36498:	bl	1454c <memcpy@plt>
   3649c:	ldr	r3, [r4, #20]
   364a0:	add	r6, r3, r6
   364a4:	str	r6, [r4, #20]
   364a8:	b	36474 <flatcc_json_printer_enum@@Base+0xbc>
   364ac:	ldr	r3, [r0, #44]	; 0x2c
   364b0:	mov	r1, #0
   364b4:	blx	r3
   364b8:	ldr	r5, [r4, #16]
   364bc:	ldr	r3, [r4, #20]
   364c0:	b	36400 <flatcc_json_printer_enum@@Base+0x48>

000364c4 <flatcc_json_printer_delimit_enum_flags@@Base>:
   364c4:	ldr	r3, [r0, #20]
   364c8:	ldrb	r2, [r0, #26]
   364cc:	adds	r1, r1, #0
   364d0:	mov	ip, #34	; 0x22
   364d4:	strb	ip, [r3]
   364d8:	movne	r1, #1
   364dc:	ldr	r3, [r0, #20]
   364e0:	cmp	r2, #0
   364e4:	orreq	r1, r1, #1
   364e8:	add	r1, r3, r1
   364ec:	str	r1, [r0, #20]
   364f0:	bx	lr

000364f4 <flatcc_json_printer_enum_flag@@Base>:
   364f4:	ldr	ip, [r0, #20]
   364f8:	push	{r4, r5, r6, r7, r8, lr}
   364fc:	mov	lr, #32
   36500:	strb	lr, [ip]
   36504:	mov	r6, r2
   36508:	ldr	r2, [r0, #20]
   3650c:	ldr	r5, [r0, #16]
   36510:	cmp	r1, #0
   36514:	addgt	r2, r2, #1
   36518:	mov	r8, r3
   3651c:	add	r3, r2, r3
   36520:	cmp	r5, r3
   36524:	mov	r4, r0
   36528:	str	r2, [r0, #20]
   3652c:	bls	36550 <flatcc_json_printer_enum_flag@@Base+0x5c>
   36530:	mov	r0, r2
   36534:	mov	r1, r6
   36538:	mov	r2, r8
   3653c:	bl	1454c <memcpy@plt>
   36540:	ldr	r3, [r4, #20]
   36544:	add	r8, r3, r8
   36548:	str	r8, [r4, #20]
   3654c:	pop	{r4, r5, r6, r7, r8, pc}
   36550:	cmp	r2, r5
   36554:	mov	r7, r8
   36558:	bcs	365d4 <flatcc_json_printer_enum_flag@@Base+0xe0>
   3655c:	sub	r5, r5, r2
   36560:	cmp	r8, r5
   36564:	bls	365b4 <flatcc_json_printer_enum_flag@@Base+0xc0>
   36568:	mov	r8, #0
   3656c:	mov	r1, r6
   36570:	mov	r0, r2
   36574:	mov	r2, r5
   36578:	bl	1454c <memcpy@plt>
   3657c:	ldr	r3, [r4, #20]
   36580:	ldr	r2, [r4, #44]	; 0x2c
   36584:	add	r3, r3, r5
   36588:	str	r3, [r4, #20]
   3658c:	mov	r1, r8
   36590:	mov	r0, r4
   36594:	blx	r2
   36598:	ldr	r2, [r4, #20]
   3659c:	ldr	r3, [r4, #16]
   365a0:	sub	r7, r7, r5
   365a4:	add	r6, r6, r5
   365a8:	sub	r5, r3, r2
   365ac:	cmp	r7, r5
   365b0:	bhi	3656c <flatcc_json_printer_enum_flag@@Base+0x78>
   365b4:	mov	r0, r2
   365b8:	mov	r1, r6
   365bc:	mov	r2, r7
   365c0:	bl	1454c <memcpy@plt>
   365c4:	ldr	r3, [r4, #20]
   365c8:	add	r7, r3, r7
   365cc:	str	r7, [r4, #20]
   365d0:	pop	{r4, r5, r6, r7, r8, pc}
   365d4:	ldr	r3, [r0, #44]	; 0x2c
   365d8:	mov	r1, #0
   365dc:	blx	r3
   365e0:	ldr	r5, [r4, #16]
   365e4:	ldr	r2, [r4, #20]
   365e8:	b	3655c <flatcc_json_printer_enum_flag@@Base+0x68>

000365ec <flatcc_json_printer_string_field@@Base>:
   365ec:	add	r2, r2, #2
   365f0:	ldr	ip, [r1, #8]
   365f4:	lsl	r2, r2, #1
   365f8:	cmp	r2, ip
   365fc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36600:	ldr	r8, [sp, #40]	; 0x28
   36604:	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36608:	mov	r6, r3
   3660c:	ldr	r3, [r1, #4]
   36610:	ldrh	r7, [r3, r2]
   36614:	cmp	r7, #0
   36618:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3661c:	ldr	sl, [r1]
   36620:	adds	r9, sl, r7
   36624:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36628:	ldr	r3, [r1, #16]
   3662c:	mov	r4, r0
   36630:	cmp	r3, #0
   36634:	add	r3, r3, #1
   36638:	str	r3, [r1, #16]
   3663c:	ldrne	r3, [r0, #20]
   36640:	movne	r2, #44	; 0x2c
   36644:	addne	r1, r3, #1
   36648:	strne	r1, [r0, #20]
   3664c:	strbne	r2, [r3]
   36650:	ldrb	r1, [r0, #25]
   36654:	mov	fp, r8
   36658:	ldr	r3, [r0, #20]
   3665c:	cmp	r1, #0
   36660:	bne	367bc <flatcc_json_printer_string_field@@Base+0x1d0>
   36664:	ldr	r2, [r0, #16]
   36668:	cmp	r3, r2
   3666c:	bcc	3667c <flatcc_json_printer_string_field@@Base+0x90>
   36670:	ldr	r3, [r0, #44]	; 0x2c
   36674:	blx	r3
   36678:	ldr	r3, [r4, #20]
   3667c:	mov	r2, #34	; 0x22
   36680:	strb	r2, [r3]
   36684:	ldrb	r3, [r4, #26]
   36688:	ldr	r0, [r4, #20]
   3668c:	ldr	r5, [r4, #16]
   36690:	cmp	r3, #0
   36694:	addeq	r0, r0, #1
   36698:	add	r3, r0, r8
   3669c:	cmp	r5, r3
   366a0:	str	r0, [r4, #20]
   366a4:	bhi	36784 <flatcc_json_printer_string_field@@Base+0x198>
   366a8:	cmp	r0, r5
   366ac:	bcs	367a0 <flatcc_json_printer_string_field@@Base+0x1b4>
   366b0:	sub	r5, r5, r0
   366b4:	cmp	r8, r5
   366b8:	bls	36704 <flatcc_json_printer_string_field@@Base+0x118>
   366bc:	mov	r8, #0
   366c0:	mov	r2, r5
   366c4:	mov	r1, r6
   366c8:	bl	1454c <memcpy@plt>
   366cc:	ldr	r3, [r4, #20]
   366d0:	mov	r0, r4
   366d4:	add	r3, r3, r5
   366d8:	str	r3, [r4, #20]
   366dc:	ldr	r2, [r4, #44]	; 0x2c
   366e0:	mov	r1, r8
   366e4:	blx	r2
   366e8:	ldr	r0, [r4, #20]
   366ec:	ldr	r3, [r4, #16]
   366f0:	sub	fp, fp, r5
   366f4:	add	r6, r6, r5
   366f8:	sub	r5, r3, r0
   366fc:	cmp	fp, r5
   36700:	bhi	366c0 <flatcc_json_printer_string_field@@Base+0xd4>
   36704:	mov	r1, r6
   36708:	mov	r2, fp
   3670c:	bl	1454c <memcpy@plt>
   36710:	ldr	r8, [r4, #20]
   36714:	add	r8, r8, fp
   36718:	str	r8, [r4, #20]
   3671c:	mov	r3, #34	; 0x22
   36720:	strb	r3, [r8]
   36724:	ldr	r1, [r4, #20]
   36728:	ldrb	r3, [r4, #26]
   3672c:	clz	r3, r3
   36730:	lsr	r3, r3, #5
   36734:	add	r2, r1, r3
   36738:	add	r2, r2, #1
   3673c:	mov	r0, #58	; 0x3a
   36740:	str	r2, [r4, #20]
   36744:	strb	r0, [r1, r3]
   36748:	ldr	r3, [r4, #20]
   3674c:	mov	r2, #32
   36750:	mov	r0, r4
   36754:	strb	r2, [r3]
   36758:	ldrb	ip, [r4, #25]
   3675c:	ldr	r2, [sl, r7]
   36760:	ldr	r3, [r4, #20]
   36764:	add	r1, r9, r2
   36768:	cmp	ip, #0
   3676c:	addne	r3, r3, #1
   36770:	ldr	r2, [r9, r2]
   36774:	add	r1, r1, #4
   36778:	str	r3, [r4, #20]
   3677c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36780:	b	349f0 <flatcc_json_parser_struct_as_root@@Base+0xef4>
   36784:	mov	r2, r8
   36788:	mov	r1, r6
   3678c:	bl	1454c <memcpy@plt>
   36790:	ldr	fp, [r4, #20]
   36794:	add	r8, fp, r8
   36798:	str	r8, [r4, #20]
   3679c:	b	3671c <flatcc_json_printer_string_field@@Base+0x130>
   367a0:	mov	r0, r4
   367a4:	ldr	r3, [r4, #44]	; 0x2c
   367a8:	mov	r1, #0
   367ac:	blx	r3
   367b0:	ldr	r5, [r4, #16]
   367b4:	ldr	r0, [r4, #20]
   367b8:	b	366b0 <flatcc_json_printer_string_field@@Base+0xc4>
   367bc:	add	r1, r3, #1
   367c0:	mov	r2, #10
   367c4:	str	r1, [r0, #20]
   367c8:	strb	r2, [r3]
   367cc:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   367d0:	ldr	r3, [r4, #20]
   367d4:	b	3667c <flatcc_json_printer_string_field@@Base+0x90>

000367d8 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   367d8:	add	r2, r2, #2
   367dc:	ldr	ip, [r1, #8]
   367e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   367e4:	lsl	r2, r2, #1
   367e8:	sub	sp, sp, #12
   367ec:	cmp	r2, ip
   367f0:	ldr	r9, [sp, #48]	; 0x30
   367f4:	bge	36c28 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x450>
   367f8:	mov	r7, r3
   367fc:	ldr	r3, [r1, #4]
   36800:	ldrh	sl, [r3, r2]
   36804:	cmp	sl, #0
   36808:	beq	36c28 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x450>
   3680c:	ldr	r3, [sp, #52]	; 0x34
   36810:	ldr	fp, [r1]
   36814:	adds	r3, r3, #0
   36818:	movne	r3, #1
   3681c:	adds	r5, fp, sl
   36820:	str	r3, [sp, #4]
   36824:	beq	36c28 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x450>
   36828:	ldr	r3, [r1, #16]
   3682c:	mov	r4, r0
   36830:	cmp	r3, #0
   36834:	add	r3, r3, #1
   36838:	str	r3, [r1, #16]
   3683c:	ldrne	r3, [r0, #20]
   36840:	movne	r2, #44	; 0x2c
   36844:	addne	r1, r3, #1
   36848:	strne	r1, [r0, #20]
   3684c:	strbne	r2, [r3]
   36850:	ldrb	r1, [r0, #25]
   36854:	mov	r8, r9
   36858:	ldr	r3, [r0, #20]
   3685c:	cmp	r1, #0
   36860:	bne	36ce8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x510>
   36864:	ldr	r2, [r0, #16]
   36868:	cmp	r3, r2
   3686c:	bcc	3687c <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa4>
   36870:	ldr	r3, [r0, #44]	; 0x2c
   36874:	blx	r3
   36878:	ldr	r3, [r4, #20]
   3687c:	mov	r2, #34	; 0x22
   36880:	strb	r2, [r3]
   36884:	ldrb	r3, [r4, #26]
   36888:	ldr	r0, [r4, #20]
   3688c:	ldr	r6, [r4, #16]
   36890:	cmp	r3, #0
   36894:	addeq	r0, r0, #1
   36898:	add	r3, r0, r9
   3689c:	cmp	r6, r3
   368a0:	str	r0, [r4, #20]
   368a4:	bhi	36c60 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x488>
   368a8:	cmp	r0, r6
   368ac:	bcs	36ccc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4f4>
   368b0:	sub	r6, r6, r0
   368b4:	cmp	r9, r6
   368b8:	bls	36904 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x12c>
   368bc:	mov	r9, #0
   368c0:	mov	r2, r6
   368c4:	mov	r1, r7
   368c8:	bl	1454c <memcpy@plt>
   368cc:	ldr	r3, [r4, #20]
   368d0:	mov	r0, r4
   368d4:	add	r3, r3, r6
   368d8:	str	r3, [r4, #20]
   368dc:	ldr	r2, [r4, #44]	; 0x2c
   368e0:	mov	r1, r9
   368e4:	blx	r2
   368e8:	ldr	r0, [r4, #20]
   368ec:	ldr	r3, [r4, #16]
   368f0:	sub	r8, r8, r6
   368f4:	add	r7, r7, r6
   368f8:	sub	r6, r3, r0
   368fc:	cmp	r8, r6
   36900:	bhi	368c0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xe8>
   36904:	mov	r2, r8
   36908:	mov	r1, r7
   3690c:	bl	1454c <memcpy@plt>
   36910:	ldr	r9, [r4, #20]
   36914:	add	r8, r9, r8
   36918:	str	r8, [r4, #20]
   3691c:	mov	r1, #34	; 0x22
   36920:	strb	r1, [r8]
   36924:	ldr	r0, [r4, #20]
   36928:	ldrb	r3, [r4, #26]
   3692c:	clz	r3, r3
   36930:	lsr	r3, r3, #5
   36934:	add	r2, r0, r3
   36938:	add	r2, r2, #1
   3693c:	mov	ip, #58	; 0x3a
   36940:	str	r2, [r4, #20]
   36944:	strb	ip, [r0, r3]
   36948:	ldr	r3, [r4, #20]
   3694c:	mov	r2, #32
   36950:	ldr	ip, [pc, #940]	; 36d04 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x52c>
   36954:	strb	r2, [r3]
   36958:	ldr	r2, [fp, sl]
   3695c:	ldrb	r3, [r4, #25]
   36960:	ldr	lr, [r4, #20]
   36964:	ldr	r6, [r5, r2]
   36968:	adds	r3, r3, #0
   3696c:	movne	r3, #1
   36970:	lsl	r7, r6, #2
   36974:	add	r0, lr, r3
   36978:	umull	ip, r7, ip, r7
   3697c:	add	r0, r0, #1
   36980:	lsr	r7, r7, #1
   36984:	str	r0, [r4, #20]
   36988:	add	r7, r7, #3
   3698c:	strb	r1, [lr, r3]
   36990:	ldr	ip, [r4, #20]
   36994:	bic	r7, r7, #3
   36998:	ldr	r3, [r4, #16]
   3699c:	add	r1, ip, r7
   369a0:	add	r5, r5, r2
   369a4:	cmp	r1, r3
   369a8:	add	r5, r5, #4
   369ac:	bcs	36c7c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4a4>
   369b0:	cmp	r3, r1
   369b4:	bcs	36b28 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x350>
   369b8:	sub	r3, r3, ip
   369bc:	bic	r9, r3, #3
   369c0:	add	r8, r9, r9, lsl #1
   369c4:	lsrs	r8, r8, #2
   369c8:	ldrne	fp, [pc, #824]	; 36d08 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x530>
   369cc:	beq	36b14 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x33c>
   369d0:	ldr	r3, [sp, #4]
   369d4:	ldr	lr, [pc, #816]	; 36d0c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x534>
   369d8:	cmp	r3, #0
   369dc:	movne	lr, fp
   369e0:	cmp	r8, #2
   369e4:	bls	36c54 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x47c>
   369e8:	add	r0, ip, #4
   369ec:	add	r1, r5, #3
   369f0:	mov	r7, r8
   369f4:	ldrb	r3, [r1, #-3]
   369f8:	sub	r7, r7, #3
   369fc:	cmp	r7, #2
   36a00:	mov	sl, r1
   36a04:	ldrb	r3, [lr, r3, lsr #2]
   36a08:	mov	ip, r0
   36a0c:	add	r1, r1, #3
   36a10:	strb	r3, [r0, #-4]
   36a14:	ldrb	r3, [r1, #-6]
   36a18:	ldrb	r2, [r1, #-5]
   36a1c:	add	r0, r0, #4
   36a20:	lsl	r3, r3, #4
   36a24:	and	r3, r3, #48	; 0x30
   36a28:	orr	r3, r3, r2, lsr #4
   36a2c:	ldrb	r3, [lr, r3]
   36a30:	strb	r3, [r0, #-7]
   36a34:	ldrb	r3, [r1, #-5]
   36a38:	ldrb	r2, [r1, #-4]
   36a3c:	lsl	r3, r3, #2
   36a40:	and	r3, r3, #60	; 0x3c
   36a44:	orr	r3, r3, r2, lsr #6
   36a48:	ldrb	r3, [lr, r3]
   36a4c:	strb	r3, [r0, #-6]
   36a50:	ldrb	r3, [r1, #-4]
   36a54:	and	r3, r3, #63	; 0x3f
   36a58:	ldrb	r3, [lr, r3]
   36a5c:	strb	r3, [r0, #-5]
   36a60:	bhi	369f4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x21c>
   36a64:	cmp	r7, #1
   36a68:	beq	36c30 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x458>
   36a6c:	cmp	r7, #2
   36a70:	bne	36ab0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2d8>
   36a74:	ldrb	r3, [sl]
   36a78:	ldrb	r3, [lr, r3, lsr #2]
   36a7c:	strb	r3, [ip]
   36a80:	ldrb	r3, [sl]
   36a84:	ldrb	r2, [sl, #1]
   36a88:	lsl	r3, r3, #4
   36a8c:	and	r3, r3, #48	; 0x30
   36a90:	orr	r3, r3, r2, lsr #4
   36a94:	ldrb	r3, [lr, r3]
   36a98:	strb	r3, [ip, #1]
   36a9c:	ldrb	r3, [sl, #1]
   36aa0:	lsl	r3, r3, #2
   36aa4:	and	r3, r3, #60	; 0x3c
   36aa8:	ldrb	r3, [lr, r3]
   36aac:	strb	r3, [ip, #2]
   36ab0:	ldr	r3, [r4, #20]
   36ab4:	sub	r6, r6, r8
   36ab8:	add	r9, r3, r9
   36abc:	str	r9, [r4, #20]
   36ac0:	ldr	r3, [r4, #44]	; 0x2c
   36ac4:	mov	r1, #0
   36ac8:	mov	r0, r4
   36acc:	blx	r3
   36ad0:	ldr	r3, [pc, #556]	; 36d04 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x52c>
   36ad4:	lsl	r7, r6, #2
   36ad8:	ldr	ip, [r4, #20]
   36adc:	umull	r3, r7, r3, r7
   36ae0:	ldr	r9, [r4, #16]
   36ae4:	add	r5, r5, r8
   36ae8:	lsr	r7, r7, #1
   36aec:	add	r7, r7, #3
   36af0:	bic	r7, r7, #3
   36af4:	add	r3, ip, r7
   36af8:	cmp	r9, r3
   36afc:	bcs	36b28 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x350>
   36b00:	sub	r9, r9, ip
   36b04:	bic	r9, r9, #3
   36b08:	add	r8, r9, r9, lsl #1
   36b0c:	lsrs	r8, r8, #2
   36b10:	bne	369d0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1f8>
   36b14:	ldr	r3, [pc, #500]	; 36d10 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x538>
   36b18:	ldr	r2, [pc, #500]	; 36d14 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x53c>
   36b1c:	ldr	r1, [pc, #500]	; 36d18 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x540>
   36b20:	ldr	r0, [pc, #500]	; 36d1c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x544>
   36b24:	bl	14618 <__assert_fail@plt>
   36b28:	ldr	r2, [sp, #4]
   36b2c:	ldr	r3, [pc, #472]	; 36d0c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x534>
   36b30:	cmp	r2, #0
   36b34:	ldr	lr, [pc, #460]	; 36d08 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x530>
   36b38:	moveq	lr, r3
   36b3c:	cmp	r6, #2
   36b40:	bls	36bbc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x3e4>
   36b44:	add	r0, ip, #4
   36b48:	add	r1, r5, #3
   36b4c:	ldrb	r3, [r1, #-3]
   36b50:	sub	r6, r6, #3
   36b54:	cmp	r6, #2
   36b58:	mov	r5, r1
   36b5c:	ldrb	r3, [lr, r3, lsr #2]
   36b60:	mov	ip, r0
   36b64:	add	r1, r1, #3
   36b68:	strb	r3, [r0, #-4]
   36b6c:	ldrb	r3, [r1, #-6]
   36b70:	ldrb	r2, [r1, #-5]
   36b74:	add	r0, r0, #4
   36b78:	lsl	r3, r3, #4
   36b7c:	and	r3, r3, #48	; 0x30
   36b80:	orr	r3, r3, r2, lsr #4
   36b84:	ldrb	r3, [lr, r3]
   36b88:	strb	r3, [r0, #-7]
   36b8c:	ldrb	r3, [r1, #-5]
   36b90:	ldrb	r2, [r1, #-4]
   36b94:	lsl	r3, r3, #2
   36b98:	and	r3, r3, #60	; 0x3c
   36b9c:	orr	r3, r3, r2, lsr #6
   36ba0:	ldrb	r3, [lr, r3]
   36ba4:	strb	r3, [r0, #-6]
   36ba8:	ldrb	r3, [r1, #-4]
   36bac:	and	r3, r3, #63	; 0x3f
   36bb0:	ldrb	r3, [lr, r3]
   36bb4:	strb	r3, [r0, #-5]
   36bb8:	bhi	36b4c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x374>
   36bbc:	cmp	r6, #1
   36bc0:	beq	36c9c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4c4>
   36bc4:	cmp	r6, #2
   36bc8:	bne	36c10 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x438>
   36bcc:	ldrb	r3, [r5]
   36bd0:	mov	r2, #61	; 0x3d
   36bd4:	ldrb	r3, [lr, r3, lsr #2]
   36bd8:	strb	r3, [ip]
   36bdc:	ldrb	r3, [r5]
   36be0:	ldrb	r1, [r5, #1]
   36be4:	lsl	r3, r3, #4
   36be8:	and	r3, r3, #48	; 0x30
   36bec:	orr	r3, r3, r1, lsr #4
   36bf0:	ldrb	r3, [lr, r3]
   36bf4:	strb	r3, [ip, #1]
   36bf8:	ldrb	r3, [r5, #1]
   36bfc:	strb	r2, [ip, #3]
   36c00:	lsl	r3, r3, #2
   36c04:	and	r3, r3, #60	; 0x3c
   36c08:	ldrb	r3, [lr, r3]
   36c0c:	strb	r3, [ip, #2]
   36c10:	ldr	r2, [r4, #20]
   36c14:	mov	r1, #34	; 0x22
   36c18:	add	r3, r2, r7
   36c1c:	add	r3, r3, #1
   36c20:	str	r3, [r4, #20]
   36c24:	strb	r1, [r2, r7]
   36c28:	add	sp, sp, #12
   36c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36c30:	ldrb	r3, [sl]
   36c34:	ldrb	r3, [lr, r3, lsr #2]
   36c38:	strb	r3, [ip]
   36c3c:	ldrb	r3, [sl]
   36c40:	lsl	r3, r3, #4
   36c44:	and	r3, r3, #48	; 0x30
   36c48:	ldrb	r3, [lr, r3]
   36c4c:	strb	r3, [ip, #1]
   36c50:	b	36ab0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2d8>
   36c54:	mov	r7, r8
   36c58:	mov	sl, r5
   36c5c:	b	36a64 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x28c>
   36c60:	mov	r1, r7
   36c64:	mov	r2, r9
   36c68:	bl	1454c <memcpy@plt>
   36c6c:	ldr	r8, [r4, #20]
   36c70:	add	r8, r8, r9
   36c74:	str	r8, [r4, #20]
   36c78:	b	3691c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x144>
   36c7c:	ldr	r3, [r4, #44]	; 0x2c
   36c80:	mov	r1, #0
   36c84:	mov	r0, r4
   36c88:	blx	r3
   36c8c:	ldr	ip, [r4, #20]
   36c90:	ldr	r3, [r4, #16]
   36c94:	add	r1, ip, r7
   36c98:	b	369b0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1d8>
   36c9c:	ldrb	r3, [r5]
   36ca0:	mov	r2, #61	; 0x3d
   36ca4:	ldrb	r3, [lr, r3, lsr #2]
   36ca8:	strb	r3, [ip]
   36cac:	ldrb	r3, [r5]
   36cb0:	strb	r2, [ip, #2]
   36cb4:	strb	r2, [ip, #3]
   36cb8:	lsl	r3, r3, #4
   36cbc:	and	r3, r3, #48	; 0x30
   36cc0:	ldrb	r3, [lr, r3]
   36cc4:	strb	r3, [ip, #1]
   36cc8:	b	36c10 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x438>
   36ccc:	mov	r0, r4
   36cd0:	ldr	r3, [r4, #44]	; 0x2c
   36cd4:	mov	r1, #0
   36cd8:	blx	r3
   36cdc:	ldr	r6, [r4, #16]
   36ce0:	ldr	r0, [r4, #20]
   36ce4:	b	368b0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xd8>
   36ce8:	add	r1, r3, #1
   36cec:	mov	r2, #10
   36cf0:	str	r1, [r0, #20]
   36cf4:	strb	r2, [r3]
   36cf8:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   36cfc:	ldr	r3, [r4, #20]
   36d00:	b	3687c <flatcc_json_printer_uint8_vector_base64_field@@Base+0xa4>
   36d04:	bge	feae17b8 <__bss_end__@@Base+0xfea8a3fc>
   36d08:	andeq	r6, r4, r4, lsr sp
   36d0c:	strdeq	r6, [r4], -r0
   36d10:	andeq	r6, r4, r4, asr fp
   36d14:	andeq	r0, r0, r5, lsl r1
   36d18:	andeq	r6, r4, ip, ror #23
   36d1c:	andeq	r6, r4, r8, ror sp

00036d20 <flatcc_json_printer_uint8_field@@Base>:
   36d20:	add	r2, r2, #2
   36d24:	ldr	ip, [r1, #8]
   36d28:	lsl	r2, r2, #1
   36d2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36d30:	cmp	r2, ip
   36d34:	mov	r4, r0
   36d38:	mov	r6, r3
   36d3c:	ldr	r9, [sp, #32]
   36d40:	ldrb	r0, [sp, #36]	; 0x24
   36d44:	blt	36d5c <flatcc_json_printer_uint8_field@@Base+0x3c>
   36d48:	ldrb	r3, [r4, #29]
   36d4c:	cmp	r3, #0
   36d50:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   36d54:	mov	r8, r0
   36d58:	b	36d84 <flatcc_json_printer_uint8_field@@Base+0x64>
   36d5c:	ldr	r3, [r1, #4]
   36d60:	ldrh	r3, [r3, r2]
   36d64:	cmp	r3, #0
   36d68:	beq	36d48 <flatcc_json_printer_uint8_field@@Base+0x28>
   36d6c:	ldr	r2, [r1]
   36d70:	cmn	r2, r3
   36d74:	beq	36d48 <flatcc_json_printer_uint8_field@@Base+0x28>
   36d78:	ldrb	r8, [r2, r3]
   36d7c:	cmp	r0, r8
   36d80:	beq	36f78 <flatcc_json_printer_uint8_field@@Base+0x258>
   36d84:	ldr	r3, [r1, #16]
   36d88:	mov	r7, r9
   36d8c:	cmp	r3, #0
   36d90:	add	r3, r3, #1
   36d94:	str	r3, [r1, #16]
   36d98:	ldrne	r3, [r4, #20]
   36d9c:	movne	r2, #44	; 0x2c
   36da0:	addne	r1, r3, #1
   36da4:	strne	r1, [r4, #20]
   36da8:	strbne	r2, [r3]
   36dac:	ldrb	r1, [r4, #25]
   36db0:	ldr	r3, [r4, #20]
   36db4:	cmp	r1, #0
   36db8:	bne	36fbc <flatcc_json_printer_uint8_field@@Base+0x29c>
   36dbc:	ldr	r2, [r4, #16]
   36dc0:	cmp	r3, r2
   36dc4:	bcc	36dd8 <flatcc_json_printer_uint8_field@@Base+0xb8>
   36dc8:	ldr	r3, [r4, #44]	; 0x2c
   36dcc:	mov	r0, r4
   36dd0:	blx	r3
   36dd4:	ldr	r3, [r4, #20]
   36dd8:	mov	r2, #34	; 0x22
   36ddc:	strb	r2, [r3]
   36de0:	ldrb	r3, [r4, #26]
   36de4:	ldr	r0, [r4, #20]
   36de8:	ldr	r5, [r4, #16]
   36dec:	cmp	r3, #0
   36df0:	addeq	r0, r0, #1
   36df4:	add	r3, r0, r9
   36df8:	cmp	r5, r3
   36dfc:	str	r0, [r4, #20]
   36e00:	bhi	36f28 <flatcc_json_printer_uint8_field@@Base+0x208>
   36e04:	cmp	r0, r5
   36e08:	bcs	36fa0 <flatcc_json_printer_uint8_field@@Base+0x280>
   36e0c:	sub	r5, r5, r0
   36e10:	cmp	r9, r5
   36e14:	bls	36e60 <flatcc_json_printer_uint8_field@@Base+0x140>
   36e18:	mov	r9, #0
   36e1c:	mov	r2, r5
   36e20:	mov	r1, r6
   36e24:	bl	1454c <memcpy@plt>
   36e28:	ldr	r2, [r4, #20]
   36e2c:	ldr	r3, [r4, #44]	; 0x2c
   36e30:	add	r2, r2, r5
   36e34:	mov	r0, r4
   36e38:	str	r2, [r4, #20]
   36e3c:	mov	r1, r9
   36e40:	blx	r3
   36e44:	ldr	r0, [r4, #20]
   36e48:	ldr	r3, [r4, #16]
   36e4c:	sub	r7, r7, r5
   36e50:	add	r6, r6, r5
   36e54:	sub	r5, r3, r0
   36e58:	cmp	r7, r5
   36e5c:	bhi	36e1c <flatcc_json_printer_uint8_field@@Base+0xfc>
   36e60:	mov	r1, r6
   36e64:	mov	r2, r7
   36e68:	bl	1454c <memcpy@plt>
   36e6c:	ldr	r9, [r4, #20]
   36e70:	add	r9, r9, r7
   36e74:	str	r9, [r4, #20]
   36e78:	mov	r3, #34	; 0x22
   36e7c:	strb	r3, [r9]
   36e80:	ldr	r1, [r4, #20]
   36e84:	ldrb	r3, [r4, #26]
   36e88:	clz	r3, r3
   36e8c:	lsr	r3, r3, #5
   36e90:	add	r2, r1, r3
   36e94:	add	r2, r2, #1
   36e98:	mov	r0, #58	; 0x3a
   36e9c:	str	r2, [r4, #20]
   36ea0:	strb	r0, [r1, r3]
   36ea4:	ldr	r3, [r4, #20]
   36ea8:	mov	r2, #32
   36eac:	strb	r2, [r3]
   36eb0:	ldrb	r1, [r4, #25]
   36eb4:	ldr	ip, [r4, #20]
   36eb8:	adds	r1, r1, #0
   36ebc:	movne	r1, #1
   36ec0:	add	r0, ip, r1
   36ec4:	cmp	r8, #99	; 0x63
   36ec8:	str	r0, [r4, #20]
   36ecc:	bls	36f44 <flatcc_json_printer_uint8_field@@Base+0x224>
   36ed0:	ldr	r3, [pc, #260]	; 36fdc <flatcc_json_printer_uint8_field@@Base+0x2bc>
   36ed4:	mov	r2, #100	; 0x64
   36ed8:	ldr	lr, [pc, #256]	; 36fe0 <flatcc_json_printer_uint8_field@@Base+0x2c0>
   36edc:	umull	r5, r3, r3, r8
   36ee0:	mov	r5, #0
   36ee4:	lsr	r3, r3, #5
   36ee8:	strb	r5, [r0, #3]
   36eec:	mul	r2, r2, r3
   36ef0:	add	r3, r3, #48	; 0x30
   36ef4:	sub	r8, r8, r2
   36ef8:	mov	r2, #3
   36efc:	uxtb	r8, r8
   36f00:	ldrb	r5, [lr, r8, lsl #1]
   36f04:	add	r8, lr, r8, lsl #1
   36f08:	strb	r5, [r0, #1]
   36f0c:	ldrb	lr, [r8, #1]
   36f10:	strb	lr, [r0, #2]
   36f14:	strb	r3, [ip, r1]
   36f18:	ldr	r3, [r4, #20]
   36f1c:	add	r3, r3, r2
   36f20:	str	r3, [r4, #20]
   36f24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36f28:	mov	r2, r9
   36f2c:	mov	r1, r6
   36f30:	bl	1454c <memcpy@plt>
   36f34:	ldr	r7, [r4, #20]
   36f38:	add	r9, r7, r9
   36f3c:	str	r9, [r4, #20]
   36f40:	b	36e78 <flatcc_json_printer_uint8_field@@Base+0x158>
   36f44:	cmp	r8, #9
   36f48:	bls	36f88 <flatcc_json_printer_uint8_field@@Base+0x268>
   36f4c:	ldr	r3, [pc, #140]	; 36fe0 <flatcc_json_printer_uint8_field@@Base+0x2c0>
   36f50:	sxth	r8, r8
   36f54:	mov	r2, #0
   36f58:	strb	r2, [r0, #2]
   36f5c:	ldrb	lr, [r3, r8, lsl #1]
   36f60:	add	r3, r3, r8, lsl #1
   36f64:	mov	r2, #2
   36f68:	strb	lr, [ip, r1]
   36f6c:	ldrb	r3, [r3, #1]
   36f70:	strb	r3, [r0, #1]
   36f74:	b	36f18 <flatcc_json_printer_uint8_field@@Base+0x1f8>
   36f78:	ldrb	r3, [r4, #28]
   36f7c:	cmp	r3, #0
   36f80:	beq	36d84 <flatcc_json_printer_uint8_field@@Base+0x64>
   36f84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36f88:	add	r8, r8, #48	; 0x30
   36f8c:	mov	r3, #0
   36f90:	strb	r3, [r0, #1]
   36f94:	mov	r2, #1
   36f98:	strb	r8, [ip, r1]
   36f9c:	b	36f18 <flatcc_json_printer_uint8_field@@Base+0x1f8>
   36fa0:	mov	r0, r4
   36fa4:	ldr	r3, [r4, #44]	; 0x2c
   36fa8:	mov	r1, #0
   36fac:	blx	r3
   36fb0:	ldr	r5, [r4, #16]
   36fb4:	ldr	r0, [r4, #20]
   36fb8:	b	36e0c <flatcc_json_printer_uint8_field@@Base+0xec>
   36fbc:	add	r1, r3, #1
   36fc0:	mov	r2, #10
   36fc4:	str	r1, [r4, #20]
   36fc8:	mov	r0, r4
   36fcc:	strb	r2, [r3]
   36fd0:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   36fd4:	ldr	r3, [r4, #20]
   36fd8:	b	36dd8 <flatcc_json_printer_uint8_field@@Base+0xb8>
   36fdc:	mvnpl	r8, pc, lsl r5
   36fe0:	andeq	r6, r4, r0, lsl #9

00036fe4 <flatcc_json_printer_uint16_field@@Base>:
   36fe4:	add	r2, r2, #2
   36fe8:	ldr	ip, [r1, #8]
   36fec:	lsl	r2, r2, #1
   36ff0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36ff4:	cmp	r2, ip
   36ff8:	mov	r4, r0
   36ffc:	mov	r6, r3
   37000:	ldr	r9, [sp, #32]
   37004:	ldrh	r0, [sp, #36]	; 0x24
   37008:	blt	37020 <flatcc_json_printer_uint16_field@@Base+0x3c>
   3700c:	ldrb	r3, [r4, #29]
   37010:	cmp	r3, #0
   37014:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   37018:	mov	r8, r0
   3701c:	b	37048 <flatcc_json_printer_uint16_field@@Base+0x64>
   37020:	ldr	r3, [r1, #4]
   37024:	ldrh	r3, [r3, r2]
   37028:	cmp	r3, #0
   3702c:	beq	3700c <flatcc_json_printer_uint16_field@@Base+0x28>
   37030:	ldr	r2, [r1]
   37034:	cmn	r2, r3
   37038:	beq	3700c <flatcc_json_printer_uint16_field@@Base+0x28>
   3703c:	ldrh	r8, [r2, r3]
   37040:	cmp	r0, r8
   37044:	beq	371bc <flatcc_json_printer_uint16_field@@Base+0x1d8>
   37048:	ldr	r3, [r1, #16]
   3704c:	mov	r7, r9
   37050:	cmp	r3, #0
   37054:	add	r3, r3, #1
   37058:	str	r3, [r1, #16]
   3705c:	ldrne	r3, [r4, #20]
   37060:	movne	r2, #44	; 0x2c
   37064:	addne	r1, r3, #1
   37068:	strne	r1, [r4, #20]
   3706c:	strbne	r2, [r3]
   37070:	ldrb	r1, [r4, #25]
   37074:	ldr	r3, [r4, #20]
   37078:	cmp	r1, #0
   3707c:	bne	371e8 <flatcc_json_printer_uint16_field@@Base+0x204>
   37080:	ldr	r2, [r4, #16]
   37084:	cmp	r3, r2
   37088:	bcc	3709c <flatcc_json_printer_uint16_field@@Base+0xb8>
   3708c:	ldr	r3, [r4, #44]	; 0x2c
   37090:	mov	r0, r4
   37094:	blx	r3
   37098:	ldr	r3, [r4, #20]
   3709c:	mov	r2, #34	; 0x22
   370a0:	strb	r2, [r3]
   370a4:	ldrb	r3, [r4, #26]
   370a8:	ldr	r0, [r4, #20]
   370ac:	ldr	r5, [r4, #16]
   370b0:	cmp	r3, #0
   370b4:	addeq	r0, r0, #1
   370b8:	add	r3, r0, r9
   370bc:	cmp	r5, r3
   370c0:	str	r0, [r4, #20]
   370c4:	bhi	371a0 <flatcc_json_printer_uint16_field@@Base+0x1bc>
   370c8:	cmp	r0, r5
   370cc:	bcs	371cc <flatcc_json_printer_uint16_field@@Base+0x1e8>
   370d0:	sub	r5, r5, r0
   370d4:	cmp	r9, r5
   370d8:	bls	37124 <flatcc_json_printer_uint16_field@@Base+0x140>
   370dc:	mov	r9, #0
   370e0:	mov	r2, r5
   370e4:	mov	r1, r6
   370e8:	bl	1454c <memcpy@plt>
   370ec:	ldr	r2, [r4, #20]
   370f0:	ldr	r3, [r4, #44]	; 0x2c
   370f4:	add	r2, r2, r5
   370f8:	mov	r0, r4
   370fc:	str	r2, [r4, #20]
   37100:	mov	r1, r9
   37104:	blx	r3
   37108:	ldr	r0, [r4, #20]
   3710c:	ldr	r3, [r4, #16]
   37110:	sub	r7, r7, r5
   37114:	add	r6, r6, r5
   37118:	sub	r5, r3, r0
   3711c:	cmp	r7, r5
   37120:	bhi	370e0 <flatcc_json_printer_uint16_field@@Base+0xfc>
   37124:	mov	r1, r6
   37128:	mov	r2, r7
   3712c:	bl	1454c <memcpy@plt>
   37130:	ldr	r9, [r4, #20]
   37134:	add	r9, r9, r7
   37138:	str	r9, [r4, #20]
   3713c:	mov	r3, #34	; 0x22
   37140:	strb	r3, [r9]
   37144:	ldr	r1, [r4, #20]
   37148:	ldrb	r3, [r4, #26]
   3714c:	clz	r3, r3
   37150:	lsr	r3, r3, #5
   37154:	add	r2, r1, r3
   37158:	add	r2, r2, #1
   3715c:	mov	r0, #58	; 0x3a
   37160:	str	r2, [r4, #20]
   37164:	strb	r0, [r1, r3]
   37168:	ldr	r3, [r4, #20]
   3716c:	mov	r2, #32
   37170:	mov	r0, r8
   37174:	strb	r2, [r3]
   37178:	ldrb	r3, [r4, #25]
   3717c:	ldr	r1, [r4, #20]
   37180:	cmp	r3, #0
   37184:	addne	r1, r1, #1
   37188:	str	r1, [r4, #20]
   3718c:	bl	33bd0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   37190:	ldr	r3, [r4, #20]
   37194:	add	r0, r3, r0
   37198:	str	r0, [r4, #20]
   3719c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   371a0:	mov	r2, r9
   371a4:	mov	r1, r6
   371a8:	bl	1454c <memcpy@plt>
   371ac:	ldr	r7, [r4, #20]
   371b0:	add	r9, r7, r9
   371b4:	str	r9, [r4, #20]
   371b8:	b	3713c <flatcc_json_printer_uint16_field@@Base+0x158>
   371bc:	ldrb	r3, [r4, #28]
   371c0:	cmp	r3, #0
   371c4:	beq	37048 <flatcc_json_printer_uint16_field@@Base+0x64>
   371c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   371cc:	mov	r0, r4
   371d0:	ldr	r3, [r4, #44]	; 0x2c
   371d4:	mov	r1, #0
   371d8:	blx	r3
   371dc:	ldr	r5, [r4, #16]
   371e0:	ldr	r0, [r4, #20]
   371e4:	b	370d0 <flatcc_json_printer_uint16_field@@Base+0xec>
   371e8:	add	r1, r3, #1
   371ec:	mov	r2, #10
   371f0:	str	r1, [r4, #20]
   371f4:	mov	r0, r4
   371f8:	strb	r2, [r3]
   371fc:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   37200:	ldr	r3, [r4, #20]
   37204:	b	3709c <flatcc_json_printer_uint16_field@@Base+0xb8>

00037208 <flatcc_json_printer_uint32_field@@Base>:
   37208:	add	r2, r2, #2
   3720c:	ldr	ip, [r1, #8]
   37210:	lsl	r2, r2, #1
   37214:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   37218:	cmp	r2, ip
   3721c:	mov	r4, r0
   37220:	mov	r6, r3
   37224:	ldr	r9, [sp, #32]
   37228:	blt	37240 <flatcc_json_printer_uint32_field@@Base+0x38>
   3722c:	ldrb	r3, [r4, #29]
   37230:	cmp	r3, #0
   37234:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   37238:	ldr	r8, [sp, #36]	; 0x24
   3723c:	b	3726c <flatcc_json_printer_uint32_field@@Base+0x64>
   37240:	ldr	r3, [r1, #4]
   37244:	ldrh	r3, [r3, r2]
   37248:	cmp	r3, #0
   3724c:	beq	3722c <flatcc_json_printer_uint32_field@@Base+0x24>
   37250:	ldr	r2, [r1]
   37254:	cmn	r2, r3
   37258:	beq	3722c <flatcc_json_printer_uint32_field@@Base+0x24>
   3725c:	ldr	r8, [r2, r3]
   37260:	ldr	r3, [sp, #36]	; 0x24
   37264:	cmp	r3, r8
   37268:	beq	373e0 <flatcc_json_printer_uint32_field@@Base+0x1d8>
   3726c:	ldr	r3, [r1, #16]
   37270:	mov	r7, r9
   37274:	cmp	r3, #0
   37278:	add	r3, r3, #1
   3727c:	str	r3, [r1, #16]
   37280:	ldrne	r3, [r4, #20]
   37284:	movne	r2, #44	; 0x2c
   37288:	addne	r1, r3, #1
   3728c:	strne	r1, [r4, #20]
   37290:	strbne	r2, [r3]
   37294:	ldrb	r1, [r4, #25]
   37298:	ldr	r3, [r4, #20]
   3729c:	cmp	r1, #0
   372a0:	bne	3740c <flatcc_json_printer_uint32_field@@Base+0x204>
   372a4:	ldr	r2, [r4, #16]
   372a8:	cmp	r3, r2
   372ac:	bcc	372c0 <flatcc_json_printer_uint32_field@@Base+0xb8>
   372b0:	ldr	r3, [r4, #44]	; 0x2c
   372b4:	mov	r0, r4
   372b8:	blx	r3
   372bc:	ldr	r3, [r4, #20]
   372c0:	mov	r2, #34	; 0x22
   372c4:	strb	r2, [r3]
   372c8:	ldrb	r3, [r4, #26]
   372cc:	ldr	r0, [r4, #20]
   372d0:	ldr	r5, [r4, #16]
   372d4:	cmp	r3, #0
   372d8:	addeq	r0, r0, #1
   372dc:	add	r3, r0, r9
   372e0:	cmp	r5, r3
   372e4:	str	r0, [r4, #20]
   372e8:	bhi	373c4 <flatcc_json_printer_uint32_field@@Base+0x1bc>
   372ec:	cmp	r0, r5
   372f0:	bcs	373f0 <flatcc_json_printer_uint32_field@@Base+0x1e8>
   372f4:	sub	r5, r5, r0
   372f8:	cmp	r9, r5
   372fc:	bls	37348 <flatcc_json_printer_uint32_field@@Base+0x140>
   37300:	mov	r9, #0
   37304:	mov	r2, r5
   37308:	mov	r1, r6
   3730c:	bl	1454c <memcpy@plt>
   37310:	ldr	r2, [r4, #20]
   37314:	ldr	r3, [r4, #44]	; 0x2c
   37318:	add	r2, r2, r5
   3731c:	mov	r0, r4
   37320:	str	r2, [r4, #20]
   37324:	mov	r1, r9
   37328:	blx	r3
   3732c:	ldr	r0, [r4, #20]
   37330:	ldr	r3, [r4, #16]
   37334:	sub	r7, r7, r5
   37338:	add	r6, r6, r5
   3733c:	sub	r5, r3, r0
   37340:	cmp	r7, r5
   37344:	bhi	37304 <flatcc_json_printer_uint32_field@@Base+0xfc>
   37348:	mov	r1, r6
   3734c:	mov	r2, r7
   37350:	bl	1454c <memcpy@plt>
   37354:	ldr	r9, [r4, #20]
   37358:	add	r9, r9, r7
   3735c:	str	r9, [r4, #20]
   37360:	mov	r3, #34	; 0x22
   37364:	strb	r3, [r9]
   37368:	ldr	r1, [r4, #20]
   3736c:	ldrb	r3, [r4, #26]
   37370:	clz	r3, r3
   37374:	lsr	r3, r3, #5
   37378:	add	r2, r1, r3
   3737c:	add	r2, r2, #1
   37380:	mov	r0, #58	; 0x3a
   37384:	str	r2, [r4, #20]
   37388:	strb	r0, [r1, r3]
   3738c:	ldr	r3, [r4, #20]
   37390:	mov	r2, #32
   37394:	mov	r0, r8
   37398:	strb	r2, [r3]
   3739c:	ldrb	r3, [r4, #25]
   373a0:	ldr	r1, [r4, #20]
   373a4:	cmp	r3, #0
   373a8:	addne	r1, r1, #1
   373ac:	str	r1, [r4, #20]
   373b0:	bl	33d38 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   373b4:	ldr	r3, [r4, #20]
   373b8:	add	r0, r3, r0
   373bc:	str	r0, [r4, #20]
   373c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   373c4:	mov	r2, r9
   373c8:	mov	r1, r6
   373cc:	bl	1454c <memcpy@plt>
   373d0:	ldr	r7, [r4, #20]
   373d4:	add	r9, r7, r9
   373d8:	str	r9, [r4, #20]
   373dc:	b	37360 <flatcc_json_printer_uint32_field@@Base+0x158>
   373e0:	ldrb	r3, [r0, #28]
   373e4:	cmp	r3, #0
   373e8:	beq	3726c <flatcc_json_printer_uint32_field@@Base+0x64>
   373ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   373f0:	mov	r0, r4
   373f4:	ldr	r3, [r4, #44]	; 0x2c
   373f8:	mov	r1, #0
   373fc:	blx	r3
   37400:	ldr	r5, [r4, #16]
   37404:	ldr	r0, [r4, #20]
   37408:	b	372f4 <flatcc_json_printer_uint32_field@@Base+0xec>
   3740c:	add	r1, r3, #1
   37410:	mov	r2, #10
   37414:	str	r1, [r4, #20]
   37418:	mov	r0, r4
   3741c:	strb	r2, [r3]
   37420:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   37424:	ldr	r3, [r4, #20]
   37428:	b	372c0 <flatcc_json_printer_uint32_field@@Base+0xb8>

0003742c <flatcc_json_printer_uint64_field@@Base>:
   3742c:	add	r2, r2, #2
   37430:	ldr	ip, [r1, #8]
   37434:	lsl	r2, r2, #1
   37438:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3743c:	cmp	r2, ip
   37440:	mov	r4, r0
   37444:	mov	r8, r3
   37448:	ldr	r9, [sp, #32]
   3744c:	blt	37464 <flatcc_json_printer_uint64_field@@Base+0x38>
   37450:	ldrb	r3, [r4, #29]
   37454:	cmp	r3, #0
   37458:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3745c:	ldrd	r6, [sp, #40]	; 0x28
   37460:	b	37494 <flatcc_json_printer_uint64_field@@Base+0x68>
   37464:	ldr	r3, [r1, #4]
   37468:	ldrh	r3, [r3, r2]
   3746c:	cmp	r3, #0
   37470:	beq	37450 <flatcc_json_printer_uint64_field@@Base+0x24>
   37474:	ldr	r2, [r1]
   37478:	cmn	r2, r3
   3747c:	beq	37450 <flatcc_json_printer_uint64_field@@Base+0x24>
   37480:	ldrd	r6, [r2, r3]
   37484:	ldrd	r2, [sp, #40]	; 0x28
   37488:	cmp	r3, r7
   3748c:	cmpeq	r2, r6
   37490:	beq	3760c <flatcc_json_printer_uint64_field@@Base+0x1e0>
   37494:	ldr	r3, [r1, #16]
   37498:	mov	sl, r9
   3749c:	cmp	r3, #0
   374a0:	add	r3, r3, #1
   374a4:	str	r3, [r1, #16]
   374a8:	ldrne	r3, [r4, #20]
   374ac:	movne	r2, #44	; 0x2c
   374b0:	addne	r1, r3, #1
   374b4:	strne	r1, [r4, #20]
   374b8:	strbne	r2, [r3]
   374bc:	ldrb	r1, [r4, #25]
   374c0:	ldr	r3, [r4, #20]
   374c4:	cmp	r1, #0
   374c8:	bne	37638 <flatcc_json_printer_uint64_field@@Base+0x20c>
   374cc:	ldr	r2, [r4, #16]
   374d0:	cmp	r3, r2
   374d4:	bcc	374e8 <flatcc_json_printer_uint64_field@@Base+0xbc>
   374d8:	ldr	r3, [r4, #44]	; 0x2c
   374dc:	mov	r0, r4
   374e0:	blx	r3
   374e4:	ldr	r3, [r4, #20]
   374e8:	mov	r2, #34	; 0x22
   374ec:	strb	r2, [r3]
   374f0:	ldrb	r3, [r4, #26]
   374f4:	ldr	r0, [r4, #20]
   374f8:	ldr	r5, [r4, #16]
   374fc:	cmp	r3, #0
   37500:	addeq	r0, r0, #1
   37504:	add	r3, r0, r9
   37508:	cmp	r5, r3
   3750c:	str	r0, [r4, #20]
   37510:	bhi	375f0 <flatcc_json_printer_uint64_field@@Base+0x1c4>
   37514:	cmp	r0, r5
   37518:	bcs	3761c <flatcc_json_printer_uint64_field@@Base+0x1f0>
   3751c:	sub	r5, r5, r0
   37520:	cmp	r9, r5
   37524:	bls	37570 <flatcc_json_printer_uint64_field@@Base+0x144>
   37528:	mov	r9, #0
   3752c:	mov	r2, r5
   37530:	mov	r1, r8
   37534:	bl	1454c <memcpy@plt>
   37538:	ldr	r3, [r4, #20]
   3753c:	mov	r0, r4
   37540:	add	r3, r3, r5
   37544:	str	r3, [r4, #20]
   37548:	ldr	r2, [r4, #44]	; 0x2c
   3754c:	mov	r1, r9
   37550:	blx	r2
   37554:	ldr	r0, [r4, #20]
   37558:	ldr	r3, [r4, #16]
   3755c:	sub	sl, sl, r5
   37560:	add	r8, r8, r5
   37564:	sub	r5, r3, r0
   37568:	cmp	sl, r5
   3756c:	bhi	3752c <flatcc_json_printer_uint64_field@@Base+0x100>
   37570:	mov	r1, r8
   37574:	mov	r2, sl
   37578:	bl	1454c <memcpy@plt>
   3757c:	ldr	r9, [r4, #20]
   37580:	add	r9, r9, sl
   37584:	str	r9, [r4, #20]
   37588:	mov	r3, #34	; 0x22
   3758c:	strb	r3, [r9]
   37590:	ldr	r1, [r4, #20]
   37594:	ldrb	r3, [r4, #26]
   37598:	clz	r3, r3
   3759c:	lsr	r3, r3, #5
   375a0:	add	r2, r1, r3
   375a4:	add	r2, r2, #1
   375a8:	mov	r0, #58	; 0x3a
   375ac:	str	r2, [r4, #20]
   375b0:	strb	r0, [r1, r3]
   375b4:	ldr	r3, [r4, #20]
   375b8:	mov	r2, #32
   375bc:	mov	r0, r6
   375c0:	strb	r2, [r3]
   375c4:	ldrb	r3, [r4, #25]
   375c8:	ldr	r2, [r4, #20]
   375cc:	mov	r1, r7
   375d0:	cmp	r3, #0
   375d4:	addne	r2, r2, #1
   375d8:	str	r2, [r4, #20]
   375dc:	bl	34060 <flatcc_json_parser_struct_as_root@@Base+0x564>
   375e0:	ldr	r3, [r4, #20]
   375e4:	add	r0, r3, r0
   375e8:	str	r0, [r4, #20]
   375ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   375f0:	mov	r2, r9
   375f4:	mov	r1, r8
   375f8:	bl	1454c <memcpy@plt>
   375fc:	ldr	sl, [r4, #20]
   37600:	add	r9, sl, r9
   37604:	str	r9, [r4, #20]
   37608:	b	37588 <flatcc_json_printer_uint64_field@@Base+0x15c>
   3760c:	ldrb	r3, [r0, #28]
   37610:	cmp	r3, #0
   37614:	beq	37494 <flatcc_json_printer_uint64_field@@Base+0x68>
   37618:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3761c:	mov	r0, r4
   37620:	ldr	r3, [r4, #44]	; 0x2c
   37624:	mov	r1, #0
   37628:	blx	r3
   3762c:	ldr	r5, [r4, #16]
   37630:	ldr	r0, [r4, #20]
   37634:	b	3751c <flatcc_json_printer_uint64_field@@Base+0xf0>
   37638:	add	r1, r3, #1
   3763c:	mov	r2, #10
   37640:	str	r1, [r4, #20]
   37644:	mov	r0, r4
   37648:	strb	r2, [r3]
   3764c:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   37650:	ldr	r3, [r4, #20]
   37654:	b	374e8 <flatcc_json_printer_uint64_field@@Base+0xbc>

00037658 <flatcc_json_printer_int8_field@@Base>:
   37658:	add	r2, r2, #2
   3765c:	ldr	ip, [r1, #8]
   37660:	lsl	r2, r2, #1
   37664:	cmp	r2, ip
   37668:	push	{r4, r5, r6, lr}
   3766c:	ldrsb	ip, [sp, #20]
   37670:	blt	37688 <flatcc_json_printer_int8_field@@Base+0x30>
   37674:	ldrb	r2, [r0, #29]
   37678:	cmp	r2, #0
   3767c:	popeq	{r4, r5, r6, pc}
   37680:	mov	r4, ip
   37684:	b	376b0 <flatcc_json_printer_int8_field@@Base+0x58>
   37688:	ldr	lr, [r1, #4]
   3768c:	ldrh	r2, [lr, r2]
   37690:	cmp	r2, #0
   37694:	beq	37674 <flatcc_json_printer_int8_field@@Base+0x1c>
   37698:	ldr	lr, [r1]
   3769c:	cmn	lr, r2
   376a0:	beq	37674 <flatcc_json_printer_int8_field@@Base+0x1c>
   376a4:	ldrsb	r4, [lr, r2]
   376a8:	cmp	ip, r4
   376ac:	beq	377a0 <flatcc_json_printer_int8_field@@Base+0x148>
   376b0:	ldr	r2, [r1, #16]
   376b4:	mov	r5, r0
   376b8:	cmp	r2, #0
   376bc:	add	r2, r2, #1
   376c0:	str	r2, [r1, #16]
   376c4:	ldrne	r2, [r0, #20]
   376c8:	movne	r1, #44	; 0x2c
   376cc:	addne	ip, r2, #1
   376d0:	strne	ip, [r0, #20]
   376d4:	strbne	r1, [r2]
   376d8:	mov	r1, r3
   376dc:	ldr	r2, [sp, #16]
   376e0:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   376e4:	cmp	r4, #0
   376e8:	lsr	r1, r4, #31
   376ec:	rsblt	r4, r4, #0
   376f0:	ldr	r3, [r5, #20]
   376f4:	sxtblt	r4, r4
   376f8:	movlt	r2, #45	; 0x2d
   376fc:	uxtb	r4, r4
   37700:	strblt	r2, [r3]
   37704:	addlt	r3, r3, #1
   37708:	cmp	r4, #99	; 0x63
   3770c:	bls	3776c <flatcc_json_printer_int8_field@@Base+0x114>
   37710:	ldr	r2, [pc, #176]	; 377c8 <flatcc_json_printer_int8_field@@Base+0x170>
   37714:	mov	ip, #100	; 0x64
   37718:	ldr	r0, [pc, #172]	; 377cc <flatcc_json_printer_int8_field@@Base+0x174>
   3771c:	umull	lr, r2, r2, r4
   37720:	mov	lr, #0
   37724:	lsr	r2, r2, #5
   37728:	strb	lr, [r3, #3]
   3772c:	mul	r2, ip, r2
   37730:	mov	ip, #49	; 0x31
   37734:	sub	r4, r4, r2
   37738:	mov	r2, #3
   3773c:	uxtb	r4, r4
   37740:	ldrb	lr, [r0, r4, lsl #1]
   37744:	add	r4, r0, r4, lsl #1
   37748:	strb	lr, [r3, #1]
   3774c:	ldrb	r0, [r4, #1]
   37750:	strb	ip, [r3]
   37754:	strb	r0, [r3, #2]
   37758:	ldr	r3, [r5, #20]
   3775c:	add	r2, r1, r2
   37760:	add	r3, r3, r2
   37764:	str	r3, [r5, #20]
   37768:	pop	{r4, r5, r6, pc}
   3776c:	cmp	r4, #9
   37770:	bls	377b0 <flatcc_json_printer_int8_field@@Base+0x158>
   37774:	ldr	r2, [pc, #80]	; 377cc <flatcc_json_printer_int8_field@@Base+0x174>
   37778:	sxth	r4, r4
   3777c:	mov	r0, #0
   37780:	strb	r0, [r3, #2]
   37784:	ldrb	r0, [r2, r4, lsl #1]
   37788:	add	r4, r2, r4, lsl #1
   3778c:	mov	r2, #2
   37790:	strb	r0, [r3]
   37794:	ldrb	r0, [r4, #1]
   37798:	strb	r0, [r3, #1]
   3779c:	b	37758 <flatcc_json_printer_int8_field@@Base+0x100>
   377a0:	ldrb	r2, [r0, #28]
   377a4:	cmp	r2, #0
   377a8:	beq	376b0 <flatcc_json_printer_int8_field@@Base+0x58>
   377ac:	pop	{r4, r5, r6, pc}
   377b0:	add	r4, r4, #48	; 0x30
   377b4:	mov	r0, #0
   377b8:	mov	r2, #1
   377bc:	strb	r4, [r3]
   377c0:	strb	r0, [r3, #1]
   377c4:	b	37758 <flatcc_json_printer_int8_field@@Base+0x100>
   377c8:	mvnpl	r8, pc, lsl r5
   377cc:	andeq	r6, r4, r0, lsl #9

000377d0 <flatcc_json_printer_int16_field@@Base>:
   377d0:	add	r2, r2, #2
   377d4:	ldr	ip, [r1, #8]
   377d8:	lsl	r2, r2, #1
   377dc:	cmp	r2, ip
   377e0:	push	{r4, r5, r6, lr}
   377e4:	ldrsh	ip, [sp, #20]
   377e8:	blt	37800 <flatcc_json_printer_int16_field@@Base+0x30>
   377ec:	ldrb	r2, [r0, #29]
   377f0:	cmp	r2, #0
   377f4:	popeq	{r4, r5, r6, pc}
   377f8:	mov	r5, ip
   377fc:	b	37828 <flatcc_json_printer_int16_field@@Base+0x58>
   37800:	ldr	lr, [r1, #4]
   37804:	ldrh	r2, [lr, r2]
   37808:	cmp	r2, #0
   3780c:	beq	377ec <flatcc_json_printer_int16_field@@Base+0x1c>
   37810:	ldr	lr, [r1]
   37814:	cmn	lr, r2
   37818:	beq	377ec <flatcc_json_printer_int16_field@@Base+0x1c>
   3781c:	ldrsh	r5, [lr, r2]
   37820:	cmp	ip, r5
   37824:	beq	37898 <flatcc_json_printer_int16_field@@Base+0xc8>
   37828:	ldr	r2, [r1, #16]
   3782c:	mov	r4, r0
   37830:	cmp	r2, #0
   37834:	add	r2, r2, #1
   37838:	str	r2, [r1, #16]
   3783c:	ldrne	r2, [r0, #20]
   37840:	movne	r1, #44	; 0x2c
   37844:	addne	ip, r2, #1
   37848:	strne	ip, [r0, #20]
   3784c:	strbne	r1, [r2]
   37850:	mov	r1, r3
   37854:	ldr	r2, [sp, #16]
   37858:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3785c:	cmp	r5, #0
   37860:	lsr	r6, r5, #31
   37864:	rsblt	r5, r5, #0
   37868:	ldr	r1, [r4, #20]
   3786c:	sxthlt	r5, r5
   37870:	movlt	r3, #45	; 0x2d
   37874:	uxth	r0, r5
   37878:	strblt	r3, [r1]
   3787c:	addlt	r1, r1, #1
   37880:	bl	33bd0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   37884:	ldr	r3, [r4, #20]
   37888:	add	r0, r6, r0
   3788c:	add	r3, r3, r0
   37890:	str	r3, [r4, #20]
   37894:	pop	{r4, r5, r6, pc}
   37898:	ldrb	r2, [r0, #28]
   3789c:	cmp	r2, #0
   378a0:	beq	37828 <flatcc_json_printer_int16_field@@Base+0x58>
   378a4:	pop	{r4, r5, r6, pc}

000378a8 <flatcc_json_printer_int32_field@@Base>:
   378a8:	add	r2, r2, #2
   378ac:	ldr	ip, [r1, #8]
   378b0:	lsl	r2, r2, #1
   378b4:	cmp	r2, ip
   378b8:	push	{r4, r5, r6, lr}
   378bc:	blt	378d4 <flatcc_json_printer_int32_field@@Base+0x2c>
   378c0:	ldrb	r2, [r0, #29]
   378c4:	cmp	r2, #0
   378c8:	popeq	{r4, r5, r6, pc}
   378cc:	ldr	r5, [sp, #20]
   378d0:	b	37900 <flatcc_json_printer_int32_field@@Base+0x58>
   378d4:	ldr	ip, [r1, #4]
   378d8:	ldrh	r2, [ip, r2]
   378dc:	cmp	r2, #0
   378e0:	beq	378c0 <flatcc_json_printer_int32_field@@Base+0x18>
   378e4:	ldr	ip, [r1]
   378e8:	cmn	ip, r2
   378ec:	beq	378c0 <flatcc_json_printer_int32_field@@Base+0x18>
   378f0:	ldr	r5, [ip, r2]
   378f4:	ldr	r2, [sp, #20]
   378f8:	cmp	r2, r5
   378fc:	beq	3796c <flatcc_json_printer_int32_field@@Base+0xc4>
   37900:	ldr	r2, [r1, #16]
   37904:	mov	r4, r0
   37908:	cmp	r2, #0
   3790c:	add	r2, r2, #1
   37910:	str	r2, [r1, #16]
   37914:	ldrne	r2, [r0, #20]
   37918:	movne	r1, #44	; 0x2c
   3791c:	addne	ip, r2, #1
   37920:	strne	ip, [r0, #20]
   37924:	strbne	r1, [r2]
   37928:	mov	r1, r3
   3792c:	ldr	r2, [sp, #16]
   37930:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   37934:	ldr	r1, [r4, #20]
   37938:	cmp	r5, #0
   3793c:	movlt	r3, #45	; 0x2d
   37940:	lsr	r6, r5, #31
   37944:	rsblt	r5, r5, #0
   37948:	mov	r0, r5
   3794c:	strblt	r3, [r1]
   37950:	addlt	r1, r1, #1
   37954:	bl	33d38 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   37958:	ldr	r3, [r4, #20]
   3795c:	add	r0, r6, r0
   37960:	add	r3, r3, r0
   37964:	str	r3, [r4, #20]
   37968:	pop	{r4, r5, r6, pc}
   3796c:	ldrb	r2, [r0, #28]
   37970:	cmp	r2, #0
   37974:	beq	37900 <flatcc_json_printer_int32_field@@Base+0x58>
   37978:	pop	{r4, r5, r6, pc}

0003797c <flatcc_json_printer_int64_field@@Base>:
   3797c:	add	r2, r2, #2
   37980:	ldr	ip, [r1, #8]
   37984:	lsl	r2, r2, #1
   37988:	cmp	r2, ip
   3798c:	push	{r4, r5, r6, r7, r8, lr}
   37990:	blt	379a8 <flatcc_json_printer_int64_field@@Base+0x2c>
   37994:	ldrb	r2, [r0, #29]
   37998:	cmp	r2, #0
   3799c:	popeq	{r4, r5, r6, r7, r8, pc}
   379a0:	ldrd	r6, [sp, #32]
   379a4:	b	379d8 <flatcc_json_printer_int64_field@@Base+0x5c>
   379a8:	ldr	ip, [r1, #4]
   379ac:	ldrh	r2, [ip, r2]
   379b0:	cmp	r2, #0
   379b4:	beq	37994 <flatcc_json_printer_int64_field@@Base+0x18>
   379b8:	ldr	ip, [r1]
   379bc:	cmn	ip, r2
   379c0:	beq	37994 <flatcc_json_printer_int64_field@@Base+0x18>
   379c4:	ldrd	r6, [ip, r2]
   379c8:	ldrd	r4, [sp, #32]
   379cc:	cmp	r5, r7
   379d0:	cmpeq	r4, r6
   379d4:	beq	37a40 <flatcc_json_printer_int64_field@@Base+0xc4>
   379d8:	ldr	r2, [r1, #16]
   379dc:	mov	r4, r0
   379e0:	cmp	r2, #0
   379e4:	add	r2, r2, #1
   379e8:	str	r2, [r1, #16]
   379ec:	ldrne	r2, [r0, #20]
   379f0:	movne	r1, #44	; 0x2c
   379f4:	addne	ip, r2, #1
   379f8:	strne	ip, [r0, #20]
   379fc:	strbne	r1, [r2]
   37a00:	mov	r1, r3
   37a04:	ldr	r2, [sp, #24]
   37a08:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   37a0c:	cmp	r6, #0
   37a10:	sbcs	r3, r7, #0
   37a14:	ldr	r2, [r4, #20]
   37a18:	lsr	r5, r7, #31
   37a1c:	blt	37a50 <flatcc_json_printer_int64_field@@Base+0xd4>
   37a20:	mov	r0, r6
   37a24:	mov	r1, r7
   37a28:	bl	34060 <flatcc_json_parser_struct_as_root@@Base+0x564>
   37a2c:	ldr	r3, [r4, #20]
   37a30:	add	r0, r5, r0
   37a34:	add	r3, r3, r0
   37a38:	str	r3, [r4, #20]
   37a3c:	pop	{r4, r5, r6, r7, r8, pc}
   37a40:	ldrb	r2, [r0, #28]
   37a44:	cmp	r2, #0
   37a48:	beq	379d8 <flatcc_json_printer_int64_field@@Base+0x5c>
   37a4c:	pop	{r4, r5, r6, r7, r8, pc}
   37a50:	mov	r3, #45	; 0x2d
   37a54:	rsbs	r6, r6, #0
   37a58:	strb	r3, [r2]
   37a5c:	rsc	r7, r7, #0
   37a60:	add	r2, r2, #1
   37a64:	b	37a20 <flatcc_json_printer_int64_field@@Base+0xa4>

00037a68 <flatcc_json_printer_bool_field@@Base>:
   37a68:	add	r2, r2, #2
   37a6c:	ldr	ip, [r1, #8]
   37a70:	lsl	r2, r2, #1
   37a74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   37a78:	cmp	r2, ip
   37a7c:	mov	r4, r0
   37a80:	mov	r6, r3
   37a84:	ldr	r9, [sp, #32]
   37a88:	ldrb	r0, [sp, #36]	; 0x24
   37a8c:	blt	37aa4 <flatcc_json_printer_bool_field@@Base+0x3c>
   37a90:	ldrb	r3, [r4, #29]
   37a94:	cmp	r3, #0
   37a98:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   37a9c:	mov	r8, r0
   37aa0:	b	37acc <flatcc_json_printer_bool_field@@Base+0x64>
   37aa4:	ldr	r3, [r1, #4]
   37aa8:	ldrh	r3, [r3, r2]
   37aac:	cmp	r3, #0
   37ab0:	beq	37a90 <flatcc_json_printer_bool_field@@Base+0x28>
   37ab4:	ldr	r2, [r1]
   37ab8:	cmn	r2, r3
   37abc:	beq	37a90 <flatcc_json_printer_bool_field@@Base+0x28>
   37ac0:	ldrb	r8, [r2, r3]
   37ac4:	cmp	r0, r8
   37ac8:	beq	37c78 <flatcc_json_printer_bool_field@@Base+0x210>
   37acc:	ldr	r3, [r1, #16]
   37ad0:	mov	r7, r9
   37ad4:	cmp	r3, #0
   37ad8:	add	r3, r3, #1
   37adc:	str	r3, [r1, #16]
   37ae0:	ldrne	r3, [r4, #20]
   37ae4:	movne	r2, #44	; 0x2c
   37ae8:	addne	r1, r3, #1
   37aec:	strne	r1, [r4, #20]
   37af0:	strbne	r2, [r3]
   37af4:	ldrb	r1, [r4, #25]
   37af8:	ldr	r3, [r4, #20]
   37afc:	cmp	r1, #0
   37b00:	bne	37ca4 <flatcc_json_printer_bool_field@@Base+0x23c>
   37b04:	ldr	r2, [r4, #16]
   37b08:	cmp	r3, r2
   37b0c:	bcc	37b20 <flatcc_json_printer_bool_field@@Base+0xb8>
   37b10:	ldr	r3, [r4, #44]	; 0x2c
   37b14:	mov	r0, r4
   37b18:	blx	r3
   37b1c:	ldr	r3, [r4, #20]
   37b20:	mov	r2, #34	; 0x22
   37b24:	strb	r2, [r3]
   37b28:	ldrb	r3, [r4, #26]
   37b2c:	ldr	r0, [r4, #20]
   37b30:	ldr	r5, [r4, #16]
   37b34:	cmp	r3, #0
   37b38:	addeq	r0, r0, #1
   37b3c:	add	r3, r0, r9
   37b40:	cmp	r5, r3
   37b44:	str	r0, [r4, #20]
   37b48:	bhi	37c44 <flatcc_json_printer_bool_field@@Base+0x1dc>
   37b4c:	cmp	r0, r5
   37b50:	bcs	37c88 <flatcc_json_printer_bool_field@@Base+0x220>
   37b54:	sub	r5, r5, r0
   37b58:	cmp	r9, r5
   37b5c:	bls	37ba8 <flatcc_json_printer_bool_field@@Base+0x140>
   37b60:	mov	r9, #0
   37b64:	mov	r2, r5
   37b68:	mov	r1, r6
   37b6c:	bl	1454c <memcpy@plt>
   37b70:	ldr	r2, [r4, #20]
   37b74:	ldr	r3, [r4, #44]	; 0x2c
   37b78:	add	r2, r2, r5
   37b7c:	mov	r0, r4
   37b80:	str	r2, [r4, #20]
   37b84:	mov	r1, r9
   37b88:	blx	r3
   37b8c:	ldr	r0, [r4, #20]
   37b90:	ldr	r3, [r4, #16]
   37b94:	sub	r7, r7, r5
   37b98:	add	r6, r6, r5
   37b9c:	sub	r5, r3, r0
   37ba0:	cmp	r7, r5
   37ba4:	bhi	37b64 <flatcc_json_printer_bool_field@@Base+0xfc>
   37ba8:	mov	r1, r6
   37bac:	mov	r2, r7
   37bb0:	bl	1454c <memcpy@plt>
   37bb4:	ldr	r9, [r4, #20]
   37bb8:	add	r9, r9, r7
   37bbc:	str	r9, [r4, #20]
   37bc0:	mov	r3, #34	; 0x22
   37bc4:	strb	r3, [r9]
   37bc8:	ldr	r1, [r4, #20]
   37bcc:	ldrb	r3, [r4, #26]
   37bd0:	clz	r3, r3
   37bd4:	lsr	r3, r3, #5
   37bd8:	add	r2, r1, r3
   37bdc:	add	r2, r2, #1
   37be0:	mov	r0, #58	; 0x3a
   37be4:	str	r2, [r4, #20]
   37be8:	strb	r0, [r1, r3]
   37bec:	ldr	r3, [r4, #20]
   37bf0:	mov	r2, #32
   37bf4:	ldr	r0, [pc, #200]	; 37cc4 <flatcc_json_printer_bool_field@@Base+0x25c>
   37bf8:	strb	r2, [r3]
   37bfc:	ldrb	r3, [r4, #25]
   37c00:	ldr	r1, [r4, #20]
   37c04:	adds	r3, r3, #0
   37c08:	movne	r3, #1
   37c0c:	add	r2, r1, r3
   37c10:	cmp	r8, #0
   37c14:	str	r2, [r4, #20]
   37c18:	bne	37c60 <flatcc_json_printer_bool_field@@Base+0x1f8>
   37c1c:	add	lr, r0, #1792	; 0x700
   37c20:	mov	ip, #5
   37c24:	ldrh	lr, [lr, #4]
   37c28:	ldr	r0, [r0, #1792]	; 0x700
   37c2c:	str	r0, [r1, r3]
   37c30:	strh	lr, [r2, #4]
   37c34:	ldr	r3, [r4, #20]
   37c38:	add	r3, r3, ip
   37c3c:	str	r3, [r4, #20]
   37c40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37c44:	mov	r2, r9
   37c48:	mov	r1, r6
   37c4c:	bl	1454c <memcpy@plt>
   37c50:	ldr	r7, [r4, #20]
   37c54:	add	r9, r7, r9
   37c58:	str	r9, [r4, #20]
   37c5c:	b	37bc0 <flatcc_json_printer_bool_field@@Base+0x158>
   37c60:	ldrb	lr, [r0, #1788]	; 0x6fc
   37c64:	ldr	r0, [r0, #1784]	; 0x6f8
   37c68:	mov	ip, #4
   37c6c:	str	r0, [r1, r3]
   37c70:	strb	lr, [r2, #4]
   37c74:	b	37c34 <flatcc_json_printer_bool_field@@Base+0x1cc>
   37c78:	ldrb	r3, [r4, #28]
   37c7c:	cmp	r3, #0
   37c80:	beq	37acc <flatcc_json_printer_bool_field@@Base+0x64>
   37c84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37c88:	mov	r0, r4
   37c8c:	ldr	r3, [r4, #44]	; 0x2c
   37c90:	mov	r1, #0
   37c94:	blx	r3
   37c98:	ldr	r5, [r4, #16]
   37c9c:	ldr	r0, [r4, #20]
   37ca0:	b	37b54 <flatcc_json_printer_bool_field@@Base+0xec>
   37ca4:	add	r1, r3, #1
   37ca8:	mov	r2, #10
   37cac:	str	r1, [r4, #20]
   37cb0:	mov	r0, r4
   37cb4:	strb	r2, [r3]
   37cb8:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   37cbc:	ldr	r3, [r4, #20]
   37cc0:	b	37b20 <flatcc_json_printer_bool_field@@Base+0xb8>
   37cc4:	andeq	r6, r4, r0, lsl #9

00037cc8 <flatcc_json_printer_float_field@@Base>:
   37cc8:	add	r2, r2, #2
   37ccc:	ldr	ip, [r1, #8]
   37cd0:	lsl	r2, r2, #1
   37cd4:	cmp	r2, ip
   37cd8:	push	{r4, lr}
   37cdc:	vpush	{d8}
   37ce0:	blt	37cf8 <flatcc_json_printer_float_field@@Base+0x30>
   37ce4:	ldrb	r2, [r0, #29]
   37ce8:	cmp	r2, #0
   37cec:	beq	37d7c <flatcc_json_printer_float_field@@Base+0xb4>
   37cf0:	vmov.f32	s16, s0
   37cf4:	b	37d30 <flatcc_json_printer_float_field@@Base+0x68>
   37cf8:	ldr	ip, [r1, #4]
   37cfc:	ldrh	ip, [ip, r2]
   37d00:	cmp	ip, #0
   37d04:	beq	37ce4 <flatcc_json_printer_float_field@@Base+0x1c>
   37d08:	ldr	r2, [r1]
   37d0c:	adds	r2, r2, ip
   37d10:	beq	37ce4 <flatcc_json_printer_float_field@@Base+0x1c>
   37d14:	vldr	s16, [r2]
   37d18:	vcmp.f32	s0, s16
   37d1c:	vmrs	APSR_nzcv, fpscr
   37d20:	bne	37d30 <flatcc_json_printer_float_field@@Base+0x68>
   37d24:	ldrb	r2, [r0, #28]
   37d28:	cmp	r2, #0
   37d2c:	bne	37d7c <flatcc_json_printer_float_field@@Base+0xb4>
   37d30:	ldr	r2, [r1, #16]
   37d34:	mov	r4, r0
   37d38:	cmp	r2, #0
   37d3c:	add	r2, r2, #1
   37d40:	str	r2, [r1, #16]
   37d44:	ldrne	r2, [r0, #20]
   37d48:	movne	r1, #44	; 0x2c
   37d4c:	addne	ip, r2, #1
   37d50:	strne	ip, [r0, #20]
   37d54:	strbne	r1, [r2]
   37d58:	mov	r1, r3
   37d5c:	ldr	r2, [sp, #16]
   37d60:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   37d64:	ldr	r0, [r4, #20]
   37d68:	vcvt.f64.f32	d0, s16
   37d6c:	bl	34e20 <flatcc_json_parser_struct_as_root@@Base+0x1324>
   37d70:	ldr	r3, [r4, #20]
   37d74:	add	r0, r3, r0
   37d78:	str	r0, [r4, #20]
   37d7c:	vpop	{d8}
   37d80:	pop	{r4, pc}

00037d84 <flatcc_json_printer_double_field@@Base>:
   37d84:	add	r2, r2, #2
   37d88:	ldr	ip, [r1, #8]
   37d8c:	lsl	r2, r2, #1
   37d90:	cmp	r2, ip
   37d94:	push	{r4, lr}
   37d98:	vpush	{d8}
   37d9c:	blt	37db4 <flatcc_json_printer_double_field@@Base+0x30>
   37da0:	ldrb	r2, [r0, #29]
   37da4:	cmp	r2, #0
   37da8:	beq	37e38 <flatcc_json_printer_double_field@@Base+0xb4>
   37dac:	vmov.f64	d8, d0
   37db0:	b	37dec <flatcc_json_printer_double_field@@Base+0x68>
   37db4:	ldr	ip, [r1, #4]
   37db8:	ldrh	ip, [ip, r2]
   37dbc:	cmp	ip, #0
   37dc0:	beq	37da0 <flatcc_json_printer_double_field@@Base+0x1c>
   37dc4:	ldr	r2, [r1]
   37dc8:	adds	r2, r2, ip
   37dcc:	beq	37da0 <flatcc_json_printer_double_field@@Base+0x1c>
   37dd0:	vldr	d8, [r2]
   37dd4:	vcmp.f64	d0, d8
   37dd8:	vmrs	APSR_nzcv, fpscr
   37ddc:	bne	37dec <flatcc_json_printer_double_field@@Base+0x68>
   37de0:	ldrb	r2, [r0, #28]
   37de4:	cmp	r2, #0
   37de8:	bne	37e38 <flatcc_json_printer_double_field@@Base+0xb4>
   37dec:	ldr	r2, [r1, #16]
   37df0:	mov	r4, r0
   37df4:	cmp	r2, #0
   37df8:	add	r2, r2, #1
   37dfc:	str	r2, [r1, #16]
   37e00:	ldrne	r2, [r0, #20]
   37e04:	movne	r1, #44	; 0x2c
   37e08:	addne	ip, r2, #1
   37e0c:	strne	ip, [r0, #20]
   37e10:	strbne	r1, [r2]
   37e14:	mov	r1, r3
   37e18:	ldr	r2, [sp, #16]
   37e1c:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   37e20:	vmov.f64	d0, d8
   37e24:	ldr	r0, [r4, #20]
   37e28:	bl	34e20 <flatcc_json_parser_struct_as_root@@Base+0x1324>
   37e2c:	ldr	r3, [r4, #20]
   37e30:	add	r0, r3, r0
   37e34:	str	r0, [r4, #20]
   37e38:	vpop	{d8}
   37e3c:	pop	{r4, pc}

00037e40 <flatcc_json_printer_uint8_enum_field@@Base>:
   37e40:	add	r2, r2, #2
   37e44:	push	{r4, r5, r6, lr}
   37e48:	lsl	ip, r2, #1
   37e4c:	ldr	lr, [r1, #8]
   37e50:	ldr	r2, [sp, #16]
   37e54:	cmp	ip, lr
   37e58:	ldr	r5, [sp, #24]
   37e5c:	ldrb	lr, [sp, #20]
   37e60:	blt	37e78 <flatcc_json_printer_uint8_enum_field@@Base+0x38>
   37e64:	ldrb	ip, [r0, #29]
   37e68:	cmp	ip, #0
   37e6c:	popeq	{r4, r5, r6, pc}
   37e70:	mov	r6, lr
   37e74:	b	37ea0 <flatcc_json_printer_uint8_enum_field@@Base+0x60>
   37e78:	ldr	r4, [r1, #4]
   37e7c:	ldrh	ip, [r4, ip]
   37e80:	cmp	ip, #0
   37e84:	beq	37e64 <flatcc_json_printer_uint8_enum_field@@Base+0x24>
   37e88:	ldr	r4, [r1]
   37e8c:	cmn	r4, ip
   37e90:	beq	37e64 <flatcc_json_printer_uint8_enum_field@@Base+0x24>
   37e94:	ldrb	r6, [r4, ip]
   37e98:	cmp	lr, r6
   37e9c:	beq	37f0c <flatcc_json_printer_uint8_enum_field@@Base+0xcc>
   37ea0:	ldr	ip, [r1, #16]
   37ea4:	mov	r4, r0
   37ea8:	cmp	ip, #0
   37eac:	add	ip, ip, #1
   37eb0:	str	ip, [r1, #16]
   37eb4:	ldrne	r1, [r0, #20]
   37eb8:	movne	ip, #44	; 0x2c
   37ebc:	addne	lr, r1, #1
   37ec0:	strne	lr, [r0, #20]
   37ec4:	strbne	ip, [r1]
   37ec8:	mov	r1, r3
   37ecc:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   37ed0:	ldrb	r3, [r4, #27]
   37ed4:	cmp	r3, #0
   37ed8:	bne	37ef0 <flatcc_json_printer_uint8_enum_field@@Base+0xb0>
   37edc:	mov	r1, r6
   37ee0:	mov	r0, r4
   37ee4:	mov	r3, r5
   37ee8:	pop	{r4, r5, r6, lr}
   37eec:	bx	r3
   37ef0:	mov	r0, r6
   37ef4:	ldr	r1, [r4, #20]
   37ef8:	bl	3491c <flatcc_json_parser_struct_as_root@@Base+0xe20>
   37efc:	ldr	r3, [r4, #20]
   37f00:	add	r0, r3, r0
   37f04:	str	r0, [r4, #20]
   37f08:	pop	{r4, r5, r6, pc}
   37f0c:	ldrb	ip, [r0, #28]
   37f10:	cmp	ip, #0
   37f14:	beq	37ea0 <flatcc_json_printer_uint8_enum_field@@Base+0x60>
   37f18:	pop	{r4, r5, r6, pc}

00037f1c <flatcc_json_printer_uint16_enum_field@@Base>:
   37f1c:	add	r2, r2, #2
   37f20:	push	{r4, r5, r6, lr}
   37f24:	lsl	ip, r2, #1
   37f28:	ldr	lr, [r1, #8]
   37f2c:	ldr	r2, [sp, #16]
   37f30:	cmp	ip, lr
   37f34:	ldr	r5, [sp, #24]
   37f38:	ldrh	lr, [sp, #20]
   37f3c:	blt	37f54 <flatcc_json_printer_uint16_enum_field@@Base+0x38>
   37f40:	ldrb	ip, [r0, #29]
   37f44:	cmp	ip, #0
   37f48:	popeq	{r4, r5, r6, pc}
   37f4c:	mov	r6, lr
   37f50:	b	37f7c <flatcc_json_printer_uint16_enum_field@@Base+0x60>
   37f54:	ldr	r4, [r1, #4]
   37f58:	ldrh	ip, [r4, ip]
   37f5c:	cmp	ip, #0
   37f60:	beq	37f40 <flatcc_json_printer_uint16_enum_field@@Base+0x24>
   37f64:	ldr	r4, [r1]
   37f68:	cmn	r4, ip
   37f6c:	beq	37f40 <flatcc_json_printer_uint16_enum_field@@Base+0x24>
   37f70:	ldrh	r6, [r4, ip]
   37f74:	cmp	lr, r6
   37f78:	beq	37fe8 <flatcc_json_printer_uint16_enum_field@@Base+0xcc>
   37f7c:	ldr	ip, [r1, #16]
   37f80:	mov	r4, r0
   37f84:	cmp	ip, #0
   37f88:	add	ip, ip, #1
   37f8c:	str	ip, [r1, #16]
   37f90:	ldrne	r1, [r0, #20]
   37f94:	movne	ip, #44	; 0x2c
   37f98:	addne	lr, r1, #1
   37f9c:	strne	lr, [r0, #20]
   37fa0:	strbne	ip, [r1]
   37fa4:	mov	r1, r3
   37fa8:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   37fac:	ldrb	r3, [r4, #27]
   37fb0:	cmp	r3, #0
   37fb4:	bne	37fcc <flatcc_json_printer_uint16_enum_field@@Base+0xb0>
   37fb8:	mov	r1, r6
   37fbc:	mov	r0, r4
   37fc0:	mov	r3, r5
   37fc4:	pop	{r4, r5, r6, lr}
   37fc8:	bx	r3
   37fcc:	mov	r0, r6
   37fd0:	ldr	r1, [r4, #20]
   37fd4:	bl	33bd0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   37fd8:	ldr	r3, [r4, #20]
   37fdc:	add	r0, r3, r0
   37fe0:	str	r0, [r4, #20]
   37fe4:	pop	{r4, r5, r6, pc}
   37fe8:	ldrb	ip, [r0, #28]
   37fec:	cmp	ip, #0
   37ff0:	beq	37f7c <flatcc_json_printer_uint16_enum_field@@Base+0x60>
   37ff4:	pop	{r4, r5, r6, pc}

00037ff8 <flatcc_json_printer_uint32_enum_field@@Base>:
   37ff8:	add	r2, r2, #2
   37ffc:	push	{r4, r5, r6, lr}
   38000:	lsl	ip, r2, #1
   38004:	ldr	lr, [r1, #8]
   38008:	ldr	r2, [sp, #16]
   3800c:	cmp	ip, lr
   38010:	ldr	r5, [sp, #24]
   38014:	ldr	lr, [sp, #20]
   38018:	blt	38030 <flatcc_json_printer_uint32_enum_field@@Base+0x38>
   3801c:	ldrb	ip, [r0, #29]
   38020:	cmp	ip, #0
   38024:	popeq	{r4, r5, r6, pc}
   38028:	mov	r6, lr
   3802c:	b	38058 <flatcc_json_printer_uint32_enum_field@@Base+0x60>
   38030:	ldr	r4, [r1, #4]
   38034:	ldrh	ip, [r4, ip]
   38038:	cmp	ip, #0
   3803c:	beq	3801c <flatcc_json_printer_uint32_enum_field@@Base+0x24>
   38040:	ldr	r4, [r1]
   38044:	cmn	r4, ip
   38048:	beq	3801c <flatcc_json_printer_uint32_enum_field@@Base+0x24>
   3804c:	ldr	r6, [r4, ip]
   38050:	cmp	lr, r6
   38054:	beq	380c4 <flatcc_json_printer_uint32_enum_field@@Base+0xcc>
   38058:	ldr	ip, [r1, #16]
   3805c:	mov	r4, r0
   38060:	cmp	ip, #0
   38064:	add	ip, ip, #1
   38068:	str	ip, [r1, #16]
   3806c:	ldrne	r1, [r0, #20]
   38070:	movne	ip, #44	; 0x2c
   38074:	addne	lr, r1, #1
   38078:	strne	lr, [r0, #20]
   3807c:	strbne	ip, [r1]
   38080:	mov	r1, r3
   38084:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   38088:	ldrb	r3, [r4, #27]
   3808c:	cmp	r3, #0
   38090:	bne	380a8 <flatcc_json_printer_uint32_enum_field@@Base+0xb0>
   38094:	mov	r1, r6
   38098:	mov	r0, r4
   3809c:	mov	r3, r5
   380a0:	pop	{r4, r5, r6, lr}
   380a4:	bx	r3
   380a8:	mov	r0, r6
   380ac:	ldr	r1, [r4, #20]
   380b0:	bl	33d38 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   380b4:	ldr	r3, [r4, #20]
   380b8:	add	r0, r3, r0
   380bc:	str	r0, [r4, #20]
   380c0:	pop	{r4, r5, r6, pc}
   380c4:	ldrb	ip, [r0, #28]
   380c8:	cmp	ip, #0
   380cc:	beq	38058 <flatcc_json_printer_uint32_enum_field@@Base+0x60>
   380d0:	pop	{r4, r5, r6, pc}

000380d4 <flatcc_json_printer_uint64_enum_field@@Base>:
   380d4:	add	r2, r2, #2
   380d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   380dc:	lsl	ip, r2, #1
   380e0:	ldr	lr, [r1, #8]
   380e4:	ldr	r2, [sp, #32]
   380e8:	cmp	ip, lr
   380ec:	ldrd	r8, [sp, #40]	; 0x28
   380f0:	ldr	r5, [sp, #48]	; 0x30
   380f4:	blt	38110 <flatcc_json_printer_uint64_enum_field@@Base+0x3c>
   380f8:	ldrb	ip, [r0, #29]
   380fc:	cmp	ip, #0
   38100:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   38104:	mov	r6, r8
   38108:	mov	r7, r9
   3810c:	b	3813c <flatcc_json_printer_uint64_enum_field@@Base+0x68>
   38110:	ldr	lr, [r1, #4]
   38114:	ldrh	ip, [lr, ip]
   38118:	cmp	ip, #0
   3811c:	beq	380f8 <flatcc_json_printer_uint64_enum_field@@Base+0x24>
   38120:	ldr	lr, [r1]
   38124:	cmn	lr, ip
   38128:	beq	380f8 <flatcc_json_printer_uint64_enum_field@@Base+0x24>
   3812c:	ldrd	r6, [lr, ip]
   38130:	cmp	r9, r7
   38134:	cmpeq	r8, r6
   38138:	beq	381b0 <flatcc_json_printer_uint64_enum_field@@Base+0xdc>
   3813c:	ldr	ip, [r1, #16]
   38140:	mov	r4, r0
   38144:	cmp	ip, #0
   38148:	add	ip, ip, #1
   3814c:	str	ip, [r1, #16]
   38150:	ldrne	r1, [r0, #20]
   38154:	movne	ip, #44	; 0x2c
   38158:	addne	lr, r1, #1
   3815c:	strne	lr, [r0, #20]
   38160:	strbne	ip, [r1]
   38164:	mov	r1, r3
   38168:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3816c:	ldrb	r3, [r4, #27]
   38170:	cmp	r3, #0
   38174:	bne	38190 <flatcc_json_printer_uint64_enum_field@@Base+0xbc>
   38178:	mov	r2, r6
   3817c:	mov	r3, r7
   38180:	mov	r0, r4
   38184:	mov	r1, r5
   38188:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3818c:	bx	r1
   38190:	mov	r0, r6
   38194:	mov	r1, r7
   38198:	ldr	r2, [r4, #20]
   3819c:	bl	34060 <flatcc_json_parser_struct_as_root@@Base+0x564>
   381a0:	ldr	r3, [r4, #20]
   381a4:	add	r0, r3, r0
   381a8:	str	r0, [r4, #20]
   381ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   381b0:	ldrb	ip, [r0, #28]
   381b4:	cmp	ip, #0
   381b8:	beq	3813c <flatcc_json_printer_uint64_enum_field@@Base+0x68>
   381bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000381c0 <flatcc_json_printer_int8_enum_field@@Base>:
   381c0:	add	r2, r2, #2
   381c4:	push	{r4, r5, r6, lr}
   381c8:	lsl	ip, r2, #1
   381cc:	ldr	lr, [r1, #8]
   381d0:	ldr	r2, [sp, #16]
   381d4:	cmp	ip, lr
   381d8:	ldr	r6, [sp, #24]
   381dc:	ldrsb	lr, [sp, #20]
   381e0:	blt	381f8 <flatcc_json_printer_int8_enum_field@@Base+0x38>
   381e4:	ldrb	ip, [r0, #29]
   381e8:	cmp	ip, #0
   381ec:	popeq	{r4, r5, r6, pc}
   381f0:	mov	r4, lr
   381f4:	b	38220 <flatcc_json_printer_int8_enum_field@@Base+0x60>
   381f8:	ldr	r4, [r1, #4]
   381fc:	ldrh	ip, [r4, ip]
   38200:	cmp	ip, #0
   38204:	beq	381e4 <flatcc_json_printer_int8_enum_field@@Base+0x24>
   38208:	ldr	r4, [r1]
   3820c:	cmn	r4, ip
   38210:	beq	381e4 <flatcc_json_printer_int8_enum_field@@Base+0x24>
   38214:	ldrsb	r4, [r4, ip]
   38218:	cmp	lr, r4
   3821c:	beq	382f8 <flatcc_json_printer_int8_enum_field@@Base+0x138>
   38220:	ldr	ip, [r1, #16]
   38224:	mov	r5, r0
   38228:	cmp	ip, #0
   3822c:	add	ip, ip, #1
   38230:	str	ip, [r1, #16]
   38234:	ldrne	r1, [r0, #20]
   38238:	movne	ip, #44	; 0x2c
   3823c:	addne	lr, r1, #1
   38240:	strne	lr, [r0, #20]
   38244:	strbne	ip, [r1]
   38248:	mov	r1, r3
   3824c:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   38250:	ldrb	r3, [r5, #27]
   38254:	cmp	r3, #0
   38258:	beq	382e4 <flatcc_json_printer_int8_enum_field@@Base+0x124>
   3825c:	cmp	r4, #0
   38260:	lsr	r1, r4, #31
   38264:	rsblt	r4, r4, #0
   38268:	ldr	r3, [r5, #20]
   3826c:	sxtblt	r4, r4
   38270:	movlt	r2, #45	; 0x2d
   38274:	uxtb	r4, r4
   38278:	strblt	r2, [r3]
   3827c:	addlt	r3, r3, #1
   38280:	cmp	r4, #99	; 0x63
   38284:	bls	38308 <flatcc_json_printer_int8_enum_field@@Base+0x148>
   38288:	ldr	r2, [pc, #196]	; 38354 <flatcc_json_printer_int8_enum_field@@Base+0x194>
   3828c:	mov	ip, #100	; 0x64
   38290:	ldr	r0, [pc, #192]	; 38358 <flatcc_json_printer_int8_enum_field@@Base+0x198>
   38294:	umull	lr, r2, r2, r4
   38298:	mov	lr, #0
   3829c:	lsr	r2, r2, #5
   382a0:	strb	lr, [r3, #3]
   382a4:	mul	r2, ip, r2
   382a8:	mov	ip, #49	; 0x31
   382ac:	sub	r4, r4, r2
   382b0:	mov	r2, #3
   382b4:	uxtb	r4, r4
   382b8:	ldrb	lr, [r0, r4, lsl #1]
   382bc:	add	r4, r0, r4, lsl #1
   382c0:	strb	lr, [r3, #1]
   382c4:	ldrb	r0, [r4, #1]
   382c8:	strb	ip, [r3]
   382cc:	strb	r0, [r3, #2]
   382d0:	ldr	r3, [r5, #20]
   382d4:	add	r2, r1, r2
   382d8:	add	r3, r3, r2
   382dc:	str	r3, [r5, #20]
   382e0:	pop	{r4, r5, r6, pc}
   382e4:	mov	r1, r4
   382e8:	mov	r0, r5
   382ec:	mov	r3, r6
   382f0:	pop	{r4, r5, r6, lr}
   382f4:	bx	r3
   382f8:	ldrb	ip, [r0, #28]
   382fc:	cmp	ip, #0
   38300:	beq	38220 <flatcc_json_printer_int8_enum_field@@Base+0x60>
   38304:	pop	{r4, r5, r6, pc}
   38308:	cmp	r4, #9
   3830c:	bls	3833c <flatcc_json_printer_int8_enum_field@@Base+0x17c>
   38310:	ldr	r2, [pc, #64]	; 38358 <flatcc_json_printer_int8_enum_field@@Base+0x198>
   38314:	sxth	r4, r4
   38318:	mov	r0, #0
   3831c:	strb	r0, [r3, #2]
   38320:	ldrb	r0, [r2, r4, lsl #1]
   38324:	add	r4, r2, r4, lsl #1
   38328:	mov	r2, #2
   3832c:	strb	r0, [r3]
   38330:	ldrb	r0, [r4, #1]
   38334:	strb	r0, [r3, #1]
   38338:	b	382d0 <flatcc_json_printer_int8_enum_field@@Base+0x110>
   3833c:	add	r4, r4, #48	; 0x30
   38340:	mov	r0, #0
   38344:	mov	r2, #1
   38348:	strb	r4, [r3]
   3834c:	strb	r0, [r3, #1]
   38350:	b	382d0 <flatcc_json_printer_int8_enum_field@@Base+0x110>
   38354:	mvnpl	r8, pc, lsl r5
   38358:	andeq	r6, r4, r0, lsl #9

0003835c <flatcc_json_printer_int16_enum_field@@Base>:
   3835c:	add	r2, r2, #2
   38360:	push	{r4, r5, r6, lr}
   38364:	lsl	ip, r2, #1
   38368:	ldr	lr, [r1, #8]
   3836c:	ldr	r2, [sp, #16]
   38370:	cmp	ip, lr
   38374:	ldr	r5, [sp, #24]
   38378:	ldrsh	lr, [sp, #20]
   3837c:	blt	38394 <flatcc_json_printer_int16_enum_field@@Base+0x38>
   38380:	ldrb	ip, [r0, #29]
   38384:	cmp	ip, #0
   38388:	popeq	{r4, r5, r6, pc}
   3838c:	mov	r6, lr
   38390:	b	383bc <flatcc_json_printer_int16_enum_field@@Base+0x60>
   38394:	ldr	r4, [r1, #4]
   38398:	ldrh	ip, [r4, ip]
   3839c:	cmp	ip, #0
   383a0:	beq	38380 <flatcc_json_printer_int16_enum_field@@Base+0x24>
   383a4:	ldr	r4, [r1]
   383a8:	cmn	r4, ip
   383ac:	beq	38380 <flatcc_json_printer_int16_enum_field@@Base+0x24>
   383b0:	ldrsh	r6, [r4, ip]
   383b4:	cmp	lr, r6
   383b8:	beq	38448 <flatcc_json_printer_int16_enum_field@@Base+0xec>
   383bc:	ldr	ip, [r1, #16]
   383c0:	mov	r4, r0
   383c4:	cmp	ip, #0
   383c8:	add	ip, ip, #1
   383cc:	str	ip, [r1, #16]
   383d0:	ldrne	r1, [r0, #20]
   383d4:	movne	ip, #44	; 0x2c
   383d8:	addne	lr, r1, #1
   383dc:	strne	lr, [r0, #20]
   383e0:	strbne	ip, [r1]
   383e4:	mov	r1, r3
   383e8:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   383ec:	ldrb	r3, [r4, #27]
   383f0:	cmp	r3, #0
   383f4:	beq	38434 <flatcc_json_printer_int16_enum_field@@Base+0xd8>
   383f8:	cmp	r6, #0
   383fc:	lsr	r5, r6, #31
   38400:	rsblt	r6, r6, #0
   38404:	ldr	r1, [r4, #20]
   38408:	sxthlt	r6, r6
   3840c:	movlt	r3, #45	; 0x2d
   38410:	strblt	r3, [r1]
   38414:	uxth	r0, r6
   38418:	addlt	r1, r1, #1
   3841c:	bl	33bd0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   38420:	ldr	r3, [r4, #20]
   38424:	add	r0, r5, r0
   38428:	add	r3, r3, r0
   3842c:	str	r3, [r4, #20]
   38430:	pop	{r4, r5, r6, pc}
   38434:	mov	r1, r6
   38438:	mov	r0, r4
   3843c:	mov	r3, r5
   38440:	pop	{r4, r5, r6, lr}
   38444:	bx	r3
   38448:	ldrb	ip, [r0, #28]
   3844c:	cmp	ip, #0
   38450:	beq	383bc <flatcc_json_printer_int16_enum_field@@Base+0x60>
   38454:	pop	{r4, r5, r6, pc}

00038458 <flatcc_json_printer_int32_enum_field@@Base>:
   38458:	add	r2, r2, #2
   3845c:	push	{r4, r5, r6, lr}
   38460:	lsl	ip, r2, #1
   38464:	ldr	lr, [r1, #8]
   38468:	ldr	r2, [sp, #16]
   3846c:	cmp	ip, lr
   38470:	ldr	r5, [sp, #24]
   38474:	ldr	lr, [sp, #20]
   38478:	blt	38490 <flatcc_json_printer_int32_enum_field@@Base+0x38>
   3847c:	ldrb	ip, [r0, #29]
   38480:	cmp	ip, #0
   38484:	popeq	{r4, r5, r6, pc}
   38488:	mov	r6, lr
   3848c:	b	384b8 <flatcc_json_printer_int32_enum_field@@Base+0x60>
   38490:	ldr	r4, [r1, #4]
   38494:	ldrh	ip, [r4, ip]
   38498:	cmp	ip, #0
   3849c:	beq	3847c <flatcc_json_printer_int32_enum_field@@Base+0x24>
   384a0:	ldr	r4, [r1]
   384a4:	cmn	r4, ip
   384a8:	beq	3847c <flatcc_json_printer_int32_enum_field@@Base+0x24>
   384ac:	ldr	r6, [r4, ip]
   384b0:	cmp	lr, r6
   384b4:	beq	38540 <flatcc_json_printer_int32_enum_field@@Base+0xe8>
   384b8:	ldr	ip, [r1, #16]
   384bc:	mov	r4, r0
   384c0:	cmp	ip, #0
   384c4:	add	ip, ip, #1
   384c8:	str	ip, [r1, #16]
   384cc:	ldrne	r1, [r0, #20]
   384d0:	movne	ip, #44	; 0x2c
   384d4:	addne	lr, r1, #1
   384d8:	strne	lr, [r0, #20]
   384dc:	strbne	ip, [r1]
   384e0:	mov	r1, r3
   384e4:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   384e8:	ldrb	r3, [r4, #27]
   384ec:	cmp	r3, #0
   384f0:	beq	3852c <flatcc_json_printer_int32_enum_field@@Base+0xd4>
   384f4:	ldr	r1, [r4, #20]
   384f8:	cmp	r6, #0
   384fc:	movlt	r3, #45	; 0x2d
   38500:	lsr	r5, r6, #31
   38504:	rsblt	r6, r6, #0
   38508:	strblt	r3, [r1]
   3850c:	mov	r0, r6
   38510:	addlt	r1, r1, #1
   38514:	bl	33d38 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   38518:	ldr	r3, [r4, #20]
   3851c:	add	r0, r5, r0
   38520:	add	r3, r3, r0
   38524:	str	r3, [r4, #20]
   38528:	pop	{r4, r5, r6, pc}
   3852c:	mov	r1, r6
   38530:	mov	r0, r4
   38534:	mov	r3, r5
   38538:	pop	{r4, r5, r6, lr}
   3853c:	bx	r3
   38540:	ldrb	ip, [r0, #28]
   38544:	cmp	ip, #0
   38548:	beq	384b8 <flatcc_json_printer_int32_enum_field@@Base+0x60>
   3854c:	pop	{r4, r5, r6, pc}

00038550 <flatcc_json_printer_int64_enum_field@@Base>:
   38550:	add	r2, r2, #2
   38554:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   38558:	lsl	ip, r2, #1
   3855c:	ldr	lr, [r1, #8]
   38560:	ldr	r2, [sp, #32]
   38564:	cmp	ip, lr
   38568:	ldrd	r8, [sp, #40]	; 0x28
   3856c:	ldr	r5, [sp, #48]	; 0x30
   38570:	blt	3858c <flatcc_json_printer_int64_enum_field@@Base+0x3c>
   38574:	ldrb	ip, [r0, #29]
   38578:	cmp	ip, #0
   3857c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   38580:	mov	r6, r8
   38584:	mov	r7, r9
   38588:	b	385b8 <flatcc_json_printer_int64_enum_field@@Base+0x68>
   3858c:	ldr	lr, [r1, #4]
   38590:	ldrh	ip, [lr, ip]
   38594:	cmp	ip, #0
   38598:	beq	38574 <flatcc_json_printer_int64_enum_field@@Base+0x24>
   3859c:	ldr	lr, [r1]
   385a0:	cmn	lr, ip
   385a4:	beq	38574 <flatcc_json_printer_int64_enum_field@@Base+0x24>
   385a8:	ldrd	r6, [lr, ip]
   385ac:	cmp	r9, r7
   385b0:	cmpeq	r8, r6
   385b4:	beq	38654 <flatcc_json_printer_int64_enum_field@@Base+0x104>
   385b8:	ldr	ip, [r1, #16]
   385bc:	mov	r4, r0
   385c0:	cmp	ip, #0
   385c4:	add	ip, ip, #1
   385c8:	str	ip, [r1, #16]
   385cc:	ldrne	r1, [r0, #20]
   385d0:	movne	ip, #44	; 0x2c
   385d4:	addne	lr, r1, #1
   385d8:	strne	lr, [r0, #20]
   385dc:	strbne	ip, [r1]
   385e0:	mov	r1, r3
   385e4:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   385e8:	ldrb	r3, [r4, #27]
   385ec:	cmp	r3, #0
   385f0:	beq	3863c <flatcc_json_printer_int64_enum_field@@Base+0xec>
   385f4:	cmp	r6, #0
   385f8:	sbcs	r3, r7, #0
   385fc:	ldr	r2, [r4, #20]
   38600:	lsr	r5, r7, #31
   38604:	bge	3861c <flatcc_json_printer_int64_enum_field@@Base+0xcc>
   38608:	mov	r3, #45	; 0x2d
   3860c:	rsbs	r6, r6, #0
   38610:	strb	r3, [r2]
   38614:	rsc	r7, r7, #0
   38618:	add	r2, r2, #1
   3861c:	mov	r0, r6
   38620:	mov	r1, r7
   38624:	bl	34060 <flatcc_json_parser_struct_as_root@@Base+0x564>
   38628:	ldr	r3, [r4, #20]
   3862c:	add	r0, r5, r0
   38630:	add	r3, r3, r0
   38634:	str	r3, [r4, #20]
   38638:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3863c:	mov	r2, r6
   38640:	mov	r3, r7
   38644:	mov	r0, r4
   38648:	mov	r1, r5
   3864c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   38650:	bx	r1
   38654:	ldrb	ip, [r0, #28]
   38658:	cmp	ip, #0
   3865c:	beq	385b8 <flatcc_json_printer_int64_enum_field@@Base+0x68>
   38660:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00038664 <flatcc_json_printer_bool_enum_field@@Base>:
   38664:	add	r2, r2, #2
   38668:	push	{r4, r5, r6, lr}
   3866c:	lsl	ip, r2, #1
   38670:	ldr	lr, [r1, #8]
   38674:	ldr	r2, [sp, #16]
   38678:	cmp	ip, lr
   3867c:	ldr	r5, [sp, #24]
   38680:	ldrb	lr, [sp, #20]
   38684:	blt	3869c <flatcc_json_printer_bool_enum_field@@Base+0x38>
   38688:	ldrb	ip, [r0, #29]
   3868c:	cmp	ip, #0
   38690:	popeq	{r4, r5, r6, pc}
   38694:	mov	r6, lr
   38698:	b	386c4 <flatcc_json_printer_bool_enum_field@@Base+0x60>
   3869c:	ldr	r4, [r1, #4]
   386a0:	ldrh	ip, [r4, ip]
   386a4:	cmp	ip, #0
   386a8:	beq	38688 <flatcc_json_printer_bool_enum_field@@Base+0x24>
   386ac:	ldr	r4, [r1]
   386b0:	cmn	r4, ip
   386b4:	beq	38688 <flatcc_json_printer_bool_enum_field@@Base+0x24>
   386b8:	ldrb	r6, [r4, ip]
   386bc:	cmp	lr, r6
   386c0:	beq	3874c <flatcc_json_printer_bool_enum_field@@Base+0xe8>
   386c4:	ldr	ip, [r1, #16]
   386c8:	mov	r4, r0
   386cc:	cmp	ip, #0
   386d0:	add	ip, ip, #1
   386d4:	str	ip, [r1, #16]
   386d8:	ldrne	r1, [r0, #20]
   386dc:	movne	ip, #44	; 0x2c
   386e0:	addne	lr, r1, #1
   386e4:	strne	lr, [r0, #20]
   386e8:	strbne	ip, [r1]
   386ec:	mov	r1, r3
   386f0:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   386f4:	ldrb	r3, [r4, #27]
   386f8:	cmp	r3, #0
   386fc:	bne	38714 <flatcc_json_printer_bool_enum_field@@Base+0xb0>
   38700:	mov	r1, r6
   38704:	mov	r0, r4
   38708:	mov	r3, r5
   3870c:	pop	{r4, r5, r6, lr}
   38710:	bx	r3
   38714:	cmp	r6, #0
   38718:	ldr	r3, [pc, #84]	; 38774 <flatcc_json_printer_bool_enum_field@@Base+0x110>
   3871c:	ldr	r2, [r4, #20]
   38720:	bne	3875c <flatcc_json_printer_bool_enum_field@@Base+0xf8>
   38724:	add	ip, r3, #1792	; 0x700
   38728:	ldr	r0, [r3, #1792]	; 0x700
   3872c:	ldrh	r3, [ip, #4]
   38730:	mov	r1, #5
   38734:	str	r0, [r2]
   38738:	strh	r3, [r2, #4]
   3873c:	ldr	r3, [r4, #20]
   38740:	add	r3, r3, r1
   38744:	str	r3, [r4, #20]
   38748:	pop	{r4, r5, r6, pc}
   3874c:	ldrb	ip, [r0, #28]
   38750:	cmp	ip, #0
   38754:	beq	386c4 <flatcc_json_printer_bool_enum_field@@Base+0x60>
   38758:	pop	{r4, r5, r6, pc}
   3875c:	ldrb	ip, [r3, #1788]	; 0x6fc
   38760:	ldr	r0, [r3, #1784]	; 0x6f8
   38764:	mov	r1, #4
   38768:	strb	ip, [r2, #4]
   3876c:	str	r0, [r2]
   38770:	b	3873c <flatcc_json_printer_bool_enum_field@@Base+0xd8>
   38774:	andeq	r6, r4, r0, lsl #9

00038778 <flatcc_json_printer_uint8_struct_field@@Base>:
   38778:	cmp	r1, #0
   3877c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38780:	mov	r4, r0
   38784:	ldrb	r8, [r2, r3]
   38788:	ldrne	r3, [r0, #20]
   3878c:	movne	r2, #44	; 0x2c
   38790:	addne	r1, r3, #1
   38794:	strne	r1, [r0, #20]
   38798:	strbne	r2, [r3]
   3879c:	ldrb	r1, [r0, #25]
   387a0:	ldr	r9, [sp, #44]	; 0x2c
   387a4:	ldr	r6, [sp, #40]	; 0x28
   387a8:	cmp	r1, #0
   387ac:	mov	r7, r9
   387b0:	bne	38974 <flatcc_json_printer_uint8_struct_field@@Base+0x1fc>
   387b4:	ldr	r5, [r0, #20]
   387b8:	ldr	r3, [r0, #16]
   387bc:	cmp	r5, r3
   387c0:	bcs	38914 <flatcc_json_printer_uint8_struct_field@@Base+0x19c>
   387c4:	mov	r3, #34	; 0x22
   387c8:	strb	r3, [r5]
   387cc:	ldrb	r3, [r4, #26]
   387d0:	ldr	r0, [r4, #20]
   387d4:	ldr	r5, [r4, #16]
   387d8:	cmp	r3, #0
   387dc:	addeq	r0, r0, #1
   387e0:	add	r3, r0, r9
   387e4:	cmp	r5, r3
   387e8:	str	r0, [r4, #20]
   387ec:	bhi	38924 <flatcc_json_printer_uint8_struct_field@@Base+0x1ac>
   387f0:	cmp	r0, r5
   387f4:	bcs	38a20 <flatcc_json_printer_uint8_struct_field@@Base+0x2a8>
   387f8:	sub	r5, r5, r0
   387fc:	cmp	r9, r5
   38800:	bls	3884c <flatcc_json_printer_uint8_struct_field@@Base+0xd4>
   38804:	mov	r9, #0
   38808:	mov	r2, r5
   3880c:	mov	r1, r6
   38810:	bl	1454c <memcpy@plt>
   38814:	ldr	r3, [r4, #20]
   38818:	mov	r0, r4
   3881c:	add	r3, r3, r5
   38820:	str	r3, [r4, #20]
   38824:	ldr	r2, [r4, #44]	; 0x2c
   38828:	mov	r1, r9
   3882c:	blx	r2
   38830:	ldr	r0, [r4, #20]
   38834:	ldr	r3, [r4, #16]
   38838:	sub	r7, r7, r5
   3883c:	add	r6, r6, r5
   38840:	sub	r5, r3, r0
   38844:	cmp	r7, r5
   38848:	bhi	38808 <flatcc_json_printer_uint8_struct_field@@Base+0x90>
   3884c:	mov	r1, r6
   38850:	mov	r2, r7
   38854:	bl	1454c <memcpy@plt>
   38858:	ldr	r9, [r4, #20]
   3885c:	add	r9, r9, r7
   38860:	str	r9, [r4, #20]
   38864:	mov	r3, #34	; 0x22
   38868:	strb	r3, [r9]
   3886c:	ldr	r1, [r4, #20]
   38870:	ldrb	r3, [r4, #26]
   38874:	clz	r3, r3
   38878:	lsr	r3, r3, #5
   3887c:	add	r2, r1, r3
   38880:	add	r2, r2, #1
   38884:	mov	r0, #58	; 0x3a
   38888:	str	r2, [r4, #20]
   3888c:	strb	r0, [r1, r3]
   38890:	ldr	r3, [r4, #20]
   38894:	mov	r2, #32
   38898:	strb	r2, [r3]
   3889c:	ldrb	r1, [r4, #25]
   388a0:	ldr	ip, [r4, #20]
   388a4:	adds	r1, r1, #0
   388a8:	movne	r1, #1
   388ac:	add	r0, ip, r1
   388b0:	cmp	r8, #99	; 0x63
   388b4:	str	r0, [r4, #20]
   388b8:	bls	38940 <flatcc_json_printer_uint8_struct_field@@Base+0x1c8>
   388bc:	ldr	r3, [pc, #428]	; 38a70 <flatcc_json_printer_uint8_struct_field@@Base+0x2f8>
   388c0:	mov	r2, #100	; 0x64
   388c4:	ldr	lr, [pc, #424]	; 38a74 <flatcc_json_printer_uint8_struct_field@@Base+0x2fc>
   388c8:	umull	r5, r3, r3, r8
   388cc:	mov	r5, #0
   388d0:	lsr	r3, r3, #5
   388d4:	strb	r5, [r0, #3]
   388d8:	mul	r2, r2, r3
   388dc:	add	r3, r3, #48	; 0x30
   388e0:	sub	r8, r8, r2
   388e4:	mov	r2, #3
   388e8:	uxtb	r8, r8
   388ec:	ldrb	r5, [lr, r8, lsl #1]
   388f0:	add	r8, lr, r8, lsl #1
   388f4:	strb	r5, [r0, #1]
   388f8:	ldrb	lr, [r8, #1]
   388fc:	strb	lr, [r0, #2]
   38900:	strb	r3, [ip, r1]
   38904:	ldr	r3, [r4, #20]
   38908:	add	r3, r3, r2
   3890c:	str	r3, [r4, #20]
   38910:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38914:	ldr	r3, [r0, #44]	; 0x2c
   38918:	blx	r3
   3891c:	ldr	r5, [r4, #20]
   38920:	b	387c4 <flatcc_json_printer_uint8_struct_field@@Base+0x4c>
   38924:	mov	r2, r9
   38928:	mov	r1, r6
   3892c:	bl	1454c <memcpy@plt>
   38930:	ldr	r7, [r4, #20]
   38934:	add	r9, r7, r9
   38938:	str	r9, [r4, #20]
   3893c:	b	38864 <flatcc_json_printer_uint8_struct_field@@Base+0xec>
   38940:	cmp	r8, #9
   38944:	bls	38a3c <flatcc_json_printer_uint8_struct_field@@Base+0x2c4>
   38948:	ldr	r3, [pc, #292]	; 38a74 <flatcc_json_printer_uint8_struct_field@@Base+0x2fc>
   3894c:	sxth	r8, r8
   38950:	mov	r2, #0
   38954:	strb	r2, [r0, #2]
   38958:	ldrb	lr, [r3, r8, lsl #1]
   3895c:	add	r3, r3, r8, lsl #1
   38960:	mov	r2, #2
   38964:	strb	lr, [ip, r1]
   38968:	ldrb	r3, [r3, #1]
   3896c:	strb	r3, [r0, #1]
   38970:	b	38904 <flatcc_json_printer_uint8_struct_field@@Base+0x18c>
   38974:	ldr	r3, [r0, #20]
   38978:	mov	r2, #10
   3897c:	add	r1, r3, #1
   38980:	str	r1, [r0, #20]
   38984:	strb	r2, [r3]
   38988:	ldrb	r2, [r0, #25]
   3898c:	ldr	r5, [r0, #32]
   38990:	ldr	r0, [r0, #20]
   38994:	ldr	r3, [r4, #16]
   38998:	mul	r5, r5, r2
   3899c:	add	r2, r0, r5
   389a0:	cmp	r3, r2
   389a4:	bcc	389c4 <flatcc_json_printer_uint8_struct_field@@Base+0x24c>
   389a8:	mov	r2, r5
   389ac:	mov	r1, #32
   389b0:	bl	145c4 <memset@plt>
   389b4:	ldr	r3, [r4, #20]
   389b8:	add	r5, r3, r5
   389bc:	str	r5, [r4, #20]
   389c0:	b	387c4 <flatcc_json_printer_uint8_struct_field@@Base+0x4c>
   389c4:	cmp	r0, r3
   389c8:	bcs	38a54 <flatcc_json_printer_uint8_struct_field@@Base+0x2dc>
   389cc:	sub	sl, r3, r0
   389d0:	cmp	r5, sl
   389d4:	bls	389a8 <flatcc_json_printer_uint8_struct_field@@Base+0x230>
   389d8:	mov	fp, #32
   389dc:	mov	r2, sl
   389e0:	mov	r1, fp
   389e4:	bl	145c4 <memset@plt>
   389e8:	ldr	r1, [r4, #20]
   389ec:	ldr	r2, [r4, #44]	; 0x2c
   389f0:	add	r1, r1, sl
   389f4:	str	r1, [r4, #20]
   389f8:	mov	r0, r4
   389fc:	mov	r1, #0
   38a00:	blx	r2
   38a04:	ldr	r0, [r4, #20]
   38a08:	ldr	r2, [r4, #16]
   38a0c:	sub	r5, r5, sl
   38a10:	sub	sl, r2, r0
   38a14:	cmp	r5, sl
   38a18:	bhi	389dc <flatcc_json_printer_uint8_struct_field@@Base+0x264>
   38a1c:	b	389a8 <flatcc_json_printer_uint8_struct_field@@Base+0x230>
   38a20:	mov	r0, r4
   38a24:	ldr	r3, [r4, #44]	; 0x2c
   38a28:	mov	r1, #0
   38a2c:	blx	r3
   38a30:	ldr	r5, [r4, #16]
   38a34:	ldr	r0, [r4, #20]
   38a38:	b	387f8 <flatcc_json_printer_uint8_struct_field@@Base+0x80>
   38a3c:	add	r8, r8, #48	; 0x30
   38a40:	mov	r3, #0
   38a44:	strb	r3, [r0, #1]
   38a48:	mov	r2, #1
   38a4c:	strb	r8, [ip, r1]
   38a50:	b	38904 <flatcc_json_printer_uint8_struct_field@@Base+0x18c>
   38a54:	ldr	r3, [r4, #44]	; 0x2c
   38a58:	mov	r0, r4
   38a5c:	mov	r1, #0
   38a60:	blx	r3
   38a64:	ldr	r3, [r4, #16]
   38a68:	ldr	r0, [r4, #20]
   38a6c:	b	389cc <flatcc_json_printer_uint8_struct_field@@Base+0x254>
   38a70:	mvnpl	r8, pc, lsl r5
   38a74:	andeq	r6, r4, r0, lsl #9

00038a78 <flatcc_json_printer_uint16_struct_field@@Base>:
   38a78:	cmp	r1, #0
   38a7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   38a80:	mov	r4, r0
   38a84:	ldrh	r8, [r2, r3]
   38a88:	ldrne	r3, [r0, #20]
   38a8c:	movne	r2, #44	; 0x2c
   38a90:	addne	r1, r3, #1
   38a94:	strne	r1, [r0, #20]
   38a98:	strbne	r2, [r3]
   38a9c:	ldrb	r1, [r0, #25]
   38aa0:	ldr	r9, [sp, #36]	; 0x24
   38aa4:	ldr	r6, [sp, #32]
   38aa8:	cmp	r1, #0
   38aac:	mov	r7, r9
   38ab0:	ldr	r3, [r0, #20]
   38ab4:	bne	38bf4 <flatcc_json_printer_uint16_struct_field@@Base+0x17c>
   38ab8:	ldr	r2, [r0, #16]
   38abc:	cmp	r3, r2
   38ac0:	bcs	38bc8 <flatcc_json_printer_uint16_struct_field@@Base+0x150>
   38ac4:	mov	r2, #34	; 0x22
   38ac8:	strb	r2, [r3]
   38acc:	ldrb	r3, [r4, #26]
   38ad0:	ldr	r0, [r4, #20]
   38ad4:	ldr	r5, [r4, #16]
   38ad8:	cmp	r3, #0
   38adc:	addeq	r0, r0, #1
   38ae0:	add	r3, r0, r9
   38ae4:	cmp	r5, r3
   38ae8:	str	r0, [r4, #20]
   38aec:	bhi	38bd8 <flatcc_json_printer_uint16_struct_field@@Base+0x160>
   38af0:	cmp	r0, r5
   38af4:	bcs	38c10 <flatcc_json_printer_uint16_struct_field@@Base+0x198>
   38af8:	sub	r5, r5, r0
   38afc:	cmp	r9, r5
   38b00:	bls	38b4c <flatcc_json_printer_uint16_struct_field@@Base+0xd4>
   38b04:	mov	r9, #0
   38b08:	mov	r2, r5
   38b0c:	mov	r1, r6
   38b10:	bl	1454c <memcpy@plt>
   38b14:	ldr	r3, [r4, #20]
   38b18:	mov	r0, r4
   38b1c:	add	r3, r3, r5
   38b20:	str	r3, [r4, #20]
   38b24:	ldr	r2, [r4, #44]	; 0x2c
   38b28:	mov	r1, r9
   38b2c:	blx	r2
   38b30:	ldr	r0, [r4, #20]
   38b34:	ldr	r3, [r4, #16]
   38b38:	sub	r7, r7, r5
   38b3c:	add	r6, r6, r5
   38b40:	sub	r5, r3, r0
   38b44:	cmp	r7, r5
   38b48:	bhi	38b08 <flatcc_json_printer_uint16_struct_field@@Base+0x90>
   38b4c:	mov	r1, r6
   38b50:	mov	r2, r7
   38b54:	bl	1454c <memcpy@plt>
   38b58:	ldr	r9, [r4, #20]
   38b5c:	add	r9, r9, r7
   38b60:	str	r9, [r4, #20]
   38b64:	mov	r3, #34	; 0x22
   38b68:	strb	r3, [r9]
   38b6c:	ldr	r1, [r4, #20]
   38b70:	ldrb	r3, [r4, #26]
   38b74:	clz	r3, r3
   38b78:	lsr	r3, r3, #5
   38b7c:	add	r2, r1, r3
   38b80:	add	r2, r2, #1
   38b84:	mov	r0, #58	; 0x3a
   38b88:	str	r2, [r4, #20]
   38b8c:	strb	r0, [r1, r3]
   38b90:	ldr	r3, [r4, #20]
   38b94:	mov	r2, #32
   38b98:	mov	r0, r8
   38b9c:	strb	r2, [r3]
   38ba0:	ldrb	r3, [r4, #25]
   38ba4:	ldr	r1, [r4, #20]
   38ba8:	cmp	r3, #0
   38bac:	addne	r1, r1, #1
   38bb0:	str	r1, [r4, #20]
   38bb4:	bl	33bd0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   38bb8:	ldr	r3, [r4, #20]
   38bbc:	add	r0, r3, r0
   38bc0:	str	r0, [r4, #20]
   38bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   38bc8:	ldr	r3, [r0, #44]	; 0x2c
   38bcc:	blx	r3
   38bd0:	ldr	r3, [r4, #20]
   38bd4:	b	38ac4 <flatcc_json_printer_uint16_struct_field@@Base+0x4c>
   38bd8:	mov	r2, r9
   38bdc:	mov	r1, r6
   38be0:	bl	1454c <memcpy@plt>
   38be4:	ldr	r7, [r4, #20]
   38be8:	add	r9, r7, r9
   38bec:	str	r9, [r4, #20]
   38bf0:	b	38b64 <flatcc_json_printer_uint16_struct_field@@Base+0xec>
   38bf4:	add	r1, r3, #1
   38bf8:	mov	r2, #10
   38bfc:	str	r1, [r0, #20]
   38c00:	strb	r2, [r3]
   38c04:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   38c08:	ldr	r3, [r4, #20]
   38c0c:	b	38ac4 <flatcc_json_printer_uint16_struct_field@@Base+0x4c>
   38c10:	mov	r0, r4
   38c14:	ldr	r3, [r4, #44]	; 0x2c
   38c18:	mov	r1, #0
   38c1c:	blx	r3
   38c20:	ldr	r5, [r4, #16]
   38c24:	ldr	r0, [r4, #20]
   38c28:	b	38af8 <flatcc_json_printer_uint16_struct_field@@Base+0x80>

00038c2c <flatcc_json_printer_uint32_struct_field@@Base>:
   38c2c:	cmp	r1, #0
   38c30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   38c34:	mov	r4, r0
   38c38:	ldr	r8, [r2, r3]
   38c3c:	ldrne	r3, [r0, #20]
   38c40:	movne	r2, #44	; 0x2c
   38c44:	addne	r1, r3, #1
   38c48:	strne	r1, [r0, #20]
   38c4c:	strbne	r2, [r3]
   38c50:	ldrb	r1, [r0, #25]
   38c54:	ldr	r9, [sp, #36]	; 0x24
   38c58:	ldr	r6, [sp, #32]
   38c5c:	cmp	r1, #0
   38c60:	mov	r7, r9
   38c64:	ldr	r3, [r0, #20]
   38c68:	bne	38da8 <flatcc_json_printer_uint32_struct_field@@Base+0x17c>
   38c6c:	ldr	r2, [r0, #16]
   38c70:	cmp	r3, r2
   38c74:	bcs	38d7c <flatcc_json_printer_uint32_struct_field@@Base+0x150>
   38c78:	mov	r2, #34	; 0x22
   38c7c:	strb	r2, [r3]
   38c80:	ldrb	r3, [r4, #26]
   38c84:	ldr	r0, [r4, #20]
   38c88:	ldr	r5, [r4, #16]
   38c8c:	cmp	r3, #0
   38c90:	addeq	r0, r0, #1
   38c94:	add	r3, r0, r9
   38c98:	cmp	r5, r3
   38c9c:	str	r0, [r4, #20]
   38ca0:	bhi	38d8c <flatcc_json_printer_uint32_struct_field@@Base+0x160>
   38ca4:	cmp	r0, r5
   38ca8:	bcs	38dc4 <flatcc_json_printer_uint32_struct_field@@Base+0x198>
   38cac:	sub	r5, r5, r0
   38cb0:	cmp	r9, r5
   38cb4:	bls	38d00 <flatcc_json_printer_uint32_struct_field@@Base+0xd4>
   38cb8:	mov	r9, #0
   38cbc:	mov	r2, r5
   38cc0:	mov	r1, r6
   38cc4:	bl	1454c <memcpy@plt>
   38cc8:	ldr	r3, [r4, #20]
   38ccc:	mov	r0, r4
   38cd0:	add	r3, r3, r5
   38cd4:	str	r3, [r4, #20]
   38cd8:	ldr	r2, [r4, #44]	; 0x2c
   38cdc:	mov	r1, r9
   38ce0:	blx	r2
   38ce4:	ldr	r0, [r4, #20]
   38ce8:	ldr	r3, [r4, #16]
   38cec:	sub	r7, r7, r5
   38cf0:	add	r6, r6, r5
   38cf4:	sub	r5, r3, r0
   38cf8:	cmp	r7, r5
   38cfc:	bhi	38cbc <flatcc_json_printer_uint32_struct_field@@Base+0x90>
   38d00:	mov	r1, r6
   38d04:	mov	r2, r7
   38d08:	bl	1454c <memcpy@plt>
   38d0c:	ldr	r9, [r4, #20]
   38d10:	add	r9, r9, r7
   38d14:	str	r9, [r4, #20]
   38d18:	mov	r3, #34	; 0x22
   38d1c:	strb	r3, [r9]
   38d20:	ldr	r1, [r4, #20]
   38d24:	ldrb	r3, [r4, #26]
   38d28:	clz	r3, r3
   38d2c:	lsr	r3, r3, #5
   38d30:	add	r2, r1, r3
   38d34:	add	r2, r2, #1
   38d38:	mov	r0, #58	; 0x3a
   38d3c:	str	r2, [r4, #20]
   38d40:	strb	r0, [r1, r3]
   38d44:	ldr	r3, [r4, #20]
   38d48:	mov	r2, #32
   38d4c:	mov	r0, r8
   38d50:	strb	r2, [r3]
   38d54:	ldrb	r3, [r4, #25]
   38d58:	ldr	r1, [r4, #20]
   38d5c:	cmp	r3, #0
   38d60:	addne	r1, r1, #1
   38d64:	str	r1, [r4, #20]
   38d68:	bl	33d38 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   38d6c:	ldr	r3, [r4, #20]
   38d70:	add	r0, r3, r0
   38d74:	str	r0, [r4, #20]
   38d78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   38d7c:	ldr	r3, [r0, #44]	; 0x2c
   38d80:	blx	r3
   38d84:	ldr	r3, [r4, #20]
   38d88:	b	38c78 <flatcc_json_printer_uint32_struct_field@@Base+0x4c>
   38d8c:	mov	r2, r9
   38d90:	mov	r1, r6
   38d94:	bl	1454c <memcpy@plt>
   38d98:	ldr	r7, [r4, #20]
   38d9c:	add	r9, r7, r9
   38da0:	str	r9, [r4, #20]
   38da4:	b	38d18 <flatcc_json_printer_uint32_struct_field@@Base+0xec>
   38da8:	add	r1, r3, #1
   38dac:	mov	r2, #10
   38db0:	str	r1, [r0, #20]
   38db4:	strb	r2, [r3]
   38db8:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   38dbc:	ldr	r3, [r4, #20]
   38dc0:	b	38c78 <flatcc_json_printer_uint32_struct_field@@Base+0x4c>
   38dc4:	mov	r0, r4
   38dc8:	ldr	r3, [r4, #44]	; 0x2c
   38dcc:	mov	r1, #0
   38dd0:	blx	r3
   38dd4:	ldr	r5, [r4, #16]
   38dd8:	ldr	r0, [r4, #20]
   38ddc:	b	38cac <flatcc_json_printer_uint32_struct_field@@Base+0x80>

00038de0 <flatcc_json_printer_uint64_struct_field@@Base>:
   38de0:	cmp	r1, #0
   38de4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   38de8:	mov	r4, r0
   38dec:	ldrd	r6, [r2, r3]
   38df0:	ldrne	r3, [r0, #20]
   38df4:	movne	r2, #44	; 0x2c
   38df8:	addne	r1, r3, #1
   38dfc:	strne	r1, [r0, #20]
   38e00:	strbne	r2, [r3]
   38e04:	ldrb	r1, [r0, #25]
   38e08:	ldr	sl, [sp, #36]	; 0x24
   38e0c:	ldr	r8, [sp, #32]
   38e10:	cmp	r1, #0
   38e14:	mov	r9, sl
   38e18:	ldr	r3, [r0, #20]
   38e1c:	bne	38f60 <flatcc_json_printer_uint64_struct_field@@Base+0x180>
   38e20:	ldr	r2, [r0, #16]
   38e24:	cmp	r3, r2
   38e28:	bcs	38f34 <flatcc_json_printer_uint64_struct_field@@Base+0x154>
   38e2c:	mov	r2, #34	; 0x22
   38e30:	strb	r2, [r3]
   38e34:	ldrb	r3, [r4, #26]
   38e38:	ldr	r0, [r4, #20]
   38e3c:	ldr	r5, [r4, #16]
   38e40:	cmp	r3, #0
   38e44:	addeq	r0, r0, #1
   38e48:	add	r3, r0, sl
   38e4c:	cmp	r5, r3
   38e50:	str	r0, [r4, #20]
   38e54:	bhi	38f44 <flatcc_json_printer_uint64_struct_field@@Base+0x164>
   38e58:	cmp	r0, r5
   38e5c:	bcs	38f7c <flatcc_json_printer_uint64_struct_field@@Base+0x19c>
   38e60:	sub	r5, r5, r0
   38e64:	cmp	sl, r5
   38e68:	bls	38eb4 <flatcc_json_printer_uint64_struct_field@@Base+0xd4>
   38e6c:	mov	sl, #0
   38e70:	mov	r2, r5
   38e74:	mov	r1, r8
   38e78:	bl	1454c <memcpy@plt>
   38e7c:	ldr	r3, [r4, #20]
   38e80:	mov	r0, r4
   38e84:	add	r3, r3, r5
   38e88:	str	r3, [r4, #20]
   38e8c:	ldr	r2, [r4, #44]	; 0x2c
   38e90:	mov	r1, sl
   38e94:	blx	r2
   38e98:	ldr	r0, [r4, #20]
   38e9c:	ldr	r3, [r4, #16]
   38ea0:	sub	r9, r9, r5
   38ea4:	add	r8, r8, r5
   38ea8:	sub	r5, r3, r0
   38eac:	cmp	r9, r5
   38eb0:	bhi	38e70 <flatcc_json_printer_uint64_struct_field@@Base+0x90>
   38eb4:	mov	r1, r8
   38eb8:	mov	r2, r9
   38ebc:	bl	1454c <memcpy@plt>
   38ec0:	ldr	sl, [r4, #20]
   38ec4:	add	sl, sl, r9
   38ec8:	str	sl, [r4, #20]
   38ecc:	mov	r3, #34	; 0x22
   38ed0:	strb	r3, [sl]
   38ed4:	ldr	r1, [r4, #20]
   38ed8:	ldrb	r3, [r4, #26]
   38edc:	clz	r3, r3
   38ee0:	lsr	r3, r3, #5
   38ee4:	add	r2, r1, r3
   38ee8:	add	r2, r2, #1
   38eec:	mov	r0, #58	; 0x3a
   38ef0:	str	r2, [r4, #20]
   38ef4:	strb	r0, [r1, r3]
   38ef8:	ldr	r3, [r4, #20]
   38efc:	mov	r2, #32
   38f00:	mov	r0, r6
   38f04:	strb	r2, [r3]
   38f08:	ldrb	r3, [r4, #25]
   38f0c:	ldr	r2, [r4, #20]
   38f10:	mov	r1, r7
   38f14:	cmp	r3, #0
   38f18:	addne	r2, r2, #1
   38f1c:	str	r2, [r4, #20]
   38f20:	bl	34060 <flatcc_json_parser_struct_as_root@@Base+0x564>
   38f24:	ldr	r3, [r4, #20]
   38f28:	add	r0, r3, r0
   38f2c:	str	r0, [r4, #20]
   38f30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   38f34:	ldr	r3, [r0, #44]	; 0x2c
   38f38:	blx	r3
   38f3c:	ldr	r3, [r4, #20]
   38f40:	b	38e2c <flatcc_json_printer_uint64_struct_field@@Base+0x4c>
   38f44:	mov	r2, sl
   38f48:	mov	r1, r8
   38f4c:	bl	1454c <memcpy@plt>
   38f50:	ldr	r9, [r4, #20]
   38f54:	add	sl, r9, sl
   38f58:	str	sl, [r4, #20]
   38f5c:	b	38ecc <flatcc_json_printer_uint64_struct_field@@Base+0xec>
   38f60:	add	r1, r3, #1
   38f64:	mov	r2, #10
   38f68:	str	r1, [r0, #20]
   38f6c:	strb	r2, [r3]
   38f70:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   38f74:	ldr	r3, [r4, #20]
   38f78:	b	38e2c <flatcc_json_printer_uint64_struct_field@@Base+0x4c>
   38f7c:	mov	r0, r4
   38f80:	ldr	r3, [r4, #44]	; 0x2c
   38f84:	mov	r1, #0
   38f88:	blx	r3
   38f8c:	ldr	r5, [r4, #16]
   38f90:	ldr	r0, [r4, #20]
   38f94:	b	38e60 <flatcc_json_printer_uint64_struct_field@@Base+0x80>

00038f98 <flatcc_json_printer_int8_struct_field@@Base>:
   38f98:	cmp	r1, #0
   38f9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   38fa0:	mov	r4, r0
   38fa4:	ldrsb	r6, [r2, r3]
   38fa8:	ldrne	r3, [r0, #20]
   38fac:	movne	r2, #44	; 0x2c
   38fb0:	addne	r1, r3, #1
   38fb4:	strne	r1, [r0, #20]
   38fb8:	strbne	r2, [r3]
   38fbc:	ldrb	r1, [r0, #25]
   38fc0:	ldr	r9, [sp, #36]	; 0x24
   38fc4:	ldr	r7, [sp, #32]
   38fc8:	cmp	r1, #0
   38fcc:	mov	r8, r9
   38fd0:	ldr	r3, [r0, #20]
   38fd4:	bne	391b8 <flatcc_json_printer_int8_struct_field@@Base+0x220>
   38fd8:	ldr	r2, [r0, #16]
   38fdc:	cmp	r3, r2
   38fe0:	bcs	39158 <flatcc_json_printer_int8_struct_field@@Base+0x1c0>
   38fe4:	mov	r2, #34	; 0x22
   38fe8:	strb	r2, [r3]
   38fec:	ldrb	r3, [r4, #26]
   38ff0:	ldr	r0, [r4, #20]
   38ff4:	ldr	r5, [r4, #16]
   38ff8:	cmp	r3, #0
   38ffc:	addeq	r0, r0, #1
   39000:	add	r3, r0, r9
   39004:	cmp	r5, r3
   39008:	str	r0, [r4, #20]
   3900c:	bhi	39168 <flatcc_json_printer_int8_struct_field@@Base+0x1d0>
   39010:	cmp	r0, r5
   39014:	bcs	391d4 <flatcc_json_printer_int8_struct_field@@Base+0x23c>
   39018:	sub	r5, r5, r0
   3901c:	cmp	r9, r5
   39020:	bls	3906c <flatcc_json_printer_int8_struct_field@@Base+0xd4>
   39024:	mov	r9, #0
   39028:	mov	r2, r5
   3902c:	mov	r1, r7
   39030:	bl	1454c <memcpy@plt>
   39034:	ldr	r3, [r4, #20]
   39038:	mov	r0, r4
   3903c:	add	r3, r3, r5
   39040:	str	r3, [r4, #20]
   39044:	ldr	r2, [r4, #44]	; 0x2c
   39048:	mov	r1, r9
   3904c:	blx	r2
   39050:	ldr	r0, [r4, #20]
   39054:	ldr	r3, [r4, #16]
   39058:	sub	r8, r8, r5
   3905c:	add	r7, r7, r5
   39060:	sub	r5, r3, r0
   39064:	cmp	r8, r5
   39068:	bhi	39028 <flatcc_json_printer_int8_struct_field@@Base+0x90>
   3906c:	mov	r1, r7
   39070:	mov	r2, r8
   39074:	bl	1454c <memcpy@plt>
   39078:	ldr	r9, [r4, #20]
   3907c:	add	r9, r9, r8
   39080:	str	r9, [r4, #20]
   39084:	mov	r3, #34	; 0x22
   39088:	strb	r3, [r9]
   3908c:	ldr	r1, [r4, #20]
   39090:	ldrb	r3, [r4, #26]
   39094:	clz	r3, r3
   39098:	lsr	r3, r3, #5
   3909c:	add	r2, r1, r3
   390a0:	add	r2, r2, #1
   390a4:	mov	r0, #58	; 0x3a
   390a8:	str	r2, [r4, #20]
   390ac:	strb	r0, [r1, r3]
   390b0:	ldr	r3, [r4, #20]
   390b4:	mov	r2, #32
   390b8:	lsr	r1, r6, #31
   390bc:	strb	r2, [r3]
   390c0:	ldrb	r2, [r4, #25]
   390c4:	ldr	r0, [r4, #20]
   390c8:	adds	r2, r2, #0
   390cc:	movne	r2, #1
   390d0:	cmp	r6, #0
   390d4:	rsblt	r6, r6, #0
   390d8:	add	r3, r0, r2
   390dc:	sxtblt	r6, r6
   390e0:	movlt	ip, #45	; 0x2d
   390e4:	uxtb	r6, r6
   390e8:	str	r3, [r4, #20]
   390ec:	addlt	r3, r3, #1
   390f0:	strblt	ip, [r0, r2]
   390f4:	cmp	r6, #99	; 0x63
   390f8:	bls	39184 <flatcc_json_printer_int8_struct_field@@Base+0x1ec>
   390fc:	ldr	r2, [pc, #260]	; 39208 <flatcc_json_printer_int8_struct_field@@Base+0x270>
   39100:	mov	ip, #100	; 0x64
   39104:	ldr	r0, [pc, #256]	; 3920c <flatcc_json_printer_int8_struct_field@@Base+0x274>
   39108:	umull	lr, r2, r2, r6
   3910c:	mov	lr, #0
   39110:	lsr	r2, r2, #5
   39114:	strb	lr, [r3, #3]
   39118:	mul	r2, ip, r2
   3911c:	mov	ip, #49	; 0x31
   39120:	sub	r6, r6, r2
   39124:	mov	r2, #3
   39128:	uxtb	r6, r6
   3912c:	ldrb	lr, [r0, r6, lsl #1]
   39130:	add	r6, r0, r6, lsl #1
   39134:	strb	lr, [r3, #1]
   39138:	ldrb	r0, [r6, #1]
   3913c:	strb	ip, [r3]
   39140:	strb	r0, [r3, #2]
   39144:	ldr	r3, [r4, #20]
   39148:	add	r1, r1, r2
   3914c:	add	r3, r3, r1
   39150:	str	r3, [r4, #20]
   39154:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39158:	ldr	r3, [r0, #44]	; 0x2c
   3915c:	blx	r3
   39160:	ldr	r3, [r4, #20]
   39164:	b	38fe4 <flatcc_json_printer_int8_struct_field@@Base+0x4c>
   39168:	mov	r2, r9
   3916c:	mov	r1, r7
   39170:	bl	1454c <memcpy@plt>
   39174:	ldr	r8, [r4, #20]
   39178:	add	r9, r8, r9
   3917c:	str	r9, [r4, #20]
   39180:	b	39084 <flatcc_json_printer_int8_struct_field@@Base+0xec>
   39184:	cmp	r6, #9
   39188:	bls	391f0 <flatcc_json_printer_int8_struct_field@@Base+0x258>
   3918c:	ldr	r2, [pc, #120]	; 3920c <flatcc_json_printer_int8_struct_field@@Base+0x274>
   39190:	sxth	r6, r6
   39194:	mov	r0, #0
   39198:	strb	r0, [r3, #2]
   3919c:	ldrb	r0, [r2, r6, lsl #1]
   391a0:	add	r6, r2, r6, lsl #1
   391a4:	mov	r2, #2
   391a8:	strb	r0, [r3]
   391ac:	ldrb	r0, [r6, #1]
   391b0:	strb	r0, [r3, #1]
   391b4:	b	39144 <flatcc_json_printer_int8_struct_field@@Base+0x1ac>
   391b8:	add	r1, r3, #1
   391bc:	mov	r2, #10
   391c0:	str	r1, [r0, #20]
   391c4:	strb	r2, [r3]
   391c8:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   391cc:	ldr	r3, [r4, #20]
   391d0:	b	38fe4 <flatcc_json_printer_int8_struct_field@@Base+0x4c>
   391d4:	mov	r0, r4
   391d8:	ldr	r3, [r4, #44]	; 0x2c
   391dc:	mov	r1, #0
   391e0:	blx	r3
   391e4:	ldr	r5, [r4, #16]
   391e8:	ldr	r0, [r4, #20]
   391ec:	b	39018 <flatcc_json_printer_int8_struct_field@@Base+0x80>
   391f0:	add	r6, r6, #48	; 0x30
   391f4:	mov	r0, #0
   391f8:	mov	r2, #1
   391fc:	strb	r6, [r3]
   39200:	strb	r0, [r3, #1]
   39204:	b	39144 <flatcc_json_printer_int8_struct_field@@Base+0x1ac>
   39208:	mvnpl	r8, pc, lsl r5
   3920c:	andeq	r6, r4, r0, lsl #9

00039210 <flatcc_json_printer_int16_struct_field@@Base>:
   39210:	cmp	r1, #0
   39214:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39218:	mov	r4, r0
   3921c:	ldrsh	r8, [r2, r3]
   39220:	ldrne	r3, [r0, #20]
   39224:	movne	r2, #44	; 0x2c
   39228:	addne	r1, r3, #1
   3922c:	strne	r1, [r0, #20]
   39230:	strbne	r2, [r3]
   39234:	ldrb	r1, [r0, #25]
   39238:	ldr	r9, [sp, #36]	; 0x24
   3923c:	ldr	r6, [sp, #32]
   39240:	cmp	r1, #0
   39244:	mov	r7, r9
   39248:	ldr	r3, [r0, #20]
   3924c:	bne	393b0 <flatcc_json_printer_int16_struct_field@@Base+0x1a0>
   39250:	ldr	r2, [r0, #16]
   39254:	cmp	r3, r2
   39258:	bcs	39384 <flatcc_json_printer_int16_struct_field@@Base+0x174>
   3925c:	mov	r2, #34	; 0x22
   39260:	strb	r2, [r3]
   39264:	ldrb	r3, [r4, #26]
   39268:	ldr	r0, [r4, #20]
   3926c:	ldr	r5, [r4, #16]
   39270:	cmp	r3, #0
   39274:	addeq	r0, r0, #1
   39278:	add	r3, r0, r9
   3927c:	cmp	r5, r3
   39280:	str	r0, [r4, #20]
   39284:	bhi	39394 <flatcc_json_printer_int16_struct_field@@Base+0x184>
   39288:	cmp	r0, r5
   3928c:	bcs	393cc <flatcc_json_printer_int16_struct_field@@Base+0x1bc>
   39290:	sub	r5, r5, r0
   39294:	cmp	r9, r5
   39298:	bls	392e4 <flatcc_json_printer_int16_struct_field@@Base+0xd4>
   3929c:	mov	r9, #0
   392a0:	mov	r2, r5
   392a4:	mov	r1, r6
   392a8:	bl	1454c <memcpy@plt>
   392ac:	ldr	r3, [r4, #20]
   392b0:	mov	r0, r4
   392b4:	add	r3, r3, r5
   392b8:	str	r3, [r4, #20]
   392bc:	ldr	r2, [r4, #44]	; 0x2c
   392c0:	mov	r1, r9
   392c4:	blx	r2
   392c8:	ldr	r0, [r4, #20]
   392cc:	ldr	r3, [r4, #16]
   392d0:	sub	r7, r7, r5
   392d4:	add	r6, r6, r5
   392d8:	sub	r5, r3, r0
   392dc:	cmp	r7, r5
   392e0:	bhi	392a0 <flatcc_json_printer_int16_struct_field@@Base+0x90>
   392e4:	mov	r1, r6
   392e8:	mov	r2, r7
   392ec:	bl	1454c <memcpy@plt>
   392f0:	ldr	r9, [r4, #20]
   392f4:	add	r9, r9, r7
   392f8:	str	r9, [r4, #20]
   392fc:	mov	r3, #34	; 0x22
   39300:	strb	r3, [r9]
   39304:	ldr	r1, [r4, #20]
   39308:	ldrb	r3, [r4, #26]
   3930c:	clz	r3, r3
   39310:	lsr	r3, r3, #5
   39314:	add	r2, r1, r3
   39318:	mov	r0, #58	; 0x3a
   3931c:	add	r2, r2, #1
   39320:	str	r2, [r4, #20]
   39324:	strb	r0, [r1, r3]
   39328:	ldr	r3, [r4, #20]
   3932c:	mov	r2, #32
   39330:	lsr	r5, r8, #31
   39334:	strb	r2, [r3]
   39338:	ldrb	r3, [r4, #25]
   3933c:	ldr	r2, [r4, #20]
   39340:	adds	r3, r3, #0
   39344:	movne	r3, #1
   39348:	cmp	r8, #0
   3934c:	rsblt	r8, r8, #0
   39350:	add	r1, r2, r3
   39354:	sxthlt	r8, r8
   39358:	movlt	r0, #45	; 0x2d
   3935c:	str	r1, [r4, #20]
   39360:	strblt	r0, [r2, r3]
   39364:	addlt	r1, r1, #1
   39368:	uxth	r0, r8
   3936c:	bl	33bd0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   39370:	ldr	r3, [r4, #20]
   39374:	add	r0, r5, r0
   39378:	add	r3, r3, r0
   3937c:	str	r3, [r4, #20]
   39380:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39384:	ldr	r3, [r0, #44]	; 0x2c
   39388:	blx	r3
   3938c:	ldr	r3, [r4, #20]
   39390:	b	3925c <flatcc_json_printer_int16_struct_field@@Base+0x4c>
   39394:	mov	r2, r9
   39398:	mov	r1, r6
   3939c:	bl	1454c <memcpy@plt>
   393a0:	ldr	r7, [r4, #20]
   393a4:	add	r9, r7, r9
   393a8:	str	r9, [r4, #20]
   393ac:	b	392fc <flatcc_json_printer_int16_struct_field@@Base+0xec>
   393b0:	add	r1, r3, #1
   393b4:	mov	r2, #10
   393b8:	str	r1, [r0, #20]
   393bc:	strb	r2, [r3]
   393c0:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   393c4:	ldr	r3, [r4, #20]
   393c8:	b	3925c <flatcc_json_printer_int16_struct_field@@Base+0x4c>
   393cc:	mov	r0, r4
   393d0:	ldr	r3, [r4, #44]	; 0x2c
   393d4:	mov	r1, #0
   393d8:	blx	r3
   393dc:	ldr	r5, [r4, #16]
   393e0:	ldr	r0, [r4, #20]
   393e4:	b	39290 <flatcc_json_printer_int16_struct_field@@Base+0x80>

000393e8 <flatcc_json_printer_int32_struct_field@@Base>:
   393e8:	cmp	r1, #0
   393ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   393f0:	mov	r4, r0
   393f4:	ldr	r8, [r2, r3]
   393f8:	ldrne	r3, [r0, #20]
   393fc:	movne	r2, #44	; 0x2c
   39400:	addne	r1, r3, #1
   39404:	strne	r1, [r0, #20]
   39408:	strbne	r2, [r3]
   3940c:	ldrb	r1, [r0, #25]
   39410:	ldr	r9, [sp, #36]	; 0x24
   39414:	ldr	r6, [sp, #32]
   39418:	cmp	r1, #0
   3941c:	mov	r7, r9
   39420:	ldr	r3, [r0, #20]
   39424:	bne	39584 <flatcc_json_printer_int32_struct_field@@Base+0x19c>
   39428:	ldr	r2, [r0, #16]
   3942c:	cmp	r3, r2
   39430:	bcs	39558 <flatcc_json_printer_int32_struct_field@@Base+0x170>
   39434:	mov	r2, #34	; 0x22
   39438:	strb	r2, [r3]
   3943c:	ldrb	r3, [r4, #26]
   39440:	ldr	r0, [r4, #20]
   39444:	ldr	r5, [r4, #16]
   39448:	cmp	r3, #0
   3944c:	addeq	r0, r0, #1
   39450:	add	r3, r0, r9
   39454:	cmp	r5, r3
   39458:	str	r0, [r4, #20]
   3945c:	bhi	39568 <flatcc_json_printer_int32_struct_field@@Base+0x180>
   39460:	cmp	r0, r5
   39464:	bcs	395a0 <flatcc_json_printer_int32_struct_field@@Base+0x1b8>
   39468:	sub	r5, r5, r0
   3946c:	cmp	r9, r5
   39470:	bls	394bc <flatcc_json_printer_int32_struct_field@@Base+0xd4>
   39474:	mov	r9, #0
   39478:	mov	r2, r5
   3947c:	mov	r1, r6
   39480:	bl	1454c <memcpy@plt>
   39484:	ldr	r3, [r4, #20]
   39488:	mov	r0, r4
   3948c:	add	r3, r3, r5
   39490:	str	r3, [r4, #20]
   39494:	ldr	r2, [r4, #44]	; 0x2c
   39498:	mov	r1, r9
   3949c:	blx	r2
   394a0:	ldr	r0, [r4, #20]
   394a4:	ldr	r3, [r4, #16]
   394a8:	sub	r7, r7, r5
   394ac:	add	r6, r6, r5
   394b0:	sub	r5, r3, r0
   394b4:	cmp	r7, r5
   394b8:	bhi	39478 <flatcc_json_printer_int32_struct_field@@Base+0x90>
   394bc:	mov	r1, r6
   394c0:	mov	r2, r7
   394c4:	bl	1454c <memcpy@plt>
   394c8:	ldr	r9, [r4, #20]
   394cc:	add	r9, r9, r7
   394d0:	str	r9, [r4, #20]
   394d4:	mov	r3, #34	; 0x22
   394d8:	strb	r3, [r9]
   394dc:	ldr	r1, [r4, #20]
   394e0:	ldrb	r3, [r4, #26]
   394e4:	clz	r3, r3
   394e8:	lsr	r3, r3, #5
   394ec:	add	r2, r1, r3
   394f0:	mov	r0, #58	; 0x3a
   394f4:	add	r2, r2, #1
   394f8:	str	r2, [r4, #20]
   394fc:	strb	r0, [r1, r3]
   39500:	ldr	r3, [r4, #20]
   39504:	mov	r2, #32
   39508:	lsr	r5, r8, #31
   3950c:	strb	r2, [r3]
   39510:	ldrb	r3, [r4, #25]
   39514:	ldr	r2, [r4, #20]
   39518:	adds	r3, r3, #0
   3951c:	movne	r3, #1
   39520:	cmp	r8, #0
   39524:	add	r1, r2, r3
   39528:	movlt	r0, #45	; 0x2d
   3952c:	rsblt	r8, r8, #0
   39530:	str	r1, [r4, #20]
   39534:	strblt	r0, [r2, r3]
   39538:	addlt	r1, r1, #1
   3953c:	mov	r0, r8
   39540:	bl	33d38 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   39544:	ldr	r3, [r4, #20]
   39548:	add	r0, r5, r0
   3954c:	add	r3, r3, r0
   39550:	str	r3, [r4, #20]
   39554:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39558:	ldr	r3, [r0, #44]	; 0x2c
   3955c:	blx	r3
   39560:	ldr	r3, [r4, #20]
   39564:	b	39434 <flatcc_json_printer_int32_struct_field@@Base+0x4c>
   39568:	mov	r2, r9
   3956c:	mov	r1, r6
   39570:	bl	1454c <memcpy@plt>
   39574:	ldr	r7, [r4, #20]
   39578:	add	r9, r7, r9
   3957c:	str	r9, [r4, #20]
   39580:	b	394d4 <flatcc_json_printer_int32_struct_field@@Base+0xec>
   39584:	add	r1, r3, #1
   39588:	mov	r2, #10
   3958c:	str	r1, [r0, #20]
   39590:	strb	r2, [r3]
   39594:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   39598:	ldr	r3, [r4, #20]
   3959c:	b	39434 <flatcc_json_printer_int32_struct_field@@Base+0x4c>
   395a0:	mov	r0, r4
   395a4:	ldr	r3, [r4, #44]	; 0x2c
   395a8:	mov	r1, #0
   395ac:	blx	r3
   395b0:	ldr	r5, [r4, #16]
   395b4:	ldr	r0, [r4, #20]
   395b8:	b	39468 <flatcc_json_printer_int32_struct_field@@Base+0x80>

000395bc <flatcc_json_printer_int64_struct_field@@Base>:
   395bc:	cmp	r1, #0
   395c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   395c4:	mov	r4, r0
   395c8:	ldrd	r6, [r2, r3]
   395cc:	ldrne	r3, [r0, #20]
   395d0:	movne	r2, #44	; 0x2c
   395d4:	addne	r1, r3, #1
   395d8:	strne	r1, [r0, #20]
   395dc:	strbne	r2, [r3]
   395e0:	ldrb	r1, [r0, #25]
   395e4:	ldr	sl, [sp, #36]	; 0x24
   395e8:	ldr	r8, [sp, #32]
   395ec:	cmp	r1, #0
   395f0:	mov	r9, sl
   395f4:	ldr	r3, [r0, #20]
   395f8:	bne	39768 <flatcc_json_printer_int64_struct_field@@Base+0x1ac>
   395fc:	ldr	r2, [r0, #16]
   39600:	cmp	r3, r2
   39604:	bcs	3973c <flatcc_json_printer_int64_struct_field@@Base+0x180>
   39608:	mov	r2, #34	; 0x22
   3960c:	strb	r2, [r3]
   39610:	ldrb	r3, [r4, #26]
   39614:	ldr	r0, [r4, #20]
   39618:	ldr	r5, [r4, #16]
   3961c:	cmp	r3, #0
   39620:	addeq	r0, r0, #1
   39624:	add	r3, r0, sl
   39628:	cmp	r5, r3
   3962c:	str	r0, [r4, #20]
   39630:	bhi	3974c <flatcc_json_printer_int64_struct_field@@Base+0x190>
   39634:	cmp	r0, r5
   39638:	bcs	39784 <flatcc_json_printer_int64_struct_field@@Base+0x1c8>
   3963c:	sub	r5, r5, r0
   39640:	cmp	sl, r5
   39644:	bls	39690 <flatcc_json_printer_int64_struct_field@@Base+0xd4>
   39648:	mov	sl, #0
   3964c:	mov	r2, r5
   39650:	mov	r1, r8
   39654:	bl	1454c <memcpy@plt>
   39658:	ldr	r3, [r4, #20]
   3965c:	mov	r0, r4
   39660:	add	r3, r3, r5
   39664:	str	r3, [r4, #20]
   39668:	ldr	r2, [r4, #44]	; 0x2c
   3966c:	mov	r1, sl
   39670:	blx	r2
   39674:	ldr	r0, [r4, #20]
   39678:	ldr	r3, [r4, #16]
   3967c:	sub	r9, r9, r5
   39680:	add	r8, r8, r5
   39684:	sub	r5, r3, r0
   39688:	cmp	r9, r5
   3968c:	bhi	3964c <flatcc_json_printer_int64_struct_field@@Base+0x90>
   39690:	mov	r1, r8
   39694:	mov	r2, r9
   39698:	bl	1454c <memcpy@plt>
   3969c:	ldr	sl, [r4, #20]
   396a0:	add	sl, sl, r9
   396a4:	str	sl, [r4, #20]
   396a8:	mov	r3, #34	; 0x22
   396ac:	strb	r3, [sl]
   396b0:	ldr	r1, [r4, #20]
   396b4:	ldrb	r3, [r4, #26]
   396b8:	clz	r3, r3
   396bc:	lsr	r3, r3, #5
   396c0:	add	r2, r1, r3
   396c4:	add	r2, r2, #1
   396c8:	mov	r0, #58	; 0x3a
   396cc:	str	r2, [r4, #20]
   396d0:	strb	r0, [r1, r3]
   396d4:	ldr	r3, [r4, #20]
   396d8:	mov	r2, #32
   396dc:	lsr	r5, r7, #31
   396e0:	strb	r2, [r3]
   396e4:	ldrb	r3, [r4, #25]
   396e8:	ldr	r1, [r4, #20]
   396ec:	adds	r3, r3, #0
   396f0:	movne	r3, #1
   396f4:	cmp	r6, #0
   396f8:	add	r2, r1, r3
   396fc:	sbcs	r0, r7, #0
   39700:	str	r2, [r4, #20]
   39704:	bge	3971c <flatcc_json_printer_int64_struct_field@@Base+0x160>
   39708:	rsbs	r6, r6, #0
   3970c:	rsc	r7, r7, #0
   39710:	add	r2, r2, #1
   39714:	mov	r0, #45	; 0x2d
   39718:	strb	r0, [r1, r3]
   3971c:	mov	r0, r6
   39720:	mov	r1, r7
   39724:	bl	34060 <flatcc_json_parser_struct_as_root@@Base+0x564>
   39728:	ldr	r3, [r4, #20]
   3972c:	add	r0, r5, r0
   39730:	add	r3, r3, r0
   39734:	str	r3, [r4, #20]
   39738:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3973c:	ldr	r3, [r0, #44]	; 0x2c
   39740:	blx	r3
   39744:	ldr	r3, [r4, #20]
   39748:	b	39608 <flatcc_json_printer_int64_struct_field@@Base+0x4c>
   3974c:	mov	r2, sl
   39750:	mov	r1, r8
   39754:	bl	1454c <memcpy@plt>
   39758:	ldr	r9, [r4, #20]
   3975c:	add	sl, r9, sl
   39760:	str	sl, [r4, #20]
   39764:	b	396a8 <flatcc_json_printer_int64_struct_field@@Base+0xec>
   39768:	add	r1, r3, #1
   3976c:	mov	r2, #10
   39770:	str	r1, [r0, #20]
   39774:	strb	r2, [r3]
   39778:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3977c:	ldr	r3, [r4, #20]
   39780:	b	39608 <flatcc_json_printer_int64_struct_field@@Base+0x4c>
   39784:	mov	r0, r4
   39788:	ldr	r3, [r4, #44]	; 0x2c
   3978c:	mov	r1, #0
   39790:	blx	r3
   39794:	ldr	r5, [r4, #16]
   39798:	ldr	r0, [r4, #20]
   3979c:	b	3963c <flatcc_json_printer_int64_struct_field@@Base+0x80>

000397a0 <flatcc_json_printer_bool_struct_field@@Base>:
   397a0:	cmp	r1, #0
   397a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   397a8:	mov	r4, r0
   397ac:	ldrb	r8, [r2, r3]
   397b0:	ldrne	r3, [r0, #20]
   397b4:	movne	r2, #44	; 0x2c
   397b8:	addne	r1, r3, #1
   397bc:	strne	r1, [r0, #20]
   397c0:	strbne	r2, [r3]
   397c4:	ldrb	r1, [r0, #25]
   397c8:	ldr	r9, [sp, #36]	; 0x24
   397cc:	ldr	r6, [sp, #32]
   397d0:	cmp	r1, #0
   397d4:	mov	r7, r9
   397d8:	ldr	r3, [r0, #20]
   397dc:	bne	39954 <flatcc_json_printer_bool_struct_field@@Base+0x1b4>
   397e0:	ldr	r2, [r0, #16]
   397e4:	cmp	r3, r2
   397e8:	bcs	39910 <flatcc_json_printer_bool_struct_field@@Base+0x170>
   397ec:	mov	r2, #34	; 0x22
   397f0:	strb	r2, [r3]
   397f4:	ldrb	r3, [r4, #26]
   397f8:	ldr	r0, [r4, #20]
   397fc:	ldr	r5, [r4, #16]
   39800:	cmp	r3, #0
   39804:	addeq	r0, r0, #1
   39808:	add	r3, r0, r9
   3980c:	cmp	r5, r3
   39810:	str	r0, [r4, #20]
   39814:	bhi	39920 <flatcc_json_printer_bool_struct_field@@Base+0x180>
   39818:	cmp	r0, r5
   3981c:	bcs	39970 <flatcc_json_printer_bool_struct_field@@Base+0x1d0>
   39820:	sub	r5, r5, r0
   39824:	cmp	r9, r5
   39828:	bls	39874 <flatcc_json_printer_bool_struct_field@@Base+0xd4>
   3982c:	mov	r9, #0
   39830:	mov	r2, r5
   39834:	mov	r1, r6
   39838:	bl	1454c <memcpy@plt>
   3983c:	ldr	r3, [r4, #20]
   39840:	mov	r0, r4
   39844:	add	r3, r3, r5
   39848:	str	r3, [r4, #20]
   3984c:	ldr	r2, [r4, #44]	; 0x2c
   39850:	mov	r1, r9
   39854:	blx	r2
   39858:	ldr	r0, [r4, #20]
   3985c:	ldr	r3, [r4, #16]
   39860:	sub	r7, r7, r5
   39864:	add	r6, r6, r5
   39868:	sub	r5, r3, r0
   3986c:	cmp	r7, r5
   39870:	bhi	39830 <flatcc_json_printer_bool_struct_field@@Base+0x90>
   39874:	mov	r1, r6
   39878:	mov	r2, r7
   3987c:	bl	1454c <memcpy@plt>
   39880:	ldr	r9, [r4, #20]
   39884:	add	r9, r9, r7
   39888:	str	r9, [r4, #20]
   3988c:	mov	r3, #34	; 0x22
   39890:	strb	r3, [r9]
   39894:	ldr	r1, [r4, #20]
   39898:	ldrb	r3, [r4, #26]
   3989c:	clz	r3, r3
   398a0:	lsr	r3, r3, #5
   398a4:	add	r2, r1, r3
   398a8:	add	r2, r2, #1
   398ac:	mov	r0, #58	; 0x3a
   398b0:	str	r2, [r4, #20]
   398b4:	strb	r0, [r1, r3]
   398b8:	ldr	r3, [r4, #20]
   398bc:	mov	r2, #32
   398c0:	ldr	r0, [pc, #196]	; 3998c <flatcc_json_printer_bool_struct_field@@Base+0x1ec>
   398c4:	strb	r2, [r3]
   398c8:	ldrb	r3, [r4, #25]
   398cc:	ldr	r1, [r4, #20]
   398d0:	adds	r3, r3, #0
   398d4:	movne	r3, #1
   398d8:	add	r2, r1, r3
   398dc:	cmp	r8, #0
   398e0:	str	r2, [r4, #20]
   398e4:	bne	3993c <flatcc_json_printer_bool_struct_field@@Base+0x19c>
   398e8:	add	lr, r0, #1792	; 0x700
   398ec:	mov	ip, #5
   398f0:	ldrh	lr, [lr, #4]
   398f4:	ldr	r0, [r0, #1792]	; 0x700
   398f8:	str	r0, [r1, r3]
   398fc:	strh	lr, [r2, #4]
   39900:	ldr	r3, [r4, #20]
   39904:	add	r3, r3, ip
   39908:	str	r3, [r4, #20]
   3990c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39910:	ldr	r3, [r0, #44]	; 0x2c
   39914:	blx	r3
   39918:	ldr	r3, [r4, #20]
   3991c:	b	397ec <flatcc_json_printer_bool_struct_field@@Base+0x4c>
   39920:	mov	r2, r9
   39924:	mov	r1, r6
   39928:	bl	1454c <memcpy@plt>
   3992c:	ldr	r7, [r4, #20]
   39930:	add	r9, r7, r9
   39934:	str	r9, [r4, #20]
   39938:	b	3988c <flatcc_json_printer_bool_struct_field@@Base+0xec>
   3993c:	ldrb	lr, [r0, #1788]	; 0x6fc
   39940:	ldr	r0, [r0, #1784]	; 0x6f8
   39944:	mov	ip, #4
   39948:	str	r0, [r1, r3]
   3994c:	strb	lr, [r2, #4]
   39950:	b	39900 <flatcc_json_printer_bool_struct_field@@Base+0x160>
   39954:	add	r1, r3, #1
   39958:	mov	r2, #10
   3995c:	str	r1, [r0, #20]
   39960:	strb	r2, [r3]
   39964:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   39968:	ldr	r3, [r4, #20]
   3996c:	b	397ec <flatcc_json_printer_bool_struct_field@@Base+0x4c>
   39970:	mov	r0, r4
   39974:	ldr	r3, [r4, #44]	; 0x2c
   39978:	mov	r1, #0
   3997c:	blx	r3
   39980:	ldr	r5, [r4, #16]
   39984:	ldr	r0, [r4, #20]
   39988:	b	39820 <flatcc_json_printer_bool_struct_field@@Base+0x80>
   3998c:	andeq	r6, r4, r0, lsl #9

00039990 <flatcc_json_printer_float_struct_field@@Base>:
   39990:	cmp	r1, #0
   39994:	add	r3, r2, r3
   39998:	push	{r4, r5, r6, r7, r8, lr}
   3999c:	vpush	{d8}
   399a0:	vldr	s16, [r3]
   399a4:	ldrne	r3, [r0, #20]
   399a8:	movne	r2, #44	; 0x2c
   399ac:	addne	r1, r3, #1
   399b0:	strne	r1, [r0, #20]
   399b4:	strbne	r2, [r3]
   399b8:	ldrb	r1, [r0, #25]
   399bc:	ldr	r8, [sp, #36]	; 0x24
   399c0:	mov	r4, r0
   399c4:	cmp	r1, #0
   399c8:	ldr	r6, [sp, #32]
   399cc:	mov	r7, r8
   399d0:	ldr	r3, [r0, #20]
   399d4:	bne	39b18 <flatcc_json_printer_float_struct_field@@Base+0x188>
   399d8:	ldr	r2, [r0, #16]
   399dc:	cmp	r3, r2
   399e0:	bcs	39aec <flatcc_json_printer_float_struct_field@@Base+0x15c>
   399e4:	mov	r2, #34	; 0x22
   399e8:	strb	r2, [r3]
   399ec:	ldrb	r3, [r4, #26]
   399f0:	ldr	r0, [r4, #20]
   399f4:	ldr	r5, [r4, #16]
   399f8:	cmp	r3, #0
   399fc:	addeq	r0, r0, #1
   39a00:	add	r3, r0, r8
   39a04:	cmp	r5, r3
   39a08:	str	r0, [r4, #20]
   39a0c:	bhi	39afc <flatcc_json_printer_float_struct_field@@Base+0x16c>
   39a10:	cmp	r0, r5
   39a14:	bcs	39b34 <flatcc_json_printer_float_struct_field@@Base+0x1a4>
   39a18:	sub	r5, r5, r0
   39a1c:	cmp	r8, r5
   39a20:	bls	39a6c <flatcc_json_printer_float_struct_field@@Base+0xdc>
   39a24:	mov	r8, #0
   39a28:	mov	r2, r5
   39a2c:	mov	r1, r6
   39a30:	bl	1454c <memcpy@plt>
   39a34:	ldr	r3, [r4, #20]
   39a38:	mov	r0, r4
   39a3c:	add	r3, r3, r5
   39a40:	str	r3, [r4, #20]
   39a44:	ldr	r2, [r4, #44]	; 0x2c
   39a48:	mov	r1, r8
   39a4c:	blx	r2
   39a50:	ldr	r0, [r4, #20]
   39a54:	ldr	r3, [r4, #16]
   39a58:	sub	r7, r7, r5
   39a5c:	add	r6, r6, r5
   39a60:	sub	r5, r3, r0
   39a64:	cmp	r7, r5
   39a68:	bhi	39a28 <flatcc_json_printer_float_struct_field@@Base+0x98>
   39a6c:	mov	r1, r6
   39a70:	mov	r2, r7
   39a74:	bl	1454c <memcpy@plt>
   39a78:	ldr	r8, [r4, #20]
   39a7c:	add	r8, r8, r7
   39a80:	str	r8, [r4, #20]
   39a84:	mov	r3, #34	; 0x22
   39a88:	strb	r3, [r8]
   39a8c:	ldr	r1, [r4, #20]
   39a90:	ldrb	r3, [r4, #26]
   39a94:	clz	r3, r3
   39a98:	lsr	r3, r3, #5
   39a9c:	add	r2, r1, r3
   39aa0:	add	r2, r2, #1
   39aa4:	mov	r0, #58	; 0x3a
   39aa8:	str	r2, [r4, #20]
   39aac:	strb	r0, [r1, r3]
   39ab0:	ldr	r3, [r4, #20]
   39ab4:	mov	r2, #32
   39ab8:	vcvt.f64.f32	d0, s16
   39abc:	strb	r2, [r3]
   39ac0:	ldrb	r3, [r4, #25]
   39ac4:	ldr	r0, [r4, #20]
   39ac8:	cmp	r3, #0
   39acc:	addne	r0, r0, #1
   39ad0:	str	r0, [r4, #20]
   39ad4:	bl	34e20 <flatcc_json_parser_struct_as_root@@Base+0x1324>
   39ad8:	vpop	{d8}
   39adc:	ldr	r3, [r4, #20]
   39ae0:	add	r0, r3, r0
   39ae4:	str	r0, [r4, #20]
   39ae8:	pop	{r4, r5, r6, r7, r8, pc}
   39aec:	ldr	r3, [r0, #44]	; 0x2c
   39af0:	blx	r3
   39af4:	ldr	r3, [r4, #20]
   39af8:	b	399e4 <flatcc_json_printer_float_struct_field@@Base+0x54>
   39afc:	mov	r2, r8
   39b00:	mov	r1, r6
   39b04:	bl	1454c <memcpy@plt>
   39b08:	ldr	r7, [r4, #20]
   39b0c:	add	r8, r7, r8
   39b10:	str	r8, [r4, #20]
   39b14:	b	39a84 <flatcc_json_printer_float_struct_field@@Base+0xf4>
   39b18:	add	r1, r3, #1
   39b1c:	mov	r2, #10
   39b20:	str	r1, [r0, #20]
   39b24:	strb	r2, [r3]
   39b28:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   39b2c:	ldr	r3, [r4, #20]
   39b30:	b	399e4 <flatcc_json_printer_float_struct_field@@Base+0x54>
   39b34:	mov	r0, r4
   39b38:	ldr	r3, [r4, #44]	; 0x2c
   39b3c:	mov	r1, #0
   39b40:	blx	r3
   39b44:	ldr	r5, [r4, #16]
   39b48:	ldr	r0, [r4, #20]
   39b4c:	b	39a18 <flatcc_json_printer_float_struct_field@@Base+0x88>

00039b50 <flatcc_json_printer_double_struct_field@@Base>:
   39b50:	cmp	r1, #0
   39b54:	add	r3, r2, r3
   39b58:	push	{r4, r5, r6, r7, r8, lr}
   39b5c:	vpush	{d8}
   39b60:	vldr	d8, [r3]
   39b64:	ldrne	r3, [r0, #20]
   39b68:	movne	r2, #44	; 0x2c
   39b6c:	addne	r1, r3, #1
   39b70:	strne	r1, [r0, #20]
   39b74:	strbne	r2, [r3]
   39b78:	ldrb	r1, [r0, #25]
   39b7c:	ldr	r8, [sp, #36]	; 0x24
   39b80:	mov	r4, r0
   39b84:	cmp	r1, #0
   39b88:	ldr	r6, [sp, #32]
   39b8c:	mov	r7, r8
   39b90:	ldr	r3, [r0, #20]
   39b94:	bne	39cd8 <flatcc_json_printer_double_struct_field@@Base+0x188>
   39b98:	ldr	r2, [r0, #16]
   39b9c:	cmp	r3, r2
   39ba0:	bcs	39cac <flatcc_json_printer_double_struct_field@@Base+0x15c>
   39ba4:	mov	r2, #34	; 0x22
   39ba8:	strb	r2, [r3]
   39bac:	ldrb	r3, [r4, #26]
   39bb0:	ldr	r0, [r4, #20]
   39bb4:	ldr	r5, [r4, #16]
   39bb8:	cmp	r3, #0
   39bbc:	addeq	r0, r0, #1
   39bc0:	add	r3, r0, r8
   39bc4:	cmp	r5, r3
   39bc8:	str	r0, [r4, #20]
   39bcc:	bhi	39cbc <flatcc_json_printer_double_struct_field@@Base+0x16c>
   39bd0:	cmp	r0, r5
   39bd4:	bcs	39cf4 <flatcc_json_printer_double_struct_field@@Base+0x1a4>
   39bd8:	sub	r5, r5, r0
   39bdc:	cmp	r8, r5
   39be0:	bls	39c2c <flatcc_json_printer_double_struct_field@@Base+0xdc>
   39be4:	mov	r8, #0
   39be8:	mov	r2, r5
   39bec:	mov	r1, r6
   39bf0:	bl	1454c <memcpy@plt>
   39bf4:	ldr	r3, [r4, #20]
   39bf8:	mov	r0, r4
   39bfc:	add	r3, r3, r5
   39c00:	str	r3, [r4, #20]
   39c04:	ldr	r2, [r4, #44]	; 0x2c
   39c08:	mov	r1, r8
   39c0c:	blx	r2
   39c10:	ldr	r0, [r4, #20]
   39c14:	ldr	r3, [r4, #16]
   39c18:	sub	r7, r7, r5
   39c1c:	add	r6, r6, r5
   39c20:	sub	r5, r3, r0
   39c24:	cmp	r7, r5
   39c28:	bhi	39be8 <flatcc_json_printer_double_struct_field@@Base+0x98>
   39c2c:	mov	r1, r6
   39c30:	mov	r2, r7
   39c34:	bl	1454c <memcpy@plt>
   39c38:	ldr	r8, [r4, #20]
   39c3c:	add	r8, r8, r7
   39c40:	str	r8, [r4, #20]
   39c44:	mov	r3, #34	; 0x22
   39c48:	strb	r3, [r8]
   39c4c:	ldr	r1, [r4, #20]
   39c50:	ldrb	r3, [r4, #26]
   39c54:	clz	r3, r3
   39c58:	lsr	r3, r3, #5
   39c5c:	add	r2, r1, r3
   39c60:	add	r2, r2, #1
   39c64:	mov	r0, #58	; 0x3a
   39c68:	str	r2, [r4, #20]
   39c6c:	strb	r0, [r1, r3]
   39c70:	ldr	r3, [r4, #20]
   39c74:	mov	r2, #32
   39c78:	vmov.f64	d0, d8
   39c7c:	strb	r2, [r3]
   39c80:	ldrb	r3, [r4, #25]
   39c84:	ldr	r0, [r4, #20]
   39c88:	cmp	r3, #0
   39c8c:	addne	r0, r0, #1
   39c90:	str	r0, [r4, #20]
   39c94:	bl	34e20 <flatcc_json_parser_struct_as_root@@Base+0x1324>
   39c98:	vpop	{d8}
   39c9c:	ldr	r3, [r4, #20]
   39ca0:	add	r0, r3, r0
   39ca4:	str	r0, [r4, #20]
   39ca8:	pop	{r4, r5, r6, r7, r8, pc}
   39cac:	ldr	r3, [r0, #44]	; 0x2c
   39cb0:	blx	r3
   39cb4:	ldr	r3, [r4, #20]
   39cb8:	b	39ba4 <flatcc_json_printer_double_struct_field@@Base+0x54>
   39cbc:	mov	r2, r8
   39cc0:	mov	r1, r6
   39cc4:	bl	1454c <memcpy@plt>
   39cc8:	ldr	r7, [r4, #20]
   39ccc:	add	r8, r7, r8
   39cd0:	str	r8, [r4, #20]
   39cd4:	b	39c44 <flatcc_json_printer_double_struct_field@@Base+0xf4>
   39cd8:	add	r1, r3, #1
   39cdc:	mov	r2, #10
   39ce0:	str	r1, [r0, #20]
   39ce4:	strb	r2, [r3]
   39ce8:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   39cec:	ldr	r3, [r4, #20]
   39cf0:	b	39ba4 <flatcc_json_printer_double_struct_field@@Base+0x54>
   39cf4:	mov	r0, r4
   39cf8:	ldr	r3, [r4, #44]	; 0x2c
   39cfc:	mov	r1, #0
   39d00:	blx	r3
   39d04:	ldr	r5, [r4, #16]
   39d08:	ldr	r0, [r4, #20]
   39d0c:	b	39bd8 <flatcc_json_printer_double_struct_field@@Base+0x88>

00039d10 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   39d10:	cmp	r1, #0
   39d14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39d18:	mov	r4, r0
   39d1c:	ldrb	r8, [r2, r3]
   39d20:	ldrne	r3, [r0, #20]
   39d24:	movne	r2, #44	; 0x2c
   39d28:	addne	r1, r3, #1
   39d2c:	strne	r1, [r0, #20]
   39d30:	strbne	r2, [r3]
   39d34:	ldrb	r1, [r0, #25]
   39d38:	ldr	sl, [sp, #36]	; 0x24
   39d3c:	ldr	r6, [sp, #32]
   39d40:	cmp	r1, #0
   39d44:	ldr	r9, [sp, #40]	; 0x28
   39d48:	mov	r7, sl
   39d4c:	ldr	r3, [r0, #20]
   39d50:	bne	39efc <flatcc_json_printer_uint8_enum_struct_field@@Base+0x1ec>
   39d54:	ldr	r2, [r0, #16]
   39d58:	cmp	r3, r2
   39d5c:	bcs	39e70 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x160>
   39d60:	mov	r2, #34	; 0x22
   39d64:	strb	r2, [r3]
   39d68:	ldrb	r3, [r4, #26]
   39d6c:	ldr	r0, [r4, #20]
   39d70:	ldr	r5, [r4, #16]
   39d74:	cmp	r3, #0
   39d78:	addeq	r0, r0, #1
   39d7c:	add	r3, r0, sl
   39d80:	cmp	r5, r3
   39d84:	str	r0, [r4, #20]
   39d88:	bhi	39e80 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x170>
   39d8c:	cmp	r0, r5
   39d90:	bcs	39f18 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x208>
   39d94:	sub	r5, r5, r0
   39d98:	cmp	sl, r5
   39d9c:	bls	39de8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xd8>
   39da0:	mov	sl, #0
   39da4:	mov	r2, r5
   39da8:	mov	r1, r6
   39dac:	bl	1454c <memcpy@plt>
   39db0:	ldr	r3, [r4, #20]
   39db4:	mov	r0, r4
   39db8:	add	r3, r3, r5
   39dbc:	str	r3, [r4, #20]
   39dc0:	ldr	r2, [r4, #44]	; 0x2c
   39dc4:	mov	r1, sl
   39dc8:	blx	r2
   39dcc:	ldr	r0, [r4, #20]
   39dd0:	ldr	r3, [r4, #16]
   39dd4:	sub	r7, r7, r5
   39dd8:	add	r6, r6, r5
   39ddc:	sub	r5, r3, r0
   39de0:	cmp	r7, r5
   39de4:	bhi	39da4 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x94>
   39de8:	mov	r1, r6
   39dec:	mov	r2, r7
   39df0:	bl	1454c <memcpy@plt>
   39df4:	ldr	sl, [r4, #20]
   39df8:	add	sl, sl, r7
   39dfc:	str	sl, [r4, #20]
   39e00:	mov	r3, #34	; 0x22
   39e04:	strb	r3, [sl]
   39e08:	ldr	r1, [r4, #20]
   39e0c:	ldrb	r3, [r4, #26]
   39e10:	clz	r3, r3
   39e14:	lsr	r3, r3, #5
   39e18:	add	r2, r1, r3
   39e1c:	add	r2, r2, #1
   39e20:	mov	r0, #58	; 0x3a
   39e24:	str	r2, [r4, #20]
   39e28:	strb	r0, [r1, r3]
   39e2c:	ldr	r3, [r4, #20]
   39e30:	mov	r2, #32
   39e34:	strb	r2, [r3]
   39e38:	ldrb	r3, [r4, #25]
   39e3c:	ldrb	r0, [r4, #27]
   39e40:	ldr	r1, [r4, #20]
   39e44:	adds	r3, r3, #0
   39e48:	movne	r3, #1
   39e4c:	add	r2, r1, r3
   39e50:	cmp	r0, #0
   39e54:	str	r2, [r4, #20]
   39e58:	bne	39e9c <flatcc_json_printer_uint8_enum_struct_field@@Base+0x18c>
   39e5c:	mov	r1, r8
   39e60:	mov	r0, r4
   39e64:	mov	r3, r9
   39e68:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   39e6c:	bx	r3
   39e70:	ldr	r3, [r0, #44]	; 0x2c
   39e74:	blx	r3
   39e78:	ldr	r3, [r4, #20]
   39e7c:	b	39d60 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x50>
   39e80:	mov	r2, sl
   39e84:	mov	r1, r6
   39e88:	bl	1454c <memcpy@plt>
   39e8c:	ldr	r7, [r4, #20]
   39e90:	add	sl, r7, sl
   39e94:	str	sl, [r4, #20]
   39e98:	b	39e00 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xf0>
   39e9c:	cmp	r8, #99	; 0x63
   39ea0:	bls	39f34 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x224>
   39ea4:	ldr	r0, [pc, #212]	; 39f80 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x270>
   39ea8:	mov	ip, #100	; 0x64
   39eac:	ldr	lr, [pc, #208]	; 39f84 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x274>
   39eb0:	umull	r5, r0, r0, r8
   39eb4:	mov	r5, #0
   39eb8:	lsr	r0, r0, #5
   39ebc:	strb	r5, [r2, #3]
   39ec0:	mul	ip, ip, r0
   39ec4:	add	r0, r0, #48	; 0x30
   39ec8:	sub	r8, r8, ip
   39ecc:	mov	ip, #3
   39ed0:	uxtb	r8, r8
   39ed4:	ldrb	r5, [lr, r8, lsl #1]
   39ed8:	add	r8, lr, r8, lsl #1
   39edc:	strb	r5, [r2, #1]
   39ee0:	ldrb	lr, [r8, #1]
   39ee4:	strb	lr, [r2, #2]
   39ee8:	strb	r0, [r1, r3]
   39eec:	ldr	r3, [r4, #20]
   39ef0:	add	r3, r3, ip
   39ef4:	str	r3, [r4, #20]
   39ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39efc:	add	r1, r3, #1
   39f00:	mov	r2, #10
   39f04:	str	r1, [r0, #20]
   39f08:	strb	r2, [r3]
   39f0c:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   39f10:	ldr	r3, [r4, #20]
   39f14:	b	39d60 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x50>
   39f18:	mov	r0, r4
   39f1c:	ldr	r3, [r4, #44]	; 0x2c
   39f20:	mov	r1, #0
   39f24:	blx	r3
   39f28:	ldr	r5, [r4, #16]
   39f2c:	ldr	r0, [r4, #20]
   39f30:	b	39d94 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x84>
   39f34:	cmp	r8, #9
   39f38:	bls	39f68 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x258>
   39f3c:	ldr	r0, [pc, #64]	; 39f84 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x274>
   39f40:	sxth	r8, r8
   39f44:	mov	ip, #0
   39f48:	strb	ip, [r2, #2]
   39f4c:	ldrb	lr, [r0, r8, lsl #1]
   39f50:	add	r0, r0, r8, lsl #1
   39f54:	mov	ip, #2
   39f58:	strb	lr, [r1, r3]
   39f5c:	ldrb	r3, [r0, #1]
   39f60:	strb	r3, [r2, #1]
   39f64:	b	39eec <flatcc_json_printer_uint8_enum_struct_field@@Base+0x1dc>
   39f68:	add	r8, r8, #48	; 0x30
   39f6c:	mov	r0, #0
   39f70:	strb	r0, [r2, #1]
   39f74:	mov	ip, #1
   39f78:	strb	r8, [r1, r3]
   39f7c:	b	39eec <flatcc_json_printer_uint8_enum_struct_field@@Base+0x1dc>
   39f80:	mvnpl	r8, pc, lsl r5
   39f84:	andeq	r6, r4, r0, lsl #9

00039f88 <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   39f88:	cmp	r1, #0
   39f8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39f90:	mov	r4, r0
   39f94:	ldrh	r8, [r2, r3]
   39f98:	ldrne	r3, [r0, #20]
   39f9c:	movne	r2, #44	; 0x2c
   39fa0:	addne	r1, r3, #1
   39fa4:	strne	r1, [r0, #20]
   39fa8:	strbne	r2, [r3]
   39fac:	ldrb	r1, [r0, #25]
   39fb0:	ldr	sl, [sp, #36]	; 0x24
   39fb4:	ldr	r6, [sp, #32]
   39fb8:	cmp	r1, #0
   39fbc:	ldr	r9, [sp, #40]	; 0x28
   39fc0:	mov	r7, sl
   39fc4:	ldr	r3, [r0, #20]
   39fc8:	bne	3a128 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x1a0>
   39fcc:	ldr	r2, [r0, #16]
   39fd0:	cmp	r3, r2
   39fd4:	bcs	3a0e4 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x15c>
   39fd8:	mov	r2, #34	; 0x22
   39fdc:	strb	r2, [r3]
   39fe0:	ldrb	r3, [r4, #26]
   39fe4:	ldr	r0, [r4, #20]
   39fe8:	ldr	r5, [r4, #16]
   39fec:	cmp	r3, #0
   39ff0:	addeq	r0, r0, #1
   39ff4:	add	r3, r0, sl
   39ff8:	cmp	r5, r3
   39ffc:	str	r0, [r4, #20]
   3a000:	bhi	3a0f4 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x16c>
   3a004:	cmp	r0, r5
   3a008:	bcs	3a144 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x1bc>
   3a00c:	sub	r5, r5, r0
   3a010:	cmp	sl, r5
   3a014:	bls	3a060 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xd8>
   3a018:	mov	sl, #0
   3a01c:	mov	r2, r5
   3a020:	mov	r1, r6
   3a024:	bl	1454c <memcpy@plt>
   3a028:	ldr	r3, [r4, #20]
   3a02c:	mov	r0, r4
   3a030:	add	r3, r3, r5
   3a034:	str	r3, [r4, #20]
   3a038:	ldr	r2, [r4, #44]	; 0x2c
   3a03c:	mov	r1, sl
   3a040:	blx	r2
   3a044:	ldr	r0, [r4, #20]
   3a048:	ldr	r3, [r4, #16]
   3a04c:	sub	r7, r7, r5
   3a050:	add	r6, r6, r5
   3a054:	sub	r5, r3, r0
   3a058:	cmp	r7, r5
   3a05c:	bhi	3a01c <flatcc_json_printer_uint16_enum_struct_field@@Base+0x94>
   3a060:	mov	r1, r6
   3a064:	mov	r2, r7
   3a068:	bl	1454c <memcpy@plt>
   3a06c:	ldr	sl, [r4, #20]
   3a070:	add	sl, sl, r7
   3a074:	str	sl, [r4, #20]
   3a078:	mov	r3, #34	; 0x22
   3a07c:	strb	r3, [sl]
   3a080:	ldr	r1, [r4, #20]
   3a084:	ldrb	r3, [r4, #26]
   3a088:	clz	r3, r3
   3a08c:	lsr	r3, r3, #5
   3a090:	add	r2, r1, r3
   3a094:	add	r2, r2, #1
   3a098:	mov	r0, #58	; 0x3a
   3a09c:	str	r2, [r4, #20]
   3a0a0:	strb	r0, [r1, r3]
   3a0a4:	ldr	r3, [r4, #20]
   3a0a8:	mov	r2, #32
   3a0ac:	strb	r2, [r3]
   3a0b0:	ldrb	r2, [r4, #25]
   3a0b4:	ldrb	r3, [r4, #27]
   3a0b8:	ldr	r1, [r4, #20]
   3a0bc:	cmp	r2, #0
   3a0c0:	addne	r1, r1, #1
   3a0c4:	cmp	r3, #0
   3a0c8:	str	r1, [r4, #20]
   3a0cc:	bne	3a110 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x188>
   3a0d0:	mov	r1, r8
   3a0d4:	mov	r0, r4
   3a0d8:	mov	r3, r9
   3a0dc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a0e0:	bx	r3
   3a0e4:	ldr	r3, [r0, #44]	; 0x2c
   3a0e8:	blx	r3
   3a0ec:	ldr	r3, [r4, #20]
   3a0f0:	b	39fd8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x50>
   3a0f4:	mov	r2, sl
   3a0f8:	mov	r1, r6
   3a0fc:	bl	1454c <memcpy@plt>
   3a100:	ldr	r7, [r4, #20]
   3a104:	add	sl, r7, sl
   3a108:	str	sl, [r4, #20]
   3a10c:	b	3a078 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xf0>
   3a110:	mov	r0, r8
   3a114:	bl	33bd0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   3a118:	ldr	r3, [r4, #20]
   3a11c:	add	r0, r3, r0
   3a120:	str	r0, [r4, #20]
   3a124:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a128:	add	r1, r3, #1
   3a12c:	mov	r2, #10
   3a130:	str	r1, [r0, #20]
   3a134:	strb	r2, [r3]
   3a138:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3a13c:	ldr	r3, [r4, #20]
   3a140:	b	39fd8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x50>
   3a144:	mov	r0, r4
   3a148:	ldr	r3, [r4, #44]	; 0x2c
   3a14c:	mov	r1, #0
   3a150:	blx	r3
   3a154:	ldr	r5, [r4, #16]
   3a158:	ldr	r0, [r4, #20]
   3a15c:	b	3a00c <flatcc_json_printer_uint16_enum_struct_field@@Base+0x84>

0003a160 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   3a160:	cmp	r1, #0
   3a164:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a168:	mov	r4, r0
   3a16c:	ldr	r8, [r2, r3]
   3a170:	ldrne	r3, [r0, #20]
   3a174:	movne	r2, #44	; 0x2c
   3a178:	addne	r1, r3, #1
   3a17c:	strne	r1, [r0, #20]
   3a180:	strbne	r2, [r3]
   3a184:	ldrb	r1, [r0, #25]
   3a188:	ldr	sl, [sp, #36]	; 0x24
   3a18c:	ldr	r6, [sp, #32]
   3a190:	cmp	r1, #0
   3a194:	ldr	r9, [sp, #40]	; 0x28
   3a198:	mov	r7, sl
   3a19c:	ldr	r3, [r0, #20]
   3a1a0:	bne	3a300 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x1a0>
   3a1a4:	ldr	r2, [r0, #16]
   3a1a8:	cmp	r3, r2
   3a1ac:	bcs	3a2bc <flatcc_json_printer_uint32_enum_struct_field@@Base+0x15c>
   3a1b0:	mov	r2, #34	; 0x22
   3a1b4:	strb	r2, [r3]
   3a1b8:	ldrb	r3, [r4, #26]
   3a1bc:	ldr	r0, [r4, #20]
   3a1c0:	ldr	r5, [r4, #16]
   3a1c4:	cmp	r3, #0
   3a1c8:	addeq	r0, r0, #1
   3a1cc:	add	r3, r0, sl
   3a1d0:	cmp	r5, r3
   3a1d4:	str	r0, [r4, #20]
   3a1d8:	bhi	3a2cc <flatcc_json_printer_uint32_enum_struct_field@@Base+0x16c>
   3a1dc:	cmp	r0, r5
   3a1e0:	bcs	3a31c <flatcc_json_printer_uint32_enum_struct_field@@Base+0x1bc>
   3a1e4:	sub	r5, r5, r0
   3a1e8:	cmp	sl, r5
   3a1ec:	bls	3a238 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xd8>
   3a1f0:	mov	sl, #0
   3a1f4:	mov	r2, r5
   3a1f8:	mov	r1, r6
   3a1fc:	bl	1454c <memcpy@plt>
   3a200:	ldr	r3, [r4, #20]
   3a204:	mov	r0, r4
   3a208:	add	r3, r3, r5
   3a20c:	str	r3, [r4, #20]
   3a210:	ldr	r2, [r4, #44]	; 0x2c
   3a214:	mov	r1, sl
   3a218:	blx	r2
   3a21c:	ldr	r0, [r4, #20]
   3a220:	ldr	r3, [r4, #16]
   3a224:	sub	r7, r7, r5
   3a228:	add	r6, r6, r5
   3a22c:	sub	r5, r3, r0
   3a230:	cmp	r7, r5
   3a234:	bhi	3a1f4 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x94>
   3a238:	mov	r1, r6
   3a23c:	mov	r2, r7
   3a240:	bl	1454c <memcpy@plt>
   3a244:	ldr	sl, [r4, #20]
   3a248:	add	sl, sl, r7
   3a24c:	str	sl, [r4, #20]
   3a250:	mov	r3, #34	; 0x22
   3a254:	strb	r3, [sl]
   3a258:	ldr	r1, [r4, #20]
   3a25c:	ldrb	r3, [r4, #26]
   3a260:	clz	r3, r3
   3a264:	lsr	r3, r3, #5
   3a268:	add	r2, r1, r3
   3a26c:	add	r2, r2, #1
   3a270:	mov	r0, #58	; 0x3a
   3a274:	str	r2, [r4, #20]
   3a278:	strb	r0, [r1, r3]
   3a27c:	ldr	r3, [r4, #20]
   3a280:	mov	r2, #32
   3a284:	strb	r2, [r3]
   3a288:	ldrb	r2, [r4, #25]
   3a28c:	ldrb	r3, [r4, #27]
   3a290:	ldr	r1, [r4, #20]
   3a294:	cmp	r2, #0
   3a298:	addne	r1, r1, #1
   3a29c:	cmp	r3, #0
   3a2a0:	str	r1, [r4, #20]
   3a2a4:	bne	3a2e8 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x188>
   3a2a8:	mov	r1, r8
   3a2ac:	mov	r0, r4
   3a2b0:	mov	r3, r9
   3a2b4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a2b8:	bx	r3
   3a2bc:	ldr	r3, [r0, #44]	; 0x2c
   3a2c0:	blx	r3
   3a2c4:	ldr	r3, [r4, #20]
   3a2c8:	b	3a1b0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x50>
   3a2cc:	mov	r2, sl
   3a2d0:	mov	r1, r6
   3a2d4:	bl	1454c <memcpy@plt>
   3a2d8:	ldr	r7, [r4, #20]
   3a2dc:	add	sl, r7, sl
   3a2e0:	str	sl, [r4, #20]
   3a2e4:	b	3a250 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xf0>
   3a2e8:	mov	r0, r8
   3a2ec:	bl	33d38 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   3a2f0:	ldr	r3, [r4, #20]
   3a2f4:	add	r0, r3, r0
   3a2f8:	str	r0, [r4, #20]
   3a2fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a300:	add	r1, r3, #1
   3a304:	mov	r2, #10
   3a308:	str	r1, [r0, #20]
   3a30c:	strb	r2, [r3]
   3a310:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3a314:	ldr	r3, [r4, #20]
   3a318:	b	3a1b0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x50>
   3a31c:	mov	r0, r4
   3a320:	ldr	r3, [r4, #44]	; 0x2c
   3a324:	mov	r1, #0
   3a328:	blx	r3
   3a32c:	ldr	r5, [r4, #16]
   3a330:	ldr	r0, [r4, #20]
   3a334:	b	3a1e4 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x84>

0003a338 <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   3a338:	cmp	r1, #0
   3a33c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a340:	sub	sp, sp, #4
   3a344:	ldrd	r6, [r2, r3]
   3a348:	ldrne	r3, [r0, #20]
   3a34c:	add	r8, sp, #40	; 0x28
   3a350:	addne	r1, r3, #1
   3a354:	movne	r2, #44	; 0x2c
   3a358:	strne	r1, [r0, #20]
   3a35c:	ldm	r8, {r8, r9, sl}
   3a360:	mov	r4, r0
   3a364:	strbne	r2, [r3]
   3a368:	ldrb	r1, [r0, #25]
   3a36c:	mov	fp, r9
   3a370:	ldr	r3, [r0, #20]
   3a374:	cmp	r1, #0
   3a378:	bne	3a4e8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x1b0>
   3a37c:	ldr	r2, [r0, #16]
   3a380:	cmp	r3, r2
   3a384:	bcs	3a49c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x164>
   3a388:	mov	r2, #34	; 0x22
   3a38c:	strb	r2, [r3]
   3a390:	ldrb	r3, [r4, #26]
   3a394:	ldr	r0, [r4, #20]
   3a398:	ldr	r5, [r4, #16]
   3a39c:	cmp	r3, #0
   3a3a0:	addeq	r0, r0, #1
   3a3a4:	add	r3, r0, r9
   3a3a8:	cmp	r5, r3
   3a3ac:	str	r0, [r4, #20]
   3a3b0:	bhi	3a4ac <flatcc_json_printer_uint64_enum_struct_field@@Base+0x174>
   3a3b4:	cmp	r0, r5
   3a3b8:	bcs	3a504 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x1cc>
   3a3bc:	sub	r5, r5, r0
   3a3c0:	cmp	r9, r5
   3a3c4:	bls	3a410 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xd8>
   3a3c8:	mov	r9, #0
   3a3cc:	mov	r2, r5
   3a3d0:	mov	r1, r8
   3a3d4:	bl	1454c <memcpy@plt>
   3a3d8:	ldr	r3, [r4, #20]
   3a3dc:	mov	r0, r4
   3a3e0:	add	r3, r3, r5
   3a3e4:	str	r3, [r4, #20]
   3a3e8:	ldr	r2, [r4, #44]	; 0x2c
   3a3ec:	mov	r1, r9
   3a3f0:	blx	r2
   3a3f4:	ldr	r0, [r4, #20]
   3a3f8:	ldr	r3, [r4, #16]
   3a3fc:	sub	fp, fp, r5
   3a400:	add	r8, r8, r5
   3a404:	sub	r5, r3, r0
   3a408:	cmp	fp, r5
   3a40c:	bhi	3a3cc <flatcc_json_printer_uint64_enum_struct_field@@Base+0x94>
   3a410:	mov	r1, r8
   3a414:	mov	r2, fp
   3a418:	bl	1454c <memcpy@plt>
   3a41c:	ldr	r9, [r4, #20]
   3a420:	add	r9, r9, fp
   3a424:	str	r9, [r4, #20]
   3a428:	mov	r3, #34	; 0x22
   3a42c:	strb	r3, [r9]
   3a430:	ldr	r1, [r4, #20]
   3a434:	ldrb	r3, [r4, #26]
   3a438:	clz	r3, r3
   3a43c:	lsr	r3, r3, #5
   3a440:	add	r2, r1, r3
   3a444:	add	r2, r2, #1
   3a448:	mov	r0, #58	; 0x3a
   3a44c:	str	r2, [r4, #20]
   3a450:	strb	r0, [r1, r3]
   3a454:	ldr	r3, [r4, #20]
   3a458:	mov	r2, #32
   3a45c:	strb	r2, [r3]
   3a460:	ldrb	r1, [r4, #25]
   3a464:	ldrb	r3, [r4, #27]
   3a468:	ldr	r2, [r4, #20]
   3a46c:	cmp	r1, #0
   3a470:	addne	r2, r2, #1
   3a474:	cmp	r3, #0
   3a478:	str	r2, [r4, #20]
   3a47c:	bne	3a4c8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x190>
   3a480:	mov	r2, r6
   3a484:	mov	r3, r7
   3a488:	mov	r0, r4
   3a48c:	mov	r1, sl
   3a490:	add	sp, sp, #4
   3a494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a498:	bx	r1
   3a49c:	ldr	r3, [r0, #44]	; 0x2c
   3a4a0:	blx	r3
   3a4a4:	ldr	r3, [r4, #20]
   3a4a8:	b	3a388 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x50>
   3a4ac:	mov	r2, r9
   3a4b0:	mov	r1, r8
   3a4b4:	bl	1454c <memcpy@plt>
   3a4b8:	ldr	fp, [r4, #20]
   3a4bc:	add	r9, fp, r9
   3a4c0:	str	r9, [r4, #20]
   3a4c4:	b	3a428 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xf0>
   3a4c8:	mov	r0, r6
   3a4cc:	mov	r1, r7
   3a4d0:	bl	34060 <flatcc_json_parser_struct_as_root@@Base+0x564>
   3a4d4:	ldr	r3, [r4, #20]
   3a4d8:	add	r0, r3, r0
   3a4dc:	str	r0, [r4, #20]
   3a4e0:	add	sp, sp, #4
   3a4e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a4e8:	add	r1, r3, #1
   3a4ec:	mov	r2, #10
   3a4f0:	str	r1, [r0, #20]
   3a4f4:	strb	r2, [r3]
   3a4f8:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3a4fc:	ldr	r3, [r4, #20]
   3a500:	b	3a388 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x50>
   3a504:	mov	r0, r4
   3a508:	ldr	r3, [r4, #44]	; 0x2c
   3a50c:	mov	r1, #0
   3a510:	blx	r3
   3a514:	ldr	r5, [r4, #16]
   3a518:	ldr	r0, [r4, #20]
   3a51c:	b	3a3bc <flatcc_json_printer_uint64_enum_struct_field@@Base+0x84>

0003a520 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   3a520:	cmp	r1, #0
   3a524:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a528:	mov	r4, r0
   3a52c:	ldrsb	r6, [r2, r3]
   3a530:	ldrne	r3, [r0, #20]
   3a534:	movne	r2, #44	; 0x2c
   3a538:	addne	r1, r3, #1
   3a53c:	strne	r1, [r0, #20]
   3a540:	strbne	r2, [r3]
   3a544:	ldrb	r1, [r0, #25]
   3a548:	ldr	sl, [sp, #36]	; 0x24
   3a54c:	ldr	r7, [sp, #32]
   3a550:	cmp	r1, #0
   3a554:	ldr	r9, [sp, #40]	; 0x28
   3a558:	mov	r8, sl
   3a55c:	ldr	r3, [r0, #20]
   3a560:	bne	3a764 <flatcc_json_printer_int8_enum_struct_field@@Base+0x244>
   3a564:	ldr	r2, [r0, #16]
   3a568:	cmp	r3, r2
   3a56c:	bcs	3a6f0 <flatcc_json_printer_int8_enum_struct_field@@Base+0x1d0>
   3a570:	mov	r2, #34	; 0x22
   3a574:	strb	r2, [r3]
   3a578:	ldrb	r3, [r4, #26]
   3a57c:	ldr	r0, [r4, #20]
   3a580:	ldr	r5, [r4, #16]
   3a584:	cmp	r3, #0
   3a588:	addeq	r0, r0, #1
   3a58c:	add	r3, r0, sl
   3a590:	cmp	r5, r3
   3a594:	str	r0, [r4, #20]
   3a598:	bhi	3a700 <flatcc_json_printer_int8_enum_struct_field@@Base+0x1e0>
   3a59c:	cmp	r0, r5
   3a5a0:	bcs	3a798 <flatcc_json_printer_int8_enum_struct_field@@Base+0x278>
   3a5a4:	sub	r5, r5, r0
   3a5a8:	cmp	sl, r5
   3a5ac:	bls	3a5f8 <flatcc_json_printer_int8_enum_struct_field@@Base+0xd8>
   3a5b0:	mov	sl, #0
   3a5b4:	mov	r2, r5
   3a5b8:	mov	r1, r7
   3a5bc:	bl	1454c <memcpy@plt>
   3a5c0:	ldr	r3, [r4, #20]
   3a5c4:	mov	r0, r4
   3a5c8:	add	r3, r3, r5
   3a5cc:	str	r3, [r4, #20]
   3a5d0:	ldr	r2, [r4, #44]	; 0x2c
   3a5d4:	mov	r1, sl
   3a5d8:	blx	r2
   3a5dc:	ldr	r0, [r4, #20]
   3a5e0:	ldr	r3, [r4, #16]
   3a5e4:	sub	r8, r8, r5
   3a5e8:	add	r7, r7, r5
   3a5ec:	sub	r5, r3, r0
   3a5f0:	cmp	r8, r5
   3a5f4:	bhi	3a5b4 <flatcc_json_printer_int8_enum_struct_field@@Base+0x94>
   3a5f8:	mov	r1, r7
   3a5fc:	mov	r2, r8
   3a600:	bl	1454c <memcpy@plt>
   3a604:	ldr	sl, [r4, #20]
   3a608:	add	sl, sl, r8
   3a60c:	str	sl, [r4, #20]
   3a610:	mov	r3, #34	; 0x22
   3a614:	strb	r3, [sl]
   3a618:	ldr	r1, [r4, #20]
   3a61c:	ldrb	r3, [r4, #26]
   3a620:	clz	r3, r3
   3a624:	lsr	r3, r3, #5
   3a628:	add	r2, r1, r3
   3a62c:	add	r2, r2, #1
   3a630:	mov	r0, #58	; 0x3a
   3a634:	str	r2, [r4, #20]
   3a638:	strb	r0, [r1, r3]
   3a63c:	ldr	r3, [r4, #20]
   3a640:	mov	r2, #32
   3a644:	strb	r2, [r3]
   3a648:	ldrb	r2, [r4, #25]
   3a64c:	ldrb	r1, [r4, #27]
   3a650:	ldr	r0, [r4, #20]
   3a654:	adds	r2, r2, #0
   3a658:	movne	r2, #1
   3a65c:	add	r3, r0, r2
   3a660:	cmp	r1, #0
   3a664:	str	r3, [r4, #20]
   3a668:	beq	3a71c <flatcc_json_printer_int8_enum_struct_field@@Base+0x1fc>
   3a66c:	cmp	r6, #0
   3a670:	lsr	r1, r6, #31
   3a674:	rsblt	r6, r6, #0
   3a678:	movlt	ip, #45	; 0x2d
   3a67c:	sxtblt	r6, r6
   3a680:	addlt	r3, r3, #1
   3a684:	uxtb	r6, r6
   3a688:	strblt	ip, [r0, r2]
   3a68c:	cmp	r6, #99	; 0x63
   3a690:	bls	3a730 <flatcc_json_printer_int8_enum_struct_field@@Base+0x210>
   3a694:	ldr	r2, [pc, #280]	; 3a7b4 <flatcc_json_printer_int8_enum_struct_field@@Base+0x294>
   3a698:	mov	ip, #100	; 0x64
   3a69c:	ldr	r0, [pc, #276]	; 3a7b8 <flatcc_json_printer_int8_enum_struct_field@@Base+0x298>
   3a6a0:	umull	lr, r2, r2, r6
   3a6a4:	mov	lr, #0
   3a6a8:	lsr	r2, r2, #5
   3a6ac:	strb	lr, [r3, #3]
   3a6b0:	mul	r2, ip, r2
   3a6b4:	mov	ip, #49	; 0x31
   3a6b8:	sub	r6, r6, r2
   3a6bc:	mov	r2, #3
   3a6c0:	uxtb	r6, r6
   3a6c4:	ldrb	lr, [r0, r6, lsl #1]
   3a6c8:	add	r6, r0, r6, lsl #1
   3a6cc:	strb	lr, [r3, #1]
   3a6d0:	ldrb	r0, [r6, #1]
   3a6d4:	strb	ip, [r3]
   3a6d8:	strb	r0, [r3, #2]
   3a6dc:	ldr	r3, [r4, #20]
   3a6e0:	add	r2, r1, r2
   3a6e4:	add	r3, r3, r2
   3a6e8:	str	r3, [r4, #20]
   3a6ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a6f0:	ldr	r3, [r0, #44]	; 0x2c
   3a6f4:	blx	r3
   3a6f8:	ldr	r3, [r4, #20]
   3a6fc:	b	3a570 <flatcc_json_printer_int8_enum_struct_field@@Base+0x50>
   3a700:	mov	r2, sl
   3a704:	mov	r1, r7
   3a708:	bl	1454c <memcpy@plt>
   3a70c:	ldr	r8, [r4, #20]
   3a710:	add	sl, r8, sl
   3a714:	str	sl, [r4, #20]
   3a718:	b	3a610 <flatcc_json_printer_int8_enum_struct_field@@Base+0xf0>
   3a71c:	mov	r1, r6
   3a720:	mov	r0, r4
   3a724:	mov	r3, r9
   3a728:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a72c:	bx	r3
   3a730:	cmp	r6, #9
   3a734:	bls	3a780 <flatcc_json_printer_int8_enum_struct_field@@Base+0x260>
   3a738:	ldr	r2, [pc, #120]	; 3a7b8 <flatcc_json_printer_int8_enum_struct_field@@Base+0x298>
   3a73c:	sxth	r6, r6
   3a740:	mov	r0, #0
   3a744:	strb	r0, [r3, #2]
   3a748:	ldrb	r0, [r2, r6, lsl #1]
   3a74c:	add	r6, r2, r6, lsl #1
   3a750:	mov	r2, #2
   3a754:	strb	r0, [r3]
   3a758:	ldrb	r0, [r6, #1]
   3a75c:	strb	r0, [r3, #1]
   3a760:	b	3a6dc <flatcc_json_printer_int8_enum_struct_field@@Base+0x1bc>
   3a764:	add	r1, r3, #1
   3a768:	mov	r2, #10
   3a76c:	str	r1, [r0, #20]
   3a770:	strb	r2, [r3]
   3a774:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3a778:	ldr	r3, [r4, #20]
   3a77c:	b	3a570 <flatcc_json_printer_int8_enum_struct_field@@Base+0x50>
   3a780:	add	r6, r6, #48	; 0x30
   3a784:	mov	r0, #0
   3a788:	mov	r2, #1
   3a78c:	strb	r6, [r3]
   3a790:	strb	r0, [r3, #1]
   3a794:	b	3a6dc <flatcc_json_printer_int8_enum_struct_field@@Base+0x1bc>
   3a798:	mov	r0, r4
   3a79c:	ldr	r3, [r4, #44]	; 0x2c
   3a7a0:	mov	r1, #0
   3a7a4:	blx	r3
   3a7a8:	ldr	r5, [r4, #16]
   3a7ac:	ldr	r0, [r4, #20]
   3a7b0:	b	3a5a4 <flatcc_json_printer_int8_enum_struct_field@@Base+0x84>
   3a7b4:	mvnpl	r8, pc, lsl r5
   3a7b8:	andeq	r6, r4, r0, lsl #9

0003a7bc <flatcc_json_printer_int16_enum_struct_field@@Base>:
   3a7bc:	cmp	r1, #0
   3a7c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a7c4:	mov	r4, r0
   3a7c8:	ldrsh	r8, [r2, r3]
   3a7cc:	ldrne	r3, [r0, #20]
   3a7d0:	movne	r2, #44	; 0x2c
   3a7d4:	addne	r1, r3, #1
   3a7d8:	strne	r1, [r0, #20]
   3a7dc:	strbne	r2, [r3]
   3a7e0:	ldrb	r1, [r0, #25]
   3a7e4:	ldr	sl, [sp, #36]	; 0x24
   3a7e8:	ldr	r6, [sp, #32]
   3a7ec:	cmp	r1, #0
   3a7f0:	ldr	r9, [sp, #40]	; 0x28
   3a7f4:	mov	r7, sl
   3a7f8:	ldr	r3, [r0, #20]
   3a7fc:	bne	3a980 <flatcc_json_printer_int16_enum_struct_field@@Base+0x1c4>
   3a800:	ldr	r2, [r0, #16]
   3a804:	cmp	r3, r2
   3a808:	bcs	3a940 <flatcc_json_printer_int16_enum_struct_field@@Base+0x184>
   3a80c:	mov	r2, #34	; 0x22
   3a810:	strb	r2, [r3]
   3a814:	ldrb	r3, [r4, #26]
   3a818:	ldr	r0, [r4, #20]
   3a81c:	ldr	r5, [r4, #16]
   3a820:	cmp	r3, #0
   3a824:	addeq	r0, r0, #1
   3a828:	add	r3, r0, sl
   3a82c:	cmp	r5, r3
   3a830:	str	r0, [r4, #20]
   3a834:	bhi	3a950 <flatcc_json_printer_int16_enum_struct_field@@Base+0x194>
   3a838:	cmp	r0, r5
   3a83c:	bcs	3a99c <flatcc_json_printer_int16_enum_struct_field@@Base+0x1e0>
   3a840:	sub	r5, r5, r0
   3a844:	cmp	sl, r5
   3a848:	bls	3a894 <flatcc_json_printer_int16_enum_struct_field@@Base+0xd8>
   3a84c:	mov	sl, #0
   3a850:	mov	r2, r5
   3a854:	mov	r1, r6
   3a858:	bl	1454c <memcpy@plt>
   3a85c:	ldr	r3, [r4, #20]
   3a860:	mov	r0, r4
   3a864:	add	r3, r3, r5
   3a868:	str	r3, [r4, #20]
   3a86c:	ldr	r2, [r4, #44]	; 0x2c
   3a870:	mov	r1, sl
   3a874:	blx	r2
   3a878:	ldr	r0, [r4, #20]
   3a87c:	ldr	r3, [r4, #16]
   3a880:	sub	r7, r7, r5
   3a884:	add	r6, r6, r5
   3a888:	sub	r5, r3, r0
   3a88c:	cmp	r7, r5
   3a890:	bhi	3a850 <flatcc_json_printer_int16_enum_struct_field@@Base+0x94>
   3a894:	mov	r1, r6
   3a898:	mov	r2, r7
   3a89c:	bl	1454c <memcpy@plt>
   3a8a0:	ldr	sl, [r4, #20]
   3a8a4:	add	sl, sl, r7
   3a8a8:	str	sl, [r4, #20]
   3a8ac:	mov	r3, #34	; 0x22
   3a8b0:	strb	r3, [sl]
   3a8b4:	ldr	r1, [r4, #20]
   3a8b8:	ldrb	r3, [r4, #26]
   3a8bc:	clz	r3, r3
   3a8c0:	lsr	r3, r3, #5
   3a8c4:	add	r2, r1, r3
   3a8c8:	add	r2, r2, #1
   3a8cc:	mov	r0, #58	; 0x3a
   3a8d0:	str	r2, [r4, #20]
   3a8d4:	strb	r0, [r1, r3]
   3a8d8:	ldr	r3, [r4, #20]
   3a8dc:	mov	r2, #32
   3a8e0:	strb	r2, [r3]
   3a8e4:	ldrb	r3, [r4, #25]
   3a8e8:	ldrb	r0, [r4, #27]
   3a8ec:	ldr	r2, [r4, #20]
   3a8f0:	adds	r3, r3, #0
   3a8f4:	movne	r3, #1
   3a8f8:	add	r1, r2, r3
   3a8fc:	cmp	r0, #0
   3a900:	str	r1, [r4, #20]
   3a904:	beq	3a96c <flatcc_json_printer_int16_enum_struct_field@@Base+0x1b0>
   3a908:	cmp	r8, #0
   3a90c:	lsr	r5, r8, #31
   3a910:	rsblt	r8, r8, #0
   3a914:	movlt	r0, #45	; 0x2d
   3a918:	sxthlt	r8, r8
   3a91c:	strblt	r0, [r2, r3]
   3a920:	addlt	r1, r1, #1
   3a924:	uxth	r0, r8
   3a928:	bl	33bd0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   3a92c:	ldr	r3, [r4, #20]
   3a930:	add	r0, r5, r0
   3a934:	add	r3, r3, r0
   3a938:	str	r3, [r4, #20]
   3a93c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a940:	ldr	r3, [r0, #44]	; 0x2c
   3a944:	blx	r3
   3a948:	ldr	r3, [r4, #20]
   3a94c:	b	3a80c <flatcc_json_printer_int16_enum_struct_field@@Base+0x50>
   3a950:	mov	r2, sl
   3a954:	mov	r1, r6
   3a958:	bl	1454c <memcpy@plt>
   3a95c:	ldr	r7, [r4, #20]
   3a960:	add	sl, r7, sl
   3a964:	str	sl, [r4, #20]
   3a968:	b	3a8ac <flatcc_json_printer_int16_enum_struct_field@@Base+0xf0>
   3a96c:	mov	r1, r8
   3a970:	mov	r0, r4
   3a974:	mov	r3, r9
   3a978:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a97c:	bx	r3
   3a980:	add	r1, r3, #1
   3a984:	mov	r2, #10
   3a988:	str	r1, [r0, #20]
   3a98c:	strb	r2, [r3]
   3a990:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3a994:	ldr	r3, [r4, #20]
   3a998:	b	3a80c <flatcc_json_printer_int16_enum_struct_field@@Base+0x50>
   3a99c:	mov	r0, r4
   3a9a0:	ldr	r3, [r4, #44]	; 0x2c
   3a9a4:	mov	r1, #0
   3a9a8:	blx	r3
   3a9ac:	ldr	r5, [r4, #16]
   3a9b0:	ldr	r0, [r4, #20]
   3a9b4:	b	3a840 <flatcc_json_printer_int16_enum_struct_field@@Base+0x84>

0003a9b8 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   3a9b8:	cmp	r1, #0
   3a9bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a9c0:	mov	r4, r0
   3a9c4:	ldr	r8, [r2, r3]
   3a9c8:	ldrne	r3, [r0, #20]
   3a9cc:	movne	r2, #44	; 0x2c
   3a9d0:	addne	r1, r3, #1
   3a9d4:	strne	r1, [r0, #20]
   3a9d8:	strbne	r2, [r3]
   3a9dc:	ldrb	r1, [r0, #25]
   3a9e0:	ldr	sl, [sp, #36]	; 0x24
   3a9e4:	ldr	r6, [sp, #32]
   3a9e8:	cmp	r1, #0
   3a9ec:	ldr	r9, [sp, #40]	; 0x28
   3a9f0:	mov	r7, sl
   3a9f4:	ldr	r3, [r0, #20]
   3a9f8:	bne	3ab78 <flatcc_json_printer_int32_enum_struct_field@@Base+0x1c0>
   3a9fc:	ldr	r2, [r0, #16]
   3aa00:	cmp	r3, r2
   3aa04:	bcs	3ab38 <flatcc_json_printer_int32_enum_struct_field@@Base+0x180>
   3aa08:	mov	r2, #34	; 0x22
   3aa0c:	strb	r2, [r3]
   3aa10:	ldrb	r3, [r4, #26]
   3aa14:	ldr	r0, [r4, #20]
   3aa18:	ldr	r5, [r4, #16]
   3aa1c:	cmp	r3, #0
   3aa20:	addeq	r0, r0, #1
   3aa24:	add	r3, r0, sl
   3aa28:	cmp	r5, r3
   3aa2c:	str	r0, [r4, #20]
   3aa30:	bhi	3ab48 <flatcc_json_printer_int32_enum_struct_field@@Base+0x190>
   3aa34:	cmp	r0, r5
   3aa38:	bcs	3ab94 <flatcc_json_printer_int32_enum_struct_field@@Base+0x1dc>
   3aa3c:	sub	r5, r5, r0
   3aa40:	cmp	sl, r5
   3aa44:	bls	3aa90 <flatcc_json_printer_int32_enum_struct_field@@Base+0xd8>
   3aa48:	mov	sl, #0
   3aa4c:	mov	r2, r5
   3aa50:	mov	r1, r6
   3aa54:	bl	1454c <memcpy@plt>
   3aa58:	ldr	r3, [r4, #20]
   3aa5c:	mov	r0, r4
   3aa60:	add	r3, r3, r5
   3aa64:	str	r3, [r4, #20]
   3aa68:	ldr	r2, [r4, #44]	; 0x2c
   3aa6c:	mov	r1, sl
   3aa70:	blx	r2
   3aa74:	ldr	r0, [r4, #20]
   3aa78:	ldr	r3, [r4, #16]
   3aa7c:	sub	r7, r7, r5
   3aa80:	add	r6, r6, r5
   3aa84:	sub	r5, r3, r0
   3aa88:	cmp	r7, r5
   3aa8c:	bhi	3aa4c <flatcc_json_printer_int32_enum_struct_field@@Base+0x94>
   3aa90:	mov	r1, r6
   3aa94:	mov	r2, r7
   3aa98:	bl	1454c <memcpy@plt>
   3aa9c:	ldr	sl, [r4, #20]
   3aaa0:	add	sl, sl, r7
   3aaa4:	str	sl, [r4, #20]
   3aaa8:	mov	r3, #34	; 0x22
   3aaac:	strb	r3, [sl]
   3aab0:	ldr	r1, [r4, #20]
   3aab4:	ldrb	r3, [r4, #26]
   3aab8:	clz	r3, r3
   3aabc:	lsr	r3, r3, #5
   3aac0:	add	r2, r1, r3
   3aac4:	add	r2, r2, #1
   3aac8:	mov	r0, #58	; 0x3a
   3aacc:	str	r2, [r4, #20]
   3aad0:	strb	r0, [r1, r3]
   3aad4:	ldr	r3, [r4, #20]
   3aad8:	mov	r2, #32
   3aadc:	strb	r2, [r3]
   3aae0:	ldrb	r3, [r4, #25]
   3aae4:	ldrb	r0, [r4, #27]
   3aae8:	ldr	r2, [r4, #20]
   3aaec:	adds	r3, r3, #0
   3aaf0:	movne	r3, #1
   3aaf4:	add	r1, r2, r3
   3aaf8:	cmp	r0, #0
   3aafc:	str	r1, [r4, #20]
   3ab00:	beq	3ab64 <flatcc_json_printer_int32_enum_struct_field@@Base+0x1ac>
   3ab04:	cmp	r8, #0
   3ab08:	movlt	r0, #45	; 0x2d
   3ab0c:	lsr	r5, r8, #31
   3ab10:	rsblt	r8, r8, #0
   3ab14:	strblt	r0, [r2, r3]
   3ab18:	addlt	r1, r1, #1
   3ab1c:	mov	r0, r8
   3ab20:	bl	33d38 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   3ab24:	ldr	r3, [r4, #20]
   3ab28:	add	r0, r5, r0
   3ab2c:	add	r3, r3, r0
   3ab30:	str	r3, [r4, #20]
   3ab34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ab38:	ldr	r3, [r0, #44]	; 0x2c
   3ab3c:	blx	r3
   3ab40:	ldr	r3, [r4, #20]
   3ab44:	b	3aa08 <flatcc_json_printer_int32_enum_struct_field@@Base+0x50>
   3ab48:	mov	r2, sl
   3ab4c:	mov	r1, r6
   3ab50:	bl	1454c <memcpy@plt>
   3ab54:	ldr	r7, [r4, #20]
   3ab58:	add	sl, r7, sl
   3ab5c:	str	sl, [r4, #20]
   3ab60:	b	3aaa8 <flatcc_json_printer_int32_enum_struct_field@@Base+0xf0>
   3ab64:	mov	r1, r8
   3ab68:	mov	r0, r4
   3ab6c:	mov	r3, r9
   3ab70:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3ab74:	bx	r3
   3ab78:	add	r1, r3, #1
   3ab7c:	mov	r2, #10
   3ab80:	str	r1, [r0, #20]
   3ab84:	strb	r2, [r3]
   3ab88:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3ab8c:	ldr	r3, [r4, #20]
   3ab90:	b	3aa08 <flatcc_json_printer_int32_enum_struct_field@@Base+0x50>
   3ab94:	mov	r0, r4
   3ab98:	ldr	r3, [r4, #44]	; 0x2c
   3ab9c:	mov	r1, #0
   3aba0:	blx	r3
   3aba4:	ldr	r5, [r4, #16]
   3aba8:	ldr	r0, [r4, #20]
   3abac:	b	3aa3c <flatcc_json_printer_int32_enum_struct_field@@Base+0x84>

0003abb0 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   3abb0:	cmp	r1, #0
   3abb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3abb8:	sub	sp, sp, #4
   3abbc:	ldrd	r6, [r2, r3]
   3abc0:	ldrne	r3, [r0, #20]
   3abc4:	add	r8, sp, #40	; 0x28
   3abc8:	addne	r1, r3, #1
   3abcc:	movne	r2, #44	; 0x2c
   3abd0:	strne	r1, [r0, #20]
   3abd4:	ldm	r8, {r8, r9, sl}
   3abd8:	mov	r4, r0
   3abdc:	strbne	r2, [r3]
   3abe0:	ldrb	r1, [r0, #25]
   3abe4:	mov	fp, r9
   3abe8:	ldr	r3, [r0, #20]
   3abec:	cmp	r1, #0
   3abf0:	bne	3ad8c <flatcc_json_printer_int64_enum_struct_field@@Base+0x1dc>
   3abf4:	ldr	r2, [r0, #16]
   3abf8:	cmp	r3, r2
   3abfc:	bcs	3ad44 <flatcc_json_printer_int64_enum_struct_field@@Base+0x194>
   3ac00:	mov	r2, #34	; 0x22
   3ac04:	strb	r2, [r3]
   3ac08:	ldrb	r3, [r4, #26]
   3ac0c:	ldr	r0, [r4, #20]
   3ac10:	ldr	r5, [r4, #16]
   3ac14:	cmp	r3, #0
   3ac18:	addeq	r0, r0, #1
   3ac1c:	add	r3, r0, r9
   3ac20:	cmp	r5, r3
   3ac24:	str	r0, [r4, #20]
   3ac28:	bhi	3ad54 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1a4>
   3ac2c:	cmp	r0, r5
   3ac30:	bcs	3ada8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1f8>
   3ac34:	sub	r5, r5, r0
   3ac38:	cmp	r9, r5
   3ac3c:	bls	3ac88 <flatcc_json_printer_int64_enum_struct_field@@Base+0xd8>
   3ac40:	mov	r9, #0
   3ac44:	mov	r2, r5
   3ac48:	mov	r1, r8
   3ac4c:	bl	1454c <memcpy@plt>
   3ac50:	ldr	r3, [r4, #20]
   3ac54:	mov	r0, r4
   3ac58:	add	r3, r3, r5
   3ac5c:	str	r3, [r4, #20]
   3ac60:	ldr	r2, [r4, #44]	; 0x2c
   3ac64:	mov	r1, r9
   3ac68:	blx	r2
   3ac6c:	ldr	r0, [r4, #20]
   3ac70:	ldr	r3, [r4, #16]
   3ac74:	sub	fp, fp, r5
   3ac78:	add	r8, r8, r5
   3ac7c:	sub	r5, r3, r0
   3ac80:	cmp	fp, r5
   3ac84:	bhi	3ac44 <flatcc_json_printer_int64_enum_struct_field@@Base+0x94>
   3ac88:	mov	r1, r8
   3ac8c:	mov	r2, fp
   3ac90:	bl	1454c <memcpy@plt>
   3ac94:	ldr	r9, [r4, #20]
   3ac98:	add	r9, r9, fp
   3ac9c:	str	r9, [r4, #20]
   3aca0:	mov	r3, #34	; 0x22
   3aca4:	strb	r3, [r9]
   3aca8:	ldr	r1, [r4, #20]
   3acac:	ldrb	r3, [r4, #26]
   3acb0:	clz	r3, r3
   3acb4:	lsr	r3, r3, #5
   3acb8:	add	r2, r1, r3
   3acbc:	add	r2, r2, #1
   3acc0:	mov	r0, #58	; 0x3a
   3acc4:	str	r2, [r4, #20]
   3acc8:	strb	r0, [r1, r3]
   3accc:	ldr	r3, [r4, #20]
   3acd0:	mov	r2, #32
   3acd4:	strb	r2, [r3]
   3acd8:	ldrb	r3, [r4, #25]
   3acdc:	ldrb	r0, [r4, #27]
   3ace0:	ldr	r1, [r4, #20]
   3ace4:	adds	r3, r3, #0
   3ace8:	movne	r3, #1
   3acec:	add	r2, r1, r3
   3acf0:	cmp	r0, #0
   3acf4:	str	r2, [r4, #20]
   3acf8:	beq	3ad70 <flatcc_json_printer_int64_enum_struct_field@@Base+0x1c0>
   3acfc:	cmp	r6, #0
   3ad00:	sbcs	r0, r7, #0
   3ad04:	lsr	r5, r7, #31
   3ad08:	bge	3ad20 <flatcc_json_printer_int64_enum_struct_field@@Base+0x170>
   3ad0c:	rsbs	r6, r6, #0
   3ad10:	rsc	r7, r7, #0
   3ad14:	add	r2, r2, #1
   3ad18:	mov	r0, #45	; 0x2d
   3ad1c:	strb	r0, [r1, r3]
   3ad20:	mov	r0, r6
   3ad24:	mov	r1, r7
   3ad28:	bl	34060 <flatcc_json_parser_struct_as_root@@Base+0x564>
   3ad2c:	ldr	r3, [r4, #20]
   3ad30:	add	r0, r5, r0
   3ad34:	add	r3, r3, r0
   3ad38:	str	r3, [r4, #20]
   3ad3c:	add	sp, sp, #4
   3ad40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ad44:	ldr	r3, [r0, #44]	; 0x2c
   3ad48:	blx	r3
   3ad4c:	ldr	r3, [r4, #20]
   3ad50:	b	3ac00 <flatcc_json_printer_int64_enum_struct_field@@Base+0x50>
   3ad54:	mov	r2, r9
   3ad58:	mov	r1, r8
   3ad5c:	bl	1454c <memcpy@plt>
   3ad60:	ldr	fp, [r4, #20]
   3ad64:	add	r9, fp, r9
   3ad68:	str	r9, [r4, #20]
   3ad6c:	b	3aca0 <flatcc_json_printer_int64_enum_struct_field@@Base+0xf0>
   3ad70:	mov	r2, r6
   3ad74:	mov	r3, r7
   3ad78:	mov	r0, r4
   3ad7c:	mov	r1, sl
   3ad80:	add	sp, sp, #4
   3ad84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ad88:	bx	r1
   3ad8c:	add	r1, r3, #1
   3ad90:	mov	r2, #10
   3ad94:	str	r1, [r0, #20]
   3ad98:	strb	r2, [r3]
   3ad9c:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3ada0:	ldr	r3, [r4, #20]
   3ada4:	b	3ac00 <flatcc_json_printer_int64_enum_struct_field@@Base+0x50>
   3ada8:	mov	r0, r4
   3adac:	ldr	r3, [r4, #44]	; 0x2c
   3adb0:	mov	r1, #0
   3adb4:	blx	r3
   3adb8:	ldr	r5, [r4, #16]
   3adbc:	ldr	r0, [r4, #20]
   3adc0:	b	3ac34 <flatcc_json_printer_int64_enum_struct_field@@Base+0x84>

0003adc4 <flatcc_json_printer_bool_enum_struct_field@@Base>:
   3adc4:	cmp	r1, #0
   3adc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3adcc:	mov	r4, r0
   3add0:	ldrb	r8, [r2, r3]
   3add4:	ldrne	r3, [r0, #20]
   3add8:	movne	r2, #44	; 0x2c
   3addc:	addne	r1, r3, #1
   3ade0:	strne	r1, [r0, #20]
   3ade4:	strbne	r2, [r3]
   3ade8:	ldrb	r1, [r0, #25]
   3adec:	ldr	sl, [sp, #36]	; 0x24
   3adf0:	ldr	r6, [sp, #32]
   3adf4:	cmp	r1, #0
   3adf8:	ldr	r9, [sp, #40]	; 0x28
   3adfc:	mov	r7, sl
   3ae00:	ldr	r3, [r0, #20]
   3ae04:	bne	3af84 <flatcc_json_printer_bool_enum_struct_field@@Base+0x1c0>
   3ae08:	ldr	r2, [r0, #16]
   3ae0c:	cmp	r3, r2
   3ae10:	bcs	3af24 <flatcc_json_printer_bool_enum_struct_field@@Base+0x160>
   3ae14:	mov	r2, #34	; 0x22
   3ae18:	strb	r2, [r3]
   3ae1c:	ldrb	r3, [r4, #26]
   3ae20:	ldr	r0, [r4, #20]
   3ae24:	ldr	r5, [r4, #16]
   3ae28:	cmp	r3, #0
   3ae2c:	addeq	r0, r0, #1
   3ae30:	add	r3, r0, sl
   3ae34:	cmp	r5, r3
   3ae38:	str	r0, [r4, #20]
   3ae3c:	bhi	3af34 <flatcc_json_printer_bool_enum_struct_field@@Base+0x170>
   3ae40:	cmp	r0, r5
   3ae44:	bcs	3afa0 <flatcc_json_printer_bool_enum_struct_field@@Base+0x1dc>
   3ae48:	sub	r5, r5, r0
   3ae4c:	cmp	sl, r5
   3ae50:	bls	3ae9c <flatcc_json_printer_bool_enum_struct_field@@Base+0xd8>
   3ae54:	mov	sl, #0
   3ae58:	mov	r2, r5
   3ae5c:	mov	r1, r6
   3ae60:	bl	1454c <memcpy@plt>
   3ae64:	ldr	r3, [r4, #20]
   3ae68:	mov	r0, r4
   3ae6c:	add	r3, r3, r5
   3ae70:	str	r3, [r4, #20]
   3ae74:	ldr	r2, [r4, #44]	; 0x2c
   3ae78:	mov	r1, sl
   3ae7c:	blx	r2
   3ae80:	ldr	r0, [r4, #20]
   3ae84:	ldr	r3, [r4, #16]
   3ae88:	sub	r7, r7, r5
   3ae8c:	add	r6, r6, r5
   3ae90:	sub	r5, r3, r0
   3ae94:	cmp	r7, r5
   3ae98:	bhi	3ae58 <flatcc_json_printer_bool_enum_struct_field@@Base+0x94>
   3ae9c:	mov	r1, r6
   3aea0:	mov	r2, r7
   3aea4:	bl	1454c <memcpy@plt>
   3aea8:	ldr	sl, [r4, #20]
   3aeac:	add	sl, sl, r7
   3aeb0:	str	sl, [r4, #20]
   3aeb4:	mov	r3, #34	; 0x22
   3aeb8:	strb	r3, [sl]
   3aebc:	ldr	r1, [r4, #20]
   3aec0:	ldrb	r3, [r4, #26]
   3aec4:	clz	r3, r3
   3aec8:	lsr	r3, r3, #5
   3aecc:	add	r2, r1, r3
   3aed0:	add	r2, r2, #1
   3aed4:	mov	r0, #58	; 0x3a
   3aed8:	str	r2, [r4, #20]
   3aedc:	strb	r0, [r1, r3]
   3aee0:	ldr	r3, [r4, #20]
   3aee4:	mov	r2, #32
   3aee8:	strb	r2, [r3]
   3aeec:	ldrb	r3, [r4, #25]
   3aef0:	ldrb	r0, [r4, #27]
   3aef4:	ldr	r1, [r4, #20]
   3aef8:	adds	r3, r3, #0
   3aefc:	movne	r3, #1
   3af00:	add	r2, r1, r3
   3af04:	cmp	r0, #0
   3af08:	str	r2, [r4, #20]
   3af0c:	bne	3af50 <flatcc_json_printer_bool_enum_struct_field@@Base+0x18c>
   3af10:	mov	r1, r8
   3af14:	mov	r0, r4
   3af18:	mov	r3, r9
   3af1c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3af20:	bx	r3
   3af24:	ldr	r3, [r0, #44]	; 0x2c
   3af28:	blx	r3
   3af2c:	ldr	r3, [r4, #20]
   3af30:	b	3ae14 <flatcc_json_printer_bool_enum_struct_field@@Base+0x50>
   3af34:	mov	r2, sl
   3af38:	mov	r1, r6
   3af3c:	bl	1454c <memcpy@plt>
   3af40:	ldr	r7, [r4, #20]
   3af44:	add	sl, r7, sl
   3af48:	str	sl, [r4, #20]
   3af4c:	b	3aeb4 <flatcc_json_printer_bool_enum_struct_field@@Base+0xf0>
   3af50:	cmp	r8, #0
   3af54:	ldr	r0, [pc, #120]	; 3afd4 <flatcc_json_printer_bool_enum_struct_field@@Base+0x210>
   3af58:	bne	3afbc <flatcc_json_printer_bool_enum_struct_field@@Base+0x1f8>
   3af5c:	add	lr, r0, #1792	; 0x700
   3af60:	mov	ip, #5
   3af64:	ldrh	lr, [lr, #4]
   3af68:	ldr	r0, [r0, #1792]	; 0x700
   3af6c:	str	r0, [r1, r3]
   3af70:	strh	lr, [r2, #4]
   3af74:	ldr	r3, [r4, #20]
   3af78:	add	r3, r3, ip
   3af7c:	str	r3, [r4, #20]
   3af80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3af84:	add	r1, r3, #1
   3af88:	mov	r2, #10
   3af8c:	str	r1, [r0, #20]
   3af90:	strb	r2, [r3]
   3af94:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3af98:	ldr	r3, [r4, #20]
   3af9c:	b	3ae14 <flatcc_json_printer_bool_enum_struct_field@@Base+0x50>
   3afa0:	mov	r0, r4
   3afa4:	ldr	r3, [r4, #44]	; 0x2c
   3afa8:	mov	r1, #0
   3afac:	blx	r3
   3afb0:	ldr	r5, [r4, #16]
   3afb4:	ldr	r0, [r4, #20]
   3afb8:	b	3ae48 <flatcc_json_printer_bool_enum_struct_field@@Base+0x84>
   3afbc:	ldrb	lr, [r0, #1788]	; 0x6fc
   3afc0:	ldr	r0, [r0, #1784]	; 0x6f8
   3afc4:	mov	ip, #4
   3afc8:	str	r0, [r1, r3]
   3afcc:	strb	lr, [r2, #4]
   3afd0:	b	3af74 <flatcc_json_printer_bool_enum_struct_field@@Base+0x1b0>
   3afd4:	andeq	r6, r4, r0, lsl #9

0003afd8 <flatcc_json_printer_uint8_vector_field@@Base>:
   3afd8:	add	r2, r2, #2
   3afdc:	ldr	ip, [r1, #8]
   3afe0:	lsl	r2, r2, #1
   3afe4:	cmp	ip, r2
   3afe8:	bxle	lr
   3afec:	ldr	ip, [r1, #4]
   3aff0:	ldrh	ip, [ip, r2]
   3aff4:	cmp	ip, #0
   3aff8:	bxeq	lr
   3affc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b000:	sub	sp, sp, #12
   3b004:	ldr	r5, [r1]
   3b008:	adds	lr, r5, ip
   3b00c:	beq	3b098 <flatcc_json_printer_uint8_vector_field@@Base+0xc0>
   3b010:	ldr	r2, [r1, #16]
   3b014:	cmp	r2, #0
   3b018:	add	r2, r2, #1
   3b01c:	str	r2, [r1, #16]
   3b020:	ldrne	r2, [r0, #20]
   3b024:	movne	r1, #44	; 0x2c
   3b028:	addne	r4, r2, #1
   3b02c:	strne	r4, [r0, #20]
   3b030:	strbne	r1, [r2]
   3b034:	mov	r1, r3
   3b038:	ldr	r3, [r5, ip]
   3b03c:	mov	r4, r0
   3b040:	ldr	r2, [sp, #48]	; 0x30
   3b044:	ldr	sl, [lr, r3]
   3b048:	add	fp, lr, r3
   3b04c:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3b050:	ldr	r3, [r4, #32]
   3b054:	ldr	r2, [r4, #20]
   3b058:	add	r3, r3, #1
   3b05c:	add	r0, r2, #1
   3b060:	mov	r1, #91	; 0x5b
   3b064:	cmp	sl, #0
   3b068:	str	r3, [r4, #32]
   3b06c:	str	r0, [r4, #20]
   3b070:	strb	r1, [r2]
   3b074:	bne	3b0a0 <flatcc_json_printer_uint8_vector_field@@Base+0xc8>
   3b078:	ldr	r0, [r4, #20]
   3b07c:	ldrb	r3, [r4, #25]
   3b080:	cmp	r3, #0
   3b084:	bne	3b2a0 <flatcc_json_printer_uint8_vector_field@@Base+0x2c8>
   3b088:	add	r2, r0, #1
   3b08c:	mov	r3, #93	; 0x5d
   3b090:	str	r2, [r4, #20]
   3b094:	strb	r3, [r0]
   3b098:	add	sp, sp, #12
   3b09c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b0a0:	ldrb	r3, [r4, #25]
   3b0a4:	cmp	r3, #0
   3b0a8:	bne	3b2cc <flatcc_json_printer_uint8_vector_field@@Base+0x2f4>
   3b0ac:	ldr	r1, [r4, #20]
   3b0b0:	ldr	r2, [r4, #16]
   3b0b4:	cmp	r1, r2
   3b0b8:	bcs	3b2f0 <flatcc_json_printer_uint8_vector_field@@Base+0x318>
   3b0bc:	ldrb	r0, [fp, #4]
   3b0c0:	bl	3491c <flatcc_json_parser_struct_as_root@@Base+0xe20>
   3b0c4:	ldr	r3, [r4, #20]
   3b0c8:	cmp	sl, #1
   3b0cc:	add	r6, fp, #4
   3b0d0:	add	r0, r3, r0
   3b0d4:	str	r0, [r4, #20]
   3b0d8:	beq	3b07c <flatcc_json_printer_uint8_vector_field@@Base+0xa4>
   3b0dc:	add	r3, sl, #3
   3b0e0:	ldr	r8, [pc, #544]	; 3b308 <flatcc_json_printer_uint8_vector_field@@Base+0x330>
   3b0e4:	str	r3, [sp, #4]
   3b0e8:	mov	r7, #0
   3b0ec:	mov	r9, #32
   3b0f0:	b	3b150 <flatcc_json_printer_uint8_vector_field@@Base+0x178>
   3b0f4:	ldr	r2, [pc, #528]	; 3b30c <flatcc_json_printer_uint8_vector_field@@Base+0x334>
   3b0f8:	strb	r7, [r3, #3]
   3b0fc:	umull	r2, r0, r2, ip
   3b100:	mov	r2, #100	; 0x64
   3b104:	lsr	r0, r0, #5
   3b108:	add	r1, r0, #48	; 0x30
   3b10c:	mul	r2, r2, r0
   3b110:	mov	r0, #3
   3b114:	sub	r2, ip, r2
   3b118:	uxtb	r2, r2
   3b11c:	ldrb	ip, [r8, r2, lsl #1]
   3b120:	add	r2, r8, r2, lsl #1
   3b124:	strb	ip, [r3, #1]
   3b128:	ldrb	r2, [r2, #1]
   3b12c:	strb	r1, [r3]
   3b130:	strb	r2, [r3, #2]
   3b134:	ldr	r2, [sp, #4]
   3b138:	ldr	r3, [r4, #20]
   3b13c:	sub	r2, r2, r6
   3b140:	add	r0, r3, r0
   3b144:	cmn	fp, r2
   3b148:	str	r0, [r4, #20]
   3b14c:	beq	3b07c <flatcc_json_printer_uint8_vector_field@@Base+0xa4>
   3b150:	add	r3, r0, #1
   3b154:	str	r3, [r4, #20]
   3b158:	mov	r3, #44	; 0x2c
   3b15c:	strb	r3, [r0]
   3b160:	ldrb	r3, [r4, #25]
   3b164:	cmp	r3, #0
   3b168:	ldr	r3, [r4, #20]
   3b16c:	bne	3b1b4 <flatcc_json_printer_uint8_vector_field@@Base+0x1dc>
   3b170:	ldr	r2, [r4, #16]
   3b174:	cmp	r3, r2
   3b178:	bcs	3b200 <flatcc_json_printer_uint8_vector_field@@Base+0x228>
   3b17c:	ldrb	ip, [r6, #1]!
   3b180:	cmp	ip, #99	; 0x63
   3b184:	bhi	3b0f4 <flatcc_json_printer_uint8_vector_field@@Base+0x11c>
   3b188:	cmp	ip, #9
   3b18c:	bls	3b270 <flatcc_json_printer_uint8_vector_field@@Base+0x298>
   3b190:	sxth	r2, ip
   3b194:	strb	r7, [r3, #2]
   3b198:	ldrb	r1, [r8, r2, lsl #1]
   3b19c:	add	r2, r8, r2, lsl #1
   3b1a0:	mov	r0, #2
   3b1a4:	strb	r1, [r3]
   3b1a8:	ldrb	r2, [r2, #1]
   3b1ac:	strb	r2, [r3, #1]
   3b1b0:	b	3b134 <flatcc_json_printer_uint8_vector_field@@Base+0x15c>
   3b1b4:	add	r2, r3, #1
   3b1b8:	str	r2, [r4, #20]
   3b1bc:	mov	r2, #10
   3b1c0:	strb	r2, [r3]
   3b1c4:	ldrb	r3, [r4, #25]
   3b1c8:	ldr	r2, [r4, #32]
   3b1cc:	ldr	r0, [r4, #20]
   3b1d0:	ldr	sl, [r4, #16]
   3b1d4:	mul	r5, r2, r3
   3b1d8:	add	r2, r0, r5
   3b1dc:	cmp	sl, r2
   3b1e0:	bcc	3b218 <flatcc_json_printer_uint8_vector_field@@Base+0x240>
   3b1e4:	mov	r2, r5
   3b1e8:	mov	r1, r9
   3b1ec:	bl	145c4 <memset@plt>
   3b1f0:	ldr	r2, [r4, #20]
   3b1f4:	add	r3, r2, r5
   3b1f8:	str	r3, [r4, #20]
   3b1fc:	b	3b17c <flatcc_json_printer_uint8_vector_field@@Base+0x1a4>
   3b200:	ldr	r3, [r4, #44]	; 0x2c
   3b204:	mov	r1, r7
   3b208:	mov	r0, r4
   3b20c:	blx	r3
   3b210:	ldr	r3, [r4, #20]
   3b214:	b	3b17c <flatcc_json_printer_uint8_vector_field@@Base+0x1a4>
   3b218:	cmp	r0, sl
   3b21c:	bcs	3b284 <flatcc_json_printer_uint8_vector_field@@Base+0x2ac>
   3b220:	sub	sl, sl, r0
   3b224:	cmp	r5, sl
   3b228:	bls	3b1e4 <flatcc_json_printer_uint8_vector_field@@Base+0x20c>
   3b22c:	mov	r2, sl
   3b230:	mov	r1, r9
   3b234:	bl	145c4 <memset@plt>
   3b238:	ldr	r3, [r4, #20]
   3b23c:	mov	r0, r4
   3b240:	add	r3, r3, sl
   3b244:	str	r3, [r4, #20]
   3b248:	ldr	r2, [r4, #44]	; 0x2c
   3b24c:	mov	r1, r7
   3b250:	blx	r2
   3b254:	ldr	r0, [r4, #20]
   3b258:	ldr	r3, [r4, #16]
   3b25c:	sub	r5, r5, sl
   3b260:	sub	sl, r3, r0
   3b264:	cmp	r5, sl
   3b268:	bhi	3b22c <flatcc_json_printer_uint8_vector_field@@Base+0x254>
   3b26c:	b	3b1e4 <flatcc_json_printer_uint8_vector_field@@Base+0x20c>
   3b270:	add	r2, ip, #48	; 0x30
   3b274:	mov	r0, #1
   3b278:	strb	r2, [r3]
   3b27c:	strb	r7, [r3, #1]
   3b280:	b	3b134 <flatcc_json_printer_uint8_vector_field@@Base+0x15c>
   3b284:	mov	r0, r4
   3b288:	ldr	r2, [r4, #44]	; 0x2c
   3b28c:	mov	r1, r7
   3b290:	blx	r2
   3b294:	ldr	sl, [r4, #16]
   3b298:	ldr	r0, [r4, #20]
   3b29c:	b	3b220 <flatcc_json_printer_uint8_vector_field@@Base+0x248>
   3b2a0:	add	r2, r0, #1
   3b2a4:	mov	r3, #10
   3b2a8:	str	r2, [r4, #20]
   3b2ac:	strb	r3, [r0]
   3b2b0:	ldr	r3, [r4, #32]
   3b2b4:	mov	r0, r4
   3b2b8:	sub	r3, r3, #1
   3b2bc:	str	r3, [r4, #32]
   3b2c0:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3b2c4:	ldr	r0, [r4, #20]
   3b2c8:	b	3b088 <flatcc_json_printer_uint8_vector_field@@Base+0xb0>
   3b2cc:	ldr	r3, [r4, #20]
   3b2d0:	mov	r2, #10
   3b2d4:	add	r1, r3, #1
   3b2d8:	str	r1, [r4, #20]
   3b2dc:	mov	r0, r4
   3b2e0:	strb	r2, [r3]
   3b2e4:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3b2e8:	ldr	r1, [r4, #20]
   3b2ec:	b	3b0bc <flatcc_json_printer_uint8_vector_field@@Base+0xe4>
   3b2f0:	mov	r1, r3
   3b2f4:	mov	r0, r4
   3b2f8:	ldr	r3, [r4, #44]	; 0x2c
   3b2fc:	blx	r3
   3b300:	ldr	r1, [r4, #20]
   3b304:	b	3b0bc <flatcc_json_printer_uint8_vector_field@@Base+0xe4>
   3b308:	andeq	r6, r4, r0, lsl #9
   3b30c:	mvnpl	r8, pc, lsl r5

0003b310 <flatcc_json_printer_utype_vector_field@@Base>:
   3b310:	b	3afd8 <flatcc_json_printer_uint8_vector_field@@Base>

0003b314 <flatcc_json_printer_uint16_vector_field@@Base>:
   3b314:	add	r2, r2, #2
   3b318:	ldr	ip, [r1, #8]
   3b31c:	lsl	r2, r2, #1
   3b320:	cmp	ip, r2
   3b324:	bxle	lr
   3b328:	ldr	ip, [r1, #4]
   3b32c:	ldrh	ip, [ip, r2]
   3b330:	cmp	ip, #0
   3b334:	bxeq	lr
   3b338:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b33c:	ldr	r5, [r1]
   3b340:	adds	lr, r5, ip
   3b344:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b348:	ldr	r2, [r1, #16]
   3b34c:	cmp	r2, #0
   3b350:	add	r2, r2, #1
   3b354:	str	r2, [r1, #16]
   3b358:	ldrne	r2, [r0, #20]
   3b35c:	movne	r1, #44	; 0x2c
   3b360:	addne	r4, r2, #1
   3b364:	strne	r4, [r0, #20]
   3b368:	strbne	r1, [r2]
   3b36c:	mov	r1, r3
   3b370:	ldr	r3, [r5, ip]
   3b374:	mov	r4, r0
   3b378:	ldr	r2, [sp, #40]	; 0x28
   3b37c:	ldr	r6, [lr, r3]
   3b380:	add	r8, lr, r3
   3b384:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3b388:	ldr	r3, [r4, #32]
   3b38c:	ldr	r2, [r4, #20]
   3b390:	add	r3, r3, #1
   3b394:	add	r0, r2, #1
   3b398:	mov	r1, #91	; 0x5b
   3b39c:	cmp	r6, #0
   3b3a0:	str	r3, [r4, #32]
   3b3a4:	str	r0, [r4, #20]
   3b3a8:	strb	r1, [r2]
   3b3ac:	bne	3b3d4 <flatcc_json_printer_uint16_vector_field@@Base+0xc0>
   3b3b0:	ldr	r0, [r4, #20]
   3b3b4:	ldrb	r3, [r4, #25]
   3b3b8:	cmp	r3, #0
   3b3bc:	bne	3b674 <flatcc_json_printer_uint16_vector_field@@Base+0x360>
   3b3c0:	add	r2, r0, #1
   3b3c4:	mov	r3, #93	; 0x5d
   3b3c8:	str	r2, [r4, #20]
   3b3cc:	strb	r3, [r0]
   3b3d0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b3d4:	ldrb	r3, [r4, #25]
   3b3d8:	cmp	r3, #0
   3b3dc:	bne	3b6a0 <flatcc_json_printer_uint16_vector_field@@Base+0x38c>
   3b3e0:	ldr	r1, [r4, #20]
   3b3e4:	ldr	r2, [r4, #16]
   3b3e8:	cmp	r1, r2
   3b3ec:	bcs	3b6c4 <flatcc_json_printer_uint16_vector_field@@Base+0x3b0>
   3b3f0:	ldrh	r0, [r8, #4]
   3b3f4:	bl	33bd0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   3b3f8:	ldr	r3, [r4, #20]
   3b3fc:	cmp	r6, #1
   3b400:	add	r8, r8, #4
   3b404:	sub	r6, r6, #2
   3b408:	add	r0, r3, r0
   3b40c:	str	r0, [r4, #20]
   3b410:	beq	3b3b4 <flatcc_json_printer_uint16_vector_field@@Base+0xa0>
   3b414:	mov	r7, #0
   3b418:	ldr	r9, [pc, #700]	; 3b6dc <flatcc_json_printer_uint16_vector_field@@Base+0x3c8>
   3b41c:	b	3b4c4 <flatcc_json_printer_uint16_vector_field@@Base+0x1b0>
   3b420:	ldr	r1, [pc, #696]	; 3b6e0 <flatcc_json_printer_uint16_vector_field@@Base+0x3cc>
   3b424:	cmp	r3, r1
   3b428:	bls	3b590 <flatcc_json_printer_uint16_vector_field@@Base+0x27c>
   3b42c:	ldr	r1, [pc, #688]	; 3b6e4 <flatcc_json_printer_uint16_vector_field@@Base+0x3d0>
   3b430:	strb	r7, [r2, #5]
   3b434:	add	ip, r2, #3
   3b438:	umull	r1, r0, r1, r3
   3b43c:	mov	r1, #100	; 0x64
   3b440:	lsr	r0, r0, #5
   3b444:	mov	lr, #5
   3b448:	mul	r1, r1, r0
   3b44c:	sub	r1, r3, r1
   3b450:	uxth	r3, r0
   3b454:	uxth	r1, r1
   3b458:	ldrb	r0, [r9, r1, lsl #1]
   3b45c:	add	r1, r9, r1, lsl #1
   3b460:	strb	r0, [r2, #3]
   3b464:	ldrb	r1, [r1, #1]
   3b468:	strb	r1, [r2, #4]
   3b46c:	ldr	r2, [pc, #624]	; 3b6e4 <flatcc_json_printer_uint16_vector_field@@Base+0x3d0>
   3b470:	mov	r1, #100	; 0x64
   3b474:	umull	r2, r0, r2, r3
   3b478:	sub	r2, ip, #2
   3b47c:	lsr	r0, r0, #5
   3b480:	mul	r1, r1, r0
   3b484:	sub	r1, r3, r1
   3b488:	uxth	r3, r0
   3b48c:	uxth	r1, r1
   3b490:	ldrb	r0, [r9, r1, lsl #1]
   3b494:	add	r1, r9, r1, lsl #1
   3b498:	strb	r0, [ip, #-2]
   3b49c:	ldrb	r1, [r1, #1]
   3b4a0:	strb	r1, [ip, #-1]
   3b4a4:	add	r3, r3, #48	; 0x30
   3b4a8:	strb	r3, [r2, #-1]
   3b4ac:	ldr	r0, [r4, #20]
   3b4b0:	cmp	r6, #0
   3b4b4:	add	r0, r0, lr
   3b4b8:	sub	r6, r6, #1
   3b4bc:	str	r0, [r4, #20]
   3b4c0:	beq	3b3b4 <flatcc_json_printer_uint16_vector_field@@Base+0xa0>
   3b4c4:	add	r3, r0, #1
   3b4c8:	str	r3, [r4, #20]
   3b4cc:	mov	r3, #44	; 0x2c
   3b4d0:	strb	r3, [r0]
   3b4d4:	ldrb	r3, [r4, #25]
   3b4d8:	cmp	r3, #0
   3b4dc:	bne	3b540 <flatcc_json_printer_uint16_vector_field@@Base+0x22c>
   3b4e0:	ldr	r2, [r4, #20]
   3b4e4:	ldr	r3, [r4, #16]
   3b4e8:	cmp	r2, r3
   3b4ec:	bcs	3b5d4 <flatcc_json_printer_uint16_vector_field@@Base+0x2c0>
   3b4f0:	ldrh	r3, [r8, #2]!
   3b4f4:	ldr	r1, [pc, #492]	; 3b6e8 <flatcc_json_printer_uint16_vector_field@@Base+0x3d4>
   3b4f8:	cmp	r3, r1
   3b4fc:	bhi	3b420 <flatcc_json_printer_uint16_vector_field@@Base+0x10c>
   3b500:	cmp	r3, #99	; 0x63
   3b504:	strbhi	r7, [r2, #3]
   3b508:	addhi	ip, r2, #3
   3b50c:	movhi	lr, #3
   3b510:	bhi	3b46c <flatcc_json_printer_uint16_vector_field@@Base+0x158>
   3b514:	cmp	r3, #9
   3b518:	strbhi	r7, [r2, #2]
   3b51c:	addhi	r0, r2, #2
   3b520:	movhi	lr, #2
   3b524:	bls	3b648 <flatcc_json_printer_uint16_vector_field@@Base+0x334>
   3b528:	ldrb	r2, [r9, r3, lsl #1]
   3b52c:	add	r3, r9, r3, lsl #1
   3b530:	strb	r2, [r0, #-2]
   3b534:	ldrb	r3, [r3, #1]
   3b538:	strb	r3, [r0, #-1]
   3b53c:	b	3b4ac <flatcc_json_printer_uint16_vector_field@@Base+0x198>
   3b540:	ldr	r3, [r4, #20]
   3b544:	mov	r2, #10
   3b548:	add	r1, r3, #1
   3b54c:	str	r1, [r4, #20]
   3b550:	strb	r2, [r3]
   3b554:	ldrb	r3, [r4, #25]
   3b558:	ldr	r2, [r4, #32]
   3b55c:	ldr	r0, [r4, #20]
   3b560:	ldr	r5, [r4, #16]
   3b564:	mul	sl, r2, r3
   3b568:	add	r3, r0, sl
   3b56c:	cmp	r5, r3
   3b570:	bcc	3b5ec <flatcc_json_printer_uint16_vector_field@@Base+0x2d8>
   3b574:	mov	r2, sl
   3b578:	mov	r1, #32
   3b57c:	bl	145c4 <memset@plt>
   3b580:	ldr	r2, [r4, #20]
   3b584:	add	r2, r2, sl
   3b588:	str	r2, [r4, #20]
   3b58c:	b	3b4f0 <flatcc_json_printer_uint16_vector_field@@Base+0x1dc>
   3b590:	ldr	r1, [pc, #332]	; 3b6e4 <flatcc_json_printer_uint16_vector_field@@Base+0x3d0>
   3b594:	strb	r7, [r2, #4]
   3b598:	add	r0, r2, #2
   3b59c:	umull	r1, ip, r1, r3
   3b5a0:	mov	r1, #100	; 0x64
   3b5a4:	lsr	ip, ip, #5
   3b5a8:	mov	lr, #4
   3b5ac:	mul	r1, r1, ip
   3b5b0:	sub	r1, r3, r1
   3b5b4:	uxth	r3, ip
   3b5b8:	uxth	r1, r1
   3b5bc:	ldrb	ip, [r9, r1, lsl #1]
   3b5c0:	add	r1, r9, r1, lsl #1
   3b5c4:	strb	ip, [r2, #2]
   3b5c8:	ldrb	r1, [r1, #1]
   3b5cc:	strb	r1, [r2, #3]
   3b5d0:	b	3b528 <flatcc_json_printer_uint16_vector_field@@Base+0x214>
   3b5d4:	ldr	r3, [r4, #44]	; 0x2c
   3b5d8:	mov	r1, r7
   3b5dc:	mov	r0, r4
   3b5e0:	blx	r3
   3b5e4:	ldr	r2, [r4, #20]
   3b5e8:	b	3b4f0 <flatcc_json_printer_uint16_vector_field@@Base+0x1dc>
   3b5ec:	cmp	r0, r5
   3b5f0:	bcs	3b658 <flatcc_json_printer_uint16_vector_field@@Base+0x344>
   3b5f4:	sub	r5, r5, r0
   3b5f8:	cmp	sl, r5
   3b5fc:	bls	3b574 <flatcc_json_printer_uint16_vector_field@@Base+0x260>
   3b600:	mov	fp, #32
   3b604:	mov	r2, r5
   3b608:	mov	r1, fp
   3b60c:	bl	145c4 <memset@plt>
   3b610:	ldr	r3, [r4, #20]
   3b614:	mov	r0, r4
   3b618:	add	r3, r3, r5
   3b61c:	str	r3, [r4, #20]
   3b620:	ldr	r2, [r4, #44]	; 0x2c
   3b624:	mov	r1, r7
   3b628:	blx	r2
   3b62c:	ldr	r0, [r4, #20]
   3b630:	ldr	r3, [r4, #16]
   3b634:	sub	sl, sl, r5
   3b638:	sub	r5, r3, r0
   3b63c:	cmp	sl, r5
   3b640:	bhi	3b604 <flatcc_json_printer_uint16_vector_field@@Base+0x2f0>
   3b644:	b	3b574 <flatcc_json_printer_uint16_vector_field@@Base+0x260>
   3b648:	strb	r7, [r2, #1]
   3b64c:	mov	lr, #1
   3b650:	add	r2, r2, #1
   3b654:	b	3b4a4 <flatcc_json_printer_uint16_vector_field@@Base+0x190>
   3b658:	mov	r0, r4
   3b65c:	ldr	r3, [r4, #44]	; 0x2c
   3b660:	mov	r1, r7
   3b664:	blx	r3
   3b668:	ldr	r5, [r4, #16]
   3b66c:	ldr	r0, [r4, #20]
   3b670:	b	3b5f4 <flatcc_json_printer_uint16_vector_field@@Base+0x2e0>
   3b674:	add	r2, r0, #1
   3b678:	mov	r3, #10
   3b67c:	str	r2, [r4, #20]
   3b680:	strb	r3, [r0]
   3b684:	ldr	r3, [r4, #32]
   3b688:	mov	r0, r4
   3b68c:	sub	r3, r3, #1
   3b690:	str	r3, [r4, #32]
   3b694:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3b698:	ldr	r0, [r4, #20]
   3b69c:	b	3b3c0 <flatcc_json_printer_uint16_vector_field@@Base+0xac>
   3b6a0:	ldr	r3, [r4, #20]
   3b6a4:	mov	r2, #10
   3b6a8:	add	r1, r3, #1
   3b6ac:	str	r1, [r4, #20]
   3b6b0:	mov	r0, r4
   3b6b4:	strb	r2, [r3]
   3b6b8:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3b6bc:	ldr	r1, [r4, #20]
   3b6c0:	b	3b3f0 <flatcc_json_printer_uint16_vector_field@@Base+0xdc>
   3b6c4:	mov	r1, r3
   3b6c8:	mov	r0, r4
   3b6cc:	ldr	r3, [r4, #44]	; 0x2c
   3b6d0:	blx	r3
   3b6d4:	ldr	r1, [r4, #20]
   3b6d8:	b	3b3f0 <flatcc_json_printer_uint16_vector_field@@Base+0xdc>
   3b6dc:	andeq	r6, r4, r0, lsl #9
   3b6e0:	andeq	r2, r0, pc, lsl #14
   3b6e4:	mvnpl	r8, pc, lsl r5
   3b6e8:	andeq	r0, r0, r7, ror #7

0003b6ec <flatcc_json_printer_uint32_vector_field@@Base>:
   3b6ec:	add	r2, r2, #2
   3b6f0:	ldr	ip, [r1, #8]
   3b6f4:	lsl	r2, r2, #1
   3b6f8:	cmp	ip, r2
   3b6fc:	bxle	lr
   3b700:	ldr	ip, [r1, #4]
   3b704:	ldrh	ip, [ip, r2]
   3b708:	cmp	ip, #0
   3b70c:	bxeq	lr
   3b710:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b714:	ldr	lr, [r1]
   3b718:	adds	r5, lr, ip
   3b71c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b720:	ldr	r2, [r1, #16]
   3b724:	cmp	r2, #0
   3b728:	add	r2, r2, #1
   3b72c:	str	r2, [r1, #16]
   3b730:	ldrne	r2, [r0, #20]
   3b734:	movne	r1, #44	; 0x2c
   3b738:	addne	r4, r2, #1
   3b73c:	strne	r4, [r0, #20]
   3b740:	strbne	r1, [r2]
   3b744:	mov	r1, r3
   3b748:	ldr	r3, [lr, ip]
   3b74c:	mov	r4, r0
   3b750:	ldr	r2, [sp, #40]	; 0x28
   3b754:	ldr	r6, [r5, r3]
   3b758:	add	r7, r5, r3
   3b75c:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3b760:	ldr	r3, [r4, #32]
   3b764:	ldr	r2, [r4, #20]
   3b768:	add	r3, r3, #1
   3b76c:	add	r0, r2, #1
   3b770:	mov	r1, #91	; 0x5b
   3b774:	cmp	r6, #0
   3b778:	str	r3, [r4, #32]
   3b77c:	str	r0, [r4, #20]
   3b780:	strb	r1, [r2]
   3b784:	bne	3b7ac <flatcc_json_printer_uint32_vector_field@@Base+0xc0>
   3b788:	ldr	r0, [r4, #20]
   3b78c:	ldrb	r3, [r4, #25]
   3b790:	cmp	r3, #0
   3b794:	bne	3b920 <flatcc_json_printer_uint32_vector_field@@Base+0x234>
   3b798:	add	r2, r0, #1
   3b79c:	mov	r3, #93	; 0x5d
   3b7a0:	str	r2, [r4, #20]
   3b7a4:	strb	r3, [r0]
   3b7a8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b7ac:	ldrb	r3, [r4, #25]
   3b7b0:	cmp	r3, #0
   3b7b4:	bne	3b94c <flatcc_json_printer_uint32_vector_field@@Base+0x260>
   3b7b8:	ldr	r1, [r4, #20]
   3b7bc:	ldr	r2, [r4, #16]
   3b7c0:	cmp	r1, r2
   3b7c4:	bcs	3b970 <flatcc_json_printer_uint32_vector_field@@Base+0x284>
   3b7c8:	ldr	r0, [r7, #4]
   3b7cc:	bl	33d38 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   3b7d0:	ldr	r3, [r4, #20]
   3b7d4:	cmp	r6, #1
   3b7d8:	add	r7, r7, #8
   3b7dc:	sub	r6, r6, #2
   3b7e0:	add	r0, r3, r0
   3b7e4:	str	r0, [r4, #20]
   3b7e8:	beq	3b78c <flatcc_json_printer_uint32_vector_field@@Base+0xa0>
   3b7ec:	mov	sl, #44	; 0x2c
   3b7f0:	mov	r9, #0
   3b7f4:	mov	r8, #32
   3b7f8:	b	3b82c <flatcc_json_printer_uint32_vector_field@@Base+0x140>
   3b7fc:	ldr	r1, [r4, #20]
   3b800:	ldr	r3, [r4, #16]
   3b804:	cmp	r1, r3
   3b808:	bcs	3b894 <flatcc_json_printer_uint32_vector_field@@Base+0x1a8>
   3b80c:	ldr	r0, [r7], #4
   3b810:	bl	33d38 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   3b814:	ldr	r3, [r4, #20]
   3b818:	cmp	r6, #0
   3b81c:	sub	r6, r6, #1
   3b820:	add	r0, r3, r0
   3b824:	str	r0, [r4, #20]
   3b828:	beq	3b78c <flatcc_json_printer_uint32_vector_field@@Base+0xa0>
   3b82c:	add	r3, r0, #1
   3b830:	str	r3, [r4, #20]
   3b834:	strb	sl, [r0]
   3b838:	ldrb	r3, [r4, #25]
   3b83c:	cmp	r3, #0
   3b840:	beq	3b7fc <flatcc_json_printer_uint32_vector_field@@Base+0x110>
   3b844:	ldr	r3, [r4, #20]
   3b848:	add	r2, r3, #1
   3b84c:	str	r2, [r4, #20]
   3b850:	mov	r2, #10
   3b854:	strb	r2, [r3]
   3b858:	ldrb	r1, [r4, #25]
   3b85c:	ldr	r5, [r4, #32]
   3b860:	ldr	r0, [r4, #20]
   3b864:	ldr	r3, [r4, #16]
   3b868:	mul	r5, r5, r1
   3b86c:	add	r2, r0, r5
   3b870:	cmp	r3, r2
   3b874:	bcc	3b8ac <flatcc_json_printer_uint32_vector_field@@Base+0x1c0>
   3b878:	mov	r1, r8
   3b87c:	mov	r2, r5
   3b880:	bl	145c4 <memset@plt>
   3b884:	ldr	r1, [r4, #20]
   3b888:	add	r1, r1, r5
   3b88c:	str	r1, [r4, #20]
   3b890:	b	3b80c <flatcc_json_printer_uint32_vector_field@@Base+0x120>
   3b894:	mov	r1, r9
   3b898:	ldr	r3, [r4, #44]	; 0x2c
   3b89c:	mov	r0, r4
   3b8a0:	blx	r3
   3b8a4:	ldr	r1, [r4, #20]
   3b8a8:	b	3b80c <flatcc_json_printer_uint32_vector_field@@Base+0x120>
   3b8ac:	cmp	r0, r3
   3b8b0:	bcs	3b904 <flatcc_json_printer_uint32_vector_field@@Base+0x218>
   3b8b4:	sub	fp, r3, r0
   3b8b8:	cmp	r5, fp
   3b8bc:	bls	3b878 <flatcc_json_printer_uint32_vector_field@@Base+0x18c>
   3b8c0:	mov	r2, fp
   3b8c4:	mov	r1, r8
   3b8c8:	bl	145c4 <memset@plt>
   3b8cc:	ldr	r1, [r4, #20]
   3b8d0:	ldr	r2, [r4, #44]	; 0x2c
   3b8d4:	add	r1, r1, fp
   3b8d8:	str	r1, [r4, #20]
   3b8dc:	mov	r0, r4
   3b8e0:	mov	r1, r9
   3b8e4:	blx	r2
   3b8e8:	ldr	r0, [r4, #20]
   3b8ec:	ldr	r2, [r4, #16]
   3b8f0:	sub	r5, r5, fp
   3b8f4:	sub	fp, r2, r0
   3b8f8:	cmp	r5, fp
   3b8fc:	bhi	3b8c0 <flatcc_json_printer_uint32_vector_field@@Base+0x1d4>
   3b900:	b	3b878 <flatcc_json_printer_uint32_vector_field@@Base+0x18c>
   3b904:	ldr	r3, [r4, #44]	; 0x2c
   3b908:	mov	r0, r4
   3b90c:	mov	r1, r9
   3b910:	blx	r3
   3b914:	ldr	r3, [r4, #16]
   3b918:	ldr	r0, [r4, #20]
   3b91c:	b	3b8b4 <flatcc_json_printer_uint32_vector_field@@Base+0x1c8>
   3b920:	add	r2, r0, #1
   3b924:	mov	r3, #10
   3b928:	str	r2, [r4, #20]
   3b92c:	strb	r3, [r0]
   3b930:	ldr	r3, [r4, #32]
   3b934:	mov	r0, r4
   3b938:	sub	r3, r3, #1
   3b93c:	str	r3, [r4, #32]
   3b940:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3b944:	ldr	r0, [r4, #20]
   3b948:	b	3b798 <flatcc_json_printer_uint32_vector_field@@Base+0xac>
   3b94c:	ldr	r3, [r4, #20]
   3b950:	mov	r2, #10
   3b954:	add	r1, r3, #1
   3b958:	str	r1, [r4, #20]
   3b95c:	mov	r0, r4
   3b960:	strb	r2, [r3]
   3b964:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3b968:	ldr	r1, [r4, #20]
   3b96c:	b	3b7c8 <flatcc_json_printer_uint32_vector_field@@Base+0xdc>
   3b970:	mov	r1, r3
   3b974:	mov	r0, r4
   3b978:	ldr	r3, [r4, #44]	; 0x2c
   3b97c:	blx	r3
   3b980:	ldr	r1, [r4, #20]
   3b984:	b	3b7c8 <flatcc_json_printer_uint32_vector_field@@Base+0xdc>

0003b988 <flatcc_json_printer_uint64_vector_field@@Base>:
   3b988:	add	r2, r2, #2
   3b98c:	ldr	ip, [r1, #8]
   3b990:	lsl	r2, r2, #1
   3b994:	cmp	ip, r2
   3b998:	bxle	lr
   3b99c:	ldr	ip, [r1, #4]
   3b9a0:	ldrh	ip, [ip, r2]
   3b9a4:	cmp	ip, #0
   3b9a8:	bxeq	lr
   3b9ac:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b9b0:	ldr	lr, [r1]
   3b9b4:	adds	r5, lr, ip
   3b9b8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b9bc:	ldr	r2, [r1, #16]
   3b9c0:	cmp	r2, #0
   3b9c4:	add	r2, r2, #1
   3b9c8:	str	r2, [r1, #16]
   3b9cc:	ldrne	r2, [r0, #20]
   3b9d0:	movne	r1, #44	; 0x2c
   3b9d4:	addne	r4, r2, #1
   3b9d8:	strne	r4, [r0, #20]
   3b9dc:	strbne	r1, [r2]
   3b9e0:	mov	r1, r3
   3b9e4:	ldr	r3, [lr, ip]
   3b9e8:	mov	r4, r0
   3b9ec:	ldr	r2, [sp, #40]	; 0x28
   3b9f0:	ldr	r6, [r5, r3]
   3b9f4:	add	r7, r5, r3
   3b9f8:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3b9fc:	ldr	r3, [r4, #32]
   3ba00:	ldr	r2, [r4, #20]
   3ba04:	add	r3, r3, #1
   3ba08:	add	r0, r2, #1
   3ba0c:	mov	r1, #91	; 0x5b
   3ba10:	cmp	r6, #0
   3ba14:	str	r3, [r4, #32]
   3ba18:	str	r0, [r4, #20]
   3ba1c:	strb	r1, [r2]
   3ba20:	bne	3ba48 <flatcc_json_printer_uint64_vector_field@@Base+0xc0>
   3ba24:	ldr	r0, [r4, #20]
   3ba28:	ldrb	r3, [r4, #25]
   3ba2c:	cmp	r3, #0
   3ba30:	bne	3bbbc <flatcc_json_printer_uint64_vector_field@@Base+0x234>
   3ba34:	add	r2, r0, #1
   3ba38:	mov	r3, #93	; 0x5d
   3ba3c:	str	r2, [r4, #20]
   3ba40:	strb	r3, [r0]
   3ba44:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ba48:	ldrb	r1, [r4, #25]
   3ba4c:	cmp	r1, #0
   3ba50:	bne	3bbe8 <flatcc_json_printer_uint64_vector_field@@Base+0x260>
   3ba54:	ldr	r2, [r4, #20]
   3ba58:	ldr	r3, [r4, #16]
   3ba5c:	cmp	r2, r3
   3ba60:	bcs	3bc0c <flatcc_json_printer_uint64_vector_field@@Base+0x284>
   3ba64:	ldrd	r0, [r7, #4]
   3ba68:	bl	34060 <flatcc_json_parser_struct_as_root@@Base+0x564>
   3ba6c:	ldr	r3, [r4, #20]
   3ba70:	cmp	r6, #1
   3ba74:	add	r7, r7, #12
   3ba78:	sub	r6, r6, #2
   3ba7c:	add	r0, r3, r0
   3ba80:	str	r0, [r4, #20]
   3ba84:	beq	3ba28 <flatcc_json_printer_uint64_vector_field@@Base+0xa0>
   3ba88:	mov	sl, #44	; 0x2c
   3ba8c:	mov	r9, #0
   3ba90:	mov	r8, #32
   3ba94:	b	3bac8 <flatcc_json_printer_uint64_vector_field@@Base+0x140>
   3ba98:	ldr	r2, [r4, #20]
   3ba9c:	ldr	r3, [r4, #16]
   3baa0:	cmp	r2, r3
   3baa4:	bcs	3bb30 <flatcc_json_printer_uint64_vector_field@@Base+0x1a8>
   3baa8:	ldrd	r0, [r7], #8
   3baac:	bl	34060 <flatcc_json_parser_struct_as_root@@Base+0x564>
   3bab0:	ldr	r3, [r4, #20]
   3bab4:	cmp	r6, #0
   3bab8:	sub	r6, r6, #1
   3babc:	add	r0, r3, r0
   3bac0:	str	r0, [r4, #20]
   3bac4:	beq	3ba28 <flatcc_json_printer_uint64_vector_field@@Base+0xa0>
   3bac8:	add	r3, r0, #1
   3bacc:	str	r3, [r4, #20]
   3bad0:	strb	sl, [r0]
   3bad4:	ldrb	r3, [r4, #25]
   3bad8:	cmp	r3, #0
   3badc:	beq	3ba98 <flatcc_json_printer_uint64_vector_field@@Base+0x110>
   3bae0:	ldr	r3, [r4, #20]
   3bae4:	add	r2, r3, #1
   3bae8:	str	r2, [r4, #20]
   3baec:	mov	r2, #10
   3baf0:	strb	r2, [r3]
   3baf4:	ldrb	r2, [r4, #25]
   3baf8:	ldr	r5, [r4, #32]
   3bafc:	ldr	r0, [r4, #20]
   3bb00:	ldr	r3, [r4, #16]
   3bb04:	mul	r5, r5, r2
   3bb08:	add	r2, r0, r5
   3bb0c:	cmp	r3, r2
   3bb10:	bcc	3bb48 <flatcc_json_printer_uint64_vector_field@@Base+0x1c0>
   3bb14:	mov	r2, r5
   3bb18:	mov	r1, r8
   3bb1c:	bl	145c4 <memset@plt>
   3bb20:	ldr	r2, [r4, #20]
   3bb24:	add	r2, r2, r5
   3bb28:	str	r2, [r4, #20]
   3bb2c:	b	3baa8 <flatcc_json_printer_uint64_vector_field@@Base+0x120>
   3bb30:	ldr	r3, [r4, #44]	; 0x2c
   3bb34:	mov	r1, r9
   3bb38:	mov	r0, r4
   3bb3c:	blx	r3
   3bb40:	ldr	r2, [r4, #20]
   3bb44:	b	3baa8 <flatcc_json_printer_uint64_vector_field@@Base+0x120>
   3bb48:	cmp	r0, r3
   3bb4c:	bcs	3bba0 <flatcc_json_printer_uint64_vector_field@@Base+0x218>
   3bb50:	sub	fp, r3, r0
   3bb54:	cmp	r5, fp
   3bb58:	bls	3bb14 <flatcc_json_printer_uint64_vector_field@@Base+0x18c>
   3bb5c:	mov	r2, fp
   3bb60:	mov	r1, r8
   3bb64:	bl	145c4 <memset@plt>
   3bb68:	ldr	r1, [r4, #20]
   3bb6c:	ldr	r2, [r4, #44]	; 0x2c
   3bb70:	add	r1, r1, fp
   3bb74:	str	r1, [r4, #20]
   3bb78:	mov	r0, r4
   3bb7c:	mov	r1, r9
   3bb80:	blx	r2
   3bb84:	ldr	r0, [r4, #20]
   3bb88:	ldr	r2, [r4, #16]
   3bb8c:	sub	r5, r5, fp
   3bb90:	sub	fp, r2, r0
   3bb94:	cmp	r5, fp
   3bb98:	bhi	3bb5c <flatcc_json_printer_uint64_vector_field@@Base+0x1d4>
   3bb9c:	b	3bb14 <flatcc_json_printer_uint64_vector_field@@Base+0x18c>
   3bba0:	ldr	r3, [r4, #44]	; 0x2c
   3bba4:	mov	r0, r4
   3bba8:	mov	r1, r9
   3bbac:	blx	r3
   3bbb0:	ldr	r3, [r4, #16]
   3bbb4:	ldr	r0, [r4, #20]
   3bbb8:	b	3bb50 <flatcc_json_printer_uint64_vector_field@@Base+0x1c8>
   3bbbc:	add	r2, r0, #1
   3bbc0:	mov	r3, #10
   3bbc4:	str	r2, [r4, #20]
   3bbc8:	strb	r3, [r0]
   3bbcc:	ldr	r3, [r4, #32]
   3bbd0:	mov	r0, r4
   3bbd4:	sub	r3, r3, #1
   3bbd8:	str	r3, [r4, #32]
   3bbdc:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3bbe0:	ldr	r0, [r4, #20]
   3bbe4:	b	3ba34 <flatcc_json_printer_uint64_vector_field@@Base+0xac>
   3bbe8:	ldr	r3, [r4, #20]
   3bbec:	mov	r2, #10
   3bbf0:	add	r1, r3, #1
   3bbf4:	str	r1, [r4, #20]
   3bbf8:	mov	r0, r4
   3bbfc:	strb	r2, [r3]
   3bc00:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3bc04:	ldr	r2, [r4, #20]
   3bc08:	b	3ba64 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   3bc0c:	ldr	r3, [r4, #44]	; 0x2c
   3bc10:	mov	r0, r4
   3bc14:	blx	r3
   3bc18:	ldr	r2, [r4, #20]
   3bc1c:	b	3ba64 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>

0003bc20 <flatcc_json_printer_int8_vector_field@@Base>:
   3bc20:	add	r2, r2, #2
   3bc24:	ldr	ip, [r1, #8]
   3bc28:	lsl	r2, r2, #1
   3bc2c:	cmp	ip, r2
   3bc30:	bxle	lr
   3bc34:	ldr	ip, [r1, #4]
   3bc38:	ldrh	ip, [ip, r2]
   3bc3c:	cmp	ip, #0
   3bc40:	bxeq	lr
   3bc44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bc48:	sub	sp, sp, #12
   3bc4c:	ldr	r5, [r1]
   3bc50:	adds	lr, r5, ip
   3bc54:	beq	3bce0 <flatcc_json_printer_int8_vector_field@@Base+0xc0>
   3bc58:	ldr	r2, [r1, #16]
   3bc5c:	cmp	r2, #0
   3bc60:	add	r2, r2, #1
   3bc64:	str	r2, [r1, #16]
   3bc68:	ldrne	r2, [r0, #20]
   3bc6c:	movne	r1, #44	; 0x2c
   3bc70:	addne	r4, r2, #1
   3bc74:	strne	r4, [r0, #20]
   3bc78:	strbne	r1, [r2]
   3bc7c:	mov	r1, r3
   3bc80:	ldr	r3, [r5, ip]
   3bc84:	mov	r4, r0
   3bc88:	ldr	r2, [sp, #48]	; 0x30
   3bc8c:	ldr	sl, [lr, r3]
   3bc90:	add	fp, lr, r3
   3bc94:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3bc98:	ldr	r3, [r4, #32]
   3bc9c:	ldr	r2, [r4, #20]
   3bca0:	add	r3, r3, #1
   3bca4:	add	r0, r2, #1
   3bca8:	mov	r1, #91	; 0x5b
   3bcac:	cmp	sl, #0
   3bcb0:	str	r3, [r4, #32]
   3bcb4:	str	r0, [r4, #20]
   3bcb8:	strb	r1, [r2]
   3bcbc:	bne	3bce8 <flatcc_json_printer_int8_vector_field@@Base+0xc8>
   3bcc0:	ldr	r2, [r4, #20]
   3bcc4:	ldrb	r3, [r4, #25]
   3bcc8:	cmp	r3, #0
   3bccc:	bne	3bf30 <flatcc_json_printer_int8_vector_field@@Base+0x310>
   3bcd0:	add	r1, r2, #1
   3bcd4:	mov	r3, #93	; 0x5d
   3bcd8:	str	r1, [r4, #20]
   3bcdc:	strb	r3, [r2]
   3bce0:	add	sp, sp, #12
   3bce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bce8:	ldrb	r3, [r4, #25]
   3bcec:	cmp	r3, #0
   3bcf0:	bne	3bf5c <flatcc_json_printer_int8_vector_field@@Base+0x33c>
   3bcf4:	ldr	r1, [r4, #20]
   3bcf8:	ldr	r2, [r4, #16]
   3bcfc:	cmp	r1, r2
   3bd00:	bcs	3bf80 <flatcc_json_printer_int8_vector_field@@Base+0x360>
   3bd04:	ldrsb	r0, [fp, #4]
   3bd08:	add	r6, fp, #4
   3bd0c:	cmp	r0, #0
   3bd10:	lsr	r5, r0, #31
   3bd14:	rsblt	r0, r0, #0
   3bd18:	movlt	r3, #45	; 0x2d
   3bd1c:	sxtblt	r0, r0
   3bd20:	strblt	r3, [r1]
   3bd24:	uxtb	r0, r0
   3bd28:	addlt	r1, r1, #1
   3bd2c:	bl	3491c <flatcc_json_parser_struct_as_root@@Base+0xe20>
   3bd30:	ldr	r2, [r4, #20]
   3bd34:	cmp	sl, #1
   3bd38:	add	r0, r5, r0
   3bd3c:	add	r2, r2, r0
   3bd40:	str	r2, [r4, #20]
   3bd44:	beq	3bcc4 <flatcc_json_printer_int8_vector_field@@Base+0xa4>
   3bd48:	add	r3, sl, #3
   3bd4c:	ldr	r8, [pc, #580]	; 3bf98 <flatcc_json_printer_int8_vector_field@@Base+0x378>
   3bd50:	str	r3, [sp, #4]
   3bd54:	mov	r7, #0
   3bd58:	mov	r9, #32
   3bd5c:	b	3bdc0 <flatcc_json_printer_int8_vector_field@@Base+0x1a0>
   3bd60:	ldr	r2, [pc, #564]	; 3bf9c <flatcc_json_printer_int8_vector_field@@Base+0x37c>
   3bd64:	strb	r7, [r3, #3]
   3bd68:	mov	ip, #49	; 0x31
   3bd6c:	umull	r2, r0, r2, lr
   3bd70:	mov	r2, #100	; 0x64
   3bd74:	lsr	r0, r0, #5
   3bd78:	mul	r2, r2, r0
   3bd7c:	mov	r0, #3
   3bd80:	sub	r2, lr, r2
   3bd84:	uxtb	r2, r2
   3bd88:	ldrb	lr, [r8, r2, lsl #1]
   3bd8c:	add	r2, r8, r2, lsl #1
   3bd90:	strb	lr, [r3, #1]
   3bd94:	ldrb	r2, [r2, #1]
   3bd98:	strb	ip, [r3]
   3bd9c:	strb	r2, [r3, #2]
   3bda0:	ldr	r3, [sp, #4]
   3bda4:	ldr	r2, [r4, #20]
   3bda8:	add	r1, r1, r0
   3bdac:	sub	r3, r3, r6
   3bdb0:	add	r2, r2, r1
   3bdb4:	cmn	fp, r3
   3bdb8:	str	r2, [r4, #20]
   3bdbc:	beq	3bcc4 <flatcc_json_printer_int8_vector_field@@Base+0xa4>
   3bdc0:	add	r3, r2, #1
   3bdc4:	str	r3, [r4, #20]
   3bdc8:	mov	r3, #44	; 0x2c
   3bdcc:	strb	r3, [r2]
   3bdd0:	ldrb	r3, [r4, #25]
   3bdd4:	cmp	r3, #0
   3bdd8:	ldr	r3, [r4, #20]
   3bddc:	bne	3be44 <flatcc_json_printer_int8_vector_field@@Base+0x224>
   3bde0:	ldr	r2, [r4, #16]
   3bde4:	cmp	r3, r2
   3bde8:	bcs	3be90 <flatcc_json_printer_int8_vector_field@@Base+0x270>
   3bdec:	ldrsb	r2, [r6, #1]!
   3bdf0:	cmp	r2, #0
   3bdf4:	lsr	r1, r2, #31
   3bdf8:	rsblt	r2, r2, #0
   3bdfc:	movlt	r0, #45	; 0x2d
   3be00:	sxtblt	r2, r2
   3be04:	strblt	r0, [r3]
   3be08:	uxtb	lr, r2
   3be0c:	addlt	r3, r3, #1
   3be10:	cmp	lr, #99	; 0x63
   3be14:	bhi	3bd60 <flatcc_json_printer_int8_vector_field@@Base+0x140>
   3be18:	cmp	lr, #9
   3be1c:	bls	3bf00 <flatcc_json_printer_int8_vector_field@@Base+0x2e0>
   3be20:	sxth	r2, lr
   3be24:	strb	r7, [r3, #2]
   3be28:	ldrb	ip, [r8, r2, lsl #1]
   3be2c:	add	r2, r8, r2, lsl #1
   3be30:	mov	r0, #2
   3be34:	strb	ip, [r3]
   3be38:	ldrb	r2, [r2, #1]
   3be3c:	strb	r2, [r3, #1]
   3be40:	b	3bda0 <flatcc_json_printer_int8_vector_field@@Base+0x180>
   3be44:	add	r2, r3, #1
   3be48:	str	r2, [r4, #20]
   3be4c:	mov	r2, #10
   3be50:	strb	r2, [r3]
   3be54:	ldrb	r3, [r4, #25]
   3be58:	ldr	r2, [r4, #32]
   3be5c:	ldr	r0, [r4, #20]
   3be60:	ldr	sl, [r4, #16]
   3be64:	mul	r5, r2, r3
   3be68:	add	r2, r0, r5
   3be6c:	cmp	sl, r2
   3be70:	bcc	3bea8 <flatcc_json_printer_int8_vector_field@@Base+0x288>
   3be74:	mov	r2, r5
   3be78:	mov	r1, r9
   3be7c:	bl	145c4 <memset@plt>
   3be80:	ldr	r2, [r4, #20]
   3be84:	add	r3, r2, r5
   3be88:	str	r3, [r4, #20]
   3be8c:	b	3bdec <flatcc_json_printer_int8_vector_field@@Base+0x1cc>
   3be90:	ldr	r3, [r4, #44]	; 0x2c
   3be94:	mov	r1, r7
   3be98:	mov	r0, r4
   3be9c:	blx	r3
   3bea0:	ldr	r3, [r4, #20]
   3bea4:	b	3bdec <flatcc_json_printer_int8_vector_field@@Base+0x1cc>
   3bea8:	cmp	r0, sl
   3beac:	bcs	3bf14 <flatcc_json_printer_int8_vector_field@@Base+0x2f4>
   3beb0:	sub	sl, sl, r0
   3beb4:	cmp	r5, sl
   3beb8:	bls	3be74 <flatcc_json_printer_int8_vector_field@@Base+0x254>
   3bebc:	mov	r2, sl
   3bec0:	mov	r1, r9
   3bec4:	bl	145c4 <memset@plt>
   3bec8:	ldr	r3, [r4, #20]
   3becc:	mov	r0, r4
   3bed0:	add	r3, r3, sl
   3bed4:	str	r3, [r4, #20]
   3bed8:	ldr	r2, [r4, #44]	; 0x2c
   3bedc:	mov	r1, r7
   3bee0:	blx	r2
   3bee4:	ldr	r0, [r4, #20]
   3bee8:	ldr	r3, [r4, #16]
   3beec:	sub	r5, r5, sl
   3bef0:	sub	sl, r3, r0
   3bef4:	cmp	r5, sl
   3bef8:	bhi	3bebc <flatcc_json_printer_int8_vector_field@@Base+0x29c>
   3befc:	b	3be74 <flatcc_json_printer_int8_vector_field@@Base+0x254>
   3bf00:	add	r2, lr, #48	; 0x30
   3bf04:	mov	r0, #1
   3bf08:	strb	r2, [r3]
   3bf0c:	strb	r7, [r3, #1]
   3bf10:	b	3bda0 <flatcc_json_printer_int8_vector_field@@Base+0x180>
   3bf14:	mov	r0, r4
   3bf18:	ldr	r2, [r4, #44]	; 0x2c
   3bf1c:	mov	r1, r7
   3bf20:	blx	r2
   3bf24:	ldr	sl, [r4, #16]
   3bf28:	ldr	r0, [r4, #20]
   3bf2c:	b	3beb0 <flatcc_json_printer_int8_vector_field@@Base+0x290>
   3bf30:	add	r1, r2, #1
   3bf34:	mov	r3, #10
   3bf38:	str	r1, [r4, #20]
   3bf3c:	strb	r3, [r2]
   3bf40:	ldr	r3, [r4, #32]
   3bf44:	mov	r0, r4
   3bf48:	sub	r3, r3, #1
   3bf4c:	str	r3, [r4, #32]
   3bf50:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3bf54:	ldr	r2, [r4, #20]
   3bf58:	b	3bcd0 <flatcc_json_printer_int8_vector_field@@Base+0xb0>
   3bf5c:	ldr	r3, [r4, #20]
   3bf60:	mov	r2, #10
   3bf64:	add	r1, r3, #1
   3bf68:	str	r1, [r4, #20]
   3bf6c:	mov	r0, r4
   3bf70:	strb	r2, [r3]
   3bf74:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3bf78:	ldr	r1, [r4, #20]
   3bf7c:	b	3bd04 <flatcc_json_printer_int8_vector_field@@Base+0xe4>
   3bf80:	mov	r1, r3
   3bf84:	mov	r0, r4
   3bf88:	ldr	r3, [r4, #44]	; 0x2c
   3bf8c:	blx	r3
   3bf90:	ldr	r1, [r4, #20]
   3bf94:	b	3bd04 <flatcc_json_printer_int8_vector_field@@Base+0xe4>
   3bf98:	andeq	r6, r4, r0, lsl #9
   3bf9c:	mvnpl	r8, pc, lsl r5

0003bfa0 <flatcc_json_printer_int16_vector_field@@Base>:
   3bfa0:	add	r2, r2, #2
   3bfa4:	ldr	ip, [r1, #8]
   3bfa8:	lsl	r2, r2, #1
   3bfac:	cmp	ip, r2
   3bfb0:	bxle	lr
   3bfb4:	ldr	ip, [r1, #4]
   3bfb8:	ldrh	ip, [ip, r2]
   3bfbc:	cmp	ip, #0
   3bfc0:	bxeq	lr
   3bfc4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bfc8:	ldr	r5, [r1]
   3bfcc:	adds	lr, r5, ip
   3bfd0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bfd4:	ldr	r2, [r1, #16]
   3bfd8:	cmp	r2, #0
   3bfdc:	add	r2, r2, #1
   3bfe0:	str	r2, [r1, #16]
   3bfe4:	ldrne	r2, [r0, #20]
   3bfe8:	movne	r1, #44	; 0x2c
   3bfec:	addne	r4, r2, #1
   3bff0:	strne	r4, [r0, #20]
   3bff4:	strbne	r1, [r2]
   3bff8:	mov	r1, r3
   3bffc:	ldr	r3, [r5, ip]
   3c000:	mov	r4, r0
   3c004:	ldr	r2, [sp, #40]	; 0x28
   3c008:	ldr	r6, [lr, r3]
   3c00c:	add	r8, lr, r3
   3c010:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3c014:	ldr	r3, [r4, #32]
   3c018:	ldr	r2, [r4, #20]
   3c01c:	add	r3, r3, #1
   3c020:	add	r0, r2, #1
   3c024:	mov	r1, #91	; 0x5b
   3c028:	cmp	r6, #0
   3c02c:	str	r3, [r4, #32]
   3c030:	str	r0, [r4, #20]
   3c034:	strb	r1, [r2]
   3c038:	bne	3c060 <flatcc_json_printer_int16_vector_field@@Base+0xc0>
   3c03c:	ldr	r2, [r4, #20]
   3c040:	ldrb	r3, [r4, #25]
   3c044:	cmp	r3, #0
   3c048:	bne	3c348 <flatcc_json_printer_int16_vector_field@@Base+0x3a8>
   3c04c:	add	r1, r2, #1
   3c050:	mov	r3, #93	; 0x5d
   3c054:	str	r1, [r4, #20]
   3c058:	strb	r3, [r2]
   3c05c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c060:	ldrb	r3, [r4, #25]
   3c064:	cmp	r3, #0
   3c068:	bne	3c374 <flatcc_json_printer_int16_vector_field@@Base+0x3d4>
   3c06c:	ldr	r1, [r4, #20]
   3c070:	ldr	r2, [r4, #16]
   3c074:	cmp	r1, r2
   3c078:	bcs	3c398 <flatcc_json_printer_int16_vector_field@@Base+0x3f8>
   3c07c:	ldrsh	r0, [r8, #4]
   3c080:	add	r8, r8, #4
   3c084:	cmp	r0, #0
   3c088:	lsr	r5, r0, #31
   3c08c:	rsblt	r0, r0, #0
   3c090:	movlt	r3, #45	; 0x2d
   3c094:	sxthlt	r0, r0
   3c098:	strblt	r3, [r1]
   3c09c:	uxth	r0, r0
   3c0a0:	addlt	r1, r1, #1
   3c0a4:	bl	33bd0 <flatcc_json_parser_struct_as_root@@Base+0xd4>
   3c0a8:	ldr	r2, [r4, #20]
   3c0ac:	cmp	r6, #1
   3c0b0:	sub	r6, r6, #2
   3c0b4:	add	r0, r5, r0
   3c0b8:	add	r2, r2, r0
   3c0bc:	str	r2, [r4, #20]
   3c0c0:	beq	3c040 <flatcc_json_printer_int16_vector_field@@Base+0xa0>
   3c0c4:	mov	r7, #0
   3c0c8:	ldr	r9, [pc, #736]	; 3c3b0 <flatcc_json_printer_int16_vector_field@@Base+0x410>
   3c0cc:	b	3c178 <flatcc_json_printer_int16_vector_field@@Base+0x1d8>
   3c0d0:	ldr	r2, [pc, #732]	; 3c3b4 <flatcc_json_printer_int16_vector_field@@Base+0x414>
   3c0d4:	cmp	r3, r2
   3c0d8:	bls	3c264 <flatcc_json_printer_int16_vector_field@@Base+0x2c4>
   3c0dc:	ldr	r2, [pc, #724]	; 3c3b8 <flatcc_json_printer_int16_vector_field@@Base+0x418>
   3c0e0:	strb	r7, [r1, #5]
   3c0e4:	add	ip, r1, #3
   3c0e8:	umull	r2, r0, r2, r3
   3c0ec:	mov	r2, #100	; 0x64
   3c0f0:	lsr	r0, r0, #5
   3c0f4:	mul	r2, r2, r0
   3c0f8:	sub	r2, r3, r2
   3c0fc:	uxth	r3, r0
   3c100:	uxth	r2, r2
   3c104:	ldrb	r0, [r9, r2, lsl #1]
   3c108:	add	r2, r9, r2, lsl #1
   3c10c:	strb	r0, [r1, #3]
   3c110:	ldrb	r2, [r2, #1]
   3c114:	mov	r0, #5
   3c118:	strb	r2, [r1, #4]
   3c11c:	ldr	r2, [pc, #660]	; 3c3b8 <flatcc_json_printer_int16_vector_field@@Base+0x418>
   3c120:	sub	r1, ip, #2
   3c124:	umull	r2, r5, r2, r3
   3c128:	mov	r2, #100	; 0x64
   3c12c:	lsr	r5, r5, #5
   3c130:	mul	r2, r2, r5
   3c134:	sub	r2, r3, r2
   3c138:	uxth	r3, r5
   3c13c:	uxth	r2, r2
   3c140:	ldrb	r5, [r9, r2, lsl #1]
   3c144:	add	r2, r9, r2, lsl #1
   3c148:	strb	r5, [ip, #-2]
   3c14c:	ldrb	r2, [r2, #1]
   3c150:	strb	r2, [ip, #-1]
   3c154:	add	r3, r3, #48	; 0x30
   3c158:	strb	r3, [r1, #-1]
   3c15c:	ldr	r2, [r4, #20]
   3c160:	add	r0, lr, r0
   3c164:	cmp	r6, #0
   3c168:	add	r2, r2, r0
   3c16c:	sub	r6, r6, #1
   3c170:	str	r2, [r4, #20]
   3c174:	beq	3c040 <flatcc_json_printer_int16_vector_field@@Base+0xa0>
   3c178:	add	r3, r2, #1
   3c17c:	str	r3, [r4, #20]
   3c180:	mov	r3, #44	; 0x2c
   3c184:	strb	r3, [r2]
   3c188:	ldrb	r3, [r4, #25]
   3c18c:	cmp	r3, #0
   3c190:	bne	3c214 <flatcc_json_printer_int16_vector_field@@Base+0x274>
   3c194:	ldr	r1, [r4, #20]
   3c198:	ldr	r3, [r4, #16]
   3c19c:	cmp	r1, r3
   3c1a0:	bcs	3c2a8 <flatcc_json_printer_int16_vector_field@@Base+0x308>
   3c1a4:	ldrsh	r3, [r8, #2]!
   3c1a8:	cmp	r3, #0
   3c1ac:	lsr	lr, r3, #31
   3c1b0:	rsblt	r3, r3, #0
   3c1b4:	movlt	r2, #45	; 0x2d
   3c1b8:	sxthlt	r3, r3
   3c1bc:	strblt	r2, [r1]
   3c1c0:	ldr	r2, [pc, #500]	; 3c3bc <flatcc_json_printer_int16_vector_field@@Base+0x41c>
   3c1c4:	uxth	r3, r3
   3c1c8:	addlt	r1, r1, #1
   3c1cc:	cmp	r3, r2
   3c1d0:	bhi	3c0d0 <flatcc_json_printer_int16_vector_field@@Base+0x130>
   3c1d4:	cmp	r3, #99	; 0x63
   3c1d8:	strbhi	r7, [r1, #3]
   3c1dc:	addhi	ip, r1, #3
   3c1e0:	movhi	r0, #3
   3c1e4:	bhi	3c11c <flatcc_json_printer_int16_vector_field@@Base+0x17c>
   3c1e8:	cmp	r3, #9
   3c1ec:	strbhi	r7, [r1, #2]
   3c1f0:	addhi	r2, r1, #2
   3c1f4:	movhi	r0, #2
   3c1f8:	bls	3c31c <flatcc_json_printer_int16_vector_field@@Base+0x37c>
   3c1fc:	ldrb	r1, [r9, r3, lsl #1]
   3c200:	add	r3, r9, r3, lsl #1
   3c204:	strb	r1, [r2, #-2]
   3c208:	ldrb	r3, [r3, #1]
   3c20c:	strb	r3, [r2, #-1]
   3c210:	b	3c15c <flatcc_json_printer_int16_vector_field@@Base+0x1bc>
   3c214:	ldr	r3, [r4, #20]
   3c218:	mov	r2, #10
   3c21c:	add	r1, r3, #1
   3c220:	str	r1, [r4, #20]
   3c224:	strb	r2, [r3]
   3c228:	ldrb	r3, [r4, #25]
   3c22c:	ldr	r1, [r4, #32]
   3c230:	ldr	r0, [r4, #20]
   3c234:	ldr	r5, [r4, #16]
   3c238:	mul	sl, r1, r3
   3c23c:	add	r3, r0, sl
   3c240:	cmp	r5, r3
   3c244:	bcc	3c2c0 <flatcc_json_printer_int16_vector_field@@Base+0x320>
   3c248:	mov	r1, #32
   3c24c:	mov	r2, sl
   3c250:	bl	145c4 <memset@plt>
   3c254:	ldr	r1, [r4, #20]
   3c258:	add	r1, r1, sl
   3c25c:	str	r1, [r4, #20]
   3c260:	b	3c1a4 <flatcc_json_printer_int16_vector_field@@Base+0x204>
   3c264:	ldr	r2, [pc, #332]	; 3c3b8 <flatcc_json_printer_int16_vector_field@@Base+0x418>
   3c268:	mov	ip, #100	; 0x64
   3c26c:	strb	r7, [r1, #4]
   3c270:	umull	r2, r0, r2, r3
   3c274:	add	r2, r1, #2
   3c278:	lsr	r0, r0, #5
   3c27c:	mul	ip, ip, r0
   3c280:	sub	ip, r3, ip
   3c284:	uxth	r3, r0
   3c288:	uxth	ip, ip
   3c28c:	ldrb	r0, [r9, ip, lsl #1]
   3c290:	add	ip, r9, ip, lsl #1
   3c294:	strb	r0, [r1, #2]
   3c298:	ldrb	ip, [ip, #1]
   3c29c:	mov	r0, #4
   3c2a0:	strb	ip, [r1, #3]
   3c2a4:	b	3c1fc <flatcc_json_printer_int16_vector_field@@Base+0x25c>
   3c2a8:	mov	r1, r7
   3c2ac:	ldr	r3, [r4, #44]	; 0x2c
   3c2b0:	mov	r0, r4
   3c2b4:	blx	r3
   3c2b8:	ldr	r1, [r4, #20]
   3c2bc:	b	3c1a4 <flatcc_json_printer_int16_vector_field@@Base+0x204>
   3c2c0:	cmp	r0, r5
   3c2c4:	bcs	3c32c <flatcc_json_printer_int16_vector_field@@Base+0x38c>
   3c2c8:	sub	r5, r5, r0
   3c2cc:	cmp	sl, r5
   3c2d0:	bls	3c248 <flatcc_json_printer_int16_vector_field@@Base+0x2a8>
   3c2d4:	mov	fp, #32
   3c2d8:	mov	r2, r5
   3c2dc:	mov	r1, fp
   3c2e0:	bl	145c4 <memset@plt>
   3c2e4:	ldr	r3, [r4, #20]
   3c2e8:	mov	r0, r4
   3c2ec:	add	r3, r3, r5
   3c2f0:	str	r3, [r4, #20]
   3c2f4:	ldr	r2, [r4, #44]	; 0x2c
   3c2f8:	mov	r1, r7
   3c2fc:	blx	r2
   3c300:	ldr	r0, [r4, #20]
   3c304:	ldr	r3, [r4, #16]
   3c308:	sub	sl, sl, r5
   3c30c:	sub	r5, r3, r0
   3c310:	cmp	sl, r5
   3c314:	bhi	3c2d8 <flatcc_json_printer_int16_vector_field@@Base+0x338>
   3c318:	b	3c248 <flatcc_json_printer_int16_vector_field@@Base+0x2a8>
   3c31c:	strb	r7, [r1, #1]
   3c320:	mov	r0, #1
   3c324:	add	r1, r1, #1
   3c328:	b	3c154 <flatcc_json_printer_int16_vector_field@@Base+0x1b4>
   3c32c:	mov	r0, r4
   3c330:	ldr	r3, [r4, #44]	; 0x2c
   3c334:	mov	r1, r7
   3c338:	blx	r3
   3c33c:	ldr	r5, [r4, #16]
   3c340:	ldr	r0, [r4, #20]
   3c344:	b	3c2c8 <flatcc_json_printer_int16_vector_field@@Base+0x328>
   3c348:	add	r1, r2, #1
   3c34c:	mov	r3, #10
   3c350:	str	r1, [r4, #20]
   3c354:	strb	r3, [r2]
   3c358:	ldr	r3, [r4, #32]
   3c35c:	mov	r0, r4
   3c360:	sub	r3, r3, #1
   3c364:	str	r3, [r4, #32]
   3c368:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3c36c:	ldr	r2, [r4, #20]
   3c370:	b	3c04c <flatcc_json_printer_int16_vector_field@@Base+0xac>
   3c374:	ldr	r3, [r4, #20]
   3c378:	mov	r2, #10
   3c37c:	add	r1, r3, #1
   3c380:	str	r1, [r4, #20]
   3c384:	mov	r0, r4
   3c388:	strb	r2, [r3]
   3c38c:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3c390:	ldr	r1, [r4, #20]
   3c394:	b	3c07c <flatcc_json_printer_int16_vector_field@@Base+0xdc>
   3c398:	mov	r1, r3
   3c39c:	mov	r0, r4
   3c3a0:	ldr	r3, [r4, #44]	; 0x2c
   3c3a4:	blx	r3
   3c3a8:	ldr	r1, [r4, #20]
   3c3ac:	b	3c07c <flatcc_json_printer_int16_vector_field@@Base+0xdc>
   3c3b0:	andeq	r6, r4, r0, lsl #9
   3c3b4:	andeq	r2, r0, pc, lsl #14
   3c3b8:	mvnpl	r8, pc, lsl r5
   3c3bc:	andeq	r0, r0, r7, ror #7

0003c3c0 <flatcc_json_printer_int32_vector_field@@Base>:
   3c3c0:	add	r2, r2, #2
   3c3c4:	ldr	ip, [r1, #8]
   3c3c8:	lsl	r2, r2, #1
   3c3cc:	cmp	ip, r2
   3c3d0:	bxle	lr
   3c3d4:	ldr	ip, [r1, #4]
   3c3d8:	ldrh	ip, [ip, r2]
   3c3dc:	cmp	ip, #0
   3c3e0:	bxeq	lr
   3c3e4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c3e8:	ldr	r5, [r1]
   3c3ec:	adds	lr, r5, ip
   3c3f0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c3f4:	ldr	r2, [r1, #16]
   3c3f8:	cmp	r2, #0
   3c3fc:	add	r2, r2, #1
   3c400:	str	r2, [r1, #16]
   3c404:	ldrne	r2, [r0, #20]
   3c408:	movne	r1, #44	; 0x2c
   3c40c:	addne	r4, r2, #1
   3c410:	strne	r4, [r0, #20]
   3c414:	strbne	r1, [r2]
   3c418:	mov	r1, r3
   3c41c:	ldr	r3, [r5, ip]
   3c420:	mov	r4, r0
   3c424:	ldr	r2, [sp, #40]	; 0x28
   3c428:	ldr	r6, [lr, r3]
   3c42c:	add	r7, lr, r3
   3c430:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3c434:	ldr	r3, [r4, #32]
   3c438:	ldr	r2, [r4, #20]
   3c43c:	add	r3, r3, #1
   3c440:	add	r0, r2, #1
   3c444:	mov	r1, #91	; 0x5b
   3c448:	cmp	r6, #0
   3c44c:	str	r3, [r4, #32]
   3c450:	str	r0, [r4, #20]
   3c454:	strb	r1, [r2]
   3c458:	bne	3c480 <flatcc_json_printer_int32_vector_field@@Base+0xc0>
   3c45c:	ldr	r0, [r4, #20]
   3c460:	ldrb	r3, [r4, #25]
   3c464:	cmp	r3, #0
   3c468:	bne	3c62c <flatcc_json_printer_int32_vector_field@@Base+0x26c>
   3c46c:	add	r2, r0, #1
   3c470:	mov	r3, #93	; 0x5d
   3c474:	str	r2, [r4, #20]
   3c478:	strb	r3, [r0]
   3c47c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c480:	ldrb	r3, [r4, #25]
   3c484:	cmp	r3, #0
   3c488:	bne	3c658 <flatcc_json_printer_int32_vector_field@@Base+0x298>
   3c48c:	ldr	r1, [r4, #20]
   3c490:	ldr	r2, [r4, #16]
   3c494:	cmp	r1, r2
   3c498:	bcs	3c67c <flatcc_json_printer_int32_vector_field@@Base+0x2bc>
   3c49c:	ldr	r0, [r7, #4]
   3c4a0:	add	r7, r7, #4
   3c4a4:	cmp	r0, #0
   3c4a8:	movlt	r3, #45	; 0x2d
   3c4ac:	strblt	r3, [r1]
   3c4b0:	lsr	r5, r0, #31
   3c4b4:	addlt	r1, r1, #1
   3c4b8:	rsblt	r0, r0, #0
   3c4bc:	bl	33d38 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   3c4c0:	ldr	r3, [r4, #20]
   3c4c4:	cmp	r6, #1
   3c4c8:	sub	r6, r6, #2
   3c4cc:	add	r0, r5, r0
   3c4d0:	add	r0, r3, r0
   3c4d4:	str	r0, [r4, #20]
   3c4d8:	beq	3c460 <flatcc_json_printer_int32_vector_field@@Base+0xa0>
   3c4dc:	mov	sl, #44	; 0x2c
   3c4e0:	mov	r9, #0
   3c4e4:	mov	r8, #32
   3c4e8:	b	3c538 <flatcc_json_printer_int32_vector_field@@Base+0x178>
   3c4ec:	ldr	r1, [r4, #20]
   3c4f0:	ldr	r3, [r4, #16]
   3c4f4:	cmp	r1, r3
   3c4f8:	bcs	3c5a0 <flatcc_json_printer_int32_vector_field@@Base+0x1e0>
   3c4fc:	ldr	r0, [r7, #4]!
   3c500:	cmp	r0, #0
   3c504:	movlt	r3, #45	; 0x2d
   3c508:	strblt	r3, [r1]
   3c50c:	lsr	r5, r0, #31
   3c510:	addlt	r1, r1, #1
   3c514:	rsblt	r0, r0, #0
   3c518:	bl	33d38 <flatcc_json_parser_struct_as_root@@Base+0x23c>
   3c51c:	ldr	r3, [r4, #20]
   3c520:	cmp	r6, #0
   3c524:	sub	r6, r6, #1
   3c528:	add	r0, r5, r0
   3c52c:	add	r0, r3, r0
   3c530:	str	r0, [r4, #20]
   3c534:	beq	3c460 <flatcc_json_printer_int32_vector_field@@Base+0xa0>
   3c538:	add	r3, r0, #1
   3c53c:	str	r3, [r4, #20]
   3c540:	strb	sl, [r0]
   3c544:	ldrb	r3, [r4, #25]
   3c548:	cmp	r3, #0
   3c54c:	beq	3c4ec <flatcc_json_printer_int32_vector_field@@Base+0x12c>
   3c550:	ldr	r3, [r4, #20]
   3c554:	add	r2, r3, #1
   3c558:	str	r2, [r4, #20]
   3c55c:	mov	r2, #10
   3c560:	strb	r2, [r3]
   3c564:	ldrb	r1, [r4, #25]
   3c568:	ldr	r5, [r4, #32]
   3c56c:	ldr	r0, [r4, #20]
   3c570:	ldr	fp, [r4, #16]
   3c574:	mul	r5, r5, r1
   3c578:	add	r3, r0, r5
   3c57c:	cmp	fp, r3
   3c580:	bcc	3c5b8 <flatcc_json_printer_int32_vector_field@@Base+0x1f8>
   3c584:	mov	r1, r8
   3c588:	mov	r2, r5
   3c58c:	bl	145c4 <memset@plt>
   3c590:	ldr	r1, [r4, #20]
   3c594:	add	r1, r1, r5
   3c598:	str	r1, [r4, #20]
   3c59c:	b	3c4fc <flatcc_json_printer_int32_vector_field@@Base+0x13c>
   3c5a0:	mov	r1, r9
   3c5a4:	ldr	r3, [r4, #44]	; 0x2c
   3c5a8:	mov	r0, r4
   3c5ac:	blx	r3
   3c5b0:	ldr	r1, [r4, #20]
   3c5b4:	b	3c4fc <flatcc_json_printer_int32_vector_field@@Base+0x13c>
   3c5b8:	cmp	r0, fp
   3c5bc:	bcs	3c610 <flatcc_json_printer_int32_vector_field@@Base+0x250>
   3c5c0:	sub	fp, fp, r0
   3c5c4:	cmp	r5, fp
   3c5c8:	bls	3c584 <flatcc_json_printer_int32_vector_field@@Base+0x1c4>
   3c5cc:	mov	r2, fp
   3c5d0:	mov	r1, r8
   3c5d4:	bl	145c4 <memset@plt>
   3c5d8:	ldr	r3, [r4, #20]
   3c5dc:	mov	r0, r4
   3c5e0:	add	r3, r3, fp
   3c5e4:	str	r3, [r4, #20]
   3c5e8:	ldr	r2, [r4, #44]	; 0x2c
   3c5ec:	mov	r1, r9
   3c5f0:	blx	r2
   3c5f4:	ldr	r0, [r4, #20]
   3c5f8:	ldr	r3, [r4, #16]
   3c5fc:	sub	r5, r5, fp
   3c600:	sub	fp, r3, r0
   3c604:	cmp	r5, fp
   3c608:	bhi	3c5cc <flatcc_json_printer_int32_vector_field@@Base+0x20c>
   3c60c:	b	3c584 <flatcc_json_printer_int32_vector_field@@Base+0x1c4>
   3c610:	mov	r0, r4
   3c614:	ldr	r3, [r4, #44]	; 0x2c
   3c618:	mov	r1, r9
   3c61c:	blx	r3
   3c620:	ldr	fp, [r4, #16]
   3c624:	ldr	r0, [r4, #20]
   3c628:	b	3c5c0 <flatcc_json_printer_int32_vector_field@@Base+0x200>
   3c62c:	add	r2, r0, #1
   3c630:	mov	r3, #10
   3c634:	str	r2, [r4, #20]
   3c638:	strb	r3, [r0]
   3c63c:	ldr	r3, [r4, #32]
   3c640:	mov	r0, r4
   3c644:	sub	r3, r3, #1
   3c648:	str	r3, [r4, #32]
   3c64c:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3c650:	ldr	r0, [r4, #20]
   3c654:	b	3c46c <flatcc_json_printer_int32_vector_field@@Base+0xac>
   3c658:	ldr	r3, [r4, #20]
   3c65c:	mov	r2, #10
   3c660:	add	r1, r3, #1
   3c664:	str	r1, [r4, #20]
   3c668:	mov	r0, r4
   3c66c:	strb	r2, [r3]
   3c670:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3c674:	ldr	r1, [r4, #20]
   3c678:	b	3c49c <flatcc_json_printer_int32_vector_field@@Base+0xdc>
   3c67c:	mov	r1, r3
   3c680:	mov	r0, r4
   3c684:	ldr	r3, [r4, #44]	; 0x2c
   3c688:	blx	r3
   3c68c:	ldr	r1, [r4, #20]
   3c690:	b	3c49c <flatcc_json_printer_int32_vector_field@@Base+0xdc>

0003c694 <flatcc_json_printer_int64_vector_field@@Base>:
   3c694:	add	r2, r2, #2
   3c698:	ldr	ip, [r1, #8]
   3c69c:	lsl	r2, r2, #1
   3c6a0:	cmp	ip, r2
   3c6a4:	bxle	lr
   3c6a8:	ldr	ip, [r1, #4]
   3c6ac:	ldrh	ip, [ip, r2]
   3c6b0:	cmp	ip, #0
   3c6b4:	bxeq	lr
   3c6b8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c6bc:	ldr	r5, [r1]
   3c6c0:	adds	lr, r5, ip
   3c6c4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c6c8:	ldr	r2, [r1, #16]
   3c6cc:	cmp	r2, #0
   3c6d0:	add	r2, r2, #1
   3c6d4:	str	r2, [r1, #16]
   3c6d8:	ldrne	r2, [r0, #20]
   3c6dc:	movne	r1, #44	; 0x2c
   3c6e0:	addne	r4, r2, #1
   3c6e4:	strne	r4, [r0, #20]
   3c6e8:	strbne	r1, [r2]
   3c6ec:	mov	r1, r3
   3c6f0:	ldr	r3, [r5, ip]
   3c6f4:	mov	r4, r0
   3c6f8:	ldr	r2, [sp, #40]	; 0x28
   3c6fc:	ldr	r6, [lr, r3]
   3c700:	add	r7, lr, r3
   3c704:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3c708:	ldr	r3, [r4, #32]
   3c70c:	ldr	r2, [r4, #20]
   3c710:	add	r3, r3, #1
   3c714:	add	r0, r2, #1
   3c718:	mov	r1, #91	; 0x5b
   3c71c:	cmp	r6, #0
   3c720:	str	r3, [r4, #32]
   3c724:	str	r0, [r4, #20]
   3c728:	strb	r1, [r2]
   3c72c:	bne	3c754 <flatcc_json_printer_int64_vector_field@@Base+0xc0>
   3c730:	ldr	r0, [r4, #20]
   3c734:	ldrb	r3, [r4, #25]
   3c738:	cmp	r3, #0
   3c73c:	bne	3c908 <flatcc_json_printer_int64_vector_field@@Base+0x274>
   3c740:	add	r2, r0, #1
   3c744:	mov	r3, #93	; 0x5d
   3c748:	str	r2, [r4, #20]
   3c74c:	strb	r3, [r0]
   3c750:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c754:	ldrb	r1, [r4, #25]
   3c758:	cmp	r1, #0
   3c75c:	bne	3c934 <flatcc_json_printer_int64_vector_field@@Base+0x2a0>
   3c760:	ldr	r2, [r4, #20]
   3c764:	ldr	r3, [r4, #16]
   3c768:	cmp	r2, r3
   3c76c:	bcs	3c970 <flatcc_json_printer_int64_vector_field@@Base+0x2dc>
   3c770:	ldrd	r0, [r7, #4]
   3c774:	add	r7, r7, #4
   3c778:	cmp	r0, #0
   3c77c:	sbcs	r3, r1, #0
   3c780:	lsr	r5, r1, #31
   3c784:	blt	3c958 <flatcc_json_printer_int64_vector_field@@Base+0x2c4>
   3c788:	bl	34060 <flatcc_json_parser_struct_as_root@@Base+0x564>
   3c78c:	ldr	r3, [r4, #20]
   3c790:	cmp	r6, #1
   3c794:	sub	r6, r6, #2
   3c798:	add	r0, r5, r0
   3c79c:	add	r0, r3, r0
   3c7a0:	str	r0, [r4, #20]
   3c7a4:	beq	3c734 <flatcc_json_printer_int64_vector_field@@Base+0xa0>
   3c7a8:	mov	sl, #44	; 0x2c
   3c7ac:	mov	r9, #0
   3c7b0:	mov	r8, #32
   3c7b4:	b	3c7fc <flatcc_json_printer_int64_vector_field@@Base+0x168>
   3c7b8:	ldr	r2, [r4, #20]
   3c7bc:	ldr	r3, [r4, #16]
   3c7c0:	cmp	r2, r3
   3c7c4:	bcs	3c87c <flatcc_json_printer_int64_vector_field@@Base+0x1e8>
   3c7c8:	ldrd	r0, [r7, #8]!
   3c7cc:	cmp	r0, #0
   3c7d0:	sbcs	r3, r1, #0
   3c7d4:	lsr	fp, r1, #31
   3c7d8:	blt	3c864 <flatcc_json_printer_int64_vector_field@@Base+0x1d0>
   3c7dc:	bl	34060 <flatcc_json_parser_struct_as_root@@Base+0x564>
   3c7e0:	ldr	r3, [r4, #20]
   3c7e4:	cmp	r6, #0
   3c7e8:	sub	r6, r6, #1
   3c7ec:	add	r0, fp, r0
   3c7f0:	add	r0, r3, r0
   3c7f4:	str	r0, [r4, #20]
   3c7f8:	beq	3c734 <flatcc_json_printer_int64_vector_field@@Base+0xa0>
   3c7fc:	add	r3, r0, #1
   3c800:	str	r3, [r4, #20]
   3c804:	strb	sl, [r0]
   3c808:	ldrb	r3, [r4, #25]
   3c80c:	cmp	r3, #0
   3c810:	beq	3c7b8 <flatcc_json_printer_int64_vector_field@@Base+0x124>
   3c814:	ldr	r3, [r4, #20]
   3c818:	add	r2, r3, #1
   3c81c:	str	r2, [r4, #20]
   3c820:	mov	r2, #10
   3c824:	strb	r2, [r3]
   3c828:	ldrb	r2, [r4, #25]
   3c82c:	ldr	r5, [r4, #32]
   3c830:	ldr	r0, [r4, #20]
   3c834:	ldr	fp, [r4, #16]
   3c838:	mul	r5, r5, r2
   3c83c:	add	r3, r0, r5
   3c840:	cmp	fp, r3
   3c844:	bcc	3c894 <flatcc_json_printer_int64_vector_field@@Base+0x200>
   3c848:	mov	r2, r5
   3c84c:	mov	r1, r8
   3c850:	bl	145c4 <memset@plt>
   3c854:	ldr	r2, [r4, #20]
   3c858:	add	r2, r2, r5
   3c85c:	str	r2, [r4, #20]
   3c860:	b	3c7c8 <flatcc_json_printer_int64_vector_field@@Base+0x134>
   3c864:	mov	r3, #45	; 0x2d
   3c868:	rsbs	r0, r0, #0
   3c86c:	strb	r3, [r2]
   3c870:	rsc	r1, r1, #0
   3c874:	add	r2, r2, #1
   3c878:	b	3c7dc <flatcc_json_printer_int64_vector_field@@Base+0x148>
   3c87c:	ldr	r3, [r4, #44]	; 0x2c
   3c880:	mov	r1, r9
   3c884:	mov	r0, r4
   3c888:	blx	r3
   3c88c:	ldr	r2, [r4, #20]
   3c890:	b	3c7c8 <flatcc_json_printer_int64_vector_field@@Base+0x134>
   3c894:	cmp	r0, fp
   3c898:	bcs	3c8ec <flatcc_json_printer_int64_vector_field@@Base+0x258>
   3c89c:	sub	fp, fp, r0
   3c8a0:	cmp	r5, fp
   3c8a4:	bls	3c848 <flatcc_json_printer_int64_vector_field@@Base+0x1b4>
   3c8a8:	mov	r2, fp
   3c8ac:	mov	r1, r8
   3c8b0:	bl	145c4 <memset@plt>
   3c8b4:	ldr	r3, [r4, #20]
   3c8b8:	mov	r0, r4
   3c8bc:	add	r3, r3, fp
   3c8c0:	str	r3, [r4, #20]
   3c8c4:	ldr	r2, [r4, #44]	; 0x2c
   3c8c8:	mov	r1, r9
   3c8cc:	blx	r2
   3c8d0:	ldr	r0, [r4, #20]
   3c8d4:	ldr	r3, [r4, #16]
   3c8d8:	sub	r5, r5, fp
   3c8dc:	sub	fp, r3, r0
   3c8e0:	cmp	r5, fp
   3c8e4:	bhi	3c8a8 <flatcc_json_printer_int64_vector_field@@Base+0x214>
   3c8e8:	b	3c848 <flatcc_json_printer_int64_vector_field@@Base+0x1b4>
   3c8ec:	mov	r0, r4
   3c8f0:	ldr	r3, [r4, #44]	; 0x2c
   3c8f4:	mov	r1, r9
   3c8f8:	blx	r3
   3c8fc:	ldr	fp, [r4, #16]
   3c900:	ldr	r0, [r4, #20]
   3c904:	b	3c89c <flatcc_json_printer_int64_vector_field@@Base+0x208>
   3c908:	add	r2, r0, #1
   3c90c:	mov	r3, #10
   3c910:	str	r2, [r4, #20]
   3c914:	strb	r3, [r0]
   3c918:	ldr	r3, [r4, #32]
   3c91c:	mov	r0, r4
   3c920:	sub	r3, r3, #1
   3c924:	str	r3, [r4, #32]
   3c928:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3c92c:	ldr	r0, [r4, #20]
   3c930:	b	3c740 <flatcc_json_printer_int64_vector_field@@Base+0xac>
   3c934:	ldr	r3, [r4, #20]
   3c938:	mov	r2, #10
   3c93c:	add	r1, r3, #1
   3c940:	str	r1, [r4, #20]
   3c944:	mov	r0, r4
   3c948:	strb	r2, [r3]
   3c94c:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3c950:	ldr	r2, [r4, #20]
   3c954:	b	3c770 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   3c958:	mov	r3, #45	; 0x2d
   3c95c:	rsbs	r0, r0, #0
   3c960:	strb	r3, [r2]
   3c964:	rsc	r1, r1, #0
   3c968:	add	r2, r2, #1
   3c96c:	b	3c788 <flatcc_json_printer_int64_vector_field@@Base+0xf4>
   3c970:	ldr	r3, [r4, #44]	; 0x2c
   3c974:	mov	r0, r4
   3c978:	blx	r3
   3c97c:	ldr	r2, [r4, #20]
   3c980:	b	3c770 <flatcc_json_printer_int64_vector_field@@Base+0xdc>

0003c984 <flatcc_json_printer_bool_vector_field@@Base>:
   3c984:	add	r2, r2, #2
   3c988:	ldr	ip, [r1, #8]
   3c98c:	lsl	r2, r2, #1
   3c990:	cmp	ip, r2
   3c994:	bxle	lr
   3c998:	ldr	ip, [r1, #4]
   3c99c:	ldrh	ip, [ip, r2]
   3c9a0:	cmp	ip, #0
   3c9a4:	bxeq	lr
   3c9a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c9ac:	sub	sp, sp, #12
   3c9b0:	ldr	lr, [r1]
   3c9b4:	adds	r5, lr, ip
   3c9b8:	beq	3ca44 <flatcc_json_printer_bool_vector_field@@Base+0xc0>
   3c9bc:	ldr	r2, [r1, #16]
   3c9c0:	cmp	r2, #0
   3c9c4:	add	r2, r2, #1
   3c9c8:	str	r2, [r1, #16]
   3c9cc:	ldrne	r2, [r0, #20]
   3c9d0:	movne	r1, #44	; 0x2c
   3c9d4:	addne	r4, r2, #1
   3c9d8:	strne	r4, [r0, #20]
   3c9dc:	strbne	r1, [r2]
   3c9e0:	mov	r1, r3
   3c9e4:	ldr	r3, [lr, ip]
   3c9e8:	mov	r4, r0
   3c9ec:	ldr	r2, [sp, #48]	; 0x30
   3c9f0:	ldr	r8, [r5, r3]
   3c9f4:	add	fp, r5, r3
   3c9f8:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3c9fc:	ldr	r3, [r4, #32]
   3ca00:	ldr	r2, [r4, #20]
   3ca04:	add	r3, r3, #1
   3ca08:	add	r0, r2, #1
   3ca0c:	mov	r1, #91	; 0x5b
   3ca10:	cmp	r8, #0
   3ca14:	str	r3, [r4, #32]
   3ca18:	str	r0, [r4, #20]
   3ca1c:	strb	r1, [r2]
   3ca20:	bne	3ca4c <flatcc_json_printer_bool_vector_field@@Base+0xc8>
   3ca24:	ldr	r3, [r4, #20]
   3ca28:	ldrb	r2, [r4, #25]
   3ca2c:	cmp	r2, #0
   3ca30:	bne	3cc3c <flatcc_json_printer_bool_vector_field@@Base+0x2b8>
   3ca34:	add	r1, r3, #1
   3ca38:	mov	r2, #93	; 0x5d
   3ca3c:	str	r1, [r4, #20]
   3ca40:	strb	r2, [r3]
   3ca44:	add	sp, sp, #12
   3ca48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ca4c:	ldrb	r1, [r4, #25]
   3ca50:	cmp	r1, #0
   3ca54:	bne	3cc80 <flatcc_json_printer_bool_vector_field@@Base+0x2fc>
   3ca58:	ldr	r2, [r4, #20]
   3ca5c:	ldr	r3, [r4, #16]
   3ca60:	cmp	r2, r3
   3ca64:	bcs	3cca4 <flatcc_json_printer_bool_vector_field@@Base+0x320>
   3ca68:	ldrb	r3, [fp, #4]
   3ca6c:	add	r6, fp, #4
   3ca70:	ldr	r1, [pc, #576]	; 3ccb8 <flatcc_json_printer_bool_vector_field@@Base+0x334>
   3ca74:	cmp	r3, #0
   3ca78:	bne	3cc68 <flatcc_json_printer_bool_vector_field@@Base+0x2e4>
   3ca7c:	add	ip, r1, #1792	; 0x700
   3ca80:	ldr	r0, [r1, #1792]	; 0x700
   3ca84:	ldrh	r1, [ip, #4]
   3ca88:	mov	r3, #5
   3ca8c:	str	r0, [r2]
   3ca90:	strh	r1, [r2, #4]
   3ca94:	ldr	r2, [r4, #20]
   3ca98:	cmp	r8, #1
   3ca9c:	add	r3, r2, r3
   3caa0:	str	r3, [r4, #20]
   3caa4:	beq	3ca28 <flatcc_json_printer_bool_vector_field@@Base+0xa4>
   3caa8:	ldr	r9, [pc, #524]	; 3ccbc <flatcc_json_printer_bool_vector_field@@Base+0x338>
   3caac:	add	r2, r8, #3
   3cab0:	mov	r7, #0
   3cab4:	str	r2, [sp]
   3cab8:	sub	r2, r9, #8
   3cabc:	str	r2, [sp, #4]
   3cac0:	add	r2, r3, #1
   3cac4:	str	r2, [r4, #20]
   3cac8:	mov	r2, #44	; 0x2c
   3cacc:	strb	r2, [r3]
   3cad0:	ldrb	r3, [r4, #25]
   3cad4:	cmp	r3, #0
   3cad8:	bne	3cb5c <flatcc_json_printer_bool_vector_field@@Base+0x1d8>
   3cadc:	ldr	r8, [r4, #20]
   3cae0:	ldr	r3, [r4, #16]
   3cae4:	cmp	r8, r3
   3cae8:	bcs	3cbac <flatcc_json_printer_bool_vector_field@@Base+0x228>
   3caec:	ldrb	r3, [r6, #1]!
   3caf0:	cmp	r3, #0
   3caf4:	bne	3cb28 <flatcc_json_printer_bool_vector_field@@Base+0x1a4>
   3caf8:	ldrh	r3, [r9, #4]
   3cafc:	ldr	r0, [r9]
   3cb00:	ldr	r2, [sp]
   3cb04:	strh	r3, [r8, #4]
   3cb08:	str	r0, [r8]
   3cb0c:	ldr	r3, [r4, #20]
   3cb10:	sub	r2, r2, r6
   3cb14:	add	r3, r3, #5
   3cb18:	cmn	fp, r2
   3cb1c:	str	r3, [r4, #20]
   3cb20:	bne	3cac0 <flatcc_json_printer_bool_vector_field@@Base+0x13c>
   3cb24:	b	3ca28 <flatcc_json_printer_bool_vector_field@@Base+0xa4>
   3cb28:	ldr	r2, [sp, #4]
   3cb2c:	ldrb	r3, [r2, #4]
   3cb30:	ldr	r0, [r2]
   3cb34:	ldr	r2, [sp]
   3cb38:	strb	r3, [r8, #4]
   3cb3c:	str	r0, [r8]
   3cb40:	ldr	r3, [r4, #20]
   3cb44:	sub	r2, r2, r6
   3cb48:	add	r3, r3, #4
   3cb4c:	cmn	fp, r2
   3cb50:	str	r3, [r4, #20]
   3cb54:	bne	3cac0 <flatcc_json_printer_bool_vector_field@@Base+0x13c>
   3cb58:	b	3ca28 <flatcc_json_printer_bool_vector_field@@Base+0xa4>
   3cb5c:	ldr	r3, [r4, #20]
   3cb60:	add	r2, r3, #1
   3cb64:	str	r2, [r4, #20]
   3cb68:	mov	r2, #10
   3cb6c:	strb	r2, [r3]
   3cb70:	ldrb	r3, [r4, #25]
   3cb74:	ldr	r8, [r4, #32]
   3cb78:	ldr	r0, [r4, #20]
   3cb7c:	ldr	r5, [r4, #16]
   3cb80:	mul	r8, r8, r3
   3cb84:	add	r3, r0, r8
   3cb88:	cmp	r5, r3
   3cb8c:	bcc	3cbc4 <flatcc_json_printer_bool_vector_field@@Base+0x240>
   3cb90:	mov	r2, r8
   3cb94:	mov	r1, #32
   3cb98:	bl	145c4 <memset@plt>
   3cb9c:	ldr	r3, [r4, #20]
   3cba0:	add	r8, r3, r8
   3cba4:	str	r8, [r4, #20]
   3cba8:	b	3caec <flatcc_json_printer_bool_vector_field@@Base+0x168>
   3cbac:	ldr	r3, [r4, #44]	; 0x2c
   3cbb0:	mov	r1, r7
   3cbb4:	mov	r0, r4
   3cbb8:	blx	r3
   3cbbc:	ldr	r8, [r4, #20]
   3cbc0:	b	3caec <flatcc_json_printer_bool_vector_field@@Base+0x168>
   3cbc4:	cmp	r0, r5
   3cbc8:	bcs	3cc20 <flatcc_json_printer_bool_vector_field@@Base+0x29c>
   3cbcc:	sub	r5, r5, r0
   3cbd0:	cmp	r8, r5
   3cbd4:	bls	3cb90 <flatcc_json_printer_bool_vector_field@@Base+0x20c>
   3cbd8:	mov	sl, #32
   3cbdc:	mov	r2, r5
   3cbe0:	mov	r1, sl
   3cbe4:	bl	145c4 <memset@plt>
   3cbe8:	ldr	r3, [r4, #20]
   3cbec:	mov	r0, r4
   3cbf0:	add	r3, r3, r5
   3cbf4:	str	r3, [r4, #20]
   3cbf8:	ldr	r2, [r4, #44]	; 0x2c
   3cbfc:	mov	r1, r7
   3cc00:	blx	r2
   3cc04:	ldr	r0, [r4, #20]
   3cc08:	ldr	r3, [r4, #16]
   3cc0c:	sub	r8, r8, r5
   3cc10:	sub	r5, r3, r0
   3cc14:	cmp	r8, r5
   3cc18:	bhi	3cbdc <flatcc_json_printer_bool_vector_field@@Base+0x258>
   3cc1c:	b	3cb90 <flatcc_json_printer_bool_vector_field@@Base+0x20c>
   3cc20:	mov	r0, r4
   3cc24:	ldr	r3, [r4, #44]	; 0x2c
   3cc28:	mov	r1, r7
   3cc2c:	blx	r3
   3cc30:	ldr	r5, [r4, #16]
   3cc34:	ldr	r0, [r4, #20]
   3cc38:	b	3cbcc <flatcc_json_printer_bool_vector_field@@Base+0x248>
   3cc3c:	add	r1, r3, #1
   3cc40:	mov	r2, #10
   3cc44:	str	r1, [r4, #20]
   3cc48:	strb	r2, [r3]
   3cc4c:	ldr	r3, [r4, #32]
   3cc50:	mov	r0, r4
   3cc54:	sub	r3, r3, #1
   3cc58:	str	r3, [r4, #32]
   3cc5c:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3cc60:	ldr	r3, [r4, #20]
   3cc64:	b	3ca34 <flatcc_json_printer_bool_vector_field@@Base+0xb0>
   3cc68:	ldrb	ip, [r1, #1788]	; 0x6fc
   3cc6c:	ldr	r0, [r1, #1784]	; 0x6f8
   3cc70:	mov	r3, #4
   3cc74:	strb	ip, [r2, #4]
   3cc78:	str	r0, [r2]
   3cc7c:	b	3ca94 <flatcc_json_printer_bool_vector_field@@Base+0x110>
   3cc80:	ldr	r3, [r4, #20]
   3cc84:	mov	r2, #10
   3cc88:	add	r1, r3, #1
   3cc8c:	str	r1, [r4, #20]
   3cc90:	mov	r0, r4
   3cc94:	strb	r2, [r3]
   3cc98:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3cc9c:	ldr	r2, [r4, #20]
   3cca0:	b	3ca68 <flatcc_json_printer_bool_vector_field@@Base+0xe4>
   3cca4:	ldr	r3, [r4, #44]	; 0x2c
   3cca8:	mov	r0, r4
   3ccac:	blx	r3
   3ccb0:	ldr	r2, [r4, #20]
   3ccb4:	b	3ca68 <flatcc_json_printer_bool_vector_field@@Base+0xe4>
   3ccb8:	andeq	r6, r4, r0, lsl #9
   3ccbc:	andeq	r6, r4, r0, lsl #23

0003ccc0 <flatcc_json_printer_float_vector_field@@Base>:
   3ccc0:	add	r2, r2, #2
   3ccc4:	ldr	ip, [r1, #8]
   3ccc8:	lsl	r2, r2, #1
   3cccc:	cmp	ip, r2
   3ccd0:	bxle	lr
   3ccd4:	ldr	ip, [r1, #4]
   3ccd8:	ldrh	ip, [ip, r2]
   3ccdc:	cmp	ip, #0
   3cce0:	bxeq	lr
   3cce4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cce8:	ldr	lr, [r1]
   3ccec:	adds	r5, lr, ip
   3ccf0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ccf4:	ldr	r2, [r1, #16]
   3ccf8:	cmp	r2, #0
   3ccfc:	add	r2, r2, #1
   3cd00:	str	r2, [r1, #16]
   3cd04:	ldrne	r2, [r0, #20]
   3cd08:	movne	r1, #44	; 0x2c
   3cd0c:	addne	r4, r2, #1
   3cd10:	strne	r4, [r0, #20]
   3cd14:	strbne	r1, [r2]
   3cd18:	mov	r1, r3
   3cd1c:	ldr	r3, [lr, ip]
   3cd20:	mov	r4, r0
   3cd24:	ldr	r2, [sp, #40]	; 0x28
   3cd28:	add	r7, r5, r3
   3cd2c:	ldr	r5, [r5, r3]
   3cd30:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3cd34:	ldr	r3, [r4, #32]
   3cd38:	ldr	r2, [r4, #20]
   3cd3c:	add	r3, r3, #1
   3cd40:	add	r0, r2, #1
   3cd44:	mov	r1, #91	; 0x5b
   3cd48:	cmp	r5, #0
   3cd4c:	str	r3, [r4, #32]
   3cd50:	str	r0, [r4, #20]
   3cd54:	strb	r1, [r2]
   3cd58:	bne	3cd80 <flatcc_json_printer_float_vector_field@@Base+0xc0>
   3cd5c:	ldr	r0, [r4, #20]
   3cd60:	ldrb	r3, [r4, #25]
   3cd64:	cmp	r3, #0
   3cd68:	bne	3cefc <flatcc_json_printer_float_vector_field@@Base+0x23c>
   3cd6c:	add	r2, r0, #1
   3cd70:	mov	r3, #93	; 0x5d
   3cd74:	str	r2, [r4, #20]
   3cd78:	strb	r3, [r0]
   3cd7c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cd80:	ldrb	r1, [r4, #25]
   3cd84:	cmp	r1, #0
   3cd88:	bne	3cf28 <flatcc_json_printer_float_vector_field@@Base+0x268>
   3cd8c:	ldr	r0, [r4, #20]
   3cd90:	ldr	r3, [r4, #16]
   3cd94:	cmp	r0, r3
   3cd98:	bcs	3cf4c <flatcc_json_printer_float_vector_field@@Base+0x28c>
   3cd9c:	vldr	s0, [r7, #4]
   3cda0:	sub	r6, r5, #2
   3cda4:	add	r7, r7, #8
   3cda8:	vcvt.f64.f32	d0, s0
   3cdac:	bl	34e20 <flatcc_json_parser_struct_as_root@@Base+0x1324>
   3cdb0:	ldr	r3, [r4, #20]
   3cdb4:	cmp	r5, #1
   3cdb8:	add	r0, r3, r0
   3cdbc:	str	r0, [r4, #20]
   3cdc0:	beq	3cd60 <flatcc_json_printer_float_vector_field@@Base+0xa0>
   3cdc4:	mov	sl, #44	; 0x2c
   3cdc8:	mov	r9, #0
   3cdcc:	mov	r8, #32
   3cdd0:	b	3ce08 <flatcc_json_printer_float_vector_field@@Base+0x148>
   3cdd4:	ldr	r0, [r4, #20]
   3cdd8:	ldr	r3, [r4, #16]
   3cddc:	cmp	r0, r3
   3cde0:	bcs	3ce70 <flatcc_json_printer_float_vector_field@@Base+0x1b0>
   3cde4:	vldmia	r7!, {s0}
   3cde8:	vcvt.f64.f32	d0, s0
   3cdec:	bl	34e20 <flatcc_json_parser_struct_as_root@@Base+0x1324>
   3cdf0:	ldr	r3, [r4, #20]
   3cdf4:	cmp	r6, #0
   3cdf8:	sub	r6, r6, #1
   3cdfc:	add	r0, r3, r0
   3ce00:	str	r0, [r4, #20]
   3ce04:	beq	3cd60 <flatcc_json_printer_float_vector_field@@Base+0xa0>
   3ce08:	add	r3, r0, #1
   3ce0c:	str	r3, [r4, #20]
   3ce10:	strb	sl, [r0]
   3ce14:	ldrb	r3, [r4, #25]
   3ce18:	cmp	r3, #0
   3ce1c:	beq	3cdd4 <flatcc_json_printer_float_vector_field@@Base+0x114>
   3ce20:	ldr	r3, [r4, #20]
   3ce24:	add	r2, r3, #1
   3ce28:	str	r2, [r4, #20]
   3ce2c:	mov	r2, #10
   3ce30:	strb	r2, [r3]
   3ce34:	ldrb	r2, [r4, #25]
   3ce38:	ldr	r5, [r4, #32]
   3ce3c:	ldr	r0, [r4, #20]
   3ce40:	ldr	r3, [r4, #16]
   3ce44:	mul	r5, r5, r2
   3ce48:	add	r2, r0, r5
   3ce4c:	cmp	r3, r2
   3ce50:	bcc	3ce88 <flatcc_json_printer_float_vector_field@@Base+0x1c8>
   3ce54:	mov	r2, r5
   3ce58:	mov	r1, r8
   3ce5c:	bl	145c4 <memset@plt>
   3ce60:	ldr	r0, [r4, #20]
   3ce64:	add	r0, r0, r5
   3ce68:	str	r0, [r4, #20]
   3ce6c:	b	3cde4 <flatcc_json_printer_float_vector_field@@Base+0x124>
   3ce70:	mov	r0, r4
   3ce74:	ldr	r3, [r4, #44]	; 0x2c
   3ce78:	mov	r1, r9
   3ce7c:	blx	r3
   3ce80:	ldr	r0, [r4, #20]
   3ce84:	b	3cde4 <flatcc_json_printer_float_vector_field@@Base+0x124>
   3ce88:	cmp	r0, r3
   3ce8c:	bcs	3cee0 <flatcc_json_printer_float_vector_field@@Base+0x220>
   3ce90:	sub	fp, r3, r0
   3ce94:	cmp	r5, fp
   3ce98:	bls	3ce54 <flatcc_json_printer_float_vector_field@@Base+0x194>
   3ce9c:	mov	r2, fp
   3cea0:	mov	r1, r8
   3cea4:	bl	145c4 <memset@plt>
   3cea8:	ldr	r1, [r4, #20]
   3ceac:	ldr	r2, [r4, #44]	; 0x2c
   3ceb0:	add	r1, r1, fp
   3ceb4:	str	r1, [r4, #20]
   3ceb8:	mov	r0, r4
   3cebc:	mov	r1, r9
   3cec0:	blx	r2
   3cec4:	ldr	r0, [r4, #20]
   3cec8:	ldr	r2, [r4, #16]
   3cecc:	sub	r5, r5, fp
   3ced0:	sub	fp, r2, r0
   3ced4:	cmp	r5, fp
   3ced8:	bhi	3ce9c <flatcc_json_printer_float_vector_field@@Base+0x1dc>
   3cedc:	b	3ce54 <flatcc_json_printer_float_vector_field@@Base+0x194>
   3cee0:	ldr	r3, [r4, #44]	; 0x2c
   3cee4:	mov	r0, r4
   3cee8:	mov	r1, r9
   3ceec:	blx	r3
   3cef0:	ldr	r3, [r4, #16]
   3cef4:	ldr	r0, [r4, #20]
   3cef8:	b	3ce90 <flatcc_json_printer_float_vector_field@@Base+0x1d0>
   3cefc:	add	r2, r0, #1
   3cf00:	mov	r3, #10
   3cf04:	str	r2, [r4, #20]
   3cf08:	strb	r3, [r0]
   3cf0c:	ldr	r3, [r4, #32]
   3cf10:	mov	r0, r4
   3cf14:	sub	r3, r3, #1
   3cf18:	str	r3, [r4, #32]
   3cf1c:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3cf20:	ldr	r0, [r4, #20]
   3cf24:	b	3cd6c <flatcc_json_printer_float_vector_field@@Base+0xac>
   3cf28:	ldr	r3, [r4, #20]
   3cf2c:	mov	r2, #10
   3cf30:	add	r1, r3, #1
   3cf34:	str	r1, [r4, #20]
   3cf38:	mov	r0, r4
   3cf3c:	strb	r2, [r3]
   3cf40:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3cf44:	ldr	r0, [r4, #20]
   3cf48:	b	3cd9c <flatcc_json_printer_float_vector_field@@Base+0xdc>
   3cf4c:	mov	r0, r4
   3cf50:	ldr	r3, [r4, #44]	; 0x2c
   3cf54:	blx	r3
   3cf58:	ldr	r0, [r4, #20]
   3cf5c:	b	3cd9c <flatcc_json_printer_float_vector_field@@Base+0xdc>

0003cf60 <flatcc_json_printer_double_vector_field@@Base>:
   3cf60:	add	r2, r2, #2
   3cf64:	ldr	ip, [r1, #8]
   3cf68:	lsl	r2, r2, #1
   3cf6c:	cmp	ip, r2
   3cf70:	bxle	lr
   3cf74:	ldr	ip, [r1, #4]
   3cf78:	ldrh	ip, [ip, r2]
   3cf7c:	cmp	ip, #0
   3cf80:	bxeq	lr
   3cf84:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cf88:	ldr	lr, [r1]
   3cf8c:	adds	r5, lr, ip
   3cf90:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cf94:	ldr	r2, [r1, #16]
   3cf98:	cmp	r2, #0
   3cf9c:	add	r2, r2, #1
   3cfa0:	str	r2, [r1, #16]
   3cfa4:	ldrne	r2, [r0, #20]
   3cfa8:	movne	r1, #44	; 0x2c
   3cfac:	addne	r4, r2, #1
   3cfb0:	strne	r4, [r0, #20]
   3cfb4:	strbne	r1, [r2]
   3cfb8:	mov	r1, r3
   3cfbc:	ldr	r3, [lr, ip]
   3cfc0:	mov	r4, r0
   3cfc4:	ldr	r2, [sp, #40]	; 0x28
   3cfc8:	ldr	r6, [r5, r3]
   3cfcc:	add	r7, r5, r3
   3cfd0:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3cfd4:	ldr	r3, [r4, #32]
   3cfd8:	ldr	r2, [r4, #20]
   3cfdc:	add	r3, r3, #1
   3cfe0:	add	r0, r2, #1
   3cfe4:	mov	r1, #91	; 0x5b
   3cfe8:	cmp	r6, #0
   3cfec:	str	r3, [r4, #32]
   3cff0:	str	r0, [r4, #20]
   3cff4:	strb	r1, [r2]
   3cff8:	bne	3d020 <flatcc_json_printer_double_vector_field@@Base+0xc0>
   3cffc:	ldr	r0, [r4, #20]
   3d000:	ldrb	r3, [r4, #25]
   3d004:	cmp	r3, #0
   3d008:	bne	3d194 <flatcc_json_printer_double_vector_field@@Base+0x234>
   3d00c:	add	r2, r0, #1
   3d010:	mov	r3, #93	; 0x5d
   3d014:	str	r2, [r4, #20]
   3d018:	strb	r3, [r0]
   3d01c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d020:	ldrb	r1, [r4, #25]
   3d024:	cmp	r1, #0
   3d028:	bne	3d1c0 <flatcc_json_printer_double_vector_field@@Base+0x260>
   3d02c:	ldr	r0, [r4, #20]
   3d030:	ldr	r3, [r4, #16]
   3d034:	cmp	r0, r3
   3d038:	bcs	3d1e4 <flatcc_json_printer_double_vector_field@@Base+0x284>
   3d03c:	vldr	d0, [r7, #4]
   3d040:	bl	34e20 <flatcc_json_parser_struct_as_root@@Base+0x1324>
   3d044:	ldr	r3, [r4, #20]
   3d048:	cmp	r6, #1
   3d04c:	add	r7, r7, #12
   3d050:	sub	r6, r6, #2
   3d054:	add	r0, r3, r0
   3d058:	str	r0, [r4, #20]
   3d05c:	beq	3d000 <flatcc_json_printer_double_vector_field@@Base+0xa0>
   3d060:	mov	sl, #44	; 0x2c
   3d064:	mov	r9, #0
   3d068:	mov	r8, #32
   3d06c:	b	3d0a0 <flatcc_json_printer_double_vector_field@@Base+0x140>
   3d070:	ldr	r0, [r4, #20]
   3d074:	ldr	r3, [r4, #16]
   3d078:	cmp	r0, r3
   3d07c:	bcs	3d108 <flatcc_json_printer_double_vector_field@@Base+0x1a8>
   3d080:	vldmia	r7!, {d0}
   3d084:	bl	34e20 <flatcc_json_parser_struct_as_root@@Base+0x1324>
   3d088:	ldr	r3, [r4, #20]
   3d08c:	cmp	r6, #0
   3d090:	sub	r6, r6, #1
   3d094:	add	r0, r3, r0
   3d098:	str	r0, [r4, #20]
   3d09c:	beq	3d000 <flatcc_json_printer_double_vector_field@@Base+0xa0>
   3d0a0:	add	r3, r0, #1
   3d0a4:	str	r3, [r4, #20]
   3d0a8:	strb	sl, [r0]
   3d0ac:	ldrb	r3, [r4, #25]
   3d0b0:	cmp	r3, #0
   3d0b4:	beq	3d070 <flatcc_json_printer_double_vector_field@@Base+0x110>
   3d0b8:	ldr	r3, [r4, #20]
   3d0bc:	add	r2, r3, #1
   3d0c0:	str	r2, [r4, #20]
   3d0c4:	mov	r2, #10
   3d0c8:	strb	r2, [r3]
   3d0cc:	ldrb	r2, [r4, #25]
   3d0d0:	ldr	r5, [r4, #32]
   3d0d4:	ldr	r0, [r4, #20]
   3d0d8:	ldr	r3, [r4, #16]
   3d0dc:	mul	r5, r5, r2
   3d0e0:	add	r2, r0, r5
   3d0e4:	cmp	r3, r2
   3d0e8:	bcc	3d120 <flatcc_json_printer_double_vector_field@@Base+0x1c0>
   3d0ec:	mov	r2, r5
   3d0f0:	mov	r1, r8
   3d0f4:	bl	145c4 <memset@plt>
   3d0f8:	ldr	r0, [r4, #20]
   3d0fc:	add	r0, r0, r5
   3d100:	str	r0, [r4, #20]
   3d104:	b	3d080 <flatcc_json_printer_double_vector_field@@Base+0x120>
   3d108:	mov	r0, r4
   3d10c:	ldr	r3, [r4, #44]	; 0x2c
   3d110:	mov	r1, r9
   3d114:	blx	r3
   3d118:	ldr	r0, [r4, #20]
   3d11c:	b	3d080 <flatcc_json_printer_double_vector_field@@Base+0x120>
   3d120:	cmp	r0, r3
   3d124:	bcs	3d178 <flatcc_json_printer_double_vector_field@@Base+0x218>
   3d128:	sub	fp, r3, r0
   3d12c:	cmp	r5, fp
   3d130:	bls	3d0ec <flatcc_json_printer_double_vector_field@@Base+0x18c>
   3d134:	mov	r2, fp
   3d138:	mov	r1, r8
   3d13c:	bl	145c4 <memset@plt>
   3d140:	ldr	r1, [r4, #20]
   3d144:	ldr	r2, [r4, #44]	; 0x2c
   3d148:	add	r1, r1, fp
   3d14c:	str	r1, [r4, #20]
   3d150:	mov	r0, r4
   3d154:	mov	r1, r9
   3d158:	blx	r2
   3d15c:	ldr	r0, [r4, #20]
   3d160:	ldr	r2, [r4, #16]
   3d164:	sub	r5, r5, fp
   3d168:	sub	fp, r2, r0
   3d16c:	cmp	r5, fp
   3d170:	bhi	3d134 <flatcc_json_printer_double_vector_field@@Base+0x1d4>
   3d174:	b	3d0ec <flatcc_json_printer_double_vector_field@@Base+0x18c>
   3d178:	ldr	r3, [r4, #44]	; 0x2c
   3d17c:	mov	r0, r4
   3d180:	mov	r1, r9
   3d184:	blx	r3
   3d188:	ldr	r3, [r4, #16]
   3d18c:	ldr	r0, [r4, #20]
   3d190:	b	3d128 <flatcc_json_printer_double_vector_field@@Base+0x1c8>
   3d194:	add	r2, r0, #1
   3d198:	mov	r3, #10
   3d19c:	str	r2, [r4, #20]
   3d1a0:	strb	r3, [r0]
   3d1a4:	ldr	r3, [r4, #32]
   3d1a8:	mov	r0, r4
   3d1ac:	sub	r3, r3, #1
   3d1b0:	str	r3, [r4, #32]
   3d1b4:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3d1b8:	ldr	r0, [r4, #20]
   3d1bc:	b	3d00c <flatcc_json_printer_double_vector_field@@Base+0xac>
   3d1c0:	ldr	r3, [r4, #20]
   3d1c4:	mov	r2, #10
   3d1c8:	add	r1, r3, #1
   3d1cc:	str	r1, [r4, #20]
   3d1d0:	mov	r0, r4
   3d1d4:	strb	r2, [r3]
   3d1d8:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3d1dc:	ldr	r0, [r4, #20]
   3d1e0:	b	3d03c <flatcc_json_printer_double_vector_field@@Base+0xdc>
   3d1e4:	mov	r0, r4
   3d1e8:	ldr	r3, [r4, #44]	; 0x2c
   3d1ec:	blx	r3
   3d1f0:	ldr	r0, [r4, #20]
   3d1f4:	b	3d03c <flatcc_json_printer_double_vector_field@@Base+0xdc>

0003d1f8 <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   3d1f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d1fc:	sub	sp, sp, #12
   3d200:	ldrb	r5, [r0, #27]
   3d204:	ldr	fp, [sp, #52]	; 0x34
   3d208:	cmp	r5, #0
   3d20c:	ldr	r5, [sp, #48]	; 0x30
   3d210:	bne	3d3a4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1ac>
   3d214:	mov	r6, r3
   3d218:	add	r3, r2, #2
   3d21c:	ldr	r2, [r1, #8]
   3d220:	lsl	r3, r3, #1
   3d224:	cmp	r2, r3
   3d228:	mov	lr, r1
   3d22c:	bgt	3d238 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x40>
   3d230:	add	sp, sp, #12
   3d234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d238:	ldr	r2, [r1, #4]
   3d23c:	ldrh	r2, [r2, r3]
   3d240:	cmp	r2, #0
   3d244:	beq	3d230 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x38>
   3d248:	mov	r4, r0
   3d24c:	ldr	r0, [r1]
   3d250:	adds	ip, r0, r2
   3d254:	beq	3d230 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x38>
   3d258:	ldr	r3, [r1, #16]
   3d25c:	cmp	r3, #0
   3d260:	add	r3, r3, #1
   3d264:	str	r3, [r1, #16]
   3d268:	ldrne	r3, [r4, #20]
   3d26c:	movne	r1, #44	; 0x2c
   3d270:	addne	lr, r3, #1
   3d274:	strne	lr, [r4, #20]
   3d278:	strbne	r1, [r3]
   3d27c:	ldr	r3, [r0, r2]
   3d280:	mov	r1, r6
   3d284:	mov	r2, r5
   3d288:	mov	r0, r4
   3d28c:	ldr	r9, [ip, r3]
   3d290:	add	sl, ip, r3
   3d294:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3d298:	ldr	r3, [r4, #32]
   3d29c:	ldr	r2, [r4, #20]
   3d2a0:	add	r3, r3, #1
   3d2a4:	add	r0, r2, #1
   3d2a8:	mov	r1, #91	; 0x5b
   3d2ac:	cmp	r9, #0
   3d2b0:	str	r3, [r4, #32]
   3d2b4:	str	r0, [r4, #20]
   3d2b8:	strb	r1, [r2]
   3d2bc:	beq	3d41c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   3d2c0:	ldrb	r1, [r4, #25]
   3d2c4:	cmp	r1, #0
   3d2c8:	bne	3d48c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x294>
   3d2cc:	ldr	r2, [r4, #20]
   3d2d0:	ldr	r3, [r4, #16]
   3d2d4:	cmp	r2, r3
   3d2d8:	bcs	3d4ac <flatcc_json_printer_uint8_enum_vector_field@@Base+0x2b4>
   3d2dc:	ldrb	r1, [sl, #4]
   3d2e0:	mov	r0, r4
   3d2e4:	blx	fp
   3d2e8:	cmp	r9, #1
   3d2ec:	add	r6, sl, #5
   3d2f0:	beq	3d41c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   3d2f4:	add	r3, r9, #4
   3d2f8:	str	r3, [sp, #4]
   3d2fc:	mov	r8, #0
   3d300:	mov	r7, #32
   3d304:	b	3d334 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x13c>
   3d308:	ldr	r2, [r4, #20]
   3d30c:	ldr	r3, [r4, #16]
   3d310:	cmp	r2, r3
   3d314:	bcs	3d3b0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1b8>
   3d318:	ldrb	r1, [r6], #1
   3d31c:	mov	r0, r4
   3d320:	blx	fp
   3d324:	ldr	r3, [sp, #4]
   3d328:	sub	r3, r3, r6
   3d32c:	cmn	sl, r3
   3d330:	beq	3d41c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x224>
   3d334:	ldr	r3, [r4, #20]
   3d338:	add	r2, r3, #1
   3d33c:	str	r2, [r4, #20]
   3d340:	mov	r2, #44	; 0x2c
   3d344:	strb	r2, [r3]
   3d348:	ldrb	r3, [r4, #25]
   3d34c:	cmp	r3, #0
   3d350:	beq	3d308 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x110>
   3d354:	ldr	r3, [r4, #20]
   3d358:	add	r2, r3, #1
   3d35c:	str	r2, [r4, #20]
   3d360:	mov	r2, #10
   3d364:	strb	r2, [r3]
   3d368:	ldrb	r3, [r4, #25]
   3d36c:	ldr	r2, [r4, #32]
   3d370:	ldr	r0, [r4, #20]
   3d374:	ldr	r5, [r4, #16]
   3d378:	mul	r9, r2, r3
   3d37c:	add	r2, r0, r9
   3d380:	cmp	r5, r2
   3d384:	bcc	3d3c4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1cc>
   3d388:	mov	r2, r9
   3d38c:	mov	r1, r7
   3d390:	bl	145c4 <memset@plt>
   3d394:	ldr	r2, [r4, #20]
   3d398:	add	r3, r2, r9
   3d39c:	str	r3, [r4, #20]
   3d3a0:	b	3d318 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x120>
   3d3a4:	add	sp, sp, #12
   3d3a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d3ac:	b	3afd8 <flatcc_json_printer_uint8_vector_field@@Base>
   3d3b0:	ldr	r3, [r4, #44]	; 0x2c
   3d3b4:	mov	r1, r8
   3d3b8:	mov	r0, r4
   3d3bc:	blx	r3
   3d3c0:	b	3d318 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x120>
   3d3c4:	cmp	r0, r5
   3d3c8:	bcs	3d444 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x24c>
   3d3cc:	sub	r5, r5, r0
   3d3d0:	cmp	r9, r5
   3d3d4:	bls	3d388 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x190>
   3d3d8:	mov	r2, r5
   3d3dc:	mov	r1, r7
   3d3e0:	bl	145c4 <memset@plt>
   3d3e4:	ldr	r3, [r4, #20]
   3d3e8:	mov	r0, r4
   3d3ec:	add	r3, r3, r5
   3d3f0:	str	r3, [r4, #20]
   3d3f4:	ldr	r2, [r4, #44]	; 0x2c
   3d3f8:	mov	r1, r8
   3d3fc:	blx	r2
   3d400:	ldr	r0, [r4, #20]
   3d404:	ldr	r3, [r4, #16]
   3d408:	sub	r9, r9, r5
   3d40c:	sub	r5, r3, r0
   3d410:	cmp	r9, r5
   3d414:	bhi	3d3d8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1e0>
   3d418:	b	3d388 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x190>
   3d41c:	ldrb	r3, [r4, #25]
   3d420:	cmp	r3, #0
   3d424:	bne	3d460 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x268>
   3d428:	ldr	r3, [r4, #20]
   3d42c:	mov	r2, #93	; 0x5d
   3d430:	add	r1, r3, #1
   3d434:	str	r1, [r4, #20]
   3d438:	strb	r2, [r3]
   3d43c:	add	sp, sp, #12
   3d440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d444:	mov	r0, r4
   3d448:	ldr	r2, [r4, #44]	; 0x2c
   3d44c:	mov	r1, r8
   3d450:	blx	r2
   3d454:	ldr	r5, [r4, #16]
   3d458:	ldr	r0, [r4, #20]
   3d45c:	b	3d3cc <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1d4>
   3d460:	ldr	r3, [r4, #20]
   3d464:	mov	r2, #10
   3d468:	add	r1, r3, #1
   3d46c:	str	r1, [r4, #20]
   3d470:	strb	r2, [r3]
   3d474:	ldr	r3, [r4, #32]
   3d478:	mov	r0, r4
   3d47c:	sub	r3, r3, #1
   3d480:	str	r3, [r4, #32]
   3d484:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3d488:	b	3d428 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x230>
   3d48c:	ldr	r3, [r4, #20]
   3d490:	mov	r2, #10
   3d494:	add	r1, r3, #1
   3d498:	str	r1, [r4, #20]
   3d49c:	mov	r0, r4
   3d4a0:	strb	r2, [r3]
   3d4a4:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3d4a8:	b	3d2dc <flatcc_json_printer_uint8_enum_vector_field@@Base+0xe4>
   3d4ac:	ldr	r3, [r4, #44]	; 0x2c
   3d4b0:	mov	r0, r4
   3d4b4:	blx	r3
   3d4b8:	b	3d2dc <flatcc_json_printer_uint8_enum_vector_field@@Base+0xe4>

0003d4bc <flatcc_json_printer_utype_enum_vector_field@@Base>:
   3d4bc:	b	3d1f8 <flatcc_json_printer_uint8_enum_vector_field@@Base>

0003d4c0 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   3d4c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d4c4:	sub	sp, sp, #4
   3d4c8:	ldrb	r5, [r0, #27]
   3d4cc:	ldr	sl, [sp, #44]	; 0x2c
   3d4d0:	cmp	r5, #0
   3d4d4:	ldr	r5, [sp, #40]	; 0x28
   3d4d8:	bne	3d664 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1a4>
   3d4dc:	mov	r6, r3
   3d4e0:	add	r3, r2, #2
   3d4e4:	ldr	r2, [r1, #8]
   3d4e8:	lsl	r3, r3, #1
   3d4ec:	cmp	r2, r3
   3d4f0:	mov	lr, r1
   3d4f4:	bgt	3d500 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x40>
   3d4f8:	add	sp, sp, #4
   3d4fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d500:	ldr	r2, [r1, #4]
   3d504:	ldrh	r2, [r2, r3]
   3d508:	cmp	r2, #0
   3d50c:	beq	3d4f8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x38>
   3d510:	mov	r4, r0
   3d514:	ldr	r0, [r1]
   3d518:	adds	ip, r0, r2
   3d51c:	beq	3d4f8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x38>
   3d520:	ldr	r3, [r1, #16]
   3d524:	cmp	r3, #0
   3d528:	add	r3, r3, #1
   3d52c:	str	r3, [r1, #16]
   3d530:	ldrne	r3, [r4, #20]
   3d534:	movne	r1, #44	; 0x2c
   3d538:	addne	lr, r3, #1
   3d53c:	strne	lr, [r4, #20]
   3d540:	strbne	r1, [r3]
   3d544:	ldr	r3, [r0, r2]
   3d548:	mov	r1, r6
   3d54c:	mov	r2, r5
   3d550:	mov	r0, r4
   3d554:	ldr	r6, [ip, r3]
   3d558:	add	r7, ip, r3
   3d55c:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3d560:	ldr	r3, [r4, #32]
   3d564:	ldr	r2, [r4, #20]
   3d568:	add	r3, r3, #1
   3d56c:	add	r0, r2, #1
   3d570:	mov	r1, #91	; 0x5b
   3d574:	cmp	r6, #0
   3d578:	str	r3, [r4, #32]
   3d57c:	str	r0, [r4, #20]
   3d580:	strb	r1, [r2]
   3d584:	beq	3d6dc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x21c>
   3d588:	ldrb	r1, [r4, #25]
   3d58c:	cmp	r1, #0
   3d590:	bne	3d74c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x28c>
   3d594:	ldr	r2, [r4, #20]
   3d598:	ldr	r3, [r4, #16]
   3d59c:	cmp	r2, r3
   3d5a0:	bcs	3d76c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x2ac>
   3d5a4:	ldrh	r1, [r7, #4]
   3d5a8:	mov	r0, r4
   3d5ac:	blx	sl
   3d5b0:	cmp	r6, #1
   3d5b4:	add	r7, r7, #6
   3d5b8:	sub	r6, r6, #2
   3d5bc:	beq	3d6dc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x21c>
   3d5c0:	mov	r9, #0
   3d5c4:	mov	r8, #32
   3d5c8:	b	3d5f4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x134>
   3d5cc:	ldr	r2, [r4, #20]
   3d5d0:	ldr	r3, [r4, #16]
   3d5d4:	cmp	r2, r3
   3d5d8:	bcs	3d670 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1b0>
   3d5dc:	ldrh	r1, [r7], #2
   3d5e0:	mov	r0, r4
   3d5e4:	blx	sl
   3d5e8:	cmp	r6, #0
   3d5ec:	sub	r6, r6, #1
   3d5f0:	beq	3d6dc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x21c>
   3d5f4:	ldr	r3, [r4, #20]
   3d5f8:	add	r2, r3, #1
   3d5fc:	str	r2, [r4, #20]
   3d600:	mov	r2, #44	; 0x2c
   3d604:	strb	r2, [r3]
   3d608:	ldrb	r3, [r4, #25]
   3d60c:	cmp	r3, #0
   3d610:	beq	3d5cc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x10c>
   3d614:	ldr	r3, [r4, #20]
   3d618:	add	r2, r3, #1
   3d61c:	str	r2, [r4, #20]
   3d620:	mov	r2, #10
   3d624:	strb	r2, [r3]
   3d628:	ldrb	r3, [r4, #25]
   3d62c:	ldr	fp, [r4, #32]
   3d630:	ldr	r0, [r4, #20]
   3d634:	ldr	r5, [r4, #16]
   3d638:	mul	fp, fp, r3
   3d63c:	add	r3, r0, fp
   3d640:	cmp	r5, r3
   3d644:	bcc	3d684 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1c4>
   3d648:	mov	r2, fp
   3d64c:	mov	r1, r8
   3d650:	bl	145c4 <memset@plt>
   3d654:	ldr	r3, [r4, #20]
   3d658:	add	fp, r3, fp
   3d65c:	str	fp, [r4, #20]
   3d660:	b	3d5dc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x11c>
   3d664:	add	sp, sp, #4
   3d668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d66c:	b	3b314 <flatcc_json_printer_uint16_vector_field@@Base>
   3d670:	ldr	r3, [r4, #44]	; 0x2c
   3d674:	mov	r1, r9
   3d678:	mov	r0, r4
   3d67c:	blx	r3
   3d680:	b	3d5dc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x11c>
   3d684:	cmp	r0, r5
   3d688:	bcs	3d704 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x244>
   3d68c:	sub	r5, r5, r0
   3d690:	cmp	fp, r5
   3d694:	bls	3d648 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x188>
   3d698:	mov	r2, r5
   3d69c:	mov	r1, r8
   3d6a0:	bl	145c4 <memset@plt>
   3d6a4:	ldr	r3, [r4, #20]
   3d6a8:	mov	r0, r4
   3d6ac:	add	r3, r3, r5
   3d6b0:	str	r3, [r4, #20]
   3d6b4:	ldr	r2, [r4, #44]	; 0x2c
   3d6b8:	mov	r1, r9
   3d6bc:	blx	r2
   3d6c0:	ldr	r0, [r4, #20]
   3d6c4:	ldr	r3, [r4, #16]
   3d6c8:	sub	fp, fp, r5
   3d6cc:	sub	r5, r3, r0
   3d6d0:	cmp	fp, r5
   3d6d4:	bhi	3d698 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1d8>
   3d6d8:	b	3d648 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x188>
   3d6dc:	ldrb	r3, [r4, #25]
   3d6e0:	cmp	r3, #0
   3d6e4:	bne	3d720 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x260>
   3d6e8:	ldr	r3, [r4, #20]
   3d6ec:	mov	r2, #93	; 0x5d
   3d6f0:	add	r1, r3, #1
   3d6f4:	str	r1, [r4, #20]
   3d6f8:	strb	r2, [r3]
   3d6fc:	add	sp, sp, #4
   3d700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d704:	mov	r0, r4
   3d708:	ldr	r3, [r4, #44]	; 0x2c
   3d70c:	mov	r1, r9
   3d710:	blx	r3
   3d714:	ldr	r5, [r4, #16]
   3d718:	ldr	r0, [r4, #20]
   3d71c:	b	3d68c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1cc>
   3d720:	ldr	r3, [r4, #20]
   3d724:	mov	r2, #10
   3d728:	add	r1, r3, #1
   3d72c:	str	r1, [r4, #20]
   3d730:	strb	r2, [r3]
   3d734:	ldr	r3, [r4, #32]
   3d738:	mov	r0, r4
   3d73c:	sub	r3, r3, #1
   3d740:	str	r3, [r4, #32]
   3d744:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3d748:	b	3d6e8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x228>
   3d74c:	ldr	r3, [r4, #20]
   3d750:	mov	r2, #10
   3d754:	add	r1, r3, #1
   3d758:	str	r1, [r4, #20]
   3d75c:	mov	r0, r4
   3d760:	strb	r2, [r3]
   3d764:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3d768:	b	3d5a4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xe4>
   3d76c:	ldr	r3, [r4, #44]	; 0x2c
   3d770:	mov	r0, r4
   3d774:	blx	r3
   3d778:	b	3d5a4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xe4>

0003d77c <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   3d77c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d780:	sub	sp, sp, #4
   3d784:	ldrb	r5, [r0, #27]
   3d788:	ldr	sl, [sp, #44]	; 0x2c
   3d78c:	cmp	r5, #0
   3d790:	ldr	r5, [sp, #40]	; 0x28
   3d794:	bne	3d920 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1a4>
   3d798:	mov	r6, r3
   3d79c:	add	r3, r2, #2
   3d7a0:	ldr	r2, [r1, #8]
   3d7a4:	lsl	r3, r3, #1
   3d7a8:	cmp	r2, r3
   3d7ac:	mov	lr, r1
   3d7b0:	bgt	3d7bc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x40>
   3d7b4:	add	sp, sp, #4
   3d7b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d7bc:	ldr	r2, [r1, #4]
   3d7c0:	ldrh	r2, [r2, r3]
   3d7c4:	cmp	r2, #0
   3d7c8:	beq	3d7b4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x38>
   3d7cc:	mov	r4, r0
   3d7d0:	ldr	r0, [r1]
   3d7d4:	adds	ip, r0, r2
   3d7d8:	beq	3d7b4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x38>
   3d7dc:	ldr	r3, [r1, #16]
   3d7e0:	cmp	r3, #0
   3d7e4:	add	r3, r3, #1
   3d7e8:	str	r3, [r1, #16]
   3d7ec:	ldrne	r3, [r4, #20]
   3d7f0:	movne	r1, #44	; 0x2c
   3d7f4:	addne	lr, r3, #1
   3d7f8:	strne	lr, [r4, #20]
   3d7fc:	strbne	r1, [r3]
   3d800:	ldr	r3, [r0, r2]
   3d804:	mov	r1, r6
   3d808:	mov	r2, r5
   3d80c:	mov	r0, r4
   3d810:	ldr	r6, [ip, r3]
   3d814:	add	r7, ip, r3
   3d818:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3d81c:	ldr	r3, [r4, #32]
   3d820:	ldr	r2, [r4, #20]
   3d824:	add	r3, r3, #1
   3d828:	add	r0, r2, #1
   3d82c:	mov	r1, #91	; 0x5b
   3d830:	cmp	r6, #0
   3d834:	str	r3, [r4, #32]
   3d838:	str	r0, [r4, #20]
   3d83c:	strb	r1, [r2]
   3d840:	beq	3d998 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x21c>
   3d844:	ldrb	r1, [r4, #25]
   3d848:	cmp	r1, #0
   3d84c:	bne	3da08 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x28c>
   3d850:	ldr	r2, [r4, #20]
   3d854:	ldr	r3, [r4, #16]
   3d858:	cmp	r2, r3
   3d85c:	bcs	3da28 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x2ac>
   3d860:	ldr	r1, [r7, #4]
   3d864:	mov	r0, r4
   3d868:	blx	sl
   3d86c:	cmp	r6, #1
   3d870:	add	r7, r7, #8
   3d874:	sub	r6, r6, #2
   3d878:	beq	3d998 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x21c>
   3d87c:	mov	r9, #0
   3d880:	mov	r8, #32
   3d884:	b	3d8b0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x134>
   3d888:	ldr	r2, [r4, #20]
   3d88c:	ldr	r3, [r4, #16]
   3d890:	cmp	r2, r3
   3d894:	bcs	3d92c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1b0>
   3d898:	ldr	r1, [r7], #4
   3d89c:	mov	r0, r4
   3d8a0:	blx	sl
   3d8a4:	cmp	r6, #0
   3d8a8:	sub	r6, r6, #1
   3d8ac:	beq	3d998 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x21c>
   3d8b0:	ldr	r3, [r4, #20]
   3d8b4:	add	r2, r3, #1
   3d8b8:	str	r2, [r4, #20]
   3d8bc:	mov	r2, #44	; 0x2c
   3d8c0:	strb	r2, [r3]
   3d8c4:	ldrb	r3, [r4, #25]
   3d8c8:	cmp	r3, #0
   3d8cc:	beq	3d888 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x10c>
   3d8d0:	ldr	r3, [r4, #20]
   3d8d4:	add	r2, r3, #1
   3d8d8:	str	r2, [r4, #20]
   3d8dc:	mov	r2, #10
   3d8e0:	strb	r2, [r3]
   3d8e4:	ldrb	r3, [r4, #25]
   3d8e8:	ldr	fp, [r4, #32]
   3d8ec:	ldr	r0, [r4, #20]
   3d8f0:	ldr	r5, [r4, #16]
   3d8f4:	mul	fp, fp, r3
   3d8f8:	add	r3, r0, fp
   3d8fc:	cmp	r5, r3
   3d900:	bcc	3d940 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1c4>
   3d904:	mov	r2, fp
   3d908:	mov	r1, r8
   3d90c:	bl	145c4 <memset@plt>
   3d910:	ldr	r3, [r4, #20]
   3d914:	add	fp, r3, fp
   3d918:	str	fp, [r4, #20]
   3d91c:	b	3d898 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x11c>
   3d920:	add	sp, sp, #4
   3d924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d928:	b	3b6ec <flatcc_json_printer_uint32_vector_field@@Base>
   3d92c:	ldr	r3, [r4, #44]	; 0x2c
   3d930:	mov	r1, r9
   3d934:	mov	r0, r4
   3d938:	blx	r3
   3d93c:	b	3d898 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x11c>
   3d940:	cmp	r0, r5
   3d944:	bcs	3d9c0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x244>
   3d948:	sub	r5, r5, r0
   3d94c:	cmp	fp, r5
   3d950:	bls	3d904 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x188>
   3d954:	mov	r2, r5
   3d958:	mov	r1, r8
   3d95c:	bl	145c4 <memset@plt>
   3d960:	ldr	r3, [r4, #20]
   3d964:	mov	r0, r4
   3d968:	add	r3, r3, r5
   3d96c:	str	r3, [r4, #20]
   3d970:	ldr	r2, [r4, #44]	; 0x2c
   3d974:	mov	r1, r9
   3d978:	blx	r2
   3d97c:	ldr	r0, [r4, #20]
   3d980:	ldr	r3, [r4, #16]
   3d984:	sub	fp, fp, r5
   3d988:	sub	r5, r3, r0
   3d98c:	cmp	fp, r5
   3d990:	bhi	3d954 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1d8>
   3d994:	b	3d904 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x188>
   3d998:	ldrb	r3, [r4, #25]
   3d99c:	cmp	r3, #0
   3d9a0:	bne	3d9dc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x260>
   3d9a4:	ldr	r3, [r4, #20]
   3d9a8:	mov	r2, #93	; 0x5d
   3d9ac:	add	r1, r3, #1
   3d9b0:	str	r1, [r4, #20]
   3d9b4:	strb	r2, [r3]
   3d9b8:	add	sp, sp, #4
   3d9bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d9c0:	mov	r0, r4
   3d9c4:	ldr	r3, [r4, #44]	; 0x2c
   3d9c8:	mov	r1, r9
   3d9cc:	blx	r3
   3d9d0:	ldr	r5, [r4, #16]
   3d9d4:	ldr	r0, [r4, #20]
   3d9d8:	b	3d948 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1cc>
   3d9dc:	ldr	r3, [r4, #20]
   3d9e0:	mov	r2, #10
   3d9e4:	add	r1, r3, #1
   3d9e8:	str	r1, [r4, #20]
   3d9ec:	strb	r2, [r3]
   3d9f0:	ldr	r3, [r4, #32]
   3d9f4:	mov	r0, r4
   3d9f8:	sub	r3, r3, #1
   3d9fc:	str	r3, [r4, #32]
   3da00:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3da04:	b	3d9a4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x228>
   3da08:	ldr	r3, [r4, #20]
   3da0c:	mov	r2, #10
   3da10:	add	r1, r3, #1
   3da14:	str	r1, [r4, #20]
   3da18:	mov	r0, r4
   3da1c:	strb	r2, [r3]
   3da20:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3da24:	b	3d860 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xe4>
   3da28:	ldr	r3, [r4, #44]	; 0x2c
   3da2c:	mov	r0, r4
   3da30:	blx	r3
   3da34:	b	3d860 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xe4>

0003da38 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   3da38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3da3c:	sub	sp, sp, #4
   3da40:	ldrb	r5, [r0, #27]
   3da44:	ldr	sl, [sp, #44]	; 0x2c
   3da48:	cmp	r5, #0
   3da4c:	ldr	r5, [sp, #40]	; 0x28
   3da50:	bne	3dbdc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1a4>
   3da54:	mov	r6, r3
   3da58:	add	r3, r2, #2
   3da5c:	ldr	r2, [r1, #8]
   3da60:	lsl	r3, r3, #1
   3da64:	cmp	r2, r3
   3da68:	mov	lr, r1
   3da6c:	bgt	3da78 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x40>
   3da70:	add	sp, sp, #4
   3da74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3da78:	ldr	r2, [r1, #4]
   3da7c:	ldrh	r2, [r2, r3]
   3da80:	cmp	r2, #0
   3da84:	beq	3da70 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x38>
   3da88:	mov	r4, r0
   3da8c:	ldr	r0, [r1]
   3da90:	adds	ip, r0, r2
   3da94:	beq	3da70 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x38>
   3da98:	ldr	r3, [r1, #16]
   3da9c:	cmp	r3, #0
   3daa0:	add	r3, r3, #1
   3daa4:	str	r3, [r1, #16]
   3daa8:	ldrne	r3, [r4, #20]
   3daac:	movne	r1, #44	; 0x2c
   3dab0:	addne	lr, r3, #1
   3dab4:	strne	lr, [r4, #20]
   3dab8:	strbne	r1, [r3]
   3dabc:	ldr	r3, [r0, r2]
   3dac0:	mov	r1, r6
   3dac4:	mov	r2, r5
   3dac8:	mov	r0, r4
   3dacc:	ldr	r6, [ip, r3]
   3dad0:	add	r7, ip, r3
   3dad4:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3dad8:	ldr	r3, [r4, #32]
   3dadc:	ldr	r2, [r4, #20]
   3dae0:	add	r3, r3, #1
   3dae4:	add	r0, r2, #1
   3dae8:	mov	r1, #91	; 0x5b
   3daec:	cmp	r6, #0
   3daf0:	str	r3, [r4, #32]
   3daf4:	str	r0, [r4, #20]
   3daf8:	strb	r1, [r2]
   3dafc:	beq	3dc54 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x21c>
   3db00:	ldrb	r1, [r4, #25]
   3db04:	cmp	r1, #0
   3db08:	bne	3dcc4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x28c>
   3db0c:	ldr	r2, [r4, #20]
   3db10:	ldr	r3, [r4, #16]
   3db14:	cmp	r2, r3
   3db18:	bcs	3dce4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x2ac>
   3db1c:	ldrd	r2, [r7, #4]
   3db20:	mov	r0, r4
   3db24:	blx	sl
   3db28:	cmp	r6, #1
   3db2c:	add	r7, r7, #12
   3db30:	sub	r6, r6, #2
   3db34:	beq	3dc54 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x21c>
   3db38:	mov	r9, #0
   3db3c:	mov	r8, #32
   3db40:	b	3db6c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x134>
   3db44:	ldr	r2, [r4, #20]
   3db48:	ldr	r3, [r4, #16]
   3db4c:	cmp	r2, r3
   3db50:	bcs	3dbe8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1b0>
   3db54:	ldrd	r2, [r7], #8
   3db58:	mov	r0, r4
   3db5c:	blx	sl
   3db60:	cmp	r6, #0
   3db64:	sub	r6, r6, #1
   3db68:	beq	3dc54 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x21c>
   3db6c:	ldr	r3, [r4, #20]
   3db70:	add	r2, r3, #1
   3db74:	str	r2, [r4, #20]
   3db78:	mov	r2, #44	; 0x2c
   3db7c:	strb	r2, [r3]
   3db80:	ldrb	r3, [r4, #25]
   3db84:	cmp	r3, #0
   3db88:	beq	3db44 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x10c>
   3db8c:	ldr	r3, [r4, #20]
   3db90:	add	r2, r3, #1
   3db94:	str	r2, [r4, #20]
   3db98:	mov	r2, #10
   3db9c:	strb	r2, [r3]
   3dba0:	ldrb	r3, [r4, #25]
   3dba4:	ldr	fp, [r4, #32]
   3dba8:	ldr	r0, [r4, #20]
   3dbac:	ldr	r5, [r4, #16]
   3dbb0:	mul	fp, fp, r3
   3dbb4:	add	r3, r0, fp
   3dbb8:	cmp	r5, r3
   3dbbc:	bcc	3dbfc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1c4>
   3dbc0:	mov	r2, fp
   3dbc4:	mov	r1, r8
   3dbc8:	bl	145c4 <memset@plt>
   3dbcc:	ldr	r3, [r4, #20]
   3dbd0:	add	fp, r3, fp
   3dbd4:	str	fp, [r4, #20]
   3dbd8:	b	3db54 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x11c>
   3dbdc:	add	sp, sp, #4
   3dbe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dbe4:	b	3b988 <flatcc_json_printer_uint64_vector_field@@Base>
   3dbe8:	ldr	r3, [r4, #44]	; 0x2c
   3dbec:	mov	r1, r9
   3dbf0:	mov	r0, r4
   3dbf4:	blx	r3
   3dbf8:	b	3db54 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x11c>
   3dbfc:	cmp	r0, r5
   3dc00:	bcs	3dc7c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x244>
   3dc04:	sub	r5, r5, r0
   3dc08:	cmp	fp, r5
   3dc0c:	bls	3dbc0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x188>
   3dc10:	mov	r2, r5
   3dc14:	mov	r1, r8
   3dc18:	bl	145c4 <memset@plt>
   3dc1c:	ldr	r3, [r4, #20]
   3dc20:	mov	r0, r4
   3dc24:	add	r3, r3, r5
   3dc28:	str	r3, [r4, #20]
   3dc2c:	ldr	r2, [r4, #44]	; 0x2c
   3dc30:	mov	r1, r9
   3dc34:	blx	r2
   3dc38:	ldr	r0, [r4, #20]
   3dc3c:	ldr	r3, [r4, #16]
   3dc40:	sub	fp, fp, r5
   3dc44:	sub	r5, r3, r0
   3dc48:	cmp	fp, r5
   3dc4c:	bhi	3dc10 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1d8>
   3dc50:	b	3dbc0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x188>
   3dc54:	ldrb	r3, [r4, #25]
   3dc58:	cmp	r3, #0
   3dc5c:	bne	3dc98 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x260>
   3dc60:	ldr	r3, [r4, #20]
   3dc64:	mov	r2, #93	; 0x5d
   3dc68:	add	r1, r3, #1
   3dc6c:	str	r1, [r4, #20]
   3dc70:	strb	r2, [r3]
   3dc74:	add	sp, sp, #4
   3dc78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dc7c:	mov	r0, r4
   3dc80:	ldr	r3, [r4, #44]	; 0x2c
   3dc84:	mov	r1, r9
   3dc88:	blx	r3
   3dc8c:	ldr	r5, [r4, #16]
   3dc90:	ldr	r0, [r4, #20]
   3dc94:	b	3dc04 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1cc>
   3dc98:	ldr	r3, [r4, #20]
   3dc9c:	mov	r2, #10
   3dca0:	add	r1, r3, #1
   3dca4:	str	r1, [r4, #20]
   3dca8:	strb	r2, [r3]
   3dcac:	ldr	r3, [r4, #32]
   3dcb0:	mov	r0, r4
   3dcb4:	sub	r3, r3, #1
   3dcb8:	str	r3, [r4, #32]
   3dcbc:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3dcc0:	b	3dc60 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x228>
   3dcc4:	ldr	r3, [r4, #20]
   3dcc8:	mov	r2, #10
   3dccc:	add	r1, r3, #1
   3dcd0:	str	r1, [r4, #20]
   3dcd4:	mov	r0, r4
   3dcd8:	strb	r2, [r3]
   3dcdc:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3dce0:	b	3db1c <flatcc_json_printer_uint64_enum_vector_field@@Base+0xe4>
   3dce4:	ldr	r3, [r4, #44]	; 0x2c
   3dce8:	mov	r0, r4
   3dcec:	blx	r3
   3dcf0:	b	3db1c <flatcc_json_printer_uint64_enum_vector_field@@Base+0xe4>

0003dcf4 <flatcc_json_printer_int8_enum_vector_field@@Base>:
   3dcf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dcf8:	sub	sp, sp, #12
   3dcfc:	ldrb	r5, [r0, #27]
   3dd00:	ldr	fp, [sp, #52]	; 0x34
   3dd04:	cmp	r5, #0
   3dd08:	ldr	r5, [sp, #48]	; 0x30
   3dd0c:	bne	3dea0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1ac>
   3dd10:	mov	r6, r3
   3dd14:	add	r3, r2, #2
   3dd18:	ldr	r2, [r1, #8]
   3dd1c:	lsl	r3, r3, #1
   3dd20:	cmp	r2, r3
   3dd24:	mov	lr, r1
   3dd28:	bgt	3dd34 <flatcc_json_printer_int8_enum_vector_field@@Base+0x40>
   3dd2c:	add	sp, sp, #12
   3dd30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dd34:	ldr	r2, [r1, #4]
   3dd38:	ldrh	r2, [r2, r3]
   3dd3c:	cmp	r2, #0
   3dd40:	beq	3dd2c <flatcc_json_printer_int8_enum_vector_field@@Base+0x38>
   3dd44:	mov	r4, r0
   3dd48:	ldr	r0, [r1]
   3dd4c:	adds	ip, r0, r2
   3dd50:	beq	3dd2c <flatcc_json_printer_int8_enum_vector_field@@Base+0x38>
   3dd54:	ldr	r3, [r1, #16]
   3dd58:	cmp	r3, #0
   3dd5c:	add	r3, r3, #1
   3dd60:	str	r3, [r1, #16]
   3dd64:	ldrne	r3, [r4, #20]
   3dd68:	movne	r1, #44	; 0x2c
   3dd6c:	addne	lr, r3, #1
   3dd70:	strne	lr, [r4, #20]
   3dd74:	strbne	r1, [r3]
   3dd78:	ldr	r3, [r0, r2]
   3dd7c:	mov	r1, r6
   3dd80:	mov	r2, r5
   3dd84:	mov	r0, r4
   3dd88:	ldr	r9, [ip, r3]
   3dd8c:	add	sl, ip, r3
   3dd90:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3dd94:	ldr	r3, [r4, #32]
   3dd98:	ldr	r2, [r4, #20]
   3dd9c:	add	r3, r3, #1
   3dda0:	add	r0, r2, #1
   3dda4:	mov	r1, #91	; 0x5b
   3dda8:	cmp	r9, #0
   3ddac:	str	r3, [r4, #32]
   3ddb0:	str	r0, [r4, #20]
   3ddb4:	strb	r1, [r2]
   3ddb8:	beq	3df18 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3ddbc:	ldrb	r1, [r4, #25]
   3ddc0:	cmp	r1, #0
   3ddc4:	bne	3df88 <flatcc_json_printer_int8_enum_vector_field@@Base+0x294>
   3ddc8:	ldr	r2, [r4, #20]
   3ddcc:	ldr	r3, [r4, #16]
   3ddd0:	cmp	r2, r3
   3ddd4:	bcs	3dfa8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x2b4>
   3ddd8:	ldrsb	r1, [sl, #4]
   3dddc:	mov	r0, r4
   3dde0:	blx	fp
   3dde4:	cmp	r9, #1
   3dde8:	add	r6, sl, #5
   3ddec:	beq	3df18 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3ddf0:	add	r3, r9, #4
   3ddf4:	str	r3, [sp, #4]
   3ddf8:	mov	r8, #0
   3ddfc:	mov	r7, #32
   3de00:	b	3de30 <flatcc_json_printer_int8_enum_vector_field@@Base+0x13c>
   3de04:	ldr	r2, [r4, #20]
   3de08:	ldr	r3, [r4, #16]
   3de0c:	cmp	r2, r3
   3de10:	bcs	3deac <flatcc_json_printer_int8_enum_vector_field@@Base+0x1b8>
   3de14:	ldrsb	r1, [r6], #1
   3de18:	mov	r0, r4
   3de1c:	blx	fp
   3de20:	ldr	r3, [sp, #4]
   3de24:	sub	r3, r3, r6
   3de28:	cmn	sl, r3
   3de2c:	beq	3df18 <flatcc_json_printer_int8_enum_vector_field@@Base+0x224>
   3de30:	ldr	r3, [r4, #20]
   3de34:	add	r2, r3, #1
   3de38:	str	r2, [r4, #20]
   3de3c:	mov	r2, #44	; 0x2c
   3de40:	strb	r2, [r3]
   3de44:	ldrb	r3, [r4, #25]
   3de48:	cmp	r3, #0
   3de4c:	beq	3de04 <flatcc_json_printer_int8_enum_vector_field@@Base+0x110>
   3de50:	ldr	r3, [r4, #20]
   3de54:	add	r2, r3, #1
   3de58:	str	r2, [r4, #20]
   3de5c:	mov	r2, #10
   3de60:	strb	r2, [r3]
   3de64:	ldrb	r3, [r4, #25]
   3de68:	ldr	r2, [r4, #32]
   3de6c:	ldr	r0, [r4, #20]
   3de70:	ldr	r5, [r4, #16]
   3de74:	mul	r9, r2, r3
   3de78:	add	r2, r0, r9
   3de7c:	cmp	r5, r2
   3de80:	bcc	3dec0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1cc>
   3de84:	mov	r2, r9
   3de88:	mov	r1, r7
   3de8c:	bl	145c4 <memset@plt>
   3de90:	ldr	r2, [r4, #20]
   3de94:	add	r3, r2, r9
   3de98:	str	r3, [r4, #20]
   3de9c:	b	3de14 <flatcc_json_printer_int8_enum_vector_field@@Base+0x120>
   3dea0:	add	sp, sp, #12
   3dea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dea8:	b	3bc20 <flatcc_json_printer_int8_vector_field@@Base>
   3deac:	ldr	r3, [r4, #44]	; 0x2c
   3deb0:	mov	r1, r8
   3deb4:	mov	r0, r4
   3deb8:	blx	r3
   3debc:	b	3de14 <flatcc_json_printer_int8_enum_vector_field@@Base+0x120>
   3dec0:	cmp	r0, r5
   3dec4:	bcs	3df40 <flatcc_json_printer_int8_enum_vector_field@@Base+0x24c>
   3dec8:	sub	r5, r5, r0
   3decc:	cmp	r9, r5
   3ded0:	bls	3de84 <flatcc_json_printer_int8_enum_vector_field@@Base+0x190>
   3ded4:	mov	r2, r5
   3ded8:	mov	r1, r7
   3dedc:	bl	145c4 <memset@plt>
   3dee0:	ldr	r3, [r4, #20]
   3dee4:	mov	r0, r4
   3dee8:	add	r3, r3, r5
   3deec:	str	r3, [r4, #20]
   3def0:	ldr	r2, [r4, #44]	; 0x2c
   3def4:	mov	r1, r8
   3def8:	blx	r2
   3defc:	ldr	r0, [r4, #20]
   3df00:	ldr	r3, [r4, #16]
   3df04:	sub	r9, r9, r5
   3df08:	sub	r5, r3, r0
   3df0c:	cmp	r9, r5
   3df10:	bhi	3ded4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1e0>
   3df14:	b	3de84 <flatcc_json_printer_int8_enum_vector_field@@Base+0x190>
   3df18:	ldrb	r3, [r4, #25]
   3df1c:	cmp	r3, #0
   3df20:	bne	3df5c <flatcc_json_printer_int8_enum_vector_field@@Base+0x268>
   3df24:	ldr	r3, [r4, #20]
   3df28:	mov	r2, #93	; 0x5d
   3df2c:	add	r1, r3, #1
   3df30:	str	r1, [r4, #20]
   3df34:	strb	r2, [r3]
   3df38:	add	sp, sp, #12
   3df3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3df40:	mov	r0, r4
   3df44:	ldr	r2, [r4, #44]	; 0x2c
   3df48:	mov	r1, r8
   3df4c:	blx	r2
   3df50:	ldr	r5, [r4, #16]
   3df54:	ldr	r0, [r4, #20]
   3df58:	b	3dec8 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1d4>
   3df5c:	ldr	r3, [r4, #20]
   3df60:	mov	r2, #10
   3df64:	add	r1, r3, #1
   3df68:	str	r1, [r4, #20]
   3df6c:	strb	r2, [r3]
   3df70:	ldr	r3, [r4, #32]
   3df74:	mov	r0, r4
   3df78:	sub	r3, r3, #1
   3df7c:	str	r3, [r4, #32]
   3df80:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3df84:	b	3df24 <flatcc_json_printer_int8_enum_vector_field@@Base+0x230>
   3df88:	ldr	r3, [r4, #20]
   3df8c:	mov	r2, #10
   3df90:	add	r1, r3, #1
   3df94:	str	r1, [r4, #20]
   3df98:	mov	r0, r4
   3df9c:	strb	r2, [r3]
   3dfa0:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3dfa4:	b	3ddd8 <flatcc_json_printer_int8_enum_vector_field@@Base+0xe4>
   3dfa8:	ldr	r3, [r4, #44]	; 0x2c
   3dfac:	mov	r0, r4
   3dfb0:	blx	r3
   3dfb4:	b	3ddd8 <flatcc_json_printer_int8_enum_vector_field@@Base+0xe4>

0003dfb8 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   3dfb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dfbc:	sub	sp, sp, #4
   3dfc0:	ldrb	r5, [r0, #27]
   3dfc4:	ldr	sl, [sp, #44]	; 0x2c
   3dfc8:	cmp	r5, #0
   3dfcc:	ldr	r5, [sp, #40]	; 0x28
   3dfd0:	bne	3e15c <flatcc_json_printer_int16_enum_vector_field@@Base+0x1a4>
   3dfd4:	mov	r6, r3
   3dfd8:	add	r3, r2, #2
   3dfdc:	ldr	r2, [r1, #8]
   3dfe0:	lsl	r3, r3, #1
   3dfe4:	cmp	r2, r3
   3dfe8:	mov	lr, r1
   3dfec:	bgt	3dff8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x40>
   3dff0:	add	sp, sp, #4
   3dff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dff8:	ldr	r2, [r1, #4]
   3dffc:	ldrh	r2, [r2, r3]
   3e000:	cmp	r2, #0
   3e004:	beq	3dff0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x38>
   3e008:	mov	r4, r0
   3e00c:	ldr	r0, [r1]
   3e010:	adds	ip, r0, r2
   3e014:	beq	3dff0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x38>
   3e018:	ldr	r3, [r1, #16]
   3e01c:	cmp	r3, #0
   3e020:	add	r3, r3, #1
   3e024:	str	r3, [r1, #16]
   3e028:	ldrne	r3, [r4, #20]
   3e02c:	movne	r1, #44	; 0x2c
   3e030:	addne	lr, r3, #1
   3e034:	strne	lr, [r4, #20]
   3e038:	strbne	r1, [r3]
   3e03c:	ldr	r3, [r0, r2]
   3e040:	mov	r1, r6
   3e044:	mov	r2, r5
   3e048:	mov	r0, r4
   3e04c:	ldr	r6, [ip, r3]
   3e050:	add	r7, ip, r3
   3e054:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3e058:	ldr	r3, [r4, #32]
   3e05c:	ldr	r2, [r4, #20]
   3e060:	add	r3, r3, #1
   3e064:	add	r0, r2, #1
   3e068:	mov	r1, #91	; 0x5b
   3e06c:	cmp	r6, #0
   3e070:	str	r3, [r4, #32]
   3e074:	str	r0, [r4, #20]
   3e078:	strb	r1, [r2]
   3e07c:	beq	3e1d4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x21c>
   3e080:	ldrb	r1, [r4, #25]
   3e084:	cmp	r1, #0
   3e088:	bne	3e244 <flatcc_json_printer_int16_enum_vector_field@@Base+0x28c>
   3e08c:	ldr	r2, [r4, #20]
   3e090:	ldr	r3, [r4, #16]
   3e094:	cmp	r2, r3
   3e098:	bcs	3e264 <flatcc_json_printer_int16_enum_vector_field@@Base+0x2ac>
   3e09c:	ldrsh	r1, [r7, #4]
   3e0a0:	mov	r0, r4
   3e0a4:	blx	sl
   3e0a8:	cmp	r6, #1
   3e0ac:	add	r7, r7, #6
   3e0b0:	sub	r6, r6, #2
   3e0b4:	beq	3e1d4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x21c>
   3e0b8:	mov	r9, #0
   3e0bc:	mov	r8, #32
   3e0c0:	b	3e0ec <flatcc_json_printer_int16_enum_vector_field@@Base+0x134>
   3e0c4:	ldr	r2, [r4, #20]
   3e0c8:	ldr	r3, [r4, #16]
   3e0cc:	cmp	r2, r3
   3e0d0:	bcs	3e168 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1b0>
   3e0d4:	ldrsh	r1, [r7], #2
   3e0d8:	mov	r0, r4
   3e0dc:	blx	sl
   3e0e0:	cmp	r6, #0
   3e0e4:	sub	r6, r6, #1
   3e0e8:	beq	3e1d4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x21c>
   3e0ec:	ldr	r3, [r4, #20]
   3e0f0:	add	r2, r3, #1
   3e0f4:	str	r2, [r4, #20]
   3e0f8:	mov	r2, #44	; 0x2c
   3e0fc:	strb	r2, [r3]
   3e100:	ldrb	r3, [r4, #25]
   3e104:	cmp	r3, #0
   3e108:	beq	3e0c4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x10c>
   3e10c:	ldr	r3, [r4, #20]
   3e110:	add	r2, r3, #1
   3e114:	str	r2, [r4, #20]
   3e118:	mov	r2, #10
   3e11c:	strb	r2, [r3]
   3e120:	ldrb	r3, [r4, #25]
   3e124:	ldr	fp, [r4, #32]
   3e128:	ldr	r0, [r4, #20]
   3e12c:	ldr	r5, [r4, #16]
   3e130:	mul	fp, fp, r3
   3e134:	add	r3, r0, fp
   3e138:	cmp	r5, r3
   3e13c:	bcc	3e17c <flatcc_json_printer_int16_enum_vector_field@@Base+0x1c4>
   3e140:	mov	r2, fp
   3e144:	mov	r1, r8
   3e148:	bl	145c4 <memset@plt>
   3e14c:	ldr	r3, [r4, #20]
   3e150:	add	fp, r3, fp
   3e154:	str	fp, [r4, #20]
   3e158:	b	3e0d4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x11c>
   3e15c:	add	sp, sp, #4
   3e160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e164:	b	3bfa0 <flatcc_json_printer_int16_vector_field@@Base>
   3e168:	ldr	r3, [r4, #44]	; 0x2c
   3e16c:	mov	r1, r9
   3e170:	mov	r0, r4
   3e174:	blx	r3
   3e178:	b	3e0d4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x11c>
   3e17c:	cmp	r0, r5
   3e180:	bcs	3e1fc <flatcc_json_printer_int16_enum_vector_field@@Base+0x244>
   3e184:	sub	r5, r5, r0
   3e188:	cmp	fp, r5
   3e18c:	bls	3e140 <flatcc_json_printer_int16_enum_vector_field@@Base+0x188>
   3e190:	mov	r2, r5
   3e194:	mov	r1, r8
   3e198:	bl	145c4 <memset@plt>
   3e19c:	ldr	r3, [r4, #20]
   3e1a0:	mov	r0, r4
   3e1a4:	add	r3, r3, r5
   3e1a8:	str	r3, [r4, #20]
   3e1ac:	ldr	r2, [r4, #44]	; 0x2c
   3e1b0:	mov	r1, r9
   3e1b4:	blx	r2
   3e1b8:	ldr	r0, [r4, #20]
   3e1bc:	ldr	r3, [r4, #16]
   3e1c0:	sub	fp, fp, r5
   3e1c4:	sub	r5, r3, r0
   3e1c8:	cmp	fp, r5
   3e1cc:	bhi	3e190 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1d8>
   3e1d0:	b	3e140 <flatcc_json_printer_int16_enum_vector_field@@Base+0x188>
   3e1d4:	ldrb	r3, [r4, #25]
   3e1d8:	cmp	r3, #0
   3e1dc:	bne	3e218 <flatcc_json_printer_int16_enum_vector_field@@Base+0x260>
   3e1e0:	ldr	r3, [r4, #20]
   3e1e4:	mov	r2, #93	; 0x5d
   3e1e8:	add	r1, r3, #1
   3e1ec:	str	r1, [r4, #20]
   3e1f0:	strb	r2, [r3]
   3e1f4:	add	sp, sp, #4
   3e1f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e1fc:	mov	r0, r4
   3e200:	ldr	r3, [r4, #44]	; 0x2c
   3e204:	mov	r1, r9
   3e208:	blx	r3
   3e20c:	ldr	r5, [r4, #16]
   3e210:	ldr	r0, [r4, #20]
   3e214:	b	3e184 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1cc>
   3e218:	ldr	r3, [r4, #20]
   3e21c:	mov	r2, #10
   3e220:	add	r1, r3, #1
   3e224:	str	r1, [r4, #20]
   3e228:	strb	r2, [r3]
   3e22c:	ldr	r3, [r4, #32]
   3e230:	mov	r0, r4
   3e234:	sub	r3, r3, #1
   3e238:	str	r3, [r4, #32]
   3e23c:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3e240:	b	3e1e0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x228>
   3e244:	ldr	r3, [r4, #20]
   3e248:	mov	r2, #10
   3e24c:	add	r1, r3, #1
   3e250:	str	r1, [r4, #20]
   3e254:	mov	r0, r4
   3e258:	strb	r2, [r3]
   3e25c:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3e260:	b	3e09c <flatcc_json_printer_int16_enum_vector_field@@Base+0xe4>
   3e264:	ldr	r3, [r4, #44]	; 0x2c
   3e268:	mov	r0, r4
   3e26c:	blx	r3
   3e270:	b	3e09c <flatcc_json_printer_int16_enum_vector_field@@Base+0xe4>

0003e274 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   3e274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e278:	sub	sp, sp, #4
   3e27c:	ldrb	r5, [r0, #27]
   3e280:	ldr	sl, [sp, #44]	; 0x2c
   3e284:	cmp	r5, #0
   3e288:	ldr	r5, [sp, #40]	; 0x28
   3e28c:	bne	3e418 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1a4>
   3e290:	mov	r6, r3
   3e294:	add	r3, r2, #2
   3e298:	ldr	r2, [r1, #8]
   3e29c:	lsl	r3, r3, #1
   3e2a0:	cmp	r2, r3
   3e2a4:	mov	lr, r1
   3e2a8:	bgt	3e2b4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x40>
   3e2ac:	add	sp, sp, #4
   3e2b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e2b4:	ldr	r2, [r1, #4]
   3e2b8:	ldrh	r2, [r2, r3]
   3e2bc:	cmp	r2, #0
   3e2c0:	beq	3e2ac <flatcc_json_printer_int32_enum_vector_field@@Base+0x38>
   3e2c4:	mov	r4, r0
   3e2c8:	ldr	r0, [r1]
   3e2cc:	adds	ip, r0, r2
   3e2d0:	beq	3e2ac <flatcc_json_printer_int32_enum_vector_field@@Base+0x38>
   3e2d4:	ldr	r3, [r1, #16]
   3e2d8:	cmp	r3, #0
   3e2dc:	add	r3, r3, #1
   3e2e0:	str	r3, [r1, #16]
   3e2e4:	ldrne	r3, [r4, #20]
   3e2e8:	movne	r1, #44	; 0x2c
   3e2ec:	addne	lr, r3, #1
   3e2f0:	strne	lr, [r4, #20]
   3e2f4:	strbne	r1, [r3]
   3e2f8:	ldr	r3, [r0, r2]
   3e2fc:	mov	r1, r6
   3e300:	mov	r2, r5
   3e304:	mov	r0, r4
   3e308:	ldr	r6, [ip, r3]
   3e30c:	add	r7, ip, r3
   3e310:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3e314:	ldr	r3, [r4, #32]
   3e318:	ldr	r2, [r4, #20]
   3e31c:	add	r3, r3, #1
   3e320:	add	r0, r2, #1
   3e324:	mov	r1, #91	; 0x5b
   3e328:	cmp	r6, #0
   3e32c:	str	r3, [r4, #32]
   3e330:	str	r0, [r4, #20]
   3e334:	strb	r1, [r2]
   3e338:	beq	3e490 <flatcc_json_printer_int32_enum_vector_field@@Base+0x21c>
   3e33c:	ldrb	r1, [r4, #25]
   3e340:	cmp	r1, #0
   3e344:	bne	3e500 <flatcc_json_printer_int32_enum_vector_field@@Base+0x28c>
   3e348:	ldr	r2, [r4, #20]
   3e34c:	ldr	r3, [r4, #16]
   3e350:	cmp	r2, r3
   3e354:	bcs	3e520 <flatcc_json_printer_int32_enum_vector_field@@Base+0x2ac>
   3e358:	ldr	r1, [r7, #4]
   3e35c:	mov	r0, r4
   3e360:	blx	sl
   3e364:	cmp	r6, #1
   3e368:	add	r7, r7, #8
   3e36c:	sub	r6, r6, #2
   3e370:	beq	3e490 <flatcc_json_printer_int32_enum_vector_field@@Base+0x21c>
   3e374:	mov	r9, #0
   3e378:	mov	r8, #32
   3e37c:	b	3e3a8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x134>
   3e380:	ldr	r2, [r4, #20]
   3e384:	ldr	r3, [r4, #16]
   3e388:	cmp	r2, r3
   3e38c:	bcs	3e424 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1b0>
   3e390:	ldr	r1, [r7], #4
   3e394:	mov	r0, r4
   3e398:	blx	sl
   3e39c:	cmp	r6, #0
   3e3a0:	sub	r6, r6, #1
   3e3a4:	beq	3e490 <flatcc_json_printer_int32_enum_vector_field@@Base+0x21c>
   3e3a8:	ldr	r3, [r4, #20]
   3e3ac:	add	r2, r3, #1
   3e3b0:	str	r2, [r4, #20]
   3e3b4:	mov	r2, #44	; 0x2c
   3e3b8:	strb	r2, [r3]
   3e3bc:	ldrb	r3, [r4, #25]
   3e3c0:	cmp	r3, #0
   3e3c4:	beq	3e380 <flatcc_json_printer_int32_enum_vector_field@@Base+0x10c>
   3e3c8:	ldr	r3, [r4, #20]
   3e3cc:	add	r2, r3, #1
   3e3d0:	str	r2, [r4, #20]
   3e3d4:	mov	r2, #10
   3e3d8:	strb	r2, [r3]
   3e3dc:	ldrb	r3, [r4, #25]
   3e3e0:	ldr	fp, [r4, #32]
   3e3e4:	ldr	r0, [r4, #20]
   3e3e8:	ldr	r5, [r4, #16]
   3e3ec:	mul	fp, fp, r3
   3e3f0:	add	r3, r0, fp
   3e3f4:	cmp	r5, r3
   3e3f8:	bcc	3e438 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1c4>
   3e3fc:	mov	r2, fp
   3e400:	mov	r1, r8
   3e404:	bl	145c4 <memset@plt>
   3e408:	ldr	r3, [r4, #20]
   3e40c:	add	fp, r3, fp
   3e410:	str	fp, [r4, #20]
   3e414:	b	3e390 <flatcc_json_printer_int32_enum_vector_field@@Base+0x11c>
   3e418:	add	sp, sp, #4
   3e41c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e420:	b	3c3c0 <flatcc_json_printer_int32_vector_field@@Base>
   3e424:	ldr	r3, [r4, #44]	; 0x2c
   3e428:	mov	r1, r9
   3e42c:	mov	r0, r4
   3e430:	blx	r3
   3e434:	b	3e390 <flatcc_json_printer_int32_enum_vector_field@@Base+0x11c>
   3e438:	cmp	r0, r5
   3e43c:	bcs	3e4b8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x244>
   3e440:	sub	r5, r5, r0
   3e444:	cmp	fp, r5
   3e448:	bls	3e3fc <flatcc_json_printer_int32_enum_vector_field@@Base+0x188>
   3e44c:	mov	r2, r5
   3e450:	mov	r1, r8
   3e454:	bl	145c4 <memset@plt>
   3e458:	ldr	r3, [r4, #20]
   3e45c:	mov	r0, r4
   3e460:	add	r3, r3, r5
   3e464:	str	r3, [r4, #20]
   3e468:	ldr	r2, [r4, #44]	; 0x2c
   3e46c:	mov	r1, r9
   3e470:	blx	r2
   3e474:	ldr	r0, [r4, #20]
   3e478:	ldr	r3, [r4, #16]
   3e47c:	sub	fp, fp, r5
   3e480:	sub	r5, r3, r0
   3e484:	cmp	fp, r5
   3e488:	bhi	3e44c <flatcc_json_printer_int32_enum_vector_field@@Base+0x1d8>
   3e48c:	b	3e3fc <flatcc_json_printer_int32_enum_vector_field@@Base+0x188>
   3e490:	ldrb	r3, [r4, #25]
   3e494:	cmp	r3, #0
   3e498:	bne	3e4d4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x260>
   3e49c:	ldr	r3, [r4, #20]
   3e4a0:	mov	r2, #93	; 0x5d
   3e4a4:	add	r1, r3, #1
   3e4a8:	str	r1, [r4, #20]
   3e4ac:	strb	r2, [r3]
   3e4b0:	add	sp, sp, #4
   3e4b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e4b8:	mov	r0, r4
   3e4bc:	ldr	r3, [r4, #44]	; 0x2c
   3e4c0:	mov	r1, r9
   3e4c4:	blx	r3
   3e4c8:	ldr	r5, [r4, #16]
   3e4cc:	ldr	r0, [r4, #20]
   3e4d0:	b	3e440 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1cc>
   3e4d4:	ldr	r3, [r4, #20]
   3e4d8:	mov	r2, #10
   3e4dc:	add	r1, r3, #1
   3e4e0:	str	r1, [r4, #20]
   3e4e4:	strb	r2, [r3]
   3e4e8:	ldr	r3, [r4, #32]
   3e4ec:	mov	r0, r4
   3e4f0:	sub	r3, r3, #1
   3e4f4:	str	r3, [r4, #32]
   3e4f8:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3e4fc:	b	3e49c <flatcc_json_printer_int32_enum_vector_field@@Base+0x228>
   3e500:	ldr	r3, [r4, #20]
   3e504:	mov	r2, #10
   3e508:	add	r1, r3, #1
   3e50c:	str	r1, [r4, #20]
   3e510:	mov	r0, r4
   3e514:	strb	r2, [r3]
   3e518:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3e51c:	b	3e358 <flatcc_json_printer_int32_enum_vector_field@@Base+0xe4>
   3e520:	ldr	r3, [r4, #44]	; 0x2c
   3e524:	mov	r0, r4
   3e528:	blx	r3
   3e52c:	b	3e358 <flatcc_json_printer_int32_enum_vector_field@@Base+0xe4>

0003e530 <flatcc_json_printer_int64_enum_vector_field@@Base>:
   3e530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e534:	sub	sp, sp, #4
   3e538:	ldrb	r5, [r0, #27]
   3e53c:	ldr	sl, [sp, #44]	; 0x2c
   3e540:	cmp	r5, #0
   3e544:	ldr	r5, [sp, #40]	; 0x28
   3e548:	bne	3e6d4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1a4>
   3e54c:	mov	r6, r3
   3e550:	add	r3, r2, #2
   3e554:	ldr	r2, [r1, #8]
   3e558:	lsl	r3, r3, #1
   3e55c:	cmp	r2, r3
   3e560:	mov	lr, r1
   3e564:	bgt	3e570 <flatcc_json_printer_int64_enum_vector_field@@Base+0x40>
   3e568:	add	sp, sp, #4
   3e56c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e570:	ldr	r2, [r1, #4]
   3e574:	ldrh	r2, [r2, r3]
   3e578:	cmp	r2, #0
   3e57c:	beq	3e568 <flatcc_json_printer_int64_enum_vector_field@@Base+0x38>
   3e580:	mov	r4, r0
   3e584:	ldr	r0, [r1]
   3e588:	adds	ip, r0, r2
   3e58c:	beq	3e568 <flatcc_json_printer_int64_enum_vector_field@@Base+0x38>
   3e590:	ldr	r3, [r1, #16]
   3e594:	cmp	r3, #0
   3e598:	add	r3, r3, #1
   3e59c:	str	r3, [r1, #16]
   3e5a0:	ldrne	r3, [r4, #20]
   3e5a4:	movne	r1, #44	; 0x2c
   3e5a8:	addne	lr, r3, #1
   3e5ac:	strne	lr, [r4, #20]
   3e5b0:	strbne	r1, [r3]
   3e5b4:	ldr	r3, [r0, r2]
   3e5b8:	mov	r1, r6
   3e5bc:	mov	r2, r5
   3e5c0:	mov	r0, r4
   3e5c4:	ldr	r6, [ip, r3]
   3e5c8:	add	r7, ip, r3
   3e5cc:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3e5d0:	ldr	r3, [r4, #32]
   3e5d4:	ldr	r2, [r4, #20]
   3e5d8:	add	r3, r3, #1
   3e5dc:	add	r0, r2, #1
   3e5e0:	mov	r1, #91	; 0x5b
   3e5e4:	cmp	r6, #0
   3e5e8:	str	r3, [r4, #32]
   3e5ec:	str	r0, [r4, #20]
   3e5f0:	strb	r1, [r2]
   3e5f4:	beq	3e74c <flatcc_json_printer_int64_enum_vector_field@@Base+0x21c>
   3e5f8:	ldrb	r1, [r4, #25]
   3e5fc:	cmp	r1, #0
   3e600:	bne	3e7bc <flatcc_json_printer_int64_enum_vector_field@@Base+0x28c>
   3e604:	ldr	r2, [r4, #20]
   3e608:	ldr	r3, [r4, #16]
   3e60c:	cmp	r2, r3
   3e610:	bcs	3e7dc <flatcc_json_printer_int64_enum_vector_field@@Base+0x2ac>
   3e614:	ldrd	r2, [r7, #4]
   3e618:	mov	r0, r4
   3e61c:	blx	sl
   3e620:	cmp	r6, #1
   3e624:	add	r7, r7, #12
   3e628:	sub	r6, r6, #2
   3e62c:	beq	3e74c <flatcc_json_printer_int64_enum_vector_field@@Base+0x21c>
   3e630:	mov	r9, #0
   3e634:	mov	r8, #32
   3e638:	b	3e664 <flatcc_json_printer_int64_enum_vector_field@@Base+0x134>
   3e63c:	ldr	r2, [r4, #20]
   3e640:	ldr	r3, [r4, #16]
   3e644:	cmp	r2, r3
   3e648:	bcs	3e6e0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1b0>
   3e64c:	ldrd	r2, [r7], #8
   3e650:	mov	r0, r4
   3e654:	blx	sl
   3e658:	cmp	r6, #0
   3e65c:	sub	r6, r6, #1
   3e660:	beq	3e74c <flatcc_json_printer_int64_enum_vector_field@@Base+0x21c>
   3e664:	ldr	r3, [r4, #20]
   3e668:	add	r2, r3, #1
   3e66c:	str	r2, [r4, #20]
   3e670:	mov	r2, #44	; 0x2c
   3e674:	strb	r2, [r3]
   3e678:	ldrb	r3, [r4, #25]
   3e67c:	cmp	r3, #0
   3e680:	beq	3e63c <flatcc_json_printer_int64_enum_vector_field@@Base+0x10c>
   3e684:	ldr	r3, [r4, #20]
   3e688:	add	r2, r3, #1
   3e68c:	str	r2, [r4, #20]
   3e690:	mov	r2, #10
   3e694:	strb	r2, [r3]
   3e698:	ldrb	r3, [r4, #25]
   3e69c:	ldr	fp, [r4, #32]
   3e6a0:	ldr	r0, [r4, #20]
   3e6a4:	ldr	r5, [r4, #16]
   3e6a8:	mul	fp, fp, r3
   3e6ac:	add	r3, r0, fp
   3e6b0:	cmp	r5, r3
   3e6b4:	bcc	3e6f4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1c4>
   3e6b8:	mov	r2, fp
   3e6bc:	mov	r1, r8
   3e6c0:	bl	145c4 <memset@plt>
   3e6c4:	ldr	r3, [r4, #20]
   3e6c8:	add	fp, r3, fp
   3e6cc:	str	fp, [r4, #20]
   3e6d0:	b	3e64c <flatcc_json_printer_int64_enum_vector_field@@Base+0x11c>
   3e6d4:	add	sp, sp, #4
   3e6d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e6dc:	b	3c694 <flatcc_json_printer_int64_vector_field@@Base>
   3e6e0:	ldr	r3, [r4, #44]	; 0x2c
   3e6e4:	mov	r1, r9
   3e6e8:	mov	r0, r4
   3e6ec:	blx	r3
   3e6f0:	b	3e64c <flatcc_json_printer_int64_enum_vector_field@@Base+0x11c>
   3e6f4:	cmp	r0, r5
   3e6f8:	bcs	3e774 <flatcc_json_printer_int64_enum_vector_field@@Base+0x244>
   3e6fc:	sub	r5, r5, r0
   3e700:	cmp	fp, r5
   3e704:	bls	3e6b8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x188>
   3e708:	mov	r2, r5
   3e70c:	mov	r1, r8
   3e710:	bl	145c4 <memset@plt>
   3e714:	ldr	r3, [r4, #20]
   3e718:	mov	r0, r4
   3e71c:	add	r3, r3, r5
   3e720:	str	r3, [r4, #20]
   3e724:	ldr	r2, [r4, #44]	; 0x2c
   3e728:	mov	r1, r9
   3e72c:	blx	r2
   3e730:	ldr	r0, [r4, #20]
   3e734:	ldr	r3, [r4, #16]
   3e738:	sub	fp, fp, r5
   3e73c:	sub	r5, r3, r0
   3e740:	cmp	fp, r5
   3e744:	bhi	3e708 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1d8>
   3e748:	b	3e6b8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x188>
   3e74c:	ldrb	r3, [r4, #25]
   3e750:	cmp	r3, #0
   3e754:	bne	3e790 <flatcc_json_printer_int64_enum_vector_field@@Base+0x260>
   3e758:	ldr	r3, [r4, #20]
   3e75c:	mov	r2, #93	; 0x5d
   3e760:	add	r1, r3, #1
   3e764:	str	r1, [r4, #20]
   3e768:	strb	r2, [r3]
   3e76c:	add	sp, sp, #4
   3e770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e774:	mov	r0, r4
   3e778:	ldr	r3, [r4, #44]	; 0x2c
   3e77c:	mov	r1, r9
   3e780:	blx	r3
   3e784:	ldr	r5, [r4, #16]
   3e788:	ldr	r0, [r4, #20]
   3e78c:	b	3e6fc <flatcc_json_printer_int64_enum_vector_field@@Base+0x1cc>
   3e790:	ldr	r3, [r4, #20]
   3e794:	mov	r2, #10
   3e798:	add	r1, r3, #1
   3e79c:	str	r1, [r4, #20]
   3e7a0:	strb	r2, [r3]
   3e7a4:	ldr	r3, [r4, #32]
   3e7a8:	mov	r0, r4
   3e7ac:	sub	r3, r3, #1
   3e7b0:	str	r3, [r4, #32]
   3e7b4:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3e7b8:	b	3e758 <flatcc_json_printer_int64_enum_vector_field@@Base+0x228>
   3e7bc:	ldr	r3, [r4, #20]
   3e7c0:	mov	r2, #10
   3e7c4:	add	r1, r3, #1
   3e7c8:	str	r1, [r4, #20]
   3e7cc:	mov	r0, r4
   3e7d0:	strb	r2, [r3]
   3e7d4:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3e7d8:	b	3e614 <flatcc_json_printer_int64_enum_vector_field@@Base+0xe4>
   3e7dc:	ldr	r3, [r4, #44]	; 0x2c
   3e7e0:	mov	r0, r4
   3e7e4:	blx	r3
   3e7e8:	b	3e614 <flatcc_json_printer_int64_enum_vector_field@@Base+0xe4>

0003e7ec <flatcc_json_printer_bool_enum_vector_field@@Base>:
   3e7ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e7f0:	sub	sp, sp, #12
   3e7f4:	ldrb	r5, [r0, #27]
   3e7f8:	ldr	fp, [sp, #52]	; 0x34
   3e7fc:	cmp	r5, #0
   3e800:	ldr	r5, [sp, #48]	; 0x30
   3e804:	bne	3e998 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1ac>
   3e808:	mov	r6, r3
   3e80c:	add	r3, r2, #2
   3e810:	ldr	r2, [r1, #8]
   3e814:	lsl	r3, r3, #1
   3e818:	cmp	r2, r3
   3e81c:	mov	lr, r1
   3e820:	bgt	3e82c <flatcc_json_printer_bool_enum_vector_field@@Base+0x40>
   3e824:	add	sp, sp, #12
   3e828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e82c:	ldr	r2, [r1, #4]
   3e830:	ldrh	r2, [r2, r3]
   3e834:	cmp	r2, #0
   3e838:	beq	3e824 <flatcc_json_printer_bool_enum_vector_field@@Base+0x38>
   3e83c:	mov	r4, r0
   3e840:	ldr	r0, [r1]
   3e844:	adds	ip, r0, r2
   3e848:	beq	3e824 <flatcc_json_printer_bool_enum_vector_field@@Base+0x38>
   3e84c:	ldr	r3, [r1, #16]
   3e850:	cmp	r3, #0
   3e854:	add	r3, r3, #1
   3e858:	str	r3, [r1, #16]
   3e85c:	ldrne	r3, [r4, #20]
   3e860:	movne	r1, #44	; 0x2c
   3e864:	addne	lr, r3, #1
   3e868:	strne	lr, [r4, #20]
   3e86c:	strbne	r1, [r3]
   3e870:	ldr	r3, [r0, r2]
   3e874:	mov	r1, r6
   3e878:	mov	r2, r5
   3e87c:	mov	r0, r4
   3e880:	ldr	r9, [ip, r3]
   3e884:	add	sl, ip, r3
   3e888:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3e88c:	ldr	r3, [r4, #32]
   3e890:	ldr	r2, [r4, #20]
   3e894:	add	r3, r3, #1
   3e898:	add	r0, r2, #1
   3e89c:	mov	r1, #91	; 0x5b
   3e8a0:	cmp	r9, #0
   3e8a4:	str	r3, [r4, #32]
   3e8a8:	str	r0, [r4, #20]
   3e8ac:	strb	r1, [r2]
   3e8b0:	beq	3ea10 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3e8b4:	ldrb	r1, [r4, #25]
   3e8b8:	cmp	r1, #0
   3e8bc:	bne	3ea80 <flatcc_json_printer_bool_enum_vector_field@@Base+0x294>
   3e8c0:	ldr	r2, [r4, #20]
   3e8c4:	ldr	r3, [r4, #16]
   3e8c8:	cmp	r2, r3
   3e8cc:	bcs	3eaa0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x2b4>
   3e8d0:	ldrb	r1, [sl, #4]
   3e8d4:	mov	r0, r4
   3e8d8:	blx	fp
   3e8dc:	cmp	r9, #1
   3e8e0:	add	r6, sl, #5
   3e8e4:	beq	3ea10 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3e8e8:	add	r3, r9, #4
   3e8ec:	str	r3, [sp, #4]
   3e8f0:	mov	r8, #0
   3e8f4:	mov	r7, #32
   3e8f8:	b	3e928 <flatcc_json_printer_bool_enum_vector_field@@Base+0x13c>
   3e8fc:	ldr	r2, [r4, #20]
   3e900:	ldr	r3, [r4, #16]
   3e904:	cmp	r2, r3
   3e908:	bcs	3e9a4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1b8>
   3e90c:	ldrb	r1, [r6], #1
   3e910:	mov	r0, r4
   3e914:	blx	fp
   3e918:	ldr	r3, [sp, #4]
   3e91c:	sub	r3, r3, r6
   3e920:	cmn	sl, r3
   3e924:	beq	3ea10 <flatcc_json_printer_bool_enum_vector_field@@Base+0x224>
   3e928:	ldr	r3, [r4, #20]
   3e92c:	add	r2, r3, #1
   3e930:	str	r2, [r4, #20]
   3e934:	mov	r2, #44	; 0x2c
   3e938:	strb	r2, [r3]
   3e93c:	ldrb	r3, [r4, #25]
   3e940:	cmp	r3, #0
   3e944:	beq	3e8fc <flatcc_json_printer_bool_enum_vector_field@@Base+0x110>
   3e948:	ldr	r3, [r4, #20]
   3e94c:	add	r2, r3, #1
   3e950:	str	r2, [r4, #20]
   3e954:	mov	r2, #10
   3e958:	strb	r2, [r3]
   3e95c:	ldrb	r3, [r4, #25]
   3e960:	ldr	r2, [r4, #32]
   3e964:	ldr	r0, [r4, #20]
   3e968:	ldr	r5, [r4, #16]
   3e96c:	mul	r9, r2, r3
   3e970:	add	r2, r0, r9
   3e974:	cmp	r5, r2
   3e978:	bcc	3e9b8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1cc>
   3e97c:	mov	r2, r9
   3e980:	mov	r1, r7
   3e984:	bl	145c4 <memset@plt>
   3e988:	ldr	r2, [r4, #20]
   3e98c:	add	r3, r2, r9
   3e990:	str	r3, [r4, #20]
   3e994:	b	3e90c <flatcc_json_printer_bool_enum_vector_field@@Base+0x120>
   3e998:	add	sp, sp, #12
   3e99c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e9a0:	b	3c984 <flatcc_json_printer_bool_vector_field@@Base>
   3e9a4:	ldr	r3, [r4, #44]	; 0x2c
   3e9a8:	mov	r1, r8
   3e9ac:	mov	r0, r4
   3e9b0:	blx	r3
   3e9b4:	b	3e90c <flatcc_json_printer_bool_enum_vector_field@@Base+0x120>
   3e9b8:	cmp	r0, r5
   3e9bc:	bcs	3ea38 <flatcc_json_printer_bool_enum_vector_field@@Base+0x24c>
   3e9c0:	sub	r5, r5, r0
   3e9c4:	cmp	r9, r5
   3e9c8:	bls	3e97c <flatcc_json_printer_bool_enum_vector_field@@Base+0x190>
   3e9cc:	mov	r2, r5
   3e9d0:	mov	r1, r7
   3e9d4:	bl	145c4 <memset@plt>
   3e9d8:	ldr	r3, [r4, #20]
   3e9dc:	mov	r0, r4
   3e9e0:	add	r3, r3, r5
   3e9e4:	str	r3, [r4, #20]
   3e9e8:	ldr	r2, [r4, #44]	; 0x2c
   3e9ec:	mov	r1, r8
   3e9f0:	blx	r2
   3e9f4:	ldr	r0, [r4, #20]
   3e9f8:	ldr	r3, [r4, #16]
   3e9fc:	sub	r9, r9, r5
   3ea00:	sub	r5, r3, r0
   3ea04:	cmp	r9, r5
   3ea08:	bhi	3e9cc <flatcc_json_printer_bool_enum_vector_field@@Base+0x1e0>
   3ea0c:	b	3e97c <flatcc_json_printer_bool_enum_vector_field@@Base+0x190>
   3ea10:	ldrb	r3, [r4, #25]
   3ea14:	cmp	r3, #0
   3ea18:	bne	3ea54 <flatcc_json_printer_bool_enum_vector_field@@Base+0x268>
   3ea1c:	ldr	r3, [r4, #20]
   3ea20:	mov	r2, #93	; 0x5d
   3ea24:	add	r1, r3, #1
   3ea28:	str	r1, [r4, #20]
   3ea2c:	strb	r2, [r3]
   3ea30:	add	sp, sp, #12
   3ea34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ea38:	mov	r0, r4
   3ea3c:	ldr	r2, [r4, #44]	; 0x2c
   3ea40:	mov	r1, r8
   3ea44:	blx	r2
   3ea48:	ldr	r5, [r4, #16]
   3ea4c:	ldr	r0, [r4, #20]
   3ea50:	b	3e9c0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1d4>
   3ea54:	ldr	r3, [r4, #20]
   3ea58:	mov	r2, #10
   3ea5c:	add	r1, r3, #1
   3ea60:	str	r1, [r4, #20]
   3ea64:	strb	r2, [r3]
   3ea68:	ldr	r3, [r4, #32]
   3ea6c:	mov	r0, r4
   3ea70:	sub	r3, r3, #1
   3ea74:	str	r3, [r4, #32]
   3ea78:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3ea7c:	b	3ea1c <flatcc_json_printer_bool_enum_vector_field@@Base+0x230>
   3ea80:	ldr	r3, [r4, #20]
   3ea84:	mov	r2, #10
   3ea88:	add	r1, r3, #1
   3ea8c:	str	r1, [r4, #20]
   3ea90:	mov	r0, r4
   3ea94:	strb	r2, [r3]
   3ea98:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3ea9c:	b	3e8d0 <flatcc_json_printer_bool_enum_vector_field@@Base+0xe4>
   3eaa0:	ldr	r3, [r4, #44]	; 0x2c
   3eaa4:	mov	r0, r4
   3eaa8:	blx	r3
   3eaac:	b	3e8d0 <flatcc_json_printer_bool_enum_vector_field@@Base+0xe4>

0003eab0 <flatcc_json_printer_struct_vector_field@@Base>:
   3eab0:	add	r2, r2, #2
   3eab4:	ldr	ip, [r1, #8]
   3eab8:	lsl	r2, r2, #1
   3eabc:	cmp	r2, ip
   3eac0:	bxge	lr
   3eac4:	ldr	ip, [r1, #4]
   3eac8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3eacc:	ldrh	lr, [ip, r2]
   3ead0:	cmp	lr, #0
   3ead4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ead8:	ldr	r5, [r1]
   3eadc:	adds	ip, r5, lr
   3eae0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eae4:	ldr	r2, [r1, #16]
   3eae8:	cmp	r2, #0
   3eaec:	add	r2, r2, #1
   3eaf0:	str	r2, [r1, #16]
   3eaf4:	ldrne	r2, [r0, #20]
   3eaf8:	movne	r1, #44	; 0x2c
   3eafc:	addne	r4, r2, #1
   3eb00:	strne	r4, [r0, #20]
   3eb04:	strbne	r1, [r2]
   3eb08:	mov	r1, r3
   3eb0c:	ldr	r3, [r5, lr]
   3eb10:	mov	r4, r0
   3eb14:	ldr	r2, [sp, #40]	; 0x28
   3eb18:	ldr	r6, [ip, r3]
   3eb1c:	add	r7, ip, r3
   3eb20:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3eb24:	ldr	r3, [r4, #32]
   3eb28:	ldr	r2, [r4, #20]
   3eb2c:	add	r3, r3, #1
   3eb30:	add	r0, r2, #1
   3eb34:	mov	r1, #91	; 0x5b
   3eb38:	cmp	r6, #0
   3eb3c:	str	r3, [r4, #32]
   3eb40:	str	r0, [r4, #20]
   3eb44:	strb	r1, [r2]
   3eb48:	beq	3edb4 <flatcc_json_printer_struct_vector_field@@Base+0x304>
   3eb4c:	ldrb	r1, [r4, #25]
   3eb50:	cmp	r1, #0
   3eb54:	bne	3ee3c <flatcc_json_printer_struct_vector_field@@Base+0x38c>
   3eb58:	ldr	r2, [r4, #20]
   3eb5c:	ldr	r3, [r4, #16]
   3eb60:	cmp	r2, r3
   3eb64:	bcs	3ee8c <flatcc_json_printer_struct_vector_field@@Base+0x3dc>
   3eb68:	ldr	r3, [r4, #32]
   3eb6c:	add	r1, r2, #1
   3eb70:	add	r3, r3, #1
   3eb74:	mov	r0, #123	; 0x7b
   3eb78:	add	r7, r7, #4
   3eb7c:	str	r3, [r4, #32]
   3eb80:	str	r1, [r4, #20]
   3eb84:	ldr	r3, [sp, #48]	; 0x30
   3eb88:	strb	r0, [r2]
   3eb8c:	mov	r1, r7
   3eb90:	mov	r0, r4
   3eb94:	blx	r3
   3eb98:	ldrb	r3, [r4, #25]
   3eb9c:	cmp	r3, #0
   3eba0:	bne	3ee60 <flatcc_json_printer_struct_vector_field@@Base+0x3b0>
   3eba4:	ldr	r3, [r4, #20]
   3eba8:	cmp	r6, #1
   3ebac:	add	r2, r3, #1
   3ebb0:	mov	sl, #125	; 0x7d
   3ebb4:	str	r2, [r4, #20]
   3ebb8:	sub	r6, r6, #2
   3ebbc:	strb	sl, [r3]
   3ebc0:	beq	3edb4 <flatcc_json_printer_struct_vector_field@@Base+0x304>
   3ebc4:	mov	r9, #0
   3ebc8:	mov	r8, #32
   3ebcc:	b	3ec34 <flatcc_json_printer_struct_vector_field@@Base+0x184>
   3ebd0:	ldr	r5, [r4, #20]
   3ebd4:	ldr	r3, [r4, #16]
   3ebd8:	cmp	r5, r3
   3ebdc:	bcs	3ecfc <flatcc_json_printer_struct_vector_field@@Base+0x24c>
   3ebe0:	ldr	r3, [r4, #32]
   3ebe4:	add	r2, r5, #1
   3ebe8:	add	r3, r3, #1
   3ebec:	str	r3, [r4, #32]
   3ebf0:	mov	r3, #123	; 0x7b
   3ebf4:	str	r2, [r4, #20]
   3ebf8:	mov	r1, r7
   3ebfc:	strb	r3, [r5]
   3ec00:	mov	r0, r4
   3ec04:	ldr	r3, [sp, #48]	; 0x30
   3ec08:	blx	r3
   3ec0c:	ldrb	r3, [r4, #25]
   3ec10:	cmp	r3, #0
   3ec14:	bne	3eca8 <flatcc_json_printer_struct_vector_field@@Base+0x1f8>
   3ec18:	ldr	r5, [r4, #20]
   3ec1c:	cmp	r6, #0
   3ec20:	add	r3, r5, #1
   3ec24:	str	r3, [r4, #20]
   3ec28:	sub	r6, r6, #1
   3ec2c:	strb	sl, [r5]
   3ec30:	beq	3edb4 <flatcc_json_printer_struct_vector_field@@Base+0x304>
   3ec34:	ldr	r3, [r4, #20]
   3ec38:	ldr	r2, [sp, #44]	; 0x2c
   3ec3c:	add	r7, r7, r2
   3ec40:	add	r2, r3, #1
   3ec44:	str	r2, [r4, #20]
   3ec48:	mov	r2, #44	; 0x2c
   3ec4c:	strb	r2, [r3]
   3ec50:	ldrb	r3, [r4, #25]
   3ec54:	cmp	r3, #0
   3ec58:	beq	3ebd0 <flatcc_json_printer_struct_vector_field@@Base+0x120>
   3ec5c:	ldr	r3, [r4, #20]
   3ec60:	add	r2, r3, #1
   3ec64:	str	r2, [r4, #20]
   3ec68:	mov	r2, #10
   3ec6c:	strb	r2, [r3]
   3ec70:	ldrb	r2, [r4, #25]
   3ec74:	ldr	r5, [r4, #32]
   3ec78:	ldr	r0, [r4, #20]
   3ec7c:	ldr	r3, [r4, #16]
   3ec80:	mul	r5, r5, r2
   3ec84:	add	r2, r0, r5
   3ec88:	cmp	r3, r2
   3ec8c:	bcc	3ed14 <flatcc_json_printer_struct_vector_field@@Base+0x264>
   3ec90:	mov	r2, r5
   3ec94:	mov	r1, r8
   3ec98:	bl	145c4 <memset@plt>
   3ec9c:	ldr	r3, [r4, #20]
   3eca0:	add	r5, r3, r5
   3eca4:	b	3ebe0 <flatcc_json_printer_struct_vector_field@@Base+0x130>
   3eca8:	ldr	r3, [r4, #20]
   3ecac:	add	r2, r3, #1
   3ecb0:	str	r2, [r4, #20]
   3ecb4:	mov	r2, #10
   3ecb8:	strb	r2, [r3]
   3ecbc:	ldr	r2, [r4, #32]
   3ecc0:	ldrb	r5, [r4, #25]
   3ecc4:	sub	r2, r2, #1
   3ecc8:	ldr	r0, [r4, #20]
   3eccc:	ldr	r3, [r4, #16]
   3ecd0:	mul	r5, r2, r5
   3ecd4:	str	r2, [r4, #32]
   3ecd8:	add	r2, r0, r5
   3ecdc:	cmp	r3, r2
   3ece0:	bcc	3ed64 <flatcc_json_printer_struct_vector_field@@Base+0x2b4>
   3ece4:	mov	r2, r5
   3ece8:	mov	r1, r8
   3ecec:	bl	145c4 <memset@plt>
   3ecf0:	ldr	r3, [r4, #20]
   3ecf4:	add	r5, r3, r5
   3ecf8:	b	3ec1c <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   3ecfc:	ldr	r3, [r4, #44]	; 0x2c
   3ed00:	mov	r1, r9
   3ed04:	mov	r0, r4
   3ed08:	blx	r3
   3ed0c:	ldr	r5, [r4, #20]
   3ed10:	b	3ebe0 <flatcc_json_printer_struct_vector_field@@Base+0x130>
   3ed14:	cmp	r0, r3
   3ed18:	bcc	3ed54 <flatcc_json_printer_struct_vector_field@@Base+0x2a4>
   3ed1c:	b	3edd8 <flatcc_json_printer_struct_vector_field@@Base+0x328>
   3ed20:	mov	r2, fp
   3ed24:	mov	r1, r8
   3ed28:	bl	145c4 <memset@plt>
   3ed2c:	ldr	r3, [r4, #20]
   3ed30:	mov	r0, r4
   3ed34:	add	r3, r3, fp
   3ed38:	str	r3, [r4, #20]
   3ed3c:	ldr	r2, [r4, #44]	; 0x2c
   3ed40:	mov	r1, r9
   3ed44:	blx	r2
   3ed48:	ldr	r0, [r4, #20]
   3ed4c:	ldr	r3, [r4, #16]
   3ed50:	sub	r5, r5, fp
   3ed54:	sub	fp, r3, r0
   3ed58:	cmp	r5, fp
   3ed5c:	bhi	3ed20 <flatcc_json_printer_struct_vector_field@@Base+0x270>
   3ed60:	b	3ec90 <flatcc_json_printer_struct_vector_field@@Base+0x1e0>
   3ed64:	cmp	r0, r3
   3ed68:	bcc	3eda4 <flatcc_json_printer_struct_vector_field@@Base+0x2f4>
   3ed6c:	b	3edf4 <flatcc_json_printer_struct_vector_field@@Base+0x344>
   3ed70:	mov	r2, fp
   3ed74:	mov	r1, r8
   3ed78:	bl	145c4 <memset@plt>
   3ed7c:	ldr	r3, [r4, #20]
   3ed80:	mov	r0, r4
   3ed84:	add	r3, r3, fp
   3ed88:	str	r3, [r4, #20]
   3ed8c:	ldr	r2, [r4, #44]	; 0x2c
   3ed90:	mov	r1, r9
   3ed94:	blx	r2
   3ed98:	ldr	r0, [r4, #20]
   3ed9c:	ldr	r3, [r4, #16]
   3eda0:	sub	r5, r5, fp
   3eda4:	sub	fp, r3, r0
   3eda8:	cmp	r5, fp
   3edac:	bhi	3ed70 <flatcc_json_printer_struct_vector_field@@Base+0x2c0>
   3edb0:	b	3ece4 <flatcc_json_printer_struct_vector_field@@Base+0x234>
   3edb4:	ldrb	r3, [r4, #25]
   3edb8:	cmp	r3, #0
   3edbc:	bne	3ee10 <flatcc_json_printer_struct_vector_field@@Base+0x360>
   3edc0:	ldr	r3, [r4, #20]
   3edc4:	mov	r2, #93	; 0x5d
   3edc8:	add	r1, r3, #1
   3edcc:	str	r1, [r4, #20]
   3edd0:	strb	r2, [r3]
   3edd4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3edd8:	ldr	r3, [r4, #44]	; 0x2c
   3eddc:	mov	r0, r4
   3ede0:	mov	r1, r9
   3ede4:	blx	r3
   3ede8:	ldr	r3, [r4, #16]
   3edec:	ldr	r0, [r4, #20]
   3edf0:	b	3ed54 <flatcc_json_printer_struct_vector_field@@Base+0x2a4>
   3edf4:	ldr	r3, [r4, #44]	; 0x2c
   3edf8:	mov	r0, r4
   3edfc:	mov	r1, r9
   3ee00:	blx	r3
   3ee04:	ldr	r3, [r4, #16]
   3ee08:	ldr	r0, [r4, #20]
   3ee0c:	b	3eda4 <flatcc_json_printer_struct_vector_field@@Base+0x2f4>
   3ee10:	ldr	r3, [r4, #20]
   3ee14:	mov	r2, #10
   3ee18:	add	r1, r3, #1
   3ee1c:	str	r1, [r4, #20]
   3ee20:	strb	r2, [r3]
   3ee24:	ldr	r3, [r4, #32]
   3ee28:	mov	r0, r4
   3ee2c:	sub	r3, r3, #1
   3ee30:	str	r3, [r4, #32]
   3ee34:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3ee38:	b	3edc0 <flatcc_json_printer_struct_vector_field@@Base+0x310>
   3ee3c:	ldr	r3, [r4, #20]
   3ee40:	mov	r2, #10
   3ee44:	add	r1, r3, #1
   3ee48:	str	r1, [r4, #20]
   3ee4c:	mov	r0, r4
   3ee50:	strb	r2, [r3]
   3ee54:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3ee58:	ldr	r2, [r4, #20]
   3ee5c:	b	3eb68 <flatcc_json_printer_struct_vector_field@@Base+0xb8>
   3ee60:	ldr	r3, [r4, #20]
   3ee64:	mov	r2, #10
   3ee68:	add	r1, r3, #1
   3ee6c:	str	r1, [r4, #20]
   3ee70:	strb	r2, [r3]
   3ee74:	ldr	r3, [r4, #32]
   3ee78:	mov	r0, r4
   3ee7c:	sub	r3, r3, #1
   3ee80:	str	r3, [r4, #32]
   3ee84:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3ee88:	b	3eba4 <flatcc_json_printer_struct_vector_field@@Base+0xf4>
   3ee8c:	ldr	r3, [r4, #44]	; 0x2c
   3ee90:	mov	r0, r4
   3ee94:	blx	r3
   3ee98:	ldr	r2, [r4, #20]
   3ee9c:	b	3eb68 <flatcc_json_printer_struct_vector_field@@Base+0xb8>

0003eea0 <flatcc_json_printer_string_vector_field@@Base>:
   3eea0:	add	r2, r2, #2
   3eea4:	ldr	ip, [r1, #8]
   3eea8:	lsl	r2, r2, #1
   3eeac:	cmp	ip, r2
   3eeb0:	bxle	lr
   3eeb4:	ldr	ip, [r1, #4]
   3eeb8:	ldrh	ip, [ip, r2]
   3eebc:	cmp	ip, #0
   3eec0:	bxeq	lr
   3eec4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3eec8:	ldr	r5, [r1]
   3eecc:	adds	lr, r5, ip
   3eed0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eed4:	ldr	r2, [r1, #16]
   3eed8:	cmp	r2, #0
   3eedc:	add	r2, r2, #1
   3eee0:	str	r2, [r1, #16]
   3eee4:	ldrne	r2, [r0, #20]
   3eee8:	movne	r1, #44	; 0x2c
   3eeec:	addne	r4, r2, #1
   3eef0:	strne	r4, [r0, #20]
   3eef4:	strbne	r1, [r2]
   3eef8:	mov	r1, r3
   3eefc:	ldr	r3, [r5, ip]
   3ef00:	mov	r4, r0
   3ef04:	ldr	r2, [sp, #40]	; 0x28
   3ef08:	ldr	r7, [lr, r3]
   3ef0c:	add	r8, lr, r3
   3ef10:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3ef14:	ldr	r3, [r4, #32]
   3ef18:	ldr	r2, [r4, #20]
   3ef1c:	add	r3, r3, #1
   3ef20:	add	r0, r2, #1
   3ef24:	mov	r1, #91	; 0x5b
   3ef28:	cmp	r7, #0
   3ef2c:	str	r3, [r4, #32]
   3ef30:	str	r0, [r4, #20]
   3ef34:	strb	r1, [r2]
   3ef38:	beq	3f0a8 <flatcc_json_printer_string_vector_field@@Base+0x208>
   3ef3c:	ldrb	r1, [r4, #25]
   3ef40:	cmp	r1, #0
   3ef44:	bne	3f114 <flatcc_json_printer_string_vector_field@@Base+0x274>
   3ef48:	ldr	r2, [r4, #20]
   3ef4c:	ldr	r3, [r4, #16]
   3ef50:	cmp	r2, r3
   3ef54:	bcs	3f134 <flatcc_json_printer_string_vector_field@@Base+0x294>
   3ef58:	ldr	r3, [r8, #4]
   3ef5c:	mov	r0, r4
   3ef60:	add	r3, r3, #4
   3ef64:	add	r1, r8, r3
   3ef68:	add	r1, r1, #4
   3ef6c:	ldr	r2, [r8, r3]
   3ef70:	bl	349f0 <flatcc_json_parser_struct_as_root@@Base+0xef4>
   3ef74:	cmp	r7, #1
   3ef78:	sub	r7, r7, #2
   3ef7c:	beq	3f0a8 <flatcc_json_printer_string_vector_field@@Base+0x208>
   3ef80:	add	r8, r8, #8
   3ef84:	mov	sl, #0
   3ef88:	mov	r9, #32
   3ef8c:	b	3efc8 <flatcc_json_printer_string_vector_field@@Base+0x128>
   3ef90:	ldr	r2, [r4, #20]
   3ef94:	ldr	r3, [r4, #16]
   3ef98:	cmp	r2, r3
   3ef9c:	bcs	3f03c <flatcc_json_printer_string_vector_field@@Base+0x19c>
   3efa0:	ldr	r3, [fp]
   3efa4:	mov	r0, r4
   3efa8:	add	r1, fp, r3
   3efac:	add	r1, r1, #4
   3efb0:	ldr	r2, [fp, r3]
   3efb4:	bl	349f0 <flatcc_json_parser_struct_as_root@@Base+0xef4>
   3efb8:	cmp	r7, #0
   3efbc:	add	r8, r8, #4
   3efc0:	sub	r7, r7, #1
   3efc4:	beq	3f0a8 <flatcc_json_printer_string_vector_field@@Base+0x208>
   3efc8:	ldr	r3, [r4, #20]
   3efcc:	mov	fp, r8
   3efd0:	add	r2, r3, #1
   3efd4:	str	r2, [r4, #20]
   3efd8:	mov	r2, #44	; 0x2c
   3efdc:	strb	r2, [r3]
   3efe0:	ldrb	r3, [r4, #25]
   3efe4:	cmp	r3, #0
   3efe8:	beq	3ef90 <flatcc_json_printer_string_vector_field@@Base+0xf0>
   3efec:	ldr	r3, [r4, #20]
   3eff0:	add	r2, r3, #1
   3eff4:	str	r2, [r4, #20]
   3eff8:	mov	r2, #10
   3effc:	strb	r2, [r3]
   3f000:	ldrb	r3, [r4, #25]
   3f004:	ldr	r6, [r4, #32]
   3f008:	ldr	r0, [r4, #20]
   3f00c:	ldr	r5, [r4, #16]
   3f010:	mul	r6, r6, r3
   3f014:	add	r3, r0, r6
   3f018:	cmp	r5, r3
   3f01c:	bcc	3f050 <flatcc_json_printer_string_vector_field@@Base+0x1b0>
   3f020:	mov	r2, r6
   3f024:	mov	r1, r9
   3f028:	bl	145c4 <memset@plt>
   3f02c:	ldr	r3, [r4, #20]
   3f030:	add	r6, r3, r6
   3f034:	str	r6, [r4, #20]
   3f038:	b	3efa0 <flatcc_json_printer_string_vector_field@@Base+0x100>
   3f03c:	ldr	r3, [r4, #44]	; 0x2c
   3f040:	mov	r1, sl
   3f044:	mov	r0, r4
   3f048:	blx	r3
   3f04c:	b	3efa0 <flatcc_json_printer_string_vector_field@@Base+0x100>
   3f050:	cmp	r0, r5
   3f054:	bcs	3f0cc <flatcc_json_printer_string_vector_field@@Base+0x22c>
   3f058:	sub	r5, r5, r0
   3f05c:	cmp	r6, r5
   3f060:	bls	3f020 <flatcc_json_printer_string_vector_field@@Base+0x180>
   3f064:	mov	r2, r5
   3f068:	mov	r1, r9
   3f06c:	bl	145c4 <memset@plt>
   3f070:	ldr	r3, [r4, #20]
   3f074:	mov	r0, r4
   3f078:	add	r3, r3, r5
   3f07c:	str	r3, [r4, #20]
   3f080:	ldr	r2, [r4, #44]	; 0x2c
   3f084:	mov	r1, sl
   3f088:	blx	r2
   3f08c:	ldr	r0, [r4, #20]
   3f090:	ldr	r3, [r4, #16]
   3f094:	sub	r6, r6, r5
   3f098:	sub	r5, r3, r0
   3f09c:	cmp	r6, r5
   3f0a0:	bhi	3f064 <flatcc_json_printer_string_vector_field@@Base+0x1c4>
   3f0a4:	b	3f020 <flatcc_json_printer_string_vector_field@@Base+0x180>
   3f0a8:	ldrb	r3, [r4, #25]
   3f0ac:	cmp	r3, #0
   3f0b0:	bne	3f0e8 <flatcc_json_printer_string_vector_field@@Base+0x248>
   3f0b4:	ldr	r3, [r4, #20]
   3f0b8:	mov	r2, #93	; 0x5d
   3f0bc:	add	r1, r3, #1
   3f0c0:	str	r1, [r4, #20]
   3f0c4:	strb	r2, [r3]
   3f0c8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f0cc:	mov	r0, r4
   3f0d0:	ldr	r3, [r4, #44]	; 0x2c
   3f0d4:	mov	r1, sl
   3f0d8:	blx	r3
   3f0dc:	ldr	r5, [r4, #16]
   3f0e0:	ldr	r0, [r4, #20]
   3f0e4:	b	3f058 <flatcc_json_printer_string_vector_field@@Base+0x1b8>
   3f0e8:	ldr	r3, [r4, #20]
   3f0ec:	mov	r2, #10
   3f0f0:	add	r1, r3, #1
   3f0f4:	str	r1, [r4, #20]
   3f0f8:	strb	r2, [r3]
   3f0fc:	ldr	r3, [r4, #32]
   3f100:	mov	r0, r4
   3f104:	sub	r3, r3, #1
   3f108:	str	r3, [r4, #32]
   3f10c:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3f110:	b	3f0b4 <flatcc_json_printer_string_vector_field@@Base+0x214>
   3f114:	ldr	r3, [r4, #20]
   3f118:	mov	r2, #10
   3f11c:	add	r1, r3, #1
   3f120:	str	r1, [r4, #20]
   3f124:	mov	r0, r4
   3f128:	strb	r2, [r3]
   3f12c:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3f130:	b	3ef58 <flatcc_json_printer_string_vector_field@@Base+0xb8>
   3f134:	ldr	r3, [r4, #44]	; 0x2c
   3f138:	mov	r0, r4
   3f13c:	blx	r3
   3f140:	b	3ef58 <flatcc_json_printer_string_vector_field@@Base+0xb8>

0003f144 <flatcc_json_printer_table_vector_field@@Base>:
   3f144:	add	r2, r2, #2
   3f148:	ldr	ip, [r1, #8]
   3f14c:	lsl	r2, r2, #1
   3f150:	cmp	ip, r2
   3f154:	bxle	lr
   3f158:	ldr	ip, [r1, #4]
   3f15c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f160:	sub	sp, sp, #44	; 0x2c
   3f164:	ldrh	lr, [ip, r2]
   3f168:	cmp	lr, #0
   3f16c:	beq	3f208 <flatcc_json_printer_table_vector_field@@Base+0xc4>
   3f170:	ldr	r5, [r1]
   3f174:	adds	ip, r5, lr
   3f178:	beq	3f208 <flatcc_json_printer_table_vector_field@@Base+0xc4>
   3f17c:	ldr	r2, [r1, #16]
   3f180:	mov	fp, r1
   3f184:	cmp	r2, #0
   3f188:	add	r2, r2, #1
   3f18c:	str	r2, [r1, #16]
   3f190:	ldrne	r2, [r0, #20]
   3f194:	movne	r4, #44	; 0x2c
   3f198:	addne	r6, r2, #1
   3f19c:	strne	r6, [r0, #20]
   3f1a0:	strbne	r4, [r2]
   3f1a4:	ldr	lr, [r5, lr]
   3f1a8:	mov	r4, r0
   3f1ac:	mov	r1, r3
   3f1b0:	ldr	r2, [sp, #80]	; 0x50
   3f1b4:	ldr	r5, [ip, lr]
   3f1b8:	add	r7, ip, lr
   3f1bc:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3f1c0:	ldr	r2, [r4, #32]
   3f1c4:	ldr	r1, [r4, #20]
   3f1c8:	add	r2, r2, #1
   3f1cc:	add	ip, r1, #1
   3f1d0:	mov	r0, #91	; 0x5b
   3f1d4:	cmp	r5, #0
   3f1d8:	str	r2, [r4, #32]
   3f1dc:	str	ip, [r4, #20]
   3f1e0:	strb	r0, [r1]
   3f1e4:	bne	3f210 <flatcc_json_printer_table_vector_field@@Base+0xcc>
   3f1e8:	ldrb	r3, [r4, #25]
   3f1ec:	cmp	r3, #0
   3f1f0:	bne	3f280 <flatcc_json_printer_table_vector_field@@Base+0x13c>
   3f1f4:	ldr	r3, [r4, #20]
   3f1f8:	mov	r2, #93	; 0x5d
   3f1fc:	add	r1, r3, #1
   3f200:	str	r1, [r4, #20]
   3f204:	strb	r2, [r3]
   3f208:	add	sp, sp, #44	; 0x2c
   3f20c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f210:	ldr	r2, [fp, #12]
   3f214:	add	r6, r7, #4
   3f218:	subs	r2, r2, #1
   3f21c:	bne	3f2ac <flatcc_json_printer_table_vector_field@@Base+0x168>
   3f220:	ldr	r2, [r4, #36]	; 0x24
   3f224:	cmp	r2, #0
   3f228:	moveq	r2, #2
   3f22c:	streq	r2, [r4, #36]	; 0x24
   3f230:	sub	r5, r5, #1
   3f234:	mov	r9, #44	; 0x2c
   3f238:	mov	sl, #0
   3f23c:	subs	r5, r5, #1
   3f240:	bcc	3f1e8 <flatcc_json_printer_table_vector_field@@Base+0xa4>
   3f244:	ldr	r3, [r4, #20]
   3f248:	add	r6, r6, #4
   3f24c:	add	r2, r3, #1
   3f250:	str	r2, [r4, #20]
   3f254:	strb	r9, [r3]
   3f258:	ldr	r3, [fp, #12]
   3f25c:	subs	r3, r3, #1
   3f260:	bne	3f324 <flatcc_json_printer_table_vector_field@@Base+0x1e0>
   3f264:	ldr	r3, [r4, #36]	; 0x24
   3f268:	cmp	r3, #0
   3f26c:	moveq	r3, #2
   3f270:	streq	r3, [r4, #36]	; 0x24
   3f274:	subs	r5, r5, #1
   3f278:	bcs	3f244 <flatcc_json_printer_table_vector_field@@Base+0x100>
   3f27c:	b	3f1e8 <flatcc_json_printer_table_vector_field@@Base+0xa4>
   3f280:	ldr	r3, [r4, #20]
   3f284:	mov	r2, #10
   3f288:	add	r1, r3, #1
   3f28c:	str	r1, [r4, #20]
   3f290:	strb	r2, [r3]
   3f294:	ldr	r3, [r4, #32]
   3f298:	mov	r0, r4
   3f29c:	sub	r3, r3, #1
   3f2a0:	str	r3, [r4, #32]
   3f2a4:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3f2a8:	b	3f1f4 <flatcc_json_printer_table_vector_field@@Base+0xb0>
   3f2ac:	ldr	r0, [r4, #32]
   3f2b0:	ldr	r1, [r7, #4]
   3f2b4:	ldr	ip, [r4, #20]
   3f2b8:	add	r0, r0, #1
   3f2bc:	str	r0, [r4, #32]
   3f2c0:	add	r7, ip, #1
   3f2c4:	mov	lr, #123	; 0x7b
   3f2c8:	mov	r0, #0
   3f2cc:	str	r7, [r4, #20]
   3f2d0:	strb	lr, [ip]
   3f2d4:	str	r2, [sp, #12]
   3f2d8:	str	r0, [sp, #16]
   3f2dc:	ldr	ip, [r6, r1]
   3f2e0:	add	r2, r6, r1
   3f2e4:	sub	ip, r2, ip
   3f2e8:	mov	r1, sp
   3f2ec:	ldrh	lr, [ip]
   3f2f0:	mov	r0, r4
   3f2f4:	ldr	r3, [sp, #84]	; 0x54
   3f2f8:	stm	sp, {r2, ip, lr}
   3f2fc:	blx	r3
   3f300:	ldrb	r2, [r4, #25]
   3f304:	cmp	r2, #0
   3f308:	bne	3f460 <flatcc_json_printer_table_vector_field@@Base+0x31c>
   3f30c:	ldr	r2, [r4, #20]
   3f310:	mov	r1, #125	; 0x7d
   3f314:	add	r0, r2, #1
   3f318:	str	r0, [r4, #20]
   3f31c:	strb	r1, [r2]
   3f320:	b	3f230 <flatcc_json_printer_table_vector_field@@Base+0xec>
   3f324:	ldr	r1, [r4, #32]
   3f328:	ldr	r2, [r6]
   3f32c:	ldr	r0, [r4, #20]
   3f330:	add	r1, r1, #1
   3f334:	str	r1, [r4, #32]
   3f338:	add	ip, r0, #1
   3f33c:	mov	r1, #123	; 0x7b
   3f340:	str	ip, [r4, #20]
   3f344:	strb	r1, [r0]
   3f348:	str	r3, [sp, #32]
   3f34c:	str	sl, [sp, #36]	; 0x24
   3f350:	ldr	r1, [r6, r2]
   3f354:	add	r3, r6, r2
   3f358:	sub	r2, r3, r1
   3f35c:	mov	r0, r4
   3f360:	ldrh	ip, [r2]
   3f364:	add	r1, sp, #20
   3f368:	str	r3, [sp, #20]
   3f36c:	ldr	r3, [sp, #84]	; 0x54
   3f370:	str	r2, [sp, #24]
   3f374:	str	ip, [sp, #28]
   3f378:	blx	r3
   3f37c:	ldrb	r3, [r4, #25]
   3f380:	cmp	r3, #0
   3f384:	bne	3f3a0 <flatcc_json_printer_table_vector_field@@Base+0x25c>
   3f388:	ldr	r7, [r4, #20]
   3f38c:	add	r3, r7, #1
   3f390:	str	r3, [r4, #20]
   3f394:	mov	r3, #125	; 0x7d
   3f398:	strb	r3, [r7]
   3f39c:	b	3f23c <flatcc_json_printer_table_vector_field@@Base+0xf8>
   3f3a0:	ldr	r3, [r4, #20]
   3f3a4:	add	r2, r3, #1
   3f3a8:	str	r2, [r4, #20]
   3f3ac:	mov	r2, #10
   3f3b0:	strb	r2, [r3]
   3f3b4:	ldr	r2, [r4, #32]
   3f3b8:	ldrb	r7, [r4, #25]
   3f3bc:	sub	r2, r2, #1
   3f3c0:	ldr	r0, [r4, #20]
   3f3c4:	ldr	r3, [r4, #16]
   3f3c8:	mul	r7, r2, r7
   3f3cc:	str	r2, [r4, #32]
   3f3d0:	add	r2, r0, r7
   3f3d4:	cmp	r3, r2
   3f3d8:	bcc	3f3f4 <flatcc_json_printer_table_vector_field@@Base+0x2b0>
   3f3dc:	mov	r2, r7
   3f3e0:	mov	r1, #32
   3f3e4:	bl	145c4 <memset@plt>
   3f3e8:	ldr	r3, [r4, #20]
   3f3ec:	add	r7, r3, r7
   3f3f0:	b	3f38c <flatcc_json_printer_table_vector_field@@Base+0x248>
   3f3f4:	cmp	r0, r3
   3f3f8:	bcc	3f434 <flatcc_json_printer_table_vector_field@@Base+0x2f0>
   3f3fc:	b	3f444 <flatcc_json_printer_table_vector_field@@Base+0x300>
   3f400:	mov	r2, r8
   3f404:	mov	r1, #32
   3f408:	bl	145c4 <memset@plt>
   3f40c:	ldr	r3, [r4, #20]
   3f410:	mov	r0, r4
   3f414:	add	r3, r3, r8
   3f418:	str	r3, [r4, #20]
   3f41c:	ldr	r2, [r4, #44]	; 0x2c
   3f420:	mov	r1, sl
   3f424:	blx	r2
   3f428:	ldr	r0, [r4, #20]
   3f42c:	ldr	r3, [r4, #16]
   3f430:	sub	r7, r7, r8
   3f434:	sub	r8, r3, r0
   3f438:	cmp	r7, r8
   3f43c:	bhi	3f400 <flatcc_json_printer_table_vector_field@@Base+0x2bc>
   3f440:	b	3f3dc <flatcc_json_printer_table_vector_field@@Base+0x298>
   3f444:	ldr	r3, [r4, #44]	; 0x2c
   3f448:	mov	r0, r4
   3f44c:	mov	r1, sl
   3f450:	blx	r3
   3f454:	ldr	r3, [r4, #16]
   3f458:	ldr	r0, [r4, #20]
   3f45c:	b	3f434 <flatcc_json_printer_table_vector_field@@Base+0x2f0>
   3f460:	ldr	r2, [r4, #20]
   3f464:	mov	r1, #10
   3f468:	add	r0, r2, #1
   3f46c:	str	r0, [r4, #20]
   3f470:	strb	r1, [r2]
   3f474:	ldr	r2, [r4, #32]
   3f478:	mov	r0, r4
   3f47c:	sub	r2, r2, #1
   3f480:	str	r2, [r4, #32]
   3f484:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3f488:	b	3f30c <flatcc_json_printer_table_vector_field@@Base+0x1c8>

0003f48c <flatcc_json_printer_union_vector_field@@Base>:
   3f48c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f490:	mov	r8, r2
   3f494:	add	r2, r2, #1
   3f498:	mov	r5, r1
   3f49c:	ldr	r1, [r1, #8]
   3f4a0:	sub	sp, sp, #140	; 0x8c
   3f4a4:	lsl	r2, r2, #1
   3f4a8:	cmp	r2, r1
   3f4ac:	mov	r4, r0
   3f4b0:	mov	r9, r3
   3f4b4:	ldr	r6, [sp, #176]	; 0xb0
   3f4b8:	movge	r7, #0
   3f4bc:	bge	3f4d4 <flatcc_json_printer_union_vector_field@@Base+0x48>
   3f4c0:	ldr	r3, [r5, #4]
   3f4c4:	ldrh	r7, [r3, r2]
   3f4c8:	cmp	r7, #0
   3f4cc:	ldrne	r3, [r5]
   3f4d0:	addne	r7, r3, r7
   3f4d4:	add	r2, r2, #2
   3f4d8:	cmp	r2, r1
   3f4dc:	bge	3f6f0 <flatcc_json_printer_union_vector_field@@Base+0x264>
   3f4e0:	ldr	r3, [r5, #4]
   3f4e4:	ldrh	sl, [r3, r2]
   3f4e8:	cmp	sl, #0
   3f4ec:	beq	3f6f0 <flatcc_json_printer_union_vector_field@@Base+0x264>
   3f4f0:	ldr	r3, [r5]
   3f4f4:	cmp	r6, #100	; 0x64
   3f4f8:	mov	r2, r3
   3f4fc:	str	r3, [sp, #12]
   3f500:	ldr	r3, [r5, #12]
   3f504:	add	fp, r2, sl
   3f508:	str	r3, [sp, #20]
   3f50c:	bgt	3f724 <flatcc_json_printer_union_vector_field@@Base+0x298>
   3f510:	add	r3, sp, #28
   3f514:	mov	r0, r3
   3f518:	mov	r2, r6
   3f51c:	mov	r1, r9
   3f520:	bl	1454c <memcpy@plt>
   3f524:	ldr	r2, [pc, #612]	; 3f790 <flatcc_json_printer_union_vector_field@@Base+0x304>
   3f528:	cmp	fp, #0
   3f52c:	cmpne	r7, #0
   3f530:	ldrb	ip, [r2, #4]
   3f534:	mov	r3, r0
   3f538:	add	r1, r0, r6
   3f53c:	ldr	r0, [r2]
   3f540:	str	r0, [r3, r6]
   3f544:	strb	ip, [r1, #4]
   3f548:	beq	3f700 <flatcc_json_printer_union_vector_field@@Base+0x274>
   3f54c:	ldr	r2, [sp, #180]	; 0xb4
   3f550:	add	r1, r6, #5
   3f554:	str	r2, [sp, #4]
   3f558:	str	r1, [sp]
   3f55c:	sub	r2, r8, #1
   3f560:	mov	r1, r5
   3f564:	mov	r0, r4
   3f568:	bl	3d1f8 <flatcc_json_printer_uint8_enum_vector_field@@Base>
   3f56c:	ldr	r3, [r5, #16]
   3f570:	mov	r0, r4
   3f574:	cmp	r3, #0
   3f578:	add	r3, r3, #1
   3f57c:	str	r3, [r5, #16]
   3f580:	ldrne	r3, [r4, #20]
   3f584:	movne	r2, #44	; 0x2c
   3f588:	addne	r1, r3, #1
   3f58c:	strne	r1, [r4, #20]
   3f590:	strbne	r2, [r3]
   3f594:	ldr	r3, [sp, #12]
   3f598:	mov	r2, r6
   3f59c:	mov	r1, r9
   3f5a0:	ldr	r3, [r3, sl]
   3f5a4:	ldr	r6, [r7]
   3f5a8:	add	r5, fp, r3
   3f5ac:	ldr	r8, [fp, r3]
   3f5b0:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3f5b4:	ldr	r3, [r4, #32]
   3f5b8:	ldr	r2, [r4, #20]
   3f5bc:	add	r3, r3, #1
   3f5c0:	add	r0, r2, #1
   3f5c4:	mov	r1, #91	; 0x5b
   3f5c8:	cmp	r8, #0
   3f5cc:	str	r3, [r4, #32]
   3f5d0:	str	r0, [r4, #20]
   3f5d4:	strb	r1, [r2]
   3f5d8:	beq	3f6c8 <flatcc_json_printer_union_vector_field@@Base+0x23c>
   3f5dc:	add	r7, r7, r6
   3f5e0:	add	r5, r5, #4
   3f5e4:	ldrb	r3, [r7, #4]
   3f5e8:	cmp	r3, #0
   3f5ec:	bne	3f774 <flatcc_json_printer_union_vector_field@@Base+0x2e8>
   3f5f0:	ldr	r3, [r4, #20]
   3f5f4:	mov	r2, #110	; 0x6e
   3f5f8:	add	r1, r3, #1
   3f5fc:	str	r1, [r4, #20]
   3f600:	strb	r2, [r3]
   3f604:	ldr	r3, [r4, #20]
   3f608:	mov	r2, #117	; 0x75
   3f60c:	add	r1, r3, #1
   3f610:	str	r1, [r4, #20]
   3f614:	strb	r2, [r3]
   3f618:	ldr	r3, [r4, #20]
   3f61c:	mov	r2, #108	; 0x6c
   3f620:	add	r1, r3, #1
   3f624:	str	r1, [r4, #20]
   3f628:	strb	r2, [r3]
   3f62c:	ldr	r3, [r4, #20]
   3f630:	add	r1, r3, #1
   3f634:	str	r1, [r4, #20]
   3f638:	strb	r2, [r3]
   3f63c:	add	r8, r8, #3
   3f640:	add	r8, r7, r8
   3f644:	mov	r9, #44	; 0x2c
   3f648:	add	r7, r7, #4
   3f64c:	mov	fp, #110	; 0x6e
   3f650:	mov	sl, #117	; 0x75
   3f654:	mov	r6, #108	; 0x6c
   3f658:	cmp	r7, r8
   3f65c:	beq	3f6c8 <flatcc_json_printer_union_vector_field@@Base+0x23c>
   3f660:	ldrb	r2, [r7, #1]!
   3f664:	ldr	r3, [r4, #20]
   3f668:	add	r5, r5, #4
   3f66c:	add	r1, r3, #1
   3f670:	cmp	r2, #0
   3f674:	str	r1, [r4, #20]
   3f678:	strb	r9, [r3]
   3f67c:	bne	3f708 <flatcc_json_printer_union_vector_field@@Base+0x27c>
   3f680:	ldr	r3, [r4, #20]
   3f684:	cmp	r7, r8
   3f688:	add	r2, r3, #1
   3f68c:	str	r2, [r4, #20]
   3f690:	strb	fp, [r3]
   3f694:	ldr	r3, [r4, #20]
   3f698:	add	r2, r3, #1
   3f69c:	str	r2, [r4, #20]
   3f6a0:	strb	sl, [r3]
   3f6a4:	ldr	r3, [r4, #20]
   3f6a8:	add	r2, r3, #1
   3f6ac:	str	r2, [r4, #20]
   3f6b0:	strb	r6, [r3]
   3f6b4:	ldr	r3, [r4, #20]
   3f6b8:	add	r2, r3, #1
   3f6bc:	str	r2, [r4, #20]
   3f6c0:	strb	r6, [r3]
   3f6c4:	bne	3f660 <flatcc_json_printer_union_vector_field@@Base+0x1d4>
   3f6c8:	ldrb	r3, [r4, #25]
   3f6cc:	cmp	r3, #0
   3f6d0:	bne	3f748 <flatcc_json_printer_union_vector_field@@Base+0x2bc>
   3f6d4:	ldr	r3, [r4, #20]
   3f6d8:	mov	r2, #93	; 0x5d
   3f6dc:	add	r1, r3, #1
   3f6e0:	str	r1, [r4, #20]
   3f6e4:	strb	r2, [r3]
   3f6e8:	add	sp, sp, #140	; 0x8c
   3f6ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f6f0:	ldr	r3, [r5, #12]
   3f6f4:	cmp	r6, #100	; 0x64
   3f6f8:	str	r3, [sp, #20]
   3f6fc:	bgt	3f724 <flatcc_json_printer_union_vector_field@@Base+0x298>
   3f700:	add	sp, sp, #140	; 0x8c
   3f704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f708:	add	r1, sp, #16
   3f70c:	mov	r0, r4
   3f710:	ldr	r3, [sp, #184]	; 0xb8
   3f714:	strb	r2, [sp, #24]
   3f718:	str	r5, [sp, #16]
   3f71c:	blx	r3
   3f720:	b	3f658 <flatcc_json_printer_union_vector_field@@Base+0x1cc>
   3f724:	ldr	r3, [r4, #36]	; 0x24
   3f728:	ldr	r2, [pc, #100]	; 3f794 <flatcc_json_printer_union_vector_field@@Base+0x308>
   3f72c:	cmp	r3, #0
   3f730:	moveq	r3, #1
   3f734:	streq	r3, [r4, #36]	; 0x24
   3f738:	ldr	r1, [pc, #88]	; 3f798 <flatcc_json_printer_union_vector_field@@Base+0x30c>
   3f73c:	ldr	r3, [pc, #88]	; 3f79c <flatcc_json_printer_union_vector_field@@Base+0x310>
   3f740:	ldr	r0, [pc, #88]	; 3f7a0 <flatcc_json_printer_union_vector_field@@Base+0x314>
   3f744:	bl	14618 <__assert_fail@plt>
   3f748:	ldr	r3, [r4, #20]
   3f74c:	mov	r2, #10
   3f750:	add	r1, r3, #1
   3f754:	str	r1, [r4, #20]
   3f758:	strb	r2, [r3]
   3f75c:	ldr	r3, [r4, #32]
   3f760:	mov	r0, r4
   3f764:	sub	r3, r3, #1
   3f768:	str	r3, [r4, #32]
   3f76c:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3f770:	b	3f6d4 <flatcc_json_printer_union_vector_field@@Base+0x248>
   3f774:	add	r1, sp, #136	; 0x88
   3f778:	strb	r3, [sp, #24]
   3f77c:	mov	r0, r4
   3f780:	str	r5, [r1, #-120]!	; 0xffffff88
   3f784:	ldr	r3, [sp, #184]	; 0xb8
   3f788:	blx	r3
   3f78c:	b	3f63c <flatcc_json_printer_union_vector_field@@Base+0x1b0>
   3f790:	muleq	r4, ip, sp
   3f794:	andeq	r0, r0, fp, asr #6
   3f798:	andeq	r6, r4, ip, ror #23
   3f79c:	andeq	r6, r4, r8, lsl #23
   3f7a0:	andeq	r6, r4, r0, lsl #27

0003f7a4 <flatcc_json_printer_table_field@@Base>:
   3f7a4:	add	r2, r2, #2
   3f7a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f7ac:	mov	r8, r1
   3f7b0:	ldr	r1, [r1, #8]
   3f7b4:	sub	sp, sp, #36	; 0x24
   3f7b8:	lsl	r2, r2, #1
   3f7bc:	cmp	r2, r1
   3f7c0:	ldr	r9, [sp, #72]	; 0x48
   3f7c4:	bge	3f94c <flatcc_json_printer_table_field@@Base+0x1a8>
   3f7c8:	mov	r6, r3
   3f7cc:	ldr	r3, [r8, #4]
   3f7d0:	ldrh	sl, [r3, r2]
   3f7d4:	cmp	sl, #0
   3f7d8:	beq	3f94c <flatcc_json_printer_table_field@@Base+0x1a8>
   3f7dc:	ldr	r3, [r8]
   3f7e0:	adds	fp, r3, sl
   3f7e4:	str	r3, [sp, #4]
   3f7e8:	beq	3f94c <flatcc_json_printer_table_field@@Base+0x1a8>
   3f7ec:	ldr	r3, [r8, #16]
   3f7f0:	mov	r4, r0
   3f7f4:	cmp	r3, #0
   3f7f8:	add	r3, r3, #1
   3f7fc:	str	r3, [r8, #16]
   3f800:	ldrne	r3, [r0, #20]
   3f804:	movne	r2, #44	; 0x2c
   3f808:	addne	r1, r3, #1
   3f80c:	strne	r1, [r0, #20]
   3f810:	strbne	r2, [r3]
   3f814:	ldrb	r1, [r0, #25]
   3f818:	mov	r7, r9
   3f81c:	ldr	r3, [r0, #20]
   3f820:	cmp	r1, #0
   3f824:	bne	3fa3c <flatcc_json_printer_table_field@@Base+0x298>
   3f828:	ldr	r2, [r0, #16]
   3f82c:	cmp	r3, r2
   3f830:	bcc	3f840 <flatcc_json_printer_table_field@@Base+0x9c>
   3f834:	ldr	r3, [r0, #44]	; 0x2c
   3f838:	blx	r3
   3f83c:	ldr	r3, [r4, #20]
   3f840:	mov	r2, #34	; 0x22
   3f844:	strb	r2, [r3]
   3f848:	ldrb	r3, [r4, #26]
   3f84c:	ldr	r0, [r4, #20]
   3f850:	ldr	r5, [r4, #16]
   3f854:	cmp	r3, #0
   3f858:	addeq	r0, r0, #1
   3f85c:	add	r3, r0, r9
   3f860:	cmp	r5, r3
   3f864:	str	r0, [r4, #20]
   3f868:	bhi	3f954 <flatcc_json_printer_table_field@@Base+0x1b0>
   3f86c:	cmp	r0, r5
   3f870:	bcs	3fa20 <flatcc_json_printer_table_field@@Base+0x27c>
   3f874:	sub	r5, r5, r0
   3f878:	cmp	r9, r5
   3f87c:	bls	3f8c8 <flatcc_json_printer_table_field@@Base+0x124>
   3f880:	mov	r9, #0
   3f884:	mov	r2, r5
   3f888:	mov	r1, r6
   3f88c:	bl	1454c <memcpy@plt>
   3f890:	ldr	r2, [r4, #20]
   3f894:	ldr	r3, [r4, #44]	; 0x2c
   3f898:	add	r2, r2, r5
   3f89c:	mov	r0, r4
   3f8a0:	str	r2, [r4, #20]
   3f8a4:	mov	r1, r9
   3f8a8:	blx	r3
   3f8ac:	ldr	r0, [r4, #20]
   3f8b0:	ldr	r3, [r4, #16]
   3f8b4:	sub	r7, r7, r5
   3f8b8:	add	r6, r6, r5
   3f8bc:	sub	r5, r3, r0
   3f8c0:	cmp	r7, r5
   3f8c4:	bhi	3f884 <flatcc_json_printer_table_field@@Base+0xe0>
   3f8c8:	mov	r1, r6
   3f8cc:	mov	r2, r7
   3f8d0:	bl	1454c <memcpy@plt>
   3f8d4:	ldr	r9, [r4, #20]
   3f8d8:	add	r9, r9, r7
   3f8dc:	str	r9, [r4, #20]
   3f8e0:	mov	r3, #34	; 0x22
   3f8e4:	strb	r3, [r9]
   3f8e8:	ldr	r1, [r4, #20]
   3f8ec:	ldrb	r3, [r4, #26]
   3f8f0:	clz	r3, r3
   3f8f4:	lsr	r3, r3, #5
   3f8f8:	add	r2, r1, r3
   3f8fc:	add	r2, r2, #1
   3f900:	mov	r0, #58	; 0x3a
   3f904:	str	r2, [r4, #20]
   3f908:	strb	r0, [r1, r3]
   3f90c:	ldr	r3, [r4, #20]
   3f910:	mov	r2, #32
   3f914:	strb	r2, [r3]
   3f918:	ldrb	r2, [r4, #25]
   3f91c:	ldr	r3, [r8, #12]
   3f920:	ldr	r0, [r4, #20]
   3f924:	adds	r2, r2, #0
   3f928:	movne	r2, #1
   3f92c:	add	r1, r0, r2
   3f930:	subs	r3, r3, #1
   3f934:	str	r1, [r4, #20]
   3f938:	bne	3f970 <flatcc_json_printer_table_field@@Base+0x1cc>
   3f93c:	ldr	r3, [r4, #36]	; 0x24
   3f940:	cmp	r3, #0
   3f944:	moveq	r3, #2
   3f948:	streq	r3, [r4, #36]	; 0x24
   3f94c:	add	sp, sp, #36	; 0x24
   3f950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f954:	mov	r2, r9
   3f958:	mov	r1, r6
   3f95c:	bl	1454c <memcpy@plt>
   3f960:	ldr	r7, [r4, #20]
   3f964:	add	r9, r7, r9
   3f968:	str	r9, [r4, #20]
   3f96c:	b	3f8e0 <flatcc_json_printer_table_field@@Base+0x13c>
   3f970:	ldr	ip, [sp, #4]
   3f974:	add	r1, r1, #1
   3f978:	mov	r5, #123	; 0x7b
   3f97c:	ldr	lr, [ip, sl]
   3f980:	ldr	ip, [r4, #32]
   3f984:	str	r1, [r4, #20]
   3f988:	add	ip, ip, #1
   3f98c:	mov	r1, #0
   3f990:	str	ip, [r4, #32]
   3f994:	strb	r5, [r0, r2]
   3f998:	str	r1, [sp, #28]
   3f99c:	str	r3, [sp, #24]
   3f9a0:	ldr	r3, [fp, lr]
   3f9a4:	add	fp, fp, lr
   3f9a8:	sub	r3, fp, r3
   3f9ac:	add	r1, sp, #12
   3f9b0:	ldrh	r2, [r3]
   3f9b4:	mov	r0, r4
   3f9b8:	str	r3, [sp, #16]
   3f9bc:	ldr	r3, [sp, #76]	; 0x4c
   3f9c0:	str	r2, [sp, #20]
   3f9c4:	str	fp, [sp, #12]
   3f9c8:	blx	r3
   3f9cc:	ldrb	r3, [r4, #25]
   3f9d0:	cmp	r3, #0
   3f9d4:	bne	3f9f4 <flatcc_json_printer_table_field@@Base+0x250>
   3f9d8:	ldr	r3, [r4, #20]
   3f9dc:	mov	r2, #125	; 0x7d
   3f9e0:	add	r1, r3, #1
   3f9e4:	str	r1, [r4, #20]
   3f9e8:	strb	r2, [r3]
   3f9ec:	add	sp, sp, #36	; 0x24
   3f9f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f9f4:	ldr	r3, [r4, #20]
   3f9f8:	mov	r2, #10
   3f9fc:	add	r1, r3, #1
   3fa00:	str	r1, [r4, #20]
   3fa04:	strb	r2, [r3]
   3fa08:	ldr	r3, [r4, #32]
   3fa0c:	mov	r0, r4
   3fa10:	sub	r3, r3, #1
   3fa14:	str	r3, [r4, #32]
   3fa18:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3fa1c:	b	3f9d8 <flatcc_json_printer_table_field@@Base+0x234>
   3fa20:	mov	r0, r4
   3fa24:	ldr	r3, [r4, #44]	; 0x2c
   3fa28:	mov	r1, #0
   3fa2c:	blx	r3
   3fa30:	ldr	r5, [r4, #16]
   3fa34:	ldr	r0, [r4, #20]
   3fa38:	b	3f874 <flatcc_json_printer_table_field@@Base+0xd0>
   3fa3c:	add	r1, r3, #1
   3fa40:	mov	r2, #10
   3fa44:	str	r1, [r0, #20]
   3fa48:	strb	r2, [r3]
   3fa4c:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3fa50:	ldr	r3, [r4, #20]
   3fa54:	b	3f840 <flatcc_json_printer_table_field@@Base+0x9c>

0003fa58 <flatcc_json_printer_union_field@@Base>:
   3fa58:	add	r2, r2, #1
   3fa5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fa60:	lsl	r2, r2, #1
   3fa64:	ldr	lr, [r1, #8]
   3fa68:	sub	sp, sp, #28
   3fa6c:	cmp	r2, lr
   3fa70:	movge	ip, #0
   3fa74:	bge	3fa8c <flatcc_json_printer_union_field@@Base+0x34>
   3fa78:	ldr	ip, [r1, #4]
   3fa7c:	ldrh	ip, [ip, r2]
   3fa80:	cmp	ip, #0
   3fa84:	ldrne	r4, [r1]
   3fa88:	addne	ip, r4, ip
   3fa8c:	add	r2, r2, #2
   3fa90:	cmp	r2, lr
   3fa94:	bge	3fcd8 <flatcc_json_printer_union_field@@Base+0x280>
   3fa98:	ldr	lr, [r1, #4]
   3fa9c:	ldrh	r2, [lr, r2]
   3faa0:	cmp	r2, #0
   3faa4:	beq	3fcd8 <flatcc_json_printer_union_field@@Base+0x280>
   3faa8:	ldr	fp, [r1]
   3faac:	adds	r2, fp, r2
   3fab0:	str	r2, [sp, #4]
   3fab4:	moveq	r2, #1
   3fab8:	movne	r2, #0
   3fabc:	cmp	ip, #0
   3fac0:	orreq	r2, r2, #1
   3fac4:	cmp	r2, #0
   3fac8:	bne	3fcd8 <flatcc_json_printer_union_field@@Base+0x280>
   3facc:	ldr	r2, [r1, #16]
   3fad0:	ldrb	sl, [ip]
   3fad4:	cmp	r2, #0
   3fad8:	add	r2, r2, #1
   3fadc:	str	r2, [r1, #16]
   3fae0:	ldrne	r2, [r0, #20]
   3fae4:	movne	ip, #44	; 0x2c
   3fae8:	addne	lr, r2, #1
   3faec:	strne	lr, [r0, #20]
   3faf0:	mov	r7, r1
   3faf4:	strbne	ip, [r2]
   3faf8:	ldrb	r1, [r0, #25]
   3fafc:	mov	r8, r3
   3fb00:	mov	r4, r0
   3fb04:	cmp	r1, #0
   3fb08:	ldr	r3, [r0, #20]
   3fb0c:	bne	3fd7c <flatcc_json_printer_union_field@@Base+0x324>
   3fb10:	ldr	r2, [r0, #16]
   3fb14:	cmp	r3, r2
   3fb18:	bcs	3fd98 <flatcc_json_printer_union_field@@Base+0x340>
   3fb1c:	mov	r2, #34	; 0x22
   3fb20:	strb	r2, [r3]
   3fb24:	ldrb	r3, [r4, #26]
   3fb28:	ldr	r0, [r4, #20]
   3fb2c:	ldr	r5, [r4, #16]
   3fb30:	cmp	r3, #0
   3fb34:	addeq	r0, r0, #1
   3fb38:	ldr	r3, [sp, #64]	; 0x40
   3fb3c:	str	r0, [r4, #20]
   3fb40:	add	r3, r0, r3
   3fb44:	cmp	r5, r3
   3fb48:	bhi	3fbd0 <flatcc_json_printer_union_field@@Base+0x178>
   3fb4c:	cmp	r0, r5
   3fb50:	bcs	3fdc4 <flatcc_json_printer_union_field@@Base+0x36c>
   3fb54:	ldr	r3, [sp, #64]	; 0x40
   3fb58:	sub	r5, r5, r0
   3fb5c:	cmp	r3, r5
   3fb60:	mov	r6, r3
   3fb64:	mov	fp, r8
   3fb68:	bls	3fbb4 <flatcc_json_printer_union_field@@Base+0x15c>
   3fb6c:	mov	r9, #0
   3fb70:	mov	r2, r5
   3fb74:	mov	r1, fp
   3fb78:	bl	1454c <memcpy@plt>
   3fb7c:	ldr	r1, [r4, #20]
   3fb80:	ldr	r2, [r4, #44]	; 0x2c
   3fb84:	add	r1, r1, r5
   3fb88:	str	r1, [r4, #20]
   3fb8c:	mov	r0, r4
   3fb90:	mov	r1, r9
   3fb94:	blx	r2
   3fb98:	ldr	r0, [r4, #20]
   3fb9c:	ldr	r2, [r4, #16]
   3fba0:	sub	r6, r6, r5
   3fba4:	add	fp, fp, r5
   3fba8:	sub	r5, r2, r0
   3fbac:	cmp	r6, r5
   3fbb0:	bhi	3fb70 <flatcc_json_printer_union_field@@Base+0x118>
   3fbb4:	mov	r2, r6
   3fbb8:	mov	r1, fp
   3fbbc:	bl	1454c <memcpy@plt>
   3fbc0:	ldr	r2, [r4, #20]
   3fbc4:	add	r2, r2, r6
   3fbc8:	str	r2, [r4, #20]
   3fbcc:	b	3fbec <flatcc_json_printer_union_field@@Base+0x194>
   3fbd0:	ldr	r2, [sp, #64]	; 0x40
   3fbd4:	mov	r1, r8
   3fbd8:	bl	1454c <memcpy@plt>
   3fbdc:	ldr	r2, [r4, #20]
   3fbe0:	ldr	r3, [sp, #64]	; 0x40
   3fbe4:	add	r2, r2, r3
   3fbe8:	str	r2, [r4, #20]
   3fbec:	ldr	r5, [r4, #16]
   3fbf0:	add	r3, r2, #5
   3fbf4:	cmp	r5, r3
   3fbf8:	bls	3fcf4 <flatcc_json_printer_union_field@@Base+0x29c>
   3fbfc:	ldr	r3, [pc, #476]	; 3fde0 <flatcc_json_printer_union_field@@Base+0x388>
   3fc00:	ldrb	r1, [r3, #4]
   3fc04:	ldr	r0, [r3]
   3fc08:	strb	r1, [r2, #4]
   3fc0c:	str	r0, [r2]
   3fc10:	ldr	r6, [r4, #20]
   3fc14:	add	r6, r6, #5
   3fc18:	str	r6, [r4, #20]
   3fc1c:	mov	r3, #34	; 0x22
   3fc20:	strb	r3, [r6]
   3fc24:	ldr	r1, [r4, #20]
   3fc28:	ldrb	r3, [r4, #26]
   3fc2c:	clz	r3, r3
   3fc30:	lsr	r3, r3, #5
   3fc34:	add	r2, r1, r3
   3fc38:	add	r2, r2, #1
   3fc3c:	mov	r0, #58	; 0x3a
   3fc40:	str	r2, [r4, #20]
   3fc44:	strb	r0, [r1, r3]
   3fc48:	ldr	r3, [r4, #20]
   3fc4c:	mov	r2, #32
   3fc50:	strb	r2, [r3]
   3fc54:	ldrb	r2, [r4, #25]
   3fc58:	ldrb	r3, [r4, #27]
   3fc5c:	ldr	r1, [r4, #20]
   3fc60:	cmp	r2, #0
   3fc64:	addne	r1, r1, #1
   3fc68:	cmp	r3, #0
   3fc6c:	str	r1, [r4, #20]
   3fc70:	beq	3fce0 <flatcc_json_printer_union_field@@Base+0x288>
   3fc74:	mov	r0, sl
   3fc78:	bl	3491c <flatcc_json_parser_struct_as_root@@Base+0xe20>
   3fc7c:	ldr	r3, [r4, #20]
   3fc80:	add	r0, r3, r0
   3fc84:	str	r0, [r4, #20]
   3fc88:	cmp	sl, #0
   3fc8c:	beq	3fcd8 <flatcc_json_printer_union_field@@Base+0x280>
   3fc90:	ldr	r3, [r4, #20]
   3fc94:	mov	r2, #44	; 0x2c
   3fc98:	add	r0, r3, #1
   3fc9c:	str	r0, [r4, #20]
   3fca0:	mov	r1, r8
   3fca4:	strb	r2, [r3]
   3fca8:	mov	r0, r4
   3fcac:	ldr	r2, [sp, #64]	; 0x40
   3fcb0:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   3fcb4:	ldr	r3, [r7, #12]
   3fcb8:	add	r1, sp, #24
   3fcbc:	ldr	r2, [sp, #4]
   3fcc0:	str	r3, [sp, #16]
   3fcc4:	mov	r0, r4
   3fcc8:	str	r2, [r1, #-12]!
   3fccc:	ldr	r3, [sp, #72]	; 0x48
   3fcd0:	strb	sl, [sp, #20]
   3fcd4:	blx	r3
   3fcd8:	add	sp, sp, #28
   3fcdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fce0:	mov	r1, sl
   3fce4:	mov	r0, r4
   3fce8:	ldr	r3, [sp, #68]	; 0x44
   3fcec:	blx	r3
   3fcf0:	b	3fc88 <flatcc_json_printer_union_field@@Base+0x230>
   3fcf4:	cmp	r5, r2
   3fcf8:	bls	3fda8 <flatcc_json_printer_union_field@@Base+0x350>
   3fcfc:	sub	r5, r5, r2
   3fd00:	cmp	r5, #4
   3fd04:	ldr	fp, [pc, #212]	; 3fde0 <flatcc_json_printer_union_field@@Base+0x388>
   3fd08:	mov	r6, #5
   3fd0c:	bhi	3fd5c <flatcc_json_printer_union_field@@Base+0x304>
   3fd10:	mov	r9, #0
   3fd14:	mov	r1, fp
   3fd18:	mov	r0, r2
   3fd1c:	mov	r2, r5
   3fd20:	bl	1454c <memcpy@plt>
   3fd24:	ldr	r1, [r4, #20]
   3fd28:	ldr	r2, [r4, #44]	; 0x2c
   3fd2c:	add	r1, r1, r5
   3fd30:	str	r1, [r4, #20]
   3fd34:	mov	r0, r4
   3fd38:	mov	r1, r9
   3fd3c:	blx	r2
   3fd40:	ldr	r2, [r4, #20]
   3fd44:	ldr	r1, [r4, #16]
   3fd48:	sub	r6, r6, r5
   3fd4c:	add	fp, fp, r5
   3fd50:	sub	r5, r1, r2
   3fd54:	cmp	r6, r5
   3fd58:	bhi	3fd14 <flatcc_json_printer_union_field@@Base+0x2bc>
   3fd5c:	mov	r0, r2
   3fd60:	mov	r1, fp
   3fd64:	mov	r2, r6
   3fd68:	bl	1454c <memcpy@plt>
   3fd6c:	ldr	r3, [r4, #20]
   3fd70:	add	r6, r3, r6
   3fd74:	str	r6, [r4, #20]
   3fd78:	b	3fc1c <flatcc_json_printer_union_field@@Base+0x1c4>
   3fd7c:	add	r1, r3, #1
   3fd80:	mov	r2, #10
   3fd84:	str	r1, [r0, #20]
   3fd88:	strb	r2, [r3]
   3fd8c:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3fd90:	ldr	r3, [r4, #20]
   3fd94:	b	3fb1c <flatcc_json_printer_union_field@@Base+0xc4>
   3fd98:	ldr	r3, [r0, #44]	; 0x2c
   3fd9c:	blx	r3
   3fda0:	ldr	r3, [r4, #20]
   3fda4:	b	3fb1c <flatcc_json_printer_union_field@@Base+0xc4>
   3fda8:	ldr	r3, [r4, #44]	; 0x2c
   3fdac:	mov	r1, #0
   3fdb0:	mov	r0, r4
   3fdb4:	blx	r3
   3fdb8:	ldr	r5, [r4, #16]
   3fdbc:	ldr	r2, [r4, #20]
   3fdc0:	b	3fcfc <flatcc_json_printer_union_field@@Base+0x2a4>
   3fdc4:	mov	r0, r4
   3fdc8:	ldr	r3, [r4, #44]	; 0x2c
   3fdcc:	mov	r1, #0
   3fdd0:	blx	r3
   3fdd4:	ldr	r5, [r4, #16]
   3fdd8:	ldr	r0, [r4, #20]
   3fddc:	b	3fb54 <flatcc_json_printer_union_field@@Base+0xfc>
   3fde0:	muleq	r4, ip, sp

0003fde4 <flatcc_json_printer_union_table@@Base>:
   3fde4:	ldr	r3, [r1, #4]
   3fde8:	push	{r4, r5, r6, r7, lr}
   3fdec:	subs	r3, r3, #1
   3fdf0:	sub	sp, sp, #28
   3fdf4:	mov	r4, r0
   3fdf8:	bne	3fe14 <flatcc_json_printer_union_table@@Base+0x30>
   3fdfc:	ldr	r3, [r0, #36]	; 0x24
   3fe00:	cmp	r3, #0
   3fe04:	moveq	r3, #2
   3fe08:	streq	r3, [r0, #36]	; 0x24
   3fe0c:	add	sp, sp, #28
   3fe10:	pop	{r4, r5, r6, r7, pc}
   3fe14:	ldr	r1, [r1]
   3fe18:	ldr	ip, [r0, #32]
   3fe1c:	ldr	r5, [r0, #20]
   3fe20:	ldr	lr, [r1]
   3fe24:	add	ip, ip, #1
   3fe28:	str	ip, [r0, #32]
   3fe2c:	add	r7, r5, #1
   3fe30:	mov	ip, #0
   3fe34:	mov	r6, #123	; 0x7b
   3fe38:	str	r7, [r0, #20]
   3fe3c:	strb	r6, [r5]
   3fe40:	str	r3, [sp, #16]
   3fe44:	str	ip, [sp, #20]
   3fe48:	ldr	ip, [r1, lr]
   3fe4c:	add	r3, r1, lr
   3fe50:	sub	ip, r3, ip
   3fe54:	add	r1, sp, #4
   3fe58:	ldrh	lr, [ip]
   3fe5c:	stmib	sp, {r3, ip, lr}
   3fe60:	blx	r2
   3fe64:	ldrb	r3, [r4, #25]
   3fe68:	cmp	r3, #0
   3fe6c:	bne	3fe8c <flatcc_json_printer_union_table@@Base+0xa8>
   3fe70:	ldr	r3, [r4, #20]
   3fe74:	mov	r2, #125	; 0x7d
   3fe78:	add	r1, r3, #1
   3fe7c:	str	r1, [r4, #20]
   3fe80:	strb	r2, [r3]
   3fe84:	add	sp, sp, #28
   3fe88:	pop	{r4, r5, r6, r7, pc}
   3fe8c:	ldr	r3, [r4, #20]
   3fe90:	mov	r2, #10
   3fe94:	add	r1, r3, #1
   3fe98:	str	r1, [r4, #20]
   3fe9c:	strb	r2, [r3]
   3fea0:	ldr	r3, [r4, #32]
   3fea4:	mov	r0, r4
   3fea8:	sub	r3, r3, #1
   3feac:	str	r3, [r4, #32]
   3feb0:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   3feb4:	b	3fe70 <flatcc_json_printer_union_table@@Base+0x8c>

0003feb8 <flatcc_json_printer_union_struct@@Base>:
   3feb8:	ldr	r3, [r0, #32]
   3febc:	ldr	ip, [r0, #20]
   3fec0:	push	{r4, r5, r6, r7, r8, lr}
   3fec4:	add	r3, r3, #1
   3fec8:	mov	lr, #123	; 0x7b
   3fecc:	add	r5, ip, #1
   3fed0:	str	r3, [r0, #32]
   3fed4:	str	r5, [r0, #20]
   3fed8:	strb	lr, [ip]
   3fedc:	ldr	r3, [r1]
   3fee0:	mov	r4, r0
   3fee4:	ldr	r1, [r3]
   3fee8:	add	r1, r3, r1
   3feec:	blx	r2
   3fef0:	ldrb	r3, [r4, #25]
   3fef4:	cmp	r3, #0
   3fef8:	bne	3ff14 <flatcc_json_printer_union_struct@@Base+0x5c>
   3fefc:	ldr	r5, [r4, #20]
   3ff00:	add	r2, r5, #1
   3ff04:	mov	r3, #125	; 0x7d
   3ff08:	str	r2, [r4, #20]
   3ff0c:	strb	r3, [r5]
   3ff10:	pop	{r4, r5, r6, r7, r8, pc}
   3ff14:	ldr	r3, [r4, #20]
   3ff18:	mov	r2, #10
   3ff1c:	add	r1, r3, #1
   3ff20:	str	r1, [r4, #20]
   3ff24:	strb	r2, [r3]
   3ff28:	ldr	r3, [r4, #32]
   3ff2c:	ldrb	r5, [r4, #25]
   3ff30:	sub	r3, r3, #1
   3ff34:	ldr	r0, [r4, #20]
   3ff38:	ldr	r6, [r4, #16]
   3ff3c:	mul	r5, r3, r5
   3ff40:	str	r3, [r4, #32]
   3ff44:	add	r3, r0, r5
   3ff48:	cmp	r6, r3
   3ff4c:	bcc	3ff68 <flatcc_json_printer_union_struct@@Base+0xb0>
   3ff50:	mov	r2, r5
   3ff54:	mov	r1, #32
   3ff58:	bl	145c4 <memset@plt>
   3ff5c:	ldr	r3, [r4, #20]
   3ff60:	add	r5, r3, r5
   3ff64:	b	3ff00 <flatcc_json_printer_union_struct@@Base+0x48>
   3ff68:	cmp	r0, r6
   3ff6c:	bcs	3ffc8 <flatcc_json_printer_union_struct@@Base+0x110>
   3ff70:	sub	r6, r6, r0
   3ff74:	cmp	r5, r6
   3ff78:	bls	3ff50 <flatcc_json_printer_union_struct@@Base+0x98>
   3ff7c:	mov	r8, #32
   3ff80:	mov	r7, #0
   3ff84:	mov	r2, r6
   3ff88:	mov	r1, r8
   3ff8c:	bl	145c4 <memset@plt>
   3ff90:	ldr	r3, [r4, #20]
   3ff94:	mov	r0, r4
   3ff98:	add	r3, r3, r6
   3ff9c:	str	r3, [r4, #20]
   3ffa0:	ldr	r2, [r4, #44]	; 0x2c
   3ffa4:	mov	r1, r7
   3ffa8:	blx	r2
   3ffac:	ldr	r0, [r4, #20]
   3ffb0:	ldr	r3, [r4, #16]
   3ffb4:	sub	r5, r5, r6
   3ffb8:	sub	r6, r3, r0
   3ffbc:	cmp	r5, r6
   3ffc0:	bhi	3ff84 <flatcc_json_printer_union_struct@@Base+0xcc>
   3ffc4:	b	3ff50 <flatcc_json_printer_union_struct@@Base+0x98>
   3ffc8:	mov	r0, r4
   3ffcc:	ldr	r3, [r4, #44]	; 0x2c
   3ffd0:	mov	r1, #0
   3ffd4:	blx	r3
   3ffd8:	ldr	r6, [r4, #16]
   3ffdc:	ldr	r0, [r4, #20]
   3ffe0:	b	3ff70 <flatcc_json_printer_union_struct@@Base+0xb8>

0003ffe4 <flatcc_json_printer_union_string@@Base>:
   3ffe4:	ldr	r3, [r1]
   3ffe8:	ldr	r2, [r3]
   3ffec:	add	r1, r3, r2
   3fff0:	add	r1, r1, #4
   3fff4:	ldr	r2, [r3, r2]
   3fff8:	b	349f0 <flatcc_json_parser_struct_as_root@@Base+0xef4>

0003fffc <flatcc_json_printer_embedded_struct_field@@Base>:
   3fffc:	cmp	r1, #0
   40000:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40004:	mov	r9, r3
   40008:	ldrne	r3, [r0, #20]
   4000c:	add	r6, sp, #40	; 0x28
   40010:	addne	r1, r3, #1
   40014:	mov	sl, r2
   40018:	movne	r2, #44	; 0x2c
   4001c:	strne	r1, [r0, #20]
   40020:	ldm	r6, {r6, r7, r8}
   40024:	mov	r4, r0
   40028:	strbne	r2, [r3]
   4002c:	ldrb	r1, [r0, #25]
   40030:	mov	fp, r7
   40034:	ldr	r3, [r0, #20]
   40038:	cmp	r1, #0
   4003c:	bne	40204 <flatcc_json_printer_embedded_struct_field@@Base+0x208>
   40040:	ldr	r2, [r0, #16]
   40044:	cmp	r3, r2
   40048:	bcs	40184 <flatcc_json_printer_embedded_struct_field@@Base+0x188>
   4004c:	mov	r2, #34	; 0x22
   40050:	strb	r2, [r3]
   40054:	ldrb	r3, [r4, #26]
   40058:	ldr	r0, [r4, #20]
   4005c:	ldr	r5, [r4, #16]
   40060:	cmp	r3, #0
   40064:	addeq	r0, r0, #1
   40068:	add	r3, r0, r7
   4006c:	cmp	r5, r3
   40070:	str	r0, [r4, #20]
   40074:	bhi	40194 <flatcc_json_printer_embedded_struct_field@@Base+0x198>
   40078:	cmp	r0, r5
   4007c:	bcs	40220 <flatcc_json_printer_embedded_struct_field@@Base+0x224>
   40080:	sub	r5, r5, r0
   40084:	cmp	r7, r5
   40088:	bls	400d4 <flatcc_json_printer_embedded_struct_field@@Base+0xd8>
   4008c:	mov	r7, #0
   40090:	mov	r2, r5
   40094:	mov	r1, r6
   40098:	bl	1454c <memcpy@plt>
   4009c:	ldr	r3, [r4, #20]
   400a0:	mov	r0, r4
   400a4:	add	r3, r3, r5
   400a8:	str	r3, [r4, #20]
   400ac:	ldr	r2, [r4, #44]	; 0x2c
   400b0:	mov	r1, r7
   400b4:	blx	r2
   400b8:	ldr	r0, [r4, #20]
   400bc:	ldr	r3, [r4, #16]
   400c0:	sub	fp, fp, r5
   400c4:	add	r6, r6, r5
   400c8:	sub	r5, r3, r0
   400cc:	cmp	fp, r5
   400d0:	bhi	40090 <flatcc_json_printer_embedded_struct_field@@Base+0x94>
   400d4:	mov	r1, r6
   400d8:	mov	r2, fp
   400dc:	bl	1454c <memcpy@plt>
   400e0:	ldr	r7, [r4, #20]
   400e4:	add	r7, r7, fp
   400e8:	str	r7, [r4, #20]
   400ec:	mov	r3, #34	; 0x22
   400f0:	strb	r3, [r7]
   400f4:	ldr	r1, [r4, #20]
   400f8:	ldrb	r3, [r4, #26]
   400fc:	clz	r3, r3
   40100:	lsr	r3, r3, #5
   40104:	add	r2, r1, r3
   40108:	add	r2, r2, #1
   4010c:	mov	r0, #58	; 0x3a
   40110:	str	r2, [r4, #20]
   40114:	strb	r0, [r1, r3]
   40118:	ldr	r3, [r4, #20]
   4011c:	mov	r7, #32
   40120:	add	r1, sl, r9
   40124:	strb	r7, [r3]
   40128:	ldrb	r3, [r4, #25]
   4012c:	ldr	ip, [r4, #20]
   40130:	ldr	r2, [r4, #32]
   40134:	adds	r3, r3, #0
   40138:	movne	r3, #1
   4013c:	add	r0, ip, r3
   40140:	add	r0, r0, #1
   40144:	str	r0, [r4, #20]
   40148:	add	r2, r2, #1
   4014c:	mov	r0, #123	; 0x7b
   40150:	str	r2, [r4, #32]
   40154:	strb	r0, [ip, r3]
   40158:	mov	r0, r4
   4015c:	blx	r8
   40160:	ldrb	r3, [r4, #25]
   40164:	cmp	r3, #0
   40168:	bne	401b0 <flatcc_json_printer_embedded_struct_field@@Base+0x1b4>
   4016c:	ldr	r5, [r4, #20]
   40170:	add	r2, r5, #1
   40174:	mov	r3, #125	; 0x7d
   40178:	str	r2, [r4, #20]
   4017c:	strb	r3, [r5]
   40180:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40184:	ldr	r3, [r0, #44]	; 0x2c
   40188:	blx	r3
   4018c:	ldr	r3, [r4, #20]
   40190:	b	4004c <flatcc_json_printer_embedded_struct_field@@Base+0x50>
   40194:	mov	r2, r7
   40198:	mov	r1, r6
   4019c:	bl	1454c <memcpy@plt>
   401a0:	ldr	fp, [r4, #20]
   401a4:	add	r7, fp, r7
   401a8:	str	r7, [r4, #20]
   401ac:	b	400ec <flatcc_json_printer_embedded_struct_field@@Base+0xf0>
   401b0:	ldr	r3, [r4, #20]
   401b4:	mov	r2, #10
   401b8:	add	r1, r3, #1
   401bc:	str	r1, [r4, #20]
   401c0:	strb	r2, [r3]
   401c4:	ldr	r3, [r4, #32]
   401c8:	ldrb	r5, [r4, #25]
   401cc:	sub	r3, r3, #1
   401d0:	ldr	r0, [r4, #20]
   401d4:	ldr	r6, [r4, #16]
   401d8:	mul	r5, r3, r5
   401dc:	str	r3, [r4, #32]
   401e0:	add	r3, r0, r5
   401e4:	cmp	r6, r3
   401e8:	bcc	4023c <flatcc_json_printer_embedded_struct_field@@Base+0x240>
   401ec:	mov	r2, r5
   401f0:	mov	r1, r7
   401f4:	bl	145c4 <memset@plt>
   401f8:	ldr	r3, [r4, #20]
   401fc:	add	r5, r3, r5
   40200:	b	40170 <flatcc_json_printer_embedded_struct_field@@Base+0x174>
   40204:	add	r1, r3, #1
   40208:	mov	r2, #10
   4020c:	str	r1, [r0, #20]
   40210:	strb	r2, [r3]
   40214:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   40218:	ldr	r3, [r4, #20]
   4021c:	b	4004c <flatcc_json_printer_embedded_struct_field@@Base+0x50>
   40220:	mov	r0, r4
   40224:	ldr	r3, [r4, #44]	; 0x2c
   40228:	mov	r1, #0
   4022c:	blx	r3
   40230:	ldr	r5, [r4, #16]
   40234:	ldr	r0, [r4, #20]
   40238:	b	40080 <flatcc_json_printer_embedded_struct_field@@Base+0x84>
   4023c:	cmp	r0, r6
   40240:	bcs	402b0 <flatcc_json_printer_embedded_struct_field@@Base+0x2b4>
   40244:	sub	r6, r6, r0
   40248:	cmp	r5, r6
   4024c:	bls	40298 <flatcc_json_printer_embedded_struct_field@@Base+0x29c>
   40250:	mov	r8, #32
   40254:	mov	r7, #0
   40258:	mov	r2, r6
   4025c:	mov	r1, r8
   40260:	bl	145c4 <memset@plt>
   40264:	ldr	r3, [r4, #20]
   40268:	mov	r0, r4
   4026c:	add	r3, r3, r6
   40270:	str	r3, [r4, #20]
   40274:	ldr	r2, [r4, #44]	; 0x2c
   40278:	mov	r1, r7
   4027c:	blx	r2
   40280:	ldr	r0, [r4, #20]
   40284:	ldr	r3, [r4, #16]
   40288:	sub	r5, r5, r6
   4028c:	sub	r6, r3, r0
   40290:	cmp	r5, r6
   40294:	bhi	40258 <flatcc_json_printer_embedded_struct_field@@Base+0x25c>
   40298:	mov	r2, r5
   4029c:	mov	r1, #32
   402a0:	bl	145c4 <memset@plt>
   402a4:	ldr	r3, [r4, #20]
   402a8:	add	r5, r3, r5
   402ac:	b	40170 <flatcc_json_printer_embedded_struct_field@@Base+0x174>
   402b0:	mov	r0, r4
   402b4:	ldr	r3, [r4, #44]	; 0x2c
   402b8:	mov	r1, #0
   402bc:	blx	r3
   402c0:	ldr	r6, [r4, #16]
   402c4:	ldr	r0, [r4, #20]
   402c8:	b	40244 <flatcc_json_printer_embedded_struct_field@@Base+0x248>

000402cc <flatcc_json_printer_struct_field@@Base>:
   402cc:	add	r2, r2, #2
   402d0:	ldr	ip, [r1, #8]
   402d4:	lsl	r2, r2, #1
   402d8:	cmp	r2, ip
   402dc:	bxge	lr
   402e0:	ldr	ip, [r1, #4]
   402e4:	ldrh	r2, [ip, r2]
   402e8:	cmp	r2, #0
   402ec:	bxeq	lr
   402f0:	push	{r4, r5, r6, lr}
   402f4:	ldr	r5, [r1]
   402f8:	adds	r5, r5, r2
   402fc:	popeq	{r4, r5, r6, pc}
   40300:	ldr	r2, [r1, #16]
   40304:	mov	r4, r0
   40308:	cmp	r2, #0
   4030c:	add	r2, r2, #1
   40310:	str	r2, [r1, #16]
   40314:	ldrne	r2, [r0, #20]
   40318:	movne	r1, #44	; 0x2c
   4031c:	addne	ip, r2, #1
   40320:	strne	ip, [r0, #20]
   40324:	strbne	r1, [r2]
   40328:	mov	r1, r3
   4032c:	ldr	r2, [sp, #16]
   40330:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   40334:	ldr	r3, [r4, #32]
   40338:	ldr	r2, [r4, #20]
   4033c:	add	r3, r3, #1
   40340:	add	r0, r2, #1
   40344:	mov	ip, #123	; 0x7b
   40348:	str	r3, [r4, #32]
   4034c:	str	r0, [r4, #20]
   40350:	ldr	r3, [sp, #20]
   40354:	mov	r1, r5
   40358:	mov	r0, r4
   4035c:	strb	ip, [r2]
   40360:	blx	r3
   40364:	ldrb	r3, [r4, #25]
   40368:	cmp	r3, #0
   4036c:	bne	40388 <flatcc_json_printer_struct_field@@Base+0xbc>
   40370:	ldr	r3, [r4, #20]
   40374:	mov	r2, #125	; 0x7d
   40378:	add	r1, r3, #1
   4037c:	str	r1, [r4, #20]
   40380:	strb	r2, [r3]
   40384:	pop	{r4, r5, r6, pc}
   40388:	ldr	r3, [r4, #20]
   4038c:	mov	r2, #10
   40390:	add	r1, r3, #1
   40394:	str	r1, [r4, #20]
   40398:	strb	r2, [r3]
   4039c:	ldr	r3, [r4, #32]
   403a0:	mov	r0, r4
   403a4:	sub	r3, r3, #1
   403a8:	str	r3, [r4, #32]
   403ac:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   403b0:	b	40370 <flatcc_json_printer_struct_field@@Base+0xa4>

000403b4 <flatcc_json_printer_struct_as_root@@Base>:
   403b4:	push	{r4, r5, lr}
   403b8:	sub	sp, sp, #12
   403bc:	cmp	r1, #0
   403c0:	cmpne	r2, #7
   403c4:	mov	r2, #0
   403c8:	mov	r4, r0
   403cc:	str	r2, [sp, #4]
   403d0:	bls	404e4 <flatcc_json_printer_struct_as_root@@Base+0x130>
   403d4:	cmp	r3, #0
   403d8:	mov	r5, r1
   403dc:	beq	40404 <flatcc_json_printer_struct_as_root@@Base+0x50>
   403e0:	mov	r2, #4
   403e4:	mov	r1, r3
   403e8:	add	r0, sp, r2
   403ec:	bl	145d0 <strncpy@plt>
   403f0:	ldr	r3, [sp, #4]
   403f4:	ldr	r2, [r5, #4]
   403f8:	cmp	r2, r3
   403fc:	cmpne	r3, #0
   40400:	bne	40508 <flatcc_json_printer_struct_as_root@@Base+0x154>
   40404:	ldr	r3, [r4, #32]
   40408:	ldr	r2, [r4, #20]
   4040c:	add	r3, r3, #1
   40410:	add	r0, r2, #1
   40414:	mov	r1, #123	; 0x7b
   40418:	str	r3, [r4, #32]
   4041c:	str	r0, [r4, #20]
   40420:	strb	r1, [r2]
   40424:	ldr	r1, [r5]
   40428:	ldr	r3, [sp, #24]
   4042c:	mov	r0, r4
   40430:	add	r1, r5, r1
   40434:	blx	r3
   40438:	ldrb	r3, [r4, #25]
   4043c:	cmp	r3, #0
   40440:	bne	404b8 <flatcc_json_printer_struct_as_root@@Base+0x104>
   40444:	ldr	r3, [r4, #20]
   40448:	mov	r2, #125	; 0x7d
   4044c:	add	r1, r3, #1
   40450:	str	r1, [r4, #20]
   40454:	strb	r2, [r3]
   40458:	ldrb	r3, [r4, #25]
   4045c:	cmp	r3, #0
   40460:	beq	40480 <flatcc_json_printer_struct_as_root@@Base+0xcc>
   40464:	ldr	r3, [r4, #32]
   40468:	cmp	r3, #0
   4046c:	moveq	r2, #10
   40470:	ldreq	r3, [r4, #20]
   40474:	addeq	r1, r3, #1
   40478:	streq	r1, [r4, #20]
   4047c:	strbeq	r2, [r3]
   40480:	mov	r0, r4
   40484:	ldr	r3, [r4, #44]	; 0x2c
   40488:	mov	r1, #1
   4048c:	blx	r3
   40490:	ldr	r3, [r4, #36]	; 0x24
   40494:	cmp	r3, #0
   40498:	mvnne	r0, #0
   4049c:	ldreq	r0, [r4, #20]
   404a0:	ldreq	r2, [r4]
   404a4:	ldreq	r3, [r4, #12]
   404a8:	subeq	r0, r0, r2
   404ac:	addeq	r0, r0, r3
   404b0:	add	sp, sp, #12
   404b4:	pop	{r4, r5, pc}
   404b8:	ldr	r3, [r4, #20]
   404bc:	mov	r2, #10
   404c0:	add	r1, r3, #1
   404c4:	str	r1, [r4, #20]
   404c8:	strb	r2, [r3]
   404cc:	ldr	r3, [r4, #32]
   404d0:	mov	r0, r4
   404d4:	sub	r3, r3, #1
   404d8:	str	r3, [r4, #32]
   404dc:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   404e0:	b	40444 <flatcc_json_printer_struct_as_root@@Base+0x90>
   404e4:	ldr	r3, [r0, #36]	; 0x24
   404e8:	ldr	r1, [pc, #32]	; 40510 <flatcc_json_printer_struct_as_root@@Base+0x15c>
   404ec:	cmp	r3, r2
   404f0:	moveq	r3, #1
   404f4:	streq	r3, [r0, #36]	; 0x24
   404f8:	ldr	r2, [pc, #20]	; 40514 <flatcc_json_printer_struct_as_root@@Base+0x160>
   404fc:	ldr	r3, [pc, #20]	; 40518 <flatcc_json_printer_struct_as_root@@Base+0x164>
   40500:	ldr	r0, [pc, #20]	; 4051c <flatcc_json_printer_struct_as_root@@Base+0x168>
   40504:	bl	14618 <__assert_fail@plt>
   40508:	mov	r0, r4
   4050c:	bl	14900 <__assert_fail@plt+0x2e8>
   40510:	andeq	r6, r4, ip, ror #23
   40514:	strdeq	r0, [r0], -fp
   40518:	andeq	r6, r4, r8, ror r5
   4051c:	andeq	r6, r4, r4, lsr #27

00040520 <flatcc_json_printer_table_as_root@@Base>:
   40520:	push	{r4, r5, r6, lr}
   40524:	sub	sp, sp, #24
   40528:	cmp	r1, #0
   4052c:	cmpne	r2, #7
   40530:	mov	r2, #0
   40534:	mov	r4, r0
   40538:	str	r2, [sp, #4]
   4053c:	bls	40680 <flatcc_json_printer_table_as_root@@Base+0x160>
   40540:	cmp	r3, #0
   40544:	mov	r5, r1
   40548:	add	r6, sp, #4
   4054c:	beq	40574 <flatcc_json_printer_table_as_root@@Base+0x54>
   40550:	mov	r1, r3
   40554:	mov	r2, #4
   40558:	mov	r0, r6
   4055c:	bl	145d0 <strncpy@plt>
   40560:	ldr	r3, [sp, #4]
   40564:	ldr	r2, [r5, #4]
   40568:	cmp	r2, r3
   4056c:	cmpne	r3, #0
   40570:	bne	406a4 <flatcc_json_printer_table_as_root@@Base+0x184>
   40574:	ldr	r2, [r5]
   40578:	ldr	r1, [r4, #20]
   4057c:	ldr	r3, [r4, #32]
   40580:	add	ip, r1, #1
   40584:	add	r3, r3, #1
   40588:	mov	r0, #123	; 0x7b
   4058c:	str	r3, [r4, #32]
   40590:	str	ip, [r4, #20]
   40594:	strb	r0, [r1]
   40598:	ldr	r3, [r5, r2]
   4059c:	add	r5, r5, r2
   405a0:	sub	r3, r5, r3
   405a4:	mov	ip, #0
   405a8:	ldrh	lr, [r3]
   405ac:	mov	r2, #99	; 0x63
   405b0:	str	r3, [sp, #8]
   405b4:	mov	r1, r6
   405b8:	ldr	r3, [sp, #40]	; 0x28
   405bc:	mov	r0, r4
   405c0:	str	lr, [sp, #12]
   405c4:	str	r5, [sp, #4]
   405c8:	str	ip, [sp, #20]
   405cc:	str	r2, [sp, #16]
   405d0:	blx	r3
   405d4:	ldrb	r3, [r4, #25]
   405d8:	cmp	r3, #0
   405dc:	bne	40654 <flatcc_json_printer_table_as_root@@Base+0x134>
   405e0:	ldr	r3, [r4, #20]
   405e4:	mov	r2, #125	; 0x7d
   405e8:	add	r1, r3, #1
   405ec:	str	r1, [r4, #20]
   405f0:	strb	r2, [r3]
   405f4:	ldrb	r3, [r4, #25]
   405f8:	cmp	r3, #0
   405fc:	beq	4061c <flatcc_json_printer_table_as_root@@Base+0xfc>
   40600:	ldr	r3, [r4, #32]
   40604:	cmp	r3, #0
   40608:	moveq	r2, #10
   4060c:	ldreq	r3, [r4, #20]
   40610:	addeq	r1, r3, #1
   40614:	streq	r1, [r4, #20]
   40618:	strbeq	r2, [r3]
   4061c:	mov	r0, r4
   40620:	ldr	r3, [r4, #44]	; 0x2c
   40624:	mov	r1, #1
   40628:	blx	r3
   4062c:	ldr	r3, [r4, #36]	; 0x24
   40630:	cmp	r3, #0
   40634:	mvnne	r0, #0
   40638:	ldreq	r0, [r4, #20]
   4063c:	ldreq	r2, [r4]
   40640:	ldreq	r3, [r4, #12]
   40644:	subeq	r0, r0, r2
   40648:	addeq	r0, r0, r3
   4064c:	add	sp, sp, #24
   40650:	pop	{r4, r5, r6, pc}
   40654:	ldr	r3, [r4, #20]
   40658:	mov	r2, #10
   4065c:	add	r1, r3, #1
   40660:	str	r1, [r4, #20]
   40664:	strb	r2, [r3]
   40668:	ldr	r3, [r4, #32]
   4066c:	mov	r0, r4
   40670:	sub	r3, r3, #1
   40674:	str	r3, [r4, #32]
   40678:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   4067c:	b	405e0 <flatcc_json_printer_table_as_root@@Base+0xc0>
   40680:	ldr	r3, [r0, #36]	; 0x24
   40684:	ldr	r1, [pc, #32]	; 406ac <flatcc_json_printer_table_as_root@@Base+0x18c>
   40688:	cmp	r3, r2
   4068c:	moveq	r3, #1
   40690:	streq	r3, [r0, #36]	; 0x24
   40694:	ldr	r2, [pc, #20]	; 406b0 <flatcc_json_printer_table_as_root@@Base+0x190>
   40698:	ldr	r3, [pc, #20]	; 406b4 <flatcc_json_printer_table_as_root@@Base+0x194>
   4069c:	ldr	r0, [pc, #20]	; 406b8 <flatcc_json_printer_table_as_root@@Base+0x198>
   406a0:	bl	14618 <__assert_fail@plt>
   406a4:	mov	r0, r4
   406a8:	bl	14900 <__assert_fail@plt+0x2e8>
   406ac:	andeq	r6, r4, ip, ror #23
   406b0:	strdeq	r0, [r0], -fp
   406b4:	andeq	r6, r4, r8, ror r5
   406b8:	andeq	r6, r4, r4, lsr #27

000406bc <flatcc_json_printer_struct_as_nested_root@@Base>:
   406bc:	add	r2, r2, #2
   406c0:	ldr	ip, [r1, #8]
   406c4:	lsl	r2, r2, #1
   406c8:	cmp	r2, ip
   406cc:	bxge	lr
   406d0:	ldr	ip, [r1, #4]
   406d4:	ldrh	r2, [ip, r2]
   406d8:	cmp	r2, #0
   406dc:	bxeq	lr
   406e0:	ldr	ip, [r1]
   406e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   406e8:	adds	r8, ip, r2
   406ec:	sub	sp, sp, #12
   406f0:	beq	407d4 <flatcc_json_printer_struct_as_nested_root@@Base+0x118>
   406f4:	ldr	r7, [ip, r2]
   406f8:	mov	r6, r3
   406fc:	mov	r3, #0
   40700:	str	r3, [sp, #4]
   40704:	ldr	r3, [r8, r7]
   40708:	mov	r4, r0
   4070c:	cmp	r3, #7
   40710:	mov	r5, r1
   40714:	add	r9, r8, r7
   40718:	bls	40808 <flatcc_json_printer_struct_as_nested_root@@Base+0x14c>
   4071c:	ldr	r3, [sp, #44]	; 0x2c
   40720:	cmp	r3, #0
   40724:	beq	4074c <flatcc_json_printer_struct_as_nested_root@@Base+0x90>
   40728:	mov	r2, #4
   4072c:	mov	r1, r3
   40730:	add	r0, sp, r2
   40734:	bl	145d0 <strncpy@plt>
   40738:	ldr	r3, [sp, #4]
   4073c:	ldr	r2, [r9, #4]
   40740:	cmp	r2, r3
   40744:	cmpne	r3, #0
   40748:	bne	4082c <flatcc_json_printer_struct_as_nested_root@@Base+0x170>
   4074c:	ldr	r2, [r5, #16]
   40750:	mov	r0, r4
   40754:	cmp	r2, #0
   40758:	add	r2, r2, #1
   4075c:	ldrne	r3, [r4, #20]
   40760:	str	r2, [r5, #16]
   40764:	addne	r1, r3, #1
   40768:	movne	r2, #44	; 0x2c
   4076c:	strne	r1, [r4, #20]
   40770:	strbne	r2, [r3]
   40774:	mov	r1, r6
   40778:	ldr	r2, [sp, #40]	; 0x28
   4077c:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   40780:	ldr	r3, [r4, #32]
   40784:	ldr	r2, [r4, #20]
   40788:	add	r3, r3, #1
   4078c:	add	r0, r2, #1
   40790:	mov	r1, #123	; 0x7b
   40794:	str	r3, [r4, #32]
   40798:	str	r0, [r4, #20]
   4079c:	strb	r1, [r2]
   407a0:	ldr	r1, [r8, r7]
   407a4:	ldr	r3, [sp, #48]	; 0x30
   407a8:	mov	r0, r4
   407ac:	add	r1, r9, r1
   407b0:	blx	r3
   407b4:	ldrb	r3, [r4, #25]
   407b8:	cmp	r3, #0
   407bc:	bne	407dc <flatcc_json_printer_struct_as_nested_root@@Base+0x120>
   407c0:	ldr	r3, [r4, #20]
   407c4:	mov	r2, #125	; 0x7d
   407c8:	add	r1, r3, #1
   407cc:	str	r1, [r4, #20]
   407d0:	strb	r2, [r3]
   407d4:	add	sp, sp, #12
   407d8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   407dc:	ldr	r3, [r4, #20]
   407e0:	mov	r2, #10
   407e4:	add	r1, r3, #1
   407e8:	str	r1, [r4, #20]
   407ec:	strb	r2, [r3]
   407f0:	ldr	r3, [r4, #32]
   407f4:	mov	r0, r4
   407f8:	sub	r3, r3, #1
   407fc:	str	r3, [r4, #32]
   40800:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   40804:	b	407c0 <flatcc_json_printer_struct_as_nested_root@@Base+0x104>
   40808:	ldr	r3, [r0, #36]	; 0x24
   4080c:	ldr	r2, [pc, #32]	; 40834 <flatcc_json_printer_struct_as_nested_root@@Base+0x178>
   40810:	cmp	r3, #0
   40814:	moveq	r3, #1
   40818:	streq	r3, [r0, #36]	; 0x24
   4081c:	ldr	r1, [pc, #20]	; 40838 <flatcc_json_printer_struct_as_nested_root@@Base+0x17c>
   40820:	ldr	r3, [pc, #20]	; 4083c <flatcc_json_printer_struct_as_nested_root@@Base+0x180>
   40824:	ldr	r0, [pc, #20]	; 40840 <flatcc_json_printer_struct_as_nested_root@@Base+0x184>
   40828:	bl	14618 <__assert_fail@plt>
   4082c:	mov	r0, r4
   40830:	bl	14900 <__assert_fail@plt+0x2e8>
   40834:	strdeq	r0, [r0], -fp
   40838:	andeq	r6, r4, ip, ror #23
   4083c:	andeq	r6, r4, r8, ror r5
   40840:	andeq	r6, r4, r4, lsr #27

00040844 <flatcc_json_printer_table_as_nested_root@@Base>:
   40844:	add	r2, r2, #2
   40848:	ldr	ip, [r1, #8]
   4084c:	lsl	r2, r2, #1
   40850:	cmp	r2, ip
   40854:	bxge	lr
   40858:	ldr	ip, [r1, #4]
   4085c:	ldrh	r2, [ip, r2]
   40860:	cmp	r2, #0
   40864:	bxeq	lr
   40868:	push	{r4, r5, r6, r7, r8, lr}
   4086c:	sub	sp, sp, #24
   40870:	ldr	lr, [r1]
   40874:	adds	ip, lr, r2
   40878:	beq	4092c <flatcc_json_printer_table_as_nested_root@@Base+0xe8>
   4087c:	mov	r7, r3
   40880:	ldr	r3, [lr, r2]
   40884:	mov	r2, #0
   40888:	add	r6, ip, r3
   4088c:	ldr	r3, [ip, r3]
   40890:	mov	r5, r0
   40894:	cmn	r6, #4
   40898:	cmpne	r3, #7
   4089c:	mov	r4, r1
   408a0:	add	r8, r6, #4
   408a4:	str	r2, [sp, #4]
   408a8:	bls	409e4 <flatcc_json_printer_table_as_nested_root@@Base+0x1a0>
   408ac:	ldr	r3, [sp, #52]	; 0x34
   408b0:	cmp	r3, #0
   408b4:	beq	408dc <flatcc_json_printer_table_as_nested_root@@Base+0x98>
   408b8:	mov	r2, #4
   408bc:	mov	r1, r3
   408c0:	add	r0, sp, r2
   408c4:	bl	145d0 <strncpy@plt>
   408c8:	ldr	r3, [sp, #4]
   408cc:	ldr	r2, [r6, #8]
   408d0:	cmp	r2, r3
   408d4:	cmpne	r3, #0
   408d8:	bne	40a08 <flatcc_json_printer_table_as_nested_root@@Base+0x1c4>
   408dc:	ldr	r2, [r4, #16]
   408e0:	mov	r0, r5
   408e4:	cmp	r2, #0
   408e8:	add	r2, r2, #1
   408ec:	ldrne	r3, [r5, #20]
   408f0:	str	r2, [r4, #16]
   408f4:	addne	r1, r3, #1
   408f8:	movne	r2, #44	; 0x2c
   408fc:	strne	r1, [r5, #20]
   40900:	strbne	r2, [r3]
   40904:	mov	r1, r7
   40908:	ldr	r2, [sp, #48]	; 0x30
   4090c:	bl	34cbc <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   40910:	ldr	r3, [r4, #12]
   40914:	subs	r3, r3, #1
   40918:	bne	40934 <flatcc_json_printer_table_as_nested_root@@Base+0xf0>
   4091c:	ldr	r3, [r5, #36]	; 0x24
   40920:	cmp	r3, #0
   40924:	moveq	r3, #2
   40928:	streq	r3, [r5, #36]	; 0x24
   4092c:	add	sp, sp, #24
   40930:	pop	{r4, r5, r6, r7, r8, pc}
   40934:	ldr	r2, [r5, #32]
   40938:	ldr	r1, [r6, #4]
   4093c:	ldr	r0, [r5, #20]
   40940:	add	r2, r2, #1
   40944:	str	r2, [r5, #32]
   40948:	add	lr, r0, #1
   4094c:	mov	ip, #123	; 0x7b
   40950:	mov	r2, #0
   40954:	str	lr, [r5, #20]
   40958:	strb	ip, [r0]
   4095c:	str	r2, [sp, #20]
   40960:	str	r3, [sp, #16]
   40964:	ldr	r3, [r8, r1]
   40968:	add	r8, r8, r1
   4096c:	sub	r3, r8, r3
   40970:	add	r1, sp, #4
   40974:	ldrh	r2, [r3]
   40978:	mov	r0, r5
   4097c:	str	r3, [sp, #8]
   40980:	ldr	r3, [sp, #56]	; 0x38
   40984:	str	r2, [sp, #12]
   40988:	str	r8, [sp, #4]
   4098c:	blx	r3
   40990:	ldrb	r3, [r5, #25]
   40994:	cmp	r3, #0
   40998:	bne	409b8 <flatcc_json_printer_table_as_nested_root@@Base+0x174>
   4099c:	ldr	r3, [r5, #20]
   409a0:	mov	r2, #125	; 0x7d
   409a4:	add	r1, r3, #1
   409a8:	str	r1, [r5, #20]
   409ac:	strb	r2, [r3]
   409b0:	add	sp, sp, #24
   409b4:	pop	{r4, r5, r6, r7, r8, pc}
   409b8:	ldr	r3, [r5, #20]
   409bc:	mov	r2, #10
   409c0:	add	r1, r3, #1
   409c4:	str	r1, [r5, #20]
   409c8:	strb	r2, [r3]
   409cc:	ldr	r3, [r5, #32]
   409d0:	mov	r0, r5
   409d4:	sub	r3, r3, #1
   409d8:	str	r3, [r5, #32]
   409dc:	bl	3471c <flatcc_json_parser_struct_as_root@@Base+0xc20>
   409e0:	b	4099c <flatcc_json_printer_table_as_nested_root@@Base+0x158>
   409e4:	ldr	r3, [r0, #36]	; 0x24
   409e8:	ldr	r1, [pc, #32]	; 40a10 <flatcc_json_printer_table_as_nested_root@@Base+0x1cc>
   409ec:	cmp	r3, r2
   409f0:	moveq	r3, #1
   409f4:	streq	r3, [r0, #36]	; 0x24
   409f8:	ldr	r2, [pc, #20]	; 40a14 <flatcc_json_printer_table_as_nested_root@@Base+0x1d0>
   409fc:	ldr	r3, [pc, #20]	; 40a18 <flatcc_json_printer_table_as_nested_root@@Base+0x1d4>
   40a00:	ldr	r0, [pc, #20]	; 40a1c <flatcc_json_printer_table_as_nested_root@@Base+0x1d8>
   40a04:	bl	14618 <__assert_fail@plt>
   40a08:	mov	r0, r5
   40a0c:	bl	14900 <__assert_fail@plt+0x2e8>
   40a10:	andeq	r6, r4, ip, ror #23
   40a14:	strdeq	r0, [r0], -fp
   40a18:	andeq	r6, r4, r8, ror r5
   40a1c:	andeq	r6, r4, r4, lsr #27

00040a20 <flatcc_json_printer_init@@Base>:
   40a20:	push	{r4, r5, r6, lr}
   40a24:	mov	r2, #48	; 0x30
   40a28:	mov	r5, r1
   40a2c:	mov	r1, #0
   40a30:	mov	r4, r0
   40a34:	bl	145c4 <memset@plt>
   40a38:	cmp	r5, #0
   40a3c:	ldr	r6, [pc, #76]	; 40a90 <flatcc_json_printer_init@@Base+0x70>
   40a40:	ldreq	r3, [pc, #76]	; 40a94 <flatcc_json_printer_init@@Base+0x74>
   40a44:	mov	r0, r6
   40a48:	ldreq	r5, [r3]
   40a4c:	ldr	r3, [pc, #68]	; 40a98 <flatcc_json_printer_init@@Base+0x78>
   40a50:	str	r5, [r4, #40]	; 0x28
   40a54:	str	r3, [r4, #44]	; 0x2c
   40a58:	bl	1457c <malloc@plt>
   40a5c:	cmp	r0, #0
   40a60:	addne	r1, r0, #16384	; 0x4000
   40a64:	movne	r2, #1
   40a68:	movne	r3, #16384	; 0x4000
   40a6c:	str	r0, [r4]
   40a70:	strne	r0, [r4, #20]
   40a74:	strne	r6, [r4, #4]
   40a78:	movne	r0, #0
   40a7c:	strne	r1, [r4, #16]
   40a80:	strbne	r2, [r4, #24]
   40a84:	strne	r3, [r4, #8]
   40a88:	mvneq	r0, #0
   40a8c:	pop	{r4, r5, r6, pc}
   40a90:	andeq	r4, r0, r0, asr #32
   40a94:			; <UNDEFINED> instruction: 0x000573b4
   40a98:	andeq	r4, r3, r0, ror #15

00040a9c <flatcc_json_printer_init_buffer@@Base>:
   40a9c:	cmp	r2, #63	; 0x3f
   40aa0:	push	{r4, r5, r6, lr}
   40aa4:	bls	40aec <flatcc_json_printer_init_buffer@@Base+0x50>
   40aa8:	mov	r6, r1
   40aac:	mov	r5, r2
   40ab0:	mov	r1, #0
   40ab4:	mov	r2, #48	; 0x30
   40ab8:	mov	r4, r0
   40abc:	bl	145c4 <memset@plt>
   40ac0:	sub	r3, r5, #64	; 0x40
   40ac4:	ldr	r2, [pc, #52]	; 40b00 <flatcc_json_printer_init_buffer@@Base+0x64>
   40ac8:	add	r1, r6, r3
   40acc:	str	r6, [r4]
   40ad0:	str	r5, [r4, #4]
   40ad4:	str	r3, [r4, #8]
   40ad8:	str	r1, [r4, #16]
   40adc:	str	r6, [r4, #20]
   40ae0:	str	r2, [r4, #44]	; 0x2c
   40ae4:	mov	r0, #0
   40ae8:	pop	{r4, r5, r6, pc}
   40aec:	ldr	r3, [pc, #16]	; 40b04 <flatcc_json_printer_init_buffer@@Base+0x68>
   40af0:	ldr	r2, [pc, #16]	; 40b08 <flatcc_json_printer_init_buffer@@Base+0x6c>
   40af4:	ldr	r1, [pc, #16]	; 40b0c <flatcc_json_printer_init_buffer@@Base+0x70>
   40af8:	ldr	r0, [pc, #16]	; 40b10 <flatcc_json_printer_init_buffer@@Base+0x74>
   40afc:	bl	14618 <__assert_fail@plt>
   40b00:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   40b04:			; <UNDEFINED> instruction: 0x00046bb0
   40b08:	andeq	r0, r0, sp, lsl #9
   40b0c:	andeq	r6, r4, ip, ror #23
   40b10:	andeq	r6, r4, r4, asr #27

00040b14 <flatcc_json_printer_init_dynamic_buffer@@Base>:
   40b14:	cmp	r1, #0
   40b18:	push	{r4, r5, r6, lr}
   40b1c:	mov	r4, r0
   40b20:	moveq	r6, #4032	; 0xfc0
   40b24:	moveq	r5, #4096	; 0x1000
   40b28:	beq	40b3c <flatcc_json_printer_init_dynamic_buffer@@Base+0x28>
   40b2c:	cmp	r1, #64	; 0x40
   40b30:	movcs	r5, r1
   40b34:	movcc	r5, #64	; 0x40
   40b38:	sub	r6, r5, #64	; 0x40
   40b3c:	mov	r2, #48	; 0x30
   40b40:	mov	r1, #0
   40b44:	mov	r0, r4
   40b48:	bl	145c4 <memset@plt>
   40b4c:	mov	r0, r5
   40b50:	bl	1457c <malloc@plt>
   40b54:	ldr	r2, [pc, #80]	; 40bac <flatcc_json_printer_init_dynamic_buffer@@Base+0x98>
   40b58:	mov	r3, #1
   40b5c:	stmib	r4, {r5, r6}
   40b60:	str	r2, [r4, #44]	; 0x2c
   40b64:	strb	r3, [r4, #24]
   40b68:	add	r1, r0, r6
   40b6c:	cmp	r0, #0
   40b70:	str	r0, [r4]
   40b74:	str	r0, [r4, #20]
   40b78:	str	r1, [r4, #16]
   40b7c:	beq	40b88 <flatcc_json_printer_init_dynamic_buffer@@Base+0x74>
   40b80:	mov	r0, #0
   40b84:	pop	{r4, r5, r6, pc}
   40b88:	ldr	r3, [r4, #36]	; 0x24
   40b8c:	cmp	r3, #0
   40b90:	bne	40ba4 <flatcc_json_printer_init_dynamic_buffer@@Base+0x90>
   40b94:	mov	r3, #3
   40b98:	str	r3, [r4, #36]	; 0x24
   40b9c:	mvn	r0, #0
   40ba0:	pop	{r4, r5, r6, pc}
   40ba4:	mvn	r0, #0
   40ba8:	pop	{r4, r5, r6, pc}
   40bac:	andeq	r4, r3, r4, lsl #17

00040bb0 <flatcc_json_printer_get_buffer@@Base>:
   40bb0:	ldr	r3, [r0, #44]	; 0x2c
   40bb4:	push	{r4, r5, r6, lr}
   40bb8:	mov	r5, r1
   40bbc:	mov	r1, #0
   40bc0:	mov	r4, r0
   40bc4:	blx	r3
   40bc8:	cmp	r5, #0
   40bcc:	ldr	r0, [r4]
   40bd0:	ldrne	r3, [r4, #20]
   40bd4:	subne	r3, r3, r0
   40bd8:	strne	r3, [r5]
   40bdc:	pop	{r4, r5, r6, pc}

00040be0 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   40be0:	ldr	r3, [r0, #44]	; 0x2c
   40be4:	push	{r4, r5, r6, lr}
   40be8:	mov	r5, r1
   40bec:	mov	r1, #0
   40bf0:	mov	r4, r0
   40bf4:	blx	r3
   40bf8:	cmp	r5, #0
   40bfc:	ldr	r6, [r4]
   40c00:	ldrne	r3, [r4, #20]
   40c04:	mov	r0, r4
   40c08:	mov	r2, #48	; 0x30
   40c0c:	mov	r1, #0
   40c10:	subne	r3, r3, r6
   40c14:	strne	r3, [r5]
   40c18:	bl	145c4 <memset@plt>
   40c1c:	mov	r0, r6
   40c20:	pop	{r4, r5, r6, pc}

00040c24 <flatcc_json_printer_clear@@Base>:
   40c24:	push	{r4, lr}
   40c28:	mov	r4, r0
   40c2c:	ldrb	r3, [r0, #24]
   40c30:	cmp	r3, #0
   40c34:	beq	40c48 <flatcc_json_printer_clear@@Base+0x24>
   40c38:	ldr	r0, [r0]
   40c3c:	cmp	r0, #0
   40c40:	beq	40c48 <flatcc_json_printer_clear@@Base+0x24>
   40c44:	bl	14540 <free@plt>
   40c48:	mov	r0, r4
   40c4c:	mov	r2, #48	; 0x30
   40c50:	mov	r1, #0
   40c54:	pop	{r4, lr}
   40c58:	b	145c4 <memset@plt>
   40c5c:	subs	r2, r1, #1
   40c60:	bxeq	lr
   40c64:	bcc	40e3c <flatcc_json_printer_clear@@Base+0x218>
   40c68:	cmp	r0, r1
   40c6c:	bls	40e20 <flatcc_json_printer_clear@@Base+0x1fc>
   40c70:	tst	r1, r2
   40c74:	beq	40e2c <flatcc_json_printer_clear@@Base+0x208>
   40c78:	clz	r3, r0
   40c7c:	clz	r2, r1
   40c80:	sub	r3, r2, r3
   40c84:	rsbs	r3, r3, #31
   40c88:	addne	r3, r3, r3, lsl #1
   40c8c:	mov	r2, #0
   40c90:	addne	pc, pc, r3, lsl #2
   40c94:	nop			; (mov r0, r0)
   40c98:	cmp	r0, r1, lsl #31
   40c9c:	adc	r2, r2, r2
   40ca0:	subcs	r0, r0, r1, lsl #31
   40ca4:	cmp	r0, r1, lsl #30
   40ca8:	adc	r2, r2, r2
   40cac:	subcs	r0, r0, r1, lsl #30
   40cb0:	cmp	r0, r1, lsl #29
   40cb4:	adc	r2, r2, r2
   40cb8:	subcs	r0, r0, r1, lsl #29
   40cbc:	cmp	r0, r1, lsl #28
   40cc0:	adc	r2, r2, r2
   40cc4:	subcs	r0, r0, r1, lsl #28
   40cc8:	cmp	r0, r1, lsl #27
   40ccc:	adc	r2, r2, r2
   40cd0:	subcs	r0, r0, r1, lsl #27
   40cd4:	cmp	r0, r1, lsl #26
   40cd8:	adc	r2, r2, r2
   40cdc:	subcs	r0, r0, r1, lsl #26
   40ce0:	cmp	r0, r1, lsl #25
   40ce4:	adc	r2, r2, r2
   40ce8:	subcs	r0, r0, r1, lsl #25
   40cec:	cmp	r0, r1, lsl #24
   40cf0:	adc	r2, r2, r2
   40cf4:	subcs	r0, r0, r1, lsl #24
   40cf8:	cmp	r0, r1, lsl #23
   40cfc:	adc	r2, r2, r2
   40d00:	subcs	r0, r0, r1, lsl #23
   40d04:	cmp	r0, r1, lsl #22
   40d08:	adc	r2, r2, r2
   40d0c:	subcs	r0, r0, r1, lsl #22
   40d10:	cmp	r0, r1, lsl #21
   40d14:	adc	r2, r2, r2
   40d18:	subcs	r0, r0, r1, lsl #21
   40d1c:	cmp	r0, r1, lsl #20
   40d20:	adc	r2, r2, r2
   40d24:	subcs	r0, r0, r1, lsl #20
   40d28:	cmp	r0, r1, lsl #19
   40d2c:	adc	r2, r2, r2
   40d30:	subcs	r0, r0, r1, lsl #19
   40d34:	cmp	r0, r1, lsl #18
   40d38:	adc	r2, r2, r2
   40d3c:	subcs	r0, r0, r1, lsl #18
   40d40:	cmp	r0, r1, lsl #17
   40d44:	adc	r2, r2, r2
   40d48:	subcs	r0, r0, r1, lsl #17
   40d4c:	cmp	r0, r1, lsl #16
   40d50:	adc	r2, r2, r2
   40d54:	subcs	r0, r0, r1, lsl #16
   40d58:	cmp	r0, r1, lsl #15
   40d5c:	adc	r2, r2, r2
   40d60:	subcs	r0, r0, r1, lsl #15
   40d64:	cmp	r0, r1, lsl #14
   40d68:	adc	r2, r2, r2
   40d6c:	subcs	r0, r0, r1, lsl #14
   40d70:	cmp	r0, r1, lsl #13
   40d74:	adc	r2, r2, r2
   40d78:	subcs	r0, r0, r1, lsl #13
   40d7c:	cmp	r0, r1, lsl #12
   40d80:	adc	r2, r2, r2
   40d84:	subcs	r0, r0, r1, lsl #12
   40d88:	cmp	r0, r1, lsl #11
   40d8c:	adc	r2, r2, r2
   40d90:	subcs	r0, r0, r1, lsl #11
   40d94:	cmp	r0, r1, lsl #10
   40d98:	adc	r2, r2, r2
   40d9c:	subcs	r0, r0, r1, lsl #10
   40da0:	cmp	r0, r1, lsl #9
   40da4:	adc	r2, r2, r2
   40da8:	subcs	r0, r0, r1, lsl #9
   40dac:	cmp	r0, r1, lsl #8
   40db0:	adc	r2, r2, r2
   40db4:	subcs	r0, r0, r1, lsl #8
   40db8:	cmp	r0, r1, lsl #7
   40dbc:	adc	r2, r2, r2
   40dc0:	subcs	r0, r0, r1, lsl #7
   40dc4:	cmp	r0, r1, lsl #6
   40dc8:	adc	r2, r2, r2
   40dcc:	subcs	r0, r0, r1, lsl #6
   40dd0:	cmp	r0, r1, lsl #5
   40dd4:	adc	r2, r2, r2
   40dd8:	subcs	r0, r0, r1, lsl #5
   40ddc:	cmp	r0, r1, lsl #4
   40de0:	adc	r2, r2, r2
   40de4:	subcs	r0, r0, r1, lsl #4
   40de8:	cmp	r0, r1, lsl #3
   40dec:	adc	r2, r2, r2
   40df0:	subcs	r0, r0, r1, lsl #3
   40df4:	cmp	r0, r1, lsl #2
   40df8:	adc	r2, r2, r2
   40dfc:	subcs	r0, r0, r1, lsl #2
   40e00:	cmp	r0, r1, lsl #1
   40e04:	adc	r2, r2, r2
   40e08:	subcs	r0, r0, r1, lsl #1
   40e0c:	cmp	r0, r1
   40e10:	adc	r2, r2, r2
   40e14:	subcs	r0, r0, r1
   40e18:	mov	r0, r2
   40e1c:	bx	lr
   40e20:	moveq	r0, #1
   40e24:	movne	r0, #0
   40e28:	bx	lr
   40e2c:	clz	r2, r1
   40e30:	rsb	r2, r2, #31
   40e34:	lsr	r0, r0, r2
   40e38:	bx	lr
   40e3c:	cmp	r0, #0
   40e40:	mvnne	r0, #0
   40e44:	b	414ac <flatcc_json_printer_clear@@Base+0x888>
   40e48:	cmp	r1, #0
   40e4c:	beq	40e3c <flatcc_json_printer_clear@@Base+0x218>
   40e50:	push	{r0, r1, lr}
   40e54:	bl	40c5c <flatcc_json_printer_clear@@Base+0x38>
   40e58:	pop	{r1, r2, lr}
   40e5c:	mul	r3, r2, r0
   40e60:	sub	r1, r1, r3
   40e64:	bx	lr
   40e68:	eor	r1, r1, #-2147483648	; 0x80000000
   40e6c:	b	40e74 <flatcc_json_printer_clear@@Base+0x250>
   40e70:	eor	r3, r3, #-2147483648	; 0x80000000
   40e74:	push	{r4, r5, lr}
   40e78:	lsl	r4, r1, #1
   40e7c:	lsl	r5, r3, #1
   40e80:	teq	r4, r5
   40e84:	teqeq	r0, r2
   40e88:	orrsne	ip, r4, r0
   40e8c:	orrsne	ip, r5, r2
   40e90:	mvnsne	ip, r4, asr #21
   40e94:	mvnsne	ip, r5, asr #21
   40e98:	beq	41084 <flatcc_json_printer_clear@@Base+0x460>
   40e9c:	lsr	r4, r4, #21
   40ea0:	rsbs	r5, r4, r5, lsr #21
   40ea4:	rsblt	r5, r5, #0
   40ea8:	ble	40ec8 <flatcc_json_printer_clear@@Base+0x2a4>
   40eac:	add	r4, r4, r5
   40eb0:	eor	r2, r0, r2
   40eb4:	eor	r3, r1, r3
   40eb8:	eor	r0, r2, r0
   40ebc:	eor	r1, r3, r1
   40ec0:	eor	r2, r0, r2
   40ec4:	eor	r3, r1, r3
   40ec8:	cmp	r5, #54	; 0x36
   40ecc:	pophi	{r4, r5, pc}
   40ed0:	tst	r1, #-2147483648	; 0x80000000
   40ed4:	lsl	r1, r1, #12
   40ed8:	mov	ip, #1048576	; 0x100000
   40edc:	orr	r1, ip, r1, lsr #12
   40ee0:	beq	40eec <flatcc_json_printer_clear@@Base+0x2c8>
   40ee4:	rsbs	r0, r0, #0
   40ee8:	rsc	r1, r1, #0
   40eec:	tst	r3, #-2147483648	; 0x80000000
   40ef0:	lsl	r3, r3, #12
   40ef4:	orr	r3, ip, r3, lsr #12
   40ef8:	beq	40f04 <flatcc_json_printer_clear@@Base+0x2e0>
   40efc:	rsbs	r2, r2, #0
   40f00:	rsc	r3, r3, #0
   40f04:	teq	r4, r5
   40f08:	beq	4106c <flatcc_json_printer_clear@@Base+0x448>
   40f0c:	sub	r4, r4, #1
   40f10:	rsbs	lr, r5, #32
   40f14:	blt	40f30 <flatcc_json_printer_clear@@Base+0x30c>
   40f18:	lsl	ip, r2, lr
   40f1c:	adds	r0, r0, r2, lsr r5
   40f20:	adc	r1, r1, #0
   40f24:	adds	r0, r0, r3, lsl lr
   40f28:	adcs	r1, r1, r3, asr r5
   40f2c:	b	40f4c <flatcc_json_printer_clear@@Base+0x328>
   40f30:	sub	r5, r5, #32
   40f34:	add	lr, lr, #32
   40f38:	cmp	r2, #1
   40f3c:	lsl	ip, r3, lr
   40f40:	orrcs	ip, ip, #2
   40f44:	adds	r0, r0, r3, asr r5
   40f48:	adcs	r1, r1, r3, asr #31
   40f4c:	and	r5, r1, #-2147483648	; 0x80000000
   40f50:	bpl	40f60 <flatcc_json_printer_clear@@Base+0x33c>
   40f54:	rsbs	ip, ip, #0
   40f58:	rscs	r0, r0, #0
   40f5c:	rsc	r1, r1, #0
   40f60:	cmp	r1, #1048576	; 0x100000
   40f64:	bcc	40fa4 <flatcc_json_printer_clear@@Base+0x380>
   40f68:	cmp	r1, #2097152	; 0x200000
   40f6c:	bcc	40f8c <flatcc_json_printer_clear@@Base+0x368>
   40f70:	lsrs	r1, r1, #1
   40f74:	rrxs	r0, r0
   40f78:	rrx	ip, ip
   40f7c:	add	r4, r4, #1
   40f80:	lsl	r2, r4, #21
   40f84:	cmn	r2, #4194304	; 0x400000
   40f88:	bcs	410e4 <flatcc_json_printer_clear@@Base+0x4c0>
   40f8c:	cmp	ip, #-2147483648	; 0x80000000
   40f90:	lsrseq	ip, r0, #1
   40f94:	adcs	r0, r0, #0
   40f98:	adc	r1, r1, r4, lsl #20
   40f9c:	orr	r1, r1, r5
   40fa0:	pop	{r4, r5, pc}
   40fa4:	lsls	ip, ip, #1
   40fa8:	adcs	r0, r0, r0
   40fac:	adc	r1, r1, r1
   40fb0:	tst	r1, #1048576	; 0x100000
   40fb4:	sub	r4, r4, #1
   40fb8:	bne	40f8c <flatcc_json_printer_clear@@Base+0x368>
   40fbc:	teq	r1, #0
   40fc0:	moveq	r1, r0
   40fc4:	moveq	r0, #0
   40fc8:	clz	r3, r1
   40fcc:	addeq	r3, r3, #32
   40fd0:	sub	r3, r3, #11
   40fd4:	subs	r2, r3, #32
   40fd8:	bge	40ffc <flatcc_json_printer_clear@@Base+0x3d8>
   40fdc:	adds	r2, r2, #12
   40fe0:	ble	40ff8 <flatcc_json_printer_clear@@Base+0x3d4>
   40fe4:	add	ip, r2, #20
   40fe8:	rsb	r2, r2, #12
   40fec:	lsl	r0, r1, ip
   40ff0:	lsr	r1, r1, r2
   40ff4:	b	4100c <flatcc_json_printer_clear@@Base+0x3e8>
   40ff8:	add	r2, r2, #20
   40ffc:	rsble	ip, r2, #32
   41000:	lsl	r1, r1, r2
   41004:	orrle	r1, r1, r0, lsr ip
   41008:	lslle	r0, r0, r2
   4100c:	subs	r4, r4, r3
   41010:	addge	r1, r1, r4, lsl #20
   41014:	orrge	r1, r1, r5
   41018:	popge	{r4, r5, pc}
   4101c:	mvn	r4, r4
   41020:	subs	r4, r4, #31
   41024:	bge	41060 <flatcc_json_printer_clear@@Base+0x43c>
   41028:	adds	r4, r4, #12
   4102c:	bgt	41048 <flatcc_json_printer_clear@@Base+0x424>
   41030:	add	r4, r4, #20
   41034:	rsb	r2, r4, #32
   41038:	lsr	r0, r0, r4
   4103c:	orr	r0, r0, r1, lsl r2
   41040:	orr	r1, r5, r1, lsr r4
   41044:	pop	{r4, r5, pc}
   41048:	rsb	r4, r4, #12
   4104c:	rsb	r2, r4, #32
   41050:	lsr	r0, r0, r2
   41054:	orr	r0, r0, r1, lsl r4
   41058:	mov	r1, r5
   4105c:	pop	{r4, r5, pc}
   41060:	lsr	r0, r1, r4
   41064:	mov	r1, r5
   41068:	pop	{r4, r5, pc}
   4106c:	teq	r4, #0
   41070:	eor	r3, r3, #1048576	; 0x100000
   41074:	eoreq	r1, r1, #1048576	; 0x100000
   41078:	addeq	r4, r4, #1
   4107c:	subne	r5, r5, #1
   41080:	b	40f0c <flatcc_json_printer_clear@@Base+0x2e8>
   41084:	mvns	ip, r4, asr #21
   41088:	mvnsne	ip, r5, asr #21
   4108c:	beq	410f4 <flatcc_json_printer_clear@@Base+0x4d0>
   41090:	teq	r4, r5
   41094:	teqeq	r0, r2
   41098:	beq	410ac <flatcc_json_printer_clear@@Base+0x488>
   4109c:	orrs	ip, r4, r0
   410a0:	moveq	r1, r3
   410a4:	moveq	r0, r2
   410a8:	pop	{r4, r5, pc}
   410ac:	teq	r1, r3
   410b0:	movne	r1, #0
   410b4:	movne	r0, #0
   410b8:	popne	{r4, r5, pc}
   410bc:	lsrs	ip, r4, #21
   410c0:	bne	410d4 <flatcc_json_printer_clear@@Base+0x4b0>
   410c4:	lsls	r0, r0, #1
   410c8:	adcs	r1, r1, r1
   410cc:	orrcs	r1, r1, #-2147483648	; 0x80000000
   410d0:	pop	{r4, r5, pc}
   410d4:	adds	r4, r4, #4194304	; 0x400000
   410d8:	addcc	r1, r1, #1048576	; 0x100000
   410dc:	popcc	{r4, r5, pc}
   410e0:	and	r5, r1, #-2147483648	; 0x80000000
   410e4:	orr	r1, r5, #2130706432	; 0x7f000000
   410e8:	orr	r1, r1, #15728640	; 0xf00000
   410ec:	mov	r0, #0
   410f0:	pop	{r4, r5, pc}
   410f4:	mvns	ip, r4, asr #21
   410f8:	movne	r1, r3
   410fc:	movne	r0, r2
   41100:	mvnseq	ip, r5, asr #21
   41104:	movne	r3, r1
   41108:	movne	r2, r0
   4110c:	orrs	r4, r0, r1, lsl #12
   41110:	orrseq	r5, r2, r3, lsl #12
   41114:	teqeq	r1, r3
   41118:	orrne	r1, r1, #524288	; 0x80000
   4111c:	pop	{r4, r5, pc}
   41120:	teq	r0, #0
   41124:	moveq	r1, #0
   41128:	bxeq	lr
   4112c:	push	{r4, r5, lr}
   41130:	mov	r4, #1024	; 0x400
   41134:	add	r4, r4, #50	; 0x32
   41138:	mov	r5, #0
   4113c:	mov	r1, #0
   41140:	b	40fbc <flatcc_json_printer_clear@@Base+0x398>
   41144:	teq	r0, #0
   41148:	moveq	r1, #0
   4114c:	bxeq	lr
   41150:	push	{r4, r5, lr}
   41154:	mov	r4, #1024	; 0x400
   41158:	add	r4, r4, #50	; 0x32
   4115c:	ands	r5, r0, #-2147483648	; 0x80000000
   41160:	rsbmi	r0, r0, #0
   41164:	mov	r1, #0
   41168:	b	40fbc <flatcc_json_printer_clear@@Base+0x398>
   4116c:	lsls	r2, r0, #1
   41170:	asr	r1, r2, #3
   41174:	rrx	r1, r1
   41178:	lsl	r0, r2, #28
   4117c:	andsne	r3, r2, #-16777216	; 0xff000000
   41180:	teqne	r3, #-16777216	; 0xff000000
   41184:	eorne	r1, r1, #939524096	; 0x38000000
   41188:	bxne	lr
   4118c:	teq	r2, #0
   41190:	teqne	r3, #-16777216	; 0xff000000
   41194:	bxeq	lr
   41198:	push	{r4, r5, lr}
   4119c:	mov	r4, #896	; 0x380
   411a0:	and	r5, r1, #-2147483648	; 0x80000000
   411a4:	bic	r1, r1, #-2147483648	; 0x80000000
   411a8:	b	40fbc <flatcc_json_printer_clear@@Base+0x398>
   411ac:	orrs	r2, r0, r1
   411b0:	bxeq	lr
   411b4:	push	{r4, r5, lr}
   411b8:	mov	r5, #0
   411bc:	b	411dc <flatcc_json_printer_clear@@Base+0x5b8>
   411c0:	orrs	r2, r0, r1
   411c4:	bxeq	lr
   411c8:	push	{r4, r5, lr}
   411cc:	ands	r5, r1, #-2147483648	; 0x80000000
   411d0:	bpl	411dc <flatcc_json_printer_clear@@Base+0x5b8>
   411d4:	rsbs	r0, r0, #0
   411d8:	rsc	r1, r1, #0
   411dc:	mov	r4, #1024	; 0x400
   411e0:	add	r4, r4, #50	; 0x32
   411e4:	lsrs	ip, r1, #22
   411e8:	beq	40f60 <flatcc_json_printer_clear@@Base+0x33c>
   411ec:	mov	r2, #3
   411f0:	lsrs	ip, ip, #3
   411f4:	addne	r2, r2, #3
   411f8:	lsrs	ip, ip, #3
   411fc:	addne	r2, r2, #3
   41200:	add	r2, r2, ip, lsr #3
   41204:	rsb	r3, r2, #32
   41208:	lsl	ip, r0, r3
   4120c:	lsr	r0, r0, r2
   41210:	orr	r0, r0, r1, lsl r3
   41214:	lsr	r1, r1, r2
   41218:	add	r4, r4, r2
   4121c:	b	40f60 <flatcc_json_printer_clear@@Base+0x33c>
   41220:	eor	r0, r0, #-2147483648	; 0x80000000
   41224:	b	4122c <flatcc_json_printer_clear@@Base+0x608>
   41228:	eor	r1, r1, #-2147483648	; 0x80000000
   4122c:	lsls	r2, r0, #1
   41230:	lslsne	r3, r1, #1
   41234:	teqne	r2, r3
   41238:	mvnsne	ip, r2, asr #24
   4123c:	mvnsne	ip, r3, asr #24
   41240:	beq	41338 <flatcc_json_printer_clear@@Base+0x714>
   41244:	lsr	r2, r2, #24
   41248:	rsbs	r3, r2, r3, lsr #24
   4124c:	addgt	r2, r2, r3
   41250:	eorgt	r1, r0, r1
   41254:	eorgt	r0, r1, r0
   41258:	eorgt	r1, r0, r1
   4125c:	rsblt	r3, r3, #0
   41260:	cmp	r3, #25
   41264:	bxhi	lr
   41268:	tst	r0, #-2147483648	; 0x80000000
   4126c:	orr	r0, r0, #8388608	; 0x800000
   41270:	bic	r0, r0, #-16777216	; 0xff000000
   41274:	rsbne	r0, r0, #0
   41278:	tst	r1, #-2147483648	; 0x80000000
   4127c:	orr	r1, r1, #8388608	; 0x800000
   41280:	bic	r1, r1, #-16777216	; 0xff000000
   41284:	rsbne	r1, r1, #0
   41288:	teq	r2, r3
   4128c:	beq	41320 <flatcc_json_printer_clear@@Base+0x6fc>
   41290:	sub	r2, r2, #1
   41294:	adds	r0, r0, r1, asr r3
   41298:	rsb	r3, r3, #32
   4129c:	lsl	r1, r1, r3
   412a0:	and	r3, r0, #-2147483648	; 0x80000000
   412a4:	bpl	412b0 <flatcc_json_printer_clear@@Base+0x68c>
   412a8:	rsbs	r1, r1, #0
   412ac:	rsc	r0, r0, #0
   412b0:	cmp	r0, #8388608	; 0x800000
   412b4:	bcc	412e8 <flatcc_json_printer_clear@@Base+0x6c4>
   412b8:	cmp	r0, #16777216	; 0x1000000
   412bc:	bcc	412d4 <flatcc_json_printer_clear@@Base+0x6b0>
   412c0:	lsrs	r0, r0, #1
   412c4:	rrx	r1, r1
   412c8:	add	r2, r2, #1
   412cc:	cmp	r2, #254	; 0xfe
   412d0:	bcs	4138c <flatcc_json_printer_clear@@Base+0x768>
   412d4:	cmp	r1, #-2147483648	; 0x80000000
   412d8:	adc	r0, r0, r2, lsl #23
   412dc:	biceq	r0, r0, #1
   412e0:	orr	r0, r0, r3
   412e4:	bx	lr
   412e8:	lsls	r1, r1, #1
   412ec:	adc	r0, r0, r0
   412f0:	tst	r0, #8388608	; 0x800000
   412f4:	sub	r2, r2, #1
   412f8:	bne	412d4 <flatcc_json_printer_clear@@Base+0x6b0>
   412fc:	clz	ip, r0
   41300:	sub	ip, ip, #8
   41304:	subs	r2, r2, ip
   41308:	lsl	r0, r0, ip
   4130c:	addge	r0, r0, r2, lsl #23
   41310:	rsblt	r2, r2, #0
   41314:	orrge	r0, r0, r3
   41318:	orrlt	r0, r3, r0, lsr r2
   4131c:	bx	lr
   41320:	teq	r2, #0
   41324:	eor	r1, r1, #8388608	; 0x800000
   41328:	eoreq	r0, r0, #8388608	; 0x800000
   4132c:	addeq	r2, r2, #1
   41330:	subne	r3, r3, #1
   41334:	b	41290 <flatcc_json_printer_clear@@Base+0x66c>
   41338:	lsl	r3, r1, #1
   4133c:	mvns	ip, r2, asr #24
   41340:	mvnsne	ip, r3, asr #24
   41344:	beq	41398 <flatcc_json_printer_clear@@Base+0x774>
   41348:	teq	r2, r3
   4134c:	beq	4135c <flatcc_json_printer_clear@@Base+0x738>
   41350:	teq	r2, #0
   41354:	moveq	r0, r1
   41358:	bx	lr
   4135c:	teq	r0, r1
   41360:	movne	r0, #0
   41364:	bxne	lr
   41368:	tst	r2, #-16777216	; 0xff000000
   4136c:	bne	4137c <flatcc_json_printer_clear@@Base+0x758>
   41370:	lsls	r0, r0, #1
   41374:	orrcs	r0, r0, #-2147483648	; 0x80000000
   41378:	bx	lr
   4137c:	adds	r2, r2, #33554432	; 0x2000000
   41380:	addcc	r0, r0, #8388608	; 0x800000
   41384:	bxcc	lr
   41388:	and	r3, r0, #-2147483648	; 0x80000000
   4138c:	orr	r0, r3, #2130706432	; 0x7f000000
   41390:	orr	r0, r0, #8388608	; 0x800000
   41394:	bx	lr
   41398:	mvns	r2, r2, asr #24
   4139c:	movne	r0, r1
   413a0:	mvnseq	r3, r3, asr #24
   413a4:	movne	r1, r0
   413a8:	lsls	r2, r0, #9
   413ac:	lslseq	r3, r1, #9
   413b0:	teqeq	r0, r1
   413b4:	orrne	r0, r0, #4194304	; 0x400000
   413b8:	bx	lr
   413bc:	mov	r3, #0
   413c0:	b	413cc <flatcc_json_printer_clear@@Base+0x7a8>
   413c4:	ands	r3, r0, #-2147483648	; 0x80000000
   413c8:	rsbmi	r0, r0, #0
   413cc:	movs	ip, r0
   413d0:	bxeq	lr
   413d4:	orr	r3, r3, #1258291200	; 0x4b000000
   413d8:	mov	r1, r0
   413dc:	mov	r0, #0
   413e0:	b	41424 <flatcc_json_printer_clear@@Base+0x800>
   413e4:	orrs	r2, r0, r1
   413e8:	bxeq	lr
   413ec:	mov	r3, #0
   413f0:	b	4140c <flatcc_json_printer_clear@@Base+0x7e8>
   413f4:	orrs	r2, r0, r1
   413f8:	bxeq	lr
   413fc:	ands	r3, r1, #-2147483648	; 0x80000000
   41400:	bpl	4140c <flatcc_json_printer_clear@@Base+0x7e8>
   41404:	rsbs	r0, r0, #0
   41408:	rsc	r1, r1, #0
   4140c:	movs	ip, r1
   41410:	moveq	ip, r0
   41414:	moveq	r1, r0
   41418:	moveq	r0, #0
   4141c:	orr	r3, r3, #1526726656	; 0x5b000000
   41420:	subeq	r3, r3, #268435456	; 0x10000000
   41424:	sub	r3, r3, #8388608	; 0x800000
   41428:	clz	r2, ip
   4142c:	subs	r2, r2, #8
   41430:	sub	r3, r3, r2, lsl #23
   41434:	blt	41454 <flatcc_json_printer_clear@@Base+0x830>
   41438:	add	r3, r3, r1, lsl r2
   4143c:	lsl	ip, r0, r2
   41440:	rsb	r2, r2, #32
   41444:	cmp	ip, #-2147483648	; 0x80000000
   41448:	adc	r0, r3, r0, lsr r2
   4144c:	biceq	r0, r0, #1
   41450:	bx	lr
   41454:	add	r2, r2, #32
   41458:	lsl	ip, r1, r2
   4145c:	rsb	r2, r2, #32
   41460:	orrs	r0, r0, ip, lsl #1
   41464:	adc	r0, r3, r1, lsr r2
   41468:	biceq	r0, r0, ip, lsr #31
   4146c:	bx	lr
   41470:	cmp	r3, #0
   41474:	cmpeq	r2, #0
   41478:	bne	41490 <flatcc_json_printer_clear@@Base+0x86c>
   4147c:	cmp	r1, #0
   41480:	cmpeq	r0, #0
   41484:	mvnne	r1, #0
   41488:	mvnne	r0, #0
   4148c:	b	414ac <flatcc_json_printer_clear@@Base+0x888>
   41490:	sub	sp, sp, #8
   41494:	push	{sp, lr}
   41498:	bl	414bc <flatcc_json_printer_clear@@Base+0x898>
   4149c:	ldr	lr, [sp, #4]
   414a0:	add	sp, sp, #8
   414a4:	pop	{r2, r3}
   414a8:	bx	lr
   414ac:	push	{r1, lr}
   414b0:	mov	r0, #8
   414b4:	bl	1451c <raise@plt>
   414b8:	pop	{r1, pc}
   414bc:	cmp	r1, r3
   414c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   414c4:	cmpeq	r0, r2
   414c8:	mov	r4, r0
   414cc:	mov	r5, r1
   414d0:	ldr	r9, [sp, #28]
   414d4:	movcc	r0, #0
   414d8:	movcc	r1, #0
   414dc:	bcc	415d4 <flatcc_json_printer_clear@@Base+0x9b0>
   414e0:	cmp	r3, #0
   414e4:	clzeq	ip, r2
   414e8:	clzne	ip, r3
   414ec:	addeq	ip, ip, #32
   414f0:	cmp	r5, #0
   414f4:	clzeq	r1, r4
   414f8:	addeq	r1, r1, #32
   414fc:	clzne	r1, r5
   41500:	sub	ip, ip, r1
   41504:	sub	lr, ip, #32
   41508:	lsl	r7, r3, ip
   4150c:	rsb	r8, ip, #32
   41510:	orr	r7, r7, r2, lsl lr
   41514:	orr	r7, r7, r2, lsr r8
   41518:	lsl	r6, r2, ip
   4151c:	cmp	r5, r7
   41520:	cmpeq	r4, r6
   41524:	movcc	r0, #0
   41528:	movcc	r1, #0
   4152c:	bcc	41548 <flatcc_json_printer_clear@@Base+0x924>
   41530:	mov	r3, #1
   41534:	subs	r4, r4, r6
   41538:	lsl	r1, r3, lr
   4153c:	lsl	r0, r3, ip
   41540:	orr	r1, r1, r3, lsr r8
   41544:	sbc	r5, r5, r7
   41548:	cmp	ip, #0
   4154c:	beq	415d4 <flatcc_json_printer_clear@@Base+0x9b0>
   41550:	lsrs	r3, r7, #1
   41554:	rrx	r2, r6
   41558:	mov	r6, ip
   4155c:	b	41580 <flatcc_json_printer_clear@@Base+0x95c>
   41560:	subs	r4, r4, r2
   41564:	sbc	r5, r5, r3
   41568:	adds	r4, r4, r4
   4156c:	adc	r5, r5, r5
   41570:	adds	r4, r4, #1
   41574:	adc	r5, r5, #0
   41578:	subs	r6, r6, #1
   4157c:	beq	4159c <flatcc_json_printer_clear@@Base+0x978>
   41580:	cmp	r5, r3
   41584:	cmpeq	r4, r2
   41588:	bcs	41560 <flatcc_json_printer_clear@@Base+0x93c>
   4158c:	adds	r4, r4, r4
   41590:	adc	r5, r5, r5
   41594:	subs	r6, r6, #1
   41598:	bne	41580 <flatcc_json_printer_clear@@Base+0x95c>
   4159c:	lsr	r6, r4, ip
   415a0:	lsr	r7, r5, ip
   415a4:	orr	r6, r6, r5, lsl r8
   415a8:	adds	r2, r0, r4
   415ac:	orr	r6, r6, r5, lsr lr
   415b0:	adc	r3, r1, r5
   415b4:	lsl	r1, r7, ip
   415b8:	orr	r1, r1, r6, lsl lr
   415bc:	lsl	r0, r6, ip
   415c0:	orr	r1, r1, r6, lsr r8
   415c4:	subs	r0, r2, r0
   415c8:	mov	r4, r6
   415cc:	mov	r5, r7
   415d0:	sbc	r1, r3, r1
   415d4:	cmp	r9, #0
   415d8:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   415dc:	strd	r4, [r9]
   415e0:	pop	{r4, r5, r6, r7, r8, r9, pc}

000415e4 <__libc_csu_init@@Base>:
   415e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   415e8:	mov	r7, r0
   415ec:	ldr	r6, [pc, #72]	; 4163c <__libc_csu_init@@Base+0x58>
   415f0:	ldr	r5, [pc, #72]	; 41640 <__libc_csu_init@@Base+0x5c>
   415f4:	add	r6, pc, r6
   415f8:	add	r5, pc, r5
   415fc:	sub	r6, r6, r5
   41600:	mov	r8, r1
   41604:	mov	r9, r2
   41608:	bl	144fc <raise@plt-0x20>
   4160c:	asrs	r6, r6, #2
   41610:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   41614:	mov	r4, #0
   41618:	add	r4, r4, #1
   4161c:	ldr	r3, [r5], #4
   41620:	mov	r2, r9
   41624:	mov	r1, r8
   41628:	mov	r0, r7
   4162c:	blx	r3
   41630:	cmp	r6, r4
   41634:	bne	41618 <__libc_csu_init@@Base+0x34>
   41638:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4163c:	andeq	r5, r1, r4, lsl r9
   41640:	andeq	r5, r1, ip, lsl #18

00041644 <__libc_csu_fini@@Base>:
   41644:	bx	lr

Disassembly of section .fini:

00041648 <.fini>:
   41648:	push	{r3, lr}
   4164c:	pop	{r3, pc}
