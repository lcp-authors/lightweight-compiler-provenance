
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010d98 <.init>:
   10d98:	push	{r3, lr}
   10d9c:	bl	11058 <__assert_fail@plt+0x48>
   10da0:	pop	{r3, pc}

Disassembly of section .plt:

00010da4 <calloc@plt-0x14>:
   10da4:	push	{lr}		; (str lr, [sp, #-4]!)
   10da8:	ldr	lr, [pc, #4]	; 10db4 <calloc@plt-0x4>
   10dac:	add	lr, pc, lr
   10db0:	ldr	pc, [lr, #8]!
   10db4:	andeq	r6, r1, ip, asr #4

00010db8 <calloc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #90112	; 0x16000
   10dc0:	ldr	pc, [ip, #588]!	; 0x24c

00010dc4 <fputs_unlocked@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #90112	; 0x16000
   10dcc:	ldr	pc, [ip, #580]!	; 0x244

00010dd0 <raise@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #90112	; 0x16000
   10dd8:	ldr	pc, [ip, #572]!	; 0x23c

00010ddc <strcmp@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #90112	; 0x16000
   10de4:	ldr	pc, [ip, #564]!	; 0x234

00010de8 <fflush@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #90112	; 0x16000
   10df0:	ldr	pc, [ip, #556]!	; 0x22c

00010df4 <free@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #90112	; 0x16000
   10dfc:	ldr	pc, [ip, #548]!	; 0x224

00010e00 <_exit@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #90112	; 0x16000
   10e08:	ldr	pc, [ip, #540]!	; 0x21c

00010e0c <memcpy@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #90112	; 0x16000
   10e14:	ldr	pc, [ip, #532]!	; 0x214

00010e18 <mbsinit@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #90112	; 0x16000
   10e20:	ldr	pc, [ip, #524]!	; 0x20c

00010e24 <ftruncate64@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #90112	; 0x16000
   10e2c:	ldr	pc, [ip, #516]!	; 0x204

00010e30 <dcgettext@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #90112	; 0x16000
   10e38:	ldr	pc, [ip, #508]!	; 0x1fc

00010e3c <realloc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #90112	; 0x16000
   10e44:	ldr	pc, [ip, #500]!	; 0x1f4

00010e48 <textdomain@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #90112	; 0x16000
   10e50:	ldr	pc, [ip, #492]!	; 0x1ec

00010e54 <iswprint@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #90112	; 0x16000
   10e5c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e60 <__fxstat64@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #90112	; 0x16000
   10e68:	ldr	pc, [ip, #476]!	; 0x1dc

00010e6c <lseek64@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #90112	; 0x16000
   10e74:	ldr	pc, [ip, #468]!	; 0x1d4

00010e78 <__ctype_get_mb_cur_max@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #90112	; 0x16000
   10e80:	ldr	pc, [ip, #460]!	; 0x1cc

00010e84 <__fpending@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #452]!	; 0x1c4

00010e90 <ferror_unlocked@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #444]!	; 0x1bc

00010e9c <mbrtowc@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #436]!	; 0x1b4

00010ea8 <error@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #428]!	; 0x1ac

00010eb4 <open64@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #420]!	; 0x1a4

00010ec0 <malloc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #412]!	; 0x19c

00010ecc <__libc_start_main@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #404]!	; 0x194

00010ed8 <__freading@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #396]!	; 0x18c

00010ee4 <__gmon_start__@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #388]!	; 0x184

00010ef0 <getopt_long@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #380]!	; 0x17c

00010efc <__ctype_b_loc@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #372]!	; 0x174

00010f08 <exit@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #364]!	; 0x16c

00010f14 <bcmp@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #356]!	; 0x164

00010f20 <strlen@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #348]!	; 0x15c

00010f2c <strchr@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #340]!	; 0x154

00010f38 <__errno_location@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #332]!	; 0x14c

00010f44 <__cxa_atexit@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #324]!	; 0x144

00010f50 <memset@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #316]!	; 0x13c

00010f5c <__printf_chk@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #308]!	; 0x134

00010f68 <fileno@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #300]!	; 0x12c

00010f74 <__fprintf_chk@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #292]!	; 0x124

00010f80 <strtoimax@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #284]!	; 0x11c

00010f8c <fclose@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #276]!	; 0x114

00010f98 <fseeko64@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #268]!	; 0x10c

00010fa4 <setlocale@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #260]!	; 0x104

00010fb0 <strrchr@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #252]!	; 0xfc

00010fbc <nl_langinfo@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #244]!	; 0xf4

00010fc8 <bindtextdomain@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #90112	; 0x16000
   10fd0:	ldr	pc, [ip, #236]!	; 0xec

00010fd4 <__xstat64@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #90112	; 0x16000
   10fdc:	ldr	pc, [ip, #228]!	; 0xe4

00010fe0 <fputs@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #90112	; 0x16000
   10fe8:	ldr	pc, [ip, #220]!	; 0xdc

00010fec <strncmp@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #90112	; 0x16000
   10ff4:	ldr	pc, [ip, #212]!	; 0xd4

00010ff8 <abort@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #90112	; 0x16000
   11000:	ldr	pc, [ip, #204]!	; 0xcc

00011004 <close@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #90112	; 0x16000
   1100c:	ldr	pc, [ip, #196]!	; 0xc4

00011010 <__assert_fail@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #188]!	; 0xbc

Disassembly of section .text:

0001101c <.text>:
   1101c:	mov	fp, #0
   11020:	mov	lr, #0
   11024:	pop	{r1}		; (ldr r1, [sp], #4)
   11028:	mov	r2, sp
   1102c:	push	{r2}		; (str r2, [sp, #-4]!)
   11030:	push	{r0}		; (str r0, [sp, #-4]!)
   11034:	ldr	ip, [pc, #16]	; 1104c <__assert_fail@plt+0x3c>
   11038:	push	{ip}		; (str ip, [sp, #-4]!)
   1103c:	ldr	r0, [pc, #12]	; 11050 <__assert_fail@plt+0x40>
   11040:	ldr	r3, [pc, #12]	; 11054 <__assert_fail@plt+0x44>
   11044:	bl	10ecc <__libc_start_main@plt>
   11048:	bl	10ff8 <abort@plt>
   1104c:	ldrdeq	r5, [r1], -ip
   11050:	ldrdeq	r1, [r1], -r8
   11054:	andeq	r5, r1, ip, ror r3
   11058:	ldr	r3, [pc, #20]	; 11074 <__assert_fail@plt+0x64>
   1105c:	ldr	r2, [pc, #20]	; 11078 <__assert_fail@plt+0x68>
   11060:	add	r3, pc, r3
   11064:	ldr	r2, [r3, r2]
   11068:	cmp	r2, #0
   1106c:	bxeq	lr
   11070:	b	10ee4 <__gmon_start__@plt>
   11074:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11078:	ldrdeq	r0, [r0], -r8
   1107c:	ldr	r0, [pc, #24]	; 1109c <__assert_fail@plt+0x8c>
   11080:	ldr	r3, [pc, #24]	; 110a0 <__assert_fail@plt+0x90>
   11084:	cmp	r3, r0
   11088:	bxeq	lr
   1108c:	ldr	r3, [pc, #16]	; 110a4 <__assert_fail@plt+0x94>
   11090:	cmp	r3, #0
   11094:	bxeq	lr
   11098:	bx	r3
   1109c:	andeq	r7, r2, r0, lsr r1
   110a0:	andeq	r7, r2, r0, lsr r1
   110a4:	andeq	r0, r0, r0
   110a8:	ldr	r0, [pc, #36]	; 110d4 <__assert_fail@plt+0xc4>
   110ac:	ldr	r1, [pc, #36]	; 110d8 <__assert_fail@plt+0xc8>
   110b0:	sub	r1, r1, r0
   110b4:	asr	r1, r1, #2
   110b8:	add	r1, r1, r1, lsr #31
   110bc:	asrs	r1, r1, #1
   110c0:	bxeq	lr
   110c4:	ldr	r3, [pc, #16]	; 110dc <__assert_fail@plt+0xcc>
   110c8:	cmp	r3, #0
   110cc:	bxeq	lr
   110d0:	bx	r3
   110d4:	andeq	r7, r2, r0, lsr r1
   110d8:	andeq	r7, r2, r0, lsr r1
   110dc:	andeq	r0, r0, r0
   110e0:	push	{r4, lr}
   110e4:	ldr	r4, [pc, #24]	; 11104 <__assert_fail@plt+0xf4>
   110e8:	ldrb	r3, [r4]
   110ec:	cmp	r3, #0
   110f0:	popne	{r4, pc}
   110f4:	bl	1107c <__assert_fail@plt+0x6c>
   110f8:	mov	r3, #1
   110fc:	strb	r3, [r4]
   11100:	pop	{r4, pc}
   11104:	andeq	r7, r2, ip, asr #2
   11108:	b	110a8 <__assert_fail@plt+0x98>
   1110c:	push	{fp, lr}
   11110:	mov	fp, sp
   11114:	sub	sp, sp, #56	; 0x38
   11118:	mov	r8, r0
   1111c:	cmp	r0, #0
   11120:	bne	11398 <__assert_fail@plt+0x388>
   11124:	movw	r1, #21579	; 0x544b
   11128:	mov	r0, #0
   1112c:	mov	r2, #5
   11130:	movt	r1, #1
   11134:	bl	10e30 <dcgettext@plt>
   11138:	mov	r1, r0
   1113c:	movw	r0, #29024	; 0x7160
   11140:	movt	r0, #2
   11144:	ldr	r2, [r0]
   11148:	mov	r0, #1
   1114c:	bl	10f5c <__printf_chk@plt>
   11150:	movw	r1, #21608	; 0x5468
   11154:	mov	r0, #0
   11158:	mov	r2, #5
   1115c:	movt	r1, #1
   11160:	bl	10e30 <dcgettext@plt>
   11164:	movw	r9, #28996	; 0x7144
   11168:	movt	r9, #2
   1116c:	ldr	r1, [r9]
   11170:	bl	10dc4 <fputs_unlocked@plt>
   11174:	movw	r1, #22807	; 0x5917
   11178:	mov	r0, #0
   1117c:	mov	r2, #5
   11180:	movt	r1, #1
   11184:	bl	10e30 <dcgettext@plt>
   11188:	ldr	r1, [r9]
   1118c:	bl	10dc4 <fputs_unlocked@plt>
   11190:	movw	r1, #21883	; 0x557b
   11194:	mov	r0, #0
   11198:	mov	r2, #5
   1119c:	movt	r1, #1
   111a0:	bl	10e30 <dcgettext@plt>
   111a4:	ldr	r1, [r9]
   111a8:	bl	10dc4 <fputs_unlocked@plt>
   111ac:	movw	r1, #21933	; 0x55ad
   111b0:	mov	r0, #0
   111b4:	mov	r2, #5
   111b8:	movt	r1, #1
   111bc:	bl	10e30 <dcgettext@plt>
   111c0:	ldr	r1, [r9]
   111c4:	bl	10dc4 <fputs_unlocked@plt>
   111c8:	movw	r1, #22010	; 0x55fa
   111cc:	mov	r0, #0
   111d0:	mov	r2, #5
   111d4:	movt	r1, #1
   111d8:	bl	10e30 <dcgettext@plt>
   111dc:	ldr	r1, [r9]
   111e0:	bl	10dc4 <fputs_unlocked@plt>
   111e4:	movw	r1, #22122	; 0x566a
   111e8:	mov	r0, #0
   111ec:	mov	r2, #5
   111f0:	movt	r1, #1
   111f4:	bl	10e30 <dcgettext@plt>
   111f8:	ldr	r1, [r9]
   111fc:	bl	10dc4 <fputs_unlocked@plt>
   11200:	movw	r1, #22167	; 0x5697
   11204:	mov	r0, #0
   11208:	mov	r2, #5
   1120c:	movt	r1, #1
   11210:	bl	10e30 <dcgettext@plt>
   11214:	ldr	r1, [r9]
   11218:	bl	10dc4 <fputs_unlocked@plt>
   1121c:	movw	r1, #22882	; 0x5962
   11220:	mov	r0, #0
   11224:	mov	r2, #5
   11228:	movt	r1, #1
   1122c:	bl	10e30 <dcgettext@plt>
   11230:	ldr	r1, [r9]
   11234:	bl	10dc4 <fputs_unlocked@plt>
   11238:	movw	r1, #22221	; 0x56cd
   1123c:	mov	r0, #0
   11240:	mov	r2, #5
   11244:	movt	r1, #1
   11248:	bl	10e30 <dcgettext@plt>
   1124c:	ldr	r1, [r9]
   11250:	bl	10dc4 <fputs_unlocked@plt>
   11254:	movw	r0, #23720	; 0x5ca8
   11258:	mov	r6, sp
   1125c:	movt	r0, #1
   11260:	mov	r1, r6
   11264:	ldm	r0!, {r2, r3, r4, r5}
   11268:	stmia	r1!, {r2, r3, r4, r5}
   1126c:	ldm	r0!, {r2, r3, r4, r5, r7}
   11270:	stmia	r1!, {r2, r3, r4, r5, r7}
   11274:	ldm	r0, {r2, r3, r4, r5, r7}
   11278:	stm	r1, {r2, r3, r4, r5, r7}
   1127c:	movw	r1, #23094	; 0x5a36
   11280:	movw	r5, #22412	; 0x578c
   11284:	movt	r1, #1
   11288:	movt	r5, #1
   1128c:	mov	r0, r5
   11290:	bl	10ddc <strcmp@plt>
   11294:	cmp	r0, #0
   11298:	ldrne	r1, [r6, #8]!
   1129c:	cmpne	r1, #0
   112a0:	bne	1128c <__assert_fail@plt+0x27c>
   112a4:	movw	r1, #23189	; 0x5a95
   112a8:	ldr	r6, [r6, #4]
   112ac:	mov	r0, #0
   112b0:	mov	r2, #5
   112b4:	movt	r1, #1
   112b8:	bl	10e30 <dcgettext@plt>
   112bc:	movw	r2, #22536	; 0x5808
   112c0:	movw	r3, #23212	; 0x5aac
   112c4:	mov	r1, r0
   112c8:	mov	r0, #1
   112cc:	movt	r2, #1
   112d0:	movt	r3, #1
   112d4:	bl	10f5c <__printf_chk@plt>
   112d8:	cmp	r6, #0
   112dc:	mov	r0, #5
   112e0:	mov	r1, #0
   112e4:	moveq	r6, r5
   112e8:	bl	10fa4 <setlocale@plt>
   112ec:	cmp	r0, #0
   112f0:	beq	11328 <__assert_fail@plt+0x318>
   112f4:	movw	r1, #23252	; 0x5ad4
   112f8:	mov	r2, #3
   112fc:	movt	r1, #1
   11300:	bl	10fec <strncmp@plt>
   11304:	cmp	r0, #0
   11308:	beq	11328 <__assert_fail@plt+0x318>
   1130c:	movw	r1, #23256	; 0x5ad8
   11310:	mov	r0, #0
   11314:	mov	r2, #5
   11318:	movt	r1, #1
   1131c:	bl	10e30 <dcgettext@plt>
   11320:	ldr	r1, [r9]
   11324:	bl	10dc4 <fputs_unlocked@plt>
   11328:	movw	r1, #23327	; 0x5b1f
   1132c:	mov	r0, #0
   11330:	mov	r2, #5
   11334:	movt	r1, #1
   11338:	bl	10e30 <dcgettext@plt>
   1133c:	movw	r2, #23212	; 0x5aac
   11340:	mov	r1, r0
   11344:	mov	r0, #1
   11348:	mov	r3, r5
   1134c:	movt	r2, #1
   11350:	bl	10f5c <__printf_chk@plt>
   11354:	movw	r1, #23354	; 0x5b3a
   11358:	mov	r0, #0
   1135c:	mov	r2, #5
   11360:	movt	r1, #1
   11364:	bl	10e30 <dcgettext@plt>
   11368:	mov	r1, r0
   1136c:	movw	r0, #23122	; 0x5a52
   11370:	movw	r3, #23404	; 0x5b6c
   11374:	cmp	r6, r5
   11378:	mov	r2, r6
   1137c:	movt	r0, #1
   11380:	movt	r3, #1
   11384:	moveq	r3, r0
   11388:	mov	r0, #1
   1138c:	bl	10f5c <__printf_chk@plt>
   11390:	mov	r0, r8
   11394:	bl	10f08 <exit@plt>
   11398:	movw	r0, #28992	; 0x7140
   1139c:	movw	r1, #21540	; 0x5424
   113a0:	mov	r2, #5
   113a4:	movt	r0, #2
   113a8:	movt	r1, #1
   113ac:	ldr	r5, [r0]
   113b0:	mov	r0, #0
   113b4:	bl	10e30 <dcgettext@plt>
   113b8:	mov	r2, r0
   113bc:	movw	r0, #29024	; 0x7160
   113c0:	mov	r1, #1
   113c4:	movt	r0, #2
   113c8:	ldr	r3, [r0]
   113cc:	mov	r0, r5
   113d0:	bl	10f74 <__fprintf_chk@plt>
   113d4:	b	11390 <__assert_fail@plt+0x380>
   113d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113dc:	add	fp, sp, #28
   113e0:	sub	sp, sp, #172	; 0xac
   113e4:	mov	sl, r0
   113e8:	ldr	r0, [r1]
   113ec:	mov	r9, r1
   113f0:	bl	120b4 <__assert_fail@plt+0x10a4>
   113f4:	movw	r1, #23404	; 0x5b6c
   113f8:	mov	r0, #6
   113fc:	movt	r1, #1
   11400:	bl	10fa4 <setlocale@plt>
   11404:	movw	r4, #22540	; 0x580c
   11408:	movw	r1, #22421	; 0x5795
   1140c:	movt	r4, #1
   11410:	movt	r1, #1
   11414:	mov	r0, r4
   11418:	bl	10fc8 <bindtextdomain@plt>
   1141c:	mov	r0, r4
   11420:	bl	10e48 <textdomain@plt>
   11424:	movw	r0, #8140	; 0x1fcc
   11428:	movt	r0, #1
   1142c:	bl	153e0 <__assert_fail@plt+0x43d0>
   11430:	movw	r7, #22445	; 0x57ad
   11434:	movw	r8, #29000	; 0x7148
   11438:	movw	r4, #29012	; 0x7154
   1143c:	mov	r0, #0
   11440:	mov	r5, #0
   11444:	mov	r6, #0
   11448:	movt	r7, #1
   1144c:	movt	r8, #2
   11450:	movt	r4, #2
   11454:	str	r0, [sp, #36]	; 0x24
   11458:	movw	r3, #23608	; 0x5c38
   1145c:	mov	r0, sl
   11460:	mov	r1, r9
   11464:	mov	r2, r7
   11468:	str	r5, [sp]
   1146c:	movt	r3, #1
   11470:	bl	10ef0 <getopt_long@plt>
   11474:	cmp	r0, #110	; 0x6e
   11478:	ble	11498 <__assert_fail@plt+0x488>
   1147c:	cmp	r0, #111	; 0x6f
   11480:	beq	114b4 <__assert_fail@plt+0x4a4>
   11484:	cmp	r0, #114	; 0x72
   11488:	bne	114c8 <__assert_fail@plt+0x4b8>
   1148c:	ldr	r0, [r8]
   11490:	str	r0, [r4]
   11494:	b	11458 <__assert_fail@plt+0x448>
   11498:	cmp	r0, #98	; 0x62
   1149c:	ble	11684 <__assert_fail@plt+0x674>
   114a0:	cmp	r0, #99	; 0x63
   114a4:	bne	11f40 <__assert_fail@plt+0xf30>
   114a8:	movw	r0, #29008	; 0x7150
   114ac:	movt	r0, #2
   114b0:	b	114bc <__assert_fail@plt+0x4ac>
   114b4:	movw	r0, #29009	; 0x7151
   114b8:	movt	r0, #2
   114bc:	mov	r1, #1
   114c0:	strb	r1, [r0]
   114c4:	b	11458 <__assert_fail@plt+0x448>
   114c8:	cmp	r0, #115	; 0x73
   114cc:	bne	11f40 <__assert_fail@plt+0xf30>
   114d0:	bl	10efc <__ctype_b_loc@plt>
   114d4:	ldr	r6, [r8]
   114d8:	ldr	r2, [r0]
   114dc:	ldrb	r1, [r6]
   114e0:	add	r2, r2, r1, lsl #1
   114e4:	ldrb	r2, [r2, #1]
   114e8:	tst	r2, #32
   114ec:	beq	11514 <__assert_fail@plt+0x504>
   114f0:	add	r2, r6, #1
   114f4:	str	r2, [r8]
   114f8:	ldrb	r1, [r2], #1
   114fc:	ldr	r3, [r0]
   11500:	add	r3, r3, r1, lsl #1
   11504:	ldrb	r3, [r3, #1]
   11508:	tst	r3, #32
   1150c:	bne	114f4 <__assert_fail@plt+0x4e4>
   11510:	sub	r6, r2, #1
   11514:	cmp	r1, #59	; 0x3b
   11518:	bgt	11534 <__assert_fail@plt+0x524>
   1151c:	cmp	r1, #37	; 0x25
   11520:	beq	11554 <__assert_fail@plt+0x544>
   11524:	cmp	r1, #47	; 0x2f
   11528:	bne	1154c <__assert_fail@plt+0x53c>
   1152c:	mov	r1, #4
   11530:	b	11560 <__assert_fail@plt+0x550>
   11534:	cmp	r1, #60	; 0x3c
   11538:	beq	1155c <__assert_fail@plt+0x54c>
   1153c:	cmp	r1, #62	; 0x3e
   11540:	bne	1154c <__assert_fail@plt+0x53c>
   11544:	mov	r1, #2
   11548:	b	11560 <__assert_fail@plt+0x550>
   1154c:	ldr	r1, [sp, #36]	; 0x24
   11550:	b	11568 <__assert_fail@plt+0x558>
   11554:	mov	r1, #5
   11558:	b	11560 <__assert_fail@plt+0x550>
   1155c:	mov	r1, #3
   11560:	add	r6, r6, #1
   11564:	str	r6, [r8]
   11568:	ldrb	r2, [r6]
   1156c:	ldr	r3, [r0]
   11570:	str	r9, [sp, #60]	; 0x3c
   11574:	add	r3, r3, r2, lsl #1
   11578:	ldrb	r3, [r3, #1]
   1157c:	tst	r3, #32
   11580:	bne	1158c <__assert_fail@plt+0x57c>
   11584:	mov	r9, r7
   11588:	b	115b4 <__assert_fail@plt+0x5a4>
   1158c:	add	r3, r6, #1
   11590:	str	r3, [r8]
   11594:	ldrb	r2, [r3], #1
   11598:	ldr	r6, [r0]
   1159c:	add	r6, r6, r2, lsl #1
   115a0:	ldrb	r6, [r6, #1]
   115a4:	tst	r6, #32
   115a8:	bne	11590 <__assert_fail@plt+0x580>
   115ac:	mov	r9, r7
   115b0:	sub	r6, r3, #1
   115b4:	cmp	r2, #45	; 0x2d
   115b8:	mov	r7, r4
   115bc:	cmpne	r2, #43	; 0x2b
   115c0:	bne	115d4 <__assert_fail@plt+0x5c4>
   115c4:	mov	r4, #1
   115c8:	cmp	r1, #0
   115cc:	beq	115d8 <__assert_fail@plt+0x5c8>
   115d0:	b	11e74 <__assert_fail@plt+0xe64>
   115d4:	mov	r4, r1
   115d8:	movw	r1, #22504	; 0x57e8
   115dc:	mov	r0, #0
   115e0:	mov	r2, #5
   115e4:	movt	r1, #1
   115e8:	bl	10e30 <dcgettext@plt>
   115ec:	mvn	r1, #0
   115f0:	str	r0, [sp, #12]
   115f4:	mov	r0, #0
   115f8:	mov	r2, #0
   115fc:	mov	r3, #-2147483648	; 0x80000000
   11600:	str	r1, [sp]
   11604:	mvn	r1, #-2147483648	; 0x80000000
   11608:	str	r0, [sp, #16]
   1160c:	mov	r0, r6
   11610:	str	r1, [sp, #4]
   11614:	movw	r1, #22490	; 0x57da
   11618:	movt	r1, #1
   1161c:	str	r1, [sp, #8]
   11620:	bl	14628 <__assert_fail@plt+0x3618>
   11624:	str	r0, [sp, #52]	; 0x34
   11628:	orr	r0, r4, #1
   1162c:	str	r4, [sp, #36]	; 0x24
   11630:	mov	r4, r7
   11634:	mov	r7, r9
   11638:	ldr	r9, [sp, #60]	; 0x3c
   1163c:	mov	r6, #1
   11640:	mov	r5, #0
   11644:	str	r1, [sp, #44]	; 0x2c
   11648:	cmp	r0, #5
   1164c:	bne	11458 <__assert_fail@plt+0x448>
   11650:	ldr	r0, [sp, #52]	; 0x34
   11654:	ldr	r1, [sp, #44]	; 0x2c
   11658:	orrs	r0, r0, r1
   1165c:	bne	11458 <__assert_fail@plt+0x448>
   11660:	movw	r1, #22519	; 0x57f7
   11664:	mov	r0, #0
   11668:	mov	r2, #5
   1166c:	movt	r1, #1
   11670:	bl	10e30 <dcgettext@plt>
   11674:	mov	r2, r0
   11678:	mov	r0, #1
   1167c:	mov	r1, #0
   11680:	bl	10ea8 <error@plt>
   11684:	cmn	r0, #1
   11688:	bne	11e14 <__assert_fail@plt+0xe04>
   1168c:	ldr	r0, [r4]
   11690:	movw	r8, #29009	; 0x7151
   11694:	movt	r8, #2
   11698:	cmp	r0, #0
   1169c:	mov	r1, r0
   116a0:	movwne	r1, #1
   116a4:	orr	r1, r6, r1
   116a8:	tst	r1, #1
   116ac:	beq	11e80 <__assert_fail@plt+0xe70>
   116b0:	movw	r1, #28984	; 0x7138
   116b4:	cmp	r0, #0
   116b8:	movt	r1, #2
   116bc:	ldr	r7, [r1]
   116c0:	beq	116d8 <__assert_fail@plt+0x6c8>
   116c4:	ldr	r1, [sp, #36]	; 0x24
   116c8:	cmp	r1, #0
   116cc:	eoreq	r1, r6, #1
   116d0:	tsteq	r1, #1
   116d4:	beq	11eec <__assert_fail@plt+0xedc>
   116d8:	ldrb	r1, [r8]
   116dc:	mvn	r1, r1
   116e0:	orr	r1, r6, r1
   116e4:	tst	r1, #1
   116e8:	beq	11e8c <__assert_fail@plt+0xe7c>
   116ec:	cmp	r7, sl
   116f0:	bge	11ec4 <__assert_fail@plt+0xeb4>
   116f4:	cmp	r0, #0
   116f8:	beq	1173c <__assert_fail@plt+0x72c>
   116fc:	add	r1, sp, #64	; 0x40
   11700:	bl	153f8 <__assert_fail@plt+0x43e8>
   11704:	cmp	r0, #0
   11708:	bne	11f48 <__assert_fail@plt+0xf38>
   1170c:	ldr	r0, [sp, #80]	; 0x50
   11710:	and	r0, r0, #53248	; 0xd000
   11714:	orr	r0, r0, #8192	; 0x2000
   11718:	cmp	r0, #40960	; 0xa000
   1171c:	bne	11754 <__assert_fail@plt+0x744>
   11720:	ldr	r0, [sp, #116]	; 0x74
   11724:	cmn	r0, #1
   11728:	ble	11f64 <__assert_fail@plt+0xf54>
   1172c:	ldr	r4, [sp, #112]	; 0x70
   11730:	ldr	r1, [sp, #36]	; 0x24
   11734:	mov	r2, r0
   11738:	b	117d8 <__assert_fail@plt+0x7c8>
   1173c:	ldr	r1, [sp, #36]	; 0x24
   11740:	ldr	r6, [sp, #44]	; 0x2c
   11744:	mvn	r0, #0
   11748:	mvn	r4, #0
   1174c:	str	r0, [sp, #32]
   11750:	b	11800 <__assert_fail@plt+0x7f0>
   11754:	movw	r0, #29012	; 0x7154
   11758:	mov	r1, #0
   1175c:	movt	r0, #2
   11760:	ldr	r0, [r0]
   11764:	bl	10eb4 <open64@plt>
   11768:	cmp	r0, #0
   1176c:	bmi	11f64 <__assert_fail@plt+0xf54>
   11770:	mov	r4, r0
   11774:	mov	r0, #2
   11778:	mov	r2, #0
   1177c:	mov	r3, #0
   11780:	mov	sl, r9
   11784:	str	r0, [sp]
   11788:	mov	r0, r4
   1178c:	bl	10e6c <lseek64@plt>
   11790:	mov	r8, r0
   11794:	mov	r5, r1
   11798:	bl	10f38 <__errno_location@plt>
   1179c:	mov	r9, r0
   117a0:	ldr	r0, [r0]
   117a4:	str	r0, [sp, #56]	; 0x38
   117a8:	mov	r0, r4
   117ac:	mov	r4, r8
   117b0:	bl	11004 <close@plt>
   117b4:	mvn	r1, #0
   117b8:	subs	r0, r1, r8
   117bc:	sbcs	r0, r1, r5
   117c0:	bge	11f5c <__assert_fail@plt+0xf4c>
   117c4:	ldr	r1, [sp, #36]	; 0x24
   117c8:	movw	r8, #29009	; 0x7151
   117cc:	mov	r2, r5
   117d0:	mov	r9, sl
   117d4:	movt	r8, #2
   117d8:	ands	r0, r6, #1
   117dc:	ldr	r0, [sp, #52]	; 0x34
   117e0:	ldr	r6, [sp, #44]	; 0x2c
   117e4:	moveq	r0, r4
   117e8:	moveq	r6, r2
   117ec:	str	r0, [sp, #52]	; 0x34
   117f0:	mvn	r0, #0
   117f4:	moveq	r2, r0
   117f8:	moveq	r4, r0
   117fc:	str	r2, [sp, #32]
   11800:	movw	r0, #29008	; 0x7150
   11804:	mov	r3, r9
   11808:	ldr	r9, [r9, r7, lsl #2]
   1180c:	movw	r2, #2113	; 0x841
   11810:	movt	r0, #2
   11814:	ldrb	r0, [r0]
   11818:	cmp	r0, #0
   1181c:	movwne	r2, #2049	; 0x801
   11820:	cmp	r9, #0
   11824:	str	r2, [sp, #56]	; 0x38
   11828:	beq	11e04 <__assert_fail@plt+0xdf4>
   1182c:	ldr	r0, [sp, #32]
   11830:	mov	r5, #0
   11834:	str	r4, [sp, #28]
   11838:	str	r6, [sp, #44]	; 0x2c
   1183c:	cmp	r0, #0
   11840:	mov	r0, #0
   11844:	movwmi	r0, #1
   11848:	cmp	r1, #0
   1184c:	movwne	r1, #1
   11850:	and	r0, r1, r0
   11854:	str	r0, [sp, #40]	; 0x28
   11858:	add	r0, r3, r7, lsl #2
   1185c:	add	sl, r0, #4
   11860:	add	r0, sp, #64	; 0x40
   11864:	add	r0, r0, #48	; 0x30
   11868:	str	r0, [sp, #24]
   1186c:	ldr	r1, [sp, #56]	; 0x38
   11870:	mov	r0, r9
   11874:	movw	r2, #438	; 0x1b6
   11878:	bl	10eb4 <open64@plt>
   1187c:	cmn	r0, #1
   11880:	ble	11900 <__assert_fail@plt+0x8f0>
   11884:	mov	r3, r0
   11888:	ldrb	r0, [r8]
   1188c:	ldr	r1, [sp, #40]	; 0x28
   11890:	ldr	r4, [sp, #52]	; 0x34
   11894:	str	r5, [sp, #48]	; 0x30
   11898:	mov	r5, r6
   1189c:	str	r3, [sp, #60]	; 0x3c
   118a0:	orr	r0, r0, r1
   118a4:	tst	r0, #1
   118a8:	beq	11a50 <__assert_fail@plt+0xa40>
   118ac:	mov	r0, r3
   118b0:	add	r1, sp, #64	; 0x40
   118b4:	bl	15408 <__assert_fail@plt+0x43f8>
   118b8:	cmp	r0, #0
   118bc:	beq	11968 <__assert_fail@plt+0x958>
   118c0:	bl	10f38 <__errno_location@plt>
   118c4:	movw	r1, #23428	; 0x5b84
   118c8:	ldr	r4, [r0]
   118cc:	mov	r0, #0
   118d0:	mov	r2, #5
   118d4:	movt	r1, #1
   118d8:	bl	10e30 <dcgettext@plt>
   118dc:	mov	r5, r0
   118e0:	mov	r0, #4
   118e4:	mov	r1, r9
   118e8:	bl	13768 <__assert_fail@plt+0x2758>
   118ec:	mov	r3, r0
   118f0:	mov	r0, #0
   118f4:	mov	r1, r4
   118f8:	mov	r2, r5
   118fc:	b	11c5c <__assert_fail@plt+0xc4c>
   11900:	movw	r0, #29008	; 0x7150
   11904:	movt	r0, #2
   11908:	ldrb	r4, [r0]
   1190c:	bl	10f38 <__errno_location@plt>
   11910:	cmp	r4, #1
   11914:	bne	11924 <__assert_fail@plt+0x914>
   11918:	ldr	r1, [r0]
   1191c:	cmp	r1, #2
   11920:	beq	11cc8 <__assert_fail@plt+0xcb8>
   11924:	movw	r1, #22761	; 0x58e9
   11928:	ldr	r4, [r0]
   1192c:	mov	r0, #0
   11930:	mov	r2, #5
   11934:	movt	r1, #1
   11938:	bl	10e30 <dcgettext@plt>
   1193c:	mov	r5, r0
   11940:	mov	r0, #4
   11944:	mov	r1, r9
   11948:	bl	13768 <__assert_fail@plt+0x2758>
   1194c:	mov	r3, r0
   11950:	mov	r0, #0
   11954:	mov	r1, r4
   11958:	mov	r2, r5
   1195c:	bl	10ea8 <error@plt>
   11960:	mov	r5, #1
   11964:	b	11cc8 <__assert_fail@plt+0xcb8>
   11968:	ldrb	r0, [r8]
   1196c:	ldr	r4, [sp, #52]	; 0x34
   11970:	ldr	r3, [sp, #60]	; 0x3c
   11974:	mov	r5, r6
   11978:	cmp	r0, #1
   1197c:	bne	11a50 <__assert_fail@plt+0xa40>
   11980:	ldr	r0, [sp, #120]	; 0x78
   11984:	mov	r5, #512	; 0x200
   11988:	cmp	r0, #536870913	; 0x20000001
   1198c:	movcc	r5, r0
   11990:	cmp	r0, #0
   11994:	mov	r0, #512	; 0x200
   11998:	movle	r5, r0
   1199c:	cmn	r5, #1
   119a0:	ble	119c4 <__assert_fail@plt+0x9b4>
   119a4:	cmp	r5, #0
   119a8:	beq	11a3c <__assert_fail@plt+0xa2c>
   119ac:	cmn	r6, #1
   119b0:	ble	11a00 <__assert_fail@plt+0x9f0>
   119b4:	asr	r3, r5, #31
   119b8:	mvn	r0, #0
   119bc:	mvn	r1, #-2147483648	; 0x80000000
   119c0:	b	119e0 <__assert_fail@plt+0x9d0>
   119c4:	cmn	r6, #1
   119c8:	ble	11d94 <__assert_fail@plt+0xd84>
   119cc:	cmn	r5, #1
   119d0:	beq	11a3c <__assert_fail@plt+0xa2c>
   119d4:	asr	r3, r5, #31
   119d8:	mov	r0, #0
   119dc:	mov	r1, #-2147483648	; 0x80000000
   119e0:	mov	r2, r5
   119e4:	bl	15170 <__assert_fail@plt+0x4160>
   119e8:	ldr	r2, [sp, #52]	; 0x34
   119ec:	ldr	r3, [sp, #60]	; 0x3c
   119f0:	subs	r0, r0, r2
   119f4:	sbcs	r0, r1, r6
   119f8:	bge	11a3c <__assert_fail@plt+0xa2c>
   119fc:	b	11dbc <__assert_fail@plt+0xdac>
   11a00:	ldr	r0, [sp, #52]	; 0x34
   11a04:	mvn	r1, #0
   11a08:	eor	r0, r0, r1
   11a0c:	eor	r1, r6, r1
   11a10:	orrs	r0, r0, r1
   11a14:	beq	11a3c <__assert_fail@plt+0xa2c>
   11a18:	ldr	r2, [sp, #52]	; 0x34
   11a1c:	mov	r0, #0
   11a20:	mov	r1, #-2147483648	; 0x80000000
   11a24:	mov	r3, r6
   11a28:	bl	15170 <__assert_fail@plt+0x4160>
   11a2c:	ldr	r3, [sp, #60]	; 0x3c
   11a30:	subs	r0, r0, r5
   11a34:	sbcs	r0, r1, r5, asr #31
   11a38:	blt	11dbc <__assert_fail@plt+0xdac>
   11a3c:	ldr	r2, [sp, #52]	; 0x34
   11a40:	asr	r1, r5, #31
   11a44:	umull	r4, r0, r2, r5
   11a48:	mla	r0, r2, r1, r0
   11a4c:	mla	r5, r6, r5, r0
   11a50:	ldr	r1, [sp, #36]	; 0x24
   11a54:	cmp	r1, #0
   11a58:	beq	11be4 <__assert_fail@plt+0xbd4>
   11a5c:	ldr	r8, [sp, #28]
   11a60:	ldr	r6, [sp, #32]
   11a64:	mvn	r2, #0
   11a68:	subs	r0, r2, r8
   11a6c:	sbcs	r0, r2, r6
   11a70:	bge	11aa4 <__assert_fail@plt+0xa94>
   11a74:	sub	r0, r1, #2
   11a78:	cmp	r0, #3
   11a7c:	bhi	11b54 <__assert_fail@plt+0xb44>
   11a80:	add	r1, pc, #0
   11a84:	ldr	pc, [r1, r0, lsl #2]
   11a88:	muleq	r1, r8, sl
   11a8c:	andeq	r1, r1, ip, lsr #22
   11a90:	ldrdeq	r1, [r1], -r0
   11a94:	strdeq	r1, [r1], -r8
   11a98:	subs	r0, r4, r8
   11a9c:	sbcs	r0, r5, r6
   11aa0:	b	11b34 <__assert_fail@plt+0xb24>
   11aa4:	ldr	r0, [sp, #80]	; 0x50
   11aa8:	and	r0, r0, #53248	; 0xd000
   11aac:	orr	r0, r0, #8192	; 0x2000
   11ab0:	cmp	r0, #40960	; 0xa000
   11ab4:	bne	11cd8 <__assert_fail@plt+0xcc8>
   11ab8:	ldr	r0, [sp, #24]
   11abc:	ldr	r6, [r0, #4]
   11ac0:	cmn	r6, #1
   11ac4:	ble	11d0c <__assert_fail@plt+0xcfc>
   11ac8:	ldr	r8, [r0]
   11acc:	b	11a74 <__assert_fail@plt+0xa64>
   11ad0:	mov	r7, r3
   11ad4:	mov	r0, r8
   11ad8:	mov	r1, r6
   11adc:	mov	r2, r4
   11ae0:	mov	r3, r5
   11ae4:	bl	15170 <__assert_fail@plt+0x4160>
   11ae8:	subs	r4, r8, r2
   11aec:	sbc	r5, r6, r3
   11af0:	mov	r3, r7
   11af4:	b	11b48 <__assert_fail@plt+0xb38>
   11af8:	mov	r7, r3
   11afc:	mov	r0, r8
   11b00:	mov	r1, r6
   11b04:	mov	r2, r4
   11b08:	mov	r3, r5
   11b0c:	bl	15170 <__assert_fail@plt+0x4160>
   11b10:	subs	r4, r4, r2
   11b14:	sbc	r0, r5, r3
   11b18:	orrs	r1, r2, r3
   11b1c:	mov	r3, r7
   11b20:	moveq	r4, r1
   11b24:	moveq	r0, r1
   11b28:	b	11b58 <__assert_fail@plt+0xb48>
   11b2c:	subs	r0, r8, r4
   11b30:	sbcs	r0, r6, r5
   11b34:	mov	r0, #0
   11b38:	movwlt	r0, #1
   11b3c:	cmp	r0, #0
   11b40:	movne	r5, r6
   11b44:	movne	r4, r8
   11b48:	movw	r8, #29009	; 0x7151
   11b4c:	movt	r8, #2
   11b50:	b	11be4 <__assert_fail@plt+0xbd4>
   11b54:	mov	r0, r5
   11b58:	cmn	r6, #1
   11b5c:	mov	r1, #0
   11b60:	mov	r2, #0
   11b64:	movwgt	r1, #1
   11b68:	adds	r4, r8, r4
   11b6c:	movw	r8, #29009	; 0x7151
   11b70:	adc	r5, r6, r0
   11b74:	movt	r8, #2
   11b78:	cmn	r5, #1
   11b7c:	movwgt	r2, #1
   11b80:	subs	r2, r1, r2
   11b84:	movwne	r2, #1
   11b88:	cmn	r0, #1
   11b8c:	mov	r0, #0
   11b90:	movwgt	r0, #1
   11b94:	sub	r0, r1, r0
   11b98:	clz	r0, r0
   11b9c:	lsr	r0, r0, #5
   11ba0:	and	r0, r0, r2
   11ba4:	cmp	r0, #1
   11ba8:	bne	11be4 <__assert_fail@plt+0xbd4>
   11bac:	movw	r1, #23532	; 0x5bec
   11bb0:	mov	r0, #0
   11bb4:	mov	r2, #5
   11bb8:	movt	r1, #1
   11bbc:	bl	10e30 <dcgettext@plt>
   11bc0:	mov	r4, r0
   11bc4:	mov	r0, #4
   11bc8:	mov	r1, r9
   11bcc:	bl	13768 <__assert_fail@plt+0x2758>
   11bd0:	mov	r3, r0
   11bd4:	mov	r0, #0
   11bd8:	mov	r1, #0
   11bdc:	mov	r2, r4
   11be0:	b	11c5c <__assert_fail@plt+0xc4c>
   11be4:	rsbs	r0, r4, #0
   11be8:	mov	r6, #0
   11bec:	mov	r7, #0
   11bf0:	rscs	r0, r5, #0
   11bf4:	mov	r0, r3
   11bf8:	movwlt	r6, #1
   11bfc:	cmp	r6, #0
   11c00:	moveq	r4, r6
   11c04:	movne	r6, r5
   11c08:	mov	r2, r4
   11c0c:	mov	r3, r6
   11c10:	bl	10e24 <ftruncate64@plt>
   11c14:	cmp	r0, #0
   11c18:	beq	11c64 <__assert_fail@plt+0xc54>
   11c1c:	bl	10f38 <__errno_location@plt>
   11c20:	movw	r1, #23567	; 0x5c0f
   11c24:	ldr	r5, [r0]
   11c28:	mov	r0, #0
   11c2c:	mov	r2, #5
   11c30:	movt	r1, #1
   11c34:	bl	10e30 <dcgettext@plt>
   11c38:	mov	r7, r0
   11c3c:	mov	r0, #4
   11c40:	mov	r1, r9
   11c44:	bl	13768 <__assert_fail@plt+0x2758>
   11c48:	mov	r3, r0
   11c4c:	mov	r0, #0
   11c50:	mov	r1, r5
   11c54:	mov	r2, r7
   11c58:	stm	sp, {r4, r6}
   11c5c:	bl	10ea8 <error@plt>
   11c60:	mov	r7, #1
   11c64:	ldr	r0, [sp, #60]	; 0x3c
   11c68:	bl	11004 <close@plt>
   11c6c:	cmp	r0, #0
   11c70:	beq	11cbc <__assert_fail@plt+0xcac>
   11c74:	bl	10f38 <__errno_location@plt>
   11c78:	movw	r1, #22788	; 0x5904
   11c7c:	ldr	r4, [r0]
   11c80:	mov	r0, #0
   11c84:	mov	r2, #5
   11c88:	movt	r1, #1
   11c8c:	bl	10e30 <dcgettext@plt>
   11c90:	mov	r5, r0
   11c94:	mov	r0, #4
   11c98:	mov	r1, r9
   11c9c:	bl	13768 <__assert_fail@plt+0x2758>
   11ca0:	mov	r3, r0
   11ca4:	mov	r0, #0
   11ca8:	mov	r1, r4
   11cac:	mov	r2, r5
   11cb0:	bl	10ea8 <error@plt>
   11cb4:	mov	r5, #1
   11cb8:	b	11cc4 <__assert_fail@plt+0xcb4>
   11cbc:	ldr	r5, [sp, #48]	; 0x30
   11cc0:	orr	r5, r5, r7
   11cc4:	ldr	r6, [sp, #44]	; 0x2c
   11cc8:	ldr	r9, [sl], #4
   11ccc:	cmp	r9, #0
   11cd0:	bne	1186c <__assert_fail@plt+0x85c>
   11cd4:	b	11e08 <__assert_fail@plt+0xdf8>
   11cd8:	mov	r0, #2
   11cdc:	mov	r2, #0
   11ce0:	str	r0, [sp]
   11ce4:	mov	r0, r3
   11ce8:	mov	r3, #0
   11cec:	bl	10e6c <lseek64@plt>
   11cf0:	cmn	r1, #1
   11cf4:	ble	11d44 <__assert_fail@plt+0xd34>
   11cf8:	mov	r6, r1
   11cfc:	ldr	r1, [sp, #36]	; 0x24
   11d00:	ldr	r3, [sp, #60]	; 0x3c
   11d04:	mov	r8, r0
   11d08:	b	11a74 <__assert_fail@plt+0xa64>
   11d0c:	movw	r1, #23490	; 0x5bc2
   11d10:	mov	r0, #0
   11d14:	mov	r2, #5
   11d18:	movt	r1, #1
   11d1c:	bl	10e30 <dcgettext@plt>
   11d20:	mov	r4, r0
   11d24:	mov	r0, #4
   11d28:	mov	r1, r9
   11d2c:	bl	13768 <__assert_fail@plt+0x2758>
   11d30:	mov	r3, r0
   11d34:	mov	r0, #0
   11d38:	mov	r1, #0
   11d3c:	mov	r2, r4
   11d40:	b	11d80 <__assert_fail@plt+0xd70>
   11d44:	bl	10f38 <__errno_location@plt>
   11d48:	movw	r1, #22735	; 0x58cf
   11d4c:	ldr	r4, [r0]
   11d50:	mov	r0, #0
   11d54:	mov	r2, #5
   11d58:	movt	r1, #1
   11d5c:	bl	10e30 <dcgettext@plt>
   11d60:	mov	r5, r0
   11d64:	mov	r0, #4
   11d68:	mov	r1, r9
   11d6c:	bl	13768 <__assert_fail@plt+0x2758>
   11d70:	mov	r3, r0
   11d74:	mov	r0, #0
   11d78:	mov	r1, r4
   11d7c:	mov	r2, r5
   11d80:	bl	10ea8 <error@plt>
   11d84:	movw	r8, #29009	; 0x7151
   11d88:	mov	r7, #1
   11d8c:	movt	r8, #2
   11d90:	b	11c64 <__assert_fail@plt+0xc54>
   11d94:	asr	r3, r5, #31
   11d98:	mvn	r0, #0
   11d9c:	mvn	r1, #-2147483648	; 0x80000000
   11da0:	mov	r2, r5
   11da4:	bl	15170 <__assert_fail@plt+0x4160>
   11da8:	ldr	r2, [sp, #52]	; 0x34
   11dac:	ldr	r3, [sp, #60]	; 0x3c
   11db0:	subs	r0, r2, r0
   11db4:	sbcs	r0, r6, r1
   11db8:	bge	11a3c <__assert_fail@plt+0xa2c>
   11dbc:	movw	r1, #23444	; 0x5b94
   11dc0:	mov	r0, #0
   11dc4:	mov	r2, #5
   11dc8:	movt	r1, #1
   11dcc:	bl	10e30 <dcgettext@plt>
   11dd0:	mov	r4, r0
   11dd4:	mov	r0, #4
   11dd8:	mov	r1, r9
   11ddc:	bl	13768 <__assert_fail@plt+0x2758>
   11de0:	ldr	r1, [sp, #52]	; 0x34
   11de4:	mov	r2, r4
   11de8:	stm	sp, {r1, r6}
   11dec:	str	r0, [sp, #12]
   11df0:	mov	r0, #0
   11df4:	mov	r1, #0
   11df8:	str	r5, [sp, #8]
   11dfc:	bl	10ea8 <error@plt>
   11e00:	b	11c60 <__assert_fail@plt+0xc50>
   11e04:	mov	r5, #0
   11e08:	and	r0, r5, #1
   11e0c:	sub	sp, fp, #28
   11e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e14:	cmn	r0, #3
   11e18:	bne	11e64 <__assert_fail@plt+0xe54>
   11e1c:	movw	r0, #28904	; 0x70e8
   11e20:	movw	r2, #22550	; 0x5816
   11e24:	mov	r1, #0
   11e28:	movt	r0, #2
   11e2c:	movt	r2, #1
   11e30:	str	r1, [sp, #4]
   11e34:	movw	r1, #22412	; 0x578c
   11e38:	movt	r1, #1
   11e3c:	ldr	r3, [r0]
   11e40:	movw	r0, #28996	; 0x7144
   11e44:	str	r2, [sp]
   11e48:	movw	r2, #22536	; 0x5808
   11e4c:	movt	r0, #2
   11e50:	movt	r2, #1
   11e54:	ldr	r0, [r0]
   11e58:	bl	13fa4 <__assert_fail@plt+0x2f94>
   11e5c:	mov	r0, #0
   11e60:	bl	10f08 <exit@plt>
   11e64:	cmn	r0, #2
   11e68:	bne	11f40 <__assert_fail@plt+0xf30>
   11e6c:	mov	r0, #0
   11e70:	bl	1110c <__assert_fail@plt+0xfc>
   11e74:	movw	r1, #22452	; 0x57b4
   11e78:	movt	r1, #1
   11e7c:	b	11ecc <__assert_fail@plt+0xebc>
   11e80:	movw	r1, #22564	; 0x5824
   11e84:	movt	r1, #1
   11e88:	b	11ef4 <__assert_fail@plt+0xee4>
   11e8c:	movw	r1, #22655	; 0x587f
   11e90:	mov	r0, #0
   11e94:	mov	r2, #5
   11e98:	movt	r1, #1
   11e9c:	bl	10e30 <dcgettext@plt>
   11ea0:	movw	r1, #22687	; 0x589f
   11ea4:	mov	r4, r0
   11ea8:	mov	r0, #0
   11eac:	movt	r1, #1
   11eb0:	bl	13a90 <__assert_fail@plt+0x2a80>
   11eb4:	movw	r1, #22597	; 0x5845
   11eb8:	mov	r5, r0
   11ebc:	movt	r1, #1
   11ec0:	b	11f20 <__assert_fail@plt+0xf10>
   11ec4:	movw	r1, #22699	; 0x58ab
   11ec8:	movt	r1, #1
   11ecc:	mov	r0, #0
   11ed0:	mov	r2, #5
   11ed4:	bl	10e30 <dcgettext@plt>
   11ed8:	mov	r2, r0
   11edc:	mov	r0, #0
   11ee0:	mov	r1, #0
   11ee4:	bl	10ea8 <error@plt>
   11ee8:	b	11f40 <__assert_fail@plt+0xf30>
   11eec:	movw	r1, #22616	; 0x5858
   11ef0:	movt	r1, #1
   11ef4:	mov	r0, #0
   11ef8:	mov	r2, #5
   11efc:	bl	10e30 <dcgettext@plt>
   11f00:	movw	r1, #22597	; 0x5845
   11f04:	mov	r4, r0
   11f08:	mov	r0, #0
   11f0c:	movt	r1, #1
   11f10:	bl	13a90 <__assert_fail@plt+0x2a80>
   11f14:	movw	r1, #22604	; 0x584c
   11f18:	mov	r5, r0
   11f1c:	movt	r1, #1
   11f20:	mov	r0, #1
   11f24:	bl	13a90 <__assert_fail@plt+0x2a80>
   11f28:	str	r0, [sp]
   11f2c:	mov	r0, #0
   11f30:	mov	r1, #0
   11f34:	mov	r2, r4
   11f38:	mov	r3, r5
   11f3c:	bl	10ea8 <error@plt>
   11f40:	mov	r0, #1
   11f44:	bl	1110c <__assert_fail@plt+0xfc>
   11f48:	bl	10f38 <__errno_location@plt>
   11f4c:	ldr	r4, [r0]
   11f50:	movw	r1, #22720	; 0x58c0
   11f54:	movt	r1, #1
   11f58:	b	11f74 <__assert_fail@plt+0xf64>
   11f5c:	ldr	r0, [sp, #56]	; 0x38
   11f60:	str	r0, [r9]
   11f64:	bl	10f38 <__errno_location@plt>
   11f68:	ldr	r4, [r0]
   11f6c:	movw	r1, #22735	; 0x58cf
   11f70:	movt	r1, #1
   11f74:	mov	r0, #0
   11f78:	mov	r2, #5
   11f7c:	bl	10e30 <dcgettext@plt>
   11f80:	mov	r5, r0
   11f84:	movw	r0, #29012	; 0x7154
   11f88:	movt	r0, #2
   11f8c:	ldr	r1, [r0]
   11f90:	mov	r0, #4
   11f94:	bl	13768 <__assert_fail@plt+0x2758>
   11f98:	mov	r3, r0
   11f9c:	mov	r0, #1
   11fa0:	mov	r1, r4
   11fa4:	mov	r2, r5
   11fa8:	bl	10ea8 <error@plt>
   11fac:	movw	r1, #29016	; 0x7158
   11fb0:	movt	r1, #2
   11fb4:	str	r0, [r1]
   11fb8:	bx	lr
   11fbc:	movw	r1, #29020	; 0x715c
   11fc0:	movt	r1, #2
   11fc4:	strb	r0, [r1]
   11fc8:	bx	lr
   11fcc:	push	{r4, r5, r6, sl, fp, lr}
   11fd0:	add	fp, sp, #16
   11fd4:	sub	sp, sp, #8
   11fd8:	movw	r0, #28996	; 0x7144
   11fdc:	movt	r0, #2
   11fe0:	ldr	r0, [r0]
   11fe4:	bl	14d54 <__assert_fail@plt+0x3d44>
   11fe8:	cmp	r0, #0
   11fec:	beq	12014 <__assert_fail@plt+0x1004>
   11ff0:	movw	r0, #29020	; 0x715c
   11ff4:	movt	r0, #2
   11ff8:	ldrb	r0, [r0]
   11ffc:	cmp	r0, #0
   12000:	beq	12034 <__assert_fail@plt+0x1024>
   12004:	bl	10f38 <__errno_location@plt>
   12008:	ldr	r0, [r0]
   1200c:	cmp	r0, #32
   12010:	bne	12034 <__assert_fail@plt+0x1024>
   12014:	movw	r0, #28992	; 0x7140
   12018:	movt	r0, #2
   1201c:	ldr	r0, [r0]
   12020:	bl	14d54 <__assert_fail@plt+0x3d44>
   12024:	cmp	r0, #0
   12028:	subeq	sp, fp, #16
   1202c:	popeq	{r4, r5, r6, sl, fp, pc}
   12030:	b	120a4 <__assert_fail@plt+0x1094>
   12034:	movw	r1, #23791	; 0x5cef
   12038:	mov	r0, #0
   1203c:	mov	r2, #5
   12040:	movt	r1, #1
   12044:	bl	10e30 <dcgettext@plt>
   12048:	mov	r4, r0
   1204c:	movw	r0, #29016	; 0x7158
   12050:	movt	r0, #2
   12054:	ldr	r6, [r0]
   12058:	bl	10f38 <__errno_location@plt>
   1205c:	ldr	r5, [r0]
   12060:	cmp	r6, #0
   12064:	bne	12080 <__assert_fail@plt+0x1070>
   12068:	movw	r2, #23807	; 0x5cff
   1206c:	mov	r0, #0
   12070:	mov	r1, r5
   12074:	mov	r3, r4
   12078:	movt	r2, #1
   1207c:	b	120a0 <__assert_fail@plt+0x1090>
   12080:	mov	r0, r6
   12084:	bl	13860 <__assert_fail@plt+0x2850>
   12088:	movw	r2, #23803	; 0x5cfb
   1208c:	mov	r3, r0
   12090:	str	r4, [sp]
   12094:	mov	r0, #0
   12098:	mov	r1, r5
   1209c:	movt	r2, #1
   120a0:	bl	10ea8 <error@plt>
   120a4:	movw	r0, #28908	; 0x70ec
   120a8:	movt	r0, #2
   120ac:	ldr	r0, [r0]
   120b0:	bl	10e00 <_exit@plt>
   120b4:	push	{r4, r5, fp, lr}
   120b8:	add	fp, sp, #8
   120bc:	cmp	r0, #0
   120c0:	beq	12154 <__assert_fail@plt+0x1144>
   120c4:	mov	r1, #47	; 0x2f
   120c8:	mov	r4, r0
   120cc:	bl	10fb0 <strrchr@plt>
   120d0:	cmp	r0, #0
   120d4:	mov	r5, r4
   120d8:	addne	r5, r0, #1
   120dc:	sub	r0, r5, r4
   120e0:	cmp	r0, #7
   120e4:	blt	12138 <__assert_fail@plt+0x1128>
   120e8:	movw	r1, #23866	; 0x5d3a
   120ec:	sub	r0, r5, #7
   120f0:	mov	r2, #7
   120f4:	movt	r1, #1
   120f8:	bl	10fec <strncmp@plt>
   120fc:	cmp	r0, #0
   12100:	bne	12138 <__assert_fail@plt+0x1128>
   12104:	movw	r1, #23874	; 0x5d42
   12108:	mov	r0, r5
   1210c:	mov	r2, #3
   12110:	movt	r1, #1
   12114:	bl	10fec <strncmp@plt>
   12118:	cmp	r0, #0
   1211c:	beq	12128 <__assert_fail@plt+0x1118>
   12120:	mov	r4, r5
   12124:	b	12138 <__assert_fail@plt+0x1128>
   12128:	movw	r0, #28976	; 0x7130
   1212c:	add	r4, r5, #3
   12130:	movt	r0, #2
   12134:	str	r4, [r0]
   12138:	movw	r0, #28980	; 0x7134
   1213c:	movt	r0, #2
   12140:	str	r4, [r0]
   12144:	movw	r0, #29024	; 0x7160
   12148:	movt	r0, #2
   1214c:	str	r4, [r0]
   12150:	pop	{r4, r5, fp, pc}
   12154:	movw	r0, #28992	; 0x7140
   12158:	movt	r0, #2
   1215c:	ldr	r1, [r0]
   12160:	movw	r0, #23810	; 0x5d02
   12164:	movt	r0, #1
   12168:	bl	10fe0 <fputs@plt>
   1216c:	bl	10ff8 <abort@plt>
   12170:	push	{r4, r5, r6, sl, fp, lr}
   12174:	add	fp, sp, #16
   12178:	mov	r4, r0
   1217c:	movw	r0, #29032	; 0x7168
   12180:	movt	r0, #2
   12184:	cmp	r4, #0
   12188:	moveq	r4, r0
   1218c:	bl	10f38 <__errno_location@plt>
   12190:	ldr	r6, [r0]
   12194:	mov	r5, r0
   12198:	mov	r0, r4
   1219c:	mov	r1, #48	; 0x30
   121a0:	bl	143fc <__assert_fail@plt+0x33ec>
   121a4:	str	r6, [r5]
   121a8:	pop	{r4, r5, r6, sl, fp, pc}
   121ac:	movw	r1, #29032	; 0x7168
   121b0:	cmp	r0, #0
   121b4:	movt	r1, #2
   121b8:	movne	r1, r0
   121bc:	ldr	r0, [r1]
   121c0:	bx	lr
   121c4:	movw	r2, #29032	; 0x7168
   121c8:	cmp	r0, #0
   121cc:	movt	r2, #2
   121d0:	movne	r2, r0
   121d4:	str	r1, [r2]
   121d8:	bx	lr
   121dc:	movw	r3, #29032	; 0x7168
   121e0:	cmp	r0, #0
   121e4:	and	r2, r2, #1
   121e8:	movt	r3, #2
   121ec:	movne	r3, r0
   121f0:	ubfx	r0, r1, #5, #3
   121f4:	and	r1, r1, #31
   121f8:	add	ip, r3, r0, lsl #2
   121fc:	mov	r0, #1
   12200:	ldr	r3, [ip, #8]
   12204:	and	r0, r0, r3, lsr r1
   12208:	eor	r2, r0, r2
   1220c:	eor	r1, r3, r2, lsl r1
   12210:	str	r1, [ip, #8]
   12214:	bx	lr
   12218:	movw	r2, #29032	; 0x7168
   1221c:	cmp	r0, #0
   12220:	movt	r2, #2
   12224:	movne	r2, r0
   12228:	ldr	r0, [r2, #4]
   1222c:	str	r1, [r2, #4]
   12230:	bx	lr
   12234:	push	{fp, lr}
   12238:	mov	fp, sp
   1223c:	movw	r3, #29032	; 0x7168
   12240:	cmp	r0, #0
   12244:	movt	r3, #2
   12248:	movne	r3, r0
   1224c:	cmp	r1, #0
   12250:	mov	r0, #10
   12254:	cmpne	r2, #0
   12258:	str	r0, [r3]
   1225c:	bne	12264 <__assert_fail@plt+0x1254>
   12260:	bl	10ff8 <abort@plt>
   12264:	str	r1, [r3, #40]	; 0x28
   12268:	str	r2, [r3, #44]	; 0x2c
   1226c:	pop	{fp, pc}
   12270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12274:	add	fp, sp, #28
   12278:	sub	sp, sp, #20
   1227c:	mov	r7, r0
   12280:	ldr	r0, [fp, #8]
   12284:	movw	r5, #29032	; 0x7168
   12288:	mov	r8, r3
   1228c:	mov	r9, r2
   12290:	mov	sl, r1
   12294:	movt	r5, #2
   12298:	cmp	r0, #0
   1229c:	movne	r5, r0
   122a0:	bl	10f38 <__errno_location@plt>
   122a4:	ldr	r2, [r5, #40]	; 0x28
   122a8:	ldr	r3, [r5, #44]	; 0x2c
   122ac:	mov	r4, r0
   122b0:	ldm	r5, {r0, r1}
   122b4:	add	r5, r5, #8
   122b8:	ldr	r6, [r4]
   122bc:	stm	sp, {r0, r1, r5}
   122c0:	mov	r0, r7
   122c4:	mov	r1, sl
   122c8:	str	r2, [sp, #12]
   122cc:	str	r3, [sp, #16]
   122d0:	mov	r2, r9
   122d4:	mov	r3, r8
   122d8:	bl	122e8 <__assert_fail@plt+0x12d8>
   122dc:	str	r6, [r4]
   122e0:	sub	sp, fp, #28
   122e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122ec:	add	fp, sp, #28
   122f0:	sub	sp, sp, #156	; 0x9c
   122f4:	mov	r5, r0
   122f8:	add	r0, r2, #1
   122fc:	mov	r6, r1
   12300:	mov	sl, r3
   12304:	str	r2, [fp, #-80]	; 0xffffffb0
   12308:	str	r0, [sp, #72]	; 0x48
   1230c:	ldr	r0, [fp, #12]
   12310:	and	r1, r0, #1
   12314:	str	r1, [sp, #32]
   12318:	and	r1, r0, #4
   1231c:	str	r1, [sp, #28]
   12320:	ubfx	r9, r0, #1, #1
   12324:	bl	10e78 <__ctype_get_mb_cur_max@plt>
   12328:	str	r0, [sp, #40]	; 0x28
   1232c:	ldr	r0, [fp, #24]
   12330:	ldr	r7, [fp, #8]
   12334:	mov	r1, #0
   12338:	mov	lr, #0
   1233c:	str	r5, [fp, #-84]	; 0xffffffac
   12340:	str	r1, [sp, #60]	; 0x3c
   12344:	mov	r1, #1
   12348:	str	r1, [fp, #-48]	; 0xffffffd0
   1234c:	str	r0, [sp, #80]	; 0x50
   12350:	ldr	r0, [fp, #20]
   12354:	str	r0, [sp, #76]	; 0x4c
   12358:	mov	r0, #0
   1235c:	str	r0, [sp, #56]	; 0x38
   12360:	mov	r0, #0
   12364:	str	r0, [fp, #-88]	; 0xffffffa8
   12368:	mov	r0, #0
   1236c:	str	r0, [fp, #-72]	; 0xffffffb8
   12370:	mov	r0, #0
   12374:	cmp	r7, #10
   12378:	bhi	13354 <__assert_fail@plt+0x2344>
   1237c:	add	r1, pc, #24
   12380:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12384:	mov	ip, r6
   12388:	mov	r8, #0
   1238c:	mov	r2, #1
   12390:	mov	r6, #0
   12394:	mov	r3, sl
   12398:	ldr	pc, [r1, r7, lsl #2]
   1239c:	andeq	r2, r1, r8, lsl #9
   123a0:	ldrdeq	r2, [r1], -ip
   123a4:	muleq	r1, ip, r4
   123a8:	andeq	r2, r1, r0, lsl #9
   123ac:	ldrdeq	r2, [r1], -r0
   123b0:	andeq	r2, r1, r4, lsl #10
   123b4:	andeq	r2, r1, ip, lsr #9
   123b8:	andeq	r2, r1, r8, lsl #11
   123bc:	andeq	r2, r1, r8, asr #7
   123c0:	andeq	r2, r1, r8, asr #7
   123c4:	andeq	r2, r1, r8, lsl #8
   123c8:	movw	r0, #23956	; 0x5d94
   123cc:	mov	r1, r7
   123d0:	mov	r6, r5
   123d4:	mov	r4, ip
   123d8:	mov	r5, lr
   123dc:	movt	r0, #1
   123e0:	bl	13ab8 <__assert_fail@plt+0x2aa8>
   123e4:	str	r0, [sp, #76]	; 0x4c
   123e8:	movw	r0, #23958	; 0x5d96
   123ec:	mov	r1, r7
   123f0:	movt	r0, #1
   123f4:	bl	13ab8 <__assert_fail@plt+0x2aa8>
   123f8:	mov	lr, r5
   123fc:	mov	r5, r6
   12400:	mov	ip, r4
   12404:	str	r0, [sp, #80]	; 0x50
   12408:	mov	r8, #0
   1240c:	tst	r9, #1
   12410:	str	lr, [sp, #44]	; 0x2c
   12414:	bne	1244c <__assert_fail@plt+0x143c>
   12418:	ldr	r0, [sp, #76]	; 0x4c
   1241c:	ldrb	r0, [r0]
   12420:	cmp	r0, #0
   12424:	beq	1244c <__assert_fail@plt+0x143c>
   12428:	ldr	r1, [sp, #76]	; 0x4c
   1242c:	mov	r8, #0
   12430:	add	r1, r1, #1
   12434:	cmp	r8, ip
   12438:	strbcc	r0, [r5, r8]
   1243c:	ldrb	r0, [r1, r8]
   12440:	add	r8, r8, #1
   12444:	cmp	r0, #0
   12448:	bne	12434 <__assert_fail@plt+0x1424>
   1244c:	ldr	r6, [sp, #80]	; 0x50
   12450:	mov	r4, ip
   12454:	mov	r0, r6
   12458:	bl	10f20 <strlen@plt>
   1245c:	mov	ip, r4
   12460:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12464:	ldr	lr, [sp, #44]	; 0x2c
   12468:	str	r6, [fp, #-88]	; 0xffffffa8
   1246c:	str	r0, [fp, #-72]	; 0xffffffb8
   12470:	mov	r2, #1
   12474:	mov	r6, r9
   12478:	mov	r3, sl
   1247c:	b	12588 <__assert_fail@plt+0x1578>
   12480:	mov	r0, #1
   12484:	b	124dc <__assert_fail@plt+0x14cc>
   12488:	mov	r7, #0
   1248c:	mov	r8, #0
   12490:	mov	r2, r0
   12494:	mov	r6, #0
   12498:	b	12588 <__assert_fail@plt+0x1578>
   1249c:	tst	r9, #1
   124a0:	bne	124dc <__assert_fail@plt+0x14cc>
   124a4:	mov	r2, r0
   124a8:	b	12534 <__assert_fail@plt+0x1524>
   124ac:	mov	r0, #1
   124b0:	mov	r8, #0
   124b4:	mov	r7, #5
   124b8:	mov	r2, #1
   124bc:	str	r0, [fp, #-72]	; 0xffffffb8
   124c0:	movw	r0, #23954	; 0x5d92
   124c4:	movt	r0, #1
   124c8:	str	r0, [fp, #-88]	; 0xffffffa8
   124cc:	b	124fc <__assert_fail@plt+0x14ec>
   124d0:	mov	r2, #1
   124d4:	tst	r9, #1
   124d8:	beq	12534 <__assert_fail@plt+0x1524>
   124dc:	mov	r1, #1
   124e0:	mov	r8, #0
   124e4:	mov	r7, #2
   124e8:	mov	r2, r0
   124ec:	str	r1, [fp, #-72]	; 0xffffffb8
   124f0:	movw	r1, #23958	; 0x5d96
   124f4:	movt	r1, #1
   124f8:	str	r1, [fp, #-88]	; 0xffffffa8
   124fc:	mov	r6, #1
   12500:	b	12588 <__assert_fail@plt+0x1578>
   12504:	tst	r9, #1
   12508:	beq	12558 <__assert_fail@plt+0x1548>
   1250c:	mov	r0, #1
   12510:	mov	r8, #0
   12514:	mov	r2, #1
   12518:	mov	r6, #1
   1251c:	mov	r7, #5
   12520:	str	r0, [fp, #-72]	; 0xffffffb8
   12524:	movw	r0, #23954	; 0x5d92
   12528:	movt	r0, #1
   1252c:	str	r0, [fp, #-88]	; 0xffffffa8
   12530:	b	12588 <__assert_fail@plt+0x1578>
   12534:	cmp	ip, #0
   12538:	mov	r8, #1
   1253c:	mov	r6, #0
   12540:	mov	r7, #2
   12544:	movne	r0, #39	; 0x27
   12548:	strbne	r0, [r5]
   1254c:	movw	r0, #23958	; 0x5d96
   12550:	movt	r0, #1
   12554:	b	1257c <__assert_fail@plt+0x156c>
   12558:	cmp	ip, #0
   1255c:	mov	r8, #1
   12560:	mov	r2, #1
   12564:	mov	r7, #5
   12568:	mov	r6, #0
   1256c:	movne	r0, #34	; 0x22
   12570:	strbne	r0, [r5]
   12574:	movw	r0, #23954	; 0x5d92
   12578:	movt	r0, #1
   1257c:	str	r0, [fp, #-88]	; 0xffffffa8
   12580:	mov	r0, #1
   12584:	str	r0, [fp, #-72]	; 0xffffffb8
   12588:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1258c:	str	r7, [fp, #-68]	; 0xffffffbc
   12590:	str	r6, [fp, #-76]	; 0xffffffb4
   12594:	str	r2, [sp, #84]	; 0x54
   12598:	cmp	r0, #0
   1259c:	movwne	r0, #1
   125a0:	and	r1, r0, r6
   125a4:	and	r1, r2, r1
   125a8:	str	r1, [sp, #48]	; 0x30
   125ac:	sub	r1, r7, #2
   125b0:	clz	r1, r1
   125b4:	lsr	r1, r1, #5
   125b8:	and	r1, r1, r6
   125bc:	str	r1, [sp, #64]	; 0x40
   125c0:	subs	r1, r7, #2
   125c4:	eor	r7, r6, #1
   125c8:	movwne	r1, #1
   125cc:	str	r7, [sp, #92]	; 0x5c
   125d0:	orr	r7, r1, r7
   125d4:	and	r1, r1, r2
   125d8:	and	r0, r0, r1
   125dc:	str	r7, [sp, #68]	; 0x44
   125e0:	mov	r7, #0
   125e4:	str	r0, [fp, #-60]	; 0xffffffc4
   125e8:	orr	r0, r1, r6
   125ec:	ldr	r1, [fp, #16]
   125f0:	eor	r0, r0, #1
   125f4:	clz	r1, r1
   125f8:	lsr	r1, r1, #5
   125fc:	orr	r0, r1, r0
   12600:	str	r0, [fp, #-64]	; 0xffffffc0
   12604:	eor	r0, r2, #1
   12608:	str	r0, [sp, #52]	; 0x34
   1260c:	cmn	r3, #1
   12610:	beq	12620 <__assert_fail@plt+0x1610>
   12614:	cmp	r7, r3
   12618:	bne	1262c <__assert_fail@plt+0x161c>
   1261c:	b	13188 <__assert_fail@plt+0x2178>
   12620:	ldrb	r0, [r4, r7]
   12624:	cmp	r0, #0
   12628:	beq	13190 <__assert_fail@plt+0x2180>
   1262c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12630:	cmp	r0, #0
   12634:	beq	1267c <__assert_fail@plt+0x166c>
   12638:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1263c:	add	r5, r7, r0
   12640:	cmp	r0, #2
   12644:	bcc	12690 <__assert_fail@plt+0x1680>
   12648:	mov	r0, #0
   1264c:	cmn	r3, #1
   12650:	str	r0, [fp, #-56]	; 0xffffffc8
   12654:	bne	12698 <__assert_fail@plt+0x1688>
   12658:	mov	r0, r4
   1265c:	mov	r4, ip
   12660:	mov	r6, lr
   12664:	bl	10f20 <strlen@plt>
   12668:	mov	ip, r4
   1266c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12670:	mov	lr, r6
   12674:	mov	r3, r0
   12678:	b	12698 <__assert_fail@plt+0x1688>
   1267c:	mov	r0, #0
   12680:	mov	sl, r3
   12684:	str	r0, [fp, #-56]	; 0xffffffc8
   12688:	mov	r0, #0
   1268c:	b	12704 <__assert_fail@plt+0x16f4>
   12690:	mov	r0, #0
   12694:	str	r0, [fp, #-56]	; 0xffffffc8
   12698:	cmp	r5, r3
   1269c:	bls	126b0 <__assert_fail@plt+0x16a0>
   126a0:	ldr	r5, [fp, #-84]	; 0xffffffac
   126a4:	mov	r0, #0
   126a8:	mov	sl, r3
   126ac:	b	12704 <__assert_fail@plt+0x16f4>
   126b0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   126b4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   126b8:	add	r0, r4, r7
   126bc:	mov	r5, lr
   126c0:	mov	r6, ip
   126c4:	mov	sl, r3
   126c8:	bl	10f14 <bcmp@plt>
   126cc:	ldr	r2, [sp, #92]	; 0x5c
   126d0:	cmp	r0, #0
   126d4:	ldr	r3, [fp, #-84]	; 0xffffffac
   126d8:	mov	r1, r0
   126dc:	movwne	r1, #1
   126e0:	orr	r1, r1, r2
   126e4:	tst	r1, #1
   126e8:	beq	13214 <__assert_fail@plt+0x2204>
   126ec:	ldr	r4, [fp, #-80]	; 0xffffffb0
   126f0:	clz	r0, r0
   126f4:	mov	lr, r5
   126f8:	mov	ip, r6
   126fc:	mov	r5, r3
   12700:	lsr	r0, r0, #5
   12704:	str	r0, [fp, #-52]	; 0xffffffcc
   12708:	ldrb	r6, [r4, r7]
   1270c:	cmp	r6, #126	; 0x7e
   12710:	bhi	12c38 <__assert_fail@plt+0x1c28>
   12714:	add	r3, pc, #16
   12718:	mov	r9, #1
   1271c:	mov	r2, #110	; 0x6e
   12720:	mov	r0, #97	; 0x61
   12724:	mov	r1, #0
   12728:	ldr	pc, [r3, r6, lsl #2]
   1272c:	muleq	r1, ip, sl
   12730:	andeq	r2, r1, r8, lsr ip
   12734:	andeq	r2, r1, r8, lsr ip
   12738:	andeq	r2, r1, r8, lsr ip
   1273c:	andeq	r2, r1, r8, lsr ip
   12740:	andeq	r2, r1, r8, lsr ip
   12744:	andeq	r2, r1, r8, lsr ip
   12748:			; <UNDEFINED> instruction: 0x00012cb8
   1274c:	andeq	r2, r1, ip, ror sl
   12750:	andeq	r2, r1, r4, ror sl
   12754:	andeq	r2, r1, r8, lsl #21
   12758:	andeq	r2, r1, r0, lsr #23
   1275c:	andeq	r2, r1, ip, ror #20
   12760:	andeq	r2, r1, r4, lsl #21
   12764:	andeq	r2, r1, r8, lsr ip
   12768:	andeq	r2, r1, r8, lsr ip
   1276c:	andeq	r2, r1, r8, lsr ip
   12770:	andeq	r2, r1, r8, lsr ip
   12774:	andeq	r2, r1, r8, lsr ip
   12778:	andeq	r2, r1, r8, lsr ip
   1277c:	andeq	r2, r1, r8, lsr ip
   12780:	andeq	r2, r1, r8, lsr ip
   12784:	andeq	r2, r1, r8, lsr ip
   12788:	andeq	r2, r1, r8, lsr ip
   1278c:	andeq	r2, r1, r8, lsr ip
   12790:	andeq	r2, r1, r8, lsr ip
   12794:	andeq	r2, r1, r8, lsr ip
   12798:	andeq	r2, r1, r8, lsr ip
   1279c:	andeq	r2, r1, r8, lsr ip
   127a0:	andeq	r2, r1, r8, lsr ip
   127a4:	andeq	r2, r1, r8, lsr ip
   127a8:	andeq	r2, r1, r8, lsr ip
   127ac:	andeq	r2, r1, ip, lsl sl
   127b0:	andeq	r2, r1, r0, lsr #20
   127b4:	andeq	r2, r1, r0, lsr #20
   127b8:	andeq	r2, r1, r4, lsl #20
   127bc:	andeq	r2, r1, r0, lsr #20
   127c0:	andeq	r2, r1, r8, lsr #18
   127c4:	andeq	r2, r1, r0, lsr #20
   127c8:	andeq	r2, r1, r8, lsr #23
   127cc:	andeq	r2, r1, r0, lsr #20
   127d0:	andeq	r2, r1, r0, lsr #20
   127d4:	andeq	r2, r1, r0, lsr #20
   127d8:	andeq	r2, r1, r8, lsr #18
   127dc:	andeq	r2, r1, r8, lsr #18
   127e0:	andeq	r2, r1, r8, lsr #18
   127e4:	andeq	r2, r1, r8, lsr #18
   127e8:	andeq	r2, r1, r8, lsr #18
   127ec:	andeq	r2, r1, r8, lsr #18
   127f0:	andeq	r2, r1, r8, lsr #18
   127f4:	andeq	r2, r1, r8, lsr #18
   127f8:	andeq	r2, r1, r8, lsr #18
   127fc:	andeq	r2, r1, r8, lsr #18
   12800:	andeq	r2, r1, r8, lsr #18
   12804:	andeq	r2, r1, r8, lsr #18
   12808:	andeq	r2, r1, r8, lsr #18
   1280c:	andeq	r2, r1, r8, lsr #18
   12810:	andeq	r2, r1, r8, lsr #18
   12814:	andeq	r2, r1, r8, lsr #18
   12818:	andeq	r2, r1, r0, lsr #20
   1281c:	andeq	r2, r1, r0, lsr #20
   12820:	andeq	r2, r1, r0, lsr #20
   12824:	andeq	r2, r1, r0, lsr #20
   12828:	andeq	r2, r1, r4, ror fp
   1282c:	andeq	r2, r1, r8, lsr ip
   12830:	andeq	r2, r1, r8, lsr #18
   12834:	andeq	r2, r1, r8, lsr #18
   12838:	andeq	r2, r1, r8, lsr #18
   1283c:	andeq	r2, r1, r8, lsr #18
   12840:	andeq	r2, r1, r8, lsr #18
   12844:	andeq	r2, r1, r8, lsr #18
   12848:	andeq	r2, r1, r8, lsr #18
   1284c:	andeq	r2, r1, r8, lsr #18
   12850:	andeq	r2, r1, r8, lsr #18
   12854:	andeq	r2, r1, r8, lsr #18
   12858:	andeq	r2, r1, r8, lsr #18
   1285c:	andeq	r2, r1, r8, lsr #18
   12860:	andeq	r2, r1, r8, lsr #18
   12864:	andeq	r2, r1, r8, lsr #18
   12868:	andeq	r2, r1, r8, lsr #18
   1286c:	andeq	r2, r1, r8, lsr #18
   12870:	andeq	r2, r1, r8, lsr #18
   12874:	andeq	r2, r1, r8, lsr #18
   12878:	andeq	r2, r1, r8, lsr #18
   1287c:	andeq	r2, r1, r8, lsr #18
   12880:	andeq	r2, r1, r8, lsr #18
   12884:	andeq	r2, r1, r8, lsr #18
   12888:	andeq	r2, r1, r8, lsr #18
   1288c:	andeq	r2, r1, r8, lsr #18
   12890:	andeq	r2, r1, r8, lsr #18
   12894:	andeq	r2, r1, r8, lsr #18
   12898:	andeq	r2, r1, r0, lsr #20
   1289c:	andeq	r2, r1, r8, asr #20
   128a0:	andeq	r2, r1, r8, lsr #18
   128a4:	andeq	r2, r1, r0, lsr #20
   128a8:	andeq	r2, r1, r8, lsr #18
   128ac:	andeq	r2, r1, r0, lsr #20
   128b0:	andeq	r2, r1, r8, lsr #18
   128b4:	andeq	r2, r1, r8, lsr #18
   128b8:	andeq	r2, r1, r8, lsr #18
   128bc:	andeq	r2, r1, r8, lsr #18
   128c0:	andeq	r2, r1, r8, lsr #18
   128c4:	andeq	r2, r1, r8, lsr #18
   128c8:	andeq	r2, r1, r8, lsr #18
   128cc:	andeq	r2, r1, r8, lsr #18
   128d0:	andeq	r2, r1, r8, lsr #18
   128d4:	andeq	r2, r1, r8, lsr #18
   128d8:	andeq	r2, r1, r8, lsr #18
   128dc:	andeq	r2, r1, r8, lsr #18
   128e0:	andeq	r2, r1, r8, lsr #18
   128e4:	andeq	r2, r1, r8, lsr #18
   128e8:	andeq	r2, r1, r8, lsr #18
   128ec:	andeq	r2, r1, r8, lsr #18
   128f0:	andeq	r2, r1, r8, lsr #18
   128f4:	andeq	r2, r1, r8, lsr #18
   128f8:	andeq	r2, r1, r8, lsr #18
   128fc:	andeq	r2, r1, r8, lsr #18
   12900:	andeq	r2, r1, r8, lsr #18
   12904:	andeq	r2, r1, r8, lsr #18
   12908:	andeq	r2, r1, r8, lsr #18
   1290c:	andeq	r2, r1, r8, lsr #18
   12910:	andeq	r2, r1, r8, lsr #18
   12914:	andeq	r2, r1, r8, lsr #18
   12918:	ldrdeq	r2, [r1], -ip
   1291c:	andeq	r2, r1, r0, lsr #20
   12920:	ldrdeq	r2, [r1], -ip
   12924:	andeq	r2, r1, r4, lsl #20
   12928:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1292c:	tst	r0, #1
   12930:	bne	1295c <__assert_fail@plt+0x194c>
   12934:	ldr	r1, [fp, #16]
   12938:	ubfx	r0, r6, #5, #3
   1293c:	mov	r2, #1
   12940:	ldr	r0, [r1, r0, lsl #2]
   12944:	and	r1, r6, #31
   12948:	tst	r0, r2, lsl r1
   1294c:	beq	1295c <__assert_fail@plt+0x194c>
   12950:	mov	r0, r6
   12954:	mov	r1, r9
   12958:	b	12970 <__assert_fail@plt+0x1960>
   1295c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12960:	mov	r1, r9
   12964:	cmp	r0, #0
   12968:	mov	r0, r6
   1296c:	beq	130bc <__assert_fail@plt+0x20ac>
   12970:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12974:	tst	r2, #1
   12978:	bne	13258 <__assert_fail@plt+0x2248>
   1297c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12980:	subs	r2, r2, #2
   12984:	movwne	r2, #1
   12988:	orr	r2, r2, lr
   1298c:	tst	r2, #1
   12990:	bne	129c8 <__assert_fail@plt+0x19b8>
   12994:	cmp	r8, ip
   12998:	mov	lr, #1
   1299c:	movcc	r2, #39	; 0x27
   129a0:	strbcc	r2, [r5, r8]
   129a4:	add	r2, r8, #1
   129a8:	cmp	r2, ip
   129ac:	movcc	r3, #36	; 0x24
   129b0:	strbcc	r3, [r5, r2]
   129b4:	add	r2, r8, #2
   129b8:	add	r8, r8, #3
   129bc:	cmp	r2, ip
   129c0:	movcc	r3, #39	; 0x27
   129c4:	strbcc	r3, [r5, r2]
   129c8:	cmp	r8, ip
   129cc:	movcc	r2, #92	; 0x5c
   129d0:	strbcc	r2, [r5, r8]
   129d4:	add	r8, r8, #1
   129d8:	b	130fc <__assert_fail@plt+0x20ec>
   129dc:	cmp	sl, #1
   129e0:	beq	12a04 <__assert_fail@plt+0x19f4>
   129e4:	mov	r9, #0
   129e8:	cmn	sl, #1
   129ec:	bne	12a10 <__assert_fail@plt+0x1a00>
   129f0:	ldrb	r0, [r4, #1]
   129f4:	cmp	r0, #0
   129f8:	beq	12a04 <__assert_fail@plt+0x19f4>
   129fc:	mvn	sl, #0
   12a00:	b	12a10 <__assert_fail@plt+0x1a00>
   12a04:	mov	r9, #0
   12a08:	cmp	r7, #0
   12a0c:	beq	12a1c <__assert_fail@plt+0x1a0c>
   12a10:	mov	r0, #0
   12a14:	str	r0, [fp, #-56]	; 0xffffffc8
   12a18:	b	12928 <__assert_fail@plt+0x1918>
   12a1c:	mov	r1, #1
   12a20:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12a24:	cmp	r0, #2
   12a28:	bne	12a40 <__assert_fail@plt+0x1a30>
   12a2c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a30:	mov	r9, r1
   12a34:	tst	r0, #1
   12a38:	beq	12928 <__assert_fail@plt+0x1918>
   12a3c:	b	13258 <__assert_fail@plt+0x2248>
   12a40:	mov	r9, r1
   12a44:	b	12928 <__assert_fail@plt+0x1918>
   12a48:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12a4c:	cmp	r0, #2
   12a50:	bne	12c94 <__assert_fail@plt+0x1c84>
   12a54:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a58:	tst	r0, #1
   12a5c:	bne	13258 <__assert_fail@plt+0x2248>
   12a60:	mov	r0, #0
   12a64:	str	r0, [fp, #-56]	; 0xffffffc8
   12a68:	b	12cac <__assert_fail@plt+0x1c9c>
   12a6c:	mov	r0, #102	; 0x66
   12a70:	b	12cb8 <__assert_fail@plt+0x1ca8>
   12a74:	mov	r2, #116	; 0x74
   12a78:	b	12a88 <__assert_fail@plt+0x1a78>
   12a7c:	mov	r0, #98	; 0x62
   12a80:	b	12cb8 <__assert_fail@plt+0x1ca8>
   12a84:	mov	r2, #114	; 0x72
   12a88:	ldr	r0, [sp, #68]	; 0x44
   12a8c:	tst	r0, #1
   12a90:	mov	r0, r2
   12a94:	bne	12cb8 <__assert_fail@plt+0x1ca8>
   12a98:	b	13258 <__assert_fail@plt+0x2248>
   12a9c:	ldr	r0, [sp, #84]	; 0x54
   12aa0:	tst	r0, #1
   12aa4:	beq	12cd8 <__assert_fail@plt+0x1cc8>
   12aa8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12aac:	tst	r0, #1
   12ab0:	bne	13344 <__assert_fail@plt+0x2334>
   12ab4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12ab8:	mov	r2, sl
   12abc:	subs	r0, r0, #2
   12ac0:	movwne	r0, #1
   12ac4:	orr	r0, r0, lr
   12ac8:	tst	r0, #1
   12acc:	bne	12b04 <__assert_fail@plt+0x1af4>
   12ad0:	cmp	r8, ip
   12ad4:	mov	lr, #1
   12ad8:	movcc	r0, #39	; 0x27
   12adc:	strbcc	r0, [r5, r8]
   12ae0:	add	r0, r8, #1
   12ae4:	cmp	r0, ip
   12ae8:	movcc	r1, #36	; 0x24
   12aec:	strbcc	r1, [r5, r0]
   12af0:	add	r0, r8, #2
   12af4:	add	r8, r8, #3
   12af8:	cmp	r0, ip
   12afc:	movcc	r1, #39	; 0x27
   12b00:	strbcc	r1, [r5, r0]
   12b04:	mov	r1, #1
   12b08:	cmp	r8, ip
   12b0c:	mov	r9, #0
   12b10:	mov	r6, #48	; 0x30
   12b14:	str	r1, [fp, #-56]	; 0xffffffc8
   12b18:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12b1c:	movcc	r0, #92	; 0x5c
   12b20:	strbcc	r0, [r5, r8]
   12b24:	add	r0, r8, #1
   12b28:	cmp	r1, #2
   12b2c:	beq	12e34 <__assert_fail@plt+0x1e24>
   12b30:	add	r1, r7, #1
   12b34:	cmp	r1, r2
   12b38:	bcs	12e34 <__assert_fail@plt+0x1e24>
   12b3c:	ldrb	r1, [r4, r1]
   12b40:	sub	r1, r1, #48	; 0x30
   12b44:	uxtb	r1, r1
   12b48:	cmp	r1, #9
   12b4c:	bhi	12e34 <__assert_fail@plt+0x1e24>
   12b50:	cmp	r0, ip
   12b54:	movcc	r1, #48	; 0x30
   12b58:	strbcc	r1, [r5, r0]
   12b5c:	add	r0, r8, #2
   12b60:	add	r8, r8, #3
   12b64:	cmp	r0, ip
   12b68:	movcc	r1, #48	; 0x30
   12b6c:	strbcc	r1, [r5, r0]
   12b70:	b	12928 <__assert_fail@plt+0x1918>
   12b74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12b78:	mov	r6, #63	; 0x3f
   12b7c:	cmp	r0, #5
   12b80:	beq	12e3c <__assert_fail@plt+0x1e2c>
   12b84:	mov	r1, #0
   12b88:	cmp	r0, #2
   12b8c:	str	r1, [fp, #-56]	; 0xffffffc8
   12b90:	bne	12ef0 <__assert_fail@plt+0x1ee0>
   12b94:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b98:	mov	r9, #0
   12b9c:	b	12a34 <__assert_fail@plt+0x1a24>
   12ba0:	mov	r0, #118	; 0x76
   12ba4:	b	12cb8 <__assert_fail@plt+0x1ca8>
   12ba8:	mov	r0, #1
   12bac:	mov	r6, #39	; 0x27
   12bb0:	str	r0, [sp, #60]	; 0x3c
   12bb4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12bb8:	cmp	r0, #2
   12bbc:	bne	12c30 <__assert_fail@plt+0x1c20>
   12bc0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12bc4:	tst	r0, #1
   12bc8:	bne	13258 <__assert_fail@plt+0x2248>
   12bcc:	ldr	r2, [sp, #56]	; 0x38
   12bd0:	clz	r1, ip
   12bd4:	mov	lr, #0
   12bd8:	lsr	r1, r1, #5
   12bdc:	cmp	r2, #0
   12be0:	mov	r0, r2
   12be4:	movwne	r0, #1
   12be8:	orrs	r0, r0, r1
   12bec:	moveq	r2, ip
   12bf0:	moveq	ip, r0
   12bf4:	cmp	r8, ip
   12bf8:	str	r2, [sp, #56]	; 0x38
   12bfc:	movcc	r0, #39	; 0x27
   12c00:	strbcc	r0, [r5, r8]
   12c04:	add	r0, r8, #1
   12c08:	cmp	r0, ip
   12c0c:	movcc	r1, #92	; 0x5c
   12c10:	strbcc	r1, [r5, r0]
   12c14:	add	r0, r8, #2
   12c18:	add	r8, r8, #3
   12c1c:	cmp	r0, ip
   12c20:	movcc	r1, #39	; 0x27
   12c24:	strbcc	r1, [r5, r0]
   12c28:	mov	r0, #0
   12c2c:	str	r0, [fp, #-56]	; 0xffffffc8
   12c30:	mov	r9, #1
   12c34:	b	12928 <__assert_fail@plt+0x1918>
   12c38:	ldr	r0, [sp, #40]	; 0x28
   12c3c:	str	lr, [sp, #44]	; 0x2c
   12c40:	str	ip, [sp, #88]	; 0x58
   12c44:	cmp	r0, #1
   12c48:	bne	12cf8 <__assert_fail@plt+0x1ce8>
   12c4c:	str	sl, [sp, #36]	; 0x24
   12c50:	bl	10efc <__ctype_b_loc@plt>
   12c54:	ldr	r0, [r0]
   12c58:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12c5c:	mov	r1, #1
   12c60:	add	r0, r0, r6, lsl #1
   12c64:	ldrb	r0, [r0, #1]
   12c68:	ubfx	r9, r0, #6, #1
   12c6c:	ldr	r0, [sp, #52]	; 0x34
   12c70:	ldr	lr, [sp, #44]	; 0x2c
   12c74:	cmp	r1, #1
   12c78:	orr	r3, r9, r0
   12c7c:	bhi	12ef8 <__assert_fail@plt+0x1ee8>
   12c80:	tst	r3, #1
   12c84:	beq	12ef8 <__assert_fail@plt+0x1ee8>
   12c88:	ldr	sl, [sp, #36]	; 0x24
   12c8c:	ldr	ip, [sp, #88]	; 0x58
   12c90:	b	12928 <__assert_fail@plt+0x1918>
   12c94:	ldr	r1, [sp, #48]	; 0x30
   12c98:	mov	r0, #0
   12c9c:	str	r0, [fp, #-56]	; 0xffffffc8
   12ca0:	mov	r0, #92	; 0x5c
   12ca4:	cmp	r1, #0
   12ca8:	beq	12cb8 <__assert_fail@plt+0x1ca8>
   12cac:	mov	r6, #92	; 0x5c
   12cb0:	mov	r9, #0
   12cb4:	b	130bc <__assert_fail@plt+0x20ac>
   12cb8:	mov	r1, #0
   12cbc:	mov	r9, #0
   12cc0:	str	r1, [fp, #-56]	; 0xffffffc8
   12cc4:	ldr	r1, [sp, #84]	; 0x54
   12cc8:	tst	r1, #1
   12ccc:	mov	r1, #0
   12cd0:	beq	12928 <__assert_fail@plt+0x1918>
   12cd4:	b	12970 <__assert_fail@plt+0x1960>
   12cd8:	ldr	r0, [sp, #32]
   12cdc:	mov	r6, #0
   12ce0:	mov	r9, #0
   12ce4:	cmp	r0, #0
   12ce8:	mov	r0, #0
   12cec:	str	r0, [fp, #-56]	; 0xffffffc8
   12cf0:	beq	12928 <__assert_fail@plt+0x1918>
   12cf4:	b	13114 <__assert_fail@plt+0x2104>
   12cf8:	mov	r0, #0
   12cfc:	cmn	sl, #1
   12d00:	sub	r3, fp, #40	; 0x28
   12d04:	str	r0, [fp, #-36]	; 0xffffffdc
   12d08:	str	r0, [fp, #-40]	; 0xffffffd8
   12d0c:	bne	12d24 <__assert_fail@plt+0x1d14>
   12d10:	mov	r0, r4
   12d14:	bl	10f20 <strlen@plt>
   12d18:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12d1c:	sub	r3, fp, #40	; 0x28
   12d20:	mov	sl, r0
   12d24:	ldr	r0, [sp, #72]	; 0x48
   12d28:	mov	r9, #1
   12d2c:	mov	r1, #0
   12d30:	str	sl, [sp, #36]	; 0x24
   12d34:	add	r0, r0, r7
   12d38:	str	r0, [sp, #20]
   12d3c:	add	r0, r1, r7
   12d40:	str	r1, [sp, #24]
   12d44:	add	r1, r4, r0
   12d48:	mov	r4, r0
   12d4c:	sub	r2, sl, r0
   12d50:	sub	r0, fp, #44	; 0x2c
   12d54:	bl	14fd0 <__assert_fail@plt+0x3fc0>
   12d58:	cmp	r0, #0
   12d5c:	beq	13168 <__assert_fail@plt+0x2158>
   12d60:	cmn	r0, #1
   12d64:	beq	13120 <__assert_fail@plt+0x2110>
   12d68:	ldr	r2, [sp, #36]	; 0x24
   12d6c:	cmn	r0, #2
   12d70:	beq	13128 <__assert_fail@plt+0x2118>
   12d74:	ldr	r2, [sp, #64]	; 0x40
   12d78:	ldr	ip, [sp, #88]	; 0x58
   12d7c:	ldr	r4, [sp, #84]	; 0x54
   12d80:	ldr	lr, [fp, #-48]	; 0xffffffd0
   12d84:	cmp	r0, #2
   12d88:	mov	r1, #0
   12d8c:	movwcc	r1, #1
   12d90:	eor	r2, r2, #1
   12d94:	orrs	r1, r2, r1
   12d98:	bne	12de8 <__assert_fail@plt+0x1dd8>
   12d9c:	ldr	r1, [sp, #24]
   12da0:	ldr	r2, [sp, #20]
   12da4:	add	r1, r2, r1
   12da8:	sub	r2, r0, #1
   12dac:	ldrb	r3, [r1]
   12db0:	sub	r5, r3, #94	; 0x5e
   12db4:	cmp	r5, #30
   12db8:	bhi	12dd0 <__assert_fail@plt+0x1dc0>
   12dbc:	mov	r4, #1
   12dc0:	mov	sl, #1073741829	; 0x40000005
   12dc4:	tst	sl, r4, lsl r5
   12dc8:	ldr	r4, [sp, #84]	; 0x54
   12dcc:	bne	13230 <__assert_fail@plt+0x2220>
   12dd0:	sub	r3, r3, #91	; 0x5b
   12dd4:	cmp	r3, #2
   12dd8:	bcc	13230 <__assert_fail@plt+0x2220>
   12ddc:	add	r1, r1, #1
   12de0:	subs	r2, r2, #1
   12de4:	bne	12dac <__assert_fail@plt+0x1d9c>
   12de8:	ldr	r5, [sp, #24]
   12dec:	str	lr, [fp, #-48]	; 0xffffffd0
   12df0:	add	r5, r0, r5
   12df4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12df8:	bl	10e54 <iswprint@plt>
   12dfc:	cmp	r0, #0
   12e00:	sub	r4, fp, #40	; 0x28
   12e04:	movwne	r0, #1
   12e08:	and	r9, r9, r0
   12e0c:	mov	r0, r4
   12e10:	bl	10e18 <mbsinit@plt>
   12e14:	mov	r1, r5
   12e18:	mov	r3, r4
   12e1c:	ldr	sl, [sp, #36]	; 0x24
   12e20:	ldr	r5, [fp, #-84]	; 0xffffffac
   12e24:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12e28:	cmp	r0, #0
   12e2c:	beq	12d3c <__assert_fail@plt+0x1d2c>
   12e30:	b	12c6c <__assert_fail@plt+0x1c5c>
   12e34:	mov	r8, r0
   12e38:	b	12928 <__assert_fail@plt+0x1918>
   12e3c:	mov	r0, #0
   12e40:	str	r0, [fp, #-56]	; 0xffffffc8
   12e44:	ldr	r0, [sp, #28]
   12e48:	cmp	r0, #0
   12e4c:	beq	12ef0 <__assert_fail@plt+0x1ee0>
   12e50:	add	r0, r7, #2
   12e54:	mov	r1, sl
   12e58:	cmp	r0, sl
   12e5c:	bcs	12ef0 <__assert_fail@plt+0x1ee0>
   12e60:	add	r1, r7, r4
   12e64:	ldrb	r1, [r1, #1]
   12e68:	cmp	r1, #63	; 0x3f
   12e6c:	bne	12ef0 <__assert_fail@plt+0x1ee0>
   12e70:	ldrb	r9, [r4, r0]
   12e74:	sub	r2, r9, #33	; 0x21
   12e78:	cmp	r2, #29
   12e7c:	bhi	12ef0 <__assert_fail@plt+0x1ee0>
   12e80:	mov	r1, r4
   12e84:	movw	r4, #20929	; 0x51c1
   12e88:	mov	r3, #1
   12e8c:	movt	r4, #14336	; 0x3800
   12e90:	tst	r4, r3, lsl r2
   12e94:	beq	1317c <__assert_fail@plt+0x216c>
   12e98:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12e9c:	tst	r2, #1
   12ea0:	bne	1334c <__assert_fail@plt+0x233c>
   12ea4:	cmp	r8, ip
   12ea8:	mov	r4, r1
   12eac:	mov	r7, r0
   12eb0:	mov	r6, r9
   12eb4:	movcc	r2, #63	; 0x3f
   12eb8:	strbcc	r2, [r5, r8]
   12ebc:	add	r2, r8, #1
   12ec0:	cmp	r2, ip
   12ec4:	movcc	r3, #34	; 0x22
   12ec8:	strbcc	r3, [r5, r2]
   12ecc:	add	r2, r8, #2
   12ed0:	cmp	r2, ip
   12ed4:	movcc	r3, #34	; 0x22
   12ed8:	strbcc	r3, [r5, r2]
   12edc:	add	r2, r8, #3
   12ee0:	add	r8, r8, #4
   12ee4:	cmp	r2, ip
   12ee8:	movcc	r3, #63	; 0x3f
   12eec:	strbcc	r3, [r5, r2]
   12ef0:	mov	r9, #0
   12ef4:	b	12928 <__assert_fail@plt+0x1918>
   12ef8:	ldr	sl, [sp, #36]	; 0x24
   12efc:	add	r0, r1, r7
   12f00:	mov	r2, #0
   12f04:	str	r3, [sp, #24]
   12f08:	str	r0, [fp, #-56]	; 0xffffffc8
   12f0c:	tst	r3, #1
   12f10:	beq	12f3c <__assert_fail@plt+0x1f2c>
   12f14:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12f18:	tst	r0, #1
   12f1c:	beq	13004 <__assert_fail@plt+0x1ff4>
   12f20:	ldr	r1, [sp, #88]	; 0x58
   12f24:	mov	r0, r3
   12f28:	cmp	r8, r1
   12f2c:	movcc	r1, #92	; 0x5c
   12f30:	strbcc	r1, [r5, r8]
   12f34:	add	r8, r8, #1
   12f38:	b	13008 <__assert_fail@plt+0x1ff8>
   12f3c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12f40:	tst	r1, #1
   12f44:	bne	13254 <__assert_fail@plt+0x2244>
   12f48:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12f4c:	subs	r2, r1, #2
   12f50:	movwne	r2, #1
   12f54:	orr	r2, r2, lr
   12f58:	tst	r2, #1
   12f5c:	bne	12fa0 <__assert_fail@plt+0x1f90>
   12f60:	ldr	r1, [sp, #88]	; 0x58
   12f64:	add	r2, r8, #1
   12f68:	mov	lr, #1
   12f6c:	cmp	r8, r1
   12f70:	movcc	r1, #39	; 0x27
   12f74:	strbcc	r1, [r5, r8]
   12f78:	ldr	r1, [sp, #88]	; 0x58
   12f7c:	cmp	r2, r1
   12f80:	movcc	r1, #36	; 0x24
   12f84:	strbcc	r1, [r5, r2]
   12f88:	ldr	r1, [sp, #88]	; 0x58
   12f8c:	add	r2, r8, #2
   12f90:	add	r8, r8, #3
   12f94:	cmp	r2, r1
   12f98:	movcc	r1, #39	; 0x27
   12f9c:	strbcc	r1, [r5, r2]
   12fa0:	ldr	r1, [sp, #88]	; 0x58
   12fa4:	add	r2, r8, #1
   12fa8:	mov	r0, r3
   12fac:	cmp	r8, r1
   12fb0:	movcc	r1, #92	; 0x5c
   12fb4:	strbcc	r1, [r5, r8]
   12fb8:	ldr	r1, [sp, #88]	; 0x58
   12fbc:	cmp	r2, r1
   12fc0:	bcs	12fd4 <__assert_fail@plt+0x1fc4>
   12fc4:	uxtb	r3, r6
   12fc8:	mov	r1, #48	; 0x30
   12fcc:	orr	r3, r1, r3, lsr #6
   12fd0:	strb	r3, [r5, r2]
   12fd4:	ldr	r1, [sp, #88]	; 0x58
   12fd8:	add	r2, r8, #2
   12fdc:	add	r8, r8, #3
   12fe0:	cmp	r2, r1
   12fe4:	lsrcc	r3, r6, #3
   12fe8:	movcc	r1, #6
   12fec:	bficc	r3, r1, #3, #29
   12ff0:	mov	r1, #6
   12ff4:	bfi	r6, r1, #3, #29
   12ff8:	strbcc	r3, [r5, r2]
   12ffc:	mov	r2, #1
   13000:	b	13010 <__assert_fail@plt+0x2000>
   13004:	mov	r0, r3
   13008:	mov	r1, #0
   1300c:	str	r1, [fp, #-52]	; 0xffffffcc
   13010:	mov	ip, r2
   13014:	and	r1, r2, #1
   13018:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1301c:	add	r3, r7, #1
   13020:	cmp	r2, r3
   13024:	bls	130ac <__assert_fail@plt+0x209c>
   13028:	cmp	r1, #0
   1302c:	mvn	r5, lr
   13030:	movwne	r1, #1
   13034:	orr	r5, r5, r1
   13038:	tst	r5, #1
   1303c:	bne	13080 <__assert_fail@plt+0x2070>
   13040:	ldr	r1, [sp, #88]	; 0x58
   13044:	ldr	r5, [fp, #-84]	; 0xffffffac
   13048:	mov	r2, r4
   1304c:	ldr	r4, [sp, #88]	; 0x58
   13050:	ldr	r0, [sp, #24]
   13054:	mov	lr, #0
   13058:	cmp	r8, r1
   1305c:	movcc	r1, #39	; 0x27
   13060:	strbcc	r1, [r5, r8]
   13064:	add	r1, r8, #1
   13068:	add	r8, r8, #2
   1306c:	cmp	r1, r4
   13070:	movcc	r4, #39	; 0x27
   13074:	strbcc	r4, [r5, r1]
   13078:	mov	r4, r2
   1307c:	b	13084 <__assert_fail@plt+0x2074>
   13080:	ldr	r5, [fp, #-84]	; 0xffffffac
   13084:	ldr	r1, [sp, #88]	; 0x58
   13088:	mov	r2, ip
   1308c:	cmp	r8, r1
   13090:	ldr	r1, [sp, #72]	; 0x48
   13094:	strbcc	r6, [r5, r8]
   13098:	add	r8, r8, #1
   1309c:	ldrb	r6, [r1, r7]
   130a0:	mov	r7, r3
   130a4:	mov	r3, r0
   130a8:	b	12f0c <__assert_fail@plt+0x1efc>
   130ac:	ldr	ip, [sp, #88]	; 0x58
   130b0:	cmp	r1, #0
   130b4:	movwne	r1, #1
   130b8:	str	r1, [fp, #-56]	; 0xffffffc8
   130bc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   130c0:	cmp	r0, #0
   130c4:	bne	130f4 <__assert_fail@plt+0x20e4>
   130c8:	tst	lr, #1
   130cc:	beq	130f4 <__assert_fail@plt+0x20e4>
   130d0:	cmp	r8, ip
   130d4:	mov	lr, #0
   130d8:	movcc	r0, #39	; 0x27
   130dc:	strbcc	r0, [r5, r8]
   130e0:	add	r0, r8, #1
   130e4:	add	r8, r8, #2
   130e8:	cmp	r0, ip
   130ec:	movcc	r1, #39	; 0x27
   130f0:	strbcc	r1, [r5, r0]
   130f4:	mov	r1, r9
   130f8:	mov	r0, r6
   130fc:	cmp	r8, ip
   13100:	strbcc	r0, [r5, r8]
   13104:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13108:	add	r8, r8, #1
   1310c:	and	r0, r0, r1
   13110:	str	r0, [fp, #-48]	; 0xffffffd0
   13114:	mov	r3, sl
   13118:	add	r7, r7, #1
   1311c:	b	1260c <__assert_fail@plt+0x15fc>
   13120:	mov	r9, #0
   13124:	b	13168 <__assert_fail@plt+0x2158>
   13128:	mov	r9, #0
   1312c:	cmp	r2, r4
   13130:	bls	13168 <__assert_fail@plt+0x2158>
   13134:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13138:	ldr	r1, [sp, #24]
   1313c:	add	r0, r4, r7
   13140:	mov	r3, r1
   13144:	ldrb	r1, [r0, r1]
   13148:	cmp	r1, #0
   1314c:	beq	13174 <__assert_fail@plt+0x2164>
   13150:	add	r3, r3, #1
   13154:	add	r1, r7, r3
   13158:	cmp	r1, r2
   1315c:	mov	r1, r3
   13160:	bcc	13140 <__assert_fail@plt+0x2130>
   13164:	b	12c6c <__assert_fail@plt+0x1c5c>
   13168:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1316c:	ldr	r1, [sp, #24]
   13170:	b	12c6c <__assert_fail@plt+0x1c5c>
   13174:	mov	r1, r3
   13178:	b	12c6c <__assert_fail@plt+0x1c5c>
   1317c:	mov	r9, #0
   13180:	mov	r4, r1
   13184:	b	12928 <__assert_fail@plt+0x1918>
   13188:	mov	sl, r7
   1318c:	b	13194 <__assert_fail@plt+0x2184>
   13190:	mvn	sl, #0
   13194:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13198:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1319c:	eor	r0, r1, #2
   131a0:	orr	r0, r0, r8
   131a4:	clz	r0, r0
   131a8:	lsr	r0, r0, #5
   131ac:	tst	r2, r0
   131b0:	bne	13258 <__assert_fail@plt+0x2248>
   131b4:	subs	r0, r1, #2
   131b8:	movwne	r0, #1
   131bc:	orr	r0, r2, r0
   131c0:	tst	r0, #1
   131c4:	ldreq	r0, [sp, #60]	; 0x3c
   131c8:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   131cc:	eoreq	r0, r0, #1
   131d0:	tsteq	r0, #1
   131d4:	bne	132ec <__assert_fail@plt+0x22dc>
   131d8:	tst	r1, #1
   131dc:	bne	132b8 <__assert_fail@plt+0x22a8>
   131e0:	ldr	r6, [sp, #56]	; 0x38
   131e4:	mov	r9, #0
   131e8:	cmp	r6, #0
   131ec:	beq	132e4 <__assert_fail@plt+0x22d4>
   131f0:	ldr	r0, [sp, #84]	; 0x54
   131f4:	mov	r1, #0
   131f8:	mov	r7, #2
   131fc:	cmp	ip, #0
   13200:	str	r1, [fp, #-48]	; 0xffffffd0
   13204:	mov	r1, #0
   13208:	str	r1, [fp, #-76]	; 0xffffffb4
   1320c:	beq	12374 <__assert_fail@plt+0x1364>
   13210:	b	132ec <__assert_fail@plt+0x22dc>
   13214:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13218:	ldr	r1, [fp, #12]
   1321c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13220:	mov	r5, r3
   13224:	mov	ip, r6
   13228:	mov	r3, sl
   1322c:	b	1327c <__assert_fail@plt+0x226c>
   13230:	tst	r4, #1
   13234:	ldr	r5, [fp, #-84]	; 0xffffffac
   13238:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1323c:	ldr	r1, [fp, #12]
   13240:	ldr	r3, [sp, #36]	; 0x24
   13244:	mov	r0, #2
   13248:	movwne	r0, #4
   1324c:	mov	r2, r0
   13250:	b	1327c <__assert_fail@plt+0x226c>
   13254:	ldr	ip, [sp, #88]	; 0x58
   13258:	ldr	r1, [sp, #84]	; 0x54
   1325c:	mov	r0, #2
   13260:	tst	r1, #1
   13264:	movwne	r0, #4
   13268:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1326c:	ldr	r1, [fp, #12]
   13270:	mov	r3, sl
   13274:	cmp	r2, #2
   13278:	moveq	r2, r0
   1327c:	mov	r0, #0
   13280:	bic	r1, r1, #2
   13284:	str	r2, [sp]
   13288:	mov	r2, r4
   1328c:	str	r0, [sp, #8]
   13290:	ldr	r0, [sp, #76]	; 0x4c
   13294:	str	r1, [sp, #4]
   13298:	mov	r1, ip
   1329c:	str	r0, [sp, #12]
   132a0:	ldr	r0, [sp, #80]	; 0x50
   132a4:	str	r0, [sp, #16]
   132a8:	mov	r0, r5
   132ac:	bl	122e8 <__assert_fail@plt+0x12d8>
   132b0:	mov	r8, r0
   132b4:	b	13338 <__assert_fail@plt+0x2328>
   132b8:	mov	r0, #5
   132bc:	ldr	r1, [sp, #56]	; 0x38
   132c0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   132c4:	mov	r3, sl
   132c8:	str	r0, [sp]
   132cc:	ldr	r0, [fp, #12]
   132d0:	str	r0, [sp, #4]
   132d4:	ldr	r0, [fp, #16]
   132d8:	str	r0, [sp, #8]
   132dc:	ldr	r0, [sp, #76]	; 0x4c
   132e0:	b	1329c <__assert_fail@plt+0x228c>
   132e4:	mov	r0, #0
   132e8:	str	r0, [fp, #-76]	; 0xffffffb4
   132ec:	ldr	r1, [fp, #-88]	; 0xffffffa8
   132f0:	cmp	r1, #0
   132f4:	beq	1332c <__assert_fail@plt+0x231c>
   132f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   132fc:	tst	r0, #1
   13300:	bne	1332c <__assert_fail@plt+0x231c>
   13304:	ldrb	r0, [r1]
   13308:	cmp	r0, #0
   1330c:	beq	1332c <__assert_fail@plt+0x231c>
   13310:	add	r1, r1, #1
   13314:	cmp	r8, ip
   13318:	strbcc	r0, [r5, r8]
   1331c:	add	r8, r8, #1
   13320:	ldrb	r0, [r1], #1
   13324:	cmp	r0, #0
   13328:	bne	13314 <__assert_fail@plt+0x2304>
   1332c:	cmp	r8, ip
   13330:	movcc	r0, #0
   13334:	strbcc	r0, [r5, r8]
   13338:	mov	r0, r8
   1333c:	sub	sp, fp, #28
   13340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13344:	mov	r0, #4
   13348:	b	13268 <__assert_fail@plt+0x2258>
   1334c:	mov	r4, r1
   13350:	b	13258 <__assert_fail@plt+0x2248>
   13354:	bl	10ff8 <abort@plt>
   13358:	mov	r3, r2
   1335c:	mov	r2, #0
   13360:	b	13364 <__assert_fail@plt+0x2354>
   13364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13368:	add	fp, sp, #28
   1336c:	sub	sp, sp, #36	; 0x24
   13370:	movw	r8, #29032	; 0x7168
   13374:	cmp	r3, #0
   13378:	mov	r4, r2
   1337c:	str	r2, [sp, #24]
   13380:	mov	r5, r1
   13384:	mov	r6, r0
   13388:	str	r0, [sp, #20]
   1338c:	movt	r8, #2
   13390:	movne	r8, r3
   13394:	bl	10f38 <__errno_location@plt>
   13398:	str	r0, [sp, #28]
   1339c:	ldr	r1, [r8, #40]	; 0x28
   133a0:	ldr	r2, [r8, #44]	; 0x2c
   133a4:	ldr	r7, [r0]
   133a8:	cmp	r4, #0
   133ac:	add	sl, r8, #8
   133b0:	mov	r0, #0
   133b4:	ldm	r8, {r3, r9}
   133b8:	orreq	r9, r9, #1
   133bc:	stm	sp, {r3, r9, sl}
   133c0:	str	r1, [sp, #12]
   133c4:	str	r2, [sp, #16]
   133c8:	mov	r1, #0
   133cc:	mov	r2, r6
   133d0:	mov	r3, r5
   133d4:	str	r7, [sp, #32]
   133d8:	mov	r7, r5
   133dc:	bl	122e8 <__assert_fail@plt+0x12d8>
   133e0:	add	r4, r0, #1
   133e4:	mov	r5, r0
   133e8:	mov	r0, r4
   133ec:	bl	140dc <__assert_fail@plt+0x30cc>
   133f0:	mov	r6, r0
   133f4:	ldr	r0, [r8]
   133f8:	ldr	r2, [r8, #44]	; 0x2c
   133fc:	ldr	r1, [r8, #40]	; 0x28
   13400:	mov	r3, r7
   13404:	stm	sp, {r0, r9, sl}
   13408:	str	r2, [sp, #16]
   1340c:	ldr	r2, [sp, #20]
   13410:	str	r1, [sp, #12]
   13414:	mov	r0, r6
   13418:	mov	r1, r4
   1341c:	bl	122e8 <__assert_fail@plt+0x12d8>
   13420:	ldr	r0, [sp, #24]
   13424:	ldr	r1, [sp, #32]
   13428:	ldr	r2, [sp, #28]
   1342c:	cmp	r0, #0
   13430:	str	r1, [r2]
   13434:	strne	r5, [r0]
   13438:	mov	r0, r6
   1343c:	sub	sp, fp, #28
   13440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13444:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13448:	add	fp, sp, #24
   1344c:	movw	r5, #28916	; 0x70f4
   13450:	movw	r8, #28912	; 0x70f0
   13454:	movt	r5, #2
   13458:	movt	r8, #2
   1345c:	ldr	r0, [r5]
   13460:	ldr	r4, [r8]
   13464:	cmp	r0, #2
   13468:	blt	13494 <__assert_fail@plt+0x2484>
   1346c:	add	r7, r4, #12
   13470:	mov	r6, #0
   13474:	ldr	r0, [r7, r6, lsl #3]
   13478:	bl	14ecc <__assert_fail@plt+0x3ebc>
   1347c:	ldr	r1, [r5]
   13480:	add	r2, r6, #2
   13484:	add	r0, r6, #1
   13488:	mov	r6, r0
   1348c:	cmp	r2, r1
   13490:	blt	13474 <__assert_fail@plt+0x2464>
   13494:	ldr	r0, [r4, #4]
   13498:	movw	r9, #29080	; 0x7198
   1349c:	movw	r7, #28920	; 0x70f8
   134a0:	movt	r9, #2
   134a4:	movt	r7, #2
   134a8:	cmp	r0, r9
   134ac:	beq	134bc <__assert_fail@plt+0x24ac>
   134b0:	bl	14ecc <__assert_fail@plt+0x3ebc>
   134b4:	mov	r0, #256	; 0x100
   134b8:	stm	r7, {r0, r9}
   134bc:	cmp	r4, r7
   134c0:	beq	134d0 <__assert_fail@plt+0x24c0>
   134c4:	mov	r0, r4
   134c8:	bl	14ecc <__assert_fail@plt+0x3ebc>
   134cc:	str	r7, [r8]
   134d0:	mov	r0, #1
   134d4:	str	r0, [r5]
   134d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   134dc:	movw	r3, #29032	; 0x7168
   134e0:	mvn	r2, #0
   134e4:	movt	r3, #2
   134e8:	b	134ec <__assert_fail@plt+0x24dc>
   134ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134f0:	add	fp, sp, #28
   134f4:	sub	sp, sp, #44	; 0x2c
   134f8:	mov	r7, r3
   134fc:	str	r2, [sp, #36]	; 0x24
   13500:	str	r1, [sp, #32]
   13504:	mov	r5, r0
   13508:	bl	10f38 <__errno_location@plt>
   1350c:	cmp	r5, #0
   13510:	bmi	13680 <__assert_fail@plt+0x2670>
   13514:	cmn	r5, #-2147483647	; 0x80000001
   13518:	beq	13680 <__assert_fail@plt+0x2670>
   1351c:	movw	r8, #28916	; 0x70f4
   13520:	movw	r4, #28912	; 0x70f0
   13524:	str	r0, [sp, #28]
   13528:	ldr	r0, [r0]
   1352c:	movt	r8, #2
   13530:	movt	r4, #2
   13534:	ldr	r1, [r8]
   13538:	ldr	r6, [r4]
   1353c:	str	r0, [sp, #24]
   13540:	cmp	r1, r5
   13544:	ble	13550 <__assert_fail@plt+0x2540>
   13548:	mov	sl, r6
   1354c:	b	135bc <__assert_fail@plt+0x25ac>
   13550:	movw	r9, #28920	; 0x70f8
   13554:	mov	r0, #8
   13558:	str	r1, [fp, #-32]	; 0xffffffe0
   1355c:	sub	r1, r5, r1
   13560:	mvn	r3, #-2147483648	; 0x80000000
   13564:	movt	r9, #2
   13568:	str	r0, [sp]
   1356c:	add	r2, r1, #1
   13570:	sub	r1, fp, #32
   13574:	subs	r0, r6, r9
   13578:	movne	r0, r6
   1357c:	bl	1420c <__assert_fail@plt+0x31fc>
   13580:	mov	sl, r0
   13584:	cmp	r6, r9
   13588:	str	r0, [r4]
   1358c:	bne	13598 <__assert_fail@plt+0x2588>
   13590:	ldrd	r0, [r9]
   13594:	stm	sl, {r0, r1}
   13598:	ldr	r1, [r8]
   1359c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   135a0:	add	r0, sl, r1, lsl #3
   135a4:	sub	r1, r2, r1
   135a8:	lsl	r2, r1, #3
   135ac:	mov	r1, #0
   135b0:	bl	10f50 <memset@plt>
   135b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   135b8:	str	r0, [r8]
   135bc:	mov	r9, sl
   135c0:	ldm	r7, {r0, r1}
   135c4:	orr	r8, r1, #1
   135c8:	add	r1, r7, #8
   135cc:	ldr	r2, [r7, #40]	; 0x28
   135d0:	ldr	r3, [r7, #44]	; 0x2c
   135d4:	ldr	r6, [r9, r5, lsl #3]!
   135d8:	str	r1, [sp, #20]
   135dc:	ldr	r4, [r9, #4]!
   135e0:	stm	sp, {r0, r8}
   135e4:	add	r0, sp, #8
   135e8:	stm	r0, {r1, r2, r3}
   135ec:	ldr	r2, [sp, #32]
   135f0:	ldr	r3, [sp, #36]	; 0x24
   135f4:	mov	r1, r6
   135f8:	mov	r0, r4
   135fc:	bl	122e8 <__assert_fail@plt+0x12d8>
   13600:	cmp	r6, r0
   13604:	bhi	13668 <__assert_fail@plt+0x2658>
   13608:	add	r6, r0, #1
   1360c:	movw	r0, #29080	; 0x7198
   13610:	movt	r0, #2
   13614:	str	r6, [sl, r5, lsl #3]
   13618:	cmp	r4, r0
   1361c:	beq	13628 <__assert_fail@plt+0x2618>
   13620:	mov	r0, r4
   13624:	bl	14ecc <__assert_fail@plt+0x3ebc>
   13628:	mov	r0, r6
   1362c:	bl	140dc <__assert_fail@plt+0x30cc>
   13630:	str	r0, [r9]
   13634:	mov	r4, r0
   13638:	add	r3, sp, #8
   1363c:	ldr	r0, [r7]
   13640:	ldr	r1, [r7, #40]	; 0x28
   13644:	ldr	r2, [r7, #44]	; 0x2c
   13648:	stm	sp, {r0, r8}
   1364c:	ldr	r0, [sp, #20]
   13650:	stm	r3, {r0, r1, r2}
   13654:	ldr	r2, [sp, #32]
   13658:	ldr	r3, [sp, #36]	; 0x24
   1365c:	mov	r0, r4
   13660:	mov	r1, r6
   13664:	bl	122e8 <__assert_fail@plt+0x12d8>
   13668:	ldr	r0, [sp, #28]
   1366c:	ldr	r1, [sp, #24]
   13670:	str	r1, [r0]
   13674:	mov	r0, r4
   13678:	sub	sp, fp, #28
   1367c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13680:	bl	10ff8 <abort@plt>
   13684:	movw	r3, #29032	; 0x7168
   13688:	movt	r3, #2
   1368c:	b	134ec <__assert_fail@plt+0x24dc>
   13690:	movw	r3, #29032	; 0x7168
   13694:	mov	r1, r0
   13698:	mov	r0, #0
   1369c:	mvn	r2, #0
   136a0:	movt	r3, #2
   136a4:	b	134ec <__assert_fail@plt+0x24dc>
   136a8:	movw	r3, #29032	; 0x7168
   136ac:	mov	r2, r1
   136b0:	mov	r1, r0
   136b4:	mov	r0, #0
   136b8:	movt	r3, #2
   136bc:	b	134ec <__assert_fail@plt+0x24dc>
   136c0:	push	{fp, lr}
   136c4:	mov	fp, sp
   136c8:	sub	sp, sp, #48	; 0x30
   136cc:	vmov.i32	q8, #0	; 0x00000000
   136d0:	mov	ip, #32
   136d4:	mov	r3, sp
   136d8:	mov	lr, r2
   136dc:	cmp	r1, #10
   136e0:	add	r2, r3, #16
   136e4:	vst1.64	{d16-d17}, [r3], ip
   136e8:	vst1.64	{d16-d17}, [r2]
   136ec:	vst1.64	{d16-d17}, [r3]
   136f0:	beq	13710 <__assert_fail@plt+0x2700>
   136f4:	str	r1, [sp]
   136f8:	mov	r3, sp
   136fc:	mov	r1, lr
   13700:	mvn	r2, #0
   13704:	bl	134ec <__assert_fail@plt+0x24dc>
   13708:	mov	sp, fp
   1370c:	pop	{fp, pc}
   13710:	bl	10ff8 <abort@plt>
   13714:	push	{r4, sl, fp, lr}
   13718:	add	fp, sp, #8
   1371c:	sub	sp, sp, #48	; 0x30
   13720:	vmov.i32	q8, #0	; 0x00000000
   13724:	mov	ip, r3
   13728:	mov	r3, sp
   1372c:	mov	lr, #32
   13730:	cmp	r1, #10
   13734:	add	r4, r3, #16
   13738:	vst1.64	{d16-d17}, [r3], lr
   1373c:	vst1.64	{d16-d17}, [r4]
   13740:	vst1.64	{d16-d17}, [r3]
   13744:	beq	13764 <__assert_fail@plt+0x2754>
   13748:	str	r1, [sp]
   1374c:	mov	r1, r2
   13750:	mov	r3, sp
   13754:	mov	r2, ip
   13758:	bl	134ec <__assert_fail@plt+0x24dc>
   1375c:	sub	sp, fp, #8
   13760:	pop	{r4, sl, fp, pc}
   13764:	bl	10ff8 <abort@plt>
   13768:	mov	r2, r1
   1376c:	mov	r1, r0
   13770:	mov	r0, #0
   13774:	b	136c0 <__assert_fail@plt+0x26b0>
   13778:	mov	r3, r2
   1377c:	mov	r2, r1
   13780:	mov	r1, r0
   13784:	mov	r0, #0
   13788:	b	13714 <__assert_fail@plt+0x2704>
   1378c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13790:	add	fp, sp, #24
   13794:	sub	sp, sp, #48	; 0x30
   13798:	movw	r8, #29032	; 0x7168
   1379c:	mov	lr, r0
   137a0:	mov	r3, sp
   137a4:	mov	ip, r1
   137a8:	movt	r8, #2
   137ac:	mov	r1, r3
   137b0:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   137b4:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   137b8:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   137bc:	stm	r1, {r0, r4, r5, r6, r7, r9}
   137c0:	ubfx	r0, r2, #5, #3
   137c4:	and	r2, r2, #31
   137c8:	mov	r4, #1
   137cc:	add	r0, r3, r0, lsl #2
   137d0:	ldr	r1, [r0, #8]
   137d4:	bic	r4, r4, r1, lsr r2
   137d8:	eor	r1, r1, r4, lsl r2
   137dc:	mov	r2, ip
   137e0:	str	r1, [r0, #8]
   137e4:	mov	r0, #0
   137e8:	mov	r1, lr
   137ec:	bl	134ec <__assert_fail@plt+0x24dc>
   137f0:	sub	sp, fp, #24
   137f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   137f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   137fc:	add	fp, sp, #24
   13800:	sub	sp, sp, #48	; 0x30
   13804:	movw	lr, #29032	; 0x7168
   13808:	mov	ip, r0
   1380c:	mov	r3, sp
   13810:	movt	lr, #2
   13814:	mov	r2, r3
   13818:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   1381c:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   13820:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13824:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13828:	ubfx	r0, r1, #5, #3
   1382c:	and	r1, r1, #31
   13830:	mov	r7, #1
   13834:	add	r0, r3, r0, lsl #2
   13838:	ldr	r2, [r0, #8]
   1383c:	bic	r7, r7, r2, lsr r1
   13840:	eor	r1, r2, r7, lsl r1
   13844:	mvn	r2, #0
   13848:	str	r1, [r0, #8]
   1384c:	mov	r0, #0
   13850:	mov	r1, ip
   13854:	bl	134ec <__assert_fail@plt+0x24dc>
   13858:	sub	sp, fp, #24
   1385c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13860:	push	{r4, r5, r6, r7, fp, lr}
   13864:	add	fp, sp, #16
   13868:	sub	sp, sp, #48	; 0x30
   1386c:	movw	lr, #29032	; 0x7168
   13870:	mov	ip, r0
   13874:	mov	r3, sp
   13878:	movt	lr, #2
   1387c:	mov	r2, r3
   13880:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13884:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13888:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   1388c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13890:	mov	r1, ip
   13894:	mvn	r2, #0
   13898:	ldr	r0, [sp, #12]
   1389c:	orr	r0, r0, #67108864	; 0x4000000
   138a0:	str	r0, [sp, #12]
   138a4:	mov	r0, #0
   138a8:	bl	134ec <__assert_fail@plt+0x24dc>
   138ac:	sub	sp, fp, #16
   138b0:	pop	{r4, r5, r6, r7, fp, pc}
   138b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   138b8:	add	fp, sp, #24
   138bc:	sub	sp, sp, #48	; 0x30
   138c0:	movw	r8, #29032	; 0x7168
   138c4:	mov	ip, r1
   138c8:	mov	lr, r0
   138cc:	mov	r3, sp
   138d0:	movt	r8, #2
   138d4:	mov	r2, r3
   138d8:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   138dc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   138e0:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   138e4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   138e8:	mov	r1, lr
   138ec:	mov	r2, ip
   138f0:	ldr	r0, [sp, #12]
   138f4:	orr	r0, r0, #67108864	; 0x4000000
   138f8:	str	r0, [sp, #12]
   138fc:	mov	r0, #0
   13900:	bl	134ec <__assert_fail@plt+0x24dc>
   13904:	sub	sp, fp, #24
   13908:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1390c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13910:	add	fp, sp, #24
   13914:	sub	sp, sp, #96	; 0x60
   13918:	vmov.i32	q8, #0	; 0x00000000
   1391c:	mov	lr, sp
   13920:	mov	ip, r2
   13924:	cmp	r1, #10
   13928:	add	r3, lr, #16
   1392c:	mov	r2, lr
   13930:	vst1.64	{d16-d17}, [r3]
   13934:	mov	r3, #28
   13938:	vst1.64	{d16-d17}, [r2], r3
   1393c:	vst1.32	{d16-d17}, [r2]
   13940:	beq	13980 <__assert_fail@plt+0x2970>
   13944:	str	r1, [sp, #48]	; 0x30
   13948:	add	r3, sp, #48	; 0x30
   1394c:	ldm	lr!, {r2, r4, r5, r6, r7}
   13950:	add	r1, r3, #4
   13954:	stmia	r1!, {r2, r4, r5, r6, r7}
   13958:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   1395c:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13960:	mvn	r2, #0
   13964:	ldr	r1, [sp, #60]	; 0x3c
   13968:	orr	r1, r1, #67108864	; 0x4000000
   1396c:	str	r1, [sp, #60]	; 0x3c
   13970:	mov	r1, ip
   13974:	bl	134ec <__assert_fail@plt+0x24dc>
   13978:	sub	sp, fp, #24
   1397c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13980:	bl	10ff8 <abort@plt>
   13984:	push	{fp, lr}
   13988:	mov	fp, sp
   1398c:	sub	sp, sp, #8
   13990:	mvn	ip, #0
   13994:	str	ip, [sp]
   13998:	bl	139a4 <__assert_fail@plt+0x2994>
   1399c:	mov	sp, fp
   139a0:	pop	{fp, pc}
   139a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   139a8:	add	fp, sp, #24
   139ac:	sub	sp, sp, #48	; 0x30
   139b0:	movw	ip, #29032	; 0x7168
   139b4:	mov	lr, r3
   139b8:	mov	r3, sp
   139bc:	cmp	r1, #0
   139c0:	movt	ip, #2
   139c4:	cmpne	r2, #0
   139c8:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   139cc:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   139d0:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   139d4:	stm	r3, {r4, r5, r6, r7, r8, r9}
   139d8:	mov	r3, #10
   139dc:	str	r3, [sp]
   139e0:	bne	139e8 <__assert_fail@plt+0x29d8>
   139e4:	bl	10ff8 <abort@plt>
   139e8:	ldr	ip, [fp, #8]
   139ec:	str	r2, [sp, #44]	; 0x2c
   139f0:	str	r1, [sp, #40]	; 0x28
   139f4:	mov	r3, sp
   139f8:	mov	r1, lr
   139fc:	mov	r2, ip
   13a00:	bl	134ec <__assert_fail@plt+0x24dc>
   13a04:	sub	sp, fp, #24
   13a08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13a0c:	push	{fp, lr}
   13a10:	mov	fp, sp
   13a14:	sub	sp, sp, #8
   13a18:	mov	r3, r2
   13a1c:	mov	r2, r1
   13a20:	mov	r1, r0
   13a24:	mvn	r0, #0
   13a28:	str	r0, [sp]
   13a2c:	mov	r0, #0
   13a30:	bl	139a4 <__assert_fail@plt+0x2994>
   13a34:	mov	sp, fp
   13a38:	pop	{fp, pc}
   13a3c:	push	{fp, lr}
   13a40:	mov	fp, sp
   13a44:	sub	sp, sp, #8
   13a48:	mov	ip, r2
   13a4c:	mov	r2, r1
   13a50:	mov	r1, r0
   13a54:	str	r3, [sp]
   13a58:	mov	r0, #0
   13a5c:	mov	r3, ip
   13a60:	bl	139a4 <__assert_fail@plt+0x2994>
   13a64:	mov	sp, fp
   13a68:	pop	{fp, pc}
   13a6c:	movw	r3, #28928	; 0x7100
   13a70:	movt	r3, #2
   13a74:	b	134ec <__assert_fail@plt+0x24dc>
   13a78:	movw	r3, #28928	; 0x7100
   13a7c:	mov	r2, r1
   13a80:	mov	r1, r0
   13a84:	mov	r0, #0
   13a88:	movt	r3, #2
   13a8c:	b	134ec <__assert_fail@plt+0x24dc>
   13a90:	movw	r3, #28928	; 0x7100
   13a94:	mvn	r2, #0
   13a98:	movt	r3, #2
   13a9c:	b	134ec <__assert_fail@plt+0x24dc>
   13aa0:	movw	r3, #28928	; 0x7100
   13aa4:	mov	r1, r0
   13aa8:	mov	r0, #0
   13aac:	mvn	r2, #0
   13ab0:	movt	r3, #2
   13ab4:	b	134ec <__assert_fail@plt+0x24dc>
   13ab8:	push	{r4, r5, fp, lr}
   13abc:	add	fp, sp, #8
   13ac0:	mov	r5, r0
   13ac4:	mov	r4, r1
   13ac8:	mov	r0, #0
   13acc:	mov	r2, #5
   13ad0:	mov	r1, r5
   13ad4:	bl	10e30 <dcgettext@plt>
   13ad8:	cmp	r0, r5
   13adc:	popne	{r4, r5, fp, pc}
   13ae0:	bl	14f98 <__assert_fail@plt+0x3f88>
   13ae4:	ldrb	r1, [r0]
   13ae8:	and	r1, r1, #223	; 0xdf
   13aec:	cmp	r1, #71	; 0x47
   13af0:	beq	13b58 <__assert_fail@plt+0x2b48>
   13af4:	cmp	r1, #85	; 0x55
   13af8:	bne	13bb0 <__assert_fail@plt+0x2ba0>
   13afc:	ldrb	r1, [r0, #1]
   13b00:	and	r1, r1, #223	; 0xdf
   13b04:	cmp	r1, #84	; 0x54
   13b08:	bne	13bb0 <__assert_fail@plt+0x2ba0>
   13b0c:	ldrb	r1, [r0, #2]
   13b10:	and	r1, r1, #223	; 0xdf
   13b14:	cmp	r1, #70	; 0x46
   13b18:	bne	13bb0 <__assert_fail@plt+0x2ba0>
   13b1c:	ldrb	r1, [r0, #3]
   13b20:	cmp	r1, #45	; 0x2d
   13b24:	bne	13bb0 <__assert_fail@plt+0x2ba0>
   13b28:	ldrb	r1, [r0, #4]
   13b2c:	cmp	r1, #56	; 0x38
   13b30:	bne	13bb0 <__assert_fail@plt+0x2ba0>
   13b34:	ldrb	r0, [r0, #5]
   13b38:	cmp	r0, #0
   13b3c:	bne	13bb0 <__assert_fail@plt+0x2ba0>
   13b40:	ldrb	r1, [r5]
   13b44:	movw	r2, #23960	; 0x5d98
   13b48:	movw	r0, #23964	; 0x5d9c
   13b4c:	movt	r2, #1
   13b50:	movt	r0, #1
   13b54:	b	13be0 <__assert_fail@plt+0x2bd0>
   13b58:	ldrb	r1, [r0, #1]
   13b5c:	and	r1, r1, #223	; 0xdf
   13b60:	cmp	r1, #66	; 0x42
   13b64:	bne	13bb0 <__assert_fail@plt+0x2ba0>
   13b68:	ldrb	r1, [r0, #2]
   13b6c:	cmp	r1, #49	; 0x31
   13b70:	bne	13bb0 <__assert_fail@plt+0x2ba0>
   13b74:	ldrb	r1, [r0, #3]
   13b78:	cmp	r1, #56	; 0x38
   13b7c:	bne	13bb0 <__assert_fail@plt+0x2ba0>
   13b80:	ldrb	r1, [r0, #4]
   13b84:	cmp	r1, #48	; 0x30
   13b88:	bne	13bb0 <__assert_fail@plt+0x2ba0>
   13b8c:	ldrb	r1, [r0, #5]
   13b90:	cmp	r1, #51	; 0x33
   13b94:	bne	13bb0 <__assert_fail@plt+0x2ba0>
   13b98:	ldrb	r1, [r0, #6]
   13b9c:	cmp	r1, #48	; 0x30
   13ba0:	bne	13bb0 <__assert_fail@plt+0x2ba0>
   13ba4:	ldrb	r0, [r0, #7]
   13ba8:	cmp	r0, #0
   13bac:	beq	13bcc <__assert_fail@plt+0x2bbc>
   13bb0:	movw	r1, #23954	; 0x5d92
   13bb4:	movw	r0, #23958	; 0x5d96
   13bb8:	cmp	r4, #9
   13bbc:	movt	r1, #1
   13bc0:	movt	r0, #1
   13bc4:	moveq	r0, r1
   13bc8:	pop	{r4, r5, fp, pc}
   13bcc:	ldrb	r1, [r5]
   13bd0:	movw	r2, #23968	; 0x5da0
   13bd4:	movw	r0, #23972	; 0x5da4
   13bd8:	movt	r2, #1
   13bdc:	movt	r0, #1
   13be0:	cmp	r1, #96	; 0x60
   13be4:	moveq	r0, r2
   13be8:	pop	{r4, r5, fp, pc}
   13bec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13bf0:	add	fp, sp, #24
   13bf4:	sub	sp, sp, #32
   13bf8:	ldr	r6, [fp, #12]
   13bfc:	ldr	r7, [fp, #8]
   13c00:	mov	r4, r2
   13c04:	mov	r8, r0
   13c08:	cmp	r1, #0
   13c0c:	beq	13c34 <__assert_fail@plt+0x2c24>
   13c10:	movw	r2, #24060	; 0x5dfc
   13c14:	mov	r5, r1
   13c18:	str	r3, [sp, #4]
   13c1c:	str	r4, [sp]
   13c20:	mov	r0, r8
   13c24:	mov	r1, #1
   13c28:	movt	r2, #1
   13c2c:	mov	r3, r5
   13c30:	b	13c4c <__assert_fail@plt+0x2c3c>
   13c34:	movw	r2, #24072	; 0x5e08
   13c38:	str	r3, [sp]
   13c3c:	mov	r0, r8
   13c40:	mov	r1, #1
   13c44:	mov	r3, r4
   13c48:	movt	r2, #1
   13c4c:	bl	10f74 <__fprintf_chk@plt>
   13c50:	movw	r1, #24079	; 0x5e0f
   13c54:	mov	r0, #0
   13c58:	mov	r2, #5
   13c5c:	movt	r1, #1
   13c60:	bl	10e30 <dcgettext@plt>
   13c64:	movw	r2, #24797	; 0x60dd
   13c68:	mov	r3, r0
   13c6c:	movw	r0, #2022	; 0x7e6
   13c70:	mov	r1, #1
   13c74:	movt	r2, #1
   13c78:	str	r0, [sp]
   13c7c:	mov	r0, r8
   13c80:	bl	10f74 <__fprintf_chk@plt>
   13c84:	movw	r4, #23403	; 0x5b6b
   13c88:	mov	r1, r8
   13c8c:	movt	r4, #1
   13c90:	mov	r0, r4
   13c94:	bl	10dc4 <fputs_unlocked@plt>
   13c98:	movw	r1, #24083	; 0x5e13
   13c9c:	mov	r0, #0
   13ca0:	mov	r2, #5
   13ca4:	movt	r1, #1
   13ca8:	bl	10e30 <dcgettext@plt>
   13cac:	movw	r3, #24254	; 0x5ebe
   13cb0:	mov	r2, r0
   13cb4:	mov	r0, r8
   13cb8:	mov	r1, #1
   13cbc:	movt	r3, #1
   13cc0:	bl	10f74 <__fprintf_chk@plt>
   13cc4:	mov	r0, r4
   13cc8:	mov	r1, r8
   13ccc:	bl	10dc4 <fputs_unlocked@plt>
   13cd0:	cmp	r6, #9
   13cd4:	bhi	13d38 <__assert_fail@plt+0x2d28>
   13cd8:	add	r0, pc, #0
   13cdc:	ldr	pc, [r0, r6, lsl #2]
   13ce0:	andeq	r3, r1, r0, lsl pc
   13ce4:	andeq	r3, r1, r8, lsl #26
   13ce8:	andeq	r3, r1, r4, asr #26
   13cec:	andeq	r3, r1, ip, ror #26
   13cf0:	muleq	r1, r4, sp
   13cf4:			; <UNDEFINED> instruction: 0x00013dbc
   13cf8:	andeq	r3, r1, r4, ror #27
   13cfc:	andeq	r3, r1, ip, lsl lr
   13d00:			; <UNDEFINED> instruction: 0x00013ebc
   13d04:	andeq	r3, r1, r4, ror #28
   13d08:	movw	r1, #24288	; 0x5ee0
   13d0c:	mov	r0, #0
   13d10:	mov	r2, #5
   13d14:	movt	r1, #1
   13d18:	bl	10e30 <dcgettext@plt>
   13d1c:	ldr	r3, [r7]
   13d20:	mov	r2, r0
   13d24:	mov	r0, r8
   13d28:	mov	r1, #1
   13d2c:	sub	sp, fp, #24
   13d30:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d34:	b	10f74 <__fprintf_chk@plt>
   13d38:	movw	r1, #24607	; 0x601f
   13d3c:	movt	r1, #1
   13d40:	b	13e6c <__assert_fail@plt+0x2e5c>
   13d44:	movw	r1, #24304	; 0x5ef0
   13d48:	mov	r0, #0
   13d4c:	mov	r2, #5
   13d50:	movt	r1, #1
   13d54:	bl	10e30 <dcgettext@plt>
   13d58:	mov	r2, r0
   13d5c:	ldr	r3, [r7]
   13d60:	ldr	r0, [r7, #4]
   13d64:	str	r0, [sp]
   13d68:	b	13e58 <__assert_fail@plt+0x2e48>
   13d6c:	movw	r1, #24327	; 0x5f07
   13d70:	mov	r0, #0
   13d74:	mov	r2, #5
   13d78:	movt	r1, #1
   13d7c:	bl	10e30 <dcgettext@plt>
   13d80:	mov	r2, r0
   13d84:	ldr	r3, [r7]
   13d88:	ldmib	r7, {r0, r1}
   13d8c:	stm	sp, {r0, r1}
   13d90:	b	13e58 <__assert_fail@plt+0x2e48>
   13d94:	movw	r1, #24355	; 0x5f23
   13d98:	mov	r0, #0
   13d9c:	mov	r2, #5
   13da0:	movt	r1, #1
   13da4:	bl	10e30 <dcgettext@plt>
   13da8:	ldr	r3, [r7]
   13dac:	mov	r2, r0
   13db0:	ldmib	r7, {r0, r1, r7}
   13db4:	stm	sp, {r0, r1, r7}
   13db8:	b	13e58 <__assert_fail@plt+0x2e48>
   13dbc:	movw	r1, #24387	; 0x5f43
   13dc0:	mov	r0, #0
   13dc4:	mov	r2, #5
   13dc8:	movt	r1, #1
   13dcc:	bl	10e30 <dcgettext@plt>
   13dd0:	ldr	r3, [r7]
   13dd4:	mov	r2, r0
   13dd8:	ldmib	r7, {r0, r1, r6, r7}
   13ddc:	stm	sp, {r0, r1, r6, r7}
   13de0:	b	13e58 <__assert_fail@plt+0x2e48>
   13de4:	movw	r1, #24423	; 0x5f67
   13de8:	mov	r0, #0
   13dec:	mov	r2, #5
   13df0:	movt	r1, #1
   13df4:	bl	10e30 <dcgettext@plt>
   13df8:	mov	r2, r0
   13dfc:	ldr	r3, [r7]
   13e00:	ldmib	r7, {r0, r1, r6}
   13e04:	ldr	r5, [r7, #16]
   13e08:	ldr	r7, [r7, #20]
   13e0c:	stm	sp, {r0, r1, r6}
   13e10:	str	r5, [sp, #12]
   13e14:	str	r7, [sp, #16]
   13e18:	b	13e58 <__assert_fail@plt+0x2e48>
   13e1c:	movw	r1, #24463	; 0x5f8f
   13e20:	mov	r0, #0
   13e24:	mov	r2, #5
   13e28:	movt	r1, #1
   13e2c:	bl	10e30 <dcgettext@plt>
   13e30:	mov	r2, r0
   13e34:	ldr	r3, [r7]
   13e38:	ldmib	r7, {r0, r1, r6}
   13e3c:	ldr	r5, [r7, #16]
   13e40:	ldr	r4, [r7, #20]
   13e44:	ldr	r7, [r7, #24]
   13e48:	stm	sp, {r0, r1, r6}
   13e4c:	str	r5, [sp, #12]
   13e50:	str	r4, [sp, #16]
   13e54:	str	r7, [sp, #20]
   13e58:	mov	r0, r8
   13e5c:	mov	r1, #1
   13e60:	b	13f0c <__assert_fail@plt+0x2efc>
   13e64:	movw	r1, #24555	; 0x5feb
   13e68:	movt	r1, #1
   13e6c:	mov	r0, #0
   13e70:	mov	r2, #5
   13e74:	bl	10e30 <dcgettext@plt>
   13e78:	mov	ip, r0
   13e7c:	ldr	r3, [r7]
   13e80:	ldr	r0, [r7, #4]
   13e84:	ldr	r1, [r7, #8]
   13e88:	ldr	r6, [r7, #12]
   13e8c:	ldr	r5, [r7, #16]
   13e90:	ldr	r4, [r7, #20]
   13e94:	ldr	r2, [r7, #24]
   13e98:	ldr	lr, [r7, #28]
   13e9c:	ldr	r7, [r7, #32]
   13ea0:	stm	sp, {r0, r1, r6}
   13ea4:	str	r5, [sp, #12]
   13ea8:	str	r4, [sp, #16]
   13eac:	str	r2, [sp, #20]
   13eb0:	str	lr, [sp, #24]
   13eb4:	str	r7, [sp, #28]
   13eb8:	b	13f00 <__assert_fail@plt+0x2ef0>
   13ebc:	movw	r1, #24507	; 0x5fbb
   13ec0:	mov	r0, #0
   13ec4:	mov	r2, #5
   13ec8:	movt	r1, #1
   13ecc:	bl	10e30 <dcgettext@plt>
   13ed0:	mov	ip, r0
   13ed4:	ldr	r3, [r7]
   13ed8:	ldmib	r7, {r0, r1, r6}
   13edc:	ldr	r5, [r7, #16]
   13ee0:	ldr	r4, [r7, #20]
   13ee4:	ldr	r2, [r7, #24]
   13ee8:	ldr	r7, [r7, #28]
   13eec:	stm	sp, {r0, r1, r6}
   13ef0:	str	r5, [sp, #12]
   13ef4:	str	r4, [sp, #16]
   13ef8:	str	r2, [sp, #20]
   13efc:	str	r7, [sp, #24]
   13f00:	mov	r0, r8
   13f04:	mov	r1, #1
   13f08:	mov	r2, ip
   13f0c:	bl	10f74 <__fprintf_chk@plt>
   13f10:	sub	sp, fp, #24
   13f14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f18:	push	{r4, sl, fp, lr}
   13f1c:	add	fp, sp, #8
   13f20:	sub	sp, sp, #8
   13f24:	ldr	ip, [fp, #8]
   13f28:	mov	lr, #0
   13f2c:	ldr	r4, [ip, lr, lsl #2]
   13f30:	add	lr, lr, #1
   13f34:	cmp	r4, #0
   13f38:	bne	13f2c <__assert_fail@plt+0x2f1c>
   13f3c:	sub	r4, lr, #1
   13f40:	str	ip, [sp]
   13f44:	str	r4, [sp, #4]
   13f48:	bl	13bec <__assert_fail@plt+0x2bdc>
   13f4c:	sub	sp, fp, #8
   13f50:	pop	{r4, sl, fp, pc}
   13f54:	push	{r4, r5, fp, lr}
   13f58:	add	fp, sp, #8
   13f5c:	sub	sp, sp, #48	; 0x30
   13f60:	ldr	r4, [fp, #8]
   13f64:	mov	ip, #0
   13f68:	add	lr, sp, #8
   13f6c:	ldr	r5, [r4]
   13f70:	cmp	r5, #0
   13f74:	str	r5, [lr, ip, lsl #2]
   13f78:	beq	13f90 <__assert_fail@plt+0x2f80>
   13f7c:	add	ip, ip, #1
   13f80:	add	r4, r4, #4
   13f84:	cmp	ip, #10
   13f88:	bne	13f6c <__assert_fail@plt+0x2f5c>
   13f8c:	mov	ip, #10
   13f90:	str	lr, [sp]
   13f94:	str	ip, [sp, #4]
   13f98:	bl	13bec <__assert_fail@plt+0x2bdc>
   13f9c:	sub	sp, fp, #8
   13fa0:	pop	{r4, r5, fp, pc}
   13fa4:	push	{fp, lr}
   13fa8:	mov	fp, sp
   13fac:	sub	sp, sp, #8
   13fb0:	add	ip, fp, #8
   13fb4:	str	ip, [sp, #4]
   13fb8:	str	ip, [sp]
   13fbc:	bl	13f54 <__assert_fail@plt+0x2f44>
   13fc0:	mov	sp, fp
   13fc4:	pop	{fp, pc}
   13fc8:	push	{fp, lr}
   13fcc:	mov	fp, sp
   13fd0:	movw	r0, #28996	; 0x7144
   13fd4:	movt	r0, #2
   13fd8:	ldr	r1, [r0]
   13fdc:	movw	r0, #23403	; 0x5b6b
   13fe0:	movt	r0, #1
   13fe4:	bl	10dc4 <fputs_unlocked@plt>
   13fe8:	movw	r1, #24667	; 0x605b
   13fec:	mov	r0, #0
   13ff0:	mov	r2, #5
   13ff4:	movt	r1, #1
   13ff8:	bl	10e30 <dcgettext@plt>
   13ffc:	movw	r2, #24687	; 0x606f
   14000:	mov	r1, r0
   14004:	mov	r0, #1
   14008:	movt	r2, #1
   1400c:	bl	10f5c <__printf_chk@plt>
   14010:	movw	r1, #24709	; 0x6085
   14014:	mov	r0, #0
   14018:	mov	r2, #5
   1401c:	movt	r1, #1
   14020:	bl	10e30 <dcgettext@plt>
   14024:	movw	r2, #22536	; 0x5808
   14028:	movw	r3, #23212	; 0x5aac
   1402c:	mov	r1, r0
   14030:	mov	r0, #1
   14034:	movt	r2, #1
   14038:	movt	r3, #1
   1403c:	bl	10f5c <__printf_chk@plt>
   14040:	movw	r1, #24729	; 0x6099
   14044:	mov	r0, #0
   14048:	mov	r2, #5
   1404c:	movt	r1, #1
   14050:	bl	10e30 <dcgettext@plt>
   14054:	movw	r2, #24768	; 0x60c0
   14058:	mov	r1, r0
   1405c:	mov	r0, #1
   14060:	movt	r2, #1
   14064:	pop	{fp, lr}
   14068:	b	10f5c <__printf_chk@plt>
   1406c:	b	14070 <__assert_fail@plt+0x3060>
   14070:	push	{r4, r5, r6, sl, fp, lr}
   14074:	add	fp, sp, #16
   14078:	mov	r4, r2
   1407c:	mov	r5, r1
   14080:	mov	r6, r0
   14084:	bl	15034 <__assert_fail@plt+0x4024>
   14088:	cmp	r0, #0
   1408c:	popne	{r4, r5, r6, sl, fp, pc}
   14090:	cmp	r6, #0
   14094:	beq	140a8 <__assert_fail@plt+0x3098>
   14098:	cmp	r5, #0
   1409c:	cmpne	r4, #0
   140a0:	bne	140a8 <__assert_fail@plt+0x3098>
   140a4:	pop	{r4, r5, r6, sl, fp, pc}
   140a8:	bl	144d8 <__assert_fail@plt+0x34c8>
   140ac:	push	{fp, lr}
   140b0:	mov	fp, sp
   140b4:	bl	14cd4 <__assert_fail@plt+0x3cc4>
   140b8:	cmp	r0, #0
   140bc:	popne	{fp, pc}
   140c0:	bl	144d8 <__assert_fail@plt+0x34c8>
   140c4:	push	{fp, lr}
   140c8:	mov	fp, sp
   140cc:	bl	14cd4 <__assert_fail@plt+0x3cc4>
   140d0:	cmp	r0, #0
   140d4:	popne	{fp, pc}
   140d8:	bl	144d8 <__assert_fail@plt+0x34c8>
   140dc:	push	{fp, lr}
   140e0:	mov	fp, sp
   140e4:	bl	14cd4 <__assert_fail@plt+0x3cc4>
   140e8:	cmp	r0, #0
   140ec:	popne	{fp, pc}
   140f0:	bl	144d8 <__assert_fail@plt+0x34c8>
   140f4:	push	{r4, r5, fp, lr}
   140f8:	add	fp, sp, #8
   140fc:	mov	r4, r1
   14100:	mov	r5, r0
   14104:	bl	14d04 <__assert_fail@plt+0x3cf4>
   14108:	cmp	r0, #0
   1410c:	popne	{r4, r5, fp, pc}
   14110:	cmp	r5, #0
   14114:	beq	14124 <__assert_fail@plt+0x3114>
   14118:	cmp	r4, #0
   1411c:	bne	14124 <__assert_fail@plt+0x3114>
   14120:	pop	{r4, r5, fp, pc}
   14124:	bl	144d8 <__assert_fail@plt+0x34c8>
   14128:	push	{fp, lr}
   1412c:	mov	fp, sp
   14130:	cmp	r1, #0
   14134:	orreq	r1, r1, #1
   14138:	bl	14d04 <__assert_fail@plt+0x3cf4>
   1413c:	cmp	r0, #0
   14140:	popne	{fp, pc}
   14144:	bl	144d8 <__assert_fail@plt+0x34c8>
   14148:	push	{fp, lr}
   1414c:	mov	fp, sp
   14150:	clz	r3, r2
   14154:	lsr	ip, r3, #5
   14158:	clz	r3, r1
   1415c:	lsr	r3, r3, #5
   14160:	orrs	r3, r3, ip
   14164:	movwne	r1, #1
   14168:	movwne	r2, #1
   1416c:	bl	15034 <__assert_fail@plt+0x4024>
   14170:	cmp	r0, #0
   14174:	popne	{fp, pc}
   14178:	bl	144d8 <__assert_fail@plt+0x34c8>
   1417c:	push	{fp, lr}
   14180:	mov	fp, sp
   14184:	mov	r2, r1
   14188:	mov	r1, r0
   1418c:	mov	r0, #0
   14190:	bl	15034 <__assert_fail@plt+0x4024>
   14194:	cmp	r0, #0
   14198:	popne	{fp, pc}
   1419c:	bl	144d8 <__assert_fail@plt+0x34c8>
   141a0:	mov	r2, r1
   141a4:	mov	r1, r0
   141a8:	mov	r0, #0
   141ac:	b	14148 <__assert_fail@plt+0x3138>
   141b0:	mov	r2, #1
   141b4:	b	141b8 <__assert_fail@plt+0x31a8>
   141b8:	push	{r4, r5, fp, lr}
   141bc:	add	fp, sp, #8
   141c0:	ldr	r5, [r1]
   141c4:	mov	r4, r1
   141c8:	cmp	r0, #0
   141cc:	beq	141e4 <__assert_fail@plt+0x31d4>
   141d0:	mov	r1, #1
   141d4:	add	r1, r1, r5, lsr #1
   141d8:	adds	r5, r5, r1
   141dc:	bcc	141fc <__assert_fail@plt+0x31ec>
   141e0:	bl	144d8 <__assert_fail@plt+0x34c8>
   141e4:	cmp	r5, #0
   141e8:	bne	141fc <__assert_fail@plt+0x31ec>
   141ec:	mov	r1, #64	; 0x40
   141f0:	cmp	r2, #64	; 0x40
   141f4:	udiv	r5, r1, r2
   141f8:	addhi	r5, r5, #1
   141fc:	mov	r1, r5
   14200:	bl	14070 <__assert_fail@plt+0x3060>
   14204:	str	r5, [r4]
   14208:	pop	{r4, r5, fp, pc}
   1420c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14210:	add	fp, sp, #24
   14214:	ldr	r6, [r1]
   14218:	mov	r8, r1
   1421c:	ldr	r4, [fp, #8]
   14220:	add	r1, r6, r6, asr #1
   14224:	cmp	r1, r6
   14228:	mvnvs	r1, #-2147483648	; 0x80000000
   1422c:	cmp	r1, r3
   14230:	mov	r5, r1
   14234:	movgt	r5, r3
   14238:	cmn	r3, #1
   1423c:	movle	r5, r1
   14240:	cmn	r4, #1
   14244:	ble	14264 <__assert_fail@plt+0x3254>
   14248:	cmp	r4, #0
   1424c:	beq	142b8 <__assert_fail@plt+0x32a8>
   14250:	cmn	r5, #1
   14254:	ble	1428c <__assert_fail@plt+0x327c>
   14258:	mvn	r7, #-2147483648	; 0x80000000
   1425c:	udiv	r1, r7, r4
   14260:	b	14280 <__assert_fail@plt+0x3270>
   14264:	cmn	r5, #1
   14268:	ble	142a8 <__assert_fail@plt+0x3298>
   1426c:	cmn	r4, #1
   14270:	beq	142b8 <__assert_fail@plt+0x32a8>
   14274:	mov	r1, #-2147483648	; 0x80000000
   14278:	mvn	r7, #-2147483648	; 0x80000000
   1427c:	sdiv	r1, r1, r4
   14280:	cmp	r1, r5
   14284:	bge	142b8 <__assert_fail@plt+0x32a8>
   14288:	b	142c8 <__assert_fail@plt+0x32b8>
   1428c:	beq	142b8 <__assert_fail@plt+0x32a8>
   14290:	mov	r1, #-2147483648	; 0x80000000
   14294:	mvn	r7, #-2147483648	; 0x80000000
   14298:	sdiv	r1, r1, r5
   1429c:	cmp	r1, r4
   142a0:	bge	142b8 <__assert_fail@plt+0x32a8>
   142a4:	b	142c8 <__assert_fail@plt+0x32b8>
   142a8:	mvn	r7, #-2147483648	; 0x80000000
   142ac:	sdiv	r1, r7, r4
   142b0:	cmp	r5, r1
   142b4:	blt	142c8 <__assert_fail@plt+0x32b8>
   142b8:	mul	r1, r5, r4
   142bc:	mov	r7, #64	; 0x40
   142c0:	cmp	r1, #63	; 0x3f
   142c4:	bgt	142d0 <__assert_fail@plt+0x32c0>
   142c8:	sdiv	r5, r7, r4
   142cc:	mul	r1, r5, r4
   142d0:	cmp	r0, #0
   142d4:	moveq	r7, #0
   142d8:	streq	r7, [r8]
   142dc:	sub	r7, r5, r6
   142e0:	cmp	r7, r2
   142e4:	bge	14388 <__assert_fail@plt+0x3378>
   142e8:	add	r5, r6, r2
   142ec:	mov	r2, #0
   142f0:	mov	r1, #0
   142f4:	cmp	r5, r3
   142f8:	movwgt	r2, #1
   142fc:	cmn	r3, #1
   14300:	movwgt	r1, #1
   14304:	cmp	r5, r6
   14308:	bvs	14370 <__assert_fail@plt+0x3360>
   1430c:	ands	r1, r1, r2
   14310:	bne	14370 <__assert_fail@plt+0x3360>
   14314:	cmn	r4, #1
   14318:	ble	14338 <__assert_fail@plt+0x3328>
   1431c:	cmp	r4, #0
   14320:	beq	14384 <__assert_fail@plt+0x3374>
   14324:	cmn	r5, #1
   14328:	ble	1435c <__assert_fail@plt+0x334c>
   1432c:	mvn	r1, #-2147483648	; 0x80000000
   14330:	udiv	r1, r1, r4
   14334:	b	14350 <__assert_fail@plt+0x3340>
   14338:	cmn	r5, #1
   1433c:	ble	14374 <__assert_fail@plt+0x3364>
   14340:	cmn	r4, #1
   14344:	beq	14384 <__assert_fail@plt+0x3374>
   14348:	mov	r1, #-2147483648	; 0x80000000
   1434c:	sdiv	r1, r1, r4
   14350:	cmp	r1, r5
   14354:	bge	14384 <__assert_fail@plt+0x3374>
   14358:	b	14370 <__assert_fail@plt+0x3360>
   1435c:	beq	14384 <__assert_fail@plt+0x3374>
   14360:	mov	r1, #-2147483648	; 0x80000000
   14364:	sdiv	r1, r1, r5
   14368:	cmp	r1, r4
   1436c:	bge	14384 <__assert_fail@plt+0x3374>
   14370:	bl	144d8 <__assert_fail@plt+0x34c8>
   14374:	mvn	r1, #-2147483648	; 0x80000000
   14378:	sdiv	r1, r1, r4
   1437c:	cmp	r5, r1
   14380:	blt	14370 <__assert_fail@plt+0x3360>
   14384:	mul	r1, r5, r4
   14388:	bl	140f4 <__assert_fail@plt+0x30e4>
   1438c:	str	r5, [r8]
   14390:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14394:	push	{fp, lr}
   14398:	mov	fp, sp
   1439c:	mov	r1, #1
   143a0:	bl	14c80 <__assert_fail@plt+0x3c70>
   143a4:	cmp	r0, #0
   143a8:	popne	{fp, pc}
   143ac:	bl	144d8 <__assert_fail@plt+0x34c8>
   143b0:	push	{fp, lr}
   143b4:	mov	fp, sp
   143b8:	bl	14c80 <__assert_fail@plt+0x3c70>
   143bc:	cmp	r0, #0
   143c0:	popne	{fp, pc}
   143c4:	bl	144d8 <__assert_fail@plt+0x34c8>
   143c8:	push	{fp, lr}
   143cc:	mov	fp, sp
   143d0:	mov	r1, #1
   143d4:	bl	14c80 <__assert_fail@plt+0x3c70>
   143d8:	cmp	r0, #0
   143dc:	popne	{fp, pc}
   143e0:	bl	144d8 <__assert_fail@plt+0x34c8>
   143e4:	push	{fp, lr}
   143e8:	mov	fp, sp
   143ec:	bl	14c80 <__assert_fail@plt+0x3c70>
   143f0:	cmp	r0, #0
   143f4:	popne	{fp, pc}
   143f8:	bl	144d8 <__assert_fail@plt+0x34c8>
   143fc:	push	{r4, r5, fp, lr}
   14400:	add	fp, sp, #8
   14404:	mov	r5, r0
   14408:	mov	r0, r1
   1440c:	mov	r4, r1
   14410:	bl	14cd4 <__assert_fail@plt+0x3cc4>
   14414:	cmp	r0, #0
   14418:	beq	1442c <__assert_fail@plt+0x341c>
   1441c:	mov	r1, r5
   14420:	mov	r2, r4
   14424:	pop	{r4, r5, fp, lr}
   14428:	b	10e0c <memcpy@plt>
   1442c:	bl	144d8 <__assert_fail@plt+0x34c8>
   14430:	push	{r4, r5, fp, lr}
   14434:	add	fp, sp, #8
   14438:	mov	r5, r0
   1443c:	mov	r0, r1
   14440:	mov	r4, r1
   14444:	bl	14cd4 <__assert_fail@plt+0x3cc4>
   14448:	cmp	r0, #0
   1444c:	beq	14460 <__assert_fail@plt+0x3450>
   14450:	mov	r1, r5
   14454:	mov	r2, r4
   14458:	pop	{r4, r5, fp, lr}
   1445c:	b	10e0c <memcpy@plt>
   14460:	bl	144d8 <__assert_fail@plt+0x34c8>
   14464:	push	{r4, r5, fp, lr}
   14468:	add	fp, sp, #8
   1446c:	mov	r5, r0
   14470:	add	r0, r1, #1
   14474:	mov	r4, r1
   14478:	bl	14cd4 <__assert_fail@plt+0x3cc4>
   1447c:	cmp	r0, #0
   14480:	beq	1449c <__assert_fail@plt+0x348c>
   14484:	mov	r1, #0
   14488:	mov	r2, r4
   1448c:	strb	r1, [r0, r4]
   14490:	mov	r1, r5
   14494:	pop	{r4, r5, fp, lr}
   14498:	b	10e0c <memcpy@plt>
   1449c:	bl	144d8 <__assert_fail@plt+0x34c8>
   144a0:	push	{r4, r5, fp, lr}
   144a4:	add	fp, sp, #8
   144a8:	mov	r4, r0
   144ac:	bl	10f20 <strlen@plt>
   144b0:	add	r5, r0, #1
   144b4:	mov	r0, r5
   144b8:	bl	14cd4 <__assert_fail@plt+0x3cc4>
   144bc:	cmp	r0, #0
   144c0:	beq	144d4 <__assert_fail@plt+0x34c4>
   144c4:	mov	r1, r4
   144c8:	mov	r2, r5
   144cc:	pop	{r4, r5, fp, lr}
   144d0:	b	10e0c <memcpy@plt>
   144d4:	bl	144d8 <__assert_fail@plt+0x34c8>
   144d8:	push	{fp, lr}
   144dc:	mov	fp, sp
   144e0:	movw	r0, #28908	; 0x70ec
   144e4:	movw	r1, #24844	; 0x610c
   144e8:	mov	r2, #5
   144ec:	movt	r0, #2
   144f0:	movt	r1, #1
   144f4:	ldr	r4, [r0]
   144f8:	mov	r0, #0
   144fc:	bl	10e30 <dcgettext@plt>
   14500:	movw	r2, #23807	; 0x5cff
   14504:	mov	r3, r0
   14508:	mov	r0, r4
   1450c:	mov	r1, #0
   14510:	movt	r2, #1
   14514:	bl	10ea8 <error@plt>
   14518:	bl	10ff8 <abort@plt>
   1451c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14520:	add	fp, sp, #24
   14524:	sub	sp, sp, #16
   14528:	mov	r8, r0
   1452c:	ldr	r0, [fp, #16]
   14530:	mov	r7, r3
   14534:	mov	r4, r2
   14538:	mov	r2, r1
   1453c:	add	r3, sp, #8
   14540:	mov	r1, #0
   14544:	str	r0, [sp]
   14548:	mov	r0, r8
   1454c:	bl	14630 <__assert_fail@plt+0x3620>
   14550:	cmp	r0, #0
   14554:	bne	14604 <__assert_fail@plt+0x35f4>
   14558:	ldr	r6, [sp, #8]
   1455c:	ldr	r5, [sp, #12]
   14560:	subs	r0, r6, r4
   14564:	sbcs	r0, r5, r7
   14568:	blt	1458c <__assert_fail@plt+0x357c>
   1456c:	ldr	r1, [fp, #8]
   14570:	ldr	r0, [fp, #12]
   14574:	subs	r1, r1, r6
   14578:	sbcs	r0, r0, r5
   1457c:	movge	r0, r6
   14580:	movge	r1, r5
   14584:	subge	sp, fp, #24
   14588:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   1458c:	subs	r0, r6, #1073741824	; 0x40000000
   14590:	sbcs	r0, r5, #0
   14594:	blt	145a0 <__assert_fail@plt+0x3590>
   14598:	bl	10f38 <__errno_location@plt>
   1459c:	b	145b8 <__assert_fail@plt+0x35a8>
   145a0:	bl	10f38 <__errno_location@plt>
   145a4:	mvn	r2, #1073741824	; 0x40000000
   145a8:	mvn	r1, #0
   145ac:	subs	r2, r2, r6
   145b0:	sbcs	r1, r1, r5
   145b4:	blt	145c0 <__assert_fail@plt+0x35b0>
   145b8:	mov	r1, #75	; 0x4b
   145bc:	b	145c4 <__assert_fail@plt+0x35b4>
   145c0:	mov	r1, #34	; 0x22
   145c4:	str	r1, [r0]
   145c8:	ldr	r6, [r0]
   145cc:	ldr	r4, [fp, #24]
   145d0:	ldr	r5, [fp, #20]
   145d4:	mov	r0, r8
   145d8:	bl	13aa0 <__assert_fail@plt+0x2a90>
   145dc:	subs	r1, r6, #22
   145e0:	movw	r2, #23803	; 0x5cfb
   145e4:	str	r0, [sp]
   145e8:	mov	r3, r5
   145ec:	movne	r1, r6
   145f0:	cmp	r4, #0
   145f4:	movt	r2, #1
   145f8:	movweq	r4, #1
   145fc:	mov	r0, r4
   14600:	bl	10ea8 <error@plt>
   14604:	cmp	r0, #1
   14608:	beq	14598 <__assert_fail@plt+0x3588>
   1460c:	cmp	r0, #3
   14610:	bne	14620 <__assert_fail@plt+0x3610>
   14614:	bl	10f38 <__errno_location@plt>
   14618:	mov	r1, #0
   1461c:	b	145c4 <__assert_fail@plt+0x35b4>
   14620:	bl	10f38 <__errno_location@plt>
   14624:	b	145c8 <__assert_fail@plt+0x35b8>
   14628:	mov	r1, #10
   1462c:	b	1451c <__assert_fail@plt+0x350c>
   14630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14634:	add	fp, sp, #28
   14638:	sub	sp, sp, #28
   1463c:	cmp	r2, #37	; 0x25
   14640:	str	r3, [sp, #12]
   14644:	bcs	14b58 <__assert_fail@plt+0x3b48>
   14648:	ldr	sl, [fp, #8]
   1464c:	mov	r4, r2
   14650:	mov	r6, r1
   14654:	mov	r5, r0
   14658:	bl	10f38 <__errno_location@plt>
   1465c:	cmp	r6, #0
   14660:	add	r8, sp, #24
   14664:	mov	r7, r0
   14668:	mov	r0, #0
   1466c:	mov	r2, r4
   14670:	movne	r8, r6
   14674:	str	r0, [r7]
   14678:	mov	r0, r5
   1467c:	mov	r1, r8
   14680:	bl	10f80 <strtoimax@plt>
   14684:	str	r1, [sp, #20]
   14688:	str	r0, [sp, #16]
   1468c:	ldr	r4, [r8]
   14690:	cmp	r4, r5
   14694:	beq	146c0 <__assert_fail@plt+0x36b0>
   14698:	mov	r6, r0
   1469c:	ldr	r0, [r7]
   146a0:	mov	r9, r1
   146a4:	cmp	r0, #0
   146a8:	beq	14700 <__assert_fail@plt+0x36f0>
   146ac:	mov	r7, #4
   146b0:	cmp	r0, #34	; 0x22
   146b4:	bne	14b4c <__assert_fail@plt+0x3b3c>
   146b8:	mov	r7, #1
   146bc:	b	14704 <__assert_fail@plt+0x36f4>
   146c0:	mov	r7, #4
   146c4:	cmp	sl, #0
   146c8:	beq	14b4c <__assert_fail@plt+0x3b3c>
   146cc:	ldrb	r1, [r5]
   146d0:	cmp	r1, #0
   146d4:	beq	14b4c <__assert_fail@plt+0x3b3c>
   146d8:	mov	r0, sl
   146dc:	bl	10f2c <strchr@plt>
   146e0:	cmp	r0, #0
   146e4:	beq	14b4c <__assert_fail@plt+0x3b3c>
   146e8:	mov	r9, #0
   146ec:	mov	r6, #1
   146f0:	mov	r7, #0
   146f4:	str	r9, [sp, #20]
   146f8:	str	r6, [sp, #16]
   146fc:	b	1470c <__assert_fail@plt+0x36fc>
   14700:	mov	r7, r0
   14704:	cmp	sl, #0
   14708:	beq	147b0 <__assert_fail@plt+0x37a0>
   1470c:	ldrb	r5, [r4]
   14710:	cmp	r5, #0
   14714:	beq	147b8 <__assert_fail@plt+0x37a8>
   14718:	mov	r0, sl
   1471c:	mov	r1, r5
   14720:	bl	10f2c <strchr@plt>
   14724:	cmp	r0, #0
   14728:	beq	147c0 <__assert_fail@plt+0x37b0>
   1472c:	sub	r0, r5, #69	; 0x45
   14730:	str	r7, [sp, #4]
   14734:	mov	r1, #1
   14738:	mov	r7, #1024	; 0x400
   1473c:	cmp	r0, #21
   14740:	str	r1, [sp, #8]
   14744:	bhi	1475c <__assert_fail@plt+0x374c>
   14748:	movw	r2, #35141	; 0x8945
   1474c:	mov	r1, #1
   14750:	movt	r2, #48	; 0x30
   14754:	tst	r2, r1, lsl r0
   14758:	bne	14778 <__assert_fail@plt+0x3768>
   1475c:	sub	r0, r5, #103	; 0x67
   14760:	cmp	r0, #13
   14764:	bhi	147d0 <__assert_fail@plt+0x37c0>
   14768:	mov	r1, #1
   1476c:	movw	r2, #8273	; 0x2051
   14770:	tst	r2, r1, lsl r0
   14774:	beq	147d0 <__assert_fail@plt+0x37c0>
   14778:	ldr	r0, [fp, #8]
   1477c:	mov	r1, #48	; 0x30
   14780:	bl	10f2c <strchr@plt>
   14784:	cmp	r0, #0
   14788:	beq	147d0 <__assert_fail@plt+0x37c0>
   1478c:	ldrb	r0, [r4, #1]
   14790:	ldr	sl, [sp, #12]
   14794:	cmp	r0, #66	; 0x42
   14798:	cmpne	r0, #68	; 0x44
   1479c:	bne	148a4 <__assert_fail@plt+0x3894>
   147a0:	mov	r0, #2
   147a4:	mov	r7, #1000	; 0x3e8
   147a8:	str	r0, [sp, #8]
   147ac:	b	147d4 <__assert_fail@plt+0x37c4>
   147b0:	ldr	r0, [sp, #12]
   147b4:	b	147c8 <__assert_fail@plt+0x37b8>
   147b8:	ldr	sl, [sp, #12]
   147bc:	b	14b48 <__assert_fail@plt+0x3b38>
   147c0:	ldr	r0, [sp, #12]
   147c4:	orr	r7, r7, #2
   147c8:	stm	r0, {r6, r9}
   147cc:	b	14b4c <__assert_fail@plt+0x3b3c>
   147d0:	ldr	sl, [sp, #12]
   147d4:	cmp	r5, #89	; 0x59
   147d8:	bgt	14840 <__assert_fail@plt+0x3830>
   147dc:	sub	r0, r5, #66	; 0x42
   147e0:	cmp	r0, #14
   147e4:	bhi	148c4 <__assert_fail@plt+0x38b4>
   147e8:	add	r1, pc, #0
   147ec:	ldr	pc, [r1, r0, lsl #2]
   147f0:	andeq	r4, r1, ip, lsr #16
   147f4:	ldrdeq	r4, [r1], -ip
   147f8:	ldrdeq	r4, [r1], -ip
   147fc:	andeq	r4, r1, ip, ror #19
   14800:	ldrdeq	r4, [r1], -ip
   14804:	andeq	r4, r1, r0, lsr #18
   14808:	ldrdeq	r4, [r1], -ip
   1480c:	ldrdeq	r4, [r1], -ip
   14810:	ldrdeq	r4, [r1], -ip
   14814:	andeq	r4, r1, r8, asr #18
   14818:	ldrdeq	r4, [r1], -ip
   1481c:	andeq	r4, r1, ip, asr r9
   14820:	ldrdeq	r4, [r1], -ip
   14824:	ldrdeq	r4, [r1], -ip
   14828:	andeq	r4, r1, r4, lsl sl
   1482c:	cmn	r9, #1
   14830:	ble	14a3c <__assert_fail@plt+0x3a2c>
   14834:	cmp	r9, #2097152	; 0x200000
   14838:	blt	14a68 <__assert_fail@plt+0x3a58>
   1483c:	b	14ae8 <__assert_fail@plt+0x3ad8>
   14840:	cmp	r5, #115	; 0x73
   14844:	bgt	148fc <__assert_fail@plt+0x38ec>
   14848:	sub	r0, r5, #98	; 0x62
   1484c:	cmp	r0, #11
   14850:	bhi	149ac <__assert_fail@plt+0x399c>
   14854:	add	r1, pc, #4
   14858:	mov	r4, #0
   1485c:	ldr	pc, [r1, r0, lsl #2]
   14860:	muleq	r1, r0, r8
   14864:	andeq	r4, r1, ip, lsl fp
   14868:	ldrdeq	r4, [r1], -ip
   1486c:	ldrdeq	r4, [r1], -ip
   14870:	ldrdeq	r4, [r1], -ip
   14874:	andeq	r4, r1, r0, lsr #18
   14878:	ldrdeq	r4, [r1], -ip
   1487c:	ldrdeq	r4, [r1], -ip
   14880:	ldrdeq	r4, [r1], -ip
   14884:	andeq	r4, r1, r8, asr #18
   14888:	ldrdeq	r4, [r1], -ip
   1488c:	andeq	r4, r1, ip, asr r9
   14890:	cmn	r9, #1
   14894:	ble	14a7c <__assert_fail@plt+0x3a6c>
   14898:	cmp	r9, #4194304	; 0x400000
   1489c:	blt	14aa8 <__assert_fail@plt+0x3a98>
   148a0:	b	14ae8 <__assert_fail@plt+0x3ad8>
   148a4:	cmp	r0, #105	; 0x69
   148a8:	bne	147d4 <__assert_fail@plt+0x37c4>
   148ac:	ldrb	r0, [r4, #2]
   148b0:	mov	r1, #1
   148b4:	cmp	r0, #66	; 0x42
   148b8:	movweq	r1, #3
   148bc:	str	r1, [sp, #8]
   148c0:	b	147d4 <__assert_fail@plt+0x37c4>
   148c4:	cmp	r5, #84	; 0x54
   148c8:	beq	14984 <__assert_fail@plt+0x3974>
   148cc:	cmp	r5, #89	; 0x59
   148d0:	bne	149dc <__assert_fail@plt+0x39cc>
   148d4:	mov	r4, #0
   148d8:	mvn	r6, #7
   148dc:	add	r5, sp, #16
   148e0:	mov	r0, r5
   148e4:	mov	r1, r7
   148e8:	bl	14b78 <__assert_fail@plt+0x3b68>
   148ec:	orr	r4, r0, r4
   148f0:	adds	r6, r6, #1
   148f4:	bcc	148e0 <__assert_fail@plt+0x38d0>
   148f8:	b	14b1c <__assert_fail@plt+0x3b0c>
   148fc:	cmp	r5, #116	; 0x74
   14900:	beq	14984 <__assert_fail@plt+0x3974>
   14904:	cmp	r5, #119	; 0x77
   14908:	bne	149dc <__assert_fail@plt+0x39cc>
   1490c:	cmn	r9, #1
   14910:	ble	14abc <__assert_fail@plt+0x3aac>
   14914:	cmp	r9, #1073741824	; 0x40000000
   14918:	bge	14ae8 <__assert_fail@plt+0x3ad8>
   1491c:	b	14b04 <__assert_fail@plt+0x3af4>
   14920:	mov	r4, #0
   14924:	mvn	r6, #2
   14928:	add	r5, sp, #16
   1492c:	mov	r0, r5
   14930:	mov	r1, r7
   14934:	bl	14b78 <__assert_fail@plt+0x3b68>
   14938:	orr	r4, r0, r4
   1493c:	adds	r6, r6, #1
   14940:	bcc	1492c <__assert_fail@plt+0x391c>
   14944:	b	14b1c <__assert_fail@plt+0x3b0c>
   14948:	add	r0, sp, #16
   1494c:	mov	r1, r7
   14950:	bl	14b78 <__assert_fail@plt+0x3b68>
   14954:	mov	r4, r0
   14958:	b	14b1c <__assert_fail@plt+0x3b0c>
   1495c:	mov	r4, #0
   14960:	mvn	r6, #1
   14964:	add	r5, sp, #16
   14968:	mov	r0, r5
   1496c:	mov	r1, r7
   14970:	bl	14b78 <__assert_fail@plt+0x3b68>
   14974:	orr	r4, r0, r4
   14978:	adds	r6, r6, #1
   1497c:	bcc	14968 <__assert_fail@plt+0x3958>
   14980:	b	14b1c <__assert_fail@plt+0x3b0c>
   14984:	mov	r4, #0
   14988:	mvn	r6, #3
   1498c:	add	r5, sp, #16
   14990:	mov	r0, r5
   14994:	mov	r1, r7
   14998:	bl	14b78 <__assert_fail@plt+0x3b68>
   1499c:	orr	r4, r0, r4
   149a0:	adds	r6, r6, #1
   149a4:	bcc	14990 <__assert_fail@plt+0x3980>
   149a8:	b	14b1c <__assert_fail@plt+0x3b0c>
   149ac:	cmp	r5, #90	; 0x5a
   149b0:	bne	149dc <__assert_fail@plt+0x39cc>
   149b4:	mov	r4, #0
   149b8:	mvn	r6, #6
   149bc:	add	r5, sp, #16
   149c0:	mov	r0, r5
   149c4:	mov	r1, r7
   149c8:	bl	14b78 <__assert_fail@plt+0x3b68>
   149cc:	orr	r4, r0, r4
   149d0:	adds	r6, r6, #1
   149d4:	bcc	149c0 <__assert_fail@plt+0x39b0>
   149d8:	b	14b1c <__assert_fail@plt+0x3b0c>
   149dc:	stm	sl, {r6, r9}
   149e0:	ldr	r7, [sp, #4]
   149e4:	orr	r7, r7, #2
   149e8:	b	14b4c <__assert_fail@plt+0x3b3c>
   149ec:	mov	r4, #0
   149f0:	mvn	r6, #5
   149f4:	add	r5, sp, #16
   149f8:	mov	r0, r5
   149fc:	mov	r1, r7
   14a00:	bl	14b78 <__assert_fail@plt+0x3b68>
   14a04:	orr	r4, r0, r4
   14a08:	adds	r6, r6, #1
   14a0c:	bcc	149f8 <__assert_fail@plt+0x39e8>
   14a10:	b	14b1c <__assert_fail@plt+0x3b0c>
   14a14:	mov	r4, #0
   14a18:	mvn	r6, #4
   14a1c:	add	r5, sp, #16
   14a20:	mov	r0, r5
   14a24:	mov	r1, r7
   14a28:	bl	14b78 <__assert_fail@plt+0x3b68>
   14a2c:	orr	r4, r0, r4
   14a30:	adds	r6, r6, #1
   14a34:	bcc	14a20 <__assert_fail@plt+0x3a10>
   14a38:	b	14b1c <__assert_fail@plt+0x3b0c>
   14a3c:	and	r0, r6, r9
   14a40:	cmn	r0, #1
   14a44:	beq	14a68 <__assert_fail@plt+0x3a58>
   14a48:	mov	r0, #0
   14a4c:	mov	r1, #-2147483648	; 0x80000000
   14a50:	mov	r2, r6
   14a54:	mov	r3, r9
   14a58:	bl	15170 <__assert_fail@plt+0x4160>
   14a5c:	subs	r0, r0, #1024	; 0x400
   14a60:	sbcs	r0, r1, #0
   14a64:	blt	14ae8 <__assert_fail@plt+0x3ad8>
   14a68:	lsl	r0, r9, #10
   14a6c:	lsl	r1, r6, #10
   14a70:	mov	r4, #0
   14a74:	orr	r0, r0, r6, lsr #22
   14a78:	b	14b14 <__assert_fail@plt+0x3b04>
   14a7c:	and	r0, r6, r9
   14a80:	cmn	r0, #1
   14a84:	beq	14aa8 <__assert_fail@plt+0x3a98>
   14a88:	mov	r0, #0
   14a8c:	mov	r1, #-2147483648	; 0x80000000
   14a90:	mov	r2, r6
   14a94:	mov	r3, r9
   14a98:	bl	15170 <__assert_fail@plt+0x4160>
   14a9c:	subs	r0, r0, #512	; 0x200
   14aa0:	sbcs	r0, r1, #0
   14aa4:	blt	14ae8 <__assert_fail@plt+0x3ad8>
   14aa8:	lsl	r0, r9, #9
   14aac:	lsl	r1, r6, #9
   14ab0:	mov	r4, #0
   14ab4:	orr	r0, r0, r6, lsr #23
   14ab8:	b	14b14 <__assert_fail@plt+0x3b04>
   14abc:	and	r0, r6, r9
   14ac0:	cmn	r0, #1
   14ac4:	beq	14b04 <__assert_fail@plt+0x3af4>
   14ac8:	mov	r0, #0
   14acc:	mov	r1, #-2147483648	; 0x80000000
   14ad0:	mov	r2, r6
   14ad4:	mov	r3, r9
   14ad8:	bl	15170 <__assert_fail@plt+0x4160>
   14adc:	subs	r0, r0, #2
   14ae0:	sbcs	r0, r1, #0
   14ae4:	bge	14b04 <__assert_fail@plt+0x3af4>
   14ae8:	cmp	r9, #0
   14aec:	mvn	r0, #-2147483648	; 0x80000000
   14af0:	mvn	r1, #0
   14af4:	mov	r4, #1
   14af8:	movmi	r0, #-2147483648	; 0x80000000
   14afc:	movwmi	r1, #0
   14b00:	b	14b14 <__assert_fail@plt+0x3b04>
   14b04:	lsl	r0, r9, #1
   14b08:	lsl	r1, r6, #1
   14b0c:	mov	r4, #0
   14b10:	orr	r0, r0, r6, lsr #31
   14b14:	str	r1, [sp, #16]
   14b18:	str	r0, [sp, #20]
   14b1c:	ldr	r0, [r8]
   14b20:	ldr	r2, [sp, #8]
   14b24:	ldr	r7, [sp, #4]
   14b28:	add	r1, r0, r2
   14b2c:	orr	r7, r4, r7
   14b30:	str	r1, [r8]
   14b34:	ldrb	r0, [r0, r2]
   14b38:	ldr	r6, [sp, #16]
   14b3c:	ldr	r9, [sp, #20]
   14b40:	cmp	r0, #0
   14b44:	orrne	r7, r7, #2
   14b48:	stm	sl, {r6, r9}
   14b4c:	mov	r0, r7
   14b50:	sub	sp, fp, #28
   14b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b58:	movw	r0, #24861	; 0x611d
   14b5c:	movw	r1, #24899	; 0x6143
   14b60:	movw	r3, #24915	; 0x6153
   14b64:	mov	r2, #85	; 0x55
   14b68:	movt	r0, #1
   14b6c:	movt	r1, #1
   14b70:	movt	r3, #1
   14b74:	bl	11010 <__assert_fail@plt>
   14b78:	push	{r4, r5, r6, r7, fp, lr}
   14b7c:	add	fp, sp, #16
   14b80:	mov	r5, r1
   14b84:	mov	r4, r0
   14b88:	cmn	r1, #1
   14b8c:	ble	14bb4 <__assert_fail@plt+0x3ba4>
   14b90:	ldrd	r6, [r4]
   14b94:	cmp	r5, #0
   14b98:	beq	14c60 <__assert_fail@plt+0x3c50>
   14b9c:	cmn	r7, #1
   14ba0:	ble	14bec <__assert_fail@plt+0x3bdc>
   14ba4:	asr	r3, r5, #31
   14ba8:	mvn	r0, #0
   14bac:	mvn	r1, #-2147483648	; 0x80000000
   14bb0:	b	14bd4 <__assert_fail@plt+0x3bc4>
   14bb4:	ldrd	r6, [r4]
   14bb8:	cmn	r7, #1
   14bbc:	ble	14c1c <__assert_fail@plt+0x3c0c>
   14bc0:	cmn	r5, #1
   14bc4:	beq	14c60 <__assert_fail@plt+0x3c50>
   14bc8:	asr	r3, r5, #31
   14bcc:	mov	r0, #0
   14bd0:	mov	r1, #-2147483648	; 0x80000000
   14bd4:	mov	r2, r5
   14bd8:	bl	15170 <__assert_fail@plt+0x4160>
   14bdc:	subs	r0, r0, r6
   14be0:	sbcs	r0, r1, r7
   14be4:	blt	14c3c <__assert_fail@plt+0x3c2c>
   14be8:	b	14c60 <__assert_fail@plt+0x3c50>
   14bec:	and	r0, r6, r7
   14bf0:	cmn	r0, #1
   14bf4:	beq	14c58 <__assert_fail@plt+0x3c48>
   14bf8:	mov	r0, #0
   14bfc:	mov	r1, #-2147483648	; 0x80000000
   14c00:	mov	r2, r6
   14c04:	mov	r3, r7
   14c08:	bl	15170 <__assert_fail@plt+0x4160>
   14c0c:	subs	r0, r0, r5
   14c10:	sbcs	r0, r1, r5, asr #31
   14c14:	blt	14c3c <__assert_fail@plt+0x3c2c>
   14c18:	b	14c60 <__assert_fail@plt+0x3c50>
   14c1c:	asr	r3, r5, #31
   14c20:	mvn	r0, #0
   14c24:	mvn	r1, #-2147483648	; 0x80000000
   14c28:	mov	r2, r5
   14c2c:	bl	15170 <__assert_fail@plt+0x4160>
   14c30:	subs	r0, r6, r0
   14c34:	sbcs	r0, r7, r1
   14c38:	bge	14c60 <__assert_fail@plt+0x3c50>
   14c3c:	cmp	r7, #0
   14c40:	mvn	r1, #-2147483648	; 0x80000000
   14c44:	mvn	r2, #0
   14c48:	mov	r0, #1
   14c4c:	movmi	r1, #-2147483648	; 0x80000000
   14c50:	movwmi	r2, #0
   14c54:	b	14c74 <__assert_fail@plt+0x3c64>
   14c58:	mvn	r6, #0
   14c5c:	mvn	r7, #0
   14c60:	umull	r2, r0, r6, r5
   14c64:	asr	r1, r5, #31
   14c68:	mla	r0, r6, r1, r0
   14c6c:	mla	r1, r7, r5, r0
   14c70:	mov	r0, #0
   14c74:	str	r2, [r4]
   14c78:	str	r1, [r4, #4]
   14c7c:	pop	{r4, r5, r6, r7, fp, pc}
   14c80:	clz	r2, r1
   14c84:	clz	r3, r0
   14c88:	lsr	r2, r2, #5
   14c8c:	lsr	r3, r3, #5
   14c90:	orrs	r2, r3, r2
   14c94:	movwne	r1, #1
   14c98:	movwne	r0, #1
   14c9c:	cmp	r1, #0
   14ca0:	beq	14cd0 <__assert_fail@plt+0x3cc0>
   14ca4:	mvn	r2, #-2147483648	; 0x80000000
   14ca8:	udiv	r2, r2, r1
   14cac:	cmp	r2, r0
   14cb0:	bcs	14cd0 <__assert_fail@plt+0x3cc0>
   14cb4:	push	{fp, lr}
   14cb8:	mov	fp, sp
   14cbc:	bl	10f38 <__errno_location@plt>
   14cc0:	mov	r1, #12
   14cc4:	str	r1, [r0]
   14cc8:	mov	r0, #0
   14ccc:	pop	{fp, pc}
   14cd0:	b	10db8 <calloc@plt>
   14cd4:	cmp	r0, #0
   14cd8:	movweq	r0, #1
   14cdc:	cmn	r0, #1
   14ce0:	ble	14ce8 <__assert_fail@plt+0x3cd8>
   14ce4:	b	10ec0 <malloc@plt>
   14ce8:	push	{fp, lr}
   14cec:	mov	fp, sp
   14cf0:	bl	10f38 <__errno_location@plt>
   14cf4:	mov	r1, #12
   14cf8:	str	r1, [r0]
   14cfc:	mov	r0, #0
   14d00:	pop	{fp, pc}
   14d04:	push	{fp, lr}
   14d08:	mov	fp, sp
   14d0c:	cmp	r0, #0
   14d10:	beq	14d2c <__assert_fail@plt+0x3d1c>
   14d14:	cmp	r1, #0
   14d18:	beq	14d38 <__assert_fail@plt+0x3d28>
   14d1c:	cmn	r1, #1
   14d20:	ble	14d40 <__assert_fail@plt+0x3d30>
   14d24:	pop	{fp, lr}
   14d28:	b	10e3c <realloc@plt>
   14d2c:	mov	r0, r1
   14d30:	pop	{fp, lr}
   14d34:	b	14cd4 <__assert_fail@plt+0x3cc4>
   14d38:	bl	14ecc <__assert_fail@plt+0x3ebc>
   14d3c:	b	14d4c <__assert_fail@plt+0x3d3c>
   14d40:	bl	10f38 <__errno_location@plt>
   14d44:	mov	r1, #12
   14d48:	str	r1, [r0]
   14d4c:	mov	r0, #0
   14d50:	pop	{fp, pc}
   14d54:	push	{r4, r5, r6, sl, fp, lr}
   14d58:	add	fp, sp, #16
   14d5c:	mov	r4, r0
   14d60:	bl	10e84 <__fpending@plt>
   14d64:	mov	r5, r0
   14d68:	mov	r0, r4
   14d6c:	bl	10e90 <ferror_unlocked@plt>
   14d70:	mov	r6, r0
   14d74:	mov	r0, r4
   14d78:	bl	14dd4 <__assert_fail@plt+0x3dc4>
   14d7c:	cmp	r6, #0
   14d80:	beq	14da0 <__assert_fail@plt+0x3d90>
   14d84:	mvn	r4, #0
   14d88:	cmp	r0, #0
   14d8c:	bne	14dcc <__assert_fail@plt+0x3dbc>
   14d90:	bl	10f38 <__errno_location@plt>
   14d94:	mov	r1, #0
   14d98:	str	r1, [r0]
   14d9c:	b	14dcc <__assert_fail@plt+0x3dbc>
   14da0:	cmp	r0, #0
   14da4:	mov	r4, r0
   14da8:	mvnne	r4, #0
   14dac:	cmp	r5, #0
   14db0:	bne	14dcc <__assert_fail@plt+0x3dbc>
   14db4:	cmp	r0, #0
   14db8:	beq	14dcc <__assert_fail@plt+0x3dbc>
   14dbc:	bl	10f38 <__errno_location@plt>
   14dc0:	ldr	r0, [r0]
   14dc4:	subs	r4, r0, #9
   14dc8:	mvnne	r4, #0
   14dcc:	mov	r0, r4
   14dd0:	pop	{r4, r5, r6, sl, fp, pc}
   14dd4:	push	{r4, r5, r6, sl, fp, lr}
   14dd8:	add	fp, sp, #16
   14ddc:	sub	sp, sp, #8
   14de0:	mov	r4, r0
   14de4:	bl	10f68 <fileno@plt>
   14de8:	cmn	r0, #1
   14dec:	ble	14e60 <__assert_fail@plt+0x3e50>
   14df0:	mov	r0, r4
   14df4:	bl	10ed8 <__freading@plt>
   14df8:	cmp	r0, #0
   14dfc:	beq	14e28 <__assert_fail@plt+0x3e18>
   14e00:	mov	r0, r4
   14e04:	bl	10f68 <fileno@plt>
   14e08:	mov	r1, #1
   14e0c:	mov	r2, #0
   14e10:	mov	r3, #0
   14e14:	str	r1, [sp]
   14e18:	bl	10e6c <lseek64@plt>
   14e1c:	and	r0, r0, r1
   14e20:	cmn	r0, #1
   14e24:	beq	14e60 <__assert_fail@plt+0x3e50>
   14e28:	mov	r0, r4
   14e2c:	bl	14e70 <__assert_fail@plt+0x3e60>
   14e30:	cmp	r0, #0
   14e34:	beq	14e60 <__assert_fail@plt+0x3e50>
   14e38:	bl	10f38 <__errno_location@plt>
   14e3c:	ldr	r6, [r0]
   14e40:	mov	r5, r0
   14e44:	mov	r0, r4
   14e48:	bl	10f8c <fclose@plt>
   14e4c:	cmp	r6, #0
   14e50:	strne	r6, [r5]
   14e54:	mvnne	r0, #0
   14e58:	sub	sp, fp, #16
   14e5c:	pop	{r4, r5, r6, sl, fp, pc}
   14e60:	mov	r0, r4
   14e64:	sub	sp, fp, #16
   14e68:	pop	{r4, r5, r6, sl, fp, lr}
   14e6c:	b	10f8c <fclose@plt>
   14e70:	push	{r4, sl, fp, lr}
   14e74:	add	fp, sp, #8
   14e78:	sub	sp, sp, #8
   14e7c:	mov	r4, r0
   14e80:	cmp	r0, #0
   14e84:	beq	14ebc <__assert_fail@plt+0x3eac>
   14e88:	mov	r0, r4
   14e8c:	bl	10ed8 <__freading@plt>
   14e90:	cmp	r0, #0
   14e94:	beq	14ebc <__assert_fail@plt+0x3eac>
   14e98:	ldrb	r0, [r4, #1]
   14e9c:	tst	r0, #1
   14ea0:	beq	14ebc <__assert_fail@plt+0x3eac>
   14ea4:	mov	r0, #1
   14ea8:	mov	r2, #0
   14eac:	mov	r3, #0
   14eb0:	str	r0, [sp]
   14eb4:	mov	r0, r4
   14eb8:	bl	14ef4 <__assert_fail@plt+0x3ee4>
   14ebc:	mov	r0, r4
   14ec0:	sub	sp, fp, #8
   14ec4:	pop	{r4, sl, fp, lr}
   14ec8:	b	10de8 <fflush@plt>
   14ecc:	push	{r4, r5, r6, sl, fp, lr}
   14ed0:	add	fp, sp, #16
   14ed4:	mov	r4, r0
   14ed8:	bl	10f38 <__errno_location@plt>
   14edc:	ldr	r6, [r0]
   14ee0:	mov	r5, r0
   14ee4:	mov	r0, r4
   14ee8:	bl	10df4 <free@plt>
   14eec:	str	r6, [r5]
   14ef0:	pop	{r4, r5, r6, sl, fp, pc}
   14ef4:	push	{r4, r5, r6, r7, fp, lr}
   14ef8:	add	fp, sp, #16
   14efc:	sub	sp, sp, #8
   14f00:	mov	r4, r0
   14f04:	ldr	r0, [r0, #4]
   14f08:	mov	r5, r3
   14f0c:	mov	r6, r2
   14f10:	ldr	r1, [r4, #8]
   14f14:	cmp	r1, r0
   14f18:	bne	14f34 <__assert_fail@plt+0x3f24>
   14f1c:	ldrd	r0, [r4, #16]
   14f20:	cmp	r1, r0
   14f24:	bne	14f34 <__assert_fail@plt+0x3f24>
   14f28:	ldr	r0, [r4, #36]	; 0x24
   14f2c:	cmp	r0, #0
   14f30:	beq	14f4c <__assert_fail@plt+0x3f3c>
   14f34:	mov	r0, r4
   14f38:	mov	r2, r6
   14f3c:	mov	r3, r5
   14f40:	sub	sp, fp, #16
   14f44:	pop	{r4, r5, r6, r7, fp, lr}
   14f48:	b	10f98 <fseeko64@plt>
   14f4c:	ldr	r7, [fp, #8]
   14f50:	mov	r0, r4
   14f54:	bl	10f68 <fileno@plt>
   14f58:	mov	r2, r6
   14f5c:	mov	r3, r5
   14f60:	str	r7, [sp]
   14f64:	bl	10e6c <lseek64@plt>
   14f68:	and	r2, r0, r1
   14f6c:	cmn	r2, #1
   14f70:	beq	14f8c <__assert_fail@plt+0x3f7c>
   14f74:	strd	r0, [r4, #80]	; 0x50
   14f78:	ldr	r0, [r4]
   14f7c:	bic	r0, r0, #16
   14f80:	str	r0, [r4]
   14f84:	mov	r0, #0
   14f88:	b	14f90 <__assert_fail@plt+0x3f80>
   14f8c:	mvn	r0, #0
   14f90:	sub	sp, fp, #16
   14f94:	pop	{r4, r5, r6, r7, fp, pc}
   14f98:	push	{fp, lr}
   14f9c:	mov	fp, sp
   14fa0:	mov	r0, #14
   14fa4:	bl	10fbc <nl_langinfo@plt>
   14fa8:	movw	r1, #23404	; 0x5b6c
   14fac:	cmp	r0, #0
   14fb0:	movt	r1, #1
   14fb4:	movne	r1, r0
   14fb8:	movw	r0, #24993	; 0x61a1
   14fbc:	ldrb	r2, [r1]
   14fc0:	movt	r0, #1
   14fc4:	cmp	r2, #0
   14fc8:	movne	r0, r1
   14fcc:	pop	{fp, pc}
   14fd0:	push	{r4, r5, r6, r7, fp, lr}
   14fd4:	add	fp, sp, #16
   14fd8:	sub	sp, sp, #8
   14fdc:	cmp	r0, #0
   14fe0:	add	r5, sp, #4
   14fe4:	mov	r7, r2
   14fe8:	mov	r4, r1
   14fec:	movne	r5, r0
   14ff0:	mov	r0, r5
   14ff4:	bl	10e9c <mbrtowc@plt>
   14ff8:	mov	r6, r0
   14ffc:	cmp	r7, #0
   15000:	beq	15028 <__assert_fail@plt+0x4018>
   15004:	cmn	r6, #2
   15008:	bcc	15028 <__assert_fail@plt+0x4018>
   1500c:	mov	r0, #0
   15010:	bl	15070 <__assert_fail@plt+0x4060>
   15014:	cmp	r0, #0
   15018:	bne	15028 <__assert_fail@plt+0x4018>
   1501c:	ldrb	r0, [r4]
   15020:	mov	r6, #1
   15024:	str	r0, [r5]
   15028:	mov	r0, r6
   1502c:	sub	sp, fp, #16
   15030:	pop	{r4, r5, r6, r7, fp, pc}
   15034:	cmp	r2, #0
   15038:	beq	15068 <__assert_fail@plt+0x4058>
   1503c:	mvn	r3, #0
   15040:	udiv	r3, r3, r2
   15044:	cmp	r3, r1
   15048:	bcs	15068 <__assert_fail@plt+0x4058>
   1504c:	push	{fp, lr}
   15050:	mov	fp, sp
   15054:	bl	10f38 <__errno_location@plt>
   15058:	mov	r1, #12
   1505c:	str	r1, [r0]
   15060:	mov	r0, #0
   15064:	pop	{fp, pc}
   15068:	mul	r1, r2, r1
   1506c:	b	14d04 <__assert_fail@plt+0x3cf4>
   15070:	push	{r4, sl, fp, lr}
   15074:	add	fp, sp, #8
   15078:	sub	sp, sp, #264	; 0x108
   1507c:	add	r1, sp, #7
   15080:	movw	r2, #257	; 0x101
   15084:	bl	150dc <__assert_fail@plt+0x40cc>
   15088:	mov	r4, #0
   1508c:	cmp	r0, #0
   15090:	bne	150d0 <__assert_fail@plt+0x40c0>
   15094:	movw	r1, #24999	; 0x61a7
   15098:	add	r0, sp, #7
   1509c:	mov	r2, #2
   150a0:	movt	r1, #1
   150a4:	bl	10f14 <bcmp@plt>
   150a8:	cmp	r0, #0
   150ac:	beq	150d0 <__assert_fail@plt+0x40c0>
   150b0:	movw	r1, #25001	; 0x61a9
   150b4:	add	r0, sp, #7
   150b8:	mov	r2, #6
   150bc:	movt	r1, #1
   150c0:	bl	10f14 <bcmp@plt>
   150c4:	cmp	r0, #0
   150c8:	mov	r4, r0
   150cc:	movwne	r4, #1
   150d0:	mov	r0, r4
   150d4:	sub	sp, fp, #8
   150d8:	pop	{r4, sl, fp, pc}
   150dc:	push	{r4, r5, r6, r7, fp, lr}
   150e0:	add	fp, sp, #16
   150e4:	mov	r4, r1
   150e8:	mov	r1, #0
   150ec:	mov	r6, r2
   150f0:	bl	10fa4 <setlocale@plt>
   150f4:	cmp	r0, #0
   150f8:	beq	15124 <__assert_fail@plt+0x4114>
   150fc:	mov	r7, r0
   15100:	bl	10f20 <strlen@plt>
   15104:	cmp	r0, r6
   15108:	bcs	15138 <__assert_fail@plt+0x4128>
   1510c:	add	r2, r0, #1
   15110:	mov	r0, r4
   15114:	mov	r1, r7
   15118:	bl	10e0c <memcpy@plt>
   1511c:	mov	r5, #0
   15120:	b	15160 <__assert_fail@plt+0x4150>
   15124:	cmp	r6, #0
   15128:	mov	r5, #22
   1512c:	movne	r0, #0
   15130:	strbne	r0, [r4]
   15134:	b	15160 <__assert_fail@plt+0x4150>
   15138:	mov	r5, #34	; 0x22
   1513c:	cmp	r6, #0
   15140:	beq	15160 <__assert_fail@plt+0x4150>
   15144:	sub	r6, r6, #1
   15148:	mov	r0, r4
   1514c:	mov	r1, r7
   15150:	mov	r2, r6
   15154:	bl	10e0c <memcpy@plt>
   15158:	mov	r0, #0
   1515c:	strb	r0, [r4, r6]
   15160:	mov	r0, r5
   15164:	pop	{r4, r5, r6, r7, fp, pc}
   15168:	mov	r1, #0
   1516c:	b	10fa4 <setlocale@plt>
   15170:	cmp	r3, #0
   15174:	cmpeq	r2, #0
   15178:	bne	1519c <__assert_fail@plt+0x418c>
   1517c:	cmp	r1, #0
   15180:	movlt	r1, #-2147483648	; 0x80000000
   15184:	movlt	r0, #0
   15188:	blt	15198 <__assert_fail@plt+0x4188>
   1518c:	cmpeq	r0, #0
   15190:	mvnne	r1, #-2147483648	; 0x80000000
   15194:	mvnne	r0, #0
   15198:	b	15244 <__assert_fail@plt+0x4234>
   1519c:	sub	sp, sp, #8
   151a0:	push	{sp, lr}
   151a4:	cmp	r1, #0
   151a8:	blt	151c8 <__assert_fail@plt+0x41b8>
   151ac:	cmp	r3, #0
   151b0:	blt	151fc <__assert_fail@plt+0x41ec>
   151b4:	bl	15254 <__assert_fail@plt+0x4244>
   151b8:	ldr	lr, [sp, #4]
   151bc:	add	sp, sp, #8
   151c0:	pop	{r2, r3}
   151c4:	bx	lr
   151c8:	rsbs	r0, r0, #0
   151cc:	sbc	r1, r1, r1, lsl #1
   151d0:	cmp	r3, #0
   151d4:	blt	15220 <__assert_fail@plt+0x4210>
   151d8:	bl	15254 <__assert_fail@plt+0x4244>
   151dc:	ldr	lr, [sp, #4]
   151e0:	add	sp, sp, #8
   151e4:	pop	{r2, r3}
   151e8:	rsbs	r0, r0, #0
   151ec:	sbc	r1, r1, r1, lsl #1
   151f0:	rsbs	r2, r2, #0
   151f4:	sbc	r3, r3, r3, lsl #1
   151f8:	bx	lr
   151fc:	rsbs	r2, r2, #0
   15200:	sbc	r3, r3, r3, lsl #1
   15204:	bl	15254 <__assert_fail@plt+0x4244>
   15208:	ldr	lr, [sp, #4]
   1520c:	add	sp, sp, #8
   15210:	pop	{r2, r3}
   15214:	rsbs	r0, r0, #0
   15218:	sbc	r1, r1, r1, lsl #1
   1521c:	bx	lr
   15220:	rsbs	r2, r2, #0
   15224:	sbc	r3, r3, r3, lsl #1
   15228:	bl	15254 <__assert_fail@plt+0x4244>
   1522c:	ldr	lr, [sp, #4]
   15230:	add	sp, sp, #8
   15234:	pop	{r2, r3}
   15238:	rsbs	r2, r2, #0
   1523c:	sbc	r3, r3, r3, lsl #1
   15240:	bx	lr
   15244:	push	{r1, lr}
   15248:	mov	r0, #8
   1524c:	bl	10dd0 <raise@plt>
   15250:	pop	{r1, pc}
   15254:	cmp	r1, r3
   15258:	cmpeq	r0, r2
   1525c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15260:	mov	r4, r0
   15264:	movcc	r0, #0
   15268:	mov	r5, r1
   1526c:	ldr	lr, [sp, #36]	; 0x24
   15270:	movcc	r1, r0
   15274:	bcc	15370 <__assert_fail@plt+0x4360>
   15278:	cmp	r3, #0
   1527c:	clzeq	ip, r2
   15280:	clzne	ip, r3
   15284:	addeq	ip, ip, #32
   15288:	cmp	r5, #0
   1528c:	clzeq	r1, r4
   15290:	addeq	r1, r1, #32
   15294:	clzne	r1, r5
   15298:	sub	ip, ip, r1
   1529c:	sub	sl, ip, #32
   152a0:	lsl	r9, r3, ip
   152a4:	rsb	fp, ip, #32
   152a8:	orr	r9, r9, r2, lsl sl
   152ac:	orr	r9, r9, r2, lsr fp
   152b0:	lsl	r8, r2, ip
   152b4:	cmp	r5, r9
   152b8:	cmpeq	r4, r8
   152bc:	movcc	r0, #0
   152c0:	movcc	r1, r0
   152c4:	bcc	152e0 <__assert_fail@plt+0x42d0>
   152c8:	mov	r0, #1
   152cc:	subs	r4, r4, r8
   152d0:	lsl	r1, r0, sl
   152d4:	orr	r1, r1, r0, lsr fp
   152d8:	lsl	r0, r0, ip
   152dc:	sbc	r5, r5, r9
   152e0:	cmp	ip, #0
   152e4:	beq	15370 <__assert_fail@plt+0x4360>
   152e8:	lsr	r6, r8, #1
   152ec:	orr	r6, r6, r9, lsl #31
   152f0:	lsr	r7, r9, #1
   152f4:	mov	r2, ip
   152f8:	b	1531c <__assert_fail@plt+0x430c>
   152fc:	subs	r3, r4, r6
   15300:	sbc	r8, r5, r7
   15304:	adds	r3, r3, r3
   15308:	adc	r8, r8, r8
   1530c:	adds	r4, r3, #1
   15310:	adc	r5, r8, #0
   15314:	subs	r2, r2, #1
   15318:	beq	15338 <__assert_fail@plt+0x4328>
   1531c:	cmp	r5, r7
   15320:	cmpeq	r4, r6
   15324:	bcs	152fc <__assert_fail@plt+0x42ec>
   15328:	adds	r4, r4, r4
   1532c:	adc	r5, r5, r5
   15330:	subs	r2, r2, #1
   15334:	bne	1531c <__assert_fail@plt+0x430c>
   15338:	lsr	r3, r4, ip
   1533c:	orr	r3, r3, r5, lsl fp
   15340:	lsr	r2, r5, ip
   15344:	orr	r3, r3, r5, lsr sl
   15348:	adds	r0, r0, r4
   1534c:	mov	r4, r3
   15350:	lsl	r3, r2, ip
   15354:	orr	r3, r3, r4, lsl sl
   15358:	lsl	ip, r4, ip
   1535c:	orr	r3, r3, r4, lsr fp
   15360:	adc	r1, r1, r5
   15364:	subs	r0, r0, ip
   15368:	mov	r5, r2
   1536c:	sbc	r1, r1, r3
   15370:	cmp	lr, #0
   15374:	strdne	r4, [lr]
   15378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1537c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15380:	mov	r7, r0
   15384:	ldr	r6, [pc, #72]	; 153d4 <__assert_fail@plt+0x43c4>
   15388:	ldr	r5, [pc, #72]	; 153d8 <__assert_fail@plt+0x43c8>
   1538c:	add	r6, pc, r6
   15390:	add	r5, pc, r5
   15394:	sub	r6, r6, r5
   15398:	mov	r8, r1
   1539c:	mov	r9, r2
   153a0:	bl	10d98 <calloc@plt-0x20>
   153a4:	asrs	r6, r6, #2
   153a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   153ac:	mov	r4, #0
   153b0:	add	r4, r4, #1
   153b4:	ldr	r3, [r5], #4
   153b8:	mov	r2, r9
   153bc:	mov	r1, r8
   153c0:	mov	r0, r7
   153c4:	blx	r3
   153c8:	cmp	r6, r4
   153cc:	bne	153b0 <__assert_fail@plt+0x43a0>
   153d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   153d4:	andeq	r1, r1, r8, ror fp
   153d8:	andeq	r1, r1, r0, ror fp
   153dc:	bx	lr
   153e0:	ldr	r3, [pc, #12]	; 153f4 <__assert_fail@plt+0x43e4>
   153e4:	mov	r1, #0
   153e8:	add	r3, pc, r3
   153ec:	ldr	r2, [r3]
   153f0:	b	10f44 <__cxa_atexit@plt>
   153f4:	strdeq	r1, [r1], -r4
   153f8:	mov	r2, r1
   153fc:	mov	r1, r0
   15400:	mov	r0, #3
   15404:	b	10fd4 <__xstat64@plt>
   15408:	mov	r2, r1
   1540c:	mov	r1, r0
   15410:	mov	r0, #3
   15414:	b	10e60 <__fxstat64@plt>

Disassembly of section .fini:

00015418 <.fini>:
   15418:	push	{r3, lr}
   1541c:	pop	{r3, pc}
