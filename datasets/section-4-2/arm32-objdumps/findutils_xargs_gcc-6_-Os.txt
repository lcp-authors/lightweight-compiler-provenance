
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

0001117c <.init>:
   1117c:	push	{r3, lr}
   11180:	bl	123ac <__assert_fail@plt+0xe38>
   11184:	pop	{r3, pc}

Disassembly of section .plt:

00011188 <fdopen@plt-0x14>:
   11188:	push	{lr}		; (str lr, [sp, #-4]!)
   1118c:	ldr	lr, [pc, #4]	; 11198 <fdopen@plt-0x4>
   11190:	add	lr, pc, lr
   11194:	ldr	pc, [lr, #8]!
   11198:	andeq	sl, r1, r8, ror #28

0001119c <fdopen@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #106496	; 0x1a000
   111a4:	ldr	pc, [ip, #3688]!	; 0xe68

000111a8 <calloc@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #106496	; 0x1a000
   111b0:	ldr	pc, [ip, #3680]!	; 0xe60

000111b4 <raise@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #106496	; 0x1a000
   111bc:	ldr	pc, [ip, #3672]!	; 0xe58

000111c0 <strcmp@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #106496	; 0x1a000
   111c8:	ldr	pc, [ip, #3664]!	; 0xe50

000111cc <strtol@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #106496	; 0x1a000
   111d4:	ldr	pc, [ip, #3656]!	; 0xe48

000111d8 <printf@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #106496	; 0x1a000
   111e0:	ldr	pc, [ip, #3648]!	; 0xe40

000111e4 <read@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #106496	; 0x1a000
   111ec:	ldr	pc, [ip, #3640]!	; 0xe38

000111f0 <fflush@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #106496	; 0x1a000
   111f8:	ldr	pc, [ip, #3632]!	; 0xe30

000111fc <wcwidth@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #106496	; 0x1a000
   11204:	ldr	pc, [ip, #3624]!	; 0xe28

00011208 <free@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #106496	; 0x1a000
   11210:	ldr	pc, [ip, #3616]!	; 0xe20

00011214 <ferror@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #106496	; 0x1a000
   1121c:	ldr	pc, [ip, #3608]!	; 0xe18

00011220 <_exit@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #106496	; 0x1a000
   11228:	ldr	pc, [ip, #3600]!	; 0xe10

0001122c <memcpy@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #106496	; 0x1a000
   11234:	ldr	pc, [ip, #3592]!	; 0xe08

00011238 <execvp@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #106496	; 0x1a000
   11240:	ldr	pc, [ip, #3584]!	; 0xe00

00011244 <mbsinit@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #106496	; 0x1a000
   1124c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011250 <signal@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #106496	; 0x1a000
   11258:	ldr	pc, [ip, #3568]!	; 0xdf0

0001125c <memcmp@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #106496	; 0x1a000
   11264:	ldr	pc, [ip, #3560]!	; 0xde8

00011268 <dcgettext@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #106496	; 0x1a000
   11270:	ldr	pc, [ip, #3552]!	; 0xde0

00011274 <sysconf@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #106496	; 0x1a000
   1127c:	ldr	pc, [ip, #3544]!	; 0xdd8

00011280 <dup2@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #106496	; 0x1a000
   11288:	ldr	pc, [ip, #3536]!	; 0xdd0

0001128c <getrlimit64@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #106496	; 0x1a000
   11294:	ldr	pc, [ip, #3528]!	; 0xdc8

00011298 <realloc@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #106496	; 0x1a000
   112a0:	ldr	pc, [ip, #3520]!	; 0xdc0

000112a4 <textdomain@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #106496	; 0x1a000
   112ac:	ldr	pc, [ip, #3512]!	; 0xdb8

000112b0 <iswcntrl@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #106496	; 0x1a000
   112b8:	ldr	pc, [ip, #3504]!	; 0xdb0

000112bc <iswprint@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #106496	; 0x1a000
   112c4:	ldr	pc, [ip, #3496]!	; 0xda8

000112c8 <poll@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #106496	; 0x1a000
   112d0:	ldr	pc, [ip, #3488]!	; 0xda0

000112d4 <sigaction@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #106496	; 0x1a000
   112dc:	ldr	pc, [ip, #3480]!	; 0xd98

000112e0 <lseek64@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #106496	; 0x1a000
   112e8:	ldr	pc, [ip, #3472]!	; 0xd90

000112ec <waitpid@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #106496	; 0x1a000
   112f4:	ldr	pc, [ip, #3464]!	; 0xd88

000112f8 <__ctype_get_mb_cur_max@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #106496	; 0x1a000
   11300:	ldr	pc, [ip, #3456]!	; 0xd80

00011304 <strcpy@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #106496	; 0x1a000
   1130c:	ldr	pc, [ip, #3448]!	; 0xd78

00011310 <__fpending@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #106496	; 0x1a000
   11318:	ldr	pc, [ip, #3440]!	; 0xd70

0001131c <mbrtowc@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #106496	; 0x1a000
   11324:	ldr	pc, [ip, #3432]!	; 0xd68

00011328 <error@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #106496	; 0x1a000
   11330:	ldr	pc, [ip, #3424]!	; 0xd60

00011334 <opendir@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #106496	; 0x1a000
   1133c:	ldr	pc, [ip, #3416]!	; 0xd58

00011340 <open64@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #106496	; 0x1a000
   11348:	ldr	pc, [ip, #3408]!	; 0xd50

0001134c <getenv@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #106496	; 0x1a000
   11354:	ldr	pc, [ip, #3400]!	; 0xd48

00011358 <malloc@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #106496	; 0x1a000
   11360:	ldr	pc, [ip, #3392]!	; 0xd40

00011364 <__libc_start_main@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #106496	; 0x1a000
   1136c:	ldr	pc, [ip, #3384]!	; 0xd38

00011370 <__freading@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #106496	; 0x1a000
   11378:	ldr	pc, [ip, #3376]!	; 0xd30

0001137c <__gmon_start__@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #106496	; 0x1a000
   11384:	ldr	pc, [ip, #3368]!	; 0xd28

00011388 <getopt_long@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #106496	; 0x1a000
   11390:	ldr	pc, [ip, #3360]!	; 0xd20

00011394 <__ctype_b_loc@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #106496	; 0x1a000
   1139c:	ldr	pc, [ip, #3352]!	; 0xd18

000113a0 <getpid@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #106496	; 0x1a000
   113a8:	ldr	pc, [ip, #3344]!	; 0xd10

000113ac <exit@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #106496	; 0x1a000
   113b4:	ldr	pc, [ip, #3336]!	; 0xd08

000113b8 <strtoul@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #106496	; 0x1a000
   113c0:	ldr	pc, [ip, #3328]!	; 0xd00

000113c4 <strlen@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #106496	; 0x1a000
   113cc:	ldr	pc, [ip, #3320]!	; 0xcf8

000113d0 <strchr@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #106496	; 0x1a000
   113d8:	ldr	pc, [ip, #3312]!	; 0xcf0

000113dc <setenv@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #106496	; 0x1a000
   113e4:	ldr	pc, [ip, #3304]!	; 0xce8

000113e8 <fprintf@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #106496	; 0x1a000
   113f0:	ldr	pc, [ip, #3296]!	; 0xce0

000113f4 <__errno_location@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #106496	; 0x1a000
   113fc:	ldr	pc, [ip, #3288]!	; 0xcd8

00011400 <snprintf@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #106496	; 0x1a000
   11408:	ldr	pc, [ip, #3280]!	; 0xcd0

0001140c <__cxa_atexit@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #106496	; 0x1a000
   11414:	ldr	pc, [ip, #3272]!	; 0xcc8

00011418 <memset@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #106496	; 0x1a000
   11420:	ldr	pc, [ip, #3264]!	; 0xcc0

00011424 <strncpy@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #106496	; 0x1a000
   1142c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011430 <write@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #106496	; 0x1a000
   11438:	ldr	pc, [ip, #3248]!	; 0xcb0

0001143c <fileno@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #106496	; 0x1a000
   11444:	ldr	pc, [ip, #3240]!	; 0xca8

00011448 <memchr@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #106496	; 0x1a000
   11450:	ldr	pc, [ip, #3232]!	; 0xca0

00011454 <fclose@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #106496	; 0x1a000
   1145c:	ldr	pc, [ip, #3224]!	; 0xc98

00011460 <strnlen@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #106496	; 0x1a000
   11468:	ldr	pc, [ip, #3216]!	; 0xc90

0001146c <pipe@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #106496	; 0x1a000
   11474:	ldr	pc, [ip, #3208]!	; 0xc88

00011478 <fseeko64@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #106496	; 0x1a000
   11480:	ldr	pc, [ip, #3200]!	; 0xc80

00011484 <fcntl64@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #106496	; 0x1a000
   1148c:	ldr	pc, [ip, #3192]!	; 0xc78

00011490 <setlocale@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #106496	; 0x1a000
   11498:	ldr	pc, [ip, #3184]!	; 0xc70

0001149c <sigemptyset@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #106496	; 0x1a000
   114a4:	ldr	pc, [ip, #3176]!	; 0xc68

000114a8 <fork@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #106496	; 0x1a000
   114b0:	ldr	pc, [ip, #3168]!	; 0xc60

000114b4 <strrchr@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #106496	; 0x1a000
   114bc:	ldr	pc, [ip, #3160]!	; 0xc58

000114c0 <nl_langinfo@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #106496	; 0x1a000
   114c8:	ldr	pc, [ip, #3152]!	; 0xc50

000114cc <fputc@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #106496	; 0x1a000
   114d4:	ldr	pc, [ip, #3144]!	; 0xc48

000114d8 <readdir64@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #106496	; 0x1a000
   114e0:	ldr	pc, [ip, #3136]!	; 0xc40

000114e4 <fdopendir@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #106496	; 0x1a000
   114ec:	ldr	pc, [ip, #3128]!	; 0xc38

000114f0 <putc@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #106496	; 0x1a000
   114f8:	ldr	pc, [ip, #3120]!	; 0xc30

000114fc <dirfd@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #106496	; 0x1a000
   11504:	ldr	pc, [ip, #3112]!	; 0xc28

00011508 <bindtextdomain@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #106496	; 0x1a000
   11510:	ldr	pc, [ip, #3104]!	; 0xc20

00011514 <isatty@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #106496	; 0x1a000
   1151c:	ldr	pc, [ip, #3096]!	; 0xc18

00011520 <unsetenv@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #106496	; 0x1a000
   11528:	ldr	pc, [ip, #3088]!	; 0xc10

0001152c <fputs@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #106496	; 0x1a000
   11534:	ldr	pc, [ip, #3080]!	; 0xc08

00011538 <strncmp@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #106496	; 0x1a000
   11540:	ldr	pc, [ip, #3072]!	; 0xc00

00011544 <abort@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #106496	; 0x1a000
   1154c:	ldr	pc, [ip, #3064]!	; 0xbf8

00011550 <getc@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #106496	; 0x1a000
   11558:	ldr	pc, [ip, #3056]!	; 0xbf0

0001155c <close@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #106496	; 0x1a000
   11564:	ldr	pc, [ip, #3048]!	; 0xbe8

00011568 <closedir@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #106496	; 0x1a000
   11570:	ldr	pc, [ip, #3040]!	; 0xbe0

00011574 <__assert_fail@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #106496	; 0x1a000
   1157c:	ldr	pc, [ip, #3032]!	; 0xbd8

Disassembly of section .text:

00011580 <.text>:
   11580:	ldr	r3, [pc, #3308]	; 12274 <__assert_fail@plt+0xd00>
   11584:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11588:	sub	sp, sp, #212	; 0xd4
   1158c:	mov	fp, r1
   11590:	str	r0, [sp, #24]
   11594:	ldr	r0, [r3]
   11598:	ldrb	r3, [r3, #4]
   1159c:	str	r0, [sp, #60]	; 0x3c
   115a0:	ldr	r0, [r1]
   115a4:	strb	r3, [sp, #64]	; 0x40
   115a8:	cmp	r0, #0
   115ac:	ldr	r4, [pc, #3268]	; 12278 <__assert_fail@plt+0xd04>
   115b0:	ldreq	r0, [pc, #3268]	; 1227c <__assert_fail@plt+0xd08>
   115b4:	bl	16274 <__assert_fail@plt+0x4d00>
   115b8:	bl	144d0 <__assert_fail@plt+0x2f5c>
   115bc:	bl	113a0 <getpid@plt>
   115c0:	mov	r3, #0
   115c4:	ldr	r1, [pc, #3252]	; 12280 <__assert_fail@plt+0xd0c>
   115c8:	str	r3, [r4, #172]	; 0xac
   115cc:	mov	r9, r4
   115d0:	str	r0, [r4, #164]	; 0xa4
   115d4:	mov	r0, #6
   115d8:	bl	11490 <setlocale@plt>
   115dc:	ldr	r1, [pc, #3232]	; 12284 <__assert_fail@plt+0xd10>
   115e0:	ldr	r0, [pc, #3232]	; 12288 <__assert_fail@plt+0xd14>
   115e4:	bl	11508 <bindtextdomain@plt>
   115e8:	ldr	r0, [pc, #3224]	; 12288 <__assert_fail@plt+0xd14>
   115ec:	bl	112a4 <textdomain@plt>
   115f0:	ldr	r0, [pc, #3220]	; 1228c <__assert_fail@plt+0xd18>
   115f4:	bl	194e0 <__assert_fail@plt+0x7f6c>
   115f8:	cmp	r0, #0
   115fc:	beq	11628 <__assert_fail@plt+0xb4>
   11600:	bl	113f4 <__errno_location@plt>
   11604:	mov	r2, #5
   11608:	ldr	r1, [pc, #3200]	; 12290 <__assert_fail@plt+0xd1c>
   1160c:	ldr	r4, [r0]
   11610:	mov	r0, #0
   11614:	bl	11268 <dcgettext@plt>
   11618:	mov	r1, r4
   1161c:	mov	r2, r0
   11620:	mov	r0, #1
   11624:	bl	11328 <error@plt>
   11628:	ldr	r0, [pc, #3172]	; 12294 <__assert_fail@plt+0xd20>
   1162c:	bl	194e0 <__assert_fail@plt+0x7f6c>
   11630:	subs	sl, r0, #0
   11634:	bne	11600 <__assert_fail@plt+0x8c>
   11638:	mov	r1, #2048	; 0x800
   1163c:	add	r0, r4, #88	; 0x58
   11640:	bl	14028 <__assert_fail@plt+0x2ab4>
   11644:	sub	r3, r0, #1
   11648:	cmp	r3, #1
   1164c:	mov	r7, r0
   11650:	bls	11774 <__assert_fail@plt+0x200>
   11654:	mov	r0, sl
   11658:	bl	11274 <sysconf@plt>
   1165c:	cmp	r0, #0
   11660:	ble	11694 <__assert_fail@plt+0x120>
   11664:	cmp	r0, #2048	; 0x800
   11668:	bgt	11680 <__assert_fail@plt+0x10c>
   1166c:	ldr	r3, [pc, #3108]	; 12298 <__assert_fail@plt+0xd24>
   11670:	ldr	r2, [pc, #3108]	; 1229c <__assert_fail@plt+0xd28>
   11674:	ldr	r1, [pc, #3108]	; 122a0 <__assert_fail@plt+0xd2c>
   11678:	ldr	r0, [pc, #3108]	; 122a4 <__assert_fail@plt+0xd30>
   1167c:	bl	11574 <__assert_fail@plt>
   11680:	ldr	r3, [r4, #100]	; 0x64
   11684:	sub	r0, r0, #2048	; 0x800
   11688:	cmp	r3, r0
   1168c:	strls	r3, [r4, #100]	; 0x64
   11690:	strhi	r0, [r4, #100]	; 0x64
   11694:	ldr	r3, [r9, #100]	; 0x64
   11698:	cmp	r3, #2048	; 0x800
   1169c:	ldrcc	r3, [pc, #3060]	; 12298 <__assert_fail@plt+0xd24>
   116a0:	ldrcc	r2, [pc, #3072]	; 122a8 <__assert_fail@plt+0xd34>
   116a4:	ldrcc	r1, [pc, #3060]	; 122a0 <__assert_fail@plt+0xd2c>
   116a8:	ldrcc	r0, [pc, #3068]	; 122ac <__assert_fail@plt+0xd38>
   116ac:	bcc	1167c <__assert_fail@plt+0x108>
   116b0:	ldr	r3, [pc, #3064]	; 122b0 <__assert_fail@plt+0xd3c>
   116b4:	ldr	r0, [pc, #3064]	; 122b4 <__assert_fail@plt+0xd40>
   116b8:	str	r3, [r9, #120]	; 0x78
   116bc:	bl	140e8 <__assert_fail@plt+0x2b74>
   116c0:	ldr	r3, [pc, #3056]	; 122b8 <__assert_fail@plt+0xd44>
   116c4:	str	r3, [sp, #36]	; 0x24
   116c8:	ldr	r8, [pc, #3052]	; 122bc <__assert_fail@plt+0xd48>
   116cc:	ldr	r3, [pc, #3052]	; 122c0 <__assert_fail@plt+0xd4c>
   116d0:	ldr	r4, [pc, #2976]	; 12278 <__assert_fail@plt+0xd04>
   116d4:	str	r3, [sp, #28]
   116d8:	mov	r3, #1
   116dc:	str	sl, [sp, #40]	; 0x28
   116e0:	str	r3, [sp, #32]
   116e4:	add	r3, sp, #52	; 0x34
   116e8:	str	r3, [sp]
   116ec:	mov	r1, fp
   116f0:	ldr	r3, [pc, #3020]	; 122c4 <__assert_fail@plt+0xd50>
   116f4:	ldr	r2, [pc, #3020]	; 122c8 <__assert_fail@plt+0xd54>
   116f8:	ldr	r0, [sp, #24]
   116fc:	bl	11388 <getopt_long@plt>
   11700:	cmn	r0, #1
   11704:	mov	r1, r0
   11708:	bne	1177c <__assert_fail@plt+0x208>
   1170c:	ldr	r3, [r9, #156]	; 0x9c
   11710:	ldr	r2, [pc, #2996]	; 122cc <__assert_fail@plt+0xd58>
   11714:	ldr	r1, [sp, #28]
   11718:	adds	r3, r3, #0
   1171c:	movne	r3, #1
   11720:	cmp	r1, r2
   11724:	movne	r3, #0
   11728:	cmp	r3, #0
   1172c:	beq	11750 <__assert_fail@plt+0x1dc>
   11730:	mov	r2, #5
   11734:	ldr	r1, [pc, #2964]	; 122d0 <__assert_fail@plt+0xd5c>
   11738:	mov	r0, #0
   1173c:	bl	11268 <dcgettext@plt>
   11740:	mov	r1, #0
   11744:	mov	r2, r0
   11748:	mov	r0, r1
   1174c:	bl	11328 <error@plt>
   11750:	ldr	r3, [sp, #36]	; 0x24
   11754:	blx	r3
   11758:	cmp	r7, #0
   1175c:	beq	11d4c <__assert_fail@plt+0x7d8>
   11760:	ldr	r3, [pc, #2864]	; 12298 <__assert_fail@plt+0xd24>
   11764:	ldr	r2, [pc, #2920]	; 122d4 <__assert_fail@plt+0xd60>
   11768:	ldr	r1, [pc, #2864]	; 122a0 <__assert_fail@plt+0xd2c>
   1176c:	ldr	r0, [pc, #2916]	; 122d8 <__assert_fail@plt+0xd64>
   11770:	b	1167c <__assert_fail@plt+0x108>
   11774:	ldr	r3, [pc, #2912]	; 122dc <__assert_fail@plt+0xd68>
   11778:	b	116c4 <__assert_fail@plt+0x150>
   1177c:	cmp	r1, #105	; 0x69
   11780:	beq	11b78 <__assert_fail@plt+0x604>
   11784:	bgt	11860 <__assert_fail@plt+0x2ec>
   11788:	cmp	r1, #80	; 0x50
   1178c:	beq	11cc8 <__assert_fail@plt+0x754>
   11790:	bgt	11820 <__assert_fail@plt+0x2ac>
   11794:	cmp	r1, #69	; 0x45
   11798:	beq	11b4c <__assert_fail@plt+0x5d8>
   1179c:	bgt	117b0 <__assert_fail@plt+0x23c>
   117a0:	cmp	r1, #48	; 0x30
   117a4:	beq	1197c <__assert_fail@plt+0x408>
   117a8:	mov	r0, #1
   117ac:	b	1185c <__assert_fail@plt+0x2e8>
   117b0:	cmp	r1, #73	; 0x49
   117b4:	beq	11b78 <__assert_fail@plt+0x604>
   117b8:	cmp	r1, #76	; 0x4c
   117bc:	bne	117a8 <__assert_fail@plt+0x234>
   117c0:	ldr	r0, [pc, #2840]	; 122e0 <__assert_fail@plt+0xd6c>
   117c4:	mov	r2, #1
   117c8:	str	r2, [sp]
   117cc:	mvn	r3, #0
   117d0:	ldr	r0, [r0]
   117d4:	bl	12b2c <__assert_fail@plt+0x15b8>
   117d8:	ldr	r3, [r4, #128]	; 0x80
   117dc:	cmp	r3, #0
   117e0:	str	r0, [r4, #124]	; 0x7c
   117e4:	beq	117fc <__assert_fail@plt+0x288>
   117e8:	ldr	r1, [pc, #2804]	; 122e4 <__assert_fail@plt+0xd70>
   117ec:	ldr	r0, [pc, #2804]	; 122e8 <__assert_fail@plt+0xd74>
   117f0:	bl	124ec <__assert_fail@plt+0xf78>
   117f4:	mov	r3, #0
   117f8:	str	r3, [r4, #128]	; 0x80
   117fc:	ldr	r3, [r4, #112]	; 0x70
   11800:	cmp	r3, #0
   11804:	beq	116e4 <__assert_fail@plt+0x170>
   11808:	ldr	r1, [pc, #2780]	; 122ec <__assert_fail@plt+0xd78>
   1180c:	ldr	r0, [pc, #2772]	; 122e8 <__assert_fail@plt+0xd74>
   11810:	bl	124ec <__assert_fail@plt+0xf78>
   11814:	mov	r3, #0
   11818:	str	r3, [r4, #112]	; 0x70
   1181c:	b	116e4 <__assert_fail@plt+0x170>
   11820:	cmp	r1, #100	; 0x64
   11824:	beq	11990 <__assert_fail@plt+0x41c>
   11828:	bgt	11848 <__assert_fail@plt+0x2d4>
   1182c:	cmp	r1, #83	; 0x53
   11830:	beq	11d40 <__assert_fail@plt+0x7cc>
   11834:	cmp	r1, #97	; 0x61
   11838:	bne	117a8 <__assert_fail@plt+0x234>
   1183c:	ldr	r3, [pc, #2716]	; 122e0 <__assert_fail@plt+0xd6c>
   11840:	ldr	r8, [r3]
   11844:	b	116e4 <__assert_fail@plt+0x170>
   11848:	cmp	r1, #101	; 0x65
   1184c:	beq	11b4c <__assert_fail@plt+0x5d8>
   11850:	cmp	r1, #104	; 0x68
   11854:	moveq	r0, #0
   11858:	bne	117a8 <__assert_fail@plt+0x234>
   1185c:	bl	12820 <__assert_fail@plt+0x12ac>
   11860:	cmp	r1, #114	; 0x72
   11864:	beq	11974 <__assert_fail@plt+0x400>
   11868:	bgt	118fc <__assert_fail@plt+0x388>
   1186c:	cmp	r1, #110	; 0x6e
   11870:	beq	11bd0 <__assert_fail@plt+0x65c>
   11874:	bgt	118e0 <__assert_fail@plt+0x36c>
   11878:	cmp	r1, #108	; 0x6c
   1187c:	bne	117a8 <__assert_fail@plt+0x234>
   11880:	ldr	r3, [pc, #2648]	; 122e0 <__assert_fail@plt+0xd6c>
   11884:	mov	r2, #1
   11888:	ldr	r0, [r3]
   1188c:	cmp	r0, #0
   11890:	streq	r2, [r4, #124]	; 0x7c
   11894:	beq	118a8 <__assert_fail@plt+0x334>
   11898:	str	r2, [sp]
   1189c:	mvn	r3, #0
   118a0:	bl	12b2c <__assert_fail@plt+0x15b8>
   118a4:	str	r0, [r4, #124]	; 0x7c
   118a8:	ldr	r3, [r4, #128]	; 0x80
   118ac:	cmp	r3, #0
   118b0:	beq	118c8 <__assert_fail@plt+0x354>
   118b4:	ldr	r1, [pc, #2600]	; 122e4 <__assert_fail@plt+0xd70>
   118b8:	ldr	r0, [pc, #2608]	; 122f0 <__assert_fail@plt+0xd7c>
   118bc:	bl	124ec <__assert_fail@plt+0xf78>
   118c0:	mov	r3, #0
   118c4:	str	r3, [r4, #128]	; 0x80
   118c8:	ldr	r3, [r4, #112]	; 0x70
   118cc:	cmp	r3, #0
   118d0:	beq	116e4 <__assert_fail@plt+0x170>
   118d4:	ldr	r1, [pc, #2576]	; 122ec <__assert_fail@plt+0xd78>
   118d8:	ldr	r0, [pc, #2576]	; 122f0 <__assert_fail@plt+0xd7c>
   118dc:	b	11810 <__assert_fail@plt+0x29c>
   118e0:	cmp	r1, #111	; 0x6f
   118e4:	mov	r3, #1
   118e8:	beq	11cc0 <__assert_fail@plt+0x74c>
   118ec:	cmp	r1, #112	; 0x70
   118f0:	bne	117a8 <__assert_fail@plt+0x234>
   118f4:	strb	r3, [r4, #72]	; 0x48
   118f8:	b	1191c <__assert_fail@plt+0x3a8>
   118fc:	cmp	r1, #118	; 0x76
   11900:	beq	11cf0 <__assert_fail@plt+0x77c>
   11904:	bgt	11924 <__assert_fail@plt+0x3b0>
   11908:	cmp	r1, #115	; 0x73
   1190c:	beq	11c40 <__assert_fail@plt+0x6cc>
   11910:	cmp	r1, #116	; 0x74
   11914:	bne	117a8 <__assert_fail@plt+0x234>
   11918:	mov	r3, #1
   1191c:	strb	r3, [r4, #73]	; 0x49
   11920:	b	116e4 <__assert_fail@plt+0x170>
   11924:	cmp	r1, #120	; 0x78
   11928:	beq	11cb4 <__assert_fail@plt+0x740>
   1192c:	cmp	r1, #256	; 0x100
   11930:	bne	117a8 <__assert_fail@plt+0x234>
   11934:	ldr	r3, [pc, #2468]	; 122e0 <__assert_fail@plt+0xd6c>
   11938:	mov	r1, #61	; 0x3d
   1193c:	ldr	r5, [r3]
   11940:	mov	r0, r5
   11944:	bl	113d0 <strchr@plt>
   11948:	cmp	r0, #0
   1194c:	beq	11d04 <__assert_fail@plt+0x790>
   11950:	mov	r2, #5
   11954:	ldr	r1, [pc, #2456]	; 122f4 <__assert_fail@plt+0xd80>
   11958:	mov	r0, #0
   1195c:	bl	11268 <dcgettext@plt>
   11960:	ldr	r2, [sp, #52]	; 0x34
   11964:	ldr	r3, [pc, #2444]	; 122f8 <__assert_fail@plt+0xd84>
   11968:	add	r3, r3, r2, lsl #4
   1196c:	ldr	r3, [r3, #48]	; 0x30
   11970:	b	11b30 <__assert_fail@plt+0x5bc>
   11974:	str	sl, [sp, #32]
   11978:	b	116e4 <__assert_fail@plt+0x170>
   1197c:	mov	r3, #0
   11980:	strb	r3, [r4, #144]	; 0x90
   11984:	ldr	r3, [pc, #2368]	; 122cc <__assert_fail@plt+0xd58>
   11988:	str	r3, [sp, #28]
   1198c:	b	116e4 <__assert_fail@plt+0x170>
   11990:	ldr	r3, [pc, #2376]	; 122e0 <__assert_fail@plt+0xd6c>
   11994:	ldr	r5, [r3]
   11998:	mov	r0, r5
   1199c:	bl	113c4 <strlen@plt>
   119a0:	ldrb	r6, [r5]
   119a4:	cmp	r0, #1
   119a8:	beq	119dc <__assert_fail@plt+0x468>
   119ac:	cmp	r6, #92	; 0x5c
   119b0:	bne	11b1c <__assert_fail@plt+0x5a8>
   119b4:	ldrb	r6, [r5, #1]
   119b8:	cmp	r6, #102	; 0x66
   119bc:	beq	11b44 <__assert_fail@plt+0x5d0>
   119c0:	bhi	119e4 <__assert_fail@plt+0x470>
   119c4:	cmp	r6, #97	; 0x61
   119c8:	beq	11b3c <__assert_fail@plt+0x5c8>
   119cc:	cmp	r6, #98	; 0x62
   119d0:	beq	11ab0 <__assert_fail@plt+0x53c>
   119d4:	cmp	r6, #92	; 0x5c
   119d8:	bne	119fc <__assert_fail@plt+0x488>
   119dc:	strb	r6, [r4, #144]	; 0x90
   119e0:	b	11984 <__assert_fail@plt+0x410>
   119e4:	cmp	r6, #114	; 0x72
   119e8:	beq	11ab8 <__assert_fail@plt+0x544>
   119ec:	bhi	11a98 <__assert_fail@plt+0x524>
   119f0:	cmp	r6, #110	; 0x6e
   119f4:	moveq	r6, #10
   119f8:	beq	119dc <__assert_fail@plt+0x468>
   119fc:	cmp	r6, #120	; 0x78
   11a00:	addeq	r3, r5, #2
   11a04:	moveq	r2, #16
   11a08:	beq	11a2c <__assert_fail@plt+0x4b8>
   11a0c:	bl	11394 <__ctype_b_loc@plt>
   11a10:	lsl	r6, r6, #1
   11a14:	ldr	r3, [r0]
   11a18:	ldrh	r6, [r3, r6]
   11a1c:	ands	r6, r6, #2048	; 0x800
   11a20:	beq	11ac8 <__assert_fail@plt+0x554>
   11a24:	add	r3, r5, #1
   11a28:	mov	r2, #8
   11a2c:	str	r2, [sp, #28]
   11a30:	str	r3, [sp, #44]	; 0x2c
   11a34:	bl	113f4 <__errno_location@plt>
   11a38:	add	r1, sp, #208	; 0xd0
   11a3c:	ldr	r3, [sp, #44]	; 0x2c
   11a40:	mov	r6, #0
   11a44:	str	r6, [r1, #-140]!	; 0xffffff74
   11a48:	ldr	r2, [sp, #28]
   11a4c:	str	r6, [r0]
   11a50:	mov	r0, r3
   11a54:	bl	113b8 <strtoul@plt>
   11a58:	cmp	r0, #255	; 0xff
   11a5c:	bls	11aec <__assert_fail@plt+0x578>
   11a60:	ldr	r3, [sp, #28]
   11a64:	mov	r2, #5
   11a68:	cmp	r3, #16
   11a6c:	mov	r0, r6
   11a70:	ldreq	r1, [pc, #2180]	; 122fc <__assert_fail@plt+0xd88>
   11a74:	ldrne	r1, [pc, #2180]	; 12300 <__assert_fail@plt+0xd8c>
   11a78:	bl	11268 <dcgettext@plt>
   11a7c:	mov	r3, #255	; 0xff
   11a80:	str	r3, [sp]
   11a84:	mov	r2, r0
   11a88:	mov	r3, r5
   11a8c:	mov	r1, r6
   11a90:	mov	r0, #1
   11a94:	bl	11328 <error@plt>
   11a98:	cmp	r6, #116	; 0x74
   11a9c:	beq	11ac0 <__assert_fail@plt+0x54c>
   11aa0:	cmp	r6, #118	; 0x76
   11aa4:	moveq	r6, #11
   11aa8:	beq	119dc <__assert_fail@plt+0x468>
   11aac:	b	119fc <__assert_fail@plt+0x488>
   11ab0:	mov	r6, #8
   11ab4:	b	119dc <__assert_fail@plt+0x468>
   11ab8:	mov	r6, #13
   11abc:	b	119dc <__assert_fail@plt+0x468>
   11ac0:	mov	r6, #9
   11ac4:	b	119dc <__assert_fail@plt+0x468>
   11ac8:	mov	r2, #5
   11acc:	ldr	r1, [pc, #2096]	; 12304 <__assert_fail@plt+0xd90>
   11ad0:	mov	r0, r6
   11ad4:	bl	11268 <dcgettext@plt>
   11ad8:	mov	r3, r5
   11adc:	mov	r1, r6
   11ae0:	mov	r2, r0
   11ae4:	mov	r0, #1
   11ae8:	bl	11328 <error@plt>
   11aec:	ldr	r3, [sp, #68]	; 0x44
   11af0:	ldrb	r3, [r3]
   11af4:	cmp	r3, #0
   11af8:	beq	11b14 <__assert_fail@plt+0x5a0>
   11afc:	mov	r2, #5
   11b00:	ldr	r1, [pc, #2048]	; 12308 <__assert_fail@plt+0xd94>
   11b04:	mov	r0, r6
   11b08:	bl	11268 <dcgettext@plt>
   11b0c:	ldr	r3, [sp, #68]	; 0x44
   11b10:	b	11a80 <__assert_fail@plt+0x50c>
   11b14:	uxtb	r6, r0
   11b18:	b	119dc <__assert_fail@plt+0x468>
   11b1c:	mov	r2, #5
   11b20:	ldr	r1, [pc, #2020]	; 1230c <__assert_fail@plt+0xd98>
   11b24:	mov	r0, #0
   11b28:	bl	11268 <dcgettext@plt>
   11b2c:	mov	r3, r5
   11b30:	mov	r2, r0
   11b34:	mov	r1, #0
   11b38:	b	11ae4 <__assert_fail@plt+0x570>
   11b3c:	mov	r6, #7
   11b40:	b	119dc <__assert_fail@plt+0x468>
   11b44:	mov	r6, #12
   11b48:	b	119dc <__assert_fail@plt+0x468>
   11b4c:	ldr	r3, [pc, #1932]	; 122e0 <__assert_fail@plt+0xd6c>
   11b50:	ldr	r3, [r3]
   11b54:	cmp	r3, #0
   11b58:	beq	11b70 <__assert_fail@plt+0x5fc>
   11b5c:	ldrb	r2, [r3]
   11b60:	cmp	r2, #0
   11b64:	beq	11b70 <__assert_fail@plt+0x5fc>
   11b68:	str	r3, [r4, #156]	; 0x9c
   11b6c:	b	116e4 <__assert_fail@plt+0x170>
   11b70:	mov	r3, #0
   11b74:	b	11b68 <__assert_fail@plt+0x5f4>
   11b78:	ldr	r3, [pc, #1888]	; 122e0 <__assert_fail@plt+0xd6c>
   11b7c:	ldr	r3, [r3]
   11b80:	cmp	r3, #0
   11b84:	ldreq	r3, [pc, #1924]	; 12310 <__assert_fail@plt+0xd9c>
   11b88:	str	r3, [r4, #112]	; 0x70
   11b8c:	ldr	r3, [r4, #128]	; 0x80
   11b90:	cmp	r3, #0
   11b94:	beq	11bac <__assert_fail@plt+0x638>
   11b98:	ldr	r1, [pc, #1860]	; 122e4 <__assert_fail@plt+0xd70>
   11b9c:	ldr	r0, [pc, #1904]	; 12314 <__assert_fail@plt+0xda0>
   11ba0:	bl	124ec <__assert_fail@plt+0xf78>
   11ba4:	mov	r3, #0
   11ba8:	str	r3, [r4, #128]	; 0x80
   11bac:	ldr	r3, [r4, #124]	; 0x7c
   11bb0:	cmp	r3, #0
   11bb4:	beq	116e4 <__assert_fail@plt+0x170>
   11bb8:	ldr	r1, [pc, #1880]	; 12318 <__assert_fail@plt+0xda4>
   11bbc:	ldr	r0, [pc, #1872]	; 12314 <__assert_fail@plt+0xda0>
   11bc0:	bl	124ec <__assert_fail@plt+0xf78>
   11bc4:	mov	r3, #0
   11bc8:	str	r3, [r4, #124]	; 0x7c
   11bcc:	b	116e4 <__assert_fail@plt+0x170>
   11bd0:	ldr	r0, [pc, #1800]	; 122e0 <__assert_fail@plt+0xd6c>
   11bd4:	mov	r2, #1
   11bd8:	str	r2, [sp]
   11bdc:	mvn	r3, #0
   11be0:	ldr	r0, [r0]
   11be4:	bl	12b2c <__assert_fail@plt+0x15b8>
   11be8:	ldr	r3, [r4, #124]	; 0x7c
   11bec:	cmp	r3, #0
   11bf0:	str	r0, [r4, #128]	; 0x80
   11bf4:	beq	11c0c <__assert_fail@plt+0x698>
   11bf8:	ldr	r1, [pc, #1816]	; 12318 <__assert_fail@plt+0xda4>
   11bfc:	ldr	r0, [pc, #1816]	; 1231c <__assert_fail@plt+0xda8>
   11c00:	bl	124ec <__assert_fail@plt+0xf78>
   11c04:	mov	r3, #0
   11c08:	str	r3, [r4, #124]	; 0x7c
   11c0c:	ldr	r3, [r4, #112]	; 0x70
   11c10:	cmp	r3, #0
   11c14:	beq	116e4 <__assert_fail@plt+0x170>
   11c18:	ldr	r3, [r4, #128]	; 0x80
   11c1c:	mov	r5, #0
   11c20:	cmp	r3, #1
   11c24:	streq	r5, [r4, #128]	; 0x80
   11c28:	beq	116e4 <__assert_fail@plt+0x170>
   11c2c:	ldr	r1, [pc, #1720]	; 122ec <__assert_fail@plt+0xd78>
   11c30:	ldr	r0, [pc, #1764]	; 1231c <__assert_fail@plt+0xda8>
   11c34:	bl	124ec <__assert_fail@plt+0xf78>
   11c38:	str	r5, [r4, #112]	; 0x70
   11c3c:	b	116e4 <__assert_fail@plt+0x170>
   11c40:	ldr	r3, [sp, #36]	; 0x24
   11c44:	str	r1, [sp, #44]	; 0x2c
   11c48:	blx	r3
   11c4c:	ldr	r0, [pc, #1676]	; 122e0 <__assert_fail@plt+0xd6c>
   11c50:	mov	r5, #0
   11c54:	str	r5, [sp]
   11c58:	mov	r2, #1
   11c5c:	ldr	r3, [r4, #92]	; 0x5c
   11c60:	ldr	r1, [sp, #44]	; 0x2c
   11c64:	ldr	r0, [r0]
   11c68:	bl	12b2c <__assert_fail@plt+0x15b8>
   11c6c:	ldr	r3, [r4, #92]	; 0x5c
   11c70:	cmp	r0, r3
   11c74:	mov	r6, r0
   11c78:	bls	11cac <__assert_fail@plt+0x738>
   11c7c:	mov	r2, #5
   11c80:	ldr	r1, [pc, #1688]	; 12320 <__assert_fail@plt+0xdac>
   11c84:	mov	r0, r5
   11c88:	bl	11268 <dcgettext@plt>
   11c8c:	ldr	r3, [r4, #92]	; 0x5c
   11c90:	mov	r1, r5
   11c94:	str	r3, [sp]
   11c98:	mov	r3, r6
   11c9c:	mov	r2, r0
   11ca0:	mov	r0, r5
   11ca4:	bl	11328 <error@plt>
   11ca8:	ldr	r6, [r4, #92]	; 0x5c
   11cac:	str	r6, [r4, #100]	; 0x64
   11cb0:	b	116e4 <__assert_fail@plt+0x170>
   11cb4:	mov	r3, #1
   11cb8:	str	r3, [r4, #88]	; 0x58
   11cbc:	b	116e4 <__assert_fail@plt+0x170>
   11cc0:	strb	r3, [r4, #84]	; 0x54
   11cc4:	b	116e4 <__assert_fail@plt+0x170>
   11cc8:	ldr	r0, [pc, #1552]	; 122e0 <__assert_fail@plt+0xd6c>
   11ccc:	mov	r3, #1
   11cd0:	str	r3, [sp]
   11cd4:	mov	r2, #0
   11cd8:	mvn	r3, #-2147483648	; 0x80000000
   11cdc:	ldr	r0, [r0]
   11ce0:	bl	12b2c <__assert_fail@plt+0x15b8>
   11ce4:	ldr	r3, [pc, #1592]	; 12324 <__assert_fail@plt+0xdb0>
   11ce8:	str	r0, [r3]
   11cec:	b	116e4 <__assert_fail@plt+0x170>
   11cf0:	ldr	r0, [pc, #1412]	; 1227c <__assert_fail@plt+0xd08>
   11cf4:	bl	146cc <__assert_fail@plt+0x3158>
   11cf8:	mov	r0, sl
   11cfc:	add	sp, sp, #212	; 0xd4
   11d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d04:	mov	r0, r5
   11d08:	str	r5, [r9, #76]	; 0x4c
   11d0c:	bl	11520 <unsetenv@plt>
   11d10:	cmp	r0, #0
   11d14:	beq	116e4 <__assert_fail@plt+0x170>
   11d18:	bl	113f4 <__errno_location@plt>
   11d1c:	mov	r2, #5
   11d20:	ldr	r1, [pc, #1536]	; 12328 <__assert_fail@plt+0xdb4>
   11d24:	ldr	r4, [r0]
   11d28:	mov	r0, #0
   11d2c:	bl	11268 <dcgettext@plt>
   11d30:	mov	r3, r5
   11d34:	mov	r2, r0
   11d38:	mov	r1, r4
   11d3c:	b	11ae4 <__assert_fail@plt+0x570>
   11d40:	mov	r3, #1
   11d44:	str	r3, [sp, #40]	; 0x28
   11d48:	b	116e4 <__assert_fail@plt+0x170>
   11d4c:	add	r4, sp, #208	; 0xd0
   11d50:	ldr	r3, [pc, #1492]	; 1232c <__assert_fail@plt+0xdb8>
   11d54:	str	r3, [r4, #-140]!	; 0xffffff74
   11d58:	add	r0, r4, #4
   11d5c:	bl	1149c <sigemptyset@plt>
   11d60:	mov	r2, r7
   11d64:	mov	r1, r4
   11d68:	mov	r0, #10
   11d6c:	str	r7, [sp, #200]	; 0xc8
   11d70:	bl	112d4 <sigaction@plt>
   11d74:	cmp	r0, #0
   11d78:	beq	11da4 <__assert_fail@plt+0x830>
   11d7c:	bl	113f4 <__errno_location@plt>
   11d80:	mov	r2, #5
   11d84:	ldr	r1, [pc, #1444]	; 12330 <__assert_fail@plt+0xdbc>
   11d88:	ldr	r5, [r0]
   11d8c:	mov	r0, r7
   11d90:	bl	11268 <dcgettext@plt>
   11d94:	mov	r1, r5
   11d98:	mov	r2, r0
   11d9c:	mov	r0, r7
   11da0:	bl	11328 <error@plt>
   11da4:	ldr	r3, [pc, #1416]	; 12334 <__assert_fail@plt+0xdc0>
   11da8:	mov	r5, #0
   11dac:	add	r0, r4, #4
   11db0:	str	r3, [sp, #68]	; 0x44
   11db4:	bl	1149c <sigemptyset@plt>
   11db8:	mov	r2, r5
   11dbc:	mov	r1, r4
   11dc0:	mov	r0, #12
   11dc4:	str	r5, [sp, #200]	; 0xc8
   11dc8:	bl	112d4 <sigaction@plt>
   11dcc:	cmp	r0, r5
   11dd0:	beq	11dfc <__assert_fail@plt+0x888>
   11dd4:	bl	113f4 <__errno_location@plt>
   11dd8:	mov	r2, #5
   11ddc:	ldr	r1, [pc, #1364]	; 12338 <__assert_fail@plt+0xdc4>
   11de0:	ldr	r4, [r0]
   11de4:	mov	r0, r5
   11de8:	bl	11268 <dcgettext@plt>
   11dec:	mov	r1, r4
   11df0:	mov	r2, r0
   11df4:	mov	r0, r5
   11df8:	bl	11328 <error@plt>
   11dfc:	ldr	r1, [pc, #1208]	; 122bc <__assert_fail@plt+0xd48>
   11e00:	mov	r0, r8
   11e04:	bl	111c0 <strcmp@plt>
   11e08:	ldr	r4, [pc, #1128]	; 12278 <__assert_fail@plt+0xd04>
   11e0c:	cmp	r0, #0
   11e10:	bne	120ac <__assert_fail@plt+0xb38>
   11e14:	ldr	r3, [pc, #1312]	; 1233c <__assert_fail@plt+0xdc8>
   11e18:	ldr	r3, [r3]
   11e1c:	str	r3, [r4, #140]	; 0x8c
   11e20:	ldr	r3, [r4, #112]	; 0x70
   11e24:	cmp	r3, #0
   11e28:	bne	11e38 <__assert_fail@plt+0x8c4>
   11e2c:	ldr	r3, [r4, #124]	; 0x7c
   11e30:	cmp	r3, #0
   11e34:	beq	11e40 <__assert_fail@plt+0x8cc>
   11e38:	mov	r3, #1
   11e3c:	str	r3, [r4, #88]	; 0x58
   11e40:	ldr	r5, [pc, #1272]	; 12340 <__assert_fail@plt+0xdcc>
   11e44:	ldr	r2, [sp, #24]
   11e48:	ldr	r3, [r5]
   11e4c:	cmp	r2, r3
   11e50:	bne	11e70 <__assert_fail@plt+0x8fc>
   11e54:	mov	r3, #0
   11e58:	add	fp, sp, #208	; 0xd0
   11e5c:	str	r3, [r5]
   11e60:	add	r3, sp, #60	; 0x3c
   11e64:	str	r3, [fp, #-152]!	; 0xffffff68
   11e68:	mov	r3, #1
   11e6c:	str	r3, [sp, #24]
   11e70:	ldr	r3, [sp, #40]	; 0x28
   11e74:	cmp	r3, #0
   11e78:	beq	11fe8 <__assert_fail@plt+0xa74>
   11e7c:	ldr	r6, [pc, #1216]	; 12344 <__assert_fail@plt+0xdd0>
   11e80:	mov	r2, #5
   11e84:	ldr	r1, [pc, #1212]	; 12348 <__assert_fail@plt+0xdd4>
   11e88:	mov	r0, #0
   11e8c:	ldr	r7, [r6]
   11e90:	bl	11268 <dcgettext@plt>
   11e94:	mov	r8, r0
   11e98:	bl	13fec <__assert_fail@plt+0x2a78>
   11e9c:	mov	r3, #0
   11ea0:	mov	r1, r8
   11ea4:	mov	r2, r0
   11ea8:	mov	r0, r7
   11eac:	bl	113e8 <fprintf@plt>
   11eb0:	mov	r2, #5
   11eb4:	ldr	r1, [pc, #1168]	; 1234c <__assert_fail@plt+0xdd8>
   11eb8:	mov	r0, #0
   11ebc:	ldr	r7, [r6]
   11ec0:	bl	11268 <dcgettext@plt>
   11ec4:	mov	r3, #0
   11ec8:	ldr	r2, [r9, #92]	; 0x5c
   11ecc:	mov	r1, r0
   11ed0:	mov	r0, r7
   11ed4:	bl	113e8 <fprintf@plt>
   11ed8:	mov	r2, #5
   11edc:	ldr	r1, [pc, #1132]	; 12350 <__assert_fail@plt+0xddc>
   11ee0:	mov	r0, #0
   11ee4:	ldr	r7, [r6]
   11ee8:	bl	11268 <dcgettext@plt>
   11eec:	mov	r3, #0
   11ef0:	ldr	r2, [r9, #96]	; 0x60
   11ef4:	mov	r1, r0
   11ef8:	mov	r0, r7
   11efc:	bl	113e8 <fprintf@plt>
   11f00:	mov	r2, #5
   11f04:	ldr	r1, [pc, #1096]	; 12354 <__assert_fail@plt+0xde0>
   11f08:	mov	r0, #0
   11f0c:	ldr	r7, [r6]
   11f10:	bl	11268 <dcgettext@plt>
   11f14:	ldr	sl, [r9, #92]	; 0x5c
   11f18:	mov	r8, r0
   11f1c:	bl	13fec <__assert_fail@plt+0x2a78>
   11f20:	mov	r3, #0
   11f24:	mov	r1, r8
   11f28:	sub	r2, sl, r0
   11f2c:	mov	r0, r7
   11f30:	bl	113e8 <fprintf@plt>
   11f34:	mov	r2, #5
   11f38:	ldr	r1, [pc, #1048]	; 12358 <__assert_fail@plt+0xde4>
   11f3c:	mov	r0, #0
   11f40:	ldr	r7, [r6]
   11f44:	bl	11268 <dcgettext@plt>
   11f48:	mov	r3, #0
   11f4c:	ldr	r2, [r9, #100]	; 0x64
   11f50:	mov	r1, r0
   11f54:	mov	r0, r7
   11f58:	bl	113e8 <fprintf@plt>
   11f5c:	mov	r2, #5
   11f60:	ldr	r1, [pc, #1012]	; 1235c <__assert_fail@plt+0xde8>
   11f64:	mov	r0, #0
   11f68:	ldr	r7, [r6]
   11f6c:	bl	11268 <dcgettext@plt>
   11f70:	mvn	r2, #-2147483648	; 0x80000000
   11f74:	mov	r3, #0
   11f78:	mov	r1, r0
   11f7c:	mov	r0, r7
   11f80:	bl	113e8 <fprintf@plt>
   11f84:	mov	r0, #0
   11f88:	bl	11514 <isatty@plt>
   11f8c:	cmp	r0, #0
   11f90:	beq	11fe8 <__assert_fail@plt+0xa74>
   11f94:	mov	r2, #5
   11f98:	ldr	r1, [pc, #960]	; 12360 <__assert_fail@plt+0xdec>
   11f9c:	mov	r0, #0
   11fa0:	ldr	r7, [r6]
   11fa4:	bl	11268 <dcgettext@plt>
   11fa8:	mov	r1, r0
   11fac:	mov	r0, r7
   11fb0:	bl	113e8 <fprintf@plt>
   11fb4:	ldr	r3, [sp, #32]
   11fb8:	cmp	r3, #0
   11fbc:	beq	11fe8 <__assert_fail@plt+0xa74>
   11fc0:	mov	r2, #5
   11fc4:	ldr	r1, [pc, #920]	; 12364 <__assert_fail@plt+0xdf0>
   11fc8:	mov	r0, #0
   11fcc:	ldr	r6, [r6]
   11fd0:	bl	11268 <dcgettext@plt>
   11fd4:	ldr	r3, [r5]
   11fd8:	ldr	r2, [fp, r3, lsl #2]
   11fdc:	mov	r1, r0
   11fe0:	mov	r0, r6
   11fe4:	bl	113e8 <fprintf@plt>
   11fe8:	ldr	r0, [r9, #100]	; 0x64
   11fec:	add	r0, r0, #1
   11ff0:	bl	17e68 <__assert_fail@plt+0x68f4>
   11ff4:	str	r0, [r9, #132]	; 0x84
   11ff8:	ldr	r0, [r9, #100]	; 0x64
   11ffc:	add	r0, r0, #1
   12000:	bl	17e68 <__assert_fail@plt+0x68f4>
   12004:	mov	r1, #0
   12008:	str	r0, [r9, #28]
   1200c:	mov	r0, #17
   12010:	bl	11250 <signal@plt>
   12014:	ldr	r6, [r9, #112]	; 0x70
   12018:	cmp	r6, #0
   1201c:	bne	12170 <__assert_fail@plt+0xbfc>
   12020:	ldr	r7, [pc, #764]	; 12324 <__assert_fail@plt+0xdb0>
   12024:	ldr	r8, [pc, #828]	; 12368 <__assert_fail@plt+0xdf4>
   12028:	ldr	r3, [r5]
   1202c:	ldr	r2, [sp, #24]
   12030:	cmp	r2, r3
   12034:	bgt	12104 <__assert_fail@plt+0xb90>
   12038:	ldr	r2, [r4, #16]
   1203c:	mov	r3, #0
   12040:	ldr	r6, [pc, #800]	; 12368 <__assert_fail@plt+0xdf4>
   12044:	str	r2, [r4, #116]	; 0x74
   12048:	mov	r5, r3
   1204c:	ldr	r2, [r4, #32]
   12050:	strb	r3, [r7, #4]
   12054:	str	r2, [r4, #36]	; 0x24
   12058:	ldr	r3, [sp, #28]
   1205c:	blx	r3
   12060:	cmn	r0, #1
   12064:	bne	12144 <__assert_fail@plt+0xbd0>
   12068:	ldr	r2, [r4, #16]
   1206c:	ldr	r3, [r4, #116]	; 0x74
   12070:	cmp	r2, r3
   12074:	bne	12090 <__assert_fail@plt+0xb1c>
   12078:	ldr	r3, [sp, #32]
   1207c:	cmp	r3, #0
   12080:	beq	1209c <__assert_fail@plt+0xb28>
   12084:	ldrb	r3, [r4, #64]	; 0x40
   12088:	cmp	r3, #0
   1208c:	bne	1209c <__assert_fail@plt+0xb28>
   12090:	ldr	r1, [pc, #720]	; 12368 <__assert_fail@plt+0xdf4>
   12094:	add	r0, r1, #72	; 0x48
   12098:	bl	13d28 <__assert_fail@plt+0x27b4>
   1209c:	ldr	r3, [r4, #60]	; 0x3c
   120a0:	str	r3, [r4, #172]	; 0xac
   120a4:	ldr	sl, [r4, #60]	; 0x3c
   120a8:	b	11cf8 <__assert_fail@plt+0x784>
   120ac:	mov	r5, #1
   120b0:	mov	r0, r8
   120b4:	str	r5, [r9, #80]	; 0x50
   120b8:	bl	12c60 <__assert_fail@plt+0x16ec>
   120bc:	cmp	r0, #0
   120c0:	mov	r6, r0
   120c4:	str	r0, [r9, #140]	; 0x8c
   120c8:	bne	11e20 <__assert_fail@plt+0x8ac>
   120cc:	bl	113f4 <__errno_location@plt>
   120d0:	mov	r2, #5
   120d4:	ldr	r1, [pc, #656]	; 1236c <__assert_fail@plt+0xdf8>
   120d8:	ldr	r4, [r0]
   120dc:	mov	r0, r6
   120e0:	bl	11268 <dcgettext@plt>
   120e4:	mov	r2, r8
   120e8:	mov	r1, #8
   120ec:	mov	r7, r0
   120f0:	mov	r0, r6
   120f4:	bl	17654 <__assert_fail@plt+0x60e0>
   120f8:	mov	r2, r7
   120fc:	mov	r3, r0
   12100:	b	11d38 <__assert_fail@plt+0x7c4>
   12104:	ldr	r9, [fp, r3, lsl #2]
   12108:	mov	r0, r9
   1210c:	bl	113c4 <strlen@plt>
   12110:	ldrb	r3, [r7, #4]
   12114:	mov	r2, r9
   12118:	str	r6, [sp, #4]
   1211c:	str	r3, [sp, #8]
   12120:	str	r6, [sp]
   12124:	mov	r1, r8
   12128:	add	r3, r0, #1
   1212c:	ldr	r0, [pc, #384]	; 122b4 <__assert_fail@plt+0xd40>
   12130:	bl	13928 <__assert_fail@plt+0x23b4>
   12134:	ldr	r3, [r5]
   12138:	add	r3, r3, #1
   1213c:	str	r3, [r5]
   12140:	b	12028 <__assert_fail@plt+0xab4>
   12144:	ldr	r3, [r4, #124]	; 0x7c
   12148:	cmp	r3, #0
   1214c:	beq	12058 <__assert_fail@plt+0xae4>
   12150:	ldr	r2, [r4, #148]	; 0x94
   12154:	cmp	r3, r2
   12158:	bhi	12058 <__assert_fail@plt+0xae4>
   1215c:	mov	r1, r6
   12160:	ldr	r0, [pc, #332]	; 122b4 <__assert_fail@plt+0xd40>
   12164:	bl	13d28 <__assert_fail@plt+0x27b4>
   12168:	str	r5, [r4, #148]	; 0x94
   1216c:	b	12058 <__assert_fail@plt+0xae4>
   12170:	ldr	r3, [sp, #24]
   12174:	lsl	r0, r3, #2
   12178:	bl	17e68 <__assert_fail@plt+0x68f4>
   1217c:	ldr	r5, [r5]
   12180:	mov	r8, r0
   12184:	ldr	r3, [sp, #24]
   12188:	cmp	r3, r5
   1218c:	bgt	12228 <__assert_fail@plt+0xcb4>
   12190:	ldr	r0, [r4, #112]	; 0x70
   12194:	bl	113c4 <strlen@plt>
   12198:	ldr	sl, [pc, #416]	; 12340 <__assert_fail@plt+0xdcc>
   1219c:	str	r0, [r4, #108]	; 0x6c
   121a0:	ldr	r3, [sp, #28]
   121a4:	blx	r3
   121a8:	cmn	r0, #1
   121ac:	mov	r7, r0
   121b0:	beq	1209c <__assert_fail@plt+0xb28>
   121b4:	ldr	r1, [pc, #428]	; 12368 <__assert_fail@plt+0xdf4>
   121b8:	mov	r5, #0
   121bc:	add	r0, r1, #72	; 0x48
   121c0:	bl	14190 <__assert_fail@plt+0x2c1c>
   121c4:	ldr	r1, [pc, #344]	; 12324 <__assert_fail@plt+0xdb0>
   121c8:	ldr	r2, [sl]
   121cc:	str	r5, [r9, #32]
   121d0:	ldrb	r1, [r1, #4]
   121d4:	ldr	r3, [r8, r2, lsl #2]
   121d8:	str	r5, [sp, #4]
   121dc:	str	r1, [sp, #8]
   121e0:	ldr	r1, [pc, #384]	; 12368 <__assert_fail@plt+0xdf4>
   121e4:	str	r5, [sp]
   121e8:	add	r3, r3, #1
   121ec:	ldr	r2, [fp, r2, lsl #2]
   121f0:	add	r0, r1, #72	; 0x48
   121f4:	bl	13928 <__assert_fail@plt+0x23b4>
   121f8:	ldr	r3, [pc, #292]	; 12324 <__assert_fail@plt+0xdb0>
   121fc:	ldr	r6, [sl]
   12200:	sub	r7, r7, #1
   12204:	strb	r5, [r3, #4]
   12208:	ldr	r3, [sp, #24]
   1220c:	add	r6, r6, #1
   12210:	cmp	r3, r6
   12214:	bgt	1223c <__assert_fail@plt+0xcc8>
   12218:	ldr	r1, [pc, #328]	; 12368 <__assert_fail@plt+0xdf4>
   1221c:	add	r0, r1, #72	; 0x48
   12220:	bl	13d28 <__assert_fail@plt+0x27b4>
   12224:	b	121a0 <__assert_fail@plt+0xc2c>
   12228:	ldr	r0, [fp, r5, lsl #2]
   1222c:	bl	113c4 <strlen@plt>
   12230:	str	r0, [r8, r5, lsl #2]
   12234:	add	r5, r5, #1
   12238:	b	12184 <__assert_fail@plt+0xc10>
   1223c:	ldr	r3, [pc, #224]	; 12324 <__assert_fail@plt+0xdb0>
   12240:	ldr	r1, [pc, #288]	; 12368 <__assert_fail@plt+0xdf4>
   12244:	ldrb	r3, [r3, #4]
   12248:	str	r7, [sp, #12]
   1224c:	add	r0, r1, #72	; 0x48
   12250:	str	r3, [sp, #16]
   12254:	ldr	r3, [r9, #132]	; 0x84
   12258:	str	r5, [sp, #4]
   1225c:	str	r3, [sp, #8]
   12260:	str	r5, [sp]
   12264:	ldr	r2, [fp, r6, lsl #2]
   12268:	ldr	r3, [r8, r6, lsl #2]
   1226c:	bl	13b74 <__assert_fail@plt+0x2600>
   12270:	b	12208 <__assert_fail@plt+0xc94>
   12274:	andeq	sl, r1, r3, ror #25
   12278:	andeq	ip, r2, r8, ror #3
   1227c:	andeq	sl, r1, r3, asr #12
   12280:	andeq	r9, r1, r3, lsr r8
   12284:	andeq	sl, r1, r9, asr #12
   12288:	andeq	fp, r1, r6, lsr #1
   1228c:	andeq	r4, r1, r4, ror #20
   12290:	andeq	sl, r1, r1, ror #12
   12294:	andeq	r3, r1, r0, lsr #16
   12298:	andeq	r9, r1, ip, lsr #10
   1229c:	andeq	r0, r0, r3, ror #3
   122a0:	andeq	r9, r1, r9, ror r7
   122a4:	andeq	sl, r1, r4, lsl #13
   122a8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   122ac:	muleq	r1, pc, r6	; <UNPREDICTABLE>
   122b0:	andeq	r2, r1, ip, asr #28
   122b4:	andeq	ip, r2, r0, asr #4
   122b8:	muleq	r1, r8, r4
   122bc:	andeq	fp, r1, r3, lsr #6
   122c0:	andeq	r3, r1, r4, lsr #8
   122c4:	andeq	r9, r1, r4, lsr r5
   122c8:	muleq	r1, r8, r9
   122cc:	andeq	r3, r1, r0, lsl r3
   122d0:			; <UNDEFINED> instruction: 0x0001a9b9
   122d4:	ldrdeq	r0, [r0], -r3
   122d8:	strdeq	sl, [r1], -r4
   122dc:	andeq	r2, r1, r0, lsr r5
   122e0:	andeq	ip, r2, r0, ror #3
   122e4:	andeq	sl, r1, r5, lsr #17
   122e8:	andeq	sl, r1, ip, asr #17
   122ec:	andeq	sl, r1, pc, asr #17
   122f0:	ldrdeq	sl, [r1], -r9
   122f4:	andeq	sl, r1, r7, lsr r9
   122f8:	andeq	r9, r1, r4, lsl #10
   122fc:	strdeq	sl, [r1], -r7
   12300:	andeq	sl, r1, sl, asr r7
   12304:			; <UNDEFINED> instruction: 0x0001a6ba
   12308:			; <UNDEFINED> instruction: 0x0001a7bd
   1230c:	andeq	sl, r1, r1, lsr #16
   12310:	andeq	sl, r1, r2, lsr #17
   12314:			; <UNDEFINED> instruction: 0x0001a8b0
   12318:	andeq	sl, r1, r0, asr #17
   1231c:	andeq	sl, r1, r8, ror #17
   12320:	strdeq	sl, [r1], -r6
   12324:	andeq	ip, r2, r4, ror #2
   12328:	andeq	sl, r1, r0, ror r9
   1232c:	muleq	r1, ip, r4
   12330:	andeq	sl, r1, fp, lsl #20
   12334:	andeq	r2, r1, ip, asr #9
   12338:	andeq	sl, r1, sp, lsr #20
   1233c:	ldrdeq	ip, [r2], -r8
   12340:	andeq	ip, r2, r8, asr #3
   12344:	ldrdeq	ip, [r2], -r0
   12348:	andeq	sl, r1, r9, ror #20
   1234c:	muleq	r1, r8, sl
   12350:	ldrdeq	sl, [r1], -r2
   12354:	andeq	sl, r1, pc, lsl fp
   12358:	andeq	sl, r1, r6, asr fp
   1235c:	andeq	sl, r1, sl, lsl #23
   12360:	andeq	sl, r1, r6, asr #23
   12364:	andeq	sl, r1, r3, ror ip
   12368:	strdeq	ip, [r2], -r8
   1236c:	andeq	sl, r1, pc, asr #20
   12370:	mov	fp, #0
   12374:	mov	lr, #0
   12378:	pop	{r1}		; (ldr r1, [sp], #4)
   1237c:	mov	r2, sp
   12380:	push	{r2}		; (str r2, [sp, #-4]!)
   12384:	push	{r0}		; (str r0, [sp, #-4]!)
   12388:	ldr	ip, [pc, #16]	; 123a0 <__assert_fail@plt+0xe2c>
   1238c:	push	{ip}		; (str ip, [sp, #-4]!)
   12390:	ldr	r0, [pc, #12]	; 123a4 <__assert_fail@plt+0xe30>
   12394:	ldr	r3, [pc, #12]	; 123a8 <__assert_fail@plt+0xe34>
   12398:	bl	11364 <__libc_start_main@plt>
   1239c:	bl	11544 <abort@plt>
   123a0:	ldrdeq	r9, [r1], -ip
   123a4:	andeq	r1, r1, r0, lsl #11
   123a8:	andeq	r9, r1, ip, ror r4
   123ac:	ldr	r3, [pc, #20]	; 123c8 <__assert_fail@plt+0xe54>
   123b0:	ldr	r2, [pc, #20]	; 123cc <__assert_fail@plt+0xe58>
   123b4:	add	r3, pc, r3
   123b8:	ldr	r2, [r3, r2]
   123bc:	cmp	r2, #0
   123c0:	bxeq	lr
   123c4:	b	1137c <__gmon_start__@plt>
   123c8:	andeq	r9, r1, r4, asr #24
   123cc:	andeq	r0, r0, r8, asr r1
   123d0:	ldr	r3, [pc, #28]	; 123f4 <__assert_fail@plt+0xe80>
   123d4:	ldr	r0, [pc, #28]	; 123f8 <__assert_fail@plt+0xe84>
   123d8:	sub	r3, r3, r0
   123dc:	cmp	r3, #6
   123e0:	bxls	lr
   123e4:	ldr	r3, [pc, #16]	; 123fc <__assert_fail@plt+0xe88>
   123e8:	cmp	r3, #0
   123ec:	bxeq	lr
   123f0:	bx	r3
   123f4:			; <UNDEFINED> instruction: 0x0002c1b7
   123f8:			; <UNDEFINED> instruction: 0x0002c1b4
   123fc:	andeq	r0, r0, r0
   12400:	ldr	r1, [pc, #36]	; 1242c <__assert_fail@plt+0xeb8>
   12404:	ldr	r0, [pc, #36]	; 12430 <__assert_fail@plt+0xebc>
   12408:	sub	r1, r1, r0
   1240c:	asr	r1, r1, #2
   12410:	add	r1, r1, r1, lsr #31
   12414:	asrs	r1, r1, #1
   12418:	bxeq	lr
   1241c:	ldr	r3, [pc, #16]	; 12434 <__assert_fail@plt+0xec0>
   12420:	cmp	r3, #0
   12424:	bxeq	lr
   12428:	bx	r3
   1242c:			; <UNDEFINED> instruction: 0x0002c1b4
   12430:			; <UNDEFINED> instruction: 0x0002c1b4
   12434:	andeq	r0, r0, r0
   12438:	push	{r4, lr}
   1243c:	ldr	r4, [pc, #24]	; 1245c <__assert_fail@plt+0xee8>
   12440:	ldrb	r3, [r4]
   12444:	cmp	r3, #0
   12448:	popne	{r4, pc}
   1244c:	bl	123d0 <__assert_fail@plt+0xe5c>
   12450:	mov	r3, #1
   12454:	strb	r3, [r4]
   12458:	pop	{r4, pc}
   1245c:	andeq	ip, r2, r4, ror #3
   12460:	ldr	r0, [pc, #40]	; 12490 <__assert_fail@plt+0xf1c>
   12464:	ldr	r3, [r0]
   12468:	cmp	r3, #0
   1246c:	bne	12474 <__assert_fail@plt+0xf00>
   12470:	b	12400 <__assert_fail@plt+0xe8c>
   12474:	ldr	r3, [pc, #24]	; 12494 <__assert_fail@plt+0xf20>
   12478:	cmp	r3, #0
   1247c:	beq	12470 <__assert_fail@plt+0xefc>
   12480:	push	{r4, lr}
   12484:	blx	r3
   12488:	pop	{r4, lr}
   1248c:	b	12400 <__assert_fail@plt+0xe8c>
   12490:	andeq	fp, r2, r4, lsl pc
   12494:	andeq	r0, r0, r0
   12498:	bx	lr
   1249c:	ldr	r3, [pc, #32]	; 124c4 <__assert_fail@plt+0xf50>
   124a0:	ldr	r2, [r3]
   124a4:	cmn	r2, #-2147483647	; 0x80000001
   124a8:	ldrne	r2, [r3]
   124ac:	addne	r2, r2, #1
   124b0:	strne	r2, [r3]
   124b4:	ldr	r3, [pc, #12]	; 124c8 <__assert_fail@plt+0xf54>
   124b8:	mov	r2, #1
   124bc:	str	r2, [r3]
   124c0:	bx	lr
   124c4:	andeq	ip, r2, r4, ror #2
   124c8:	andeq	ip, r2, r8, ror #3
   124cc:	ldr	r3, [pc, #20]	; 124e8 <__assert_fail@plt+0xf74>
   124d0:	ldr	r2, [r3]
   124d4:	cmp	r2, #1
   124d8:	ldrgt	r2, [r3]
   124dc:	subgt	r2, r2, #1
   124e0:	strgt	r2, [r3]
   124e4:	bx	lr
   124e8:	andeq	ip, r2, r4, ror #2
   124ec:	push	{r0, r1, r2, r4, r5, lr}
   124f0:	mov	r4, r1
   124f4:	mov	r5, r0
   124f8:	mov	r2, #5
   124fc:	ldr	r1, [pc, #40]	; 1252c <__assert_fail@plt+0xfb8>
   12500:	mov	r0, #0
   12504:	bl	11268 <dcgettext@plt>
   12508:	mov	r1, #0
   1250c:	str	r4, [sp, #4]
   12510:	str	r5, [sp]
   12514:	mov	r3, r4
   12518:	mov	r2, r0
   1251c:	mov	r0, r1
   12520:	bl	11328 <error@plt>
   12524:	add	sp, sp, #12
   12528:	pop	{r4, r5, pc}
   1252c:	andeq	r9, r1, r4, ror #12
   12530:	mov	r2, #5
   12534:	ldr	r1, [pc, #24]	; 12554 <__assert_fail@plt+0xfe0>
   12538:	push	{r4, lr}
   1253c:	mov	r0, #0
   12540:	bl	11268 <dcgettext@plt>
   12544:	mov	r1, #0
   12548:	mov	r2, r0
   1254c:	mov	r0, #1
   12550:	bl	11328 <error@plt>
   12554:			; <UNDEFINED> instruction: 0x000196b2
   12558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1255c:	mov	r8, r0
   12560:	ldr	r6, [pc, #484]	; 1274c <__assert_fail@plt+0x11d8>
   12564:	sub	sp, sp, #20
   12568:	mov	r9, r1
   1256c:	mov	r7, #0
   12570:	mov	r4, r6
   12574:	ldr	r3, [r6, #12]
   12578:	cmp	r3, #0
   1257c:	beq	12744 <__assert_fail@plt+0x11d0>
   12580:	eor	r5, r8, #1
   12584:	cmp	r7, r9
   12588:	movcc	r5, #0
   1258c:	andcs	r5, r5, #1
   12590:	mvn	sl, #0
   12594:	mov	r3, #0
   12598:	str	r3, [r6]
   1259c:	mov	r2, r5
   125a0:	add	r1, sp, #12
   125a4:	mov	r0, sl
   125a8:	bl	112ec <waitpid@plt>
   125ac:	cmn	r0, #1
   125b0:	mov	r2, r0
   125b4:	beq	126c8 <__assert_fail@plt+0x1154>
   125b8:	cmp	r0, #0
   125bc:	beq	1271c <__assert_fail@plt+0x11a8>
   125c0:	ldr	ip, [r4, #4]
   125c4:	ldr	r1, [r4, #8]
   125c8:	mov	r3, #0
   125cc:	cmp	r3, ip
   125d0:	beq	1259c <__assert_fail@plt+0x1028>
   125d4:	ldr	r0, [r1, r3, lsl #2]
   125d8:	cmp	r2, r0
   125dc:	bne	12714 <__assert_fail@plt+0x11a0>
   125e0:	mov	r5, #0
   125e4:	str	r5, [r1, r3, lsl #2]
   125e8:	ldr	r3, [r4, #12]
   125ec:	add	r7, r7, #1
   125f0:	sub	r3, r3, #1
   125f4:	str	r3, [r4, #12]
   125f8:	ldrb	r3, [sp, #13]
   125fc:	cmp	r3, #255	; 0xff
   12600:	bne	1262c <__assert_fail@plt+0x10b8>
   12604:	mov	r2, #5
   12608:	ldr	r1, [pc, #320]	; 12750 <__assert_fail@plt+0x11dc>
   1260c:	mov	r0, r5
   12610:	bl	11268 <dcgettext@plt>
   12614:	ldr	r3, [r4, #20]
   12618:	mov	r1, r5
   1261c:	ldr	r3, [r3]
   12620:	mov	r2, r0
   12624:	mov	r0, #124	; 0x7c
   12628:	bl	11328 <error@plt>
   1262c:	ldrb	r3, [sp, #12]
   12630:	cmp	r3, #127	; 0x7f
   12634:	bne	12668 <__assert_fail@plt+0x10f4>
   12638:	mov	r2, #5
   1263c:	ldr	r1, [pc, #272]	; 12754 <__assert_fail@plt+0x11e0>
   12640:	mov	r0, #0
   12644:	bl	11268 <dcgettext@plt>
   12648:	ldr	r3, [r4, #20]
   1264c:	ldrb	r2, [sp, #13]
   12650:	mov	r1, #0
   12654:	str	r2, [sp]
   12658:	ldr	r3, [r3]
   1265c:	mov	r2, r0
   12660:	mov	r0, #125	; 0x7d
   12664:	bl	11328 <error@plt>
   12668:	ldr	r3, [sp, #12]
   1266c:	and	r3, r3, #127	; 0x7f
   12670:	add	r3, r3, #1
   12674:	sxtb	r3, r3
   12678:	cmp	r3, #1
   1267c:	ble	126b4 <__assert_fail@plt+0x1140>
   12680:	mov	r2, #5
   12684:	ldr	r1, [pc, #204]	; 12758 <__assert_fail@plt+0x11e4>
   12688:	mov	r0, #0
   1268c:	bl	11268 <dcgettext@plt>
   12690:	ldr	r2, [r4, #20]
   12694:	ldr	r3, [sp, #12]
   12698:	mov	r1, #0
   1269c:	and	r3, r3, #127	; 0x7f
   126a0:	str	r3, [sp]
   126a4:	ldr	r3, [r2]
   126a8:	mov	r2, r0
   126ac:	mov	r0, #125	; 0x7d
   126b0:	bl	11328 <error@plt>
   126b4:	ldrb	r3, [sp, #13]
   126b8:	cmp	r3, #0
   126bc:	movne	r3, #123	; 0x7b
   126c0:	strne	r3, [r4, #60]	; 0x3c
   126c4:	b	12574 <__assert_fail@plt+0x1000>
   126c8:	bl	113f4 <__errno_location@plt>
   126cc:	ldr	fp, [r0]
   126d0:	cmp	fp, #4
   126d4:	beq	126f8 <__assert_fail@plt+0x1184>
   126d8:	mov	r2, #5
   126dc:	ldr	r1, [pc, #120]	; 1275c <__assert_fail@plt+0x11e8>
   126e0:	mov	r0, #0
   126e4:	bl	11268 <dcgettext@plt>
   126e8:	mov	r1, fp
   126ec:	mov	r2, r0
   126f0:	mov	r0, #1
   126f4:	bl	11328 <error@plt>
   126f8:	ldr	r3, [r4]
   126fc:	cmp	r3, #0
   12700:	movne	r3, r8
   12704:	orreq	r3, r8, #1
   12708:	cmp	r3, #0
   1270c:	moveq	r5, #1
   12710:	b	1259c <__assert_fail@plt+0x1028>
   12714:	add	r3, r3, #1
   12718:	b	125cc <__assert_fail@plt+0x1058>
   1271c:	cmp	r5, #0
   12720:	bne	12744 <__assert_fail@plt+0x11d0>
   12724:	mov	r2, #5
   12728:	ldr	r1, [pc, #48]	; 12760 <__assert_fail@plt+0x11ec>
   1272c:	bl	11268 <dcgettext@plt>
   12730:	ldr	r3, [r4, #12]
   12734:	mov	r1, r5
   12738:	mov	r2, r0
   1273c:	mov	r0, r5
   12740:	bl	11328 <error@plt>
   12744:	add	sp, sp, #20
   12748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1274c:	andeq	ip, r2, r8, ror #3
   12750:	andeq	r9, r1, pc, lsl r7
   12754:	andeq	r9, r1, r4, asr #14
   12758:	andeq	r9, r1, sp, asr r7
   1275c:	ldrdeq	r9, [r1], -r4
   12760:	strdeq	r9, [r1], -r4
   12764:	push	{r4, r5, r6, r7, r8, lr}
   12768:	mov	r7, r0
   1276c:	ldr	r4, [pc, #148]	; 12808 <__assert_fail@plt+0x1294>
   12770:	mov	r6, #0
   12774:	ldr	r5, [r4, #4]
   12778:	ldr	r0, [r4, #8]
   1277c:	cmp	r6, r5
   12780:	beq	127bc <__assert_fail@plt+0x1248>
   12784:	ldr	r3, [r0, r6, lsl #2]
   12788:	cmp	r3, #0
   1278c:	bne	127b4 <__assert_fail@plt+0x1240>
   12790:	ldr	r3, [r4, #8]
   12794:	ldr	r2, [r3, r6, lsl #2]
   12798:	cmp	r2, #0
   1279c:	beq	127e8 <__assert_fail@plt+0x1274>
   127a0:	ldr	r3, [pc, #100]	; 1280c <__assert_fail@plt+0x1298>
   127a4:	ldr	r2, [pc, #100]	; 12810 <__assert_fail@plt+0x129c>
   127a8:	ldr	r1, [pc, #100]	; 12814 <__assert_fail@plt+0x12a0>
   127ac:	ldr	r0, [pc, #100]	; 12818 <__assert_fail@plt+0x12a4>
   127b0:	bl	11574 <__assert_fail@plt>
   127b4:	add	r6, r6, #1
   127b8:	b	1277c <__assert_fail@plt+0x1208>
   127bc:	mov	r2, #4
   127c0:	ldr	r1, [pc, #84]	; 1281c <__assert_fail@plt+0x12a8>
   127c4:	bl	17f60 <__assert_fail@plt+0x69ec>
   127c8:	mov	r2, #0
   127cc:	str	r0, [r4, #8]
   127d0:	ldr	r3, [r4, #4]
   127d4:	cmp	r5, r3
   127d8:	bcs	12790 <__assert_fail@plt+0x121c>
   127dc:	str	r2, [r0, r5, lsl #2]
   127e0:	add	r5, r5, #1
   127e4:	b	127d0 <__assert_fail@plt+0x125c>
   127e8:	str	r7, [r3, r6, lsl #2]
   127ec:	ldr	r3, [r4, #12]
   127f0:	mov	r0, r6
   127f4:	add	r3, r3, #1
   127f8:	str	r3, [r4, #12]
   127fc:	mov	r3, #1
   12800:	strb	r3, [r4, #64]	; 0x40
   12804:	pop	{r4, r5, r6, r7, r8, pc}
   12808:	andeq	ip, r2, r8, ror #3
   1280c:	andeq	r9, r1, r4, lsl #10
   12810:	andeq	r0, r0, r5, asr #11
   12814:	andeq	r9, r1, r9, ror r7
   12818:	andeq	r9, r1, r1, lsl #15
   1281c:	andeq	ip, r2, ip, ror #3
   12820:	subs	r4, r0, #0
   12824:	push	{r7, lr}
   12828:	ldr	r6, [pc, #652]	; 12abc <__assert_fail@plt+0x1548>
   1282c:	beq	12860 <__assert_fail@plt+0x12ec>
   12830:	ldr	r3, [pc, #648]	; 12ac0 <__assert_fail@plt+0x154c>
   12834:	mov	r2, #5
   12838:	ldr	r1, [pc, #644]	; 12ac4 <__assert_fail@plt+0x1550>
   1283c:	mov	r0, #0
   12840:	ldr	r5, [r3]
   12844:	bl	11268 <dcgettext@plt>
   12848:	ldr	r2, [r6]
   1284c:	mov	r1, r0
   12850:	mov	r0, r5
   12854:	bl	113e8 <fprintf@plt>
   12858:	mov	r0, r4
   1285c:	bl	113ac <exit@plt>
   12860:	ldr	r5, [pc, #608]	; 12ac8 <__assert_fail@plt+0x1554>
   12864:	mov	r2, #5
   12868:	ldr	r1, [pc, #604]	; 12acc <__assert_fail@plt+0x1558>
   1286c:	ldr	r7, [r5]
   12870:	bl	11268 <dcgettext@plt>
   12874:	ldr	r2, [r6]
   12878:	mov	r1, r0
   1287c:	mov	r0, r7
   12880:	bl	113e8 <fprintf@plt>
   12884:	mov	r2, #5
   12888:	ldr	r1, [pc, #576]	; 12ad0 <__assert_fail@plt+0x155c>
   1288c:	mov	r0, r4
   12890:	bl	11268 <dcgettext@plt>
   12894:	ldr	r1, [r5]
   12898:	bl	1152c <fputs@plt>
   1289c:	mov	r2, #5
   128a0:	ldr	r1, [pc, #556]	; 12ad4 <__assert_fail@plt+0x1560>
   128a4:	mov	r0, r4
   128a8:	bl	11268 <dcgettext@plt>
   128ac:	ldr	r1, [r5]
   128b0:	bl	1152c <fputs@plt>
   128b4:	mov	r2, #5
   128b8:	ldr	r1, [pc, #536]	; 12ad8 <__assert_fail@plt+0x1564>
   128bc:	mov	r0, r4
   128c0:	bl	11268 <dcgettext@plt>
   128c4:	ldr	r1, [r5]
   128c8:	bl	1152c <fputs@plt>
   128cc:	mov	r2, #5
   128d0:	ldr	r1, [pc, #516]	; 12adc <__assert_fail@plt+0x1568>
   128d4:	mov	r0, r4
   128d8:	bl	11268 <dcgettext@plt>
   128dc:	ldr	r1, [r5]
   128e0:	bl	1152c <fputs@plt>
   128e4:	mov	r2, #5
   128e8:	ldr	r1, [pc, #496]	; 12ae0 <__assert_fail@plt+0x156c>
   128ec:	mov	r0, r4
   128f0:	bl	11268 <dcgettext@plt>
   128f4:	ldr	r1, [r5]
   128f8:	bl	1152c <fputs@plt>
   128fc:	mov	r2, #5
   12900:	ldr	r1, [pc, #476]	; 12ae4 <__assert_fail@plt+0x1570>
   12904:	mov	r0, r4
   12908:	bl	11268 <dcgettext@plt>
   1290c:	ldr	r1, [r5]
   12910:	bl	1152c <fputs@plt>
   12914:	mov	r2, #5
   12918:	ldr	r1, [pc, #456]	; 12ae8 <__assert_fail@plt+0x1574>
   1291c:	mov	r0, r4
   12920:	bl	11268 <dcgettext@plt>
   12924:	ldr	r1, [r5]
   12928:	bl	1152c <fputs@plt>
   1292c:	mov	r2, #5
   12930:	ldr	r1, [pc, #436]	; 12aec <__assert_fail@plt+0x1578>
   12934:	mov	r0, r4
   12938:	bl	11268 <dcgettext@plt>
   1293c:	ldr	r1, [r5]
   12940:	bl	1152c <fputs@plt>
   12944:	mov	r2, #5
   12948:	ldr	r1, [pc, #416]	; 12af0 <__assert_fail@plt+0x157c>
   1294c:	mov	r0, r4
   12950:	bl	11268 <dcgettext@plt>
   12954:	ldr	r1, [r5]
   12958:	bl	1152c <fputs@plt>
   1295c:	mov	r2, #5
   12960:	ldr	r1, [pc, #396]	; 12af4 <__assert_fail@plt+0x1580>
   12964:	mov	r0, r4
   12968:	bl	11268 <dcgettext@plt>
   1296c:	ldr	r1, [r5]
   12970:	bl	1152c <fputs@plt>
   12974:	mov	r2, #5
   12978:	ldr	r1, [pc, #376]	; 12af8 <__assert_fail@plt+0x1584>
   1297c:	mov	r0, r4
   12980:	bl	11268 <dcgettext@plt>
   12984:	ldr	r1, [r5]
   12988:	bl	1152c <fputs@plt>
   1298c:	mov	r2, #5
   12990:	ldr	r1, [pc, #356]	; 12afc <__assert_fail@plt+0x1588>
   12994:	mov	r0, r4
   12998:	bl	11268 <dcgettext@plt>
   1299c:	ldr	r1, [r5]
   129a0:	bl	1152c <fputs@plt>
   129a4:	mov	r2, #5
   129a8:	ldr	r1, [pc, #336]	; 12b00 <__assert_fail@plt+0x158c>
   129ac:	mov	r0, r4
   129b0:	bl	11268 <dcgettext@plt>
   129b4:	ldr	r1, [r5]
   129b8:	bl	1152c <fputs@plt>
   129bc:	mov	r2, #5
   129c0:	ldr	r1, [pc, #316]	; 12b04 <__assert_fail@plt+0x1590>
   129c4:	mov	r0, r4
   129c8:	bl	11268 <dcgettext@plt>
   129cc:	ldr	r1, [r5]
   129d0:	bl	1152c <fputs@plt>
   129d4:	mov	r2, #5
   129d8:	ldr	r1, [pc, #296]	; 12b08 <__assert_fail@plt+0x1594>
   129dc:	mov	r0, r4
   129e0:	bl	11268 <dcgettext@plt>
   129e4:	ldr	r1, [r5]
   129e8:	bl	1152c <fputs@plt>
   129ec:	mov	r2, #5
   129f0:	ldr	r1, [pc, #276]	; 12b0c <__assert_fail@plt+0x1598>
   129f4:	mov	r0, r4
   129f8:	bl	11268 <dcgettext@plt>
   129fc:	ldr	r1, [r5]
   12a00:	bl	1152c <fputs@plt>
   12a04:	mov	r2, #5
   12a08:	ldr	r1, [pc, #256]	; 12b10 <__assert_fail@plt+0x159c>
   12a0c:	mov	r0, r4
   12a10:	bl	11268 <dcgettext@plt>
   12a14:	ldr	r1, [r5]
   12a18:	bl	1152c <fputs@plt>
   12a1c:	mov	r2, #5
   12a20:	ldr	r1, [pc, #236]	; 12b14 <__assert_fail@plt+0x15a0>
   12a24:	mov	r0, r4
   12a28:	bl	11268 <dcgettext@plt>
   12a2c:	ldr	r1, [r5]
   12a30:	bl	1152c <fputs@plt>
   12a34:	mov	r2, #5
   12a38:	ldr	r1, [pc, #216]	; 12b18 <__assert_fail@plt+0x15a4>
   12a3c:	mov	r0, r4
   12a40:	bl	11268 <dcgettext@plt>
   12a44:	ldr	r1, [r5]
   12a48:	bl	1152c <fputs@plt>
   12a4c:	mov	r2, #5
   12a50:	ldr	r1, [pc, #196]	; 12b1c <__assert_fail@plt+0x15a8>
   12a54:	mov	r0, r4
   12a58:	bl	11268 <dcgettext@plt>
   12a5c:	ldr	r1, [r5]
   12a60:	bl	1152c <fputs@plt>
   12a64:	mov	r2, #5
   12a68:	ldr	r1, [pc, #176]	; 12b20 <__assert_fail@plt+0x15ac>
   12a6c:	mov	r0, r4
   12a70:	bl	11268 <dcgettext@plt>
   12a74:	ldr	r1, [r5]
   12a78:	bl	1152c <fputs@plt>
   12a7c:	mov	r2, #5
   12a80:	ldr	r1, [pc, #156]	; 12b24 <__assert_fail@plt+0x15b0>
   12a84:	mov	r0, r4
   12a88:	bl	11268 <dcgettext@plt>
   12a8c:	ldr	r1, [r5]
   12a90:	bl	1152c <fputs@plt>
   12a94:	mov	r2, #5
   12a98:	ldr	r1, [pc, #136]	; 12b28 <__assert_fail@plt+0x15b4>
   12a9c:	mov	r0, r4
   12aa0:	bl	11268 <dcgettext@plt>
   12aa4:	ldr	r1, [r5]
   12aa8:	bl	1152c <fputs@plt>
   12aac:	ldr	r1, [r6]
   12ab0:	ldr	r0, [r5]
   12ab4:	bl	14874 <__assert_fail@plt+0x3300>
   12ab8:	b	12858 <__assert_fail@plt+0x12e4>
   12abc:			; <UNDEFINED> instruction: 0x0002c2b4
   12ac0:	ldrdeq	ip, [r2], -r0
   12ac4:	andeq	r9, r1, lr, lsl #15
   12ac8:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   12acc:			; <UNDEFINED> instruction: 0x000197b5
   12ad0:	andeq	r9, r1, r6, ror #15
   12ad4:	andeq	r9, r1, r4, lsr r8
   12ad8:	andeq	r9, r1, r9, lsr #17
   12adc:	andeq	r9, r1, sp, ror r9
   12ae0:	andeq	r9, r1, sl, asr #19
   12ae4:			; <UNDEFINED> instruction: 0x00019ab4
   12ae8:	muleq	r1, r5, fp
   12aec:	andeq	r9, r1, sl, lsr #24
   12af0:	andeq	r9, r1, lr, asr ip
   12af4:	andeq	r9, r1, r1, lsr sp
   12af8:	andeq	r9, r1, pc, lsr #27
   12afc:	andeq	r9, r1, lr, asr #28
   12b00:	muleq	r1, lr, lr
   12b04:	andeq	r9, r1, r6, ror pc
   12b08:	andeq	r9, r1, r0, asr #31
   12b0c:	strdeq	r9, [r1], -pc	; <UNPREDICTABLE>
   12b10:	andeq	sl, r1, pc, asr #32
   12b14:	andeq	sl, r1, r4, lsr #2
   12b18:	andeq	sl, r1, lr, ror #2
   12b1c:			; <UNDEFINED> instruction: 0x0001a1b1
   12b20:	strdeq	sl, [r1], -r6
   12b24:	andeq	sl, r1, ip, lsr r2
   12b28:	andeq	sl, r1, r7, ror r2
   12b2c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12b30:	mov	r7, r1
   12b34:	mov	r6, r2
   12b38:	add	r1, sp, #12
   12b3c:	mov	r2, #10
   12b40:	mov	r5, r0
   12b44:	mov	r4, r3
   12b48:	ldr	r8, [sp, #40]	; 0x28
   12b4c:	bl	111cc <strtol@plt>
   12b50:	ldr	r2, [sp, #12]
   12b54:	cmp	r5, r2
   12b58:	beq	12b6c <__assert_fail@plt+0x15f8>
   12b5c:	mov	r3, r0
   12b60:	ldrb	r0, [r2]
   12b64:	cmp	r0, #0
   12b68:	beq	12ba8 <__assert_fail@plt+0x1634>
   12b6c:	ldr	r3, [pc, #216]	; 12c4c <__assert_fail@plt+0x16d8>
   12b70:	mov	r2, #5
   12b74:	ldr	r1, [pc, #212]	; 12c50 <__assert_fail@plt+0x16dc>
   12b78:	mov	r0, #0
   12b7c:	ldr	r4, [r3]
   12b80:	bl	11268 <dcgettext@plt>
   12b84:	ldr	r2, [pc, #200]	; 12c54 <__assert_fail@plt+0x16e0>
   12b88:	str	r7, [sp]
   12b8c:	mov	r3, r5
   12b90:	ldr	r2, [r2]
   12b94:	mov	r1, r0
   12b98:	mov	r0, r4
   12b9c:	bl	113e8 <fprintf@plt>
   12ba0:	mov	r0, #1
   12ba4:	bl	12820 <__assert_fail@plt+0x12ac>
   12ba8:	cmp	r3, r6
   12bac:	bge	12bfc <__assert_fail@plt+0x1688>
   12bb0:	ldr	r3, [pc, #148]	; 12c4c <__assert_fail@plt+0x16d8>
   12bb4:	mov	r2, #5
   12bb8:	ldr	r1, [pc, #152]	; 12c58 <__assert_fail@plt+0x16e4>
   12bbc:	ldr	r4, [r3]
   12bc0:	bl	11268 <dcgettext@plt>
   12bc4:	ldr	r2, [pc, #136]	; 12c54 <__assert_fail@plt+0x16e0>
   12bc8:	str	r6, [sp, #4]
   12bcc:	str	r7, [sp]
   12bd0:	mov	r3, r5
   12bd4:	ldr	r2, [r2]
   12bd8:	mov	r1, r0
   12bdc:	mov	r0, r4
   12be0:	bl	113e8 <fprintf@plt>
   12be4:	cmp	r8, #0
   12be8:	moveq	r3, r6
   12bec:	bne	12ba0 <__assert_fail@plt+0x162c>
   12bf0:	mov	r0, r3
   12bf4:	add	sp, sp, #16
   12bf8:	pop	{r4, r5, r6, r7, r8, pc}
   12bfc:	cmp	r4, #0
   12c00:	cmpge	r3, r4
   12c04:	ble	12bf0 <__assert_fail@plt+0x167c>
   12c08:	ldr	r3, [pc, #60]	; 12c4c <__assert_fail@plt+0x16d8>
   12c0c:	mov	r2, #5
   12c10:	ldr	r1, [pc, #68]	; 12c5c <__assert_fail@plt+0x16e8>
   12c14:	ldr	r6, [r3]
   12c18:	bl	11268 <dcgettext@plt>
   12c1c:	ldr	r2, [pc, #48]	; 12c54 <__assert_fail@plt+0x16e0>
   12c20:	str	r4, [sp, #4]
   12c24:	str	r7, [sp]
   12c28:	mov	r3, r5
   12c2c:	ldr	r2, [r2]
   12c30:	mov	r1, r0
   12c34:	mov	r0, r6
   12c38:	bl	113e8 <fprintf@plt>
   12c3c:	cmp	r8, #0
   12c40:	moveq	r3, r4
   12c44:	beq	12bf0 <__assert_fail@plt+0x167c>
   12c48:	b	12ba0 <__assert_fail@plt+0x162c>
   12c4c:	ldrdeq	ip, [r2], -r0
   12c50:			; <UNDEFINED> instruction: 0x0001a2bc
   12c54:			; <UNDEFINED> instruction: 0x0002c2b4
   12c58:	andeq	sl, r1, r4, ror #5
   12c5c:	andeq	sl, r1, r2, lsl r3
   12c60:	push	{r4, r5, r6, r7, r8, lr}
   12c64:	mov	r1, #0
   12c68:	bl	1452c <__assert_fail@plt+0x2fb8>
   12c6c:	subs	r7, r0, #0
   12c70:	movlt	r4, #0
   12c74:	blt	12ca0 <__assert_fail@plt+0x172c>
   12c78:	ldr	r1, [pc, #40]	; 12ca8 <__assert_fail@plt+0x1734>
   12c7c:	bl	1119c <fdopen@plt>
   12c80:	subs	r4, r0, #0
   12c84:	bne	12ca0 <__assert_fail@plt+0x172c>
   12c88:	bl	113f4 <__errno_location@plt>
   12c8c:	ldr	r6, [r0]
   12c90:	mov	r5, r0
   12c94:	mov	r0, r7
   12c98:	bl	1155c <close@plt>
   12c9c:	str	r6, [r5]
   12ca0:	mov	r0, r4
   12ca4:	pop	{r4, r5, r6, r7, r8, pc}
   12ca8:	andeq	sl, r1, r0, ror #26
   12cac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12cb0:	mov	r4, r0
   12cb4:	ldr	r7, [pc, #360]	; 12e24 <__assert_fail@plt+0x18b0>
   12cb8:	ldr	r6, [pc, #360]	; 12e28 <__assert_fail@plt+0x18b4>
   12cbc:	mov	r5, #0
   12cc0:	mov	r8, r7
   12cc4:	ldr	r3, [r7, #16]
   12cc8:	sub	r3, r3, #1
   12ccc:	cmp	r5, r3
   12cd0:	bcc	12d24 <__assert_fail@plt+0x17b0>
   12cd4:	cmp	r4, #0
   12cd8:	beq	12e14 <__assert_fail@plt+0x18a0>
   12cdc:	ldr	r3, [r7, #68]	; 0x44
   12ce0:	cmp	r3, #0
   12ce4:	bne	12d98 <__assert_fail@plt+0x1824>
   12ce8:	ldr	r0, [pc, #316]	; 12e2c <__assert_fail@plt+0x18b8>
   12cec:	bl	12c60 <__assert_fail@plt+0x16ec>
   12cf0:	cmp	r0, #0
   12cf4:	mov	r4, r0
   12cf8:	str	r0, [r7, #68]	; 0x44
   12cfc:	bne	12d98 <__assert_fail@plt+0x1824>
   12d00:	bl	113f4 <__errno_location@plt>
   12d04:	mov	r2, #5
   12d08:	ldr	r1, [pc, #288]	; 12e30 <__assert_fail@plt+0x18bc>
   12d0c:	ldr	r5, [r0]
   12d10:	mov	r0, r4
   12d14:	bl	11268 <dcgettext@plt>
   12d18:	mov	r1, r5
   12d1c:	mov	r2, r0
   12d20:	b	12d88 <__assert_fail@plt+0x1814>
   12d24:	ldr	r3, [pc, #264]	; 12e34 <__assert_fail@plt+0x18c0>
   12d28:	cmp	r5, #0
   12d2c:	ldr	r9, [pc, #260]	; 12e38 <__assert_fail@plt+0x18c4>
   12d30:	movne	r9, r3
   12d34:	ldr	r3, [r8, #20]
   12d38:	mov	r1, #3
   12d3c:	mov	r0, #0
   12d40:	ldr	r2, [r3, r5, lsl #2]
   12d44:	ldr	sl, [r6]
   12d48:	bl	17654 <__assert_fail@plt+0x60e0>
   12d4c:	mov	r2, r9
   12d50:	ldr	r1, [pc, #228]	; 12e3c <__assert_fail@plt+0x18c8>
   12d54:	mov	r3, r0
   12d58:	mov	r0, sl
   12d5c:	bl	113e8 <fprintf@plt>
   12d60:	cmp	r0, #0
   12d64:	bge	12d90 <__assert_fail@plt+0x181c>
   12d68:	bl	113f4 <__errno_location@plt>
   12d6c:	ldr	r1, [pc, #204]	; 12e40 <__assert_fail@plt+0x18cc>
   12d70:	mov	r2, #5
   12d74:	ldr	r4, [r0]
   12d78:	mov	r0, #0
   12d7c:	bl	11268 <dcgettext@plt>
   12d80:	mov	r1, r4
   12d84:	mov	r2, r0
   12d88:	mov	r0, #1
   12d8c:	bl	11328 <error@plt>
   12d90:	add	r5, r5, #1
   12d94:	b	12cc4 <__assert_fail@plt+0x1750>
   12d98:	ldr	r1, [r6]
   12d9c:	ldr	r0, [pc, #160]	; 12e44 <__assert_fail@plt+0x18d0>
   12da0:	bl	1152c <fputs@plt>
   12da4:	ldr	r0, [r6]
   12da8:	bl	188f4 <__assert_fail@plt+0x7380>
   12dac:	cmp	r0, #0
   12db0:	bne	12d68 <__assert_fail@plt+0x17f4>
   12db4:	ldr	r0, [r8, #68]	; 0x44
   12db8:	bl	11550 <getc@plt>
   12dbc:	mov	r4, r0
   12dc0:	cmp	r0, #10
   12dc4:	cmnne	r0, #1
   12dc8:	movne	r5, #1
   12dcc:	moveq	r5, #0
   12dd0:	bne	12df0 <__assert_fail@plt+0x187c>
   12dd4:	cmn	r0, #1
   12dd8:	bne	12dfc <__assert_fail@plt+0x1888>
   12ddc:	bl	113f4 <__errno_location@plt>
   12de0:	mov	r2, #5
   12de4:	ldr	r1, [pc, #92]	; 12e48 <__assert_fail@plt+0x18d4>
   12de8:	ldr	r4, [r0]
   12dec:	b	12d78 <__assert_fail@plt+0x1804>
   12df0:	ldr	r0, [r8, #68]	; 0x44
   12df4:	bl	11550 <getc@plt>
   12df8:	b	12dc0 <__assert_fail@plt+0x184c>
   12dfc:	bic	r4, r4, #32
   12e00:	sub	r4, r4, #89	; 0x59
   12e04:	clz	r4, r4
   12e08:	lsr	r4, r4, #5
   12e0c:	mov	r0, r4
   12e10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e14:	ldr	r1, [r6]
   12e18:	mov	r0, #10
   12e1c:	bl	114f0 <putc@plt>
   12e20:	b	12e0c <__assert_fail@plt+0x1898>
   12e24:	andeq	ip, r2, r8, ror #3
   12e28:	ldrdeq	ip, [r2], -r0
   12e2c:	andeq	sl, r1, r1, ror #6
   12e30:	andeq	sl, r1, sl, ror #6
   12e34:	andeq	sl, r1, r0, asr #6
   12e38:	andeq	r9, r1, r3, lsr r8
   12e3c:	andeq	sl, r1, r2, asr #6
   12e40:	andeq	sl, r1, r7, asr #6
   12e44:	andeq	sl, r1, lr, lsl #7
   12e48:	muleq	r1, r3, r3
   12e4c:	push	{r4, r5, r6, r7, r8, r9, lr}
   12e50:	mov	r7, r3
   12e54:	ldr	r3, [pc, #1060]	; 13280 <__assert_fail@plt+0x1d0c>
   12e58:	sub	sp, sp, #36	; 0x24
   12e5c:	ldr	r4, [pc, #1056]	; 13284 <__assert_fail@plt+0x1d10>
   12e60:	ldr	r2, [r3]
   12e64:	cmp	r2, #0
   12e68:	bne	12eb8 <__assert_fail@plt+0x1944>
   12e6c:	ldrb	r3, [r4, #72]	; 0x48
   12e70:	cmp	r3, #0
   12e74:	beq	12ec8 <__assert_fail@plt+0x1954>
   12e78:	mov	r0, #1
   12e7c:	bl	12cac <__assert_fail@plt+0x1738>
   12e80:	cmp	r0, #0
   12e84:	bne	12ec8 <__assert_fail@plt+0x1954>
   12e88:	mov	r6, #1
   12e8c:	mov	r0, r6
   12e90:	add	sp, sp, #36	; 0x24
   12e94:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12e98:	mov	r1, r6
   12e9c:	mov	r0, r8
   12ea0:	bl	12558 <__assert_fail@plt+0xfe4>
   12ea4:	ldr	r3, [r5]
   12ea8:	ldr	r2, [r4, #12]
   12eac:	cmp	r2, r3
   12eb0:	bcs	12e98 <__assert_fail@plt+0x1924>
   12eb4:	b	12e6c <__assert_fail@plt+0x18f8>
   12eb8:	mov	r5, r3
   12ebc:	mov	r6, #1
   12ec0:	mov	r8, #0
   12ec4:	b	12ea4 <__assert_fail@plt+0x1930>
   12ec8:	ldrb	r0, [r4, #72]	; 0x48
   12ecc:	cmp	r0, #0
   12ed0:	bne	12ee4 <__assert_fail@plt+0x1970>
   12ed4:	ldrb	r3, [r4, #73]	; 0x49
   12ed8:	cmp	r3, #0
   12edc:	beq	12ee4 <__assert_fail@plt+0x1970>
   12ee0:	bl	12cac <__assert_fail@plt+0x1738>
   12ee4:	mov	r1, #0
   12ee8:	mov	r0, r1
   12eec:	bl	12558 <__assert_fail@plt+0xfe4>
   12ef0:	add	r0, sp, #4
   12ef4:	bl	17984 <__assert_fail@plt+0x6410>
   12ef8:	subs	r6, r0, #0
   12efc:	beq	12f28 <__assert_fail@plt+0x19b4>
   12f00:	bl	113f4 <__errno_location@plt>
   12f04:	ldr	r1, [pc, #892]	; 13288 <__assert_fail@plt+0x1d14>
   12f08:	mov	r2, #5
   12f0c:	ldr	r4, [r0]
   12f10:	mov	r0, #0
   12f14:	bl	11268 <dcgettext@plt>
   12f18:	mov	r1, r4
   12f1c:	mov	r2, r0
   12f20:	mov	r0, #1
   12f24:	bl	11328 <error@plt>
   12f28:	mov	r2, #1
   12f2c:	mov	r1, #2
   12f30:	ldr	r0, [sp, #8]
   12f34:	bl	18730 <__assert_fail@plt+0x71bc>
   12f38:	mov	r8, #1
   12f3c:	mov	r9, r6
   12f40:	bl	114a8 <fork@plt>
   12f44:	subs	r5, r0, #0
   12f48:	blt	12f9c <__assert_fail@plt+0x1a28>
   12f4c:	cmn	r5, #1
   12f50:	beq	12fc8 <__assert_fail@plt+0x1a54>
   12f54:	cmp	r5, #0
   12f58:	beq	12fdc <__assert_fail@plt+0x1a68>
   12f5c:	ldr	r0, [sp, #8]
   12f60:	bl	1155c <close@plt>
   12f64:	mov	r2, #4
   12f68:	mov	r1, sp
   12f6c:	ldr	r0, [sp, #4]
   12f70:	bl	178b0 <__assert_fail@plt+0x633c>
   12f74:	cmp	r0, #4
   12f78:	mov	r4, r0
   12f7c:	beq	13224 <__assert_fail@plt+0x1cb0>
   12f80:	cmn	r0, #1
   12f84:	beq	131e8 <__assert_fail@plt+0x1c74>
   12f88:	cmp	r0, #0
   12f8c:	bne	13258 <__assert_fail@plt+0x1ce4>
   12f90:	mov	r0, r5
   12f94:	bl	12764 <__assert_fail@plt+0x11f0>
   12f98:	b	13218 <__assert_fail@plt+0x1ca4>
   12f9c:	bl	113f4 <__errno_location@plt>
   12fa0:	ldr	r3, [r0]
   12fa4:	cmp	r3, #11
   12fa8:	bne	12f4c <__assert_fail@plt+0x19d8>
   12fac:	ldr	r3, [r4, #12]
   12fb0:	cmp	r3, #0
   12fb4:	beq	12f4c <__assert_fail@plt+0x19d8>
   12fb8:	mov	r1, r8
   12fbc:	mov	r0, r9
   12fc0:	bl	12558 <__assert_fail@plt+0xfe4>
   12fc4:	b	12f40 <__assert_fail@plt+0x19cc>
   12fc8:	bl	113f4 <__errno_location@plt>
   12fcc:	mov	r2, #5
   12fd0:	ldr	r1, [pc, #692]	; 1328c <__assert_fail@plt+0x1d18>
   12fd4:	ldr	r4, [r0]
   12fd8:	b	12f10 <__assert_fail@plt+0x199c>
   12fdc:	ldr	r0, [sp, #4]
   12fe0:	bl	1155c <close@plt>
   12fe4:	str	r5, [r4, #60]	; 0x3c
   12fe8:	bl	145fc <__assert_fail@plt+0x3088>
   12fec:	cmp	r0, #0
   12ff0:	beq	12ff8 <__assert_fail@plt+0x1a84>
   12ff4:	bl	14618 <__assert_fail@plt+0x30a4>
   12ff8:	mov	r0, #0
   12ffc:	bl	12764 <__assert_fail@plt+0x11f0>
   13000:	ldr	r2, [pc, #648]	; 13290 <__assert_fail@plt+0x1d1c>
   13004:	mov	r1, #19
   13008:	mov	r3, r0
   1300c:	add	r0, sp, #12
   13010:	bl	11400 <snprintf@plt>
   13014:	cmp	r0, #19
   13018:	bls	13030 <__assert_fail@plt+0x1abc>
   1301c:	ldr	r3, [pc, #624]	; 13294 <__assert_fail@plt+0x1d20>
   13020:	ldr	r2, [pc, #624]	; 13298 <__assert_fail@plt+0x1d24>
   13024:	ldr	r1, [pc, #624]	; 1329c <__assert_fail@plt+0x1d28>
   13028:	ldr	r0, [pc, #624]	; 132a0 <__assert_fail@plt+0x1d2c>
   1302c:	bl	11574 <__assert_fail@plt>
   13030:	ldr	r5, [r4, #76]	; 0x4c
   13034:	cmp	r5, #0
   13038:	beq	13080 <__assert_fail@plt+0x1b0c>
   1303c:	mov	r2, #1
   13040:	add	r1, sp, #12
   13044:	mov	r0, r5
   13048:	bl	113dc <setenv@plt>
   1304c:	cmp	r0, #0
   13050:	bge	13080 <__assert_fail@plt+0x1b0c>
   13054:	bl	113f4 <__errno_location@plt>
   13058:	mov	r2, #5
   1305c:	ldr	r1, [pc, #576]	; 132a4 <__assert_fail@plt+0x1d30>
   13060:	ldr	r6, [r0]
   13064:	mov	r0, #0
   13068:	bl	11268 <dcgettext@plt>
   1306c:	mov	r3, r5
   13070:	mov	r1, r6
   13074:	mov	r2, r0
   13078:	mov	r0, #0
   1307c:	bl	11328 <error@plt>
   13080:	ldr	r3, [r4, #80]	; 0x50
   13084:	cmp	r3, #0
   13088:	beq	13098 <__assert_fail@plt+0x1b24>
   1308c:	ldrb	r3, [r4, #84]	; 0x54
   13090:	cmp	r3, #0
   13094:	beq	1312c <__assert_fail@plt+0x1bb8>
   13098:	ldrb	r2, [r4, #84]	; 0x54
   1309c:	ldr	r3, [pc, #516]	; 132a8 <__assert_fail@plt+0x1d34>
   130a0:	ldr	r5, [pc, #516]	; 132ac <__assert_fail@plt+0x1d38>
   130a4:	cmp	r2, #0
   130a8:	moveq	r5, r3
   130ac:	mov	r0, #0
   130b0:	bl	1155c <close@plt>
   130b4:	mov	r1, #0
   130b8:	mov	r0, r5
   130bc:	bl	14cf8 <__assert_fail@plt+0x3784>
   130c0:	subs	r6, r0, #0
   130c4:	bge	131a4 <__assert_fail@plt+0x1c30>
   130c8:	ldrb	r4, [r4, #84]	; 0x54
   130cc:	cmp	r4, #0
   130d0:	beq	13100 <__assert_fail@plt+0x1b8c>
   130d4:	bl	113f4 <__errno_location@plt>
   130d8:	mov	r2, r5
   130dc:	mov	r1, #8
   130e0:	ldr	r4, [r0]
   130e4:	mov	r0, #0
   130e8:	bl	17654 <__assert_fail@plt+0x60e0>
   130ec:	ldr	r2, [pc, #444]	; 132b0 <__assert_fail@plt+0x1d3c>
   130f0:	mov	r1, r4
   130f4:	mov	r3, r0
   130f8:	mov	r0, #1
   130fc:	bl	11328 <error@plt>
   13100:	bl	113f4 <__errno_location@plt>
   13104:	mov	r2, r5
   13108:	mov	r1, #8
   1310c:	ldr	r6, [r0]
   13110:	mov	r0, r4
   13114:	bl	17654 <__assert_fail@plt+0x60e0>
   13118:	ldr	r2, [pc, #400]	; 132b0 <__assert_fail@plt+0x1d3c>
   1311c:	mov	r1, r6
   13120:	mov	r3, r0
   13124:	mov	r0, r4
   13128:	bl	11328 <error@plt>
   1312c:	mov	r0, r7
   13130:	bl	141b4 <__assert_fail@plt+0x2c40>
   13134:	cmp	r0, #0
   13138:	beq	131d8 <__assert_fail@plt+0x1c64>
   1313c:	bl	113f4 <__errno_location@plt>
   13140:	mov	r3, #7
   13144:	str	r3, [r0]
   13148:	bl	113f4 <__errno_location@plt>
   1314c:	ldr	r3, [r0]
   13150:	mov	r4, r0
   13154:	cmp	r3, #0
   13158:	beq	1316c <__assert_fail@plt+0x1bf8>
   1315c:	mov	r1, r0
   13160:	mov	r2, #4
   13164:	ldr	r0, [sp, #8]
   13168:	bl	11430 <write@plt>
   1316c:	ldr	r0, [sp, #8]
   13170:	bl	1155c <close@plt>
   13174:	ldr	r1, [r4]
   13178:	cmp	r1, #7
   1317c:	beq	13190 <__assert_fail@plt+0x1c1c>
   13180:	ldr	r3, [r7]
   13184:	ldr	r2, [pc, #292]	; 132b0 <__assert_fail@plt+0x1d3c>
   13188:	mov	r0, #0
   1318c:	bl	11328 <error@plt>
   13190:	ldr	r0, [r4]
   13194:	cmp	r0, #2
   13198:	moveq	r0, #127	; 0x7f
   1319c:	movne	r0, #126	; 0x7e
   131a0:	bl	11220 <_exit@plt>
   131a4:	beq	1312c <__assert_fail@plt+0x1bb8>
   131a8:	mov	r1, #0
   131ac:	bl	11280 <dup2@plt>
   131b0:	cmp	r0, #0
   131b4:	beq	131cc <__assert_fail@plt+0x1c58>
   131b8:	bl	113f4 <__errno_location@plt>
   131bc:	mov	r2, #5
   131c0:	ldr	r1, [pc, #236]	; 132b4 <__assert_fail@plt+0x1d40>
   131c4:	ldr	r4, [r0]
   131c8:	b	12f10 <__assert_fail@plt+0x199c>
   131cc:	mov	r0, r6
   131d0:	bl	1155c <close@plt>
   131d4:	b	1312c <__assert_fail@plt+0x1bb8>
   131d8:	mov	r1, r7
   131dc:	ldr	r0, [r7]
   131e0:	bl	11238 <execvp@plt>
   131e4:	b	13148 <__assert_fail@plt+0x1bd4>
   131e8:	ldr	r0, [sp, #4]
   131ec:	bl	1155c <close@plt>
   131f0:	bl	113f4 <__errno_location@plt>
   131f4:	mov	r2, #5
   131f8:	ldr	r1, [pc, #184]	; 132b8 <__assert_fail@plt+0x1d44>
   131fc:	ldr	r4, [r0]
   13200:	mov	r0, #0
   13204:	bl	11268 <dcgettext@plt>
   13208:	mov	r1, r4
   1320c:	mov	r2, r0
   13210:	mov	r0, #0
   13214:	bl	11328 <error@plt>
   13218:	ldr	r0, [sp, #4]
   1321c:	bl	1155c <close@plt>
   13220:	b	12e88 <__assert_fail@plt+0x1914>
   13224:	ldr	r0, [sp, #4]
   13228:	bl	1155c <close@plt>
   1322c:	mov	r2, #0
   13230:	add	r1, sp, #12
   13234:	mov	r0, r5
   13238:	bl	112ec <waitpid@plt>
   1323c:	ldr	r3, [sp]
   13240:	cmp	r3, #7
   13244:	beq	12e8c <__assert_fail@plt+0x1918>
   13248:	cmp	r3, #2
   1324c:	moveq	r0, #127	; 0x7f
   13250:	movne	r0, #126	; 0x7e
   13254:	bl	113ac <exit@plt>
   13258:	bl	113f4 <__errno_location@plt>
   1325c:	mov	r2, #5
   13260:	ldr	r1, [pc, #84]	; 132bc <__assert_fail@plt+0x1d48>
   13264:	ldr	r5, [r0]
   13268:	mov	r0, #0
   1326c:	bl	11268 <dcgettext@plt>
   13270:	mov	r3, r4
   13274:	mov	r1, r5
   13278:	mov	r2, r0
   1327c:	b	130f8 <__assert_fail@plt+0x1b84>
   13280:	andeq	ip, r2, r4, ror #2
   13284:	andeq	ip, r2, r8, ror #3
   13288:			; <UNDEFINED> instruction: 0x0001a3b7
   1328c:	ldrdeq	sl, [r1], -r9
   13290:	andeq	sl, r1, r5, ror #7
   13294:	andeq	r9, r1, sp, lsl #10
   13298:	andeq	r0, r0, r6, lsr #9
   1329c:	andeq	r9, r1, r9, ror r7
   132a0:	andeq	sl, r1, r8, ror #7
   132a4:	andeq	sl, r1, r2, lsr #8
   132a8:	andeq	sl, r1, sp, lsr #7
   132ac:	andeq	sl, r1, r1, ror #6
   132b0:	andeq	fp, r1, lr, ror #1
   132b4:	andeq	sl, r1, r8, asr #8
   132b8:	andeq	sl, r1, pc, ror r4
   132bc:	ldrdeq	sl, [r1], -r9
   132c0:	ldr	r0, [pc, #64]	; 13308 <__assert_fail@plt+0x1d94>
   132c4:	ldr	r3, [r0, #112]	; 0x70
   132c8:	cmp	r3, #0
   132cc:	bxne	lr
   132d0:	ldr	r3, [pc, #52]	; 1330c <__assert_fail@plt+0x1d98>
   132d4:	ldrb	r3, [r3, #4]
   132d8:	cmp	r3, #0
   132dc:	bxne	lr
   132e0:	ldr	r2, [r0, #16]
   132e4:	ldr	r3, [r0, #116]	; 0x74
   132e8:	cmp	r2, r3
   132ec:	bxeq	lr
   132f0:	ldr	r3, [r0, #88]	; 0x58
   132f4:	cmp	r3, #0
   132f8:	bxne	lr
   132fc:	add	r1, r0, #16
   13300:	add	r0, r0, #88	; 0x58
   13304:	b	13d28 <__assert_fail@plt+0x27b4>
   13308:	andeq	ip, r2, r8, ror #3
   1330c:	andeq	ip, r2, r4, ror #2
   13310:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13314:	ldr	r4, [pc, #248]	; 13414 <__assert_fail@plt+0x1ea0>
   13318:	ldr	r6, [r4, #100]	; 0x64
   1331c:	ldr	r3, [r4, #36]	; 0x24
   13320:	sub	r6, r6, #1
   13324:	sub	r6, r6, r3
   13328:	ldrb	r3, [r4, #136]	; 0x88
   1332c:	ldr	r5, [r4, #132]	; 0x84
   13330:	cmp	r3, #0
   13334:	add	r6, r5, r6
   13338:	bne	1336c <__assert_fail@plt+0x1df8>
   1333c:	ldr	r0, [r4, #140]	; 0x8c
   13340:	bl	11550 <getc@plt>
   13344:	cmn	r0, #1
   13348:	bne	13374 <__assert_fail@plt+0x1e00>
   1334c:	ldr	r2, [r4, #132]	; 0x84
   13350:	mov	r3, #1
   13354:	cmp	r5, r2
   13358:	strb	r3, [r4, #136]	; 0x88
   1335c:	movne	r3, #0
   13360:	strbne	r3, [r5], #1
   13364:	subne	r5, r5, r2
   13368:	bne	133a0 <__assert_fail@plt+0x1e2c>
   1336c:	mvn	r5, #0
   13370:	b	133d0 <__assert_fail@plt+0x1e5c>
   13374:	ldrb	r3, [r4, #144]	; 0x90
   13378:	add	r1, r5, #1
   1337c:	cmp	r0, r3
   13380:	bne	133dc <__assert_fail@plt+0x1e68>
   13384:	ldr	r3, [r4, #148]	; 0x94
   13388:	ldr	r2, [r4, #132]	; 0x84
   1338c:	add	r3, r3, #1
   13390:	str	r3, [r4, #148]	; 0x94
   13394:	mov	r3, #0
   13398:	strb	r3, [r5]
   1339c:	sub	r5, r1, r2
   133a0:	ldr	r3, [r4, #112]	; 0x70
   133a4:	cmp	r3, #0
   133a8:	bne	133d0 <__assert_fail@plt+0x1e5c>
   133ac:	ldr	r1, [pc, #100]	; 13418 <__assert_fail@plt+0x1ea4>
   133b0:	ldrb	r1, [r1, #4]
   133b4:	str	r3, [sp, #4]
   133b8:	str	r3, [sp]
   133bc:	str	r1, [sp, #8]
   133c0:	ldr	r1, [pc, #84]	; 1341c <__assert_fail@plt+0x1ea8>
   133c4:	mov	r3, r5
   133c8:	add	r0, r1, #72	; 0x48
   133cc:	bl	13928 <__assert_fail@plt+0x23b4>
   133d0:	mov	r0, r5
   133d4:	add	sp, sp, #16
   133d8:	pop	{r4, r5, r6, pc}
   133dc:	cmp	r5, r6
   133e0:	bcc	13408 <__assert_fail@plt+0x1e94>
   133e4:	bl	132c0 <__assert_fail@plt+0x1d4c>
   133e8:	mov	r2, #5
   133ec:	ldr	r1, [pc, #44]	; 13420 <__assert_fail@plt+0x1eac>
   133f0:	mov	r0, #0
   133f4:	bl	11268 <dcgettext@plt>
   133f8:	mov	r1, #0
   133fc:	mov	r2, r0
   13400:	mov	r0, #1
   13404:	bl	11328 <error@plt>
   13408:	mov	r5, r1
   1340c:	strb	r0, [r1, #-1]
   13410:	b	1333c <__assert_fail@plt+0x1dc8>
   13414:	andeq	ip, r2, r8, ror #3
   13418:	andeq	ip, r2, r4, ror #2
   1341c:	strdeq	ip, [r2], -r8
   13420:	andeq	sl, r1, r7, lsr #10
   13424:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13428:	sub	sp, sp, #36	; 0x24
   1342c:	ldr	r5, [pc, #972]	; 13800 <__assert_fail@plt+0x228c>
   13430:	ldr	r3, [r5, #100]	; 0x64
   13434:	ldr	r2, [r5, #36]	; 0x24
   13438:	ldrb	sl, [r5, #152]	; 0x98
   1343c:	ldr	r4, [r5, #132]	; 0x84
   13440:	sub	r3, r3, #1
   13444:	sub	r3, r3, r2
   13448:	add	r3, r4, r3
   1344c:	cmp	sl, #0
   13450:	str	r3, [sp, #24]
   13454:	bne	13708 <__assert_fail@plt+0x2194>
   13458:	mov	r7, #1
   1345c:	mov	r9, sl
   13460:	mvn	r2, #0
   13464:	mov	fp, r7
   13468:	mov	r8, r7
   1346c:	str	sl, [sp, #20]
   13470:	ldr	r0, [r5, #140]	; 0x8c
   13474:	str	r2, [sp, #28]
   13478:	bl	11550 <getc@plt>
   1347c:	ldr	r2, [sp, #28]
   13480:	cmn	r0, #1
   13484:	mov	r6, r0
   13488:	bne	13588 <__assert_fail@plt+0x2014>
   1348c:	ldr	r6, [r5, #132]	; 0x84
   13490:	mov	r3, #1
   13494:	cmp	r4, r6
   13498:	strb	r3, [r5, #152]	; 0x98
   1349c:	beq	13708 <__assert_fail@plt+0x2194>
   134a0:	mov	r8, #0
   134a4:	cmp	fp, #2
   134a8:	strb	r8, [r4], #1
   134ac:	sub	r4, r4, r6
   134b0:	bne	13514 <__assert_fail@plt+0x1fa0>
   134b4:	bl	132c0 <__assert_fail@plt+0x1d4c>
   134b8:	ldr	r1, [pc, #836]	; 13804 <__assert_fail@plt+0x2290>
   134bc:	mov	r2, #5
   134c0:	mov	r0, #0
   134c4:	bl	11268 <dcgettext@plt>
   134c8:	ldr	r3, [sp, #20]
   134cc:	mov	r2, #5
   134d0:	cmp	r3, #34	; 0x22
   134d4:	ldreq	r1, [pc, #812]	; 13808 <__assert_fail@plt+0x2294>
   134d8:	ldrne	r1, [pc, #812]	; 1380c <__assert_fail@plt+0x2298>
   134dc:	mov	r4, r0
   134e0:	mov	r0, #0
   134e4:	bl	11268 <dcgettext@plt>
   134e8:	mov	r2, r4
   134ec:	mov	r1, #0
   134f0:	mov	r3, r0
   134f4:	mov	r0, #1
   134f8:	bl	11328 <error@plt>
   134fc:	mov	fp, r8
   13500:	mov	r2, r6
   13504:	b	13470 <__assert_fail@plt+0x1efc>
   13508:	mov	r9, r8
   1350c:	mov	fp, #3
   13510:	b	13500 <__assert_fail@plt+0x1f8c>
   13514:	cmp	r7, #0
   13518:	beq	13548 <__assert_fail@plt+0x1fd4>
   1351c:	ldr	r0, [r5, #156]	; 0x9c
   13520:	cmp	r0, #0
   13524:	beq	13548 <__assert_fail@plt+0x1fd4>
   13528:	ldrb	r2, [r0]
   1352c:	ldrb	r3, [r6]
   13530:	cmp	r2, r3
   13534:	bne	13548 <__assert_fail@plt+0x1fd4>
   13538:	mov	r1, r6
   1353c:	bl	111c0 <strcmp@plt>
   13540:	cmp	r0, #0
   13544:	beq	13708 <__assert_fail@plt+0x2194>
   13548:	ldr	r3, [r5, #112]	; 0x70
   1354c:	cmp	r3, #0
   13550:	bne	1357c <__assert_fail@plt+0x2008>
   13554:	ldr	r2, [pc, #692]	; 13810 <__assert_fail@plt+0x229c>
   13558:	ldrb	r2, [r2, #4]
   1355c:	str	r3, [sp, #4]
   13560:	str	r3, [sp]
   13564:	str	r2, [sp, #8]
   13568:	mov	r3, r4
   1356c:	mov	r2, r6
   13570:	ldr	r1, [pc, #668]	; 13814 <__assert_fail@plt+0x22a0>
   13574:	add	r0, r1, #72	; 0x48
   13578:	bl	13928 <__assert_fail@plt+0x23b4>
   1357c:	mov	r0, r4
   13580:	add	sp, sp, #36	; 0x24
   13584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13588:	cmp	fp, #2
   1358c:	beq	13768 <__assert_fail@plt+0x21f4>
   13590:	cmp	fp, #3
   13594:	beq	13788 <__assert_fail@plt+0x2214>
   13598:	cmp	fp, #1
   1359c:	bne	13670 <__assert_fail@plt+0x20fc>
   135a0:	bics	r3, r0, #127	; 0x7f
   135a4:	bne	135c0 <__assert_fail@plt+0x204c>
   135a8:	bl	11394 <__ctype_b_loc@plt>
   135ac:	lsl	r2, r6, #1
   135b0:	ldr	r1, [r0]
   135b4:	ldrh	r2, [r1, r2]
   135b8:	tst	r2, #1
   135bc:	bne	13500 <__assert_fail@plt+0x1f8c>
   135c0:	sub	r2, r6, #10
   135c4:	cmp	r2, #3
   135c8:	bls	13500 <__assert_fail@plt+0x1f8c>
   135cc:	ldr	r3, [r5, #112]	; 0x70
   135d0:	cmp	r3, #0
   135d4:	bne	1373c <__assert_fail@plt+0x21c8>
   135d8:	bics	fp, r6, #127	; 0x7f
   135dc:	bne	1373c <__assert_fail@plt+0x21c8>
   135e0:	bl	11394 <__ctype_b_loc@plt>
   135e4:	lsl	r3, r6, #1
   135e8:	ldr	r2, [r0]
   135ec:	ldrh	r3, [r2, r3]
   135f0:	tst	r3, #1
   135f4:	beq	1373c <__assert_fail@plt+0x21c8>
   135f8:	ldr	r0, [r5, #156]	; 0x9c
   135fc:	strb	fp, [r4], #1
   13600:	ldr	fp, [r5, #132]	; 0x84
   13604:	cmp	r0, #0
   13608:	sub	r4, r4, fp
   1360c:	beq	13630 <__assert_fail@plt+0x20bc>
   13610:	ldrb	r2, [r0]
   13614:	ldrb	r3, [fp]
   13618:	cmp	r2, r3
   1361c:	bne	13630 <__assert_fail@plt+0x20bc>
   13620:	mov	r1, fp
   13624:	bl	111c0 <strcmp@plt>
   13628:	cmp	r0, #0
   1362c:	beq	136f8 <__assert_fail@plt+0x2184>
   13630:	ldr	r3, [pc, #472]	; 13810 <__assert_fail@plt+0x229c>
   13634:	ldr	r1, [pc, #472]	; 13814 <__assert_fail@plt+0x22a0>
   13638:	mov	r2, fp
   1363c:	ldrb	r3, [r3, #4]
   13640:	add	r0, r1, #72	; 0x48
   13644:	mov	r7, sl
   13648:	str	r3, [sp, #8]
   1364c:	mov	r3, #0
   13650:	str	r3, [sp, #4]
   13654:	str	r3, [sp]
   13658:	mov	r3, r4
   1365c:	bl	13928 <__assert_fail@plt+0x23b4>
   13660:	mov	r9, r8
   13664:	ldr	r4, [r5, #132]	; 0x84
   13668:	mov	fp, #1
   1366c:	b	13500 <__assert_fail@plt+0x1f8c>
   13670:	cmp	r0, #10
   13674:	bne	135cc <__assert_fail@plt+0x2058>
   13678:	bics	r3, r2, #127	; 0x7f
   1367c:	str	r2, [sp, #28]
   13680:	bne	136a0 <__assert_fail@plt+0x212c>
   13684:	bl	11394 <__ctype_b_loc@plt>
   13688:	ldr	r2, [sp, #28]
   1368c:	lsl	r2, r2, #1
   13690:	ldr	r1, [r0]
   13694:	ldrh	r2, [r1, r2]
   13698:	tst	r2, #1
   1369c:	bne	136ac <__assert_fail@plt+0x2138>
   136a0:	ldr	r2, [r5, #148]	; 0x94
   136a4:	add	r2, r2, #1
   136a8:	str	r2, [r5, #148]	; 0x94
   136ac:	ldr	fp, [r5, #132]	; 0x84
   136b0:	cmp	r4, fp
   136b4:	orrne	r9, r9, #1
   136b8:	cmp	r9, #0
   136bc:	beq	134fc <__assert_fail@plt+0x1f88>
   136c0:	ldr	r0, [r5, #156]	; 0x9c
   136c4:	mov	r3, #0
   136c8:	cmp	r0, r3
   136cc:	strb	r3, [r4], #1
   136d0:	sub	r4, r4, fp
   136d4:	beq	13710 <__assert_fail@plt+0x219c>
   136d8:	ldrb	r2, [r0]
   136dc:	ldrb	r3, [fp]
   136e0:	cmp	r2, r3
   136e4:	bne	13710 <__assert_fail@plt+0x219c>
   136e8:	mov	r1, fp
   136ec:	bl	111c0 <strcmp@plt>
   136f0:	cmp	r0, #0
   136f4:	bne	13710 <__assert_fail@plt+0x219c>
   136f8:	mov	r3, #1
   136fc:	cmp	r7, #0
   13700:	strb	r3, [r5, #152]	; 0x98
   13704:	beq	1357c <__assert_fail@plt+0x2008>
   13708:	mvn	r4, #0
   1370c:	b	1357c <__assert_fail@plt+0x2008>
   13710:	ldr	r3, [r5, #112]	; 0x70
   13714:	cmp	r3, #0
   13718:	bne	1357c <__assert_fail@plt+0x2008>
   1371c:	ldr	r2, [pc, #236]	; 13810 <__assert_fail@plt+0x229c>
   13720:	ldrb	r2, [r2, #4]
   13724:	str	r3, [sp, #4]
   13728:	str	r3, [sp]
   1372c:	str	r2, [sp, #8]
   13730:	mov	r3, r4
   13734:	mov	r2, fp
   13738:	b	13570 <__assert_fail@plt+0x1ffc>
   1373c:	cmp	r6, #39	; 0x27
   13740:	beq	13758 <__assert_fail@plt+0x21e4>
   13744:	cmp	r6, #92	; 0x5c
   13748:	beq	13508 <__assert_fail@plt+0x1f94>
   1374c:	cmp	r6, #34	; 0x22
   13750:	movne	r9, r8
   13754:	bne	13788 <__assert_fail@plt+0x2214>
   13758:	str	r6, [sp, #20]
   1375c:	mov	r9, r8
   13760:	mov	fp, #2
   13764:	b	13500 <__assert_fail@plt+0x1f8c>
   13768:	cmp	r0, #10
   1376c:	beq	134b4 <__assert_fail@plt+0x1f40>
   13770:	ldr	r3, [sp, #20]
   13774:	cmp	r3, r0
   13778:	bne	1378c <__assert_fail@plt+0x2218>
   1377c:	mov	r9, r8
   13780:	mov	fp, #0
   13784:	b	13500 <__assert_fail@plt+0x1f8c>
   13788:	mov	fp, #0
   1378c:	cmp	r6, #0
   13790:	bne	137c4 <__assert_fail@plt+0x2250>
   13794:	ldr	r2, [r5, #160]	; 0xa0
   13798:	cmp	r2, #0
   1379c:	bne	137c4 <__assert_fail@plt+0x2250>
   137a0:	mov	r2, #5
   137a4:	ldr	r1, [pc, #108]	; 13818 <__assert_fail@plt+0x22a4>
   137a8:	mov	r0, r6
   137ac:	bl	11268 <dcgettext@plt>
   137b0:	mov	r1, r6
   137b4:	mov	r2, r0
   137b8:	mov	r0, r6
   137bc:	bl	11328 <error@plt>
   137c0:	str	r8, [r5, #160]	; 0xa0
   137c4:	ldr	r3, [sp, #24]
   137c8:	cmp	r4, r3
   137cc:	bcc	137f4 <__assert_fail@plt+0x2280>
   137d0:	bl	132c0 <__assert_fail@plt+0x1d4c>
   137d4:	mov	r2, #5
   137d8:	ldr	r1, [pc, #60]	; 1381c <__assert_fail@plt+0x22a8>
   137dc:	mov	r0, #0
   137e0:	bl	11268 <dcgettext@plt>
   137e4:	mov	r1, #0
   137e8:	mov	r2, r0
   137ec:	mov	r0, #1
   137f0:	bl	11328 <error@plt>
   137f4:	strb	r6, [r4]
   137f8:	add	r4, r4, #1
   137fc:	b	13500 <__assert_fail@plt+0x1f8c>
   13800:	andeq	ip, r2, r8, ror #3
   13804:	andeq	sl, r1, lr, lsr r5
   13808:	muleq	r1, r6, r5
   1380c:	muleq	r1, sp, r5
   13810:	andeq	ip, r2, r4, ror #2
   13814:	strdeq	ip, [r2], -r8
   13818:	andeq	sl, r1, r4, lsr #11
   1381c:	andeq	sl, r1, r7, lsr #10
   13820:	push	{r4, r5, r6, lr}
   13824:	bl	113a0 <getpid@plt>
   13828:	ldr	r4, [pc, #84]	; 13884 <__assert_fail@plt+0x2310>
   1382c:	ldr	r3, [r4, #164]	; 0xa4
   13830:	cmp	r0, r3
   13834:	beq	1384c <__assert_fail@plt+0x22d8>
   13838:	ldr	r3, [pc, #72]	; 13888 <__assert_fail@plt+0x2314>
   1383c:	ldr	r2, [pc, #72]	; 1388c <__assert_fail@plt+0x2318>
   13840:	ldr	r1, [pc, #72]	; 13890 <__assert_fail@plt+0x231c>
   13844:	ldr	r0, [pc, #72]	; 13894 <__assert_fail@plt+0x2320>
   13848:	bl	11574 <__assert_fail@plt>
   1384c:	ldrb	r5, [r4, #168]	; 0xa8
   13850:	cmp	r5, #0
   13854:	popne	{r4, r5, r6, pc}
   13858:	mov	r0, #1
   1385c:	mov	r1, r5
   13860:	strb	r0, [r4, #168]	; 0xa8
   13864:	bl	12558 <__assert_fail@plt+0xfe4>
   13868:	ldr	r2, [r4, #172]	; 0xac
   1386c:	ldr	r3, [r4, #60]	; 0x3c
   13870:	strb	r5, [r4, #168]	; 0xa8
   13874:	cmp	r2, r3
   13878:	popeq	{r4, r5, r6, pc}
   1387c:	ldr	r0, [r4, #60]	; 0x3c
   13880:	bl	11220 <_exit@plt>
   13884:	andeq	ip, r2, r8, ror #3
   13888:	andeq	r9, r1, sl, lsl r5
   1388c:	andeq	r0, r0, r5, asr #12
   13890:	andeq	r9, r1, r9, ror r7
   13894:	andeq	sl, r1, pc, lsr #12
   13898:	mov	r0, #0
   1389c:	bx	lr
   138a0:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   138a4:	mov	r6, r0
   138a8:	mov	r5, r1
   138ac:	bl	1134c <getenv@plt>
   138b0:	subs	r3, r0, #0
   138b4:	beq	1391c <__assert_fail@plt+0x23a8>
   138b8:	mov	r4, #0
   138bc:	str	r4, [sp]
   138c0:	add	r3, sp, #12
   138c4:	mov	r2, #10
   138c8:	add	r1, sp, #8
   138cc:	bl	1839c <__assert_fail@plt+0x6e28>
   138d0:	cmp	r0, r4
   138d4:	bne	138f0 <__assert_fail@plt+0x237c>
   138d8:	ldr	r0, [sp, #12]
   138dc:	cmp	r0, r5
   138e0:	movcs	r0, #0
   138e4:	movcc	r0, #1
   138e8:	add	sp, sp, #16
   138ec:	pop	{r4, r5, r6, pc}
   138f0:	bl	113f4 <__errno_location@plt>
   138f4:	mov	r2, #5
   138f8:	ldr	r1, [pc, #36]	; 13924 <__assert_fail@plt+0x23b0>
   138fc:	ldr	r5, [r0]
   13900:	mov	r0, r4
   13904:	bl	11268 <dcgettext@plt>
   13908:	mov	r3, r6
   1390c:	mov	r1, r5
   13910:	mov	r2, r0
   13914:	mov	r0, #1
   13918:	bl	11328 <error@plt>
   1391c:	mov	r0, r3
   13920:	b	138e8 <__assert_fail@plt+0x2374>
   13924:			; <UNDEFINED> instruction: 0x0001adb2
   13928:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1392c:	subs	r7, r2, #0
   13930:	ldr	sl, [sp, #40]	; 0x28
   13934:	ldr	r9, [sp, #44]	; 0x2c
   13938:	ldr	r6, [sp, #48]	; 0x30
   1393c:	bne	13954 <__assert_fail@plt+0x23e0>
   13940:	ldr	r3, [pc, #528]	; 13b58 <__assert_fail@plt+0x25e4>
   13944:	ldr	r2, [pc, #528]	; 13b5c <__assert_fail@plt+0x25e8>
   13948:	ldr	r1, [pc, #528]	; 13b60 <__assert_fail@plt+0x25ec>
   1394c:	ldr	r0, [pc, #528]	; 13b64 <__assert_fail@plt+0x25f0>
   13950:	bl	11574 <__assert_fail@plt>
   13954:	ldr	fp, [pc, #524]	; 13b68 <__assert_fail@plt+0x25f4>
   13958:	mov	r5, r0
   1395c:	cmp	r7, fp
   13960:	mov	r4, r1
   13964:	mov	r8, r3
   13968:	beq	13a44 <__assert_fail@plt+0x24d0>
   1396c:	ldr	r2, [r1, #16]
   13970:	add	r3, r3, r9
   13974:	add	r3, r3, r2
   13978:	ldr	r2, [r0, #12]
   1397c:	cmp	r3, r2
   13980:	bls	13a04 <__assert_fail@plt+0x2490>
   13984:	cmp	r6, #0
   13988:	bne	1399c <__assert_fail@plt+0x2428>
   1398c:	ldr	r2, [r1]
   13990:	ldr	r3, [r0, #28]
   13994:	cmp	r2, r3
   13998:	bne	139bc <__assert_fail@plt+0x2448>
   1399c:	ldr	r1, [pc, #456]	; 13b6c <__assert_fail@plt+0x25f8>
   139a0:	mov	r2, #5
   139a4:	mov	r0, #0
   139a8:	bl	11268 <dcgettext@plt>
   139ac:	mov	r1, #0
   139b0:	mov	r2, r0
   139b4:	mov	r0, #1
   139b8:	bl	11328 <error@plt>
   139bc:	ldr	r3, [r0, #24]
   139c0:	cmp	r3, #0
   139c4:	bne	139ec <__assert_fail@plt+0x2478>
   139c8:	ldr	r3, [r0]
   139cc:	cmp	r3, #0
   139d0:	beq	139f8 <__assert_fail@plt+0x2484>
   139d4:	ldr	r3, [r0, #36]	; 0x24
   139d8:	cmp	r3, #0
   139dc:	bne	139ec <__assert_fail@plt+0x2478>
   139e0:	ldr	r3, [r0, #40]	; 0x28
   139e4:	cmp	r3, #0
   139e8:	beq	139f8 <__assert_fail@plt+0x2484>
   139ec:	mov	r2, #5
   139f0:	ldr	r1, [pc, #376]	; 13b70 <__assert_fail@plt+0x25fc>
   139f4:	b	139a4 <__assert_fail@plt+0x2430>
   139f8:	mov	r1, r4
   139fc:	mov	r0, r5
   13a00:	bl	13d28 <__assert_fail@plt+0x27b4>
   13a04:	cmp	r6, #0
   13a08:	ldr	r2, [r4]
   13a0c:	bne	13a2c <__assert_fail@plt+0x24b8>
   13a10:	ldr	r1, [r5, #40]	; 0x28
   13a14:	cmp	r1, #0
   13a18:	beq	13a2c <__assert_fail@plt+0x24b8>
   13a1c:	ldr	r3, [r5, #28]
   13a20:	sub	r3, r2, r3
   13a24:	cmp	r1, r3
   13a28:	beq	13a38 <__assert_fail@plt+0x24c4>
   13a2c:	ldr	r3, [r5, #16]
   13a30:	cmp	r2, r3
   13a34:	bne	13a44 <__assert_fail@plt+0x24d0>
   13a38:	mov	r1, r4
   13a3c:	mov	r0, r5
   13a40:	bl	13d28 <__assert_fail@plt+0x27b4>
   13a44:	cmp	r6, #0
   13a48:	moveq	r3, #1
   13a4c:	streq	r3, [r4, #28]
   13a50:	ldr	r1, [r4, #8]
   13a54:	ldr	r3, [r4]
   13a58:	cmp	r3, r1
   13a5c:	bcc	13a80 <__assert_fail@plt+0x250c>
   13a60:	ldr	r0, [r4, #4]
   13a64:	cmp	r0, #0
   13a68:	bne	13b44 <__assert_fail@plt+0x25d0>
   13a6c:	mov	r3, #64	; 0x40
   13a70:	str	r3, [r4, #8]
   13a74:	mov	r0, #256	; 0x100
   13a78:	bl	17e68 <__assert_fail@plt+0x68f4>
   13a7c:	str	r0, [r4, #4]
   13a80:	ldr	r3, [r4]
   13a84:	ldr	r1, [r4, #4]
   13a88:	add	r2, r3, #1
   13a8c:	cmp	r7, fp
   13a90:	str	r2, [r4]
   13a94:	moveq	r2, #0
   13a98:	streq	r2, [r1, r3, lsl #2]
   13a9c:	beq	13b34 <__assert_fail@plt+0x25c0>
   13aa0:	ldr	r0, [r4, #16]
   13aa4:	ldr	r2, [r4, #12]
   13aa8:	cmp	sl, #0
   13aac:	add	r2, r2, r0
   13ab0:	str	r2, [r1, r3, lsl #2]
   13ab4:	beq	13ad4 <__assert_fail@plt+0x2560>
   13ab8:	ldr	r3, [r4, #12]
   13abc:	mov	r1, sl
   13ac0:	add	r0, r3, r0
   13ac4:	bl	11304 <strcpy@plt>
   13ac8:	ldr	r3, [r4, #16]
   13acc:	add	r9, r3, r9
   13ad0:	str	r9, [r4, #16]
   13ad4:	ldr	r3, [r4, #16]
   13ad8:	ldr	r0, [r4, #12]
   13adc:	mov	r1, r7
   13ae0:	add	r0, r0, r3
   13ae4:	bl	11304 <strcpy@plt>
   13ae8:	ldr	r3, [r4, #16]
   13aec:	cmp	r6, #0
   13af0:	add	r8, r3, r8
   13af4:	str	r8, [r4, #16]
   13af8:	ldr	r2, [r4]
   13afc:	bne	13b1c <__assert_fail@plt+0x25a8>
   13b00:	ldr	r1, [r5, #40]	; 0x28
   13b04:	cmp	r1, #0
   13b08:	beq	13b1c <__assert_fail@plt+0x25a8>
   13b0c:	ldr	r3, [r5, #28]
   13b10:	sub	r3, r2, r3
   13b14:	cmp	r1, r3
   13b18:	beq	13b28 <__assert_fail@plt+0x25b4>
   13b1c:	ldr	r3, [r5, #16]
   13b20:	cmp	r2, r3
   13b24:	bne	13b34 <__assert_fail@plt+0x25c0>
   13b28:	mov	r1, r4
   13b2c:	mov	r0, r5
   13b30:	bl	13d28 <__assert_fail@plt+0x27b4>
   13b34:	cmp	r6, #0
   13b38:	ldrne	r3, [r4, #16]
   13b3c:	strne	r3, [r4, #20]
   13b40:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b44:	lsl	r3, r1, #1
   13b48:	str	r3, [r4, #8]
   13b4c:	lsl	r1, r1, #3
   13b50:	bl	17e94 <__assert_fail@plt+0x6920>
   13b54:	b	13a7c <__assert_fail@plt+0x2508>
   13b58:	andeq	sl, r1, pc, ror #26
   13b5c:	andeq	r0, r0, r5, asr r1
   13b60:	andeq	sl, r1, pc, ror #27
   13b64:	strdeq	sl, [r1], -sl	; <UNPREDICTABLE>
   13b68:	andeq	sl, r1, r6, lsl #28
   13b6c:	andeq	sl, r1, r2, lsl lr
   13b70:	andeq	sl, r1, sp, asr #28
   13b74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b78:	sub	sp, sp, #36	; 0x24
   13b7c:	mov	r5, r3
   13b80:	ldr	r3, [sp, #72]	; 0x48
   13b84:	ldr	r4, [pc, #404]	; 13d20 <__assert_fail@plt+0x27ac>
   13b88:	str	r3, [sp, #4]
   13b8c:	ldr	r3, [sp, #76]	; 0x4c
   13b90:	mov	r9, r0
   13b94:	str	r3, [sp, #8]
   13b98:	ldr	r3, [sp, #80]	; 0x50
   13b9c:	ldr	r0, [r0, #12]
   13ba0:	str	r3, [sp, #24]
   13ba4:	ldr	r3, [sp, #84]	; 0x54
   13ba8:	str	r1, [sp, #20]
   13bac:	str	r3, [sp, #12]
   13bb0:	ldr	r3, [sp, #88]	; 0x58
   13bb4:	mov	r6, r2
   13bb8:	str	r3, [sp, #28]
   13bbc:	ldr	r3, [r4]
   13bc0:	sub	r7, r0, #1
   13bc4:	cmp	r3, #0
   13bc8:	bne	13bd8 <__assert_fail@plt+0x2664>
   13bcc:	add	r0, r0, #1
   13bd0:	bl	17e68 <__assert_fail@plt+0x68f4>
   13bd4:	str	r0, [r4]
   13bd8:	ldr	sl, [r4]
   13bdc:	ldr	r3, [sp, #12]
   13be0:	ldr	r2, [sp, #8]
   13be4:	mov	r4, sl
   13be8:	add	r3, r3, r2
   13bec:	str	r3, [sp, #16]
   13bf0:	ldr	r1, [r9, #24]
   13bf4:	mov	r0, r6
   13bf8:	bl	1568c <__assert_fail@plt+0x4118>
   13bfc:	subs	fp, r0, #0
   13c00:	beq	13cf4 <__assert_fail@plt+0x2780>
   13c04:	sub	r8, fp, r6
   13c08:	cmp	r7, r8
   13c0c:	bhi	13cc4 <__assert_fail@plt+0x2750>
   13c10:	ldrb	r2, [r6]
   13c14:	cmp	r2, #0
   13c18:	beq	13c94 <__assert_fail@plt+0x2720>
   13c1c:	mov	r2, #5
   13c20:	ldr	r1, [pc, #252]	; 13d24 <__assert_fail@plt+0x27b0>
   13c24:	mov	r0, #0
   13c28:	bl	11268 <dcgettext@plt>
   13c2c:	mov	r1, #0
   13c30:	mov	r2, r0
   13c34:	mov	r0, #1
   13c38:	bl	11328 <error@plt>
   13c3c:	ldr	r3, [sp, #16]
   13c40:	sub	r7, r7, r3
   13c44:	ldr	r3, [sp, #4]
   13c48:	cmp	r3, #0
   13c4c:	beq	13c64 <__assert_fail@plt+0x26f0>
   13c50:	mov	r1, r3
   13c54:	mov	r0, r4
   13c58:	bl	11304 <strcpy@plt>
   13c5c:	ldr	r3, [sp, #8]
   13c60:	add	r4, r4, r3
   13c64:	mov	r0, r4
   13c68:	ldr	r1, [sp, #24]
   13c6c:	bl	11304 <strcpy@plt>
   13c70:	ldr	r3, [sp, #12]
   13c74:	add	r4, r4, r3
   13c78:	ldr	r3, [r9, #20]
   13c7c:	add	r6, fp, r3
   13c80:	sub	r5, r5, r3
   13c84:	ldrb	r3, [r6]
   13c88:	cmp	r3, #0
   13c8c:	bne	13bf0 <__assert_fail@plt+0x267c>
   13c90:	b	13c10 <__assert_fail@plt+0x269c>
   13c94:	ldr	r3, [sp, #28]
   13c98:	strb	r2, [r4], #1
   13c9c:	ldr	r1, [sp, #20]
   13ca0:	str	r3, [sp, #80]	; 0x50
   13ca4:	str	r2, [sp, #76]	; 0x4c
   13ca8:	str	r2, [sp, #72]	; 0x48
   13cac:	sub	r3, r4, sl
   13cb0:	mov	r2, sl
   13cb4:	mov	r0, r9
   13cb8:	add	sp, sp, #36	; 0x24
   13cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cc0:	b	13928 <__assert_fail@plt+0x23b4>
   13cc4:	mov	r0, r4
   13cc8:	mov	r2, r8
   13ccc:	mov	r1, r6
   13cd0:	bl	11424 <strncpy@plt>
   13cd4:	ldr	r3, [sp, #16]
   13cd8:	sub	r7, r7, r8
   13cdc:	cmp	r3, r7
   13ce0:	add	r4, r4, r8
   13ce4:	sub	r5, r5, r8
   13ce8:	bcc	13c3c <__assert_fail@plt+0x26c8>
   13cec:	mov	r6, fp
   13cf0:	b	13c10 <__assert_fail@plt+0x269c>
   13cf4:	cmp	r5, r7
   13cf8:	bcs	13c10 <__assert_fail@plt+0x269c>
   13cfc:	mov	r2, r5
   13d00:	mov	r1, r6
   13d04:	mov	r0, r4
   13d08:	sub	r7, r7, r5
   13d0c:	add	r4, r4, r5
   13d10:	add	r6, r6, r5
   13d14:	bl	11424 <strncpy@plt>
   13d18:	mov	r5, #0
   13d1c:	b	13c84 <__assert_fail@plt+0x2710>
   13d20:	muleq	r2, r8, r2
   13d24:	andeq	sl, r1, r4, ror #28
   13d28:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   13d2c:	mov	r3, #0
   13d30:	mov	r5, r1
   13d34:	str	r3, [sp, #8]
   13d38:	str	r3, [sp, #4]
   13d3c:	str	r3, [sp]
   13d40:	ldr	r2, [pc, #612]	; 13fac <__assert_fail@plt+0x2a38>
   13d44:	mov	r9, r0
   13d48:	bl	13928 <__assert_fail@plt+0x23b4>
   13d4c:	ldr	r3, [r5]
   13d50:	cmp	r3, #0
   13d54:	bne	13d6c <__assert_fail@plt+0x27f8>
   13d58:	ldr	r3, [pc, #592]	; 13fb0 <__assert_fail@plt+0x2a3c>
   13d5c:	ldr	r2, [pc, #592]	; 13fb4 <__assert_fail@plt+0x2a40>
   13d60:	ldr	r1, [pc, #592]	; 13fb8 <__assert_fail@plt+0x2a44>
   13d64:	ldr	r0, [pc, #592]	; 13fbc <__assert_fail@plt+0x2a48>
   13d68:	bl	11574 <__assert_fail@plt>
   13d6c:	ldr	r2, [r5, #4]
   13d70:	sub	r3, r3, #-1073741823	; 0xc0000001
   13d74:	ldr	r7, [r2, r3, lsl #2]
   13d78:	lsl	r0, r3, #2
   13d7c:	cmp	r7, #0
   13d80:	ldrne	r3, [pc, #552]	; 13fb0 <__assert_fail@plt+0x2a3c>
   13d84:	ldrne	r2, [pc, #564]	; 13fc0 <__assert_fail@plt+0x2a4c>
   13d88:	ldrne	r1, [pc, #552]	; 13fb8 <__assert_fail@plt+0x2a44>
   13d8c:	ldrne	r0, [pc, #560]	; 13fc4 <__assert_fail@plt+0x2a50>
   13d90:	bne	13d68 <__assert_fail@plt+0x27f4>
   13d94:	add	r0, r0, #8
   13d98:	bl	17e68 <__assert_fail@plt+0x68f4>
   13d9c:	ldr	r4, [r5]
   13da0:	mov	r8, r0
   13da4:	ldr	r0, [r9, #28]
   13da8:	mov	r3, r8
   13dac:	lsl	r1, r0, #2
   13db0:	add	r2, r8, r1
   13db4:	cmp	r3, r2
   13db8:	bne	13e04 <__assert_fail@plt+0x2890>
   13dbc:	add	r2, r7, r0
   13dc0:	ldr	ip, [r5]
   13dc4:	rsb	r2, r8, r2, lsl #2
   13dc8:	sub	r2, r2, r1
   13dcc:	mov	r6, r0
   13dd0:	add	r1, r7, r6
   13dd4:	cmp	ip, r1
   13dd8:	cmphi	r4, r6
   13ddc:	movhi	r1, #1
   13de0:	movls	r1, #0
   13de4:	bhi	13e18 <__assert_fail@plt+0x28a4>
   13de8:	cmp	r0, r6
   13dec:	bls	13e30 <__assert_fail@plt+0x28bc>
   13df0:	ldr	r3, [pc, #464]	; 13fc8 <__assert_fail@plt+0x2a54>
   13df4:	mov	r2, #242	; 0xf2
   13df8:	ldr	r1, [pc, #440]	; 13fb8 <__assert_fail@plt+0x2a44>
   13dfc:	ldr	r0, [pc, #456]	; 13fcc <__assert_fail@plt+0x2a58>
   13e00:	b	13d68 <__assert_fail@plt+0x27f4>
   13e04:	ldr	lr, [r5, #4]
   13e08:	sub	ip, r3, r8
   13e0c:	ldr	ip, [lr, ip]
   13e10:	str	ip, [r3], #4
   13e14:	b	13db4 <__assert_fail@plt+0x2840>
   13e18:	ldr	r1, [r5, #4]
   13e1c:	add	r6, r6, #1
   13e20:	add	r1, r1, r2
   13e24:	ldr	r1, [r1, r3]
   13e28:	str	r1, [r3], #4
   13e2c:	b	13dd0 <__assert_fail@plt+0x285c>
   13e30:	str	r1, [r8, r6, lsl #2]
   13e34:	ldr	sl, [r9, #32]
   13e38:	mov	r2, r6
   13e3c:	mov	r3, r8
   13e40:	ldr	r1, [r5, #24]
   13e44:	mov	r0, r9
   13e48:	blx	sl
   13e4c:	ldr	r2, [r9, #28]
   13e50:	subs	sl, r0, #0
   13e54:	beq	13f0c <__assert_fail@plt+0x2998>
   13e58:	ldr	r3, [r5, #36]	; 0x24
   13e5c:	mov	r1, r2
   13e60:	cmp	r4, r3
   13e64:	strhi	r4, [r5, #36]	; 0x24
   13e68:	ldr	r0, [r5, #36]	; 0x24
   13e6c:	cmp	r0, #0
   13e70:	beq	13e80 <__assert_fail@plt+0x290c>
   13e74:	ldr	r3, [r5, #40]	; 0x28
   13e78:	cmp	r0, r3
   13e7c:	bcc	13e90 <__assert_fail@plt+0x291c>
   13e80:	cmn	r4, #1
   13e84:	beq	13fa0 <__assert_fail@plt+0x2a2c>
   13e88:	add	r4, r4, #1
   13e8c:	b	13ea0 <__assert_fail@plt+0x292c>
   13e90:	sub	r3, r3, r0
   13e94:	lsrs	r3, r3, #1
   13e98:	addne	r4, r4, r3
   13e9c:	beq	13e88 <__assert_fail@plt+0x2914>
   13ea0:	cmp	r1, #0
   13ea4:	beq	13eb8 <__assert_fail@plt+0x2944>
   13ea8:	add	r3, r1, #1
   13eac:	cmp	r3, r4
   13eb0:	bcc	13ec0 <__assert_fail@plt+0x294c>
   13eb4:	mov	r4, r3
   13eb8:	cmp	r4, #0
   13ebc:	moveq	r4, #1
   13ec0:	sub	r7, r7, r1
   13ec4:	add	r7, r6, r7
   13ec8:	ldr	r3, [r5]
   13ecc:	add	r1, r7, #1
   13ed0:	sub	r2, r3, r2
   13ed4:	cmp	r1, r2
   13ed8:	bcc	13da4 <__assert_fail@plt+0x2830>
   13edc:	mov	r0, r8
   13ee0:	bl	18980 <__assert_fail@plt+0x740c>
   13ee4:	ldr	r3, [r9, #28]
   13ee8:	str	r3, [r5]
   13eec:	ldr	r3, [r5, #20]
   13ef0:	str	r3, [r5, #16]
   13ef4:	mov	r3, #0
   13ef8:	str	r3, [r5, #28]
   13efc:	mvn	r3, #0
   13f00:	str	r3, [r5, #32]
   13f04:	add	sp, sp, #16
   13f08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f0c:	add	ip, r2, #1
   13f10:	cmp	r4, ip
   13f14:	bhi	13f34 <__assert_fail@plt+0x29c0>
   13f18:	mov	r2, #5
   13f1c:	ldr	r1, [pc, #172]	; 13fd0 <__assert_fail@plt+0x2a5c>
   13f20:	bl	11268 <dcgettext@plt>
   13f24:	mov	r1, sl
   13f28:	mov	r2, r0
   13f2c:	mov	r0, #1
   13f30:	bl	11328 <error@plt>
   13f34:	ldr	r1, [r5, #40]	; 0x28
   13f38:	clz	r3, r1
   13f3c:	lsr	r3, r3, #5
   13f40:	cmp	r4, r1
   13f44:	orrcc	r3, r3, #1
   13f48:	ldr	r1, [r5, #36]	; 0x24
   13f4c:	cmp	r3, #0
   13f50:	strne	r4, [r5, #40]	; 0x28
   13f54:	cmp	r1, #0
   13f58:	beq	13f68 <__assert_fail@plt+0x29f4>
   13f5c:	ldr	r3, [r5, #40]	; 0x28
   13f60:	cmp	r1, r3
   13f64:	bcc	13f8c <__assert_fail@plt+0x2a18>
   13f68:	lsr	r4, r4, #1
   13f6c:	cmp	r2, #0
   13f70:	beq	13f80 <__assert_fail@plt+0x2a0c>
   13f74:	cmp	ip, r4
   13f78:	bcc	13ec8 <__assert_fail@plt+0x2954>
   13f7c:	mov	r4, ip
   13f80:	cmp	r4, #0
   13f84:	moveq	r4, #1
   13f88:	b	13ec8 <__assert_fail@plt+0x2954>
   13f8c:	sub	r3, r3, r1
   13f90:	lsrs	r3, r3, #1
   13f94:	subne	r4, r4, r3
   13f98:	subeq	r4, r4, #1
   13f9c:	b	13f6c <__assert_fail@plt+0x29f8>
   13fa0:	cmp	r1, #0
   13fa4:	bne	13ea8 <__assert_fail@plt+0x2934>
   13fa8:	b	13ec0 <__assert_fail@plt+0x294c>
   13fac:	andeq	sl, r1, r6, lsl #28
   13fb0:	andeq	sl, r1, fp, ror sp
   13fb4:	andeq	r0, r0, r5, lsl #2
   13fb8:	andeq	sl, r1, pc, ror #27
   13fbc:	andeq	sl, r1, r5, ror lr
   13fc0:	andeq	r0, r0, r6, lsl #2
   13fc4:	andeq	sl, r1, r9, lsl #29
   13fc8:	andeq	sl, r1, r6, lsl #27
   13fcc:			; <UNDEFINED> instruction: 0x0001aeb4
   13fd0:	ldrdeq	sl, [r1], -r1
   13fd4:	push	{r4, lr}
   13fd8:	mov	r0, #0
   13fdc:	bl	11274 <sysconf@plt>
   13fe0:	cmp	r0, #0
   13fe4:	mvnle	r0, #-2147483648	; 0x80000000
   13fe8:	pop	{r4, pc}
   13fec:	ldr	r3, [pc, #48]	; 14024 <__assert_fail@plt+0x2ab0>
   13ff0:	push	{r4, r5, r6, lr}
   13ff4:	mov	r5, #0
   13ff8:	ldr	r4, [r3]
   13ffc:	sub	r4, r4, #4
   14000:	ldr	r0, [r4, #4]!
   14004:	cmp	r0, #0
   14008:	bne	14014 <__assert_fail@plt+0x2aa0>
   1400c:	mov	r0, r5
   14010:	pop	{r4, r5, r6, pc}
   14014:	bl	113c4 <strlen@plt>
   14018:	add	r0, r0, #1
   1401c:	add	r5, r5, r0
   14020:	b	14000 <__assert_fail@plt+0x2a8c>
   14024:			; <UNDEFINED> instruction: 0x0002c1bc
   14028:	push	{r4, r5, r6, lr}
   1402c:	mov	r4, r0
   14030:	mov	r6, r1
   14034:	bl	13fec <__assert_fail@plt+0x2a78>
   14038:	mov	r3, #4096	; 0x1000
   1403c:	str	r3, [r4, #8]
   14040:	mov	r5, r0
   14044:	bl	13fd4 <__assert_fail@plt+0x2a60>
   14048:	mov	r3, #0
   1404c:	str	r3, [r4]
   14050:	cmp	r5, r0
   14054:	str	r0, [r4, #4]
   14058:	bhi	140c4 <__assert_fail@plt+0x2b50>
   1405c:	add	r2, r5, r6
   14060:	cmp	r0, r2
   14064:	bls	140cc <__assert_fail@plt+0x2b58>
   14068:	sub	r0, r0, r5
   1406c:	sub	r1, r0, r6
   14070:	str	r1, [r4, #4]
   14074:	lsr	r2, r1, #2
   14078:	sub	r2, r2, #2
   1407c:	cmp	r2, r3
   14080:	str	r2, [r4, #16]
   14084:	bne	1409c <__assert_fail@plt+0x2b28>
   14088:	ldr	r3, [pc, #68]	; 140d4 <__assert_fail@plt+0x2b60>
   1408c:	ldr	r2, [pc, #68]	; 140d8 <__assert_fail@plt+0x2b64>
   14090:	ldr	r1, [pc, #68]	; 140dc <__assert_fail@plt+0x2b68>
   14094:	ldr	r0, [pc, #68]	; 140e0 <__assert_fail@plt+0x2b6c>
   14098:	bl	11574 <__assert_fail@plt>
   1409c:	ldr	r2, [pc, #64]	; 140e4 <__assert_fail@plt+0x2b70>
   140a0:	str	r3, [r4, #20]
   140a4:	str	r3, [r4, #24]
   140a8:	str	r3, [r4, #28]
   140ac:	str	r2, [r4, #32]
   140b0:	str	r3, [r4, #36]	; 0x24
   140b4:	str	r3, [r4, #40]	; 0x28
   140b8:	str	r1, [r4, #12]
   140bc:	mov	r0, r3
   140c0:	pop	{r4, r5, r6, pc}
   140c4:	mov	r0, #1
   140c8:	pop	{r4, r5, r6, pc}
   140cc:	mov	r0, #2
   140d0:	pop	{r4, r5, r6, pc}
   140d4:	muleq	r1, r0, sp
   140d8:	andeq	r0, r0, r6, lsl #4
   140dc:	andeq	sl, r1, pc, ror #27
   140e0:	andeq	sl, r1, r5, lsl #30
   140e4:	muleq	r1, r8, r8
   140e8:	ldr	r3, [r0, #4]
   140ec:	cmp	r3, #131072	; 0x20000
   140f0:	bcs	140fc <__assert_fail@plt+0x2b88>
   140f4:	str	r3, [r0, #12]
   140f8:	bx	lr
   140fc:	ldr	r3, [r0, #8]
   14100:	cmp	r3, #131072	; 0x20000
   14104:	movls	r3, #131072	; 0x20000
   14108:	b	140f4 <__assert_fail@plt+0x2b80>
   1410c:	ldr	r0, [r0, #12]
   14110:	ldr	r3, [pc, #104]	; 14180 <__assert_fail@plt+0x2c0c>
   14114:	push	{r4, r5, r6, lr}
   14118:	cmp	r0, r3
   1411c:	mov	r5, #0
   14120:	str	r5, [r1]
   14124:	str	r5, [r1, #16]
   14128:	str	r5, [r1, #4]
   1412c:	str	r5, [r1, #8]
   14130:	str	r5, [r1, #36]	; 0x24
   14134:	str	r5, [r1, #40]	; 0x28
   14138:	bls	14150 <__assert_fail@plt+0x2bdc>
   1413c:	ldr	r3, [pc, #64]	; 14184 <__assert_fail@plt+0x2c10>
   14140:	mov	r2, #572	; 0x23c
   14144:	ldr	r1, [pc, #60]	; 14188 <__assert_fail@plt+0x2c14>
   14148:	ldr	r0, [pc, #60]	; 1418c <__assert_fail@plt+0x2c18>
   1414c:	bl	11574 <__assert_fail@plt>
   14150:	add	r0, r0, #1
   14154:	mov	r4, r1
   14158:	mov	r6, r2
   1415c:	bl	17e68 <__assert_fail@plt+0x68f4>
   14160:	mvn	r3, #0
   14164:	str	r5, [r4, #20]
   14168:	str	r5, [r4, #16]
   1416c:	str	r5, [r4, #28]
   14170:	str	r3, [r4, #32]
   14174:	str	r6, [r4, #24]
   14178:	str	r0, [r4, #12]
   1417c:	pop	{r4, r5, r6, pc}
   14180:	svcvc	0x00fff7ff
   14184:	andeq	sl, r1, r4, lsr #27
   14188:	andeq	sl, r1, pc, ror #27
   1418c:	andeq	sl, r1, ip, lsl pc
   14190:	ldr	r3, [r0, #28]
   14194:	str	r3, [r1]
   14198:	ldr	r3, [r1, #20]
   1419c:	str	r3, [r1, #16]
   141a0:	mov	r3, #0
   141a4:	str	r3, [r1, #28]
   141a8:	mvn	r3, #0
   141ac:	str	r3, [r1, #32]
   141b0:	bx	lr
   141b4:	push	{r4, r5, r6, lr}
   141b8:	mov	r4, #0
   141bc:	mov	r6, r0
   141c0:	mov	r5, r4
   141c4:	ldr	r0, [r6, r4, lsl #2]
   141c8:	cmp	r0, #0
   141cc:	bne	141fc <__assert_fail@plt+0x2c88>
   141d0:	mov	r1, r4
   141d4:	ldr	r0, [pc, #56]	; 14214 <__assert_fail@plt+0x2ca0>
   141d8:	bl	138a0 <__assert_fail@plt+0x232c>
   141dc:	cmp	r0, #0
   141e0:	bne	1420c <__assert_fail@plt+0x2c98>
   141e4:	mov	r1, r5
   141e8:	ldr	r0, [pc, #40]	; 14218 <__assert_fail@plt+0x2ca4>
   141ec:	bl	138a0 <__assert_fail@plt+0x232c>
   141f0:	adds	r0, r0, #0
   141f4:	movne	r0, #1
   141f8:	pop	{r4, r5, r6, pc}
   141fc:	bl	113c4 <strlen@plt>
   14200:	add	r4, r4, #1
   14204:	add	r5, r5, r0
   14208:	b	141c4 <__assert_fail@plt+0x2c50>
   1420c:	mov	r0, #1
   14210:	pop	{r4, r5, r6, pc}
   14214:	andeq	sl, r1, pc, lsr pc
   14218:	andeq	sl, r1, r4, ror #30
   1421c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14220:	ldr	r0, [pc, #192]	; 142e8 <__assert_fail@plt+0x2d74>
   14224:	bl	14c78 <__assert_fail@plt+0x3704>
   14228:	subs	r7, r0, #0
   1422c:	beq	1429c <__assert_fail@plt+0x2d28>
   14230:	bl	113f4 <__errno_location@plt>
   14234:	mov	r6, #0
   14238:	mvn	r5, #0
   1423c:	mov	r8, r6
   14240:	mov	sl, #1
   14244:	mov	r9, r0
   14248:	str	r8, [r9]
   1424c:	mov	r0, r7
   14250:	bl	114d8 <readdir64@plt>
   14254:	subs	r4, r0, #0
   14258:	bne	142a8 <__assert_fail@plt+0x2d34>
   1425c:	ldr	r8, [r9]
   14260:	cmp	r8, #0
   14264:	beq	1428c <__assert_fail@plt+0x2d18>
   14268:	ldr	r2, [pc, #120]	; 142e8 <__assert_fail@plt+0x2d74>
   1426c:	mov	r1, #8
   14270:	bl	17654 <__assert_fail@plt+0x60e0>
   14274:	ldr	r2, [pc, #112]	; 142ec <__assert_fail@plt+0x2d78>
   14278:	mov	r1, r8
   1427c:	mov	r6, r4
   14280:	mov	r3, r0
   14284:	mov	r0, r4
   14288:	bl	11328 <error@plt>
   1428c:	mov	r0, r7
   14290:	bl	11568 <closedir@plt>
   14294:	cmp	r6, #0
   14298:	bne	142a0 <__assert_fail@plt+0x2d2c>
   1429c:	mvn	r5, #0
   142a0:	mov	r0, r5
   142a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   142a8:	ldrb	r3, [r4, #19]
   142ac:	cmp	r3, #46	; 0x2e
   142b0:	bne	142cc <__assert_fail@plt+0x2d58>
   142b4:	ldrb	r3, [r4, #20]
   142b8:	cmp	r3, #0
   142bc:	beq	14248 <__assert_fail@plt+0x2cd4>
   142c0:	ldrh	r3, [r4, #20]
   142c4:	cmp	r3, #46	; 0x2e
   142c8:	beq	14248 <__assert_fail@plt+0x2cd4>
   142cc:	mov	r1, r8
   142d0:	add	r0, r4, #19
   142d4:	bl	14770 <__assert_fail@plt+0x31fc>
   142d8:	mov	r6, sl
   142dc:	cmp	r5, r0
   142e0:	movlt	r5, r0
   142e4:	b	14248 <__assert_fail@plt+0x2cd4>
   142e8:	andeq	sl, r1, r3, lsr #31
   142ec:	andeq	fp, r1, lr, ror #1
   142f0:	push	{r0, r1, r2, r3, r4, lr}
   142f4:	mov	r0, #4
   142f8:	bl	11274 <sysconf@plt>
   142fc:	mov	r1, sp
   14300:	cmn	r0, #1
   14304:	movne	r4, r0
   14308:	mov	r0, #7
   1430c:	moveq	r4, #20
   14310:	bl	1128c <getrlimit64@plt>
   14314:	cmp	r0, #0
   14318:	movne	r0, r4
   1431c:	bne	14338 <__assert_fail@plt+0x2dc4>
   14320:	ldrd	r0, [sp]
   14324:	mvn	r3, #0
   14328:	mvn	r2, #0
   1432c:	cmp	r1, r3
   14330:	cmpeq	r0, r2
   14334:	moveq	r0, r4
   14338:	add	sp, sp, #16
   1433c:	pop	{r4, pc}
   14340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14344:	mov	r5, #0
   14348:	sub	sp, sp, #524	; 0x20c
   1434c:	mov	r6, r0
   14350:	mov	r8, r1
   14354:	mov	r9, r2
   14358:	mov	sl, #5
   1435c:	mov	r7, r5
   14360:	cmp	r6, r5
   14364:	movle	r0, #0
   14368:	ble	14408 <__assert_fail@plt+0x2e94>
   1436c:	sub	r4, r6, r5
   14370:	cmp	r4, #64	; 0x40
   14374:	add	r3, sp, #8
   14378:	movge	r4, #64	; 0x40
   1437c:	mov	r2, #0
   14380:	mov	fp, r3
   14384:	cmp	r2, r4
   14388:	add	r3, r3, #8
   1438c:	blt	143bc <__assert_fail@plt+0x2e48>
   14390:	mov	r2, r7
   14394:	mov	r1, r4
   14398:	mov	r0, fp
   1439c:	bl	112c8 <poll@plt>
   143a0:	cmn	r0, #1
   143a4:	beq	14408 <__assert_fail@plt+0x2e94>
   143a8:	mov	r3, #0
   143ac:	cmp	r3, r4
   143b0:	blt	143d4 <__assert_fail@plt+0x2e60>
   143b4:	add	r5, r5, r4
   143b8:	b	14360 <__assert_fail@plt+0x2dec>
   143bc:	add	r1, r5, r2
   143c0:	strh	sl, [r3, #-4]
   143c4:	strh	r7, [r3, #-2]
   143c8:	str	r1, [r3, #-8]
   143cc:	add	r2, r2, #1
   143d0:	b	14384 <__assert_fail@plt+0x2e10>
   143d4:	add	r2, fp, r3, lsl #3
   143d8:	ldrsh	r2, [r2, #6]
   143dc:	cmp	r2, #32
   143e0:	bne	143ec <__assert_fail@plt+0x2e78>
   143e4:	add	r3, r3, #1
   143e8:	b	143ac <__assert_fail@plt+0x2e38>
   143ec:	ldr	r0, [fp, r3, lsl #3]
   143f0:	mov	r1, r9
   143f4:	str	r3, [sp, #4]
   143f8:	blx	r8
   143fc:	ldr	r3, [sp, #4]
   14400:	cmp	r0, #0
   14404:	beq	143e4 <__assert_fail@plt+0x2e70>
   14408:	add	sp, sp, #524	; 0x20c
   1440c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14410:	push	{r4, r5, r6, lr}
   14414:	mov	r4, r1
   14418:	mov	r1, #1
   1441c:	mov	r5, r0
   14420:	bl	18730 <__assert_fail@plt+0x71bc>
   14424:	tst	r0, #1
   14428:	ldreq	r2, [r4, #4]
   1442c:	beq	14450 <__assert_fail@plt+0x2edc>
   14430:	mov	r0, #0
   14434:	pop	{r4, r5, r6, pc}
   14438:	ldr	r1, [r4]
   1443c:	ldr	r1, [r1, r3, lsl #2]
   14440:	cmp	r5, r1
   14444:	ble	14460 <__assert_fail@plt+0x2eec>
   14448:	add	r3, r3, #1
   1444c:	str	r3, [r4, #8]
   14450:	ldr	r3, [r4, #8]
   14454:	cmp	r3, r2
   14458:	bcc	14438 <__assert_fail@plt+0x2ec4>
   1445c:	b	14464 <__assert_fail@plt+0x2ef0>
   14460:	beq	14430 <__assert_fail@plt+0x2ebc>
   14464:	str	r5, [r4, #12]
   14468:	mvn	r0, #0
   1446c:	pop	{r4, r5, r6, pc}
   14470:	push	{r4, r5, r6, lr}
   14474:	mov	r4, r1
   14478:	mov	r1, #1
   1447c:	mov	r6, r0
   14480:	bl	18730 <__assert_fail@plt+0x71bc>
   14484:	ands	r5, r0, #1
   14488:	movne	r5, #0
   1448c:	bne	144c8 <__assert_fail@plt+0x2f54>
   14490:	ldr	r1, [r4, #4]
   14494:	add	r2, r4, #8
   14498:	add	r1, r1, #1
   1449c:	ldr	r0, [r4]
   144a0:	lsl	r1, r1, #2
   144a4:	bl	148dc <__assert_fail@plt+0x3368>
   144a8:	cmp	r0, #0
   144ac:	strne	r0, [r4]
   144b0:	ldrne	r3, [r4, #4]
   144b4:	mvneq	r5, #0
   144b8:	strne	r6, [r0, r3, lsl #2]
   144bc:	ldrne	r3, [r4, #4]
   144c0:	addne	r3, r3, #1
   144c4:	strne	r3, [r4, #4]
   144c8:	mov	r0, r5
   144cc:	pop	{r4, r5, r6, pc}
   144d0:	push	{r0, r1, r2, r3, r4, lr}
   144d4:	bl	1421c <__assert_fail@plt+0x2ca8>
   144d8:	cmp	r0, #0
   144dc:	bge	144e4 <__assert_fail@plt+0x2f70>
   144e0:	bl	142f0 <__assert_fail@plt+0x2d7c>
   144e4:	cmn	r0, #-2147483647	; 0x80000001
   144e8:	mov	r3, #0
   144ec:	add	r2, sp, #4
   144f0:	addne	r0, r0, #1
   144f4:	ldr	r1, [pc, #40]	; 14524 <__assert_fail@plt+0x2fb0>
   144f8:	str	r3, [sp, #4]
   144fc:	str	r3, [sp, #12]
   14500:	str	r3, [sp, #8]
   14504:	bl	14340 <__assert_fail@plt+0x2dcc>
   14508:	ldr	r3, [pc, #24]	; 14528 <__assert_fail@plt+0x2fb4>
   1450c:	ldr	r2, [sp, #4]
   14510:	str	r2, [r3]
   14514:	ldr	r2, [sp, #8]
   14518:	str	r2, [r3, #4]
   1451c:	add	sp, sp, #20
   14520:	pop	{pc}		; (ldr pc, [sp], #4)
   14524:	andeq	r4, r1, r0, ror r4
   14528:	muleq	r2, ip, r2
   1452c:	push	{r1, r2, r3}
   14530:	push	{r0, r1, r4, r5, r6, r7, r8, r9, lr}
   14534:	mov	r8, r0
   14538:	ldr	r4, [pc, #144]	; 145d0 <__assert_fail@plt+0x305c>
   1453c:	ldr	r6, [sp, #36]	; 0x24
   14540:	ldrb	r7, [r4, #8]
   14544:	ands	r5, r6, #64	; 0x40
   14548:	addne	r3, sp, #40	; 0x28
   1454c:	strne	r3, [sp, #4]
   14550:	ldrne	r5, [sp, #40]	; 0x28
   14554:	cmp	r7, #0
   14558:	bne	14590 <__assert_fail@plt+0x301c>
   1455c:	mov	r1, #524288	; 0x80000
   14560:	ldr	r0, [pc, #108]	; 145d4 <__assert_fail@plt+0x3060>
   14564:	bl	14cf8 <__assert_fail@plt+0x3784>
   14568:	subs	r9, r0, #0
   1456c:	blt	14584 <__assert_fail@plt+0x3010>
   14570:	mov	r1, #1
   14574:	bl	18730 <__assert_fail@plt+0x71bc>
   14578:	and	r7, r0, #1
   1457c:	mov	r0, r9
   14580:	bl	1155c <close@plt>
   14584:	mov	r3, #1
   14588:	strb	r7, [r4, #9]
   1458c:	strb	r3, [r4, #8]
   14590:	mov	r2, r5
   14594:	orr	r1, r6, #524288	; 0x80000
   14598:	mov	r0, r8
   1459c:	bl	14cf8 <__assert_fail@plt+0x3784>
   145a0:	subs	r5, r0, #0
   145a4:	blt	145bc <__assert_fail@plt+0x3048>
   145a8:	ldrb	r3, [r4, #9]
   145ac:	cmp	r3, #0
   145b0:	bne	145bc <__assert_fail@plt+0x3048>
   145b4:	mov	r1, #1
   145b8:	bl	149e0 <__assert_fail@plt+0x346c>
   145bc:	mov	r0, r5
   145c0:	add	sp, sp, #8
   145c4:	pop	{r4, r5, r6, r7, r8, r9, lr}
   145c8:	add	sp, sp, #12
   145cc:	bx	lr
   145d0:	muleq	r2, ip, r2
   145d4:	andeq	fp, r1, r4, lsr #13
   145d8:	push	{r4, lr}
   145dc:	ldr	r4, [pc, #20]	; 145f8 <__assert_fail@plt+0x3084>
   145e0:	ldr	r0, [r4]
   145e4:	bl	18980 <__assert_fail@plt+0x740c>
   145e8:	mov	r3, #0
   145ec:	str	r3, [r4]
   145f0:	str	r3, [r4, #4]
   145f4:	pop	{r4, pc}
   145f8:	muleq	r2, ip, r2
   145fc:	push	{r4, lr}
   14600:	ldr	r0, [pc, #12]	; 14614 <__assert_fail@plt+0x30a0>
   14604:	bl	1134c <getenv@plt>
   14608:	adds	r0, r0, #0
   1460c:	movne	r0, #1
   14610:	pop	{r4, pc}
   14614:			; <UNDEFINED> instruction: 0x0001afb1
   14618:	ldr	r3, [pc, #148]	; 146b4 <__assert_fail@plt+0x3140>
   1461c:	push	{r4, r5, lr}
   14620:	sub	sp, sp, #20
   14624:	ldr	r5, [r3]
   14628:	ldr	r4, [r3, #4]
   1462c:	bl	1421c <__assert_fail@plt+0x2ca8>
   14630:	cmp	r0, #0
   14634:	bge	1463c <__assert_fail@plt+0x30c8>
   14638:	bl	142f0 <__assert_fail@plt+0x2d7c>
   1463c:	cmn	r0, #-2147483647	; 0x80000001
   14640:	addne	r0, r0, #1
   14644:	str	r4, [sp, #4]
   14648:	mvn	r3, #0
   1464c:	mov	r4, #0
   14650:	mov	r2, sp
   14654:	ldr	r1, [pc, #92]	; 146b8 <__assert_fail@plt+0x3144>
   14658:	str	r5, [sp]
   1465c:	str	r4, [sp, #8]
   14660:	str	r3, [sp, #12]
   14664:	bl	14340 <__assert_fail@plt+0x2dcc>
   14668:	ldr	r5, [sp, #12]
   1466c:	cmp	r5, r4
   14670:	blt	146ac <__assert_fail@plt+0x3138>
   14674:	mov	r2, #5
   14678:	ldr	r1, [pc, #60]	; 146bc <__assert_fail@plt+0x3148>
   1467c:	mov	r0, r4
   14680:	bl	11268 <dcgettext@plt>
   14684:	mov	r3, r5
   14688:	mov	r1, r4
   1468c:	mov	r2, r0
   14690:	mov	r0, r4
   14694:	bl	11328 <error@plt>
   14698:	ldr	r3, [pc, #32]	; 146c0 <__assert_fail@plt+0x314c>
   1469c:	mov	r2, #396	; 0x18c
   146a0:	ldr	r1, [pc, #28]	; 146c4 <__assert_fail@plt+0x3150>
   146a4:	ldr	r0, [pc, #28]	; 146c8 <__assert_fail@plt+0x3154>
   146a8:	bl	11574 <__assert_fail@plt>
   146ac:	add	sp, sp, #20
   146b0:	pop	{r4, r5, pc}
   146b4:	muleq	r2, ip, r2
   146b8:	andeq	r4, r1, r0, lsl r4
   146bc:	andeq	sl, r1, sp, asr #31
   146c0:	andeq	sl, r1, sl, lsl #31
   146c4:	andeq	fp, r1, r5, rrx
   146c8:	andeq	fp, r1, lr, rrx
   146cc:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   146d0:	mov	r5, r0
   146d4:	ldr	r3, [pc, #120]	; 14754 <__assert_fail@plt+0x31e0>
   146d8:	ldr	r0, [r3]
   146dc:	bl	188f4 <__assert_fail@plt+0x7380>
   146e0:	ldr	r3, [pc, #112]	; 14758 <__assert_fail@plt+0x31e4>
   146e4:	mov	r2, #5
   146e8:	ldr	r1, [pc, #108]	; 1475c <__assert_fail@plt+0x31e8>
   146ec:	ldr	r4, [r3]
   146f0:	ldr	r3, [pc, #104]	; 14760 <__assert_fail@plt+0x31ec>
   146f4:	mov	r0, #0
   146f8:	ldr	r6, [r3]
   146fc:	bl	11268 <dcgettext@plt>
   14700:	mov	r2, #5
   14704:	ldr	r1, [pc, #88]	; 14764 <__assert_fail@plt+0x31f0>
   14708:	mov	r7, r0
   1470c:	mov	r0, #0
   14710:	bl	11268 <dcgettext@plt>
   14714:	mov	r2, #5
   14718:	ldr	r1, [pc, #72]	; 14768 <__assert_fail@plt+0x31f4>
   1471c:	mov	r8, r0
   14720:	mov	r0, #0
   14724:	bl	11268 <dcgettext@plt>
   14728:	mov	r3, #0
   1472c:	str	r3, [sp, #12]
   14730:	stm	sp, {r7, r8}
   14734:	mov	r3, r6
   14738:	ldr	r2, [pc, #44]	; 1476c <__assert_fail@plt+0x31f8>
   1473c:	mov	r1, r5
   14740:	str	r0, [sp, #8]
   14744:	mov	r0, r4
   14748:	bl	17db8 <__assert_fail@plt+0x6844>
   1474c:	add	sp, sp, #16
   14750:	pop	{r4, r5, r6, r7, r8, pc}
   14754:	ldrdeq	ip, [r2], -r0
   14758:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   1475c:	andeq	fp, r1, r7, ror r0
   14760:	andeq	ip, r2, ip, ror #2
   14764:	andeq	fp, r1, r6, lsl #1
   14768:	muleq	r1, r5, r0
   1476c:	andeq	fp, r1, r2, lsr #1
   14770:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14774:	mov	r4, r0
   14778:	mov	r7, r1
   1477c:	bl	113f4 <__errno_location@plt>
   14780:	mov	r8, #0
   14784:	mov	r2, #10
   14788:	add	r1, sp, #12
   1478c:	str	r8, [r0]
   14790:	mov	r5, r0
   14794:	mov	r0, r4
   14798:	bl	111cc <strtol@plt>
   1479c:	sub	r3, r0, #-2147483647	; 0x80000001
   147a0:	cmn	r3, #3
   147a4:	bls	147bc <__assert_fail@plt+0x3248>
   147a8:	ldr	r1, [r5]
   147ac:	ldr	r2, [pc, #180]	; 14868 <__assert_fail@plt+0x32f4>
   147b0:	mov	r3, r4
   147b4:	mov	r0, #1
   147b8:	bl	11328 <error@plt>
   147bc:	ldr	r3, [sp, #12]
   147c0:	ldrb	r6, [r3]
   147c4:	cmp	r6, #0
   147c8:	beq	14820 <__assert_fail@plt+0x32ac>
   147cc:	mov	r2, #5
   147d0:	ldr	r1, [pc, #148]	; 1486c <__assert_fail@plt+0x32f8>
   147d4:	mov	r0, r8
   147d8:	ldr	r5, [r5]
   147dc:	bl	11268 <dcgettext@plt>
   147e0:	ldr	r2, [sp, #12]
   147e4:	mov	r1, r7
   147e8:	mov	r6, r0
   147ec:	mov	r0, r8
   147f0:	bl	17654 <__assert_fail@plt+0x60e0>
   147f4:	mov	r2, r4
   147f8:	mov	r1, r7
   147fc:	mov	r8, r0
   14800:	mov	r0, #1
   14804:	bl	17654 <__assert_fail@plt+0x60e0>
   14808:	mov	r3, r8
   1480c:	mov	r2, r6
   14810:	mov	r1, r5
   14814:	str	r0, [sp]
   14818:	mov	r0, #1
   1481c:	bl	11328 <error@plt>
   14820:	cmp	r4, r3
   14824:	bne	14860 <__assert_fail@plt+0x32ec>
   14828:	mov	r2, #5
   1482c:	ldr	r1, [pc, #60]	; 14870 <__assert_fail@plt+0x32fc>
   14830:	mov	r0, r6
   14834:	ldr	r5, [r5]
   14838:	bl	11268 <dcgettext@plt>
   1483c:	mov	r2, r4
   14840:	mov	r1, r7
   14844:	mov	r8, r0
   14848:	mov	r0, r6
   1484c:	bl	17654 <__assert_fail@plt+0x60e0>
   14850:	mov	r2, r8
   14854:	mov	r1, r5
   14858:	mov	r3, r0
   1485c:	b	147b4 <__assert_fail@plt+0x3240>
   14860:	add	sp, sp, #16
   14864:	pop	{r4, r5, r6, r7, r8, pc}
   14868:	andeq	fp, r1, lr, ror #1
   1486c:	strheq	fp, [r1], -lr
   14870:	ldrdeq	fp, [r1], -r9
   14874:	push	{r4, r5, lr}
   14878:	mov	r2, #5
   1487c:	sub	sp, sp, #20
   14880:	mov	r4, r0
   14884:	mov	r5, r1
   14888:	mov	r0, #0
   1488c:	ldr	r1, [pc, #52]	; 148c8 <__assert_fail@plt+0x3354>
   14890:	bl	11268 <dcgettext@plt>
   14894:	ldr	r3, [pc, #48]	; 148cc <__assert_fail@plt+0x3358>
   14898:	ldr	r2, [pc, #48]	; 148d0 <__assert_fail@plt+0x335c>
   1489c:	str	r3, [sp, #8]
   148a0:	ldr	r3, [pc, #44]	; 148d4 <__assert_fail@plt+0x3360>
   148a4:	str	r3, [sp, #4]
   148a8:	ldr	r3, [pc, #40]	; 148d8 <__assert_fail@plt+0x3364>
   148ac:	str	r3, [sp]
   148b0:	mov	r3, r5
   148b4:	mov	r1, r0
   148b8:	mov	r0, r4
   148bc:	bl	113e8 <fprintf@plt>
   148c0:	add	sp, sp, #20
   148c4:	pop	{r4, r5, pc}
   148c8:	strdeq	fp, [r1], -r1
   148cc:	andeq	fp, r1, r6, ror #3
   148d0:			; <UNDEFINED> instruction: 0x0001b1bf
   148d4:	strdeq	fp, [r1], -ip
   148d8:	andeq	fp, r1, r2, lsr #1
   148dc:	push	{r4, r5, r6, r7, r8, lr}
   148e0:	mov	r6, r1
   148e4:	mov	r4, r0
   148e8:	mov	r5, r2
   148ec:	bl	113f4 <__errno_location@plt>
   148f0:	cmp	r6, #0
   148f4:	ldr	r8, [r0]
   148f8:	bne	14910 <__assert_fail@plt+0x339c>
   148fc:	ldr	r3, [pc, #172]	; 149b0 <__assert_fail@plt+0x343c>
   14900:	ldr	r1, [pc, #172]	; 149b4 <__assert_fail@plt+0x3440>
   14904:	ldr	r0, [pc, #172]	; 149b8 <__assert_fail@plt+0x3444>
   14908:	mov	r2, #71	; 0x47
   1490c:	bl	11574 <__assert_fail@plt>
   14910:	ldr	r3, [r5]
   14914:	mov	r7, r0
   14918:	cmp	r3, #0
   1491c:	movne	r0, r3
   14920:	moveq	r0, #16
   14924:	cmp	r6, r0
   14928:	bhi	14950 <__assert_fail@plt+0x33dc>
   1492c:	cmp	r3, #0
   14930:	bne	1497c <__assert_fail@plt+0x3408>
   14934:	cmp	r4, #0
   14938:	beq	14968 <__assert_fail@plt+0x33f4>
   1493c:	ldr	r3, [pc, #108]	; 149b0 <__assert_fail@plt+0x343c>
   14940:	mov	r2, #79	; 0x4f
   14944:	ldr	r1, [pc, #104]	; 149b4 <__assert_fail@plt+0x3440>
   14948:	ldr	r0, [pc, #108]	; 149bc <__assert_fail@plt+0x3448>
   1494c:	b	1490c <__assert_fail@plt+0x3398>
   14950:	lsl	r2, r0, #1
   14954:	cmp	r0, r2
   14958:	movls	r0, r2
   1495c:	bls	14924 <__assert_fail@plt+0x33b0>
   14960:	mov	r0, r6
   14964:	b	1492c <__assert_fail@plt+0x33b8>
   14968:	str	r0, [r5]
   1496c:	bl	18a68 <__assert_fail@plt+0x74f4>
   14970:	mov	r4, r0
   14974:	cmp	r4, #0
   14978:	b	14998 <__assert_fail@plt+0x3424>
   1497c:	cmp	r3, r0
   14980:	beq	14974 <__assert_fail@plt+0x3400>
   14984:	str	r0, [r5]
   14988:	mov	r1, r0
   1498c:	mov	r0, r4
   14990:	bl	18af8 <__assert_fail@plt+0x7584>
   14994:	subs	r4, r0, #0
   14998:	bne	149a4 <__assert_fail@plt+0x3430>
   1499c:	mov	r0, #0
   149a0:	pop	{r4, r5, r6, r7, r8, pc}
   149a4:	str	r8, [r7]
   149a8:	mov	r0, r4
   149ac:	pop	{r4, r5, r6, r7, r8, pc}
   149b0:	andeq	fp, r1, fp, lsr #4
   149b4:	andeq	fp, r1, r5, lsr r2
   149b8:	andeq	fp, r1, r1, asr #4
   149bc:	andeq	fp, r1, sp, asr #4
   149c0:	push	{r4, lr}
   149c4:	mov	r4, r0
   149c8:	bl	148dc <__assert_fail@plt+0x3368>
   149cc:	cmp	r0, #0
   149d0:	popne	{r4, pc}
   149d4:	mov	r0, r4
   149d8:	bl	18980 <__assert_fail@plt+0x740c>
   149dc:	bl	182fc <__assert_fail@plt+0x6d88>
   149e0:	push	{r4, r5, r6, lr}
   149e4:	mov	r2, #0
   149e8:	mov	r5, r1
   149ec:	mov	r1, #1
   149f0:	mov	r4, r0
   149f4:	bl	18730 <__assert_fail@plt+0x71bc>
   149f8:	cmp	r0, #0
   149fc:	blt	14a34 <__assert_fail@plt+0x34c0>
   14a00:	cmp	r5, #0
   14a04:	orrne	r2, r0, #1
   14a08:	biceq	r2, r0, #1
   14a0c:	cmp	r2, r0
   14a10:	beq	14a3c <__assert_fail@plt+0x34c8>
   14a14:	mov	r1, #2
   14a18:	mov	r0, r4
   14a1c:	bl	18730 <__assert_fail@plt+0x71bc>
   14a20:	cmn	r0, #1
   14a24:	movne	r0, #0
   14a28:	moveq	r0, #1
   14a2c:	rsb	r0, r0, #0
   14a30:	pop	{r4, r5, r6, pc}
   14a34:	mvn	r0, #0
   14a38:	pop	{r4, r5, r6, pc}
   14a3c:	mov	r0, #0
   14a40:	pop	{r4, r5, r6, pc}
   14a44:	mov	r2, #0
   14a48:	ldr	r1, [pc]	; 14a50 <__assert_fail@plt+0x34dc>
   14a4c:	b	18730 <__assert_fail@plt+0x71bc>
   14a50:	andeq	r0, r0, r6, lsl #8
   14a54:	ldr	r3, [pc, #4]	; 14a60 <__assert_fail@plt+0x34ec>
   14a58:	str	r0, [r3]
   14a5c:	bx	lr
   14a60:	andeq	ip, r2, r8, lsr #5
   14a64:	push	{r0, r1, r4, r5, r6, lr}
   14a68:	ldr	r5, [pc, #236]	; 14b5c <__assert_fail@plt+0x35e8>
   14a6c:	ldr	r4, [r5]
   14a70:	mov	r0, r4
   14a74:	bl	18944 <__assert_fail@plt+0x73d0>
   14a78:	cmp	r0, #0
   14a7c:	bne	14b04 <__assert_fail@plt+0x3590>
   14a80:	mov	r4, #0
   14a84:	ldr	r0, [r5]
   14a88:	bl	18ba0 <__assert_fail@plt+0x762c>
   14a8c:	cmp	r0, #0
   14a90:	bne	14a9c <__assert_fail@plt+0x3528>
   14a94:	cmp	r4, #0
   14a98:	beq	14aec <__assert_fail@plt+0x3578>
   14a9c:	mov	r2, #5
   14aa0:	ldr	r1, [pc, #184]	; 14b60 <__assert_fail@plt+0x35ec>
   14aa4:	mov	r0, #0
   14aa8:	bl	11268 <dcgettext@plt>
   14aac:	ldr	r3, [pc, #176]	; 14b64 <__assert_fail@plt+0x35f0>
   14ab0:	ldr	r4, [r3]
   14ab4:	cmp	r4, #0
   14ab8:	mov	r5, r0
   14abc:	beq	14b38 <__assert_fail@plt+0x35c4>
   14ac0:	bl	113f4 <__errno_location@plt>
   14ac4:	ldr	r6, [r0]
   14ac8:	mov	r0, r4
   14acc:	bl	17754 <__assert_fail@plt+0x61e0>
   14ad0:	str	r5, [sp]
   14ad4:	ldr	r2, [pc, #140]	; 14b68 <__assert_fail@plt+0x35f4>
   14ad8:	mov	r1, r6
   14adc:	mov	r3, r0
   14ae0:	mov	r0, #0
   14ae4:	bl	11328 <error@plt>
   14ae8:	mov	r4, #1
   14aec:	bl	14b94 <__assert_fail@plt+0x3620>
   14af0:	cmp	r4, #0
   14af4:	beq	14b54 <__assert_fail@plt+0x35e0>
   14af8:	ldr	r3, [pc, #108]	; 14b6c <__assert_fail@plt+0x35f8>
   14afc:	ldr	r0, [r3]
   14b00:	bl	11220 <_exit@plt>
   14b04:	mov	r3, #1
   14b08:	str	r3, [sp]
   14b0c:	mov	r2, #0
   14b10:	mov	r3, #0
   14b14:	mov	r0, r4
   14b18:	bl	189d4 <__assert_fail@plt+0x7460>
   14b1c:	cmp	r0, #0
   14b20:	bne	14a80 <__assert_fail@plt+0x350c>
   14b24:	ldr	r0, [r5]
   14b28:	bl	188f4 <__assert_fail@plt+0x7380>
   14b2c:	adds	r4, r0, #0
   14b30:	movne	r4, #1
   14b34:	b	14a84 <__assert_fail@plt+0x3510>
   14b38:	bl	113f4 <__errno_location@plt>
   14b3c:	mov	r3, r5
   14b40:	ldr	r2, [pc, #40]	; 14b70 <__assert_fail@plt+0x35fc>
   14b44:	ldr	r1, [r0]
   14b48:	mov	r0, r4
   14b4c:	bl	11328 <error@plt>
   14b50:	b	14ae8 <__assert_fail@plt+0x3574>
   14b54:	add	sp, sp, #8
   14b58:	pop	{r4, r5, r6, pc}
   14b5c:	ldrdeq	ip, [r2], -r8
   14b60:	andeq	fp, r1, lr, asr r2
   14b64:	andeq	ip, r2, r8, lsr #5
   14b68:	andeq	fp, r1, r1, ror r2
   14b6c:	andeq	ip, r2, r0, ror r1
   14b70:	andeq	fp, r1, lr, ror #1
   14b74:	ldr	r3, [pc, #4]	; 14b80 <__assert_fail@plt+0x360c>
   14b78:	str	r0, [r3]
   14b7c:	bx	lr
   14b80:	andeq	ip, r2, ip, lsr #5
   14b84:	ldr	r3, [pc, #4]	; 14b90 <__assert_fail@plt+0x361c>
   14b88:	strb	r0, [r3, #4]
   14b8c:	bx	lr
   14b90:	andeq	ip, r2, ip, lsr #5
   14b94:	ldr	r3, [pc, #192]	; 14c5c <__assert_fail@plt+0x36e8>
   14b98:	push	{r0, r1, r4, r5, r6, lr}
   14b9c:	ldr	r0, [r3]
   14ba0:	bl	18ba0 <__assert_fail@plt+0x762c>
   14ba4:	cmp	r0, #0
   14ba8:	beq	14c40 <__assert_fail@plt+0x36cc>
   14bac:	ldr	r3, [pc, #172]	; 14c60 <__assert_fail@plt+0x36ec>
   14bb0:	mov	r4, r3
   14bb4:	ldrb	r2, [r3, #4]
   14bb8:	cmp	r2, #0
   14bbc:	beq	14bd0 <__assert_fail@plt+0x365c>
   14bc0:	bl	113f4 <__errno_location@plt>
   14bc4:	ldr	r3, [r0]
   14bc8:	cmp	r3, #32
   14bcc:	beq	14c40 <__assert_fail@plt+0x36cc>
   14bd0:	mov	r2, #5
   14bd4:	ldr	r1, [pc, #136]	; 14c64 <__assert_fail@plt+0x36f0>
   14bd8:	mov	r0, #0
   14bdc:	bl	11268 <dcgettext@plt>
   14be0:	ldr	r4, [r4]
   14be4:	cmp	r4, #0
   14be8:	mov	r5, r0
   14bec:	beq	14c24 <__assert_fail@plt+0x36b0>
   14bf0:	bl	113f4 <__errno_location@plt>
   14bf4:	ldr	r6, [r0]
   14bf8:	mov	r0, r4
   14bfc:	bl	17754 <__assert_fail@plt+0x61e0>
   14c00:	str	r5, [sp]
   14c04:	ldr	r2, [pc, #92]	; 14c68 <__assert_fail@plt+0x36f4>
   14c08:	mov	r1, r6
   14c0c:	mov	r3, r0
   14c10:	mov	r0, #0
   14c14:	bl	11328 <error@plt>
   14c18:	ldr	r3, [pc, #76]	; 14c6c <__assert_fail@plt+0x36f8>
   14c1c:	ldr	r0, [r3]
   14c20:	bl	11220 <_exit@plt>
   14c24:	bl	113f4 <__errno_location@plt>
   14c28:	mov	r3, r5
   14c2c:	ldr	r2, [pc, #60]	; 14c70 <__assert_fail@plt+0x36fc>
   14c30:	ldr	r1, [r0]
   14c34:	mov	r0, r4
   14c38:	bl	11328 <error@plt>
   14c3c:	b	14c18 <__assert_fail@plt+0x36a4>
   14c40:	ldr	r3, [pc, #44]	; 14c74 <__assert_fail@plt+0x3700>
   14c44:	ldr	r0, [r3]
   14c48:	bl	18ba0 <__assert_fail@plt+0x762c>
   14c4c:	cmp	r0, #0
   14c50:	bne	14c18 <__assert_fail@plt+0x36a4>
   14c54:	add	sp, sp, #8
   14c58:	pop	{r4, r5, r6, pc}
   14c5c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   14c60:	andeq	ip, r2, ip, lsr #5
   14c64:	andeq	fp, r1, r8, ror r2
   14c68:	andeq	fp, r1, r1, ror r2
   14c6c:	andeq	ip, r2, r0, ror r1
   14c70:	andeq	fp, r1, lr, ror #1
   14c74:	ldrdeq	ip, [r2], -r0
   14c78:	push	{r4, r5, r6, r7, r8, lr}
   14c7c:	bl	11334 <opendir@plt>
   14c80:	subs	r4, r0, #0
   14c84:	beq	14cc8 <__assert_fail@plt+0x3754>
   14c88:	bl	114fc <dirfd@plt>
   14c8c:	cmp	r0, #2
   14c90:	bhi	14cc8 <__assert_fail@plt+0x3754>
   14c94:	mov	r2, #3
   14c98:	ldr	r1, [pc, #84]	; 14cf4 <__assert_fail@plt+0x3780>
   14c9c:	bl	18730 <__assert_fail@plt+0x71bc>
   14ca0:	subs	r7, r0, #0
   14ca4:	bge	14cd0 <__assert_fail@plt+0x375c>
   14ca8:	bl	113f4 <__errno_location@plt>
   14cac:	mov	r5, #0
   14cb0:	ldr	r6, [r0]
   14cb4:	mov	r0, r4
   14cb8:	bl	11568 <closedir@plt>
   14cbc:	bl	113f4 <__errno_location@plt>
   14cc0:	mov	r4, r5
   14cc4:	str	r6, [r0]
   14cc8:	mov	r0, r4
   14ccc:	pop	{r4, r5, r6, r7, r8, pc}
   14cd0:	bl	114e4 <fdopendir@plt>
   14cd4:	mov	r5, r0
   14cd8:	bl	113f4 <__errno_location@plt>
   14cdc:	cmp	r5, #0
   14ce0:	ldr	r6, [r0]
   14ce4:	bne	14cb4 <__assert_fail@plt+0x3740>
   14ce8:	mov	r0, r7
   14cec:	bl	1155c <close@plt>
   14cf0:	b	14cb4 <__assert_fail@plt+0x3740>
   14cf4:	andeq	r0, r0, r6, lsl #8
   14cf8:	push	{r1, r2, r3}
   14cfc:	push	{r0, r1, lr}
   14d00:	ldr	r1, [sp, #12]
   14d04:	ands	r2, r1, #64	; 0x40
   14d08:	addne	r3, sp, #16
   14d0c:	ldrne	r2, [sp, #16]
   14d10:	strne	r3, [sp, #4]
   14d14:	bl	11340 <open64@plt>
   14d18:	bl	17948 <__assert_fail@plt+0x63d4>
   14d1c:	add	sp, sp, #8
   14d20:	pop	{lr}		; (ldr lr, [sp], #4)
   14d24:	add	sp, sp, #12
   14d28:	bx	lr
   14d2c:	push	{r4, r5, r6, r7, fp, lr}
   14d30:	mov	r7, r3
   14d34:	lsrs	r3, r2, #30
   14d38:	mov	r4, r0
   14d3c:	movne	r3, #1
   14d40:	moveq	r3, #0
   14d44:	lsls	r0, r2, #2
   14d48:	add	fp, sp, #20
   14d4c:	bmi	14d58 <__assert_fail@plt+0x37e4>
   14d50:	cmp	r3, #0
   14d54:	beq	14d64 <__assert_fail@plt+0x37f0>
   14d58:	mov	r0, #0
   14d5c:	sub	sp, fp, #20
   14d60:	pop	{r4, r5, r6, r7, fp, pc}
   14d64:	cmp	r0, #4016	; 0xfb0
   14d68:	mov	r5, r1
   14d6c:	mov	r6, r2
   14d70:	bhi	14df0 <__assert_fail@plt+0x387c>
   14d74:	add	r0, r0, #29
   14d78:	bic	r0, r0, #7
   14d7c:	sub	sp, sp, r0
   14d80:	add	r0, sp, #15
   14d84:	bic	r0, r0, #15
   14d88:	cmp	r0, #0
   14d8c:	beq	14d58 <__assert_fail@plt+0x37e4>
   14d90:	mov	r3, #1
   14d94:	str	r3, [r0, #4]
   14d98:	mov	ip, #0
   14d9c:	mov	r3, r5
   14da0:	mov	lr, #2
   14da4:	cmp	lr, r6
   14da8:	bcc	14df8 <__assert_fail@plt+0x3884>
   14dac:	mov	r3, r4
   14db0:	mov	ip, #0
   14db4:	str	ip, [r7]
   14db8:	ldrb	r2, [r3]
   14dbc:	cmp	r2, #0
   14dc0:	beq	14de4 <__assert_fail@plt+0x3870>
   14dc4:	ldrb	r1, [r5, ip]
   14dc8:	cmp	r1, r2
   14dcc:	bne	14e34 <__assert_fail@plt+0x38c0>
   14dd0:	add	ip, ip, #1
   14dd4:	cmp	r6, ip
   14dd8:	add	r3, r3, #1
   14ddc:	bne	14db8 <__assert_fail@plt+0x3844>
   14de0:	str	r4, [r7]
   14de4:	bl	18cf0 <__assert_fail@plt+0x777c>
   14de8:	mov	r0, #1
   14dec:	b	14d5c <__assert_fail@plt+0x37e8>
   14df0:	bl	18ca0 <__assert_fail@plt+0x772c>
   14df4:	b	14d88 <__assert_fail@plt+0x3814>
   14df8:	ldrb	r1, [r3, #1]!
   14dfc:	ldrb	r2, [r5, ip]
   14e00:	cmp	r2, r1
   14e04:	bne	14e1c <__assert_fail@plt+0x38a8>
   14e08:	add	ip, ip, #1
   14e0c:	sub	r2, lr, ip
   14e10:	str	r2, [r0, lr, lsl #2]
   14e14:	add	lr, lr, #1
   14e18:	b	14da4 <__assert_fail@plt+0x3830>
   14e1c:	cmp	ip, #0
   14e20:	streq	lr, [r0, lr, lsl #2]
   14e24:	beq	14e14 <__assert_fail@plt+0x38a0>
   14e28:	ldr	r2, [r0, ip, lsl #2]
   14e2c:	sub	ip, ip, r2
   14e30:	b	14dfc <__assert_fail@plt+0x3888>
   14e34:	cmp	ip, #0
   14e38:	addeq	r4, r4, #1
   14e3c:	ldrne	r2, [r0, ip, lsl #2]
   14e40:	addeq	r3, r3, #1
   14e44:	addne	r4, r4, r2
   14e48:	subne	ip, ip, r2
   14e4c:	b	14db8 <__assert_fail@plt+0x3844>
   14e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e54:	add	fp, sp, #32
   14e58:	sub	sp, sp, #196	; 0xc4
   14e5c:	str	r0, [fp, #-220]	; 0xffffff24
   14e60:	mov	r0, r1
   14e64:	mov	r5, r1
   14e68:	str	r2, [fp, #-224]	; 0xffffff20
   14e6c:	bl	18db0 <__assert_fail@plt+0x783c>
   14e70:	mov	r7, #0
   14e74:	str	r0, [fp, #-208]	; 0xffffff30
   14e78:	ldr	r3, [fp, #-208]	; 0xffffff30
   14e7c:	mov	r6, r0
   14e80:	lsl	r0, r3, #2
   14e84:	adds	r0, r0, r6
   14e88:	lsr	r1, r3, #30
   14e8c:	adc	r1, r1, r7
   14e90:	adds	r0, r0, r0
   14e94:	adc	r1, r1, r1
   14e98:	adds	r6, r6, r0
   14e9c:	adc	r7, r7, r1
   14ea0:	lsl	r0, r6, #2
   14ea4:	lsl	r1, r7, #2
   14ea8:	orr	r1, r1, r6, lsr #30
   14eac:	adds	r1, r1, #0
   14eb0:	movne	r1, #1
   14eb4:	cmp	r0, #0
   14eb8:	blt	14ec4 <__assert_fail@plt+0x3950>
   14ebc:	cmp	r1, #0
   14ec0:	beq	14ed8 <__assert_fail@plt+0x3964>
   14ec4:	mov	r3, #0
   14ec8:	str	r3, [fp, #-216]	; 0xffffff28
   14ecc:	ldr	r0, [fp, #-216]	; 0xffffff28
   14ed0:	sub	sp, fp, #32
   14ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ed8:	ldr	r3, [fp, #-208]	; 0xffffff30
   14edc:	mov	r0, #44	; 0x2c
   14ee0:	mul	r0, r0, r3
   14ee4:	cmp	r0, #4016	; 0xfb0
   14ee8:	bhi	14fc8 <__assert_fail@plt+0x3a54>
   14eec:	add	r0, r0, #29
   14ef0:	bic	r0, r0, #7
   14ef4:	sub	sp, sp, r0
   14ef8:	add	r4, sp, #15
   14efc:	bic	r4, r4, #15
   14f00:	cmp	r4, #0
   14f04:	beq	14ec4 <__assert_fail@plt+0x3950>
   14f08:	ldr	r2, [fp, #-208]	; 0xffffff30
   14f0c:	mov	r3, #40	; 0x28
   14f10:	sub	r7, fp, #36	; 0x24
   14f14:	mla	r3, r3, r2, r4
   14f18:	ldr	sl, [pc, #1876]	; 15674 <__assert_fail@plt+0x4100>
   14f1c:	str	r3, [fp, #-212]	; 0xffffff2c
   14f20:	mov	r3, #0
   14f24:	strb	r3, [r7, #-168]!	; 0xffffff58
   14f28:	str	r5, [fp, #-188]	; 0xffffff44
   14f2c:	add	r6, r7, #4
   14f30:	add	r5, r4, #16
   14f34:	add	r9, r7, #28
   14f38:	str	r3, [fp, #-200]	; 0xffffff38
   14f3c:	str	r3, [r6, #4]
   14f40:	strb	r3, [fp, #-192]	; 0xffffff40
   14f44:	ldrb	r3, [fp, #-204]	; 0xffffff34
   14f48:	ldr	r8, [fp, #-188]	; 0xffffff44
   14f4c:	cmp	r3, #0
   14f50:	bne	15000 <__assert_fail@plt+0x3a8c>
   14f54:	ldrb	r3, [r8]
   14f58:	lsr	r2, r3, #5
   14f5c:	and	r3, r3, #31
   14f60:	ldr	r2, [sl, r2, lsl #2]
   14f64:	lsr	r3, r2, r3
   14f68:	tst	r3, #1
   14f6c:	beq	14fd4 <__assert_fail@plt+0x3a60>
   14f70:	mov	r3, #1
   14f74:	str	r3, [fp, #-184]	; 0xffffff48
   14f78:	ldrb	r2, [r8]
   14f7c:	str	r2, [fp, #-176]	; 0xffffff50
   14f80:	strb	r3, [fp, #-180]	; 0xffffff4c
   14f84:	ldrb	r3, [fp, #-180]	; 0xffffff4c
   14f88:	mov	r2, #1
   14f8c:	strb	r2, [fp, #-192]	; 0xffffff40
   14f90:	cmp	r3, #0
   14f94:	str	r3, [fp, #-216]	; 0xffffff28
   14f98:	beq	155f4 <__assert_fail@plt+0x4080>
   14f9c:	ldr	r3, [fp, #-176]	; 0xffffff50
   14fa0:	cmp	r3, #0
   14fa4:	bne	155f4 <__assert_fail@plt+0x4080>
   14fa8:	ldr	r1, [fp, #-212]	; 0xffffff2c
   14fac:	mov	r7, r4
   14fb0:	mov	r5, r3
   14fb4:	str	r2, [r1, #4]
   14fb8:	mov	r6, #2
   14fbc:	mov	r8, #40	; 0x28
   14fc0:	mov	r9, r3
   14fc4:	b	1511c <__assert_fail@plt+0x3ba8>
   14fc8:	bl	18ca0 <__assert_fail@plt+0x772c>
   14fcc:	mov	r4, r0
   14fd0:	b	14f00 <__assert_fail@plt+0x398c>
   14fd4:	mov	r0, r6
   14fd8:	bl	11244 <mbsinit@plt>
   14fdc:	cmp	r0, #0
   14fe0:	bne	14ff8 <__assert_fail@plt+0x3a84>
   14fe4:	ldr	r3, [pc, #1676]	; 15678 <__assert_fail@plt+0x4104>
   14fe8:	ldr	r1, [pc, #1676]	; 1567c <__assert_fail@plt+0x4108>
   14fec:	ldr	r0, [pc, #1676]	; 15680 <__assert_fail@plt+0x410c>
   14ff0:	mov	r2, #143	; 0x8f
   14ff4:	bl	11574 <__assert_fail@plt>
   14ff8:	mov	r3, #1
   14ffc:	strb	r3, [fp, #-204]	; 0xffffff34
   15000:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   15004:	mov	r1, r0
   15008:	mov	r0, r8
   1500c:	bl	1791c <__assert_fail@plt+0x63a8>
   15010:	mov	r3, r6
   15014:	mov	r1, r8
   15018:	mov	r2, r0
   1501c:	mov	r0, r9
   15020:	bl	18aa8 <__assert_fail@plt+0x7534>
   15024:	cmn	r0, #1
   15028:	str	r0, [fp, #-184]	; 0xffffff48
   1502c:	bne	15040 <__assert_fail@plt+0x3acc>
   15030:	mov	r3, #1
   15034:	str	r3, [fp, #-184]	; 0xffffff48
   15038:	mov	r3, #0
   1503c:	b	14f80 <__assert_fail@plt+0x3a0c>
   15040:	cmn	r0, #2
   15044:	bne	15058 <__assert_fail@plt+0x3ae4>
   15048:	ldr	r0, [fp, #-188]	; 0xffffff44
   1504c:	bl	113c4 <strlen@plt>
   15050:	str	r0, [fp, #-184]	; 0xffffff48
   15054:	b	15038 <__assert_fail@plt+0x3ac4>
   15058:	cmp	r0, #0
   1505c:	bne	150ac <__assert_fail@plt+0x3b38>
   15060:	mov	r3, #1
   15064:	str	r3, [fp, #-184]	; 0xffffff48
   15068:	ldr	r3, [fp, #-188]	; 0xffffff44
   1506c:	ldrb	r3, [r3]
   15070:	cmp	r3, #0
   15074:	beq	1508c <__assert_fail@plt+0x3b18>
   15078:	ldr	r3, [pc, #1528]	; 15678 <__assert_fail@plt+0x4104>
   1507c:	mov	r2, #171	; 0xab
   15080:	ldr	r1, [pc, #1524]	; 1567c <__assert_fail@plt+0x4108>
   15084:	ldr	r0, [pc, #1528]	; 15684 <__assert_fail@plt+0x4110>
   15088:	b	14ff4 <__assert_fail@plt+0x3a80>
   1508c:	ldr	r3, [fp, #-176]	; 0xffffff50
   15090:	cmp	r3, #0
   15094:	beq	150ac <__assert_fail@plt+0x3b38>
   15098:	ldr	r3, [pc, #1496]	; 15678 <__assert_fail@plt+0x4104>
   1509c:	mov	r2, #172	; 0xac
   150a0:	ldr	r1, [pc, #1492]	; 1567c <__assert_fail@plt+0x4108>
   150a4:	ldr	r0, [pc, #1500]	; 15688 <__assert_fail@plt+0x4114>
   150a8:	b	14ff4 <__assert_fail@plt+0x3a80>
   150ac:	mov	r3, #1
   150b0:	mov	r0, r6
   150b4:	strb	r3, [fp, #-180]	; 0xffffff4c
   150b8:	bl	11244 <mbsinit@plt>
   150bc:	cmp	r0, #0
   150c0:	movne	r3, #0
   150c4:	strbne	r3, [fp, #-204]	; 0xffffff34
   150c8:	b	14f84 <__assert_fail@plt+0x3a10>
   150cc:	ldrb	sl, [r7, #48]	; 0x30
   150d0:	cmp	sl, #0
   150d4:	beq	15218 <__assert_fail@plt+0x3ca4>
   150d8:	mla	r3, r8, r5, r4
   150dc:	ldrb	r2, [r3, #8]
   150e0:	cmp	r2, #0
   150e4:	beq	15218 <__assert_fail@plt+0x3ca4>
   150e8:	ldr	r0, [r7, #52]	; 0x34
   150ec:	ldr	r3, [r3, #12]
   150f0:	sub	r0, r0, r3
   150f4:	clz	r0, r0
   150f8:	lsr	r0, r0, #5
   150fc:	cmp	r0, #0
   15100:	beq	15250 <__assert_fail@plt+0x3cdc>
   15104:	ldr	r2, [fp, #-212]	; 0xffffff2c
   15108:	add	r5, r5, #1
   1510c:	sub	r3, r6, r5
   15110:	str	r3, [r2, r6, lsl #2]
   15114:	add	r6, r6, #1
   15118:	add	r7, r7, #40	; 0x28
   1511c:	ldr	r3, [fp, #-208]	; 0xffffff30
   15120:	cmp	r6, r3
   15124:	bcc	150cc <__assert_fail@plt+0x3b58>
   15128:	ldr	r3, [fp, #-224]	; 0xffffff20
   1512c:	mov	r6, #0
   15130:	sub	r7, fp, #36	; 0x24
   15134:	str	r6, [r3]
   15138:	ldr	r3, [fp, #-220]	; 0xffffff24
   1513c:	sub	r8, fp, #36	; 0x24
   15140:	str	r3, [fp, #-132]	; 0xffffff7c
   15144:	mov	r5, #1
   15148:	ldr	r3, [fp, #-220]	; 0xffffff24
   1514c:	strb	r6, [r7, #-112]!	; 0xffffff90
   15150:	str	r6, [fp, #-144]	; 0xffffff70
   15154:	strb	r6, [r8, #-56]!	; 0xffffffc8
   15158:	str	r6, [r7, #8]
   1515c:	str	r6, [fp, #-88]	; 0xffffffa8
   15160:	strb	r6, [fp, #-136]	; 0xffffff78
   15164:	str	r6, [r8, #8]
   15168:	str	r3, [fp, #-76]	; 0xffffffb4
   1516c:	strb	r6, [fp, #-80]	; 0xffffffb0
   15170:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   15174:	cmp	r3, #0
   15178:	bne	151c0 <__assert_fail@plt+0x3c4c>
   1517c:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   15180:	ldr	r9, [fp, #-76]	; 0xffffffb4
   15184:	cmp	r3, #0
   15188:	bne	1555c <__assert_fail@plt+0x3fe8>
   1518c:	ldrb	r3, [r9]
   15190:	ldr	r1, [pc, #1244]	; 15674 <__assert_fail@plt+0x4100>
   15194:	lsr	r2, r3, #5
   15198:	and	r3, r3, #31
   1519c:	ldr	r2, [r1, r2, lsl #2]
   151a0:	lsr	r3, r2, r3
   151a4:	tst	r3, #1
   151a8:	beq	15548 <__assert_fail@plt+0x3fd4>
   151ac:	str	r5, [fp, #-72]	; 0xffffffb8
   151b0:	ldrb	r3, [r9]
   151b4:	strb	r5, [fp, #-68]	; 0xffffffbc
   151b8:	str	r3, [fp, #-64]	; 0xffffffc0
   151bc:	strb	r5, [fp, #-80]	; 0xffffffb0
   151c0:	ldrb	r0, [fp, #-68]	; 0xffffffbc
   151c4:	cmp	r0, #0
   151c8:	beq	151d8 <__assert_fail@plt+0x3c64>
   151cc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   151d0:	cmp	r3, #0
   151d4:	beq	152bc <__assert_fail@plt+0x3d48>
   151d8:	mov	r3, #40	; 0x28
   151dc:	mla	r3, r3, r6, r4
   151e0:	ldrb	r2, [r3, #8]
   151e4:	ands	r0, r0, r2
   151e8:	bne	1526c <__assert_fail@plt+0x3cf8>
   151ec:	ldr	r2, [r3, #4]
   151f0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   151f4:	cmp	r2, r1
   151f8:	bne	15210 <__assert_fail@plt+0x3c9c>
   151fc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15200:	ldr	r0, [r3]
   15204:	bl	1125c <memcmp@plt>
   15208:	clz	r0, r0
   1520c:	lsr	r0, r0, #5
   15210:	and	r0, r0, #1
   15214:	b	15280 <__assert_fail@plt+0x3d0c>
   15218:	mul	r3, r8, r5
   1521c:	ldr	r2, [r7, #44]	; 0x2c
   15220:	add	r1, r4, r3
   15224:	ldr	r1, [r1, #4]
   15228:	cmp	r2, r1
   1522c:	movne	r0, r9
   15230:	bne	15248 <__assert_fail@plt+0x3cd4>
   15234:	ldr	r1, [r4, r3]
   15238:	ldr	r0, [r7, #40]	; 0x28
   1523c:	bl	1125c <memcmp@plt>
   15240:	clz	r0, r0
   15244:	lsr	r0, r0, #5
   15248:	and	r0, r0, #1
   1524c:	b	150fc <__assert_fail@plt+0x3b88>
   15250:	cmp	r5, #0
   15254:	ldr	r3, [fp, #-212]	; 0xffffff2c
   15258:	streq	r6, [r3, r6, lsl #2]
   1525c:	beq	15114 <__assert_fail@plt+0x3ba0>
   15260:	ldr	r3, [r3, r5, lsl #2]
   15264:	sub	r5, r5, r3
   15268:	b	150d0 <__assert_fail@plt+0x3b5c>
   1526c:	ldr	r0, [r3, #12]
   15270:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15274:	sub	r0, r0, r3
   15278:	clz	r0, r0
   1527c:	lsr	r0, r0, #5
   15280:	cmp	r0, #0
   15284:	beq	152c8 <__assert_fail@plt+0x3d54>
   15288:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1528c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15290:	add	r6, r6, #1
   15294:	add	r3, r3, r2
   15298:	str	r3, [fp, #-76]	; 0xffffffb4
   1529c:	mov	r3, #0
   152a0:	strb	r3, [fp, #-80]	; 0xffffffb0
   152a4:	ldr	r3, [fp, #-208]	; 0xffffff30
   152a8:	cmp	r3, r6
   152ac:	bne	15170 <__assert_fail@plt+0x3bfc>
   152b0:	ldr	r2, [fp, #-224]	; 0xffffff20
   152b4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   152b8:	str	r3, [r2]
   152bc:	mov	r0, r4
   152c0:	bl	18cf0 <__assert_fail@plt+0x777c>
   152c4:	b	14ecc <__assert_fail@plt+0x3958>
   152c8:	cmp	r6, #0
   152cc:	beq	15404 <__assert_fail@plt+0x3e90>
   152d0:	ldr	r3, [fp, #-212]	; 0xffffff2c
   152d4:	ldr	sl, [r3, r6, lsl #2]
   152d8:	add	r3, r7, #4
   152dc:	sub	r6, r6, sl
   152e0:	str	r3, [fp, #-220]	; 0xffffff24
   152e4:	cmp	sl, #0
   152e8:	beq	15170 <__assert_fail@plt+0x3bfc>
   152ec:	ldrb	r3, [fp, #-136]	; 0xffffff78
   152f0:	cmp	r3, #0
   152f4:	bne	1533c <__assert_fail@plt+0x3dc8>
   152f8:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   152fc:	ldr	r9, [fp, #-132]	; 0xffffff7c
   15300:	cmp	r3, #0
   15304:	bne	1536c <__assert_fail@plt+0x3df8>
   15308:	ldrb	r3, [r9]
   1530c:	ldr	r1, [pc, #864]	; 15674 <__assert_fail@plt+0x4100>
   15310:	lsr	r2, r3, #5
   15314:	and	r3, r3, #31
   15318:	ldr	r2, [r1, r2, lsl #2]
   1531c:	lsr	r3, r2, r3
   15320:	tst	r3, #1
   15324:	beq	15358 <__assert_fail@plt+0x3de4>
   15328:	str	r5, [fp, #-128]	; 0xffffff80
   1532c:	ldrb	r3, [r9]
   15330:	strb	r5, [fp, #-124]	; 0xffffff84
   15334:	str	r3, [fp, #-120]	; 0xffffff88
   15338:	strb	r5, [fp, #-136]	; 0xffffff78
   1533c:	ldrb	r3, [fp, #-124]	; 0xffffff84
   15340:	cmp	r3, #0
   15344:	beq	15654 <__assert_fail@plt+0x40e0>
   15348:	ldr	r3, [fp, #-120]	; 0xffffff88
   1534c:	cmp	r3, #0
   15350:	bne	15654 <__assert_fail@plt+0x40e0>
   15354:	bl	11544 <abort@plt>
   15358:	ldr	r0, [fp, #-220]	; 0xffffff24
   1535c:	bl	11244 <mbsinit@plt>
   15360:	cmp	r0, #0
   15364:	beq	14fe4 <__assert_fail@plt+0x3a70>
   15368:	strb	r5, [fp, #-148]	; 0xffffff6c
   1536c:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   15370:	mov	r1, r0
   15374:	mov	r0, r9
   15378:	bl	1791c <__assert_fail@plt+0x63a8>
   1537c:	ldr	r3, [fp, #-220]	; 0xffffff24
   15380:	mov	r1, r9
   15384:	mov	r2, r0
   15388:	add	r0, r7, #28
   1538c:	bl	18aa8 <__assert_fail@plt+0x7534>
   15390:	cmn	r0, #1
   15394:	str	r0, [fp, #-128]	; 0xffffff80
   15398:	streq	r5, [fp, #-128]	; 0xffffff80
   1539c:	beq	153b4 <__assert_fail@plt+0x3e40>
   153a0:	cmn	r0, #2
   153a4:	bne	153c0 <__assert_fail@plt+0x3e4c>
   153a8:	ldr	r0, [fp, #-132]	; 0xffffff7c
   153ac:	bl	113c4 <strlen@plt>
   153b0:	str	r0, [fp, #-128]	; 0xffffff80
   153b4:	mov	r3, #0
   153b8:	strb	r3, [fp, #-124]	; 0xffffff84
   153bc:	b	15338 <__assert_fail@plt+0x3dc4>
   153c0:	cmp	r0, #0
   153c4:	bne	153e8 <__assert_fail@plt+0x3e74>
   153c8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   153cc:	str	r5, [fp, #-128]	; 0xffffff80
   153d0:	ldrb	r3, [r3]
   153d4:	cmp	r3, #0
   153d8:	bne	15078 <__assert_fail@plt+0x3b04>
   153dc:	ldr	r3, [fp, #-120]	; 0xffffff88
   153e0:	cmp	r3, #0
   153e4:	bne	15098 <__assert_fail@plt+0x3b24>
   153e8:	ldr	r0, [fp, #-220]	; 0xffffff24
   153ec:	strb	r5, [fp, #-124]	; 0xffffff84
   153f0:	bl	11244 <mbsinit@plt>
   153f4:	cmp	r0, #0
   153f8:	movne	r3, #0
   153fc:	strbne	r3, [fp, #-148]	; 0xffffff6c
   15400:	b	15338 <__assert_fail@plt+0x3dc4>
   15404:	ldrb	r3, [fp, #-136]	; 0xffffff78
   15408:	cmp	r3, #0
   1540c:	bne	15454 <__assert_fail@plt+0x3ee0>
   15410:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   15414:	ldr	r9, [fp, #-132]	; 0xffffff7c
   15418:	cmp	r3, #0
   1541c:	bne	154b0 <__assert_fail@plt+0x3f3c>
   15420:	ldrb	r3, [r9]
   15424:	ldr	r1, [pc, #584]	; 15674 <__assert_fail@plt+0x4100>
   15428:	lsr	r2, r3, #5
   1542c:	and	r3, r3, #31
   15430:	ldr	r2, [r1, r2, lsl #2]
   15434:	lsr	r3, r2, r3
   15438:	tst	r3, #1
   1543c:	beq	1549c <__assert_fail@plt+0x3f28>
   15440:	str	r5, [fp, #-128]	; 0xffffff80
   15444:	ldrb	r3, [r9]
   15448:	strb	r5, [fp, #-124]	; 0xffffff84
   1544c:	str	r3, [fp, #-120]	; 0xffffff88
   15450:	strb	r5, [fp, #-136]	; 0xffffff78
   15454:	ldrb	r3, [fp, #-124]	; 0xffffff84
   15458:	cmp	r3, #0
   1545c:	beq	1546c <__assert_fail@plt+0x3ef8>
   15460:	ldr	r3, [fp, #-120]	; 0xffffff88
   15464:	cmp	r3, #0
   15468:	beq	15354 <__assert_fail@plt+0x3de0>
   1546c:	ldr	r2, [fp, #-128]	; 0xffffff80
   15470:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15474:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15478:	add	r3, r3, r2
   1547c:	str	r3, [fp, #-132]	; 0xffffff7c
   15480:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15484:	mov	r2, #0
   15488:	add	r3, r3, r1
   1548c:	strb	r2, [fp, #-136]	; 0xffffff78
   15490:	str	r3, [fp, #-76]	; 0xffffffb4
   15494:	strb	r2, [fp, #-80]	; 0xffffffb0
   15498:	b	15170 <__assert_fail@plt+0x3bfc>
   1549c:	add	r0, r7, #4
   154a0:	bl	11244 <mbsinit@plt>
   154a4:	cmp	r0, #0
   154a8:	beq	14fe4 <__assert_fail@plt+0x3a70>
   154ac:	strb	r5, [fp, #-148]	; 0xffffff6c
   154b0:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   154b4:	mov	r1, r0
   154b8:	mov	r0, r9
   154bc:	bl	1791c <__assert_fail@plt+0x63a8>
   154c0:	add	r3, r7, #4
   154c4:	mov	r1, r9
   154c8:	mov	r2, r0
   154cc:	add	r0, r7, #28
   154d0:	bl	18aa8 <__assert_fail@plt+0x7534>
   154d4:	cmn	r0, #1
   154d8:	str	r0, [fp, #-128]	; 0xffffff80
   154dc:	streq	r5, [fp, #-128]	; 0xffffff80
   154e0:	beq	154f8 <__assert_fail@plt+0x3f84>
   154e4:	cmn	r0, #2
   154e8:	bne	15504 <__assert_fail@plt+0x3f90>
   154ec:	ldr	r0, [fp, #-132]	; 0xffffff7c
   154f0:	bl	113c4 <strlen@plt>
   154f4:	str	r0, [fp, #-128]	; 0xffffff80
   154f8:	mov	r3, #0
   154fc:	strb	r3, [fp, #-124]	; 0xffffff84
   15500:	b	15450 <__assert_fail@plt+0x3edc>
   15504:	cmp	r0, #0
   15508:	bne	1552c <__assert_fail@plt+0x3fb8>
   1550c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15510:	str	r5, [fp, #-128]	; 0xffffff80
   15514:	ldrb	r3, [r3]
   15518:	cmp	r3, #0
   1551c:	bne	15078 <__assert_fail@plt+0x3b04>
   15520:	ldr	r3, [fp, #-120]	; 0xffffff88
   15524:	cmp	r3, #0
   15528:	bne	15098 <__assert_fail@plt+0x3b24>
   1552c:	add	r0, r7, #4
   15530:	strb	r5, [fp, #-124]	; 0xffffff84
   15534:	bl	11244 <mbsinit@plt>
   15538:	cmp	r0, #0
   1553c:	movne	r3, #0
   15540:	strbne	r3, [fp, #-148]	; 0xffffff6c
   15544:	b	15450 <__assert_fail@plt+0x3edc>
   15548:	add	r0, r8, #4
   1554c:	bl	11244 <mbsinit@plt>
   15550:	cmp	r0, #0
   15554:	beq	14fe4 <__assert_fail@plt+0x3a70>
   15558:	strb	r5, [fp, #-92]	; 0xffffffa4
   1555c:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   15560:	mov	r1, r0
   15564:	mov	r0, r9
   15568:	bl	1791c <__assert_fail@plt+0x63a8>
   1556c:	add	r3, r8, #4
   15570:	mov	r1, r9
   15574:	mov	r2, r0
   15578:	add	r0, r8, #28
   1557c:	bl	18aa8 <__assert_fail@plt+0x7534>
   15580:	cmn	r0, #1
   15584:	str	r0, [fp, #-72]	; 0xffffffb8
   15588:	streq	r5, [fp, #-72]	; 0xffffffb8
   1558c:	beq	155a4 <__assert_fail@plt+0x4030>
   15590:	cmn	r0, #2
   15594:	bne	155b0 <__assert_fail@plt+0x403c>
   15598:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1559c:	bl	113c4 <strlen@plt>
   155a0:	str	r0, [fp, #-72]	; 0xffffffb8
   155a4:	mov	r3, #0
   155a8:	strb	r3, [fp, #-68]	; 0xffffffbc
   155ac:	b	151bc <__assert_fail@plt+0x3c48>
   155b0:	cmp	r0, #0
   155b4:	bne	155d8 <__assert_fail@plt+0x4064>
   155b8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   155bc:	str	r5, [fp, #-72]	; 0xffffffb8
   155c0:	ldrb	r3, [r3]
   155c4:	cmp	r3, #0
   155c8:	bne	15078 <__assert_fail@plt+0x3b04>
   155cc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   155d0:	cmp	r3, #0
   155d4:	bne	15098 <__assert_fail@plt+0x3b24>
   155d8:	add	r0, r8, #4
   155dc:	strb	r5, [fp, #-68]	; 0xffffffbc
   155e0:	bl	11244 <mbsinit@plt>
   155e4:	cmp	r0, #0
   155e8:	movne	r3, #0
   155ec:	strbne	r3, [fp, #-92]	; 0xffffffa4
   155f0:	b	151bc <__assert_fail@plt+0x3c48>
   155f4:	ldr	r8, [fp, #-188]	; 0xffffff44
   155f8:	add	r3, r7, #32
   155fc:	cmp	r8, r3
   15600:	strne	r8, [r5, #-16]
   15604:	bne	1561c <__assert_fail@plt+0x40a8>
   15608:	ldr	r2, [fp, #-184]	; 0xffffff48
   1560c:	mov	r1, r8
   15610:	mov	r0, r5
   15614:	bl	1122c <memcpy@plt>
   15618:	str	r5, [r5, #-16]
   1561c:	ldrb	r2, [fp, #-216]	; 0xffffff28
   15620:	ldr	r3, [fp, #-184]	; 0xffffff48
   15624:	add	r5, r5, #40	; 0x28
   15628:	strb	r2, [r5, #-48]	; 0xffffffd0
   1562c:	ldr	r2, [fp, #-216]	; 0xffffff28
   15630:	str	r3, [r5, #-52]	; 0xffffffcc
   15634:	cmp	r2, #0
   15638:	add	r8, r8, r3
   1563c:	ldrne	r2, [fp, #-176]	; 0xffffff50
   15640:	mov	r3, #0
   15644:	strne	r2, [r5, #-44]	; 0xffffffd4
   15648:	str	r8, [fp, #-188]	; 0xffffff44
   1564c:	strb	r3, [fp, #-192]	; 0xffffff40
   15650:	b	14f44 <__assert_fail@plt+0x39d0>
   15654:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15658:	ldr	r2, [fp, #-128]	; 0xffffff80
   1565c:	sub	sl, sl, #1
   15660:	add	r3, r3, r2
   15664:	str	r3, [fp, #-132]	; 0xffffff7c
   15668:	mov	r3, #0
   1566c:	strb	r3, [fp, #-136]	; 0xffffff78
   15670:	b	152e4 <__assert_fail@plt+0x3d70>
   15674:	andeq	fp, r1, r0, lsr r7
   15678:	andeq	fp, r1, r4, lsl #5
   1567c:	muleq	r1, r7, r2
   15680:	andeq	fp, r1, r1, lsr #5
   15684:			; <UNDEFINED> instruction: 0x0001b2b8
   15688:	andeq	fp, r1, pc, asr #5
   1568c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15690:	sub	sp, sp, #308	; 0x134
   15694:	mov	r6, r1
   15698:	mov	r4, r0
   1569c:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   156a0:	ldrb	r7, [r6]
   156a4:	cmp	r0, #1
   156a8:	bls	15f78 <__assert_fail@plt+0x4a04>
   156ac:	add	r8, sp, #304	; 0x130
   156b0:	mov	r3, #0
   156b4:	ldr	r2, [pc, #2976]	; 1625c <__assert_fail@plt+0x4ce8>
   156b8:	strb	r3, [r8, #-280]!	; 0xfffffee8
   156bc:	str	r3, [sp, #28]
   156c0:	str	r3, [sp, #32]
   156c4:	strb	r3, [sp, #36]	; 0x24
   156c8:	lsr	r3, r7, #5
   156cc:	and	r5, r7, #31
   156d0:	ldr	r3, [r2, r3, lsl #2]
   156d4:	str	r6, [sp, #40]	; 0x28
   156d8:	str	r2, [sp]
   156dc:	lsr	r5, r3, r5
   156e0:	ands	r5, r5, #1
   156e4:	beq	15720 <__assert_fail@plt+0x41ac>
   156e8:	mov	r3, #1
   156ec:	str	r3, [sp, #44]	; 0x2c
   156f0:	str	r7, [sp, #52]	; 0x34
   156f4:	strb	r3, [sp, #48]	; 0x30
   156f8:	mov	r3, #1
   156fc:	strb	r3, [sp, #36]	; 0x24
   15700:	ldrb	r3, [sp, #48]	; 0x30
   15704:	cmp	r3, #0
   15708:	beq	16054 <__assert_fail@plt+0x4ae0>
   1570c:	ldr	r3, [sp, #52]	; 0x34
   15710:	cmp	r3, #0
   15714:	bne	16054 <__assert_fail@plt+0x4ae0>
   15718:	mov	r0, r4
   1571c:	b	15f70 <__assert_fail@plt+0x49fc>
   15720:	add	r0, sp, #28
   15724:	bl	11244 <mbsinit@plt>
   15728:	cmp	r0, #0
   1572c:	bne	15744 <__assert_fail@plt+0x41d0>
   15730:	ldr	r3, [pc, #2856]	; 16260 <__assert_fail@plt+0x4cec>
   15734:	ldr	r1, [pc, #2856]	; 16264 <__assert_fail@plt+0x4cf0>
   15738:	ldr	r0, [pc, #2856]	; 16268 <__assert_fail@plt+0x4cf4>
   1573c:	mov	r2, #143	; 0x8f
   15740:	bl	11574 <__assert_fail@plt>
   15744:	mov	r7, #1
   15748:	strb	r7, [sp, #24]
   1574c:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   15750:	mov	r1, r0
   15754:	mov	r0, r6
   15758:	bl	1791c <__assert_fail@plt+0x63a8>
   1575c:	add	r3, sp, #28
   15760:	mov	r1, r6
   15764:	mov	r2, r0
   15768:	add	r0, r8, #28
   1576c:	bl	18aa8 <__assert_fail@plt+0x7534>
   15770:	cmn	r0, #1
   15774:	str	r0, [sp, #44]	; 0x2c
   15778:	streq	r7, [sp, #44]	; 0x2c
   1577c:	beq	15794 <__assert_fail@plt+0x4220>
   15780:	cmn	r0, #2
   15784:	bne	1579c <__assert_fail@plt+0x4228>
   15788:	ldr	r0, [sp, #40]	; 0x28
   1578c:	bl	113c4 <strlen@plt>
   15790:	str	r0, [sp, #44]	; 0x2c
   15794:	strb	r5, [sp, #48]	; 0x30
   15798:	b	156f8 <__assert_fail@plt+0x4184>
   1579c:	cmp	r0, #0
   157a0:	bne	157ec <__assert_fail@plt+0x4278>
   157a4:	ldr	r3, [sp, #40]	; 0x28
   157a8:	str	r7, [sp, #44]	; 0x2c
   157ac:	ldrb	r3, [r3]
   157b0:	cmp	r3, #0
   157b4:	beq	157cc <__assert_fail@plt+0x4258>
   157b8:	ldr	r3, [pc, #2720]	; 16260 <__assert_fail@plt+0x4cec>
   157bc:	mov	r2, #171	; 0xab
   157c0:	ldr	r1, [pc, #2716]	; 16264 <__assert_fail@plt+0x4cf0>
   157c4:	ldr	r0, [pc, #2720]	; 1626c <__assert_fail@plt+0x4cf8>
   157c8:	b	15740 <__assert_fail@plt+0x41cc>
   157cc:	ldr	r3, [sp, #52]	; 0x34
   157d0:	cmp	r3, #0
   157d4:	beq	157ec <__assert_fail@plt+0x4278>
   157d8:	ldr	r3, [pc, #2688]	; 16260 <__assert_fail@plt+0x4cec>
   157dc:	mov	r2, #172	; 0xac
   157e0:	ldr	r1, [pc, #2684]	; 16264 <__assert_fail@plt+0x4cf0>
   157e4:	ldr	r0, [pc, #2692]	; 16270 <__assert_fail@plt+0x4cfc>
   157e8:	b	15740 <__assert_fail@plt+0x41cc>
   157ec:	mov	r3, #1
   157f0:	add	r0, sp, #28
   157f4:	strb	r3, [sp, #48]	; 0x30
   157f8:	bl	11244 <mbsinit@plt>
   157fc:	cmp	r0, #0
   15800:	movne	r3, #0
   15804:	strbne	r3, [sp, #24]
   15808:	b	156f8 <__assert_fail@plt+0x4184>
   1580c:	add	r0, r9, #4
   15810:	bl	11244 <mbsinit@plt>
   15814:	cmp	r0, #0
   15818:	beq	15730 <__assert_fail@plt+0x41bc>
   1581c:	mov	r3, #1
   15820:	strb	r3, [sp, #136]	; 0x88
   15824:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   15828:	mov	r1, r0
   1582c:	mov	r0, sl
   15830:	bl	1791c <__assert_fail@plt+0x63a8>
   15834:	add	r3, r9, #4
   15838:	mov	r1, sl
   1583c:	mov	r2, r0
   15840:	add	r0, r9, #28
   15844:	bl	18aa8 <__assert_fail@plt+0x7534>
   15848:	cmn	r0, #1
   1584c:	str	r0, [sp, #156]	; 0x9c
   15850:	bne	15864 <__assert_fail@plt+0x42f0>
   15854:	mov	r3, #1
   15858:	str	r3, [sp, #156]	; 0x9c
   1585c:	mov	r3, #0
   15860:	b	15f4c <__assert_fail@plt+0x49d8>
   15864:	cmn	r0, #2
   15868:	bne	1587c <__assert_fail@plt+0x4308>
   1586c:	ldr	r0, [sp, #152]	; 0x98
   15870:	bl	113c4 <strlen@plt>
   15874:	str	r0, [sp, #156]	; 0x9c
   15878:	b	1585c <__assert_fail@plt+0x42e8>
   1587c:	cmp	r0, #0
   15880:	bne	158a8 <__assert_fail@plt+0x4334>
   15884:	mov	r3, #1
   15888:	str	r3, [sp, #156]	; 0x9c
   1588c:	ldr	r3, [sp, #152]	; 0x98
   15890:	ldrb	r3, [r3]
   15894:	cmp	r3, #0
   15898:	bne	157b8 <__assert_fail@plt+0x4244>
   1589c:	ldr	r3, [sp, #164]	; 0xa4
   158a0:	cmp	r3, #0
   158a4:	bne	157d8 <__assert_fail@plt+0x4264>
   158a8:	mov	r3, #1
   158ac:	add	r0, r9, #4
   158b0:	strb	r3, [sp, #160]	; 0xa0
   158b4:	bl	11244 <mbsinit@plt>
   158b8:	cmp	r0, #0
   158bc:	movne	r3, #0
   158c0:	strbne	r3, [sp, #136]	; 0x88
   158c4:	b	15f50 <__assert_fail@plt+0x49dc>
   158c8:	ldrb	r3, [sp, #92]	; 0x5c
   158cc:	cmp	r3, #0
   158d0:	bne	15920 <__assert_fail@plt+0x43ac>
   158d4:	ldrb	r3, [sp, #80]	; 0x50
   158d8:	ldr	sl, [sp, #96]	; 0x60
   158dc:	cmp	r3, #0
   158e0:	bne	15970 <__assert_fail@plt+0x43fc>
   158e4:	ldrb	r3, [sl]
   158e8:	ldr	r1, [sp]
   158ec:	lsr	r2, r3, #5
   158f0:	and	r3, r3, #31
   158f4:	ldr	r2, [r1, r2, lsl #2]
   158f8:	lsr	r3, r2, r3
   158fc:	tst	r3, #1
   15900:	beq	15958 <__assert_fail@plt+0x43e4>
   15904:	mov	r3, #1
   15908:	str	r3, [sp, #100]	; 0x64
   1590c:	ldrb	r2, [sl]
   15910:	str	r2, [sp, #108]	; 0x6c
   15914:	strb	r3, [sp, #104]	; 0x68
   15918:	mov	r3, #1
   1591c:	strb	r3, [sp, #92]	; 0x5c
   15920:	ldrb	r3, [sp, #104]	; 0x68
   15924:	cmp	r3, #0
   15928:	beq	15938 <__assert_fail@plt+0x43c4>
   1592c:	ldr	r3, [sp, #108]	; 0x6c
   15930:	cmp	r3, #0
   15934:	beq	160dc <__assert_fail@plt+0x4b68>
   15938:	ldr	r3, [sp, #96]	; 0x60
   1593c:	ldr	r2, [sp, #100]	; 0x64
   15940:	sub	r5, r5, #1
   15944:	add	r3, r3, r2
   15948:	str	r3, [sp, #96]	; 0x60
   1594c:	mov	r3, #0
   15950:	strb	r3, [sp, #92]	; 0x5c
   15954:	b	160d4 <__assert_fail@plt+0x4b60>
   15958:	add	r0, r7, #4
   1595c:	bl	11244 <mbsinit@plt>
   15960:	cmp	r0, #0
   15964:	beq	15730 <__assert_fail@plt+0x41bc>
   15968:	mov	r3, #1
   1596c:	strb	r3, [sp, #80]	; 0x50
   15970:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   15974:	mov	r1, r0
   15978:	mov	r0, sl
   1597c:	bl	1791c <__assert_fail@plt+0x63a8>
   15980:	add	r3, r7, #4
   15984:	mov	r1, sl
   15988:	mov	r2, r0
   1598c:	add	r0, r7, #28
   15990:	bl	18aa8 <__assert_fail@plt+0x7534>
   15994:	cmn	r0, #1
   15998:	str	r0, [sp, #100]	; 0x64
   1599c:	bne	159b0 <__assert_fail@plt+0x443c>
   159a0:	mov	r3, #1
   159a4:	str	r3, [sp, #100]	; 0x64
   159a8:	mov	r3, #0
   159ac:	b	15914 <__assert_fail@plt+0x43a0>
   159b0:	cmn	r0, #2
   159b4:	bne	159c8 <__assert_fail@plt+0x4454>
   159b8:	ldr	r0, [sp, #96]	; 0x60
   159bc:	bl	113c4 <strlen@plt>
   159c0:	str	r0, [sp, #100]	; 0x64
   159c4:	b	159a8 <__assert_fail@plt+0x4434>
   159c8:	cmp	r0, #0
   159cc:	bne	159f4 <__assert_fail@plt+0x4480>
   159d0:	mov	r3, #1
   159d4:	str	r3, [sp, #100]	; 0x64
   159d8:	ldr	r3, [sp, #96]	; 0x60
   159dc:	ldrb	r3, [r3]
   159e0:	cmp	r3, #0
   159e4:	bne	157b8 <__assert_fail@plt+0x4244>
   159e8:	ldr	r3, [sp, #108]	; 0x6c
   159ec:	cmp	r3, #0
   159f0:	bne	157d8 <__assert_fail@plt+0x4264>
   159f4:	mov	r3, #1
   159f8:	ldr	r0, [sp, #16]
   159fc:	strb	r3, [sp, #104]	; 0x68
   15a00:	bl	11244 <mbsinit@plt>
   15a04:	cmp	r0, #0
   15a08:	movne	r3, #0
   15a0c:	strbne	r3, [sp, #80]	; 0x50
   15a10:	b	15918 <__assert_fail@plt+0x43a4>
   15a14:	add	r0, r7, #4
   15a18:	bl	11244 <mbsinit@plt>
   15a1c:	cmp	r0, #0
   15a20:	beq	15730 <__assert_fail@plt+0x41bc>
   15a24:	mov	r3, #1
   15a28:	strb	r3, [sp, #80]	; 0x50
   15a2c:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   15a30:	mov	r1, r0
   15a34:	mov	r0, r5
   15a38:	bl	1791c <__assert_fail@plt+0x63a8>
   15a3c:	add	r3, r7, #4
   15a40:	mov	r1, r5
   15a44:	mov	r2, r0
   15a48:	add	r0, r7, #28
   15a4c:	bl	18aa8 <__assert_fail@plt+0x7534>
   15a50:	cmn	r0, #1
   15a54:	str	r0, [sp, #100]	; 0x64
   15a58:	bne	15a6c <__assert_fail@plt+0x44f8>
   15a5c:	mov	r3, #1
   15a60:	str	r3, [sp, #100]	; 0x64
   15a64:	mov	r3, #0
   15a68:	b	16128 <__assert_fail@plt+0x4bb4>
   15a6c:	cmn	r0, #2
   15a70:	bne	15a84 <__assert_fail@plt+0x4510>
   15a74:	ldr	r0, [sp, #96]	; 0x60
   15a78:	bl	113c4 <strlen@plt>
   15a7c:	str	r0, [sp, #100]	; 0x64
   15a80:	b	15a64 <__assert_fail@plt+0x44f0>
   15a84:	cmp	r0, #0
   15a88:	bne	15ab0 <__assert_fail@plt+0x453c>
   15a8c:	mov	r3, #1
   15a90:	str	r3, [sp, #100]	; 0x64
   15a94:	ldr	r3, [sp, #96]	; 0x60
   15a98:	ldrb	r3, [r3]
   15a9c:	cmp	r3, #0
   15aa0:	bne	157b8 <__assert_fail@plt+0x4244>
   15aa4:	ldr	r3, [sp, #108]	; 0x6c
   15aa8:	cmp	r3, #0
   15aac:	bne	157d8 <__assert_fail@plt+0x4264>
   15ab0:	mov	r3, #1
   15ab4:	ldr	r0, [sp, #16]
   15ab8:	strb	r3, [sp, #104]	; 0x68
   15abc:	bl	11244 <mbsinit@plt>
   15ac0:	cmp	r0, #0
   15ac4:	movne	r3, #0
   15ac8:	strbne	r3, [sp, #80]	; 0x50
   15acc:	b	1612c <__assert_fail@plt+0x4bb8>
   15ad0:	mov	r5, r8
   15ad4:	ldr	r3, [sp, #8]
   15ad8:	add	r8, r8, #1
   15adc:	add	r3, r3, #1
   15ae0:	str	r3, [sp, #8]
   15ae4:	ldrb	r3, [sp, #160]	; 0xa0
   15ae8:	cmp	r3, #0
   15aec:	beq	15c2c <__assert_fail@plt+0x46b8>
   15af0:	ldrb	r3, [sp, #48]	; 0x30
   15af4:	cmp	r3, #0
   15af8:	beq	15c2c <__assert_fail@plt+0x46b8>
   15afc:	ldr	r3, [sp, #52]	; 0x34
   15b00:	ldr	r0, [sp, #164]	; 0xa4
   15b04:	sub	r0, r0, r3
   15b08:	clz	r0, r0
   15b0c:	lsr	r0, r0, #5
   15b10:	cmp	r0, #0
   15b14:	beq	15ef0 <__assert_fail@plt+0x497c>
   15b18:	mov	lr, r9
   15b1c:	add	ip, sp, #192	; 0xc0
   15b20:	ldm	lr!, {r0, r1, r2, r3}
   15b24:	add	sl, sp, #304	; 0x130
   15b28:	stmia	ip!, {r0, r1, r2, r3}
   15b2c:	ldm	lr!, {r0, r1, r2, r3}
   15b30:	stmia	ip!, {r0, r1, r2, r3}
   15b34:	ldm	lr!, {r0, r1, r2, r3}
   15b38:	stmia	ip!, {r0, r1, r2, r3}
   15b3c:	ldm	lr, {r0, r1}
   15b40:	ldr	r2, [sp, #212]	; 0xd4
   15b44:	ldr	r3, [sp, #208]	; 0xd0
   15b48:	stm	ip, {r0, r1}
   15b4c:	add	r3, r3, r2
   15b50:	mov	r2, #0
   15b54:	str	r3, [sp, #208]	; 0xd0
   15b58:	strb	r2, [sp, #204]	; 0xcc
   15b5c:	str	r6, [sp, #264]	; 0x108
   15b60:	ldrb	r1, [r6]
   15b64:	strb	r2, [sl, #-56]!	; 0xffffffc8
   15b68:	add	r3, sl, #4
   15b6c:	ldr	ip, [sp]
   15b70:	str	r2, [sp, #252]	; 0xfc
   15b74:	str	r2, [r3, #4]
   15b78:	strb	r2, [sp, #260]	; 0x104
   15b7c:	lsr	r2, r1, #5
   15b80:	and	r0, r1, #31
   15b84:	ldr	r2, [ip, r2, lsl #2]
   15b88:	lsr	r2, r2, r0
   15b8c:	ands	r2, r2, #1
   15b90:	movne	r3, #1
   15b94:	str	r2, [sp, #12]
   15b98:	strne	r3, [sp, #268]	; 0x10c
   15b9c:	strne	r1, [sp, #276]	; 0x114
   15ba0:	bne	15bf8 <__assert_fail@plt+0x4684>
   15ba4:	mov	r0, r3
   15ba8:	str	r3, [sp, #20]
   15bac:	bl	11244 <mbsinit@plt>
   15bb0:	cmp	r0, #0
   15bb4:	beq	15730 <__assert_fail@plt+0x41bc>
   15bb8:	mov	fp, #1
   15bbc:	strb	fp, [sp, #248]	; 0xf8
   15bc0:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   15bc4:	mov	r1, r0
   15bc8:	mov	r0, r6
   15bcc:	bl	1791c <__assert_fail@plt+0x63a8>
   15bd0:	ldr	r3, [sp, #20]
   15bd4:	mov	r1, r6
   15bd8:	mov	r2, r0
   15bdc:	add	r0, sl, #28
   15be0:	bl	18aa8 <__assert_fail@plt+0x7534>
   15be4:	cmn	r0, #1
   15be8:	str	r0, [sp, #268]	; 0x10c
   15bec:	bne	15c58 <__assert_fail@plt+0x46e4>
   15bf0:	str	fp, [sp, #268]	; 0x10c
   15bf4:	ldrb	r3, [sp, #12]
   15bf8:	strb	r3, [sp, #272]	; 0x110
   15bfc:	mov	r3, #1
   15c00:	strb	r3, [sp, #260]	; 0x104
   15c04:	ldrb	r3, [sp, #272]	; 0x110
   15c08:	cmp	r3, #0
   15c0c:	beq	16170 <__assert_fail@plt+0x4bfc>
   15c10:	ldr	r3, [sp, #276]	; 0x114
   15c14:	cmp	r3, #0
   15c18:	bne	16170 <__assert_fail@plt+0x4bfc>
   15c1c:	bl	11544 <abort@plt>
   15c20:	mov	r5, r8
   15c24:	str	r3, [sp, #4]
   15c28:	b	15ad4 <__assert_fail@plt+0x4560>
   15c2c:	ldr	r2, [sp, #156]	; 0x9c
   15c30:	ldr	r3, [sp, #44]	; 0x2c
   15c34:	cmp	r2, r3
   15c38:	movne	r0, #0
   15c3c:	bne	15b10 <__assert_fail@plt+0x459c>
   15c40:	ldr	r1, [sp, #40]	; 0x28
   15c44:	ldr	r0, [sp, #152]	; 0x98
   15c48:	bl	1125c <memcmp@plt>
   15c4c:	clz	r0, r0
   15c50:	lsr	r0, r0, #5
   15c54:	b	15b10 <__assert_fail@plt+0x459c>
   15c58:	cmn	r0, #2
   15c5c:	bne	15c70 <__assert_fail@plt+0x46fc>
   15c60:	ldr	r0, [sp, #264]	; 0x108
   15c64:	bl	113c4 <strlen@plt>
   15c68:	str	r0, [sp, #268]	; 0x10c
   15c6c:	b	15bf4 <__assert_fail@plt+0x4680>
   15c70:	cmp	r0, #0
   15c74:	bne	15c98 <__assert_fail@plt+0x4724>
   15c78:	ldr	r3, [sp, #264]	; 0x108
   15c7c:	str	fp, [sp, #268]	; 0x10c
   15c80:	ldrb	r3, [r3]
   15c84:	cmp	r3, #0
   15c88:	bne	157b8 <__assert_fail@plt+0x4244>
   15c8c:	ldr	r3, [sp, #276]	; 0x114
   15c90:	cmp	r3, #0
   15c94:	bne	157d8 <__assert_fail@plt+0x4264>
   15c98:	mov	r3, #1
   15c9c:	add	r0, sp, #252	; 0xfc
   15ca0:	strb	r3, [sp, #272]	; 0x110
   15ca4:	bl	11244 <mbsinit@plt>
   15ca8:	cmp	r0, #0
   15cac:	movne	r3, #0
   15cb0:	strbne	r3, [sp, #248]	; 0xf8
   15cb4:	b	15bfc <__assert_fail@plt+0x4688>
   15cb8:	add	r0, sp, #252	; 0xfc
   15cbc:	bl	11244 <mbsinit@plt>
   15cc0:	cmp	r0, #0
   15cc4:	beq	15730 <__assert_fail@plt+0x41bc>
   15cc8:	mov	r3, #1
   15ccc:	strb	r3, [sp, #248]	; 0xf8
   15cd0:	ldr	fp, [sp, #264]	; 0x108
   15cd4:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   15cd8:	mov	r1, r0
   15cdc:	mov	r0, fp
   15ce0:	bl	1791c <__assert_fail@plt+0x63a8>
   15ce4:	add	r3, sl, #4
   15ce8:	mov	r1, fp
   15cec:	mov	r2, r0
   15cf0:	add	r0, sl, #28
   15cf4:	bl	18aa8 <__assert_fail@plt+0x7534>
   15cf8:	cmn	r0, #1
   15cfc:	str	r0, [sp, #268]	; 0x10c
   15d00:	bne	15d14 <__assert_fail@plt+0x47a0>
   15d04:	mov	r3, #1
   15d08:	str	r3, [sp, #268]	; 0x10c
   15d0c:	mov	r3, #0
   15d10:	b	15ec4 <__assert_fail@plt+0x4950>
   15d14:	cmn	r0, #2
   15d18:	bne	15d2c <__assert_fail@plt+0x47b8>
   15d1c:	ldr	r0, [sp, #264]	; 0x108
   15d20:	bl	113c4 <strlen@plt>
   15d24:	str	r0, [sp, #268]	; 0x10c
   15d28:	b	15d0c <__assert_fail@plt+0x4798>
   15d2c:	cmp	r0, #0
   15d30:	bne	15d58 <__assert_fail@plt+0x47e4>
   15d34:	mov	r3, #1
   15d38:	str	r3, [sp, #268]	; 0x10c
   15d3c:	ldr	r3, [sp, #264]	; 0x108
   15d40:	ldrb	r3, [r3]
   15d44:	cmp	r3, #0
   15d48:	bne	157b8 <__assert_fail@plt+0x4244>
   15d4c:	ldr	r3, [sp, #276]	; 0x114
   15d50:	cmp	r3, #0
   15d54:	bne	157d8 <__assert_fail@plt+0x4264>
   15d58:	mov	r3, #1
   15d5c:	add	r0, sp, #252	; 0xfc
   15d60:	strb	r3, [sp, #272]	; 0x110
   15d64:	bl	11244 <mbsinit@plt>
   15d68:	cmp	r0, #0
   15d6c:	movne	r3, #0
   15d70:	strbne	r3, [sp, #248]	; 0xf8
   15d74:	b	15ec8 <__assert_fail@plt+0x4954>
   15d78:	add	r0, sp, #196	; 0xc4
   15d7c:	bl	11244 <mbsinit@plt>
   15d80:	cmp	r0, #0
   15d84:	beq	15730 <__assert_fail@plt+0x41bc>
   15d88:	mov	r3, #1
   15d8c:	strb	r3, [sp, #192]	; 0xc0
   15d90:	ldr	fp, [sp, #208]	; 0xd0
   15d94:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   15d98:	mov	r1, r0
   15d9c:	mov	r0, fp
   15da0:	bl	1791c <__assert_fail@plt+0x63a8>
   15da4:	add	r3, sp, #196	; 0xc4
   15da8:	mov	r1, fp
   15dac:	mov	r2, r0
   15db0:	add	r0, sp, #220	; 0xdc
   15db4:	bl	18aa8 <__assert_fail@plt+0x7534>
   15db8:	cmn	r0, #1
   15dbc:	str	r0, [sp, #212]	; 0xd4
   15dc0:	bne	15dd4 <__assert_fail@plt+0x4860>
   15dc4:	mov	r3, #1
   15dc8:	str	r3, [sp, #212]	; 0xd4
   15dcc:	mov	r3, #0
   15dd0:	b	161d8 <__assert_fail@plt+0x4c64>
   15dd4:	cmn	r0, #2
   15dd8:	bne	15dec <__assert_fail@plt+0x4878>
   15ddc:	ldr	r0, [sp, #208]	; 0xd0
   15de0:	bl	113c4 <strlen@plt>
   15de4:	str	r0, [sp, #212]	; 0xd4
   15de8:	b	15dcc <__assert_fail@plt+0x4858>
   15dec:	cmp	r0, #0
   15df0:	bne	15e18 <__assert_fail@plt+0x48a4>
   15df4:	mov	r3, #1
   15df8:	str	r3, [sp, #212]	; 0xd4
   15dfc:	ldr	r3, [sp, #208]	; 0xd0
   15e00:	ldrb	r3, [r3]
   15e04:	cmp	r3, #0
   15e08:	bne	157b8 <__assert_fail@plt+0x4244>
   15e0c:	ldr	r3, [sp, #220]	; 0xdc
   15e10:	cmp	r3, #0
   15e14:	bne	157d8 <__assert_fail@plt+0x4264>
   15e18:	mov	r3, #1
   15e1c:	add	r0, sp, #196	; 0xc4
   15e20:	strb	r3, [sp, #216]	; 0xd8
   15e24:	bl	11244 <mbsinit@plt>
   15e28:	cmp	r0, #0
   15e2c:	movne	r3, #0
   15e30:	strbne	r3, [sp, #192]	; 0xc0
   15e34:	b	161dc <__assert_fail@plt+0x4c68>
   15e38:	ldrb	r3, [sp, #272]	; 0x110
   15e3c:	cmp	r3, #0
   15e40:	beq	16208 <__assert_fail@plt+0x4c94>
   15e44:	ldr	r0, [sp, #276]	; 0x114
   15e48:	ldr	r3, [sp, #220]	; 0xdc
   15e4c:	subs	r0, r3, r0
   15e50:	movne	r0, #1
   15e54:	cmp	r0, #0
   15e58:	bne	15ef0 <__assert_fail@plt+0x497c>
   15e5c:	ldr	r2, [sp, #212]	; 0xd4
   15e60:	ldr	r3, [sp, #208]	; 0xd0
   15e64:	strb	r0, [sp, #204]	; 0xcc
   15e68:	add	r3, r3, r2
   15e6c:	str	r3, [sp, #208]	; 0xd0
   15e70:	ldr	r2, [sp, #268]	; 0x10c
   15e74:	ldr	r3, [sp, #264]	; 0x108
   15e78:	strb	r0, [sp, #260]	; 0x104
   15e7c:	add	r3, r3, r2
   15e80:	str	r3, [sp, #264]	; 0x108
   15e84:	ldrb	r3, [sp, #248]	; 0xf8
   15e88:	cmp	r3, #0
   15e8c:	bne	15cd0 <__assert_fail@plt+0x475c>
   15e90:	ldr	r1, [sp, #264]	; 0x108
   15e94:	ldr	r0, [sp]
   15e98:	ldrb	r3, [r1]
   15e9c:	lsr	r2, r3, #5
   15ea0:	and	r3, r3, #31
   15ea4:	ldr	r2, [r0, r2, lsl #2]
   15ea8:	lsr	r3, r2, r3
   15eac:	tst	r3, #1
   15eb0:	beq	15cb8 <__assert_fail@plt+0x4744>
   15eb4:	mov	r3, #1
   15eb8:	str	r3, [sp, #268]	; 0x10c
   15ebc:	ldrb	r2, [r1]
   15ec0:	str	r2, [sp, #276]	; 0x114
   15ec4:	strb	r3, [sp, #272]	; 0x110
   15ec8:	mov	r3, #1
   15ecc:	strb	r3, [sp, #260]	; 0x104
   15ed0:	ldrb	r3, [sp, #272]	; 0x110
   15ed4:	cmp	r3, #0
   15ed8:	beq	1618c <__assert_fail@plt+0x4c18>
   15edc:	ldr	r3, [sp, #276]	; 0x114
   15ee0:	cmp	r3, #0
   15ee4:	bne	1618c <__assert_fail@plt+0x4c18>
   15ee8:	ldr	r0, [sp, #152]	; 0x98
   15eec:	b	15f70 <__assert_fail@plt+0x49fc>
   15ef0:	ldr	r3, [sp, #152]	; 0x98
   15ef4:	ldr	r2, [sp, #156]	; 0x9c
   15ef8:	ldr	fp, [sp, #4]
   15efc:	add	r3, r3, r2
   15f00:	str	r3, [sp, #152]	; 0x98
   15f04:	mov	r3, #0
   15f08:	strb	r3, [sp, #148]	; 0x94
   15f0c:	ldrb	r3, [sp, #136]	; 0x88
   15f10:	ldr	sl, [sp, #152]	; 0x98
   15f14:	cmp	r3, #0
   15f18:	bne	15824 <__assert_fail@plt+0x42b0>
   15f1c:	ldrb	r3, [sl]
   15f20:	ldr	r1, [sp]
   15f24:	lsr	r2, r3, #5
   15f28:	and	r3, r3, #31
   15f2c:	ldr	r2, [r1, r2, lsl #2]
   15f30:	lsr	r3, r2, r3
   15f34:	tst	r3, #1
   15f38:	beq	1580c <__assert_fail@plt+0x4298>
   15f3c:	mov	r3, #1
   15f40:	str	r3, [sp, #156]	; 0x9c
   15f44:	ldrb	r2, [sl]
   15f48:	str	r2, [sp, #164]	; 0xa4
   15f4c:	strb	r3, [sp, #160]	; 0xa0
   15f50:	mov	r3, #1
   15f54:	strb	r3, [sp, #148]	; 0x94
   15f58:	ldrb	r3, [sp, #160]	; 0xa0
   15f5c:	cmp	r3, #0
   15f60:	beq	160a0 <__assert_fail@plt+0x4b2c>
   15f64:	ldr	r0, [sp, #164]	; 0xa4
   15f68:	cmp	r0, #0
   15f6c:	bne	160a0 <__assert_fail@plt+0x4b2c>
   15f70:	add	sp, sp, #308	; 0x134
   15f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f78:	cmp	r7, #0
   15f7c:	beq	15718 <__assert_fail@plt+0x41a4>
   15f80:	mov	sl, #0
   15f84:	add	fp, r6, #1
   15f88:	mov	r3, r6
   15f8c:	mov	r5, sl
   15f90:	mov	r9, sl
   15f94:	mov	r2, #1
   15f98:	ldrb	r1, [r4]
   15f9c:	cmp	r1, #0
   15fa0:	bne	15fac <__assert_fail@plt+0x4a38>
   15fa4:	mov	r0, #0
   15fa8:	b	15f70 <__assert_fail@plt+0x49fc>
   15fac:	cmp	r9, #9
   15fb0:	movls	r8, #0
   15fb4:	andhi	r8, r2, #1
   15fb8:	cmp	r8, #0
   15fbc:	beq	1604c <__assert_fail@plt+0x4ad8>
   15fc0:	add	r2, r9, r9, lsl #2
   15fc4:	cmp	r5, r2
   15fc8:	bcc	15ff8 <__assert_fail@plt+0x4a84>
   15fcc:	cmp	r3, #0
   15fd0:	beq	16230 <__assert_fail@plt+0x4cbc>
   15fd4:	sub	r1, r5, sl
   15fd8:	mov	r0, r3
   15fdc:	str	r3, [sp]
   15fe0:	bl	11460 <strnlen@plt>
   15fe4:	ldr	r3, [sp]
   15fe8:	mov	sl, r5
   15fec:	ldrb	r2, [r3, r0]!
   15ff0:	cmp	r2, #0
   15ff4:	beq	16230 <__assert_fail@plt+0x4cbc>
   15ff8:	ldrb	r2, [r4]
   15ffc:	add	r9, r9, #1
   16000:	add	r1, r5, #1
   16004:	cmp	r2, r7
   16008:	bne	1603c <__assert_fail@plt+0x4ac8>
   1600c:	mov	r2, fp
   16010:	mov	lr, r4
   16014:	sub	r5, r5, r6
   16018:	ldrb	ip, [r2], #1
   1601c:	cmp	ip, #0
   16020:	beq	15718 <__assert_fail@plt+0x41a4>
   16024:	ldrb	r0, [lr, #1]!
   16028:	cmp	r0, #0
   1602c:	beq	15fa4 <__assert_fail@plt+0x4a30>
   16030:	cmp	ip, r0
   16034:	add	r1, r5, r2
   16038:	beq	16018 <__assert_fail@plt+0x4aa4>
   1603c:	add	r4, r4, #1
   16040:	mov	r5, r1
   16044:	mov	r2, r8
   16048:	b	15f98 <__assert_fail@plt+0x4a24>
   1604c:	mov	r8, r2
   16050:	b	15ff8 <__assert_fail@plt+0x4a84>
   16054:	add	r7, sp, #304	; 0x130
   16058:	mov	r5, #0
   1605c:	add	r9, sp, #304	; 0x130
   16060:	strb	r5, [r7, #-224]!	; 0xffffff20
   16064:	add	r3, r7, #4
   16068:	str	r5, [sp, #84]	; 0x54
   1606c:	strb	r5, [r9, #-168]!	; 0xffffff58
   16070:	str	r5, [r7, #8]
   16074:	str	r5, [sp, #140]	; 0x8c
   16078:	str	r6, [sp, #96]	; 0x60
   1607c:	str	r5, [r9, #8]
   16080:	strb	r5, [sp, #92]	; 0x5c
   16084:	str	r4, [sp, #152]	; 0x98
   16088:	strb	r5, [sp, #148]	; 0x94
   1608c:	mov	r8, r5
   16090:	str	r5, [sp, #8]
   16094:	mov	fp, #1
   16098:	str	r3, [sp, #16]
   1609c:	b	15f0c <__assert_fail@plt+0x4998>
   160a0:	ldr	r3, [sp, #8]
   160a4:	cmp	r3, #9
   160a8:	movls	r3, #0
   160ac:	andhi	r3, fp, #1
   160b0:	cmp	r3, #0
   160b4:	str	r3, [sp, #4]
   160b8:	streq	fp, [sp, #4]
   160bc:	beq	15ad4 <__assert_fail@plt+0x4560>
   160c0:	ldr	r3, [sp, #8]
   160c4:	add	r3, r3, r3, lsl #2
   160c8:	cmp	r8, r3
   160cc:	bcc	15ad4 <__assert_fail@plt+0x4560>
   160d0:	sub	r5, r8, r5
   160d4:	cmp	r5, #0
   160d8:	bne	158c8 <__assert_fail@plt+0x4354>
   160dc:	ldrb	r3, [sp, #92]	; 0x5c
   160e0:	cmp	r3, #0
   160e4:	bne	16134 <__assert_fail@plt+0x4bc0>
   160e8:	ldrb	r3, [sp, #80]	; 0x50
   160ec:	ldr	r5, [sp, #96]	; 0x60
   160f0:	cmp	r3, #0
   160f4:	bne	15a2c <__assert_fail@plt+0x44b8>
   160f8:	ldrb	r3, [r5]
   160fc:	ldr	r1, [sp]
   16100:	lsr	r2, r3, #5
   16104:	and	r3, r3, #31
   16108:	ldr	r2, [r1, r2, lsl #2]
   1610c:	lsr	r3, r2, r3
   16110:	tst	r3, #1
   16114:	beq	15a14 <__assert_fail@plt+0x44a0>
   16118:	mov	r3, #1
   1611c:	str	r3, [sp, #100]	; 0x64
   16120:	ldrb	r2, [r5]
   16124:	str	r2, [sp, #108]	; 0x6c
   16128:	strb	r3, [sp, #104]	; 0x68
   1612c:	mov	r3, #1
   16130:	strb	r3, [sp, #92]	; 0x5c
   16134:	ldrb	r3, [sp, #104]	; 0x68
   16138:	cmp	r3, #0
   1613c:	beq	15ad0 <__assert_fail@plt+0x455c>
   16140:	ldr	r2, [sp, #108]	; 0x6c
   16144:	cmp	r2, #0
   16148:	bne	15c20 <__assert_fail@plt+0x46ac>
   1614c:	add	r2, sp, #248	; 0xf8
   16150:	mov	r1, r6
   16154:	mov	r0, r4
   16158:	bl	14e50 <__assert_fail@plt+0x38dc>
   1615c:	subs	r3, r0, #0
   16160:	str	r3, [sp, #4]
   16164:	beq	15ad0 <__assert_fail@plt+0x455c>
   16168:	ldr	r0, [sp, #248]	; 0xf8
   1616c:	b	15f70 <__assert_fail@plt+0x49fc>
   16170:	ldr	r3, [sp, #264]	; 0x108
   16174:	ldr	r2, [sp, #268]	; 0x10c
   16178:	add	r3, r3, r2
   1617c:	str	r3, [sp, #264]	; 0x108
   16180:	mov	r3, #0
   16184:	strb	r3, [sp, #260]	; 0x104
   16188:	b	15e84 <__assert_fail@plt+0x4910>
   1618c:	ldrb	r3, [sp, #204]	; 0xcc
   16190:	cmp	r3, #0
   16194:	bne	161e4 <__assert_fail@plt+0x4c70>
   16198:	ldrb	r3, [sp, #192]	; 0xc0
   1619c:	cmp	r3, #0
   161a0:	bne	15d90 <__assert_fail@plt+0x481c>
   161a4:	ldr	r1, [sp, #208]	; 0xd0
   161a8:	ldr	r0, [sp]
   161ac:	ldrb	r3, [r1]
   161b0:	lsr	r2, r3, #5
   161b4:	and	r3, r3, #31
   161b8:	ldr	r2, [r0, r2, lsl #2]
   161bc:	lsr	r3, r2, r3
   161c0:	tst	r3, #1
   161c4:	beq	15d78 <__assert_fail@plt+0x4804>
   161c8:	mov	r3, #1
   161cc:	str	r3, [sp, #212]	; 0xd4
   161d0:	ldrb	r2, [r1]
   161d4:	str	r2, [sp, #220]	; 0xdc
   161d8:	strb	r3, [sp, #216]	; 0xd8
   161dc:	mov	r3, #1
   161e0:	strb	r3, [sp, #204]	; 0xcc
   161e4:	ldrb	r3, [sp, #216]	; 0xd8
   161e8:	cmp	r3, #0
   161ec:	beq	161fc <__assert_fail@plt+0x4c88>
   161f0:	ldr	r0, [sp, #220]	; 0xdc
   161f4:	cmp	r0, #0
   161f8:	beq	15f70 <__assert_fail@plt+0x49fc>
   161fc:	cmp	r3, #0
   16200:	add	r8, r8, #1
   16204:	bne	15e38 <__assert_fail@plt+0x48c4>
   16208:	ldr	r2, [sp, #212]	; 0xd4
   1620c:	ldr	r3, [sp, #268]	; 0x10c
   16210:	cmp	r2, r3
   16214:	bne	15ef0 <__assert_fail@plt+0x497c>
   16218:	ldr	r1, [sp, #264]	; 0x108
   1621c:	ldr	r0, [sp, #208]	; 0xd0
   16220:	bl	1125c <memcmp@plt>
   16224:	adds	r0, r0, #0
   16228:	movne	r0, #1
   1622c:	b	15e54 <__assert_fail@plt+0x48e0>
   16230:	mov	r0, r6
   16234:	bl	113c4 <strlen@plt>
   16238:	add	r3, sp, #248	; 0xf8
   1623c:	mov	r1, r6
   16240:	mov	r2, r0
   16244:	mov	r0, r4
   16248:	bl	14d2c <__assert_fail@plt+0x37b8>
   1624c:	subs	r8, r0, #0
   16250:	bne	16168 <__assert_fail@plt+0x4bf4>
   16254:	mov	r3, r8
   16258:	b	15ff8 <__assert_fail@plt+0x4a84>
   1625c:	andeq	fp, r1, r0, lsr r7
   16260:	andeq	fp, r1, r4, lsl #5
   16264:	muleq	r1, r7, r2
   16268:	andeq	fp, r1, r1, lsr #5
   1626c:			; <UNDEFINED> instruction: 0x0001b2b8
   16270:	andeq	fp, r1, pc, asr #5
   16274:	push	{r4, r5, r6, lr}
   16278:	subs	r5, r0, #0
   1627c:	bne	16294 <__assert_fail@plt+0x4d20>
   16280:	ldr	r3, [pc, #124]	; 16304 <__assert_fail@plt+0x4d90>
   16284:	ldr	r0, [pc, #124]	; 16308 <__assert_fail@plt+0x4d94>
   16288:	ldr	r1, [r3]
   1628c:	bl	1152c <fputs@plt>
   16290:	bl	11544 <abort@plt>
   16294:	mov	r1, #47	; 0x2f
   16298:	bl	114b4 <strrchr@plt>
   1629c:	cmp	r0, #0
   162a0:	addne	r4, r0, #1
   162a4:	moveq	r4, r5
   162a8:	sub	r3, r4, r5
   162ac:	cmp	r3, #6
   162b0:	ble	162f0 <__assert_fail@plt+0x4d7c>
   162b4:	mov	r2, #7
   162b8:	ldr	r1, [pc, #76]	; 1630c <__assert_fail@plt+0x4d98>
   162bc:	sub	r0, r4, #7
   162c0:	bl	11538 <strncmp@plt>
   162c4:	cmp	r0, #0
   162c8:	bne	162f0 <__assert_fail@plt+0x4d7c>
   162cc:	mov	r2, #3
   162d0:	ldr	r1, [pc, #56]	; 16310 <__assert_fail@plt+0x4d9c>
   162d4:	mov	r0, r4
   162d8:	bl	11538 <strncmp@plt>
   162dc:	cmp	r0, #0
   162e0:	movne	r5, r4
   162e4:	ldreq	r3, [pc, #40]	; 16314 <__assert_fail@plt+0x4da0>
   162e8:	addeq	r5, r4, #3
   162ec:	streq	r5, [r3]
   162f0:	ldr	r3, [pc, #32]	; 16318 <__assert_fail@plt+0x4da4>
   162f4:	str	r5, [r3]
   162f8:	ldr	r3, [pc, #28]	; 1631c <__assert_fail@plt+0x4da8>
   162fc:	str	r5, [r3]
   16300:	pop	{r4, r5, r6, pc}
   16304:	ldrdeq	ip, [r2], -r0
   16308:	andeq	fp, r1, r1, ror #5
   1630c:	andeq	fp, r1, r9, lsl r3
   16310:	andeq	fp, r1, r1, lsr #6
   16314:			; <UNDEFINED> instruction: 0x0002c1b8
   16318:			; <UNDEFINED> instruction: 0x0002c2b4
   1631c:	andeq	ip, r2, r0, asr #3
   16320:	push	{r4, r5, r6, lr}
   16324:	mov	r2, #48	; 0x30
   16328:	mov	r5, r1
   1632c:	mov	r1, #0
   16330:	mov	r4, r0
   16334:	bl	11418 <memset@plt>
   16338:	cmp	r5, #10
   1633c:	bne	16344 <__assert_fail@plt+0x4dd0>
   16340:	bl	11544 <abort@plt>
   16344:	str	r5, [r4]
   16348:	mov	r0, r4
   1634c:	pop	{r4, r5, r6, pc}
   16350:	push	{r4, r5, r6, lr}
   16354:	mov	r4, r0
   16358:	mov	r5, r1
   1635c:	bl	18c6c <__assert_fail@plt+0x76f8>
   16360:	ldrb	r3, [r0]
   16364:	bic	r3, r3, #32
   16368:	cmp	r3, #85	; 0x55
   1636c:	bne	163dc <__assert_fail@plt+0x4e68>
   16370:	ldrb	r3, [r0, #1]
   16374:	bic	r3, r3, #32
   16378:	cmp	r3, #84	; 0x54
   1637c:	bne	163b4 <__assert_fail@plt+0x4e40>
   16380:	ldrb	r3, [r0, #2]
   16384:	bic	r3, r3, #32
   16388:	cmp	r3, #70	; 0x46
   1638c:	bne	163b4 <__assert_fail@plt+0x4e40>
   16390:	ldrb	r3, [r0, #3]
   16394:	cmp	r3, #45	; 0x2d
   16398:	bne	163b4 <__assert_fail@plt+0x4e40>
   1639c:	ldrb	r3, [r0, #4]
   163a0:	cmp	r3, #56	; 0x38
   163a4:	bne	163b4 <__assert_fail@plt+0x4e40>
   163a8:	ldrb	r3, [r0, #5]
   163ac:	cmp	r3, #0
   163b0:	beq	163c8 <__assert_fail@plt+0x4e54>
   163b4:	ldr	r1, [pc, #144]	; 1644c <__assert_fail@plt+0x4ed8>
   163b8:	ldr	r0, [pc, #144]	; 16450 <__assert_fail@plt+0x4edc>
   163bc:	cmp	r5, #9
   163c0:	movne	r0, r1
   163c4:	pop	{r4, r5, r6, pc}
   163c8:	ldrb	r3, [r4]
   163cc:	ldr	r1, [pc, #128]	; 16454 <__assert_fail@plt+0x4ee0>
   163d0:	ldr	r0, [pc, #128]	; 16458 <__assert_fail@plt+0x4ee4>
   163d4:	cmp	r3, #96	; 0x60
   163d8:	b	163c0 <__assert_fail@plt+0x4e4c>
   163dc:	cmp	r3, #71	; 0x47
   163e0:	bne	163b4 <__assert_fail@plt+0x4e40>
   163e4:	ldrb	r3, [r0, #1]
   163e8:	bic	r3, r3, #32
   163ec:	cmp	r3, #66	; 0x42
   163f0:	bne	163b4 <__assert_fail@plt+0x4e40>
   163f4:	ldrb	r3, [r0, #2]
   163f8:	cmp	r3, #49	; 0x31
   163fc:	bne	163b4 <__assert_fail@plt+0x4e40>
   16400:	ldrb	r3, [r0, #3]
   16404:	cmp	r3, #56	; 0x38
   16408:	bne	163b4 <__assert_fail@plt+0x4e40>
   1640c:	ldrb	r3, [r0, #4]
   16410:	cmp	r3, #48	; 0x30
   16414:	bne	163b4 <__assert_fail@plt+0x4e40>
   16418:	ldrb	r3, [r0, #5]
   1641c:	cmp	r3, #51	; 0x33
   16420:	bne	163b4 <__assert_fail@plt+0x4e40>
   16424:	ldrb	r3, [r0, #6]
   16428:	cmp	r3, #48	; 0x30
   1642c:	bne	163b4 <__assert_fail@plt+0x4e40>
   16430:	ldrb	r3, [r0, #7]
   16434:	cmp	r3, #0
   16438:	bne	163b4 <__assert_fail@plt+0x4e40>
   1643c:	ldrb	r3, [r4]
   16440:	ldr	r1, [pc, #20]	; 1645c <__assert_fail@plt+0x4ee8>
   16444:	ldr	r0, [pc, #20]	; 16460 <__assert_fail@plt+0x4eec>
   16448:	b	163d4 <__assert_fail@plt+0x4e60>
   1644c:	andeq	fp, r1, sp, asr #5
   16450:	andeq	fp, r1, fp, lsl #7
   16454:	andeq	fp, r1, r0, lsl #7
   16458:	andeq	fp, r1, ip, ror r3
   1645c:	andeq	fp, r1, r8, lsl #7
   16460:	andeq	fp, r1, r4, lsl #7
   16464:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16468:	sub	sp, sp, #108	; 0x6c
   1646c:	mov	r8, r0
   16470:	str	r3, [sp, #36]	; 0x24
   16474:	mov	r5, r1
   16478:	str	r2, [sp, #44]	; 0x2c
   1647c:	ldr	sl, [sp, #144]	; 0x90
   16480:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   16484:	ldr	r3, [sp, #148]	; 0x94
   16488:	mov	r7, #0
   1648c:	str	r7, [sp, #48]	; 0x30
   16490:	lsr	r6, r3, #1
   16494:	and	r6, r6, #1
   16498:	mov	r3, #1
   1649c:	str	r3, [sp, #72]	; 0x48
   164a0:	str	r7, [sp, #24]
   164a4:	str	r7, [sp, #32]
   164a8:	str	r7, [sp, #40]	; 0x28
   164ac:	str	r7, [sp, #60]	; 0x3c
   164b0:	str	r0, [sp, #76]	; 0x4c
   164b4:	cmp	sl, #10
   164b8:	ldrls	pc, [pc, sl, lsl #2]
   164bc:	b	166f8 <__assert_fail@plt+0x5184>
   164c0:	andeq	r6, r1, ip, ror #9
   164c4:	andeq	r7, r1, r0, lsl #3
   164c8:	andeq	r6, r1, r4, asr #13
   164cc:	andeq	r6, r1, r0, lsl r7
   164d0:	andeq	r6, r1, r0, lsr #13
   164d4:	strdeq	r6, [r1], -r8
   164d8:	andeq	r7, r1, r0, ror #2
   164dc:	strdeq	r6, [r1], -ip
   164e0:	strdeq	r6, [r1], -r0
   164e4:	strdeq	r6, [r1], -r0
   164e8:	strdeq	r6, [r1], -r0
   164ec:	mov	r6, #0
   164f0:	mov	r4, #0
   164f4:	b	16524 <__assert_fail@plt+0x4fb0>
   164f8:	cmp	r6, #0
   164fc:	bne	16720 <__assert_fail@plt+0x51ac>
   16500:	cmp	r5, #0
   16504:	movne	r3, #34	; 0x22
   16508:	strbne	r3, [r8]
   1650c:	mov	r3, #1
   16510:	str	r3, [sp, #24]
   16514:	str	r3, [sp, #32]
   16518:	mov	r4, #1
   1651c:	ldr	r3, [pc, #3172]	; 17188 <__assert_fail@plt+0x5c14>
   16520:	str	r3, [sp, #40]	; 0x28
   16524:	mov	r9, r5
   16528:	mov	r3, #0
   1652c:	str	r7, [sp, #68]	; 0x44
   16530:	str	r3, [sp, #28]
   16534:	ldr	r3, [sp, #36]	; 0x24
   16538:	cmn	r3, #1
   1653c:	bne	170cc <__assert_fail@plt+0x5b58>
   16540:	ldr	r3, [sp, #44]	; 0x2c
   16544:	ldr	r2, [sp, #28]
   16548:	ldrb	r3, [r3, r2]
   1654c:	adds	r3, r3, #0
   16550:	movne	r3, #1
   16554:	str	r3, [sp, #52]	; 0x34
   16558:	ldr	r3, [sp, #52]	; 0x34
   1655c:	cmp	r3, #0
   16560:	bne	16748 <__assert_fail@plt+0x51d4>
   16564:	sub	r2, sl, #2
   16568:	clz	r2, r2
   1656c:	lsr	r2, r2, #5
   16570:	and	r3, r6, r2
   16574:	cmp	r4, #0
   16578:	movne	r3, #0
   1657c:	andeq	r3, r3, #1
   16580:	cmp	r3, #0
   16584:	bne	16910 <__assert_fail@plt+0x539c>
   16588:	eor	r3, r6, #1
   1658c:	ands	r2, r2, r3
   16590:	beq	17104 <__assert_fail@plt+0x5b90>
   16594:	ldr	r3, [sp, #68]	; 0x44
   16598:	cmp	r3, #0
   1659c:	beq	1713c <__assert_fail@plt+0x5bc8>
   165a0:	ldr	r3, [sp, #72]	; 0x48
   165a4:	cmp	r3, #0
   165a8:	beq	170e0 <__assert_fail@plt+0x5b6c>
   165ac:	ldr	r3, [sp, #160]	; 0xa0
   165b0:	ldr	r2, [sp, #44]	; 0x2c
   165b4:	str	r3, [sp, #16]
   165b8:	ldr	r3, [sp, #156]	; 0x9c
   165bc:	ldr	r1, [sp, #60]	; 0x3c
   165c0:	str	r3, [sp, #12]
   165c4:	ldr	r3, [sp, #152]	; 0x98
   165c8:	str	r3, [sp, #8]
   165cc:	ldr	r3, [sp, #148]	; 0x94
   165d0:	str	r3, [sp, #4]
   165d4:	mov	r3, #5
   165d8:	str	r3, [sp]
   165dc:	ldr	r3, [sp, #36]	; 0x24
   165e0:	mov	r0, r8
   165e4:	bl	16464 <__assert_fail@plt+0x4ef0>
   165e8:	mov	r4, r0
   165ec:	b	17130 <__assert_fail@plt+0x5bbc>
   165f0:	cmp	sl, #10
   165f4:	beq	16650 <__assert_fail@plt+0x50dc>
   165f8:	ldr	r4, [pc, #2956]	; 1718c <__assert_fail@plt+0x5c18>
   165fc:	mov	r2, #5
   16600:	mov	r1, r4
   16604:	mov	r0, #0
   16608:	bl	11268 <dcgettext@plt>
   1660c:	cmp	r0, r4
   16610:	str	r0, [sp, #156]	; 0x9c
   16614:	bne	16624 <__assert_fail@plt+0x50b0>
   16618:	mov	r1, sl
   1661c:	bl	16350 <__assert_fail@plt+0x4ddc>
   16620:	str	r0, [sp, #156]	; 0x9c
   16624:	ldr	r4, [pc, #2916]	; 17190 <__assert_fail@plt+0x5c1c>
   16628:	mov	r2, #5
   1662c:	mov	r1, r4
   16630:	mov	r0, #0
   16634:	bl	11268 <dcgettext@plt>
   16638:	cmp	r0, r4
   1663c:	str	r0, [sp, #160]	; 0xa0
   16640:	bne	16650 <__assert_fail@plt+0x50dc>
   16644:	mov	r1, sl
   16648:	bl	16350 <__assert_fail@plt+0x4ddc>
   1664c:	str	r0, [sp, #160]	; 0xa0
   16650:	cmp	r6, #0
   16654:	moveq	r4, r6
   16658:	beq	16670 <__assert_fail@plt+0x50fc>
   1665c:	mov	r4, #0
   16660:	b	16680 <__assert_fail@plt+0x510c>
   16664:	cmp	r5, r4
   16668:	strbhi	r3, [r8, r4]
   1666c:	add	r4, r4, #1
   16670:	ldr	r3, [sp, #156]	; 0x9c
   16674:	ldrb	r3, [r3, r4]
   16678:	cmp	r3, #0
   1667c:	bne	16664 <__assert_fail@plt+0x50f0>
   16680:	ldr	r0, [sp, #160]	; 0xa0
   16684:	bl	113c4 <strlen@plt>
   16688:	ldr	r3, [sp, #160]	; 0xa0
   1668c:	str	r3, [sp, #40]	; 0x28
   16690:	mov	r3, #1
   16694:	str	r3, [sp, #24]
   16698:	str	r0, [sp, #32]
   1669c:	b	16524 <__assert_fail@plt+0x4fb0>
   166a0:	mov	r3, #1
   166a4:	cmp	r6, #0
   166a8:	streq	r3, [sp, #24]
   166ac:	beq	166cc <__assert_fail@plt+0x5158>
   166b0:	str	r3, [sp, #32]
   166b4:	ldr	r3, [pc, #2772]	; 17190 <__assert_fail@plt+0x5c1c>
   166b8:	mov	r4, #0
   166bc:	str	r3, [sp, #40]	; 0x28
   166c0:	b	166f0 <__assert_fail@plt+0x517c>
   166c4:	cmp	r6, #0
   166c8:	bne	16738 <__assert_fail@plt+0x51c4>
   166cc:	cmp	r5, #0
   166d0:	movne	r3, #39	; 0x27
   166d4:	strbne	r3, [r8]
   166d8:	mov	r3, #1
   166dc:	str	r3, [sp, #32]
   166e0:	mov	r6, #0
   166e4:	ldr	r3, [pc, #2724]	; 17190 <__assert_fail@plt+0x5c1c>
   166e8:	mov	r4, #1
   166ec:	str	r3, [sp, #40]	; 0x28
   166f0:	mov	sl, #2
   166f4:	b	16524 <__assert_fail@plt+0x4fb0>
   166f8:	bl	11544 <abort@plt>
   166fc:	mov	r6, #0
   16700:	mov	r3, #1
   16704:	str	r3, [sp, #24]
   16708:	mov	r4, r6
   1670c:	b	16524 <__assert_fail@plt+0x4fb0>
   16710:	mov	r6, #1
   16714:	str	r6, [sp, #24]
   16718:	str	r6, [sp, #32]
   1671c:	b	166b4 <__assert_fail@plt+0x5140>
   16720:	mov	r3, #1
   16724:	str	r3, [sp, #32]
   16728:	ldr	r3, [pc, #2648]	; 17188 <__assert_fail@plt+0x5c14>
   1672c:	str	r6, [sp, #24]
   16730:	str	r3, [sp, #40]	; 0x28
   16734:	b	164f0 <__assert_fail@plt+0x4f7c>
   16738:	mov	r3, #1
   1673c:	str	r3, [sp, #32]
   16740:	ldr	r3, [pc, #2632]	; 17190 <__assert_fail@plt+0x5c1c>
   16744:	b	16730 <__assert_fail@plt+0x51bc>
   16748:	ldr	r3, [sp, #32]
   1674c:	ldr	fp, [sp, #24]
   16750:	cmp	sl, #2
   16754:	moveq	fp, #0
   16758:	andne	fp, fp, #1
   1675c:	adds	r5, r3, #0
   16760:	movne	r5, #1
   16764:	ands	r3, r5, fp
   16768:	str	r3, [sp, #64]	; 0x40
   1676c:	beq	1683c <__assert_fail@plt+0x52c8>
   16770:	ldr	r2, [sp, #32]
   16774:	ldr	r3, [sp, #28]
   16778:	add	r7, r3, r2
   1677c:	mov	r3, r2
   16780:	ldr	r2, [sp, #36]	; 0x24
   16784:	cmp	r3, #1
   16788:	movls	r3, #0
   1678c:	movhi	r3, #1
   16790:	cmn	r2, #1
   16794:	movne	r3, #0
   16798:	cmp	r3, #0
   1679c:	beq	167ac <__assert_fail@plt+0x5238>
   167a0:	ldr	r0, [sp, #44]	; 0x2c
   167a4:	bl	113c4 <strlen@plt>
   167a8:	str	r0, [sp, #36]	; 0x24
   167ac:	ldr	r3, [sp, #36]	; 0x24
   167b0:	cmp	r3, r7
   167b4:	bcc	16834 <__assert_fail@plt+0x52c0>
   167b8:	ldr	r3, [sp, #44]	; 0x2c
   167bc:	ldr	r0, [sp, #28]
   167c0:	ldr	r2, [sp, #32]
   167c4:	ldr	r1, [sp, #40]	; 0x28
   167c8:	add	r0, r3, r0
   167cc:	bl	1125c <memcmp@plt>
   167d0:	cmp	r0, #0
   167d4:	bne	16834 <__assert_fail@plt+0x52c0>
   167d8:	cmp	r6, #0
   167dc:	beq	1683c <__assert_fail@plt+0x52c8>
   167e0:	str	r6, [sp, #24]
   167e4:	ldr	r3, [sp, #24]
   167e8:	ldr	r2, [sp, #44]	; 0x2c
   167ec:	cmp	sl, #2
   167f0:	movne	r3, #0
   167f4:	andeq	r3, r3, #1
   167f8:	cmp	r3, #0
   167fc:	ldr	r3, [sp, #160]	; 0xa0
   16800:	movne	sl, #4
   16804:	str	r3, [sp, #16]
   16808:	ldr	r3, [sp, #156]	; 0x9c
   1680c:	str	sl, [sp]
   16810:	str	r3, [sp, #12]
   16814:	mov	r3, #0
   16818:	str	r3, [sp, #8]
   1681c:	ldr	r3, [sp, #148]	; 0x94
   16820:	mov	r1, r9
   16824:	bic	r3, r3, #2
   16828:	str	r3, [sp, #4]
   1682c:	ldr	r3, [sp, #36]	; 0x24
   16830:	b	165e0 <__assert_fail@plt+0x506c>
   16834:	mov	r3, #0
   16838:	str	r3, [sp, #64]	; 0x40
   1683c:	ldr	r2, [sp, #28]
   16840:	ldr	r3, [sp, #44]	; 0x2c
   16844:	add	r3, r3, r2
   16848:	str	r3, [sp, #80]	; 0x50
   1684c:	ldr	r3, [sp, #44]	; 0x2c
   16850:	ldrb	r7, [r3, r2]
   16854:	cmp	r7, #58	; 0x3a
   16858:	bhi	169c0 <__assert_fail@plt+0x544c>
   1685c:	cmp	r7, #43	; 0x2b
   16860:	bcs	16a14 <__assert_fail@plt+0x54a0>
   16864:	cmp	r7, #32
   16868:	beq	16a6c <__assert_fail@plt+0x54f8>
   1686c:	bhi	16918 <__assert_fail@plt+0x53a4>
   16870:	cmp	r7, #9
   16874:	beq	16d20 <__assert_fail@plt+0x57ac>
   16878:	bhi	168dc <__assert_fail@plt+0x5368>
   1687c:	cmp	r7, #7
   16880:	beq	16dcc <__assert_fail@plt+0x5858>
   16884:	bhi	16a88 <__assert_fail@plt+0x5514>
   16888:	cmp	r7, #0
   1688c:	beq	16aa4 <__assert_fail@plt+0x5530>
   16890:	ldr	r3, [sp, #76]	; 0x4c
   16894:	cmp	r3, #1
   16898:	bne	16e10 <__assert_fail@plt+0x589c>
   1689c:	bl	11394 <__ctype_b_loc@plt>
   168a0:	sxth	r3, r7
   168a4:	lsl	r3, r3, #1
   168a8:	ldr	r2, [r0]
   168ac:	ldrh	r5, [r2, r3]
   168b0:	ldr	r3, [sp, #76]	; 0x4c
   168b4:	str	r3, [sp, #56]	; 0x38
   168b8:	lsr	r5, r5, #14
   168bc:	and	r5, r5, #1
   168c0:	ldr	r3, [sp, #24]
   168c4:	eor	fp, r5, #1
   168c8:	and	fp, fp, r3
   168cc:	ands	fp, fp, #255	; 0xff
   168d0:	beq	16c58 <__assert_fail@plt+0x56e4>
   168d4:	mov	r5, #0
   168d8:	b	16ebc <__assert_fail@plt+0x5948>
   168dc:	cmp	r7, #11
   168e0:	beq	16d28 <__assert_fail@plt+0x57b4>
   168e4:	bcc	16dc4 <__assert_fail@plt+0x5850>
   168e8:	cmp	r7, #12
   168ec:	beq	16dd4 <__assert_fail@plt+0x5860>
   168f0:	cmp	r7, #13
   168f4:	moveq	r3, #114	; 0x72
   168f8:	bne	16890 <__assert_fail@plt+0x531c>
   168fc:	cmp	sl, #2
   16900:	movne	r2, #0
   16904:	andeq	r2, r6, #1
   16908:	cmp	r2, #0
   1690c:	beq	16a8c <__assert_fail@plt+0x5518>
   16910:	mov	sl, #2
   16914:	b	167e4 <__assert_fail@plt+0x5270>
   16918:	cmp	r7, #37	; 0x25
   1691c:	beq	16a14 <__assert_fail@plt+0x54a0>
   16920:	bhi	16934 <__assert_fail@plt+0x53c0>
   16924:	cmp	r7, #35	; 0x23
   16928:	beq	16a60 <__assert_fail@plt+0x54ec>
   1692c:	mov	r5, #0
   16930:	b	16a70 <__assert_fail@plt+0x54fc>
   16934:	cmp	r7, #39	; 0x27
   16938:	bne	1692c <__assert_fail@plt+0x53b8>
   1693c:	cmp	sl, #2
   16940:	ldrne	r5, [sp, #52]	; 0x34
   16944:	movne	r3, r5
   16948:	strne	r3, [sp, #68]	; 0x44
   1694c:	bne	16a18 <__assert_fail@plt+0x54a4>
   16950:	cmp	r6, #0
   16954:	bne	167e4 <__assert_fail@plt+0x5270>
   16958:	ldr	r2, [sp, #60]	; 0x3c
   1695c:	adds	r3, r9, #0
   16960:	movne	r3, #1
   16964:	cmp	r2, #0
   16968:	movne	r3, #0
   1696c:	cmp	r3, #0
   16970:	strne	r9, [sp, #60]	; 0x3c
   16974:	movne	r9, #0
   16978:	bne	16988 <__assert_fail@plt+0x5414>
   1697c:	cmp	r9, r4
   16980:	movhi	r3, #39	; 0x27
   16984:	strbhi	r3, [r8, r4]
   16988:	add	r3, r4, #1
   1698c:	cmp	r3, r9
   16990:	movcc	r2, #92	; 0x5c
   16994:	strbcc	r2, [r8, r3]
   16998:	add	r3, r4, #2
   1699c:	cmp	r3, r9
   169a0:	ldr	r5, [sp, #52]	; 0x34
   169a4:	movcc	r2, #39	; 0x27
   169a8:	strbcc	r2, [r8, r3]
   169ac:	add	r4, r4, #3
   169b0:	mov	fp, r6
   169b4:	str	r5, [sp, #68]	; 0x44
   169b8:	str	r6, [sp, #48]	; 0x30
   169bc:	b	16c58 <__assert_fail@plt+0x56e4>
   169c0:	cmp	r7, #94	; 0x5e
   169c4:	beq	1692c <__assert_fail@plt+0x53b8>
   169c8:	bhi	16a20 <__assert_fail@plt+0x54ac>
   169cc:	cmp	r7, #90	; 0x5a
   169d0:	bhi	16a08 <__assert_fail@plt+0x5494>
   169d4:	cmp	r7, #65	; 0x41
   169d8:	bcs	16a14 <__assert_fail@plt+0x54a0>
   169dc:	cmp	r7, #62	; 0x3e
   169e0:	bls	1692c <__assert_fail@plt+0x53b8>
   169e4:	cmp	r7, #63	; 0x3f
   169e8:	bne	16890 <__assert_fail@plt+0x531c>
   169ec:	cmp	sl, #2
   169f0:	beq	16b94 <__assert_fail@plt+0x5620>
   169f4:	cmp	sl, #5
   169f8:	beq	16ba4 <__assert_fail@plt+0x5630>
   169fc:	mov	fp, #0
   16a00:	mov	r5, fp
   16a04:	b	16c58 <__assert_fail@plt+0x56e4>
   16a08:	cmp	r7, #92	; 0x5c
   16a0c:	beq	16d30 <__assert_fail@plt+0x57bc>
   16a10:	bls	1692c <__assert_fail@plt+0x53b8>
   16a14:	ldr	r5, [sp, #52]	; 0x34
   16a18:	mov	fp, #0
   16a1c:	b	16c58 <__assert_fail@plt+0x56e4>
   16a20:	cmp	r7, #122	; 0x7a
   16a24:	bhi	16a44 <__assert_fail@plt+0x54d0>
   16a28:	cmp	r7, #97	; 0x61
   16a2c:	bcs	16a14 <__assert_fail@plt+0x54a0>
   16a30:	cmp	r7, #95	; 0x5f
   16a34:	beq	16a14 <__assert_fail@plt+0x54a0>
   16a38:	cmp	r7, #96	; 0x60
   16a3c:	bne	16890 <__assert_fail@plt+0x531c>
   16a40:	b	1692c <__assert_fail@plt+0x53b8>
   16a44:	cmp	r7, #124	; 0x7c
   16a48:	beq	1692c <__assert_fail@plt+0x53b8>
   16a4c:	bcc	16ddc <__assert_fail@plt+0x5868>
   16a50:	cmp	r7, #125	; 0x7d
   16a54:	beq	16ddc <__assert_fail@plt+0x5868>
   16a58:	cmp	r7, #126	; 0x7e
   16a5c:	bne	16890 <__assert_fail@plt+0x531c>
   16a60:	ldr	r3, [sp, #28]
   16a64:	cmp	r3, #0
   16a68:	bne	16b9c <__assert_fail@plt+0x5628>
   16a6c:	ldr	r5, [sp, #52]	; 0x34
   16a70:	cmp	sl, #2
   16a74:	movne	fp, #0
   16a78:	andeq	fp, r6, #1
   16a7c:	cmp	fp, #0
   16a80:	beq	16c58 <__assert_fail@plt+0x56e4>
   16a84:	b	16910 <__assert_fail@plt+0x539c>
   16a88:	mov	r3, #98	; 0x62
   16a8c:	ldr	r2, [sp, #24]
   16a90:	cmp	r2, #0
   16a94:	beq	16b9c <__assert_fail@plt+0x5628>
   16a98:	mov	r7, r3
   16a9c:	mov	r5, #0
   16aa0:	b	16cb0 <__assert_fail@plt+0x573c>
   16aa4:	ldr	r3, [sp, #24]
   16aa8:	cmp	r3, #0
   16aac:	beq	16b78 <__assert_fail@plt+0x5604>
   16ab0:	cmp	r6, #0
   16ab4:	bne	167e0 <__assert_fail@plt+0x526c>
   16ab8:	ldr	r3, [sp, #48]	; 0x30
   16abc:	eor	r2, r3, #1
   16ac0:	cmp	sl, #2
   16ac4:	movne	r2, #0
   16ac8:	andeq	r2, r2, #1
   16acc:	cmp	r2, #0
   16ad0:	moveq	r3, r4
   16ad4:	beq	16b0c <__assert_fail@plt+0x5598>
   16ad8:	cmp	r9, r4
   16adc:	movhi	r3, #39	; 0x27
   16ae0:	strbhi	r3, [r8, r4]
   16ae4:	add	r3, r4, #1
   16ae8:	cmp	r9, r3
   16aec:	movhi	r1, #36	; 0x24
   16af0:	strbhi	r1, [r8, r3]
   16af4:	add	r3, r4, #2
   16af8:	cmp	r9, r3
   16afc:	movhi	r1, #39	; 0x27
   16b00:	strbhi	r1, [r8, r3]
   16b04:	add	r3, r4, #3
   16b08:	str	r2, [sp, #48]	; 0x30
   16b0c:	cmp	r9, r3
   16b10:	movhi	r2, #92	; 0x5c
   16b14:	strbhi	r2, [r8, r3]
   16b18:	cmp	fp, #0
   16b1c:	add	r4, r3, #1
   16b20:	beq	170b0 <__assert_fail@plt+0x5b3c>
   16b24:	ldr	r2, [sp, #28]
   16b28:	ldr	r1, [sp, #36]	; 0x24
   16b2c:	add	r2, r2, #1
   16b30:	cmp	r1, r2
   16b34:	bls	16b70 <__assert_fail@plt+0x55fc>
   16b38:	ldr	r1, [sp, #44]	; 0x2c
   16b3c:	mov	r7, #48	; 0x30
   16b40:	ldrb	r2, [r1, r2]
   16b44:	sub	r2, r2, #48	; 0x30
   16b48:	cmp	r2, #9
   16b4c:	movhi	r5, r6
   16b50:	bhi	16c58 <__assert_fail@plt+0x56e4>
   16b54:	cmp	r9, r4
   16b58:	add	r2, r3, #2
   16b5c:	strbhi	r7, [r8, r4]
   16b60:	cmp	r9, r2
   16b64:	add	r4, r3, #3
   16b68:	movhi	r1, #48	; 0x30
   16b6c:	strbhi	r1, [r8, r2]
   16b70:	mov	r5, r6
   16b74:	b	170b8 <__assert_fail@plt+0x5b44>
   16b78:	ldr	r3, [sp, #148]	; 0x94
   16b7c:	tst	r3, #1
   16b80:	ldreq	r5, [sp, #24]
   16b84:	beq	170c4 <__assert_fail@plt+0x5b50>
   16b88:	ldr	r3, [sp, #28]
   16b8c:	add	r3, r3, #1
   16b90:	b	16530 <__assert_fail@plt+0x4fbc>
   16b94:	cmp	r6, #0
   16b98:	bne	167e4 <__assert_fail@plt+0x5270>
   16b9c:	mov	r5, #0
   16ba0:	b	16a18 <__assert_fail@plt+0x54a4>
   16ba4:	ldr	r3, [sp, #148]	; 0x94
   16ba8:	tst	r3, #4
   16bac:	beq	16b9c <__assert_fail@plt+0x5628>
   16bb0:	ldr	r3, [sp, #28]
   16bb4:	add	r2, r3, #2
   16bb8:	ldr	r3, [sp, #36]	; 0x24
   16bbc:	cmp	r3, r2
   16bc0:	bls	16b9c <__assert_fail@plt+0x5628>
   16bc4:	ldr	r3, [sp, #44]	; 0x2c
   16bc8:	ldr	r1, [sp, #28]
   16bcc:	add	r3, r3, r1
   16bd0:	ldrb	r0, [r3, #1]
   16bd4:	cmp	r0, #63	; 0x3f
   16bd8:	bne	16b9c <__assert_fail@plt+0x5628>
   16bdc:	ldr	r3, [sp, #44]	; 0x2c
   16be0:	ldrb	r1, [r3, r2]
   16be4:	sub	r3, r1, #33	; 0x21
   16be8:	uxtb	r3, r3
   16bec:	cmp	r3, #29
   16bf0:	bhi	170c0 <__assert_fail@plt+0x5b4c>
   16bf4:	mov	ip, #1
   16bf8:	ldr	r5, [pc, #1428]	; 17194 <__assert_fail@plt+0x5c20>
   16bfc:	ands	r5, r5, ip, lsl r3
   16c00:	beq	16a18 <__assert_fail@plt+0x54a4>
   16c04:	cmp	r6, #0
   16c08:	bne	167e4 <__assert_fail@plt+0x5270>
   16c0c:	add	r3, r4, #1
   16c10:	cmp	r9, r4
   16c14:	strbhi	r0, [r8, r4]
   16c18:	cmp	r9, r3
   16c1c:	movhi	r0, #34	; 0x22
   16c20:	strbhi	r0, [r8, r3]
   16c24:	add	r3, r4, #2
   16c28:	cmp	r9, r3
   16c2c:	movhi	r0, #34	; 0x22
   16c30:	strbhi	r0, [r8, r3]
   16c34:	add	r3, r4, #3
   16c38:	cmp	r9, r3
   16c3c:	add	r4, r4, #4
   16c40:	mov	r5, r6
   16c44:	mov	fp, r6
   16c48:	mov	r7, r1
   16c4c:	movhi	r0, #63	; 0x3f
   16c50:	strbhi	r0, [r8, r3]
   16c54:	str	r2, [sp, #28]
   16c58:	ldr	r3, [sp, #24]
   16c5c:	eor	r3, r3, #1
   16c60:	cmp	sl, #2
   16c64:	orreq	r3, r3, #1
   16c68:	eor	r3, r3, #1
   16c6c:	orr	r3, r6, r3
   16c70:	tst	r3, #255	; 0xff
   16c74:	beq	16ca4 <__assert_fail@plt+0x5730>
   16c78:	ldr	r3, [sp, #152]	; 0x98
   16c7c:	cmp	r3, #0
   16c80:	beq	16ca4 <__assert_fail@plt+0x5730>
   16c84:	lsr	r2, r7, #5
   16c88:	ldr	r1, [sp, #152]	; 0x98
   16c8c:	uxtb	r2, r2
   16c90:	and	r3, r7, #31
   16c94:	ldr	r2, [r1, r2, lsl #2]
   16c98:	lsr	r3, r2, r3
   16c9c:	tst	r3, #1
   16ca0:	bne	16cb0 <__assert_fail@plt+0x573c>
   16ca4:	ldr	r3, [sp, #64]	; 0x40
   16ca8:	cmp	r3, #0
   16cac:	beq	16d48 <__assert_fail@plt+0x57d4>
   16cb0:	cmp	r6, #0
   16cb4:	bne	167e4 <__assert_fail@plt+0x5270>
   16cb8:	ldr	r3, [sp, #48]	; 0x30
   16cbc:	eor	r3, r3, #1
   16cc0:	cmp	sl, #2
   16cc4:	movne	r3, #0
   16cc8:	andeq	r3, r3, #1
   16ccc:	cmp	r3, #0
   16cd0:	beq	16d08 <__assert_fail@plt+0x5794>
   16cd4:	cmp	r9, r4
   16cd8:	movhi	r2, #39	; 0x27
   16cdc:	strbhi	r2, [r8, r4]
   16ce0:	add	r2, r4, #1
   16ce4:	cmp	r9, r2
   16ce8:	movhi	r1, #36	; 0x24
   16cec:	strbhi	r1, [r8, r2]
   16cf0:	add	r2, r4, #2
   16cf4:	cmp	r9, r2
   16cf8:	add	r4, r4, #3
   16cfc:	movhi	r1, #39	; 0x27
   16d00:	strbhi	r1, [r8, r2]
   16d04:	str	r3, [sp, #48]	; 0x30
   16d08:	cmp	r9, r4
   16d0c:	movhi	r3, #92	; 0x5c
   16d10:	strbhi	r3, [r8, r4]
   16d14:	ldr	fp, [sp, #52]	; 0x34
   16d18:	add	r4, r4, #1
   16d1c:	b	16d48 <__assert_fail@plt+0x57d4>
   16d20:	mov	r3, #116	; 0x74
   16d24:	b	168fc <__assert_fail@plt+0x5388>
   16d28:	mov	r3, #118	; 0x76
   16d2c:	b	16a8c <__assert_fail@plt+0x5518>
   16d30:	cmp	sl, #2
   16d34:	bne	16da4 <__assert_fail@plt+0x5830>
   16d38:	cmp	r6, #0
   16d3c:	bne	167e4 <__assert_fail@plt+0x5270>
   16d40:	mov	r5, r6
   16d44:	mov	fp, r6
   16d48:	ldr	r3, [sp, #48]	; 0x30
   16d4c:	eor	fp, fp, #1
   16d50:	and	fp, fp, r3
   16d54:	tst	fp, #255	; 0xff
   16d58:	beq	16d84 <__assert_fail@plt+0x5810>
   16d5c:	cmp	r9, r4
   16d60:	movhi	r3, #39	; 0x27
   16d64:	strbhi	r3, [r8, r4]
   16d68:	add	r3, r4, #1
   16d6c:	cmp	r9, r3
   16d70:	movhi	r2, #39	; 0x27
   16d74:	add	r4, r4, #2
   16d78:	strbhi	r2, [r8, r3]
   16d7c:	mov	r3, #0
   16d80:	str	r3, [sp, #48]	; 0x30
   16d84:	cmp	r9, r4
   16d88:	strbhi	r7, [r8, r4]
   16d8c:	ldr	r3, [sp, #72]	; 0x48
   16d90:	cmp	r5, #0
   16d94:	moveq	r3, #0
   16d98:	add	r4, r4, #1
   16d9c:	str	r3, [sp, #72]	; 0x48
   16da0:	b	16b88 <__assert_fail@plt+0x5614>
   16da4:	ldr	r3, [sp, #24]
   16da8:	and	r3, r3, r6
   16dac:	tst	r5, r3
   16db0:	moveq	r3, r7
   16db4:	beq	168fc <__assert_fail@plt+0x5388>
   16db8:	mov	fp, #0
   16dbc:	mov	r5, fp
   16dc0:	b	16d48 <__assert_fail@plt+0x57d4>
   16dc4:	mov	r3, #110	; 0x6e
   16dc8:	b	168fc <__assert_fail@plt+0x5388>
   16dcc:	mov	r3, #97	; 0x61
   16dd0:	b	16a8c <__assert_fail@plt+0x5518>
   16dd4:	mov	r3, #102	; 0x66
   16dd8:	b	16a8c <__assert_fail@plt+0x5518>
   16ddc:	ldr	r3, [sp, #36]	; 0x24
   16de0:	cmn	r3, #1
   16de4:	bne	16e04 <__assert_fail@plt+0x5890>
   16de8:	ldr	r3, [sp, #44]	; 0x2c
   16dec:	ldrb	r3, [r3, #1]
   16df0:	adds	r3, r3, #0
   16df4:	movne	r3, #1
   16df8:	cmp	r3, #0
   16dfc:	bne	16b9c <__assert_fail@plt+0x5628>
   16e00:	b	16a60 <__assert_fail@plt+0x54ec>
   16e04:	ldr	r3, [sp, #36]	; 0x24
   16e08:	subs	r3, r3, #1
   16e0c:	b	16df4 <__assert_fail@plt+0x5880>
   16e10:	mov	r3, #0
   16e14:	str	r3, [sp, #96]	; 0x60
   16e18:	str	r3, [sp, #100]	; 0x64
   16e1c:	ldr	r3, [sp, #36]	; 0x24
   16e20:	cmn	r3, #1
   16e24:	bne	16e34 <__assert_fail@plt+0x58c0>
   16e28:	ldr	r0, [sp, #44]	; 0x2c
   16e2c:	bl	113c4 <strlen@plt>
   16e30:	str	r0, [sp, #36]	; 0x24
   16e34:	ldr	r5, [sp, #52]	; 0x34
   16e38:	mov	r3, #0
   16e3c:	str	r3, [sp, #56]	; 0x38
   16e40:	ldr	r3, [sp, #28]
   16e44:	ldr	r2, [sp, #56]	; 0x38
   16e48:	ldr	r1, [sp, #36]	; 0x24
   16e4c:	add	r2, r3, r2
   16e50:	ldr	r3, [sp, #44]	; 0x2c
   16e54:	add	r0, sp, #92	; 0x5c
   16e58:	add	fp, r3, r2
   16e5c:	sub	r2, r1, r2
   16e60:	add	r3, sp, #96	; 0x60
   16e64:	mov	r1, fp
   16e68:	bl	18aa8 <__assert_fail@plt+0x7534>
   16e6c:	subs	r2, r0, #0
   16e70:	beq	16eb0 <__assert_fail@plt+0x593c>
   16e74:	cmn	r2, #1
   16e78:	beq	17088 <__assert_fail@plt+0x5b14>
   16e7c:	cmn	r2, #2
   16e80:	bne	16ff8 <__assert_fail@plt+0x5a84>
   16e84:	ldr	r2, [sp, #56]	; 0x38
   16e88:	ldr	r3, [sp, #28]
   16e8c:	add	r3, r3, r2
   16e90:	ldr	r2, [sp, #36]	; 0x24
   16e94:	cmp	r2, r3
   16e98:	bls	17088 <__assert_fail@plt+0x5b14>
   16e9c:	ldr	r3, [sp, #80]	; 0x50
   16ea0:	ldr	r2, [sp, #56]	; 0x38
   16ea4:	ldrb	r5, [r3, r2]
   16ea8:	cmp	r5, #0
   16eac:	bne	16fe8 <__assert_fail@plt+0x5a74>
   16eb0:	ldr	r3, [sp, #56]	; 0x38
   16eb4:	cmp	r3, #1
   16eb8:	bls	168c0 <__assert_fail@plt+0x534c>
   16ebc:	ldr	r2, [sp, #56]	; 0x38
   16ec0:	ldr	r3, [sp, #28]
   16ec4:	mov	fp, #0
   16ec8:	add	r3, r3, r2
   16ecc:	ldr	r2, [sp, #24]
   16ed0:	str	r3, [sp, #52]	; 0x34
   16ed4:	eor	r3, r5, #1
   16ed8:	and	r3, r3, r2
   16edc:	mov	ip, #92	; 0x5c
   16ee0:	uxtb	r3, r3
   16ee4:	mov	r2, #39	; 0x27
   16ee8:	cmp	r3, #0
   16eec:	beq	17090 <__assert_fail@plt+0x5b1c>
   16ef0:	cmp	r6, #0
   16ef4:	bne	167e0 <__assert_fail@plt+0x526c>
   16ef8:	ldr	r1, [sp, #48]	; 0x30
   16efc:	eor	r1, r1, #1
   16f00:	cmp	sl, #2
   16f04:	movne	r1, #0
   16f08:	andeq	r1, r1, #1
   16f0c:	cmp	r1, #0
   16f10:	beq	16f40 <__assert_fail@plt+0x59cc>
   16f14:	add	r0, r4, #1
   16f18:	cmp	r9, r4
   16f1c:	strbhi	r2, [r8, r4]
   16f20:	cmp	r9, r0
   16f24:	movhi	lr, #36	; 0x24
   16f28:	strbhi	lr, [r8, r0]
   16f2c:	add	r0, r4, #2
   16f30:	add	r4, r4, #3
   16f34:	cmp	r9, r0
   16f38:	strbhi	r2, [r8, r0]
   16f3c:	str	r1, [sp, #48]	; 0x30
   16f40:	add	r0, r4, #1
   16f44:	cmp	r9, r4
   16f48:	strbhi	ip, [r8, r4]
   16f4c:	cmp	r9, r0
   16f50:	lsrhi	r1, r7, #6
   16f54:	addhi	r1, r1, #48	; 0x30
   16f58:	strbhi	r1, [r8, r0]
   16f5c:	add	r0, r4, #2
   16f60:	cmp	r9, r0
   16f64:	lsrhi	r1, r7, #3
   16f68:	and	r7, r7, #7
   16f6c:	andhi	r1, r1, #7
   16f70:	add	r4, r4, #3
   16f74:	add	r7, r7, #48	; 0x30
   16f78:	mov	fp, r3
   16f7c:	addhi	r1, r1, #48	; 0x30
   16f80:	strbhi	r1, [r8, r0]
   16f84:	ldr	r1, [sp, #28]
   16f88:	ldr	r0, [sp, #52]	; 0x34
   16f8c:	add	r1, r1, #1
   16f90:	cmp	r0, r1
   16f94:	bls	16d48 <__assert_fail@plt+0x57d4>
   16f98:	ldr	lr, [sp, #48]	; 0x30
   16f9c:	eor	r0, fp, #1
   16fa0:	and	r0, r0, lr
   16fa4:	tst	r0, #255	; 0xff
   16fa8:	beq	16fcc <__assert_fail@plt+0x5a58>
   16fac:	add	r0, r4, #1
   16fb0:	cmp	r9, r4
   16fb4:	strbhi	r2, [r8, r4]
   16fb8:	cmp	r9, r0
   16fbc:	add	r4, r4, #2
   16fc0:	strbhi	r2, [r8, r0]
   16fc4:	mov	r0, #0
   16fc8:	str	r0, [sp, #48]	; 0x30
   16fcc:	ldr	r0, [sp, #44]	; 0x2c
   16fd0:	cmp	r9, r4
   16fd4:	strbhi	r7, [r8, r4]
   16fd8:	str	r1, [sp, #28]
   16fdc:	add	r4, r4, #1
   16fe0:	ldrb	r7, [r0, r1]
   16fe4:	b	16ee8 <__assert_fail@plt+0x5974>
   16fe8:	ldr	r3, [sp, #56]	; 0x38
   16fec:	add	r3, r3, #1
   16ff0:	str	r3, [sp, #56]	; 0x38
   16ff4:	b	16e84 <__assert_fail@plt+0x5910>
   16ff8:	cmp	sl, #2
   16ffc:	movne	r3, #0
   17000:	andeq	r3, r6, #1
   17004:	cmp	r3, #0
   17008:	movne	r1, #1
   1700c:	bne	17068 <__assert_fail@plt+0x5af4>
   17010:	ldr	r0, [sp, #92]	; 0x5c
   17014:	str	r2, [sp, #84]	; 0x54
   17018:	bl	112bc <iswprint@plt>
   1701c:	ldr	r3, [sp, #56]	; 0x38
   17020:	ldr	r2, [sp, #84]	; 0x54
   17024:	add	r3, r3, r2
   17028:	str	r3, [sp, #56]	; 0x38
   1702c:	cmp	r0, #0
   17030:	add	r0, sp, #96	; 0x60
   17034:	moveq	r5, #0
   17038:	bl	11244 <mbsinit@plt>
   1703c:	cmp	r0, #0
   17040:	beq	16e40 <__assert_fail@plt+0x58cc>
   17044:	b	16eb0 <__assert_fail@plt+0x593c>
   17048:	ldrb	r3, [fp, r1]
   1704c:	cmp	r3, #94	; 0x5e
   17050:	beq	16910 <__assert_fail@plt+0x539c>
   17054:	bhi	17074 <__assert_fail@plt+0x5b00>
   17058:	sub	r3, r3, #91	; 0x5b
   1705c:	cmp	r3, #1
   17060:	bls	16910 <__assert_fail@plt+0x539c>
   17064:	add	r1, r1, #1
   17068:	cmp	r1, r2
   1706c:	bne	17048 <__assert_fail@plt+0x5ad4>
   17070:	b	17010 <__assert_fail@plt+0x5a9c>
   17074:	cmp	r3, #96	; 0x60
   17078:	beq	16910 <__assert_fail@plt+0x539c>
   1707c:	cmp	r3, #124	; 0x7c
   17080:	bne	17064 <__assert_fail@plt+0x5af0>
   17084:	b	16910 <__assert_fail@plt+0x539c>
   17088:	mov	r5, #0
   1708c:	b	16eb0 <__assert_fail@plt+0x593c>
   17090:	ldr	r1, [sp, #64]	; 0x40
   17094:	cmp	r1, #0
   17098:	beq	16f84 <__assert_fail@plt+0x5a10>
   1709c:	cmp	r9, r4
   170a0:	strbhi	ip, [r8, r4]
   170a4:	str	r3, [sp, #64]	; 0x40
   170a8:	add	r4, r4, #1
   170ac:	b	16f84 <__assert_fail@plt+0x5a10>
   170b0:	mov	r5, fp
   170b4:	ldr	fp, [sp, #24]
   170b8:	mov	r7, #48	; 0x30
   170bc:	b	16c58 <__assert_fail@plt+0x56e4>
   170c0:	mov	r5, #0
   170c4:	mov	fp, r5
   170c8:	b	16c58 <__assert_fail@plt+0x56e4>
   170cc:	ldr	r3, [sp, #36]	; 0x24
   170d0:	ldr	r2, [sp, #28]
   170d4:	subs	r3, r3, r2
   170d8:	movne	r3, #1
   170dc:	b	16554 <__assert_fail@plt+0x4fe0>
   170e0:	ldr	r3, [sp, #60]	; 0x3c
   170e4:	clz	r7, r9
   170e8:	cmp	r3, #0
   170ec:	lsr	r7, r7, #5
   170f0:	moveq	r7, #0
   170f4:	cmp	r7, #0
   170f8:	mov	r5, r3
   170fc:	bne	164b4 <__assert_fail@plt+0x4f40>
   17100:	ldr	r3, [sp, #68]	; 0x44
   17104:	ldr	r2, [sp, #40]	; 0x28
   17108:	cmp	r2, #0
   1710c:	moveq	r3, #0
   17110:	andne	r3, r3, #1
   17114:	cmp	r3, #0
   17118:	movne	r3, r2
   1711c:	subne	r2, r3, #1
   17120:	bne	17150 <__assert_fail@plt+0x5bdc>
   17124:	cmp	r9, r4
   17128:	movhi	r3, #0
   1712c:	strbhi	r3, [r8, r4]
   17130:	mov	r0, r4
   17134:	add	sp, sp, #108	; 0x6c
   17138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1713c:	mov	r3, r2
   17140:	b	17104 <__assert_fail@plt+0x5b90>
   17144:	cmp	r9, r4
   17148:	strbhi	r3, [r8, r4]
   1714c:	add	r4, r4, #1
   17150:	ldrb	r3, [r2, #1]!
   17154:	cmp	r3, #0
   17158:	bne	17144 <__assert_fail@plt+0x5bd0>
   1715c:	b	17124 <__assert_fail@plt+0x5bb0>
   17160:	ldr	r3, [pc, #32]	; 17188 <__assert_fail@plt+0x5c14>
   17164:	mov	r6, #1
   17168:	str	r6, [sp, #24]
   1716c:	str	r6, [sp, #32]
   17170:	str	r3, [sp, #40]	; 0x28
   17174:	mov	r4, #0
   17178:	mov	sl, #5
   1717c:	b	16524 <__assert_fail@plt+0x4fb0>
   17180:	mov	r6, #1
   17184:	b	16718 <__assert_fail@plt+0x51a4>
   17188:	andeq	fp, r1, fp, lsl #7
   1718c:	andeq	fp, r1, sp, lsl #7
   17190:	andeq	fp, r1, sp, asr #5
   17194:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   17198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1719c:	sub	sp, sp, #52	; 0x34
   171a0:	mov	r6, r0
   171a4:	mov	r5, r3
   171a8:	mov	r8, r1
   171ac:	mov	r9, r2
   171b0:	bl	113f4 <__errno_location@plt>
   171b4:	ldr	r7, [pc, #380]	; 17338 <__assert_fail@plt+0x5dc4>
   171b8:	cmn	r6, #-2147483647	; 0x80000001
   171bc:	ldr	r4, [r7]
   171c0:	ldr	r3, [r0]
   171c4:	str	r0, [sp, #24]
   171c8:	str	r3, [sp, #32]
   171cc:	movne	r3, #0
   171d0:	moveq	r3, #1
   171d4:	orrs	r3, r3, r6, lsr #31
   171d8:	beq	171e0 <__assert_fail@plt+0x5c6c>
   171dc:	bl	11544 <abort@plt>
   171e0:	ldr	r2, [r7, #4]
   171e4:	cmp	r6, r2
   171e8:	blt	17258 <__assert_fail@plt+0x5ce4>
   171ec:	add	r1, sp, #48	; 0x30
   171f0:	add	sl, r7, #8
   171f4:	str	r2, [r1, #-4]!
   171f8:	cmp	r4, sl
   171fc:	mov	r3, #8
   17200:	sub	r2, r6, r2
   17204:	movne	r0, r4
   17208:	str	r3, [sp]
   1720c:	add	r2, r2, #1
   17210:	mvn	r3, #-2147483648	; 0x80000000
   17214:	moveq	r0, #0
   17218:	bl	17fd8 <__assert_fail@plt+0x6a64>
   1721c:	cmp	r4, sl
   17220:	ldr	r2, [sp, #44]	; 0x2c
   17224:	mov	fp, r0
   17228:	str	r0, [r7]
   1722c:	ldmeq	r4, {r0, r1}
   17230:	mov	r4, fp
   17234:	stmeq	fp, {r0, r1}
   17238:	ldr	r0, [r7, #4]
   1723c:	mov	r1, #0
   17240:	sub	r2, r2, r0
   17244:	add	r0, fp, r0, lsl #3
   17248:	lsl	r2, r2, #3
   1724c:	bl	11418 <memset@plt>
   17250:	ldr	r3, [sp, #44]	; 0x2c
   17254:	str	r3, [r7, #4]
   17258:	ldr	r3, [r5, #4]
   1725c:	add	sl, r4, r6, lsl #3
   17260:	orr	r3, r3, #1
   17264:	str	r3, [sp, #28]
   17268:	add	r3, r5, #8
   1726c:	str	r3, [sp, #36]	; 0x24
   17270:	ldr	r3, [r5, #44]	; 0x2c
   17274:	ldr	fp, [r4, r6, lsl #3]
   17278:	ldr	r7, [sl, #4]
   1727c:	str	r3, [sp, #16]
   17280:	ldr	r3, [r5, #40]	; 0x28
   17284:	mov	r2, r8
   17288:	str	r3, [sp, #12]
   1728c:	add	r3, r5, #8
   17290:	str	r3, [sp, #8]
   17294:	ldr	r3, [sp, #28]
   17298:	mov	r1, fp
   1729c:	str	r3, [sp, #4]
   172a0:	ldr	r3, [r5]
   172a4:	mov	r0, r7
   172a8:	str	r3, [sp]
   172ac:	mov	r3, r9
   172b0:	bl	16464 <__assert_fail@plt+0x4ef0>
   172b4:	cmp	fp, r0
   172b8:	bhi	17320 <__assert_fail@plt+0x5dac>
   172bc:	ldr	r3, [pc, #120]	; 1733c <__assert_fail@plt+0x5dc8>
   172c0:	add	fp, r0, #1
   172c4:	cmp	r7, r3
   172c8:	str	fp, [r4, r6, lsl #3]
   172cc:	beq	172d8 <__assert_fail@plt+0x5d64>
   172d0:	mov	r0, r7
   172d4:	bl	18980 <__assert_fail@plt+0x740c>
   172d8:	mov	r0, fp
   172dc:	bl	17e90 <__assert_fail@plt+0x691c>
   172e0:	ldr	r3, [r5, #44]	; 0x2c
   172e4:	mov	r2, r8
   172e8:	mov	r1, fp
   172ec:	str	r0, [sl, #4]
   172f0:	str	r3, [sp, #16]
   172f4:	ldr	r3, [r5, #40]	; 0x28
   172f8:	mov	r7, r0
   172fc:	str	r3, [sp, #12]
   17300:	add	r3, r5, #8
   17304:	str	r3, [sp, #8]
   17308:	ldr	r3, [sp, #28]
   1730c:	str	r3, [sp, #4]
   17310:	ldr	r3, [r5]
   17314:	str	r3, [sp]
   17318:	mov	r3, r9
   1731c:	bl	16464 <__assert_fail@plt+0x4ef0>
   17320:	ldr	r3, [sp, #24]
   17324:	ldr	r2, [sp, #32]
   17328:	mov	r0, r7
   1732c:	str	r2, [r3]
   17330:	add	sp, sp, #52	; 0x34
   17334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17338:	andeq	ip, r2, r4, ror r1
   1733c:			; <UNDEFINED> instruction: 0x0002c2b8
   17340:	push	{r4, r5, r6, lr}
   17344:	mov	r5, r0
   17348:	bl	113f4 <__errno_location@plt>
   1734c:	cmp	r5, #0
   17350:	mov	r1, #48	; 0x30
   17354:	ldr	r6, [r0]
   17358:	mov	r4, r0
   1735c:	ldr	r0, [pc, #12]	; 17370 <__assert_fail@plt+0x5dfc>
   17360:	movne	r0, r5
   17364:	bl	1826c <__assert_fail@plt+0x6cf8>
   17368:	str	r6, [r4]
   1736c:	pop	{r4, r5, r6, pc}
   17370:			; <UNDEFINED> instruction: 0x0002c3b8
   17374:	ldr	r3, [pc, #12]	; 17388 <__assert_fail@plt+0x5e14>
   17378:	cmp	r0, #0
   1737c:	moveq	r0, r3
   17380:	ldr	r0, [r0]
   17384:	bx	lr
   17388:			; <UNDEFINED> instruction: 0x0002c3b8
   1738c:	ldr	r3, [pc, #12]	; 173a0 <__assert_fail@plt+0x5e2c>
   17390:	cmp	r0, #0
   17394:	moveq	r0, r3
   17398:	str	r1, [r0]
   1739c:	bx	lr
   173a0:			; <UNDEFINED> instruction: 0x0002c3b8
   173a4:	ldr	r3, [pc, #52]	; 173e0 <__assert_fail@plt+0x5e6c>
   173a8:	cmp	r0, #0
   173ac:	moveq	r0, r3
   173b0:	add	r3, r0, #8
   173b4:	push	{lr}		; (str lr, [sp, #-4]!)
   173b8:	lsr	lr, r1, #5
   173bc:	and	r1, r1, #31
   173c0:	ldr	ip, [r3, lr, lsl #2]
   173c4:	lsr	r0, ip, r1
   173c8:	eor	r2, r2, r0
   173cc:	and	r2, r2, #1
   173d0:	and	r0, r0, #1
   173d4:	eor	r1, ip, r2, lsl r1
   173d8:	str	r1, [r3, lr, lsl #2]
   173dc:	pop	{pc}		; (ldr pc, [sp], #4)
   173e0:			; <UNDEFINED> instruction: 0x0002c3b8
   173e4:	ldr	r3, [pc, #16]	; 173fc <__assert_fail@plt+0x5e88>
   173e8:	cmp	r0, #0
   173ec:	movne	r3, r0
   173f0:	ldr	r0, [r3, #4]
   173f4:	str	r1, [r3, #4]
   173f8:	bx	lr
   173fc:			; <UNDEFINED> instruction: 0x0002c3b8
   17400:	ldr	r3, [pc, #44]	; 17434 <__assert_fail@plt+0x5ec0>
   17404:	cmp	r0, #0
   17408:	moveq	r0, r3
   1740c:	mov	r3, #10
   17410:	cmp	r2, #0
   17414:	cmpne	r1, #0
   17418:	str	r3, [r0]
   1741c:	bne	17428 <__assert_fail@plt+0x5eb4>
   17420:	push	{r4, lr}
   17424:	bl	11544 <abort@plt>
   17428:	str	r1, [r0, #40]	; 0x28
   1742c:	str	r2, [r0, #44]	; 0x2c
   17430:	bx	lr
   17434:			; <UNDEFINED> instruction: 0x0002c3b8
   17438:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1743c:	sub	sp, sp, #24
   17440:	mov	sl, r3
   17444:	ldr	r4, [sp, #56]	; 0x38
   17448:	ldr	r3, [pc, #100]	; 174b4 <__assert_fail@plt+0x5f40>
   1744c:	cmp	r4, #0
   17450:	moveq	r4, r3
   17454:	mov	r7, r0
   17458:	mov	r8, r1
   1745c:	mov	r9, r2
   17460:	bl	113f4 <__errno_location@plt>
   17464:	ldr	r3, [r4, #44]	; 0x2c
   17468:	mov	r2, r9
   1746c:	mov	r1, r8
   17470:	ldr	r6, [r0]
   17474:	str	r3, [sp, #16]
   17478:	ldr	r3, [r4, #40]	; 0x28
   1747c:	mov	r5, r0
   17480:	str	r3, [sp, #12]
   17484:	add	r3, r4, #8
   17488:	str	r3, [sp, #8]
   1748c:	ldr	r3, [r4, #4]
   17490:	mov	r0, r7
   17494:	str	r3, [sp, #4]
   17498:	ldr	r3, [r4]
   1749c:	str	r3, [sp]
   174a0:	mov	r3, sl
   174a4:	bl	16464 <__assert_fail@plt+0x4ef0>
   174a8:	str	r6, [r5]
   174ac:	add	sp, sp, #24
   174b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   174b4:			; <UNDEFINED> instruction: 0x0002c3b8
   174b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174bc:	cmp	r3, #0
   174c0:	sub	sp, sp, #44	; 0x2c
   174c4:	ldr	r4, [pc, #188]	; 17588 <__assert_fail@plt+0x6014>
   174c8:	mov	r6, r2
   174cc:	movne	r4, r3
   174d0:	mov	sl, r1
   174d4:	mov	r9, r0
   174d8:	bl	113f4 <__errno_location@plt>
   174dc:	ldr	r5, [r4, #4]
   174e0:	add	fp, r4, #8
   174e4:	cmp	r6, #0
   174e8:	orreq	r5, r5, #1
   174ec:	mov	r1, #0
   174f0:	mov	r2, r9
   174f4:	ldr	r3, [r0]
   174f8:	mov	r8, r0
   174fc:	str	r3, [sp, #28]
   17500:	ldr	r3, [r4, #44]	; 0x2c
   17504:	mov	r0, r1
   17508:	str	r3, [sp, #16]
   1750c:	ldr	r3, [r4, #40]	; 0x28
   17510:	stmib	sp, {r5, fp}
   17514:	str	r3, [sp, #12]
   17518:	ldr	r3, [r4]
   1751c:	str	r3, [sp]
   17520:	mov	r3, sl
   17524:	bl	16464 <__assert_fail@plt+0x4ef0>
   17528:	add	r1, r0, #1
   1752c:	mov	r7, r0
   17530:	mov	r0, r1
   17534:	str	r1, [sp, #36]	; 0x24
   17538:	bl	17e90 <__assert_fail@plt+0x691c>
   1753c:	ldr	r3, [r4, #44]	; 0x2c
   17540:	mov	r2, r9
   17544:	str	r3, [sp, #16]
   17548:	ldr	r3, [r4, #40]	; 0x28
   1754c:	stmib	sp, {r5, fp}
   17550:	str	r3, [sp, #12]
   17554:	ldr	r3, [r4]
   17558:	ldr	r1, [sp, #36]	; 0x24
   1755c:	str	r3, [sp]
   17560:	mov	r3, sl
   17564:	str	r0, [sp, #32]
   17568:	bl	16464 <__assert_fail@plt+0x4ef0>
   1756c:	ldr	r3, [sp, #28]
   17570:	cmp	r6, #0
   17574:	str	r3, [r8]
   17578:	ldr	r0, [sp, #32]
   1757c:	strne	r7, [r6]
   17580:	add	sp, sp, #44	; 0x2c
   17584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17588:			; <UNDEFINED> instruction: 0x0002c3b8
   1758c:	mov	r3, r2
   17590:	mov	r2, #0
   17594:	b	174b8 <__assert_fail@plt+0x5f44>
   17598:	push	{r4, r5, r6, r7, r8, lr}
   1759c:	mov	r6, #1
   175a0:	ldr	r4, [pc, #104]	; 17610 <__assert_fail@plt+0x609c>
   175a4:	ldr	r5, [r4]
   175a8:	add	r7, r5, #12
   175ac:	ldr	r3, [r4, #4]
   175b0:	add	r7, r7, #8
   175b4:	cmp	r6, r3
   175b8:	blt	17600 <__assert_fail@plt+0x608c>
   175bc:	ldr	r0, [r5, #4]
   175c0:	ldr	r6, [pc, #76]	; 17614 <__assert_fail@plt+0x60a0>
   175c4:	cmp	r0, r6
   175c8:	beq	175dc <__assert_fail@plt+0x6068>
   175cc:	bl	18980 <__assert_fail@plt+0x740c>
   175d0:	mov	r3, #256	; 0x100
   175d4:	str	r3, [r4, #8]
   175d8:	str	r6, [r4, #12]
   175dc:	ldr	r6, [pc, #52]	; 17618 <__assert_fail@plt+0x60a4>
   175e0:	cmp	r5, r6
   175e4:	beq	175f4 <__assert_fail@plt+0x6080>
   175e8:	mov	r0, r5
   175ec:	bl	18980 <__assert_fail@plt+0x740c>
   175f0:	str	r6, [r4]
   175f4:	mov	r3, #1
   175f8:	str	r3, [r4, #4]
   175fc:	pop	{r4, r5, r6, r7, r8, pc}
   17600:	ldr	r0, [r7, #-8]
   17604:	bl	18980 <__assert_fail@plt+0x740c>
   17608:	add	r6, r6, #1
   1760c:	b	175ac <__assert_fail@plt+0x6038>
   17610:	andeq	ip, r2, r4, ror r1
   17614:			; <UNDEFINED> instruction: 0x0002c2b8
   17618:	andeq	ip, r2, ip, ror r1
   1761c:	ldr	r3, [pc, #4]	; 17628 <__assert_fail@plt+0x60b4>
   17620:	mvn	r2, #0
   17624:	b	17198 <__assert_fail@plt+0x5c24>
   17628:			; <UNDEFINED> instruction: 0x0002c3b8
   1762c:	ldr	r3, [pc]	; 17634 <__assert_fail@plt+0x60c0>
   17630:	b	17198 <__assert_fail@plt+0x5c24>
   17634:			; <UNDEFINED> instruction: 0x0002c3b8
   17638:	mov	r1, r0
   1763c:	mov	r0, #0
   17640:	b	1761c <__assert_fail@plt+0x60a8>
   17644:	mov	r2, r1
   17648:	mov	r1, r0
   1764c:	mov	r0, #0
   17650:	b	1762c <__assert_fail@plt+0x60b8>
   17654:	push	{r4, r5, lr}
   17658:	sub	sp, sp, #52	; 0x34
   1765c:	mov	r5, r2
   17660:	mov	r4, r0
   17664:	mov	r0, sp
   17668:	bl	16320 <__assert_fail@plt+0x4dac>
   1766c:	mov	r3, sp
   17670:	mvn	r2, #0
   17674:	mov	r1, r5
   17678:	mov	r0, r4
   1767c:	bl	17198 <__assert_fail@plt+0x5c24>
   17680:	add	sp, sp, #52	; 0x34
   17684:	pop	{r4, r5, pc}
   17688:	push	{r4, r5, r6, lr}
   1768c:	sub	sp, sp, #48	; 0x30
   17690:	mov	r5, r2
   17694:	mov	r6, r3
   17698:	mov	r4, r0
   1769c:	mov	r0, sp
   176a0:	bl	16320 <__assert_fail@plt+0x4dac>
   176a4:	mov	r3, sp
   176a8:	mov	r2, r6
   176ac:	mov	r1, r5
   176b0:	mov	r0, r4
   176b4:	bl	17198 <__assert_fail@plt+0x5c24>
   176b8:	add	sp, sp, #48	; 0x30
   176bc:	pop	{r4, r5, r6, pc}
   176c0:	mov	r2, r1
   176c4:	mov	r1, r0
   176c8:	mov	r0, #0
   176cc:	b	17654 <__assert_fail@plt+0x60e0>
   176d0:	mov	r3, r2
   176d4:	mov	r2, r1
   176d8:	mov	r1, r0
   176dc:	mov	r0, #0
   176e0:	b	17688 <__assert_fail@plt+0x6114>
   176e4:	push	{r4, r5, r6, lr}
   176e8:	mov	r4, r0
   176ec:	ldr	lr, [pc, #80]	; 17744 <__assert_fail@plt+0x61d0>
   176f0:	mov	r5, r1
   176f4:	mov	r6, r2
   176f8:	ldm	lr!, {r0, r1, r2, r3}
   176fc:	sub	sp, sp, #48	; 0x30
   17700:	mov	ip, sp
   17704:	stmia	ip!, {r0, r1, r2, r3}
   17708:	ldm	lr!, {r0, r1, r2, r3}
   1770c:	stmia	ip!, {r0, r1, r2, r3}
   17710:	ldm	lr, {r0, r1, r2, r3}
   17714:	stm	ip, {r0, r1, r2, r3}
   17718:	mov	r1, r6
   1771c:	mov	r2, #1
   17720:	mov	r0, sp
   17724:	bl	173a4 <__assert_fail@plt+0x5e30>
   17728:	mov	r3, sp
   1772c:	mov	r2, r5
   17730:	mov	r1, r4
   17734:	mov	r0, #0
   17738:	bl	17198 <__assert_fail@plt+0x5c24>
   1773c:	add	sp, sp, #48	; 0x30
   17740:	pop	{r4, r5, r6, pc}
   17744:			; <UNDEFINED> instruction: 0x0002c3b8
   17748:	mov	r2, r1
   1774c:	mvn	r1, #0
   17750:	b	176e4 <__assert_fail@plt+0x6170>
   17754:	mov	r1, #58	; 0x3a
   17758:	b	17748 <__assert_fail@plt+0x61d4>
   1775c:	mov	r2, #58	; 0x3a
   17760:	b	176e4 <__assert_fail@plt+0x6170>
   17764:	push	{r4, r5, lr}
   17768:	sub	sp, sp, #100	; 0x64
   1776c:	mov	r4, r0
   17770:	mov	r0, sp
   17774:	mov	r5, r2
   17778:	bl	16320 <__assert_fail@plt+0x4dac>
   1777c:	mov	ip, sp
   17780:	add	lr, sp, #48	; 0x30
   17784:	ldm	ip!, {r0, r1, r2, r3}
   17788:	stmia	lr!, {r0, r1, r2, r3}
   1778c:	ldm	ip!, {r0, r1, r2, r3}
   17790:	stmia	lr!, {r0, r1, r2, r3}
   17794:	ldm	ip, {r0, r1, r2, r3}
   17798:	stm	lr, {r0, r1, r2, r3}
   1779c:	mov	r2, #1
   177a0:	mov	r1, #58	; 0x3a
   177a4:	add	r0, sp, #48	; 0x30
   177a8:	bl	173a4 <__assert_fail@plt+0x5e30>
   177ac:	add	r3, sp, #48	; 0x30
   177b0:	mvn	r2, #0
   177b4:	mov	r1, r5
   177b8:	mov	r0, r4
   177bc:	bl	17198 <__assert_fail@plt+0x5c24>
   177c0:	add	sp, sp, #100	; 0x64
   177c4:	pop	{r4, r5, pc}
   177c8:	push	{r4, r5, r6, r7, lr}
   177cc:	mov	r4, r0
   177d0:	ldr	lr, [pc, #84]	; 1782c <__assert_fail@plt+0x62b8>
   177d4:	mov	r6, r1
   177d8:	mov	r7, r2
   177dc:	mov	r5, r3
   177e0:	ldm	lr!, {r0, r1, r2, r3}
   177e4:	sub	sp, sp, #52	; 0x34
   177e8:	mov	ip, sp
   177ec:	stmia	ip!, {r0, r1, r2, r3}
   177f0:	ldm	lr!, {r0, r1, r2, r3}
   177f4:	stmia	ip!, {r0, r1, r2, r3}
   177f8:	ldm	lr, {r0, r1, r2, r3}
   177fc:	stm	ip, {r0, r1, r2, r3}
   17800:	mov	r2, r7
   17804:	mov	r1, r6
   17808:	mov	r0, sp
   1780c:	bl	17400 <__assert_fail@plt+0x5e8c>
   17810:	mov	r3, sp
   17814:	ldr	r2, [sp, #72]	; 0x48
   17818:	mov	r1, r5
   1781c:	mov	r0, r4
   17820:	bl	17198 <__assert_fail@plt+0x5c24>
   17824:	add	sp, sp, #52	; 0x34
   17828:	pop	{r4, r5, r6, r7, pc}
   1782c:			; <UNDEFINED> instruction: 0x0002c3b8
   17830:	mvn	ip, #0
   17834:	push	{r0, r1, r2, lr}
   17838:	str	ip, [sp]
   1783c:	bl	177c8 <__assert_fail@plt+0x6254>
   17840:	add	sp, sp, #12
   17844:	pop	{pc}		; (ldr pc, [sp], #4)
   17848:	mov	r3, r2
   1784c:	mov	r2, r1
   17850:	mov	r1, r0
   17854:	mov	r0, #0
   17858:	b	17830 <__assert_fail@plt+0x62bc>
   1785c:	push	{r0, r1, r2, lr}
   17860:	str	r3, [sp]
   17864:	mov	r3, r2
   17868:	mov	r2, r1
   1786c:	mov	r1, r0
   17870:	mov	r0, #0
   17874:	bl	177c8 <__assert_fail@plt+0x6254>
   17878:	add	sp, sp, #12
   1787c:	pop	{pc}		; (ldr pc, [sp], #4)
   17880:	ldr	r3, [pc]	; 17888 <__assert_fail@plt+0x6314>
   17884:	b	17198 <__assert_fail@plt+0x5c24>
   17888:	andeq	ip, r2, r4, lsl #3
   1788c:	mov	r2, r1
   17890:	mov	r1, r0
   17894:	mov	r0, #0
   17898:	b	17880 <__assert_fail@plt+0x630c>
   1789c:	mvn	r2, #0
   178a0:	b	17880 <__assert_fail@plt+0x630c>
   178a4:	mov	r1, r0
   178a8:	mov	r0, #0
   178ac:	b	1789c <__assert_fail@plt+0x6328>
   178b0:	push	{r4, r5, r6, r7, r8, lr}
   178b4:	mov	r7, r0
   178b8:	ldr	r5, [pc, #88]	; 17918 <__assert_fail@plt+0x63a4>
   178bc:	mov	r8, r1
   178c0:	mov	r4, r2
   178c4:	mov	r2, r4
   178c8:	mov	r1, r8
   178cc:	mov	r0, r7
   178d0:	bl	111e4 <read@plt>
   178d4:	subs	r6, r0, #0
   178d8:	bge	17908 <__assert_fail@plt+0x6394>
   178dc:	bl	113f4 <__errno_location@plt>
   178e0:	ldr	r3, [r0]
   178e4:	cmp	r3, #4
   178e8:	beq	178c4 <__assert_fail@plt+0x6350>
   178ec:	cmp	r4, r5
   178f0:	sub	r3, r3, #22
   178f4:	clz	r3, r3
   178f8:	lsr	r3, r3, #5
   178fc:	movls	r3, #0
   17900:	cmp	r3, #0
   17904:	bne	17910 <__assert_fail@plt+0x639c>
   17908:	mov	r0, r6
   1790c:	pop	{r4, r5, r6, r7, r8, pc}
   17910:	mov	r4, r5
   17914:	b	178c4 <__assert_fail@plt+0x6350>
   17918:	svcvc	0x00f00000	; IMB
   1791c:	push	{r4, r5, r6, lr}
   17920:	mov	r2, r1
   17924:	mov	r4, r1
   17928:	mov	r1, #0
   1792c:	mov	r5, r0
   17930:	bl	11448 <memchr@plt>
   17934:	cmp	r0, #0
   17938:	subne	r4, r0, r5
   1793c:	addne	r4, r4, #1
   17940:	mov	r0, r4
   17944:	pop	{r4, r5, r6, pc}
   17948:	cmp	r0, #2
   1794c:	push	{r4, r5, r6, r7, r8, lr}
   17950:	mov	r4, r0
   17954:	bhi	1797c <__assert_fail@plt+0x6408>
   17958:	bl	19014 <__assert_fail@plt+0x7aa0>
   1795c:	mov	r6, r0
   17960:	bl	113f4 <__errno_location@plt>
   17964:	ldr	r7, [r0]
   17968:	mov	r5, r0
   1796c:	mov	r0, r4
   17970:	mov	r4, r6
   17974:	bl	1155c <close@plt>
   17978:	str	r7, [r5]
   1797c:	mov	r0, r4
   17980:	pop	{r4, r5, r6, r7, r8, pc}
   17984:	push	{r4, r5, r6, r7, r8, lr}
   17988:	mov	r5, r0
   1798c:	bl	1146c <pipe@plt>
   17990:	subs	r4, r0, #0
   17994:	bne	179e0 <__assert_fail@plt+0x646c>
   17998:	ldr	r0, [r5]
   1799c:	bl	17948 <__assert_fail@plt+0x63d4>
   179a0:	cmp	r0, #0
   179a4:	str	r0, [r5]
   179a8:	blt	179c4 <__assert_fail@plt+0x6450>
   179ac:	ldr	r0, [r5, #4]
   179b0:	bl	17948 <__assert_fail@plt+0x63d4>
   179b4:	cmp	r0, #0
   179b8:	str	r0, [r5, #4]
   179bc:	bge	179e4 <__assert_fail@plt+0x6470>
   179c0:	mov	r4, #1
   179c4:	bl	113f4 <__errno_location@plt>
   179c8:	rsb	r4, r4, #1
   179cc:	ldr	r7, [r0]
   179d0:	mov	r6, r0
   179d4:	ldr	r0, [r5, r4, lsl #2]
   179d8:	bl	1155c <close@plt>
   179dc:	str	r7, [r6]
   179e0:	mvn	r4, #0
   179e4:	mov	r0, r4
   179e8:	pop	{r4, r5, r6, r7, r8, pc}
   179ec:	push	{r4, r5, r6, lr}
   179f0:	sub	sp, sp, #32
   179f4:	cmp	r1, #0
   179f8:	mov	r5, r0
   179fc:	ldr	r4, [sp, #48]	; 0x30
   17a00:	ldr	r6, [sp, #52]	; 0x34
   17a04:	beq	17aac <__assert_fail@plt+0x6538>
   17a08:	str	r3, [sp]
   17a0c:	mov	r3, r2
   17a10:	mov	r2, r1
   17a14:	ldr	r1, [pc, #736]	; 17cfc <__assert_fail@plt+0x6788>
   17a18:	bl	113e8 <fprintf@plt>
   17a1c:	mov	r2, #5
   17a20:	ldr	r1, [pc, #728]	; 17d00 <__assert_fail@plt+0x678c>
   17a24:	mov	r0, #0
   17a28:	bl	11268 <dcgettext@plt>
   17a2c:	ldr	r3, [pc, #720]	; 17d04 <__assert_fail@plt+0x6790>
   17a30:	ldr	r1, [pc, #720]	; 17d08 <__assert_fail@plt+0x6794>
   17a34:	mov	r2, r0
   17a38:	mov	r0, r5
   17a3c:	bl	113e8 <fprintf@plt>
   17a40:	mov	r1, r5
   17a44:	mov	r0, #10
   17a48:	bl	114cc <fputc@plt>
   17a4c:	mov	r2, #5
   17a50:	ldr	r1, [pc, #692]	; 17d0c <__assert_fail@plt+0x6798>
   17a54:	mov	r0, #0
   17a58:	bl	11268 <dcgettext@plt>
   17a5c:	ldr	r2, [pc, #684]	; 17d10 <__assert_fail@plt+0x679c>
   17a60:	mov	r1, r0
   17a64:	mov	r0, r5
   17a68:	bl	113e8 <fprintf@plt>
   17a6c:	mov	r1, r5
   17a70:	mov	r0, #10
   17a74:	bl	114cc <fputc@plt>
   17a78:	cmp	r6, #9
   17a7c:	ldrls	pc, [pc, r6, lsl #2]
   17a80:	b	17cf0 <__assert_fail@plt+0x677c>
   17a84:	andeq	r7, r1, r8, lsr #23
   17a88:			; <UNDEFINED> instruction: 0x00017ab8
   17a8c:	andeq	r7, r1, r0, ror #21
   17a90:	andeq	r7, r1, r8, lsl #22
   17a94:	andeq	r7, r1, r8, lsr fp
   17a98:	andeq	r7, r1, r0, ror fp
   17a9c:			; <UNDEFINED> instruction: 0x00017bb0
   17aa0:	strdeq	r7, [r1], -r4
   17aa4:	andeq	r7, r1, r0, asr #24
   17aa8:	muleq	r1, r4, ip
   17aac:	ldr	r1, [pc, #608]	; 17d14 <__assert_fail@plt+0x67a0>
   17ab0:	bl	113e8 <fprintf@plt>
   17ab4:	b	17a1c <__assert_fail@plt+0x64a8>
   17ab8:	mov	r2, #5
   17abc:	ldr	r1, [pc, #596]	; 17d18 <__assert_fail@plt+0x67a4>
   17ac0:	mov	r0, #0
   17ac4:	bl	11268 <dcgettext@plt>
   17ac8:	ldr	r2, [r4]
   17acc:	mov	r1, r0
   17ad0:	mov	r0, r5
   17ad4:	add	sp, sp, #32
   17ad8:	pop	{r4, r5, r6, lr}
   17adc:	b	113e8 <fprintf@plt>
   17ae0:	mov	r2, #5
   17ae4:	ldr	r1, [pc, #560]	; 17d1c <__assert_fail@plt+0x67a8>
   17ae8:	mov	r0, #0
   17aec:	bl	11268 <dcgettext@plt>
   17af0:	ldm	r4, {r2, r3}
   17af4:	mov	r1, r0
   17af8:	mov	r0, r5
   17afc:	add	sp, sp, #32
   17b00:	pop	{r4, r5, r6, lr}
   17b04:	b	113e8 <fprintf@plt>
   17b08:	mov	r2, #5
   17b0c:	ldr	r1, [pc, #524]	; 17d20 <__assert_fail@plt+0x67ac>
   17b10:	mov	r0, #0
   17b14:	bl	11268 <dcgettext@plt>
   17b18:	ldr	r3, [r4, #8]
   17b1c:	str	r3, [sp, #48]	; 0x30
   17b20:	ldm	r4, {r2, r3}
   17b24:	mov	r1, r0
   17b28:	mov	r0, r5
   17b2c:	add	sp, sp, #32
   17b30:	pop	{r4, r5, r6, lr}
   17b34:	b	113e8 <fprintf@plt>
   17b38:	mov	r2, #5
   17b3c:	ldr	r1, [pc, #480]	; 17d24 <__assert_fail@plt+0x67b0>
   17b40:	mov	r0, #0
   17b44:	bl	11268 <dcgettext@plt>
   17b48:	ldr	r3, [r4, #12]
   17b4c:	str	r3, [sp, #52]	; 0x34
   17b50:	ldr	r3, [r4, #8]
   17b54:	str	r3, [sp, #48]	; 0x30
   17b58:	ldm	r4, {r2, r3}
   17b5c:	mov	r1, r0
   17b60:	mov	r0, r5
   17b64:	add	sp, sp, #32
   17b68:	pop	{r4, r5, r6, lr}
   17b6c:	b	113e8 <fprintf@plt>
   17b70:	mov	r2, #5
   17b74:	ldr	r1, [pc, #428]	; 17d28 <__assert_fail@plt+0x67b4>
   17b78:	mov	r0, #0
   17b7c:	bl	11268 <dcgettext@plt>
   17b80:	ldr	r3, [r4, #16]
   17b84:	str	r3, [sp, #8]
   17b88:	ldr	r3, [r4, #12]
   17b8c:	str	r3, [sp, #4]
   17b90:	ldr	r3, [r4, #8]
   17b94:	str	r3, [sp]
   17b98:	ldm	r4, {r2, r3}
   17b9c:	mov	r1, r0
   17ba0:	mov	r0, r5
   17ba4:	bl	113e8 <fprintf@plt>
   17ba8:	add	sp, sp, #32
   17bac:	pop	{r4, r5, r6, pc}
   17bb0:	mov	r2, #5
   17bb4:	ldr	r1, [pc, #368]	; 17d2c <__assert_fail@plt+0x67b8>
   17bb8:	mov	r0, #0
   17bbc:	bl	11268 <dcgettext@plt>
   17bc0:	ldr	r3, [r4, #20]
   17bc4:	str	r3, [sp, #12]
   17bc8:	ldr	r3, [r4, #16]
   17bcc:	str	r3, [sp, #8]
   17bd0:	ldr	r3, [r4, #12]
   17bd4:	str	r3, [sp, #4]
   17bd8:	ldr	r3, [r4, #8]
   17bdc:	str	r3, [sp]
   17be0:	ldm	r4, {r2, r3}
   17be4:	mov	r1, r0
   17be8:	mov	r0, r5
   17bec:	bl	113e8 <fprintf@plt>
   17bf0:	b	17ba8 <__assert_fail@plt+0x6634>
   17bf4:	mov	r2, #5
   17bf8:	ldr	r1, [pc, #304]	; 17d30 <__assert_fail@plt+0x67bc>
   17bfc:	mov	r0, #0
   17c00:	bl	11268 <dcgettext@plt>
   17c04:	ldr	r3, [r4, #24]
   17c08:	str	r3, [sp, #16]
   17c0c:	ldr	r3, [r4, #20]
   17c10:	str	r3, [sp, #12]
   17c14:	ldr	r3, [r4, #16]
   17c18:	str	r3, [sp, #8]
   17c1c:	ldr	r3, [r4, #12]
   17c20:	str	r3, [sp, #4]
   17c24:	ldr	r3, [r4, #8]
   17c28:	str	r3, [sp]
   17c2c:	ldm	r4, {r2, r3}
   17c30:	mov	r1, r0
   17c34:	mov	r0, r5
   17c38:	bl	113e8 <fprintf@plt>
   17c3c:	b	17ba8 <__assert_fail@plt+0x6634>
   17c40:	mov	r2, #5
   17c44:	ldr	r1, [pc, #232]	; 17d34 <__assert_fail@plt+0x67c0>
   17c48:	mov	r0, #0
   17c4c:	bl	11268 <dcgettext@plt>
   17c50:	ldr	r3, [r4, #28]
   17c54:	str	r3, [sp, #20]
   17c58:	ldr	r3, [r4, #24]
   17c5c:	str	r3, [sp, #16]
   17c60:	ldr	r3, [r4, #20]
   17c64:	str	r3, [sp, #12]
   17c68:	ldr	r3, [r4, #16]
   17c6c:	str	r3, [sp, #8]
   17c70:	ldr	r3, [r4, #12]
   17c74:	str	r3, [sp, #4]
   17c78:	ldr	r3, [r4, #8]
   17c7c:	str	r3, [sp]
   17c80:	ldm	r4, {r2, r3}
   17c84:	mov	r1, r0
   17c88:	mov	r0, r5
   17c8c:	bl	113e8 <fprintf@plt>
   17c90:	b	17ba8 <__assert_fail@plt+0x6634>
   17c94:	ldr	r1, [pc, #156]	; 17d38 <__assert_fail@plt+0x67c4>
   17c98:	mov	r2, #5
   17c9c:	mov	r0, #0
   17ca0:	bl	11268 <dcgettext@plt>
   17ca4:	ldr	r3, [r4, #32]
   17ca8:	str	r3, [sp, #24]
   17cac:	ldr	r3, [r4, #28]
   17cb0:	str	r3, [sp, #20]
   17cb4:	ldr	r3, [r4, #24]
   17cb8:	str	r3, [sp, #16]
   17cbc:	ldr	r3, [r4, #20]
   17cc0:	str	r3, [sp, #12]
   17cc4:	ldr	r3, [r4, #16]
   17cc8:	str	r3, [sp, #8]
   17ccc:	ldr	r3, [r4, #12]
   17cd0:	str	r3, [sp, #4]
   17cd4:	ldr	r3, [r4, #8]
   17cd8:	str	r3, [sp]
   17cdc:	ldm	r4, {r2, r3}
   17ce0:	mov	r1, r0
   17ce4:	mov	r0, r5
   17ce8:	bl	113e8 <fprintf@plt>
   17cec:	b	17ba8 <__assert_fail@plt+0x6634>
   17cf0:	mov	r2, #5
   17cf4:	ldr	r1, [pc, #64]	; 17d3c <__assert_fail@plt+0x67c8>
   17cf8:	b	17c9c <__assert_fail@plt+0x6728>
   17cfc:	ldrdeq	fp, [r1], -fp	; <UNPREDICTABLE>
   17d00:	andeq	fp, r1, lr, ror #7
   17d04:	andeq	r0, r0, r6, ror #15
   17d08:	andeq	fp, r1, r6, lsr #13
   17d0c:	strdeq	fp, [r1], -r2
   17d10:	muleq	r1, sp, r4
   17d14:	andeq	fp, r1, r7, ror #7
   17d18:			; <UNDEFINED> instruction: 0x0001b4bf
   17d1c:	andeq	fp, r1, pc, asr #9
   17d20:	andeq	fp, r1, r6, ror #9
   17d24:	andeq	fp, r1, r2, lsl #10
   17d28:	andeq	fp, r1, r2, lsr #10
   17d2c:	andeq	fp, r1, r6, asr #10
   17d30:	andeq	fp, r1, lr, ror #10
   17d34:	muleq	r1, sl, r5
   17d38:	andeq	fp, r1, sl, asr #11
   17d3c:	strdeq	fp, [r1], -lr
   17d40:	push	{r0, r1, r4, lr}
   17d44:	mov	ip, #0
   17d48:	ldr	lr, [sp, #16]
   17d4c:	ldr	r4, [lr, ip, lsl #2]
   17d50:	cmp	r4, #0
   17d54:	bne	17d6c <__assert_fail@plt+0x67f8>
   17d58:	str	ip, [sp, #4]
   17d5c:	str	lr, [sp]
   17d60:	bl	179ec <__assert_fail@plt+0x6478>
   17d64:	add	sp, sp, #8
   17d68:	pop	{r4, pc}
   17d6c:	add	ip, ip, #1
   17d70:	b	17d4c <__assert_fail@plt+0x67d8>
   17d74:	push	{r4, r5, lr}
   17d78:	sub	sp, sp, #52	; 0x34
   17d7c:	mov	ip, #0
   17d80:	ldr	r5, [sp, #64]	; 0x40
   17d84:	add	lr, sp, #8
   17d88:	ldr	r4, [r5, ip, lsl #2]
   17d8c:	cmp	r4, #0
   17d90:	str	r4, [lr, ip, lsl #2]
   17d94:	beq	17da4 <__assert_fail@plt+0x6830>
   17d98:	add	ip, ip, #1
   17d9c:	cmp	ip, #10
   17da0:	bne	17d88 <__assert_fail@plt+0x6814>
   17da4:	str	ip, [sp, #4]
   17da8:	str	lr, [sp]
   17dac:	bl	179ec <__assert_fail@plt+0x6478>
   17db0:	add	sp, sp, #52	; 0x34
   17db4:	pop	{r4, r5, pc}
   17db8:	push	{r3}		; (str r3, [sp, #-4]!)
   17dbc:	push	{r0, r1, r2, r3, lr}
   17dc0:	add	r3, sp, #24
   17dc4:	str	r3, [sp, #12]
   17dc8:	str	r3, [sp]
   17dcc:	ldr	r3, [sp, #20]
   17dd0:	bl	17d74 <__assert_fail@plt+0x6800>
   17dd4:	add	sp, sp, #16
   17dd8:	pop	{lr}		; (ldr lr, [sp], #4)
   17ddc:	add	sp, sp, #4
   17de0:	bx	lr
   17de4:	ldr	r3, [pc, #92]	; 17e48 <__assert_fail@plt+0x68d4>
   17de8:	push	{r4, lr}
   17dec:	mov	r0, #10
   17df0:	ldr	r1, [r3]
   17df4:	bl	114cc <fputc@plt>
   17df8:	mov	r2, #5
   17dfc:	ldr	r1, [pc, #72]	; 17e4c <__assert_fail@plt+0x68d8>
   17e00:	mov	r0, #0
   17e04:	bl	11268 <dcgettext@plt>
   17e08:	ldr	r1, [pc, #64]	; 17e50 <__assert_fail@plt+0x68dc>
   17e0c:	bl	111d8 <printf@plt>
   17e10:	mov	r2, #5
   17e14:	ldr	r1, [pc, #56]	; 17e54 <__assert_fail@plt+0x68e0>
   17e18:	mov	r0, #0
   17e1c:	bl	11268 <dcgettext@plt>
   17e20:	ldr	r2, [pc, #48]	; 17e58 <__assert_fail@plt+0x68e4>
   17e24:	ldr	r1, [pc, #48]	; 17e5c <__assert_fail@plt+0x68e8>
   17e28:	bl	111d8 <printf@plt>
   17e2c:	ldr	r1, [pc, #44]	; 17e60 <__assert_fail@plt+0x68ec>
   17e30:	mov	r2, #5
   17e34:	mov	r0, #0
   17e38:	bl	11268 <dcgettext@plt>
   17e3c:	ldr	r1, [pc, #32]	; 17e64 <__assert_fail@plt+0x68f0>
   17e40:	pop	{r4, lr}
   17e44:	b	111d8 <printf@plt>
   17e48:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   17e4c:	andeq	fp, r1, sl, lsr r6
   17e50:	andeq	fp, r1, r6, ror #3
   17e54:	andeq	fp, r1, lr, asr #12
   17e58:			; <UNDEFINED> instruction: 0x0001b1bf
   17e5c:	andeq	fp, r1, r2, lsr #1
   17e60:	andeq	fp, r1, r2, ror #12
   17e64:	andeq	fp, r1, r9, lsl #13
   17e68:	push	{r4, lr}
   17e6c:	bl	18a68 <__assert_fail@plt+0x74f4>
   17e70:	cmp	r0, #0
   17e74:	popne	{r4, pc}
   17e78:	bl	182fc <__assert_fail@plt+0x6d88>
   17e7c:	push	{r4, lr}
   17e80:	bl	18a68 <__assert_fail@plt+0x74f4>
   17e84:	cmp	r0, #0
   17e88:	popne	{r4, pc}
   17e8c:	bl	182fc <__assert_fail@plt+0x6d88>
   17e90:	b	17e68 <__assert_fail@plt+0x68f4>
   17e94:	push	{r4, r5, r6, lr}
   17e98:	mov	r5, r0
   17e9c:	mov	r4, r1
   17ea0:	bl	18af8 <__assert_fail@plt+0x7584>
   17ea4:	cmp	r0, #0
   17ea8:	popne	{r4, r5, r6, pc}
   17eac:	adds	r4, r4, #0
   17eb0:	movne	r4, #1
   17eb4:	cmp	r5, #0
   17eb8:	orreq	r4, r4, #1
   17ebc:	cmp	r4, #0
   17ec0:	popeq	{r4, r5, r6, pc}
   17ec4:	bl	182fc <__assert_fail@plt+0x6d88>
   17ec8:	push	{r4, lr}
   17ecc:	cmp	r1, #0
   17ed0:	orreq	r1, r1, #1
   17ed4:	bl	18af8 <__assert_fail@plt+0x7584>
   17ed8:	cmp	r0, #0
   17edc:	popne	{r4, pc}
   17ee0:	bl	182fc <__assert_fail@plt+0x6d88>
   17ee4:	push	{r4, r5, r6, lr}
   17ee8:	mov	r6, r0
   17eec:	mov	r5, r1
   17ef0:	mov	r4, r2
   17ef4:	bl	18b54 <__assert_fail@plt+0x75e0>
   17ef8:	cmp	r0, #0
   17efc:	popne	{r4, r5, r6, pc}
   17f00:	cmp	r6, #0
   17f04:	beq	17f14 <__assert_fail@plt+0x69a0>
   17f08:	cmp	r5, #0
   17f0c:	cmpne	r4, #0
   17f10:	popeq	{r4, r5, r6, pc}
   17f14:	bl	182fc <__assert_fail@plt+0x6d88>
   17f18:	b	17ee4 <__assert_fail@plt+0x6970>
   17f1c:	cmp	r2, #0
   17f20:	cmpne	r1, #0
   17f24:	moveq	r2, #1
   17f28:	moveq	r1, r2
   17f2c:	push	{r4, lr}
   17f30:	bl	18b54 <__assert_fail@plt+0x75e0>
   17f34:	cmp	r0, #0
   17f38:	popne	{r4, pc}
   17f3c:	bl	182fc <__assert_fail@plt+0x6d88>
   17f40:	mov	r2, r1
   17f44:	mov	r1, r0
   17f48:	mov	r0, #0
   17f4c:	b	17ee4 <__assert_fail@plt+0x6970>
   17f50:	mov	r2, r1
   17f54:	mov	r1, r0
   17f58:	mov	r0, #0
   17f5c:	b	17f1c <__assert_fail@plt+0x69a8>
   17f60:	push	{r4, r5, r6, r7, r8, lr}
   17f64:	subs	r7, r0, #0
   17f68:	mov	r5, r1
   17f6c:	mov	r6, r2
   17f70:	ldr	r4, [r1]
   17f74:	bne	17fb0 <__assert_fail@plt+0x6a3c>
   17f78:	cmp	r4, #0
   17f7c:	bne	17f98 <__assert_fail@plt+0x6a24>
   17f80:	mov	r1, r2
   17f84:	mov	r0, #64	; 0x40
   17f88:	bl	19020 <__assert_fail@plt+0x7aac>
   17f8c:	cmp	r0, #0
   17f90:	movne	r4, r0
   17f94:	addeq	r4, r0, #1
   17f98:	mov	r2, r6
   17f9c:	mov	r1, r4
   17fa0:	mov	r0, r7
   17fa4:	bl	17ee4 <__assert_fail@plt+0x6970>
   17fa8:	str	r4, [r5]
   17fac:	pop	{r4, r5, r6, r7, r8, pc}
   17fb0:	lsr	r2, r4, #1
   17fb4:	add	r3, r2, #1
   17fb8:	mvn	r3, r3
   17fbc:	cmp	r4, r3
   17fc0:	addls	r4, r4, #1
   17fc4:	addls	r4, r4, r2
   17fc8:	bls	17f98 <__assert_fail@plt+0x6a24>
   17fcc:	bl	182fc <__assert_fail@plt+0x6d88>
   17fd0:	mov	r2, #1
   17fd4:	b	17f60 <__assert_fail@plt+0x69ec>
   17fd8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fdc:	mov	sl, r0
   17fe0:	ldr	r8, [r1]
   17fe4:	mov	fp, r1
   17fe8:	mov	r5, r2
   17fec:	asrs	r4, r8, #1
   17ff0:	mov	r9, r3
   17ff4:	ldr	r7, [sp, #48]	; 0x30
   17ff8:	bpl	18094 <__assert_fail@plt+0x6b20>
   17ffc:	rsb	r2, r4, #-2147483648	; 0x80000000
   18000:	cmp	r8, r2
   18004:	movge	r2, #0
   18008:	movlt	r2, #1
   1800c:	mvn	r3, r9
   18010:	cmp	r2, #0
   18014:	lsr	r3, r3, #31
   18018:	addeq	r4, r4, r8
   1801c:	mvnne	r4, #-2147483648	; 0x80000000
   18020:	mov	r0, r3
   18024:	cmp	r9, r4
   18028:	movge	r0, #0
   1802c:	andlt	r0, r0, #1
   18030:	cmp	r0, #0
   18034:	str	r3, [sp, #4]
   18038:	bne	18208 <__assert_fail@plt+0x6c94>
   1803c:	cmp	r7, #0
   18040:	bge	18154 <__assert_fail@plt+0x6be0>
   18044:	cmp	r4, #0
   18048:	bge	180ac <__assert_fail@plt+0x6b38>
   1804c:	mov	r1, r7
   18050:	mvn	r0, #-2147483648	; 0x80000000
   18054:	bl	1922c <__assert_fail@plt+0x7cb8>
   18058:	cmp	r0, r4
   1805c:	movle	r0, #0
   18060:	movgt	r0, #1
   18064:	cmp	r0, #0
   18068:	mvnne	r6, #-2147483648	; 0x80000000
   1806c:	beq	180bc <__assert_fail@plt+0x6b48>
   18070:	mov	r1, r7
   18074:	mov	r0, r6
   18078:	bl	1922c <__assert_fail@plt+0x7cb8>
   1807c:	mov	r1, r7
   18080:	mov	r4, r0
   18084:	mov	r0, r6
   18088:	bl	1944c <__assert_fail@plt+0x7ed8>
   1808c:	sub	r1, r6, r1
   18090:	b	180cc <__assert_fail@plt+0x6b58>
   18094:	mvn	r2, #-2147483648	; 0x80000000
   18098:	sub	r2, r2, r4
   1809c:	cmp	r8, r2
   180a0:	movle	r2, #0
   180a4:	movgt	r2, #1
   180a8:	b	1800c <__assert_fail@plt+0x6a98>
   180ac:	cmn	r7, #1
   180b0:	movne	r1, r7
   180b4:	movne	r0, #-2147483648	; 0x80000000
   180b8:	bne	18220 <__assert_fail@plt+0x6cac>
   180bc:	mul	r1, r7, r4
   180c0:	cmp	r1, #63	; 0x3f
   180c4:	movle	r6, #64	; 0x40
   180c8:	ble	18070 <__assert_fail@plt+0x6afc>
   180cc:	cmp	sl, #0
   180d0:	sub	r2, r4, r8
   180d4:	streq	sl, [fp]
   180d8:	cmp	r2, r5
   180dc:	bge	181b0 <__assert_fail@plt+0x6c3c>
   180e0:	cmp	r5, #0
   180e4:	bge	1817c <__assert_fail@plt+0x6c08>
   180e8:	rsb	r2, r5, #-2147483648	; 0x80000000
   180ec:	cmp	r8, r2
   180f0:	movge	r2, #0
   180f4:	movlt	r2, #1
   180f8:	cmp	r2, #0
   180fc:	bne	18150 <__assert_fail@plt+0x6bdc>
   18100:	ldr	r0, [sp, #4]
   18104:	add	r5, r8, r5
   18108:	cmp	r9, r5
   1810c:	movge	r0, #0
   18110:	andlt	r0, r0, #1
   18114:	cmp	r0, #0
   18118:	mov	r4, r5
   1811c:	bne	18150 <__assert_fail@plt+0x6bdc>
   18120:	cmp	r7, #0
   18124:	bge	181c4 <__assert_fail@plt+0x6c50>
   18128:	cmp	r5, #0
   1812c:	bge	1819c <__assert_fail@plt+0x6c28>
   18130:	mov	r1, r7
   18134:	mvn	r0, #-2147483648	; 0x80000000
   18138:	bl	1922c <__assert_fail@plt+0x7cb8>
   1813c:	cmp	r5, r0
   18140:	movge	r0, #0
   18144:	movlt	r0, #1
   18148:	cmp	r0, #0
   1814c:	beq	181ac <__assert_fail@plt+0x6c38>
   18150:	bl	182fc <__assert_fail@plt+0x6d88>
   18154:	beq	180bc <__assert_fail@plt+0x6b48>
   18158:	cmp	r4, #0
   1815c:	bge	18218 <__assert_fail@plt+0x6ca4>
   18160:	cmn	r4, #1
   18164:	beq	180bc <__assert_fail@plt+0x6b48>
   18168:	mov	r1, r4
   1816c:	mov	r0, #-2147483648	; 0x80000000
   18170:	bl	1922c <__assert_fail@plt+0x7cb8>
   18174:	cmp	r7, r0
   18178:	b	1805c <__assert_fail@plt+0x6ae8>
   1817c:	cmp	r8, #0
   18180:	blt	18100 <__assert_fail@plt+0x6b8c>
   18184:	mvn	r2, #-2147483648	; 0x80000000
   18188:	sub	r2, r2, r5
   1818c:	cmp	r8, r2
   18190:	movle	r2, #0
   18194:	movgt	r2, #1
   18198:	b	180f8 <__assert_fail@plt+0x6b84>
   1819c:	cmn	r7, #1
   181a0:	movne	r1, r7
   181a4:	movne	r0, #-2147483648	; 0x80000000
   181a8:	bne	181fc <__assert_fail@plt+0x6c88>
   181ac:	mul	r1, r5, r7
   181b0:	mov	r0, sl
   181b4:	bl	17e94 <__assert_fail@plt+0x6920>
   181b8:	str	r4, [fp]
   181bc:	add	sp, sp, #12
   181c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181c4:	beq	181ac <__assert_fail@plt+0x6c38>
   181c8:	cmp	r5, #0
   181cc:	movge	r1, r7
   181d0:	mvnge	r0, #-2147483648	; 0x80000000
   181d4:	bge	181fc <__assert_fail@plt+0x6c88>
   181d8:	cmn	r5, #1
   181dc:	beq	181ac <__assert_fail@plt+0x6c38>
   181e0:	mov	r1, r5
   181e4:	mov	r0, #-2147483648	; 0x80000000
   181e8:	bl	1922c <__assert_fail@plt+0x7cb8>
   181ec:	cmp	r7, r0
   181f0:	movle	r0, #0
   181f4:	movgt	r0, #1
   181f8:	b	18148 <__assert_fail@plt+0x6bd4>
   181fc:	bl	1922c <__assert_fail@plt+0x7cb8>
   18200:	cmp	r5, r0
   18204:	b	181f0 <__assert_fail@plt+0x6c7c>
   18208:	cmp	r7, #0
   1820c:	mov	r4, r9
   18210:	blt	180ac <__assert_fail@plt+0x6b38>
   18214:	beq	180bc <__assert_fail@plt+0x6b48>
   18218:	mov	r1, r7
   1821c:	mvn	r0, #-2147483648	; 0x80000000
   18220:	bl	1922c <__assert_fail@plt+0x7cb8>
   18224:	cmp	r0, r4
   18228:	movge	r0, #0
   1822c:	movlt	r0, #1
   18230:	b	18064 <__assert_fail@plt+0x6af0>
   18234:	push	{r4, lr}
   18238:	bl	186e8 <__assert_fail@plt+0x7174>
   1823c:	cmp	r0, #0
   18240:	popne	{r4, pc}
   18244:	bl	182fc <__assert_fail@plt+0x6d88>
   18248:	mov	r1, #1
   1824c:	b	18234 <__assert_fail@plt+0x6cc0>
   18250:	push	{r4, lr}
   18254:	bl	186e8 <__assert_fail@plt+0x7174>
   18258:	cmp	r0, #0
   1825c:	popne	{r4, pc}
   18260:	bl	182fc <__assert_fail@plt+0x6d88>
   18264:	mov	r1, #1
   18268:	b	18250 <__assert_fail@plt+0x6cdc>
   1826c:	push	{r4, r5, r6, lr}
   18270:	mov	r4, r1
   18274:	mov	r5, r0
   18278:	mov	r0, r1
   1827c:	bl	17e68 <__assert_fail@plt+0x68f4>
   18280:	mov	r2, r4
   18284:	mov	r1, r5
   18288:	pop	{r4, r5, r6, lr}
   1828c:	b	1122c <memcpy@plt>
   18290:	push	{r4, r5, r6, lr}
   18294:	mov	r4, r1
   18298:	mov	r5, r0
   1829c:	mov	r0, r1
   182a0:	bl	17e7c <__assert_fail@plt+0x6908>
   182a4:	mov	r2, r4
   182a8:	mov	r1, r5
   182ac:	pop	{r4, r5, r6, lr}
   182b0:	b	1122c <memcpy@plt>
   182b4:	push	{r4, r5, r6, lr}
   182b8:	mov	r5, r0
   182bc:	add	r0, r1, #1
   182c0:	mov	r4, r1
   182c4:	bl	17e7c <__assert_fail@plt+0x6908>
   182c8:	mov	r2, #0
   182cc:	mov	r1, r5
   182d0:	strb	r2, [r0, r4]
   182d4:	mov	r2, r4
   182d8:	pop	{r4, r5, r6, lr}
   182dc:	b	1122c <memcpy@plt>
   182e0:	push	{r4, lr}
   182e4:	mov	r4, r0
   182e8:	bl	113c4 <strlen@plt>
   182ec:	add	r1, r0, #1
   182f0:	mov	r0, r4
   182f4:	pop	{r4, lr}
   182f8:	b	1826c <__assert_fail@plt+0x6cf8>
   182fc:	ldr	r3, [pc, #44]	; 18330 <__assert_fail@plt+0x6dbc>
   18300:	push	{r4, lr}
   18304:	mov	r2, #5
   18308:	ldr	r1, [pc, #36]	; 18334 <__assert_fail@plt+0x6dc0>
   1830c:	mov	r0, #0
   18310:	ldr	r4, [r3]
   18314:	bl	11268 <dcgettext@plt>
   18318:	ldr	r2, [pc, #24]	; 18338 <__assert_fail@plt+0x6dc4>
   1831c:	mov	r1, #0
   18320:	mov	r3, r0
   18324:	mov	r0, r4
   18328:	bl	11328 <error@plt>
   1832c:	bl	11544 <abort@plt>
   18330:	andeq	ip, r2, r0, ror r1
   18334:	ldrdeq	fp, [r1], -r5
   18338:	andeq	fp, r1, lr, ror #1
   1833c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18340:	mov	r4, #0
   18344:	mov	r7, r0
   18348:	mov	r8, r1
   1834c:	mov	r6, r2
   18350:	mvn	r9, #0
   18354:	mov	sl, r4
   18358:	mov	fp, #1
   1835c:	subs	r6, r6, #1
   18360:	bcs	1836c <__assert_fail@plt+0x6df8>
   18364:	mov	r0, r4
   18368:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1836c:	mov	r1, r8
   18370:	mov	r0, r9
   18374:	bl	19020 <__assert_fail@plt+0x7aac>
   18378:	ldr	r5, [r7]
   1837c:	cmp	r0, r5
   18380:	movcc	r3, fp
   18384:	mulcs	r5, r5, r8
   18388:	movcs	r3, sl
   1838c:	strcc	r9, [r7]
   18390:	strcs	r5, [r7]
   18394:	orr	r4, r4, r3
   18398:	b	1835c <__assert_fail@plt+0x6de8>
   1839c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183a0:	cmp	r2, #36	; 0x24
   183a4:	ldr	r9, [sp, #48]	; 0x30
   183a8:	bls	183c0 <__assert_fail@plt+0x6e4c>
   183ac:	ldr	r3, [pc, #808]	; 186dc <__assert_fail@plt+0x7168>
   183b0:	mov	r2, #84	; 0x54
   183b4:	ldr	r1, [pc, #804]	; 186e0 <__assert_fail@plt+0x716c>
   183b8:	ldr	r0, [pc, #804]	; 186e4 <__assert_fail@plt+0x7170>
   183bc:	bl	11574 <__assert_fail@plt>
   183c0:	cmp	r1, #0
   183c4:	mov	r7, r1
   183c8:	mov	r4, r0
   183cc:	mov	fp, r2
   183d0:	mov	r8, r3
   183d4:	moveq	r7, sp
   183d8:	bl	113f4 <__errno_location@plt>
   183dc:	mov	r3, #0
   183e0:	str	r3, [r0]
   183e4:	mov	sl, r0
   183e8:	bl	11394 <__ctype_b_loc@plt>
   183ec:	ldrb	r6, [r4]
   183f0:	mov	r3, r4
   183f4:	ldr	r1, [r0]
   183f8:	lsl	r2, r6, #1
   183fc:	ldrh	r5, [r1, r2]
   18400:	ands	r5, r5, #8192	; 0x2000
   18404:	bne	18420 <__assert_fail@plt+0x6eac>
   18408:	cmp	r6, #45	; 0x2d
   1840c:	bne	18428 <__assert_fail@plt+0x6eb4>
   18410:	mov	r5, #4
   18414:	mov	r0, r5
   18418:	add	sp, sp, #12
   1841c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18420:	ldrb	r6, [r3, #1]!
   18424:	b	183f8 <__assert_fail@plt+0x6e84>
   18428:	mov	r2, fp
   1842c:	mov	r1, r7
   18430:	mov	r0, r4
   18434:	bl	113b8 <strtoul@plt>
   18438:	ldr	r6, [r7]
   1843c:	cmp	r4, r6
   18440:	str	r0, [sp, #4]
   18444:	bne	184a4 <__assert_fail@plt+0x6f30>
   18448:	cmp	r9, #0
   1844c:	beq	18410 <__assert_fail@plt+0x6e9c>
   18450:	ldrb	r1, [r6]
   18454:	cmp	r1, #0
   18458:	beq	18410 <__assert_fail@plt+0x6e9c>
   1845c:	mov	r0, r9
   18460:	bl	113d0 <strchr@plt>
   18464:	cmp	r0, #0
   18468:	movne	r3, #1
   1846c:	strne	r3, [sp, #4]
   18470:	beq	18410 <__assert_fail@plt+0x6e9c>
   18474:	ldrb	r4, [r6]
   18478:	cmp	r4, #0
   1847c:	beq	1869c <__assert_fail@plt+0x7128>
   18480:	mov	r1, r4
   18484:	mov	r0, r9
   18488:	bl	113d0 <strchr@plt>
   1848c:	cmp	r0, #0
   18490:	bne	184cc <__assert_fail@plt+0x6f58>
   18494:	ldr	r3, [sp, #4]
   18498:	orr	r5, r5, #2
   1849c:	str	r3, [r8]
   184a0:	b	18414 <__assert_fail@plt+0x6ea0>
   184a4:	ldr	r5, [sl]
   184a8:	cmp	r5, #0
   184ac:	beq	184bc <__assert_fail@plt+0x6f48>
   184b0:	cmp	r5, #34	; 0x22
   184b4:	bne	18410 <__assert_fail@plt+0x6e9c>
   184b8:	mov	r5, #1
   184bc:	cmp	r9, #0
   184c0:	streq	r0, [r8]
   184c4:	bne	18474 <__assert_fail@plt+0x6f00>
   184c8:	b	18414 <__assert_fail@plt+0x6ea0>
   184cc:	cmp	r4, #84	; 0x54
   184d0:	beq	18524 <__assert_fail@plt+0x6fb0>
   184d4:	bhi	1850c <__assert_fail@plt+0x6f98>
   184d8:	cmp	r4, #75	; 0x4b
   184dc:	beq	18524 <__assert_fail@plt+0x6fb0>
   184e0:	bhi	184fc <__assert_fail@plt+0x6f88>
   184e4:	cmp	r4, #69	; 0x45
   184e8:	beq	18524 <__assert_fail@plt+0x6fb0>
   184ec:	cmp	r4, #71	; 0x47
   184f0:	beq	18524 <__assert_fail@plt+0x6fb0>
   184f4:	mov	r6, #1
   184f8:	b	185d0 <__assert_fail@plt+0x705c>
   184fc:	cmp	r4, #77	; 0x4d
   18500:	beq	18524 <__assert_fail@plt+0x6fb0>
   18504:	cmp	r4, #80	; 0x50
   18508:	b	184f0 <__assert_fail@plt+0x6f7c>
   1850c:	cmp	r4, #103	; 0x67
   18510:	beq	18524 <__assert_fail@plt+0x6fb0>
   18514:	bhi	185a8 <__assert_fail@plt+0x7034>
   18518:	sub	r3, r4, #89	; 0x59
   1851c:	cmp	r3, #1
   18520:	bhi	184f4 <__assert_fail@plt+0x6f80>
   18524:	mov	r1, #48	; 0x30
   18528:	mov	r0, r9
   1852c:	bl	113d0 <strchr@plt>
   18530:	cmp	r0, #0
   18534:	beq	184f4 <__assert_fail@plt+0x6f80>
   18538:	ldrb	r3, [r6, #1]
   1853c:	cmp	r3, #68	; 0x44
   18540:	beq	18554 <__assert_fail@plt+0x6fe0>
   18544:	cmp	r3, #105	; 0x69
   18548:	beq	185c0 <__assert_fail@plt+0x704c>
   1854c:	cmp	r3, #66	; 0x42
   18550:	bne	184f4 <__assert_fail@plt+0x6f80>
   18554:	mov	r6, #2
   18558:	mov	r1, #1000	; 0x3e8
   1855c:	cmp	r4, #89	; 0x59
   18560:	beq	186d4 <__assert_fail@plt+0x7160>
   18564:	bhi	185f8 <__assert_fail@plt+0x7084>
   18568:	cmp	r4, #75	; 0x4b
   1856c:	beq	18638 <__assert_fail@plt+0x70c4>
   18570:	bhi	185d8 <__assert_fail@plt+0x7064>
   18574:	cmp	r4, #69	; 0x45
   18578:	beq	186a8 <__assert_fail@plt+0x7134>
   1857c:	cmp	r4, #71	; 0x47
   18580:	beq	186b4 <__assert_fail@plt+0x7140>
   18584:	cmp	r4, #66	; 0x42
   18588:	bne	18494 <__assert_fail@plt+0x6f20>
   1858c:	ldr	r3, [sp, #4]
   18590:	cmp	r3, #4194304	; 0x400000
   18594:	bcs	18674 <__assert_fail@plt+0x7100>
   18598:	lsl	r3, r3, #10
   1859c:	str	r3, [sp, #4]
   185a0:	mov	r0, #0
   185a4:	b	18680 <__assert_fail@plt+0x710c>
   185a8:	cmp	r4, #109	; 0x6d
   185ac:	beq	18524 <__assert_fail@plt+0x6fb0>
   185b0:	cmp	r4, #116	; 0x74
   185b4:	beq	18524 <__assert_fail@plt+0x6fb0>
   185b8:	cmp	r4, #107	; 0x6b
   185bc:	b	184f0 <__assert_fail@plt+0x6f7c>
   185c0:	ldrb	r6, [r6, #2]
   185c4:	cmp	r6, #66	; 0x42
   185c8:	movne	r6, #1
   185cc:	moveq	r6, #3
   185d0:	mov	r1, #1024	; 0x400
   185d4:	b	1855c <__assert_fail@plt+0x6fe8>
   185d8:	cmp	r4, #80	; 0x50
   185dc:	beq	186bc <__assert_fail@plt+0x7148>
   185e0:	cmp	r4, #84	; 0x54
   185e4:	beq	186c4 <__assert_fail@plt+0x7150>
   185e8:	cmp	r4, #77	; 0x4d
   185ec:	bne	18494 <__assert_fail@plt+0x6f20>
   185f0:	mov	r2, #2
   185f4:	b	186ac <__assert_fail@plt+0x7138>
   185f8:	cmp	r4, #103	; 0x67
   185fc:	beq	186b4 <__assert_fail@plt+0x7140>
   18600:	bhi	18624 <__assert_fail@plt+0x70b0>
   18604:	cmp	r4, #98	; 0x62
   18608:	beq	18664 <__assert_fail@plt+0x70f0>
   1860c:	cmp	r4, #99	; 0x63
   18610:	beq	185a0 <__assert_fail@plt+0x702c>
   18614:	cmp	r4, #90	; 0x5a
   18618:	bne	18494 <__assert_fail@plt+0x6f20>
   1861c:	mov	r2, #7
   18620:	b	186ac <__assert_fail@plt+0x7138>
   18624:	cmp	r4, #109	; 0x6d
   18628:	beq	185f0 <__assert_fail@plt+0x707c>
   1862c:	bhi	18640 <__assert_fail@plt+0x70cc>
   18630:	cmp	r4, #107	; 0x6b
   18634:	bne	18494 <__assert_fail@plt+0x6f20>
   18638:	mov	r2, #1
   1863c:	b	186ac <__assert_fail@plt+0x7138>
   18640:	cmp	r4, #116	; 0x74
   18644:	beq	186c4 <__assert_fail@plt+0x7150>
   18648:	cmp	r4, #119	; 0x77
   1864c:	bne	18494 <__assert_fail@plt+0x6f20>
   18650:	ldr	r3, [sp, #4]
   18654:	cmp	r3, #0
   18658:	lslge	r3, r3, #1
   1865c:	bge	1859c <__assert_fail@plt+0x7028>
   18660:	b	18674 <__assert_fail@plt+0x7100>
   18664:	ldr	r3, [sp, #4]
   18668:	cmp	r3, #8388608	; 0x800000
   1866c:	lslcc	r3, r3, #9
   18670:	bcc	1859c <__assert_fail@plt+0x7028>
   18674:	mov	r0, #1
   18678:	mvn	r3, #0
   1867c:	str	r3, [sp, #4]
   18680:	ldr	r3, [r7]
   18684:	orr	r5, r5, r0
   18688:	add	r2, r3, r6
   1868c:	str	r2, [r7]
   18690:	ldrb	r3, [r3, r6]
   18694:	cmp	r3, #0
   18698:	orrne	r5, r5, #2
   1869c:	ldr	r3, [sp, #4]
   186a0:	str	r3, [r8]
   186a4:	b	18414 <__assert_fail@plt+0x6ea0>
   186a8:	mov	r2, #6
   186ac:	add	r0, sp, #4
   186b0:	b	186cc <__assert_fail@plt+0x7158>
   186b4:	mov	r2, #3
   186b8:	b	186ac <__assert_fail@plt+0x7138>
   186bc:	mov	r2, #5
   186c0:	b	186ac <__assert_fail@plt+0x7138>
   186c4:	mov	r2, #4
   186c8:	add	r0, sp, r2
   186cc:	bl	1833c <__assert_fail@plt+0x6dc8>
   186d0:	b	18680 <__assert_fail@plt+0x710c>
   186d4:	mov	r2, #8
   186d8:	b	186ac <__assert_fail@plt+0x7138>
   186dc:	andeq	fp, r1, r6, ror #13
   186e0:	andeq	fp, r1, pc, ror #13
   186e4:	strdeq	fp, [r1], -r9
   186e8:	cmp	r1, #0
   186ec:	cmpne	r0, #0
   186f0:	moveq	r1, #1
   186f4:	moveq	r0, r1
   186f8:	umull	r2, r3, r0, r1
   186fc:	adds	r3, r3, #0
   18700:	movne	r3, #1
   18704:	cmp	r2, #0
   18708:	blt	18718 <__assert_fail@plt+0x71a4>
   1870c:	cmp	r3, #0
   18710:	bne	18718 <__assert_fail@plt+0x71a4>
   18714:	b	111a8 <calloc@plt>
   18718:	push	{r4, lr}
   1871c:	bl	113f4 <__errno_location@plt>
   18720:	mov	r3, #12
   18724:	str	r3, [r0]
   18728:	mov	r0, #0
   1872c:	pop	{r4, pc}
   18730:	push	{r1, r2, r3}
   18734:	push	{r0, r1, r4, r5, r6, r7, lr}
   18738:	add	r2, sp, #32
   1873c:	ldr	r1, [sp, #28]
   18740:	str	r2, [sp, #4]
   18744:	cmp	r1, #0
   18748:	beq	1878c <__assert_fail@plt+0x7218>
   1874c:	ldr	r3, [pc, #396]	; 188e0 <__assert_fail@plt+0x736c>
   18750:	mov	r6, r0
   18754:	cmp	r1, r3
   18758:	beq	18798 <__assert_fail@plt+0x7224>
   1875c:	cmp	r1, #11
   18760:	beq	1877c <__assert_fail@plt+0x7208>
   18764:	bgt	188a8 <__assert_fail@plt+0x7334>
   18768:	cmp	r1, #3
   1876c:	beq	1877c <__assert_fail@plt+0x7208>
   18770:	bgt	18884 <__assert_fail@plt+0x7310>
   18774:	cmp	r1, #1
   18778:	bne	18890 <__assert_fail@plt+0x731c>
   1877c:	mov	r0, r6
   18780:	bl	11484 <fcntl64@plt>
   18784:	mov	r4, r0
   18788:	b	18844 <__assert_fail@plt+0x72d0>
   1878c:	ldr	r2, [sp, #32]
   18790:	bl	11484 <fcntl64@plt>
   18794:	b	18784 <__assert_fail@plt+0x7210>
   18798:	ldr	r5, [pc, #324]	; 188e4 <__assert_fail@plt+0x7370>
   1879c:	add	r3, sp, #36	; 0x24
   187a0:	str	r3, [sp, #4]
   187a4:	ldr	r3, [r5]
   187a8:	ldr	r7, [r2]
   187ac:	cmp	r3, #0
   187b0:	mov	r2, r7
   187b4:	blt	18858 <__assert_fail@plt+0x72e4>
   187b8:	bl	11484 <fcntl64@plt>
   187bc:	subs	r4, r0, #0
   187c0:	bge	187d4 <__assert_fail@plt+0x7260>
   187c4:	bl	113f4 <__errno_location@plt>
   187c8:	ldr	r3, [r0]
   187cc:	cmp	r3, #22
   187d0:	beq	18824 <__assert_fail@plt+0x72b0>
   187d4:	mov	r3, #1
   187d8:	str	r3, [r5]
   187dc:	cmp	r4, #0
   187e0:	blt	18844 <__assert_fail@plt+0x72d0>
   187e4:	ldr	r5, [r5]
   187e8:	cmn	r5, #1
   187ec:	bne	18844 <__assert_fail@plt+0x72d0>
   187f0:	mov	r1, #1
   187f4:	mov	r0, r4
   187f8:	bl	11484 <fcntl64@plt>
   187fc:	subs	r2, r0, #0
   18800:	bge	18868 <__assert_fail@plt+0x72f4>
   18804:	bl	113f4 <__errno_location@plt>
   18808:	ldr	r7, [r0]
   1880c:	mov	r6, r0
   18810:	mov	r0, r4
   18814:	bl	1155c <close@plt>
   18818:	mov	r4, r5
   1881c:	str	r7, [r6]
   18820:	b	18844 <__assert_fail@plt+0x72d0>
   18824:	mov	r2, r7
   18828:	mov	r1, #0
   1882c:	mov	r0, r6
   18830:	bl	11484 <fcntl64@plt>
   18834:	subs	r4, r0, #0
   18838:	mvnge	r3, #0
   1883c:	strge	r3, [r5]
   18840:	bge	187e4 <__assert_fail@plt+0x7270>
   18844:	mov	r0, r4
   18848:	add	sp, sp, #8
   1884c:	pop	{r4, r5, r6, r7, lr}
   18850:	add	sp, sp, #12
   18854:	bx	lr
   18858:	mov	r1, #0
   1885c:	bl	11484 <fcntl64@plt>
   18860:	mov	r4, r0
   18864:	b	187dc <__assert_fail@plt+0x7268>
   18868:	orr	r2, r2, #1
   1886c:	mov	r1, #2
   18870:	mov	r0, r4
   18874:	bl	11484 <fcntl64@plt>
   18878:	cmn	r0, #1
   1887c:	bne	18844 <__assert_fail@plt+0x72d0>
   18880:	b	18804 <__assert_fail@plt+0x7290>
   18884:	cmp	r1, #8
   18888:	beq	18890 <__assert_fail@plt+0x731c>
   1888c:	bgt	188a0 <__assert_fail@plt+0x732c>
   18890:	ldr	r3, [sp, #4]
   18894:	mov	r0, r6
   18898:	ldr	r2, [r3]
   1889c:	b	18790 <__assert_fail@plt+0x721c>
   188a0:	cmp	r1, #9
   188a4:	b	18778 <__assert_fail@plt+0x7204>
   188a8:	ldr	r2, [pc, #56]	; 188e8 <__assert_fail@plt+0x7374>
   188ac:	cmp	r1, r2
   188b0:	bgt	188c8 <__assert_fail@plt+0x7354>
   188b4:	cmp	r1, r3
   188b8:	ldrlt	r3, [pc, #44]	; 188ec <__assert_fail@plt+0x7378>
   188bc:	bge	18890 <__assert_fail@plt+0x731c>
   188c0:	cmp	r1, r3
   188c4:	b	18778 <__assert_fail@plt+0x7204>
   188c8:	ldr	r3, [pc, #32]	; 188f0 <__assert_fail@plt+0x737c>
   188cc:	cmp	r1, r3
   188d0:	beq	18890 <__assert_fail@plt+0x731c>
   188d4:	blt	1877c <__assert_fail@plt+0x7208>
   188d8:	add	r3, r3, #1
   188dc:	b	188c0 <__assert_fail@plt+0x734c>
   188e0:	andeq	r0, r0, r6, lsl #8
   188e4:	andeq	ip, r2, r8, ror #7
   188e8:	andeq	r0, r0, r7, lsl #8
   188ec:	andeq	r0, r0, r1, lsl #8
   188f0:	andeq	r0, r0, r9, lsl #8
   188f4:	push	{r0, r1, r4, lr}
   188f8:	subs	r4, r0, #0
   188fc:	bne	18910 <__assert_fail@plt+0x739c>
   18900:	mov	r0, r4
   18904:	add	sp, sp, #8
   18908:	pop	{r4, lr}
   1890c:	b	111f0 <fflush@plt>
   18910:	bl	11370 <__freading@plt>
   18914:	cmp	r0, #0
   18918:	beq	18900 <__assert_fail@plt+0x738c>
   1891c:	ldr	r3, [r4]
   18920:	tst	r3, #256	; 0x100
   18924:	beq	18900 <__assert_fail@plt+0x738c>
   18928:	mov	r3, #1
   1892c:	str	r3, [sp]
   18930:	mov	r2, #0
   18934:	mov	r3, #0
   18938:	mov	r0, r4
   1893c:	bl	189d4 <__assert_fail@plt+0x7460>
   18940:	b	18900 <__assert_fail@plt+0x738c>
   18944:	ldr	r2, [r0, #20]
   18948:	ldr	r3, [r0, #16]
   1894c:	cmp	r2, r3
   18950:	bhi	18978 <__assert_fail@plt+0x7404>
   18954:	ldmib	r0, {r2, r3}
   18958:	sub	r2, r3, r2
   1895c:	ldr	r3, [r0]
   18960:	ands	r3, r3, #256	; 0x100
   18964:	ldrne	r3, [r0, #44]	; 0x2c
   18968:	ldrne	r0, [r0, #36]	; 0x24
   1896c:	subne	r3, r3, r0
   18970:	add	r0, r3, r2
   18974:	bx	lr
   18978:	mov	r0, #0
   1897c:	bx	lr
   18980:	push	{r0, r1, r2, r4, r5, lr}
   18984:	mov	r5, r0
   18988:	bl	113f4 <__errno_location@plt>
   1898c:	ldr	r3, [r0]
   18990:	mov	r4, r0
   18994:	str	r3, [sp]
   18998:	str	r3, [sp, #4]
   1899c:	mov	r3, #0
   189a0:	str	r3, [r0]
   189a4:	mov	r0, r5
   189a8:	bl	11208 <free@plt>
   189ac:	ldr	r3, [r4]
   189b0:	add	r2, sp, #8
   189b4:	cmp	r3, #0
   189b8:	moveq	r3, #4
   189bc:	movne	r3, #0
   189c0:	add	r3, r2, r3
   189c4:	ldr	r3, [r3, #-8]
   189c8:	str	r3, [r4]
   189cc:	add	sp, sp, #12
   189d0:	pop	{r4, r5, pc}
   189d4:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   189d8:	mov	r4, r0
   189dc:	ldmib	r0, {ip, lr}
   189e0:	ldr	r8, [sp, #32]
   189e4:	cmp	lr, ip
   189e8:	bne	18a54 <__assert_fail@plt+0x74e0>
   189ec:	ldr	lr, [r0, #20]
   189f0:	ldr	ip, [r0, #16]
   189f4:	cmp	lr, ip
   189f8:	bne	18a54 <__assert_fail@plt+0x74e0>
   189fc:	ldr	r5, [r0, #36]	; 0x24
   18a00:	cmp	r5, #0
   18a04:	bne	18a54 <__assert_fail@plt+0x74e0>
   18a08:	mov	r6, r2
   18a0c:	mov	r7, r3
   18a10:	bl	1143c <fileno@plt>
   18a14:	mov	r2, r6
   18a18:	mov	r3, r7
   18a1c:	str	r8, [sp]
   18a20:	bl	112e0 <lseek64@plt>
   18a24:	mvn	r3, #0
   18a28:	mvn	r2, #0
   18a2c:	cmp	r1, r3
   18a30:	cmpeq	r0, r2
   18a34:	mvneq	r0, #0
   18a38:	ldrne	r3, [r4]
   18a3c:	strdne	r0, [r4, #80]	; 0x50
   18a40:	movne	r0, r5
   18a44:	bicne	r3, r3, #16
   18a48:	strne	r3, [r4]
   18a4c:	add	sp, sp, #8
   18a50:	pop	{r4, r5, r6, r7, r8, pc}
   18a54:	str	r8, [sp, #32]
   18a58:	mov	r0, r4
   18a5c:	add	sp, sp, #8
   18a60:	pop	{r4, r5, r6, r7, r8, lr}
   18a64:	b	11478 <fseeko64@plt>
   18a68:	cmp	r0, #0
   18a6c:	mov	r3, #0
   18a70:	moveq	r0, #1
   18a74:	adds	r3, r3, #0
   18a78:	movne	r3, #1
   18a7c:	cmp	r0, #0
   18a80:	blt	18a90 <__assert_fail@plt+0x751c>
   18a84:	cmp	r3, #0
   18a88:	bne	18a90 <__assert_fail@plt+0x751c>
   18a8c:	b	11358 <malloc@plt>
   18a90:	push	{r4, lr}
   18a94:	bl	113f4 <__errno_location@plt>
   18a98:	mov	r3, #12
   18a9c:	str	r3, [r0]
   18aa0:	mov	r0, #0
   18aa4:	pop	{r4, pc}
   18aa8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18aac:	subs	r5, r0, #0
   18ab0:	addeq	r5, sp, #4
   18ab4:	mov	r0, r5
   18ab8:	mov	r7, r2
   18abc:	mov	r6, r1
   18ac0:	bl	1131c <mbrtowc@plt>
   18ac4:	cmp	r7, #0
   18ac8:	cmnne	r0, #3
   18acc:	mov	r4, r0
   18ad0:	bls	18aec <__assert_fail@plt+0x7578>
   18ad4:	mov	r0, #0
   18ad8:	bl	18c10 <__assert_fail@plt+0x769c>
   18adc:	cmp	r0, #0
   18ae0:	moveq	r4, #1
   18ae4:	ldrbeq	r3, [r6]
   18ae8:	streq	r3, [r5]
   18aec:	mov	r0, r4
   18af0:	add	sp, sp, #12
   18af4:	pop	{r4, r5, r6, r7, pc}
   18af8:	cmp	r0, #0
   18afc:	push	{r4, lr}
   18b00:	mov	r4, r1
   18b04:	bne	18b14 <__assert_fail@plt+0x75a0>
   18b08:	mov	r0, r1
   18b0c:	pop	{r4, lr}
   18b10:	b	18a68 <__assert_fail@plt+0x74f4>
   18b14:	cmp	r1, #0
   18b18:	bne	18b28 <__assert_fail@plt+0x75b4>
   18b1c:	bl	18980 <__assert_fail@plt+0x740c>
   18b20:	mov	r0, #0
   18b24:	pop	{r4, pc}
   18b28:	cmp	r1, #0
   18b2c:	blt	18b3c <__assert_fail@plt+0x75c8>
   18b30:	mov	r3, #0
   18b34:	cmp	r3, r3
   18b38:	beq	18b4c <__assert_fail@plt+0x75d8>
   18b3c:	bl	113f4 <__errno_location@plt>
   18b40:	mov	r3, #12
   18b44:	str	r3, [r0]
   18b48:	b	18b20 <__assert_fail@plt+0x75ac>
   18b4c:	pop	{r4, lr}
   18b50:	b	11298 <realloc@plt>
   18b54:	push	{r4, r5, r6, lr}
   18b58:	subs	r4, r2, #0
   18b5c:	mov	r6, r0
   18b60:	mov	r5, r1
   18b64:	beq	18b7c <__assert_fail@plt+0x7608>
   18b68:	mov	r1, r4
   18b6c:	mvn	r0, #0
   18b70:	bl	19020 <__assert_fail@plt+0x7aac>
   18b74:	cmp	r0, r5
   18b78:	bcc	18b8c <__assert_fail@plt+0x7618>
   18b7c:	mul	r1, r5, r4
   18b80:	mov	r0, r6
   18b84:	pop	{r4, r5, r6, lr}
   18b88:	b	18af8 <__assert_fail@plt+0x7584>
   18b8c:	bl	113f4 <__errno_location@plt>
   18b90:	mov	r3, #12
   18b94:	str	r3, [r0]
   18b98:	mov	r0, #0
   18b9c:	pop	{r4, r5, r6, pc}
   18ba0:	push	{r4, r5, r6, lr}
   18ba4:	mov	r4, r0
   18ba8:	bl	11310 <__fpending@plt>
   18bac:	mov	r5, r0
   18bb0:	mov	r0, r4
   18bb4:	bl	11214 <ferror@plt>
   18bb8:	mov	r6, r0
   18bbc:	mov	r0, r4
   18bc0:	bl	11454 <fclose@plt>
   18bc4:	cmp	r6, #0
   18bc8:	mov	r4, r0
   18bcc:	bne	18bf8 <__assert_fail@plt+0x7684>
   18bd0:	cmp	r0, #0
   18bd4:	beq	18bf0 <__assert_fail@plt+0x767c>
   18bd8:	cmp	r5, #0
   18bdc:	bne	18c08 <__assert_fail@plt+0x7694>
   18be0:	bl	113f4 <__errno_location@plt>
   18be4:	ldr	r4, [r0]
   18be8:	subs	r4, r4, #9
   18bec:	mvnne	r4, #0
   18bf0:	mov	r0, r4
   18bf4:	pop	{r4, r5, r6, pc}
   18bf8:	cmp	r0, #0
   18bfc:	bne	18c08 <__assert_fail@plt+0x7694>
   18c00:	bl	113f4 <__errno_location@plt>
   18c04:	str	r4, [r0]
   18c08:	mvn	r4, #0
   18c0c:	b	18bf0 <__assert_fail@plt+0x767c>
   18c10:	push	{lr}		; (str lr, [sp, #-4]!)
   18c14:	sub	sp, sp, #268	; 0x10c
   18c18:	ldr	r2, [pc, #64]	; 18c60 <__assert_fail@plt+0x76ec>
   18c1c:	add	r1, sp, #4
   18c20:	bl	18f90 <__assert_fail@plt+0x7a1c>
   18c24:	cmp	r0, #0
   18c28:	movne	r0, #0
   18c2c:	bne	18c58 <__assert_fail@plt+0x76e4>
   18c30:	ldr	r1, [pc, #44]	; 18c64 <__assert_fail@plt+0x76f0>
   18c34:	add	r0, sp, #4
   18c38:	bl	111c0 <strcmp@plt>
   18c3c:	cmp	r0, #0
   18c40:	beq	18c58 <__assert_fail@plt+0x76e4>
   18c44:	ldr	r1, [pc, #28]	; 18c68 <__assert_fail@plt+0x76f4>
   18c48:	add	r0, sp, #4
   18c4c:	bl	111c0 <strcmp@plt>
   18c50:	adds	r0, r0, #0
   18c54:	movne	r0, #1
   18c58:	add	sp, sp, #268	; 0x10c
   18c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   18c60:	andeq	r0, r0, r1, lsl #2
   18c64:	andeq	fp, r1, pc, lsl r7
   18c68:	andeq	fp, r1, r1, lsr #14
   18c6c:	push	{r4, lr}
   18c70:	mov	r0, #14
   18c74:	bl	114c0 <nl_langinfo@plt>
   18c78:	ldr	r3, [pc, #24]	; 18c98 <__assert_fail@plt+0x7724>
   18c7c:	cmp	r0, #0
   18c80:	moveq	r0, r3
   18c84:	ldr	r3, [pc, #16]	; 18c9c <__assert_fail@plt+0x7728>
   18c88:	ldrb	r2, [r0]
   18c8c:	cmp	r2, #0
   18c90:	moveq	r0, r3
   18c94:	pop	{r4, pc}
   18c98:	andeq	r9, r1, r3, lsr r8
   18c9c:	andeq	fp, r1, r7, lsr #14
   18ca0:	cmn	r0, #-2147483631	; 0x80000011
   18ca4:	bls	18cb8 <__assert_fail@plt+0x7744>
   18ca8:	mov	r0, #0
   18cac:	bx	lr
   18cb0:	mov	r0, #0
   18cb4:	pop	{r4, pc}
   18cb8:	push	{r4, lr}
   18cbc:	add	r0, r0, #16
   18cc0:	bl	11358 <malloc@plt>
   18cc4:	cmp	r0, #0
   18cc8:	beq	18cb0 <__assert_fail@plt+0x773c>
   18ccc:	cmn	r0, #9
   18cd0:	addls	r2, r0, #8
   18cd4:	movhi	r2, #0
   18cd8:	rsb	r3, r0, #8
   18cdc:	bic	r2, r2, #15
   18ce0:	add	r3, r3, r2
   18ce4:	add	r0, r0, r3
   18ce8:	strb	r3, [r0, #-1]
   18cec:	pop	{r4, pc}
   18cf0:	tst	r0, #7
   18cf4:	beq	18d00 <__assert_fail@plt+0x778c>
   18cf8:	push	{r4, lr}
   18cfc:	bl	11544 <abort@plt>
   18d00:	tst	r0, #8
   18d04:	bxeq	lr
   18d08:	ldrb	r3, [r0, #-1]
   18d0c:	sub	r0, r0, r3
   18d10:	b	18980 <__assert_fail@plt+0x740c>
   18d14:	push	{r4, lr}
   18d18:	mov	r4, r0
   18d1c:	bl	111fc <wcwidth@plt>
   18d20:	cmp	r0, #0
   18d24:	popge	{r4, pc}
   18d28:	mov	r0, r4
   18d2c:	bl	112b0 <iswcntrl@plt>
   18d30:	clz	r0, r0
   18d34:	lsr	r0, r0, #5
   18d38:	pop	{r4, pc}
   18d3c:	mov	r3, r1
   18d40:	push	{r4, r5, r6, lr}
   18d44:	mov	r5, r1
   18d48:	ldr	r1, [r3], #16
   18d4c:	mov	r4, r0
   18d50:	cmp	r1, r3
   18d54:	strne	r1, [r0]
   18d58:	bne	18d70 <__assert_fail@plt+0x77fc>
   18d5c:	add	r3, r0, #16
   18d60:	ldr	r2, [r5, #4]
   18d64:	mov	r0, r3
   18d68:	bl	1122c <memcpy@plt>
   18d6c:	str	r0, [r4]
   18d70:	ldr	r3, [r5, #4]
   18d74:	str	r3, [r4, #4]
   18d78:	ldrb	r3, [r5, #8]
   18d7c:	cmp	r3, #0
   18d80:	strb	r3, [r4, #8]
   18d84:	ldrne	r3, [r5, #12]
   18d88:	strne	r3, [r4, #12]
   18d8c:	pop	{r4, r5, r6, pc}
   18d90:	ldr	r3, [pc, #20]	; 18dac <__assert_fail@plt+0x7838>
   18d94:	lsr	r2, r0, #5
   18d98:	and	r0, r0, #31
   18d9c:	ldr	r3, [r3, r2, lsl #2]
   18da0:	lsr	r0, r3, r0
   18da4:	and	r0, r0, #1
   18da8:	bx	lr
   18dac:	andeq	fp, r1, r0, lsr r7
   18db0:	push	{r4, r5, r6, r7, r8, lr}
   18db4:	sub	sp, sp, #56	; 0x38
   18db8:	mov	r4, r0
   18dbc:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   18dc0:	cmp	r0, #1
   18dc4:	bls	18f48 <__assert_fail@plt+0x79d4>
   18dc8:	add	r3, sp, #56	; 0x38
   18dcc:	mov	r0, #0
   18dd0:	ldr	r8, [pc, #416]	; 18f78 <__assert_fail@plt+0x7a04>
   18dd4:	strb	r0, [r3, #-56]!	; 0xffffffc8
   18dd8:	str	r4, [sp, #16]
   18ddc:	add	r5, r3, #4
   18de0:	mov	r4, r0
   18de4:	add	r7, r3, #28
   18de8:	str	r0, [sp, #4]
   18dec:	str	r0, [r5, #4]
   18df0:	strb	r0, [sp, #12]
   18df4:	ldrb	r3, [sp]
   18df8:	ldr	r6, [sp, #16]
   18dfc:	cmp	r3, #0
   18e00:	bne	18e84 <__assert_fail@plt+0x7910>
   18e04:	ldrb	r3, [r6]
   18e08:	lsr	r2, r3, #5
   18e0c:	and	r3, r3, #31
   18e10:	ldr	r2, [r8, r2, lsl #2]
   18e14:	lsr	r3, r2, r3
   18e18:	tst	r3, #1
   18e1c:	beq	18e58 <__assert_fail@plt+0x78e4>
   18e20:	mov	r3, #1
   18e24:	str	r3, [sp, #20]
   18e28:	ldrb	r2, [r6]
   18e2c:	str	r2, [sp, #28]
   18e30:	strb	r3, [sp, #24]
   18e34:	ldrb	r3, [sp, #24]
   18e38:	cmp	r3, #0
   18e3c:	beq	18f58 <__assert_fail@plt+0x79e4>
   18e40:	ldr	r3, [sp, #28]
   18e44:	cmp	r3, #0
   18e48:	bne	18f58 <__assert_fail@plt+0x79e4>
   18e4c:	mov	r0, r4
   18e50:	add	sp, sp, #56	; 0x38
   18e54:	pop	{r4, r5, r6, r7, r8, pc}
   18e58:	mov	r0, r5
   18e5c:	bl	11244 <mbsinit@plt>
   18e60:	cmp	r0, #0
   18e64:	bne	18e7c <__assert_fail@plt+0x7908>
   18e68:	ldr	r3, [pc, #268]	; 18f7c <__assert_fail@plt+0x7a08>
   18e6c:	ldr	r1, [pc, #268]	; 18f80 <__assert_fail@plt+0x7a0c>
   18e70:	ldr	r0, [pc, #268]	; 18f84 <__assert_fail@plt+0x7a10>
   18e74:	mov	r2, #143	; 0x8f
   18e78:	bl	11574 <__assert_fail@plt>
   18e7c:	mov	r3, #1
   18e80:	strb	r3, [sp]
   18e84:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   18e88:	mov	r1, r0
   18e8c:	mov	r0, r6
   18e90:	bl	1791c <__assert_fail@plt+0x63a8>
   18e94:	mov	r3, r5
   18e98:	mov	r1, r6
   18e9c:	mov	r2, r0
   18ea0:	mov	r0, r7
   18ea4:	bl	18aa8 <__assert_fail@plt+0x7534>
   18ea8:	cmn	r0, #1
   18eac:	str	r0, [sp, #20]
   18eb0:	bne	18ec4 <__assert_fail@plt+0x7950>
   18eb4:	mov	r3, #1
   18eb8:	str	r3, [sp, #20]
   18ebc:	mov	r3, #0
   18ec0:	b	18e30 <__assert_fail@plt+0x78bc>
   18ec4:	cmn	r0, #2
   18ec8:	bne	18edc <__assert_fail@plt+0x7968>
   18ecc:	ldr	r0, [sp, #16]
   18ed0:	bl	113c4 <strlen@plt>
   18ed4:	str	r0, [sp, #20]
   18ed8:	b	18ebc <__assert_fail@plt+0x7948>
   18edc:	cmp	r0, #0
   18ee0:	bne	18f28 <__assert_fail@plt+0x79b4>
   18ee4:	mov	r3, #1
   18ee8:	str	r3, [sp, #20]
   18eec:	ldr	r3, [sp, #16]
   18ef0:	ldrb	r3, [r3]
   18ef4:	cmp	r3, #0
   18ef8:	ldrne	r3, [pc, #124]	; 18f7c <__assert_fail@plt+0x7a08>
   18efc:	movne	r2, #171	; 0xab
   18f00:	ldrne	r1, [pc, #120]	; 18f80 <__assert_fail@plt+0x7a0c>
   18f04:	ldrne	r0, [pc, #124]	; 18f88 <__assert_fail@plt+0x7a14>
   18f08:	bne	18e78 <__assert_fail@plt+0x7904>
   18f0c:	ldr	r3, [sp, #28]
   18f10:	cmp	r3, #0
   18f14:	ldrne	r3, [pc, #96]	; 18f7c <__assert_fail@plt+0x7a08>
   18f18:	movne	r2, #172	; 0xac
   18f1c:	ldrne	r1, [pc, #92]	; 18f80 <__assert_fail@plt+0x7a0c>
   18f20:	ldrne	r0, [pc, #100]	; 18f8c <__assert_fail@plt+0x7a18>
   18f24:	bne	18e78 <__assert_fail@plt+0x7904>
   18f28:	mov	r3, #1
   18f2c:	mov	r0, r5
   18f30:	strb	r3, [sp, #24]
   18f34:	bl	11244 <mbsinit@plt>
   18f38:	cmp	r0, #0
   18f3c:	movne	r3, #0
   18f40:	strbne	r3, [sp]
   18f44:	b	18e34 <__assert_fail@plt+0x78c0>
   18f48:	mov	r0, r4
   18f4c:	bl	113c4 <strlen@plt>
   18f50:	mov	r4, r0
   18f54:	b	18e4c <__assert_fail@plt+0x78d8>
   18f58:	ldr	r3, [sp, #16]
   18f5c:	ldr	r2, [sp, #20]
   18f60:	add	r4, r4, #1
   18f64:	add	r3, r3, r2
   18f68:	str	r3, [sp, #16]
   18f6c:	mov	r3, #0
   18f70:	strb	r3, [sp, #12]
   18f74:	b	18df4 <__assert_fail@plt+0x7880>
   18f78:	andeq	fp, r1, r0, lsr r7
   18f7c:	andeq	fp, r1, r0, asr r7
   18f80:	muleq	r1, r7, r2
   18f84:	andeq	fp, r1, r1, lsr #5
   18f88:			; <UNDEFINED> instruction: 0x0001b2b8
   18f8c:	andeq	fp, r1, pc, asr #5
   18f90:	push	{r4, r5, r6, lr}
   18f94:	mov	r5, r1
   18f98:	mov	r1, #0
   18f9c:	mov	r4, r2
   18fa0:	bl	11490 <setlocale@plt>
   18fa4:	subs	r6, r0, #0
   18fa8:	bne	18fbc <__assert_fail@plt+0x7a48>
   18fac:	cmp	r4, #0
   18fb0:	strbne	r6, [r5]
   18fb4:	mov	r0, #22
   18fb8:	pop	{r4, r5, r6, pc}
   18fbc:	bl	113c4 <strlen@plt>
   18fc0:	cmp	r4, r0
   18fc4:	bls	18fe0 <__assert_fail@plt+0x7a6c>
   18fc8:	add	r2, r0, #1
   18fcc:	mov	r1, r6
   18fd0:	mov	r0, r5
   18fd4:	bl	1122c <memcpy@plt>
   18fd8:	mov	r0, #0
   18fdc:	pop	{r4, r5, r6, pc}
   18fe0:	cmp	r4, #0
   18fe4:	beq	19004 <__assert_fail@plt+0x7a90>
   18fe8:	sub	r4, r4, #1
   18fec:	mov	r2, r4
   18ff0:	mov	r1, r6
   18ff4:	mov	r0, r5
   18ff8:	bl	1122c <memcpy@plt>
   18ffc:	mov	r3, #0
   19000:	strb	r3, [r5, r4]
   19004:	mov	r0, #34	; 0x22
   19008:	pop	{r4, r5, r6, pc}
   1900c:	mov	r1, #0
   19010:	b	11490 <setlocale@plt>
   19014:	mov	r2, #3
   19018:	mov	r1, #0
   1901c:	b	18730 <__assert_fail@plt+0x71bc>
   19020:	subs	r2, r1, #1
   19024:	bxeq	lr
   19028:	bcc	19200 <__assert_fail@plt+0x7c8c>
   1902c:	cmp	r0, r1
   19030:	bls	191e4 <__assert_fail@plt+0x7c70>
   19034:	tst	r1, r2
   19038:	beq	191f0 <__assert_fail@plt+0x7c7c>
   1903c:	clz	r3, r0
   19040:	clz	r2, r1
   19044:	sub	r3, r2, r3
   19048:	rsbs	r3, r3, #31
   1904c:	addne	r3, r3, r3, lsl #1
   19050:	mov	r2, #0
   19054:	addne	pc, pc, r3, lsl #2
   19058:	nop			; (mov r0, r0)
   1905c:	cmp	r0, r1, lsl #31
   19060:	adc	r2, r2, r2
   19064:	subcs	r0, r0, r1, lsl #31
   19068:	cmp	r0, r1, lsl #30
   1906c:	adc	r2, r2, r2
   19070:	subcs	r0, r0, r1, lsl #30
   19074:	cmp	r0, r1, lsl #29
   19078:	adc	r2, r2, r2
   1907c:	subcs	r0, r0, r1, lsl #29
   19080:	cmp	r0, r1, lsl #28
   19084:	adc	r2, r2, r2
   19088:	subcs	r0, r0, r1, lsl #28
   1908c:	cmp	r0, r1, lsl #27
   19090:	adc	r2, r2, r2
   19094:	subcs	r0, r0, r1, lsl #27
   19098:	cmp	r0, r1, lsl #26
   1909c:	adc	r2, r2, r2
   190a0:	subcs	r0, r0, r1, lsl #26
   190a4:	cmp	r0, r1, lsl #25
   190a8:	adc	r2, r2, r2
   190ac:	subcs	r0, r0, r1, lsl #25
   190b0:	cmp	r0, r1, lsl #24
   190b4:	adc	r2, r2, r2
   190b8:	subcs	r0, r0, r1, lsl #24
   190bc:	cmp	r0, r1, lsl #23
   190c0:	adc	r2, r2, r2
   190c4:	subcs	r0, r0, r1, lsl #23
   190c8:	cmp	r0, r1, lsl #22
   190cc:	adc	r2, r2, r2
   190d0:	subcs	r0, r0, r1, lsl #22
   190d4:	cmp	r0, r1, lsl #21
   190d8:	adc	r2, r2, r2
   190dc:	subcs	r0, r0, r1, lsl #21
   190e0:	cmp	r0, r1, lsl #20
   190e4:	adc	r2, r2, r2
   190e8:	subcs	r0, r0, r1, lsl #20
   190ec:	cmp	r0, r1, lsl #19
   190f0:	adc	r2, r2, r2
   190f4:	subcs	r0, r0, r1, lsl #19
   190f8:	cmp	r0, r1, lsl #18
   190fc:	adc	r2, r2, r2
   19100:	subcs	r0, r0, r1, lsl #18
   19104:	cmp	r0, r1, lsl #17
   19108:	adc	r2, r2, r2
   1910c:	subcs	r0, r0, r1, lsl #17
   19110:	cmp	r0, r1, lsl #16
   19114:	adc	r2, r2, r2
   19118:	subcs	r0, r0, r1, lsl #16
   1911c:	cmp	r0, r1, lsl #15
   19120:	adc	r2, r2, r2
   19124:	subcs	r0, r0, r1, lsl #15
   19128:	cmp	r0, r1, lsl #14
   1912c:	adc	r2, r2, r2
   19130:	subcs	r0, r0, r1, lsl #14
   19134:	cmp	r0, r1, lsl #13
   19138:	adc	r2, r2, r2
   1913c:	subcs	r0, r0, r1, lsl #13
   19140:	cmp	r0, r1, lsl #12
   19144:	adc	r2, r2, r2
   19148:	subcs	r0, r0, r1, lsl #12
   1914c:	cmp	r0, r1, lsl #11
   19150:	adc	r2, r2, r2
   19154:	subcs	r0, r0, r1, lsl #11
   19158:	cmp	r0, r1, lsl #10
   1915c:	adc	r2, r2, r2
   19160:	subcs	r0, r0, r1, lsl #10
   19164:	cmp	r0, r1, lsl #9
   19168:	adc	r2, r2, r2
   1916c:	subcs	r0, r0, r1, lsl #9
   19170:	cmp	r0, r1, lsl #8
   19174:	adc	r2, r2, r2
   19178:	subcs	r0, r0, r1, lsl #8
   1917c:	cmp	r0, r1, lsl #7
   19180:	adc	r2, r2, r2
   19184:	subcs	r0, r0, r1, lsl #7
   19188:	cmp	r0, r1, lsl #6
   1918c:	adc	r2, r2, r2
   19190:	subcs	r0, r0, r1, lsl #6
   19194:	cmp	r0, r1, lsl #5
   19198:	adc	r2, r2, r2
   1919c:	subcs	r0, r0, r1, lsl #5
   191a0:	cmp	r0, r1, lsl #4
   191a4:	adc	r2, r2, r2
   191a8:	subcs	r0, r0, r1, lsl #4
   191ac:	cmp	r0, r1, lsl #3
   191b0:	adc	r2, r2, r2
   191b4:	subcs	r0, r0, r1, lsl #3
   191b8:	cmp	r0, r1, lsl #2
   191bc:	adc	r2, r2, r2
   191c0:	subcs	r0, r0, r1, lsl #2
   191c4:	cmp	r0, r1, lsl #1
   191c8:	adc	r2, r2, r2
   191cc:	subcs	r0, r0, r1, lsl #1
   191d0:	cmp	r0, r1
   191d4:	adc	r2, r2, r2
   191d8:	subcs	r0, r0, r1
   191dc:	mov	r0, r2
   191e0:	bx	lr
   191e4:	moveq	r0, #1
   191e8:	movne	r0, #0
   191ec:	bx	lr
   191f0:	clz	r2, r1
   191f4:	rsb	r2, r2, #31
   191f8:	lsr	r0, r0, r2
   191fc:	bx	lr
   19200:	cmp	r0, #0
   19204:	mvnne	r0, #0
   19208:	b	1946c <__assert_fail@plt+0x7ef8>
   1920c:	cmp	r1, #0
   19210:	beq	19200 <__assert_fail@plt+0x7c8c>
   19214:	push	{r0, r1, lr}
   19218:	bl	19020 <__assert_fail@plt+0x7aac>
   1921c:	pop	{r1, r2, lr}
   19220:	mul	r3, r2, r0
   19224:	sub	r1, r1, r3
   19228:	bx	lr
   1922c:	cmp	r1, #0
   19230:	beq	1943c <__assert_fail@plt+0x7ec8>
   19234:	eor	ip, r0, r1
   19238:	rsbmi	r1, r1, #0
   1923c:	subs	r2, r1, #1
   19240:	beq	19408 <__assert_fail@plt+0x7e94>
   19244:	movs	r3, r0
   19248:	rsbmi	r3, r0, #0
   1924c:	cmp	r3, r1
   19250:	bls	19414 <__assert_fail@plt+0x7ea0>
   19254:	tst	r1, r2
   19258:	beq	19424 <__assert_fail@plt+0x7eb0>
   1925c:	clz	r2, r3
   19260:	clz	r0, r1
   19264:	sub	r2, r0, r2
   19268:	rsbs	r2, r2, #31
   1926c:	addne	r2, r2, r2, lsl #1
   19270:	mov	r0, #0
   19274:	addne	pc, pc, r2, lsl #2
   19278:	nop			; (mov r0, r0)
   1927c:	cmp	r3, r1, lsl #31
   19280:	adc	r0, r0, r0
   19284:	subcs	r3, r3, r1, lsl #31
   19288:	cmp	r3, r1, lsl #30
   1928c:	adc	r0, r0, r0
   19290:	subcs	r3, r3, r1, lsl #30
   19294:	cmp	r3, r1, lsl #29
   19298:	adc	r0, r0, r0
   1929c:	subcs	r3, r3, r1, lsl #29
   192a0:	cmp	r3, r1, lsl #28
   192a4:	adc	r0, r0, r0
   192a8:	subcs	r3, r3, r1, lsl #28
   192ac:	cmp	r3, r1, lsl #27
   192b0:	adc	r0, r0, r0
   192b4:	subcs	r3, r3, r1, lsl #27
   192b8:	cmp	r3, r1, lsl #26
   192bc:	adc	r0, r0, r0
   192c0:	subcs	r3, r3, r1, lsl #26
   192c4:	cmp	r3, r1, lsl #25
   192c8:	adc	r0, r0, r0
   192cc:	subcs	r3, r3, r1, lsl #25
   192d0:	cmp	r3, r1, lsl #24
   192d4:	adc	r0, r0, r0
   192d8:	subcs	r3, r3, r1, lsl #24
   192dc:	cmp	r3, r1, lsl #23
   192e0:	adc	r0, r0, r0
   192e4:	subcs	r3, r3, r1, lsl #23
   192e8:	cmp	r3, r1, lsl #22
   192ec:	adc	r0, r0, r0
   192f0:	subcs	r3, r3, r1, lsl #22
   192f4:	cmp	r3, r1, lsl #21
   192f8:	adc	r0, r0, r0
   192fc:	subcs	r3, r3, r1, lsl #21
   19300:	cmp	r3, r1, lsl #20
   19304:	adc	r0, r0, r0
   19308:	subcs	r3, r3, r1, lsl #20
   1930c:	cmp	r3, r1, lsl #19
   19310:	adc	r0, r0, r0
   19314:	subcs	r3, r3, r1, lsl #19
   19318:	cmp	r3, r1, lsl #18
   1931c:	adc	r0, r0, r0
   19320:	subcs	r3, r3, r1, lsl #18
   19324:	cmp	r3, r1, lsl #17
   19328:	adc	r0, r0, r0
   1932c:	subcs	r3, r3, r1, lsl #17
   19330:	cmp	r3, r1, lsl #16
   19334:	adc	r0, r0, r0
   19338:	subcs	r3, r3, r1, lsl #16
   1933c:	cmp	r3, r1, lsl #15
   19340:	adc	r0, r0, r0
   19344:	subcs	r3, r3, r1, lsl #15
   19348:	cmp	r3, r1, lsl #14
   1934c:	adc	r0, r0, r0
   19350:	subcs	r3, r3, r1, lsl #14
   19354:	cmp	r3, r1, lsl #13
   19358:	adc	r0, r0, r0
   1935c:	subcs	r3, r3, r1, lsl #13
   19360:	cmp	r3, r1, lsl #12
   19364:	adc	r0, r0, r0
   19368:	subcs	r3, r3, r1, lsl #12
   1936c:	cmp	r3, r1, lsl #11
   19370:	adc	r0, r0, r0
   19374:	subcs	r3, r3, r1, lsl #11
   19378:	cmp	r3, r1, lsl #10
   1937c:	adc	r0, r0, r0
   19380:	subcs	r3, r3, r1, lsl #10
   19384:	cmp	r3, r1, lsl #9
   19388:	adc	r0, r0, r0
   1938c:	subcs	r3, r3, r1, lsl #9
   19390:	cmp	r3, r1, lsl #8
   19394:	adc	r0, r0, r0
   19398:	subcs	r3, r3, r1, lsl #8
   1939c:	cmp	r3, r1, lsl #7
   193a0:	adc	r0, r0, r0
   193a4:	subcs	r3, r3, r1, lsl #7
   193a8:	cmp	r3, r1, lsl #6
   193ac:	adc	r0, r0, r0
   193b0:	subcs	r3, r3, r1, lsl #6
   193b4:	cmp	r3, r1, lsl #5
   193b8:	adc	r0, r0, r0
   193bc:	subcs	r3, r3, r1, lsl #5
   193c0:	cmp	r3, r1, lsl #4
   193c4:	adc	r0, r0, r0
   193c8:	subcs	r3, r3, r1, lsl #4
   193cc:	cmp	r3, r1, lsl #3
   193d0:	adc	r0, r0, r0
   193d4:	subcs	r3, r3, r1, lsl #3
   193d8:	cmp	r3, r1, lsl #2
   193dc:	adc	r0, r0, r0
   193e0:	subcs	r3, r3, r1, lsl #2
   193e4:	cmp	r3, r1, lsl #1
   193e8:	adc	r0, r0, r0
   193ec:	subcs	r3, r3, r1, lsl #1
   193f0:	cmp	r3, r1
   193f4:	adc	r0, r0, r0
   193f8:	subcs	r3, r3, r1
   193fc:	cmp	ip, #0
   19400:	rsbmi	r0, r0, #0
   19404:	bx	lr
   19408:	teq	ip, r0
   1940c:	rsbmi	r0, r0, #0
   19410:	bx	lr
   19414:	movcc	r0, #0
   19418:	asreq	r0, ip, #31
   1941c:	orreq	r0, r0, #1
   19420:	bx	lr
   19424:	clz	r2, r1
   19428:	rsb	r2, r2, #31
   1942c:	cmp	ip, #0
   19430:	lsr	r0, r3, r2
   19434:	rsbmi	r0, r0, #0
   19438:	bx	lr
   1943c:	cmp	r0, #0
   19440:	mvngt	r0, #-2147483648	; 0x80000000
   19444:	movlt	r0, #-2147483648	; 0x80000000
   19448:	b	1946c <__assert_fail@plt+0x7ef8>
   1944c:	cmp	r1, #0
   19450:	beq	1943c <__assert_fail@plt+0x7ec8>
   19454:	push	{r0, r1, lr}
   19458:	bl	19234 <__assert_fail@plt+0x7cc0>
   1945c:	pop	{r1, r2, lr}
   19460:	mul	r3, r2, r0
   19464:	sub	r1, r1, r3
   19468:	bx	lr
   1946c:	push	{r1, lr}
   19470:	mov	r0, #8
   19474:	bl	111b4 <raise@plt>
   19478:	pop	{r1, pc}
   1947c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19480:	mov	r7, r0
   19484:	ldr	r6, [pc, #72]	; 194d4 <__assert_fail@plt+0x7f60>
   19488:	ldr	r5, [pc, #72]	; 194d8 <__assert_fail@plt+0x7f64>
   1948c:	add	r6, pc, r6
   19490:	add	r5, pc, r5
   19494:	sub	r6, r6, r5
   19498:	mov	r8, r1
   1949c:	mov	r9, r2
   194a0:	bl	1117c <fdopen@plt-0x20>
   194a4:	asrs	r6, r6, #2
   194a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   194ac:	mov	r4, #0
   194b0:	add	r4, r4, #1
   194b4:	ldr	r3, [r5], #4
   194b8:	mov	r2, r9
   194bc:	mov	r1, r8
   194c0:	mov	r0, r7
   194c4:	blx	r3
   194c8:	cmp	r6, r4
   194cc:	bne	194b0 <__assert_fail@plt+0x7f3c>
   194d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   194d4:	andeq	r2, r1, ip, ror sl
   194d8:	andeq	r2, r1, r4, ror sl
   194dc:	bx	lr
   194e0:	ldr	r3, [pc, #12]	; 194f4 <__assert_fail@plt+0x7f80>
   194e4:	mov	r1, #0
   194e8:	add	r3, pc, r3
   194ec:	ldr	r2, [r3]
   194f0:	b	1140c <__cxa_atexit@plt>
   194f4:	andeq	r2, r1, r0, ror ip

Disassembly of section .fini:

000194f8 <.fini>:
   194f8:	push	{r3, lr}
   194fc:	pop	{r3, pc}
