
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

00010b20 <.init>:
   10b20:	push	{r3, lr}
   10b24:	bl	10d3c <__assert_fail@plt+0x4c>
   10b28:	pop	{r3, pc}

Disassembly of section .plt:

00010b2c <calloc@plt-0x14>:
   10b2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10b30:	ldr	lr, [pc, #4]	; 10b3c <calloc@plt-0x4>
   10b34:	add	lr, pc, lr
   10b38:	ldr	pc, [lr, #8]!
   10b3c:	andeq	r7, r1, r4, asr #9

00010b40 <calloc@plt>:
   10b40:	add	ip, pc, #0, 12
   10b44:	add	ip, ip, #94208	; 0x17000
   10b48:	ldr	pc, [ip, #1220]!	; 0x4c4

00010b4c <strcmp@plt>:
   10b4c:	add	ip, pc, #0, 12
   10b50:	add	ip, ip, #94208	; 0x17000
   10b54:	ldr	pc, [ip, #1212]!	; 0x4bc

00010b58 <fopen@plt>:
   10b58:	add	ip, pc, #0, 12
   10b5c:	add	ip, ip, #94208	; 0x17000
   10b60:	ldr	pc, [ip, #1204]!	; 0x4b4

00010b64 <free@plt>:
   10b64:	add	ip, pc, #0, 12
   10b68:	add	ip, ip, #94208	; 0x17000
   10b6c:	ldr	pc, [ip, #1196]!	; 0x4ac

00010b70 <utf8proc_get_property@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #94208	; 0x17000
   10b78:	ldr	pc, [ip, #1188]!	; 0x4a4

00010b7c <fgets@plt>:
   10b7c:	add	ip, pc, #0, 12
   10b80:	add	ip, ip, #94208	; 0x17000
   10b84:	ldr	pc, [ip, #1180]!	; 0x49c

00010b88 <utf8proc_encode_char@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #94208	; 0x17000
   10b90:	ldr	pc, [ip, #1172]!	; 0x494

00010b94 <strdup@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #94208	; 0x17000
   10b9c:	ldr	pc, [ip, #1164]!	; 0x48c

00010ba0 <rewind@plt>:
   10ba0:	add	ip, pc, #0, 12
   10ba4:	add	ip, ip, #94208	; 0x17000
   10ba8:	ldr	pc, [ip, #1156]!	; 0x484

00010bac <unlink@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #94208	; 0x17000
   10bb4:	ldr	pc, [ip, #1148]!	; 0x47c

00010bb8 <utf8proc_tolower@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #94208	; 0x17000
   10bc0:	ldr	pc, [ip, #1140]!	; 0x474

00010bc4 <__xstat@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #94208	; 0x17000
   10bcc:	ldr	pc, [ip, #1132]!	; 0x46c

00010bd0 <fwrite@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #94208	; 0x17000
   10bd8:	ldr	pc, [ip, #1124]!	; 0x464

00010bdc <fread@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #94208	; 0x17000
   10be4:	ldr	pc, [ip, #1116]!	; 0x45c

00010be8 <utf8proc_iterate@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #94208	; 0x17000
   10bf0:	ldr	pc, [ip, #1108]!	; 0x454

00010bf4 <malloc@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #94208	; 0x17000
   10bfc:	ldr	pc, [ip, #1100]!	; 0x44c

00010c00 <__libc_start_main@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #94208	; 0x17000
   10c08:	ldr	pc, [ip, #1092]!	; 0x444

00010c0c <__sysv_signal@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #94208	; 0x17000
   10c14:	ldr	pc, [ip, #1084]!	; 0x43c

00010c18 <__gmon_start__@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #94208	; 0x17000
   10c20:	ldr	pc, [ip, #1076]!	; 0x434

00010c24 <getpid@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #94208	; 0x17000
   10c2c:	ldr	pc, [ip, #1068]!	; 0x42c

00010c30 <exit@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #94208	; 0x17000
   10c38:	ldr	pc, [ip, #1060]!	; 0x424

00010c3c <bcmp@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #94208	; 0x17000
   10c44:	ldr	pc, [ip, #1052]!	; 0x41c

00010c48 <utf8proc_category@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #94208	; 0x17000
   10c50:	ldr	pc, [ip, #1044]!	; 0x414

00010c54 <strlen@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #94208	; 0x17000
   10c5c:	ldr	pc, [ip, #1036]!	; 0x40c

00010c60 <fprintf@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #94208	; 0x17000
   10c68:	ldr	pc, [ip, #1028]!	; 0x404

00010c6c <__isoc99_sscanf@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #94208	; 0x17000
   10c74:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c78 <fclose@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #94208	; 0x17000
   10c80:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c84 <utf8proc_NFC@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #94208	; 0x17000
   10c8c:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c90 <fputc@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #94208	; 0x17000
   10c98:	ldr	pc, [ip, #996]!	; 0x3e4

00010c9c <sprintf@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #94208	; 0x17000
   10ca4:	ldr	pc, [ip, #988]!	; 0x3dc

00010ca8 <atoi@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #94208	; 0x17000
   10cb0:	ldr	pc, [ip, #980]!	; 0x3d4

00010cb4 <utf8proc_errmsg@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #94208	; 0x17000
   10cbc:	ldr	pc, [ip, #972]!	; 0x3cc

00010cc0 <fputs@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #94208	; 0x17000
   10cc8:	ldr	pc, [ip, #964]!	; 0x3c4

00010ccc <strncmp@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #94208	; 0x17000
   10cd4:	ldr	pc, [ip, #956]!	; 0x3bc

00010cd8 <abort@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #94208	; 0x17000
   10ce0:	ldr	pc, [ip, #948]!	; 0x3b4

00010ce4 <getc@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #94208	; 0x17000
   10cec:	ldr	pc, [ip, #940]!	; 0x3ac

00010cf0 <__assert_fail@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #94208	; 0x17000
   10cf8:	ldr	pc, [ip, #932]!	; 0x3a4

Disassembly of section .text:

00010d00 <error@@Base-0x2068>:
   10d00:	mov	fp, #0
   10d04:	mov	lr, #0
   10d08:	pop	{r1}		; (ldr r1, [sp], #4)
   10d0c:	mov	r2, sp
   10d10:	push	{r2}		; (str r2, [sp, #-4]!)
   10d14:	push	{r0}		; (str r0, [sp, #-4]!)
   10d18:	ldr	ip, [pc, #16]	; 10d30 <__assert_fail@plt+0x40>
   10d1c:	push	{ip}		; (str ip, [sp, #-4]!)
   10d20:	ldr	r0, [pc, #12]	; 10d34 <__assert_fail@plt+0x44>
   10d24:	ldr	r3, [pc, #12]	; 10d38 <__assert_fail@plt+0x48>
   10d28:	bl	10c00 <__libc_start_main@plt>
   10d2c:	bl	10cd8 <abort@plt>
   10d30:	andeq	r3, r1, r8, asr #17
   10d34:	muleq	r1, ip, r5
   10d38:	andeq	r3, r1, r8, ror #16
   10d3c:	ldr	r3, [pc, #20]	; 10d58 <__assert_fail@plt+0x68>
   10d40:	ldr	r2, [pc, #20]	; 10d5c <__assert_fail@plt+0x6c>
   10d44:	add	r3, pc, r3
   10d48:	ldr	r2, [r3, r2]
   10d4c:	cmp	r2, #0
   10d50:	bxeq	lr
   10d54:	b	10c18 <__gmon_start__@plt>
   10d58:			; <UNDEFINED> instruction: 0x000172b4
   10d5c:	andeq	r0, r0, r0, lsr #1
   10d60:	ldr	r0, [pc, #24]	; 10d80 <__assert_fail@plt+0x90>
   10d64:	ldr	r3, [pc, #24]	; 10d84 <__assert_fail@plt+0x94>
   10d68:	cmp	r3, r0
   10d6c:	bxeq	lr
   10d70:	ldr	r3, [pc, #16]	; 10d88 <__assert_fail@plt+0x98>
   10d74:	cmp	r3, #0
   10d78:	bxeq	lr
   10d7c:	bx	r3
   10d80:	andeq	r8, r2, r4, ror #1
   10d84:	andeq	r8, r2, r4, ror #1
   10d88:	andeq	r0, r0, r0
   10d8c:	ldr	r0, [pc, #36]	; 10db8 <__assert_fail@plt+0xc8>
   10d90:	ldr	r1, [pc, #36]	; 10dbc <__assert_fail@plt+0xcc>
   10d94:	sub	r1, r1, r0
   10d98:	asr	r1, r1, #2
   10d9c:	add	r1, r1, r1, lsr #31
   10da0:	asrs	r1, r1, #1
   10da4:	bxeq	lr
   10da8:	ldr	r3, [pc, #16]	; 10dc0 <__assert_fail@plt+0xd0>
   10dac:	cmp	r3, #0
   10db0:	bxeq	lr
   10db4:	bx	r3
   10db8:	andeq	r8, r2, r4, ror #1
   10dbc:	andeq	r8, r2, r4, ror #1
   10dc0:	andeq	r0, r0, r0
   10dc4:	push	{r4, lr}
   10dc8:	ldr	r4, [pc, #24]	; 10de8 <__assert_fail@plt+0xf8>
   10dcc:	ldrb	r3, [r4]
   10dd0:	cmp	r3, #0
   10dd4:	popne	{r4, pc}
   10dd8:	bl	10d60 <__assert_fail@plt+0x70>
   10ddc:	mov	r3, #1
   10de0:	strb	r3, [r4]
   10de4:	pop	{r4, pc}
   10de8:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   10dec:	b	10d8c <__assert_fail@plt+0x9c>
   10df0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10df4:	add	fp, sp, #24
   10df8:	mov	r8, r1
   10dfc:	mov	r9, r0
   10e00:	movw	r0, #41268	; 0xa134
   10e04:	movt	r0, #2
   10e08:	add	r6, r0, r9, lsl #4
   10e0c:	ldr	r0, [r6, #12]!
   10e10:	add	r0, r0, #1
   10e14:	mov	r1, #4
   10e18:	bl	129b4 <__assert_fail@plt+0x1cc4>
   10e1c:	ldr	r1, [r6]
   10e20:	cmp	r1, #1
   10e24:	blt	10e78 <__assert_fail@plt+0x188>
   10e28:	rsb	r2, r9, #1
   10e2c:	mov	r3, #0
   10e30:	movw	ip, #956	; 0x3bc
   10e34:	movt	ip, #3
   10e38:	mov	r1, #0
   10e3c:	mov	r7, #0
   10e40:	ldr	r4, [ip, r9, lsl #2]
   10e44:	ldr	r5, [r4, r3]!
   10e48:	add	r5, r5, r2
   10e4c:	ldrb	r5, [r5, #12]
   10e50:	cmp	r5, #0
   10e54:	strne	r4, [r0, r1, lsl #2]
   10e58:	addne	r1, r1, #1
   10e5c:	add	r3, r3, #8
   10e60:	add	r7, r7, #1
   10e64:	ldr	r5, [r6]
   10e68:	cmp	r7, r5
   10e6c:	blt	10e40 <__assert_fail@plt+0x150>
   10e70:	str	r1, [r8]
   10e74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10e78:	mov	r1, #0
   10e7c:	str	r1, [r8]
   10e80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e88:	add	fp, sp, #28
   10e8c:	push	{r0}		; (str r0, [sp, #-4]!)
   10e90:	mov	r4, #0
   10e94:	movw	r8, #956	; 0x3bc
   10e98:	movt	r8, #3
   10e9c:	movw	r6, #41316	; 0xa164
   10ea0:	movt	r6, #2
   10ea4:	mov	r9, #1
   10ea8:	b	10eb8 <__assert_fail@plt+0x1c8>
   10eac:	add	r4, r4, #1
   10eb0:	cmp	r4, #2
   10eb4:	beq	10f9c <__assert_fail@plt+0x2ac>
   10eb8:	ldr	r0, [sp]
   10ebc:	ldr	r1, [r0, r4, lsl #2]
   10ec0:	movw	r0, #41224	; 0xa108
   10ec4:	movt	r0, #2
   10ec8:	add	r7, r0, r4, lsl #4
   10ecc:	mov	r0, r7
   10ed0:	movw	r2, #32964	; 0x80c4
   10ed4:	movt	r2, #2
   10ed8:	bl	13054 <error@@Base+0x2ec>
   10edc:	cmp	r4, #0
   10ee0:	bne	10ef8 <__assert_fail@plt+0x208>
   10ee4:	movw	r0, #32964	; 0x80c4
   10ee8:	movt	r0, #2
   10eec:	ldrb	r0, [r0, #11]
   10ef0:	cmp	r0, #0
   10ef4:	bne	10fec <__assert_fail@plt+0x2fc>
   10ef8:	movw	r0, #41268	; 0xa134
   10efc:	movt	r0, #2
   10f00:	mov	sl, r0
   10f04:	add	r5, r0, r4, lsl #4
   10f08:	mov	r0, r5
   10f0c:	mov	r1, r7
   10f10:	bl	123f8 <__assert_fail@plt+0x1708>
   10f14:	ldr	r0, [r5, #12]
   10f18:	add	r0, r0, #1
   10f1c:	mov	r1, #8
   10f20:	bl	129b4 <__assert_fail@plt+0x1cc4>
   10f24:	str	r0, [r8, r4, lsl #2]
   10f28:	ldr	r5, [sl, r4, lsl #4]
   10f2c:	cmp	r5, #0
   10f30:	beq	10eac <__assert_fail@plt+0x1bc>
   10f34:	mov	sl, #0
   10f38:	b	10f5c <__assert_fail@plt+0x26c>
   10f3c:	add	r0, r7, r4
   10f40:	strb	r9, [r0, #12]
   10f44:	ldr	r0, [r8, r4, lsl #2]
   10f48:	str	r7, [r0, sl]
   10f4c:	add	sl, sl, #8
   10f50:	ldr	r5, [r5, #4]
   10f54:	cmp	r5, #0
   10f58:	beq	10eac <__assert_fail@plt+0x1bc>
   10f5c:	ldr	r1, [r5, #8]
   10f60:	mov	r0, r6
   10f64:	bl	121dc <__assert_fail@plt+0x14ec>
   10f68:	mov	r7, r0
   10f6c:	cmp	r0, #0
   10f70:	bne	10f3c <__assert_fail@plt+0x24c>
   10f74:	mov	r0, #1
   10f78:	mov	r1, #16
   10f7c:	bl	129b4 <__assert_fail@plt+0x1cc4>
   10f80:	mov	r7, r0
   10f84:	ldr	r0, [r5, #8]
   10f88:	str	r0, [r7, #8]
   10f8c:	mov	r0, r6
   10f90:	mov	r1, r7
   10f94:	bl	12284 <__assert_fail@plt+0x1594>
   10f98:	b	10f3c <__assert_fail@plt+0x24c>
   10f9c:	movw	r4, #948	; 0x3b4
   10fa0:	movt	r4, #3
   10fa4:	mov	r0, #0
   10fa8:	mov	r1, r4
   10fac:	bl	10df0 <__assert_fail@plt+0x100>
   10fb0:	movw	r1, #944	; 0x3b0
   10fb4:	movt	r1, #3
   10fb8:	str	r0, [r1]
   10fbc:	ldr	r0, [r4]
   10fc0:	cmp	r0, #65536	; 0x10000
   10fc4:	bge	10ff8 <__assert_fail@plt+0x308>
   10fc8:	movw	r1, #41260	; 0xa12c
   10fcc:	movt	r1, #2
   10fd0:	mov	r0, #1
   10fd4:	bl	10df0 <__assert_fail@plt+0x100>
   10fd8:	movw	r1, #41256	; 0xa128
   10fdc:	movt	r1, #2
   10fe0:	str	r0, [r1]
   10fe4:	sub	sp, fp, #28
   10fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fec:	movw	r0, #14568	; 0x38e8
   10ff0:	movt	r0, #1
   10ff4:	bl	12d68 <error@@Base>
   10ff8:	movw	r0, #14594	; 0x3902
   10ffc:	movt	r0, #1
   11000:	bl	12d68 <error@@Base>
   11004:	push	{fp, lr}
   11008:	mov	fp, sp
   1100c:	cmp	r1, #0
   11010:	beq	11080 <__assert_fail@plt+0x390>
   11014:	mov	r3, r0
   11018:	ldr	ip, [r1, #8]
   1101c:	rsb	lr, ip, #0
   11020:	mov	r0, #0
   11024:	cmp	lr, r3
   11028:	bge	11048 <__assert_fail@plt+0x358>
   1102c:	sub	lr, r3, #1
   11030:	add	r0, ip, lr
   11034:	bic	ip, r0, #1
   11038:	ldr	r0, [r1, #12]
   1103c:	add	r0, r0, ip
   11040:	ldrh	r0, [r0]
   11044:	str	lr, [r2]
   11048:	ldr	ip, [r1, #8]
   1104c:	cmp	ip, r3
   11050:	pople	{fp, pc}
   11054:	add	lr, r3, #1
   11058:	add	r3, ip, lr
   1105c:	bic	r3, r3, #1
   11060:	ldr	r1, [r1, #12]
   11064:	add	r1, r1, r3
   11068:	ldrh	r1, [r1]
   1106c:	add	r1, r1, #1
   11070:	cmp	r1, r0
   11074:	strcs	lr, [r2]
   11078:	movcs	r0, r1
   1107c:	pop	{fp, pc}
   11080:	mov	r0, #0
   11084:	pop	{fp, pc}
   11088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1108c:	add	fp, sp, #28
   11090:	sub	sp, sp, #4
   11094:	mov	r8, r1
   11098:	mov	sl, r0
   1109c:	ldr	r1, [r1]
   110a0:	mov	r2, sp
   110a4:	bl	11004 <__assert_fail@plt+0x314>
   110a8:	add	r3, r0, sl
   110ac:	movw	r1, #41260	; 0xa12c
   110b0:	movt	r1, #2
   110b4:	ldr	ip, [r1]
   110b8:	movw	lr, #948	; 0x3b4
   110bc:	movt	lr, #3
   110c0:	ldr	r2, [lr]
   110c4:	cmp	r0, r2
   110c8:	cmplt	r3, ip
   110cc:	blt	11118 <__assert_fail@plt+0x428>
   110d0:	cmp	r0, r2
   110d4:	addeq	r1, sl, #1
   110d8:	movweq	r2, #952	; 0x3b8
   110dc:	movteq	r2, #3
   110e0:	streq	r1, [r2]
   110e4:	cmp	r3, ip
   110e8:	subeq	r1, sl, #1
   110ec:	movweq	r2, #940	; 0x3ac
   110f0:	movteq	r2, #3
   110f4:	streq	r1, [r2]
   110f8:	ldr	r1, [r8, #8]
   110fc:	ldr	r2, [r8, #12]
   11100:	add	r1, r1, sl
   11104:	bic	r1, r1, #1
   11108:	add	r1, r2, r1
   1110c:	strh	r0, [r1]
   11110:	sub	sp, fp, #28
   11114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11118:	movw	r7, #41256	; 0xa128
   1111c:	movt	r7, #2
   11120:	ldr	r9, [r7]
   11124:	ldr	r7, [r9, r3, lsl #2]
   11128:	ldr	r6, [r7]
   1112c:	movw	r7, #944	; 0x3b0
   11130:	movt	r7, #3
   11134:	ldr	r7, [r7]
   11138:	ldr	r5, [r7, r0, lsl #2]
   1113c:	ldr	r5, [r5]
   11140:	cmp	r5, r6
   11144:	bne	110d0 <__assert_fail@plt+0x3e0>
   11148:	ldr	ip, [r1]
   1114c:	ldr	r2, [lr]
   11150:	add	r3, sl, #1
   11154:	add	r5, r9, r3, lsl #2
   11158:	add	r6, r7, #4
   1115c:	mov	r7, r0
   11160:	add	r0, r0, #1
   11164:	cmp	r0, r2
   11168:	addlt	r1, r3, r7
   1116c:	cmplt	r1, ip
   11170:	bge	1118c <__assert_fail@plt+0x49c>
   11174:	ldr	r4, [r5, r7, lsl #2]
   11178:	ldr	r4, [r4]
   1117c:	ldr	r1, [r6, r7, lsl #2]
   11180:	ldr	r1, [r1]
   11184:	cmp	r1, r4
   11188:	beq	1115c <__assert_fail@plt+0x46c>
   1118c:	add	r0, sl, r7
   11190:	add	r3, r0, #1
   11194:	add	r0, r7, #1
   11198:	b	110d0 <__assert_fail@plt+0x3e0>
   1119c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111a0:	add	fp, sp, #28
   111a4:	sub	sp, sp, #4
   111a8:	movw	r0, #41260	; 0xa12c
   111ac:	movt	r0, #2
   111b0:	ldr	r0, [r0]
   111b4:	movw	r7, #940	; 0x3ac
   111b8:	movt	r7, #3
   111bc:	str	r0, [r7]
   111c0:	movw	r9, #948	; 0x3b4
   111c4:	movt	r9, #3
   111c8:	ldr	r1, [r9]
   111cc:	rsb	r2, r1, #0
   111d0:	movw	r4, #952	; 0x3b8
   111d4:	movt	r4, #3
   111d8:	str	r2, [r4]
   111dc:	sub	r0, r0, r1
   111e0:	cmp	r0, r2
   111e4:	blt	11290 <__assert_fail@plt+0x5a0>
   111e8:	mvn	r8, #0
   111ec:	movw	sl, #41300	; 0xa154
   111f0:	movt	sl, #2
   111f4:	b	11218 <__assert_fail@plt+0x528>
   111f8:	ldr	r0, [r9]
   111fc:	movw	r1, #41260	; 0xa12c
   11200:	movt	r1, #2
   11204:	ldr	r1, [r1]
   11208:	sub	r0, r1, r0
   1120c:	ldr	r1, [r4]
   11210:	cmp	r1, r0
   11214:	bgt	11290 <__assert_fail@plt+0x5a0>
   11218:	mov	r6, r8
   1121c:	mov	r0, #1
   11220:	mov	r1, #16
   11224:	bl	129b4 <__assert_fail@plt+0x1cc4>
   11228:	mov	r5, r0
   1122c:	add	r8, r8, #1
   11230:	str	r8, [r0, #8]
   11234:	add	r0, r6, #2
   11238:	mov	r1, #2
   1123c:	bl	129b4 <__assert_fail@plt+0x1cc4>
   11240:	str	r0, [r5, #12]
   11244:	mov	r0, sl
   11248:	mov	r1, r5
   1124c:	bl	11684 <__assert_fail@plt+0x994>
   11250:	mvn	r6, r6
   11254:	cmp	r8, r6
   11258:	bge	1126c <__assert_fail@plt+0x57c>
   1125c:	b	111f8 <__assert_fail@plt+0x508>
   11260:	add	r6, r6, #2
   11264:	cmp	r6, r8
   11268:	bgt	111f8 <__assert_fail@plt+0x508>
   1126c:	ldr	r0, [r4]
   11270:	cmp	r6, r0
   11274:	blt	11260 <__assert_fail@plt+0x570>
   11278:	ldr	r0, [r7]
   1127c:	cmp	r6, r0
   11280:	movle	r0, r6
   11284:	movle	r1, r5
   11288:	blle	11088 <__assert_fail@plt+0x398>
   1128c:	b	11260 <__assert_fail@plt+0x570>
   11290:	sub	sp, fp, #28
   11294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11298:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1129c:	add	fp, sp, #24
   112a0:	sub	sp, sp, #8
   112a4:	movw	r0, #41300	; 0xa154
   112a8:	movt	r0, #2
   112ac:	ldr	r5, [r0, #4]
   112b0:	cmp	r5, #0
   112b4:	beq	11344 <__assert_fail@plt+0x654>
   112b8:	movw	r0, #948	; 0x3b4
   112bc:	movt	r0, #3
   112c0:	ldr	r0, [r0]
   112c4:	movw	r1, #41260	; 0xa12c
   112c8:	movt	r1, #2
   112cc:	ldr	r1, [r1]
   112d0:	sub	r0, r1, r0
   112d4:	add	r4, sp, #4
   112d8:	movw	r8, #944	; 0x3b0
   112dc:	movt	r8, #3
   112e0:	mov	r7, #1
   112e4:	b	112f8 <__assert_fail@plt+0x608>
   112e8:	ldr	r5, [r5]
   112ec:	ldr	r0, [sp, #4]
   112f0:	cmp	r5, #0
   112f4:	beq	11344 <__assert_fail@plt+0x654>
   112f8:	ldr	r1, [r5]
   112fc:	ldr	r2, [r5, #8]
   11300:	ldr	r3, [r5, #12]
   11304:	add	r2, r2, r0
   11308:	bic	r2, r2, #1
   1130c:	add	r2, r3, r2
   11310:	ldrh	r6, [r2]
   11314:	mov	r2, r4
   11318:	bl	11004 <__assert_fail@plt+0x314>
   1131c:	cmp	r0, r6
   11320:	bge	112e8 <__assert_fail@plt+0x5f8>
   11324:	ldr	r1, [r8]
   11328:	sub	r1, r1, #4
   1132c:	ldr	r2, [r1, r6, lsl #2]
   11330:	strb	r7, [r2, #4]
   11334:	sub	r6, r6, #1
   11338:	cmp	r6, r0
   1133c:	bgt	1132c <__assert_fail@plt+0x63c>
   11340:	b	112e8 <__assert_fail@plt+0x5f8>
   11344:	sub	sp, fp, #24
   11348:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1134c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11350:	add	fp, sp, #28
   11354:	sub	sp, sp, #4
   11358:	mov	sl, r2
   1135c:	mov	r9, r1
   11360:	mov	r6, r0
   11364:	bl	12330 <__assert_fail@plt+0x1640>
   11368:	movw	r0, #8052	; 0x1f74
   1136c:	ldr	r0, [r6, r0]
   11370:	cmp	r0, #1
   11374:	blt	11430 <__assert_fail@plt+0x740>
   11378:	movw	r0, #8048	; 0x1f70
   1137c:	add	r5, r6, r0
   11380:	mov	r4, #0
   11384:	movw	r8, #49372	; 0xc0dc
   11388:	movt	r8, #2
   1138c:	b	113a0 <__assert_fail@plt+0x6b0>
   11390:	ldr	r0, [r5, #4]
   11394:	add	r4, r4, #1
   11398:	cmp	r4, r0
   1139c:	bge	11430 <__assert_fail@plt+0x740>
   113a0:	ldr	r0, [r5]
   113a4:	ldr	r0, [r0, r4, lsl #2]
   113a8:	ldr	r7, [r0, #12]
   113ac:	ldr	r6, [r0, #16]
   113b0:	mov	r0, r8
   113b4:	mov	r1, r7
   113b8:	mov	r2, r6
   113bc:	bl	11928 <__assert_fail@plt+0xc38>
   113c0:	mov	r0, r9
   113c4:	mov	r1, r7
   113c8:	mov	r2, r6
   113cc:	bl	11928 <__assert_fail@plt+0xc38>
   113d0:	ldr	r0, [r5]
   113d4:	ldr	r0, [r0, r4, lsl #2]
   113d8:	ldr	r0, [r0, #8]
   113dc:	bl	10c54 <strlen@plt>
   113e0:	add	r0, r9, r0, lsl #3
   113e4:	mov	r1, r7
   113e8:	mov	r2, r6
   113ec:	bl	11928 <__assert_fail@plt+0xc38>
   113f0:	cmp	sl, #0
   113f4:	beq	11390 <__assert_fail@plt+0x6a0>
   113f8:	sub	r0, r7, r6
   113fc:	clz	r0, r0
   11400:	lsr	r6, r0, #5
   11404:	mov	r0, sl
   11408:	mov	r1, #1
   1140c:	mov	r2, r6
   11410:	bl	11928 <__assert_fail@plt+0xc38>
   11414:	cmp	r7, #11
   11418:	movge	r7, #11
   1141c:	add	r0, sl, r7, lsl #3
   11420:	mov	r1, #1
   11424:	mov	r2, r6
   11428:	bl	11928 <__assert_fail@plt+0xc38>
   1142c:	b	11390 <__assert_fail@plt+0x6a0>
   11430:	sub	sp, fp, #28
   11434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11438:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1143c:	add	fp, sp, #28
   11440:	sub	sp, sp, #4
   11444:	movw	r9, #41268	; 0xa134
   11448:	movt	r9, #2
   1144c:	ldr	r0, [r9, #12]
   11450:	cmp	r0, #1
   11454:	blt	114e4 <__assert_fail@plt+0x7f4>
   11458:	mov	r6, #0
   1145c:	mov	r7, #4
   11460:	movw	r0, #49372	; 0xc0dc
   11464:	movt	r0, #2
   11468:	add	r0, r0, #928	; 0x3a0
   1146c:	str	r0, [sp]
   11470:	movw	sl, #956	; 0x3bc
   11474:	movt	sl, #3
   11478:	b	11490 <__assert_fail@plt+0x7a0>
   1147c:	add	r7, r7, #8
   11480:	add	r6, r6, #1
   11484:	ldr	r0, [r9, #12]
   11488:	cmp	r6, r0
   1148c:	bge	114e4 <__assert_fail@plt+0x7f4>
   11490:	ldr	r4, [sp]
   11494:	mov	r5, #1
   11498:	mov	r8, #0
   1149c:	add	r0, r6, r8
   114a0:	ldr	r1, [r9, #12]
   114a4:	cmp	r0, r1
   114a8:	bge	1147c <__assert_fail@plt+0x78c>
   114ac:	ldr	r0, [sl]
   114b0:	add	r0, r0, r7
   114b4:	ldrb	r0, [r0, r8, lsl #3]
   114b8:	and	r5, r5, r0
   114bc:	clz	r0, r5
   114c0:	lsr	r2, r0, #5
   114c4:	mov	r0, r4
   114c8:	mov	r1, #1
   114cc:	bl	11928 <__assert_fail@plt+0xc38>
   114d0:	add	r4, r4, #8
   114d4:	add	r8, r8, #1
   114d8:	cmp	r8, #8
   114dc:	bne	1149c <__assert_fail@plt+0x7ac>
   114e0:	b	1147c <__assert_fail@plt+0x78c>
   114e4:	sub	sp, fp, #28
   114e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   114f0:	add	fp, sp, #24
   114f4:	movw	r8, #41268	; 0xa134
   114f8:	movt	r8, #2
   114fc:	ldr	r0, [r8, #12]
   11500:	cmp	r0, #1
   11504:	movw	r9, #49372	; 0xc0dc
   11508:	movt	r9, #2
   1150c:	blt	11570 <__assert_fail@plt+0x880>
   11510:	mov	r6, #0
   11514:	movw	r7, #956	; 0x3bc
   11518:	movt	r7, #3
   1151c:	movw	r5, #9048	; 0x2358
   11520:	add	r4, r9, #992	; 0x3e0
   11524:	ldr	r0, [r7]
   11528:	ldr	r0, [r0, r6, lsl #3]
   1152c:	ldr	r0, [r0, #8]
   11530:	bl	118e0 <__assert_fail@plt+0xbf0>
   11534:	cmp	r0, #0
   11538:	mov	r0, r4
   1153c:	addeq	r0, r9, r5
   11540:	ldr	r2, [r7]
   11544:	ldr	r1, [r2, r6, lsl #3]!
   11548:	ldr	r1, [r1, #8]
   1154c:	ldrb	r2, [r2, #4]
   11550:	clz	r2, r2
   11554:	lsr	r3, r2, #5
   11558:	mov	r2, #1
   1155c:	bl	1193c <__assert_fail@plt+0xc4c>
   11560:	add	r6, r6, #1
   11564:	ldr	r0, [r8, #12]
   11568:	cmp	r6, r0
   1156c:	blt	11524 <__assert_fail@plt+0x834>
   11570:	add	r0, r9, #992	; 0x3e0
   11574:	add	r1, r9, #8
   11578:	mov	r2, #0
   1157c:	bl	1134c <__assert_fail@plt+0x65c>
   11580:	movw	r0, #9048	; 0x2358
   11584:	add	r0, r9, r0
   11588:	add	r1, r9, #416	; 0x1a0
   1158c:	add	r2, r9, #824	; 0x338
   11590:	bl	1134c <__assert_fail@plt+0x65c>
   11594:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   11598:	b	11438 <__assert_fail@plt+0x748>
   1159c:	push	{fp, lr}
   115a0:	mov	fp, sp
   115a4:	sub	sp, sp, #8
   115a8:	mov	r4, r1
   115ac:	str	r0, [sp, #4]
   115b0:	add	r0, sp, #4
   115b4:	movw	r2, #14618	; 0x391a
   115b8:	movt	r2, #1
   115bc:	movw	r3, #32940	; 0x80ac
   115c0:	movt	r3, #2
   115c4:	bl	12be4 <__assert_fail@plt+0x1ef4>
   115c8:	ldr	r0, [sp, #4]
   115cc:	bic	r0, r0, #1
   115d0:	cmp	r0, #2
   115d4:	bne	1161c <__assert_fail@plt+0x92c>
   115d8:	movw	r0, #41264	; 0xa130
   115dc:	movt	r0, #2
   115e0:	ldr	r0, [r0]
   115e4:	bl	117c4 <__assert_fail@plt+0xad4>
   115e8:	mov	r0, r4
   115ec:	bl	10e84 <__assert_fail@plt+0x194>
   115f0:	bl	1119c <__assert_fail@plt+0x4ac>
   115f4:	bl	11298 <__assert_fail@plt+0x5a8>
   115f8:	bl	114ec <__assert_fail@plt+0x7fc>
   115fc:	mov	r1, #0
   11600:	ldr	r0, [sp, #4]
   11604:	cmp	r0, #3
   11608:	ldreq	r1, [r4, #8]
   1160c:	movw	r0, #49372	; 0xc0dc
   11610:	movt	r0, #2
   11614:	bl	11cfc <__assert_fail@plt+0x100c>
   11618:	bl	12d28 <__assert_fail@plt+0x2038>
   1161c:	movw	r0, #14679	; 0x3957
   11620:	movt	r0, #1
   11624:	bl	12d68 <error@@Base>
   11628:	vmov.i32	q8, #0	; 0x00000000
   1162c:	vst1.32	{d16-d17}, [r0]
   11630:	bx	lr
   11634:	mov	r2, r1
   11638:	ldr	r3, [r0]
   1163c:	mov	r1, #0
   11640:	b	11644 <__assert_fail@plt+0x954>
   11644:	push	{r4, sl, fp, lr}
   11648:	add	fp, sp, #8
   1164c:	mov	r4, r0
   11650:	stm	r2, {r1, r3}
   11654:	cmp	r1, #0
   11658:	addne	r0, r1, #4
   1165c:	str	r2, [r0]
   11660:	cmp	r3, #0
   11664:	addeq	r3, r4, #4
   11668:	str	r2, [r3]
   1166c:	mov	r0, r4
   11670:	bl	11700 <__assert_fail@plt+0xa10>
   11674:	ldr	r0, [r4, #12]
   11678:	add	r0, r0, #1
   1167c:	str	r0, [r4, #12]
   11680:	pop	{r4, sl, fp, pc}
   11684:	mov	r2, r1
   11688:	ldr	r1, [r0, #4]
   1168c:	mov	r3, #0
   11690:	b	11644 <__assert_fail@plt+0x954>
   11694:	mov	r3, r2
   11698:	mov	r2, r1
   1169c:	ldr	r1, [r3]
   116a0:	b	11644 <__assert_fail@plt+0x954>
   116a4:	ldr	r3, [r1, #4]
   116a8:	b	11644 <__assert_fail@plt+0x954>
   116ac:	push	{r4, sl, fp, lr}
   116b0:	add	fp, sp, #8
   116b4:	mov	r4, r0
   116b8:	ldm	r1, {r0, r2}
   116bc:	cmp	r0, #0
   116c0:	mov	r3, r4
   116c4:	addne	r3, r0, #4
   116c8:	str	r2, [r3]
   116cc:	ldm	r1, {r0, r2}
   116d0:	cmp	r2, #0
   116d4:	addeq	r2, r4, #4
   116d8:	str	r0, [r2]
   116dc:	mov	r0, #0
   116e0:	str	r0, [r1]
   116e4:	str	r0, [r1, #4]
   116e8:	mov	r0, r4
   116ec:	bl	11700 <__assert_fail@plt+0xa10>
   116f0:	ldr	r0, [r4, #12]
   116f4:	sub	r0, r0, #1
   116f8:	str	r0, [r4, #12]
   116fc:	pop	{r4, sl, fp, pc}
   11700:	push	{r4, sl, fp, lr}
   11704:	add	fp, sp, #8
   11708:	mov	r4, r0
   1170c:	ldr	r0, [r0, #8]
   11710:	cmp	r0, #0
   11714:	popeq	{r4, sl, fp, pc}
   11718:	bl	10b64 <free@plt>
   1171c:	mov	r0, #0
   11720:	str	r0, [r4, #8]
   11724:	pop	{r4, sl, fp, pc}
   11728:	push	{r4, sl, fp, lr}
   1172c:	add	fp, sp, #8
   11730:	mov	r4, r0
   11734:	ldr	r0, [r0, #8]
   11738:	cmp	r0, #0
   1173c:	bne	11780 <__assert_fail@plt+0xa90>
   11740:	ldr	r0, [r4, #12]
   11744:	cmp	r0, #0
   11748:	beq	11780 <__assert_fail@plt+0xa90>
   1174c:	mov	r1, #4
   11750:	bl	129b4 <__assert_fail@plt+0x1cc4>
   11754:	str	r0, [r4, #8]
   11758:	ldr	r0, [r4]
   1175c:	cmp	r0, #0
   11760:	popeq	{r4, sl, fp, pc}
   11764:	mov	r1, #0
   11768:	ldr	r2, [r4, #8]
   1176c:	str	r0, [r2, r1]
   11770:	add	r1, r1, #4
   11774:	ldr	r0, [r0, #4]
   11778:	cmp	r0, #0
   1177c:	bne	11768 <__assert_fail@plt+0xa78>
   11780:	pop	{r4, sl, fp, pc}
   11784:	push	{r4, r5, r6, sl, fp, lr}
   11788:	add	fp, sp, #16
   1178c:	ldr	r6, [r0]
   11790:	cmp	r6, #0
   11794:	beq	117c0 <__assert_fail@plt+0xad0>
   11798:	mov	r4, r1
   1179c:	mov	r5, r0
   117a0:	mov	r0, r5
   117a4:	mov	r1, r6
   117a8:	bl	116ac <__assert_fail@plt+0x9bc>
   117ac:	mov	r0, r6
   117b0:	blx	r4
   117b4:	ldr	r6, [r5]
   117b8:	cmp	r6, #0
   117bc:	bne	117a0 <__assert_fail@plt+0xab0>
   117c0:	pop	{r4, r5, r6, sl, fp, pc}
   117c4:	push	{r4, r5, r6, sl, fp, lr}
   117c8:	add	fp, sp, #16
   117cc:	mov	r1, r0
   117d0:	movw	r6, #33020	; 0x80fc
   117d4:	movt	r6, #2
   117d8:	ldrb	r0, [r6]
   117dc:	cmp	r0, #1
   117e0:	beq	11878 <__assert_fail@plt+0xb88>
   117e4:	cmp	r1, #0
   117e8:	beq	1184c <__assert_fail@plt+0xb5c>
   117ec:	movw	r4, #33024	; 0x8100
   117f0:	movt	r4, #2
   117f4:	movw	r2, #32976	; 0x80d0
   117f8:	movt	r2, #2
   117fc:	mov	r0, r4
   11800:	bl	13054 <error@@Base+0x2ec>
   11804:	movw	r5, #33040	; 0x8110
   11808:	movt	r5, #2
   1180c:	mov	r0, r5
   11810:	mov	r1, r4
   11814:	bl	123f8 <__assert_fail@plt+0x1708>
   11818:	movw	r1, #2916	; 0xb64
   1181c:	movt	r1, #1
   11820:	mov	r0, r4
   11824:	bl	11784 <__assert_fail@plt+0xa94>
   11828:	ldr	r4, [r5]
   1182c:	cmp	r4, #0
   11830:	beq	1186c <__assert_fail@plt+0xb7c>
   11834:	ldr	r0, [r4, #8]
   11838:	bl	11884 <__assert_fail@plt+0xb94>
   1183c:	ldr	r4, [r4, #4]
   11840:	cmp	r4, #0
   11844:	bne	11834 <__assert_fail@plt+0xb44>
   11848:	b	1186c <__assert_fail@plt+0xb7c>
   1184c:	mov	r4, #0
   11850:	movw	r5, #15196	; 0x3b5c
   11854:	movt	r5, #1
   11858:	ldr	r0, [r5, r4, lsl #2]
   1185c:	bl	11884 <__assert_fail@plt+0xb94>
   11860:	add	r4, r4, #1
   11864:	cmp	r4, #110	; 0x6e
   11868:	bne	11858 <__assert_fail@plt+0xb68>
   1186c:	mov	r0, #1
   11870:	strb	r0, [r6]
   11874:	pop	{r4, r5, r6, sl, fp, pc}
   11878:	movw	r0, #14703	; 0x396f
   1187c:	movt	r0, #1
   11880:	bl	12d68 <error@@Base>
   11884:	push	{r4, sl, fp, lr}
   11888:	add	fp, sp, #8
   1188c:	mov	r4, r0
   11890:	movw	r0, #33056	; 0x8120
   11894:	movt	r0, #2
   11898:	mov	r1, r4
   1189c:	bl	121dc <__assert_fail@plt+0x14ec>
   118a0:	cmp	r0, #0
   118a4:	beq	118bc <__assert_fail@plt+0xbcc>
   118a8:	movw	r0, #14759	; 0x39a7
   118ac:	movt	r0, #1
   118b0:	mov	r1, r4
   118b4:	pop	{r4, sl, fp, lr}
   118b8:	b	12df0 <error@@Base+0x88>
   118bc:	mov	r0, #1
   118c0:	mov	r1, #12
   118c4:	bl	129b4 <__assert_fail@plt+0x1cc4>
   118c8:	mov	r1, r0
   118cc:	str	r4, [r0, #8]
   118d0:	movw	r0, #33056	; 0x8120
   118d4:	movt	r0, #2
   118d8:	pop	{r4, sl, fp, lr}
   118dc:	b	12284 <__assert_fail@plt+0x1594>
   118e0:	push	{fp, lr}
   118e4:	mov	fp, sp
   118e8:	mov	r1, r0
   118ec:	movw	r0, #33020	; 0x80fc
   118f0:	movt	r0, #2
   118f4:	ldrb	r0, [r0]
   118f8:	cmp	r0, #0
   118fc:	beq	11918 <__assert_fail@plt+0xc28>
   11900:	movw	r0, #33056	; 0x8120
   11904:	movt	r0, #2
   11908:	bl	121dc <__assert_fail@plt+0x14ec>
   1190c:	cmp	r0, #0
   11910:	movwne	r0, #1
   11914:	pop	{fp, pc}
   11918:	movw	r0, #14733	; 0x398d
   1191c:	movt	r0, #1
   11920:	bl	12d68 <error@@Base>
   11924:	andeq	r0, r0, r0
   11928:	ldm	r0, {r3, ip}
   1192c:	add	r1, r3, r1
   11930:	add	r2, ip, r2
   11934:	stm	r0, {r1, r2}
   11938:	bx	lr
   1193c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11940:	add	fp, sp, #24
   11944:	mov	r8, r3
   11948:	mov	r5, r2
   1194c:	mov	r7, r1
   11950:	mov	r6, r0
   11954:	bl	121dc <__assert_fail@plt+0x14ec>
   11958:	mov	r4, r0
   1195c:	cmp	r0, #0
   11960:	bne	1198c <__assert_fail@plt+0xc9c>
   11964:	mov	r0, #1
   11968:	mov	r1, #20
   1196c:	bl	129b4 <__assert_fail@plt+0x1cc4>
   11970:	mov	r4, r0
   11974:	mov	r0, r7
   11978:	bl	10b94 <strdup@plt>
   1197c:	str	r0, [r4, #8]
   11980:	mov	r0, r6
   11984:	mov	r1, r4
   11988:	bl	12284 <__assert_fail@plt+0x1594>
   1198c:	add	r0, r4, #12
   11990:	mov	r1, r5
   11994:	mov	r2, r8
   11998:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1199c:	b	11928 <__assert_fail@plt+0xc38>
   119a0:	push	{r4, r5, r6, r7, fp, lr}
   119a4:	add	fp, sp, #16
   119a8:	sub	sp, sp, #8
   119ac:	mov	r6, r1
   119b0:	mov	r5, r0
   119b4:	movw	r1, #15012	; 0x3aa4
   119b8:	movt	r1, #1
   119bc:	mov	r0, r6
   119c0:	bl	12a58 <__assert_fail@plt+0x1d68>
   119c4:	mov	r4, r0
   119c8:	bl	11b10 <__assert_fail@plt+0xe20>
   119cc:	cmp	r0, #0
   119d0:	beq	11af4 <__assert_fail@plt+0xe04>
   119d4:	movw	r0, #41112	; 0xa098
   119d8:	movt	r0, #2
   119dc:	movw	r1, #15636	; 0x3d14
   119e0:	movt	r1, #1
   119e4:	mov	r2, #45	; 0x2d
   119e8:	bl	10c3c <bcmp@plt>
   119ec:	cmp	r0, #0
   119f0:	bne	11af4 <__assert_fail@plt+0xe04>
   119f4:	mov	r0, r4
   119f8:	bl	11b10 <__assert_fail@plt+0xe20>
   119fc:	cmp	r0, #0
   11a00:	beq	11af4 <__assert_fail@plt+0xe04>
   11a04:	movw	r0, #41112	; 0xa098
   11a08:	movt	r0, #2
   11a0c:	movw	r1, #29427	; 0x72f3
   11a10:	movt	r1, #1
   11a14:	mov	r2, #48	; 0x30
   11a18:	bl	10c3c <bcmp@plt>
   11a1c:	cmp	r0, #0
   11a20:	bne	11af4 <__assert_fail@plt+0xe04>
   11a24:	add	r1, sp, #4
   11a28:	mov	r0, r4
   11a2c:	bl	11b38 <__assert_fail@plt+0xe48>
   11a30:	cmp	r0, #0
   11a34:	beq	11af4 <__assert_fail@plt+0xe04>
   11a38:	mov	r1, sp
   11a3c:	mov	r0, r4
   11a40:	bl	11b38 <__assert_fail@plt+0xe48>
   11a44:	cmp	r0, #0
   11a48:	beq	11af4 <__assert_fail@plt+0xe04>
   11a4c:	mov	r0, r4
   11a50:	bl	11b10 <__assert_fail@plt+0xe20>
   11a54:	cmp	r0, #0
   11a58:	beq	11af4 <__assert_fail@plt+0xe04>
   11a5c:	mov	r0, r4
   11a60:	bl	11b10 <__assert_fail@plt+0xe20>
   11a64:	cmp	r0, #0
   11a68:	beq	11af4 <__assert_fail@plt+0xe04>
   11a6c:	ldr	r2, [sp]
   11a70:	ldr	r1, [sp, #4]
   11a74:	mov	r0, r5
   11a78:	bl	11928 <__assert_fail@plt+0xc38>
   11a7c:	add	r1, r5, #8
   11a80:	mov	r0, r4
   11a84:	bl	11b80 <__assert_fail@plt+0xe90>
   11a88:	mov	r7, r0
   11a8c:	add	r1, r5, #416	; 0x1a0
   11a90:	mov	r0, r4
   11a94:	bl	11b80 <__assert_fail@plt+0xe90>
   11a98:	mov	r6, r0
   11a9c:	add	r1, r5, #824	; 0x338
   11aa0:	mov	r0, r4
   11aa4:	bl	11b80 <__assert_fail@plt+0xe90>
   11aa8:	ldr	r0, [sp, #4]
   11aac:	cmp	r0, #1
   11ab0:	blt	11ae4 <__assert_fail@plt+0xdf4>
   11ab4:	add	r1, r5, #920	; 0x398
   11ab8:	mov	r0, r4
   11abc:	bl	11b80 <__assert_fail@plt+0xe90>
   11ac0:	cmp	r7, #1
   11ac4:	addge	r1, r5, #992	; 0x3e0
   11ac8:	movge	r0, r4
   11acc:	blge	11c58 <__assert_fail@plt+0xf68>
   11ad0:	cmp	r6, #1
   11ad4:	movwge	r0, #9048	; 0x2358
   11ad8:	addge	r1, r5, r0
   11adc:	movge	r0, r4
   11ae0:	blge	11c58 <__assert_fail@plt+0xf68>
   11ae4:	mov	r0, r4
   11ae8:	bl	12ad0 <__assert_fail@plt+0x1de0>
   11aec:	sub	sp, fp, #16
   11af0:	pop	{r4, r5, r6, r7, fp, pc}
   11af4:	movw	r1, #15702	; 0x3d56
   11af8:	movt	r1, #1
   11afc:	cmp	r6, #0
   11b00:	movne	r1, r6
   11b04:	movw	r0, #15684	; 0x3d44
   11b08:	movt	r0, #1
   11b0c:	bl	12da8 <error@@Base+0x40>
   11b10:	push	{fp, lr}
   11b14:	mov	fp, sp
   11b18:	mov	r2, r0
   11b1c:	movw	r0, #41112	; 0xa098
   11b20:	movt	r0, #2
   11b24:	mov	r1, #99	; 0x63
   11b28:	bl	10b7c <fgets@plt>
   11b2c:	cmp	r0, #0
   11b30:	movwne	r0, #1
   11b34:	pop	{fp, pc}
   11b38:	push	{r4, sl, fp, lr}
   11b3c:	add	fp, sp, #8
   11b40:	mov	r4, r1
   11b44:	bl	11b10 <__assert_fail@plt+0xe20>
   11b48:	cmp	r0, #0
   11b4c:	beq	11b78 <__assert_fail@plt+0xe88>
   11b50:	movw	r0, #41112	; 0xa098
   11b54:	movt	r0, #2
   11b58:	movw	r1, #15815	; 0x3dc7
   11b5c:	movt	r1, #1
   11b60:	mov	r2, r4
   11b64:	bl	10c6c <__isoc99_sscanf@plt>
   11b68:	sub	r0, r0, #1
   11b6c:	clz	r0, r0
   11b70:	lsr	r0, r0, #5
   11b74:	pop	{r4, sl, fp, pc}
   11b78:	mov	r0, #0
   11b7c:	pop	{r4, sl, fp, pc}
   11b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b84:	add	fp, sp, #28
   11b88:	sub	sp, sp, #12
   11b8c:	mov	r4, r1
   11b90:	mov	r6, r0
   11b94:	bl	11b10 <__assert_fail@plt+0xe20>
   11b98:	mov	r5, #0
   11b9c:	cmp	r0, #0
   11ba0:	beq	11c4c <__assert_fail@plt+0xf5c>
   11ba4:	mov	r0, r6
   11ba8:	bl	11b10 <__assert_fail@plt+0xe20>
   11bac:	cmp	r0, #0
   11bb0:	beq	11c4c <__assert_fail@plt+0xf5c>
   11bb4:	add	r1, sp, #8
   11bb8:	add	r2, sp, #4
   11bbc:	mov	r0, r6
   11bc0:	bl	120d4 <__assert_fail@plt+0x13e4>
   11bc4:	cmp	r0, #0
   11bc8:	beq	11c4c <__assert_fail@plt+0xf5c>
   11bcc:	mov	r5, #0
   11bd0:	movw	r0, #41112	; 0xa098
   11bd4:	movt	r0, #2
   11bd8:	add	r7, r0, #29
   11bdc:	movw	r8, #15803	; 0x3dbb
   11be0:	movt	r8, #1
   11be4:	add	r9, sp, #8
   11be8:	add	sl, sp, #4
   11bec:	b	11c18 <__assert_fail@plt+0xf28>
   11bf0:	add	r0, r4, r0, lsl #3
   11bf4:	ldr	r2, [sp, #4]
   11bf8:	ldr	r1, [sp, #8]
   11bfc:	bl	11928 <__assert_fail@plt+0xc38>
   11c00:	mov	r0, r6
   11c04:	mov	r1, r9
   11c08:	mov	r2, sl
   11c0c:	bl	120d4 <__assert_fail@plt+0x13e4>
   11c10:	cmp	r0, #0
   11c14:	beq	11c4c <__assert_fail@plt+0xf5c>
   11c18:	mov	r0, r7
   11c1c:	bl	10ca8 <atoi@plt>
   11c20:	cmp	r0, #0
   11c24:	bne	11bf0 <__assert_fail@plt+0xf00>
   11c28:	mov	r0, r7
   11c2c:	mov	r1, r8
   11c30:	mov	r2, #8
   11c34:	bl	10c3c <bcmp@plt>
   11c38:	ldr	r1, [sp, #8]
   11c3c:	cmp	r0, #0
   11c40:	moveq	r5, r1
   11c44:	movwne	r0, #11
   11c48:	b	11bf0 <__assert_fail@plt+0xf00>
   11c4c:	mov	r0, r5
   11c50:	sub	sp, fp, #28
   11c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c5c:	add	fp, sp, #28
   11c60:	sub	sp, sp, #12
   11c64:	mov	r4, r1
   11c68:	mov	r5, r0
   11c6c:	bl	11b10 <__assert_fail@plt+0xe20>
   11c70:	cmp	r0, #0
   11c74:	beq	11cf4 <__assert_fail@plt+0x1004>
   11c78:	mov	r0, r5
   11c7c:	bl	11b10 <__assert_fail@plt+0xe20>
   11c80:	cmp	r0, #0
   11c84:	beq	11cf4 <__assert_fail@plt+0x1004>
   11c88:	add	r1, sp, #8
   11c8c:	add	r2, sp, #4
   11c90:	mov	r0, r5
   11c94:	bl	120d4 <__assert_fail@plt+0x13e4>
   11c98:	cmp	r0, #0
   11c9c:	beq	11cf4 <__assert_fail@plt+0x1004>
   11ca0:	movw	r6, #41112	; 0xa098
   11ca4:	movt	r6, #2
   11ca8:	mov	sl, #0
   11cac:	add	r7, r6, #29
   11cb0:	add	r8, sp, #8
   11cb4:	add	r9, sp, #4
   11cb8:	mov	r0, r6
   11cbc:	bl	10c54 <strlen@plt>
   11cc0:	add	r0, r0, r6
   11cc4:	strb	sl, [r0, #-1]
   11cc8:	ldr	r2, [sp, #8]
   11ccc:	ldr	r3, [sp, #4]
   11cd0:	mov	r0, r4
   11cd4:	mov	r1, r7
   11cd8:	bl	1193c <__assert_fail@plt+0xc4c>
   11cdc:	mov	r0, r5
   11ce0:	mov	r1, r8
   11ce4:	mov	r2, r9
   11ce8:	bl	120d4 <__assert_fail@plt+0x13e4>
   11cec:	cmp	r0, #0
   11cf0:	bne	11cb8 <__assert_fail@plt+0xfc8>
   11cf4:	sub	sp, fp, #28
   11cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cfc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11d00:	add	fp, sp, #24
   11d04:	sub	sp, sp, #8
   11d08:	mov	r2, r1
   11d0c:	mov	r5, r0
   11d10:	movw	r1, #14987	; 0x3a8b
   11d14:	movt	r1, #1
   11d18:	mov	r0, r2
   11d1c:	bl	12a58 <__assert_fail@plt+0x1d68>
   11d20:	mov	r4, r0
   11d24:	movw	r1, #15708	; 0x3d5c
   11d28:	movt	r1, #1
   11d2c:	movw	r2, #15636	; 0x3d14
   11d30:	movt	r2, #1
   11d34:	movw	r3, #29427	; 0x72f3
   11d38:	movt	r3, #1
   11d3c:	bl	10c60 <fprintf@plt>
   11d40:	ldr	r2, [r5]
   11d44:	movw	r1, #15713	; 0x3d61
   11d48:	movt	r1, #1
   11d4c:	mov	r0, r4
   11d50:	bl	10c60 <fprintf@plt>
   11d54:	ldr	r2, [r5, #4]
   11d58:	movw	r1, #15727	; 0x3d6f
   11d5c:	movt	r1, #1
   11d60:	mov	r0, r4
   11d64:	bl	10c60 <fprintf@plt>
   11d68:	mov	r0, r4
   11d6c:	mov	r1, r5
   11d70:	bl	11e78 <__assert_fail@plt+0x1188>
   11d74:	movw	r0, #15749	; 0x3d85
   11d78:	movt	r0, #1
   11d7c:	mov	r7, #1
   11d80:	mov	r1, #12
   11d84:	mov	r2, #1
   11d88:	mov	r3, r4
   11d8c:	bl	10bd0 <fwrite@plt>
   11d90:	mov	r8, #0
   11d94:	str	r8, [sp]
   11d98:	str	r7, [sp, #4]
   11d9c:	add	r1, r5, #8
   11da0:	movw	r3, #15762	; 0x3d92
   11da4:	movt	r3, #1
   11da8:	mov	r0, r4
   11dac:	mov	r2, #50	; 0x32
   11db0:	bl	11ee0 <__assert_fail@plt+0x11f0>
   11db4:	str	r8, [sp]
   11db8:	str	r7, [sp, #4]
   11dbc:	add	r6, r5, #416	; 0x1a0
   11dc0:	movw	r3, #15781	; 0x3da5
   11dc4:	movt	r3, #1
   11dc8:	mov	r0, r4
   11dcc:	mov	r1, r6
   11dd0:	mov	r2, #50	; 0x32
   11dd4:	bl	11ee0 <__assert_fail@plt+0x11f0>
   11dd8:	str	r7, [sp]
   11ddc:	str	r7, [sp, #4]
   11de0:	add	r1, r5, #824	; 0x338
   11de4:	movw	r3, #15772	; 0x3d9c
   11de8:	movt	r3, #1
   11dec:	mov	r0, r4
   11df0:	mov	r2, #10
   11df4:	bl	11ee0 <__assert_fail@plt+0x11f0>
   11df8:	ldr	r0, [r5]
   11dfc:	cmp	r0, #1
   11e00:	blt	11e68 <__assert_fail@plt+0x1178>
   11e04:	str	r8, [sp]
   11e08:	str	r8, [sp, #4]
   11e0c:	add	r1, r5, #920	; 0x398
   11e10:	movw	r3, #15795	; 0x3db3
   11e14:	movt	r3, #1
   11e18:	mov	r0, r4
   11e1c:	mov	r2, #8
   11e20:	bl	11ee0 <__assert_fail@plt+0x11f0>
   11e24:	ldr	r0, [r5, #8]
   11e28:	cmp	r0, #1
   11e2c:	blt	11e44 <__assert_fail@plt+0x1154>
   11e30:	add	r1, r5, #992	; 0x3e0
   11e34:	movw	r2, #15762	; 0x3d92
   11e38:	movt	r2, #1
   11e3c:	mov	r0, r4
   11e40:	bl	1201c <__assert_fail@plt+0x132c>
   11e44:	ldr	r0, [r6]
   11e48:	cmp	r0, #1
   11e4c:	blt	11e68 <__assert_fail@plt+0x1178>
   11e50:	movw	r0, #9048	; 0x2358
   11e54:	add	r1, r5, r0
   11e58:	movw	r2, #15781	; 0x3da5
   11e5c:	movt	r2, #1
   11e60:	mov	r0, r4
   11e64:	bl	1201c <__assert_fail@plt+0x132c>
   11e68:	mov	r0, r4
   11e6c:	sub	sp, fp, #24
   11e70:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11e74:	b	12ad0 <__assert_fail@plt+0x1de0>
   11e78:	mov	ip, r0
   11e7c:	ldr	r0, [r1]
   11e80:	cmp	r0, #0
   11e84:	beq	11ec0 <__assert_fail@plt+0x11d0>
   11e88:	ldr	r1, [r1, #4]
   11e8c:	sub	r1, r0, r1
   11e90:	vldr	d16, [pc, #64]	; 11ed8 <__assert_fail@plt+0x11e8>
   11e94:	vmov	s0, r1
   11e98:	vmov	s2, r0
   11e9c:	vcvt.f64.s32	d17, s0
   11ea0:	vcvt.f64.s32	d18, s2
   11ea4:	vmul.f64	d16, d17, d16
   11ea8:	vdiv.f64	d16, d16, d18
   11eac:	vmov	r2, r3, d16
   11eb0:	movw	r1, #15828	; 0x3dd4
   11eb4:	movt	r1, #1
   11eb8:	mov	r0, ip
   11ebc:	b	10c60 <fprintf@plt>
   11ec0:	movw	r0, #15819	; 0x3dcb
   11ec4:	movt	r0, #1
   11ec8:	mov	r1, #8
   11ecc:	mov	r2, #1
   11ed0:	mov	r3, ip
   11ed4:	b	10bd0 <fwrite@plt>
   11ed8:	andeq	r0, r0, r0
   11edc:	subsmi	r0, r9, r0
   11ee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ee4:	add	fp, sp, #28
   11ee8:	sub	sp, sp, #4
   11eec:	mov	r7, r2
   11ef0:	mov	r5, r1
   11ef4:	mov	r4, r0
   11ef8:	movw	r1, #15834	; 0x3dda
   11efc:	movt	r1, #1
   11f00:	mov	r2, r3
   11f04:	bl	10c60 <fprintf@plt>
   11f08:	mov	r0, r4
   11f0c:	mov	r1, #0
   11f10:	bl	12124 <__assert_fail@plt+0x1434>
   11f14:	ldrb	sl, [fp, #8]
   11f18:	movw	r0, #15839	; 0x3ddf
   11f1c:	movt	r0, #1
   11f20:	movw	r2, #15846	; 0x3de6
   11f24:	movt	r2, #1
   11f28:	cmp	sl, #0
   11f2c:	movne	r2, r0
   11f30:	movw	r1, #15835	; 0x3ddb
   11f34:	movt	r1, #1
   11f38:	mov	r0, r4
   11f3c:	bl	10c60 <fprintf@plt>
   11f40:	sxth	r6, r7
   11f44:	lsl	r0, r7, #16
   11f48:	ldr	r1, [fp, #12]
   11f4c:	str	r1, [sp]
   11f50:	cmp	r0, #65536	; 0x10000
   11f54:	blt	11fa8 <__assert_fail@plt+0x12b8>
   11f58:	mov	r7, #1
   11f5c:	movw	r8, #15853	; 0x3ded
   11f60:	movt	r8, #1
   11f64:	mov	r9, #1
   11f68:	b	11f7c <__assert_fail@plt+0x128c>
   11f6c:	add	r9, r9, #1
   11f70:	sxth	r7, r9
   11f74:	cmp	r6, r7
   11f78:	blt	11fa8 <__assert_fail@plt+0x12b8>
   11f7c:	mov	r1, r5
   11f80:	ldr	r0, [r1, r7, lsl #3]!
   11f84:	cmp	r0, #1
   11f88:	blt	11f6c <__assert_fail@plt+0x127c>
   11f8c:	mov	r0, r4
   11f90:	bl	12124 <__assert_fail@plt+0x1434>
   11f94:	mov	r0, r4
   11f98:	mov	r1, r8
   11f9c:	mov	r2, r7
   11fa0:	bl	10c60 <fprintf@plt>
   11fa4:	b	11f6c <__assert_fail@plt+0x127c>
   11fa8:	cmp	sl, #0
   11fac:	beq	11fdc <__assert_fail@plt+0x12ec>
   11fb0:	add	r1, r5, r6, lsl #3
   11fb4:	ldr	r0, [r1, #8]!
   11fb8:	cmp	r0, #1
   11fbc:	blt	11fdc <__assert_fail@plt+0x12ec>
   11fc0:	mov	r0, r4
   11fc4:	bl	12124 <__assert_fail@plt+0x1434>
   11fc8:	movw	r1, #15862	; 0x3df6
   11fcc:	movt	r1, #1
   11fd0:	mov	r0, r4
   11fd4:	mov	r2, r6
   11fd8:	bl	10c60 <fprintf@plt>
   11fdc:	ldr	r0, [sp]
   11fe0:	tst	r0, #255	; 0xff
   11fe4:	beq	12014 <__assert_fail@plt+0x1324>
   11fe8:	mov	r0, r4
   11fec:	mov	r1, r5
   11ff0:	bl	12124 <__assert_fail@plt+0x1434>
   11ff4:	movw	r0, #15803	; 0x3dbb
   11ff8:	movt	r0, #1
   11ffc:	mov	r1, #7
   12000:	mov	r2, #1
   12004:	mov	r3, r4
   12008:	sub	sp, fp, #28
   1200c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12010:	b	10bd0 <fwrite@plt>
   12014:	sub	sp, fp, #28
   12018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1201c:	push	{r4, r5, r6, r7, fp, lr}
   12020:	add	fp, sp, #16
   12024:	mov	r6, r2
   12028:	mov	r4, r1
   1202c:	mov	r5, r0
   12030:	mov	r0, r1
   12034:	bl	12330 <__assert_fail@plt+0x1640>
   12038:	movw	r0, #8048	; 0x1f70
   1203c:	ldr	r1, [r4, r0]!
   12040:	ldr	r0, [r4, #4]
   12044:	movw	r2, #8596	; 0x2194
   12048:	movt	r2, #1
   1204c:	bl	13720 <error@@Base+0x9b8>
   12050:	movw	r1, #15834	; 0x3dda
   12054:	movt	r1, #1
   12058:	mov	r0, r5
   1205c:	mov	r2, r6
   12060:	bl	10c60 <fprintf@plt>
   12064:	mov	r7, #0
   12068:	mov	r0, r5
   1206c:	mov	r1, #0
   12070:	bl	12124 <__assert_fail@plt+0x1434>
   12074:	mov	r0, #10
   12078:	mov	r1, r5
   1207c:	bl	10c90 <fputc@plt>
   12080:	ldr	r0, [r4, #4]
   12084:	cmp	r0, #1
   12088:	blt	120d0 <__assert_fail@plt+0x13e0>
   1208c:	movw	r6, #15835	; 0x3ddb
   12090:	movt	r6, #1
   12094:	ldr	r0, [r4]
   12098:	ldr	r0, [r0, r7, lsl #2]
   1209c:	add	r1, r0, #12
   120a0:	mov	r0, r5
   120a4:	bl	12124 <__assert_fail@plt+0x1434>
   120a8:	ldr	r0, [r4]
   120ac:	ldr	r0, [r0, r7, lsl #2]
   120b0:	ldr	r2, [r0, #8]
   120b4:	mov	r0, r5
   120b8:	mov	r1, r6
   120bc:	bl	10c60 <fprintf@plt>
   120c0:	add	r7, r7, #1
   120c4:	ldr	r0, [r4, #4]
   120c8:	cmp	r7, r0
   120cc:	blt	12094 <__assert_fail@plt+0x13a4>
   120d0:	pop	{r4, r5, r6, r7, fp, pc}
   120d4:	push	{r4, r5, fp, lr}
   120d8:	add	fp, sp, #8
   120dc:	mov	r4, r2
   120e0:	mov	r5, r1
   120e4:	bl	11b10 <__assert_fail@plt+0xe20>
   120e8:	cmp	r0, #0
   120ec:	beq	1211c <__assert_fail@plt+0x142c>
   120f0:	movw	r0, #41112	; 0xa098
   120f4:	movt	r0, #2
   120f8:	movw	r1, #15811	; 0x3dc3
   120fc:	movt	r1, #1
   12100:	mov	r2, r5
   12104:	mov	r3, r4
   12108:	bl	10c6c <__isoc99_sscanf@plt>
   1210c:	sub	r0, r0, #2
   12110:	clz	r0, r0
   12114:	lsr	r0, r0, #5
   12118:	pop	{r4, r5, fp, pc}
   1211c:	mov	r0, #0
   12120:	pop	{r4, r5, fp, pc}
   12124:	push	{r4, r5, fp, lr}
   12128:	add	fp, sp, #8
   1212c:	mov	r4, r0
   12130:	cmp	r1, #0
   12134:	beq	12160 <__assert_fail@plt+0x1470>
   12138:	mov	r5, r1
   1213c:	ldm	r1, {r2, r3}
   12140:	movw	r1, #15871	; 0x3dff
   12144:	movt	r1, #1
   12148:	mov	r0, r4
   1214c:	bl	10c60 <fprintf@plt>
   12150:	mov	r0, r4
   12154:	mov	r1, r5
   12158:	bl	11e78 <__assert_fail@plt+0x1188>
   1215c:	b	12178 <__assert_fail@plt+0x1488>
   12160:	movw	r0, #15882	; 0x3e0a
   12164:	movt	r0, #1
   12168:	mov	r1, #26
   1216c:	mov	r2, #1
   12170:	mov	r3, r4
   12174:	bl	10bd0 <fwrite@plt>
   12178:	movw	r0, #15909	; 0x3e25
   1217c:	movt	r0, #1
   12180:	mov	r1, #3
   12184:	mov	r2, #1
   12188:	mov	r3, r4
   1218c:	pop	{r4, r5, fp, lr}
   12190:	b	10bd0 <fwrite@plt>
   12194:	ldr	r1, [r1, #8]
   12198:	ldr	r0, [r0, #8]
   1219c:	b	129d4 <__assert_fail@plt+0x1ce4>
   121a0:	push	{r4, r5, r6, sl, fp, lr}
   121a4:	add	fp, sp, #16
   121a8:	mov	r4, r0
   121ac:	movw	r0, #8048	; 0x1f70
   121b0:	add	r5, r4, r0
   121b4:	movw	r6, #503	; 0x1f7
   121b8:	mov	r0, r4
   121bc:	bl	11628 <__assert_fail@plt+0x938>
   121c0:	subs	r6, r6, #1
   121c4:	add	r4, r4, #16
   121c8:	bne	121b8 <__assert_fail@plt+0x14c8>
   121cc:	mov	r0, #0
   121d0:	str	r0, [r5]
   121d4:	str	r0, [r5, #4]
   121d8:	pop	{r4, r5, r6, sl, fp, pc}
   121dc:	push	{r4, r5, r6, sl, fp, lr}
   121e0:	add	fp, sp, #16
   121e4:	mov	r5, r1
   121e8:	mov	r4, r0
   121ec:	mov	r0, r1
   121f0:	bl	12238 <__assert_fail@plt+0x1548>
   121f4:	ldr	r6, [r4, r0, lsl #4]
   121f8:	mov	r4, #0
   121fc:	cmp	r6, #0
   12200:	beq	12224 <__assert_fail@plt+0x1534>
   12204:	ldr	r1, [r6, #8]
   12208:	mov	r0, r5
   1220c:	bl	10b4c <strcmp@plt>
   12210:	cmp	r0, #0
   12214:	beq	1222c <__assert_fail@plt+0x153c>
   12218:	ldr	r6, [r6, #4]
   1221c:	cmp	r6, #0
   12220:	bne	12204 <__assert_fail@plt+0x1514>
   12224:	mov	r0, r4
   12228:	pop	{r4, r5, r6, sl, fp, pc}
   1222c:	mov	r4, r6
   12230:	mov	r0, r4
   12234:	pop	{r4, r5, r6, sl, fp, pc}
   12238:	ldrb	r1, [r0]
   1223c:	cmp	r1, #0
   12240:	moveq	r0, #0
   12244:	sxtheq	r0, r0
   12248:	bxeq	lr
   1224c:	add	r2, r0, #1
   12250:	mov	r0, #0
   12254:	uxtab	r0, r0, r1
   12258:	ldrb	r1, [r2], #1
   1225c:	cmp	r1, #0
   12260:	bne	12254 <__assert_fail@plt+0x1564>
   12264:	movw	r1, #20065	; 0x4e61
   12268:	movt	r1, #33354	; 0x824a
   1226c:	umull	r1, r2, r0, r1
   12270:	lsr	r1, r2, #8
   12274:	movw	r2, #503	; 0x1f7
   12278:	mls	r0, r1, r2, r0
   1227c:	sxth	r0, r0
   12280:	bx	lr
   12284:	push	{r4, r5, fp, lr}
   12288:	add	fp, sp, #8
   1228c:	mov	r4, r1
   12290:	mov	r5, r0
   12294:	ldr	r0, [r1, #8]
   12298:	bl	12238 <__assert_fail@plt+0x1548>
   1229c:	add	r0, r5, r0, lsl #4
   122a0:	mov	r1, r4
   122a4:	bl	11634 <__assert_fail@plt+0x944>
   122a8:	mov	r0, r5
   122ac:	bl	122c4 <__assert_fail@plt+0x15d4>
   122b0:	movw	r0, #8052	; 0x1f74
   122b4:	ldr	r0, [r5, r0]!
   122b8:	add	r0, r0, #1
   122bc:	str	r0, [r5]
   122c0:	pop	{r4, r5, fp, pc}
   122c4:	push	{r4, sl, fp, lr}
   122c8:	add	fp, sp, #8
   122cc:	mov	r4, r0
   122d0:	movw	r0, #8048	; 0x1f70
   122d4:	ldr	r0, [r4, r0]!
   122d8:	cmp	r0, #0
   122dc:	popeq	{r4, sl, fp, pc}
   122e0:	bl	10b64 <free@plt>
   122e4:	mov	r0, #0
   122e8:	str	r0, [r4]
   122ec:	pop	{r4, sl, fp, pc}
   122f0:	push	{r4, r5, fp, lr}
   122f4:	add	fp, sp, #8
   122f8:	mov	r4, r1
   122fc:	mov	r5, r0
   12300:	ldr	r0, [r1, #8]
   12304:	bl	12238 <__assert_fail@plt+0x1548>
   12308:	add	r0, r5, r0, lsl #4
   1230c:	mov	r1, r4
   12310:	bl	116ac <__assert_fail@plt+0x9bc>
   12314:	mov	r0, r5
   12318:	bl	122c4 <__assert_fail@plt+0x15d4>
   1231c:	movw	r0, #8052	; 0x1f74
   12320:	ldr	r0, [r5, r0]!
   12324:	sub	r0, r0, #1
   12328:	str	r0, [r5]
   1232c:	pop	{r4, r5, fp, pc}
   12330:	push	{r4, r5, fp, lr}
   12334:	add	fp, sp, #8
   12338:	mov	r4, r0
   1233c:	movw	r0, #8048	; 0x1f70
   12340:	mov	r5, r4
   12344:	ldr	r0, [r5, r0]!
   12348:	cmp	r0, #0
   1234c:	bne	123ac <__assert_fail@plt+0x16bc>
   12350:	ldr	r0, [r5, #4]
   12354:	cmp	r0, #0
   12358:	popeq	{r4, r5, fp, pc}
   1235c:	mov	r1, #4
   12360:	bl	129b4 <__assert_fail@plt+0x1cc4>
   12364:	str	r0, [r5]
   12368:	mov	r0, #0
   1236c:	movw	ip, #503	; 0x1f7
   12370:	mov	r2, #0
   12374:	b	12384 <__assert_fail@plt+0x1694>
   12378:	add	r2, r2, #1
   1237c:	cmp	r2, ip
   12380:	beq	123ac <__assert_fail@plt+0x16bc>
   12384:	ldr	r3, [r4, r2, lsl #4]
   12388:	cmp	r3, #0
   1238c:	beq	12378 <__assert_fail@plt+0x1688>
   12390:	ldr	r1, [r5]
   12394:	str	r3, [r1, r0, lsl #2]
   12398:	add	r0, r0, #1
   1239c:	ldr	r3, [r3, #4]
   123a0:	cmp	r3, #0
   123a4:	bne	12390 <__assert_fail@plt+0x16a0>
   123a8:	b	12378 <__assert_fail@plt+0x1688>
   123ac:	pop	{r4, r5, fp, pc}
   123b0:	push	{r4, r5, r6, r7, fp, lr}
   123b4:	add	fp, sp, #16
   123b8:	mov	r5, r1
   123bc:	mov	r4, r0
   123c0:	mov	r6, #0
   123c4:	movw	r7, #8048	; 0x1f70
   123c8:	add	r0, r4, r6
   123cc:	mov	r1, r5
   123d0:	bl	11784 <__assert_fail@plt+0xa94>
   123d4:	add	r6, r6, #16
   123d8:	cmp	r6, r7
   123dc:	bne	123c8 <__assert_fail@plt+0x16d8>
   123e0:	mov	r0, r4
   123e4:	bl	122c4 <__assert_fail@plt+0x15d4>
   123e8:	movw	r0, #8052	; 0x1f74
   123ec:	mov	r1, #0
   123f0:	str	r1, [r4, r0]
   123f4:	pop	{r4, r5, r6, r7, fp, pc}
   123f8:	push	{r4, r5, r6, sl, fp, lr}
   123fc:	add	fp, sp, #16
   12400:	mov	r4, r0
   12404:	ldr	r5, [r1]
   12408:	mov	r0, r5
   1240c:	bl	12454 <__assert_fail@plt+0x1764>
   12410:	cmp	r0, #0
   12414:	beq	12450 <__assert_fail@plt+0x1760>
   12418:	mov	r6, r0
   1241c:	ldr	r0, [r5, #12]
   12420:	bl	126a8 <__assert_fail@plt+0x19b8>
   12424:	cmp	r0, #0
   12428:	movne	r0, r4
   1242c:	movne	r1, r5
   12430:	movne	r2, r6
   12434:	blne	126d4 <__assert_fail@plt+0x19e4>
   12438:	ldr	r5, [r6, #4]
   1243c:	mov	r0, r5
   12440:	bl	12454 <__assert_fail@plt+0x1764>
   12444:	mov	r6, r0
   12448:	cmp	r0, #0
   1244c:	bne	1241c <__assert_fail@plt+0x172c>
   12450:	pop	{r4, r5, r6, sl, fp, pc}
   12454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12458:	add	fp, sp, #28
   1245c:	sub	sp, sp, #20
   12460:	str	r0, [sp, #8]
   12464:	cmp	r0, #0
   12468:	beq	12494 <__assert_fail@plt+0x17a4>
   1246c:	ldr	r0, [sp, #8]
   12470:	cmp	r0, #0
   12474:	beq	124a0 <__assert_fail@plt+0x17b0>
   12478:	mov	r5, #17
   1247c:	add	r4, sp, #4
   12480:	mov	sl, #1
   12484:	mov	r8, #13312	; 0x3400
   12488:	movw	r9, #33664	; 0x8380
   1248c:	movt	r9, #1
   12490:	b	124bc <__assert_fail@plt+0x17cc>
   12494:	mov	r0, #0
   12498:	sub	sp, fp, #28
   1249c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124a0:	add	r4, sp, #4
   124a4:	b	12698 <__assert_fail@plt+0x19a8>
   124a8:	cmp	r0, #8
   124ac:	bne	12584 <__assert_fail@plt+0x1894>
   124b0:	ldr	r0, [r4, #4]
   124b4:	cmp	r0, #0
   124b8:	beq	12698 <__assert_fail@plt+0x19a8>
   124bc:	mov	r7, r5
   124c0:	mov	r0, r4
   124c4:	bl	12760 <__assert_fail@plt+0x1a70>
   124c8:	mov	r4, r0
   124cc:	bl	127b4 <__assert_fail@plt+0x1ac4>
   124d0:	mov	r5, r0
   124d4:	mov	r0, r4
   124d8:	bl	12760 <__assert_fail@plt+0x1a70>
   124dc:	bl	127b4 <__assert_fail@plt+0x1ac4>
   124e0:	mov	r6, r0
   124e4:	mov	r0, r4
   124e8:	bl	127c8 <__assert_fail@plt+0x1ad8>
   124ec:	bl	127b4 <__assert_fail@plt+0x1ac4>
   124f0:	cmp	r5, #1
   124f4:	cmpeq	r6, #2
   124f8:	beq	124b0 <__assert_fail@plt+0x17c0>
   124fc:	sub	r1, r5, #1
   12500:	cmp	r1, #3
   12504:	subcs	r1, r6, #1
   12508:	cmpcs	r1, #3
   1250c:	bcc	12698 <__assert_fail@plt+0x19a8>
   12510:	orr	r1, r6, #1
   12514:	orr	r2, r5, #1
   12518:	cmp	r2, #9
   1251c:	cmpeq	r1, #9
   12520:	beq	124b0 <__assert_fail@plt+0x17c0>
   12524:	cmp	r2, #9
   12528:	bne	12548 <__assert_fail@plt+0x1858>
   1252c:	cmp	r6, #13
   12530:	bhi	12548 <__assert_fail@plt+0x1858>
   12534:	tst	r8, sl, lsl r6
   12538:	beq	12548 <__assert_fail@plt+0x1858>
   1253c:	orr	r3, r0, #1
   12540:	cmp	r3, #9
   12544:	beq	124b0 <__assert_fail@plt+0x17c0>
   12548:	orr	r3, r7, #1
   1254c:	cmp	r3, #9
   12550:	bne	1256c <__assert_fail@plt+0x187c>
   12554:	cmp	r5, #13
   12558:	bhi	1256c <__assert_fail@plt+0x187c>
   1255c:	tst	r8, sl, lsl r5
   12560:	beq	1256c <__assert_fail@plt+0x187c>
   12564:	cmp	r1, #9
   12568:	beq	124b0 <__assert_fail@plt+0x17c0>
   1256c:	cmp	r5, #8
   12570:	cmpeq	r6, #10
   12574:	beq	124b0 <__assert_fail@plt+0x17c0>
   12578:	cmp	r5, #8
   1257c:	cmpeq	r6, #11
   12580:	beq	124a8 <__assert_fail@plt+0x17b8>
   12584:	cmp	r7, #8
   12588:	cmpeq	r5, #11
   1258c:	beq	12628 <__assert_fail@plt+0x1938>
   12590:	sub	r3, r5, #15
   12594:	clz	r3, r3
   12598:	lsr	lr, r3, #5
   1259c:	sub	r2, r2, #9
   125a0:	clz	r2, r2
   125a4:	lsr	ip, r2, #5
   125a8:	orr	r2, lr, ip
   125ac:	sub	r3, r6, #15
   125b0:	clz	r3, r3
   125b4:	lsr	r3, r3, #5
   125b8:	tst	r2, r3
   125bc:	subeq	r1, r1, #9
   125c0:	clzeq	r1, r1
   125c4:	lsreq	r1, r1, #5
   125c8:	andseq	r1, lr, r1
   125cc:	bne	124b0 <__assert_fail@plt+0x17c0>
   125d0:	cmp	r7, #15
   125d4:	bne	125f8 <__assert_fail@plt+0x1908>
   125d8:	subs	r1, r5, #10
   125dc:	movwne	r1, #1
   125e0:	orr	r2, r5, #2
   125e4:	subs	r2, r2, #14
   125e8:	movwne	r2, #1
   125ec:	tst	r1, r2
   125f0:	cmpeq	r6, #15
   125f4:	beq	124b0 <__assert_fail@plt+0x17c0>
   125f8:	cmp	r5, #15
   125fc:	bne	12634 <__assert_fail@plt+0x1944>
   12600:	subs	r1, r6, #10
   12604:	movwne	r1, #1
   12608:	orr	r2, r6, #2
   1260c:	subs	r2, r2, #14
   12610:	movwne	r2, #1
   12614:	tst	r1, r2
   12618:	bne	12640 <__assert_fail@plt+0x1950>
   1261c:	cmp	r0, #15
   12620:	beq	124b0 <__assert_fail@plt+0x17c0>
   12624:	b	12640 <__assert_fail@plt+0x1950>
   12628:	cmp	r6, #8
   1262c:	beq	124b0 <__assert_fail@plt+0x17c0>
   12630:	b	12590 <__assert_fail@plt+0x18a0>
   12634:	cmp	r5, #7
   12638:	cmpeq	r6, #7
   1263c:	beq	124b0 <__assert_fail@plt+0x17c0>
   12640:	cmp	r6, #16
   12644:	bne	12670 <__assert_fail@plt+0x1980>
   12648:	orr	r0, r5, #8
   1264c:	sub	r0, r0, #15
   12650:	clz	r0, r0
   12654:	lsr	r0, r0, #5
   12658:	orr	r0, r0, ip
   1265c:	sub	r1, r5, #16
   12660:	clz	r1, r1
   12664:	lsr	r1, r1, #5
   12668:	orrs	r0, r1, r0
   1266c:	bne	124b0 <__assert_fail@plt+0x17c0>
   12670:	cmp	r5, #16
   12674:	bne	1268c <__assert_fail@plt+0x199c>
   12678:	cmp	r6, #16
   1267c:	bhi	12698 <__assert_fail@plt+0x19a8>
   12680:	tst	r9, sl, lsl r6
   12684:	bne	124b0 <__assert_fail@plt+0x17c0>
   12688:	b	12698 <__assert_fail@plt+0x19a8>
   1268c:	cmp	r5, #5
   12690:	cmpeq	r6, #5
   12694:	beq	124b0 <__assert_fail@plt+0x17c0>
   12698:	mov	r0, r4
   1269c:	bl	127dc <__assert_fail@plt+0x1aec>
   126a0:	sub	sp, fp, #28
   126a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126a8:	push	{fp, lr}
   126ac:	mov	fp, sp
   126b0:	bl	10b70 <utf8proc_get_property@plt>
   126b4:	ldrsh	r1, [r0]
   126b8:	sub	r2, r1, #1
   126bc:	mov	r0, #1
   126c0:	cmp	r2, #12
   126c4:	popcc	{fp, pc}
   126c8:	cmp	r1, #29
   126cc:	movne	r0, #0
   126d0:	pop	{fp, pc}
   126d4:	push	{r4, r5, r6, r7, fp, lr}
   126d8:	add	fp, sp, #16
   126dc:	mov	r5, r1
   126e0:	mov	r4, r0
   126e4:	ldr	r6, [r2, #4]
   126e8:	mov	r0, r1
   126ec:	mov	r1, r6
   126f0:	bl	1289c <__assert_fail@plt+0x1bac>
   126f4:	add	r0, r0, #1
   126f8:	bl	10bf4 <malloc@plt>
   126fc:	mov	r7, r0
   12700:	mov	r1, r5
   12704:	mov	r2, r6
   12708:	bl	12940 <__assert_fail@plt+0x1c50>
   1270c:	mov	r0, #1
   12710:	mov	r1, #12
   12714:	bl	129b4 <__assert_fail@plt+0x1cc4>
   12718:	mov	r5, r0
   1271c:	mov	r0, r7
   12720:	bl	10c84 <utf8proc_NFC@plt>
   12724:	str	r0, [r5, #8]
   12728:	mov	r0, r4
   1272c:	mov	r1, r5
   12730:	bl	11684 <__assert_fail@plt+0x994>
   12734:	mov	r0, r7
   12738:	pop	{r4, r5, r6, r7, fp, lr}
   1273c:	b	10b64 <free@plt>
   12740:	push	{r4, sl, fp, lr}
   12744:	add	fp, sp, #8
   12748:	mov	r4, r0
   1274c:	ldr	r0, [r0, #8]
   12750:	bl	10b64 <free@plt>
   12754:	mov	r0, r4
   12758:	pop	{r4, sl, fp, lr}
   1275c:	b	10b64 <free@plt>
   12760:	push	{r4, r5, fp, lr}
   12764:	add	fp, sp, #8
   12768:	mov	r4, #0
   1276c:	cmp	r0, #0
   12770:	beq	127a0 <__assert_fail@plt+0x1ab0>
   12774:	ldr	r5, [r0, #4]
   12778:	cmp	r5, #0
   1277c:	beq	127a0 <__assert_fail@plt+0x1ab0>
   12780:	mov	r0, r5
   12784:	bl	127b4 <__assert_fail@plt+0x1ac4>
   12788:	orr	r0, r0, #2
   1278c:	cmp	r0, #6
   12790:	bne	127a8 <__assert_fail@plt+0x1ab8>
   12794:	ldr	r5, [r5, #4]
   12798:	cmp	r5, #0
   1279c:	bne	12780 <__assert_fail@plt+0x1a90>
   127a0:	mov	r0, r4
   127a4:	pop	{r4, r5, fp, pc}
   127a8:	mov	r4, r5
   127ac:	mov	r0, r4
   127b0:	pop	{r4, r5, fp, pc}
   127b4:	cmp	r0, #0
   127b8:	moveq	r0, #18
   127bc:	bxeq	lr
   127c0:	ldr	r0, [r0, #12]
   127c4:	b	12828 <__assert_fail@plt+0x1b38>
   127c8:	push	{fp, lr}
   127cc:	mov	fp, sp
   127d0:	bl	12760 <__assert_fail@plt+0x1a70>
   127d4:	pop	{fp, lr}
   127d8:	b	12760 <__assert_fail@plt+0x1a70>
   127dc:	push	{r4, r5, fp, lr}
   127e0:	add	fp, sp, #8
   127e4:	cmp	r0, #0
   127e8:	beq	1281c <__assert_fail@plt+0x1b2c>
   127ec:	mov	r5, r0
   127f0:	mov	r4, r5
   127f4:	ldr	r5, [r5, #4]
   127f8:	cmp	r5, #0
   127fc:	beq	12814 <__assert_fail@plt+0x1b24>
   12800:	mov	r0, r5
   12804:	bl	127b4 <__assert_fail@plt+0x1ac4>
   12808:	orr	r0, r0, #2
   1280c:	cmp	r0, #6
   12810:	beq	127f0 <__assert_fail@plt+0x1b00>
   12814:	mov	r0, r4
   12818:	pop	{r4, r5, fp, pc}
   1281c:	mov	r4, #0
   12820:	mov	r0, r4
   12824:	pop	{r4, r5, fp, pc}
   12828:	mov	r1, #0
   1282c:	movw	r2, #1092	; 0x444
   12830:	b	12834 <__assert_fail@plt+0x1b44>
   12834:	push	{r4, r5, fp, lr}
   12838:	add	fp, sp, #8
   1283c:	mov	lr, r0
   12840:	mov	r0, #0
   12844:	cmp	r2, r1
   12848:	popcc	{r4, r5, fp, pc}
   1284c:	movw	ip, #15916	; 0x3e2c
   12850:	movt	ip, #1
   12854:	sub	r3, r2, r1
   12858:	add	r3, r1, r3, lsr #1
   1285c:	add	r4, r3, r3, lsl #1
   12860:	ldr	r5, [ip, r4, lsl #2]
   12864:	cmp	r5, lr
   12868:	bls	1287c <__assert_fail@plt+0x1b8c>
   1286c:	sub	r2, r3, #1
   12870:	cmp	r2, r1
   12874:	bcs	12854 <__assert_fail@plt+0x1b64>
   12878:	b	12898 <__assert_fail@plt+0x1ba8>
   1287c:	add	r1, ip, r4, lsl #2
   12880:	ldr	r4, [r1, #4]
   12884:	cmp	r4, lr
   12888:	bcs	12894 <__assert_fail@plt+0x1ba4>
   1288c:	add	r1, r3, #1
   12890:	b	12870 <__assert_fail@plt+0x1b80>
   12894:	ldr	r0, [r1, #8]
   12898:	pop	{r4, r5, fp, pc}
   1289c:	push	{r4, r5, r6, r7, fp, lr}
   128a0:	add	fp, sp, #16
   128a4:	sub	sp, sp, #8
   128a8:	cmp	r0, r1
   128ac:	beq	128f0 <__assert_fail@plt+0x1c00>
   128b0:	mov	r5, r1
   128b4:	mov	r6, r0
   128b8:	mov	r4, #0
   128bc:	add	r7, sp, #4
   128c0:	cmp	r6, #0
   128c4:	beq	12900 <__assert_fail@plt+0x1c10>
   128c8:	ldr	r0, [r6, #12]
   128cc:	mov	r1, r7
   128d0:	bl	10b88 <utf8proc_encode_char@plt>
   128d4:	cmp	r0, #0
   128d8:	beq	12920 <__assert_fail@plt+0x1c30>
   128dc:	add	r4, r0, r4
   128e0:	ldr	r6, [r6, #4]
   128e4:	cmp	r6, r5
   128e8:	bne	128c0 <__assert_fail@plt+0x1bd0>
   128ec:	b	128f4 <__assert_fail@plt+0x1c04>
   128f0:	mov	r4, #0
   128f4:	mov	r0, r4
   128f8:	sub	sp, fp, #16
   128fc:	pop	{r4, r5, r6, r7, fp, pc}
   12900:	movw	r0, #29039	; 0x716f
   12904:	movt	r0, #1
   12908:	movw	r1, #29032	; 0x7168
   1290c:	movt	r1, #1
   12910:	movw	r3, #29055	; 0x717f
   12914:	movt	r3, #1
   12918:	mov	r2, #249	; 0xf9
   1291c:	bl	10cf0 <__assert_fail@plt>
   12920:	movw	r0, #29081	; 0x7199
   12924:	movt	r0, #1
   12928:	movw	r1, #29032	; 0x7168
   1292c:	movt	r1, #1
   12930:	movw	r3, #29055	; 0x717f
   12934:	movt	r3, #1
   12938:	mov	r2, #253	; 0xfd
   1293c:	bl	10cf0 <__assert_fail@plt>
   12940:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12944:	add	fp, sp, #24
   12948:	mov	r4, r0
   1294c:	mov	r8, #0
   12950:	cmp	r1, r2
   12954:	mov	r7, #0
   12958:	beq	1298c <__assert_fail@plt+0x1c9c>
   1295c:	mov	r5, r2
   12960:	mov	r6, r1
   12964:	mov	r7, #0
   12968:	cmp	r6, #0
   1296c:	beq	12994 <__assert_fail@plt+0x1ca4>
   12970:	add	r1, r4, r7
   12974:	ldr	r0, [r6, #12]
   12978:	bl	10b88 <utf8proc_encode_char@plt>
   1297c:	add	r7, r0, r7
   12980:	ldr	r6, [r6, #4]
   12984:	cmp	r6, r5
   12988:	bne	12968 <__assert_fail@plt+0x1c78>
   1298c:	strb	r8, [r4, r7]
   12990:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12994:	movw	r0, #29039	; 0x716f
   12998:	movt	r0, #1
   1299c:	movw	r1, #29032	; 0x7168
   129a0:	movt	r1, #1
   129a4:	movw	r3, #29100	; 0x71ac
   129a8:	movt	r3, #1
   129ac:	movw	r2, #269	; 0x10d
   129b0:	bl	10cf0 <__assert_fail@plt>
   129b4:	push	{fp, lr}
   129b8:	mov	fp, sp
   129bc:	bl	10b40 <calloc@plt>
   129c0:	cmp	r0, #0
   129c4:	popne	{fp, pc}
   129c8:	movw	r0, #29124	; 0x71c4
   129cc:	movt	r0, #1
   129d0:	bl	12d68 <error@@Base>
   129d4:	push	{r4, r5, r6, sl, fp, lr}
   129d8:	add	fp, sp, #16
   129dc:	mov	r2, r0
   129e0:	ldrb	ip, [r1]
   129e4:	ldrb	r3, [r0]
   129e8:	mov	r0, #0
   129ec:	cmp	r3, #0
   129f0:	beq	12a30 <__assert_fail@plt+0x1d40>
   129f4:	add	lr, r1, #1
   129f8:	add	r6, r2, #1
   129fc:	mov	r2, #0
   12a00:	uxtb	r4, ip
   12a04:	uxtb	r5, r3
   12a08:	cmp	r5, r4
   12a0c:	bne	12a40 <__assert_fail@plt+0x1d50>
   12a10:	ldrb	ip, [lr, r2]
   12a14:	ldrb	r3, [r6, r2]
   12a18:	add	r2, r2, #1
   12a1c:	cmp	r3, #0
   12a20:	bne	12a00 <__assert_fail@plt+0x1d10>
   12a24:	cmp	ip, #0
   12a28:	bne	12a3c <__assert_fail@plt+0x1d4c>
   12a2c:	pop	{r4, r5, r6, sl, fp, pc}
   12a30:	mov	r2, #0
   12a34:	cmp	ip, #0
   12a38:	beq	12a2c <__assert_fail@plt+0x1d3c>
   12a3c:	mov	r3, #0
   12a40:	ldrb	r1, [r1, r2]
   12a44:	uxtb	r2, r3
   12a48:	mov	r0, #1
   12a4c:	cmp	r2, r1
   12a50:	mvncc	r0, #0
   12a54:	pop	{r4, r5, r6, sl, fp, pc}
   12a58:	push	{r4, r5, fp, lr}
   12a5c:	add	fp, sp, #8
   12a60:	mov	r5, r1
   12a64:	cmp	r0, #0
   12a68:	beq	12a9c <__assert_fail@plt+0x1dac>
   12a6c:	mov	r4, r0
   12a70:	mov	r1, r5
   12a74:	bl	10b58 <fopen@plt>
   12a78:	cmp	r0, #0
   12a7c:	popne	{r4, r5, fp, pc}
   12a80:	ldrb	r0, [r5]
   12a84:	cmp	r0, #119	; 0x77
   12a88:	bne	12ac0 <__assert_fail@plt+0x1dd0>
   12a8c:	movw	r0, #29150	; 0x71de
   12a90:	movt	r0, #1
   12a94:	mov	r1, r4
   12a98:	bl	12da8 <error@@Base+0x40>
   12a9c:	ldrb	r0, [r5]
   12aa0:	movw	r1, #33008	; 0x80f0
   12aa4:	movt	r1, #2
   12aa8:	movw	r2, #33012	; 0x80f4
   12aac:	movt	r2, #2
   12ab0:	cmp	r0, #114	; 0x72
   12ab4:	moveq	r2, r1
   12ab8:	ldr	r0, [r2]
   12abc:	pop	{r4, r5, fp, pc}
   12ac0:	movw	r0, #29172	; 0x71f4
   12ac4:	movt	r0, #1
   12ac8:	mov	r1, r4
   12acc:	bl	12da8 <error@@Base+0x40>
   12ad0:	movw	r1, #33008	; 0x80f0
   12ad4:	movt	r1, #2
   12ad8:	ldr	r1, [r1]
   12adc:	cmp	r1, r0
   12ae0:	bxeq	lr
   12ae4:	movw	r1, #33012	; 0x80f4
   12ae8:	movt	r1, #2
   12aec:	ldr	r1, [r1]
   12af0:	cmp	r1, r0
   12af4:	beq	12afc <__assert_fail@plt+0x1e0c>
   12af8:	b	10c78 <fclose@plt>
   12afc:	bx	lr
   12b00:	push	{fp, lr}
   12b04:	mov	fp, sp
   12b08:	sub	sp, sp, #88	; 0x58
   12b0c:	mov	r1, sp
   12b10:	bl	138cc <error@@Base+0xb64>
   12b14:	clz	r0, r0
   12b18:	lsr	r0, r0, #5
   12b1c:	mov	sp, fp
   12b20:	pop	{fp, pc}
   12b24:	push	{r4, sl, fp, lr}
   12b28:	add	fp, sp, #8
   12b2c:	movw	r0, #41212	; 0xa0fc
   12b30:	movt	r0, #2
   12b34:	ldrh	r1, [r0]
   12b38:	add	r1, r1, #1
   12b3c:	strh	r1, [r0]
   12b40:	sxth	r0, r1
   12b44:	bl	12b58 <__assert_fail@plt+0x1e68>
   12b48:	mov	r4, r0
   12b4c:	bl	10bac <unlink@plt>
   12b50:	mov	r0, r4
   12b54:	pop	{r4, sl, fp, pc}
   12b58:	push	{r4, r5, fp, lr}
   12b5c:	add	fp, sp, #8
   12b60:	sub	sp, sp, #104	; 0x68
   12b64:	mov	r4, r0
   12b68:	movw	r0, #968	; 0x3c8
   12b6c:	movt	r0, #3
   12b70:	ldr	r5, [r0]
   12b74:	bl	10c24 <getpid@plt>
   12b78:	mov	r3, r0
   12b7c:	sxth	r0, r4
   12b80:	str	r0, [sp]
   12b84:	add	r4, sp, #4
   12b88:	movw	r1, #29213	; 0x721d
   12b8c:	movt	r1, #1
   12b90:	mov	r0, r4
   12b94:	mov	r2, r5
   12b98:	bl	10c9c <sprintf@plt>
   12b9c:	mov	r0, r4
   12ba0:	bl	10b94 <strdup@plt>
   12ba4:	sub	sp, fp, #8
   12ba8:	pop	{r4, r5, fp, pc}
   12bac:	push	{r4, sl, fp, lr}
   12bb0:	add	fp, sp, #8
   12bb4:	mov	r4, r0
   12bb8:	bl	10c54 <strlen@plt>
   12bbc:	sub	r0, r0, #1
   12bc0:	sxth	r0, r0
   12bc4:	cmp	r0, #0
   12bc8:	bmi	12bd8 <__assert_fail@plt+0x1ee8>
   12bcc:	ldrb	r1, [r4, r0]
   12bd0:	cmp	r1, #47	; 0x2f
   12bd4:	bne	12bbc <__assert_fail@plt+0x1ecc>
   12bd8:	add	r0, r0, r4
   12bdc:	add	r0, r0, #1
   12be0:	pop	{r4, sl, fp, pc}
   12be4:	push	{r4, r5, r6, r7, fp, lr}
   12be8:	add	fp, sp, #16
   12bec:	mov	r4, r3
   12bf0:	mov	r5, r2
   12bf4:	mov	r6, r1
   12bf8:	mov	r7, r0
   12bfc:	ldr	r0, [r1]
   12c00:	bl	12bac <__assert_fail@plt+0x1ebc>
   12c04:	movw	r1, #968	; 0x3c8
   12c08:	movt	r1, #3
   12c0c:	str	r0, [r1]
   12c10:	bl	12e30 <error@@Base+0xc8>
   12c14:	mov	r0, r7
   12c18:	mov	r1, r6
   12c1c:	mov	r2, r5
   12c20:	mov	r3, r4
   12c24:	pop	{r4, r5, r6, r7, fp, lr}
   12c28:	b	12c2c <__assert_fail@plt+0x1f3c>
   12c2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c30:	add	fp, sp, #28
   12c34:	sub	sp, sp, #12
   12c38:	stmib	sp, {r2, r3}
   12c3c:	mov	r7, r1
   12c40:	mov	r5, r0
   12c44:	ldr	r0, [r0]
   12c48:	cmp	r0, #1
   12c4c:	bne	12c64 <__assert_fail@plt+0x1f74>
   12c50:	movw	r0, #32988	; 0x80dc
   12c54:	movt	r0, #2
   12c58:	ldrb	r0, [r0]
   12c5c:	cmp	r0, #0
   12c60:	bne	12d20 <__assert_fail@plt+0x2030>
   12c64:	ldr	r9, [r5]
   12c68:	mov	r6, #0
   12c6c:	cmp	r9, #2
   12c70:	blt	12d10 <__assert_fail@plt+0x2020>
   12c74:	mov	sl, #1
   12c78:	mov	r6, #0
   12c7c:	mov	r8, #1
   12c80:	b	12ca8 <__assert_fail@plt+0x1fb8>
   12c84:	ldr	r0, [r7, sl, lsl #2]
   12c88:	sxth	r1, r6
   12c8c:	str	r0, [r7, r1, lsl #2]
   12c90:	add	r6, r6, #1
   12c94:	ldr	r9, [r5]
   12c98:	add	r8, r8, #1
   12c9c:	sxth	sl, r8
   12ca0:	cmp	r9, sl
   12ca4:	ble	12d10 <__assert_fail@plt+0x2020>
   12ca8:	ldr	r4, [r7, sl, lsl #2]
   12cac:	ldrb	r0, [r4]
   12cb0:	cmp	r0, #45	; 0x2d
   12cb4:	bne	12c84 <__assert_fail@plt+0x1f94>
   12cb8:	ldrb	r0, [r4, #1]
   12cbc:	cmp	r0, #0
   12cc0:	beq	12c84 <__assert_fail@plt+0x1f94>
   12cc4:	mov	r0, r4
   12cc8:	bl	10c54 <strlen@plt>
   12ccc:	mov	r2, r0
   12cd0:	movw	r0, #29242	; 0x723a
   12cd4:	movt	r0, #1
   12cd8:	mov	r1, r4
   12cdc:	bl	10ccc <strncmp@plt>
   12ce0:	cmp	r0, #0
   12ce4:	beq	12d20 <__assert_fail@plt+0x2030>
   12ce8:	add	r0, sl, #1
   12cec:	mov	r1, #0
   12cf0:	cmp	r0, r9
   12cf4:	ldrlt	r1, [r7, r0, lsl #2]
   12cf8:	mov	r0, r4
   12cfc:	ldr	r2, [sp, #8]
   12d00:	bl	12edc <error@@Base+0x174>
   12d04:	cmp	r0, #0
   12d08:	addne	r8, r8, #1
   12d0c:	b	12c94 <__assert_fail@plt+0x1fa4>
   12d10:	sxth	r0, r6
   12d14:	str	r0, [r5]
   12d18:	sub	sp, fp, #28
   12d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d20:	ldr	r0, [sp, #4]
   12d24:	bl	12e8c <error@@Base+0x124>
   12d28:	push	{fp, lr}
   12d2c:	mov	fp, sp
   12d30:	mov	r0, #0
   12d34:	bl	12d38 <__assert_fail@plt+0x2048>
   12d38:	push	{fp, lr}
   12d3c:	mov	fp, sp
   12d40:	mov	r4, r0
   12d44:	movw	r0, #972	; 0x3cc
   12d48:	movt	r0, #3
   12d4c:	ldr	r0, [r0]
   12d50:	cmp	r0, #0
   12d54:	beq	12d5c <__assert_fail@plt+0x206c>
   12d58:	blx	r0
   12d5c:	bl	12fcc <error@@Base+0x264>
   12d60:	mov	r0, r4
   12d64:	bl	10c30 <exit@plt>

00012d68 <error@@Base>:
   12d68:	push	{fp, lr}
   12d6c:	mov	fp, sp
   12d70:	mov	r3, r0
   12d74:	movw	r0, #968	; 0x3c8
   12d78:	movt	r0, #3
   12d7c:	ldr	r2, [r0]
   12d80:	movw	r0, #33000	; 0x80e8
   12d84:	movt	r0, #2
   12d88:	ldr	r0, [r0]
   12d8c:	movw	r1, #29192	; 0x7208
   12d90:	movt	r1, #1
   12d94:	bl	10c60 <fprintf@plt>
   12d98:	movw	r0, #32992	; 0x80e0
   12d9c:	movt	r0, #2
   12da0:	ldr	r0, [r0]
   12da4:	bl	12d38 <__assert_fail@plt+0x2048>
   12da8:	push	{fp, lr}
   12dac:	mov	fp, sp
   12db0:	sub	sp, sp, #8
   12db4:	mov	r3, r0
   12db8:	movw	r0, #968	; 0x3c8
   12dbc:	movt	r0, #3
   12dc0:	ldr	r2, [r0]
   12dc4:	movw	r0, #33000	; 0x80e8
   12dc8:	movt	r0, #2
   12dcc:	ldr	r0, [r0]
   12dd0:	str	r1, [sp]
   12dd4:	movw	r1, #29200	; 0x7210
   12dd8:	movt	r1, #1
   12ddc:	bl	10c60 <fprintf@plt>
   12de0:	movw	r0, #32992	; 0x80e0
   12de4:	movt	r0, #2
   12de8:	ldr	r0, [r0]
   12dec:	bl	12d38 <__assert_fail@plt+0x2048>
   12df0:	push	{fp, lr}
   12df4:	mov	fp, sp
   12df8:	sub	sp, sp, #8
   12dfc:	mov	r3, r0
   12e00:	movw	r0, #968	; 0x3c8
   12e04:	movt	r0, #3
   12e08:	ldr	r2, [r0]
   12e0c:	movw	r0, #33000	; 0x80e8
   12e10:	movt	r0, #2
   12e14:	ldr	r0, [r0]
   12e18:	str	r1, [sp]
   12e1c:	movw	r1, #29200	; 0x7210
   12e20:	movt	r1, #1
   12e24:	bl	10c60 <fprintf@plt>
   12e28:	mov	sp, fp
   12e2c:	pop	{fp, pc}
   12e30:	push	{r4, sl, fp, lr}
   12e34:	add	fp, sp, #8
   12e38:	movw	r4, #11868	; 0x2e5c
   12e3c:	movt	r4, #1
   12e40:	mov	r0, #2
   12e44:	mov	r1, r4
   12e48:	bl	10c0c <__sysv_signal@plt>
   12e4c:	mov	r0, #15
   12e50:	mov	r1, r4
   12e54:	pop	{r4, sl, fp, lr}
   12e58:	b	10c0c <__sysv_signal@plt>
   12e5c:	push	{fp, lr}
   12e60:	mov	fp, sp
   12e64:	movw	r0, #41214	; 0xa0fe
   12e68:	movt	r0, #2
   12e6c:	ldrb	r1, [r0]
   12e70:	cmp	r1, #1
   12e74:	popeq	{fp, pc}
   12e78:	mov	r1, #1
   12e7c:	strb	r1, [r0]
   12e80:	movw	r0, #29227	; 0x722b
   12e84:	movt	r0, #1
   12e88:	bl	12d68 <error@@Base>
   12e8c:	push	{fp, lr}
   12e90:	mov	fp, sp
   12e94:	mov	r3, r0
   12e98:	movw	r0, #964	; 0x3c4
   12e9c:	movt	r0, #3
   12ea0:	ldr	r0, [r0]
   12ea4:	cmp	r0, #0
   12ea8:	bne	12ed4 <error@@Base+0x16c>
   12eac:	movw	r0, #968	; 0x3c8
   12eb0:	movt	r0, #3
   12eb4:	ldr	r2, [r0]
   12eb8:	movw	r0, #33000	; 0x80e8
   12ebc:	movt	r0, #2
   12ec0:	ldr	r0, [r0]
   12ec4:	movw	r1, #29248	; 0x7240
   12ec8:	movt	r1, #1
   12ecc:	bl	10c60 <fprintf@plt>
   12ed0:	bl	12d28 <__assert_fail@plt+0x2038>
   12ed4:	blx	r0
   12ed8:	bl	12d28 <__assert_fail@plt+0x2038>
   12edc:	push	{r4, sl, fp, lr}
   12ee0:	add	fp, sp, #8
   12ee4:	mov	ip, r0
   12ee8:	cmp	r2, #0
   12eec:	ldrbne	r0, [r2]
   12ef0:	cmpne	r0, #0
   12ef4:	bne	12f08 <error@@Base+0x1a0>
   12ef8:	movw	r0, #29263	; 0x724f
   12efc:	movt	r0, #1
   12f00:	mov	r1, ip
   12f04:	bl	12da8 <error@@Base+0x40>
   12f08:	ldrb	lr, [ip, #1]
   12f0c:	mov	r3, #0
   12f10:	cmp	lr, r0
   12f14:	beq	12f3c <error@@Base+0x1d4>
   12f18:	mov	r0, #1
   12f1c:	sxth	r3, r0
   12f20:	add	r4, r3, r3, lsl #1
   12f24:	ldrb	r4, [r2, r4, lsl #2]
   12f28:	cmp	r4, #0
   12f2c:	beq	12ef8 <error@@Base+0x190>
   12f30:	add	r0, r0, #1
   12f34:	cmp	lr, r4
   12f38:	bne	12f1c <error@@Base+0x1b4>
   12f3c:	add	r0, r3, r3, lsl #1
   12f40:	add	r3, r2, r0, lsl #2
   12f44:	ldr	r0, [r3, #4]
   12f48:	cmp	r0, #0
   12f4c:	beq	12f8c <error@@Base+0x224>
   12f50:	mov	r2, ip
   12f54:	ldrb	lr, [r2, #2]!
   12f58:	cmp	r1, #0
   12f5c:	cmpeq	lr, #0
   12f60:	beq	12f8c <error@@Base+0x224>
   12f64:	ldr	r3, [r0]
   12f68:	cmp	r3, #0
   12f6c:	bne	12fbc <error@@Base+0x254>
   12f70:	cmp	lr, #0
   12f74:	movne	r1, r2
   12f78:	str	r1, [r0]
   12f7c:	ldrb	r0, [r2]
   12f80:	clz	r0, r0
   12f84:	lsr	r0, r0, #5
   12f88:	pop	{r4, sl, fp, pc}
   12f8c:	ldr	r0, [r3, #8]
   12f90:	cmp	r0, #0
   12f94:	beq	12ef8 <error@@Base+0x190>
   12f98:	ldrb	r1, [ip, #2]
   12f9c:	cmp	r1, #0
   12fa0:	bne	12ef8 <error@@Base+0x190>
   12fa4:	ldrb	r1, [r0]
   12fa8:	cmp	r1, #0
   12fac:	moveq	r1, #1
   12fb0:	strbeq	r1, [r0]
   12fb4:	moveq	r0, #0
   12fb8:	popeq	{r4, sl, fp, pc}
   12fbc:	movw	r0, #29278	; 0x725e
   12fc0:	movt	r0, #1
   12fc4:	mov	r1, ip
   12fc8:	bl	12da8 <error@@Base+0x40>
   12fcc:	push	{r4, r5, r6, sl, fp, lr}
   12fd0:	add	fp, sp, #16
   12fd4:	movw	r5, #41212	; 0xa0fc
   12fd8:	movt	r5, #2
   12fdc:	ldrsh	r0, [r5]
   12fe0:	cmp	r0, #1
   12fe4:	blt	13018 <error@@Base+0x2b0>
   12fe8:	mov	r6, #1
   12fec:	sxth	r0, r6
   12ff0:	bl	12b58 <__assert_fail@plt+0x1e68>
   12ff4:	mov	r4, r0
   12ff8:	bl	10bac <unlink@plt>
   12ffc:	mov	r0, r4
   13000:	bl	10b64 <free@plt>
   13004:	add	r0, r6, #1
   13008:	sxth	r6, r0
   1300c:	ldrsh	r0, [r5]
   13010:	cmp	r6, r0
   13014:	ble	12fec <error@@Base+0x284>
   13018:	pop	{r4, r5, r6, sl, fp, pc}
   1301c:	push	{r4, r5, r6, sl, fp, lr}
   13020:	add	fp, sp, #16
   13024:	mov	r4, r2
   13028:	mov	r5, r1
   1302c:	mov	r6, r0
   13030:	mov	r0, #1
   13034:	mov	r1, #16
   13038:	bl	129b4 <__assert_fail@plt+0x1cc4>
   1303c:	mov	r1, r0
   13040:	str	r4, [r0, #12]
   13044:	strb	r5, [r0, #8]
   13048:	mov	r0, r6
   1304c:	pop	{r4, r5, r6, sl, fp, lr}
   13050:	b	11684 <__assert_fail@plt+0x994>
   13054:	push	{r4, r5, r6, r7, fp, lr}
   13058:	add	fp, sp, #16
   1305c:	mov	r5, r2
   13060:	mov	r2, r1
   13064:	mov	r4, r0
   13068:	cmp	r1, #0
   1306c:	bne	1307c <error@@Base+0x314>
   13070:	ldrb	r0, [r5]
   13074:	cmp	r0, #0
   13078:	bne	13118 <error@@Base+0x3b0>
   1307c:	ldr	r7, [r4, #4]
   13080:	movw	r1, #15012	; 0x3aa4
   13084:	movt	r1, #1
   13088:	mov	r0, r2
   1308c:	bl	12a58 <__assert_fail@plt+0x1d68>
   13090:	mov	r6, r0
   13094:	ldrb	r0, [r5]
   13098:	cmp	r0, #0
   1309c:	beq	130ac <error@@Base+0x344>
   130a0:	mov	r0, r6
   130a4:	bl	1312c <error@@Base+0x3c4>
   130a8:	strb	r0, [r5, #11]
   130ac:	ldrb	r2, [r5, #1]
   130b0:	ldr	r3, [r5, #4]
   130b4:	cmp	r3, #0
   130b8:	movweq	r3, #94	; 0x5e
   130bc:	mov	r0, r6
   130c0:	mov	r1, r4
   130c4:	bl	131dc <error@@Base+0x474>
   130c8:	mov	r0, r6
   130cc:	bl	12ad0 <__assert_fail@plt+0x1de0>
   130d0:	ldrb	r0, [r5, #9]
   130d4:	cmp	r0, #0
   130d8:	beq	130f4 <error@@Base+0x38c>
   130dc:	cmp	r7, #0
   130e0:	mov	r0, r4
   130e4:	addne	r0, r7, #4
   130e8:	ldr	r1, [r0]
   130ec:	mov	r0, r4
   130f0:	bl	132ec <error@@Base+0x584>
   130f4:	ldrb	r0, [r5, #10]
   130f8:	cmp	r0, #0
   130fc:	beq	13114 <error@@Base+0x3ac>
   13100:	cmp	r7, #0
   13104:	addne	r4, r7, #4
   13108:	ldr	r0, [r4]
   1310c:	pop	{r4, r5, r6, r7, fp, lr}
   13110:	b	133d0 <error@@Base+0x668>
   13114:	pop	{r4, r5, r6, r7, fp, pc}
   13118:	movw	r0, #29295	; 0x726f
   1311c:	movt	r0, #1
   13120:	movw	r1, #29311	; 0x727f
   13124:	movt	r1, #1
   13128:	bl	12da8 <error@@Base+0x40>
   1312c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13130:	add	fp, sp, #24
   13134:	sub	sp, sp, #104	; 0x68
   13138:	mov	r4, r0
   1313c:	add	r0, sp, #4
   13140:	mov	r1, #99	; 0x63
   13144:	mov	r2, r4
   13148:	bl	10b7c <fgets@plt>
   1314c:	cmp	r0, #0
   13150:	beq	13170 <error@@Base+0x408>
   13154:	add	r0, sp, #4
   13158:	movw	r1, #29363	; 0x72b3
   1315c:	movt	r1, #1
   13160:	mov	r2, #51	; 0x33
   13164:	bl	10c3c <bcmp@plt>
   13168:	cmp	r0, #0
   1316c:	beq	13188 <error@@Base+0x420>
   13170:	mov	r0, r4
   13174:	bl	10ba0 <rewind@plt>
   13178:	mov	r7, #0
   1317c:	mov	r0, r7
   13180:	sub	sp, fp, #24
   13184:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13188:	mov	r6, #0
   1318c:	add	r5, sp, #4
   13190:	movw	r8, #29419	; 0x72eb
   13194:	movt	r8, #1
   13198:	mov	r7, #1
   1319c:	mov	r0, r5
   131a0:	mov	r1, #99	; 0x63
   131a4:	mov	r2, r4
   131a8:	bl	10b7c <fgets@plt>
   131ac:	cmp	r0, #0
   131b0:	beq	1317c <error@@Base+0x414>
   131b4:	mov	r0, r5
   131b8:	mov	r1, r8
   131bc:	mov	r2, #56	; 0x38
   131c0:	bl	10c3c <bcmp@plt>
   131c4:	cmp	r0, #0
   131c8:	addeq	r6, r6, #1
   131cc:	uxth	r0, r6
   131d0:	cmp	r0, #2
   131d4:	bcc	1319c <error@@Base+0x434>
   131d8:	b	1317c <error@@Base+0x414>
   131dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131e0:	add	fp, sp, #28
   131e4:	sub	sp, sp, #20
   131e8:	str	r3, [sp, #8]
   131ec:	mov	r5, r2
   131f0:	str	r1, [sp, #4]
   131f4:	mov	r9, r0
   131f8:	bl	10ce4 <getc@plt>
   131fc:	cmn	r0, #1
   13200:	beq	132c4 <error@@Base+0x55c>
   13204:	uxtb	r8, r5
   13208:	add	r4, sp, #16
   1320c:	add	r1, r4, #1
   13210:	str	r1, [sp]
   13214:	mov	r7, #0
   13218:	movw	r6, #32256	; 0x7e00
   1321c:	movt	r6, #2
   13220:	b	13248 <error@@Base+0x4e0>
   13224:	ldr	r0, [sp, #4]
   13228:	mov	r1, r7
   1322c:	bl	1301c <error@@Base+0x2b4>
   13230:	mov	r5, #0
   13234:	mov	r0, r9
   13238:	bl	10ce4 <getc@plt>
   1323c:	cmn	r0, #1
   13240:	mov	r7, r5
   13244:	beq	132c4 <error@@Base+0x55c>
   13248:	add	r1, r6, r0
   1324c:	ldrsb	sl, [r1]
   13250:	cmp	sl, #0
   13254:	ble	132cc <error@@Base+0x564>
   13258:	strb	r0, [sp, #16]
   1325c:	cmp	sl, #1
   13260:	beq	1328c <error@@Base+0x524>
   13264:	mov	r5, r8
   13268:	sub	r8, sl, #1
   1326c:	ldr	r0, [sp]
   13270:	mov	r1, #1
   13274:	mov	r2, r8
   13278:	mov	r3, r9
   1327c:	bl	10bdc <fread@plt>
   13280:	cmp	r0, r8
   13284:	mov	r8, r5
   13288:	bne	132e0 <error@@Base+0x578>
   1328c:	mov	r0, r4
   13290:	mov	r1, #4
   13294:	add	r2, sp, #12
   13298:	bl	10be8 <utf8proc_iterate@plt>
   1329c:	cmp	r0, sl
   132a0:	bne	132d8 <error@@Base+0x570>
   132a4:	ldr	r2, [sp, #12]
   132a8:	cmp	r8, #0
   132ac:	beq	13224 <error@@Base+0x4bc>
   132b0:	mov	r5, #1
   132b4:	ldr	r0, [sp, #8]
   132b8:	cmp	r2, r0
   132bc:	beq	13234 <error@@Base+0x4cc>
   132c0:	b	13224 <error@@Base+0x4bc>
   132c4:	sub	sp, fp, #28
   132c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132cc:	movw	r0, #29475	; 0x7323
   132d0:	movt	r0, #1
   132d4:	bl	12d68 <error@@Base>
   132d8:	bl	10cb4 <utf8proc_errmsg@plt>
   132dc:	bl	12d68 <error@@Base>
   132e0:	movw	r0, #29499	; 0x733b
   132e4:	movt	r0, #1
   132e8:	bl	12d68 <error@@Base>
   132ec:	push	{r4, r5, r6, r7, fp, lr}
   132f0:	add	fp, sp, #16
   132f4:	cmp	r1, #0
   132f8:	beq	133cc <error@@Base+0x664>
   132fc:	mov	r5, r1
   13300:	mov	r4, r0
   13304:	mov	r6, #32
   13308:	mov	r7, r1
   1330c:	ldr	r0, [r7, #12]
   13310:	bl	136ac <error@@Base+0x944>
   13314:	cmp	r0, #0
   13318:	strne	r6, [r7, #12]
   1331c:	ldr	r7, [r7, #4]
   13320:	cmp	r7, #0
   13324:	bne	1330c <error@@Base+0x5a4>
   13328:	mov	r6, #0
   1332c:	b	13350 <error@@Base+0x5e8>
   13330:	mov	r0, r4
   13334:	mov	r1, r5
   13338:	bl	116ac <__assert_fail@plt+0x9bc>
   1333c:	mov	r0, r5
   13340:	bl	10b64 <free@plt>
   13344:	cmp	r7, #0
   13348:	mov	r5, r7
   1334c:	beq	133cc <error@@Base+0x664>
   13350:	ldr	r7, [r5, #4]
   13354:	ldr	r1, [r5, #12]
   13358:	cmp	r1, #32
   1335c:	bne	13398 <error@@Base+0x630>
   13360:	tst	r6, #255	; 0xff
   13364:	cmpne	r7, #0
   13368:	bne	133b4 <error@@Base+0x64c>
   1336c:	tst	r6, #255	; 0xff
   13370:	cmpne	r7, #0
   13374:	beq	13330 <error@@Base+0x5c8>
   13378:	ldr	r0, [r7, #12]
   1337c:	cmp	r0, #32
   13380:	bne	13330 <error@@Base+0x5c8>
   13384:	ldrb	r0, [r5, #8]
   13388:	ldrb	r1, [r7, #8]
   1338c:	orr	r0, r1, r0
   13390:	strb	r0, [r7, #8]
   13394:	b	13330 <error@@Base+0x5c8>
   13398:	subs	r0, r1, #10
   1339c:	movwne	r0, #1
   133a0:	tst	r6, #255	; 0xff
   133a4:	cmpeq	r1, #10
   133a8:	beq	13330 <error@@Base+0x5c8>
   133ac:	mov	r6, r0
   133b0:	b	13344 <error@@Base+0x5dc>
   133b4:	ldr	r1, [r7, #12]
   133b8:	cmp	r1, #10
   133bc:	movne	r0, #1
   133c0:	cmpne	r1, #32
   133c4:	beq	1336c <error@@Base+0x604>
   133c8:	b	133ac <error@@Base+0x644>
   133cc:	pop	{r4, r5, r6, r7, fp, pc}
   133d0:	push	{r4, sl, fp, lr}
   133d4:	add	fp, sp, #8
   133d8:	cmp	r0, #0
   133dc:	popeq	{r4, sl, fp, pc}
   133e0:	mov	r4, r0
   133e4:	ldr	r0, [r4, #12]
   133e8:	bl	10bb8 <utf8proc_tolower@plt>
   133ec:	str	r0, [r4, #12]
   133f0:	ldr	r4, [r4, #4]
   133f4:	cmp	r4, #0
   133f8:	bne	133e4 <error@@Base+0x67c>
   133fc:	pop	{r4, sl, fp, pc}
   13400:	push	{fp, lr}
   13404:	mov	fp, sp
   13408:	bl	10b88 <utf8proc_encode_char@plt>
   1340c:	cmp	r0, #0
   13410:	sxtbgt	r0, r0
   13414:	popgt	{fp, pc}
   13418:	movw	r0, #29321	; 0x7289
   1341c:	movt	r0, #1
   13420:	bl	12d68 <error@@Base>
   13424:	push	{r4, r5, r6, r7, fp, lr}
   13428:	add	fp, sp, #16
   1342c:	mov	r7, r3
   13430:	mov	r4, r2
   13434:	mov	r5, r1
   13438:	tst	r0, #255	; 0xff
   1343c:	beq	1347c <error@@Base+0x714>
   13440:	mov	r0, #94	; 0x5e
   13444:	mov	r1, r4
   13448:	bl	13400 <error@@Base+0x698>
   1344c:	mov	r6, r0
   13450:	cmp	r5, #10
   13454:	bne	13488 <error@@Base+0x720>
   13458:	movw	r0, #29211	; 0x721b
   1345c:	movt	r0, #1
   13460:	movw	r1, #29344	; 0x72a0
   13464:	movt	r1, #1
   13468:	tst	r7, #255	; 0xff
   1346c:	moveq	r1, r0
   13470:	add	r0, r4, r6
   13474:	pop	{r4, r5, r6, r7, fp, lr}
   13478:	b	10c9c <sprintf@plt>
   1347c:	mov	r6, #0
   13480:	cmp	r5, #10
   13484:	beq	13458 <error@@Base+0x6f0>
   13488:	mov	r0, r5
   1348c:	bl	13500 <error@@Base+0x798>
   13490:	cmp	r0, #0
   13494:	beq	134d4 <error@@Base+0x76c>
   13498:	mov	r0, r5
   1349c:	bl	13540 <error@@Base+0x7d8>
   134a0:	cmp	r0, #0
   134a4:	beq	134b8 <error@@Base+0x750>
   134a8:	add	r1, r4, r6
   134ac:	movw	r0, #9676	; 0x25cc
   134b0:	bl	13400 <error@@Base+0x698>
   134b4:	add	r6, r6, r0
   134b8:	add	r1, r4, r6
   134bc:	mov	r0, r5
   134c0:	bl	13400 <error@@Base+0x698>
   134c4:	add	r0, r6, r0
   134c8:	mov	r1, #0
   134cc:	strb	r1, [r4, r0]
   134d0:	pop	{r4, r5, r6, r7, fp, pc}
   134d4:	add	r0, r4, r6
   134d8:	cmp	r5, #255	; 0xff
   134dc:	bhi	134ec <error@@Base+0x784>
   134e0:	movw	r1, #29349	; 0x72a5
   134e4:	movt	r1, #1
   134e8:	b	134f4 <error@@Base+0x78c>
   134ec:	movw	r1, #29356	; 0x72ac
   134f0:	movt	r1, #1
   134f4:	mov	r2, r5
   134f8:	pop	{r4, r5, r6, r7, fp, lr}
   134fc:	b	10c9c <sprintf@plt>
   13500:	push	{r4, sl, fp, lr}
   13504:	add	fp, sp, #8
   13508:	mov	r4, r0
   1350c:	bl	10b70 <utf8proc_get_property@plt>
   13510:	mov	r1, r0
   13514:	mov	r0, #1
   13518:	cmp	r4, #32
   1351c:	popeq	{r4, sl, fp, pc}
   13520:	ldrsh	r1, [r1]
   13524:	sub	r2, r1, #1
   13528:	cmp	r2, #22
   1352c:	bcs	13534 <error@@Base+0x7cc>
   13530:	pop	{r4, sl, fp, pc}
   13534:	cmp	r1, #29
   13538:	movne	r0, #0
   1353c:	pop	{r4, sl, fp, pc}
   13540:	push	{fp, lr}
   13544:	mov	fp, sp
   13548:	bl	10c48 <utf8proc_category@plt>
   1354c:	sub	r1, r0, #6
   13550:	mov	r0, #0
   13554:	cmp	r1, #3
   13558:	movwcc	r0, #1
   1355c:	pop	{fp, pc}
   13560:	push	{r4, r5, r6, r7, fp, lr}
   13564:	add	fp, sp, #16
   13568:	sub	sp, sp, #16
   1356c:	mov	r6, r2
   13570:	mov	r2, r1
   13574:	mov	r5, r0
   13578:	movw	r1, #14987	; 0x3a8b
   1357c:	movt	r1, #1
   13580:	mov	r0, r2
   13584:	bl	12a58 <__assert_fail@plt+0x1d68>
   13588:	mov	r4, r0
   1358c:	cmp	r6, #0
   13590:	beq	135e4 <error@@Base+0x87c>
   13594:	movw	r0, #29363	; 0x72b3
   13598:	movt	r0, #1
   1359c:	mov	r1, #55	; 0x37
   135a0:	mov	r2, #1
   135a4:	mov	r3, r4
   135a8:	bl	10bd0 <fwrite@plt>
   135ac:	movw	r7, #29419	; 0x72eb
   135b0:	movt	r7, #1
   135b4:	mov	r0, r7
   135b8:	mov	r1, #55	; 0x37
   135bc:	mov	r2, #1
   135c0:	mov	r3, r4
   135c4:	bl	10bd0 <fwrite@plt>
   135c8:	mov	r0, r4
   135cc:	blx	r6
   135d0:	mov	r0, r7
   135d4:	mov	r1, #55	; 0x37
   135d8:	mov	r2, #1
   135dc:	mov	r3, r4
   135e0:	bl	10bd0 <fwrite@plt>
   135e4:	ldr	r6, [r5]
   135e8:	cmp	r6, #0
   135ec:	beq	13620 <error@@Base+0x8b8>
   135f0:	add	r5, sp, #7
   135f4:	ldr	r1, [r6, #12]
   135f8:	ldrb	r0, [r6, #8]
   135fc:	mov	r2, r5
   13600:	mov	r3, #0
   13604:	bl	13424 <error@@Base+0x6bc>
   13608:	mov	r0, r5
   1360c:	mov	r1, r4
   13610:	bl	10cc0 <fputs@plt>
   13614:	ldr	r6, [r6, #4]
   13618:	cmp	r6, #0
   1361c:	bne	135f4 <error@@Base+0x88c>
   13620:	mov	r0, r4
   13624:	bl	12ad0 <__assert_fail@plt+0x1de0>
   13628:	sub	sp, fp, #16
   1362c:	pop	{r4, r5, r6, r7, fp, pc}
   13630:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13634:	add	fp, sp, #24
   13638:	sub	sp, sp, #8
   1363c:	mov	r6, r0
   13640:	mov	r0, #0
   13644:	str	r0, [sp, #4]
   13648:	ldrb	r0, [r1]
   1364c:	mov	r8, #1
   13650:	cmp	r0, #0
   13654:	beq	136a0 <error@@Base+0x938>
   13658:	mov	r5, r1
   1365c:	add	r7, sp, #4
   13660:	mov	r0, r5
   13664:	mvn	r1, #0
   13668:	mov	r2, r7
   1366c:	bl	10be8 <utf8proc_iterate@plt>
   13670:	cmp	r0, #1
   13674:	blt	1369c <error@@Base+0x934>
   13678:	mov	r4, r0
   1367c:	ldr	r2, [sp, #4]
   13680:	mov	r0, r6
   13684:	mov	r1, #0
   13688:	bl	1301c <error@@Base+0x2b4>
   1368c:	ldrb	r0, [r5, r4]!
   13690:	cmp	r0, #0
   13694:	bne	13660 <error@@Base+0x8f8>
   13698:	b	136a0 <error@@Base+0x938>
   1369c:	mov	r8, #0
   136a0:	mov	r0, r8
   136a4:	sub	sp, fp, #24
   136a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   136ac:	push	{r4, sl, fp, lr}
   136b0:	add	fp, sp, #8
   136b4:	mov	r4, r0
   136b8:	bl	10b70 <utf8proc_get_property@plt>
   136bc:	cmp	r4, #10
   136c0:	ble	136dc <error@@Base+0x974>
   136c4:	sub	r1, r4, #11
   136c8:	cmp	r1, #3
   136cc:	bcc	136f8 <error@@Base+0x990>
   136d0:	cmp	r4, #160	; 0xa0
   136d4:	beq	136f8 <error@@Base+0x990>
   136d8:	b	13704 <error@@Base+0x99c>
   136dc:	cmp	r4, #9
   136e0:	beq	136f8 <error@@Base+0x990>
   136e4:	mov	r1, #0
   136e8:	cmp	r4, #10
   136ec:	bne	13704 <error@@Base+0x99c>
   136f0:	mov	r0, r1
   136f4:	pop	{r4, sl, fp, pc}
   136f8:	mov	r1, #1
   136fc:	mov	r0, r1
   13700:	pop	{r4, sl, fp, pc}
   13704:	ldrsh	r0, [r0]
   13708:	sub	r0, r0, #23
   1370c:	mov	r1, #0
   13710:	cmp	r0, #3
   13714:	movwcc	r1, #1
   13718:	mov	r0, r1
   1371c:	pop	{r4, sl, fp, pc}
   13720:	cmp	r0, #2
   13724:	bxlt	lr
   13728:	movw	r3, #41220	; 0xa104
   1372c:	movt	r3, #2
   13730:	str	r2, [r3]
   13734:	movw	r2, #41216	; 0xa100
   13738:	movt	r2, #2
   1373c:	str	r1, [r2]
   13740:	sub	r1, r0, #1
   13744:	mov	r0, #0
   13748:	b	1374c <error@@Base+0x9e4>
   1374c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13750:	add	fp, sp, #28
   13754:	sub	sp, sp, #4
   13758:	mov	r8, r1
   1375c:	mov	r9, r0
   13760:	movw	r7, #41216	; 0xa100
   13764:	movt	r7, #2
   13768:	movw	sl, #41220	; 0xa104
   1376c:	movt	sl, #2
   13770:	b	13798 <error@@Base+0xa30>
   13774:	ldr	r0, [r7]
   13778:	str	r6, [r0, r4, lsl #2]
   1377c:	sub	r1, r4, #1
   13780:	cmp	r1, r9
   13784:	movgt	r0, r9
   13788:	blgt	1374c <error@@Base+0x9e4>
   1378c:	add	r9, r5, #1
   13790:	cmp	r9, r8
   13794:	bge	13860 <error@@Base+0xaf8>
   13798:	ldr	r0, [r7]
   1379c:	ldr	r6, [r0, r9, lsl #2]
   137a0:	cmp	r9, r8
   137a4:	mov	r4, r8
   137a8:	mov	r5, r9
   137ac:	bge	13774 <error@@Base+0xa0c>
   137b0:	mov	r5, r9
   137b4:	mov	r4, r8
   137b8:	cmp	r5, r4
   137bc:	blt	137d4 <error@@Base+0xa6c>
   137c0:	b	137fc <error@@Base+0xa94>
   137c4:	cmp	r5, r4
   137c8:	bge	13774 <error@@Base+0xa0c>
   137cc:	cmp	r5, r4
   137d0:	bge	137fc <error@@Base+0xa94>
   137d4:	ldr	r0, [r7]
   137d8:	ldr	r1, [r0, r4, lsl #2]
   137dc:	ldr	r2, [sl]
   137e0:	mov	r0, r6
   137e4:	blx	r2
   137e8:	cmn	r0, #1
   137ec:	bgt	137fc <error@@Base+0xa94>
   137f0:	sub	r4, r4, #1
   137f4:	cmp	r5, r4
   137f8:	blt	137d4 <error@@Base+0xa6c>
   137fc:	cmp	r5, r4
   13800:	beq	13814 <error@@Base+0xaac>
   13804:	ldr	r0, [r7]
   13808:	ldr	r1, [r0, r4, lsl #2]
   1380c:	str	r1, [r0, r5, lsl #2]
   13810:	add	r5, r5, #1
   13814:	cmp	r5, r4
   13818:	bge	13844 <error@@Base+0xadc>
   1381c:	ldr	r0, [r7]
   13820:	ldr	r1, [r0, r5, lsl #2]
   13824:	ldr	r2, [sl]
   13828:	mov	r0, r6
   1382c:	blx	r2
   13830:	cmp	r0, #1
   13834:	blt	13844 <error@@Base+0xadc>
   13838:	add	r5, r5, #1
   1383c:	cmp	r4, r5
   13840:	bne	1381c <error@@Base+0xab4>
   13844:	cmp	r5, r4
   13848:	beq	137c4 <error@@Base+0xa5c>
   1384c:	ldr	r0, [r7]
   13850:	ldr	r1, [r0, r5, lsl #2]
   13854:	str	r1, [r0, r4, lsl #2]
   13858:	sub	r4, r4, #1
   1385c:	b	137c4 <error@@Base+0xa5c>
   13860:	sub	sp, fp, #28
   13864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13868:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1386c:	mov	r7, r0
   13870:	ldr	r6, [pc, #72]	; 138c0 <error@@Base+0xb58>
   13874:	ldr	r5, [pc, #72]	; 138c4 <error@@Base+0xb5c>
   13878:	add	r6, pc, r6
   1387c:	add	r5, pc, r5
   13880:	sub	r6, r6, r5
   13884:	mov	r8, r1
   13888:	mov	r9, r2
   1388c:	bl	10b20 <calloc@plt-0x20>
   13890:	asrs	r6, r6, #2
   13894:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13898:	mov	r4, #0
   1389c:	add	r4, r4, #1
   138a0:	ldr	r3, [r5], #4
   138a4:	mov	r2, r9
   138a8:	mov	r1, r8
   138ac:	mov	r0, r7
   138b0:	blx	r3
   138b4:	cmp	r6, r4
   138b8:	bne	1389c <error@@Base+0xb34>
   138bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   138c0:	andeq	r4, r1, ip, ror r5
   138c4:	andeq	r4, r1, r4, ror r5
   138c8:	bx	lr
   138cc:	mov	r2, r1
   138d0:	mov	r1, r0
   138d4:	mov	r0, #3
   138d8:	b	10bc4 <__xstat@plt>

Disassembly of section .fini:

000138dc <.fini>:
   138dc:	push	{r3, lr}
   138e0:	pop	{r3, pc}
