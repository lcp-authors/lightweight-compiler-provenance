
../repos/findutils/locate/locate:     file format elf32-littlearm


Disassembly of section .init:

000114e0 <.init>:
   114e0:	push	{r3, lr}
   114e4:	bl	124b8 <__assert_fail@plt+0xafc>
   114e8:	pop	{r3, pc}

Disassembly of section .plt:

000114ec <pthread_mutex_unlock@plt-0x14>:
   114ec:	push	{lr}		; (str lr, [sp, #-4]!)
   114f0:	ldr	lr, [pc, #4]	; 114fc <pthread_mutex_unlock@plt-0x4>
   114f4:	add	lr, pc, lr
   114f8:	ldr	pc, [lr, #8]!
   114fc:	andeq	r8, r2, r4, lsl #22

00011500 <pthread_mutex_unlock@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #40, 20	; 0x28000
   11508:	ldr	pc, [ip, #2820]!	; 0xb04

0001150c <fdopen@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #40, 20	; 0x28000
   11514:	ldr	pc, [ip, #2812]!	; 0xafc

00011518 <calloc@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #40, 20	; 0x28000
   11520:	ldr	pc, [ip, #2804]!	; 0xaf4

00011524 <wctype@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #40, 20	; 0x28000
   1152c:	ldr	pc, [ip, #2796]!	; 0xaec

00011530 <raise@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #40, 20	; 0x28000
   11538:	ldr	pc, [ip, #2788]!	; 0xae4

0001153c <wcrtomb@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #40, 20	; 0x28000
   11544:	ldr	pc, [ip, #2780]!	; 0xadc

00011548 <iswctype@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #40, 20	; 0x28000
   11550:	ldr	pc, [ip, #2772]!	; 0xad4

00011554 <strcmp@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #40, 20	; 0x28000
   1155c:	ldr	pc, [ip, #2764]!	; 0xacc

00011560 <printf@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #40, 20	; 0x28000
   11568:	ldr	pc, [ip, #2756]!	; 0xac4

0001156c <pthread_mutex_destroy@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #40, 20	; 0x28000
   11574:	ldr	pc, [ip, #2748]!	; 0xabc

00011578 <fflush@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #40, 20	; 0x28000
   11580:	ldr	pc, [ip, #2740]!	; 0xab4

00011584 <wcwidth@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #40, 20	; 0x28000
   1158c:	ldr	pc, [ip, #2732]!	; 0xaac

00011590 <getuid@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #40, 20	; 0x28000
   11598:	ldr	pc, [ip, #2724]!	; 0xaa4

0001159c <memmove@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #40, 20	; 0x28000
   115a4:	ldr	pc, [ip, #2716]!	; 0xa9c

000115a8 <free@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #40, 20	; 0x28000
   115b0:	ldr	pc, [ip, #2708]!	; 0xa94

000115b4 <pthread_mutex_lock@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #40, 20	; 0x28000
   115bc:	ldr	pc, [ip, #2700]!	; 0xa8c

000115c0 <ferror@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #40, 20	; 0x28000
   115c8:	ldr	pc, [ip, #2692]!	; 0xa84

000115cc <strndup@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #40, 20	; 0x28000
   115d4:	ldr	pc, [ip, #2684]!	; 0xa7c

000115d8 <_exit@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #40, 20	; 0x28000
   115e0:	ldr	pc, [ip, #2676]!	; 0xa74

000115e4 <memcpy@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #40, 20	; 0x28000
   115ec:	ldr	pc, [ip, #2668]!	; 0xa6c

000115f0 <tolower@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #40, 20	; 0x28000
   115f8:	ldr	pc, [ip, #2660]!	; 0xa64

000115fc <pthread_mutex_init@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #40, 20	; 0x28000
   11604:	ldr	pc, [ip, #2652]!	; 0xa5c

00011608 <towlower@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #40, 20	; 0x28000
   11610:	ldr	pc, [ip, #2644]!	; 0xa54

00011614 <mbsinit@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #40, 20	; 0x28000
   1161c:	ldr	pc, [ip, #2636]!	; 0xa4c

00011620 <time@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #40, 20	; 0x28000
   11628:	ldr	pc, [ip, #2628]!	; 0xa44

0001162c <memcmp@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #40, 20	; 0x28000
   11634:	ldr	pc, [ip, #2620]!	; 0xa3c

00011638 <dcgettext@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #40, 20	; 0x28000
   11640:	ldr	pc, [ip, #2612]!	; 0xa34

00011644 <realloc@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #40, 20	; 0x28000
   1164c:	ldr	pc, [ip, #2604]!	; 0xa2c

00011650 <textdomain@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #40, 20	; 0x28000
   11658:	ldr	pc, [ip, #2596]!	; 0xa24

0001165c <iswcntrl@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #40, 20	; 0x28000
   11664:	ldr	pc, [ip, #2588]!	; 0xa1c

00011668 <geteuid@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #40, 20	; 0x28000
   11670:	ldr	pc, [ip, #2580]!	; 0xa14

00011674 <iswprint@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #40, 20	; 0x28000
   1167c:	ldr	pc, [ip, #2572]!	; 0xa0c

00011680 <setgroups@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #40, 20	; 0x28000
   11688:	ldr	pc, [ip, #2564]!	; 0xa04

0001168c <__fxstat64@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #40, 20	; 0x28000
   11694:	ldr	pc, [ip, #2556]!	; 0x9fc

00011698 <lseek64@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #40, 20	; 0x28000
   116a0:	ldr	pc, [ip, #2548]!	; 0x9f4

000116a4 <__ctype_get_mb_cur_max@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #40, 20	; 0x28000
   116ac:	ldr	pc, [ip, #2540]!	; 0x9ec

000116b0 <strcpy@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #40, 20	; 0x28000
   116b8:	ldr	pc, [ip, #2532]!	; 0x9e4

000116bc <fread@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #40, 20	; 0x28000
   116c4:	ldr	pc, [ip, #2524]!	; 0x9dc

000116c8 <__fpending@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #40, 20	; 0x28000
   116d0:	ldr	pc, [ip, #2516]!	; 0x9d4

000116d4 <mbrtowc@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #40, 20	; 0x28000
   116dc:	ldr	pc, [ip, #2508]!	; 0x9cc

000116e0 <error@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #40, 20	; 0x28000
   116e8:	ldr	pc, [ip, #2500]!	; 0x9c4

000116ec <fnmatch@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #40, 20	; 0x28000
   116f4:	ldr	pc, [ip, #2492]!	; 0x9bc

000116f8 <open64@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #40, 20	; 0x28000
   11700:	ldr	pc, [ip, #2484]!	; 0x9b4

00011704 <getenv@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #40, 20	; 0x28000
   1170c:	ldr	pc, [ip, #2476]!	; 0x9ac

00011710 <setgid@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #40, 20	; 0x28000
   11718:	ldr	pc, [ip, #2468]!	; 0x9a4

0001171c <malloc@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #40, 20	; 0x28000
   11724:	ldr	pc, [ip, #2460]!	; 0x99c

00011728 <__libc_start_main@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #40, 20	; 0x28000
   11730:	ldr	pc, [ip, #2452]!	; 0x994

00011734 <strftime@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #40, 20	; 0x28000
   1173c:	ldr	pc, [ip, #2444]!	; 0x98c

00011740 <__freading@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #40, 20	; 0x28000
   11748:	ldr	pc, [ip, #2436]!	; 0x984

0001174c <localtime@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #40, 20	; 0x28000
   11754:	ldr	pc, [ip, #2428]!	; 0x97c

00011758 <__ctype_tolower_loc@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #40, 20	; 0x28000
   11760:	ldr	pc, [ip, #2420]!	; 0x974

00011764 <__gmon_start__@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #40, 20	; 0x28000
   1176c:	ldr	pc, [ip, #2412]!	; 0x96c

00011770 <getopt_long@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #40, 20	; 0x28000
   11778:	ldr	pc, [ip, #2404]!	; 0x964

0001177c <__ctype_b_loc@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #40, 20	; 0x28000
   11784:	ldr	pc, [ip, #2396]!	; 0x95c

00011788 <exit@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #40, 20	; 0x28000
   11790:	ldr	pc, [ip, #2388]!	; 0x954

00011794 <feof@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #40, 20	; 0x28000
   1179c:	ldr	pc, [ip, #2380]!	; 0x94c

000117a0 <strtoul@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #40, 20	; 0x28000
   117a8:	ldr	pc, [ip, #2372]!	; 0x944

000117ac <strlen@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #40, 20	; 0x28000
   117b4:	ldr	pc, [ip, #2364]!	; 0x93c

000117b8 <strchr@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #40, 20	; 0x28000
   117c0:	ldr	pc, [ip, #2356]!	; 0x934

000117c4 <fprintf@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #40, 20	; 0x28000
   117cc:	ldr	pc, [ip, #2348]!	; 0x92c

000117d0 <ungetc@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #40, 20	; 0x28000
   117d8:	ldr	pc, [ip, #2340]!	; 0x924

000117dc <__errno_location@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #40, 20	; 0x28000
   117e4:	ldr	pc, [ip, #2332]!	; 0x91c

000117e8 <iswalnum@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #40, 20	; 0x28000
   117f0:	ldr	pc, [ip, #2324]!	; 0x914

000117f4 <strncasecmp@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #40, 20	; 0x28000
   117fc:	ldr	pc, [ip, #2316]!	; 0x90c

00011800 <__cxa_atexit@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #40, 20	; 0x28000
   11808:	ldr	pc, [ip, #2308]!	; 0x904

0001180c <getgid@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #40, 20	; 0x28000
   11814:	ldr	pc, [ip, #2300]!	; 0x8fc

00011818 <memset@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #40, 20	; 0x28000
   11820:	ldr	pc, [ip, #2292]!	; 0x8f4

00011824 <putchar@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #40, 20	; 0x28000
   1182c:	ldr	pc, [ip, #2284]!	; 0x8ec

00011830 <btowc@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #40, 20	; 0x28000
   11838:	ldr	pc, [ip, #2276]!	; 0x8e4

0001183c <fgetc@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #40, 20	; 0x28000
   11844:	ldr	pc, [ip, #2268]!	; 0x8dc

00011848 <fileno@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #40, 20	; 0x28000
   11850:	ldr	pc, [ip, #2260]!	; 0x8d4

00011854 <difftime@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #40, 20	; 0x28000
   1185c:	ldr	pc, [ip, #2252]!	; 0x8cc

00011860 <strtoumax@plt>:
   11860:	add	ip, pc, #0, 12
   11864:	add	ip, ip, #40, 20	; 0x28000
   11868:	ldr	pc, [ip, #2244]!	; 0x8c4

0001186c <memchr@plt>:
   1186c:	add	ip, pc, #0, 12
   11870:	add	ip, ip, #40, 20	; 0x28000
   11874:	ldr	pc, [ip, #2236]!	; 0x8bc

00011878 <fclose@plt>:
   11878:	add	ip, pc, #0, 12
   1187c:	add	ip, ip, #40, 20	; 0x28000
   11880:	ldr	pc, [ip, #2228]!	; 0x8b4

00011884 <strnlen@plt>:
   11884:	add	ip, pc, #0, 12
   11888:	add	ip, ip, #40, 20	; 0x28000
   1188c:	ldr	pc, [ip, #2220]!	; 0x8ac

00011890 <fseeko64@plt>:
   11890:	add	ip, pc, #0, 12
   11894:	add	ip, ip, #40, 20	; 0x28000
   11898:	ldr	pc, [ip, #2212]!	; 0x8a4

0001189c <fcntl64@plt>:
   1189c:	add	ip, pc, #0, 12
   118a0:	add	ip, ip, #40, 20	; 0x28000
   118a4:	ldr	pc, [ip, #2204]!	; 0x89c

000118a8 <setlocale@plt>:
   118a8:	add	ip, pc, #0, 12
   118ac:	add	ip, ip, #40, 20	; 0x28000
   118b0:	ldr	pc, [ip, #2196]!	; 0x894

000118b4 <toupper@plt>:
   118b4:	add	ip, pc, #0, 12
   118b8:	add	ip, ip, #40, 20	; 0x28000
   118bc:	ldr	pc, [ip, #2188]!	; 0x88c

000118c0 <strrchr@plt>:
   118c0:	add	ip, pc, #0, 12
   118c4:	add	ip, ip, #40, 20	; 0x28000
   118c8:	ldr	pc, [ip, #2180]!	; 0x884

000118cc <nl_langinfo@plt>:
   118cc:	add	ip, pc, #0, 12
   118d0:	add	ip, ip, #40, 20	; 0x28000
   118d4:	ldr	pc, [ip, #2172]!	; 0x87c

000118d8 <fputc@plt>:
   118d8:	add	ip, pc, #0, 12
   118dc:	add	ip, ip, #40, 20	; 0x28000
   118e0:	ldr	pc, [ip, #2164]!	; 0x874

000118e4 <setuid@plt>:
   118e4:	add	ip, pc, #0, 12
   118e8:	add	ip, ip, #40, 20	; 0x28000
   118ec:	ldr	pc, [ip, #2156]!	; 0x86c

000118f0 <localeconv@plt>:
   118f0:	add	ip, pc, #0, 12
   118f4:	add	ip, ip, #40, 20	; 0x28000
   118f8:	ldr	pc, [ip, #2148]!	; 0x864

000118fc <clearerr@plt>:
   118fc:	add	ip, pc, #0, 12
   11900:	add	ip, ip, #40, 20	; 0x28000
   11904:	ldr	pc, [ip, #2140]!	; 0x85c

00011908 <sprintf@plt>:
   11908:	add	ip, pc, #0, 12
   1190c:	add	ip, ip, #40, 20	; 0x28000
   11910:	ldr	pc, [ip, #2132]!	; 0x854

00011914 <putc@plt>:
   11914:	add	ip, pc, #0, 12
   11918:	add	ip, ip, #40, 20	; 0x28000
   1191c:	ldr	pc, [ip, #2124]!	; 0x84c

00011920 <strpbrk@plt>:
   11920:	add	ip, pc, #0, 12
   11924:	add	ip, ip, #40, 20	; 0x28000
   11928:	ldr	pc, [ip, #2116]!	; 0x844

0001192c <bindtextdomain@plt>:
   1192c:	add	ip, pc, #0, 12
   11930:	add	ip, ip, #40, 20	; 0x28000
   11934:	ldr	pc, [ip, #2108]!	; 0x83c

00011938 <getdelim@plt>:
   11938:	add	ip, pc, #0, 12
   1193c:	add	ip, ip, #40, 20	; 0x28000
   11940:	ldr	pc, [ip, #2100]!	; 0x834

00011944 <__xstat64@plt>:
   11944:	add	ip, pc, #0, 12
   11948:	add	ip, ip, #40, 20	; 0x28000
   1194c:	ldr	pc, [ip, #2092]!	; 0x82c

00011950 <isatty@plt>:
   11950:	add	ip, pc, #0, 12
   11954:	add	ip, ip, #40, 20	; 0x28000
   11958:	ldr	pc, [ip, #2084]!	; 0x824

0001195c <towupper@plt>:
   1195c:	add	ip, pc, #0, 12
   11960:	add	ip, ip, #40, 20	; 0x28000
   11964:	ldr	pc, [ip, #2076]!	; 0x81c

00011968 <fputs@plt>:
   11968:	add	ip, pc, #0, 12
   1196c:	add	ip, ip, #40, 20	; 0x28000
   11970:	ldr	pc, [ip, #2068]!	; 0x814

00011974 <strncmp@plt>:
   11974:	add	ip, pc, #0, 12
   11978:	add	ip, ip, #40, 20	; 0x28000
   1197c:	ldr	pc, [ip, #2060]!	; 0x80c

00011980 <abort@plt>:
   11980:	add	ip, pc, #0, 12
   11984:	add	ip, ip, #40, 20	; 0x28000
   11988:	ldr	pc, [ip, #2052]!	; 0x804

0001198c <getc@plt>:
   1198c:	add	ip, pc, #0, 12
   11990:	add	ip, ip, #40, 20	; 0x28000
   11994:	ldr	pc, [ip, #2044]!	; 0x7fc

00011998 <close@plt>:
   11998:	add	ip, pc, #0, 12
   1199c:	add	ip, ip, #40, 20	; 0x28000
   119a0:	ldr	pc, [ip, #2036]!	; 0x7f4

000119a4 <__lxstat64@plt>:
   119a4:	add	ip, pc, #0, 12
   119a8:	add	ip, ip, #40, 20	; 0x28000
   119ac:	ldr	pc, [ip, #2028]!	; 0x7ec

000119b0 <dcngettext@plt>:
   119b0:	add	ip, pc, #0, 12
   119b4:	add	ip, ip, #40, 20	; 0x28000
   119b8:	ldr	pc, [ip, #2020]!	; 0x7e4

000119bc <__assert_fail@plt>:
   119bc:	add	ip, pc, #0, 12
   119c0:	add	ip, ip, #40, 20	; 0x28000
   119c4:	ldr	pc, [ip, #2012]!	; 0x7dc

Disassembly of section .text:

000119c8 <.text>:
   119c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119cc:	vpush	{d8-d9}
   119d0:	ldr	r3, [pc, #2296]	; 122d0 <__assert_fail@plt+0x914>
   119d4:	sub	sp, sp, #260	; 0x104
   119d8:	add	r5, sp, #152	; 0x98
   119dc:	str	r0, [sp, #64]	; 0x40
   119e0:	str	r1, [sp, #80]	; 0x50
   119e4:	ldm	r3, {r0, r1, r2}
   119e8:	mov	r6, r5
   119ec:	stm	r5, {r0, r1, r2}
   119f0:	ldr	r4, [r6], #4
   119f4:	cmp	r4, #0
   119f8:	mvneq	r3, #0
   119fc:	streq	r3, [sp, #52]	; 0x34
   11a00:	beq	11a20 <__assert_fail@plt+0x64>
   11a04:	mov	r0, r4
   11a08:	bl	12648 <__assert_fail@plt+0xc8c>
   11a0c:	subs	r3, r0, #0
   11a10:	str	r3, [sp, #52]	; 0x34
   11a14:	blt	119f0 <__assert_fail@plt+0x34>
   11a18:	ldr	r3, [pc, #2376]	; 12368 <__assert_fail@plt+0x9ac>
   11a1c:	str	r4, [r3, #108]	; 0x6c
   11a20:	bl	11668 <geteuid@plt>
   11a24:	mov	r7, r0
   11a28:	bl	11590 <getuid@plt>
   11a2c:	mov	r4, r0
   11a30:	bl	1180c <getgid@plt>
   11a34:	cmp	r7, #0
   11a38:	mov	r6, r0
   11a3c:	bne	11a98 <__assert_fail@plt+0xdc>
   11a40:	str	r0, [sp, #152]	; 0x98
   11a44:	mov	r1, r5
   11a48:	mov	r0, #1
   11a4c:	bl	11680 <setgroups@plt>
   11a50:	cmp	r0, #0
   11a54:	beq	11a98 <__assert_fail@plt+0xdc>
   11a58:	ldr	r1, [pc, #2164]	; 122d4 <__assert_fail@plt+0x918>
   11a5c:	mov	r2, #5
   11a60:	mov	r0, r7
   11a64:	bl	11638 <dcgettext@plt>
   11a68:	mov	r4, r0
   11a6c:	bl	117dc <__errno_location@plt>
   11a70:	mov	r2, r4
   11a74:	mov	r1, #8
   11a78:	ldr	r5, [r0]
   11a7c:	mov	r0, #0
   11a80:	bl	18fc0 <__assert_fail@plt+0x7604>
   11a84:	ldr	r2, [pc, #2124]	; 122d8 <__assert_fail@plt+0x91c>
   11a88:	mov	r3, r0
   11a8c:	mov	r1, r5
   11a90:	mov	r0, #1
   11a94:	bl	116e0 <error@plt>
   11a98:	cmp	r7, r4
   11a9c:	cmpne	r4, #0
   11aa0:	moveq	r4, #1
   11aa4:	movne	r4, #0
   11aa8:	beq	11afc <__assert_fail@plt+0x140>
   11aac:	bl	117dc <__errno_location@plt>
   11ab0:	str	r4, [r0]
   11ab4:	mov	r5, r0
   11ab8:	bl	11590 <getuid@plt>
   11abc:	bl	118e4 <setuid@plt>
   11ac0:	cmp	r0, #0
   11ac4:	beq	11ad8 <__assert_fail@plt+0x11c>
   11ac8:	ldr	r1, [pc, #2060]	; 122dc <__assert_fail@plt+0x920>
   11acc:	mov	r2, #5
   11ad0:	mov	r0, r4
   11ad4:	b	11a64 <__assert_fail@plt+0xa8>
   11ad8:	bl	118e4 <setuid@plt>
   11adc:	subs	r7, r0, #0
   11ae0:	bne	11afc <__assert_fail@plt+0x140>
   11ae4:	mov	r2, #5
   11ae8:	ldr	r1, [pc, #2032]	; 122e0 <__assert_fail@plt+0x924>
   11aec:	bl	11638 <dcgettext@plt>
   11af0:	str	r7, [r5]
   11af4:	mov	r4, r0
   11af8:	b	11a6c <__assert_fail@plt+0xb0>
   11afc:	bl	117dc <__errno_location@plt>
   11b00:	mov	r4, #0
   11b04:	str	r4, [r0]
   11b08:	mov	r9, r0
   11b0c:	mov	r0, r6
   11b10:	bl	11710 <setgid@plt>
   11b14:	cmp	r0, r4
   11b18:	movne	r2, #5
   11b1c:	ldrne	r1, [pc, #1984]	; 122e4 <__assert_fail@plt+0x928>
   11b20:	bne	11ad0 <__assert_fail@plt+0x114>
   11b24:	ldr	r3, [sp, #80]	; 0x50
   11b28:	ldr	r0, [r3]
   11b2c:	cmp	r0, #0
   11b30:	ldreq	r0, [pc, #1968]	; 122e8 <__assert_fail@plt+0x92c>
   11b34:	bl	17be0 <__assert_fail@plt+0x6224>
   11b38:	ldr	r1, [pc, #1964]	; 122ec <__assert_fail@plt+0x930>
   11b3c:	mov	r0, #6
   11b40:	bl	118a8 <setlocale@plt>
   11b44:	ldr	r1, [pc, #1956]	; 122f0 <__assert_fail@plt+0x934>
   11b48:	ldr	r0, [pc, #1956]	; 122f4 <__assert_fail@plt+0x938>
   11b4c:	bl	1192c <bindtextdomain@plt>
   11b50:	ldr	r0, [pc, #1948]	; 122f4 <__assert_fail@plt+0x938>
   11b54:	bl	11650 <textdomain@plt>
   11b58:	mov	r0, #0
   11b5c:	bl	18cac <__assert_fail@plt+0x72f0>
   11b60:	ldr	r5, [pc, #2048]	; 12368 <__assert_fail@plt+0x9ac>
   11b64:	str	r0, [r5, #4]
   11b68:	ldr	r0, [pc, #1928]	; 122f8 <__assert_fail@plt+0x93c>
   11b6c:	bl	27824 <__assert_fail@plt+0x15e68>
   11b70:	cmp	r0, #0
   11b74:	beq	11b9c <__assert_fail@plt+0x1e0>
   11b78:	mov	r2, #5
   11b7c:	ldr	r1, [pc, #1912]	; 122fc <__assert_fail@plt+0x940>
   11b80:	mov	r0, #0
   11b84:	ldr	r4, [r9]
   11b88:	bl	11638 <dcgettext@plt>
   11b8c:	mov	r1, r4
   11b90:	mov	r2, r0
   11b94:	mov	r0, #1
   11b98:	bl	116e0 <error@plt>
   11b9c:	ldr	r0, [pc, #1884]	; 12300 <__assert_fail@plt+0x944>
   11ba0:	bl	27824 <__assert_fail@plt+0x15e68>
   11ba4:	subs	sl, r0, #0
   11ba8:	bne	11b78 <__assert_fail@plt+0x1bc>
   11bac:	mov	r2, #0
   11bb0:	mov	r3, #0
   11bb4:	ldr	r0, [pc, #1864]	; 12304 <__assert_fail@plt+0x948>
   11bb8:	strd	r2, [r5, #88]	; 0x58
   11bbc:	strd	r2, [r5, #96]	; 0x60
   11bc0:	mov	r3, #1
   11bc4:	strb	r3, [r5, #80]	; 0x50
   11bc8:	bl	11704 <getenv@plt>
   11bcc:	ldr	r6, [pc, #1844]	; 12308 <__assert_fail@plt+0x94c>
   11bd0:	add	r7, sp, #144	; 0x90
   11bd4:	str	sl, [r5, #20]
   11bd8:	str	sl, [sp, #100]	; 0x64
   11bdc:	str	sl, [sp, #60]	; 0x3c
   11be0:	str	sl, [sp, #108]	; 0x6c
   11be4:	str	sl, [sp, #104]	; 0x68
   11be8:	str	sl, [sp, #56]	; 0x38
   11bec:	str	sl, [sp, #72]	; 0x48
   11bf0:	str	sl, [sp, #68]	; 0x44
   11bf4:	str	sl, [sp, #76]	; 0x4c
   11bf8:	str	sl, [sp, #96]	; 0x60
   11bfc:	mov	fp, r0
   11c00:	mvn	r3, #0
   11c04:	str	r3, [sp, #144]	; 0x90
   11c08:	str	r7, [sp]
   11c0c:	ldr	r3, [pc, #1784]	; 1230c <__assert_fail@plt+0x950>
   11c10:	ldr	r2, [pc, #1784]	; 12310 <__assert_fail@plt+0x954>
   11c14:	ldr	r1, [sp, #80]	; 0x50
   11c18:	ldr	r0, [sp, #64]	; 0x40
   11c1c:	bl	11770 <getopt_long@plt>
   11c20:	cmn	r0, #1
   11c24:	mov	r4, r0
   11c28:	beq	11f28 <__assert_fail@plt+0x56c>
   11c2c:	cmp	r0, #101	; 0x65
   11c30:	beq	11dc4 <__assert_fail@plt+0x408>
   11c34:	bgt	11cd4 <__assert_fail@plt+0x318>
   11c38:	cmp	r0, #76	; 0x4c
   11c3c:	beq	11ec0 <__assert_fail@plt+0x504>
   11c40:	bgt	11c7c <__assert_fail@plt+0x2c0>
   11c44:	cmp	r0, #65	; 0x41
   11c48:	beq	11f1c <__assert_fail@plt+0x560>
   11c4c:	bgt	11c60 <__assert_fail@plt+0x2a4>
   11c50:	cmp	r0, #48	; 0x30
   11c54:	beq	11da4 <__assert_fail@plt+0x3e8>
   11c58:	mov	r0, #1
   11c5c:	b	11dd4 <__assert_fail@plt+0x418>
   11c60:	cmp	r0, #69	; 0x45
   11c64:	moveq	r3, #2
   11c68:	beq	11dc8 <__assert_fail@plt+0x40c>
   11c6c:	cmp	r0, #72	; 0x48
   11c70:	bne	11c58 <__assert_fail@plt+0x29c>
   11c74:	mov	r2, #0
   11c78:	b	11ec4 <__assert_fail@plt+0x508>
   11c7c:	cmp	r0, #98	; 0x62
   11c80:	beq	11d98 <__assert_fail@plt+0x3dc>
   11c84:	bgt	11ca4 <__assert_fail@plt+0x2e8>
   11c88:	cmp	r0, #80	; 0x50
   11c8c:	beq	11c74 <__assert_fail@plt+0x2b8>
   11c90:	cmp	r0, #83	; 0x53
   11c94:	bne	11c58 <__assert_fail@plt+0x29c>
   11c98:	mov	r3, #1
   11c9c:	str	r3, [sp, #60]	; 0x3c
   11ca0:	b	11c00 <__assert_fail@plt+0x244>
   11ca4:	cmp	r0, #99	; 0x63
   11ca8:	beq	11db8 <__assert_fail@plt+0x3fc>
   11cac:	cmp	r0, #100	; 0x64
   11cb0:	bne	11c58 <__assert_fail@plt+0x29c>
   11cb4:	ldr	fp, [r6]
   11cb8:	cmp	fp, #0
   11cbc:	bne	11c00 <__assert_fail@plt+0x244>
   11cc0:	ldr	r3, [pc, #1612]	; 12314 <__assert_fail@plt+0x958>
   11cc4:	ldr	r2, [pc, #1612]	; 12318 <__assert_fail@plt+0x95c>
   11cc8:	ldr	r1, [pc, #1612]	; 1231c <__assert_fail@plt+0x960>
   11ccc:	ldr	r0, [pc, #1612]	; 12320 <__assert_fail@plt+0x964>
   11cd0:	bl	119bc <__assert_fail@plt>
   11cd4:	cmp	r0, #114	; 0x72
   11cd8:	beq	11ea4 <__assert_fail@plt+0x4e8>
   11cdc:	bgt	11d24 <__assert_fail@plt+0x368>
   11ce0:	cmp	r0, #108	; 0x6c
   11ce4:	beq	11ed0 <__assert_fail@plt+0x514>
   11ce8:	bgt	11d08 <__assert_fail@plt+0x34c>
   11cec:	cmp	r0, #104	; 0x68
   11cf0:	beq	11dd0 <__assert_fail@plt+0x414>
   11cf4:	cmp	r0, #105	; 0x69
   11cf8:	bne	11c58 <__assert_fail@plt+0x29c>
   11cfc:	mov	r3, #1
   11d00:	str	r3, [sp, #96]	; 0x60
   11d04:	b	11c00 <__assert_fail@plt+0x244>
   11d08:	cmp	r0, #109	; 0x6d
   11d0c:	beq	11c00 <__assert_fail@plt+0x244>
   11d10:	cmp	r0, #112	; 0x70
   11d14:	bne	11c58 <__assert_fail@plt+0x29c>
   11d18:	mov	r3, #1
   11d1c:	str	r3, [sp, #76]	; 0x4c
   11d20:	b	11c00 <__assert_fail@plt+0x244>
   11d24:	cmp	r0, #119	; 0x77
   11d28:	beq	11e9c <__assert_fail@plt+0x4e0>
   11d2c:	bgt	11d58 <__assert_fail@plt+0x39c>
   11d30:	cmp	r0, #115	; 0x73
   11d34:	beq	11c00 <__assert_fail@plt+0x244>
   11d38:	cmp	r0, #118	; 0x76
   11d3c:	bne	11c58 <__assert_fail@plt+0x29c>
   11d40:	ldr	r0, [pc, #1440]	; 122e8 <__assert_fail@plt+0x92c>
   11d44:	bl	13b80 <__assert_fail@plt+0x21c4>
   11d48:	mov	r0, sl
   11d4c:	add	sp, sp, #260	; 0x104
   11d50:	vpop	{d8-d9}
   11d54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d58:	cmp	r0, #256	; 0x100
   11d5c:	beq	11eb0 <__assert_fail@plt+0x4f4>
   11d60:	ldr	r3, [pc, #1468]	; 12324 <__assert_fail@plt+0x968>
   11d64:	cmp	r0, r3
   11d68:	bne	11c58 <__assert_fail@plt+0x29c>
   11d6c:	ldr	r4, [r6]
   11d70:	ldrb	r3, [r4]
   11d74:	cmp	r3, #0
   11d78:	bne	11dd8 <__assert_fail@plt+0x41c>
   11d7c:	mov	r2, #5
   11d80:	ldr	r1, [pc, #1440]	; 12328 <__assert_fail@plt+0x96c>
   11d84:	mov	r0, #0
   11d88:	bl	11638 <dcgettext@plt>
   11d8c:	mov	r1, #0
   11d90:	mov	r2, r0
   11d94:	b	11b94 <__assert_fail@plt+0x1d8>
   11d98:	mov	r3, #1
   11d9c:	str	r3, [sp, #72]	; 0x48
   11da0:	b	11c00 <__assert_fail@plt+0x244>
   11da4:	ldr	r2, [pc, #1408]	; 1232c <__assert_fail@plt+0x970>
   11da8:	mov	r3, #0
   11dac:	strb	r3, [r5, #80]	; 0x50
   11db0:	str	r3, [r2]
   11db4:	b	11c00 <__assert_fail@plt+0x244>
   11db8:	mov	r3, #1
   11dbc:	str	r3, [sp, #68]	; 0x44
   11dc0:	b	11c00 <__assert_fail@plt+0x244>
   11dc4:	mov	r3, #1
   11dc8:	str	r3, [r5, #20]
   11dcc:	b	11c00 <__assert_fail@plt+0x244>
   11dd0:	mov	r0, #0
   11dd4:	bl	12694 <__assert_fail@plt+0xcd8>
   11dd8:	mov	r3, #0
   11ddc:	str	r3, [r9]
   11de0:	mov	r2, #10
   11de4:	add	r1, sp, #152	; 0x98
   11de8:	mov	r0, r4
   11dec:	bl	117a0 <strtoul@plt>
   11df0:	cmn	r0, #1
   11df4:	bne	11e38 <__assert_fail@plt+0x47c>
   11df8:	ldr	r3, [r9]
   11dfc:	cmp	r3, #34	; 0x22
   11e00:	bne	11e4c <__assert_fail@plt+0x490>
   11e04:	mov	r2, #5
   11e08:	ldr	r1, [pc, #1312]	; 12330 <__assert_fail@plt+0x974>
   11e0c:	mov	r0, #0
   11e10:	ldr	r5, [r9]
   11e14:	bl	11638 <dcgettext@plt>
   11e18:	mov	r2, r4
   11e1c:	mov	r1, #8
   11e20:	mov	r6, r0
   11e24:	mov	r0, #0
   11e28:	bl	18fc0 <__assert_fail@plt+0x7604>
   11e2c:	mov	r2, r6
   11e30:	mov	r3, r0
   11e34:	b	11a8c <__assert_fail@plt+0xd0>
   11e38:	cmp	r0, #0
   11e3c:	bne	11e4c <__assert_fail@plt+0x490>
   11e40:	ldr	r3, [r9]
   11e44:	cmp	r3, #22
   11e48:	b	11e00 <__assert_fail@plt+0x444>
   11e4c:	ldr	r3, [sp, #152]	; 0x98
   11e50:	ldrb	r3, [r3]
   11e54:	cmp	r3, #0
   11e58:	beq	11e90 <__assert_fail@plt+0x4d4>
   11e5c:	mov	r2, #5
   11e60:	ldr	r1, [pc, #1224]	; 12330 <__assert_fail@plt+0x974>
   11e64:	mov	r0, #0
   11e68:	bl	11638 <dcgettext@plt>
   11e6c:	mov	r2, r4
   11e70:	mov	r1, #8
   11e74:	mov	r5, r0
   11e78:	mov	r0, #0
   11e7c:	bl	18fc0 <__assert_fail@plt+0x7604>
   11e80:	mov	r2, r5
   11e84:	mov	r1, #0
   11e88:	mov	r3, r0
   11e8c:	b	11a90 <__assert_fail@plt+0xd4>
   11e90:	ldr	r3, [pc, #1172]	; 1232c <__assert_fail@plt+0x970>
   11e94:	str	r0, [r3, #8]
   11e98:	b	11c00 <__assert_fail@plt+0x244>
   11e9c:	str	sl, [sp, #72]	; 0x48
   11ea0:	b	11c00 <__assert_fail@plt+0x244>
   11ea4:	mov	r3, #1
   11ea8:	str	r3, [sp, #104]	; 0x68
   11eac:	b	11c00 <__assert_fail@plt+0x244>
   11eb0:	ldr	r0, [r6]
   11eb4:	bl	13e68 <__assert_fail@plt+0x24ac>
   11eb8:	str	r0, [sp, #108]	; 0x6c
   11ebc:	b	11c00 <__assert_fail@plt+0x244>
   11ec0:	mov	r2, #1
   11ec4:	ldr	r3, [pc, #1120]	; 1232c <__assert_fail@plt+0x970>
   11ec8:	str	r2, [r3, #4]
   11ecc:	b	11c00 <__assert_fail@plt+0x244>
   11ed0:	ldr	r0, [r6]
   11ed4:	add	r1, sp, #256	; 0x100
   11ed8:	mov	r3, #0
   11edc:	str	r0, [r1, #-104]!	; 0xffffff98
   11ee0:	mov	r2, #10
   11ee4:	str	r3, [sp]
   11ee8:	ldr	r3, [pc, #1092]	; 12334 <__assert_fail@plt+0x978>
   11eec:	bl	19d10 <__assert_fail@plt+0x8354>
   11ef0:	cmp	r0, #0
   11ef4:	beq	11f10 <__assert_fail@plt+0x554>
   11ef8:	ldr	r3, [r6]
   11efc:	mov	r2, r4
   11f00:	str	r3, [sp]
   11f04:	ldr	r1, [sp, #144]	; 0x90
   11f08:	ldr	r3, [pc, #1020]	; 1230c <__assert_fail@plt+0x950>
   11f0c:	bl	19bd4 <__assert_fail@plt+0x8218>
   11f10:	mov	r3, #1
   11f14:	str	r3, [sp, #56]	; 0x38
   11f18:	b	11c00 <__assert_fail@plt+0x244>
   11f1c:	mov	r3, #1
   11f20:	str	r3, [sp, #100]	; 0x64
   11f24:	b	11c00 <__assert_fail@plt+0x244>
   11f28:	cmp	fp, #0
   11f2c:	beq	11f48 <__assert_fail@plt+0x58c>
   11f30:	ldr	r3, [sp, #52]	; 0x34
   11f34:	cmn	r3, #1
   11f38:	beq	11f48 <__assert_fail@plt+0x58c>
   11f3c:	mov	r0, r3
   11f40:	bl	11998 <close@plt>
   11f44:	str	r4, [sp, #52]	; 0x34
   11f48:	ldr	r3, [sp, #68]	; 0x44
   11f4c:	ldr	r2, [sp, #60]	; 0x3c
   11f50:	orrs	r5, r3, r2
   11f54:	beq	12064 <__assert_fail@plt+0x6a8>
   11f58:	cmp	r2, #0
   11f5c:	beq	11f7c <__assert_fail@plt+0x5c0>
   11f60:	ldr	r3, [pc, #1012]	; 1235c <__assert_fail@plt+0x9a0>
   11f64:	ldr	r1, [sp, #64]	; 0x40
   11f68:	ldr	r2, [sp, #56]	; 0x38
   11f6c:	ldr	r3, [r3]
   11f70:	cmp	r1, r3
   11f74:	moveq	r2, #0
   11f78:	str	r2, [sp, #56]	; 0x38
   11f7c:	mov	r0, #1
   11f80:	bl	11950 <isatty@plt>
   11f84:	ldr	r3, [pc, #988]	; 12368 <__assert_fail@plt+0x9ac>
   11f88:	cmp	r0, #1
   11f8c:	movne	r2, #0
   11f90:	strbeq	r0, [r3, #12]
   11f94:	strbne	r2, [r3, #12]
   11f98:	cmp	fp, #0
   11f9c:	beq	11fbc <__assert_fail@plt+0x600>
   11fa0:	add	r3, sp, #136	; 0x88
   11fa4:	str	r3, [sp]
   11fa8:	mov	r2, #1
   11fac:	add	r3, sp, #132	; 0x84
   11fb0:	ldr	r1, [pc, #936]	; 12360 <__assert_fail@plt+0x9a4>
   11fb4:	mov	r0, fp
   11fb8:	bl	14040 <__assert_fail@plt+0x2684>
   11fbc:	vldr	d9, [pc, #772]	; 122c8 <__assert_fail@plt+0x90c>
   11fc0:	mov	r3, #0
   11fc4:	mov	r7, r3
   11fc8:	str	r3, [sp, #84]	; 0x54
   11fcc:	ldr	r3, [sp, #56]	; 0x38
   11fd0:	ldr	ip, [pc, #912]	; 12368 <__assert_fail@plt+0x9ac>
   11fd4:	cmp	r3, #0
   11fd8:	beq	11ff0 <__assert_fail@plt+0x634>
   11fdc:	ldrd	r0, [ip, #88]	; 0x58
   11fe0:	ldrd	r2, [ip, #96]	; 0x60
   11fe4:	cmp	r1, r3
   11fe8:	cmpeq	r0, r2
   11fec:	bls	12434 <__assert_fail@plt+0xa78>
   11ff0:	mov	r2, #0
   11ff4:	mov	r3, #0
   11ff8:	cmp	fp, #0
   11ffc:	strd	r2, [ip, #72]	; 0x48
   12000:	strd	r2, [ip, #64]	; 0x40
   12004:	strd	r2, [ip, #56]	; 0x38
   12008:	strd	r2, [ip, #48]	; 0x30
   1200c:	strd	r2, [ip, #40]	; 0x28
   12010:	strd	r2, [ip, #32]
   12014:	beq	1210c <__assert_fail@plt+0x750>
   12018:	ldr	r1, [sp, #136]	; 0x88
   1201c:	cmp	r1, #1
   12020:	bne	120a4 <__assert_fail@plt+0x6e8>
   12024:	ldr	r3, [sp, #132]	; 0x84
   12028:	ldrb	r3, [fp, r3]
   1202c:	cmp	r3, #45	; 0x2d
   12030:	bne	12104 <__assert_fail@plt+0x748>
   12034:	ldr	r3, [sp, #84]	; 0x54
   12038:	cmp	r3, #0
   1203c:	beq	12198 <__assert_fail@plt+0x7dc>
   12040:	mov	r2, #5
   12044:	ldr	r1, [pc, #748]	; 12338 <__assert_fail@plt+0x97c>
   12048:	mov	r0, #0
   1204c:	bl	11638 <dcgettext@plt>
   12050:	mov	r1, #0
   12054:	mov	r2, r0
   12058:	mov	r0, r1
   1205c:	bl	116e0 <error@plt>
   12060:	b	11d48 <__assert_fail@plt+0x38c>
   12064:	ldr	r3, [pc, #752]	; 1235c <__assert_fail@plt+0x9a0>
   12068:	ldr	r2, [sp, #64]	; 0x40
   1206c:	ldr	r3, [r3]
   12070:	cmp	r2, r3
   12074:	movne	r3, #1
   12078:	strne	r3, [sp, #76]	; 0x4c
   1207c:	bne	11f7c <__assert_fail@plt+0x5c0>
   12080:	mov	r2, #5
   12084:	ldr	r1, [pc, #688]	; 1233c <__assert_fail@plt+0x980>
   12088:	mov	r0, r5
   1208c:	bl	11638 <dcgettext@plt>
   12090:	mov	r1, r5
   12094:	mov	r2, r0
   12098:	mov	r0, r5
   1209c:	bl	116e0 <error@plt>
   120a0:	b	11c58 <__assert_fail@plt+0x29c>
   120a4:	cmp	r1, #0
   120a8:	ldreq	r6, [pc, #656]	; 12340 <__assert_fail@plt+0x984>
   120ac:	moveq	r5, #0
   120b0:	beq	120c8 <__assert_fail@plt+0x70c>
   120b4:	ldr	r0, [sp, #132]	; 0x84
   120b8:	add	r0, fp, r0
   120bc:	bl	115cc <strndup@plt>
   120c0:	mov	r5, r0
   120c4:	mov	r6, r0
   120c8:	mov	r0, r6
   120cc:	bl	12648 <__assert_fail@plt+0xc8c>
   120d0:	subs	r8, r0, #0
   120d4:	bge	12128 <__assert_fail@plt+0x76c>
   120d8:	ldr	r4, [r9]
   120dc:	mov	r2, r6
   120e0:	mov	r1, #8
   120e4:	mov	r0, #0
   120e8:	bl	18fc0 <__assert_fail@plt+0x7604>
   120ec:	ldr	r2, [pc, #484]	; 122d8 <__assert_fail@plt+0x91c>
   120f0:	mov	r1, r4
   120f4:	mov	r3, r0
   120f8:	mov	r0, #0
   120fc:	bl	116e0 <error@plt>
   12100:	b	11d48 <__assert_fail@plt+0x38c>
   12104:	cmp	r3, #46	; 0x2e
   12108:	b	120a8 <__assert_fail@plt+0x6ec>
   1210c:	ldr	r3, [sp, #52]	; 0x34
   12110:	cmn	r3, #1
   12114:	beq	12434 <__assert_fail@plt+0xa78>
   12118:	ldr	r6, [ip, #108]	; 0x6c
   1211c:	mov	r8, r3
   12120:	str	r4, [sp, #52]	; 0x34
   12124:	mov	r5, #0
   12128:	add	r1, sp, #152	; 0x98
   1212c:	mov	r0, r8
   12130:	bl	2784c <__assert_fail@plt+0x15e90>
   12134:	subs	r7, r0, #0
   12138:	beq	121a8 <__assert_fail@plt+0x7ec>
   1213c:	mov	r2, r6
   12140:	mov	r1, #8
   12144:	mov	r0, #0
   12148:	ldr	r7, [r9]
   1214c:	bl	18fc0 <__assert_fail@plt+0x7604>
   12150:	ldr	r2, [pc, #384]	; 122d8 <__assert_fail@plt+0x91c>
   12154:	mov	r1, r7
   12158:	mov	r7, sl
   1215c:	mov	r3, r0
   12160:	mov	r0, #0
   12164:	bl	116e0 <error@plt>
   12168:	mov	r2, #0
   1216c:	mov	r3, #0
   12170:	strd	r2, [sp, #88]	; 0x58
   12174:	mov	r0, r8
   12178:	ldr	r1, [pc, #452]	; 12344 <__assert_fail@plt+0x988>
   1217c:	bl	1150c <fdopen@plt>
   12180:	subs	r8, r0, #0
   12184:	bne	1236c <__assert_fail@plt+0x9b0>
   12188:	ldr	r4, [r9]
   1218c:	mov	r2, r6
   12190:	mov	r1, #8
   12194:	b	120e8 <__assert_fail@plt+0x72c>
   12198:	mov	r8, sl
   1219c:	str	r1, [sp, #84]	; 0x54
   121a0:	ldr	r6, [pc, #416]	; 12348 <__assert_fail@plt+0x98c>
   121a4:	b	12124 <__assert_fail@plt+0x768>
   121a8:	ldrd	r2, [sp, #200]	; 0xc8
   121ac:	add	r0, sp, #140	; 0x8c
   121b0:	strd	r2, [sp, #88]	; 0x58
   121b4:	ldr	r3, [sp, #232]	; 0xe8
   121b8:	str	r3, [sp, #144]	; 0x90
   121bc:	ldr	r3, [sp, #236]	; 0xec
   121c0:	str	r3, [sp, #148]	; 0x94
   121c4:	bl	11620 <time@plt>
   121c8:	cmn	r0, #1
   121cc:	bne	12204 <__assert_fail@plt+0x848>
   121d0:	ldr	r3, [r9]
   121d4:	mov	r2, #5
   121d8:	ldr	r1, [pc, #364]	; 1234c <__assert_fail@plt+0x990>
   121dc:	mov	r0, r7
   121e0:	str	r3, [sp, #112]	; 0x70
   121e4:	bl	11638 <dcgettext@plt>
   121e8:	ldr	r3, [sp, #112]	; 0x70
   121ec:	mov	r1, r3
   121f0:	mov	r2, r0
   121f4:	mov	r0, r7
   121f8:	bl	116e0 <error@plt>
   121fc:	mov	r7, #1
   12200:	b	12174 <__assert_fail@plt+0x7b8>
   12204:	ldr	r1, [sp, #232]	; 0xe8
   12208:	ldr	r0, [sp, #140]	; 0x8c
   1220c:	bl	11854 <difftime@plt>
   12210:	ldr	r3, [pc, #276]	; 1232c <__assert_fail@plt+0x970>
   12214:	ldr	r2, [r3, #8]
   12218:	ldr	r3, [pc, #304]	; 12350 <__assert_fail@plt+0x994>
   1221c:	mul	r3, r3, r2
   12220:	vmov	s15, r3
   12224:	vcvt.f64.u32	d7, s15
   12228:	vcmpe.f64	d0, d7
   1222c:	vmov.f64	d8, d0
   12230:	vmrs	APSR_nzcv, fpscr
   12234:	ble	121fc <__assert_fail@plt+0x840>
   12238:	mov	r2, #5
   1223c:	ldr	r1, [pc, #272]	; 12354 <__assert_fail@plt+0x998>
   12240:	mov	r0, r7
   12244:	bl	11638 <dcgettext@plt>
   12248:	mov	r2, r6
   1224c:	mov	r1, #8
   12250:	str	r0, [sp, #112]	; 0x70
   12254:	mov	r0, r7
   12258:	bl	18fc0 <__assert_fail@plt+0x7604>
   1225c:	ldr	r3, [pc, #200]	; 1232c <__assert_fail@plt+0x970>
   12260:	mov	r2, #5
   12264:	ldr	r1, [pc, #236]	; 12358 <__assert_fail@plt+0x99c>
   12268:	ldr	r3, [r3, #8]
   1226c:	str	r3, [sp, #116]	; 0x74
   12270:	str	r0, [sp, #124]	; 0x7c
   12274:	mov	r0, r7
   12278:	bl	11638 <dcgettext@plt>
   1227c:	mov	r2, #5
   12280:	ldr	r1, [pc, #208]	; 12358 <__assert_fail@plt+0x99c>
   12284:	str	r0, [sp, #120]	; 0x78
   12288:	mov	r0, r7
   1228c:	bl	11638 <dcgettext@plt>
   12290:	vdiv.f64	d7, d8, d9
   12294:	ldr	r3, [sp, #120]	; 0x78
   12298:	ldr	r2, [sp, #112]	; 0x70
   1229c:	str	r3, [sp, #4]
   122a0:	ldr	r3, [sp, #116]	; 0x74
   122a4:	mov	r1, r7
   122a8:	str	r3, [sp]
   122ac:	ldr	r3, [sp, #124]	; 0x7c
   122b0:	str	r0, [sp, #16]
   122b4:	mov	r0, r7
   122b8:	vstr	d7, [sp, #8]
   122bc:	bl	116e0 <error@plt>
   122c0:	b	121fc <__assert_fail@plt+0x840>
   122c4:	nop			; (mov r0, r0)
   122c8:	andeq	r0, r0, r0
   122cc:	rscsmi	r1, r5, r0, lsl #16
   122d0:	andeq	r7, r2, r0, lsr r9
   122d4:			; <UNDEFINED> instruction: 0x000282ba
   122d8:	andeq	r9, r2, r4, ror #1
   122dc:	ldrdeq	r8, [r2], -sl
   122e0:	strdeq	r8, [r2], -fp
   122e4:	andeq	r8, r2, fp, lsl r3
   122e8:	andeq	r7, r2, r4, lsl #26
   122ec:	andeq	r8, r2, pc, lsl r2
   122f0:	andeq	r8, r2, ip, lsr r3
   122f4:	andeq	r8, r2, r5, lsr #12
   122f8:	ldrdeq	r4, [r1], -r8
   122fc:	andeq	r8, r2, r4, asr r3
   12300:	andeq	r2, r1, r4, lsl #13
   12304:	andeq	r8, r2, r7, ror r3
   12308:	andeq	sl, r3, r0, lsr #4
   1230c:	andeq	r7, r2, ip, lsr r9
   12310:	andeq	r8, r2, r3, lsl #7
   12314:	andeq	r7, r2, ip, lsr #21
   12318:	andeq	r0, r0, sp, asr #12
   1231c:	andeq	r7, r2, r6, asr #25
   12320:	muleq	r2, r8, r3
   12324:	andeq	r0, r0, r1, lsl #2
   12328:	andeq	r8, r2, r7, lsr #7
   1232c:			; <UNDEFINED> instruction: 0x0003a1b0
   12330:	andeq	r8, r2, r4, ror #7
   12334:	andeq	sl, r3, r0, lsl #5
   12338:	andeq	r8, r2, r0, lsr r4
   1233c:	andeq	r8, r2, r6, lsl r4
   12340:	muleq	r2, sl, r2
   12344:	strdeq	r8, [r2], -r4
   12348:			; <UNDEFINED> instruction: 0x000282b2
   1234c:	andeq	r8, r2, pc, ror #8
   12350:	andeq	r5, r1, r0, lsl #3
   12354:	andeq	r8, r2, r7, lsl #9
   12358:			; <UNDEFINED> instruction: 0x00027ab5
   1235c:	andeq	sl, r3, r0, lsl r2
   12360:	ldrdeq	r9, [r2], -r8
   12364:	andeq	r8, r2, fp, asr #9
   12368:	andeq	sl, r3, r8, lsr #4
   1236c:	ldr	r3, [pc, #-24]	; 1235c <__assert_fail@plt+0x9a0>
   12370:	cmp	r7, #0
   12374:	addne	r7, sp, #144	; 0x90
   12378:	ldr	r1, [r3]
   1237c:	ldr	r3, [sp, #64]	; 0x40
   12380:	str	r7, [sp, #8]
   12384:	sub	r0, r3, r1
   12388:	ldr	r3, [sp, #80]	; 0x50
   1238c:	add	r1, r3, r1, lsl #2
   12390:	ldr	r3, [sp, #108]	; 0x6c
   12394:	str	r3, [sp, #40]	; 0x28
   12398:	ldr	r3, [sp, #104]	; 0x68
   1239c:	str	r3, [sp, #36]	; 0x24
   123a0:	ldr	r3, [sp, #100]	; 0x64
   123a4:	str	r3, [sp, #32]
   123a8:	ldr	r3, [sp, #60]	; 0x3c
   123ac:	str	r3, [sp, #28]
   123b0:	ldr	r3, [sp, #56]	; 0x38
   123b4:	str	r3, [sp, #24]
   123b8:	ldr	r3, [sp, #72]	; 0x48
   123bc:	str	r3, [sp, #20]
   123c0:	ldr	r3, [sp, #76]	; 0x4c
   123c4:	str	r3, [sp, #16]
   123c8:	ldr	r3, [sp, #96]	; 0x60
   123cc:	str	r3, [sp, #12]
   123d0:	ldrd	r2, [sp, #88]	; 0x58
   123d4:	strd	r2, [sp]
   123d8:	mov	r3, r8
   123dc:	mov	r2, r6
   123e0:	bl	12d50 <__assert_fail@plt+0x1394>
   123e4:	mov	r7, r0
   123e8:	mov	r0, r8
   123ec:	bl	11878 <fclose@plt>
   123f0:	cmn	r0, #1
   123f4:	beq	120d8 <__assert_fail@plt+0x71c>
   123f8:	cmp	r5, #0
   123fc:	beq	12408 <__assert_fail@plt+0xa4c>
   12400:	mov	r0, r5
   12404:	bl	1a30c <__assert_fail@plt+0x8950>
   12408:	cmp	fp, #0
   1240c:	beq	12434 <__assert_fail@plt+0xa78>
   12410:	add	r3, sp, #136	; 0x88
   12414:	str	r3, [sp]
   12418:	mov	r2, #0
   1241c:	add	r3, sp, #132	; 0x84
   12420:	ldr	r1, [pc, #-200]	; 12360 <__assert_fail@plt+0x9a4>
   12424:	mov	r0, fp
   12428:	bl	14040 <__assert_fail@plt+0x2684>
   1242c:	cmp	r0, #0
   12430:	bne	11fcc <__assert_fail@plt+0x610>
   12434:	ldr	r3, [sp, #68]	; 0x44
   12438:	cmp	r3, #0
   1243c:	beq	1244c <__assert_fail@plt+0xa90>
   12440:	mov	r1, r7
   12444:	ldr	r0, [pc, #-232]	; 12364 <__assert_fail@plt+0x9a8>
   12448:	bl	11560 <printf@plt>
   1244c:	cmp	r7, #0
   12450:	bne	11d48 <__assert_fail@plt+0x38c>
   12454:	ldr	r3, [sp, #56]	; 0x38
   12458:	cmp	r3, #0
   1245c:	beq	12470 <__assert_fail@plt+0xab4>
   12460:	ldr	r3, [pc, #-256]	; 12368 <__assert_fail@plt+0x9ac>
   12464:	ldrd	r2, [r3, #88]	; 0x58
   12468:	orrs	r3, r2, r3
   1246c:	beq	11d48 <__assert_fail@plt+0x38c>
   12470:	ldr	r3, [sp, #60]	; 0x3c
   12474:	eor	sl, r3, #1
   12478:	b	11d48 <__assert_fail@plt+0x38c>
   1247c:	mov	fp, #0
   12480:	mov	lr, #0
   12484:	pop	{r1}		; (ldr r1, [sp], #4)
   12488:	mov	r2, sp
   1248c:	push	{r2}		; (str r2, [sp, #-4]!)
   12490:	push	{r0}		; (str r0, [sp, #-4]!)
   12494:	ldr	ip, [pc, #16]	; 124ac <__assert_fail@plt+0xaf0>
   12498:	push	{ip}		; (str ip, [sp, #-4]!)
   1249c:	ldr	r0, [pc, #12]	; 124b0 <__assert_fail@plt+0xaf4>
   124a0:	ldr	r3, [pc, #12]	; 124b4 <__assert_fail@plt+0xaf8>
   124a4:	bl	11728 <__libc_start_main@plt>
   124a8:	bl	11980 <abort@plt>
   124ac:	andeq	r7, r2, r0, lsr #16
   124b0:	andeq	r1, r1, r8, asr #19
   124b4:	andeq	r7, r2, r0, asr #15
   124b8:	ldr	r3, [pc, #20]	; 124d4 <__assert_fail@plt+0xb18>
   124bc:	ldr	r2, [pc, #20]	; 124d8 <__assert_fail@plt+0xb1c>
   124c0:	add	r3, pc, r3
   124c4:	ldr	r2, [r3, r2]
   124c8:	cmp	r2, #0
   124cc:	bxeq	lr
   124d0:	b	11764 <__gmon_start__@plt>
   124d4:	andeq	r7, r2, r8, lsr fp
   124d8:	andeq	r0, r0, r4, lsr #3
   124dc:	ldr	r3, [pc, #28]	; 12500 <__assert_fail@plt+0xb44>
   124e0:	ldr	r0, [pc, #28]	; 12504 <__assert_fail@plt+0xb48>
   124e4:	sub	r3, r3, r0
   124e8:	cmp	r3, #6
   124ec:	bxls	lr
   124f0:	ldr	r3, [pc, #16]	; 12508 <__assert_fail@plt+0xb4c>
   124f4:	cmp	r3, #0
   124f8:	bxeq	lr
   124fc:	bx	r3
   12500:	andeq	sl, r3, fp, lsl #4
   12504:	andeq	sl, r3, r8, lsl #4
   12508:	andeq	r0, r0, r0
   1250c:	ldr	r1, [pc, #36]	; 12538 <__assert_fail@plt+0xb7c>
   12510:	ldr	r0, [pc, #36]	; 1253c <__assert_fail@plt+0xb80>
   12514:	sub	r1, r1, r0
   12518:	asr	r1, r1, #2
   1251c:	add	r1, r1, r1, lsr #31
   12520:	asrs	r1, r1, #1
   12524:	bxeq	lr
   12528:	ldr	r3, [pc, #16]	; 12540 <__assert_fail@plt+0xb84>
   1252c:	cmp	r3, #0
   12530:	bxeq	lr
   12534:	bx	r3
   12538:	andeq	sl, r3, r8, lsl #4
   1253c:	andeq	sl, r3, r8, lsl #4
   12540:	andeq	r0, r0, r0
   12544:	push	{r4, lr}
   12548:	ldr	r4, [pc, #24]	; 12568 <__assert_fail@plt+0xbac>
   1254c:	ldrb	r3, [r4]
   12550:	cmp	r3, #0
   12554:	popne	{r4, pc}
   12558:	bl	124dc <__assert_fail@plt+0xb20>
   1255c:	mov	r3, #1
   12560:	strb	r3, [r4]
   12564:	pop	{r4, pc}
   12568:	andeq	sl, r3, r4, lsr #4
   1256c:	ldr	r0, [pc, #40]	; 1259c <__assert_fail@plt+0xbe0>
   12570:	ldr	r3, [r0]
   12574:	cmp	r3, #0
   12578:	bne	12580 <__assert_fail@plt+0xbc4>
   1257c:	b	1250c <__assert_fail@plt+0xb50>
   12580:	ldr	r3, [pc, #24]	; 125a0 <__assert_fail@plt+0xbe4>
   12584:	cmp	r3, #0
   12588:	beq	1257c <__assert_fail@plt+0xbc0>
   1258c:	push	{r4, lr}
   12590:	blx	r3
   12594:	pop	{r4, lr}
   12598:	b	1250c <__assert_fail@plt+0xb50>
   1259c:	andeq	r9, r3, r4, lsl pc
	...
   125a8:	push	{r4, r5, r6, r7, r8, lr}
   125ac:	mov	r4, r0
   125b0:	mov	r5, r1
   125b4:	mov	r7, r2
   125b8:	mov	r6, r3
   125bc:	mov	r0, r1
   125c0:	and	r1, r0, r5
   125c4:	cmp	r4, r6
   125c8:	cmpne	r1, #0
   125cc:	bne	125d4 <__assert_fail@plt+0xc18>
   125d0:	pop	{r4, r5, r6, r7, r8, pc}
   125d4:	ldr	r3, [r4]
   125d8:	ldr	r1, [r4, #4]
   125dc:	mov	r0, r7
   125e0:	blx	r3
   125e4:	ldr	r4, [r4, #8]
   125e8:	b	125c0 <__assert_fail@plt+0xc04>
   125ec:	mov	r2, r0
   125f0:	ldr	r0, [pc, #12]	; 12604 <__assert_fail@plt+0xc48>
   125f4:	mov	r3, #0
   125f8:	mov	r1, #3
   125fc:	ldr	r0, [r0]
   12600:	b	125a8 <__assert_fail@plt+0xbec>
   12604:	andeq	sl, r3, r8, lsr #4
   12608:	ldrd	r2, [r1, #8]
   1260c:	adds	r2, r2, #1
   12610:	adc	r3, r3, #0
   12614:	strd	r2, [r1, #8]
   12618:	ldrd	r0, [r1]
   1261c:	cmp	r3, r1
   12620:	cmpeq	r2, r0
   12624:	movcs	r0, #8
   12628:	movcc	r0, #1
   1262c:	bx	lr
   12630:	ldrd	r2, [r1, #8]
   12634:	mov	r0, #1
   12638:	adds	r2, r2, #1
   1263c:	adc	r3, r3, #0
   12640:	strd	r2, [r1, #8]
   12644:	bx	lr
   12648:	push	{r4, lr}
   1264c:	mov	r1, #131072	; 0x20000
   12650:	bl	142bc <__assert_fail@plt+0x2900>
   12654:	subs	r4, r0, #0
   12658:	blt	1267c <__assert_fail@plt+0xcc0>
   1265c:	mov	r2, #1
   12660:	mov	r1, #2
   12664:	bl	1a0f8 <__assert_fail@plt+0x873c>
   12668:	cmp	r0, #0
   1266c:	beq	1267c <__assert_fail@plt+0xcc0>
   12670:	mov	r0, r4
   12674:	bl	11998 <close@plt>
   12678:	mvn	r4, #0
   1267c:	mov	r0, r4
   12680:	pop	{r4, pc}
   12684:	ldr	r3, [pc, #4]	; 12690 <__assert_fail@plt+0xcd4>
   12688:	ldr	r0, [r3, #4]
   1268c:	b	1a30c <__assert_fail@plt+0x8950>
   12690:	andeq	sl, r3, r8, lsr #4
   12694:	subs	r5, r0, #0
   12698:	push	{r7, lr}
   1269c:	ldr	r4, [pc, #100]	; 12708 <__assert_fail@plt+0xd4c>
   126a0:	beq	126d4 <__assert_fail@plt+0xd18>
   126a4:	ldr	r3, [pc, #96]	; 1270c <__assert_fail@plt+0xd50>
   126a8:	mov	r2, #5
   126ac:	ldr	r1, [pc, #92]	; 12710 <__assert_fail@plt+0xd54>
   126b0:	mov	r0, #0
   126b4:	ldr	r6, [r3]
   126b8:	bl	11638 <dcgettext@plt>
   126bc:	ldr	r2, [r4]
   126c0:	mov	r1, r0
   126c4:	mov	r0, r6
   126c8:	bl	117c4 <fprintf@plt>
   126cc:	mov	r0, r5
   126d0:	bl	11788 <exit@plt>
   126d4:	ldr	r6, [pc, #56]	; 12714 <__assert_fail@plt+0xd58>
   126d8:	mov	r2, #5
   126dc:	ldr	r1, [pc, #52]	; 12718 <__assert_fail@plt+0xd5c>
   126e0:	ldr	r7, [r6]
   126e4:	bl	11638 <dcgettext@plt>
   126e8:	ldr	r2, [r4]
   126ec:	mov	r1, r0
   126f0:	mov	r0, r7
   126f4:	bl	117c4 <fprintf@plt>
   126f8:	ldr	r1, [r4]
   126fc:	ldr	r0, [r6]
   12700:	bl	140c0 <__assert_fail@plt+0x2704>
   12704:	b	126cc <__assert_fail@plt+0xd10>
   12708:	andeq	sl, r3, r0, lsr #5
   1270c:	andeq	sl, r3, r8, lsl r2
   12710:			; <UNDEFINED> instruction: 0x00027aba
   12714:	andeq	sl, r3, ip, lsl r2
   12718:	andeq	r7, r2, r1, ror #21
   1271c:	push	{r4, r5, r6, lr}
   12720:	mov	r5, r0
   12724:	mov	r0, #12
   12728:	mov	r4, r1
   1272c:	bl	19700 <__assert_fail@plt+0x7d44>
   12730:	mov	r3, #0
   12734:	str	r3, [r0, #8]
   12738:	ldr	r3, [pc, #28]	; 1275c <__assert_fail@plt+0xda0>
   1273c:	str	r5, [r0]
   12740:	str	r4, [r0, #4]
   12744:	ldr	r2, [r3, #8]
   12748:	str	r0, [r3, #8]
   1274c:	cmp	r2, #0
   12750:	streq	r0, [r3]
   12754:	strne	r0, [r2, #8]
   12758:	pop	{r4, r5, r6, pc}
   1275c:	andeq	sl, r3, r8, lsr #4
   12760:	ldr	r3, [pc, #32]	; 12788 <__assert_fail@plt+0xdcc>
   12764:	push	{r4, lr}
   12768:	ldr	r1, [r3]
   1276c:	ldr	r0, [r0, #12]
   12770:	bl	11968 <fputs@plt>
   12774:	ldr	r3, [pc, #16]	; 1278c <__assert_fail@plt+0xdd0>
   12778:	ldr	r0, [r3]
   1277c:	bl	11824 <putchar@plt>
   12780:	mov	r0, #1
   12784:	pop	{r4, pc}
   12788:	andeq	sl, r3, ip, lsl r2
   1278c:			; <UNDEFINED> instruction: 0x0003a1b0
   12790:	push	{r0, r1, r2, lr}
   12794:	ldr	r3, [r0, #12]
   12798:	ldr	r1, [pc, #48]	; 127d0 <__assert_fail@plt+0xe14>
   1279c:	ldr	r0, [pc, #48]	; 127d4 <__assert_fail@plt+0xe18>
   127a0:	ldrb	r2, [r1, #12]
   127a4:	str	r3, [sp]
   127a8:	ldr	r3, [pc, #40]	; 127d8 <__assert_fail@plt+0xe1c>
   127ac:	ldr	r1, [r1, #4]
   127b0:	ldr	r0, [r0]
   127b4:	bl	13c24 <__assert_fail@plt+0x2268>
   127b8:	ldr	r3, [pc, #28]	; 127dc <__assert_fail@plt+0xe20>
   127bc:	ldr	r0, [r3]
   127c0:	bl	11824 <putchar@plt>
   127c4:	mov	r0, #1
   127c8:	add	sp, sp, #12
   127cc:	pop	{pc}		; (ldr pc, [sp], #4)
   127d0:	andeq	sl, r3, r8, lsr #4
   127d4:	andeq	sl, r3, ip, lsl r2
   127d8:	andeq	r9, r2, r4, ror #1
   127dc:			; <UNDEFINED> instruction: 0x0003a1b0
   127e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   127e4:	mov	r4, r1
   127e8:	ldr	r6, [r0, #12]
   127ec:	mov	r7, #0
   127f0:	mov	r0, r6
   127f4:	bl	117ac <strlen@plt>
   127f8:	ldrd	r2, [r4, #8]
   127fc:	sub	r6, r6, #1
   12800:	mov	sl, #1
   12804:	adds	r2, r2, #1
   12808:	adc	r3, r3, #0
   1280c:	strd	r2, [r4, #8]
   12810:	ldrd	r2, [r4, #16]
   12814:	adds	r8, r2, r0
   12818:	adc	r9, r3, #0
   1281c:	mov	r0, r8
   12820:	mov	r1, r9
   12824:	mov	r8, r7
   12828:	mov	r9, r7
   1282c:	strd	r0, [r4, #16]
   12830:	ldrb	r5, [r6, #1]!
   12834:	cmp	r5, #0
   12838:	bne	1288c <__assert_fail@plt+0xed0>
   1283c:	cmp	r9, #0
   12840:	beq	12854 <__assert_fail@plt+0xe98>
   12844:	ldrd	r2, [r4, #40]	; 0x28
   12848:	adds	r2, r2, #1
   1284c:	adc	r3, r3, #0
   12850:	strd	r2, [r4, #40]	; 0x28
   12854:	cmp	r8, #0
   12858:	beq	1286c <__assert_fail@plt+0xeb0>
   1285c:	ldrd	r2, [r4, #24]
   12860:	adds	r2, r2, #1
   12864:	adc	r3, r3, #0
   12868:	strd	r2, [r4, #24]
   1286c:	cmp	r7, #0
   12870:	beq	12884 <__assert_fail@plt+0xec8>
   12874:	ldrd	r2, [r4, #32]
   12878:	adds	r2, r2, #1
   1287c:	adc	r3, r3, #0
   12880:	strd	r2, [r4, #32]
   12884:	mov	r0, #1
   12888:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1288c:	tst	r5, #128	; 0x80
   12890:	bne	128a8 <__assert_fail@plt+0xeec>
   12894:	cmp	r5, #10
   12898:	bne	128ac <__assert_fail@plt+0xef0>
   1289c:	mov	r7, sl
   128a0:	mov	r8, #1
   128a4:	b	12830 <__assert_fail@plt+0xe74>
   128a8:	mov	r9, sl
   128ac:	bl	1177c <__ctype_b_loc@plt>
   128b0:	lsl	r5, r5, #1
   128b4:	ldr	r3, [r0]
   128b8:	ldrh	r3, [r3, r5]
   128bc:	tst	r3, #8192	; 0x2000
   128c0:	movne	r8, #1
   128c4:	b	12830 <__assert_fail@plt+0xe74>
   128c8:	push	{lr}		; (str lr, [sp, #-4]!)
   128cc:	sub	sp, sp, #108	; 0x6c
   128d0:	mov	r1, sp
   128d4:	ldr	r0, [r0, #12]
   128d8:	bl	2785c <__assert_fail@plt+0x15ea0>
   128dc:	cmp	r0, #0
   128e0:	moveq	r0, #4
   128e4:	movne	r0, #1
   128e8:	add	sp, sp, #108	; 0x6c
   128ec:	pop	{pc}		; (ldr pc, [sp], #4)
   128f0:	push	{lr}		; (str lr, [sp, #-4]!)
   128f4:	sub	sp, sp, #108	; 0x6c
   128f8:	mov	r1, sp
   128fc:	ldr	r0, [r0, #12]
   12900:	bl	2785c <__assert_fail@plt+0x15ea0>
   12904:	cmp	r0, #0
   12908:	movne	r0, #4
   1290c:	moveq	r0, #1
   12910:	add	sp, sp, #108	; 0x6c
   12914:	pop	{pc}		; (ldr pc, [sp], #4)
   12918:	push	{lr}		; (str lr, [sp, #-4]!)
   1291c:	sub	sp, sp, #108	; 0x6c
   12920:	mov	r1, sp
   12924:	ldr	r0, [r0, #12]
   12928:	bl	2783c <__assert_fail@plt+0x15e80>
   1292c:	cmp	r0, #0
   12930:	moveq	r0, #4
   12934:	movne	r0, #1
   12938:	add	sp, sp, #108	; 0x6c
   1293c:	pop	{pc}		; (ldr pc, [sp], #4)
   12940:	push	{lr}		; (str lr, [sp, #-4]!)
   12944:	sub	sp, sp, #108	; 0x6c
   12948:	mov	r1, sp
   1294c:	ldr	r0, [r0, #12]
   12950:	bl	2783c <__assert_fail@plt+0x15e80>
   12954:	cmp	r0, #0
   12958:	movne	r0, #4
   1295c:	moveq	r0, #1
   12960:	add	sp, sp, #108	; 0x6c
   12964:	pop	{pc}		; (ldr pc, [sp], #4)
   12968:	push	{r4, lr}
   1296c:	ldr	r0, [r0, #20]
   12970:	bl	16ff8 <__assert_fail@plt+0x563c>
   12974:	cmp	r0, #0
   12978:	movne	r0, #2
   1297c:	moveq	r0, #4
   12980:	pop	{r4, pc}
   12984:	push	{r4, lr}
   12988:	ldr	r0, [r0, #20]
   1298c:	bl	1576c <__assert_fail@plt+0x3db0>
   12990:	cmp	r0, #0
   12994:	movne	r0, #2
   12998:	moveq	r0, #4
   1299c:	pop	{r4, pc}
   129a0:	mov	r3, r1
   129a4:	push	{r4, lr}
   129a8:	mov	r2, #0
   129ac:	ldr	r1, [r0, #20]
   129b0:	mov	r0, r3
   129b4:	bl	116ec <fnmatch@plt>
   129b8:	cmp	r0, #0
   129bc:	movne	r0, #4
   129c0:	moveq	r0, #2
   129c4:	pop	{r4, pc}
   129c8:	mov	r3, r1
   129cc:	push	{r4, lr}
   129d0:	mov	r2, #16
   129d4:	ldr	r1, [r0, #20]
   129d8:	mov	r0, r3
   129dc:	bl	116ec <fnmatch@plt>
   129e0:	cmp	r0, #0
   129e4:	movne	r0, #4
   129e8:	moveq	r0, #2
   129ec:	pop	{r4, pc}
   129f0:	push	{r0, r1, r2, r4, r5, lr}
   129f4:	mov	r5, r1
   129f8:	ldr	r4, [r0, #20]
   129fc:	mov	r0, r4
   12a00:	bl	117ac <strlen@plt>
   12a04:	mov	r3, #0
   12a08:	mov	r1, r4
   12a0c:	mov	r2, r0
   12a10:	mov	r0, r5
   12a14:	stm	sp, {r2, r3}
   12a18:	bl	25560 <__assert_fail@plt+0x13ba4>
   12a1c:	cmp	r0, #0
   12a20:	movlt	r0, #4
   12a24:	movge	r0, #2
   12a28:	add	sp, sp, #12
   12a2c:	pop	{r4, r5, pc}
   12a30:	push	{r4, lr}
   12a34:	mov	r4, r0
   12a38:	ldr	r0, [r0, #12]
   12a3c:	bl	14128 <__assert_fail@plt+0x276c>
   12a40:	str	r0, [r4, #20]
   12a44:	mov	r0, #1
   12a48:	pop	{r4, pc}
   12a4c:	push	{r4, r5, r6, lr}
   12a50:	mov	r2, r0
   12a54:	ldr	r4, [pc, #60]	; 12a98 <__assert_fail@plt+0x10dc>
   12a58:	mov	r5, r0
   12a5c:	mov	r1, #3
   12a60:	ldr	r3, [r4, #16]
   12a64:	ldr	r0, [r4]
   12a68:	bl	125a8 <__assert_fail@plt+0xbec>
   12a6c:	cmp	r0, #1
   12a70:	moveq	r0, #4
   12a74:	ands	r3, r0, #12
   12a78:	popne	{r4, r5, r6, pc}
   12a7c:	mov	r2, r5
   12a80:	mov	r1, #1
   12a84:	ldr	r0, [r4, #16]
   12a88:	bl	125a8 <__assert_fail@plt+0xbec>
   12a8c:	cmp	r0, #1
   12a90:	moveq	r0, #2
   12a94:	pop	{r4, r5, r6, pc}
   12a98:	andeq	sl, r3, r8, lsr #4
   12a9c:	mvn	r3, r1
   12aa0:	cmp	r3, r2
   12aa4:	push	{r4, lr}
   12aa8:	mov	r4, r0
   12aac:	bcs	12ad4 <__assert_fail@plt+0x1118>
   12ab0:	mov	r2, #5
   12ab4:	ldr	r1, [pc, #68]	; 12b00 <__assert_fail@plt+0x1144>
   12ab8:	mov	r0, #0
   12abc:	bl	11638 <dcgettext@plt>
   12ac0:	ldr	r3, [r4, #28]
   12ac4:	mov	r1, #0
   12ac8:	mov	r2, r0
   12acc:	mov	r0, #1
   12ad0:	bl	116e0 <error@plt>
   12ad4:	ldr	r3, [r0, #16]
   12ad8:	add	r2, r1, r2
   12adc:	cmp	r3, r2
   12ae0:	popcs	{r4, pc}
   12ae4:	mov	r1, r0
   12ae8:	ldr	r0, [r0, #12]
   12aec:	str	r2, [r1, #16]!
   12af0:	mov	r2, #1
   12af4:	bl	197f8 <__assert_fail@plt+0x7e3c>
   12af8:	str	r0, [r4, #12]
   12afc:	pop	{r4, pc}
   12b00:	andeq	r7, r2, r1, lsl #25
   12b04:	ldr	r3, [r0]
   12b08:	cmn	r3, #1
   12b0c:	beq	12c80 <__assert_fail@plt+0x12c4>
   12b10:	cmp	r3, #30
   12b14:	push	{r4, r5, r6, r7, r8, lr}
   12b18:	mov	r4, r0
   12b1c:	ldr	r1, [r0, #4]
   12b20:	bne	12b90 <__assert_fail@plt+0x11d4>
   12b24:	sub	r3, r1, #14
   12b28:	ldr	r2, [r0, #8]
   12b2c:	cmp	r3, #0
   12b30:	str	r3, [r0, #4]
   12b34:	subge	r2, r2, r3
   12b38:	rsb	r5, r1, #14
   12b3c:	add	r3, r0, #32
   12b40:	ldr	r1, [r0, #28]
   12b44:	ldr	r0, [r0, #24]
   12b48:	bl	13a44 <__assert_fail@plt+0x2088>
   12b4c:	cmp	r5, r0
   12b50:	ble	12b68 <__assert_fail@plt+0x11ac>
   12b54:	ldr	r3, [pc, #300]	; 12c88 <__assert_fail@plt+0x12cc>
   12b58:	ldr	r2, [pc, #300]	; 12c8c <__assert_fail@plt+0x12d0>
   12b5c:	ldr	r1, [pc, #300]	; 12c90 <__assert_fail@plt+0x12d4>
   12b60:	ldr	r0, [pc, #300]	; 12c94 <__assert_fail@plt+0x12d8>
   12b64:	bl	119bc <__assert_fail@plt>
   12b68:	ldr	r3, [r4, #4]
   12b6c:	add	r0, r0, r3
   12b70:	cmp	r0, #0
   12b74:	str	r0, [r4, #4]
   12b78:	bge	12bb8 <__assert_fail@plt+0x11fc>
   12b7c:	ldr	r3, [pc, #260]	; 12c88 <__assert_fail@plt+0x12cc>
   12b80:	mov	r2, #480	; 0x1e0
   12b84:	ldr	r1, [pc, #260]	; 12c90 <__assert_fail@plt+0x12d4>
   12b88:	ldr	r0, [pc, #264]	; 12c98 <__assert_fail@plt+0x12dc>
   12b8c:	bl	119bc <__assert_fail@plt>
   12b90:	sub	r3, r3, #14
   12b94:	add	r3, r3, r1
   12b98:	cmp	r3, #0
   12b9c:	str	r3, [r0, #4]
   12ba0:	bge	12bb8 <__assert_fail@plt+0x11fc>
   12ba4:	ldr	r3, [pc, #220]	; 12c88 <__assert_fail@plt+0x12cc>
   12ba8:	ldr	r2, [pc, #236]	; 12c9c <__assert_fail@plt+0x12e0>
   12bac:	ldr	r1, [pc, #220]	; 12c90 <__assert_fail@plt+0x12d4>
   12bb0:	ldr	r0, [pc, #224]	; 12c98 <__assert_fail@plt+0x12dc>
   12bb4:	bl	119bc <__assert_fail@plt>
   12bb8:	ldr	r5, [r4, #4]
   12bbc:	mov	r6, #2
   12bc0:	mov	r7, #1
   12bc4:	ldr	r0, [r4, #24]
   12bc8:	bl	1198c <getc@plt>
   12bcc:	cmp	r0, #30
   12bd0:	str	r0, [r4]
   12bd4:	bgt	12c08 <__assert_fail@plt+0x124c>
   12bd8:	mov	r0, r4
   12bdc:	mov	r2, #1
   12be0:	mov	r1, r5
   12be4:	bl	12a9c <__assert_fail@plt+0x10e0>
   12be8:	ldr	r3, [r4, #12]
   12bec:	mov	r2, #0
   12bf0:	mov	r0, #1
   12bf4:	strb	r2, [r3, r5]
   12bf8:	ldr	r3, [r4, #12]
   12bfc:	str	r5, [r4, #8]
   12c00:	str	r3, [r4, #20]
   12c04:	pop	{r4, r5, r6, r7, r8, pc}
   12c08:	cmp	r0, #127	; 0x7f
   12c0c:	add	r8, r5, #1
   12c10:	bgt	12c38 <__assert_fail@plt+0x127c>
   12c14:	mov	r2, r7
   12c18:	mov	r1, r5
   12c1c:	mov	r0, r4
   12c20:	bl	12a9c <__assert_fail@plt+0x10e0>
   12c24:	ldr	r3, [r4, #12]
   12c28:	ldr	r2, [r4]
   12c2c:	strb	r2, [r3, r5]
   12c30:	mov	r5, r8
   12c34:	b	12bc4 <__assert_fail@plt+0x1208>
   12c38:	mov	r2, r6
   12c3c:	mov	r1, r5
   12c40:	mov	r0, r4
   12c44:	bl	12a9c <__assert_fail@plt+0x10e0>
   12c48:	ldr	r2, [r4]
   12c4c:	mov	r3, r4
   12c50:	and	r2, r2, #127	; 0x7f
   12c54:	str	r2, [r3], r2
   12c58:	ldrb	r2, [r3, #36]	; 0x24
   12c5c:	ldr	r3, [r4, #12]
   12c60:	strb	r2, [r3, r5]
   12c64:	ldr	r3, [r4]
   12c68:	add	r5, r5, #2
   12c6c:	add	r3, r4, r3
   12c70:	ldrb	r2, [r3, #164]	; 0xa4
   12c74:	ldr	r3, [r4, #12]
   12c78:	strb	r2, [r3, r8]
   12c7c:	b	12bc4 <__assert_fail@plt+0x1208>
   12c80:	mov	r0, #8
   12c84:	bx	lr
   12c88:	andeq	r7, r2, r8, ror r8
   12c8c:	ldrdeq	r0, [r0], -lr
   12c90:	andeq	r7, r2, r6, asr #25
   12c94:	andeq	r7, r2, pc, asr #25
   12c98:	ldrdeq	r7, [r2], -lr
   12c9c:	andeq	r0, r0, r5, ror #3
   12ca0:	push	{r4, r5, r6, lr}
   12ca4:	mov	r4, r0
   12ca8:	mov	r5, r1
   12cac:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   12cb0:	cmp	r0, #1
   12cb4:	beq	12ccc <__assert_fail@plt+0x1310>
   12cb8:	ldr	r3, [pc, #40]	; 12ce8 <__assert_fail@plt+0x132c>
   12cbc:	ldr	r2, [pc, #40]	; 12cec <__assert_fail@plt+0x1330>
   12cc0:	ldr	r1, [pc, #40]	; 12cf0 <__assert_fail@plt+0x1334>
   12cc4:	ldr	r0, [pc, #40]	; 12cf4 <__assert_fail@plt+0x1338>
   12cc8:	bl	119bc <__assert_fail@plt>
   12ccc:	mov	r1, r5
   12cd0:	ldr	r0, [r4, #20]
   12cd4:	bl	26534 <__assert_fail@plt+0x14b78>
   12cd8:	cmp	r0, #0
   12cdc:	movne	r0, #2
   12ce0:	moveq	r0, #4
   12ce4:	pop	{r4, r5, r6, pc}
   12ce8:	andeq	r7, r2, r9, lsl #17
   12cec:			; <UNDEFINED> instruction: 0x000002b2
   12cf0:	andeq	r7, r2, r6, asr #25
   12cf4:	strdeq	r7, [r2], -r3
   12cf8:	push	{r4, r5, r6, lr}
   12cfc:	mov	r4, r0
   12d00:	mov	r5, r1
   12d04:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   12d08:	cmp	r0, #1
   12d0c:	beq	12d24 <__assert_fail@plt+0x1368>
   12d10:	ldr	r3, [pc, #40]	; 12d40 <__assert_fail@plt+0x1384>
   12d14:	ldr	r2, [pc, #40]	; 12d44 <__assert_fail@plt+0x1388>
   12d18:	ldr	r1, [pc, #40]	; 12d48 <__assert_fail@plt+0x138c>
   12d1c:	ldr	r0, [pc, #40]	; 12d4c <__assert_fail@plt+0x1390>
   12d20:	bl	119bc <__assert_fail@plt>
   12d24:	mov	r1, r5
   12d28:	ldr	r0, [r4, #20]
   12d2c:	bl	25d10 <__assert_fail@plt+0x14354>
   12d30:	cmp	r0, #0
   12d34:	movne	r0, #2
   12d38:	moveq	r0, #4
   12d3c:	pop	{r4, r5, r6, pc}
   12d40:			; <UNDEFINED> instruction: 0x000278b1
   12d44:	andeq	r0, r0, sl, asr #5
   12d48:	andeq	r7, r2, r6, asr #25
   12d4c:	strdeq	r7, [r2], -r3
   12d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d54:	sub	sp, sp, #2944	; 0xb80
   12d58:	sub	sp, sp, #4
   12d5c:	mov	r6, r2
   12d60:	ldr	r2, [sp, #2984]	; 0xba8
   12d64:	ldr	r4, [pc, #2364]	; 136a8 <__assert_fail@plt+0x1cec>
   12d68:	str	r2, [sp, #20]
   12d6c:	ldr	r2, [sp, #2988]	; 0xbac
   12d70:	mov	r7, r0
   12d74:	str	r2, [sp, #36]	; 0x24
   12d78:	ldr	r2, [sp, #2996]	; 0xbb4
   12d7c:	mov	r0, #128	; 0x80
   12d80:	cmp	r2, #0
   12d84:	str	r1, [sp, #32]
   12d88:	ldrne	r2, [sp, #3024]	; 0xbd0
   12d8c:	str	r3, [sp, #68]	; 0x44
   12d90:	orrne	r2, r2, #4194304	; 0x400000
   12d94:	strne	r2, [sp, #3024]	; 0xbd0
   12d98:	mov	r2, #0
   12d9c:	str	r2, [sp, #76]	; 0x4c
   12da0:	str	r2, [sp, #48]	; 0x30
   12da4:	str	r2, [sp, #52]	; 0x34
   12da8:	str	r2, [r4]
   12dac:	str	r2, [r4, #8]
   12db0:	str	r2, [r4, #16]
   12db4:	strb	r2, [r4, #24]
   12db8:	ldr	fp, [r4, #20]
   12dbc:	str	r6, [sp, #72]	; 0x48
   12dc0:	str	r0, [sp, #60]	; 0x3c
   12dc4:	bl	19700 <__assert_fail@plt+0x7d44>
   12dc8:	ldr	r3, [sp, #68]	; 0x44
   12dcc:	mov	r2, #2
   12dd0:	mov	r1, #1
   12dd4:	str	r0, [sp, #56]	; 0x38
   12dd8:	bl	116bc <fread@plt>
   12ddc:	cmp	r0, #2
   12de0:	mov	r8, r0
   12de4:	bls	12dfc <__assert_fail@plt+0x1440>
   12de8:	ldr	r3, [pc, #2236]	; 136ac <__assert_fail@plt+0x1cf0>
   12dec:	ldr	r2, [pc, #2236]	; 136b0 <__assert_fail@plt+0x1cf4>
   12df0:	ldr	r1, [pc, #2236]	; 136b4 <__assert_fail@plt+0x1cf8>
   12df4:	ldr	r0, [pc, #2236]	; 136b8 <__assert_fail@plt+0x1cfc>
   12df8:	bl	119bc <__assert_fail@plt>
   12dfc:	bne	135a4 <__assert_fail@plt+0x1be8>
   12e00:	ldr	r9, [sp, #56]	; 0x38
   12e04:	ldrb	r5, [r9, #1]
   12e08:	cmp	r5, #0
   12e0c:	bne	135a4 <__assert_fail@plt+0x1be8>
   12e10:	bl	1177c <__ctype_b_loc@plt>
   12e14:	ldrb	r3, [r9]
   12e18:	lsl	r2, r3, #1
   12e1c:	ldr	r1, [r0]
   12e20:	ldrh	r2, [r1, r2]
   12e24:	tst	r2, #2048	; 0x800
   12e28:	beq	135a4 <__assert_fail@plt+0x1be8>
   12e2c:	sub	r6, r3, #48	; 0x30
   12e30:	cmp	r6, #1
   12e34:	ble	1364c <__assert_fail@plt+0x1c90>
   12e38:	mov	r2, #5
   12e3c:	ldr	r1, [pc, #2168]	; 136bc <__assert_fail@plt+0x1d00>
   12e40:	mov	r0, r5
   12e44:	ldr	r7, [sp, #72]	; 0x48
   12e48:	bl	11638 <dcgettext@plt>
   12e4c:	mov	r2, r7
   12e50:	mov	r1, #8
   12e54:	mov	r4, r0
   12e58:	mov	r0, r5
   12e5c:	bl	18fc0 <__assert_fail@plt+0x7604>
   12e60:	ldrb	r3, [r9, #1]
   12e64:	mov	r2, r4
   12e68:	mov	r1, r5
   12e6c:	str	r3, [sp]
   12e70:	mov	r3, r0
   12e74:	mov	r0, r5
   12e78:	bl	116e0 <error@plt>
   12e7c:	mov	r2, #5
   12e80:	ldr	r1, [pc, #2104]	; 136c0 <__assert_fail@plt+0x1d04>
   12e84:	mov	r0, r5
   12e88:	bl	11638 <dcgettext@plt>
   12e8c:	ldr	r2, [sp, #72]	; 0x48
   12e90:	mov	r1, #8
   12e94:	mov	r4, r0
   12e98:	mov	r0, r5
   12e9c:	bl	18fc0 <__assert_fail@plt+0x7604>
   12ea0:	str	r6, [sp]
   12ea4:	mov	r2, r4
   12ea8:	mov	r1, r5
   12eac:	mov	r3, r0
   12eb0:	mov	r0, r5
   12eb4:	bl	116e0 <error@plt>
   12eb8:	mov	r0, #0
   12ebc:	add	sp, sp, #2944	; 0xb80
   12ec0:	add	sp, sp, #4
   12ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ec8:	cmp	fp, #1
   12ecc:	beq	12f1c <__assert_fail@plt+0x1560>
   12ed0:	ldr	r3, [sp, #3000]	; 0xbb8
   12ed4:	ldr	r2, [sp, #3012]	; 0xbc4
   12ed8:	orrs	r3, r3, r2
   12edc:	beq	12f18 <__assert_fail@plt+0x155c>
   12ee0:	mov	r2, #5
   12ee4:	ldr	r1, [pc, #2008]	; 136c4 <__assert_fail@plt+0x1d08>
   12ee8:	mov	r0, r5
   12eec:	bl	11638 <dcgettext@plt>
   12ef0:	ldr	r2, [sp, #72]	; 0x48
   12ef4:	mov	r1, #8
   12ef8:	mov	r8, r0
   12efc:	mov	r0, r5
   12f00:	bl	18fc0 <__assert_fail@plt+0x7604>
   12f04:	mov	r2, r8
   12f08:	mov	r1, r5
   12f0c:	mov	r3, r0
   12f10:	mov	r0, r5
   12f14:	bl	116e0 <error@plt>
   12f18:	mov	fp, r6
   12f1c:	mov	r1, #0
   12f20:	ldr	r0, [pc, #1952]	; 136c8 <__assert_fail@plt+0x1d0c>
   12f24:	bl	1271c <__assert_fail@plt+0xd60>
   12f28:	ldr	r3, [pc, #1948]	; 136cc <__assert_fail@plt+0x1d10>
   12f2c:	mov	r8, #0
   12f30:	str	r3, [sp, #24]
   12f34:	mov	r3, #1
   12f38:	str	r3, [sp, #28]
   12f3c:	ldr	r3, [sp, #3004]	; 0xbbc
   12f40:	cmp	r3, #0
   12f44:	beq	12f54 <__assert_fail@plt+0x1598>
   12f48:	mov	r1, #0
   12f4c:	ldr	r0, [pc, #1916]	; 136d0 <__assert_fail@plt+0x1d14>
   12f50:	bl	1271c <__assert_fail@plt+0xd60>
   12f54:	ldr	r5, [pc, #1868]	; 136a8 <__assert_fail@plt+0x1cec>
   12f58:	mov	r9, #0
   12f5c:	cmp	r9, r7
   12f60:	blt	13130 <__assert_fail@plt+0x1774>
   12f64:	cmp	fp, #1
   12f68:	ldr	r6, [r5, #8]
   12f6c:	beq	13214 <__assert_fail@plt+0x1858>
   12f70:	cmp	fp, #2
   12f74:	beq	13238 <__assert_fail@plt+0x187c>
   12f78:	ldr	r3, [sp, #3012]	; 0xbc4
   12f7c:	cmp	r3, #0
   12f80:	beq	12f90 <__assert_fail@plt+0x15d4>
   12f84:	ldr	r1, [pc, #1864]	; 136d4 <__assert_fail@plt+0x1d18>
   12f88:	ldr	r0, [pc, #1864]	; 136d8 <__assert_fail@plt+0x1d1c>
   12f8c:	bl	1271c <__assert_fail@plt+0xd60>
   12f90:	ldr	r3, [sp, #3000]	; 0xbb8
   12f94:	cmp	r3, #0
   12f98:	beq	12fb4 <__assert_fail@plt+0x15f8>
   12f9c:	ldrb	r1, [r5, #80]	; 0x50
   12fa0:	cmp	r1, #0
   12fa4:	movne	r1, #0
   12fa8:	ldrne	r0, [pc, #1836]	; 136dc <__assert_fail@plt+0x1d20>
   12fac:	ldreq	r0, [pc, #1836]	; 136e0 <__assert_fail@plt+0x1d24>
   12fb0:	bl	1271c <__assert_fail@plt+0xd60>
   12fb4:	ldr	r3, [sp, #3008]	; 0xbc0
   12fb8:	ldr	r1, [pc, #1828]	; 136e4 <__assert_fail@plt+0x1d28>
   12fbc:	cmp	r3, #0
   12fc0:	ldrne	r0, [pc, #1824]	; 136e8 <__assert_fail@plt+0x1d2c>
   12fc4:	ldreq	r0, [pc, #1824]	; 136ec <__assert_fail@plt+0x1d30>
   12fc8:	bl	1271c <__assert_fail@plt+0xd60>
   12fcc:	cmp	r7, #1
   12fd0:	ldrle	r3, [pc, #1816]	; 136f0 <__assert_fail@plt+0x1d34>
   12fd4:	ble	12ff0 <__assert_fail@plt+0x1634>
   12fd8:	ldr	r3, [r6, #8]
   12fdc:	str	r3, [r5, #16]
   12fe0:	ldr	r3, [sp, #3016]	; 0xbc8
   12fe4:	cmp	r3, #0
   12fe8:	ldrne	r3, [pc, #1796]	; 136f4 <__assert_fail@plt+0x1d38>
   12fec:	ldreq	r3, [pc, #1796]	; 136f8 <__assert_fail@plt+0x1d3c>
   12ff0:	str	r3, [r5, #104]	; 0x68
   12ff4:	ldr	r3, [sp, #3012]	; 0xbc4
   12ff8:	cmp	r3, #0
   12ffc:	beq	1301c <__assert_fail@plt+0x1660>
   13000:	mov	r2, #5
   13004:	ldr	r1, [pc, #1776]	; 136fc <__assert_fail@plt+0x1d40>
   13008:	mov	r0, #0
   1300c:	bl	11638 <dcgettext@plt>
   13010:	ldr	r2, [sp, #24]
   13014:	ldr	r1, [sp, #72]	; 0x48
   13018:	bl	11560 <printf@plt>
   1301c:	ldr	r0, [sp, #68]	; 0x44
   13020:	bl	1198c <getc@plt>
   13024:	ldr	r2, [sp, #28]
   13028:	adds	r3, r0, #1
   1302c:	movne	r3, #1
   13030:	tst	r3, r2
   13034:	str	r0, [sp, #44]	; 0x2c
   13038:	beq	1304c <__assert_fail@plt+0x1690>
   1303c:	ldr	r1, [sp, #68]	; 0x44
   13040:	bl	117d0 <ungetc@plt>
   13044:	mov	r3, #0
   13048:	str	r3, [sp, #44]	; 0x2c
   1304c:	ldr	r3, [sp, #44]	; 0x2c
   13050:	cmn	r3, #1
   13054:	bne	1325c <__assert_fail@plt+0x18a0>
   13058:	ldr	r3, [sp, #3012]	; 0xbc4
   1305c:	cmp	r3, #0
   13060:	bne	13274 <__assert_fail@plt+0x18b8>
   13064:	ldr	r0, [sp, #68]	; 0x44
   13068:	bl	115c0 <ferror@plt>
   1306c:	cmp	r0, #0
   13070:	ldreq	r3, [pc, #1584]	; 136a8 <__assert_fail@plt+0x1cec>
   13074:	ldreq	r0, [r3, #96]	; 0x60
   13078:	beq	12ebc <__assert_fail@plt+0x1500>
   1307c:	bl	117dc <__errno_location@plt>
   13080:	ldr	r2, [sp, #72]	; 0x48
   13084:	mov	r1, #8
   13088:	ldr	r4, [r0]
   1308c:	mov	r0, #0
   13090:	bl	18fc0 <__assert_fail@plt+0x7604>
   13094:	ldr	r2, [pc, #1636]	; 13700 <__assert_fail@plt+0x1d44>
   13098:	mov	r1, r4
   1309c:	mov	r3, r0
   130a0:	mov	r0, #0
   130a4:	bl	116e0 <error@plt>
   130a8:	b	12eb8 <__assert_fail@plt+0x14fc>
   130ac:	mov	r2, #10
   130b0:	ldr	r1, [pc, #1612]	; 13704 <__assert_fail@plt+0x1d48>
   130b4:	ldr	r0, [sp, #56]	; 0x38
   130b8:	bl	1162c <memcmp@plt>
   130bc:	subs	r8, r0, #0
   130c0:	bne	135d8 <__assert_fail@plt+0x1c1c>
   130c4:	mov	r1, r8
   130c8:	ldr	r0, [pc, #1528]	; 136c8 <__assert_fail@plt+0x1d0c>
   130cc:	bl	1271c <__assert_fail@plt+0xd60>
   130d0:	ldr	r3, [pc, #1584]	; 13708 <__assert_fail@plt+0x1d4c>
   130d4:	str	r8, [sp, #28]
   130d8:	str	r3, [sp, #24]
   130dc:	b	12f3c <__assert_fail@plt+0x1580>
   130e0:	ldr	r3, [sp, #56]	; 0x38
   130e4:	add	r1, sp, #80	; 0x50
   130e8:	add	r2, r3, #1
   130ec:	add	r3, r3, #256	; 0x100
   130f0:	add	r3, r3, #1
   130f4:	ldrb	r0, [r2, #-1]
   130f8:	strb	r0, [r1], #1
   130fc:	ldrb	r0, [r2], #2
   13100:	cmp	r2, r3
   13104:	strb	r0, [r1, #127]	; 0x7f
   13108:	bne	130f4 <__assert_fail@plt+0x1738>
   1310c:	mov	r1, #0
   13110:	ldr	r0, [pc, #1524]	; 1370c <__assert_fail@plt+0x1d50>
   13114:	bl	1271c <__assert_fail@plt+0xd60>
   13118:	ldr	r3, [pc, #1520]	; 13710 <__assert_fail@plt+0x1d54>
   1311c:	mov	r8, #1
   13120:	str	r3, [sp, #24]
   13124:	mov	r3, #0
   13128:	str	r3, [sp, #28]
   1312c:	b	12f3c <__assert_fail@plt+0x1580>
   13130:	mov	r3, #1
   13134:	strb	r3, [r5, #24]
   13138:	ldr	r3, [sp, #32]
   1313c:	ldr	r6, [r3, r9, lsl #2]
   13140:	ldr	r3, [sp, #3020]	; 0xbcc
   13144:	cmp	r3, #0
   13148:	beq	131cc <__assert_fail@plt+0x1810>
   1314c:	mov	r0, #32
   13150:	bl	19700 <__assert_fail@plt+0x7d44>
   13154:	mov	r2, #32
   13158:	mov	r1, #0
   1315c:	mov	sl, r0
   13160:	bl	11818 <memset@plt>
   13164:	ldr	r0, [sp, #3024]	; 0xbd0
   13168:	bl	24d8c <__assert_fail@plt+0x133d0>
   1316c:	mov	r0, #100	; 0x64
   13170:	str	r0, [sl, #4]
   13174:	bl	19700 <__assert_fail@plt+0x7d44>
   13178:	mov	r3, #0
   1317c:	str	r3, [sl, #16]
   13180:	ldr	r3, [sp, #3024]	; 0xbd0
   13184:	str	r3, [sl, #12]
   13188:	mov	r3, #0
   1318c:	str	r3, [sl, #20]
   13190:	str	r0, [sl]
   13194:	mov	r0, r6
   13198:	bl	117ac <strlen@plt>
   1319c:	mov	r2, sl
   131a0:	mov	r1, r0
   131a4:	mov	r0, r6
   131a8:	bl	24d1c <__assert_fail@plt+0x13360>
   131ac:	subs	r3, r0, #0
   131b0:	ldrne	r2, [pc, #1352]	; 13700 <__assert_fail@plt+0x1d44>
   131b4:	bne	13640 <__assert_fail@plt+0x1c84>
   131b8:	ldr	r0, [pc, #1364]	; 13714 <__assert_fail@plt+0x1d58>
   131bc:	mov	r1, sl
   131c0:	bl	1271c <__assert_fail@plt+0xd60>
   131c4:	add	r9, r9, #1
   131c8:	b	12f5c <__assert_fail@plt+0x15a0>
   131cc:	ldr	r1, [pc, #1348]	; 13718 <__assert_fail@plt+0x1d5c>
   131d0:	mov	r0, r6
   131d4:	bl	11920 <strpbrk@plt>
   131d8:	cmp	r0, #0
   131dc:	bne	13680 <__assert_fail@plt+0x1cc4>
   131e0:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   131e4:	cmp	r0, #1
   131e8:	bne	13208 <__assert_fail@plt+0x184c>
   131ec:	ldr	r3, [pc, #1320]	; 1371c <__assert_fail@plt+0x1d60>
   131f0:	ldr	r0, [pc, #1320]	; 13720 <__assert_fail@plt+0x1d64>
   131f4:	ldr	r2, [sp, #2996]	; 0xbb4
   131f8:	mov	r1, r6
   131fc:	cmp	r2, #0
   13200:	moveq	r0, r3
   13204:	b	131c0 <__assert_fail@plt+0x1804>
   13208:	ldr	r0, [pc, #1300]	; 13724 <__assert_fail@plt+0x1d68>
   1320c:	ldr	r3, [pc, #1300]	; 13728 <__assert_fail@plt+0x1d6c>
   13210:	b	131f4 <__assert_fail@plt+0x1838>
   13214:	ldr	r3, [pc, #1296]	; 1372c <__assert_fail@plt+0x1d70>
   13218:	strb	fp, [r5, #24]
   1321c:	ldr	r1, [r3, #4]
   13220:	cmp	r1, #0
   13224:	movne	r1, #0
   13228:	ldrne	r0, [pc, #1280]	; 13730 <__assert_fail@plt+0x1d74>
   1322c:	ldreq	r0, [pc, #1280]	; 13734 <__assert_fail@plt+0x1d78>
   13230:	bl	1271c <__assert_fail@plt+0xd60>
   13234:	b	12f78 <__assert_fail@plt+0x15bc>
   13238:	mov	r3, #1
   1323c:	strb	r3, [r5, #24]
   13240:	ldr	r3, [pc, #1252]	; 1372c <__assert_fail@plt+0x1d70>
   13244:	ldr	r1, [r3, #4]
   13248:	cmp	r1, #0
   1324c:	movne	r1, #0
   13250:	ldrne	r0, [pc, #1248]	; 13738 <__assert_fail@plt+0x1d7c>
   13254:	ldreq	r0, [pc, #1248]	; 1373c <__assert_fail@plt+0x1d80>
   13258:	b	13230 <__assert_fail@plt+0x1874>
   1325c:	ldr	r3, [r5, #104]	; 0x68
   13260:	add	r0, sp, #44	; 0x2c
   13264:	blx	r3
   13268:	cmp	r0, #8
   1326c:	bne	1304c <__assert_fail@plt+0x1690>
   13270:	b	13058 <__assert_fail@plt+0x169c>
   13274:	cmp	r8, #0
   13278:	beq	132c4 <__assert_fail@plt+0x1908>
   1327c:	mov	r2, #5
   13280:	ldr	r1, [pc, #1208]	; 13740 <__assert_fail@plt+0x1d84>
   13284:	mov	r0, #0
   13288:	bl	11638 <dcgettext@plt>
   1328c:	ldr	r1, [pc, #1200]	; 13744 <__assert_fail@plt+0x1d88>
   13290:	mov	r2, #5
   13294:	mov	r6, r0
   13298:	mov	r0, #0
   1329c:	bl	11638 <dcgettext@plt>
   132a0:	ldr	r3, [sp, #76]	; 0x4c
   132a4:	cmp	r3, #1
   132a8:	mov	r1, r0
   132ac:	moveq	r1, r6
   132b0:	beq	132bc <__assert_fail@plt+0x1900>
   132b4:	cmp	r3, #2
   132b8:	bne	1332c <__assert_fail@plt+0x1970>
   132bc:	ldr	r0, [pc, #1084]	; 13700 <__assert_fail@plt+0x1d44>
   132c0:	bl	11560 <printf@plt>
   132c4:	ldr	r2, [sp, #36]	; 0x24
   132c8:	ldr	r3, [sp, #20]
   132cc:	orr	r3, r3, r2
   132d0:	ldr	r2, [sp, #2992]	; 0xbb0
   132d4:	cmp	r3, #0
   132d8:	cmpeq	r2, #0
   132dc:	beq	13064 <__assert_fail@plt+0x16a8>
   132e0:	cmp	r2, #0
   132e4:	beq	133dc <__assert_fail@plt+0x1a20>
   132e8:	mov	r0, r2
   132ec:	bl	1174c <localtime@plt>
   132f0:	subs	r6, r0, #0
   132f4:	beq	133dc <__assert_fail@plt+0x1a20>
   132f8:	add	r0, sp, #2288	; 0x8f0
   132fc:	mov	r3, r6
   13300:	ldr	r2, [pc, #1088]	; 13748 <__assert_fail@plt+0x1d8c>
   13304:	mov	r1, #20
   13308:	add	r0, r0, #4
   1330c:	bl	11734 <strftime@plt>
   13310:	cmp	r0, #19
   13314:	beq	13344 <__assert_fail@plt+0x1988>
   13318:	ldr	r3, [pc, #1068]	; 1374c <__assert_fail@plt+0x1d90>
   1331c:	ldr	r2, [pc, #1068]	; 13750 <__assert_fail@plt+0x1d94>
   13320:	ldr	r1, [pc, #908]	; 136b4 <__assert_fail@plt+0x1cf8>
   13324:	ldr	r0, [pc, #1064]	; 13754 <__assert_fail@plt+0x1d98>
   13328:	b	12df8 <__assert_fail@plt+0x143c>
   1332c:	mov	r2, #5
   13330:	ldr	r1, [pc, #1056]	; 13758 <__assert_fail@plt+0x1d9c>
   13334:	mov	r0, #0
   13338:	bl	11638 <dcgettext@plt>
   1333c:	bl	11560 <printf@plt>
   13340:	b	132c4 <__assert_fail@plt+0x1908>
   13344:	ldrb	r0, [sp, #2311]	; 0x907
   13348:	cmp	r0, #0
   1334c:	ldrne	r3, [pc, #1016]	; 1374c <__assert_fail@plt+0x1d90>
   13350:	ldrne	r2, [pc, #1028]	; 1375c <__assert_fail@plt+0x1da0>
   13354:	ldrne	r1, [pc, #856]	; 136b4 <__assert_fail@plt+0x1cf8>
   13358:	ldrne	r0, [pc, #1024]	; 13760 <__assert_fail@plt+0x1da4>
   1335c:	bne	12df8 <__assert_fail@plt+0x143c>
   13360:	ldrb	r3, [sp, #2310]	; 0x906
   13364:	cmp	r3, #0
   13368:	ldreq	r3, [pc, #988]	; 1374c <__assert_fail@plt+0x1d90>
   1336c:	ldreq	r2, [pc, #1008]	; 13764 <__assert_fail@plt+0x1da8>
   13370:	ldreq	r1, [pc, #828]	; 136b4 <__assert_fail@plt+0x1cf8>
   13374:	ldreq	r0, [pc, #1004]	; 13768 <__assert_fail@plt+0x1dac>
   13378:	beq	12df8 <__assert_fail@plt+0x143c>
   1337c:	mov	r2, #5
   13380:	ldr	r1, [pc, #996]	; 1376c <__assert_fail@plt+0x1db0>
   13384:	bl	11638 <dcgettext@plt>
   13388:	ldr	r3, [sp, #2992]	; 0xbb0
   1338c:	add	r1, sp, #2288	; 0x8f0
   13390:	add	r1, r1, #4
   13394:	ldr	r2, [r3, #4]
   13398:	bl	11560 <printf@plt>
   1339c:	add	r0, sp, #2288	; 0x8f0
   133a0:	mov	r3, r6
   133a4:	ldr	r2, [pc, #964]	; 13770 <__assert_fail@plt+0x1db4>
   133a8:	mov	r1, #20
   133ac:	add	r0, r0, #4
   133b0:	bl	11734 <strftime@plt>
   133b4:	cmp	r0, #5
   133b8:	ldrne	r3, [pc, #908]	; 1374c <__assert_fail@plt+0x1d90>
   133bc:	ldrne	r2, [pc, #944]	; 13774 <__assert_fail@plt+0x1db8>
   133c0:	ldrne	r1, [pc, #748]	; 136b4 <__assert_fail@plt+0x1cf8>
   133c4:	ldrne	r0, [pc, #940]	; 13778 <__assert_fail@plt+0x1dbc>
   133c8:	bne	12df8 <__assert_fail@plt+0x143c>
   133cc:	add	r1, sp, #2288	; 0x8f0
   133d0:	add	r1, r1, #4
   133d4:	ldr	r0, [pc, #928]	; 1377c <__assert_fail@plt+0x1dc0>
   133d8:	bl	11560 <printf@plt>
   133dc:	mov	r6, #5
   133e0:	str	r6, [sp]
   133e4:	ldr	r3, [sp, #20]
   133e8:	ldr	r2, [pc, #912]	; 13780 <__assert_fail@plt+0x1dc4>
   133ec:	ldr	r1, [pc, #912]	; 13784 <__assert_fail@plt+0x1dc8>
   133f0:	mov	r0, #0
   133f4:	bl	119b0 <dcngettext@plt>
   133f8:	mov	r2, #1
   133fc:	mov	r3, #0
   13400:	mov	r1, #0
   13404:	strd	r2, [sp, #8]
   13408:	strd	r2, [sp]
   1340c:	mov	r3, #0
   13410:	add	r2, sp, #336	; 0x150
   13414:	mov	r9, #0
   13418:	mov	r8, r0
   1341c:	ldr	r0, [sp, #20]
   13420:	bl	14378 <__assert_fail@plt+0x29bc>
   13424:	mov	r1, r0
   13428:	mov	r0, r8
   1342c:	bl	11560 <printf@plt>
   13430:	ldrb	r0, [r5, #24]
   13434:	mov	r2, r6
   13438:	mov	r8, #1
   1343c:	cmp	r0, #0
   13440:	movne	r0, #0
   13444:	ldrne	r1, [pc, #828]	; 13788 <__assert_fail@plt+0x1dcc>
   13448:	ldreq	r1, [pc, #828]	; 1378c <__assert_fail@plt+0x1dd0>
   1344c:	bl	11638 <dcgettext@plt>
   13450:	mov	r3, #0
   13454:	add	r2, sp, #336	; 0x150
   13458:	strd	r8, [sp, #8]
   1345c:	strd	r8, [sp]
   13460:	mov	r5, r0
   13464:	ldrd	r0, [r4, #40]	; 0x28
   13468:	bl	14378 <__assert_fail@plt+0x29bc>
   1346c:	mov	r1, r0
   13470:	mov	r0, r5
   13474:	bl	11560 <printf@plt>
   13478:	mov	r2, #5
   1347c:	ldr	r1, [pc, #780]	; 13790 <__assert_fail@plt+0x1dd4>
   13480:	mov	r0, #0
   13484:	bl	11638 <dcgettext@plt>
   13488:	strd	r8, [sp, #8]
   1348c:	strd	r8, [sp]
   13490:	mov	r3, #0
   13494:	add	r2, sp, #336	; 0x150
   13498:	mov	r5, r0
   1349c:	ldrd	r0, [r4, #48]	; 0x30
   134a0:	bl	14378 <__assert_fail@plt+0x29bc>
   134a4:	strd	r8, [sp, #8]
   134a8:	strd	r8, [sp]
   134ac:	mov	r3, #0
   134b0:	add	r2, sp, #988	; 0x3dc
   134b4:	mov	r6, r0
   134b8:	ldrd	r0, [r4, #56]	; 0x38
   134bc:	bl	14378 <__assert_fail@plt+0x29bc>
   134c0:	add	r2, sp, #1632	; 0x660
   134c4:	strd	r8, [sp, #8]
   134c8:	strd	r8, [sp]
   134cc:	mov	r3, #0
   134d0:	add	r2, r2, #8
   134d4:	mov	sl, r0
   134d8:	ldrd	r0, [r4, #64]	; 0x40
   134dc:	bl	14378 <__assert_fail@plt+0x29bc>
   134e0:	add	r2, sp, #2288	; 0x8f0
   134e4:	strd	r8, [sp, #8]
   134e8:	strd	r8, [sp]
   134ec:	mov	r3, #0
   134f0:	add	r2, r2, #4
   134f4:	mov	fp, r0
   134f8:	ldrd	r0, [r4, #72]	; 0x48
   134fc:	bl	14378 <__assert_fail@plt+0x29bc>
   13500:	mov	r3, fp
   13504:	mov	r2, sl
   13508:	mov	r1, r6
   1350c:	str	r0, [sp]
   13510:	mov	r0, r5
   13514:	bl	11560 <printf@plt>
   13518:	cmp	r7, #0
   1351c:	bne	13588 <__assert_fail@plt+0x1bcc>
   13520:	ldrb	r3, [r4, #24]
   13524:	cmp	r3, #0
   13528:	movne	r2, #5
   1352c:	ldrne	r1, [pc, #608]	; 13794 <__assert_fail@plt+0x1dd8>
   13530:	bne	13594 <__assert_fail@plt+0x1bd8>
   13534:	ldrd	r2, [r4, #48]	; 0x30
   13538:	orrs	r3, r2, r3
   1353c:	mov	r2, #5
   13540:	ldreq	r1, [pc, #592]	; 13798 <__assert_fail@plt+0x1ddc>
   13544:	beq	13594 <__assert_fail@plt+0x1bd8>
   13548:	ldr	r1, [pc, #588]	; 1379c <__assert_fail@plt+0x1de0>
   1354c:	mov	r0, r7
   13550:	bl	11638 <dcgettext@plt>
   13554:	mov	r5, r0
   13558:	ldrd	r0, [r4, #48]	; 0x30
   1355c:	bl	2758c <__assert_fail@plt+0x15bd0>
   13560:	vldr	s15, [sp, #20]
   13564:	vldr	d5, [pc, #308]	; 136a0 <__assert_fail@plt+0x1ce4>
   13568:	vcvt.f64.u32	d7, s15
   1356c:	vmov	d6, r0, r1
   13570:	mov	r0, r5
   13574:	vsub.f64	d7, d6, d7
   13578:	vmul.f64	d7, d7, d5
   1357c:	vdiv.f64	d5, d7, d6
   13580:	vmov	r2, r3, d5
   13584:	bl	11560 <printf@plt>
   13588:	mov	r0, #10
   1358c:	bl	11824 <putchar@plt>
   13590:	b	13064 <__assert_fail@plt+0x16a8>
   13594:	mov	r0, r7
   13598:	bl	11638 <dcgettext@plt>
   1359c:	bl	11560 <printf@plt>
   135a0:	b	13588 <__assert_fail@plt+0x1bcc>
   135a4:	mov	r2, #0
   135a8:	mov	r1, #10
   135ac:	add	r0, sp, #44	; 0x2c
   135b0:	bl	12a9c <__assert_fail@plt+0x10e0>
   135b4:	ldr	r0, [sp, #56]	; 0x38
   135b8:	ldr	r3, [sp, #68]	; 0x44
   135bc:	rsb	r2, r8, #10
   135c0:	mov	r1, #1
   135c4:	add	r0, r0, r8
   135c8:	bl	116bc <fread@plt>
   135cc:	add	r5, r8, r0
   135d0:	cmp	r5, #9
   135d4:	bhi	130ac <__assert_fail@plt+0x16f0>
   135d8:	mov	r2, #0
   135dc:	mov	r1, #256	; 0x100
   135e0:	add	r0, sp, #44	; 0x2c
   135e4:	bl	12a9c <__assert_fail@plt+0x10e0>
   135e8:	cmp	r5, #255	; 0xff
   135ec:	bgt	130e0 <__assert_fail@plt+0x1724>
   135f0:	ldr	r0, [sp, #56]	; 0x38
   135f4:	ldr	r3, [sp, #68]	; 0x44
   135f8:	rsb	r2, r5, #256	; 0x100
   135fc:	mov	r1, #1
   13600:	add	r0, r0, r5
   13604:	bl	116bc <fread@plt>
   13608:	add	r0, r0, r5
   1360c:	cmp	r0, #256	; 0x100
   13610:	beq	130e0 <__assert_fail@plt+0x1724>
   13614:	mov	r2, #5
   13618:	ldr	r1, [pc, #384]	; 137a0 <__assert_fail@plt+0x1de4>
   1361c:	mov	r0, #0
   13620:	bl	11638 <dcgettext@plt>
   13624:	mov	r2, r6
   13628:	mov	r1, #8
   1362c:	mov	r4, r0
   13630:	mov	r0, #0
   13634:	bl	18fc0 <__assert_fail@plt+0x7604>
   13638:	mov	r2, r4
   1363c:	mov	r3, r0
   13640:	mov	r1, #0
   13644:	mov	r0, #1
   13648:	bl	116e0 <error@plt>
   1364c:	bne	12f1c <__assert_fail@plt+0x1560>
   13650:	ldr	r3, [r4, #20]
   13654:	cmp	r3, #2
   13658:	bne	12ec8 <__assert_fail@plt+0x150c>
   1365c:	mov	r2, #5
   13660:	ldr	r1, [pc, #316]	; 137a4 <__assert_fail@plt+0x1de8>
   13664:	mov	r0, r5
   13668:	bl	11638 <dcgettext@plt>
   1366c:	mov	r1, r5
   13670:	mov	r2, r0
   13674:	mov	r0, r5
   13678:	bl	116e0 <error@plt>
   1367c:	b	12eb8 <__assert_fail@plt+0x14fc>
   13680:	ldr	r3, [sp, #2996]	; 0xbb4
   13684:	cmp	r3, #0
   13688:	movne	r1, r6
   1368c:	ldrne	r0, [pc, #276]	; 137a8 <__assert_fail@plt+0x1dec>
   13690:	moveq	r1, r6
   13694:	ldreq	r0, [pc, #272]	; 137ac <__assert_fail@plt+0x1df0>
   13698:	b	131c0 <__assert_fail@plt+0x1804>
   1369c:	nop			; (mov r0, r0)
   136a0:	andeq	r0, r0, r0
   136a4:	subsmi	r0, r9, r0
   136a8:	andeq	sl, r3, r8, lsr #4
   136ac:	ldrdeq	r7, [r2], -r7	; <UNPREDICTABLE>
   136b0:	andeq	r0, r0, r7, lsr #7
   136b4:	andeq	r7, r2, r6, asr #25
   136b8:	andeq	r7, r2, ip, lsl sp
   136bc:	andeq	r7, r2, r5, lsr #26
   136c0:	andeq	r7, r2, lr, lsr #27
   136c4:	andeq	r7, r2, r3, lsr #29
   136c8:			; <UNDEFINED> instruction: 0x000137b0
   136cc:	andeq	r7, r2, r3, lsl #26
   136d0:	andeq	r2, r1, r0, lsr sl
   136d4:	andeq	sl, r3, r8, asr #4
   136d8:	andeq	r2, r1, r0, ror #15
   136dc:	muleq	r1, r0, r7
   136e0:	andeq	r2, r1, r0, ror #14
   136e4:	andeq	sl, r3, r0, lsl #5
   136e8:	andeq	r2, r1, r8, lsl #12
   136ec:	andeq	r2, r1, r0, lsr r6
   136f0:	andeq	r2, r1, ip, ror #11
   136f4:	andeq	r2, r1, ip, asr #20
   136f8:	strdeq	r3, [r1], -r4
   136fc:	andeq	r7, r2, r8, lsl pc
   13700:	andeq	r9, r2, r4, ror #1
   13704:	strdeq	r7, [r2], -r3
   13708:	andeq	r7, r2, fp, lsl #26
   1370c:	andeq	r2, r1, r4, lsl #22
   13710:	andeq	r7, r2, r8, lsl sp
   13714:	strdeq	r2, [r1], -r0
   13718:	andeq	r7, r2, r2, lsl pc
   1371c:	andeq	r2, r1, r0, lsr #25
   13720:	strdeq	r2, [r1], -r8
   13724:	andeq	r2, r1, r4, lsl #19
   13728:	andeq	r2, r1, r8, ror #18
   1372c:			; <UNDEFINED> instruction: 0x0003a1b0
   13730:	andeq	r2, r1, r0, asr #18
   13734:	strdeq	r2, [r1], -r0
   13738:	andeq	r2, r1, r8, lsl r9
   1373c:	andeq	r2, r1, r8, asr #17
   13740:	andeq	r7, r2, sl, lsr pc
   13744:	andeq	r7, r2, r1, ror pc
   13748:	ldrdeq	r7, [r2], -pc	; <UNPREDICTABLE>
   1374c:	strdeq	r7, [r2], -sp
   13750:	andeq	r0, r0, sp, asr #6
   13754:	strdeq	r7, [r2], -r1
   13758:	andeq	r7, r2, r5, lsr #31
   1375c:	andeq	r0, r0, lr, asr #6
   13760:	andeq	r8, r2, fp
   13764:	andeq	r0, r0, pc, asr #6
   13768:	andeq	r8, r2, r8, lsr #32
   1376c:	andeq	r8, r2, r5, asr #32
   13770:	andeq	r8, r2, ip, rrx
   13774:	andeq	r0, r0, r3, asr r3
   13778:	andeq	r8, r2, pc, rrx
   1377c:	andeq	r8, r2, r6, asr #21
   13780:	andeq	r8, r2, ip, ror r0
   13784:	muleq	r2, ip, r0
   13788:	strheq	r8, [r2], -fp
   1378c:	ldrdeq	r8, [r2], -r3
   13790:	andeq	r8, r2, r6, ror #1
   13794:	muleq	r2, sl, r1
   13798:	andeq	r8, r2, r0, lsr #4
   1379c:	strdeq	r8, [r2], -r2
   137a0:	ldrdeq	r7, [r2], -fp
   137a4:	strdeq	r7, [r2], -r7	; <UNPREDICTABLE>
   137a8:	andeq	r2, r1, r8, asr #19
   137ac:	andeq	r2, r1, r0, lsr #19
   137b0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   137b4:	mov	r4, r0
   137b8:	ldr	r2, [r0]
   137bc:	cmp	r2, #128	; 0x80
   137c0:	bne	13848 <__assert_fail@plt+0x1e8c>
   137c4:	ldr	r6, [r0, #24]
   137c8:	mov	r0, r6
   137cc:	bl	1183c <fgetc@plt>
   137d0:	sxtb	r0, r0
   137d4:	lsl	r5, r0, #8
   137d8:	mov	r0, r6
   137dc:	bl	1183c <fgetc@plt>
   137e0:	uxtb	r0, r0
   137e4:	orr	r5, r5, r0
   137e8:	ldr	r0, [r4, #4]
   137ec:	add	r5, r0, r5
   137f0:	str	r5, [r4, #4]
   137f4:	ldr	r7, [r4, #4]
   137f8:	ldr	r3, [r4, #8]
   137fc:	lsr	r2, r7, #31
   13800:	cmp	r7, r3
   13804:	orrgt	r2, r2, #1
   13808:	cmp	r2, #0
   1380c:	beq	13860 <__assert_fail@plt+0x1ea4>
   13810:	mov	r2, #5
   13814:	ldr	r1, [pc, #432]	; 139cc <__assert_fail@plt+0x2010>
   13818:	mov	r0, #0
   1381c:	bl	11638 <dcgettext@plt>
   13820:	ldr	r2, [r4, #28]
   13824:	mov	r1, #8
   13828:	mov	r5, r0
   1382c:	mov	r0, #0
   13830:	bl	18fc0 <__assert_fail@plt+0x7604>
   13834:	mov	r2, r5
   13838:	mov	r1, #0
   1383c:	mov	r3, r0
   13840:	mov	r0, #1
   13844:	bl	116e0 <error@plt>
   13848:	ldr	r3, [r0, #4]
   1384c:	cmp	r2, #127	; 0x7f
   13850:	subgt	r2, r2, #256	; 0x100
   13854:	add	r3, r3, r2
   13858:	str	r3, [r0, #4]
   1385c:	b	137f4 <__assert_fail@plt+0x1e38>
   13860:	add	r1, sp, #8
   13864:	ldr	r3, [r4, #24]
   13868:	str	r2, [r1, #-4]!
   1386c:	mov	r0, sp
   13870:	str	r2, [sp]
   13874:	bl	11938 <getdelim@plt>
   13878:	subs	r5, r0, #0
   1387c:	blt	139c0 <__assert_fail@plt+0x2004>
   13880:	ldr	r3, [sp]
   13884:	cmp	r3, #0
   13888:	bne	138a0 <__assert_fail@plt+0x1ee4>
   1388c:	ldr	r3, [pc, #316]	; 139d0 <__assert_fail@plt+0x2014>
   13890:	ldr	r1, [pc, #316]	; 139d4 <__assert_fail@plt+0x2018>
   13894:	ldr	r0, [pc, #316]	; 139d8 <__assert_fail@plt+0x201c>
   13898:	mov	r2, #245	; 0xf5
   1389c:	bl	119bc <__assert_fail@plt>
   138a0:	add	r6, r7, r5
   138a4:	ldr	r3, [r4, #16]
   138a8:	add	r6, r6, #1
   138ac:	cmp	r6, r3
   138b0:	bls	138d0 <__assert_fail@plt+0x1f14>
   138b4:	mov	r1, r6
   138b8:	ldr	r0, [r4, #12]
   138bc:	bl	1a484 <__assert_fail@plt+0x8ac8>
   138c0:	cmp	r0, #0
   138c4:	beq	139c0 <__assert_fail@plt+0x2004>
   138c8:	str	r6, [r4, #16]
   138cc:	str	r0, [r4, #12]
   138d0:	ldr	r0, [r4, #12]
   138d4:	add	r2, r5, #1
   138d8:	ldr	r1, [sp]
   138dc:	add	r0, r0, r7
   138e0:	bl	115e4 <memcpy@plt>
   138e4:	ldr	r0, [sp]
   138e8:	bl	1a30c <__assert_fail@plt+0x8950>
   138ec:	cmp	r5, #0
   138f0:	beq	139c0 <__assert_fail@plt+0x2004>
   138f4:	ldr	r0, [r4, #24]
   138f8:	bl	1198c <getc@plt>
   138fc:	ldr	r3, [r4, #4]
   13900:	add	r5, r5, r3
   13904:	sub	r5, r5, #1
   13908:	cmp	r5, #0
   1390c:	str	r5, [r4, #8]
   13910:	str	r0, [r4]
   13914:	bgt	13950 <__assert_fail@plt+0x1f94>
   13918:	mov	r2, #5
   1391c:	ldr	r1, [pc, #168]	; 139cc <__assert_fail@plt+0x2010>
   13920:	mov	r0, #0
   13924:	bl	11638 <dcgettext@plt>
   13928:	ldr	r2, [r4, #28]
   1392c:	mov	r1, #8
   13930:	mov	r5, r0
   13934:	mov	r0, #0
   13938:	bl	18fc0 <__assert_fail@plt+0x7604>
   1393c:	mov	r2, r5
   13940:	mov	r1, #0
   13944:	mov	r3, r0
   13948:	mov	r0, #1
   1394c:	bl	116e0 <error@plt>
   13950:	ldr	r3, [r4, #8]
   13954:	ldr	r2, [r4, #12]
   13958:	sub	r3, r3, #1
   1395c:	add	r1, r2, r3
   13960:	ldrb	r3, [r2, r3]
   13964:	cmp	r3, #0
   13968:	ldreq	r3, [pc, #108]	; 139dc <__assert_fail@plt+0x2020>
   1396c:	moveq	r2, #568	; 0x238
   13970:	ldreq	r1, [pc, #92]	; 139d4 <__assert_fail@plt+0x2018>
   13974:	ldreq	r0, [pc, #100]	; 139e0 <__assert_fail@plt+0x2024>
   13978:	beq	1389c <__assert_fail@plt+0x1ee0>
   1397c:	ldrb	r3, [r1, #1]
   13980:	cmp	r3, #0
   13984:	ldrne	r3, [pc, #80]	; 139dc <__assert_fail@plt+0x2020>
   13988:	ldrne	r2, [pc, #84]	; 139e4 <__assert_fail@plt+0x2028>
   1398c:	ldrne	r1, [pc, #64]	; 139d4 <__assert_fail@plt+0x2018>
   13990:	ldrne	r0, [pc, #80]	; 139e8 <__assert_fail@plt+0x202c>
   13994:	bne	1389c <__assert_fail@plt+0x1ee0>
   13998:	ldrb	r3, [r1, #2]
   1399c:	cmp	r3, #0
   139a0:	streq	r2, [r4, #20]
   139a4:	moveq	r0, #1
   139a8:	beq	139c4 <__assert_fail@plt+0x2008>
   139ac:	ldr	r3, [pc, #40]	; 139dc <__assert_fail@plt+0x2020>
   139b0:	ldr	r2, [pc, #52]	; 139ec <__assert_fail@plt+0x2030>
   139b4:	ldr	r1, [pc, #24]	; 139d4 <__assert_fail@plt+0x2018>
   139b8:	ldr	r0, [pc, #48]	; 139f0 <__assert_fail@plt+0x2034>
   139bc:	b	1389c <__assert_fail@plt+0x1ee0>
   139c0:	mov	r0, #8
   139c4:	add	sp, sp, #12
   139c8:	pop	{r4, r5, r6, r7, pc}
   139cc:	andeq	r8, r2, r0, asr #4
   139d0:	andeq	r7, r2, r9, lsl #18
   139d4:	andeq	r7, r2, r6, asr #25
   139d8:	andeq	r8, r2, r9, ror #4
   139dc:	andeq	r7, r2, r9, lsl r9
   139e0:	andeq	r8, r2, r3, ror r2
   139e4:	andeq	r0, r0, r9, lsr r2
   139e8:	andeq	r8, r2, r0, lsl #5
   139ec:	andeq	r0, r0, sl, lsr r2
   139f0:	andeq	r8, r2, sp, lsl #5
   139f4:	push	{r4, r5, r6, lr}
   139f8:	mov	r2, r0
   139fc:	ldr	r4, [pc, #60]	; 13a40 <__assert_fail@plt+0x2084>
   13a00:	mov	r5, r0
   13a04:	mov	r1, #5
   13a08:	ldr	r3, [r4, #16]
   13a0c:	ldr	r0, [r4]
   13a10:	bl	125a8 <__assert_fail@plt+0xbec>
   13a14:	cmp	r0, #1
   13a18:	moveq	r0, #4
   13a1c:	ands	r3, r0, #12
   13a20:	popne	{r4, r5, r6, pc}
   13a24:	mov	r2, r5
   13a28:	mov	r1, #1
   13a2c:	ldr	r0, [r4, #16]
   13a30:	bl	125a8 <__assert_fail@plt+0xbec>
   13a34:	cmp	r0, #1
   13a38:	moveq	r0, #2
   13a3c:	pop	{r4, r5, r6, pc}
   13a40:	andeq	sl, r3, r8, lsr #4
   13a44:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   13a48:	mov	r5, r0
   13a4c:	mov	r8, r1
   13a50:	mov	r7, r2
   13a54:	mov	r6, r3
   13a58:	bl	118fc <clearerr@plt>
   13a5c:	mov	r1, #4
   13a60:	mov	r3, r5
   13a64:	mov	r2, #1
   13a68:	add	r0, sp, r1
   13a6c:	bl	116bc <fread@plt>
   13a70:	cmp	r0, #1
   13a74:	beq	13ae8 <__assert_fail@plt+0x212c>
   13a78:	mov	r2, r8
   13a7c:	mov	r1, #8
   13a80:	mov	r0, #0
   13a84:	bl	18fc0 <__assert_fail@plt+0x7604>
   13a88:	mov	r4, r0
   13a8c:	mov	r0, r5
   13a90:	bl	11794 <feof@plt>
   13a94:	subs	r6, r0, #0
   13a98:	beq	13ac0 <__assert_fail@plt+0x2104>
   13a9c:	mov	r2, #5
   13aa0:	ldr	r1, [pc, #204]	; 13b74 <__assert_fail@plt+0x21b8>
   13aa4:	mov	r0, #0
   13aa8:	bl	11638 <dcgettext@plt>
   13aac:	mov	r3, r4
   13ab0:	mov	r1, #0
   13ab4:	mov	r2, r0
   13ab8:	mov	r0, #1
   13abc:	bl	116e0 <error@plt>
   13ac0:	bl	117dc <__errno_location@plt>
   13ac4:	mov	r2, #5
   13ac8:	ldr	r1, [pc, #168]	; 13b78 <__assert_fail@plt+0x21bc>
   13acc:	ldr	r5, [r0]
   13ad0:	mov	r0, r6
   13ad4:	bl	11638 <dcgettext@plt>
   13ad8:	mov	r3, r4
   13adc:	mov	r1, r5
   13ae0:	mov	r2, r0
   13ae4:	b	13ab8 <__assert_fail@plt+0x20fc>
   13ae8:	ldr	r4, [r6]
   13aec:	ldr	r3, [sp, #4]
   13af0:	cmp	r4, #0
   13af4:	rev	r5, r3
   13af8:	bne	13b68 <__assert_fail@plt+0x21ac>
   13afc:	cmp	r7, r3
   13b00:	blt	13b18 <__assert_fail@plt+0x215c>
   13b04:	cmp	r7, r5
   13b08:	strlt	r0, [r6]
   13b0c:	mov	r0, r3
   13b10:	add	sp, sp, #8
   13b14:	pop	{r4, r5, r6, r7, r8, pc}
   13b18:	cmp	r7, r5
   13b1c:	blt	13b0c <__assert_fail@plt+0x2150>
   13b20:	mov	r2, #5
   13b24:	ldr	r1, [pc, #80]	; 13b7c <__assert_fail@plt+0x21c0>
   13b28:	mov	r0, r4
   13b2c:	bl	11638 <dcgettext@plt>
   13b30:	mov	r2, r8
   13b34:	mov	r1, #8
   13b38:	mov	r7, r0
   13b3c:	mov	r0, r4
   13b40:	bl	18fc0 <__assert_fail@plt+0x7604>
   13b44:	mov	r2, r7
   13b48:	mov	r1, r4
   13b4c:	mov	r3, r0
   13b50:	mov	r0, r4
   13b54:	bl	116e0 <error@plt>
   13b58:	mov	r3, #2
   13b5c:	str	r3, [r6]
   13b60:	mov	r3, r5
   13b64:	b	13b0c <__assert_fail@plt+0x2150>
   13b68:	cmp	r4, #2
   13b6c:	moveq	r3, r5
   13b70:	b	13b0c <__assert_fail@plt+0x2150>
   13b74:	andeq	r8, r2, r2, lsl #11
   13b78:	muleq	r2, r7, r5
   13b7c:			; <UNDEFINED> instruction: 0x000285b4
   13b80:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   13b84:	mov	r5, r0
   13b88:	ldr	r3, [pc, #120]	; 13c08 <__assert_fail@plt+0x224c>
   13b8c:	ldr	r0, [r3]
   13b90:	bl	1a2bc <__assert_fail@plt+0x8900>
   13b94:	ldr	r3, [pc, #112]	; 13c0c <__assert_fail@plt+0x2250>
   13b98:	mov	r2, #5
   13b9c:	ldr	r1, [pc, #108]	; 13c10 <__assert_fail@plt+0x2254>
   13ba0:	ldr	r4, [r3]
   13ba4:	ldr	r3, [pc, #104]	; 13c14 <__assert_fail@plt+0x2258>
   13ba8:	mov	r0, #0
   13bac:	ldr	r6, [r3]
   13bb0:	bl	11638 <dcgettext@plt>
   13bb4:	mov	r2, #5
   13bb8:	ldr	r1, [pc, #88]	; 13c18 <__assert_fail@plt+0x225c>
   13bbc:	mov	r7, r0
   13bc0:	mov	r0, #0
   13bc4:	bl	11638 <dcgettext@plt>
   13bc8:	mov	r2, #5
   13bcc:	ldr	r1, [pc, #72]	; 13c1c <__assert_fail@plt+0x2260>
   13bd0:	mov	r8, r0
   13bd4:	mov	r0, #0
   13bd8:	bl	11638 <dcgettext@plt>
   13bdc:	mov	r3, #0
   13be0:	str	r3, [sp, #12]
   13be4:	stm	sp, {r7, r8}
   13be8:	mov	r3, r6
   13bec:	ldr	r2, [pc, #44]	; 13c20 <__assert_fail@plt+0x2264>
   13bf0:	mov	r1, r5
   13bf4:	str	r0, [sp, #8]
   13bf8:	mov	r0, r4
   13bfc:	bl	19650 <__assert_fail@plt+0x7c94>
   13c00:	add	sp, sp, #16
   13c04:	pop	{r4, r5, r6, r7, r8, pc}
   13c08:	andeq	sl, r3, r8, lsl r2
   13c0c:	andeq	sl, r3, ip, lsl r2
   13c10:	strdeq	r8, [r2], -r6
   13c14:			; <UNDEFINED> instruction: 0x0003a1bc
   13c18:	andeq	r8, r2, r5, lsl #12
   13c1c:	andeq	r8, r2, r4, lsl r6
   13c20:	andeq	r8, r2, r1, lsr #12
   13c24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c28:	cmp	r2, #0
   13c2c:	sub	sp, sp, #8192	; 0x2000
   13c30:	sub	sp, sp, #8
   13c34:	mov	r7, r3
   13c38:	beq	13cec <__assert_fail@plt+0x2330>
   13c3c:	add	r2, sp, #8192	; 0x2000
   13c40:	add	r2, r2, #40	; 0x28
   13c44:	add	r5, sp, #8
   13c48:	str	r1, [sp]
   13c4c:	mov	sl, r0
   13c50:	mov	r9, r1
   13c54:	mvn	r3, #0
   13c58:	ldr	r2, [r2]
   13c5c:	mov	r1, #8192	; 0x2000
   13c60:	mov	r0, r5
   13c64:	bl	18da4 <__assert_fail@plt+0x73e8>
   13c68:	cmp	r0, #8192	; 0x2000
   13c6c:	mov	r6, r0
   13c70:	movcc	r4, r5
   13c74:	bcc	13ca4 <__assert_fail@plt+0x22e8>
   13c78:	add	r8, r0, #1
   13c7c:	mov	r0, r8
   13c80:	bl	19700 <__assert_fail@plt+0x7d44>
   13c84:	add	r2, sp, #8192	; 0x2000
   13c88:	add	r2, r2, #40	; 0x28
   13c8c:	str	r9, [sp]
   13c90:	mvn	r3, #0
   13c94:	ldr	r2, [r2]
   13c98:	mov	r1, r8
   13c9c:	mov	r4, r0
   13ca0:	bl	18da4 <__assert_fail@plt+0x73e8>
   13ca4:	mov	r1, r6
   13ca8:	mov	r0, r4
   13cac:	bl	13d08 <__assert_fail@plt+0x234c>
   13cb0:	mov	r3, #0
   13cb4:	mov	r2, r4
   13cb8:	mov	r1, r7
   13cbc:	strb	r3, [r4, r0]
   13cc0:	mov	r0, sl
   13cc4:	bl	117c4 <fprintf@plt>
   13cc8:	cmp	r4, r5
   13ccc:	mov	r6, r0
   13cd0:	beq	13cdc <__assert_fail@plt+0x2320>
   13cd4:	mov	r0, r4
   13cd8:	bl	1a30c <__assert_fail@plt+0x8950>
   13cdc:	mov	r0, r6
   13ce0:	add	sp, sp, #8192	; 0x2000
   13ce4:	add	sp, sp, #8
   13ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cec:	add	r3, sp, #8192	; 0x2000
   13cf0:	add	r3, r3, #40	; 0x28
   13cf4:	mov	r1, r7
   13cf8:	ldr	r2, [r3]
   13cfc:	bl	117c4 <fprintf@plt>
   13d00:	mov	r6, r0
   13d04:	b	13cdc <__assert_fail@plt+0x2320>
   13d08:	push	{r4, r5, r6, r7, r8, r9, lr}
   13d0c:	sub	sp, sp, #20
   13d10:	mov	r6, r0
   13d14:	mov	r4, r1
   13d18:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   13d1c:	add	r8, r6, r4
   13d20:	cmp	r0, #1
   13d24:	movls	r5, #63	; 0x3f
   13d28:	bls	13d64 <__assert_fail@plt+0x23a8>
   13d2c:	mov	r4, r6
   13d30:	mov	r5, r6
   13d34:	cmp	r5, r8
   13d38:	bcc	13d78 <__assert_fail@plt+0x23bc>
   13d3c:	sub	r4, r4, r6
   13d40:	b	13d6c <__assert_fail@plt+0x23b0>
   13d44:	bl	1177c <__ctype_b_loc@plt>
   13d48:	ldrb	r3, [r6]
   13d4c:	add	r6, r6, #1
   13d50:	lsl	r3, r3, #1
   13d54:	ldr	r2, [r0]
   13d58:	ldrh	r3, [r2, r3]
   13d5c:	tst	r3, #16384	; 0x4000
   13d60:	strbeq	r5, [r6, #-1]
   13d64:	cmp	r8, r6
   13d68:	bhi	13d44 <__assert_fail@plt+0x2388>
   13d6c:	mov	r0, r4
   13d70:	add	sp, sp, #20
   13d74:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13d78:	ldrb	r3, [r5]
   13d7c:	cmp	r3, #63	; 0x3f
   13d80:	bhi	13da8 <__assert_fail@plt+0x23ec>
   13d84:	cmp	r3, #37	; 0x25
   13d88:	bcs	13d98 <__assert_fail@plt+0x23dc>
   13d8c:	sub	r2, r3, #32
   13d90:	cmp	r2, #3
   13d94:	bhi	13dc4 <__assert_fail@plt+0x2408>
   13d98:	add	r5, r5, #1
   13d9c:	strb	r3, [r4]
   13da0:	add	r4, r4, #1
   13da4:	b	13d34 <__assert_fail@plt+0x2378>
   13da8:	cmp	r3, #65	; 0x41
   13dac:	bcc	13dc4 <__assert_fail@plt+0x2408>
   13db0:	cmp	r3, #95	; 0x5f
   13db4:	bls	13d98 <__assert_fail@plt+0x23dc>
   13db8:	sub	r2, r3, #97	; 0x61
   13dbc:	cmp	r2, #29
   13dc0:	b	13d94 <__assert_fail@plt+0x23d8>
   13dc4:	mov	r9, #63	; 0x3f
   13dc8:	mov	r3, #0
   13dcc:	str	r3, [sp, #8]
   13dd0:	str	r3, [sp, #12]
   13dd4:	add	r3, sp, #8
   13dd8:	sub	r2, r8, r5
   13ddc:	mov	r1, r5
   13de0:	add	r0, sp, #4
   13de4:	bl	1a434 <__assert_fail@plt+0x8a78>
   13de8:	cmn	r0, #1
   13dec:	mov	r7, r0
   13df0:	addeq	r5, r5, #1
   13df4:	moveq	r3, #63	; 0x3f
   13df8:	beq	13d9c <__assert_fail@plt+0x23e0>
   13dfc:	cmn	r0, #2
   13e00:	moveq	r3, #63	; 0x3f
   13e04:	strbeq	r3, [r4]
   13e08:	moveq	r5, r8
   13e0c:	addeq	r4, r4, #1
   13e10:	beq	13d34 <__assert_fail@plt+0x2378>
   13e14:	cmp	r0, #0
   13e18:	ldr	r0, [sp, #4]
   13e1c:	moveq	r7, #1
   13e20:	bl	11584 <wcwidth@plt>
   13e24:	add	r3, r5, r7
   13e28:	cmp	r0, #0
   13e2c:	strblt	r9, [r4]
   13e30:	movlt	r5, r3
   13e34:	addlt	r4, r4, #1
   13e38:	blt	13e54 <__assert_fail@plt+0x2498>
   13e3c:	sub	r2, r4, #1
   13e40:	ldrb	r1, [r5], #1
   13e44:	cmp	r3, r5
   13e48:	strb	r1, [r2, #1]!
   13e4c:	bne	13e40 <__assert_fail@plt+0x2484>
   13e50:	add	r4, r4, r7
   13e54:	add	r0, sp, #8
   13e58:	bl	11614 <mbsinit@plt>
   13e5c:	cmp	r0, #0
   13e60:	beq	13dd4 <__assert_fail@plt+0x2418>
   13e64:	b	13d34 <__assert_fail@plt+0x2378>
   13e68:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e6c:	mov	r5, #0
   13e70:	ldr	r4, [pc, #236]	; 13f64 <__assert_fail@plt+0x25a8>
   13e74:	mov	r6, r0
   13e78:	mov	r7, r5
   13e7c:	mov	fp, #12
   13e80:	mov	r8, r4
   13e84:	mul	sl, fp, r7
   13e88:	mov	r1, r6
   13e8c:	ldr	r9, [sl, r4]
   13e90:	mov	r0, r9
   13e94:	bl	11554 <strcmp@plt>
   13e98:	cmp	r0, #0
   13e9c:	beq	13f54 <__assert_fail@plt+0x2598>
   13ea0:	mov	r0, r9
   13ea4:	bl	19210 <__assert_fail@plt+0x7854>
   13ea8:	bl	117ac <strlen@plt>
   13eac:	add	r7, r7, #1
   13eb0:	cmp	r7, #13
   13eb4:	add	r0, r0, #2
   13eb8:	add	r5, r5, r0
   13ebc:	bne	13e84 <__assert_fail@plt+0x24c8>
   13ec0:	add	r0, r5, #1
   13ec4:	bl	19700 <__assert_fail@plt+0x7d44>
   13ec8:	ldr	r7, [pc, #152]	; 13f68 <__assert_fail@plt+0x25ac>
   13ecc:	ldr	sl, [pc, #152]	; 13f6c <__assert_fail@plt+0x25b0>
   13ed0:	mov	fp, #0
   13ed4:	mov	r9, #12
   13ed8:	mov	r5, r0
   13edc:	mov	r4, r0
   13ee0:	mul	r3, r9, fp
   13ee4:	add	fp, fp, #1
   13ee8:	ldr	r0, [r8, r3]
   13eec:	bl	19210 <__assert_fail@plt+0x7854>
   13ef0:	mov	r1, r7
   13ef4:	mov	r2, r0
   13ef8:	mov	r0, r4
   13efc:	bl	11908 <sprintf@plt>
   13f00:	cmp	fp, #13
   13f04:	add	r4, r4, r0
   13f08:	bne	13f40 <__assert_fail@plt+0x2584>
   13f0c:	mov	r2, #5
   13f10:	ldr	r1, [pc, #88]	; 13f70 <__assert_fail@plt+0x25b4>
   13f14:	mov	r0, #0
   13f18:	bl	11638 <dcgettext@plt>
   13f1c:	mov	r4, r0
   13f20:	mov	r0, r6
   13f24:	bl	19210 <__assert_fail@plt+0x7854>
   13f28:	str	r5, [sp]
   13f2c:	mov	r2, r4
   13f30:	mov	r1, #0
   13f34:	mov	r3, r0
   13f38:	mov	r0, #1
   13f3c:	bl	116e0 <error@plt>
   13f40:	mov	r0, r4
   13f44:	mov	r1, sl
   13f48:	bl	116b0 <strcpy@plt>
   13f4c:	add	r4, r4, #2
   13f50:	b	13ee0 <__assert_fail@plt+0x2524>
   13f54:	add	r4, r4, sl
   13f58:	ldr	r0, [r4, #8]
   13f5c:	add	sp, sp, #12
   13f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f64:	andeq	r8, r2, r0, asr #12
   13f68:	andeq	r9, r2, r4, ror #1
   13f6c:	ldrdeq	r8, [r2], -ip
   13f70:	ldrdeq	r8, [r2], -pc	; <UNPREDICTABLE>
   13f74:	cmp	r0, #12
   13f78:	movls	r3, #12
   13f7c:	mulls	r0, r3, r0
   13f80:	ldrls	r3, [pc, #8]	; 13f90 <__assert_fail@plt+0x25d4>
   13f84:	ldrls	r0, [r3, r0]
   13f88:	movhi	r0, #0
   13f8c:	bx	lr
   13f90:	andeq	r8, r2, r0, asr #12
   13f94:	cmp	r0, #12
   13f98:	movls	r2, #12
   13f9c:	ldrls	r3, [pc, #12]	; 13fb0 <__assert_fail@plt+0x25f4>
   13fa0:	mlals	r0, r2, r0, r3
   13fa4:	ldrls	r0, [r0, #8]
   13fa8:	mvnhi	r0, #0
   13fac:	bx	lr
   13fb0:	andeq	r8, r2, r0, asr #12
   13fb4:	cmp	r0, #12
   13fb8:	movls	r2, #12
   13fbc:	ldrls	r3, [pc, #12]	; 13fd0 <__assert_fail@plt+0x2614>
   13fc0:	mlals	r0, r2, r0, r3
   13fc4:	ldrls	r0, [r0, #4]
   13fc8:	movhi	r0, #0
   13fcc:	bx	lr
   13fd0:	andeq	r8, r2, r0, asr #12
   13fd4:	cmp	r0, #12
   13fd8:	bhi	13ff8 <__assert_fail@plt+0x263c>
   13fdc:	ldr	r2, [pc, #88]	; 1403c <__assert_fail@plt+0x2680>
   13fe0:	mov	r3, #12
   13fe4:	mla	r3, r3, r0, r2
   13fe8:	ldr	ip, [r3, #8]
   13fec:	mov	r3, #0
   13ff0:	cmp	r3, r0
   13ff4:	bne	14018 <__assert_fail@plt+0x265c>
   13ff8:	mvn	r0, #0
   13ffc:	bx	lr
   14000:	add	r3, r3, #1
   14004:	cmp	r3, r0
   14008:	add	r2, r2, #12
   1400c:	bne	1401c <__assert_fail@plt+0x2660>
   14010:	mvn	r0, #0
   14014:	pop	{pc}		; (ldr pc, [sp], #4)
   14018:	push	{lr}		; (str lr, [sp, #-4]!)
   1401c:	ldr	lr, [r2, #4]
   14020:	tst	r1, lr
   14024:	beq	14000 <__assert_fail@plt+0x2644>
   14028:	ldr	lr, [r2, #8]
   1402c:	cmp	ip, lr
   14030:	bne	14000 <__assert_fail@plt+0x2644>
   14034:	mov	r0, r3
   14038:	pop	{pc}		; (ldr pc, [sp], #4)
   1403c:	andeq	r8, r2, r0, asr #12
   14040:	push	{r4, r5, r6, lr}
   14044:	mov	r4, r0
   14048:	ldr	r5, [sp, #16]
   1404c:	subs	r0, r2, #0
   14050:	movne	r2, #0
   14054:	strne	r2, [r3]
   14058:	strne	r2, [r5]
   1405c:	bne	14084 <__assert_fail@plt+0x26c8>
   14060:	ldr	r2, [r5]
   14064:	ldr	ip, [r3]
   14068:	add	ip, ip, r2
   1406c:	str	ip, [r3]
   14070:	ldrb	r2, [r4, ip]
   14074:	cmp	r2, #0
   14078:	popeq	{r4, r5, r6, pc}
   1407c:	add	ip, ip, #1
   14080:	str	ip, [r3]
   14084:	ldr	r0, [r3]
   14088:	ldrb	r3, [r1]
   1408c:	add	r4, r4, r0
   14090:	cmp	r3, #0
   14094:	beq	140ac <__assert_fail@plt+0x26f0>
   14098:	mov	r0, r4
   1409c:	bl	11920 <strpbrk@plt>
   140a0:	cmp	r0, #0
   140a4:	subne	r0, r0, r4
   140a8:	bne	140b4 <__assert_fail@plt+0x26f8>
   140ac:	mov	r0, r4
   140b0:	bl	117ac <strlen@plt>
   140b4:	str	r0, [r5]
   140b8:	mov	r0, #1
   140bc:	pop	{r4, r5, r6, pc}
   140c0:	push	{r4, r5, lr}
   140c4:	mov	r2, #5
   140c8:	sub	sp, sp, #20
   140cc:	mov	r4, r0
   140d0:	mov	r5, r1
   140d4:	mov	r0, #0
   140d8:	ldr	r1, [pc, #52]	; 14114 <__assert_fail@plt+0x2758>
   140dc:	bl	11638 <dcgettext@plt>
   140e0:	ldr	r3, [pc, #48]	; 14118 <__assert_fail@plt+0x275c>
   140e4:	ldr	r2, [pc, #48]	; 1411c <__assert_fail@plt+0x2760>
   140e8:	str	r3, [sp, #8]
   140ec:	ldr	r3, [pc, #44]	; 14120 <__assert_fail@plt+0x2764>
   140f0:	str	r3, [sp, #4]
   140f4:	ldr	r3, [pc, #40]	; 14124 <__assert_fail@plt+0x2768>
   140f8:	str	r3, [sp]
   140fc:	mov	r3, r5
   14100:	mov	r1, r0
   14104:	mov	r0, r4
   14108:	bl	117c4 <fprintf@plt>
   1410c:	add	sp, sp, #20
   14110:	pop	{r4, r5, pc}
   14114:	andeq	r8, r2, r0, lsl #15
   14118:	andeq	r8, r2, r5, ror r8
   1411c:	andeq	r8, r2, lr, asr #16
   14120:	andeq	r8, r2, fp, lsl #17
   14124:	andeq	r8, r2, r1, lsr #12
   14128:	mov	r2, r0
   1412c:	push	{r4, lr}
   14130:	mov	r0, r2
   14134:	ldrb	r3, [r2]
   14138:	add	r1, r2, #1
   1413c:	cmp	r3, #47	; 0x2f
   14140:	beq	14164 <__assert_fail@plt+0x27a8>
   14144:	mov	r3, #0
   14148:	mov	lr, #1
   1414c:	mov	r4, r3
   14150:	mov	ip, r2
   14154:	ldrb	r1, [r2], #1
   14158:	cmp	r1, #0
   1415c:	bne	1416c <__assert_fail@plt+0x27b0>
   14160:	pop	{r4, pc}
   14164:	mov	r2, r1
   14168:	b	14130 <__assert_fail@plt+0x2774>
   1416c:	cmp	r1, #47	; 0x2f
   14170:	moveq	r3, lr
   14174:	beq	14150 <__assert_fail@plt+0x2794>
   14178:	cmp	r3, #0
   1417c:	movne	r0, ip
   14180:	movne	r3, r4
   14184:	b	14150 <__assert_fail@plt+0x2794>
   14188:	push	{r4, lr}
   1418c:	mov	r4, r0
   14190:	bl	117ac <strlen@plt>
   14194:	cmp	r0, #1
   14198:	popls	{r4, pc}
   1419c:	sub	r3, r0, #1
   141a0:	ldrb	r2, [r4, r3]
   141a4:	cmp	r2, #47	; 0x2f
   141a8:	beq	141b0 <__assert_fail@plt+0x27f4>
   141ac:	pop	{r4, pc}
   141b0:	mov	r0, r3
   141b4:	b	14194 <__assert_fail@plt+0x27d8>
   141b8:	ldr	r3, [pc, #4]	; 141c4 <__assert_fail@plt+0x2808>
   141bc:	str	r0, [r3]
   141c0:	bx	lr
   141c4:	muleq	r3, r8, r2
   141c8:	ldr	r3, [pc, #4]	; 141d4 <__assert_fail@plt+0x2818>
   141cc:	strb	r0, [r3, #4]
   141d0:	bx	lr
   141d4:	muleq	r3, r8, r2
   141d8:	ldr	r3, [pc, #192]	; 142a0 <__assert_fail@plt+0x28e4>
   141dc:	push	{r0, r1, r4, r5, r6, lr}
   141e0:	ldr	r0, [r3]
   141e4:	bl	26aa4 <__assert_fail@plt+0x150e8>
   141e8:	cmp	r0, #0
   141ec:	beq	14284 <__assert_fail@plt+0x28c8>
   141f0:	ldr	r3, [pc, #172]	; 142a4 <__assert_fail@plt+0x28e8>
   141f4:	mov	r4, r3
   141f8:	ldrb	r2, [r3, #4]
   141fc:	cmp	r2, #0
   14200:	beq	14214 <__assert_fail@plt+0x2858>
   14204:	bl	117dc <__errno_location@plt>
   14208:	ldr	r3, [r0]
   1420c:	cmp	r3, #32
   14210:	beq	14284 <__assert_fail@plt+0x28c8>
   14214:	mov	r2, #5
   14218:	ldr	r1, [pc, #136]	; 142a8 <__assert_fail@plt+0x28ec>
   1421c:	mov	r0, #0
   14220:	bl	11638 <dcgettext@plt>
   14224:	ldr	r4, [r4]
   14228:	cmp	r4, #0
   1422c:	mov	r5, r0
   14230:	beq	14268 <__assert_fail@plt+0x28ac>
   14234:	bl	117dc <__errno_location@plt>
   14238:	ldr	r6, [r0]
   1423c:	mov	r0, r4
   14240:	bl	190c0 <__assert_fail@plt+0x7704>
   14244:	str	r5, [sp]
   14248:	ldr	r2, [pc, #92]	; 142ac <__assert_fail@plt+0x28f0>
   1424c:	mov	r1, r6
   14250:	mov	r3, r0
   14254:	mov	r0, #0
   14258:	bl	116e0 <error@plt>
   1425c:	ldr	r3, [pc, #76]	; 142b0 <__assert_fail@plt+0x28f4>
   14260:	ldr	r0, [r3]
   14264:	bl	115d8 <_exit@plt>
   14268:	bl	117dc <__errno_location@plt>
   1426c:	mov	r3, r5
   14270:	ldr	r2, [pc, #60]	; 142b4 <__assert_fail@plt+0x28f8>
   14274:	ldr	r1, [r0]
   14278:	mov	r0, r4
   1427c:	bl	116e0 <error@plt>
   14280:	b	1425c <__assert_fail@plt+0x28a0>
   14284:	ldr	r3, [pc, #44]	; 142b8 <__assert_fail@plt+0x28fc>
   14288:	ldr	r0, [r3]
   1428c:	bl	26aa4 <__assert_fail@plt+0x150e8>
   14290:	cmp	r0, #0
   14294:	bne	1425c <__assert_fail@plt+0x28a0>
   14298:	add	sp, sp, #8
   1429c:	pop	{r4, r5, r6, pc}
   142a0:	andeq	sl, r3, ip, lsl r2
   142a4:	muleq	r3, r8, r2
   142a8:			; <UNDEFINED> instruction: 0x000288ba
   142ac:	andeq	r8, r2, r6, asr #17
   142b0:	andeq	sl, r3, r0, asr #3
   142b4:	andeq	r9, r2, r4, ror #1
   142b8:	andeq	sl, r3, r8, lsl r2
   142bc:	push	{r1, r2, r3}
   142c0:	push	{r0, r1, lr}
   142c4:	ldr	r1, [sp, #12]
   142c8:	ands	r2, r1, #64	; 0x40
   142cc:	addne	r3, sp, #16
   142d0:	ldrne	r2, [sp, #16]
   142d4:	strne	r3, [sp, #4]
   142d8:	bl	116f8 <open64@plt>
   142dc:	bl	19248 <__assert_fail@plt+0x788c>
   142e0:	add	sp, sp, #8
   142e4:	pop	{lr}		; (ldr lr, [sp], #4)
   142e8:	add	sp, sp, #12
   142ec:	bx	lr
   142f0:	cmp	r0, #1
   142f4:	push	{r4, r6, r7, lr}
   142f8:	vpush	{d8}
   142fc:	vmov.f64	d8, d0
   14300:	beq	14364 <__assert_fail@plt+0x29a8>
   14304:	vldr	d7, [pc, #100]	; 14370 <__assert_fail@plt+0x29b4>
   14308:	vcmpe.f64	d0, d7
   1430c:	vmrs	APSR_nzcv, fpscr
   14310:	bpl	14364 <__assert_fail@plt+0x29a8>
   14314:	mov	r4, r0
   14318:	vmov	r0, r1, d0
   1431c:	bl	27650 <__assert_fail@plt+0x15c94>
   14320:	cmp	r4, #0
   14324:	mov	r6, r0
   14328:	mov	r7, r1
   1432c:	movne	r0, #0
   14330:	bne	1434c <__assert_fail@plt+0x2990>
   14334:	bl	2758c <__assert_fail@plt+0x15bd0>
   14338:	vmov	d7, r0, r1
   1433c:	vcmp.f64	d7, d8
   14340:	vmrs	APSR_nzcv, fpscr
   14344:	movne	r0, #1
   14348:	moveq	r0, #0
   1434c:	adds	r2, r6, r0
   14350:	adc	r3, r7, r0, asr #31
   14354:	mov	r1, r3
   14358:	mov	r0, r2
   1435c:	bl	2758c <__assert_fail@plt+0x15bd0>
   14360:	vmov	d8, r0, r1
   14364:	vmov.f64	d0, d8
   14368:	vpop	{d8}
   1436c:	pop	{r4, r6, r7, pc}
   14370:	andeq	r0, r0, r0
   14374:	mvnsmi	r0, #0
   14378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1437c:	vpush	{d8-d9}
   14380:	mov	r9, r3
   14384:	and	r3, r3, #3
   14388:	mov	fp, r2
   1438c:	sub	sp, sp, #100	; 0x64
   14390:	add	sl, fp, #644	; 0x284
   14394:	str	r3, [sp, #20]
   14398:	ands	r3, r9, #32
   1439c:	str	r3, [sp, #24]
   143a0:	movne	r3, #1024	; 0x400
   143a4:	moveq	r3, #1000	; 0x3e8
   143a8:	strd	r0, [sp, #8]
   143ac:	ldrd	r4, [sp, #152]	; 0x98
   143b0:	str	r3, [sp, #16]
   143b4:	bl	118f0 <localeconv@plt>
   143b8:	add	sl, sl, #3
   143bc:	ldr	r7, [r0]
   143c0:	mov	r6, r0
   143c4:	mov	r0, r7
   143c8:	bl	117ac <strlen@plt>
   143cc:	sub	r3, r0, #1
   143d0:	cmp	r3, #15
   143d4:	ldr	r3, [pc, #1852]	; 14b18 <__assert_fail@plt+0x315c>
   143d8:	movls	r3, r7
   143dc:	str	r3, [sp, #40]	; 0x28
   143e0:	ldr	r3, [r6, #8]
   143e4:	ldr	r6, [r6, #4]
   143e8:	mov	r8, r0
   143ec:	movls	r8, r0
   143f0:	mov	r0, r6
   143f4:	movhi	r8, #1
   143f8:	str	r3, [sp, #28]
   143fc:	bl	117ac <strlen@plt>
   14400:	ldr	r3, [pc, #1812]	; 14b1c <__assert_fail@plt+0x3160>
   14404:	cmp	r0, #16
   14408:	movhi	r6, r3
   1440c:	ldrd	r2, [sp, #160]	; 0xa0
   14410:	str	r6, [sp, #44]	; 0x2c
   14414:	cmp	r3, r5
   14418:	cmpeq	r2, r4
   1441c:	bhi	14494 <__assert_fail@plt+0x2ad8>
   14420:	mov	r0, r4
   14424:	mov	r1, r5
   14428:	bl	27600 <__assert_fail@plt+0x15c44>
   1442c:	orrs	r3, r2, r3
   14430:	bne	1462c <__assert_fail@plt+0x2c70>
   14434:	ldrd	r2, [sp, #160]	; 0xa0
   14438:	mov	r0, r4
   1443c:	mov	r1, r5
   14440:	bl	27600 <__assert_fail@plt+0x15c44>
   14444:	mov	r3, r1
   14448:	ldr	r1, [sp, #12]
   1444c:	mov	r2, r0
   14450:	mul	r0, r2, r1
   14454:	ldr	r1, [sp, #8]
   14458:	umull	r6, r7, r2, r1
   1445c:	mla	r0, r1, r3, r0
   14460:	strd	r6, [sp]
   14464:	ldr	r1, [sp, #4]
   14468:	add	r1, r0, r1
   1446c:	str	r1, [sp, #4]
   14470:	ldrd	r0, [sp]
   14474:	bl	27600 <__assert_fail@plt+0x15c44>
   14478:	ldrd	r2, [sp, #8]
   1447c:	cmp	r3, r1
   14480:	cmpeq	r2, r0
   14484:	bne	1462c <__assert_fail@plt+0x2c70>
   14488:	mov	r7, #0
   1448c:	mov	r6, r7
   14490:	b	14558 <__assert_fail@plt+0x2b9c>
   14494:	orrs	r3, r4, r5
   14498:	beq	1462c <__assert_fail@plt+0x2c70>
   1449c:	mov	r2, r4
   144a0:	mov	r3, r5
   144a4:	ldrd	r0, [sp, #160]	; 0xa0
   144a8:	bl	27600 <__assert_fail@plt+0x15c44>
   144ac:	orrs	r3, r2, r3
   144b0:	bne	1462c <__assert_fail@plt+0x2c70>
   144b4:	mov	r2, r4
   144b8:	mov	r3, r5
   144bc:	ldrd	r0, [sp, #160]	; 0xa0
   144c0:	bl	27600 <__assert_fail@plt+0x15c44>
   144c4:	mov	r4, r0
   144c8:	mov	r5, r1
   144cc:	mov	r2, r0
   144d0:	mov	r3, r1
   144d4:	ldrd	r0, [sp, #8]
   144d8:	bl	27600 <__assert_fail@plt+0x15c44>
   144dc:	mov	r1, #10
   144e0:	umull	r6, r7, r2, r1
   144e4:	mla	r7, r1, r3, r7
   144e8:	mov	r0, r6
   144ec:	mov	r2, r4
   144f0:	mov	r3, r5
   144f4:	mov	r1, r7
   144f8:	bl	27600 <__assert_fail@plt+0x15c44>
   144fc:	lsls	r0, r2, #1
   14500:	adc	r1, r3, r3
   14504:	mov	r2, r4
   14508:	strd	r0, [sp, #32]
   1450c:	mov	r3, r5
   14510:	ldrd	r0, [sp, #8]
   14514:	bl	27600 <__assert_fail@plt+0x15c44>
   14518:	mov	r2, r4
   1451c:	mov	r3, r5
   14520:	strd	r0, [sp]
   14524:	mov	r0, r6
   14528:	mov	r1, r7
   1452c:	bl	27600 <__assert_fail@plt+0x15c44>
   14530:	ldrd	r2, [sp, #32]
   14534:	cmp	r5, r3
   14538:	cmpeq	r4, r2
   1453c:	mov	r6, r0
   14540:	bls	14620 <__assert_fail@plt+0x2c64>
   14544:	ldr	r3, [sp, #32]
   14548:	ldr	r2, [sp, #36]	; 0x24
   1454c:	orrs	r3, r3, r2
   14550:	movne	r7, #1
   14554:	moveq	r7, #0
   14558:	ands	r3, r9, #16
   1455c:	str	r3, [sp, #32]
   14560:	moveq	r4, sl
   14564:	mvneq	r5, #0
   14568:	beq	148cc <__assert_fail@plt+0x2f10>
   1456c:	ldr	r2, [sp, #16]
   14570:	mov	r3, #0
   14574:	strd	r2, [sp, #8]
   14578:	ldrd	r0, [sp, #8]
   1457c:	ldrd	r2, [sp]
   14580:	cmp	r3, r1
   14584:	cmpeq	r2, r0
   14588:	movcc	r4, sl
   1458c:	movcc	r5, #0
   14590:	bcc	148cc <__assert_fail@plt+0x2f10>
   14594:	mov	r5, #0
   14598:	ldrd	r0, [sp]
   1459c:	ldrd	r2, [sp, #8]
   145a0:	bl	27600 <__assert_fail@plt+0x15c44>
   145a4:	mov	r3, #10
   145a8:	ldr	r1, [sp, #16]
   145ac:	asr	r4, r7, #1
   145b0:	mla	r6, r3, r2, r6
   145b4:	mov	r0, r6
   145b8:	bl	26fe8 <__assert_fail@plt+0x1562c>
   145bc:	ldrd	r2, [sp, #8]
   145c0:	add	r4, r4, r1, lsl #1
   145c4:	ldrd	r0, [sp]
   145c8:	bl	27600 <__assert_fail@plt+0x15c44>
   145cc:	add	r7, r7, r4
   145d0:	strd	r0, [sp]
   145d4:	mov	r0, r6
   145d8:	ldr	r1, [sp, #16]
   145dc:	bl	26dfc <__assert_fail@plt+0x15440>
   145e0:	ldr	r3, [sp, #16]
   145e4:	cmp	r3, r4
   145e8:	mov	r6, r0
   145ec:	bls	14818 <__assert_fail@plt+0x2e5c>
   145f0:	adds	r7, r7, #0
   145f4:	movne	r7, #1
   145f8:	ldrd	r2, [sp, #8]
   145fc:	ldrd	r0, [sp]
   14600:	add	r5, r5, #1
   14604:	cmp	r3, r1
   14608:	cmpeq	r2, r0
   1460c:	bhi	1482c <__assert_fail@plt+0x2e70>
   14610:	cmp	r5, #8
   14614:	bne	14598 <__assert_fail@plt+0x2bdc>
   14618:	mov	r4, sl
   1461c:	b	148cc <__assert_fail@plt+0x2f10>
   14620:	movcs	r7, #2
   14624:	movcc	r7, #3
   14628:	b	14558 <__assert_fail@plt+0x2b9c>
   1462c:	mov	r0, r4
   14630:	mov	r1, r5
   14634:	bl	2758c <__assert_fail@plt+0x15bd0>
   14638:	vmov	d9, r0, r1
   1463c:	ldrd	r0, [sp, #160]	; 0xa0
   14640:	bl	2758c <__assert_fail@plt+0x15bd0>
   14644:	vmov	d7, r0, r1
   14648:	ldrd	r0, [sp, #8]
   1464c:	vdiv.f64	d8, d9, d7
   14650:	bl	2758c <__assert_fail@plt+0x15bd0>
   14654:	ands	r4, r9, #16
   14658:	vmov	d7, r0, r1
   1465c:	vmul.f64	d0, d8, d7
   14660:	bne	1474c <__assert_fail@plt+0x2d90>
   14664:	and	r0, r9, #3
   14668:	bl	142f0 <__assert_fail@plt+0x2934>
   1466c:	ldr	r1, [pc, #1196]	; 14b20 <__assert_fail@plt+0x3164>
   14670:	mov	r0, fp
   14674:	mvn	r5, #0
   14678:	vmov	r2, r3, d0
   1467c:	bl	11908 <sprintf@plt>
   14680:	mov	r0, fp
   14684:	bl	117ac <strlen@plt>
   14688:	mov	r6, r0
   1468c:	sub	r8, sl, r6
   14690:	mov	r2, r6
   14694:	mov	r1, fp
   14698:	mov	r0, r8
   1469c:	bl	1159c <memmove@plt>
   146a0:	sub	r4, r6, r4
   146a4:	add	r4, r8, r4
   146a8:	tst	r9, #4
   146ac:	beq	14a20 <__assert_fail@plt+0x3064>
   146b0:	ldr	r0, [sp, #44]	; 0x2c
   146b4:	bl	117ac <strlen@plt>
   146b8:	sub	r6, r4, r8
   146bc:	add	r7, sp, #52	; 0x34
   146c0:	mov	r2, r6
   146c4:	mov	r1, r8
   146c8:	str	r0, [sp]
   146cc:	mov	r0, r7
   146d0:	bl	115e4 <memcpy@plt>
   146d4:	mvn	r3, #0
   146d8:	ldr	r2, [sp, #28]
   146dc:	ldrb	r2, [r2]
   146e0:	cmp	r2, #0
   146e4:	beq	14700 <__assert_fail@plt+0x2d44>
   146e8:	cmp	r2, #255	; 0xff
   146ec:	movne	r3, r2
   146f0:	ldr	r2, [sp, #28]
   146f4:	moveq	r3, r6
   146f8:	add	r2, r2, #1
   146fc:	str	r2, [sp, #28]
   14700:	cmp	r3, r6
   14704:	movcs	r3, r6
   14708:	sub	r6, r6, r3
   1470c:	sub	r8, r4, r3
   14710:	mov	r2, r3
   14714:	add	r1, r7, r6
   14718:	mov	r0, r8
   1471c:	str	r3, [sp, #8]
   14720:	bl	115e4 <memcpy@plt>
   14724:	cmp	r6, #0
   14728:	beq	14a20 <__assert_fail@plt+0x3064>
   1472c:	ldr	r3, [sp]
   14730:	ldr	r1, [sp, #44]	; 0x2c
   14734:	sub	r4, r8, r3
   14738:	mov	r2, r3
   1473c:	mov	r0, r4
   14740:	bl	115e4 <memcpy@plt>
   14744:	ldr	r3, [sp, #8]
   14748:	b	146d8 <__assert_fail@plt+0x2d1c>
   1474c:	vldr	s13, [sp, #16]
   14750:	vldr	d7, [pc, #944]	; 14b08 <__assert_fail@plt+0x314c>
   14754:	mov	r5, #0
   14758:	vcvt.f64.s32	d6, s13
   1475c:	vmul.f64	d7, d7, d6
   14760:	add	r5, r5, #1
   14764:	vmul.f64	d5, d6, d7
   14768:	vcmpe.f64	d0, d5
   1476c:	vmrs	APSR_nzcv, fpscr
   14770:	blt	1477c <__assert_fail@plt+0x2dc0>
   14774:	cmp	r5, #8
   14778:	bne	1475c <__assert_fail@plt+0x2da0>
   1477c:	vdiv.f64	d9, d0, d7
   14780:	ldr	r0, [sp, #20]
   14784:	add	r4, r8, #1
   14788:	vmov.f64	d0, d9
   1478c:	bl	142f0 <__assert_fail@plt+0x2934>
   14790:	ldr	r1, [pc, #908]	; 14b24 <__assert_fail@plt+0x3168>
   14794:	mov	r0, fp
   14798:	vmov	r2, r3, d0
   1479c:	bl	11908 <sprintf@plt>
   147a0:	mov	r0, fp
   147a4:	bl	117ac <strlen@plt>
   147a8:	ldr	r3, [sp, #24]
   147ac:	cmp	r3, #0
   147b0:	movne	r3, #1
   147b4:	moveq	r3, #2
   147b8:	add	r3, r3, r4
   147bc:	cmp	r0, r3
   147c0:	mov	r6, r0
   147c4:	bhi	147e0 <__assert_fail@plt+0x2e24>
   147c8:	tst	r9, #8
   147cc:	beq	1468c <__assert_fail@plt+0x2cd0>
   147d0:	add	r3, fp, r0
   147d4:	ldrb	r3, [r3, #-1]
   147d8:	cmp	r3, #48	; 0x30
   147dc:	bne	1468c <__assert_fail@plt+0x2cd0>
   147e0:	vldr	d8, [pc, #808]	; 14b10 <__assert_fail@plt+0x3154>
   147e4:	ldr	r0, [sp, #20]
   147e8:	mov	r4, #0
   147ec:	vmul.f64	d0, d9, d8
   147f0:	bl	142f0 <__assert_fail@plt+0x2934>
   147f4:	ldr	r1, [pc, #804]	; 14b20 <__assert_fail@plt+0x3164>
   147f8:	mov	r0, fp
   147fc:	vdiv.f64	d7, d0, d8
   14800:	vmov	r2, r3, d7
   14804:	bl	11908 <sprintf@plt>
   14808:	mov	r0, fp
   1480c:	bl	117ac <strlen@plt>
   14810:	mov	r6, r0
   14814:	b	1468c <__assert_fail@plt+0x2cd0>
   14818:	ldr	r3, [sp, #16]
   1481c:	cmp	r3, r7
   14820:	movcc	r7, #3
   14824:	movcs	r7, #2
   14828:	b	145f8 <__assert_fail@plt+0x2c3c>
   1482c:	ldrd	r2, [sp]
   14830:	cmp	r3, #0
   14834:	cmpeq	r2, #9
   14838:	bhi	14618 <__assert_fail@plt+0x2c5c>
   1483c:	ldr	r3, [sp, #20]
   14840:	cmp	r3, #1
   14844:	bne	14994 <__assert_fail@plt+0x2fd8>
   14848:	and	r3, r6, #1
   1484c:	add	r3, r3, r7
   14850:	cmp	r3, #2
   14854:	movle	r3, #0
   14858:	movgt	r3, #1
   1485c:	cmp	r3, #0
   14860:	beq	14afc <__assert_fail@plt+0x3140>
   14864:	add	r6, r6, #1
   14868:	cmp	r6, #10
   1486c:	bne	148a0 <__assert_fail@plt+0x2ee4>
   14870:	ldrd	r2, [sp]
   14874:	adds	r2, r2, #1
   14878:	adc	r3, r3, #0
   1487c:	cmp	r3, #0
   14880:	cmpeq	r2, #10
   14884:	strd	r2, [sp]
   14888:	moveq	r4, sl
   1488c:	moveq	r7, #0
   14890:	beq	149b0 <__assert_fail@plt+0x2ff4>
   14894:	mov	r7, #0
   14898:	ands	r6, r9, #8
   1489c:	bne	149ac <__assert_fail@plt+0x2ff0>
   148a0:	add	r4, fp, #644	; 0x284
   148a4:	add	r4, r4, #2
   148a8:	add	r6, r6, #48	; 0x30
   148ac:	sub	r4, r4, r8
   148b0:	strb	r6, [fp, #646]	; 0x286
   148b4:	mov	r2, r8
   148b8:	ldr	r1, [sp, #40]	; 0x28
   148bc:	mov	r0, r4
   148c0:	bl	115e4 <memcpy@plt>
   148c4:	mov	r6, #0
   148c8:	mov	r7, r6
   148cc:	ldr	r3, [sp, #20]
   148d0:	cmp	r3, #1
   148d4:	bne	149b8 <__assert_fail@plt+0x2ffc>
   148d8:	ldrd	r2, [sp]
   148dc:	mov	r3, #0
   148e0:	and	r2, r2, #1
   148e4:	adds	r2, r2, r7
   148e8:	adc	r3, r3, r7, asr #31
   148ec:	orr	r2, r2, r3
   148f0:	cmp	r2, #0
   148f4:	addne	r6, r6, #1
   148f8:	cmp	r6, #5
   148fc:	movle	r6, #0
   14900:	movgt	r6, #1
   14904:	cmp	r6, #0
   14908:	beq	149d4 <__assert_fail@plt+0x3018>
   1490c:	ldrd	r2, [sp]
   14910:	adds	r2, r2, #1
   14914:	adc	r3, r3, #0
   14918:	strd	r2, [sp]
   1491c:	ldr	r3, [sp, #32]
   14920:	cmp	r3, #0
   14924:	beq	149d4 <__assert_fail@plt+0x3018>
   14928:	ldrd	r0, [sp]
   1492c:	mov	r3, #0
   14930:	ldr	r2, [sp, #16]
   14934:	cmp	r3, r1
   14938:	cmpeq	r2, r0
   1493c:	moveq	r3, #1
   14940:	movne	r3, #0
   14944:	cmp	r5, #7
   14948:	movgt	r3, #0
   1494c:	andle	r3, r3, #1
   14950:	cmp	r3, #0
   14954:	beq	149d4 <__assert_fail@plt+0x3018>
   14958:	tst	r9, #8
   1495c:	add	r5, r5, #1
   14960:	bne	14984 <__assert_fail@plt+0x2fc8>
   14964:	mov	r3, #48	; 0x30
   14968:	strb	r3, [r4, #-1]
   1496c:	mvn	r3, r8
   14970:	add	r4, r4, r3
   14974:	mov	r2, r8
   14978:	ldr	r1, [sp, #40]	; 0x28
   1497c:	mov	r0, r4
   14980:	bl	115e4 <memcpy@plt>
   14984:	mov	r3, #49	; 0x31
   14988:	sub	r8, r4, #1
   1498c:	strb	r3, [r4, #-1]
   14990:	b	146a8 <__assert_fail@plt+0x2cec>
   14994:	cmp	r7, #0
   14998:	ldr	r3, [sp, #20]
   1499c:	clz	r3, r3
   149a0:	lsr	r3, r3, #5
   149a4:	moveq	r3, #0
   149a8:	b	1485c <__assert_fail@plt+0x2ea0>
   149ac:	mov	r4, sl
   149b0:	mov	r6, #0
   149b4:	b	148cc <__assert_fail@plt+0x2f10>
   149b8:	ldr	r3, [sp, #20]
   149bc:	cmp	r3, #0
   149c0:	movne	r6, #0
   149c4:	bne	14904 <__assert_fail@plt+0x2f48>
   149c8:	add	r6, r6, r7
   149cc:	cmp	r6, #0
   149d0:	b	148fc <__assert_fail@plt+0x2f40>
   149d4:	mov	r8, r4
   149d8:	mov	r6, #10
   149dc:	mov	r7, #0
   149e0:	ldrd	r0, [sp]
   149e4:	mov	r2, r6
   149e8:	mov	r3, r7
   149ec:	bl	27600 <__assert_fail@plt+0x15c44>
   149f0:	mov	r3, r7
   149f4:	ldrd	r0, [sp]
   149f8:	add	r2, r2, #48	; 0x30
   149fc:	strb	r2, [r8, #-1]!
   14a00:	mov	r2, r6
   14a04:	bl	27600 <__assert_fail@plt+0x15c44>
   14a08:	mov	r2, r0
   14a0c:	mov	r3, r1
   14a10:	orrs	r3, r2, r3
   14a14:	strd	r0, [sp]
   14a18:	bne	149e0 <__assert_fail@plt+0x3024>
   14a1c:	b	146a8 <__assert_fail@plt+0x2cec>
   14a20:	tst	r9, #128	; 0x80
   14a24:	beq	14ab0 <__assert_fail@plt+0x30f4>
   14a28:	cmn	r5, #1
   14a2c:	moveq	r2, #1
   14a30:	moveq	r3, #0
   14a34:	moveq	r5, #0
   14a38:	beq	14ae8 <__assert_fail@plt+0x312c>
   14a3c:	and	r2, r9, #256	; 0x100
   14a40:	orrs	r3, r5, r2
   14a44:	beq	14ab0 <__assert_fail@plt+0x30f4>
   14a48:	tst	r9, #64	; 0x40
   14a4c:	movne	r1, #32
   14a50:	addne	r3, fp, #648	; 0x288
   14a54:	strbne	r1, [fp, #647]	; 0x287
   14a58:	moveq	r3, sl
   14a5c:	cmp	r5, #0
   14a60:	beq	14b2c <__assert_fail@plt+0x3170>
   14a64:	ldr	r1, [sp, #24]
   14a68:	add	sl, r3, #1
   14a6c:	cmp	r5, #1
   14a70:	cmpeq	r1, #0
   14a74:	moveq	r1, #107	; 0x6b
   14a78:	ldrne	r1, [pc, #168]	; 14b28 <__assert_fail@plt+0x316c>
   14a7c:	ldrbne	r1, [r1, r5]
   14a80:	cmp	r2, #0
   14a84:	strb	r1, [r3]
   14a88:	beq	14ab0 <__assert_fail@plt+0x30f4>
   14a8c:	ldr	r2, [sp, #24]
   14a90:	cmp	r5, #0
   14a94:	cmpne	r2, #0
   14a98:	addne	sl, r3, #2
   14a9c:	movne	r2, #105	; 0x69
   14aa0:	strbne	r2, [r3, #1]
   14aa4:	mov	r3, #66	; 0x42
   14aa8:	strb	r3, [sl]
   14aac:	add	sl, sl, #1
   14ab0:	mov	r3, #0
   14ab4:	mov	r0, r8
   14ab8:	strb	r3, [sl]
   14abc:	add	sp, sp, #100	; 0x64
   14ac0:	vpop	{d8-d9}
   14ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ac8:	add	r5, r5, #1
   14acc:	cmp	r5, #8
   14ad0:	beq	14a3c <__assert_fail@plt+0x3080>
   14ad4:	ldr	r1, [sp, #16]
   14ad8:	ldr	r0, [sp, #16]
   14adc:	mul	r1, r1, r3
   14ae0:	umull	r2, r3, r2, r0
   14ae4:	add	r3, r1, r3
   14ae8:	ldrd	r0, [sp, #160]	; 0xa0
   14aec:	cmp	r3, r1
   14af0:	cmpeq	r2, r0
   14af4:	bcc	14ac8 <__assert_fail@plt+0x310c>
   14af8:	b	14a3c <__assert_fail@plt+0x3080>
   14afc:	cmp	r6, #0
   14b00:	beq	14898 <__assert_fail@plt+0x2edc>
   14b04:	b	148a0 <__assert_fail@plt+0x2ee4>
   14b08:	andeq	r0, r0, r0
   14b0c:	svccc	0x00f00000	; IMB
   14b10:	andeq	r0, r0, r0
   14b14:	eormi	r0, r4, r0
   14b18:	andeq	r8, r2, sp, ror #8
   14b1c:	andeq	r8, r2, pc, lsl r2
   14b20:	strdeq	r8, [r2], -r0
   14b24:	strdeq	r8, [r2], -r6
   14b28:	ldrdeq	r8, [r2], -r0
   14b2c:	cmp	r2, #0
   14b30:	mov	sl, r3
   14b34:	bne	14aa4 <__assert_fail@plt+0x30e8>
   14b38:	b	14ab0 <__assert_fail@plt+0x30f4>
   14b3c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   14b40:	subs	r5, r0, #0
   14b44:	mov	r8, r1
   14b48:	mov	r6, r2
   14b4c:	bne	14bcc <__assert_fail@plt+0x3210>
   14b50:	ldr	r0, [pc, #316]	; 14c94 <__assert_fail@plt+0x32d8>
   14b54:	bl	11704 <getenv@plt>
   14b58:	subs	r5, r0, #0
   14b5c:	bne	14bcc <__assert_fail@plt+0x3210>
   14b60:	ldr	r0, [pc, #304]	; 14c98 <__assert_fail@plt+0x32dc>
   14b64:	bl	11704 <getenv@plt>
   14b68:	subs	r5, r0, #0
   14b6c:	bne	14bcc <__assert_fail@plt+0x3210>
   14b70:	ldr	r0, [pc, #292]	; 14c9c <__assert_fail@plt+0x32e0>
   14b74:	bl	11704 <getenv@plt>
   14b78:	mov	r4, #0
   14b7c:	mov	r3, #0
   14b80:	cmp	r0, #0
   14b84:	moveq	r2, #1024	; 0x400
   14b88:	movne	r2, #512	; 0x200
   14b8c:	strd	r2, [r6]
   14b90:	mov	r0, #0
   14b94:	str	r4, [r8]
   14b98:	ldrd	r2, [r6]
   14b9c:	orrs	r3, r2, r3
   14ba0:	bne	14bc4 <__assert_fail@plt+0x3208>
   14ba4:	ldr	r0, [pc, #240]	; 14c9c <__assert_fail@plt+0x32e0>
   14ba8:	bl	11704 <getenv@plt>
   14bac:	mov	r3, #0
   14bb0:	cmp	r0, #0
   14bb4:	moveq	r2, #1024	; 0x400
   14bb8:	movne	r2, #512	; 0x200
   14bbc:	mov	r0, #4
   14bc0:	strd	r2, [r6]
   14bc4:	add	sp, sp, #16
   14bc8:	pop	{r4, r5, r6, r7, r8, pc}
   14bcc:	ldrb	r3, [r5]
   14bd0:	ldr	r7, [pc, #200]	; 14ca0 <__assert_fail@plt+0x32e4>
   14bd4:	cmp	r3, #39	; 0x27
   14bd8:	addeq	r5, r5, #1
   14bdc:	mov	r3, #4
   14be0:	add	r2, r7, #12
   14be4:	add	r1, r7, #20
   14be8:	mov	r0, r5
   14bec:	moveq	r4, #4
   14bf0:	movne	r4, #0
   14bf4:	bl	267f4 <__assert_fail@plt+0x14e38>
   14bf8:	cmp	r0, #0
   14bfc:	blt	14c1c <__assert_fail@plt+0x3260>
   14c00:	add	r7, r7, r0, lsl #2
   14c04:	mov	r2, #1
   14c08:	ldr	r3, [r7, #12]
   14c0c:	orr	r4, r4, r3
   14c10:	mov	r3, #0
   14c14:	strd	r2, [r6]
   14c18:	b	14b90 <__assert_fail@plt+0x31d4>
   14c1c:	ldr	r3, [pc, #128]	; 14ca4 <__assert_fail@plt+0x32e8>
   14c20:	mov	r2, #0
   14c24:	str	r3, [sp]
   14c28:	add	r1, sp, #12
   14c2c:	mov	r3, r6
   14c30:	mov	r0, r5
   14c34:	bl	19d10 <__assert_fail@plt+0x8354>
   14c38:	cmp	r0, #0
   14c3c:	movne	r3, #0
   14c40:	ldreq	r2, [sp, #12]
   14c44:	strne	r3, [r8]
   14c48:	bne	14b98 <__assert_fail@plt+0x31dc>
   14c4c:	ldrb	r3, [r5]
   14c50:	sub	r3, r3, #48	; 0x30
   14c54:	cmp	r3, #9
   14c58:	bls	14b90 <__assert_fail@plt+0x31d4>
   14c5c:	cmp	r2, r5
   14c60:	bne	14c8c <__assert_fail@plt+0x32d0>
   14c64:	ldrb	r3, [r2, #-1]
   14c68:	cmp	r3, #66	; 0x42
   14c6c:	orrne	r4, r4, #128	; 0x80
   14c70:	bne	14c84 <__assert_fail@plt+0x32c8>
   14c74:	ldrb	r3, [r2, #-2]
   14c78:	orr	r4, r4, #384	; 0x180
   14c7c:	cmp	r3, #105	; 0x69
   14c80:	bne	14b90 <__assert_fail@plt+0x31d4>
   14c84:	orr	r4, r4, #32
   14c88:	b	14b90 <__assert_fail@plt+0x31d4>
   14c8c:	add	r5, r5, #1
   14c90:	b	14c4c <__assert_fail@plt+0x3290>
   14c94:	strdeq	r8, [r2], -ip
   14c98:	andeq	r8, r2, r7, lsl #18
   14c9c:	andeq	r8, r2, r1, lsl r9
   14ca0:	ldrdeq	r8, [r2], -r0
   14ca4:	andeq	r8, r2, r1, lsr #18
   14ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cac:	add	fp, sp, #32
   14cb0:	sub	sp, sp, #20
   14cb4:	str	r3, [fp, #-40]	; 0xffffffd8
   14cb8:	lsrs	r3, r2, #30
   14cbc:	mov	r7, r0
   14cc0:	movne	r3, #1
   14cc4:	moveq	r3, #0
   14cc8:	lsls	r0, r2, #2
   14ccc:	bmi	14cd8 <__assert_fail@plt+0x331c>
   14cd0:	cmp	r3, #0
   14cd4:	beq	14ce4 <__assert_fail@plt+0x3328>
   14cd8:	mov	r0, #0
   14cdc:	sub	sp, fp, #32
   14ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ce4:	cmp	r0, #4016	; 0xfb0
   14ce8:	mov	sl, r1
   14cec:	mov	r9, r2
   14cf0:	bhi	14de0 <__assert_fail@plt+0x3424>
   14cf4:	add	r0, r0, #29
   14cf8:	bic	r0, r0, #7
   14cfc:	sub	sp, sp, r0
   14d00:	add	r5, sp, #15
   14d04:	bic	r5, r5, #15
   14d08:	cmp	r5, #0
   14d0c:	beq	14cd8 <__assert_fail@plt+0x331c>
   14d10:	mov	r8, #0
   14d14:	mov	r4, #2
   14d18:	mov	r3, #1
   14d1c:	str	r3, [r5, #4]
   14d20:	cmp	r4, r9
   14d24:	bcc	14dec <__assert_fail@plt+0x3430>
   14d28:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14d2c:	mov	r8, r7
   14d30:	mov	r4, #0
   14d34:	str	r4, [r3]
   14d38:	ldrb	r6, [r8]
   14d3c:	cmp	r6, #0
   14d40:	beq	14dd0 <__assert_fail@plt+0x3414>
   14d44:	bl	1177c <__ctype_b_loc@plt>
   14d48:	ldrb	r3, [sl, r4]
   14d4c:	sxth	r2, r3
   14d50:	str	r2, [fp, #-48]	; 0xffffffd0
   14d54:	ldr	r1, [r0]
   14d58:	lsl	r0, r2, #1
   14d5c:	ldrh	r0, [r1, r0]
   14d60:	tst	r0, #256	; 0x100
   14d64:	beq	14d80 <__assert_fail@plt+0x33c4>
   14d68:	str	r1, [fp, #-44]	; 0xffffffd4
   14d6c:	bl	11758 <__ctype_tolower_loc@plt>
   14d70:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14d74:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14d78:	ldr	r3, [r0]
   14d7c:	ldr	r3, [r3, r2, lsl #2]
   14d80:	sxth	r2, r6
   14d84:	str	r2, [fp, #-48]	; 0xffffffd0
   14d88:	lsl	r0, r2, #1
   14d8c:	ldrh	r1, [r1, r0]
   14d90:	tst	r1, #256	; 0x100
   14d94:	beq	14db0 <__assert_fail@plt+0x33f4>
   14d98:	str	r3, [fp, #-44]	; 0xffffffd4
   14d9c:	bl	11758 <__ctype_tolower_loc@plt>
   14da0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14da4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14da8:	ldr	r1, [r0]
   14dac:	ldr	r6, [r1, r2, lsl #2]
   14db0:	cmp	r3, r6
   14db4:	bne	14e8c <__assert_fail@plt+0x34d0>
   14db8:	add	r4, r4, #1
   14dbc:	cmp	r9, r4
   14dc0:	add	r8, r8, #1
   14dc4:	bne	14d38 <__assert_fail@plt+0x337c>
   14dc8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14dcc:	str	r7, [r3]
   14dd0:	mov	r0, r5
   14dd4:	bl	26cac <__assert_fail@plt+0x152f0>
   14dd8:	mov	r0, #1
   14ddc:	b	14cdc <__assert_fail@plt+0x3320>
   14de0:	bl	26c5c <__assert_fail@plt+0x152a0>
   14de4:	mov	r5, r0
   14de8:	b	14d08 <__assert_fail@plt+0x334c>
   14dec:	bl	1177c <__ctype_b_loc@plt>
   14df0:	add	r3, sl, r4
   14df4:	ldrb	r2, [r3, #-1]
   14df8:	sxth	r3, r2
   14dfc:	str	r3, [fp, #-44]	; 0xffffffd4
   14e00:	lsl	r1, r3, #1
   14e04:	ldr	r6, [r0]
   14e08:	ldrh	r1, [r6, r1]
   14e0c:	tst	r1, #256	; 0x100
   14e10:	beq	14e24 <__assert_fail@plt+0x3468>
   14e14:	bl	11758 <__ctype_tolower_loc@plt>
   14e18:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14e1c:	ldr	r2, [r0]
   14e20:	ldrb	r2, [r2, r3, lsl #2]
   14e24:	ldrb	r3, [sl, r8]
   14e28:	sxth	r1, r3
   14e2c:	str	r1, [fp, #-48]	; 0xffffffd0
   14e30:	lsl	r0, r1, #1
   14e34:	ldrh	r0, [r6, r0]
   14e38:	tst	r0, #256	; 0x100
   14e3c:	beq	14e58 <__assert_fail@plt+0x349c>
   14e40:	str	r2, [fp, #-44]	; 0xffffffd4
   14e44:	bl	11758 <__ctype_tolower_loc@plt>
   14e48:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14e4c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   14e50:	ldr	r3, [r0]
   14e54:	ldr	r3, [r3, r1, lsl #2]
   14e58:	cmp	r3, r2
   14e5c:	bne	14e74 <__assert_fail@plt+0x34b8>
   14e60:	add	r8, r8, #1
   14e64:	sub	r3, r4, r8
   14e68:	str	r3, [r5, r4, lsl #2]
   14e6c:	add	r4, r4, #1
   14e70:	b	14d20 <__assert_fail@plt+0x3364>
   14e74:	cmp	r8, #0
   14e78:	streq	r4, [r5, r4, lsl #2]
   14e7c:	beq	14e6c <__assert_fail@plt+0x34b0>
   14e80:	ldr	r3, [r5, r8, lsl #2]
   14e84:	sub	r8, r8, r3
   14e88:	b	14e24 <__assert_fail@plt+0x3468>
   14e8c:	cmp	r4, #0
   14e90:	addeq	r7, r7, #1
   14e94:	ldrne	r3, [r5, r4, lsl #2]
   14e98:	addeq	r8, r8, #1
   14e9c:	addne	r7, r7, r3
   14ea0:	subne	r4, r4, r3
   14ea4:	b	14d38 <__assert_fail@plt+0x337c>
   14ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14eac:	add	fp, sp, #32
   14eb0:	mov	r8, r0
   14eb4:	sub	sp, sp, #236	; 0xec
   14eb8:	mov	r0, r1
   14ebc:	mov	r4, r1
   14ec0:	str	r2, [fp, #-264]	; 0xfffffef8
   14ec4:	bl	164b8 <__assert_fail@plt+0x4afc>
   14ec8:	mov	r7, #0
   14ecc:	str	r0, [fp, #-248]	; 0xffffff08
   14ed0:	ldr	r3, [fp, #-248]	; 0xffffff08
   14ed4:	mov	r6, r0
   14ed8:	lsl	r0, r3, #2
   14edc:	adds	r0, r0, r6
   14ee0:	lsr	r1, r3, #30
   14ee4:	adc	r1, r1, r7
   14ee8:	adds	r0, r0, r0
   14eec:	adc	r1, r1, r1
   14ef0:	adds	r6, r6, r0
   14ef4:	adc	r7, r7, r1
   14ef8:	lsl	r0, r6, #2
   14efc:	lsl	r1, r7, #2
   14f00:	orr	r1, r1, r6, lsr #30
   14f04:	adds	r1, r1, #0
   14f08:	movne	r1, #1
   14f0c:	cmp	r0, #0
   14f10:	blt	14f1c <__assert_fail@plt+0x3560>
   14f14:	cmp	r1, #0
   14f18:	beq	14f30 <__assert_fail@plt+0x3574>
   14f1c:	mov	r3, #0
   14f20:	str	r3, [fp, #-256]	; 0xffffff00
   14f24:	ldr	r0, [fp, #-256]	; 0xffffff00
   14f28:	sub	sp, fp, #32
   14f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f30:	ldr	r3, [fp, #-248]	; 0xffffff08
   14f34:	mov	r0, #44	; 0x2c
   14f38:	mul	r0, r0, r3
   14f3c:	cmp	r0, #4016	; 0xfb0
   14f40:	bhi	15020 <__assert_fail@plt+0x3664>
   14f44:	add	r0, r0, #29
   14f48:	bic	r0, r0, #7
   14f4c:	sub	sp, sp, r0
   14f50:	add	r3, sp, #15
   14f54:	bic	sl, r3, #15
   14f58:	cmp	sl, #0
   14f5c:	beq	14f1c <__assert_fail@plt+0x3560>
   14f60:	ldr	r2, [fp, #-248]	; 0xffffff08
   14f64:	mov	r3, #40	; 0x28
   14f68:	sub	r6, fp, #36	; 0x24
   14f6c:	mla	r3, r3, r2, sl
   14f70:	str	r4, [fp, #-188]	; 0xffffff44
   14f74:	str	r3, [fp, #-252]	; 0xffffff04
   14f78:	mov	r3, #0
   14f7c:	strb	r3, [r6, #-168]!	; 0xffffff58
   14f80:	add	r4, sl, #16
   14f84:	add	r5, r6, #4
   14f88:	add	r9, r6, #28
   14f8c:	str	r3, [fp, #-200]	; 0xffffff38
   14f90:	str	r3, [r5, #4]
   14f94:	strb	r3, [fp, #-192]	; 0xffffff40
   14f98:	ldrb	r3, [fp, #-204]	; 0xffffff34
   14f9c:	ldr	r7, [fp, #-188]	; 0xffffff44
   14fa0:	cmp	r3, #0
   14fa4:	bne	15058 <__assert_fail@plt+0x369c>
   14fa8:	ldrb	r3, [r7]
   14fac:	ldr	r1, [pc, #1952]	; 15754 <__assert_fail@plt+0x3d98>
   14fb0:	lsr	r2, r3, #5
   14fb4:	and	r3, r3, #31
   14fb8:	ldr	r2, [r1, r2, lsl #2]
   14fbc:	lsr	r3, r2, r3
   14fc0:	tst	r3, #1
   14fc4:	beq	1502c <__assert_fail@plt+0x3670>
   14fc8:	mov	r3, #1
   14fcc:	str	r3, [fp, #-184]	; 0xffffff48
   14fd0:	ldrb	r2, [r7]
   14fd4:	str	r2, [fp, #-176]	; 0xffffff50
   14fd8:	strb	r3, [fp, #-180]	; 0xffffff4c
   14fdc:	ldrb	r3, [fp, #-180]	; 0xffffff4c
   14fe0:	mov	r2, #1
   14fe4:	strb	r2, [fp, #-192]	; 0xffffff40
   14fe8:	cmp	r3, #0
   14fec:	str	r3, [fp, #-256]	; 0xffffff00
   14ff0:	beq	156c0 <__assert_fail@plt+0x3d04>
   14ff4:	ldr	r3, [fp, #-176]	; 0xffffff50
   14ff8:	cmp	r3, #0
   14ffc:	bne	156c0 <__assert_fail@plt+0x3d04>
   15000:	ldr	r1, [fp, #-252]	; 0xffffff04
   15004:	mov	r6, sl
   15008:	mov	r4, r3
   1500c:	str	r2, [r1, #4]
   15010:	mov	r5, #2
   15014:	mov	r7, #40	; 0x28
   15018:	mov	r9, r3
   1501c:	b	1517c <__assert_fail@plt+0x37c0>
   15020:	bl	26c5c <__assert_fail@plt+0x152a0>
   15024:	mov	sl, r0
   15028:	b	14f58 <__assert_fail@plt+0x359c>
   1502c:	mov	r0, r5
   15030:	bl	11614 <mbsinit@plt>
   15034:	cmp	r0, #0
   15038:	bne	15050 <__assert_fail@plt+0x3694>
   1503c:	ldr	r3, [pc, #1812]	; 15758 <__assert_fail@plt+0x3d9c>
   15040:	ldr	r1, [pc, #1812]	; 1575c <__assert_fail@plt+0x3da0>
   15044:	ldr	r0, [pc, #1812]	; 15760 <__assert_fail@plt+0x3da4>
   15048:	mov	r2, #143	; 0x8f
   1504c:	bl	119bc <__assert_fail@plt>
   15050:	mov	r3, #1
   15054:	strb	r3, [fp, #-204]	; 0xffffff34
   15058:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   1505c:	mov	r1, r0
   15060:	mov	r0, r7
   15064:	bl	1921c <__assert_fail@plt+0x7860>
   15068:	mov	r3, r5
   1506c:	mov	r1, r7
   15070:	mov	r2, r0
   15074:	mov	r0, r9
   15078:	bl	1a434 <__assert_fail@plt+0x8a78>
   1507c:	cmn	r0, #1
   15080:	str	r0, [fp, #-184]	; 0xffffff48
   15084:	bne	15098 <__assert_fail@plt+0x36dc>
   15088:	mov	r3, #1
   1508c:	str	r3, [fp, #-184]	; 0xffffff48
   15090:	mov	r3, #0
   15094:	b	14fd8 <__assert_fail@plt+0x361c>
   15098:	cmn	r0, #2
   1509c:	bne	150b0 <__assert_fail@plt+0x36f4>
   150a0:	ldr	r0, [fp, #-188]	; 0xffffff44
   150a4:	bl	117ac <strlen@plt>
   150a8:	str	r0, [fp, #-184]	; 0xffffff48
   150ac:	b	15090 <__assert_fail@plt+0x36d4>
   150b0:	cmp	r0, #0
   150b4:	bne	15104 <__assert_fail@plt+0x3748>
   150b8:	mov	r3, #1
   150bc:	str	r3, [fp, #-184]	; 0xffffff48
   150c0:	ldr	r3, [fp, #-188]	; 0xffffff44
   150c4:	ldrb	r3, [r3]
   150c8:	cmp	r3, #0
   150cc:	beq	150e4 <__assert_fail@plt+0x3728>
   150d0:	ldr	r3, [pc, #1664]	; 15758 <__assert_fail@plt+0x3d9c>
   150d4:	mov	r2, #171	; 0xab
   150d8:	ldr	r1, [pc, #1660]	; 1575c <__assert_fail@plt+0x3da0>
   150dc:	ldr	r0, [pc, #1664]	; 15764 <__assert_fail@plt+0x3da8>
   150e0:	b	1504c <__assert_fail@plt+0x3690>
   150e4:	ldr	r3, [fp, #-176]	; 0xffffff50
   150e8:	cmp	r3, #0
   150ec:	beq	15104 <__assert_fail@plt+0x3748>
   150f0:	ldr	r3, [pc, #1632]	; 15758 <__assert_fail@plt+0x3d9c>
   150f4:	mov	r2, #172	; 0xac
   150f8:	ldr	r1, [pc, #1628]	; 1575c <__assert_fail@plt+0x3da0>
   150fc:	ldr	r0, [pc, #1636]	; 15768 <__assert_fail@plt+0x3dac>
   15100:	b	1504c <__assert_fail@plt+0x3690>
   15104:	mov	r3, #1
   15108:	mov	r0, r5
   1510c:	strb	r3, [fp, #-180]	; 0xffffff4c
   15110:	bl	11614 <mbsinit@plt>
   15114:	cmp	r0, #0
   15118:	movne	r3, #0
   1511c:	strbne	r3, [fp, #-204]	; 0xffffff34
   15120:	b	14fdc <__assert_fail@plt+0x3620>
   15124:	ldrb	r3, [r6, #48]	; 0x30
   15128:	str	r3, [fp, #-260]	; 0xfffffefc
   1512c:	ldr	r3, [fp, #-260]	; 0xfffffefc
   15130:	cmp	r3, #0
   15134:	beq	152e8 <__assert_fail@plt+0x392c>
   15138:	mla	r3, r7, r4, sl
   1513c:	ldrb	r2, [r3, #8]
   15140:	cmp	r2, #0
   15144:	beq	152e8 <__assert_fail@plt+0x392c>
   15148:	ldr	r0, [r6, #52]	; 0x34
   1514c:	ldr	r3, [r3, #12]
   15150:	sub	r0, r0, r3
   15154:	clz	r0, r0
   15158:	lsr	r0, r0, #5
   1515c:	cmp	r0, #0
   15160:	beq	15320 <__assert_fail@plt+0x3964>
   15164:	ldr	r2, [fp, #-252]	; 0xffffff04
   15168:	add	r4, r4, #1
   1516c:	sub	r3, r5, r4
   15170:	str	r3, [r2, r5, lsl #2]
   15174:	add	r5, r5, #1
   15178:	add	r6, r6, #40	; 0x28
   1517c:	ldr	r3, [fp, #-248]	; 0xffffff08
   15180:	cmp	r5, r3
   15184:	bcc	15124 <__assert_fail@plt+0x3768>
   15188:	ldr	r3, [fp, #-264]	; 0xfffffef8
   1518c:	sub	r5, fp, #36	; 0x24
   15190:	sub	r6, fp, #36	; 0x24
   15194:	mov	r4, #0
   15198:	strb	r4, [r5, #-112]!	; 0xffffff90
   1519c:	str	r4, [fp, #-144]	; 0xffffff70
   151a0:	strb	r4, [r6, #-56]!	; 0xffffffc8
   151a4:	str	r4, [r5, #8]
   151a8:	str	r4, [fp, #-88]	; 0xffffffa8
   151ac:	str	r4, [r3]
   151b0:	str	r4, [r6, #8]
   151b4:	str	r8, [fp, #-132]	; 0xffffff7c
   151b8:	strb	r4, [fp, #-136]	; 0xffffff78
   151bc:	str	r8, [fp, #-76]	; 0xffffffb4
   151c0:	strb	r4, [fp, #-80]	; 0xffffffb0
   151c4:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   151c8:	cmp	r3, #0
   151cc:	bne	1521c <__assert_fail@plt+0x3860>
   151d0:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   151d4:	ldr	r7, [fp, #-76]	; 0xffffffb4
   151d8:	cmp	r3, #0
   151dc:	bne	1561c <__assert_fail@plt+0x3c60>
   151e0:	ldrb	r3, [r7]
   151e4:	ldr	r1, [pc, #1384]	; 15754 <__assert_fail@plt+0x3d98>
   151e8:	lsr	r2, r3, #5
   151ec:	and	r3, r3, #31
   151f0:	ldr	r2, [r1, r2, lsl #2]
   151f4:	lsr	r3, r2, r3
   151f8:	tst	r3, #1
   151fc:	beq	15604 <__assert_fail@plt+0x3c48>
   15200:	mov	r3, #1
   15204:	str	r3, [fp, #-72]	; 0xffffffb8
   15208:	ldrb	r2, [r7]
   1520c:	str	r2, [fp, #-64]	; 0xffffffc0
   15210:	strb	r3, [fp, #-68]	; 0xffffffbc
   15214:	mov	r3, #1
   15218:	strb	r3, [fp, #-80]	; 0xffffffb0
   1521c:	ldrb	r7, [fp, #-68]	; 0xffffffbc
   15220:	cmp	r7, #0
   15224:	beq	15234 <__assert_fail@plt+0x3878>
   15228:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1522c:	cmp	r3, #0
   15230:	beq	152dc <__assert_fail@plt+0x3920>
   15234:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15238:	add	r3, r6, #32
   1523c:	cmp	r1, r3
   15240:	strne	r1, [fp, #-244]	; 0xffffff0c
   15244:	bne	1525c <__assert_fail@plt+0x38a0>
   15248:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1524c:	sub	r0, fp, #228	; 0xe4
   15250:	bl	115e4 <memcpy@plt>
   15254:	sub	r3, fp, #228	; 0xe4
   15258:	str	r3, [fp, #-244]	; 0xffffff0c
   1525c:	ldr	r8, [fp, #-72]	; 0xffffffb8
   15260:	cmp	r7, #0
   15264:	str	r8, [fp, #-240]	; 0xffffff10
   15268:	strb	r7, [fp, #-236]	; 0xffffff14
   1526c:	beq	1527c <__assert_fail@plt+0x38c0>
   15270:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15274:	bl	11608 <towlower@plt>
   15278:	str	r0, [fp, #-232]	; 0xffffff18
   1527c:	mov	r3, #40	; 0x28
   15280:	mla	r3, r3, r4, sl
   15284:	ldrb	r0, [r3, #8]
   15288:	ands	r0, r7, r0
   1528c:	beq	1533c <__assert_fail@plt+0x3980>
   15290:	ldr	r0, [r3, #12]
   15294:	ldr	r7, [fp, #-232]	; 0xffffff18
   15298:	sub	r0, r0, r7
   1529c:	clz	r0, r0
   152a0:	lsr	r0, r0, #5
   152a4:	cmp	r0, #0
   152a8:	beq	15368 <__assert_fail@plt+0x39ac>
   152ac:	ldr	r3, [fp, #-76]	; 0xffffffb4
   152b0:	add	r4, r4, #1
   152b4:	add	r8, r3, r8
   152b8:	mov	r3, #0
   152bc:	strb	r3, [fp, #-80]	; 0xffffffb0
   152c0:	ldr	r3, [fp, #-248]	; 0xffffff08
   152c4:	str	r8, [fp, #-76]	; 0xffffffb4
   152c8:	cmp	r3, r4
   152cc:	bne	151c4 <__assert_fail@plt+0x3808>
   152d0:	ldr	r2, [fp, #-264]	; 0xfffffef8
   152d4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   152d8:	str	r3, [r2]
   152dc:	mov	r0, sl
   152e0:	bl	26cac <__assert_fail@plt+0x152f0>
   152e4:	b	14f24 <__assert_fail@plt+0x3568>
   152e8:	mul	r3, r7, r4
   152ec:	ldr	r2, [r6, #44]	; 0x2c
   152f0:	add	r1, sl, r3
   152f4:	ldr	r1, [r1, #4]
   152f8:	cmp	r2, r1
   152fc:	movne	r0, r9
   15300:	bne	15318 <__assert_fail@plt+0x395c>
   15304:	ldr	r1, [sl, r3]
   15308:	ldr	r0, [r6, #40]	; 0x28
   1530c:	bl	1162c <memcmp@plt>
   15310:	clz	r0, r0
   15314:	lsr	r0, r0, #5
   15318:	and	r0, r0, #1
   1531c:	b	1515c <__assert_fail@plt+0x37a0>
   15320:	cmp	r4, #0
   15324:	ldr	r3, [fp, #-252]	; 0xffffff04
   15328:	streq	r5, [r3, r5, lsl #2]
   1532c:	beq	15174 <__assert_fail@plt+0x37b8>
   15330:	ldr	r3, [r3, r4, lsl #2]
   15334:	sub	r4, r4, r3
   15338:	b	1512c <__assert_fail@plt+0x3770>
   1533c:	ldr	r2, [r3, #4]
   15340:	cmp	r2, r8
   15344:	bne	15360 <__assert_fail@plt+0x39a4>
   15348:	mov	r2, r8
   1534c:	ldr	r1, [fp, #-244]	; 0xffffff0c
   15350:	ldr	r0, [r3]
   15354:	bl	1162c <memcmp@plt>
   15358:	clz	r0, r0
   1535c:	lsr	r0, r0, #5
   15360:	and	r0, r0, #1
   15364:	b	152a4 <__assert_fail@plt+0x38e8>
   15368:	cmp	r4, #0
   1536c:	beq	154a8 <__assert_fail@plt+0x3aec>
   15370:	ldr	r3, [fp, #-252]	; 0xffffff04
   15374:	mov	r7, #1
   15378:	ldr	r9, [r3, r4, lsl #2]
   1537c:	add	r3, r5, #4
   15380:	sub	r4, r4, r9
   15384:	str	r3, [fp, #-260]	; 0xfffffefc
   15388:	cmp	r9, #0
   1538c:	beq	151c4 <__assert_fail@plt+0x3808>
   15390:	ldrb	r3, [fp, #-136]	; 0xffffff78
   15394:	cmp	r3, #0
   15398:	bne	153e0 <__assert_fail@plt+0x3a24>
   1539c:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   153a0:	ldr	r8, [fp, #-132]	; 0xffffff7c
   153a4:	cmp	r3, #0
   153a8:	bne	15410 <__assert_fail@plt+0x3a54>
   153ac:	ldrb	r3, [r8]
   153b0:	ldr	r1, [pc, #924]	; 15754 <__assert_fail@plt+0x3d98>
   153b4:	lsr	r2, r3, #5
   153b8:	and	r3, r3, #31
   153bc:	ldr	r2, [r1, r2, lsl #2]
   153c0:	lsr	r3, r2, r3
   153c4:	tst	r3, #1
   153c8:	beq	153fc <__assert_fail@plt+0x3a40>
   153cc:	str	r7, [fp, #-128]	; 0xffffff80
   153d0:	ldrb	r3, [r8]
   153d4:	strb	r7, [fp, #-124]	; 0xffffff84
   153d8:	str	r3, [fp, #-120]	; 0xffffff88
   153dc:	strb	r7, [fp, #-136]	; 0xffffff78
   153e0:	ldrb	r3, [fp, #-124]	; 0xffffff84
   153e4:	cmp	r3, #0
   153e8:	beq	15734 <__assert_fail@plt+0x3d78>
   153ec:	ldr	r3, [fp, #-120]	; 0xffffff88
   153f0:	cmp	r3, #0
   153f4:	bne	15734 <__assert_fail@plt+0x3d78>
   153f8:	bl	11980 <abort@plt>
   153fc:	ldr	r0, [fp, #-260]	; 0xfffffefc
   15400:	bl	11614 <mbsinit@plt>
   15404:	cmp	r0, #0
   15408:	beq	1503c <__assert_fail@plt+0x3680>
   1540c:	strb	r7, [fp, #-148]	; 0xffffff6c
   15410:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   15414:	mov	r1, r0
   15418:	mov	r0, r8
   1541c:	bl	1921c <__assert_fail@plt+0x7860>
   15420:	ldr	r3, [fp, #-260]	; 0xfffffefc
   15424:	mov	r1, r8
   15428:	mov	r2, r0
   1542c:	add	r0, r5, #28
   15430:	bl	1a434 <__assert_fail@plt+0x8a78>
   15434:	cmn	r0, #1
   15438:	str	r0, [fp, #-128]	; 0xffffff80
   1543c:	streq	r7, [fp, #-128]	; 0xffffff80
   15440:	beq	15458 <__assert_fail@plt+0x3a9c>
   15444:	cmn	r0, #2
   15448:	bne	15464 <__assert_fail@plt+0x3aa8>
   1544c:	ldr	r0, [fp, #-132]	; 0xffffff7c
   15450:	bl	117ac <strlen@plt>
   15454:	str	r0, [fp, #-128]	; 0xffffff80
   15458:	mov	r3, #0
   1545c:	strb	r3, [fp, #-124]	; 0xffffff84
   15460:	b	153dc <__assert_fail@plt+0x3a20>
   15464:	cmp	r0, #0
   15468:	bne	1548c <__assert_fail@plt+0x3ad0>
   1546c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15470:	str	r7, [fp, #-128]	; 0xffffff80
   15474:	ldrb	r3, [r3]
   15478:	cmp	r3, #0
   1547c:	bne	150d0 <__assert_fail@plt+0x3714>
   15480:	ldr	r3, [fp, #-120]	; 0xffffff88
   15484:	cmp	r3, #0
   15488:	bne	150f0 <__assert_fail@plt+0x3734>
   1548c:	ldr	r0, [fp, #-260]	; 0xfffffefc
   15490:	strb	r7, [fp, #-124]	; 0xffffff84
   15494:	bl	11614 <mbsinit@plt>
   15498:	cmp	r0, #0
   1549c:	movne	r3, #0
   154a0:	strbne	r3, [fp, #-148]	; 0xffffff6c
   154a4:	b	153dc <__assert_fail@plt+0x3a20>
   154a8:	ldrb	r3, [fp, #-136]	; 0xffffff78
   154ac:	cmp	r3, #0
   154b0:	bne	15500 <__assert_fail@plt+0x3b44>
   154b4:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   154b8:	ldr	r7, [fp, #-132]	; 0xffffff7c
   154bc:	cmp	r3, #0
   154c0:	bne	15560 <__assert_fail@plt+0x3ba4>
   154c4:	ldrb	r3, [r7]
   154c8:	ldr	r1, [pc, #644]	; 15754 <__assert_fail@plt+0x3d98>
   154cc:	lsr	r2, r3, #5
   154d0:	and	r3, r3, #31
   154d4:	ldr	r2, [r1, r2, lsl #2]
   154d8:	lsr	r3, r2, r3
   154dc:	tst	r3, #1
   154e0:	beq	15548 <__assert_fail@plt+0x3b8c>
   154e4:	mov	r3, #1
   154e8:	str	r3, [fp, #-128]	; 0xffffff80
   154ec:	ldrb	r2, [r7]
   154f0:	str	r2, [fp, #-120]	; 0xffffff88
   154f4:	strb	r3, [fp, #-124]	; 0xffffff84
   154f8:	mov	r3, #1
   154fc:	strb	r3, [fp, #-136]	; 0xffffff78
   15500:	ldrb	r3, [fp, #-124]	; 0xffffff84
   15504:	cmp	r3, #0
   15508:	beq	15518 <__assert_fail@plt+0x3b5c>
   1550c:	ldr	r3, [fp, #-120]	; 0xffffff88
   15510:	cmp	r3, #0
   15514:	beq	153f8 <__assert_fail@plt+0x3a3c>
   15518:	ldr	r2, [fp, #-128]	; 0xffffff80
   1551c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15520:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15524:	add	r3, r3, r2
   15528:	str	r3, [fp, #-132]	; 0xffffff7c
   1552c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15530:	mov	r2, #0
   15534:	add	r3, r3, r1
   15538:	strb	r2, [fp, #-136]	; 0xffffff78
   1553c:	str	r3, [fp, #-76]	; 0xffffffb4
   15540:	strb	r2, [fp, #-80]	; 0xffffffb0
   15544:	b	151c4 <__assert_fail@plt+0x3808>
   15548:	add	r0, r5, #4
   1554c:	bl	11614 <mbsinit@plt>
   15550:	cmp	r0, #0
   15554:	beq	1503c <__assert_fail@plt+0x3680>
   15558:	mov	r3, #1
   1555c:	strb	r3, [fp, #-148]	; 0xffffff6c
   15560:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   15564:	mov	r1, r0
   15568:	mov	r0, r7
   1556c:	bl	1921c <__assert_fail@plt+0x7860>
   15570:	add	r3, r5, #4
   15574:	mov	r1, r7
   15578:	mov	r2, r0
   1557c:	add	r0, r5, #28
   15580:	bl	1a434 <__assert_fail@plt+0x8a78>
   15584:	cmn	r0, #1
   15588:	str	r0, [fp, #-128]	; 0xffffff80
   1558c:	bne	155a0 <__assert_fail@plt+0x3be4>
   15590:	mov	r3, #1
   15594:	str	r3, [fp, #-128]	; 0xffffff80
   15598:	mov	r3, #0
   1559c:	b	154f4 <__assert_fail@plt+0x3b38>
   155a0:	cmn	r0, #2
   155a4:	bne	155b8 <__assert_fail@plt+0x3bfc>
   155a8:	ldr	r0, [fp, #-132]	; 0xffffff7c
   155ac:	bl	117ac <strlen@plt>
   155b0:	str	r0, [fp, #-128]	; 0xffffff80
   155b4:	b	15598 <__assert_fail@plt+0x3bdc>
   155b8:	cmp	r0, #0
   155bc:	bne	155e4 <__assert_fail@plt+0x3c28>
   155c0:	mov	r3, #1
   155c4:	str	r3, [fp, #-128]	; 0xffffff80
   155c8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   155cc:	ldrb	r3, [r3]
   155d0:	cmp	r3, #0
   155d4:	bne	150d0 <__assert_fail@plt+0x3714>
   155d8:	ldr	r3, [fp, #-120]	; 0xffffff88
   155dc:	cmp	r3, #0
   155e0:	bne	150f0 <__assert_fail@plt+0x3734>
   155e4:	mov	r3, #1
   155e8:	add	r0, r5, #4
   155ec:	strb	r3, [fp, #-124]	; 0xffffff84
   155f0:	bl	11614 <mbsinit@plt>
   155f4:	cmp	r0, #0
   155f8:	movne	r3, #0
   155fc:	strbne	r3, [fp, #-148]	; 0xffffff6c
   15600:	b	154f8 <__assert_fail@plt+0x3b3c>
   15604:	add	r0, r6, #4
   15608:	bl	11614 <mbsinit@plt>
   1560c:	cmp	r0, #0
   15610:	beq	1503c <__assert_fail@plt+0x3680>
   15614:	mov	r3, #1
   15618:	strb	r3, [fp, #-92]	; 0xffffffa4
   1561c:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   15620:	mov	r1, r0
   15624:	mov	r0, r7
   15628:	bl	1921c <__assert_fail@plt+0x7860>
   1562c:	add	r3, r6, #4
   15630:	mov	r1, r7
   15634:	mov	r2, r0
   15638:	add	r0, r6, #28
   1563c:	bl	1a434 <__assert_fail@plt+0x8a78>
   15640:	cmn	r0, #1
   15644:	str	r0, [fp, #-72]	; 0xffffffb8
   15648:	bne	1565c <__assert_fail@plt+0x3ca0>
   1564c:	mov	r3, #1
   15650:	str	r3, [fp, #-72]	; 0xffffffb8
   15654:	mov	r3, #0
   15658:	b	15210 <__assert_fail@plt+0x3854>
   1565c:	cmn	r0, #2
   15660:	bne	15674 <__assert_fail@plt+0x3cb8>
   15664:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15668:	bl	117ac <strlen@plt>
   1566c:	str	r0, [fp, #-72]	; 0xffffffb8
   15670:	b	15654 <__assert_fail@plt+0x3c98>
   15674:	cmp	r0, #0
   15678:	bne	156a0 <__assert_fail@plt+0x3ce4>
   1567c:	mov	r3, #1
   15680:	str	r3, [fp, #-72]	; 0xffffffb8
   15684:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15688:	ldrb	r3, [r3]
   1568c:	cmp	r3, #0
   15690:	bne	150d0 <__assert_fail@plt+0x3714>
   15694:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15698:	cmp	r3, #0
   1569c:	bne	150f0 <__assert_fail@plt+0x3734>
   156a0:	mov	r3, #1
   156a4:	add	r0, r6, #4
   156a8:	strb	r3, [fp, #-68]	; 0xffffffbc
   156ac:	bl	11614 <mbsinit@plt>
   156b0:	cmp	r0, #0
   156b4:	movne	r3, #0
   156b8:	strbne	r3, [fp, #-92]	; 0xffffffa4
   156bc:	b	15214 <__assert_fail@plt+0x3858>
   156c0:	ldr	r7, [fp, #-188]	; 0xffffff44
   156c4:	add	r3, r6, #32
   156c8:	cmp	r7, r3
   156cc:	strne	r7, [r4, #-16]
   156d0:	bne	156e8 <__assert_fail@plt+0x3d2c>
   156d4:	ldr	r2, [fp, #-184]	; 0xffffff48
   156d8:	mov	r1, r7
   156dc:	mov	r0, r4
   156e0:	bl	115e4 <memcpy@plt>
   156e4:	str	r4, [r4, #-16]
   156e8:	ldrb	r2, [fp, #-256]	; 0xffffff00
   156ec:	ldr	r3, [fp, #-184]	; 0xffffff48
   156f0:	strb	r2, [r4, #-8]
   156f4:	ldr	r2, [fp, #-256]	; 0xffffff00
   156f8:	str	r3, [r4, #-12]
   156fc:	cmp	r2, #0
   15700:	beq	1571c <__assert_fail@plt+0x3d60>
   15704:	ldr	r0, [fp, #-176]	; 0xffffff50
   15708:	str	r3, [fp, #-256]	; 0xffffff00
   1570c:	str	r0, [r4, #-4]
   15710:	bl	11608 <towlower@plt>
   15714:	ldr	r3, [fp, #-256]	; 0xffffff00
   15718:	str	r0, [r4, #-4]
   1571c:	add	r7, r7, r3
   15720:	mov	r3, #0
   15724:	str	r7, [fp, #-188]	; 0xffffff44
   15728:	strb	r3, [fp, #-192]	; 0xffffff40
   1572c:	add	r4, r4, #40	; 0x28
   15730:	b	14f98 <__assert_fail@plt+0x35dc>
   15734:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15738:	ldr	r2, [fp, #-128]	; 0xffffff80
   1573c:	sub	r9, r9, #1
   15740:	add	r3, r3, r2
   15744:	str	r3, [fp, #-132]	; 0xffffff7c
   15748:	mov	r3, #0
   1574c:	strb	r3, [fp, #-136]	; 0xffffff78
   15750:	b	15388 <__assert_fail@plt+0x39cc>
   15754:	strdeq	r9, [r2], -r8
   15758:	andeq	r8, r2, r5, asr #18
   1575c:	andeq	r8, r2, r8, asr r9
   15760:	andeq	r8, r2, r2, ror #18
   15764:	andeq	r8, r2, r9, ror r9
   15768:	muleq	r2, r0, r9
   1576c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15770:	sub	sp, sp, #404	; 0x194
   15774:	mov	r5, r1
   15778:	mov	r4, r0
   1577c:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   15780:	ldrb	r9, [r5]
   15784:	cmp	r0, #1
   15788:	bls	16018 <__assert_fail@plt+0x465c>
   1578c:	add	r7, sp, #400	; 0x190
   15790:	mov	r3, #0
   15794:	ldr	r8, [pc, #3332]	; 164a0 <__assert_fail@plt+0x4ae4>
   15798:	strb	r3, [r7, #-280]!	; 0xfffffee8
   1579c:	str	r3, [sp, #124]	; 0x7c
   157a0:	str	r3, [sp, #128]	; 0x80
   157a4:	strb	r3, [sp, #132]	; 0x84
   157a8:	lsr	r3, r9, #5
   157ac:	and	r6, r9, #31
   157b0:	ldr	r3, [r8, r3, lsl #2]
   157b4:	str	r5, [sp, #136]	; 0x88
   157b8:	lsr	r6, r3, r6
   157bc:	ands	r6, r6, #1
   157c0:	beq	157fc <__assert_fail@plt+0x3e40>
   157c4:	mov	r3, #1
   157c8:	str	r3, [sp, #140]	; 0x8c
   157cc:	str	r9, [sp, #148]	; 0x94
   157d0:	strb	r3, [sp, #144]	; 0x90
   157d4:	ldrb	r6, [sp, #144]	; 0x90
   157d8:	mov	r3, #1
   157dc:	strb	r3, [sp, #132]	; 0x84
   157e0:	cmp	r6, #0
   157e4:	beq	161e4 <__assert_fail@plt+0x4828>
   157e8:	ldr	r3, [sp, #148]	; 0x94
   157ec:	cmp	r3, #0
   157f0:	bne	161e4 <__assert_fail@plt+0x4828>
   157f4:	mov	r0, r4
   157f8:	b	162dc <__assert_fail@plt+0x4920>
   157fc:	add	r0, sp, #124	; 0x7c
   15800:	bl	11614 <mbsinit@plt>
   15804:	cmp	r0, #0
   15808:	bne	15820 <__assert_fail@plt+0x3e64>
   1580c:	ldr	r3, [pc, #3216]	; 164a4 <__assert_fail@plt+0x4ae8>
   15810:	ldr	r1, [pc, #3216]	; 164a8 <__assert_fail@plt+0x4aec>
   15814:	ldr	r0, [pc, #3216]	; 164ac <__assert_fail@plt+0x4af0>
   15818:	mov	r2, #143	; 0x8f
   1581c:	bl	119bc <__assert_fail@plt>
   15820:	mov	r9, #1
   15824:	strb	r9, [sp, #120]	; 0x78
   15828:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   1582c:	mov	r1, r0
   15830:	mov	r0, r5
   15834:	bl	1921c <__assert_fail@plt+0x7860>
   15838:	add	r3, sp, #124	; 0x7c
   1583c:	mov	r1, r5
   15840:	mov	r2, r0
   15844:	add	r0, r7, #28
   15848:	bl	1a434 <__assert_fail@plt+0x8a78>
   1584c:	cmn	r0, #1
   15850:	str	r0, [sp, #140]	; 0x8c
   15854:	streq	r9, [sp, #140]	; 0x8c
   15858:	beq	15870 <__assert_fail@plt+0x3eb4>
   1585c:	cmn	r0, #2
   15860:	bne	15878 <__assert_fail@plt+0x3ebc>
   15864:	ldr	r0, [sp, #136]	; 0x88
   15868:	bl	117ac <strlen@plt>
   1586c:	str	r0, [sp, #140]	; 0x8c
   15870:	strb	r6, [sp, #144]	; 0x90
   15874:	b	157d4 <__assert_fail@plt+0x3e18>
   15878:	cmp	r0, #0
   1587c:	bne	158c8 <__assert_fail@plt+0x3f0c>
   15880:	ldr	r3, [sp, #136]	; 0x88
   15884:	str	r9, [sp, #140]	; 0x8c
   15888:	ldrb	r3, [r3]
   1588c:	cmp	r3, #0
   15890:	beq	158a8 <__assert_fail@plt+0x3eec>
   15894:	ldr	r3, [pc, #3080]	; 164a4 <__assert_fail@plt+0x4ae8>
   15898:	mov	r2, #171	; 0xab
   1589c:	ldr	r1, [pc, #3076]	; 164a8 <__assert_fail@plt+0x4aec>
   158a0:	ldr	r0, [pc, #3080]	; 164b0 <__assert_fail@plt+0x4af4>
   158a4:	b	1581c <__assert_fail@plt+0x3e60>
   158a8:	ldr	r3, [sp, #148]	; 0x94
   158ac:	cmp	r3, #0
   158b0:	beq	158c8 <__assert_fail@plt+0x3f0c>
   158b4:	ldr	r3, [pc, #3048]	; 164a4 <__assert_fail@plt+0x4ae8>
   158b8:	mov	r2, #172	; 0xac
   158bc:	ldr	r1, [pc, #3044]	; 164a8 <__assert_fail@plt+0x4aec>
   158c0:	ldr	r0, [pc, #3052]	; 164b4 <__assert_fail@plt+0x4af8>
   158c4:	b	1581c <__assert_fail@plt+0x3e60>
   158c8:	mov	r3, #1
   158cc:	add	r0, sp, #124	; 0x7c
   158d0:	strb	r3, [sp, #144]	; 0x90
   158d4:	bl	11614 <mbsinit@plt>
   158d8:	cmp	r0, #0
   158dc:	movne	r3, #0
   158e0:	strbne	r3, [sp, #120]	; 0x78
   158e4:	b	157d4 <__assert_fail@plt+0x3e18>
   158e8:	add	r0, sp, #236	; 0xec
   158ec:	bl	11614 <mbsinit@plt>
   158f0:	cmp	r0, #0
   158f4:	beq	1580c <__assert_fail@plt+0x3e50>
   158f8:	mov	r3, #1
   158fc:	strb	r3, [sp, #232]	; 0xe8
   15900:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   15904:	mov	r1, r0
   15908:	mov	r0, sl
   1590c:	bl	1921c <__assert_fail@plt+0x7860>
   15910:	add	r3, sp, #236	; 0xec
   15914:	mov	r1, sl
   15918:	mov	r2, r0
   1591c:	add	r0, sp, #260	; 0x104
   15920:	bl	1a434 <__assert_fail@plt+0x8a78>
   15924:	cmn	r0, #1
   15928:	str	r0, [sp, #252]	; 0xfc
   1592c:	bne	15940 <__assert_fail@plt+0x3f84>
   15930:	mov	r3, #1
   15934:	str	r3, [sp, #252]	; 0xfc
   15938:	mov	r3, #0
   1593c:	b	162b8 <__assert_fail@plt+0x48fc>
   15940:	cmn	r0, #2
   15944:	bne	15958 <__assert_fail@plt+0x3f9c>
   15948:	ldr	r0, [sp, #248]	; 0xf8
   1594c:	bl	117ac <strlen@plt>
   15950:	str	r0, [sp, #252]	; 0xfc
   15954:	b	15938 <__assert_fail@plt+0x3f7c>
   15958:	cmp	r0, #0
   1595c:	bne	15984 <__assert_fail@plt+0x3fc8>
   15960:	mov	r3, #1
   15964:	str	r3, [sp, #252]	; 0xfc
   15968:	ldr	r3, [sp, #248]	; 0xf8
   1596c:	ldrb	r3, [r3]
   15970:	cmp	r3, #0
   15974:	bne	15894 <__assert_fail@plt+0x3ed8>
   15978:	ldr	r3, [sp, #260]	; 0x104
   1597c:	cmp	r3, #0
   15980:	bne	158b4 <__assert_fail@plt+0x3ef8>
   15984:	mov	r3, #1
   15988:	ldr	r0, [sp, #16]
   1598c:	strb	r3, [sp, #256]	; 0x100
   15990:	bl	11614 <mbsinit@plt>
   15994:	cmp	r0, #0
   15998:	movne	r3, #0
   1599c:	strbne	r3, [sp, #232]	; 0xe8
   159a0:	b	162bc <__assert_fail@plt+0x4900>
   159a4:	ldrb	r3, [sp, #188]	; 0xbc
   159a8:	cmp	r3, #0
   159ac:	bne	159f8 <__assert_fail@plt+0x403c>
   159b0:	ldrb	r3, [sp, #176]	; 0xb0
   159b4:	ldr	r9, [sp, #192]	; 0xc0
   159b8:	cmp	r3, #0
   159bc:	bne	15a48 <__assert_fail@plt+0x408c>
   159c0:	ldrb	r3, [r9]
   159c4:	lsr	r2, r3, #5
   159c8:	and	r3, r3, #31
   159cc:	ldr	r2, [r8, r2, lsl #2]
   159d0:	lsr	r3, r2, r3
   159d4:	tst	r3, #1
   159d8:	beq	15a30 <__assert_fail@plt+0x4074>
   159dc:	mov	r3, #1
   159e0:	str	r3, [sp, #196]	; 0xc4
   159e4:	ldrb	r2, [r9]
   159e8:	str	r2, [sp, #204]	; 0xcc
   159ec:	strb	r3, [sp, #200]	; 0xc8
   159f0:	mov	r3, #1
   159f4:	strb	r3, [sp, #188]	; 0xbc
   159f8:	ldrb	r3, [sp, #200]	; 0xc8
   159fc:	cmp	r3, #0
   15a00:	beq	15a10 <__assert_fail@plt+0x4054>
   15a04:	ldr	r3, [sp, #204]	; 0xcc
   15a08:	cmp	r3, #0
   15a0c:	beq	16324 <__assert_fail@plt+0x4968>
   15a10:	ldr	r3, [sp, #192]	; 0xc0
   15a14:	ldr	r2, [sp, #196]	; 0xc4
   15a18:	sub	r6, r6, #1
   15a1c:	add	r3, r3, r2
   15a20:	str	r3, [sp, #192]	; 0xc0
   15a24:	mov	r3, #0
   15a28:	strb	r3, [sp, #188]	; 0xbc
   15a2c:	b	1631c <__assert_fail@plt+0x4960>
   15a30:	add	r0, sp, #180	; 0xb4
   15a34:	bl	11614 <mbsinit@plt>
   15a38:	cmp	r0, #0
   15a3c:	beq	1580c <__assert_fail@plt+0x3e50>
   15a40:	mov	r3, #1
   15a44:	strb	r3, [sp, #176]	; 0xb0
   15a48:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   15a4c:	mov	r1, r0
   15a50:	mov	r0, r9
   15a54:	bl	1921c <__assert_fail@plt+0x7860>
   15a58:	add	r3, sp, #180	; 0xb4
   15a5c:	mov	r1, r9
   15a60:	mov	r2, r0
   15a64:	add	r0, sp, #204	; 0xcc
   15a68:	bl	1a434 <__assert_fail@plt+0x8a78>
   15a6c:	cmn	r0, #1
   15a70:	str	r0, [sp, #196]	; 0xc4
   15a74:	bne	15a88 <__assert_fail@plt+0x40cc>
   15a78:	mov	r3, #1
   15a7c:	str	r3, [sp, #196]	; 0xc4
   15a80:	mov	r3, #0
   15a84:	b	159ec <__assert_fail@plt+0x4030>
   15a88:	cmn	r0, #2
   15a8c:	bne	15aa0 <__assert_fail@plt+0x40e4>
   15a90:	ldr	r0, [sp, #192]	; 0xc0
   15a94:	bl	117ac <strlen@plt>
   15a98:	str	r0, [sp, #196]	; 0xc4
   15a9c:	b	15a80 <__assert_fail@plt+0x40c4>
   15aa0:	cmp	r0, #0
   15aa4:	bne	15acc <__assert_fail@plt+0x4110>
   15aa8:	mov	r3, #1
   15aac:	str	r3, [sp, #196]	; 0xc4
   15ab0:	ldr	r3, [sp, #192]	; 0xc0
   15ab4:	ldrb	r3, [r3]
   15ab8:	cmp	r3, #0
   15abc:	bne	15894 <__assert_fail@plt+0x3ed8>
   15ac0:	ldr	r3, [sp, #204]	; 0xcc
   15ac4:	cmp	r3, #0
   15ac8:	bne	158b4 <__assert_fail@plt+0x3ef8>
   15acc:	mov	r3, #1
   15ad0:	mov	r0, sl
   15ad4:	strb	r3, [sp, #200]	; 0xc8
   15ad8:	bl	11614 <mbsinit@plt>
   15adc:	cmp	r0, #0
   15ae0:	movne	r3, #0
   15ae4:	strbne	r3, [sp, #176]	; 0xb0
   15ae8:	b	159f0 <__assert_fail@plt+0x4034>
   15aec:	add	r0, sp, #180	; 0xb4
   15af0:	bl	11614 <mbsinit@plt>
   15af4:	cmp	r0, #0
   15af8:	beq	1580c <__assert_fail@plt+0x3e50>
   15afc:	mov	r3, #1
   15b00:	strb	r3, [sp, #176]	; 0xb0
   15b04:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   15b08:	mov	r1, r0
   15b0c:	mov	r0, r6
   15b10:	bl	1921c <__assert_fail@plt+0x7860>
   15b14:	add	r3, sp, #180	; 0xb4
   15b18:	mov	r1, r6
   15b1c:	mov	r2, r0
   15b20:	add	r0, sp, #204	; 0xcc
   15b24:	bl	1a434 <__assert_fail@plt+0x8a78>
   15b28:	cmn	r0, #1
   15b2c:	str	r0, [sp, #196]	; 0xc4
   15b30:	bne	15b44 <__assert_fail@plt+0x4188>
   15b34:	mov	r3, #1
   15b38:	str	r3, [sp, #196]	; 0xc4
   15b3c:	mov	r3, #0
   15b40:	b	1636c <__assert_fail@plt+0x49b0>
   15b44:	cmn	r0, #2
   15b48:	bne	15b5c <__assert_fail@plt+0x41a0>
   15b4c:	ldr	r0, [sp, #192]	; 0xc0
   15b50:	bl	117ac <strlen@plt>
   15b54:	str	r0, [sp, #196]	; 0xc4
   15b58:	b	15b3c <__assert_fail@plt+0x4180>
   15b5c:	cmp	r0, #0
   15b60:	bne	15b88 <__assert_fail@plt+0x41cc>
   15b64:	mov	r3, #1
   15b68:	str	r3, [sp, #196]	; 0xc4
   15b6c:	ldr	r3, [sp, #192]	; 0xc0
   15b70:	ldrb	r3, [r3]
   15b74:	cmp	r3, #0
   15b78:	bne	15894 <__assert_fail@plt+0x3ed8>
   15b7c:	ldr	r3, [sp, #204]	; 0xcc
   15b80:	cmp	r3, #0
   15b84:	bne	158b4 <__assert_fail@plt+0x3ef8>
   15b88:	mov	r3, #1
   15b8c:	add	r0, sp, #180	; 0xb4
   15b90:	strb	r3, [sp, #200]	; 0xc8
   15b94:	bl	11614 <mbsinit@plt>
   15b98:	cmp	r0, #0
   15b9c:	movne	r3, #0
   15ba0:	strbne	r3, [sp, #176]	; 0xb0
   15ba4:	b	16370 <__assert_fail@plt+0x49b4>
   15ba8:	mov	r6, r7
   15bac:	ldr	r3, [sp, #8]
   15bb0:	ldr	r1, [sp, #248]	; 0xf8
   15bb4:	add	r3, r3, #1
   15bb8:	str	r3, [sp, #8]
   15bbc:	add	r3, sp, #264	; 0x108
   15bc0:	cmp	r1, r3
   15bc4:	add	r7, r7, #1
   15bc8:	strne	r1, [sp, #80]	; 0x50
   15bcc:	bne	15be4 <__assert_fail@plt+0x4228>
   15bd0:	add	r3, sp, #96	; 0x60
   15bd4:	ldr	r2, [sp, #252]	; 0xfc
   15bd8:	mov	r0, r3
   15bdc:	bl	115e4 <memcpy@plt>
   15be0:	str	r0, [sp, #80]	; 0x50
   15be4:	ldrb	r3, [sp, #256]	; 0x100
   15be8:	ldr	r9, [sp, #252]	; 0xfc
   15bec:	cmp	r3, #0
   15bf0:	str	r9, [sp, #84]	; 0x54
   15bf4:	strb	r3, [sp, #88]	; 0x58
   15bf8:	beq	15ce0 <__assert_fail@plt+0x4324>
   15bfc:	ldr	r0, [sp, #260]	; 0x104
   15c00:	bl	11608 <towlower@plt>
   15c04:	ldrb	r3, [sp, #48]	; 0x30
   15c08:	cmp	r3, #0
   15c0c:	str	r0, [sp, #92]	; 0x5c
   15c10:	beq	15ce0 <__assert_fail@plt+0x4324>
   15c14:	ldr	r3, [sp, #52]	; 0x34
   15c18:	sub	r0, r3, r0
   15c1c:	clz	r0, r0
   15c20:	lsr	r0, r0, #5
   15c24:	cmp	r0, #0
   15c28:	beq	15ff8 <__assert_fail@plt+0x463c>
   15c2c:	ldr	lr, [sp, #12]
   15c30:	add	ip, sp, #288	; 0x120
   15c34:	add	sl, sp, #400	; 0x190
   15c38:	ldm	lr!, {r0, r1, r2, r3}
   15c3c:	stmia	ip!, {r0, r1, r2, r3}
   15c40:	ldm	lr!, {r0, r1, r2, r3}
   15c44:	stmia	ip!, {r0, r1, r2, r3}
   15c48:	ldm	lr!, {r0, r1, r2, r3}
   15c4c:	stmia	ip!, {r0, r1, r2, r3}
   15c50:	mov	r2, #0
   15c54:	ldr	r3, [sp, #304]	; 0x130
   15c58:	ldm	lr, {r0, r1}
   15c5c:	add	r9, r3, r9
   15c60:	str	r9, [sp, #304]	; 0x130
   15c64:	stm	ip, {r0, r1}
   15c68:	strb	r2, [sp, #300]	; 0x12c
   15c6c:	str	r5, [sp, #360]	; 0x168
   15c70:	strb	r2, [sl, #-56]!	; 0xffffffc8
   15c74:	add	r3, sl, #4
   15c78:	str	r2, [sp, #348]	; 0x15c
   15c7c:	str	r2, [r3, #4]
   15c80:	strb	r2, [sp, #356]	; 0x164
   15c84:	ldrb	r2, [r5]
   15c88:	and	r1, r2, #31
   15c8c:	lsr	r0, r2, #5
   15c90:	ldr	r9, [r8, r0, lsl #2]
   15c94:	lsr	r9, r9, r1
   15c98:	ands	r9, r9, #1
   15c9c:	beq	15d0c <__assert_fail@plt+0x4350>
   15ca0:	mov	r3, #1
   15ca4:	str	r3, [sp, #364]	; 0x16c
   15ca8:	str	r2, [sp, #372]	; 0x174
   15cac:	strb	r3, [sp, #368]	; 0x170
   15cb0:	mov	r3, #1
   15cb4:	strb	r3, [sp, #356]	; 0x164
   15cb8:	ldrb	r3, [sp, #368]	; 0x170
   15cbc:	cmp	r3, #0
   15cc0:	beq	163b4 <__assert_fail@plt+0x49f8>
   15cc4:	ldr	r3, [sp, #372]	; 0x174
   15cc8:	cmp	r3, #0
   15ccc:	bne	163b4 <__assert_fail@plt+0x49f8>
   15cd0:	bl	11980 <abort@plt>
   15cd4:	mov	r6, r7
   15cd8:	str	r3, [sp, #4]
   15cdc:	b	15bac <__assert_fail@plt+0x41f0>
   15ce0:	ldr	r3, [sp, #44]	; 0x2c
   15ce4:	cmp	r3, r9
   15ce8:	movne	r0, #0
   15cec:	bne	15c24 <__assert_fail@plt+0x4268>
   15cf0:	mov	r2, r9
   15cf4:	ldr	r1, [sp, #40]	; 0x28
   15cf8:	ldr	r0, [sp, #80]	; 0x50
   15cfc:	bl	1162c <memcmp@plt>
   15d00:	clz	r0, r0
   15d04:	lsr	r0, r0, #5
   15d08:	b	15c24 <__assert_fail@plt+0x4268>
   15d0c:	mov	r0, r3
   15d10:	str	r3, [sp, #20]
   15d14:	bl	11614 <mbsinit@plt>
   15d18:	cmp	r0, #0
   15d1c:	beq	1580c <__assert_fail@plt+0x3e50>
   15d20:	mov	fp, #1
   15d24:	strb	fp, [sp, #344]	; 0x158
   15d28:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   15d2c:	mov	r1, r0
   15d30:	mov	r0, r5
   15d34:	bl	1921c <__assert_fail@plt+0x7860>
   15d38:	ldr	r3, [sp, #20]
   15d3c:	mov	r1, r5
   15d40:	mov	r2, r0
   15d44:	add	r0, sl, #28
   15d48:	bl	1a434 <__assert_fail@plt+0x8a78>
   15d4c:	cmn	r0, #1
   15d50:	str	r0, [sp, #364]	; 0x16c
   15d54:	streq	fp, [sp, #364]	; 0x16c
   15d58:	beq	15d70 <__assert_fail@plt+0x43b4>
   15d5c:	cmn	r0, #2
   15d60:	bne	15d78 <__assert_fail@plt+0x43bc>
   15d64:	ldr	r0, [sp, #360]	; 0x168
   15d68:	bl	117ac <strlen@plt>
   15d6c:	str	r0, [sp, #364]	; 0x16c
   15d70:	strb	r9, [sp, #368]	; 0x170
   15d74:	b	15cb0 <__assert_fail@plt+0x42f4>
   15d78:	cmp	r0, #0
   15d7c:	bne	15da0 <__assert_fail@plt+0x43e4>
   15d80:	ldr	r3, [sp, #360]	; 0x168
   15d84:	str	fp, [sp, #364]	; 0x16c
   15d88:	ldrb	r3, [r3]
   15d8c:	cmp	r3, #0
   15d90:	bne	15894 <__assert_fail@plt+0x3ed8>
   15d94:	ldr	r3, [sp, #372]	; 0x174
   15d98:	cmp	r3, #0
   15d9c:	bne	158b4 <__assert_fail@plt+0x3ef8>
   15da0:	mov	r3, #1
   15da4:	add	r0, sp, #348	; 0x15c
   15da8:	strb	r3, [sp, #368]	; 0x170
   15dac:	bl	11614 <mbsinit@plt>
   15db0:	cmp	r0, #0
   15db4:	movne	r3, #0
   15db8:	strbne	r3, [sp, #344]	; 0x158
   15dbc:	b	15cb0 <__assert_fail@plt+0x42f4>
   15dc0:	add	r0, sp, #348	; 0x15c
   15dc4:	bl	11614 <mbsinit@plt>
   15dc8:	cmp	r0, #0
   15dcc:	beq	1580c <__assert_fail@plt+0x3e50>
   15dd0:	mov	r3, #1
   15dd4:	strb	r3, [sp, #344]	; 0x158
   15dd8:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   15ddc:	mov	r1, r0
   15de0:	mov	r0, r9
   15de4:	bl	1921c <__assert_fail@plt+0x7860>
   15de8:	mov	r3, fp
   15dec:	mov	r1, r9
   15df0:	mov	r2, r0
   15df4:	add	r0, sl, #28
   15df8:	bl	1a434 <__assert_fail@plt+0x8a78>
   15dfc:	cmn	r0, #1
   15e00:	str	r0, [sp, #364]	; 0x16c
   15e04:	bne	15e18 <__assert_fail@plt+0x445c>
   15e08:	mov	r3, #1
   15e0c:	str	r3, [sp, #364]	; 0x16c
   15e10:	mov	r3, #0
   15e14:	b	15fcc <__assert_fail@plt+0x4610>
   15e18:	cmn	r0, #2
   15e1c:	bne	15e30 <__assert_fail@plt+0x4474>
   15e20:	ldr	r0, [sp, #360]	; 0x168
   15e24:	bl	117ac <strlen@plt>
   15e28:	str	r0, [sp, #364]	; 0x16c
   15e2c:	b	15e10 <__assert_fail@plt+0x4454>
   15e30:	cmp	r0, #0
   15e34:	bne	15e5c <__assert_fail@plt+0x44a0>
   15e38:	mov	r3, #1
   15e3c:	str	r3, [sp, #364]	; 0x16c
   15e40:	ldr	r3, [sp, #360]	; 0x168
   15e44:	ldrb	r3, [r3]
   15e48:	cmp	r3, #0
   15e4c:	bne	15894 <__assert_fail@plt+0x3ed8>
   15e50:	ldr	r3, [sp, #372]	; 0x174
   15e54:	cmp	r3, #0
   15e58:	bne	158b4 <__assert_fail@plt+0x3ef8>
   15e5c:	mov	r3, #1
   15e60:	add	r0, sp, #348	; 0x15c
   15e64:	strb	r3, [sp, #368]	; 0x170
   15e68:	bl	11614 <mbsinit@plt>
   15e6c:	cmp	r0, #0
   15e70:	movne	r3, #0
   15e74:	strbne	r3, [sp, #344]	; 0x158
   15e78:	b	15fd0 <__assert_fail@plt+0x4614>
   15e7c:	add	r0, sp, #292	; 0x124
   15e80:	bl	11614 <mbsinit@plt>
   15e84:	cmp	r0, #0
   15e88:	beq	1580c <__assert_fail@plt+0x3e50>
   15e8c:	mov	r3, #1
   15e90:	strb	r3, [sp, #288]	; 0x120
   15e94:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   15e98:	mov	r1, r0
   15e9c:	mov	r0, r9
   15ea0:	bl	1921c <__assert_fail@plt+0x7860>
   15ea4:	add	r3, sp, #292	; 0x124
   15ea8:	mov	r1, r9
   15eac:	mov	r2, r0
   15eb0:	add	r0, sp, #316	; 0x13c
   15eb4:	bl	1a434 <__assert_fail@plt+0x8a78>
   15eb8:	cmn	r0, #1
   15ebc:	str	r0, [sp, #308]	; 0x134
   15ec0:	bne	15ed4 <__assert_fail@plt+0x4518>
   15ec4:	mov	r3, #1
   15ec8:	str	r3, [sp, #308]	; 0x134
   15ecc:	mov	r3, #0
   15ed0:	b	1641c <__assert_fail@plt+0x4a60>
   15ed4:	cmn	r0, #2
   15ed8:	bne	15eec <__assert_fail@plt+0x4530>
   15edc:	ldr	r0, [sp, #304]	; 0x130
   15ee0:	bl	117ac <strlen@plt>
   15ee4:	str	r0, [sp, #308]	; 0x134
   15ee8:	b	15ecc <__assert_fail@plt+0x4510>
   15eec:	cmp	r0, #0
   15ef0:	bne	15f18 <__assert_fail@plt+0x455c>
   15ef4:	mov	r3, #1
   15ef8:	str	r3, [sp, #308]	; 0x134
   15efc:	ldr	r3, [sp, #304]	; 0x130
   15f00:	ldrb	r3, [r3]
   15f04:	cmp	r3, #0
   15f08:	bne	15894 <__assert_fail@plt+0x3ed8>
   15f0c:	ldr	r3, [sp, #316]	; 0x13c
   15f10:	cmp	r3, #0
   15f14:	bne	158b4 <__assert_fail@plt+0x3ef8>
   15f18:	mov	r3, #1
   15f1c:	add	r0, sp, #292	; 0x124
   15f20:	strb	r3, [sp, #312]	; 0x138
   15f24:	bl	11614 <mbsinit@plt>
   15f28:	cmp	r0, #0
   15f2c:	movne	r3, #0
   15f30:	strbne	r3, [sp, #288]	; 0x120
   15f34:	b	16420 <__assert_fail@plt+0x4a64>
   15f38:	ldrb	r3, [sp, #368]	; 0x170
   15f3c:	cmp	r3, #0
   15f40:	beq	1644c <__assert_fail@plt+0x4a90>
   15f44:	ldr	r0, [sp, #316]	; 0x13c
   15f48:	bl	11608 <towlower@plt>
   15f4c:	mov	r9, r0
   15f50:	ldr	r0, [sp, #372]	; 0x174
   15f54:	bl	11608 <towlower@plt>
   15f58:	subs	r0, r9, r0
   15f5c:	movne	r0, #1
   15f60:	cmp	r0, #0
   15f64:	bne	15ff8 <__assert_fail@plt+0x463c>
   15f68:	ldr	r2, [sp, #308]	; 0x134
   15f6c:	ldr	r3, [sp, #304]	; 0x130
   15f70:	strb	r0, [sp, #300]	; 0x12c
   15f74:	add	r3, r3, r2
   15f78:	str	r3, [sp, #304]	; 0x130
   15f7c:	ldr	r2, [sp, #364]	; 0x16c
   15f80:	ldr	r3, [sp, #360]	; 0x168
   15f84:	strb	r0, [sp, #356]	; 0x164
   15f88:	add	r3, r3, r2
   15f8c:	str	r3, [sp, #360]	; 0x168
   15f90:	ldrb	r3, [sp, #344]	; 0x158
   15f94:	ldr	r9, [sp, #360]	; 0x168
   15f98:	cmp	r3, #0
   15f9c:	bne	15dd8 <__assert_fail@plt+0x441c>
   15fa0:	ldrb	r3, [r9]
   15fa4:	lsr	r2, r3, #5
   15fa8:	and	r3, r3, #31
   15fac:	ldr	r2, [r8, r2, lsl #2]
   15fb0:	lsr	r3, r2, r3
   15fb4:	tst	r3, #1
   15fb8:	beq	15dc0 <__assert_fail@plt+0x4404>
   15fbc:	mov	r3, #1
   15fc0:	str	r3, [sp, #364]	; 0x16c
   15fc4:	ldrb	r2, [r9]
   15fc8:	str	r2, [sp, #372]	; 0x174
   15fcc:	strb	r3, [sp, #368]	; 0x170
   15fd0:	mov	r3, #1
   15fd4:	strb	r3, [sp, #356]	; 0x164
   15fd8:	ldrb	r3, [sp, #368]	; 0x170
   15fdc:	cmp	r3, #0
   15fe0:	beq	163d4 <__assert_fail@plt+0x4a18>
   15fe4:	ldr	r3, [sp, #372]	; 0x174
   15fe8:	cmp	r3, #0
   15fec:	bne	163d4 <__assert_fail@plt+0x4a18>
   15ff0:	ldr	r0, [sp, #248]	; 0xf8
   15ff4:	b	162dc <__assert_fail@plt+0x4920>
   15ff8:	ldr	r3, [sp, #248]	; 0xf8
   15ffc:	ldr	r2, [sp, #252]	; 0xfc
   16000:	ldr	r9, [sp, #4]
   16004:	add	r3, r3, r2
   16008:	str	r3, [sp, #248]	; 0xf8
   1600c:	mov	r3, #0
   16010:	strb	r3, [sp, #244]	; 0xf4
   16014:	b	1627c <__assert_fail@plt+0x48c0>
   16018:	cmp	r9, #0
   1601c:	beq	157f4 <__assert_fail@plt+0x3e38>
   16020:	bl	1177c <__ctype_b_loc@plt>
   16024:	sxth	r6, r9
   16028:	lsl	r3, r6, #1
   1602c:	ldr	r2, [r0]
   16030:	mov	fp, r0
   16034:	ldrh	r3, [r2, r3]
   16038:	tst	r3, #256	; 0x100
   1603c:	streq	r9, [sp, #12]
   16040:	beq	16054 <__assert_fail@plt+0x4698>
   16044:	bl	11758 <__ctype_tolower_loc@plt>
   16048:	ldr	r3, [r0]
   1604c:	ldrb	r3, [r3, r6, lsl #2]
   16050:	str	r3, [sp, #12]
   16054:	add	r3, r5, #1
   16058:	mov	r9, #0
   1605c:	str	r3, [sp, #20]
   16060:	mov	sl, r5
   16064:	mov	r6, r9
   16068:	mov	r8, r9
   1606c:	mov	r3, #1
   16070:	ldrb	r2, [r4]
   16074:	cmp	r2, #0
   16078:	bne	16084 <__assert_fail@plt+0x46c8>
   1607c:	mov	r0, #0
   16080:	b	162dc <__assert_fail@plt+0x4920>
   16084:	cmp	r8, #9
   16088:	movls	r7, #0
   1608c:	andhi	r7, r3, #1
   16090:	cmp	r7, #0
   16094:	beq	161dc <__assert_fail@plt+0x4820>
   16098:	add	r3, r8, r8, lsl #2
   1609c:	cmp	r6, r3
   160a0:	bcc	160c8 <__assert_fail@plt+0x470c>
   160a4:	cmp	sl, #0
   160a8:	beq	16474 <__assert_fail@plt+0x4ab8>
   160ac:	sub	r1, r6, r9
   160b0:	mov	r0, sl
   160b4:	bl	11884 <strnlen@plt>
   160b8:	mov	r9, r6
   160bc:	ldrb	r3, [sl, r0]!
   160c0:	cmp	r3, #0
   160c4:	beq	16474 <__assert_fail@plt+0x4ab8>
   160c8:	add	r3, r6, #1
   160cc:	str	r3, [sp, #8]
   160d0:	ldr	r3, [fp]
   160d4:	add	r8, r8, #1
   160d8:	str	r3, [sp, #4]
   160dc:	ldrb	r3, [r4]
   160e0:	sxth	r2, r3
   160e4:	str	r2, [sp, #16]
   160e8:	lsl	r1, r2, #1
   160ec:	ldr	r2, [sp, #4]
   160f0:	ldrh	r1, [r2, r1]
   160f4:	tst	r1, #256	; 0x100
   160f8:	beq	1610c <__assert_fail@plt+0x4750>
   160fc:	bl	11758 <__ctype_tolower_loc@plt>
   16100:	ldr	r2, [sp, #16]
   16104:	ldr	r3, [r0]
   16108:	ldr	r3, [r3, r2, lsl #2]
   1610c:	ldr	r2, [sp, #12]
   16110:	cmp	r3, r2
   16114:	bne	161cc <__assert_fail@plt+0x4810>
   16118:	ldr	r2, [sp, #20]
   1611c:	sub	r3, r6, r5
   16120:	str	r4, [sp, #16]
   16124:	str	r3, [sp, #24]
   16128:	ldrb	r6, [r2], #1
   1612c:	cmp	r6, #0
   16130:	beq	157f4 <__assert_fail@plt+0x3e38>
   16134:	ldr	r1, [sp, #16]
   16138:	ldrb	r3, [r1, #1]!
   1613c:	cmp	r3, #0
   16140:	str	r1, [sp, #16]
   16144:	beq	1607c <__assert_fail@plt+0x46c0>
   16148:	ldr	r1, [sp, #24]
   1614c:	add	r1, r1, r2
   16150:	str	r1, [sp, #8]
   16154:	sxth	r1, r3
   16158:	str	r1, [sp, #32]
   1615c:	lsl	r0, r1, #1
   16160:	ldr	r1, [sp, #4]
   16164:	ldrh	r0, [r1, r0]
   16168:	tst	r0, #256	; 0x100
   1616c:	beq	16188 <__assert_fail@plt+0x47cc>
   16170:	str	r2, [sp, #28]
   16174:	bl	11758 <__ctype_tolower_loc@plt>
   16178:	ldr	r1, [sp, #32]
   1617c:	ldr	r2, [sp, #28]
   16180:	ldr	r3, [r0]
   16184:	ldr	r3, [r3, r1, lsl #2]
   16188:	sxth	r1, r6
   1618c:	str	r1, [sp, #36]	; 0x24
   16190:	lsl	r0, r1, #1
   16194:	ldr	r1, [sp, #4]
   16198:	ldrh	r0, [r1, r0]
   1619c:	tst	r0, #256	; 0x100
   161a0:	beq	161c4 <__assert_fail@plt+0x4808>
   161a4:	str	r2, [sp, #32]
   161a8:	str	r3, [sp, #28]
   161ac:	bl	11758 <__ctype_tolower_loc@plt>
   161b0:	ldr	r1, [sp, #36]	; 0x24
   161b4:	ldr	r3, [sp, #28]
   161b8:	ldr	r2, [sp, #32]
   161bc:	ldr	r0, [r0]
   161c0:	ldr	r6, [r0, r1, lsl #2]
   161c4:	cmp	r3, r6
   161c8:	beq	16128 <__assert_fail@plt+0x476c>
   161cc:	add	r4, r4, #1
   161d0:	ldr	r6, [sp, #8]
   161d4:	mov	r3, r7
   161d8:	b	16070 <__assert_fail@plt+0x46b4>
   161dc:	mov	r7, r3
   161e0:	b	160c8 <__assert_fail@plt+0x470c>
   161e4:	ldr	r1, [sp, #136]	; 0x88
   161e8:	add	r3, sp, #400	; 0x190
   161ec:	add	r7, r7, #32
   161f0:	mov	r2, #0
   161f4:	cmp	r1, r7
   161f8:	strb	r2, [r3, #-224]!	; 0xffffff20
   161fc:	str	r2, [sp, #180]	; 0xb4
   16200:	str	r5, [sp, #192]	; 0xc0
   16204:	str	r2, [r3, #8]
   16208:	strne	r1, [sp, #40]	; 0x28
   1620c:	strb	r2, [sp, #188]	; 0xbc
   16210:	bne	16228 <__assert_fail@plt+0x486c>
   16214:	add	r3, sp, #56	; 0x38
   16218:	ldr	r2, [sp, #140]	; 0x8c
   1621c:	mov	r0, r3
   16220:	bl	115e4 <memcpy@plt>
   16224:	str	r0, [sp, #40]	; 0x28
   16228:	ldr	r3, [sp, #140]	; 0x8c
   1622c:	cmp	r6, #0
   16230:	str	r3, [sp, #44]	; 0x2c
   16234:	strb	r6, [sp, #48]	; 0x30
   16238:	beq	16248 <__assert_fail@plt+0x488c>
   1623c:	ldr	r0, [sp, #148]	; 0x94
   16240:	bl	11608 <towlower@plt>
   16244:	str	r0, [sp, #52]	; 0x34
   16248:	mov	r6, #0
   1624c:	add	r3, sp, #400	; 0x190
   16250:	mov	r7, r6
   16254:	mov	r9, #1
   16258:	strb	r6, [r3, #-168]!	; 0xffffff58
   1625c:	str	r6, [sp, #236]	; 0xec
   16260:	str	r3, [sp, #12]
   16264:	str	r6, [r3, #8]
   16268:	add	r3, r3, #4
   1626c:	str	r4, [sp, #248]	; 0xf8
   16270:	strb	r6, [sp, #244]	; 0xf4
   16274:	str	r6, [sp, #8]
   16278:	str	r3, [sp, #16]
   1627c:	ldrb	r3, [sp, #232]	; 0xe8
   16280:	ldr	sl, [sp, #248]	; 0xf8
   16284:	cmp	r3, #0
   16288:	bne	15900 <__assert_fail@plt+0x3f44>
   1628c:	ldrb	r3, [sl]
   16290:	lsr	r2, r3, #5
   16294:	and	r3, r3, #31
   16298:	ldr	r2, [r8, r2, lsl #2]
   1629c:	lsr	r3, r2, r3
   162a0:	tst	r3, #1
   162a4:	beq	158e8 <__assert_fail@plt+0x3f2c>
   162a8:	mov	r3, #1
   162ac:	str	r3, [sp, #252]	; 0xfc
   162b0:	ldrb	r2, [sl]
   162b4:	str	r2, [sp, #260]	; 0x104
   162b8:	strb	r3, [sp, #256]	; 0x100
   162bc:	mov	r3, #1
   162c0:	strb	r3, [sp, #244]	; 0xf4
   162c4:	ldrb	r3, [sp, #256]	; 0x100
   162c8:	cmp	r3, #0
   162cc:	beq	162e4 <__assert_fail@plt+0x4928>
   162d0:	ldr	r0, [sp, #260]	; 0x104
   162d4:	cmp	r0, #0
   162d8:	bne	162e4 <__assert_fail@plt+0x4928>
   162dc:	add	sp, sp, #404	; 0x194
   162e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162e4:	ldr	r3, [sp, #8]
   162e8:	cmp	r3, #9
   162ec:	movls	r3, #0
   162f0:	andhi	r3, r9, #1
   162f4:	cmp	r3, #0
   162f8:	str	r3, [sp, #4]
   162fc:	streq	r9, [sp, #4]
   16300:	beq	15bac <__assert_fail@plt+0x41f0>
   16304:	ldr	r3, [sp, #8]
   16308:	add	r3, r3, r3, lsl #2
   1630c:	cmp	r7, r3
   16310:	bcc	15bac <__assert_fail@plt+0x41f0>
   16314:	sub	r6, r7, r6
   16318:	add	sl, sp, #180	; 0xb4
   1631c:	cmp	r6, #0
   16320:	bne	159a4 <__assert_fail@plt+0x3fe8>
   16324:	ldrb	r3, [sp, #188]	; 0xbc
   16328:	cmp	r3, #0
   1632c:	bne	16378 <__assert_fail@plt+0x49bc>
   16330:	ldrb	r3, [sp, #176]	; 0xb0
   16334:	ldr	r6, [sp, #192]	; 0xc0
   16338:	cmp	r3, #0
   1633c:	bne	15b04 <__assert_fail@plt+0x4148>
   16340:	ldrb	r3, [r6]
   16344:	lsr	r2, r3, #5
   16348:	and	r3, r3, #31
   1634c:	ldr	r2, [r8, r2, lsl #2]
   16350:	lsr	r3, r2, r3
   16354:	tst	r3, #1
   16358:	beq	15aec <__assert_fail@plt+0x4130>
   1635c:	mov	r3, #1
   16360:	str	r3, [sp, #196]	; 0xc4
   16364:	ldrb	r2, [r6]
   16368:	str	r2, [sp, #204]	; 0xcc
   1636c:	strb	r3, [sp, #200]	; 0xc8
   16370:	mov	r3, #1
   16374:	strb	r3, [sp, #188]	; 0xbc
   16378:	ldrb	r3, [sp, #200]	; 0xc8
   1637c:	cmp	r3, #0
   16380:	beq	15ba8 <__assert_fail@plt+0x41ec>
   16384:	ldr	r2, [sp, #204]	; 0xcc
   16388:	cmp	r2, #0
   1638c:	bne	15cd4 <__assert_fail@plt+0x4318>
   16390:	add	r2, sp, #344	; 0x158
   16394:	mov	r1, r5
   16398:	mov	r0, r4
   1639c:	bl	14ea8 <__assert_fail@plt+0x34ec>
   163a0:	subs	r3, r0, #0
   163a4:	str	r3, [sp, #4]
   163a8:	beq	15ba8 <__assert_fail@plt+0x41ec>
   163ac:	ldr	r0, [sp, #344]	; 0x158
   163b0:	b	162dc <__assert_fail@plt+0x4920>
   163b4:	ldr	r3, [sp, #360]	; 0x168
   163b8:	ldr	r2, [sp, #364]	; 0x16c
   163bc:	add	fp, sl, #4
   163c0:	add	r3, r3, r2
   163c4:	str	r3, [sp, #360]	; 0x168
   163c8:	mov	r3, #0
   163cc:	strb	r3, [sp, #356]	; 0x164
   163d0:	b	15f90 <__assert_fail@plt+0x45d4>
   163d4:	ldrb	r3, [sp, #300]	; 0x12c
   163d8:	cmp	r3, #0
   163dc:	bne	16428 <__assert_fail@plt+0x4a6c>
   163e0:	ldrb	r3, [sp, #288]	; 0x120
   163e4:	ldr	r9, [sp, #304]	; 0x130
   163e8:	cmp	r3, #0
   163ec:	bne	15e94 <__assert_fail@plt+0x44d8>
   163f0:	ldrb	r3, [r9]
   163f4:	lsr	r2, r3, #5
   163f8:	and	r3, r3, #31
   163fc:	ldr	r2, [r8, r2, lsl #2]
   16400:	lsr	r3, r2, r3
   16404:	tst	r3, #1
   16408:	beq	15e7c <__assert_fail@plt+0x44c0>
   1640c:	mov	r3, #1
   16410:	str	r3, [sp, #308]	; 0x134
   16414:	ldrb	r2, [r9]
   16418:	str	r2, [sp, #316]	; 0x13c
   1641c:	strb	r3, [sp, #312]	; 0x138
   16420:	mov	r3, #1
   16424:	strb	r3, [sp, #300]	; 0x12c
   16428:	ldrb	r3, [sp, #312]	; 0x138
   1642c:	cmp	r3, #0
   16430:	beq	16440 <__assert_fail@plt+0x4a84>
   16434:	ldr	r0, [sp, #316]	; 0x13c
   16438:	cmp	r0, #0
   1643c:	beq	162dc <__assert_fail@plt+0x4920>
   16440:	cmp	r3, #0
   16444:	add	r7, r7, #1
   16448:	bne	15f38 <__assert_fail@plt+0x457c>
   1644c:	ldr	r2, [sp, #308]	; 0x134
   16450:	ldr	r3, [sp, #364]	; 0x16c
   16454:	cmp	r2, r3
   16458:	bne	15ff8 <__assert_fail@plt+0x463c>
   1645c:	ldr	r1, [sp, #360]	; 0x168
   16460:	ldr	r0, [sp, #304]	; 0x130
   16464:	bl	1162c <memcmp@plt>
   16468:	adds	r0, r0, #0
   1646c:	movne	r0, #1
   16470:	b	15f60 <__assert_fail@plt+0x45a4>
   16474:	mov	r0, r5
   16478:	bl	117ac <strlen@plt>
   1647c:	add	r3, sp, #344	; 0x158
   16480:	mov	r1, r5
   16484:	mov	r2, r0
   16488:	mov	r0, r4
   1648c:	bl	14ca8 <__assert_fail@plt+0x32ec>
   16490:	subs	r7, r0, #0
   16494:	bne	163ac <__assert_fail@plt+0x49f0>
   16498:	mov	sl, r7
   1649c:	b	160c8 <__assert_fail@plt+0x470c>
   164a0:	strdeq	r9, [r2], -r8
   164a4:	andeq	r8, r2, r5, asr #18
   164a8:	andeq	r8, r2, r8, asr r9
   164ac:	andeq	r8, r2, r2, ror #18
   164b0:	andeq	r8, r2, r9, ror r9
   164b4:	muleq	r2, r0, r9
   164b8:	push	{r4, r5, r6, r7, r8, lr}
   164bc:	sub	sp, sp, #56	; 0x38
   164c0:	mov	r4, r0
   164c4:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   164c8:	cmp	r0, #1
   164cc:	bls	16650 <__assert_fail@plt+0x4c94>
   164d0:	add	r3, sp, #56	; 0x38
   164d4:	mov	r0, #0
   164d8:	ldr	r8, [pc, #416]	; 16680 <__assert_fail@plt+0x4cc4>
   164dc:	strb	r0, [r3, #-56]!	; 0xffffffc8
   164e0:	str	r4, [sp, #16]
   164e4:	add	r5, r3, #4
   164e8:	mov	r4, r0
   164ec:	add	r7, r3, #28
   164f0:	str	r0, [sp, #4]
   164f4:	str	r0, [r5, #4]
   164f8:	strb	r0, [sp, #12]
   164fc:	ldrb	r3, [sp]
   16500:	ldr	r6, [sp, #16]
   16504:	cmp	r3, #0
   16508:	bne	1658c <__assert_fail@plt+0x4bd0>
   1650c:	ldrb	r3, [r6]
   16510:	lsr	r2, r3, #5
   16514:	and	r3, r3, #31
   16518:	ldr	r2, [r8, r2, lsl #2]
   1651c:	lsr	r3, r2, r3
   16520:	tst	r3, #1
   16524:	beq	16560 <__assert_fail@plt+0x4ba4>
   16528:	mov	r3, #1
   1652c:	str	r3, [sp, #20]
   16530:	ldrb	r2, [r6]
   16534:	str	r2, [sp, #28]
   16538:	strb	r3, [sp, #24]
   1653c:	ldrb	r3, [sp, #24]
   16540:	cmp	r3, #0
   16544:	beq	16660 <__assert_fail@plt+0x4ca4>
   16548:	ldr	r3, [sp, #28]
   1654c:	cmp	r3, #0
   16550:	bne	16660 <__assert_fail@plt+0x4ca4>
   16554:	mov	r0, r4
   16558:	add	sp, sp, #56	; 0x38
   1655c:	pop	{r4, r5, r6, r7, r8, pc}
   16560:	mov	r0, r5
   16564:	bl	11614 <mbsinit@plt>
   16568:	cmp	r0, #0
   1656c:	bne	16584 <__assert_fail@plt+0x4bc8>
   16570:	ldr	r3, [pc, #268]	; 16684 <__assert_fail@plt+0x4cc8>
   16574:	ldr	r1, [pc, #268]	; 16688 <__assert_fail@plt+0x4ccc>
   16578:	ldr	r0, [pc, #268]	; 1668c <__assert_fail@plt+0x4cd0>
   1657c:	mov	r2, #143	; 0x8f
   16580:	bl	119bc <__assert_fail@plt>
   16584:	mov	r3, #1
   16588:	strb	r3, [sp]
   1658c:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   16590:	mov	r1, r0
   16594:	mov	r0, r6
   16598:	bl	1921c <__assert_fail@plt+0x7860>
   1659c:	mov	r3, r5
   165a0:	mov	r1, r6
   165a4:	mov	r2, r0
   165a8:	mov	r0, r7
   165ac:	bl	1a434 <__assert_fail@plt+0x8a78>
   165b0:	cmn	r0, #1
   165b4:	str	r0, [sp, #20]
   165b8:	bne	165cc <__assert_fail@plt+0x4c10>
   165bc:	mov	r3, #1
   165c0:	str	r3, [sp, #20]
   165c4:	mov	r3, #0
   165c8:	b	16538 <__assert_fail@plt+0x4b7c>
   165cc:	cmn	r0, #2
   165d0:	bne	165e4 <__assert_fail@plt+0x4c28>
   165d4:	ldr	r0, [sp, #16]
   165d8:	bl	117ac <strlen@plt>
   165dc:	str	r0, [sp, #20]
   165e0:	b	165c4 <__assert_fail@plt+0x4c08>
   165e4:	cmp	r0, #0
   165e8:	bne	16630 <__assert_fail@plt+0x4c74>
   165ec:	mov	r3, #1
   165f0:	str	r3, [sp, #20]
   165f4:	ldr	r3, [sp, #16]
   165f8:	ldrb	r3, [r3]
   165fc:	cmp	r3, #0
   16600:	ldrne	r3, [pc, #124]	; 16684 <__assert_fail@plt+0x4cc8>
   16604:	movne	r2, #171	; 0xab
   16608:	ldrne	r1, [pc, #120]	; 16688 <__assert_fail@plt+0x4ccc>
   1660c:	ldrne	r0, [pc, #124]	; 16690 <__assert_fail@plt+0x4cd4>
   16610:	bne	16580 <__assert_fail@plt+0x4bc4>
   16614:	ldr	r3, [sp, #28]
   16618:	cmp	r3, #0
   1661c:	ldrne	r3, [pc, #96]	; 16684 <__assert_fail@plt+0x4cc8>
   16620:	movne	r2, #172	; 0xac
   16624:	ldrne	r1, [pc, #92]	; 16688 <__assert_fail@plt+0x4ccc>
   16628:	ldrne	r0, [pc, #100]	; 16694 <__assert_fail@plt+0x4cd8>
   1662c:	bne	16580 <__assert_fail@plt+0x4bc4>
   16630:	mov	r3, #1
   16634:	mov	r0, r5
   16638:	strb	r3, [sp, #24]
   1663c:	bl	11614 <mbsinit@plt>
   16640:	cmp	r0, #0
   16644:	movne	r3, #0
   16648:	strbne	r3, [sp]
   1664c:	b	1653c <__assert_fail@plt+0x4b80>
   16650:	mov	r0, r4
   16654:	bl	117ac <strlen@plt>
   16658:	mov	r4, r0
   1665c:	b	16554 <__assert_fail@plt+0x4b98>
   16660:	ldr	r3, [sp, #16]
   16664:	ldr	r2, [sp, #20]
   16668:	add	r4, r4, #1
   1666c:	add	r3, r3, r2
   16670:	str	r3, [sp, #16]
   16674:	mov	r3, #0
   16678:	strb	r3, [sp, #12]
   1667c:	b	164fc <__assert_fail@plt+0x4b40>
   16680:	strdeq	r9, [r2], -r8
   16684:	andeq	r8, r2, r2, lsr #19
   16688:	andeq	r8, r2, r8, asr r9
   1668c:	andeq	r8, r2, r2, ror #18
   16690:	andeq	r8, r2, r9, ror r9
   16694:	muleq	r2, r0, r9
   16698:	push	{r4, r5, r6, r7, fp, lr}
   1669c:	mov	r7, r3
   166a0:	lsrs	r3, r2, #30
   166a4:	mov	r4, r0
   166a8:	movne	r3, #1
   166ac:	moveq	r3, #0
   166b0:	lsls	r0, r2, #2
   166b4:	add	fp, sp, #20
   166b8:	bmi	166c4 <__assert_fail@plt+0x4d08>
   166bc:	cmp	r3, #0
   166c0:	beq	166d0 <__assert_fail@plt+0x4d14>
   166c4:	mov	r0, #0
   166c8:	sub	sp, fp, #20
   166cc:	pop	{r4, r5, r6, r7, fp, pc}
   166d0:	cmp	r0, #4016	; 0xfb0
   166d4:	mov	r5, r1
   166d8:	mov	r6, r2
   166dc:	bhi	1675c <__assert_fail@plt+0x4da0>
   166e0:	add	r0, r0, #29
   166e4:	bic	r0, r0, #7
   166e8:	sub	sp, sp, r0
   166ec:	add	r0, sp, #15
   166f0:	bic	r0, r0, #15
   166f4:	cmp	r0, #0
   166f8:	beq	166c4 <__assert_fail@plt+0x4d08>
   166fc:	mov	r3, #1
   16700:	str	r3, [r0, #4]
   16704:	mov	ip, #0
   16708:	mov	r3, r5
   1670c:	mov	lr, #2
   16710:	cmp	lr, r6
   16714:	bcc	16764 <__assert_fail@plt+0x4da8>
   16718:	mov	r3, r4
   1671c:	mov	ip, #0
   16720:	str	ip, [r7]
   16724:	ldrb	r2, [r3]
   16728:	cmp	r2, #0
   1672c:	beq	16750 <__assert_fail@plt+0x4d94>
   16730:	ldrb	r1, [r5, ip]
   16734:	cmp	r1, r2
   16738:	bne	167a0 <__assert_fail@plt+0x4de4>
   1673c:	add	ip, ip, #1
   16740:	cmp	r6, ip
   16744:	add	r3, r3, #1
   16748:	bne	16724 <__assert_fail@plt+0x4d68>
   1674c:	str	r4, [r7]
   16750:	bl	26cac <__assert_fail@plt+0x152f0>
   16754:	mov	r0, #1
   16758:	b	166c8 <__assert_fail@plt+0x4d0c>
   1675c:	bl	26c5c <__assert_fail@plt+0x152a0>
   16760:	b	166f4 <__assert_fail@plt+0x4d38>
   16764:	ldrb	r1, [r3, #1]!
   16768:	ldrb	r2, [r5, ip]
   1676c:	cmp	r2, r1
   16770:	bne	16788 <__assert_fail@plt+0x4dcc>
   16774:	add	ip, ip, #1
   16778:	sub	r2, lr, ip
   1677c:	str	r2, [r0, lr, lsl #2]
   16780:	add	lr, lr, #1
   16784:	b	16710 <__assert_fail@plt+0x4d54>
   16788:	cmp	ip, #0
   1678c:	streq	lr, [r0, lr, lsl #2]
   16790:	beq	16780 <__assert_fail@plt+0x4dc4>
   16794:	ldr	r2, [r0, ip, lsl #2]
   16798:	sub	ip, ip, r2
   1679c:	b	16768 <__assert_fail@plt+0x4dac>
   167a0:	cmp	ip, #0
   167a4:	addeq	r4, r4, #1
   167a8:	ldrne	r2, [r0, ip, lsl #2]
   167ac:	addeq	r3, r3, #1
   167b0:	addne	r4, r4, r2
   167b4:	subne	ip, ip, r2
   167b8:	b	16724 <__assert_fail@plt+0x4d68>
   167bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167c0:	add	fp, sp, #32
   167c4:	sub	sp, sp, #196	; 0xc4
   167c8:	str	r0, [fp, #-220]	; 0xffffff24
   167cc:	mov	r0, r1
   167d0:	mov	r5, r1
   167d4:	str	r2, [fp, #-224]	; 0xffffff20
   167d8:	bl	164b8 <__assert_fail@plt+0x4afc>
   167dc:	mov	r7, #0
   167e0:	str	r0, [fp, #-208]	; 0xffffff30
   167e4:	ldr	r3, [fp, #-208]	; 0xffffff30
   167e8:	mov	r6, r0
   167ec:	lsl	r0, r3, #2
   167f0:	adds	r0, r0, r6
   167f4:	lsr	r1, r3, #30
   167f8:	adc	r1, r1, r7
   167fc:	adds	r0, r0, r0
   16800:	adc	r1, r1, r1
   16804:	adds	r6, r6, r0
   16808:	adc	r7, r7, r1
   1680c:	lsl	r0, r6, #2
   16810:	lsl	r1, r7, #2
   16814:	orr	r1, r1, r6, lsr #30
   16818:	adds	r1, r1, #0
   1681c:	movne	r1, #1
   16820:	cmp	r0, #0
   16824:	blt	16830 <__assert_fail@plt+0x4e74>
   16828:	cmp	r1, #0
   1682c:	beq	16844 <__assert_fail@plt+0x4e88>
   16830:	mov	r3, #0
   16834:	str	r3, [fp, #-216]	; 0xffffff28
   16838:	ldr	r0, [fp, #-216]	; 0xffffff28
   1683c:	sub	sp, fp, #32
   16840:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16844:	ldr	r3, [fp, #-208]	; 0xffffff30
   16848:	mov	r0, #44	; 0x2c
   1684c:	mul	r0, r0, r3
   16850:	cmp	r0, #4016	; 0xfb0
   16854:	bhi	16934 <__assert_fail@plt+0x4f78>
   16858:	add	r0, r0, #29
   1685c:	bic	r0, r0, #7
   16860:	sub	sp, sp, r0
   16864:	add	r4, sp, #15
   16868:	bic	r4, r4, #15
   1686c:	cmp	r4, #0
   16870:	beq	16830 <__assert_fail@plt+0x4e74>
   16874:	ldr	r2, [fp, #-208]	; 0xffffff30
   16878:	mov	r3, #40	; 0x28
   1687c:	sub	r7, fp, #36	; 0x24
   16880:	mla	r3, r3, r2, r4
   16884:	ldr	sl, [pc, #1876]	; 16fe0 <__assert_fail@plt+0x5624>
   16888:	str	r3, [fp, #-212]	; 0xffffff2c
   1688c:	mov	r3, #0
   16890:	strb	r3, [r7, #-168]!	; 0xffffff58
   16894:	str	r5, [fp, #-188]	; 0xffffff44
   16898:	add	r6, r7, #4
   1689c:	add	r5, r4, #16
   168a0:	add	r9, r7, #28
   168a4:	str	r3, [fp, #-200]	; 0xffffff38
   168a8:	str	r3, [r6, #4]
   168ac:	strb	r3, [fp, #-192]	; 0xffffff40
   168b0:	ldrb	r3, [fp, #-204]	; 0xffffff34
   168b4:	ldr	r8, [fp, #-188]	; 0xffffff44
   168b8:	cmp	r3, #0
   168bc:	bne	1696c <__assert_fail@plt+0x4fb0>
   168c0:	ldrb	r3, [r8]
   168c4:	lsr	r2, r3, #5
   168c8:	and	r3, r3, #31
   168cc:	ldr	r2, [sl, r2, lsl #2]
   168d0:	lsr	r3, r2, r3
   168d4:	tst	r3, #1
   168d8:	beq	16940 <__assert_fail@plt+0x4f84>
   168dc:	mov	r3, #1
   168e0:	str	r3, [fp, #-184]	; 0xffffff48
   168e4:	ldrb	r2, [r8]
   168e8:	str	r2, [fp, #-176]	; 0xffffff50
   168ec:	strb	r3, [fp, #-180]	; 0xffffff4c
   168f0:	ldrb	r3, [fp, #-180]	; 0xffffff4c
   168f4:	mov	r2, #1
   168f8:	strb	r2, [fp, #-192]	; 0xffffff40
   168fc:	cmp	r3, #0
   16900:	str	r3, [fp, #-216]	; 0xffffff28
   16904:	beq	16f60 <__assert_fail@plt+0x55a4>
   16908:	ldr	r3, [fp, #-176]	; 0xffffff50
   1690c:	cmp	r3, #0
   16910:	bne	16f60 <__assert_fail@plt+0x55a4>
   16914:	ldr	r1, [fp, #-212]	; 0xffffff2c
   16918:	mov	r7, r4
   1691c:	mov	r5, r3
   16920:	str	r2, [r1, #4]
   16924:	mov	r6, #2
   16928:	mov	r8, #40	; 0x28
   1692c:	mov	r9, r3
   16930:	b	16a88 <__assert_fail@plt+0x50cc>
   16934:	bl	26c5c <__assert_fail@plt+0x152a0>
   16938:	mov	r4, r0
   1693c:	b	1686c <__assert_fail@plt+0x4eb0>
   16940:	mov	r0, r6
   16944:	bl	11614 <mbsinit@plt>
   16948:	cmp	r0, #0
   1694c:	bne	16964 <__assert_fail@plt+0x4fa8>
   16950:	ldr	r3, [pc, #1676]	; 16fe4 <__assert_fail@plt+0x5628>
   16954:	ldr	r1, [pc, #1676]	; 16fe8 <__assert_fail@plt+0x562c>
   16958:	ldr	r0, [pc, #1676]	; 16fec <__assert_fail@plt+0x5630>
   1695c:	mov	r2, #143	; 0x8f
   16960:	bl	119bc <__assert_fail@plt>
   16964:	mov	r3, #1
   16968:	strb	r3, [fp, #-204]	; 0xffffff34
   1696c:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   16970:	mov	r1, r0
   16974:	mov	r0, r8
   16978:	bl	1921c <__assert_fail@plt+0x7860>
   1697c:	mov	r3, r6
   16980:	mov	r1, r8
   16984:	mov	r2, r0
   16988:	mov	r0, r9
   1698c:	bl	1a434 <__assert_fail@plt+0x8a78>
   16990:	cmn	r0, #1
   16994:	str	r0, [fp, #-184]	; 0xffffff48
   16998:	bne	169ac <__assert_fail@plt+0x4ff0>
   1699c:	mov	r3, #1
   169a0:	str	r3, [fp, #-184]	; 0xffffff48
   169a4:	mov	r3, #0
   169a8:	b	168ec <__assert_fail@plt+0x4f30>
   169ac:	cmn	r0, #2
   169b0:	bne	169c4 <__assert_fail@plt+0x5008>
   169b4:	ldr	r0, [fp, #-188]	; 0xffffff44
   169b8:	bl	117ac <strlen@plt>
   169bc:	str	r0, [fp, #-184]	; 0xffffff48
   169c0:	b	169a4 <__assert_fail@plt+0x4fe8>
   169c4:	cmp	r0, #0
   169c8:	bne	16a18 <__assert_fail@plt+0x505c>
   169cc:	mov	r3, #1
   169d0:	str	r3, [fp, #-184]	; 0xffffff48
   169d4:	ldr	r3, [fp, #-188]	; 0xffffff44
   169d8:	ldrb	r3, [r3]
   169dc:	cmp	r3, #0
   169e0:	beq	169f8 <__assert_fail@plt+0x503c>
   169e4:	ldr	r3, [pc, #1528]	; 16fe4 <__assert_fail@plt+0x5628>
   169e8:	mov	r2, #171	; 0xab
   169ec:	ldr	r1, [pc, #1524]	; 16fe8 <__assert_fail@plt+0x562c>
   169f0:	ldr	r0, [pc, #1528]	; 16ff0 <__assert_fail@plt+0x5634>
   169f4:	b	16960 <__assert_fail@plt+0x4fa4>
   169f8:	ldr	r3, [fp, #-176]	; 0xffffff50
   169fc:	cmp	r3, #0
   16a00:	beq	16a18 <__assert_fail@plt+0x505c>
   16a04:	ldr	r3, [pc, #1496]	; 16fe4 <__assert_fail@plt+0x5628>
   16a08:	mov	r2, #172	; 0xac
   16a0c:	ldr	r1, [pc, #1492]	; 16fe8 <__assert_fail@plt+0x562c>
   16a10:	ldr	r0, [pc, #1500]	; 16ff4 <__assert_fail@plt+0x5638>
   16a14:	b	16960 <__assert_fail@plt+0x4fa4>
   16a18:	mov	r3, #1
   16a1c:	mov	r0, r6
   16a20:	strb	r3, [fp, #-180]	; 0xffffff4c
   16a24:	bl	11614 <mbsinit@plt>
   16a28:	cmp	r0, #0
   16a2c:	movne	r3, #0
   16a30:	strbne	r3, [fp, #-204]	; 0xffffff34
   16a34:	b	168f0 <__assert_fail@plt+0x4f34>
   16a38:	ldrb	sl, [r7, #48]	; 0x30
   16a3c:	cmp	sl, #0
   16a40:	beq	16b84 <__assert_fail@plt+0x51c8>
   16a44:	mla	r3, r8, r5, r4
   16a48:	ldrb	r2, [r3, #8]
   16a4c:	cmp	r2, #0
   16a50:	beq	16b84 <__assert_fail@plt+0x51c8>
   16a54:	ldr	r0, [r7, #52]	; 0x34
   16a58:	ldr	r3, [r3, #12]
   16a5c:	sub	r0, r0, r3
   16a60:	clz	r0, r0
   16a64:	lsr	r0, r0, #5
   16a68:	cmp	r0, #0
   16a6c:	beq	16bbc <__assert_fail@plt+0x5200>
   16a70:	ldr	r2, [fp, #-212]	; 0xffffff2c
   16a74:	add	r5, r5, #1
   16a78:	sub	r3, r6, r5
   16a7c:	str	r3, [r2, r6, lsl #2]
   16a80:	add	r6, r6, #1
   16a84:	add	r7, r7, #40	; 0x28
   16a88:	ldr	r3, [fp, #-208]	; 0xffffff30
   16a8c:	cmp	r6, r3
   16a90:	bcc	16a38 <__assert_fail@plt+0x507c>
   16a94:	ldr	r3, [fp, #-224]	; 0xffffff20
   16a98:	mov	r6, #0
   16a9c:	sub	r7, fp, #36	; 0x24
   16aa0:	str	r6, [r3]
   16aa4:	ldr	r3, [fp, #-220]	; 0xffffff24
   16aa8:	sub	r8, fp, #36	; 0x24
   16aac:	str	r3, [fp, #-132]	; 0xffffff7c
   16ab0:	mov	r5, #1
   16ab4:	ldr	r3, [fp, #-220]	; 0xffffff24
   16ab8:	strb	r6, [r7, #-112]!	; 0xffffff90
   16abc:	str	r6, [fp, #-144]	; 0xffffff70
   16ac0:	strb	r6, [r8, #-56]!	; 0xffffffc8
   16ac4:	str	r6, [r7, #8]
   16ac8:	str	r6, [fp, #-88]	; 0xffffffa8
   16acc:	strb	r6, [fp, #-136]	; 0xffffff78
   16ad0:	str	r6, [r8, #8]
   16ad4:	str	r3, [fp, #-76]	; 0xffffffb4
   16ad8:	strb	r6, [fp, #-80]	; 0xffffffb0
   16adc:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   16ae0:	cmp	r3, #0
   16ae4:	bne	16b2c <__assert_fail@plt+0x5170>
   16ae8:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   16aec:	ldr	r9, [fp, #-76]	; 0xffffffb4
   16af0:	cmp	r3, #0
   16af4:	bne	16ec8 <__assert_fail@plt+0x550c>
   16af8:	ldrb	r3, [r9]
   16afc:	ldr	r1, [pc, #1244]	; 16fe0 <__assert_fail@plt+0x5624>
   16b00:	lsr	r2, r3, #5
   16b04:	and	r3, r3, #31
   16b08:	ldr	r2, [r1, r2, lsl #2]
   16b0c:	lsr	r3, r2, r3
   16b10:	tst	r3, #1
   16b14:	beq	16eb4 <__assert_fail@plt+0x54f8>
   16b18:	str	r5, [fp, #-72]	; 0xffffffb8
   16b1c:	ldrb	r3, [r9]
   16b20:	strb	r5, [fp, #-68]	; 0xffffffbc
   16b24:	str	r3, [fp, #-64]	; 0xffffffc0
   16b28:	strb	r5, [fp, #-80]	; 0xffffffb0
   16b2c:	ldrb	r0, [fp, #-68]	; 0xffffffbc
   16b30:	cmp	r0, #0
   16b34:	beq	16b44 <__assert_fail@plt+0x5188>
   16b38:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16b3c:	cmp	r3, #0
   16b40:	beq	16c28 <__assert_fail@plt+0x526c>
   16b44:	mov	r3, #40	; 0x28
   16b48:	mla	r3, r3, r6, r4
   16b4c:	ldrb	r2, [r3, #8]
   16b50:	ands	r0, r0, r2
   16b54:	bne	16bd8 <__assert_fail@plt+0x521c>
   16b58:	ldr	r2, [r3, #4]
   16b5c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16b60:	cmp	r2, r1
   16b64:	bne	16b7c <__assert_fail@plt+0x51c0>
   16b68:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16b6c:	ldr	r0, [r3]
   16b70:	bl	1162c <memcmp@plt>
   16b74:	clz	r0, r0
   16b78:	lsr	r0, r0, #5
   16b7c:	and	r0, r0, #1
   16b80:	b	16bec <__assert_fail@plt+0x5230>
   16b84:	mul	r3, r8, r5
   16b88:	ldr	r2, [r7, #44]	; 0x2c
   16b8c:	add	r1, r4, r3
   16b90:	ldr	r1, [r1, #4]
   16b94:	cmp	r2, r1
   16b98:	movne	r0, r9
   16b9c:	bne	16bb4 <__assert_fail@plt+0x51f8>
   16ba0:	ldr	r1, [r4, r3]
   16ba4:	ldr	r0, [r7, #40]	; 0x28
   16ba8:	bl	1162c <memcmp@plt>
   16bac:	clz	r0, r0
   16bb0:	lsr	r0, r0, #5
   16bb4:	and	r0, r0, #1
   16bb8:	b	16a68 <__assert_fail@plt+0x50ac>
   16bbc:	cmp	r5, #0
   16bc0:	ldr	r3, [fp, #-212]	; 0xffffff2c
   16bc4:	streq	r6, [r3, r6, lsl #2]
   16bc8:	beq	16a80 <__assert_fail@plt+0x50c4>
   16bcc:	ldr	r3, [r3, r5, lsl #2]
   16bd0:	sub	r5, r5, r3
   16bd4:	b	16a3c <__assert_fail@plt+0x5080>
   16bd8:	ldr	r0, [r3, #12]
   16bdc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16be0:	sub	r0, r0, r3
   16be4:	clz	r0, r0
   16be8:	lsr	r0, r0, #5
   16bec:	cmp	r0, #0
   16bf0:	beq	16c34 <__assert_fail@plt+0x5278>
   16bf4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16bf8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16bfc:	add	r6, r6, #1
   16c00:	add	r3, r3, r2
   16c04:	str	r3, [fp, #-76]	; 0xffffffb4
   16c08:	mov	r3, #0
   16c0c:	strb	r3, [fp, #-80]	; 0xffffffb0
   16c10:	ldr	r3, [fp, #-208]	; 0xffffff30
   16c14:	cmp	r3, r6
   16c18:	bne	16adc <__assert_fail@plt+0x5120>
   16c1c:	ldr	r2, [fp, #-224]	; 0xffffff20
   16c20:	ldr	r3, [fp, #-132]	; 0xffffff7c
   16c24:	str	r3, [r2]
   16c28:	mov	r0, r4
   16c2c:	bl	26cac <__assert_fail@plt+0x152f0>
   16c30:	b	16838 <__assert_fail@plt+0x4e7c>
   16c34:	cmp	r6, #0
   16c38:	beq	16d70 <__assert_fail@plt+0x53b4>
   16c3c:	ldr	r3, [fp, #-212]	; 0xffffff2c
   16c40:	ldr	sl, [r3, r6, lsl #2]
   16c44:	add	r3, r7, #4
   16c48:	sub	r6, r6, sl
   16c4c:	str	r3, [fp, #-220]	; 0xffffff24
   16c50:	cmp	sl, #0
   16c54:	beq	16adc <__assert_fail@plt+0x5120>
   16c58:	ldrb	r3, [fp, #-136]	; 0xffffff78
   16c5c:	cmp	r3, #0
   16c60:	bne	16ca8 <__assert_fail@plt+0x52ec>
   16c64:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   16c68:	ldr	r9, [fp, #-132]	; 0xffffff7c
   16c6c:	cmp	r3, #0
   16c70:	bne	16cd8 <__assert_fail@plt+0x531c>
   16c74:	ldrb	r3, [r9]
   16c78:	ldr	r1, [pc, #864]	; 16fe0 <__assert_fail@plt+0x5624>
   16c7c:	lsr	r2, r3, #5
   16c80:	and	r3, r3, #31
   16c84:	ldr	r2, [r1, r2, lsl #2]
   16c88:	lsr	r3, r2, r3
   16c8c:	tst	r3, #1
   16c90:	beq	16cc4 <__assert_fail@plt+0x5308>
   16c94:	str	r5, [fp, #-128]	; 0xffffff80
   16c98:	ldrb	r3, [r9]
   16c9c:	strb	r5, [fp, #-124]	; 0xffffff84
   16ca0:	str	r3, [fp, #-120]	; 0xffffff88
   16ca4:	strb	r5, [fp, #-136]	; 0xffffff78
   16ca8:	ldrb	r3, [fp, #-124]	; 0xffffff84
   16cac:	cmp	r3, #0
   16cb0:	beq	16fc0 <__assert_fail@plt+0x5604>
   16cb4:	ldr	r3, [fp, #-120]	; 0xffffff88
   16cb8:	cmp	r3, #0
   16cbc:	bne	16fc0 <__assert_fail@plt+0x5604>
   16cc0:	bl	11980 <abort@plt>
   16cc4:	ldr	r0, [fp, #-220]	; 0xffffff24
   16cc8:	bl	11614 <mbsinit@plt>
   16ccc:	cmp	r0, #0
   16cd0:	beq	16950 <__assert_fail@plt+0x4f94>
   16cd4:	strb	r5, [fp, #-148]	; 0xffffff6c
   16cd8:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   16cdc:	mov	r1, r0
   16ce0:	mov	r0, r9
   16ce4:	bl	1921c <__assert_fail@plt+0x7860>
   16ce8:	ldr	r3, [fp, #-220]	; 0xffffff24
   16cec:	mov	r1, r9
   16cf0:	mov	r2, r0
   16cf4:	add	r0, r7, #28
   16cf8:	bl	1a434 <__assert_fail@plt+0x8a78>
   16cfc:	cmn	r0, #1
   16d00:	str	r0, [fp, #-128]	; 0xffffff80
   16d04:	streq	r5, [fp, #-128]	; 0xffffff80
   16d08:	beq	16d20 <__assert_fail@plt+0x5364>
   16d0c:	cmn	r0, #2
   16d10:	bne	16d2c <__assert_fail@plt+0x5370>
   16d14:	ldr	r0, [fp, #-132]	; 0xffffff7c
   16d18:	bl	117ac <strlen@plt>
   16d1c:	str	r0, [fp, #-128]	; 0xffffff80
   16d20:	mov	r3, #0
   16d24:	strb	r3, [fp, #-124]	; 0xffffff84
   16d28:	b	16ca4 <__assert_fail@plt+0x52e8>
   16d2c:	cmp	r0, #0
   16d30:	bne	16d54 <__assert_fail@plt+0x5398>
   16d34:	ldr	r3, [fp, #-132]	; 0xffffff7c
   16d38:	str	r5, [fp, #-128]	; 0xffffff80
   16d3c:	ldrb	r3, [r3]
   16d40:	cmp	r3, #0
   16d44:	bne	169e4 <__assert_fail@plt+0x5028>
   16d48:	ldr	r3, [fp, #-120]	; 0xffffff88
   16d4c:	cmp	r3, #0
   16d50:	bne	16a04 <__assert_fail@plt+0x5048>
   16d54:	ldr	r0, [fp, #-220]	; 0xffffff24
   16d58:	strb	r5, [fp, #-124]	; 0xffffff84
   16d5c:	bl	11614 <mbsinit@plt>
   16d60:	cmp	r0, #0
   16d64:	movne	r3, #0
   16d68:	strbne	r3, [fp, #-148]	; 0xffffff6c
   16d6c:	b	16ca4 <__assert_fail@plt+0x52e8>
   16d70:	ldrb	r3, [fp, #-136]	; 0xffffff78
   16d74:	cmp	r3, #0
   16d78:	bne	16dc0 <__assert_fail@plt+0x5404>
   16d7c:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   16d80:	ldr	r9, [fp, #-132]	; 0xffffff7c
   16d84:	cmp	r3, #0
   16d88:	bne	16e1c <__assert_fail@plt+0x5460>
   16d8c:	ldrb	r3, [r9]
   16d90:	ldr	r1, [pc, #584]	; 16fe0 <__assert_fail@plt+0x5624>
   16d94:	lsr	r2, r3, #5
   16d98:	and	r3, r3, #31
   16d9c:	ldr	r2, [r1, r2, lsl #2]
   16da0:	lsr	r3, r2, r3
   16da4:	tst	r3, #1
   16da8:	beq	16e08 <__assert_fail@plt+0x544c>
   16dac:	str	r5, [fp, #-128]	; 0xffffff80
   16db0:	ldrb	r3, [r9]
   16db4:	strb	r5, [fp, #-124]	; 0xffffff84
   16db8:	str	r3, [fp, #-120]	; 0xffffff88
   16dbc:	strb	r5, [fp, #-136]	; 0xffffff78
   16dc0:	ldrb	r3, [fp, #-124]	; 0xffffff84
   16dc4:	cmp	r3, #0
   16dc8:	beq	16dd8 <__assert_fail@plt+0x541c>
   16dcc:	ldr	r3, [fp, #-120]	; 0xffffff88
   16dd0:	cmp	r3, #0
   16dd4:	beq	16cc0 <__assert_fail@plt+0x5304>
   16dd8:	ldr	r2, [fp, #-128]	; 0xffffff80
   16ddc:	ldr	r3, [fp, #-132]	; 0xffffff7c
   16de0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16de4:	add	r3, r3, r2
   16de8:	str	r3, [fp, #-132]	; 0xffffff7c
   16dec:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16df0:	mov	r2, #0
   16df4:	add	r3, r3, r1
   16df8:	strb	r2, [fp, #-136]	; 0xffffff78
   16dfc:	str	r3, [fp, #-76]	; 0xffffffb4
   16e00:	strb	r2, [fp, #-80]	; 0xffffffb0
   16e04:	b	16adc <__assert_fail@plt+0x5120>
   16e08:	add	r0, r7, #4
   16e0c:	bl	11614 <mbsinit@plt>
   16e10:	cmp	r0, #0
   16e14:	beq	16950 <__assert_fail@plt+0x4f94>
   16e18:	strb	r5, [fp, #-148]	; 0xffffff6c
   16e1c:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   16e20:	mov	r1, r0
   16e24:	mov	r0, r9
   16e28:	bl	1921c <__assert_fail@plt+0x7860>
   16e2c:	add	r3, r7, #4
   16e30:	mov	r1, r9
   16e34:	mov	r2, r0
   16e38:	add	r0, r7, #28
   16e3c:	bl	1a434 <__assert_fail@plt+0x8a78>
   16e40:	cmn	r0, #1
   16e44:	str	r0, [fp, #-128]	; 0xffffff80
   16e48:	streq	r5, [fp, #-128]	; 0xffffff80
   16e4c:	beq	16e64 <__assert_fail@plt+0x54a8>
   16e50:	cmn	r0, #2
   16e54:	bne	16e70 <__assert_fail@plt+0x54b4>
   16e58:	ldr	r0, [fp, #-132]	; 0xffffff7c
   16e5c:	bl	117ac <strlen@plt>
   16e60:	str	r0, [fp, #-128]	; 0xffffff80
   16e64:	mov	r3, #0
   16e68:	strb	r3, [fp, #-124]	; 0xffffff84
   16e6c:	b	16dbc <__assert_fail@plt+0x5400>
   16e70:	cmp	r0, #0
   16e74:	bne	16e98 <__assert_fail@plt+0x54dc>
   16e78:	ldr	r3, [fp, #-132]	; 0xffffff7c
   16e7c:	str	r5, [fp, #-128]	; 0xffffff80
   16e80:	ldrb	r3, [r3]
   16e84:	cmp	r3, #0
   16e88:	bne	169e4 <__assert_fail@plt+0x5028>
   16e8c:	ldr	r3, [fp, #-120]	; 0xffffff88
   16e90:	cmp	r3, #0
   16e94:	bne	16a04 <__assert_fail@plt+0x5048>
   16e98:	add	r0, r7, #4
   16e9c:	strb	r5, [fp, #-124]	; 0xffffff84
   16ea0:	bl	11614 <mbsinit@plt>
   16ea4:	cmp	r0, #0
   16ea8:	movne	r3, #0
   16eac:	strbne	r3, [fp, #-148]	; 0xffffff6c
   16eb0:	b	16dbc <__assert_fail@plt+0x5400>
   16eb4:	add	r0, r8, #4
   16eb8:	bl	11614 <mbsinit@plt>
   16ebc:	cmp	r0, #0
   16ec0:	beq	16950 <__assert_fail@plt+0x4f94>
   16ec4:	strb	r5, [fp, #-92]	; 0xffffffa4
   16ec8:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   16ecc:	mov	r1, r0
   16ed0:	mov	r0, r9
   16ed4:	bl	1921c <__assert_fail@plt+0x7860>
   16ed8:	add	r3, r8, #4
   16edc:	mov	r1, r9
   16ee0:	mov	r2, r0
   16ee4:	add	r0, r8, #28
   16ee8:	bl	1a434 <__assert_fail@plt+0x8a78>
   16eec:	cmn	r0, #1
   16ef0:	str	r0, [fp, #-72]	; 0xffffffb8
   16ef4:	streq	r5, [fp, #-72]	; 0xffffffb8
   16ef8:	beq	16f10 <__assert_fail@plt+0x5554>
   16efc:	cmn	r0, #2
   16f00:	bne	16f1c <__assert_fail@plt+0x5560>
   16f04:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16f08:	bl	117ac <strlen@plt>
   16f0c:	str	r0, [fp, #-72]	; 0xffffffb8
   16f10:	mov	r3, #0
   16f14:	strb	r3, [fp, #-68]	; 0xffffffbc
   16f18:	b	16b28 <__assert_fail@plt+0x516c>
   16f1c:	cmp	r0, #0
   16f20:	bne	16f44 <__assert_fail@plt+0x5588>
   16f24:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16f28:	str	r5, [fp, #-72]	; 0xffffffb8
   16f2c:	ldrb	r3, [r3]
   16f30:	cmp	r3, #0
   16f34:	bne	169e4 <__assert_fail@plt+0x5028>
   16f38:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16f3c:	cmp	r3, #0
   16f40:	bne	16a04 <__assert_fail@plt+0x5048>
   16f44:	add	r0, r8, #4
   16f48:	strb	r5, [fp, #-68]	; 0xffffffbc
   16f4c:	bl	11614 <mbsinit@plt>
   16f50:	cmp	r0, #0
   16f54:	movne	r3, #0
   16f58:	strbne	r3, [fp, #-92]	; 0xffffffa4
   16f5c:	b	16b28 <__assert_fail@plt+0x516c>
   16f60:	ldr	r8, [fp, #-188]	; 0xffffff44
   16f64:	add	r3, r7, #32
   16f68:	cmp	r8, r3
   16f6c:	strne	r8, [r5, #-16]
   16f70:	bne	16f88 <__assert_fail@plt+0x55cc>
   16f74:	ldr	r2, [fp, #-184]	; 0xffffff48
   16f78:	mov	r1, r8
   16f7c:	mov	r0, r5
   16f80:	bl	115e4 <memcpy@plt>
   16f84:	str	r5, [r5, #-16]
   16f88:	ldrb	r2, [fp, #-216]	; 0xffffff28
   16f8c:	ldr	r3, [fp, #-184]	; 0xffffff48
   16f90:	add	r5, r5, #40	; 0x28
   16f94:	strb	r2, [r5, #-48]	; 0xffffffd0
   16f98:	ldr	r2, [fp, #-216]	; 0xffffff28
   16f9c:	str	r3, [r5, #-52]	; 0xffffffcc
   16fa0:	cmp	r2, #0
   16fa4:	add	r8, r8, r3
   16fa8:	ldrne	r2, [fp, #-176]	; 0xffffff50
   16fac:	mov	r3, #0
   16fb0:	strne	r2, [r5, #-44]	; 0xffffffd4
   16fb4:	str	r8, [fp, #-188]	; 0xffffff44
   16fb8:	strb	r3, [fp, #-192]	; 0xffffff40
   16fbc:	b	168b0 <__assert_fail@plt+0x4ef4>
   16fc0:	ldr	r3, [fp, #-132]	; 0xffffff7c
   16fc4:	ldr	r2, [fp, #-128]	; 0xffffff80
   16fc8:	sub	sl, sl, #1
   16fcc:	add	r3, r3, r2
   16fd0:	str	r3, [fp, #-132]	; 0xffffff7c
   16fd4:	mov	r3, #0
   16fd8:	strb	r3, [fp, #-136]	; 0xffffff78
   16fdc:	b	16c50 <__assert_fail@plt+0x5294>
   16fe0:	strdeq	r9, [r2], -r8
   16fe4:			; <UNDEFINED> instruction: 0x000289b5
   16fe8:	andeq	r8, r2, r8, asr r9
   16fec:	andeq	r8, r2, r2, ror #18
   16ff0:	andeq	r8, r2, r9, ror r9
   16ff4:	muleq	r2, r0, r9
   16ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ffc:	sub	sp, sp, #308	; 0x134
   17000:	mov	r6, r1
   17004:	mov	r4, r0
   17008:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   1700c:	ldrb	r7, [r6]
   17010:	cmp	r0, #1
   17014:	bls	178e4 <__assert_fail@plt+0x5f28>
   17018:	add	r8, sp, #304	; 0x130
   1701c:	mov	r3, #0
   17020:	ldr	r2, [pc, #2976]	; 17bc8 <__assert_fail@plt+0x620c>
   17024:	strb	r3, [r8, #-280]!	; 0xfffffee8
   17028:	str	r3, [sp, #28]
   1702c:	str	r3, [sp, #32]
   17030:	strb	r3, [sp, #36]	; 0x24
   17034:	lsr	r3, r7, #5
   17038:	and	r5, r7, #31
   1703c:	ldr	r3, [r2, r3, lsl #2]
   17040:	str	r6, [sp, #40]	; 0x28
   17044:	str	r2, [sp]
   17048:	lsr	r5, r3, r5
   1704c:	ands	r5, r5, #1
   17050:	beq	1708c <__assert_fail@plt+0x56d0>
   17054:	mov	r3, #1
   17058:	str	r3, [sp, #44]	; 0x2c
   1705c:	str	r7, [sp, #52]	; 0x34
   17060:	strb	r3, [sp, #48]	; 0x30
   17064:	mov	r3, #1
   17068:	strb	r3, [sp, #36]	; 0x24
   1706c:	ldrb	r3, [sp, #48]	; 0x30
   17070:	cmp	r3, #0
   17074:	beq	179c0 <__assert_fail@plt+0x6004>
   17078:	ldr	r3, [sp, #52]	; 0x34
   1707c:	cmp	r3, #0
   17080:	bne	179c0 <__assert_fail@plt+0x6004>
   17084:	mov	r0, r4
   17088:	b	178dc <__assert_fail@plt+0x5f20>
   1708c:	add	r0, sp, #28
   17090:	bl	11614 <mbsinit@plt>
   17094:	cmp	r0, #0
   17098:	bne	170b0 <__assert_fail@plt+0x56f4>
   1709c:	ldr	r3, [pc, #2856]	; 17bcc <__assert_fail@plt+0x6210>
   170a0:	ldr	r1, [pc, #2856]	; 17bd0 <__assert_fail@plt+0x6214>
   170a4:	ldr	r0, [pc, #2856]	; 17bd4 <__assert_fail@plt+0x6218>
   170a8:	mov	r2, #143	; 0x8f
   170ac:	bl	119bc <__assert_fail@plt>
   170b0:	mov	r7, #1
   170b4:	strb	r7, [sp, #24]
   170b8:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   170bc:	mov	r1, r0
   170c0:	mov	r0, r6
   170c4:	bl	1921c <__assert_fail@plt+0x7860>
   170c8:	add	r3, sp, #28
   170cc:	mov	r1, r6
   170d0:	mov	r2, r0
   170d4:	add	r0, r8, #28
   170d8:	bl	1a434 <__assert_fail@plt+0x8a78>
   170dc:	cmn	r0, #1
   170e0:	str	r0, [sp, #44]	; 0x2c
   170e4:	streq	r7, [sp, #44]	; 0x2c
   170e8:	beq	17100 <__assert_fail@plt+0x5744>
   170ec:	cmn	r0, #2
   170f0:	bne	17108 <__assert_fail@plt+0x574c>
   170f4:	ldr	r0, [sp, #40]	; 0x28
   170f8:	bl	117ac <strlen@plt>
   170fc:	str	r0, [sp, #44]	; 0x2c
   17100:	strb	r5, [sp, #48]	; 0x30
   17104:	b	17064 <__assert_fail@plt+0x56a8>
   17108:	cmp	r0, #0
   1710c:	bne	17158 <__assert_fail@plt+0x579c>
   17110:	ldr	r3, [sp, #40]	; 0x28
   17114:	str	r7, [sp, #44]	; 0x2c
   17118:	ldrb	r3, [r3]
   1711c:	cmp	r3, #0
   17120:	beq	17138 <__assert_fail@plt+0x577c>
   17124:	ldr	r3, [pc, #2720]	; 17bcc <__assert_fail@plt+0x6210>
   17128:	mov	r2, #171	; 0xab
   1712c:	ldr	r1, [pc, #2716]	; 17bd0 <__assert_fail@plt+0x6214>
   17130:	ldr	r0, [pc, #2720]	; 17bd8 <__assert_fail@plt+0x621c>
   17134:	b	170ac <__assert_fail@plt+0x56f0>
   17138:	ldr	r3, [sp, #52]	; 0x34
   1713c:	cmp	r3, #0
   17140:	beq	17158 <__assert_fail@plt+0x579c>
   17144:	ldr	r3, [pc, #2688]	; 17bcc <__assert_fail@plt+0x6210>
   17148:	mov	r2, #172	; 0xac
   1714c:	ldr	r1, [pc, #2684]	; 17bd0 <__assert_fail@plt+0x6214>
   17150:	ldr	r0, [pc, #2692]	; 17bdc <__assert_fail@plt+0x6220>
   17154:	b	170ac <__assert_fail@plt+0x56f0>
   17158:	mov	r3, #1
   1715c:	add	r0, sp, #28
   17160:	strb	r3, [sp, #48]	; 0x30
   17164:	bl	11614 <mbsinit@plt>
   17168:	cmp	r0, #0
   1716c:	movne	r3, #0
   17170:	strbne	r3, [sp, #24]
   17174:	b	17064 <__assert_fail@plt+0x56a8>
   17178:	add	r0, r9, #4
   1717c:	bl	11614 <mbsinit@plt>
   17180:	cmp	r0, #0
   17184:	beq	1709c <__assert_fail@plt+0x56e0>
   17188:	mov	r3, #1
   1718c:	strb	r3, [sp, #136]	; 0x88
   17190:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   17194:	mov	r1, r0
   17198:	mov	r0, sl
   1719c:	bl	1921c <__assert_fail@plt+0x7860>
   171a0:	add	r3, r9, #4
   171a4:	mov	r1, sl
   171a8:	mov	r2, r0
   171ac:	add	r0, r9, #28
   171b0:	bl	1a434 <__assert_fail@plt+0x8a78>
   171b4:	cmn	r0, #1
   171b8:	str	r0, [sp, #156]	; 0x9c
   171bc:	bne	171d0 <__assert_fail@plt+0x5814>
   171c0:	mov	r3, #1
   171c4:	str	r3, [sp, #156]	; 0x9c
   171c8:	mov	r3, #0
   171cc:	b	178b8 <__assert_fail@plt+0x5efc>
   171d0:	cmn	r0, #2
   171d4:	bne	171e8 <__assert_fail@plt+0x582c>
   171d8:	ldr	r0, [sp, #152]	; 0x98
   171dc:	bl	117ac <strlen@plt>
   171e0:	str	r0, [sp, #156]	; 0x9c
   171e4:	b	171c8 <__assert_fail@plt+0x580c>
   171e8:	cmp	r0, #0
   171ec:	bne	17214 <__assert_fail@plt+0x5858>
   171f0:	mov	r3, #1
   171f4:	str	r3, [sp, #156]	; 0x9c
   171f8:	ldr	r3, [sp, #152]	; 0x98
   171fc:	ldrb	r3, [r3]
   17200:	cmp	r3, #0
   17204:	bne	17124 <__assert_fail@plt+0x5768>
   17208:	ldr	r3, [sp, #164]	; 0xa4
   1720c:	cmp	r3, #0
   17210:	bne	17144 <__assert_fail@plt+0x5788>
   17214:	mov	r3, #1
   17218:	add	r0, r9, #4
   1721c:	strb	r3, [sp, #160]	; 0xa0
   17220:	bl	11614 <mbsinit@plt>
   17224:	cmp	r0, #0
   17228:	movne	r3, #0
   1722c:	strbne	r3, [sp, #136]	; 0x88
   17230:	b	178bc <__assert_fail@plt+0x5f00>
   17234:	ldrb	r3, [sp, #92]	; 0x5c
   17238:	cmp	r3, #0
   1723c:	bne	1728c <__assert_fail@plt+0x58d0>
   17240:	ldrb	r3, [sp, #80]	; 0x50
   17244:	ldr	sl, [sp, #96]	; 0x60
   17248:	cmp	r3, #0
   1724c:	bne	172dc <__assert_fail@plt+0x5920>
   17250:	ldrb	r3, [sl]
   17254:	ldr	r1, [sp]
   17258:	lsr	r2, r3, #5
   1725c:	and	r3, r3, #31
   17260:	ldr	r2, [r1, r2, lsl #2]
   17264:	lsr	r3, r2, r3
   17268:	tst	r3, #1
   1726c:	beq	172c4 <__assert_fail@plt+0x5908>
   17270:	mov	r3, #1
   17274:	str	r3, [sp, #100]	; 0x64
   17278:	ldrb	r2, [sl]
   1727c:	str	r2, [sp, #108]	; 0x6c
   17280:	strb	r3, [sp, #104]	; 0x68
   17284:	mov	r3, #1
   17288:	strb	r3, [sp, #92]	; 0x5c
   1728c:	ldrb	r3, [sp, #104]	; 0x68
   17290:	cmp	r3, #0
   17294:	beq	172a4 <__assert_fail@plt+0x58e8>
   17298:	ldr	r3, [sp, #108]	; 0x6c
   1729c:	cmp	r3, #0
   172a0:	beq	17a48 <__assert_fail@plt+0x608c>
   172a4:	ldr	r3, [sp, #96]	; 0x60
   172a8:	ldr	r2, [sp, #100]	; 0x64
   172ac:	sub	r5, r5, #1
   172b0:	add	r3, r3, r2
   172b4:	str	r3, [sp, #96]	; 0x60
   172b8:	mov	r3, #0
   172bc:	strb	r3, [sp, #92]	; 0x5c
   172c0:	b	17a40 <__assert_fail@plt+0x6084>
   172c4:	add	r0, r7, #4
   172c8:	bl	11614 <mbsinit@plt>
   172cc:	cmp	r0, #0
   172d0:	beq	1709c <__assert_fail@plt+0x56e0>
   172d4:	mov	r3, #1
   172d8:	strb	r3, [sp, #80]	; 0x50
   172dc:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   172e0:	mov	r1, r0
   172e4:	mov	r0, sl
   172e8:	bl	1921c <__assert_fail@plt+0x7860>
   172ec:	add	r3, r7, #4
   172f0:	mov	r1, sl
   172f4:	mov	r2, r0
   172f8:	add	r0, r7, #28
   172fc:	bl	1a434 <__assert_fail@plt+0x8a78>
   17300:	cmn	r0, #1
   17304:	str	r0, [sp, #100]	; 0x64
   17308:	bne	1731c <__assert_fail@plt+0x5960>
   1730c:	mov	r3, #1
   17310:	str	r3, [sp, #100]	; 0x64
   17314:	mov	r3, #0
   17318:	b	17280 <__assert_fail@plt+0x58c4>
   1731c:	cmn	r0, #2
   17320:	bne	17334 <__assert_fail@plt+0x5978>
   17324:	ldr	r0, [sp, #96]	; 0x60
   17328:	bl	117ac <strlen@plt>
   1732c:	str	r0, [sp, #100]	; 0x64
   17330:	b	17314 <__assert_fail@plt+0x5958>
   17334:	cmp	r0, #0
   17338:	bne	17360 <__assert_fail@plt+0x59a4>
   1733c:	mov	r3, #1
   17340:	str	r3, [sp, #100]	; 0x64
   17344:	ldr	r3, [sp, #96]	; 0x60
   17348:	ldrb	r3, [r3]
   1734c:	cmp	r3, #0
   17350:	bne	17124 <__assert_fail@plt+0x5768>
   17354:	ldr	r3, [sp, #108]	; 0x6c
   17358:	cmp	r3, #0
   1735c:	bne	17144 <__assert_fail@plt+0x5788>
   17360:	mov	r3, #1
   17364:	ldr	r0, [sp, #16]
   17368:	strb	r3, [sp, #104]	; 0x68
   1736c:	bl	11614 <mbsinit@plt>
   17370:	cmp	r0, #0
   17374:	movne	r3, #0
   17378:	strbne	r3, [sp, #80]	; 0x50
   1737c:	b	17284 <__assert_fail@plt+0x58c8>
   17380:	add	r0, r7, #4
   17384:	bl	11614 <mbsinit@plt>
   17388:	cmp	r0, #0
   1738c:	beq	1709c <__assert_fail@plt+0x56e0>
   17390:	mov	r3, #1
   17394:	strb	r3, [sp, #80]	; 0x50
   17398:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   1739c:	mov	r1, r0
   173a0:	mov	r0, r5
   173a4:	bl	1921c <__assert_fail@plt+0x7860>
   173a8:	add	r3, r7, #4
   173ac:	mov	r1, r5
   173b0:	mov	r2, r0
   173b4:	add	r0, r7, #28
   173b8:	bl	1a434 <__assert_fail@plt+0x8a78>
   173bc:	cmn	r0, #1
   173c0:	str	r0, [sp, #100]	; 0x64
   173c4:	bne	173d8 <__assert_fail@plt+0x5a1c>
   173c8:	mov	r3, #1
   173cc:	str	r3, [sp, #100]	; 0x64
   173d0:	mov	r3, #0
   173d4:	b	17a94 <__assert_fail@plt+0x60d8>
   173d8:	cmn	r0, #2
   173dc:	bne	173f0 <__assert_fail@plt+0x5a34>
   173e0:	ldr	r0, [sp, #96]	; 0x60
   173e4:	bl	117ac <strlen@plt>
   173e8:	str	r0, [sp, #100]	; 0x64
   173ec:	b	173d0 <__assert_fail@plt+0x5a14>
   173f0:	cmp	r0, #0
   173f4:	bne	1741c <__assert_fail@plt+0x5a60>
   173f8:	mov	r3, #1
   173fc:	str	r3, [sp, #100]	; 0x64
   17400:	ldr	r3, [sp, #96]	; 0x60
   17404:	ldrb	r3, [r3]
   17408:	cmp	r3, #0
   1740c:	bne	17124 <__assert_fail@plt+0x5768>
   17410:	ldr	r3, [sp, #108]	; 0x6c
   17414:	cmp	r3, #0
   17418:	bne	17144 <__assert_fail@plt+0x5788>
   1741c:	mov	r3, #1
   17420:	ldr	r0, [sp, #16]
   17424:	strb	r3, [sp, #104]	; 0x68
   17428:	bl	11614 <mbsinit@plt>
   1742c:	cmp	r0, #0
   17430:	movne	r3, #0
   17434:	strbne	r3, [sp, #80]	; 0x50
   17438:	b	17a98 <__assert_fail@plt+0x60dc>
   1743c:	mov	r5, r8
   17440:	ldr	r3, [sp, #8]
   17444:	add	r8, r8, #1
   17448:	add	r3, r3, #1
   1744c:	str	r3, [sp, #8]
   17450:	ldrb	r3, [sp, #160]	; 0xa0
   17454:	cmp	r3, #0
   17458:	beq	17598 <__assert_fail@plt+0x5bdc>
   1745c:	ldrb	r3, [sp, #48]	; 0x30
   17460:	cmp	r3, #0
   17464:	beq	17598 <__assert_fail@plt+0x5bdc>
   17468:	ldr	r3, [sp, #52]	; 0x34
   1746c:	ldr	r0, [sp, #164]	; 0xa4
   17470:	sub	r0, r0, r3
   17474:	clz	r0, r0
   17478:	lsr	r0, r0, #5
   1747c:	cmp	r0, #0
   17480:	beq	1785c <__assert_fail@plt+0x5ea0>
   17484:	mov	lr, r9
   17488:	add	ip, sp, #192	; 0xc0
   1748c:	ldm	lr!, {r0, r1, r2, r3}
   17490:	add	sl, sp, #304	; 0x130
   17494:	stmia	ip!, {r0, r1, r2, r3}
   17498:	ldm	lr!, {r0, r1, r2, r3}
   1749c:	stmia	ip!, {r0, r1, r2, r3}
   174a0:	ldm	lr!, {r0, r1, r2, r3}
   174a4:	stmia	ip!, {r0, r1, r2, r3}
   174a8:	ldm	lr, {r0, r1}
   174ac:	ldr	r2, [sp, #212]	; 0xd4
   174b0:	ldr	r3, [sp, #208]	; 0xd0
   174b4:	stm	ip, {r0, r1}
   174b8:	add	r3, r3, r2
   174bc:	mov	r2, #0
   174c0:	str	r3, [sp, #208]	; 0xd0
   174c4:	strb	r2, [sp, #204]	; 0xcc
   174c8:	str	r6, [sp, #264]	; 0x108
   174cc:	ldrb	r1, [r6]
   174d0:	strb	r2, [sl, #-56]!	; 0xffffffc8
   174d4:	add	r3, sl, #4
   174d8:	ldr	ip, [sp]
   174dc:	str	r2, [sp, #252]	; 0xfc
   174e0:	str	r2, [r3, #4]
   174e4:	strb	r2, [sp, #260]	; 0x104
   174e8:	lsr	r2, r1, #5
   174ec:	and	r0, r1, #31
   174f0:	ldr	r2, [ip, r2, lsl #2]
   174f4:	lsr	r2, r2, r0
   174f8:	ands	r2, r2, #1
   174fc:	movne	r3, #1
   17500:	str	r2, [sp, #12]
   17504:	strne	r3, [sp, #268]	; 0x10c
   17508:	strne	r1, [sp, #276]	; 0x114
   1750c:	bne	17564 <__assert_fail@plt+0x5ba8>
   17510:	mov	r0, r3
   17514:	str	r3, [sp, #20]
   17518:	bl	11614 <mbsinit@plt>
   1751c:	cmp	r0, #0
   17520:	beq	1709c <__assert_fail@plt+0x56e0>
   17524:	mov	fp, #1
   17528:	strb	fp, [sp, #248]	; 0xf8
   1752c:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   17530:	mov	r1, r0
   17534:	mov	r0, r6
   17538:	bl	1921c <__assert_fail@plt+0x7860>
   1753c:	ldr	r3, [sp, #20]
   17540:	mov	r1, r6
   17544:	mov	r2, r0
   17548:	add	r0, sl, #28
   1754c:	bl	1a434 <__assert_fail@plt+0x8a78>
   17550:	cmn	r0, #1
   17554:	str	r0, [sp, #268]	; 0x10c
   17558:	bne	175c4 <__assert_fail@plt+0x5c08>
   1755c:	str	fp, [sp, #268]	; 0x10c
   17560:	ldrb	r3, [sp, #12]
   17564:	strb	r3, [sp, #272]	; 0x110
   17568:	mov	r3, #1
   1756c:	strb	r3, [sp, #260]	; 0x104
   17570:	ldrb	r3, [sp, #272]	; 0x110
   17574:	cmp	r3, #0
   17578:	beq	17adc <__assert_fail@plt+0x6120>
   1757c:	ldr	r3, [sp, #276]	; 0x114
   17580:	cmp	r3, #0
   17584:	bne	17adc <__assert_fail@plt+0x6120>
   17588:	bl	11980 <abort@plt>
   1758c:	mov	r5, r8
   17590:	str	r3, [sp, #4]
   17594:	b	17440 <__assert_fail@plt+0x5a84>
   17598:	ldr	r2, [sp, #156]	; 0x9c
   1759c:	ldr	r3, [sp, #44]	; 0x2c
   175a0:	cmp	r2, r3
   175a4:	movne	r0, #0
   175a8:	bne	1747c <__assert_fail@plt+0x5ac0>
   175ac:	ldr	r1, [sp, #40]	; 0x28
   175b0:	ldr	r0, [sp, #152]	; 0x98
   175b4:	bl	1162c <memcmp@plt>
   175b8:	clz	r0, r0
   175bc:	lsr	r0, r0, #5
   175c0:	b	1747c <__assert_fail@plt+0x5ac0>
   175c4:	cmn	r0, #2
   175c8:	bne	175dc <__assert_fail@plt+0x5c20>
   175cc:	ldr	r0, [sp, #264]	; 0x108
   175d0:	bl	117ac <strlen@plt>
   175d4:	str	r0, [sp, #268]	; 0x10c
   175d8:	b	17560 <__assert_fail@plt+0x5ba4>
   175dc:	cmp	r0, #0
   175e0:	bne	17604 <__assert_fail@plt+0x5c48>
   175e4:	ldr	r3, [sp, #264]	; 0x108
   175e8:	str	fp, [sp, #268]	; 0x10c
   175ec:	ldrb	r3, [r3]
   175f0:	cmp	r3, #0
   175f4:	bne	17124 <__assert_fail@plt+0x5768>
   175f8:	ldr	r3, [sp, #276]	; 0x114
   175fc:	cmp	r3, #0
   17600:	bne	17144 <__assert_fail@plt+0x5788>
   17604:	mov	r3, #1
   17608:	add	r0, sp, #252	; 0xfc
   1760c:	strb	r3, [sp, #272]	; 0x110
   17610:	bl	11614 <mbsinit@plt>
   17614:	cmp	r0, #0
   17618:	movne	r3, #0
   1761c:	strbne	r3, [sp, #248]	; 0xf8
   17620:	b	17568 <__assert_fail@plt+0x5bac>
   17624:	add	r0, sp, #252	; 0xfc
   17628:	bl	11614 <mbsinit@plt>
   1762c:	cmp	r0, #0
   17630:	beq	1709c <__assert_fail@plt+0x56e0>
   17634:	mov	r3, #1
   17638:	strb	r3, [sp, #248]	; 0xf8
   1763c:	ldr	fp, [sp, #264]	; 0x108
   17640:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   17644:	mov	r1, r0
   17648:	mov	r0, fp
   1764c:	bl	1921c <__assert_fail@plt+0x7860>
   17650:	add	r3, sl, #4
   17654:	mov	r1, fp
   17658:	mov	r2, r0
   1765c:	add	r0, sl, #28
   17660:	bl	1a434 <__assert_fail@plt+0x8a78>
   17664:	cmn	r0, #1
   17668:	str	r0, [sp, #268]	; 0x10c
   1766c:	bne	17680 <__assert_fail@plt+0x5cc4>
   17670:	mov	r3, #1
   17674:	str	r3, [sp, #268]	; 0x10c
   17678:	mov	r3, #0
   1767c:	b	17830 <__assert_fail@plt+0x5e74>
   17680:	cmn	r0, #2
   17684:	bne	17698 <__assert_fail@plt+0x5cdc>
   17688:	ldr	r0, [sp, #264]	; 0x108
   1768c:	bl	117ac <strlen@plt>
   17690:	str	r0, [sp, #268]	; 0x10c
   17694:	b	17678 <__assert_fail@plt+0x5cbc>
   17698:	cmp	r0, #0
   1769c:	bne	176c4 <__assert_fail@plt+0x5d08>
   176a0:	mov	r3, #1
   176a4:	str	r3, [sp, #268]	; 0x10c
   176a8:	ldr	r3, [sp, #264]	; 0x108
   176ac:	ldrb	r3, [r3]
   176b0:	cmp	r3, #0
   176b4:	bne	17124 <__assert_fail@plt+0x5768>
   176b8:	ldr	r3, [sp, #276]	; 0x114
   176bc:	cmp	r3, #0
   176c0:	bne	17144 <__assert_fail@plt+0x5788>
   176c4:	mov	r3, #1
   176c8:	add	r0, sp, #252	; 0xfc
   176cc:	strb	r3, [sp, #272]	; 0x110
   176d0:	bl	11614 <mbsinit@plt>
   176d4:	cmp	r0, #0
   176d8:	movne	r3, #0
   176dc:	strbne	r3, [sp, #248]	; 0xf8
   176e0:	b	17834 <__assert_fail@plt+0x5e78>
   176e4:	add	r0, sp, #196	; 0xc4
   176e8:	bl	11614 <mbsinit@plt>
   176ec:	cmp	r0, #0
   176f0:	beq	1709c <__assert_fail@plt+0x56e0>
   176f4:	mov	r3, #1
   176f8:	strb	r3, [sp, #192]	; 0xc0
   176fc:	ldr	fp, [sp, #208]	; 0xd0
   17700:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   17704:	mov	r1, r0
   17708:	mov	r0, fp
   1770c:	bl	1921c <__assert_fail@plt+0x7860>
   17710:	add	r3, sp, #196	; 0xc4
   17714:	mov	r1, fp
   17718:	mov	r2, r0
   1771c:	add	r0, sp, #220	; 0xdc
   17720:	bl	1a434 <__assert_fail@plt+0x8a78>
   17724:	cmn	r0, #1
   17728:	str	r0, [sp, #212]	; 0xd4
   1772c:	bne	17740 <__assert_fail@plt+0x5d84>
   17730:	mov	r3, #1
   17734:	str	r3, [sp, #212]	; 0xd4
   17738:	mov	r3, #0
   1773c:	b	17b44 <__assert_fail@plt+0x6188>
   17740:	cmn	r0, #2
   17744:	bne	17758 <__assert_fail@plt+0x5d9c>
   17748:	ldr	r0, [sp, #208]	; 0xd0
   1774c:	bl	117ac <strlen@plt>
   17750:	str	r0, [sp, #212]	; 0xd4
   17754:	b	17738 <__assert_fail@plt+0x5d7c>
   17758:	cmp	r0, #0
   1775c:	bne	17784 <__assert_fail@plt+0x5dc8>
   17760:	mov	r3, #1
   17764:	str	r3, [sp, #212]	; 0xd4
   17768:	ldr	r3, [sp, #208]	; 0xd0
   1776c:	ldrb	r3, [r3]
   17770:	cmp	r3, #0
   17774:	bne	17124 <__assert_fail@plt+0x5768>
   17778:	ldr	r3, [sp, #220]	; 0xdc
   1777c:	cmp	r3, #0
   17780:	bne	17144 <__assert_fail@plt+0x5788>
   17784:	mov	r3, #1
   17788:	add	r0, sp, #196	; 0xc4
   1778c:	strb	r3, [sp, #216]	; 0xd8
   17790:	bl	11614 <mbsinit@plt>
   17794:	cmp	r0, #0
   17798:	movne	r3, #0
   1779c:	strbne	r3, [sp, #192]	; 0xc0
   177a0:	b	17b48 <__assert_fail@plt+0x618c>
   177a4:	ldrb	r3, [sp, #272]	; 0x110
   177a8:	cmp	r3, #0
   177ac:	beq	17b74 <__assert_fail@plt+0x61b8>
   177b0:	ldr	r0, [sp, #276]	; 0x114
   177b4:	ldr	r3, [sp, #220]	; 0xdc
   177b8:	subs	r0, r3, r0
   177bc:	movne	r0, #1
   177c0:	cmp	r0, #0
   177c4:	bne	1785c <__assert_fail@plt+0x5ea0>
   177c8:	ldr	r2, [sp, #212]	; 0xd4
   177cc:	ldr	r3, [sp, #208]	; 0xd0
   177d0:	strb	r0, [sp, #204]	; 0xcc
   177d4:	add	r3, r3, r2
   177d8:	str	r3, [sp, #208]	; 0xd0
   177dc:	ldr	r2, [sp, #268]	; 0x10c
   177e0:	ldr	r3, [sp, #264]	; 0x108
   177e4:	strb	r0, [sp, #260]	; 0x104
   177e8:	add	r3, r3, r2
   177ec:	str	r3, [sp, #264]	; 0x108
   177f0:	ldrb	r3, [sp, #248]	; 0xf8
   177f4:	cmp	r3, #0
   177f8:	bne	1763c <__assert_fail@plt+0x5c80>
   177fc:	ldr	r1, [sp, #264]	; 0x108
   17800:	ldr	r0, [sp]
   17804:	ldrb	r3, [r1]
   17808:	lsr	r2, r3, #5
   1780c:	and	r3, r3, #31
   17810:	ldr	r2, [r0, r2, lsl #2]
   17814:	lsr	r3, r2, r3
   17818:	tst	r3, #1
   1781c:	beq	17624 <__assert_fail@plt+0x5c68>
   17820:	mov	r3, #1
   17824:	str	r3, [sp, #268]	; 0x10c
   17828:	ldrb	r2, [r1]
   1782c:	str	r2, [sp, #276]	; 0x114
   17830:	strb	r3, [sp, #272]	; 0x110
   17834:	mov	r3, #1
   17838:	strb	r3, [sp, #260]	; 0x104
   1783c:	ldrb	r3, [sp, #272]	; 0x110
   17840:	cmp	r3, #0
   17844:	beq	17af8 <__assert_fail@plt+0x613c>
   17848:	ldr	r3, [sp, #276]	; 0x114
   1784c:	cmp	r3, #0
   17850:	bne	17af8 <__assert_fail@plt+0x613c>
   17854:	ldr	r0, [sp, #152]	; 0x98
   17858:	b	178dc <__assert_fail@plt+0x5f20>
   1785c:	ldr	r3, [sp, #152]	; 0x98
   17860:	ldr	r2, [sp, #156]	; 0x9c
   17864:	ldr	fp, [sp, #4]
   17868:	add	r3, r3, r2
   1786c:	str	r3, [sp, #152]	; 0x98
   17870:	mov	r3, #0
   17874:	strb	r3, [sp, #148]	; 0x94
   17878:	ldrb	r3, [sp, #136]	; 0x88
   1787c:	ldr	sl, [sp, #152]	; 0x98
   17880:	cmp	r3, #0
   17884:	bne	17190 <__assert_fail@plt+0x57d4>
   17888:	ldrb	r3, [sl]
   1788c:	ldr	r1, [sp]
   17890:	lsr	r2, r3, #5
   17894:	and	r3, r3, #31
   17898:	ldr	r2, [r1, r2, lsl #2]
   1789c:	lsr	r3, r2, r3
   178a0:	tst	r3, #1
   178a4:	beq	17178 <__assert_fail@plt+0x57bc>
   178a8:	mov	r3, #1
   178ac:	str	r3, [sp, #156]	; 0x9c
   178b0:	ldrb	r2, [sl]
   178b4:	str	r2, [sp, #164]	; 0xa4
   178b8:	strb	r3, [sp, #160]	; 0xa0
   178bc:	mov	r3, #1
   178c0:	strb	r3, [sp, #148]	; 0x94
   178c4:	ldrb	r3, [sp, #160]	; 0xa0
   178c8:	cmp	r3, #0
   178cc:	beq	17a0c <__assert_fail@plt+0x6050>
   178d0:	ldr	r0, [sp, #164]	; 0xa4
   178d4:	cmp	r0, #0
   178d8:	bne	17a0c <__assert_fail@plt+0x6050>
   178dc:	add	sp, sp, #308	; 0x134
   178e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178e4:	cmp	r7, #0
   178e8:	beq	17084 <__assert_fail@plt+0x56c8>
   178ec:	mov	sl, #0
   178f0:	add	fp, r6, #1
   178f4:	mov	r3, r6
   178f8:	mov	r5, sl
   178fc:	mov	r9, sl
   17900:	mov	r2, #1
   17904:	ldrb	r1, [r4]
   17908:	cmp	r1, #0
   1790c:	bne	17918 <__assert_fail@plt+0x5f5c>
   17910:	mov	r0, #0
   17914:	b	178dc <__assert_fail@plt+0x5f20>
   17918:	cmp	r9, #9
   1791c:	movls	r8, #0
   17920:	andhi	r8, r2, #1
   17924:	cmp	r8, #0
   17928:	beq	179b8 <__assert_fail@plt+0x5ffc>
   1792c:	add	r2, r9, r9, lsl #2
   17930:	cmp	r5, r2
   17934:	bcc	17964 <__assert_fail@plt+0x5fa8>
   17938:	cmp	r3, #0
   1793c:	beq	17b9c <__assert_fail@plt+0x61e0>
   17940:	sub	r1, r5, sl
   17944:	mov	r0, r3
   17948:	str	r3, [sp]
   1794c:	bl	11884 <strnlen@plt>
   17950:	ldr	r3, [sp]
   17954:	mov	sl, r5
   17958:	ldrb	r2, [r3, r0]!
   1795c:	cmp	r2, #0
   17960:	beq	17b9c <__assert_fail@plt+0x61e0>
   17964:	ldrb	r2, [r4]
   17968:	add	r9, r9, #1
   1796c:	add	r1, r5, #1
   17970:	cmp	r2, r7
   17974:	bne	179a8 <__assert_fail@plt+0x5fec>
   17978:	mov	r2, fp
   1797c:	mov	lr, r4
   17980:	sub	r5, r5, r6
   17984:	ldrb	ip, [r2], #1
   17988:	cmp	ip, #0
   1798c:	beq	17084 <__assert_fail@plt+0x56c8>
   17990:	ldrb	r0, [lr, #1]!
   17994:	cmp	r0, #0
   17998:	beq	17910 <__assert_fail@plt+0x5f54>
   1799c:	cmp	ip, r0
   179a0:	add	r1, r5, r2
   179a4:	beq	17984 <__assert_fail@plt+0x5fc8>
   179a8:	add	r4, r4, #1
   179ac:	mov	r5, r1
   179b0:	mov	r2, r8
   179b4:	b	17904 <__assert_fail@plt+0x5f48>
   179b8:	mov	r8, r2
   179bc:	b	17964 <__assert_fail@plt+0x5fa8>
   179c0:	add	r7, sp, #304	; 0x130
   179c4:	mov	r5, #0
   179c8:	add	r9, sp, #304	; 0x130
   179cc:	strb	r5, [r7, #-224]!	; 0xffffff20
   179d0:	add	r3, r7, #4
   179d4:	str	r5, [sp, #84]	; 0x54
   179d8:	strb	r5, [r9, #-168]!	; 0xffffff58
   179dc:	str	r5, [r7, #8]
   179e0:	str	r5, [sp, #140]	; 0x8c
   179e4:	str	r6, [sp, #96]	; 0x60
   179e8:	str	r5, [r9, #8]
   179ec:	strb	r5, [sp, #92]	; 0x5c
   179f0:	str	r4, [sp, #152]	; 0x98
   179f4:	strb	r5, [sp, #148]	; 0x94
   179f8:	mov	r8, r5
   179fc:	str	r5, [sp, #8]
   17a00:	mov	fp, #1
   17a04:	str	r3, [sp, #16]
   17a08:	b	17878 <__assert_fail@plt+0x5ebc>
   17a0c:	ldr	r3, [sp, #8]
   17a10:	cmp	r3, #9
   17a14:	movls	r3, #0
   17a18:	andhi	r3, fp, #1
   17a1c:	cmp	r3, #0
   17a20:	str	r3, [sp, #4]
   17a24:	streq	fp, [sp, #4]
   17a28:	beq	17440 <__assert_fail@plt+0x5a84>
   17a2c:	ldr	r3, [sp, #8]
   17a30:	add	r3, r3, r3, lsl #2
   17a34:	cmp	r8, r3
   17a38:	bcc	17440 <__assert_fail@plt+0x5a84>
   17a3c:	sub	r5, r8, r5
   17a40:	cmp	r5, #0
   17a44:	bne	17234 <__assert_fail@plt+0x5878>
   17a48:	ldrb	r3, [sp, #92]	; 0x5c
   17a4c:	cmp	r3, #0
   17a50:	bne	17aa0 <__assert_fail@plt+0x60e4>
   17a54:	ldrb	r3, [sp, #80]	; 0x50
   17a58:	ldr	r5, [sp, #96]	; 0x60
   17a5c:	cmp	r3, #0
   17a60:	bne	17398 <__assert_fail@plt+0x59dc>
   17a64:	ldrb	r3, [r5]
   17a68:	ldr	r1, [sp]
   17a6c:	lsr	r2, r3, #5
   17a70:	and	r3, r3, #31
   17a74:	ldr	r2, [r1, r2, lsl #2]
   17a78:	lsr	r3, r2, r3
   17a7c:	tst	r3, #1
   17a80:	beq	17380 <__assert_fail@plt+0x59c4>
   17a84:	mov	r3, #1
   17a88:	str	r3, [sp, #100]	; 0x64
   17a8c:	ldrb	r2, [r5]
   17a90:	str	r2, [sp, #108]	; 0x6c
   17a94:	strb	r3, [sp, #104]	; 0x68
   17a98:	mov	r3, #1
   17a9c:	strb	r3, [sp, #92]	; 0x5c
   17aa0:	ldrb	r3, [sp, #104]	; 0x68
   17aa4:	cmp	r3, #0
   17aa8:	beq	1743c <__assert_fail@plt+0x5a80>
   17aac:	ldr	r2, [sp, #108]	; 0x6c
   17ab0:	cmp	r2, #0
   17ab4:	bne	1758c <__assert_fail@plt+0x5bd0>
   17ab8:	add	r2, sp, #248	; 0xf8
   17abc:	mov	r1, r6
   17ac0:	mov	r0, r4
   17ac4:	bl	167bc <__assert_fail@plt+0x4e00>
   17ac8:	subs	r3, r0, #0
   17acc:	str	r3, [sp, #4]
   17ad0:	beq	1743c <__assert_fail@plt+0x5a80>
   17ad4:	ldr	r0, [sp, #248]	; 0xf8
   17ad8:	b	178dc <__assert_fail@plt+0x5f20>
   17adc:	ldr	r3, [sp, #264]	; 0x108
   17ae0:	ldr	r2, [sp, #268]	; 0x10c
   17ae4:	add	r3, r3, r2
   17ae8:	str	r3, [sp, #264]	; 0x108
   17aec:	mov	r3, #0
   17af0:	strb	r3, [sp, #260]	; 0x104
   17af4:	b	177f0 <__assert_fail@plt+0x5e34>
   17af8:	ldrb	r3, [sp, #204]	; 0xcc
   17afc:	cmp	r3, #0
   17b00:	bne	17b50 <__assert_fail@plt+0x6194>
   17b04:	ldrb	r3, [sp, #192]	; 0xc0
   17b08:	cmp	r3, #0
   17b0c:	bne	176fc <__assert_fail@plt+0x5d40>
   17b10:	ldr	r1, [sp, #208]	; 0xd0
   17b14:	ldr	r0, [sp]
   17b18:	ldrb	r3, [r1]
   17b1c:	lsr	r2, r3, #5
   17b20:	and	r3, r3, #31
   17b24:	ldr	r2, [r0, r2, lsl #2]
   17b28:	lsr	r3, r2, r3
   17b2c:	tst	r3, #1
   17b30:	beq	176e4 <__assert_fail@plt+0x5d28>
   17b34:	mov	r3, #1
   17b38:	str	r3, [sp, #212]	; 0xd4
   17b3c:	ldrb	r2, [r1]
   17b40:	str	r2, [sp, #220]	; 0xdc
   17b44:	strb	r3, [sp, #216]	; 0xd8
   17b48:	mov	r3, #1
   17b4c:	strb	r3, [sp, #204]	; 0xcc
   17b50:	ldrb	r3, [sp, #216]	; 0xd8
   17b54:	cmp	r3, #0
   17b58:	beq	17b68 <__assert_fail@plt+0x61ac>
   17b5c:	ldr	r0, [sp, #220]	; 0xdc
   17b60:	cmp	r0, #0
   17b64:	beq	178dc <__assert_fail@plt+0x5f20>
   17b68:	cmp	r3, #0
   17b6c:	add	r8, r8, #1
   17b70:	bne	177a4 <__assert_fail@plt+0x5de8>
   17b74:	ldr	r2, [sp, #212]	; 0xd4
   17b78:	ldr	r3, [sp, #268]	; 0x10c
   17b7c:	cmp	r2, r3
   17b80:	bne	1785c <__assert_fail@plt+0x5ea0>
   17b84:	ldr	r1, [sp, #264]	; 0x108
   17b88:	ldr	r0, [sp, #208]	; 0xd0
   17b8c:	bl	1162c <memcmp@plt>
   17b90:	adds	r0, r0, #0
   17b94:	movne	r0, #1
   17b98:	b	177c0 <__assert_fail@plt+0x5e04>
   17b9c:	mov	r0, r6
   17ba0:	bl	117ac <strlen@plt>
   17ba4:	add	r3, sp, #248	; 0xf8
   17ba8:	mov	r1, r6
   17bac:	mov	r2, r0
   17bb0:	mov	r0, r4
   17bb4:	bl	16698 <__assert_fail@plt+0x4cdc>
   17bb8:	subs	r8, r0, #0
   17bbc:	bne	17ad4 <__assert_fail@plt+0x6118>
   17bc0:	mov	r3, r8
   17bc4:	b	17964 <__assert_fail@plt+0x5fa8>
   17bc8:	strdeq	r9, [r2], -r8
   17bcc:			; <UNDEFINED> instruction: 0x000289b5
   17bd0:	andeq	r8, r2, r8, asr r9
   17bd4:	andeq	r8, r2, r2, ror #18
   17bd8:	andeq	r8, r2, r9, ror r9
   17bdc:	muleq	r2, r0, r9
   17be0:	push	{r4, r5, r6, lr}
   17be4:	subs	r5, r0, #0
   17be8:	bne	17c00 <__assert_fail@plt+0x6244>
   17bec:	ldr	r3, [pc, #124]	; 17c70 <__assert_fail@plt+0x62b4>
   17bf0:	ldr	r0, [pc, #124]	; 17c74 <__assert_fail@plt+0x62b8>
   17bf4:	ldr	r1, [r3]
   17bf8:	bl	11968 <fputs@plt>
   17bfc:	bl	11980 <abort@plt>
   17c00:	mov	r1, #47	; 0x2f
   17c04:	bl	118c0 <strrchr@plt>
   17c08:	cmp	r0, #0
   17c0c:	addne	r4, r0, #1
   17c10:	moveq	r4, r5
   17c14:	sub	r3, r4, r5
   17c18:	cmp	r3, #6
   17c1c:	ble	17c5c <__assert_fail@plt+0x62a0>
   17c20:	mov	r2, #7
   17c24:	ldr	r1, [pc, #76]	; 17c78 <__assert_fail@plt+0x62bc>
   17c28:	sub	r0, r4, #7
   17c2c:	bl	11974 <strncmp@plt>
   17c30:	cmp	r0, #0
   17c34:	bne	17c5c <__assert_fail@plt+0x62a0>
   17c38:	mov	r2, #3
   17c3c:	ldr	r1, [pc, #56]	; 17c7c <__assert_fail@plt+0x62c0>
   17c40:	mov	r0, r4
   17c44:	bl	11974 <strncmp@plt>
   17c48:	cmp	r0, #0
   17c4c:	movne	r5, r4
   17c50:	ldreq	r3, [pc, #40]	; 17c80 <__assert_fail@plt+0x62c4>
   17c54:	addeq	r5, r4, #3
   17c58:	streq	r5, [r3]
   17c5c:	ldr	r3, [pc, #32]	; 17c84 <__assert_fail@plt+0x62c8>
   17c60:	str	r5, [r3]
   17c64:	ldr	r3, [pc, #28]	; 17c88 <__assert_fail@plt+0x62cc>
   17c68:	str	r5, [r3]
   17c6c:	pop	{r4, r5, r6, pc}
   17c70:	andeq	sl, r3, r8, lsl r2
   17c74:	andeq	r8, r2, r8, asr #19
   17c78:	andeq	r8, r2, r0, lsl #20
   17c7c:	andeq	r8, r2, r8, lsl #20
   17c80:	andeq	sl, r3, r8, lsl #4
   17c84:	andeq	sl, r3, r0, lsr #5
   17c88:	andeq	sl, r3, ip, lsl #4
   17c8c:	push	{r4, r5, r6, lr}
   17c90:	mov	r2, #48	; 0x30
   17c94:	mov	r5, r1
   17c98:	mov	r1, #0
   17c9c:	mov	r4, r0
   17ca0:	bl	11818 <memset@plt>
   17ca4:	cmp	r5, #10
   17ca8:	bne	17cb0 <__assert_fail@plt+0x62f4>
   17cac:	bl	11980 <abort@plt>
   17cb0:	str	r5, [r4]
   17cb4:	mov	r0, r4
   17cb8:	pop	{r4, r5, r6, pc}
   17cbc:	push	{r4, r5, r6, lr}
   17cc0:	mov	r4, r0
   17cc4:	mov	r5, r1
   17cc8:	bl	26c28 <__assert_fail@plt+0x1526c>
   17ccc:	ldrb	r3, [r0]
   17cd0:	bic	r3, r3, #32
   17cd4:	cmp	r3, #85	; 0x55
   17cd8:	bne	17d48 <__assert_fail@plt+0x638c>
   17cdc:	ldrb	r3, [r0, #1]
   17ce0:	bic	r3, r3, #32
   17ce4:	cmp	r3, #84	; 0x54
   17ce8:	bne	17d20 <__assert_fail@plt+0x6364>
   17cec:	ldrb	r3, [r0, #2]
   17cf0:	bic	r3, r3, #32
   17cf4:	cmp	r3, #70	; 0x46
   17cf8:	bne	17d20 <__assert_fail@plt+0x6364>
   17cfc:	ldrb	r3, [r0, #3]
   17d00:	cmp	r3, #45	; 0x2d
   17d04:	bne	17d20 <__assert_fail@plt+0x6364>
   17d08:	ldrb	r3, [r0, #4]
   17d0c:	cmp	r3, #56	; 0x38
   17d10:	bne	17d20 <__assert_fail@plt+0x6364>
   17d14:	ldrb	r3, [r0, #5]
   17d18:	cmp	r3, #0
   17d1c:	beq	17d34 <__assert_fail@plt+0x6378>
   17d20:	ldr	r1, [pc, #144]	; 17db8 <__assert_fail@plt+0x63fc>
   17d24:	ldr	r0, [pc, #144]	; 17dbc <__assert_fail@plt+0x6400>
   17d28:	cmp	r5, #9
   17d2c:	movne	r0, r1
   17d30:	pop	{r4, r5, r6, pc}
   17d34:	ldrb	r3, [r4]
   17d38:	ldr	r1, [pc, #128]	; 17dc0 <__assert_fail@plt+0x6404>
   17d3c:	ldr	r0, [pc, #128]	; 17dc4 <__assert_fail@plt+0x6408>
   17d40:	cmp	r3, #96	; 0x60
   17d44:	b	17d2c <__assert_fail@plt+0x6370>
   17d48:	cmp	r3, #71	; 0x47
   17d4c:	bne	17d20 <__assert_fail@plt+0x6364>
   17d50:	ldrb	r3, [r0, #1]
   17d54:	bic	r3, r3, #32
   17d58:	cmp	r3, #66	; 0x42
   17d5c:	bne	17d20 <__assert_fail@plt+0x6364>
   17d60:	ldrb	r3, [r0, #2]
   17d64:	cmp	r3, #49	; 0x31
   17d68:	bne	17d20 <__assert_fail@plt+0x6364>
   17d6c:	ldrb	r3, [r0, #3]
   17d70:	cmp	r3, #56	; 0x38
   17d74:	bne	17d20 <__assert_fail@plt+0x6364>
   17d78:	ldrb	r3, [r0, #4]
   17d7c:	cmp	r3, #48	; 0x30
   17d80:	bne	17d20 <__assert_fail@plt+0x6364>
   17d84:	ldrb	r3, [r0, #5]
   17d88:	cmp	r3, #51	; 0x33
   17d8c:	bne	17d20 <__assert_fail@plt+0x6364>
   17d90:	ldrb	r3, [r0, #6]
   17d94:	cmp	r3, #48	; 0x30
   17d98:	bne	17d20 <__assert_fail@plt+0x6364>
   17d9c:	ldrb	r3, [r0, #7]
   17da0:	cmp	r3, #0
   17da4:	bne	17d20 <__assert_fail@plt+0x6364>
   17da8:	ldrb	r3, [r4]
   17dac:	ldr	r1, [pc, #20]	; 17dc8 <__assert_fail@plt+0x640c>
   17db0:	ldr	r0, [pc, #20]	; 17dcc <__assert_fail@plt+0x6410>
   17db4:	b	17d40 <__assert_fail@plt+0x6384>
   17db8:	andeq	r8, r2, lr, ror r2
   17dbc:	andeq	r8, r2, pc, ror #20
   17dc0:	andeq	r8, r2, r4, ror #20
   17dc4:	andeq	r8, r2, r0, ror #20
   17dc8:	andeq	r8, r2, ip, ror #20
   17dcc:	andeq	r8, r2, r8, ror #20
   17dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dd4:	sub	sp, sp, #108	; 0x6c
   17dd8:	mov	r8, r0
   17ddc:	str	r3, [sp, #36]	; 0x24
   17de0:	mov	r5, r1
   17de4:	str	r2, [sp, #44]	; 0x2c
   17de8:	ldr	sl, [sp, #144]	; 0x90
   17dec:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   17df0:	ldr	r3, [sp, #148]	; 0x94
   17df4:	mov	r7, #0
   17df8:	str	r7, [sp, #48]	; 0x30
   17dfc:	lsr	r6, r3, #1
   17e00:	and	r6, r6, #1
   17e04:	mov	r3, #1
   17e08:	str	r3, [sp, #72]	; 0x48
   17e0c:	str	r7, [sp, #24]
   17e10:	str	r7, [sp, #32]
   17e14:	str	r7, [sp, #40]	; 0x28
   17e18:	str	r7, [sp, #60]	; 0x3c
   17e1c:	str	r0, [sp, #76]	; 0x4c
   17e20:	cmp	sl, #10
   17e24:	ldrls	pc, [pc, sl, lsl #2]
   17e28:	b	18064 <__assert_fail@plt+0x66a8>
   17e2c:	andeq	r7, r1, r8, asr lr
   17e30:	andeq	r8, r1, ip, ror #21
   17e34:	andeq	r8, r1, r0, lsr r0
   17e38:	andeq	r8, r1, ip, ror r0
   17e3c:	andeq	r8, r1, ip
   17e40:	andeq	r7, r1, r4, ror #28
   17e44:	andeq	r8, r1, ip, asr #21
   17e48:	andeq	r8, r1, r8, rrx
   17e4c:	andeq	r7, r1, ip, asr pc
   17e50:	andeq	r7, r1, ip, asr pc
   17e54:	andeq	r7, r1, ip, asr pc
   17e58:	mov	r6, #0
   17e5c:	mov	r4, #0
   17e60:	b	17e90 <__assert_fail@plt+0x64d4>
   17e64:	cmp	r6, #0
   17e68:	bne	1808c <__assert_fail@plt+0x66d0>
   17e6c:	cmp	r5, #0
   17e70:	movne	r3, #34	; 0x22
   17e74:	strbne	r3, [r8]
   17e78:	mov	r3, #1
   17e7c:	str	r3, [sp, #24]
   17e80:	str	r3, [sp, #32]
   17e84:	mov	r4, #1
   17e88:	ldr	r3, [pc, #3172]	; 18af4 <__assert_fail@plt+0x7138>
   17e8c:	str	r3, [sp, #40]	; 0x28
   17e90:	mov	r9, r5
   17e94:	mov	r3, #0
   17e98:	str	r7, [sp, #68]	; 0x44
   17e9c:	str	r3, [sp, #28]
   17ea0:	ldr	r3, [sp, #36]	; 0x24
   17ea4:	cmn	r3, #1
   17ea8:	bne	18a38 <__assert_fail@plt+0x707c>
   17eac:	ldr	r3, [sp, #44]	; 0x2c
   17eb0:	ldr	r2, [sp, #28]
   17eb4:	ldrb	r3, [r3, r2]
   17eb8:	adds	r3, r3, #0
   17ebc:	movne	r3, #1
   17ec0:	str	r3, [sp, #52]	; 0x34
   17ec4:	ldr	r3, [sp, #52]	; 0x34
   17ec8:	cmp	r3, #0
   17ecc:	bne	180b4 <__assert_fail@plt+0x66f8>
   17ed0:	sub	r2, sl, #2
   17ed4:	clz	r2, r2
   17ed8:	lsr	r2, r2, #5
   17edc:	and	r3, r6, r2
   17ee0:	cmp	r4, #0
   17ee4:	movne	r3, #0
   17ee8:	andeq	r3, r3, #1
   17eec:	cmp	r3, #0
   17ef0:	bne	1827c <__assert_fail@plt+0x68c0>
   17ef4:	eor	r3, r6, #1
   17ef8:	ands	r2, r2, r3
   17efc:	beq	18a70 <__assert_fail@plt+0x70b4>
   17f00:	ldr	r3, [sp, #68]	; 0x44
   17f04:	cmp	r3, #0
   17f08:	beq	18aa8 <__assert_fail@plt+0x70ec>
   17f0c:	ldr	r3, [sp, #72]	; 0x48
   17f10:	cmp	r3, #0
   17f14:	beq	18a4c <__assert_fail@plt+0x7090>
   17f18:	ldr	r3, [sp, #160]	; 0xa0
   17f1c:	ldr	r2, [sp, #44]	; 0x2c
   17f20:	str	r3, [sp, #16]
   17f24:	ldr	r3, [sp, #156]	; 0x9c
   17f28:	ldr	r1, [sp, #60]	; 0x3c
   17f2c:	str	r3, [sp, #12]
   17f30:	ldr	r3, [sp, #152]	; 0x98
   17f34:	str	r3, [sp, #8]
   17f38:	ldr	r3, [sp, #148]	; 0x94
   17f3c:	str	r3, [sp, #4]
   17f40:	mov	r3, #5
   17f44:	str	r3, [sp]
   17f48:	ldr	r3, [sp, #36]	; 0x24
   17f4c:	mov	r0, r8
   17f50:	bl	17dd0 <__assert_fail@plt+0x6414>
   17f54:	mov	r4, r0
   17f58:	b	18a9c <__assert_fail@plt+0x70e0>
   17f5c:	cmp	sl, #10
   17f60:	beq	17fbc <__assert_fail@plt+0x6600>
   17f64:	ldr	r4, [pc, #2956]	; 18af8 <__assert_fail@plt+0x713c>
   17f68:	mov	r2, #5
   17f6c:	mov	r1, r4
   17f70:	mov	r0, #0
   17f74:	bl	11638 <dcgettext@plt>
   17f78:	cmp	r0, r4
   17f7c:	str	r0, [sp, #156]	; 0x9c
   17f80:	bne	17f90 <__assert_fail@plt+0x65d4>
   17f84:	mov	r1, sl
   17f88:	bl	17cbc <__assert_fail@plt+0x6300>
   17f8c:	str	r0, [sp, #156]	; 0x9c
   17f90:	ldr	r4, [pc, #2916]	; 18afc <__assert_fail@plt+0x7140>
   17f94:	mov	r2, #5
   17f98:	mov	r1, r4
   17f9c:	mov	r0, #0
   17fa0:	bl	11638 <dcgettext@plt>
   17fa4:	cmp	r0, r4
   17fa8:	str	r0, [sp, #160]	; 0xa0
   17fac:	bne	17fbc <__assert_fail@plt+0x6600>
   17fb0:	mov	r1, sl
   17fb4:	bl	17cbc <__assert_fail@plt+0x6300>
   17fb8:	str	r0, [sp, #160]	; 0xa0
   17fbc:	cmp	r6, #0
   17fc0:	moveq	r4, r6
   17fc4:	beq	17fdc <__assert_fail@plt+0x6620>
   17fc8:	mov	r4, #0
   17fcc:	b	17fec <__assert_fail@plt+0x6630>
   17fd0:	cmp	r5, r4
   17fd4:	strbhi	r3, [r8, r4]
   17fd8:	add	r4, r4, #1
   17fdc:	ldr	r3, [sp, #156]	; 0x9c
   17fe0:	ldrb	r3, [r3, r4]
   17fe4:	cmp	r3, #0
   17fe8:	bne	17fd0 <__assert_fail@plt+0x6614>
   17fec:	ldr	r0, [sp, #160]	; 0xa0
   17ff0:	bl	117ac <strlen@plt>
   17ff4:	ldr	r3, [sp, #160]	; 0xa0
   17ff8:	str	r3, [sp, #40]	; 0x28
   17ffc:	mov	r3, #1
   18000:	str	r3, [sp, #24]
   18004:	str	r0, [sp, #32]
   18008:	b	17e90 <__assert_fail@plt+0x64d4>
   1800c:	mov	r3, #1
   18010:	cmp	r6, #0
   18014:	streq	r3, [sp, #24]
   18018:	beq	18038 <__assert_fail@plt+0x667c>
   1801c:	str	r3, [sp, #32]
   18020:	ldr	r3, [pc, #2772]	; 18afc <__assert_fail@plt+0x7140>
   18024:	mov	r4, #0
   18028:	str	r3, [sp, #40]	; 0x28
   1802c:	b	1805c <__assert_fail@plt+0x66a0>
   18030:	cmp	r6, #0
   18034:	bne	180a4 <__assert_fail@plt+0x66e8>
   18038:	cmp	r5, #0
   1803c:	movne	r3, #39	; 0x27
   18040:	strbne	r3, [r8]
   18044:	mov	r3, #1
   18048:	str	r3, [sp, #32]
   1804c:	mov	r6, #0
   18050:	ldr	r3, [pc, #2724]	; 18afc <__assert_fail@plt+0x7140>
   18054:	mov	r4, #1
   18058:	str	r3, [sp, #40]	; 0x28
   1805c:	mov	sl, #2
   18060:	b	17e90 <__assert_fail@plt+0x64d4>
   18064:	bl	11980 <abort@plt>
   18068:	mov	r6, #0
   1806c:	mov	r3, #1
   18070:	str	r3, [sp, #24]
   18074:	mov	r4, r6
   18078:	b	17e90 <__assert_fail@plt+0x64d4>
   1807c:	mov	r6, #1
   18080:	str	r6, [sp, #24]
   18084:	str	r6, [sp, #32]
   18088:	b	18020 <__assert_fail@plt+0x6664>
   1808c:	mov	r3, #1
   18090:	str	r3, [sp, #32]
   18094:	ldr	r3, [pc, #2648]	; 18af4 <__assert_fail@plt+0x7138>
   18098:	str	r6, [sp, #24]
   1809c:	str	r3, [sp, #40]	; 0x28
   180a0:	b	17e5c <__assert_fail@plt+0x64a0>
   180a4:	mov	r3, #1
   180a8:	str	r3, [sp, #32]
   180ac:	ldr	r3, [pc, #2632]	; 18afc <__assert_fail@plt+0x7140>
   180b0:	b	1809c <__assert_fail@plt+0x66e0>
   180b4:	ldr	r3, [sp, #32]
   180b8:	ldr	fp, [sp, #24]
   180bc:	cmp	sl, #2
   180c0:	moveq	fp, #0
   180c4:	andne	fp, fp, #1
   180c8:	adds	r5, r3, #0
   180cc:	movne	r5, #1
   180d0:	ands	r3, r5, fp
   180d4:	str	r3, [sp, #64]	; 0x40
   180d8:	beq	181a8 <__assert_fail@plt+0x67ec>
   180dc:	ldr	r2, [sp, #32]
   180e0:	ldr	r3, [sp, #28]
   180e4:	add	r7, r3, r2
   180e8:	mov	r3, r2
   180ec:	ldr	r2, [sp, #36]	; 0x24
   180f0:	cmp	r3, #1
   180f4:	movls	r3, #0
   180f8:	movhi	r3, #1
   180fc:	cmn	r2, #1
   18100:	movne	r3, #0
   18104:	cmp	r3, #0
   18108:	beq	18118 <__assert_fail@plt+0x675c>
   1810c:	ldr	r0, [sp, #44]	; 0x2c
   18110:	bl	117ac <strlen@plt>
   18114:	str	r0, [sp, #36]	; 0x24
   18118:	ldr	r3, [sp, #36]	; 0x24
   1811c:	cmp	r3, r7
   18120:	bcc	181a0 <__assert_fail@plt+0x67e4>
   18124:	ldr	r3, [sp, #44]	; 0x2c
   18128:	ldr	r0, [sp, #28]
   1812c:	ldr	r2, [sp, #32]
   18130:	ldr	r1, [sp, #40]	; 0x28
   18134:	add	r0, r3, r0
   18138:	bl	1162c <memcmp@plt>
   1813c:	cmp	r0, #0
   18140:	bne	181a0 <__assert_fail@plt+0x67e4>
   18144:	cmp	r6, #0
   18148:	beq	181a8 <__assert_fail@plt+0x67ec>
   1814c:	str	r6, [sp, #24]
   18150:	ldr	r3, [sp, #24]
   18154:	ldr	r2, [sp, #44]	; 0x2c
   18158:	cmp	sl, #2
   1815c:	movne	r3, #0
   18160:	andeq	r3, r3, #1
   18164:	cmp	r3, #0
   18168:	ldr	r3, [sp, #160]	; 0xa0
   1816c:	movne	sl, #4
   18170:	str	r3, [sp, #16]
   18174:	ldr	r3, [sp, #156]	; 0x9c
   18178:	str	sl, [sp]
   1817c:	str	r3, [sp, #12]
   18180:	mov	r3, #0
   18184:	str	r3, [sp, #8]
   18188:	ldr	r3, [sp, #148]	; 0x94
   1818c:	mov	r1, r9
   18190:	bic	r3, r3, #2
   18194:	str	r3, [sp, #4]
   18198:	ldr	r3, [sp, #36]	; 0x24
   1819c:	b	17f4c <__assert_fail@plt+0x6590>
   181a0:	mov	r3, #0
   181a4:	str	r3, [sp, #64]	; 0x40
   181a8:	ldr	r2, [sp, #28]
   181ac:	ldr	r3, [sp, #44]	; 0x2c
   181b0:	add	r3, r3, r2
   181b4:	str	r3, [sp, #80]	; 0x50
   181b8:	ldr	r3, [sp, #44]	; 0x2c
   181bc:	ldrb	r7, [r3, r2]
   181c0:	cmp	r7, #58	; 0x3a
   181c4:	bhi	1832c <__assert_fail@plt+0x6970>
   181c8:	cmp	r7, #43	; 0x2b
   181cc:	bcs	18380 <__assert_fail@plt+0x69c4>
   181d0:	cmp	r7, #32
   181d4:	beq	183d8 <__assert_fail@plt+0x6a1c>
   181d8:	bhi	18284 <__assert_fail@plt+0x68c8>
   181dc:	cmp	r7, #9
   181e0:	beq	1868c <__assert_fail@plt+0x6cd0>
   181e4:	bhi	18248 <__assert_fail@plt+0x688c>
   181e8:	cmp	r7, #7
   181ec:	beq	18738 <__assert_fail@plt+0x6d7c>
   181f0:	bhi	183f4 <__assert_fail@plt+0x6a38>
   181f4:	cmp	r7, #0
   181f8:	beq	18410 <__assert_fail@plt+0x6a54>
   181fc:	ldr	r3, [sp, #76]	; 0x4c
   18200:	cmp	r3, #1
   18204:	bne	1877c <__assert_fail@plt+0x6dc0>
   18208:	bl	1177c <__ctype_b_loc@plt>
   1820c:	sxth	r3, r7
   18210:	lsl	r3, r3, #1
   18214:	ldr	r2, [r0]
   18218:	ldrh	r5, [r2, r3]
   1821c:	ldr	r3, [sp, #76]	; 0x4c
   18220:	str	r3, [sp, #56]	; 0x38
   18224:	lsr	r5, r5, #14
   18228:	and	r5, r5, #1
   1822c:	ldr	r3, [sp, #24]
   18230:	eor	fp, r5, #1
   18234:	and	fp, fp, r3
   18238:	ands	fp, fp, #255	; 0xff
   1823c:	beq	185c4 <__assert_fail@plt+0x6c08>
   18240:	mov	r5, #0
   18244:	b	18828 <__assert_fail@plt+0x6e6c>
   18248:	cmp	r7, #11
   1824c:	beq	18694 <__assert_fail@plt+0x6cd8>
   18250:	bcc	18730 <__assert_fail@plt+0x6d74>
   18254:	cmp	r7, #12
   18258:	beq	18740 <__assert_fail@plt+0x6d84>
   1825c:	cmp	r7, #13
   18260:	moveq	r3, #114	; 0x72
   18264:	bne	181fc <__assert_fail@plt+0x6840>
   18268:	cmp	sl, #2
   1826c:	movne	r2, #0
   18270:	andeq	r2, r6, #1
   18274:	cmp	r2, #0
   18278:	beq	183f8 <__assert_fail@plt+0x6a3c>
   1827c:	mov	sl, #2
   18280:	b	18150 <__assert_fail@plt+0x6794>
   18284:	cmp	r7, #37	; 0x25
   18288:	beq	18380 <__assert_fail@plt+0x69c4>
   1828c:	bhi	182a0 <__assert_fail@plt+0x68e4>
   18290:	cmp	r7, #35	; 0x23
   18294:	beq	183cc <__assert_fail@plt+0x6a10>
   18298:	mov	r5, #0
   1829c:	b	183dc <__assert_fail@plt+0x6a20>
   182a0:	cmp	r7, #39	; 0x27
   182a4:	bne	18298 <__assert_fail@plt+0x68dc>
   182a8:	cmp	sl, #2
   182ac:	ldrne	r5, [sp, #52]	; 0x34
   182b0:	movne	r3, r5
   182b4:	strne	r3, [sp, #68]	; 0x44
   182b8:	bne	18384 <__assert_fail@plt+0x69c8>
   182bc:	cmp	r6, #0
   182c0:	bne	18150 <__assert_fail@plt+0x6794>
   182c4:	ldr	r2, [sp, #60]	; 0x3c
   182c8:	adds	r3, r9, #0
   182cc:	movne	r3, #1
   182d0:	cmp	r2, #0
   182d4:	movne	r3, #0
   182d8:	cmp	r3, #0
   182dc:	strne	r9, [sp, #60]	; 0x3c
   182e0:	movne	r9, #0
   182e4:	bne	182f4 <__assert_fail@plt+0x6938>
   182e8:	cmp	r9, r4
   182ec:	movhi	r3, #39	; 0x27
   182f0:	strbhi	r3, [r8, r4]
   182f4:	add	r3, r4, #1
   182f8:	cmp	r3, r9
   182fc:	movcc	r2, #92	; 0x5c
   18300:	strbcc	r2, [r8, r3]
   18304:	add	r3, r4, #2
   18308:	cmp	r3, r9
   1830c:	ldr	r5, [sp, #52]	; 0x34
   18310:	movcc	r2, #39	; 0x27
   18314:	strbcc	r2, [r8, r3]
   18318:	add	r4, r4, #3
   1831c:	mov	fp, r6
   18320:	str	r5, [sp, #68]	; 0x44
   18324:	str	r6, [sp, #48]	; 0x30
   18328:	b	185c4 <__assert_fail@plt+0x6c08>
   1832c:	cmp	r7, #94	; 0x5e
   18330:	beq	18298 <__assert_fail@plt+0x68dc>
   18334:	bhi	1838c <__assert_fail@plt+0x69d0>
   18338:	cmp	r7, #90	; 0x5a
   1833c:	bhi	18374 <__assert_fail@plt+0x69b8>
   18340:	cmp	r7, #65	; 0x41
   18344:	bcs	18380 <__assert_fail@plt+0x69c4>
   18348:	cmp	r7, #62	; 0x3e
   1834c:	bls	18298 <__assert_fail@plt+0x68dc>
   18350:	cmp	r7, #63	; 0x3f
   18354:	bne	181fc <__assert_fail@plt+0x6840>
   18358:	cmp	sl, #2
   1835c:	beq	18500 <__assert_fail@plt+0x6b44>
   18360:	cmp	sl, #5
   18364:	beq	18510 <__assert_fail@plt+0x6b54>
   18368:	mov	fp, #0
   1836c:	mov	r5, fp
   18370:	b	185c4 <__assert_fail@plt+0x6c08>
   18374:	cmp	r7, #92	; 0x5c
   18378:	beq	1869c <__assert_fail@plt+0x6ce0>
   1837c:	bls	18298 <__assert_fail@plt+0x68dc>
   18380:	ldr	r5, [sp, #52]	; 0x34
   18384:	mov	fp, #0
   18388:	b	185c4 <__assert_fail@plt+0x6c08>
   1838c:	cmp	r7, #122	; 0x7a
   18390:	bhi	183b0 <__assert_fail@plt+0x69f4>
   18394:	cmp	r7, #97	; 0x61
   18398:	bcs	18380 <__assert_fail@plt+0x69c4>
   1839c:	cmp	r7, #95	; 0x5f
   183a0:	beq	18380 <__assert_fail@plt+0x69c4>
   183a4:	cmp	r7, #96	; 0x60
   183a8:	bne	181fc <__assert_fail@plt+0x6840>
   183ac:	b	18298 <__assert_fail@plt+0x68dc>
   183b0:	cmp	r7, #124	; 0x7c
   183b4:	beq	18298 <__assert_fail@plt+0x68dc>
   183b8:	bcc	18748 <__assert_fail@plt+0x6d8c>
   183bc:	cmp	r7, #125	; 0x7d
   183c0:	beq	18748 <__assert_fail@plt+0x6d8c>
   183c4:	cmp	r7, #126	; 0x7e
   183c8:	bne	181fc <__assert_fail@plt+0x6840>
   183cc:	ldr	r3, [sp, #28]
   183d0:	cmp	r3, #0
   183d4:	bne	18508 <__assert_fail@plt+0x6b4c>
   183d8:	ldr	r5, [sp, #52]	; 0x34
   183dc:	cmp	sl, #2
   183e0:	movne	fp, #0
   183e4:	andeq	fp, r6, #1
   183e8:	cmp	fp, #0
   183ec:	beq	185c4 <__assert_fail@plt+0x6c08>
   183f0:	b	1827c <__assert_fail@plt+0x68c0>
   183f4:	mov	r3, #98	; 0x62
   183f8:	ldr	r2, [sp, #24]
   183fc:	cmp	r2, #0
   18400:	beq	18508 <__assert_fail@plt+0x6b4c>
   18404:	mov	r7, r3
   18408:	mov	r5, #0
   1840c:	b	1861c <__assert_fail@plt+0x6c60>
   18410:	ldr	r3, [sp, #24]
   18414:	cmp	r3, #0
   18418:	beq	184e4 <__assert_fail@plt+0x6b28>
   1841c:	cmp	r6, #0
   18420:	bne	1814c <__assert_fail@plt+0x6790>
   18424:	ldr	r3, [sp, #48]	; 0x30
   18428:	eor	r2, r3, #1
   1842c:	cmp	sl, #2
   18430:	movne	r2, #0
   18434:	andeq	r2, r2, #1
   18438:	cmp	r2, #0
   1843c:	moveq	r3, r4
   18440:	beq	18478 <__assert_fail@plt+0x6abc>
   18444:	cmp	r9, r4
   18448:	movhi	r3, #39	; 0x27
   1844c:	strbhi	r3, [r8, r4]
   18450:	add	r3, r4, #1
   18454:	cmp	r9, r3
   18458:	movhi	r1, #36	; 0x24
   1845c:	strbhi	r1, [r8, r3]
   18460:	add	r3, r4, #2
   18464:	cmp	r9, r3
   18468:	movhi	r1, #39	; 0x27
   1846c:	strbhi	r1, [r8, r3]
   18470:	add	r3, r4, #3
   18474:	str	r2, [sp, #48]	; 0x30
   18478:	cmp	r9, r3
   1847c:	movhi	r2, #92	; 0x5c
   18480:	strbhi	r2, [r8, r3]
   18484:	cmp	fp, #0
   18488:	add	r4, r3, #1
   1848c:	beq	18a1c <__assert_fail@plt+0x7060>
   18490:	ldr	r2, [sp, #28]
   18494:	ldr	r1, [sp, #36]	; 0x24
   18498:	add	r2, r2, #1
   1849c:	cmp	r1, r2
   184a0:	bls	184dc <__assert_fail@plt+0x6b20>
   184a4:	ldr	r1, [sp, #44]	; 0x2c
   184a8:	mov	r7, #48	; 0x30
   184ac:	ldrb	r2, [r1, r2]
   184b0:	sub	r2, r2, #48	; 0x30
   184b4:	cmp	r2, #9
   184b8:	movhi	r5, r6
   184bc:	bhi	185c4 <__assert_fail@plt+0x6c08>
   184c0:	cmp	r9, r4
   184c4:	add	r2, r3, #2
   184c8:	strbhi	r7, [r8, r4]
   184cc:	cmp	r9, r2
   184d0:	add	r4, r3, #3
   184d4:	movhi	r1, #48	; 0x30
   184d8:	strbhi	r1, [r8, r2]
   184dc:	mov	r5, r6
   184e0:	b	18a24 <__assert_fail@plt+0x7068>
   184e4:	ldr	r3, [sp, #148]	; 0x94
   184e8:	tst	r3, #1
   184ec:	ldreq	r5, [sp, #24]
   184f0:	beq	18a30 <__assert_fail@plt+0x7074>
   184f4:	ldr	r3, [sp, #28]
   184f8:	add	r3, r3, #1
   184fc:	b	17e9c <__assert_fail@plt+0x64e0>
   18500:	cmp	r6, #0
   18504:	bne	18150 <__assert_fail@plt+0x6794>
   18508:	mov	r5, #0
   1850c:	b	18384 <__assert_fail@plt+0x69c8>
   18510:	ldr	r3, [sp, #148]	; 0x94
   18514:	tst	r3, #4
   18518:	beq	18508 <__assert_fail@plt+0x6b4c>
   1851c:	ldr	r3, [sp, #28]
   18520:	add	r2, r3, #2
   18524:	ldr	r3, [sp, #36]	; 0x24
   18528:	cmp	r3, r2
   1852c:	bls	18508 <__assert_fail@plt+0x6b4c>
   18530:	ldr	r3, [sp, #44]	; 0x2c
   18534:	ldr	r1, [sp, #28]
   18538:	add	r3, r3, r1
   1853c:	ldrb	r0, [r3, #1]
   18540:	cmp	r0, #63	; 0x3f
   18544:	bne	18508 <__assert_fail@plt+0x6b4c>
   18548:	ldr	r3, [sp, #44]	; 0x2c
   1854c:	ldrb	r1, [r3, r2]
   18550:	sub	r3, r1, #33	; 0x21
   18554:	uxtb	r3, r3
   18558:	cmp	r3, #29
   1855c:	bhi	18a2c <__assert_fail@plt+0x7070>
   18560:	mov	ip, #1
   18564:	ldr	r5, [pc, #1428]	; 18b00 <__assert_fail@plt+0x7144>
   18568:	ands	r5, r5, ip, lsl r3
   1856c:	beq	18384 <__assert_fail@plt+0x69c8>
   18570:	cmp	r6, #0
   18574:	bne	18150 <__assert_fail@plt+0x6794>
   18578:	add	r3, r4, #1
   1857c:	cmp	r9, r4
   18580:	strbhi	r0, [r8, r4]
   18584:	cmp	r9, r3
   18588:	movhi	r0, #34	; 0x22
   1858c:	strbhi	r0, [r8, r3]
   18590:	add	r3, r4, #2
   18594:	cmp	r9, r3
   18598:	movhi	r0, #34	; 0x22
   1859c:	strbhi	r0, [r8, r3]
   185a0:	add	r3, r4, #3
   185a4:	cmp	r9, r3
   185a8:	add	r4, r4, #4
   185ac:	mov	r5, r6
   185b0:	mov	fp, r6
   185b4:	mov	r7, r1
   185b8:	movhi	r0, #63	; 0x3f
   185bc:	strbhi	r0, [r8, r3]
   185c0:	str	r2, [sp, #28]
   185c4:	ldr	r3, [sp, #24]
   185c8:	eor	r3, r3, #1
   185cc:	cmp	sl, #2
   185d0:	orreq	r3, r3, #1
   185d4:	eor	r3, r3, #1
   185d8:	orr	r3, r6, r3
   185dc:	tst	r3, #255	; 0xff
   185e0:	beq	18610 <__assert_fail@plt+0x6c54>
   185e4:	ldr	r3, [sp, #152]	; 0x98
   185e8:	cmp	r3, #0
   185ec:	beq	18610 <__assert_fail@plt+0x6c54>
   185f0:	lsr	r2, r7, #5
   185f4:	ldr	r1, [sp, #152]	; 0x98
   185f8:	uxtb	r2, r2
   185fc:	and	r3, r7, #31
   18600:	ldr	r2, [r1, r2, lsl #2]
   18604:	lsr	r3, r2, r3
   18608:	tst	r3, #1
   1860c:	bne	1861c <__assert_fail@plt+0x6c60>
   18610:	ldr	r3, [sp, #64]	; 0x40
   18614:	cmp	r3, #0
   18618:	beq	186b4 <__assert_fail@plt+0x6cf8>
   1861c:	cmp	r6, #0
   18620:	bne	18150 <__assert_fail@plt+0x6794>
   18624:	ldr	r3, [sp, #48]	; 0x30
   18628:	eor	r3, r3, #1
   1862c:	cmp	sl, #2
   18630:	movne	r3, #0
   18634:	andeq	r3, r3, #1
   18638:	cmp	r3, #0
   1863c:	beq	18674 <__assert_fail@plt+0x6cb8>
   18640:	cmp	r9, r4
   18644:	movhi	r2, #39	; 0x27
   18648:	strbhi	r2, [r8, r4]
   1864c:	add	r2, r4, #1
   18650:	cmp	r9, r2
   18654:	movhi	r1, #36	; 0x24
   18658:	strbhi	r1, [r8, r2]
   1865c:	add	r2, r4, #2
   18660:	cmp	r9, r2
   18664:	add	r4, r4, #3
   18668:	movhi	r1, #39	; 0x27
   1866c:	strbhi	r1, [r8, r2]
   18670:	str	r3, [sp, #48]	; 0x30
   18674:	cmp	r9, r4
   18678:	movhi	r3, #92	; 0x5c
   1867c:	strbhi	r3, [r8, r4]
   18680:	ldr	fp, [sp, #52]	; 0x34
   18684:	add	r4, r4, #1
   18688:	b	186b4 <__assert_fail@plt+0x6cf8>
   1868c:	mov	r3, #116	; 0x74
   18690:	b	18268 <__assert_fail@plt+0x68ac>
   18694:	mov	r3, #118	; 0x76
   18698:	b	183f8 <__assert_fail@plt+0x6a3c>
   1869c:	cmp	sl, #2
   186a0:	bne	18710 <__assert_fail@plt+0x6d54>
   186a4:	cmp	r6, #0
   186a8:	bne	18150 <__assert_fail@plt+0x6794>
   186ac:	mov	r5, r6
   186b0:	mov	fp, r6
   186b4:	ldr	r3, [sp, #48]	; 0x30
   186b8:	eor	fp, fp, #1
   186bc:	and	fp, fp, r3
   186c0:	tst	fp, #255	; 0xff
   186c4:	beq	186f0 <__assert_fail@plt+0x6d34>
   186c8:	cmp	r9, r4
   186cc:	movhi	r3, #39	; 0x27
   186d0:	strbhi	r3, [r8, r4]
   186d4:	add	r3, r4, #1
   186d8:	cmp	r9, r3
   186dc:	movhi	r2, #39	; 0x27
   186e0:	add	r4, r4, #2
   186e4:	strbhi	r2, [r8, r3]
   186e8:	mov	r3, #0
   186ec:	str	r3, [sp, #48]	; 0x30
   186f0:	cmp	r9, r4
   186f4:	strbhi	r7, [r8, r4]
   186f8:	ldr	r3, [sp, #72]	; 0x48
   186fc:	cmp	r5, #0
   18700:	moveq	r3, #0
   18704:	add	r4, r4, #1
   18708:	str	r3, [sp, #72]	; 0x48
   1870c:	b	184f4 <__assert_fail@plt+0x6b38>
   18710:	ldr	r3, [sp, #24]
   18714:	and	r3, r3, r6
   18718:	tst	r5, r3
   1871c:	moveq	r3, r7
   18720:	beq	18268 <__assert_fail@plt+0x68ac>
   18724:	mov	fp, #0
   18728:	mov	r5, fp
   1872c:	b	186b4 <__assert_fail@plt+0x6cf8>
   18730:	mov	r3, #110	; 0x6e
   18734:	b	18268 <__assert_fail@plt+0x68ac>
   18738:	mov	r3, #97	; 0x61
   1873c:	b	183f8 <__assert_fail@plt+0x6a3c>
   18740:	mov	r3, #102	; 0x66
   18744:	b	183f8 <__assert_fail@plt+0x6a3c>
   18748:	ldr	r3, [sp, #36]	; 0x24
   1874c:	cmn	r3, #1
   18750:	bne	18770 <__assert_fail@plt+0x6db4>
   18754:	ldr	r3, [sp, #44]	; 0x2c
   18758:	ldrb	r3, [r3, #1]
   1875c:	adds	r3, r3, #0
   18760:	movne	r3, #1
   18764:	cmp	r3, #0
   18768:	bne	18508 <__assert_fail@plt+0x6b4c>
   1876c:	b	183cc <__assert_fail@plt+0x6a10>
   18770:	ldr	r3, [sp, #36]	; 0x24
   18774:	subs	r3, r3, #1
   18778:	b	18760 <__assert_fail@plt+0x6da4>
   1877c:	mov	r3, #0
   18780:	str	r3, [sp, #96]	; 0x60
   18784:	str	r3, [sp, #100]	; 0x64
   18788:	ldr	r3, [sp, #36]	; 0x24
   1878c:	cmn	r3, #1
   18790:	bne	187a0 <__assert_fail@plt+0x6de4>
   18794:	ldr	r0, [sp, #44]	; 0x2c
   18798:	bl	117ac <strlen@plt>
   1879c:	str	r0, [sp, #36]	; 0x24
   187a0:	ldr	r5, [sp, #52]	; 0x34
   187a4:	mov	r3, #0
   187a8:	str	r3, [sp, #56]	; 0x38
   187ac:	ldr	r3, [sp, #28]
   187b0:	ldr	r2, [sp, #56]	; 0x38
   187b4:	ldr	r1, [sp, #36]	; 0x24
   187b8:	add	r2, r3, r2
   187bc:	ldr	r3, [sp, #44]	; 0x2c
   187c0:	add	r0, sp, #92	; 0x5c
   187c4:	add	fp, r3, r2
   187c8:	sub	r2, r1, r2
   187cc:	add	r3, sp, #96	; 0x60
   187d0:	mov	r1, fp
   187d4:	bl	1a434 <__assert_fail@plt+0x8a78>
   187d8:	subs	r2, r0, #0
   187dc:	beq	1881c <__assert_fail@plt+0x6e60>
   187e0:	cmn	r2, #1
   187e4:	beq	189f4 <__assert_fail@plt+0x7038>
   187e8:	cmn	r2, #2
   187ec:	bne	18964 <__assert_fail@plt+0x6fa8>
   187f0:	ldr	r2, [sp, #56]	; 0x38
   187f4:	ldr	r3, [sp, #28]
   187f8:	add	r3, r3, r2
   187fc:	ldr	r2, [sp, #36]	; 0x24
   18800:	cmp	r2, r3
   18804:	bls	189f4 <__assert_fail@plt+0x7038>
   18808:	ldr	r3, [sp, #80]	; 0x50
   1880c:	ldr	r2, [sp, #56]	; 0x38
   18810:	ldrb	r5, [r3, r2]
   18814:	cmp	r5, #0
   18818:	bne	18954 <__assert_fail@plt+0x6f98>
   1881c:	ldr	r3, [sp, #56]	; 0x38
   18820:	cmp	r3, #1
   18824:	bls	1822c <__assert_fail@plt+0x6870>
   18828:	ldr	r2, [sp, #56]	; 0x38
   1882c:	ldr	r3, [sp, #28]
   18830:	mov	fp, #0
   18834:	add	r3, r3, r2
   18838:	ldr	r2, [sp, #24]
   1883c:	str	r3, [sp, #52]	; 0x34
   18840:	eor	r3, r5, #1
   18844:	and	r3, r3, r2
   18848:	mov	ip, #92	; 0x5c
   1884c:	uxtb	r3, r3
   18850:	mov	r2, #39	; 0x27
   18854:	cmp	r3, #0
   18858:	beq	189fc <__assert_fail@plt+0x7040>
   1885c:	cmp	r6, #0
   18860:	bne	1814c <__assert_fail@plt+0x6790>
   18864:	ldr	r1, [sp, #48]	; 0x30
   18868:	eor	r1, r1, #1
   1886c:	cmp	sl, #2
   18870:	movne	r1, #0
   18874:	andeq	r1, r1, #1
   18878:	cmp	r1, #0
   1887c:	beq	188ac <__assert_fail@plt+0x6ef0>
   18880:	add	r0, r4, #1
   18884:	cmp	r9, r4
   18888:	strbhi	r2, [r8, r4]
   1888c:	cmp	r9, r0
   18890:	movhi	lr, #36	; 0x24
   18894:	strbhi	lr, [r8, r0]
   18898:	add	r0, r4, #2
   1889c:	add	r4, r4, #3
   188a0:	cmp	r9, r0
   188a4:	strbhi	r2, [r8, r0]
   188a8:	str	r1, [sp, #48]	; 0x30
   188ac:	add	r0, r4, #1
   188b0:	cmp	r9, r4
   188b4:	strbhi	ip, [r8, r4]
   188b8:	cmp	r9, r0
   188bc:	lsrhi	r1, r7, #6
   188c0:	addhi	r1, r1, #48	; 0x30
   188c4:	strbhi	r1, [r8, r0]
   188c8:	add	r0, r4, #2
   188cc:	cmp	r9, r0
   188d0:	lsrhi	r1, r7, #3
   188d4:	and	r7, r7, #7
   188d8:	andhi	r1, r1, #7
   188dc:	add	r4, r4, #3
   188e0:	add	r7, r7, #48	; 0x30
   188e4:	mov	fp, r3
   188e8:	addhi	r1, r1, #48	; 0x30
   188ec:	strbhi	r1, [r8, r0]
   188f0:	ldr	r1, [sp, #28]
   188f4:	ldr	r0, [sp, #52]	; 0x34
   188f8:	add	r1, r1, #1
   188fc:	cmp	r0, r1
   18900:	bls	186b4 <__assert_fail@plt+0x6cf8>
   18904:	ldr	lr, [sp, #48]	; 0x30
   18908:	eor	r0, fp, #1
   1890c:	and	r0, r0, lr
   18910:	tst	r0, #255	; 0xff
   18914:	beq	18938 <__assert_fail@plt+0x6f7c>
   18918:	add	r0, r4, #1
   1891c:	cmp	r9, r4
   18920:	strbhi	r2, [r8, r4]
   18924:	cmp	r9, r0
   18928:	add	r4, r4, #2
   1892c:	strbhi	r2, [r8, r0]
   18930:	mov	r0, #0
   18934:	str	r0, [sp, #48]	; 0x30
   18938:	ldr	r0, [sp, #44]	; 0x2c
   1893c:	cmp	r9, r4
   18940:	strbhi	r7, [r8, r4]
   18944:	str	r1, [sp, #28]
   18948:	add	r4, r4, #1
   1894c:	ldrb	r7, [r0, r1]
   18950:	b	18854 <__assert_fail@plt+0x6e98>
   18954:	ldr	r3, [sp, #56]	; 0x38
   18958:	add	r3, r3, #1
   1895c:	str	r3, [sp, #56]	; 0x38
   18960:	b	187f0 <__assert_fail@plt+0x6e34>
   18964:	cmp	sl, #2
   18968:	movne	r3, #0
   1896c:	andeq	r3, r6, #1
   18970:	cmp	r3, #0
   18974:	movne	r1, #1
   18978:	bne	189d4 <__assert_fail@plt+0x7018>
   1897c:	ldr	r0, [sp, #92]	; 0x5c
   18980:	str	r2, [sp, #84]	; 0x54
   18984:	bl	11674 <iswprint@plt>
   18988:	ldr	r3, [sp, #56]	; 0x38
   1898c:	ldr	r2, [sp, #84]	; 0x54
   18990:	add	r3, r3, r2
   18994:	str	r3, [sp, #56]	; 0x38
   18998:	cmp	r0, #0
   1899c:	add	r0, sp, #96	; 0x60
   189a0:	moveq	r5, #0
   189a4:	bl	11614 <mbsinit@plt>
   189a8:	cmp	r0, #0
   189ac:	beq	187ac <__assert_fail@plt+0x6df0>
   189b0:	b	1881c <__assert_fail@plt+0x6e60>
   189b4:	ldrb	r3, [fp, r1]
   189b8:	cmp	r3, #94	; 0x5e
   189bc:	beq	1827c <__assert_fail@plt+0x68c0>
   189c0:	bhi	189e0 <__assert_fail@plt+0x7024>
   189c4:	sub	r3, r3, #91	; 0x5b
   189c8:	cmp	r3, #1
   189cc:	bls	1827c <__assert_fail@plt+0x68c0>
   189d0:	add	r1, r1, #1
   189d4:	cmp	r1, r2
   189d8:	bne	189b4 <__assert_fail@plt+0x6ff8>
   189dc:	b	1897c <__assert_fail@plt+0x6fc0>
   189e0:	cmp	r3, #96	; 0x60
   189e4:	beq	1827c <__assert_fail@plt+0x68c0>
   189e8:	cmp	r3, #124	; 0x7c
   189ec:	bne	189d0 <__assert_fail@plt+0x7014>
   189f0:	b	1827c <__assert_fail@plt+0x68c0>
   189f4:	mov	r5, #0
   189f8:	b	1881c <__assert_fail@plt+0x6e60>
   189fc:	ldr	r1, [sp, #64]	; 0x40
   18a00:	cmp	r1, #0
   18a04:	beq	188f0 <__assert_fail@plt+0x6f34>
   18a08:	cmp	r9, r4
   18a0c:	strbhi	ip, [r8, r4]
   18a10:	str	r3, [sp, #64]	; 0x40
   18a14:	add	r4, r4, #1
   18a18:	b	188f0 <__assert_fail@plt+0x6f34>
   18a1c:	mov	r5, fp
   18a20:	ldr	fp, [sp, #24]
   18a24:	mov	r7, #48	; 0x30
   18a28:	b	185c4 <__assert_fail@plt+0x6c08>
   18a2c:	mov	r5, #0
   18a30:	mov	fp, r5
   18a34:	b	185c4 <__assert_fail@plt+0x6c08>
   18a38:	ldr	r3, [sp, #36]	; 0x24
   18a3c:	ldr	r2, [sp, #28]
   18a40:	subs	r3, r3, r2
   18a44:	movne	r3, #1
   18a48:	b	17ec0 <__assert_fail@plt+0x6504>
   18a4c:	ldr	r3, [sp, #60]	; 0x3c
   18a50:	clz	r7, r9
   18a54:	cmp	r3, #0
   18a58:	lsr	r7, r7, #5
   18a5c:	moveq	r7, #0
   18a60:	cmp	r7, #0
   18a64:	mov	r5, r3
   18a68:	bne	17e20 <__assert_fail@plt+0x6464>
   18a6c:	ldr	r3, [sp, #68]	; 0x44
   18a70:	ldr	r2, [sp, #40]	; 0x28
   18a74:	cmp	r2, #0
   18a78:	moveq	r3, #0
   18a7c:	andne	r3, r3, #1
   18a80:	cmp	r3, #0
   18a84:	movne	r3, r2
   18a88:	subne	r2, r3, #1
   18a8c:	bne	18abc <__assert_fail@plt+0x7100>
   18a90:	cmp	r9, r4
   18a94:	movhi	r3, #0
   18a98:	strbhi	r3, [r8, r4]
   18a9c:	mov	r0, r4
   18aa0:	add	sp, sp, #108	; 0x6c
   18aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18aa8:	mov	r3, r2
   18aac:	b	18a70 <__assert_fail@plt+0x70b4>
   18ab0:	cmp	r9, r4
   18ab4:	strbhi	r3, [r8, r4]
   18ab8:	add	r4, r4, #1
   18abc:	ldrb	r3, [r2, #1]!
   18ac0:	cmp	r3, #0
   18ac4:	bne	18ab0 <__assert_fail@plt+0x70f4>
   18ac8:	b	18a90 <__assert_fail@plt+0x70d4>
   18acc:	ldr	r3, [pc, #32]	; 18af4 <__assert_fail@plt+0x7138>
   18ad0:	mov	r6, #1
   18ad4:	str	r6, [sp, #24]
   18ad8:	str	r6, [sp, #32]
   18adc:	str	r3, [sp, #40]	; 0x28
   18ae0:	mov	r4, #0
   18ae4:	mov	sl, #5
   18ae8:	b	17e90 <__assert_fail@plt+0x64d4>
   18aec:	mov	r6, #1
   18af0:	b	18084 <__assert_fail@plt+0x66c8>
   18af4:	andeq	r8, r2, pc, ror #20
   18af8:	andeq	r8, r2, r1, ror sl
   18afc:	andeq	r8, r2, lr, ror r2
   18b00:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   18b04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b08:	sub	sp, sp, #52	; 0x34
   18b0c:	mov	r6, r0
   18b10:	mov	r5, r3
   18b14:	mov	r8, r1
   18b18:	mov	r9, r2
   18b1c:	bl	117dc <__errno_location@plt>
   18b20:	ldr	r7, [pc, #380]	; 18ca4 <__assert_fail@plt+0x72e8>
   18b24:	cmn	r6, #-2147483647	; 0x80000001
   18b28:	ldr	r4, [r7]
   18b2c:	ldr	r3, [r0]
   18b30:	str	r0, [sp, #24]
   18b34:	str	r3, [sp, #32]
   18b38:	movne	r3, #0
   18b3c:	moveq	r3, #1
   18b40:	orrs	r3, r3, r6, lsr #31
   18b44:	beq	18b4c <__assert_fail@plt+0x7190>
   18b48:	bl	11980 <abort@plt>
   18b4c:	ldr	r2, [r7, #4]
   18b50:	cmp	r6, r2
   18b54:	blt	18bc4 <__assert_fail@plt+0x7208>
   18b58:	add	r1, sp, #48	; 0x30
   18b5c:	add	sl, r7, #8
   18b60:	str	r2, [r1, #-4]!
   18b64:	cmp	r4, sl
   18b68:	mov	r3, #8
   18b6c:	sub	r2, r6, r2
   18b70:	movne	r0, r4
   18b74:	str	r3, [sp]
   18b78:	add	r2, r2, #1
   18b7c:	mvn	r3, #-2147483648	; 0x80000000
   18b80:	moveq	r0, #0
   18b84:	bl	19870 <__assert_fail@plt+0x7eb4>
   18b88:	cmp	r4, sl
   18b8c:	ldr	r2, [sp, #44]	; 0x2c
   18b90:	mov	fp, r0
   18b94:	str	r0, [r7]
   18b98:	ldmeq	r4, {r0, r1}
   18b9c:	mov	r4, fp
   18ba0:	stmeq	fp, {r0, r1}
   18ba4:	ldr	r0, [r7, #4]
   18ba8:	mov	r1, #0
   18bac:	sub	r2, r2, r0
   18bb0:	add	r0, fp, r0, lsl #3
   18bb4:	lsl	r2, r2, #3
   18bb8:	bl	11818 <memset@plt>
   18bbc:	ldr	r3, [sp, #44]	; 0x2c
   18bc0:	str	r3, [r7, #4]
   18bc4:	ldr	r3, [r5, #4]
   18bc8:	add	sl, r4, r6, lsl #3
   18bcc:	orr	r3, r3, #1
   18bd0:	str	r3, [sp, #28]
   18bd4:	add	r3, r5, #8
   18bd8:	str	r3, [sp, #36]	; 0x24
   18bdc:	ldr	r3, [r5, #44]	; 0x2c
   18be0:	ldr	fp, [r4, r6, lsl #3]
   18be4:	ldr	r7, [sl, #4]
   18be8:	str	r3, [sp, #16]
   18bec:	ldr	r3, [r5, #40]	; 0x28
   18bf0:	mov	r2, r8
   18bf4:	str	r3, [sp, #12]
   18bf8:	add	r3, r5, #8
   18bfc:	str	r3, [sp, #8]
   18c00:	ldr	r3, [sp, #28]
   18c04:	mov	r1, fp
   18c08:	str	r3, [sp, #4]
   18c0c:	ldr	r3, [r5]
   18c10:	mov	r0, r7
   18c14:	str	r3, [sp]
   18c18:	mov	r3, r9
   18c1c:	bl	17dd0 <__assert_fail@plt+0x6414>
   18c20:	cmp	fp, r0
   18c24:	bhi	18c8c <__assert_fail@plt+0x72d0>
   18c28:	ldr	r3, [pc, #120]	; 18ca8 <__assert_fail@plt+0x72ec>
   18c2c:	add	fp, r0, #1
   18c30:	cmp	r7, r3
   18c34:	str	fp, [r4, r6, lsl #3]
   18c38:	beq	18c44 <__assert_fail@plt+0x7288>
   18c3c:	mov	r0, r7
   18c40:	bl	1a30c <__assert_fail@plt+0x8950>
   18c44:	mov	r0, fp
   18c48:	bl	19728 <__assert_fail@plt+0x7d6c>
   18c4c:	ldr	r3, [r5, #44]	; 0x2c
   18c50:	mov	r2, r8
   18c54:	mov	r1, fp
   18c58:	str	r0, [sl, #4]
   18c5c:	str	r3, [sp, #16]
   18c60:	ldr	r3, [r5, #40]	; 0x28
   18c64:	mov	r7, r0
   18c68:	str	r3, [sp, #12]
   18c6c:	add	r3, r5, #8
   18c70:	str	r3, [sp, #8]
   18c74:	ldr	r3, [sp, #28]
   18c78:	str	r3, [sp, #4]
   18c7c:	ldr	r3, [r5]
   18c80:	str	r3, [sp]
   18c84:	mov	r3, r9
   18c88:	bl	17dd0 <__assert_fail@plt+0x6414>
   18c8c:	ldr	r3, [sp, #24]
   18c90:	ldr	r2, [sp, #32]
   18c94:	mov	r0, r7
   18c98:	str	r2, [r3]
   18c9c:	add	sp, sp, #52	; 0x34
   18ca0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ca4:	andeq	sl, r3, r4, asr #3
   18ca8:	andeq	sl, r3, r4, lsr #5
   18cac:	push	{r4, r5, r6, lr}
   18cb0:	mov	r5, r0
   18cb4:	bl	117dc <__errno_location@plt>
   18cb8:	cmp	r5, #0
   18cbc:	mov	r1, #48	; 0x30
   18cc0:	ldr	r6, [r0]
   18cc4:	mov	r4, r0
   18cc8:	ldr	r0, [pc, #12]	; 18cdc <__assert_fail@plt+0x7320>
   18ccc:	movne	r0, r5
   18cd0:	bl	19b04 <__assert_fail@plt+0x8148>
   18cd4:	str	r6, [r4]
   18cd8:	pop	{r4, r5, r6, pc}
   18cdc:	andeq	sl, r3, r4, lsr #7
   18ce0:	ldr	r3, [pc, #12]	; 18cf4 <__assert_fail@plt+0x7338>
   18ce4:	cmp	r0, #0
   18ce8:	moveq	r0, r3
   18cec:	ldr	r0, [r0]
   18cf0:	bx	lr
   18cf4:	andeq	sl, r3, r4, lsr #7
   18cf8:	ldr	r3, [pc, #12]	; 18d0c <__assert_fail@plt+0x7350>
   18cfc:	cmp	r0, #0
   18d00:	moveq	r0, r3
   18d04:	str	r1, [r0]
   18d08:	bx	lr
   18d0c:	andeq	sl, r3, r4, lsr #7
   18d10:	ldr	r3, [pc, #52]	; 18d4c <__assert_fail@plt+0x7390>
   18d14:	cmp	r0, #0
   18d18:	moveq	r0, r3
   18d1c:	add	r3, r0, #8
   18d20:	push	{lr}		; (str lr, [sp, #-4]!)
   18d24:	lsr	lr, r1, #5
   18d28:	and	r1, r1, #31
   18d2c:	ldr	ip, [r3, lr, lsl #2]
   18d30:	lsr	r0, ip, r1
   18d34:	eor	r2, r2, r0
   18d38:	and	r2, r2, #1
   18d3c:	and	r0, r0, #1
   18d40:	eor	r1, ip, r2, lsl r1
   18d44:	str	r1, [r3, lr, lsl #2]
   18d48:	pop	{pc}		; (ldr pc, [sp], #4)
   18d4c:	andeq	sl, r3, r4, lsr #7
   18d50:	ldr	r3, [pc, #16]	; 18d68 <__assert_fail@plt+0x73ac>
   18d54:	cmp	r0, #0
   18d58:	movne	r3, r0
   18d5c:	ldr	r0, [r3, #4]
   18d60:	str	r1, [r3, #4]
   18d64:	bx	lr
   18d68:	andeq	sl, r3, r4, lsr #7
   18d6c:	ldr	r3, [pc, #44]	; 18da0 <__assert_fail@plt+0x73e4>
   18d70:	cmp	r0, #0
   18d74:	moveq	r0, r3
   18d78:	mov	r3, #10
   18d7c:	cmp	r2, #0
   18d80:	cmpne	r1, #0
   18d84:	str	r3, [r0]
   18d88:	bne	18d94 <__assert_fail@plt+0x73d8>
   18d8c:	push	{r4, lr}
   18d90:	bl	11980 <abort@plt>
   18d94:	str	r1, [r0, #40]	; 0x28
   18d98:	str	r2, [r0, #44]	; 0x2c
   18d9c:	bx	lr
   18da0:	andeq	sl, r3, r4, lsr #7
   18da4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18da8:	sub	sp, sp, #24
   18dac:	mov	sl, r3
   18db0:	ldr	r4, [sp, #56]	; 0x38
   18db4:	ldr	r3, [pc, #100]	; 18e20 <__assert_fail@plt+0x7464>
   18db8:	cmp	r4, #0
   18dbc:	moveq	r4, r3
   18dc0:	mov	r7, r0
   18dc4:	mov	r8, r1
   18dc8:	mov	r9, r2
   18dcc:	bl	117dc <__errno_location@plt>
   18dd0:	ldr	r3, [r4, #44]	; 0x2c
   18dd4:	mov	r2, r9
   18dd8:	mov	r1, r8
   18ddc:	ldr	r6, [r0]
   18de0:	str	r3, [sp, #16]
   18de4:	ldr	r3, [r4, #40]	; 0x28
   18de8:	mov	r5, r0
   18dec:	str	r3, [sp, #12]
   18df0:	add	r3, r4, #8
   18df4:	str	r3, [sp, #8]
   18df8:	ldr	r3, [r4, #4]
   18dfc:	mov	r0, r7
   18e00:	str	r3, [sp, #4]
   18e04:	ldr	r3, [r4]
   18e08:	str	r3, [sp]
   18e0c:	mov	r3, sl
   18e10:	bl	17dd0 <__assert_fail@plt+0x6414>
   18e14:	str	r6, [r5]
   18e18:	add	sp, sp, #24
   18e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e20:	andeq	sl, r3, r4, lsr #7
   18e24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e28:	cmp	r3, #0
   18e2c:	sub	sp, sp, #44	; 0x2c
   18e30:	ldr	r4, [pc, #188]	; 18ef4 <__assert_fail@plt+0x7538>
   18e34:	mov	r6, r2
   18e38:	movne	r4, r3
   18e3c:	mov	sl, r1
   18e40:	mov	r9, r0
   18e44:	bl	117dc <__errno_location@plt>
   18e48:	ldr	r5, [r4, #4]
   18e4c:	add	fp, r4, #8
   18e50:	cmp	r6, #0
   18e54:	orreq	r5, r5, #1
   18e58:	mov	r1, #0
   18e5c:	mov	r2, r9
   18e60:	ldr	r3, [r0]
   18e64:	mov	r8, r0
   18e68:	str	r3, [sp, #28]
   18e6c:	ldr	r3, [r4, #44]	; 0x2c
   18e70:	mov	r0, r1
   18e74:	str	r3, [sp, #16]
   18e78:	ldr	r3, [r4, #40]	; 0x28
   18e7c:	stmib	sp, {r5, fp}
   18e80:	str	r3, [sp, #12]
   18e84:	ldr	r3, [r4]
   18e88:	str	r3, [sp]
   18e8c:	mov	r3, sl
   18e90:	bl	17dd0 <__assert_fail@plt+0x6414>
   18e94:	add	r1, r0, #1
   18e98:	mov	r7, r0
   18e9c:	mov	r0, r1
   18ea0:	str	r1, [sp, #36]	; 0x24
   18ea4:	bl	19728 <__assert_fail@plt+0x7d6c>
   18ea8:	ldr	r3, [r4, #44]	; 0x2c
   18eac:	mov	r2, r9
   18eb0:	str	r3, [sp, #16]
   18eb4:	ldr	r3, [r4, #40]	; 0x28
   18eb8:	stmib	sp, {r5, fp}
   18ebc:	str	r3, [sp, #12]
   18ec0:	ldr	r3, [r4]
   18ec4:	ldr	r1, [sp, #36]	; 0x24
   18ec8:	str	r3, [sp]
   18ecc:	mov	r3, sl
   18ed0:	str	r0, [sp, #32]
   18ed4:	bl	17dd0 <__assert_fail@plt+0x6414>
   18ed8:	ldr	r3, [sp, #28]
   18edc:	cmp	r6, #0
   18ee0:	str	r3, [r8]
   18ee4:	ldr	r0, [sp, #32]
   18ee8:	strne	r7, [r6]
   18eec:	add	sp, sp, #44	; 0x2c
   18ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ef4:	andeq	sl, r3, r4, lsr #7
   18ef8:	mov	r3, r2
   18efc:	mov	r2, #0
   18f00:	b	18e24 <__assert_fail@plt+0x7468>
   18f04:	push	{r4, r5, r6, r7, r8, lr}
   18f08:	mov	r6, #1
   18f0c:	ldr	r4, [pc, #104]	; 18f7c <__assert_fail@plt+0x75c0>
   18f10:	ldr	r5, [r4]
   18f14:	add	r7, r5, #12
   18f18:	ldr	r3, [r4, #4]
   18f1c:	add	r7, r7, #8
   18f20:	cmp	r6, r3
   18f24:	blt	18f6c <__assert_fail@plt+0x75b0>
   18f28:	ldr	r0, [r5, #4]
   18f2c:	ldr	r6, [pc, #76]	; 18f80 <__assert_fail@plt+0x75c4>
   18f30:	cmp	r0, r6
   18f34:	beq	18f48 <__assert_fail@plt+0x758c>
   18f38:	bl	1a30c <__assert_fail@plt+0x8950>
   18f3c:	mov	r3, #256	; 0x100
   18f40:	str	r3, [r4, #8]
   18f44:	str	r6, [r4, #12]
   18f48:	ldr	r6, [pc, #52]	; 18f84 <__assert_fail@plt+0x75c8>
   18f4c:	cmp	r5, r6
   18f50:	beq	18f60 <__assert_fail@plt+0x75a4>
   18f54:	mov	r0, r5
   18f58:	bl	1a30c <__assert_fail@plt+0x8950>
   18f5c:	str	r6, [r4]
   18f60:	mov	r3, #1
   18f64:	str	r3, [r4, #4]
   18f68:	pop	{r4, r5, r6, r7, r8, pc}
   18f6c:	ldr	r0, [r7, #-8]
   18f70:	bl	1a30c <__assert_fail@plt+0x8950>
   18f74:	add	r6, r6, #1
   18f78:	b	18f18 <__assert_fail@plt+0x755c>
   18f7c:	andeq	sl, r3, r4, asr #3
   18f80:	andeq	sl, r3, r4, lsr #5
   18f84:	andeq	sl, r3, ip, asr #3
   18f88:	ldr	r3, [pc, #4]	; 18f94 <__assert_fail@plt+0x75d8>
   18f8c:	mvn	r2, #0
   18f90:	b	18b04 <__assert_fail@plt+0x7148>
   18f94:	andeq	sl, r3, r4, lsr #7
   18f98:	ldr	r3, [pc]	; 18fa0 <__assert_fail@plt+0x75e4>
   18f9c:	b	18b04 <__assert_fail@plt+0x7148>
   18fa0:	andeq	sl, r3, r4, lsr #7
   18fa4:	mov	r1, r0
   18fa8:	mov	r0, #0
   18fac:	b	18f88 <__assert_fail@plt+0x75cc>
   18fb0:	mov	r2, r1
   18fb4:	mov	r1, r0
   18fb8:	mov	r0, #0
   18fbc:	b	18f98 <__assert_fail@plt+0x75dc>
   18fc0:	push	{r4, r5, lr}
   18fc4:	sub	sp, sp, #52	; 0x34
   18fc8:	mov	r5, r2
   18fcc:	mov	r4, r0
   18fd0:	mov	r0, sp
   18fd4:	bl	17c8c <__assert_fail@plt+0x62d0>
   18fd8:	mov	r3, sp
   18fdc:	mvn	r2, #0
   18fe0:	mov	r1, r5
   18fe4:	mov	r0, r4
   18fe8:	bl	18b04 <__assert_fail@plt+0x7148>
   18fec:	add	sp, sp, #52	; 0x34
   18ff0:	pop	{r4, r5, pc}
   18ff4:	push	{r4, r5, r6, lr}
   18ff8:	sub	sp, sp, #48	; 0x30
   18ffc:	mov	r5, r2
   19000:	mov	r6, r3
   19004:	mov	r4, r0
   19008:	mov	r0, sp
   1900c:	bl	17c8c <__assert_fail@plt+0x62d0>
   19010:	mov	r3, sp
   19014:	mov	r2, r6
   19018:	mov	r1, r5
   1901c:	mov	r0, r4
   19020:	bl	18b04 <__assert_fail@plt+0x7148>
   19024:	add	sp, sp, #48	; 0x30
   19028:	pop	{r4, r5, r6, pc}
   1902c:	mov	r2, r1
   19030:	mov	r1, r0
   19034:	mov	r0, #0
   19038:	b	18fc0 <__assert_fail@plt+0x7604>
   1903c:	mov	r3, r2
   19040:	mov	r2, r1
   19044:	mov	r1, r0
   19048:	mov	r0, #0
   1904c:	b	18ff4 <__assert_fail@plt+0x7638>
   19050:	push	{r4, r5, r6, lr}
   19054:	mov	r4, r0
   19058:	ldr	lr, [pc, #80]	; 190b0 <__assert_fail@plt+0x76f4>
   1905c:	mov	r5, r1
   19060:	mov	r6, r2
   19064:	ldm	lr!, {r0, r1, r2, r3}
   19068:	sub	sp, sp, #48	; 0x30
   1906c:	mov	ip, sp
   19070:	stmia	ip!, {r0, r1, r2, r3}
   19074:	ldm	lr!, {r0, r1, r2, r3}
   19078:	stmia	ip!, {r0, r1, r2, r3}
   1907c:	ldm	lr, {r0, r1, r2, r3}
   19080:	stm	ip, {r0, r1, r2, r3}
   19084:	mov	r1, r6
   19088:	mov	r2, #1
   1908c:	mov	r0, sp
   19090:	bl	18d10 <__assert_fail@plt+0x7354>
   19094:	mov	r3, sp
   19098:	mov	r2, r5
   1909c:	mov	r1, r4
   190a0:	mov	r0, #0
   190a4:	bl	18b04 <__assert_fail@plt+0x7148>
   190a8:	add	sp, sp, #48	; 0x30
   190ac:	pop	{r4, r5, r6, pc}
   190b0:	andeq	sl, r3, r4, lsr #7
   190b4:	mov	r2, r1
   190b8:	mvn	r1, #0
   190bc:	b	19050 <__assert_fail@plt+0x7694>
   190c0:	mov	r1, #58	; 0x3a
   190c4:	b	190b4 <__assert_fail@plt+0x76f8>
   190c8:	mov	r2, #58	; 0x3a
   190cc:	b	19050 <__assert_fail@plt+0x7694>
   190d0:	push	{r4, r5, lr}
   190d4:	sub	sp, sp, #100	; 0x64
   190d8:	mov	r4, r0
   190dc:	mov	r0, sp
   190e0:	mov	r5, r2
   190e4:	bl	17c8c <__assert_fail@plt+0x62d0>
   190e8:	mov	ip, sp
   190ec:	add	lr, sp, #48	; 0x30
   190f0:	ldm	ip!, {r0, r1, r2, r3}
   190f4:	stmia	lr!, {r0, r1, r2, r3}
   190f8:	ldm	ip!, {r0, r1, r2, r3}
   190fc:	stmia	lr!, {r0, r1, r2, r3}
   19100:	ldm	ip, {r0, r1, r2, r3}
   19104:	stm	lr, {r0, r1, r2, r3}
   19108:	mov	r2, #1
   1910c:	mov	r1, #58	; 0x3a
   19110:	add	r0, sp, #48	; 0x30
   19114:	bl	18d10 <__assert_fail@plt+0x7354>
   19118:	add	r3, sp, #48	; 0x30
   1911c:	mvn	r2, #0
   19120:	mov	r1, r5
   19124:	mov	r0, r4
   19128:	bl	18b04 <__assert_fail@plt+0x7148>
   1912c:	add	sp, sp, #100	; 0x64
   19130:	pop	{r4, r5, pc}
   19134:	push	{r4, r5, r6, r7, lr}
   19138:	mov	r4, r0
   1913c:	ldr	lr, [pc, #84]	; 19198 <__assert_fail@plt+0x77dc>
   19140:	mov	r6, r1
   19144:	mov	r7, r2
   19148:	mov	r5, r3
   1914c:	ldm	lr!, {r0, r1, r2, r3}
   19150:	sub	sp, sp, #52	; 0x34
   19154:	mov	ip, sp
   19158:	stmia	ip!, {r0, r1, r2, r3}
   1915c:	ldm	lr!, {r0, r1, r2, r3}
   19160:	stmia	ip!, {r0, r1, r2, r3}
   19164:	ldm	lr, {r0, r1, r2, r3}
   19168:	stm	ip, {r0, r1, r2, r3}
   1916c:	mov	r2, r7
   19170:	mov	r1, r6
   19174:	mov	r0, sp
   19178:	bl	18d6c <__assert_fail@plt+0x73b0>
   1917c:	mov	r3, sp
   19180:	ldr	r2, [sp, #72]	; 0x48
   19184:	mov	r1, r5
   19188:	mov	r0, r4
   1918c:	bl	18b04 <__assert_fail@plt+0x7148>
   19190:	add	sp, sp, #52	; 0x34
   19194:	pop	{r4, r5, r6, r7, pc}
   19198:	andeq	sl, r3, r4, lsr #7
   1919c:	mvn	ip, #0
   191a0:	push	{r0, r1, r2, lr}
   191a4:	str	ip, [sp]
   191a8:	bl	19134 <__assert_fail@plt+0x7778>
   191ac:	add	sp, sp, #12
   191b0:	pop	{pc}		; (ldr pc, [sp], #4)
   191b4:	mov	r3, r2
   191b8:	mov	r2, r1
   191bc:	mov	r1, r0
   191c0:	mov	r0, #0
   191c4:	b	1919c <__assert_fail@plt+0x77e0>
   191c8:	push	{r0, r1, r2, lr}
   191cc:	str	r3, [sp]
   191d0:	mov	r3, r2
   191d4:	mov	r2, r1
   191d8:	mov	r1, r0
   191dc:	mov	r0, #0
   191e0:	bl	19134 <__assert_fail@plt+0x7778>
   191e4:	add	sp, sp, #12
   191e8:	pop	{pc}		; (ldr pc, [sp], #4)
   191ec:	ldr	r3, [pc]	; 191f4 <__assert_fail@plt+0x7838>
   191f0:	b	18b04 <__assert_fail@plt+0x7148>
   191f4:	ldrdeq	sl, [r3], -r4
   191f8:	mov	r2, r1
   191fc:	mov	r1, r0
   19200:	mov	r0, #0
   19204:	b	191ec <__assert_fail@plt+0x7830>
   19208:	mvn	r2, #0
   1920c:	b	191ec <__assert_fail@plt+0x7830>
   19210:	mov	r1, r0
   19214:	mov	r0, #0
   19218:	b	19208 <__assert_fail@plt+0x784c>
   1921c:	push	{r4, r5, r6, lr}
   19220:	mov	r2, r1
   19224:	mov	r4, r1
   19228:	mov	r1, #0
   1922c:	mov	r5, r0
   19230:	bl	1186c <memchr@plt>
   19234:	cmp	r0, #0
   19238:	subne	r4, r0, r5
   1923c:	addne	r4, r4, #1
   19240:	mov	r0, r4
   19244:	pop	{r4, r5, r6, pc}
   19248:	cmp	r0, #2
   1924c:	push	{r4, r5, r6, r7, r8, lr}
   19250:	mov	r4, r0
   19254:	bhi	1927c <__assert_fail@plt+0x78c0>
   19258:	bl	26df0 <__assert_fail@plt+0x15434>
   1925c:	mov	r6, r0
   19260:	bl	117dc <__errno_location@plt>
   19264:	ldr	r7, [r0]
   19268:	mov	r5, r0
   1926c:	mov	r0, r4
   19270:	mov	r4, r6
   19274:	bl	11998 <close@plt>
   19278:	str	r7, [r5]
   1927c:	mov	r0, r4
   19280:	pop	{r4, r5, r6, r7, r8, pc}
   19284:	push	{r4, r5, r6, lr}
   19288:	sub	sp, sp, #32
   1928c:	cmp	r1, #0
   19290:	mov	r5, r0
   19294:	ldr	r4, [sp, #48]	; 0x30
   19298:	ldr	r6, [sp, #52]	; 0x34
   1929c:	beq	19344 <__assert_fail@plt+0x7988>
   192a0:	str	r3, [sp]
   192a4:	mov	r3, r2
   192a8:	mov	r2, r1
   192ac:	ldr	r1, [pc, #736]	; 19594 <__assert_fail@plt+0x7bd8>
   192b0:	bl	117c4 <fprintf@plt>
   192b4:	mov	r2, #5
   192b8:	ldr	r1, [pc, #728]	; 19598 <__assert_fail@plt+0x7bdc>
   192bc:	mov	r0, #0
   192c0:	bl	11638 <dcgettext@plt>
   192c4:	ldr	r3, [pc, #720]	; 1959c <__assert_fail@plt+0x7be0>
   192c8:	ldr	r1, [pc, #720]	; 195a0 <__assert_fail@plt+0x7be4>
   192cc:	mov	r2, r0
   192d0:	mov	r0, r5
   192d4:	bl	117c4 <fprintf@plt>
   192d8:	mov	r1, r5
   192dc:	mov	r0, #10
   192e0:	bl	118d8 <fputc@plt>
   192e4:	mov	r2, #5
   192e8:	ldr	r1, [pc, #692]	; 195a4 <__assert_fail@plt+0x7be8>
   192ec:	mov	r0, #0
   192f0:	bl	11638 <dcgettext@plt>
   192f4:	ldr	r2, [pc, #684]	; 195a8 <__assert_fail@plt+0x7bec>
   192f8:	mov	r1, r0
   192fc:	mov	r0, r5
   19300:	bl	117c4 <fprintf@plt>
   19304:	mov	r1, r5
   19308:	mov	r0, #10
   1930c:	bl	118d8 <fputc@plt>
   19310:	cmp	r6, #9
   19314:	ldrls	pc, [pc, r6, lsl #2]
   19318:	b	19588 <__assert_fail@plt+0x7bcc>
   1931c:	andeq	r9, r1, r0, asr #8
   19320:	andeq	r9, r1, r0, asr r3
   19324:	andeq	r9, r1, r8, ror r3
   19328:	andeq	r9, r1, r0, lsr #7
   1932c:	ldrdeq	r9, [r1], -r0
   19330:	andeq	r9, r1, r8, lsl #8
   19334:	andeq	r9, r1, r8, asr #8
   19338:	andeq	r9, r1, ip, lsl #9
   1933c:	ldrdeq	r9, [r1], -r8
   19340:	andeq	r9, r1, ip, lsr #10
   19344:	ldr	r1, [pc, #608]	; 195ac <__assert_fail@plt+0x7bf0>
   19348:	bl	117c4 <fprintf@plt>
   1934c:	b	192b4 <__assert_fail@plt+0x78f8>
   19350:	mov	r2, #5
   19354:	ldr	r1, [pc, #596]	; 195b0 <__assert_fail@plt+0x7bf4>
   19358:	mov	r0, #0
   1935c:	bl	11638 <dcgettext@plt>
   19360:	ldr	r2, [r4]
   19364:	mov	r1, r0
   19368:	mov	r0, r5
   1936c:	add	sp, sp, #32
   19370:	pop	{r4, r5, r6, lr}
   19374:	b	117c4 <fprintf@plt>
   19378:	mov	r2, #5
   1937c:	ldr	r1, [pc, #560]	; 195b4 <__assert_fail@plt+0x7bf8>
   19380:	mov	r0, #0
   19384:	bl	11638 <dcgettext@plt>
   19388:	ldm	r4, {r2, r3}
   1938c:	mov	r1, r0
   19390:	mov	r0, r5
   19394:	add	sp, sp, #32
   19398:	pop	{r4, r5, r6, lr}
   1939c:	b	117c4 <fprintf@plt>
   193a0:	mov	r2, #5
   193a4:	ldr	r1, [pc, #524]	; 195b8 <__assert_fail@plt+0x7bfc>
   193a8:	mov	r0, #0
   193ac:	bl	11638 <dcgettext@plt>
   193b0:	ldr	r3, [r4, #8]
   193b4:	str	r3, [sp, #48]	; 0x30
   193b8:	ldm	r4, {r2, r3}
   193bc:	mov	r1, r0
   193c0:	mov	r0, r5
   193c4:	add	sp, sp, #32
   193c8:	pop	{r4, r5, r6, lr}
   193cc:	b	117c4 <fprintf@plt>
   193d0:	mov	r2, #5
   193d4:	ldr	r1, [pc, #480]	; 195bc <__assert_fail@plt+0x7c00>
   193d8:	mov	r0, #0
   193dc:	bl	11638 <dcgettext@plt>
   193e0:	ldr	r3, [r4, #12]
   193e4:	str	r3, [sp, #52]	; 0x34
   193e8:	ldr	r3, [r4, #8]
   193ec:	str	r3, [sp, #48]	; 0x30
   193f0:	ldm	r4, {r2, r3}
   193f4:	mov	r1, r0
   193f8:	mov	r0, r5
   193fc:	add	sp, sp, #32
   19400:	pop	{r4, r5, r6, lr}
   19404:	b	117c4 <fprintf@plt>
   19408:	mov	r2, #5
   1940c:	ldr	r1, [pc, #428]	; 195c0 <__assert_fail@plt+0x7c04>
   19410:	mov	r0, #0
   19414:	bl	11638 <dcgettext@plt>
   19418:	ldr	r3, [r4, #16]
   1941c:	str	r3, [sp, #8]
   19420:	ldr	r3, [r4, #12]
   19424:	str	r3, [sp, #4]
   19428:	ldr	r3, [r4, #8]
   1942c:	str	r3, [sp]
   19430:	ldm	r4, {r2, r3}
   19434:	mov	r1, r0
   19438:	mov	r0, r5
   1943c:	bl	117c4 <fprintf@plt>
   19440:	add	sp, sp, #32
   19444:	pop	{r4, r5, r6, pc}
   19448:	mov	r2, #5
   1944c:	ldr	r1, [pc, #368]	; 195c4 <__assert_fail@plt+0x7c08>
   19450:	mov	r0, #0
   19454:	bl	11638 <dcgettext@plt>
   19458:	ldr	r3, [r4, #20]
   1945c:	str	r3, [sp, #12]
   19460:	ldr	r3, [r4, #16]
   19464:	str	r3, [sp, #8]
   19468:	ldr	r3, [r4, #12]
   1946c:	str	r3, [sp, #4]
   19470:	ldr	r3, [r4, #8]
   19474:	str	r3, [sp]
   19478:	ldm	r4, {r2, r3}
   1947c:	mov	r1, r0
   19480:	mov	r0, r5
   19484:	bl	117c4 <fprintf@plt>
   19488:	b	19440 <__assert_fail@plt+0x7a84>
   1948c:	mov	r2, #5
   19490:	ldr	r1, [pc, #304]	; 195c8 <__assert_fail@plt+0x7c0c>
   19494:	mov	r0, #0
   19498:	bl	11638 <dcgettext@plt>
   1949c:	ldr	r3, [r4, #24]
   194a0:	str	r3, [sp, #16]
   194a4:	ldr	r3, [r4, #20]
   194a8:	str	r3, [sp, #12]
   194ac:	ldr	r3, [r4, #16]
   194b0:	str	r3, [sp, #8]
   194b4:	ldr	r3, [r4, #12]
   194b8:	str	r3, [sp, #4]
   194bc:	ldr	r3, [r4, #8]
   194c0:	str	r3, [sp]
   194c4:	ldm	r4, {r2, r3}
   194c8:	mov	r1, r0
   194cc:	mov	r0, r5
   194d0:	bl	117c4 <fprintf@plt>
   194d4:	b	19440 <__assert_fail@plt+0x7a84>
   194d8:	mov	r2, #5
   194dc:	ldr	r1, [pc, #232]	; 195cc <__assert_fail@plt+0x7c10>
   194e0:	mov	r0, #0
   194e4:	bl	11638 <dcgettext@plt>
   194e8:	ldr	r3, [r4, #28]
   194ec:	str	r3, [sp, #20]
   194f0:	ldr	r3, [r4, #24]
   194f4:	str	r3, [sp, #16]
   194f8:	ldr	r3, [r4, #20]
   194fc:	str	r3, [sp, #12]
   19500:	ldr	r3, [r4, #16]
   19504:	str	r3, [sp, #8]
   19508:	ldr	r3, [r4, #12]
   1950c:	str	r3, [sp, #4]
   19510:	ldr	r3, [r4, #8]
   19514:	str	r3, [sp]
   19518:	ldm	r4, {r2, r3}
   1951c:	mov	r1, r0
   19520:	mov	r0, r5
   19524:	bl	117c4 <fprintf@plt>
   19528:	b	19440 <__assert_fail@plt+0x7a84>
   1952c:	ldr	r1, [pc, #156]	; 195d0 <__assert_fail@plt+0x7c14>
   19530:	mov	r2, #5
   19534:	mov	r0, #0
   19538:	bl	11638 <dcgettext@plt>
   1953c:	ldr	r3, [r4, #32]
   19540:	str	r3, [sp, #24]
   19544:	ldr	r3, [r4, #28]
   19548:	str	r3, [sp, #20]
   1954c:	ldr	r3, [r4, #24]
   19550:	str	r3, [sp, #16]
   19554:	ldr	r3, [r4, #20]
   19558:	str	r3, [sp, #12]
   1955c:	ldr	r3, [r4, #16]
   19560:	str	r3, [sp, #8]
   19564:	ldr	r3, [r4, #12]
   19568:	str	r3, [sp, #4]
   1956c:	ldr	r3, [r4, #8]
   19570:	str	r3, [sp]
   19574:	ldm	r4, {r2, r3}
   19578:	mov	r1, r0
   1957c:	mov	r0, r5
   19580:	bl	117c4 <fprintf@plt>
   19584:	b	19440 <__assert_fail@plt+0x7a84>
   19588:	mov	r2, #5
   1958c:	ldr	r1, [pc, #64]	; 195d4 <__assert_fail@plt+0x7c18>
   19590:	b	19534 <__assert_fail@plt+0x7b78>
   19594:			; <UNDEFINED> instruction: 0x00028abf
   19598:	ldrdeq	r8, [r2], -r2
   1959c:	andeq	r0, r0, r6, ror #15
   195a0:	andeq	r8, r2, sl, lsl #27
   195a4:	ldrdeq	r8, [r2], -r6
   195a8:	andeq	r8, r2, r1, lsl #23
   195ac:	andeq	r8, r2, fp, asr #21
   195b0:	andeq	r8, r2, r3, lsr #23
   195b4:			; <UNDEFINED> instruction: 0x00028bb3
   195b8:	andeq	r8, r2, sl, asr #23
   195bc:	andeq	r8, r2, r6, ror #23
   195c0:	andeq	r8, r2, r6, lsl #24
   195c4:	andeq	r8, r2, sl, lsr #24
   195c8:	andeq	r8, r2, r2, asr ip
   195cc:	andeq	r8, r2, lr, ror ip
   195d0:	andeq	r8, r2, lr, lsr #25
   195d4:	andeq	r8, r2, r2, ror #25
   195d8:	push	{r0, r1, r4, lr}
   195dc:	mov	ip, #0
   195e0:	ldr	lr, [sp, #16]
   195e4:	ldr	r4, [lr, ip, lsl #2]
   195e8:	cmp	r4, #0
   195ec:	bne	19604 <__assert_fail@plt+0x7c48>
   195f0:	str	ip, [sp, #4]
   195f4:	str	lr, [sp]
   195f8:	bl	19284 <__assert_fail@plt+0x78c8>
   195fc:	add	sp, sp, #8
   19600:	pop	{r4, pc}
   19604:	add	ip, ip, #1
   19608:	b	195e4 <__assert_fail@plt+0x7c28>
   1960c:	push	{r4, r5, lr}
   19610:	sub	sp, sp, #52	; 0x34
   19614:	mov	ip, #0
   19618:	ldr	r5, [sp, #64]	; 0x40
   1961c:	add	lr, sp, #8
   19620:	ldr	r4, [r5, ip, lsl #2]
   19624:	cmp	r4, #0
   19628:	str	r4, [lr, ip, lsl #2]
   1962c:	beq	1963c <__assert_fail@plt+0x7c80>
   19630:	add	ip, ip, #1
   19634:	cmp	ip, #10
   19638:	bne	19620 <__assert_fail@plt+0x7c64>
   1963c:	str	ip, [sp, #4]
   19640:	str	lr, [sp]
   19644:	bl	19284 <__assert_fail@plt+0x78c8>
   19648:	add	sp, sp, #52	; 0x34
   1964c:	pop	{r4, r5, pc}
   19650:	push	{r3}		; (str r3, [sp, #-4]!)
   19654:	push	{r0, r1, r2, r3, lr}
   19658:	add	r3, sp, #24
   1965c:	str	r3, [sp, #12]
   19660:	str	r3, [sp]
   19664:	ldr	r3, [sp, #20]
   19668:	bl	1960c <__assert_fail@plt+0x7c50>
   1966c:	add	sp, sp, #16
   19670:	pop	{lr}		; (ldr lr, [sp], #4)
   19674:	add	sp, sp, #4
   19678:	bx	lr
   1967c:	ldr	r3, [pc, #92]	; 196e0 <__assert_fail@plt+0x7d24>
   19680:	push	{r4, lr}
   19684:	mov	r0, #10
   19688:	ldr	r1, [r3]
   1968c:	bl	118d8 <fputc@plt>
   19690:	mov	r2, #5
   19694:	ldr	r1, [pc, #72]	; 196e4 <__assert_fail@plt+0x7d28>
   19698:	mov	r0, #0
   1969c:	bl	11638 <dcgettext@plt>
   196a0:	ldr	r1, [pc, #64]	; 196e8 <__assert_fail@plt+0x7d2c>
   196a4:	bl	11560 <printf@plt>
   196a8:	mov	r2, #5
   196ac:	ldr	r1, [pc, #56]	; 196ec <__assert_fail@plt+0x7d30>
   196b0:	mov	r0, #0
   196b4:	bl	11638 <dcgettext@plt>
   196b8:	ldr	r2, [pc, #48]	; 196f0 <__assert_fail@plt+0x7d34>
   196bc:	ldr	r1, [pc, #48]	; 196f4 <__assert_fail@plt+0x7d38>
   196c0:	bl	11560 <printf@plt>
   196c4:	ldr	r1, [pc, #44]	; 196f8 <__assert_fail@plt+0x7d3c>
   196c8:	mov	r2, #5
   196cc:	mov	r0, #0
   196d0:	bl	11638 <dcgettext@plt>
   196d4:	ldr	r1, [pc, #32]	; 196fc <__assert_fail@plt+0x7d40>
   196d8:	pop	{r4, lr}
   196dc:	b	11560 <printf@plt>
   196e0:	andeq	sl, r3, ip, lsl r2
   196e4:	andeq	r8, r2, lr, lsl sp
   196e8:	andeq	r8, r2, r5, ror r8
   196ec:	andeq	r8, r2, r2, lsr sp
   196f0:	andeq	r8, r2, lr, asr #16
   196f4:	andeq	r8, r2, r1, lsr #12
   196f8:	andeq	r8, r2, r6, asr #26
   196fc:	andeq	r8, r2, sp, ror #26
   19700:	push	{r4, lr}
   19704:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   19708:	cmp	r0, #0
   1970c:	popne	{r4, pc}
   19710:	bl	19b94 <__assert_fail@plt+0x81d8>
   19714:	push	{r4, lr}
   19718:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   1971c:	cmp	r0, #0
   19720:	popne	{r4, pc}
   19724:	bl	19b94 <__assert_fail@plt+0x81d8>
   19728:	b	19700 <__assert_fail@plt+0x7d44>
   1972c:	push	{r4, r5, r6, lr}
   19730:	mov	r5, r0
   19734:	mov	r4, r1
   19738:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1973c:	cmp	r0, #0
   19740:	popne	{r4, r5, r6, pc}
   19744:	adds	r4, r4, #0
   19748:	movne	r4, #1
   1974c:	cmp	r5, #0
   19750:	orreq	r4, r4, #1
   19754:	cmp	r4, #0
   19758:	popeq	{r4, r5, r6, pc}
   1975c:	bl	19b94 <__assert_fail@plt+0x81d8>
   19760:	push	{r4, lr}
   19764:	cmp	r1, #0
   19768:	orreq	r1, r1, #1
   1976c:	bl	1a484 <__assert_fail@plt+0x8ac8>
   19770:	cmp	r0, #0
   19774:	popne	{r4, pc}
   19778:	bl	19b94 <__assert_fail@plt+0x81d8>
   1977c:	push	{r4, r5, r6, lr}
   19780:	mov	r6, r0
   19784:	mov	r5, r1
   19788:	mov	r4, r2
   1978c:	bl	1a4e0 <__assert_fail@plt+0x8b24>
   19790:	cmp	r0, #0
   19794:	popne	{r4, r5, r6, pc}
   19798:	cmp	r6, #0
   1979c:	beq	197ac <__assert_fail@plt+0x7df0>
   197a0:	cmp	r5, #0
   197a4:	cmpne	r4, #0
   197a8:	popeq	{r4, r5, r6, pc}
   197ac:	bl	19b94 <__assert_fail@plt+0x81d8>
   197b0:	b	1977c <__assert_fail@plt+0x7dc0>
   197b4:	cmp	r2, #0
   197b8:	cmpne	r1, #0
   197bc:	moveq	r2, #1
   197c0:	moveq	r1, r2
   197c4:	push	{r4, lr}
   197c8:	bl	1a4e0 <__assert_fail@plt+0x8b24>
   197cc:	cmp	r0, #0
   197d0:	popne	{r4, pc}
   197d4:	bl	19b94 <__assert_fail@plt+0x81d8>
   197d8:	mov	r2, r1
   197dc:	mov	r1, r0
   197e0:	mov	r0, #0
   197e4:	b	1977c <__assert_fail@plt+0x7dc0>
   197e8:	mov	r2, r1
   197ec:	mov	r1, r0
   197f0:	mov	r0, #0
   197f4:	b	197b4 <__assert_fail@plt+0x7df8>
   197f8:	push	{r4, r5, r6, r7, r8, lr}
   197fc:	subs	r7, r0, #0
   19800:	mov	r5, r1
   19804:	mov	r6, r2
   19808:	ldr	r4, [r1]
   1980c:	bne	19848 <__assert_fail@plt+0x7e8c>
   19810:	cmp	r4, #0
   19814:	bne	19830 <__assert_fail@plt+0x7e74>
   19818:	mov	r1, r2
   1981c:	mov	r0, #64	; 0x40
   19820:	bl	26dfc <__assert_fail@plt+0x15440>
   19824:	cmp	r0, #0
   19828:	movne	r4, r0
   1982c:	addeq	r4, r0, #1
   19830:	mov	r2, r6
   19834:	mov	r1, r4
   19838:	mov	r0, r7
   1983c:	bl	1977c <__assert_fail@plt+0x7dc0>
   19840:	str	r4, [r5]
   19844:	pop	{r4, r5, r6, r7, r8, pc}
   19848:	lsr	r2, r4, #1
   1984c:	add	r3, r2, #1
   19850:	mvn	r3, r3
   19854:	cmp	r4, r3
   19858:	addls	r4, r4, #1
   1985c:	addls	r4, r4, r2
   19860:	bls	19830 <__assert_fail@plt+0x7e74>
   19864:	bl	19b94 <__assert_fail@plt+0x81d8>
   19868:	mov	r2, #1
   1986c:	b	197f8 <__assert_fail@plt+0x7e3c>
   19870:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19874:	mov	sl, r0
   19878:	ldr	r8, [r1]
   1987c:	mov	fp, r1
   19880:	mov	r5, r2
   19884:	asrs	r4, r8, #1
   19888:	mov	r9, r3
   1988c:	ldr	r7, [sp, #48]	; 0x30
   19890:	bpl	1992c <__assert_fail@plt+0x7f70>
   19894:	rsb	r2, r4, #-2147483648	; 0x80000000
   19898:	cmp	r8, r2
   1989c:	movge	r2, #0
   198a0:	movlt	r2, #1
   198a4:	mvn	r3, r9
   198a8:	cmp	r2, #0
   198ac:	lsr	r3, r3, #31
   198b0:	addeq	r4, r4, r8
   198b4:	mvnne	r4, #-2147483648	; 0x80000000
   198b8:	mov	r0, r3
   198bc:	cmp	r9, r4
   198c0:	movge	r0, #0
   198c4:	andlt	r0, r0, #1
   198c8:	cmp	r0, #0
   198cc:	str	r3, [sp, #4]
   198d0:	bne	19aa0 <__assert_fail@plt+0x80e4>
   198d4:	cmp	r7, #0
   198d8:	bge	199ec <__assert_fail@plt+0x8030>
   198dc:	cmp	r4, #0
   198e0:	bge	19944 <__assert_fail@plt+0x7f88>
   198e4:	mov	r1, r7
   198e8:	mvn	r0, #-2147483648	; 0x80000000
   198ec:	bl	27008 <__assert_fail@plt+0x1564c>
   198f0:	cmp	r0, r4
   198f4:	movle	r0, #0
   198f8:	movgt	r0, #1
   198fc:	cmp	r0, #0
   19900:	mvnne	r6, #-2147483648	; 0x80000000
   19904:	beq	19954 <__assert_fail@plt+0x7f98>
   19908:	mov	r1, r7
   1990c:	mov	r0, r6
   19910:	bl	27008 <__assert_fail@plt+0x1564c>
   19914:	mov	r1, r7
   19918:	mov	r4, r0
   1991c:	mov	r0, r6
   19920:	bl	27228 <__assert_fail@plt+0x1586c>
   19924:	sub	r1, r6, r1
   19928:	b	19964 <__assert_fail@plt+0x7fa8>
   1992c:	mvn	r2, #-2147483648	; 0x80000000
   19930:	sub	r2, r2, r4
   19934:	cmp	r8, r2
   19938:	movle	r2, #0
   1993c:	movgt	r2, #1
   19940:	b	198a4 <__assert_fail@plt+0x7ee8>
   19944:	cmn	r7, #1
   19948:	movne	r1, r7
   1994c:	movne	r0, #-2147483648	; 0x80000000
   19950:	bne	19ab8 <__assert_fail@plt+0x80fc>
   19954:	mul	r1, r7, r4
   19958:	cmp	r1, #63	; 0x3f
   1995c:	movle	r6, #64	; 0x40
   19960:	ble	19908 <__assert_fail@plt+0x7f4c>
   19964:	cmp	sl, #0
   19968:	sub	r2, r4, r8
   1996c:	streq	sl, [fp]
   19970:	cmp	r2, r5
   19974:	bge	19a48 <__assert_fail@plt+0x808c>
   19978:	cmp	r5, #0
   1997c:	bge	19a14 <__assert_fail@plt+0x8058>
   19980:	rsb	r2, r5, #-2147483648	; 0x80000000
   19984:	cmp	r8, r2
   19988:	movge	r2, #0
   1998c:	movlt	r2, #1
   19990:	cmp	r2, #0
   19994:	bne	199e8 <__assert_fail@plt+0x802c>
   19998:	ldr	r0, [sp, #4]
   1999c:	add	r5, r8, r5
   199a0:	cmp	r9, r5
   199a4:	movge	r0, #0
   199a8:	andlt	r0, r0, #1
   199ac:	cmp	r0, #0
   199b0:	mov	r4, r5
   199b4:	bne	199e8 <__assert_fail@plt+0x802c>
   199b8:	cmp	r7, #0
   199bc:	bge	19a5c <__assert_fail@plt+0x80a0>
   199c0:	cmp	r5, #0
   199c4:	bge	19a34 <__assert_fail@plt+0x8078>
   199c8:	mov	r1, r7
   199cc:	mvn	r0, #-2147483648	; 0x80000000
   199d0:	bl	27008 <__assert_fail@plt+0x1564c>
   199d4:	cmp	r5, r0
   199d8:	movge	r0, #0
   199dc:	movlt	r0, #1
   199e0:	cmp	r0, #0
   199e4:	beq	19a44 <__assert_fail@plt+0x8088>
   199e8:	bl	19b94 <__assert_fail@plt+0x81d8>
   199ec:	beq	19954 <__assert_fail@plt+0x7f98>
   199f0:	cmp	r4, #0
   199f4:	bge	19ab0 <__assert_fail@plt+0x80f4>
   199f8:	cmn	r4, #1
   199fc:	beq	19954 <__assert_fail@plt+0x7f98>
   19a00:	mov	r1, r4
   19a04:	mov	r0, #-2147483648	; 0x80000000
   19a08:	bl	27008 <__assert_fail@plt+0x1564c>
   19a0c:	cmp	r7, r0
   19a10:	b	198f4 <__assert_fail@plt+0x7f38>
   19a14:	cmp	r8, #0
   19a18:	blt	19998 <__assert_fail@plt+0x7fdc>
   19a1c:	mvn	r2, #-2147483648	; 0x80000000
   19a20:	sub	r2, r2, r5
   19a24:	cmp	r8, r2
   19a28:	movle	r2, #0
   19a2c:	movgt	r2, #1
   19a30:	b	19990 <__assert_fail@plt+0x7fd4>
   19a34:	cmn	r7, #1
   19a38:	movne	r1, r7
   19a3c:	movne	r0, #-2147483648	; 0x80000000
   19a40:	bne	19a94 <__assert_fail@plt+0x80d8>
   19a44:	mul	r1, r5, r7
   19a48:	mov	r0, sl
   19a4c:	bl	1972c <__assert_fail@plt+0x7d70>
   19a50:	str	r4, [fp]
   19a54:	add	sp, sp, #12
   19a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a5c:	beq	19a44 <__assert_fail@plt+0x8088>
   19a60:	cmp	r5, #0
   19a64:	movge	r1, r7
   19a68:	mvnge	r0, #-2147483648	; 0x80000000
   19a6c:	bge	19a94 <__assert_fail@plt+0x80d8>
   19a70:	cmn	r5, #1
   19a74:	beq	19a44 <__assert_fail@plt+0x8088>
   19a78:	mov	r1, r5
   19a7c:	mov	r0, #-2147483648	; 0x80000000
   19a80:	bl	27008 <__assert_fail@plt+0x1564c>
   19a84:	cmp	r7, r0
   19a88:	movle	r0, #0
   19a8c:	movgt	r0, #1
   19a90:	b	199e0 <__assert_fail@plt+0x8024>
   19a94:	bl	27008 <__assert_fail@plt+0x1564c>
   19a98:	cmp	r5, r0
   19a9c:	b	19a88 <__assert_fail@plt+0x80cc>
   19aa0:	cmp	r7, #0
   19aa4:	mov	r4, r9
   19aa8:	blt	19944 <__assert_fail@plt+0x7f88>
   19aac:	beq	19954 <__assert_fail@plt+0x7f98>
   19ab0:	mov	r1, r7
   19ab4:	mvn	r0, #-2147483648	; 0x80000000
   19ab8:	bl	27008 <__assert_fail@plt+0x1564c>
   19abc:	cmp	r0, r4
   19ac0:	movge	r0, #0
   19ac4:	movlt	r0, #1
   19ac8:	b	198fc <__assert_fail@plt+0x7f40>
   19acc:	push	{r4, lr}
   19ad0:	bl	1a0b0 <__assert_fail@plt+0x86f4>
   19ad4:	cmp	r0, #0
   19ad8:	popne	{r4, pc}
   19adc:	bl	19b94 <__assert_fail@plt+0x81d8>
   19ae0:	mov	r1, #1
   19ae4:	b	19acc <__assert_fail@plt+0x8110>
   19ae8:	push	{r4, lr}
   19aec:	bl	1a0b0 <__assert_fail@plt+0x86f4>
   19af0:	cmp	r0, #0
   19af4:	popne	{r4, pc}
   19af8:	bl	19b94 <__assert_fail@plt+0x81d8>
   19afc:	mov	r1, #1
   19b00:	b	19ae8 <__assert_fail@plt+0x812c>
   19b04:	push	{r4, r5, r6, lr}
   19b08:	mov	r4, r1
   19b0c:	mov	r5, r0
   19b10:	mov	r0, r1
   19b14:	bl	19700 <__assert_fail@plt+0x7d44>
   19b18:	mov	r2, r4
   19b1c:	mov	r1, r5
   19b20:	pop	{r4, r5, r6, lr}
   19b24:	b	115e4 <memcpy@plt>
   19b28:	push	{r4, r5, r6, lr}
   19b2c:	mov	r4, r1
   19b30:	mov	r5, r0
   19b34:	mov	r0, r1
   19b38:	bl	19714 <__assert_fail@plt+0x7d58>
   19b3c:	mov	r2, r4
   19b40:	mov	r1, r5
   19b44:	pop	{r4, r5, r6, lr}
   19b48:	b	115e4 <memcpy@plt>
   19b4c:	push	{r4, r5, r6, lr}
   19b50:	mov	r5, r0
   19b54:	add	r0, r1, #1
   19b58:	mov	r4, r1
   19b5c:	bl	19714 <__assert_fail@plt+0x7d58>
   19b60:	mov	r2, #0
   19b64:	mov	r1, r5
   19b68:	strb	r2, [r0, r4]
   19b6c:	mov	r2, r4
   19b70:	pop	{r4, r5, r6, lr}
   19b74:	b	115e4 <memcpy@plt>
   19b78:	push	{r4, lr}
   19b7c:	mov	r4, r0
   19b80:	bl	117ac <strlen@plt>
   19b84:	add	r1, r0, #1
   19b88:	mov	r0, r4
   19b8c:	pop	{r4, lr}
   19b90:	b	19b04 <__assert_fail@plt+0x8148>
   19b94:	ldr	r3, [pc, #44]	; 19bc8 <__assert_fail@plt+0x820c>
   19b98:	push	{r4, lr}
   19b9c:	mov	r2, #5
   19ba0:	ldr	r1, [pc, #36]	; 19bcc <__assert_fail@plt+0x8210>
   19ba4:	mov	r0, #0
   19ba8:	ldr	r4, [r3]
   19bac:	bl	11638 <dcgettext@plt>
   19bb0:	ldr	r2, [pc, #24]	; 19bd0 <__assert_fail@plt+0x8214>
   19bb4:	mov	r1, #0
   19bb8:	mov	r3, r0
   19bbc:	mov	r0, r4
   19bc0:	bl	116e0 <error@plt>
   19bc4:	bl	11980 <abort@plt>
   19bc8:	andeq	sl, r3, r0, asr #3
   19bcc:			; <UNDEFINED> instruction: 0x00028db9
   19bd0:	andeq	r9, r2, r4, ror #1
   19bd4:	ldr	ip, [pc, #140]	; 19c68 <__assert_fail@plt+0x82ac>
   19bd8:	push	{r0, r1, r2, r3, r4, lr}
   19bdc:	sub	r0, r0, #1
   19be0:	ldr	r6, [ip]
   19be4:	cmp	r0, #3
   19be8:	ldrls	pc, [pc, r0, lsl #2]
   19bec:	b	19c54 <__assert_fail@plt+0x8298>
   19bf0:	andeq	r9, r1, r8, asr ip
   19bf4:	andeq	r9, r1, r0, lsl #24
   19bf8:	andeq	r9, r1, r0, lsl #24
   19bfc:	andeq	r9, r1, r0, ror #24
   19c00:	ldr	r0, [pc, #100]	; 19c6c <__assert_fail@plt+0x82b0>
   19c04:	cmp	r1, #0
   19c08:	ldr	r4, [pc, #96]	; 19c70 <__assert_fail@plt+0x82b4>
   19c0c:	ldrge	r5, [r3, r1, lsl #4]
   19c10:	sublt	r4, r4, r1
   19c14:	movlt	r3, #0
   19c18:	mov	r1, r0
   19c1c:	strblt	r2, [sp, #12]
   19c20:	mov	r0, #0
   19c24:	mov	r2, #5
   19c28:	strblt	r3, [sp, #13]
   19c2c:	addlt	r5, sp, #12
   19c30:	bl	11638 <dcgettext@plt>
   19c34:	ldr	r3, [sp, #24]
   19c38:	str	r5, [sp]
   19c3c:	str	r3, [sp, #4]
   19c40:	mov	r1, #0
   19c44:	mov	r3, r4
   19c48:	mov	r2, r0
   19c4c:	mov	r0, r6
   19c50:	bl	116e0 <error@plt>
   19c54:	bl	11980 <abort@plt>
   19c58:	ldr	r0, [pc, #20]	; 19c74 <__assert_fail@plt+0x82b8>
   19c5c:	b	19c04 <__assert_fail@plt+0x8248>
   19c60:	ldr	r0, [pc, #16]	; 19c78 <__assert_fail@plt+0x82bc>
   19c64:	b	19c04 <__assert_fail@plt+0x8248>
   19c68:	andeq	sl, r3, r0, asr #3
   19c6c:	andeq	r8, r2, r5, ror #27
   19c70:	andeq	r8, r2, r7, lsr #28
   19c74:	andeq	r8, r2, sl, lsl #28
   19c78:	andeq	r8, r2, sl, asr #27
   19c7c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c80:	mov	r6, #0
   19c84:	mov	r7, r2
   19c88:	asr	r3, r1, #31
   19c8c:	mov	r2, r1
   19c90:	mov	r8, r0
   19c94:	mov	r9, r1
   19c98:	mov	sl, r6
   19c9c:	mov	fp, #1
   19ca0:	strd	r2, [sp]
   19ca4:	subs	r7, r7, #1
   19ca8:	bcs	19cb8 <__assert_fail@plt+0x82fc>
   19cac:	mov	r0, r6
   19cb0:	add	sp, sp, #12
   19cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cb8:	ldrd	r2, [sp]
   19cbc:	mvn	r0, #0
   19cc0:	mvn	r1, #0
   19cc4:	bl	27600 <__assert_fail@plt+0x15c44>
   19cc8:	ldrd	r4, [r8]
   19ccc:	cmp	r1, r5
   19cd0:	cmpeq	r0, r4
   19cd4:	bcs	19cf0 <__assert_fail@plt+0x8334>
   19cd8:	mvn	r3, #0
   19cdc:	mvn	r2, #0
   19ce0:	strd	r2, [r8]
   19ce4:	mov	r3, fp
   19ce8:	orr	r6, r6, r3
   19cec:	b	19ca4 <__assert_fail@plt+0x82e8>
   19cf0:	mul	r3, r9, r5
   19cf4:	ldr	r2, [sp, #4]
   19cf8:	mla	r3, r4, r2, r3
   19cfc:	umull	r4, r5, r9, r4
   19d00:	add	r5, r3, r5
   19d04:	mov	r3, sl
   19d08:	strd	r4, [r8]
   19d0c:	b	19ce8 <__assert_fail@plt+0x832c>
   19d10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d14:	sub	sp, sp, #20
   19d18:	cmp	r2, #36	; 0x24
   19d1c:	ldr	r9, [sp, #56]	; 0x38
   19d20:	bls	19d38 <__assert_fail@plt+0x837c>
   19d24:	ldr	r3, [pc, #880]	; 1a09c <__assert_fail@plt+0x86e0>
   19d28:	mov	r2, #84	; 0x54
   19d2c:	ldr	r1, [pc, #876]	; 1a0a0 <__assert_fail@plt+0x86e4>
   19d30:	ldr	r0, [pc, #876]	; 1a0a4 <__assert_fail@plt+0x86e8>
   19d34:	bl	119bc <__assert_fail@plt>
   19d38:	cmp	r1, #0
   19d3c:	mov	r7, r1
   19d40:	mov	r4, r0
   19d44:	mov	fp, r2
   19d48:	mov	r8, r3
   19d4c:	addeq	r7, sp, #4
   19d50:	bl	117dc <__errno_location@plt>
   19d54:	mov	r3, #0
   19d58:	str	r3, [r0]
   19d5c:	mov	sl, r0
   19d60:	bl	1177c <__ctype_b_loc@plt>
   19d64:	ldrb	r6, [r4]
   19d68:	mov	r3, r4
   19d6c:	ldr	r1, [r0]
   19d70:	lsl	r2, r6, #1
   19d74:	ldrh	r5, [r1, r2]
   19d78:	ands	r5, r5, #8192	; 0x2000
   19d7c:	bne	19d98 <__assert_fail@plt+0x83dc>
   19d80:	cmp	r6, #45	; 0x2d
   19d84:	bne	19da0 <__assert_fail@plt+0x83e4>
   19d88:	mov	r5, #4
   19d8c:	mov	r0, r5
   19d90:	add	sp, sp, #20
   19d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d98:	ldrb	r6, [r3, #1]!
   19d9c:	b	19d70 <__assert_fail@plt+0x83b4>
   19da0:	mov	r2, fp
   19da4:	mov	r1, r7
   19da8:	mov	r0, r4
   19dac:	bl	11860 <strtoumax@plt>
   19db0:	ldr	r6, [r7]
   19db4:	cmp	r4, r6
   19db8:	strd	r0, [sp, #8]
   19dbc:	bne	19e20 <__assert_fail@plt+0x8464>
   19dc0:	cmp	r9, #0
   19dc4:	beq	19d88 <__assert_fail@plt+0x83cc>
   19dc8:	ldrb	r1, [r6]
   19dcc:	cmp	r1, #0
   19dd0:	beq	19d88 <__assert_fail@plt+0x83cc>
   19dd4:	mov	r0, r9
   19dd8:	bl	117b8 <strchr@plt>
   19ddc:	cmp	r0, #0
   19de0:	beq	19d88 <__assert_fail@plt+0x83cc>
   19de4:	mov	r2, #1
   19de8:	mov	r3, #0
   19dec:	strd	r2, [sp, #8]
   19df0:	ldrb	r4, [r6]
   19df4:	cmp	r4, #0
   19df8:	beq	1a040 <__assert_fail@plt+0x8684>
   19dfc:	mov	r1, r4
   19e00:	mov	r0, r9
   19e04:	bl	117b8 <strchr@plt>
   19e08:	cmp	r0, #0
   19e0c:	bne	19e48 <__assert_fail@plt+0x848c>
   19e10:	ldrd	r2, [sp, #8]
   19e14:	orr	r5, r5, #2
   19e18:	strd	r2, [r8]
   19e1c:	b	19d8c <__assert_fail@plt+0x83d0>
   19e20:	ldr	r5, [sl]
   19e24:	cmp	r5, #0
   19e28:	beq	19e38 <__assert_fail@plt+0x847c>
   19e2c:	cmp	r5, #34	; 0x22
   19e30:	bne	19d88 <__assert_fail@plt+0x83cc>
   19e34:	mov	r5, #1
   19e38:	cmp	r9, #0
   19e3c:	bne	19df0 <__assert_fail@plt+0x8434>
   19e40:	strd	r0, [r8]
   19e44:	b	19d8c <__assert_fail@plt+0x83d0>
   19e48:	cmp	r4, #84	; 0x54
   19e4c:	beq	19ea0 <__assert_fail@plt+0x84e4>
   19e50:	bhi	19e88 <__assert_fail@plt+0x84cc>
   19e54:	cmp	r4, #75	; 0x4b
   19e58:	beq	19ea0 <__assert_fail@plt+0x84e4>
   19e5c:	bhi	19e78 <__assert_fail@plt+0x84bc>
   19e60:	cmp	r4, #69	; 0x45
   19e64:	beq	19ea0 <__assert_fail@plt+0x84e4>
   19e68:	cmp	r4, #71	; 0x47
   19e6c:	beq	19ea0 <__assert_fail@plt+0x84e4>
   19e70:	mov	r6, #1
   19e74:	b	19f5c <__assert_fail@plt+0x85a0>
   19e78:	cmp	r4, #77	; 0x4d
   19e7c:	beq	19ea0 <__assert_fail@plt+0x84e4>
   19e80:	cmp	r4, #80	; 0x50
   19e84:	b	19e6c <__assert_fail@plt+0x84b0>
   19e88:	cmp	r4, #103	; 0x67
   19e8c:	beq	19ea0 <__assert_fail@plt+0x84e4>
   19e90:	bhi	19f34 <__assert_fail@plt+0x8578>
   19e94:	sub	r3, r4, #89	; 0x59
   19e98:	cmp	r3, #1
   19e9c:	bhi	19e70 <__assert_fail@plt+0x84b4>
   19ea0:	mov	r1, #48	; 0x30
   19ea4:	mov	r0, r9
   19ea8:	bl	117b8 <strchr@plt>
   19eac:	cmp	r0, #0
   19eb0:	beq	19e70 <__assert_fail@plt+0x84b4>
   19eb4:	ldrb	r3, [r6, #1]
   19eb8:	cmp	r3, #68	; 0x44
   19ebc:	beq	19ed0 <__assert_fail@plt+0x8514>
   19ec0:	cmp	r3, #105	; 0x69
   19ec4:	beq	19f4c <__assert_fail@plt+0x8590>
   19ec8:	cmp	r3, #66	; 0x42
   19ecc:	bne	19e70 <__assert_fail@plt+0x84b4>
   19ed0:	mov	r6, #2
   19ed4:	mov	r1, #1000	; 0x3e8
   19ed8:	cmp	r4, #89	; 0x59
   19edc:	beq	1a08c <__assert_fail@plt+0x86d0>
   19ee0:	bhi	19f84 <__assert_fail@plt+0x85c8>
   19ee4:	cmp	r4, #75	; 0x4b
   19ee8:	beq	19fc4 <__assert_fail@plt+0x8608>
   19eec:	bhi	19f64 <__assert_fail@plt+0x85a8>
   19ef0:	cmp	r4, #69	; 0x45
   19ef4:	beq	1a068 <__assert_fail@plt+0x86ac>
   19ef8:	cmp	r4, #71	; 0x47
   19efc:	beq	1a074 <__assert_fail@plt+0x86b8>
   19f00:	cmp	r4, #66	; 0x42
   19f04:	bne	19e10 <__assert_fail@plt+0x8454>
   19f08:	ldrd	r2, [sp, #8]
   19f0c:	ldr	r1, [pc, #404]	; 1a0a8 <__assert_fail@plt+0x86ec>
   19f10:	mvn	r0, #0
   19f14:	cmp	r3, r1
   19f18:	cmpeq	r2, r0
   19f1c:	bhi	1a014 <__assert_fail@plt+0x8658>
   19f20:	lsl	r3, r3, #10
   19f24:	orr	r3, r3, r2, lsr #22
   19f28:	str	r3, [sp, #12]
   19f2c:	lsl	r2, r2, #10
   19f30:	b	1a05c <__assert_fail@plt+0x86a0>
   19f34:	cmp	r4, #109	; 0x6d
   19f38:	beq	19ea0 <__assert_fail@plt+0x84e4>
   19f3c:	cmp	r4, #116	; 0x74
   19f40:	beq	19ea0 <__assert_fail@plt+0x84e4>
   19f44:	cmp	r4, #107	; 0x6b
   19f48:	b	19e6c <__assert_fail@plt+0x84b0>
   19f4c:	ldrb	r6, [r6, #2]
   19f50:	cmp	r6, #66	; 0x42
   19f54:	movne	r6, #1
   19f58:	moveq	r6, #3
   19f5c:	mov	r1, #1024	; 0x400
   19f60:	b	19ed8 <__assert_fail@plt+0x851c>
   19f64:	cmp	r4, #80	; 0x50
   19f68:	beq	1a07c <__assert_fail@plt+0x86c0>
   19f6c:	cmp	r4, #84	; 0x54
   19f70:	beq	1a084 <__assert_fail@plt+0x86c8>
   19f74:	cmp	r4, #77	; 0x4d
   19f78:	bne	19e10 <__assert_fail@plt+0x8454>
   19f7c:	mov	r2, #2
   19f80:	b	1a06c <__assert_fail@plt+0x86b0>
   19f84:	cmp	r4, #103	; 0x67
   19f88:	beq	1a074 <__assert_fail@plt+0x86b8>
   19f8c:	bhi	19fb0 <__assert_fail@plt+0x85f4>
   19f90:	cmp	r4, #98	; 0x62
   19f94:	beq	19ffc <__assert_fail@plt+0x8640>
   19f98:	cmp	r4, #99	; 0x63
   19f9c:	beq	1a060 <__assert_fail@plt+0x86a4>
   19fa0:	cmp	r4, #90	; 0x5a
   19fa4:	bne	19e10 <__assert_fail@plt+0x8454>
   19fa8:	mov	r2, #7
   19fac:	b	1a06c <__assert_fail@plt+0x86b0>
   19fb0:	cmp	r4, #109	; 0x6d
   19fb4:	beq	19f7c <__assert_fail@plt+0x85c0>
   19fb8:	bhi	19fcc <__assert_fail@plt+0x8610>
   19fbc:	cmp	r4, #107	; 0x6b
   19fc0:	bne	19e10 <__assert_fail@plt+0x8454>
   19fc4:	mov	r2, #1
   19fc8:	b	1a06c <__assert_fail@plt+0x86b0>
   19fcc:	cmp	r4, #116	; 0x74
   19fd0:	beq	1a084 <__assert_fail@plt+0x86c8>
   19fd4:	cmp	r4, #119	; 0x77
   19fd8:	bne	19e10 <__assert_fail@plt+0x8454>
   19fdc:	ldrd	r2, [sp, #8]
   19fe0:	cmp	r2, #0
   19fe4:	sbcs	r1, r3, #0
   19fe8:	blt	1a014 <__assert_fail@plt+0x8658>
   19fec:	adds	r2, r2, r2
   19ff0:	adc	r3, r3, r3
   19ff4:	strd	r2, [sp, #8]
   19ff8:	b	1a060 <__assert_fail@plt+0x86a4>
   19ffc:	ldrd	r2, [sp, #8]
   1a000:	ldr	r1, [pc, #164]	; 1a0ac <__assert_fail@plt+0x86f0>
   1a004:	mvn	r0, #0
   1a008:	cmp	r3, r1
   1a00c:	cmpeq	r2, r0
   1a010:	bls	1a04c <__assert_fail@plt+0x8690>
   1a014:	mvn	r2, #0
   1a018:	mvn	r3, #0
   1a01c:	mov	r0, #1
   1a020:	strd	r2, [sp, #8]
   1a024:	ldr	r3, [r7]
   1a028:	orr	r5, r5, r0
   1a02c:	add	r2, r3, r6
   1a030:	str	r2, [r7]
   1a034:	ldrb	r3, [r3, r6]
   1a038:	cmp	r3, #0
   1a03c:	orrne	r5, r5, #2
   1a040:	ldrd	r2, [sp, #8]
   1a044:	strd	r2, [r8]
   1a048:	b	19d8c <__assert_fail@plt+0x83d0>
   1a04c:	lsl	r3, r3, #9
   1a050:	orr	r3, r3, r2, lsr #23
   1a054:	lsl	r2, r2, #9
   1a058:	str	r3, [sp, #12]
   1a05c:	str	r2, [sp, #8]
   1a060:	mov	r0, #0
   1a064:	b	1a024 <__assert_fail@plt+0x8668>
   1a068:	mov	r2, #6
   1a06c:	add	r0, sp, #8
   1a070:	b	1a094 <__assert_fail@plt+0x86d8>
   1a074:	mov	r2, #3
   1a078:	b	1a06c <__assert_fail@plt+0x86b0>
   1a07c:	mov	r2, #5
   1a080:	b	1a06c <__assert_fail@plt+0x86b0>
   1a084:	mov	r2, #4
   1a088:	b	1a06c <__assert_fail@plt+0x86b0>
   1a08c:	mov	r2, #8
   1a090:	add	r0, sp, r2
   1a094:	bl	19c7c <__assert_fail@plt+0x82c0>
   1a098:	b	1a024 <__assert_fail@plt+0x8668>
   1a09c:	andeq	r8, r2, sl, lsr #28
   1a0a0:	andeq	r8, r2, r5, lsr lr
   1a0a4:	andeq	r8, r2, pc, lsr lr
   1a0a8:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1a0ac:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1a0b0:	cmp	r1, #0
   1a0b4:	cmpne	r0, #0
   1a0b8:	moveq	r1, #1
   1a0bc:	moveq	r0, r1
   1a0c0:	umull	r2, r3, r0, r1
   1a0c4:	adds	r3, r3, #0
   1a0c8:	movne	r3, #1
   1a0cc:	cmp	r2, #0
   1a0d0:	blt	1a0e0 <__assert_fail@plt+0x8724>
   1a0d4:	cmp	r3, #0
   1a0d8:	bne	1a0e0 <__assert_fail@plt+0x8724>
   1a0dc:	b	11518 <calloc@plt>
   1a0e0:	push	{r4, lr}
   1a0e4:	bl	117dc <__errno_location@plt>
   1a0e8:	mov	r3, #12
   1a0ec:	str	r3, [r0]
   1a0f0:	mov	r0, #0
   1a0f4:	pop	{r4, pc}
   1a0f8:	push	{r1, r2, r3}
   1a0fc:	push	{r0, r1, r4, r5, r6, r7, lr}
   1a100:	add	r2, sp, #32
   1a104:	ldr	r1, [sp, #28]
   1a108:	str	r2, [sp, #4]
   1a10c:	cmp	r1, #0
   1a110:	beq	1a154 <__assert_fail@plt+0x8798>
   1a114:	ldr	r3, [pc, #396]	; 1a2a8 <__assert_fail@plt+0x88ec>
   1a118:	mov	r6, r0
   1a11c:	cmp	r1, r3
   1a120:	beq	1a160 <__assert_fail@plt+0x87a4>
   1a124:	cmp	r1, #11
   1a128:	beq	1a144 <__assert_fail@plt+0x8788>
   1a12c:	bgt	1a270 <__assert_fail@plt+0x88b4>
   1a130:	cmp	r1, #3
   1a134:	beq	1a144 <__assert_fail@plt+0x8788>
   1a138:	bgt	1a24c <__assert_fail@plt+0x8890>
   1a13c:	cmp	r1, #1
   1a140:	bne	1a258 <__assert_fail@plt+0x889c>
   1a144:	mov	r0, r6
   1a148:	bl	1189c <fcntl64@plt>
   1a14c:	mov	r4, r0
   1a150:	b	1a20c <__assert_fail@plt+0x8850>
   1a154:	ldr	r2, [sp, #32]
   1a158:	bl	1189c <fcntl64@plt>
   1a15c:	b	1a14c <__assert_fail@plt+0x8790>
   1a160:	ldr	r5, [pc, #324]	; 1a2ac <__assert_fail@plt+0x88f0>
   1a164:	add	r3, sp, #36	; 0x24
   1a168:	str	r3, [sp, #4]
   1a16c:	ldr	r3, [r5]
   1a170:	ldr	r7, [r2]
   1a174:	cmp	r3, #0
   1a178:	mov	r2, r7
   1a17c:	blt	1a220 <__assert_fail@plt+0x8864>
   1a180:	bl	1189c <fcntl64@plt>
   1a184:	subs	r4, r0, #0
   1a188:	bge	1a19c <__assert_fail@plt+0x87e0>
   1a18c:	bl	117dc <__errno_location@plt>
   1a190:	ldr	r3, [r0]
   1a194:	cmp	r3, #22
   1a198:	beq	1a1ec <__assert_fail@plt+0x8830>
   1a19c:	mov	r3, #1
   1a1a0:	str	r3, [r5]
   1a1a4:	cmp	r4, #0
   1a1a8:	blt	1a20c <__assert_fail@plt+0x8850>
   1a1ac:	ldr	r5, [r5]
   1a1b0:	cmn	r5, #1
   1a1b4:	bne	1a20c <__assert_fail@plt+0x8850>
   1a1b8:	mov	r1, #1
   1a1bc:	mov	r0, r4
   1a1c0:	bl	1189c <fcntl64@plt>
   1a1c4:	subs	r2, r0, #0
   1a1c8:	bge	1a230 <__assert_fail@plt+0x8874>
   1a1cc:	bl	117dc <__errno_location@plt>
   1a1d0:	ldr	r7, [r0]
   1a1d4:	mov	r6, r0
   1a1d8:	mov	r0, r4
   1a1dc:	bl	11998 <close@plt>
   1a1e0:	mov	r4, r5
   1a1e4:	str	r7, [r6]
   1a1e8:	b	1a20c <__assert_fail@plt+0x8850>
   1a1ec:	mov	r2, r7
   1a1f0:	mov	r1, #0
   1a1f4:	mov	r0, r6
   1a1f8:	bl	1189c <fcntl64@plt>
   1a1fc:	subs	r4, r0, #0
   1a200:	mvnge	r3, #0
   1a204:	strge	r3, [r5]
   1a208:	bge	1a1ac <__assert_fail@plt+0x87f0>
   1a20c:	mov	r0, r4
   1a210:	add	sp, sp, #8
   1a214:	pop	{r4, r5, r6, r7, lr}
   1a218:	add	sp, sp, #12
   1a21c:	bx	lr
   1a220:	mov	r1, #0
   1a224:	bl	1189c <fcntl64@plt>
   1a228:	mov	r4, r0
   1a22c:	b	1a1a4 <__assert_fail@plt+0x87e8>
   1a230:	orr	r2, r2, #1
   1a234:	mov	r1, #2
   1a238:	mov	r0, r4
   1a23c:	bl	1189c <fcntl64@plt>
   1a240:	cmn	r0, #1
   1a244:	bne	1a20c <__assert_fail@plt+0x8850>
   1a248:	b	1a1cc <__assert_fail@plt+0x8810>
   1a24c:	cmp	r1, #8
   1a250:	beq	1a258 <__assert_fail@plt+0x889c>
   1a254:	bgt	1a268 <__assert_fail@plt+0x88ac>
   1a258:	ldr	r3, [sp, #4]
   1a25c:	mov	r0, r6
   1a260:	ldr	r2, [r3]
   1a264:	b	1a158 <__assert_fail@plt+0x879c>
   1a268:	cmp	r1, #9
   1a26c:	b	1a140 <__assert_fail@plt+0x8784>
   1a270:	ldr	r2, [pc, #56]	; 1a2b0 <__assert_fail@plt+0x88f4>
   1a274:	cmp	r1, r2
   1a278:	bgt	1a290 <__assert_fail@plt+0x88d4>
   1a27c:	cmp	r1, r3
   1a280:	ldrlt	r3, [pc, #44]	; 1a2b4 <__assert_fail@plt+0x88f8>
   1a284:	bge	1a258 <__assert_fail@plt+0x889c>
   1a288:	cmp	r1, r3
   1a28c:	b	1a140 <__assert_fail@plt+0x8784>
   1a290:	ldr	r3, [pc, #32]	; 1a2b8 <__assert_fail@plt+0x88fc>
   1a294:	cmp	r1, r3
   1a298:	beq	1a258 <__assert_fail@plt+0x889c>
   1a29c:	blt	1a144 <__assert_fail@plt+0x8788>
   1a2a0:	add	r3, r3, #1
   1a2a4:	b	1a288 <__assert_fail@plt+0x88cc>
   1a2a8:	andeq	r0, r0, r6, lsl #8
   1a2ac:	ldrdeq	sl, [r3], -r4
   1a2b0:	andeq	r0, r0, r7, lsl #8
   1a2b4:	andeq	r0, r0, r1, lsl #8
   1a2b8:	andeq	r0, r0, r9, lsl #8
   1a2bc:	push	{r0, r1, r4, lr}
   1a2c0:	subs	r4, r0, #0
   1a2c4:	bne	1a2d8 <__assert_fail@plt+0x891c>
   1a2c8:	mov	r0, r4
   1a2cc:	add	sp, sp, #8
   1a2d0:	pop	{r4, lr}
   1a2d4:	b	11578 <fflush@plt>
   1a2d8:	bl	11740 <__freading@plt>
   1a2dc:	cmp	r0, #0
   1a2e0:	beq	1a2c8 <__assert_fail@plt+0x890c>
   1a2e4:	ldr	r3, [r4]
   1a2e8:	tst	r3, #256	; 0x100
   1a2ec:	beq	1a2c8 <__assert_fail@plt+0x890c>
   1a2f0:	mov	r3, #1
   1a2f4:	str	r3, [sp]
   1a2f8:	mov	r2, #0
   1a2fc:	mov	r3, #0
   1a300:	mov	r0, r4
   1a304:	bl	1a360 <__assert_fail@plt+0x89a4>
   1a308:	b	1a2c8 <__assert_fail@plt+0x890c>
   1a30c:	push	{r0, r1, r2, r4, r5, lr}
   1a310:	mov	r5, r0
   1a314:	bl	117dc <__errno_location@plt>
   1a318:	ldr	r3, [r0]
   1a31c:	mov	r4, r0
   1a320:	str	r3, [sp]
   1a324:	str	r3, [sp, #4]
   1a328:	mov	r3, #0
   1a32c:	str	r3, [r0]
   1a330:	mov	r0, r5
   1a334:	bl	115a8 <free@plt>
   1a338:	ldr	r3, [r4]
   1a33c:	add	r2, sp, #8
   1a340:	cmp	r3, #0
   1a344:	moveq	r3, #4
   1a348:	movne	r3, #0
   1a34c:	add	r3, r2, r3
   1a350:	ldr	r3, [r3, #-8]
   1a354:	str	r3, [r4]
   1a358:	add	sp, sp, #12
   1a35c:	pop	{r4, r5, pc}
   1a360:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1a364:	mov	r4, r0
   1a368:	ldmib	r0, {ip, lr}
   1a36c:	ldr	r8, [sp, #32]
   1a370:	cmp	lr, ip
   1a374:	bne	1a3e0 <__assert_fail@plt+0x8a24>
   1a378:	ldr	lr, [r0, #20]
   1a37c:	ldr	ip, [r0, #16]
   1a380:	cmp	lr, ip
   1a384:	bne	1a3e0 <__assert_fail@plt+0x8a24>
   1a388:	ldr	r5, [r0, #36]	; 0x24
   1a38c:	cmp	r5, #0
   1a390:	bne	1a3e0 <__assert_fail@plt+0x8a24>
   1a394:	mov	r6, r2
   1a398:	mov	r7, r3
   1a39c:	bl	11848 <fileno@plt>
   1a3a0:	mov	r2, r6
   1a3a4:	mov	r3, r7
   1a3a8:	str	r8, [sp]
   1a3ac:	bl	11698 <lseek64@plt>
   1a3b0:	mvn	r3, #0
   1a3b4:	mvn	r2, #0
   1a3b8:	cmp	r1, r3
   1a3bc:	cmpeq	r0, r2
   1a3c0:	mvneq	r0, #0
   1a3c4:	ldrne	r3, [r4]
   1a3c8:	strdne	r0, [r4, #80]	; 0x50
   1a3cc:	movne	r0, r5
   1a3d0:	bicne	r3, r3, #16
   1a3d4:	strne	r3, [r4]
   1a3d8:	add	sp, sp, #8
   1a3dc:	pop	{r4, r5, r6, r7, r8, pc}
   1a3e0:	str	r8, [sp, #32]
   1a3e4:	mov	r0, r4
   1a3e8:	add	sp, sp, #8
   1a3ec:	pop	{r4, r5, r6, r7, r8, lr}
   1a3f0:	b	11890 <fseeko64@plt>
   1a3f4:	cmp	r0, #0
   1a3f8:	mov	r3, #0
   1a3fc:	moveq	r0, #1
   1a400:	adds	r3, r3, #0
   1a404:	movne	r3, #1
   1a408:	cmp	r0, #0
   1a40c:	blt	1a41c <__assert_fail@plt+0x8a60>
   1a410:	cmp	r3, #0
   1a414:	bne	1a41c <__assert_fail@plt+0x8a60>
   1a418:	b	1171c <malloc@plt>
   1a41c:	push	{r4, lr}
   1a420:	bl	117dc <__errno_location@plt>
   1a424:	mov	r3, #12
   1a428:	str	r3, [r0]
   1a42c:	mov	r0, #0
   1a430:	pop	{r4, pc}
   1a434:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a438:	subs	r5, r0, #0
   1a43c:	addeq	r5, sp, #4
   1a440:	mov	r0, r5
   1a444:	mov	r7, r2
   1a448:	mov	r6, r1
   1a44c:	bl	116d4 <mbrtowc@plt>
   1a450:	cmp	r7, #0
   1a454:	cmnne	r0, #3
   1a458:	mov	r4, r0
   1a45c:	bls	1a478 <__assert_fail@plt+0x8abc>
   1a460:	mov	r0, #0
   1a464:	bl	26bcc <__assert_fail@plt+0x15210>
   1a468:	cmp	r0, #0
   1a46c:	moveq	r4, #1
   1a470:	ldrbeq	r3, [r6]
   1a474:	streq	r3, [r5]
   1a478:	mov	r0, r4
   1a47c:	add	sp, sp, #12
   1a480:	pop	{r4, r5, r6, r7, pc}
   1a484:	cmp	r0, #0
   1a488:	push	{r4, lr}
   1a48c:	mov	r4, r1
   1a490:	bne	1a4a0 <__assert_fail@plt+0x8ae4>
   1a494:	mov	r0, r1
   1a498:	pop	{r4, lr}
   1a49c:	b	1a3f4 <__assert_fail@plt+0x8a38>
   1a4a0:	cmp	r1, #0
   1a4a4:	bne	1a4b4 <__assert_fail@plt+0x8af8>
   1a4a8:	bl	1a30c <__assert_fail@plt+0x8950>
   1a4ac:	mov	r0, #0
   1a4b0:	pop	{r4, pc}
   1a4b4:	cmp	r1, #0
   1a4b8:	blt	1a4c8 <__assert_fail@plt+0x8b0c>
   1a4bc:	mov	r3, #0
   1a4c0:	cmp	r3, r3
   1a4c4:	beq	1a4d8 <__assert_fail@plt+0x8b1c>
   1a4c8:	bl	117dc <__errno_location@plt>
   1a4cc:	mov	r3, #12
   1a4d0:	str	r3, [r0]
   1a4d4:	b	1a4ac <__assert_fail@plt+0x8af0>
   1a4d8:	pop	{r4, lr}
   1a4dc:	b	11644 <realloc@plt>
   1a4e0:	push	{r4, r5, r6, lr}
   1a4e4:	subs	r4, r2, #0
   1a4e8:	mov	r6, r0
   1a4ec:	mov	r5, r1
   1a4f0:	beq	1a508 <__assert_fail@plt+0x8b4c>
   1a4f4:	mov	r1, r4
   1a4f8:	mvn	r0, #0
   1a4fc:	bl	26dfc <__assert_fail@plt+0x15440>
   1a500:	cmp	r0, r5
   1a504:	bcc	1a518 <__assert_fail@plt+0x8b5c>
   1a508:	mul	r1, r5, r4
   1a50c:	mov	r0, r6
   1a510:	pop	{r4, r5, r6, lr}
   1a514:	b	1a484 <__assert_fail@plt+0x8ac8>
   1a518:	bl	117dc <__errno_location@plt>
   1a51c:	mov	r3, #12
   1a520:	str	r3, [r0]
   1a524:	mov	r0, #0
   1a528:	pop	{r4, r5, r6, pc}
   1a52c:	cmp	r1, #0
   1a530:	add	r3, r1, #31
   1a534:	movge	r3, r1
   1a538:	rsbs	r2, r1, #0
   1a53c:	asr	r3, r3, #5
   1a540:	and	r2, r2, #31
   1a544:	and	r1, r1, #31
   1a548:	mov	ip, #1
   1a54c:	rsbpl	r1, r2, #0
   1a550:	ldr	r2, [r0, r3, lsl #2]
   1a554:	orr	r1, r2, ip, lsl r1
   1a558:	str	r1, [r0, r3, lsl #2]
   1a55c:	bx	lr
   1a560:	cmp	r1, #0
   1a564:	add	r3, r1, #31
   1a568:	movge	r3, r1
   1a56c:	rsbs	r2, r1, #0
   1a570:	asr	r3, r3, #5
   1a574:	and	r2, r2, #31
   1a578:	ldr	r0, [r0, r3, lsl #2]
   1a57c:	and	r1, r1, #31
   1a580:	rsbpl	r1, r2, #0
   1a584:	lsr	r0, r0, r1
   1a588:	and	r0, r0, #1
   1a58c:	bx	lr
   1a590:	sub	r3, r0, #4
   1a594:	add	r0, r0, #28
   1a598:	ldr	r2, [r3, #4]
   1a59c:	mvn	r2, r2
   1a5a0:	str	r2, [r3, #4]!
   1a5a4:	cmp	r3, r0
   1a5a8:	bne	1a598 <__assert_fail@plt+0x8bdc>
   1a5ac:	bx	lr
   1a5b0:	sub	r3, r0, #4
   1a5b4:	sub	r1, r1, #4
   1a5b8:	add	r0, r0, #28
   1a5bc:	ldr	r2, [r3, #4]
   1a5c0:	ldr	ip, [r1, #4]!
   1a5c4:	orr	r2, r2, ip
   1a5c8:	str	r2, [r3, #4]!
   1a5cc:	cmp	r3, r0
   1a5d0:	bne	1a5bc <__assert_fail@plt+0x8c00>
   1a5d4:	bx	lr
   1a5d8:	sub	r3, r0, #4
   1a5dc:	sub	r1, r1, #4
   1a5e0:	add	r0, r0, #28
   1a5e4:	ldr	r2, [r3, #4]
   1a5e8:	ldr	ip, [r1, #4]!
   1a5ec:	and	r2, r2, ip
   1a5f0:	str	r2, [r3, #4]!
   1a5f4:	cmp	r3, r0
   1a5f8:	bne	1a5e4 <__assert_fail@plt+0x8c28>
   1a5fc:	bx	lr
   1a600:	ldr	r3, [r0, #80]	; 0x50
   1a604:	cmp	r3, #1
   1a608:	movne	r2, r0
   1a60c:	movne	r0, #1
   1a610:	ldrne	ip, [r2, #28]
   1a614:	bne	1a620 <__assert_fail@plt+0x8c64>
   1a618:	mov	r0, r3
   1a61c:	bx	lr
   1a620:	add	r3, r0, r1
   1a624:	cmp	ip, r3
   1a628:	bgt	1a630 <__assert_fail@plt+0x8c74>
   1a62c:	bx	lr
   1a630:	push	{lr}		; (str lr, [sp, #-4]!)
   1a634:	ldr	lr, [r2, #8]
   1a638:	ldr	r3, [lr, r3, lsl #2]
   1a63c:	cmn	r3, #1
   1a640:	popne	{pc}		; (ldrne pc, [sp], #4)
   1a644:	add	r0, r0, #1
   1a648:	add	r3, r0, r1
   1a64c:	cmp	ip, r3
   1a650:	bgt	1a634 <__assert_fail@plt+0x8c78>
   1a654:	pop	{pc}		; (ldr pc, [sp], #4)
   1a658:	ldr	r3, [r0, #80]	; 0x50
   1a65c:	cmp	r3, #1
   1a660:	ldreq	r3, [r0, #4]
   1a664:	ldrne	r3, [r0, #8]
   1a668:	ldrbeq	r0, [r3, r1]
   1a66c:	ldrne	r0, [r3, r1, lsl #2]
   1a670:	bx	lr
   1a674:	ldr	r3, [r0, #36]	; 0x24
   1a678:	ldr	r2, [r0, #48]	; 0x30
   1a67c:	cmp	r3, r2
   1a680:	movlt	r2, r3
   1a684:	ldr	r3, [r0, #28]
   1a688:	cmp	r3, r2
   1a68c:	blt	1a69c <__assert_fail@plt+0x8ce0>
   1a690:	str	r3, [r0, #28]
   1a694:	str	r3, [r0, #32]
   1a698:	bx	lr
   1a69c:	ldr	r1, [r0]
   1a6a0:	ldr	ip, [r0, #24]
   1a6a4:	add	r1, r1, r3
   1a6a8:	ldrb	r1, [r1, ip]
   1a6ac:	ldr	ip, [r0, #64]	; 0x40
   1a6b0:	ldrb	ip, [ip, r1]
   1a6b4:	ldr	r1, [r0, #4]
   1a6b8:	strb	ip, [r1, r3]
   1a6bc:	add	r3, r3, #1
   1a6c0:	b	1a688 <__assert_fail@plt+0x8ccc>
   1a6c4:	ldr	r2, [r0, #4]
   1a6c8:	cmp	r2, #0
   1a6cc:	ble	1a718 <__assert_fail@plt+0x8d5c>
   1a6d0:	sub	r2, r2, #1
   1a6d4:	mov	r3, #0
   1a6d8:	push	{lr}		; (str lr, [sp, #-4]!)
   1a6dc:	cmp	r2, r3
   1a6e0:	ldr	lr, [r0, #8]
   1a6e4:	bhi	1a6fc <__assert_fail@plt+0x8d40>
   1a6e8:	ldr	r2, [lr, r3, lsl #2]
   1a6ec:	cmp	r1, r2
   1a6f0:	bne	1a720 <__assert_fail@plt+0x8d64>
   1a6f4:	add	r0, r3, #1
   1a6f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6fc:	add	ip, r2, r3
   1a700:	lsr	ip, ip, #1
   1a704:	ldr	lr, [lr, ip, lsl #2]
   1a708:	cmp	lr, r1
   1a70c:	addlt	r3, ip, #1
   1a710:	movge	r2, ip
   1a714:	b	1a6dc <__assert_fail@plt+0x8d20>
   1a718:	mov	r0, #0
   1a71c:	bx	lr
   1a720:	mov	r0, #0
   1a724:	pop	{pc}		; (ldr pc, [sp], #4)
   1a728:	ldr	r3, [r1, #40]	; 0x28
   1a72c:	ldr	ip, [r1, #56]	; 0x38
   1a730:	cmp	ip, r3
   1a734:	movle	r3, #2
   1a738:	strble	r3, [r0, #4]
   1a73c:	movle	r3, #0
   1a740:	ble	1a864 <__assert_fail@plt+0x8ea8>
   1a744:	push	{r4, lr}
   1a748:	ldr	lr, [r1, #4]
   1a74c:	ldrb	ip, [lr, r3]
   1a750:	strb	ip, [r0]
   1a754:	ldr	r4, [r1, #80]	; 0x50
   1a758:	cmp	r4, #1
   1a75c:	ble	1a788 <__assert_fail@plt+0x8dcc>
   1a760:	ldr	r4, [r1, #28]
   1a764:	cmp	r3, r4
   1a768:	beq	1a788 <__assert_fail@plt+0x8dcc>
   1a76c:	ldr	r4, [r1, #8]
   1a770:	ldr	r4, [r4, r3, lsl #2]
   1a774:	cmn	r4, #1
   1a778:	bne	1a788 <__assert_fail@plt+0x8dcc>
   1a77c:	mov	r3, #1
   1a780:	strb	r3, [r0, #4]
   1a784:	b	1a814 <__assert_fail@plt+0x8e58>
   1a788:	cmp	ip, #92	; 0x5c
   1a78c:	bne	1a7b4 <__assert_fail@plt+0x8df8>
   1a790:	tst	r2, #1
   1a794:	beq	1a77c <__assert_fail@plt+0x8dc0>
   1a798:	ldr	r2, [r1, #48]	; 0x30
   1a79c:	add	r3, r3, #1
   1a7a0:	cmp	r3, r2
   1a7a4:	strlt	r3, [r1, #40]	; 0x28
   1a7a8:	ldrblt	r3, [lr, r3]
   1a7ac:	strblt	r3, [r0]
   1a7b0:	b	1a77c <__assert_fail@plt+0x8dc0>
   1a7b4:	cmp	ip, #91	; 0x5b
   1a7b8:	bne	1a82c <__assert_fail@plt+0x8e70>
   1a7bc:	ldr	r4, [r1, #48]	; 0x30
   1a7c0:	add	ip, r3, #1
   1a7c4:	cmp	ip, r4
   1a7c8:	addlt	r3, lr, r3
   1a7cc:	movge	r3, #0
   1a7d0:	ldrblt	r3, [r3, #1]
   1a7d4:	cmp	r3, #58	; 0x3a
   1a7d8:	strb	r3, [r0]
   1a7dc:	beq	1a81c <__assert_fail@plt+0x8e60>
   1a7e0:	cmp	r3, #61	; 0x3d
   1a7e4:	beq	1a808 <__assert_fail@plt+0x8e4c>
   1a7e8:	cmp	r3, #46	; 0x2e
   1a7ec:	moveq	r3, #26
   1a7f0:	beq	1a80c <__assert_fail@plt+0x8e50>
   1a7f4:	mov	r3, #1
   1a7f8:	mov	r2, #91	; 0x5b
   1a7fc:	strb	r3, [r0, #4]
   1a800:	strb	r2, [r0]
   1a804:	b	1a814 <__assert_fail@plt+0x8e58>
   1a808:	mov	r3, #28
   1a80c:	strb	r3, [r0, #4]
   1a810:	mov	r3, #2
   1a814:	mov	r0, r3
   1a818:	pop	{r4, pc}
   1a81c:	tst	r2, #4
   1a820:	beq	1a7f4 <__assert_fail@plt+0x8e38>
   1a824:	mov	r3, #30
   1a828:	b	1a80c <__assert_fail@plt+0x8e50>
   1a82c:	cmp	ip, #93	; 0x5d
   1a830:	beq	1a854 <__assert_fail@plt+0x8e98>
   1a834:	cmp	ip, #94	; 0x5e
   1a838:	beq	1a85c <__assert_fail@plt+0x8ea0>
   1a83c:	cmp	ip, #45	; 0x2d
   1a840:	moveq	r3, #22
   1a844:	bne	1a77c <__assert_fail@plt+0x8dc0>
   1a848:	strb	r3, [r0, #4]
   1a84c:	mov	r3, #1
   1a850:	b	1a814 <__assert_fail@plt+0x8e58>
   1a854:	mov	r3, #21
   1a858:	b	1a848 <__assert_fail@plt+0x8e8c>
   1a85c:	mov	r3, #25
   1a860:	b	1a848 <__assert_fail@plt+0x8e8c>
   1a864:	mov	r0, r3
   1a868:	bx	lr
   1a86c:	ldrb	r3, [r1, #24]
   1a870:	cmp	r3, #17
   1a874:	bne	1a88c <__assert_fail@plt+0x8ed0>
   1a878:	ldr	r3, [r1, #20]
   1a87c:	cmp	r0, r3
   1a880:	ldrbeq	r3, [r1, #26]
   1a884:	orreq	r3, r3, #8
   1a888:	strbeq	r3, [r1, #26]
   1a88c:	mov	r0, #0
   1a890:	bx	lr
   1a894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a898:	sub	sp, sp, #44	; 0x2c
   1a89c:	ldr	sl, [r0, #84]	; 0x54
   1a8a0:	str	r3, [sp, #16]
   1a8a4:	mov	r6, r2
   1a8a8:	ldr	r2, [sp, #16]
   1a8ac:	ldr	r3, [sl, #24]
   1a8b0:	mov	r9, #12
   1a8b4:	mov	fp, r0
   1a8b8:	mla	r9, r9, r2, r3
   1a8bc:	ldr	r2, [sp, #80]	; 0x50
   1a8c0:	mov	r3, #24
   1a8c4:	mov	r4, r1
   1a8c8:	mul	r3, r3, r2
   1a8cc:	mov	r8, #0
   1a8d0:	str	r3, [sp, #24]
   1a8d4:	mov	r3, #1
   1a8d8:	lsl	r3, r3, r6
   1a8dc:	str	r3, [sp, #12]
   1a8e0:	mvn	r3, r3
   1a8e4:	str	r3, [sp, #32]
   1a8e8:	and	r3, r1, #1
   1a8ec:	str	r3, [sp, #36]	; 0x24
   1a8f0:	and	r3, r1, #2
   1a8f4:	str	r3, [sp, #20]
   1a8f8:	ldr	r3, [r9, #4]
   1a8fc:	cmp	r8, r3
   1a900:	lsrge	r4, r4, #1
   1a904:	andge	r0, r4, #1
   1a908:	bge	1a9ac <__assert_fail@plt+0x8ff0>
   1a90c:	ldr	r3, [r9, #8]
   1a910:	ldr	r7, [r3, r8, lsl #2]
   1a914:	ldr	r3, [sl]
   1a918:	add	r2, r3, r7, lsl #3
   1a91c:	ldrb	r2, [r2, #4]
   1a920:	cmp	r2, #8
   1a924:	beq	1aa24 <__assert_fail@plt+0x9068>
   1a928:	cmp	r2, #9
   1a92c:	beq	1aa40 <__assert_fail@plt+0x9084>
   1a930:	cmp	r2, #4
   1a934:	bne	1aa1c <__assert_fail@plt+0x9060>
   1a938:	ldr	r3, [sp, #80]	; 0x50
   1a93c:	cmn	r3, #1
   1a940:	beq	1aa1c <__assert_fail@plt+0x9060>
   1a944:	mov	r3, #12
   1a948:	mul	r3, r3, r7
   1a94c:	str	r3, [sp, #28]
   1a950:	ldr	r3, [sp, #24]
   1a954:	add	r5, r3, #24
   1a958:	ldr	r3, [fp, #116]	; 0x74
   1a95c:	add	r5, r3, r5
   1a960:	ldr	r3, [r5, #-24]	; 0xffffffe8
   1a964:	cmp	r7, r3
   1a968:	bne	1aa0c <__assert_fail@plt+0x9050>
   1a96c:	cmp	r6, #31
   1a970:	bgt	1a984 <__assert_fail@plt+0x8fc8>
   1a974:	ldr	r3, [r5, #-8]
   1a978:	ldr	r2, [sp, #12]
   1a97c:	tst	r2, r3
   1a980:	beq	1aa0c <__assert_fail@plt+0x9050>
   1a984:	ldr	r2, [sp, #28]
   1a988:	ldr	r3, [sl, #20]
   1a98c:	add	r3, r3, r2
   1a990:	ldr	r2, [sp, #16]
   1a994:	ldr	r3, [r3, #8]
   1a998:	ldr	r3, [r3]
   1a99c:	cmp	r2, r3
   1a9a0:	bne	1a9b4 <__assert_fail@plt+0x8ff8>
   1a9a4:	ands	r0, r4, #1
   1a9a8:	mvnne	r0, #0
   1a9ac:	add	sp, sp, #44	; 0x2c
   1a9b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9b4:	ldr	r2, [sp, #80]	; 0x50
   1a9b8:	mov	r1, r4
   1a9bc:	str	r2, [sp]
   1a9c0:	mov	r0, fp
   1a9c4:	mov	r2, r6
   1a9c8:	bl	1a894 <__assert_fail@plt+0x8ed8>
   1a9cc:	cmn	r0, #1
   1a9d0:	bne	1a9dc <__assert_fail@plt+0x9020>
   1a9d4:	mvn	r0, #0
   1a9d8:	b	1a9ac <__assert_fail@plt+0x8ff0>
   1a9dc:	cmp	r0, #0
   1a9e0:	bne	1a9f8 <__assert_fail@plt+0x903c>
   1a9e4:	ldr	r3, [sp, #20]
   1a9e8:	cmp	r3, #0
   1a9ec:	beq	1a9f8 <__assert_fail@plt+0x903c>
   1a9f0:	mov	r0, #0
   1a9f4:	b	1a9ac <__assert_fail@plt+0x8ff0>
   1a9f8:	cmp	r6, #31
   1a9fc:	ldrle	r3, [r5, #-8]
   1aa00:	ldrle	r2, [sp, #32]
   1aa04:	andle	r3, r3, r2
   1aa08:	strle	r3, [r5, #-8]
   1aa0c:	add	r5, r5, #24
   1aa10:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   1aa14:	cmp	r3, #0
   1aa18:	bne	1a960 <__assert_fail@plt+0x8fa4>
   1aa1c:	add	r8, r8, #1
   1aa20:	b	1a8f8 <__assert_fail@plt+0x8f3c>
   1aa24:	ldr	r2, [sp, #36]	; 0x24
   1aa28:	cmp	r2, #0
   1aa2c:	beq	1aa1c <__assert_fail@plt+0x9060>
   1aa30:	ldr	r3, [r3, r7, lsl #3]
   1aa34:	cmp	r3, r6
   1aa38:	bne	1aa1c <__assert_fail@plt+0x9060>
   1aa3c:	b	1a9d4 <__assert_fail@plt+0x9018>
   1aa40:	ldr	r2, [sp, #20]
   1aa44:	cmp	r2, #0
   1aa48:	beq	1aa1c <__assert_fail@plt+0x9060>
   1aa4c:	ldr	r3, [r3, r7, lsl #3]
   1aa50:	cmp	r6, r3
   1aa54:	bne	1aa1c <__assert_fail@plt+0x9060>
   1aa58:	b	1a9f0 <__assert_fail@plt+0x9034>
   1aa5c:	push	{r4, r5, lr}
   1aa60:	mov	lr, #24
   1aa64:	ldr	r5, [r0, #116]	; 0x74
   1aa68:	ldr	ip, [sp, #12]
   1aa6c:	mla	r1, lr, r1, r5
   1aa70:	ldr	r4, [sp, #16]
   1aa74:	ldr	lr, [r1, #8]
   1aa78:	cmp	lr, ip
   1aa7c:	bgt	1aab4 <__assert_fail@plt+0x90f8>
   1aa80:	ldr	r1, [r1, #12]
   1aa84:	cmp	ip, r1
   1aa88:	bgt	1aac0 <__assert_fail@plt+0x9104>
   1aa8c:	cmp	ip, r1
   1aa90:	moveq	r1, #2
   1aa94:	movne	r1, #0
   1aa98:	cmp	lr, ip
   1aa9c:	orreq	r1, r1, #1
   1aaa0:	cmp	r1, #0
   1aaa4:	beq	1aab8 <__assert_fail@plt+0x90fc>
   1aaa8:	str	r4, [sp, #12]
   1aaac:	pop	{r4, r5, lr}
   1aab0:	b	1a894 <__assert_fail@plt+0x8ed8>
   1aab4:	mvn	r1, #0
   1aab8:	mov	r0, r1
   1aabc:	pop	{r4, r5, pc}
   1aac0:	mov	r1, #1
   1aac4:	b	1aab8 <__assert_fail@plt+0x90fc>
   1aac8:	push	{r4, r5, lr}
   1aacc:	mov	r3, #0
   1aad0:	ldr	r4, [r0, #108]	; 0x6c
   1aad4:	mov	r5, #24
   1aad8:	mov	ip, r4
   1aadc:	cmp	ip, r3
   1aae0:	bgt	1ab10 <__assert_fail@plt+0x9154>
   1aae4:	cmp	r4, r3
   1aae8:	mvnle	r3, #0
   1aaec:	ble	1ab08 <__assert_fail@plt+0x914c>
   1aaf0:	ldr	r0, [r0, #116]	; 0x74
   1aaf4:	mov	r2, #24
   1aaf8:	mla	r2, r2, r3, r0
   1aafc:	ldr	r2, [r2, #4]
   1ab00:	cmp	r1, r2
   1ab04:	mvnne	r3, #0
   1ab08:	mov	r0, r3
   1ab0c:	pop	{r4, r5, pc}
   1ab10:	add	r2, ip, r3
   1ab14:	ldr	lr, [r0, #116]	; 0x74
   1ab18:	add	r2, r2, r2, lsr #31
   1ab1c:	asr	r2, r2, #1
   1ab20:	mla	lr, r5, r2, lr
   1ab24:	ldr	lr, [lr, #4]
   1ab28:	cmp	lr, r1
   1ab2c:	addlt	r3, r2, #1
   1ab30:	movge	ip, r2
   1ab34:	b	1aadc <__assert_fail@plt+0x9120>
   1ab38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab3c:	mov	r6, r1
   1ab40:	sub	sp, sp, #20
   1ab44:	mov	r1, r3
   1ab48:	mov	r5, r0
   1ab4c:	mov	sl, r2
   1ab50:	mov	r7, r3
   1ab54:	ldr	r9, [r0, #84]	; 0x54
   1ab58:	bl	1aac8 <__assert_fail@plt+0x910c>
   1ab5c:	ldr	r1, [sp, #60]	; 0x3c
   1ab60:	mov	r4, #0
   1ab64:	str	r0, [sp, #8]
   1ab68:	mov	r0, r5
   1ab6c:	bl	1aac8 <__assert_fail@plt+0x910c>
   1ab70:	str	r0, [sp, #12]
   1ab74:	ldr	r3, [r6, #4]
   1ab78:	cmp	r4, r3
   1ab7c:	blt	1ab8c <__assert_fail@plt+0x91d0>
   1ab80:	mov	r0, #0
   1ab84:	add	sp, sp, #20
   1ab88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab8c:	ldr	r3, [r6, #8]
   1ab90:	ldr	r2, [r5, #116]	; 0x74
   1ab94:	mov	r0, r5
   1ab98:	ldr	r1, [r3, r4, lsl #2]
   1ab9c:	mov	r3, #24
   1aba0:	mul	r3, r3, r1
   1aba4:	ldr	r2, [r2, r3]
   1aba8:	ldr	r3, [r9]
   1abac:	ldr	r8, [r3, r2, lsl #3]
   1abb0:	ldr	r3, [sp, #8]
   1abb4:	mov	r2, r8
   1abb8:	str	r3, [sp, #4]
   1abbc:	str	r7, [sp]
   1abc0:	mov	r3, sl
   1abc4:	bl	1aa5c <__assert_fail@plt+0x90a0>
   1abc8:	ldr	r3, [sp, #12]
   1abcc:	ldr	r1, [r6, #8]
   1abd0:	str	r3, [sp, #4]
   1abd4:	ldr	r3, [sp, #60]	; 0x3c
   1abd8:	mov	r2, r8
   1abdc:	str	r3, [sp]
   1abe0:	ldr	r3, [sp, #56]	; 0x38
   1abe4:	ldr	r1, [r1, r4, lsl #2]
   1abe8:	mov	fp, r0
   1abec:	mov	r0, r5
   1abf0:	bl	1aa5c <__assert_fail@plt+0x90a0>
   1abf4:	cmp	fp, r0
   1abf8:	addeq	r4, r4, #1
   1abfc:	beq	1ab74 <__assert_fail@plt+0x91b8>
   1ac00:	mov	r0, #1
   1ac04:	b	1ab84 <__assert_fail@plt+0x91c8>
   1ac08:	push	{r4, r5, r6, lr}
   1ac0c:	mov	r4, r0
   1ac10:	mov	r5, r1
   1ac14:	mov	r6, r2
   1ac18:	ldr	r3, [r4, #4]
   1ac1c:	cmp	r3, #0
   1ac20:	bne	1ac70 <__assert_fail@plt+0x92b4>
   1ac24:	ldr	r3, [r4, #8]
   1ac28:	cmp	r3, #0
   1ac2c:	bne	1ac70 <__assert_fail@plt+0x92b4>
   1ac30:	mov	r1, r4
   1ac34:	mov	r0, r6
   1ac38:	blx	r5
   1ac3c:	cmp	r0, #0
   1ac40:	popne	{r4, r5, r6, pc}
   1ac44:	ldr	r1, [r4]
   1ac48:	cmp	r1, #0
   1ac4c:	popeq	{r4, r5, r6, pc}
   1ac50:	ldr	r3, [r1, #8]
   1ac54:	cmp	r4, r3
   1ac58:	cmpne	r3, #0
   1ac5c:	moveq	r2, #1
   1ac60:	movne	r2, #0
   1ac64:	cmp	r2, #0
   1ac68:	mov	r4, r1
   1ac6c:	bne	1ac30 <__assert_fail@plt+0x9274>
   1ac70:	mov	r4, r3
   1ac74:	b	1ac18 <__assert_fail@plt+0x925c>
   1ac78:	push	{r4, r5, r6, r7, r8, lr}
   1ac7c:	mov	r4, r0
   1ac80:	mov	r5, r1
   1ac84:	mov	r6, r2
   1ac88:	mov	r7, #0
   1ac8c:	mov	r1, r4
   1ac90:	mov	r0, r6
   1ac94:	blx	r5
   1ac98:	cmp	r0, #0
   1ac9c:	popne	{r4, r5, r6, r7, r8, pc}
   1aca0:	ldr	r3, [r4, #4]
   1aca4:	cmp	r3, #0
   1aca8:	moveq	r1, r7
   1acac:	beq	1accc <__assert_fail@plt+0x9310>
   1acb0:	mov	r4, r3
   1acb4:	b	1ac8c <__assert_fail@plt+0x92d0>
   1acb8:	ldr	r3, [r4]
   1acbc:	mov	r1, r4
   1acc0:	cmp	r3, #0
   1acc4:	popeq	{r4, r5, r6, r7, r8, pc}
   1acc8:	mov	r4, r3
   1accc:	ldr	r3, [r4, #8]
   1acd0:	cmp	r3, #0
   1acd4:	cmpne	r1, r3
   1acd8:	beq	1acb8 <__assert_fail@plt+0x92fc>
   1acdc:	b	1acb0 <__assert_fail@plt+0x92f4>
   1ace0:	ldr	r3, [r0, #80]	; 0x50
   1ace4:	push	{r4, r5, r6, lr}
   1ace8:	cmp	r3, #1
   1acec:	mov	r4, r0
   1acf0:	mov	r5, r1
   1acf4:	ble	1ad44 <__assert_fail@plt+0x9388>
   1acf8:	cmn	r1, #-1073741823	; 0xc0000001
   1acfc:	bls	1ad08 <__assert_fail@plt+0x934c>
   1ad00:	mov	r0, #12
   1ad04:	pop	{r4, r5, r6, pc}
   1ad08:	lsl	r6, r1, #2
   1ad0c:	mov	r1, r6
   1ad10:	ldr	r0, [r0, #8]
   1ad14:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1ad18:	cmp	r0, #0
   1ad1c:	beq	1ad00 <__assert_fail@plt+0x9344>
   1ad20:	str	r0, [r4, #8]
   1ad24:	ldr	r0, [r4, #12]
   1ad28:	cmp	r0, #0
   1ad2c:	beq	1ad44 <__assert_fail@plt+0x9388>
   1ad30:	mov	r1, r6
   1ad34:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1ad38:	cmp	r0, #0
   1ad3c:	beq	1ad00 <__assert_fail@plt+0x9344>
   1ad40:	str	r0, [r4, #12]
   1ad44:	ldrb	r3, [r4, #75]	; 0x4b
   1ad48:	cmp	r3, #0
   1ad4c:	beq	1ad68 <__assert_fail@plt+0x93ac>
   1ad50:	mov	r1, r5
   1ad54:	ldr	r0, [r4, #4]
   1ad58:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1ad5c:	cmp	r0, #0
   1ad60:	beq	1ad00 <__assert_fail@plt+0x9344>
   1ad64:	str	r0, [r4, #4]
   1ad68:	str	r5, [r4, #36]	; 0x24
   1ad6c:	mov	r0, #0
   1ad70:	pop	{r4, r5, r6, pc}
   1ad74:	push	{r4, r5, r6, lr}
   1ad78:	mov	r5, r1
   1ad7c:	ldm	r0, {r1, r3}
   1ad80:	mov	r4, r0
   1ad84:	cmp	r1, r3
   1ad88:	bne	1adb0 <__assert_fail@plt+0x93f4>
   1ad8c:	add	r1, r1, #1
   1ad90:	lsl	r3, r1, #1
   1ad94:	str	r3, [r0]
   1ad98:	lsl	r1, r1, #3
   1ad9c:	ldr	r0, [r0, #8]
   1ada0:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1ada4:	cmp	r0, #0
   1ada8:	popeq	{r4, r5, r6, pc}
   1adac:	str	r0, [r4, #8]
   1adb0:	ldr	r3, [r4, #4]
   1adb4:	ldr	r2, [r4, #8]
   1adb8:	add	r1, r3, #1
   1adbc:	str	r1, [r4, #4]
   1adc0:	mov	r0, #1
   1adc4:	str	r5, [r2, r3, lsl #2]
   1adc8:	pop	{r4, r5, r6, pc}
   1adcc:	mov	r2, #32
   1add0:	mov	r1, #0
   1add4:	b	11818 <memset@plt>
   1add8:	push	{r4, r5, r6, r7, r8, lr}
   1addc:	mov	r7, r3
   1ade0:	ldr	r3, [r0, #64]	; 0x40
   1ade4:	mov	r4, r0
   1ade8:	cmp	r3, #31
   1adec:	mov	r5, r1
   1adf0:	mov	r6, r2
   1adf4:	bne	1ae1c <__assert_fail@plt+0x9460>
   1adf8:	mov	r0, #996	; 0x3e4
   1adfc:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   1ae00:	subs	lr, r0, #0
   1ae04:	beq	1ae7c <__assert_fail@plt+0x94c0>
   1ae08:	ldr	r3, [r4, #56]	; 0x38
   1ae0c:	str	lr, [r4, #56]	; 0x38
   1ae10:	str	r3, [lr]
   1ae14:	mov	r3, #0
   1ae18:	str	r3, [r4, #64]	; 0x40
   1ae1c:	ldr	r1, [r4, #64]	; 0x40
   1ae20:	ldr	ip, [r4, #56]	; 0x38
   1ae24:	add	r3, r1, #1
   1ae28:	lsl	r1, r1, #5
   1ae2c:	add	lr, r1, #4
   1ae30:	str	r3, [r4, #64]	; 0x40
   1ae34:	add	lr, ip, lr
   1ae38:	mov	r3, #0
   1ae3c:	add	ip, ip, r1
   1ae40:	add	r2, ip, #24
   1ae44:	stmib	ip, {r3, r5, r6}
   1ae48:	cmp	r5, #0
   1ae4c:	ldm	r7, {r0, r1}
   1ae50:	stm	r2, {r0, r1}
   1ae54:	ldrb	r2, [ip, #30]
   1ae58:	str	r3, [ip, #16]
   1ae5c:	str	r3, [ip, #20]
   1ae60:	and	r2, r2, #243	; 0xf3
   1ae64:	mvn	r3, #0
   1ae68:	strb	r2, [ip, #30]
   1ae6c:	str	r3, [ip, #32]
   1ae70:	strne	lr, [r5]
   1ae74:	cmp	r6, #0
   1ae78:	strne	lr, [r6]
   1ae7c:	mov	r0, lr
   1ae80:	pop	{r4, r5, r6, r7, r8, pc}
   1ae84:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1ae88:	mov	r4, r0
   1ae8c:	ldr	r5, [r0]
   1ae90:	mov	r8, r1
   1ae94:	add	r6, sp, #4
   1ae98:	mov	r7, #0
   1ae9c:	add	r3, r4, #20
   1aea0:	mov	r2, r7
   1aea4:	mov	r1, #0
   1aea8:	mov	r0, r8
   1aeac:	bl	1add8 <__assert_fail@plt+0x941c>
   1aeb0:	cmp	r0, #0
   1aeb4:	str	r0, [r6]
   1aeb8:	beq	1af18 <__assert_fail@plt+0x955c>
   1aebc:	str	r5, [r0]
   1aec0:	ldr	r5, [r6]
   1aec4:	ldrb	r3, [r5, #26]
   1aec8:	orr	r3, r3, #4
   1aecc:	strb	r3, [r5, #26]
   1aed0:	ldr	r3, [r4, #4]
   1aed4:	cmp	r3, #0
   1aed8:	addne	r6, r5, #4
   1aedc:	bne	1aef8 <__assert_fail@plt+0x953c>
   1aee0:	mov	r2, r7
   1aee4:	ldr	r3, [r4, #8]
   1aee8:	cmp	r3, #0
   1aeec:	cmpne	r2, r3
   1aef0:	beq	1af00 <__assert_fail@plt+0x9544>
   1aef4:	add	r6, r5, #8
   1aef8:	mov	r4, r3
   1aefc:	b	1ae9c <__assert_fail@plt+0x94e0>
   1af00:	ldr	r3, [r4]
   1af04:	ldr	r5, [r5]
   1af08:	cmp	r3, #0
   1af0c:	mov	r2, r4
   1af10:	bne	1af20 <__assert_fail@plt+0x9564>
   1af14:	ldr	r0, [sp, #4]
   1af18:	add	sp, sp, #8
   1af1c:	pop	{r4, r5, r6, r7, r8, pc}
   1af20:	mov	r4, r3
   1af24:	b	1aee4 <__assert_fail@plt+0x9528>
   1af28:	mov	ip, #0
   1af2c:	push	{r0, r1, r2, lr}
   1af30:	str	ip, [sp, #4]
   1af34:	strb	r3, [sp, #4]
   1af38:	mov	r3, sp
   1af3c:	str	ip, [sp]
   1af40:	bl	1add8 <__assert_fail@plt+0x941c>
   1af44:	add	sp, sp, #12
   1af48:	pop	{pc}		; (ldr pc, [sp], #4)
   1af4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1af50:	ldr	r9, [r1]
   1af54:	ldr	r4, [r2, #4]
   1af58:	ldrb	r1, [r1, #28]
   1af5c:	adds	r3, r4, #0
   1af60:	movne	r3, #1
   1af64:	ands	r3, r3, r1, lsr #4
   1af68:	beq	1af88 <__assert_fail@plt+0x95cc>
   1af6c:	ldr	r1, [r2, #20]
   1af70:	cmp	r1, #31
   1af74:	bgt	1b020 <__assert_fail@plt+0x9664>
   1af78:	ldr	r3, [r9, #80]	; 0x50
   1af7c:	lsr	r3, r3, r1
   1af80:	tst	r3, #1
   1af84:	beq	1b020 <__assert_fail@plt+0x9664>
   1af88:	mov	sl, r2
   1af8c:	mov	r2, #0
   1af90:	mov	r1, r2
   1af94:	mov	r3, #8
   1af98:	mov	r7, r0
   1af9c:	mov	r0, r9
   1afa0:	bl	1af28 <__assert_fail@plt+0x956c>
   1afa4:	mov	r2, #0
   1afa8:	mov	r3, #9
   1afac:	mov	r1, r2
   1afb0:	mov	r6, r0
   1afb4:	mov	r0, r9
   1afb8:	bl	1af28 <__assert_fail@plt+0x956c>
   1afbc:	cmp	r4, #0
   1afc0:	mov	r5, r0
   1afc4:	moveq	r8, r0
   1afc8:	beq	1afe4 <__assert_fail@plt+0x9628>
   1afcc:	mov	r2, r0
   1afd0:	mov	r3, #16
   1afd4:	mov	r1, r4
   1afd8:	mov	r0, r9
   1afdc:	bl	1af28 <__assert_fail@plt+0x956c>
   1afe0:	mov	r8, r0
   1afe4:	mov	r3, #16
   1afe8:	mov	r2, r8
   1afec:	mov	r1, r6
   1aff0:	mov	r0, r9
   1aff4:	bl	1af28 <__assert_fail@plt+0x956c>
   1aff8:	cmp	r8, #0
   1affc:	cmpne	r0, #0
   1b000:	mov	r4, r0
   1b004:	beq	1b014 <__assert_fail@plt+0x9658>
   1b008:	cmp	r5, #0
   1b00c:	cmpne	r6, #0
   1b010:	bne	1b028 <__assert_fail@plt+0x966c>
   1b014:	mov	r4, #0
   1b018:	mov	r3, #12
   1b01c:	str	r3, [r7]
   1b020:	mov	r0, r4
   1b024:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b028:	ldr	r3, [sl, #20]
   1b02c:	str	r3, [r5, #20]
   1b030:	str	r3, [r6, #20]
   1b034:	ldrb	r3, [sl, #26]
   1b038:	ldrb	r2, [r5, #26]
   1b03c:	and	r3, r3, #8
   1b040:	bic	r2, r2, #8
   1b044:	orr	r2, r3, r2
   1b048:	strb	r2, [r5, #26]
   1b04c:	ldrb	r2, [r6, #26]
   1b050:	bic	r2, r2, #8
   1b054:	orr	r3, r3, r2
   1b058:	strb	r3, [r6, #26]
   1b05c:	b	1b020 <__assert_fail@plt+0x9664>
   1b060:	push	{r0, r1, r2, r4, r5, lr}
   1b064:	mov	r3, #0
   1b068:	ldr	r2, [r1, #4]
   1b06c:	mov	r5, r0
   1b070:	cmp	r2, r3
   1b074:	mov	r4, r1
   1b078:	str	r3, [sp, #4]
   1b07c:	beq	1b0a4 <__assert_fail@plt+0x96e8>
   1b080:	ldrb	r3, [r2, #24]
   1b084:	cmp	r3, #17
   1b088:	bne	1b0a4 <__assert_fail@plt+0x96e8>
   1b08c:	mov	r1, r0
   1b090:	add	r0, sp, #4
   1b094:	bl	1af4c <__assert_fail@plt+0x9590>
   1b098:	cmp	r0, #0
   1b09c:	str	r0, [r4, #4]
   1b0a0:	strne	r4, [r0]
   1b0a4:	ldr	r2, [r4, #8]
   1b0a8:	cmp	r2, #0
   1b0ac:	beq	1b0d4 <__assert_fail@plt+0x9718>
   1b0b0:	ldrb	r3, [r2, #24]
   1b0b4:	cmp	r3, #17
   1b0b8:	bne	1b0d4 <__assert_fail@plt+0x9718>
   1b0bc:	mov	r1, r5
   1b0c0:	add	r0, sp, #4
   1b0c4:	bl	1af4c <__assert_fail@plt+0x9590>
   1b0c8:	cmp	r0, #0
   1b0cc:	str	r0, [r4, #8]
   1b0d0:	strne	r4, [r0]
   1b0d4:	ldr	r0, [sp, #4]
   1b0d8:	add	sp, sp, #12
   1b0dc:	pop	{r4, r5, pc}
   1b0e0:	mov	r3, #1
   1b0e4:	push	{r4, r5, r6, lr}
   1b0e8:	mov	r4, r0
   1b0ec:	str	r3, [r0]
   1b0f0:	str	r3, [r0, #4]
   1b0f4:	mov	r0, #4
   1b0f8:	mov	r5, r1
   1b0fc:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   1b100:	cmp	r0, #0
   1b104:	str	r0, [r4, #8]
   1b108:	streq	r0, [r4, #4]
   1b10c:	streq	r0, [r4]
   1b110:	strne	r5, [r0]
   1b114:	moveq	r0, #12
   1b118:	movne	r0, #0
   1b11c:	pop	{r4, r5, r6, pc}
   1b120:	mov	r3, #0
   1b124:	push	{r4, lr}
   1b128:	mov	r4, r0
   1b12c:	str	r1, [r0]
   1b130:	str	r3, [r0, #4]
   1b134:	lsl	r0, r1, #2
   1b138:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   1b13c:	cmp	r0, #0
   1b140:	str	r0, [r4, #8]
   1b144:	moveq	r0, #12
   1b148:	movne	r0, #0
   1b14c:	pop	{r4, pc}
   1b150:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b154:	mov	r7, r1
   1b158:	mov	r9, r0
   1b15c:	str	r2, [r7], #16
   1b160:	mov	r5, r1
   1b164:	mov	r0, r7
   1b168:	ldr	r1, [r1, #8]
   1b16c:	mov	r4, r2
   1b170:	bl	1b120 <__assert_fail@plt+0x9764>
   1b174:	subs	r8, r0, #0
   1b178:	moveq	r6, r8
   1b17c:	beq	1b1ac <__assert_fail@plt+0x97f0>
   1b180:	mov	r8, #12
   1b184:	mov	r0, r8
   1b188:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b18c:	ldr	r3, [r5, #12]
   1b190:	ldr	r1, [r3, r6, lsl #2]
   1b194:	ldr	r3, [r9]
   1b198:	add	r3, r3, r1, lsl #3
   1b19c:	ldrb	r3, [r3, #4]
   1b1a0:	tst	r3, #8
   1b1a4:	beq	1b21c <__assert_fail@plt+0x9860>
   1b1a8:	add	r6, r6, #1
   1b1ac:	ldr	r3, [r5, #8]
   1b1b0:	cmp	r6, r3
   1b1b4:	blt	1b18c <__assert_fail@plt+0x97d0>
   1b1b8:	ldr	r3, [r9, #68]	; 0x44
   1b1bc:	ldr	r7, [r9, #32]
   1b1c0:	and	r4, r4, r3
   1b1c4:	mov	r3, #12
   1b1c8:	mul	r4, r3, r4
   1b1cc:	add	r6, r7, r4
   1b1d0:	ldr	r1, [r7, r4]
   1b1d4:	ldr	r3, [r6, #4]
   1b1d8:	cmp	r3, r1
   1b1dc:	bgt	1b204 <__assert_fail@plt+0x9848>
   1b1e0:	add	r1, r1, #1
   1b1e4:	ldr	r0, [r6, #8]
   1b1e8:	lsl	r9, r1, #1
   1b1ec:	lsl	r1, r1, #3
   1b1f0:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1b1f4:	cmp	r0, #0
   1b1f8:	beq	1b180 <__assert_fail@plt+0x97c4>
   1b1fc:	str	r0, [r6, #8]
   1b200:	str	r9, [r6, #4]
   1b204:	ldr	r3, [r7, r4]
   1b208:	ldr	r2, [r6, #8]
   1b20c:	add	r1, r3, #1
   1b210:	str	r1, [r7, r4]
   1b214:	str	r5, [r2, r3, lsl #2]
   1b218:	b	1b184 <__assert_fail@plt+0x97c8>
   1b21c:	mov	r0, r7
   1b220:	bl	1ad74 <__assert_fail@plt+0x93b8>
   1b224:	cmp	r0, #0
   1b228:	bne	1b1a8 <__assert_fail@plt+0x97ec>
   1b22c:	b	1b180 <__assert_fail@plt+0x97c4>
   1b230:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b234:	sub	sp, sp, #84	; 0x54
   1b238:	ldr	r8, [r0, #36]	; 0x24
   1b23c:	ldr	r3, [r0, #48]	; 0x30
   1b240:	ldr	r5, [r0, #28]
   1b244:	cmp	r8, r3
   1b248:	mov	r4, r0
   1b24c:	movge	r8, r3
   1b250:	add	r7, sp, #8
   1b254:	add	r9, sp, #16
   1b258:	cmp	r5, r8
   1b25c:	bge	1b374 <__assert_fail@plt+0x99b8>
   1b260:	add	r6, r4, #16
   1b264:	ldr	r3, [r4, #64]	; 0x40
   1b268:	ldm	r6, {r0, r1}
   1b26c:	cmp	r3, #0
   1b270:	sub	r2, r8, r5
   1b274:	stm	r7, {r0, r1}
   1b278:	movne	r3, #0
   1b27c:	bne	1b2c4 <__assert_fail@plt+0x9908>
   1b280:	ldr	r1, [r4, #24]
   1b284:	add	r3, r5, r1
   1b288:	ldr	r1, [r4]
   1b28c:	add	r1, r1, r3
   1b290:	b	1b2dc <__assert_fail@plt+0x9920>
   1b294:	ldr	r1, [r4]
   1b298:	ldr	r0, [r4, #24]
   1b29c:	add	r1, r1, r5
   1b2a0:	add	r1, r1, r3
   1b2a4:	ldrb	r1, [r1, r0]
   1b2a8:	ldr	r0, [r4, #64]	; 0x40
   1b2ac:	ldrb	r0, [r0, r1]
   1b2b0:	ldr	r1, [r4, #4]
   1b2b4:	add	r1, r1, r5
   1b2b8:	strb	r0, [r1, r3]
   1b2bc:	strb	r0, [r9, r3]
   1b2c0:	add	r3, r3, #1
   1b2c4:	ldr	r1, [r4, #80]	; 0x50
   1b2c8:	cmp	r2, r1
   1b2cc:	movlt	r1, r2
   1b2d0:	cmp	r3, r1
   1b2d4:	blt	1b294 <__assert_fail@plt+0x98d8>
   1b2d8:	mov	r1, r9
   1b2dc:	mov	r3, r6
   1b2e0:	add	r0, sp, #4
   1b2e4:	bl	1a434 <__assert_fail@plt+0x8a78>
   1b2e8:	sub	r3, r0, #1
   1b2ec:	cmn	r3, #3
   1b2f0:	bhi	1b30c <__assert_fail@plt+0x9950>
   1b2f4:	cmn	r0, #2
   1b2f8:	bne	1b33c <__assert_fail@plt+0x9980>
   1b2fc:	ldr	r2, [r4, #36]	; 0x24
   1b300:	ldr	r3, [r4, #48]	; 0x30
   1b304:	cmp	r2, r3
   1b308:	blt	1b36c <__assert_fail@plt+0x99b0>
   1b30c:	ldr	r3, [r4]
   1b310:	ldr	r2, [r4, #24]
   1b314:	add	r3, r3, r5
   1b318:	ldm	r7, {r0, r1}
   1b31c:	ldrb	r3, [r3, r2]
   1b320:	ldr	r2, [r4, #64]	; 0x40
   1b324:	cmp	r2, #0
   1b328:	str	r3, [sp, #4]
   1b32c:	ldrbne	r3, [r2, r3]
   1b330:	stm	r6, {r0, r1}
   1b334:	mov	r0, #1
   1b338:	strne	r3, [sp, #4]
   1b33c:	ldr	r2, [r4, #8]
   1b340:	ldr	r3, [sp, #4]
   1b344:	add	r0, r5, r0
   1b348:	str	r3, [r2, r5, lsl #2]
   1b34c:	mvn	r1, #0
   1b350:	add	r3, r5, #1
   1b354:	cmp	r3, r0
   1b358:	mov	r5, r3
   1b35c:	bge	1b258 <__assert_fail@plt+0x989c>
   1b360:	str	r1, [r2, r3, lsl #2]
   1b364:	add	r3, r3, #1
   1b368:	b	1b354 <__assert_fail@plt+0x9998>
   1b36c:	ldm	r7, {r0, r1}
   1b370:	stm	r6, {r0, r1}
   1b374:	str	r5, [r4, #28]
   1b378:	str	r5, [r4, #32]
   1b37c:	add	sp, sp, #84	; 0x54
   1b380:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b388:	mov	r4, r0
   1b38c:	ldr	r3, [r0, #48]	; 0x30
   1b390:	ldr	r7, [r0, #36]	; 0x24
   1b394:	sub	sp, sp, #100	; 0x64
   1b398:	cmp	r7, r3
   1b39c:	movge	r7, r3
   1b3a0:	ldrb	r3, [r0, #74]	; 0x4a
   1b3a4:	ldr	r6, [r0, #28]
   1b3a8:	cmp	r3, #0
   1b3ac:	bne	1b3d0 <__assert_fail@plt+0x9a14>
   1b3b0:	ldr	r3, [r0, #64]	; 0x40
   1b3b4:	cmp	r3, #0
   1b3b8:	bne	1b3d0 <__assert_fail@plt+0x9a14>
   1b3bc:	ldrb	r3, [r0, #76]	; 0x4c
   1b3c0:	cmp	r3, #0
   1b3c4:	moveq	r5, r6
   1b3c8:	addeq	r8, sp, #24
   1b3cc:	beq	1b430 <__assert_fail@plt+0x9a74>
   1b3d0:	ldr	r5, [r4, #32]
   1b3d4:	cmp	r6, r7
   1b3d8:	blt	1b4e4 <__assert_fail@plt+0x9b28>
   1b3dc:	b	1b5b4 <__assert_fail@plt+0x9bf8>
   1b3e0:	ldr	fp, [r4]
   1b3e4:	ldr	sl, [r4, #24]
   1b3e8:	add	r3, fp, r5
   1b3ec:	add	r6, r4, #16
   1b3f0:	ldrb	r9, [r3, sl]
   1b3f4:	tst	r9, #128	; 0x80
   1b3f8:	bne	1b43c <__assert_fail@plt+0x9a80>
   1b3fc:	mov	r0, r6
   1b400:	bl	11614 <mbsinit@plt>
   1b404:	cmp	r0, #0
   1b408:	beq	1b43c <__assert_fail@plt+0x9a80>
   1b40c:	mov	r0, r9
   1b410:	bl	1195c <towupper@plt>
   1b414:	bics	r3, r0, #127	; 0x7f
   1b418:	bne	1b43c <__assert_fail@plt+0x9a80>
   1b41c:	ldr	r3, [r4, #4]
   1b420:	strb	r0, [r3, r5]
   1b424:	ldr	r3, [r4, #8]
   1b428:	str	r0, [r3, r5, lsl #2]
   1b42c:	add	r5, r5, #1
   1b430:	cmp	r5, r7
   1b434:	blt	1b3e0 <__assert_fail@plt+0x9a24>
   1b438:	b	1b620 <__assert_fail@plt+0x9c64>
   1b43c:	ldm	r6, {r0, r1}
   1b440:	mov	r3, r6
   1b444:	sub	r2, r7, r5
   1b448:	stm	r8, {r0, r1}
   1b44c:	add	r1, sl, r5
   1b450:	add	r1, fp, r1
   1b454:	add	r0, sp, #20
   1b458:	str	r5, [sp, #4]
   1b45c:	bl	1a434 <__assert_fail@plt+0x8a78>
   1b460:	sub	r3, r0, #1
   1b464:	cmn	r3, #4
   1b468:	mov	sl, r0
   1b46c:	bhi	1b5d8 <__assert_fail@plt+0x9c1c>
   1b470:	ldr	r9, [sp, #20]
   1b474:	mov	r0, r9
   1b478:	bl	1195c <towupper@plt>
   1b47c:	cmp	r9, r0
   1b480:	mov	r6, r0
   1b484:	beq	1b5bc <__assert_fail@plt+0x9c00>
   1b488:	mov	r1, r0
   1b48c:	mov	r2, r8
   1b490:	add	r0, sp, #32
   1b494:	bl	1153c <wcrtomb@plt>
   1b498:	cmp	sl, r0
   1b49c:	bne	1b4e0 <__assert_fail@plt+0x9b24>
   1b4a0:	ldr	r0, [r4, #4]
   1b4a4:	mov	r2, sl
   1b4a8:	add	r1, sp, #32
   1b4ac:	add	r0, r0, r5
   1b4b0:	bl	115e4 <memcpy@plt>
   1b4b4:	ldr	r2, [r4, #8]
   1b4b8:	add	sl, r5, sl
   1b4bc:	add	r3, r5, #1
   1b4c0:	mvn	r1, #0
   1b4c4:	str	r6, [r2, r5, lsl #2]
   1b4c8:	cmp	r3, sl
   1b4cc:	mov	r5, r3
   1b4d0:	bge	1b430 <__assert_fail@plt+0x9a74>
   1b4d4:	str	r1, [r2, r3, lsl #2]
   1b4d8:	add	r3, r3, #1
   1b4dc:	b	1b4c8 <__assert_fail@plt+0x9b0c>
   1b4e0:	mov	r6, r5
   1b4e4:	add	r3, r4, #16
   1b4e8:	ldr	ip, [r4, #64]	; 0x40
   1b4ec:	ldm	r3, {r0, r1}
   1b4f0:	add	sl, sp, #24
   1b4f4:	cmp	ip, #0
   1b4f8:	sub	r2, r7, r6
   1b4fc:	str	r3, [sp, #4]
   1b500:	stm	sl, {r0, r1}
   1b504:	beq	1b658 <__assert_fail@plt+0x9c9c>
   1b508:	ldr	r0, [r4, #80]	; 0x50
   1b50c:	mov	r3, #0
   1b510:	cmp	r2, r0
   1b514:	movlt	r0, r2
   1b518:	add	r9, sp, #32
   1b51c:	cmp	r3, r0
   1b520:	blt	1b634 <__assert_fail@plt+0x9c78>
   1b524:	ldr	r3, [sp, #4]
   1b528:	mov	r1, r9
   1b52c:	add	r0, sp, #20
   1b530:	bl	1a434 <__assert_fail@plt+0x8a78>
   1b534:	sub	r3, r0, #1
   1b538:	cmn	r3, #4
   1b53c:	mov	r8, r0
   1b540:	str	r3, [sp, #8]
   1b544:	bhi	1b7dc <__assert_fail@plt+0x9e20>
   1b548:	ldr	r3, [sp, #20]
   1b54c:	mov	r0, r3
   1b550:	str	r3, [sp, #12]
   1b554:	bl	1195c <towupper@plt>
   1b558:	ldr	r3, [sp, #12]
   1b55c:	cmp	r3, r0
   1b560:	mov	fp, r0
   1b564:	beq	1b768 <__assert_fail@plt+0x9dac>
   1b568:	mov	r1, r0
   1b56c:	mov	r2, sl
   1b570:	add	r0, sp, #32
   1b574:	bl	1153c <wcrtomb@plt>
   1b578:	cmp	r8, r0
   1b57c:	mov	r3, r0
   1b580:	moveq	r2, r8
   1b584:	ldreq	r0, [r4, #4]
   1b588:	addeq	r1, sp, #32
   1b58c:	beq	1b774 <__assert_fail@plt+0x9db8>
   1b590:	cmn	r3, #1
   1b594:	beq	1b768 <__assert_fail@plt+0x9dac>
   1b598:	ldr	r0, [r4, #36]	; 0x24
   1b59c:	add	r9, r3, r6
   1b5a0:	cmp	r9, r0
   1b5a4:	bls	1b66c <__assert_fail@plt+0x9cb0>
   1b5a8:	ldm	sl, {r0, r1}
   1b5ac:	ldr	r3, [sp, #4]
   1b5b0:	stm	r3, {r0, r1}
   1b5b4:	str	r6, [r4, #28]
   1b5b8:	b	1b624 <__assert_fail@plt+0x9c68>
   1b5bc:	ldr	r3, [r4, #24]
   1b5c0:	ldr	r1, [r4]
   1b5c4:	add	r3, r5, r3
   1b5c8:	ldr	r0, [r4, #4]
   1b5cc:	mov	r2, sl
   1b5d0:	add	r1, r1, r3
   1b5d4:	b	1b4ac <__assert_fail@plt+0x9af0>
   1b5d8:	cmn	r3, #3
   1b5dc:	bne	1b5f0 <__assert_fail@plt+0x9c34>
   1b5e0:	ldr	r2, [r4, #36]	; 0x24
   1b5e4:	ldr	r3, [r4, #48]	; 0x30
   1b5e8:	cmp	r2, r3
   1b5ec:	blt	1b618 <__assert_fail@plt+0x9c5c>
   1b5f0:	ldr	r3, [r4, #4]
   1b5f4:	ldr	r2, [sp, #4]
   1b5f8:	cmn	sl, #1
   1b5fc:	strb	r9, [r3, r5]
   1b600:	ldr	r3, [r4, #8]
   1b604:	add	r5, r5, #1
   1b608:	str	r9, [r3, r2, lsl #2]
   1b60c:	ldmeq	r8, {r0, r1}
   1b610:	stmeq	r6, {r0, r1}
   1b614:	b	1b430 <__assert_fail@plt+0x9a74>
   1b618:	ldm	r8, {r0, r1}
   1b61c:	stm	r6, {r0, r1}
   1b620:	str	r5, [r4, #28]
   1b624:	mov	r0, #0
   1b628:	str	r5, [r4, #32]
   1b62c:	add	sp, sp, #100	; 0x64
   1b630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b634:	ldr	r1, [r4]
   1b638:	ldr	lr, [r4, #24]
   1b63c:	add	r1, r1, r5
   1b640:	add	r1, r1, r3
   1b644:	ldrb	r1, [r1, lr]
   1b648:	ldrb	r1, [ip, r1]
   1b64c:	strb	r1, [r9, r3]
   1b650:	add	r3, r3, #1
   1b654:	b	1b51c <__assert_fail@plt+0x9b60>
   1b658:	ldr	r9, [r4, #24]
   1b65c:	add	r3, r5, r9
   1b660:	ldr	r9, [r4]
   1b664:	add	r9, r9, r3
   1b668:	b	1b524 <__assert_fail@plt+0x9b68>
   1b66c:	ldr	r2, [r4, #12]
   1b670:	cmp	r2, #0
   1b674:	bne	1b698 <__assert_fail@plt+0x9cdc>
   1b678:	lsl	r0, r0, #2
   1b67c:	str	r3, [sp, #4]
   1b680:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   1b684:	ldr	r3, [sp, #4]
   1b688:	cmp	r0, #0
   1b68c:	str	r0, [r4, #12]
   1b690:	moveq	r0, #12
   1b694:	beq	1b62c <__assert_fail@plt+0x9c70>
   1b698:	ldrb	r2, [r4, #76]	; 0x4c
   1b69c:	cmp	r2, #0
   1b6a0:	beq	1b734 <__assert_fail@plt+0x9d78>
   1b6a4:	ldr	r0, [r4, #4]
   1b6a8:	mov	r2, r3
   1b6ac:	add	r1, sp, #32
   1b6b0:	add	r0, r0, r6
   1b6b4:	str	r3, [sp, #4]
   1b6b8:	bl	115e4 <memcpy@plt>
   1b6bc:	ldr	r1, [r4, #8]
   1b6c0:	ldr	r0, [r4, #12]
   1b6c4:	lsl	r2, r6, #2
   1b6c8:	ldr	r3, [sp, #4]
   1b6cc:	add	ip, r1, r2
   1b6d0:	str	fp, [r1, r6, lsl #2]
   1b6d4:	mvn	lr, #0
   1b6d8:	add	r1, r0, r2
   1b6dc:	mov	r2, #1
   1b6e0:	str	r5, [r0, r6, lsl #2]
   1b6e4:	cmp	r2, r3
   1b6e8:	bcc	1b748 <__assert_fail@plt+0x9d8c>
   1b6ec:	ldr	r2, [r4, #52]	; 0x34
   1b6f0:	ldr	r7, [r4, #48]	; 0x30
   1b6f4:	cmp	r5, r2
   1b6f8:	sub	r3, r3, r8
   1b6fc:	ldrlt	r2, [r4, #56]	; 0x38
   1b700:	add	r7, r3, r7
   1b704:	addlt	r3, r2, r3
   1b708:	strlt	r3, [r4, #56]	; 0x38
   1b70c:	ldr	r3, [r4, #36]	; 0x24
   1b710:	str	r7, [r4, #48]	; 0x30
   1b714:	cmp	r7, r3
   1b718:	movge	r7, r3
   1b71c:	mov	r6, r9
   1b720:	add	r5, r5, r8
   1b724:	b	1b3d4 <__assert_fail@plt+0x9a18>
   1b728:	ldr	r1, [r4, #12]
   1b72c:	str	r2, [r1, r2, lsl #2]
   1b730:	add	r2, r2, #1
   1b734:	cmp	r2, r6
   1b738:	bne	1b728 <__assert_fail@plt+0x9d6c>
   1b73c:	mov	r2, #1
   1b740:	strb	r2, [r4, #76]	; 0x4c
   1b744:	b	1b6a4 <__assert_fail@plt+0x9ce8>
   1b748:	ldr	r0, [sp, #8]
   1b74c:	cmp	r2, r8
   1b750:	movcc	r0, r2
   1b754:	add	r0, r5, r0
   1b758:	str	r0, [r1, r2, lsl #2]
   1b75c:	str	lr, [ip, r2, lsl #2]
   1b760:	add	r2, r2, #1
   1b764:	b	1b6e4 <__assert_fail@plt+0x9d28>
   1b768:	ldr	r0, [r4, #4]
   1b76c:	mov	r2, r8
   1b770:	mov	r1, r9
   1b774:	add	r0, r0, r6
   1b778:	bl	115e4 <memcpy@plt>
   1b77c:	ldrb	r3, [r4, #76]	; 0x4c
   1b780:	cmp	r3, #0
   1b784:	bne	1b7b8 <__assert_fail@plt+0x9dfc>
   1b788:	ldr	r2, [r4, #8]
   1b78c:	add	r5, r5, r8
   1b790:	add	r3, r6, #1
   1b794:	add	r8, r6, r8
   1b798:	mvn	r1, #0
   1b79c:	str	fp, [r2, r6, lsl #2]
   1b7a0:	cmp	r3, r8
   1b7a4:	mov	r6, r3
   1b7a8:	bge	1b3d4 <__assert_fail@plt+0x9a18>
   1b7ac:	str	r1, [r2, r3, lsl #2]
   1b7b0:	add	r3, r3, #1
   1b7b4:	b	1b7a0 <__assert_fail@plt+0x9de4>
   1b7b8:	ldr	r2, [r4, #12]
   1b7bc:	mov	r3, #0
   1b7c0:	add	r2, r2, r6, lsl #2
   1b7c4:	add	r1, r5, r3
   1b7c8:	str	r1, [r2, r3, lsl #2]
   1b7cc:	add	r3, r3, #1
   1b7d0:	cmp	r8, r3
   1b7d4:	bne	1b7c4 <__assert_fail@plt+0x9e08>
   1b7d8:	b	1b788 <__assert_fail@plt+0x9dcc>
   1b7dc:	sub	r3, r0, #1
   1b7e0:	cmn	r3, #3
   1b7e4:	bne	1b7f8 <__assert_fail@plt+0x9e3c>
   1b7e8:	ldr	r2, [r4, #36]	; 0x24
   1b7ec:	ldr	r3, [r4, #48]	; 0x30
   1b7f0:	cmp	r2, r3
   1b7f4:	blt	1b5a8 <__assert_fail@plt+0x9bec>
   1b7f8:	ldr	r3, [r4]
   1b7fc:	ldr	r2, [r4, #24]
   1b800:	add	r3, r3, r5
   1b804:	mov	r1, r6
   1b808:	ldrb	r3, [r3, r2]
   1b80c:	ldr	r2, [r4, #64]	; 0x40
   1b810:	cmp	r2, #0
   1b814:	ldrbne	r3, [r2, r3]
   1b818:	ldr	r2, [r4, #4]
   1b81c:	strb	r3, [r2, r6]
   1b820:	ldrb	r2, [r4, #76]	; 0x4c
   1b824:	cmp	r2, #0
   1b828:	ldrne	r2, [r4, #12]
   1b82c:	strne	r5, [r2, r6, lsl #2]
   1b830:	ldr	r2, [r4, #8]
   1b834:	cmn	r8, #1
   1b838:	add	r5, r5, #1
   1b83c:	str	r3, [r2, r1, lsl #2]
   1b840:	ldreq	r3, [sp, #4]
   1b844:	ldmeq	sl, {r0, r1}
   1b848:	add	r6, r6, #1
   1b84c:	stmeq	r3, {r0, r1}
   1b850:	b	1b3d4 <__assert_fail@plt+0x9a18>
   1b854:	push	{r4, r5, r6, lr}
   1b858:	mov	r4, r0
   1b85c:	ldr	r3, [r0, #36]	; 0x24
   1b860:	ldr	r6, [r0, #48]	; 0x30
   1b864:	ldr	r5, [r0, #28]
   1b868:	cmp	r3, r6
   1b86c:	movlt	r6, r3
   1b870:	cmp	r5, r6
   1b874:	blt	1b884 <__assert_fail@plt+0x9ec8>
   1b878:	str	r5, [r4, #28]
   1b87c:	str	r5, [r4, #32]
   1b880:	pop	{r4, r5, r6, pc}
   1b884:	ldr	r3, [r4]
   1b888:	ldr	r2, [r4, #24]
   1b88c:	add	r3, r3, r5
   1b890:	ldrb	r0, [r3, r2]
   1b894:	ldr	r3, [r4, #64]	; 0x40
   1b898:	cmp	r3, #0
   1b89c:	ldrbne	r0, [r3, r0]
   1b8a0:	bl	118b4 <toupper@plt>
   1b8a4:	ldr	r3, [r4, #4]
   1b8a8:	strb	r0, [r3, r5]
   1b8ac:	add	r5, r5, #1
   1b8b0:	b	1b870 <__assert_fail@plt+0x9eb4>
   1b8b4:	ldr	r3, [r0, #36]	; 0x24
   1b8b8:	push	{r4, r5, r6, lr}
   1b8bc:	cmn	r3, #-536870910	; 0xe0000002
   1b8c0:	bls	1b8d0 <__assert_fail@plt+0x9f14>
   1b8c4:	mov	r5, #12
   1b8c8:	mov	r0, r5
   1b8cc:	pop	{r4, r5, r6, pc}
   1b8d0:	ldr	r2, [r0, #48]	; 0x30
   1b8d4:	lsl	r3, r3, #1
   1b8d8:	cmp	r3, r2
   1b8dc:	movge	r3, r2
   1b8e0:	cmp	r3, r1
   1b8e4:	movge	r1, r3
   1b8e8:	mov	r4, r0
   1b8ec:	bl	1ace0 <__assert_fail@plt+0x9324>
   1b8f0:	subs	r5, r0, #0
   1b8f4:	bne	1b8c8 <__assert_fail@plt+0x9f0c>
   1b8f8:	ldr	r0, [r4, #100]	; 0x64
   1b8fc:	cmp	r0, #0
   1b900:	beq	1b920 <__assert_fail@plt+0x9f64>
   1b904:	ldr	r1, [r4, #36]	; 0x24
   1b908:	add	r1, r1, #1
   1b90c:	lsl	r1, r1, #2
   1b910:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1b914:	cmp	r0, #0
   1b918:	beq	1b8c4 <__assert_fail@plt+0x9f08>
   1b91c:	str	r0, [r4, #100]	; 0x64
   1b920:	ldrb	r3, [r4, #72]	; 0x48
   1b924:	cmp	r3, #0
   1b928:	ldr	r3, [r4, #80]	; 0x50
   1b92c:	beq	1b94c <__assert_fail@plt+0x9f90>
   1b930:	cmp	r3, #1
   1b934:	mov	r0, r4
   1b938:	ble	1b944 <__assert_fail@plt+0x9f88>
   1b93c:	pop	{r4, r5, r6, lr}
   1b940:	b	1b384 <__assert_fail@plt+0x99c8>
   1b944:	bl	1b854 <__assert_fail@plt+0x9e98>
   1b948:	b	1b8c8 <__assert_fail@plt+0x9f0c>
   1b94c:	cmp	r3, #1
   1b950:	ble	1b960 <__assert_fail@plt+0x9fa4>
   1b954:	mov	r0, r4
   1b958:	bl	1b230 <__assert_fail@plt+0x9874>
   1b95c:	b	1b8c8 <__assert_fail@plt+0x9f0c>
   1b960:	ldr	r3, [r4, #64]	; 0x40
   1b964:	cmp	r3, #0
   1b968:	beq	1b8c8 <__assert_fail@plt+0x9f0c>
   1b96c:	mov	r0, r4
   1b970:	bl	1a674 <__assert_fail@plt+0x8cb8>
   1b974:	b	1b8c8 <__assert_fail@plt+0x9f0c>
   1b978:	push	{r4, lr}
   1b97c:	mov	r4, r0
   1b980:	ldr	r0, [r0]
   1b984:	bl	1a30c <__assert_fail@plt+0x8950>
   1b988:	ldr	r0, [r4, #4]
   1b98c:	bl	1a30c <__assert_fail@plt+0x8950>
   1b990:	ldr	r0, [r4, #8]
   1b994:	bl	1a30c <__assert_fail@plt+0x8950>
   1b998:	ldr	r0, [r4, #12]
   1b99c:	bl	1a30c <__assert_fail@plt+0x8950>
   1b9a0:	mov	r0, r4
   1b9a4:	pop	{r4, lr}
   1b9a8:	b	1a30c <__assert_fail@plt+0x8950>
   1b9ac:	ldr	r2, [r0, #4]
   1b9b0:	ldr	r3, [pc, #32]	; 1b9d8 <__assert_fail@plt+0xa01c>
   1b9b4:	and	r3, r3, r2
   1b9b8:	cmp	r3, #6
   1b9bc:	bne	1b9c8 <__assert_fail@plt+0xa00c>
   1b9c0:	ldr	r0, [r0]
   1b9c4:	b	1b978 <__assert_fail@plt+0x9fbc>
   1b9c8:	cmp	r3, #3
   1b9cc:	bxne	lr
   1b9d0:	ldr	r0, [r0]
   1b9d4:	b	1a30c <__assert_fail@plt+0x8950>
   1b9d8:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   1b9dc:	add	r0, r1, #20
   1b9e0:	push	{r4, lr}
   1b9e4:	bl	1b9ac <__assert_fail@plt+0x9ff0>
   1b9e8:	mov	r0, #0
   1b9ec:	pop	{r4, pc}
   1b9f0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9f4:	mov	r4, r0
   1b9f8:	ldr	r6, [r0, #4]
   1b9fc:	ldr	r3, [r0, #8]
   1ba00:	stm	sp, {r1, r2}
   1ba04:	cmp	r3, r6
   1ba08:	mov	r7, sp
   1ba0c:	ldrb	r5, [sp, #4]
   1ba10:	bcc	1bae4 <__assert_fail@plt+0xa128>
   1ba14:	ldr	r3, [pc, #376]	; 1bb94 <__assert_fail@plt+0xa1d8>
   1ba18:	lsl	r8, r6, #1
   1ba1c:	cmp	r8, r3
   1ba20:	bls	1ba30 <__assert_fail@plt+0xa074>
   1ba24:	mvn	r0, #0
   1ba28:	add	sp, sp, #12
   1ba2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba30:	lsl	r1, r6, #4
   1ba34:	ldr	r0, [r0]
   1ba38:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1ba3c:	cmp	r0, #0
   1ba40:	beq	1ba24 <__assert_fail@plt+0xa068>
   1ba44:	lsl	r6, r6, #3
   1ba48:	mov	r1, r6
   1ba4c:	str	r0, [r4]
   1ba50:	ldr	r0, [r4, #12]
   1ba54:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1ba58:	mov	r1, r6
   1ba5c:	mov	r6, #12
   1ba60:	mul	r6, r6, r8
   1ba64:	mov	sl, r0
   1ba68:	ldr	r0, [r4, #16]
   1ba6c:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1ba70:	mov	r1, r6
   1ba74:	mov	fp, r0
   1ba78:	ldr	r0, [r4, #20]
   1ba7c:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1ba80:	mov	r1, r6
   1ba84:	mov	r9, r0
   1ba88:	ldr	r0, [r4, #24]
   1ba8c:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1ba90:	cmp	fp, #0
   1ba94:	cmpne	sl, #0
   1ba98:	mov	r6, r0
   1ba9c:	beq	1baac <__assert_fail@plt+0xa0f0>
   1baa0:	cmp	r0, #0
   1baa4:	cmpne	r9, #0
   1baa8:	bne	1bad0 <__assert_fail@plt+0xa114>
   1baac:	mov	r0, sl
   1bab0:	bl	1a30c <__assert_fail@plt+0x8950>
   1bab4:	mov	r0, fp
   1bab8:	bl	1a30c <__assert_fail@plt+0x8950>
   1babc:	mov	r0, r9
   1bac0:	bl	1a30c <__assert_fail@plt+0x8950>
   1bac4:	mov	r0, r6
   1bac8:	bl	1a30c <__assert_fail@plt+0x8950>
   1bacc:	b	1ba24 <__assert_fail@plt+0xa068>
   1bad0:	str	sl, [r4, #12]
   1bad4:	str	fp, [r4, #16]
   1bad8:	str	r9, [r4, #20]
   1badc:	str	r0, [r4, #24]
   1bae0:	str	r8, [r4, #4]
   1bae4:	ldr	ip, [r4, #8]
   1bae8:	ldr	r3, [r4]
   1baec:	ldm	r7, {r0, r1}
   1baf0:	add	r3, r3, ip, lsl #3
   1baf4:	cmp	r5, #5
   1baf8:	stm	r3, {r0, r1}
   1bafc:	subne	r5, r5, #6
   1bb00:	bic	r1, r1, #261120	; 0x3fc00
   1bb04:	bic	r1, r1, #768	; 0x300
   1bb08:	clzne	r5, r5
   1bb0c:	str	r1, [r3, #4]
   1bb10:	lsrne	r5, r5, #5
   1bb14:	bne	1bb28 <__assert_fail@plt+0xa16c>
   1bb18:	ldr	r5, [r4, #92]	; 0x5c
   1bb1c:	cmp	r5, #1
   1bb20:	movle	r5, #0
   1bb24:	movgt	r5, #1
   1bb28:	ldrb	r2, [r3, #6]
   1bb2c:	bic	r2, r2, #16
   1bb30:	orr	r5, r2, r5, lsl #4
   1bb34:	strb	r5, [r3, #6]
   1bb38:	ldr	r3, [r4, #12]
   1bb3c:	mvn	r2, #0
   1bb40:	str	r2, [r3, ip, lsl #2]
   1bb44:	ldr	r1, [r4, #8]
   1bb48:	mov	r2, #12
   1bb4c:	ldr	ip, [r4, #20]
   1bb50:	mul	r1, r2, r1
   1bb54:	mov	r3, #0
   1bb58:	add	r0, ip, r1
   1bb5c:	str	r3, [ip, r1]
   1bb60:	str	r3, [r0, #4]
   1bb64:	str	r3, [r0, #8]
   1bb68:	ldr	r1, [r4, #8]
   1bb6c:	ldr	r0, [r4, #24]
   1bb70:	mul	r2, r2, r1
   1bb74:	add	r1, r0, r2
   1bb78:	str	r3, [r0, r2]
   1bb7c:	str	r3, [r1, #4]
   1bb80:	str	r3, [r1, #8]
   1bb84:	ldr	r0, [r4, #8]
   1bb88:	add	r3, r0, #1
   1bb8c:	str	r3, [r4, #8]
   1bb90:	b	1ba28 <__assert_fail@plt+0xa06c>
   1bb94:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   1bb98:	ldr	r3, [r0]
   1bb9c:	push	{r4, r5, r6, r7, r8, lr}
   1bba0:	lsl	r7, r1, #3
   1bba4:	add	r3, r3, r7
   1bba8:	mov	r6, r1
   1bbac:	mov	r4, r2
   1bbb0:	ldm	r3, {r1, r2}
   1bbb4:	mov	r5, r0
   1bbb8:	bl	1b9f0 <__assert_fail@plt+0xa034>
   1bbbc:	cmn	r0, #1
   1bbc0:	popeq	{r4, r5, r6, r7, r8, pc}
   1bbc4:	ldr	lr, [r5]
   1bbc8:	ldr	ip, [pc, #80]	; 1bc20 <__assert_fail@plt+0xa264>
   1bbcc:	add	r1, lr, r0, lsl #3
   1bbd0:	and	r2, r4, ip
   1bbd4:	ldr	r3, [r1, #4]
   1bbd8:	ldr	r4, [pc, #68]	; 1bc24 <__assert_fail@plt+0xa268>
   1bbdc:	add	r7, lr, r7
   1bbe0:	bic	r3, r3, r4
   1bbe4:	orr	r3, r3, r2, lsl #8
   1bbe8:	str	r3, [r1, #4]
   1bbec:	ldr	lr, [r7, #4]
   1bbf0:	bic	r3, r3, r4
   1bbf4:	and	ip, ip, lr, lsr #8
   1bbf8:	orr	r2, r2, ip
   1bbfc:	orr	r3, r3, r2, lsl #8
   1bc00:	str	r3, [r1, #4]
   1bc04:	lsr	r2, r3, #16
   1bc08:	uxtb	r3, r2
   1bc0c:	orr	r3, r3, #4
   1bc10:	strb	r3, [r1, #6]
   1bc14:	ldr	r3, [r5, #16]
   1bc18:	str	r6, [r3, r0, lsl #2]
   1bc1c:	pop	{r4, r5, r6, r7, r8, pc}
   1bc20:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1bc24:	andeq	pc, r3, r0, lsl #30
   1bc28:	push	{r4, lr}
   1bc2c:	mov	r4, r0
   1bc30:	ldr	r0, [r0, #24]
   1bc34:	bl	1a30c <__assert_fail@plt+0x8950>
   1bc38:	ldr	r0, [r4, #36]	; 0x24
   1bc3c:	bl	1a30c <__assert_fail@plt+0x8950>
   1bc40:	ldr	r3, [r4, #40]	; 0x28
   1bc44:	add	r2, r4, #4
   1bc48:	cmp	r3, r2
   1bc4c:	beq	1bc60 <__assert_fail@plt+0xa2a4>
   1bc50:	ldr	r0, [r3, #8]
   1bc54:	bl	1a30c <__assert_fail@plt+0x8950>
   1bc58:	ldr	r0, [r4, #40]	; 0x28
   1bc5c:	bl	1a30c <__assert_fail@plt+0x8950>
   1bc60:	ldr	r0, [r4, #12]
   1bc64:	bl	1a30c <__assert_fail@plt+0x8950>
   1bc68:	ldr	r0, [r4, #48]	; 0x30
   1bc6c:	bl	1a30c <__assert_fail@plt+0x8950>
   1bc70:	ldr	r0, [r4, #44]	; 0x2c
   1bc74:	bl	1a30c <__assert_fail@plt+0x8950>
   1bc78:	mov	r0, r4
   1bc7c:	pop	{r4, lr}
   1bc80:	b	1a30c <__assert_fail@plt+0x8950>
   1bc84:	push	{r4, lr}
   1bc88:	mov	r4, r0
   1bc8c:	ldr	r0, [r0, #8]
   1bc90:	bl	1a30c <__assert_fail@plt+0x8950>
   1bc94:	ldr	r0, [r4, #12]
   1bc98:	bl	1a30c <__assert_fail@plt+0x8950>
   1bc9c:	ldrb	r3, [r4, #75]	; 0x4b
   1bca0:	cmp	r3, #0
   1bca4:	popeq	{r4, pc}
   1bca8:	ldr	r0, [r4, #4]
   1bcac:	pop	{r4, lr}
   1bcb0:	b	1a30c <__assert_fail@plt+0x8950>
   1bcb4:	ldr	r3, [r0]
   1bcb8:	push	{r4, r5, r6, r7, r8, lr}
   1bcbc:	cmp	r3, #0
   1bcc0:	mov	r4, r0
   1bcc4:	movne	r5, #0
   1bcc8:	bne	1bd58 <__assert_fail@plt+0xa39c>
   1bccc:	ldr	r0, [r4, #12]
   1bcd0:	bl	1a30c <__assert_fail@plt+0x8950>
   1bcd4:	mov	r5, #0
   1bcd8:	mov	r6, r5
   1bcdc:	ldr	r3, [r4, #8]
   1bce0:	cmp	r3, r6
   1bce4:	bhi	1bd68 <__assert_fail@plt+0xa3ac>
   1bce8:	ldr	r0, [r4, #20]
   1bcec:	bl	1a30c <__assert_fail@plt+0x8950>
   1bcf0:	ldr	r0, [r4, #24]
   1bcf4:	bl	1a30c <__assert_fail@plt+0x8950>
   1bcf8:	ldr	r0, [r4, #28]
   1bcfc:	bl	1a30c <__assert_fail@plt+0x8950>
   1bd00:	ldr	r0, [r4]
   1bd04:	bl	1a30c <__assert_fail@plt+0x8950>
   1bd08:	ldr	r3, [r4, #32]
   1bd0c:	cmp	r3, #0
   1bd10:	movne	r6, #0
   1bd14:	movne	r8, #12
   1bd18:	bne	1bde0 <__assert_fail@plt+0xa424>
   1bd1c:	ldr	r0, [r4, #32]
   1bd20:	bl	1a30c <__assert_fail@plt+0x8950>
   1bd24:	ldr	r0, [r4, #60]	; 0x3c
   1bd28:	ldr	r3, [pc, #220]	; 1be0c <__assert_fail@plt+0xa450>
   1bd2c:	cmp	r0, r3
   1bd30:	bne	1be04 <__assert_fail@plt+0xa448>
   1bd34:	ldr	r0, [r4, #132]	; 0x84
   1bd38:	bl	1a30c <__assert_fail@plt+0x8950>
   1bd3c:	mov	r0, r4
   1bd40:	pop	{r4, r5, r6, r7, r8, lr}
   1bd44:	b	1a30c <__assert_fail@plt+0x8950>
   1bd48:	ldr	r0, [r4]
   1bd4c:	add	r0, r0, r5, lsl #3
   1bd50:	bl	1b9ac <__assert_fail@plt+0x9ff0>
   1bd54:	add	r5, r5, #1
   1bd58:	ldr	r3, [r4, #8]
   1bd5c:	cmp	r3, r5
   1bd60:	bhi	1bd48 <__assert_fail@plt+0xa38c>
   1bd64:	b	1bccc <__assert_fail@plt+0xa310>
   1bd68:	ldr	r3, [r4, #24]
   1bd6c:	cmp	r3, #0
   1bd70:	beq	1bd80 <__assert_fail@plt+0xa3c4>
   1bd74:	add	r3, r3, r5
   1bd78:	ldr	r0, [r3, #8]
   1bd7c:	bl	1a30c <__assert_fail@plt+0x8950>
   1bd80:	ldr	r3, [r4, #28]
   1bd84:	cmp	r3, #0
   1bd88:	beq	1bd98 <__assert_fail@plt+0xa3dc>
   1bd8c:	add	r3, r3, r5
   1bd90:	ldr	r0, [r3, #8]
   1bd94:	bl	1a30c <__assert_fail@plt+0x8950>
   1bd98:	ldr	r3, [r4, #20]
   1bd9c:	cmp	r3, #0
   1bda0:	beq	1bdb0 <__assert_fail@plt+0xa3f4>
   1bda4:	add	r3, r3, r5
   1bda8:	ldr	r0, [r3, #8]
   1bdac:	bl	1a30c <__assert_fail@plt+0x8950>
   1bdb0:	add	r6, r6, #1
   1bdb4:	add	r5, r5, #12
   1bdb8:	b	1bcdc <__assert_fail@plt+0xa320>
   1bdbc:	ldr	r5, [r4, #32]
   1bdc0:	mov	r7, #0
   1bdc4:	mla	r5, r8, r6, r5
   1bdc8:	ldr	r3, [r5]
   1bdcc:	cmp	r7, r3
   1bdd0:	blt	1bdf0 <__assert_fail@plt+0xa434>
   1bdd4:	ldr	r0, [r5, #8]
   1bdd8:	bl	1a30c <__assert_fail@plt+0x8950>
   1bddc:	add	r6, r6, #1
   1bde0:	ldr	r3, [r4, #68]	; 0x44
   1bde4:	cmp	r3, r6
   1bde8:	bcs	1bdbc <__assert_fail@plt+0xa400>
   1bdec:	b	1bd1c <__assert_fail@plt+0xa360>
   1bdf0:	ldr	r3, [r5, #8]
   1bdf4:	ldr	r0, [r3, r7, lsl #2]
   1bdf8:	bl	1bc28 <__assert_fail@plt+0xa26c>
   1bdfc:	add	r7, r7, #1
   1be00:	b	1bdc8 <__assert_fail@plt+0xa40c>
   1be04:	bl	1a30c <__assert_fail@plt+0x8950>
   1be08:	b	1bd34 <__assert_fail@plt+0xa378>
   1be0c:	andeq	r8, r2, r8, ror #28
   1be10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1be14:	mov	r5, #0
   1be18:	mov	r6, r0
   1be1c:	mov	r8, r5
   1be20:	ldr	r3, [r6, #124]	; 0x7c
   1be24:	cmp	r5, r3
   1be28:	blt	1be38 <__assert_fail@plt+0xa47c>
   1be2c:	str	r8, [r6, #124]	; 0x7c
   1be30:	str	r8, [r6, #108]	; 0x6c
   1be34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1be38:	ldr	r3, [r6, #132]	; 0x84
   1be3c:	mov	r7, #0
   1be40:	ldr	r4, [r3, r5, lsl #2]
   1be44:	ldr	r3, [r4, #16]
   1be48:	cmp	r7, r3
   1be4c:	blt	1be84 <__assert_fail@plt+0xa4c8>
   1be50:	ldr	r0, [r4, #20]
   1be54:	bl	1a30c <__assert_fail@plt+0x8950>
   1be58:	ldr	r3, [r4, #8]
   1be5c:	cmp	r3, #0
   1be60:	beq	1be74 <__assert_fail@plt+0xa4b8>
   1be64:	ldr	r0, [r3, #8]
   1be68:	bl	1a30c <__assert_fail@plt+0x8950>
   1be6c:	ldr	r0, [r4, #8]
   1be70:	bl	1a30c <__assert_fail@plt+0x8950>
   1be74:	mov	r0, r4
   1be78:	bl	1a30c <__assert_fail@plt+0x8950>
   1be7c:	add	r5, r5, #1
   1be80:	b	1be20 <__assert_fail@plt+0xa464>
   1be84:	ldr	r3, [r4, #20]
   1be88:	ldr	r9, [r3, r7, lsl #2]
   1be8c:	add	r7, r7, #1
   1be90:	ldr	r0, [r9, #16]
   1be94:	bl	1a30c <__assert_fail@plt+0x8950>
   1be98:	mov	r0, r9
   1be9c:	bl	1a30c <__assert_fail@plt+0x8950>
   1bea0:	b	1be44 <__assert_fail@plt+0xa488>
   1bea4:	push	{r4, r5, r6, r7, r8, lr}
   1bea8:	subs	r4, r0, #0
   1beac:	movne	r5, #0
   1beb0:	movne	r7, #24
   1beb4:	bne	1bee8 <__assert_fail@plt+0xa52c>
   1beb8:	mov	r0, #0
   1bebc:	pop	{r4, r5, r6, r7, r8, pc}
   1bec0:	mul	r6, r7, r5
   1bec4:	ldr	r2, [r4, #8]
   1bec8:	add	r5, r5, #1
   1becc:	add	r2, r2, r6
   1bed0:	ldr	r0, [r2, #20]
   1bed4:	bl	1a30c <__assert_fail@plt+0x8950>
   1bed8:	ldr	r3, [r4, #8]
   1bedc:	add	r3, r3, r6
   1bee0:	ldr	r0, [r3, #8]
   1bee4:	bl	1a30c <__assert_fail@plt+0x8950>
   1bee8:	ldr	r3, [r4]
   1beec:	cmp	r5, r3
   1bef0:	blt	1bec0 <__assert_fail@plt+0xa504>
   1bef4:	ldr	r0, [r4, #8]
   1bef8:	bl	1a30c <__assert_fail@plt+0x8950>
   1befc:	b	1beb8 <__assert_fail@plt+0xa4fc>
   1bf00:	mov	r3, r1
   1bf04:	ldr	r2, [r1, #28]
   1bf08:	ldrb	r1, [r1, #24]
   1bf0c:	sub	r1, r1, #2
   1bf10:	cmp	r1, #14
   1bf14:	ldrls	pc, [pc, r1, lsl #2]
   1bf18:	b	1c024 <__assert_fail@plt+0xa668>
   1bf1c:	andeq	ip, r1, r4, lsr r0
   1bf20:	andeq	ip, r1, r4, lsr #32
   1bf24:	andeq	ip, r1, r0
   1bf28:	andeq	ip, r1, r4, lsr #32
   1bf2c:	andeq	ip, r1, r4, lsr #32
   1bf30:	andeq	ip, r1, r4, lsr #32
   1bf34:	andeq	fp, r1, r8, ror #31
   1bf38:	andeq	fp, r1, r8, ror #31
   1bf3c:	andeq	fp, r1, r8, asr pc
   1bf40:	andeq	fp, r1, r8, asr pc
   1bf44:	andeq	fp, r1, r8, ror #31
   1bf48:	andeq	ip, r1, r4, lsr #32
   1bf4c:	andeq	ip, r1, r4, lsr #32
   1bf50:	andeq	ip, r1, r4, lsr #32
   1bf54:	andeq	ip, r1, r4, lsr r0
   1bf58:	ldrb	r1, [r0, #88]	; 0x58
   1bf5c:	push	{r4, r5, r6, r7, r8, lr}
   1bf60:	mov	r4, #12
   1bf64:	orr	r1, r1, #1
   1bf68:	strb	r1, [r0, #88]	; 0x58
   1bf6c:	ldr	r1, [r3, #4]
   1bf70:	mul	r2, r4, r2
   1bf74:	cmp	r1, #0
   1bf78:	mov	r7, #2
   1bf7c:	ldreq	r1, [r3, #16]
   1bf80:	ldrne	r1, [r1, #12]
   1bf84:	ldr	r8, [r1, #28]
   1bf88:	ldr	r1, [r3, #8]
   1bf8c:	cmp	r1, #0
   1bf90:	ldrne	r3, [r1, #12]
   1bf94:	ldreq	r3, [r3, #16]
   1bf98:	ldr	r5, [r3, #28]
   1bf9c:	ldr	r3, [r0, #20]
   1bfa0:	mov	r0, #8
   1bfa4:	add	r6, r3, r2
   1bfa8:	str	r7, [r3, r2]
   1bfac:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   1bfb0:	cmp	r0, #0
   1bfb4:	str	r0, [r6, #8]
   1bfb8:	beq	1c03c <__assert_fail@plt+0xa680>
   1bfbc:	cmp	r8, r5
   1bfc0:	moveq	r3, #1
   1bfc4:	streq	r3, [r6, #4]
   1bfc8:	streq	r8, [r0]
   1bfcc:	beq	1bfe0 <__assert_fail@plt+0xa624>
   1bfd0:	str	r7, [r6, #4]
   1bfd4:	strlt	r8, [r0]
   1bfd8:	strlt	r5, [r0, #4]
   1bfdc:	stmge	r0, {r5, r8}
   1bfe0:	mov	r0, #0
   1bfe4:	pop	{r4, r5, r6, r7, r8, pc}
   1bfe8:	ldr	r1, [r3, #16]
   1bfec:	ldr	r3, [r0, #20]
   1bff0:	ldr	r1, [r1, #28]
   1bff4:	mov	r0, #12
   1bff8:	mla	r0, r0, r2, r3
   1bffc:	b	1b0e0 <__assert_fail@plt+0x9724>
   1c000:	ldr	r1, [r3, #16]
   1c004:	ldr	ip, [r0, #12]
   1c008:	ldr	r1, [r1, #28]
   1c00c:	str	r1, [ip, r2, lsl #2]
   1c010:	ldrb	r3, [r3, #24]
   1c014:	cmp	r3, #4
   1c018:	bne	1c034 <__assert_fail@plt+0xa678>
   1c01c:	ldr	r3, [r0, #20]
   1c020:	b	1bff4 <__assert_fail@plt+0xa638>
   1c024:	ldr	r3, [r3, #16]
   1c028:	ldr	r1, [r3, #28]
   1c02c:	ldr	r3, [r0, #12]
   1c030:	str	r1, [r3, r2, lsl #2]
   1c034:	mov	r0, #0
   1c038:	bx	lr
   1c03c:	mov	r0, r4
   1c040:	pop	{r4, r5, r6, r7, r8, pc}
   1c044:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c048:	mov	r4, r0
   1c04c:	ldr	sl, [r0, #84]	; 0x54
   1c050:	mov	r9, r1
   1c054:	mov	r6, r2
   1c058:	mov	r5, #0
   1c05c:	mov	r7, #24
   1c060:	mov	r8, #1
   1c064:	ldr	r3, [r9, #4]
   1c068:	cmp	r5, r3
   1c06c:	blt	1c07c <__assert_fail@plt+0xa6c0>
   1c070:	mov	r0, #0
   1c074:	add	sp, sp, #12
   1c078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c07c:	ldr	r3, [r9, #8]
   1c080:	ldr	fp, [r3, r5, lsl #2]
   1c084:	ldr	r3, [sl]
   1c088:	add	r2, r3, fp, lsl #3
   1c08c:	ldrb	r2, [r2, #4]
   1c090:	cmp	r2, #8
   1c094:	bne	1c138 <__assert_fail@plt+0xa77c>
   1c098:	ldr	r2, [r3, fp, lsl #3]
   1c09c:	cmp	r2, #31
   1c0a0:	bgt	1c138 <__assert_fail@plt+0xa77c>
   1c0a4:	ldr	r3, [sl, #80]	; 0x50
   1c0a8:	lsr	r3, r3, r2
   1c0ac:	tst	r3, #1
   1c0b0:	beq	1c138 <__assert_fail@plt+0xa77c>
   1c0b4:	ldr	r1, [r4, #128]	; 0x80
   1c0b8:	ldr	r3, [r4, #124]	; 0x7c
   1c0bc:	ldr	r0, [r4, #132]	; 0x84
   1c0c0:	cmp	r1, r3
   1c0c4:	bne	1c0ec <__assert_fail@plt+0xa730>
   1c0c8:	lsl	r3, r1, #1
   1c0cc:	lsl	r1, r1, #3
   1c0d0:	str	r3, [sp]
   1c0d4:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1c0d8:	cmp	r0, #0
   1c0dc:	beq	1c140 <__assert_fail@plt+0xa784>
   1c0e0:	ldr	r3, [sp]
   1c0e4:	str	r0, [r4, #132]	; 0x84
   1c0e8:	str	r3, [r4, #128]	; 0x80
   1c0ec:	ldr	r2, [r4, #124]	; 0x7c
   1c0f0:	ldr	r3, [r4, #132]	; 0x84
   1c0f4:	mov	r1, r7
   1c0f8:	mov	r0, r8
   1c0fc:	str	r2, [sp, #4]
   1c100:	str	r3, [sp]
   1c104:	bl	1a0b0 <__assert_fail@plt+0x86f4>
   1c108:	ldr	r3, [sp]
   1c10c:	ldr	r2, [sp, #4]
   1c110:	str	r0, [r3, r2, lsl #2]
   1c114:	ldr	r3, [r4, #124]	; 0x7c
   1c118:	ldr	r2, [r4, #132]	; 0x84
   1c11c:	ldr	r2, [r2, r3, lsl #2]
   1c120:	cmp	r2, #0
   1c124:	beq	1c140 <__assert_fail@plt+0xa784>
   1c128:	add	r3, r3, #1
   1c12c:	str	fp, [r2, #4]
   1c130:	str	r3, [r4, #124]	; 0x7c
   1c134:	str	r6, [r2]
   1c138:	add	r5, r5, #1
   1c13c:	b	1c064 <__assert_fail@plt+0xa6a8>
   1c140:	mov	r0, #12
   1c144:	b	1c074 <__assert_fail@plt+0xa6b8>
   1c148:	ldr	r3, [r0, #36]	; 0x24
   1c14c:	push	{r4, r5, r6, lr}
   1c150:	cmp	r3, r1
   1c154:	mov	r4, r0
   1c158:	mov	r5, r1
   1c15c:	ldr	r6, [r0, #104]	; 0x68
   1c160:	bgt	1c170 <__assert_fail@plt+0xa7b4>
   1c164:	ldr	r2, [r0, #48]	; 0x30
   1c168:	cmp	r3, r2
   1c16c:	blt	1c198 <__assert_fail@plt+0xa7dc>
   1c170:	ldr	r3, [r4, #28]
   1c174:	cmp	r5, r3
   1c178:	bge	1c18c <__assert_fail@plt+0xa7d0>
   1c17c:	cmp	r6, r5
   1c180:	blt	1c1b0 <__assert_fail@plt+0xa7f4>
   1c184:	mov	r0, #0
   1c188:	pop	{r4, r5, r6, pc}
   1c18c:	ldr	r2, [r4, #48]	; 0x30
   1c190:	cmp	r3, r2
   1c194:	bge	1c17c <__assert_fail@plt+0xa7c0>
   1c198:	add	r1, r5, #1
   1c19c:	mov	r0, r4
   1c1a0:	bl	1b8b4 <__assert_fail@plt+0x9ef8>
   1c1a4:	cmp	r0, #0
   1c1a8:	beq	1c17c <__assert_fail@plt+0xa7c0>
   1c1ac:	pop	{r4, r5, r6, pc}
   1c1b0:	sub	r2, r5, r6
   1c1b4:	ldr	r0, [r4, #100]	; 0x64
   1c1b8:	add	r6, r6, #1
   1c1bc:	lsl	r2, r2, #2
   1c1c0:	mov	r1, #0
   1c1c4:	add	r0, r0, r6, lsl #2
   1c1c8:	bl	11818 <memset@plt>
   1c1cc:	str	r5, [r4, #104]	; 0x68
   1c1d0:	b	1c184 <__assert_fail@plt+0xa7c8>
   1c1d4:	push	{r4, r5, r6, r7, r8, lr}
   1c1d8:	subs	r4, r0, #0
   1c1dc:	ldr	r7, [sp, #28]
   1c1e0:	beq	1c274 <__assert_fail@plt+0xa8b8>
   1c1e4:	ldr	r5, [r4]
   1c1e8:	cmp	r5, #0
   1c1ec:	beq	1c274 <__assert_fail@plt+0xa8b8>
   1c1f0:	sub	ip, r5, #1
   1c1f4:	mov	r5, #24
   1c1f8:	mov	r0, r3
   1c1fc:	mul	r5, r5, ip
   1c200:	ldr	r3, [r4, #8]
   1c204:	str	ip, [r4]
   1c208:	add	ip, r3, r5
   1c20c:	ldr	r3, [r3, r5]
   1c210:	lsl	r6, r2, #3
   1c214:	str	r3, [r1]
   1c218:	mov	r2, r6
   1c21c:	ldr	r1, [ip, #8]
   1c220:	bl	115e4 <memcpy@plt>
   1c224:	ldr	r3, [r4, #8]
   1c228:	mov	r2, r6
   1c22c:	add	r3, r3, r5
   1c230:	ldr	r0, [sp, #24]
   1c234:	ldr	r1, [r3, #8]
   1c238:	add	r1, r1, r6
   1c23c:	bl	115e4 <memcpy@plt>
   1c240:	ldr	r0, [r7, #8]
   1c244:	bl	1a30c <__assert_fail@plt+0x8950>
   1c248:	ldr	r3, [r4, #8]
   1c24c:	add	r3, r3, r5
   1c250:	ldr	r0, [r3, #8]
   1c254:	bl	1a30c <__assert_fail@plt+0x8950>
   1c258:	ldr	r3, [r4, #8]
   1c25c:	add	r5, r3, r5
   1c260:	add	r3, r5, #12
   1c264:	ldm	r3, {r0, r1, r2}
   1c268:	stm	r7, {r0, r1, r2}
   1c26c:	ldr	r0, [r5, #4]
   1c270:	pop	{r4, r5, r6, r7, r8, pc}
   1c274:	mvn	r0, #0
   1c278:	pop	{r4, r5, r6, r7, r8, pc}
   1c27c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c280:	mov	r9, r3
   1c284:	ldr	r3, [sp, #36]	; 0x24
   1c288:	mov	r5, r0
   1c28c:	tst	r3, #4194304	; 0x400000
   1c290:	mov	r4, r1
   1c294:	mov	r8, r2
   1c298:	ldr	r6, [sp, #32]
   1c29c:	beq	1c2d0 <__assert_fail@plt+0xa914>
   1c2a0:	mov	r0, r6
   1c2a4:	ldr	r1, [pc, #1816]	; 1c9c4 <__assert_fail@plt+0xb008>
   1c2a8:	bl	11554 <strcmp@plt>
   1c2ac:	cmp	r0, #0
   1c2b0:	ldreq	r6, [pc, #1808]	; 1c9c8 <__assert_fail@plt+0xb00c>
   1c2b4:	beq	1c2d0 <__assert_fail@plt+0xa914>
   1c2b8:	mov	r0, r6
   1c2bc:	ldr	r1, [pc, #1800]	; 1c9cc <__assert_fail@plt+0xb010>
   1c2c0:	bl	11554 <strcmp@plt>
   1c2c4:	ldr	r3, [pc, #1788]	; 1c9c8 <__assert_fail@plt+0xb00c>
   1c2c8:	cmp	r0, #0
   1c2cc:	moveq	r6, r3
   1c2d0:	ldr	r7, [r9]
   1c2d4:	ldr	r3, [r8, #36]	; 0x24
   1c2d8:	cmp	r7, r3
   1c2dc:	bne	1c304 <__assert_fail@plt+0xa948>
   1c2e0:	lsl	r7, r7, #1
   1c2e4:	add	r7, r7, #1
   1c2e8:	ldr	r0, [r8, #12]
   1c2ec:	lsl	r1, r7, #2
   1c2f0:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1c2f4:	cmp	r0, #0
   1c2f8:	beq	1c9b4 <__assert_fail@plt+0xaff8>
   1c2fc:	str	r0, [r8, #12]
   1c300:	str	r7, [r9]
   1c304:	ldr	r7, [r8, #36]	; 0x24
   1c308:	mov	r0, r6
   1c30c:	add	r3, r7, #1
   1c310:	str	r3, [r8, #36]	; 0x24
   1c314:	ldr	r9, [r8, #12]
   1c318:	bl	11524 <wctype@plt>
   1c31c:	ldr	r1, [pc, #1708]	; 1c9d0 <__assert_fail@plt+0xb014>
   1c320:	str	r0, [r9, r7, lsl #2]
   1c324:	mov	r0, r6
   1c328:	bl	11554 <strcmp@plt>
   1c32c:	subs	r7, r0, #0
   1c330:	bne	1c3b0 <__assert_fail@plt+0xa9f4>
   1c334:	cmp	r5, #0
   1c338:	beq	1c378 <__assert_fail@plt+0xa9bc>
   1c33c:	bl	1177c <__ctype_b_loc@plt>
   1c340:	mov	r6, r0
   1c344:	ldr	r2, [r6]
   1c348:	lsl	r3, r7, #1
   1c34c:	ldrh	r3, [r2, r3]
   1c350:	tst	r3, #8
   1c354:	beq	1c364 <__assert_fail@plt+0xa9a8>
   1c358:	ldrb	r1, [r5, r7]
   1c35c:	mov	r0, r4
   1c360:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c364:	add	r7, r7, #1
   1c368:	cmp	r7, #256	; 0x100
   1c36c:	bne	1c344 <__assert_fail@plt+0xa988>
   1c370:	mov	r0, #0
   1c374:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c378:	bl	1177c <__ctype_b_loc@plt>
   1c37c:	mov	r5, r0
   1c380:	ldr	r2, [r5]
   1c384:	lsl	r3, r7, #1
   1c388:	ldrh	r3, [r2, r3]
   1c38c:	tst	r3, #8
   1c390:	beq	1c3a0 <__assert_fail@plt+0xa9e4>
   1c394:	mov	r1, r7
   1c398:	mov	r0, r4
   1c39c:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c3a0:	add	r7, r7, #1
   1c3a4:	cmp	r7, #256	; 0x100
   1c3a8:	bne	1c380 <__assert_fail@plt+0xa9c4>
   1c3ac:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c3b0:	ldr	r1, [pc, #1564]	; 1c9d4 <__assert_fail@plt+0xb018>
   1c3b4:	mov	r0, r6
   1c3b8:	bl	11554 <strcmp@plt>
   1c3bc:	subs	r7, r0, #0
   1c3c0:	bne	1c43c <__assert_fail@plt+0xaa80>
   1c3c4:	cmp	r5, #0
   1c3c8:	beq	1c404 <__assert_fail@plt+0xaa48>
   1c3cc:	bl	1177c <__ctype_b_loc@plt>
   1c3d0:	mov	r6, r0
   1c3d4:	ldr	r2, [r6]
   1c3d8:	lsl	r3, r7, #1
   1c3dc:	ldrh	r3, [r2, r3]
   1c3e0:	tst	r3, #2
   1c3e4:	beq	1c3f4 <__assert_fail@plt+0xaa38>
   1c3e8:	ldrb	r1, [r5, r7]
   1c3ec:	mov	r0, r4
   1c3f0:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c3f4:	add	r7, r7, #1
   1c3f8:	cmp	r7, #256	; 0x100
   1c3fc:	bne	1c3d4 <__assert_fail@plt+0xaa18>
   1c400:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c404:	bl	1177c <__ctype_b_loc@plt>
   1c408:	mov	r5, r0
   1c40c:	ldr	r2, [r5]
   1c410:	lsl	r3, r7, #1
   1c414:	ldrh	r3, [r2, r3]
   1c418:	tst	r3, #2
   1c41c:	beq	1c42c <__assert_fail@plt+0xaa70>
   1c420:	mov	r1, r7
   1c424:	mov	r0, r4
   1c428:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c42c:	add	r7, r7, #1
   1c430:	cmp	r7, #256	; 0x100
   1c434:	bne	1c40c <__assert_fail@plt+0xaa50>
   1c438:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c43c:	ldr	r1, [pc, #1416]	; 1c9cc <__assert_fail@plt+0xb010>
   1c440:	mov	r0, r6
   1c444:	bl	11554 <strcmp@plt>
   1c448:	subs	r7, r0, #0
   1c44c:	bne	1c4c8 <__assert_fail@plt+0xab0c>
   1c450:	cmp	r5, #0
   1c454:	beq	1c490 <__assert_fail@plt+0xaad4>
   1c458:	bl	1177c <__ctype_b_loc@plt>
   1c45c:	mov	r6, r0
   1c460:	ldr	r2, [r6]
   1c464:	lsl	r3, r7, #1
   1c468:	ldrh	r3, [r2, r3]
   1c46c:	tst	r3, #512	; 0x200
   1c470:	beq	1c480 <__assert_fail@plt+0xaac4>
   1c474:	ldrb	r1, [r5, r7]
   1c478:	mov	r0, r4
   1c47c:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c480:	add	r7, r7, #1
   1c484:	cmp	r7, #256	; 0x100
   1c488:	bne	1c460 <__assert_fail@plt+0xaaa4>
   1c48c:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c490:	bl	1177c <__ctype_b_loc@plt>
   1c494:	mov	r5, r0
   1c498:	ldr	r2, [r5]
   1c49c:	lsl	r3, r7, #1
   1c4a0:	ldrh	r3, [r2, r3]
   1c4a4:	tst	r3, #512	; 0x200
   1c4a8:	beq	1c4b8 <__assert_fail@plt+0xaafc>
   1c4ac:	mov	r1, r7
   1c4b0:	mov	r0, r4
   1c4b4:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c4b8:	add	r7, r7, #1
   1c4bc:	cmp	r7, #256	; 0x100
   1c4c0:	bne	1c498 <__assert_fail@plt+0xaadc>
   1c4c4:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c4c8:	ldr	r1, [pc, #1288]	; 1c9d8 <__assert_fail@plt+0xb01c>
   1c4cc:	mov	r0, r6
   1c4d0:	bl	11554 <strcmp@plt>
   1c4d4:	subs	r7, r0, #0
   1c4d8:	bne	1c554 <__assert_fail@plt+0xab98>
   1c4dc:	cmp	r5, #0
   1c4e0:	beq	1c51c <__assert_fail@plt+0xab60>
   1c4e4:	bl	1177c <__ctype_b_loc@plt>
   1c4e8:	mov	r6, r0
   1c4ec:	ldr	r2, [r6]
   1c4f0:	lsl	r3, r7, #1
   1c4f4:	ldrh	r3, [r2, r3]
   1c4f8:	tst	r3, #8192	; 0x2000
   1c4fc:	beq	1c50c <__assert_fail@plt+0xab50>
   1c500:	ldrb	r1, [r5, r7]
   1c504:	mov	r0, r4
   1c508:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c50c:	add	r7, r7, #1
   1c510:	cmp	r7, #256	; 0x100
   1c514:	bne	1c4ec <__assert_fail@plt+0xab30>
   1c518:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c51c:	bl	1177c <__ctype_b_loc@plt>
   1c520:	mov	r5, r0
   1c524:	ldr	r2, [r5]
   1c528:	lsl	r3, r7, #1
   1c52c:	ldrh	r3, [r2, r3]
   1c530:	tst	r3, #8192	; 0x2000
   1c534:	beq	1c544 <__assert_fail@plt+0xab88>
   1c538:	mov	r1, r7
   1c53c:	mov	r0, r4
   1c540:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c544:	add	r7, r7, #1
   1c548:	cmp	r7, #256	; 0x100
   1c54c:	bne	1c524 <__assert_fail@plt+0xab68>
   1c550:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c554:	ldr	r1, [pc, #1132]	; 1c9c8 <__assert_fail@plt+0xb00c>
   1c558:	mov	r0, r6
   1c55c:	bl	11554 <strcmp@plt>
   1c560:	subs	r7, r0, #0
   1c564:	bne	1c5e0 <__assert_fail@plt+0xac24>
   1c568:	cmp	r5, #0
   1c56c:	beq	1c5a8 <__assert_fail@plt+0xabec>
   1c570:	bl	1177c <__ctype_b_loc@plt>
   1c574:	mov	r6, r0
   1c578:	ldr	r2, [r6]
   1c57c:	lsl	r3, r7, #1
   1c580:	ldrh	r3, [r2, r3]
   1c584:	tst	r3, #1024	; 0x400
   1c588:	beq	1c598 <__assert_fail@plt+0xabdc>
   1c58c:	ldrb	r1, [r5, r7]
   1c590:	mov	r0, r4
   1c594:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c598:	add	r7, r7, #1
   1c59c:	cmp	r7, #256	; 0x100
   1c5a0:	bne	1c578 <__assert_fail@plt+0xabbc>
   1c5a4:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c5a8:	bl	1177c <__ctype_b_loc@plt>
   1c5ac:	mov	r5, r0
   1c5b0:	ldr	r2, [r5]
   1c5b4:	lsl	r3, r7, #1
   1c5b8:	ldrh	r3, [r2, r3]
   1c5bc:	tst	r3, #1024	; 0x400
   1c5c0:	beq	1c5d0 <__assert_fail@plt+0xac14>
   1c5c4:	mov	r1, r7
   1c5c8:	mov	r0, r4
   1c5cc:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c5d0:	add	r7, r7, #1
   1c5d4:	cmp	r7, #256	; 0x100
   1c5d8:	bne	1c5b0 <__assert_fail@plt+0xabf4>
   1c5dc:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c5e0:	ldr	r1, [pc, #1012]	; 1c9dc <__assert_fail@plt+0xb020>
   1c5e4:	mov	r0, r6
   1c5e8:	bl	11554 <strcmp@plt>
   1c5ec:	subs	r7, r0, #0
   1c5f0:	bne	1c66c <__assert_fail@plt+0xacb0>
   1c5f4:	cmp	r5, #0
   1c5f8:	beq	1c634 <__assert_fail@plt+0xac78>
   1c5fc:	bl	1177c <__ctype_b_loc@plt>
   1c600:	mov	r6, r0
   1c604:	ldr	r2, [r6]
   1c608:	lsl	r3, r7, #1
   1c60c:	ldrh	r3, [r2, r3]
   1c610:	tst	r3, #2048	; 0x800
   1c614:	beq	1c624 <__assert_fail@plt+0xac68>
   1c618:	ldrb	r1, [r5, r7]
   1c61c:	mov	r0, r4
   1c620:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c624:	add	r7, r7, #1
   1c628:	cmp	r7, #256	; 0x100
   1c62c:	bne	1c604 <__assert_fail@plt+0xac48>
   1c630:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c634:	bl	1177c <__ctype_b_loc@plt>
   1c638:	mov	r5, r0
   1c63c:	ldr	r2, [r5]
   1c640:	lsl	r3, r7, #1
   1c644:	ldrh	r3, [r2, r3]
   1c648:	tst	r3, #2048	; 0x800
   1c64c:	beq	1c65c <__assert_fail@plt+0xaca0>
   1c650:	mov	r1, r7
   1c654:	mov	r0, r4
   1c658:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c65c:	add	r7, r7, #1
   1c660:	cmp	r7, #256	; 0x100
   1c664:	bne	1c63c <__assert_fail@plt+0xac80>
   1c668:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c66c:	ldr	r1, [pc, #876]	; 1c9e0 <__assert_fail@plt+0xb024>
   1c670:	mov	r0, r6
   1c674:	bl	11554 <strcmp@plt>
   1c678:	subs	r7, r0, #0
   1c67c:	bne	1c6f8 <__assert_fail@plt+0xad3c>
   1c680:	cmp	r5, #0
   1c684:	beq	1c6c0 <__assert_fail@plt+0xad04>
   1c688:	bl	1177c <__ctype_b_loc@plt>
   1c68c:	mov	r6, r0
   1c690:	ldr	r2, [r6]
   1c694:	lsl	r3, r7, #1
   1c698:	ldrh	r3, [r2, r3]
   1c69c:	tst	r3, #16384	; 0x4000
   1c6a0:	beq	1c6b0 <__assert_fail@plt+0xacf4>
   1c6a4:	ldrb	r1, [r5, r7]
   1c6a8:	mov	r0, r4
   1c6ac:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c6b0:	add	r7, r7, #1
   1c6b4:	cmp	r7, #256	; 0x100
   1c6b8:	bne	1c690 <__assert_fail@plt+0xacd4>
   1c6bc:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c6c0:	bl	1177c <__ctype_b_loc@plt>
   1c6c4:	mov	r5, r0
   1c6c8:	ldr	r2, [r5]
   1c6cc:	lsl	r3, r7, #1
   1c6d0:	ldrh	r3, [r2, r3]
   1c6d4:	tst	r3, #16384	; 0x4000
   1c6d8:	beq	1c6e8 <__assert_fail@plt+0xad2c>
   1c6dc:	mov	r1, r7
   1c6e0:	mov	r0, r4
   1c6e4:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c6e8:	add	r7, r7, #1
   1c6ec:	cmp	r7, #256	; 0x100
   1c6f0:	bne	1c6c8 <__assert_fail@plt+0xad0c>
   1c6f4:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c6f8:	ldr	r1, [pc, #708]	; 1c9c4 <__assert_fail@plt+0xb008>
   1c6fc:	mov	r0, r6
   1c700:	bl	11554 <strcmp@plt>
   1c704:	subs	r7, r0, #0
   1c708:	bne	1c784 <__assert_fail@plt+0xadc8>
   1c70c:	cmp	r5, #0
   1c710:	beq	1c74c <__assert_fail@plt+0xad90>
   1c714:	bl	1177c <__ctype_b_loc@plt>
   1c718:	mov	r6, r0
   1c71c:	ldr	r2, [r6]
   1c720:	lsl	r3, r7, #1
   1c724:	ldrh	r3, [r2, r3]
   1c728:	tst	r3, #256	; 0x100
   1c72c:	beq	1c73c <__assert_fail@plt+0xad80>
   1c730:	ldrb	r1, [r5, r7]
   1c734:	mov	r0, r4
   1c738:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c73c:	add	r7, r7, #1
   1c740:	cmp	r7, #256	; 0x100
   1c744:	bne	1c71c <__assert_fail@plt+0xad60>
   1c748:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c74c:	bl	1177c <__ctype_b_loc@plt>
   1c750:	mov	r5, r0
   1c754:	ldr	r2, [r5]
   1c758:	lsl	r3, r7, #1
   1c75c:	ldrh	r3, [r2, r3]
   1c760:	tst	r3, #256	; 0x100
   1c764:	beq	1c774 <__assert_fail@plt+0xadb8>
   1c768:	mov	r1, r7
   1c76c:	mov	r0, r4
   1c770:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c774:	add	r7, r7, #1
   1c778:	cmp	r7, #256	; 0x100
   1c77c:	bne	1c754 <__assert_fail@plt+0xad98>
   1c780:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c784:	ldr	r1, [pc, #600]	; 1c9e4 <__assert_fail@plt+0xb028>
   1c788:	mov	r0, r6
   1c78c:	bl	11554 <strcmp@plt>
   1c790:	subs	r7, r0, #0
   1c794:	bne	1c810 <__assert_fail@plt+0xae54>
   1c798:	cmp	r5, #0
   1c79c:	beq	1c7d8 <__assert_fail@plt+0xae1c>
   1c7a0:	bl	1177c <__ctype_b_loc@plt>
   1c7a4:	mov	r6, r0
   1c7a8:	ldr	r2, [r6]
   1c7ac:	lsl	r3, r7, #1
   1c7b0:	ldrh	r3, [r2, r3]
   1c7b4:	tst	r3, #1
   1c7b8:	beq	1c7c8 <__assert_fail@plt+0xae0c>
   1c7bc:	ldrb	r1, [r5, r7]
   1c7c0:	mov	r0, r4
   1c7c4:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c7c8:	add	r7, r7, #1
   1c7cc:	cmp	r7, #256	; 0x100
   1c7d0:	bne	1c7a8 <__assert_fail@plt+0xadec>
   1c7d4:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c7d8:	bl	1177c <__ctype_b_loc@plt>
   1c7dc:	mov	r5, r0
   1c7e0:	ldr	r2, [r5]
   1c7e4:	lsl	r3, r7, #1
   1c7e8:	ldrh	r3, [r2, r3]
   1c7ec:	tst	r3, #1
   1c7f0:	beq	1c800 <__assert_fail@plt+0xae44>
   1c7f4:	mov	r1, r7
   1c7f8:	mov	r0, r4
   1c7fc:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c800:	add	r7, r7, #1
   1c804:	cmp	r7, #256	; 0x100
   1c808:	bne	1c7e0 <__assert_fail@plt+0xae24>
   1c80c:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c810:	ldr	r1, [pc, #464]	; 1c9e8 <__assert_fail@plt+0xb02c>
   1c814:	mov	r0, r6
   1c818:	bl	11554 <strcmp@plt>
   1c81c:	subs	r7, r0, #0
   1c820:	bne	1c89c <__assert_fail@plt+0xaee0>
   1c824:	cmp	r5, #0
   1c828:	beq	1c864 <__assert_fail@plt+0xaea8>
   1c82c:	bl	1177c <__ctype_b_loc@plt>
   1c830:	mov	r6, r0
   1c834:	ldr	r2, [r6]
   1c838:	lsl	r3, r7, #1
   1c83c:	ldrsh	r3, [r2, r3]
   1c840:	cmp	r3, #0
   1c844:	bge	1c854 <__assert_fail@plt+0xae98>
   1c848:	ldrb	r1, [r5, r7]
   1c84c:	mov	r0, r4
   1c850:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c854:	add	r7, r7, #1
   1c858:	cmp	r7, #256	; 0x100
   1c85c:	bne	1c834 <__assert_fail@plt+0xae78>
   1c860:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c864:	bl	1177c <__ctype_b_loc@plt>
   1c868:	mov	r5, r0
   1c86c:	ldr	r2, [r5]
   1c870:	lsl	r3, r7, #1
   1c874:	ldrsh	r3, [r2, r3]
   1c878:	cmp	r3, #0
   1c87c:	bge	1c88c <__assert_fail@plt+0xaed0>
   1c880:	mov	r1, r7
   1c884:	mov	r0, r4
   1c888:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c88c:	add	r7, r7, #1
   1c890:	cmp	r7, #256	; 0x100
   1c894:	bne	1c86c <__assert_fail@plt+0xaeb0>
   1c898:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c89c:	ldr	r1, [pc, #328]	; 1c9ec <__assert_fail@plt+0xb030>
   1c8a0:	mov	r0, r6
   1c8a4:	bl	11554 <strcmp@plt>
   1c8a8:	subs	r7, r0, #0
   1c8ac:	bne	1c928 <__assert_fail@plt+0xaf6c>
   1c8b0:	cmp	r5, #0
   1c8b4:	beq	1c8f0 <__assert_fail@plt+0xaf34>
   1c8b8:	bl	1177c <__ctype_b_loc@plt>
   1c8bc:	mov	r6, r0
   1c8c0:	ldr	r2, [r6]
   1c8c4:	lsl	r3, r7, #1
   1c8c8:	ldrh	r3, [r2, r3]
   1c8cc:	tst	r3, #4
   1c8d0:	beq	1c8e0 <__assert_fail@plt+0xaf24>
   1c8d4:	ldrb	r1, [r5, r7]
   1c8d8:	mov	r0, r4
   1c8dc:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c8e0:	add	r7, r7, #1
   1c8e4:	cmp	r7, #256	; 0x100
   1c8e8:	bne	1c8c0 <__assert_fail@plt+0xaf04>
   1c8ec:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c8f0:	bl	1177c <__ctype_b_loc@plt>
   1c8f4:	mov	r5, r0
   1c8f8:	ldr	r2, [r5]
   1c8fc:	lsl	r3, r7, #1
   1c900:	ldrh	r3, [r2, r3]
   1c904:	tst	r3, #4
   1c908:	beq	1c918 <__assert_fail@plt+0xaf5c>
   1c90c:	mov	r1, r7
   1c910:	mov	r0, r4
   1c914:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c918:	add	r7, r7, #1
   1c91c:	cmp	r7, #256	; 0x100
   1c920:	bne	1c8f8 <__assert_fail@plt+0xaf3c>
   1c924:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c928:	mov	r0, r6
   1c92c:	ldr	r1, [pc, #188]	; 1c9f0 <__assert_fail@plt+0xb034>
   1c930:	bl	11554 <strcmp@plt>
   1c934:	subs	r6, r0, #0
   1c938:	bne	1c9bc <__assert_fail@plt+0xb000>
   1c93c:	cmp	r5, #0
   1c940:	beq	1c97c <__assert_fail@plt+0xafc0>
   1c944:	bl	1177c <__ctype_b_loc@plt>
   1c948:	mov	r7, r0
   1c94c:	ldr	r2, [r7]
   1c950:	lsl	r3, r6, #1
   1c954:	ldrh	r3, [r2, r3]
   1c958:	tst	r3, #4096	; 0x1000
   1c95c:	beq	1c96c <__assert_fail@plt+0xafb0>
   1c960:	ldrb	r1, [r5, r6]
   1c964:	mov	r0, r4
   1c968:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c96c:	add	r6, r6, #1
   1c970:	cmp	r6, #256	; 0x100
   1c974:	bne	1c94c <__assert_fail@plt+0xaf90>
   1c978:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c97c:	bl	1177c <__ctype_b_loc@plt>
   1c980:	mov	r5, r0
   1c984:	ldr	r2, [r5]
   1c988:	lsl	r3, r6, #1
   1c98c:	ldrh	r3, [r2, r3]
   1c990:	tst	r3, #4096	; 0x1000
   1c994:	beq	1c9a4 <__assert_fail@plt+0xafe8>
   1c998:	mov	r1, r6
   1c99c:	mov	r0, r4
   1c9a0:	bl	1a52c <__assert_fail@plt+0x8b70>
   1c9a4:	add	r6, r6, #1
   1c9a8:	cmp	r6, #256	; 0x100
   1c9ac:	bne	1c984 <__assert_fail@plt+0xafc8>
   1c9b0:	b	1c370 <__assert_fail@plt+0xa9b4>
   1c9b4:	mov	r0, #12
   1c9b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c9bc:	mov	r0, #4
   1c9c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c9c4:	andeq	r9, r2, r2, asr r0
   1c9c8:	andeq	r9, r2, ip, asr #32
   1c9cc:	andeq	r9, r2, r8, asr r0
   1c9d0:	andeq	r9, r2, lr, asr r0
   1c9d4:	andeq	r9, r2, r4, rrx
   1c9d8:	andeq	r9, r2, sl, rrx
   1c9dc:	andeq	r9, r2, r3, lsl #1
   1c9e0:	andeq	r8, r2, r7, asr #10
   1c9e4:	andeq	r9, r2, r0, ror r0
   1c9e8:	andeq	r9, r2, r6, ror r0
   1c9ec:	andeq	r9, r2, ip, ror r0
   1c9f0:	andeq	r9, r2, r2, lsl #1
   1c9f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9f8:	sub	sp, sp, #36	; 0x24
   1c9fc:	mov	r7, r0
   1ca00:	mov	fp, r1
   1ca04:	mov	r4, #0
   1ca08:	mov	r1, #1
   1ca0c:	mov	r0, #32
   1ca10:	str	r2, [sp, #12]
   1ca14:	mov	r9, r3
   1ca18:	ldrb	sl, [sp, #72]	; 0x48
   1ca1c:	ldr	r8, [sp, #76]	; 0x4c
   1ca20:	str	r4, [sp, #20]
   1ca24:	bl	1a0b0 <__assert_fail@plt+0x86f4>
   1ca28:	subs	r5, r0, #0
   1ca2c:	bne	1ca40 <__assert_fail@plt+0xb084>
   1ca30:	mov	r3, #12
   1ca34:	str	r3, [r8]
   1ca38:	mov	r4, #0
   1ca3c:	b	1cab4 <__assert_fail@plt+0xb0f8>
   1ca40:	mov	r1, #1
   1ca44:	mov	r0, #40	; 0x28
   1ca48:	bl	1a0b0 <__assert_fail@plt+0x86f4>
   1ca4c:	subs	r6, r0, #0
   1ca50:	bne	1ca60 <__assert_fail@plt+0xb0a4>
   1ca54:	mov	r0, r5
   1ca58:	bl	1a30c <__assert_fail@plt+0x8950>
   1ca5c:	b	1ca30 <__assert_fail@plt+0xb074>
   1ca60:	ldrb	r2, [r6, #16]
   1ca64:	and	r3, sl, #1
   1ca68:	mov	r0, fp
   1ca6c:	bic	r2, r2, #1
   1ca70:	orr	r3, r3, r2
   1ca74:	strb	r3, [r6, #16]
   1ca78:	ldr	r3, [sp, #12]
   1ca7c:	str	r4, [sp, #4]
   1ca80:	str	r3, [sp]
   1ca84:	mov	r2, r6
   1ca88:	add	r3, sp, #20
   1ca8c:	mov	r1, r5
   1ca90:	bl	1c27c <__assert_fail@plt+0xa8c0>
   1ca94:	subs	fp, r0, #0
   1ca98:	subeq	r9, r9, #1
   1ca9c:	beq	1cac8 <__assert_fail@plt+0xb10c>
   1caa0:	mov	r0, r5
   1caa4:	bl	1a30c <__assert_fail@plt+0x8950>
   1caa8:	mov	r0, r6
   1caac:	bl	1b978 <__assert_fail@plt+0x9fbc>
   1cab0:	str	fp, [r8]
   1cab4:	mov	r0, r4
   1cab8:	add	sp, sp, #36	; 0x24
   1cabc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cac0:	mov	r0, r5
   1cac4:	bl	1a52c <__assert_fail@plt+0x8b70>
   1cac8:	ldrb	r1, [r9, #1]!
   1cacc:	cmp	r1, #0
   1cad0:	bne	1cac0 <__assert_fail@plt+0xb104>
   1cad4:	cmp	sl, #0
   1cad8:	beq	1cae4 <__assert_fail@plt+0xb128>
   1cadc:	mov	r0, r5
   1cae0:	bl	1a590 <__assert_fail@plt+0x8bd4>
   1cae4:	ldr	r3, [r7, #92]	; 0x5c
   1cae8:	cmp	r3, #1
   1caec:	ble	1cafc <__assert_fail@plt+0xb140>
   1caf0:	ldr	r1, [r7, #60]	; 0x3c
   1caf4:	mov	r0, r5
   1caf8:	bl	1a5d8 <__assert_fail@plt+0x8c1c>
   1cafc:	mov	r9, #0
   1cb00:	mov	r3, #3
   1cb04:	str	r9, [sp, #28]
   1cb08:	mov	r2, r9
   1cb0c:	strb	r3, [sp, #28]
   1cb10:	mov	r1, r9
   1cb14:	add	r3, sp, #24
   1cb18:	mov	r0, r7
   1cb1c:	str	r5, [sp, #24]
   1cb20:	bl	1add8 <__assert_fail@plt+0x941c>
   1cb24:	subs	r4, r0, #0
   1cb28:	beq	1cb90 <__assert_fail@plt+0xb1d4>
   1cb2c:	ldr	r3, [r7, #92]	; 0x5c
   1cb30:	cmp	r3, #1
   1cb34:	ble	1cb84 <__assert_fail@plt+0xb1c8>
   1cb38:	mov	r3, #6
   1cb3c:	strb	r3, [sp, #28]
   1cb40:	ldrb	r3, [r7, #88]	; 0x58
   1cb44:	mov	r2, r9
   1cb48:	mov	r1, r9
   1cb4c:	orr	r3, r3, #2
   1cb50:	strb	r3, [r7, #88]	; 0x58
   1cb54:	mov	r0, r7
   1cb58:	add	r3, sp, #24
   1cb5c:	str	r6, [sp, #24]
   1cb60:	bl	1add8 <__assert_fail@plt+0x941c>
   1cb64:	subs	r2, r0, #0
   1cb68:	beq	1cb90 <__assert_fail@plt+0xb1d4>
   1cb6c:	mov	r1, r4
   1cb70:	mov	r3, #10
   1cb74:	mov	r0, r7
   1cb78:	bl	1af28 <__assert_fail@plt+0x956c>
   1cb7c:	mov	r4, r0
   1cb80:	b	1cab4 <__assert_fail@plt+0xb0f8>
   1cb84:	mov	r0, r6
   1cb88:	bl	1b978 <__assert_fail@plt+0x9fbc>
   1cb8c:	b	1cab4 <__assert_fail@plt+0xb0f8>
   1cb90:	mov	r0, r5
   1cb94:	bl	1a30c <__assert_fail@plt+0x8950>
   1cb98:	mov	r0, r6
   1cb9c:	bl	1b978 <__assert_fail@plt+0x9fbc>
   1cba0:	b	1ca30 <__assert_fail@plt+0xb074>
   1cba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cba8:	sub	sp, sp, #300	; 0x12c
   1cbac:	ldr	r6, [r0]
   1cbb0:	mov	r8, r0
   1cbb4:	mov	r9, r1
   1cbb8:	ldr	r3, [r6, #92]	; 0x5c
   1cbbc:	mov	r4, r2
   1cbc0:	cmp	r3, #1
   1cbc4:	movne	r3, #0
   1cbc8:	ldreq	r3, [r0, #12]
   1cbcc:	add	r7, sp, #40	; 0x28
   1cbd0:	lsreq	r3, r3, #22
   1cbd4:	andeq	r3, r3, #1
   1cbd8:	str	r3, [sp, #4]
   1cbdc:	mov	r3, #0
   1cbe0:	str	r3, [sp]
   1cbe4:	ldr	r3, [r9, #8]
   1cbe8:	ldr	r2, [sp]
   1cbec:	cmp	r2, r3
   1cbf0:	bge	1cf04 <__assert_fail@plt+0xb548>
   1cbf4:	ldr	r3, [r9, #12]
   1cbf8:	ldr	r2, [sp]
   1cbfc:	ldr	sl, [r3, r2, lsl #2]
   1cc00:	lsl	r3, sl, #3
   1cc04:	str	r3, [sp, #8]
   1cc08:	ldr	r3, [r6]
   1cc0c:	lsl	r2, sl, #3
   1cc10:	add	r2, r3, r2
   1cc14:	ldrb	r5, [r2, #4]
   1cc18:	cmp	r5, #1
   1cc1c:	bne	1cd04 <__assert_fail@plt+0xb348>
   1cc20:	ldrb	r0, [r3, sl, lsl #3]
   1cc24:	ldr	r3, [sp, #4]
   1cc28:	cmp	r3, #0
   1cc2c:	strb	r5, [r4, r0]
   1cc30:	beq	1cc3c <__assert_fail@plt+0xb280>
   1cc34:	bl	115f0 <tolower@plt>
   1cc38:	strb	r5, [r4, r0]
   1cc3c:	ldr	r3, [r8, #12]
   1cc40:	tst	r3, #4194304	; 0x400000
   1cc44:	beq	1cce4 <__assert_fail@plt+0xb328>
   1cc48:	ldr	r3, [r6, #92]	; 0x5c
   1cc4c:	cmp	r3, #1
   1cc50:	ble	1cce4 <__assert_fail@plt+0xb328>
   1cc54:	ldr	r2, [r6]
   1cc58:	ldr	r0, [pc, #684]	; 1cf0c <__assert_fail@plt+0xb550>
   1cc5c:	mov	r5, #1
   1cc60:	ldrb	r3, [r2, sl, lsl #3]
   1cc64:	strb	r3, [sp, #40]	; 0x28
   1cc68:	ldr	ip, [r6, #8]
   1cc6c:	add	r1, sl, r5
   1cc70:	cmp	ip, r1
   1cc74:	bls	1cc94 <__assert_fail@plt+0xb2d8>
   1cc78:	add	r3, r2, r1, lsl #3
   1cc7c:	ldr	r3, [r3, #4]
   1cc80:	bic	r3, r3, #-16777216	; 0xff000000
   1cc84:	bic	r3, r3, #14614528	; 0xdf0000
   1cc88:	bic	r3, r3, #65280	; 0xff00
   1cc8c:	cmp	r3, r0
   1cc90:	beq	1ccf4 <__assert_fail@plt+0xb338>
   1cc94:	mov	r3, #0
   1cc98:	str	r3, [sp, #32]
   1cc9c:	str	r3, [sp, #36]	; 0x24
   1cca0:	mov	r2, r5
   1cca4:	add	r3, sp, #32
   1cca8:	mov	r1, r7
   1ccac:	add	r0, sp, #28
   1ccb0:	bl	1a434 <__assert_fail@plt+0x8a78>
   1ccb4:	cmp	r0, r5
   1ccb8:	bne	1cce4 <__assert_fail@plt+0xb328>
   1ccbc:	ldr	r0, [sp, #28]
   1ccc0:	bl	11608 <towlower@plt>
   1ccc4:	add	r2, sp, #32
   1ccc8:	mov	r1, r0
   1cccc:	mov	r0, r7
   1ccd0:	bl	1153c <wcrtomb@plt>
   1ccd4:	cmn	r0, #1
   1ccd8:	movne	r2, #1
   1ccdc:	ldrbne	r3, [sp, #40]	; 0x28
   1cce0:	strbne	r2, [r4, r3]
   1cce4:	ldr	r3, [sp]
   1cce8:	add	r3, r3, #1
   1ccec:	str	r3, [sp]
   1ccf0:	b	1cbe4 <__assert_fail@plt+0xb228>
   1ccf4:	ldrb	r3, [r2, r1, lsl #3]
   1ccf8:	strb	r3, [r7, r5]
   1ccfc:	add	r5, r5, #1
   1cd00:	b	1cc6c <__assert_fail@plt+0xb2b0>
   1cd04:	cmp	r5, #3
   1cd08:	bne	1cd8c <__assert_fail@plt+0xb3d0>
   1cd0c:	mov	sl, #0
   1cd10:	mov	r1, #1
   1cd14:	ldr	r2, [sp, #8]
   1cd18:	ldr	r3, [r6]
   1cd1c:	lsl	fp, sl, #3
   1cd20:	mov	r5, #0
   1cd24:	ldr	r3, [r3, r2]
   1cd28:	add	r2, r4, fp
   1cd2c:	ldr	r3, [r3, sl]
   1cd30:	lsr	ip, r3, r5
   1cd34:	tst	ip, #1
   1cd38:	add	r0, r5, fp
   1cd3c:	beq	1cd70 <__assert_fail@plt+0xb3b4>
   1cd40:	ldr	ip, [sp, #4]
   1cd44:	strb	r1, [r2, r5]
   1cd48:	cmp	ip, #0
   1cd4c:	beq	1cd70 <__assert_fail@plt+0xb3b4>
   1cd50:	str	r1, [sp, #20]
   1cd54:	str	r2, [sp, #16]
   1cd58:	str	r3, [sp, #12]
   1cd5c:	bl	115f0 <tolower@plt>
   1cd60:	ldr	r2, [sp, #16]
   1cd64:	ldr	r3, [sp, #12]
   1cd68:	ldr	r1, [sp, #20]
   1cd6c:	strb	r1, [r4, r0]
   1cd70:	add	r5, r5, #1
   1cd74:	cmp	r5, #32
   1cd78:	bne	1cd30 <__assert_fail@plt+0xb374>
   1cd7c:	add	sl, sl, #4
   1cd80:	cmp	sl, #32
   1cd84:	bne	1cd14 <__assert_fail@plt+0xb358>
   1cd88:	b	1cce4 <__assert_fail@plt+0xb328>
   1cd8c:	cmp	r5, #6
   1cd90:	bne	1ced0 <__assert_fail@plt+0xb514>
   1cd94:	ldr	r2, [r6, #92]	; 0x5c
   1cd98:	ldr	fp, [r3, sl, lsl #3]
   1cd9c:	cmp	r2, #1
   1cda0:	ble	1ce7c <__assert_fail@plt+0xb4c0>
   1cda4:	ldr	r2, [fp, #36]	; 0x24
   1cda8:	cmp	r2, #0
   1cdac:	bne	1ce84 <__assert_fail@plt+0xb4c8>
   1cdb0:	ldrb	r2, [fp, #16]
   1cdb4:	tst	r2, #1
   1cdb8:	bne	1ce84 <__assert_fail@plt+0xb4c8>
   1cdbc:	ldr	r5, [fp, #32]
   1cdc0:	cmp	r5, #0
   1cdc4:	bne	1ce84 <__assert_fail@plt+0xb4c8>
   1cdc8:	mov	sl, #0
   1cdcc:	ldr	r2, [fp, #20]
   1cdd0:	cmp	r5, r2
   1cdd4:	bge	1cce4 <__assert_fail@plt+0xb328>
   1cdd8:	str	sl, [sp, #32]
   1cddc:	str	sl, [sp, #36]	; 0x24
   1cde0:	ldr	r1, [fp]
   1cde4:	lsl	r3, r5, #2
   1cde8:	add	r2, sp, #32
   1cdec:	ldr	r1, [r1, r5, lsl #2]
   1cdf0:	mov	r0, r7
   1cdf4:	str	r3, [sp, #8]
   1cdf8:	bl	1153c <wcrtomb@plt>
   1cdfc:	cmn	r0, #1
   1ce00:	beq	1ce2c <__assert_fail@plt+0xb470>
   1ce04:	ldrb	r0, [sp, #40]	; 0x28
   1ce08:	ldr	r3, [sp, #4]
   1ce0c:	mov	r2, #1
   1ce10:	cmp	r3, #0
   1ce14:	strb	r2, [r4, r0]
   1ce18:	str	r2, [sp, #8]
   1ce1c:	beq	1ce2c <__assert_fail@plt+0xb470>
   1ce20:	bl	115f0 <tolower@plt>
   1ce24:	ldr	r2, [sp, #8]
   1ce28:	strb	r2, [r4, r0]
   1ce2c:	ldr	r2, [r8, #12]
   1ce30:	tst	r2, #4194304	; 0x400000
   1ce34:	beq	1ce74 <__assert_fail@plt+0xb4b8>
   1ce38:	ldr	r2, [r6, #92]	; 0x5c
   1ce3c:	cmp	r2, #1
   1ce40:	ble	1ce74 <__assert_fail@plt+0xb4b8>
   1ce44:	ldr	r2, [fp]
   1ce48:	lsl	r3, r5, #2
   1ce4c:	ldr	r0, [r2, r3]
   1ce50:	bl	11608 <towlower@plt>
   1ce54:	add	r2, sp, #32
   1ce58:	mov	r1, r0
   1ce5c:	mov	r0, r7
   1ce60:	bl	1153c <wcrtomb@plt>
   1ce64:	cmn	r0, #1
   1ce68:	movne	r1, #1
   1ce6c:	ldrbne	r2, [sp, #40]	; 0x28
   1ce70:	strbne	r1, [r4, r2]
   1ce74:	add	r5, r5, #1
   1ce78:	b	1cdcc <__assert_fail@plt+0xb410>
   1ce7c:	mov	r5, #0
   1ce80:	b	1cdc8 <__assert_fail@plt+0xb40c>
   1ce84:	mov	r5, #0
   1ce88:	strb	r5, [sp, #32]
   1ce8c:	mov	r2, #1
   1ce90:	mov	r3, r7
   1ce94:	add	r1, sp, #32
   1ce98:	mov	r0, r5
   1ce9c:	str	r5, [r7]
   1cea0:	str	r5, [r7, #4]
   1cea4:	bl	1a434 <__assert_fail@plt+0x8a78>
   1cea8:	ldrb	r3, [sp, #32]
   1ceac:	cmn	r0, #2
   1ceb0:	moveq	r2, #1
   1ceb4:	strbeq	r2, [r4, r3]
   1ceb8:	add	r3, r3, #1
   1cebc:	uxtb	r3, r3
   1cec0:	cmp	r3, #0
   1cec4:	strb	r3, [sp, #32]
   1cec8:	bne	1ce8c <__assert_fail@plt+0xb4d0>
   1cecc:	b	1cce4 <__assert_fail@plt+0xb328>
   1ced0:	and	r3, r5, #253	; 0xfd
   1ced4:	cmp	r3, #5
   1ced8:	beq	1cee4 <__assert_fail@plt+0xb528>
   1cedc:	cmp	r5, #2
   1cee0:	bne	1cce4 <__assert_fail@plt+0xb328>
   1cee4:	mov	r2, #256	; 0x100
   1cee8:	mov	r1, #1
   1ceec:	mov	r0, r4
   1cef0:	bl	11818 <memset@plt>
   1cef4:	cmp	r5, #2
   1cef8:	ldrbeq	r3, [r8, #28]
   1cefc:	orreq	r3, r3, #1
   1cf00:	strbeq	r3, [r8, #28]
   1cf04:	add	sp, sp, #300	; 0x12c
   1cf08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf0c:	eoreq	r0, r0, r1
   1cf10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cf14:	ldr	sl, [r0]
   1cf18:	add	ip, sl, r1, lsl #3
   1cf1c:	ldrb	r9, [ip, #4]
   1cf20:	cmp	r9, #7
   1cf24:	bne	1d014 <__assert_fail@plt+0xb658>
   1cf28:	ldr	r0, [r2, #4]
   1cf2c:	add	r1, r0, r3
   1cf30:	ldrb	ip, [r0, r3]
   1cf34:	cmp	ip, #193	; 0xc1
   1cf38:	bhi	1cf48 <__assert_fail@plt+0xb58c>
   1cf3c:	mov	r4, #0
   1cf40:	mov	r0, r4
   1cf44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cf48:	ldr	r0, [r2, #48]	; 0x30
   1cf4c:	add	r2, r3, #1
   1cf50:	cmp	r2, r0
   1cf54:	bge	1cf3c <__assert_fail@plt+0xb580>
   1cf58:	cmp	ip, #223	; 0xdf
   1cf5c:	ldrb	r2, [r1, #1]
   1cf60:	bhi	1cf78 <__assert_fail@plt+0xb5bc>
   1cf64:	eor	r2, r2, #128	; 0x80
   1cf68:	cmp	r2, #63	; 0x3f
   1cf6c:	movls	r4, #2
   1cf70:	bls	1cf40 <__assert_fail@plt+0xb584>
   1cf74:	b	1cf3c <__assert_fail@plt+0xb580>
   1cf78:	cmp	ip, #239	; 0xef
   1cf7c:	bhi	1cfc0 <__assert_fail@plt+0xb604>
   1cf80:	cmp	r2, #159	; 0x9f
   1cf84:	cmpls	ip, #224	; 0xe0
   1cf88:	movne	r4, #3
   1cf8c:	beq	1cf3c <__assert_fail@plt+0xb580>
   1cf90:	add	r3, r4, r3
   1cf94:	cmp	r0, r3
   1cf98:	blt	1cf3c <__assert_fail@plt+0xb580>
   1cf9c:	mov	r3, #1
   1cfa0:	ldrb	r2, [r1, r3]
   1cfa4:	eor	r2, r2, #128	; 0x80
   1cfa8:	cmp	r2, #63	; 0x3f
   1cfac:	bhi	1cf3c <__assert_fail@plt+0xb580>
   1cfb0:	add	r3, r3, #1
   1cfb4:	cmp	r4, r3
   1cfb8:	bne	1cfa0 <__assert_fail@plt+0xb5e4>
   1cfbc:	b	1cf40 <__assert_fail@plt+0xb584>
   1cfc0:	cmp	ip, #247	; 0xf7
   1cfc4:	bhi	1cfdc <__assert_fail@plt+0xb620>
   1cfc8:	cmp	r2, #143	; 0x8f
   1cfcc:	cmpls	ip, #240	; 0xf0
   1cfd0:	movne	r4, #4
   1cfd4:	bne	1cf90 <__assert_fail@plt+0xb5d4>
   1cfd8:	b	1cf3c <__assert_fail@plt+0xb580>
   1cfdc:	cmp	ip, #251	; 0xfb
   1cfe0:	bhi	1cff8 <__assert_fail@plt+0xb63c>
   1cfe4:	cmp	r2, #135	; 0x87
   1cfe8:	cmpls	ip, #248	; 0xf8
   1cfec:	movne	r4, #5
   1cff0:	bne	1cf90 <__assert_fail@plt+0xb5d4>
   1cff4:	b	1cf3c <__assert_fail@plt+0xb580>
   1cff8:	cmp	ip, #253	; 0xfd
   1cffc:	bhi	1cf3c <__assert_fail@plt+0xb580>
   1d000:	cmp	r2, #131	; 0x83
   1d004:	cmpls	ip, #252	; 0xfc
   1d008:	beq	1cf3c <__assert_fail@plt+0xb580>
   1d00c:	mov	r4, #6
   1d010:	b	1cf90 <__assert_fail@plt+0xb5d4>
   1d014:	mov	r5, r1
   1d018:	mov	r8, r0
   1d01c:	mov	r1, r3
   1d020:	mov	r0, r2
   1d024:	mov	r7, r3
   1d028:	mov	r6, r2
   1d02c:	bl	1a600 <__assert_fail@plt+0x8c44>
   1d030:	cmp	r9, #5
   1d034:	mov	r4, r0
   1d038:	bne	1d07c <__assert_fail@plt+0xb6c0>
   1d03c:	cmp	r0, #1
   1d040:	ble	1cf3c <__assert_fail@plt+0xb580>
   1d044:	ldr	r3, [r8, #128]	; 0x80
   1d048:	tst	r3, #64	; 0x40
   1d04c:	bne	1d060 <__assert_fail@plt+0xb6a4>
   1d050:	ldr	r2, [r6, #4]
   1d054:	ldrb	r2, [r2, r7]
   1d058:	cmp	r2, #10
   1d05c:	beq	1cf3c <__assert_fail@plt+0xb580>
   1d060:	tst	r3, #128	; 0x80
   1d064:	beq	1cf40 <__assert_fail@plt+0xb584>
   1d068:	ldr	r3, [r6, #4]
   1d06c:	ldrb	r3, [r3, r7]
   1d070:	cmp	r3, #0
   1d074:	beq	1cf3c <__assert_fail@plt+0xb580>
   1d078:	b	1cf40 <__assert_fail@plt+0xb584>
   1d07c:	cmp	r0, #1
   1d080:	movle	r3, #0
   1d084:	movgt	r3, #1
   1d088:	cmp	r9, #6
   1d08c:	movne	r3, #0
   1d090:	cmp	r3, #0
   1d094:	beq	1cf3c <__assert_fail@plt+0xb580>
   1d098:	ldr	r5, [sl, r5, lsl #3]
   1d09c:	ldr	r3, [r5, #32]
   1d0a0:	ldr	r2, [r5, #20]
   1d0a4:	cmp	r3, #0
   1d0a8:	bne	1d0c0 <__assert_fail@plt+0xb704>
   1d0ac:	ldr	r3, [r5, #36]	; 0x24
   1d0b0:	cmp	r3, #0
   1d0b4:	bne	1d0c0 <__assert_fail@plt+0xb704>
   1d0b8:	cmp	r2, #0
   1d0bc:	beq	1d154 <__assert_fail@plt+0xb798>
   1d0c0:	mov	r0, r6
   1d0c4:	mov	r1, r7
   1d0c8:	bl	1a658 <__assert_fail@plt+0x8c9c>
   1d0cc:	mov	r3, #0
   1d0d0:	mov	r6, r0
   1d0d4:	cmp	r3, r2
   1d0d8:	blt	1d11c <__assert_fail@plt+0xb760>
   1d0dc:	mov	r7, #0
   1d0e0:	ldr	r3, [r5, #36]	; 0x24
   1d0e4:	cmp	r7, r3
   1d0e8:	blt	1d134 <__assert_fail@plt+0xb778>
   1d0ec:	ldr	r2, [r5, #32]
   1d0f0:	mov	r3, #0
   1d0f4:	cmp	r3, r2
   1d0f8:	blt	1d15c <__assert_fail@plt+0xb7a0>
   1d0fc:	mov	r3, #0
   1d100:	ldrb	r2, [r5, #16]
   1d104:	tst	r2, #1
   1d108:	moveq	r4, r3
   1d10c:	beq	1cf40 <__assert_fail@plt+0xb584>
   1d110:	cmp	r3, #0
   1d114:	bne	1cf3c <__assert_fail@plt+0xb580>
   1d118:	b	1cf40 <__assert_fail@plt+0xb584>
   1d11c:	ldr	r1, [r5]
   1d120:	ldr	r1, [r1, r3, lsl #2]
   1d124:	cmp	r6, r1
   1d128:	beq	1d184 <__assert_fail@plt+0xb7c8>
   1d12c:	add	r3, r3, #1
   1d130:	b	1d0d4 <__assert_fail@plt+0xb718>
   1d134:	ldr	r3, [r5, #12]
   1d138:	mov	r0, r6
   1d13c:	ldr	r1, [r3, r7, lsl #2]
   1d140:	bl	11548 <iswctype@plt>
   1d144:	cmp	r0, #0
   1d148:	bne	1d184 <__assert_fail@plt+0xb7c8>
   1d14c:	add	r7, r7, #1
   1d150:	b	1d0e0 <__assert_fail@plt+0xb724>
   1d154:	mov	r6, r2
   1d158:	b	1d0ec <__assert_fail@plt+0xb730>
   1d15c:	ldr	r1, [r5, #4]
   1d160:	ldr	r1, [r1, r3, lsl #2]
   1d164:	cmp	r6, r1
   1d168:	bcc	1d17c <__assert_fail@plt+0xb7c0>
   1d16c:	ldr	r1, [r5, #8]
   1d170:	ldr	r1, [r1, r3, lsl #2]
   1d174:	cmp	r6, r1
   1d178:	bls	1d184 <__assert_fail@plt+0xb7c8>
   1d17c:	add	r3, r3, #1
   1d180:	b	1d0f4 <__assert_fail@plt+0xb738>
   1d184:	mov	r3, r4
   1d188:	b	1d100 <__assert_fail@plt+0xb744>
   1d18c:	ldr	r3, [r0, #4]
   1d190:	ldr	r2, [r1, #4]
   1d194:	cmp	r3, r2
   1d198:	bne	1d1c4 <__assert_fail@plt+0xb808>
   1d19c:	subs	r3, r3, #1
   1d1a0:	bpl	1d1ac <__assert_fail@plt+0xb7f0>
   1d1a4:	mov	r0, #1
   1d1a8:	bx	lr
   1d1ac:	ldr	ip, [r0, #8]
   1d1b0:	ldr	r2, [r1, #8]
   1d1b4:	ldr	ip, [ip, r3, lsl #2]
   1d1b8:	ldr	r2, [r2, r3, lsl #2]
   1d1bc:	cmp	ip, r2
   1d1c0:	b	1d198 <__assert_fail@plt+0xb7dc>
   1d1c4:	mov	r0, #0
   1d1c8:	bx	lr
   1d1cc:	cmp	r1, #0
   1d1d0:	bxlt	lr
   1d1d4:	ldr	r3, [r0, #4]
   1d1d8:	cmp	r1, r3
   1d1dc:	bxge	lr
   1d1e0:	sub	r3, r3, #1
   1d1e4:	str	r3, [r0, #4]
   1d1e8:	ldr	ip, [r0, #4]
   1d1ec:	lsl	r3, r1, #2
   1d1f0:	cmp	r1, ip
   1d1f4:	add	r2, r3, #4
   1d1f8:	blt	1d200 <__assert_fail@plt+0xb844>
   1d1fc:	bx	lr
   1d200:	push	{lr}		; (str lr, [sp, #-4]!)
   1d204:	add	r1, r1, #1
   1d208:	ldr	ip, [r0, #8]
   1d20c:	ldr	lr, [ip, r2]
   1d210:	str	lr, [ip, r3]
   1d214:	ldr	ip, [r0, #4]
   1d218:	mov	r3, r2
   1d21c:	cmp	r1, ip
   1d220:	add	r2, r2, #4
   1d224:	blt	1d204 <__assert_fail@plt+0xb848>
   1d228:	pop	{pc}		; (ldr pc, [sp], #4)
   1d22c:	ldrb	r3, [r1, #24]
   1d230:	cmp	r3, #4
   1d234:	bne	1d268 <__assert_fail@plt+0xb8ac>
   1d238:	ldr	r3, [r0, #132]	; 0x84
   1d23c:	cmp	r3, #0
   1d240:	beq	1d260 <__assert_fail@plt+0xb8a4>
   1d244:	ldr	r2, [r1, #20]
   1d248:	ldr	r2, [r3, r2, lsl #2]
   1d24c:	str	r2, [r1, #20]
   1d250:	mov	r1, #1
   1d254:	ldr	r3, [r0, #80]	; 0x50
   1d258:	orr	r3, r3, r1, lsl r2
   1d25c:	str	r3, [r0, #80]	; 0x50
   1d260:	mov	r0, #0
   1d264:	bx	lr
   1d268:	cmp	r3, #17
   1d26c:	bne	1d260 <__assert_fail@plt+0xb8a4>
   1d270:	ldr	r3, [r1, #4]
   1d274:	cmp	r3, #0
   1d278:	beq	1d260 <__assert_fail@plt+0xb8a4>
   1d27c:	ldrb	r2, [r3, #24]
   1d280:	cmp	r2, #17
   1d284:	bne	1d260 <__assert_fail@plt+0xb8a4>
   1d288:	ldr	r2, [r3, #20]
   1d28c:	ldr	r3, [r3, #4]
   1d290:	cmp	r3, #0
   1d294:	str	r3, [r1, #4]
   1d298:	strne	r1, [r3]
   1d29c:	ldr	r3, [r0, #132]	; 0x84
   1d2a0:	ldr	r1, [r1, #20]
   1d2a4:	cmp	r2, #31
   1d2a8:	ldr	r1, [r3, r1, lsl #2]
   1d2ac:	str	r1, [r3, r2, lsl #2]
   1d2b0:	bgt	1d260 <__assert_fail@plt+0xb8a4>
   1d2b4:	ldr	r3, [r0, #80]	; 0x50
   1d2b8:	mov	r1, #1
   1d2bc:	bic	r3, r3, r1, lsl r2
   1d2c0:	b	1d25c <__assert_fail@plt+0xb8a0>
   1d2c4:	ldrb	r3, [r1, #24]
   1d2c8:	ldr	r2, [r1, #4]
   1d2cc:	cmp	r3, #11
   1d2d0:	streq	r1, [r2, #16]
   1d2d4:	beq	1d2f8 <__assert_fail@plt+0xb93c>
   1d2d8:	cmp	r3, #16
   1d2dc:	ldr	r3, [r1, #8]
   1d2e0:	beq	1d300 <__assert_fail@plt+0xb944>
   1d2e4:	cmp	r2, #0
   1d2e8:	ldrne	r0, [r1, #16]
   1d2ec:	strne	r0, [r2, #16]
   1d2f0:	cmp	r3, #0
   1d2f4:	bne	1d308 <__assert_fail@plt+0xb94c>
   1d2f8:	mov	r0, #0
   1d2fc:	bx	lr
   1d300:	ldr	r0, [r3, #12]
   1d304:	str	r0, [r2, #16]
   1d308:	ldr	r2, [r1, #16]
   1d30c:	str	r2, [r3, #16]
   1d310:	b	1d2f8 <__assert_fail@plt+0xb93c>
   1d314:	ldr	r3, [r1, #4]
   1d318:	str	r3, [r0, #4]
   1d31c:	ldr	r2, [r1, #4]
   1d320:	cmp	r2, #0
   1d324:	ble	1d374 <__assert_fail@plt+0xb9b8>
   1d328:	push	{r4, r5, r6, lr}
   1d32c:	mov	r4, r0
   1d330:	str	r3, [r0]
   1d334:	lsl	r0, r3, #2
   1d338:	mov	r5, r1
   1d33c:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   1d340:	cmp	r0, #0
   1d344:	str	r0, [r4, #8]
   1d348:	bne	1d35c <__assert_fail@plt+0xb9a0>
   1d34c:	str	r0, [r4, #4]
   1d350:	str	r0, [r4]
   1d354:	mov	r0, #12
   1d358:	pop	{r4, r5, r6, pc}
   1d35c:	ldr	r2, [r5, #4]
   1d360:	ldr	r1, [r5, #8]
   1d364:	lsl	r2, r2, #2
   1d368:	bl	115e4 <memcpy@plt>
   1d36c:	mov	r0, #0
   1d370:	pop	{r4, r5, r6, pc}
   1d374:	mov	r3, #0
   1d378:	str	r3, [r0]
   1d37c:	str	r3, [r0, #4]
   1d380:	str	r3, [r0, #8]
   1d384:	mov	r0, r3
   1d388:	bx	lr
   1d38c:	cmp	r1, #0
   1d390:	beq	1d428 <__assert_fail@plt+0xba6c>
   1d394:	ldr	r3, [r1, #4]
   1d398:	cmp	r2, #0
   1d39c:	cmpne	r3, #0
   1d3a0:	ble	1d41c <__assert_fail@plt+0xba60>
   1d3a4:	ldr	ip, [r2, #4]
   1d3a8:	cmp	ip, #0
   1d3ac:	ble	1d424 <__assert_fail@plt+0xba68>
   1d3b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d3b4:	mov	r6, r0
   1d3b8:	add	r0, r3, ip
   1d3bc:	str	r0, [r6]
   1d3c0:	lsl	r0, r0, #2
   1d3c4:	mov	r5, r1
   1d3c8:	mov	r7, r2
   1d3cc:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   1d3d0:	cmp	r0, #0
   1d3d4:	str	r0, [r6, #8]
   1d3d8:	beq	1d48c <__assert_fail@plt+0xbad0>
   1d3dc:	mov	r3, #0
   1d3e0:	ldr	r2, [r5, #4]
   1d3e4:	mov	r8, r0
   1d3e8:	mov	r9, #1
   1d3ec:	mov	lr, r3
   1d3f0:	cmp	lr, r2
   1d3f4:	sub	r4, r9, #1
   1d3f8:	ldr	ip, [r7, #4]
   1d3fc:	bge	1d494 <__assert_fail@plt+0xbad8>
   1d400:	cmp	r3, ip
   1d404:	ldr	r1, [r5, #8]
   1d408:	blt	1d458 <__assert_fail@plt+0xba9c>
   1d40c:	sub	r5, r2, lr
   1d410:	add	r1, r1, lr, lsl #2
   1d414:	lsl	r2, r5, #2
   1d418:	b	1d4ac <__assert_fail@plt+0xbaf0>
   1d41c:	cmp	r3, #0
   1d420:	ble	1d428 <__assert_fail@plt+0xba6c>
   1d424:	b	1d314 <__assert_fail@plt+0xb958>
   1d428:	cmp	r2, #0
   1d42c:	beq	1d440 <__assert_fail@plt+0xba84>
   1d430:	ldr	r3, [r2, #4]
   1d434:	cmp	r3, #0
   1d438:	movgt	r1, r2
   1d43c:	bgt	1d424 <__assert_fail@plt+0xba68>
   1d440:	mov	r3, #0
   1d444:	str	r3, [r0]
   1d448:	str	r3, [r0, #4]
   1d44c:	str	r3, [r0, #8]
   1d450:	mov	r0, r3
   1d454:	bx	lr
   1d458:	ldr	ip, [r7, #8]
   1d45c:	ldr	r1, [r1, lr, lsl #2]
   1d460:	ldr	ip, [ip, r3, lsl #2]
   1d464:	cmp	r1, ip
   1d468:	addgt	r3, r3, #1
   1d46c:	strgt	ip, [r8]
   1d470:	bgt	1d480 <__assert_fail@plt+0xbac4>
   1d474:	addeq	r3, r3, #1
   1d478:	add	lr, lr, #1
   1d47c:	str	r1, [r8]
   1d480:	add	r9, r9, #1
   1d484:	add	r8, r8, #4
   1d488:	b	1d3f0 <__assert_fail@plt+0xba34>
   1d48c:	mov	r0, #12
   1d490:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d494:	cmp	r3, ip
   1d498:	bge	1d4b8 <__assert_fail@plt+0xbafc>
   1d49c:	sub	r5, ip, r3
   1d4a0:	ldr	r1, [r7, #8]
   1d4a4:	lsl	r2, r5, #2
   1d4a8:	add	r1, r1, r3, lsl #2
   1d4ac:	add	r0, r0, r4, lsl #2
   1d4b0:	bl	115e4 <memcpy@plt>
   1d4b4:	add	r4, r4, r5
   1d4b8:	str	r4, [r6, #4]
   1d4bc:	mov	r0, #0
   1d4c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d4c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4c8:	sub	sp, sp, #20
   1d4cc:	ldr	r4, [r2, #4]
   1d4d0:	cmp	r4, #0
   1d4d4:	streq	r4, [r0]
   1d4d8:	addne	r9, r4, r3
   1d4dc:	movne	ip, #0
   1d4e0:	bne	1d500 <__assert_fail@plt+0xbb44>
   1d4e4:	mov	r0, r4
   1d4e8:	add	sp, sp, #20
   1d4ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4f0:	ldr	lr, [r2, #8]
   1d4f4:	ldr	lr, [lr, ip, lsl #2]
   1d4f8:	add	ip, ip, #1
   1d4fc:	add	r9, r9, lr
   1d500:	cmp	r4, ip
   1d504:	bgt	1d4f0 <__assert_fail@plt+0xbb34>
   1d508:	mov	r7, r3
   1d50c:	ldr	r3, [r1, #68]	; 0x44
   1d510:	mov	r5, r2
   1d514:	and	r2, r9, r3
   1d518:	mov	r3, #12
   1d51c:	mov	r8, r1
   1d520:	mul	r3, r3, r2
   1d524:	ldr	r2, [r1, #32]
   1d528:	mov	r6, #0
   1d52c:	add	sl, r2, r3
   1d530:	ldr	fp, [r2, r3]
   1d534:	str	r0, [sp, #8]
   1d538:	cmp	r6, fp
   1d53c:	blt	1d588 <__assert_fail@plt+0xbbcc>
   1d540:	mov	r1, #1
   1d544:	mov	r0, #56	; 0x38
   1d548:	bl	1a0b0 <__assert_fail@plt+0x86f4>
   1d54c:	subs	r4, r0, #0
   1d550:	beq	1d574 <__assert_fail@plt+0xbbb8>
   1d554:	add	sl, r4, #4
   1d558:	mov	r1, r5
   1d55c:	mov	r0, sl
   1d560:	bl	1d314 <__assert_fail@plt+0xb958>
   1d564:	subs	r6, r0, #0
   1d568:	beq	1d5d0 <__assert_fail@plt+0xbc14>
   1d56c:	mov	r0, r4
   1d570:	bl	1a30c <__assert_fail@plt+0x8950>
   1d574:	ldr	r2, [sp, #8]
   1d578:	mov	r3, #12
   1d57c:	mov	r4, #0
   1d580:	str	r3, [r2]
   1d584:	b	1d4e4 <__assert_fail@plt+0xbb28>
   1d588:	ldr	r3, [sl, #8]
   1d58c:	ldr	r4, [r3, r6, lsl #2]
   1d590:	ldr	r3, [r4]
   1d594:	cmp	r3, r9
   1d598:	bne	1d5c8 <__assert_fail@plt+0xbc0c>
   1d59c:	ldrb	r3, [r4, #52]	; 0x34
   1d5a0:	and	r3, r3, #15
   1d5a4:	cmp	r7, r3
   1d5a8:	bne	1d5c8 <__assert_fail@plt+0xbc0c>
   1d5ac:	ldr	r0, [r4, #40]	; 0x28
   1d5b0:	cmp	r0, #0
   1d5b4:	beq	1d5c8 <__assert_fail@plt+0xbc0c>
   1d5b8:	mov	r1, r5
   1d5bc:	bl	1d18c <__assert_fail@plt+0xb7d0>
   1d5c0:	cmp	r0, #0
   1d5c4:	bne	1d4e4 <__assert_fail@plt+0xbb28>
   1d5c8:	add	r6, r6, #1
   1d5cc:	b	1d538 <__assert_fail@plt+0xbb7c>
   1d5d0:	ldrb	r2, [r4, #52]	; 0x34
   1d5d4:	and	r3, r7, #15
   1d5d8:	mov	fp, r6
   1d5dc:	bic	r2, r2, #15
   1d5e0:	orr	r3, r3, r2
   1d5e4:	strb	r3, [r4, #52]	; 0x34
   1d5e8:	and	r3, r7, #4
   1d5ec:	str	r3, [sp]
   1d5f0:	and	r3, r7, #2
   1d5f4:	str	sl, [r4, #40]	; 0x28
   1d5f8:	str	r3, [sp, #4]
   1d5fc:	ldr	r3, [r5, #4]
   1d600:	cmp	fp, r3
   1d604:	blt	1d624 <__assert_fail@plt+0xbc68>
   1d608:	mov	r2, r9
   1d60c:	mov	r1, r4
   1d610:	mov	r0, r8
   1d614:	bl	1b150 <__assert_fail@plt+0x9794>
   1d618:	cmp	r0, #0
   1d61c:	beq	1d4e4 <__assert_fail@plt+0xbb28>
   1d620:	b	1d6d0 <__assert_fail@plt+0xbd14>
   1d624:	ldr	r3, [r5, #8]
   1d628:	ldr	r1, [r8]
   1d62c:	ldr	r2, [pc, #304]	; 1d764 <__assert_fail@plt+0xbda8>
   1d630:	ldr	r3, [r3, fp, lsl #2]
   1d634:	add	r1, r1, r3, lsl #3
   1d638:	ldr	r3, [r1, #4]
   1d63c:	ldrb	ip, [r1, #4]
   1d640:	ands	r3, r2, r3, lsr #8
   1d644:	moveq	r0, #1
   1d648:	movne	r0, #0
   1d64c:	cmp	ip, #1
   1d650:	movne	r0, #0
   1d654:	andeq	r0, r0, #1
   1d658:	cmp	r0, #0
   1d65c:	bne	1d75c <__assert_fail@plt+0xbda0>
   1d660:	ldrb	r1, [r1, #6]
   1d664:	ldrb	r0, [r4, #52]	; 0x34
   1d668:	cmp	ip, #2
   1d66c:	lsr	r1, r1, #4
   1d670:	orr	r1, r1, r0, lsr #5
   1d674:	and	r1, r1, #1
   1d678:	bic	r0, r0, #32
   1d67c:	orr	r1, r0, r1, lsl #5
   1d680:	strb	r1, [r4, #52]	; 0x34
   1d684:	uxtbeq	r1, r1
   1d688:	orreq	r1, r1, #16
   1d68c:	beq	1d6a0 <__assert_fail@plt+0xbce4>
   1d690:	cmp	ip, #4
   1d694:	bne	1d6a4 <__assert_fail@plt+0xbce8>
   1d698:	ldrb	r1, [r4, #52]	; 0x34
   1d69c:	orr	r1, r1, #64	; 0x40
   1d6a0:	strb	r1, [r4, #52]	; 0x34
   1d6a4:	cmp	r3, #0
   1d6a8:	beq	1d75c <__assert_fail@plt+0xbda0>
   1d6ac:	ldr	r1, [r4, #40]	; 0x28
   1d6b0:	cmp	sl, r1
   1d6b4:	bne	1d704 <__assert_fail@plt+0xbd48>
   1d6b8:	mov	r0, #12
   1d6bc:	str	r3, [sp, #12]
   1d6c0:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   1d6c4:	ldr	r3, [sp, #12]
   1d6c8:	subs	r1, r0, #0
   1d6cc:	bne	1d6dc <__assert_fail@plt+0xbd20>
   1d6d0:	mov	r0, r4
   1d6d4:	bl	1bc28 <__assert_fail@plt+0xa26c>
   1d6d8:	b	1d574 <__assert_fail@plt+0xbbb8>
   1d6dc:	str	r1, [r4, #40]	; 0x28
   1d6e0:	mov	r1, r5
   1d6e4:	str	r3, [sp, #12]
   1d6e8:	bl	1d314 <__assert_fail@plt+0xb958>
   1d6ec:	ldr	r3, [sp, #12]
   1d6f0:	subs	r6, r0, #0
   1d6f4:	bne	1d6d0 <__assert_fail@plt+0xbd14>
   1d6f8:	ldrb	r1, [r4, #52]	; 0x34
   1d6fc:	orr	r1, r1, #128	; 0x80
   1d700:	strb	r1, [r4, #52]	; 0x34
   1d704:	tst	r3, #1
   1d708:	beq	1d714 <__assert_fail@plt+0xbd58>
   1d70c:	tst	r7, #1
   1d710:	beq	1d74c <__assert_fail@plt+0xbd90>
   1d714:	tst	r3, #2
   1d718:	beq	1d724 <__assert_fail@plt+0xbd68>
   1d71c:	tst	r7, #1
   1d720:	bne	1d74c <__assert_fail@plt+0xbd90>
   1d724:	tst	r3, #16
   1d728:	beq	1d738 <__assert_fail@plt+0xbd7c>
   1d72c:	ldr	r2, [sp, #4]
   1d730:	cmp	r2, #0
   1d734:	beq	1d74c <__assert_fail@plt+0xbd90>
   1d738:	tst	r3, #64	; 0x40
   1d73c:	beq	1d75c <__assert_fail@plt+0xbda0>
   1d740:	ldr	r3, [sp]
   1d744:	cmp	r3, #0
   1d748:	bne	1d75c <__assert_fail@plt+0xbda0>
   1d74c:	sub	r1, fp, r6
   1d750:	mov	r0, sl
   1d754:	bl	1d1cc <__assert_fail@plt+0xb810>
   1d758:	add	r6, r6, #1
   1d75c:	add	fp, fp, #1
   1d760:	b	1d5fc <__assert_fail@plt+0xbc40>
   1d764:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1d768:	ldr	r3, [r1, #4]
   1d76c:	cmp	r3, #0
   1d770:	beq	1d8d0 <__assert_fail@plt+0xbf14>
   1d774:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d778:	ldr	r5, [r2, #4]
   1d77c:	cmp	r5, #0
   1d780:	beq	1d8b4 <__assert_fail@plt+0xbef8>
   1d784:	mov	r6, r2
   1d788:	ldr	r2, [r0, #4]
   1d78c:	add	r3, r3, r5
   1d790:	ldr	r5, [r0]
   1d794:	add	r2, r3, r2
   1d798:	cmp	r2, r5
   1d79c:	mov	r7, r1
   1d7a0:	mov	r4, r0
   1d7a4:	ble	1d7c8 <__assert_fail@plt+0xbe0c>
   1d7a8:	add	r5, r3, r5
   1d7ac:	ldr	r0, [r0, #8]
   1d7b0:	lsl	r1, r5, #2
   1d7b4:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1d7b8:	cmp	r0, #0
   1d7bc:	beq	1d8d8 <__assert_fail@plt+0xbf1c>
   1d7c0:	str	r0, [r4, #8]
   1d7c4:	str	r5, [r4]
   1d7c8:	ldr	r2, [r4, #4]
   1d7cc:	ldr	r3, [r7, #4]
   1d7d0:	ldr	r0, [r6, #4]
   1d7d4:	add	ip, r2, r3
   1d7d8:	ldr	r8, [r7, #8]
   1d7dc:	ldr	r9, [r6, #8]
   1d7e0:	add	ip, ip, r0
   1d7e4:	sub	r3, r3, #1
   1d7e8:	sub	r0, r0, #1
   1d7ec:	sub	r2, r2, #1
   1d7f0:	ldr	lr, [r9, r0, lsl #2]
   1d7f4:	ldr	r1, [r8, r3, lsl #2]
   1d7f8:	cmp	r1, lr
   1d7fc:	lsleq	lr, r2, #2
   1d800:	beq	1d814 <__assert_fail@plt+0xbe58>
   1d804:	blt	1d844 <__assert_fail@plt+0xbe88>
   1d808:	subs	r3, r3, #1
   1d80c:	b	1d848 <__assert_fail@plt+0xbe8c>
   1d810:	sub	r2, r2, #1
   1d814:	cmp	r2, #0
   1d818:	ldr	r5, [r4, #8]
   1d81c:	blt	1d834 <__assert_fail@plt+0xbe78>
   1d820:	ldr	sl, [r5, lr]
   1d824:	sub	lr, lr, #4
   1d828:	cmp	r1, sl
   1d82c:	blt	1d810 <__assert_fail@plt+0xbe54>
   1d830:	beq	1d83c <__assert_fail@plt+0xbe80>
   1d834:	sub	ip, ip, #1
   1d838:	str	r1, [r5, ip, lsl #2]
   1d83c:	subs	r3, r3, #1
   1d840:	bmi	1d84c <__assert_fail@plt+0xbe90>
   1d844:	subs	r0, r0, #1
   1d848:	bpl	1d7f0 <__assert_fail@plt+0xbe34>
   1d84c:	ldr	r1, [r4, #4]
   1d850:	ldr	r2, [r7, #4]
   1d854:	ldr	r0, [r6, #4]
   1d858:	add	r2, r1, r2
   1d85c:	add	r2, r2, r0
   1d860:	sub	r3, r1, #1
   1d864:	sub	lr, r2, #1
   1d868:	sub	r2, r2, ip
   1d86c:	add	r1, r1, r2
   1d870:	cmp	r3, #0
   1d874:	cmpge	r2, #0
   1d878:	str	r1, [r4, #4]
   1d87c:	ldr	r0, [r4, #8]
   1d880:	ble	1d8a8 <__assert_fail@plt+0xbeec>
   1d884:	ldr	r5, [r0, lr, lsl #2]
   1d888:	ldr	r4, [r0, r3, lsl #2]
   1d88c:	cmp	r5, r4
   1d890:	ble	1d8bc <__assert_fail@plt+0xbf00>
   1d894:	add	r1, r3, r2
   1d898:	subs	r2, r2, #1
   1d89c:	sub	lr, lr, #1
   1d8a0:	str	r5, [r0, r1, lsl #2]
   1d8a4:	bne	1d884 <__assert_fail@plt+0xbec8>
   1d8a8:	lsl	r2, r2, #2
   1d8ac:	add	r1, r0, ip, lsl #2
   1d8b0:	bl	115e4 <memcpy@plt>
   1d8b4:	mov	r0, #0
   1d8b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d8bc:	add	r1, r3, r2
   1d8c0:	subs	r3, r3, #1
   1d8c4:	str	r4, [r0, r1, lsl #2]
   1d8c8:	bcs	1d884 <__assert_fail@plt+0xbec8>
   1d8cc:	b	1d8a8 <__assert_fail@plt+0xbeec>
   1d8d0:	mov	r0, r3
   1d8d4:	bx	lr
   1d8d8:	mov	r0, #12
   1d8dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d8e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8e4:	sub	sp, sp, #36	; 0x24
   1d8e8:	ldr	r5, [r0, #28]
   1d8ec:	str	r3, [sp, #4]
   1d8f0:	mov	r3, #12
   1d8f4:	mov	r8, r0
   1d8f8:	mla	r5, r3, r1, r5
   1d8fc:	mov	sl, r1
   1d900:	mov	r7, r2
   1d904:	mvn	fp, #0
   1d908:	mov	r4, #0
   1d90c:	str	r4, [sp, #20]
   1d910:	str	r4, [sp, #24]
   1d914:	str	r4, [sp, #28]
   1d918:	str	r3, [sp, #8]
   1d91c:	ldr	r3, [r5, #4]
   1d920:	cmp	r4, r3
   1d924:	blt	1d948 <__assert_fail@plt+0xbf8c>
   1d928:	mov	r4, #0
   1d92c:	ldr	r3, [r5, #4]
   1d930:	cmp	r4, r3
   1d934:	blt	1da2c <__assert_fail@plt+0xc070>
   1d938:	ldr	r0, [sp, #28]
   1d93c:	bl	1a30c <__assert_fail@plt+0x8950>
   1d940:	mov	r6, #0
   1d944:	b	1da18 <__assert_fail@plt+0xc05c>
   1d948:	ldr	r3, [r5, #8]
   1d94c:	ldr	r6, [r3, r4, lsl #2]
   1d950:	cmp	sl, r6
   1d954:	beq	1da24 <__assert_fail@plt+0xc068>
   1d958:	ldr	r3, [r8]
   1d95c:	add	r3, r3, r6, lsl #3
   1d960:	ldrb	r3, [r3, #4]
   1d964:	tst	r3, #8
   1d968:	beq	1da24 <__assert_fail@plt+0xc068>
   1d96c:	ldr	r3, [sp, #8]
   1d970:	mov	r0, r5
   1d974:	mul	r6, r3, r6
   1d978:	ldr	r3, [r8, #20]
   1d97c:	add	r3, r3, r6
   1d980:	ldr	r1, [r3, #8]
   1d984:	ldr	r3, [r3, #4]
   1d988:	ldr	r2, [r1]
   1d98c:	cmp	r3, #1
   1d990:	movle	r9, fp
   1d994:	ldrgt	r9, [r1, #4]
   1d998:	mov	r1, r2
   1d99c:	str	r2, [sp, #12]
   1d9a0:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   1d9a4:	cmp	r0, #0
   1d9a8:	bne	1d9c4 <__assert_fail@plt+0xc008>
   1d9ac:	ldr	r2, [sp, #12]
   1d9b0:	mov	r0, r7
   1d9b4:	mov	r1, r2
   1d9b8:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   1d9bc:	cmp	r0, #0
   1d9c0:	bne	1d9f4 <__assert_fail@plt+0xc038>
   1d9c4:	cmp	r9, #0
   1d9c8:	ble	1da24 <__assert_fail@plt+0xc068>
   1d9cc:	mov	r1, r9
   1d9d0:	mov	r0, r5
   1d9d4:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   1d9d8:	cmp	r0, #0
   1d9dc:	bne	1da24 <__assert_fail@plt+0xc068>
   1d9e0:	mov	r1, r9
   1d9e4:	mov	r0, r7
   1d9e8:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   1d9ec:	cmp	r0, #0
   1d9f0:	beq	1da24 <__assert_fail@plt+0xc068>
   1d9f4:	ldr	r2, [r8, #28]
   1d9f8:	ldr	r1, [sp, #4]
   1d9fc:	add	r2, r2, r6
   1da00:	add	r0, sp, #20
   1da04:	bl	1d768 <__assert_fail@plt+0xbdac>
   1da08:	subs	r6, r0, #0
   1da0c:	beq	1da24 <__assert_fail@plt+0xc068>
   1da10:	ldr	r0, [sp, #28]
   1da14:	bl	1a30c <__assert_fail@plt+0x8950>
   1da18:	mov	r0, r6
   1da1c:	add	sp, sp, #36	; 0x24
   1da20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da24:	add	r4, r4, #1
   1da28:	b	1d91c <__assert_fail@plt+0xbf60>
   1da2c:	ldr	r3, [r5, #8]
   1da30:	add	r0, sp, #20
   1da34:	ldr	r6, [r3, r4, lsl #2]
   1da38:	mov	r1, r6
   1da3c:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   1da40:	cmp	r0, #0
   1da44:	bne	1da60 <__assert_fail@plt+0xc0a4>
   1da48:	mov	r1, r6
   1da4c:	mov	r0, r7
   1da50:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   1da54:	sub	r1, r0, #1
   1da58:	mov	r0, r7
   1da5c:	bl	1d1cc <__assert_fail@plt+0xb810>
   1da60:	add	r4, r4, #1
   1da64:	b	1d92c <__assert_fail@plt+0xbf70>
   1da68:	ldrb	r3, [r1, #24]
   1da6c:	cmp	r3, #16
   1da70:	bne	1da90 <__assert_fail@plt+0xc0d4>
   1da74:	ldr	r3, [r1, #4]
   1da78:	mov	r0, #0
   1da7c:	ldr	r2, [r3, #12]
   1da80:	ldr	r3, [r3, #28]
   1da84:	str	r2, [r1, #12]
   1da88:	str	r3, [r1, #28]
   1da8c:	bx	lr
   1da90:	push	{r4, r5, r6, lr}
   1da94:	add	r3, r1, #20
   1da98:	mov	r4, r1
   1da9c:	mov	r5, r0
   1daa0:	str	r1, [r4, #12]
   1daa4:	ldm	r3, {r1, r2}
   1daa8:	bl	1b9f0 <__assert_fail@plt+0xa034>
   1daac:	cmn	r0, #1
   1dab0:	str	r0, [r4, #28]
   1dab4:	beq	1daf4 <__assert_fail@plt+0xc138>
   1dab8:	ldrb	r3, [r4, #24]
   1dabc:	cmp	r3, #12
   1dac0:	bne	1daec <__assert_fail@plt+0xc130>
   1dac4:	ldr	r3, [r5]
   1dac8:	ldr	r2, [r4, #20]
   1dacc:	add	r0, r3, r0, lsl #3
   1dad0:	lsl	r2, r2, #22
   1dad4:	ldr	r3, [r0, #4]
   1dad8:	lsr	r2, r2, #22
   1dadc:	bic	r3, r3, #261120	; 0x3fc00
   1dae0:	bic	r3, r3, #768	; 0x300
   1dae4:	orr	r3, r3, r2, lsl #8
   1dae8:	str	r3, [r0, #4]
   1daec:	mov	r0, #0
   1daf0:	pop	{r4, r5, r6, pc}
   1daf4:	mov	r0, #12
   1daf8:	pop	{r4, r5, r6, pc}
   1dafc:	ldr	r3, [r0]
   1db00:	push	{r4, r5, r6, lr}
   1db04:	cmp	r3, #0
   1db08:	bne	1db1c <__assert_fail@plt+0xc160>
   1db0c:	bl	1b0e0 <__assert_fail@plt+0x9724>
   1db10:	clz	r0, r0
   1db14:	lsr	r0, r0, #5
   1db18:	pop	{r4, r5, r6, pc}
   1db1c:	ldr	r2, [r0, #4]
   1db20:	mov	r4, r0
   1db24:	cmp	r2, #0
   1db28:	mov	r5, r1
   1db2c:	ldreq	r3, [r0, #8]
   1db30:	streq	r1, [r3]
   1db34:	beq	1dbb8 <__assert_fail@plt+0xc1fc>
   1db38:	cmp	r3, r2
   1db3c:	bne	1db60 <__assert_fail@plt+0xc1a4>
   1db40:	lsl	r2, r3, #1
   1db44:	str	r2, [r0]
   1db48:	lsl	r1, r3, #3
   1db4c:	ldr	r0, [r0, #8]
   1db50:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1db54:	cmp	r0, #0
   1db58:	popeq	{r4, r5, r6, pc}
   1db5c:	str	r0, [r4, #8]
   1db60:	ldr	r2, [r4, #8]
   1db64:	ldr	r3, [r2]
   1db68:	cmp	r5, r3
   1db6c:	ldr	r3, [r4, #4]
   1db70:	movlt	r1, r3
   1db74:	addlt	r0, r2, r3, lsl #2
   1db78:	blt	1dba4 <__assert_fail@plt+0xc1e8>
   1db7c:	add	r1, r2, r3, lsl #2
   1db80:	ldr	r0, [r1, #-4]
   1db84:	cmp	r5, r0
   1db88:	bge	1dbb4 <__assert_fail@plt+0xc1f8>
   1db8c:	str	r0, [r1], #-4
   1db90:	sub	r3, r3, #1
   1db94:	b	1db80 <__assert_fail@plt+0xc1c4>
   1db98:	ldr	ip, [r0, #-4]
   1db9c:	sub	r1, r1, #1
   1dba0:	str	ip, [r0], #-4
   1dba4:	cmp	r1, #0
   1dba8:	bgt	1db98 <__assert_fail@plt+0xc1dc>
   1dbac:	cmp	r3, #0
   1dbb0:	subge	r3, r3, r3
   1dbb4:	str	r5, [r2, r3, lsl #2]
   1dbb8:	ldr	r3, [r4, #4]
   1dbbc:	mov	r0, #1
   1dbc0:	add	r3, r3, #1
   1dbc4:	str	r3, [r4, #4]
   1dbc8:	pop	{r4, r5, r6, pc}
   1dbcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbd0:	sub	sp, sp, #20
   1dbd4:	mov	r4, r0
   1dbd8:	ldr	r6, [sp, #56]	; 0x38
   1dbdc:	mov	r7, r1
   1dbe0:	mov	r5, r2
   1dbe4:	mov	fp, r3
   1dbe8:	mov	sl, #12
   1dbec:	ldr	ip, [r4]
   1dbf0:	ldr	r2, [r4, #20]
   1dbf4:	add	r1, ip, r7, lsl #3
   1dbf8:	ldrb	r3, [r1, #4]
   1dbfc:	cmp	r3, #4
   1dc00:	bne	1dc78 <__assert_fail@plt+0xc2bc>
   1dc04:	ldr	r3, [r4, #12]
   1dc08:	mul	r9, sl, r5
   1dc0c:	ldr	r8, [r3, r7, lsl #2]
   1dc10:	add	r2, r2, r9
   1dc14:	mov	r1, #0
   1dc18:	str	r1, [r2, #4]
   1dc1c:	mov	r0, r4
   1dc20:	mov	r2, r6
   1dc24:	mov	r1, r8
   1dc28:	str	r5, [sp, #12]
   1dc2c:	bl	1bb98 <__assert_fail@plt+0xa1dc>
   1dc30:	ldr	r3, [sp, #12]
   1dc34:	cmn	r0, #1
   1dc38:	mov	r5, r0
   1dc3c:	bne	1dc4c <__assert_fail@plt+0xc290>
   1dc40:	mov	r0, #12
   1dc44:	add	sp, sp, #20
   1dc48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc4c:	ldr	r2, [r4, #12]
   1dc50:	ldr	r1, [r2, r7, lsl #2]
   1dc54:	str	r1, [r2, r3, lsl #2]
   1dc58:	ldr	r0, [r4, #20]
   1dc5c:	mov	r1, r5
   1dc60:	add	r0, r0, r9
   1dc64:	bl	1dafc <__assert_fail@plt+0xc140>
   1dc68:	cmp	r0, #0
   1dc6c:	beq	1dc40 <__assert_fail@plt+0xc284>
   1dc70:	mov	r7, r8
   1dc74:	b	1dbec <__assert_fail@plt+0xc230>
   1dc78:	mul	r8, sl, r7
   1dc7c:	add	r3, r2, r8
   1dc80:	ldr	r0, [r3, #4]
   1dc84:	cmp	r0, #0
   1dc88:	ldreq	r3, [r4, #12]
   1dc8c:	ldreq	r2, [r3, r7, lsl #2]
   1dc90:	streq	r2, [r3, r5, lsl #2]
   1dc94:	beq	1dc44 <__assert_fail@plt+0xc288>
   1dc98:	cmp	r0, #1
   1dc9c:	ldr	r3, [r3, #8]
   1dca0:	mul	r9, sl, r5
   1dca4:	bne	1dd24 <__assert_fail@plt+0xc368>
   1dca8:	cmp	r7, r5
   1dcac:	ldr	r8, [r3]
   1dcb0:	add	r0, r2, r9
   1dcb4:	mov	r3, #0
   1dcb8:	sub	r2, r7, fp
   1dcbc:	clz	r2, r2
   1dcc0:	lsr	r2, r2, #5
   1dcc4:	moveq	r2, #0
   1dcc8:	cmp	r2, r3
   1dccc:	str	r3, [r0, #4]
   1dcd0:	beq	1dcf4 <__assert_fail@plt+0xc338>
   1dcd4:	mov	r1, r8
   1dcd8:	str	r3, [sp, #12]
   1dcdc:	bl	1dafc <__assert_fail@plt+0xc140>
   1dce0:	ldr	r3, [sp, #12]
   1dce4:	cmp	r0, #0
   1dce8:	movne	r0, r3
   1dcec:	bne	1dc44 <__assert_fail@plt+0xc288>
   1dcf0:	b	1dc40 <__assert_fail@plt+0xc284>
   1dcf4:	ldr	r3, [r1, #4]
   1dcf8:	ldr	r2, [pc, #272]	; 1de10 <__assert_fail@plt+0xc454>
   1dcfc:	and	r3, r2, r3, lsr #8
   1dd00:	orr	r6, r6, r3
   1dd04:	mov	r2, r6
   1dd08:	mov	r1, r8
   1dd0c:	mov	r0, r4
   1dd10:	bl	1bb98 <__assert_fail@plt+0xa1dc>
   1dd14:	cmn	r0, #1
   1dd18:	mov	r5, r0
   1dd1c:	bne	1dc58 <__assert_fail@plt+0xc29c>
   1dd20:	b	1dc40 <__assert_fail@plt+0xc284>
   1dd24:	add	r0, r2, r9
   1dd28:	ldr	r5, [r3]
   1dd2c:	mov	r3, #0
   1dd30:	str	r3, [r0, #4]
   1dd34:	ldr	r3, [r4, #8]
   1dd38:	sub	r2, r3, #-536870911	; 0xe0000001
   1dd3c:	sub	r1, r3, #1
   1dd40:	sub	r3, r3, #-1073741823	; 0xc0000001
   1dd44:	add	ip, ip, r2, lsl #3
   1dd48:	lsl	r3, r3, #2
   1dd4c:	ldrb	lr, [ip, #6]
   1dd50:	cmp	r1, #0
   1dd54:	movle	r2, #0
   1dd58:	movgt	r2, #1
   1dd5c:	ands	r2, r2, lr, lsr #2
   1dd60:	bne	1ddcc <__assert_fail@plt+0xc410>
   1dd64:	mov	r2, r6
   1dd68:	mov	r1, r5
   1dd6c:	mov	r0, r4
   1dd70:	bl	1bb98 <__assert_fail@plt+0xa1dc>
   1dd74:	cmn	r0, #1
   1dd78:	mov	r7, r0
   1dd7c:	beq	1dc40 <__assert_fail@plt+0xc284>
   1dd80:	ldr	r0, [r4, #20]
   1dd84:	mov	r1, r7
   1dd88:	add	r0, r0, r9
   1dd8c:	bl	1dafc <__assert_fail@plt+0xc140>
   1dd90:	cmp	r0, #0
   1dd94:	beq	1dc40 <__assert_fail@plt+0xc284>
   1dd98:	str	r6, [sp]
   1dd9c:	mov	r3, fp
   1dda0:	mov	r2, r7
   1dda4:	mov	r1, r5
   1dda8:	mov	r0, r4
   1ddac:	bl	1dbcc <__assert_fail@plt+0xc210>
   1ddb0:	cmp	r0, #0
   1ddb4:	bne	1dc44 <__assert_fail@plt+0xc288>
   1ddb8:	ldr	r3, [r4, #20]
   1ddbc:	add	r8, r3, r8
   1ddc0:	ldr	r3, [r8, #8]
   1ddc4:	ldr	r8, [r3, #4]
   1ddc8:	b	1dd04 <__assert_fail@plt+0xc348>
   1ddcc:	ldr	r2, [r4, #16]
   1ddd0:	ldr	r2, [r2, r3]
   1ddd4:	cmp	r5, r2
   1ddd8:	bne	1ddf0 <__assert_fail@plt+0xc434>
   1dddc:	ldr	r2, [ip, #4]
   1dde0:	ldr	lr, [pc, #40]	; 1de10 <__assert_fail@plt+0xc454>
   1dde4:	and	r2, lr, r2, lsr #8
   1dde8:	cmp	r6, r2
   1ddec:	beq	1de00 <__assert_fail@plt+0xc444>
   1ddf0:	sub	r1, r1, #1
   1ddf4:	sub	ip, ip, #8
   1ddf8:	sub	r3, r3, #4
   1ddfc:	b	1dd4c <__assert_fail@plt+0xc390>
   1de00:	bl	1dafc <__assert_fail@plt+0xc140>
   1de04:	cmp	r0, #0
   1de08:	bne	1ddb8 <__assert_fail@plt+0xc3fc>
   1de0c:	b	1dc40 <__assert_fail@plt+0xc284>
   1de10:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1de14:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1de18:	mov	r6, r0
   1de1c:	ldr	r7, [sp, #40]	; 0x28
   1de20:	mov	r5, r1
   1de24:	mov	r4, r2
   1de28:	mov	r8, r3
   1de2c:	mov	r9, #12
   1de30:	mov	r1, r4
   1de34:	mov	r0, r5
   1de38:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   1de3c:	cmp	r0, #0
   1de40:	beq	1de4c <__assert_fail@plt+0xc490>
   1de44:	mov	r0, #0
   1de48:	b	1de8c <__assert_fail@plt+0xc4d0>
   1de4c:	ldr	r3, [r6]
   1de50:	add	r2, r3, r4, lsl #3
   1de54:	ldrb	r2, [r2, #4]
   1de58:	cmp	r2, r7
   1de5c:	bne	1de94 <__assert_fail@plt+0xc4d8>
   1de60:	ldr	r3, [r3, r4, lsl #3]
   1de64:	cmp	r8, r3
   1de68:	bne	1de94 <__assert_fail@plt+0xc4d8>
   1de6c:	cmp	r7, #9
   1de70:	bne	1de44 <__assert_fail@plt+0xc488>
   1de74:	mov	r1, r4
   1de78:	mov	r0, r5
   1de7c:	bl	1dafc <__assert_fail@plt+0xc140>
   1de80:	cmp	r0, #0
   1de84:	bne	1de44 <__assert_fail@plt+0xc488>
   1de88:	mov	r0, #12
   1de8c:	add	sp, sp, #12
   1de90:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1de94:	mov	r1, r4
   1de98:	mov	r0, r5
   1de9c:	bl	1dafc <__assert_fail@plt+0xc140>
   1dea0:	cmp	r0, #0
   1dea4:	beq	1de88 <__assert_fail@plt+0xc4cc>
   1dea8:	mul	r4, r9, r4
   1deac:	ldr	r3, [r6, #20]
   1deb0:	add	r3, r3, r4
   1deb4:	ldr	r2, [r3, #4]
   1deb8:	cmp	r2, #0
   1debc:	beq	1de44 <__assert_fail@plt+0xc488>
   1dec0:	cmp	r2, #2
   1dec4:	beq	1dedc <__assert_fail@plt+0xc520>
   1dec8:	ldr	r2, [r6, #20]
   1decc:	add	r4, r2, r4
   1ded0:	ldr	r3, [r4, #8]
   1ded4:	ldr	r4, [r3]
   1ded8:	b	1de30 <__assert_fail@plt+0xc474>
   1dedc:	ldr	r2, [r3, #8]
   1dee0:	mov	r1, r5
   1dee4:	str	r7, [sp]
   1dee8:	mov	r3, r8
   1deec:	ldr	r2, [r2, #4]
   1def0:	mov	r0, r6
   1def4:	bl	1de14 <__assert_fail@plt+0xc458>
   1def8:	cmp	r0, #0
   1defc:	beq	1dec8 <__assert_fail@plt+0xc50c>
   1df00:	b	1de8c <__assert_fail@plt+0xc4d0>
   1df04:	push	{r4, r5, r6, r7, r8, lr}
   1df08:	subs	r7, r1, #0
   1df0c:	bne	1df18 <__assert_fail@plt+0xc55c>
   1df10:	mov	r0, #0
   1df14:	pop	{r4, r5, r6, r7, r8, pc}
   1df18:	ldr	r3, [r7, #4]
   1df1c:	cmp	r3, #0
   1df20:	beq	1df10 <__assert_fail@plt+0xc554>
   1df24:	ldm	r0, {r1, r2}
   1df28:	mov	r5, r0
   1df2c:	add	r2, r2, r3, lsl #1
   1df30:	cmp	r1, r2
   1df34:	bge	1df5c <__assert_fail@plt+0xc5a0>
   1df38:	add	r1, r3, r1
   1df3c:	ldr	r0, [r0, #8]
   1df40:	lsl	r4, r1, #1
   1df44:	lsl	r1, r1, #3
   1df48:	bl	1a484 <__assert_fail@plt+0x8ac8>
   1df4c:	cmp	r0, #0
   1df50:	beq	1e060 <__assert_fail@plt+0xc6a4>
   1df54:	str	r0, [r5, #8]
   1df58:	str	r4, [r5]
   1df5c:	ldr	r4, [r5, #4]
   1df60:	ldr	r2, [r7, #4]
   1df64:	cmp	r4, #0
   1df68:	bne	1df88 <__assert_fail@plt+0xc5cc>
   1df6c:	str	r2, [r5, #4]
   1df70:	ldr	r2, [r7, #4]
   1df74:	ldr	r0, [r5, #8]
   1df78:	ldr	r1, [r7, #8]
   1df7c:	lsl	r2, r2, #2
   1df80:	bl	115e4 <memcpy@plt>
   1df84:	b	1df10 <__assert_fail@plt+0xc554>
   1df88:	add	r6, r4, r2, lsl #1
   1df8c:	sub	r3, r4, #1
   1df90:	sub	r2, r2, #1
   1df94:	cmp	r2, #0
   1df98:	cmpge	r3, #0
   1df9c:	bge	1e014 <__assert_fail@plt+0xc658>
   1dfa0:	cmp	r2, #0
   1dfa4:	blt	1dfc4 <__assert_fail@plt+0xc608>
   1dfa8:	add	r2, r2, #1
   1dfac:	sub	r6, r6, r2
   1dfb0:	ldr	r0, [r5, #8]
   1dfb4:	lsl	r2, r2, #2
   1dfb8:	ldr	r1, [r7, #8]
   1dfbc:	add	r0, r0, r6, lsl #2
   1dfc0:	bl	115e4 <memcpy@plt>
   1dfc4:	ldr	r2, [r7, #4]
   1dfc8:	ldr	r1, [r5, #4]
   1dfcc:	add	r2, r1, r2, lsl #1
   1dfd0:	sub	ip, r2, #1
   1dfd4:	subs	r2, r2, r6
   1dfd8:	beq	1df10 <__assert_fail@plt+0xc554>
   1dfdc:	ldr	r0, [r5, #8]
   1dfe0:	sub	r3, r1, #1
   1dfe4:	add	r1, r1, r2
   1dfe8:	str	r1, [r5, #4]
   1dfec:	ldr	r4, [r0, ip, lsl #2]
   1dff0:	ldr	lr, [r0, r3, lsl #2]
   1dff4:	add	r1, r3, r2
   1dff8:	cmp	r4, lr
   1dffc:	ble	1e048 <__assert_fail@plt+0xc68c>
   1e000:	subs	r2, r2, #1
   1e004:	sub	ip, ip, #1
   1e008:	str	r4, [r0, r1, lsl #2]
   1e00c:	bne	1dfec <__assert_fail@plt+0xc630>
   1e010:	b	1df10 <__assert_fail@plt+0xc554>
   1e014:	ldr	r1, [r5, #8]
   1e018:	ldr	r0, [r7, #8]
   1e01c:	ldr	ip, [r1, r3, lsl #2]
   1e020:	ldr	r0, [r0, r2, lsl #2]
   1e024:	cmp	ip, r0
   1e028:	subeq	r2, r2, #1
   1e02c:	beq	1e040 <__assert_fail@plt+0xc684>
   1e030:	sublt	r6, r6, #1
   1e034:	sublt	r2, r2, #1
   1e038:	strlt	r0, [r1, r6, lsl #2]
   1e03c:	blt	1df94 <__assert_fail@plt+0xc5d8>
   1e040:	sub	r3, r3, #1
   1e044:	b	1df94 <__assert_fail@plt+0xc5d8>
   1e048:	subs	r3, r3, #1
   1e04c:	str	lr, [r0, r1, lsl #2]
   1e050:	bpl	1dfec <__assert_fail@plt+0xc630>
   1e054:	lsl	r2, r2, #2
   1e058:	add	r1, r0, r6, lsl #2
   1e05c:	b	1df80 <__assert_fail@plt+0xc5c4>
   1e060:	mov	r0, #12
   1e064:	pop	{r4, r5, r6, r7, r8, pc}
   1e068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e06c:	mov	r7, #12
   1e070:	sub	sp, sp, #44	; 0x2c
   1e074:	mul	r7, r7, r2
   1e078:	str	r3, [sp, #12]
   1e07c:	ldr	r3, [r1, #20]
   1e080:	mov	r4, r1
   1e084:	add	r3, r3, r7
   1e088:	add	r6, sp, #16
   1e08c:	ldr	r1, [r3, #4]
   1e090:	str	r0, [sp, #8]
   1e094:	add	r1, r1, #1
   1e098:	mov	r0, r6
   1e09c:	mov	r5, r2
   1e0a0:	bl	1b120 <__assert_fail@plt+0x9764>
   1e0a4:	subs	sl, r0, #0
   1e0a8:	bne	1e140 <__assert_fail@plt+0xc784>
   1e0ac:	ldr	r3, [sp, #20]
   1e0b0:	lsl	r8, r5, #3
   1e0b4:	add	r2, r3, #1
   1e0b8:	str	r2, [sp, #20]
   1e0bc:	ldr	r2, [sp, #24]
   1e0c0:	str	r5, [r2, r3, lsl #2]
   1e0c4:	ldr	r3, [r4, #24]
   1e0c8:	mvn	r2, #0
   1e0cc:	add	r3, r3, r7
   1e0d0:	str	r2, [r3, #4]
   1e0d4:	ldr	r3, [r4]
   1e0d8:	add	r2, r3, r8
   1e0dc:	ldr	r1, [r2, #4]
   1e0e0:	ldr	r2, [pc, #352]	; 1e248 <__assert_fail@plt+0xc88c>
   1e0e4:	and	r2, r2, r1
   1e0e8:	cmp	r2, #0
   1e0ec:	bne	1e14c <__assert_fail@plt+0xc790>
   1e0f0:	ldr	r3, [r4]
   1e0f4:	add	r8, r3, r8
   1e0f8:	ldrb	r5, [r8, #4]
   1e0fc:	ands	r5, r5, #8
   1e100:	movne	r5, #0
   1e104:	movne	r9, r5
   1e108:	addne	r8, sp, #28
   1e10c:	bne	1e1d4 <__assert_fail@plt+0xc818>
   1e110:	ldr	r3, [sp, #12]
   1e114:	eor	r3, r3, #1
   1e118:	tst	r5, r3
   1e11c:	ldr	r3, [r4, #24]
   1e120:	ldmeq	r6, {r0, r1, r2}
   1e124:	add	r7, r3, r7
   1e128:	movne	r3, #0
   1e12c:	strne	r3, [r7, #4]
   1e130:	stmeq	r7, {r0, r1, r2}
   1e134:	ldm	r6, {r0, r1, r2}
   1e138:	ldr	r3, [sp, #8]
   1e13c:	stm	r3, {r0, r1, r2}
   1e140:	mov	r0, sl
   1e144:	add	sp, sp, #44	; 0x2c
   1e148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e14c:	ldr	r2, [r4, #20]
   1e150:	add	r2, r2, r7
   1e154:	ldr	r0, [r2, #4]
   1e158:	cmp	r0, #0
   1e15c:	beq	1e0f0 <__assert_fail@plt+0xc734>
   1e160:	ldr	r2, [r2, #8]
   1e164:	ldr	r2, [r2]
   1e168:	add	r3, r3, r2, lsl #3
   1e16c:	ldrb	r3, [r3, #6]
   1e170:	tst	r3, #4
   1e174:	bne	1e0f0 <__assert_fail@plt+0xc734>
   1e178:	ldr	r3, [pc, #204]	; 1e24c <__assert_fail@plt+0xc890>
   1e17c:	mov	r2, r5
   1e180:	and	r3, r3, r1, lsr #8
   1e184:	str	r3, [sp]
   1e188:	mov	r1, r5
   1e18c:	mov	r3, r5
   1e190:	mov	r0, r4
   1e194:	bl	1dbcc <__assert_fail@plt+0xc210>
   1e198:	cmp	r0, #0
   1e19c:	beq	1e0f0 <__assert_fail@plt+0xc734>
   1e1a0:	mov	sl, r0
   1e1a4:	b	1e140 <__assert_fail@plt+0xc784>
   1e1a8:	ldr	r3, [r3, #8]
   1e1ac:	ldr	r1, [r4, #24]
   1e1b0:	ldr	r2, [r3, r9, lsl #2]
   1e1b4:	mov	r3, #12
   1e1b8:	mul	fp, r3, r2
   1e1bc:	add	r1, r1, fp
   1e1c0:	ldr	r3, [r1, #4]
   1e1c4:	cmn	r3, #1
   1e1c8:	bne	1e1ec <__assert_fail@plt+0xc830>
   1e1cc:	mov	r5, #1
   1e1d0:	add	r9, r9, #1
   1e1d4:	ldr	r3, [r4, #20]
   1e1d8:	add	r3, r3, r7
   1e1dc:	ldr	r2, [r3, #4]
   1e1e0:	cmp	r9, r2
   1e1e4:	blt	1e1a8 <__assert_fail@plt+0xc7ec>
   1e1e8:	b	1e110 <__assert_fail@plt+0xc754>
   1e1ec:	cmp	r3, #0
   1e1f0:	bne	1e23c <__assert_fail@plt+0xc880>
   1e1f4:	mov	r1, r4
   1e1f8:	mov	r0, r8
   1e1fc:	bl	1e068 <__assert_fail@plt+0xc6ac>
   1e200:	cmp	r0, #0
   1e204:	bne	1e1a0 <__assert_fail@plt+0xc7e4>
   1e208:	mov	r1, r8
   1e20c:	mov	r0, r6
   1e210:	bl	1df04 <__assert_fail@plt+0xc548>
   1e214:	cmp	r0, #0
   1e218:	bne	1e1a0 <__assert_fail@plt+0xc7e4>
   1e21c:	ldr	r3, [r4, #24]
   1e220:	add	fp, r3, fp
   1e224:	ldr	r3, [fp, #4]
   1e228:	cmp	r3, #0
   1e22c:	bne	1e1d0 <__assert_fail@plt+0xc814>
   1e230:	ldr	r0, [sp, #36]	; 0x24
   1e234:	bl	1a30c <__assert_fail@plt+0x8950>
   1e238:	b	1e1cc <__assert_fail@plt+0xc810>
   1e23c:	ldm	r1, {r0, r1, r2}
   1e240:	stm	r8, {r0, r1, r2}
   1e244:	b	1e208 <__assert_fail@plt+0xc84c>
   1e248:	andeq	pc, r3, r0, lsl #30
   1e24c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1e250:	cmp	r1, #0
   1e254:	push	{r4, r5, r6, lr}
   1e258:	mov	r4, r0
   1e25c:	bge	1e268 <__assert_fail@plt+0xc8ac>
   1e260:	ldr	r0, [r4, #60]	; 0x3c
   1e264:	pop	{r4, r5, r6, pc}
   1e268:	ldr	r3, [r0, #48]	; 0x30
   1e26c:	cmp	r1, r3
   1e270:	bne	1e284 <__assert_fail@plt+0xc8c8>
   1e274:	tst	r2, #2
   1e278:	movne	r0, #8
   1e27c:	moveq	r0, #10
   1e280:	pop	{r4, r5, r6, pc}
   1e284:	ldr	r3, [r0, #80]	; 0x50
   1e288:	cmp	r3, #1
   1e28c:	ldrgt	r3, [r0, #8]
   1e290:	bgt	1e2c4 <__assert_fail@plt+0xc908>
   1e294:	ldr	r3, [r0, #4]
   1e298:	ldr	r0, [r0, #68]	; 0x44
   1e29c:	ldrb	r5, [r3, r1]
   1e2a0:	mov	r1, r5
   1e2a4:	bl	1a560 <__assert_fail@plt+0x8ba4>
   1e2a8:	cmp	r0, #0
   1e2ac:	bne	1e328 <__assert_fail@plt+0xc96c>
   1e2b0:	cmp	r5, #10
   1e2b4:	popne	{r4, r5, r6, pc}
   1e2b8:	b	1e30c <__assert_fail@plt+0xc950>
   1e2bc:	subs	r1, r1, #1
   1e2c0:	bcc	1e260 <__assert_fail@plt+0xc8a4>
   1e2c4:	ldr	r5, [r3, r1, lsl #2]
   1e2c8:	cmn	r5, #1
   1e2cc:	beq	1e2bc <__assert_fail@plt+0xc900>
   1e2d0:	ldrb	r3, [r4, #78]	; 0x4e
   1e2d4:	cmp	r3, #0
   1e2d8:	beq	1e304 <__assert_fail@plt+0xc948>
   1e2dc:	mov	r0, r5
   1e2e0:	bl	117e8 <iswalnum@plt>
   1e2e4:	sub	r3, r5, #95	; 0x5f
   1e2e8:	clz	r3, r3
   1e2ec:	lsr	r3, r3, #5
   1e2f0:	cmp	r0, #0
   1e2f4:	moveq	r0, r3
   1e2f8:	orrne	r0, r3, #1
   1e2fc:	cmp	r0, #0
   1e300:	bne	1e328 <__assert_fail@plt+0xc96c>
   1e304:	cmp	r5, #10
   1e308:	bne	1e320 <__assert_fail@plt+0xc964>
   1e30c:	ldrb	r0, [r4, #77]	; 0x4d
   1e310:	cmp	r0, #0
   1e314:	movne	r0, #2
   1e318:	moveq	r0, #0
   1e31c:	pop	{r4, r5, r6, pc}
   1e320:	mov	r0, #0
   1e324:	pop	{r4, r5, r6, pc}
   1e328:	mov	r0, #1
   1e32c:	pop	{r4, r5, r6, pc}
   1e330:	ldr	r3, [r0, #4]
   1e334:	push	{r4, r5, r6, lr}
   1e338:	mov	r5, r1
   1e33c:	ldrb	r1, [r3, r2]
   1e340:	ldrb	r3, [r5, #4]
   1e344:	mov	r4, r0
   1e348:	mov	r6, r2
   1e34c:	sub	r3, r3, #1
   1e350:	cmp	r3, #6
   1e354:	ldrls	pc, [pc, r3, lsl #2]
   1e358:	b	1e444 <__assert_fail@plt+0xca88>
   1e35c:	andeq	lr, r1, r8, ror r3
   1e360:	andeq	lr, r1, r4, asr #8
   1e364:	strdeq	lr, [r1], -r4
   1e368:	andeq	lr, r1, r4, asr #8
   1e36c:	andeq	lr, r1, r0, lsl r4
   1e370:	andeq	lr, r1, r4, asr #8
   1e374:	andeq	lr, r1, r8, lsl #8
   1e378:	ldrb	r3, [r5]
   1e37c:	cmp	r3, r1
   1e380:	bne	1e444 <__assert_fail@plt+0xca88>
   1e384:	ldr	r5, [r5, #4]
   1e388:	ldr	r2, [pc, #196]	; 1e454 <__assert_fail@plt+0xca98>
   1e38c:	and	r2, r2, r5
   1e390:	cmp	r2, #0
   1e394:	beq	1e44c <__assert_fail@plt+0xca90>
   1e398:	ldr	r2, [r4, #88]	; 0x58
   1e39c:	mov	r1, r6
   1e3a0:	mov	r0, r4
   1e3a4:	bl	1e250 <__assert_fail@plt+0xc894>
   1e3a8:	ldr	r3, [pc, #168]	; 1e458 <__assert_fail@plt+0xca9c>
   1e3ac:	and	r3, r3, r5, lsr #8
   1e3b0:	tst	r3, #4
   1e3b4:	beq	1e3c0 <__assert_fail@plt+0xca04>
   1e3b8:	ands	r1, r0, #1
   1e3bc:	beq	1e444 <__assert_fail@plt+0xca88>
   1e3c0:	tst	r3, #8
   1e3c4:	beq	1e3d0 <__assert_fail@plt+0xca14>
   1e3c8:	tst	r0, #1
   1e3cc:	bne	1e444 <__assert_fail@plt+0xca88>
   1e3d0:	tst	r3, #32
   1e3d4:	beq	1e3e0 <__assert_fail@plt+0xca24>
   1e3d8:	ands	r1, r0, #2
   1e3dc:	beq	1e444 <__assert_fail@plt+0xca88>
   1e3e0:	tst	r3, #128	; 0x80
   1e3e4:	beq	1e44c <__assert_fail@plt+0xca90>
   1e3e8:	lsr	r0, r0, #3
   1e3ec:	and	r0, r0, #1
   1e3f0:	pop	{r4, r5, r6, pc}
   1e3f4:	ldr	r0, [r5]
   1e3f8:	bl	1a560 <__assert_fail@plt+0x8ba4>
   1e3fc:	cmp	r0, #0
   1e400:	bne	1e384 <__assert_fail@plt+0xc9c8>
   1e404:	pop	{r4, r5, r6, pc}
   1e408:	tst	r1, #128	; 0x80
   1e40c:	bne	1e444 <__assert_fail@plt+0xca88>
   1e410:	cmp	r1, #10
   1e414:	bne	1e42c <__assert_fail@plt+0xca70>
   1e418:	ldr	r3, [r4, #84]	; 0x54
   1e41c:	ldr	r0, [r3, #128]	; 0x80
   1e420:	ands	r0, r0, #64	; 0x40
   1e424:	bne	1e384 <__assert_fail@plt+0xc9c8>
   1e428:	pop	{r4, r5, r6, pc}
   1e42c:	cmp	r1, #0
   1e430:	bne	1e384 <__assert_fail@plt+0xc9c8>
   1e434:	ldr	r3, [r4, #84]	; 0x54
   1e438:	ldr	r3, [r3, #128]	; 0x80
   1e43c:	tst	r3, #128	; 0x80
   1e440:	beq	1e384 <__assert_fail@plt+0xc9c8>
   1e444:	mov	r0, #0
   1e448:	pop	{r4, r5, r6, pc}
   1e44c:	mov	r0, #1
   1e450:	pop	{r4, r5, r6, pc}
   1e454:	andeq	pc, r3, r0, lsl #30
   1e458:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1e45c:	push	{r4, r5, r6, r7, r8, lr}
   1e460:	mov	r5, r1
   1e464:	mov	r1, r2
   1e468:	ldr	r2, [r0, #88]	; 0x58
   1e46c:	mov	r4, r0
   1e470:	bl	1e250 <__assert_fail@plt+0xc894>
   1e474:	ldr	r6, [pc, #152]	; 1e514 <__assert_fail@plt+0xcb58>
   1e478:	ldr	lr, [r5, #8]
   1e47c:	mov	ip, #0
   1e480:	and	r7, r0, #8
   1e484:	and	r8, r0, #2
   1e488:	and	r1, r0, #1
   1e48c:	cmp	ip, lr
   1e490:	blt	1e49c <__assert_fail@plt+0xcae0>
   1e494:	mov	r0, #0
   1e498:	pop	{r4, r5, r6, r7, r8, pc}
   1e49c:	ldr	r3, [r5, #12]
   1e4a0:	ldr	r0, [r3, ip, lsl #2]
   1e4a4:	ldr	r3, [r4, #84]	; 0x54
   1e4a8:	ldr	r2, [r3]
   1e4ac:	add	r2, r2, r0, lsl #3
   1e4b0:	ldr	r3, [r2, #4]
   1e4b4:	ldrb	r2, [r2, #4]
   1e4b8:	and	r3, r6, r3, lsr #8
   1e4bc:	cmp	r2, #2
   1e4c0:	bne	1e50c <__assert_fail@plt+0xcb50>
   1e4c4:	cmp	r3, #0
   1e4c8:	popeq	{r4, r5, r6, r7, r8, pc}
   1e4cc:	tst	r3, #4
   1e4d0:	beq	1e4dc <__assert_fail@plt+0xcb20>
   1e4d4:	cmp	r1, #0
   1e4d8:	beq	1e50c <__assert_fail@plt+0xcb50>
   1e4dc:	tst	r3, #8
   1e4e0:	beq	1e4ec <__assert_fail@plt+0xcb30>
   1e4e4:	cmp	r1, #0
   1e4e8:	bne	1e50c <__assert_fail@plt+0xcb50>
   1e4ec:	tst	r3, #32
   1e4f0:	beq	1e4fc <__assert_fail@plt+0xcb40>
   1e4f4:	cmp	r8, #0
   1e4f8:	beq	1e50c <__assert_fail@plt+0xcb50>
   1e4fc:	tst	r3, #128	; 0x80
   1e500:	popeq	{r4, r5, r6, r7, r8, pc}
   1e504:	cmp	r7, #0
   1e508:	popne	{r4, r5, r6, r7, r8, pc}
   1e50c:	add	ip, ip, #1
   1e510:	b	1e48c <__assert_fail@plt+0xcad0>
   1e514:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1e518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e51c:	mov	r4, r0
   1e520:	ldr	r5, [r0, #24]
   1e524:	sub	sp, sp, #28
   1e528:	cmp	r5, r1
   1e52c:	mov	r6, r1
   1e530:	mov	sl, r2
   1e534:	suble	r5, r1, r5
   1e538:	ble	1e598 <__assert_fail@plt+0xcbdc>
   1e53c:	ldr	r3, [r0, #80]	; 0x50
   1e540:	mov	r5, r1
   1e544:	cmp	r3, #1
   1e548:	ldr	r3, [r0, #44]	; 0x2c
   1e54c:	movgt	r2, #0
   1e550:	str	r3, [r0, #48]	; 0x30
   1e554:	ldr	r3, [r0, #52]	; 0x34
   1e558:	strgt	r2, [r0, #16]
   1e55c:	strgt	r2, [r0, #20]
   1e560:	str	r3, [r0, #56]	; 0x38
   1e564:	tst	sl, #1
   1e568:	mov	r3, #0
   1e56c:	str	r3, [r0, #28]
   1e570:	str	r3, [r0, #24]
   1e574:	str	r3, [r0, #32]
   1e578:	strb	r3, [r0, #76]	; 0x4c
   1e57c:	moveq	r3, #6
   1e580:	movne	r3, #4
   1e584:	str	r3, [r0, #60]	; 0x3c
   1e588:	ldrb	r3, [r0, #75]	; 0x4b
   1e58c:	cmp	r3, #0
   1e590:	ldreq	r3, [r0]
   1e594:	streq	r3, [r0, #4]
   1e598:	cmp	r5, #0
   1e59c:	beq	1e698 <__assert_fail@plt+0xccdc>
   1e5a0:	ldr	r3, [r4, #32]
   1e5a4:	ldr	r8, [r4, #28]
   1e5a8:	cmp	r5, r3
   1e5ac:	ldrb	r3, [r4, #76]	; 0x4c
   1e5b0:	bge	1e840 <__assert_fail@plt+0xce84>
   1e5b4:	cmp	r3, #0
   1e5b8:	beq	1e7d0 <__assert_fail@plt+0xce14>
   1e5bc:	ldr	r9, [r4, #12]
   1e5c0:	mov	r3, r8
   1e5c4:	mov	r2, #0
   1e5c8:	add	r7, r2, r3
   1e5cc:	add	r7, r7, r7, lsr #31
   1e5d0:	asr	r7, r7, #1
   1e5d4:	ldr	r1, [r9, r7, lsl #2]
   1e5d8:	cmp	r5, r1
   1e5dc:	blt	1e6e4 <__assert_fail@plt+0xcd28>
   1e5e0:	ble	1e5f8 <__assert_fail@plt+0xcc3c>
   1e5e4:	add	r2, r7, #1
   1e5e8:	cmp	r2, r3
   1e5ec:	blt	1e5c8 <__assert_fail@plt+0xcc0c>
   1e5f0:	cmp	r5, r1
   1e5f4:	addgt	r7, r7, #1
   1e5f8:	mov	r2, sl
   1e5fc:	sub	r1, r7, #1
   1e600:	mov	r0, r4
   1e604:	bl	1e250 <__assert_fail@plt+0xc894>
   1e608:	cmp	r5, r8
   1e60c:	movge	r3, #0
   1e610:	movlt	r3, #1
   1e614:	cmp	r5, r7
   1e618:	movne	r3, #0
   1e61c:	cmp	r3, #0
   1e620:	str	r0, [r4, #60]	; 0x3c
   1e624:	beq	1e708 <__assert_fail@plt+0xcd4c>
   1e628:	ldr	r3, [r9, r7, lsl #2]
   1e62c:	cmp	r5, r3
   1e630:	bne	1e708 <__assert_fail@plt+0xcd4c>
   1e634:	ldr	r0, [r4, #8]
   1e638:	sub	r2, r8, r5
   1e63c:	add	r1, r0, r5, lsl #2
   1e640:	lsl	r2, r2, #2
   1e644:	bl	1159c <memmove@plt>
   1e648:	ldr	r0, [r4, #4]
   1e64c:	ldr	r2, [r4, #28]
   1e650:	add	r1, r0, r5
   1e654:	sub	r2, r2, r5
   1e658:	bl	1159c <memmove@plt>
   1e65c:	ldr	r3, [r4, #28]
   1e660:	sub	r3, r3, r5
   1e664:	str	r3, [r4, #28]
   1e668:	ldr	r3, [r4, #32]
   1e66c:	sub	r3, r3, r5
   1e670:	str	r3, [r4, #32]
   1e674:	mov	r3, #0
   1e678:	ldr	r2, [r4, #28]
   1e67c:	cmp	r3, r2
   1e680:	blt	1e6ec <__assert_fail@plt+0xcd30>
   1e684:	ldrb	r3, [r4, #75]	; 0x4b
   1e688:	cmp	r3, #0
   1e68c:	ldreq	r3, [r4, #4]
   1e690:	addeq	r3, r3, r5
   1e694:	streq	r3, [r4, #4]
   1e698:	ldr	r2, [r4, #56]	; 0x38
   1e69c:	ldr	r3, [r4, #48]	; 0x30
   1e6a0:	str	r6, [r4, #24]
   1e6a4:	sub	r3, r3, r5
   1e6a8:	sub	r5, r2, r5
   1e6ac:	ldr	r2, [r4, #80]	; 0x50
   1e6b0:	str	r3, [r4, #48]	; 0x30
   1e6b4:	cmp	r2, #1
   1e6b8:	str	r5, [r4, #56]	; 0x38
   1e6bc:	ble	1eb18 <__assert_fail@plt+0xd15c>
   1e6c0:	ldrb	r3, [r4, #72]	; 0x48
   1e6c4:	mov	r0, r4
   1e6c8:	cmp	r3, #0
   1e6cc:	beq	1eb08 <__assert_fail@plt+0xd14c>
   1e6d0:	bl	1b384 <__assert_fail@plt+0x99c8>
   1e6d4:	cmp	r0, #0
   1e6d8:	beq	1eb0c <__assert_fail@plt+0xd150>
   1e6dc:	add	sp, sp, #28
   1e6e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6e4:	mov	r3, r7
   1e6e8:	b	1e5e8 <__assert_fail@plt+0xcc2c>
   1e6ec:	ldr	r1, [r4, #12]
   1e6f0:	add	r2, r5, r3
   1e6f4:	ldr	r2, [r1, r2, lsl #2]
   1e6f8:	sub	r2, r2, r5
   1e6fc:	str	r2, [r1, r3, lsl #2]
   1e700:	add	r3, r3, #1
   1e704:	b	1e678 <__assert_fail@plt+0xccbc>
   1e708:	ldr	r3, [r4, #44]	; 0x2c
   1e70c:	sub	r3, r3, r6
   1e710:	add	r3, r3, r5
   1e714:	str	r3, [r4, #48]	; 0x30
   1e718:	ldr	r3, [r4, #52]	; 0x34
   1e71c:	sub	r3, r3, r6
   1e720:	add	r3, r3, r5
   1e724:	str	r3, [r4, #56]	; 0x38
   1e728:	mov	r3, #0
   1e72c:	strb	r3, [r4, #76]	; 0x4c
   1e730:	add	r3, r9, r7, lsl #2
   1e734:	cmp	r7, #0
   1e738:	ble	1e748 <__assert_fail@plt+0xcd8c>
   1e73c:	ldr	r2, [r3, #-4]!
   1e740:	cmp	r5, r2
   1e744:	beq	1e784 <__assert_fail@plt+0xcdc8>
   1e748:	lsl	r3, r7, #2
   1e74c:	cmp	r7, r8
   1e750:	blt	1e78c <__assert_fail@plt+0xcdd0>
   1e754:	moveq	r3, #0
   1e758:	streq	r3, [r4, #28]
   1e75c:	beq	1e77c <__assert_fail@plt+0xcdc0>
   1e760:	ldr	r3, [r9, r7, lsl #2]
   1e764:	sub	r3, r3, r5
   1e768:	cmp	r3, #0
   1e76c:	str	r3, [r4, #28]
   1e770:	mvnne	r1, #0
   1e774:	movne	r3, #0
   1e778:	bne	1e7b4 <__assert_fail@plt+0xcdf8>
   1e77c:	ldr	r3, [r4, #28]
   1e780:	b	1e838 <__assert_fail@plt+0xce7c>
   1e784:	sub	r7, r7, #1
   1e788:	b	1e734 <__assert_fail@plt+0xcd78>
   1e78c:	ldr	r2, [r4, #8]
   1e790:	ldr	r2, [r2, r3]
   1e794:	add	r3, r3, #4
   1e798:	cmn	r2, #1
   1e79c:	bne	1e760 <__assert_fail@plt+0xcda4>
   1e7a0:	add	r7, r7, #1
   1e7a4:	b	1e74c <__assert_fail@plt+0xcd90>
   1e7a8:	ldr	r2, [r4, #8]
   1e7ac:	str	r1, [r2, r3, lsl #2]
   1e7b0:	add	r3, r3, #1
   1e7b4:	ldr	r2, [r4, #28]
   1e7b8:	cmp	r3, r2
   1e7bc:	blt	1e7a8 <__assert_fail@plt+0xcdec>
   1e7c0:	mov	r1, #255	; 0xff
   1e7c4:	ldr	r0, [r4, #4]
   1e7c8:	bl	11818 <memset@plt>
   1e7cc:	b	1e77c <__assert_fail@plt+0xcdc0>
   1e7d0:	mov	r2, sl
   1e7d4:	sub	r1, r5, #1
   1e7d8:	mov	r0, r4
   1e7dc:	bl	1e250 <__assert_fail@plt+0xc894>
   1e7e0:	ldr	r3, [r4, #80]	; 0x50
   1e7e4:	cmp	r3, #1
   1e7e8:	str	r0, [r4, #60]	; 0x3c
   1e7ec:	ble	1e804 <__assert_fail@plt+0xce48>
   1e7f0:	ldr	r0, [r4, #8]
   1e7f4:	sub	r2, r8, r5
   1e7f8:	add	r1, r0, r5, lsl #2
   1e7fc:	lsl	r2, r2, #2
   1e800:	bl	1159c <memmove@plt>
   1e804:	ldrb	r3, [r4, #75]	; 0x4b
   1e808:	cmp	r3, #0
   1e80c:	beq	1e824 <__assert_fail@plt+0xce68>
   1e810:	ldr	r0, [r4, #4]
   1e814:	ldr	r2, [r4, #28]
   1e818:	add	r1, r0, r5
   1e81c:	sub	r2, r2, r5
   1e820:	bl	1159c <memmove@plt>
   1e824:	ldr	r3, [r4, #28]
   1e828:	sub	r3, r3, r5
   1e82c:	str	r3, [r4, #28]
   1e830:	ldr	r3, [r4, #32]
   1e834:	sub	r3, r3, r5
   1e838:	str	r3, [r4, #32]
   1e83c:	b	1e684 <__assert_fail@plt+0xccc8>
   1e840:	cmp	r3, #0
   1e844:	beq	1e870 <__assert_fail@plt+0xceb4>
   1e848:	ldr	r3, [r4, #44]	; 0x2c
   1e84c:	sub	r3, r3, r6
   1e850:	add	r3, r3, r5
   1e854:	str	r3, [r4, #48]	; 0x30
   1e858:	ldr	r3, [r4, #52]	; 0x34
   1e85c:	sub	r3, r3, r6
   1e860:	add	r3, r3, r5
   1e864:	str	r3, [r4, #56]	; 0x38
   1e868:	mov	r3, #0
   1e86c:	strb	r3, [r4, #76]	; 0x4c
   1e870:	ldr	r3, [r4, #80]	; 0x50
   1e874:	mov	r2, #0
   1e878:	cmp	r3, #1
   1e87c:	str	r2, [r4, #28]
   1e880:	ldr	r7, [r4, #24]
   1e884:	ble	1eab0 <__assert_fail@plt+0xd0f4>
   1e888:	ldrb	r2, [r4, #73]	; 0x49
   1e88c:	cmp	r2, #0
   1e890:	beq	1e95c <__assert_fail@plt+0xcfa0>
   1e894:	ldr	r2, [r4]
   1e898:	sub	r3, r5, r3
   1e89c:	add	r7, r2, r7
   1e8a0:	add	r3, r7, r3
   1e8a4:	cmp	r2, r3
   1e8a8:	sub	r9, r5, #1
   1e8ac:	movcs	r3, r2
   1e8b0:	add	r9, r7, r9
   1e8b4:	cmp	r9, r3
   1e8b8:	mov	r1, r9
   1e8bc:	bcc	1e95c <__assert_fail@plt+0xcfa0>
   1e8c0:	ldrb	r2, [r9]
   1e8c4:	sub	r0, r9, #1
   1e8c8:	and	r2, r2, #192	; 0xc0
   1e8cc:	cmp	r2, #128	; 0x80
   1e8d0:	beq	1e9d8 <__assert_fail@plt+0xd01c>
   1e8d4:	ldr	r2, [r4, #48]	; 0x30
   1e8d8:	ldr	r0, [r4, #64]	; 0x40
   1e8dc:	add	r2, r7, r2
   1e8e0:	cmp	r0, #0
   1e8e4:	sub	r2, r2, r9
   1e8e8:	beq	1e904 <__assert_fail@plt+0xcf48>
   1e8ec:	cmp	r2, #6
   1e8f0:	movlt	r3, r2
   1e8f4:	movge	r3, #6
   1e8f8:	add	r1, sp, #8
   1e8fc:	subs	r3, r3, #1
   1e900:	bpl	1e9c8 <__assert_fail@plt+0xd00c>
   1e904:	add	r3, sp, #16
   1e908:	mov	fp, #0
   1e90c:	add	r0, sp, #4
   1e910:	str	fp, [sp, #16]
   1e914:	str	fp, [sp, #20]
   1e918:	bl	1a434 <__assert_fail@plt+0x8a78>
   1e91c:	add	r7, r7, r5
   1e920:	sub	r9, r7, r9
   1e924:	cmp	r0, r9
   1e928:	movcc	r3, #0
   1e92c:	movcs	r3, #1
   1e930:	cmn	r0, #3
   1e934:	movhi	r3, #0
   1e938:	cmp	r3, fp
   1e93c:	beq	1e95c <__assert_fail@plt+0xcfa0>
   1e940:	str	fp, [r4, #16]
   1e944:	str	fp, [r4, #20]
   1e948:	ldr	fp, [sp, #4]
   1e94c:	sub	r0, r0, r9
   1e950:	cmn	fp, #1
   1e954:	str	r0, [r4, #28]
   1e958:	bne	1ea4c <__assert_fail@plt+0xd090>
   1e95c:	ldr	r7, [r4, #24]
   1e960:	ldr	r3, [r4, #32]
   1e964:	mvn	fp, #0
   1e968:	add	r7, r7, r3
   1e96c:	cmp	r6, r7
   1e970:	bgt	1e9e0 <__assert_fail@plt+0xd024>
   1e974:	sub	r7, r7, r6
   1e978:	cmn	fp, #1
   1e97c:	str	r7, [r4, #28]
   1e980:	bne	1ea4c <__assert_fail@plt+0xd090>
   1e984:	mov	r2, sl
   1e988:	sub	r1, r8, #1
   1e98c:	mov	r0, r4
   1e990:	bl	1e250 <__assert_fail@plt+0xc894>
   1e994:	str	r0, [r4, #60]	; 0x3c
   1e998:	ldr	r3, [r4, #28]
   1e99c:	cmp	r3, #0
   1e9a0:	movne	r3, #0
   1e9a4:	mvnne	r1, #0
   1e9a8:	beq	1e77c <__assert_fail@plt+0xcdc0>
   1e9ac:	ldr	r2, [r4, #28]
   1e9b0:	cmp	r3, r2
   1e9b4:	blt	1eaa0 <__assert_fail@plt+0xd0e4>
   1e9b8:	ldrb	r3, [r4, #75]	; 0x4b
   1e9bc:	cmp	r3, #0
   1e9c0:	beq	1e77c <__assert_fail@plt+0xcdc0>
   1e9c4:	b	1e7c0 <__assert_fail@plt+0xce04>
   1e9c8:	ldrb	ip, [r9, r3]
   1e9cc:	ldrb	ip, [r0, ip]
   1e9d0:	strb	ip, [r1, r3]
   1e9d4:	b	1e8fc <__assert_fail@plt+0xcf40>
   1e9d8:	mov	r9, r0
   1e9dc:	b	1e8b4 <__assert_fail@plt+0xcef8>
   1e9e0:	add	r9, r4, #16
   1e9e4:	add	r3, sp, #16
   1e9e8:	ldm	r9, {r0, r1}
   1e9ec:	ldr	fp, [r4, #44]	; 0x2c
   1e9f0:	stm	r3, {r0, r1}
   1e9f4:	ldr	r1, [r4]
   1e9f8:	sub	fp, fp, r7
   1e9fc:	mov	r3, r9
   1ea00:	mov	r2, fp
   1ea04:	add	r1, r1, r7
   1ea08:	add	r0, sp, #8
   1ea0c:	bl	1a434 <__assert_fail@plt+0x8a78>
   1ea10:	sub	r3, r0, #1
   1ea14:	cmn	r3, #4
   1ea18:	ldrls	fp, [sp, #8]
   1ea1c:	bls	1ea44 <__assert_fail@plt+0xd088>
   1ea20:	cmp	fp, #0
   1ea24:	cmpne	r0, #0
   1ea28:	moveq	fp, #0
   1ea2c:	ldrne	r3, [r4]
   1ea30:	ldrbne	fp, [r3, r7]
   1ea34:	add	r3, sp, #16
   1ea38:	ldm	r3, {r0, r1}
   1ea3c:	stm	r9, {r0, r1}
   1ea40:	mov	r0, #1
   1ea44:	add	r7, r7, r0
   1ea48:	b	1e96c <__assert_fail@plt+0xcfb0>
   1ea4c:	ldrb	r3, [r4, #78]	; 0x4e
   1ea50:	cmp	r3, #0
   1ea54:	beq	1ea7c <__assert_fail@plt+0xd0c0>
   1ea58:	mov	r0, fp
   1ea5c:	bl	117e8 <iswalnum@plt>
   1ea60:	cmp	fp, #95	; 0x5f
   1ea64:	clz	r0, r0
   1ea68:	lsr	r0, r0, #5
   1ea6c:	moveq	r0, #0
   1ea70:	cmp	r0, #0
   1ea74:	moveq	r3, #1
   1ea78:	beq	1ea98 <__assert_fail@plt+0xd0dc>
   1ea7c:	cmp	fp, #10
   1ea80:	movne	r3, #0
   1ea84:	bne	1ea98 <__assert_fail@plt+0xd0dc>
   1ea88:	ldrb	r3, [r4, #77]	; 0x4d
   1ea8c:	cmp	r3, #0
   1ea90:	movne	r3, #2
   1ea94:	moveq	r3, #0
   1ea98:	str	r3, [r4, #60]	; 0x3c
   1ea9c:	b	1e998 <__assert_fail@plt+0xcfdc>
   1eaa0:	ldr	r2, [r4, #8]
   1eaa4:	str	r1, [r2, r3, lsl #2]
   1eaa8:	add	r3, r3, #1
   1eaac:	b	1e9ac <__assert_fail@plt+0xcff0>
   1eab0:	ldr	r3, [r4]
   1eab4:	ldr	r0, [r4, #68]	; 0x44
   1eab8:	add	r3, r3, r5
   1eabc:	add	r7, r3, r7
   1eac0:	ldr	r3, [r4, #64]	; 0x40
   1eac4:	ldrb	r7, [r7, #-1]
   1eac8:	cmp	r3, #0
   1eacc:	str	r2, [r4, #32]
   1ead0:	ldrbne	r7, [r3, r7]
   1ead4:	mov	r1, r7
   1ead8:	bl	1a560 <__assert_fail@plt+0x8ba4>
   1eadc:	cmp	r0, #0
   1eae0:	movne	r0, #1
   1eae4:	bne	1eb00 <__assert_fail@plt+0xd144>
   1eae8:	cmp	r7, #10
   1eaec:	bne	1eb00 <__assert_fail@plt+0xd144>
   1eaf0:	ldrb	r0, [r4, #77]	; 0x4d
   1eaf4:	cmp	r0, #0
   1eaf8:	movne	r0, #2
   1eafc:	moveq	r0, #0
   1eb00:	str	r0, [r4, #60]	; 0x3c
   1eb04:	b	1e684 <__assert_fail@plt+0xccc8>
   1eb08:	bl	1b230 <__assert_fail@plt+0x9874>
   1eb0c:	mov	r0, #0
   1eb10:	str	r0, [r4, #40]	; 0x28
   1eb14:	b	1e6dc <__assert_fail@plt+0xcd20>
   1eb18:	ldrb	r2, [r4, #75]	; 0x4b
   1eb1c:	cmp	r2, #0
   1eb20:	streq	r3, [r4, #28]
   1eb24:	beq	1eb0c <__assert_fail@plt+0xd150>
   1eb28:	ldrb	r3, [r4, #72]	; 0x48
   1eb2c:	cmp	r3, #0
   1eb30:	beq	1eb40 <__assert_fail@plt+0xd184>
   1eb34:	mov	r0, r4
   1eb38:	bl	1b854 <__assert_fail@plt+0x9e98>
   1eb3c:	b	1eb0c <__assert_fail@plt+0xd150>
   1eb40:	ldr	r3, [r4, #64]	; 0x40
   1eb44:	cmp	r3, #0
   1eb48:	beq	1eb0c <__assert_fail@plt+0xd150>
   1eb4c:	mov	r0, r4
   1eb50:	bl	1a674 <__assert_fail@plt+0x8cb8>
   1eb54:	b	1eb0c <__assert_fail@plt+0xd150>
   1eb58:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1eb5c:	mov	r4, r1
   1eb60:	ldr	r5, [r1, #40]	; 0x28
   1eb64:	mov	r6, r0
   1eb68:	mov	r1, r5
   1eb6c:	mov	r0, r4
   1eb70:	mov	r7, r2
   1eb74:	mov	r8, r3
   1eb78:	bl	1a600 <__assert_fail@plt+0x8c44>
   1eb7c:	cmp	r0, #1
   1eb80:	ble	1ebb4 <__assert_fail@plt+0xd1f8>
   1eb84:	mov	r3, #1
   1eb88:	mov	r2, r0
   1eb8c:	mov	r1, r5
   1eb90:	str	r3, [r6]
   1eb94:	mov	r0, r4
   1eb98:	bl	1a658 <__assert_fail@plt+0x8c9c>
   1eb9c:	str	r0, [r6, #4]
   1eba0:	mov	r0, #0
   1eba4:	add	r5, r5, r2
   1eba8:	str	r5, [r4, #40]	; 0x28
   1ebac:	add	sp, sp, #8
   1ebb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ebb4:	ldrb	r2, [r7, #4]
   1ebb8:	add	r5, r5, r8
   1ebbc:	str	r5, [r4, #40]	; 0x28
   1ebc0:	and	r3, r2, #251	; 0xfb
   1ebc4:	cmp	r2, #28
   1ebc8:	cmpne	r3, #26
   1ebcc:	bne	1ed1c <__assert_fail@plt+0xd360>
   1ebd0:	ldr	r3, [r4, #56]	; 0x38
   1ebd4:	cmp	r5, r3
   1ebd8:	blt	1ebe4 <__assert_fail@plt+0xd228>
   1ebdc:	mov	r0, #7
   1ebe0:	b	1ebac <__assert_fail@plt+0xd1f0>
   1ebe4:	ldrb	sl, [r7]
   1ebe8:	mov	r9, #0
   1ebec:	ldrb	r3, [r7, #4]
   1ebf0:	ldr	r5, [r4, #40]	; 0x28
   1ebf4:	cmp	r3, #30
   1ebf8:	bne	1ec08 <__assert_fail@plt+0xd24c>
   1ebfc:	ldrb	r3, [r4, #75]	; 0x4b
   1ec00:	cmp	r3, #0
   1ec04:	bne	1ec18 <__assert_fail@plt+0xd25c>
   1ec08:	add	r2, r5, #1
   1ec0c:	ldr	r3, [r4, #4]
   1ec10:	str	r2, [r4, #40]	; 0x28
   1ec14:	b	1ecc8 <__assert_fail@plt+0xd30c>
   1ec18:	ldrb	r3, [r4, #76]	; 0x4c
   1ec1c:	cmp	r3, #0
   1ec20:	beq	1ecb4 <__assert_fail@plt+0xd2f8>
   1ec24:	ldr	r3, [r4, #28]
   1ec28:	cmp	r5, r3
   1ec2c:	beq	1ec40 <__assert_fail@plt+0xd284>
   1ec30:	ldr	r3, [r4, #8]
   1ec34:	ldr	r3, [r3, r5, lsl #2]
   1ec38:	cmn	r3, #1
   1ec3c:	beq	1ec08 <__assert_fail@plt+0xd24c>
   1ec40:	ldr	r2, [r4, #12]
   1ec44:	ldr	r3, [r4]
   1ec48:	ldr	r1, [r2, r5, lsl #2]
   1ec4c:	ldr	r2, [r4, #24]
   1ec50:	add	r3, r3, r1
   1ec54:	ldrb	r8, [r3, r2]
   1ec58:	tst	r8, #128	; 0x80
   1ec5c:	bne	1ec08 <__assert_fail@plt+0xd24c>
   1ec60:	mov	r1, r5
   1ec64:	mov	r0, r4
   1ec68:	bl	1a600 <__assert_fail@plt+0x8c44>
   1ec6c:	add	r0, r5, r0
   1ec70:	str	r0, [r4, #40]	; 0x28
   1ec74:	ldr	r3, [r4, #40]	; 0x28
   1ec78:	ldr	r2, [r4, #56]	; 0x38
   1ec7c:	cmp	r2, r3
   1ec80:	ble	1ebdc <__assert_fail@plt+0xd220>
   1ec84:	cmp	sl, r8
   1ec88:	bne	1ec9c <__assert_fail@plt+0xd2e0>
   1ec8c:	ldr	r2, [r4, #4]
   1ec90:	ldrb	r2, [r2, r3]
   1ec94:	cmp	r2, #93	; 0x5d
   1ec98:	beq	1ecd0 <__assert_fail@plt+0xd314>
   1ec9c:	ldr	r3, [r6, #4]
   1eca0:	strb	r8, [r3, r9]
   1eca4:	add	r9, r9, #1
   1eca8:	cmp	r9, #32
   1ecac:	bne	1ebec <__assert_fail@plt+0xd230>
   1ecb0:	b	1ebdc <__assert_fail@plt+0xd220>
   1ecb4:	ldr	r3, [r4]
   1ecb8:	ldr	r2, [r4, #24]
   1ecbc:	add	r1, r5, #1
   1ecc0:	add	r3, r3, r2
   1ecc4:	str	r1, [r4, #40]	; 0x28
   1ecc8:	ldrb	r8, [r3, r5]
   1eccc:	b	1ec74 <__assert_fail@plt+0xd2b8>
   1ecd0:	add	r3, r3, #1
   1ecd4:	str	r3, [r4, #40]	; 0x28
   1ecd8:	ldr	r3, [r6, #4]
   1ecdc:	mov	r0, #0
   1ece0:	strb	r0, [r3, r9]
   1ece4:	ldrb	r3, [r7, #4]
   1ece8:	cmp	r3, #28
   1ecec:	beq	1ed0c <__assert_fail@plt+0xd350>
   1ecf0:	cmp	r3, #30
   1ecf4:	beq	1ed14 <__assert_fail@plt+0xd358>
   1ecf8:	cmp	r3, #26
   1ecfc:	moveq	r3, #3
   1ed00:	bne	1ebac <__assert_fail@plt+0xd1f0>
   1ed04:	str	r3, [r6]
   1ed08:	b	1ebac <__assert_fail@plt+0xd1f0>
   1ed0c:	mov	r3, #2
   1ed10:	b	1ed04 <__assert_fail@plt+0xd348>
   1ed14:	mov	r3, #4
   1ed18:	b	1ed04 <__assert_fail@plt+0xd348>
   1ed1c:	ldrb	r3, [sp, #44]	; 0x2c
   1ed20:	cmp	r2, #22
   1ed24:	orrne	r3, r3, #1
   1ed28:	cmp	r3, #0
   1ed2c:	bne	1ed50 <__assert_fail@plt+0xd394>
   1ed30:	ldr	r2, [sp, #40]	; 0x28
   1ed34:	mov	r1, r4
   1ed38:	mov	r0, sp
   1ed3c:	bl	1a728 <__assert_fail@plt+0x8d6c>
   1ed40:	ldrb	r3, [sp, #4]
   1ed44:	cmp	r3, #21
   1ed48:	movne	r0, #11
   1ed4c:	bne	1ebac <__assert_fail@plt+0xd1f0>
   1ed50:	mov	r0, #0
   1ed54:	str	r0, [r6]
   1ed58:	ldrb	r3, [r7]
   1ed5c:	strb	r3, [r6, #4]
   1ed60:	b	1ebac <__assert_fail@plt+0xd1f0>
   1ed64:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1ed68:	ldr	r3, [r1, #56]	; 0x38
   1ed6c:	ldr	r6, [r1, #40]	; 0x28
   1ed70:	cmp	r3, r6
   1ed74:	movle	r3, #2
   1ed78:	strble	r3, [r0, #4]
   1ed7c:	movle	r0, #0
   1ed80:	ble	1ede4 <__assert_fail@plt+0xd428>
   1ed84:	ldr	r9, [r1, #4]
   1ed88:	ldrb	r3, [r0, #6]
   1ed8c:	mov	r5, r2
   1ed90:	ldrb	r8, [r9, r6]
   1ed94:	and	r3, r3, #159	; 0x9f
   1ed98:	strb	r3, [r0, #6]
   1ed9c:	strb	r8, [r0]
   1eda0:	ldr	r2, [r1, #80]	; 0x50
   1eda4:	mov	r7, r1
   1eda8:	cmp	r2, #1
   1edac:	mov	r4, r0
   1edb0:	ble	1f344 <__assert_fail@plt+0xd988>
   1edb4:	ldr	r3, [r1, #28]
   1edb8:	cmp	r6, r3
   1edbc:	beq	1f314 <__assert_fail@plt+0xd958>
   1edc0:	ldr	r3, [r1, #8]
   1edc4:	ldr	r3, [r3, r6, lsl #2]
   1edc8:	cmn	r3, #1
   1edcc:	bne	1f314 <__assert_fail@plt+0xd958>
   1edd0:	ldrb	r3, [r4, #6]
   1edd4:	mov	r0, #1
   1edd8:	strb	r0, [r4, #4]
   1eddc:	orr	r3, r3, #32
   1ede0:	strb	r3, [r4, #6]
   1ede4:	add	sp, sp, #8
   1ede8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1edec:	cmp	r2, #1
   1edf0:	ble	1ee28 <__assert_fail@plt+0xd46c>
   1edf4:	ldr	r3, [r7, #8]
   1edf8:	lsl	r0, r1, #2
   1edfc:	ldr	ip, [r3, r1, lsl #2]
   1ee00:	cmn	ip, #1
   1ee04:	beq	1f33c <__assert_fail@plt+0xd980>
   1ee08:	ldr	ip, [r7, #28]
   1ee0c:	add	r6, r6, #2
   1ee10:	cmp	ip, r6
   1ee14:	beq	1ee28 <__assert_fail@plt+0xd46c>
   1ee18:	add	r3, r3, r0
   1ee1c:	ldr	r3, [r3, #4]
   1ee20:	cmn	r3, #1
   1ee24:	beq	1f33c <__assert_fail@plt+0xd980>
   1ee28:	ldrb	r0, [r7, #76]	; 0x4c
   1ee2c:	ldr	lr, [r7, #24]
   1ee30:	cmp	r0, #0
   1ee34:	moveq	ip, r1
   1ee38:	ldrne	r3, [r7, #12]
   1ee3c:	ldrne	ip, [r3, r1, lsl #2]
   1ee40:	ldr	r3, [r7]
   1ee44:	cmp	r0, #0
   1ee48:	add	r3, r3, ip
   1ee4c:	ldrb	r6, [r3, lr]
   1ee50:	beq	1ee5c <__assert_fail@plt+0xd4a0>
   1ee54:	tst	r6, #128	; 0x80
   1ee58:	bne	1f33c <__assert_fail@plt+0xd980>
   1ee5c:	mov	r3, #1
   1ee60:	cmp	r2, r3
   1ee64:	strb	r6, [r4]
   1ee68:	strb	r3, [r4, #4]
   1ee6c:	ldrb	r8, [r4, #6]
   1ee70:	ble	1eed8 <__assert_fail@plt+0xd51c>
   1ee74:	mov	r0, r7
   1ee78:	bl	1a658 <__assert_fail@plt+0x8c9c>
   1ee7c:	bic	r8, r8, #64	; 0x40
   1ee80:	mov	r7, r0
   1ee84:	bl	117e8 <iswalnum@plt>
   1ee88:	adds	r0, r0, #0
   1ee8c:	movne	r0, #1
   1ee90:	cmp	r7, #95	; 0x5f
   1ee94:	orreq	r0, r0, #1
   1ee98:	orr	r8, r8, r0, lsl #6
   1ee9c:	strb	r8, [r4, #6]
   1eea0:	cmp	r6, #66	; 0x42
   1eea4:	beq	1f04c <__assert_fail@plt+0xd690>
   1eea8:	bhi	1ef68 <__assert_fail@plt+0xd5ac>
   1eeac:	cmp	r6, #57	; 0x39
   1eeb0:	bhi	1ef34 <__assert_fail@plt+0xd578>
   1eeb4:	cmp	r6, #49	; 0x31
   1eeb8:	bcs	1f01c <__assert_fail@plt+0xd660>
   1eebc:	cmp	r6, #40	; 0x28
   1eec0:	beq	1f0b4 <__assert_fail@plt+0xd6f8>
   1eec4:	bhi	1ef08 <__assert_fail@plt+0xd54c>
   1eec8:	cmp	r6, #39	; 0x27
   1eecc:	beq	1f09c <__assert_fail@plt+0xd6e0>
   1eed0:	mov	r0, #2
   1eed4:	b	1ede4 <__assert_fail@plt+0xd428>
   1eed8:	bl	1177c <__ctype_b_loc@plt>
   1eedc:	lsl	r3, r6, #1
   1eee0:	bic	r8, r8, #64	; 0x40
   1eee4:	ldr	r2, [r0]
   1eee8:	ldrh	r3, [r2, r3]
   1eeec:	lsr	r3, r3, #3
   1eef0:	and	r3, r3, #1
   1eef4:	cmp	r6, #95	; 0x5f
   1eef8:	orreq	r3, r3, #1
   1eefc:	orr	r3, r8, r3, lsl #6
   1ef00:	strb	r3, [r4, #6]
   1ef04:	b	1eea0 <__assert_fail@plt+0xd4e4>
   1ef08:	cmp	r6, #41	; 0x29
   1ef0c:	beq	1f0c4 <__assert_fail@plt+0xd708>
   1ef10:	cmp	r6, #43	; 0x2b
   1ef14:	bne	1eed0 <__assert_fail@plt+0xd514>
   1ef18:	ldr	r0, [pc, #1128]	; 1f388 <__assert_fail@plt+0xd9cc>
   1ef1c:	and	r0, r0, r5
   1ef20:	cmp	r0, #2
   1ef24:	moveq	r3, #18
   1ef28:	bne	1eed0 <__assert_fail@plt+0xd514>
   1ef2c:	strb	r3, [r4, #4]
   1ef30:	b	1ede4 <__assert_fail@plt+0xd428>
   1ef34:	cmp	r6, #62	; 0x3e
   1ef38:	beq	1f034 <__assert_fail@plt+0xd678>
   1ef3c:	cmp	r6, #63	; 0x3f
   1ef40:	beq	1f0d4 <__assert_fail@plt+0xd718>
   1ef44:	cmp	r6, #60	; 0x3c
   1ef48:	bne	1eed0 <__assert_fail@plt+0xd514>
   1ef4c:	tst	r5, #524288	; 0x80000
   1ef50:	moveq	r3, #12
   1ef54:	strbeq	r3, [r4, #4]
   1ef58:	moveq	r3, #6
   1ef5c:	bne	1eed0 <__assert_fail@plt+0xd514>
   1ef60:	str	r3, [r4]
   1ef64:	b	1eed0 <__assert_fail@plt+0xd514>
   1ef68:	cmp	r6, #115	; 0x73
   1ef6c:	beq	1f074 <__assert_fail@plt+0xd6b8>
   1ef70:	bhi	1efc0 <__assert_fail@plt+0xd604>
   1ef74:	cmp	r6, #87	; 0x57
   1ef78:	beq	1f064 <__assert_fail@plt+0xd6a8>
   1ef7c:	bhi	1ef98 <__assert_fail@plt+0xd5dc>
   1ef80:	cmp	r6, #83	; 0x53
   1ef84:	bne	1eed0 <__assert_fail@plt+0xd514>
   1ef88:	tst	r5, #524288	; 0x80000
   1ef8c:	moveq	r3, #35	; 0x23
   1ef90:	beq	1f014 <__assert_fail@plt+0xd658>
   1ef94:	b	1eed0 <__assert_fail@plt+0xd514>
   1ef98:	cmp	r6, #96	; 0x60
   1ef9c:	beq	1f084 <__assert_fail@plt+0xd6c8>
   1efa0:	cmp	r6, #98	; 0x62
   1efa4:	bne	1eed0 <__assert_fail@plt+0xd514>
   1efa8:	tst	r5, #524288	; 0x80000
   1efac:	moveq	r3, #12
   1efb0:	strbeq	r3, [r4, #4]
   1efb4:	moveq	r3, #256	; 0x100
   1efb8:	beq	1ef60 <__assert_fail@plt+0xd5a4>
   1efbc:	b	1eed0 <__assert_fail@plt+0xd514>
   1efc0:	cmp	r6, #123	; 0x7b
   1efc4:	beq	1f0ec <__assert_fail@plt+0xd730>
   1efc8:	bhi	1efe4 <__assert_fail@plt+0xd628>
   1efcc:	cmp	r6, #119	; 0x77
   1efd0:	bne	1eed0 <__assert_fail@plt+0xd514>
   1efd4:	tst	r5, #524288	; 0x80000
   1efd8:	moveq	r3, #32
   1efdc:	beq	1f014 <__assert_fail@plt+0xd658>
   1efe0:	b	1eed0 <__assert_fail@plt+0xd514>
   1efe4:	cmp	r6, #124	; 0x7c
   1efe8:	beq	1f008 <__assert_fail@plt+0xd64c>
   1efec:	cmp	r6, #125	; 0x7d
   1eff0:	bne	1eed0 <__assert_fail@plt+0xd514>
   1eff4:	and	r5, r5, #4608	; 0x1200
   1eff8:	cmp	r5, #512	; 0x200
   1effc:	bne	1eed0 <__assert_fail@plt+0xd514>
   1f000:	mov	r3, #24
   1f004:	b	1f014 <__assert_fail@plt+0xd658>
   1f008:	tst	r5, #33792	; 0x8400
   1f00c:	moveq	r3, #10
   1f010:	bne	1eed0 <__assert_fail@plt+0xd514>
   1f014:	strb	r3, [r4, #4]
   1f018:	b	1eed0 <__assert_fail@plt+0xd514>
   1f01c:	tst	r5, #16384	; 0x4000
   1f020:	moveq	r3, #4
   1f024:	subeq	r6, r6, #49	; 0x31
   1f028:	strbeq	r3, [r4, #4]
   1f02c:	streq	r6, [r4]
   1f030:	b	1eed0 <__assert_fail@plt+0xd514>
   1f034:	tst	r5, #524288	; 0x80000
   1f038:	moveq	r3, #12
   1f03c:	strbeq	r3, [r4, #4]
   1f040:	moveq	r3, #9
   1f044:	beq	1ef60 <__assert_fail@plt+0xd5a4>
   1f048:	b	1eed0 <__assert_fail@plt+0xd514>
   1f04c:	tst	r5, #524288	; 0x80000
   1f050:	moveq	r3, #12
   1f054:	strbeq	r3, [r4, #4]
   1f058:	moveq	r3, #512	; 0x200
   1f05c:	beq	1ef60 <__assert_fail@plt+0xd5a4>
   1f060:	b	1eed0 <__assert_fail@plt+0xd514>
   1f064:	tst	r5, #524288	; 0x80000
   1f068:	moveq	r3, #33	; 0x21
   1f06c:	beq	1f014 <__assert_fail@plt+0xd658>
   1f070:	b	1eed0 <__assert_fail@plt+0xd514>
   1f074:	tst	r5, #524288	; 0x80000
   1f078:	moveq	r3, #34	; 0x22
   1f07c:	beq	1f014 <__assert_fail@plt+0xd658>
   1f080:	b	1eed0 <__assert_fail@plt+0xd514>
   1f084:	tst	r5, #524288	; 0x80000
   1f088:	moveq	r3, #12
   1f08c:	strbeq	r3, [r4, #4]
   1f090:	moveq	r3, #64	; 0x40
   1f094:	beq	1ef60 <__assert_fail@plt+0xd5a4>
   1f098:	b	1eed0 <__assert_fail@plt+0xd514>
   1f09c:	tst	r5, #524288	; 0x80000
   1f0a0:	bne	1eed0 <__assert_fail@plt+0xd514>
   1f0a4:	mov	r3, #12
   1f0a8:	strb	r3, [r4, #4]
   1f0ac:	mov	r3, #128	; 0x80
   1f0b0:	b	1ef60 <__assert_fail@plt+0xd5a4>
   1f0b4:	tst	r5, #8192	; 0x2000
   1f0b8:	moveq	r3, #8
   1f0bc:	beq	1f014 <__assert_fail@plt+0xd658>
   1f0c0:	b	1eed0 <__assert_fail@plt+0xd514>
   1f0c4:	tst	r5, #8192	; 0x2000
   1f0c8:	moveq	r3, #9
   1f0cc:	beq	1f014 <__assert_fail@plt+0xd658>
   1f0d0:	b	1eed0 <__assert_fail@plt+0xd514>
   1f0d4:	ldr	r0, [pc, #684]	; 1f388 <__assert_fail@plt+0xd9cc>
   1f0d8:	and	r0, r0, r5
   1f0dc:	cmp	r0, #2
   1f0e0:	bne	1eed0 <__assert_fail@plt+0xd514>
   1f0e4:	mov	r3, #19
   1f0e8:	b	1ef2c <__assert_fail@plt+0xd570>
   1f0ec:	and	r5, r5, #4608	; 0x1200
   1f0f0:	cmp	r5, #512	; 0x200
   1f0f4:	moveq	r3, #23
   1f0f8:	bne	1eed0 <__assert_fail@plt+0xd514>
   1f0fc:	b	1f014 <__assert_fail@plt+0xd658>
   1f100:	cmp	r8, #42	; 0x2a
   1f104:	beq	1f1a0 <__assert_fail@plt+0xd7e4>
   1f108:	bcc	1f1e4 <__assert_fail@plt+0xd828>
   1f10c:	cmp	r8, #43	; 0x2b
   1f110:	bne	1f30c <__assert_fail@plt+0xd950>
   1f114:	ldr	r3, [pc, #620]	; 1f388 <__assert_fail@plt+0xd9cc>
   1f118:	and	r3, r3, r5
   1f11c:	cmp	r3, #0
   1f120:	moveq	r3, #18
   1f124:	beq	1f14c <__assert_fail@plt+0xd790>
   1f128:	b	1f30c <__assert_fail@plt+0xd950>
   1f12c:	cmp	r8, #94	; 0x5e
   1f130:	beq	1f1fc <__assert_fail@plt+0xd840>
   1f134:	bhi	1f154 <__assert_fail@plt+0xd798>
   1f138:	cmp	r8, #63	; 0x3f
   1f13c:	beq	1f1a8 <__assert_fail@plt+0xd7ec>
   1f140:	cmp	r8, #91	; 0x5b
   1f144:	moveq	r3, #20
   1f148:	bne	1f30c <__assert_fail@plt+0xd950>
   1f14c:	strb	r3, [r4, #4]
   1f150:	b	1f30c <__assert_fail@plt+0xd950>
   1f154:	cmp	r8, #124	; 0x7c
   1f158:	beq	1f190 <__assert_fail@plt+0xd7d4>
   1f15c:	cmp	r8, #125	; 0x7d
   1f160:	beq	1f1c0 <__assert_fail@plt+0xd804>
   1f164:	cmp	r8, #123	; 0x7b
   1f168:	bne	1f30c <__assert_fail@plt+0xd950>
   1f16c:	and	r5, r5, #4608	; 0x1200
   1f170:	cmp	r5, #4608	; 0x1200
   1f174:	moveq	r3, #23
   1f178:	bne	1f30c <__assert_fail@plt+0xd950>
   1f17c:	b	1f14c <__assert_fail@plt+0xd790>
   1f180:	tst	r5, #2048	; 0x800
   1f184:	beq	1f30c <__assert_fail@plt+0xd950>
   1f188:	mov	r3, #10
   1f18c:	b	1f14c <__assert_fail@plt+0xd790>
   1f190:	and	r5, r5, #33792	; 0x8400
   1f194:	cmp	r5, #32768	; 0x8000
   1f198:	bne	1f30c <__assert_fail@plt+0xd950>
   1f19c:	b	1f188 <__assert_fail@plt+0xd7cc>
   1f1a0:	mov	r3, #11
   1f1a4:	b	1f14c <__assert_fail@plt+0xd790>
   1f1a8:	ldr	r3, [pc, #472]	; 1f388 <__assert_fail@plt+0xd9cc>
   1f1ac:	and	r3, r3, r5
   1f1b0:	cmp	r3, #0
   1f1b4:	moveq	r3, #19
   1f1b8:	beq	1f14c <__assert_fail@plt+0xd790>
   1f1bc:	b	1f30c <__assert_fail@plt+0xd950>
   1f1c0:	and	r5, r5, #4608	; 0x1200
   1f1c4:	cmp	r5, #4608	; 0x1200
   1f1c8:	moveq	r3, #24
   1f1cc:	bne	1f30c <__assert_fail@plt+0xd950>
   1f1d0:	b	1f14c <__assert_fail@plt+0xd790>
   1f1d4:	tst	r5, #8192	; 0x2000
   1f1d8:	movne	r3, #8
   1f1dc:	bne	1f14c <__assert_fail@plt+0xd790>
   1f1e0:	b	1f30c <__assert_fail@plt+0xd950>
   1f1e4:	tst	r5, #8192	; 0x2000
   1f1e8:	movne	r3, #9
   1f1ec:	bne	1f14c <__assert_fail@plt+0xd790>
   1f1f0:	b	1f30c <__assert_fail@plt+0xd950>
   1f1f4:	mov	r3, #5
   1f1f8:	b	1f14c <__assert_fail@plt+0xd790>
   1f1fc:	ldr	r3, [pc, #392]	; 1f38c <__assert_fail@plt+0xd9d0>
   1f200:	cmp	r6, #0
   1f204:	and	r3, r3, r5
   1f208:	clz	r3, r3
   1f20c:	lsr	r3, r3, #5
   1f210:	moveq	r3, #0
   1f214:	cmp	r3, #0
   1f218:	beq	1f23c <__assert_fail@plt+0xd880>
   1f21c:	add	r6, r9, r6
   1f220:	lsr	r5, r5, #11
   1f224:	ldrb	r2, [r6, #-1]
   1f228:	eor	r5, r5, #1
   1f22c:	cmp	r2, #10
   1f230:	orrne	r5, r5, #1
   1f234:	tst	r5, #1
   1f238:	bne	1f30c <__assert_fail@plt+0xd950>
   1f23c:	mov	r3, #12
   1f240:	strb	r3, [r4, #4]
   1f244:	mov	r3, #16
   1f248:	str	r3, [r4]
   1f24c:	b	1f30c <__assert_fail@plt+0xd950>
   1f250:	tst	r5, #8
   1f254:	bne	1f298 <__assert_fail@plt+0xd8dc>
   1f258:	ldr	r3, [r7, #48]	; 0x30
   1f25c:	add	r6, r6, #1
   1f260:	cmp	r6, r3
   1f264:	beq	1f298 <__assert_fail@plt+0xd8dc>
   1f268:	str	r6, [r7, #40]	; 0x28
   1f26c:	mov	r2, r5
   1f270:	mov	r1, r7
   1f274:	mov	r0, sp
   1f278:	bl	1ed64 <__assert_fail@plt+0xd3a8>
   1f27c:	ldr	r3, [r7, #40]	; 0x28
   1f280:	sub	r3, r3, #1
   1f284:	str	r3, [r7, #40]	; 0x28
   1f288:	ldrb	r3, [sp, #4]
   1f28c:	sub	r3, r3, #9
   1f290:	cmp	r3, #1
   1f294:	bhi	1f30c <__assert_fail@plt+0xd950>
   1f298:	mov	r3, #12
   1f29c:	strb	r3, [r4, #4]
   1f2a0:	mov	r3, #32
   1f2a4:	b	1f248 <__assert_fail@plt+0xd88c>
   1f2a8:	mov	r3, #1
   1f2ac:	strb	r3, [r4, #4]
   1f2b0:	mov	r1, r6
   1f2b4:	mov	r0, r7
   1f2b8:	bl	1a658 <__assert_fail@plt+0x8c9c>
   1f2bc:	mov	sl, r0
   1f2c0:	bl	117e8 <iswalnum@plt>
   1f2c4:	adds	r3, r0, #0
   1f2c8:	ldrb	r0, [r4, #6]
   1f2cc:	movne	r3, #1
   1f2d0:	cmp	sl, #95	; 0x5f
   1f2d4:	orreq	r3, r3, #1
   1f2d8:	bic	r0, r0, #64	; 0x40
   1f2dc:	orr	r0, r0, r3, lsl #6
   1f2e0:	strb	r0, [r4, #6]
   1f2e4:	cmp	r8, #46	; 0x2e
   1f2e8:	beq	1f1f4 <__assert_fail@plt+0xd838>
   1f2ec:	bhi	1f12c <__assert_fail@plt+0xd770>
   1f2f0:	cmp	r8, #40	; 0x28
   1f2f4:	beq	1f1d4 <__assert_fail@plt+0xd818>
   1f2f8:	bhi	1f100 <__assert_fail@plt+0xd744>
   1f2fc:	cmp	r8, #10
   1f300:	beq	1f180 <__assert_fail@plt+0xd7c4>
   1f304:	cmp	r8, #36	; 0x24
   1f308:	beq	1f250 <__assert_fail@plt+0xd894>
   1f30c:	mov	r0, #1
   1f310:	b	1ede4 <__assert_fail@plt+0xd428>
   1f314:	cmp	r8, #92	; 0x5c
   1f318:	bne	1f2a8 <__assert_fail@plt+0xd8ec>
   1f31c:	ldr	r3, [r7, #48]	; 0x30
   1f320:	add	r1, r6, #1
   1f324:	cmp	r1, r3
   1f328:	movge	r3, #36	; 0x24
   1f32c:	bge	1f14c <__assert_fail@plt+0xd790>
   1f330:	ldrb	r3, [r7, #75]	; 0x4b
   1f334:	cmp	r3, #0
   1f338:	bne	1edec <__assert_fail@plt+0xd430>
   1f33c:	ldrb	r6, [r9, r1]
   1f340:	b	1ee5c <__assert_fail@plt+0xd4a0>
   1f344:	cmp	r8, #92	; 0x5c
   1f348:	beq	1f31c <__assert_fail@plt+0xd960>
   1f34c:	mov	r3, #1
   1f350:	strb	r3, [r4, #4]
   1f354:	bl	1177c <__ctype_b_loc@plt>
   1f358:	lsl	r3, r8, #1
   1f35c:	ldr	r2, [r0]
   1f360:	ldrh	r3, [r2, r3]
   1f364:	ldrb	r2, [r4, #6]
   1f368:	lsr	r3, r3, #3
   1f36c:	and	r3, r3, #1
   1f370:	cmp	r8, #95	; 0x5f
   1f374:	orreq	r3, r3, #1
   1f378:	bic	r2, r2, #64	; 0x40
   1f37c:	orr	r3, r2, r3, lsl #6
   1f380:	strb	r3, [r4, #6]
   1f384:	b	1f2e4 <__assert_fail@plt+0xd928>
   1f388:	andeq	r0, r0, r2, lsl #8
   1f38c:	addeq	r0, r0, r8
   1f390:	push	{r4, lr}
   1f394:	mov	r4, r1
   1f398:	bl	1ed64 <__assert_fail@plt+0xd3a8>
   1f39c:	ldr	r3, [r4, #40]	; 0x28
   1f3a0:	add	r0, r3, r0
   1f3a4:	str	r0, [r4, #40]	; 0x28
   1f3a8:	pop	{r4, pc}
   1f3ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f3b0:	mov	r6, r0
   1f3b4:	ldr	r9, [pc, #156]	; 1f458 <__assert_fail@plt+0xda9c>
   1f3b8:	mov	r5, r1
   1f3bc:	mov	r7, r2
   1f3c0:	mvn	r4, #0
   1f3c4:	mov	r8, #10
   1f3c8:	mov	sl, #32768	; 0x8000
   1f3cc:	mov	r2, r7
   1f3d0:	mov	r1, r6
   1f3d4:	mov	r0, r5
   1f3d8:	bl	1f390 <__assert_fail@plt+0xd9d4>
   1f3dc:	ldrb	r2, [r5, #4]
   1f3e0:	ldrb	r3, [r5]
   1f3e4:	cmp	r2, #2
   1f3e8:	beq	1f44c <__assert_fail@plt+0xda90>
   1f3ec:	cmp	r3, #44	; 0x2c
   1f3f0:	cmpne	r2, #24
   1f3f4:	beq	1f450 <__assert_fail@plt+0xda94>
   1f3f8:	cmp	r2, #1
   1f3fc:	bne	1f444 <__assert_fail@plt+0xda88>
   1f400:	sub	r1, r3, #48	; 0x30
   1f404:	uxtb	r2, r1
   1f408:	cmp	r2, #9
   1f40c:	movhi	r2, #0
   1f410:	movls	r2, #1
   1f414:	cmn	r4, #2
   1f418:	moveq	r2, #0
   1f41c:	cmp	r2, #0
   1f420:	beq	1f444 <__assert_fail@plt+0xda88>
   1f424:	cmn	r4, #1
   1f428:	moveq	r4, r1
   1f42c:	beq	1f3cc <__assert_fail@plt+0xda10>
   1f430:	mla	r4, r8, r4, r3
   1f434:	cmp	r4, r9
   1f438:	suble	r4, r4, #48	; 0x30
   1f43c:	movgt	r4, sl
   1f440:	b	1f3cc <__assert_fail@plt+0xda10>
   1f444:	mvn	r4, #1
   1f448:	b	1f3cc <__assert_fail@plt+0xda10>
   1f44c:	mvn	r4, #1
   1f450:	mov	r0, r4
   1f454:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f458:	andeq	r8, r0, r0, lsr r0
   1f45c:	push	{r4, r5, r6, lr}
   1f460:	mov	r4, r0
   1f464:	ldr	r0, [r0, #8]
   1f468:	add	r5, r4, #12
   1f46c:	cmp	r0, r5
   1f470:	beq	1f478 <__assert_fail@plt+0xdabc>
   1f474:	bl	1a30c <__assert_fail@plt+0x8950>
   1f478:	mov	r2, #0
   1f47c:	mov	r3, #16
   1f480:	str	r5, [r4, #8]
   1f484:	stm	r4, {r2, r3}
   1f488:	pop	{r4, r5, r6, pc}
   1f48c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f490:	sub	sp, sp, #14400	; 0x3840
   1f494:	mov	sl, #0
   1f498:	sub	sp, sp, #4
   1f49c:	mov	r9, r0
   1f4a0:	str	sl, [r1, #44]	; 0x2c
   1f4a4:	str	sl, [r1, #48]	; 0x30
   1f4a8:	add	r0, sp, #64	; 0x40
   1f4ac:	mov	r8, r1
   1f4b0:	bl	1adcc <__assert_fail@plt+0x9410>
   1f4b4:	mov	fp, sl
   1f4b8:	ldr	r3, [r8, #8]
   1f4bc:	cmp	fp, r3
   1f4c0:	blt	1f4f4 <__assert_fail@plt+0xdb38>
   1f4c4:	cmp	sl, #0
   1f4c8:	bgt	1f924 <__assert_fail@plt+0xdf68>
   1f4cc:	bne	1f904 <__assert_fail@plt+0xdf48>
   1f4d0:	mov	r1, #256	; 0x100
   1f4d4:	mov	r0, #4
   1f4d8:	bl	1a0b0 <__assert_fail@plt+0x86f4>
   1f4dc:	str	r0, [r8, #44]	; 0x2c
   1f4e0:	adds	r0, r0, #0
   1f4e4:	movne	r0, #1
   1f4e8:	add	sp, sp, #14400	; 0x3840
   1f4ec:	add	sp, sp, #4
   1f4f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f4f4:	lsl	r3, fp, #2
   1f4f8:	str	r3, [sp, #12]
   1f4fc:	ldr	r3, [r8, #12]
   1f500:	ldr	r1, [pc, #1908]	; 1fc7c <__assert_fail@plt+0xe2c0>
   1f504:	ldr	r2, [r3, fp, lsl #2]
   1f508:	ldr	r3, [r9]
   1f50c:	add	r7, r3, r2, lsl #3
   1f510:	ldrb	r4, [r7, #4]
   1f514:	ldr	r5, [r7, #4]
   1f518:	cmp	r4, #1
   1f51c:	and	r5, r1, r5, lsr #8
   1f520:	bne	1f5a4 <__assert_fail@plt+0xdbe8>
   1f524:	ldrb	r1, [r3, r2, lsl #3]
   1f528:	add	r0, sp, #64	; 0x40
   1f52c:	bl	1a52c <__assert_fail@plt+0x8b70>
   1f530:	cmp	r5, #0
   1f534:	bne	1f628 <__assert_fail@plt+0xdc6c>
   1f538:	add	r6, sp, #6208	; 0x1840
   1f53c:	mov	r5, #0
   1f540:	add	r3, sp, #3136	; 0xc40
   1f544:	str	r3, [sp, #4]
   1f548:	cmp	r5, sl
   1f54c:	blt	1f7b4 <__assert_fail@plt+0xddf8>
   1f550:	cmp	r5, sl
   1f554:	bne	1f6fc <__assert_fail@plt+0xdd40>
   1f558:	add	lr, sp, #64	; 0x40
   1f55c:	add	r3, sp, #14400	; 0x3840
   1f560:	add	ip, r3, sl, lsl #5
   1f564:	ldm	lr!, {r0, r1, r2, r3}
   1f568:	sub	ip, ip, #8192	; 0x2000
   1f56c:	stmia	ip!, {r0, r1, r2, r3}
   1f570:	ldm	lr, {r0, r1, r2, r3}
   1f574:	stm	ip, {r0, r1, r2, r3}
   1f578:	mov	r0, #12
   1f57c:	ldr	r3, [r8, #12]
   1f580:	ldr	r2, [sp, #12]
   1f584:	ldr	r1, [r3, r2]
   1f588:	add	r3, sp, #3136	; 0xc40
   1f58c:	mla	r0, r0, sl, r3
   1f590:	bl	1b0e0 <__assert_fail@plt+0x9724>
   1f594:	cmp	r0, #0
   1f598:	bne	1f8f4 <__assert_fail@plt+0xdf38>
   1f59c:	add	sl, sl, #1
   1f5a0:	b	1f65c <__assert_fail@plt+0xdca0>
   1f5a4:	cmp	r4, #3
   1f5a8:	bne	1f5bc <__assert_fail@plt+0xdc00>
   1f5ac:	ldr	r1, [r3, r2, lsl #3]
   1f5b0:	add	r0, sp, #64	; 0x40
   1f5b4:	bl	1a5b0 <__assert_fail@plt+0x8bf4>
   1f5b8:	b	1f530 <__assert_fail@plt+0xdb74>
   1f5bc:	cmp	r4, #5
   1f5c0:	bne	1f618 <__assert_fail@plt+0xdc5c>
   1f5c4:	ldr	r3, [r9, #92]	; 0x5c
   1f5c8:	cmp	r3, #1
   1f5cc:	ble	1f604 <__assert_fail@plt+0xdc48>
   1f5d0:	ldr	r1, [r9, #60]	; 0x3c
   1f5d4:	add	r0, sp, #64	; 0x40
   1f5d8:	bl	1a5b0 <__assert_fail@plt+0x8bf4>
   1f5dc:	ldr	r2, [r9, #128]	; 0x80
   1f5e0:	tst	r2, #64	; 0x40
   1f5e4:	ldreq	r3, [sp, #64]	; 0x40
   1f5e8:	biceq	r3, r3, #1024	; 0x400
   1f5ec:	streq	r3, [sp, #64]	; 0x40
   1f5f0:	tst	r2, #128	; 0x80
   1f5f4:	ldrne	r3, [sp, #64]	; 0x40
   1f5f8:	bicne	r3, r3, #1
   1f5fc:	strne	r3, [sp, #64]	; 0x40
   1f600:	b	1f530 <__assert_fail@plt+0xdb74>
   1f604:	mov	r2, #32
   1f608:	mvn	r1, #0
   1f60c:	add	r0, sp, #64	; 0x40
   1f610:	bl	11818 <memset@plt>
   1f614:	b	1f5dc <__assert_fail@plt+0xdc20>
   1f618:	cmp	r4, #7
   1f61c:	bne	1f6fc <__assert_fail@plt+0xdd40>
   1f620:	mov	r2, #16
   1f624:	b	1f608 <__assert_fail@plt+0xdc4c>
   1f628:	tst	r5, #32
   1f62c:	beq	1f654 <__assert_fail@plt+0xdc98>
   1f630:	ldr	r6, [sp, #64]	; 0x40
   1f634:	add	r0, sp, #64	; 0x40
   1f638:	and	r6, r6, #1024	; 0x400
   1f63c:	bl	1adcc <__assert_fail@plt+0x9410>
   1f640:	cmp	r6, #0
   1f644:	beq	1f6fc <__assert_fail@plt+0xdd40>
   1f648:	ldr	r3, [sp, #64]	; 0x40
   1f64c:	orr	r3, r3, #1024	; 0x400
   1f650:	str	r3, [sp, #64]	; 0x40
   1f654:	tst	r5, #128	; 0x80
   1f658:	beq	1f664 <__assert_fail@plt+0xdca8>
   1f65c:	add	r0, sp, #64	; 0x40
   1f660:	b	1f68c <__assert_fail@plt+0xdcd0>
   1f664:	tst	r5, #4
   1f668:	bne	1f694 <__assert_fail@plt+0xdcd8>
   1f66c:	tst	r5, #8
   1f670:	beq	1f538 <__assert_fail@plt+0xdb7c>
   1f674:	cmp	r4, #1
   1f678:	add	r0, sp, #64	; 0x40
   1f67c:	bne	1f734 <__assert_fail@plt+0xdd78>
   1f680:	ldrb	r3, [r7, #6]
   1f684:	tst	r3, #64	; 0x40
   1f688:	beq	1f734 <__assert_fail@plt+0xdd78>
   1f68c:	bl	1adcc <__assert_fail@plt+0x9410>
   1f690:	b	1f6fc <__assert_fail@plt+0xdd40>
   1f694:	cmp	r4, #1
   1f698:	bne	1f6a8 <__assert_fail@plt+0xdcec>
   1f69c:	ldrb	r3, [r7, #6]
   1f6a0:	tst	r3, #64	; 0x40
   1f6a4:	beq	1f65c <__assert_fail@plt+0xdca0>
   1f6a8:	ldr	r3, [r9, #92]	; 0x5c
   1f6ac:	add	r2, r9, #96	; 0x60
   1f6b0:	cmp	r3, #1
   1f6b4:	ble	1f704 <__assert_fail@plt+0xdd48>
   1f6b8:	mov	r3, #0
   1f6bc:	ldr	lr, [r9, #60]	; 0x3c
   1f6c0:	mov	r0, r3
   1f6c4:	add	ip, sp, #64	; 0x40
   1f6c8:	ldr	r1, [lr, r0, lsl #2]
   1f6cc:	ldr	r6, [r2], #4
   1f6d0:	mvn	r1, r1
   1f6d4:	orr	r1, r1, r6
   1f6d8:	ldr	r6, [ip, r0, lsl #2]
   1f6dc:	and	r1, r1, r6
   1f6e0:	str	r1, [ip, r0, lsl #2]
   1f6e4:	add	r0, r0, #1
   1f6e8:	cmp	r0, #8
   1f6ec:	orr	r3, r3, r1
   1f6f0:	bne	1f6c8 <__assert_fail@plt+0xdd0c>
   1f6f4:	cmp	r3, #0
   1f6f8:	bne	1f66c <__assert_fail@plt+0xdcb0>
   1f6fc:	add	fp, fp, #1
   1f700:	b	1f4b8 <__assert_fail@plt+0xdafc>
   1f704:	mov	r3, #0
   1f708:	mov	r1, r3
   1f70c:	add	ip, sp, #64	; 0x40
   1f710:	ldr	lr, [ip, r1, lsl #2]
   1f714:	ldr	r0, [r2], #4
   1f718:	and	r0, r0, lr
   1f71c:	str	r0, [ip, r1, lsl #2]
   1f720:	add	r1, r1, #1
   1f724:	cmp	r1, #8
   1f728:	orr	r3, r3, r0
   1f72c:	bne	1f710 <__assert_fail@plt+0xdd54>
   1f730:	b	1f6f4 <__assert_fail@plt+0xdd38>
   1f734:	ldr	r3, [r9, #92]	; 0x5c
   1f738:	add	r2, r9, #96	; 0x60
   1f73c:	cmp	r3, #1
   1f740:	ble	1f788 <__assert_fail@plt+0xddcc>
   1f744:	mov	r3, #0
   1f748:	ldr	r5, [r9, #60]	; 0x3c
   1f74c:	mov	r1, r3
   1f750:	add	lr, sp, #64	; 0x40
   1f754:	ldr	ip, [r5, r1, lsl #2]
   1f758:	ldr	r0, [r2], #4
   1f75c:	and	ip, ip, r0
   1f760:	ldr	r0, [lr, r1, lsl #2]
   1f764:	bic	r0, r0, ip
   1f768:	str	r0, [lr, r1, lsl #2]
   1f76c:	add	r1, r1, #1
   1f770:	cmp	r1, #8
   1f774:	orr	r3, r3, r0
   1f778:	bne	1f754 <__assert_fail@plt+0xdd98>
   1f77c:	cmp	r3, #0
   1f780:	beq	1f6fc <__assert_fail@plt+0xdd40>
   1f784:	b	1f538 <__assert_fail@plt+0xdb7c>
   1f788:	mov	r3, #0
   1f78c:	mov	r1, r3
   1f790:	ldr	ip, [r0, r1, lsl #2]
   1f794:	ldr	lr, [r2], #4
   1f798:	bic	ip, ip, lr
   1f79c:	str	ip, [r0, r1, lsl #2]
   1f7a0:	add	r1, r1, #1
   1f7a4:	cmp	r1, #8
   1f7a8:	orr	r3, r3, ip
   1f7ac:	bne	1f790 <__assert_fail@plt+0xddd4>
   1f7b0:	b	1f77c <__assert_fail@plt+0xddc0>
   1f7b4:	cmp	r4, #1
   1f7b8:	bne	1f7d0 <__assert_fail@plt+0xde14>
   1f7bc:	ldrb	r1, [r7]
   1f7c0:	mov	r0, r6
   1f7c4:	bl	1a560 <__assert_fail@plt+0x8ba4>
   1f7c8:	cmp	r0, #0
   1f7cc:	beq	1f8dc <__assert_fail@plt+0xdf20>
   1f7d0:	mov	r2, #0
   1f7d4:	mov	r3, r2
   1f7d8:	add	r1, sp, #64	; 0x40
   1f7dc:	ldr	r0, [r6, r3, lsl #2]
   1f7e0:	ldr	r1, [r1, r3, lsl #2]
   1f7e4:	and	r1, r1, r0
   1f7e8:	add	r0, sp, #1088	; 0x440
   1f7ec:	orr	r2, r2, r1
   1f7f0:	str	r1, [r0, r3, lsl #2]
   1f7f4:	add	r3, r3, #1
   1f7f8:	cmp	r3, #8
   1f7fc:	bne	1f7d8 <__assert_fail@plt+0xde1c>
   1f800:	cmp	r2, #0
   1f804:	beq	1f8dc <__assert_fail@plt+0xdf20>
   1f808:	mov	r3, #0
   1f80c:	mov	r1, r3
   1f810:	str	r3, [sp, #8]
   1f814:	add	r2, sp, #64	; 0x40
   1f818:	ldr	r0, [r6, r3, lsl #2]
   1f81c:	ldr	r2, [r2, r3, lsl #2]
   1f820:	add	lr, sp, #2112	; 0x840
   1f824:	bic	ip, r0, r2
   1f828:	bic	r2, r2, r0
   1f82c:	add	r0, sp, #64	; 0x40
   1f830:	str	ip, [lr, r3, lsl #2]
   1f834:	str	r2, [r0, r3, lsl #2]
   1f838:	ldr	r0, [sp, #8]
   1f83c:	add	r3, r3, #1
   1f840:	orr	r2, r0, r2
   1f844:	cmp	r3, #8
   1f848:	orr	r1, r1, ip
   1f84c:	str	r2, [sp, #8]
   1f850:	bne	1f814 <__assert_fail@plt+0xde58>
   1f854:	cmp	r1, #0
   1f858:	beq	1f8b4 <__assert_fail@plt+0xdef8>
   1f85c:	add	r3, sp, #14400	; 0x3840
   1f860:	add	ip, r3, sl, lsl #5
   1f864:	ldm	lr!, {r0, r1, r2, r3}
   1f868:	sub	ip, ip, #8192	; 0x2000
   1f86c:	stmia	ip!, {r0, r1, r2, r3}
   1f870:	ldm	lr, {r0, r1, r2, r3}
   1f874:	add	lr, sp, #1088	; 0x440
   1f878:	stm	ip, {r0, r1, r2, r3}
   1f87c:	add	r3, sp, #6208	; 0x1840
   1f880:	add	ip, r3, r5, lsl #5
   1f884:	ldm	lr!, {r0, r1, r2, r3}
   1f888:	stmia	ip!, {r0, r1, r2, r3}
   1f88c:	ldm	lr, {r0, r1, r2, r3}
   1f890:	stm	ip, {r0, r1, r2, r3}
   1f894:	mov	r0, #12
   1f898:	add	r3, sp, #3136	; 0xc40
   1f89c:	ldr	r1, [sp, #4]
   1f8a0:	mla	r0, r0, sl, r3
   1f8a4:	bl	1d314 <__assert_fail@plt+0xb958>
   1f8a8:	cmp	r0, #0
   1f8ac:	bne	1f8f4 <__assert_fail@plt+0xdf38>
   1f8b0:	add	sl, sl, #1
   1f8b4:	ldr	r3, [r8, #12]
   1f8b8:	ldr	r2, [sp, #12]
   1f8bc:	ldr	r0, [sp, #4]
   1f8c0:	ldr	r1, [r3, r2]
   1f8c4:	bl	1dafc <__assert_fail@plt+0xc140>
   1f8c8:	cmp	r0, #0
   1f8cc:	beq	1f8f4 <__assert_fail@plt+0xdf38>
   1f8d0:	ldr	r3, [sp, #8]
   1f8d4:	cmp	r3, #0
   1f8d8:	beq	1f550 <__assert_fail@plt+0xdb94>
   1f8dc:	ldr	r3, [sp, #4]
   1f8e0:	add	r5, r5, #1
   1f8e4:	add	r3, r3, #12
   1f8e8:	add	r6, r6, #32
   1f8ec:	str	r3, [sp, #4]
   1f8f0:	b	1f548 <__assert_fail@plt+0xdb8c>
   1f8f4:	mov	r4, #0
   1f8f8:	mov	r5, #12
   1f8fc:	cmp	r4, sl
   1f900:	blt	1f90c <__assert_fail@plt+0xdf50>
   1f904:	mov	r0, #0
   1f908:	b	1f4e8 <__assert_fail@plt+0xdb2c>
   1f90c:	add	r3, sp, #3136	; 0xc40
   1f910:	mla	r3, r5, r4, r3
   1f914:	add	r4, r4, #1
   1f918:	ldr	r0, [r3, #8]
   1f91c:	bl	1a30c <__assert_fail@plt+0x8950>
   1f920:	b	1f8fc <__assert_fail@plt+0xdf40>
   1f924:	add	r1, sl, #1
   1f928:	add	r0, sp, #20
   1f92c:	bl	1b120 <__assert_fail@plt+0x9764>
   1f930:	add	r4, sp, #2112	; 0x840
   1f934:	cmp	r0, #0
   1f938:	mov	r5, r0
   1f93c:	str	r0, [r4, #-2096]	; 0xfffff7d0
   1f940:	beq	1f974 <__assert_fail@plt+0xdfb8>
   1f944:	ldr	r0, [r4, #-2084]	; 0xfffff7dc
   1f948:	bl	1a30c <__assert_fail@plt+0x8950>
   1f94c:	mov	r4, #0
   1f950:	mov	r5, #12
   1f954:	add	r3, sp, #3136	; 0xc40
   1f958:	mla	r3, r5, r4, r3
   1f95c:	add	r4, r4, #1
   1f960:	ldr	r0, [r3, #8]
   1f964:	bl	1a30c <__assert_fail@plt+0x8950>
   1f968:	cmp	r4, sl
   1f96c:	bne	1f954 <__assert_fail@plt+0xdf98>
   1f970:	b	1f904 <__assert_fail@plt+0xdf48>
   1f974:	add	r0, sp, #32
   1f978:	mov	r6, r5
   1f97c:	bl	1adcc <__assert_fail@plt+0x9410>
   1f980:	add	r3, sp, #16
   1f984:	str	r3, [sp, #4]
   1f988:	mov	r3, #12
   1f98c:	add	r2, sp, #3136	; 0xc40
   1f990:	mla	fp, r3, r6, r2
   1f994:	mov	r7, #0
   1f998:	str	r7, [r4, #-2088]	; 0xfffff7d8
   1f99c:	ldr	r3, [fp, #4]
   1f9a0:	cmp	r7, r3
   1f9a4:	blt	1fa30 <__assert_fail@plt+0xe074>
   1f9a8:	mov	r3, #0
   1f9ac:	add	r2, sp, #20
   1f9b0:	mov	r1, r9
   1f9b4:	ldr	r0, [sp, #4]
   1f9b8:	bl	1d4c4 <__assert_fail@plt+0xbb08>
   1f9bc:	add	r3, sp, #64	; 0x40
   1f9c0:	cmp	r0, #0
   1f9c4:	mov	r7, r0
   1f9c8:	str	r0, [r3, r6, lsl #2]
   1f9cc:	bne	1f9dc <__assert_fail@plt+0xe020>
   1f9d0:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1f9d4:	cmp	r3, #0
   1f9d8:	bne	1f944 <__assert_fail@plt+0xdf88>
   1f9dc:	ldrsb	r3, [r7, #52]	; 0x34
   1f9e0:	add	fp, sp, #1088	; 0x440
   1f9e4:	cmp	r3, #0
   1f9e8:	strge	r7, [fp, r6, lsl #2]
   1f9ec:	strge	r7, [r4, r6, lsl #2]
   1f9f0:	bge	1faa8 <__assert_fail@plt+0xe0ec>
   1f9f4:	mov	r3, #1
   1f9f8:	add	r2, sp, #20
   1f9fc:	mov	r1, r9
   1fa00:	ldr	r0, [sp, #4]
   1fa04:	bl	1d4c4 <__assert_fail@plt+0xbb08>
   1fa08:	cmp	r0, #0
   1fa0c:	str	r0, [fp, r6, lsl #2]
   1fa10:	bne	1fa74 <__assert_fail@plt+0xe0b8>
   1fa14:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1fa18:	cmp	r3, #0
   1fa1c:	bne	1f944 <__assert_fail@plt+0xdf88>
   1fa20:	ldr	r3, [r9, #92]	; 0x5c
   1fa24:	cmp	r3, #1
   1fa28:	movgt	r5, #1
   1fa2c:	b	1fa7c <__assert_fail@plt+0xe0c0>
   1fa30:	ldr	r3, [fp, #8]
   1fa34:	ldr	r2, [r3, r7, lsl #2]
   1fa38:	ldr	r3, [r9, #12]
   1fa3c:	ldr	r3, [r3, r2, lsl #2]
   1fa40:	cmn	r3, #1
   1fa44:	bne	1fa50 <__assert_fail@plt+0xe094>
   1fa48:	add	r7, r7, #1
   1fa4c:	b	1f99c <__assert_fail@plt+0xdfe0>
   1fa50:	ldr	r1, [r9, #24]
   1fa54:	mov	r2, #12
   1fa58:	add	r0, sp, #20
   1fa5c:	mla	r1, r2, r3, r1
   1fa60:	bl	1df04 <__assert_fail@plt+0xc548>
   1fa64:	cmp	r0, #0
   1fa68:	str	r0, [r4, #-2096]	; 0xfffff7d0
   1fa6c:	beq	1fa48 <__assert_fail@plt+0xe08c>
   1fa70:	b	1f944 <__assert_fail@plt+0xdf88>
   1fa74:	cmp	r7, r0
   1fa78:	bne	1fa20 <__assert_fail@plt+0xe064>
   1fa7c:	mov	r3, #2
   1fa80:	add	r2, sp, #20
   1fa84:	mov	r1, r9
   1fa88:	ldr	r0, [sp, #4]
   1fa8c:	bl	1d4c4 <__assert_fail@plt+0xbb08>
   1fa90:	cmp	r0, #0
   1fa94:	str	r0, [r4, r6, lsl #2]
   1fa98:	bne	1faa8 <__assert_fail@plt+0xe0ec>
   1fa9c:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1faa0:	cmp	r3, #0
   1faa4:	bne	1f944 <__assert_fail@plt+0xdf88>
   1faa8:	add	r3, sp, #6208	; 0x1840
   1faac:	add	r1, r3, r6, lsl #5
   1fab0:	add	r0, sp, #32
   1fab4:	add	r6, r6, #1
   1fab8:	bl	1a5b0 <__assert_fail@plt+0x8bf4>
   1fabc:	cmp	r6, sl
   1fac0:	bne	1f988 <__assert_fail@plt+0xdfcc>
   1fac4:	cmp	r5, #0
   1fac8:	bne	1fbdc <__assert_fail@plt+0xe220>
   1facc:	mov	r1, #256	; 0x100
   1fad0:	mov	r0, #4
   1fad4:	bl	1a0b0 <__assert_fail@plt+0x86f4>
   1fad8:	cmp	r0, #0
   1fadc:	str	r0, [r8, #44]	; 0x2c
   1fae0:	beq	1f944 <__assert_fail@plt+0xdf88>
   1fae4:	add	r6, r9, #96	; 0x60
   1fae8:	mov	r2, r5
   1faec:	add	r3, sp, #32
   1faf0:	add	lr, r0, r2, lsl #5
   1faf4:	ldr	r1, [r3, r2]
   1faf8:	add	r3, sp, #6208	; 0x1840
   1fafc:	mov	ip, #1
   1fb00:	add	r7, r3, r2
   1fb04:	cmp	r1, #0
   1fb08:	bne	1fb90 <__assert_fail@plt+0xe1d4>
   1fb0c:	add	r2, r2, #4
   1fb10:	cmp	r2, #32
   1fb14:	add	r6, r6, #4
   1fb18:	bne	1faec <__assert_fail@plt+0xe130>
   1fb1c:	ldr	r3, [r4, #-2080]	; 0xfffff7e0
   1fb20:	mov	r6, r0
   1fb24:	tst	r3, #1024	; 0x400
   1fb28:	beq	1fb5c <__assert_fail@plt+0xe1a0>
   1fb2c:	mov	r7, #0
   1fb30:	mov	r8, #10
   1fb34:	add	r3, sp, #6208	; 0x1840
   1fb38:	mov	r1, r8
   1fb3c:	add	r0, r3, r7, lsl #5
   1fb40:	bl	1a560 <__assert_fail@plt+0x8ba4>
   1fb44:	cmp	r0, #0
   1fb48:	beq	1fc6c <__assert_fail@plt+0xe2b0>
   1fb4c:	ldr	r3, [r4, r7, lsl #2]
   1fb50:	cmp	r5, #0
   1fb54:	str	r3, [r6, #40]	; 0x28
   1fb58:	strne	r3, [r6, #1064]	; 0x428
   1fb5c:	ldr	r0, [r4, #-2084]	; 0xfffff7dc
   1fb60:	bl	1a30c <__assert_fail@plt+0x8950>
   1fb64:	mov	r4, #0
   1fb68:	mov	r5, #12
   1fb6c:	add	r3, sp, #3136	; 0xc40
   1fb70:	mla	r3, r5, r4, r3
   1fb74:	add	r4, r4, #1
   1fb78:	ldr	r0, [r3, #8]
   1fb7c:	bl	1a30c <__assert_fail@plt+0x8950>
   1fb80:	cmp	r4, sl
   1fb84:	bne	1fb6c <__assert_fail@plt+0xe1b0>
   1fb88:	mov	r0, #1
   1fb8c:	b	1f4e8 <__assert_fail@plt+0xdb2c>
   1fb90:	tst	r1, #1
   1fb94:	movne	r3, #0
   1fb98:	bne	1fbb0 <__assert_fail@plt+0xe1f4>
   1fb9c:	lsl	ip, ip, #1
   1fba0:	lsr	r1, r1, #1
   1fba4:	add	lr, lr, #4
   1fba8:	b	1fb04 <__assert_fail@plt+0xe148>
   1fbac:	add	r3, r3, #1
   1fbb0:	ldr	r9, [r7, r3, lsl #5]
   1fbb4:	tst	ip, r9
   1fbb8:	beq	1fbac <__assert_fail@plt+0xe1f0>
   1fbbc:	ldr	r9, [r6]
   1fbc0:	lsl	r3, r3, #2
   1fbc4:	add	r3, r4, r3
   1fbc8:	tst	ip, r9
   1fbcc:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   1fbd0:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   1fbd4:	str	r3, [lr]
   1fbd8:	b	1fb9c <__assert_fail@plt+0xe1e0>
   1fbdc:	mov	r1, #512	; 0x200
   1fbe0:	mov	r0, #4
   1fbe4:	bl	1a0b0 <__assert_fail@plt+0x86f4>
   1fbe8:	cmp	r0, #0
   1fbec:	str	r0, [r8, #48]	; 0x30
   1fbf0:	beq	1f944 <__assert_fail@plt+0xdf88>
   1fbf4:	mov	r2, #0
   1fbf8:	add	r3, sp, #32
   1fbfc:	add	ip, r0, r2, lsl #5
   1fc00:	ldr	r1, [r3, r2]
   1fc04:	add	r3, sp, #6208	; 0x1840
   1fc08:	mov	lr, #1
   1fc0c:	add	r6, r3, r2
   1fc10:	cmp	r1, #0
   1fc14:	bne	1fc28 <__assert_fail@plt+0xe26c>
   1fc18:	add	r2, r2, #4
   1fc1c:	cmp	r2, #32
   1fc20:	bne	1fbf8 <__assert_fail@plt+0xe23c>
   1fc24:	b	1fb1c <__assert_fail@plt+0xe160>
   1fc28:	tst	r1, #1
   1fc2c:	movne	r3, #0
   1fc30:	bne	1fc48 <__assert_fail@plt+0xe28c>
   1fc34:	lsl	lr, lr, #1
   1fc38:	lsr	r1, r1, #1
   1fc3c:	add	ip, ip, #4
   1fc40:	b	1fc10 <__assert_fail@plt+0xe254>
   1fc44:	add	r3, r3, #1
   1fc48:	ldr	r7, [r6, r3, lsl #5]
   1fc4c:	tst	lr, r7
   1fc50:	beq	1fc44 <__assert_fail@plt+0xe288>
   1fc54:	add	r3, r4, r3, lsl #2
   1fc58:	ldr	r7, [r3, #-2048]	; 0xfffff800
   1fc5c:	str	r7, [ip]
   1fc60:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   1fc64:	str	r3, [ip, #1024]	; 0x400
   1fc68:	b	1fc34 <__assert_fail@plt+0xe278>
   1fc6c:	add	r7, r7, #1
   1fc70:	cmp	r7, sl
   1fc74:	bne	1fb34 <__assert_fail@plt+0xe178>
   1fc78:	b	1fb5c <__assert_fail@plt+0xe1a0>
   1fc7c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1fc80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc84:	sub	sp, sp, #28
   1fc88:	add	r5, sp, #12
   1fc8c:	mov	r8, r0
   1fc90:	mov	r4, r1
   1fc94:	mov	r0, r5
   1fc98:	ldr	r1, [r1, #4]
   1fc9c:	mov	r9, r2
   1fca0:	mov	sl, r3
   1fca4:	bl	1b120 <__assert_fail@plt+0x9764>
   1fca8:	subs	r6, r0, #0
   1fcac:	moveq	r7, r6
   1fcb0:	beq	1fd58 <__assert_fail@plt+0xe39c>
   1fcb4:	mov	r0, r6
   1fcb8:	add	sp, sp, #28
   1fcbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fcc0:	ldr	r3, [r4, #8]
   1fcc4:	ldr	r1, [r8, #24]
   1fcc8:	ldr	r2, [r3, r7, lsl #2]
   1fccc:	mov	r3, #12
   1fcd0:	mla	r1, r3, r2, r1
   1fcd4:	mov	r3, #0
   1fcd8:	ldr	lr, [r1, #4]
   1fcdc:	cmp	r3, lr
   1fce0:	blt	1fd04 <__assert_fail@plt+0xe348>
   1fce4:	mov	r0, r5
   1fce8:	bl	1df04 <__assert_fail@plt+0xc548>
   1fcec:	subs	fp, r0, #0
   1fcf0:	beq	1fd54 <__assert_fail@plt+0xe398>
   1fcf4:	ldr	r0, [sp, #20]
   1fcf8:	bl	1a30c <__assert_fail@plt+0x8950>
   1fcfc:	mov	r6, fp
   1fd00:	b	1fcb4 <__assert_fail@plt+0xe2f8>
   1fd04:	ldr	r0, [r1, #8]
   1fd08:	ldr	ip, [r8]
   1fd0c:	ldr	r0, [r0, r3, lsl #2]
   1fd10:	add	fp, ip, r0, lsl #3
   1fd14:	ldrb	fp, [fp, #4]
   1fd18:	cmp	sl, fp
   1fd1c:	bne	1fd2c <__assert_fail@plt+0xe370>
   1fd20:	ldr	ip, [ip, r0, lsl #3]
   1fd24:	cmp	r9, ip
   1fd28:	beq	1fd34 <__assert_fail@plt+0xe378>
   1fd2c:	add	r3, r3, #1
   1fd30:	b	1fcdc <__assert_fail@plt+0xe320>
   1fd34:	cmn	r0, #1
   1fd38:	beq	1fce4 <__assert_fail@plt+0xe328>
   1fd3c:	str	sl, [sp]
   1fd40:	mov	r3, r9
   1fd44:	mov	r1, r5
   1fd48:	mov	r0, r8
   1fd4c:	bl	1de14 <__assert_fail@plt+0xc458>
   1fd50:	b	1fcec <__assert_fail@plt+0xe330>
   1fd54:	add	r7, r7, #1
   1fd58:	ldr	r3, [r4, #4]
   1fd5c:	cmp	r7, r3
   1fd60:	blt	1fcc0 <__assert_fail@plt+0xe304>
   1fd64:	ldr	r0, [r4, #8]
   1fd68:	bl	1a30c <__assert_fail@plt+0x8950>
   1fd6c:	ldm	r5, {r0, r1, r2}
   1fd70:	stm	r4, {r0, r1, r2}
   1fd74:	b	1fcb4 <__assert_fail@plt+0xe2f8>
   1fd78:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd7c:	ldr	r4, [r2, #4]
   1fd80:	cmp	r4, #0
   1fd84:	streq	r4, [r0]
   1fd88:	movne	r8, r4
   1fd8c:	movne	r3, #0
   1fd90:	bne	1fdac <__assert_fail@plt+0xe3f0>
   1fd94:	mov	r0, r4
   1fd98:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd9c:	ldr	ip, [r2, #8]
   1fda0:	ldr	ip, [ip, r3, lsl #2]
   1fda4:	add	r3, r3, #1
   1fda8:	add	r8, r8, ip
   1fdac:	cmp	r4, r3
   1fdb0:	bgt	1fd9c <__assert_fail@plt+0xe3e0>
   1fdb4:	ldr	r3, [r1, #68]	; 0x44
   1fdb8:	mov	r5, r2
   1fdbc:	and	r2, r8, r3
   1fdc0:	mov	r3, #12
   1fdc4:	mov	r6, r1
   1fdc8:	mul	r3, r3, r2
   1fdcc:	ldr	r2, [r1, #32]
   1fdd0:	mov	r7, r0
   1fdd4:	add	fp, r2, r3
   1fdd8:	ldr	sl, [r2, r3]
   1fddc:	mov	r9, #0
   1fde0:	cmp	r9, sl
   1fde4:	blt	1fe2c <__assert_fail@plt+0xe470>
   1fde8:	mov	r1, #1
   1fdec:	mov	r0, #56	; 0x38
   1fdf0:	bl	1a0b0 <__assert_fail@plt+0x86f4>
   1fdf4:	subs	r4, r0, #0
   1fdf8:	beq	1fe1c <__assert_fail@plt+0xe460>
   1fdfc:	add	r9, r4, #4
   1fe00:	mov	r1, r5
   1fe04:	mov	r0, r9
   1fe08:	bl	1d314 <__assert_fail@plt+0xb958>
   1fe0c:	cmp	r0, #0
   1fe10:	beq	1fe5c <__assert_fail@plt+0xe4a0>
   1fe14:	mov	r0, r4
   1fe18:	bl	1a30c <__assert_fail@plt+0x8950>
   1fe1c:	mov	r3, #12
   1fe20:	str	r3, [r7]
   1fe24:	mov	r4, #0
   1fe28:	b	1fd94 <__assert_fail@plt+0xe3d8>
   1fe2c:	ldr	r3, [fp, #8]
   1fe30:	ldr	r4, [r3, r9, lsl #2]
   1fe34:	ldr	r3, [r4]
   1fe38:	cmp	r3, r8
   1fe3c:	bne	1fe54 <__assert_fail@plt+0xe498>
   1fe40:	mov	r1, r5
   1fe44:	add	r0, r4, #4
   1fe48:	bl	1d18c <__assert_fail@plt+0xb7d0>
   1fe4c:	cmp	r0, #0
   1fe50:	bne	1fd94 <__assert_fail@plt+0xe3d8>
   1fe54:	add	r9, r9, #1
   1fe58:	b	1fde0 <__assert_fail@plt+0xe424>
   1fe5c:	str	r9, [r4, #40]	; 0x28
   1fe60:	ldr	lr, [pc, #188]	; 1ff24 <__assert_fail@plt+0xe568>
   1fe64:	ldr	r9, [r5, #4]
   1fe68:	cmp	r0, r9
   1fe6c:	blt	1fe94 <__assert_fail@plt+0xe4d8>
   1fe70:	mov	r2, r8
   1fe74:	mov	r1, r4
   1fe78:	mov	r0, r6
   1fe7c:	bl	1b150 <__assert_fail@plt+0x9794>
   1fe80:	cmp	r0, #0
   1fe84:	beq	1fd94 <__assert_fail@plt+0xe3d8>
   1fe88:	mov	r0, r4
   1fe8c:	bl	1bc28 <__assert_fail@plt+0xa26c>
   1fe90:	b	1fe1c <__assert_fail@plt+0xe460>
   1fe94:	ldr	r3, [r5, #8]
   1fe98:	ldr	r1, [r6]
   1fe9c:	ldr	r3, [r3, r0, lsl #2]
   1fea0:	add	r1, r1, r3, lsl #3
   1fea4:	ldrb	ip, [r1, #4]
   1fea8:	cmp	ip, #1
   1feac:	bne	1febc <__assert_fail@plt+0xe500>
   1feb0:	ldr	r3, [r1, #4]
   1feb4:	tst	r3, lr
   1feb8:	beq	1ff1c <__assert_fail@plt+0xe560>
   1febc:	ldrb	r3, [r1, #6]
   1fec0:	ldrb	r2, [r4, #52]	; 0x34
   1fec4:	cmp	ip, #2
   1fec8:	lsr	r3, r3, #4
   1fecc:	orr	r3, r3, r2, lsr #5
   1fed0:	and	r3, r3, #1
   1fed4:	bic	r2, r2, #32
   1fed8:	orr	r3, r2, r3, lsl #5
   1fedc:	strb	r3, [r4, #52]	; 0x34
   1fee0:	uxtbeq	r3, r3
   1fee4:	orreq	r3, r3, #16
   1fee8:	beq	1ff18 <__assert_fail@plt+0xe55c>
   1feec:	cmp	ip, #4
   1fef0:	ldrbeq	r3, [r4, #52]	; 0x34
   1fef4:	orreq	r3, r3, #64	; 0x40
   1fef8:	beq	1ff18 <__assert_fail@plt+0xe55c>
   1fefc:	cmp	ip, #12
   1ff00:	beq	1ff10 <__assert_fail@plt+0xe554>
   1ff04:	ldr	r3, [r1, #4]
   1ff08:	tst	r3, lr
   1ff0c:	beq	1ff1c <__assert_fail@plt+0xe560>
   1ff10:	ldrb	r3, [r4, #52]	; 0x34
   1ff14:	orr	r3, r3, #128	; 0x80
   1ff18:	strb	r3, [r4, #52]	; 0x34
   1ff1c:	add	r0, r0, #1
   1ff20:	b	1fe68 <__assert_fail@plt+0xe4ac>
   1ff24:	andeq	pc, r3, r0, lsl #30
   1ff28:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1ff2c:	mov	r8, r0
   1ff30:	mov	r6, r2
   1ff34:	mov	r7, r3
   1ff38:	sub	r5, r1, #4
   1ff3c:	mov	r4, #0
   1ff40:	cmp	r4, r7
   1ff44:	blt	1ff54 <__assert_fail@plt+0xe598>
   1ff48:	mov	r0, #0
   1ff4c:	add	sp, sp, #16
   1ff50:	pop	{r4, r5, r6, r7, r8, pc}
   1ff54:	ldr	r1, [r5, #4]!
   1ff58:	cmp	r1, #0
   1ff5c:	ldreq	r3, [r6, r4, lsl #2]
   1ff60:	streq	r3, [r5]
   1ff64:	beq	1ffb8 <__assert_fail@plt+0xe5fc>
   1ff68:	ldr	r2, [r6, r4, lsl #2]
   1ff6c:	cmp	r2, #0
   1ff70:	beq	1ffb8 <__assert_fail@plt+0xe5fc>
   1ff74:	add	r2, r2, #4
   1ff78:	add	r1, r1, #4
   1ff7c:	add	r0, sp, #4
   1ff80:	bl	1d38c <__assert_fail@plt+0xb9d0>
   1ff84:	cmp	r0, #0
   1ff88:	str	r0, [sp]
   1ff8c:	bne	1ff4c <__assert_fail@plt+0xe590>
   1ff90:	add	r2, sp, #4
   1ff94:	mov	r1, r8
   1ff98:	mov	r0, sp
   1ff9c:	bl	1fd78 <__assert_fail@plt+0xe3bc>
   1ffa0:	str	r0, [r5]
   1ffa4:	ldr	r0, [sp, #12]
   1ffa8:	bl	1a30c <__assert_fail@plt+0x8950>
   1ffac:	ldr	r0, [sp]
   1ffb0:	cmp	r0, #0
   1ffb4:	bne	1ff4c <__assert_fail@plt+0xe590>
   1ffb8:	add	r4, r4, #1
   1ffbc:	b	1ff40 <__assert_fail@plt+0xe584>
   1ffc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffc4:	sub	sp, sp, #36	; 0x24
   1ffc8:	mov	r8, r1
   1ffcc:	mov	r1, r2
   1ffd0:	mov	r6, r0
   1ffd4:	mov	r9, r2
   1ffd8:	str	r3, [sp, #8]
   1ffdc:	bl	1aac8 <__assert_fail@plt+0x910c>
   1ffe0:	cmn	r0, #1
   1ffe4:	bne	1fff4 <__assert_fail@plt+0xe638>
   1ffe8:	mov	r0, #0
   1ffec:	add	sp, sp, #36	; 0x24
   1fff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fff4:	mov	r3, #24
   1fff8:	ldr	r7, [r6, #84]	; 0x54
   1fffc:	mul	r3, r3, r0
   20000:	str	r3, [sp, #4]
   20004:	ldr	r3, [sp, #4]
   20008:	mov	fp, #12
   2000c:	add	r4, r3, #24
   20010:	ldr	r3, [r6, #116]	; 0x74
   20014:	add	r4, r3, r4
   20018:	ldr	sl, [r4, #-24]	; 0xffffffe8
   2001c:	mov	r0, r8
   20020:	mov	r1, sl
   20024:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   20028:	cmp	r0, #0
   2002c:	beq	2017c <__assert_fail@plt+0xe7c0>
   20030:	ldr	r5, [r4, #-12]
   20034:	ldr	r2, [r4, #-16]
   20038:	add	r5, r9, r5
   2003c:	sub	r5, r5, r2
   20040:	cmp	r9, r5
   20044:	bne	200d4 <__assert_fail@plt+0xe718>
   20048:	ldr	r2, [r7, #20]
   2004c:	mov	r0, r8
   20050:	mla	r3, fp, sl, r2
   20054:	ldr	r3, [r3, #8]
   20058:	ldr	r5, [r3]
   2005c:	mov	r1, r5
   20060:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   20064:	cmp	r0, #0
   20068:	bne	2017c <__assert_fail@plt+0xe7c0>
   2006c:	mov	r1, r5
   20070:	add	r0, sp, #20
   20074:	bl	1b0e0 <__assert_fail@plt+0x9724>
   20078:	ldr	r3, [sp, #72]	; 0x48
   2007c:	ldr	r2, [sp, #8]
   20080:	add	r1, sp, #20
   20084:	str	r0, [sp, #16]
   20088:	mov	r0, r7
   2008c:	bl	1fc80 <__assert_fail@plt+0xe2c4>
   20090:	add	r1, sp, #20
   20094:	mov	r4, r0
   20098:	mov	r0, r8
   2009c:	bl	1df04 <__assert_fail@plt+0xc548>
   200a0:	mov	r5, r0
   200a4:	ldr	r0, [sp, #28]
   200a8:	bl	1a30c <__assert_fail@plt+0x8950>
   200ac:	ldr	r0, [sp, #16]
   200b0:	orr	r3, r4, r5
   200b4:	orrs	r3, r3, r0
   200b8:	beq	20004 <__assert_fail@plt+0xe648>
   200bc:	cmp	r0, #0
   200c0:	bne	1ffec <__assert_fail@plt+0xe630>
   200c4:	cmp	r4, #0
   200c8:	movne	r0, r4
   200cc:	moveq	r0, r5
   200d0:	b	1ffec <__assert_fail@plt+0xe630>
   200d4:	ldr	r3, [r6, #100]	; 0x64
   200d8:	ldr	r2, [r7, #12]
   200dc:	ldr	r3, [r3, r5, lsl #2]
   200e0:	ldr	sl, [r2, sl, lsl #2]
   200e4:	cmp	r3, #0
   200e8:	beq	201a8 <__assert_fail@plt+0xe7ec>
   200ec:	add	r3, r3, #4
   200f0:	mov	r0, r3
   200f4:	mov	r1, sl
   200f8:	str	r3, [sp, #12]
   200fc:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   20100:	ldr	r3, [sp, #12]
   20104:	cmp	r0, #0
   20108:	bne	2017c <__assert_fail@plt+0xe7c0>
   2010c:	mov	r1, r3
   20110:	add	r0, sp, #20
   20114:	bl	1d314 <__assert_fail@plt+0xb958>
   20118:	mov	r1, sl
   2011c:	str	r0, [sp, #16]
   20120:	add	r0, sp, #20
   20124:	bl	1dafc <__assert_fail@plt+0xc140>
   20128:	ldr	r3, [sp, #16]
   2012c:	eor	r0, r0, #1
   20130:	cmp	r3, #0
   20134:	orrne	r0, r0, #1
   20138:	tst	r0, #255	; 0xff
   2013c:	bne	20190 <__assert_fail@plt+0xe7d4>
   20140:	add	r2, sp, #20
   20144:	mov	r1, r7
   20148:	add	r0, sp, #16
   2014c:	ldr	sl, [r6, #100]	; 0x64
   20150:	bl	1fd78 <__assert_fail@plt+0xe3bc>
   20154:	str	r0, [sl, r5, lsl #2]
   20158:	ldr	r0, [sp, #28]
   2015c:	bl	1a30c <__assert_fail@plt+0x8950>
   20160:	ldr	r3, [r6, #100]	; 0x64
   20164:	ldr	r3, [r3, r5, lsl #2]
   20168:	cmp	r3, #0
   2016c:	bne	2017c <__assert_fail@plt+0xe7c0>
   20170:	ldr	r0, [sp, #16]
   20174:	cmp	r0, #0
   20178:	bne	1ffec <__assert_fail@plt+0xe630>
   2017c:	add	r4, r4, #24
   20180:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   20184:	cmp	r3, #0
   20188:	bne	20018 <__assert_fail@plt+0xe65c>
   2018c:	b	1ffe8 <__assert_fail@plt+0xe62c>
   20190:	ldr	r0, [sp, #28]
   20194:	bl	1a30c <__assert_fail@plt+0x8950>
   20198:	ldr	r0, [sp, #16]
   2019c:	cmp	r0, #0
   201a0:	moveq	r0, #12
   201a4:	b	1ffec <__assert_fail@plt+0xe630>
   201a8:	mov	r1, sl
   201ac:	add	r0, sp, #20
   201b0:	bl	1b0e0 <__assert_fail@plt+0x9724>
   201b4:	cmp	r0, #0
   201b8:	str	r0, [sp, #16]
   201bc:	beq	20140 <__assert_fail@plt+0xe784>
   201c0:	b	1ffec <__assert_fail@plt+0xe630>
   201c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   201c8:	mov	r9, r3
   201cc:	ldr	sl, [r0, #84]	; 0x54
   201d0:	sub	sp, sp, #76	; 0x4c
   201d4:	mov	fp, #0
   201d8:	ldr	r3, [sl]
   201dc:	str	fp, [sp, #40]	; 0x28
   201e0:	ldr	r5, [r0, #120]	; 0x78
   201e4:	ldr	r3, [r3, r2, lsl #3]
   201e8:	ldr	r8, [r1, #4]
   201ec:	str	r3, [sp, #16]
   201f0:	ldr	r3, [sp, #116]	; 0x74
   201f4:	mov	r4, r0
   201f8:	add	r5, r3, r5
   201fc:	cmp	r5, r8
   20200:	mov	r7, r1
   20204:	mov	r6, r2
   20208:	blt	2026c <__assert_fail@plt+0xe8b0>
   2020c:	mvn	r3, #-2147483648	; 0x80000000
   20210:	add	r5, r5, #1
   20214:	sub	r3, r3, r8
   20218:	cmp	r5, r3
   2021c:	ble	2022c <__assert_fail@plt+0xe870>
   20220:	mov	r0, #12
   20224:	add	sp, sp, #76	; 0x4c
   20228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2022c:	add	r3, r8, r5
   20230:	cmn	r3, #-1073741823	; 0xc0000001
   20234:	bhi	20220 <__assert_fail@plt+0xe864>
   20238:	lsl	r1, r3, #2
   2023c:	ldr	r0, [r7, #8]
   20240:	str	r3, [sp, #12]
   20244:	bl	1a484 <__assert_fail@plt+0x8ac8>
   20248:	cmp	r0, #0
   2024c:	beq	20220 <__assert_fail@plt+0xe864>
   20250:	ldr	r3, [sp, #12]
   20254:	str	r0, [r7, #8]
   20258:	str	r3, [r7, #4]
   2025c:	lsl	r2, r5, #2
   20260:	mov	r1, fp
   20264:	add	r0, r0, r8, lsl #2
   20268:	bl	11818 <memset@plt>
   2026c:	ldr	r5, [r7]
   20270:	ldr	r3, [r4, #100]	; 0x64
   20274:	cmp	r5, #0
   20278:	ldr	fp, [r7, #8]
   2027c:	moveq	r5, r9
   20280:	str	r3, [sp, #28]
   20284:	ldr	r3, [r4, #40]	; 0x28
   20288:	str	fp, [r4, #100]	; 0x64
   2028c:	str	r5, [r4, #40]	; 0x28
   20290:	ldr	r2, [r4, #88]	; 0x58
   20294:	sub	r1, r5, #1
   20298:	mov	r0, r4
   2029c:	str	r3, [sp, #32]
   202a0:	bl	1e250 <__assert_fail@plt+0xc894>
   202a4:	cmp	r5, r9
   202a8:	mov	r8, r0
   202ac:	bne	20328 <__assert_fail@plt+0xe96c>
   202b0:	mov	r1, r6
   202b4:	add	r0, sp, #48	; 0x30
   202b8:	bl	1b0e0 <__assert_fail@plt+0x9724>
   202bc:	cmp	r0, #0
   202c0:	str	r0, [sp, #40]	; 0x28
   202c4:	bne	20224 <__assert_fail@plt+0xe868>
   202c8:	ldr	r3, [sp, #120]	; 0x78
   202cc:	ldr	r2, [sp, #16]
   202d0:	add	r1, sp, #48	; 0x30
   202d4:	mov	r0, sl
   202d8:	bl	1fc80 <__assert_fail@plt+0xe2c4>
   202dc:	cmp	r0, #0
   202e0:	str	r0, [sp, #40]	; 0x28
   202e4:	bne	20418 <__assert_fail@plt+0xea5c>
   202e8:	ldr	r3, [sp, #52]	; 0x34
   202ec:	cmp	r3, #0
   202f0:	bne	203f0 <__assert_fail@plt+0xea34>
   202f4:	mov	r3, r8
   202f8:	add	r2, sp, #48	; 0x30
   202fc:	mov	r1, sl
   20300:	add	r0, sp, #40	; 0x28
   20304:	bl	1d4c4 <__assert_fail@plt+0xbb08>
   20308:	subs	r6, r0, #0
   2030c:	bne	2031c <__assert_fail@plt+0xe960>
   20310:	ldr	r3, [sp, #40]	; 0x28
   20314:	cmp	r3, #0
   20318:	bne	20418 <__assert_fail@plt+0xea5c>
   2031c:	ldr	r3, [r4, #100]	; 0x64
   20320:	str	r6, [r3, r5, lsl #2]
   20324:	b	20364 <__assert_fail@plt+0xe9a8>
   20328:	ldr	r6, [fp, r5, lsl #2]
   2032c:	cmp	r6, #0
   20330:	beq	203d4 <__assert_fail@plt+0xea18>
   20334:	ldrb	r3, [r6, #52]	; 0x34
   20338:	tst	r3, #64	; 0x40
   2033c:	beq	203d4 <__assert_fail@plt+0xea18>
   20340:	add	r1, r6, #4
   20344:	add	r0, sp, #48	; 0x30
   20348:	bl	1d314 <__assert_fail@plt+0xb958>
   2034c:	cmp	r0, #0
   20350:	str	r0, [sp, #40]	; 0x28
   20354:	bne	20224 <__assert_fail@plt+0xe868>
   20358:	ldrb	r3, [r6, #52]	; 0x34
   2035c:	tst	r3, #64	; 0x40
   20360:	bne	202e8 <__assert_fail@plt+0xe92c>
   20364:	add	r3, r5, #1
   20368:	lsl	r3, r3, #2
   2036c:	str	r3, [sp, #24]
   20370:	mov	r3, #0
   20374:	str	r3, [sp, #12]
   20378:	ldr	r3, [sp, #116]	; 0x74
   2037c:	cmp	r5, r3
   20380:	blt	2063c <__assert_fail@plt+0xec80>
   20384:	ldr	r0, [sp, #56]	; 0x38
   20388:	bl	1a30c <__assert_fail@plt+0x8950>
   2038c:	ldr	r3, [r4, #100]	; 0x64
   20390:	ldr	r2, [sp, #116]	; 0x74
   20394:	ldr	r0, [r3, r2, lsl #2]
   20398:	ldr	r3, [sp, #28]
   2039c:	cmp	r0, #0
   203a0:	str	r5, [r7]
   203a4:	addne	r0, r0, #4
   203a8:	str	r3, [r4, #100]	; 0x64
   203ac:	ldr	r3, [sp, #32]
   203b0:	cmp	r0, #0
   203b4:	str	r3, [r4, #40]	; 0x28
   203b8:	moveq	r0, #1
   203bc:	beq	20224 <__assert_fail@plt+0xe868>
   203c0:	ldr	r1, [sp, #112]	; 0x70
   203c4:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   203c8:	clz	r0, r0
   203cc:	lsr	r0, r0, #5
   203d0:	b	20224 <__assert_fail@plt+0xe868>
   203d4:	mov	r3, #0
   203d8:	cmp	r6, r3
   203dc:	str	r3, [sp, #48]	; 0x30
   203e0:	str	r3, [sp, #52]	; 0x34
   203e4:	str	r3, [sp, #56]	; 0x38
   203e8:	bne	20358 <__assert_fail@plt+0xe99c>
   203ec:	b	20364 <__assert_fail@plt+0xe9a8>
   203f0:	ldr	r3, [sp, #120]	; 0x78
   203f4:	mov	r2, r5
   203f8:	str	r3, [sp]
   203fc:	add	r1, sp, #48	; 0x30
   20400:	ldr	r3, [sp, #16]
   20404:	mov	r0, r4
   20408:	bl	1ffc0 <__assert_fail@plt+0xe604>
   2040c:	cmp	r0, #0
   20410:	str	r0, [sp, #40]	; 0x28
   20414:	beq	202f4 <__assert_fail@plt+0xe938>
   20418:	ldr	r0, [sp, #56]	; 0x38
   2041c:	bl	1a30c <__assert_fail@plt+0x8950>
   20420:	ldr	r0, [sp, #40]	; 0x28
   20424:	b	20224 <__assert_fail@plt+0xe868>
   20428:	ldr	r3, [r6, #24]
   2042c:	ldr	r2, [sp, #20]
   20430:	ldr	fp, [r3, r2, lsl #2]
   20434:	ldr	r3, [r9]
   20438:	lsl	r8, fp, #3
   2043c:	add	r3, r3, r8
   20440:	ldrb	r3, [r3, #6]
   20444:	tst	r3, #16
   20448:	bne	20474 <__assert_fail@plt+0xeab8>
   2044c:	ldr	r1, [r9]
   20450:	mov	r2, r5
   20454:	add	r1, r1, r8
   20458:	mov	r0, r4
   2045c:	bl	1e330 <__assert_fail@plt+0xc974>
   20460:	cmp	r0, #0
   20464:	bne	20604 <__assert_fail@plt+0xec48>
   20468:	ldr	r3, [sp, #20]
   2046c:	add	r3, r3, #1
   20470:	b	206a0 <__assert_fail@plt+0xece4>
   20474:	mov	r3, r5
   20478:	mov	r2, r4
   2047c:	mov	r1, fp
   20480:	mov	r0, r9
   20484:	bl	1cf10 <__assert_fail@plt+0xb554>
   20488:	cmp	r0, #1
   2048c:	ble	20630 <__assert_fail@plt+0xec74>
   20490:	ldr	r2, [r4, #100]	; 0x64
   20494:	add	r8, r5, r0
   20498:	ldr	r3, [r9, #12]
   2049c:	ldr	r1, [r2, r8, lsl #2]
   204a0:	mov	r2, #0
   204a4:	cmp	r1, r2
   204a8:	ldr	r3, [r3, fp, lsl #2]
   204ac:	str	r2, [sp, #64]	; 0x40
   204b0:	beq	205b0 <__assert_fail@plt+0xebf4>
   204b4:	add	r1, r1, #4
   204b8:	add	r0, sp, #60	; 0x3c
   204bc:	str	r3, [sp, #36]	; 0x24
   204c0:	bl	1df04 <__assert_fail@plt+0xc548>
   204c4:	ldr	r3, [sp, #36]	; 0x24
   204c8:	cmp	r0, #0
   204cc:	str	r0, [sp, #44]	; 0x2c
   204d0:	beq	205b0 <__assert_fail@plt+0xebf4>
   204d4:	ldr	r0, [sp, #68]	; 0x44
   204d8:	bl	1a30c <__assert_fail@plt+0x8950>
   204dc:	ldr	r3, [sp, #44]	; 0x2c
   204e0:	cmp	r3, #0
   204e4:	str	r3, [sp, #40]	; 0x28
   204e8:	bne	20418 <__assert_fail@plt+0xea5c>
   204ec:	ldr	r3, [sp, #52]	; 0x34
   204f0:	add	r6, r5, #1
   204f4:	cmp	r3, #0
   204f8:	beq	20544 <__assert_fail@plt+0xeb88>
   204fc:	ldr	r3, [sp, #120]	; 0x78
   20500:	ldr	r2, [sp, #16]
   20504:	add	r1, sp, #48	; 0x30
   20508:	mov	r0, sl
   2050c:	bl	1fc80 <__assert_fail@plt+0xe2c4>
   20510:	cmp	r0, #0
   20514:	str	r0, [sp, #40]	; 0x28
   20518:	bne	20418 <__assert_fail@plt+0xea5c>
   2051c:	ldr	r3, [sp, #120]	; 0x78
   20520:	mov	r2, r6
   20524:	str	r3, [sp]
   20528:	add	r1, sp, #48	; 0x30
   2052c:	ldr	r3, [sp, #16]
   20530:	mov	r0, r4
   20534:	bl	1ffc0 <__assert_fail@plt+0xe604>
   20538:	cmp	r0, #0
   2053c:	str	r0, [sp, #40]	; 0x28
   20540:	bne	20418 <__assert_fail@plt+0xea5c>
   20544:	ldr	r2, [r4, #88]	; 0x58
   20548:	mov	r1, r5
   2054c:	mov	r0, r4
   20550:	bl	1e250 <__assert_fail@plt+0xc894>
   20554:	add	r2, sp, #48	; 0x30
   20558:	mov	r1, sl
   2055c:	mov	r3, r0
   20560:	add	r0, sp, #40	; 0x28
   20564:	bl	1d4c4 <__assert_fail@plt+0xbb08>
   20568:	subs	r6, r0, #0
   2056c:	bne	2057c <__assert_fail@plt+0xebc0>
   20570:	ldr	r3, [sp, #40]	; 0x28
   20574:	cmp	r3, #0
   20578:	bne	20418 <__assert_fail@plt+0xea5c>
   2057c:	ldr	r3, [r4, #100]	; 0x64
   20580:	ldr	r2, [sp, #24]
   20584:	cmp	r6, #0
   20588:	add	r5, r5, #1
   2058c:	str	r6, [r3, r2]
   20590:	ldreq	r3, [sp, #12]
   20594:	movne	r3, #0
   20598:	addeq	r3, r3, #1
   2059c:	str	r3, [sp, #12]
   205a0:	ldr	r3, [sp, #24]
   205a4:	add	r3, r3, #4
   205a8:	str	r3, [sp, #24]
   205ac:	b	20378 <__assert_fail@plt+0xe9bc>
   205b0:	mov	r1, r3
   205b4:	add	r0, sp, #60	; 0x3c
   205b8:	bl	1dafc <__assert_fail@plt+0xc140>
   205bc:	cmp	r0, #0
   205c0:	bne	205d4 <__assert_fail@plt+0xec18>
   205c4:	ldr	r0, [sp, #68]	; 0x44
   205c8:	bl	1a30c <__assert_fail@plt+0x8950>
   205cc:	mov	r3, #12
   205d0:	b	204e0 <__assert_fail@plt+0xeb24>
   205d4:	ldr	r3, [r4, #100]	; 0x64
   205d8:	add	r2, sp, #60	; 0x3c
   205dc:	mov	r1, r9
   205e0:	add	r0, sp, #44	; 0x2c
   205e4:	str	r3, [sp, #36]	; 0x24
   205e8:	bl	1fd78 <__assert_fail@plt+0xe3bc>
   205ec:	ldr	r3, [sp, #36]	; 0x24
   205f0:	str	r0, [r3, r8, lsl #2]
   205f4:	ldr	r3, [r4, #100]	; 0x64
   205f8:	ldr	r3, [r3, r8, lsl #2]
   205fc:	cmp	r3, #0
   20600:	beq	20620 <__assert_fail@plt+0xec64>
   20604:	ldr	r3, [r9, #12]
   20608:	add	r0, sp, #48	; 0x30
   2060c:	ldr	r1, [r3, fp, lsl #2]
   20610:	bl	1dafc <__assert_fail@plt+0xc140>
   20614:	cmp	r0, #0
   20618:	bne	20468 <__assert_fail@plt+0xeaac>
   2061c:	b	205c4 <__assert_fail@plt+0xec08>
   20620:	ldr	r3, [sp, #44]	; 0x2c
   20624:	cmp	r3, #0
   20628:	beq	20604 <__assert_fail@plt+0xec48>
   2062c:	b	204d4 <__assert_fail@plt+0xeb18>
   20630:	cmp	r0, #0
   20634:	bne	20604 <__assert_fail@plt+0xec48>
   20638:	b	2044c <__assert_fail@plt+0xea90>
   2063c:	ldr	r3, [r4, #120]	; 0x78
   20640:	ldr	r2, [sp, #12]
   20644:	cmp	r2, r3
   20648:	bgt	20384 <__assert_fail@plt+0xe9c8>
   2064c:	mov	r3, #0
   20650:	str	r3, [sp, #52]	; 0x34
   20654:	ldr	r2, [sp, #24]
   20658:	ldr	r3, [r4, #100]	; 0x64
   2065c:	ldr	r1, [r3, r2]
   20660:	cmp	r1, #0
   20664:	beq	206c4 <__assert_fail@plt+0xed08>
   20668:	add	r1, r1, #4
   2066c:	add	r0, sp, #48	; 0x30
   20670:	bl	1df04 <__assert_fail@plt+0xc548>
   20674:	cmp	r0, #0
   20678:	str	r0, [sp, #40]	; 0x28
   2067c:	bne	20418 <__assert_fail@plt+0xea5c>
   20680:	cmp	r6, #0
   20684:	beq	204ec <__assert_fail@plt+0xeb30>
   20688:	ldr	r9, [r4, #84]	; 0x54
   2068c:	mov	r3, #0
   20690:	str	r3, [sp, #44]	; 0x2c
   20694:	str	r3, [sp, #60]	; 0x3c
   20698:	str	r3, [sp, #64]	; 0x40
   2069c:	str	r3, [sp, #68]	; 0x44
   206a0:	str	r3, [sp, #20]
   206a4:	ldr	r2, [sp, #20]
   206a8:	ldr	r3, [r6, #20]
   206ac:	cmp	r2, r3
   206b0:	blt	20428 <__assert_fail@plt+0xea6c>
   206b4:	ldr	r0, [sp, #68]	; 0x44
   206b8:	bl	1a30c <__assert_fail@plt+0x8950>
   206bc:	mov	r3, #0
   206c0:	b	204e0 <__assert_fail@plt+0xeb24>
   206c4:	cmp	r6, #0
   206c8:	bne	20688 <__assert_fail@plt+0xeccc>
   206cc:	b	20544 <__assert_fail@plt+0xeb88>
   206d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   206d4:	sub	sp, sp, #20
   206d8:	mov	r8, r2
   206dc:	ldr	r5, [sp, #56]	; 0x38
   206e0:	mov	sl, r3
   206e4:	mov	r3, #8
   206e8:	str	r3, [sp, #8]
   206ec:	str	r5, [sp, #4]
   206f0:	str	sl, [sp]
   206f4:	mov	r7, r1
   206f8:	ldm	r2, {r2, r3}
   206fc:	add	r1, r8, #8
   20700:	mov	r4, r0
   20704:	bl	201c4 <__assert_fail@plt+0xe808>
   20708:	subs	fp, r0, #0
   2070c:	bne	2074c <__assert_fail@plt+0xed90>
   20710:	ldr	r3, [r4, #112]	; 0x70
   20714:	ldr	r2, [r4, #108]	; 0x6c
   20718:	ldr	r9, [r7]
   2071c:	cmp	r2, r3
   20720:	ldr	r6, [r8, #4]
   20724:	blt	20784 <__assert_fail@plt+0xedc8>
   20728:	mov	r1, #48	; 0x30
   2072c:	ldr	r0, [r4, #116]	; 0x74
   20730:	mul	r1, r1, r3
   20734:	bl	1a484 <__assert_fail@plt+0x8ac8>
   20738:	subs	r3, r0, #0
   2073c:	bne	20758 <__assert_fail@plt+0xed9c>
   20740:	ldr	r0, [r4, #116]	; 0x74
   20744:	bl	1a30c <__assert_fail@plt+0x8950>
   20748:	mov	fp, #12
   2074c:	mov	r0, fp
   20750:	add	sp, sp, #20
   20754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20758:	ldr	r2, [r4, #112]	; 0x70
   2075c:	ldr	ip, [r4, #108]	; 0x6c
   20760:	mov	r0, #24
   20764:	str	r3, [r4, #116]	; 0x74
   20768:	mul	r2, r0, r2
   2076c:	mov	r1, fp
   20770:	mla	r0, r0, ip, r3
   20774:	bl	11818 <memset@plt>
   20778:	ldr	r3, [r4, #112]	; 0x70
   2077c:	lsl	r3, r3, #1
   20780:	str	r3, [r4, #112]	; 0x70
   20784:	ldr	r3, [r4, #108]	; 0x6c
   20788:	cmp	r3, #0
   2078c:	ble	207b4 <__assert_fail@plt+0xedf8>
   20790:	mov	r2, #24
   20794:	ldr	r1, [r4, #116]	; 0x74
   20798:	mul	r2, r2, r3
   2079c:	sub	r2, r2, #24
   207a0:	add	r2, r1, r2
   207a4:	ldr	r1, [r2, #4]
   207a8:	cmp	r5, r1
   207ac:	moveq	r1, #1
   207b0:	strbeq	r1, [r2, #20]
   207b4:	mov	r1, #24
   207b8:	ldr	r0, [r4, #116]	; 0x74
   207bc:	mul	r1, r1, r3
   207c0:	cmp	r9, r6
   207c4:	add	r2, r0, r1
   207c8:	str	sl, [r0, r1]
   207cc:	add	r3, r3, #1
   207d0:	movne	r1, #0
   207d4:	mvneq	r1, #0
   207d8:	stmib	r2, {r5, r9}
   207dc:	str	r6, [r2, #12]
   207e0:	str	r1, [r2, #16]
   207e4:	str	r3, [r4, #108]	; 0x6c
   207e8:	mov	r3, #0
   207ec:	strb	r3, [r2, #20]
   207f0:	ldr	r3, [r4, #120]	; 0x78
   207f4:	sub	r6, r6, r9
   207f8:	ldr	r1, [r8, #4]
   207fc:	cmp	r3, r6
   20800:	add	r5, r5, r1
   20804:	strlt	r6, [r4, #120]	; 0x78
   20808:	ldr	r1, [r7]
   2080c:	mov	r0, r4
   20810:	sub	r1, r5, r1
   20814:	add	sp, sp, #20
   20818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2081c:	b	1c148 <__assert_fail@plt+0xa78c>
   20820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20824:	sub	sp, sp, #84	; 0x54
   20828:	ldr	sl, [r0, #40]	; 0x28
   2082c:	ldr	fp, [r0, #84]	; 0x54
   20830:	mov	r4, r0
   20834:	lsl	r3, sl, #2
   20838:	str	r3, [sp, #44]	; 0x2c
   2083c:	mov	r3, #0
   20840:	str	r1, [sp, #56]	; 0x38
   20844:	str	r3, [sp, #24]
   20848:	ldr	r3, [sp, #56]	; 0x38
   2084c:	ldr	r2, [sp, #24]
   20850:	ldr	r3, [r3, #4]
   20854:	cmp	r2, r3
   20858:	movge	r3, #0
   2085c:	strge	r3, [sp, #64]	; 0x40
   20860:	bge	20e1c <__assert_fail@plt+0xf460>
   20864:	ldr	r3, [sp, #56]	; 0x38
   20868:	ldr	r2, [sp, #24]
   2086c:	ldr	r3, [r3, #8]
   20870:	ldr	r3, [r3, r2, lsl #2]
   20874:	str	r3, [sp, #20]
   20878:	ldr	r2, [sp, #20]
   2087c:	ldr	r3, [fp]
   20880:	add	r3, r3, r2, lsl #3
   20884:	ldrb	r2, [r3, #4]
   20888:	cmp	r2, #4
   2088c:	beq	2089c <__assert_fail@plt+0xeee0>
   20890:	ldr	r3, [sp, #24]
   20894:	add	r3, r3, #1
   20898:	b	20844 <__assert_fail@plt+0xee88>
   2089c:	ldr	r5, [r3, #4]
   208a0:	ldr	r3, [pc, #1444]	; 20e4c <__assert_fail@plt+0xf490>
   208a4:	tst	r5, r3
   208a8:	beq	20904 <__assert_fail@plt+0xef48>
   208ac:	ldr	r2, [r4, #88]	; 0x58
   208b0:	mov	r1, sl
   208b4:	mov	r0, r4
   208b8:	bl	1e250 <__assert_fail@plt+0xc894>
   208bc:	ldr	r3, [pc, #1420]	; 20e50 <__assert_fail@plt+0xf494>
   208c0:	and	r3, r3, r5, lsr #8
   208c4:	tst	r3, #4
   208c8:	beq	208d4 <__assert_fail@plt+0xef18>
   208cc:	tst	r0, #1
   208d0:	beq	20890 <__assert_fail@plt+0xeed4>
   208d4:	tst	r3, #8
   208d8:	beq	208e4 <__assert_fail@plt+0xef28>
   208dc:	tst	r0, #1
   208e0:	bne	20890 <__assert_fail@plt+0xeed4>
   208e4:	tst	r3, #32
   208e8:	beq	208f4 <__assert_fail@plt+0xef38>
   208ec:	tst	r0, #2
   208f0:	beq	20890 <__assert_fail@plt+0xeed4>
   208f4:	tst	r3, #128	; 0x80
   208f8:	beq	20904 <__assert_fail@plt+0xef48>
   208fc:	tst	r0, #8
   20900:	beq	20890 <__assert_fail@plt+0xeed4>
   20904:	ldr	r3, [r4, #108]	; 0x6c
   20908:	mov	r1, sl
   2090c:	mov	r0, r4
   20910:	str	r3, [sp, #28]
   20914:	bl	1aac8 <__assert_fail@plt+0x910c>
   20918:	cmn	r0, #1
   2091c:	beq	209cc <__assert_fail@plt+0xf010>
   20920:	mov	r3, #24
   20924:	mul	r0, r3, r0
   20928:	add	r3, r0, r3
   2092c:	ldr	r0, [r4, #116]	; 0x74
   20930:	add	r0, r0, r3
   20934:	ldr	r3, [r0, #-24]	; 0xffffffe8
   20938:	ldr	r2, [sp, #20]
   2093c:	cmp	r2, r3
   20940:	bne	209bc <__assert_fail@plt+0xf000>
   20944:	mov	r0, #0
   20948:	cmp	r0, #0
   2094c:	str	r0, [sp, #64]	; 0x40
   20950:	bne	20e1c <__assert_fail@plt+0xf460>
   20954:	ldr	r3, [sp, #20]
   20958:	ldr	r2, [sp, #20]
   2095c:	mov	r7, #24
   20960:	lsl	r3, r3, #2
   20964:	str	r3, [sp, #32]
   20968:	mov	r3, #12
   2096c:	str	r0, [sp, #48]	; 0x30
   20970:	mul	r3, r3, r2
   20974:	str	r3, [sp, #40]	; 0x28
   20978:	ldr	r3, [sp, #28]
   2097c:	mul	r7, r7, r3
   20980:	ldr	r3, [r4, #108]	; 0x6c
   20984:	ldr	r2, [sp, #28]
   20988:	cmp	r2, r3
   2098c:	bge	20890 <__assert_fail@plt+0xeed4>
   20990:	ldr	r2, [r4, #116]	; 0x74
   20994:	ldr	r1, [sp, #20]
   20998:	add	r3, r2, r7
   2099c:	ldr	r2, [r2, r7]
   209a0:	cmp	r1, r2
   209a4:	beq	20cdc <__assert_fail@plt+0xf320>
   209a8:	ldr	r3, [sp, #28]
   209ac:	add	r7, r7, #24
   209b0:	add	r3, r3, #1
   209b4:	str	r3, [sp, #28]
   209b8:	b	20980 <__assert_fail@plt+0xefc4>
   209bc:	add	r0, r0, #24
   209c0:	ldrb	r3, [r0, #-28]	; 0xffffffe4
   209c4:	cmp	r3, #0
   209c8:	bne	20934 <__assert_fail@plt+0xef78>
   209cc:	ldr	r3, [r4, #84]	; 0x54
   209d0:	ldr	r2, [sp, #20]
   209d4:	str	r3, [sp, #40]	; 0x28
   209d8:	ldr	r3, [r3]
   209dc:	ldr	r8, [r4, #4]
   209e0:	ldr	r3, [r3, r2, lsl #3]
   209e4:	str	r3, [sp, #48]	; 0x30
   209e8:	mov	r3, #0
   209ec:	str	r3, [sp, #32]
   209f0:	ldr	r2, [sp, #32]
   209f4:	ldr	r3, [r4, #124]	; 0x7c
   209f8:	cmp	r2, r3
   209fc:	bge	20944 <__assert_fail@plt+0xef88>
   20a00:	ldr	r3, [r4, #132]	; 0x84
   20a04:	ldr	r2, [sp, #32]
   20a08:	ldr	r5, [r3, r2, lsl #2]
   20a0c:	ldr	r3, [sp, #40]	; 0x28
   20a10:	ldr	r2, [r5, #4]
   20a14:	ldr	r3, [r3]
   20a18:	ldr	r3, [r3, r2, lsl #3]
   20a1c:	ldr	r2, [sp, #48]	; 0x30
   20a20:	cmp	r2, r3
   20a24:	moveq	r7, sl
   20a28:	ldreq	r6, [r5]
   20a2c:	moveq	r9, #0
   20a30:	beq	20a90 <__assert_fail@plt+0xf0d4>
   20a34:	ldr	r3, [sp, #32]
   20a38:	add	r3, r3, #1
   20a3c:	b	209ec <__assert_fail@plt+0xf030>
   20a40:	ldr	r3, [r5, #20]
   20a44:	ldr	r3, [r3, r9, lsl #2]
   20a48:	str	r3, [sp, #52]	; 0x34
   20a4c:	ldr	r3, [r3, #4]
   20a50:	str	r3, [sp, #36]	; 0x24
   20a54:	sub	r3, r3, r6
   20a58:	cmp	r3, #0
   20a5c:	bgt	20aa0 <__assert_fail@plt+0xf0e4>
   20a60:	add	r7, r7, r3
   20a64:	str	sl, [sp]
   20a68:	ldr	r3, [sp, #20]
   20a6c:	ldr	r2, [sp, #52]	; 0x34
   20a70:	mov	r1, r5
   20a74:	mov	r0, r4
   20a78:	bl	206d0 <__assert_fail@plt+0xed14>
   20a7c:	ldr	r8, [r4, #4]
   20a80:	cmp	r0, #1
   20a84:	bhi	20948 <__assert_fail@plt+0xef8c>
   20a88:	ldr	r6, [sp, #36]	; 0x24
   20a8c:	add	r9, r9, #1
   20a90:	ldr	r3, [r5, #16]
   20a94:	cmp	r9, r3
   20a98:	blt	20a40 <__assert_fail@plt+0xf084>
   20a9c:	b	20af8 <__assert_fail@plt+0xf13c>
   20aa0:	ldr	r2, [r4, #28]
   20aa4:	add	r1, r3, r7
   20aa8:	cmp	r1, r2
   20aac:	ble	20ad8 <__assert_fail@plt+0xf11c>
   20ab0:	ldr	r2, [r4, #48]	; 0x30
   20ab4:	str	r3, [sp, #60]	; 0x3c
   20ab8:	cmp	r1, r2
   20abc:	bgt	20af8 <__assert_fail@plt+0xf13c>
   20ac0:	mov	r0, r4
   20ac4:	bl	1c148 <__assert_fail@plt+0xa78c>
   20ac8:	cmp	r0, #0
   20acc:	bne	20948 <__assert_fail@plt+0xef8c>
   20ad0:	ldr	r8, [r4, #4]
   20ad4:	ldr	r3, [sp, #60]	; 0x3c
   20ad8:	mov	r2, r3
   20adc:	add	r1, r8, r6
   20ae0:	add	r0, r8, r7
   20ae4:	str	r3, [sp, #60]	; 0x3c
   20ae8:	bl	1162c <memcmp@plt>
   20aec:	ldr	r3, [sp, #60]	; 0x3c
   20af0:	cmp	r0, #0
   20af4:	beq	20a60 <__assert_fail@plt+0xf0a4>
   20af8:	ldr	r3, [r5, #16]
   20afc:	cmp	r9, r3
   20b00:	blt	20a34 <__assert_fail@plt+0xf078>
   20b04:	cmp	r9, #0
   20b08:	addgt	r6, r6, #1
   20b0c:	lsl	r3, r6, #2
   20b10:	cmp	sl, r6
   20b14:	str	r3, [sp, #36]	; 0x24
   20b18:	blt	20a34 <__assert_fail@plt+0xf078>
   20b1c:	ldr	r3, [r5]
   20b20:	sub	r3, r6, r3
   20b24:	cmp	r3, #0
   20b28:	ble	20b78 <__assert_fail@plt+0xf1bc>
   20b2c:	ldr	r3, [r4, #28]
   20b30:	cmp	r3, r7
   20b34:	bgt	20b5c <__assert_fail@plt+0xf1a0>
   20b38:	ldr	r3, [r4, #48]	; 0x30
   20b3c:	cmp	r7, r3
   20b40:	bge	20a34 <__assert_fail@plt+0xf078>
   20b44:	add	r1, r7, #1
   20b48:	mov	r0, r4
   20b4c:	bl	1b8b4 <__assert_fail@plt+0x9ef8>
   20b50:	cmp	r0, #0
   20b54:	bne	20948 <__assert_fail@plt+0xef8c>
   20b58:	ldr	r8, [r4, #4]
   20b5c:	add	r3, r8, r6
   20b60:	ldrb	r1, [r8, r7]
   20b64:	ldrb	r3, [r3, #-1]
   20b68:	add	r2, r7, #1
   20b6c:	cmp	r1, r3
   20b70:	bne	20a34 <__assert_fail@plt+0xf078>
   20b74:	mov	r7, r2
   20b78:	ldr	r3, [r4, #100]	; 0x64
   20b7c:	ldr	r2, [sp, #36]	; 0x24
   20b80:	ldr	r2, [r3, r2]
   20b84:	cmp	r2, #0
   20b88:	movne	r3, #0
   20b8c:	ldrne	r0, [r2, #8]
   20b90:	bne	20bd8 <__assert_fail@plt+0xf21c>
   20b94:	ldr	r3, [sp, #36]	; 0x24
   20b98:	add	r6, r6, #1
   20b9c:	add	r3, r3, #4
   20ba0:	b	20b10 <__assert_fail@plt+0xf154>
   20ba4:	ldr	r1, [r2, #12]
   20ba8:	ldr	r9, [r1, r3, lsl #2]
   20bac:	ldr	r1, [sp, #40]	; 0x28
   20bb0:	ldr	r1, [r1]
   20bb4:	add	ip, r1, r9, lsl #3
   20bb8:	ldrb	ip, [ip, #4]
   20bbc:	cmp	ip, #9
   20bc0:	bne	20bd4 <__assert_fail@plt+0xf218>
   20bc4:	ldr	r1, [r1, r9, lsl #3]
   20bc8:	ldr	ip, [sp, #48]	; 0x30
   20bcc:	cmp	ip, r1
   20bd0:	beq	20be4 <__assert_fail@plt+0xf228>
   20bd4:	add	r3, r3, #1
   20bd8:	cmp	r3, r0
   20bdc:	blt	20ba4 <__assert_fail@plt+0xf1e8>
   20be0:	b	20b94 <__assert_fail@plt+0xf1d8>
   20be4:	cmn	r9, #1
   20be8:	beq	20b94 <__assert_fail@plt+0xf1d8>
   20bec:	ldr	r3, [r5, #8]
   20bf0:	cmp	r3, #0
   20bf4:	beq	20cb4 <__assert_fail@plt+0xf2f8>
   20bf8:	mov	r3, #9
   20bfc:	str	r3, [sp, #8]
   20c00:	str	r6, [sp, #4]
   20c04:	str	r9, [sp]
   20c08:	mov	r0, r4
   20c0c:	ldr	r3, [r5]
   20c10:	ldr	r2, [r5, #4]
   20c14:	ldr	r1, [r5, #8]
   20c18:	bl	201c4 <__assert_fail@plt+0xe808>
   20c1c:	cmp	r0, #1
   20c20:	beq	20b94 <__assert_fail@plt+0xf1d8>
   20c24:	cmp	r0, #0
   20c28:	bne	20948 <__assert_fail@plt+0xef8c>
   20c2c:	ldr	r8, [r5, #16]
   20c30:	ldr	r3, [r5, #12]
   20c34:	cmp	r8, r3
   20c38:	bne	20c60 <__assert_fail@plt+0xf2a4>
   20c3c:	lsl	r8, r8, #1
   20c40:	add	r8, r8, #1
   20c44:	ldr	r0, [r5, #20]
   20c48:	lsl	r1, r8, #2
   20c4c:	bl	1a484 <__assert_fail@plt+0x8ac8>
   20c50:	cmp	r0, #0
   20c54:	beq	20cd4 <__assert_fail@plt+0xf318>
   20c58:	str	r0, [r5, #20]
   20c5c:	str	r8, [r5, #12]
   20c60:	mov	r1, #20
   20c64:	mov	r0, #1
   20c68:	bl	1a0b0 <__assert_fail@plt+0x86f4>
   20c6c:	subs	r2, r0, #0
   20c70:	beq	20cd4 <__assert_fail@plt+0xf318>
   20c74:	ldr	r3, [r5, #16]
   20c78:	ldr	r1, [r5, #20]
   20c7c:	mov	r0, r4
   20c80:	str	r2, [r1, r3, lsl #2]
   20c84:	add	r3, r3, #1
   20c88:	str	r9, [r2]
   20c8c:	str	r6, [r2, #4]
   20c90:	mov	r1, r5
   20c94:	str	r3, [r5, #16]
   20c98:	str	sl, [sp]
   20c9c:	ldr	r3, [sp, #20]
   20ca0:	bl	206d0 <__assert_fail@plt+0xed14>
   20ca4:	ldr	r8, [r4, #4]
   20ca8:	cmp	r0, #1
   20cac:	bls	20b94 <__assert_fail@plt+0xf1d8>
   20cb0:	b	20948 <__assert_fail@plt+0xef8c>
   20cb4:	ldr	r1, [r5]
   20cb8:	mov	r0, #12
   20cbc:	sub	r1, r6, r1
   20cc0:	add	r1, r1, #1
   20cc4:	bl	1a0b0 <__assert_fail@plt+0x86f4>
   20cc8:	cmp	r0, #0
   20ccc:	str	r0, [r5, #8]
   20cd0:	bne	20bf8 <__assert_fail@plt+0xf23c>
   20cd4:	mov	r0, #12
   20cd8:	b	20948 <__assert_fail@plt+0xef8c>
   20cdc:	ldr	r2, [r3, #4]
   20ce0:	cmp	sl, r2
   20ce4:	bne	209a8 <__assert_fail@plt+0xefec>
   20ce8:	ldr	r5, [r3, #12]
   20cec:	ldr	r3, [r3, #8]
   20cf0:	mov	r0, r4
   20cf4:	subs	r2, r5, r3
   20cf8:	str	r2, [sp, #36]	; 0x24
   20cfc:	ldreq	r1, [sp, #40]	; 0x28
   20d00:	ldreq	r2, [fp, #20]
   20d04:	ldrne	r2, [fp, #12]
   20d08:	addeq	r2, r2, r1
   20d0c:	ldrne	r1, [sp, #32]
   20d10:	ldreq	r2, [r2, #8]
   20d14:	add	r5, sl, r5
   20d18:	ldrne	r6, [r2, r1]
   20d1c:	ldreq	r6, [r2]
   20d20:	mov	r1, #12
   20d24:	ldr	r2, [fp, #24]
   20d28:	sub	r5, r5, r3
   20d2c:	mla	r6, r1, r6, r2
   20d30:	ldr	r2, [r4, #88]	; 0x58
   20d34:	sub	r1, r5, #1
   20d38:	bl	1e250 <__assert_fail@plt+0xc894>
   20d3c:	ldr	r8, [r4, #100]	; 0x64
   20d40:	ldr	r2, [sp, #44]	; 0x2c
   20d44:	ldr	r1, [r8, r5, lsl #2]
   20d48:	ldr	r2, [r8, r2]
   20d4c:	cmp	r2, #0
   20d50:	ldrne	r9, [r2, #8]
   20d54:	ldreq	r9, [sp, #48]	; 0x30
   20d58:	cmp	r1, #0
   20d5c:	mov	r3, r0
   20d60:	bne	20df0 <__assert_fail@plt+0xf434>
   20d64:	mov	r2, r6
   20d68:	mov	r1, fp
   20d6c:	add	r0, sp, #64	; 0x40
   20d70:	bl	1d4c4 <__assert_fail@plt+0xbb08>
   20d74:	str	r0, [r8, r5, lsl #2]
   20d78:	ldr	r3, [r4, #100]	; 0x64
   20d7c:	ldr	r3, [r3, r5, lsl #2]
   20d80:	cmp	r3, #0
   20d84:	bne	20d94 <__assert_fail@plt+0xf3d8>
   20d88:	ldr	r3, [sp, #64]	; 0x40
   20d8c:	cmp	r3, #0
   20d90:	bne	20e1c <__assert_fail@plt+0xf460>
   20d94:	ldr	r3, [sp, #36]	; 0x24
   20d98:	cmp	r3, #0
   20d9c:	bne	209a8 <__assert_fail@plt+0xefec>
   20da0:	ldr	r3, [r4, #100]	; 0x64
   20da4:	ldr	r2, [sp, #44]	; 0x2c
   20da8:	ldr	r3, [r3, r2]
   20dac:	ldr	r3, [r3, #8]
   20db0:	cmp	r9, r3
   20db4:	bge	209a8 <__assert_fail@plt+0xefec>
   20db8:	mov	r2, sl
   20dbc:	mov	r1, r6
   20dc0:	mov	r0, r4
   20dc4:	bl	1c044 <__assert_fail@plt+0xa688>
   20dc8:	cmp	r0, #0
   20dcc:	str	r0, [sp, #64]	; 0x40
   20dd0:	bne	20e1c <__assert_fail@plt+0xf460>
   20dd4:	mov	r1, r6
   20dd8:	mov	r0, r4
   20ddc:	bl	20820 <__assert_fail@plt+0xee64>
   20de0:	cmp	r0, #0
   20de4:	str	r0, [sp, #64]	; 0x40
   20de8:	beq	209a8 <__assert_fail@plt+0xefec>
   20dec:	b	20e1c <__assert_fail@plt+0xf460>
   20df0:	str	r0, [sp, #52]	; 0x34
   20df4:	mov	r2, r6
   20df8:	ldr	r1, [r1, #40]	; 0x28
   20dfc:	add	r0, sp, #68	; 0x44
   20e00:	bl	1d38c <__assert_fail@plt+0xb9d0>
   20e04:	ldr	r3, [sp, #52]	; 0x34
   20e08:	cmp	r0, #0
   20e0c:	str	r0, [sp, #64]	; 0x40
   20e10:	beq	20e28 <__assert_fail@plt+0xf46c>
   20e14:	ldr	r0, [sp, #76]	; 0x4c
   20e18:	bl	1a30c <__assert_fail@plt+0x8950>
   20e1c:	ldr	r0, [sp, #64]	; 0x40
   20e20:	add	sp, sp, #84	; 0x54
   20e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e28:	add	r2, sp, #68	; 0x44
   20e2c:	mov	r1, fp
   20e30:	add	r0, sp, #64	; 0x40
   20e34:	ldr	r8, [r4, #100]	; 0x64
   20e38:	bl	1d4c4 <__assert_fail@plt+0xbb08>
   20e3c:	str	r0, [r8, r5, lsl #2]
   20e40:	ldr	r0, [sp, #76]	; 0x4c
   20e44:	bl	1a30c <__assert_fail@plt+0x8950>
   20e48:	b	20d78 <__assert_fail@plt+0xf3bc>
   20e4c:	andeq	pc, r3, r0, lsl #30
   20e50:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   20e54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e58:	mov	r8, r0
   20e5c:	ldr	r3, [r1, #104]	; 0x68
   20e60:	ldr	r6, [r1, #40]	; 0x28
   20e64:	ldr	sl, [r1, #84]	; 0x54
   20e68:	cmp	r6, r3
   20e6c:	ldr	r3, [r1, #100]	; 0x64
   20e70:	sub	sp, sp, #20
   20e74:	mov	r5, r1
   20e78:	strgt	r2, [r3, r6, lsl #2]
   20e7c:	mov	r4, r2
   20e80:	strgt	r6, [r1, #104]	; 0x68
   20e84:	bgt	20f24 <__assert_fail@plt+0xf568>
   20e88:	ldr	r2, [r3, r6, lsl #2]
   20e8c:	cmp	r2, #0
   20e90:	streq	r4, [r3, r6, lsl #2]
   20e94:	beq	20f24 <__assert_fail@plt+0xf568>
   20e98:	cmp	r4, #0
   20e9c:	ldr	r2, [r2, #40]	; 0x28
   20ea0:	add	r7, sp, #4
   20ea4:	beq	20ed4 <__assert_fail@plt+0xf518>
   20ea8:	ldr	r9, [r4, #40]	; 0x28
   20eac:	mov	r0, r7
   20eb0:	mov	r1, r9
   20eb4:	bl	1d38c <__assert_fail@plt+0xb9d0>
   20eb8:	cmp	r0, #0
   20ebc:	str	r0, [r8]
   20ec0:	beq	20ee0 <__assert_fail@plt+0xf524>
   20ec4:	mov	r4, #0
   20ec8:	mov	r0, r4
   20ecc:	add	sp, sp, #20
   20ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ed4:	ldm	r2, {r0, r1, r2}
   20ed8:	mov	r9, r4
   20edc:	stm	r7, {r0, r1, r2}
   20ee0:	mov	r0, r5
   20ee4:	ldr	r1, [r5, #40]	; 0x28
   20ee8:	ldr	r2, [r5, #88]	; 0x58
   20eec:	sub	r1, r1, #1
   20ef0:	bl	1e250 <__assert_fail@plt+0xc894>
   20ef4:	mov	r2, r7
   20ef8:	mov	r1, sl
   20efc:	ldr	fp, [r5, #100]	; 0x64
   20f00:	mov	r3, r0
   20f04:	mov	r0, r8
   20f08:	bl	1d4c4 <__assert_fail@plt+0xbb08>
   20f0c:	cmp	r9, #0
   20f10:	mov	r4, r0
   20f14:	str	r0, [fp, r6, lsl #2]
   20f18:	beq	20f24 <__assert_fail@plt+0xf568>
   20f1c:	ldr	r0, [sp, #12]
   20f20:	bl	1a30c <__assert_fail@plt+0x8950>
   20f24:	ldr	r3, [sl, #76]	; 0x4c
   20f28:	cmp	r3, #0
   20f2c:	beq	20ec8 <__assert_fail@plt+0xf50c>
   20f30:	cmp	r4, #0
   20f34:	beq	20ec4 <__assert_fail@plt+0xf508>
   20f38:	add	r7, r4, #4
   20f3c:	mov	r2, r6
   20f40:	mov	r1, r7
   20f44:	mov	r0, r5
   20f48:	bl	1c044 <__assert_fail@plt+0xa688>
   20f4c:	cmp	r0, #0
   20f50:	str	r0, [r8]
   20f54:	bne	20ec4 <__assert_fail@plt+0xf508>
   20f58:	ldrb	r3, [r4, #52]	; 0x34
   20f5c:	tst	r3, #64	; 0x40
   20f60:	beq	20ec8 <__assert_fail@plt+0xf50c>
   20f64:	mov	r1, r7
   20f68:	mov	r0, r5
   20f6c:	bl	20820 <__assert_fail@plt+0xee64>
   20f70:	cmp	r0, #0
   20f74:	str	r0, [r8]
   20f78:	bne	20ec4 <__assert_fail@plt+0xf508>
   20f7c:	ldr	r3, [r5, #100]	; 0x64
   20f80:	ldr	r4, [r3, r6, lsl #2]
   20f84:	b	20ec8 <__assert_fail@plt+0xf50c>
   20f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f8c:	sub	sp, sp, #92	; 0x5c
   20f90:	mov	r4, r3
   20f94:	mov	r3, #0
   20f98:	str	r3, [sp, #56]	; 0x38
   20f9c:	lsl	r3, r2, #2
   20fa0:	str	r3, [sp, #32]
   20fa4:	ldr	r3, [r0, #100]	; 0x64
   20fa8:	mov	fp, r2
   20fac:	ldr	r7, [r0, #84]	; 0x54
   20fb0:	ldr	r3, [r3, r2, lsl #2]
   20fb4:	mov	r6, r0
   20fb8:	cmp	r3, #0
   20fbc:	addne	r3, r3, #4
   20fc0:	str	r3, [sp, #8]
   20fc4:	ldr	r3, [r4, #4]
   20fc8:	mov	r5, r1
   20fcc:	cmp	r3, #0
   20fd0:	ldreq	r2, [r1]
   20fd4:	streq	r3, [r2, fp, lsl #2]
   20fd8:	beq	212dc <__assert_fail@plt+0xf920>
   20fdc:	ldr	r3, [sp, #8]
   20fe0:	cmp	r3, #0
   20fe4:	bne	21018 <__assert_fail@plt+0xf65c>
   20fe8:	mov	r2, r4
   20fec:	mov	r1, r7
   20ff0:	add	r0, sp, #56	; 0x38
   20ff4:	ldr	r8, [r5]
   20ff8:	bl	1fd78 <__assert_fail@plt+0xe3bc>
   20ffc:	ldr	r3, [sp, #56]	; 0x38
   21000:	cmp	r3, #0
   21004:	str	r0, [r8, fp, lsl #2]
   21008:	beq	212dc <__assert_fail@plt+0xf920>
   2100c:	mov	r0, r3
   21010:	add	sp, sp, #92	; 0x5c
   21014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21018:	add	r0, sp, #88	; 0x58
   2101c:	mov	r3, #0
   21020:	str	r3, [r0, #-28]!	; 0xffffffe4
   21024:	mov	r2, r4
   21028:	mov	r1, r7
   2102c:	bl	1fd78 <__assert_fail@plt+0xe3bc>
   21030:	ldr	r8, [sp, #60]	; 0x3c
   21034:	cmp	r8, #0
   21038:	bne	21060 <__assert_fail@plt+0xf6a4>
   2103c:	mov	r9, r0
   21040:	ldr	r3, [r9, #28]!
   21044:	cmp	r3, #0
   21048:	beq	210a0 <__assert_fail@plt+0xf6e4>
   2104c:	mov	r2, r9
   21050:	ldr	r1, [sp, #8]
   21054:	mov	r0, r4
   21058:	bl	1d768 <__assert_fail@plt+0xbdac>
   2105c:	mov	r8, r0
   21060:	cmp	r8, #0
   21064:	str	r8, [sp, #56]	; 0x38
   21068:	movne	r3, r8
   2106c:	bne	2100c <__assert_fail@plt+0xf650>
   21070:	ldr	r3, [r5, #20]
   21074:	cmp	r3, #0
   21078:	strne	r8, [sp, #12]
   2107c:	ldrne	r3, [r6, #116]	; 0x74
   21080:	strne	r3, [sp, #16]
   21084:	beq	20fe8 <__assert_fail@plt+0xf62c>
   21088:	ldr	r3, [r5, #20]
   2108c:	ldr	r2, [sp, #12]
   21090:	cmp	r2, r3
   21094:	blt	21100 <__assert_fail@plt+0xf744>
   21098:	mov	r3, r8
   2109c:	b	21270 <__assert_fail@plt+0xf8b4>
   210a0:	ldr	r1, [r4, #4]
   210a4:	mov	r0, r9
   210a8:	bl	1b120 <__assert_fail@plt+0x9764>
   210ac:	cmp	r0, #0
   210b0:	str	r0, [sp, #60]	; 0x3c
   210b4:	moveq	r8, r0
   210b8:	moveq	sl, #12
   210bc:	beq	210f0 <__assert_fail@plt+0xf734>
   210c0:	mov	r8, #12
   210c4:	b	21060 <__assert_fail@plt+0xf6a4>
   210c8:	ldr	r3, [r4, #8]
   210cc:	mov	r0, r9
   210d0:	ldr	r1, [r3, r8, lsl #2]
   210d4:	ldr	r3, [r7, #28]
   210d8:	mla	r1, sl, r1, r3
   210dc:	bl	1df04 <__assert_fail@plt+0xc548>
   210e0:	cmp	r0, #0
   210e4:	str	r0, [sp, #60]	; 0x3c
   210e8:	bne	210c0 <__assert_fail@plt+0xf704>
   210ec:	add	r8, r8, #1
   210f0:	ldr	r3, [r4, #4]
   210f4:	cmp	r8, r3
   210f8:	blt	210c8 <__assert_fail@plt+0xf70c>
   210fc:	b	2104c <__assert_fail@plt+0xf690>
   21100:	ldr	r2, [sp, #12]
   21104:	ldr	r3, [r5, #24]
   21108:	ldr	r3, [r3, r2, lsl #2]
   2110c:	mov	r2, #24
   21110:	mul	r3, r2, r3
   21114:	ldr	r2, [sp, #16]
   21118:	add	r2, r2, r3
   2111c:	ldr	r1, [r2, #8]
   21120:	cmp	fp, r1
   21124:	bgt	21138 <__assert_fail@plt+0xf77c>
   21128:	ldr	r3, [sp, #12]
   2112c:	add	r3, r3, #1
   21130:	str	r3, [sp, #12]
   21134:	b	21088 <__assert_fail@plt+0xf6cc>
   21138:	ldr	r1, [r2, #4]
   2113c:	cmp	fp, r1
   21140:	bgt	21128 <__assert_fail@plt+0xf76c>
   21144:	ldr	r1, [sp, #16]
   21148:	ldr	r0, [r7]
   2114c:	ldr	r3, [r1, r3]
   21150:	ldr	r9, [r0, r3, lsl #3]
   21154:	ldr	r3, [r2, #12]
   21158:	cmp	fp, r3
   2115c:	movne	sl, #0
   21160:	bne	212a4 <__assert_fail@plt+0xf8e8>
   21164:	mvn	sl, #0
   21168:	ldr	lr, [r4, #4]
   2116c:	mov	r1, sl
   21170:	mov	r2, #0
   21174:	cmp	r2, lr
   21178:	blt	21214 <__assert_fail@plt+0xf858>
   2117c:	cmp	r1, #0
   21180:	bge	21258 <__assert_fail@plt+0xf89c>
   21184:	cmp	sl, #0
   21188:	movge	r9, #0
   2118c:	blt	21128 <__assert_fail@plt+0xf76c>
   21190:	ldr	r3, [r4, #4]
   21194:	cmp	r9, r3
   21198:	bge	21128 <__assert_fail@plt+0xf76c>
   2119c:	ldr	r3, [r4, #8]
   211a0:	ldr	r0, [r7, #28]
   211a4:	mov	r1, sl
   211a8:	ldr	r3, [r3, r9, lsl #2]
   211ac:	str	r3, [sp, #20]
   211b0:	ldr	r2, [sp, #20]
   211b4:	mov	r3, #12
   211b8:	mul	r3, r3, r2
   211bc:	add	r0, r0, r3
   211c0:	str	r3, [sp, #24]
   211c4:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   211c8:	cmp	r0, #0
   211cc:	bne	2120c <__assert_fail@plt+0xf850>
   211d0:	ldr	r3, [sp, #24]
   211d4:	ldr	r0, [r7, #24]
   211d8:	mov	r1, sl
   211dc:	add	r0, r0, r3
   211e0:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   211e4:	cmp	r0, #0
   211e8:	bne	2120c <__assert_fail@plt+0xf850>
   211ec:	ldr	r3, [sp, #8]
   211f0:	mov	r2, r4
   211f4:	ldr	r1, [sp, #20]
   211f8:	mov	r0, r7
   211fc:	bl	1d8e0 <__assert_fail@plt+0xbf24>
   21200:	subs	r3, r0, #0
   21204:	bne	21270 <__assert_fail@plt+0xf8b4>
   21208:	sub	r9, r9, #1
   2120c:	add	r9, r9, #1
   21210:	b	21190 <__assert_fail@plt+0xf7d4>
   21214:	ldr	r3, [r4, #8]
   21218:	ldr	r3, [r3, r2, lsl #2]
   2121c:	add	ip, r0, r3, lsl #3
   21220:	ldrb	ip, [ip, #4]
   21224:	cmp	ip, #8
   21228:	bne	21240 <__assert_fail@plt+0xf884>
   2122c:	ldr	ip, [r0, r3, lsl #3]
   21230:	cmp	r9, ip
   21234:	moveq	r1, r3
   21238:	add	r2, r2, #1
   2123c:	b	21174 <__assert_fail@plt+0xf7b8>
   21240:	cmp	ip, #9
   21244:	bne	21238 <__assert_fail@plt+0xf87c>
   21248:	ldr	ip, [r0, r3, lsl #3]
   2124c:	cmp	r9, ip
   21250:	moveq	sl, r3
   21254:	b	21238 <__assert_fail@plt+0xf87c>
   21258:	ldr	r3, [sp, #8]
   2125c:	mov	r2, r4
   21260:	mov	r0, r7
   21264:	bl	1d8e0 <__assert_fail@plt+0xbf24>
   21268:	subs	r3, r0, #0
   2126c:	beq	21184 <__assert_fail@plt+0xf7c8>
   21270:	cmp	r3, #0
   21274:	str	r3, [sp, #56]	; 0x38
   21278:	beq	20fe8 <__assert_fail@plt+0xf62c>
   2127c:	b	2100c <__assert_fail@plt+0xf650>
   21280:	ldr	r3, [r4, #8]
   21284:	ldr	r2, [r7]
   21288:	ldr	r1, [r3, sl, lsl #2]
   2128c:	add	r3, r2, r1, lsl #3
   21290:	ldrb	r3, [r3, #4]
   21294:	sub	r3, r3, #8
   21298:	cmp	r3, #1
   2129c:	bls	212b4 <__assert_fail@plt+0xf8f8>
   212a0:	add	sl, sl, #1
   212a4:	ldr	r3, [r4, #4]
   212a8:	cmp	sl, r3
   212ac:	blt	21280 <__assert_fail@plt+0xf8c4>
   212b0:	b	21128 <__assert_fail@plt+0xf76c>
   212b4:	ldr	r3, [r2, r1, lsl #3]
   212b8:	cmp	r9, r3
   212bc:	bne	212a0 <__assert_fail@plt+0xf8e4>
   212c0:	ldr	r3, [sp, #8]
   212c4:	mov	r2, r4
   212c8:	mov	r0, r7
   212cc:	bl	1d8e0 <__assert_fail@plt+0xbf24>
   212d0:	subs	r3, r0, #0
   212d4:	beq	212a0 <__assert_fail@plt+0xf8e4>
   212d8:	b	21270 <__assert_fail@plt+0xf8b4>
   212dc:	ldr	r3, [sp, #8]
   212e0:	cmp	r3, #0
   212e4:	beq	214b4 <__assert_fail@plt+0xfaf8>
   212e8:	ldr	r3, [r6, #100]	; 0x64
   212ec:	ldr	r3, [r3, fp, lsl #2]
   212f0:	ldrb	r3, [r3, #52]	; 0x34
   212f4:	ands	r3, r3, #64	; 0x40
   212f8:	beq	2100c <__assert_fail@plt+0xf650>
   212fc:	mov	r1, fp
   21300:	mov	r0, r6
   21304:	bl	1aac8 <__assert_fail@plt+0x910c>
   21308:	mov	sl, #0
   2130c:	cmn	r0, #1
   21310:	mov	r3, r0
   21314:	str	r0, [sp, #16]
   21318:	moveq	r3, sl
   2131c:	beq	2100c <__assert_fail@plt+0xf650>
   21320:	mov	r3, #24
   21324:	add	r9, sp, #88	; 0x58
   21328:	mul	r3, r3, r0
   2132c:	ldr	r8, [r6, #84]	; 0x54
   21330:	str	sl, [r9, #-28]!	; 0xffffffe4
   21334:	str	r3, [sp, #36]	; 0x24
   21338:	add	r3, r9, #16
   2133c:	str	r3, [sp, #28]
   21340:	ldr	r3, [sp, #8]
   21344:	ldr	r3, [r3, #4]
   21348:	cmp	sl, r3
   2134c:	movge	r3, #0
   21350:	bge	2149c <__assert_fail@plt+0xfae0>
   21354:	ldr	r3, [sp, #8]
   21358:	ldr	r2, [r5, #8]
   2135c:	ldr	r3, [r3, #8]
   21360:	ldr	r7, [r3, sl, lsl #2]
   21364:	ldr	r3, [r8]
   21368:	cmp	r7, r2
   2136c:	add	r3, r3, r7, lsl #3
   21370:	ldrb	r3, [r3, #4]
   21374:	bne	2138c <__assert_fail@plt+0xf9d0>
   21378:	ldr	r2, [r5, #12]
   2137c:	cmp	fp, r2
   21380:	bne	2138c <__assert_fail@plt+0xf9d0>
   21384:	add	sl, sl, #1
   21388:	b	21340 <__assert_fail@plt+0xf984>
   2138c:	cmp	r3, #4
   21390:	bne	21384 <__assert_fail@plt+0xf9c8>
   21394:	ldr	r3, [sp, #36]	; 0x24
   21398:	ldr	r4, [r6, #116]	; 0x74
   2139c:	add	r4, r4, r3
   213a0:	mov	r3, #12
   213a4:	mul	r3, r3, r7
   213a8:	str	r3, [sp, #44]	; 0x2c
   213ac:	lsl	r3, r7, #2
   213b0:	str	r3, [sp, #40]	; 0x28
   213b4:	ldr	r3, [sp, #36]	; 0x24
   213b8:	str	r3, [sp, #20]
   213bc:	ldr	r3, [sp, #16]
   213c0:	str	r3, [sp, #12]
   213c4:	add	r3, r5, #16
   213c8:	str	r3, [sp, #24]
   213cc:	ldr	r3, [r4]
   213d0:	cmp	r7, r3
   213d4:	bne	2154c <__assert_fail@plt+0xfb90>
   213d8:	ldr	r2, [r4, #8]
   213dc:	ldr	r3, [r4, #12]
   213e0:	sub	r3, r3, r2
   213e4:	cmp	r3, #0
   213e8:	add	r2, fp, r3
   213ec:	ldreq	r1, [sp, #44]	; 0x2c
   213f0:	ldreq	r3, [r8, #20]
   213f4:	ldrne	r1, [sp, #40]	; 0x28
   213f8:	addeq	r3, r3, r1
   213fc:	ldrne	r3, [r8, #12]
   21400:	ldreq	r3, [r3, #8]
   21404:	ldrne	r3, [r3, r1]
   21408:	ldr	r1, [r5, #12]
   2140c:	ldreq	r3, [r3]
   21410:	cmp	r2, r1
   21414:	bgt	2154c <__assert_fail@plt+0xfb90>
   21418:	ldr	r1, [r5]
   2141c:	str	r2, [sp, #52]	; 0x34
   21420:	ldr	r0, [r1, r2, lsl #2]
   21424:	cmp	r0, #0
   21428:	beq	2154c <__assert_fail@plt+0xfb90>
   2142c:	mov	r1, r3
   21430:	add	r0, r0, #4
   21434:	str	r3, [sp, #48]	; 0x30
   21438:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   2143c:	ldr	r3, [sp, #48]	; 0x30
   21440:	ldr	r2, [sp, #52]	; 0x34
   21444:	cmp	r0, #0
   21448:	beq	2154c <__assert_fail@plt+0xfb90>
   2144c:	str	r2, [sp, #4]
   21450:	str	r3, [sp]
   21454:	mov	r2, r7
   21458:	mov	r3, fp
   2145c:	ldr	r1, [sp, #24]
   21460:	mov	r0, r6
   21464:	bl	1ab38 <__assert_fail@plt+0x917c>
   21468:	cmp	r0, #0
   2146c:	bne	2154c <__assert_fail@plt+0xfb90>
   21470:	ldr	r3, [sp, #60]	; 0x3c
   21474:	cmp	r3, #0
   21478:	beq	214bc <__assert_fail@plt+0xfb00>
   2147c:	ldr	r1, [sp, #12]
   21480:	ldr	r0, [sp, #28]
   21484:	str	r7, [sp, #68]	; 0x44
   21488:	str	fp, [sp, #72]	; 0x48
   2148c:	bl	1dafc <__assert_fail@plt+0xc140>
   21490:	cmp	r0, #0
   21494:	bne	214f0 <__assert_fail@plt+0xfb34>
   21498:	mov	r3, #12
   2149c:	ldr	r2, [sp, #60]	; 0x3c
   214a0:	cmp	r2, #0
   214a4:	beq	2100c <__assert_fail@plt+0xf650>
   214a8:	ldr	r0, [sp, #84]	; 0x54
   214ac:	str	r3, [sp, #8]
   214b0:	bl	1a30c <__assert_fail@plt+0x8950>
   214b4:	ldr	r3, [sp, #8]
   214b8:	b	2100c <__assert_fail@plt+0xf650>
   214bc:	mov	lr, r5
   214c0:	add	ip, sp, #60	; 0x3c
   214c4:	ldm	lr!, {r0, r1, r2, r3}
   214c8:	stmia	ip!, {r0, r1, r2, r3}
   214cc:	ldr	r3, [sp, #24]
   214d0:	ldm	r3, {r0, r1, r2}
   214d4:	stm	ip, {r0, r1, r2}
   214d8:	mov	r1, r3
   214dc:	mov	r0, ip
   214e0:	bl	1d314 <__assert_fail@plt+0xb958>
   214e4:	subs	r3, r0, #0
   214e8:	beq	2147c <__assert_fail@plt+0xfac0>
   214ec:	b	2149c <__assert_fail@plt+0xfae0>
   214f0:	ldr	r3, [sp, #60]	; 0x3c
   214f4:	ldr	r2, [sp, #32]
   214f8:	mov	r1, r9
   214fc:	mov	r0, r6
   21500:	ldr	r4, [r3, r2]
   21504:	bl	21598 <__assert_fail@plt+0xfbdc>
   21508:	subs	r3, r0, #0
   2150c:	bne	2149c <__assert_fail@plt+0xfae0>
   21510:	ldr	r1, [r5, #4]
   21514:	cmp	r1, #0
   21518:	bne	2157c <__assert_fail@plt+0xfbc0>
   2151c:	ldr	r3, [sp, #60]	; 0x3c
   21520:	ldr	r2, [sp, #32]
   21524:	ldr	r1, [sp, #12]
   21528:	ldr	r0, [sp, #28]
   2152c:	str	r4, [r3, r2]
   21530:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   21534:	sub	r1, r0, #1
   21538:	ldr	r0, [sp, #28]
   2153c:	bl	1d1cc <__assert_fail@plt+0xb810>
   21540:	ldr	r4, [r6, #116]	; 0x74
   21544:	ldr	r3, [sp, #20]
   21548:	add	r4, r4, r3
   2154c:	ldr	r3, [sp, #12]
   21550:	add	r2, r4, #24
   21554:	add	r3, r3, #1
   21558:	str	r3, [sp, #12]
   2155c:	ldr	r3, [sp, #20]
   21560:	add	r3, r3, #24
   21564:	str	r3, [sp, #20]
   21568:	ldrb	r3, [r4, #20]
   2156c:	cmp	r3, #0
   21570:	beq	21384 <__assert_fail@plt+0xf9c8>
   21574:	mov	r4, r2
   21578:	b	213cc <__assert_fail@plt+0xfa10>
   2157c:	add	r3, fp, #1
   21580:	ldr	r2, [sp, #60]	; 0x3c
   21584:	mov	r0, r8
   21588:	bl	1ff28 <__assert_fail@plt+0xe56c>
   2158c:	subs	r3, r0, #0
   21590:	beq	2151c <__assert_fail@plt+0xfb60>
   21594:	b	2149c <__assert_fail@plt+0xfae0>
   21598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2159c:	sub	sp, sp, #52	; 0x34
   215a0:	add	r7, sp, #36	; 0x24
   215a4:	ldr	r4, [r1, #12]
   215a8:	mov	r6, r0
   215ac:	mov	r5, r1
   215b0:	mov	r0, r7
   215b4:	ldr	r1, [r1, #8]
   215b8:	bl	1b0e0 <__assert_fail@plt+0x9724>
   215bc:	subs	fp, r0, #0
   215c0:	bne	215f4 <__assert_fail@plt+0xfc38>
   215c4:	mov	r3, r7
   215c8:	mov	r2, r4
   215cc:	mov	r1, r5
   215d0:	mov	r0, r6
   215d4:	bl	20f88 <__assert_fail@plt+0xf5cc>
   215d8:	subs	fp, r0, #0
   215dc:	lsleq	r8, r4, #2
   215e0:	streq	fp, [sp, #8]
   215e4:	streq	r7, [sp, #20]
   215e8:	beq	217b8 <__assert_fail@plt+0xfdfc>
   215ec:	ldr	r0, [sp, #44]	; 0x2c
   215f0:	bl	1a30c <__assert_fail@plt+0x8950>
   215f4:	mov	r0, fp
   215f8:	add	sp, sp, #52	; 0x34
   215fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21600:	mov	r3, #0
   21604:	str	r3, [sp, #40]	; 0x28
   21608:	ldr	r3, [r6, #100]	; 0x64
   2160c:	sub	r4, r4, #1
   21610:	add	r3, r3, r8
   21614:	ldr	sl, [r3, #-4]
   21618:	cmp	sl, #0
   2161c:	bne	21648 <__assert_fail@plt+0xfc8c>
   21620:	ldr	r3, [sp, #20]
   21624:	mov	r2, r4
   21628:	mov	r1, r5
   2162c:	mov	r0, r6
   21630:	bl	20f88 <__assert_fail@plt+0xf5cc>
   21634:	sub	r8, r8, #4
   21638:	cmp	r0, #0
   2163c:	beq	217b8 <__assert_fail@plt+0xfdfc>
   21640:	mov	fp, r0
   21644:	b	215ec <__assert_fail@plt+0xfc30>
   21648:	ldr	r9, [r6, #84]	; 0x54
   2164c:	mov	r3, #0
   21650:	str	r3, [sp, #12]
   21654:	add	r3, r5, #16
   21658:	str	r3, [sp, #28]
   2165c:	ldr	r3, [sl, #20]
   21660:	ldr	r2, [sp, #12]
   21664:	cmp	r2, r3
   21668:	bge	21620 <__assert_fail@plt+0xfc64>
   2166c:	ldr	r3, [sl, #24]
   21670:	ldr	r2, [sp, #12]
   21674:	ldr	r7, [r3, r2, lsl #2]
   21678:	lsl	r3, r7, #3
   2167c:	str	r3, [sp, #16]
   21680:	ldr	r3, [r9]
   21684:	lsl	r2, r7, #3
   21688:	add	r3, r3, r2
   2168c:	ldrb	r3, [r3, #6]
   21690:	tst	r3, #16
   21694:	bne	216c8 <__assert_fail@plt+0xfd0c>
   21698:	ldr	r1, [r9]
   2169c:	lsl	r3, r7, #3
   216a0:	mov	r2, r4
   216a4:	add	r1, r1, r3
   216a8:	mov	r0, r6
   216ac:	bl	1e330 <__assert_fail@plt+0xc974>
   216b0:	cmp	r0, #0
   216b4:	bne	21788 <__assert_fail@plt+0xfdcc>
   216b8:	ldr	r3, [sp, #12]
   216bc:	add	r3, r3, #1
   216c0:	str	r3, [sp, #12]
   216c4:	b	2165c <__assert_fail@plt+0xfca0>
   216c8:	ldr	r3, [r5, #12]
   216cc:	mov	r2, r6
   216d0:	str	r3, [sp, #24]
   216d4:	ldr	r3, [r6, #84]	; 0x54
   216d8:	mov	r1, r7
   216dc:	str	r3, [sp, #16]
   216e0:	ldr	r0, [sp, #16]
   216e4:	mov	r3, r4
   216e8:	bl	1cf10 <__assert_fail@plt+0xb554>
   216ec:	subs	r3, r0, #0
   216f0:	ble	21734 <__assert_fail@plt+0xfd78>
   216f4:	ldr	r1, [sp, #24]
   216f8:	add	r2, r4, r3
   216fc:	cmp	r1, r2
   21700:	blt	21738 <__assert_fail@plt+0xfd7c>
   21704:	ldr	r1, [r5]
   21708:	str	r3, [sp, #24]
   2170c:	ldr	r0, [r1, r2, lsl #2]
   21710:	cmp	r0, #0
   21714:	beq	21698 <__assert_fail@plt+0xfcdc>
   21718:	ldr	r3, [sp, #16]
   2171c:	add	r0, r0, #4
   21720:	ldr	r2, [r3, #12]
   21724:	ldr	r1, [r2, r7, lsl #2]
   21728:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   2172c:	ldr	r3, [sp, #24]
   21730:	cmp	r0, #0
   21734:	beq	21698 <__assert_fail@plt+0xfcdc>
   21738:	ldr	r2, [r5, #20]
   2173c:	cmp	r2, #0
   21740:	beq	2176c <__assert_fail@plt+0xfdb0>
   21744:	ldr	r2, [r9, #12]
   21748:	add	r3, r4, r3
   2174c:	str	r4, [sp, #4]
   21750:	str	r7, [sp]
   21754:	ldr	r1, [sp, #28]
   21758:	ldr	r2, [r2, r7, lsl #2]
   2175c:	mov	r0, r6
   21760:	bl	1ab38 <__assert_fail@plt+0x917c>
   21764:	cmp	r0, #0
   21768:	bne	216b8 <__assert_fail@plt+0xfcfc>
   2176c:	mov	r1, r7
   21770:	ldr	r0, [sp, #20]
   21774:	bl	1dafc <__assert_fail@plt+0xc140>
   21778:	cmp	r0, #0
   2177c:	bne	216b8 <__assert_fail@plt+0xfcfc>
   21780:	mov	fp, #12
   21784:	b	215ec <__assert_fail@plt+0xfc30>
   21788:	ldr	r3, [r5]
   2178c:	ldr	r0, [r3, r8]
   21790:	cmp	r0, #0
   21794:	beq	216b8 <__assert_fail@plt+0xfcfc>
   21798:	ldr	r3, [r9, #12]
   2179c:	add	r0, r0, #4
   217a0:	ldr	r1, [r3, r7, lsl #2]
   217a4:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   217a8:	cmp	r0, #0
   217ac:	beq	216b8 <__assert_fail@plt+0xfcfc>
   217b0:	mov	r3, #1
   217b4:	b	21738 <__assert_fail@plt+0xfd7c>
   217b8:	cmp	r4, #0
   217bc:	ble	215ec <__assert_fail@plt+0xfc30>
   217c0:	ldr	r0, [r5]
   217c4:	ldr	r3, [r0, r8]
   217c8:	cmp	r3, #0
   217cc:	movne	r3, #0
   217d0:	ldreq	r3, [sp, #8]
   217d4:	addeq	r3, r3, #1
   217d8:	str	r3, [sp, #8]
   217dc:	ldr	r2, [sp, #8]
   217e0:	ldr	r3, [r6, #120]	; 0x78
   217e4:	cmp	r2, r3
   217e8:	ble	21600 <__assert_fail@plt+0xfc44>
   217ec:	mov	r2, r8
   217f0:	mov	r1, #0
   217f4:	bl	11818 <memset@plt>
   217f8:	b	215ec <__assert_fail@plt+0xfc30>
   217fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21800:	sub	sp, sp, #420	; 0x1a4
   21804:	mov	sl, r0
   21808:	ldr	fp, [r0]
   2180c:	str	r1, [sp, #32]
   21810:	str	r2, [sp, #36]	; 0x24
   21814:	mov	r1, #0
   21818:	mov	r2, #136	; 0x88
   2181c:	add	r0, sp, #140	; 0x8c
   21820:	mov	r5, r3
   21824:	ldr	r8, [sp, #456]	; 0x1c8
   21828:	ldr	r7, [sp, #460]	; 0x1cc
   2182c:	ldr	r6, [sp, #464]	; 0x1d0
   21830:	ldr	r4, [sp, #468]	; 0x1d4
   21834:	bl	11818 <memset@plt>
   21838:	ldr	r2, [sl, #16]
   2183c:	str	fp, [sp, #224]	; 0xe0
   21840:	cmp	r2, #0
   21844:	streq	r2, [sp, #20]
   21848:	beq	21870 <__assert_fail@plt+0xfeb4>
   2184c:	ldrb	r1, [sl, #28]
   21850:	subs	r3, r5, r8
   21854:	movne	r3, #1
   21858:	ands	r3, r3, r1, lsr #3
   2185c:	beq	2186c <__assert_fail@plt+0xfeb0>
   21860:	tst	r1, #1
   21864:	moveq	r3, r2
   21868:	movne	r3, #0
   2186c:	str	r3, [sp, #20]
   21870:	ldr	r3, [sl, #24]
   21874:	cmp	r3, r6
   21878:	subcc	r2, r6, #1
   2187c:	subcc	r3, r2, r3
   21880:	movcs	r3, #0
   21884:	str	r3, [sp, #68]	; 0x44
   21888:	ldr	r3, [sl, #8]
   2188c:	cmp	r3, #0
   21890:	beq	218a0 <__assert_fail@plt+0xfee4>
   21894:	ldr	r2, [fp, #36]	; 0x24
   21898:	cmp	r2, #0
   2189c:	bne	229d4 <__assert_fail@plt+0x11018>
   218a0:	mov	r3, #1
   218a4:	str	r3, [sp, #12]
   218a8:	b	22460 <__assert_fail@plt+0x10aa4>
   218ac:	ldr	r3, [pc, #4028]	; 22870 <__assert_fail@plt+0x10eb4>
   218b0:	cmp	r7, r3
   218b4:	bgt	218e4 <__assert_fail@plt+0xff28>
   218b8:	mov	r0, #24
   218bc:	mul	r0, r0, r7
   218c0:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   218c4:	str	r0, [sp, #256]	; 0x100
   218c8:	lsl	r0, r9, #3
   218cc:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   218d0:	ldr	r3, [sp, #256]	; 0x100
   218d4:	cmp	r0, #0
   218d8:	cmpne	r3, #0
   218dc:	str	r0, [sp, #272]	; 0x110
   218e0:	bne	22b94 <__assert_fail@plt+0x111d8>
   218e4:	mov	r3, #12
   218e8:	b	219ac <__assert_fail@plt+0xfff0>
   218ec:	ldr	r0, [sp, #176]	; 0xb0
   218f0:	cmn	r0, #-1073741822	; 0xc0000002
   218f4:	bhi	218e4 <__assert_fail@plt+0xff28>
   218f8:	add	r0, r0, #1
   218fc:	lsl	r0, r0, #2
   21900:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   21904:	cmp	r0, #0
   21908:	str	r0, [sp, #240]	; 0xf0
   2190c:	bne	22bbc <__assert_fail@plt+0x11200>
   21910:	b	218e4 <__assert_fail@plt+0xff28>
   21914:	ldr	r3, [sp, #92]	; 0x5c
   21918:	cmp	r3, #1
   2191c:	moveq	r3, #4
   21920:	beq	21944 <__assert_fail@plt+0xff88>
   21924:	ldr	r3, [sl, #12]
   21928:	ldr	r2, [sp, #24]
   2192c:	lsr	r3, r3, #22
   21930:	eor	r3, r3, #1
   21934:	cmp	r2, #0
   21938:	movne	r3, #0
   2193c:	andeq	r3, r3, #1
   21940:	lsl	r3, r3, #2
   21944:	cmp	r5, r8
   21948:	movle	r2, #2
   2194c:	movgt	r2, #0
   21950:	orr	r6, r6, r3
   21954:	orr	r3, r6, r2
   21958:	cmp	r5, r8
   2195c:	str	r3, [sp, #84]	; 0x54
   21960:	add	r3, sp, #416	; 0x1a0
   21964:	suble	r3, r3, #308	; 0x134
   21968:	movgt	r3, #0
   2196c:	str	r3, [sp, #88]	; 0x58
   21970:	adds	r3, r3, #0
   21974:	movne	r3, #1
   21978:	str	r3, [sp, #96]	; 0x60
   2197c:	ldr	r3, [sp, #108]	; 0x6c
   21980:	ldr	r2, [sp, #40]	; 0x28
   21984:	cmp	r2, r3
   21988:	ldr	r2, [sp, #60]	; 0x3c
   2198c:	movge	r5, #0
   21990:	movlt	r5, #1
   21994:	cmp	r2, r3
   21998:	orrgt	r5, r5, #1
   2199c:	cmp	r5, #0
   219a0:	str	r5, [sp, #28]
   219a4:	beq	219b4 <__assert_fail@plt+0xfff8>
   219a8:	mov	r3, #1
   219ac:	str	r3, [sp, #12]
   219b0:	b	2242c <__assert_fail@plt+0x10a70>
   219b4:	ldr	r2, [sp, #84]	; 0x54
   219b8:	sub	r2, r2, #4
   219bc:	cmp	r2, #4
   219c0:	ldrls	pc, [pc, r2, lsl #2]
   219c4:	b	21d7c <__assert_fail@plt+0x103c0>
   219c8:	muleq	r2, r0, sl
   219cc:	muleq	r2, r0, sl
   219d0:	andeq	r1, r2, r0, asr sl
   219d4:	ldrdeq	r1, [r2], -ip
   219d8:	andeq	r1, r2, r8, ror #21
   219dc:	ldr	r2, [sp, #32]
   219e0:	ldr	r1, [sp, #28]
   219e4:	add	r3, r2, r3
   219e8:	mov	ip, #1
   219ec:	ldr	r2, [sp, #32]
   219f0:	ldr	r0, [sp, #40]	; 0x28
   219f4:	sub	r2, r3, r2
   219f8:	cmp	r0, r2
   219fc:	bgt	21ac0 <__assert_fail@plt+0x10104>
   21a00:	cmp	r1, #0
   21a04:	strne	r2, [sp, #108]	; 0x6c
   21a08:	ldr	r3, [sp, #108]	; 0x6c
   21a0c:	ldr	r2, [sp, #40]	; 0x28
   21a10:	cmp	r2, r3
   21a14:	bne	21ae8 <__assert_fail@plt+0x1012c>
   21a18:	ldr	r3, [sp, #36]	; 0x24
   21a1c:	ldr	r2, [sp, #40]	; 0x28
   21a20:	cmp	r3, r2
   21a24:	movle	r3, #0
   21a28:	ldrgt	r3, [sp, #32]
   21a2c:	ldrbgt	r3, [r3, r2]
   21a30:	ldr	r2, [sp, #24]
   21a34:	cmp	r2, #0
   21a38:	ldrbne	r3, [r2, r3]
   21a3c:	ldr	r2, [sp, #20]
   21a40:	ldrb	r3, [r2, r3]
   21a44:	cmp	r3, #0
   21a48:	bne	21ae8 <__assert_fail@plt+0x1012c>
   21a4c:	b	219a8 <__assert_fail@plt+0xffec>
   21a50:	ldr	r2, [sp, #32]
   21a54:	ldr	r1, [sp, #28]
   21a58:	add	r3, r2, r3
   21a5c:	mov	ip, #1
   21a60:	ldr	r2, [sp, #32]
   21a64:	ldr	r0, [sp, #40]	; 0x28
   21a68:	sub	r2, r3, r2
   21a6c:	cmp	r0, r2
   21a70:	ble	21a00 <__assert_fail@plt+0x10044>
   21a74:	ldrb	r0, [r3], #1
   21a78:	ldr	lr, [sp, #20]
   21a7c:	ldrb	r0, [lr, r0]
   21a80:	cmp	r0, #0
   21a84:	bne	21adc <__assert_fail@plt+0x10120>
   21a88:	mov	r1, ip
   21a8c:	b	21a60 <__assert_fail@plt+0x100a4>
   21a90:	ldr	r1, [sp, #28]
   21a94:	mov	ip, #0
   21a98:	mov	lr, #1
   21a9c:	ldr	r2, [sp, #60]	; 0x3c
   21aa0:	mov	r0, r3
   21aa4:	cmp	r3, r2
   21aa8:	bge	21d34 <__assert_fail@plt+0x10378>
   21aac:	cmp	r1, #0
   21ab0:	strne	r3, [sp, #108]	; 0x6c
   21ab4:	b	219a8 <__assert_fail@plt+0xffec>
   21ab8:	mov	r1, ip
   21abc:	b	219ec <__assert_fail@plt+0x10030>
   21ac0:	ldrb	r0, [r3], #1
   21ac4:	ldr	lr, [sp, #24]
   21ac8:	ldrb	r0, [lr, r0]
   21acc:	ldr	lr, [sp, #20]
   21ad0:	ldrb	r0, [lr, r0]
   21ad4:	cmp	r0, #0
   21ad8:	beq	21ab8 <__assert_fail@plt+0x100fc>
   21adc:	cmp	r1, #0
   21ae0:	strne	r2, [sp, #108]	; 0x6c
   21ae4:	beq	21a08 <__assert_fail@plt+0x1004c>
   21ae8:	ldr	r2, [sp, #472]	; 0x1d8
   21aec:	ldr	r1, [sp, #108]	; 0x6c
   21af0:	add	r0, sp, #140	; 0x8c
   21af4:	bl	1e518 <__assert_fail@plt+0xcb5c>
   21af8:	subs	r3, r0, #0
   21afc:	str	r3, [sp, #12]
   21b00:	bne	2242c <__assert_fail@plt+0x10a70>
   21b04:	ldr	r3, [sp, #92]	; 0x5c
   21b08:	cmp	r3, #1
   21b0c:	beq	21b2c <__assert_fail@plt+0x10170>
   21b10:	ldr	r3, [sp, #168]	; 0xa8
   21b14:	cmp	r3, #0
   21b18:	beq	21b2c <__assert_fail@plt+0x10170>
   21b1c:	ldr	r3, [sp, #148]	; 0x94
   21b20:	ldr	r3, [r3]
   21b24:	cmn	r3, #1
   21b28:	beq	21e8c <__assert_fail@plt+0x104d0>
   21b2c:	ldr	r7, [sp, #224]	; 0xe0
   21b30:	mov	r3, #0
   21b34:	str	r3, [sp, #260]	; 0x104
   21b38:	ldr	r6, [r7, #36]	; 0x24
   21b3c:	str	r3, [sp, #248]	; 0xf8
   21b40:	str	r3, [sp, #244]	; 0xf4
   21b44:	str	r3, [sp, #116]	; 0x74
   21b48:	ldrsb	r3, [r6, #52]	; 0x34
   21b4c:	ldr	r5, [sp, #180]	; 0xb4
   21b50:	cmp	r3, #0
   21b54:	bge	21bbc <__assert_fail@plt+0x10200>
   21b58:	ldr	r2, [sp, #228]	; 0xe4
   21b5c:	sub	r1, r5, #1
   21b60:	add	r0, sp, #140	; 0x8c
   21b64:	bl	1e250 <__assert_fail@plt+0xc894>
   21b68:	tst	r0, #1
   21b6c:	mov	r3, r0
   21b70:	ldrne	r6, [r7, #40]	; 0x28
   21b74:	bne	21bbc <__assert_fail@plt+0x10200>
   21b78:	cmp	r0, #0
   21b7c:	beq	21bbc <__assert_fail@plt+0x10200>
   21b80:	and	r2, r0, #6
   21b84:	cmp	r2, #6
   21b88:	ldreq	r6, [r7, #48]	; 0x30
   21b8c:	beq	21bbc <__assert_fail@plt+0x10200>
   21b90:	tst	r0, #2
   21b94:	ldrne	r6, [r7, #44]	; 0x2c
   21b98:	bne	21bbc <__assert_fail@plt+0x10200>
   21b9c:	tst	r0, #4
   21ba0:	beq	21bbc <__assert_fail@plt+0x10200>
   21ba4:	ldr	r2, [r6, #40]	; 0x28
   21ba8:	mov	r1, r7
   21bac:	add	r0, sp, #116	; 0x74
   21bb0:	bl	1d4c4 <__assert_fail@plt+0xbb08>
   21bb4:	subs	r6, r0, #0
   21bb8:	beq	218e4 <__assert_fail@plt+0xff28>
   21bbc:	ldr	r3, [sp, #240]	; 0xf0
   21bc0:	cmp	r3, #0
   21bc4:	beq	21e38 <__assert_fail@plt+0x1047c>
   21bc8:	str	r6, [r3, r5, lsl #2]
   21bcc:	ldr	r3, [r7, #76]	; 0x4c
   21bd0:	cmp	r3, #0
   21bd4:	beq	21e38 <__assert_fail@plt+0x1047c>
   21bd8:	add	r7, r6, #4
   21bdc:	mov	r2, #0
   21be0:	mov	r1, r7
   21be4:	add	r0, sp, #140	; 0x8c
   21be8:	bl	1c044 <__assert_fail@plt+0xa688>
   21bec:	cmp	r0, #0
   21bf0:	str	r0, [sp, #116]	; 0x74
   21bf4:	bne	21e30 <__assert_fail@plt+0x10474>
   21bf8:	ldrb	r3, [r6, #52]	; 0x34
   21bfc:	tst	r3, #64	; 0x40
   21c00:	bne	21e18 <__assert_fail@plt+0x1045c>
   21c04:	ldr	r3, [sp, #28]
   21c08:	ldrb	r0, [r6, #52]	; 0x34
   21c0c:	str	r3, [sp, #44]	; 0x2c
   21c10:	lsr	r0, r0, #4
   21c14:	ands	r0, r0, #1
   21c18:	bne	21e40 <__assert_fail@plt+0x10484>
   21c1c:	mvn	r3, #0
   21c20:	str	r0, [sp, #52]	; 0x34
   21c24:	str	r5, [sp, #72]	; 0x48
   21c28:	mov	r5, r3
   21c2c:	ldr	r3, [sp, #88]	; 0x58
   21c30:	str	r3, [sp, #48]	; 0x30
   21c34:	ldr	r1, [sp, #180]	; 0xb4
   21c38:	ldr	r3, [sp, #196]	; 0xc4
   21c3c:	cmp	r1, r3
   21c40:	bge	21d0c <__assert_fail@plt+0x10350>
   21c44:	add	r3, r1, #1
   21c48:	str	r3, [sp, #64]	; 0x40
   21c4c:	ldr	r3, [sp, #176]	; 0xb0
   21c50:	add	r2, r1, #1
   21c54:	cmp	r2, r3
   21c58:	blt	21c68 <__assert_fail@plt+0x102ac>
   21c5c:	ldr	r2, [sp, #188]	; 0xbc
   21c60:	cmp	r3, r2
   21c64:	blt	21c84 <__assert_fail@plt+0x102c8>
   21c68:	ldr	r3, [sp, #168]	; 0xa8
   21c6c:	add	r2, r1, #1
   21c70:	cmp	r2, r3
   21c74:	blt	21c9c <__assert_fail@plt+0x102e0>
   21c78:	ldr	r2, [sp, #188]	; 0xbc
   21c7c:	cmp	r3, r2
   21c80:	bge	21c9c <__assert_fail@plt+0x102e0>
   21c84:	add	r1, r1, #2
   21c88:	add	r0, sp, #140	; 0x8c
   21c8c:	bl	1b8b4 <__assert_fail@plt+0x9ef8>
   21c90:	cmp	r0, #0
   21c94:	str	r0, [sp, #116]	; 0x74
   21c98:	bne	218e4 <__assert_fail@plt+0xff28>
   21c9c:	ldrb	r3, [r6, #52]	; 0x34
   21ca0:	tst	r3, #32
   21ca4:	bne	21ea0 <__assert_fail@plt+0x104e4>
   21ca8:	ldr	r3, [sp, #180]	; 0xb4
   21cac:	add	r2, r3, #1
   21cb0:	str	r2, [sp, #180]	; 0xb4
   21cb4:	ldr	r2, [sp, #144]	; 0x90
   21cb8:	ldrb	r8, [r2, r3]
   21cbc:	ldr	r3, [r6, #44]	; 0x2c
   21cc0:	cmp	r3, #0
   21cc4:	beq	22064 <__assert_fail@plt+0x106a8>
   21cc8:	ldr	r7, [r3, r8, lsl #2]
   21ccc:	ldr	r3, [sp, #240]	; 0xf0
   21cd0:	cmp	r3, #0
   21cd4:	beq	21cec <__assert_fail@plt+0x10330>
   21cd8:	mov	r2, r7
   21cdc:	add	r1, sp, #140	; 0x8c
   21ce0:	add	r0, sp, #116	; 0x74
   21ce4:	bl	20e54 <__assert_fail@plt+0xf498>
   21ce8:	mov	r7, r0
   21cec:	cmp	r7, #0
   21cf0:	bne	22134 <__assert_fail@plt+0x10778>
   21cf4:	ldr	r3, [sp, #116]	; 0x74
   21cf8:	cmp	r3, #0
   21cfc:	bne	218e4 <__assert_fail@plt+0xff28>
   21d00:	ldr	r3, [sp, #240]	; 0xf0
   21d04:	cmp	r3, #0
   21d08:	bne	220b4 <__assert_fail@plt+0x106f8>
   21d0c:	ldr	r3, [sp, #48]	; 0x30
   21d10:	cmp	r3, #0
   21d14:	beq	21e7c <__assert_fail@plt+0x104c0>
   21d18:	ldr	r3, [sp, #48]	; 0x30
   21d1c:	ldr	r2, [sp, #72]	; 0x48
   21d20:	ldr	r3, [r3]
   21d24:	add	r3, r3, r2
   21d28:	ldr	r2, [sp, #48]	; 0x30
   21d2c:	str	r3, [r2]
   21d30:	b	21e7c <__assert_fail@plt+0x104c0>
   21d34:	ldr	r2, [sp, #36]	; 0x24
   21d38:	ldr	r5, [sp, #24]
   21d3c:	cmp	r2, r3
   21d40:	movle	r2, ip
   21d44:	ldrgt	r2, [sp, #32]
   21d48:	ldrbgt	r2, [r2, r3]
   21d4c:	cmp	r5, #0
   21d50:	sub	r3, r3, #1
   21d54:	ldrbne	r2, [r5, r2]
   21d58:	ldr	r5, [sp, #20]
   21d5c:	ldrb	r2, [r5, r2]
   21d60:	cmp	r2, #0
   21d64:	beq	21d74 <__assert_fail@plt+0x103b8>
   21d68:	cmp	r1, #0
   21d6c:	strne	r0, [sp, #108]	; 0x6c
   21d70:	b	21ae8 <__assert_fail@plt+0x1012c>
   21d74:	mov	r1, lr
   21d78:	b	21a9c <__assert_fail@plt+0x100e0>
   21d7c:	mov	r6, #0
   21d80:	ldr	r5, [sp, #108]	; 0x6c
   21d84:	ldr	r3, [sp, #164]	; 0xa4
   21d88:	ldr	r2, [sp, #172]	; 0xac
   21d8c:	sub	r3, r5, r3
   21d90:	cmp	r3, r2
   21d94:	bcc	21dbc <__assert_fail@plt+0x10400>
   21d98:	ldr	r2, [sp, #472]	; 0x1d8
   21d9c:	mov	r1, r5
   21da0:	add	r0, sp, #140	; 0x8c
   21da4:	bl	1e518 <__assert_fail@plt+0xcb5c>
   21da8:	subs	r3, r0, #0
   21dac:	str	r3, [sp, #12]
   21db0:	bne	2242c <__assert_fail@plt+0x10a70>
   21db4:	ldr	r3, [sp, #164]	; 0xa4
   21db8:	sub	r3, r5, r3
   21dbc:	ldr	r2, [sp, #168]	; 0xa8
   21dc0:	cmp	r3, r2
   21dc4:	movcs	r3, r6
   21dc8:	ldrcc	r2, [sp, #144]	; 0x90
   21dcc:	ldrbcc	r3, [r2, r3]
   21dd0:	ldr	r2, [sp, #20]
   21dd4:	ldrb	r3, [r2, r3]
   21dd8:	cmp	r3, #0
   21ddc:	bne	21ae8 <__assert_fail@plt+0x1012c>
   21de0:	ldr	r3, [sp, #80]	; 0x50
   21de4:	ldr	r2, [sp, #60]	; 0x3c
   21de8:	add	r5, r3, r5
   21dec:	ldr	r3, [sp, #40]	; 0x28
   21df0:	str	r5, [sp, #108]	; 0x6c
   21df4:	cmp	r3, r5
   21df8:	movge	r3, #0
   21dfc:	movlt	r3, #1
   21e00:	cmp	r2, r5
   21e04:	movle	r5, r3
   21e08:	orrgt	r5, r3, #1
   21e0c:	cmp	r5, #0
   21e10:	beq	21d80 <__assert_fail@plt+0x103c4>
   21e14:	b	219a8 <__assert_fail@plt+0xffec>
   21e18:	mov	r1, r7
   21e1c:	add	r0, sp, #140	; 0x8c
   21e20:	bl	20820 <__assert_fail@plt+0xee64>
   21e24:	cmp	r0, #0
   21e28:	str	r0, [sp, #116]	; 0x74
   21e2c:	beq	21c04 <__assert_fail@plt+0x10248>
   21e30:	mov	r5, r0
   21e34:	b	21e7c <__assert_fail@plt+0x104c0>
   21e38:	ldr	r3, [sp, #96]	; 0x60
   21e3c:	b	21c08 <__assert_fail@plt+0x1024c>
   21e40:	ldrsb	r3, [r6, #52]	; 0x34
   21e44:	cmp	r3, #0
   21e48:	bge	21e64 <__assert_fail@plt+0x104a8>
   21e4c:	mov	r2, r5
   21e50:	mov	r1, r6
   21e54:	add	r0, sp, #140	; 0x8c
   21e58:	bl	1e45c <__assert_fail@plt+0xcaa0>
   21e5c:	cmp	r0, #0
   21e60:	beq	21c1c <__assert_fail@plt+0x10260>
   21e64:	ldr	r3, [sp, #56]	; 0x38
   21e68:	cmp	r3, #0
   21e6c:	movne	r2, #1
   21e70:	movne	r3, r5
   21e74:	strne	r2, [sp, #52]	; 0x34
   21e78:	bne	21c24 <__assert_fail@plt+0x10268>
   21e7c:	cmn	r5, #1
   21e80:	bne	221c8 <__assert_fail@plt+0x1080c>
   21e84:	add	r0, sp, #140	; 0x8c
   21e88:	bl	1be10 <__assert_fail@plt+0xa454>
   21e8c:	ldr	r3, [sp, #108]	; 0x6c
   21e90:	ldr	r2, [sp, #80]	; 0x50
   21e94:	add	r3, r3, r2
   21e98:	str	r3, [sp, #108]	; 0x6c
   21e9c:	b	2197c <__assert_fail@plt+0xffc0>
   21ea0:	ldr	r8, [sp, #224]	; 0xe0
   21ea4:	mov	r9, #0
   21ea8:	ldr	r3, [r6, #8]
   21eac:	cmp	r9, r3
   21eb0:	ldrge	r0, [sp, #12]
   21eb4:	bge	22050 <__assert_fail@plt+0x10694>
   21eb8:	ldr	r3, [r6, #12]
   21ebc:	ldr	r3, [r3, r9, lsl #2]
   21ec0:	str	r3, [sp, #76]	; 0x4c
   21ec4:	ldr	r2, [sp, #76]	; 0x4c
   21ec8:	ldr	r3, [r8]
   21ecc:	add	r3, r3, r2, lsl #3
   21ed0:	ldrb	r2, [r3, #6]
   21ed4:	tst	r2, #16
   21ed8:	beq	2202c <__assert_fail@plt+0x10670>
   21edc:	ldr	r7, [r3, #4]
   21ee0:	ldr	r3, [pc, #2444]	; 22874 <__assert_fail@plt+0x10eb8>
   21ee4:	tst	r7, r3
   21ee8:	beq	21f44 <__assert_fail@plt+0x10588>
   21eec:	ldr	r2, [sp, #228]	; 0xe4
   21ef0:	ldr	r1, [sp, #180]	; 0xb4
   21ef4:	add	r0, sp, #140	; 0x8c
   21ef8:	bl	1e250 <__assert_fail@plt+0xc894>
   21efc:	ldr	r3, [pc, #2420]	; 22878 <__assert_fail@plt+0x10ebc>
   21f00:	and	r3, r3, r7, lsr #8
   21f04:	tst	r3, #4
   21f08:	beq	21f14 <__assert_fail@plt+0x10558>
   21f0c:	tst	r0, #1
   21f10:	beq	2202c <__assert_fail@plt+0x10670>
   21f14:	tst	r3, #8
   21f18:	beq	21f24 <__assert_fail@plt+0x10568>
   21f1c:	tst	r0, #1
   21f20:	bne	2202c <__assert_fail@plt+0x10670>
   21f24:	tst	r3, #32
   21f28:	beq	21f34 <__assert_fail@plt+0x10578>
   21f2c:	tst	r0, #2
   21f30:	beq	2202c <__assert_fail@plt+0x10670>
   21f34:	tst	r3, #128	; 0x80
   21f38:	beq	21f44 <__assert_fail@plt+0x10588>
   21f3c:	tst	r0, #8
   21f40:	beq	2202c <__assert_fail@plt+0x10670>
   21f44:	ldr	r3, [sp, #180]	; 0xb4
   21f48:	add	r2, sp, #140	; 0x8c
   21f4c:	ldr	r1, [sp, #76]	; 0x4c
   21f50:	mov	r0, r8
   21f54:	bl	1cf10 <__assert_fail@plt+0xb554>
   21f58:	cmp	r0, #0
   21f5c:	beq	2202c <__assert_fail@plt+0x10670>
   21f60:	ldr	r7, [sp, #180]	; 0xb4
   21f64:	ldr	r3, [sp, #260]	; 0x104
   21f68:	add	r7, r0, r7
   21f6c:	cmp	r3, r0
   21f70:	strge	r3, [sp, #260]	; 0x104
   21f74:	strlt	r0, [sp, #260]	; 0x104
   21f78:	mov	r1, r7
   21f7c:	add	r0, sp, #140	; 0x8c
   21f80:	bl	1c148 <__assert_fail@plt+0xa78c>
   21f84:	cmp	r0, #0
   21f88:	str	r0, [sp, #128]	; 0x80
   21f8c:	bne	22050 <__assert_fail@plt+0x10694>
   21f90:	ldr	r3, [r8, #12]
   21f94:	ldr	r2, [sp, #76]	; 0x4c
   21f98:	mov	r1, #12
   21f9c:	ldr	r2, [r3, r2, lsl #2]
   21fa0:	ldr	r3, [r8, #24]
   21fa4:	mla	r2, r1, r2, r3
   21fa8:	ldr	r3, [sp, #240]	; 0xf0
   21fac:	ldr	r3, [r3, r7, lsl #2]
   21fb0:	cmp	r3, #0
   21fb4:	str	r3, [sp, #76]	; 0x4c
   21fb8:	bne	22034 <__assert_fail@plt+0x10678>
   21fbc:	ldm	r2, {r0, r1, r2}
   21fc0:	add	r3, sp, #276	; 0x114
   21fc4:	stm	r3, {r0, r1, r2}
   21fc8:	sub	r1, r7, #1
   21fcc:	ldr	r2, [sp, #228]	; 0xe4
   21fd0:	add	r0, sp, #140	; 0x8c
   21fd4:	bl	1e250 <__assert_fail@plt+0xc894>
   21fd8:	ldr	r3, [sp, #240]	; 0xf0
   21fdc:	add	r2, sp, #276	; 0x114
   21fe0:	str	r3, [sp, #100]	; 0x64
   21fe4:	mov	r1, r8
   21fe8:	mov	r3, r0
   21fec:	add	r0, sp, #128	; 0x80
   21ff0:	bl	1d4c4 <__assert_fail@plt+0xbb08>
   21ff4:	ldr	r3, [sp, #100]	; 0x64
   21ff8:	str	r0, [r3, r7, lsl #2]
   21ffc:	ldr	r3, [sp, #76]	; 0x4c
   22000:	cmp	r3, #0
   22004:	beq	22010 <__assert_fail@plt+0x10654>
   22008:	ldr	r0, [sp, #284]	; 0x11c
   2200c:	bl	1a30c <__assert_fail@plt+0x8950>
   22010:	ldr	r3, [sp, #240]	; 0xf0
   22014:	ldr	r3, [r3, r7, lsl #2]
   22018:	cmp	r3, #0
   2201c:	bne	2202c <__assert_fail@plt+0x10670>
   22020:	ldr	r0, [sp, #128]	; 0x80
   22024:	cmp	r0, #0
   22028:	bne	22050 <__assert_fail@plt+0x10694>
   2202c:	add	r9, r9, #1
   22030:	b	21ea8 <__assert_fail@plt+0x104ec>
   22034:	ldr	r3, [sp, #76]	; 0x4c
   22038:	add	r0, sp, #276	; 0x114
   2203c:	ldr	r1, [r3, #40]	; 0x28
   22040:	bl	1d38c <__assert_fail@plt+0xb9d0>
   22044:	cmp	r0, #0
   22048:	str	r0, [sp, #128]	; 0x80
   2204c:	beq	21fc8 <__assert_fail@plt+0x1060c>
   22050:	cmp	r0, #0
   22054:	str	r0, [sp, #116]	; 0x74
   22058:	beq	21ca8 <__assert_fail@plt+0x102ec>
   2205c:	mov	r7, #0
   22060:	b	21ccc <__assert_fail@plt+0x10310>
   22064:	ldr	r7, [r6, #48]	; 0x30
   22068:	cmp	r7, #0
   2206c:	beq	22094 <__assert_fail@plt+0x106d8>
   22070:	ldr	r1, [sp, #180]	; 0xb4
   22074:	ldr	r2, [sp, #228]	; 0xe4
   22078:	sub	r1, r1, #1
   2207c:	add	r0, sp, #140	; 0x8c
   22080:	bl	1e250 <__assert_fail@plt+0xc894>
   22084:	tst	r0, #1
   22088:	addne	r8, r8, #256	; 0x100
   2208c:	ldr	r7, [r7, r8, lsl #2]
   22090:	b	21ccc <__assert_fail@plt+0x10310>
   22094:	mov	r1, r6
   22098:	ldr	r0, [sp, #224]	; 0xe0
   2209c:	bl	1f48c <__assert_fail@plt+0xdad0>
   220a0:	subs	r7, r0, #0
   220a4:	bne	21cbc <__assert_fail@plt+0x10300>
   220a8:	mov	r3, #12
   220ac:	str	r3, [sp, #116]	; 0x74
   220b0:	b	21ccc <__assert_fail@plt+0x10310>
   220b4:	ldr	r3, [sp, #56]	; 0x38
   220b8:	eor	r8, r3, #1
   220bc:	ldr	r3, [sp, #52]	; 0x34
   220c0:	ands	r8, r8, r3
   220c4:	bne	21d0c <__assert_fail@plt+0x10350>
   220c8:	mov	r9, #1
   220cc:	ldr	ip, [sp, #244]	; 0xf4
   220d0:	ldr	r3, [sp, #180]	; 0xb4
   220d4:	ldr	r0, [sp, #240]	; 0xf0
   220d8:	mov	r2, r8
   220dc:	add	r1, r3, #1
   220e0:	cmp	ip, r1
   220e4:	bge	220f4 <__assert_fail@plt+0x10738>
   220e8:	cmp	r2, #0
   220ec:	strne	r3, [sp, #180]	; 0xb4
   220f0:	b	21d0c <__assert_fail@plt+0x10350>
   220f4:	mov	r3, r1
   220f8:	ldr	r1, [r0, r1, lsl #2]
   220fc:	mov	r2, r9
   22100:	cmp	r1, #0
   22104:	beq	220dc <__assert_fail@plt+0x10720>
   22108:	mov	r2, #0
   2210c:	add	r1, sp, #140	; 0x8c
   22110:	add	r0, sp, #116	; 0x74
   22114:	str	r3, [sp, #180]	; 0xb4
   22118:	bl	20e54 <__assert_fail@plt+0xf498>
   2211c:	ldr	r3, [sp, #116]	; 0x74
   22120:	cmp	r3, #0
   22124:	mov	r7, r0
   22128:	bne	221bc <__assert_fail@plt+0x10800>
   2212c:	cmp	r0, #0
   22130:	beq	220cc <__assert_fail@plt+0x10710>
   22134:	ldr	r3, [sp, #44]	; 0x2c
   22138:	ldr	r2, [sp, #72]	; 0x48
   2213c:	cmp	r6, r7
   22140:	movne	r3, #0
   22144:	andeq	r3, r3, #1
   22148:	str	r3, [sp, #44]	; 0x2c
   2214c:	ldr	r1, [sp, #44]	; 0x2c
   22150:	ldr	r3, [sp, #64]	; 0x40
   22154:	cmp	r1, #0
   22158:	moveq	r3, r2
   2215c:	str	r3, [sp, #64]	; 0x40
   22160:	ldrb	r3, [r7, #52]	; 0x34
   22164:	tst	r3, #16
   22168:	beq	221ac <__assert_fail@plt+0x107f0>
   2216c:	tst	r3, #128	; 0x80
   22170:	beq	2218c <__assert_fail@plt+0x107d0>
   22174:	ldr	r2, [sp, #180]	; 0xb4
   22178:	mov	r1, r7
   2217c:	add	r0, sp, #140	; 0x8c
   22180:	bl	1e45c <__assert_fail@plt+0xcaa0>
   22184:	cmp	r0, #0
   22188:	beq	221ac <__assert_fail@plt+0x107f0>
   2218c:	ldr	r3, [sp, #56]	; 0x38
   22190:	ldr	r5, [sp, #180]	; 0xb4
   22194:	cmp	r3, #0
   22198:	beq	21e7c <__assert_fail@plt+0x104c0>
   2219c:	mov	r3, #1
   221a0:	str	r3, [sp, #52]	; 0x34
   221a4:	mov	r3, #0
   221a8:	str	r3, [sp, #48]	; 0x30
   221ac:	ldr	r3, [sp, #64]	; 0x40
   221b0:	mov	r6, r7
   221b4:	str	r3, [sp, #72]	; 0x48
   221b8:	b	21c34 <__assert_fail@plt+0x10278>
   221bc:	cmp	r0, #0
   221c0:	bne	22134 <__assert_fail@plt+0x10778>
   221c4:	b	21d0c <__assert_fail@plt+0x10350>
   221c8:	cmn	r5, #2
   221cc:	beq	218e4 <__assert_fail@plt+0xff28>
   221d0:	ldrb	r6, [sl, #28]
   221d4:	ldr	r3, [sp, #16]
   221d8:	str	r5, [sp, #232]	; 0xe8
   221dc:	lsr	r6, r6, #4
   221e0:	eor	r6, r6, #1
   221e4:	cmp	r3, #1
   221e8:	movls	r6, #0
   221ec:	andhi	r6, r6, #1
   221f0:	cmp	r6, #0
   221f4:	bne	22204 <__assert_fail@plt+0x10848>
   221f8:	ldr	r3, [fp, #76]	; 0x4c
   221fc:	cmp	r3, #0
   22200:	beq	22230 <__assert_fail@plt+0x10874>
   22204:	ldr	r3, [sp, #240]	; 0xf0
   22208:	mov	r2, r5
   2220c:	add	r0, sp, #140	; 0x8c
   22210:	ldr	r1, [r3, r5, lsl #2]
   22214:	bl	1e45c <__assert_fail@plt+0xcaa0>
   22218:	cmp	r6, #0
   2221c:	str	r0, [sp, #236]	; 0xec
   22220:	beq	22230 <__assert_fail@plt+0x10874>
   22224:	ldrb	r3, [fp, #88]	; 0x58
   22228:	tst	r3, #1
   2222c:	bne	2223c <__assert_fail@plt+0x10880>
   22230:	ldr	r3, [fp, #76]	; 0x4c
   22234:	cmp	r3, #0
   22238:	beq	22414 <__assert_fail@plt+0x10a58>
   2223c:	ldr	r3, [sp, #224]	; 0xe0
   22240:	cmn	r5, #-1073741822	; 0xc0000002
   22244:	str	r3, [sp, #48]	; 0x30
   22248:	ldr	r3, [sp, #236]	; 0xec
   2224c:	str	r3, [sp, #44]	; 0x2c
   22250:	bhi	218e4 <__assert_fail@plt+0xff28>
   22254:	add	r9, r5, #1
   22258:	lsl	r9, r9, #2
   2225c:	mov	r0, r9
   22260:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   22264:	subs	r7, r0, #0
   22268:	beq	223d8 <__assert_fail@plt+0x10a1c>
   2226c:	ldr	r3, [sp, #48]	; 0x30
   22270:	ldr	r6, [r3, #76]	; 0x4c
   22274:	cmp	r6, #0
   22278:	beq	22368 <__assert_fail@plt+0x109ac>
   2227c:	mov	r0, r9
   22280:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   22284:	subs	r6, r0, #0
   22288:	beq	223dc <__assert_fail@plt+0x10a20>
   2228c:	mov	r9, #0
   22290:	add	r3, r5, #1
   22294:	mov	r1, r9
   22298:	lsl	r2, r3, #2
   2229c:	mov	r0, r6
   222a0:	str	r3, [sp, #52]	; 0x34
   222a4:	bl	11818 <memset@plt>
   222a8:	ldr	r3, [sp, #44]	; 0x2c
   222ac:	add	r1, sp, #276	; 0x114
   222b0:	add	r0, sp, #140	; 0x8c
   222b4:	str	r3, [sp, #284]	; 0x11c
   222b8:	str	r7, [sp, #276]	; 0x114
   222bc:	str	r6, [sp, #280]	; 0x118
   222c0:	str	r5, [sp, #288]	; 0x120
   222c4:	str	r9, [sp, #292]	; 0x124
   222c8:	str	r9, [sp, #296]	; 0x128
   222cc:	str	r9, [sp, #300]	; 0x12c
   222d0:	bl	21598 <__assert_fail@plt+0xfbdc>
   222d4:	mov	r8, r0
   222d8:	ldr	r0, [sp, #300]	; 0x12c
   222dc:	bl	1a30c <__assert_fail@plt+0x8950>
   222e0:	cmp	r8, #0
   222e4:	bne	223e0 <__assert_fail@plt+0x10a24>
   222e8:	ldr	r3, [r7]
   222ec:	cmp	r3, #0
   222f0:	bne	22338 <__assert_fail@plt+0x1097c>
   222f4:	ldr	r3, [r6]
   222f8:	cmp	r3, #0
   222fc:	bne	22338 <__assert_fail@plt+0x1097c>
   22300:	ldr	r2, [sp, #240]	; 0xf0
   22304:	subs	r5, r5, #1
   22308:	bcc	2240c <__assert_fail@plt+0x10a50>
   2230c:	ldr	r1, [r2, r5, lsl #2]
   22310:	cmp	r1, #0
   22314:	beq	22304 <__assert_fail@plt+0x10948>
   22318:	ldrb	r3, [r1, #52]	; 0x34
   2231c:	tst	r3, #16
   22320:	beq	22304 <__assert_fail@plt+0x10948>
   22324:	mov	r2, r5
   22328:	add	r0, sp, #140	; 0x8c
   2232c:	bl	1e45c <__assert_fail@plt+0xcaa0>
   22330:	str	r0, [sp, #44]	; 0x2c
   22334:	b	22290 <__assert_fail@plt+0x108d4>
   22338:	add	r3, r5, #1
   2233c:	mov	r2, r6
   22340:	mov	r1, r7
   22344:	ldr	r0, [sp, #48]	; 0x30
   22348:	bl	1ff28 <__assert_fail@plt+0xe56c>
   2234c:	mov	r8, r0
   22350:	mov	r0, r6
   22354:	bl	1a30c <__assert_fail@plt+0x8950>
   22358:	cmp	r8, #0
   2235c:	beq	223b4 <__assert_fail@plt+0x109f8>
   22360:	mov	r6, #0
   22364:	b	223e0 <__assert_fail@plt+0x10a24>
   22368:	ldr	r3, [sp, #44]	; 0x2c
   2236c:	add	r1, sp, #276	; 0x114
   22370:	add	r0, sp, #140	; 0x8c
   22374:	str	r3, [sp, #284]	; 0x11c
   22378:	str	r7, [sp, #276]	; 0x114
   2237c:	str	r6, [sp, #280]	; 0x118
   22380:	str	r5, [sp, #288]	; 0x120
   22384:	str	r6, [sp, #292]	; 0x124
   22388:	str	r6, [sp, #296]	; 0x128
   2238c:	str	r6, [sp, #300]	; 0x12c
   22390:	bl	21598 <__assert_fail@plt+0xfbdc>
   22394:	mov	r8, r0
   22398:	ldr	r0, [sp, #300]	; 0x12c
   2239c:	bl	1a30c <__assert_fail@plt+0x8950>
   223a0:	cmp	r8, #0
   223a4:	bne	223e0 <__assert_fail@plt+0x10a24>
   223a8:	ldr	r2, [r7]
   223ac:	cmp	r2, #0
   223b0:	beq	22408 <__assert_fail@plt+0x10a4c>
   223b4:	ldr	r0, [sp, #240]	; 0xf0
   223b8:	bl	1a30c <__assert_fail@plt+0x8950>
   223bc:	ldr	r3, [sp, #44]	; 0x2c
   223c0:	str	r7, [sp, #240]	; 0xf0
   223c4:	str	r3, [sp, #236]	; 0xec
   223c8:	str	r5, [sp, #232]	; 0xe8
   223cc:	ldr	r8, [sp, #12]
   223d0:	mov	r7, #0
   223d4:	b	22360 <__assert_fail@plt+0x109a4>
   223d8:	mov	r6, r7
   223dc:	mov	r8, #12
   223e0:	mov	r0, r7
   223e4:	bl	1a30c <__assert_fail@plt+0x8950>
   223e8:	mov	r0, r6
   223ec:	bl	1a30c <__assert_fail@plt+0x8950>
   223f0:	cmp	r8, #0
   223f4:	beq	22414 <__assert_fail@plt+0x10a58>
   223f8:	cmp	r8, #1
   223fc:	beq	21e84 <__assert_fail@plt+0x104c8>
   22400:	str	r8, [sp, #12]
   22404:	b	2242c <__assert_fail@plt+0x10a70>
   22408:	mov	r6, r8
   2240c:	mov	r8, #1
   22410:	b	223e0 <__assert_fail@plt+0x10a24>
   22414:	ldr	r3, [sp, #16]
   22418:	cmp	r3, #0
   2241c:	addne	r3, r4, #8
   22420:	movne	r7, #1
   22424:	mvnne	r2, #0
   22428:	bne	22478 <__assert_fail@plt+0x10abc>
   2242c:	ldr	r0, [sp, #240]	; 0xf0
   22430:	bl	1a30c <__assert_fail@plt+0x8950>
   22434:	ldr	r3, [fp, #76]	; 0x4c
   22438:	cmp	r3, #0
   2243c:	beq	22458 <__assert_fail@plt+0x10a9c>
   22440:	add	r0, sp, #140	; 0x8c
   22444:	bl	1be10 <__assert_fail@plt+0xa454>
   22448:	ldr	r0, [sp, #272]	; 0x110
   2244c:	bl	1a30c <__assert_fail@plt+0x8950>
   22450:	ldr	r0, [sp, #256]	; 0x100
   22454:	bl	1a30c <__assert_fail@plt+0x8950>
   22458:	add	r0, sp, #140	; 0x8c
   2245c:	bl	1bc84 <__assert_fail@plt+0xa2c8>
   22460:	ldr	r0, [sp, #12]
   22464:	add	sp, sp, #420	; 0x1a4
   22468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2246c:	add	r7, r7, #1
   22470:	str	r2, [r3, #-4]
   22474:	str	r2, [r3, #-8]
   22478:	ldr	r1, [sp, #16]
   2247c:	add	r3, r3, #8
   22480:	cmp	r7, r1
   22484:	bne	2246c <__assert_fail@plt+0x10ab0>
   22488:	mov	r3, #0
   2248c:	str	r3, [r4]
   22490:	ldr	r3, [sp, #232]	; 0xe8
   22494:	str	r3, [r4, #4]
   22498:	ldrb	r3, [sl, #28]
   2249c:	lsr	r3, r3, #4
   224a0:	eor	r3, r3, #1
   224a4:	cmp	r7, #1
   224a8:	moveq	r3, #0
   224ac:	andne	r3, r3, #1
   224b0:	cmp	r3, #0
   224b4:	bne	225ac <__assert_fail@plt+0x10bf0>
   224b8:	ldrb	r8, [sp, #216]	; 0xd8
   224bc:	ldr	ip, [sp, #168]	; 0xa8
   224c0:	ldr	r5, [sp, #152]	; 0x98
   224c4:	ldr	lr, [sp, #172]	; 0xac
   224c8:	ldr	r6, [sp, #108]	; 0x6c
   224cc:	mov	r1, r4
   224d0:	mov	r2, r4
   224d4:	mov	r3, #0
   224d8:	ldr	r0, [r4, r3, lsl #3]
   224dc:	cmn	r0, #1
   224e0:	beq	22528 <__assert_fail@plt+0x10b6c>
   224e4:	cmp	r8, #0
   224e8:	beq	22510 <__assert_fail@plt+0x10b54>
   224ec:	cmp	r0, ip
   224f0:	moveq	r0, lr
   224f4:	ldrne	r0, [r5, r0, lsl #2]
   224f8:	str	r0, [r4, r3, lsl #3]
   224fc:	ldr	r0, [r2, #4]
   22500:	cmp	ip, r0
   22504:	moveq	r0, lr
   22508:	ldrne	r0, [r5, r0, lsl #2]
   2250c:	str	r0, [r2, #4]
   22510:	ldr	r0, [r4, r3, lsl #3]
   22514:	add	r0, r0, r6
   22518:	str	r0, [r4, r3, lsl #3]
   2251c:	ldr	r0, [r2, #4]
   22520:	add	r0, r0, r6
   22524:	str	r0, [r2, #4]
   22528:	add	r3, r3, #1
   2252c:	cmp	r7, r3
   22530:	add	r2, r2, #8
   22534:	bne	224d8 <__assert_fail@plt+0x10b1c>
   22538:	ldr	r2, [sp, #16]
   2253c:	mvn	r0, #0
   22540:	add	r6, r4, r2, lsl #3
   22544:	mov	r2, #0
   22548:	ldr	ip, [sp, #68]	; 0x44
   2254c:	add	r6, r6, #8
   22550:	cmp	r2, ip
   22554:	blt	229c4 <__assert_fail@plt+0x11008>
   22558:	ldr	r2, [fp, #132]	; 0x84
   2255c:	cmp	r2, #0
   22560:	movne	ip, #0
   22564:	beq	2242c <__assert_fail@plt+0x10a70>
   22568:	add	lr, ip, #1
   2256c:	cmp	r3, lr
   22570:	beq	2242c <__assert_fail@plt+0x10a70>
   22574:	ldr	r0, [r2]
   22578:	cmp	ip, r0
   2257c:	beq	2259c <__assert_fail@plt+0x10be0>
   22580:	add	r0, r0, #1
   22584:	ldr	r0, [r4, r0, lsl #3]
   22588:	str	r0, [r1, #8]
   2258c:	ldr	r0, [r2]
   22590:	add	r0, r4, r0, lsl #3
   22594:	ldr	r0, [r0, #12]
   22598:	str	r0, [r1, #12]
   2259c:	add	r2, r2, #4
   225a0:	add	r1, r1, #8
   225a4:	mov	ip, lr
   225a8:	b	22568 <__assert_fail@plt+0x10bac>
   225ac:	ldrb	r3, [fp, #88]	; 0x58
   225b0:	tst	r3, #1
   225b4:	beq	225cc <__assert_fail@plt+0x10c10>
   225b8:	ldr	r5, [fp, #76]	; 0x4c
   225bc:	cmp	r5, #0
   225c0:	movle	r3, #0
   225c4:	movgt	r3, #1
   225c8:	str	r3, [sp, #28]
   225cc:	ldr	r3, [sl]
   225d0:	mov	r2, #2
   225d4:	str	r3, [sp, #32]
   225d8:	mov	r3, #0
   225dc:	str	r3, [sp, #128]	; 0x80
   225e0:	str	r3, [sp, #136]	; 0x88
   225e4:	str	r3, [sp, #276]	; 0x114
   225e8:	mov	r3, #16
   225ec:	str	r3, [sp, #280]	; 0x118
   225f0:	add	r3, sp, #288	; 0x120
   225f4:	str	r3, [sp, #284]	; 0x11c
   225f8:	ldr	r3, [sp, #28]
   225fc:	str	r2, [sp, #132]	; 0x84
   22600:	cmp	r3, #0
   22604:	beq	226ac <__assert_fail@plt+0x10cf0>
   22608:	mov	r0, #48	; 0x30
   2260c:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   22610:	cmp	r0, #0
   22614:	str	r0, [sp, #136]	; 0x88
   22618:	addne	r5, sp, #128	; 0x80
   2261c:	beq	218e4 <__assert_fail@plt+0xff28>
   22620:	ldr	r3, [sp, #32]
   22624:	ldr	r2, [sp, #16]
   22628:	ldr	r6, [r3, #72]	; 0x48
   2262c:	mov	r3, #0
   22630:	str	r3, [sp, #116]	; 0x74
   22634:	str	r3, [sp, #120]	; 0x78
   22638:	str	r3, [sp, #124]	; 0x7c
   2263c:	ldr	r3, [sp, #276]	; 0x114
   22640:	cmp	r2, r3
   22644:	ldrls	r3, [sp, #16]
   22648:	strls	r3, [sp, #276]	; 0x114
   2264c:	bls	22c18 <__assert_fail@plt+0x1125c>
   22650:	add	r8, sp, #288	; 0x120
   22654:	mov	r3, #8
   22658:	mov	r2, r8
   2265c:	ldr	r1, [sp, #16]
   22660:	add	r0, sp, #276	; 0x114
   22664:	bl	26b14 <__assert_fail@plt+0x15158>
   22668:	cmp	r0, #0
   2266c:	bne	22c18 <__assert_fail@plt+0x1125c>
   22670:	ldr	r0, [sp, #284]	; 0x11c
   22674:	cmp	r0, r8
   22678:	beq	22680 <__assert_fail@plt+0x10cc4>
   2267c:	bl	1a30c <__assert_fail@plt+0x8950>
   22680:	add	r3, sp, #288	; 0x120
   22684:	str	r3, [sp, #284]	; 0x11c
   22688:	mov	r3, #0
   2268c:	str	r3, [sp, #276]	; 0x114
   22690:	mvn	r3, #0
   22694:	str	r3, [sp, #280]	; 0x118
   22698:	add	r0, sp, #276	; 0x114
   2269c:	bl	1f45c <__assert_fail@plt+0xdaa0>
   226a0:	mov	r0, r5
   226a4:	bl	1bea4 <__assert_fail@plt+0xa4e8>
   226a8:	b	218e4 <__assert_fail@plt+0xff28>
   226ac:	ldr	r5, [sp, #28]
   226b0:	b	22620 <__assert_fail@plt+0x10c64>
   226b4:	cmp	ip, #9
   226b8:	bne	22ca0 <__assert_fail@plt+0x112e4>
   226bc:	ldr	r3, [r3, r1]
   226c0:	add	r3, r3, #1
   226c4:	cmp	r7, r3
   226c8:	ble	22ca0 <__assert_fail@plt+0x112e4>
   226cc:	ldr	ip, [r4, r3, lsl #3]
   226d0:	add	r1, r4, r3, lsl #3
   226d4:	cmp	r2, ip
   226d8:	ble	226f4 <__assert_fail@plt+0x10d38>
   226dc:	str	r2, [r1, #4]
   226e0:	ldr	r0, [sp, #20]
   226e4:	ldr	r2, [sp, #24]
   226e8:	mov	r1, r4
   226ec:	bl	115e4 <memcpy@plt>
   226f0:	b	22ca0 <__assert_fail@plt+0x112e4>
   226f4:	ldrb	r0, [r0, #6]
   226f8:	tst	r0, #8
   226fc:	beq	2271c <__assert_fail@plt+0x10d60>
   22700:	ldr	r0, [sp, #20]
   22704:	ldr	r3, [r0, r3, lsl #3]
   22708:	cmn	r3, #1
   2270c:	movne	r1, r0
   22710:	ldrne	r2, [sp, #24]
   22714:	movne	r0, r4
   22718:	bne	226ec <__assert_fail@plt+0x10d30>
   2271c:	str	r2, [r1, #4]
   22720:	b	22ca0 <__assert_fail@plt+0x112e4>
   22724:	cmp	r5, #0
   22728:	beq	22778 <__assert_fail@plt+0x10dbc>
   2272c:	mov	r2, r4
   22730:	mov	r3, #0
   22734:	ldr	r1, [r4, r3, lsl #3]
   22738:	cmp	r1, #0
   2273c:	blt	227a0 <__assert_fail@plt+0x10de4>
   22740:	ldr	r1, [r2, #4]
   22744:	cmn	r1, #1
   22748:	bne	227a0 <__assert_fail@plt+0x10de4>
   2274c:	add	r3, sp, #116	; 0x74
   22750:	str	r3, [sp, #4]
   22754:	ldr	r3, [sp, #20]
   22758:	mov	r2, r7
   2275c:	str	r3, [sp]
   22760:	ldr	r1, [sp, #28]
   22764:	mov	r3, r4
   22768:	mov	r0, r5
   2276c:	bl	1c1d4 <__assert_fail@plt+0xa818>
   22770:	subs	r6, r0, #0
   22774:	bge	22cd8 <__assert_fail@plt+0x1131c>
   22778:	ldr	r0, [sp, #124]	; 0x7c
   2277c:	bl	1a30c <__assert_fail@plt+0x8950>
   22780:	add	r0, sp, #276	; 0x114
   22784:	bl	1f45c <__assert_fail@plt+0xdaa0>
   22788:	mov	r0, r5
   2278c:	bl	1bea4 <__assert_fail@plt+0xa4e8>
   22790:	cmp	r0, #0
   22794:	beq	224b8 <__assert_fail@plt+0x10afc>
   22798:	str	r0, [sp, #12]
   2279c:	b	2242c <__assert_fail@plt+0x10a70>
   227a0:	add	r3, r3, #1
   227a4:	cmp	r7, r3
   227a8:	add	r2, r2, #8
   227ac:	bne	22734 <__assert_fail@plt+0x10d78>
   227b0:	b	22778 <__assert_fail@plt+0x10dbc>
   227b4:	mov	r1, r6
   227b8:	add	r0, sp, #116	; 0x74
   227bc:	bl	1dafc <__assert_fail@plt+0xc140>
   227c0:	cmp	r0, #0
   227c4:	bne	22d28 <__assert_fail@plt+0x1136c>
   227c8:	ldr	r0, [sp, #124]	; 0x7c
   227cc:	bl	1a30c <__assert_fail@plt+0x8950>
   227d0:	b	22698 <__assert_fail@plt+0x10cdc>
   227d4:	mov	r6, r8
   227d8:	add	r3, r3, #1
   227dc:	b	22d34 <__assert_fail@plt+0x11378>
   227e0:	ldrb	r1, [r1, #6]
   227e4:	tst	r1, #16
   227e8:	beq	2287c <__assert_fail@plt+0x10ec0>
   227ec:	ldr	r3, [sp, #112]	; 0x70
   227f0:	add	r2, sp, #140	; 0x8c
   227f4:	mov	r1, r6
   227f8:	mov	r0, r8
   227fc:	bl	1cf10 <__assert_fail@plt+0xb554>
   22800:	subs	r3, r0, #0
   22804:	bne	2295c <__assert_fail@plt+0x10fa0>
   22808:	ldr	r1, [r8]
   2280c:	ldr	r2, [sp, #112]	; 0x70
   22810:	add	r1, r1, r9
   22814:	add	r0, sp, #140	; 0x8c
   22818:	bl	1e330 <__assert_fail@plt+0xc974>
   2281c:	cmp	r0, #0
   22820:	movne	r3, #0
   22824:	bne	2295c <__assert_fail@plt+0x10fa0>
   22828:	add	r3, sp, #116	; 0x74
   2282c:	str	r3, [sp, #4]
   22830:	ldr	r3, [sp, #20]
   22834:	mov	r2, r7
   22838:	str	r3, [sp]
   2283c:	ldr	r1, [sp, #28]
   22840:	mov	r3, r4
   22844:	mov	r0, r5
   22848:	bl	1c1d4 <__assert_fail@plt+0xa818>
   2284c:	subs	r6, r0, #0
   22850:	bge	22c58 <__assert_fail@plt+0x1129c>
   22854:	ldr	r0, [sp, #124]	; 0x7c
   22858:	bl	1a30c <__assert_fail@plt+0x8950>
   2285c:	add	r0, sp, #276	; 0x114
   22860:	bl	1f45c <__assert_fail@plt+0xdaa0>
   22864:	mov	r0, r5
   22868:	bl	1bea4 <__assert_fail@plt+0xa4e8>
   2286c:	b	219a8 <__assert_fail@plt+0xffec>
   22870:	beq	feacd320 <optarg@@GLIBC_2.4+0xfea93100>
   22874:	andeq	pc, r3, r0, lsl #30
   22878:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2287c:	cmp	r2, #4
   22880:	bne	22808 <__assert_fail@plt+0x10e4c>
   22884:	ldr	r3, [r3, r9]
   22888:	add	r3, r3, #1
   2288c:	cmp	r7, r3
   22890:	ble	228b8 <__assert_fail@plt+0x10efc>
   22894:	add	r2, r4, r3, lsl #3
   22898:	ldr	r0, [r4, r3, lsl #3]
   2289c:	ldr	r2, [r2, #4]
   228a0:	cmp	r5, #0
   228a4:	sub	r3, r2, r0
   228a8:	bne	2290c <__assert_fail@plt+0x10f50>
   228ac:	cmp	r3, #0
   228b0:	bne	2295c <__assert_fail@plt+0x10fa0>
   228b4:	b	228c0 <__assert_fail@plt+0x10f04>
   228b8:	cmp	r5, #0
   228bc:	bne	22828 <__assert_fail@plt+0x10e6c>
   228c0:	mov	r1, r6
   228c4:	add	r0, sp, #116	; 0x74
   228c8:	bl	1dafc <__assert_fail@plt+0xc140>
   228cc:	cmp	r0, #0
   228d0:	beq	227c8 <__assert_fail@plt+0x10e0c>
   228d4:	ldr	r2, [r8, #20]
   228d8:	mov	r3, #12
   228dc:	mla	r6, r3, r6, r2
   228e0:	ldr	r2, [sp, #112]	; 0x70
   228e4:	ldr	r3, [r6, #8]
   228e8:	ldr	r6, [r3]
   228ec:	ldr	r3, [sp, #240]	; 0xf0
   228f0:	mov	r1, r6
   228f4:	ldr	r0, [r3, r2, lsl #2]
   228f8:	add	r0, r0, #4
   228fc:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   22900:	cmp	r0, #0
   22904:	beq	22808 <__assert_fail@plt+0x10e4c>
   22908:	b	22e54 <__assert_fail@plt+0x11498>
   2290c:	cmn	r0, #1
   22910:	beq	22828 <__assert_fail@plt+0x10e6c>
   22914:	cmn	r2, #1
   22918:	beq	22828 <__assert_fail@plt+0x10e6c>
   2291c:	cmp	r3, #0
   22920:	beq	228c0 <__assert_fail@plt+0x10f04>
   22924:	ldr	r1, [sp, #112]	; 0x70
   22928:	ldr	r2, [sp, #168]	; 0xa8
   2292c:	ldr	ip, [sp, #144]	; 0x90
   22930:	sub	r2, r2, r1
   22934:	cmp	r3, r2
   22938:	bgt	22828 <__assert_fail@plt+0x10e6c>
   2293c:	mov	r2, r3
   22940:	add	r1, ip, r1
   22944:	add	r0, ip, r0
   22948:	str	r3, [sp, #40]	; 0x28
   2294c:	bl	1162c <memcmp@plt>
   22950:	ldr	r3, [sp, #40]	; 0x28
   22954:	cmp	r0, #0
   22958:	bne	22828 <__assert_fail@plt+0x10e6c>
   2295c:	ldr	r2, [r8, #12]
   22960:	cmp	r3, #0
   22964:	ldr	r6, [r2, sl, lsl #2]
   22968:	ldr	r2, [sp, #112]	; 0x70
   2296c:	addeq	r3, r2, #1
   22970:	addne	r3, r3, r2
   22974:	cmp	r5, #0
   22978:	str	r3, [sp, #112]	; 0x70
   2297c:	beq	229b0 <__assert_fail@plt+0x10ff4>
   22980:	ldr	r2, [sp, #232]	; 0xe8
   22984:	cmp	r3, r2
   22988:	bgt	22828 <__assert_fail@plt+0x10e6c>
   2298c:	ldr	r2, [sp, #240]	; 0xf0
   22990:	ldr	r0, [r2, r3, lsl #2]
   22994:	cmp	r0, #0
   22998:	beq	22828 <__assert_fail@plt+0x10e6c>
   2299c:	mov	r1, r6
   229a0:	add	r0, r0, #4
   229a4:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   229a8:	cmp	r0, #0
   229ac:	beq	22828 <__assert_fail@plt+0x10e6c>
   229b0:	mov	r3, #0
   229b4:	str	r3, [sp, #120]	; 0x78
   229b8:	b	22e54 <__assert_fail@plt+0x11498>
   229bc:	mov	r6, r8
   229c0:	b	22e54 <__assert_fail@plt+0x11498>
   229c4:	str	r0, [r6, #-8]
   229c8:	str	r0, [r6, #-4]
   229cc:	add	r2, r2, #1
   229d0:	b	22548 <__assert_fail@plt+0x10b8c>
   229d4:	ldr	r3, [fp, #40]	; 0x28
   229d8:	cmp	r3, #0
   229dc:	beq	218a0 <__assert_fail@plt+0xfee4>
   229e0:	ldr	r1, [fp, #44]	; 0x2c
   229e4:	cmp	r1, #0
   229e8:	beq	218a0 <__assert_fail@plt+0xfee4>
   229ec:	ldr	r0, [fp, #48]	; 0x30
   229f0:	cmp	r0, #0
   229f4:	beq	218a0 <__assert_fail@plt+0xfee4>
   229f8:	ldr	r2, [r2, #8]
   229fc:	cmp	r2, #0
   22a00:	bne	22a40 <__assert_fail@plt+0x11084>
   22a04:	ldr	r3, [r3, #8]
   22a08:	cmp	r3, #0
   22a0c:	bne	22a40 <__assert_fail@plt+0x11084>
   22a10:	ldr	r3, [r1, #8]
   22a14:	cmp	r3, #0
   22a18:	beq	22a28 <__assert_fail@plt+0x1106c>
   22a1c:	ldrsb	r3, [sl, #28]
   22a20:	cmp	r3, #0
   22a24:	blt	22a40 <__assert_fail@plt+0x11084>
   22a28:	cmp	r5, #0
   22a2c:	cmpne	r8, #0
   22a30:	movne	r8, #1
   22a34:	moveq	r8, #0
   22a38:	bne	218a0 <__assert_fail@plt+0xfee4>
   22a3c:	mov	r5, r8
   22a40:	ldr	r3, [sp, #68]	; 0x44
   22a44:	subs	r3, r6, r3
   22a48:	str	r3, [sp, #16]
   22a4c:	movne	r3, #1
   22a50:	bne	22a60 <__assert_fail@plt+0x110a4>
   22a54:	ldr	r3, [fp, #76]	; 0x4c
   22a58:	adds	r3, r3, #0
   22a5c:	movne	r3, #1
   22a60:	ldr	ip, [sp, #32]
   22a64:	str	r3, [sp, #56]	; 0x38
   22a68:	ldr	r3, [sl, #20]
   22a6c:	ldr	r2, [fp, #8]
   22a70:	str	ip, [sp, #140]	; 0x8c
   22a74:	ldr	ip, [sp, #36]	; 0x24
   22a78:	ldr	r0, [fp, #92]	; 0x5c
   22a7c:	str	r3, [sp, #24]
   22a80:	ldr	r3, [sl, #12]
   22a84:	add	r2, r2, #1
   22a88:	str	ip, [sp, #188]	; 0xbc
   22a8c:	str	ip, [sp, #184]	; 0xb8
   22a90:	ldr	ip, [sp, #24]
   22a94:	cmp	r2, r0
   22a98:	movlt	r2, r0
   22a9c:	lsr	r3, r3, #22
   22aa0:	adds	r6, ip, #0
   22aa4:	and	r3, r3, #1
   22aa8:	movne	r6, #1
   22aac:	strb	r3, [sp, #212]	; 0xd4
   22ab0:	orr	r3, r3, r6
   22ab4:	strb	r3, [sp, #215]	; 0xd7
   22ab8:	ldrb	r3, [fp, #88]	; 0x58
   22abc:	ldr	r1, [sp, #36]	; 0x24
   22ac0:	str	r0, [sp, #220]	; 0xdc
   22ac4:	add	r1, r1, #1
   22ac8:	lsr	r0, r3, #2
   22acc:	lsr	r3, r3, #3
   22ad0:	and	r3, r3, #1
   22ad4:	cmp	r2, r1
   22ad8:	and	r0, r0, #1
   22adc:	strb	r3, [sp, #214]	; 0xd6
   22ae0:	ldr	r3, [sp, #36]	; 0x24
   22ae4:	strb	r0, [sp, #213]	; 0xd5
   22ae8:	movlt	r1, r2
   22aec:	add	r0, sp, #140	; 0x8c
   22af0:	str	r3, [sp, #196]	; 0xc4
   22af4:	str	r3, [sp, #192]	; 0xc0
   22af8:	str	ip, [sp, #204]	; 0xcc
   22afc:	bl	1ace0 <__assert_fail@plt+0x9324>
   22b00:	subs	r3, r0, #0
   22b04:	str	r3, [sp, #12]
   22b08:	bne	2242c <__assert_fail@plt+0x10a70>
   22b0c:	add	r3, fp, #96	; 0x60
   22b10:	str	r3, [sp, #208]	; 0xd0
   22b14:	ldrb	r3, [fp, #88]	; 0x58
   22b18:	lsr	r3, r3, #4
   22b1c:	and	r3, r3, #1
   22b20:	strb	r3, [sp, #218]	; 0xda
   22b24:	ldrb	r3, [sp, #215]	; 0xd7
   22b28:	cmp	r3, #0
   22b2c:	ldrne	r2, [sp, #144]	; 0x90
   22b30:	ldreq	r2, [sp, #32]
   22b34:	cmp	r3, #0
   22b38:	str	r2, [sp, #144]	; 0x90
   22b3c:	movne	r3, #0
   22b40:	bne	22b58 <__assert_fail@plt+0x1119c>
   22b44:	ldr	r3, [fp, #92]	; 0x5c
   22b48:	ldr	r2, [sp, #36]	; 0x24
   22b4c:	cmp	r3, #1
   22b50:	movgt	r2, #0
   22b54:	mov	r3, r2
   22b58:	str	r3, [sp, #168]	; 0xa8
   22b5c:	str	r3, [sp, #172]	; 0xac
   22b60:	ldrb	r3, [sl, #28]
   22b64:	str	r7, [sp, #196]	; 0xc4
   22b68:	str	r7, [sp, #192]	; 0xc0
   22b6c:	lsr	r3, r3, #7
   22b70:	strb	r3, [sp, #217]	; 0xd9
   22b74:	ldr	r9, [fp, #76]	; 0x4c
   22b78:	ldr	r3, [sp, #472]	; 0x1d8
   22b7c:	lsl	r7, r9, #1
   22b80:	str	r3, [sp, #228]	; 0xe4
   22b84:	cmp	r7, #0
   22b88:	mvn	r3, #0
   22b8c:	str	r3, [sp, #232]	; 0xe8
   22b90:	bgt	218ac <__assert_fail@plt+0xfef0>
   22b94:	mov	r3, #1
   22b98:	str	r3, [sp, #260]	; 0x104
   22b9c:	ldr	r3, [sp, #16]
   22ba0:	str	r7, [sp, #252]	; 0xfc
   22ba4:	cmp	r3, #1
   22ba8:	str	r7, [sp, #268]	; 0x10c
   22bac:	bhi	218ec <__assert_fail@plt+0xff30>
   22bb0:	ldrb	r3, [fp, #88]	; 0x58
   22bb4:	tst	r3, #2
   22bb8:	bne	218ec <__assert_fail@plt+0xff30>
   22bbc:	ldr	r3, [sp, #472]	; 0x1d8
   22bc0:	str	r5, [sp, #108]	; 0x6c
   22bc4:	tst	r3, #1
   22bc8:	moveq	r3, #6
   22bcc:	movne	r3, #4
   22bd0:	cmp	r5, r8
   22bd4:	str	r3, [sp, #200]	; 0xc8
   22bd8:	movle	r3, #1
   22bdc:	mvngt	r3, #0
   22be0:	str	r3, [sp, #80]	; 0x50
   22be4:	movlt	r3, r5
   22be8:	movge	r3, r8
   22bec:	str	r3, [sp, #60]	; 0x3c
   22bf0:	movge	r3, r5
   22bf4:	movlt	r3, r8
   22bf8:	str	r3, [sp, #40]	; 0x28
   22bfc:	ldr	r3, [fp, #92]	; 0x5c
   22c00:	str	r3, [sp, #92]	; 0x5c
   22c04:	ldr	r3, [sp, #20]
   22c08:	cmp	r3, #0
   22c0c:	bne	21914 <__assert_fail@plt+0xff58>
   22c10:	mov	r3, #8
   22c14:	b	21958 <__assert_fail@plt+0xff9c>
   22c18:	ldr	r3, [sp, #284]	; 0x11c
   22c1c:	mov	r1, r4
   22c20:	str	r3, [sp, #20]
   22c24:	ldr	r3, [sp, #16]
   22c28:	ldr	r0, [sp, #20]
   22c2c:	lsl	r3, r3, #3
   22c30:	mov	r2, r3
   22c34:	str	r3, [sp, #24]
   22c38:	bl	115e4 <memcpy@plt>
   22c3c:	ldr	r3, [r4]
   22c40:	add	r2, sp, #416	; 0x1a0
   22c44:	str	r3, [r2, #-304]!	; 0xfffffed0
   22c48:	ldr	r3, [sp, #16]
   22c4c:	str	r2, [sp, #28]
   22c50:	lsl	r3, r3, #4
   22c54:	str	r3, [sp, #36]	; 0x24
   22c58:	ldr	r2, [sp, #112]	; 0x70
   22c5c:	ldr	r3, [r4, #4]
   22c60:	cmp	r2, r3
   22c64:	bgt	22778 <__assert_fail@plt+0x10dbc>
   22c68:	ldr	r3, [sp, #32]
   22c6c:	lsl	r1, r6, #3
   22c70:	ldr	r3, [r3]
   22c74:	add	r0, r3, r1
   22c78:	ldrb	ip, [r0, #4]
   22c7c:	cmp	ip, #8
   22c80:	bne	226b4 <__assert_fail@plt+0x10cf8>
   22c84:	ldr	r3, [r3, r6, lsl #3]
   22c88:	add	r3, r3, #1
   22c8c:	cmp	r7, r3
   22c90:	addgt	r1, r4, r3, lsl #3
   22c94:	strgt	r2, [r4, r3, lsl #3]
   22c98:	mvngt	r3, #0
   22c9c:	strgt	r3, [r1, #4]
   22ca0:	ldr	r2, [r4, #4]
   22ca4:	ldr	r3, [sp, #112]	; 0x70
   22ca8:	cmp	r2, r3
   22cac:	bne	22cbc <__assert_fail@plt+0x11300>
   22cb0:	ldr	r3, [sp, #236]	; 0xec
   22cb4:	cmp	r6, r3
   22cb8:	beq	22724 <__assert_fail@plt+0x10d68>
   22cbc:	cmp	r5, #0
   22cc0:	beq	22cd8 <__assert_fail@plt+0x1131c>
   22cc4:	mov	r1, r6
   22cc8:	add	r0, sp, #116	; 0x74
   22ccc:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   22cd0:	cmp	r0, #0
   22cd4:	bne	2272c <__assert_fail@plt+0x10d70>
   22cd8:	ldr	r8, [sp, #224]	; 0xe0
   22cdc:	lsl	r9, r6, #3
   22ce0:	mov	sl, r6
   22ce4:	ldr	r3, [r8]
   22ce8:	add	r1, r3, r9
   22cec:	ldrb	r2, [r1, #4]
   22cf0:	tst	r2, #8
   22cf4:	beq	227e0 <__assert_fail@plt+0x10e24>
   22cf8:	ldr	r3, [sp, #240]	; 0xf0
   22cfc:	ldr	r2, [sp, #112]	; 0x70
   22d00:	mov	sl, #12
   22d04:	mov	r1, r6
   22d08:	ldr	r9, [r3, r2, lsl #2]
   22d0c:	ldr	r3, [r8, #20]
   22d10:	add	r0, sp, #116	; 0x74
   22d14:	mla	sl, sl, r6, r3
   22d18:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   22d1c:	add	r9, r9, #4
   22d20:	cmp	r0, #0
   22d24:	beq	227b4 <__assert_fail@plt+0x10df8>
   22d28:	ldr	r2, [sl, #4]
   22d2c:	mov	r3, #0
   22d30:	mvn	r6, #0
   22d34:	cmp	r3, r2
   22d38:	bge	22e54 <__assert_fail@plt+0x11498>
   22d3c:	ldr	r1, [sl, #8]
   22d40:	mov	r0, r9
   22d44:	str	r2, [sp, #44]	; 0x2c
   22d48:	ldr	r8, [r1, r3, lsl #2]
   22d4c:	str	r3, [sp, #40]	; 0x28
   22d50:	mov	r1, r8
   22d54:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   22d58:	ldr	r3, [sp, #40]	; 0x28
   22d5c:	ldr	r2, [sp, #44]	; 0x2c
   22d60:	cmp	r0, #0
   22d64:	beq	227d8 <__assert_fail@plt+0x10e1c>
   22d68:	cmn	r6, #1
   22d6c:	beq	227d4 <__assert_fail@plt+0x10e18>
   22d70:	mov	r1, r6
   22d74:	add	r0, sp, #116	; 0x74
   22d78:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   22d7c:	cmp	r0, #0
   22d80:	bne	229bc <__assert_fail@plt+0x11000>
   22d84:	cmp	r5, #0
   22d88:	beq	22e54 <__assert_fail@plt+0x11498>
   22d8c:	ldr	r9, [r5]
   22d90:	ldr	r2, [r5, #4]
   22d94:	add	r3, r9, #1
   22d98:	cmp	r3, r2
   22d9c:	ldr	sl, [sp, #112]	; 0x70
   22da0:	str	r3, [r5]
   22da4:	bne	22dd0 <__assert_fail@plt+0x11414>
   22da8:	mov	r1, #48	; 0x30
   22dac:	ldr	r0, [r5, #8]
   22db0:	mul	r1, r1, r3
   22db4:	bl	1a484 <__assert_fail@plt+0x8ac8>
   22db8:	cmp	r0, #0
   22dbc:	beq	227c8 <__assert_fail@plt+0x10e0c>
   22dc0:	ldr	r3, [r5, #4]
   22dc4:	str	r0, [r5, #8]
   22dc8:	lsl	r3, r3, #1
   22dcc:	str	r3, [r5, #4]
   22dd0:	mov	r0, #24
   22dd4:	ldr	r2, [r5, #8]
   22dd8:	mul	r9, r0, r9
   22ddc:	ldr	r0, [sp, #36]	; 0x24
   22de0:	add	r3, r2, r9
   22de4:	str	sl, [r2, r9]
   22de8:	str	r8, [r3, #4]
   22dec:	str	r3, [sp, #40]	; 0x28
   22df0:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   22df4:	ldr	r3, [sp, #40]	; 0x28
   22df8:	str	r0, [r3, #8]
   22dfc:	ldr	r3, [r5, #8]
   22e00:	add	r3, r3, r9
   22e04:	ldr	r0, [r3, #8]
   22e08:	cmp	r0, #0
   22e0c:	beq	227c8 <__assert_fail@plt+0x10e0c>
   22e10:	ldr	r2, [sp, #24]
   22e14:	mov	r1, r4
   22e18:	bl	115e4 <memcpy@plt>
   22e1c:	ldr	r3, [r5, #8]
   22e20:	ldr	r2, [sp, #24]
   22e24:	add	r3, r3, r9
   22e28:	ldr	r1, [sp, #20]
   22e2c:	ldr	r0, [r3, #8]
   22e30:	add	r0, r0, r2
   22e34:	bl	115e4 <memcpy@plt>
   22e38:	ldr	r0, [r5, #8]
   22e3c:	add	r1, sp, #116	; 0x74
   22e40:	add	r0, r0, r9
   22e44:	add	r0, r0, #12
   22e48:	bl	1d314 <__assert_fail@plt+0xb958>
   22e4c:	cmp	r0, #0
   22e50:	bne	227c8 <__assert_fail@plt+0x10e0c>
   22e54:	cmp	r6, #0
   22e58:	bge	22c58 <__assert_fail@plt+0x1129c>
   22e5c:	cmn	r6, #2
   22e60:	bne	22828 <__assert_fail@plt+0x10e6c>
   22e64:	b	227c8 <__assert_fail@plt+0x10e0c>
   22e68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e6c:	sub	sp, sp, #156	; 0x9c
   22e70:	mov	fp, r0
   22e74:	ldr	r9, [sp, #196]	; 0xc4
   22e78:	mov	r5, r1
   22e7c:	mov	sl, r2
   22e80:	and	r6, r3, #16777216	; 0x1000000
   22e84:	and	r7, r3, #32
   22e88:	and	r8, r3, #16
   22e8c:	str	r3, [sp, #12]
   22e90:	ldrb	r3, [sl, #4]
   22e94:	ldr	r4, [r5]
   22e98:	sub	r2, r3, #1
   22e9c:	cmp	r2, #35	; 0x23
   22ea0:	ldrls	pc, [pc, r2, lsl #2]
   22ea4:	b	239a4 <__assert_fail@plt+0x11fe8>
   22ea8:	andeq	r2, r2, r8, lsr pc
   22eac:	andeq	r3, r2, ip, lsr r1
   22eb0:	andeq	r3, r2, r4, lsr #19
   22eb4:	andeq	r3, r2, r0, ror r6
   22eb8:	andeq	r3, r2, ip, lsl r9
   22ebc:	andeq	r3, r2, r4, lsr #19
   22ec0:	andeq	r3, r2, r4, lsr #19
   22ec4:	andeq	r3, r2, ip, lsl #1
   22ec8:	andeq	r3, r2, ip, lsl #14
   22ecc:	andeq	r3, r2, ip, lsr r1
   22ed0:	andeq	r3, r2, r0, ror #13
   22ed4:	andeq	r3, r2, r4, asr r7
   22ed8:	andeq	r3, r2, r4, lsr #19
   22edc:	andeq	r3, r2, r4, lsr #19
   22ee0:	andeq	r3, r2, r4, lsr #19
   22ee4:	andeq	r3, r2, r4, lsr #19
   22ee8:	andeq	r3, r2, r4, lsr #19
   22eec:	andeq	r3, r2, r0, ror #13
   22ef0:	andeq	r3, r2, r0, ror #13
   22ef4:	andeq	r3, r2, r8, lsl #3
   22ef8:	andeq	r3, r2, r4, lsr #19
   22efc:	andeq	r3, r2, r4, lsr #19
   22f00:	ldrdeq	r3, [r2], -r0
   22f04:	andeq	r3, r2, ip, lsr #14
   22f08:	andeq	r3, r2, r4, lsr #19
   22f0c:	andeq	r3, r2, r4, lsr #19
   22f10:	andeq	r3, r2, r4, lsr #19
   22f14:	andeq	r3, r2, r4, lsr #19
   22f18:	andeq	r3, r2, r4, lsr #19
   22f1c:	andeq	r3, r2, r4, lsr #19
   22f20:	andeq	r3, r2, r4, lsr #19
   22f24:	andeq	r3, r2, r8, asr #18
   22f28:	andeq	r3, r2, r8, asr #18
   22f2c:	andeq	r3, r2, ip, ror r9
   22f30:	andeq	r3, r2, ip, ror r9
   22f34:	muleq	r2, ip, r9
   22f38:	mov	r2, #0
   22f3c:	mov	r3, sl
   22f40:	mov	r1, r2
   22f44:	mov	r0, r4
   22f48:	bl	1add8 <__assert_fail@plt+0x941c>
   22f4c:	subs	r5, r0, #0
   22f50:	bne	22f60 <__assert_fail@plt+0x115a4>
   22f54:	mov	r3, #12
   22f58:	str	r3, [r9]
   22f5c:	b	2313c <__assert_fail@plt+0x11780>
   22f60:	ldr	r3, [r4, #92]	; 0x5c
   22f64:	cmp	r3, #1
   22f68:	movgt	r7, #0
   22f6c:	movgt	r8, #16
   22f70:	bgt	2305c <__assert_fail@plt+0x116a0>
   22f74:	ldr	r2, [sp, #12]
   22f78:	mov	r1, fp
   22f7c:	mov	r0, sl
   22f80:	bl	1f390 <__assert_fail@plt+0xd9d4>
   22f84:	ldrb	r3, [sl, #4]
   22f88:	cmp	r3, #23
   22f8c:	movhi	r7, #1
   22f90:	ldrls	r2, [pc, #3844]	; 23e9c <__assert_fail@plt+0x124e0>
   22f94:	sub	r8, r3, #18
   22f98:	clz	r8, r8
   22f9c:	mvnls	r7, r2, lsr r3
   22fa0:	ands	r7, r7, #1
   22fa4:	lsr	r8, r8, #5
   22fa8:	bne	23720 <__assert_fail@plt+0x11d64>
   22fac:	ldr	r2, [fp, #40]	; 0x28
   22fb0:	ldm	sl, {r0, r1}
   22fb4:	str	r2, [sp, #16]
   22fb8:	add	r2, sp, #120	; 0x78
   22fbc:	cmp	r3, #23
   22fc0:	stm	r2, {r0, r1}
   22fc4:	bne	23ac0 <__assert_fail@plt+0x12104>
   22fc8:	ldr	r2, [sp, #12]
   22fcc:	mov	r1, sl
   22fd0:	mov	r0, fp
   22fd4:	bl	1f3ac <__assert_fail@plt+0xd9f0>
   22fd8:	cmn	r0, #1
   22fdc:	mov	r8, r0
   22fe0:	bne	239a4 <__assert_fail@plt+0x11fe8>
   22fe4:	ldrb	r3, [sl, #4]
   22fe8:	cmp	r3, #1
   22fec:	bne	23000 <__assert_fail@plt+0x11644>
   22ff0:	ldrb	r3, [sl]
   22ff4:	cmp	r3, #44	; 0x2c
   22ff8:	moveq	r8, r7
   22ffc:	beq	23a10 <__assert_fail@plt+0x12054>
   23000:	mov	r3, #10
   23004:	str	r3, [r9]
   23008:	mov	r6, #0
   2300c:	b	239d8 <__assert_fail@plt+0x1201c>
   23010:	ldr	r2, [sp, #12]
   23014:	mov	r1, fp
   23018:	mov	r0, sl
   2301c:	bl	1f390 <__assert_fail@plt+0xd9d4>
   23020:	mov	r3, sl
   23024:	mov	r2, r7
   23028:	mov	r1, #0
   2302c:	mov	r0, r4
   23030:	bl	1add8 <__assert_fail@plt+0x941c>
   23034:	mov	r1, r5
   23038:	mov	r3, r8
   2303c:	mov	r6, r0
   23040:	mov	r2, r0
   23044:	mov	r0, r4
   23048:	bl	1af28 <__assert_fail@plt+0x956c>
   2304c:	cmp	r0, #0
   23050:	cmpne	r6, #0
   23054:	mov	r5, r0
   23058:	beq	22f54 <__assert_fail@plt+0x11598>
   2305c:	ldr	r3, [fp, #40]	; 0x28
   23060:	ldr	r2, [fp, #56]	; 0x38
   23064:	cmp	r2, r3
   23068:	ble	22f74 <__assert_fail@plt+0x115b8>
   2306c:	ldr	r2, [fp, #28]
   23070:	cmp	r3, r2
   23074:	beq	22f74 <__assert_fail@plt+0x115b8>
   23078:	ldr	r2, [fp, #8]
   2307c:	ldr	r3, [r2, r3, lsl #2]
   23080:	cmn	r3, #1
   23084:	beq	23010 <__assert_fail@plt+0x11654>
   23088:	b	22f74 <__assert_fail@plt+0x115b8>
   2308c:	ldr	r6, [r5, #24]
   23090:	mov	r1, fp
   23094:	add	r3, r6, #1
   23098:	str	r3, [r5, #24]
   2309c:	ldr	r3, [sp, #12]
   230a0:	mov	r0, sl
   230a4:	orr	r2, r3, #8388608	; 0x800000
   230a8:	bl	1f390 <__assert_fail@plt+0xd9d4>
   230ac:	ldrb	r3, [sl, #4]
   230b0:	cmp	r3, #9
   230b4:	beq	23144 <__assert_fail@plt+0x11788>
   230b8:	ldr	r3, [sp, #192]	; 0xc0
   230bc:	mov	r2, sl
   230c0:	add	r3, r3, #1
   230c4:	str	r3, [sp]
   230c8:	mov	r1, r5
   230cc:	str	r9, [sp, #4]
   230d0:	ldr	r3, [sp, #12]
   230d4:	mov	r0, fp
   230d8:	bl	24018 <__assert_fail@plt+0x1265c>
   230dc:	ldr	r2, [r9]
   230e0:	cmp	r2, #0
   230e4:	mov	r5, r0
   230e8:	bne	23110 <__assert_fail@plt+0x11754>
   230ec:	ldrb	r3, [sl, #4]
   230f0:	cmp	r3, #9
   230f4:	beq	23110 <__assert_fail@plt+0x11754>
   230f8:	cmp	r0, #0
   230fc:	beq	23108 <__assert_fail@plt+0x1174c>
   23100:	ldr	r1, [pc, #3480]	; 23ea0 <__assert_fail@plt+0x124e4>
   23104:	bl	1ac08 <__assert_fail@plt+0x924c>
   23108:	mov	r3, #8
   2310c:	str	r3, [r9]
   23110:	ldr	r3, [r9]
   23114:	cmp	r3, #0
   23118:	beq	23148 <__assert_fail@plt+0x1178c>
   2311c:	mov	r5, #0
   23120:	ldr	r3, [r9]
   23124:	adds	r3, r3, #0
   23128:	movne	r3, #1
   2312c:	cmp	r5, #0
   23130:	movne	r3, #0
   23134:	cmp	r3, #0
   23138:	beq	22f74 <__assert_fail@plt+0x115b8>
   2313c:	mov	r5, #0
   23140:	b	23720 <__assert_fail@plt+0x11d64>
   23144:	mov	r5, #0
   23148:	cmp	r6, #8
   2314c:	movls	r2, #1
   23150:	ldrls	r3, [r4, #84]	; 0x54
   23154:	mov	r1, r5
   23158:	orrls	r3, r3, r2, lsl r6
   2315c:	mov	r0, r4
   23160:	strls	r3, [r4, #84]	; 0x54
   23164:	mov	r2, #0
   23168:	mov	r3, #17
   2316c:	bl	1af28 <__assert_fail@plt+0x956c>
   23170:	subs	r5, r0, #0
   23174:	strne	r6, [r5, #20]
   23178:	bne	23120 <__assert_fail@plt+0x11764>
   2317c:	mov	r3, #12
   23180:	str	r3, [r9]
   23184:	b	23120 <__assert_fail@plt+0x11764>
   23188:	mov	r5, #0
   2318c:	mov	r1, #1
   23190:	mov	r0, #32
   23194:	str	r5, [sp, #60]	; 0x3c
   23198:	bl	1a0b0 <__assert_fail@plt+0x86f4>
   2319c:	mov	r1, #1
   231a0:	str	r0, [sp, #16]
   231a4:	mov	r0, #40	; 0x28
   231a8:	bl	1a0b0 <__assert_fail@plt+0x86f4>
   231ac:	ldr	r3, [sp, #16]
   231b0:	cmp	r0, r5
   231b4:	cmpne	r3, r5
   231b8:	moveq	r3, #1
   231bc:	movne	r3, #0
   231c0:	mov	r6, r0
   231c4:	str	r3, [sp, #36]	; 0x24
   231c8:	bne	231e0 <__assert_fail@plt+0x11824>
   231cc:	ldr	r0, [sp, #16]
   231d0:	bl	1a30c <__assert_fail@plt+0x8950>
   231d4:	mov	r0, r6
   231d8:	bl	1a30c <__assert_fail@plt+0x8950>
   231dc:	b	2317c <__assert_fail@plt+0x117c0>
   231e0:	ldr	r2, [sp, #12]
   231e4:	mov	r1, fp
   231e8:	mov	r0, sl
   231ec:	bl	1a728 <__assert_fail@plt+0x8d6c>
   231f0:	ldrb	r3, [sl, #4]
   231f4:	cmp	r3, #2
   231f8:	str	r0, [sp, #24]
   231fc:	bne	2320c <__assert_fail@plt+0x11850>
   23200:	mov	r3, #2
   23204:	str	r3, [r9]
   23208:	b	232e4 <__assert_fail@plt+0x11928>
   2320c:	cmp	r3, #25
   23210:	ldrne	r3, [sp, #36]	; 0x24
   23214:	bne	23270 <__assert_fail@plt+0x118b4>
   23218:	ldrb	r3, [r6, #16]
   2321c:	orr	r3, r3, #1
   23220:	strb	r3, [r6, #16]
   23224:	ldr	r3, [sp, #12]
   23228:	tst	r3, #256	; 0x100
   2322c:	beq	2323c <__assert_fail@plt+0x11880>
   23230:	mov	r1, #10
   23234:	ldr	r0, [sp, #16]
   23238:	bl	1a52c <__assert_fail@plt+0x8b70>
   2323c:	ldr	r3, [fp, #40]	; 0x28
   23240:	ldr	r2, [sp, #24]
   23244:	mov	r1, fp
   23248:	add	r3, r3, r2
   2324c:	str	r3, [fp, #40]	; 0x28
   23250:	ldr	r2, [sp, #12]
   23254:	mov	r0, sl
   23258:	bl	1a728 <__assert_fail@plt+0x8d6c>
   2325c:	ldrb	r3, [sl, #4]
   23260:	cmp	r3, #2
   23264:	movne	r3, #1
   23268:	str	r0, [sp, #24]
   2326c:	beq	23200 <__assert_fail@plt+0x11844>
   23270:	str	r3, [sp, #40]	; 0x28
   23274:	ldrb	r3, [sl, #4]
   23278:	mov	r2, #0
   2327c:	str	r2, [sp, #28]
   23280:	cmp	r3, #21
   23284:	ldr	r2, [sp, #12]
   23288:	moveq	r3, #1
   2328c:	strbeq	r3, [sl, #4]
   23290:	mov	r3, #0
   23294:	str	r3, [sp, #32]
   23298:	lsr	r2, r2, #16
   2329c:	mov	r3, #1
   232a0:	and	r2, r2, r3
   232a4:	str	r2, [sp, #44]	; 0x2c
   232a8:	add	r0, sp, #152	; 0x98
   232ac:	mov	r7, #3
   232b0:	str	r7, [r0, #-88]!	; 0xffffffa8
   232b4:	str	r3, [sp, #4]
   232b8:	ldr	r3, [sp, #12]
   232bc:	add	r2, sp, #88	; 0x58
   232c0:	str	r2, [sp, #68]	; 0x44
   232c4:	str	r3, [sp]
   232c8:	mov	r2, sl
   232cc:	ldr	r3, [sp, #24]
   232d0:	mov	r1, fp
   232d4:	bl	1eb58 <__assert_fail@plt+0xd19c>
   232d8:	subs	r5, r0, #0
   232dc:	beq	232f8 <__assert_fail@plt+0x1193c>
   232e0:	str	r5, [r9]
   232e4:	ldr	r0, [sp, #16]
   232e8:	bl	1a30c <__assert_fail@plt+0x8950>
   232ec:	mov	r0, r6
   232f0:	bl	1b978 <__assert_fail@plt+0x9fbc>
   232f4:	b	2311c <__assert_fail@plt+0x11760>
   232f8:	ldr	r2, [sp, #12]
   232fc:	mov	r1, fp
   23300:	mov	r0, sl
   23304:	bl	1a728 <__assert_fail@plt+0x8d6c>
   23308:	ldr	r3, [sp, #64]	; 0x40
   2330c:	sub	r3, r3, #2
   23310:	bics	r3, r3, #2
   23314:	str	r0, [sp, #24]
   23318:	beq	23388 <__assert_fail@plt+0x119cc>
   2331c:	ldrb	r3, [sl, #4]
   23320:	cmp	r3, #2
   23324:	bne	23330 <__assert_fail@plt+0x11974>
   23328:	mov	r3, #7
   2332c:	b	23204 <__assert_fail@plt+0x11848>
   23330:	cmp	r3, #22
   23334:	bne	23388 <__assert_fail@plt+0x119cc>
   23338:	ldr	r3, [fp, #40]	; 0x28
   2333c:	ldr	r2, [sp, #24]
   23340:	mov	r1, fp
   23344:	add	r3, r3, r2
   23348:	str	r3, [fp, #40]	; 0x28
   2334c:	ldr	r2, [sp, #12]
   23350:	add	r0, sp, #80	; 0x50
   23354:	bl	1a728 <__assert_fail@plt+0x8d6c>
   23358:	ldrb	r2, [sp, #84]	; 0x54
   2335c:	cmp	r2, #2
   23360:	mov	r3, r0
   23364:	beq	23328 <__assert_fail@plt+0x1196c>
   23368:	cmp	r2, #21
   2336c:	bne	23cac <__assert_fail@plt+0x122f0>
   23370:	ldr	r3, [fp, #40]	; 0x28
   23374:	ldr	r2, [sp, #24]
   23378:	sub	r3, r3, r2
   2337c:	str	r3, [fp, #40]	; 0x28
   23380:	mov	r3, #1
   23384:	strb	r3, [sl, #4]
   23388:	ldr	r3, [sp, #64]	; 0x40
   2338c:	cmp	r3, #4
   23390:	ldrls	pc, [pc, r3, lsl #2]
   23394:	b	2354c <__assert_fail@plt+0x11b90>
   23398:	andeq	r3, r2, r4, ror r4
   2339c:	muleq	r2, ip, r4
   233a0:	andeq	r3, r2, ip, ror #9
   233a4:	andeq	r3, r2, ip, ror #9
   233a8:	andeq	r3, r2, ip, lsl r5
   233ac:	ldr	r2, [sp, #12]
   233b0:	mov	r1, fp
   233b4:	mov	r0, sl
   233b8:	bl	1a728 <__assert_fail@plt+0x8d6c>
   233bc:	ldr	r8, [sp, #64]	; 0x40
   233c0:	sub	r3, r8, #2
   233c4:	bics	r3, r3, #2
   233c8:	str	r0, [sp, #24]
   233cc:	beq	233e0 <__assert_fail@plt+0x11a24>
   233d0:	ldr	r7, [sp, #72]	; 0x48
   233d4:	sub	r3, r7, #2
   233d8:	bics	r3, r3, #2
   233dc:	bne	23cec <__assert_fail@plt+0x12330>
   233e0:	mov	r3, #11
   233e4:	b	23e3c <__assert_fail@plt+0x12480>
   233e8:	ldr	r0, [sp, #68]	; 0x44
   233ec:	bl	117ac <strlen@plt>
   233f0:	cmp	r0, #1
   233f4:	bls	23e90 <__assert_fail@plt+0x124d4>
   233f8:	mov	r3, #3
   233fc:	b	23e3c <__assert_fail@plt+0x12480>
   23400:	stmib	r6, {r2, r3}
   23404:	str	r8, [sp, #32]
   23408:	ldr	r2, [r6, #32]
   2340c:	ldr	r3, [r6, #4]
   23410:	str	r5, [r3, r2, lsl #2]
   23414:	ldr	r2, [r6, #8]
   23418:	ldr	r3, [r6, #32]
   2341c:	add	r1, r3, #1
   23420:	str	r1, [r6, #32]
   23424:	str	r7, [r2, r3, lsl #2]
   23428:	mov	r8, #0
   2342c:	cmp	r5, r8
   23430:	movhi	r3, #0
   23434:	movls	r3, #1
   23438:	cmp	r7, r8
   2343c:	movcc	r3, #0
   23440:	cmp	r3, #0
   23444:	beq	23454 <__assert_fail@plt+0x11a98>
   23448:	mov	r1, r8
   2344c:	ldr	r0, [sp, #16]
   23450:	bl	1a52c <__assert_fail@plt+0x8b70>
   23454:	add	r8, r8, #1
   23458:	cmp	r8, #256	; 0x100
   2345c:	bne	2342c <__assert_fail@plt+0x11a70>
   23460:	ldr	r3, [sp, #20]
   23464:	cmp	r3, #0
   23468:	str	r3, [r9]
   2346c:	beq	23480 <__assert_fail@plt+0x11ac4>
   23470:	b	232e4 <__assert_fail@plt+0x11928>
   23474:	ldrb	r1, [sp, #68]	; 0x44
   23478:	ldr	r0, [sp, #16]
   2347c:	bl	1a52c <__assert_fail@plt+0x8b70>
   23480:	ldrb	r3, [sl, #4]
   23484:	cmp	r3, #2
   23488:	beq	23328 <__assert_fail@plt+0x1196c>
   2348c:	cmp	r3, #21
   23490:	beq	2354c <__assert_fail@plt+0x11b90>
   23494:	ldr	r3, [sp, #36]	; 0x24
   23498:	b	232a8 <__assert_fail@plt+0x118ec>
   2349c:	ldr	r3, [r6, #20]
   234a0:	ldr	r2, [sp, #28]
   234a4:	cmp	r3, r2
   234a8:	bne	234d0 <__assert_fail@plt+0x11b14>
   234ac:	lsl	r3, r2, #1
   234b0:	add	r3, r3, #1
   234b4:	ldr	r0, [r6]
   234b8:	lsl	r1, r3, #2
   234bc:	str	r3, [sp, #28]
   234c0:	bl	1a484 <__assert_fail@plt+0x8ac8>
   234c4:	cmp	r0, #0
   234c8:	beq	23e88 <__assert_fail@plt+0x124cc>
   234cc:	str	r0, [r6]
   234d0:	ldr	r3, [r6, #20]
   234d4:	ldr	r2, [r6]
   234d8:	add	r1, r3, #1
   234dc:	str	r1, [r6, #20]
   234e0:	ldr	r1, [sp, #68]	; 0x44
   234e4:	str	r1, [r2, r3, lsl #2]
   234e8:	b	23480 <__assert_fail@plt+0x11ac4>
   234ec:	ldr	r7, [sp, #68]	; 0x44
   234f0:	mov	r0, r7
   234f4:	bl	117ac <strlen@plt>
   234f8:	cmp	r0, #1
   234fc:	movne	r5, #3
   23500:	bne	23510 <__assert_fail@plt+0x11b54>
   23504:	ldrb	r1, [r7]
   23508:	ldr	r0, [sp, #16]
   2350c:	bl	1a52c <__assert_fail@plt+0x8b70>
   23510:	str	r5, [r9]
   23514:	cmp	r5, #0
   23518:	b	2346c <__assert_fail@plt+0x11ab0>
   2351c:	ldr	r3, [sp, #12]
   23520:	mov	r2, r6
   23524:	str	r3, [sp, #4]
   23528:	ldr	r3, [sp, #68]	; 0x44
   2352c:	ldr	r1, [sp, #16]
   23530:	str	r3, [sp]
   23534:	ldr	r0, [fp, #64]	; 0x40
   23538:	add	r3, sp, #60	; 0x3c
   2353c:	bl	1c27c <__assert_fail@plt+0xa8c0>
   23540:	str	r0, [r9]
   23544:	cmp	r0, #0
   23548:	b	2346c <__assert_fail@plt+0x11ab0>
   2354c:	ldr	r3, [fp, #40]	; 0x28
   23550:	ldr	r2, [sp, #24]
   23554:	add	r3, r3, r2
   23558:	str	r3, [fp, #40]	; 0x28
   2355c:	ldr	r3, [sp, #40]	; 0x28
   23560:	cmp	r3, #0
   23564:	beq	23570 <__assert_fail@plt+0x11bb4>
   23568:	ldr	r0, [sp, #16]
   2356c:	bl	1a590 <__assert_fail@plt+0x8bd4>
   23570:	ldr	r3, [r4, #92]	; 0x5c
   23574:	cmp	r3, #1
   23578:	ble	23588 <__assert_fail@plt+0x11bcc>
   2357c:	ldr	r1, [r4, #60]	; 0x3c
   23580:	ldr	r0, [sp, #16]
   23584:	bl	1a5d8 <__assert_fail@plt+0x8c1c>
   23588:	ldr	r3, [r6, #20]
   2358c:	cmp	r3, #0
   23590:	bne	235dc <__assert_fail@plt+0x11c20>
   23594:	ldr	r3, [r6, #24]
   23598:	cmp	r3, #0
   2359c:	bne	235dc <__assert_fail@plt+0x11c20>
   235a0:	ldr	r3, [r6, #28]
   235a4:	cmp	r3, #0
   235a8:	bne	235dc <__assert_fail@plt+0x11c20>
   235ac:	ldr	r3, [r6, #32]
   235b0:	cmp	r3, #0
   235b4:	bne	235dc <__assert_fail@plt+0x11c20>
   235b8:	ldr	r3, [r4, #92]	; 0x5c
   235bc:	cmp	r3, #1
   235c0:	ble	23640 <__assert_fail@plt+0x11c84>
   235c4:	ldr	r3, [r6, #36]	; 0x24
   235c8:	cmp	r3, #0
   235cc:	bne	235dc <__assert_fail@plt+0x11c20>
   235d0:	ldrb	r3, [r6, #16]
   235d4:	tst	r3, #1
   235d8:	beq	23640 <__assert_fail@plt+0x11c84>
   235dc:	ldrb	r3, [r4, #88]	; 0x58
   235e0:	mov	r2, #0
   235e4:	mov	r1, r2
   235e8:	orr	r3, r3, #2
   235ec:	strb	r3, [r4, #88]	; 0x58
   235f0:	mov	r3, #6
   235f4:	strb	r3, [sp, #124]	; 0x7c
   235f8:	mov	r0, r4
   235fc:	add	r3, sp, #120	; 0x78
   23600:	str	r6, [sp, #120]	; 0x78
   23604:	bl	1add8 <__assert_fail@plt+0x941c>
   23608:	subs	r5, r0, #0
   2360c:	beq	23e88 <__assert_fail@plt+0x124cc>
   23610:	ldr	r3, [sp, #16]
   23614:	ldr	r2, [sp, #16]
   23618:	sub	r3, r3, #4
   2361c:	add	r2, r2, #28
   23620:	ldr	r1, [r3, #4]!
   23624:	cmp	r1, #0
   23628:	bne	23e44 <__assert_fail@plt+0x12488>
   2362c:	cmp	r2, r3
   23630:	bne	23620 <__assert_fail@plt+0x11c64>
   23634:	ldr	r0, [sp, #16]
   23638:	bl	1a30c <__assert_fail@plt+0x8950>
   2363c:	b	23120 <__assert_fail@plt+0x11764>
   23640:	mov	r0, r6
   23644:	bl	1b978 <__assert_fail@plt+0x9fbc>
   23648:	mov	r3, #3
   2364c:	strb	r3, [sp, #124]	; 0x7c
   23650:	ldr	r3, [sp, #16]
   23654:	mov	r2, #0
   23658:	str	r3, [sp, #120]	; 0x78
   2365c:	mov	r1, r2
   23660:	add	r3, sp, #120	; 0x78
   23664:	mov	r0, r4
   23668:	bl	1add8 <__assert_fail@plt+0x941c>
   2366c:	b	23e80 <__assert_fail@plt+0x124c4>
   23670:	ldr	r2, [sl]
   23674:	mov	r3, #1
   23678:	ldr	r5, [r4, #84]	; 0x54
   2367c:	lsl	r3, r3, r2
   23680:	ands	r5, r3, r5
   23684:	moveq	r3, #6
   23688:	beq	2371c <__assert_fail@plt+0x11d60>
   2368c:	ldr	r2, [r4, #80]	; 0x50
   23690:	mov	r0, r4
   23694:	orr	r3, r2, r3
   23698:	mov	r2, #0
   2369c:	str	r3, [r4, #80]	; 0x50
   236a0:	mov	r1, r2
   236a4:	mov	r3, sl
   236a8:	bl	1add8 <__assert_fail@plt+0x941c>
   236ac:	subs	r5, r0, #0
   236b0:	ldrne	r3, [r4, #76]	; 0x4c
   236b4:	addne	r3, r3, #1
   236b8:	strne	r3, [r4, #76]	; 0x4c
   236bc:	beq	22f54 <__assert_fail@plt+0x11598>
   236c0:	ldrb	r3, [r4, #88]	; 0x58
   236c4:	orr	r3, r3, #2
   236c8:	strb	r3, [r4, #88]	; 0x58
   236cc:	b	22f74 <__assert_fail@plt+0x115b8>
   236d0:	cmp	r6, #0
   236d4:	beq	236e0 <__assert_fail@plt+0x11d24>
   236d8:	mov	r3, #13
   236dc:	b	22f58 <__assert_fail@plt+0x1159c>
   236e0:	cmp	r7, #0
   236e4:	bne	236d8 <__assert_fail@plt+0x11d1c>
   236e8:	cmp	r8, #0
   236ec:	beq	23704 <__assert_fail@plt+0x11d48>
   236f0:	ldr	r2, [sp, #12]
   236f4:	mov	r1, fp
   236f8:	mov	r0, sl
   236fc:	bl	1f390 <__assert_fail@plt+0xd9d4>
   23700:	b	22e90 <__assert_fail@plt+0x114d4>
   23704:	cmp	r3, #9
   23708:	bne	2372c <__assert_fail@plt+0x11d70>
   2370c:	ldr	r3, [sp, #12]
   23710:	ands	r5, r3, #131072	; 0x20000
   23714:	bne	2372c <__assert_fail@plt+0x11d70>
   23718:	mov	r3, #16
   2371c:	str	r3, [r9]
   23720:	mov	r0, r5
   23724:	add	sp, sp, #156	; 0x9c
   23728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2372c:	mov	r3, #1
   23730:	mov	r2, #0
   23734:	strb	r3, [sl, #4]
   23738:	mov	r1, r2
   2373c:	mov	r3, sl
   23740:	mov	r0, r4
   23744:	bl	1add8 <__assert_fail@plt+0x941c>
   23748:	subs	r5, r0, #0
   2374c:	bne	22f74 <__assert_fail@plt+0x115b8>
   23750:	b	22f54 <__assert_fail@plt+0x11598>
   23754:	ldr	r2, [sl]
   23758:	ldr	r3, [pc, #1860]	; 23ea4 <__assert_fail@plt+0x124e8>
   2375c:	and	r3, r3, r2
   23760:	cmp	r3, #0
   23764:	beq	237b4 <__assert_fail@plt+0x11df8>
   23768:	ldrb	r3, [r4, #88]	; 0x58
   2376c:	ands	r5, r3, #16
   23770:	bne	237b4 <__assert_fail@plt+0x11df8>
   23774:	orr	r3, r3, #16
   23778:	ands	r1, r3, #8
   2377c:	strb	r3, [r4, #88]	; 0x58
   23780:	bne	238ac <__assert_fail@plt+0x11ef0>
   23784:	ldr	r2, [pc, #1820]	; 23ea8 <__assert_fail@plt+0x124ec>
   23788:	tst	r3, #4
   2378c:	str	r2, [r4, #100]	; 0x64
   23790:	mvn	r2, #2013265921	; 0x78000001
   23794:	str	r2, [r4, #104]	; 0x68
   23798:	mvn	r2, #-134217727	; 0xf8000001
   2379c:	str	r1, [r4, #96]	; 0x60
   237a0:	str	r2, [r4, #108]	; 0x6c
   237a4:	beq	238cc <__assert_fail@plt+0x11f10>
   237a8:	mov	r2, #16
   237ac:	add	r0, r4, #112	; 0x70
   237b0:	bl	11818 <memset@plt>
   237b4:	ldr	r3, [sl]
   237b8:	sub	r2, r3, #256	; 0x100
   237bc:	bics	r2, r2, #256	; 0x100
   237c0:	bne	238fc <__assert_fail@plt+0x11f40>
   237c4:	cmp	r3, #256	; 0x100
   237c8:	bne	238d8 <__assert_fail@plt+0x11f1c>
   237cc:	mov	r3, #6
   237d0:	str	r3, [sl]
   237d4:	mov	r1, r2
   237d8:	mov	r3, sl
   237dc:	mov	r0, r4
   237e0:	bl	1add8 <__assert_fail@plt+0x941c>
   237e4:	mov	r3, #9
   237e8:	mov	r5, r0
   237ec:	mov	r2, #0
   237f0:	mov	r1, r2
   237f4:	str	r3, [sl]
   237f8:	mov	r0, r4
   237fc:	mov	r3, sl
   23800:	bl	1add8 <__assert_fail@plt+0x941c>
   23804:	mov	r1, r5
   23808:	mov	r3, #10
   2380c:	mov	r2, r0
   23810:	mov	r6, r0
   23814:	mov	r0, r4
   23818:	bl	1af28 <__assert_fail@plt+0x956c>
   2381c:	cmp	r6, #0
   23820:	cmpne	r5, #0
   23824:	moveq	r2, #1
   23828:	movne	r2, #0
   2382c:	cmp	r0, #0
   23830:	orreq	r2, r2, #1
   23834:	cmp	r2, #0
   23838:	mov	r5, r0
   2383c:	bne	22f54 <__assert_fail@plt+0x11598>
   23840:	ldr	r2, [sp, #12]
   23844:	mov	r1, fp
   23848:	mov	r0, sl
   2384c:	bl	1f390 <__assert_fail@plt+0xd9d4>
   23850:	b	23720 <__assert_fail@plt+0x11d64>
   23854:	ldrh	r7, [ip], #2
   23858:	add	r0, r5, r2
   2385c:	lsr	r7, r7, #3
   23860:	cmp	r0, #95	; 0x5f
   23864:	movne	r0, r7
   23868:	orreq	r0, r7, #1
   2386c:	tst	r0, #1
   23870:	ldrne	r0, [r3]
   23874:	orrne	r0, r0, lr, lsl r2
   23878:	add	r2, r2, #1
   2387c:	strne	r0, [r3]
   23880:	cmp	r2, #32
   23884:	bne	23854 <__assert_fail@plt+0x11e98>
   23888:	add	r6, r6, #1
   2388c:	cmp	r6, #8
   23890:	add	r5, r5, #32
   23894:	add	r1, r1, #64	; 0x40
   23898:	add	r3, r3, #4
   2389c:	beq	237b4 <__assert_fail@plt+0x11df8>
   238a0:	mov	ip, r1
   238a4:	mov	r2, #0
   238a8:	b	23854 <__assert_fail@plt+0x11e98>
   238ac:	mov	r6, r5
   238b0:	bl	1177c <__ctype_b_loc@plt>
   238b4:	add	r3, r6, #24
   238b8:	mov	lr, #1
   238bc:	add	r3, r4, r3, lsl #2
   238c0:	ldr	r1, [r0]
   238c4:	add	r1, r1, r5, lsl #1
   238c8:	b	238a0 <__assert_fail@plt+0x11ee4>
   238cc:	mov	r5, #128	; 0x80
   238d0:	mov	r6, #4
   238d4:	b	238b0 <__assert_fail@plt+0x11ef4>
   238d8:	mov	r3, #5
   238dc:	str	r3, [sl]
   238e0:	mov	r1, r2
   238e4:	mov	r3, sl
   238e8:	mov	r0, r4
   238ec:	bl	1add8 <__assert_fail@plt+0x941c>
   238f0:	mov	r3, #10
   238f4:	mov	r5, r0
   238f8:	b	237ec <__assert_fail@plt+0x11e30>
   238fc:	mov	r2, #0
   23900:	mov	r3, sl
   23904:	mov	r1, r2
   23908:	mov	r0, r4
   2390c:	bl	1add8 <__assert_fail@plt+0x941c>
   23910:	subs	r5, r0, #0
   23914:	bne	23840 <__assert_fail@plt+0x11e84>
   23918:	b	22f54 <__assert_fail@plt+0x11598>
   2391c:	mov	r2, #0
   23920:	mov	r3, sl
   23924:	mov	r1, r2
   23928:	mov	r0, r4
   2392c:	bl	1add8 <__assert_fail@plt+0x941c>
   23930:	subs	r5, r0, #0
   23934:	beq	22f54 <__assert_fail@plt+0x11598>
   23938:	ldr	r3, [r4, #92]	; 0x5c
   2393c:	cmp	r3, #1
   23940:	bgt	236c0 <__assert_fail@plt+0x11d04>
   23944:	b	22f74 <__assert_fail@plt+0x115b8>
   23948:	sub	r3, r3, #33	; 0x21
   2394c:	clz	r3, r3
   23950:	lsr	r3, r3, #5
   23954:	str	r3, [sp]
   23958:	ldr	r2, [pc, #1356]	; 23eac <__assert_fail@plt+0x124f0>
   2395c:	ldr	r3, [pc, #1356]	; 23eb0 <__assert_fail@plt+0x124f4>
   23960:	str	r9, [sp, #4]
   23964:	ldr	r1, [fp, #64]	; 0x40
   23968:	mov	r0, r4
   2396c:	bl	1c9f4 <__assert_fail@plt+0xb038>
   23970:	ldr	r3, [r9]
   23974:	mov	r5, r0
   23978:	b	23124 <__assert_fail@plt+0x11768>
   2397c:	sub	r3, r3, #35	; 0x23
   23980:	clz	r3, r3
   23984:	lsr	r3, r3, #5
   23988:	str	r3, [sp]
   2398c:	str	r9, [sp, #4]
   23990:	ldr	r3, [pc, #1308]	; 23eb4 <__assert_fail@plt+0x124f8>
   23994:	ldr	r2, [pc, #1308]	; 23eb8 <__assert_fail@plt+0x124fc>
   23998:	b	23964 <__assert_fail@plt+0x11fa8>
   2399c:	mov	r3, #5
   239a0:	b	22f58 <__assert_fail@plt+0x1159c>
   239a4:	cmn	r0, #2
   239a8:	bne	23a10 <__assert_fail@plt+0x12054>
   239ac:	cmn	r8, #2
   239b0:	cmnne	r7, #2
   239b4:	bne	23a78 <__assert_fail@plt+0x120bc>
   239b8:	ldr	r3, [sp, #12]
   239bc:	ands	r6, r3, #2097152	; 0x200000
   239c0:	bne	23a54 <__assert_fail@plt+0x12098>
   239c4:	ldrb	r3, [sl, #4]
   239c8:	cmp	r3, #2
   239cc:	moveq	r3, #9
   239d0:	streq	r3, [r9]
   239d4:	bne	23000 <__assert_fail@plt+0x11644>
   239d8:	ldr	r2, [r9]
   239dc:	adds	r2, r2, #0
   239e0:	movne	r2, #1
   239e4:	cmp	r6, #0
   239e8:	movne	r2, #0
   239ec:	cmp	r2, #0
   239f0:	beq	23c70 <__assert_fail@plt+0x122b4>
   239f4:	cmp	r5, #0
   239f8:	beq	2313c <__assert_fail@plt+0x11780>
   239fc:	mov	r2, #0
   23a00:	ldr	r1, [pc, #1176]	; 23ea0 <__assert_fail@plt+0x124e4>
   23a04:	mov	r0, r5
   23a08:	bl	1ac08 <__assert_fail@plt+0x924c>
   23a0c:	b	2313c <__assert_fail@plt+0x11780>
   23a10:	ldrb	r3, [sl, #4]
   23a14:	cmp	r3, #24
   23a18:	moveq	r7, r8
   23a1c:	beq	239ac <__assert_fail@plt+0x11ff0>
   23a20:	cmp	r3, #1
   23a24:	bne	23a4c <__assert_fail@plt+0x12090>
   23a28:	ldrb	r3, [sl]
   23a2c:	cmp	r3, #44	; 0x2c
   23a30:	bne	23a4c <__assert_fail@plt+0x12090>
   23a34:	ldr	r2, [sp, #12]
   23a38:	mov	r1, sl
   23a3c:	mov	r0, fp
   23a40:	bl	1f3ac <__assert_fail@plt+0xd9f0>
   23a44:	mov	r7, r0
   23a48:	b	239ac <__assert_fail@plt+0x11ff0>
   23a4c:	mvn	r7, #1
   23a50:	b	239ac <__assert_fail@plt+0x11ff0>
   23a54:	ldr	r3, [sp, #16]
   23a58:	str	r3, [fp, #40]	; 0x28
   23a5c:	add	r3, sp, #120	; 0x78
   23a60:	ldm	r3, {r0, r1}
   23a64:	mov	r3, #1
   23a68:	stm	sl, {r0, r1}
   23a6c:	strb	r3, [sl, #4]
   23a70:	mov	r6, r5
   23a74:	b	239d8 <__assert_fail@plt+0x1201c>
   23a78:	cmn	r7, #1
   23a7c:	cmpne	r7, r8
   23a80:	blt	23000 <__assert_fail@plt+0x11644>
   23a84:	ldrb	r3, [sl, #4]
   23a88:	cmp	r3, #24
   23a8c:	bne	23000 <__assert_fail@plt+0x11644>
   23a90:	cmn	r7, #1
   23a94:	ldr	r3, [pc, #1056]	; 23ebc <__assert_fail@plt+0x12500>
   23a98:	bne	23ab8 <__assert_fail@plt+0x120fc>
   23a9c:	cmp	r8, r3
   23aa0:	movle	r3, #0
   23aa4:	movgt	r3, #1
   23aa8:	cmp	r3, #0
   23aac:	beq	23acc <__assert_fail@plt+0x12110>
   23ab0:	mov	r3, #15
   23ab4:	b	23004 <__assert_fail@plt+0x11648>
   23ab8:	cmp	r7, r3
   23abc:	b	23aa0 <__assert_fail@plt+0x120e4>
   23ac0:	cmp	r3, #19
   23ac4:	mvnne	r7, #0
   23ac8:	moveq	r7, #1
   23acc:	ldr	r2, [sp, #12]
   23ad0:	mov	r1, fp
   23ad4:	mov	r0, sl
   23ad8:	bl	1f390 <__assert_fail@plt+0xd9d4>
   23adc:	cmp	r5, #0
   23ae0:	beq	23a70 <__assert_fail@plt+0x120b4>
   23ae4:	orrs	r6, r8, r7
   23ae8:	bne	23b00 <__assert_fail@plt+0x12144>
   23aec:	mov	r2, r6
   23af0:	ldr	r1, [pc, #936]	; 23ea0 <__assert_fail@plt+0x124e4>
   23af4:	mov	r0, r5
   23af8:	bl	1ac08 <__assert_fail@plt+0x924c>
   23afc:	b	239d8 <__assert_fail@plt+0x1201c>
   23b00:	cmp	r8, #0
   23b04:	movgt	r6, r5
   23b08:	strgt	r5, [sp, #16]
   23b0c:	movgt	r3, #2
   23b10:	bgt	23bdc <__assert_fail@plt+0x12220>
   23b14:	mov	r3, #0
   23b18:	str	r5, [sp, #16]
   23b1c:	str	r3, [sp, #20]
   23b20:	ldr	r3, [sp, #16]
   23b24:	ldrb	r3, [r3, #24]
   23b28:	cmp	r3, #17
   23b2c:	bne	23b44 <__assert_fail@plt+0x12188>
   23b30:	ldr	r3, [sp, #16]
   23b34:	ldr	r1, [pc, #900]	; 23ec0 <__assert_fail@plt+0x12504>
   23b38:	mov	r0, r3
   23b3c:	ldr	r2, [r3, #20]
   23b40:	bl	1ac08 <__assert_fail@plt+0x924c>
   23b44:	cmn	r7, #1
   23b48:	movne	r3, #10
   23b4c:	moveq	r3, #11
   23b50:	mov	r2, #0
   23b54:	ldr	r1, [sp, #16]
   23b58:	mov	r0, r4
   23b5c:	bl	1af28 <__assert_fail@plt+0x956c>
   23b60:	subs	r6, r0, #0
   23b64:	addne	r8, r8, #2
   23b68:	beq	23c10 <__assert_fail@plt+0x12254>
   23b6c:	cmp	r7, r8
   23b70:	bge	23c18 <__assert_fail@plt+0x1225c>
   23b74:	ldr	r3, [sp, #20]
   23b78:	cmp	r3, #0
   23b7c:	beq	239d8 <__assert_fail@plt+0x1201c>
   23b80:	mov	r2, r6
   23b84:	mov	r3, #16
   23b88:	ldr	r1, [sp, #20]
   23b8c:	mov	r0, r4
   23b90:	bl	1af28 <__assert_fail@plt+0x956c>
   23b94:	mov	r6, r0
   23b98:	b	239d8 <__assert_fail@plt+0x1201c>
   23b9c:	mov	r1, r4
   23ba0:	ldr	r0, [sp, #16]
   23ba4:	bl	1ae84 <__assert_fail@plt+0x94c8>
   23ba8:	mov	r3, #16
   23bac:	mov	r1, r6
   23bb0:	str	r0, [sp, #16]
   23bb4:	mov	r2, r0
   23bb8:	mov	r0, r4
   23bbc:	bl	1af28 <__assert_fail@plt+0x956c>
   23bc0:	ldr	r3, [sp, #16]
   23bc4:	cmp	r0, #0
   23bc8:	cmpne	r3, #0
   23bcc:	mov	r6, r0
   23bd0:	beq	23c10 <__assert_fail@plt+0x12254>
   23bd4:	ldr	r3, [sp, #20]
   23bd8:	add	r3, r3, #1
   23bdc:	str	r3, [sp, #20]
   23be0:	ldr	r3, [sp, #20]
   23be4:	cmp	r8, r3
   23be8:	bge	23b9c <__assert_fail@plt+0x121e0>
   23bec:	cmp	r8, r7
   23bf0:	beq	239d8 <__assert_fail@plt+0x1201c>
   23bf4:	mov	r1, r4
   23bf8:	ldr	r0, [sp, #16]
   23bfc:	bl	1ae84 <__assert_fail@plt+0x94c8>
   23c00:	subs	r3, r0, #0
   23c04:	str	r3, [sp, #16]
   23c08:	strne	r6, [sp, #20]
   23c0c:	bne	23b20 <__assert_fail@plt+0x12164>
   23c10:	mov	r3, #12
   23c14:	b	23004 <__assert_fail@plt+0x11648>
   23c18:	mov	r1, r4
   23c1c:	ldr	r0, [sp, #16]
   23c20:	bl	1ae84 <__assert_fail@plt+0x94c8>
   23c24:	mov	r3, #16
   23c28:	mov	r1, r6
   23c2c:	str	r0, [sp, #16]
   23c30:	mov	r2, r0
   23c34:	mov	r0, r4
   23c38:	bl	1af28 <__assert_fail@plt+0x956c>
   23c3c:	ldr	r3, [sp, #16]
   23c40:	cmp	r0, #0
   23c44:	cmpne	r3, #0
   23c48:	mov	r1, r0
   23c4c:	beq	23c10 <__assert_fail@plt+0x12254>
   23c50:	mov	r3, #10
   23c54:	mov	r2, #0
   23c58:	mov	r0, r4
   23c5c:	bl	1af28 <__assert_fail@plt+0x956c>
   23c60:	subs	r6, r0, #0
   23c64:	beq	23c10 <__assert_fail@plt+0x12254>
   23c68:	add	r8, r8, #1
   23c6c:	b	23b6c <__assert_fail@plt+0x121b0>
   23c70:	ldr	r3, [sp, #12]
   23c74:	tst	r3, #16777216	; 0x1000000
   23c78:	beq	23ca4 <__assert_fail@plt+0x122e8>
   23c7c:	ldrb	r3, [sl, #4]
   23c80:	cmp	r3, #23
   23c84:	cmpne	r3, #11
   23c88:	bne	23ca4 <__assert_fail@plt+0x122e8>
   23c8c:	cmp	r6, #0
   23c90:	beq	236d8 <__assert_fail@plt+0x11d1c>
   23c94:	ldr	r1, [pc, #516]	; 23ea0 <__assert_fail@plt+0x124e4>
   23c98:	mov	r0, r6
   23c9c:	bl	1ac08 <__assert_fail@plt+0x924c>
   23ca0:	b	236d8 <__assert_fail@plt+0x11d1c>
   23ca4:	mov	r5, r6
   23ca8:	b	22f84 <__assert_fail@plt+0x115c8>
   23cac:	add	r2, sp, #120	; 0x78
   23cb0:	add	r0, sp, #152	; 0x98
   23cb4:	str	r2, [sp, #76]	; 0x4c
   23cb8:	mov	r2, #1
   23cbc:	str	r7, [r0, #-80]!	; 0xffffffb0
   23cc0:	str	r2, [sp, #4]
   23cc4:	ldr	r2, [sp, #12]
   23cc8:	mov	r1, fp
   23ccc:	str	r2, [sp]
   23cd0:	add	r2, sp, #80	; 0x50
   23cd4:	bl	1eb58 <__assert_fail@plt+0xd19c>
   23cd8:	subs	r3, r0, #0
   23cdc:	str	r3, [sp, #20]
   23ce0:	beq	233ac <__assert_fail@plt+0x119f0>
   23ce4:	ldr	r3, [sp, #20]
   23ce8:	b	23204 <__assert_fail@plt+0x11848>
   23cec:	cmp	r8, #3
   23cf0:	beq	233e8 <__assert_fail@plt+0x11a2c>
   23cf4:	cmp	r7, #3
   23cf8:	bne	23d0c <__assert_fail@plt+0x12350>
   23cfc:	ldr	r0, [sp, #76]	; 0x4c
   23d00:	bl	117ac <strlen@plt>
   23d04:	cmp	r0, #1
   23d08:	bhi	233f8 <__assert_fail@plt+0x11a3c>
   23d0c:	cmp	r8, #0
   23d10:	ldrbeq	r5, [sp, #68]	; 0x44
   23d14:	beq	23d2c <__assert_fail@plt+0x12370>
   23d18:	cmp	r8, #3
   23d1c:	movne	r5, #0
   23d20:	bne	23d2c <__assert_fail@plt+0x12370>
   23d24:	ldr	r3, [sp, #68]	; 0x44
   23d28:	ldrb	r5, [r3]
   23d2c:	cmp	r7, #0
   23d30:	ldrbeq	r7, [sp, #76]	; 0x4c
   23d34:	beq	23d48 <__assert_fail@plt+0x1238c>
   23d38:	cmp	r7, #3
   23d3c:	movne	r7, #0
   23d40:	ldreq	r3, [sp, #76]	; 0x4c
   23d44:	ldrbeq	r7, [r3]
   23d48:	cmp	r8, #0
   23d4c:	cmpne	r8, #3
   23d50:	ldrne	r5, [sp, #68]	; 0x44
   23d54:	bne	23d70 <__assert_fail@plt+0x123b4>
   23d58:	ldr	r3, [r4, #92]	; 0x5c
   23d5c:	cmp	r3, #1
   23d60:	ble	23d70 <__assert_fail@plt+0x123b4>
   23d64:	mov	r0, r5
   23d68:	bl	11830 <btowc@plt>
   23d6c:	mov	r5, r0
   23d70:	ldr	r3, [sp, #72]	; 0x48
   23d74:	cmp	r3, #3
   23d78:	cmpne	r3, #0
   23d7c:	ldrne	r7, [sp, #76]	; 0x4c
   23d80:	bne	23d9c <__assert_fail@plt+0x123e0>
   23d84:	ldr	r3, [r4, #92]	; 0x5c
   23d88:	cmp	r3, #1
   23d8c:	ble	23d9c <__assert_fail@plt+0x123e0>
   23d90:	mov	r0, r7
   23d94:	bl	11830 <btowc@plt>
   23d98:	mov	r7, r0
   23d9c:	cmn	r5, #1
   23da0:	cmnne	r7, #1
   23da4:	beq	233f8 <__assert_fail@plt+0x11a3c>
   23da8:	ldr	r3, [sp, #44]	; 0x2c
   23dac:	cmp	r5, r7
   23db0:	movls	r3, #0
   23db4:	andhi	r3, r3, #1
   23db8:	cmp	r3, #0
   23dbc:	bne	233e0 <__assert_fail@plt+0x11a24>
   23dc0:	ldr	r3, [r4, #92]	; 0x5c
   23dc4:	cmp	r3, #1
   23dc8:	ble	23428 <__assert_fail@plt+0x11a6c>
   23dcc:	ldr	r3, [r6, #32]
   23dd0:	ldr	r2, [sp, #32]
   23dd4:	cmp	r3, r2
   23dd8:	bne	23408 <__assert_fail@plt+0x11a4c>
   23ddc:	lsl	r8, r2, #1
   23de0:	add	r8, r8, #1
   23de4:	ldr	r0, [r6, #4]
   23de8:	lsl	r3, r8, #2
   23dec:	mov	r1, r3
   23df0:	str	r3, [sp, #52]	; 0x34
   23df4:	bl	1a484 <__assert_fail@plt+0x8ac8>
   23df8:	ldr	r3, [sp, #52]	; 0x34
   23dfc:	mov	r1, r3
   23e00:	str	r0, [sp, #48]	; 0x30
   23e04:	ldr	r0, [r6, #8]
   23e08:	bl	1a484 <__assert_fail@plt+0x8ac8>
   23e0c:	ldr	r2, [sp, #48]	; 0x30
   23e10:	cmp	r0, #0
   23e14:	cmpne	r2, #0
   23e18:	mov	r3, r0
   23e1c:	bne	23400 <__assert_fail@plt+0x11a44>
   23e20:	str	r0, [sp, #20]
   23e24:	mov	r0, r2
   23e28:	bl	1a30c <__assert_fail@plt+0x8950>
   23e2c:	ldr	r3, [sp, #20]
   23e30:	mov	r0, r3
   23e34:	bl	1a30c <__assert_fail@plt+0x8950>
   23e38:	mov	r3, #12
   23e3c:	str	r3, [sp, #20]
   23e40:	b	23460 <__assert_fail@plt+0x11aa4>
   23e44:	mov	r3, #3
   23e48:	strb	r3, [sp, #124]	; 0x7c
   23e4c:	ldr	r3, [sp, #16]
   23e50:	mov	r2, #0
   23e54:	str	r3, [sp, #120]	; 0x78
   23e58:	mov	r1, r2
   23e5c:	add	r3, sp, #120	; 0x78
   23e60:	mov	r0, r4
   23e64:	bl	1add8 <__assert_fail@plt+0x941c>
   23e68:	subs	r1, r0, #0
   23e6c:	beq	23e88 <__assert_fail@plt+0x124cc>
   23e70:	mov	r3, #10
   23e74:	mov	r2, r5
   23e78:	mov	r0, r4
   23e7c:	bl	1af28 <__assert_fail@plt+0x956c>
   23e80:	subs	r5, r0, #0
   23e84:	bne	23120 <__assert_fail@plt+0x11764>
   23e88:	mov	r3, #12
   23e8c:	b	23204 <__assert_fail@plt+0x11848>
   23e90:	cmp	r7, #3
   23e94:	bne	23d24 <__assert_fail@plt+0x12368>
   23e98:	b	23cfc <__assert_fail@plt+0x12340>
   23e9c:	addeq	r0, ip, r0, lsl #16
   23ea0:	ldrdeq	fp, [r1], -ip
   23ea4:	andeq	r0, r0, pc, lsl #6
   23ea8:	mvnseq	r0, #0
   23eac:	andeq	r9, r2, lr, asr r0
   23eb0:	andeq	r9, r2, r9, lsl #1
   23eb4:	andeq	r8, r2, pc, lsl r2
   23eb8:	andeq	r9, r2, sl, rrx
   23ebc:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   23ec0:	andeq	sl, r1, ip, ror #16
   23ec4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ec8:	sub	sp, sp, #20
   23ecc:	ldr	ip, [r1]
   23ed0:	ldr	r5, [sp, #60]	; 0x3c
   23ed4:	mov	sl, r3
   23ed8:	str	r0, [sp, #12]
   23edc:	stmib	sp, {r5, ip}
   23ee0:	ldr	ip, [sp, #56]	; 0x38
   23ee4:	mov	r7, r1
   23ee8:	str	ip, [sp]
   23eec:	mov	r8, r2
   23ef0:	bl	22e68 <__assert_fail@plt+0x114ac>
   23ef4:	ldr	r3, [r5]
   23ef8:	adds	r3, r3, #0
   23efc:	movne	r3, #1
   23f00:	cmp	r0, #0
   23f04:	movne	r3, #0
   23f08:	cmp	r3, #0
   23f0c:	moveq	r4, r0
   23f10:	moveq	fp, #16
   23f14:	beq	23f8c <__assert_fail@plt+0x125d0>
   23f18:	mov	r4, #0
   23f1c:	mov	r0, r4
   23f20:	add	sp, sp, #20
   23f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f28:	cmp	r4, #0
   23f2c:	cmpne	r0, #0
   23f30:	beq	23f7c <__assert_fail@plt+0x125c0>
   23f34:	mov	r2, r0
   23f38:	mov	r3, fp
   23f3c:	mov	r1, r4
   23f40:	ldr	r0, [sp, #8]
   23f44:	bl	1af28 <__assert_fail@plt+0x956c>
   23f48:	subs	r9, r0, #0
   23f4c:	bne	23f88 <__assert_fail@plt+0x125cc>
   23f50:	mov	r2, r9
   23f54:	ldr	r1, [pc, #184]	; 24014 <__assert_fail@plt+0x12658>
   23f58:	mov	r0, r6
   23f5c:	bl	1ac08 <__assert_fail@plt+0x924c>
   23f60:	mov	r2, r9
   23f64:	ldr	r1, [pc, #168]	; 24014 <__assert_fail@plt+0x12658>
   23f68:	mov	r0, r4
   23f6c:	bl	1ac08 <__assert_fail@plt+0x924c>
   23f70:	mov	r2, #12
   23f74:	str	r2, [r5]
   23f78:	b	23f18 <__assert_fail@plt+0x1255c>
   23f7c:	cmp	r4, #0
   23f80:	movne	r9, r4
   23f84:	moveq	r9, r0
   23f88:	mov	r4, r9
   23f8c:	ldrb	r2, [r8, #4]
   23f90:	and	r3, r2, #247	; 0xf7
   23f94:	cmp	r3, #2
   23f98:	beq	23f1c <__assert_fail@plt+0x12560>
   23f9c:	ldr	r3, [sp, #56]	; 0x38
   23fa0:	clz	r3, r3
   23fa4:	lsr	r3, r3, #5
   23fa8:	cmp	r2, #9
   23fac:	orrne	r3, r3, #1
   23fb0:	cmp	r3, #0
   23fb4:	beq	23f1c <__assert_fail@plt+0x12560>
   23fb8:	ldr	r3, [sp, #56]	; 0x38
   23fbc:	str	r5, [sp, #4]
   23fc0:	str	r3, [sp]
   23fc4:	mov	r2, r8
   23fc8:	mov	r3, sl
   23fcc:	mov	r1, r7
   23fd0:	ldr	r0, [sp, #12]
   23fd4:	bl	22e68 <__assert_fail@plt+0x114ac>
   23fd8:	ldr	r3, [r5]
   23fdc:	adds	r3, r3, #0
   23fe0:	movne	r3, #1
   23fe4:	cmp	r0, #0
   23fe8:	movne	r3, #0
   23fec:	cmp	r3, #0
   23ff0:	mov	r6, r0
   23ff4:	beq	23f28 <__assert_fail@plt+0x1256c>
   23ff8:	cmp	r4, #0
   23ffc:	beq	23f18 <__assert_fail@plt+0x1255c>
   24000:	mov	r2, #0
   24004:	ldr	r1, [pc, #8]	; 24014 <__assert_fail@plt+0x12658>
   24008:	mov	r0, r4
   2400c:	bl	1ac08 <__assert_fail@plt+0x924c>
   24010:	b	23f18 <__assert_fail@plt+0x1255c>
   24014:	ldrdeq	fp, [r1], -ip
   24018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2401c:	sub	sp, sp, #28
   24020:	ldr	r6, [r1]
   24024:	ldr	r7, [sp, #68]	; 0x44
   24028:	mov	fp, r3
   2402c:	ldr	ip, [r6, #84]	; 0x54
   24030:	str	r7, [sp, #4]
   24034:	str	ip, [sp, #12]
   24038:	ldr	ip, [sp, #64]	; 0x40
   2403c:	mov	r9, r0
   24040:	str	ip, [sp]
   24044:	mov	sl, r1
   24048:	mov	r8, r2
   2404c:	bl	23ec4 <__assert_fail@plt+0x12508>
   24050:	ldr	r5, [r7]
   24054:	adds	r5, r5, #0
   24058:	movne	r5, #1
   2405c:	cmp	r0, #0
   24060:	movne	r5, #0
   24064:	cmp	r5, #0
   24068:	orreq	r3, fp, #8388608	; 0x800000
   2406c:	moveq	r4, r0
   24070:	streq	r3, [sp, #20]
   24074:	beq	240c4 <__assert_fail@plt+0x12708>
   24078:	mov	r4, #0
   2407c:	mov	r0, r4
   24080:	add	sp, sp, #28
   24084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24088:	ldr	r3, [r6, #84]	; 0x54
   2408c:	ldr	r1, [sp, #16]
   24090:	orr	r3, r3, r1
   24094:	str	r3, [r6, #84]	; 0x54
   24098:	mov	r1, r4
   2409c:	mov	r3, #10
   240a0:	mov	r0, r6
   240a4:	bl	1af28 <__assert_fail@plt+0x956c>
   240a8:	subs	r4, r0, #0
   240ac:	bne	240c4 <__assert_fail@plt+0x12708>
   240b0:	mov	r3, #12
   240b4:	str	r3, [r7]
   240b8:	b	2407c <__assert_fail@plt+0x126c0>
   240bc:	mov	r2, r5
   240c0:	b	24098 <__assert_fail@plt+0x126dc>
   240c4:	ldrb	r3, [r8, #4]
   240c8:	cmp	r3, #10
   240cc:	bne	2407c <__assert_fail@plt+0x126c0>
   240d0:	ldr	r2, [sp, #20]
   240d4:	mov	r1, r9
   240d8:	mov	r0, r8
   240dc:	bl	1f390 <__assert_fail@plt+0xd9d4>
   240e0:	ldrb	r2, [r8, #4]
   240e4:	and	r3, r2, #247	; 0xf7
   240e8:	cmp	r3, #2
   240ec:	beq	240bc <__assert_fail@plt+0x12700>
   240f0:	ldr	r3, [sp, #64]	; 0x40
   240f4:	clz	r3, r3
   240f8:	lsr	r3, r3, #5
   240fc:	cmp	r2, #9
   24100:	orrne	r3, r3, #1
   24104:	cmp	r3, #0
   24108:	beq	240bc <__assert_fail@plt+0x12700>
   2410c:	ldr	r3, [r6, #84]	; 0x54
   24110:	mov	r2, r8
   24114:	str	r3, [sp, #16]
   24118:	ldr	r3, [sp, #12]
   2411c:	mov	r1, sl
   24120:	str	r3, [r6, #84]	; 0x54
   24124:	ldr	r3, [sp, #64]	; 0x40
   24128:	str	r7, [sp, #4]
   2412c:	str	r3, [sp]
   24130:	mov	r0, r9
   24134:	mov	r3, fp
   24138:	bl	23ec4 <__assert_fail@plt+0x12508>
   2413c:	ldr	r3, [r7]
   24140:	adds	r3, r3, #0
   24144:	movne	r3, #1
   24148:	cmp	r0, #0
   2414c:	movne	r3, #0
   24150:	cmp	r3, #0
   24154:	mov	r2, r0
   24158:	beq	24088 <__assert_fail@plt+0x126cc>
   2415c:	cmp	r4, #0
   24160:	beq	24078 <__assert_fail@plt+0x126bc>
   24164:	mov	r2, #0
   24168:	ldr	r1, [pc, #8]	; 24178 <__assert_fail@plt+0x127bc>
   2416c:	mov	r0, r4
   24170:	bl	1ac08 <__assert_fail@plt+0x924c>
   24174:	b	24078 <__assert_fail@plt+0x126bc>
   24178:	ldrdeq	fp, [r1], -ip
   2417c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24180:	mov	r9, r3
   24184:	ldrb	r3, [r0, #28]
   24188:	sub	sp, sp, #132	; 0x84
   2418c:	mov	r7, r2
   24190:	and	r3, r3, #144	; 0x90
   24194:	strb	r3, [r0, #28]
   24198:	ldr	r3, [r0, #4]
   2419c:	mov	r2, #0
   241a0:	cmp	r3, #159	; 0x9f
   241a4:	mov	r6, r0
   241a8:	mov	sl, r1
   241ac:	str	r2, [sp, #24]
   241b0:	str	r9, [r0, #12]
   241b4:	str	r2, [r0, #8]
   241b8:	str	r2, [r0, #24]
   241bc:	ldr	r4, [r0]
   241c0:	bhi	241e4 <__assert_fail@plt+0x12828>
   241c4:	mov	r0, r4
   241c8:	mov	r1, #160	; 0xa0
   241cc:	bl	1a484 <__assert_fail@plt+0x8ac8>
   241d0:	subs	r4, r0, #0
   241d4:	beq	24cb0 <__assert_fail@plt+0x132f4>
   241d8:	mov	r3, #160	; 0xa0
   241dc:	str	r3, [r6, #4]
   241e0:	str	r4, [r6]
   241e4:	mov	r2, #160	; 0xa0
   241e8:	str	r2, [r6, #8]
   241ec:	mov	r1, #0
   241f0:	mov	r0, r4
   241f4:	bl	11818 <memset@plt>
   241f8:	mov	r3, #31
   241fc:	str	r3, [r4, #64]	; 0x40
   24200:	ldr	r3, [pc, #2796]	; 24cf4 <__assert_fail@plt+0x13338>
   24204:	cmp	r7, r3
   24208:	bls	243ac <__assert_fail@plt+0x129f0>
   2420c:	mov	r5, #12
   24210:	cmp	r5, #0
   24214:	str	r5, [sp, #24]
   24218:	bne	24cdc <__assert_fail@plt+0x13320>
   2421c:	ldr	r8, [pc, #2772]	; 24cf8 <__assert_fail@plt+0x1333c>
   24220:	ldr	r1, [pc, #2772]	; 24cfc <__assert_fail@plt+0x13340>
   24224:	cmp	r8, #0
   24228:	mov	r3, #1
   2422c:	moveq	r3, r5
   24230:	cmp	r1, #0
   24234:	mov	r2, #1
   24238:	moveq	r2, r1
   2423c:	orr	r3, r3, r2
   24240:	tst	r3, #1
   24244:	bne	24cb8 <__assert_fail@plt+0x132fc>
   24248:	ldr	r3, [r6, #20]
   2424c:	mov	r2, #84	; 0x54
   24250:	str	r3, [sp, #12]
   24254:	mov	r1, #0
   24258:	ands	r3, r9, #4194304	; 0x400000
   2425c:	add	r0, sp, #44	; 0x2c
   24260:	movne	fp, #1
   24264:	moveq	fp, #0
   24268:	str	r3, [sp, #16]
   2426c:	bl	11818 <memset@plt>
   24270:	ldr	r3, [sp, #12]
   24274:	ldrb	r2, [r4, #88]	; 0x58
   24278:	str	r3, [sp, #108]	; 0x6c
   2427c:	strb	fp, [sp, #116]	; 0x74
   24280:	cmp	r3, #0
   24284:	orrne	fp, fp, #1
   24288:	ldr	r3, [r4, #92]	; 0x5c
   2428c:	cmp	r7, #0
   24290:	str	r3, [sp, #124]	; 0x7c
   24294:	lsr	r3, r2, #2
   24298:	lsr	r2, r2, #3
   2429c:	and	r3, r3, #1
   242a0:	and	r2, r2, #1
   242a4:	str	sl, [sp, #44]	; 0x2c
   242a8:	str	r7, [sp, #92]	; 0x5c
   242ac:	str	r7, [sp, #88]	; 0x58
   242b0:	strb	fp, [sp, #119]	; 0x77
   242b4:	strb	r3, [sp, #117]	; 0x75
   242b8:	strb	r2, [sp, #118]	; 0x76
   242bc:	str	r7, [sp, #100]	; 0x64
   242c0:	str	r7, [sp, #96]	; 0x60
   242c4:	bgt	24524 <__assert_fail@plt+0x12b68>
   242c8:	ldrb	r3, [sp, #119]	; 0x77
   242cc:	cmp	r3, #0
   242d0:	ldrne	sl, [sp, #48]	; 0x30
   242d4:	ands	r3, r9, #4194304	; 0x400000
   242d8:	cmp	r3, #0
   242dc:	str	sl, [sp, #48]	; 0x30
   242e0:	ldr	r3, [r4, #92]	; 0x5c
   242e4:	beq	2454c <__assert_fail@plt+0x12b90>
   242e8:	cmp	r3, #1
   242ec:	ble	24540 <__assert_fail@plt+0x12b84>
   242f0:	add	r0, sp, #44	; 0x2c
   242f4:	bl	1b384 <__assert_fail@plt+0x99c8>
   242f8:	subs	r5, r0, #0
   242fc:	bne	24338 <__assert_fail@plt+0x1297c>
   24300:	ldr	r3, [sp, #76]	; 0x4c
   24304:	cmp	r7, r3
   24308:	ble	24338 <__assert_fail@plt+0x1297c>
   2430c:	ldr	r2, [r4, #92]	; 0x5c
   24310:	ldr	r3, [sp, #72]	; 0x48
   24314:	ldr	r1, [sp, #80]	; 0x50
   24318:	add	r3, r3, r2
   2431c:	cmp	r1, r3
   24320:	bgt	24338 <__assert_fail@plt+0x1297c>
   24324:	lsl	r1, r1, #1
   24328:	add	r0, sp, #44	; 0x2c
   2432c:	bl	1ace0 <__assert_fail@plt+0x9324>
   24330:	subs	r5, r0, #0
   24334:	beq	242f0 <__assert_fail@plt+0x12934>
   24338:	cmp	r5, #0
   2433c:	str	r5, [sp, #24]
   24340:	beq	24594 <__assert_fail@plt+0x12bd8>
   24344:	ldr	r7, [r6]
   24348:	ldr	r5, [r7, #56]	; 0x38
   2434c:	cmp	r5, #0
   24350:	bne	24580 <__assert_fail@plt+0x12bc4>
   24354:	mov	r3, #31
   24358:	ldr	r0, [r7, #16]
   2435c:	str	r5, [r7, #56]	; 0x38
   24360:	str	r3, [r7, #64]	; 0x40
   24364:	str	r5, [r7, #52]	; 0x34
   24368:	bl	1a30c <__assert_fail@plt+0x8950>
   2436c:	str	r5, [r7, #16]
   24370:	add	r0, sp, #44	; 0x2c
   24374:	bl	1bc84 <__assert_fail@plt+0xa2c8>
   24378:	ldr	r2, [pc, #2428]	; 24cfc <__assert_fail@plt+0x13340>
   2437c:	mov	r3, #1
   24380:	cmp	r2, #0
   24384:	moveq	r3, r5
   24388:	cmp	r8, #0
   2438c:	mov	r2, #1
   24390:	moveq	r2, r8
   24394:	orr	r3, r3, r2
   24398:	tst	r3, #1
   2439c:	beq	24cdc <__assert_fail@plt+0x13320>
   243a0:	add	r0, r4, #136	; 0x88
   243a4:	bl	1156c <pthread_mutex_destroy@plt>
   243a8:	b	24cdc <__assert_fail@plt+0x13320>
   243ac:	add	r0, r7, #1
   243b0:	str	r0, [r4, #4]
   243b4:	lsl	r0, r0, #3
   243b8:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   243bc:	mov	r5, #1
   243c0:	str	r0, [r4]
   243c4:	cmp	r7, r5
   243c8:	lslcs	r5, r5, #1
   243cc:	bcs	243c4 <__assert_fail@plt+0x12a08>
   243d0:	mov	r1, r5
   243d4:	mov	r0, #12
   243d8:	bl	1a0b0 <__assert_fail@plt+0x86f4>
   243dc:	sub	r5, r5, #1
   243e0:	str	r5, [r4, #68]	; 0x44
   243e4:	str	r0, [r4, #32]
   243e8:	bl	116a4 <__ctype_get_mb_cur_max@plt>
   243ec:	str	r0, [r4, #92]	; 0x5c
   243f0:	mov	r0, #14
   243f4:	bl	118cc <nl_langinfo@plt>
   243f8:	ldrb	r3, [r0]
   243fc:	and	r3, r3, #223	; 0xdf
   24400:	cmp	r3, #85	; 0x55
   24404:	bne	24454 <__assert_fail@plt+0x12a98>
   24408:	ldrb	r3, [r0, #1]
   2440c:	and	r3, r3, #223	; 0xdf
   24410:	cmp	r3, #84	; 0x54
   24414:	bne	24454 <__assert_fail@plt+0x12a98>
   24418:	ldrb	r3, [r0, #2]
   2441c:	and	r3, r3, #223	; 0xdf
   24420:	cmp	r3, #70	; 0x46
   24424:	bne	24454 <__assert_fail@plt+0x12a98>
   24428:	ldrb	r3, [r0, #3]
   2442c:	ldr	r1, [pc, #2252]	; 24d00 <__assert_fail@plt+0x13344>
   24430:	cmp	r3, #45	; 0x2d
   24434:	moveq	r3, #4
   24438:	movne	r3, #3
   2443c:	add	r0, r0, r3
   24440:	bl	11554 <strcmp@plt>
   24444:	cmp	r0, #0
   24448:	ldrbeq	r3, [r4, #88]	; 0x58
   2444c:	orreq	r3, r3, #4
   24450:	strbeq	r3, [r4, #88]	; 0x58
   24454:	ldrb	r3, [r4, #88]	; 0x58
   24458:	bic	r3, r3, #8
   2445c:	strb	r3, [r4, #88]	; 0x58
   24460:	ldr	r3, [r4, #92]	; 0x5c
   24464:	cmp	r3, #1
   24468:	ble	24504 <__assert_fail@plt+0x12b48>
   2446c:	ldrb	r5, [r4, #88]	; 0x58
   24470:	ands	r5, r5, #4
   24474:	ldrne	r3, [pc, #2184]	; 24d04 <__assert_fail@plt+0x13348>
   24478:	strne	r3, [r4, #60]	; 0x3c
   2447c:	bne	24504 <__assert_fail@plt+0x12b48>
   24480:	mov	r1, #1
   24484:	mov	r0, #32
   24488:	bl	1a0b0 <__assert_fail@plt+0x86f4>
   2448c:	cmp	r0, #0
   24490:	str	r0, [r4, #60]	; 0x3c
   24494:	movne	r2, #1
   24498:	beq	2420c <__assert_fail@plt+0x12850>
   2449c:	lsl	fp, r5, #3
   244a0:	mov	r8, #0
   244a4:	add	r3, r8, fp
   244a8:	mov	r0, r3
   244ac:	str	r2, [sp, #16]
   244b0:	str	r3, [sp, #12]
   244b4:	bl	11830 <btowc@plt>
   244b8:	ldr	r2, [sp, #16]
   244bc:	ldr	r3, [sp, #12]
   244c0:	cmn	r0, #1
   244c4:	ldrne	ip, [r4, #60]	; 0x3c
   244c8:	ldrne	r1, [ip, r5]
   244cc:	orrne	r1, r1, r2, lsl r8
   244d0:	strne	r1, [ip, r5]
   244d4:	bics	r1, r3, #127	; 0x7f
   244d8:	bne	244ec <__assert_fail@plt+0x12b30>
   244dc:	cmp	r3, r0
   244e0:	ldrbne	r3, [r4, #88]	; 0x58
   244e4:	orrne	r3, r3, #8
   244e8:	strbne	r3, [r4, #88]	; 0x58
   244ec:	add	r8, r8, #1
   244f0:	cmp	r8, #32
   244f4:	bne	244a4 <__assert_fail@plt+0x12ae8>
   244f8:	add	r5, r5, #4
   244fc:	cmp	r5, #32
   24500:	bne	2449c <__assert_fail@plt+0x12ae0>
   24504:	ldr	r3, [r4]
   24508:	cmp	r3, #0
   2450c:	beq	2420c <__assert_fail@plt+0x12850>
   24510:	ldr	r3, [r4, #32]
   24514:	cmp	r3, #0
   24518:	beq	2420c <__assert_fail@plt+0x12850>
   2451c:	mov	r5, #0
   24520:	b	24210 <__assert_fail@plt+0x12854>
   24524:	add	r1, r7, #1
   24528:	add	r0, sp, #44	; 0x2c
   2452c:	bl	1ace0 <__assert_fail@plt+0x9324>
   24530:	cmp	r0, #0
   24534:	beq	242c8 <__assert_fail@plt+0x1290c>
   24538:	mov	r5, r0
   2453c:	b	24338 <__assert_fail@plt+0x1297c>
   24540:	add	r0, sp, #44	; 0x2c
   24544:	bl	1b854 <__assert_fail@plt+0x9e98>
   24548:	b	24338 <__assert_fail@plt+0x1297c>
   2454c:	cmp	r3, #1
   24550:	ble	24560 <__assert_fail@plt+0x12ba4>
   24554:	add	r0, sp, #44	; 0x2c
   24558:	bl	1b230 <__assert_fail@plt+0x9874>
   2455c:	b	24338 <__assert_fail@plt+0x1297c>
   24560:	cmp	fp, #0
   24564:	ldreq	r3, [sp, #80]	; 0x50
   24568:	streq	r3, [sp, #72]	; 0x48
   2456c:	streq	r3, [sp, #76]	; 0x4c
   24570:	beq	24338 <__assert_fail@plt+0x1297c>
   24574:	add	r0, sp, #44	; 0x2c
   24578:	bl	1a674 <__assert_fail@plt+0x8cb8>
   2457c:	b	24338 <__assert_fail@plt+0x1297c>
   24580:	ldr	r9, [r5]
   24584:	mov	r0, r5
   24588:	bl	1a30c <__assert_fail@plt+0x8950>
   2458c:	mov	r5, r9
   24590:	b	2434c <__assert_fail@plt+0x12990>
   24594:	ldr	r7, [r6]
   24598:	orr	r2, r9, #8388608	; 0x800000
   2459c:	str	r5, [r6, #24]
   245a0:	add	r1, sp, #44	; 0x2c
   245a4:	str	r9, [r7, #128]	; 0x80
   245a8:	add	r0, sp, #32
   245ac:	bl	1f390 <__assert_fail@plt+0xd9d4>
   245b0:	add	r3, sp, #24
   245b4:	str	r3, [sp, #4]
   245b8:	str	r5, [sp]
   245bc:	mov	r3, r9
   245c0:	add	r2, sp, #32
   245c4:	mov	r1, r6
   245c8:	add	r0, sp, #44	; 0x2c
   245cc:	bl	24018 <__assert_fail@plt+0x1265c>
   245d0:	ldr	r3, [sp, #24]
   245d4:	adds	r3, r3, #0
   245d8:	movne	r3, #1
   245dc:	cmp	r0, #0
   245e0:	movne	r3, #0
   245e4:	cmp	r3, #0
   245e8:	mov	r9, r0
   245ec:	movne	r0, r5
   245f0:	bne	2463c <__assert_fail@plt+0x12c80>
   245f4:	mov	r2, r5
   245f8:	mov	r1, r5
   245fc:	mov	r3, #2
   24600:	mov	r0, r7
   24604:	bl	1af28 <__assert_fail@plt+0x956c>
   24608:	cmp	r9, #0
   2460c:	mov	r5, r0
   24610:	beq	24628 <__assert_fail@plt+0x12c6c>
   24614:	mov	r3, #16
   24618:	mov	r2, r5
   2461c:	mov	r1, r9
   24620:	mov	r0, r7
   24624:	bl	1af28 <__assert_fail@plt+0x956c>
   24628:	cmp	r0, #0
   2462c:	cmpne	r5, #0
   24630:	moveq	r0, #0
   24634:	moveq	r3, #12
   24638:	streq	r3, [sp, #24]
   2463c:	cmp	r0, #0
   24640:	str	r0, [r4, #52]	; 0x34
   24644:	beq	24344 <__assert_fail@plt+0x12988>
   24648:	ldr	r5, [r6]
   2464c:	mov	r7, #12
   24650:	ldr	r0, [r5, #4]
   24654:	lsl	r0, r0, #2
   24658:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   2465c:	str	r0, [r5, #12]
   24660:	ldr	r0, [r5, #4]
   24664:	lsl	r0, r0, #2
   24668:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   2466c:	str	r0, [r5, #16]
   24670:	ldr	r0, [r5, #4]
   24674:	mul	r0, r7, r0
   24678:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   2467c:	str	r0, [r5, #20]
   24680:	ldr	r0, [r5, #4]
   24684:	mul	r0, r7, r0
   24688:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   2468c:	ldr	r3, [r5, #12]
   24690:	cmp	r3, #0
   24694:	str	r0, [r5, #24]
   24698:	bne	24794 <__assert_fail@plt+0x12dd8>
   2469c:	mov	r7, #12
   246a0:	cmp	r7, #0
   246a4:	str	r7, [sp, #24]
   246a8:	bne	24344 <__assert_fail@plt+0x12988>
   246ac:	ldrb	r2, [r4, #88]	; 0x58
   246b0:	ldr	r3, [sp, #16]
   246b4:	clz	r3, r3
   246b8:	lsr	r3, r3, #5
   246bc:	ands	r3, r3, r2, lsr #2
   246c0:	beq	246dc <__assert_fail@plt+0x12d20>
   246c4:	ldr	r2, [r6, #20]
   246c8:	cmp	r2, #0
   246cc:	moveq	lr, r7
   246d0:	ldreq	ip, [r4, #8]
   246d4:	moveq	r0, r7
   246d8:	beq	24a7c <__assert_fail@plt+0x130c0>
   246dc:	ldr	r3, [r4, #52]	; 0x34
   246e0:	ldr	r1, [r4, #24]
   246e4:	mov	r9, #12
   246e8:	ldr	r3, [r3, #12]
   246ec:	add	r0, sp, #32
   246f0:	ldr	r3, [r3, #28]
   246f4:	str	r3, [r4, #72]	; 0x48
   246f8:	mla	r1, r9, r3, r1
   246fc:	bl	1d314 <__assert_fail@plt+0xb958>
   24700:	cmp	r0, #0
   24704:	mov	r7, r0
   24708:	str	r0, [sp, #28]
   2470c:	bne	24744 <__assert_fail@plt+0x12d88>
   24710:	ldr	r3, [r4, #76]	; 0x4c
   24714:	cmp	r3, #0
   24718:	movgt	r5, r0
   2471c:	bgt	24b8c <__assert_fail@plt+0x131d0>
   24720:	mov	r3, #0
   24724:	add	r2, sp, #32
   24728:	mov	r1, r4
   2472c:	add	r0, sp, #28
   24730:	bl	1d4c4 <__assert_fail@plt+0xbb08>
   24734:	cmp	r0, #0
   24738:	str	r0, [r4, #36]	; 0x24
   2473c:	bne	24c14 <__assert_fail@plt+0x13258>
   24740:	ldr	r7, [sp, #28]
   24744:	str	r7, [sp, #24]
   24748:	ldr	r7, [r6]
   2474c:	ldr	r5, [r7, #56]	; 0x38
   24750:	cmp	r5, #0
   24754:	bne	24c9c <__assert_fail@plt+0x132e0>
   24758:	mov	r3, #31
   2475c:	str	r3, [r7, #64]	; 0x40
   24760:	ldr	r0, [r7, #16]
   24764:	str	r5, [r7, #56]	; 0x38
   24768:	str	r5, [r7, #52]	; 0x34
   2476c:	bl	1a30c <__assert_fail@plt+0x8950>
   24770:	str	r5, [r7, #16]
   24774:	add	r0, sp, #44	; 0x2c
   24778:	bl	1bc84 <__assert_fail@plt+0xa2c8>
   2477c:	ldr	r3, [sp, #24]
   24780:	cmp	r3, #0
   24784:	bne	24378 <__assert_fail@plt+0x129bc>
   24788:	ldr	r0, [sp, #24]
   2478c:	add	sp, sp, #132	; 0x84
   24790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24794:	ldr	r3, [r5, #16]
   24798:	cmp	r3, #0
   2479c:	beq	2469c <__assert_fail@plt+0x12ce0>
   247a0:	ldr	r9, [r5, #20]
   247a4:	cmp	r0, #0
   247a8:	cmpne	r9, #0
   247ac:	moveq	r9, #1
   247b0:	movne	r9, #0
   247b4:	beq	2469c <__assert_fail@plt+0x12ce0>
   247b8:	ldr	r0, [r6, #24]
   247bc:	lsl	r0, r0, #2
   247c0:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   247c4:	cmp	r0, #0
   247c8:	str	r0, [r5, #132]	; 0x84
   247cc:	ldrne	r2, [r6, #24]
   247d0:	movne	r3, r9
   247d4:	bne	248a4 <__assert_fail@plt+0x12ee8>
   247d8:	mov	r2, r6
   247dc:	ldr	r1, [pc, #1316]	; 24d08 <__assert_fail@plt+0x1334c>
   247e0:	ldr	r0, [r5, #52]	; 0x34
   247e4:	bl	1ac08 <__assert_fail@plt+0x924c>
   247e8:	subs	r7, r0, #0
   247ec:	bne	246a0 <__assert_fail@plt+0x12ce4>
   247f0:	mov	r2, r5
   247f4:	ldr	r1, [pc, #1296]	; 24d0c <__assert_fail@plt+0x13350>
   247f8:	ldr	r0, [r5, #52]	; 0x34
   247fc:	bl	1ac08 <__assert_fail@plt+0x924c>
   24800:	subs	r7, r0, #0
   24804:	bne	246a0 <__assert_fail@plt+0x12ce4>
   24808:	mov	r2, r5
   2480c:	ldr	r1, [pc, #1276]	; 24d10 <__assert_fail@plt+0x13354>
   24810:	ldr	r0, [r5, #52]	; 0x34
   24814:	bl	1ac78 <__assert_fail@plt+0x92bc>
   24818:	mov	r2, r5
   2481c:	ldr	r1, [pc, #1264]	; 24d14 <__assert_fail@plt+0x13358>
   24820:	ldr	r0, [r5, #52]	; 0x34
   24824:	bl	1ac78 <__assert_fail@plt+0x92bc>
   24828:	subs	r7, r0, #0
   2482c:	bne	246a0 <__assert_fail@plt+0x12ce4>
   24830:	mov	fp, r9
   24834:	mov	sl, r7
   24838:	ldr	r0, [r5, #8]
   2483c:	cmp	r0, sl
   24840:	bne	24854 <__assert_fail@plt+0x12e98>
   24844:	cmp	fp, #0
   24848:	beq	24924 <__assert_fail@plt+0x12f68>
   2484c:	mov	fp, r9
   24850:	mov	sl, #0
   24854:	mov	r3, #12
   24858:	mul	r3, r3, sl
   2485c:	str	r3, [sp, #12]
   24860:	ldr	r2, [sp, #12]
   24864:	ldr	r3, [r5, #24]
   24868:	add	r3, r3, r2
   2486c:	ldr	r3, [r3, #4]
   24870:	cmp	r3, #0
   24874:	bne	2491c <__assert_fail@plt+0x12f60>
   24878:	mov	r3, #1
   2487c:	mov	r2, sl
   24880:	mov	r1, r5
   24884:	add	r0, sp, #32
   24888:	bl	1e068 <__assert_fail@plt+0xc6ac>
   2488c:	cmp	r0, #0
   24890:	beq	248f8 <__assert_fail@plt+0x12f3c>
   24894:	mov	r7, r0
   24898:	b	246a0 <__assert_fail@plt+0x12ce4>
   2489c:	str	r3, [r0, r3, lsl #2]
   248a0:	add	r3, r3, #1
   248a4:	cmp	r2, r3
   248a8:	bne	2489c <__assert_fail@plt+0x12ee0>
   248ac:	mov	r2, r5
   248b0:	ldr	r1, [pc, #1120]	; 24d18 <__assert_fail@plt+0x1335c>
   248b4:	ldr	r0, [r5, #52]	; 0x34
   248b8:	bl	1ac78 <__assert_fail@plt+0x92bc>
   248bc:	ldr	r2, [r6, #24]
   248c0:	mov	r3, #0
   248c4:	cmp	r2, r3
   248c8:	bne	248e0 <__assert_fail@plt+0x12f24>
   248cc:	ldr	r0, [r5, #132]	; 0x84
   248d0:	bl	1a30c <__assert_fail@plt+0x8950>
   248d4:	mov	r3, #0
   248d8:	str	r3, [r5, #132]	; 0x84
   248dc:	b	247d8 <__assert_fail@plt+0x12e1c>
   248e0:	ldr	r1, [r5, #132]	; 0x84
   248e4:	ldr	r1, [r1, r3, lsl #2]
   248e8:	cmp	r1, r3
   248ec:	bne	247d8 <__assert_fail@plt+0x12e1c>
   248f0:	add	r3, r3, #1
   248f4:	b	248c4 <__assert_fail@plt+0x12f08>
   248f8:	ldr	r3, [r5, #24]
   248fc:	ldr	r2, [sp, #12]
   24900:	add	r3, r3, r2
   24904:	ldr	r3, [r3, #4]
   24908:	cmp	r3, #0
   2490c:	bne	2491c <__assert_fail@plt+0x12f60>
   24910:	ldr	r0, [sp, #40]	; 0x28
   24914:	bl	1a30c <__assert_fail@plt+0x8950>
   24918:	mov	fp, #1
   2491c:	add	sl, sl, #1
   24920:	b	24838 <__assert_fail@plt+0x12e7c>
   24924:	ldrb	r3, [r6, #28]
   24928:	tst	r3, #16
   2492c:	beq	24940 <__assert_fail@plt+0x12f84>
   24930:	ldr	r3, [r5, #76]	; 0x4c
   24934:	cmp	r3, #0
   24938:	bne	24958 <__assert_fail@plt+0x12f9c>
   2493c:	b	246a0 <__assert_fail@plt+0x12ce4>
   24940:	ldr	r3, [r6, #24]
   24944:	cmp	r3, #0
   24948:	beq	24930 <__assert_fail@plt+0x12f74>
   2494c:	ldrb	r3, [r5, #88]	; 0x58
   24950:	tst	r3, #1
   24954:	beq	24930 <__assert_fail@plt+0x12f74>
   24958:	mov	r9, #12
   2495c:	mul	r0, r9, r0
   24960:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   24964:	cmp	r0, #0
   24968:	movne	r3, #0
   2496c:	str	r0, [r5, #28]
   24970:	movne	r2, r3
   24974:	beq	2469c <__assert_fail@plt+0x12ce0>
   24978:	ldr	r1, [r5, #8]
   2497c:	cmp	r3, r1
   24980:	bcc	249c8 <__assert_fail@plt+0x1300c>
   24984:	mov	r9, #0
   24988:	mov	fp, #12
   2498c:	ldr	r3, [r5, #8]
   24990:	cmp	r9, r3
   24994:	bcs	246a0 <__assert_fail@plt+0x12ce4>
   24998:	mul	r3, fp, r9
   2499c:	ldr	r2, [r5, #24]
   249a0:	mov	sl, #0
   249a4:	add	r2, r2, r3
   249a8:	ldr	r2, [r2, #8]
   249ac:	ldr	r1, [r5, #24]
   249b0:	add	r1, r1, r3
   249b4:	ldr	r1, [r1, #4]
   249b8:	cmp	sl, r1
   249bc:	blt	249e8 <__assert_fail@plt+0x1302c>
   249c0:	add	r9, r9, #1
   249c4:	b	2498c <__assert_fail@plt+0x12fd0>
   249c8:	mul	r0, r9, r3
   249cc:	ldr	ip, [r5, #28]
   249d0:	add	r3, r3, #1
   249d4:	add	r1, ip, r0
   249d8:	str	r2, [ip, r0]
   249dc:	str	r2, [r1, #4]
   249e0:	str	r2, [r1, #8]
   249e4:	b	24978 <__assert_fail@plt+0x12fbc>
   249e8:	ldr	ip, [r2, sl, lsl #2]
   249ec:	ldr	r0, [r5, #28]
   249f0:	mov	r1, r9
   249f4:	mla	r0, fp, ip, r0
   249f8:	str	r3, [sp, #20]
   249fc:	str	r2, [sp, #12]
   24a00:	bl	1ad74 <__assert_fail@plt+0x93b8>
   24a04:	cmp	r0, #0
   24a08:	beq	2469c <__assert_fail@plt+0x12ce0>
   24a0c:	add	sl, sl, #1
   24a10:	ldr	r3, [sp, #20]
   24a14:	ldr	r2, [sp, #12]
   24a18:	b	249ac <__assert_fail@plt+0x12ff0>
   24a1c:	ldr	r2, [r4]
   24a20:	lsl	r5, r0, #3
   24a24:	add	r1, r2, r5
   24a28:	ldrb	r1, [r1, #4]
   24a2c:	sub	r1, r1, #1
   24a30:	cmp	r1, #11
   24a34:	ldrls	pc, [pc, r1, lsl #2]
   24a38:	b	24b14 <__assert_fail@plt+0x13158>
   24a3c:	andeq	r4, r2, ip, ror #20
   24a40:	andeq	r4, r2, r8, ror sl
   24a44:	strdeq	r4, [r2], -r0
   24a48:	andeq	r4, r2, r8, ror sl
   24a4c:	andeq	r4, r2, r8, lsl fp
   24a50:	ldrdeq	r4, [r2], -ip
   24a54:	andeq	r4, r2, r4, lsl fp
   24a58:	andeq	r4, r2, r8, ror sl
   24a5c:	andeq	r4, r2, r8, ror sl
   24a60:	andeq	r4, r2, r8, ror sl
   24a64:	andeq	r4, r2, r8, ror sl
   24a68:	andeq	r4, r2, r4, asr #21
   24a6c:	ldrsb	r2, [r2, r5]
   24a70:	cmp	r2, #0
   24a74:	movlt	lr, r3
   24a78:	add	r0, r0, #1
   24a7c:	cmp	r0, ip
   24a80:	bne	24a1c <__assert_fail@plt+0x13060>
   24a84:	orr	r3, lr, r7
   24a88:	tst	r3, #255	; 0xff
   24a8c:	movne	r3, #0
   24a90:	movne	r5, #7
   24a94:	bne	24b50 <__assert_fail@plt+0x13194>
   24a98:	mov	r3, #1
   24a9c:	str	r3, [r4, #92]	; 0x5c
   24aa0:	ldr	r2, [r4, #76]	; 0x4c
   24aa4:	ldrb	r3, [r4, #88]	; 0x58
   24aa8:	cmp	r2, #0
   24aac:	movle	r2, r7
   24ab0:	orrgt	r2, r7, #1
   24ab4:	and	r7, r3, #249	; 0xf9
   24ab8:	orr	r7, r7, r2, lsl #1
   24abc:	strb	r7, [r4, #88]	; 0x58
   24ac0:	b	246dc <__assert_fail@plt+0x12d20>
   24ac4:	ldr	r2, [r2, r0, lsl #3]
   24ac8:	cmp	r2, #32
   24acc:	beq	24a78 <__assert_fail@plt+0x130bc>
   24ad0:	bhi	24ae0 <__assert_fail@plt+0x13124>
   24ad4:	cmp	r2, #16
   24ad8:	beq	24a78 <__assert_fail@plt+0x130bc>
   24adc:	b	246dc <__assert_fail@plt+0x12d20>
   24ae0:	cmp	r2, #64	; 0x40
   24ae4:	beq	24a78 <__assert_fail@plt+0x130bc>
   24ae8:	cmp	r2, #128	; 0x80
   24aec:	b	24ad8 <__assert_fail@plt+0x1311c>
   24af0:	ldr	r2, [r2, r0, lsl #3]
   24af4:	add	r1, r2, #12
   24af8:	add	r2, r2, #28
   24afc:	ldr	r5, [r1, #4]!
   24b00:	cmp	r5, #0
   24b04:	bne	246dc <__assert_fail@plt+0x12d20>
   24b08:	cmp	r1, r2
   24b0c:	bne	24afc <__assert_fail@plt+0x13140>
   24b10:	b	24a78 <__assert_fail@plt+0x130bc>
   24b14:	bl	11980 <abort@plt>
   24b18:	mov	r7, r3
   24b1c:	b	24a78 <__assert_fail@plt+0x130bc>
   24b20:	ldr	lr, [r4]
   24b24:	lsl	ip, r3, #3
   24b28:	add	r2, lr, ip
   24b2c:	ldrb	r1, [r2, #4]
   24b30:	cmp	r1, #1
   24b34:	bne	24b5c <__assert_fail@plt+0x131a0>
   24b38:	ldrsb	r1, [lr, ip]
   24b3c:	cmp	r1, #0
   24b40:	ldrblt	r1, [r2, #6]
   24b44:	biclt	r1, r1, #32
   24b48:	strblt	r1, [r2, #6]
   24b4c:	add	r3, r3, #1
   24b50:	cmp	r0, r3
   24b54:	bne	24b20 <__assert_fail@plt+0x13164>
   24b58:	b	24a98 <__assert_fail@plt+0x130dc>
   24b5c:	cmp	r1, #5
   24b60:	strbeq	r5, [r2, #4]
   24b64:	b	24b4c <__assert_fail@plt+0x13190>
   24b68:	ldr	ip, [sp, #40]	; 0x28
   24b6c:	ldr	r1, [r4]
   24b70:	ldr	r3, [ip, r5, lsl #2]
   24b74:	add	lr, r1, r3, lsl #3
   24b78:	ldrb	r2, [lr, #4]
   24b7c:	cmp	r2, #4
   24b80:	moveq	r2, #0
   24b84:	beq	24bc4 <__assert_fail@plt+0x13208>
   24b88:	add	r5, r5, #1
   24b8c:	ldr	r0, [sp, #36]	; 0x24
   24b90:	cmp	r5, r0
   24b94:	blt	24b68 <__assert_fail@plt+0x131ac>
   24b98:	b	24720 <__assert_fail@plt+0x12d64>
   24b9c:	ldr	sl, [ip, r2, lsl #2]
   24ba0:	add	fp, r1, sl, lsl #3
   24ba4:	ldrb	fp, [fp, #4]
   24ba8:	cmp	fp, #9
   24bac:	bne	24bc0 <__assert_fail@plt+0x13204>
   24bb0:	ldr	fp, [r1, sl, lsl #3]
   24bb4:	ldr	sl, [lr]
   24bb8:	cmp	fp, sl
   24bbc:	beq	24bd0 <__assert_fail@plt+0x13214>
   24bc0:	add	r2, r2, #1
   24bc4:	cmp	r2, r0
   24bc8:	blt	24b9c <__assert_fail@plt+0x131e0>
   24bcc:	beq	24b88 <__assert_fail@plt+0x131cc>
   24bd0:	ldr	r2, [r4, #20]
   24bd4:	add	r0, sp, #32
   24bd8:	mla	r3, r9, r3, r2
   24bdc:	ldr	r3, [r3, #8]
   24be0:	ldr	sl, [r3]
   24be4:	mov	r1, sl
   24be8:	bl	1a6c4 <__assert_fail@plt+0x8d08>
   24bec:	cmp	r0, #0
   24bf0:	bne	24b88 <__assert_fail@plt+0x131cc>
   24bf4:	ldr	r1, [r4, #24]
   24bf8:	add	r0, sp, #32
   24bfc:	mla	r1, r9, sl, r1
   24c00:	bl	1df04 <__assert_fail@plt+0xc548>
   24c04:	subs	r5, r0, #0
   24c08:	beq	24b88 <__assert_fail@plt+0x131cc>
   24c0c:	mov	r7, r5
   24c10:	b	24744 <__assert_fail@plt+0x12d88>
   24c14:	ldrsb	r3, [r0, #52]	; 0x34
   24c18:	cmp	r3, #0
   24c1c:	strge	r0, [r4, #48]	; 0x30
   24c20:	strge	r0, [r4, #44]	; 0x2c
   24c24:	strge	r0, [r4, #40]	; 0x28
   24c28:	bge	24c90 <__assert_fail@plt+0x132d4>
   24c2c:	mov	r3, #1
   24c30:	add	r2, sp, #32
   24c34:	mov	r1, r4
   24c38:	add	r0, sp, #28
   24c3c:	bl	1d4c4 <__assert_fail@plt+0xbb08>
   24c40:	mov	r3, #2
   24c44:	add	r2, sp, #32
   24c48:	mov	r1, r4
   24c4c:	str	r0, [r4, #40]	; 0x28
   24c50:	add	r0, sp, #28
   24c54:	bl	1d4c4 <__assert_fail@plt+0xbb08>
   24c58:	mov	r3, #6
   24c5c:	add	r2, sp, #32
   24c60:	mov	r1, r4
   24c64:	str	r0, [r4, #44]	; 0x2c
   24c68:	add	r0, sp, #28
   24c6c:	bl	1d4c4 <__assert_fail@plt+0xbb08>
   24c70:	ldr	r3, [r4, #40]	; 0x28
   24c74:	cmp	r3, #0
   24c78:	str	r0, [r4, #48]	; 0x30
   24c7c:	beq	24740 <__assert_fail@plt+0x12d84>
   24c80:	ldr	r3, [r4, #44]	; 0x2c
   24c84:	cmp	r0, #0
   24c88:	cmpne	r3, #0
   24c8c:	beq	24740 <__assert_fail@plt+0x12d84>
   24c90:	ldr	r0, [sp, #40]	; 0x28
   24c94:	bl	1a30c <__assert_fail@plt+0x8950>
   24c98:	b	24744 <__assert_fail@plt+0x12d88>
   24c9c:	ldr	r9, [r5]
   24ca0:	mov	r0, r5
   24ca4:	bl	1a30c <__assert_fail@plt+0x8950>
   24ca8:	mov	r5, r9
   24cac:	b	24750 <__assert_fail@plt+0x12d94>
   24cb0:	mov	r0, #12
   24cb4:	b	2478c <__assert_fail@plt+0x12dd0>
   24cb8:	mov	r1, #0
   24cbc:	add	r0, r4, #136	; 0x88
   24cc0:	bl	115fc <pthread_mutex_init@plt>
   24cc4:	cmp	r0, #0
   24cc8:	movne	r3, #12
   24ccc:	strne	r3, [sp, #24]
   24cd0:	ldr	r3, [sp, #24]
   24cd4:	cmp	r3, #0
   24cd8:	beq	24248 <__assert_fail@plt+0x1288c>
   24cdc:	mov	r0, r4
   24ce0:	bl	1bcb4 <__assert_fail@plt+0xa2f8>
   24ce4:	mov	r3, #0
   24ce8:	str	r3, [r6]
   24cec:	str	r3, [r6, #4]
   24cf0:	b	24788 <__assert_fail@plt+0x12dcc>
   24cf4:	beq	feacf7a0 <optarg@@GLIBC_2.4+0xfea95580>
	...
   24d00:	andeq	r9, r2, fp, lsl #1
   24d04:	andeq	r8, r2, r8, ror #28
   24d08:	andeq	fp, r1, r0, rrx
   24d0c:	andeq	sp, r1, r8, ror #20
   24d10:	andeq	sp, r1, r4, asr #5
   24d14:	andeq	fp, r1, r0, lsl #30
   24d18:	andeq	sp, r1, ip, lsr #4
   24d1c:	ldr	r3, [pc, #96]	; 24d84 <__assert_fail@plt+0x133c8>
   24d20:	mov	ip, r2
   24d24:	ldrb	r2, [r2, #28]
   24d28:	ldr	r3, [r3]
   24d2c:	push	{r4, lr}
   24d30:	and	r2, r2, #239	; 0xef
   24d34:	lsr	lr, r3, #21
   24d38:	and	lr, lr, #16
   24d3c:	orr	r2, r2, lr
   24d40:	orr	r2, r2, #128	; 0x80
   24d44:	strb	r2, [ip, #28]
   24d48:	mov	r2, r1
   24d4c:	mov	r1, r0
   24d50:	mov	r0, ip
   24d54:	bl	2417c <__assert_fail@plt+0x127c0>
   24d58:	subs	r2, r0, #0
   24d5c:	popeq	{r4, pc}
   24d60:	ldr	r3, [pc, #32]	; 24d88 <__assert_fail@plt+0x133cc>
   24d64:	mov	r0, #0
   24d68:	add	r1, r3, #32
   24d6c:	add	r3, r3, r2, lsl #2
   24d70:	pop	{r4, lr}
   24d74:	mov	r2, #5
   24d78:	ldr	r3, [r3, #416]	; 0x1a0
   24d7c:	add	r1, r1, r3
   24d80:	b	11638 <dcgettext@plt>
   24d84:	ldrdeq	sl, [r3], -r8
   24d88:	andeq	r8, r2, r8, ror #28
   24d8c:	ldr	r3, [pc, #12]	; 24da0 <__assert_fail@plt+0x133e4>
   24d90:	ldr	r2, [r3]
   24d94:	str	r0, [r3]
   24d98:	mov	r0, r2
   24d9c:	bx	lr
   24da0:	ldrdeq	sl, [r3], -r8
   24da4:	push	{r4, r5, r6, lr}
   24da8:	mov	r2, #256	; 0x100
   24dac:	ldr	r5, [r0]
   24db0:	ldr	r6, [r0, #16]
   24db4:	mov	r4, r0
   24db8:	mov	r1, #0
   24dbc:	mov	r0, r6
   24dc0:	bl	11818 <memset@plt>
   24dc4:	ldr	r1, [r5, #36]	; 0x24
   24dc8:	mov	r2, r6
   24dcc:	mov	r0, r4
   24dd0:	bl	1cba4 <__assert_fail@plt+0xb1e8>
   24dd4:	ldr	r1, [r5, #40]	; 0x28
   24dd8:	ldr	r3, [r5, #36]	; 0x24
   24ddc:	cmp	r3, r1
   24de0:	beq	24df0 <__assert_fail@plt+0x13434>
   24de4:	mov	r2, r6
   24de8:	mov	r0, r4
   24dec:	bl	1cba4 <__assert_fail@plt+0xb1e8>
   24df0:	ldr	r1, [r5, #44]	; 0x2c
   24df4:	ldr	r3, [r5, #36]	; 0x24
   24df8:	cmp	r3, r1
   24dfc:	beq	24e0c <__assert_fail@plt+0x13450>
   24e00:	mov	r2, r6
   24e04:	mov	r0, r4
   24e08:	bl	1cba4 <__assert_fail@plt+0xb1e8>
   24e0c:	ldr	r1, [r5, #48]	; 0x30
   24e10:	ldr	r3, [r5, #36]	; 0x24
   24e14:	cmp	r3, r1
   24e18:	beq	24e28 <__assert_fail@plt+0x1346c>
   24e1c:	mov	r2, r6
   24e20:	mov	r0, r4
   24e24:	bl	1cba4 <__assert_fail@plt+0xb1e8>
   24e28:	ldrb	r3, [r4, #28]
   24e2c:	mov	r0, #0
   24e30:	orr	r3, r3, #8
   24e34:	strb	r3, [r4, #28]
   24e38:	pop	{r4, r5, r6, pc}
   24e3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e40:	sub	sp, sp, #44	; 0x2c
   24e44:	cmp	r3, r2
   24e48:	ldr	ip, [sp, #80]	; 0x50
   24e4c:	movle	lr, #0
   24e50:	movgt	lr, #1
   24e54:	orrs	lr, lr, r3, lsr #31
   24e58:	ldr	r4, [sp, #88]	; 0x58
   24e5c:	ldr	fp, [r0]
   24e60:	add	r8, r3, ip
   24e64:	mvnne	r7, #0
   24e68:	bne	24fe0 <__assert_fail@plt+0x13624>
   24e6c:	cmp	r8, r2
   24e70:	bgt	24fec <__assert_fail@plt+0x13630>
   24e74:	cmp	ip, #0
   24e78:	cmpge	r3, r8
   24e7c:	movgt	lr, #1
   24e80:	movle	lr, #0
   24e84:	bgt	24fec <__assert_fail@plt+0x13630>
   24e88:	cmp	r8, #0
   24e8c:	movlt	r8, lr
   24e90:	blt	24ea8 <__assert_fail@plt+0x134ec>
   24e94:	cmp	r3, r8
   24e98:	movgt	lr, #0
   24e9c:	movle	lr, #1
   24ea0:	ands	ip, lr, ip, lsr #31
   24ea4:	movne	r8, #0
   24ea8:	ldr	lr, [pc, #700]	; 2516c <__assert_fail@plt+0x137b0>
   24eac:	ldr	r6, [pc, #700]	; 25170 <__assert_fail@plt+0x137b4>
   24eb0:	cmp	lr, #0
   24eb4:	mov	ip, #1
   24eb8:	moveq	ip, lr
   24ebc:	cmp	r6, #0
   24ec0:	mov	lr, #1
   24ec4:	moveq	lr, r6
   24ec8:	mov	r7, r3
   24ecc:	orr	r3, ip, lr
   24ed0:	ands	r3, r3, #255	; 0xff
   24ed4:	str	r2, [sp, #36]	; 0x24
   24ed8:	str	r1, [sp, #32]
   24edc:	mov	r6, r0
   24ee0:	str	r3, [sp, #28]
   24ee4:	beq	24ef0 <__assert_fail@plt+0x13534>
   24ee8:	add	r0, fp, #136	; 0x88
   24eec:	bl	115b4 <pthread_mutex_lock@plt>
   24ef0:	ldrb	r3, [r6, #28]
   24ef4:	cmp	r8, r7
   24ef8:	lsr	sl, r3, #5
   24efc:	and	sl, sl, #3
   24f00:	ble	24f20 <__assert_fail@plt+0x13564>
   24f04:	ldr	r2, [r6, #16]
   24f08:	cmp	r2, #0
   24f0c:	beq	24f20 <__assert_fail@plt+0x13564>
   24f10:	tst	r3, #8
   24f14:	bne	24f20 <__assert_fail@plt+0x13564>
   24f18:	mov	r0, r6
   24f1c:	bl	24da4 <__assert_fail@plt+0x133e8>
   24f20:	ldrb	r2, [r6, #28]
   24f24:	lsr	r3, r2, #4
   24f28:	and	r3, r3, #1
   24f2c:	cmp	r4, #0
   24f30:	orreq	r3, r3, #1
   24f34:	cmp	r3, #0
   24f38:	movne	r5, #1
   24f3c:	movne	r4, #0
   24f40:	bne	24f6c <__assert_fail@plt+0x135b0>
   24f44:	and	r2, r2, #6
   24f48:	cmp	r2, #4
   24f4c:	ldr	r5, [r6, #24]
   24f50:	bne	24ff4 <__assert_fail@plt+0x13638>
   24f54:	ldr	r2, [r4]
   24f58:	cmp	r2, r5
   24f5c:	bhi	24ff4 <__assert_fail@plt+0x13638>
   24f60:	subs	r5, r2, #0
   24f64:	movle	r5, #1
   24f68:	movle	r4, r3
   24f6c:	lsl	r0, r5, #3
   24f70:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   24f74:	subs	r9, r0, #0
   24f78:	mvneq	r7, #1
   24f7c:	beq	24fcc <__assert_fail@plt+0x13610>
   24f80:	ldr	r3, [sp, #84]	; 0x54
   24f84:	str	sl, [sp, #16]
   24f88:	str	r3, [sp, #4]
   24f8c:	str	r9, [sp, #12]
   24f90:	str	r5, [sp, #8]
   24f94:	str	r8, [sp]
   24f98:	mov	r3, r7
   24f9c:	ldr	r2, [sp, #36]	; 0x24
   24fa0:	ldr	r1, [sp, #32]
   24fa4:	mov	r0, r6
   24fa8:	bl	217fc <__assert_fail@plt+0xfe40>
   24fac:	cmp	r0, #0
   24fb0:	beq	24ffc <__assert_fail@plt+0x13640>
   24fb4:	cmp	r0, #1
   24fb8:	mvneq	r7, #0
   24fbc:	beq	24fc4 <__assert_fail@plt+0x13608>
   24fc0:	mvn	r7, #1
   24fc4:	mov	r0, r9
   24fc8:	bl	1a30c <__assert_fail@plt+0x8950>
   24fcc:	ldr	r3, [sp, #28]
   24fd0:	cmp	r3, #0
   24fd4:	beq	24fe0 <__assert_fail@plt+0x13624>
   24fd8:	add	r0, fp, #136	; 0x88
   24fdc:	bl	11500 <pthread_mutex_unlock@plt>
   24fe0:	mov	r0, r7
   24fe4:	add	sp, sp, #44	; 0x2c
   24fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24fec:	mov	r8, r2
   24ff0:	b	24ea8 <__assert_fail@plt+0x134ec>
   24ff4:	add	r5, r5, #1
   24ff8:	b	24f6c <__assert_fail@plt+0x135b0>
   24ffc:	cmp	r4, #0
   25000:	beq	25050 <__assert_fail@plt+0x13694>
   25004:	ldrb	r8, [r6, #28]
   25008:	add	sl, r5, #1
   2500c:	lsr	r8, r8, #1
   25010:	ands	r8, r8, #3
   25014:	bne	25094 <__assert_fail@plt+0x136d8>
   25018:	lsl	r8, sl, #2
   2501c:	mov	r0, r8
   25020:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   25024:	cmp	r0, #0
   25028:	str	r0, [r4, #4]
   2502c:	bne	25068 <__assert_fail@plt+0x136ac>
   25030:	mov	r8, #0
   25034:	ldrb	r3, [r6, #28]
   25038:	and	r8, r8, #3
   2503c:	bic	r3, r3, #6
   25040:	orr	r8, r3, r8, lsl #1
   25044:	tst	r8, #6
   25048:	strb	r8, [r6, #28]
   2504c:	beq	24fc0 <__assert_fail@plt+0x13604>
   25050:	ldrb	r3, [sp, #92]	; 0x5c
   25054:	cmp	r3, #0
   25058:	ldrne	r3, [r9, #4]
   2505c:	subne	r7, r3, r7
   25060:	ldreq	r7, [r9]
   25064:	b	24fc4 <__assert_fail@plt+0x13608>
   25068:	mov	r0, r8
   2506c:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   25070:	cmp	r0, #0
   25074:	mov	r8, r0
   25078:	str	r0, [r4, #8]
   2507c:	strne	sl, [r4]
   25080:	movne	r8, #1
   25084:	bne	25104 <__assert_fail@plt+0x13748>
   25088:	ldr	r0, [r4, #4]
   2508c:	bl	1a30c <__assert_fail@plt+0x8950>
   25090:	b	25034 <__assert_fail@plt+0x13678>
   25094:	cmp	r8, #1
   25098:	movne	r8, #2
   2509c:	bne	25104 <__assert_fail@plt+0x13748>
   250a0:	ldr	r3, [r4]
   250a4:	cmp	r3, sl
   250a8:	bcs	25104 <__assert_fail@plt+0x13748>
   250ac:	lsl	r2, sl, #2
   250b0:	mov	r1, r2
   250b4:	ldr	r0, [r4, #4]
   250b8:	str	r2, [sp, #36]	; 0x24
   250bc:	bl	1a484 <__assert_fail@plt+0x8ac8>
   250c0:	subs	r3, r0, #0
   250c4:	str	r3, [sp, #32]
   250c8:	beq	25030 <__assert_fail@plt+0x13674>
   250cc:	ldr	r2, [sp, #36]	; 0x24
   250d0:	ldr	r0, [r4, #8]
   250d4:	mov	r1, r2
   250d8:	bl	1a484 <__assert_fail@plt+0x8ac8>
   250dc:	ldr	r3, [sp, #32]
   250e0:	subs	r2, r0, #0
   250e4:	strne	r3, [r4, #4]
   250e8:	strne	r2, [r4, #8]
   250ec:	strne	sl, [r4]
   250f0:	bne	25104 <__assert_fail@plt+0x13748>
   250f4:	mov	r0, r3
   250f8:	str	r2, [sp, #32]
   250fc:	bl	1a30c <__assert_fail@plt+0x8950>
   25100:	b	25030 <__assert_fail@plt+0x13674>
   25104:	mov	r2, r9
   25108:	mov	r3, #0
   2510c:	cmp	r5, r3
   25110:	add	r2, r2, #8
   25114:	bgt	2514c <__assert_fail@plt+0x13790>
   25118:	bic	r5, r5, r5, asr #31
   2511c:	mvn	r2, #0
   25120:	lsl	r3, r5, #2
   25124:	ldr	r1, [r4]
   25128:	cmp	r5, r1
   2512c:	bcs	25034 <__assert_fail@plt+0x13678>
   25130:	ldr	r1, [r4, #4]
   25134:	ldr	r0, [r4, #8]
   25138:	add	r5, r5, #1
   2513c:	str	r2, [r0, r3]
   25140:	str	r2, [r1, r3]
   25144:	add	r3, r3, #4
   25148:	b	25124 <__assert_fail@plt+0x13768>
   2514c:	ldr	r1, [r4, #4]
   25150:	ldr	r0, [r2, #-8]
   25154:	str	r0, [r1, r3, lsl #2]
   25158:	ldr	r1, [r4, #8]
   2515c:	ldr	r0, [r2, #-4]
   25160:	str	r0, [r1, r3, lsl #2]
   25164:	add	r3, r3, #1
   25168:	b	2510c <__assert_fail@plt+0x13750>
	...
   25174:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25178:	sub	sp, sp, #20
   2517c:	mov	r7, r3
   25180:	ldr	r9, [sp, #72]	; 0x48
   25184:	ldr	r5, [sp, #56]	; 0x38
   25188:	orr	r3, r2, r9
   2518c:	orrs	r3, r3, r5
   25190:	bpl	251b8 <__assert_fail@plt+0x137fc>
   25194:	mvn	r4, #1
   25198:	mov	r0, r4
   2519c:	add	sp, sp, #20
   251a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   251a4:	mov	r7, r8
   251a8:	mov	r6, #0
   251ac:	b	25220 <__assert_fail@plt+0x13864>
   251b0:	mov	r6, r4
   251b4:	b	25220 <__assert_fail@plt+0x13864>
   251b8:	cmp	r5, #0
   251bc:	mov	sl, r0
   251c0:	mov	r8, r1
   251c4:	mov	r4, r2
   251c8:	blt	251dc <__assert_fail@plt+0x13820>
   251cc:	mvn	r3, #-2147483648	; 0x80000000
   251d0:	sub	r3, r3, r5
   251d4:	cmp	r4, r3
   251d8:	bgt	25194 <__assert_fail@plt+0x137d8>
   251dc:	cmp	r5, #0
   251e0:	add	fp, r4, r5
   251e4:	ble	251a4 <__assert_fail@plt+0x137e8>
   251e8:	cmp	r4, #0
   251ec:	beq	251b0 <__assert_fail@plt+0x137f4>
   251f0:	mov	r0, fp
   251f4:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   251f8:	subs	r6, r0, #0
   251fc:	beq	25194 <__assert_fail@plt+0x137d8>
   25200:	mov	r2, r4
   25204:	mov	r1, r8
   25208:	bl	115e4 <memcpy@plt>
   2520c:	mov	r1, r7
   25210:	mov	r2, r5
   25214:	add	r0, r6, r4
   25218:	bl	115e4 <memcpy@plt>
   2521c:	mov	r7, r6
   25220:	ldrb	r3, [sp, #76]	; 0x4c
   25224:	str	r9, [sp, #4]
   25228:	mov	r2, fp
   2522c:	str	r3, [sp, #12]
   25230:	ldr	r3, [sp, #68]	; 0x44
   25234:	mov	r1, r7
   25238:	str	r3, [sp, #8]
   2523c:	ldr	r3, [sp, #64]	; 0x40
   25240:	mov	r0, sl
   25244:	str	r3, [sp]
   25248:	ldr	r3, [sp, #60]	; 0x3c
   2524c:	bl	24e3c <__assert_fail@plt+0x13480>
   25250:	mov	r4, r0
   25254:	mov	r0, r6
   25258:	bl	1a30c <__assert_fail@plt+0x8950>
   2525c:	b	25198 <__assert_fail@plt+0x137dc>
   25260:	ldr	r3, [pc, #232]	; 25350 <__assert_fail@plt+0x13994>
   25264:	tst	r2, #1
   25268:	push	{r4, r5, r6, r7, r8, lr}
   2526c:	mov	r4, r0
   25270:	ldr	r6, [pc, #220]	; 25354 <__assert_fail@plt+0x13998>
   25274:	moveq	r6, r3
   25278:	mov	r3, #0
   2527c:	str	r3, [r0]
   25280:	str	r3, [r0, #4]
   25284:	str	r3, [r0, #8]
   25288:	mov	r0, #256	; 0x100
   2528c:	mov	r7, r1
   25290:	mov	r5, r2
   25294:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   25298:	cmp	r0, #0
   2529c:	str	r0, [r4, #16]
   252a0:	beq	25348 <__assert_fail@plt+0x1398c>
   252a4:	ldrb	r2, [r4, #28]
   252a8:	tst	r5, #2
   252ac:	movne	r3, #4194304	; 0x400000
   252b0:	moveq	r3, #0
   252b4:	tst	r5, #4
   252b8:	orrne	r2, r2, #128	; 0x80
   252bc:	biceq	r2, r2, #128	; 0x80
   252c0:	strb	r2, [r4, #28]
   252c4:	ldrb	r2, [r4, #28]
   252c8:	lsl	r5, r5, #1
   252cc:	and	r5, r5, #16
   252d0:	bic	r2, r2, #16
   252d4:	orr	r6, r6, r3
   252d8:	orr	r5, r5, r2
   252dc:	mov	r3, #0
   252e0:	bicne	r6, r6, #64	; 0x40
   252e4:	strb	r5, [r4, #28]
   252e8:	str	r3, [r4, #20]
   252ec:	mov	r0, r7
   252f0:	orrne	r6, r6, #256	; 0x100
   252f4:	bl	117ac <strlen@plt>
   252f8:	mov	r3, r6
   252fc:	mov	r1, r7
   25300:	mov	r2, r0
   25304:	mov	r0, r4
   25308:	bl	2417c <__assert_fail@plt+0x127c0>
   2530c:	cmp	r0, #16
   25310:	mov	r5, r0
   25314:	beq	25330 <__assert_fail@plt+0x13974>
   25318:	cmp	r0, #0
   2531c:	bne	25334 <__assert_fail@plt+0x13978>
   25320:	mov	r0, r4
   25324:	bl	24da4 <__assert_fail@plt+0x133e8>
   25328:	mov	r0, r5
   2532c:	pop	{r4, r5, r6, r7, r8, pc}
   25330:	mov	r5, #8
   25334:	ldr	r0, [r4, #16]
   25338:	bl	1a30c <__assert_fail@plt+0x8950>
   2533c:	mov	r3, #0
   25340:	str	r3, [r4, #16]
   25344:	b	25328 <__assert_fail@plt+0x1396c>
   25348:	mov	r0, #12
   2534c:	pop	{r4, r5, r6, r7, r8, pc}
   25350:	smlabteq	r1, r6, r2, r0
   25354:	strdeq	fp, [r3], -ip
   25358:	cmp	r0, #16
   2535c:	push	{r4, r5, r6, r7, r8, lr}
   25360:	bls	25368 <__assert_fail@plt+0x139ac>
   25364:	bl	11980 <abort@plt>
   25368:	mov	r4, r3
   2536c:	ldr	r3, [pc, #88]	; 253cc <__assert_fail@plt+0x13a10>
   25370:	mov	r6, r2
   25374:	add	r1, r3, #32
   25378:	add	r3, r3, r0, lsl #2
   2537c:	mov	r2, #5
   25380:	ldr	r3, [r3, #416]	; 0x1a0
   25384:	mov	r0, #0
   25388:	add	r1, r1, r3
   2538c:	bl	11638 <dcgettext@plt>
   25390:	mov	r7, r0
   25394:	bl	117ac <strlen@plt>
   25398:	cmp	r4, #0
   2539c:	add	r5, r0, #1
   253a0:	beq	253c4 <__assert_fail@plt+0x13a08>
   253a4:	cmp	r5, r4
   253a8:	subhi	r2, r4, #1
   253ac:	movhi	r3, #0
   253b0:	strbhi	r3, [r6, r2]
   253b4:	movls	r2, r5
   253b8:	mov	r1, r7
   253bc:	mov	r0, r6
   253c0:	bl	115e4 <memcpy@plt>
   253c4:	mov	r0, r5
   253c8:	pop	{r4, r5, r6, r7, r8, pc}
   253cc:	andeq	r8, r2, r8, ror #28
   253d0:	push	{r4, r5, r6, lr}
   253d4:	mov	r4, r0
   253d8:	ldr	r5, [r0]
   253dc:	cmp	r5, #0
   253e0:	beq	25420 <__assert_fail@plt+0x13a64>
   253e4:	ldr	r2, [pc, #92]	; 25448 <__assert_fail@plt+0x13a8c>
   253e8:	ldr	r1, [pc, #92]	; 2544c <__assert_fail@plt+0x13a90>
   253ec:	cmp	r2, #0
   253f0:	mov	r3, #1
   253f4:	moveq	r3, r2
   253f8:	cmp	r1, #0
   253fc:	mov	r2, #1
   25400:	moveq	r2, r1
   25404:	orr	r3, r3, r2
   25408:	tst	r3, #1
   2540c:	beq	25418 <__assert_fail@plt+0x13a5c>
   25410:	add	r0, r5, #136	; 0x88
   25414:	bl	1156c <pthread_mutex_destroy@plt>
   25418:	mov	r0, r5
   2541c:	bl	1bcb4 <__assert_fail@plt+0xa2f8>
   25420:	mov	r5, #0
   25424:	ldr	r0, [r4, #16]
   25428:	str	r5, [r4]
   2542c:	str	r5, [r4, #4]
   25430:	bl	1a30c <__assert_fail@plt+0x8950>
   25434:	str	r5, [r4, #16]
   25438:	ldr	r0, [r4, #20]
   2543c:	bl	1a30c <__assert_fail@plt+0x8950>
   25440:	str	r5, [r4, #20]
   25444:	pop	{r4, r5, r6, pc}
	...
   25450:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25454:	sub	sp, sp, #36	; 0x24
   25458:	ldr	r9, [sp, #72]	; 0x48
   2545c:	bics	ip, r9, #7
   25460:	movne	r0, #2
   25464:	bne	25528 <__assert_fail@plt+0x13b6c>
   25468:	ands	fp, r9, #4
   2546c:	mov	r8, r3
   25470:	str	r2, [sp, #28]
   25474:	mov	r7, r1
   25478:	mov	r6, r0
   2547c:	ldrne	fp, [r3]
   25480:	ldrne	r5, [r3, #4]
   25484:	bne	25494 <__assert_fail@plt+0x13ad8>
   25488:	mov	r0, r1
   2548c:	bl	117ac <strlen@plt>
   25490:	mov	r5, r0
   25494:	ldr	r2, [pc, #148]	; 25530 <__assert_fail@plt+0x13b74>
   25498:	ldr	r1, [pc, #148]	; 25534 <__assert_fail@plt+0x13b78>
   2549c:	cmp	r2, #0
   254a0:	mov	r4, #1
   254a4:	moveq	r4, r2
   254a8:	cmp	r1, #0
   254ac:	mov	r2, #1
   254b0:	moveq	r2, r1
   254b4:	orr	r4, r4, r2
   254b8:	ands	r4, r4, #255	; 0xff
   254bc:	ldr	sl, [r6]
   254c0:	beq	254cc <__assert_fail@plt+0x13b10>
   254c4:	add	r0, sl, #136	; 0x88
   254c8:	bl	115b4 <pthread_mutex_lock@plt>
   254cc:	ldrb	r2, [r6, #28]
   254d0:	mov	r1, r7
   254d4:	str	r5, [sp, #4]
   254d8:	tst	r2, #16
   254dc:	movne	r2, #0
   254e0:	ldreq	r3, [sp, #28]
   254e4:	strne	r2, [sp, #12]
   254e8:	strne	r2, [sp, #8]
   254ec:	streq	r3, [sp, #8]
   254f0:	streq	r8, [sp, #12]
   254f4:	str	r5, [sp]
   254f8:	mov	r2, r5
   254fc:	str	r9, [sp, #16]
   25500:	mov	r3, fp
   25504:	mov	r0, r6
   25508:	bl	217fc <__assert_fail@plt+0xfe40>
   2550c:	cmp	r4, #0
   25510:	mov	r5, r0
   25514:	beq	25520 <__assert_fail@plt+0x13b64>
   25518:	add	r0, sl, #136	; 0x88
   2551c:	bl	11500 <pthread_mutex_unlock@plt>
   25520:	adds	r0, r5, #0
   25524:	movne	r0, #1
   25528:	add	sp, sp, #36	; 0x24
   2552c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
   25538:	push	{r0, r1, r2, r3, r4, lr}
   2553c:	mov	ip, #1
   25540:	str	ip, [sp, #12]
   25544:	ldr	ip, [sp, #24]
   25548:	stmib	sp, {r2, ip}
   2554c:	mov	ip, #0
   25550:	str	ip, [sp]
   25554:	bl	24e3c <__assert_fail@plt+0x13480>
   25558:	add	sp, sp, #20
   2555c:	pop	{pc}		; (ldr pc, [sp], #4)
   25560:	push	{r0, r1, r2, r3, r4, lr}
   25564:	mov	ip, #0
   25568:	str	ip, [sp, #12]
   2556c:	ldr	ip, [sp, #28]
   25570:	stmib	sp, {r2, ip}
   25574:	ldr	ip, [sp, #24]
   25578:	str	ip, [sp]
   2557c:	bl	24e3c <__assert_fail@plt+0x13480>
   25580:	add	sp, sp, #20
   25584:	pop	{pc}		; (ldr pc, [sp], #4)
   25588:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2558c:	mov	ip, #1
   25590:	str	ip, [sp, #20]
   25594:	ldr	ip, [sp, #44]	; 0x2c
   25598:	str	ip, [sp, #16]
   2559c:	ldr	ip, [sp, #40]	; 0x28
   255a0:	str	ip, [sp, #12]
   255a4:	mov	ip, #0
   255a8:	str	ip, [sp, #8]
   255ac:	ldr	ip, [sp, #36]	; 0x24
   255b0:	str	ip, [sp, #4]
   255b4:	ldr	ip, [sp, #32]
   255b8:	str	ip, [sp]
   255bc:	bl	25174 <__assert_fail@plt+0x137b8>
   255c0:	add	sp, sp, #28
   255c4:	pop	{pc}		; (ldr pc, [sp], #4)
   255c8:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   255cc:	mov	ip, #0
   255d0:	str	ip, [sp, #20]
   255d4:	ldr	ip, [sp, #48]	; 0x30
   255d8:	str	ip, [sp, #16]
   255dc:	ldr	ip, [sp, #44]	; 0x2c
   255e0:	str	ip, [sp, #12]
   255e4:	ldr	ip, [sp, #40]	; 0x28
   255e8:	str	ip, [sp, #8]
   255ec:	ldr	ip, [sp, #36]	; 0x24
   255f0:	str	ip, [sp, #4]
   255f4:	ldr	ip, [sp, #32]
   255f8:	str	ip, [sp]
   255fc:	bl	25174 <__assert_fail@plt+0x137b8>
   25600:	add	sp, sp, #28
   25604:	pop	{pc}		; (ldr pc, [sp], #4)
   25608:	ldrb	ip, [r0, #28]
   2560c:	cmp	r2, #0
   25610:	bicne	ip, ip, #4
   25614:	orrne	ip, ip, #2
   25618:	strbne	ip, [r0, #28]
   2561c:	stmne	r1, {r2, r3}
   25620:	ldrne	r3, [sp]
   25624:	biceq	ip, ip, #6
   25628:	strbeq	ip, [r0, #28]
   2562c:	strne	r3, [r1, #8]
   25630:	streq	r2, [r1]
   25634:	streq	r2, [r1, #8]
   25638:	streq	r2, [r1, #4]
   2563c:	bx	lr
   25640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25644:	mov	r6, #1
   25648:	sub	sp, sp, #20
   2564c:	mov	r9, r0
   25650:	mov	sl, r1
   25654:	mov	r4, r6
   25658:	mov	r8, #0
   2565c:	mvn	r5, #0
   25660:	mov	fp, r6
   25664:	str	r2, [sp, #4]
   25668:	add	r7, r4, r8
   2566c:	cmp	r7, sl
   25670:	bcc	256b8 <__assert_fail@plt+0x13cfc>
   25674:	ldr	r3, [sp, #4]
   25678:	mov	r8, #1
   2567c:	mov	r4, r8
   25680:	str	r6, [r3]
   25684:	mov	fp, #0
   25688:	mvn	r6, #0
   2568c:	add	r7, r4, fp
   25690:	cmp	sl, r7
   25694:	bhi	25764 <__assert_fail@plt+0x13da8>
   25698:	add	r0, r5, #1
   2569c:	add	r6, r6, #1
   256a0:	cmp	r6, r0
   256a4:	movcs	r0, r6
   256a8:	ldrcs	r3, [sp, #4]
   256ac:	strcs	r8, [r3]
   256b0:	add	sp, sp, #20
   256b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256b8:	bl	1177c <__ctype_b_loc@plt>
   256bc:	ldrb	r3, [r9, r7]
   256c0:	sxth	r2, r3
   256c4:	str	r2, [sp, #12]
   256c8:	ldr	r1, [r0]
   256cc:	lsl	r0, r2, #1
   256d0:	ldrh	r0, [r1, r0]
   256d4:	tst	r0, #256	; 0x100
   256d8:	beq	256f4 <__assert_fail@plt+0x13d38>
   256dc:	str	r1, [sp, #8]
   256e0:	bl	11758 <__ctype_tolower_loc@plt>
   256e4:	ldr	r2, [sp, #12]
   256e8:	ldr	r1, [sp, #8]
   256ec:	ldr	r3, [r0]
   256f0:	ldrb	r3, [r3, r2, lsl #2]
   256f4:	add	r2, r9, r5
   256f8:	ldrb	r0, [r2, r4]
   256fc:	sxth	r2, r0
   25700:	str	r2, [sp, #12]
   25704:	lsl	ip, r2, #1
   25708:	ldrh	r1, [r1, ip]
   2570c:	tst	r1, #256	; 0x100
   25710:	beq	2572c <__assert_fail@plt+0x13d70>
   25714:	str	r3, [sp, #8]
   25718:	bl	11758 <__ctype_tolower_loc@plt>
   2571c:	ldr	r2, [sp, #12]
   25720:	ldr	r3, [sp, #8]
   25724:	ldr	r1, [r0]
   25728:	ldrb	r0, [r1, r2, lsl #2]
   2572c:	cmp	r3, r0
   25730:	subcc	r6, r7, r5
   25734:	bcc	25758 <__assert_fail@plt+0x13d9c>
   25738:	addne	r7, r8, #1
   2573c:	movne	r5, r8
   25740:	movne	r6, fp
   25744:	bne	25758 <__assert_fail@plt+0x13d9c>
   25748:	cmp	r4, r6
   2574c:	addne	r4, r4, #1
   25750:	movne	r7, r8
   25754:	bne	2575c <__assert_fail@plt+0x13da0>
   25758:	mov	r4, #1
   2575c:	mov	r8, r7
   25760:	b	25668 <__assert_fail@plt+0x13cac>
   25764:	bl	1177c <__ctype_b_loc@plt>
   25768:	ldrb	r3, [r9, r7]
   2576c:	sxth	r2, r3
   25770:	str	r2, [sp, #12]
   25774:	ldr	r1, [r0]
   25778:	lsl	r0, r2, #1
   2577c:	ldrh	r0, [r1, r0]
   25780:	tst	r0, #256	; 0x100
   25784:	beq	257a0 <__assert_fail@plt+0x13de4>
   25788:	str	r1, [sp, #8]
   2578c:	bl	11758 <__ctype_tolower_loc@plt>
   25790:	ldr	r2, [sp, #12]
   25794:	ldr	r1, [sp, #8]
   25798:	ldr	r3, [r0]
   2579c:	ldrb	r3, [r3, r2, lsl #2]
   257a0:	add	r2, r9, r6
   257a4:	ldrb	r0, [r2, r4]
   257a8:	sxth	r2, r0
   257ac:	str	r2, [sp, #12]
   257b0:	lsl	ip, r2, #1
   257b4:	ldrh	r1, [r1, ip]
   257b8:	tst	r1, #256	; 0x100
   257bc:	beq	257d8 <__assert_fail@plt+0x13e1c>
   257c0:	str	r3, [sp, #8]
   257c4:	bl	11758 <__ctype_tolower_loc@plt>
   257c8:	ldr	r2, [sp, #12]
   257cc:	ldr	r3, [sp, #8]
   257d0:	ldr	r1, [r0]
   257d4:	ldrb	r0, [r1, r2, lsl #2]
   257d8:	cmp	r3, r0
   257dc:	subhi	r8, r7, r6
   257e0:	bhi	257fc <__assert_fail@plt+0x13e40>
   257e4:	bne	25808 <__assert_fail@plt+0x13e4c>
   257e8:	cmp	r4, r8
   257ec:	addne	r4, r4, #1
   257f0:	movne	r7, fp
   257f4:	bne	25800 <__assert_fail@plt+0x13e44>
   257f8:	add	r7, r4, fp
   257fc:	mov	r4, #1
   25800:	mov	fp, r7
   25804:	b	2568c <__assert_fail@plt+0x13cd0>
   25808:	mov	r8, #1
   2580c:	add	r7, fp, #1
   25810:	mov	r6, fp
   25814:	mov	r4, r8
   25818:	b	25800 <__assert_fail@plt+0x13e44>
   2581c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25820:	sub	sp, sp, #1072	; 0x430
   25824:	sub	sp, sp, #4
   25828:	cmp	r3, #2
   2582c:	mov	r7, r0
   25830:	mov	sl, r1
   25834:	mov	r9, r2
   25838:	mov	r8, r3
   2583c:	add	r4, sp, #48	; 0x30
   25840:	bls	258f8 <__assert_fail@plt+0x13f3c>
   25844:	sub	r2, r4, #4
   25848:	mov	r1, r3
   2584c:	mov	r0, r9
   25850:	bl	25640 <__assert_fail@plt+0x13c84>
   25854:	mov	r5, r0
   25858:	mov	r3, #0
   2585c:	str	r8, [r4, r3, lsl #2]
   25860:	add	r3, r3, #1
   25864:	cmp	r3, #256	; 0x100
   25868:	bne	2585c <__assert_fail@plt+0x13ea0>
   2586c:	sub	r3, r8, #1
   25870:	mov	r4, r9
   25874:	mov	r6, r3
   25878:	str	r3, [sp, #12]
   2587c:	cmn	r6, #1
   25880:	bne	25908 <__assert_fail@plt+0x13f4c>
   25884:	ldr	r3, [sp, #44]	; 0x2c
   25888:	mov	r2, r5
   2588c:	add	r1, r9, r3
   25890:	mov	r0, r9
   25894:	str	r3, [sp, #4]
   25898:	bl	117f4 <strncasecmp@plt>
   2589c:	subs	r6, r0, #0
   258a0:	bne	25b3c <__assert_fail@plt+0x14180>
   258a4:	ldr	r3, [sp, #4]
   258a8:	mov	r4, r6
   258ac:	sub	r3, r8, r3
   258b0:	str	r3, [sp, #24]
   258b4:	rsb	r3, r5, #1
   258b8:	str	r3, [sp, #28]
   258bc:	add	r3, r4, r8
   258c0:	sub	r2, r3, sl
   258c4:	mov	r1, #0
   258c8:	add	r0, r7, sl
   258cc:	str	r3, [sp, #8]
   258d0:	bl	1186c <memchr@plt>
   258d4:	add	r3, r4, r8
   258d8:	adds	r3, r3, #0
   258dc:	movne	r3, #1
   258e0:	cmp	r0, #0
   258e4:	movne	r3, #0
   258e8:	cmp	r3, #0
   258ec:	bne	25948 <__assert_fail@plt+0x13f8c>
   258f0:	mov	r0, #0
   258f4:	b	25a98 <__assert_fail@plt+0x140dc>
   258f8:	mov	r3, #1
   258fc:	str	r3, [sp, #44]	; 0x2c
   25900:	sub	r5, r8, #1
   25904:	b	25858 <__assert_fail@plt+0x13e9c>
   25908:	bl	1177c <__ctype_b_loc@plt>
   2590c:	ldrb	r3, [r4], #1
   25910:	sxth	fp, r3
   25914:	lsl	r2, fp, #1
   25918:	ldr	r1, [r0]
   2591c:	ldrh	r2, [r1, r2]
   25920:	tst	r2, #256	; 0x100
   25924:	beq	25934 <__assert_fail@plt+0x13f78>
   25928:	bl	11758 <__ctype_tolower_loc@plt>
   2592c:	ldr	r3, [r0]
   25930:	ldr	r3, [r3, fp, lsl #2]
   25934:	add	r2, sp, #1072	; 0x430
   25938:	add	r3, r2, r3, lsl #2
   2593c:	str	r6, [r3, #-1024]	; 0xfffffc00
   25940:	sub	r6, r6, #1
   25944:	b	2587c <__assert_fail@plt+0x13ec0>
   25948:	bl	1177c <__ctype_b_loc@plt>
   2594c:	ldr	r3, [sp, #8]
   25950:	add	r3, r7, r3
   25954:	ldrb	r3, [r3, #-1]
   25958:	sxth	fp, r3
   2595c:	lsl	r2, fp, #1
   25960:	ldr	sl, [r0]
   25964:	ldrh	r2, [sl, r2]
   25968:	tst	r2, #256	; 0x100
   2596c:	beq	2597c <__assert_fail@plt+0x13fc0>
   25970:	bl	11758 <__ctype_tolower_loc@plt>
   25974:	ldr	r3, [r0]
   25978:	ldr	r3, [r3, fp, lsl #2]
   2597c:	add	r2, sp, #1072	; 0x430
   25980:	add	r3, r2, r3, lsl #2
   25984:	ldr	fp, [r3, #-1024]	; 0xfffffc00
   25988:	cmp	fp, #0
   2598c:	beq	259b4 <__assert_fail@plt+0x13ff8>
   25990:	ldr	r3, [sp, #4]
   25994:	cmp	r6, #0
   25998:	cmpne	r3, fp
   2599c:	ldrhi	fp, [sp, #24]
   259a0:	add	r4, r4, fp
   259a4:	mov	fp, #0
   259a8:	mov	r6, fp
   259ac:	ldr	sl, [sp, #8]
   259b0:	b	258bc <__assert_fail@plt+0x13f00>
   259b4:	cmp	r6, r5
   259b8:	movcs	r3, r6
   259bc:	movcc	r3, r5
   259c0:	add	r2, r7, r4
   259c4:	str	r2, [sp, #16]
   259c8:	ldr	r2, [sp, #12]
   259cc:	cmp	r3, r2
   259d0:	bcs	25a68 <__assert_fail@plt+0x140ac>
   259d4:	ldrb	r2, [r9, r3]
   259d8:	sxth	r1, r2
   259dc:	str	r1, [sp, #32]
   259e0:	lsl	r0, r1, #1
   259e4:	ldrh	r0, [sl, r0]
   259e8:	tst	r0, #256	; 0x100
   259ec:	beq	25a08 <__assert_fail@plt+0x1404c>
   259f0:	str	r3, [sp, #20]
   259f4:	bl	11758 <__ctype_tolower_loc@plt>
   259f8:	ldr	r1, [sp, #32]
   259fc:	ldr	r3, [sp, #20]
   25a00:	ldr	r2, [r0]
   25a04:	ldr	r2, [r2, r1, lsl #2]
   25a08:	ldr	r1, [sp, #16]
   25a0c:	ldrb	r0, [r1, r3]
   25a10:	sxth	r1, r0
   25a14:	str	r1, [sp, #36]	; 0x24
   25a18:	lsl	ip, r1, #1
   25a1c:	ldrh	ip, [sl, ip]
   25a20:	tst	ip, #256	; 0x100
   25a24:	moveq	r1, r0
   25a28:	beq	25a4c <__assert_fail@plt+0x14090>
   25a2c:	str	r2, [sp, #32]
   25a30:	str	r3, [sp, #20]
   25a34:	bl	11758 <__ctype_tolower_loc@plt>
   25a38:	ldr	r1, [sp, #36]	; 0x24
   25a3c:	ldr	r3, [sp, #20]
   25a40:	ldr	r2, [sp, #32]
   25a44:	ldr	r0, [r0]
   25a48:	ldr	r1, [r0, r1, lsl #2]
   25a4c:	cmp	r2, r1
   25a50:	ldrne	r2, [sp, #28]
   25a54:	addne	r4, r2, r4
   25a58:	addne	r4, r3, r4
   25a5c:	bne	259a8 <__assert_fail@plt+0x13fec>
   25a60:	add	r3, r3, #1
   25a64:	b	259c8 <__assert_fail@plt+0x1400c>
   25a68:	add	fp, r4, r5
   25a6c:	add	r3, r7, fp
   25a70:	mov	fp, r5
   25a74:	str	r3, [sp, #20]
   25a78:	add	r3, r9, r5
   25a7c:	str	r3, [sp, #16]
   25a80:	cmp	r6, fp
   25a84:	bcc	25aa4 <__assert_fail@plt+0x140e8>
   25a88:	add	r6, r6, #1
   25a8c:	cmp	r6, fp
   25a90:	bls	25b2c <__assert_fail@plt+0x14170>
   25a94:	add	r0, r7, r4
   25a98:	add	sp, sp, #1072	; 0x430
   25a9c:	add	sp, sp, #4
   25aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25aa4:	ldr	r3, [sp, #16]
   25aa8:	ldrb	r2, [r3, #-1]!
   25aac:	str	r3, [sp, #16]
   25ab0:	sxth	r3, r2
   25ab4:	str	r3, [sp, #32]
   25ab8:	lsl	r0, r3, #1
   25abc:	ldrh	r0, [sl, r0]
   25ac0:	tst	r0, #256	; 0x100
   25ac4:	beq	25ad8 <__assert_fail@plt+0x1411c>
   25ac8:	bl	11758 <__ctype_tolower_loc@plt>
   25acc:	ldr	r3, [sp, #32]
   25ad0:	ldr	r2, [r0]
   25ad4:	ldr	r2, [r2, r3, lsl #2]
   25ad8:	ldr	r3, [sp, #20]
   25adc:	ldrb	r0, [r3, #-1]!
   25ae0:	str	r3, [sp, #20]
   25ae4:	sxth	r3, r0
   25ae8:	str	r3, [sp, #36]	; 0x24
   25aec:	lsl	ip, r3, #1
   25af0:	ldrh	ip, [sl, ip]
   25af4:	tst	ip, #256	; 0x100
   25af8:	moveq	r3, r0
   25afc:	beq	25b18 <__assert_fail@plt+0x1415c>
   25b00:	str	r2, [sp, #32]
   25b04:	bl	11758 <__ctype_tolower_loc@plt>
   25b08:	ldr	r3, [sp, #36]	; 0x24
   25b0c:	ldr	r2, [sp, #32]
   25b10:	ldr	r0, [r0]
   25b14:	ldr	r3, [r0, r3, lsl #2]
   25b18:	cmp	r2, r3
   25b1c:	sub	r0, fp, #1
   25b20:	bne	25a88 <__assert_fail@plt+0x140cc>
   25b24:	mov	fp, r0
   25b28:	b	25a80 <__assert_fail@plt+0x140c4>
   25b2c:	ldr	r3, [sp, #4]
   25b30:	ldr	fp, [sp, #24]
   25b34:	add	r4, r4, r3
   25b38:	b	259a8 <__assert_fail@plt+0x13fec>
   25b3c:	sub	r3, r8, r5
   25b40:	cmp	r3, r5
   25b44:	movcc	r3, r5
   25b48:	add	r3, r3, #1
   25b4c:	mov	r6, #0
   25b50:	str	r3, [sp, #4]
   25b54:	str	r3, [sp, #44]	; 0x2c
   25b58:	rsb	r3, r5, #1
   25b5c:	str	r3, [sp, #16]
   25b60:	add	fp, r6, r8
   25b64:	sub	r2, fp, sl
   25b68:	mov	r1, #0
   25b6c:	add	r0, r7, sl
   25b70:	bl	1186c <memchr@plt>
   25b74:	adds	r3, fp, #0
   25b78:	movne	r3, #1
   25b7c:	cmp	r0, #0
   25b80:	movne	r3, #0
   25b84:	cmp	r3, #0
   25b88:	beq	258f0 <__assert_fail@plt+0x13f34>
   25b8c:	bl	1177c <__ctype_b_loc@plt>
   25b90:	add	r3, r7, fp
   25b94:	ldrb	r3, [r3, #-1]
   25b98:	sxth	r4, r3
   25b9c:	lsl	r2, r4, #1
   25ba0:	ldr	sl, [r0]
   25ba4:	ldrh	r2, [sl, r2]
   25ba8:	tst	r2, #256	; 0x100
   25bac:	beq	25bbc <__assert_fail@plt+0x14200>
   25bb0:	bl	11758 <__ctype_tolower_loc@plt>
   25bb4:	ldr	r3, [r0]
   25bb8:	ldr	r3, [r3, r4, lsl #2]
   25bbc:	add	r2, sp, #1072	; 0x430
   25bc0:	add	r3, r2, r3, lsl #2
   25bc4:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   25bc8:	cmp	r3, #0
   25bcc:	addeq	r3, r7, r6
   25bd0:	moveq	r4, r5
   25bd4:	streq	r3, [sp, #8]
   25bd8:	beq	25be8 <__assert_fail@plt+0x1422c>
   25bdc:	add	r6, r6, r3
   25be0:	b	25c70 <__assert_fail@plt+0x142b4>
   25be4:	add	r4, r4, #1
   25be8:	ldr	r3, [sp, #12]
   25bec:	cmp	r4, r3
   25bf0:	bcs	25c78 <__assert_fail@plt+0x142bc>
   25bf4:	ldrb	r1, [r9, r4]
   25bf8:	sxth	r2, r1
   25bfc:	str	r2, [sp, #20]
   25c00:	lsl	r0, r2, #1
   25c04:	ldrh	r0, [sl, r0]
   25c08:	tst	r0, #256	; 0x100
   25c0c:	beq	25c20 <__assert_fail@plt+0x14264>
   25c10:	bl	11758 <__ctype_tolower_loc@plt>
   25c14:	ldr	r2, [sp, #20]
   25c18:	ldr	r1, [r0]
   25c1c:	ldr	r1, [r1, r2, lsl #2]
   25c20:	ldr	r3, [sp, #8]
   25c24:	ldrb	r0, [r3, r4]
   25c28:	sxth	r2, r0
   25c2c:	str	r2, [sp, #24]
   25c30:	lsl	ip, r2, #1
   25c34:	ldrh	ip, [sl, ip]
   25c38:	tst	ip, #256	; 0x100
   25c3c:	moveq	r2, r0
   25c40:	beq	25c5c <__assert_fail@plt+0x142a0>
   25c44:	str	r1, [sp, #20]
   25c48:	bl	11758 <__ctype_tolower_loc@plt>
   25c4c:	ldr	r2, [sp, #24]
   25c50:	ldr	r1, [sp, #20]
   25c54:	ldr	r0, [r0]
   25c58:	ldr	r2, [r0, r2, lsl #2]
   25c5c:	cmp	r1, r2
   25c60:	beq	25be4 <__assert_fail@plt+0x14228>
   25c64:	ldr	r3, [sp, #16]
   25c68:	add	r6, r3, r6
   25c6c:	add	r6, r4, r6
   25c70:	mov	sl, fp
   25c74:	b	25b60 <__assert_fail@plt+0x141a4>
   25c78:	sub	r4, r5, #1
   25c7c:	add	r3, r7, r6
   25c80:	str	r3, [sp, #8]
   25c84:	cmn	r4, #1
   25c88:	beq	25d08 <__assert_fail@plt+0x1434c>
   25c8c:	ldrb	r2, [r9, r4]
   25c90:	sxth	r3, r2
   25c94:	str	r3, [sp, #20]
   25c98:	lsl	r0, r3, #1
   25c9c:	ldrh	r0, [sl, r0]
   25ca0:	tst	r0, #256	; 0x100
   25ca4:	beq	25cb8 <__assert_fail@plt+0x142fc>
   25ca8:	bl	11758 <__ctype_tolower_loc@plt>
   25cac:	ldr	r3, [sp, #20]
   25cb0:	ldr	r2, [r0]
   25cb4:	ldr	r2, [r2, r3, lsl #2]
   25cb8:	ldr	r3, [sp, #8]
   25cbc:	ldrb	r0, [r3, r4]
   25cc0:	sxth	r3, r0
   25cc4:	str	r3, [sp, #24]
   25cc8:	lsl	ip, r3, #1
   25ccc:	ldrh	ip, [sl, ip]
   25cd0:	tst	ip, #256	; 0x100
   25cd4:	moveq	r3, r0
   25cd8:	beq	25cf4 <__assert_fail@plt+0x14338>
   25cdc:	str	r2, [sp, #20]
   25ce0:	bl	11758 <__ctype_tolower_loc@plt>
   25ce4:	ldr	r3, [sp, #24]
   25ce8:	ldr	r2, [sp, #20]
   25cec:	ldr	r0, [r0]
   25cf0:	ldr	r3, [r0, r3, lsl #2]
   25cf4:	cmp	r2, r3
   25cf8:	ldrne	r3, [sp, #4]
   25cfc:	bne	25bdc <__assert_fail@plt+0x14220>
   25d00:	sub	r4, r4, #1
   25d04:	b	25c84 <__assert_fail@plt+0x142c8>
   25d08:	ldr	r0, [sp, #8]
   25d0c:	b	25a98 <__assert_fail@plt+0x140dc>
   25d10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d14:	mov	r7, r1
   25d18:	sub	sp, sp, #44	; 0x2c
   25d1c:	sub	sl, r0, #1
   25d20:	mov	r4, r1
   25d24:	mov	r8, #1
   25d28:	str	r0, [sp]
   25d2c:	ldrb	r6, [sl, #1]!
   25d30:	cmp	r6, #0
   25d34:	bne	25d4c <__assert_fail@plt+0x14390>
   25d38:	ldrb	r3, [r4]
   25d3c:	cmp	r3, #0
   25d40:	beq	25db8 <__assert_fail@plt+0x143fc>
   25d44:	mov	r0, #0
   25d48:	b	2618c <__assert_fail@plt+0x147d0>
   25d4c:	mov	r9, r4
   25d50:	ldrb	r5, [r9], #1
   25d54:	cmp	r5, #0
   25d58:	beq	25d38 <__assert_fail@plt+0x1437c>
   25d5c:	bl	1177c <__ctype_b_loc@plt>
   25d60:	sxth	r4, r6
   25d64:	lsl	r3, r4, #1
   25d68:	ldr	fp, [r0]
   25d6c:	ldrh	r3, [fp, r3]
   25d70:	tst	r3, #256	; 0x100
   25d74:	beq	25d84 <__assert_fail@plt+0x143c8>
   25d78:	bl	11758 <__ctype_tolower_loc@plt>
   25d7c:	ldr	r3, [r0]
   25d80:	ldr	r6, [r3, r4, lsl #2]
   25d84:	sxth	r4, r5
   25d88:	lsl	r3, r4, #1
   25d8c:	ldrh	r3, [fp, r3]
   25d90:	tst	r3, #256	; 0x100
   25d94:	beq	25da4 <__assert_fail@plt+0x143e8>
   25d98:	bl	11758 <__ctype_tolower_loc@plt>
   25d9c:	ldr	r3, [r0]
   25da0:	ldr	r5, [r3, r4, lsl #2]
   25da4:	cmp	r6, r5
   25da8:	movne	r8, #0
   25dac:	andeq	r8, r8, #1
   25db0:	mov	r4, r9
   25db4:	b	25d2c <__assert_fail@plt+0x14370>
   25db8:	cmp	r8, #0
   25dbc:	ldrne	r0, [sp]
   25dc0:	bne	2618c <__assert_fail@plt+0x147d0>
   25dc4:	ldr	r3, [sp]
   25dc8:	sub	r4, r4, r7
   25dcc:	add	r3, r3, #1
   25dd0:	cmp	r4, #31
   25dd4:	str	r3, [sp, #4]
   25dd8:	sub	r9, r4, #1
   25ddc:	bhi	26178 <__assert_fail@plt+0x147bc>
   25de0:	cmp	r4, #2
   25de4:	movls	r3, #1
   25de8:	strls	r3, [sp, #36]	; 0x24
   25dec:	movls	r5, r9
   25df0:	bls	25e08 <__assert_fail@plt+0x1444c>
   25df4:	add	r2, sp, #36	; 0x24
   25df8:	mov	r1, r4
   25dfc:	mov	r0, r7
   25e00:	bl	25640 <__assert_fail@plt+0x13c84>
   25e04:	mov	r5, r0
   25e08:	ldr	r3, [sp, #36]	; 0x24
   25e0c:	mov	r2, r5
   25e10:	add	r1, r7, r3
   25e14:	mov	r0, r7
   25e18:	str	r3, [sp, #8]
   25e1c:	bl	117f4 <strncasecmp@plt>
   25e20:	subs	r8, r0, #0
   25e24:	bne	25fdc <__assert_fail@plt+0x14620>
   25e28:	ldr	r3, [sp, #8]
   25e2c:	mov	r6, r8
   25e30:	sub	r3, r4, r3
   25e34:	str	r3, [sp, #20]
   25e38:	rsb	r3, r5, #1
   25e3c:	str	r3, [sp, #24]
   25e40:	add	r3, r4, r6
   25e44:	str	r3, [sp, #12]
   25e48:	sub	r2, r3, r9
   25e4c:	ldr	r3, [sp, #4]
   25e50:	mov	r1, #0
   25e54:	add	r0, r3, r9
   25e58:	bl	1186c <memchr@plt>
   25e5c:	add	r3, r4, r6
   25e60:	adds	r3, r3, #0
   25e64:	movne	r3, #1
   25e68:	cmp	r0, #0
   25e6c:	movne	r3, #0
   25e70:	cmp	r3, #0
   25e74:	beq	25d44 <__assert_fail@plt+0x14388>
   25e78:	cmp	r8, r5
   25e7c:	movcs	r9, r8
   25e80:	movcc	r9, r5
   25e84:	cmp	r4, r9
   25e88:	bls	25f14 <__assert_fail@plt+0x14558>
   25e8c:	bl	1177c <__ctype_b_loc@plt>
   25e90:	ldrb	sl, [r7, r9]
   25e94:	sxth	fp, sl
   25e98:	lsl	r2, fp, #1
   25e9c:	ldr	r3, [r0]
   25ea0:	ldrh	r2, [r3, r2]
   25ea4:	tst	r2, #256	; 0x100
   25ea8:	beq	25ec0 <__assert_fail@plt+0x14504>
   25eac:	str	r3, [sp, #16]
   25eb0:	bl	11758 <__ctype_tolower_loc@plt>
   25eb4:	ldr	r3, [sp, #16]
   25eb8:	ldr	r2, [r0]
   25ebc:	ldr	sl, [r2, fp, lsl #2]
   25ec0:	ldr	r1, [sp]
   25ec4:	add	r2, r9, r6
   25ec8:	add	r2, r1, r2
   25ecc:	ldrb	r2, [r2, #1]
   25ed0:	sxth	fp, r2
   25ed4:	lsl	r1, fp, #1
   25ed8:	ldrh	r3, [r3, r1]
   25edc:	tst	r3, #256	; 0x100
   25ee0:	moveq	r3, r2
   25ee4:	beq	25ef4 <__assert_fail@plt+0x14538>
   25ee8:	bl	11758 <__ctype_tolower_loc@plt>
   25eec:	ldr	r3, [r0]
   25ef0:	ldr	r3, [r3, fp, lsl #2]
   25ef4:	cmp	sl, r3
   25ef8:	ldrne	r3, [sp, #24]
   25efc:	movne	r8, #0
   25f00:	addne	r6, r3, r6
   25f04:	addne	r6, r9, r6
   25f08:	bne	25fd4 <__assert_fail@plt+0x14618>
   25f0c:	add	r9, r9, #1
   25f10:	b	25e84 <__assert_fail@plt+0x144c8>
   25f14:	ldr	r3, [sp]
   25f18:	add	sl, r7, r5
   25f1c:	mov	r9, r5
   25f20:	add	r3, r3, r6
   25f24:	str	r3, [sp, #16]
   25f28:	cmp	r8, r9
   25f2c:	bcc	25f48 <__assert_fail@plt+0x1458c>
   25f30:	add	r8, r8, #1
   25f34:	cmp	r8, r9
   25f38:	bls	25fc8 <__assert_fail@plt+0x1460c>
   25f3c:	ldr	r3, [sp, #4]
   25f40:	add	r0, r3, r6
   25f44:	b	2618c <__assert_fail@plt+0x147d0>
   25f48:	bl	1177c <__ctype_b_loc@plt>
   25f4c:	ldrb	r3, [sl, #-1]!
   25f50:	sxth	fp, r3
   25f54:	lsl	r1, fp, #1
   25f58:	ldr	r2, [r0]
   25f5c:	ldrh	r1, [r2, r1]
   25f60:	tst	r1, #256	; 0x100
   25f64:	moveq	fp, r3
   25f68:	beq	25f80 <__assert_fail@plt+0x145c4>
   25f6c:	str	r2, [sp, #28]
   25f70:	bl	11758 <__ctype_tolower_loc@plt>
   25f74:	ldr	r2, [sp, #28]
   25f78:	ldr	r3, [r0]
   25f7c:	ldr	fp, [r3, fp, lsl #2]
   25f80:	ldr	r3, [sp, #16]
   25f84:	ldrb	r1, [r3, r9]
   25f88:	sxth	r3, r1
   25f8c:	str	r3, [sp, #28]
   25f90:	lsl	r0, r3, #1
   25f94:	ldrh	r2, [r2, r0]
   25f98:	tst	r2, #256	; 0x100
   25f9c:	moveq	r3, r1
   25fa0:	beq	25fb4 <__assert_fail@plt+0x145f8>
   25fa4:	bl	11758 <__ctype_tolower_loc@plt>
   25fa8:	ldr	r3, [sp, #28]
   25fac:	ldr	r2, [r0]
   25fb0:	ldr	r3, [r2, r3, lsl #2]
   25fb4:	cmp	fp, r3
   25fb8:	sub	r2, r9, #1
   25fbc:	bne	25f30 <__assert_fail@plt+0x14574>
   25fc0:	mov	r9, r2
   25fc4:	b	25f28 <__assert_fail@plt+0x1456c>
   25fc8:	ldr	r3, [sp, #8]
   25fcc:	ldr	r8, [sp, #20]
   25fd0:	add	r6, r6, r3
   25fd4:	ldr	r9, [sp, #12]
   25fd8:	b	25e40 <__assert_fail@plt+0x14484>
   25fdc:	sub	r8, r4, r5
   25fe0:	cmp	r8, r5
   25fe4:	movcc	r8, r5
   25fe8:	mov	r6, #0
   25fec:	add	r8, r8, #1
   25ff0:	rsb	r3, r5, #1
   25ff4:	str	r8, [sp, #36]	; 0x24
   25ff8:	str	r3, [sp, #12]
   25ffc:	ldr	r3, [sp, #4]
   26000:	add	sl, r4, r6
   26004:	add	r0, r3, r9
   26008:	sub	r2, sl, r9
   2600c:	mov	r1, #0
   26010:	bl	1186c <memchr@plt>
   26014:	adds	r3, sl, #0
   26018:	movne	r3, #1
   2601c:	cmp	r0, #0
   26020:	movne	r3, #0
   26024:	cmp	r3, #0
   26028:	beq	25d44 <__assert_fail@plt+0x14388>
   2602c:	mov	r9, r5
   26030:	b	26038 <__assert_fail@plt+0x1467c>
   26034:	add	r9, r9, #1
   26038:	cmp	r4, r9
   2603c:	bls	260d0 <__assert_fail@plt+0x14714>
   26040:	bl	1177c <__ctype_b_loc@plt>
   26044:	ldrb	r3, [r7, r9]
   26048:	sxth	fp, r3
   2604c:	lsl	r1, fp, #1
   26050:	ldr	r2, [r0]
   26054:	ldrh	r1, [r2, r1]
   26058:	tst	r1, #256	; 0x100
   2605c:	moveq	fp, r3
   26060:	beq	26078 <__assert_fail@plt+0x146bc>
   26064:	str	r2, [sp, #8]
   26068:	bl	11758 <__ctype_tolower_loc@plt>
   2606c:	ldr	r2, [sp, #8]
   26070:	ldr	r3, [r0]
   26074:	ldr	fp, [r3, fp, lsl #2]
   26078:	ldr	r1, [sp]
   2607c:	add	r3, r9, r6
   26080:	add	r3, r1, r3
   26084:	ldrb	r1, [r3, #1]
   26088:	sxth	r3, r1
   2608c:	str	r3, [sp, #8]
   26090:	lsl	r0, r3, #1
   26094:	ldrh	r2, [r2, r0]
   26098:	tst	r2, #256	; 0x100
   2609c:	moveq	r3, r1
   260a0:	beq	260b4 <__assert_fail@plt+0x146f8>
   260a4:	bl	11758 <__ctype_tolower_loc@plt>
   260a8:	ldr	r3, [sp, #8]
   260ac:	ldr	r2, [r0]
   260b0:	ldr	r3, [r2, r3, lsl #2]
   260b4:	cmp	fp, r3
   260b8:	beq	26034 <__assert_fail@plt+0x14678>
   260bc:	ldr	r3, [sp, #12]
   260c0:	add	r6, r3, r6
   260c4:	add	r6, r9, r6
   260c8:	mov	r9, sl
   260cc:	b	25ffc <__assert_fail@plt+0x14640>
   260d0:	ldr	r3, [sp]
   260d4:	add	fp, r7, r5
   260d8:	mov	r9, r5
   260dc:	add	r3, r3, r6
   260e0:	str	r3, [sp, #8]
   260e4:	cmp	r9, #0
   260e8:	beq	25f3c <__assert_fail@plt+0x14580>
   260ec:	bl	1177c <__ctype_b_loc@plt>
   260f0:	ldrb	r2, [fp, #-1]!
   260f4:	sxth	r1, r2
   260f8:	str	r1, [sp, #20]
   260fc:	ldr	r3, [r0]
   26100:	lsl	r0, r1, #1
   26104:	ldrh	r0, [r3, r0]
   26108:	tst	r0, #256	; 0x100
   2610c:	beq	26128 <__assert_fail@plt+0x1476c>
   26110:	str	r3, [sp, #16]
   26114:	bl	11758 <__ctype_tolower_loc@plt>
   26118:	ldr	r1, [sp, #20]
   2611c:	ldr	r3, [sp, #16]
   26120:	ldr	r2, [r0]
   26124:	ldr	r2, [r2, r1, lsl #2]
   26128:	ldr	r1, [sp, #8]
   2612c:	ldrb	r0, [r1, r9]
   26130:	sxth	r1, r0
   26134:	str	r1, [sp, #20]
   26138:	lsl	ip, r1, #1
   2613c:	ldrh	r3, [r3, ip]
   26140:	tst	r3, #256	; 0x100
   26144:	moveq	r3, r0
   26148:	beq	26164 <__assert_fail@plt+0x147a8>
   2614c:	str	r2, [sp, #16]
   26150:	bl	11758 <__ctype_tolower_loc@plt>
   26154:	ldr	r1, [sp, #20]
   26158:	ldr	r2, [sp, #16]
   2615c:	ldr	r3, [r0]
   26160:	ldr	r3, [r3, r1, lsl #2]
   26164:	cmp	r2, r3
   26168:	sub	r9, r9, #1
   2616c:	beq	260e4 <__assert_fail@plt+0x14728>
   26170:	add	r6, r6, r8
   26174:	b	260c8 <__assert_fail@plt+0x1470c>
   26178:	mov	r3, r4
   2617c:	mov	r2, r7
   26180:	mov	r1, r9
   26184:	ldr	r0, [sp, #4]
   26188:	bl	2581c <__assert_fail@plt+0x13e60>
   2618c:	add	sp, sp, #44	; 0x2c
   26190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26194:	push	{r4, r5, r6, r7, r8, r9, lr}
   26198:	mov	lr, #1
   2619c:	mov	ip, lr
   261a0:	mov	r5, #0
   261a4:	mvn	r3, #0
   261a8:	mov	r6, lr
   261ac:	add	r4, ip, r5
   261b0:	cmp	r4, r1
   261b4:	bcc	261f4 <__assert_fail@plt+0x14838>
   261b8:	mov	r4, #1
   261bc:	str	lr, [r2]
   261c0:	mov	ip, r4
   261c4:	mov	r6, #0
   261c8:	mvn	lr, #0
   261cc:	mov	r7, r4
   261d0:	add	r5, ip, r6
   261d4:	cmp	r1, r5
   261d8:	bhi	26238 <__assert_fail@plt+0x1487c>
   261dc:	add	r0, r3, #1
   261e0:	add	lr, lr, #1
   261e4:	cmp	lr, r0
   261e8:	strcs	r4, [r2]
   261ec:	movcs	r0, lr
   261f0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   261f4:	add	r7, r0, r3
   261f8:	ldrb	r8, [r0, r4]
   261fc:	ldrb	r7, [r7, ip]
   26200:	cmp	r8, r7
   26204:	subcc	lr, r4, r3
   26208:	bcc	2622c <__assert_fail@plt+0x14870>
   2620c:	addne	r4, r5, #1
   26210:	movne	r3, r5
   26214:	movne	lr, r6
   26218:	bne	2622c <__assert_fail@plt+0x14870>
   2621c:	cmp	ip, lr
   26220:	addne	ip, ip, #1
   26224:	movne	r4, r5
   26228:	bne	26230 <__assert_fail@plt+0x14874>
   2622c:	mov	ip, #1
   26230:	mov	r5, r4
   26234:	b	261ac <__assert_fail@plt+0x147f0>
   26238:	add	r8, r0, lr
   2623c:	ldrb	r9, [r0, r5]
   26240:	ldrb	r8, [r8, ip]
   26244:	cmp	r9, r8
   26248:	subhi	r4, r5, lr
   2624c:	bhi	26270 <__assert_fail@plt+0x148b4>
   26250:	addne	r5, r6, #1
   26254:	movne	lr, r6
   26258:	movne	r4, r7
   2625c:	bne	26270 <__assert_fail@plt+0x148b4>
   26260:	cmp	ip, r4
   26264:	addne	ip, ip, #1
   26268:	movne	r5, r6
   2626c:	bne	26274 <__assert_fail@plt+0x148b8>
   26270:	mov	ip, #1
   26274:	mov	r6, r5
   26278:	b	261d0 <__assert_fail@plt+0x14814>
   2627c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26280:	sub	sp, sp, #1040	; 0x410
   26284:	sub	sp, sp, #12
   26288:	cmp	r3, #2
   2628c:	mov	r6, r0
   26290:	str	r1, [sp]
   26294:	mov	r7, r2
   26298:	mov	r9, r3
   2629c:	add	r5, sp, #24
   262a0:	bls	26384 <__assert_fail@plt+0x149c8>
   262a4:	sub	r2, r5, #4
   262a8:	mov	r1, r3
   262ac:	mov	r0, r7
   262b0:	bl	26194 <__assert_fail@plt+0x147d8>
   262b4:	mov	r4, r0
   262b8:	mov	r3, #0
   262bc:	str	r9, [r5, r3, lsl #2]
   262c0:	add	r3, r3, #1
   262c4:	cmp	r3, #256	; 0x100
   262c8:	bne	262bc <__assert_fail@plt+0x14900>
   262cc:	mov	r1, r7
   262d0:	sub	r3, r9, #1
   262d4:	str	r3, [sp, #4]
   262d8:	cmn	r3, #1
   262dc:	bne	26394 <__assert_fail@plt+0x149d8>
   262e0:	ldr	r5, [sp, #20]
   262e4:	mov	r2, r4
   262e8:	add	r1, r7, r5
   262ec:	mov	r0, r7
   262f0:	bl	1162c <memcmp@plt>
   262f4:	subs	sl, r0, #0
   262f8:	bne	2644c <__assert_fail@plt+0x14a90>
   262fc:	sub	r3, r9, r5
   26300:	mov	r8, sl
   26304:	str	r3, [sp, #8]
   26308:	rsb	r3, r4, #1
   2630c:	str	r3, [sp, #12]
   26310:	ldr	r3, [sp]
   26314:	add	fp, r8, r9
   26318:	sub	r2, fp, r3
   2631c:	add	r0, r6, r3
   26320:	mov	r1, #0
   26324:	bl	1186c <memchr@plt>
   26328:	adds	r3, fp, #0
   2632c:	movne	r3, #1
   26330:	cmp	r0, #0
   26334:	movne	r3, #0
   26338:	cmp	r3, #0
   2633c:	mov	r0, r3
   26340:	beq	26418 <__assert_fail@plt+0x14a5c>
   26344:	add	r3, r6, fp
   26348:	add	r2, sp, #1040	; 0x410
   2634c:	ldrb	r3, [r3, #-1]
   26350:	add	r2, r2, #8
   26354:	add	r3, r2, r3, lsl #2
   26358:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   2635c:	cmp	r3, #0
   26360:	beq	263b0 <__assert_fail@plt+0x149f4>
   26364:	cmp	sl, #0
   26368:	cmpne	r5, r3
   2636c:	ldrhi	r3, [sp, #8]
   26370:	add	r8, r8, r3
   26374:	mov	r3, #0
   26378:	mov	sl, r3
   2637c:	str	fp, [sp]
   26380:	b	26310 <__assert_fail@plt+0x14954>
   26384:	mov	r3, #1
   26388:	str	r3, [sp, #20]
   2638c:	sub	r4, r9, #1
   26390:	b	262b8 <__assert_fail@plt+0x148fc>
   26394:	ldrb	r2, [r1], #1
   26398:	add	r0, sp, #1040	; 0x410
   2639c:	add	r0, r0, #8
   263a0:	add	r2, r0, r2, lsl #2
   263a4:	str	r3, [r2, #-1024]	; 0xfffffc00
   263a8:	sub	r3, r3, #1
   263ac:	b	262d8 <__assert_fail@plt+0x1491c>
   263b0:	cmp	sl, r4
   263b4:	movcs	r2, sl
   263b8:	movcc	r2, r4
   263bc:	add	ip, r6, r8
   263c0:	ldr	r1, [sp, #4]
   263c4:	cmp	r2, r1
   263c8:	bcs	263f0 <__assert_fail@plt+0x14a34>
   263cc:	ldrb	r0, [r7, r2]
   263d0:	ldrb	r1, [ip, r2]
   263d4:	cmp	r0, r1
   263d8:	ldrne	r1, [sp, #12]
   263dc:	addne	r8, r1, r8
   263e0:	addne	r8, r2, r8
   263e4:	bne	26378 <__assert_fail@plt+0x149bc>
   263e8:	add	r2, r2, #1
   263ec:	b	263c0 <__assert_fail@plt+0x14a04>
   263f0:	add	r2, r8, r4
   263f4:	add	r1, r7, r4
   263f8:	add	r2, r6, r2
   263fc:	mov	r3, r4
   26400:	cmp	sl, r3
   26404:	bcc	26424 <__assert_fail@plt+0x14a68>
   26408:	add	sl, sl, #1
   2640c:	cmp	sl, r3
   26410:	bls	26440 <__assert_fail@plt+0x14a84>
   26414:	add	r0, r6, r8
   26418:	add	sp, sp, #1040	; 0x410
   2641c:	add	sp, sp, #12
   26420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26424:	ldrb	ip, [r1, #-1]!
   26428:	ldrb	r0, [r2, #-1]!
   2642c:	sub	lr, r3, #1
   26430:	cmp	ip, r0
   26434:	bne	26408 <__assert_fail@plt+0x14a4c>
   26438:	mov	r3, lr
   2643c:	b	26400 <__assert_fail@plt+0x14a44>
   26440:	add	r8, r8, r5
   26444:	ldr	r3, [sp, #8]
   26448:	b	26378 <__assert_fail@plt+0x149bc>
   2644c:	sub	r8, r9, r4
   26450:	cmp	r8, r4
   26454:	movcc	r8, r4
   26458:	mov	r5, #0
   2645c:	add	r8, r8, #1
   26460:	mov	fp, r5
   26464:	rsb	r3, r4, #1
   26468:	str	r3, [sp, #8]
   2646c:	ldr	r3, [sp]
   26470:	add	sl, r5, r9
   26474:	sub	r2, sl, r3
   26478:	add	r0, r6, r3
   2647c:	mov	r1, fp
   26480:	bl	1186c <memchr@plt>
   26484:	adds	r3, sl, #0
   26488:	movne	r3, #1
   2648c:	cmp	r0, #0
   26490:	movne	r3, #0
   26494:	cmp	r3, #0
   26498:	mov	r0, r3
   2649c:	ldr	r3, [sp, #8]
   264a0:	beq	26418 <__assert_fail@plt+0x14a5c>
   264a4:	add	r2, r6, sl
   264a8:	add	r1, sp, #1040	; 0x410
   264ac:	ldrb	r2, [r2, #-1]
   264b0:	add	r1, r1, #8
   264b4:	add	r2, r1, r2, lsl #2
   264b8:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   264bc:	cmp	r2, #0
   264c0:	moveq	r2, r4
   264c4:	addeq	ip, r6, r5
   264c8:	beq	264dc <__assert_fail@plt+0x14b20>
   264cc:	add	r5, r2, r5
   264d0:	str	sl, [sp]
   264d4:	b	26468 <__assert_fail@plt+0x14aac>
   264d8:	add	r2, r2, #1
   264dc:	ldr	r1, [sp, #4]
   264e0:	cmp	r2, r1
   264e4:	bcs	26500 <__assert_fail@plt+0x14b44>
   264e8:	ldrb	r0, [r7, r2]
   264ec:	ldrb	r1, [ip, r2]
   264f0:	cmp	r0, r1
   264f4:	beq	264d8 <__assert_fail@plt+0x14b1c>
   264f8:	add	r5, r3, r5
   264fc:	b	264cc <__assert_fail@plt+0x14b10>
   26500:	add	r2, r5, r4
   26504:	add	r1, r7, r4
   26508:	add	r2, r6, r2
   2650c:	cmp	r7, r1
   26510:	beq	2652c <__assert_fail@plt+0x14b70>
   26514:	ldrb	ip, [r1, #-1]!
   26518:	ldrb	r0, [r2, #-1]!
   2651c:	cmp	ip, r0
   26520:	beq	2650c <__assert_fail@plt+0x14b50>
   26524:	add	r5, r5, r8
   26528:	b	264d0 <__assert_fail@plt+0x14b14>
   2652c:	add	r0, r6, r5
   26530:	b	26418 <__assert_fail@plt+0x14a5c>
   26534:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26538:	sub	lr, r0, #1
   2653c:	sub	sp, sp, #28
   26540:	mov	fp, r1
   26544:	mov	r7, #1
   26548:	ldrb	ip, [lr, #1]!
   2654c:	cmp	ip, #0
   26550:	bne	26568 <__assert_fail@plt+0x14bac>
   26554:	ldrb	r3, [fp]
   26558:	cmp	r3, #0
   2655c:	beq	2658c <__assert_fail@plt+0x14bd0>
   26560:	mov	r0, #0
   26564:	b	266dc <__assert_fail@plt+0x14d20>
   26568:	mov	r3, fp
   2656c:	ldrb	r2, [r3], #1
   26570:	cmp	r2, #0
   26574:	beq	26554 <__assert_fail@plt+0x14b98>
   26578:	cmp	ip, r2
   2657c:	movne	r7, #0
   26580:	andeq	r7, r7, #1
   26584:	mov	fp, r3
   26588:	b	26548 <__assert_fail@plt+0x14b8c>
   2658c:	cmp	r7, #0
   26590:	bne	266dc <__assert_fail@plt+0x14d20>
   26594:	mov	sl, r0
   26598:	sub	r6, fp, r1
   2659c:	add	r0, r0, #1
   265a0:	ldrb	r1, [r1]
   265a4:	bl	117b8 <strchr@plt>
   265a8:	subs	r4, r0, #0
   265ac:	beq	26560 <__assert_fail@plt+0x14ba4>
   265b0:	cmp	r6, #1
   265b4:	moveq	r0, r4
   265b8:	beq	266dc <__assert_fail@plt+0x14d20>
   265bc:	add	r0, sl, r6
   265c0:	cmp	r4, r0
   265c4:	subls	r1, r0, r4
   265c8:	movhi	r1, #1
   265cc:	cmp	r6, #31
   265d0:	sub	fp, fp, r6
   265d4:	mov	r9, r1
   265d8:	bhi	267c4 <__assert_fail@plt+0x14e08>
   265dc:	cmp	r6, #2
   265e0:	bls	2669c <__assert_fail@plt+0x14ce0>
   265e4:	add	r2, sp, #20
   265e8:	mov	r1, r6
   265ec:	mov	r0, fp
   265f0:	bl	26194 <__assert_fail@plt+0x147d8>
   265f4:	mov	r5, r0
   265f8:	ldr	r7, [sp, #20]
   265fc:	mov	r2, r5
   26600:	add	r1, fp, r7
   26604:	mov	r0, fp
   26608:	bl	1162c <memcmp@plt>
   2660c:	subs	r8, r0, #0
   26610:	bne	26710 <__assert_fail@plt+0x14d54>
   26614:	sub	r3, r6, r7
   26618:	mov	sl, r8
   2661c:	str	r3, [sp, #4]
   26620:	rsb	r3, r5, #1
   26624:	str	r3, [sp, #8]
   26628:	add	r3, r6, sl
   2662c:	sub	r2, r3, r9
   26630:	mov	r1, #0
   26634:	add	r0, r4, r9
   26638:	str	r3, [sp, #12]
   2663c:	bl	1186c <memchr@plt>
   26640:	ldr	r3, [sp, #12]
   26644:	adds	r2, r3, #0
   26648:	movne	r2, #1
   2664c:	cmp	r0, #0
   26650:	movne	r2, #0
   26654:	cmp	r2, #0
   26658:	mov	r0, r2
   2665c:	beq	266dc <__assert_fail@plt+0x14d20>
   26660:	cmp	r8, r5
   26664:	movcs	r2, r8
   26668:	movcc	r2, r5
   2666c:	add	ip, r4, sl
   26670:	cmp	r6, r2
   26674:	bls	266b4 <__assert_fail@plt+0x14cf8>
   26678:	ldrb	r0, [fp, r2]
   2667c:	ldrb	r1, [ip, r2]
   26680:	cmp	r0, r1
   26684:	beq	266ac <__assert_fail@plt+0x14cf0>
   26688:	ldr	r1, [sp, #8]
   2668c:	mov	r8, #0
   26690:	add	sl, r1, sl
   26694:	add	sl, r2, sl
   26698:	b	26708 <__assert_fail@plt+0x14d4c>
   2669c:	mov	r3, #1
   266a0:	str	r3, [sp, #20]
   266a4:	sub	r5, r6, #1
   266a8:	b	265f8 <__assert_fail@plt+0x14c3c>
   266ac:	add	r2, r2, #1
   266b0:	b	26670 <__assert_fail@plt+0x14cb4>
   266b4:	add	r9, sl, r5
   266b8:	add	r1, fp, r5
   266bc:	add	r9, r4, r9
   266c0:	mov	r2, r5
   266c4:	cmp	r8, r2
   266c8:	bcc	266e4 <__assert_fail@plt+0x14d28>
   266cc:	add	r8, r8, #1
   266d0:	cmp	r8, r2
   266d4:	bls	26700 <__assert_fail@plt+0x14d44>
   266d8:	add	r0, r4, sl
   266dc:	add	sp, sp, #28
   266e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   266e4:	ldrb	ip, [r1, #-1]!
   266e8:	ldrb	r0, [r9, #-1]!
   266ec:	sub	lr, r2, #1
   266f0:	cmp	ip, r0
   266f4:	bne	266cc <__assert_fail@plt+0x14d10>
   266f8:	mov	r2, lr
   266fc:	b	266c4 <__assert_fail@plt+0x14d08>
   26700:	ldr	r8, [sp, #4]
   26704:	add	sl, sl, r7
   26708:	mov	r9, r3
   2670c:	b	26628 <__assert_fail@plt+0x14c6c>
   26710:	sub	r8, r6, r5
   26714:	cmp	r8, r5
   26718:	movcc	r8, r5
   2671c:	add	r8, r8, #1
   26720:	mov	r7, #0
   26724:	rsb	r3, r5, #1
   26728:	add	sl, r6, r7
   2672c:	sub	r2, sl, r9
   26730:	mov	r1, #0
   26734:	add	r0, r4, r9
   26738:	str	r3, [sp, #4]
   2673c:	bl	1186c <memchr@plt>
   26740:	adds	r3, sl, #0
   26744:	movne	r3, #1
   26748:	cmp	r0, #0
   2674c:	movne	r3, #0
   26750:	cmp	r3, #0
   26754:	mov	r0, r3
   26758:	beq	266dc <__assert_fail@plt+0x14d20>
   2675c:	mov	r2, r5
   26760:	add	r1, r4, r7
   26764:	ldr	r3, [sp, #4]
   26768:	b	26770 <__assert_fail@plt+0x14db4>
   2676c:	add	r2, r2, #1
   26770:	cmp	r6, r2
   26774:	bls	26798 <__assert_fail@plt+0x14ddc>
   26778:	ldrb	ip, [fp, r2]
   2677c:	ldrb	r0, [r1, r2]
   26780:	cmp	ip, r0
   26784:	beq	2676c <__assert_fail@plt+0x14db0>
   26788:	add	r7, r3, r7
   2678c:	add	r7, r7, r2
   26790:	mov	r9, sl
   26794:	b	26728 <__assert_fail@plt+0x14d6c>
   26798:	add	r2, r7, r5
   2679c:	add	r1, fp, r5
   267a0:	add	r2, r4, r2
   267a4:	cmp	fp, r1
   267a8:	beq	267d8 <__assert_fail@plt+0x14e1c>
   267ac:	ldrb	ip, [r1, #-1]!
   267b0:	ldrb	r0, [r2, #-1]!
   267b4:	cmp	ip, r0
   267b8:	beq	267a4 <__assert_fail@plt+0x14de8>
   267bc:	add	r7, r7, r8
   267c0:	b	26790 <__assert_fail@plt+0x14dd4>
   267c4:	mov	r3, r6
   267c8:	mov	r2, fp
   267cc:	mov	r0, r4
   267d0:	bl	2627c <__assert_fail@plt+0x148c0>
   267d4:	b	266dc <__assert_fail@plt+0x14d20>
   267d8:	add	r0, r4, r7
   267dc:	b	266dc <__assert_fail@plt+0x14d20>
   267e0:	ldr	r3, [pc, #8]	; 267f0 <__assert_fail@plt+0x14e34>
   267e4:	push	{r4, lr}
   267e8:	ldr	r0, [r3]
   267ec:	bl	11788 <exit@plt>
   267f0:	andeq	sl, r3, r0, asr #3
   267f4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   267f8:	mov	r8, r2
   267fc:	str	r0, [sp]
   26800:	mov	fp, r1
   26804:	mov	r9, r3
   26808:	bl	117ac <strlen@plt>
   2680c:	mov	r5, #0
   26810:	mov	r7, r8
   26814:	mvn	r4, #0
   26818:	mov	r6, r5
   2681c:	mov	sl, r0
   26820:	ldr	r3, [fp, r6, lsl #2]
   26824:	cmp	r3, #0
   26828:	bne	26838 <__assert_fail@plt+0x14e7c>
   2682c:	cmp	r5, #0
   26830:	mvnne	r4, #1
   26834:	b	2686c <__assert_fail@plt+0x14eb0>
   26838:	mov	r2, sl
   2683c:	ldr	r1, [sp]
   26840:	mov	r0, r3
   26844:	str	r3, [sp, #4]
   26848:	bl	11974 <strncmp@plt>
   2684c:	cmp	r0, #0
   26850:	bne	268a8 <__assert_fail@plt+0x14eec>
   26854:	ldr	r3, [sp, #4]
   26858:	mov	r0, r3
   2685c:	bl	117ac <strlen@plt>
   26860:	cmp	sl, r0
   26864:	bne	26878 <__assert_fail@plt+0x14ebc>
   26868:	mov	r4, r6
   2686c:	mov	r0, r4
   26870:	add	sp, sp, #12
   26874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26878:	cmn	r4, #1
   2687c:	moveq	r4, r6
   26880:	beq	268a8 <__assert_fail@plt+0x14eec>
   26884:	cmp	r8, #0
   26888:	moveq	r5, #1
   2688c:	beq	268a8 <__assert_fail@plt+0x14eec>
   26890:	mov	r2, r9
   26894:	mov	r1, r7
   26898:	mla	r0, r9, r4, r8
   2689c:	bl	1162c <memcmp@plt>
   268a0:	cmp	r0, #0
   268a4:	movne	r5, #1
   268a8:	add	r6, r6, #1
   268ac:	add	r7, r7, r9
   268b0:	b	26820 <__assert_fail@plt+0x14e64>
   268b4:	cmn	r2, #1
   268b8:	push	{r0, r1, r4, r5, r6, lr}
   268bc:	mov	r2, #5
   268c0:	mov	r5, r1
   268c4:	mov	r6, r0
   268c8:	ldreq	r1, [pc, #76]	; 2691c <__assert_fail@plt+0x14f60>
   268cc:	ldrne	r1, [pc, #76]	; 26920 <__assert_fail@plt+0x14f64>
   268d0:	mov	r0, #0
   268d4:	bl	11638 <dcgettext@plt>
   268d8:	mov	r2, r5
   268dc:	mov	r1, #8
   268e0:	mov	r4, r0
   268e4:	mov	r0, #0
   268e8:	bl	18fc0 <__assert_fail@plt+0x7604>
   268ec:	mov	r1, r6
   268f0:	mov	r5, r0
   268f4:	mov	r0, #1
   268f8:	bl	19208 <__assert_fail@plt+0x784c>
   268fc:	mov	r1, #0
   26900:	mov	r3, r5
   26904:	mov	r2, r4
   26908:	str	r0, [sp]
   2690c:	mov	r0, r1
   26910:	bl	116e0 <error@plt>
   26914:	add	sp, sp, #8
   26918:	pop	{r4, r5, r6, pc}
   2691c:	andeq	r9, r2, sp, lsl #1
   26920:	andeq	r9, r2, r8, lsr #1
   26924:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26928:	mov	sl, r0
   2692c:	ldr	r4, [pc, #188]	; 269f0 <__assert_fail@plt+0x15034>
   26930:	mov	r5, r1
   26934:	mov	r9, r2
   26938:	ldr	r1, [pc, #180]	; 269f4 <__assert_fail@plt+0x15038>
   2693c:	mov	r2, #5
   26940:	mov	r0, #0
   26944:	bl	11638 <dcgettext@plt>
   26948:	ldr	r1, [r4]
   2694c:	bl	11968 <fputs@plt>
   26950:	mov	r8, #0
   26954:	ldr	fp, [pc, #156]	; 269f8 <__assert_fail@plt+0x1503c>
   26958:	mov	r6, r8
   2695c:	ldr	r7, [sl, r6, lsl #2]
   26960:	cmp	r7, #0
   26964:	bne	2697c <__assert_fail@plt+0x14fc0>
   26968:	ldr	r1, [r4]
   2696c:	mov	r0, #10
   26970:	add	sp, sp, #12
   26974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26978:	b	11914 <putc@plt>
   2697c:	cmp	r6, #0
   26980:	beq	2699c <__assert_fail@plt+0x14fe0>
   26984:	mov	r2, r9
   26988:	mov	r1, r5
   2698c:	mov	r0, r8
   26990:	bl	1162c <memcmp@plt>
   26994:	cmp	r0, #0
   26998:	beq	269c8 <__assert_fail@plt+0x1500c>
   2699c:	mov	r0, r7
   269a0:	ldr	r8, [r4]
   269a4:	bl	19210 <__assert_fail@plt+0x7854>
   269a8:	ldr	r1, [pc, #76]	; 269fc <__assert_fail@plt+0x15040>
   269ac:	mov	r2, r0
   269b0:	mov	r0, r8
   269b4:	bl	117c4 <fprintf@plt>
   269b8:	mov	r8, r5
   269bc:	add	r6, r6, #1
   269c0:	add	r5, r5, r9
   269c4:	b	2695c <__assert_fail@plt+0x14fa0>
   269c8:	ldr	r3, [r4]
   269cc:	mov	r0, r7
   269d0:	str	r3, [sp, #4]
   269d4:	bl	19210 <__assert_fail@plt+0x7854>
   269d8:	ldr	r3, [sp, #4]
   269dc:	mov	r1, fp
   269e0:	mov	r2, r0
   269e4:	mov	r0, r3
   269e8:	bl	117c4 <fprintf@plt>
   269ec:	b	269bc <__assert_fail@plt+0x15000>
   269f0:	andeq	sl, r3, r8, lsl r2
   269f4:	andeq	r9, r2, r5, asr #1
   269f8:	andeq	r9, r2, r2, ror #1
   269fc:	ldrdeq	r9, [r2], -sl
   26a00:	push	{r4, r5, r6, r7, r8, lr}
   26a04:	mov	r6, r1
   26a08:	mov	r4, r2
   26a0c:	mov	r5, r3
   26a10:	mov	r7, r0
   26a14:	ldr	r3, [sp, #24]
   26a18:	mov	r2, r5
   26a1c:	mov	r1, r4
   26a20:	mov	r0, r6
   26a24:	bl	267f4 <__assert_fail@plt+0x14e38>
   26a28:	cmp	r0, #0
   26a2c:	popge	{r4, r5, r6, r7, r8, pc}
   26a30:	mov	r2, r0
   26a34:	mov	r1, r6
   26a38:	mov	r0, r7
   26a3c:	bl	268b4 <__assert_fail@plt+0x14ef8>
   26a40:	mov	r0, r4
   26a44:	ldr	r2, [sp, #24]
   26a48:	mov	r1, r5
   26a4c:	bl	26924 <__assert_fail@plt+0x14f68>
   26a50:	ldr	r3, [sp, #28]
   26a54:	blx	r3
   26a58:	mvn	r0, #0
   26a5c:	pop	{r4, r5, r6, r7, r8, pc}
   26a60:	push	{r4, r5, r6, r7, r8, lr}
   26a64:	mov	r8, r0
   26a68:	mov	r7, r3
   26a6c:	sub	r6, r1, #4
   26a70:	mov	r4, r2
   26a74:	ldr	r5, [r6, #4]!
   26a78:	cmp	r5, #0
   26a7c:	beq	26a9c <__assert_fail@plt+0x150e0>
   26a80:	mov	r1, r4
   26a84:	mov	r2, r7
   26a88:	mov	r0, r8
   26a8c:	bl	1162c <memcmp@plt>
   26a90:	add	r4, r4, r7
   26a94:	cmp	r0, #0
   26a98:	bne	26a74 <__assert_fail@plt+0x150b8>
   26a9c:	mov	r0, r5
   26aa0:	pop	{r4, r5, r6, r7, r8, pc}
   26aa4:	push	{r4, r5, r6, lr}
   26aa8:	mov	r4, r0
   26aac:	bl	116c8 <__fpending@plt>
   26ab0:	mov	r5, r0
   26ab4:	mov	r0, r4
   26ab8:	bl	115c0 <ferror@plt>
   26abc:	mov	r6, r0
   26ac0:	mov	r0, r4
   26ac4:	bl	11878 <fclose@plt>
   26ac8:	cmp	r6, #0
   26acc:	mov	r4, r0
   26ad0:	bne	26afc <__assert_fail@plt+0x15140>
   26ad4:	cmp	r0, #0
   26ad8:	beq	26af4 <__assert_fail@plt+0x15138>
   26adc:	cmp	r5, #0
   26ae0:	bne	26b0c <__assert_fail@plt+0x15150>
   26ae4:	bl	117dc <__errno_location@plt>
   26ae8:	ldr	r4, [r0]
   26aec:	subs	r4, r4, #9
   26af0:	mvnne	r4, #0
   26af4:	mov	r0, r4
   26af8:	pop	{r4, r5, r6, pc}
   26afc:	cmp	r0, #0
   26b00:	bne	26b0c <__assert_fail@plt+0x15150>
   26b04:	bl	117dc <__errno_location@plt>
   26b08:	str	r4, [r0]
   26b0c:	mvn	r4, #0
   26b10:	b	26af4 <__assert_fail@plt+0x15138>
   26b14:	ldr	ip, [r0, #4]
   26b18:	cmp	ip, r1
   26b1c:	bcc	26b2c <__assert_fail@plt+0x15170>
   26b20:	str	r1, [r0]
   26b24:	mov	r0, #1
   26b28:	bx	lr
   26b2c:	cmp	r3, #0
   26b30:	push	{r4, r5, r6, r7, r8, lr}
   26b34:	mov	r7, r3
   26b38:	mov	r6, r2
   26b3c:	mov	r5, r1
   26b40:	mov	r4, r0
   26b44:	beq	26b5c <__assert_fail@plt+0x151a0>
   26b48:	mov	r1, r3
   26b4c:	mvn	r0, #0
   26b50:	bl	26dfc <__assert_fail@plt+0x15440>
   26b54:	cmp	r5, r0
   26b58:	bhi	26bbc <__assert_fail@plt+0x15200>
   26b5c:	ldr	r0, [r4, #8]
   26b60:	mul	r1, r7, r5
   26b64:	cmp	r0, r6
   26b68:	bne	26bac <__assert_fail@plt+0x151f0>
   26b6c:	mov	r0, r1
   26b70:	bl	1a3f4 <__assert_fail@plt+0x8a38>
   26b74:	subs	r6, r0, #0
   26b78:	bne	26b84 <__assert_fail@plt+0x151c8>
   26b7c:	mov	r0, #0
   26b80:	pop	{r4, r5, r6, r7, r8, pc}
   26b84:	ldr	r1, [r4, #8]
   26b88:	cmp	r1, #0
   26b8c:	beq	26b9c <__assert_fail@plt+0x151e0>
   26b90:	ldr	r2, [r4]
   26b94:	mul	r2, r2, r7
   26b98:	bl	115e4 <memcpy@plt>
   26b9c:	stmib	r4, {r5, r6}
   26ba0:	str	r5, [r4]
   26ba4:	mov	r0, #1
   26ba8:	pop	{r4, r5, r6, r7, r8, pc}
   26bac:	bl	1a484 <__assert_fail@plt+0x8ac8>
   26bb0:	subs	r6, r0, #0
   26bb4:	bne	26b9c <__assert_fail@plt+0x151e0>
   26bb8:	b	26b7c <__assert_fail@plt+0x151c0>
   26bbc:	bl	117dc <__errno_location@plt>
   26bc0:	mov	r3, #12
   26bc4:	str	r3, [r0]
   26bc8:	b	26b7c <__assert_fail@plt+0x151c0>
   26bcc:	push	{lr}		; (str lr, [sp, #-4]!)
   26bd0:	sub	sp, sp, #268	; 0x10c
   26bd4:	ldr	r2, [pc, #64]	; 26c1c <__assert_fail@plt+0x15260>
   26bd8:	add	r1, sp, #4
   26bdc:	bl	26d6c <__assert_fail@plt+0x153b0>
   26be0:	cmp	r0, #0
   26be4:	movne	r0, #0
   26be8:	bne	26c14 <__assert_fail@plt+0x15258>
   26bec:	ldr	r1, [pc, #44]	; 26c20 <__assert_fail@plt+0x15264>
   26bf0:	add	r0, sp, #4
   26bf4:	bl	11554 <strcmp@plt>
   26bf8:	cmp	r0, #0
   26bfc:	beq	26c14 <__assert_fail@plt+0x15258>
   26c00:	ldr	r1, [pc, #28]	; 26c24 <__assert_fail@plt+0x15268>
   26c04:	add	r0, sp, #4
   26c08:	bl	11554 <strcmp@plt>
   26c0c:	adds	r0, r0, #0
   26c10:	movne	r0, #1
   26c14:	add	sp, sp, #268	; 0x10c
   26c18:	pop	{pc}		; (ldr pc, [sp], #4)
   26c1c:	andeq	r0, r0, r1, lsl #2
   26c20:	andeq	r9, r2, r7, ror #1
   26c24:	andeq	r9, r2, r9, ror #1
   26c28:	push	{r4, lr}
   26c2c:	mov	r0, #14
   26c30:	bl	118cc <nl_langinfo@plt>
   26c34:	ldr	r3, [pc, #24]	; 26c54 <__assert_fail@plt+0x15298>
   26c38:	cmp	r0, #0
   26c3c:	moveq	r0, r3
   26c40:	ldr	r3, [pc, #16]	; 26c58 <__assert_fail@plt+0x1529c>
   26c44:	ldrb	r2, [r0]
   26c48:	cmp	r2, #0
   26c4c:	moveq	r0, r3
   26c50:	pop	{r4, pc}
   26c54:	andeq	r8, r2, pc, lsl r2
   26c58:	andeq	r9, r2, pc, ror #1
   26c5c:	cmn	r0, #-2147483631	; 0x80000011
   26c60:	bls	26c74 <__assert_fail@plt+0x152b8>
   26c64:	mov	r0, #0
   26c68:	bx	lr
   26c6c:	mov	r0, #0
   26c70:	pop	{r4, pc}
   26c74:	push	{r4, lr}
   26c78:	add	r0, r0, #16
   26c7c:	bl	1171c <malloc@plt>
   26c80:	cmp	r0, #0
   26c84:	beq	26c6c <__assert_fail@plt+0x152b0>
   26c88:	cmn	r0, #9
   26c8c:	addls	r2, r0, #8
   26c90:	movhi	r2, #0
   26c94:	rsb	r3, r0, #8
   26c98:	bic	r2, r2, #15
   26c9c:	add	r3, r3, r2
   26ca0:	add	r0, r0, r3
   26ca4:	strb	r3, [r0, #-1]
   26ca8:	pop	{r4, pc}
   26cac:	tst	r0, #7
   26cb0:	beq	26cbc <__assert_fail@plt+0x15300>
   26cb4:	push	{r4, lr}
   26cb8:	bl	11980 <abort@plt>
   26cbc:	tst	r0, #8
   26cc0:	bxeq	lr
   26cc4:	ldrb	r3, [r0, #-1]
   26cc8:	sub	r0, r0, r3
   26ccc:	b	1a30c <__assert_fail@plt+0x8950>
   26cd0:	push	{r4, lr}
   26cd4:	mov	r4, r0
   26cd8:	bl	11584 <wcwidth@plt>
   26cdc:	cmp	r0, #0
   26ce0:	popge	{r4, pc}
   26ce4:	mov	r0, r4
   26ce8:	bl	1165c <iswcntrl@plt>
   26cec:	clz	r0, r0
   26cf0:	lsr	r0, r0, #5
   26cf4:	pop	{r4, pc}
   26cf8:	mov	r3, r1
   26cfc:	push	{r4, r5, r6, lr}
   26d00:	mov	r5, r1
   26d04:	ldr	r1, [r3], #16
   26d08:	mov	r4, r0
   26d0c:	cmp	r1, r3
   26d10:	strne	r1, [r0]
   26d14:	bne	26d2c <__assert_fail@plt+0x15370>
   26d18:	add	r3, r0, #16
   26d1c:	ldr	r2, [r5, #4]
   26d20:	mov	r0, r3
   26d24:	bl	115e4 <memcpy@plt>
   26d28:	str	r0, [r4]
   26d2c:	ldr	r3, [r5, #4]
   26d30:	str	r3, [r4, #4]
   26d34:	ldrb	r3, [r5, #8]
   26d38:	cmp	r3, #0
   26d3c:	strb	r3, [r4, #8]
   26d40:	ldrne	r3, [r5, #12]
   26d44:	strne	r3, [r4, #12]
   26d48:	pop	{r4, r5, r6, pc}
   26d4c:	ldr	r3, [pc, #20]	; 26d68 <__assert_fail@plt+0x153ac>
   26d50:	lsr	r2, r0, #5
   26d54:	and	r0, r0, #31
   26d58:	ldr	r3, [r3, r2, lsl #2]
   26d5c:	lsr	r0, r3, r0
   26d60:	and	r0, r0, #1
   26d64:	bx	lr
   26d68:	strdeq	r9, [r2], -r8
   26d6c:	push	{r4, r5, r6, lr}
   26d70:	mov	r5, r1
   26d74:	mov	r1, #0
   26d78:	mov	r4, r2
   26d7c:	bl	118a8 <setlocale@plt>
   26d80:	subs	r6, r0, #0
   26d84:	bne	26d98 <__assert_fail@plt+0x153dc>
   26d88:	cmp	r4, #0
   26d8c:	strbne	r6, [r5]
   26d90:	mov	r0, #22
   26d94:	pop	{r4, r5, r6, pc}
   26d98:	bl	117ac <strlen@plt>
   26d9c:	cmp	r4, r0
   26da0:	bls	26dbc <__assert_fail@plt+0x15400>
   26da4:	add	r2, r0, #1
   26da8:	mov	r1, r6
   26dac:	mov	r0, r5
   26db0:	bl	115e4 <memcpy@plt>
   26db4:	mov	r0, #0
   26db8:	pop	{r4, r5, r6, pc}
   26dbc:	cmp	r4, #0
   26dc0:	beq	26de0 <__assert_fail@plt+0x15424>
   26dc4:	sub	r4, r4, #1
   26dc8:	mov	r2, r4
   26dcc:	mov	r1, r6
   26dd0:	mov	r0, r5
   26dd4:	bl	115e4 <memcpy@plt>
   26dd8:	mov	r3, #0
   26ddc:	strb	r3, [r5, r4]
   26de0:	mov	r0, #34	; 0x22
   26de4:	pop	{r4, r5, r6, pc}
   26de8:	mov	r1, #0
   26dec:	b	118a8 <setlocale@plt>
   26df0:	mov	r2, #3
   26df4:	mov	r1, #0
   26df8:	b	1a0f8 <__assert_fail@plt+0x873c>
   26dfc:	subs	r2, r1, #1
   26e00:	bxeq	lr
   26e04:	bcc	26fdc <__assert_fail@plt+0x15620>
   26e08:	cmp	r0, r1
   26e0c:	bls	26fc0 <__assert_fail@plt+0x15604>
   26e10:	tst	r1, r2
   26e14:	beq	26fcc <__assert_fail@plt+0x15610>
   26e18:	clz	r3, r0
   26e1c:	clz	r2, r1
   26e20:	sub	r3, r2, r3
   26e24:	rsbs	r3, r3, #31
   26e28:	addne	r3, r3, r3, lsl #1
   26e2c:	mov	r2, #0
   26e30:	addne	pc, pc, r3, lsl #2
   26e34:	nop			; (mov r0, r0)
   26e38:	cmp	r0, r1, lsl #31
   26e3c:	adc	r2, r2, r2
   26e40:	subcs	r0, r0, r1, lsl #31
   26e44:	cmp	r0, r1, lsl #30
   26e48:	adc	r2, r2, r2
   26e4c:	subcs	r0, r0, r1, lsl #30
   26e50:	cmp	r0, r1, lsl #29
   26e54:	adc	r2, r2, r2
   26e58:	subcs	r0, r0, r1, lsl #29
   26e5c:	cmp	r0, r1, lsl #28
   26e60:	adc	r2, r2, r2
   26e64:	subcs	r0, r0, r1, lsl #28
   26e68:	cmp	r0, r1, lsl #27
   26e6c:	adc	r2, r2, r2
   26e70:	subcs	r0, r0, r1, lsl #27
   26e74:	cmp	r0, r1, lsl #26
   26e78:	adc	r2, r2, r2
   26e7c:	subcs	r0, r0, r1, lsl #26
   26e80:	cmp	r0, r1, lsl #25
   26e84:	adc	r2, r2, r2
   26e88:	subcs	r0, r0, r1, lsl #25
   26e8c:	cmp	r0, r1, lsl #24
   26e90:	adc	r2, r2, r2
   26e94:	subcs	r0, r0, r1, lsl #24
   26e98:	cmp	r0, r1, lsl #23
   26e9c:	adc	r2, r2, r2
   26ea0:	subcs	r0, r0, r1, lsl #23
   26ea4:	cmp	r0, r1, lsl #22
   26ea8:	adc	r2, r2, r2
   26eac:	subcs	r0, r0, r1, lsl #22
   26eb0:	cmp	r0, r1, lsl #21
   26eb4:	adc	r2, r2, r2
   26eb8:	subcs	r0, r0, r1, lsl #21
   26ebc:	cmp	r0, r1, lsl #20
   26ec0:	adc	r2, r2, r2
   26ec4:	subcs	r0, r0, r1, lsl #20
   26ec8:	cmp	r0, r1, lsl #19
   26ecc:	adc	r2, r2, r2
   26ed0:	subcs	r0, r0, r1, lsl #19
   26ed4:	cmp	r0, r1, lsl #18
   26ed8:	adc	r2, r2, r2
   26edc:	subcs	r0, r0, r1, lsl #18
   26ee0:	cmp	r0, r1, lsl #17
   26ee4:	adc	r2, r2, r2
   26ee8:	subcs	r0, r0, r1, lsl #17
   26eec:	cmp	r0, r1, lsl #16
   26ef0:	adc	r2, r2, r2
   26ef4:	subcs	r0, r0, r1, lsl #16
   26ef8:	cmp	r0, r1, lsl #15
   26efc:	adc	r2, r2, r2
   26f00:	subcs	r0, r0, r1, lsl #15
   26f04:	cmp	r0, r1, lsl #14
   26f08:	adc	r2, r2, r2
   26f0c:	subcs	r0, r0, r1, lsl #14
   26f10:	cmp	r0, r1, lsl #13
   26f14:	adc	r2, r2, r2
   26f18:	subcs	r0, r0, r1, lsl #13
   26f1c:	cmp	r0, r1, lsl #12
   26f20:	adc	r2, r2, r2
   26f24:	subcs	r0, r0, r1, lsl #12
   26f28:	cmp	r0, r1, lsl #11
   26f2c:	adc	r2, r2, r2
   26f30:	subcs	r0, r0, r1, lsl #11
   26f34:	cmp	r0, r1, lsl #10
   26f38:	adc	r2, r2, r2
   26f3c:	subcs	r0, r0, r1, lsl #10
   26f40:	cmp	r0, r1, lsl #9
   26f44:	adc	r2, r2, r2
   26f48:	subcs	r0, r0, r1, lsl #9
   26f4c:	cmp	r0, r1, lsl #8
   26f50:	adc	r2, r2, r2
   26f54:	subcs	r0, r0, r1, lsl #8
   26f58:	cmp	r0, r1, lsl #7
   26f5c:	adc	r2, r2, r2
   26f60:	subcs	r0, r0, r1, lsl #7
   26f64:	cmp	r0, r1, lsl #6
   26f68:	adc	r2, r2, r2
   26f6c:	subcs	r0, r0, r1, lsl #6
   26f70:	cmp	r0, r1, lsl #5
   26f74:	adc	r2, r2, r2
   26f78:	subcs	r0, r0, r1, lsl #5
   26f7c:	cmp	r0, r1, lsl #4
   26f80:	adc	r2, r2, r2
   26f84:	subcs	r0, r0, r1, lsl #4
   26f88:	cmp	r0, r1, lsl #3
   26f8c:	adc	r2, r2, r2
   26f90:	subcs	r0, r0, r1, lsl #3
   26f94:	cmp	r0, r1, lsl #2
   26f98:	adc	r2, r2, r2
   26f9c:	subcs	r0, r0, r1, lsl #2
   26fa0:	cmp	r0, r1, lsl #1
   26fa4:	adc	r2, r2, r2
   26fa8:	subcs	r0, r0, r1, lsl #1
   26fac:	cmp	r0, r1
   26fb0:	adc	r2, r2, r2
   26fb4:	subcs	r0, r0, r1
   26fb8:	mov	r0, r2
   26fbc:	bx	lr
   26fc0:	moveq	r0, #1
   26fc4:	movne	r0, #0
   26fc8:	bx	lr
   26fcc:	clz	r2, r1
   26fd0:	rsb	r2, r2, #31
   26fd4:	lsr	r0, r0, r2
   26fd8:	bx	lr
   26fdc:	cmp	r0, #0
   26fe0:	mvnne	r0, #0
   26fe4:	b	2763c <__assert_fail@plt+0x15c80>
   26fe8:	cmp	r1, #0
   26fec:	beq	26fdc <__assert_fail@plt+0x15620>
   26ff0:	push	{r0, r1, lr}
   26ff4:	bl	26dfc <__assert_fail@plt+0x15440>
   26ff8:	pop	{r1, r2, lr}
   26ffc:	mul	r3, r2, r0
   27000:	sub	r1, r1, r3
   27004:	bx	lr
   27008:	cmp	r1, #0
   2700c:	beq	27218 <__assert_fail@plt+0x1585c>
   27010:	eor	ip, r0, r1
   27014:	rsbmi	r1, r1, #0
   27018:	subs	r2, r1, #1
   2701c:	beq	271e4 <__assert_fail@plt+0x15828>
   27020:	movs	r3, r0
   27024:	rsbmi	r3, r0, #0
   27028:	cmp	r3, r1
   2702c:	bls	271f0 <__assert_fail@plt+0x15834>
   27030:	tst	r1, r2
   27034:	beq	27200 <__assert_fail@plt+0x15844>
   27038:	clz	r2, r3
   2703c:	clz	r0, r1
   27040:	sub	r2, r0, r2
   27044:	rsbs	r2, r2, #31
   27048:	addne	r2, r2, r2, lsl #1
   2704c:	mov	r0, #0
   27050:	addne	pc, pc, r2, lsl #2
   27054:	nop			; (mov r0, r0)
   27058:	cmp	r3, r1, lsl #31
   2705c:	adc	r0, r0, r0
   27060:	subcs	r3, r3, r1, lsl #31
   27064:	cmp	r3, r1, lsl #30
   27068:	adc	r0, r0, r0
   2706c:	subcs	r3, r3, r1, lsl #30
   27070:	cmp	r3, r1, lsl #29
   27074:	adc	r0, r0, r0
   27078:	subcs	r3, r3, r1, lsl #29
   2707c:	cmp	r3, r1, lsl #28
   27080:	adc	r0, r0, r0
   27084:	subcs	r3, r3, r1, lsl #28
   27088:	cmp	r3, r1, lsl #27
   2708c:	adc	r0, r0, r0
   27090:	subcs	r3, r3, r1, lsl #27
   27094:	cmp	r3, r1, lsl #26
   27098:	adc	r0, r0, r0
   2709c:	subcs	r3, r3, r1, lsl #26
   270a0:	cmp	r3, r1, lsl #25
   270a4:	adc	r0, r0, r0
   270a8:	subcs	r3, r3, r1, lsl #25
   270ac:	cmp	r3, r1, lsl #24
   270b0:	adc	r0, r0, r0
   270b4:	subcs	r3, r3, r1, lsl #24
   270b8:	cmp	r3, r1, lsl #23
   270bc:	adc	r0, r0, r0
   270c0:	subcs	r3, r3, r1, lsl #23
   270c4:	cmp	r3, r1, lsl #22
   270c8:	adc	r0, r0, r0
   270cc:	subcs	r3, r3, r1, lsl #22
   270d0:	cmp	r3, r1, lsl #21
   270d4:	adc	r0, r0, r0
   270d8:	subcs	r3, r3, r1, lsl #21
   270dc:	cmp	r3, r1, lsl #20
   270e0:	adc	r0, r0, r0
   270e4:	subcs	r3, r3, r1, lsl #20
   270e8:	cmp	r3, r1, lsl #19
   270ec:	adc	r0, r0, r0
   270f0:	subcs	r3, r3, r1, lsl #19
   270f4:	cmp	r3, r1, lsl #18
   270f8:	adc	r0, r0, r0
   270fc:	subcs	r3, r3, r1, lsl #18
   27100:	cmp	r3, r1, lsl #17
   27104:	adc	r0, r0, r0
   27108:	subcs	r3, r3, r1, lsl #17
   2710c:	cmp	r3, r1, lsl #16
   27110:	adc	r0, r0, r0
   27114:	subcs	r3, r3, r1, lsl #16
   27118:	cmp	r3, r1, lsl #15
   2711c:	adc	r0, r0, r0
   27120:	subcs	r3, r3, r1, lsl #15
   27124:	cmp	r3, r1, lsl #14
   27128:	adc	r0, r0, r0
   2712c:	subcs	r3, r3, r1, lsl #14
   27130:	cmp	r3, r1, lsl #13
   27134:	adc	r0, r0, r0
   27138:	subcs	r3, r3, r1, lsl #13
   2713c:	cmp	r3, r1, lsl #12
   27140:	adc	r0, r0, r0
   27144:	subcs	r3, r3, r1, lsl #12
   27148:	cmp	r3, r1, lsl #11
   2714c:	adc	r0, r0, r0
   27150:	subcs	r3, r3, r1, lsl #11
   27154:	cmp	r3, r1, lsl #10
   27158:	adc	r0, r0, r0
   2715c:	subcs	r3, r3, r1, lsl #10
   27160:	cmp	r3, r1, lsl #9
   27164:	adc	r0, r0, r0
   27168:	subcs	r3, r3, r1, lsl #9
   2716c:	cmp	r3, r1, lsl #8
   27170:	adc	r0, r0, r0
   27174:	subcs	r3, r3, r1, lsl #8
   27178:	cmp	r3, r1, lsl #7
   2717c:	adc	r0, r0, r0
   27180:	subcs	r3, r3, r1, lsl #7
   27184:	cmp	r3, r1, lsl #6
   27188:	adc	r0, r0, r0
   2718c:	subcs	r3, r3, r1, lsl #6
   27190:	cmp	r3, r1, lsl #5
   27194:	adc	r0, r0, r0
   27198:	subcs	r3, r3, r1, lsl #5
   2719c:	cmp	r3, r1, lsl #4
   271a0:	adc	r0, r0, r0
   271a4:	subcs	r3, r3, r1, lsl #4
   271a8:	cmp	r3, r1, lsl #3
   271ac:	adc	r0, r0, r0
   271b0:	subcs	r3, r3, r1, lsl #3
   271b4:	cmp	r3, r1, lsl #2
   271b8:	adc	r0, r0, r0
   271bc:	subcs	r3, r3, r1, lsl #2
   271c0:	cmp	r3, r1, lsl #1
   271c4:	adc	r0, r0, r0
   271c8:	subcs	r3, r3, r1, lsl #1
   271cc:	cmp	r3, r1
   271d0:	adc	r0, r0, r0
   271d4:	subcs	r3, r3, r1
   271d8:	cmp	ip, #0
   271dc:	rsbmi	r0, r0, #0
   271e0:	bx	lr
   271e4:	teq	ip, r0
   271e8:	rsbmi	r0, r0, #0
   271ec:	bx	lr
   271f0:	movcc	r0, #0
   271f4:	asreq	r0, ip, #31
   271f8:	orreq	r0, r0, #1
   271fc:	bx	lr
   27200:	clz	r2, r1
   27204:	rsb	r2, r2, #31
   27208:	cmp	ip, #0
   2720c:	lsr	r0, r3, r2
   27210:	rsbmi	r0, r0, #0
   27214:	bx	lr
   27218:	cmp	r0, #0
   2721c:	mvngt	r0, #-2147483648	; 0x80000000
   27220:	movlt	r0, #-2147483648	; 0x80000000
   27224:	b	2763c <__assert_fail@plt+0x15c80>
   27228:	cmp	r1, #0
   2722c:	beq	27218 <__assert_fail@plt+0x1585c>
   27230:	push	{r0, r1, lr}
   27234:	bl	27010 <__assert_fail@plt+0x15654>
   27238:	pop	{r1, r2, lr}
   2723c:	mul	r3, r2, r0
   27240:	sub	r1, r1, r3
   27244:	bx	lr
   27248:	eor	r1, r1, #-2147483648	; 0x80000000
   2724c:	b	27254 <__assert_fail@plt+0x15898>
   27250:	eor	r3, r3, #-2147483648	; 0x80000000
   27254:	push	{r4, r5, lr}
   27258:	lsl	r4, r1, #1
   2725c:	lsl	r5, r3, #1
   27260:	teq	r4, r5
   27264:	teqeq	r0, r2
   27268:	orrsne	ip, r4, r0
   2726c:	orrsne	ip, r5, r2
   27270:	mvnsne	ip, r4, asr #21
   27274:	mvnsne	ip, r5, asr #21
   27278:	beq	27464 <__assert_fail@plt+0x15aa8>
   2727c:	lsr	r4, r4, #21
   27280:	rsbs	r5, r4, r5, lsr #21
   27284:	rsblt	r5, r5, #0
   27288:	ble	272a8 <__assert_fail@plt+0x158ec>
   2728c:	add	r4, r4, r5
   27290:	eor	r2, r0, r2
   27294:	eor	r3, r1, r3
   27298:	eor	r0, r2, r0
   2729c:	eor	r1, r3, r1
   272a0:	eor	r2, r0, r2
   272a4:	eor	r3, r1, r3
   272a8:	cmp	r5, #54	; 0x36
   272ac:	pophi	{r4, r5, pc}
   272b0:	tst	r1, #-2147483648	; 0x80000000
   272b4:	lsl	r1, r1, #12
   272b8:	mov	ip, #1048576	; 0x100000
   272bc:	orr	r1, ip, r1, lsr #12
   272c0:	beq	272cc <__assert_fail@plt+0x15910>
   272c4:	rsbs	r0, r0, #0
   272c8:	rsc	r1, r1, #0
   272cc:	tst	r3, #-2147483648	; 0x80000000
   272d0:	lsl	r3, r3, #12
   272d4:	orr	r3, ip, r3, lsr #12
   272d8:	beq	272e4 <__assert_fail@plt+0x15928>
   272dc:	rsbs	r2, r2, #0
   272e0:	rsc	r3, r3, #0
   272e4:	teq	r4, r5
   272e8:	beq	2744c <__assert_fail@plt+0x15a90>
   272ec:	sub	r4, r4, #1
   272f0:	rsbs	lr, r5, #32
   272f4:	blt	27310 <__assert_fail@plt+0x15954>
   272f8:	lsl	ip, r2, lr
   272fc:	adds	r0, r0, r2, lsr r5
   27300:	adc	r1, r1, #0
   27304:	adds	r0, r0, r3, lsl lr
   27308:	adcs	r1, r1, r3, asr r5
   2730c:	b	2732c <__assert_fail@plt+0x15970>
   27310:	sub	r5, r5, #32
   27314:	add	lr, lr, #32
   27318:	cmp	r2, #1
   2731c:	lsl	ip, r3, lr
   27320:	orrcs	ip, ip, #2
   27324:	adds	r0, r0, r3, asr r5
   27328:	adcs	r1, r1, r3, asr #31
   2732c:	and	r5, r1, #-2147483648	; 0x80000000
   27330:	bpl	27340 <__assert_fail@plt+0x15984>
   27334:	rsbs	ip, ip, #0
   27338:	rscs	r0, r0, #0
   2733c:	rsc	r1, r1, #0
   27340:	cmp	r1, #1048576	; 0x100000
   27344:	bcc	27384 <__assert_fail@plt+0x159c8>
   27348:	cmp	r1, #2097152	; 0x200000
   2734c:	bcc	2736c <__assert_fail@plt+0x159b0>
   27350:	lsrs	r1, r1, #1
   27354:	rrxs	r0, r0
   27358:	rrx	ip, ip
   2735c:	add	r4, r4, #1
   27360:	lsl	r2, r4, #21
   27364:	cmn	r2, #4194304	; 0x400000
   27368:	bcs	274c4 <__assert_fail@plt+0x15b08>
   2736c:	cmp	ip, #-2147483648	; 0x80000000
   27370:	lsrseq	ip, r0, #1
   27374:	adcs	r0, r0, #0
   27378:	adc	r1, r1, r4, lsl #20
   2737c:	orr	r1, r1, r5
   27380:	pop	{r4, r5, pc}
   27384:	lsls	ip, ip, #1
   27388:	adcs	r0, r0, r0
   2738c:	adc	r1, r1, r1
   27390:	tst	r1, #1048576	; 0x100000
   27394:	sub	r4, r4, #1
   27398:	bne	2736c <__assert_fail@plt+0x159b0>
   2739c:	teq	r1, #0
   273a0:	moveq	r1, r0
   273a4:	moveq	r0, #0
   273a8:	clz	r3, r1
   273ac:	addeq	r3, r3, #32
   273b0:	sub	r3, r3, #11
   273b4:	subs	r2, r3, #32
   273b8:	bge	273dc <__assert_fail@plt+0x15a20>
   273bc:	adds	r2, r2, #12
   273c0:	ble	273d8 <__assert_fail@plt+0x15a1c>
   273c4:	add	ip, r2, #20
   273c8:	rsb	r2, r2, #12
   273cc:	lsl	r0, r1, ip
   273d0:	lsr	r1, r1, r2
   273d4:	b	273ec <__assert_fail@plt+0x15a30>
   273d8:	add	r2, r2, #20
   273dc:	rsble	ip, r2, #32
   273e0:	lsl	r1, r1, r2
   273e4:	orrle	r1, r1, r0, lsr ip
   273e8:	lslle	r0, r0, r2
   273ec:	subs	r4, r4, r3
   273f0:	addge	r1, r1, r4, lsl #20
   273f4:	orrge	r1, r1, r5
   273f8:	popge	{r4, r5, pc}
   273fc:	mvn	r4, r4
   27400:	subs	r4, r4, #31
   27404:	bge	27440 <__assert_fail@plt+0x15a84>
   27408:	adds	r4, r4, #12
   2740c:	bgt	27428 <__assert_fail@plt+0x15a6c>
   27410:	add	r4, r4, #20
   27414:	rsb	r2, r4, #32
   27418:	lsr	r0, r0, r4
   2741c:	orr	r0, r0, r1, lsl r2
   27420:	orr	r1, r5, r1, lsr r4
   27424:	pop	{r4, r5, pc}
   27428:	rsb	r4, r4, #12
   2742c:	rsb	r2, r4, #32
   27430:	lsr	r0, r0, r2
   27434:	orr	r0, r0, r1, lsl r4
   27438:	mov	r1, r5
   2743c:	pop	{r4, r5, pc}
   27440:	lsr	r0, r1, r4
   27444:	mov	r1, r5
   27448:	pop	{r4, r5, pc}
   2744c:	teq	r4, #0
   27450:	eor	r3, r3, #1048576	; 0x100000
   27454:	eoreq	r1, r1, #1048576	; 0x100000
   27458:	addeq	r4, r4, #1
   2745c:	subne	r5, r5, #1
   27460:	b	272ec <__assert_fail@plt+0x15930>
   27464:	mvns	ip, r4, asr #21
   27468:	mvnsne	ip, r5, asr #21
   2746c:	beq	274d4 <__assert_fail@plt+0x15b18>
   27470:	teq	r4, r5
   27474:	teqeq	r0, r2
   27478:	beq	2748c <__assert_fail@plt+0x15ad0>
   2747c:	orrs	ip, r4, r0
   27480:	moveq	r1, r3
   27484:	moveq	r0, r2
   27488:	pop	{r4, r5, pc}
   2748c:	teq	r1, r3
   27490:	movne	r1, #0
   27494:	movne	r0, #0
   27498:	popne	{r4, r5, pc}
   2749c:	lsrs	ip, r4, #21
   274a0:	bne	274b4 <__assert_fail@plt+0x15af8>
   274a4:	lsls	r0, r0, #1
   274a8:	adcs	r1, r1, r1
   274ac:	orrcs	r1, r1, #-2147483648	; 0x80000000
   274b0:	pop	{r4, r5, pc}
   274b4:	adds	r4, r4, #4194304	; 0x400000
   274b8:	addcc	r1, r1, #1048576	; 0x100000
   274bc:	popcc	{r4, r5, pc}
   274c0:	and	r5, r1, #-2147483648	; 0x80000000
   274c4:	orr	r1, r5, #2130706432	; 0x7f000000
   274c8:	orr	r1, r1, #15728640	; 0xf00000
   274cc:	mov	r0, #0
   274d0:	pop	{r4, r5, pc}
   274d4:	mvns	ip, r4, asr #21
   274d8:	movne	r1, r3
   274dc:	movne	r0, r2
   274e0:	mvnseq	ip, r5, asr #21
   274e4:	movne	r3, r1
   274e8:	movne	r2, r0
   274ec:	orrs	r4, r0, r1, lsl #12
   274f0:	orrseq	r5, r2, r3, lsl #12
   274f4:	teqeq	r1, r3
   274f8:	orrne	r1, r1, #524288	; 0x80000
   274fc:	pop	{r4, r5, pc}
   27500:	teq	r0, #0
   27504:	moveq	r1, #0
   27508:	bxeq	lr
   2750c:	push	{r4, r5, lr}
   27510:	mov	r4, #1024	; 0x400
   27514:	add	r4, r4, #50	; 0x32
   27518:	mov	r5, #0
   2751c:	mov	r1, #0
   27520:	b	2739c <__assert_fail@plt+0x159e0>
   27524:	teq	r0, #0
   27528:	moveq	r1, #0
   2752c:	bxeq	lr
   27530:	push	{r4, r5, lr}
   27534:	mov	r4, #1024	; 0x400
   27538:	add	r4, r4, #50	; 0x32
   2753c:	ands	r5, r0, #-2147483648	; 0x80000000
   27540:	rsbmi	r0, r0, #0
   27544:	mov	r1, #0
   27548:	b	2739c <__assert_fail@plt+0x159e0>
   2754c:	lsls	r2, r0, #1
   27550:	asr	r1, r2, #3
   27554:	rrx	r1, r1
   27558:	lsl	r0, r2, #28
   2755c:	andsne	r3, r2, #-16777216	; 0xff000000
   27560:	teqne	r3, #-16777216	; 0xff000000
   27564:	eorne	r1, r1, #939524096	; 0x38000000
   27568:	bxne	lr
   2756c:	teq	r2, #0
   27570:	teqne	r3, #-16777216	; 0xff000000
   27574:	bxeq	lr
   27578:	push	{r4, r5, lr}
   2757c:	mov	r4, #896	; 0x380
   27580:	and	r5, r1, #-2147483648	; 0x80000000
   27584:	bic	r1, r1, #-2147483648	; 0x80000000
   27588:	b	2739c <__assert_fail@plt+0x159e0>
   2758c:	orrs	r2, r0, r1
   27590:	bxeq	lr
   27594:	push	{r4, r5, lr}
   27598:	mov	r5, #0
   2759c:	b	275bc <__assert_fail@plt+0x15c00>
   275a0:	orrs	r2, r0, r1
   275a4:	bxeq	lr
   275a8:	push	{r4, r5, lr}
   275ac:	ands	r5, r1, #-2147483648	; 0x80000000
   275b0:	bpl	275bc <__assert_fail@plt+0x15c00>
   275b4:	rsbs	r0, r0, #0
   275b8:	rsc	r1, r1, #0
   275bc:	mov	r4, #1024	; 0x400
   275c0:	add	r4, r4, #50	; 0x32
   275c4:	lsrs	ip, r1, #22
   275c8:	beq	27340 <__assert_fail@plt+0x15984>
   275cc:	mov	r2, #3
   275d0:	lsrs	ip, ip, #3
   275d4:	addne	r2, r2, #3
   275d8:	lsrs	ip, ip, #3
   275dc:	addne	r2, r2, #3
   275e0:	add	r2, r2, ip, lsr #3
   275e4:	rsb	r3, r2, #32
   275e8:	lsl	ip, r0, r3
   275ec:	lsr	r0, r0, r2
   275f0:	orr	r0, r0, r1, lsl r3
   275f4:	lsr	r1, r1, r2
   275f8:	add	r4, r4, r2
   275fc:	b	27340 <__assert_fail@plt+0x15984>
   27600:	cmp	r3, #0
   27604:	cmpeq	r2, #0
   27608:	bne	27620 <__assert_fail@plt+0x15c64>
   2760c:	cmp	r1, #0
   27610:	cmpeq	r0, #0
   27614:	mvnne	r1, #0
   27618:	mvnne	r0, #0
   2761c:	b	2763c <__assert_fail@plt+0x15c80>
   27620:	sub	sp, sp, #8
   27624:	push	{sp, lr}
   27628:	bl	27698 <__assert_fail@plt+0x15cdc>
   2762c:	ldr	lr, [sp, #4]
   27630:	add	sp, sp, #8
   27634:	pop	{r2, r3}
   27638:	bx	lr
   2763c:	push	{r1, lr}
   27640:	mov	r0, #8
   27644:	bl	11530 <raise@plt>
   27648:	pop	{r1, pc}
   2764c:	andeq	r0, r0, r0
   27650:	vmov	d7, r0, r1
   27654:	vldr	d6, [pc, #44]	; 27688 <__assert_fail@plt+0x15ccc>
   27658:	vldr	d5, [pc, #48]	; 27690 <__assert_fail@plt+0x15cd4>
   2765c:	mov	r0, #0
   27660:	vmul.f64	d6, d7, d6
   27664:	vcvt.u32.f64	s12, d6
   27668:	vcvt.f64.u32	d4, s12
   2766c:	vmov	r1, s12
   27670:	vmls.f64	d7, d4, d5
   27674:	vcvt.u32.f64	s14, d7
   27678:	vmov	r3, s14
   2767c:	orr	r0, r0, r3
   27680:	bx	lr
   27684:	nop			; (mov r0, r0)
   27688:	andeq	r0, r0, r0
   2768c:	ldclcc	0, cr0, [r0]
   27690:	andeq	r0, r0, r0
   27694:	mvnsmi	r0, r0
   27698:	cmp	r1, r3
   2769c:	push	{r4, r5, r6, r7, r8, r9, lr}
   276a0:	cmpeq	r0, r2
   276a4:	mov	r4, r0
   276a8:	mov	r5, r1
   276ac:	ldr	r9, [sp, #28]
   276b0:	movcc	r0, #0
   276b4:	movcc	r1, #0
   276b8:	bcc	277b0 <__assert_fail@plt+0x15df4>
   276bc:	cmp	r3, #0
   276c0:	clzeq	ip, r2
   276c4:	clzne	ip, r3
   276c8:	addeq	ip, ip, #32
   276cc:	cmp	r5, #0
   276d0:	clzeq	r1, r4
   276d4:	addeq	r1, r1, #32
   276d8:	clzne	r1, r5
   276dc:	sub	ip, ip, r1
   276e0:	sub	lr, ip, #32
   276e4:	lsl	r7, r3, ip
   276e8:	rsb	r8, ip, #32
   276ec:	orr	r7, r7, r2, lsl lr
   276f0:	orr	r7, r7, r2, lsr r8
   276f4:	lsl	r6, r2, ip
   276f8:	cmp	r5, r7
   276fc:	cmpeq	r4, r6
   27700:	movcc	r0, #0
   27704:	movcc	r1, #0
   27708:	bcc	27724 <__assert_fail@plt+0x15d68>
   2770c:	mov	r3, #1
   27710:	subs	r4, r4, r6
   27714:	lsl	r1, r3, lr
   27718:	lsl	r0, r3, ip
   2771c:	orr	r1, r1, r3, lsr r8
   27720:	sbc	r5, r5, r7
   27724:	cmp	ip, #0
   27728:	beq	277b0 <__assert_fail@plt+0x15df4>
   2772c:	lsrs	r3, r7, #1
   27730:	rrx	r2, r6
   27734:	mov	r6, ip
   27738:	b	2775c <__assert_fail@plt+0x15da0>
   2773c:	subs	r4, r4, r2
   27740:	sbc	r5, r5, r3
   27744:	adds	r4, r4, r4
   27748:	adc	r5, r5, r5
   2774c:	adds	r4, r4, #1
   27750:	adc	r5, r5, #0
   27754:	subs	r6, r6, #1
   27758:	beq	27778 <__assert_fail@plt+0x15dbc>
   2775c:	cmp	r5, r3
   27760:	cmpeq	r4, r2
   27764:	bcs	2773c <__assert_fail@plt+0x15d80>
   27768:	adds	r4, r4, r4
   2776c:	adc	r5, r5, r5
   27770:	subs	r6, r6, #1
   27774:	bne	2775c <__assert_fail@plt+0x15da0>
   27778:	lsr	r6, r4, ip
   2777c:	lsr	r7, r5, ip
   27780:	orr	r6, r6, r5, lsl r8
   27784:	adds	r2, r0, r4
   27788:	orr	r6, r6, r5, lsr lr
   2778c:	adc	r3, r1, r5
   27790:	lsl	r1, r7, ip
   27794:	orr	r1, r1, r6, lsl lr
   27798:	lsl	r0, r6, ip
   2779c:	orr	r1, r1, r6, lsr r8
   277a0:	subs	r0, r2, r0
   277a4:	mov	r4, r6
   277a8:	mov	r5, r7
   277ac:	sbc	r1, r3, r1
   277b0:	cmp	r9, #0
   277b4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   277b8:	strd	r4, [r9]
   277bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   277c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   277c4:	mov	r7, r0
   277c8:	ldr	r6, [pc, #72]	; 27818 <__assert_fail@plt+0x15e5c>
   277cc:	ldr	r5, [pc, #72]	; 2781c <__assert_fail@plt+0x15e60>
   277d0:	add	r6, pc, r6
   277d4:	add	r5, pc, r5
   277d8:	sub	r6, r6, r5
   277dc:	mov	r8, r1
   277e0:	mov	r9, r2
   277e4:	bl	114e0 <pthread_mutex_unlock@plt-0x20>
   277e8:	asrs	r6, r6, #2
   277ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   277f0:	mov	r4, #0
   277f4:	add	r4, r4, #1
   277f8:	ldr	r3, [r5], #4
   277fc:	mov	r2, r9
   27800:	mov	r1, r8
   27804:	mov	r0, r7
   27808:	blx	r3
   2780c:	cmp	r6, r4
   27810:	bne	277f4 <__assert_fail@plt+0x15e38>
   27814:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27818:	andeq	r2, r1, r8, lsr r7
   2781c:	andeq	r2, r1, r0, lsr r7
   27820:	bx	lr
   27824:	ldr	r3, [pc, #12]	; 27838 <__assert_fail@plt+0x15e7c>
   27828:	mov	r1, #0
   2782c:	add	r3, pc, r3
   27830:	ldr	r2, [r3]
   27834:	b	11800 <__cxa_atexit@plt>
   27838:	andeq	r2, r1, r8, ror r9
   2783c:	mov	r2, r1
   27840:	mov	r1, r0
   27844:	mov	r0, #3
   27848:	b	11944 <__xstat64@plt>
   2784c:	mov	r2, r1
   27850:	mov	r1, r0
   27854:	mov	r0, #3
   27858:	b	1168c <__fxstat64@plt>
   2785c:	mov	r2, r1
   27860:	mov	r1, r0
   27864:	mov	r0, #3
   27868:	b	119a4 <__lxstat64@plt>

Disassembly of section .fini:

0002786c <.fini>:
   2786c:	push	{r3, lr}
   27870:	pop	{r3, pc}
