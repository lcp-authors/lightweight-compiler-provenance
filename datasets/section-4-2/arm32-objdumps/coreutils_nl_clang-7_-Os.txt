
../repos/coreutils/src/nl:     file format elf32-littlearm


Disassembly of section .init:

000111d4 <.init>:
   111d4:	push	{r3, lr}
   111d8:	bl	11564 <__assert_fail@plt+0x4c>
   111dc:	pop	{r3, pc}

Disassembly of section .plt:

000111e0 <pthread_mutex_unlock@plt-0x14>:
   111e0:	push	{lr}		; (str lr, [sp, #-4]!)
   111e4:	ldr	lr, [pc, #4]	; 111f0 <pthread_mutex_unlock@plt-0x4>
   111e8:	add	lr, pc, lr
   111ec:	ldr	pc, [lr, #8]!
   111f0:	andeq	r2, r2, r0, lsl lr

000111f4 <pthread_mutex_unlock@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #139264	; 0x22000
   111fc:	ldr	pc, [ip, #3600]!	; 0xe10

00011200 <calloc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #139264	; 0x22000
   11208:	ldr	pc, [ip, #3592]!	; 0xe08

0001120c <fputs_unlocked@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #139264	; 0x22000
   11214:	ldr	pc, [ip, #3584]!	; 0xe00

00011218 <wctype@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #139264	; 0x22000
   11220:	ldr	pc, [ip, #3576]!	; 0xdf8

00011224 <raise@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #139264	; 0x22000
   1122c:	ldr	pc, [ip, #3568]!	; 0xdf0

00011230 <wcrtomb@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #139264	; 0x22000
   11238:	ldr	pc, [ip, #3560]!	; 0xde8

0001123c <iswctype@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #139264	; 0x22000
   11244:	ldr	pc, [ip, #3552]!	; 0xde0

00011248 <strcmp@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #139264	; 0x22000
   11250:	ldr	pc, [ip, #3544]!	; 0xdd8

00011254 <posix_fadvise64@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #139264	; 0x22000
   1125c:	ldr	pc, [ip, #3536]!	; 0xdd0

00011260 <pthread_mutex_destroy@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #139264	; 0x22000
   11268:	ldr	pc, [ip, #3528]!	; 0xdc8

0001126c <fflush@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #139264	; 0x22000
   11274:	ldr	pc, [ip, #3520]!	; 0xdc0

00011278 <memmove@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #139264	; 0x22000
   11280:	ldr	pc, [ip, #3512]!	; 0xdb8

00011284 <free@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #139264	; 0x22000
   1128c:	ldr	pc, [ip, #3504]!	; 0xdb0

00011290 <pthread_mutex_lock@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #139264	; 0x22000
   11298:	ldr	pc, [ip, #3496]!	; 0xda8

0001129c <_exit@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #139264	; 0x22000
   112a4:	ldr	pc, [ip, #3488]!	; 0xda0

000112a8 <memcpy@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #139264	; 0x22000
   112b0:	ldr	pc, [ip, #3480]!	; 0xd98

000112b4 <tolower@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #139264	; 0x22000
   112bc:	ldr	pc, [ip, #3472]!	; 0xd90

000112c0 <pthread_mutex_init@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #139264	; 0x22000
   112c8:	ldr	pc, [ip, #3464]!	; 0xd88

000112cc <towlower@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #139264	; 0x22000
   112d4:	ldr	pc, [ip, #3456]!	; 0xd80

000112d8 <mbsinit@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #139264	; 0x22000
   112e0:	ldr	pc, [ip, #3448]!	; 0xd78

000112e4 <fwrite_unlocked@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #139264	; 0x22000
   112ec:	ldr	pc, [ip, #3440]!	; 0xd70

000112f0 <memcmp@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #139264	; 0x22000
   112f8:	ldr	pc, [ip, #3432]!	; 0xd68

000112fc <stpcpy@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #139264	; 0x22000
   11304:	ldr	pc, [ip, #3424]!	; 0xd60

00011308 <getc_unlocked@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #139264	; 0x22000
   11310:	ldr	pc, [ip, #3416]!	; 0xd58

00011314 <dcgettext@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #139264	; 0x22000
   1131c:	ldr	pc, [ip, #3408]!	; 0xd50

00011320 <realloc@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #139264	; 0x22000
   11328:	ldr	pc, [ip, #3400]!	; 0xd48

0001132c <textdomain@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #139264	; 0x22000
   11334:	ldr	pc, [ip, #3392]!	; 0xd40

00011338 <iswprint@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #139264	; 0x22000
   11340:	ldr	pc, [ip, #3384]!	; 0xd38

00011344 <lseek64@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #139264	; 0x22000
   1134c:	ldr	pc, [ip, #3376]!	; 0xd30

00011350 <__ctype_get_mb_cur_max@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #139264	; 0x22000
   11358:	ldr	pc, [ip, #3368]!	; 0xd28

0001135c <__fpending@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #139264	; 0x22000
   11364:	ldr	pc, [ip, #3360]!	; 0xd20

00011368 <ferror_unlocked@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #139264	; 0x22000
   11370:	ldr	pc, [ip, #3352]!	; 0xd18

00011374 <mbrtowc@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #139264	; 0x22000
   1137c:	ldr	pc, [ip, #3344]!	; 0xd10

00011380 <error@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #139264	; 0x22000
   11388:	ldr	pc, [ip, #3336]!	; 0xd08

0001138c <malloc@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #139264	; 0x22000
   11394:	ldr	pc, [ip, #3328]!	; 0xd00

00011398 <__libc_start_main@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #139264	; 0x22000
   113a0:	ldr	pc, [ip, #3320]!	; 0xcf8

000113a4 <__freading@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #139264	; 0x22000
   113ac:	ldr	pc, [ip, #3312]!	; 0xcf0

000113b0 <__gmon_start__@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #139264	; 0x22000
   113b8:	ldr	pc, [ip, #3304]!	; 0xce8

000113bc <getopt_long@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #139264	; 0x22000
   113c4:	ldr	pc, [ip, #3296]!	; 0xce0

000113c8 <__ctype_b_loc@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #139264	; 0x22000
   113d0:	ldr	pc, [ip, #3288]!	; 0xcd8

000113d4 <exit@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #139264	; 0x22000
   113dc:	ldr	pc, [ip, #3280]!	; 0xcd0

000113e0 <strlen@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #139264	; 0x22000
   113e8:	ldr	pc, [ip, #3272]!	; 0xcc8

000113ec <strchr@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #139264	; 0x22000
   113f4:	ldr	pc, [ip, #3264]!	; 0xcc0

000113f8 <__errno_location@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #139264	; 0x22000
   11400:	ldr	pc, [ip, #3256]!	; 0xcb8

00011404 <iswalnum@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #139264	; 0x22000
   1140c:	ldr	pc, [ip, #3248]!	; 0xcb0

00011410 <__cxa_atexit@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #139264	; 0x22000
   11418:	ldr	pc, [ip, #3240]!	; 0xca8

0001141c <memset@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #139264	; 0x22000
   11424:	ldr	pc, [ip, #3232]!	; 0xca0

00011428 <btowc@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #139264	; 0x22000
   11430:	ldr	pc, [ip, #3224]!	; 0xc98

00011434 <__printf_chk@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #139264	; 0x22000
   1143c:	ldr	pc, [ip, #3216]!	; 0xc90

00011440 <fileno@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #139264	; 0x22000
   11448:	ldr	pc, [ip, #3208]!	; 0xc88

0001144c <__fprintf_chk@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #139264	; 0x22000
   11454:	ldr	pc, [ip, #3200]!	; 0xc80

00011458 <strtoimax@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #139264	; 0x22000
   11460:	ldr	pc, [ip, #3192]!	; 0xc78

00011464 <fclose@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #139264	; 0x22000
   1146c:	ldr	pc, [ip, #3184]!	; 0xc70

00011470 <fseeko64@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #139264	; 0x22000
   11478:	ldr	pc, [ip, #3176]!	; 0xc68

0001147c <setlocale@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #139264	; 0x22000
   11484:	ldr	pc, [ip, #3168]!	; 0xc60

00011488 <toupper@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #139264	; 0x22000
   11490:	ldr	pc, [ip, #3160]!	; 0xc58

00011494 <strrchr@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #139264	; 0x22000
   1149c:	ldr	pc, [ip, #3152]!	; 0xc50

000114a0 <nl_langinfo@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #139264	; 0x22000
   114a8:	ldr	pc, [ip, #3144]!	; 0xc48

000114ac <clearerr_unlocked@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #139264	; 0x22000
   114b4:	ldr	pc, [ip, #3136]!	; 0xc40

000114b8 <fopen64@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #139264	; 0x22000
   114c0:	ldr	pc, [ip, #3128]!	; 0xc38

000114c4 <bindtextdomain@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #139264	; 0x22000
   114cc:	ldr	pc, [ip, #3120]!	; 0xc30

000114d0 <towupper@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #139264	; 0x22000
   114d8:	ldr	pc, [ip, #3112]!	; 0xc28

000114dc <fputs@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #139264	; 0x22000
   114e4:	ldr	pc, [ip, #3104]!	; 0xc20

000114e8 <strncmp@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #139264	; 0x22000
   114f0:	ldr	pc, [ip, #3096]!	; 0xc18

000114f4 <abort@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #139264	; 0x22000
   114fc:	ldr	pc, [ip, #3088]!	; 0xc10

00011500 <feof_unlocked@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #139264	; 0x22000
   11508:	ldr	pc, [ip, #3080]!	; 0xc08

0001150c <putchar_unlocked@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #139264	; 0x22000
   11514:	ldr	pc, [ip, #3072]!	; 0xc00

00011518 <__assert_fail@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #139264	; 0x22000
   11520:	ldr	pc, [ip, #3064]!	; 0xbf8

Disassembly of section .text:

00011528 <.text>:
   11528:	mov	fp, #0
   1152c:	mov	lr, #0
   11530:	pop	{r1}		; (ldr r1, [sp], #4)
   11534:	mov	r2, sp
   11538:	push	{r2}		; (str r2, [sp, #-4]!)
   1153c:	push	{r0}		; (str r0, [sp, #-4]!)
   11540:	ldr	ip, [pc, #16]	; 11558 <__assert_fail@plt+0x40>
   11544:	push	{ip}		; (str ip, [sp, #-4]!)
   11548:	ldr	r0, [pc, #12]	; 1155c <__assert_fail@plt+0x44>
   1154c:	ldr	r3, [pc, #12]	; 11560 <__assert_fail@plt+0x48>
   11550:	bl	11398 <__libc_start_main@plt>
   11554:	bl	114f4 <abort@plt>
   11558:	andeq	r2, r2, ip, lsr r8
   1155c:	andeq	r1, r1, ip, lsl r9
   11560:	ldrdeq	r2, [r2], -ip
   11564:	ldr	r3, [pc, #20]	; 11580 <__assert_fail@plt+0x68>
   11568:	ldr	r2, [pc, #20]	; 11584 <__assert_fail@plt+0x6c>
   1156c:	add	r3, pc, r3
   11570:	ldr	r2, [r3, r2]
   11574:	cmp	r2, #0
   11578:	bxeq	lr
   1157c:	b	113b0 <__gmon_start__@plt>
   11580:	andeq	r2, r2, ip, lsl #21
   11584:	andeq	r0, r0, ip, lsl r1
   11588:	ldr	r0, [pc, #24]	; 115a8 <__assert_fail@plt+0x90>
   1158c:	ldr	r3, [pc, #24]	; 115ac <__assert_fail@plt+0x94>
   11590:	cmp	r3, r0
   11594:	bxeq	lr
   11598:	ldr	r3, [pc, #16]	; 115b0 <__assert_fail@plt+0x98>
   1159c:	cmp	r3, #0
   115a0:	bxeq	lr
   115a4:	bx	r3
   115a8:			; <UNDEFINED> instruction: 0x000341b0
   115ac:			; <UNDEFINED> instruction: 0x000341b0
   115b0:	andeq	r0, r0, r0
   115b4:	ldr	r0, [pc, #36]	; 115e0 <__assert_fail@plt+0xc8>
   115b8:	ldr	r1, [pc, #36]	; 115e4 <__assert_fail@plt+0xcc>
   115bc:	sub	r1, r1, r0
   115c0:	asr	r1, r1, #2
   115c4:	add	r1, r1, r1, lsr #31
   115c8:	asrs	r1, r1, #1
   115cc:	bxeq	lr
   115d0:	ldr	r3, [pc, #16]	; 115e8 <__assert_fail@plt+0xd0>
   115d4:	cmp	r3, #0
   115d8:	bxeq	lr
   115dc:	bx	r3
   115e0:			; <UNDEFINED> instruction: 0x000341b0
   115e4:			; <UNDEFINED> instruction: 0x000341b0
   115e8:	andeq	r0, r0, r0
   115ec:	push	{r4, lr}
   115f0:	ldr	r4, [pc, #24]	; 11610 <__assert_fail@plt+0xf8>
   115f4:	ldrb	r3, [r4]
   115f8:	cmp	r3, #0
   115fc:	popne	{r4, pc}
   11600:	bl	11588 <__assert_fail@plt+0x70>
   11604:	mov	r3, #1
   11608:	strb	r3, [r4]
   1160c:	pop	{r4, pc}
   11610:	ldrdeq	r4, [r3], -r4	; <UNPREDICTABLE>
   11614:	b	115b4 <__assert_fail@plt+0x9c>
   11618:	push	{fp, lr}
   1161c:	mov	fp, sp
   11620:	sub	sp, sp, #56	; 0x38
   11624:	mov	r8, r0
   11628:	cmp	r0, #0
   1162c:	bne	118dc <__assert_fail@plt+0x3c4>
   11630:	movw	r1, #10379	; 0x288b
   11634:	mov	r0, #0
   11638:	mov	r2, #5
   1163c:	movt	r1, #2
   11640:	bl	11314 <dcgettext@plt>
   11644:	mov	r1, r0
   11648:	movw	r0, #17808	; 0x4590
   1164c:	movt	r0, #3
   11650:	ldr	r2, [r0]
   11654:	mov	r0, #1
   11658:	bl	11434 <__printf_chk@plt>
   1165c:	movw	r1, #10412	; 0x28ac
   11660:	mov	r0, #0
   11664:	mov	r2, #5
   11668:	movt	r1, #2
   1166c:	bl	11314 <dcgettext@plt>
   11670:	movw	r9, #16844	; 0x41cc
   11674:	movt	r9, #3
   11678:	ldr	r1, [r9]
   1167c:	bl	1120c <fputs_unlocked@plt>
   11680:	movw	r1, #12406	; 0x3076
   11684:	mov	r0, #0
   11688:	mov	r2, #5
   1168c:	movt	r1, #2
   11690:	bl	11314 <dcgettext@plt>
   11694:	ldr	r1, [r9]
   11698:	bl	1120c <fputs_unlocked@plt>
   1169c:	movw	r1, #12462	; 0x30ae
   116a0:	mov	r0, #0
   116a4:	mov	r2, #5
   116a8:	movt	r1, #2
   116ac:	bl	11314 <dcgettext@plt>
   116b0:	ldr	r1, [r9]
   116b4:	bl	1120c <fputs_unlocked@plt>
   116b8:	movw	r1, #10474	; 0x28ea
   116bc:	mov	r0, #0
   116c0:	mov	r2, #5
   116c4:	movt	r1, #2
   116c8:	bl	11314 <dcgettext@plt>
   116cc:	ldr	r1, [r9]
   116d0:	bl	1120c <fputs_unlocked@plt>
   116d4:	movw	r1, #10684	; 0x29bc
   116d8:	mov	r0, #0
   116dc:	mov	r2, #5
   116e0:	movt	r1, #2
   116e4:	bl	11314 <dcgettext@plt>
   116e8:	ldr	r1, [r9]
   116ec:	bl	1120c <fputs_unlocked@plt>
   116f0:	movw	r1, #11127	; 0x2b77
   116f4:	mov	r0, #0
   116f8:	mov	r2, #5
   116fc:	movt	r1, #2
   11700:	bl	11314 <dcgettext@plt>
   11704:	ldr	r1, [r9]
   11708:	bl	1120c <fputs_unlocked@plt>
   1170c:	movw	r1, #11270	; 0x2c06
   11710:	mov	r0, #0
   11714:	mov	r2, #5
   11718:	movt	r1, #2
   1171c:	bl	11314 <dcgettext@plt>
   11720:	ldr	r1, [r9]
   11724:	bl	1120c <fputs_unlocked@plt>
   11728:	movw	r1, #11315	; 0x2c33
   1172c:	mov	r0, #0
   11730:	mov	r2, #5
   11734:	movt	r1, #2
   11738:	bl	11314 <dcgettext@plt>
   1173c:	ldr	r1, [r9]
   11740:	bl	1120c <fputs_unlocked@plt>
   11744:	movw	r1, #11369	; 0x2c69
   11748:	mov	r0, #0
   1174c:	mov	r2, #5
   11750:	movt	r1, #2
   11754:	bl	11314 <dcgettext@plt>
   11758:	ldr	r1, [r9]
   1175c:	bl	1120c <fputs_unlocked@plt>
   11760:	movw	r1, #11692	; 0x2dac
   11764:	mov	r0, #0
   11768:	mov	r2, #5
   1176c:	movt	r1, #2
   11770:	bl	11314 <dcgettext@plt>
   11774:	ldr	r1, [r9]
   11778:	bl	1120c <fputs_unlocked@plt>
   1177c:	movw	r1, #11894	; 0x2e76
   11780:	mov	r0, #0
   11784:	mov	r2, #5
   11788:	movt	r1, #2
   1178c:	bl	11314 <dcgettext@plt>
   11790:	ldr	r1, [r9]
   11794:	bl	1120c <fputs_unlocked@plt>
   11798:	movw	r0, #13352	; 0x3428
   1179c:	mov	r6, sp
   117a0:	movt	r0, #2
   117a4:	mov	r1, r6
   117a8:	ldm	r0!, {r2, r3, r4, r5}
   117ac:	stmia	r1!, {r2, r3, r4, r5}
   117b0:	ldm	r0!, {r2, r3, r4, r5, r7}
   117b4:	stmia	r1!, {r2, r3, r4, r5, r7}
   117b8:	ldm	r0, {r2, r3, r4, r5, r7}
   117bc:	stm	r1, {r2, r3, r4, r5, r7}
   117c0:	movw	r1, #12537	; 0x30f9
   117c4:	movw	r5, #12041	; 0x2f09
   117c8:	movt	r1, #2
   117cc:	movt	r5, #2
   117d0:	mov	r0, r5
   117d4:	bl	11248 <strcmp@plt>
   117d8:	cmp	r0, #0
   117dc:	ldrne	r1, [r6, #8]!
   117e0:	cmpne	r1, #0
   117e4:	bne	117d0 <__assert_fail@plt+0x2b8>
   117e8:	ldr	r6, [r6, #4]
   117ec:	movw	r1, #12632	; 0x3158
   117f0:	mov	r0, #0
   117f4:	mov	r2, #5
   117f8:	movt	r1, #2
   117fc:	bl	11314 <dcgettext@plt>
   11800:	movw	r2, #12362	; 0x304a
   11804:	movw	r3, #12655	; 0x316f
   11808:	mov	r1, r0
   1180c:	mov	r0, #1
   11810:	movt	r2, #2
   11814:	movt	r3, #2
   11818:	bl	11434 <__printf_chk@plt>
   1181c:	cmp	r6, #0
   11820:	mov	r0, #5
   11824:	mov	r1, #0
   11828:	moveq	r6, r5
   1182c:	bl	1147c <setlocale@plt>
   11830:	cmp	r0, #0
   11834:	beq	1186c <__assert_fail@plt+0x354>
   11838:	movw	r1, #12695	; 0x3197
   1183c:	mov	r2, #3
   11840:	movt	r1, #2
   11844:	bl	114e8 <strncmp@plt>
   11848:	cmp	r0, #0
   1184c:	beq	1186c <__assert_fail@plt+0x354>
   11850:	movw	r1, #12699	; 0x319b
   11854:	mov	r0, #0
   11858:	mov	r2, #5
   1185c:	movt	r1, #2
   11860:	bl	11314 <dcgettext@plt>
   11864:	ldr	r1, [r9]
   11868:	bl	1120c <fputs_unlocked@plt>
   1186c:	movw	r1, #12770	; 0x31e2
   11870:	mov	r0, #0
   11874:	mov	r2, #5
   11878:	movt	r1, #2
   1187c:	bl	11314 <dcgettext@plt>
   11880:	movw	r2, #12655	; 0x316f
   11884:	mov	r1, r0
   11888:	mov	r0, #1
   1188c:	mov	r3, r5
   11890:	movt	r2, #2
   11894:	bl	11434 <__printf_chk@plt>
   11898:	movw	r1, #12797	; 0x31fd
   1189c:	mov	r0, #0
   118a0:	mov	r2, #5
   118a4:	movt	r1, #2
   118a8:	bl	11314 <dcgettext@plt>
   118ac:	movw	r3, #13038	; 0x32ee
   118b0:	mov	r1, r0
   118b4:	movw	r0, #12565	; 0x3115
   118b8:	cmp	r6, r5
   118bc:	mov	r2, r6
   118c0:	movt	r0, #2
   118c4:	movt	r3, #2
   118c8:	moveq	r3, r0
   118cc:	mov	r0, #1
   118d0:	bl	11434 <__printf_chk@plt>
   118d4:	mov	r0, r8
   118d8:	bl	113d4 <exit@plt>
   118dc:	movw	r0, #16832	; 0x41c0
   118e0:	movw	r1, #10340	; 0x2864
   118e4:	mov	r2, #5
   118e8:	movt	r0, #3
   118ec:	movt	r1, #2
   118f0:	ldr	r5, [r0]
   118f4:	mov	r0, #0
   118f8:	bl	11314 <dcgettext@plt>
   118fc:	mov	r2, r0
   11900:	movw	r0, #17808	; 0x4590
   11904:	mov	r1, #1
   11908:	movt	r0, #3
   1190c:	ldr	r3, [r0]
   11910:	mov	r0, r5
   11914:	bl	1144c <__fprintf_chk@plt>
   11918:	b	118d4 <__assert_fail@plt+0x3bc>
   1191c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11920:	add	fp, sp, #28
   11924:	sub	sp, sp, #20
   11928:	mov	r5, r0
   1192c:	ldr	r0, [r1]
   11930:	mov	r9, r1
   11934:	bl	12aa8 <__assert_fail@plt+0x1590>
   11938:	movw	r1, #13038	; 0x32ee
   1193c:	mov	r0, #6
   11940:	movt	r1, #2
   11944:	bl	1147c <setlocale@plt>
   11948:	movw	r6, #12366	; 0x304e
   1194c:	movw	r1, #12044	; 0x2f0c
   11950:	movt	r6, #2
   11954:	movt	r1, #2
   11958:	mov	r0, r6
   1195c:	bl	114c4 <bindtextdomain@plt>
   11960:	mov	r0, r6
   11964:	bl	1132c <textdomain@plt>
   11968:	movw	r0, #9960	; 0x26e8
   1196c:	movt	r0, #1
   11970:	bl	22840 <__assert_fail@plt+0x11328>
   11974:	movw	r0, #16856	; 0x41d8
   11978:	movw	r7, #12068	; 0x2f24
   1197c:	mov	r1, #0
   11980:	mov	r4, #0
   11984:	mov	r6, #1
   11988:	movt	r0, #3
   1198c:	movt	r7, #2
   11990:	strb	r1, [r0]
   11994:	b	11d94 <__assert_fail@plt+0x87c>
   11998:	cmn	r0, #3
   1199c:	beq	1204c <__assert_fail@plt+0xb34>
   119a0:	cmn	r0, #2
   119a4:	mov	r6, #0
   119a8:	bne	11d94 <__assert_fail@plt+0x87c>
   119ac:	b	120a0 <__assert_fail@plt+0xb88>
   119b0:	movw	r0, #16848	; 0x41d0
   119b4:	movw	r1, #12222	; 0x2fbe
   119b8:	mov	r2, #5
   119bc:	movt	r0, #3
   119c0:	movt	r1, #2
   119c4:	ldr	r7, [r0]
   119c8:	mov	r0, #0
   119cc:	bl	11314 <dcgettext@plt>
   119d0:	mvn	r1, #0
   119d4:	str	r0, [sp, #12]
   119d8:	mov	r0, r7
   119dc:	movw	r7, #12068	; 0x2f24
   119e0:	mov	r2, #0
   119e4:	mov	r3, #-2147483648	; 0x80000000
   119e8:	str	r4, [sp, #16]
   119ec:	str	r1, [sp]
   119f0:	mvn	r1, #-2147483648	; 0x80000000
   119f4:	movt	r7, #2
   119f8:	str	r1, [sp, #4]
   119fc:	movw	r1, #13038	; 0x32ee
   11a00:	movt	r1, #2
   11a04:	str	r1, [sp, #8]
   11a08:	bl	21b58 <__assert_fail@plt+0x10640>
   11a0c:	movw	r2, #16704	; 0x4140
   11a10:	movt	r2, #3
   11a14:	b	11c10 <__assert_fail@plt+0x6f8>
   11a18:	movw	r0, #16848	; 0x41d0
   11a1c:	movw	r1, #12193	; 0x2fa1
   11a20:	mov	r2, #5
   11a24:	movt	r0, #3
   11a28:	movt	r1, #2
   11a2c:	ldr	r7, [r0]
   11a30:	mov	r0, #0
   11a34:	bl	11314 <dcgettext@plt>
   11a38:	mvn	r1, #0
   11a3c:	str	r0, [sp, #12]
   11a40:	mov	r0, r7
   11a44:	movw	r7, #12068	; 0x2f24
   11a48:	mov	r2, #0
   11a4c:	mov	r3, #-2147483648	; 0x80000000
   11a50:	str	r4, [sp, #16]
   11a54:	str	r1, [sp]
   11a58:	mvn	r1, #-2147483648	; 0x80000000
   11a5c:	movt	r7, #2
   11a60:	str	r1, [sp, #4]
   11a64:	movw	r1, #13038	; 0x32ee
   11a68:	movt	r1, #2
   11a6c:	str	r1, [sp, #8]
   11a70:	bl	21b58 <__assert_fail@plt+0x10640>
   11a74:	movw	r2, #16696	; 0x4138
   11a78:	movt	r2, #3
   11a7c:	b	11c10 <__assert_fail@plt+0x6f8>
   11a80:	movw	r0, #16688	; 0x4130
   11a84:	movw	r1, #17436	; 0x441c
   11a88:	movw	r2, #17468	; 0x443c
   11a8c:	movt	r0, #3
   11a90:	movt	r1, #3
   11a94:	movt	r2, #3
   11a98:	bl	120c8 <__assert_fail@plt+0xbb0>
   11a9c:	cmp	r0, #0
   11aa0:	mov	r6, sl
   11aa4:	bne	11d94 <__assert_fail@plt+0x87c>
   11aa8:	movw	r1, #12158	; 0x2f7e
   11aac:	mov	r6, #0
   11ab0:	mov	r0, #0
   11ab4:	movt	r1, #2
   11ab8:	b	11af4 <__assert_fail@plt+0x5dc>
   11abc:	movw	r0, #16680	; 0x4128
   11ac0:	movw	r1, #16860	; 0x41dc
   11ac4:	movw	r2, #16892	; 0x41fc
   11ac8:	movt	r0, #3
   11acc:	movt	r1, #3
   11ad0:	movt	r2, #3
   11ad4:	bl	120c8 <__assert_fail@plt+0xbb0>
   11ad8:	cmp	r0, #0
   11adc:	mov	r6, sl
   11ae0:	bne	11d94 <__assert_fail@plt+0x87c>
   11ae4:	movw	r1, #12090	; 0x2f3a
   11ae8:	mov	r6, #0
   11aec:	mov	r0, #0
   11af0:	movt	r1, #2
   11af4:	mov	r2, #5
   11af8:	bl	11314 <dcgettext@plt>
   11afc:	mov	r7, r0
   11b00:	movw	r0, #16848	; 0x41d0
   11b04:	movt	r0, #3
   11b08:	ldr	r0, [r0]
   11b0c:	bl	144ac <__assert_fail@plt+0x2f94>
   11b10:	mov	r3, r0
   11b14:	mov	r2, r7
   11b18:	movw	r7, #12068	; 0x2f24
   11b1c:	mov	r0, #0
   11b20:	mov	r1, #0
   11b24:	movt	r7, #2
   11b28:	bl	11380 <error@plt>
   11b2c:	b	11d94 <__assert_fail@plt+0x87c>
   11b30:	movw	r1, #17724	; 0x453c
   11b34:	mov	r0, #1
   11b38:	movt	r1, #3
   11b3c:	strb	r0, [r1]
   11b40:	b	11d34 <__assert_fail@plt+0x81c>
   11b44:	movw	r0, #16848	; 0x41d0
   11b48:	movt	r0, #3
   11b4c:	ldr	r8, [r0]
   11b50:	mov	r0, r8
   11b54:	bl	113e0 <strlen@plt>
   11b58:	sub	r0, r0, #1
   11b5c:	cmp	r0, #1
   11b60:	bhi	11d3c <__assert_fail@plt+0x824>
   11b64:	ldrb	r0, [r8]
   11b68:	mov	r6, sl
   11b6c:	cmp	r0, #0
   11b70:	beq	11d94 <__assert_fail@plt+0x87c>
   11b74:	movw	r0, #16732	; 0x415c
   11b78:	movw	r2, #16848	; 0x41d0
   11b7c:	movt	r0, #3
   11b80:	movt	r2, #3
   11b84:	ldr	r0, [r0]
   11b88:	add	r1, r8, #1
   11b8c:	str	r1, [r2]
   11b90:	ldrb	r1, [r8]
   11b94:	strb	r1, [r0], #1
   11b98:	ldr	r8, [r2]
   11b9c:	ldrb	r1, [r8]
   11ba0:	cmp	r1, #0
   11ba4:	bne	11b88 <__assert_fail@plt+0x670>
   11ba8:	b	11d34 <__assert_fail@plt+0x81c>
   11bac:	movw	r0, #16848	; 0x41d0
   11bb0:	movw	r1, #12252	; 0x2fdc
   11bb4:	mov	r2, #5
   11bb8:	movt	r0, #3
   11bbc:	movt	r1, #2
   11bc0:	ldr	r7, [r0]
   11bc4:	mov	r0, #0
   11bc8:	bl	11314 <dcgettext@plt>
   11bcc:	mvn	r1, #0
   11bd0:	str	r0, [sp, #12]
   11bd4:	mov	r0, r7
   11bd8:	movw	r7, #12068	; 0x2f24
   11bdc:	mov	r2, #1
   11be0:	mov	r3, #0
   11be4:	str	r4, [sp, #16]
   11be8:	str	r1, [sp]
   11bec:	mvn	r1, #-2147483648	; 0x80000000
   11bf0:	movt	r7, #2
   11bf4:	str	r1, [sp, #4]
   11bf8:	movw	r1, #13038	; 0x32ee
   11bfc:	movt	r1, #2
   11c00:	str	r1, [sp, #8]
   11c04:	bl	21b58 <__assert_fail@plt+0x10640>
   11c08:	movw	r2, #16712	; 0x4148
   11c0c:	movt	r2, #3
   11c10:	strd	r0, [r2]
   11c14:	b	11d34 <__assert_fail@plt+0x81c>
   11c18:	movw	r0, #16848	; 0x41d0
   11c1c:	movw	r1, #12319	; 0x301f
   11c20:	movt	r0, #3
   11c24:	movt	r1, #2
   11c28:	ldr	r7, [r0]
   11c2c:	mov	r0, r7
   11c30:	bl	11248 <strcmp@plt>
   11c34:	cmp	r0, #0
   11c38:	beq	11d4c <__assert_fail@plt+0x834>
   11c3c:	movw	r1, #12322	; 0x3022
   11c40:	mov	r0, r7
   11c44:	movt	r1, #2
   11c48:	bl	11248 <strcmp@plt>
   11c4c:	cmp	r0, #0
   11c50:	beq	11d60 <__assert_fail@plt+0x848>
   11c54:	movw	r1, #12325	; 0x3025
   11c58:	mov	r0, r7
   11c5c:	movt	r1, #2
   11c60:	bl	11248 <strcmp@plt>
   11c64:	cmp	r0, #0
   11c68:	beq	11d74 <__assert_fail@plt+0x85c>
   11c6c:	movw	r1, #12328	; 0x3028
   11c70:	mov	r0, #0
   11c74:	mov	r2, #5
   11c78:	mov	r6, #0
   11c7c:	movt	r1, #2
   11c80:	bl	11314 <dcgettext@plt>
   11c84:	mov	r7, r0
   11c88:	movw	r0, #16848	; 0x41d0
   11c8c:	movt	r0, #3
   11c90:	ldr	r0, [r0]
   11c94:	bl	144ac <__assert_fail@plt+0x2f94>
   11c98:	mov	r3, r0
   11c9c:	mov	r0, #0
   11ca0:	mov	r1, #0
   11ca4:	mov	r2, r7
   11ca8:	bl	11380 <error@plt>
   11cac:	b	11d8c <__assert_fail@plt+0x874>
   11cb0:	movw	r0, #16848	; 0x41d0
   11cb4:	movw	r1, #16720	; 0x4150
   11cb8:	movt	r0, #3
   11cbc:	movt	r1, #3
   11cc0:	ldr	r0, [r0]
   11cc4:	b	11d30 <__assert_fail@plt+0x818>
   11cc8:	movw	r0, #16848	; 0x41d0
   11ccc:	movw	r1, #12287	; 0x2fff
   11cd0:	mov	r2, #5
   11cd4:	movt	r0, #3
   11cd8:	movt	r1, #2
   11cdc:	ldr	r7, [r0]
   11ce0:	mov	r0, #0
   11ce4:	bl	11314 <dcgettext@plt>
   11ce8:	mvn	r1, #-2147483648	; 0x80000000
   11cec:	mov	r2, #0
   11cf0:	str	r0, [sp, #12]
   11cf4:	mov	r0, r7
   11cf8:	movw	r7, #12068	; 0x2f24
   11cfc:	mov	r3, #0
   11d00:	mov	r4, #0
   11d04:	str	r1, [sp]
   11d08:	movw	r1, #13038	; 0x32ee
   11d0c:	str	r2, [sp, #4]
   11d10:	str	r2, [sp, #16]
   11d14:	mov	r2, #1
   11d18:	movt	r7, #2
   11d1c:	movt	r1, #2
   11d20:	str	r1, [sp, #8]
   11d24:	bl	21b58 <__assert_fail@plt+0x10640>
   11d28:	movw	r1, #16724	; 0x4154
   11d2c:	movt	r1, #3
   11d30:	str	r0, [r1]
   11d34:	mov	r6, sl
   11d38:	b	11d94 <__assert_fail@plt+0x87c>
   11d3c:	movw	r0, #16732	; 0x415c
   11d40:	movt	r0, #3
   11d44:	str	r8, [r0]
   11d48:	b	11d34 <__assert_fail@plt+0x81c>
   11d4c:	movw	r0, #16728	; 0x4158
   11d50:	movw	r1, #13320	; 0x3408
   11d54:	movt	r0, #3
   11d58:	movt	r1, #2
   11d5c:	b	11d84 <__assert_fail@plt+0x86c>
   11d60:	movw	r0, #16728	; 0x4158
   11d64:	movw	r1, #13329	; 0x3411
   11d68:	movt	r0, #3
   11d6c:	movt	r1, #2
   11d70:	b	11d84 <__assert_fail@plt+0x86c>
   11d74:	movw	r0, #16728	; 0x4158
   11d78:	movw	r1, #13337	; 0x3419
   11d7c:	movt	r0, #3
   11d80:	movt	r1, #2
   11d84:	mov	r6, sl
   11d88:	str	r1, [r0]
   11d8c:	movw	r7, #12068	; 0x2f24
   11d90:	movt	r7, #2
   11d94:	movw	r3, #13096	; 0x3328
   11d98:	mov	r0, r5
   11d9c:	mov	r1, r9
   11da0:	mov	r2, r7
   11da4:	mov	sl, r6
   11da8:	str	r4, [sp]
   11dac:	movt	r3, #2
   11db0:	bl	113bc <getopt_long@plt>
   11db4:	cmp	r0, #97	; 0x61
   11db8:	ble	11e6c <__assert_fail@plt+0x954>
   11dbc:	sub	r0, r0, #98	; 0x62
   11dc0:	mov	r6, #0
   11dc4:	cmp	r0, #21
   11dc8:	bhi	11d94 <__assert_fail@plt+0x87c>
   11dcc:	add	r1, pc, #4
   11dd0:	mov	r6, #0
   11dd4:	ldr	pc, [r1, r0, lsl #2]
   11dd8:	andeq	r1, r1, r0, lsr lr
   11ddc:	muleq	r1, r4, sp
   11de0:	andeq	r1, r1, r4, asr #22
   11de4:	muleq	r1, r4, sp
   11de8:	andeq	r1, r1, r0, lsl #21
   11dec:	muleq	r1, r4, sp
   11df0:			; <UNDEFINED> instruction: 0x00011abc
   11df4:			; <UNDEFINED> instruction: 0x000119b0
   11df8:	muleq	r1, r4, sp
   11dfc:	muleq	r1, r4, sp
   11e00:	andeq	r1, r1, ip, lsr #23
   11e04:	muleq	r1, r4, sp
   11e08:	andeq	r1, r1, r8, lsl ip
   11e0c:	muleq	r1, r4, sp
   11e10:	andeq	r1, r1, r0, lsr fp
   11e14:	muleq	r1, r4, sp
   11e18:	muleq	r1, r4, sp
   11e1c:			; <UNDEFINED> instruction: 0x00011cb0
   11e20:	muleq	r1, r4, sp
   11e24:	muleq	r1, r4, sp
   11e28:	andeq	r1, r1, r8, lsl sl
   11e2c:	andeq	r1, r1, r8, asr #25
   11e30:	movw	r0, #16684	; 0x412c
   11e34:	movw	r1, #17148	; 0x42fc
   11e38:	movw	r2, #17180	; 0x431c
   11e3c:	movt	r0, #3
   11e40:	movt	r1, #3
   11e44:	movt	r2, #3
   11e48:	bl	120c8 <__assert_fail@plt+0xbb0>
   11e4c:	cmp	r0, #0
   11e50:	mov	r6, sl
   11e54:	bne	11d94 <__assert_fail@plt+0x87c>
   11e58:	movw	r1, #12125	; 0x2f5d
   11e5c:	mov	r6, #0
   11e60:	mov	r0, #0
   11e64:	movt	r1, #2
   11e68:	b	11af4 <__assert_fail@plt+0x5dc>
   11e6c:	cmn	r0, #1
   11e70:	bne	11998 <__assert_fail@plt+0x480>
   11e74:	tst	sl, #1
   11e78:	beq	120a8 <__assert_fail@plt+0xb90>
   11e7c:	movw	r0, #16732	; 0x415c
   11e80:	movt	r0, #3
   11e84:	mov	r4, r0
   11e88:	ldr	r0, [r0]
   11e8c:	bl	113e0 <strlen@plt>
   11e90:	movw	r1, #17728	; 0x4540
   11e94:	mov	r6, r0
   11e98:	add	r0, r0, r0, lsl #1
   11e9c:	movt	r1, #3
   11ea0:	str	r0, [r1]
   11ea4:	add	r0, r0, #1
   11ea8:	bl	215b8 <__assert_fail@plt+0x100a0>
   11eac:	ldr	r1, [r4]
   11eb0:	movw	r7, #17732	; 0x4544
   11eb4:	movt	r7, #3
   11eb8:	str	r0, [r7]
   11ebc:	bl	112fc <stpcpy@plt>
   11ec0:	ldr	r1, [r4]
   11ec4:	bl	112fc <stpcpy@plt>
   11ec8:	ldr	r1, [r4]
   11ecc:	bl	112fc <stpcpy@plt>
   11ed0:	movw	r1, #17736	; 0x4548
   11ed4:	lsl	r0, r6, #1
   11ed8:	movt	r1, #3
   11edc:	str	r0, [r1]
   11ee0:	movw	r0, #17744	; 0x4550
   11ee4:	movw	r1, #17740	; 0x454c
   11ee8:	movt	r0, #3
   11eec:	movt	r1, #3
   11ef0:	str	r6, [r0]
   11ef4:	ldr	r0, [r7]
   11ef8:	add	r0, r0, r6
   11efc:	str	r0, [r1]
   11f00:	movw	r1, #17748	; 0x4554
   11f04:	add	r0, r0, r6
   11f08:	movt	r1, #3
   11f0c:	str	r0, [r1]
   11f10:	movw	r0, #17752	; 0x4558
   11f14:	movt	r0, #3
   11f18:	bl	129ac <__assert_fail@plt+0x1494>
   11f1c:	movw	r0, #16720	; 0x4150
   11f20:	movt	r0, #3
   11f24:	ldr	r0, [r0]
   11f28:	bl	113e0 <strlen@plt>
   11f2c:	mov	r6, r0
   11f30:	movw	r0, #16724	; 0x4154
   11f34:	movt	r0, #3
   11f38:	mov	r4, r0
   11f3c:	ldr	r0, [r0]
   11f40:	add	r0, r6, r0
   11f44:	add	r0, r0, #1
   11f48:	bl	215b8 <__assert_fail@plt+0x100a0>
   11f4c:	mov	r7, r0
   11f50:	movw	r0, #17764	; 0x4564
   11f54:	mov	r1, #32
   11f58:	movt	r0, #3
   11f5c:	str	r7, [r0]
   11f60:	ldr	r0, [r4]
   11f64:	add	r6, r0, r6
   11f68:	mov	r0, r7
   11f6c:	mov	r2, r6
   11f70:	bl	1141c <memset@plt>
   11f74:	mov	r0, #0
   11f78:	movw	r1, #17148	; 0x42fc
   11f7c:	movw	r2, #17768	; 0x4568
   11f80:	strb	r0, [r7, r6]
   11f84:	movw	r0, #17780	; 0x4574
   11f88:	movt	r1, #3
   11f8c:	movt	r2, #3
   11f90:	movw	r7, #16824	; 0x41b8
   11f94:	movt	r0, #3
   11f98:	movt	r7, #3
   11f9c:	str	r1, [r0]
   11fa0:	movw	r0, #16696	; 0x4138
   11fa4:	movt	r0, #3
   11fa8:	ldrd	r0, [r0]
   11fac:	strd	r0, [r2]
   11fb0:	movw	r0, #16684	; 0x412c
   11fb4:	movw	r1, #17776	; 0x4570
   11fb8:	movt	r0, #3
   11fbc:	movt	r1, #3
   11fc0:	ldr	r0, [r0]
   11fc4:	str	r0, [r1]
   11fc8:	ldr	r1, [r7]
   11fcc:	cmp	r1, r5
   11fd0:	bne	11fe8 <__assert_fail@plt+0xad0>
   11fd4:	movw	r0, #13508	; 0x34c4
   11fd8:	movt	r0, #2
   11fdc:	bl	12198 <__assert_fail@plt+0xc80>
   11fe0:	mov	r6, r0
   11fe4:	b	12014 <__assert_fail@plt+0xafc>
   11fe8:	mov	r6, #1
   11fec:	bge	12014 <__assert_fail@plt+0xafc>
   11ff0:	mov	r6, #1
   11ff4:	ldr	r0, [r9, r1, lsl #2]
   11ff8:	bl	12198 <__assert_fail@plt+0xc80>
   11ffc:	ldr	r1, [r7]
   12000:	and	r6, r6, r0
   12004:	add	r1, r1, #1
   12008:	cmp	r1, r5
   1200c:	str	r1, [r7]
   12010:	blt	11ff4 <__assert_fail@plt+0xadc>
   12014:	movw	r0, #16856	; 0x41d8
   12018:	movt	r0, #3
   1201c:	ldrb	r0, [r0]
   12020:	cmp	r0, #1
   12024:	bne	12040 <__assert_fail@plt+0xb28>
   12028:	movw	r0, #16840	; 0x41c8
   1202c:	movt	r0, #3
   12030:	ldr	r0, [r0]
   12034:	bl	12810 <__assert_fail@plt+0x12f8>
   12038:	cmn	r0, #1
   1203c:	beq	120b0 <__assert_fail@plt+0xb98>
   12040:	eor	r0, r6, #1
   12044:	sub	sp, fp, #28
   12048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1204c:	movw	r0, #16740	; 0x4164
   12050:	movw	r2, #12390	; 0x3066
   12054:	mov	r1, #0
   12058:	movw	r7, #12376	; 0x3058
   1205c:	movt	r0, #3
   12060:	movt	r2, #2
   12064:	str	r1, [sp, #8]
   12068:	movw	r1, #12041	; 0x2f09
   1206c:	movt	r7, #2
   12070:	ldr	r3, [r0]
   12074:	movw	r0, #16844	; 0x41cc
   12078:	str	r2, [sp, #4]
   1207c:	movw	r2, #12362	; 0x304a
   12080:	movt	r1, #2
   12084:	str	r7, [sp]
   12088:	movt	r0, #3
   1208c:	movt	r2, #2
   12090:	ldr	r0, [r0]
   12094:	bl	214b0 <__assert_fail@plt+0xff98>
   12098:	mov	r0, #0
   1209c:	bl	113d4 <exit@plt>
   120a0:	mov	r0, #0
   120a4:	bl	11618 <__assert_fail@plt+0x100>
   120a8:	mov	r0, #1
   120ac:	bl	11618 <__assert_fail@plt+0x100>
   120b0:	bl	113f8 <__errno_location@plt>
   120b4:	ldr	r1, [r0]
   120b8:	movw	r2, #13508	; 0x34c4
   120bc:	mov	r0, #1
   120c0:	movt	r2, #2
   120c4:	bl	11380 <error@plt>
   120c8:	push	{r4, r5, fp, lr}
   120cc:	add	fp, sp, #8
   120d0:	movw	ip, #16848	; 0x41d0
   120d4:	mov	r4, r1
   120d8:	mov	r1, r0
   120dc:	mov	r0, #0
   120e0:	movt	ip, #3
   120e4:	ldr	r3, [ip]
   120e8:	ldrb	r5, [r3]
   120ec:	cmp	r5, #111	; 0x6f
   120f0:	bgt	12108 <__assert_fail@plt+0xbf0>
   120f4:	cmp	r5, #97	; 0x61
   120f8:	beq	12118 <__assert_fail@plt+0xc00>
   120fc:	cmp	r5, #110	; 0x6e
   12100:	beq	12118 <__assert_fail@plt+0xc00>
   12104:	b	12180 <__assert_fail@plt+0xc68>
   12108:	cmp	r5, #112	; 0x70
   1210c:	beq	12124 <__assert_fail@plt+0xc0c>
   12110:	cmp	r5, #116	; 0x74
   12114:	popne	{r4, r5, fp, pc}
   12118:	mov	r0, #1
   1211c:	str	r3, [r1]
   12120:	pop	{r4, r5, fp, pc}
   12124:	add	r0, r3, #1
   12128:	str	r0, [ip]
   1212c:	mov	r0, #0
   12130:	str	r3, [r1]
   12134:	movw	r1, #710	; 0x2c6
   12138:	str	r0, [r4]
   1213c:	str	r0, [r4, #4]
   12140:	str	r2, [r4, #16]
   12144:	str	r0, [r4, #20]
   12148:	movw	r0, #18120	; 0x46c8
   1214c:	ldr	r5, [ip]
   12150:	movt	r0, #3
   12154:	str	r1, [r0]
   12158:	mov	r0, r5
   1215c:	bl	113e0 <strlen@plt>
   12160:	mov	r1, r0
   12164:	mov	r0, r5
   12168:	mov	r2, r4
   1216c:	bl	145e8 <__assert_fail@plt+0x30d0>
   12170:	mov	r3, r0
   12174:	mov	r0, #1
   12178:	cmp	r3, #0
   1217c:	bne	12184 <__assert_fail@plt+0xc6c>
   12180:	pop	{r4, r5, fp, pc}
   12184:	movw	r2, #12122	; 0x2f5a
   12188:	mov	r0, #1
   1218c:	mov	r1, #0
   12190:	movt	r2, #2
   12194:	bl	11380 <error@plt>
   12198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1219c:	add	fp, sp, #28
   121a0:	sub	sp, sp, #12
   121a4:	movw	r1, #13508	; 0x34c4
   121a8:	mov	r6, r0
   121ac:	movt	r1, #2
   121b0:	bl	11248 <strcmp@plt>
   121b4:	cmp	r0, #0
   121b8:	beq	12208 <__assert_fail@plt+0xcf0>
   121bc:	movw	r1, #12220	; 0x2fbc
   121c0:	mov	r0, r6
   121c4:	movt	r1, #2
   121c8:	bl	114b8 <fopen64@plt>
   121cc:	mov	r5, r0
   121d0:	cmp	r0, #0
   121d4:	bne	12224 <__assert_fail@plt+0xd0c>
   121d8:	bl	113f8 <__errno_location@plt>
   121dc:	ldr	r5, [r0]
   121e0:	mov	r0, #0
   121e4:	mov	r1, #3
   121e8:	mov	r2, r6
   121ec:	mov	r4, #0
   121f0:	bl	14318 <__assert_fail@plt+0x2e00>
   121f4:	movw	r2, #12122	; 0x2f5a
   121f8:	mov	r3, r0
   121fc:	mov	r0, #0
   12200:	mov	r1, r5
   12204:	b	12594 <__assert_fail@plt+0x107c>
   12208:	movw	r0, #16856	; 0x41d8
   1220c:	mov	r1, #1
   12210:	movt	r0, #3
   12214:	strb	r1, [r0]
   12218:	movw	r0, #16840	; 0x41c8
   1221c:	movt	r0, #3
   12220:	ldr	r5, [r0]
   12224:	mov	r0, r5
   12228:	mov	r1, #2
   1222c:	str	r6, [sp, #8]
   12230:	bl	127d4 <__assert_fail@plt+0x12bc>
   12234:	movw	r6, #17752	; 0x4558
   12238:	mov	r1, r5
   1223c:	movt	r6, #3
   12240:	mov	r0, r6
   12244:	bl	129c0 <__assert_fail@plt+0x14a8>
   12248:	cmp	r0, #0
   1224c:	beq	1250c <__assert_fail@plt+0xff4>
   12250:	movw	r8, #16844	; 0x41cc
   12254:	movt	r8, #3
   12258:	b	122f0 <__assert_fail@plt+0xdd8>
   1225c:	movw	r0, #17780	; 0x4574
   12260:	movw	r1, #16860	; 0x41dc
   12264:	movt	r0, #3
   12268:	movt	r1, #3
   1226c:	str	r1, [r0]
   12270:	movw	r0, #16680	; 0x4128
   12274:	movt	r0, #3
   12278:	b	12298 <__assert_fail@plt+0xd80>
   1227c:	movw	r0, #17780	; 0x4574
   12280:	movw	r1, #17148	; 0x42fc
   12284:	movt	r0, #3
   12288:	movt	r1, #3
   1228c:	str	r1, [r0]
   12290:	movw	r0, #16684	; 0x412c
   12294:	movt	r0, #3
   12298:	ldr	r0, [r0]
   1229c:	movw	r1, #17776	; 0x4570
   122a0:	movt	r1, #3
   122a4:	str	r0, [r1]
   122a8:	movw	r0, #17724	; 0x453c
   122ac:	movt	r0, #3
   122b0:	ldrb	r0, [r0]
   122b4:	cmp	r0, #0
   122b8:	bne	122e4 <__assert_fail@plt+0xdcc>
   122bc:	movw	r1, #17784	; 0x4578
   122c0:	mov	r0, #0
   122c4:	movw	r2, #17768	; 0x4568
   122c8:	movt	r1, #3
   122cc:	movt	r2, #3
   122d0:	strb	r0, [r1]
   122d4:	movw	r0, #16696	; 0x4138
   122d8:	movt	r0, #3
   122dc:	ldrd	r0, [r0]
   122e0:	strd	r0, [r2]
   122e4:	mov	r0, #10
   122e8:	bl	1150c <putchar_unlocked@plt>
   122ec:	b	124f8 <__assert_fail@plt+0xfe0>
   122f0:	ldr	r9, [r6, #4]
   122f4:	sub	r7, r9, #1
   122f8:	cmp	r7, #2
   122fc:	movwcs	r0, #17744	; 0x4550
   12300:	movtcs	r0, #3
   12304:	ldrcs	sl, [r0]
   12308:	cmpcs	sl, #2
   1230c:	bcs	12358 <__assert_fail@plt+0xe40>
   12310:	movw	r0, #17776	; 0x4570
   12314:	movt	r0, #3
   12318:	ldr	r0, [r0]
   1231c:	ldrb	r0, [r0]
   12320:	cmp	r0, #111	; 0x6f
   12324:	bgt	1233c <__assert_fail@plt+0xe24>
   12328:	cmp	r0, #97	; 0x61
   1232c:	beq	12428 <__assert_fail@plt+0xf10>
   12330:	cmp	r0, #110	; 0x6e
   12334:	beq	124d0 <__assert_fail@plt+0xfb8>
   12338:	b	124e4 <__assert_fail@plt+0xfcc>
   1233c:	cmp	r0, #112	; 0x70
   12340:	beq	12490 <__assert_fail@plt+0xf78>
   12344:	cmp	r0, #116	; 0x74
   12348:	bne	124e4 <__assert_fail@plt+0xfcc>
   1234c:	cmp	r9, #2
   12350:	bge	124c8 <__assert_fail@plt+0xfb0>
   12354:	b	124d0 <__assert_fail@plt+0xfb8>
   12358:	movw	r0, #16732	; 0x415c
   1235c:	ldr	r4, [r6, #8]
   12360:	movt	r0, #3
   12364:	ldr	r0, [r0]
   12368:	ldrh	r1, [r4]
   1236c:	ldrh	r0, [r0]
   12370:	cmp	r1, r0
   12374:	bne	12310 <__assert_fail@plt+0xdf8>
   12378:	movw	r0, #17728	; 0x4540
   1237c:	movt	r0, #3
   12380:	ldr	r0, [r0]
   12384:	cmp	r7, r0
   12388:	bne	123ac <__assert_fail@plt+0xe94>
   1238c:	movw	r0, #17732	; 0x4544
   12390:	mov	r2, r7
   12394:	movt	r0, #3
   12398:	ldr	r1, [r0]
   1239c:	mov	r0, r4
   123a0:	bl	112f0 <memcmp@plt>
   123a4:	cmp	r0, #0
   123a8:	beq	1225c <__assert_fail@plt+0xd44>
   123ac:	movw	r0, #17736	; 0x4548
   123b0:	movt	r0, #3
   123b4:	ldr	r0, [r0]
   123b8:	cmp	r7, r0
   123bc:	bne	123e0 <__assert_fail@plt+0xec8>
   123c0:	movw	r0, #17740	; 0x454c
   123c4:	mov	r2, r7
   123c8:	movt	r0, #3
   123cc:	ldr	r1, [r0]
   123d0:	mov	r0, r4
   123d4:	bl	112f0 <memcmp@plt>
   123d8:	cmp	r0, #0
   123dc:	beq	1227c <__assert_fail@plt+0xd64>
   123e0:	cmp	r7, sl
   123e4:	bne	12310 <__assert_fail@plt+0xdf8>
   123e8:	movw	r0, #17748	; 0x4554
   123ec:	mov	r2, r7
   123f0:	movt	r0, #3
   123f4:	ldr	r1, [r0]
   123f8:	mov	r0, r4
   123fc:	bl	112f0 <memcmp@plt>
   12400:	cmp	r0, #0
   12404:	bne	12310 <__assert_fail@plt+0xdf8>
   12408:	movw	r0, #17780	; 0x4574
   1240c:	movw	r1, #17436	; 0x441c
   12410:	movt	r0, #3
   12414:	movt	r1, #3
   12418:	str	r1, [r0]
   1241c:	movw	r0, #16688	; 0x4130
   12420:	movt	r0, #3
   12424:	b	12298 <__assert_fail@plt+0xd80>
   12428:	movw	r0, #16712	; 0x4148
   1242c:	movt	r0, #3
   12430:	ldrd	r0, [r0]
   12434:	subs	r2, r0, #2
   12438:	sbcs	r2, r1, #0
   1243c:	blt	124c8 <__assert_fail@plt+0xfb0>
   12440:	cmp	r9, #1
   12444:	bgt	12474 <__assert_fail@plt+0xf5c>
   12448:	movw	r2, #17792	; 0x4580
   1244c:	movt	r2, #3
   12450:	mov	r7, r2
   12454:	ldrd	r2, [r2]
   12458:	adds	r2, r2, #1
   1245c:	adc	r3, r3, #0
   12460:	eor	r0, r2, r0
   12464:	eor	r1, r3, r1
   12468:	strd	r2, [r7]
   1246c:	orrs	r0, r0, r1
   12470:	bne	124d0 <__assert_fail@plt+0xfb8>
   12474:	bl	125dc <__assert_fail@plt+0x10c4>
   12478:	movw	r0, #17792	; 0x4580
   1247c:	mov	r1, #0
   12480:	movt	r0, #3
   12484:	str	r1, [r0]
   12488:	str	r1, [r0, #4]
   1248c:	b	124e4 <__assert_fail@plt+0xfcc>
   12490:	movw	r0, #17780	; 0x4574
   12494:	ldr	r1, [r6, #8]
   12498:	mov	r2, #0
   1249c:	mov	r3, #0
   124a0:	str	r7, [sp]
   124a4:	movt	r0, #3
   124a8:	str	r2, [sp, #4]
   124ac:	mov	r2, r7
   124b0:	ldr	r0, [r0]
   124b4:	bl	1784c <__assert_fail@plt+0x6334>
   124b8:	cmn	r0, #1
   124bc:	beq	124d0 <__assert_fail@plt+0xfb8>
   124c0:	cmn	r0, #2
   124c4:	beq	125b0 <__assert_fail@plt+0x1098>
   124c8:	bl	125dc <__assert_fail@plt+0x10c4>
   124cc:	b	124e4 <__assert_fail@plt+0xfcc>
   124d0:	movw	r0, #17764	; 0x4564
   124d4:	ldr	r1, [r8]
   124d8:	movt	r0, #3
   124dc:	ldr	r0, [r0]
   124e0:	bl	1120c <fputs_unlocked@plt>
   124e4:	ldr	r3, [r8]
   124e8:	ldr	r2, [r6, #4]
   124ec:	ldr	r0, [r6, #8]
   124f0:	mov	r1, #1
   124f4:	bl	112e4 <fwrite_unlocked@plt>
   124f8:	mov	r0, r6
   124fc:	mov	r1, r5
   12500:	bl	129c0 <__assert_fail@plt+0x14a8>
   12504:	cmp	r0, #0
   12508:	bne	122f0 <__assert_fail@plt+0xdd8>
   1250c:	bl	113f8 <__errno_location@plt>
   12510:	ldr	r6, [r0]
   12514:	mov	r4, r0
   12518:	mov	r0, r5
   1251c:	bl	11368 <ferror_unlocked@plt>
   12520:	ldr	r7, [sp, #8]
   12524:	movw	r1, #13508	; 0x34c4
   12528:	cmp	r0, #0
   1252c:	moveq	r6, r0
   12530:	movt	r1, #2
   12534:	mov	r0, r7
   12538:	bl	11248 <strcmp@plt>
   1253c:	cmp	r0, #0
   12540:	beq	12560 <__assert_fail@plt+0x1048>
   12544:	mov	r0, r5
   12548:	bl	12810 <__assert_fail@plt+0x12f8>
   1254c:	cmp	r6, #0
   12550:	bne	12568 <__assert_fail@plt+0x1050>
   12554:	cmp	r0, #0
   12558:	ldrne	r6, [r4]
   1255c:	b	12568 <__assert_fail@plt+0x1050>
   12560:	mov	r0, r5
   12564:	bl	114ac <clearerr_unlocked@plt>
   12568:	cmp	r6, #0
   1256c:	beq	125a0 <__assert_fail@plt+0x1088>
   12570:	mov	r0, #0
   12574:	mov	r1, #3
   12578:	mov	r2, r7
   1257c:	mov	r4, #0
   12580:	bl	14318 <__assert_fail@plt+0x2e00>
   12584:	movw	r2, #12122	; 0x2f5a
   12588:	mov	r3, r0
   1258c:	mov	r0, #0
   12590:	mov	r1, r6
   12594:	movt	r2, #2
   12598:	bl	11380 <error@plt>
   1259c:	b	125a4 <__assert_fail@plt+0x108c>
   125a0:	mov	r4, #1
   125a4:	mov	r0, r4
   125a8:	sub	sp, fp, #28
   125ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125b0:	bl	113f8 <__errno_location@plt>
   125b4:	ldr	r4, [r0]
   125b8:	movw	r1, #13039	; 0x32ef
   125bc:	mov	r0, #0
   125c0:	mov	r2, #5
   125c4:	movt	r1, #2
   125c8:	bl	11314 <dcgettext@plt>
   125cc:	mov	r2, r0
   125d0:	mov	r0, #1
   125d4:	mov	r1, r4
   125d8:	bl	11380 <error@plt>
   125dc:	push	{r4, r5, r6, r7, fp, lr}
   125e0:	add	fp, sp, #16
   125e4:	sub	sp, sp, #16
   125e8:	movw	r4, #17784	; 0x4578
   125ec:	movt	r4, #3
   125f0:	ldrb	r0, [r4]
   125f4:	cmp	r0, #1
   125f8:	beq	126a4 <__assert_fail@plt+0x118c>
   125fc:	movw	r0, #16724	; 0x4154
   12600:	movw	r6, #17768	; 0x4568
   12604:	movw	r5, #16720	; 0x4150
   12608:	movt	r0, #3
   1260c:	movt	r6, #3
   12610:	movt	r5, #3
   12614:	ldr	r2, [r0]
   12618:	movw	r0, #16728	; 0x4158
   1261c:	movt	r0, #3
   12620:	ldr	r1, [r0]
   12624:	ldm	r6, {r0, r3}
   12628:	ldr	r5, [r5]
   1262c:	stm	sp, {r0, r3, r5}
   12630:	mov	r0, #1
   12634:	mov	r5, #1
   12638:	bl	11434 <__printf_chk@plt>
   1263c:	movw	r0, #16704	; 0x4140
   12640:	ldrd	r2, [r6]
   12644:	movt	r0, #3
   12648:	ldrd	r0, [r0]
   1264c:	adds	r0, r2, r0
   12650:	mov	r2, #0
   12654:	adc	r7, r3, r1
   12658:	cmn	r3, #1
   1265c:	mov	r3, #0
   12660:	movwgt	r2, #1
   12664:	cmn	r7, #1
   12668:	stm	r6, {r0, r7}
   1266c:	mov	r0, #0
   12670:	movwgt	r3, #1
   12674:	subs	r3, r2, r3
   12678:	movwne	r3, #1
   1267c:	cmn	r1, #1
   12680:	movwgt	r0, #1
   12684:	sub	r0, r2, r0
   12688:	clz	r0, r0
   1268c:	lsr	r0, r0, #5
   12690:	and	r0, r0, r3
   12694:	cmp	r0, #1
   12698:	strbeq	r5, [r4]
   1269c:	sub	sp, fp, #16
   126a0:	pop	{r4, r5, r6, r7, fp, pc}
   126a4:	movw	r1, #13074	; 0x3312
   126a8:	mov	r0, #0
   126ac:	mov	r2, #5
   126b0:	movt	r1, #2
   126b4:	bl	11314 <dcgettext@plt>
   126b8:	mov	r2, r0
   126bc:	mov	r0, #1
   126c0:	mov	r1, #0
   126c4:	bl	11380 <error@plt>
   126c8:	movw	r1, #17800	; 0x4588
   126cc:	movt	r1, #3
   126d0:	str	r0, [r1]
   126d4:	bx	lr
   126d8:	movw	r1, #17804	; 0x458c
   126dc:	movt	r1, #3
   126e0:	strb	r0, [r1]
   126e4:	bx	lr
   126e8:	push	{r4, r5, r6, sl, fp, lr}
   126ec:	add	fp, sp, #16
   126f0:	sub	sp, sp, #8
   126f4:	movw	r0, #16844	; 0x41cc
   126f8:	movt	r0, #3
   126fc:	ldr	r0, [r0]
   12700:	bl	222a0 <__assert_fail@plt+0x10d88>
   12704:	cmp	r0, #0
   12708:	beq	12730 <__assert_fail@plt+0x1218>
   1270c:	movw	r0, #17804	; 0x458c
   12710:	movt	r0, #3
   12714:	ldrb	r0, [r0]
   12718:	cmp	r0, #0
   1271c:	beq	12750 <__assert_fail@plt+0x1238>
   12720:	bl	113f8 <__errno_location@plt>
   12724:	ldr	r0, [r0]
   12728:	cmp	r0, #32
   1272c:	bne	12750 <__assert_fail@plt+0x1238>
   12730:	movw	r0, #16832	; 0x41c0
   12734:	movt	r0, #3
   12738:	ldr	r0, [r0]
   1273c:	bl	222a0 <__assert_fail@plt+0x10d88>
   12740:	cmp	r0, #0
   12744:	subeq	sp, fp, #16
   12748:	popeq	{r4, r5, r6, sl, fp, pc}
   1274c:	b	127c0 <__assert_fail@plt+0x12a8>
   12750:	movw	r1, #13423	; 0x346f
   12754:	mov	r0, #0
   12758:	mov	r2, #5
   1275c:	movt	r1, #2
   12760:	bl	11314 <dcgettext@plt>
   12764:	mov	r4, r0
   12768:	movw	r0, #17800	; 0x4588
   1276c:	movt	r0, #3
   12770:	ldr	r6, [r0]
   12774:	bl	113f8 <__errno_location@plt>
   12778:	ldr	r5, [r0]
   1277c:	cmp	r6, #0
   12780:	bne	1279c <__assert_fail@plt+0x1284>
   12784:	movw	r2, #12122	; 0x2f5a
   12788:	mov	r0, #0
   1278c:	mov	r1, r5
   12790:	mov	r3, r4
   12794:	movt	r2, #2
   12798:	b	127bc <__assert_fail@plt+0x12a4>
   1279c:	mov	r0, r6
   127a0:	bl	1426c <__assert_fail@plt+0x2d54>
   127a4:	movw	r2, #13435	; 0x347b
   127a8:	mov	r3, r0
   127ac:	str	r4, [sp]
   127b0:	mov	r0, #0
   127b4:	mov	r1, r5
   127b8:	movt	r2, #2
   127bc:	bl	11380 <error@plt>
   127c0:	movw	r0, #16744	; 0x4168
   127c4:	movt	r0, #3
   127c8:	ldr	r0, [r0]
   127cc:	bl	1129c <_exit@plt>
   127d0:	b	11254 <posix_fadvise64@plt>
   127d4:	cmp	r0, #0
   127d8:	bxeq	lr
   127dc:	push	{r4, sl, fp, lr}
   127e0:	add	fp, sp, #8
   127e4:	sub	sp, sp, #16
   127e8:	mov	r4, r1
   127ec:	bl	11440 <fileno@plt>
   127f0:	mov	r1, #0
   127f4:	mov	r2, #0
   127f8:	mov	r3, #0
   127fc:	str	r1, [sp]
   12800:	stmib	sp, {r1, r4}
   12804:	bl	11254 <posix_fadvise64@plt>
   12808:	sub	sp, fp, #8
   1280c:	pop	{r4, sl, fp, pc}
   12810:	push	{r4, r5, r6, sl, fp, lr}
   12814:	add	fp, sp, #16
   12818:	sub	sp, sp, #8
   1281c:	mov	r4, r0
   12820:	bl	11440 <fileno@plt>
   12824:	cmn	r0, #1
   12828:	ble	1289c <__assert_fail@plt+0x1384>
   1282c:	mov	r0, r4
   12830:	bl	113a4 <__freading@plt>
   12834:	cmp	r0, #0
   12838:	beq	12864 <__assert_fail@plt+0x134c>
   1283c:	mov	r0, r4
   12840:	bl	11440 <fileno@plt>
   12844:	mov	r1, #1
   12848:	mov	r2, #0
   1284c:	mov	r3, #0
   12850:	str	r1, [sp]
   12854:	bl	11344 <lseek64@plt>
   12858:	and	r0, r0, r1
   1285c:	cmn	r0, #1
   12860:	beq	1289c <__assert_fail@plt+0x1384>
   12864:	mov	r0, r4
   12868:	bl	128ac <__assert_fail@plt+0x1394>
   1286c:	cmp	r0, #0
   12870:	beq	1289c <__assert_fail@plt+0x1384>
   12874:	bl	113f8 <__errno_location@plt>
   12878:	ldr	r6, [r0]
   1287c:	mov	r5, r0
   12880:	mov	r0, r4
   12884:	bl	11464 <fclose@plt>
   12888:	cmp	r6, #0
   1288c:	strne	r6, [r5]
   12890:	mvnne	r0, #0
   12894:	sub	sp, fp, #16
   12898:	pop	{r4, r5, r6, sl, fp, pc}
   1289c:	mov	r0, r4
   128a0:	sub	sp, fp, #16
   128a4:	pop	{r4, r5, r6, sl, fp, lr}
   128a8:	b	11464 <fclose@plt>
   128ac:	push	{r4, sl, fp, lr}
   128b0:	add	fp, sp, #8
   128b4:	sub	sp, sp, #8
   128b8:	mov	r4, r0
   128bc:	cmp	r0, #0
   128c0:	beq	128dc <__assert_fail@plt+0x13c4>
   128c4:	mov	r0, r4
   128c8:	bl	113a4 <__freading@plt>
   128cc:	cmp	r0, #0
   128d0:	ldrbne	r0, [r4, #1]
   128d4:	tstne	r0, #1
   128d8:	bne	128ec <__assert_fail@plt+0x13d4>
   128dc:	mov	r0, r4
   128e0:	sub	sp, fp, #8
   128e4:	pop	{r4, sl, fp, lr}
   128e8:	b	1126c <fflush@plt>
   128ec:	mov	r0, #1
   128f0:	mov	r2, #0
   128f4:	mov	r3, #0
   128f8:	str	r0, [sp]
   128fc:	mov	r0, r4
   12900:	bl	12908 <__assert_fail@plt+0x13f0>
   12904:	b	128dc <__assert_fail@plt+0x13c4>
   12908:	push	{r4, r5, r6, r7, fp, lr}
   1290c:	add	fp, sp, #16
   12910:	sub	sp, sp, #8
   12914:	mov	r4, r0
   12918:	ldr	r0, [r0, #4]
   1291c:	mov	r5, r3
   12920:	mov	r6, r2
   12924:	ldr	r1, [r4, #8]
   12928:	cmp	r1, r0
   1292c:	bne	12948 <__assert_fail@plt+0x1430>
   12930:	ldrd	r0, [r4, #16]
   12934:	cmp	r1, r0
   12938:	bne	12948 <__assert_fail@plt+0x1430>
   1293c:	ldr	r0, [r4, #36]	; 0x24
   12940:	cmp	r0, #0
   12944:	beq	12960 <__assert_fail@plt+0x1448>
   12948:	mov	r0, r4
   1294c:	mov	r2, r6
   12950:	mov	r3, r5
   12954:	sub	sp, fp, #16
   12958:	pop	{r4, r5, r6, r7, fp, lr}
   1295c:	b	11470 <fseeko64@plt>
   12960:	ldr	r7, [fp, #8]
   12964:	mov	r0, r4
   12968:	bl	11440 <fileno@plt>
   1296c:	mov	r2, r6
   12970:	mov	r3, r5
   12974:	str	r7, [sp]
   12978:	bl	11344 <lseek64@plt>
   1297c:	and	r2, r0, r1
   12980:	cmn	r2, #1
   12984:	beq	129a0 <__assert_fail@plt+0x1488>
   12988:	strd	r0, [r4, #80]	; 0x50
   1298c:	ldr	r0, [r4]
   12990:	bic	r0, r0, #16
   12994:	str	r0, [r4]
   12998:	mov	r0, #0
   1299c:	b	129a4 <__assert_fail@plt+0x148c>
   129a0:	mvn	r0, #0
   129a4:	sub	sp, fp, #16
   129a8:	pop	{r4, r5, r6, r7, fp, pc}
   129ac:	mov	r1, #0
   129b0:	str	r1, [r0]
   129b4:	str	r1, [r0, #4]
   129b8:	str	r1, [r0, #8]
   129bc:	bx	lr
   129c0:	mov	r2, #10
   129c4:	b	129c8 <__assert_fail@plt+0x14b0>
   129c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129cc:	add	fp, sp, #28
   129d0:	sub	sp, sp, #4
   129d4:	ldr	r5, [r0]
   129d8:	ldr	r6, [r0, #8]
   129dc:	mov	r4, r0
   129e0:	mov	r0, r1
   129e4:	mov	sl, r2
   129e8:	mov	r8, r1
   129ec:	bl	11500 <feof_unlocked@plt>
   129f0:	cmp	r0, #0
   129f4:	beq	12a00 <__assert_fail@plt+0x14e8>
   129f8:	mov	r4, #0
   129fc:	b	12a94 <__assert_fail@plt+0x157c>
   12a00:	add	r9, r6, r5
   12a04:	mov	r7, r6
   12a08:	mov	r0, r8
   12a0c:	bl	11308 <getc_unlocked@plt>
   12a10:	mov	r5, r0
   12a14:	cmn	r0, #1
   12a18:	bne	12a44 <__assert_fail@plt+0x152c>
   12a1c:	cmp	r7, r6
   12a20:	beq	129f8 <__assert_fail@plt+0x14e0>
   12a24:	mov	r0, r8
   12a28:	bl	11368 <ferror_unlocked@plt>
   12a2c:	cmp	r0, #0
   12a30:	bne	129f8 <__assert_fail@plt+0x14e0>
   12a34:	ldrb	r0, [r7, #-1]
   12a38:	mov	r5, sl
   12a3c:	cmp	r0, sl
   12a40:	beq	12a8c <__assert_fail@plt+0x1574>
   12a44:	cmp	r7, r9
   12a48:	bne	12a80 <__assert_fail@plt+0x1568>
   12a4c:	ldr	r7, [r4]
   12a50:	mov	r0, #1
   12a54:	mov	r1, r4
   12a58:	mov	r2, #1
   12a5c:	mvn	r3, #0
   12a60:	str	r0, [sp]
   12a64:	mov	r0, r6
   12a68:	bl	21718 <__assert_fail@plt+0x10200>
   12a6c:	str	r0, [r4, #8]
   12a70:	mov	r6, r0
   12a74:	add	r7, r0, r7
   12a78:	ldr	r0, [r4]
   12a7c:	add	r9, r6, r0
   12a80:	strb	r5, [r7], #1
   12a84:	cmp	r5, sl
   12a88:	bne	12a08 <__assert_fail@plt+0x14f0>
   12a8c:	sub	r0, r7, r6
   12a90:	str	r0, [r4, #4]
   12a94:	mov	r0, r4
   12a98:	sub	sp, fp, #28
   12a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12aa0:	ldr	r0, [r0, #8]
   12aa4:	b	223dc <__assert_fail@plt+0x10ec4>
   12aa8:	push	{r4, r5, fp, lr}
   12aac:	add	fp, sp, #8
   12ab0:	cmp	r0, #0
   12ab4:	beq	12b48 <__assert_fail@plt+0x1630>
   12ab8:	mov	r1, #47	; 0x2f
   12abc:	mov	r4, r0
   12ac0:	bl	11494 <strrchr@plt>
   12ac4:	cmp	r0, #0
   12ac8:	mov	r5, r4
   12acc:	addne	r5, r0, #1
   12ad0:	sub	r0, r5, r4
   12ad4:	cmp	r0, #7
   12ad8:	blt	12b2c <__assert_fail@plt+0x1614>
   12adc:	movw	r1, #13498	; 0x34ba
   12ae0:	sub	r0, r5, #7
   12ae4:	mov	r2, #7
   12ae8:	movt	r1, #2
   12aec:	bl	114e8 <strncmp@plt>
   12af0:	cmp	r0, #0
   12af4:	bne	12b2c <__assert_fail@plt+0x1614>
   12af8:	movw	r1, #13506	; 0x34c2
   12afc:	mov	r0, r5
   12b00:	mov	r2, #3
   12b04:	movt	r1, #2
   12b08:	bl	114e8 <strncmp@plt>
   12b0c:	cmp	r0, #0
   12b10:	beq	12b1c <__assert_fail@plt+0x1604>
   12b14:	mov	r4, r5
   12b18:	b	12b2c <__assert_fail@plt+0x1614>
   12b1c:	movw	r0, #16816	; 0x41b0
   12b20:	add	r4, r5, #3
   12b24:	movt	r0, #3
   12b28:	str	r4, [r0]
   12b2c:	movw	r0, #16820	; 0x41b4
   12b30:	movt	r0, #3
   12b34:	str	r4, [r0]
   12b38:	movw	r0, #17808	; 0x4590
   12b3c:	movt	r0, #3
   12b40:	str	r4, [r0]
   12b44:	pop	{r4, r5, fp, pc}
   12b48:	movw	r0, #16832	; 0x41c0
   12b4c:	movt	r0, #3
   12b50:	ldr	r1, [r0]
   12b54:	movw	r0, #13442	; 0x3482
   12b58:	movt	r0, #2
   12b5c:	bl	114dc <fputs@plt>
   12b60:	bl	114f4 <abort@plt>
   12b64:	push	{r4, r5, r6, sl, fp, lr}
   12b68:	add	fp, sp, #16
   12b6c:	mov	r4, r0
   12b70:	movw	r0, #17816	; 0x4598
   12b74:	movt	r0, #3
   12b78:	cmp	r4, #0
   12b7c:	moveq	r4, r0
   12b80:	bl	113f8 <__errno_location@plt>
   12b84:	ldr	r6, [r0]
   12b88:	mov	r5, r0
   12b8c:	mov	r0, r4
   12b90:	mov	r1, #48	; 0x30
   12b94:	bl	21908 <__assert_fail@plt+0x103f0>
   12b98:	str	r6, [r5]
   12b9c:	pop	{r4, r5, r6, sl, fp, pc}
   12ba0:	movw	r1, #17816	; 0x4598
   12ba4:	cmp	r0, #0
   12ba8:	movt	r1, #3
   12bac:	movne	r1, r0
   12bb0:	ldr	r0, [r1]
   12bb4:	bx	lr
   12bb8:	movw	r2, #17816	; 0x4598
   12bbc:	cmp	r0, #0
   12bc0:	movt	r2, #3
   12bc4:	movne	r2, r0
   12bc8:	str	r1, [r2]
   12bcc:	bx	lr
   12bd0:	movw	r3, #17816	; 0x4598
   12bd4:	cmp	r0, #0
   12bd8:	movt	r3, #3
   12bdc:	movne	r3, r0
   12be0:	ubfx	r0, r1, #5, #3
   12be4:	and	r1, r1, #31
   12be8:	add	r0, r3, r0, lsl #2
   12bec:	ldr	r3, [r0, #8]
   12bf0:	eor	r2, r2, r3, lsr r1
   12bf4:	and	r2, r2, #1
   12bf8:	eor	r2, r3, r2, lsl r1
   12bfc:	str	r2, [r0, #8]
   12c00:	mov	r0, #1
   12c04:	and	r0, r0, r3, lsr r1
   12c08:	bx	lr
   12c0c:	movw	r2, #17816	; 0x4598
   12c10:	cmp	r0, #0
   12c14:	movt	r2, #3
   12c18:	movne	r2, r0
   12c1c:	ldr	r0, [r2, #4]
   12c20:	str	r1, [r2, #4]
   12c24:	bx	lr
   12c28:	movw	r3, #17816	; 0x4598
   12c2c:	cmp	r0, #0
   12c30:	movt	r3, #3
   12c34:	movne	r3, r0
   12c38:	cmp	r1, #0
   12c3c:	mov	r0, #10
   12c40:	cmpne	r2, #0
   12c44:	str	r0, [r3]
   12c48:	bne	12c58 <__assert_fail@plt+0x1740>
   12c4c:	push	{fp, lr}
   12c50:	mov	fp, sp
   12c54:	bl	114f4 <abort@plt>
   12c58:	str	r1, [r3, #40]	; 0x28
   12c5c:	str	r2, [r3, #44]	; 0x2c
   12c60:	bx	lr
   12c64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c68:	add	fp, sp, #28
   12c6c:	sub	sp, sp, #20
   12c70:	mov	r7, r0
   12c74:	ldr	r0, [fp, #8]
   12c78:	movw	r5, #17816	; 0x4598
   12c7c:	mov	r8, r3
   12c80:	mov	r9, r2
   12c84:	mov	sl, r1
   12c88:	movt	r5, #3
   12c8c:	cmp	r0, #0
   12c90:	movne	r5, r0
   12c94:	bl	113f8 <__errno_location@plt>
   12c98:	mov	r4, r0
   12c9c:	ldm	r5, {r0, r1}
   12ca0:	ldr	r2, [r5, #40]	; 0x28
   12ca4:	ldr	r3, [r5, #44]	; 0x2c
   12ca8:	add	r5, r5, #8
   12cac:	ldr	r6, [r4]
   12cb0:	stm	sp, {r0, r1, r5}
   12cb4:	str	r2, [sp, #12]
   12cb8:	str	r3, [sp, #16]
   12cbc:	mov	r0, r7
   12cc0:	mov	r1, sl
   12cc4:	mov	r2, r9
   12cc8:	mov	r3, r8
   12ccc:	bl	12cdc <__assert_fail@plt+0x17c4>
   12cd0:	str	r6, [r4]
   12cd4:	sub	sp, fp, #28
   12cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ce0:	add	fp, sp, #28
   12ce4:	sub	sp, sp, #156	; 0x9c
   12ce8:	str	r0, [fp, #-56]	; 0xffffffc8
   12cec:	ldr	r0, [fp, #12]
   12cf0:	mov	r4, r1
   12cf4:	str	r3, [sp, #80]	; 0x50
   12cf8:	str	r2, [fp, #-84]	; 0xffffffac
   12cfc:	and	r1, r0, #4
   12d00:	str	r1, [sp, #24]
   12d04:	and	r1, r0, #1
   12d08:	str	r1, [sp, #28]
   12d0c:	ubfx	r7, r0, #1, #1
   12d10:	bl	11350 <__ctype_get_mb_cur_max@plt>
   12d14:	str	r0, [sp, #32]
   12d18:	ldr	r0, [fp, #24]
   12d1c:	ldr	r9, [fp, #8]
   12d20:	mov	r2, #0
   12d24:	mov	r1, #0
   12d28:	mov	r5, #0
   12d2c:	str	r2, [sp, #52]	; 0x34
   12d30:	mov	r2, #1
   12d34:	str	r0, [sp, #72]	; 0x48
   12d38:	ldr	r0, [fp, #20]
   12d3c:	str	r0, [sp, #64]	; 0x40
   12d40:	mov	r0, #0
   12d44:	str	r0, [sp, #92]	; 0x5c
   12d48:	mov	r0, #0
   12d4c:	str	r0, [fp, #-76]	; 0xffffffb4
   12d50:	mov	r0, #0
   12d54:	cmp	r9, #10
   12d58:	str	r1, [sp, #68]	; 0x44
   12d5c:	bhi	13d5c <__assert_fail@plt+0x2844>
   12d60:	add	r1, pc, #28
   12d64:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d68:	ldr	lr, [sp, #80]	; 0x50
   12d6c:	mov	r6, r4
   12d70:	mov	r8, #0
   12d74:	mov	r3, #1
   12d78:	mov	sl, #0
   12d7c:	mov	r4, r2
   12d80:	ldr	pc, [r1, r9, lsl #2]
   12d84:	andeq	r2, r1, r4, asr lr
   12d88:	muleq	r1, r0, lr
   12d8c:	andeq	r2, r1, r4, ror #28
   12d90:	andeq	r2, r1, ip, asr #28
   12d94:	andeq	r2, r1, r4, lsl #29
   12d98:	ldrdeq	r2, [r1], -ip
   12d9c:	andeq	r2, r1, r4, ror lr
   12da0:	andeq	r2, r1, ip, lsr pc
   12da4:			; <UNDEFINED> instruction: 0x00012db0
   12da8:			; <UNDEFINED> instruction: 0x00012db0
   12dac:	ldrdeq	r2, [r1], -r8
   12db0:	movw	r0, #13588	; 0x3514
   12db4:	mov	r1, r9
   12db8:	movt	r0, #2
   12dbc:	bl	144c4 <__assert_fail@plt+0x2fac>
   12dc0:	str	r0, [sp, #64]	; 0x40
   12dc4:	movw	r0, #13590	; 0x3516
   12dc8:	mov	r1, r9
   12dcc:	movt	r0, #2
   12dd0:	bl	144c4 <__assert_fail@plt+0x2fac>
   12dd4:	str	r0, [sp, #72]	; 0x48
   12dd8:	mov	r8, #0
   12ddc:	mov	sl, r7
   12de0:	tst	r7, #1
   12de4:	str	r5, [fp, #-48]	; 0xffffffd0
   12de8:	bne	12e24 <__assert_fail@plt+0x190c>
   12dec:	ldr	r0, [sp, #64]	; 0x40
   12df0:	ldrb	r0, [r0]
   12df4:	cmp	r0, #0
   12df8:	beq	12e24 <__assert_fail@plt+0x190c>
   12dfc:	ldr	r1, [sp, #64]	; 0x40
   12e00:	mov	r8, #0
   12e04:	add	r1, r1, #1
   12e08:	cmp	r8, r6
   12e0c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12e10:	strbcc	r0, [r2, r8]
   12e14:	ldrb	r0, [r1, r8]
   12e18:	add	r8, r8, #1
   12e1c:	cmp	r0, #0
   12e20:	bne	12e08 <__assert_fail@plt+0x18f0>
   12e24:	ldr	r7, [sp, #72]	; 0x48
   12e28:	mov	r0, r7
   12e2c:	bl	113e0 <strlen@plt>
   12e30:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e34:	ldr	lr, [sp, #80]	; 0x50
   12e38:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12e3c:	str	r0, [fp, #-76]	; 0xffffffb4
   12e40:	str	r7, [sp, #92]	; 0x5c
   12e44:	mov	r3, #1
   12e48:	b	12f3c <__assert_fail@plt+0x1a24>
   12e4c:	mov	r0, #1
   12e50:	b	12e90 <__assert_fail@plt+0x1978>
   12e54:	mov	r9, #0
   12e58:	mov	r8, #0
   12e5c:	mov	r3, r0
   12e60:	b	12f38 <__assert_fail@plt+0x1a20>
   12e64:	tst	r7, #1
   12e68:	bne	12e90 <__assert_fail@plt+0x1978>
   12e6c:	mov	r3, r0
   12e70:	b	12eb8 <__assert_fail@plt+0x19a0>
   12e74:	mov	r0, #1
   12e78:	mov	r8, #0
   12e7c:	mov	r9, #5
   12e80:	b	12ef0 <__assert_fail@plt+0x19d8>
   12e84:	mov	r3, #1
   12e88:	tst	r7, #1
   12e8c:	beq	12eb8 <__assert_fail@plt+0x19a0>
   12e90:	mov	r1, #1
   12e94:	mov	r8, #0
   12e98:	mov	r9, #2
   12e9c:	mov	r3, r0
   12ea0:	mov	sl, #1
   12ea4:	str	r1, [fp, #-76]	; 0xffffffb4
   12ea8:	movw	r1, #13590	; 0x3516
   12eac:	movt	r1, #2
   12eb0:	str	r1, [sp, #92]	; 0x5c
   12eb4:	b	12f3c <__assert_fail@plt+0x1a24>
   12eb8:	cmp	r6, #0
   12ebc:	mov	r8, #1
   12ec0:	mov	r9, #2
   12ec4:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   12ec8:	movne	r0, #39	; 0x27
   12ecc:	strbne	r0, [r1]
   12ed0:	movw	r0, #13590	; 0x3516
   12ed4:	movt	r0, #2
   12ed8:	b	12f2c <__assert_fail@plt+0x1a14>
   12edc:	mov	r9, #5
   12ee0:	tst	r7, #1
   12ee4:	beq	12f0c <__assert_fail@plt+0x19f4>
   12ee8:	mov	r0, #1
   12eec:	mov	r8, #0
   12ef0:	str	r0, [fp, #-76]	; 0xffffffb4
   12ef4:	movw	r0, #13586	; 0x3512
   12ef8:	mov	r3, #1
   12efc:	mov	sl, #1
   12f00:	movt	r0, #2
   12f04:	str	r0, [sp, #92]	; 0x5c
   12f08:	b	12f3c <__assert_fail@plt+0x1a24>
   12f0c:	cmp	r6, #0
   12f10:	mov	r8, #1
   12f14:	mov	r3, #1
   12f18:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   12f1c:	movne	r0, #34	; 0x22
   12f20:	strbne	r0, [r1]
   12f24:	movw	r0, #13586	; 0x3512
   12f28:	movt	r0, #2
   12f2c:	str	r0, [sp, #92]	; 0x5c
   12f30:	mov	r0, #1
   12f34:	str	r0, [fp, #-76]	; 0xffffffb4
   12f38:	mov	sl, #0
   12f3c:	ldr	r0, [fp, #16]
   12f40:	mov	r7, #0
   12f44:	str	r9, [fp, #-64]	; 0xffffffc0
   12f48:	str	sl, [fp, #-72]	; 0xffffffb8
   12f4c:	str	r3, [sp, #84]	; 0x54
   12f50:	cmp	r0, #0
   12f54:	movwne	r0, #1
   12f58:	and	r0, r0, sl
   12f5c:	str	r0, [fp, #-88]	; 0xffffffa8
   12f60:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12f64:	cmp	r0, #0
   12f68:	movwne	r0, #1
   12f6c:	subs	r2, r9, #2
   12f70:	and	r1, r0, sl
   12f74:	str	r2, [fp, #-80]	; 0xffffffb0
   12f78:	and	r1, r3, r1
   12f7c:	str	r1, [sp, #44]	; 0x2c
   12f80:	clz	r1, r2
   12f84:	lsr	r1, r1, #5
   12f88:	and	r1, r1, sl
   12f8c:	str	r1, [sp, #56]	; 0x38
   12f90:	mov	r1, r2
   12f94:	eor	r2, sl, #1
   12f98:	movwne	r1, #1
   12f9c:	str	r2, [sp, #88]	; 0x58
   12fa0:	orr	r2, r1, r2
   12fa4:	and	r1, r1, r3
   12fa8:	and	r0, r0, r1
   12fac:	str	r2, [sp, #60]	; 0x3c
   12fb0:	str	r1, [fp, #-68]	; 0xffffffbc
   12fb4:	str	r0, [fp, #-60]	; 0xffffffc4
   12fb8:	eor	r0, r3, #1
   12fbc:	str	r0, [sp, #48]	; 0x30
   12fc0:	cmn	lr, #1
   12fc4:	beq	12fd4 <__assert_fail@plt+0x1abc>
   12fc8:	cmp	r7, lr
   12fcc:	bne	12fe0 <__assert_fail@plt+0x1ac8>
   12fd0:	b	13b8c <__assert_fail@plt+0x2674>
   12fd4:	ldrb	r0, [ip, r7]
   12fd8:	cmp	r0, #0
   12fdc:	beq	13b94 <__assert_fail@plt+0x267c>
   12fe0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12fe4:	mov	r9, #0
   12fe8:	str	r5, [fp, #-48]	; 0xffffffd0
   12fec:	str	r6, [fp, #-52]	; 0xffffffcc
   12ff0:	cmp	r0, #0
   12ff4:	beq	13034 <__assert_fail@plt+0x1b1c>
   12ff8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12ffc:	mov	r5, r4
   13000:	add	r4, r7, r0
   13004:	cmp	r0, #2
   13008:	bcc	13024 <__assert_fail@plt+0x1b0c>
   1300c:	cmn	lr, #1
   13010:	bne	13024 <__assert_fail@plt+0x1b0c>
   13014:	mov	r0, ip
   13018:	bl	113e0 <strlen@plt>
   1301c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13020:	mov	lr, r0
   13024:	cmp	r4, lr
   13028:	bls	1303c <__assert_fail@plt+0x1b24>
   1302c:	mov	r6, #0
   13030:	b	1307c <__assert_fail@plt+0x1b64>
   13034:	mov	r6, #0
   13038:	b	13080 <__assert_fail@plt+0x1b68>
   1303c:	ldr	r1, [sp, #92]	; 0x5c
   13040:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13044:	add	r0, ip, r7
   13048:	mov	r4, lr
   1304c:	bl	112f0 <memcmp@plt>
   13050:	ldr	r2, [sp, #88]	; 0x58
   13054:	cmp	r0, #0
   13058:	mov	r1, r0
   1305c:	movwne	r1, #1
   13060:	orr	r1, r1, r2
   13064:	tst	r1, #1
   13068:	beq	13c28 <__assert_fail@plt+0x2710>
   1306c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13070:	clz	r0, r0
   13074:	mov	lr, r4
   13078:	lsr	r6, r0, #5
   1307c:	mov	r4, r5
   13080:	ldrb	r5, [ip, r7]
   13084:	cmp	r5, #126	; 0x7e
   13088:	bhi	13450 <__assert_fail@plt+0x1f38>
   1308c:	add	r3, pc, #16
   13090:	mov	sl, #1
   13094:	mov	r2, #110	; 0x6e
   13098:	mov	r0, #97	; 0x61
   1309c:	mov	r1, #0
   130a0:	ldr	pc, [r3, r5, lsl #2]
   130a4:	andeq	r3, r1, r4, lsr r3
   130a8:	andeq	r3, r1, r0, asr r4
   130ac:	andeq	r3, r1, r0, asr r4
   130b0:	andeq	r3, r1, r0, asr r4
   130b4:	andeq	r3, r1, r0, asr r4
   130b8:	andeq	r3, r1, r0, asr r4
   130bc:	andeq	r3, r1, r0, asr r4
   130c0:	strdeq	r3, [r1], -r4
   130c4:	andeq	r3, r1, r4, lsl r3
   130c8:	andeq	r3, r1, ip, lsl #6
   130cc:	andeq	r3, r1, r0, lsr #6
   130d0:	andeq	r3, r1, r4, lsr #7
   130d4:	andeq	r3, r1, r4, lsl #6
   130d8:	andeq	r3, r1, ip, lsl r3
   130dc:	andeq	r3, r1, r0, asr r4
   130e0:	andeq	r3, r1, r0, asr r4
   130e4:	andeq	r3, r1, r0, asr r4
   130e8:	andeq	r3, r1, r0, asr r4
   130ec:	andeq	r3, r1, r0, asr r4
   130f0:	andeq	r3, r1, r0, asr r4
   130f4:	andeq	r3, r1, r0, asr r4
   130f8:	andeq	r3, r1, r0, asr r4
   130fc:	andeq	r3, r1, r0, asr r4
   13100:	andeq	r3, r1, r0, asr r4
   13104:	andeq	r3, r1, r0, asr r4
   13108:	andeq	r3, r1, r0, asr r4
   1310c:	andeq	r3, r1, r0, asr r4
   13110:	andeq	r3, r1, r0, asr r4
   13114:	andeq	r3, r1, r0, asr r4
   13118:	andeq	r3, r1, r0, asr r4
   1311c:	andeq	r3, r1, r0, asr r4
   13120:	andeq	r3, r1, r0, asr r4
   13124:			; <UNDEFINED> instruction: 0x000134b4
   13128:			; <UNDEFINED> instruction: 0x000134b8
   1312c:			; <UNDEFINED> instruction: 0x000134b8
   13130:			; <UNDEFINED> instruction: 0x000132b4
   13134:			; <UNDEFINED> instruction: 0x000134b8
   13138:	andeq	r3, r1, r0, lsr #5
   1313c:			; <UNDEFINED> instruction: 0x000134b8
   13140:	andeq	r3, r1, ip, lsr #7
   13144:			; <UNDEFINED> instruction: 0x000134b8
   13148:			; <UNDEFINED> instruction: 0x000134b8
   1314c:			; <UNDEFINED> instruction: 0x000134b8
   13150:	andeq	r3, r1, r0, lsr #5
   13154:	andeq	r3, r1, r0, lsr #5
   13158:	andeq	r3, r1, r0, lsr #5
   1315c:	andeq	r3, r1, r0, lsr #5
   13160:	andeq	r3, r1, r0, lsr #5
   13164:	andeq	r3, r1, r0, lsr #5
   13168:	andeq	r3, r1, r0, lsr #5
   1316c:	andeq	r3, r1, r0, lsr #5
   13170:	andeq	r3, r1, r0, lsr #5
   13174:	andeq	r3, r1, r0, lsr #5
   13178:	andeq	r3, r1, r0, lsr #5
   1317c:	andeq	r3, r1, r0, lsr #5
   13180:	andeq	r3, r1, r0, lsr #5
   13184:	andeq	r3, r1, r0, lsr #5
   13188:	andeq	r3, r1, r0, lsr #5
   1318c:	andeq	r3, r1, r0, lsr #5
   13190:			; <UNDEFINED> instruction: 0x000134b8
   13194:			; <UNDEFINED> instruction: 0x000134b8
   13198:			; <UNDEFINED> instruction: 0x000134b8
   1319c:			; <UNDEFINED> instruction: 0x000134b8
   131a0:	andeq	r3, r1, r8, ror r3
   131a4:	andeq	r3, r1, r0, asr r4
   131a8:	andeq	r3, r1, r0, lsr #5
   131ac:	andeq	r3, r1, r0, lsr #5
   131b0:	andeq	r3, r1, r0, lsr #5
   131b4:	andeq	r3, r1, r0, lsr #5
   131b8:	andeq	r3, r1, r0, lsr #5
   131bc:	andeq	r3, r1, r0, lsr #5
   131c0:	andeq	r3, r1, r0, lsr #5
   131c4:	andeq	r3, r1, r0, lsr #5
   131c8:	andeq	r3, r1, r0, lsr #5
   131cc:	andeq	r3, r1, r0, lsr #5
   131d0:	andeq	r3, r1, r0, lsr #5
   131d4:	andeq	r3, r1, r0, lsr #5
   131d8:	andeq	r3, r1, r0, lsr #5
   131dc:	andeq	r3, r1, r0, lsr #5
   131e0:	andeq	r3, r1, r0, lsr #5
   131e4:	andeq	r3, r1, r0, lsr #5
   131e8:	andeq	r3, r1, r0, lsr #5
   131ec:	andeq	r3, r1, r0, lsr #5
   131f0:	andeq	r3, r1, r0, lsr #5
   131f4:	andeq	r3, r1, r0, lsr #5
   131f8:	andeq	r3, r1, r0, lsr #5
   131fc:	andeq	r3, r1, r0, lsr #5
   13200:	andeq	r3, r1, r0, lsr #5
   13204:	andeq	r3, r1, r0, lsr #5
   13208:	andeq	r3, r1, r0, lsr #5
   1320c:	andeq	r3, r1, r0, lsr #5
   13210:			; <UNDEFINED> instruction: 0x000134b8
   13214:	andeq	r3, r1, r0, ror #5
   13218:	andeq	r3, r1, r0, lsr #5
   1321c:			; <UNDEFINED> instruction: 0x000134b8
   13220:	andeq	r3, r1, r0, lsr #5
   13224:			; <UNDEFINED> instruction: 0x000134b8
   13228:	andeq	r3, r1, r0, lsr #5
   1322c:	andeq	r3, r1, r0, lsr #5
   13230:	andeq	r3, r1, r0, lsr #5
   13234:	andeq	r3, r1, r0, lsr #5
   13238:	andeq	r3, r1, r0, lsr #5
   1323c:	andeq	r3, r1, r0, lsr #5
   13240:	andeq	r3, r1, r0, lsr #5
   13244:	andeq	r3, r1, r0, lsr #5
   13248:	andeq	r3, r1, r0, lsr #5
   1324c:	andeq	r3, r1, r0, lsr #5
   13250:	andeq	r3, r1, r0, lsr #5
   13254:	andeq	r3, r1, r0, lsr #5
   13258:	andeq	r3, r1, r0, lsr #5
   1325c:	andeq	r3, r1, r0, lsr #5
   13260:	andeq	r3, r1, r0, lsr #5
   13264:	andeq	r3, r1, r0, lsr #5
   13268:	andeq	r3, r1, r0, lsr #5
   1326c:	andeq	r3, r1, r0, lsr #5
   13270:	andeq	r3, r1, r0, lsr #5
   13274:	andeq	r3, r1, r0, lsr #5
   13278:	andeq	r3, r1, r0, lsr #5
   1327c:	andeq	r3, r1, r0, lsr #5
   13280:	andeq	r3, r1, r0, lsr #5
   13284:	andeq	r3, r1, r0, lsr #5
   13288:	andeq	r3, r1, r0, lsr #5
   1328c:	andeq	r3, r1, r0, lsr #5
   13290:	andeq	r3, r1, r4, asr #5
   13294:			; <UNDEFINED> instruction: 0x000134b8
   13298:	andeq	r3, r1, r4, asr #5
   1329c:			; <UNDEFINED> instruction: 0x000132b4
   132a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   132a4:	cmp	r0, #0
   132a8:	beq	13508 <__assert_fail@plt+0x1ff0>
   132ac:	ldr	r0, [fp, #16]
   132b0:	b	1350c <__assert_fail@plt+0x1ff4>
   132b4:	mov	sl, #0
   132b8:	cmp	r7, #0
   132bc:	bne	13724 <__assert_fail@plt+0x220c>
   132c0:	b	134b4 <__assert_fail@plt+0x1f9c>
   132c4:	mov	sl, #0
   132c8:	cmn	lr, #1
   132cc:	beq	134a0 <__assert_fail@plt+0x1f88>
   132d0:	cmp	r7, #0
   132d4:	cmpeq	lr, #1
   132d8:	bne	13724 <__assert_fail@plt+0x220c>
   132dc:	b	134b4 <__assert_fail@plt+0x1f9c>
   132e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   132e4:	cmp	r0, #2
   132e8:	bne	134d8 <__assert_fail@plt+0x1fc0>
   132ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132f0:	tst	r0, #1
   132f4:	bne	13c44 <__assert_fail@plt+0x272c>
   132f8:	mov	r9, #0
   132fc:	mov	r0, #92	; 0x5c
   13300:	b	134ec <__assert_fail@plt+0x1fd4>
   13304:	mov	r0, #102	; 0x66
   13308:	b	134f4 <__assert_fail@plt+0x1fdc>
   1330c:	mov	r2, #116	; 0x74
   13310:	b	13320 <__assert_fail@plt+0x1e08>
   13314:	mov	r0, #98	; 0x62
   13318:	b	134f4 <__assert_fail@plt+0x1fdc>
   1331c:	mov	r2, #114	; 0x72
   13320:	ldr	r0, [sp, #60]	; 0x3c
   13324:	tst	r0, #1
   13328:	mov	r0, r2
   1332c:	bne	134f4 <__assert_fail@plt+0x1fdc>
   13330:	b	13c44 <__assert_fail@plt+0x272c>
   13334:	ldr	r0, [sp, #84]	; 0x54
   13338:	tst	r0, #1
   1333c:	beq	135e0 <__assert_fail@plt+0x20c8>
   13340:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13344:	tst	r0, #1
   13348:	bne	13d4c <__assert_fail@plt+0x2834>
   1334c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13350:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13354:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13358:	cmp	r0, #2
   1335c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13360:	movwne	r0, #1
   13364:	orr	r0, r0, r3
   13368:	tst	r0, #1
   1336c:	beq	13a60 <__assert_fail@plt+0x2548>
   13370:	mov	r0, r8
   13374:	b	13aa0 <__assert_fail@plt+0x2588>
   13378:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1337c:	mov	r9, #0
   13380:	mov	r5, #63	; 0x3f
   13384:	cmp	r0, #5
   13388:	beq	1372c <__assert_fail@plt+0x2214>
   1338c:	cmp	r0, #2
   13390:	bne	137ec <__assert_fail@plt+0x22d4>
   13394:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13398:	tst	r0, #1
   1339c:	beq	137f0 <__assert_fail@plt+0x22d8>
   133a0:	b	13c44 <__assert_fail@plt+0x272c>
   133a4:	mov	r0, #118	; 0x76
   133a8:	b	134f4 <__assert_fail@plt+0x1fdc>
   133ac:	mov	r0, #1
   133b0:	mov	r5, #39	; 0x27
   133b4:	str	r0, [sp, #52]	; 0x34
   133b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   133bc:	cmp	r0, #2
   133c0:	bne	13448 <__assert_fail@plt+0x1f30>
   133c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   133c8:	tst	r0, #1
   133cc:	bne	13c44 <__assert_fail@plt+0x272c>
   133d0:	ldr	r3, [sp, #68]	; 0x44
   133d4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   133d8:	mov	r9, #0
   133dc:	clz	r1, r2
   133e0:	cmp	r3, #0
   133e4:	mov	r0, r3
   133e8:	movwne	r0, #1
   133ec:	lsr	r1, r1, #5
   133f0:	orrs	r0, r0, r1
   133f4:	moveq	r3, r2
   133f8:	moveq	r2, r0
   133fc:	cmp	r8, r2
   13400:	str	r3, [sp, #68]	; 0x44
   13404:	str	r2, [fp, #-52]	; 0xffffffcc
   13408:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   1340c:	movcc	r0, #39	; 0x27
   13410:	strbcc	r0, [r1, r8]
   13414:	add	r0, r8, #1
   13418:	cmp	r0, r2
   1341c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13420:	movcc	r1, #92	; 0x5c
   13424:	strbcc	r1, [r3, r0]
   13428:	add	r0, r8, #2
   1342c:	add	r8, r8, #3
   13430:	cmp	r0, r2
   13434:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13438:	movcc	r1, #39	; 0x27
   1343c:	strbcc	r1, [r2, r0]
   13440:	mov	r0, #0
   13444:	str	r0, [fp, #-48]	; 0xffffffd0
   13448:	mov	sl, #1
   1344c:	b	132a0 <__assert_fail@plt+0x1d88>
   13450:	ldr	r0, [sp, #32]
   13454:	cmp	r0, #1
   13458:	bne	13604 <__assert_fail@plt+0x20ec>
   1345c:	str	lr, [sp, #80]	; 0x50
   13460:	bl	113c8 <__ctype_b_loc@plt>
   13464:	ldr	r0, [r0]
   13468:	ldr	ip, [fp, #-84]	; 0xffffffac
   1346c:	mov	r1, #1
   13470:	add	r0, r0, r5, lsl #1
   13474:	ldrb	r0, [r0, #1]
   13478:	ubfx	sl, r0, #6, #1
   1347c:	ldr	r0, [sp, #48]	; 0x30
   13480:	mov	r2, r1
   13484:	cmp	r1, #1
   13488:	orr	r0, sl, r0
   1348c:	bhi	137f8 <__assert_fail@plt+0x22e0>
   13490:	tst	r0, #1
   13494:	beq	137f8 <__assert_fail@plt+0x22e0>
   13498:	ldr	lr, [sp, #80]	; 0x50
   1349c:	b	132a0 <__assert_fail@plt+0x1d88>
   134a0:	cmp	r7, #0
   134a4:	bne	13720 <__assert_fail@plt+0x2208>
   134a8:	ldrb	r0, [ip, #1]
   134ac:	cmp	r0, #0
   134b0:	bne	13720 <__assert_fail@plt+0x2208>
   134b4:	mov	r1, #1
   134b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   134bc:	cmp	r0, #2
   134c0:	bne	134d0 <__assert_fail@plt+0x1fb8>
   134c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   134c8:	tst	r0, #1
   134cc:	bne	13c44 <__assert_fail@plt+0x272c>
   134d0:	mov	sl, r1
   134d4:	b	132a0 <__assert_fail@plt+0x1d88>
   134d8:	ldr	r1, [sp, #44]	; 0x2c
   134dc:	mov	r9, #0
   134e0:	mov	r0, #92	; 0x5c
   134e4:	cmp	r1, #0
   134e8:	beq	134f4 <__assert_fail@plt+0x1fdc>
   134ec:	mov	sl, #0
   134f0:	b	13a0c <__assert_fail@plt+0x24f4>
   134f4:	ldr	r1, [sp, #84]	; 0x54
   134f8:	mov	sl, #0
   134fc:	mov	r9, #0
   13500:	tst	r1, #1
   13504:	bne	13540 <__assert_fail@plt+0x2028>
   13508:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1350c:	cmp	r0, #0
   13510:	mov	r0, r5
   13514:	beq	13538 <__assert_fail@plt+0x2020>
   13518:	ldr	r1, [fp, #16]
   1351c:	ubfx	r0, r5, #5, #3
   13520:	mov	r2, #1
   13524:	ldr	r0, [r1, r0, lsl #2]
   13528:	and	r1, r5, #31
   1352c:	tst	r0, r2, lsl r1
   13530:	mov	r0, r5
   13534:	bne	13540 <__assert_fail@plt+0x2028>
   13538:	cmp	r6, #0
   1353c:	beq	13a0c <__assert_fail@plt+0x24f4>
   13540:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13544:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13548:	tst	r1, #1
   1354c:	bne	13c20 <__assert_fail@plt+0x2708>
   13550:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13554:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13558:	cmp	r1, #2
   1355c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13560:	movwne	r1, #1
   13564:	orr	r1, r1, r5
   13568:	tst	r1, #1
   1356c:	bne	135b0 <__assert_fail@plt+0x2098>
   13570:	cmp	r8, r6
   13574:	mov	r5, #1
   13578:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1357c:	movcc	r1, #39	; 0x27
   13580:	strbcc	r1, [r2, r8]
   13584:	add	r1, r8, #1
   13588:	cmp	r1, r6
   1358c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13590:	movcc	r2, #36	; 0x24
   13594:	strbcc	r2, [r3, r1]
   13598:	add	r1, r8, #2
   1359c:	add	r8, r8, #3
   135a0:	cmp	r1, r6
   135a4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   135a8:	movcc	r2, #39	; 0x27
   135ac:	strbcc	r2, [r3, r1]
   135b0:	cmp	r8, r6
   135b4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   135b8:	movcc	r1, #92	; 0x5c
   135bc:	strbcc	r1, [r2, r8]
   135c0:	add	r8, r8, #1
   135c4:	cmp	r8, r6
   135c8:	and	r4, r4, sl
   135cc:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   135d0:	strbcc	r0, [r1, r8]
   135d4:	add	r8, r8, #1
   135d8:	add	r7, r7, #1
   135dc:	b	12fc0 <__assert_fail@plt+0x1aa8>
   135e0:	ldr	r0, [sp, #28]
   135e4:	mov	sl, #0
   135e8:	mov	r9, #0
   135ec:	mov	r5, #0
   135f0:	cmp	r0, #0
   135f4:	beq	13508 <__assert_fail@plt+0x1ff0>
   135f8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   135fc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13600:	b	135d8 <__assert_fail@plt+0x20c0>
   13604:	mov	r0, #0
   13608:	cmn	lr, #1
   1360c:	str	r6, [sp, #76]	; 0x4c
   13610:	str	r4, [sp, #20]
   13614:	str	r0, [fp, #-36]	; 0xffffffdc
   13618:	str	r0, [fp, #-40]	; 0xffffffd8
   1361c:	bne	13630 <__assert_fail@plt+0x2118>
   13620:	mov	r0, ip
   13624:	bl	113e0 <strlen@plt>
   13628:	ldr	ip, [fp, #-84]	; 0xffffffac
   1362c:	mov	lr, r0
   13630:	add	r0, ip, r7
   13634:	mov	sl, #1
   13638:	mov	r6, #0
   1363c:	sub	r4, fp, #40	; 0x28
   13640:	str	lr, [sp, #80]	; 0x50
   13644:	str	r0, [sp, #36]	; 0x24
   13648:	str	r6, [sp, #40]	; 0x28
   1364c:	add	r6, r6, r7
   13650:	sub	r0, fp, #44	; 0x2c
   13654:	mov	r3, r4
   13658:	add	r1, ip, r6
   1365c:	sub	r2, lr, r6
   13660:	bl	2243c <__assert_fail@plt+0x10f24>
   13664:	cmp	r0, #0
   13668:	beq	13b74 <__assert_fail@plt+0x265c>
   1366c:	cmn	r0, #1
   13670:	beq	13b34 <__assert_fail@plt+0x261c>
   13674:	ldr	lr, [sp, #80]	; 0x50
   13678:	cmn	r0, #2
   1367c:	beq	13b3c <__assert_fail@plt+0x2624>
   13680:	ldr	r2, [sp, #56]	; 0x38
   13684:	cmp	r0, #2
   13688:	mov	r1, #0
   1368c:	movwcc	r1, #1
   13690:	eor	r2, r2, #1
   13694:	orrs	r1, r2, r1
   13698:	bne	136e4 <__assert_fail@plt+0x21cc>
   1369c:	ldr	r1, [sp, #40]	; 0x28
   136a0:	ldr	r2, [sp, #36]	; 0x24
   136a4:	add	ip, r2, r1
   136a8:	mov	r2, #1
   136ac:	ldrb	r3, [ip, r2]
   136b0:	sub	r6, r3, #94	; 0x5e
   136b4:	cmp	r6, #30
   136b8:	bhi	136cc <__assert_fail@plt+0x21b4>
   136bc:	mov	r4, #1
   136c0:	mov	r1, #1073741829	; 0x40000005
   136c4:	tst	r1, r4, lsl r6
   136c8:	bne	13c40 <__assert_fail@plt+0x2728>
   136cc:	sub	r3, r3, #91	; 0x5b
   136d0:	cmp	r3, #2
   136d4:	bcc	13c40 <__assert_fail@plt+0x2728>
   136d8:	add	r2, r2, #1
   136dc:	cmp	r2, r0
   136e0:	bcc	136ac <__assert_fail@plt+0x2194>
   136e4:	ldr	r6, [sp, #40]	; 0x28
   136e8:	add	r6, r0, r6
   136ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   136f0:	bl	11338 <iswprint@plt>
   136f4:	cmp	r0, #0
   136f8:	sub	r4, fp, #40	; 0x28
   136fc:	movwne	r0, #1
   13700:	and	sl, sl, r0
   13704:	mov	r0, r4
   13708:	bl	112d8 <mbsinit@plt>
   1370c:	ldr	lr, [sp, #80]	; 0x50
   13710:	ldr	ip, [fp, #-84]	; 0xffffffac
   13714:	cmp	r0, #0
   13718:	beq	13648 <__assert_fail@plt+0x2130>
   1371c:	b	13b7c <__assert_fail@plt+0x2664>
   13720:	mvn	lr, #0
   13724:	mov	r9, #0
   13728:	b	132a0 <__assert_fail@plt+0x1d88>
   1372c:	ldr	r0, [sp, #24]
   13730:	cmp	r0, #0
   13734:	beq	137ec <__assert_fail@plt+0x22d4>
   13738:	add	r0, r7, #2
   1373c:	cmp	r0, lr
   13740:	bcs	137ec <__assert_fail@plt+0x22d4>
   13744:	add	r1, ip, r7
   13748:	ldrb	r1, [r1, #1]
   1374c:	cmp	r1, #63	; 0x3f
   13750:	bne	137ec <__assert_fail@plt+0x22d4>
   13754:	ldrb	r5, [ip, r0]
   13758:	sub	r1, r5, #33	; 0x21
   1375c:	cmp	r1, #29
   13760:	bhi	137ec <__assert_fail@plt+0x22d4>
   13764:	movw	r3, #20929	; 0x51c1
   13768:	mov	r2, #1
   1376c:	movt	r3, #14336	; 0x3800
   13770:	tst	r3, r2, lsl r1
   13774:	beq	137ec <__assert_fail@plt+0x22d4>
   13778:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1377c:	tst	r1, #1
   13780:	bne	13d54 <__assert_fail@plt+0x283c>
   13784:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13788:	mov	r7, r0
   1378c:	cmp	r8, r1
   13790:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13794:	movcc	r1, #63	; 0x3f
   13798:	strbcc	r1, [r2, r8]
   1379c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   137a0:	add	r1, r8, #1
   137a4:	cmp	r1, r2
   137a8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   137ac:	movcc	r2, #34	; 0x22
   137b0:	strbcc	r2, [r3, r1]
   137b4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   137b8:	add	r1, r8, #2
   137bc:	cmp	r1, r2
   137c0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   137c4:	movcc	r2, #34	; 0x22
   137c8:	strbcc	r2, [r3, r1]
   137cc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   137d0:	add	r1, r8, #3
   137d4:	add	r8, r8, #4
   137d8:	cmp	r1, r2
   137dc:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   137e0:	movcc	r2, #63	; 0x3f
   137e4:	strbcc	r2, [r3, r1]
   137e8:	b	137f0 <__assert_fail@plt+0x22d8>
   137ec:	mov	r5, #63	; 0x3f
   137f0:	mov	sl, #0
   137f4:	b	132a0 <__assert_fail@plt+0x1d88>
   137f8:	str	r0, [sp, #40]	; 0x28
   137fc:	add	r0, r2, r7
   13800:	str	r6, [sp, #76]	; 0x4c
   13804:	add	r1, r7, #1
   13808:	ldr	lr, [sp, #80]	; 0x50
   1380c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13810:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13814:	mov	r3, #0
   13818:	str	r0, [sp, #36]	; 0x24
   1381c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13820:	b	138b4 <__assert_fail@plt+0x239c>
   13824:	str	r0, [sp, #76]	; 0x4c
   13828:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1382c:	cmp	r9, #0
   13830:	movwne	r9, #1
   13834:	mvn	r7, r0
   13838:	orr	r7, r7, r9
   1383c:	tst	r7, #1
   13840:	bne	13890 <__assert_fail@plt+0x2378>
   13844:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13848:	cmp	r8, r6
   1384c:	bcs	13864 <__assert_fail@plt+0x234c>
   13850:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13854:	mov	r2, r4
   13858:	mov	r4, #39	; 0x27
   1385c:	strb	r4, [r7, r8]
   13860:	mov	r4, r2
   13864:	add	r7, r8, #1
   13868:	cmp	r7, r6
   1386c:	bcs	13884 <__assert_fail@plt+0x236c>
   13870:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13874:	mov	r2, r4
   13878:	mov	r4, #39	; 0x27
   1387c:	strb	r4, [r0, r7]
   13880:	mov	r4, r2
   13884:	add	r8, r8, #2
   13888:	mov	r0, #0
   1388c:	b	13898 <__assert_fail@plt+0x2380>
   13890:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13894:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13898:	cmp	r8, r6
   1389c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   138a0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   138a4:	strbcc	r5, [r2, r8]
   138a8:	add	r8, r8, #1
   138ac:	ldrb	r5, [ip, r1]
   138b0:	add	r1, r1, #1
   138b4:	ldr	r2, [sp, #40]	; 0x28
   138b8:	tst	r2, #1
   138bc:	beq	138f8 <__assert_fail@plt+0x23e0>
   138c0:	ldr	r2, [sp, #76]	; 0x4c
   138c4:	str	r0, [fp, #-48]	; 0xffffffd0
   138c8:	tst	r2, #1
   138cc:	beq	138f0 <__assert_fail@plt+0x23d8>
   138d0:	cmp	r8, r6
   138d4:	bcs	138ec <__assert_fail@plt+0x23d4>
   138d8:	ldr	r6, [fp, #-56]	; 0xffffffc8
   138dc:	mov	r2, r4
   138e0:	mov	r4, #92	; 0x5c
   138e4:	strb	r4, [r6, r8]
   138e8:	mov	r4, r2
   138ec:	add	r8, r8, #1
   138f0:	mov	r0, #0
   138f4:	b	139ec <__assert_fail@plt+0x24d4>
   138f8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   138fc:	tst	r2, #1
   13900:	bne	13c4c <__assert_fail@plt+0x2734>
   13904:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13908:	cmp	r7, #2
   1390c:	movwne	r3, #1
   13910:	orr	r3, r3, r0
   13914:	tst	r3, #1
   13918:	bne	13974 <__assert_fail@plt+0x245c>
   1391c:	cmp	r8, r6
   13920:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13924:	movcc	r3, #39	; 0x27
   13928:	strbcc	r3, [r2, r8]
   1392c:	add	r3, r8, #1
   13930:	cmp	r3, r6
   13934:	bcs	1394c <__assert_fail@plt+0x2434>
   13938:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1393c:	mov	r7, r4
   13940:	mov	r4, #36	; 0x24
   13944:	strb	r4, [r2, r3]
   13948:	mov	r4, r7
   1394c:	add	r3, r8, #2
   13950:	cmp	r3, r6
   13954:	bcs	1396c <__assert_fail@plt+0x2454>
   13958:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1395c:	mov	r7, r4
   13960:	mov	r4, #39	; 0x27
   13964:	strb	r4, [r2, r3]
   13968:	mov	r4, r7
   1396c:	add	r8, r8, #3
   13970:	mov	r0, #1
   13974:	cmp	r8, r6
   13978:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1397c:	movcc	r3, #92	; 0x5c
   13980:	strbcc	r3, [r2, r8]
   13984:	add	r3, r8, #1
   13988:	cmp	r3, r6
   1398c:	bcs	139ac <__assert_fail@plt+0x2494>
   13990:	mov	r2, r4
   13994:	and	r7, r5, #192	; 0xc0
   13998:	mov	r4, #48	; 0x30
   1399c:	orr	r7, r4, r7, lsr #6
   139a0:	mov	r4, r2
   139a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   139a8:	strb	r7, [r2, r3]
   139ac:	add	r3, r8, #2
   139b0:	cmp	r3, r6
   139b4:	bcs	139d4 <__assert_fail@plt+0x24bc>
   139b8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   139bc:	mov	r6, r4
   139c0:	lsr	r7, r5, #3
   139c4:	mov	r4, #6
   139c8:	bfi	r7, r4, #3, #29
   139cc:	mov	r4, r6
   139d0:	strb	r7, [r2, r3]
   139d4:	str	r0, [fp, #-48]	; 0xffffffd0
   139d8:	ldr	r0, [sp, #76]	; 0x4c
   139dc:	mov	r3, #6
   139e0:	add	r8, r8, #3
   139e4:	bfi	r5, r3, #3, #29
   139e8:	mov	r3, #1
   139ec:	ldr	r2, [sp, #36]	; 0x24
   139f0:	and	r9, r3, #1
   139f4:	cmp	r2, r1
   139f8:	bhi	13824 <__assert_fail@plt+0x230c>
   139fc:	cmp	r9, #0
   13a00:	sub	r7, r1, #1
   13a04:	mov	r0, r5
   13a08:	movwne	r9, #1
   13a0c:	cmp	r9, #0
   13a10:	bne	13a54 <__assert_fail@plt+0x253c>
   13a14:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13a18:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13a1c:	tst	r5, #1
   13a20:	beq	135c4 <__assert_fail@plt+0x20ac>
   13a24:	cmp	r8, r6
   13a28:	mov	r5, #0
   13a2c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13a30:	movcc	r1, #39	; 0x27
   13a34:	strbcc	r1, [r2, r8]
   13a38:	add	r1, r8, #1
   13a3c:	add	r8, r8, #2
   13a40:	cmp	r1, r6
   13a44:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13a48:	movcc	r2, #39	; 0x27
   13a4c:	strbcc	r2, [r3, r1]
   13a50:	b	135c4 <__assert_fail@plt+0x20ac>
   13a54:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13a58:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13a5c:	b	135c4 <__assert_fail@plt+0x20ac>
   13a60:	cmp	r8, r1
   13a64:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13a68:	movcc	r0, #39	; 0x27
   13a6c:	strbcc	r0, [r2, r8]
   13a70:	add	r0, r8, #1
   13a74:	cmp	r0, r1
   13a78:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13a7c:	movcc	r2, #36	; 0x24
   13a80:	strbcc	r2, [r3, r0]
   13a84:	add	r0, r8, #2
   13a88:	cmp	r0, r1
   13a8c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13a90:	movcc	r2, #39	; 0x27
   13a94:	strbcc	r2, [r3, r0]
   13a98:	add	r0, r8, #3
   13a9c:	mov	r3, #1
   13aa0:	cmp	r0, r1
   13aa4:	add	r8, r0, #1
   13aa8:	str	r3, [fp, #-48]	; 0xffffffd0
   13aac:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13ab0:	movcc	r1, #92	; 0x5c
   13ab4:	strbcc	r1, [r2, r0]
   13ab8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13abc:	cmp	r1, #2
   13ac0:	beq	13b24 <__assert_fail@plt+0x260c>
   13ac4:	add	r1, r7, #1
   13ac8:	mov	sl, #0
   13acc:	mov	r9, #1
   13ad0:	mov	r5, #48	; 0x30
   13ad4:	cmp	r1, lr
   13ad8:	bcs	132a0 <__assert_fail@plt+0x1d88>
   13adc:	ldrb	r1, [ip, r1]
   13ae0:	sub	r1, r1, #48	; 0x30
   13ae4:	uxtb	r1, r1
   13ae8:	cmp	r1, #9
   13aec:	bhi	132a0 <__assert_fail@plt+0x1d88>
   13af0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13af4:	cmp	r8, r1
   13af8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13afc:	movcc	r1, #48	; 0x30
   13b00:	strbcc	r1, [r2, r8]
   13b04:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13b08:	add	r1, r0, #2
   13b0c:	add	r8, r0, #3
   13b10:	cmp	r1, r2
   13b14:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13b18:	movcc	r2, #48	; 0x30
   13b1c:	strbcc	r2, [r3, r1]
   13b20:	b	132a0 <__assert_fail@plt+0x1d88>
   13b24:	mov	r0, #48	; 0x30
   13b28:	mov	r9, #1
   13b2c:	mov	sl, #0
   13b30:	b	13538 <__assert_fail@plt+0x2020>
   13b34:	mov	sl, #0
   13b38:	b	13b74 <__assert_fail@plt+0x265c>
   13b3c:	mov	sl, #0
   13b40:	cmp	lr, r6
   13b44:	bls	13b74 <__assert_fail@plt+0x265c>
   13b48:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b4c:	ldr	r6, [sp, #40]	; 0x28
   13b50:	ldr	r0, [sp, #36]	; 0x24
   13b54:	ldrb	r0, [r0, r6]
   13b58:	cmp	r0, #0
   13b5c:	beq	13b7c <__assert_fail@plt+0x2664>
   13b60:	add	r6, r6, #1
   13b64:	add	r0, r7, r6
   13b68:	cmp	r0, lr
   13b6c:	bcc	13b50 <__assert_fail@plt+0x2638>
   13b70:	b	13b7c <__assert_fail@plt+0x2664>
   13b74:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b78:	ldr	r6, [sp, #40]	; 0x28
   13b7c:	mov	r1, r6
   13b80:	ldr	r4, [sp, #20]
   13b84:	ldr	r6, [sp, #76]	; 0x4c
   13b88:	b	1347c <__assert_fail@plt+0x1f64>
   13b8c:	mov	lr, r7
   13b90:	b	13b98 <__assert_fail@plt+0x2680>
   13b94:	mvn	lr, #0
   13b98:	ldr	r9, [fp, #-64]	; 0xffffffc0
   13b9c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13ba0:	eor	r0, r9, #2
   13ba4:	orr	r0, r0, r8
   13ba8:	clz	r0, r0
   13bac:	lsr	r0, r0, #5
   13bb0:	tst	r1, r0
   13bb4:	bne	13cb0 <__assert_fail@plt+0x2798>
   13bb8:	mov	r0, r1
   13bbc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13bc0:	cmp	r9, #2
   13bc4:	movwne	r1, #1
   13bc8:	orr	r0, r0, r1
   13bcc:	tst	r0, #1
   13bd0:	bne	13cf0 <__assert_fail@plt+0x27d8>
   13bd4:	ldr	r0, [sp, #52]	; 0x34
   13bd8:	ldr	r1, [sp, #68]	; 0x44
   13bdc:	str	lr, [sp, #80]	; 0x50
   13be0:	eor	r0, r0, #1
   13be4:	tst	r0, #1
   13be8:	bne	13cf0 <__assert_fail@plt+0x27d8>
   13bec:	tst	r4, #1
   13bf0:	bne	13cb8 <__assert_fail@plt+0x27a0>
   13bf4:	mov	r7, #0
   13bf8:	cmp	r1, #0
   13bfc:	beq	13ce8 <__assert_fail@plt+0x27d0>
   13c00:	ldr	r0, [sp, #84]	; 0x54
   13c04:	mov	r3, #0
   13c08:	cmp	r6, #0
   13c0c:	mov	r2, #0
   13c10:	mov	r4, r1
   13c14:	str	r3, [fp, #-72]	; 0xffffffb8
   13c18:	beq	12d54 <__assert_fail@plt+0x183c>
   13c1c:	b	13cf0 <__assert_fail@plt+0x27d8>
   13c20:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13c24:	b	13c4c <__assert_fail@plt+0x2734>
   13c28:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c2c:	mov	r2, #1
   13c30:	mov	lr, r4
   13c34:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13c38:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13c3c:	b	13c50 <__assert_fail@plt+0x2738>
   13c40:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c44:	mov	r7, #2
   13c48:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13c4c:	ldr	r2, [sp, #84]	; 0x54
   13c50:	mov	r0, #0
   13c54:	ldr	r1, [fp, #12]
   13c58:	tst	r2, #1
   13c5c:	mov	r2, r7
   13c60:	mov	r3, lr
   13c64:	str	r0, [sp, #8]
   13c68:	ldr	r0, [sp, #64]	; 0x40
   13c6c:	movwne	r2, #4
   13c70:	cmp	r7, #2
   13c74:	movne	r2, r7
   13c78:	str	r2, [sp]
   13c7c:	mov	r2, ip
   13c80:	bic	r1, r1, #2
   13c84:	str	r0, [sp, #12]
   13c88:	ldr	r0, [sp, #72]	; 0x48
   13c8c:	str	r1, [sp, #4]
   13c90:	mov	r1, r6
   13c94:	str	r0, [sp, #16]
   13c98:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13c9c:	bl	12cdc <__assert_fail@plt+0x17c4>
   13ca0:	mov	r8, r0
   13ca4:	mov	r0, r8
   13ca8:	sub	sp, fp, #28
   13cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cb0:	mov	r7, #2
   13cb4:	b	13c4c <__assert_fail@plt+0x2734>
   13cb8:	mov	r0, #5
   13cbc:	ldr	r2, [fp, #-84]	; 0xffffffac
   13cc0:	ldr	r3, [sp, #80]	; 0x50
   13cc4:	str	r0, [sp]
   13cc8:	ldr	r0, [fp, #12]
   13ccc:	str	r0, [sp, #4]
   13cd0:	ldr	r0, [fp, #16]
   13cd4:	str	r0, [sp, #8]
   13cd8:	ldr	r0, [sp, #64]	; 0x40
   13cdc:	str	r0, [sp, #12]
   13ce0:	ldr	r0, [sp, #72]	; 0x48
   13ce4:	b	13c94 <__assert_fail@plt+0x277c>
   13ce8:	mov	r0, #0
   13cec:	str	r0, [fp, #-72]	; 0xffffffb8
   13cf0:	ldr	r1, [sp, #92]	; 0x5c
   13cf4:	cmp	r1, #0
   13cf8:	beq	13d38 <__assert_fail@plt+0x2820>
   13cfc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13d00:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13d04:	tst	r0, #1
   13d08:	bne	13d3c <__assert_fail@plt+0x2824>
   13d0c:	ldrb	r0, [r1]
   13d10:	cmp	r0, #0
   13d14:	beq	13d3c <__assert_fail@plt+0x2824>
   13d18:	add	r1, r1, #1
   13d1c:	cmp	r8, r6
   13d20:	strbcc	r0, [r2, r8]
   13d24:	add	r8, r8, #1
   13d28:	ldrb	r0, [r1], #1
   13d2c:	cmp	r0, #0
   13d30:	bne	13d1c <__assert_fail@plt+0x2804>
   13d34:	b	13d3c <__assert_fail@plt+0x2824>
   13d38:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13d3c:	cmp	r8, r6
   13d40:	movcc	r0, #0
   13d44:	strbcc	r0, [r2, r8]
   13d48:	b	13ca4 <__assert_fail@plt+0x278c>
   13d4c:	mov	r2, #1
   13d50:	b	13c34 <__assert_fail@plt+0x271c>
   13d54:	mov	r7, #5
   13d58:	b	13c48 <__assert_fail@plt+0x2730>
   13d5c:	bl	114f4 <abort@plt>
   13d60:	mov	r3, r2
   13d64:	mov	r2, #0
   13d68:	b	13d6c <__assert_fail@plt+0x2854>
   13d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d70:	add	fp, sp, #28
   13d74:	sub	sp, sp, #36	; 0x24
   13d78:	movw	r8, #17816	; 0x4598
   13d7c:	cmp	r3, #0
   13d80:	mov	r4, r2
   13d84:	str	r2, [sp, #24]
   13d88:	mov	r5, r1
   13d8c:	mov	r6, r0
   13d90:	str	r0, [sp, #20]
   13d94:	movt	r8, #3
   13d98:	movne	r8, r3
   13d9c:	bl	113f8 <__errno_location@plt>
   13da0:	str	r0, [sp, #28]
   13da4:	cmp	r4, #0
   13da8:	add	sl, r8, #8
   13dac:	ldm	r8, {r3, r9}
   13db0:	ldr	r7, [r0]
   13db4:	ldr	r1, [r8, #40]	; 0x28
   13db8:	ldr	r2, [r8, #44]	; 0x2c
   13dbc:	mov	r0, #0
   13dc0:	orreq	r9, r9, #1
   13dc4:	str	r7, [sp, #32]
   13dc8:	mov	r7, r5
   13dcc:	stm	sp, {r3, r9, sl}
   13dd0:	str	r1, [sp, #12]
   13dd4:	str	r2, [sp, #16]
   13dd8:	mov	r1, #0
   13ddc:	mov	r2, r6
   13de0:	mov	r3, r5
   13de4:	bl	12cdc <__assert_fail@plt+0x17c4>
   13de8:	add	r4, r0, #1
   13dec:	mov	r5, r0
   13df0:	mov	r0, r4
   13df4:	bl	215e8 <__assert_fail@plt+0x100d0>
   13df8:	mov	r6, r0
   13dfc:	ldr	r0, [r8]
   13e00:	ldr	r2, [r8, #44]	; 0x2c
   13e04:	ldr	r1, [r8, #40]	; 0x28
   13e08:	mov	r3, r7
   13e0c:	stm	sp, {r0, r9, sl}
   13e10:	str	r2, [sp, #16]
   13e14:	str	r1, [sp, #12]
   13e18:	mov	r0, r6
   13e1c:	mov	r1, r4
   13e20:	ldr	r2, [sp, #20]
   13e24:	bl	12cdc <__assert_fail@plt+0x17c4>
   13e28:	ldr	r0, [sp, #24]
   13e2c:	ldr	r1, [sp, #32]
   13e30:	ldr	r2, [sp, #28]
   13e34:	cmp	r0, #0
   13e38:	str	r1, [r2]
   13e3c:	strne	r5, [r0]
   13e40:	mov	r0, r6
   13e44:	sub	sp, fp, #28
   13e48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e50:	add	fp, sp, #24
   13e54:	movw	r5, #16756	; 0x4174
   13e58:	movw	r8, #16752	; 0x4170
   13e5c:	movt	r5, #3
   13e60:	movt	r8, #3
   13e64:	ldr	r0, [r5]
   13e68:	ldr	r4, [r8]
   13e6c:	cmp	r0, #2
   13e70:	blt	13e9c <__assert_fail@plt+0x2984>
   13e74:	add	r7, r4, #12
   13e78:	mov	r6, #0
   13e7c:	ldr	r0, [r7, r6, lsl #3]
   13e80:	bl	223dc <__assert_fail@plt+0x10ec4>
   13e84:	ldr	r1, [r5]
   13e88:	add	r2, r6, #2
   13e8c:	add	r0, r6, #1
   13e90:	mov	r6, r0
   13e94:	cmp	r2, r1
   13e98:	blt	13e7c <__assert_fail@plt+0x2964>
   13e9c:	ldr	r0, [r4, #4]
   13ea0:	movw	r7, #17864	; 0x45c8
   13ea4:	movt	r7, #3
   13ea8:	cmp	r0, r7
   13eac:	beq	13ec4 <__assert_fail@plt+0x29ac>
   13eb0:	bl	223dc <__assert_fail@plt+0x10ec4>
   13eb4:	movw	r0, #16760	; 0x4178
   13eb8:	mov	r6, #256	; 0x100
   13ebc:	movt	r0, #3
   13ec0:	strd	r6, [r0]
   13ec4:	movw	r6, #16760	; 0x4178
   13ec8:	movt	r6, #3
   13ecc:	cmp	r4, r6
   13ed0:	beq	13ee0 <__assert_fail@plt+0x29c8>
   13ed4:	mov	r0, r4
   13ed8:	bl	223dc <__assert_fail@plt+0x10ec4>
   13edc:	str	r6, [r8]
   13ee0:	mov	r0, #1
   13ee4:	str	r0, [r5]
   13ee8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13eec:	movw	r3, #17816	; 0x4598
   13ef0:	mvn	r2, #0
   13ef4:	movt	r3, #3
   13ef8:	b	13efc <__assert_fail@plt+0x29e4>
   13efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f00:	add	fp, sp, #28
   13f04:	sub	sp, sp, #44	; 0x2c
   13f08:	mov	r7, r3
   13f0c:	str	r2, [sp, #36]	; 0x24
   13f10:	str	r1, [sp, #32]
   13f14:	mov	r5, r0
   13f18:	bl	113f8 <__errno_location@plt>
   13f1c:	cmp	r5, #0
   13f20:	blt	1408c <__assert_fail@plt+0x2b74>
   13f24:	cmn	r5, #-2147483647	; 0x80000001
   13f28:	beq	1408c <__assert_fail@plt+0x2b74>
   13f2c:	movw	r8, #16756	; 0x4174
   13f30:	movw	r4, #16752	; 0x4170
   13f34:	str	r0, [sp, #28]
   13f38:	ldr	r0, [r0]
   13f3c:	movt	r8, #3
   13f40:	movt	r4, #3
   13f44:	ldr	r1, [r8]
   13f48:	ldr	r6, [r4]
   13f4c:	str	r0, [sp, #24]
   13f50:	cmp	r1, r5
   13f54:	ble	13f60 <__assert_fail@plt+0x2a48>
   13f58:	mov	sl, r6
   13f5c:	b	13fc8 <__assert_fail@plt+0x2ab0>
   13f60:	movw	r9, #16760	; 0x4178
   13f64:	mov	r0, #8
   13f68:	add	r2, r5, #1
   13f6c:	str	r1, [fp, #-32]	; 0xffffffe0
   13f70:	mvn	r3, #-2147483648	; 0x80000000
   13f74:	movt	r9, #3
   13f78:	str	r0, [sp]
   13f7c:	sub	r2, r2, r1
   13f80:	sub	r1, fp, #32
   13f84:	subs	r0, r6, r9
   13f88:	movne	r0, r6
   13f8c:	bl	21718 <__assert_fail@plt+0x10200>
   13f90:	cmp	r6, r9
   13f94:	mov	sl, r0
   13f98:	str	r0, [r4]
   13f9c:	ldrdeq	r0, [r9]
   13fa0:	stmeq	sl, {r0, r1}
   13fa4:	ldr	r1, [r8]
   13fa8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13fac:	add	r0, sl, r1, lsl #3
   13fb0:	sub	r1, r2, r1
   13fb4:	lsl	r2, r1, #3
   13fb8:	mov	r1, #0
   13fbc:	bl	1141c <memset@plt>
   13fc0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13fc4:	str	r0, [r8]
   13fc8:	mov	r9, sl
   13fcc:	ldr	r6, [r9, r5, lsl #3]!
   13fd0:	ldr	r4, [r9, #4]!
   13fd4:	ldm	r7, {r0, r1}
   13fd8:	ldr	r2, [r7, #40]	; 0x28
   13fdc:	ldr	r3, [r7, #44]	; 0x2c
   13fe0:	orr	r8, r1, #1
   13fe4:	add	r1, r7, #8
   13fe8:	stm	sp, {r0, r8}
   13fec:	add	r0, sp, #8
   13ff0:	str	r1, [sp, #20]
   13ff4:	stm	r0, {r1, r2, r3}
   13ff8:	mov	r0, r4
   13ffc:	mov	r1, r6
   14000:	ldr	r2, [sp, #32]
   14004:	ldr	r3, [sp, #36]	; 0x24
   14008:	bl	12cdc <__assert_fail@plt+0x17c4>
   1400c:	cmp	r6, r0
   14010:	bhi	14074 <__assert_fail@plt+0x2b5c>
   14014:	add	r6, r0, #1
   14018:	movw	r0, #17864	; 0x45c8
   1401c:	movt	r0, #3
   14020:	str	r6, [sl, r5, lsl #3]
   14024:	cmp	r4, r0
   14028:	beq	14034 <__assert_fail@plt+0x2b1c>
   1402c:	mov	r0, r4
   14030:	bl	223dc <__assert_fail@plt+0x10ec4>
   14034:	mov	r0, r6
   14038:	bl	215e8 <__assert_fail@plt+0x100d0>
   1403c:	str	r0, [r9]
   14040:	mov	r4, r0
   14044:	add	r3, sp, #8
   14048:	ldr	r0, [r7]
   1404c:	ldr	r1, [r7, #40]	; 0x28
   14050:	ldr	r2, [r7, #44]	; 0x2c
   14054:	stm	sp, {r0, r8}
   14058:	ldr	r0, [sp, #20]
   1405c:	stm	r3, {r0, r1, r2}
   14060:	mov	r0, r4
   14064:	mov	r1, r6
   14068:	ldr	r2, [sp, #32]
   1406c:	ldr	r3, [sp, #36]	; 0x24
   14070:	bl	12cdc <__assert_fail@plt+0x17c4>
   14074:	ldr	r0, [sp, #28]
   14078:	ldr	r1, [sp, #24]
   1407c:	str	r1, [r0]
   14080:	mov	r0, r4
   14084:	sub	sp, fp, #28
   14088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1408c:	bl	114f4 <abort@plt>
   14090:	movw	r3, #17816	; 0x4598
   14094:	movt	r3, #3
   14098:	b	13efc <__assert_fail@plt+0x29e4>
   1409c:	movw	r3, #17816	; 0x4598
   140a0:	mov	r1, r0
   140a4:	mov	r0, #0
   140a8:	mvn	r2, #0
   140ac:	movt	r3, #3
   140b0:	b	13efc <__assert_fail@plt+0x29e4>
   140b4:	movw	r3, #17816	; 0x4598
   140b8:	mov	r2, r1
   140bc:	mov	r1, r0
   140c0:	mov	r0, #0
   140c4:	movt	r3, #3
   140c8:	b	13efc <__assert_fail@plt+0x29e4>
   140cc:	push	{fp, lr}
   140d0:	mov	fp, sp
   140d4:	sub	sp, sp, #48	; 0x30
   140d8:	vmov.i32	q8, #0	; 0x00000000
   140dc:	mov	ip, #32
   140e0:	mov	r3, sp
   140e4:	mov	lr, r2
   140e8:	cmp	r1, #10
   140ec:	add	r2, r3, #16
   140f0:	vst1.64	{d16-d17}, [r3], ip
   140f4:	vst1.64	{d16-d17}, [r3]
   140f8:	vst1.64	{d16-d17}, [r2]
   140fc:	beq	1411c <__assert_fail@plt+0x2c04>
   14100:	str	r1, [sp]
   14104:	mov	r3, sp
   14108:	mov	r1, lr
   1410c:	mvn	r2, #0
   14110:	bl	13efc <__assert_fail@plt+0x29e4>
   14114:	mov	sp, fp
   14118:	pop	{fp, pc}
   1411c:	bl	114f4 <abort@plt>
   14120:	push	{r4, sl, fp, lr}
   14124:	add	fp, sp, #8
   14128:	sub	sp, sp, #48	; 0x30
   1412c:	mov	ip, r3
   14130:	mov	r3, sp
   14134:	vmov.i32	q8, #0	; 0x00000000
   14138:	mov	lr, #32
   1413c:	cmp	r1, #10
   14140:	add	r4, r3, #16
   14144:	vst1.64	{d16-d17}, [r3], lr
   14148:	vst1.64	{d16-d17}, [r3]
   1414c:	vst1.64	{d16-d17}, [r4]
   14150:	beq	14170 <__assert_fail@plt+0x2c58>
   14154:	str	r1, [sp]
   14158:	mov	r1, r2
   1415c:	mov	r3, sp
   14160:	mov	r2, ip
   14164:	bl	13efc <__assert_fail@plt+0x29e4>
   14168:	sub	sp, fp, #8
   1416c:	pop	{r4, sl, fp, pc}
   14170:	bl	114f4 <abort@plt>
   14174:	mov	r2, r1
   14178:	mov	r1, r0
   1417c:	mov	r0, #0
   14180:	b	140cc <__assert_fail@plt+0x2bb4>
   14184:	mov	r3, r2
   14188:	mov	r2, r1
   1418c:	mov	r1, r0
   14190:	mov	r0, #0
   14194:	b	14120 <__assert_fail@plt+0x2c08>
   14198:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1419c:	add	fp, sp, #24
   141a0:	sub	sp, sp, #48	; 0x30
   141a4:	movw	r8, #17816	; 0x4598
   141a8:	mov	lr, r0
   141ac:	mov	r3, sp
   141b0:	mov	ip, r1
   141b4:	movt	r8, #3
   141b8:	mov	r1, r3
   141bc:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   141c0:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   141c4:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   141c8:	stm	r1, {r0, r4, r5, r6, r7, r9}
   141cc:	ubfx	r0, r2, #5, #3
   141d0:	and	r2, r2, #31
   141d4:	mov	r4, #1
   141d8:	add	r0, r3, r0, lsl #2
   141dc:	ldr	r1, [r0, #8]
   141e0:	bic	r4, r4, r1, lsr r2
   141e4:	eor	r1, r1, r4, lsl r2
   141e8:	mov	r2, ip
   141ec:	str	r1, [r0, #8]
   141f0:	mov	r0, #0
   141f4:	mov	r1, lr
   141f8:	bl	13efc <__assert_fail@plt+0x29e4>
   141fc:	sub	sp, fp, #24
   14200:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14204:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14208:	add	fp, sp, #24
   1420c:	sub	sp, sp, #48	; 0x30
   14210:	movw	lr, #17816	; 0x4598
   14214:	mov	ip, r0
   14218:	mov	r3, sp
   1421c:	movt	lr, #3
   14220:	mov	r2, r3
   14224:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   14228:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   1422c:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   14230:	stm	r2, {r0, r4, r5, r6, r7, r8}
   14234:	ubfx	r0, r1, #5, #3
   14238:	and	r1, r1, #31
   1423c:	mov	r7, #1
   14240:	add	r0, r3, r0, lsl #2
   14244:	ldr	r2, [r0, #8]
   14248:	bic	r7, r7, r2, lsr r1
   1424c:	eor	r1, r2, r7, lsl r1
   14250:	mvn	r2, #0
   14254:	str	r1, [r0, #8]
   14258:	mov	r0, #0
   1425c:	mov	r1, ip
   14260:	bl	13efc <__assert_fail@plt+0x29e4>
   14264:	sub	sp, fp, #24
   14268:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1426c:	push	{r4, r5, r6, r7, fp, lr}
   14270:	add	fp, sp, #16
   14274:	sub	sp, sp, #48	; 0x30
   14278:	movw	lr, #17816	; 0x4598
   1427c:	mov	ip, r0
   14280:	mov	r3, sp
   14284:	movt	lr, #3
   14288:	mov	r2, r3
   1428c:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   14290:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14294:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   14298:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1429c:	mov	r1, ip
   142a0:	mvn	r2, #0
   142a4:	ldr	r0, [sp, #12]
   142a8:	orr	r0, r0, #67108864	; 0x4000000
   142ac:	str	r0, [sp, #12]
   142b0:	mov	r0, #0
   142b4:	bl	13efc <__assert_fail@plt+0x29e4>
   142b8:	sub	sp, fp, #16
   142bc:	pop	{r4, r5, r6, r7, fp, pc}
   142c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   142c4:	add	fp, sp, #24
   142c8:	sub	sp, sp, #48	; 0x30
   142cc:	movw	r8, #17816	; 0x4598
   142d0:	mov	ip, r1
   142d4:	mov	lr, r0
   142d8:	mov	r3, sp
   142dc:	movt	r8, #3
   142e0:	mov	r2, r3
   142e4:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   142e8:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   142ec:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   142f0:	stm	r2, {r0, r1, r4, r5, r6, r7}
   142f4:	mov	r1, lr
   142f8:	mov	r2, ip
   142fc:	ldr	r0, [sp, #12]
   14300:	orr	r0, r0, #67108864	; 0x4000000
   14304:	str	r0, [sp, #12]
   14308:	mov	r0, #0
   1430c:	bl	13efc <__assert_fail@plt+0x29e4>
   14310:	sub	sp, fp, #24
   14314:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14318:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1431c:	add	fp, sp, #24
   14320:	sub	sp, sp, #96	; 0x60
   14324:	mov	lr, sp
   14328:	vmov.i32	q8, #0	; 0x00000000
   1432c:	mov	ip, r2
   14330:	cmp	r1, #10
   14334:	add	r3, lr, #16
   14338:	mov	r2, lr
   1433c:	vst1.64	{d16-d17}, [r3]
   14340:	mov	r3, #28
   14344:	vst1.64	{d16-d17}, [r2], r3
   14348:	vst1.32	{d16-d17}, [r2]
   1434c:	beq	1438c <__assert_fail@plt+0x2e74>
   14350:	str	r1, [sp, #48]	; 0x30
   14354:	add	r3, sp, #48	; 0x30
   14358:	ldm	lr!, {r2, r4, r5, r6, r7}
   1435c:	add	r1, r3, #4
   14360:	stmia	r1!, {r2, r4, r5, r6, r7}
   14364:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   14368:	stm	r1, {r2, r4, r5, r6, r7, r8}
   1436c:	mvn	r2, #0
   14370:	ldr	r1, [sp, #60]	; 0x3c
   14374:	orr	r1, r1, #67108864	; 0x4000000
   14378:	str	r1, [sp, #60]	; 0x3c
   1437c:	mov	r1, ip
   14380:	bl	13efc <__assert_fail@plt+0x29e4>
   14384:	sub	sp, fp, #24
   14388:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1438c:	bl	114f4 <abort@plt>
   14390:	push	{fp, lr}
   14394:	mov	fp, sp
   14398:	sub	sp, sp, #8
   1439c:	mvn	ip, #0
   143a0:	str	ip, [sp]
   143a4:	bl	143b0 <__assert_fail@plt+0x2e98>
   143a8:	mov	sp, fp
   143ac:	pop	{fp, pc}
   143b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   143b4:	add	fp, sp, #24
   143b8:	sub	sp, sp, #48	; 0x30
   143bc:	movw	ip, #17816	; 0x4598
   143c0:	mov	lr, r3
   143c4:	mov	r3, sp
   143c8:	cmp	r1, #0
   143cc:	movt	ip, #3
   143d0:	cmpne	r2, #0
   143d4:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   143d8:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   143dc:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   143e0:	stm	r3, {r4, r5, r6, r7, r8, r9}
   143e4:	mov	r3, #10
   143e8:	str	r3, [sp]
   143ec:	bne	143f4 <__assert_fail@plt+0x2edc>
   143f0:	bl	114f4 <abort@plt>
   143f4:	ldr	ip, [fp, #8]
   143f8:	str	r2, [sp, #44]	; 0x2c
   143fc:	str	r1, [sp, #40]	; 0x28
   14400:	mov	r3, sp
   14404:	mov	r1, lr
   14408:	mov	r2, ip
   1440c:	bl	13efc <__assert_fail@plt+0x29e4>
   14410:	sub	sp, fp, #24
   14414:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14418:	push	{fp, lr}
   1441c:	mov	fp, sp
   14420:	sub	sp, sp, #8
   14424:	mov	r3, r2
   14428:	mov	r2, r1
   1442c:	mov	r1, r0
   14430:	mvn	r0, #0
   14434:	str	r0, [sp]
   14438:	mov	r0, #0
   1443c:	bl	143b0 <__assert_fail@plt+0x2e98>
   14440:	mov	sp, fp
   14444:	pop	{fp, pc}
   14448:	push	{fp, lr}
   1444c:	mov	fp, sp
   14450:	sub	sp, sp, #8
   14454:	mov	ip, r2
   14458:	mov	r2, r1
   1445c:	mov	r1, r0
   14460:	str	r3, [sp]
   14464:	mov	r0, #0
   14468:	mov	r3, ip
   1446c:	bl	143b0 <__assert_fail@plt+0x2e98>
   14470:	mov	sp, fp
   14474:	pop	{fp, pc}
   14478:	movw	r3, #16768	; 0x4180
   1447c:	movt	r3, #3
   14480:	b	13efc <__assert_fail@plt+0x29e4>
   14484:	movw	r3, #16768	; 0x4180
   14488:	mov	r2, r1
   1448c:	mov	r1, r0
   14490:	mov	r0, #0
   14494:	movt	r3, #3
   14498:	b	13efc <__assert_fail@plt+0x29e4>
   1449c:	movw	r3, #16768	; 0x4180
   144a0:	mvn	r2, #0
   144a4:	movt	r3, #3
   144a8:	b	13efc <__assert_fail@plt+0x29e4>
   144ac:	movw	r3, #16768	; 0x4180
   144b0:	mov	r1, r0
   144b4:	mov	r0, #0
   144b8:	mvn	r2, #0
   144bc:	movt	r3, #3
   144c0:	b	13efc <__assert_fail@plt+0x29e4>
   144c4:	push	{r4, r5, fp, lr}
   144c8:	add	fp, sp, #8
   144cc:	mov	r5, r0
   144d0:	mov	r4, r1
   144d4:	mov	r0, #0
   144d8:	mov	r2, #5
   144dc:	mov	r1, r5
   144e0:	bl	11314 <dcgettext@plt>
   144e4:	cmp	r0, r5
   144e8:	popne	{r4, r5, fp, pc}
   144ec:	bl	22404 <__assert_fail@plt+0x10eec>
   144f0:	ldrb	r1, [r0]
   144f4:	and	r1, r1, #223	; 0xdf
   144f8:	cmp	r1, #71	; 0x47
   144fc:	beq	14564 <__assert_fail@plt+0x304c>
   14500:	cmp	r1, #85	; 0x55
   14504:	bne	14588 <__assert_fail@plt+0x3070>
   14508:	ldrb	r1, [r0, #1]
   1450c:	and	r1, r1, #223	; 0xdf
   14510:	cmp	r1, #84	; 0x54
   14514:	bne	14588 <__assert_fail@plt+0x3070>
   14518:	ldrb	r1, [r0, #2]
   1451c:	and	r1, r1, #223	; 0xdf
   14520:	cmp	r1, #70	; 0x46
   14524:	ldrbeq	r1, [r0, #3]
   14528:	cmpeq	r1, #45	; 0x2d
   1452c:	bne	14588 <__assert_fail@plt+0x3070>
   14530:	ldrb	r1, [r0, #4]
   14534:	cmp	r1, #56	; 0x38
   14538:	ldrbeq	r0, [r0, #5]
   1453c:	cmpeq	r0, #0
   14540:	bne	14588 <__assert_fail@plt+0x3070>
   14544:	ldrb	r1, [r5]
   14548:	movw	r2, #13592	; 0x3518
   1454c:	movw	r0, #13596	; 0x351c
   14550:	movt	r2, #2
   14554:	movt	r0, #2
   14558:	cmp	r1, #96	; 0x60
   1455c:	moveq	r0, r2
   14560:	pop	{r4, r5, fp, pc}
   14564:	ldrb	r1, [r0, #1]
   14568:	and	r1, r1, #223	; 0xdf
   1456c:	cmp	r1, #66	; 0x42
   14570:	bne	14588 <__assert_fail@plt+0x3070>
   14574:	ldrb	r1, [r0, #2]
   14578:	cmp	r1, #49	; 0x31
   1457c:	ldrbeq	r1, [r0, #3]
   14580:	cmpeq	r1, #56	; 0x38
   14584:	beq	145a4 <__assert_fail@plt+0x308c>
   14588:	movw	r1, #13586	; 0x3512
   1458c:	movw	r0, #13590	; 0x3516
   14590:	cmp	r4, #9
   14594:	movt	r1, #2
   14598:	movt	r0, #2
   1459c:	moveq	r0, r1
   145a0:	pop	{r4, r5, fp, pc}
   145a4:	ldrb	r1, [r0, #4]
   145a8:	cmp	r1, #48	; 0x30
   145ac:	ldrbeq	r1, [r0, #5]
   145b0:	cmpeq	r1, #51	; 0x33
   145b4:	bne	14588 <__assert_fail@plt+0x3070>
   145b8:	ldrb	r1, [r0, #6]
   145bc:	cmp	r1, #48	; 0x30
   145c0:	ldrbeq	r0, [r0, #7]
   145c4:	cmpeq	r0, #0
   145c8:	bne	14588 <__assert_fail@plt+0x3070>
   145cc:	ldrb	r1, [r5]
   145d0:	movw	r2, #13600	; 0x3520
   145d4:	movw	r0, #13604	; 0x3524
   145d8:	movt	r2, #2
   145dc:	movt	r0, #2
   145e0:	b	14558 <__assert_fail@plt+0x3040>
   145e4:	andeq	r0, r0, r0
   145e8:	push	{fp, lr}
   145ec:	mov	fp, sp
   145f0:	mov	lr, r0
   145f4:	movw	r0, #18120	; 0x46c8
   145f8:	mov	ip, r1
   145fc:	ldrb	r1, [r2, #28]
   14600:	movt	r0, #3
   14604:	ldr	r3, [r0]
   14608:	mov	r0, #16
   1460c:	and	r1, r1, #111	; 0x6f
   14610:	and	r0, r0, r3, lsr #21
   14614:	orr	r0, r1, r0
   14618:	mov	r1, lr
   1461c:	orr	r0, r0, #128	; 0x80
   14620:	strb	r0, [r2, #28]
   14624:	mov	r0, r2
   14628:	mov	r2, ip
   1462c:	bl	14664 <__assert_fail@plt+0x314c>
   14630:	cmp	r0, #0
   14634:	moveq	r0, #0
   14638:	popeq	{fp, pc}
   1463c:	movw	r1, #14080	; 0x3700
   14640:	mov	r2, #5
   14644:	movt	r1, #2
   14648:	ldr	r0, [r1, r0, lsl #2]
   1464c:	movw	r1, #13696	; 0x3580
   14650:	movt	r1, #2
   14654:	add	r1, r1, r0
   14658:	mov	r0, #0
   1465c:	pop	{fp, lr}
   14660:	b	11314 <dcgettext@plt>
   14664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14668:	add	fp, sp, #28
   1466c:	sub	sp, sp, #140	; 0x8c
   14670:	str	r1, [sp, #24]
   14674:	mov	r1, #0
   14678:	str	r0, [sp, #28]
   1467c:	mov	sl, r2
   14680:	str	r3, [sp, #20]
   14684:	str	r1, [fp, #-52]	; 0xffffffcc
   14688:	str	r1, [r0, #8]
   1468c:	str	r3, [r0, #12]
   14690:	str	r1, [r0, #24]
   14694:	ldrb	r1, [r0, #28]
   14698:	and	r1, r1, #144	; 0x90
   1469c:	strb	r1, [r0, #28]
   146a0:	ldr	r9, [r0]
   146a4:	ldr	r0, [r0, #4]
   146a8:	cmp	r0, #159	; 0x9f
   146ac:	bls	1525c <__assert_fail@plt+0x3d44>
   146b0:	ldr	r1, [sp, #28]
   146b4:	mov	r0, #160	; 0xa0
   146b8:	mov	r2, #160	; 0xa0
   146bc:	str	r0, [r1, #8]
   146c0:	mov	r0, r9
   146c4:	mov	r1, #0
   146c8:	bl	1141c <memset@plt>
   146cc:	mov	r0, #31
   146d0:	str	r0, [r9, #64]	; 0x40
   146d4:	movw	r0, #43689	; 0xaaa9
   146d8:	movt	r0, #2730	; 0xaaa
   146dc:	cmp	sl, r0
   146e0:	bhi	14850 <__assert_fail@plt+0x3338>
   146e4:	add	r0, sl, #1
   146e8:	str	r0, [r9, #4]
   146ec:	str	r0, [sp, #12]
   146f0:	lsl	r0, r0, #3
   146f4:	bl	22220 <__assert_fail@plt+0x10d08>
   146f8:	str	r0, [r9]
   146fc:	mov	r0, #1
   14700:	mov	r4, r0
   14704:	lsl	r0, r0, #1
   14708:	cmp	r4, sl
   1470c:	bls	14700 <__assert_fail@plt+0x31e8>
   14710:	mov	r0, #12
   14714:	mov	r1, r4
   14718:	bl	221cc <__assert_fail@plt+0x10cb4>
   1471c:	str	r0, [r9, #32]
   14720:	sub	r0, r4, #1
   14724:	str	r0, [r9, #68]	; 0x44
   14728:	bl	11350 <__ctype_get_mb_cur_max@plt>
   1472c:	str	r0, [r9, #92]	; 0x5c
   14730:	mov	r0, #14
   14734:	bl	114a0 <nl_langinfo@plt>
   14738:	ldrb	r1, [r0]
   1473c:	orr	r1, r1, #32
   14740:	cmp	r1, #117	; 0x75
   14744:	bne	14790 <__assert_fail@plt+0x3278>
   14748:	ldrb	r1, [r0, #1]
   1474c:	orr	r1, r1, #32
   14750:	cmp	r1, #116	; 0x74
   14754:	bne	14790 <__assert_fail@plt+0x3278>
   14758:	ldrb	r1, [r0, #2]
   1475c:	orr	r1, r1, #32
   14760:	cmp	r1, #102	; 0x66
   14764:	bne	14790 <__assert_fail@plt+0x3278>
   14768:	ldrb	r1, [r0, #3]!
   1476c:	cmp	r1, #45	; 0x2d
   14770:	movw	r1, #14196	; 0x3774
   14774:	addeq	r0, r0, #1
   14778:	movt	r1, #2
   1477c:	bl	11248 <strcmp@plt>
   14780:	cmp	r0, #0
   14784:	ldrbeq	r0, [r9, #88]	; 0x58
   14788:	orreq	r0, r0, #4
   1478c:	strbeq	r0, [r9, #88]	; 0x58
   14790:	ldrb	r0, [r9, #88]	; 0x58
   14794:	and	r1, r0, #247	; 0xf7
   14798:	strb	r1, [r9, #88]	; 0x58
   1479c:	ldr	r1, [r9, #92]	; 0x5c
   147a0:	cmp	r1, #2
   147a4:	blt	1483c <__assert_fail@plt+0x3324>
   147a8:	tst	r0, #4
   147ac:	bne	14830 <__assert_fail@plt+0x3318>
   147b0:	mov	r0, #32
   147b4:	mov	r1, #1
   147b8:	mov	r8, #1
   147bc:	bl	221cc <__assert_fail@plt+0x10cb4>
   147c0:	cmp	r0, #0
   147c4:	str	r0, [r9, #60]	; 0x3c
   147c8:	beq	14850 <__assert_fail@plt+0x3338>
   147cc:	mov	r7, #0
   147d0:	mov	r5, #0
   147d4:	mov	r6, #0
   147d8:	add	r4, r7, r6
   147dc:	mov	r0, r4
   147e0:	bl	11428 <btowc@plt>
   147e4:	cmn	r0, #1
   147e8:	ldrne	r1, [r9, #60]	; 0x3c
   147ec:	ldrne	r2, [r1, r5, lsl #2]
   147f0:	orrne	r2, r2, r8, lsl r6
   147f4:	strne	r2, [r1, r5, lsl #2]
   147f8:	cmp	r4, #127	; 0x7f
   147fc:	bhi	14810 <__assert_fail@plt+0x32f8>
   14800:	cmp	r4, r0
   14804:	ldrbne	r0, [r9, #88]	; 0x58
   14808:	orrne	r0, r0, #8
   1480c:	strbne	r0, [r9, #88]	; 0x58
   14810:	add	r6, r6, #1
   14814:	cmp	r6, #32
   14818:	bne	147d8 <__assert_fail@plt+0x32c0>
   1481c:	add	r5, r5, #1
   14820:	add	r7, r7, #32
   14824:	cmp	r5, #8
   14828:	bne	147d4 <__assert_fail@plt+0x32bc>
   1482c:	b	1483c <__assert_fail@plt+0x3324>
   14830:	movw	r0, #14148	; 0x3744
   14834:	movt	r0, #2
   14838:	str	r0, [r9, #60]	; 0x3c
   1483c:	ldr	r0, [r9]
   14840:	cmp	r0, #0
   14844:	ldrne	r0, [r9, #32]
   14848:	cmpne	r0, #0
   1484c:	bne	14874 <__assert_fail@plt+0x335c>
   14850:	mov	r4, #12
   14854:	mov	r0, r9
   14858:	str	r4, [fp, #-52]	; 0xffffffcc
   1485c:	bl	15904 <__assert_fail@plt+0x43ec>
   14860:	ldr	r0, [sp, #28]
   14864:	mov	r1, #0
   14868:	str	r1, [r0]
   1486c:	str	r1, [r0, #4]
   14870:	b	151e4 <__assert_fail@plt+0x3ccc>
   14874:	movw	r0, #0
   14878:	movw	r1, #0
   1487c:	mov	r4, #0
   14880:	movt	r0, #0
   14884:	movt	r1, #0
   14888:	str	r4, [fp, #-52]	; 0xffffffcc
   1488c:	orrs	r0, r1, r0
   14890:	str	r0, [sp, #8]
   14894:	beq	148ac <__assert_fail@plt+0x3394>
   14898:	add	r0, r9, #136	; 0x88
   1489c:	mov	r1, #0
   148a0:	bl	112c0 <pthread_mutex_init@plt>
   148a4:	cmp	r0, #0
   148a8:	bne	14850 <__assert_fail@plt+0x3338>
   148ac:	ldr	r0, [sp, #28]
   148b0:	add	r5, sp, #32
   148b4:	mov	r1, #0
   148b8:	mov	r2, #76	; 0x4c
   148bc:	ldr	r8, [r0, #20]
   148c0:	add	r0, r5, #4
   148c4:	bl	1141c <memset@plt>
   148c8:	ldr	r0, [sp, #24]
   148cc:	ldr	r1, [sp, #20]
   148d0:	add	r3, r5, #44	; 0x2c
   148d4:	vdup.32	q8, sl
   148d8:	str	r0, [sp, #32]
   148dc:	str	r8, [sp, #96]	; 0x60
   148e0:	ubfx	r0, r1, #22, #1
   148e4:	strb	r0, [sp, #104]	; 0x68
   148e8:	and	r0, r1, #4194304	; 0x400000
   148ec:	orrs	r1, r0, r8
   148f0:	str	r0, [sp, #16]
   148f4:	movwne	r1, #1
   148f8:	cmp	sl, #1
   148fc:	strb	r1, [sp, #107]	; 0x6b
   14900:	ldr	r0, [r9, #92]	; 0x5c
   14904:	str	r0, [sp, #112]	; 0x70
   14908:	ldrb	r2, [r9, #88]	; 0x58
   1490c:	vst1.32	{d16-d17}, [r3]
   14910:	ubfx	r3, r2, #3, #1
   14914:	strb	r3, [sp, #106]	; 0x6a
   14918:	ubfx	r2, r2, #2, #1
   1491c:	strb	r2, [sp, #105]	; 0x69
   14920:	blt	14944 <__assert_fail@plt+0x342c>
   14924:	ldr	r1, [sp, #12]
   14928:	add	r0, sp, #32
   1492c:	bl	17b78 <__assert_fail@plt+0x6660>
   14930:	cmp	r0, #0
   14934:	bne	149b4 <__assert_fail@plt+0x349c>
   14938:	ldr	r0, [r9, #92]	; 0x5c
   1493c:	ldr	r4, [sp, #36]	; 0x24
   14940:	ldrb	r1, [sp, #107]	; 0x6b
   14944:	cmp	r1, #0
   14948:	ldr	r1, [sp, #24]
   1494c:	moveq	r4, r1
   14950:	ldr	r1, [sp, #16]
   14954:	str	r4, [sp, #36]	; 0x24
   14958:	cmp	r1, #0
   1495c:	beq	149bc <__assert_fail@plt+0x34a4>
   14960:	cmp	r0, #2
   14964:	blt	149d0 <__assert_fail@plt+0x34b8>
   14968:	add	r4, sp, #32
   1496c:	mov	r0, r4
   14970:	bl	17c18 <__assert_fail@plt+0x6700>
   14974:	cmp	r0, #0
   14978:	bne	149b4 <__assert_fail@plt+0x349c>
   1497c:	ldr	r0, [sp, #64]	; 0x40
   14980:	cmp	r0, sl
   14984:	bge	14a64 <__assert_fail@plt+0x354c>
   14988:	ldr	r1, [r9, #92]	; 0x5c
   1498c:	ldr	r2, [sp, #60]	; 0x3c
   14990:	ldr	r0, [sp, #68]	; 0x44
   14994:	add	r1, r1, r2
   14998:	cmp	r0, r1
   1499c:	bgt	14a64 <__assert_fail@plt+0x354c>
   149a0:	lsl	r1, r0, #1
   149a4:	mov	r0, r4
   149a8:	bl	17b78 <__assert_fail@plt+0x6660>
   149ac:	cmp	r0, #0
   149b0:	beq	1496c <__assert_fail@plt+0x3454>
   149b4:	ldr	sl, [sp, #28]
   149b8:	b	14bb8 <__assert_fail@plt+0x36a0>
   149bc:	cmp	r0, #2
   149c0:	blt	149dc <__assert_fail@plt+0x34c4>
   149c4:	add	r0, sp, #32
   149c8:	bl	181f4 <__assert_fail@plt+0x6cdc>
   149cc:	b	14a64 <__assert_fail@plt+0x354c>
   149d0:	add	r0, sp, #32
   149d4:	bl	18188 <__assert_fail@plt+0x6c70>
   149d8:	b	14a64 <__assert_fail@plt+0x354c>
   149dc:	ldr	r0, [sp, #68]	; 0x44
   149e0:	cmp	r8, #0
   149e4:	beq	14a5c <__assert_fail@plt+0x3544>
   149e8:	ldr	r2, [sp, #80]	; 0x50
   149ec:	ldr	r1, [sp, #60]	; 0x3c
   149f0:	cmp	r0, r2
   149f4:	movgt	r0, r2
   149f8:	cmp	r1, r0
   149fc:	bge	14a50 <__assert_fail@plt+0x3538>
   14a00:	ldr	r3, [sp, #56]	; 0x38
   14a04:	ldr	r2, [sp, #32]
   14a08:	ldr	r7, [sp, #96]	; 0x60
   14a0c:	add	r3, r3, r1
   14a10:	ldrb	r2, [r2, r3]
   14a14:	ldrb	r2, [r7, r2]
   14a18:	strb	r2, [r4, r1]
   14a1c:	b	14a40 <__assert_fail@plt+0x3528>
   14a20:	ldr	r2, [sp, #32]
   14a24:	ldr	r7, [sp, #56]	; 0x38
   14a28:	ldr	r6, [sp, #96]	; 0x60
   14a2c:	ldr	r3, [sp, #36]	; 0x24
   14a30:	add	r2, r2, r7
   14a34:	ldrb	r2, [r2, r1]
   14a38:	ldrb	r2, [r6, r2]
   14a3c:	strb	r2, [r3, r1]
   14a40:	add	r1, r1, #1
   14a44:	cmp	r1, r0
   14a48:	blt	14a20 <__assert_fail@plt+0x3508>
   14a4c:	mov	r1, r0
   14a50:	str	r1, [sp, #64]	; 0x40
   14a54:	str	r1, [sp, #60]	; 0x3c
   14a58:	b	14a64 <__assert_fail@plt+0x354c>
   14a5c:	str	r0, [sp, #64]	; 0x40
   14a60:	str	r0, [sp, #60]	; 0x3c
   14a64:	ldr	sl, [sp, #28]
   14a68:	mov	r5, #0
   14a6c:	ldr	r6, [sp, #20]
   14a70:	sub	r8, fp, #48	; 0x30
   14a74:	add	r7, sp, #32
   14a78:	str	r5, [fp, #-52]	; 0xffffffcc
   14a7c:	mov	r0, r8
   14a80:	mov	r1, r7
   14a84:	str	r5, [sl, #24]
   14a88:	orr	r2, r6, #8388608	; 0x800000
   14a8c:	ldr	r4, [sl]
   14a90:	str	r6, [r4, #128]	; 0x80
   14a94:	bl	185e0 <__assert_fail@plt+0x70c8>
   14a98:	ldr	r1, [sp, #72]	; 0x48
   14a9c:	mov	r2, r8
   14aa0:	mov	r3, r6
   14aa4:	str	r5, [sp]
   14aa8:	add	r0, r1, r0
   14aac:	mov	r1, sl
   14ab0:	str	r0, [sp, #72]	; 0x48
   14ab4:	sub	r0, fp, #52	; 0x34
   14ab8:	str	r0, [sp, #4]
   14abc:	mov	r0, r7
   14ac0:	bl	18430 <__assert_fail@plt+0x6f18>
   14ac4:	mov	r6, r0
   14ac8:	cmp	r0, #0
   14acc:	bne	14adc <__assert_fail@plt+0x35c4>
   14ad0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14ad4:	cmp	r0, #0
   14ad8:	bne	15290 <__assert_fail@plt+0x3d78>
   14adc:	mov	r0, #2
   14ae0:	sub	r3, fp, #40	; 0x28
   14ae4:	mov	r1, #0
   14ae8:	mov	r2, #0
   14aec:	str	r0, [fp, #-36]	; 0xffffffdc
   14af0:	mov	r0, r4
   14af4:	str	r5, [fp, #-40]	; 0xffffffd8
   14af8:	bl	1a414 <__assert_fail@plt+0x8efc>
   14afc:	mov	r7, r0
   14b00:	cmp	r6, #0
   14b04:	beq	14b30 <__assert_fail@plt+0x3618>
   14b08:	mov	r0, #16
   14b0c:	sub	r3, fp, #40	; 0x28
   14b10:	mov	r1, r6
   14b14:	mov	r2, r7
   14b18:	str	r0, [fp, #-36]	; 0xffffffdc
   14b1c:	mov	r0, #0
   14b20:	str	r0, [fp, #-40]	; 0xffffffd8
   14b24:	mov	r0, r4
   14b28:	bl	1a414 <__assert_fail@plt+0x8efc>
   14b2c:	b	14b34 <__assert_fail@plt+0x361c>
   14b30:	mov	r0, r7
   14b34:	cmp	r7, #0
   14b38:	cmpne	r0, #0
   14b3c:	beq	15288 <__assert_fail@plt+0x3d70>
   14b40:	str	r0, [r9, #52]	; 0x34
   14b44:	ldr	r8, [sl]
   14b48:	ldr	r0, [r8, #4]
   14b4c:	lsl	r0, r0, #2
   14b50:	bl	22220 <__assert_fail@plt+0x10d08>
   14b54:	str	r0, [r8, #12]
   14b58:	ldr	r0, [r8, #4]
   14b5c:	lsl	r0, r0, #2
   14b60:	bl	22220 <__assert_fail@plt+0x10d08>
   14b64:	str	r0, [r8, #16]
   14b68:	ldr	r0, [r8, #4]
   14b6c:	add	r0, r0, r0, lsl #1
   14b70:	lsl	r0, r0, #2
   14b74:	bl	22220 <__assert_fail@plt+0x10d08>
   14b78:	str	r0, [r8, #20]
   14b7c:	ldr	r0, [r8, #4]
   14b80:	add	r0, r0, r0, lsl #1
   14b84:	lsl	r0, r0, #2
   14b88:	bl	22220 <__assert_fail@plt+0x10d08>
   14b8c:	str	r0, [r8, #24]
   14b90:	ldr	r1, [r8, #12]
   14b94:	cmp	r1, #0
   14b98:	ldrne	r1, [r8, #16]
   14b9c:	cmpne	r1, #0
   14ba0:	beq	14bb4 <__assert_fail@plt+0x369c>
   14ba4:	cmp	r0, #0
   14ba8:	ldrne	r0, [r8, #20]
   14bac:	cmpne	r0, #0
   14bb0:	bne	14bfc <__assert_fail@plt+0x36e4>
   14bb4:	mov	r0, #12
   14bb8:	str	r0, [fp, #-52]	; 0xffffffcc
   14bbc:	mov	r0, sl
   14bc0:	bl	17af4 <__assert_fail@plt+0x65dc>
   14bc4:	add	r0, sp, #32
   14bc8:	bl	17b44 <__assert_fail@plt+0x662c>
   14bcc:	ldr	r0, [sp, #8]
   14bd0:	cmp	r0, #0
   14bd4:	beq	14be0 <__assert_fail@plt+0x36c8>
   14bd8:	add	r0, r9, #136	; 0x88
   14bdc:	bl	11260 <pthread_mutex_destroy@plt>
   14be0:	mov	r0, r9
   14be4:	bl	15904 <__assert_fail@plt+0x43ec>
   14be8:	mov	r0, #0
   14bec:	str	r0, [sl]
   14bf0:	str	r0, [sl, #4]
   14bf4:	ldr	r4, [fp, #-52]	; 0xffffffcc
   14bf8:	b	151e4 <__assert_fail@plt+0x3ccc>
   14bfc:	ldr	r0, [sl, #24]
   14c00:	lsl	r0, r0, #2
   14c04:	bl	22220 <__assert_fail@plt+0x10d08>
   14c08:	cmp	r0, #0
   14c0c:	str	r0, [r8, #132]	; 0x84
   14c10:	beq	14c84 <__assert_fail@plt+0x376c>
   14c14:	ldr	r1, [sl, #24]
   14c18:	cmp	r1, #0
   14c1c:	beq	14c34 <__assert_fail@plt+0x371c>
   14c20:	mov	r2, #0
   14c24:	str	r2, [r0, r2, lsl #2]
   14c28:	add	r2, r2, #1
   14c2c:	cmp	r1, r2
   14c30:	bne	14c24 <__assert_fail@plt+0x370c>
   14c34:	mov	r4, r8
   14c38:	movw	r1, #46504	; 0xb5a8
   14c3c:	mov	r2, r8
   14c40:	ldr	r0, [r4, #52]!	; 0x34
   14c44:	movt	r1, #1
   14c48:	bl	1b528 <__assert_fail@plt+0xa010>
   14c4c:	ldr	r1, [sl, #24]
   14c50:	cmp	r1, #0
   14c54:	beq	14c8c <__assert_fail@plt+0x3774>
   14c58:	ldr	r0, [r8, #132]	; 0x84
   14c5c:	mov	r2, #0
   14c60:	ldr	r3, [r0, r2, lsl #2]
   14c64:	cmp	r2, r3
   14c68:	bne	14c78 <__assert_fail@plt+0x3760>
   14c6c:	add	r2, r2, #1
   14c70:	cmp	r2, r1
   14c74:	bcc	14c60 <__assert_fail@plt+0x3748>
   14c78:	cmp	r2, r1
   14c7c:	beq	14c90 <__assert_fail@plt+0x3778>
   14c80:	b	14c9c <__assert_fail@plt+0x3784>
   14c84:	add	r4, r8, #52	; 0x34
   14c88:	b	14c9c <__assert_fail@plt+0x3784>
   14c8c:	ldr	r0, [r8, #132]	; 0x84
   14c90:	bl	223dc <__assert_fail@plt+0x10ec4>
   14c94:	mov	r0, #0
   14c98:	str	r0, [r8, #132]	; 0x84
   14c9c:	ldr	r0, [r4]
   14ca0:	movw	r1, #46656	; 0xb640
   14ca4:	mov	r2, sl
   14ca8:	movt	r1, #1
   14cac:	bl	18e88 <__assert_fail@plt+0x7970>
   14cb0:	cmp	r0, #0
   14cb4:	bne	14bb8 <__assert_fail@plt+0x36a0>
   14cb8:	ldr	r0, [r8, #52]	; 0x34
   14cbc:	movw	r1, #46792	; 0xb6c8
   14cc0:	mov	r2, r8
   14cc4:	movt	r1, #1
   14cc8:	bl	18e88 <__assert_fail@plt+0x7970>
   14ccc:	cmp	r0, #0
   14cd0:	bne	14bb8 <__assert_fail@plt+0x36a0>
   14cd4:	ldr	r0, [r8, #52]	; 0x34
   14cd8:	movw	r1, #46932	; 0xb754
   14cdc:	mov	r2, r8
   14ce0:	movt	r1, #1
   14ce4:	bl	1b528 <__assert_fail@plt+0xa010>
   14ce8:	ldr	r0, [r8, #52]	; 0x34
   14cec:	movw	r1, #47028	; 0xb7b4
   14cf0:	mov	r2, r8
   14cf4:	movt	r1, #1
   14cf8:	bl	1b528 <__assert_fail@plt+0xa010>
   14cfc:	cmp	r0, #0
   14d00:	bne	14bb8 <__assert_fail@plt+0x36a0>
   14d04:	ldr	r0, [r8, #8]
   14d08:	cmp	r0, #0
   14d0c:	beq	14db0 <__assert_fail@plt+0x3898>
   14d10:	mov	r5, #0
   14d14:	sub	r7, fp, #40	; 0x28
   14d18:	mov	r4, #0
   14d1c:	ldr	r0, [r8, #24]
   14d20:	add	r6, r4, r4, lsl #1
   14d24:	add	r0, r0, r6, lsl #2
   14d28:	ldr	r0, [r0, #4]
   14d2c:	cmp	r0, #0
   14d30:	beq	14d3c <__assert_fail@plt+0x3824>
   14d34:	mov	r1, r5
   14d38:	b	14d7c <__assert_fail@plt+0x3864>
   14d3c:	mov	r0, r7
   14d40:	mov	r1, r8
   14d44:	mov	r2, r4
   14d48:	mov	r3, #1
   14d4c:	bl	1bc68 <__assert_fail@plt+0xa750>
   14d50:	cmp	r0, #0
   14d54:	bne	14bb8 <__assert_fail@plt+0x36a0>
   14d58:	ldr	r0, [r8, #24]
   14d5c:	mov	r1, r5
   14d60:	add	r0, r0, r6, lsl #2
   14d64:	ldr	r0, [r0, #4]
   14d68:	cmp	r0, #0
   14d6c:	bne	14d7c <__assert_fail@plt+0x3864>
   14d70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14d74:	bl	223dc <__assert_fail@plt+0x10ec4>
   14d78:	mov	r1, #1
   14d7c:	ldr	r2, [r8, #8]
   14d80:	add	r0, r4, #1
   14d84:	subs	r3, r0, r2
   14d88:	mov	r4, r3
   14d8c:	movwne	r3, #1
   14d90:	movne	r4, r0
   14d94:	tst	r1, #1
   14d98:	and	r5, r1, r3
   14d9c:	cmpeq	r0, r2
   14da0:	bne	14d1c <__assert_fail@plt+0x3804>
   14da4:	add	r0, r0, r0, lsl #1
   14da8:	lsl	r0, r0, #2
   14dac:	b	14db4 <__assert_fail@plt+0x389c>
   14db0:	mov	r0, #0
   14db4:	ldrb	r1, [sl, #28]
   14db8:	tst	r1, #16
   14dbc:	bne	14dd4 <__assert_fail@plt+0x38bc>
   14dc0:	ldr	r1, [sl, #24]
   14dc4:	cmp	r1, #0
   14dc8:	ldrbne	r1, [r8, #88]	; 0x58
   14dcc:	tstne	r1, #1
   14dd0:	bne	14de0 <__assert_fail@plt+0x38c8>
   14dd4:	ldr	r1, [r8, #76]	; 0x4c
   14dd8:	cmp	r1, #0
   14ddc:	beq	14eb8 <__assert_fail@plt+0x39a0>
   14de0:	bl	22220 <__assert_fail@plt+0x10d08>
   14de4:	cmp	r0, #0
   14de8:	str	r0, [r8, #28]
   14dec:	beq	14bb4 <__assert_fail@plt+0x369c>
   14df0:	ldr	r1, [r8, #8]
   14df4:	cmp	r1, #0
   14df8:	beq	14eb8 <__assert_fail@plt+0x39a0>
   14dfc:	mov	r1, #0
   14e00:	str	r1, [r0]
   14e04:	str	r1, [r0, #4]
   14e08:	str	r1, [r0, #8]
   14e0c:	ldr	r0, [r8, #8]
   14e10:	cmp	r0, #2
   14e14:	bcc	14e44 <__assert_fail@plt+0x392c>
   14e18:	mov	r2, #1
   14e1c:	mov	r3, #12
   14e20:	ldr	r0, [r8, #28]
   14e24:	add	r2, r2, #1
   14e28:	str	r1, [r0, r3]!
   14e2c:	add	r3, r3, #12
   14e30:	str	r1, [r0, #4]
   14e34:	str	r1, [r0, #8]
   14e38:	ldr	r0, [r8, #8]
   14e3c:	cmp	r2, r0
   14e40:	bcc	14e20 <__assert_fail@plt+0x3908>
   14e44:	cmp	r0, #0
   14e48:	beq	14eb8 <__assert_fail@plt+0x39a0>
   14e4c:	ldr	r1, [r8, #24]
   14e50:	mov	r4, #0
   14e54:	add	r5, r4, r4, lsl #1
   14e58:	add	r2, r1, r5, lsl #2
   14e5c:	ldr	r3, [r2, #4]
   14e60:	cmp	r3, #1
   14e64:	blt	14eac <__assert_fail@plt+0x3994>
   14e68:	ldr	r7, [r2, #8]
   14e6c:	mov	r6, #0
   14e70:	ldr	r0, [r7, r6, lsl #2]
   14e74:	ldr	r1, [r8, #28]
   14e78:	add	r0, r0, r0, lsl #1
   14e7c:	add	r0, r1, r0, lsl #2
   14e80:	mov	r1, r4
   14e84:	bl	1c4a8 <__assert_fail@plt+0xaf90>
   14e88:	cmp	r0, #0
   14e8c:	beq	14bb4 <__assert_fail@plt+0x369c>
   14e90:	ldr	r1, [r8, #24]
   14e94:	add	r6, r6, #1
   14e98:	add	r0, r1, r5, lsl #2
   14e9c:	ldr	r0, [r0, #4]
   14ea0:	cmp	r6, r0
   14ea4:	blt	14e70 <__assert_fail@plt+0x3958>
   14ea8:	ldr	r0, [r8, #8]
   14eac:	add	r4, r4, #1
   14eb0:	cmp	r4, r0
   14eb4:	bcc	14e54 <__assert_fail@plt+0x393c>
   14eb8:	mov	r0, #0
   14ebc:	str	r0, [fp, #-52]	; 0xffffffcc
   14ec0:	ldr	r0, [sp, #16]
   14ec4:	cmp	r0, #0
   14ec8:	bne	14ffc <__assert_fail@plt+0x3ae4>
   14ecc:	ldrb	r2, [r9, #88]	; 0x58
   14ed0:	ands	r0, r2, #4
   14ed4:	beq	14ffc <__assert_fail@plt+0x3ae4>
   14ed8:	ldr	r0, [sp, #28]
   14edc:	ldr	r0, [r0, #20]
   14ee0:	cmp	r0, #0
   14ee4:	bne	14ffc <__assert_fail@plt+0x3ae4>
   14ee8:	ldr	r7, [r9, #8]
   14eec:	mov	sl, #0
   14ef0:	cmp	r7, #0
   14ef4:	beq	14fd0 <__assert_fail@plt+0x3ab8>
   14ef8:	ldr	r3, [r9]
   14efc:	mov	r8, #0
   14f00:	mov	ip, #1
   14f04:	mov	lr, #139	; 0x8b
   14f08:	mov	r6, #0
   14f0c:	mov	r4, #0
   14f10:	add	r1, r3, r4, lsl #3
   14f14:	ldrb	r5, [r1, #4]
   14f18:	sub	r5, r5, #1
   14f1c:	cmp	r5, #11
   14f20:	bhi	152ac <__assert_fail@plt+0x3d94>
   14f24:	add	r0, pc, #0
   14f28:	ldr	pc, [r0, r5, lsl #2]
   14f2c:			; <UNDEFINED> instruction: 0x00014fb0
   14f30:	andeq	r4, r1, ip, asr pc
   14f34:	andeq	r4, r1, ip, ror #30
   14f38:	andeq	r4, r1, ip, asr pc
   14f3c:	andeq	r4, r1, r8, asr #31
   14f40:	strdeq	r4, [r1], -ip
   14f44:	andeq	r5, r1, ip, lsr #5
   14f48:	andeq	r4, r1, ip, asr pc
   14f4c:	andeq	r4, r1, ip, asr pc
   14f50:	andeq	r4, r1, ip, asr pc
   14f54:	andeq	r4, r1, ip, asr pc
   14f58:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14f5c:	add	r4, r4, #1
   14f60:	cmp	r4, r7
   14f64:	bcc	14f10 <__assert_fail@plt+0x39f8>
   14f68:	b	151f0 <__assert_fail@plt+0x3cd8>
   14f6c:	ldr	r5, [r3, r4, lsl #3]
   14f70:	mov	r1, #4
   14f74:	ldr	r0, [r5, r1, lsl #2]
   14f78:	cmp	r0, #0
   14f7c:	bne	14ffc <__assert_fail@plt+0x3ae4>
   14f80:	add	r1, r1, #1
   14f84:	cmp	r1, #7
   14f88:	bls	14f74 <__assert_fail@plt+0x3a5c>
   14f8c:	b	14f5c <__assert_fail@plt+0x3a44>
   14f90:	ldr	r0, [r3, r4, lsl #3]
   14f94:	sub	r0, r0, #16
   14f98:	ror	r1, r0, #4
   14f9c:	cmp	r1, #7
   14fa0:	bhi	14ffc <__assert_fail@plt+0x3ae4>
   14fa4:	tst	lr, ip, lsl r1
   14fa8:	bne	14f5c <__assert_fail@plt+0x3a44>
   14fac:	b	14ffc <__assert_fail@plt+0x3ae4>
   14fb0:	ldrsb	r0, [r1]
   14fb4:	cmp	r0, #0
   14fb8:	mov	r0, #0
   14fbc:	movwlt	r0, #1
   14fc0:	orr	r6, r6, r0
   14fc4:	b	14f5c <__assert_fail@plt+0x3a44>
   14fc8:	mov	r8, #1
   14fcc:	b	14f5c <__assert_fail@plt+0x3a44>
   14fd0:	mov	r8, #0
   14fd4:	mov	r0, #1
   14fd8:	and	r1, r2, #249	; 0xf9
   14fdc:	str	r0, [r9, #92]	; 0x5c
   14fe0:	ldr	r0, [r9, #76]	; 0x4c
   14fe4:	cmp	r0, #0
   14fe8:	movwgt	sl, #1
   14fec:	orr	r0, r8, sl
   14ff0:	and	r0, r0, #1
   14ff4:	orr	r0, r1, r0, lsl #1
   14ff8:	strb	r0, [r9, #88]	; 0x58
   14ffc:	ldr	r1, [r9, #52]	; 0x34
   15000:	ldr	r0, [r9, #24]
   15004:	ldr	r1, [r1, #12]
   15008:	ldr	r1, [r1, #28]
   1500c:	str	r1, [r9, #72]	; 0x48
   15010:	add	r1, r1, r1, lsl #1
   15014:	add	r1, r0, r1, lsl #2
   15018:	sub	r0, fp, #40	; 0x28
   1501c:	bl	1c510 <__assert_fail@plt+0xaff8>
   15020:	cmp	r0, #0
   15024:	str	r0, [fp, #-48]	; 0xffffffd0
   15028:	bne	152a4 <__assert_fail@plt+0x3d8c>
   1502c:	ldr	r0, [r9, #76]	; 0x4c
   15030:	ldr	sl, [sp, #28]
   15034:	cmp	r0, #1
   15038:	ldrge	r7, [fp, #-36]	; 0xffffffdc
   1503c:	cmpge	r7, #1
   15040:	blt	15104 <__assert_fail@plt+0x3bec>
   15044:	mov	r6, #0
   15048:	sub	r8, fp, #40	; 0x28
   1504c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15050:	ldr	r2, [r9]
   15054:	ldr	r0, [r1, r6, lsl #2]
   15058:	add	r3, r2, r0, lsl #3
   1505c:	ldrb	r3, [r3, #4]
   15060:	cmp	r3, #4
   15064:	bne	150f8 <__assert_fail@plt+0x3be0>
   15068:	mov	r3, #0
   1506c:	cmp	r7, #1
   15070:	blt	150a4 <__assert_fail@plt+0x3b8c>
   15074:	ldr	r5, [r1, r3, lsl #2]
   15078:	add	r4, r2, r5, lsl #3
   1507c:	ldrb	r4, [r4, #4]
   15080:	cmp	r4, #9
   15084:	bne	15098 <__assert_fail@plt+0x3b80>
   15088:	ldr	r4, [r2, r0, lsl #3]
   1508c:	ldr	r5, [r2, r5, lsl #3]
   15090:	cmp	r5, r4
   15094:	beq	150a4 <__assert_fail@plt+0x3b8c>
   15098:	add	r3, r3, #1
   1509c:	cmp	r3, r7
   150a0:	blt	15074 <__assert_fail@plt+0x3b5c>
   150a4:	cmp	r3, r7
   150a8:	beq	150f8 <__assert_fail@plt+0x3be0>
   150ac:	ldr	r1, [r9, #20]
   150b0:	add	r0, r0, r0, lsl #1
   150b4:	add	r0, r1, r0, lsl #2
   150b8:	ldr	r0, [r0, #8]
   150bc:	ldr	r4, [r0]
   150c0:	mov	r0, r8
   150c4:	mov	r1, r4
   150c8:	bl	1c58c <__assert_fail@plt+0xb074>
   150cc:	cmp	r0, #0
   150d0:	bne	150f8 <__assert_fail@plt+0x3be0>
   150d4:	ldr	r0, [r9, #24]
   150d8:	add	r1, r4, r4, lsl #1
   150dc:	add	r1, r0, r1, lsl #2
   150e0:	mov	r0, r8
   150e4:	bl	1c160 <__assert_fail@plt+0xac48>
   150e8:	cmp	r0, #0
   150ec:	bne	151c0 <__assert_fail@plt+0x3ca8>
   150f0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   150f4:	mov	r6, #0
   150f8:	add	r6, r6, #1
   150fc:	cmp	r6, r7
   15100:	blt	1504c <__assert_fail@plt+0x3b34>
   15104:	sub	r0, fp, #48	; 0x30
   15108:	sub	r2, fp, #40	; 0x28
   1510c:	mov	r1, r9
   15110:	mov	r3, #0
   15114:	bl	1c5f0 <__assert_fail@plt+0xb0d8>
   15118:	cmp	r0, #0
   1511c:	str	r0, [r9, #36]	; 0x24
   15120:	beq	151a0 <__assert_fail@plt+0x3c88>
   15124:	ldrsb	r1, [r0, #52]	; 0x34
   15128:	cmn	r1, #1
   1512c:	ble	15140 <__assert_fail@plt+0x3c28>
   15130:	str	r0, [r9, #40]	; 0x28
   15134:	str	r0, [r9, #44]	; 0x2c
   15138:	str	r0, [r9, #48]	; 0x30
   1513c:	b	151b4 <__assert_fail@plt+0x3c9c>
   15140:	sub	r4, fp, #48	; 0x30
   15144:	sub	r6, fp, #40	; 0x28
   15148:	mov	r1, r9
   1514c:	mov	r3, #1
   15150:	mov	r0, r4
   15154:	mov	r2, r6
   15158:	bl	1c5f0 <__assert_fail@plt+0xb0d8>
   1515c:	str	r0, [r9, #40]	; 0x28
   15160:	mov	r0, r4
   15164:	mov	r1, r9
   15168:	mov	r2, r6
   1516c:	mov	r3, #2
   15170:	bl	1c5f0 <__assert_fail@plt+0xb0d8>
   15174:	str	r0, [r9, #44]	; 0x2c
   15178:	mov	r0, r4
   1517c:	mov	r1, r9
   15180:	mov	r2, r6
   15184:	mov	r3, #6
   15188:	bl	1c5f0 <__assert_fail@plt+0xb0d8>
   1518c:	str	r0, [r9, #48]	; 0x30
   15190:	ldr	r1, [r9, #40]	; 0x28
   15194:	cmp	r1, #0
   15198:	cmpne	r0, #0
   1519c:	bne	151a8 <__assert_fail@plt+0x3c90>
   151a0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   151a4:	b	151c0 <__assert_fail@plt+0x3ca8>
   151a8:	ldr	r0, [r9, #44]	; 0x2c
   151ac:	cmp	r0, #0
   151b0:	beq	151a0 <__assert_fail@plt+0x3c88>
   151b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   151b8:	bl	223dc <__assert_fail@plt+0x10ec4>
   151bc:	mov	r0, #0
   151c0:	str	r0, [fp, #-52]	; 0xffffffcc
   151c4:	mov	r0, sl
   151c8:	bl	17af4 <__assert_fail@plt+0x65dc>
   151cc:	add	r0, sp, #32
   151d0:	bl	17b44 <__assert_fail@plt+0x662c>
   151d4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   151d8:	mov	r4, #0
   151dc:	cmp	r0, #0
   151e0:	bne	14bcc <__assert_fail@plt+0x36b4>
   151e4:	mov	r0, r4
   151e8:	sub	sp, fp, #28
   151ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151f0:	orr	r0, r6, r8
   151f4:	tst	r0, #1
   151f8:	beq	14fd4 <__assert_fail@plt+0x3abc>
   151fc:	mov	r2, #0
   15200:	mov	r7, #7
   15204:	b	1520c <__assert_fail@plt+0x3cf4>
   15208:	ldr	r3, [r9]
   1520c:	add	r3, r3, r2, lsl #3
   15210:	ldr	r6, [r3, #4]
   15214:	uxtb	r1, r6
   15218:	cmp	r1, #5
   1521c:	beq	1523c <__assert_fail@plt+0x3d24>
   15220:	cmp	r1, #1
   15224:	bne	15244 <__assert_fail@plt+0x3d2c>
   15228:	ldrsb	r0, [r3]
   1522c:	cmn	r0, #1
   15230:	bicle	r0, r6, #2097152	; 0x200000
   15234:	strle	r0, [r3, #4]
   15238:	b	15244 <__assert_fail@plt+0x3d2c>
   1523c:	bfi	r6, r7, #0, #8
   15240:	str	r6, [r3, #4]
   15244:	ldr	r0, [r9, #8]
   15248:	add	r2, r2, #1
   1524c:	cmp	r2, r0
   15250:	bcc	15208 <__assert_fail@plt+0x3cf0>
   15254:	ldrb	r2, [r9, #88]	; 0x58
   15258:	b	14fd4 <__assert_fail@plt+0x3abc>
   1525c:	mov	r0, r9
   15260:	mov	r1, #160	; 0xa0
   15264:	mov	r4, #160	; 0xa0
   15268:	bl	22250 <__assert_fail@plt+0x10d38>
   1526c:	cmp	r0, #0
   15270:	beq	1529c <__assert_fail@plt+0x3d84>
   15274:	mov	r9, r0
   15278:	ldr	r0, [sp, #28]
   1527c:	str	r9, [r0]
   15280:	str	r4, [r0, #4]
   15284:	b	146b0 <__assert_fail@plt+0x3198>
   15288:	mov	r0, #12
   1528c:	str	r0, [fp, #-52]	; 0xffffffcc
   15290:	mov	r0, #0
   15294:	str	r0, [r9, #52]	; 0x34
   15298:	b	14bbc <__assert_fail@plt+0x36a4>
   1529c:	mov	r4, #12
   152a0:	b	151e4 <__assert_fail@plt+0x3ccc>
   152a4:	ldr	sl, [sp, #28]
   152a8:	b	151c0 <__assert_fail@plt+0x3ca8>
   152ac:	bl	114f4 <abort@plt>
   152b0:	movw	r2, #18120	; 0x46c8
   152b4:	movt	r2, #3
   152b8:	ldr	r1, [r2]
   152bc:	str	r0, [r2]
   152c0:	mov	r0, r1
   152c4:	bx	lr
   152c8:	push	{r4, r5, r6, sl, fp, lr}
   152cc:	add	fp, sp, #16
   152d0:	ldr	r5, [r0, #16]
   152d4:	ldr	r6, [r0]
   152d8:	mov	r4, r0
   152dc:	mov	r1, #0
   152e0:	mov	r2, #256	; 0x100
   152e4:	mov	r0, r5
   152e8:	bl	1141c <memset@plt>
   152ec:	ldr	r1, [r6, #36]	; 0x24
   152f0:	mov	r0, r4
   152f4:	mov	r2, r5
   152f8:	bl	15364 <__assert_fail@plt+0x3e4c>
   152fc:	ldr	r0, [r6, #36]	; 0x24
   15300:	ldr	r1, [r6, #40]	; 0x28
   15304:	cmp	r0, r1
   15308:	beq	1531c <__assert_fail@plt+0x3e04>
   1530c:	mov	r0, r4
   15310:	mov	r2, r5
   15314:	bl	15364 <__assert_fail@plt+0x3e4c>
   15318:	ldr	r0, [r6, #36]	; 0x24
   1531c:	ldr	r1, [r6, #44]	; 0x2c
   15320:	cmp	r0, r1
   15324:	beq	15338 <__assert_fail@plt+0x3e20>
   15328:	mov	r0, r4
   1532c:	mov	r2, r5
   15330:	bl	15364 <__assert_fail@plt+0x3e4c>
   15334:	ldr	r0, [r6, #36]	; 0x24
   15338:	ldr	r1, [r6, #48]	; 0x30
   1533c:	cmp	r0, r1
   15340:	beq	15350 <__assert_fail@plt+0x3e38>
   15344:	mov	r0, r4
   15348:	mov	r2, r5
   1534c:	bl	15364 <__assert_fail@plt+0x3e4c>
   15350:	ldrb	r0, [r4, #28]
   15354:	orr	r0, r0, #8
   15358:	strb	r0, [r4, #28]
   1535c:	mov	r0, #0
   15360:	pop	{r4, r5, r6, sl, fp, pc}
   15364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15368:	add	fp, sp, #28
   1536c:	sub	sp, sp, #308	; 0x134
   15370:	ldr	r8, [r0]
   15374:	str	r0, [sp, #16]
   15378:	mov	sl, #0
   1537c:	str	r2, [sp, #28]
   15380:	ldr	r0, [r8, #92]	; 0x5c
   15384:	cmp	r0, #1
   15388:	ldreq	r0, [sp, #16]
   1538c:	ldrbeq	r0, [r0, #14]
   15390:	ubfxeq	sl, r0, #6, #1
   15394:	ldr	r0, [r1, #8]
   15398:	cmp	r0, #1
   1539c:	blt	15710 <__assert_fail@plt+0x41f8>
   153a0:	add	r0, sp, #32
   153a4:	mov	r4, #1
   153a8:	mov	r2, #0
   153ac:	str	r1, [sp, #8]
   153b0:	str	r8, [sp, #20]
   153b4:	add	r0, r0, #1
   153b8:	str	r0, [sp, #4]
   153bc:	movw	r0, #1
   153c0:	movt	r0, #32
   153c4:	add	r0, r0, #254	; 0xfe
   153c8:	str	r0, [sp]
   153cc:	ldr	r0, [r1, #12]
   153d0:	str	r2, [sp, #12]
   153d4:	ldr	r9, [r0, r2, lsl #2]
   153d8:	ldr	r0, [r8]
   153dc:	add	r1, r0, r9, lsl #3
   153e0:	ldrb	r5, [r1, #4]
   153e4:	sub	r1, r5, #1
   153e8:	cmp	r1, #6
   153ec:	bhi	156d0 <__assert_fail@plt+0x41b8>
   153f0:	add	r2, pc, #0
   153f4:	ldr	pc, [r2, r1, lsl #2]
   153f8:	andeq	r5, r1, r4, lsl r4
   153fc:	andeq	r5, r1, ip, ror #13
   15400:	andeq	r5, r1, r0, lsr #10
   15404:	ldrdeq	r5, [r1], -r0
   15408:	andeq	r5, r1, ip, ror #13
   1540c:	muleq	r1, r8, r5
   15410:	andeq	r5, r1, ip, ror #13
   15414:	ldrb	r0, [r0, r9, lsl #3]
   15418:	ldr	r1, [sp, #28]
   1541c:	cmp	sl, #0
   15420:	strb	r4, [r1, r0]
   15424:	beq	15434 <__assert_fail@plt+0x3f1c>
   15428:	bl	112b4 <tolower@plt>
   1542c:	ldr	r1, [sp, #28]
   15430:	strb	r4, [r1, r0]
   15434:	ldr	r0, [sp, #16]
   15438:	ldrb	r0, [r0, #14]
   1543c:	tst	r0, #64	; 0x40
   15440:	beq	156d0 <__assert_fail@plt+0x41b8>
   15444:	ldr	r0, [r8, #92]	; 0x5c
   15448:	cmp	r0, #2
   1544c:	blt	156d0 <__assert_fail@plt+0x41b8>
   15450:	ldr	r0, [r8]
   15454:	add	r1, r9, #1
   15458:	add	r5, sp, #32
   1545c:	mov	r3, r9
   15460:	movw	r6, #1
   15464:	mov	r7, #0
   15468:	movt	r6, #32
   1546c:	ldrb	r0, [r0, r9, lsl #3]
   15470:	mov	r9, r5
   15474:	ldr	r5, [sp]
   15478:	strb	r0, [sp, #32]
   1547c:	ldr	r0, [r8, #8]
   15480:	cmp	r1, r0
   15484:	ldr	r0, [sp, #4]
   15488:	bcs	154c8 <__assert_fail@plt+0x3fb0>
   1548c:	ldr	r0, [sp, #4]
   15490:	ldr	r1, [r8]
   15494:	add	r1, r1, r3, lsl #3
   15498:	ldr	r2, [r1, #12]
   1549c:	and	r2, r2, r5
   154a0:	cmp	r2, r6
   154a4:	bne	154c8 <__assert_fail@plt+0x3fb0>
   154a8:	ldrb	r1, [r1, #8]
   154ac:	strb	r1, [r0], #1
   154b0:	add	r1, r3, #1
   154b4:	add	r3, r3, #2
   154b8:	ldr	r2, [r8, #8]
   154bc:	cmp	r3, r2
   154c0:	mov	r3, r1
   154c4:	bcc	15490 <__assert_fail@plt+0x3f78>
   154c8:	sub	r6, r0, r9
   154cc:	sub	r5, fp, #48	; 0x30
   154d0:	sub	r0, fp, #36	; 0x24
   154d4:	mov	r1, r9
   154d8:	str	r7, [fp, #-44]	; 0xffffffd4
   154dc:	str	r7, [fp, #-48]	; 0xffffffd0
   154e0:	mov	r2, r6
   154e4:	mov	r3, r5
   154e8:	bl	2243c <__assert_fail@plt+0x10f24>
   154ec:	cmp	r0, r6
   154f0:	bne	156d0 <__assert_fail@plt+0x41b8>
   154f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   154f8:	bl	112cc <towlower@plt>
   154fc:	mov	r1, r0
   15500:	mov	r0, r9
   15504:	mov	r2, r5
   15508:	bl	11230 <wcrtomb@plt>
   1550c:	cmn	r0, #1
   15510:	ldrbne	r0, [sp, #32]
   15514:	ldrne	r1, [sp, #28]
   15518:	strbne	r4, [r1, r0]
   1551c:	b	156d0 <__assert_fail@plt+0x41b8>
   15520:	ldr	r5, [sp, #28]
   15524:	mov	r7, #0
   15528:	mov	r6, #0
   1552c:	str	r9, [sp, #24]
   15530:	b	15540 <__assert_fail@plt+0x4028>
   15534:	ldr	r0, [r8]
   15538:	add	r5, r5, #32
   1553c:	add	r7, r7, #32
   15540:	ldr	r0, [r0, r9, lsl #3]
   15544:	mov	r8, #0
   15548:	ldr	r9, [r0, r6, lsl #2]
   1554c:	b	15564 <__assert_fail@plt+0x404c>
   15550:	add	r0, r7, r8
   15554:	bl	112b4 <tolower@plt>
   15558:	ldr	r1, [sp, #28]
   1555c:	strb	r4, [r1, r0]
   15560:	b	15574 <__assert_fail@plt+0x405c>
   15564:	tst	r9, r4, lsl r8
   15568:	strbne	r4, [r5, r8]
   1556c:	cmpne	sl, #0
   15570:	bne	15550 <__assert_fail@plt+0x4038>
   15574:	add	r8, r8, #1
   15578:	cmp	r8, #32
   1557c:	bne	15564 <__assert_fail@plt+0x404c>
   15580:	ldr	r8, [sp, #20]
   15584:	ldr	r9, [sp, #24]
   15588:	add	r6, r6, #1
   1558c:	cmp	r6, #8
   15590:	bne	15534 <__assert_fail@plt+0x401c>
   15594:	b	156d0 <__assert_fail@plt+0x41b8>
   15598:	ldr	r6, [r0, r9, lsl #3]
   1559c:	ldr	r0, [r8, #92]	; 0x5c
   155a0:	cmp	r0, #2
   155a4:	blt	15618 <__assert_fail@plt+0x4100>
   155a8:	ldr	r0, [r6, #36]	; 0x24
   155ac:	cmp	r0, #0
   155b0:	bne	155c8 <__assert_fail@plt+0x40b0>
   155b4:	ldrb	r0, [r6, #16]
   155b8:	tst	r0, #1
   155bc:	ldreq	r0, [r6, #32]
   155c0:	cmpeq	r0, #0
   155c4:	beq	15618 <__assert_fail@plt+0x4100>
   155c8:	mov	r6, #0
   155cc:	add	r5, sp, #32
   155d0:	sub	r7, fp, #48	; 0x30
   155d4:	strb	r6, [fp, #-48]	; 0xffffffd0
   155d8:	mov	r0, #0
   155dc:	mov	r1, r7
   155e0:	mov	r2, #1
   155e4:	mov	r3, r5
   155e8:	str	r6, [sp, #36]	; 0x24
   155ec:	str	r6, [sp, #32]
   155f0:	bl	2243c <__assert_fail@plt+0x10f24>
   155f4:	cmn	r0, #2
   155f8:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   155fc:	ldreq	r0, [sp, #28]
   15600:	strbeq	r4, [r0, r1]
   15604:	add	r0, r1, #1
   15608:	tst	r0, #255	; 0xff
   1560c:	strb	r0, [fp, #-48]	; 0xffffffd0
   15610:	bne	155d8 <__assert_fail@plt+0x40c0>
   15614:	b	156d0 <__assert_fail@plt+0x41b8>
   15618:	ldr	r0, [r6, #20]
   1561c:	cmp	r0, #1
   15620:	blt	156d0 <__assert_fail@plt+0x41b8>
   15624:	mov	r9, #0
   15628:	mov	r0, #0
   1562c:	sub	r7, fp, #48	; 0x30
   15630:	add	r5, sp, #32
   15634:	str	r0, [fp, #-44]	; 0xffffffd4
   15638:	str	r0, [fp, #-48]	; 0xffffffd0
   1563c:	mov	r2, r7
   15640:	ldr	r0, [r6]
   15644:	ldr	r1, [r0, r9, lsl #2]
   15648:	mov	r0, r5
   1564c:	bl	11230 <wcrtomb@plt>
   15650:	cmn	r0, #1
   15654:	beq	15678 <__assert_fail@plt+0x4160>
   15658:	ldrb	r0, [sp, #32]
   1565c:	ldr	r1, [sp, #28]
   15660:	cmp	sl, #0
   15664:	strb	r4, [r1, r0]
   15668:	beq	15678 <__assert_fail@plt+0x4160>
   1566c:	bl	112b4 <tolower@plt>
   15670:	ldr	r1, [sp, #28]
   15674:	strb	r4, [r1, r0]
   15678:	ldr	r0, [sp, #16]
   1567c:	ldrb	r0, [r0, #14]
   15680:	tst	r0, #64	; 0x40
   15684:	beq	156c0 <__assert_fail@plt+0x41a8>
   15688:	ldr	r0, [r8, #92]	; 0x5c
   1568c:	cmp	r0, #2
   15690:	blt	156c0 <__assert_fail@plt+0x41a8>
   15694:	ldr	r0, [r6]
   15698:	ldr	r0, [r0, r9, lsl #2]
   1569c:	bl	112cc <towlower@plt>
   156a0:	mov	r1, r0
   156a4:	mov	r0, r5
   156a8:	mov	r2, r7
   156ac:	bl	11230 <wcrtomb@plt>
   156b0:	cmn	r0, #1
   156b4:	ldrbne	r0, [sp, #32]
   156b8:	ldrne	r1, [sp, #28]
   156bc:	strbne	r4, [r1, r0]
   156c0:	ldr	r0, [r6, #20]
   156c4:	add	r9, r9, #1
   156c8:	cmp	r9, r0
   156cc:	blt	15628 <__assert_fail@plt+0x4110>
   156d0:	ldr	r1, [sp, #8]
   156d4:	ldr	r2, [sp, #12]
   156d8:	ldr	r0, [r1, #8]
   156dc:	add	r2, r2, #1
   156e0:	cmp	r2, r0
   156e4:	blt	153cc <__assert_fail@plt+0x3eb4>
   156e8:	b	15710 <__assert_fail@plt+0x41f8>
   156ec:	ldr	r0, [sp, #28]
   156f0:	mov	r1, #1
   156f4:	mov	r2, #256	; 0x100
   156f8:	bl	1141c <memset@plt>
   156fc:	cmp	r5, #2
   15700:	ldreq	r1, [sp, #16]
   15704:	ldrbeq	r0, [r1, #28]
   15708:	orreq	r0, r0, #1
   1570c:	strbeq	r0, [r1, #28]
   15710:	sub	sp, fp, #28
   15714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15718:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1571c:	add	fp, sp, #24
   15720:	mov	r4, r0
   15724:	mov	r0, #0
   15728:	mov	r6, r2
   1572c:	mov	r8, r1
   15730:	str	r0, [r4]
   15734:	str	r0, [r4, #4]
   15738:	str	r0, [r4, #8]
   1573c:	mov	r0, #256	; 0x100
   15740:	bl	22220 <__assert_fail@plt+0x10d08>
   15744:	cmp	r0, #0
   15748:	str	r0, [r4, #16]
   1574c:	beq	157fc <__assert_fail@plt+0x42e4>
   15750:	movw	r0, #45820	; 0xb2fc
   15754:	tst	r6, #1
   15758:	and	r1, r6, #2
   1575c:	movt	r0, #3
   15760:	movweq	r0, #710	; 0x2c6
   15764:	movteq	r0, #257	; 0x101
   15768:	tst	r6, #4
   1576c:	orr	r5, r0, r1, lsl #21
   15770:	bne	15784 <__assert_fail@plt+0x426c>
   15774:	ldrb	r0, [r4, #28]
   15778:	and	r0, r0, #127	; 0x7f
   1577c:	strb	r0, [r4, #28]
   15780:	b	157a4 <__assert_fail@plt+0x428c>
   15784:	ldrb	r0, [r4, #28]
   15788:	mvn	r1, #127	; 0x7f
   1578c:	orr	r0, r0, r1
   15790:	movw	r1, #45758	; 0xb2be
   15794:	movt	r1, #323	; 0x143
   15798:	strb	r0, [r4, #28]
   1579c:	and	r1, r5, r1
   157a0:	orr	r5, r1, #256	; 0x100
   157a4:	and	r1, r6, #8
   157a8:	and	r0, r0, #239	; 0xef
   157ac:	mov	r7, #0
   157b0:	orr	r0, r0, r1, lsl #1
   157b4:	str	r7, [r4, #20]
   157b8:	strb	r0, [r4, #28]
   157bc:	mov	r0, r8
   157c0:	bl	113e0 <strlen@plt>
   157c4:	mov	r2, r0
   157c8:	mov	r0, r4
   157cc:	mov	r1, r8
   157d0:	mov	r3, r5
   157d4:	bl	14664 <__assert_fail@plt+0x314c>
   157d8:	mov	r5, r0
   157dc:	cmp	r0, #16
   157e0:	movweq	r5, #8
   157e4:	cmp	r5, #0
   157e8:	bne	15804 <__assert_fail@plt+0x42ec>
   157ec:	mov	r0, r4
   157f0:	bl	152c8 <__assert_fail@plt+0x3db0>
   157f4:	mov	r0, r7
   157f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   157fc:	mov	r7, #12
   15800:	b	157f4 <__assert_fail@plt+0x42dc>
   15804:	ldr	r0, [r4, #16]
   15808:	bl	223dc <__assert_fail@plt+0x10ec4>
   1580c:	str	r7, [r4, #16]
   15810:	mov	r7, r5
   15814:	b	157f4 <__assert_fail@plt+0x42dc>
   15818:	push	{r4, r5, r6, r7, fp, lr}
   1581c:	add	fp, sp, #16
   15820:	cmp	r0, #17
   15824:	bcs	15898 <__assert_fail@plt+0x4380>
   15828:	movw	r1, #14080	; 0x3700
   1582c:	mov	r4, r2
   15830:	mov	r2, #5
   15834:	mov	r5, r3
   15838:	movt	r1, #2
   1583c:	ldr	r0, [r1, r0, lsl #2]
   15840:	movw	r1, #13696	; 0x3580
   15844:	movt	r1, #2
   15848:	add	r1, r1, r0
   1584c:	mov	r0, #0
   15850:	bl	11314 <dcgettext@plt>
   15854:	mov	r6, r0
   15858:	bl	113e0 <strlen@plt>
   1585c:	add	r7, r0, #1
   15860:	cmp	r5, #0
   15864:	beq	15880 <__assert_fail@plt+0x4368>
   15868:	cmp	r7, r5
   1586c:	mov	r2, r7
   15870:	bhi	15888 <__assert_fail@plt+0x4370>
   15874:	mov	r0, r4
   15878:	mov	r1, r6
   1587c:	bl	112a8 <memcpy@plt>
   15880:	mov	r0, r7
   15884:	pop	{r4, r5, r6, r7, fp, pc}
   15888:	sub	r2, r5, #1
   1588c:	mov	r0, #0
   15890:	strb	r0, [r4, r2]
   15894:	b	15874 <__assert_fail@plt+0x435c>
   15898:	bl	114f4 <abort@plt>
   1589c:	push	{r4, r5, fp, lr}
   158a0:	add	fp, sp, #8
   158a4:	ldr	r5, [r0]
   158a8:	mov	r4, r0
   158ac:	cmp	r5, #0
   158b0:	beq	158dc <__assert_fail@plt+0x43c4>
   158b4:	movw	r0, #0
   158b8:	movw	r1, #0
   158bc:	movt	r0, #0
   158c0:	movt	r1, #0
   158c4:	orrs	r0, r1, r0
   158c8:	beq	158d4 <__assert_fail@plt+0x43bc>
   158cc:	add	r0, r5, #136	; 0x88
   158d0:	bl	11260 <pthread_mutex_destroy@plt>
   158d4:	mov	r0, r5
   158d8:	bl	15904 <__assert_fail@plt+0x43ec>
   158dc:	mov	r5, #0
   158e0:	str	r5, [r4]
   158e4:	str	r5, [r4, #4]
   158e8:	ldr	r0, [r4, #16]
   158ec:	bl	223dc <__assert_fail@plt+0x10ec4>
   158f0:	str	r5, [r4, #16]
   158f4:	ldr	r0, [r4, #20]
   158f8:	bl	223dc <__assert_fail@plt+0x10ec4>
   158fc:	str	r5, [r4, #20]
   15900:	pop	{r4, r5, fp, pc}
   15904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15908:	add	fp, sp, #28
   1590c:	sub	sp, sp, #4
   15910:	mov	sl, r0
   15914:	ldr	r0, [r0]
   15918:	cmp	r0, #0
   1591c:	ldrne	r1, [sl, #8]
   15920:	cmpne	r1, #0
   15924:	bne	15a70 <__assert_fail@plt+0x4558>
   15928:	ldr	r0, [sl, #12]
   1592c:	bl	223dc <__assert_fail@plt+0x10ec4>
   15930:	ldr	r0, [sl, #8]
   15934:	cmp	r0, #0
   15938:	beq	159a4 <__assert_fail@plt+0x448c>
   1593c:	add	r7, sl, #20
   15940:	add	r8, sl, #28
   15944:	add	r9, sl, #24
   15948:	mov	r5, #0
   1594c:	mov	r6, #8
   15950:	ldr	r0, [r9]
   15954:	cmp	r0, #0
   15958:	beq	15964 <__assert_fail@plt+0x444c>
   1595c:	ldr	r0, [r0, r6]
   15960:	bl	223dc <__assert_fail@plt+0x10ec4>
   15964:	ldr	r0, [r8]
   15968:	cmp	r0, #0
   1596c:	beq	15978 <__assert_fail@plt+0x4460>
   15970:	ldr	r0, [r0, r6]
   15974:	bl	223dc <__assert_fail@plt+0x10ec4>
   15978:	ldr	r0, [r7]
   1597c:	cmp	r0, #0
   15980:	beq	1598c <__assert_fail@plt+0x4474>
   15984:	ldr	r0, [r0, r6]
   15988:	bl	223dc <__assert_fail@plt+0x10ec4>
   1598c:	ldr	r0, [sl, #8]
   15990:	add	r5, r5, #1
   15994:	add	r6, r6, #12
   15998:	cmp	r5, r0
   1599c:	bcc	15950 <__assert_fail@plt+0x4438>
   159a0:	b	159b0 <__assert_fail@plt+0x4498>
   159a4:	add	r8, sl, #28
   159a8:	add	r9, sl, #24
   159ac:	add	r7, sl, #20
   159b0:	ldr	r0, [r7]
   159b4:	bl	223dc <__assert_fail@plt+0x10ec4>
   159b8:	ldr	r0, [r9]
   159bc:	bl	223dc <__assert_fail@plt+0x10ec4>
   159c0:	ldr	r0, [r8]
   159c4:	bl	223dc <__assert_fail@plt+0x10ec4>
   159c8:	ldr	r0, [sl]
   159cc:	bl	223dc <__assert_fail@plt+0x10ec4>
   159d0:	ldr	r5, [sl, #32]
   159d4:	cmp	r5, #0
   159d8:	beq	15a38 <__assert_fail@plt+0x4520>
   159dc:	mov	r6, #0
   159e0:	b	159ec <__assert_fail@plt+0x44d4>
   159e4:	ldr	r5, [sl, #32]
   159e8:	add	r6, r6, #1
   159ec:	add	r0, r6, r6, lsl #1
   159f0:	ldr	r0, [r5, r0, lsl #2]!
   159f4:	add	r7, r5, #8
   159f8:	cmp	r0, #1
   159fc:	blt	15a20 <__assert_fail@plt+0x4508>
   15a00:	mov	r4, #0
   15a04:	ldr	r0, [r7]
   15a08:	ldr	r0, [r0, r4, lsl #2]
   15a0c:	bl	17a5c <__assert_fail@plt+0x6544>
   15a10:	ldr	r0, [r5]
   15a14:	add	r4, r4, #1
   15a18:	cmp	r4, r0
   15a1c:	blt	15a04 <__assert_fail@plt+0x44ec>
   15a20:	ldr	r0, [r7]
   15a24:	bl	223dc <__assert_fail@plt+0x10ec4>
   15a28:	ldr	r0, [sl, #68]	; 0x44
   15a2c:	cmp	r6, r0
   15a30:	bcc	159e4 <__assert_fail@plt+0x44cc>
   15a34:	ldr	r5, [sl, #32]
   15a38:	mov	r0, r5
   15a3c:	bl	223dc <__assert_fail@plt+0x10ec4>
   15a40:	ldr	r0, [sl, #60]	; 0x3c
   15a44:	movw	r1, #14148	; 0x3744
   15a48:	movt	r1, #2
   15a4c:	cmp	r0, r1
   15a50:	beq	15a58 <__assert_fail@plt+0x4540>
   15a54:	bl	223dc <__assert_fail@plt+0x10ec4>
   15a58:	ldr	r0, [sl, #132]	; 0x84
   15a5c:	bl	223dc <__assert_fail@plt+0x10ec4>
   15a60:	mov	r0, sl
   15a64:	sub	sp, fp, #28
   15a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a6c:	b	223dc <__assert_fail@plt+0x10ec4>
   15a70:	bl	17a2c <__assert_fail@plt+0x6514>
   15a74:	ldr	r0, [sl, #8]
   15a78:	cmp	r0, #2
   15a7c:	bcc	15928 <__assert_fail@plt+0x4410>
   15a80:	mov	r5, #1
   15a84:	mov	r6, #8
   15a88:	ldr	r0, [sl]
   15a8c:	add	r0, r0, r6
   15a90:	bl	17a2c <__assert_fail@plt+0x6514>
   15a94:	ldr	r0, [sl, #8]
   15a98:	add	r5, r5, #1
   15a9c:	add	r6, r6, #8
   15aa0:	cmp	r5, r0
   15aa4:	bcc	15a88 <__assert_fail@plt+0x4570>
   15aa8:	b	15928 <__assert_fail@plt+0x4410>
   15aac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ab0:	add	fp, sp, #28
   15ab4:	sub	sp, sp, #28
   15ab8:	ldr	sl, [fp, #8]
   15abc:	mov	r7, #2
   15ac0:	cmp	sl, #7
   15ac4:	bhi	15b98 <__assert_fail@plt+0x4680>
   15ac8:	mov	r5, r0
   15acc:	ldr	r0, [r0]
   15ad0:	mov	r6, r3
   15ad4:	mov	r9, r2
   15ad8:	mov	r4, r1
   15adc:	tst	sl, #4
   15ae0:	str	r0, [sp, #24]
   15ae4:	bne	15afc <__assert_fail@plt+0x45e4>
   15ae8:	mov	r0, r4
   15aec:	bl	113e0 <strlen@plt>
   15af0:	mov	r7, r0
   15af4:	mov	r8, #0
   15af8:	b	15b04 <__assert_fail@plt+0x45ec>
   15afc:	ldr	r8, [r6]
   15b00:	ldr	r7, [r6, #4]
   15b04:	movw	r0, #0
   15b08:	movw	r1, #0
   15b0c:	movt	r0, #0
   15b10:	movt	r1, #0
   15b14:	orrs	r0, r1, r0
   15b18:	str	r0, [sp, #20]
   15b1c:	beq	15b2c <__assert_fail@plt+0x4614>
   15b20:	ldr	r0, [sp, #24]
   15b24:	add	r0, r0, #136	; 0x88
   15b28:	bl	11290 <pthread_mutex_lock@plt>
   15b2c:	ldrb	r0, [r5, #28]
   15b30:	tst	r0, #16
   15b34:	bne	15b48 <__assert_fail@plt+0x4630>
   15b38:	str	r7, [sp]
   15b3c:	stmib	sp, {r7, r9}
   15b40:	str	r6, [sp, #12]
   15b44:	b	15b5c <__assert_fail@plt+0x4644>
   15b48:	mov	r0, #0
   15b4c:	str	r7, [sp]
   15b50:	str	r7, [sp, #4]
   15b54:	str	r0, [sp, #8]
   15b58:	str	r0, [sp, #12]
   15b5c:	mov	r0, r5
   15b60:	mov	r1, r4
   15b64:	mov	r2, r7
   15b68:	mov	r3, r8
   15b6c:	str	sl, [sp, #16]
   15b70:	bl	15ba4 <__assert_fail@plt+0x468c>
   15b74:	mov	r7, r0
   15b78:	ldr	r0, [sp, #20]
   15b7c:	cmp	r0, #0
   15b80:	beq	15b90 <__assert_fail@plt+0x4678>
   15b84:	ldr	r0, [sp, #24]
   15b88:	add	r0, r0, #136	; 0x88
   15b8c:	bl	111f4 <pthread_mutex_unlock@plt>
   15b90:	cmp	r7, #0
   15b94:	movwne	r7, #1
   15b98:	mov	r0, r7
   15b9c:	sub	sp, fp, #28
   15ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ba8:	add	fp, sp, #28
   15bac:	sub	sp, sp, #436	; 0x1b4
   15bb0:	ldr	r5, [r0]
   15bb4:	str	r2, [sp, #108]	; 0x6c
   15bb8:	str	r1, [sp, #104]	; 0x68
   15bbc:	mov	r9, r0
   15bc0:	add	r0, sp, #112	; 0x70
   15bc4:	mov	r1, #0
   15bc8:	mov	r2, #136	; 0x88
   15bcc:	mov	r7, r3
   15bd0:	mov	r8, #0
   15bd4:	bl	1141c <memset@plt>
   15bd8:	str	r5, [sp, #196]	; 0xc4
   15bdc:	ldr	r0, [fp, #8]
   15be0:	mov	sl, #0
   15be4:	ldr	r1, [r9, #16]
   15be8:	cmp	r1, #0
   15bec:	beq	15c08 <__assert_fail@plt+0x46f0>
   15bf0:	ldrb	r2, [r9, #28]
   15bf4:	and	r2, r2, #9
   15bf8:	cmp	r2, #8
   15bfc:	movne	r1, #0
   15c00:	subs	sl, r7, r0
   15c04:	movne	sl, r1
   15c08:	ldr	r2, [r9, #24]
   15c0c:	ldr	r6, [fp, #16]
   15c10:	ldr	r1, [r9, #8]
   15c14:	mov	r4, #1
   15c18:	mvn	r3, r2
   15c1c:	cmp	r2, r6
   15c20:	addcc	r8, r3, r6
   15c24:	cmp	r1, #0
   15c28:	beq	1746c <__assert_fail@plt+0x5f54>
   15c2c:	ldr	r1, [r5, #36]	; 0x24
   15c30:	cmp	r1, #0
   15c34:	ldrne	r2, [r5, #40]	; 0x28
   15c38:	cmpne	r2, #0
   15c3c:	beq	1746c <__assert_fail@plt+0x5f54>
   15c40:	ldr	r3, [r5, #44]	; 0x2c
   15c44:	cmp	r3, #0
   15c48:	ldrne	r6, [r5, #48]	; 0x30
   15c4c:	cmpne	r6, #0
   15c50:	beq	1746c <__assert_fail@plt+0x5f54>
   15c54:	ldr	r1, [r1, #8]
   15c58:	ldr	r6, [r9, #20]
   15c5c:	cmp	r1, #0
   15c60:	beq	15c70 <__assert_fail@plt+0x4758>
   15c64:	ldr	lr, [sp, #108]	; 0x6c
   15c68:	ldr	ip, [sp, #104]	; 0x68
   15c6c:	b	15c84 <__assert_fail@plt+0x476c>
   15c70:	ldr	r1, [r2, #8]
   15c74:	ldr	lr, [sp, #108]	; 0x6c
   15c78:	ldr	ip, [sp, #104]	; 0x68
   15c7c:	cmp	r1, #0
   15c80:	beq	16c94 <__assert_fail@plt+0x577c>
   15c84:	str	r0, [sp, #96]	; 0x60
   15c88:	ldr	r0, [fp, #16]
   15c8c:	subs	r0, r0, r8
   15c90:	str	r0, [sp, #92]	; 0x5c
   15c94:	mov	r0, #1
   15c98:	str	r0, [sp, #68]	; 0x44
   15c9c:	bne	15cb0 <__assert_fail@plt+0x4798>
   15ca0:	ldr	r0, [r5, #76]	; 0x4c
   15ca4:	cmp	r0, #0
   15ca8:	movwne	r0, #1
   15cac:	str	r0, [sp, #68]	; 0x44
   15cb0:	ldr	r0, [r9, #12]
   15cb4:	ldr	r2, [r5, #92]	; 0x5c
   15cb8:	ldr	r1, [r5, #8]
   15cbc:	str	r6, [sp, #176]	; 0xb0
   15cc0:	str	ip, [sp, #112]	; 0x70
   15cc4:	vdup.32	q8, lr
   15cc8:	str	r2, [sp, #192]	; 0xc0
   15ccc:	ubfx	r3, r0, #22, #1
   15cd0:	and	r0, r0, #4194304	; 0x400000
   15cd4:	str	r6, [sp, #100]	; 0x64
   15cd8:	add	r1, r1, #1
   15cdc:	orrs	r0, r6, r0
   15ce0:	strb	r3, [sp, #184]	; 0xb8
   15ce4:	movwne	r0, #1
   15ce8:	cmp	r2, r1
   15cec:	strb	r0, [sp, #187]	; 0xbb
   15cf0:	add	r0, sp, #112	; 0x70
   15cf4:	movgt	r1, r2
   15cf8:	add	r2, lr, #1
   15cfc:	ldrb	r6, [r5, #88]	; 0x58
   15d00:	add	r3, r0, #44	; 0x2c
   15d04:	cmp	r2, r1
   15d08:	vst1.32	{d16-d17}, [r3]
   15d0c:	movlt	r1, r2
   15d10:	ubfx	r3, r6, #3, #1
   15d14:	strb	r3, [sp, #186]	; 0xba
   15d18:	ubfx	r3, r6, #2, #1
   15d1c:	strb	r3, [sp, #185]	; 0xb9
   15d20:	bl	17b78 <__assert_fail@plt+0x6660>
   15d24:	cmp	r0, #0
   15d28:	bne	174e4 <__assert_fail@plt+0x5fcc>
   15d2c:	add	r1, r5, #96	; 0x60
   15d30:	ldr	r2, [fp, #24]
   15d34:	ldr	r0, [fp, #12]
   15d38:	str	r1, [sp, #180]	; 0xb4
   15d3c:	ldrb	r1, [r5, #88]	; 0x58
   15d40:	ubfx	r1, r1, #4, #1
   15d44:	ldr	ip, [sp, #108]	; 0x6c
   15d48:	strb	r1, [sp, #190]	; 0xbe
   15d4c:	mov	r1, #0
   15d50:	ldrb	r3, [sp, #187]	; 0xbb
   15d54:	cmp	r3, #0
   15d58:	ldr	r3, [sp, #104]	; 0x68
   15d5c:	bne	15d74 <__assert_fail@plt+0x485c>
   15d60:	str	r3, [sp, #116]	; 0x74
   15d64:	ldr	r1, [r5, #92]	; 0x5c
   15d68:	cmp	r1, #1
   15d6c:	mov	r1, ip
   15d70:	movwgt	r1, #0
   15d74:	str	r1, [sp, #144]	; 0x90
   15d78:	str	r1, [sp, #140]	; 0x8c
   15d7c:	str	r0, [sp, #168]	; 0xa8
   15d80:	str	r0, [sp, #164]	; 0xa4
   15d84:	mov	r1, r5
   15d88:	str	r9, [sp, #44]	; 0x2c
   15d8c:	ldrb	r0, [r9, #28]
   15d90:	str	r1, [sp, #84]	; 0x54
   15d94:	lsr	r0, r0, #7
   15d98:	strb	r0, [sp, #189]	; 0xbd
   15d9c:	mov	r0, r5
   15da0:	ldr	r5, [sp, #100]	; 0x64
   15da4:	ldr	r6, [r0, #76]!	; 0x4c
   15da8:	str	r0, [sp, #64]	; 0x40
   15dac:	mvn	r0, #0
   15db0:	lsl	r9, r6, #1
   15db4:	cmp	r6, #1
   15db8:	str	r0, [sp, #204]	; 0xcc
   15dbc:	str	r2, [sp, #200]	; 0xc8
   15dc0:	blt	15e20 <__assert_fail@plt+0x4908>
   15dc4:	movw	r0, #43690	; 0xaaaa
   15dc8:	mov	r4, #12
   15dcc:	movt	r0, #2730	; 0xaaa
   15dd0:	cmp	r9, r0
   15dd4:	bhi	17434 <__assert_fail@plt+0x5f1c>
   15dd8:	add	r0, r6, r6, lsl #1
   15ddc:	mov	r5, r8
   15de0:	lsl	r0, r0, #4
   15de4:	bl	22220 <__assert_fail@plt+0x10d08>
   15de8:	mov	r8, r0
   15dec:	str	r0, [sp, #228]	; 0xe4
   15df0:	lsl	r0, r6, #3
   15df4:	bl	22220 <__assert_fail@plt+0x10d08>
   15df8:	cmp	r0, #0
   15dfc:	str	r0, [sp, #244]	; 0xf4
   15e00:	beq	17434 <__assert_fail@plt+0x5f1c>
   15e04:	cmp	r8, #0
   15e08:	mov	r8, r5
   15e0c:	ldr	ip, [sp, #108]	; 0x6c
   15e10:	ldr	r3, [sp, #104]	; 0x68
   15e14:	ldr	r5, [sp, #100]	; 0x64
   15e18:	ldr	r2, [fp, #24]
   15e1c:	beq	17434 <__assert_fail@plt+0x5f1c>
   15e20:	mov	r0, #1
   15e24:	str	r0, [sp, #232]	; 0xe8
   15e28:	ldr	r0, [sp, #92]	; 0x5c
   15e2c:	str	r9, [sp, #224]	; 0xe0
   15e30:	str	r9, [sp, #240]	; 0xf0
   15e34:	cmp	r0, #1
   15e38:	bhi	15e4c <__assert_fail@plt+0x4934>
   15e3c:	ldr	r0, [sp, #84]	; 0x54
   15e40:	ldrb	r0, [r0, #88]	; 0x58
   15e44:	tst	r0, #2
   15e48:	beq	15e84 <__assert_fail@plt+0x496c>
   15e4c:	ldr	r0, [sp, #148]	; 0x94
   15e50:	mov	r4, #12
   15e54:	cmn	r0, #-1073741822	; 0xc0000002
   15e58:	bhi	17434 <__assert_fail@plt+0x5f1c>
   15e5c:	mov	r1, #4
   15e60:	add	r0, r1, r0, lsl #2
   15e64:	bl	22220 <__assert_fail@plt+0x10d08>
   15e68:	ldr	r2, [fp, #24]
   15e6c:	ldr	r5, [sp, #100]	; 0x64
   15e70:	ldr	r3, [sp, #104]	; 0x68
   15e74:	ldr	ip, [sp, #108]	; 0x6c
   15e78:	cmp	r0, #0
   15e7c:	str	r0, [sp, #212]	; 0xd4
   15e80:	beq	17434 <__assert_fail@plt+0x5f1c>
   15e84:	ldr	r6, [sp, #96]	; 0x60
   15e88:	tst	r2, #1
   15e8c:	mov	r1, #4
   15e90:	str	r7, [fp, #-212]	; 0xffffff2c
   15e94:	str	r8, [sp, #36]	; 0x24
   15e98:	mov	r9, r7
   15e9c:	mov	r0, #4
   15ea0:	movweq	r1, #6
   15ea4:	str	r1, [sp, #172]	; 0xac
   15ea8:	mov	r1, #1
   15eac:	cmp	r6, r7
   15eb0:	mov	r8, r6
   15eb4:	mvnlt	r1, #0
   15eb8:	movlt	r8, r7
   15ebc:	movlt	r9, r6
   15ec0:	cmp	sl, #0
   15ec4:	str	r1, [sp, #80]	; 0x50
   15ec8:	ldr	r1, [sp, #84]	; 0x54
   15ecc:	ldr	r1, [r1, #92]	; 0x5c
   15ed0:	str	r1, [sp, #76]	; 0x4c
   15ed4:	beq	15f18 <__assert_fail@plt+0x4a00>
   15ed8:	cmp	r1, #1
   15edc:	beq	15efc <__assert_fail@plt+0x49e4>
   15ee0:	ldr	r0, [sp, #44]	; 0x2c
   15ee4:	ldr	r0, [r0, #12]
   15ee8:	and	r0, r0, #4194304	; 0x400000
   15eec:	orr	r0, r5, r0
   15ef0:	clz	r0, r0
   15ef4:	lsr	r0, r0, #5
   15ef8:	lsl	r0, r0, #2
   15efc:	cmp	r5, #0
   15f00:	mov	r1, r5
   15f04:	movwne	r1, #1
   15f08:	cmp	r6, r7
   15f0c:	orrge	r1, r1, #2
   15f10:	orr	r0, r1, r0
   15f14:	b	15f1c <__assert_fail@plt+0x4a04>
   15f18:	mov	r0, #8
   15f1c:	add	r1, sp, #112	; 0x70
   15f20:	cmp	r6, r7
   15f24:	sub	lr, r0, #4
   15f28:	str	r9, [sp, #56]	; 0x38
   15f2c:	add	r1, r1, #32
   15f30:	str	lr, [sp, #60]	; 0x3c
   15f34:	str	r1, [sp, #32]
   15f38:	sub	r1, fp, #212	; 0xd4
   15f3c:	movwlt	r1, #0
   15f40:	cmp	r1, #0
   15f44:	str	r1, [sp, #48]	; 0x30
   15f48:	movwne	r1, #1
   15f4c:	str	r1, [sp, #52]	; 0x34
   15f50:	sub	r1, fp, #208	; 0xd0
   15f54:	add	r1, r1, #16
   15f58:	str	r1, [sp, #40]	; 0x28
   15f5c:	cmp	lr, #4
   15f60:	bhi	1603c <__assert_fail@plt+0x4b24>
   15f64:	add	r0, pc, #0
   15f68:	ldr	pc, [r0, lr, lsl #2]
   15f6c:	andeq	r5, r1, r0, lsl #31
   15f70:	andeq	r5, r1, r0, lsl #31
   15f74:	strdeq	r5, [r1], -r4
   15f78:	andeq	r5, r1, ip, asr #31
   15f7c:	andeq	r6, r1, r4, asr #1
   15f80:	mov	r4, #1
   15f84:	cmp	r7, r9
   15f88:	blt	17434 <__assert_fail@plt+0x5f1c>
   15f8c:	mov	r0, #0
   15f90:	cmp	r7, ip
   15f94:	ldrblt	r0, [r3, r7]
   15f98:	cmp	r5, #0
   15f9c:	ldrbne	r0, [r5, r0]
   15fa0:	ldrb	r0, [sl, r0]
   15fa4:	cmp	r0, #0
   15fa8:	bne	160c4 <__assert_fail@plt+0x4bac>
   15fac:	sub	r0, r7, #1
   15fb0:	cmp	r7, r9
   15fb4:	mov	r7, r0
   15fb8:	str	r0, [fp, #-212]	; 0xffffff2c
   15fbc:	bgt	15f8c <__assert_fail@plt+0x4a74>
   15fc0:	b	17434 <__assert_fail@plt+0x5f1c>
   15fc4:	add	r7, r7, #1
   15fc8:	str	r7, [fp, #-212]	; 0xffffff2c
   15fcc:	cmp	r7, r8
   15fd0:	bge	1600c <__assert_fail@plt+0x4af4>
   15fd4:	ldrb	r0, [r3, r7]
   15fd8:	ldrb	r0, [r5, r0]
   15fdc:	ldrb	r0, [sl, r0]
   15fe0:	cmp	r0, #0
   15fe4:	beq	15fc4 <__assert_fail@plt+0x4aac>
   15fe8:	b	1600c <__assert_fail@plt+0x4af4>
   15fec:	add	r7, r7, #1
   15ff0:	str	r7, [fp, #-212]	; 0xffffff2c
   15ff4:	cmp	r7, r8
   15ff8:	bge	1600c <__assert_fail@plt+0x4af4>
   15ffc:	ldrb	r0, [r3, r7]
   16000:	ldrb	r0, [sl, r0]
   16004:	cmp	r0, #0
   16008:	beq	15fec <__assert_fail@plt+0x4ad4>
   1600c:	cmp	r7, r8
   16010:	bne	160c4 <__assert_fail@plt+0x4bac>
   16014:	mov	r0, #0
   16018:	cmp	r8, ip
   1601c:	mov	r7, r8
   16020:	ldrblt	r0, [r3, r8]
   16024:	cmp	r5, #0
   16028:	ldrbne	r0, [r5, r0]
   1602c:	ldrb	r0, [sl, r0]
   16030:	cmp	r0, #0
   16034:	bne	160c4 <__assert_fail@plt+0x4bac>
   16038:	b	174f4 <__assert_fail@plt+0x5fdc>
   1603c:	ldr	r0, [sp, #136]	; 0x88
   16040:	ldr	r5, [sp, #80]	; 0x50
   16044:	ldr	r3, [sp, #144]	; 0x90
   16048:	sub	r1, r7, r0
   1604c:	cmp	r1, r3
   16050:	bcs	16094 <__assert_fail@plt+0x4b7c>
   16054:	ldr	r3, [sp, #140]	; 0x8c
   16058:	mov	r6, #0
   1605c:	cmp	r1, r3
   16060:	ldrcc	r3, [sp, #116]	; 0x74
   16064:	ldrbcc	r6, [r3, r1]
   16068:	ldrb	r1, [sl, r6]
   1606c:	cmp	r1, #0
   16070:	bne	160c4 <__assert_fail@plt+0x4bac>
   16074:	add	r7, r7, r5
   16078:	mov	r4, #1
   1607c:	cmp	r7, r9
   16080:	str	r7, [fp, #-212]	; 0xffffff2c
   16084:	blt	17434 <__assert_fail@plt+0x5f1c>
   16088:	cmp	r7, r8
   1608c:	ble	16044 <__assert_fail@plt+0x4b2c>
   16090:	b	17434 <__assert_fail@plt+0x5f1c>
   16094:	add	r0, sp, #112	; 0x70
   16098:	mov	r1, r7
   1609c:	mov	r6, lr
   160a0:	bl	1ca34 <__assert_fail@plt+0xb51c>
   160a4:	cmp	r0, #0
   160a8:	bne	17488 <__assert_fail@plt+0x5f70>
   160ac:	ldr	r0, [sp, #136]	; 0x88
   160b0:	ldr	r7, [fp, #-212]	; 0xffffff2c
   160b4:	ldr	r2, [fp, #24]
   160b8:	mov	lr, r6
   160bc:	sub	r1, r7, r0
   160c0:	b	16054 <__assert_fail@plt+0x4b3c>
   160c4:	add	r0, sp, #112	; 0x70
   160c8:	mov	r1, r7
   160cc:	bl	1ca34 <__assert_fail@plt+0xb51c>
   160d0:	cmp	r0, #0
   160d4:	bne	17488 <__assert_fail@plt+0x5f70>
   160d8:	ldr	r0, [sp, #76]	; 0x4c
   160dc:	cmp	r0, #1
   160e0:	ldrne	r0, [sp, #140]	; 0x8c
   160e4:	cmpne	r0, #0
   160e8:	bne	16120 <__assert_fail@plt+0x4c08>
   160ec:	mov	r0, #0
   160f0:	str	r0, [sp, #220]	; 0xdc
   160f4:	str	r0, [sp, #232]	; 0xe8
   160f8:	str	r0, [sp, #216]	; 0xd8
   160fc:	str	r0, [fp, #-64]	; 0xffffffc0
   16100:	ldr	r4, [sp, #196]	; 0xc4
   16104:	ldr	r3, [sp, #152]	; 0x98
   16108:	ldr	r7, [r4, #36]	; 0x24
   1610c:	ldrsb	r0, [r7, #52]	; 0x34
   16110:	cmn	r0, #1
   16114:	ble	16134 <__assert_fail@plt+0x4c1c>
   16118:	sub	r5, fp, #208	; 0xd0
   1611c:	b	161a0 <__assert_fail@plt+0x4c88>
   16120:	ldr	r0, [sp, #120]	; 0x78
   16124:	ldr	r0, [r0]
   16128:	cmn	r0, #1
   1612c:	bne	160ec <__assert_fail@plt+0x4bd4>
   16130:	b	169a8 <__assert_fail@plt+0x5490>
   16134:	ldr	r2, [sp, #200]	; 0xc8
   16138:	sub	r1, r3, #1
   1613c:	add	r0, sp, #112	; 0x70
   16140:	mov	r6, r3
   16144:	bl	1d260 <__assert_fail@plt+0xbd48>
   16148:	tst	r0, #1
   1614c:	sub	r5, fp, #208	; 0xd0
   16150:	bne	16198 <__assert_fail@plt+0x4c80>
   16154:	mov	r3, r0
   16158:	cmp	r0, #0
   1615c:	beq	1619c <__assert_fail@plt+0x4c84>
   16160:	ands	r1, r3, #2
   16164:	and	r0, r3, #4
   16168:	cmpne	r0, #0
   1616c:	bne	169e8 <__assert_fail@plt+0x54d0>
   16170:	cmp	r1, #0
   16174:	bne	169f0 <__assert_fail@plt+0x54d8>
   16178:	cmp	r0, #0
   1617c:	beq	1619c <__assert_fail@plt+0x4c84>
   16180:	ldr	r2, [r7, #40]	; 0x28
   16184:	sub	r0, fp, #64	; 0x40
   16188:	mov	r1, r4
   1618c:	bl	1c5f0 <__assert_fail@plt+0xb0d8>
   16190:	mov	r7, r0
   16194:	b	1619c <__assert_fail@plt+0x4c84>
   16198:	ldr	r7, [r4, #40]	; 0x28
   1619c:	mov	r3, r6
   161a0:	ldr	r1, [sp, #52]	; 0x34
   161a4:	cmp	r7, #0
   161a8:	beq	17480 <__assert_fail@plt+0x5f68>
   161ac:	ldr	r0, [sp, #212]	; 0xd4
   161b0:	mov	ip, r1
   161b4:	cmp	r0, #0
   161b8:	beq	161d0 <__assert_fail@plt+0x4cb8>
   161bc:	str	r7, [r0, r3, lsl #2]
   161c0:	mov	ip, r1
   161c4:	ldr	r0, [r4, #76]	; 0x4c
   161c8:	cmp	r0, #0
   161cc:	bne	16a40 <__assert_fail@plt+0x5528>
   161d0:	ldrb	r0, [r7, #52]	; 0x34
   161d4:	sxtb	r5, r0
   161d8:	tst	r0, #16
   161dc:	bne	169f8 <__assert_fail@plt+0x54e0>
   161e0:	mov	r0, #0
   161e4:	mvn	r2, #0
   161e8:	str	r0, [sp, #72]	; 0x48
   161ec:	ldr	r6, [sp, #152]	; 0x98
   161f0:	ldr	r0, [sp, #168]	; 0xa8
   161f4:	str	r2, [sp, #96]	; 0x60
   161f8:	cmp	r0, r6
   161fc:	ble	16208 <__assert_fail@plt+0x4cf0>
   16200:	ldr	r1, [sp, #48]	; 0x30
   16204:	b	164ec <__assert_fail@plt+0x4fd4>
   16208:	ldr	r1, [sp, #48]	; 0x30
   1620c:	b	166a4 <__assert_fail@plt+0x518c>
   16210:	ldr	r0, [sp, #212]	; 0xd4
   16214:	ldr	r2, [sp, #152]	; 0x98
   16218:	ldr	r1, [sp, #216]	; 0xd8
   1621c:	add	r2, r2, #1
   16220:	sub	r3, r2, #1
   16224:	cmp	r3, r1
   16228:	bge	1669c <__assert_fail@plt+0x5184>
   1622c:	str	r2, [sp, #152]	; 0x98
   16230:	ldr	r3, [r0, r2, lsl #2]
   16234:	add	r2, r2, #1
   16238:	cmp	r3, #0
   1623c:	beq	16220 <__assert_fail@plt+0x4d08>
   16240:	sub	r0, fp, #64	; 0x40
   16244:	add	r1, sp, #112	; 0x70
   16248:	mov	r2, #0
   1624c:	bl	1dc48 <__assert_fail@plt+0xc730>
   16250:	cmp	r0, #0
   16254:	mov	r7, r0
   16258:	ldreq	r0, [fp, #-64]	; 0xffffffc0
   1625c:	cmpeq	r0, #0
   16260:	beq	16210 <__assert_fail@plt+0x4cf8>
   16264:	cmp	r7, #0
   16268:	mov	r3, r5
   1626c:	mov	ip, r6
   16270:	bne	165cc <__assert_fail@plt+0x50b4>
   16274:	b	166a0 <__assert_fail@plt+0x5188>
   16278:	ldr	r0, [r4, #8]
   1627c:	cmp	r0, #1
   16280:	blt	16464 <__assert_fail@plt+0x4f4c>
   16284:	ldr	r7, [sp, #196]	; 0xc4
   16288:	mov	r5, #0
   1628c:	str	r3, [sp, #12]
   16290:	str	ip, [sp, #24]
   16294:	str	r4, [sp, #8]
   16298:	str	r7, [sp, #16]
   1629c:	ldr	r0, [r4, #12]
   162a0:	ldr	r1, [r0, r5, lsl #2]
   162a4:	ldr	r0, [r7]
   162a8:	add	r0, r0, r1, lsl #3
   162ac:	ldr	r6, [r0, #4]
   162b0:	tst	r6, #1048576	; 0x100000
   162b4:	beq	16454 <__assert_fail@plt+0x4f3c>
   162b8:	ldr	lr, [sp, #152]	; 0x98
   162bc:	movw	r0, #65280	; 0xff00
   162c0:	str	r1, [sp, #28]
   162c4:	movt	r0, #3
   162c8:	tst	r6, r0
   162cc:	beq	1633c <__assert_fail@plt+0x4e24>
   162d0:	ldr	r2, [sp, #200]	; 0xc8
   162d4:	add	r0, sp, #112	; 0x70
   162d8:	mov	r1, lr
   162dc:	mov	r7, r3
   162e0:	str	lr, [sp, #20]
   162e4:	bl	1d260 <__assert_fail@plt+0xbd48>
   162e8:	mov	r3, r7
   162ec:	ldr	lr, [sp, #20]
   162f0:	ldr	r1, [sp, #28]
   162f4:	ldr	ip, [sp, #24]
   162f8:	ldr	r7, [sp, #16]
   162fc:	and	r2, r0, #1
   16300:	tst	r6, #1024	; 0x400
   16304:	beq	16310 <__assert_fail@plt+0x4df8>
   16308:	cmp	r2, #0
   1630c:	beq	16454 <__assert_fail@plt+0x4f3c>
   16310:	tst	r6, #2048	; 0x800
   16314:	cmpne	r2, #0
   16318:	bne	16454 <__assert_fail@plt+0x4f3c>
   1631c:	tst	r6, #8192	; 0x2000
   16320:	beq	1632c <__assert_fail@plt+0x4e14>
   16324:	ands	r2, r0, #2
   16328:	beq	16454 <__assert_fail@plt+0x4f3c>
   1632c:	tst	r6, #32768	; 0x8000
   16330:	beq	1633c <__assert_fail@plt+0x4e24>
   16334:	ands	r0, r0, #8
   16338:	beq	16454 <__assert_fail@plt+0x4f3c>
   1633c:	mov	r0, r7
   16340:	add	r2, sp, #112	; 0x70
   16344:	mov	r3, lr
   16348:	bl	1eee8 <__assert_fail@plt+0xd9d0>
   1634c:	ldr	r4, [sp, #8]
   16350:	ldr	ip, [sp, #24]
   16354:	ldr	r3, [sp, #12]
   16358:	cmp	r0, #0
   1635c:	beq	16454 <__assert_fail@plt+0x4f3c>
   16360:	ldr	r1, [sp, #152]	; 0x98
   16364:	ldr	r2, [sp, #232]	; 0xe8
   16368:	cmp	r2, r0
   1636c:	add	r6, r1, r0
   16370:	movlt	r2, r0
   16374:	add	r0, sp, #112	; 0x70
   16378:	mov	r1, r6
   1637c:	str	r2, [sp, #232]	; 0xe8
   16380:	bl	1e028 <__assert_fail@plt+0xcb10>
   16384:	cmp	r0, #0
   16388:	str	r0, [fp, #-48]	; 0xffffffd0
   1638c:	bne	164cc <__assert_fail@plt+0x4fb4>
   16390:	ldr	r0, [sp, #212]	; 0xd4
   16394:	ldr	r2, [sp, #28]
   16398:	ldr	r1, [r7, #24]
   1639c:	ldr	r4, [r0, r6, lsl #2]
   163a0:	ldr	r0, [r7, #12]
   163a4:	ldr	r0, [r0, r2, lsl #2]
   163a8:	cmp	r4, #0
   163ac:	add	r0, r0, r0, lsl #1
   163b0:	add	r2, r1, r0, lsl #2
   163b4:	beq	163d8 <__assert_fail@plt+0x4ec0>
   163b8:	ldr	r1, [r4, #40]	; 0x28
   163bc:	sub	r7, fp, #208	; 0xd0
   163c0:	mov	r0, r7
   163c4:	bl	1dd9c <__assert_fail@plt+0xc884>
   163c8:	cmp	r0, #0
   163cc:	str	r0, [fp, #-48]	; 0xffffffd0
   163d0:	beq	163ec <__assert_fail@plt+0x4ed4>
   163d4:	b	164cc <__assert_fail@plt+0x4fb4>
   163d8:	vldr	d16, [r2]
   163dc:	ldr	r0, [r2, #8]
   163e0:	sub	r7, fp, #208	; 0xd0
   163e4:	str	r0, [fp, #-200]	; 0xffffff38
   163e8:	vstr	d16, [fp, #-208]	; 0xffffff30
   163ec:	ldr	r2, [sp, #200]	; 0xc8
   163f0:	sub	r1, r6, #1
   163f4:	add	r0, sp, #112	; 0x70
   163f8:	bl	1d260 <__assert_fail@plt+0xbd48>
   163fc:	ldr	r1, [sp, #16]
   16400:	mov	r3, r0
   16404:	sub	r0, fp, #48	; 0x30
   16408:	mov	r2, r7
   1640c:	bl	1c5f0 <__assert_fail@plt+0xb0d8>
   16410:	ldr	r1, [sp, #212]	; 0xd4
   16414:	cmp	r4, #0
   16418:	str	r0, [r1, r6, lsl #2]
   1641c:	beq	16428 <__assert_fail@plt+0x4f10>
   16420:	ldr	r0, [fp, #-200]	; 0xffffff38
   16424:	bl	223dc <__assert_fail@plt+0x10ec4>
   16428:	ldr	r0, [sp, #212]	; 0xd4
   1642c:	ldr	r3, [sp, #12]
   16430:	ldr	ip, [sp, #24]
   16434:	ldr	r4, [sp, #8]
   16438:	ldr	r7, [sp, #16]
   1643c:	ldr	r0, [r0, r6, lsl #2]
   16440:	cmp	r0, #0
   16444:	bne	16454 <__assert_fail@plt+0x4f3c>
   16448:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1644c:	cmp	r0, #0
   16450:	bne	164e0 <__assert_fail@plt+0x4fc8>
   16454:	ldr	r0, [r4, #8]
   16458:	add	r5, r5, #1
   1645c:	cmp	r5, r0
   16460:	blt	1629c <__assert_fail@plt+0x4d84>
   16464:	mov	r0, #0
   16468:	str	r0, [fp, #-64]	; 0xffffffc0
   1646c:	b	1652c <__assert_fail@plt+0x5014>
   16470:	add	r1, r6, #2
   16474:	add	r0, sp, #112	; 0x70
   16478:	mov	r5, r3
   1647c:	mov	r6, ip
   16480:	bl	1db70 <__assert_fail@plt+0xc658>
   16484:	cmp	r0, #0
   16488:	str	r0, [fp, #-64]	; 0xffffffc0
   1648c:	bne	17480 <__assert_fail@plt+0x5f68>
   16490:	mov	r3, r5
   16494:	ldrb	r5, [r4, #52]	; 0x34
   16498:	mov	ip, r6
   1649c:	b	16524 <__assert_fail@plt+0x500c>
   164a0:	ldr	r0, [sp, #152]	; 0x98
   164a4:	ldr	r2, [sp, #200]	; 0xc8
   164a8:	sub	r1, r0, #1
   164ac:	add	r0, sp, #112	; 0x70
   164b0:	bl	1d260 <__assert_fail@plt+0xbd48>
   164b4:	bfi	r5, r0, #8, #1
   164b8:	ldr	r3, [sp, #12]
   164bc:	ldr	ip, [sp, #24]
   164c0:	ldr	r4, [sp, #8]
   164c4:	ldr	r7, [r6, r5, lsl #2]
   164c8:	b	16594 <__assert_fail@plt+0x507c>
   164cc:	ldr	r2, [sp, #72]	; 0x48
   164d0:	ldr	r3, [sp, #12]
   164d4:	ldr	ip, [sp, #24]
   164d8:	ldr	r4, [sp, #8]
   164dc:	str	r2, [sp, #72]	; 0x48
   164e0:	mov	r7, #0
   164e4:	str	r0, [fp, #-64]	; 0xffffffc0
   164e8:	b	16594 <__assert_fail@plt+0x507c>
   164ec:	str	r1, [sp, #88]	; 0x58
   164f0:	ldr	r1, [sp, #148]	; 0x94
   164f4:	ldr	r0, [sp, #160]	; 0xa0
   164f8:	add	r9, r6, #1
   164fc:	mov	r4, r7
   16500:	cmp	r9, r1
   16504:	blt	16510 <__assert_fail@plt+0x4ff8>
   16508:	cmp	r1, r0
   1650c:	blt	16470 <__assert_fail@plt+0x4f58>
   16510:	ldr	r1, [sp, #140]	; 0x8c
   16514:	cmp	r9, r1
   16518:	blt	16524 <__assert_fail@plt+0x500c>
   1651c:	cmp	r1, r0
   16520:	blt	16470 <__assert_fail@plt+0x4f58>
   16524:	tst	r5, #32
   16528:	bne	16278 <__assert_fail@plt+0x4d60>
   1652c:	ldr	r1, [sp, #152]	; 0x98
   16530:	ldr	r0, [sp, #116]	; 0x74
   16534:	add	r2, r1, #1
   16538:	str	r2, [sp, #152]	; 0x98
   1653c:	ldrb	r5, [r0, r1]
   16540:	ldr	r0, [r4, #44]	; 0x2c
   16544:	cmp	r0, #0
   16548:	bne	16590 <__assert_fail@plt+0x5078>
   1654c:	ldr	r6, [r4, #48]	; 0x30
   16550:	str	ip, [sp, #24]
   16554:	str	r3, [sp, #12]
   16558:	str	r4, [sp, #8]
   1655c:	cmp	r6, #0
   16560:	bne	164a0 <__assert_fail@plt+0x4f88>
   16564:	ldr	r6, [sp, #8]
   16568:	ldr	r0, [sp, #196]	; 0xc4
   1656c:	mov	r1, r6
   16570:	bl	1f30c <__assert_fail@plt+0xddf4>
   16574:	ldr	r3, [sp, #12]
   16578:	ldr	ip, [sp, #24]
   1657c:	mov	r4, r6
   16580:	cmp	r0, #0
   16584:	bne	16540 <__assert_fail@plt+0x5028>
   16588:	mov	r0, #12
   1658c:	b	164e0 <__assert_fail@plt+0x4fc8>
   16590:	ldr	r7, [r0, r5, lsl #2]
   16594:	ldr	r0, [sp, #212]	; 0xd4
   16598:	cmp	r0, #0
   1659c:	beq	165c4 <__assert_fail@plt+0x50ac>
   165a0:	sub	r0, fp, #64	; 0x40
   165a4:	add	r1, sp, #112	; 0x70
   165a8:	mov	r2, r7
   165ac:	mov	r5, r3
   165b0:	mov	r6, ip
   165b4:	bl	1dc48 <__assert_fail@plt+0xc730>
   165b8:	mov	ip, r6
   165bc:	mov	r3, r5
   165c0:	mov	r7, r0
   165c4:	cmp	r7, #0
   165c8:	beq	165fc <__assert_fail@plt+0x50e4>
   165cc:	sub	r0, r4, r7
   165d0:	clz	r0, r0
   165d4:	lsr	r0, r0, #5
   165d8:	ands	ip, ip, r0
   165dc:	ldrb	r0, [r7, #52]	; 0x34
   165e0:	movne	r3, r9
   165e4:	sxtb	r5, r0
   165e8:	tst	r0, #16
   165ec:	bne	1663c <__assert_fail@plt+0x5124>
   165f0:	ldr	r6, [sp, #152]	; 0x98
   165f4:	ldr	r1, [sp, #88]	; 0x58
   165f8:	b	1668c <__assert_fail@plt+0x5174>
   165fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16600:	cmp	r0, #0
   16604:	bne	17480 <__assert_fail@plt+0x5f68>
   16608:	ldr	r0, [sp, #72]	; 0x48
   1660c:	ldr	r1, [sp, #68]	; 0x44
   16610:	clz	r0, r0
   16614:	lsr	r0, r0, #5
   16618:	orr	r0, r1, r0
   1661c:	cmp	r0, #1
   16620:	bne	166a0 <__assert_fail@plt+0x5188>
   16624:	ldr	r0, [sp, #212]	; 0xd4
   16628:	cmp	r0, #0
   1662c:	beq	166a0 <__assert_fail@plt+0x5188>
   16630:	mov	r6, ip
   16634:	mov	r5, r3
   16638:	b	16214 <__assert_fail@plt+0x4cfc>
   1663c:	ldr	r6, [sp, #152]	; 0x98
   16640:	cmn	r5, #1
   16644:	bgt	16670 <__assert_fail@plt+0x5158>
   16648:	add	r0, sp, #112	; 0x70
   1664c:	mov	r1, r7
   16650:	mov	r2, r6
   16654:	mov	r4, r3
   16658:	mov	r9, ip
   1665c:	bl	1d0f8 <__assert_fail@plt+0xbbe0>
   16660:	mov	ip, r9
   16664:	mov	r3, r4
   16668:	cmp	r0, #0
   1666c:	beq	165f4 <__assert_fail@plt+0x50dc>
   16670:	ldr	r0, [sp, #68]	; 0x44
   16674:	cmp	r0, #0
   16678:	beq	16acc <__assert_fail@plt+0x55b4>
   1667c:	mov	r1, #0
   16680:	mov	r0, #1
   16684:	str	r6, [sp, #96]	; 0x60
   16688:	str	r0, [sp, #72]	; 0x48
   1668c:	ldr	r0, [sp, #168]	; 0xa8
   16690:	cmp	r0, r6
   16694:	bgt	164ec <__assert_fail@plt+0x4fd4>
   16698:	b	166a4 <__assert_fail@plt+0x518c>
   1669c:	mov	r3, r5
   166a0:	ldr	r1, [sp, #88]	; 0x58
   166a4:	cmp	r1, #0
   166a8:	ldr	r6, [sp, #96]	; 0x60
   166ac:	sub	r5, fp, #208	; 0xd0
   166b0:	ldrne	r0, [r1]
   166b4:	addne	r0, r0, r3
   166b8:	strne	r0, [r1]
   166bc:	cmn	r6, #1
   166c0:	beq	169a0 <__assert_fail@plt+0x5488>
   166c4:	mov	r4, #12
   166c8:	cmn	r6, #2
   166cc:	beq	17434 <__assert_fail@plt+0x5f1c>
   166d0:	ldr	r0, [sp, #92]	; 0x5c
   166d4:	str	r6, [sp, #204]	; 0xcc
   166d8:	cmp	r0, #2
   166dc:	bcc	16730 <__assert_fail@plt+0x5218>
   166e0:	ldr	r0, [sp, #44]	; 0x2c
   166e4:	ldrb	r0, [r0, #28]
   166e8:	ands	r0, r0, #16
   166ec:	bne	16730 <__assert_fail@plt+0x5218>
   166f0:	ldr	r0, [sp, #212]	; 0xd4
   166f4:	mov	r2, r6
   166f8:	ldr	r1, [r0, r6, lsl #2]
   166fc:	add	r0, sp, #112	; 0x70
   16700:	bl	1d0f8 <__assert_fail@plt+0xbbe0>
   16704:	str	r0, [sp, #88]	; 0x58
   16708:	str	r0, [sp, #208]	; 0xd0
   1670c:	ldr	r0, [sp, #84]	; 0x54
   16710:	ldrb	r0, [r0, #88]	; 0x58
   16714:	tst	r0, #1
   16718:	bne	1675c <__assert_fail@plt+0x5244>
   1671c:	ldr	r0, [sp, #64]	; 0x40
   16720:	ldr	r0, [r0]
   16724:	cmp	r0, #0
   16728:	bne	1675c <__assert_fail@plt+0x5244>
   1672c:	b	16b24 <__assert_fail@plt+0x560c>
   16730:	ldr	r0, [sp, #64]	; 0x40
   16734:	ldr	r0, [r0]
   16738:	cmp	r0, #0
   1673c:	beq	16b24 <__assert_fail@plt+0x560c>
   16740:	ldr	r0, [sp, #212]	; 0xd4
   16744:	mov	r2, r6
   16748:	ldr	r1, [r0, r6, lsl #2]
   1674c:	add	r0, sp, #112	; 0x70
   16750:	bl	1d0f8 <__assert_fail@plt+0xbbe0>
   16754:	str	r0, [sp, #88]	; 0x58
   16758:	str	r0, [sp, #208]	; 0xd0
   1675c:	cmn	r6, #-1073741823	; 0xc0000001
   16760:	bcs	17434 <__assert_fail@plt+0x5f1c>
   16764:	ldr	r0, [sp, #196]	; 0xc4
   16768:	mov	r9, r6
   1676c:	str	r0, [sp, #72]	; 0x48
   16770:	mov	r0, #4
   16774:	add	r6, r0, r6, lsl #2
   16778:	mov	r0, r6
   1677c:	bl	22220 <__assert_fail@plt+0x10d08>
   16780:	mov	r7, r0
   16784:	cmp	r0, #0
   16788:	beq	174d0 <__assert_fail@plt+0x5fb8>
   1678c:	ldr	r0, [sp, #72]	; 0x48
   16790:	ldr	r0, [r0, #76]	; 0x4c
   16794:	cmp	r0, #0
   16798:	beq	16850 <__assert_fail@plt+0x5338>
   1679c:	mov	r0, r6
   167a0:	bl	22220 <__assert_fail@plt+0x10d08>
   167a4:	cmp	r0, #0
   167a8:	beq	174d0 <__assert_fail@plt+0x5fb8>
   167ac:	mov	r6, r0
   167b0:	add	r0, r9, #1
   167b4:	mov	r1, #0
   167b8:	mov	r4, r9
   167bc:	str	r0, [sp, #28]
   167c0:	lsl	r2, r0, #2
   167c4:	mov	r0, r6
   167c8:	bl	1141c <memset@plt>
   167cc:	ldr	r0, [sp, #88]	; 0x58
   167d0:	str	r7, [fp, #-208]	; 0xffffff30
   167d4:	str	r6, [fp, #-204]	; 0xffffff34
   167d8:	mov	r1, #0
   167dc:	str	r0, [fp, #-200]	; 0xffffff38
   167e0:	ldr	r0, [sp, #40]	; 0x28
   167e4:	str	r9, [fp, #-196]	; 0xffffff3c
   167e8:	str	r1, [r0]
   167ec:	str	r1, [r0, #4]
   167f0:	str	r1, [r0, #8]
   167f4:	add	r0, sp, #112	; 0x70
   167f8:	mov	r1, r5
   167fc:	bl	1fe18 <__assert_fail@plt+0xe900>
   16800:	mov	r4, r0
   16804:	mov	r0, #0
   16808:	bl	223dc <__assert_fail@plt+0x10ec4>
   1680c:	cmp	r4, #0
   16810:	bne	16a1c <__assert_fail@plt+0x5504>
   16814:	ldr	r0, [r7]
   16818:	cmp	r0, #0
   1681c:	beq	168ac <__assert_fail@plt+0x5394>
   16820:	ldr	r0, [sp, #72]	; 0x48
   16824:	ldr	r3, [sp, #28]
   16828:	mov	r1, r7
   1682c:	mov	r2, r6
   16830:	bl	200b0 <__assert_fail@plt+0xeb98>
   16834:	mov	r4, r0
   16838:	mov	r0, r6
   1683c:	bl	223dc <__assert_fail@plt+0x10ec4>
   16840:	cmp	r4, #0
   16844:	beq	16afc <__assert_fail@plt+0x55e4>
   16848:	mov	r6, #0
   1684c:	b	16a1c <__assert_fail@plt+0x5504>
   16850:	ldr	r0, [sp, #88]	; 0x58
   16854:	mov	r6, #0
   16858:	mov	r1, r5
   1685c:	str	r6, [fp, #-204]	; 0xffffff34
   16860:	str	r7, [fp, #-208]	; 0xffffff30
   16864:	str	r0, [fp, #-200]	; 0xffffff38
   16868:	ldr	r0, [sp, #40]	; 0x28
   1686c:	str	r9, [fp, #-196]	; 0xffffff3c
   16870:	str	r6, [r0]
   16874:	str	r6, [r0, #4]
   16878:	str	r6, [r0, #8]
   1687c:	add	r0, sp, #112	; 0x70
   16880:	bl	1fe18 <__assert_fail@plt+0xe900>
   16884:	mov	r4, r0
   16888:	mov	r0, #0
   1688c:	bl	223dc <__assert_fail@plt+0x10ec4>
   16890:	cmp	r4, #0
   16894:	bne	16a1c <__assert_fail@plt+0x5504>
   16898:	ldr	r0, [r7]
   1689c:	mov	r6, #0
   168a0:	cmp	r0, #0
   168a4:	beq	16990 <__assert_fail@plt+0x5478>
   168a8:	b	16afc <__assert_fail@plt+0x55e4>
   168ac:	ldr	r0, [r6]
   168b0:	cmp	r0, #0
   168b4:	bne	16820 <__assert_fail@plt+0x5308>
   168b8:	cmp	r9, #1
   168bc:	blt	16990 <__assert_fail@plt+0x5478>
   168c0:	ldr	r0, [sp, #212]	; 0xd4
   168c4:	lsl	r4, r9, #2
   168c8:	add	r5, r9, #1
   168cc:	sub	r0, r0, #4
   168d0:	ldr	r1, [r0, r4]
   168d4:	cmp	r1, #0
   168d8:	ldrbne	r2, [r1, #52]	; 0x34
   168dc:	tstne	r2, #16
   168e0:	bne	168f8 <__assert_fail@plt+0x53e0>
   168e4:	sub	r5, r5, #1
   168e8:	sub	r4, r4, #4
   168ec:	cmp	r5, #2
   168f0:	bge	168d0 <__assert_fail@plt+0x53b8>
   168f4:	b	16990 <__assert_fail@plt+0x5478>
   168f8:	sub	r2, r5, #2
   168fc:	add	r0, sp, #112	; 0x70
   16900:	str	r2, [sp, #96]	; 0x60
   16904:	bl	1d0f8 <__assert_fail@plt+0xbbe0>
   16908:	mov	r9, r0
   1690c:	mov	r0, r6
   16910:	mov	r1, #0
   16914:	mov	r2, r4
   16918:	bl	1141c <memset@plt>
   1691c:	ldr	r0, [sp, #96]	; 0x60
   16920:	str	r7, [fp, #-208]	; 0xffffff30
   16924:	str	r6, [fp, #-204]	; 0xffffff34
   16928:	str	r9, [fp, #-200]	; 0xffffff38
   1692c:	str	r9, [sp, #88]	; 0x58
   16930:	mov	r1, #0
   16934:	mov	r9, r0
   16938:	str	r0, [fp, #-196]	; 0xffffff3c
   1693c:	ldr	r0, [sp, #40]	; 0x28
   16940:	str	r1, [r0]
   16944:	str	r1, [r0, #4]
   16948:	str	r1, [r0, #8]
   1694c:	add	r0, sp, #112	; 0x70
   16950:	sub	r1, fp, #208	; 0xd0
   16954:	bl	1fe18 <__assert_fail@plt+0xe900>
   16958:	mov	r4, r0
   1695c:	mov	r0, #0
   16960:	bl	223dc <__assert_fail@plt+0x10ec4>
   16964:	cmp	r4, #0
   16968:	bne	16a1c <__assert_fail@plt+0x5504>
   1696c:	sub	r0, r5, #1
   16970:	str	r0, [sp, #28]
   16974:	ldr	r0, [r7]
   16978:	cmp	r0, #0
   1697c:	beq	168ac <__assert_fail@plt+0x5394>
   16980:	sub	r9, r5, #2
   16984:	sub	r0, r5, #1
   16988:	str	r0, [sp, #28]
   1698c:	b	16820 <__assert_fail@plt+0x5308>
   16990:	mov	r0, r7
   16994:	bl	223dc <__assert_fail@plt+0x10ec4>
   16998:	mov	r0, r6
   1699c:	bl	223dc <__assert_fail@plt+0x10ec4>
   169a0:	add	r0, sp, #112	; 0x70
   169a4:	bl	1d1b8 <__assert_fail@plt+0xbca0>
   169a8:	ldr	r0, [fp, #-212]	; 0xffffff2c
   169ac:	ldr	r1, [sp, #80]	; 0x50
   169b0:	ldr	r9, [sp, #56]	; 0x38
   169b4:	ldr	ip, [sp, #108]	; 0x6c
   169b8:	ldr	r3, [sp, #104]	; 0x68
   169bc:	ldr	r5, [sp, #100]	; 0x64
   169c0:	ldr	r2, [fp, #24]
   169c4:	ldr	lr, [sp, #60]	; 0x3c
   169c8:	mov	r4, #1
   169cc:	add	r7, r0, r1
   169d0:	cmp	r7, r9
   169d4:	str	r7, [fp, #-212]	; 0xffffff2c
   169d8:	blt	17434 <__assert_fail@plt+0x5f1c>
   169dc:	cmp	r8, r7
   169e0:	bge	15f5c <__assert_fail@plt+0x4a44>
   169e4:	b	17434 <__assert_fail@plt+0x5f1c>
   169e8:	ldr	r7, [r4, #48]	; 0x30
   169ec:	b	1619c <__assert_fail@plt+0x4c84>
   169f0:	ldr	r7, [r4, #44]	; 0x2c
   169f4:	b	1619c <__assert_fail@plt+0x4c84>
   169f8:	cmn	r5, #1
   169fc:	ble	16a7c <__assert_fail@plt+0x5564>
   16a00:	mov	r0, #1
   16a04:	mov	r2, r3
   16a08:	str	r0, [sp, #72]	; 0x48
   16a0c:	ldr	r0, [sp, #68]	; 0x44
   16a10:	cmp	r0, #0
   16a14:	bne	161ec <__assert_fail@plt+0x4cd4>
   16a18:	b	16ac8 <__assert_fail@plt+0x55b0>
   16a1c:	mov	r0, r7
   16a20:	bl	223dc <__assert_fail@plt+0x10ec4>
   16a24:	mov	r0, r6
   16a28:	bl	223dc <__assert_fail@plt+0x10ec4>
   16a2c:	cmp	r4, #0
   16a30:	beq	16b24 <__assert_fail@plt+0x560c>
   16a34:	cmp	r4, #1
   16a38:	beq	169a0 <__assert_fail@plt+0x5488>
   16a3c:	b	17434 <__assert_fail@plt+0x5f1c>
   16a40:	add	r4, r7, #4
   16a44:	add	r0, sp, #112	; 0x70
   16a48:	mov	r2, #0
   16a4c:	mov	r9, r3
   16a50:	mov	r1, r4
   16a54:	bl	1d340 <__assert_fail@plt+0xbe28>
   16a58:	cmp	r0, #0
   16a5c:	str	r0, [fp, #-64]	; 0xffffffc0
   16a60:	bne	16af4 <__assert_fail@plt+0x55dc>
   16a64:	ldrb	r0, [r7, #52]	; 0x34
   16a68:	mov	ip, #0
   16a6c:	tst	r0, #64	; 0x40
   16a70:	bne	16ad4 <__assert_fail@plt+0x55bc>
   16a74:	mov	r3, r9
   16a78:	b	161d0 <__assert_fail@plt+0x4cb8>
   16a7c:	add	r0, sp, #112	; 0x70
   16a80:	mov	r1, r7
   16a84:	mov	r2, r3
   16a88:	mov	r4, r3
   16a8c:	mov	r6, ip
   16a90:	bl	1d0f8 <__assert_fail@plt+0xbbe0>
   16a94:	clz	r1, r0
   16a98:	mov	ip, r6
   16a9c:	cmp	r0, #0
   16aa0:	mov	r2, r4
   16aa4:	mov	r3, r4
   16aa8:	lsr	r6, r1, #5
   16aac:	ldr	r1, [sp, #68]	; 0x44
   16ab0:	movwne	r0, #1
   16ab4:	mvneq	r2, #0
   16ab8:	str	r0, [sp, #72]	; 0x48
   16abc:	orr	r1, r1, r6
   16ac0:	cmp	r1, #0
   16ac4:	bne	161ec <__assert_fail@plt+0x4cd4>
   16ac8:	mov	r6, r3
   16acc:	sub	r5, fp, #208	; 0xd0
   16ad0:	b	166bc <__assert_fail@plt+0x51a4>
   16ad4:	add	r0, sp, #112	; 0x70
   16ad8:	mov	r1, r4
   16adc:	bl	1d438 <__assert_fail@plt+0xbf20>
   16ae0:	mov	ip, #0
   16ae4:	cmp	r0, #0
   16ae8:	mov	r3, r9
   16aec:	str	r0, [fp, #-64]	; 0xffffffc0
   16af0:	beq	161d0 <__assert_fail@plt+0x4cb8>
   16af4:	mov	r6, r0
   16af8:	b	166bc <__assert_fail@plt+0x51a4>
   16afc:	ldr	r0, [sp, #212]	; 0xd4
   16b00:	bl	223dc <__assert_fail@plt+0x10ec4>
   16b04:	ldr	r0, [sp, #88]	; 0x58
   16b08:	str	r0, [sp, #208]	; 0xd0
   16b0c:	mov	r0, #0
   16b10:	str	r7, [sp, #212]	; 0xd4
   16b14:	str	r9, [sp, #204]	; 0xcc
   16b18:	bl	223dc <__assert_fail@plt+0x10ec4>
   16b1c:	mov	r0, #0
   16b20:	bl	223dc <__assert_fail@plt+0x10ec4>
   16b24:	ldr	r4, [sp, #92]	; 0x5c
   16b28:	cmp	r4, #0
   16b2c:	beq	17430 <__assert_fail@plt+0x5f18>
   16b30:	ldr	r8, [sp, #36]	; 0x24
   16b34:	ldr	sl, [fp, #20]
   16b38:	cmp	r4, #1
   16b3c:	beq	16b5c <__assert_fail@plt+0x5644>
   16b40:	ldr	r1, [fp, #16]
   16b44:	mvn	r0, r8
   16b48:	add	r0, r0, r1
   16b4c:	mov	r1, #255	; 0xff
   16b50:	lsl	r2, r0, #3
   16b54:	add	r0, sl, #8
   16b58:	bl	1141c <memset@plt>
   16b5c:	ldr	r0, [sp, #204]	; 0xcc
   16b60:	mov	r5, #0
   16b64:	cmp	r4, #2
   16b68:	str	r5, [sl]
   16b6c:	str	r0, [sl, #4]
   16b70:	bcc	17308 <__assert_fail@plt+0x5df0>
   16b74:	ldr	r0, [sp, #44]	; 0x2c
   16b78:	ldrb	r0, [r0, #28]
   16b7c:	ands	r0, r0, #16
   16b80:	bne	17308 <__assert_fail@plt+0x5df0>
   16b84:	ldr	r0, [sp, #84]	; 0x54
   16b88:	ldrb	r1, [r0, #88]	; 0x58
   16b8c:	mov	r0, #0
   16b90:	tst	r1, #1
   16b94:	mov	r1, #0
   16b98:	beq	16bb0 <__assert_fail@plt+0x5698>
   16b9c:	ldr	r1, [sp, #64]	; 0x40
   16ba0:	ldr	r2, [r1]
   16ba4:	mov	r1, #0
   16ba8:	cmp	r2, #0
   16bac:	movwgt	r1, #1
   16bb0:	ldr	r2, [sp, #44]	; 0x2c
   16bb4:	ldr	r4, [sp, #92]	; 0x5c
   16bb8:	cmp	r1, #0
   16bbc:	ldr	r6, [r2]
   16bc0:	movw	r2, #14184	; 0x3768
   16bc4:	movt	r2, #2
   16bc8:	vldr	d16, [r2]
   16bcc:	ldr	r2, [r2, #8]
   16bd0:	str	r2, [fp, #-56]	; 0xffffffc8
   16bd4:	mov	r2, #16
   16bd8:	vstr	d16, [fp, #-64]	; 0xffffffc0
   16bdc:	str	r2, [fp, #-204]	; 0xffffff34
   16be0:	sub	r2, fp, #208	; 0xd0
   16be4:	str	r0, [fp, #-208]	; 0xffffff30
   16be8:	add	r9, r2, #12
   16bec:	mov	r2, #0
   16bf0:	str	r9, [fp, #-200]	; 0xffffff38
   16bf4:	beq	16c18 <__assert_fail@plt+0x5700>
   16bf8:	mov	r0, #48	; 0x30
   16bfc:	bl	22220 <__assert_fail@plt+0x10d08>
   16c00:	cmp	r0, #0
   16c04:	str	r0, [fp, #-56]	; 0xffffffc8
   16c08:	beq	17320 <__assert_fail@plt+0x5e08>
   16c0c:	ldr	r0, [fp, #-208]	; 0xffffff30
   16c10:	sub	r1, fp, #64	; 0x40
   16c14:	mov	r2, r1
   16c18:	ldr	sl, [r6, #72]	; 0x48
   16c1c:	mov	r1, #0
   16c20:	cmp	r0, r4
   16c24:	str	r6, [sp, #104]	; 0x68
   16c28:	str	r2, [sp, #108]	; 0x6c
   16c2c:	str	r1, [fp, #-44]	; 0xffffffd4
   16c30:	str	r1, [fp, #-48]	; 0xffffffd0
   16c34:	str	r1, [fp, #-40]	; 0xffffffd8
   16c38:	bcs	16ccc <__assert_fail@plt+0x57b4>
   16c3c:	sub	r0, fp, #208	; 0xd0
   16c40:	mov	r1, r4
   16c44:	mov	r2, r9
   16c48:	mov	r3, #8
   16c4c:	bl	22320 <__assert_fail@plt+0x10e08>
   16c50:	cmp	r0, #0
   16c54:	bne	16cd0 <__assert_fail@plt+0x57b8>
   16c58:	ldr	r0, [fp, #-200]	; 0xffffff38
   16c5c:	ldr	r6, [sp, #108]	; 0x6c
   16c60:	mov	r4, r9
   16c64:	cmp	r0, r9
   16c68:	beq	16c70 <__assert_fail@plt+0x5758>
   16c6c:	bl	223dc <__assert_fail@plt+0x10ec4>
   16c70:	mov	r0, #16
   16c74:	str	r0, [fp, #-204]	; 0xffffff34
   16c78:	mov	r0, #0
   16c7c:	str	r0, [fp, #-208]	; 0xffffff30
   16c80:	mov	r0, r6
   16c84:	str	r4, [fp, #-200]	; 0xffffff38
   16c88:	bl	20fdc <__assert_fail@plt+0xfac4>
   16c8c:	ldr	r8, [sp, #36]	; 0x24
   16c90:	b	172c0 <__assert_fail@plt+0x5da8>
   16c94:	ldr	r1, [r3, #8]
   16c98:	cmp	r1, #0
   16c9c:	beq	16cac <__assert_fail@plt+0x5794>
   16ca0:	ldrsb	r1, [r9, #28]
   16ca4:	cmp	r1, #0
   16ca8:	blt	15c84 <__assert_fail@plt+0x476c>
   16cac:	mov	r1, #0
   16cb0:	cmp	r7, #0
   16cb4:	str	r1, [sp, #96]	; 0x60
   16cb8:	beq	17318 <__assert_fail@plt+0x5e00>
   16cbc:	cmp	r0, #0
   16cc0:	mov	r7, #0
   16cc4:	bne	1746c <__assert_fail@plt+0x5f54>
   16cc8:	b	15c88 <__assert_fail@plt+0x4770>
   16ccc:	str	r4, [fp, #-208]	; 0xffffff30
   16cd0:	ldr	r6, [fp, #20]
   16cd4:	ldr	r0, [fp, #-200]	; 0xffffff38
   16cd8:	lsl	r2, r4, #3
   16cdc:	str	r2, [sp, #96]	; 0x60
   16ce0:	mov	r1, r6
   16ce4:	str	r0, [sp, #100]	; 0x64
   16ce8:	bl	112a8 <memcpy@plt>
   16cec:	ldr	r7, [r6]
   16cf0:	ldr	r1, [r6, #4]
   16cf4:	mov	r0, #0
   16cf8:	cmp	r7, r1
   16cfc:	str	r7, [fp, #-36]	; 0xffffffdc
   16d00:	ble	16d34 <__assert_fail@plt+0x581c>
   16d04:	bl	223dc <__assert_fail@plt+0x10ec4>
   16d08:	ldr	r0, [fp, #-200]	; 0xffffff38
   16d0c:	cmp	r0, r9
   16d10:	beq	16d18 <__assert_fail@plt+0x5800>
   16d14:	bl	223dc <__assert_fail@plt+0x10ec4>
   16d18:	mov	r0, #16
   16d1c:	mov	r4, #0
   16d20:	str	r0, [fp, #-204]	; 0xffffff34
   16d24:	ldr	r0, [sp, #108]	; 0x6c
   16d28:	str	r4, [fp, #-208]	; 0xffffff30
   16d2c:	str	r9, [fp, #-200]	; 0xffffff38
   16d30:	b	172f8 <__assert_fail@plt+0x5de0>
   16d34:	ldr	r1, [sp, #104]	; 0x68
   16d38:	lsl	r0, r4, #4
   16d3c:	str	r9, [sp, #88]	; 0x58
   16d40:	str	r0, [sp, #80]	; 0x50
   16d44:	ldr	r0, [r1]
   16d48:	add	r1, r0, sl, lsl #3
   16d4c:	ldr	r3, [r1, #4]
   16d50:	uxtb	r2, r3
   16d54:	cmp	r2, #9
   16d58:	beq	16d88 <__assert_fail@plt+0x5870>
   16d5c:	cmp	r2, #8
   16d60:	bne	16df0 <__assert_fail@plt+0x58d8>
   16d64:	ldr	r0, [r0, sl, lsl #3]
   16d68:	add	r0, r0, #1
   16d6c:	cmp	r0, r4
   16d70:	bge	16df0 <__assert_fail@plt+0x58d8>
   16d74:	ldr	r1, [fp, #20]
   16d78:	str	r7, [r1, r0, lsl #3]!
   16d7c:	mvn	r0, #0
   16d80:	str	r0, [r1, #4]
   16d84:	b	16df0 <__assert_fail@plt+0x58d8>
   16d88:	ldr	r0, [r0, sl, lsl #3]
   16d8c:	add	r0, r0, #1
   16d90:	cmp	r0, r4
   16d94:	bge	16df0 <__assert_fail@plt+0x58d8>
   16d98:	ldr	r1, [fp, #20]
   16d9c:	ldr	r2, [r1, r0, lsl #3]
   16da0:	cmp	r2, r7
   16da4:	bge	16db8 <__assert_fail@plt+0x58a0>
   16da8:	add	r0, r1, r0, lsl #3
   16dac:	str	r7, [r0, #4]
   16db0:	ldr	r0, [sp, #100]	; 0x64
   16db4:	b	16dd8 <__assert_fail@plt+0x58c0>
   16db8:	tst	r3, #524288	; 0x80000
   16dbc:	beq	16de4 <__assert_fail@plt+0x58cc>
   16dc0:	ldr	r1, [sp, #100]	; 0x64
   16dc4:	ldr	r1, [r1, r0, lsl #3]
   16dc8:	cmn	r1, #1
   16dcc:	beq	16de4 <__assert_fail@plt+0x58cc>
   16dd0:	ldr	r0, [fp, #20]
   16dd4:	ldr	r1, [sp, #100]	; 0x64
   16dd8:	ldr	r2, [sp, #96]	; 0x60
   16ddc:	bl	112a8 <memcpy@plt>
   16de0:	b	16df0 <__assert_fail@plt+0x58d8>
   16de4:	ldr	r1, [fp, #20]
   16de8:	add	r0, r1, r0, lsl #3
   16dec:	str	r7, [r0, #4]
   16df0:	ldr	r0, [fp, #20]
   16df4:	ldr	r0, [r0, #4]
   16df8:	cmp	r7, r0
   16dfc:	ldreq	r0, [sp, #208]	; 0xd0
   16e00:	cmpeq	sl, r0
   16e04:	beq	16e2c <__assert_fail@plt+0x5914>
   16e08:	ldr	r7, [sp, #108]	; 0x6c
   16e0c:	cmp	r7, #0
   16e10:	beq	16e98 <__assert_fail@plt+0x5980>
   16e14:	sub	r0, fp, #48	; 0x30
   16e18:	mov	r1, sl
   16e1c:	bl	1c58c <__assert_fail@plt+0xb074>
   16e20:	cmp	r0, #0
   16e24:	bne	16e38 <__assert_fail@plt+0x5920>
   16e28:	b	16e98 <__assert_fail@plt+0x5980>
   16e2c:	ldr	r7, [sp, #108]	; 0x6c
   16e30:	cmp	r7, #0
   16e34:	beq	172c8 <__assert_fail@plt+0x5db0>
   16e38:	mov	r0, #0
   16e3c:	ldr	r3, [fp, #20]
   16e40:	ldr	r1, [r3, r0, lsl #3]
   16e44:	cmp	r1, #0
   16e48:	blt	16e5c <__assert_fail@plt+0x5944>
   16e4c:	add	r1, r3, r0, lsl #3
   16e50:	ldr	r1, [r1, #4]
   16e54:	cmn	r1, #1
   16e58:	beq	16e6c <__assert_fail@plt+0x5954>
   16e5c:	add	r0, r0, #1
   16e60:	cmp	r0, r4
   16e64:	bcc	16e3c <__assert_fail@plt+0x5924>
   16e68:	b	172c8 <__assert_fail@plt+0x5db0>
   16e6c:	ldr	r0, [sp, #100]	; 0x64
   16e70:	sub	r1, fp, #36	; 0x24
   16e74:	mov	r2, r4
   16e78:	str	r0, [sp]
   16e7c:	sub	r0, fp, #48	; 0x30
   16e80:	str	r0, [sp, #4]
   16e84:	mov	r0, r7
   16e88:	bl	21044 <__assert_fail@plt+0xfb2c>
   16e8c:	mov	sl, r0
   16e90:	cmn	r0, #1
   16e94:	ble	172c8 <__assert_fail@plt+0x5db0>
   16e98:	ldr	r6, [sp, #196]	; 0xc4
   16e9c:	ldr	r0, [r6]
   16ea0:	add	r1, r0, sl, lsl #3
   16ea4:	ldr	r1, [r1, #4]
   16ea8:	tst	r1, #8
   16eac:	bne	16f6c <__assert_fail@plt+0x5a54>
   16eb0:	tst	r1, #1048576	; 0x100000
   16eb4:	bne	17004 <__assert_fail@plt+0x5aec>
   16eb8:	uxtb	r1, r1
   16ebc:	cmp	r1, #4
   16ec0:	bne	17028 <__assert_fail@plt+0x5b10>
   16ec4:	ldr	r0, [r0, sl, lsl #3]
   16ec8:	ldr	r1, [sp, #92]	; 0x5c
   16ecc:	mov	r4, #0
   16ed0:	add	r0, r0, #1
   16ed4:	cmp	r0, r1
   16ed8:	ldrlt	r1, [fp, #20]
   16edc:	ldrlt	r2, [r1, r0, lsl #3]!
   16ee0:	ldrlt	r1, [r1, #4]
   16ee4:	sublt	r4, r1, r2
   16ee8:	cmp	r7, #0
   16eec:	beq	170fc <__assert_fail@plt+0x5be4>
   16ef0:	ldr	r1, [sp, #92]	; 0x5c
   16ef4:	cmp	r0, r1
   16ef8:	bge	1709c <__assert_fail@plt+0x5b84>
   16efc:	ldr	r1, [fp, #20]
   16f00:	ldr	r1, [r1, r0, lsl #3]
   16f04:	cmn	r1, #1
   16f08:	beq	1709c <__assert_fail@plt+0x5b84>
   16f0c:	ldr	r2, [fp, #20]
   16f10:	add	r0, r2, r0, lsl #3
   16f14:	ldr	r0, [r0, #4]
   16f18:	cmn	r0, #1
   16f1c:	beq	1709c <__assert_fail@plt+0x5b84>
   16f20:	cmp	r4, #0
   16f24:	beq	171a8 <__assert_fail@plt+0x5c90>
   16f28:	ldr	r7, [fp, #-36]	; 0xffffffdc
   16f2c:	ldr	r0, [sp, #140]	; 0x8c
   16f30:	sub	r0, r0, r7
   16f34:	cmp	r0, r4
   16f38:	blt	1709c <__assert_fail@plt+0x5b84>
   16f3c:	ldr	r2, [sp, #116]	; 0x74
   16f40:	add	r0, r2, r1
   16f44:	add	r1, r2, r7
   16f48:	mov	r2, r4
   16f4c:	bl	112f0 <memcmp@plt>
   16f50:	cmp	r0, #0
   16f54:	bne	1709c <__assert_fail@plt+0x5b84>
   16f58:	ldr	r0, [r6, #12]
   16f5c:	add	r7, r7, r4
   16f60:	ldr	r9, [r0, sl, lsl #2]
   16f64:	str	r7, [fp, #-36]	; 0xffffffdc
   16f68:	b	1706c <__assert_fail@plt+0x5b54>
   16f6c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16f70:	ldr	r0, [sp, #212]	; 0xd4
   16f74:	ldr	r4, [r6, #20]
   16f78:	ldr	r7, [r0, r1, lsl #2]
   16f7c:	str	r1, [sp, #76]	; 0x4c
   16f80:	sub	r0, fp, #48	; 0x30
   16f84:	mov	r1, sl
   16f88:	bl	1c58c <__assert_fail@plt+0xb074>
   16f8c:	cmp	r0, #0
   16f90:	bne	16fa8 <__assert_fail@plt+0x5a90>
   16f94:	sub	r0, fp, #48	; 0x30
   16f98:	mov	r1, sl
   16f9c:	bl	1c374 <__assert_fail@plt+0xae5c>
   16fa0:	cmp	r0, #0
   16fa4:	beq	17288 <__assert_fail@plt+0x5d70>
   16fa8:	add	r0, sl, sl, lsl #1
   16fac:	add	r0, r4, r0, lsl #2
   16fb0:	ldr	r4, [r0, #4]
   16fb4:	cmp	r4, #1
   16fb8:	blt	1709c <__assert_fail@plt+0x5b84>
   16fbc:	add	r6, r7, #4
   16fc0:	ldr	r7, [r0, #8]
   16fc4:	mov	r8, #0
   16fc8:	mvn	sl, #0
   16fcc:	ldr	r9, [r7, r8, lsl #2]
   16fd0:	mov	r0, r6
   16fd4:	mov	r1, r9
   16fd8:	bl	1c58c <__assert_fail@plt+0xb074>
   16fdc:	cmp	r0, #0
   16fe0:	beq	16ff0 <__assert_fail@plt+0x5ad8>
   16fe4:	cmn	sl, #1
   16fe8:	bne	170dc <__assert_fail@plt+0x5bc4>
   16fec:	mov	sl, r9
   16ff0:	add	r8, r8, #1
   16ff4:	cmp	r8, r4
   16ff8:	blt	16fcc <__assert_fail@plt+0x5ab4>
   16ffc:	mov	r9, sl
   17000:	b	170f0 <__assert_fail@plt+0x5bd8>
   17004:	ldr	r7, [fp, #-36]	; 0xffffffdc
   17008:	mov	r0, r6
   1700c:	mov	r1, sl
   17010:	add	r2, sp, #112	; 0x70
   17014:	mov	r3, r7
   17018:	bl	1eee8 <__assert_fail@plt+0xd9d0>
   1701c:	cmp	r0, #0
   17020:	bne	17050 <__assert_fail@plt+0x5b38>
   17024:	b	1702c <__assert_fail@plt+0x5b14>
   17028:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1702c:	ldr	r0, [r6]
   17030:	mov	r2, r7
   17034:	add	r1, r0, sl, lsl #3
   17038:	add	r0, sp, #112	; 0x70
   1703c:	bl	1f1d8 <__assert_fail@plt+0xdcc0>
   17040:	mov	r1, r0
   17044:	mov	r0, #1
   17048:	cmp	r1, #0
   1704c:	beq	1709c <__assert_fail@plt+0x5b84>
   17050:	ldr	r1, [r6, #12]
   17054:	add	r7, r0, r7
   17058:	ldr	r0, [sp, #108]	; 0x6c
   1705c:	ldr	r9, [r1, sl, lsl #2]
   17060:	cmp	r0, #0
   17064:	str	r7, [fp, #-36]	; 0xffffffdc
   17068:	beq	17118 <__assert_fail@plt+0x5c00>
   1706c:	ldr	r0, [sp, #204]	; 0xcc
   17070:	cmp	r7, r0
   17074:	bgt	1709c <__assert_fail@plt+0x5b84>
   17078:	ldr	r0, [sp, #212]	; 0xd4
   1707c:	ldr	r0, [r0, r7, lsl #2]
   17080:	cmp	r0, #0
   17084:	beq	1709c <__assert_fail@plt+0x5b84>
   17088:	add	r0, r0, #4
   1708c:	mov	r1, r9
   17090:	bl	1c58c <__assert_fail@plt+0xb074>
   17094:	cmp	r0, #0
   17098:	bne	17118 <__assert_fail@plt+0x5c00>
   1709c:	ldr	r0, [sp, #100]	; 0x64
   170a0:	ldr	r4, [sp, #92]	; 0x5c
   170a4:	ldr	r6, [sp, #108]	; 0x6c
   170a8:	ldr	r3, [fp, #20]
   170ac:	sub	r1, fp, #36	; 0x24
   170b0:	str	r0, [sp]
   170b4:	sub	r0, fp, #48	; 0x30
   170b8:	mov	r2, r4
   170bc:	str	r0, [sp, #4]
   170c0:	mov	r0, r6
   170c4:	bl	21044 <__assert_fail@plt+0xfb2c>
   170c8:	cmp	r0, #0
   170cc:	blt	17490 <__assert_fail@plt+0x5f78>
   170d0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   170d4:	mov	sl, r0
   170d8:	b	17130 <__assert_fail@plt+0x5c18>
   170dc:	sub	r0, fp, #48	; 0x30
   170e0:	mov	r1, sl
   170e4:	bl	1c58c <__assert_fail@plt+0xb074>
   170e8:	cmp	r0, #0
   170ec:	beq	1714c <__assert_fail@plt+0x5c34>
   170f0:	ldr	r8, [sp, #36]	; 0x24
   170f4:	ldr	r7, [sp, #76]	; 0x4c
   170f8:	b	17120 <__assert_fail@plt+0x5c08>
   170fc:	cmp	r4, #0
   17100:	beq	171a8 <__assert_fail@plt+0x5c90>
   17104:	ldr	r0, [r6, #12]
   17108:	ldr	r9, [r0, sl, lsl #2]
   1710c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17110:	add	r7, r0, r4
   17114:	str	r7, [fp, #-36]	; 0xffffffdc
   17118:	mov	r0, #0
   1711c:	str	r0, [fp, #-44]	; 0xffffffd4
   17120:	cmn	r9, #1
   17124:	ble	17280 <__assert_fail@plt+0x5d68>
   17128:	ldr	r4, [sp, #92]	; 0x5c
   1712c:	mov	sl, r9
   17130:	ldr	r0, [fp, #20]
   17134:	ldr	r9, [sp, #88]	; 0x58
   17138:	ldr	r1, [sp, #104]	; 0x68
   1713c:	ldr	r0, [r0, #4]
   17140:	cmp	r7, r0
   17144:	ble	16d44 <__assert_fail@plt+0x582c>
   17148:	b	17478 <__assert_fail@plt+0x5f60>
   1714c:	ldr	r4, [sp, #108]	; 0x6c
   17150:	ldr	r8, [sp, #36]	; 0x24
   17154:	ldr	r7, [sp, #76]	; 0x4c
   17158:	cmp	r4, #0
   1715c:	beq	171f4 <__assert_fail@plt+0x5cdc>
   17160:	ldr	r6, [r4]
   17164:	ldr	r0, [r4, #4]
   17168:	add	r1, r6, #1
   1716c:	cmp	r1, r0
   17170:	str	r1, [r4]
   17174:	bne	171fc <__assert_fail@plt+0x5ce4>
   17178:	ldr	r0, [r4, #8]
   1717c:	add	r1, r1, r1, lsl #1
   17180:	lsl	r1, r1, #4
   17184:	bl	22250 <__assert_fail@plt+0x10d38>
   17188:	cmp	r0, #0
   1718c:	beq	17278 <__assert_fail@plt+0x5d60>
   17190:	str	r0, [r4, #8]
   17194:	ldr	r7, [sp, #76]	; 0x4c
   17198:	ldr	r1, [r4, #4]
   1719c:	lsl	r1, r1, #1
   171a0:	str	r1, [r4, #4]
   171a4:	b	17200 <__assert_fail@plt+0x5ce8>
   171a8:	sub	r0, fp, #48	; 0x30
   171ac:	mov	r1, sl
   171b0:	bl	1c374 <__assert_fail@plt+0xae5c>
   171b4:	cmp	r0, #0
   171b8:	beq	17288 <__assert_fail@plt+0x5d70>
   171bc:	ldr	r0, [r6, #20]
   171c0:	add	r1, sl, sl, lsl #1
   171c4:	ldr	r7, [fp, #-36]	; 0xffffffdc
   171c8:	add	r0, r0, r1, lsl #2
   171cc:	ldr	r0, [r0, #8]
   171d0:	ldr	r9, [r0]
   171d4:	ldr	r0, [sp, #212]	; 0xd4
   171d8:	ldr	r0, [r0, r7, lsl #2]
   171dc:	mov	r1, r9
   171e0:	add	r0, r0, #4
   171e4:	bl	1c58c <__assert_fail@plt+0xb074>
   171e8:	cmp	r0, #0
   171ec:	bne	17120 <__assert_fail@plt+0x5c08>
   171f0:	b	1702c <__assert_fail@plt+0x5b14>
   171f4:	mov	r9, sl
   171f8:	b	17120 <__assert_fail@plt+0x5c08>
   171fc:	ldr	r0, [r4, #8]
   17200:	add	r1, r6, r6, lsl #1
   17204:	str	r7, [r0, r1, lsl #3]!
   17208:	mov	r7, r1
   1720c:	str	r9, [r0, #4]
   17210:	ldr	r0, [sp, #80]	; 0x50
   17214:	bl	22220 <__assert_fail@plt+0x10d08>
   17218:	ldr	r1, [r4, #8]
   1721c:	mvn	r9, #1
   17220:	cmp	r0, #0
   17224:	add	r6, r1, r7, lsl #3
   17228:	str	r0, [r6, #8]!
   1722c:	beq	170f4 <__assert_fail@plt+0x5bdc>
   17230:	ldr	r1, [fp, #20]
   17234:	ldr	r2, [sp, #96]	; 0x60
   17238:	bl	112a8 <memcpy@plt>
   1723c:	ldr	r0, [r6]
   17240:	ldr	r1, [sp, #92]	; 0x5c
   17244:	ldr	r2, [sp, #96]	; 0x60
   17248:	add	r0, r0, r1, lsl #3
   1724c:	ldr	r1, [sp, #100]	; 0x64
   17250:	bl	112a8 <memcpy@plt>
   17254:	ldr	r0, [r4, #8]
   17258:	sub	r1, fp, #48	; 0x30
   1725c:	add	r0, r0, r7, lsl #3
   17260:	add	r0, r0, #12
   17264:	bl	1c510 <__assert_fail@plt+0xaff8>
   17268:	ldr	r7, [sp, #76]	; 0x4c
   1726c:	cmp	r0, #0
   17270:	moveq	r9, sl
   17274:	b	17120 <__assert_fail@plt+0x5c08>
   17278:	mvn	r9, #1
   1727c:	b	170f4 <__assert_fail@plt+0x5bdc>
   17280:	cmn	r9, #2
   17284:	bne	1709c <__assert_fail@plt+0x5b84>
   17288:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1728c:	bl	223dc <__assert_fail@plt+0x10ec4>
   17290:	ldr	r0, [fp, #-200]	; 0xffffff38
   17294:	ldr	r4, [sp, #88]	; 0x58
   17298:	cmp	r0, r4
   1729c:	beq	172a4 <__assert_fail@plt+0x5d8c>
   172a0:	bl	223dc <__assert_fail@plt+0x10ec4>
   172a4:	mov	r0, #16
   172a8:	str	r0, [fp, #-204]	; 0xffffff34
   172ac:	mov	r0, #0
   172b0:	str	r0, [fp, #-208]	; 0xffffff30
   172b4:	ldr	r0, [sp, #108]	; 0x6c
   172b8:	str	r4, [fp, #-200]	; 0xffffff38
   172bc:	bl	20fdc <__assert_fail@plt+0xfac4>
   172c0:	mov	r4, #12
   172c4:	b	172fc <__assert_fail@plt+0x5de4>
   172c8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   172cc:	bl	223dc <__assert_fail@plt+0x10ec4>
   172d0:	ldr	r0, [fp, #-200]	; 0xffffff38
   172d4:	cmp	r0, r9
   172d8:	beq	172e0 <__assert_fail@plt+0x5dc8>
   172dc:	bl	223dc <__assert_fail@plt+0x10ec4>
   172e0:	mov	r0, #16
   172e4:	mov	r4, #0
   172e8:	str	r0, [fp, #-204]	; 0xffffff34
   172ec:	str	r4, [fp, #-208]	; 0xffffff30
   172f0:	str	r9, [fp, #-200]	; 0xffffff38
   172f4:	mov	r0, r7
   172f8:	bl	20fdc <__assert_fail@plt+0xfac4>
   172fc:	ldr	sl, [fp, #20]
   17300:	cmp	r4, #0
   17304:	bne	17434 <__assert_fail@plt+0x5f1c>
   17308:	ldrb	r1, [sp, #188]	; 0xbc
   1730c:	ldr	r2, [fp, #16]
   17310:	add	r0, sl, #4
   17314:	b	17368 <__assert_fail@plt+0x5e50>
   17318:	mov	r7, #0
   1731c:	b	15c88 <__assert_fail@plt+0x4770>
   17320:	mov	r4, #12
   17324:	b	17300 <__assert_fail@plt+0x5de8>
   17328:	ldr	r7, [sp, #140]	; 0x8c
   1732c:	ldr	r6, [sp, #32]
   17330:	ldr	ip, [sp, #124]	; 0x7c
   17334:	cmp	r3, r7
   17338:	mov	r4, r6
   1733c:	addne	r4, ip, r3, lsl #2
   17340:	ldr	r3, [r4]
   17344:	str	r3, [r0, #-4]
   17348:	ldr	r4, [r0]
   1734c:	cmp	r4, r7
   17350:	addne	r6, ip, r4, lsl #2
   17354:	ldr	r7, [r6]
   17358:	add	r6, sl, r5, lsl #3
   1735c:	add	r6, r6, #4
   17360:	str	r7, [r0]
   17364:	b	17384 <__assert_fail@plt+0x5e6c>
   17368:	ldr	r3, [r0, #-4]
   1736c:	cmn	r3, #1
   17370:	beq	17398 <__assert_fail@plt+0x5e80>
   17374:	cmp	r1, #0
   17378:	bne	17328 <__assert_fail@plt+0x5e10>
   1737c:	ldr	r7, [r0]
   17380:	mov	r6, r0
   17384:	ldr	r4, [fp, #-212]	; 0xffffff2c
   17388:	add	r3, r3, r4
   1738c:	str	r3, [r0, #-4]
   17390:	add	r3, r7, r4
   17394:	str	r3, [r6]
   17398:	sub	r2, r2, #1
   1739c:	add	r0, r0, #8
   173a0:	add	r5, r5, #1
   173a4:	cmp	r8, r2
   173a8:	bne	17368 <__assert_fail@plt+0x5e50>
   173ac:	ldr	r0, [sp, #92]	; 0x5c
   173b0:	cmp	r8, #1
   173b4:	blt	173c8 <__assert_fail@plt+0x5eb0>
   173b8:	add	r0, sl, r0, lsl #3
   173bc:	lsl	r2, r8, #3
   173c0:	mov	r1, #255	; 0xff
   173c4:	bl	1141c <memset@plt>
   173c8:	ldr	r0, [sp, #84]	; 0x54
   173cc:	mov	r4, #0
   173d0:	ldr	r0, [r0, #132]	; 0x84
   173d4:	cmp	r0, #0
   173d8:	beq	17434 <__assert_fail@plt+0x5f1c>
   173dc:	ldr	r1, [sp, #92]	; 0x5c
   173e0:	cmp	r1, #2
   173e4:	bcc	17434 <__assert_fail@plt+0x5f1c>
   173e8:	ldr	r1, [fp, #16]
   173ec:	mov	r2, #0
   173f0:	sub	r1, r1, #1
   173f4:	sub	r1, r1, r8
   173f8:	ldr	r3, [r0, r2, lsl #2]
   173fc:	cmp	r2, r3
   17400:	beq	17424 <__assert_fail@plt+0x5f0c>
   17404:	add	r3, sl, r3, lsl #3
   17408:	add	r7, sl, r2, lsl #3
   1740c:	ldr	r3, [r3, #8]
   17410:	str	r3, [r7, #8]
   17414:	ldr	r3, [r0, r2, lsl #2]
   17418:	add	r3, sl, r3, lsl #3
   1741c:	ldr	r3, [r3, #12]
   17420:	str	r3, [r7, #12]
   17424:	add	r2, r2, #1
   17428:	cmp	r1, r2
   1742c:	bne	173f8 <__assert_fail@plt+0x5ee0>
   17430:	mov	r4, #0
   17434:	ldr	r0, [sp, #212]	; 0xd4
   17438:	bl	223dc <__assert_fail@plt+0x10ec4>
   1743c:	ldr	r0, [sp, #64]	; 0x40
   17440:	ldr	r0, [r0]
   17444:	cmp	r0, #0
   17448:	beq	17464 <__assert_fail@plt+0x5f4c>
   1744c:	add	r0, sp, #112	; 0x70
   17450:	bl	1d1b8 <__assert_fail@plt+0xbca0>
   17454:	ldr	r0, [sp, #244]	; 0xf4
   17458:	bl	223dc <__assert_fail@plt+0x10ec4>
   1745c:	ldr	r0, [sp, #228]	; 0xe4
   17460:	bl	223dc <__assert_fail@plt+0x10ec4>
   17464:	add	r0, sp, #112	; 0x70
   17468:	bl	17b44 <__assert_fail@plt+0x662c>
   1746c:	mov	r0, r4
   17470:	sub	sp, fp, #28
   17474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17478:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1747c:	b	16d04 <__assert_fail@plt+0x57ec>
   17480:	mov	r4, #12
   17484:	b	17434 <__assert_fail@plt+0x5f1c>
   17488:	mov	r4, r0
   1748c:	b	17434 <__assert_fail@plt+0x5f1c>
   17490:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17494:	bl	223dc <__assert_fail@plt+0x10ec4>
   17498:	ldr	r0, [fp, #-200]	; 0xffffff38
   1749c:	ldr	r4, [sp, #88]	; 0x58
   174a0:	cmp	r0, r4
   174a4:	beq	174ac <__assert_fail@plt+0x5f94>
   174a8:	bl	223dc <__assert_fail@plt+0x10ec4>
   174ac:	mov	r0, #16
   174b0:	str	r0, [fp, #-204]	; 0xffffff34
   174b4:	mov	r0, #0
   174b8:	str	r0, [fp, #-208]	; 0xffffff30
   174bc:	mov	r0, r6
   174c0:	str	r4, [fp, #-200]	; 0xffffff38
   174c4:	bl	20fdc <__assert_fail@plt+0xfac4>
   174c8:	mov	r4, #1
   174cc:	b	172fc <__assert_fail@plt+0x5de4>
   174d0:	mov	r0, r7
   174d4:	bl	223dc <__assert_fail@plt+0x10ec4>
   174d8:	mov	r0, #0
   174dc:	bl	223dc <__assert_fail@plt+0x10ec4>
   174e0:	b	17434 <__assert_fail@plt+0x5f1c>
   174e4:	mov	r4, r0
   174e8:	add	r0, r5, #76	; 0x4c
   174ec:	str	r0, [sp, #64]	; 0x40
   174f0:	b	17434 <__assert_fail@plt+0x5f1c>
   174f4:	mov	r4, #1
   174f8:	b	17434 <__assert_fail@plt+0x5f1c>
   174fc:	push	{fp, lr}
   17500:	mov	fp, sp
   17504:	sub	sp, sp, #16
   17508:	mov	ip, #1
   1750c:	str	r2, [sp, #4]
   17510:	str	ip, [sp, #12]
   17514:	mov	ip, #0
   17518:	str	ip, [sp]
   1751c:	ldr	ip, [fp, #8]
   17520:	str	ip, [sp, #8]
   17524:	bl	17530 <__assert_fail@plt+0x6018>
   17528:	mov	sp, fp
   1752c:	pop	{fp, pc}
   17530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17534:	add	fp, sp, #28
   17538:	sub	sp, sp, #44	; 0x2c
   1753c:	mvn	r6, #0
   17540:	cmp	r3, #0
   17544:	blt	177d8 <__assert_fail@plt+0x62c0>
   17548:	mov	r4, r3
   1754c:	mov	r9, r2
   17550:	cmp	r3, r2
   17554:	bgt	177d8 <__assert_fail@plt+0x62c0>
   17558:	mov	r7, r0
   1755c:	ldr	r0, [fp, #8]
   17560:	mov	r8, r9
   17564:	mov	sl, r1
   17568:	movw	r1, #0
   1756c:	ldr	r6, [r7]
   17570:	movt	r1, #0
   17574:	add	r0, r0, r4
   17578:	cmp	r0, r9
   1757c:	bicle	r8, r0, r0, asr #31
   17580:	movw	r0, #0
   17584:	movt	r0, #0
   17588:	orrs	r5, r1, r0
   1758c:	beq	17598 <__assert_fail@plt+0x6080>
   17590:	add	r0, r6, #136	; 0x88
   17594:	bl	11290 <pthread_mutex_lock@plt>
   17598:	ldrb	r0, [r7, #28]
   1759c:	ldr	r2, [fp, #16]
   175a0:	cmp	r8, r4
   175a4:	ubfx	r1, r0, #5, #2
   175a8:	str	r6, [sp, #20]
   175ac:	str	r5, [sp, #36]	; 0x24
   175b0:	str	r4, [sp, #32]
   175b4:	str	sl, [sp, #28]
   175b8:	str	r1, [sp, #24]
   175bc:	ble	175e8 <__assert_fail@plt+0x60d0>
   175c0:	tst	r0, #8
   175c4:	bne	175e8 <__assert_fail@plt+0x60d0>
   175c8:	ldr	r1, [r7, #16]
   175cc:	cmp	r1, #0
   175d0:	beq	175e8 <__assert_fail@plt+0x60d0>
   175d4:	mov	r0, r7
   175d8:	mov	r4, r2
   175dc:	bl	152c8 <__assert_fail@plt+0x3db0>
   175e0:	ldrb	r0, [r7, #28]
   175e4:	mov	r2, r4
   175e8:	mov	sl, #1
   175ec:	mov	r6, #0
   175f0:	cmp	r2, #0
   175f4:	str	r7, [fp, #-32]	; 0xffffffe0
   175f8:	beq	17644 <__assert_fail@plt+0x612c>
   175fc:	ands	r1, r0, #16
   17600:	bne	17644 <__assert_fail@plt+0x612c>
   17604:	and	r0, r0, #6
   17608:	cmp	r0, #4
   1760c:	bne	17634 <__assert_fail@plt+0x611c>
   17610:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17614:	ldr	sl, [r2]
   17618:	ldr	r0, [r0, #24]
   1761c:	cmp	sl, r0
   17620:	bhi	1763c <__assert_fail@plt+0x6124>
   17624:	cmp	sl, #1
   17628:	movwlt	r2, #0
   1762c:	movwlt	sl, #1
   17630:	b	17640 <__assert_fail@plt+0x6128>
   17634:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17638:	ldr	r0, [r0, #24]
   1763c:	add	sl, r0, #1
   17640:	mov	r6, r2
   17644:	lsl	r0, sl, #3
   17648:	bl	22220 <__assert_fail@plt+0x10d08>
   1764c:	cmp	r0, #0
   17650:	beq	177e4 <__assert_fail@plt+0x62cc>
   17654:	mov	r4, r0
   17658:	ldr	r0, [fp, #12]
   1765c:	str	r8, [sp]
   17660:	mov	r2, r9
   17664:	stmib	sp, {r0, sl}
   17668:	str	r4, [sp, #12]
   1766c:	ldr	r0, [sp, #24]
   17670:	ldr	r5, [sp, #32]
   17674:	ldr	r1, [sp, #28]
   17678:	str	r0, [sp, #16]
   1767c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17680:	mov	r3, r5
   17684:	bl	15ba4 <__assert_fail@plt+0x468c>
   17688:	cmp	r0, #0
   1768c:	beq	176a0 <__assert_fail@plt+0x6188>
   17690:	mvn	r6, #1
   17694:	cmp	r0, #1
   17698:	mvneq	r6, #0
   1769c:	b	177b8 <__assert_fail@plt+0x62a0>
   176a0:	cmp	r6, #0
   176a4:	beq	1779c <__assert_fail@plt+0x6284>
   176a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   176ac:	add	r9, sl, #1
   176b0:	ldrb	r0, [r0, #28]
   176b4:	ubfx	r0, r0, #1, #2
   176b8:	cmp	r0, #1
   176bc:	beq	17708 <__assert_fail@plt+0x61f0>
   176c0:	mov	r8, #2
   176c4:	cmp	r0, #0
   176c8:	bne	17718 <__assert_fail@plt+0x6200>
   176cc:	lsl	r8, r9, #2
   176d0:	mov	r0, r8
   176d4:	bl	22220 <__assert_fail@plt+0x10d08>
   176d8:	mov	r7, #0
   176dc:	cmp	r0, #0
   176e0:	str	r0, [r6, #4]
   176e4:	beq	17780 <__assert_fail@plt+0x6268>
   176e8:	mov	r0, r8
   176ec:	bl	22220 <__assert_fail@plt+0x10d08>
   176f0:	cmp	r0, #0
   176f4:	str	r0, [r6, #8]
   176f8:	beq	17838 <__assert_fail@plt+0x6320>
   176fc:	str	r9, [r6]
   17700:	mov	r8, #1
   17704:	b	17718 <__assert_fail@plt+0x6200>
   17708:	ldr	r0, [r6]
   1770c:	mov	r8, #1
   17710:	cmp	r9, r0
   17714:	bhi	177f0 <__assert_fail@plt+0x62d8>
   17718:	cmp	sl, #1
   1771c:	blt	1774c <__assert_fail@plt+0x6234>
   17720:	ldmib	r6, {r1, r2}
   17724:	add	r0, r4, #4
   17728:	mov	r3, sl
   1772c:	ldr	r7, [r0, #-4]
   17730:	subs	r3, r3, #1
   17734:	str	r7, [r1], #4
   17738:	ldr	r7, [r0]
   1773c:	add	r0, r0, #8
   17740:	str	r7, [r2], #4
   17744:	bne	1772c <__assert_fail@plt+0x6214>
   17748:	b	17750 <__assert_fail@plt+0x6238>
   1774c:	mov	sl, #0
   17750:	ldr	r0, [r6]
   17754:	cmp	sl, r0
   17758:	bcs	1777c <__assert_fail@plt+0x6264>
   1775c:	ldmib	r6, {r0, r1}
   17760:	mvn	r2, #0
   17764:	str	r2, [r1, sl, lsl #2]
   17768:	str	r2, [r0, sl, lsl #2]
   1776c:	add	sl, sl, #1
   17770:	ldr	r3, [r6]
   17774:	cmp	sl, r3
   17778:	bcc	17764 <__assert_fail@plt+0x624c>
   1777c:	mov	r7, r8
   17780:	ldr	r1, [fp, #-32]	; 0xffffffe0
   17784:	cmp	r7, #0
   17788:	ldrb	r0, [r1, #28]
   1778c:	and	r0, r0, #249	; 0xf9
   17790:	orr	r0, r0, r7, lsl #1
   17794:	strb	r0, [r1, #28]
   17798:	beq	177b4 <__assert_fail@plt+0x629c>
   1779c:	ldr	r0, [fp, #20]
   177a0:	cmp	r0, #0
   177a4:	ldreq	r6, [r4]
   177a8:	ldrne	r0, [r4, #4]
   177ac:	subne	r6, r0, r5
   177b0:	b	177b8 <__assert_fail@plt+0x62a0>
   177b4:	mvn	r6, #1
   177b8:	ldr	r5, [sp, #36]	; 0x24
   177bc:	mov	r0, r4
   177c0:	bl	223dc <__assert_fail@plt+0x10ec4>
   177c4:	cmp	r5, #0
   177c8:	beq	177d8 <__assert_fail@plt+0x62c0>
   177cc:	ldr	r0, [sp, #20]
   177d0:	add	r0, r0, #136	; 0x88
   177d4:	bl	111f4 <pthread_mutex_unlock@plt>
   177d8:	mov	r0, r6
   177dc:	sub	sp, fp, #28
   177e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177e4:	ldr	r5, [sp, #36]	; 0x24
   177e8:	mvn	r6, #1
   177ec:	b	177c4 <__assert_fail@plt+0x62ac>
   177f0:	ldr	r0, [r6, #4]
   177f4:	lsl	r1, r9, #2
   177f8:	str	r1, [sp, #28]
   177fc:	bl	22250 <__assert_fail@plt+0x10d38>
   17800:	mov	r7, #0
   17804:	cmp	r0, #0
   17808:	str	r0, [sp, #24]
   1780c:	beq	17780 <__assert_fail@plt+0x6268>
   17810:	ldr	r0, [r6, #8]
   17814:	ldr	r1, [sp, #28]
   17818:	bl	22250 <__assert_fail@plt+0x10d38>
   1781c:	cmp	r0, #0
   17820:	beq	17844 <__assert_fail@plt+0x632c>
   17824:	ldr	r1, [sp, #24]
   17828:	str	r9, [r6]
   1782c:	str	r1, [r6, #4]
   17830:	str	r0, [r6, #8]
   17834:	b	17718 <__assert_fail@plt+0x6200>
   17838:	ldr	r0, [r6, #4]
   1783c:	bl	223dc <__assert_fail@plt+0x10ec4>
   17840:	b	17780 <__assert_fail@plt+0x6268>
   17844:	ldr	r0, [sp, #24]
   17848:	b	1783c <__assert_fail@plt+0x6324>
   1784c:	push	{fp, lr}
   17850:	mov	fp, sp
   17854:	sub	sp, sp, #16
   17858:	mov	ip, #0
   1785c:	str	r2, [sp, #4]
   17860:	str	ip, [sp, #12]
   17864:	ldr	ip, [fp, #12]
   17868:	str	ip, [sp, #8]
   1786c:	ldr	ip, [fp, #8]
   17870:	str	ip, [sp]
   17874:	bl	17530 <__assert_fail@plt+0x6018>
   17878:	mov	sp, fp
   1787c:	pop	{fp, pc}
   17880:	push	{fp, lr}
   17884:	mov	fp, sp
   17888:	sub	sp, sp, #24
   1788c:	mov	ip, #1
   17890:	str	ip, [sp, #20]
   17894:	mov	ip, #0
   17898:	str	ip, [sp, #8]
   1789c:	ldr	ip, [fp, #20]
   178a0:	str	ip, [sp, #16]
   178a4:	ldr	ip, [fp, #16]
   178a8:	str	ip, [sp, #12]
   178ac:	ldr	ip, [fp, #12]
   178b0:	str	ip, [sp, #4]
   178b4:	ldr	ip, [fp, #8]
   178b8:	str	ip, [sp]
   178bc:	bl	178c8 <__assert_fail@plt+0x63b0>
   178c0:	mov	sp, fp
   178c4:	pop	{fp, pc}
   178c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178cc:	add	fp, sp, #28
   178d0:	sub	sp, sp, #20
   178d4:	ldr	r4, [fp, #8]
   178d8:	mov	r8, r1
   178dc:	mov	r1, r0
   178e0:	mov	r6, r2
   178e4:	orr	r0, r4, r2
   178e8:	ldr	r2, [fp, #24]
   178ec:	orr	r0, r0, r2
   178f0:	cmp	r0, #0
   178f4:	blt	179a8 <__assert_fail@plt+0x6490>
   178f8:	adds	sl, r6, r4
   178fc:	bvs	179a8 <__assert_fail@plt+0x6490>
   17900:	mov	r5, #0
   17904:	cmp	r4, #1
   17908:	blt	1795c <__assert_fail@plt+0x6444>
   1790c:	mov	r9, r3
   17910:	cmp	r6, #1
   17914:	blt	17964 <__assert_fail@plt+0x644c>
   17918:	mov	r0, sl
   1791c:	mov	r5, r1
   17920:	bl	22220 <__assert_fail@plt+0x10d08>
   17924:	cmp	r0, #0
   17928:	beq	179a8 <__assert_fail@plt+0x6490>
   1792c:	mov	r1, r8
   17930:	mov	r2, r6
   17934:	mov	r7, r0
   17938:	bl	112a8 <memcpy@plt>
   1793c:	add	r0, r7, r6
   17940:	mov	r1, r9
   17944:	mov	r2, r4
   17948:	bl	112a8 <memcpy@plt>
   1794c:	ldr	r2, [fp, #24]
   17950:	mov	r1, r5
   17954:	mov	r5, r7
   17958:	b	17968 <__assert_fail@plt+0x6450>
   1795c:	mov	r7, r8
   17960:	b	17968 <__assert_fail@plt+0x6450>
   17964:	mov	r7, r9
   17968:	add	r6, fp, #12
   1796c:	ldr	r0, [fp, #28]
   17970:	ldm	r6, {r3, r4, r6}
   17974:	str	r4, [sp]
   17978:	stmib	sp, {r2, r6}
   1797c:	str	r0, [sp, #12]
   17980:	mov	r0, r1
   17984:	mov	r1, r7
   17988:	mov	r2, sl
   1798c:	bl	17530 <__assert_fail@plt+0x6018>
   17990:	mov	r4, r0
   17994:	mov	r0, r5
   17998:	bl	223dc <__assert_fail@plt+0x10ec4>
   1799c:	mov	r0, r4
   179a0:	sub	sp, fp, #28
   179a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179a8:	mvn	r0, #1
   179ac:	sub	sp, fp, #28
   179b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179b4:	push	{fp, lr}
   179b8:	mov	fp, sp
   179bc:	sub	sp, sp, #24
   179c0:	mov	ip, #0
   179c4:	str	ip, [sp, #20]
   179c8:	ldr	ip, [fp, #24]
   179cc:	str	ip, [sp, #16]
   179d0:	ldr	ip, [fp, #20]
   179d4:	str	ip, [sp, #12]
   179d8:	ldr	ip, [fp, #16]
   179dc:	str	ip, [sp, #8]
   179e0:	ldr	ip, [fp, #12]
   179e4:	str	ip, [sp, #4]
   179e8:	ldr	ip, [fp, #8]
   179ec:	str	ip, [sp]
   179f0:	bl	178c8 <__assert_fail@plt+0x63b0>
   179f4:	mov	sp, fp
   179f8:	pop	{fp, pc}
   179fc:	ldrb	ip, [r0, #28]
   17a00:	cmp	r2, #0
   17a04:	bic	ip, ip, #6
   17a08:	orrne	ip, ip, #2
   17a0c:	strb	ip, [r0, #28]
   17a10:	ldr	r0, [sp]
   17a14:	moveq	r0, r2
   17a18:	cmp	r2, #0
   17a1c:	moveq	r3, r2
   17a20:	stm	r1, {r2, r3}
   17a24:	str	r0, [r1, #8]
   17a28:	bx	lr
   17a2c:	ldr	r1, [r0, #4]
   17a30:	movw	r2, #255	; 0xff
   17a34:	movt	r2, #4
   17a38:	and	r1, r1, r2
   17a3c:	cmp	r1, #3
   17a40:	beq	17a54 <__assert_fail@plt+0x653c>
   17a44:	cmp	r1, #6
   17a48:	bxne	lr
   17a4c:	ldr	r0, [r0]
   17a50:	b	17abc <__assert_fail@plt+0x65a4>
   17a54:	ldr	r0, [r0]
   17a58:	b	223dc <__assert_fail@plt+0x10ec4>
   17a5c:	push	{r4, sl, fp, lr}
   17a60:	add	fp, sp, #8
   17a64:	mov	r4, r0
   17a68:	ldr	r0, [r0, #24]
   17a6c:	bl	223dc <__assert_fail@plt+0x10ec4>
   17a70:	ldr	r0, [r4, #36]	; 0x24
   17a74:	bl	223dc <__assert_fail@plt+0x10ec4>
   17a78:	ldr	r0, [r4, #40]	; 0x28
   17a7c:	add	r1, r4, #4
   17a80:	cmp	r0, r1
   17a84:	beq	17a98 <__assert_fail@plt+0x6580>
   17a88:	ldr	r0, [r0, #8]
   17a8c:	bl	223dc <__assert_fail@plt+0x10ec4>
   17a90:	ldr	r0, [r4, #40]	; 0x28
   17a94:	bl	223dc <__assert_fail@plt+0x10ec4>
   17a98:	ldr	r0, [r4, #12]
   17a9c:	bl	223dc <__assert_fail@plt+0x10ec4>
   17aa0:	ldr	r0, [r4, #48]	; 0x30
   17aa4:	bl	223dc <__assert_fail@plt+0x10ec4>
   17aa8:	ldr	r0, [r4, #44]	; 0x2c
   17aac:	bl	223dc <__assert_fail@plt+0x10ec4>
   17ab0:	mov	r0, r4
   17ab4:	pop	{r4, sl, fp, lr}
   17ab8:	b	223dc <__assert_fail@plt+0x10ec4>
   17abc:	push	{r4, sl, fp, lr}
   17ac0:	add	fp, sp, #8
   17ac4:	mov	r4, r0
   17ac8:	ldr	r0, [r0]
   17acc:	bl	223dc <__assert_fail@plt+0x10ec4>
   17ad0:	ldr	r0, [r4, #4]
   17ad4:	bl	223dc <__assert_fail@plt+0x10ec4>
   17ad8:	ldr	r0, [r4, #8]
   17adc:	bl	223dc <__assert_fail@plt+0x10ec4>
   17ae0:	ldr	r0, [r4, #12]
   17ae4:	bl	223dc <__assert_fail@plt+0x10ec4>
   17ae8:	mov	r0, r4
   17aec:	pop	{r4, sl, fp, lr}
   17af0:	b	223dc <__assert_fail@plt+0x10ec4>
   17af4:	push	{r4, r5, fp, lr}
   17af8:	add	fp, sp, #8
   17afc:	ldr	r4, [r0]
   17b00:	ldr	r0, [r4, #56]	; 0x38
   17b04:	cmp	r0, #0
   17b08:	beq	17b20 <__assert_fail@plt+0x6608>
   17b0c:	ldr	r5, [r0]
   17b10:	bl	223dc <__assert_fail@plt+0x10ec4>
   17b14:	cmp	r5, #0
   17b18:	mov	r0, r5
   17b1c:	bne	17b0c <__assert_fail@plt+0x65f4>
   17b20:	mov	r0, #31
   17b24:	mov	r5, #0
   17b28:	str	r0, [r4, #64]	; 0x40
   17b2c:	str	r5, [r4, #52]	; 0x34
   17b30:	str	r5, [r4, #56]	; 0x38
   17b34:	ldr	r0, [r4, #16]
   17b38:	bl	223dc <__assert_fail@plt+0x10ec4>
   17b3c:	str	r5, [r4, #16]
   17b40:	pop	{r4, r5, fp, pc}
   17b44:	push	{r4, sl, fp, lr}
   17b48:	add	fp, sp, #8
   17b4c:	mov	r4, r0
   17b50:	ldr	r0, [r0, #8]
   17b54:	bl	223dc <__assert_fail@plt+0x10ec4>
   17b58:	ldr	r0, [r4, #12]
   17b5c:	bl	223dc <__assert_fail@plt+0x10ec4>
   17b60:	ldrb	r0, [r4, #75]	; 0x4b
   17b64:	cmp	r0, #0
   17b68:	popeq	{r4, sl, fp, pc}
   17b6c:	ldr	r0, [r4, #4]
   17b70:	pop	{r4, sl, fp, lr}
   17b74:	b	223dc <__assert_fail@plt+0x10ec4>
   17b78:	push	{r4, r5, r6, r7, fp, lr}
   17b7c:	add	fp, sp, #16
   17b80:	mov	r5, r0
   17b84:	ldr	r0, [r0, #80]	; 0x50
   17b88:	mov	r4, r1
   17b8c:	cmp	r0, #2
   17b90:	blt	17bdc <__assert_fail@plt+0x66c4>
   17b94:	mov	r6, #12
   17b98:	cmn	r4, #-1073741823	; 0xc0000001
   17b9c:	bhi	17c08 <__assert_fail@plt+0x66f0>
   17ba0:	ldr	r0, [r5, #8]
   17ba4:	lsl	r7, r4, #2
   17ba8:	mov	r1, r7
   17bac:	bl	22250 <__assert_fail@plt+0x10d38>
   17bb0:	cmp	r0, #0
   17bb4:	beq	17c08 <__assert_fail@plt+0x66f0>
   17bb8:	str	r0, [r5, #8]
   17bbc:	ldr	r0, [r5, #12]
   17bc0:	cmp	r0, #0
   17bc4:	beq	17bdc <__assert_fail@plt+0x66c4>
   17bc8:	mov	r1, r7
   17bcc:	bl	22250 <__assert_fail@plt+0x10d38>
   17bd0:	cmp	r0, #0
   17bd4:	beq	17c08 <__assert_fail@plt+0x66f0>
   17bd8:	str	r0, [r5, #12]
   17bdc:	ldrb	r0, [r5, #75]	; 0x4b
   17be0:	cmp	r0, #0
   17be4:	beq	17c00 <__assert_fail@plt+0x66e8>
   17be8:	ldr	r0, [r5, #4]
   17bec:	mov	r1, r4
   17bf0:	bl	22250 <__assert_fail@plt+0x10d38>
   17bf4:	cmp	r0, #0
   17bf8:	beq	17c10 <__assert_fail@plt+0x66f8>
   17bfc:	str	r0, [r5, #4]
   17c00:	mov	r6, #0
   17c04:	str	r4, [r5, #36]	; 0x24
   17c08:	mov	r0, r6
   17c0c:	pop	{r4, r5, r6, r7, fp, pc}
   17c10:	mov	r6, #12
   17c14:	b	17c08 <__assert_fail@plt+0x66f0>
   17c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c1c:	add	fp, sp, #28
   17c20:	sub	sp, sp, #92	; 0x5c
   17c24:	mov	r4, r0
   17c28:	ldrb	r0, [r0, #74]	; 0x4a
   17c2c:	ldr	r2, [r4, #36]	; 0x24
   17c30:	ldr	r1, [r4, #48]	; 0x30
   17c34:	ldr	r5, [r4, #28]
   17c38:	cmp	r2, r1
   17c3c:	movgt	r2, r1
   17c40:	cmp	r0, #0
   17c44:	str	r2, [sp, #4]
   17c48:	bne	17c68 <__assert_fail@plt+0x6750>
   17c4c:	mov	r8, r4
   17c50:	ldr	r0, [r8, #64]!	; 0x40
   17c54:	cmp	r0, #0
   17c58:	bne	17c68 <__assert_fail@plt+0x6750>
   17c5c:	ldrb	r0, [r4, #76]	; 0x4c
   17c60:	cmp	r0, #0
   17c64:	beq	17c70 <__assert_fail@plt+0x6758>
   17c68:	ldr	r7, [r4, #32]
   17c6c:	b	17e3c <__assert_fail@plt+0x6924>
   17c70:	ldr	r0, [sp, #4]
   17c74:	cmp	r0, r5
   17c78:	ble	17c88 <__assert_fail@plt+0x6770>
   17c7c:	add	r9, r4, #16
   17c80:	mov	sl, r5
   17c84:	b	17cdc <__assert_fail@plt+0x67c4>
   17c88:	mov	sl, r5
   17c8c:	mov	r7, r5
   17c90:	b	17f48 <__assert_fail@plt+0x6a30>
   17c94:	add	r0, r5, #1
   17c98:	cmp	r0, #2
   17c9c:	bcc	17cb0 <__assert_fail@plt+0x6798>
   17ca0:	ldr	r0, [r4, #36]	; 0x24
   17ca4:	ldr	r1, [r4, #48]	; 0x30
   17ca8:	cmp	r0, r1
   17cac:	blt	17e28 <__assert_fail@plt+0x6910>
   17cb0:	ldr	r0, [r4, #4]
   17cb4:	cmn	r5, #1
   17cb8:	strb	sl, [r0, r7]
   17cbc:	ldr	r0, [r4, #8]
   17cc0:	str	sl, [r0, r7, lsl #2]
   17cc4:	add	sl, r7, #1
   17cc8:	bne	17e0c <__assert_fail@plt+0x68f4>
   17ccc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17cd0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17cd4:	stm	r9, {r0, r1}
   17cd8:	b	17e0c <__assert_fail@plt+0x68f4>
   17cdc:	ldr	r7, [r4, #24]
   17ce0:	ldr	r5, [r4]
   17ce4:	mov	r6, sl
   17ce8:	add	r0, r7, sl
   17cec:	ldrb	sl, [r5, r0]
   17cf0:	tst	sl, #128	; 0x80
   17cf4:	bne	17d38 <__assert_fail@plt+0x6820>
   17cf8:	mov	r0, r9
   17cfc:	bl	112d8 <mbsinit@plt>
   17d00:	cmp	r0, #0
   17d04:	beq	17d38 <__assert_fail@plt+0x6820>
   17d08:	mov	r0, sl
   17d0c:	bl	114d0 <towupper@plt>
   17d10:	cmp	r0, #128	; 0x80
   17d14:	bcs	17d30 <__assert_fail@plt+0x6818>
   17d18:	ldr	r1, [r4, #4]
   17d1c:	add	sl, r6, #1
   17d20:	strb	r0, [r1, r6]
   17d24:	ldr	r1, [r4, #8]
   17d28:	str	r0, [r1, r6, lsl #2]
   17d2c:	b	17e0c <__assert_fail@plt+0x68f4>
   17d30:	ldr	r5, [r4]
   17d34:	ldr	r7, [r4, #24]
   17d38:	ldm	r9, {r0, r1}
   17d3c:	mov	r3, r9
   17d40:	str	r0, [fp, #-40]	; 0xffffffd8
   17d44:	ldr	r0, [sp, #4]
   17d48:	str	r1, [fp, #-36]	; 0xffffffdc
   17d4c:	sub	r2, r0, r6
   17d50:	add	r0, r5, r7
   17d54:	mov	r7, r6
   17d58:	add	r1, r0, r6
   17d5c:	add	r0, sp, #12
   17d60:	bl	2243c <__assert_fail@plt+0x10f24>
   17d64:	mov	r5, r0
   17d68:	sub	r0, r0, #1
   17d6c:	cmn	r0, #4
   17d70:	bhi	17c94 <__assert_fail@plt+0x677c>
   17d74:	ldr	r0, [sp, #12]
   17d78:	bl	114d0 <towupper@plt>
   17d7c:	mov	r6, r0
   17d80:	ldr	r0, [sp, #12]
   17d84:	cmp	r6, r0
   17d88:	bne	17da8 <__assert_fail@plt+0x6890>
   17d8c:	ldr	r1, [r4]
   17d90:	ldr	r2, [r4, #24]
   17d94:	ldr	r0, [r4, #4]
   17d98:	add	r1, r1, r2
   17d9c:	add	r0, r0, r7
   17da0:	add	r1, r1, r7
   17da4:	b	17dd0 <__assert_fail@plt+0x68b8>
   17da8:	add	sl, sp, #16
   17dac:	mov	r1, r6
   17db0:	sub	r2, fp, #40	; 0x28
   17db4:	mov	r0, sl
   17db8:	bl	11230 <wcrtomb@plt>
   17dbc:	cmp	r5, r0
   17dc0:	bne	17e20 <__assert_fail@plt+0x6908>
   17dc4:	ldr	r0, [r4, #4]
   17dc8:	mov	r1, sl
   17dcc:	add	r0, r0, r7
   17dd0:	mov	r2, r5
   17dd4:	bl	112a8 <memcpy@plt>
   17dd8:	ldr	r0, [r4, #8]
   17ddc:	add	sl, r7, #1
   17de0:	str	r6, [r0, r7, lsl #2]
   17de4:	add	r6, r5, r7
   17de8:	cmp	sl, r6
   17dec:	bge	17e0c <__assert_fail@plt+0x68f4>
   17df0:	add	r0, r0, r7, lsl #2
   17df4:	mvn	r1, #3
   17df8:	add	r2, r1, r5, lsl #2
   17dfc:	add	r0, r0, #4
   17e00:	mov	r1, #255	; 0xff
   17e04:	bl	1141c <memset@plt>
   17e08:	mov	sl, r6
   17e0c:	ldr	r0, [sp, #4]
   17e10:	mov	r7, sl
   17e14:	cmp	r0, sl
   17e18:	bgt	17cdc <__assert_fail@plt+0x67c4>
   17e1c:	b	17f48 <__assert_fail@plt+0x6a30>
   17e20:	mov	sl, r7
   17e24:	b	17e54 <__assert_fail@plt+0x693c>
   17e28:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17e2c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   17e30:	mov	sl, r7
   17e34:	stm	r9, {r0, r1}
   17e38:	b	17f48 <__assert_fail@plt+0x6a30>
   17e3c:	ldr	r0, [sp, #4]
   17e40:	cmp	r5, r0
   17e44:	bge	17f44 <__assert_fail@plt+0x6a2c>
   17e48:	add	r8, r4, #64	; 0x40
   17e4c:	add	r9, r4, #16
   17e50:	mov	sl, r5
   17e54:	ldm	r9, {r0, r1}
   17e58:	str	r7, [sp]
   17e5c:	str	r0, [fp, #-40]	; 0xffffffd8
   17e60:	ldr	r0, [sp, #4]
   17e64:	str	r1, [fp, #-36]	; 0xffffffdc
   17e68:	sub	r2, r0, sl
   17e6c:	ldr	r0, [r8]
   17e70:	cmp	r0, #0
   17e74:	bne	17f5c <__assert_fail@plt+0x6a44>
   17e78:	ldr	r0, [r4]
   17e7c:	ldr	r1, [r4, #24]
   17e80:	add	r0, r0, r1
   17e84:	add	r5, r0, r7
   17e88:	add	r0, sp, #8
   17e8c:	mov	r1, r5
   17e90:	mov	r3, r9
   17e94:	bl	2243c <__assert_fail@plt+0x10f24>
   17e98:	sub	r8, r0, #1
   17e9c:	mov	r6, r0
   17ea0:	cmn	r8, #4
   17ea4:	bhi	17fb0 <__assert_fail@plt+0x6a98>
   17ea8:	ldr	r0, [sp, #8]
   17eac:	bl	114d0 <towupper@plt>
   17eb0:	mov	r7, r0
   17eb4:	ldr	r0, [sp, #8]
   17eb8:	cmp	r7, r0
   17ebc:	bne	17ecc <__assert_fail@plt+0x69b4>
   17ec0:	ldr	r0, [r4, #4]
   17ec4:	mov	r1, r5
   17ec8:	b	17eec <__assert_fail@plt+0x69d4>
   17ecc:	add	r0, sp, #16
   17ed0:	sub	r2, fp, #40	; 0x28
   17ed4:	mov	r1, r7
   17ed8:	bl	11230 <wcrtomb@plt>
   17edc:	cmp	r0, r6
   17ee0:	bne	1802c <__assert_fail@plt+0x6b14>
   17ee4:	ldr	r0, [r4, #4]
   17ee8:	add	r1, sp, #16
   17eec:	add	r0, r0, sl
   17ef0:	mov	r2, r6
   17ef4:	bl	112a8 <memcpy@plt>
   17ef8:	ldrb	r0, [r4, #76]	; 0x4c
   17efc:	cmp	r0, #0
   17f00:	bne	18148 <__assert_fail@plt+0x6c30>
   17f04:	ldr	r0, [r4, #8]
   17f08:	add	r5, r6, sl
   17f0c:	add	r1, sl, #1
   17f10:	cmp	r1, r5
   17f14:	str	r7, [r0, sl, lsl #2]
   17f18:	ldr	r7, [sp]
   17f1c:	add	r7, r6, r7
   17f20:	bge	17f3c <__assert_fail@plt+0x6a24>
   17f24:	add	r0, r0, r1, lsl #2
   17f28:	mvn	r1, #3
   17f2c:	add	r2, r1, r6, lsl #2
   17f30:	mov	r1, #255	; 0xff
   17f34:	bl	1141c <memset@plt>
   17f38:	b	17e3c <__assert_fail@plt+0x6924>
   17f3c:	mov	r5, r1
   17f40:	b	17e3c <__assert_fail@plt+0x6924>
   17f44:	mov	sl, r5
   17f48:	mov	r0, #0
   17f4c:	str	sl, [r4, #28]
   17f50:	str	r7, [r4, #32]
   17f54:	sub	sp, fp, #28
   17f58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f5c:	cmp	r2, #1
   17f60:	add	r5, sp, #16
   17f64:	ldrge	r1, [r4, #80]	; 0x50
   17f68:	cmpge	r1, #1
   17f6c:	blt	17e88 <__assert_fail@plt+0x6970>
   17f70:	mov	r6, r7
   17f74:	ldr	r7, [r4, #24]
   17f78:	ldr	r3, [r4]
   17f7c:	add	r5, sp, #16
   17f80:	add	r7, r6, r7
   17f84:	add	r3, r3, r7
   17f88:	mov	r7, #0
   17f8c:	ldrb	r6, [r3, r7]
   17f90:	ldrb	r6, [r0, r6]
   17f94:	strb	r6, [r5, r7]
   17f98:	add	r7, r7, #1
   17f9c:	cmp	r7, r2
   17fa0:	bge	17e88 <__assert_fail@plt+0x6970>
   17fa4:	cmp	r7, r1
   17fa8:	blt	17f8c <__assert_fail@plt+0x6a74>
   17fac:	b	17e88 <__assert_fail@plt+0x6970>
   17fb0:	add	r0, r6, #1
   17fb4:	cmp	r0, #2
   17fb8:	bcc	17fcc <__assert_fail@plt+0x6ab4>
   17fbc:	ldr	r0, [r4, #36]	; 0x24
   17fc0:	ldr	r1, [r4, #48]	; 0x30
   17fc4:	cmp	r0, r1
   17fc8:	blt	1816c <__assert_fail@plt+0x6c54>
   17fcc:	ldr	r2, [r4, #24]
   17fd0:	ldr	r7, [sp]
   17fd4:	ldr	r0, [r4]
   17fd8:	ldr	r1, [r4, #64]	; 0x40
   17fdc:	add	r5, sl, #1
   17fe0:	add	r2, r2, r7
   17fe4:	cmp	r1, #0
   17fe8:	ldrb	r0, [r0, r2]
   17fec:	ldrbne	r0, [r1, r0]
   17ff0:	ldr	r1, [r4, #4]
   17ff4:	strb	r0, [r1, sl]
   17ff8:	ldrb	r1, [r4, #76]	; 0x4c
   17ffc:	cmp	r1, #0
   18000:	ldrne	r1, [r4, #12]
   18004:	strne	r7, [r1, sl, lsl #2]
   18008:	add	r7, r7, #1
   1800c:	cmn	r6, #1
   18010:	ldr	r1, [r4, #8]
   18014:	str	r0, [r1, sl, lsl #2]
   18018:	bne	17e3c <__assert_fail@plt+0x6924>
   1801c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18020:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18024:	stm	r9, {r0, r1}
   18028:	b	17e3c <__assert_fail@plt+0x6924>
   1802c:	mov	r2, r0
   18030:	cmn	r0, #1
   18034:	beq	17ec0 <__assert_fail@plt+0x69a8>
   18038:	ldr	r1, [r4, #36]	; 0x24
   1803c:	add	r5, r2, sl
   18040:	cmp	r5, r1
   18044:	bhi	1816c <__assert_fail@plt+0x6c54>
   18048:	ldr	r0, [r4, #12]
   1804c:	cmp	r0, #0
   18050:	bne	18070 <__assert_fail@plt+0x6b58>
   18054:	lsl	r0, r1, #2
   18058:	mov	r9, r2
   1805c:	bl	22220 <__assert_fail@plt+0x10d08>
   18060:	mov	r2, r9
   18064:	cmp	r0, #0
   18068:	str	r0, [r4, #12]
   1806c:	beq	18180 <__assert_fail@plt+0x6c68>
   18070:	ldrb	r1, [r4, #76]	; 0x4c
   18074:	cmp	r1, #0
   18078:	bne	180a0 <__assert_fail@plt+0x6b88>
   1807c:	cmp	sl, #0
   18080:	beq	18098 <__assert_fail@plt+0x6b80>
   18084:	mov	r1, #0
   18088:	str	r1, [r0, r1, lsl #2]
   1808c:	add	r1, r1, #1
   18090:	cmp	sl, r1
   18094:	bne	18088 <__assert_fail@plt+0x6b70>
   18098:	mov	r0, #1
   1809c:	strb	r0, [r4, #76]	; 0x4c
   180a0:	ldr	r0, [r4, #4]
   180a4:	add	r1, sp, #16
   180a8:	mov	r9, r2
   180ac:	add	r0, r0, sl
   180b0:	bl	112a8 <memcpy@plt>
   180b4:	ldr	r1, [r4, #8]
   180b8:	ldr	r3, [sp]
   180bc:	mov	lr, r9
   180c0:	cmp	r9, #2
   180c4:	str	r7, [r1, sl, lsl #2]
   180c8:	ldr	r0, [r4, #12]
   180cc:	str	r3, [r0, sl, lsl #2]
   180d0:	bcc	18108 <__assert_fail@plt+0x6bf0>
   180d4:	add	r0, r0, sl, lsl #2
   180d8:	add	r1, r1, sl, lsl #2
   180dc:	mov	r2, #1
   180e0:	mvn	ip, #0
   180e4:	cmp	r2, r6
   180e8:	mov	r7, r8
   180ec:	movcc	r7, r2
   180f0:	add	r7, r7, r3
   180f4:	str	r7, [r0, r2, lsl #2]
   180f8:	str	ip, [r1, r2, lsl #2]
   180fc:	add	r2, r2, #1
   18100:	cmp	lr, r2
   18104:	bne	180e4 <__assert_fail@plt+0x6bcc>
   18108:	ldr	r0, [r4, #48]	; 0x30
   1810c:	ldr	r2, [r4, #52]	; 0x34
   18110:	sub	r1, lr, r6
   18114:	mov	r7, r3
   18118:	add	r7, r6, r7
   1811c:	add	r0, r0, r1
   18120:	cmp	r2, r3
   18124:	str	r0, [r4, #48]	; 0x30
   18128:	ldrgt	r2, [r4, #56]	; 0x38
   1812c:	addgt	r1, r2, r1
   18130:	strgt	r1, [r4, #56]	; 0x38
   18134:	ldr	r1, [r4, #36]	; 0x24
   18138:	cmp	r1, r0
   1813c:	movgt	r1, r0
   18140:	str	r1, [sp, #4]
   18144:	b	17e3c <__assert_fail@plt+0x6924>
   18148:	ldr	r0, [r4, #12]
   1814c:	ldr	r1, [sp]
   18150:	mov	r2, r6
   18154:	add	r0, r0, sl, lsl #2
   18158:	str	r1, [r0], #4
   1815c:	add	r1, r1, #1
   18160:	subs	r2, r2, #1
   18164:	bne	18158 <__assert_fail@plt+0x6c40>
   18168:	b	17f04 <__assert_fail@plt+0x69ec>
   1816c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18170:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18174:	stm	r9, {r0, r1}
   18178:	ldr	r7, [sp]
   1817c:	b	17f48 <__assert_fail@plt+0x6a30>
   18180:	mov	r0, #12
   18184:	b	17f54 <__assert_fail@plt+0x6a3c>
   18188:	push	{r4, r5, r6, sl, fp, lr}
   1818c:	add	fp, sp, #16
   18190:	mov	r4, r0
   18194:	ldr	r5, [r0, #28]
   18198:	ldr	r6, [r0, #36]	; 0x24
   1819c:	ldr	r0, [r0, #48]	; 0x30
   181a0:	cmp	r6, r0
   181a4:	movgt	r6, r0
   181a8:	cmp	r5, r6
   181ac:	bge	181e8 <__assert_fail@plt+0x6cd0>
   181b0:	ldr	r0, [r4]
   181b4:	ldr	r2, [r4, #24]
   181b8:	ldr	r1, [r4, #64]	; 0x40
   181bc:	add	r0, r0, r2
   181c0:	cmp	r1, #0
   181c4:	ldrb	r0, [r0, r5]
   181c8:	ldrbne	r0, [r1, r0]
   181cc:	bl	11488 <toupper@plt>
   181d0:	ldr	r1, [r4, #4]
   181d4:	strb	r0, [r1, r5]
   181d8:	add	r5, r5, #1
   181dc:	cmp	r5, r6
   181e0:	blt	181b0 <__assert_fail@plt+0x6c98>
   181e4:	mov	r5, r6
   181e8:	str	r5, [r4, #28]
   181ec:	str	r5, [r4, #32]
   181f0:	pop	{r4, r5, r6, sl, fp, pc}
   181f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181f8:	add	fp, sp, #28
   181fc:	sub	sp, sp, #68	; 0x44
   18200:	mov	r4, r0
   18204:	ldr	r6, [r0, #28]
   18208:	ldr	r7, [r0, #36]	; 0x24
   1820c:	ldr	r0, [r0, #48]	; 0x30
   18210:	cmp	r7, r0
   18214:	movgt	r7, r0
   18218:	cmp	r7, r6
   1821c:	ble	183bc <__assert_fail@plt+0x6ea4>
   18220:	add	r8, r4, #16
   18224:	mov	r5, sp
   18228:	ldm	r8, {r9, sl}
   1822c:	ldr	r0, [r4, #64]	; 0x40
   18230:	sub	r2, r7, r6
   18234:	cmp	r0, #0
   18238:	bne	18308 <__assert_fail@plt+0x6df0>
   1823c:	ldr	r0, [r4]
   18240:	ldr	r1, [r4, #24]
   18244:	add	r0, r0, r1
   18248:	add	r1, r0, r6
   1824c:	mov	r0, r5
   18250:	mov	r3, r8
   18254:	bl	2243c <__assert_fail@plt+0x10f24>
   18258:	add	r1, r0, #1
   1825c:	cmp	r1, #2
   18260:	bcc	1827c <__assert_fail@plt+0x6d64>
   18264:	cmn	r0, #2
   18268:	bne	182b8 <__assert_fail@plt+0x6da0>
   1826c:	ldr	r0, [r4, #36]	; 0x24
   18270:	ldr	r1, [r4, #48]	; 0x30
   18274:	cmp	r0, r1
   18278:	blt	183b8 <__assert_fail@plt+0x6ea0>
   1827c:	ldr	r1, [r4, #24]
   18280:	ldr	r0, [r4]
   18284:	mov	r2, sl
   18288:	mov	sl, r5
   1828c:	add	r1, r1, r6
   18290:	ldrb	r1, [r0, r1]
   18294:	str	r1, [sp]
   18298:	ldr	r0, [r4, #64]	; 0x40
   1829c:	cmp	r0, #0
   182a0:	ldrbne	r1, [r0, r1]
   182a4:	mov	r0, #1
   182a8:	strne	r1, [sp]
   182ac:	str	r9, [r8]
   182b0:	str	r2, [r8, #4]
   182b4:	b	182c0 <__assert_fail@plt+0x6da8>
   182b8:	ldr	r1, [sp]
   182bc:	mov	sl, r5
   182c0:	ldr	r3, [r4, #8]
   182c4:	add	r5, r0, r6
   182c8:	str	r1, [r3, r6, lsl #2]
   182cc:	add	r1, r6, #1
   182d0:	cmp	r1, r5
   182d4:	bge	182f4 <__assert_fail@plt+0x6ddc>
   182d8:	mvn	r1, #3
   182dc:	add	r2, r1, r0, lsl #2
   182e0:	add	r0, r3, r6, lsl #2
   182e4:	mov	r1, #255	; 0xff
   182e8:	add	r0, r0, #4
   182ec:	bl	1141c <memset@plt>
   182f0:	mov	r1, r5
   182f4:	cmp	r7, r1
   182f8:	mov	r6, r1
   182fc:	mov	r5, sl
   18300:	bgt	18228 <__assert_fail@plt+0x6d10>
   18304:	b	183c0 <__assert_fail@plt+0x6ea8>
   18308:	cmp	r2, #1
   1830c:	add	r1, sp, #4
   18310:	blt	1824c <__assert_fail@plt+0x6d34>
   18314:	ldr	r1, [r4, #80]	; 0x50
   18318:	cmp	r1, #1
   1831c:	add	r1, sp, #4
   18320:	blt	1824c <__assert_fail@plt+0x6d34>
   18324:	ldm	r4, {r1, r3}
   18328:	mov	lr, r5
   1832c:	ldr	r5, [r4, #24]
   18330:	cmp	r2, #2
   18334:	add	r5, r6, r5
   18338:	ldrb	r1, [r1, r5]
   1833c:	mov	r5, lr
   18340:	ldrb	r0, [r0, r1]
   18344:	add	r1, sp, #4
   18348:	strb	r0, [r3, r6]
   1834c:	strb	r0, [sp, #4]
   18350:	blt	1824c <__assert_fail@plt+0x6d34>
   18354:	ldr	r0, [r4, #80]	; 0x50
   18358:	add	r1, sp, #4
   1835c:	cmp	r0, #2
   18360:	blt	1824c <__assert_fail@plt+0x6d34>
   18364:	mov	r0, #1
   18368:	ldm	r4, {r1, ip}
   1836c:	ldr	r5, [r4, #24]
   18370:	ldr	r3, [r4, #64]	; 0x40
   18374:	add	r1, r1, r5
   18378:	add	r1, r1, r6
   1837c:	ldrb	r1, [r1, r0]
   18380:	ldrb	r1, [r3, r1]
   18384:	add	r3, ip, r6
   18388:	strb	r1, [r3, r0]
   1838c:	add	r3, sp, #4
   18390:	strb	r1, [r3, r0]
   18394:	add	r0, r0, #1
   18398:	cmp	r0, r2
   1839c:	bge	183ac <__assert_fail@plt+0x6e94>
   183a0:	ldr	r1, [r4, #80]	; 0x50
   183a4:	cmp	r0, r1
   183a8:	blt	18368 <__assert_fail@plt+0x6e50>
   183ac:	add	r1, sp, #4
   183b0:	mov	r5, lr
   183b4:	b	1824c <__assert_fail@plt+0x6d34>
   183b8:	stm	r8, {r9, sl}
   183bc:	mov	r1, r6
   183c0:	str	r1, [r4, #28]
   183c4:	str	r1, [r4, #32]
   183c8:	sub	sp, fp, #28
   183cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183d0:	ldr	ip, [r0, #36]	; 0x24
   183d4:	ldr	r3, [r0, #48]	; 0x30
   183d8:	ldr	r1, [r0, #28]
   183dc:	cmp	ip, r3
   183e0:	movgt	ip, r3
   183e4:	cmp	r1, ip
   183e8:	bge	18424 <__assert_fail@plt+0x6f0c>
   183ec:	push	{r4, sl, fp, lr}
   183f0:	add	fp, sp, #8
   183f4:	ldm	r0, {r3, lr}
   183f8:	ldr	r2, [r0, #24]
   183fc:	ldr	r4, [r0, #64]	; 0x40
   18400:	add	r2, r3, r2
   18404:	ldrb	r2, [r2, r1]
   18408:	ldrb	r2, [r4, r2]
   1840c:	strb	r2, [lr, r1]
   18410:	add	r1, r1, #1
   18414:	cmp	r1, ip
   18418:	blt	183f4 <__assert_fail@plt+0x6edc>
   1841c:	mov	r1, ip
   18420:	pop	{r4, sl, fp, lr}
   18424:	str	r1, [r0, #28]
   18428:	str	r1, [r0, #32]
   1842c:	bx	lr
   18430:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18434:	add	fp, sp, #28
   18438:	sub	sp, sp, #28
   1843c:	ldr	r9, [r1]
   18440:	mov	r5, r0
   18444:	ldr	r8, [fp, #12]
   18448:	mov	r6, r2
   1844c:	str	r1, [sp, #12]
   18450:	str	r3, [sp, #16]
   18454:	ldr	r0, [r9, #84]	; 0x54
   18458:	str	r8, [sp, #4]
   1845c:	str	r0, [sp, #8]
   18460:	ldr	r0, [fp, #8]
   18464:	str	r0, [sp]
   18468:	mov	r0, r5
   1846c:	bl	18c6c <__assert_fail@plt+0x7754>
   18470:	mov	r4, r0
   18474:	cmp	r0, #0
   18478:	bne	18488 <__assert_fail@plt+0x6f70>
   1847c:	ldr	r0, [r8]
   18480:	cmp	r0, #0
   18484:	bne	18578 <__assert_fail@plt+0x7060>
   18488:	ldr	r0, [sp, #16]
   1848c:	ldr	r8, [fp, #8]
   18490:	mov	r7, #10
   18494:	orr	sl, r0, #8388608	; 0x800000
   18498:	ldrb	r0, [r6, #4]
   1849c:	cmp	r0, #10
   184a0:	bne	1857c <__assert_fail@plt+0x7064>
   184a4:	mov	r0, r6
   184a8:	mov	r1, r5
   184ac:	mov	r2, sl
   184b0:	bl	185e0 <__assert_fail@plt+0x70c8>
   184b4:	ldr	r1, [r5, #40]	; 0x28
   184b8:	mov	r2, #0
   184bc:	add	r0, r1, r0
   184c0:	str	r0, [r5, #40]	; 0x28
   184c4:	ldrb	r0, [r6, #4]
   184c8:	orr	r1, r0, #8
   184cc:	cmp	r1, #10
   184d0:	bne	18500 <__assert_fail@plt+0x6fe8>
   184d4:	mov	r0, #0
   184d8:	str	r7, [sp, #24]
   184dc:	mov	r1, r4
   184e0:	add	r3, sp, #20
   184e4:	str	r0, [sp, #20]
   184e8:	mov	r0, r9
   184ec:	bl	1a414 <__assert_fail@plt+0x8efc>
   184f0:	mov	r4, r0
   184f4:	cmp	r0, #0
   184f8:	bne	18498 <__assert_fail@plt+0x6f80>
   184fc:	b	1856c <__assert_fail@plt+0x7054>
   18500:	cmp	r8, #0
   18504:	beq	18510 <__assert_fail@plt+0x6ff8>
   18508:	cmp	r0, #9
   1850c:	beq	184d4 <__assert_fail@plt+0x6fbc>
   18510:	ldr	r0, [sp, #8]
   18514:	ldr	r7, [r9, #84]	; 0x54
   18518:	ldr	r1, [sp, #12]
   1851c:	ldr	r3, [sp, #16]
   18520:	mov	r2, r6
   18524:	str	r0, [r9, #84]	; 0x54
   18528:	str	r8, [sp]
   1852c:	ldr	r8, [fp, #12]
   18530:	mov	r0, r5
   18534:	str	r8, [sp, #4]
   18538:	bl	18c6c <__assert_fail@plt+0x7754>
   1853c:	mov	r2, r0
   18540:	cmp	r0, #0
   18544:	bne	18554 <__assert_fail@plt+0x703c>
   18548:	ldr	r0, [r8]
   1854c:	cmp	r0, #0
   18550:	bne	18588 <__assert_fail@plt+0x7070>
   18554:	ldr	r0, [r9, #84]	; 0x54
   18558:	ldr	r8, [fp, #8]
   1855c:	orr	r0, r0, r7
   18560:	mov	r7, #10
   18564:	str	r0, [r9, #84]	; 0x54
   18568:	b	184d4 <__assert_fail@plt+0x6fbc>
   1856c:	ldr	r1, [fp, #12]
   18570:	mov	r0, #12
   18574:	str	r0, [r1]
   18578:	mov	r4, #0
   1857c:	mov	r0, r4
   18580:	sub	sp, fp, #28
   18584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18588:	cmp	r4, #0
   1858c:	beq	18578 <__assert_fail@plt+0x7060>
   18590:	mov	r5, r4
   18594:	ldr	r4, [r4, #4]
   18598:	cmp	r4, #0
   1859c:	bne	18590 <__assert_fail@plt+0x7078>
   185a0:	ldr	r4, [r5, #8]
   185a4:	cmp	r4, #0
   185a8:	bne	18590 <__assert_fail@plt+0x7078>
   185ac:	add	r0, r5, #20
   185b0:	bl	17a2c <__assert_fail@plt+0x6514>
   185b4:	ldr	r0, [r5]
   185b8:	cmp	r0, #0
   185bc:	beq	18578 <__assert_fail@plt+0x7060>
   185c0:	ldr	r4, [r0, #8]
   185c4:	cmp	r4, r5
   185c8:	mov	r5, r0
   185cc:	beq	185ac <__assert_fail@plt+0x7094>
   185d0:	cmp	r4, #0
   185d4:	mov	r5, r0
   185d8:	beq	185ac <__assert_fail@plt+0x7094>
   185dc:	b	18590 <__assert_fail@plt+0x7078>
   185e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   185e4:	add	fp, sp, #24
   185e8:	sub	sp, sp, #8
   185ec:	mov	r9, r0
   185f0:	mov	r7, r1
   185f4:	ldr	r0, [r1, #40]	; 0x28
   185f8:	ldr	r1, [r1, #56]	; 0x38
   185fc:	cmp	r1, r0
   18600:	ble	186e8 <__assert_fail@plt+0x71d0>
   18604:	ldr	r1, [r7, #4]
   18608:	mov	r5, r9
   1860c:	mov	r8, r2
   18610:	ldrb	r6, [r1, r0]
   18614:	strb	r6, [r5], #4
   18618:	ldr	r0, [r5]
   1861c:	bic	r1, r0, #6291456	; 0x600000
   18620:	str	r1, [r5]
   18624:	ldr	r3, [r7, #80]	; 0x50
   18628:	cmp	r3, #2
   1862c:	blt	18650 <__assert_fail@plt+0x7138>
   18630:	ldr	r2, [r7, #28]
   18634:	ldr	r1, [r7, #40]	; 0x28
   18638:	cmp	r1, r2
   1863c:	beq	18650 <__assert_fail@plt+0x7138>
   18640:	ldr	r2, [r7, #8]
   18644:	ldr	r1, [r2, r1, lsl #2]
   18648:	cmn	r1, #1
   1864c:	beq	189a4 <__assert_fail@plt+0x748c>
   18650:	movw	r1, #65280	; 0xff00
   18654:	cmp	r6, #92	; 0x5c
   18658:	movt	r1, #65439	; 0xff9f
   1865c:	bne	186f8 <__assert_fail@plt+0x71e0>
   18660:	ldr	r6, [r7, #40]	; 0x28
   18664:	ldr	r4, [r7, #48]	; 0x30
   18668:	add	r2, r6, #1
   1866c:	cmp	r2, r4
   18670:	bge	1874c <__assert_fail@plt+0x7234>
   18674:	ldrb	r4, [r7, #75]	; 0x4b
   18678:	cmp	r4, #0
   1867c:	bne	18bfc <__assert_fail@plt+0x76e4>
   18680:	ldr	r3, [r7, #4]
   18684:	ldrb	r6, [r3, r2]
   18688:	and	r0, r0, r1
   1868c:	strb	r6, [r9]
   18690:	orr	r4, r0, #1
   18694:	str	r4, [r9, #4]
   18698:	ldr	r0, [r7, #80]	; 0x50
   1869c:	cmp	r0, #2
   186a0:	blt	1885c <__assert_fail@plt+0x7344>
   186a4:	ldr	r0, [r7, #8]
   186a8:	ldr	r1, [r7, #40]	; 0x28
   186ac:	add	r0, r0, r1, lsl #2
   186b0:	ldr	r4, [r0, #4]
   186b4:	mov	r0, r4
   186b8:	bl	11404 <iswalnum@plt>
   186bc:	sub	r1, r4, #95	; 0x5f
   186c0:	cmp	r0, #0
   186c4:	clz	r1, r1
   186c8:	movwne	r0, #1
   186cc:	lsr	r1, r1, #5
   186d0:	orr	r0, r1, r0
   186d4:	ldr	r1, [r5]
   186d8:	bic	r1, r1, #4194304	; 0x400000
   186dc:	orr	r0, r1, r0, lsl #22
   186e0:	uxtb	r1, r6
   186e4:	b	18880 <__assert_fail@plt+0x7368>
   186e8:	mov	r0, #2
   186ec:	mov	r4, #0
   186f0:	strb	r0, [r9, #4]
   186f4:	b	18bd0 <__assert_fail@plt+0x76b8>
   186f8:	and	r0, r0, r1
   186fc:	orr	r4, r0, #1
   18700:	str	r4, [r5]
   18704:	ldr	r0, [r7, #80]	; 0x50
   18708:	cmp	r0, #2
   1870c:	blt	18758 <__assert_fail@plt+0x7240>
   18710:	ldr	r0, [r7, #8]
   18714:	ldr	r1, [r7, #40]	; 0x28
   18718:	ldr	r4, [r0, r1, lsl #2]
   1871c:	mov	r0, r4
   18720:	bl	11404 <iswalnum@plt>
   18724:	sub	r1, r4, #95	; 0x5f
   18728:	cmp	r0, #0
   1872c:	clz	r1, r1
   18730:	movwne	r0, #1
   18734:	lsr	r1, r1, #5
   18738:	orr	r0, r1, r0
   1873c:	ldr	r1, [r5]
   18740:	bic	r1, r1, #4194304	; 0x400000
   18744:	orr	r0, r1, r0, lsl #22
   18748:	b	18778 <__assert_fail@plt+0x7260>
   1874c:	and	r0, r0, r1
   18750:	orr	r0, r0, #36	; 0x24
   18754:	b	189b8 <__assert_fail@plt+0x74a0>
   18758:	bl	113c8 <__ctype_b_loc@plt>
   1875c:	ldr	r0, [r0]
   18760:	cmp	r6, #95	; 0x5f
   18764:	add	r0, r0, r6, lsl #1
   18768:	ldrh	r0, [r0]
   1876c:	ubfx	r0, r0, #3, #1
   18770:	movweq	r0, #1
   18774:	orr	r0, r4, r0, lsl #22
   18778:	mov	r4, #1
   1877c:	cmp	r6, #62	; 0x3e
   18780:	str	r0, [r5]
   18784:	bgt	18820 <__assert_fail@plt+0x7308>
   18788:	sub	r1, r6, #36	; 0x24
   1878c:	cmp	r1, #10
   18790:	bhi	18a14 <__assert_fail@plt+0x74fc>
   18794:	add	r2, pc, #0
   18798:	ldr	pc, [r2, r1, lsl #2]
   1879c:	andeq	r8, r1, r8, asr #15
   187a0:	ldrdeq	r8, [r1], -r0
   187a4:	ldrdeq	r8, [r1], -r0
   187a8:	ldrdeq	r8, [r1], -r0
   187ac:	andeq	r8, r1, r8, lsr #20
   187b0:	andeq	r8, r1, r8, lsr sl
   187b4:	andeq	r8, r1, r8, asr #20
   187b8:	andeq	r8, r1, r0, asr sl
   187bc:	ldrdeq	r8, [r1], -r0
   187c0:	ldrdeq	r8, [r1], -r0
   187c4:	andeq	r8, r1, r0, ror #20
   187c8:	tst	r8, #8
   187cc:	bne	18818 <__assert_fail@plt+0x7300>
   187d0:	ldr	r1, [r7, #40]	; 0x28
   187d4:	ldr	r2, [r7, #48]	; 0x30
   187d8:	add	r1, r1, #1
   187dc:	cmp	r1, r2
   187e0:	beq	18818 <__assert_fail@plt+0x7300>
   187e4:	str	r1, [r7, #40]	; 0x28
   187e8:	mov	r0, sp
   187ec:	mov	r1, r7
   187f0:	mov	r2, r8
   187f4:	bl	185e0 <__assert_fail@plt+0x70c8>
   187f8:	ldr	r0, [r7, #40]	; 0x28
   187fc:	sub	r0, r0, #1
   18800:	str	r0, [r7, #40]	; 0x28
   18804:	ldrb	r0, [sp, #4]
   18808:	sub	r0, r0, #9
   1880c:	cmp	r0, #1
   18810:	bhi	18bd0 <__assert_fail@plt+0x76b8>
   18814:	ldr	r0, [r5]
   18818:	mov	r1, #32
   1881c:	b	18854 <__assert_fail@plt+0x733c>
   18820:	cmp	r6, #122	; 0x7a
   18824:	bgt	1897c <__assert_fail@plt+0x7464>
   18828:	cmp	r6, #63	; 0x3f
   1882c:	beq	18a68 <__assert_fail@plt+0x7550>
   18830:	cmp	r6, #91	; 0x5b
   18834:	beq	18a78 <__assert_fail@plt+0x7560>
   18838:	cmp	r6, #94	; 0x5e
   1883c:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18840:	movw	r1, #8
   18844:	movt	r1, #128	; 0x80
   18848:	tst	r8, r1
   1884c:	beq	18ac0 <__assert_fail@plt+0x75a8>
   18850:	mov	r1, #16
   18854:	mov	r2, #12
   18858:	b	1896c <__assert_fail@plt+0x7454>
   1885c:	bl	113c8 <__ctype_b_loc@plt>
   18860:	ldr	r0, [r0]
   18864:	uxtb	r1, r6
   18868:	cmp	r1, #95	; 0x5f
   1886c:	add	r0, r0, r1, lsl #1
   18870:	ldrh	r0, [r0]
   18874:	ubfx	r0, r0, #3, #1
   18878:	movweq	r0, #1
   1887c:	orr	r0, r4, r0, lsl #22
   18880:	uxtb	r2, r6
   18884:	mov	r4, #2
   18888:	str	r0, [r5]
   1888c:	cmp	r2, #95	; 0x5f
   18890:	bgt	189c4 <__assert_fail@plt+0x74ac>
   18894:	sub	r3, r2, #39	; 0x27
   18898:	cmp	r3, #44	; 0x2c
   1889c:	bhi	18aec <__assert_fail@plt+0x75d4>
   188a0:	add	r2, pc, #0
   188a4:	ldr	pc, [r2, r3, lsl #2]
   188a8:	andeq	r8, r1, r4, asr fp
   188ac:	andeq	r8, r1, r4, ror #22
   188b0:	andeq	r8, r1, r0, ror fp
   188b4:	ldrdeq	r8, [r1], -r0
   188b8:	andeq	r8, r1, ip, ror fp
   188bc:	ldrdeq	r8, [r1], -r0
   188c0:	ldrdeq	r8, [r1], -r0
   188c4:	ldrdeq	r8, [r1], -r0
   188c8:	ldrdeq	r8, [r1], -r0
   188cc:	ldrdeq	r8, [r1], -r0
   188d0:	andeq	r8, r1, ip, asr r9
   188d4:	andeq	r8, r1, ip, asr r9
   188d8:	andeq	r8, r1, ip, asr r9
   188dc:	andeq	r8, r1, ip, asr r9
   188e0:	andeq	r8, r1, ip, asr r9
   188e4:	andeq	r8, r1, ip, asr r9
   188e8:	andeq	r8, r1, ip, asr r9
   188ec:	andeq	r8, r1, ip, asr r9
   188f0:	andeq	r8, r1, ip, asr r9
   188f4:	ldrdeq	r8, [r1], -r0
   188f8:	ldrdeq	r8, [r1], -r0
   188fc:	muleq	r1, r4, fp
   18900:	ldrdeq	r8, [r1], -r0
   18904:	andeq	r8, r1, r4, lsr #23
   18908:			; <UNDEFINED> instruction: 0x00018bb4
   1890c:	ldrdeq	r8, [r1], -r0
   18910:	ldrdeq	r8, [r1], -r0
   18914:	ldrdeq	r8, [r1], -ip
   18918:	ldrdeq	r8, [r1], -r0
   1891c:	ldrdeq	r8, [r1], -r0
   18920:	ldrdeq	r8, [r1], -r0
   18924:	ldrdeq	r8, [r1], -r0
   18928:	ldrdeq	r8, [r1], -r0
   1892c:	ldrdeq	r8, [r1], -r0
   18930:	ldrdeq	r8, [r1], -r0
   18934:	ldrdeq	r8, [r1], -r0
   18938:	ldrdeq	r8, [r1], -r0
   1893c:	ldrdeq	r8, [r1], -r0
   18940:	ldrdeq	r8, [r1], -r0
   18944:	ldrdeq	r8, [r1], -r0
   18948:	ldrdeq	r8, [r1], -r0
   1894c:	ldrdeq	r8, [r1], -r0
   18950:	ldrdeq	r8, [r1], -r0
   18954:	ldrdeq	r8, [r1], -r0
   18958:	andeq	r8, r1, ip, ror #23
   1895c:	tst	r8, #16384	; 0x4000
   18960:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18964:	sub	r1, r1, #49	; 0x31
   18968:	mov	r2, #4
   1896c:	bfi	r0, r2, #0, #8
   18970:	str	r1, [r9]
   18974:	str	r0, [r9, #4]
   18978:	b	18bd0 <__assert_fail@plt+0x76b8>
   1897c:	cmp	r6, #123	; 0x7b
   18980:	beq	18a80 <__assert_fail@plt+0x7568>
   18984:	cmp	r6, #124	; 0x7c
   18988:	beq	18a90 <__assert_fail@plt+0x7578>
   1898c:	cmp	r6, #125	; 0x7d
   18990:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18994:	and	r1, r8, #4608	; 0x1200
   18998:	cmp	r1, #4608	; 0x1200
   1899c:	beq	18b3c <__assert_fail@plt+0x7624>
   189a0:	b	18bd0 <__assert_fail@plt+0x76b8>
   189a4:	movw	r1, #65280	; 0xff00
   189a8:	movt	r1, #65439	; 0xff9f
   189ac:	and	r0, r0, r1
   189b0:	orr	r0, r0, #1
   189b4:	orr	r0, r0, #2097152	; 0x200000
   189b8:	str	r0, [r5]
   189bc:	mov	r4, #1
   189c0:	b	18bd0 <__assert_fail@plt+0x76b8>
   189c4:	sub	r1, r2, #115	; 0x73
   189c8:	cmp	r1, #10
   189cc:	bhi	18aa4 <__assert_fail@plt+0x758c>
   189d0:	add	r2, pc, #0
   189d4:	ldr	pc, [r2, r1, lsl #2]
   189d8:	andeq	r8, r1, r4, lsl #20
   189dc:	ldrdeq	r8, [r1], -r0
   189e0:	ldrdeq	r8, [r1], -r0
   189e4:	ldrdeq	r8, [r1], -r0
   189e8:	andeq	r8, r1, r0, lsl #22
   189ec:	ldrdeq	r8, [r1], -r0
   189f0:	ldrdeq	r8, [r1], -r0
   189f4:	ldrdeq	r8, [r1], -r0
   189f8:	andeq	r8, r1, r0, lsl fp
   189fc:	andeq	r8, r1, r4, lsr #22
   18a00:	andeq	r8, r1, r0, lsr fp
   18a04:	tst	r8, #524288	; 0x80000
   18a08:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18a0c:	mov	r1, #34	; 0x22
   18a10:	b	18bc8 <__assert_fail@plt+0x76b0>
   18a14:	cmp	r6, #10
   18a18:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18a1c:	tst	r8, #2048	; 0x800
   18a20:	bne	18a9c <__assert_fail@plt+0x7584>
   18a24:	b	18bd0 <__assert_fail@plt+0x76b8>
   18a28:	tst	r8, #8192	; 0x2000
   18a2c:	beq	18bd0 <__assert_fail@plt+0x76b8>
   18a30:	mov	r1, #8
   18a34:	b	18bc8 <__assert_fail@plt+0x76b0>
   18a38:	tst	r8, #8192	; 0x2000
   18a3c:	beq	18bd0 <__assert_fail@plt+0x76b8>
   18a40:	mov	r1, #9
   18a44:	b	18bc8 <__assert_fail@plt+0x76b0>
   18a48:	mov	r1, #11
   18a4c:	b	18bc8 <__assert_fail@plt+0x76b0>
   18a50:	movw	r1, #1026	; 0x402
   18a54:	tst	r8, r1
   18a58:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18a5c:	b	18b8c <__assert_fail@plt+0x7674>
   18a60:	mov	r1, #5
   18a64:	b	18bc8 <__assert_fail@plt+0x76b0>
   18a68:	movw	r1, #1026	; 0x402
   18a6c:	tst	r8, r1
   18a70:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18a74:	b	18bc4 <__assert_fail@plt+0x76ac>
   18a78:	mov	r1, #20
   18a7c:	b	18bc8 <__assert_fail@plt+0x76b0>
   18a80:	and	r1, r8, #4608	; 0x1200
   18a84:	cmp	r1, #4608	; 0x1200
   18a88:	beq	18b1c <__assert_fail@plt+0x7604>
   18a8c:	b	18bd0 <__assert_fail@plt+0x76b8>
   18a90:	and	r1, r8, #33792	; 0x8400
   18a94:	cmp	r1, #32768	; 0x8000
   18a98:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18a9c:	mov	r1, #10
   18aa0:	b	18bc8 <__assert_fail@plt+0x76b0>
   18aa4:	cmp	r2, #96	; 0x60
   18aa8:	beq	18b44 <__assert_fail@plt+0x762c>
   18aac:	cmp	r2, #98	; 0x62
   18ab0:	tsteq	r8, #524288	; 0x80000
   18ab4:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18ab8:	mov	r1, #256	; 0x100
   18abc:	b	18854 <__assert_fail@plt+0x733c>
   18ac0:	ldr	r1, [r7, #40]	; 0x28
   18ac4:	cmp	r1, #0
   18ac8:	beq	18850 <__assert_fail@plt+0x7338>
   18acc:	tst	r8, #2048	; 0x800
   18ad0:	beq	18bd0 <__assert_fail@plt+0x76b8>
   18ad4:	ldr	r2, [r7, #4]
   18ad8:	add	r1, r2, r1
   18adc:	ldrb	r1, [r1, #-1]
   18ae0:	cmp	r1, #10
   18ae4:	beq	18850 <__assert_fail@plt+0x7338>
   18ae8:	b	18bd0 <__assert_fail@plt+0x76b8>
   18aec:	cmp	r2, #87	; 0x57
   18af0:	tsteq	r8, #524288	; 0x80000
   18af4:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18af8:	mov	r1, #33	; 0x21
   18afc:	b	18bc8 <__assert_fail@plt+0x76b0>
   18b00:	tst	r8, #524288	; 0x80000
   18b04:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18b08:	mov	r1, #32
   18b0c:	b	18bc8 <__assert_fail@plt+0x76b0>
   18b10:	and	r1, r8, #4608	; 0x1200
   18b14:	cmp	r1, #512	; 0x200
   18b18:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18b1c:	mov	r1, #23
   18b20:	b	18bc8 <__assert_fail@plt+0x76b0>
   18b24:	tst	r8, #33792	; 0x8400
   18b28:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18b2c:	b	18a9c <__assert_fail@plt+0x7584>
   18b30:	and	r1, r8, #4608	; 0x1200
   18b34:	cmp	r1, #512	; 0x200
   18b38:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18b3c:	mov	r1, #24
   18b40:	b	18bc8 <__assert_fail@plt+0x76b0>
   18b44:	tst	r8, #524288	; 0x80000
   18b48:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18b4c:	mov	r1, #64	; 0x40
   18b50:	b	18854 <__assert_fail@plt+0x733c>
   18b54:	tst	r8, #524288	; 0x80000
   18b58:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18b5c:	mov	r1, #128	; 0x80
   18b60:	b	18854 <__assert_fail@plt+0x733c>
   18b64:	tst	r8, #8192	; 0x2000
   18b68:	beq	18a30 <__assert_fail@plt+0x7518>
   18b6c:	b	18bd0 <__assert_fail@plt+0x76b8>
   18b70:	tst	r8, #8192	; 0x2000
   18b74:	beq	18a40 <__assert_fail@plt+0x7528>
   18b78:	b	18bd0 <__assert_fail@plt+0x76b8>
   18b7c:	movw	r1, #1026	; 0x402
   18b80:	and	r1, r8, r1
   18b84:	cmp	r1, #2
   18b88:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18b8c:	mov	r1, #18
   18b90:	b	18bc8 <__assert_fail@plt+0x76b0>
   18b94:	tst	r8, #524288	; 0x80000
   18b98:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18b9c:	mov	r1, #6
   18ba0:	b	18854 <__assert_fail@plt+0x733c>
   18ba4:	tst	r8, #524288	; 0x80000
   18ba8:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18bac:	mov	r1, #9
   18bb0:	b	18854 <__assert_fail@plt+0x733c>
   18bb4:	movw	r1, #1026	; 0x402
   18bb8:	and	r1, r8, r1
   18bbc:	cmp	r1, #2
   18bc0:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18bc4:	mov	r1, #19
   18bc8:	bfi	r0, r1, #0, #8
   18bcc:	str	r0, [r5]
   18bd0:	mov	r0, r4
   18bd4:	sub	sp, fp, #24
   18bd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18bdc:	tst	r8, #524288	; 0x80000
   18be0:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18be4:	mov	r1, #512	; 0x200
   18be8:	b	18854 <__assert_fail@plt+0x733c>
   18bec:	tst	r8, #524288	; 0x80000
   18bf0:	bne	18bd0 <__assert_fail@plt+0x76b8>
   18bf4:	mov	r1, #35	; 0x23
   18bf8:	b	18bc8 <__assert_fail@plt+0x76b0>
   18bfc:	cmp	r3, #2
   18c00:	blt	18c30 <__assert_fail@plt+0x7718>
   18c04:	ldr	r3, [r7, #8]
   18c08:	ldr	r4, [r3, r2, lsl #2]
   18c0c:	cmn	r4, #1
   18c10:	beq	18680 <__assert_fail@plt+0x7168>
   18c14:	ldr	r4, [r7, #28]
   18c18:	add	r6, r6, #2
   18c1c:	cmp	r4, r6
   18c20:	beq	18c30 <__assert_fail@plt+0x7718>
   18c24:	ldr	r3, [r3, r6, lsl #2]
   18c28:	cmn	r3, #1
   18c2c:	beq	18680 <__assert_fail@plt+0x7168>
   18c30:	ldrb	r3, [r7, #76]	; 0x4c
   18c34:	mov	r6, r2
   18c38:	ldr	r4, [r7, #24]
   18c3c:	ldr	ip, [r7]
   18c40:	cmp	r3, #0
   18c44:	ldrne	r6, [r7, #12]
   18c48:	ldrne	r6, [r6, r2, lsl #2]
   18c4c:	cmp	r3, #0
   18c50:	add	r6, r4, r6
   18c54:	add	r6, ip, r6
   18c58:	ldrsb	r6, [r6]
   18c5c:	beq	18688 <__assert_fail@plt+0x7170>
   18c60:	cmn	r6, #1
   18c64:	ble	18680 <__assert_fail@plt+0x7168>
   18c68:	b	18688 <__assert_fail@plt+0x7170>
   18c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c70:	add	fp, sp, #28
   18c74:	sub	sp, sp, #28
   18c78:	mov	r7, r1
   18c7c:	mov	r1, r0
   18c80:	ldr	r4, [fp, #12]
   18c84:	ldr	r5, [fp, #8]
   18c88:	mov	r6, r2
   18c8c:	str	r3, [sp, #16]
   18c90:	ldr	r0, [r7]
   18c94:	str	r1, [sp, #12]
   18c98:	str	r4, [sp, #4]
   18c9c:	str	r5, [sp]
   18ca0:	str	r0, [sp, #8]
   18ca4:	mov	r0, r1
   18ca8:	mov	r1, r7
   18cac:	bl	18ef8 <__assert_fail@plt+0x79e0>
   18cb0:	cmp	r0, #0
   18cb4:	bne	18cc4 <__assert_fail@plt+0x77ac>
   18cb8:	ldr	r1, [r4]
   18cbc:	cmp	r1, #0
   18cc0:	bne	18e20 <__assert_fail@plt+0x7908>
   18cc4:	mov	r4, r0
   18cc8:	ldrb	r0, [r6, #4]
   18ccc:	orr	r1, r0, #8
   18cd0:	cmp	r1, #10
   18cd4:	beq	18e24 <__assert_fail@plt+0x790c>
   18cd8:	cmp	r5, #0
   18cdc:	beq	18ce8 <__assert_fail@plt+0x77d0>
   18ce0:	cmp	r0, #9
   18ce4:	beq	18e24 <__assert_fail@plt+0x790c>
   18ce8:	ldr	r8, [fp, #12]
   18cec:	ldr	r0, [sp, #12]
   18cf0:	ldr	r3, [sp, #16]
   18cf4:	mov	r1, r7
   18cf8:	mov	r2, r6
   18cfc:	mov	r9, r5
   18d00:	str	r5, [sp]
   18d04:	str	r8, [sp, #4]
   18d08:	bl	18ef8 <__assert_fail@plt+0x79e0>
   18d0c:	mov	sl, r0
   18d10:	cmp	r0, #0
   18d14:	bne	18d24 <__assert_fail@plt+0x780c>
   18d18:	ldr	r0, [r8]
   18d1c:	cmp	r0, #0
   18d20:	bne	18e30 <__assert_fail@plt+0x7918>
   18d24:	cmp	r4, #0
   18d28:	cmpne	sl, #0
   18d2c:	bne	18d44 <__assert_fail@plt+0x782c>
   18d30:	cmp	r4, #0
   18d34:	mov	r5, r9
   18d38:	movne	sl, r4
   18d3c:	mov	r0, sl
   18d40:	b	18cc4 <__assert_fail@plt+0x77ac>
   18d44:	mov	r0, #16
   18d48:	mov	r1, r4
   18d4c:	mov	r2, sl
   18d50:	add	r3, sp, #20
   18d54:	str	r0, [sp, #24]
   18d58:	mov	r0, #0
   18d5c:	str	r0, [sp, #20]
   18d60:	ldr	r0, [sp, #8]
   18d64:	bl	1a414 <__assert_fail@plt+0x8efc>
   18d68:	cmp	r0, #0
   18d6c:	mov	r5, r9
   18d70:	bne	18cc4 <__assert_fail@plt+0x77ac>
   18d74:	mov	r5, sl
   18d78:	ldr	sl, [sl, #4]
   18d7c:	cmp	sl, #0
   18d80:	bne	18d74 <__assert_fail@plt+0x785c>
   18d84:	ldr	sl, [r5, #8]
   18d88:	cmp	sl, #0
   18d8c:	bne	18d74 <__assert_fail@plt+0x785c>
   18d90:	add	r0, r5, #20
   18d94:	bl	17a2c <__assert_fail@plt+0x6514>
   18d98:	ldr	r0, [r5]
   18d9c:	cmp	r0, #0
   18da0:	beq	18dc4 <__assert_fail@plt+0x78ac>
   18da4:	ldr	sl, [r0, #8]
   18da8:	cmp	sl, r5
   18dac:	mov	r5, r0
   18db0:	beq	18d90 <__assert_fail@plt+0x7878>
   18db4:	cmp	sl, #0
   18db8:	mov	r5, r0
   18dbc:	beq	18d90 <__assert_fail@plt+0x7878>
   18dc0:	b	18d74 <__assert_fail@plt+0x785c>
   18dc4:	mov	r5, r4
   18dc8:	ldr	r4, [r4, #4]
   18dcc:	cmp	r4, #0
   18dd0:	bne	18dc4 <__assert_fail@plt+0x78ac>
   18dd4:	ldr	r4, [r5, #8]
   18dd8:	cmp	r4, #0
   18ddc:	bne	18dc4 <__assert_fail@plt+0x78ac>
   18de0:	add	r0, r5, #20
   18de4:	bl	17a2c <__assert_fail@plt+0x6514>
   18de8:	ldr	r0, [r5]
   18dec:	cmp	r0, #0
   18df0:	beq	18e14 <__assert_fail@plt+0x78fc>
   18df4:	ldr	r4, [r0, #8]
   18df8:	cmp	r4, r5
   18dfc:	mov	r5, r0
   18e00:	beq	18de0 <__assert_fail@plt+0x78c8>
   18e04:	cmp	r4, #0
   18e08:	mov	r5, r0
   18e0c:	beq	18de0 <__assert_fail@plt+0x78c8>
   18e10:	b	18dc4 <__assert_fail@plt+0x78ac>
   18e14:	ldr	r1, [fp, #12]
   18e18:	mov	r0, #12
   18e1c:	str	r0, [r1]
   18e20:	mov	r4, #0
   18e24:	mov	r0, r4
   18e28:	sub	sp, fp, #28
   18e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e30:	cmp	r4, #0
   18e34:	beq	18e20 <__assert_fail@plt+0x7908>
   18e38:	mov	r5, r4
   18e3c:	ldr	r4, [r4, #4]
   18e40:	cmp	r4, #0
   18e44:	bne	18e38 <__assert_fail@plt+0x7920>
   18e48:	ldr	r4, [r5, #8]
   18e4c:	cmp	r4, #0
   18e50:	bne	18e38 <__assert_fail@plt+0x7920>
   18e54:	add	r0, r5, #20
   18e58:	bl	17a2c <__assert_fail@plt+0x6514>
   18e5c:	ldr	r0, [r5]
   18e60:	cmp	r0, #0
   18e64:	beq	18e20 <__assert_fail@plt+0x7908>
   18e68:	ldr	r4, [r0, #8]
   18e6c:	cmp	r4, r5
   18e70:	mov	r5, r0
   18e74:	beq	18e54 <__assert_fail@plt+0x793c>
   18e78:	cmp	r4, #0
   18e7c:	mov	r5, r0
   18e80:	beq	18e54 <__assert_fail@plt+0x793c>
   18e84:	b	18e38 <__assert_fail@plt+0x7920>
   18e88:	push	{r4, r5, r6, sl, fp, lr}
   18e8c:	add	fp, sp, #16
   18e90:	mov	r4, r2
   18e94:	mov	r5, r1
   18e98:	mov	r6, r0
   18e9c:	ldr	r0, [r0, #4]
   18ea0:	cmp	r0, #0
   18ea4:	bne	18e98 <__assert_fail@plt+0x7980>
   18ea8:	ldr	r0, [r6, #8]
   18eac:	cmp	r0, #0
   18eb0:	bne	18e98 <__assert_fail@plt+0x7980>
   18eb4:	mov	r0, r4
   18eb8:	mov	r1, r6
   18ebc:	blx	r5
   18ec0:	cmp	r0, #0
   18ec4:	bne	18ef4 <__assert_fail@plt+0x79dc>
   18ec8:	ldr	r1, [r6]
   18ecc:	cmp	r1, #0
   18ed0:	popeq	{r4, r5, r6, sl, fp, pc}
   18ed4:	ldr	r0, [r1, #8]
   18ed8:	cmp	r0, r6
   18edc:	mov	r6, r1
   18ee0:	beq	18eb4 <__assert_fail@plt+0x799c>
   18ee4:	cmp	r0, #0
   18ee8:	mov	r6, r1
   18eec:	beq	18eb4 <__assert_fail@plt+0x799c>
   18ef0:	b	18e98 <__assert_fail@plt+0x7980>
   18ef4:	pop	{r4, r5, r6, sl, fp, pc}
   18ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18efc:	add	fp, sp, #28
   18f00:	sub	sp, sp, #148	; 0x94
   18f04:	mov	r5, r1
   18f08:	mov	r6, r0
   18f0c:	mov	r7, r2
   18f10:	ldr	r0, [r2, #4]
   18f14:	mvn	r1, #0
   18f18:	mov	sl, #0
   18f1c:	ldr	r2, [r5]
   18f20:	uxtab	r1, r1, r0
   18f24:	str	r2, [sp, #52]	; 0x34
   18f28:	cmp	r1, #35	; 0x23
   18f2c:	ldr	r9, [fp, #12]
   18f30:	str	r6, [sp, #48]	; 0x30
   18f34:	str	r3, [sp, #44]	; 0x2c
   18f38:	str	r7, [sp, #28]
   18f3c:	bhi	19068 <__assert_fail@plt+0x7b50>
   18f40:	add	r2, pc, #0
   18f44:	ldr	pc, [r2, r1, lsl #2]
   18f48:			; <UNDEFINED> instruction: 0x000192b8
   18f4c:	muleq	r1, r4, r2
   18f50:	andeq	r9, r1, r8, rrx
   18f54:	andeq	r9, r1, ip, asr #1
   18f58:	andeq	r9, r1, r8, lsr #2
   18f5c:	andeq	r9, r1, r8, rrx
   18f60:	andeq	r9, r1, r8, rrx
   18f64:	andeq	r9, r1, ip, ror #2
   18f68:	andeq	r9, r1, r8, ror r0
   18f6c:	muleq	r1, r4, r2
   18f70:	andeq	r9, r1, r8, rrx
   18f74:	andeq	r9, r1, r8, lsr r2
   18f78:	andeq	r9, r1, r8, rrx
   18f7c:	andeq	r9, r1, r8, rrx
   18f80:	andeq	r9, r1, r8, rrx
   18f84:	andeq	r9, r1, r8, rrx
   18f88:	andeq	r9, r1, r8, rrx
   18f8c:	andeq	r9, r1, r8, rrx
   18f90:	andeq	r9, r1, r8, rrx
   18f94:	andeq	r9, r1, r8, lsr #7
   18f98:	andeq	r9, r1, r8, rrx
   18f9c:	andeq	r9, r1, r8, rrx
   18fa0:	andeq	r9, r1, r0, rrx
   18fa4:	andeq	r9, r1, r8, lsl #1
   18fa8:	andeq	r9, r1, r8, rrx
   18fac:	andeq	r9, r1, r8, rrx
   18fb0:	andeq	r9, r1, r8, rrx
   18fb4:	andeq	r9, r1, r8, rrx
   18fb8:	andeq	r9, r1, r8, rrx
   18fbc:	andeq	r9, r1, r8, rrx
   18fc0:	andeq	r9, r1, r8, rrx
   18fc4:	andeq	r8, r1, r8, ror #31
   18fc8:	andeq	r8, r1, r8, ror #31
   18fcc:	andeq	r9, r1, ip
   18fd0:	andeq	r9, r1, ip
   18fd4:	andeq	r9, r1, r0, lsr #7
   18fd8:	andeq	r0, r0, r0
   18fdc:	mvnseq	r0, #0
   18fe0:			; <UNDEFINED> instruction: 0x87fffffe
   18fe4:			; <UNDEFINED> instruction: 0x07fffffe
   18fe8:	mvn	r2, #32
   18fec:	ldr	r1, [r6, #64]	; 0x40
   18ff0:	movw	r3, #12697	; 0x3199
   18ff4:	uxtab	r0, r2, r0
   18ff8:	movw	r2, #14198	; 0x3776
   18ffc:	movt	r3, #2
   19000:	clz	r0, r0
   19004:	movt	r2, #2
   19008:	b	1902c <__assert_fail@plt+0x7b14>
   1900c:	mvn	r2, #34	; 0x22
   19010:	ldr	r1, [r6, #64]	; 0x40
   19014:	movw	r3, #13038	; 0x32ee
   19018:	uxtab	r0, r2, r0
   1901c:	movw	r2, #14204	; 0x377c
   19020:	movt	r3, #2
   19024:	clz	r0, r0
   19028:	movt	r2, #2
   1902c:	lsr	r0, r0, #5
   19030:	stm	sp, {r0, r9}
   19034:	ldr	r0, [sp, #52]	; 0x34
   19038:	bl	1a4b8 <__assert_fail@plt+0x8fa0>
   1903c:	mov	r4, r0
   19040:	cmp	r0, #0
   19044:	bne	19d08 <__assert_fail@plt+0x87f0>
   19048:	ldr	r0, [r9]
   1904c:	ldr	r2, [sp, #44]	; 0x2c
   19050:	ldr	r3, [sp, #28]
   19054:	cmp	r0, #0
   19058:	beq	19d10 <__assert_fail@plt+0x87f8>
   1905c:	b	1a294 <__assert_fail@plt+0x8d7c>
   19060:	tst	r3, #16777216	; 0x1000000
   19064:	bne	190c4 <__assert_fail@plt+0x7bac>
   19068:	tst	r3, #32
   1906c:	bne	190c4 <__assert_fail@plt+0x7bac>
   19070:	tst	r3, #16
   19074:	bne	1941c <__assert_fail@plt+0x7f04>
   19078:	tst	r3, #131072	; 0x20000
   1907c:	uxtbeq	r1, r0
   19080:	cmpeq	r1, #9
   19084:	beq	19458 <__assert_fail@plt+0x7f40>
   19088:	mov	r1, #1
   1908c:	mov	r2, #0
   19090:	mov	r3, r7
   19094:	mov	sl, #0
   19098:	bfi	r0, r1, #0, #8
   1909c:	mov	r1, #0
   190a0:	str	r0, [r7, #4]
   190a4:	ldr	r0, [sp, #52]	; 0x34
   190a8:	bl	1a414 <__assert_fail@plt+0x8efc>
   190ac:	ldr	r3, [sp, #28]
   190b0:	ldr	r2, [sp, #44]	; 0x2c
   190b4:	mov	r4, r0
   190b8:	cmp	r0, #0
   190bc:	bne	19d10 <__assert_fail@plt+0x87f8>
   190c0:	b	19bc4 <__assert_fail@plt+0x86ac>
   190c4:	mov	r0, #13
   190c8:	b	19bc8 <__assert_fail@plt+0x86b0>
   190cc:	ldr	r5, [sp, #52]	; 0x34
   190d0:	ldr	r0, [r7]
   190d4:	mov	r1, #1
   190d8:	ldr	r2, [r5, #84]	; 0x54
   190dc:	tst	r2, r1, lsl r0
   190e0:	beq	19c94 <__assert_fail@plt+0x877c>
   190e4:	lsl	r0, r1, r0
   190e8:	ldr	r1, [r5, #80]	; 0x50
   190ec:	mov	r2, #0
   190f0:	mov	r3, r7
   190f4:	mov	sl, #0
   190f8:	orr	r0, r1, r0
   190fc:	mov	r1, #0
   19100:	str	r0, [r5, #80]	; 0x50
   19104:	mov	r0, r5
   19108:	bl	1a414 <__assert_fail@plt+0x8efc>
   1910c:	cmp	r0, #0
   19110:	beq	19bc4 <__assert_fail@plt+0x86ac>
   19114:	mov	r4, r0
   19118:	ldr	r0, [r5, #76]	; 0x4c
   1911c:	add	r0, r0, #1
   19120:	str	r0, [r5, #76]	; 0x4c
   19124:	b	1915c <__assert_fail@plt+0x7c44>
   19128:	ldr	r5, [sp, #52]	; 0x34
   1912c:	mov	r1, #0
   19130:	mov	r2, #0
   19134:	mov	r3, r7
   19138:	mov	sl, #0
   1913c:	mov	r0, r5
   19140:	bl	1a414 <__assert_fail@plt+0x8efc>
   19144:	cmp	r0, #0
   19148:	beq	19bc4 <__assert_fail@plt+0x86ac>
   1914c:	mov	r4, r0
   19150:	ldr	r0, [r5, #92]	; 0x5c
   19154:	cmp	r0, #2
   19158:	blt	19d08 <__assert_fail@plt+0x87f0>
   1915c:	ldrb	r0, [r5, #88]	; 0x58
   19160:	orr	r0, r0, #2
   19164:	strb	r0, [r5, #88]	; 0x58
   19168:	b	19d08 <__assert_fail@plt+0x87f0>
   1916c:	ldr	r8, [r5, #24]
   19170:	ldr	r4, [fp, #8]
   19174:	orr	r2, r3, #8388608	; 0x800000
   19178:	mov	r1, r6
   1917c:	add	r0, r8, #1
   19180:	str	r0, [r5, #24]
   19184:	mov	r0, r7
   19188:	bl	185e0 <__assert_fail@plt+0x70c8>
   1918c:	ldr	r1, [r6, #40]	; 0x28
   19190:	ldr	r2, [sp, #28]
   19194:	add	r0, r1, r0
   19198:	mov	r1, #0
   1919c:	str	r0, [r6, #40]	; 0x28
   191a0:	ldrb	r0, [r2, #4]
   191a4:	cmp	r0, #9
   191a8:	beq	191e8 <__assert_fail@plt+0x7cd0>
   191ac:	add	r0, r4, #1
   191b0:	mov	r1, r5
   191b4:	mov	r5, r2
   191b8:	stm	sp, {r0, r9}
   191bc:	mov	r0, r6
   191c0:	ldr	r3, [sp, #44]	; 0x2c
   191c4:	bl	18430 <__assert_fail@plt+0x6f18>
   191c8:	mov	r1, r0
   191cc:	ldr	r0, [r9]
   191d0:	mov	sl, #0
   191d4:	cmp	r0, #0
   191d8:	bne	1a294 <__assert_fail@plt+0x8d7c>
   191dc:	ldrb	r0, [r5, #4]
   191e0:	cmp	r0, #9
   191e4:	bne	1a384 <__assert_fail@plt+0x8e6c>
   191e8:	ldr	r0, [sp, #52]	; 0x34
   191ec:	cmp	r8, #8
   191f0:	mov	sl, #0
   191f4:	movls	r2, #1
   191f8:	ldrls	r3, [r0, #84]	; 0x54
   191fc:	orrls	r2, r3, r2, lsl r8
   19200:	sub	r3, fp, #80	; 0x50
   19204:	strls	r2, [r0, #84]	; 0x54
   19208:	mov	r2, #17
   1920c:	str	r2, [fp, #-76]	; 0xffffffb4
   19210:	mov	r2, #0
   19214:	str	sl, [fp, #-80]	; 0xffffffb0
   19218:	bl	1a414 <__assert_fail@plt+0x8efc>
   1921c:	cmp	r0, #0
   19220:	beq	19bc4 <__assert_fail@plt+0x86ac>
   19224:	ldr	r2, [sp, #44]	; 0x2c
   19228:	ldr	r3, [sp, #28]
   1922c:	str	r8, [r0, #20]
   19230:	mov	r4, r0
   19234:	b	19d10 <__assert_fail@plt+0x87f8>
   19238:	ldr	r2, [r7]
   1923c:	movw	r1, #783	; 0x30f
   19240:	tst	r2, r1
   19244:	beq	19298 <__assert_fail@plt+0x7d80>
   19248:	ldr	r0, [sp, #52]	; 0x34
   1924c:	ldrb	r0, [r0, #88]	; 0x58
   19250:	tst	r0, #16
   19254:	bne	19290 <__assert_fail@plt+0x7d78>
   19258:	ldr	r2, [sp, #52]	; 0x34
   1925c:	orr	r1, r0, #16
   19260:	tst	r0, #8
   19264:	strb	r1, [r2, #88]	; 0x58
   19268:	bne	1a2fc <__assert_fail@plt+0x8de4>
   1926c:	sub	r1, pc, #668	; 0x29c
   19270:	tst	r0, #4
   19274:	vld1.64	{d16-d17}, [r1]
   19278:	add	r1, r2, #96	; 0x60
   1927c:	vst1.32	{d16-d17}, [r1]
   19280:	beq	1a308 <__assert_fail@plt+0x8df0>
   19284:	vmov.i32	q8, #0	; 0x00000000
   19288:	add	r0, r2, #112	; 0x70
   1928c:	vst1.32	{d16-d17}, [r0]
   19290:	ldr	r2, [r7]
   19294:	ldr	r6, [sp, #48]	; 0x30
   19298:	ldr	r0, [sp, #52]	; 0x34
   1929c:	cmp	r2, #256	; 0x100
   192a0:	beq	19b50 <__assert_fail@plt+0x8638>
   192a4:	cmp	r2, #512	; 0x200
   192a8:	bne	19bd0 <__assert_fail@plt+0x86b8>
   192ac:	mov	r4, #10
   192b0:	mov	r0, #5
   192b4:	b	19b58 <__assert_fail@plt+0x8640>
   192b8:	ldr	r5, [sp, #52]	; 0x34
   192bc:	mov	r1, #0
   192c0:	mov	r2, #0
   192c4:	mov	r3, r7
   192c8:	mov	sl, #0
   192cc:	mov	r0, r5
   192d0:	bl	1a414 <__assert_fail@plt+0x8efc>
   192d4:	cmp	r0, #0
   192d8:	beq	19bc4 <__assert_fail@plt+0x86ac>
   192dc:	mov	r4, r0
   192e0:	ldr	r0, [r5, #92]	; 0x5c
   192e4:	cmp	r0, #2
   192e8:	blt	19d08 <__assert_fail@plt+0x87f0>
   192ec:	ldr	r7, [sp, #52]	; 0x34
   192f0:	mov	sl, #16
   192f4:	sub	r8, fp, #80	; 0x50
   192f8:	ldr	r5, [sp, #48]	; 0x30
   192fc:	ldr	r0, [r5, #40]	; 0x28
   19300:	ldr	r1, [r5, #56]	; 0x38
   19304:	cmp	r1, r0
   19308:	ble	19c1c <__assert_fail@plt+0x8704>
   1930c:	ldr	r1, [r5, #28]
   19310:	ldr	r2, [sp, #44]	; 0x2c
   19314:	ldr	r3, [sp, #28]
   19318:	cmp	r0, r1
   1931c:	beq	19c14 <__assert_fail@plt+0x86fc>
   19320:	ldr	r1, [r5, #8]
   19324:	ldr	r0, [r1, r0, lsl #2]
   19328:	cmn	r0, #1
   1932c:	bne	19c14 <__assert_fail@plt+0x86fc>
   19330:	mov	r0, r3
   19334:	mov	r1, r5
   19338:	mov	r6, r3
   1933c:	bl	185e0 <__assert_fail@plt+0x70c8>
   19340:	ldr	r1, [r5, #40]	; 0x28
   19344:	mov	r2, #0
   19348:	mov	r3, r6
   1934c:	add	r0, r1, r0
   19350:	mov	r1, #0
   19354:	str	r0, [r5, #40]	; 0x28
   19358:	mov	r0, r7
   1935c:	bl	1a414 <__assert_fail@plt+0x8efc>
   19360:	mov	r5, r0
   19364:	mov	r0, #0
   19368:	str	sl, [fp, #-76]	; 0xffffffb4
   1936c:	mov	r1, r4
   19370:	mov	r3, r8
   19374:	str	r0, [fp, #-80]	; 0xffffffb0
   19378:	mov	r0, r7
   1937c:	mov	r2, r5
   19380:	bl	1a414 <__assert_fail@plt+0x8efc>
   19384:	cmp	r5, #0
   19388:	movne	r4, r0
   1938c:	cmpne	r0, #0
   19390:	bne	192f8 <__assert_fail@plt+0x7de0>
   19394:	mov	r0, #12
   19398:	str	r0, [r9]
   1939c:	b	1a290 <__assert_fail@plt+0x8d78>
   193a0:	mov	r0, #5
   193a4:	b	19bc8 <__assert_fail@plt+0x86b0>
   193a8:	mov	r0, #0
   193ac:	mov	r1, #1
   193b0:	mov	r7, #0
   193b4:	str	r0, [fp, #-32]	; 0xffffffe0
   193b8:	mov	r0, #32
   193bc:	bl	221cc <__assert_fail@plt+0x10cb4>
   193c0:	mov	r4, r0
   193c4:	mov	r0, #40	; 0x28
   193c8:	mov	r1, #1
   193cc:	bl	221cc <__assert_fail@plt+0x10cb4>
   193d0:	mov	r8, r0
   193d4:	cmp	r4, #0
   193d8:	cmpne	r8, #0
   193dc:	beq	19c9c <__assert_fail@plt+0x8784>
   193e0:	ldr	r7, [sp, #28]
   193e4:	ldr	r5, [sp, #44]	; 0x2c
   193e8:	mov	r1, r6
   193ec:	mov	r0, r7
   193f0:	mov	r2, r5
   193f4:	bl	1a6e4 <__assert_fail@plt+0x91cc>
   193f8:	mov	r3, r0
   193fc:	ldr	r0, [r7, #4]
   19400:	uxtb	r1, r0
   19404:	cmp	r1, #25
   19408:	beq	19460 <__assert_fail@plt+0x7f48>
   1940c:	cmp	r1, #2
   19410:	beq	19c88 <__assert_fail@plt+0x8770>
   19414:	mov	r1, #0
   19418:	b	194b4 <__assert_fail@plt+0x7f9c>
   1941c:	mov	r0, r7
   19420:	mov	r1, r6
   19424:	mov	r2, r3
   19428:	mov	r4, r3
   1942c:	bl	185e0 <__assert_fail@plt+0x70c8>
   19430:	ldr	r1, [r6, #40]	; 0x28
   19434:	mov	r2, r7
   19438:	mov	r3, r4
   1943c:	add	r0, r1, r0
   19440:	mov	r1, r5
   19444:	str	r0, [r6, #40]	; 0x28
   19448:	mov	r0, r6
   1944c:	sub	sp, fp, #28
   19450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19454:	b	18ef8 <__assert_fail@plt+0x79e0>
   19458:	mov	r0, #16
   1945c:	b	19bc8 <__assert_fail@plt+0x86b0>
   19460:	ldrb	r0, [r8, #16]
   19464:	tst	r5, #256	; 0x100
   19468:	ldr	r2, [sp, #44]	; 0x2c
   1946c:	mov	r1, r6
   19470:	orr	r0, r0, #1
   19474:	strb	r0, [r8, #16]
   19478:	ldrne	r0, [r4]
   1947c:	orrne	r0, r0, #1024	; 0x400
   19480:	strne	r0, [r4]
   19484:	ldr	r0, [r6, #40]	; 0x28
   19488:	add	r0, r0, r3
   1948c:	str	r0, [r6, #40]	; 0x28
   19490:	mov	r0, r7
   19494:	bl	1a6e4 <__assert_fail@plt+0x91cc>
   19498:	ldr	r7, [sp, #28]
   1949c:	mov	r3, r0
   194a0:	ldr	r0, [r7, #4]
   194a4:	uxtb	r1, r0
   194a8:	cmp	r1, #2
   194ac:	beq	19c88 <__assert_fail@plt+0x8770>
   194b0:	mov	r1, #1
   194b4:	str	r1, [sp, #36]	; 0x24
   194b8:	uxtb	r1, r0
   194bc:	str	r8, [sp, #40]	; 0x28
   194c0:	mov	r2, r7
   194c4:	cmp	r1, #21
   194c8:	ldr	r5, [sp, #44]	; 0x2c
   194cc:	moveq	r1, #1
   194d0:	bfieq	r0, r1, #0, #8
   194d4:	mov	r1, r6
   194d8:	streq	r0, [r7, #4]
   194dc:	mov	r0, #3
   194e0:	str	r0, [fp, #-40]	; 0xffffffd8
   194e4:	sub	r0, fp, #80	; 0x50
   194e8:	str	r0, [fp, #-36]	; 0xffffffdc
   194ec:	mov	r0, #1
   194f0:	str	r5, [sp]
   194f4:	str	r0, [sp, #4]
   194f8:	sub	r0, fp, #40	; 0x28
   194fc:	bl	1a84c <__assert_fail@plt+0x9334>
   19500:	cmp	r0, #0
   19504:	bne	19c74 <__assert_fail@plt+0x875c>
   19508:	and	r0, r5, #65536	; 0x10000
   1950c:	mov	r2, r5
   19510:	mov	r8, #0
   19514:	str	r0, [sp, #20]
   19518:	mov	r0, #0
   1951c:	str	r0, [sp, #16]
   19520:	mov	r0, #0
   19524:	str	r0, [sp, #12]
   19528:	ldr	r5, [sp, #28]
   1952c:	mov	r0, r5
   19530:	mov	r1, r6
   19534:	bl	1a6e4 <__assert_fail@plt+0x91cc>
   19538:	ldr	r7, [fp, #-40]	; 0xffffffd8
   1953c:	mov	sl, r0
   19540:	cmp	r7, #2
   19544:	beq	1971c <__assert_fail@plt+0x8204>
   19548:	cmp	r7, #4
   1954c:	bne	19590 <__assert_fail@plt+0x8078>
   19550:	ldr	r6, [sp, #48]	; 0x30
   19554:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19558:	sub	r3, fp, #32
   1955c:	ldr	r0, [r6, #64]	; 0x40
   19560:	str	r1, [sp]
   19564:	ldr	r1, [sp, #44]	; 0x2c
   19568:	str	r1, [sp, #4]
   1956c:	mov	r1, r4
   19570:	ldr	r2, [sp, #40]	; 0x28
   19574:	bl	1ab04 <__assert_fail@plt+0x95ec>
   19578:	ldr	r2, [sp, #28]
   1957c:	ldr	r5, [sp, #52]	; 0x34
   19580:	cmp	r0, #0
   19584:	str	r0, [r9]
   19588:	beq	1975c <__assert_fail@plt+0x8244>
   1958c:	b	19ccc <__assert_fail@plt+0x87b4>
   19590:	str	sl, [sp, #32]
   19594:	mov	sl, #7
   19598:	ldr	r2, [sp, #28]
   1959c:	str	r9, [sp, #24]
   195a0:	ldrb	r0, [r2, #4]
   195a4:	cmp	r0, #22
   195a8:	beq	195b8 <__assert_fail@plt+0x80a0>
   195ac:	cmp	r0, #2
   195b0:	bne	196bc <__assert_fail@plt+0x81a4>
   195b4:	b	19cc0 <__assert_fail@plt+0x87a8>
   195b8:	ldr	r5, [sp, #48]	; 0x30
   195bc:	ldr	r6, [sp, #32]
   195c0:	ldr	r2, [sp, #44]	; 0x2c
   195c4:	ldr	r0, [r5, #40]	; 0x28
   195c8:	mov	r1, r5
   195cc:	add	r0, r0, r6
   195d0:	str	r0, [r5, #40]	; 0x28
   195d4:	add	r0, sp, #56	; 0x38
   195d8:	bl	1a6e4 <__assert_fail@plt+0x91cc>
   195dc:	mov	r3, r0
   195e0:	ldrb	r0, [sp, #60]	; 0x3c
   195e4:	cmp	r0, #21
   195e8:	beq	196a4 <__assert_fail@plt+0x818c>
   195ec:	cmp	r0, #2
   195f0:	beq	19cc0 <__assert_fail@plt+0x87a8>
   195f4:	ldr	r8, [sp, #44]	; 0x2c
   195f8:	mov	r0, #3
   195fc:	add	r2, sp, #56	; 0x38
   19600:	str	r0, [fp, #-48]	; 0xffffffd0
   19604:	add	r0, sp, #64	; 0x40
   19608:	str	r0, [fp, #-44]	; 0xffffffd4
   1960c:	mov	r0, #1
   19610:	str	r0, [sp, #4]
   19614:	sub	r0, fp, #48	; 0x30
   19618:	str	r8, [sp]
   1961c:	ldr	r5, [sp, #48]	; 0x30
   19620:	mov	r1, r5
   19624:	bl	1a84c <__assert_fail@plt+0x9334>
   19628:	cmp	r0, #0
   1962c:	bne	1a3e4 <__assert_fail@plt+0x8ecc>
   19630:	ldr	r0, [sp, #28]
   19634:	mov	r1, r5
   19638:	mov	r2, r8
   1963c:	bl	1a6e4 <__assert_fail@plt+0x91cc>
   19640:	ldr	r6, [fp, #-48]	; 0xffffffd0
   19644:	mov	sl, #11
   19648:	str	r0, [sp, #32]
   1964c:	cmp	r6, #2
   19650:	cmpne	r6, #4
   19654:	beq	19cc0 <__assert_fail@plt+0x87a8>
   19658:	cmp	r7, #3
   1965c:	bne	19670 <__assert_fail@plt+0x8158>
   19660:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19664:	bl	113e0 <strlen@plt>
   19668:	cmp	r0, #1
   1966c:	bhi	19cbc <__assert_fail@plt+0x87a4>
   19670:	cmp	r6, #3
   19674:	bne	19688 <__assert_fail@plt+0x8170>
   19678:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1967c:	bl	113e0 <strlen@plt>
   19680:	cmp	r0, #1
   19684:	bhi	19cbc <__assert_fail@plt+0x87a4>
   19688:	ldr	r2, [sp, #28]
   1968c:	cmp	r7, #3
   19690:	beq	19808 <__assert_fail@plt+0x82f0>
   19694:	mov	r8, #0
   19698:	cmp	r7, #0
   1969c:	ldrbeq	r8, [fp, #-36]	; 0xffffffdc
   196a0:	b	19810 <__assert_fail@plt+0x82f8>
   196a4:	ldr	r0, [r5, #40]	; 0x28
   196a8:	ldr	r2, [sp, #28]
   196ac:	sub	r0, r0, r6
   196b0:	str	r0, [r5, #40]	; 0x28
   196b4:	mov	r0, #1
   196b8:	strb	r0, [r2, #4]
   196bc:	cmp	r7, #1
   196c0:	beq	197ac <__assert_fail@plt+0x8294>
   196c4:	ldr	r9, [sp, #24]
   196c8:	ldr	sl, [sp, #32]
   196cc:	cmp	r7, #2
   196d0:	mov	r8, #0
   196d4:	beq	1971c <__assert_fail@plt+0x8204>
   196d8:	cmp	r7, #3
   196dc:	mov	r7, #1
   196e0:	bne	197ec <__assert_fail@plt+0x82d4>
   196e4:	ldr	r5, [fp, #-36]	; 0xffffffdc
   196e8:	mov	r0, r5
   196ec:	bl	113e0 <strlen@plt>
   196f0:	ldr	r6, [sp, #48]	; 0x30
   196f4:	cmp	r0, #1
   196f8:	bne	19cbc <__assert_fail@plt+0x87a4>
   196fc:	ldrb	r0, [r5]
   19700:	ubfx	r1, r0, #5, #3
   19704:	and	r0, r0, #31
   19708:	ldr	r2, [r4, r1, lsl #2]
   1970c:	orr	r0, r2, r7, lsl r0
   19710:	str	r0, [r4, r1, lsl #2]
   19714:	str	r8, [r9]
   19718:	b	19754 <__assert_fail@plt+0x823c>
   1971c:	ldr	r5, [fp, #-36]	; 0xffffffdc
   19720:	mov	r0, r5
   19724:	bl	113e0 <strlen@plt>
   19728:	cmp	r0, #1
   1972c:	mov	r3, #1
   19730:	bne	19cb8 <__assert_fail@plt+0x87a0>
   19734:	ldrb	r0, [r5]
   19738:	ubfx	r1, r0, #5, #3
   1973c:	and	r0, r0, #31
   19740:	ldr	r2, [r4, r1, lsl #2]
   19744:	orr	r0, r2, r3, lsl r0
   19748:	str	r0, [r4, r1, lsl #2]
   1974c:	str	r8, [r9]
   19750:	ldr	r6, [sp, #48]	; 0x30
   19754:	ldr	r2, [sp, #28]
   19758:	ldr	r5, [sp, #52]	; 0x34
   1975c:	ldrb	r0, [r2, #4]
   19760:	cmp	r0, #21
   19764:	beq	199f0 <__assert_fail@plt+0x84d8>
   19768:	cmp	r0, #2
   1976c:	ldr	r0, [sp, #44]	; 0x2c
   19770:	beq	19c7c <__assert_fail@plt+0x8764>
   19774:	mov	r1, #3
   19778:	mov	r3, sl
   1977c:	mov	r5, r2
   19780:	str	r1, [fp, #-40]	; 0xffffffd8
   19784:	sub	r1, fp, #80	; 0x50
   19788:	str	r1, [fp, #-36]	; 0xffffffdc
   1978c:	stm	sp, {r0, r8}
   19790:	sub	r0, fp, #40	; 0x28
   19794:	mov	r1, r6
   19798:	bl	1a84c <__assert_fail@plt+0x9334>
   1979c:	ldr	r2, [sp, #44]	; 0x2c
   197a0:	cmp	r0, #0
   197a4:	beq	1952c <__assert_fail@plt+0x8014>
   197a8:	b	19c74 <__assert_fail@plt+0x875c>
   197ac:	ldr	r3, [sp, #40]	; 0x28
   197b0:	ldr	r0, [sp, #16]
   197b4:	mov	r8, #0
   197b8:	ldr	r1, [r3, #20]
   197bc:	cmp	r0, r1
   197c0:	beq	19950 <__assert_fail@plt+0x8438>
   197c4:	ldr	r0, [r3]
   197c8:	ldr	r9, [sp, #24]
   197cc:	ldr	r6, [sp, #48]	; 0x30
   197d0:	ldr	r5, [sp, #52]	; 0x34
   197d4:	ldr	ip, [fp, #-36]	; 0xffffffdc
   197d8:	ldr	sl, [sp, #32]
   197dc:	add	r7, r1, #1
   197e0:	str	r7, [r3, #20]
   197e4:	str	ip, [r0, r1, lsl #2]
   197e8:	b	1975c <__assert_fail@plt+0x8244>
   197ec:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   197f0:	ubfx	r1, r0, #5, #3
   197f4:	and	r0, r0, #31
   197f8:	ldr	r2, [r4, r1, lsl #2]
   197fc:	orr	r0, r2, r7, lsl r0
   19800:	str	r0, [r4, r1, lsl #2]
   19804:	b	19750 <__assert_fail@plt+0x8238>
   19808:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1980c:	ldrb	r8, [r0]
   19810:	cmp	r6, #3
   19814:	beq	19828 <__assert_fail@plt+0x8310>
   19818:	mov	r9, #0
   1981c:	cmp	r6, #0
   19820:	ldrbeq	r9, [fp, #-44]	; 0xffffffd4
   19824:	b	19830 <__assert_fail@plt+0x8318>
   19828:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1982c:	ldrb	r9, [r0]
   19830:	cmp	r7, #3
   19834:	cmpne	r7, #0
   19838:	bne	19860 <__assert_fail@plt+0x8348>
   1983c:	ldr	r0, [sp, #52]	; 0x34
   19840:	ldr	r0, [r0, #92]	; 0x5c
   19844:	cmp	r0, #2
   19848:	blt	19864 <__assert_fail@plt+0x834c>
   1984c:	mov	r0, r8
   19850:	bl	11428 <btowc@plt>
   19854:	ldr	r2, [sp, #28]
   19858:	mov	r8, r0
   1985c:	b	19864 <__assert_fail@plt+0x834c>
   19860:	ldr	r8, [fp, #-36]	; 0xffffffdc
   19864:	cmp	r6, #3
   19868:	cmpne	r6, #0
   1986c:	bne	19894 <__assert_fail@plt+0x837c>
   19870:	ldr	r0, [sp, #52]	; 0x34
   19874:	ldr	r0, [r0, #92]	; 0x5c
   19878:	cmp	r0, #2
   1987c:	blt	19898 <__assert_fail@plt+0x8380>
   19880:	mov	r0, r9
   19884:	bl	11428 <btowc@plt>
   19888:	ldr	r2, [sp, #28]
   1988c:	mov	r9, r0
   19890:	b	19898 <__assert_fail@plt+0x8380>
   19894:	ldr	r9, [fp, #-44]	; 0xffffffd4
   19898:	cmn	r8, #1
   1989c:	mov	sl, #3
   198a0:	cmnne	r9, #1
   198a4:	beq	19cc0 <__assert_fail@plt+0x87a8>
   198a8:	ldr	r0, [sp, #20]
   198ac:	cmp	r0, #0
   198b0:	beq	198c0 <__assert_fail@plt+0x83a8>
   198b4:	cmp	r8, r9
   198b8:	mov	sl, #11
   198bc:	bhi	19cc0 <__assert_fail@plt+0x87a8>
   198c0:	ldr	r0, [sp, #52]	; 0x34
   198c4:	ldr	r0, [r0, #92]	; 0x5c
   198c8:	cmp	r0, #2
   198cc:	blt	19904 <__assert_fail@plt+0x83ec>
   198d0:	ldr	r7, [sp, #40]	; 0x28
   198d4:	ldr	r1, [sp, #12]
   198d8:	ldr	r6, [sp, #48]	; 0x30
   198dc:	ldr	r0, [r7, #32]
   198e0:	cmp	r1, r0
   198e4:	beq	19998 <__assert_fail@plt+0x8480>
   198e8:	ldmib	r7, {r5, sl}
   198ec:	str	r8, [r5, r0, lsl #2]
   198f0:	ldr	r0, [r7, #32]
   198f4:	add	r1, r0, #1
   198f8:	str	r1, [r7, #32]
   198fc:	str	r9, [sl, r0, lsl #2]
   19900:	b	19908 <__assert_fail@plt+0x83f0>
   19904:	ldr	r6, [sp, #48]	; 0x30
   19908:	ldr	sl, [sp, #32]
   1990c:	mov	r0, #0
   19910:	mov	r5, #1
   19914:	cmp	r8, r0
   19918:	cmpls	r0, r9
   1991c:	ubfxls	r1, r0, #5, #3
   19920:	andls	r3, r0, #31
   19924:	add	r0, r0, #1
   19928:	ldrls	r7, [r4, r1, lsl #2]
   1992c:	orrls	r3, r7, r5, lsl r3
   19930:	strls	r3, [r4, r1, lsl #2]
   19934:	cmp	r0, #256	; 0x100
   19938:	bne	19914 <__assert_fail@plt+0x83fc>
   1993c:	ldr	r9, [sp, #24]
   19940:	ldr	r5, [sp, #52]	; 0x34
   19944:	mov	r8, #0
   19948:	str	r8, [r9]
   1994c:	b	1975c <__assert_fail@plt+0x8244>
   19950:	ldr	r1, [sp, #16]
   19954:	mov	r0, #1
   19958:	orr	r1, r0, r1, lsl #1
   1995c:	ldr	r0, [r3]
   19960:	str	r1, [sp, #16]
   19964:	lsl	r1, r1, #2
   19968:	bl	22250 <__assert_fail@plt+0x10d38>
   1996c:	cmp	r0, #0
   19970:	beq	1a3ec <__assert_fail@plt+0x8ed4>
   19974:	ldr	r3, [sp, #40]	; 0x28
   19978:	ldr	r9, [sp, #24]
   1997c:	ldr	r6, [sp, #48]	; 0x30
   19980:	ldr	r2, [sp, #28]
   19984:	ldr	r5, [sp, #52]	; 0x34
   19988:	mov	r8, #0
   1998c:	str	r0, [r3]
   19990:	ldr	r1, [r3, #20]
   19994:	b	197d4 <__assert_fail@plt+0x82bc>
   19998:	ldr	r1, [sp, #12]
   1999c:	mov	r0, #1
   199a0:	orr	r1, r0, r1, lsl #1
   199a4:	ldr	r0, [r7, #4]
   199a8:	lsl	r6, r1, #2
   199ac:	str	r1, [sp, #12]
   199b0:	mov	r1, r6
   199b4:	bl	22250 <__assert_fail@plt+0x10d38>
   199b8:	mov	r5, r0
   199bc:	ldr	r0, [r7, #8]
   199c0:	mov	r1, r6
   199c4:	bl	22250 <__assert_fail@plt+0x10d38>
   199c8:	mov	sl, r0
   199cc:	cmp	r5, #0
   199d0:	cmpne	sl, #0
   199d4:	beq	1a3fc <__assert_fail@plt+0x8ee4>
   199d8:	ldr	r7, [sp, #40]	; 0x28
   199dc:	stmib	r7, {r5, sl}
   199e0:	ldr	r0, [r7, #32]
   199e4:	ldr	r6, [sp, #48]	; 0x30
   199e8:	ldr	r2, [sp, #28]
   199ec:	b	198ec <__assert_fail@plt+0x83d4>
   199f0:	ldr	r0, [r6, #40]	; 0x28
   199f4:	add	r0, r0, sl
   199f8:	str	r0, [r6, #40]	; 0x28
   199fc:	ldr	r0, [sp, #36]	; 0x24
   19a00:	cmp	r0, #0
   19a04:	beq	19a28 <__assert_fail@plt+0x8510>
   19a08:	mov	r0, #0
   19a0c:	add	r1, r4, r0
   19a10:	add	r0, r0, #16
   19a14:	vld1.32	{d16-d17}, [r1]
   19a18:	cmp	r0, #32
   19a1c:	vmvn	q8, q8
   19a20:	vst1.32	{d16-d17}, [r1]
   19a24:	bne	19a0c <__assert_fail@plt+0x84f4>
   19a28:	ldr	r0, [r5, #92]	; 0x5c
   19a2c:	ldr	r8, [sp, #40]	; 0x28
   19a30:	cmp	r0, #2
   19a34:	blt	19a5c <__assert_fail@plt+0x8544>
   19a38:	ldr	r1, [r5, #60]	; 0x3c
   19a3c:	mov	r2, #0
   19a40:	ldr	r3, [r1, r2, lsl #2]
   19a44:	ldr	r7, [r4, r2, lsl #2]
   19a48:	and	r3, r7, r3
   19a4c:	str	r3, [r4, r2, lsl #2]
   19a50:	add	r2, r2, #1
   19a54:	cmp	r2, #8
   19a58:	bne	19a40 <__assert_fail@plt+0x8528>
   19a5c:	ldr	r1, [r8, #20]
   19a60:	cmp	r1, #0
   19a64:	bne	19a8c <__assert_fail@plt+0x8574>
   19a68:	ldr	r1, [r8, #24]
   19a6c:	cmp	r1, #0
   19a70:	bne	19a8c <__assert_fail@plt+0x8574>
   19a74:	ldr	r1, [r8, #28]
   19a78:	cmp	r1, #0
   19a7c:	bne	19a8c <__assert_fail@plt+0x8574>
   19a80:	ldr	r1, [r8, #32]
   19a84:	cmp	r1, #0
   19a88:	beq	19c24 <__assert_fail@plt+0x870c>
   19a8c:	ldrb	r0, [r5, #88]	; 0x58
   19a90:	add	r3, sp, #64	; 0x40
   19a94:	mov	r1, #0
   19a98:	mov	r2, #0
   19a9c:	orr	r0, r0, #2
   19aa0:	strb	r0, [r5, #88]	; 0x58
   19aa4:	mov	r0, #6
   19aa8:	str	r8, [sp, #64]	; 0x40
   19aac:	str	r0, [sp, #68]	; 0x44
   19ab0:	mov	r0, r5
   19ab4:	mov	r5, #0
   19ab8:	bl	1a414 <__assert_fail@plt+0x8efc>
   19abc:	ldr	r6, [sp, #48]	; 0x30
   19ac0:	cmp	r0, #0
   19ac4:	beq	19b48 <__assert_fail@plt+0x8630>
   19ac8:	mov	r7, r0
   19acc:	ldr	r0, [r4, r5, lsl #2]
   19ad0:	cmp	r0, #0
   19ad4:	bne	19af0 <__assert_fail@plt+0x85d8>
   19ad8:	add	r5, r5, #1
   19adc:	cmp	r5, #7
   19ae0:	bls	19acc <__assert_fail@plt+0x85b4>
   19ae4:	mov	r0, r4
   19ae8:	bl	223dc <__assert_fail@plt+0x10ec4>
   19aec:	b	19ce4 <__assert_fail@plt+0x87cc>
   19af0:	mov	r0, #3
   19af4:	str	r4, [sp, #64]	; 0x40
   19af8:	add	r3, sp, #64	; 0x40
   19afc:	mov	r1, #0
   19b00:	mov	r2, #0
   19b04:	mov	r5, #0
   19b08:	str	r0, [sp, #68]	; 0x44
   19b0c:	ldr	r0, [sp, #52]	; 0x34
   19b10:	bl	1a414 <__assert_fail@plt+0x8efc>
   19b14:	cmp	r0, #0
   19b18:	beq	19b48 <__assert_fail@plt+0x8630>
   19b1c:	mov	r1, r0
   19b20:	mov	r0, #10
   19b24:	sub	r3, fp, #80	; 0x50
   19b28:	mov	r2, r7
   19b2c:	str	r0, [fp, #-76]	; 0xffffffb4
   19b30:	ldr	r0, [sp, #52]	; 0x34
   19b34:	str	r5, [fp, #-80]	; 0xffffffb0
   19b38:	bl	1a414 <__assert_fail@plt+0x8efc>
   19b3c:	mov	r7, r0
   19b40:	cmp	r0, #0
   19b44:	bne	19ce4 <__assert_fail@plt+0x87cc>
   19b48:	mov	r0, #12
   19b4c:	b	19c8c <__assert_fail@plt+0x8774>
   19b50:	mov	r4, #9
   19b54:	mov	r0, #6
   19b58:	ldr	r5, [sp, #52]	; 0x34
   19b5c:	str	r0, [r7]
   19b60:	mov	r1, #0
   19b64:	mov	r2, #0
   19b68:	mov	r3, r7
   19b6c:	mov	sl, #0
   19b70:	mov	r0, r5
   19b74:	bl	1a414 <__assert_fail@plt+0x8efc>
   19b78:	mov	r8, r0
   19b7c:	mov	r0, r5
   19b80:	mov	r1, #0
   19b84:	mov	r2, #0
   19b88:	mov	r3, r7
   19b8c:	str	r4, [r7]
   19b90:	bl	1a414 <__assert_fail@plt+0x8efc>
   19b94:	mov	r7, r0
   19b98:	mov	r0, #10
   19b9c:	sub	r3, fp, #80	; 0x50
   19ba0:	mov	r1, r8
   19ba4:	str	r0, [fp, #-76]	; 0xffffffb4
   19ba8:	mov	r0, r5
   19bac:	mov	r2, r7
   19bb0:	str	sl, [fp, #-80]	; 0xffffffb0
   19bb4:	bl	1a414 <__assert_fail@plt+0x8efc>
   19bb8:	cmp	r8, #0
   19bbc:	cmpne	r7, #0
   19bc0:	bne	19be4 <__assert_fail@plt+0x86cc>
   19bc4:	mov	r0, #12
   19bc8:	str	r0, [r9]
   19bcc:	b	1a294 <__assert_fail@plt+0x8d7c>
   19bd0:	mov	r1, #0
   19bd4:	mov	r2, #0
   19bd8:	mov	r3, r7
   19bdc:	mov	sl, #0
   19be0:	bl	1a414 <__assert_fail@plt+0x8efc>
   19be4:	mov	r5, r0
   19be8:	cmp	r0, #0
   19bec:	beq	19bc4 <__assert_fail@plt+0x86ac>
   19bf0:	ldr	r0, [sp, #28]
   19bf4:	ldr	r2, [sp, #44]	; 0x2c
   19bf8:	mov	r1, r6
   19bfc:	bl	185e0 <__assert_fail@plt+0x70c8>
   19c00:	ldr	r1, [r6, #40]	; 0x28
   19c04:	mov	sl, r5
   19c08:	add	r0, r1, r0
   19c0c:	str	r0, [r6, #40]	; 0x28
   19c10:	b	1a294 <__assert_fail@plt+0x8d7c>
   19c14:	mov	r6, r5
   19c18:	b	19d10 <__assert_fail@plt+0x87f8>
   19c1c:	mov	r6, r5
   19c20:	b	19d08 <__assert_fail@plt+0x87f0>
   19c24:	cmp	r0, #2
   19c28:	blt	19c44 <__assert_fail@plt+0x872c>
   19c2c:	ldr	r0, [r8, #36]	; 0x24
   19c30:	cmp	r0, #0
   19c34:	bne	19a8c <__assert_fail@plt+0x8574>
   19c38:	ldrb	r0, [r8, #16]
   19c3c:	tst	r0, #1
   19c40:	bne	19a8c <__assert_fail@plt+0x8574>
   19c44:	mov	r0, r8
   19c48:	bl	17abc <__assert_fail@plt+0x65a4>
   19c4c:	mov	r0, #3
   19c50:	str	r4, [sp, #64]	; 0x40
   19c54:	add	r3, sp, #64	; 0x40
   19c58:	mov	r1, #0
   19c5c:	mov	r2, #0
   19c60:	str	r0, [sp, #68]	; 0x44
   19c64:	mov	r0, r5
   19c68:	bl	1a414 <__assert_fail@plt+0x8efc>
   19c6c:	ldr	r6, [sp, #48]	; 0x30
   19c70:	b	19b3c <__assert_fail@plt+0x8624>
   19c74:	mov	sl, r0
   19c78:	b	19c80 <__assert_fail@plt+0x8768>
   19c7c:	mov	sl, #7
   19c80:	str	r9, [sp, #24]
   19c84:	b	19cc0 <__assert_fail@plt+0x87a8>
   19c88:	mov	r0, #2
   19c8c:	str	r0, [r9]
   19c90:	b	19cd0 <__assert_fail@plt+0x87b8>
   19c94:	mov	r0, #6
   19c98:	b	19bc8 <__assert_fail@plt+0x86b0>
   19c9c:	mov	r0, r4
   19ca0:	bl	223dc <__assert_fail@plt+0x10ec4>
   19ca4:	mov	r0, r8
   19ca8:	bl	223dc <__assert_fail@plt+0x10ec4>
   19cac:	mov	r0, #12
   19cb0:	str	r0, [r9]
   19cb4:	b	19ce4 <__assert_fail@plt+0x87cc>
   19cb8:	str	r9, [sp, #24]
   19cbc:	mov	sl, #3
   19cc0:	ldr	r9, [sp, #24]
   19cc4:	ldr	r6, [sp, #48]	; 0x30
   19cc8:	str	sl, [r9]
   19ccc:	ldr	r8, [sp, #40]	; 0x28
   19cd0:	mov	r0, r4
   19cd4:	bl	223dc <__assert_fail@plt+0x10ec4>
   19cd8:	mov	r0, r8
   19cdc:	bl	17abc <__assert_fail@plt+0x65a4>
   19ce0:	mov	r7, #0
   19ce4:	mov	r4, r7
   19ce8:	cmp	r7, #0
   19cec:	bne	19d08 <__assert_fail@plt+0x87f0>
   19cf0:	ldr	r0, [r9]
   19cf4:	ldr	r2, [sp, #44]	; 0x2c
   19cf8:	ldr	r3, [sp, #28]
   19cfc:	cmp	r0, #0
   19d00:	beq	19d10 <__assert_fail@plt+0x87f8>
   19d04:	b	1a290 <__assert_fail@plt+0x8d78>
   19d08:	ldr	r2, [sp, #44]	; 0x2c
   19d0c:	ldr	r3, [sp, #28]
   19d10:	mov	r0, r3
   19d14:	mov	r1, r6
   19d18:	str	r9, [sp, #24]
   19d1c:	bl	185e0 <__assert_fail@plt+0x70c8>
   19d20:	ldr	r1, [r6, #40]	; 0x28
   19d24:	ldr	r2, [sp, #44]	; 0x2c
   19d28:	ldr	r3, [sp, #28]
   19d2c:	sub	r7, fp, #80	; 0x50
   19d30:	add	r0, r1, r0
   19d34:	str	r0, [r6, #40]	; 0x28
   19d38:	and	r0, r2, #2097152	; 0x200000
   19d3c:	str	r0, [sp, #20]
   19d40:	and	r0, r2, #16777216	; 0x1000000
   19d44:	str	r0, [sp, #32]
   19d48:	ldrb	r0, [r3, #4]
   19d4c:	cmp	r0, #23
   19d50:	bhi	1a224 <__assert_fail@plt+0x8d0c>
   19d54:	movw	r6, #2048	; 0x800
   19d58:	mov	r1, #1
   19d5c:	movt	r6, #140	; 0x8c
   19d60:	tst	r6, r1, lsl r0
   19d64:	beq	1a224 <__assert_fail@plt+0x8d0c>
   19d68:	cmp	r0, #23
   19d6c:	bne	19dc4 <__assert_fail@plt+0x88ac>
   19d70:	ldr	r0, [sp, #48]	; 0x30
   19d74:	ldr	sl, [r3]
   19d78:	ldr	r8, [r3, #4]
   19d7c:	mov	r1, r3
   19d80:	mov	r5, r3
   19d84:	ldr	r9, [r0, #40]	; 0x28
   19d88:	bl	1b390 <__assert_fail@plt+0x9e78>
   19d8c:	cmn	r0, #1
   19d90:	bne	19de0 <__assert_fail@plt+0x88c8>
   19d94:	ldrb	r0, [r5, #4]
   19d98:	mov	r3, r5
   19d9c:	cmp	r0, #1
   19da0:	ldrbeq	r1, [r3]
   19da4:	cmpeq	r1, #44	; 0x2c
   19da8:	beq	19e48 <__assert_fail@plt+0x8930>
   19dac:	ldr	r0, [sp, #24]
   19db0:	ldr	r2, [sp, #44]	; 0x2c
   19db4:	mov	r1, #10
   19db8:	mov	r5, #0
   19dbc:	str	r1, [r0]
   19dc0:	b	1a198 <__assert_fail@plt+0x8c80>
   19dc4:	cmp	r0, #19
   19dc8:	sub	r0, r0, #18
   19dcc:	mvn	sl, #0
   19dd0:	clz	r0, r0
   19dd4:	movweq	sl, #1
   19dd8:	lsr	r6, r0, #5
   19ddc:	b	19ea8 <__assert_fail@plt+0x8990>
   19de0:	str	sl, [sp, #40]	; 0x28
   19de4:	mov	r6, r0
   19de8:	cmn	r0, #2
   19dec:	mov	r3, r5
   19df0:	ldr	r2, [sp, #44]	; 0x2c
   19df4:	beq	19e1c <__assert_fail@plt+0x8904>
   19df8:	ldr	r0, [r3, #4]
   19dfc:	uxtb	r0, r0
   19e00:	mov	sl, r6
   19e04:	cmp	r0, #24
   19e08:	beq	19e78 <__assert_fail@plt+0x8960>
   19e0c:	cmp	r0, #1
   19e10:	ldrbeq	r0, [r3]
   19e14:	cmpeq	r0, #44	; 0x2c
   19e18:	beq	19e58 <__assert_fail@plt+0x8940>
   19e1c:	ldr	r0, [sp, #20]
   19e20:	cmp	r0, #0
   19e24:	beq	1a1f0 <__assert_fail@plt+0x8cd8>
   19e28:	ldr	r0, [sp, #48]	; 0x30
   19e2c:	mov	r5, r4
   19e30:	str	r9, [r0, #40]	; 0x28
   19e34:	mov	r0, #1
   19e38:	bfi	r8, r0, #0, #8
   19e3c:	ldr	r0, [sp, #40]	; 0x28
   19e40:	stm	r3, {r0, r8}
   19e44:	b	1a198 <__assert_fail@plt+0x8c80>
   19e48:	str	sl, [sp, #40]	; 0x28
   19e4c:	mov	r6, #0
   19e50:	ldr	r2, [sp, #44]	; 0x2c
   19e54:	b	19dfc <__assert_fail@plt+0x88e4>
   19e58:	ldr	r0, [sp, #48]	; 0x30
   19e5c:	mov	r1, r3
   19e60:	bl	1b390 <__assert_fail@plt+0x9e78>
   19e64:	ldr	r3, [sp, #28]
   19e68:	ldr	r2, [sp, #44]	; 0x2c
   19e6c:	mov	sl, r0
   19e70:	cmn	r0, #2
   19e74:	beq	19e1c <__assert_fail@plt+0x8904>
   19e78:	cmn	sl, #1
   19e7c:	beq	19e88 <__assert_fail@plt+0x8970>
   19e80:	cmp	r6, sl
   19e84:	bgt	1a1e4 <__assert_fail@plt+0x8ccc>
   19e88:	ldrb	r0, [r3, #4]
   19e8c:	cmp	r0, #24
   19e90:	bne	1a1e4 <__assert_fail@plt+0x8ccc>
   19e94:	cmn	sl, #1
   19e98:	mov	r0, sl
   19e9c:	moveq	r0, r6
   19ea0:	cmp	r0, #32768	; 0x8000
   19ea4:	bge	1a210 <__assert_fail@plt+0x8cf8>
   19ea8:	ldr	r5, [sp, #48]	; 0x30
   19eac:	mov	r0, r3
   19eb0:	mov	r1, r5
   19eb4:	bl	185e0 <__assert_fail@plt+0x70c8>
   19eb8:	ldr	r1, [r5, #40]	; 0x28
   19ebc:	cmp	r4, #0
   19ec0:	add	r0, r1, r0
   19ec4:	str	r0, [r5, #40]	; 0x28
   19ec8:	mov	r5, #0
   19ecc:	beq	1a0d0 <__assert_fail@plt+0x8bb8>
   19ed0:	orrs	r0, sl, r6
   19ed4:	beq	1a07c <__assert_fail@plt+0x8b64>
   19ed8:	mov	r0, #0
   19edc:	cmp	r6, #1
   19ee0:	mov	r8, r4
   19ee4:	str	r0, [sp, #40]	; 0x28
   19ee8:	str	r4, [sp, #36]	; 0x24
   19eec:	mov	r4, #10
   19ef0:	bge	1a0dc <__assert_fail@plt+0x8bc4>
   19ef4:	ldrb	r0, [r8, #24]
   19ef8:	cmp	r0, #17
   19efc:	ldr	r0, [sp, #52]	; 0x34
   19f00:	bne	19f70 <__assert_fail@plt+0x8a58>
   19f04:	ldr	r5, [r8, #20]
   19f08:	mov	r2, r8
   19f0c:	mov	r1, r2
   19f10:	ldr	r2, [r2, #4]
   19f14:	cmp	r2, #0
   19f18:	bne	19f0c <__assert_fail@plt+0x89f4>
   19f1c:	ldr	r2, [r1, #8]
   19f20:	cmp	r2, #0
   19f24:	bne	19f0c <__assert_fail@plt+0x89f4>
   19f28:	ldr	r2, [r1, #24]
   19f2c:	uxtb	r3, r2
   19f30:	cmp	r3, #17
   19f34:	ldreq	r3, [r1, #20]
   19f38:	cmpeq	r3, r5
   19f3c:	orreq	r2, r2, #524288	; 0x80000
   19f40:	streq	r2, [r1, #24]
   19f44:	ldr	r3, [r1]
   19f48:	cmp	r3, #0
   19f4c:	beq	19f70 <__assert_fail@plt+0x8a58>
   19f50:	ldr	r2, [r3, #8]
   19f54:	cmp	r2, r1
   19f58:	mov	r1, r3
   19f5c:	beq	19f28 <__assert_fail@plt+0x8a10>
   19f60:	cmp	r2, #0
   19f64:	mov	r1, r3
   19f68:	beq	19f28 <__assert_fail@plt+0x8a10>
   19f6c:	b	19f0c <__assert_fail@plt+0x89f4>
   19f70:	mov	r1, #0
   19f74:	cmn	sl, #1
   19f78:	mov	r2, #0
   19f7c:	mov	r3, r7
   19f80:	str	r1, [fp, #-80]	; 0xffffffb0
   19f84:	mov	r1, #10
   19f88:	movweq	r1, #11
   19f8c:	str	r1, [fp, #-76]	; 0xffffffb4
   19f90:	mov	r1, r8
   19f94:	bl	1a414 <__assert_fail@plt+0x8efc>
   19f98:	cmp	r0, #0
   19f9c:	beq	1a17c <__assert_fail@plt+0x8c64>
   19fa0:	mov	r5, r0
   19fa4:	add	r0, r6, #2
   19fa8:	cmp	r0, sl
   19fac:	ble	19fe4 <__assert_fail@plt+0x8acc>
   19fb0:	ldr	r1, [sp, #40]	; 0x28
   19fb4:	cmp	r1, #0
   19fb8:	beq	1a068 <__assert_fail@plt+0x8b50>
   19fbc:	mov	r0, #16
   19fc0:	mov	r2, r5
   19fc4:	mov	r3, r7
   19fc8:	str	r0, [fp, #-76]	; 0xffffffb4
   19fcc:	mov	r0, #0
   19fd0:	str	r0, [fp, #-80]	; 0xffffffb0
   19fd4:	ldr	r0, [sp, #52]	; 0x34
   19fd8:	bl	1a414 <__assert_fail@plt+0x8efc>
   19fdc:	mov	r5, r0
   19fe0:	b	1a18c <__assert_fail@plt+0x8c74>
   19fe4:	add	r6, r6, #1
   19fe8:	ldr	r9, [sp, #52]	; 0x34
   19fec:	mov	r0, r8
   19ff0:	mov	r1, r9
   19ff4:	bl	1b448 <__assert_fail@plt+0x9f30>
   19ff8:	mov	r8, r0
   19ffc:	mov	r0, #16
   1a000:	mov	r1, r5
   1a004:	mov	r3, r7
   1a008:	str	r0, [fp, #-76]	; 0xffffffb4
   1a00c:	mov	r0, #0
   1a010:	mov	r2, r8
   1a014:	str	r0, [fp, #-80]	; 0xffffffb0
   1a018:	mov	r0, r9
   1a01c:	bl	1a414 <__assert_fail@plt+0x8efc>
   1a020:	cmp	r8, #0
   1a024:	movne	r1, r0
   1a028:	cmpne	r0, #0
   1a02c:	beq	1a17c <__assert_fail@plt+0x8c64>
   1a030:	mov	r0, #0
   1a034:	str	r4, [fp, #-76]	; 0xffffffb4
   1a038:	mov	r2, #0
   1a03c:	mov	r3, r7
   1a040:	str	r0, [fp, #-80]	; 0xffffffb0
   1a044:	ldr	r0, [sp, #52]	; 0x34
   1a048:	bl	1a414 <__assert_fail@plt+0x8efc>
   1a04c:	cmp	r0, #0
   1a050:	beq	1a17c <__assert_fail@plt+0x8c64>
   1a054:	add	r6, r6, #1
   1a058:	mov	r5, r0
   1a05c:	cmp	r6, sl
   1a060:	blt	19fe8 <__assert_fail@plt+0x8ad0>
   1a064:	b	19fb0 <__assert_fail@plt+0x8a98>
   1a068:	ldr	r2, [sp, #44]	; 0x2c
   1a06c:	ldr	r3, [sp, #28]
   1a070:	clz	r0, r5
   1a074:	lsr	r0, r0, #5
   1a078:	b	1a1b8 <__assert_fail@plt+0x8ca0>
   1a07c:	mov	r0, r4
   1a080:	mov	r6, r0
   1a084:	ldr	r0, [r0, #4]
   1a088:	cmp	r0, #0
   1a08c:	bne	1a080 <__assert_fail@plt+0x8b68>
   1a090:	ldr	r0, [r6, #8]
   1a094:	cmp	r0, #0
   1a098:	bne	1a080 <__assert_fail@plt+0x8b68>
   1a09c:	add	r0, r6, #20
   1a0a0:	bl	17a2c <__assert_fail@plt+0x6514>
   1a0a4:	ldr	r1, [r6]
   1a0a8:	cmp	r1, #0
   1a0ac:	beq	1a0d0 <__assert_fail@plt+0x8bb8>
   1a0b0:	ldr	r0, [r1, #8]
   1a0b4:	cmp	r0, r6
   1a0b8:	mov	r6, r1
   1a0bc:	beq	1a09c <__assert_fail@plt+0x8b84>
   1a0c0:	cmp	r0, #0
   1a0c4:	mov	r6, r1
   1a0c8:	beq	1a09c <__assert_fail@plt+0x8b84>
   1a0cc:	b	1a080 <__assert_fail@plt+0x8b68>
   1a0d0:	ldr	r2, [sp, #44]	; 0x2c
   1a0d4:	ldr	r3, [sp, #28]
   1a0d8:	b	1a198 <__assert_fail@plt+0x8c80>
   1a0dc:	ldr	r9, [sp, #36]	; 0x24
   1a0e0:	str	r9, [sp, #40]	; 0x28
   1a0e4:	beq	1a150 <__assert_fail@plt+0x8c38>
   1a0e8:	ldr	r0, [sp, #36]	; 0x24
   1a0ec:	mov	r5, #1
   1a0f0:	mov	r9, r0
   1a0f4:	str	r0, [sp, #40]	; 0x28
   1a0f8:	ldr	r8, [sp, #52]	; 0x34
   1a0fc:	mov	r0, r9
   1a100:	mov	r1, r8
   1a104:	bl	1b448 <__assert_fail@plt+0x9f30>
   1a108:	ldr	r1, [sp, #40]	; 0x28
   1a10c:	mov	r9, r0
   1a110:	mov	r0, #16
   1a114:	mov	r3, r7
   1a118:	str	r0, [fp, #-76]	; 0xffffffb4
   1a11c:	mov	r0, #0
   1a120:	mov	r2, r9
   1a124:	str	r0, [fp, #-80]	; 0xffffffb0
   1a128:	mov	r0, r8
   1a12c:	bl	1a414 <__assert_fail@plt+0x8efc>
   1a130:	str	r0, [sp, #40]	; 0x28
   1a134:	cmp	r9, #0
   1a138:	ldrne	r0, [sp, #40]	; 0x28
   1a13c:	cmpne	r0, #0
   1a140:	beq	1a17c <__assert_fail@plt+0x8c64>
   1a144:	add	r5, r5, #1
   1a148:	cmp	r5, r6
   1a14c:	blt	1a0f8 <__assert_fail@plt+0x8be0>
   1a150:	cmp	r6, sl
   1a154:	bne	1a164 <__assert_fail@plt+0x8c4c>
   1a158:	ldr	r2, [sp, #44]	; 0x2c
   1a15c:	ldr	r5, [sp, #40]	; 0x28
   1a160:	b	1a06c <__assert_fail@plt+0x8b54>
   1a164:	ldr	r1, [sp, #52]	; 0x34
   1a168:	mov	r0, r9
   1a16c:	bl	1b448 <__assert_fail@plt+0x9f30>
   1a170:	mov	r8, r0
   1a174:	cmp	r0, #0
   1a178:	bne	19ef4 <__assert_fail@plt+0x89dc>
   1a17c:	ldr	r0, [sp, #24]
   1a180:	mov	r1, #12
   1a184:	mov	r5, #0
   1a188:	str	r1, [r0]
   1a18c:	ldr	r2, [sp, #44]	; 0x2c
   1a190:	ldr	r3, [sp, #28]
   1a194:	ldr	r4, [sp, #36]	; 0x24
   1a198:	clz	r0, r5
   1a19c:	cmp	r5, #0
   1a1a0:	lsr	r0, r0, #5
   1a1a4:	bne	1a1b8 <__assert_fail@plt+0x8ca0>
   1a1a8:	ldr	r1, [sp, #24]
   1a1ac:	ldr	r1, [r1]
   1a1b0:	cmp	r1, #0
   1a1b4:	bne	1a2a0 <__assert_fail@plt+0x8d88>
   1a1b8:	ldr	r1, [sp, #32]
   1a1bc:	mov	r4, r5
   1a1c0:	cmp	r1, #0
   1a1c4:	beq	19d48 <__assert_fail@plt+0x8830>
   1a1c8:	ldrb	r1, [r3, #4]
   1a1cc:	cmp	r1, #23
   1a1d0:	beq	1a22c <__assert_fail@plt+0x8d14>
   1a1d4:	cmp	r1, #11
   1a1d8:	mov	r4, r5
   1a1dc:	bne	19d48 <__assert_fail@plt+0x8830>
   1a1e0:	b	1a22c <__assert_fail@plt+0x8d14>
   1a1e4:	ldr	r0, [sp, #24]
   1a1e8:	mov	r1, #10
   1a1ec:	b	1a218 <__assert_fail@plt+0x8d00>
   1a1f0:	ldrb	r0, [r3, #4]
   1a1f4:	ldr	r1, [sp, #24]
   1a1f8:	mov	r5, #0
   1a1fc:	cmp	r0, #2
   1a200:	mov	r0, #10
   1a204:	movweq	r0, #9
   1a208:	str	r0, [r1]
   1a20c:	b	1a198 <__assert_fail@plt+0x8c80>
   1a210:	ldr	r0, [sp, #24]
   1a214:	mov	r1, #15
   1a218:	str	r1, [r0]
   1a21c:	mov	r5, #0
   1a220:	b	1a198 <__assert_fail@plt+0x8c80>
   1a224:	mov	sl, r4
   1a228:	b	1a294 <__assert_fail@plt+0x8d7c>
   1a22c:	cmp	r0, #0
   1a230:	bne	1a284 <__assert_fail@plt+0x8d6c>
   1a234:	mov	r4, r5
   1a238:	ldr	r5, [r5, #4]
   1a23c:	cmp	r5, #0
   1a240:	bne	1a234 <__assert_fail@plt+0x8d1c>
   1a244:	ldr	r5, [r4, #8]
   1a248:	cmp	r5, #0
   1a24c:	bne	1a234 <__assert_fail@plt+0x8d1c>
   1a250:	add	r0, r4, #20
   1a254:	bl	17a2c <__assert_fail@plt+0x6514>
   1a258:	ldr	r0, [r4]
   1a25c:	cmp	r0, #0
   1a260:	beq	1a284 <__assert_fail@plt+0x8d6c>
   1a264:	ldr	r5, [r0, #8]
   1a268:	cmp	r5, r4
   1a26c:	mov	r4, r0
   1a270:	beq	1a250 <__assert_fail@plt+0x8d38>
   1a274:	cmp	r5, #0
   1a278:	mov	r4, r0
   1a27c:	beq	1a250 <__assert_fail@plt+0x8d38>
   1a280:	b	1a234 <__assert_fail@plt+0x8d1c>
   1a284:	ldr	r1, [sp, #24]
   1a288:	mov	r0, #13
   1a28c:	str	r0, [r1]
   1a290:	mov	sl, #0
   1a294:	mov	r0, sl
   1a298:	sub	sp, fp, #28
   1a29c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2a0:	mov	sl, #0
   1a2a4:	cmp	r4, #0
   1a2a8:	beq	1a294 <__assert_fail@plt+0x8d7c>
   1a2ac:	mov	r5, r4
   1a2b0:	ldr	r4, [r4, #4]
   1a2b4:	cmp	r4, #0
   1a2b8:	bne	1a2ac <__assert_fail@plt+0x8d94>
   1a2bc:	ldr	r4, [r5, #8]
   1a2c0:	cmp	r4, #0
   1a2c4:	bne	1a2ac <__assert_fail@plt+0x8d94>
   1a2c8:	add	r0, r5, #20
   1a2cc:	bl	17a2c <__assert_fail@plt+0x6514>
   1a2d0:	ldr	r0, [r5]
   1a2d4:	cmp	r0, #0
   1a2d8:	beq	1a294 <__assert_fail@plt+0x8d7c>
   1a2dc:	ldr	r4, [r0, #8]
   1a2e0:	cmp	r4, r5
   1a2e4:	mov	r5, r0
   1a2e8:	beq	1a2c8 <__assert_fail@plt+0x8db0>
   1a2ec:	cmp	r4, #0
   1a2f0:	mov	r5, r0
   1a2f4:	beq	1a2c8 <__assert_fail@plt+0x8db0>
   1a2f8:	b	1a2ac <__assert_fail@plt+0x8d94>
   1a2fc:	mov	r4, #0
   1a300:	mov	r8, #0
   1a304:	b	1a310 <__assert_fail@plt+0x8df8>
   1a308:	mov	r8, #4
   1a30c:	mov	r4, #128	; 0x80
   1a310:	bl	113c8 <__ctype_b_loc@plt>
   1a314:	ldr	r0, [r0]
   1a318:	ldr	r7, [sp, #28]
   1a31c:	mov	r1, #1
   1a320:	add	r5, r0, r4, lsl #1
   1a324:	ldr	r0, [sp, #52]	; 0x34
   1a328:	mov	r3, #0
   1a32c:	add	r0, r0, r8, lsl #2
   1a330:	add	r2, r0, #96	; 0x60
   1a334:	mov	r0, r5
   1a338:	add	r6, r4, r3
   1a33c:	cmp	r6, #95	; 0x5f
   1a340:	beq	1a350 <__assert_fail@plt+0x8e38>
   1a344:	ldrh	r6, [r0]
   1a348:	ands	r6, r6, #8
   1a34c:	beq	1a35c <__assert_fail@plt+0x8e44>
   1a350:	ldr	r6, [r2]
   1a354:	orr	r6, r6, r1, lsl r3
   1a358:	str	r6, [r2]
   1a35c:	add	r3, r3, #1
   1a360:	add	r0, r0, #2
   1a364:	cmp	r3, #32
   1a368:	bne	1a338 <__assert_fail@plt+0x8e20>
   1a36c:	add	r8, r8, #1
   1a370:	add	r5, r5, #64	; 0x40
   1a374:	add	r4, r4, #32
   1a378:	cmp	r8, #8
   1a37c:	bne	1a324 <__assert_fail@plt+0x8e0c>
   1a380:	b	19290 <__assert_fail@plt+0x7d78>
   1a384:	cmp	r1, #0
   1a388:	beq	1a3dc <__assert_fail@plt+0x8ec4>
   1a38c:	mov	r5, r1
   1a390:	ldr	r1, [r1, #4]
   1a394:	cmp	r1, #0
   1a398:	bne	1a38c <__assert_fail@plt+0x8e74>
   1a39c:	ldr	r1, [r5, #8]
   1a3a0:	cmp	r1, #0
   1a3a4:	bne	1a38c <__assert_fail@plt+0x8e74>
   1a3a8:	add	r0, r5, #20
   1a3ac:	bl	17a2c <__assert_fail@plt+0x6514>
   1a3b0:	ldr	r0, [r5]
   1a3b4:	cmp	r0, #0
   1a3b8:	beq	1a3dc <__assert_fail@plt+0x8ec4>
   1a3bc:	ldr	r1, [r0, #8]
   1a3c0:	cmp	r1, r5
   1a3c4:	mov	r5, r0
   1a3c8:	beq	1a3a8 <__assert_fail@plt+0x8e90>
   1a3cc:	cmp	r1, #0
   1a3d0:	mov	r5, r0
   1a3d4:	beq	1a3a8 <__assert_fail@plt+0x8e90>
   1a3d8:	b	1a38c <__assert_fail@plt+0x8e74>
   1a3dc:	mov	r0, #8
   1a3e0:	b	19bc8 <__assert_fail@plt+0x86b0>
   1a3e4:	mov	sl, r0
   1a3e8:	b	19cc0 <__assert_fail@plt+0x87a8>
   1a3ec:	ldr	r9, [sp, #24]
   1a3f0:	ldr	r6, [sp, #48]	; 0x30
   1a3f4:	ldr	r8, [sp, #40]	; 0x28
   1a3f8:	b	19b48 <__assert_fail@plt+0x8630>
   1a3fc:	mov	r0, r5
   1a400:	bl	223dc <__assert_fail@plt+0x10ec4>
   1a404:	mov	r0, sl
   1a408:	bl	223dc <__assert_fail@plt+0x10ec4>
   1a40c:	mov	sl, #12
   1a410:	b	19cc0 <__assert_fail@plt+0x87a8>
   1a414:	push	{r4, r5, r6, r7, fp, lr}
   1a418:	add	fp, sp, #16
   1a41c:	mov	r5, r1
   1a420:	ldr	r1, [r0, #64]	; 0x40
   1a424:	mov	r6, r3
   1a428:	mov	r4, r2
   1a42c:	mov	r7, r0
   1a430:	cmp	r1, #31
   1a434:	beq	1a48c <__assert_fail@plt+0x8f74>
   1a438:	ldr	r0, [r7, #56]	; 0x38
   1a43c:	add	r2, r1, #1
   1a440:	add	r0, r0, r1, lsl #5
   1a444:	mov	r1, #0
   1a448:	cmp	r5, #0
   1a44c:	str	r2, [r7, #64]	; 0x40
   1a450:	str	r1, [r0, #4]!
   1a454:	str	r5, [r0, #4]
   1a458:	str	r4, [r0, #8]
   1a45c:	ldm	r6, {r2, r3}
   1a460:	str	r1, [r0, #12]
   1a464:	str	r1, [r0, #16]
   1a468:	mvn	r1, #0
   1a46c:	str	r1, [r0, #28]
   1a470:	bic	r1, r3, #786432	; 0xc0000
   1a474:	str	r2, [r0, #20]
   1a478:	str	r1, [r0, #24]
   1a47c:	strne	r0, [r5]
   1a480:	cmp	r4, #0
   1a484:	strne	r0, [r4]
   1a488:	pop	{r4, r5, r6, r7, fp, pc}
   1a48c:	mov	r0, #996	; 0x3e4
   1a490:	bl	22220 <__assert_fail@plt+0x10d08>
   1a494:	cmp	r0, #0
   1a498:	moveq	r0, #0
   1a49c:	popeq	{r4, r5, r6, r7, fp, pc}
   1a4a0:	ldr	r1, [r7, #56]	; 0x38
   1a4a4:	str	r1, [r0]
   1a4a8:	mov	r1, #0
   1a4ac:	str	r1, [r7, #64]	; 0x40
   1a4b0:	str	r0, [r7, #56]	; 0x38
   1a4b4:	b	1a43c <__assert_fail@plt+0x8f24>
   1a4b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4bc:	add	fp, sp, #28
   1a4c0:	sub	sp, sp, #28
   1a4c4:	mov	sl, r1
   1a4c8:	mov	r9, r0
   1a4cc:	mov	r7, #0
   1a4d0:	mov	r0, #32
   1a4d4:	mov	r1, #1
   1a4d8:	mov	r8, r3
   1a4dc:	mov	r4, r2
   1a4e0:	str	r7, [sp, #16]
   1a4e4:	bl	221cc <__assert_fail@plt+0x10cb4>
   1a4e8:	ldr	r1, [fp, #12]
   1a4ec:	cmp	r0, #0
   1a4f0:	beq	1a6a0 <__assert_fail@plt+0x9188>
   1a4f4:	mov	r5, r0
   1a4f8:	mov	r0, #40	; 0x28
   1a4fc:	mov	r1, #1
   1a500:	bl	221cc <__assert_fail@plt+0x10cb4>
   1a504:	cmp	r0, #0
   1a508:	beq	1a6a8 <__assert_fail@plt+0x9190>
   1a50c:	mov	r6, r0
   1a510:	ldrb	r0, [r0, #16]
   1a514:	ldr	r1, [fp, #8]
   1a518:	mov	r7, #0
   1a51c:	add	r3, sp, #16
   1a520:	mov	r2, r6
   1a524:	and	r0, r0, #254	; 0xfe
   1a528:	orr	r0, r0, r1
   1a52c:	mov	r1, r5
   1a530:	strb	r0, [r6, #16]
   1a534:	mov	r0, sl
   1a538:	stm	sp, {r4, r7}
   1a53c:	bl	1ab04 <__assert_fail@plt+0x95ec>
   1a540:	cmp	r0, #0
   1a544:	bne	1a6c4 <__assert_fail@plt+0x91ac>
   1a548:	ldrb	r0, [r8]
   1a54c:	cmp	r0, #0
   1a550:	beq	1a57c <__assert_fail@plt+0x9064>
   1a554:	add	r1, r8, #1
   1a558:	mov	r2, #1
   1a55c:	ubfx	r3, r0, #5, #3
   1a560:	and	r0, r0, #31
   1a564:	ldr	r7, [r5, r3, lsl #2]
   1a568:	orr	r0, r7, r2, lsl r0
   1a56c:	str	r0, [r5, r3, lsl #2]
   1a570:	ldrb	r0, [r1], #1
   1a574:	cmp	r0, #0
   1a578:	bne	1a55c <__assert_fail@plt+0x9044>
   1a57c:	ldr	r0, [fp, #8]
   1a580:	cmp	r0, #0
   1a584:	beq	1a5a8 <__assert_fail@plt+0x9090>
   1a588:	mov	r0, #0
   1a58c:	add	r1, r5, r0
   1a590:	add	r0, r0, #16
   1a594:	vld1.32	{d16-d17}, [r1]
   1a598:	cmp	r0, #32
   1a59c:	vmvn	q8, q8
   1a5a0:	vst1.32	{d16-d17}, [r1]
   1a5a4:	bne	1a58c <__assert_fail@plt+0x9074>
   1a5a8:	ldr	r0, [r9, #92]	; 0x5c
   1a5ac:	cmp	r0, #2
   1a5b0:	blt	1a5d8 <__assert_fail@plt+0x90c0>
   1a5b4:	ldr	r0, [r9, #60]	; 0x3c
   1a5b8:	mov	r1, #0
   1a5bc:	ldr	r2, [r0, r1, lsl #2]
   1a5c0:	ldr	r3, [r5, r1, lsl #2]
   1a5c4:	and	r2, r3, r2
   1a5c8:	str	r2, [r5, r1, lsl #2]
   1a5cc:	add	r1, r1, #1
   1a5d0:	cmp	r1, #8
   1a5d4:	bne	1a5bc <__assert_fail@plt+0x90a4>
   1a5d8:	mov	r0, #3
   1a5dc:	add	r3, sp, #8
   1a5e0:	mov	r1, #0
   1a5e4:	mov	r2, #0
   1a5e8:	mov	r7, #0
   1a5ec:	str	r0, [sp, #12]
   1a5f0:	mov	r0, r9
   1a5f4:	str	r5, [sp, #8]
   1a5f8:	bl	1a414 <__assert_fail@plt+0x8efc>
   1a5fc:	cmp	r0, #0
   1a600:	beq	1a68c <__assert_fail@plt+0x9174>
   1a604:	mov	r4, r0
   1a608:	ldr	r0, [r9, #92]	; 0x5c
   1a60c:	cmp	r0, #2
   1a610:	blt	1a674 <__assert_fail@plt+0x915c>
   1a614:	mov	r0, #6
   1a618:	str	r6, [sp, #8]
   1a61c:	add	r3, sp, #8
   1a620:	mov	r1, #0
   1a624:	mov	r2, #0
   1a628:	mov	r8, #0
   1a62c:	str	r0, [sp, #12]
   1a630:	ldrb	r0, [r9, #88]	; 0x58
   1a634:	orr	r0, r0, #2
   1a638:	strb	r0, [r9, #88]	; 0x58
   1a63c:	mov	r0, r9
   1a640:	bl	1a414 <__assert_fail@plt+0x8efc>
   1a644:	cmp	r0, #0
   1a648:	beq	1a68c <__assert_fail@plt+0x9174>
   1a64c:	mov	r2, r0
   1a650:	mov	r0, #10
   1a654:	add	r3, sp, #20
   1a658:	mov	r1, r4
   1a65c:	str	r0, [sp, #24]
   1a660:	mov	r0, r9
   1a664:	str	r8, [sp, #20]
   1a668:	bl	1a414 <__assert_fail@plt+0x8efc>
   1a66c:	mov	r7, r0
   1a670:	b	1a680 <__assert_fail@plt+0x9168>
   1a674:	mov	r0, r6
   1a678:	bl	17abc <__assert_fail@plt+0x65a4>
   1a67c:	mov	r7, r4
   1a680:	mov	r0, r7
   1a684:	sub	sp, fp, #28
   1a688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a68c:	mov	r0, r5
   1a690:	bl	223dc <__assert_fail@plt+0x10ec4>
   1a694:	mov	r0, r6
   1a698:	bl	17abc <__assert_fail@plt+0x65a4>
   1a69c:	ldr	r1, [fp, #12]
   1a6a0:	mov	r0, #12
   1a6a4:	b	1a6bc <__assert_fail@plt+0x91a4>
   1a6a8:	mov	r0, r5
   1a6ac:	bl	223dc <__assert_fail@plt+0x10ec4>
   1a6b0:	ldr	r1, [fp, #12]
   1a6b4:	mov	r0, #12
   1a6b8:	mov	r7, #0
   1a6bc:	str	r0, [r1]
   1a6c0:	b	1a680 <__assert_fail@plt+0x9168>
   1a6c4:	mov	r4, r0
   1a6c8:	mov	r0, r5
   1a6cc:	bl	223dc <__assert_fail@plt+0x10ec4>
   1a6d0:	mov	r0, r6
   1a6d4:	bl	17abc <__assert_fail@plt+0x65a4>
   1a6d8:	ldr	r0, [fp, #12]
   1a6dc:	str	r4, [r0]
   1a6e0:	b	1a680 <__assert_fail@plt+0x9168>
   1a6e4:	push	{fp, lr}
   1a6e8:	mov	fp, sp
   1a6ec:	ldr	ip, [r1, #40]	; 0x28
   1a6f0:	ldr	r3, [r1, #56]	; 0x38
   1a6f4:	cmp	r3, ip
   1a6f8:	ble	1a774 <__assert_fail@plt+0x925c>
   1a6fc:	ldr	r3, [r1, #4]
   1a700:	ldrb	lr, [r3, ip]
   1a704:	strb	lr, [r0]
   1a708:	ldr	r3, [r1, #80]	; 0x50
   1a70c:	cmp	r3, #2
   1a710:	blt	1a734 <__assert_fail@plt+0x921c>
   1a714:	ldr	r3, [r1, #28]
   1a718:	ldr	ip, [r1, #40]	; 0x28
   1a71c:	cmp	ip, r3
   1a720:	beq	1a734 <__assert_fail@plt+0x921c>
   1a724:	ldr	r3, [r1, #8]
   1a728:	ldr	r3, [r3, ip, lsl #2]
   1a72c:	cmn	r3, #1
   1a730:	beq	1a81c <__assert_fail@plt+0x9304>
   1a734:	tst	r2, #1
   1a738:	beq	1a784 <__assert_fail@plt+0x926c>
   1a73c:	cmp	lr, #92	; 0x5c
   1a740:	bne	1a784 <__assert_fail@plt+0x926c>
   1a744:	ldr	r2, [r1, #40]	; 0x28
   1a748:	ldr	r3, [r1, #48]	; 0x30
   1a74c:	add	r2, r2, #1
   1a750:	cmp	r2, r3
   1a754:	bge	1a81c <__assert_fail@plt+0x9304>
   1a758:	str	r2, [r1, #40]	; 0x28
   1a75c:	ldr	r1, [r1, #4]
   1a760:	ldrb	r2, [r1, r2]
   1a764:	mov	r1, #1
   1a768:	strb	r1, [r0, #4]
   1a76c:	strb	r2, [r0]
   1a770:	b	1a824 <__assert_fail@plt+0x930c>
   1a774:	mov	r1, #2
   1a778:	strb	r1, [r0, #4]
   1a77c:	mov	r1, #0
   1a780:	b	1a824 <__assert_fail@plt+0x930c>
   1a784:	cmp	lr, #92	; 0x5c
   1a788:	bgt	1a7dc <__assert_fail@plt+0x92c4>
   1a78c:	cmp	lr, #45	; 0x2d
   1a790:	beq	1a7f4 <__assert_fail@plt+0x92dc>
   1a794:	cmp	lr, #91	; 0x5b
   1a798:	bne	1a81c <__assert_fail@plt+0x9304>
   1a79c:	ldr	r3, [r1, #40]	; 0x28
   1a7a0:	ldr	ip, [r1, #48]	; 0x30
   1a7a4:	add	r3, r3, #1
   1a7a8:	cmp	r3, ip
   1a7ac:	bge	1a80c <__assert_fail@plt+0x92f4>
   1a7b0:	ldr	r1, [r1, #4]
   1a7b4:	ldrb	r1, [r1, r3]
   1a7b8:	cmp	r1, #61	; 0x3d
   1a7bc:	strb	r1, [r0]
   1a7c0:	beq	1a82c <__assert_fail@plt+0x9314>
   1a7c4:	cmp	r1, #58	; 0x3a
   1a7c8:	beq	1a834 <__assert_fail@plt+0x931c>
   1a7cc:	cmp	r1, #46	; 0x2e
   1a7d0:	bne	1a814 <__assert_fail@plt+0x92fc>
   1a7d4:	mov	r1, #26
   1a7d8:	b	1a840 <__assert_fail@plt+0x9328>
   1a7dc:	cmp	lr, #93	; 0x5d
   1a7e0:	beq	1a7fc <__assert_fail@plt+0x92e4>
   1a7e4:	cmp	lr, #94	; 0x5e
   1a7e8:	bne	1a81c <__assert_fail@plt+0x9304>
   1a7ec:	mov	r1, #25
   1a7f0:	b	1a800 <__assert_fail@plt+0x92e8>
   1a7f4:	mov	r1, #22
   1a7f8:	b	1a800 <__assert_fail@plt+0x92e8>
   1a7fc:	mov	r1, #21
   1a800:	strb	r1, [r0, #4]
   1a804:	mov	r1, #1
   1a808:	b	1a824 <__assert_fail@plt+0x930c>
   1a80c:	mov	r1, #0
   1a810:	strb	r1, [r0]
   1a814:	mov	r1, #91	; 0x5b
   1a818:	strb	r1, [r0]
   1a81c:	mov	r1, #1
   1a820:	strb	r1, [r0, #4]
   1a824:	mov	r0, r1
   1a828:	pop	{fp, pc}
   1a82c:	mov	r1, #28
   1a830:	b	1a840 <__assert_fail@plt+0x9328>
   1a834:	tst	r2, #4
   1a838:	beq	1a814 <__assert_fail@plt+0x92fc>
   1a83c:	mov	r1, #30
   1a840:	strb	r1, [r0, #4]
   1a844:	mov	r1, #2
   1a848:	b	1a824 <__assert_fail@plt+0x930c>
   1a84c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a850:	add	fp, sp, #24
   1a854:	sub	sp, sp, #8
   1a858:	mov	r5, r2
   1a85c:	ldr	r2, [r1, #80]	; 0x50
   1a860:	mov	r9, r0
   1a864:	ldr	r0, [r1, #40]	; 0x28
   1a868:	cmp	r2, #1
   1a86c:	beq	1a8d8 <__assert_fail@plt+0x93c0>
   1a870:	ldr	r4, [r1, #28]
   1a874:	add	r2, r0, #1
   1a878:	cmp	r2, r4
   1a87c:	bge	1a8d8 <__assert_fail@plt+0x93c0>
   1a880:	ldr	ip, [r1, #8]
   1a884:	mov	r2, #1
   1a888:	add	r6, ip, r0, lsl #2
   1a88c:	ldr	r7, [r6, r2, lsl #2]
   1a890:	cmn	r7, #1
   1a894:	bne	1a8ac <__assert_fail@plt+0x9394>
   1a898:	add	r2, r2, #1
   1a89c:	add	r7, r0, r2
   1a8a0:	cmp	r7, r4
   1a8a4:	blt	1a88c <__assert_fail@plt+0x9374>
   1a8a8:	b	1a8b4 <__assert_fail@plt+0x939c>
   1a8ac:	cmp	r2, #2
   1a8b0:	bcc	1a8d8 <__assert_fail@plt+0x93c0>
   1a8b4:	mov	r3, #1
   1a8b8:	str	r3, [r9]
   1a8bc:	ldr	r0, [ip, r0, lsl #2]
   1a8c0:	str	r0, [r9, #4]
   1a8c4:	ldr	r0, [r1, #40]	; 0x28
   1a8c8:	add	r0, r0, r2
   1a8cc:	str	r0, [r1, #40]	; 0x28
   1a8d0:	mov	r0, #0
   1a8d4:	b	1aafc <__assert_fail@plt+0x95e4>
   1a8d8:	add	r2, r0, r3
   1a8dc:	str	r2, [r1, #40]	; 0x28
   1a8e0:	ldrb	r6, [r5, #4]
   1a8e4:	sub	r0, r6, #22
   1a8e8:	cmp	r0, #8
   1a8ec:	bhi	1aaec <__assert_fail@plt+0x95d4>
   1a8f0:	add	r3, pc, #0
   1a8f4:	ldr	pc, [r3, r0, lsl #2]
   1a8f8:	andeq	sl, r1, r4, asr #21
   1a8fc:	andeq	sl, r1, ip, ror #21
   1a900:	andeq	sl, r1, ip, ror #21
   1a904:	andeq	sl, r1, ip, ror #21
   1a908:	andeq	sl, r1, ip, lsl r9
   1a90c:	andeq	sl, r1, ip, ror #21
   1a910:	andeq	sl, r1, ip, lsl r9
   1a914:	andeq	sl, r1, ip, ror #21
   1a918:	andeq	sl, r1, ip, lsl r9
   1a91c:	ldr	r3, [r1, #56]	; 0x38
   1a920:	mov	r0, #7
   1a924:	cmp	r3, r2
   1a928:	ble	1aafc <__assert_fail@plt+0x95e4>
   1a92c:	ldrb	r3, [r5]
   1a930:	mov	r2, #0
   1a934:	uxtb	r7, r6
   1a938:	cmp	r7, #30
   1a93c:	bne	1a94c <__assert_fail@plt+0x9434>
   1a940:	ldrb	r7, [r1, #75]	; 0x4b
   1a944:	cmp	r7, #0
   1a948:	bne	1a9a4 <__assert_fail@plt+0x948c>
   1a94c:	ldr	r4, [r1, #40]	; 0x28
   1a950:	ldr	r7, [r1, #4]
   1a954:	add	r6, r4, #1
   1a958:	str	r6, [r1, #40]	; 0x28
   1a95c:	ldrb	r4, [r7, r4]
   1a960:	ldr	r7, [r1, #56]	; 0x38
   1a964:	cmp	r7, r6
   1a968:	ble	1aafc <__assert_fail@plt+0x95e4>
   1a96c:	uxtb	r7, r4
   1a970:	cmp	r7, r3
   1a974:	bne	1a988 <__assert_fail@plt+0x9470>
   1a978:	ldr	r7, [r1, #4]
   1a97c:	ldrb	r7, [r7, r6]
   1a980:	cmp	r7, #93	; 0x5d
   1a984:	beq	1aa78 <__assert_fail@plt+0x9560>
   1a988:	ldr	r7, [r9, #4]
   1a98c:	cmp	r2, #30
   1a990:	strb	r4, [r7, r2]
   1a994:	bhi	1aafc <__assert_fail@plt+0x95e4>
   1a998:	ldrb	r6, [r5, #4]
   1a99c:	add	r2, r2, #1
   1a9a0:	b	1a934 <__assert_fail@plt+0x941c>
   1a9a4:	ldrb	r7, [r1, #76]	; 0x4c
   1a9a8:	cmp	r7, #0
   1a9ac:	beq	1aa44 <__assert_fail@plt+0x952c>
   1a9b0:	ldr	lr, [r1, #28]
   1a9b4:	ldr	ip, [r1, #40]	; 0x28
   1a9b8:	cmp	ip, lr
   1a9bc:	beq	1a9d0 <__assert_fail@plt+0x94b8>
   1a9c0:	ldr	r4, [r1, #8]
   1a9c4:	ldr	r4, [r4, ip, lsl #2]
   1a9c8:	cmn	r4, #1
   1a9cc:	beq	1aa64 <__assert_fail@plt+0x954c>
   1a9d0:	ldr	r6, [r1, #12]
   1a9d4:	ldr	r7, [r1, #24]
   1a9d8:	ldr	r4, [r1]
   1a9dc:	ldr	r6, [r6, ip, lsl #2]
   1a9e0:	add	r6, r7, r6
   1a9e4:	add	r4, r4, r6
   1a9e8:	ldrsb	r4, [r4]
   1a9ec:	cmn	r4, #1
   1a9f0:	ble	1aa64 <__assert_fail@plt+0x954c>
   1a9f4:	ldr	r7, [r1, #80]	; 0x50
   1a9f8:	mov	r6, #1
   1a9fc:	cmp	r7, #1
   1aa00:	beq	1aa38 <__assert_fail@plt+0x9520>
   1aa04:	add	r7, ip, #1
   1aa08:	cmp	r7, lr
   1aa0c:	bge	1aa38 <__assert_fail@plt+0x9520>
   1aa10:	ldr	r6, [r1, #8]
   1aa14:	add	r8, r6, ip, lsl #2
   1aa18:	mov	r6, #1
   1aa1c:	ldr	r7, [r8, r6, lsl #2]
   1aa20:	cmn	r7, #1
   1aa24:	bne	1aa38 <__assert_fail@plt+0x9520>
   1aa28:	add	r6, r6, #1
   1aa2c:	add	r7, ip, r6
   1aa30:	cmp	r7, lr
   1aa34:	blt	1aa1c <__assert_fail@plt+0x9504>
   1aa38:	add	r6, r6, ip
   1aa3c:	str	r6, [r1, #40]	; 0x28
   1aa40:	b	1a960 <__assert_fail@plt+0x9448>
   1aa44:	ldr	r7, [r1, #40]	; 0x28
   1aa48:	ldr	r4, [r1, #24]
   1aa4c:	ldr	ip, [r1]
   1aa50:	add	r6, r7, #1
   1aa54:	add	r7, r7, r4
   1aa58:	str	r6, [r1, #40]	; 0x28
   1aa5c:	ldrb	r4, [ip, r7]
   1aa60:	b	1a960 <__assert_fail@plt+0x9448>
   1aa64:	add	r6, ip, #1
   1aa68:	str	r6, [r1, #40]	; 0x28
   1aa6c:	ldr	r7, [r1, #4]
   1aa70:	ldrb	r4, [r7, ip]
   1aa74:	b	1a960 <__assert_fail@plt+0x9448>
   1aa78:	add	r0, r6, #1
   1aa7c:	str	r0, [r1, #40]	; 0x28
   1aa80:	mov	r0, #0
   1aa84:	ldr	r1, [r9, #4]
   1aa88:	strb	r0, [r1, r2]
   1aa8c:	ldrb	r1, [r5, #4]
   1aa90:	cmp	r1, #30
   1aa94:	beq	1aab0 <__assert_fail@plt+0x9598>
   1aa98:	cmp	r1, #28
   1aa9c:	beq	1aab8 <__assert_fail@plt+0x95a0>
   1aaa0:	cmp	r1, #26
   1aaa4:	moveq	r1, #3
   1aaa8:	streq	r1, [r9]
   1aaac:	b	1aafc <__assert_fail@plt+0x95e4>
   1aab0:	mov	r1, #4
   1aab4:	b	1aabc <__assert_fail@plt+0x95a4>
   1aab8:	mov	r1, #2
   1aabc:	str	r1, [r9]
   1aac0:	b	1aafc <__assert_fail@plt+0x95e4>
   1aac4:	ldr	r0, [fp, #12]
   1aac8:	cmp	r0, #0
   1aacc:	bne	1aaec <__assert_fail@plt+0x95d4>
   1aad0:	ldr	r2, [fp, #8]
   1aad4:	mov	r0, sp
   1aad8:	bl	1a6e4 <__assert_fail@plt+0x91cc>
   1aadc:	ldrb	r1, [sp, #4]
   1aae0:	mov	r0, #11
   1aae4:	cmp	r1, #21
   1aae8:	bne	1aafc <__assert_fail@plt+0x95e4>
   1aaec:	mov	r0, #0
   1aaf0:	str	r0, [r9]
   1aaf4:	ldrb	r1, [r5]
   1aaf8:	strb	r1, [r9, #4]
   1aafc:	sub	sp, fp, #24
   1ab00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ab04:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ab08:	add	fp, sp, #24
   1ab0c:	mov	r8, r0
   1ab10:	ldrb	r0, [fp, #14]
   1ab14:	ldr	r6, [fp, #8]
   1ab18:	mov	r5, r3
   1ab1c:	mov	r7, r2
   1ab20:	mov	r4, r1
   1ab24:	tst	r0, #64	; 0x40
   1ab28:	beq	1ab64 <__assert_fail@plt+0x964c>
   1ab2c:	movw	r1, #14210	; 0x3782
   1ab30:	mov	r0, r6
   1ab34:	movt	r1, #2
   1ab38:	bl	11248 <strcmp@plt>
   1ab3c:	cmp	r0, #0
   1ab40:	beq	1ab5c <__assert_fail@plt+0x9644>
   1ab44:	movw	r1, #14216	; 0x3788
   1ab48:	mov	r0, r6
   1ab4c:	movt	r1, #2
   1ab50:	bl	11248 <strcmp@plt>
   1ab54:	cmp	r0, #0
   1ab58:	bne	1ab64 <__assert_fail@plt+0x964c>
   1ab5c:	movw	r6, #14222	; 0x378e
   1ab60:	movt	r6, #2
   1ab64:	ldr	r0, [r5]
   1ab68:	ldr	r1, [r7, #36]	; 0x24
   1ab6c:	cmp	r0, r1
   1ab70:	beq	1b064 <__assert_fail@plt+0x9b4c>
   1ab74:	mov	r0, r6
   1ab78:	bl	11218 <wctype@plt>
   1ab7c:	ldr	r2, [r7, #36]	; 0x24
   1ab80:	ldr	r1, [r7, #12]
   1ab84:	add	r3, r2, #1
   1ab88:	str	r3, [r7, #36]	; 0x24
   1ab8c:	str	r0, [r1, r2, lsl #2]
   1ab90:	movw	r1, #14198	; 0x3776
   1ab94:	mov	r0, r6
   1ab98:	movt	r1, #2
   1ab9c:	bl	11248 <strcmp@plt>
   1aba0:	cmp	r0, #0
   1aba4:	beq	1ad08 <__assert_fail@plt+0x97f0>
   1aba8:	movw	r1, #14228	; 0x3794
   1abac:	mov	r0, r6
   1abb0:	movt	r1, #2
   1abb4:	bl	11248 <strcmp@plt>
   1abb8:	cmp	r0, #0
   1abbc:	beq	1ad54 <__assert_fail@plt+0x983c>
   1abc0:	movw	r1, #14216	; 0x3788
   1abc4:	mov	r0, r6
   1abc8:	movt	r1, #2
   1abcc:	bl	11248 <strcmp@plt>
   1abd0:	cmp	r0, #0
   1abd4:	beq	1ada0 <__assert_fail@plt+0x9888>
   1abd8:	movw	r1, #14204	; 0x377c
   1abdc:	mov	r0, r6
   1abe0:	movt	r1, #2
   1abe4:	bl	11248 <strcmp@plt>
   1abe8:	cmp	r0, #0
   1abec:	beq	1adec <__assert_fail@plt+0x98d4>
   1abf0:	movw	r1, #14222	; 0x378e
   1abf4:	mov	r0, r6
   1abf8:	movt	r1, #2
   1abfc:	bl	11248 <strcmp@plt>
   1ac00:	cmp	r0, #0
   1ac04:	beq	1ae38 <__assert_fail@plt+0x9920>
   1ac08:	movw	r1, #14259	; 0x37b3
   1ac0c:	mov	r0, r6
   1ac10:	movt	r1, #2
   1ac14:	bl	11248 <strcmp@plt>
   1ac18:	cmp	r0, #0
   1ac1c:	beq	1ae84 <__assert_fail@plt+0x996c>
   1ac20:	movw	r1, #14234	; 0x379a
   1ac24:	mov	r0, r6
   1ac28:	movt	r1, #2
   1ac2c:	bl	11248 <strcmp@plt>
   1ac30:	cmp	r0, #0
   1ac34:	beq	1aed4 <__assert_fail@plt+0x99bc>
   1ac38:	movw	r1, #14210	; 0x3782
   1ac3c:	mov	r0, r6
   1ac40:	movt	r1, #2
   1ac44:	bl	11248 <strcmp@plt>
   1ac48:	cmp	r0, #0
   1ac4c:	beq	1af24 <__assert_fail@plt+0x9a0c>
   1ac50:	movw	r1, #14240	; 0x37a0
   1ac54:	mov	r0, r6
   1ac58:	movt	r1, #2
   1ac5c:	bl	11248 <strcmp@plt>
   1ac60:	cmp	r0, #0
   1ac64:	beq	1af74 <__assert_fail@plt+0x9a5c>
   1ac68:	movw	r1, #14246	; 0x37a6
   1ac6c:	mov	r0, r6
   1ac70:	movt	r1, #2
   1ac74:	bl	11248 <strcmp@plt>
   1ac78:	cmp	r0, #0
   1ac7c:	beq	1afc4 <__assert_fail@plt+0x9aac>
   1ac80:	movw	r1, #14252	; 0x37ac
   1ac84:	mov	r0, r6
   1ac88:	movt	r1, #2
   1ac8c:	bl	11248 <strcmp@plt>
   1ac90:	cmp	r0, #0
   1ac94:	beq	1b014 <__assert_fail@plt+0x9afc>
   1ac98:	movw	r1, #14258	; 0x37b2
   1ac9c:	mov	r0, r6
   1aca0:	movt	r1, #2
   1aca4:	bl	11248 <strcmp@plt>
   1aca8:	mov	r1, r0
   1acac:	mov	r0, #4
   1acb0:	cmp	r1, #0
   1acb4:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1acb8:	bl	113c8 <__ctype_b_loc@plt>
   1acbc:	ldr	r1, [r0]
   1acc0:	mov	r2, #0
   1acc4:	mov	r3, #1
   1acc8:	cmp	r8, #0
   1accc:	bne	1b1cc <__assert_fail@plt+0x9cb4>
   1acd0:	ldrb	r0, [r1, #1]
   1acd4:	tst	r0, #16
   1acd8:	beq	1acf0 <__assert_fail@plt+0x97d8>
   1acdc:	ubfx	r0, r2, #5, #3
   1ace0:	and	r6, r2, #31
   1ace4:	ldr	r7, [r4, r0, lsl #2]
   1ace8:	orr	r7, r7, r3, lsl r6
   1acec:	str	r7, [r4, r0, lsl #2]
   1acf0:	add	r2, r2, #1
   1acf4:	add	r1, r1, #2
   1acf8:	mov	r0, #0
   1acfc:	cmp	r2, #256	; 0x100
   1ad00:	bne	1acd0 <__assert_fail@plt+0x97b8>
   1ad04:	b	1b060 <__assert_fail@plt+0x9b48>
   1ad08:	bl	113c8 <__ctype_b_loc@plt>
   1ad0c:	ldr	r1, [r0]
   1ad10:	cmp	r8, #0
   1ad14:	bne	1b108 <__assert_fail@plt+0x9bf0>
   1ad18:	mov	r0, #0
   1ad1c:	mov	r2, #1
   1ad20:	ldrb	r3, [r1]
   1ad24:	tst	r3, #8
   1ad28:	beq	1ad40 <__assert_fail@plt+0x9828>
   1ad2c:	ubfx	r3, r0, #5, #3
   1ad30:	and	r6, r0, #31
   1ad34:	ldr	r7, [r4, r3, lsl #2]
   1ad38:	orr	r7, r7, r2, lsl r6
   1ad3c:	str	r7, [r4, r3, lsl #2]
   1ad40:	add	r0, r0, #1
   1ad44:	add	r1, r1, #2
   1ad48:	cmp	r0, #256	; 0x100
   1ad4c:	bne	1ad20 <__assert_fail@plt+0x9808>
   1ad50:	b	1aecc <__assert_fail@plt+0x99b4>
   1ad54:	bl	113c8 <__ctype_b_loc@plt>
   1ad58:	ldr	r1, [r0]
   1ad5c:	cmp	r8, #0
   1ad60:	bne	1b188 <__assert_fail@plt+0x9c70>
   1ad64:	mov	r0, #0
   1ad68:	mov	r2, #1
   1ad6c:	ldrb	r3, [r1]
   1ad70:	tst	r3, #2
   1ad74:	beq	1ad8c <__assert_fail@plt+0x9874>
   1ad78:	ubfx	r3, r0, #5, #3
   1ad7c:	and	r6, r0, #31
   1ad80:	ldr	r7, [r4, r3, lsl #2]
   1ad84:	orr	r7, r7, r2, lsl r6
   1ad88:	str	r7, [r4, r3, lsl #2]
   1ad8c:	add	r0, r0, #1
   1ad90:	add	r1, r1, #2
   1ad94:	cmp	r0, #256	; 0x100
   1ad98:	bne	1ad6c <__assert_fail@plt+0x9854>
   1ad9c:	b	1aecc <__assert_fail@plt+0x99b4>
   1ada0:	bl	113c8 <__ctype_b_loc@plt>
   1ada4:	ldr	r1, [r0]
   1ada8:	cmp	r8, #0
   1adac:	bne	1b244 <__assert_fail@plt+0x9d2c>
   1adb0:	mov	r0, #0
   1adb4:	mov	r2, #1
   1adb8:	ldrb	r3, [r1, #1]
   1adbc:	tst	r3, #2
   1adc0:	beq	1add8 <__assert_fail@plt+0x98c0>
   1adc4:	ubfx	r3, r0, #5, #3
   1adc8:	and	r6, r0, #31
   1adcc:	ldr	r7, [r4, r3, lsl #2]
   1add0:	orr	r7, r7, r2, lsl r6
   1add4:	str	r7, [r4, r3, lsl #2]
   1add8:	add	r0, r0, #1
   1addc:	add	r1, r1, #2
   1ade0:	cmp	r0, #256	; 0x100
   1ade4:	bne	1adb8 <__assert_fail@plt+0x98a0>
   1ade8:	b	1aecc <__assert_fail@plt+0x99b4>
   1adec:	bl	113c8 <__ctype_b_loc@plt>
   1adf0:	ldr	r1, [r0]
   1adf4:	cmp	r8, #0
   1adf8:	bne	1b2c4 <__assert_fail@plt+0x9dac>
   1adfc:	mov	r0, #0
   1ae00:	mov	r2, #1
   1ae04:	ldrb	r3, [r1, #1]
   1ae08:	tst	r3, #32
   1ae0c:	beq	1ae24 <__assert_fail@plt+0x990c>
   1ae10:	ubfx	r3, r0, #5, #3
   1ae14:	and	r6, r0, #31
   1ae18:	ldr	r7, [r4, r3, lsl #2]
   1ae1c:	orr	r7, r7, r2, lsl r6
   1ae20:	str	r7, [r4, r3, lsl #2]
   1ae24:	add	r0, r0, #1
   1ae28:	add	r1, r1, #2
   1ae2c:	cmp	r0, #256	; 0x100
   1ae30:	bne	1ae04 <__assert_fail@plt+0x98ec>
   1ae34:	b	1aecc <__assert_fail@plt+0x99b4>
   1ae38:	bl	113c8 <__ctype_b_loc@plt>
   1ae3c:	ldr	r1, [r0]
   1ae40:	cmp	r8, #0
   1ae44:	bne	1b308 <__assert_fail@plt+0x9df0>
   1ae48:	mov	r0, #0
   1ae4c:	mov	r2, #1
   1ae50:	ldrb	r3, [r1, #1]
   1ae54:	tst	r3, #4
   1ae58:	beq	1ae70 <__assert_fail@plt+0x9958>
   1ae5c:	ubfx	r3, r0, #5, #3
   1ae60:	and	r6, r0, #31
   1ae64:	ldr	r7, [r4, r3, lsl #2]
   1ae68:	orr	r7, r7, r2, lsl r6
   1ae6c:	str	r7, [r4, r3, lsl #2]
   1ae70:	add	r0, r0, #1
   1ae74:	add	r1, r1, #2
   1ae78:	cmp	r0, #256	; 0x100
   1ae7c:	bne	1ae50 <__assert_fail@plt+0x9938>
   1ae80:	b	1aecc <__assert_fail@plt+0x99b4>
   1ae84:	bl	113c8 <__ctype_b_loc@plt>
   1ae88:	ldr	r1, [r0]
   1ae8c:	cmp	r8, #0
   1ae90:	bne	1b34c <__assert_fail@plt+0x9e34>
   1ae94:	mov	r0, #0
   1ae98:	mov	r2, #1
   1ae9c:	ldrb	r3, [r1, #1]
   1aea0:	tst	r3, #8
   1aea4:	beq	1aebc <__assert_fail@plt+0x99a4>
   1aea8:	ubfx	r3, r0, #5, #3
   1aeac:	and	r6, r0, #31
   1aeb0:	ldr	r7, [r4, r3, lsl #2]
   1aeb4:	orr	r7, r7, r2, lsl r6
   1aeb8:	str	r7, [r4, r3, lsl #2]
   1aebc:	add	r0, r0, #1
   1aec0:	add	r1, r1, #2
   1aec4:	cmp	r0, #256	; 0x100
   1aec8:	bne	1ae9c <__assert_fail@plt+0x9984>
   1aecc:	mov	r0, #0
   1aed0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1aed4:	bl	113c8 <__ctype_b_loc@plt>
   1aed8:	ldr	r1, [r0]
   1aedc:	mov	r2, #0
   1aee0:	mov	r3, #1
   1aee4:	cmp	r8, #0
   1aee8:	bne	1b090 <__assert_fail@plt+0x9b78>
   1aeec:	ldrb	r0, [r1, #1]
   1aef0:	tst	r0, #64	; 0x40
   1aef4:	beq	1af0c <__assert_fail@plt+0x99f4>
   1aef8:	ubfx	r0, r2, #5, #3
   1aefc:	and	r6, r2, #31
   1af00:	ldr	r7, [r4, r0, lsl #2]
   1af04:	orr	r7, r7, r3, lsl r6
   1af08:	str	r7, [r4, r0, lsl #2]
   1af0c:	add	r2, r2, #1
   1af10:	add	r1, r1, #2
   1af14:	mov	r0, #0
   1af18:	cmp	r2, #256	; 0x100
   1af1c:	bne	1aeec <__assert_fail@plt+0x99d4>
   1af20:	b	1b060 <__assert_fail@plt+0x9b48>
   1af24:	bl	113c8 <__ctype_b_loc@plt>
   1af28:	ldr	r1, [r0]
   1af2c:	mov	r2, #0
   1af30:	mov	r3, #1
   1af34:	cmp	r8, #0
   1af38:	bne	1b0cc <__assert_fail@plt+0x9bb4>
   1af3c:	ldrb	r0, [r1, #1]
   1af40:	tst	r0, #1
   1af44:	beq	1af5c <__assert_fail@plt+0x9a44>
   1af48:	ubfx	r0, r2, #5, #3
   1af4c:	and	r6, r2, #31
   1af50:	ldr	r7, [r4, r0, lsl #2]
   1af54:	orr	r7, r7, r3, lsl r6
   1af58:	str	r7, [r4, r0, lsl #2]
   1af5c:	add	r2, r2, #1
   1af60:	add	r1, r1, #2
   1af64:	mov	r0, #0
   1af68:	cmp	r2, #256	; 0x100
   1af6c:	bne	1af3c <__assert_fail@plt+0x9a24>
   1af70:	b	1b060 <__assert_fail@plt+0x9b48>
   1af74:	bl	113c8 <__ctype_b_loc@plt>
   1af78:	ldr	r1, [r0]
   1af7c:	mov	r2, #0
   1af80:	mov	r3, #1
   1af84:	cmp	r8, #0
   1af88:	bne	1b14c <__assert_fail@plt+0x9c34>
   1af8c:	ldrb	r0, [r1]
   1af90:	tst	r0, #1
   1af94:	beq	1afac <__assert_fail@plt+0x9a94>
   1af98:	ubfx	r0, r2, #5, #3
   1af9c:	and	r6, r2, #31
   1afa0:	ldr	r7, [r4, r0, lsl #2]
   1afa4:	orr	r7, r7, r3, lsl r6
   1afa8:	str	r7, [r4, r0, lsl #2]
   1afac:	add	r2, r2, #1
   1afb0:	add	r1, r1, #2
   1afb4:	mov	r0, #0
   1afb8:	cmp	r2, #256	; 0x100
   1afbc:	bne	1af8c <__assert_fail@plt+0x9a74>
   1afc0:	b	1b060 <__assert_fail@plt+0x9b48>
   1afc4:	bl	113c8 <__ctype_b_loc@plt>
   1afc8:	ldr	r1, [r0]
   1afcc:	mov	r2, #0
   1afd0:	mov	r3, #1
   1afd4:	cmp	r8, #0
   1afd8:	bne	1b208 <__assert_fail@plt+0x9cf0>
   1afdc:	ldrsh	r0, [r1]
   1afe0:	cmn	r0, #1
   1afe4:	bgt	1affc <__assert_fail@plt+0x9ae4>
   1afe8:	ubfx	r0, r2, #5, #3
   1afec:	and	r6, r2, #31
   1aff0:	ldr	r7, [r4, r0, lsl #2]
   1aff4:	orr	r7, r7, r3, lsl r6
   1aff8:	str	r7, [r4, r0, lsl #2]
   1affc:	add	r2, r2, #1
   1b000:	add	r1, r1, #2
   1b004:	mov	r0, #0
   1b008:	cmp	r2, #256	; 0x100
   1b00c:	bne	1afdc <__assert_fail@plt+0x9ac4>
   1b010:	b	1b060 <__assert_fail@plt+0x9b48>
   1b014:	bl	113c8 <__ctype_b_loc@plt>
   1b018:	ldr	r1, [r0]
   1b01c:	mov	r2, #0
   1b020:	mov	r3, #1
   1b024:	cmp	r8, #0
   1b028:	bne	1b288 <__assert_fail@plt+0x9d70>
   1b02c:	ldrb	r0, [r1]
   1b030:	tst	r0, #4
   1b034:	beq	1b04c <__assert_fail@plt+0x9b34>
   1b038:	ubfx	r0, r2, #5, #3
   1b03c:	and	r6, r2, #31
   1b040:	ldr	r7, [r4, r0, lsl #2]
   1b044:	orr	r7, r7, r3, lsl r6
   1b048:	str	r7, [r4, r0, lsl #2]
   1b04c:	add	r2, r2, #1
   1b050:	add	r1, r1, #2
   1b054:	mov	r0, #0
   1b058:	cmp	r2, #256	; 0x100
   1b05c:	bne	1b02c <__assert_fail@plt+0x9b14>
   1b060:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b064:	mov	r1, #1
   1b068:	orr	r9, r1, r0, lsl #1
   1b06c:	ldr	r0, [r7, #12]
   1b070:	lsl	r1, r9, #2
   1b074:	bl	22250 <__assert_fail@plt+0x10d38>
   1b078:	cmp	r0, #0
   1b07c:	moveq	r0, #12
   1b080:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b084:	str	r0, [r7, #12]
   1b088:	str	r9, [r5]
   1b08c:	b	1ab74 <__assert_fail@plt+0x965c>
   1b090:	ldrb	r0, [r1, #1]
   1b094:	tst	r0, #64	; 0x40
   1b098:	beq	1b0b4 <__assert_fail@plt+0x9b9c>
   1b09c:	ldrb	r0, [r8, r2]
   1b0a0:	ubfx	r7, r0, #5, #3
   1b0a4:	and	r0, r0, #31
   1b0a8:	ldr	r6, [r4, r7, lsl #2]
   1b0ac:	orr	r0, r6, r3, lsl r0
   1b0b0:	str	r0, [r4, r7, lsl #2]
   1b0b4:	add	r2, r2, #1
   1b0b8:	add	r1, r1, #2
   1b0bc:	mov	r0, #0
   1b0c0:	cmp	r2, #256	; 0x100
   1b0c4:	bne	1b090 <__assert_fail@plt+0x9b78>
   1b0c8:	b	1b060 <__assert_fail@plt+0x9b48>
   1b0cc:	ldrb	r0, [r1, #1]
   1b0d0:	tst	r0, #1
   1b0d4:	beq	1b0f0 <__assert_fail@plt+0x9bd8>
   1b0d8:	ldrb	r0, [r8, r2]
   1b0dc:	ubfx	r7, r0, #5, #3
   1b0e0:	and	r0, r0, #31
   1b0e4:	ldr	r6, [r4, r7, lsl #2]
   1b0e8:	orr	r0, r6, r3, lsl r0
   1b0ec:	str	r0, [r4, r7, lsl #2]
   1b0f0:	add	r2, r2, #1
   1b0f4:	add	r1, r1, #2
   1b0f8:	mov	r0, #0
   1b0fc:	cmp	r2, #256	; 0x100
   1b100:	bne	1b0cc <__assert_fail@plt+0x9bb4>
   1b104:	b	1b060 <__assert_fail@plt+0x9b48>
   1b108:	mov	r2, #0
   1b10c:	mov	r3, #1
   1b110:	ldrb	r0, [r1]
   1b114:	tst	r0, #8
   1b118:	beq	1b134 <__assert_fail@plt+0x9c1c>
   1b11c:	ldrb	r0, [r8, r2]
   1b120:	ubfx	r7, r0, #5, #3
   1b124:	and	r0, r0, #31
   1b128:	ldr	r6, [r4, r7, lsl #2]
   1b12c:	orr	r0, r6, r3, lsl r0
   1b130:	str	r0, [r4, r7, lsl #2]
   1b134:	add	r2, r2, #1
   1b138:	add	r1, r1, #2
   1b13c:	mov	r0, #0
   1b140:	cmp	r2, #256	; 0x100
   1b144:	bne	1b110 <__assert_fail@plt+0x9bf8>
   1b148:	b	1b060 <__assert_fail@plt+0x9b48>
   1b14c:	ldrb	r0, [r1]
   1b150:	tst	r0, #1
   1b154:	beq	1b170 <__assert_fail@plt+0x9c58>
   1b158:	ldrb	r0, [r8, r2]
   1b15c:	ubfx	r7, r0, #5, #3
   1b160:	and	r0, r0, #31
   1b164:	ldr	r6, [r4, r7, lsl #2]
   1b168:	orr	r0, r6, r3, lsl r0
   1b16c:	str	r0, [r4, r7, lsl #2]
   1b170:	add	r2, r2, #1
   1b174:	add	r1, r1, #2
   1b178:	mov	r0, #0
   1b17c:	cmp	r2, #256	; 0x100
   1b180:	bne	1b14c <__assert_fail@plt+0x9c34>
   1b184:	b	1b060 <__assert_fail@plt+0x9b48>
   1b188:	mov	r2, #0
   1b18c:	mov	r3, #1
   1b190:	ldrb	r0, [r1]
   1b194:	tst	r0, #2
   1b198:	beq	1b1b4 <__assert_fail@plt+0x9c9c>
   1b19c:	ldrb	r0, [r8, r2]
   1b1a0:	ubfx	r7, r0, #5, #3
   1b1a4:	and	r0, r0, #31
   1b1a8:	ldr	r6, [r4, r7, lsl #2]
   1b1ac:	orr	r0, r6, r3, lsl r0
   1b1b0:	str	r0, [r4, r7, lsl #2]
   1b1b4:	add	r2, r2, #1
   1b1b8:	add	r1, r1, #2
   1b1bc:	mov	r0, #0
   1b1c0:	cmp	r2, #256	; 0x100
   1b1c4:	bne	1b190 <__assert_fail@plt+0x9c78>
   1b1c8:	b	1b060 <__assert_fail@plt+0x9b48>
   1b1cc:	ldrb	r0, [r1, #1]
   1b1d0:	tst	r0, #16
   1b1d4:	beq	1b1f0 <__assert_fail@plt+0x9cd8>
   1b1d8:	ldrb	r0, [r8, r2]
   1b1dc:	ubfx	r7, r0, #5, #3
   1b1e0:	and	r0, r0, #31
   1b1e4:	ldr	r6, [r4, r7, lsl #2]
   1b1e8:	orr	r0, r6, r3, lsl r0
   1b1ec:	str	r0, [r4, r7, lsl #2]
   1b1f0:	add	r2, r2, #1
   1b1f4:	add	r1, r1, #2
   1b1f8:	mov	r0, #0
   1b1fc:	cmp	r2, #256	; 0x100
   1b200:	bne	1b1cc <__assert_fail@plt+0x9cb4>
   1b204:	b	1b060 <__assert_fail@plt+0x9b48>
   1b208:	ldrsh	r0, [r1]
   1b20c:	cmn	r0, #1
   1b210:	bgt	1b22c <__assert_fail@plt+0x9d14>
   1b214:	ldrb	r0, [r8, r2]
   1b218:	ubfx	r7, r0, #5, #3
   1b21c:	and	r0, r0, #31
   1b220:	ldr	r6, [r4, r7, lsl #2]
   1b224:	orr	r0, r6, r3, lsl r0
   1b228:	str	r0, [r4, r7, lsl #2]
   1b22c:	add	r2, r2, #1
   1b230:	add	r1, r1, #2
   1b234:	mov	r0, #0
   1b238:	cmp	r2, #256	; 0x100
   1b23c:	bne	1b208 <__assert_fail@plt+0x9cf0>
   1b240:	b	1b060 <__assert_fail@plt+0x9b48>
   1b244:	mov	r2, #0
   1b248:	mov	r3, #1
   1b24c:	ldrb	r0, [r1, #1]
   1b250:	tst	r0, #2
   1b254:	beq	1b270 <__assert_fail@plt+0x9d58>
   1b258:	ldrb	r0, [r8, r2]
   1b25c:	ubfx	r7, r0, #5, #3
   1b260:	and	r0, r0, #31
   1b264:	ldr	r6, [r4, r7, lsl #2]
   1b268:	orr	r0, r6, r3, lsl r0
   1b26c:	str	r0, [r4, r7, lsl #2]
   1b270:	add	r2, r2, #1
   1b274:	add	r1, r1, #2
   1b278:	mov	r0, #0
   1b27c:	cmp	r2, #256	; 0x100
   1b280:	bne	1b24c <__assert_fail@plt+0x9d34>
   1b284:	b	1b060 <__assert_fail@plt+0x9b48>
   1b288:	ldrb	r0, [r1]
   1b28c:	tst	r0, #4
   1b290:	beq	1b2ac <__assert_fail@plt+0x9d94>
   1b294:	ldrb	r0, [r8, r2]
   1b298:	ubfx	r7, r0, #5, #3
   1b29c:	and	r0, r0, #31
   1b2a0:	ldr	r6, [r4, r7, lsl #2]
   1b2a4:	orr	r0, r6, r3, lsl r0
   1b2a8:	str	r0, [r4, r7, lsl #2]
   1b2ac:	add	r2, r2, #1
   1b2b0:	add	r1, r1, #2
   1b2b4:	mov	r0, #0
   1b2b8:	cmp	r2, #256	; 0x100
   1b2bc:	bne	1b288 <__assert_fail@plt+0x9d70>
   1b2c0:	b	1b060 <__assert_fail@plt+0x9b48>
   1b2c4:	mov	r2, #0
   1b2c8:	mov	r3, #1
   1b2cc:	ldrb	r0, [r1, #1]
   1b2d0:	tst	r0, #32
   1b2d4:	beq	1b2f0 <__assert_fail@plt+0x9dd8>
   1b2d8:	ldrb	r0, [r8, r2]
   1b2dc:	ubfx	r7, r0, #5, #3
   1b2e0:	and	r0, r0, #31
   1b2e4:	ldr	r6, [r4, r7, lsl #2]
   1b2e8:	orr	r0, r6, r3, lsl r0
   1b2ec:	str	r0, [r4, r7, lsl #2]
   1b2f0:	add	r2, r2, #1
   1b2f4:	add	r1, r1, #2
   1b2f8:	mov	r0, #0
   1b2fc:	cmp	r2, #256	; 0x100
   1b300:	bne	1b2cc <__assert_fail@plt+0x9db4>
   1b304:	b	1b060 <__assert_fail@plt+0x9b48>
   1b308:	mov	r2, #0
   1b30c:	mov	r3, #1
   1b310:	ldrb	r0, [r1, #1]
   1b314:	tst	r0, #4
   1b318:	beq	1b334 <__assert_fail@plt+0x9e1c>
   1b31c:	ldrb	r0, [r8, r2]
   1b320:	ubfx	r7, r0, #5, #3
   1b324:	and	r0, r0, #31
   1b328:	ldr	r6, [r4, r7, lsl #2]
   1b32c:	orr	r0, r6, r3, lsl r0
   1b330:	str	r0, [r4, r7, lsl #2]
   1b334:	add	r2, r2, #1
   1b338:	add	r1, r1, #2
   1b33c:	mov	r0, #0
   1b340:	cmp	r2, #256	; 0x100
   1b344:	bne	1b310 <__assert_fail@plt+0x9df8>
   1b348:	b	1b060 <__assert_fail@plt+0x9b48>
   1b34c:	mov	r2, #0
   1b350:	mov	r3, #1
   1b354:	ldrb	r0, [r1, #1]
   1b358:	tst	r0, #8
   1b35c:	beq	1b378 <__assert_fail@plt+0x9e60>
   1b360:	ldrb	r0, [r8, r2]
   1b364:	ubfx	r7, r0, #5, #3
   1b368:	and	r0, r0, #31
   1b36c:	ldr	r6, [r4, r7, lsl #2]
   1b370:	orr	r0, r6, r3, lsl r0
   1b374:	str	r0, [r4, r7, lsl #2]
   1b378:	add	r2, r2, #1
   1b37c:	add	r1, r1, #2
   1b380:	mov	r0, #0
   1b384:	cmp	r2, #256	; 0x100
   1b388:	bne	1b354 <__assert_fail@plt+0x9e3c>
   1b38c:	b	1b060 <__assert_fail@plt+0x9b48>
   1b390:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b394:	add	fp, sp, #24
   1b398:	mov	r6, r0
   1b39c:	mov	r4, r2
   1b3a0:	mov	r5, r1
   1b3a4:	mvn	r0, #0
   1b3a8:	movw	r8, #32816	; 0x8030
   1b3ac:	b	1b40c <__assert_fail@plt+0x9ef4>
   1b3b0:	cmp	r2, #2
   1b3b4:	beq	1b440 <__assert_fail@plt+0x9f28>
   1b3b8:	ldrb	r1, [r5]
   1b3bc:	cmp	r1, #44	; 0x2c
   1b3c0:	beq	1b438 <__assert_fail@plt+0x9f20>
   1b3c4:	mvn	r0, #1
   1b3c8:	cmp	r1, #48	; 0x30
   1b3cc:	bcc	1b40c <__assert_fail@plt+0x9ef4>
   1b3d0:	cmp	r2, #1
   1b3d4:	bne	1b40c <__assert_fail@plt+0x9ef4>
   1b3d8:	cmn	r7, #2
   1b3dc:	beq	1b40c <__assert_fail@plt+0x9ef4>
   1b3e0:	cmp	r1, #57	; 0x39
   1b3e4:	bhi	1b40c <__assert_fail@plt+0x9ef4>
   1b3e8:	cmn	r7, #1
   1b3ec:	beq	1b408 <__assert_fail@plt+0x9ef0>
   1b3f0:	add	r0, r7, r7, lsl #2
   1b3f4:	add	r1, r1, r0, lsl #1
   1b3f8:	sub	r0, r1, #48	; 0x30
   1b3fc:	cmp	r1, r8
   1b400:	movwgt	r0, #32768	; 0x8000
   1b404:	b	1b40c <__assert_fail@plt+0x9ef4>
   1b408:	sub	r0, r1, #48	; 0x30
   1b40c:	mov	r7, r0
   1b410:	mov	r0, r5
   1b414:	mov	r1, r6
   1b418:	mov	r2, r4
   1b41c:	bl	185e0 <__assert_fail@plt+0x70c8>
   1b420:	ldr	r1, [r6, #40]	; 0x28
   1b424:	add	r0, r1, r0
   1b428:	str	r0, [r6, #40]	; 0x28
   1b42c:	ldrb	r2, [r5, #4]
   1b430:	cmp	r2, #24
   1b434:	bne	1b3b0 <__assert_fail@plt+0x9e98>
   1b438:	mov	r0, r7
   1b43c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b440:	mvn	r7, #1
   1b444:	b	1b438 <__assert_fail@plt+0x9f20>
   1b448:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b44c:	add	fp, sp, #24
   1b450:	sub	sp, sp, #8
   1b454:	mov	r3, r0
   1b458:	mov	r5, r0
   1b45c:	mov	r8, r1
   1b460:	mov	r0, r1
   1b464:	mov	r1, #0
   1b468:	mov	r2, #0
   1b46c:	mov	r7, #0
   1b470:	ldr	r4, [r3], #20
   1b474:	bl	1a414 <__assert_fail@plt+0x8efc>
   1b478:	cmp	r0, #0
   1b47c:	str	r0, [sp, #4]
   1b480:	beq	1b51c <__assert_fail@plt+0xa004>
   1b484:	mov	r9, r0
   1b488:	add	r6, sp, #4
   1b48c:	mov	r7, #0
   1b490:	str	r4, [r0]
   1b494:	ldr	r0, [r6]
   1b498:	ldr	r1, [r0, #24]
   1b49c:	orr	r1, r1, #262144	; 0x40000
   1b4a0:	str	r1, [r0, #24]
   1b4a4:	ldr	r0, [r5, #4]
   1b4a8:	ldr	r4, [r6]
   1b4ac:	cmp	r0, #0
   1b4b0:	beq	1b4c0 <__assert_fail@plt+0x9fa8>
   1b4b4:	add	r6, r4, #4
   1b4b8:	mov	r5, r0
   1b4bc:	b	1b4f4 <__assert_fail@plt+0x9fdc>
   1b4c0:	mov	r1, #0
   1b4c4:	mov	r0, r5
   1b4c8:	ldr	r5, [r5, #8]
   1b4cc:	cmp	r5, r1
   1b4d0:	cmpne	r5, #0
   1b4d4:	bne	1b4f0 <__assert_fail@plt+0x9fd8>
   1b4d8:	ldr	r5, [r0]
   1b4dc:	ldr	r4, [r4]
   1b4e0:	mov	r1, r0
   1b4e4:	cmp	r5, #0
   1b4e8:	bne	1b4c4 <__assert_fail@plt+0x9fac>
   1b4ec:	b	1b518 <__assert_fail@plt+0xa000>
   1b4f0:	add	r6, r4, #8
   1b4f4:	add	r3, r5, #20
   1b4f8:	mov	r0, r8
   1b4fc:	mov	r1, #0
   1b500:	mov	r2, #0
   1b504:	bl	1a414 <__assert_fail@plt+0x8efc>
   1b508:	cmp	r0, #0
   1b50c:	str	r0, [r6]
   1b510:	bne	1b490 <__assert_fail@plt+0x9f78>
   1b514:	b	1b51c <__assert_fail@plt+0xa004>
   1b518:	mov	r7, r9
   1b51c:	mov	r0, r7
   1b520:	sub	sp, fp, #24
   1b524:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b528:	push	{r4, r5, r6, r7, fp, lr}
   1b52c:	add	fp, sp, #16
   1b530:	mov	r6, r0
   1b534:	mov	r5, r1
   1b538:	mov	r0, r2
   1b53c:	mov	r4, r2
   1b540:	mov	r1, r6
   1b544:	blx	r5
   1b548:	cmp	r0, #0
   1b54c:	popne	{r4, r5, r6, r7, fp, pc}
   1b550:	ldr	r7, [r6, #4]
   1b554:	cmp	r7, #0
   1b558:	bne	1b58c <__assert_fail@plt+0xa074>
   1b55c:	mov	r1, #0
   1b560:	b	1b578 <__assert_fail@plt+0xa060>
   1b564:	ldr	r6, [r0]
   1b568:	mov	r1, r0
   1b56c:	cmp	r6, #0
   1b570:	moveq	r0, #0
   1b574:	popeq	{r4, r5, r6, r7, fp, pc}
   1b578:	ldr	r7, [r6, #8]
   1b57c:	mov	r0, r6
   1b580:	cmp	r7, r1
   1b584:	cmpne	r7, #0
   1b588:	beq	1b564 <__assert_fail@plt+0xa04c>
   1b58c:	mov	r0, r4
   1b590:	mov	r1, r7
   1b594:	blx	r5
   1b598:	cmp	r0, #0
   1b59c:	mov	r6, r7
   1b5a0:	beq	1b550 <__assert_fail@plt+0xa038>
   1b5a4:	pop	{r4, r5, r6, r7, fp, pc}
   1b5a8:	ldrb	r2, [r1, #24]
   1b5ac:	cmp	r2, #17
   1b5b0:	beq	1b5e4 <__assert_fail@plt+0xa0cc>
   1b5b4:	cmp	r2, #4
   1b5b8:	bne	1b638 <__assert_fail@plt+0xa120>
   1b5bc:	ldr	r2, [r0, #132]	; 0x84
   1b5c0:	cmp	r2, #0
   1b5c4:	beq	1b638 <__assert_fail@plt+0xa120>
   1b5c8:	ldr	r3, [r1, #20]
   1b5cc:	ldr	r2, [r2, r3, lsl #2]
   1b5d0:	mov	r3, #1
   1b5d4:	str	r2, [r1, #20]
   1b5d8:	ldr	r1, [r0, #80]	; 0x50
   1b5dc:	orr	r1, r1, r3, lsl r2
   1b5e0:	b	1b634 <__assert_fail@plt+0xa11c>
   1b5e4:	ldr	r2, [r1, #4]
   1b5e8:	cmp	r2, #0
   1b5ec:	beq	1b638 <__assert_fail@plt+0xa120>
   1b5f0:	ldrb	r3, [r2, #24]
   1b5f4:	cmp	r3, #17
   1b5f8:	bne	1b638 <__assert_fail@plt+0xa120>
   1b5fc:	ldr	r3, [r2, #4]
   1b600:	ldr	r2, [r2, #20]
   1b604:	cmp	r3, #0
   1b608:	str	r3, [r1, #4]
   1b60c:	strne	r1, [r3]
   1b610:	cmp	r2, #31
   1b614:	ldr	r1, [r1, #20]
   1b618:	ldr	r3, [r0, #132]	; 0x84
   1b61c:	ldr	r1, [r3, r1, lsl #2]
   1b620:	str	r1, [r3, r2, lsl #2]
   1b624:	bgt	1b638 <__assert_fail@plt+0xa120>
   1b628:	ldr	r1, [r0, #80]	; 0x50
   1b62c:	mov	r3, #1
   1b630:	bic	r1, r1, r3, lsl r2
   1b634:	str	r1, [r0, #80]	; 0x50
   1b638:	mov	r0, #0
   1b63c:	bx	lr
   1b640:	push	{r4, r5, fp, lr}
   1b644:	add	fp, sp, #8
   1b648:	sub	sp, sp, #8
   1b64c:	mov	r5, r0
   1b650:	mov	r0, #0
   1b654:	mov	r4, r1
   1b658:	str	r0, [sp, #4]
   1b65c:	ldr	r2, [r1, #4]
   1b660:	cmp	r2, #0
   1b664:	beq	1b68c <__assert_fail@plt+0xa174>
   1b668:	ldrb	r0, [r2, #24]
   1b66c:	cmp	r0, #17
   1b670:	bne	1b68c <__assert_fail@plt+0xa174>
   1b674:	add	r0, sp, #4
   1b678:	mov	r1, r5
   1b67c:	bl	1b944 <__assert_fail@plt+0xa42c>
   1b680:	cmp	r0, #0
   1b684:	str	r0, [r4, #4]
   1b688:	strne	r4, [r0]
   1b68c:	ldr	r2, [r4, #8]
   1b690:	cmp	r2, #0
   1b694:	beq	1b6bc <__assert_fail@plt+0xa1a4>
   1b698:	ldrb	r0, [r2, #24]
   1b69c:	cmp	r0, #17
   1b6a0:	bne	1b6bc <__assert_fail@plt+0xa1a4>
   1b6a4:	add	r0, sp, #4
   1b6a8:	mov	r1, r5
   1b6ac:	bl	1b944 <__assert_fail@plt+0xa42c>
   1b6b0:	cmp	r0, #0
   1b6b4:	str	r0, [r4, #8]
   1b6b8:	strne	r4, [r0]
   1b6bc:	ldr	r0, [sp, #4]
   1b6c0:	sub	sp, fp, #8
   1b6c4:	pop	{r4, r5, fp, pc}
   1b6c8:	push	{r4, r5, fp, lr}
   1b6cc:	add	fp, sp, #8
   1b6d0:	ldr	r2, [r1, #24]
   1b6d4:	mov	r5, r0
   1b6d8:	mov	r4, r1
   1b6dc:	uxtb	r0, r2
   1b6e0:	cmp	r0, #16
   1b6e4:	bne	1b704 <__assert_fail@plt+0xa1ec>
   1b6e8:	ldr	r0, [r4, #4]
   1b6ec:	ldr	r1, [r0, #12]
   1b6f0:	str	r1, [r4, #12]
   1b6f4:	ldr	r0, [r0, #28]
   1b6f8:	str	r0, [r4, #28]
   1b6fc:	mov	r0, #0
   1b700:	pop	{r4, r5, fp, pc}
   1b704:	str	r4, [r4, #12]
   1b708:	mov	r0, r5
   1b70c:	ldr	r1, [r4, #20]
   1b710:	bl	1ba98 <__assert_fail@plt+0xa580>
   1b714:	cmn	r0, #1
   1b718:	str	r0, [r4, #28]
   1b71c:	moveq	r0, #12
   1b720:	popeq	{r4, r5, fp, pc}
   1b724:	ldrb	r2, [r4, #24]
   1b728:	mov	r1, r0
   1b72c:	mov	r0, #0
   1b730:	cmp	r2, #12
   1b734:	popne	{r4, r5, fp, pc}
   1b738:	ldr	r2, [r5]
   1b73c:	ldr	r3, [r4, #20]
   1b740:	add	r1, r2, r1, lsl #3
   1b744:	ldr	r2, [r1, #4]
   1b748:	bfi	r2, r3, #8, #10
   1b74c:	str	r2, [r1, #4]
   1b750:	pop	{r4, r5, fp, pc}
   1b754:	ldrb	r0, [r1, #24]
   1b758:	cmp	r0, #16
   1b75c:	beq	1b770 <__assert_fail@plt+0xa258>
   1b760:	cmp	r0, #11
   1b764:	bne	1b788 <__assert_fail@plt+0xa270>
   1b768:	ldr	r0, [r1, #4]
   1b76c:	b	1b7a8 <__assert_fail@plt+0xa290>
   1b770:	ldmib	r1, {r0, r2}
   1b774:	ldr	r3, [r2, #12]
   1b778:	str	r3, [r0, #16]
   1b77c:	ldr	r0, [r1, #16]
   1b780:	str	r0, [r2, #16]
   1b784:	b	1b7ac <__assert_fail@plt+0xa294>
   1b788:	ldr	r0, [r1, #4]
   1b78c:	cmp	r0, #0
   1b790:	ldrne	r2, [r1, #16]
   1b794:	strne	r2, [r0, #16]
   1b798:	ldr	r0, [r1, #8]
   1b79c:	cmp	r0, #0
   1b7a0:	beq	1b7ac <__assert_fail@plt+0xa294>
   1b7a4:	ldr	r1, [r1, #16]
   1b7a8:	str	r1, [r0, #16]
   1b7ac:	mov	r0, #0
   1b7b0:	bx	lr
   1b7b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b7b8:	add	fp, sp, #24
   1b7bc:	ldrb	r3, [r1, #24]
   1b7c0:	ldr	r2, [r1, #28]
   1b7c4:	mov	r4, #0
   1b7c8:	sub	r3, r3, #2
   1b7cc:	cmp	r3, #14
   1b7d0:	bhi	1b8d8 <__assert_fail@plt+0xa3c0>
   1b7d4:	add	r7, pc, #0
   1b7d8:	ldr	pc, [r7, r3, lsl #2]
   1b7dc:	andeq	fp, r1, r8, lsr #18
   1b7e0:	ldrdeq	fp, [r1], -r8
   1b7e4:	andeq	fp, r1, ip, ror #17
   1b7e8:	ldrdeq	fp, [r1], -r8
   1b7ec:	ldrdeq	fp, [r1], -r8
   1b7f0:	ldrdeq	fp, [r1], -r8
   1b7f4:	andeq	fp, r1, r8, lsl r8
   1b7f8:	andeq	fp, r1, r8, lsl r8
   1b7fc:	andeq	fp, r1, r4, asr r8
   1b800:	andeq	fp, r1, r4, asr r8
   1b804:	andeq	fp, r1, r8, lsl r8
   1b808:	ldrdeq	fp, [r1], -r8
   1b80c:	ldrdeq	fp, [r1], -r8
   1b810:	ldrdeq	fp, [r1], -r8
   1b814:	andeq	fp, r1, r8, lsr #18
   1b818:	ldr	r1, [r1, #16]
   1b81c:	ldr	r5, [r1, #28]
   1b820:	ldr	r6, [r0, #20]
   1b824:	add	r0, r2, r2, lsl #1
   1b828:	mov	r1, #1
   1b82c:	str	r1, [r6, r0, lsl #2]!
   1b830:	mov	r0, #4
   1b834:	mov	r7, r6
   1b838:	str	r1, [r7, #4]!
   1b83c:	bl	22220 <__assert_fail@plt+0x10d08>
   1b840:	cmp	r0, #0
   1b844:	str	r0, [r6, #8]
   1b848:	beq	1b930 <__assert_fail@plt+0xa418>
   1b84c:	str	r5, [r0]
   1b850:	b	1b928 <__assert_fail@plt+0xa410>
   1b854:	ldrb	r3, [r0, #88]	; 0x58
   1b858:	add	r6, r1, #16
   1b85c:	add	r5, r2, r2, lsl #1
   1b860:	orr	r3, r3, #1
   1b864:	strb	r3, [r0, #88]	; 0x58
   1b868:	mov	r3, r6
   1b86c:	ldr	r7, [r1, #4]
   1b870:	ldr	r1, [r1, #8]
   1b874:	cmp	r1, #0
   1b878:	addne	r3, r1, #12
   1b87c:	cmp	r7, #0
   1b880:	ldr	r1, [r3]
   1b884:	addne	r6, r7, #12
   1b888:	ldr	r8, [r1, #28]
   1b88c:	ldr	r1, [r6]
   1b890:	ldr	r6, [r0, #20]
   1b894:	mov	r0, #2
   1b898:	ldr	r9, [r1, #28]
   1b89c:	mov	r7, r6
   1b8a0:	str	r0, [r7, r5, lsl #2]!
   1b8a4:	mov	r0, #8
   1b8a8:	bl	22220 <__assert_fail@plt+0x10d08>
   1b8ac:	cmp	r0, #0
   1b8b0:	str	r0, [r7, #8]
   1b8b4:	beq	1b93c <__assert_fail@plt+0xa424>
   1b8b8:	add	r1, r6, r5, lsl #2
   1b8bc:	cmp	r9, r8
   1b8c0:	add	r1, r1, #4
   1b8c4:	bne	1b90c <__assert_fail@plt+0xa3f4>
   1b8c8:	mov	r2, #1
   1b8cc:	str	r2, [r1]
   1b8d0:	str	r9, [r0]
   1b8d4:	b	1b928 <__assert_fail@plt+0xa410>
   1b8d8:	ldr	r1, [r1, #16]
   1b8dc:	ldr	r0, [r0, #12]
   1b8e0:	ldr	r1, [r1, #28]
   1b8e4:	str	r1, [r0, r2, lsl #2]
   1b8e8:	b	1b928 <__assert_fail@plt+0xa410>
   1b8ec:	ldr	r7, [r1, #16]
   1b8f0:	ldr	r3, [r0, #12]
   1b8f4:	ldr	r5, [r7, #28]
   1b8f8:	str	r5, [r3, r2, lsl #2]
   1b8fc:	ldrb	r1, [r1, #24]
   1b900:	cmp	r1, #4
   1b904:	beq	1b820 <__assert_fail@plt+0xa308>
   1b908:	b	1b928 <__assert_fail@plt+0xa410>
   1b90c:	mov	r2, #2
   1b910:	str	r2, [r1]
   1b914:	bge	1b924 <__assert_fail@plt+0xa40c>
   1b918:	str	r9, [r0]
   1b91c:	str	r8, [r0, #4]
   1b920:	b	1b928 <__assert_fail@plt+0xa410>
   1b924:	stm	r0, {r8, r9}
   1b928:	mov	r0, r4
   1b92c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b930:	mov	r0, #0
   1b934:	str	r0, [r7]
   1b938:	str	r0, [r6]
   1b93c:	mov	r4, #12
   1b940:	b	1b928 <__assert_fail@plt+0xa410>
   1b944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b948:	add	fp, sp, #28
   1b94c:	sub	sp, sp, #12
   1b950:	ldr	r5, [r2, #4]
   1b954:	ldr	sl, [r1]
   1b958:	mov	r9, r2
   1b95c:	cmp	r5, #0
   1b960:	ldrbne	r1, [r1, #28]
   1b964:	andsne	r1, r1, #16
   1b968:	bne	1ba70 <__assert_fail@plt+0xa558>
   1b96c:	str	r0, [sp]
   1b970:	mov	r0, #8
   1b974:	mov	r8, #0
   1b978:	add	r3, sp, #4
   1b97c:	mov	r1, #0
   1b980:	mov	r2, #0
   1b984:	str	r0, [sp, #8]
   1b988:	mov	r0, sl
   1b98c:	str	r8, [sp, #4]
   1b990:	bl	1a414 <__assert_fail@plt+0x8efc>
   1b994:	mov	r7, r0
   1b998:	mov	r0, #9
   1b99c:	add	r3, sp, #4
   1b9a0:	mov	r1, #0
   1b9a4:	mov	r2, #0
   1b9a8:	str	r0, [sp, #8]
   1b9ac:	mov	r0, sl
   1b9b0:	str	r8, [sp, #4]
   1b9b4:	bl	1a414 <__assert_fail@plt+0x8efc>
   1b9b8:	mov	r4, r0
   1b9bc:	cmp	r5, #0
   1b9c0:	mov	r6, r0
   1b9c4:	beq	1b9ec <__assert_fail@plt+0xa4d4>
   1b9c8:	mov	r0, #16
   1b9cc:	add	r3, sp, #4
   1b9d0:	mov	r1, r5
   1b9d4:	mov	r2, r4
   1b9d8:	str	r0, [sp, #8]
   1b9dc:	mov	r0, sl
   1b9e0:	str	r8, [sp, #4]
   1b9e4:	bl	1a414 <__assert_fail@plt+0x8efc>
   1b9e8:	mov	r6, r0
   1b9ec:	mov	r0, #16
   1b9f0:	add	r3, sp, #4
   1b9f4:	mov	r1, r7
   1b9f8:	mov	r2, r6
   1b9fc:	str	r0, [sp, #8]
   1ba00:	mov	r0, sl
   1ba04:	str	r8, [sp, #4]
   1ba08:	bl	1a414 <__assert_fail@plt+0x8efc>
   1ba0c:	cmp	r4, #0
   1ba10:	beq	1ba20 <__assert_fail@plt+0xa508>
   1ba14:	cmp	r7, #0
   1ba18:	cmpne	r6, #0
   1ba1c:	bne	1ba34 <__assert_fail@plt+0xa51c>
   1ba20:	ldr	r1, [sp]
   1ba24:	mov	r0, #12
   1ba28:	mov	r5, #0
   1ba2c:	str	r0, [r1]
   1ba30:	b	1ba8c <__assert_fail@plt+0xa574>
   1ba34:	mov	r5, r0
   1ba38:	cmp	r0, #0
   1ba3c:	beq	1ba20 <__assert_fail@plt+0xa508>
   1ba40:	ldr	r0, [r9, #20]
   1ba44:	str	r0, [r4, #20]
   1ba48:	str	r0, [r7, #20]
   1ba4c:	ldr	r1, [r9, #24]
   1ba50:	ldr	r0, [r4, #24]
   1ba54:	lsr	r1, r1, #19
   1ba58:	bfi	r0, r1, #19, #1
   1ba5c:	str	r0, [r4, #24]
   1ba60:	ldr	r0, [r7, #24]
   1ba64:	bfi	r0, r1, #19, #1
   1ba68:	str	r0, [r7, #24]
   1ba6c:	b	1ba8c <__assert_fail@plt+0xa574>
   1ba70:	ldr	r3, [r9, #20]
   1ba74:	cmp	r3, #31
   1ba78:	bgt	1ba8c <__assert_fail@plt+0xa574>
   1ba7c:	ldr	r1, [sl, #80]	; 0x50
   1ba80:	mov	r2, #1
   1ba84:	tst	r1, r2, lsl r3
   1ba88:	bne	1b96c <__assert_fail@plt+0xa454>
   1ba8c:	mov	r0, r5
   1ba90:	sub	sp, fp, #28
   1ba94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba9c:	add	fp, sp, #28
   1baa0:	sub	sp, sp, #12
   1baa4:	mov	r4, r0
   1baa8:	ldr	r7, [r0, #4]
   1baac:	ldr	r0, [r0, #8]
   1bab0:	mov	r5, r2
   1bab4:	mov	r9, r1
   1bab8:	cmp	r0, r7
   1babc:	bcs	1bb88 <__assert_fail@plt+0xa670>
   1bac0:	ldr	r1, [r4]
   1bac4:	str	r9, [r1, r0, lsl #3]!
   1bac8:	str	r5, [r1, #4]
   1bacc:	ldr	r0, [r4]
   1bad0:	ldr	r1, [r4, #8]
   1bad4:	add	r0, r0, r1, lsl #3
   1bad8:	ldr	r1, [r0, #4]
   1badc:	bfc	r1, #8, #10
   1bae0:	str	r1, [r0, #4]
   1bae4:	uxtb	r1, r5
   1bae8:	cmp	r1, #5
   1baec:	bne	1bb00 <__assert_fail@plt+0xa5e8>
   1baf0:	ldr	r2, [r4, #92]	; 0x5c
   1baf4:	mov	r0, #1048576	; 0x100000
   1baf8:	cmp	r2, #1
   1bafc:	bgt	1bb10 <__assert_fail@plt+0xa5f8>
   1bb00:	sub	r0, r1, #6
   1bb04:	clz	r0, r0
   1bb08:	lsr	r0, r0, #5
   1bb0c:	lsl	r0, r0, #20
   1bb10:	ldr	r1, [r4]
   1bb14:	ldr	r2, [r4, #8]
   1bb18:	add	r1, r1, r2, lsl #3
   1bb1c:	ldr	r2, [r1, #4]
   1bb20:	bic	r2, r2, #1048576	; 0x100000
   1bb24:	orr	r0, r2, r0
   1bb28:	mvn	r2, #0
   1bb2c:	str	r0, [r1, #4]
   1bb30:	ldr	r0, [r4, #8]
   1bb34:	ldr	r1, [r4, #12]
   1bb38:	str	r2, [r1, r0, lsl #2]
   1bb3c:	mov	r2, #0
   1bb40:	ldr	r0, [r4, #8]
   1bb44:	ldr	r1, [r4, #20]
   1bb48:	add	r0, r0, r0, lsl #1
   1bb4c:	str	r2, [r1, r0, lsl #2]!
   1bb50:	str	r2, [r1, #4]
   1bb54:	str	r2, [r1, #8]
   1bb58:	ldr	r0, [r4, #8]
   1bb5c:	ldr	r1, [r4, #24]
   1bb60:	add	r0, r0, r0, lsl #1
   1bb64:	str	r2, [r1, r0, lsl #2]!
   1bb68:	str	r2, [r1, #4]
   1bb6c:	str	r2, [r1, #8]
   1bb70:	ldr	r6, [r4, #8]
   1bb74:	add	r0, r6, #1
   1bb78:	str	r0, [r4, #8]
   1bb7c:	mov	r0, r6
   1bb80:	sub	sp, fp, #28
   1bb84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb88:	movw	r0, #21845	; 0x5555
   1bb8c:	lsl	r1, r7, #1
   1bb90:	mvn	r6, #0
   1bb94:	movt	r0, #5461	; 0x1555
   1bb98:	cmp	r1, r0
   1bb9c:	bhi	1bb7c <__assert_fail@plt+0xa664>
   1bba0:	ldr	r0, [r4]
   1bba4:	str	r1, [sp, #8]
   1bba8:	lsl	r1, r7, #4
   1bbac:	bl	22250 <__assert_fail@plt+0x10d38>
   1bbb0:	cmp	r0, #0
   1bbb4:	beq	1bb7c <__assert_fail@plt+0xa664>
   1bbb8:	str	r0, [r4]
   1bbbc:	lsl	r8, r7, #3
   1bbc0:	ldr	r0, [r4, #12]
   1bbc4:	mov	r1, r8
   1bbc8:	bl	22250 <__assert_fail@plt+0x10d38>
   1bbcc:	str	r0, [sp, #4]
   1bbd0:	ldr	r0, [r4, #16]
   1bbd4:	mov	r1, r8
   1bbd8:	bl	22250 <__assert_fail@plt+0x10d38>
   1bbdc:	mov	r2, r0
   1bbe0:	ldr	r0, [r4, #20]
   1bbe4:	add	r1, r7, r7, lsl #1
   1bbe8:	lsl	r8, r1, #3
   1bbec:	mov	r7, r2
   1bbf0:	mov	r1, r8
   1bbf4:	bl	22250 <__assert_fail@plt+0x10d38>
   1bbf8:	mov	sl, r0
   1bbfc:	ldr	r0, [r4, #24]
   1bc00:	mov	r1, r8
   1bc04:	bl	22250 <__assert_fail@plt+0x10d38>
   1bc08:	mov	r8, r0
   1bc0c:	ldr	r0, [sp, #4]
   1bc10:	cmp	r0, #0
   1bc14:	beq	1bc24 <__assert_fail@plt+0xa70c>
   1bc18:	cmp	r7, #0
   1bc1c:	cmpne	sl, #0
   1bc20:	bne	1bc44 <__assert_fail@plt+0xa72c>
   1bc24:	bl	223dc <__assert_fail@plt+0x10ec4>
   1bc28:	mov	r0, r7
   1bc2c:	bl	223dc <__assert_fail@plt+0x10ec4>
   1bc30:	mov	r0, sl
   1bc34:	bl	223dc <__assert_fail@plt+0x10ec4>
   1bc38:	mov	r0, r8
   1bc3c:	bl	223dc <__assert_fail@plt+0x10ec4>
   1bc40:	b	1bb7c <__assert_fail@plt+0xa664>
   1bc44:	cmp	r8, #0
   1bc48:	beq	1bc24 <__assert_fail@plt+0xa70c>
   1bc4c:	add	r1, r4, #12
   1bc50:	stm	r1, {r0, r7, sl}
   1bc54:	str	r8, [r4, #24]
   1bc58:	ldr	r0, [sp, #8]
   1bc5c:	str	r0, [r4, #4]
   1bc60:	ldr	r0, [r4, #8]
   1bc64:	b	1bac0 <__assert_fail@plt+0xa5a8>
   1bc68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc6c:	add	fp, sp, #28
   1bc70:	sub	sp, sp, #44	; 0x2c
   1bc74:	mov	r8, r0
   1bc78:	ldr	r0, [r1, #20]
   1bc7c:	add	r4, r2, r2, lsl #1
   1bc80:	mov	r5, r1
   1bc84:	mov	r1, #0
   1bc88:	mov	r9, r3
   1bc8c:	mov	r6, r2
   1bc90:	add	r0, r0, r4, lsl #2
   1bc94:	ldr	r0, [r0, #4]
   1bc98:	str	r1, [sp, #36]	; 0x24
   1bc9c:	add	r0, r0, #1
   1bca0:	str	r0, [sp, #32]
   1bca4:	lsl	r0, r0, #2
   1bca8:	bl	22220 <__assert_fail@plt+0x10d08>
   1bcac:	cmp	r0, #0
   1bcb0:	str	r0, [sp, #40]	; 0x28
   1bcb4:	beq	1be7c <__assert_fail@plt+0xa964>
   1bcb8:	mov	r1, #1
   1bcbc:	str	r6, [r0]
   1bcc0:	str	r1, [sp, #36]	; 0x24
   1bcc4:	mvn	r1, #0
   1bcc8:	ldr	r0, [r5, #24]
   1bccc:	add	r0, r0, r4, lsl #2
   1bcd0:	str	r1, [r0, #4]
   1bcd4:	ldr	r2, [r5]
   1bcd8:	add	r0, r2, r6, lsl #3
   1bcdc:	ldr	r0, [r0, #4]
   1bce0:	ubfx	r1, r0, #8, #10
   1bce4:	cmp	r1, #0
   1bce8:	beq	1bd44 <__assert_fail@plt+0xa82c>
   1bcec:	ldr	r3, [r5, #20]
   1bcf0:	add	r3, r3, r4, lsl #2
   1bcf4:	ldr	r7, [r3, #4]
   1bcf8:	cmp	r7, #0
   1bcfc:	beq	1bd44 <__assert_fail@plt+0xa82c>
   1bd00:	ldr	r3, [r3, #8]
   1bd04:	ldr	r3, [r3]
   1bd08:	add	r2, r2, r3, lsl #3
   1bd0c:	ldrb	r2, [r2, #6]
   1bd10:	tst	r2, #4
   1bd14:	bne	1bd44 <__assert_fail@plt+0xa82c>
   1bd18:	str	r1, [sp]
   1bd1c:	mov	r0, r5
   1bd20:	mov	r1, r6
   1bd24:	mov	r2, r6
   1bd28:	mov	r3, r6
   1bd2c:	bl	1be84 <__assert_fail@plt+0xa96c>
   1bd30:	cmp	r0, #0
   1bd34:	bne	1be74 <__assert_fail@plt+0xa95c>
   1bd38:	ldr	r0, [r5]
   1bd3c:	add	r0, r0, r6, lsl #3
   1bd40:	ldr	r0, [r0, #4]
   1bd44:	tst	r0, #8
   1bd48:	beq	1be48 <__assert_fail@plt+0xa930>
   1bd4c:	ldr	r0, [r5, #20]
   1bd50:	add	r1, r0, r4, lsl #2
   1bd54:	ldr	r1, [r1, #4]
   1bd58:	cmp	r1, #1
   1bd5c:	blt	1be48 <__assert_fail@plt+0xa930>
   1bd60:	str	r8, [sp, #12]
   1bd64:	mov	r8, #0
   1bd68:	add	r7, sp, #16
   1bd6c:	add	sl, sp, #32
   1bd70:	mov	r6, #0
   1bd74:	str	r9, [sp, #8]
   1bd78:	add	r0, r0, r4, lsl #2
   1bd7c:	ldr	r0, [r0, #8]
   1bd80:	ldr	r2, [r0, r6, lsl #2]
   1bd84:	ldr	r0, [r5, #24]
   1bd88:	add	r9, r2, r2, lsl #1
   1bd8c:	add	r0, r0, r9, lsl #2
   1bd90:	ldr	r1, [r0, #4]
   1bd94:	cmn	r1, #1
   1bd98:	beq	1be00 <__assert_fail@plt+0xa8e8>
   1bd9c:	cmp	r1, #0
   1bda0:	bne	1bdc0 <__assert_fail@plt+0xa8a8>
   1bda4:	mov	r0, r7
   1bda8:	mov	r1, r5
   1bdac:	mov	r3, #0
   1bdb0:	bl	1bc68 <__assert_fail@plt+0xa750>
   1bdb4:	cmp	r0, #0
   1bdb8:	beq	1bdd0 <__assert_fail@plt+0xa8b8>
   1bdbc:	b	1be74 <__assert_fail@plt+0xa95c>
   1bdc0:	vldr	d16, [r0]
   1bdc4:	ldr	r0, [r0, #8]
   1bdc8:	str	r0, [sp, #24]
   1bdcc:	vstr	d16, [sp, #16]
   1bdd0:	mov	r0, sl
   1bdd4:	mov	r1, r7
   1bdd8:	bl	1c160 <__assert_fail@plt+0xac48>
   1bddc:	cmp	r0, #0
   1bde0:	bne	1be74 <__assert_fail@plt+0xa95c>
   1bde4:	ldr	r0, [r5, #24]
   1bde8:	add	r0, r0, r9, lsl #2
   1bdec:	ldr	r0, [r0, #4]
   1bdf0:	cmp	r0, #0
   1bdf4:	bne	1be04 <__assert_fail@plt+0xa8ec>
   1bdf8:	ldr	r0, [sp, #24]
   1bdfc:	bl	223dc <__assert_fail@plt+0x10ec4>
   1be00:	mov	r8, #1
   1be04:	ldr	r0, [r5, #20]
   1be08:	add	r6, r6, #1
   1be0c:	add	r1, r0, r4, lsl #2
   1be10:	ldr	r1, [r1, #4]
   1be14:	cmp	r6, r1
   1be18:	blt	1bd78 <__assert_fail@plt+0xa860>
   1be1c:	tst	r8, #1
   1be20:	ldr	r8, [sp, #12]
   1be24:	ldr	r0, [sp, #8]
   1be28:	beq	1be48 <__assert_fail@plt+0xa930>
   1be2c:	cmp	r0, #0
   1be30:	bne	1be48 <__assert_fail@plt+0xa930>
   1be34:	ldr	r0, [r5, #24]
   1be38:	mov	r1, #0
   1be3c:	add	r0, r0, r4, lsl #2
   1be40:	str	r1, [r0, #4]
   1be44:	b	1be60 <__assert_fail@plt+0xa948>
   1be48:	ldr	r0, [r5, #24]
   1be4c:	vldr	d16, [sp, #32]
   1be50:	ldr	r1, [sp, #40]	; 0x28
   1be54:	add	r0, r0, r4, lsl #2
   1be58:	str	r1, [r0, #8]
   1be5c:	vstr	d16, [r0]
   1be60:	ldr	r0, [sp, #40]	; 0x28
   1be64:	vldr	d16, [sp, #32]
   1be68:	str	r0, [r8, #8]
   1be6c:	mov	r0, #0
   1be70:	vstr	d16, [r8]
   1be74:	sub	sp, fp, #28
   1be78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be7c:	mov	r0, #12
   1be80:	b	1be74 <__assert_fail@plt+0xa95c>
   1be84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be88:	add	fp, sp, #28
   1be8c:	sub	sp, sp, #20
   1be90:	ldr	sl, [fp, #8]
   1be94:	mov	r8, r2
   1be98:	mov	r4, r1
   1be9c:	mov	r7, r0
   1bea0:	str	r3, [sp, #8]
   1bea4:	ldr	r2, [r7]
   1bea8:	add	r1, r2, r4, lsl #3
   1beac:	ldrb	r0, [r1, #4]!
   1beb0:	cmp	r0, #4
   1beb4:	bne	1bf34 <__assert_fail@plt+0xaa1c>
   1beb8:	ldr	r0, [r7, #12]
   1bebc:	ldr	r1, [r7, #20]
   1bec0:	add	r9, r8, r8, lsl #1
   1bec4:	mov	r2, sl
   1bec8:	mov	r6, r7
   1becc:	ldr	r5, [r0, r4, lsl #2]
   1bed0:	add	r0, r1, r9, lsl #2
   1bed4:	mov	r1, #0
   1bed8:	str	r1, [r0, #4]
   1bedc:	mov	r0, r7
   1bee0:	mov	r1, r5
   1bee4:	bl	1c2ec <__assert_fail@plt+0xadd4>
   1bee8:	mov	r7, r0
   1beec:	mov	r0, #12
   1bef0:	cmn	r7, #1
   1bef4:	str	r0, [sp, #16]
   1bef8:	beq	1c154 <__assert_fail@plt+0xac3c>
   1befc:	ldr	r0, [r6, #12]
   1bf00:	ldr	r1, [r0, r4, lsl #2]
   1bf04:	str	r1, [r0, r8, lsl #2]
   1bf08:	mov	r1, r7
   1bf0c:	ldr	r0, [r6, #20]
   1bf10:	add	r0, r0, r9, lsl #2
   1bf14:	bl	1c374 <__assert_fail@plt+0xae5c>
   1bf18:	mov	r8, r7
   1bf1c:	mov	r1, #0
   1bf20:	cmp	r0, #0
   1bf24:	mov	r4, r5
   1bf28:	mov	r7, r6
   1bf2c:	bne	1c104 <__assert_fail@plt+0xabec>
   1bf30:	b	1c154 <__assert_fail@plt+0xac3c>
   1bf34:	ldr	r0, [r7, #20]
   1bf38:	add	r9, r4, r4, lsl #1
   1bf3c:	add	r6, r0, r9, lsl #2
   1bf40:	ldr	r3, [r6, #4]
   1bf44:	cmp	r3, #0
   1bf48:	beq	1c140 <__assert_fail@plt+0xac28>
   1bf4c:	ldr	r6, [r6, #8]
   1bf50:	cmp	r3, #1
   1bf54:	ldr	r5, [r6]
   1bf58:	add	r6, r8, r8, lsl #1
   1bf5c:	add	r0, r0, r6, lsl #2
   1bf60:	str	r6, [sp, #12]
   1bf64:	mov	r6, #0
   1bf68:	str	r6, [r0, #4]
   1bf6c:	bne	1bfa0 <__assert_fail@plt+0xaa88>
   1bf70:	ldr	r2, [sp, #8]
   1bf74:	cmp	r4, r2
   1bf78:	bne	1c0b0 <__assert_fail@plt+0xab98>
   1bf7c:	cmp	r8, r4
   1bf80:	beq	1c0b0 <__assert_fail@plt+0xab98>
   1bf84:	mov	r1, r5
   1bf88:	bl	1c374 <__assert_fail@plt+0xae5c>
   1bf8c:	ldr	r4, [sp, #8]
   1bf90:	cmp	r0, #0
   1bf94:	mov	r1, #1
   1bf98:	movwne	r1, #2
   1bf9c:	b	1c104 <__assert_fail@plt+0xabec>
   1bfa0:	ldr	r1, [r7, #8]
   1bfa4:	sub	r3, r1, #1
   1bfa8:	cmp	r3, #1
   1bfac:	blt	1bffc <__assert_fail@plt+0xaae4>
   1bfb0:	add	r3, r2, r3, lsl #3
   1bfb4:	ldr	r6, [r3, #4]
   1bfb8:	ands	r3, r6, #262144	; 0x40000
   1bfbc:	beq	1bffc <__assert_fail@plt+0xaae4>
   1bfc0:	ldr	r3, [r7, #16]
   1bfc4:	sub	r2, r2, #12
   1bfc8:	sub	r3, r3, #4
   1bfcc:	ldr	r4, [r3, r1, lsl #2]
   1bfd0:	cmp	r4, r5
   1bfd4:	ubfxeq	r6, r6, #8, #10
   1bfd8:	cmpeq	r6, sl
   1bfdc:	beq	1c110 <__assert_fail@plt+0xabf8>
   1bfe0:	sub	r6, r1, #2
   1bfe4:	cmp	r6, #1
   1bfe8:	blt	1bffc <__assert_fail@plt+0xaae4>
   1bfec:	ldr	r6, [r2, r1, lsl #3]
   1bff0:	sub	r1, r1, #1
   1bff4:	ands	r4, r6, #262144	; 0x40000
   1bff8:	bne	1bfcc <__assert_fail@plt+0xaab4>
   1bffc:	mov	r0, r7
   1c000:	mov	r1, r5
   1c004:	mov	r2, sl
   1c008:	bl	1c2ec <__assert_fail@plt+0xadd4>
   1c00c:	mov	r4, r0
   1c010:	mov	r0, #12
   1c014:	cmn	r4, #1
   1c018:	str	r0, [sp, #16]
   1c01c:	beq	1c154 <__assert_fail@plt+0xac3c>
   1c020:	ldr	r0, [r7, #20]
   1c024:	ldr	r6, [sp, #12]
   1c028:	mov	r1, r4
   1c02c:	add	r0, r0, r6, lsl #2
   1c030:	bl	1c374 <__assert_fail@plt+0xae5c>
   1c034:	cmp	r0, #0
   1c038:	beq	1c154 <__assert_fail@plt+0xac3c>
   1c03c:	ldr	r3, [sp, #8]
   1c040:	mov	r0, r7
   1c044:	mov	r1, r5
   1c048:	mov	r2, r4
   1c04c:	str	sl, [sp]
   1c050:	bl	1be84 <__assert_fail@plt+0xa96c>
   1c054:	cmp	r0, #0
   1c058:	bne	1c150 <__assert_fail@plt+0xac38>
   1c05c:	ldr	r0, [r7, #20]
   1c060:	mov	r2, sl
   1c064:	add	r0, r0, r9, lsl #2
   1c068:	ldr	r0, [r0, #8]
   1c06c:	ldr	r4, [r0, #4]
   1c070:	mov	r0, r7
   1c074:	mov	r1, r4
   1c078:	bl	1c2ec <__assert_fail@plt+0xadd4>
   1c07c:	mov	r8, r0
   1c080:	mov	r0, #12
   1c084:	cmn	r8, #1
   1c088:	str	r0, [sp, #16]
   1c08c:	beq	1c154 <__assert_fail@plt+0xac3c>
   1c090:	ldr	r0, [r7, #20]
   1c094:	mov	r1, r8
   1c098:	add	r0, r0, r6, lsl #2
   1c09c:	bl	1c374 <__assert_fail@plt+0xae5c>
   1c0a0:	mov	r1, #0
   1c0a4:	cmp	r0, #0
   1c0a8:	bne	1c104 <__assert_fail@plt+0xabec>
   1c0ac:	b	1c154 <__assert_fail@plt+0xac3c>
   1c0b0:	ldr	r0, [r1]
   1c0b4:	mov	r1, r5
   1c0b8:	ubfx	r0, r0, #8, #10
   1c0bc:	orr	sl, r0, sl
   1c0c0:	mov	r0, r7
   1c0c4:	mov	r2, sl
   1c0c8:	bl	1c2ec <__assert_fail@plt+0xadd4>
   1c0cc:	mov	r8, r0
   1c0d0:	mov	r0, #12
   1c0d4:	cmn	r8, #1
   1c0d8:	str	r0, [sp, #16]
   1c0dc:	beq	1c154 <__assert_fail@plt+0xac3c>
   1c0e0:	ldr	r0, [r7, #20]
   1c0e4:	ldr	r1, [sp, #12]
   1c0e8:	add	r0, r0, r1, lsl #2
   1c0ec:	mov	r1, r8
   1c0f0:	bl	1c374 <__assert_fail@plt+0xae5c>
   1c0f4:	mov	r1, #0
   1c0f8:	cmp	r0, #0
   1c0fc:	mov	r4, r5
   1c100:	beq	1c154 <__assert_fail@plt+0xac3c>
   1c104:	cmp	r1, #0
   1c108:	beq	1bea4 <__assert_fail@plt+0xa98c>
   1c10c:	b	1c12c <__assert_fail@plt+0xac14>
   1c110:	sub	r1, r1, #1
   1c114:	bl	1c374 <__assert_fail@plt+0xae5c>
   1c118:	ldr	r6, [sp, #12]
   1c11c:	cmp	r0, #0
   1c120:	bne	1c05c <__assert_fail@plt+0xab44>
   1c124:	mov	r0, #12
   1c128:	b	1c150 <__assert_fail@plt+0xac38>
   1c12c:	mov	r0, #12
   1c130:	cmp	r1, #2
   1c134:	str	r0, [sp, #16]
   1c138:	beq	1c14c <__assert_fail@plt+0xac34>
   1c13c:	b	1c154 <__assert_fail@plt+0xac3c>
   1c140:	ldr	r0, [r7, #12]
   1c144:	ldr	r1, [r0, r4, lsl #2]
   1c148:	str	r1, [r0, r8, lsl #2]
   1c14c:	mov	r0, #0
   1c150:	str	r0, [sp, #16]
   1c154:	ldr	r0, [sp, #16]
   1c158:	sub	sp, fp, #28
   1c15c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c160:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c164:	add	fp, sp, #24
   1c168:	mov	r8, #0
   1c16c:	cmp	r1, #0
   1c170:	beq	1c2c8 <__assert_fail@plt+0xadb0>
   1c174:	mov	r5, r0
   1c178:	ldr	r0, [r1, #4]
   1c17c:	mov	r9, r1
   1c180:	cmp	r0, #0
   1c184:	beq	1c2c8 <__assert_fail@plt+0xadb0>
   1c188:	ldr	r1, [r5, #4]
   1c18c:	ldr	r2, [r5]
   1c190:	add	r3, r1, r0, lsl #1
   1c194:	cmp	r2, r3
   1c198:	bge	1c1c8 <__assert_fail@plt+0xacb0>
   1c19c:	add	r7, r2, r0
   1c1a0:	ldr	r0, [r5, #8]
   1c1a4:	lsl	r1, r7, #3
   1c1a8:	bl	22250 <__assert_fail@plt+0x10d38>
   1c1ac:	cmp	r0, #0
   1c1b0:	beq	1c2e4 <__assert_fail@plt+0xadcc>
   1c1b4:	str	r0, [r5, #8]
   1c1b8:	lsl	r0, r7, #1
   1c1bc:	str	r0, [r5]
   1c1c0:	ldr	r1, [r5, #4]
   1c1c4:	ldr	r0, [r9, #4]
   1c1c8:	cmp	r1, #0
   1c1cc:	beq	1c2d0 <__assert_fail@plt+0xadb8>
   1c1d0:	add	r7, r1, r0, lsl #1
   1c1d4:	sub	r1, r1, #1
   1c1d8:	sub	r0, r0, #1
   1c1dc:	orr	r2, r0, r1
   1c1e0:	cmp	r2, #0
   1c1e4:	blt	1c230 <__assert_fail@plt+0xad18>
   1c1e8:	ldr	r2, [r9, #8]
   1c1ec:	ldr	r3, [r5, #8]
   1c1f0:	ldr	r4, [r2, r0, lsl #2]
   1c1f4:	ldr	r6, [r3, r1, lsl #2]
   1c1f8:	cmp	r6, r4
   1c1fc:	bne	1c20c <__assert_fail@plt+0xacf4>
   1c200:	sub	r1, r1, #1
   1c204:	sub	r0, r0, #1
   1c208:	b	1c224 <__assert_fail@plt+0xad0c>
   1c20c:	bge	1c220 <__assert_fail@plt+0xad08>
   1c210:	sub	r7, r7, #1
   1c214:	sub	r0, r0, #1
   1c218:	str	r4, [r3, r7, lsl #2]
   1c21c:	b	1c224 <__assert_fail@plt+0xad0c>
   1c220:	sub	r1, r1, #1
   1c224:	orr	r6, r0, r1
   1c228:	cmn	r6, #1
   1c22c:	bgt	1c1f0 <__assert_fail@plt+0xacd8>
   1c230:	cmp	r0, #0
   1c234:	blt	1c254 <__assert_fail@plt+0xad3c>
   1c238:	add	r2, r0, #1
   1c23c:	ldr	r0, [r5, #8]
   1c240:	ldr	r1, [r9, #8]
   1c244:	sub	r7, r7, r2
   1c248:	lsl	r2, r2, #2
   1c24c:	add	r0, r0, r7, lsl #2
   1c250:	bl	112a8 <memcpy@plt>
   1c254:	ldr	r0, [r5, #4]
   1c258:	ldr	r2, [r9, #4]
   1c25c:	sub	r1, r0, #1
   1c260:	add	r3, r1, r2, lsl #1
   1c264:	sub	r2, r3, r7
   1c268:	adds	r2, r2, #1
   1c26c:	beq	1c2c8 <__assert_fail@plt+0xadb0>
   1c270:	add	r0, r2, r0
   1c274:	str	r0, [r5, #4]
   1c278:	ldr	r0, [r5, #8]
   1c27c:	ldr	r6, [r0, r1, lsl #2]
   1c280:	ldr	r5, [r0, r3, lsl #2]
   1c284:	cmp	r5, r6
   1c288:	ble	1c2a4 <__assert_fail@plt+0xad8c>
   1c28c:	add	r6, r2, r1
   1c290:	subs	r2, r2, #1
   1c294:	sub	r3, r3, #1
   1c298:	str	r5, [r0, r6, lsl #2]
   1c29c:	bne	1c27c <__assert_fail@plt+0xad64>
   1c2a0:	b	1c2c8 <__assert_fail@plt+0xadb0>
   1c2a4:	add	r5, r2, r1
   1c2a8:	cmp	r1, #0
   1c2ac:	str	r6, [r0, r5, lsl #2]
   1c2b0:	sub	r6, r1, #1
   1c2b4:	mov	r1, r6
   1c2b8:	bgt	1c27c <__assert_fail@plt+0xad64>
   1c2bc:	add	r1, r0, r7, lsl #2
   1c2c0:	lsl	r2, r2, #2
   1c2c4:	bl	112a8 <memcpy@plt>
   1c2c8:	mov	r0, r8
   1c2cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c2d0:	str	r0, [r5, #4]
   1c2d4:	ldr	r0, [r5, #8]
   1c2d8:	ldr	r2, [r9, #4]
   1c2dc:	ldr	r1, [r9, #8]
   1c2e0:	b	1c2c0 <__assert_fail@plt+0xada8>
   1c2e4:	mov	r8, #12
   1c2e8:	b	1c2c8 <__assert_fail@plt+0xadb0>
   1c2ec:	push	{r4, r5, r6, sl, fp, lr}
   1c2f0:	add	fp, sp, #16
   1c2f4:	mov	r5, r0
   1c2f8:	ldr	r0, [r0]
   1c2fc:	mov	r4, r1
   1c300:	mov	r6, r2
   1c304:	ldr	r1, [r0, r1, lsl #3]!
   1c308:	ldr	r2, [r0, #4]
   1c30c:	mov	r0, r5
   1c310:	bl	1ba98 <__assert_fail@plt+0xa580>
   1c314:	cmn	r0, #1
   1c318:	ldrne	r1, [r5]
   1c31c:	movwne	r3, #65280	; 0xff00
   1c320:	movtne	r3, #3
   1c324:	addne	r1, r1, r0, lsl #3
   1c328:	ldrne	r2, [r1, #4]
   1c32c:	bfine	r2, r6, #8, #10
   1c330:	strne	r2, [r1, #4]
   1c334:	ldrne	r1, [r5]
   1c338:	addne	r2, r1, r4, lsl #3
   1c33c:	addne	r1, r1, r0, lsl #3
   1c340:	ldrne	r2, [r2, #4]
   1c344:	andne	r2, r2, r3
   1c348:	ldrne	r3, [r1, #4]
   1c34c:	orrne	r2, r2, r3
   1c350:	strne	r2, [r1, #4]
   1c354:	ldrne	r1, [r5]
   1c358:	addne	r1, r1, r0, lsl #3
   1c35c:	ldrne	r2, [r1, #4]
   1c360:	orrne	r2, r2, #262144	; 0x40000
   1c364:	strne	r2, [r1, #4]
   1c368:	ldrne	r1, [r5, #16]
   1c36c:	strne	r4, [r1, r0, lsl #2]
   1c370:	pop	{r4, r5, r6, sl, fp, pc}
   1c374:	push	{r4, r5, r6, sl, fp, lr}
   1c378:	add	fp, sp, #16
   1c37c:	ldr	r2, [r0]
   1c380:	mov	r5, r1
   1c384:	mov	r4, r0
   1c388:	cmp	r2, #0
   1c38c:	beq	1c3b8 <__assert_fail@plt+0xaea0>
   1c390:	ldr	r1, [r4, #4]
   1c394:	cmp	r1, #0
   1c398:	bne	1c3e4 <__assert_fail@plt+0xaecc>
   1c39c:	ldr	r0, [r4, #8]
   1c3a0:	str	r5, [r0]
   1c3a4:	ldr	r0, [r4, #4]
   1c3a8:	mov	r6, #1
   1c3ac:	add	r0, r0, #1
   1c3b0:	str	r0, [r4, #4]
   1c3b4:	b	1c3dc <__assert_fail@plt+0xaec4>
   1c3b8:	mov	r6, #1
   1c3bc:	mov	r0, #4
   1c3c0:	str	r6, [r4]
   1c3c4:	str	r6, [r4, #4]
   1c3c8:	bl	22220 <__assert_fail@plt+0x10d08>
   1c3cc:	cmp	r0, #0
   1c3d0:	str	r0, [r4, #8]
   1c3d4:	beq	1c414 <__assert_fail@plt+0xaefc>
   1c3d8:	str	r5, [r0]
   1c3dc:	mov	r0, r6
   1c3e0:	pop	{r4, r5, r6, sl, fp, pc}
   1c3e4:	cmp	r2, r1
   1c3e8:	bne	1c424 <__assert_fail@plt+0xaf0c>
   1c3ec:	lsl	r0, r2, #1
   1c3f0:	lsl	r1, r2, #3
   1c3f4:	str	r0, [r4]
   1c3f8:	ldr	r0, [r4, #8]
   1c3fc:	bl	22250 <__assert_fail@plt+0x10d38>
   1c400:	cmp	r0, #0
   1c404:	beq	1c4a0 <__assert_fail@plt+0xaf88>
   1c408:	str	r0, [r4, #8]
   1c40c:	ldr	r1, [r4, #4]
   1c410:	b	1c428 <__assert_fail@plt+0xaf10>
   1c414:	mov	r6, #0
   1c418:	str	r6, [r4]
   1c41c:	str	r6, [r4, #4]
   1c420:	b	1c3dc <__assert_fail@plt+0xaec4>
   1c424:	ldr	r0, [r4, #8]
   1c428:	ldr	r2, [r0]
   1c42c:	cmp	r2, r5
   1c430:	ble	1c468 <__assert_fail@plt+0xaf50>
   1c434:	cmp	r1, #1
   1c438:	blt	1c498 <__assert_fail@plt+0xaf80>
   1c43c:	add	r2, r0, r1, lsl #2
   1c440:	add	r1, r1, #1
   1c444:	mov	r3, r2
   1c448:	ldr	r6, [r3, #-4]!
   1c44c:	sub	r1, r1, #1
   1c450:	cmp	r1, #1
   1c454:	str	r6, [r2]
   1c458:	mov	r2, r3
   1c45c:	bgt	1c448 <__assert_fail@plt+0xaf30>
   1c460:	sub	r1, r1, #1
   1c464:	b	1c498 <__assert_fail@plt+0xaf80>
   1c468:	add	r2, r0, r1, lsl #2
   1c46c:	ldr	r3, [r2, #-4]
   1c470:	cmp	r3, r5
   1c474:	ble	1c498 <__assert_fail@plt+0xaf80>
   1c478:	sub	r1, r1, #2
   1c47c:	str	r3, [r2]
   1c480:	sub	r1, r1, #1
   1c484:	ldr	r3, [r2, #-8]
   1c488:	sub	r2, r2, #4
   1c48c:	cmp	r3, r5
   1c490:	bgt	1c47c <__assert_fail@plt+0xaf64>
   1c494:	add	r1, r1, #2
   1c498:	str	r5, [r0, r1, lsl #2]
   1c49c:	b	1c3a4 <__assert_fail@plt+0xae8c>
   1c4a0:	mov	r6, #0
   1c4a4:	b	1c3dc <__assert_fail@plt+0xaec4>
   1c4a8:	push	{r4, r5, fp, lr}
   1c4ac:	add	fp, sp, #8
   1c4b0:	mov	r5, r0
   1c4b4:	mov	r4, r1
   1c4b8:	ldr	r0, [r0]
   1c4bc:	ldr	r1, [r5, #4]
   1c4c0:	cmp	r0, r1
   1c4c4:	bne	1c4f8 <__assert_fail@plt+0xafe0>
   1c4c8:	mov	r1, #2
   1c4cc:	add	r0, r1, r0, lsl #1
   1c4d0:	str	r0, [r5]
   1c4d4:	lsl	r1, r0, #2
   1c4d8:	ldr	r0, [r5, #8]
   1c4dc:	bl	22250 <__assert_fail@plt+0x10d38>
   1c4e0:	cmp	r0, #0
   1c4e4:	moveq	r0, #0
   1c4e8:	popeq	{r4, r5, fp, pc}
   1c4ec:	str	r0, [r5, #8]
   1c4f0:	ldr	r1, [r5, #4]
   1c4f4:	b	1c4fc <__assert_fail@plt+0xafe4>
   1c4f8:	ldr	r0, [r5, #8]
   1c4fc:	add	r2, r1, #1
   1c500:	str	r2, [r5, #4]
   1c504:	str	r4, [r0, r1, lsl #2]
   1c508:	mov	r0, #1
   1c50c:	pop	{r4, r5, fp, pc}
   1c510:	push	{r4, r5, fp, lr}
   1c514:	add	fp, sp, #8
   1c518:	mov	r4, r0
   1c51c:	ldr	r0, [r1, #4]
   1c520:	mov	r5, r1
   1c524:	str	r0, [r4, #4]
   1c528:	ldr	r1, [r1, #4]
   1c52c:	cmp	r1, #1
   1c530:	blt	1c564 <__assert_fail@plt+0xb04c>
   1c534:	str	r0, [r4]
   1c538:	lsl	r0, r0, #2
   1c53c:	bl	22220 <__assert_fail@plt+0x10d08>
   1c540:	cmp	r0, #0
   1c544:	str	r0, [r4, #8]
   1c548:	beq	1c578 <__assert_fail@plt+0xb060>
   1c54c:	ldr	r2, [r5, #4]
   1c550:	ldr	r1, [r5, #8]
   1c554:	lsl	r2, r2, #2
   1c558:	bl	112a8 <memcpy@plt>
   1c55c:	mov	r0, #0
   1c560:	pop	{r4, r5, fp, pc}
   1c564:	mov	r0, #0
   1c568:	str	r0, [r4]
   1c56c:	str	r0, [r4, #4]
   1c570:	str	r0, [r4, #8]
   1c574:	pop	{r4, r5, fp, pc}
   1c578:	mov	r0, #0
   1c57c:	str	r0, [r4]
   1c580:	str	r0, [r4, #4]
   1c584:	mov	r0, #12
   1c588:	pop	{r4, r5, fp, pc}
   1c58c:	ldr	r2, [r0, #4]
   1c590:	cmp	r2, #1
   1c594:	movlt	r0, #0
   1c598:	bxlt	lr
   1c59c:	push	{r4, r5, r6, sl, fp, lr}
   1c5a0:	add	fp, sp, #16
   1c5a4:	ldr	ip, [r0, #8]
   1c5a8:	subs	r2, r2, #1
   1c5ac:	mov	r0, #0
   1c5b0:	mov	r3, #0
   1c5b4:	beq	1c5e0 <__assert_fail@plt+0xb0c8>
   1c5b8:	mov	r3, #0
   1c5bc:	mov	lr, #1
   1c5c0:	add	r4, r2, r3
   1c5c4:	lsr	r5, r4, #1
   1c5c8:	ldr	r6, [ip, r5, lsl #2]
   1c5cc:	cmp	r6, r1
   1c5d0:	movge	r2, r5
   1c5d4:	addlt	r3, lr, r4, lsr #1
   1c5d8:	cmp	r3, r2
   1c5dc:	bcc	1c5c0 <__assert_fail@plt+0xb0a8>
   1c5e0:	ldr	r2, [ip, r3, lsl #2]
   1c5e4:	cmp	r2, r1
   1c5e8:	addeq	r0, r3, #1
   1c5ec:	pop	{r4, r5, r6, sl, fp, pc}
   1c5f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5f4:	add	fp, sp, #28
   1c5f8:	sub	sp, sp, #20
   1c5fc:	ldr	lr, [r2, #4]
   1c600:	cmp	lr, #0
   1c604:	beq	1c90c <__assert_fail@plt+0xb3f4>
   1c608:	mov	r8, r3
   1c60c:	mov	sl, r2
   1c610:	add	r7, lr, r3
   1c614:	cmp	lr, #1
   1c618:	str	r0, [sp, #4]
   1c61c:	blt	1c638 <__assert_fail@plt+0xb120>
   1c620:	ldr	r3, [sl, #8]
   1c624:	mov	r2, lr
   1c628:	ldr	r0, [r3], #4
   1c62c:	subs	r2, r2, #1
   1c630:	add	r7, r0, r7
   1c634:	bne	1c628 <__assert_fail@plt+0xb110>
   1c638:	ldr	r0, [r1, #32]
   1c63c:	str	r1, [sp, #12]
   1c640:	ldr	r1, [r1, #68]	; 0x44
   1c644:	and	r1, r1, r7
   1c648:	add	r2, r1, r1, lsl #1
   1c64c:	ldr	r1, [r0, r2, lsl #2]
   1c650:	cmp	r1, #1
   1c654:	blt	1c6e4 <__assert_fail@plt+0xb1cc>
   1c658:	add	r0, r0, r2, lsl #2
   1c65c:	sub	ip, lr, #1
   1c660:	mov	r3, #0
   1c664:	ldr	r9, [r0, #8]
   1c668:	b	1c6a8 <__assert_fail@plt+0xb190>
   1c66c:	ldr	r0, [r5, #4]
   1c670:	cmp	r0, lr
   1c674:	bne	1c6d8 <__assert_fail@plt+0xb1c0>
   1c678:	mov	r0, ip
   1c67c:	add	r6, r0, #1
   1c680:	cmp	r6, #1
   1c684:	blt	1c914 <__assert_fail@plt+0xb3fc>
   1c688:	ldr	r6, [sl, #8]
   1c68c:	ldr	r2, [r5, #8]
   1c690:	ldr	r6, [r6, r0, lsl #2]
   1c694:	ldr	r2, [r2, r0, lsl #2]
   1c698:	sub	r0, r0, #1
   1c69c:	cmp	r2, r6
   1c6a0:	beq	1c67c <__assert_fail@plt+0xb164>
   1c6a4:	b	1c6d8 <__assert_fail@plt+0xb1c0>
   1c6a8:	ldr	r4, [r9, r3, lsl #2]
   1c6ac:	ldr	r0, [r4]
   1c6b0:	cmp	r0, r7
   1c6b4:	bne	1c6d8 <__assert_fail@plt+0xb1c0>
   1c6b8:	ldrb	r0, [r4, #52]	; 0x34
   1c6bc:	and	r0, r0, #15
   1c6c0:	cmp	r0, r8
   1c6c4:	bne	1c6d8 <__assert_fail@plt+0xb1c0>
   1c6c8:	cmp	sl, #0
   1c6cc:	ldrne	r5, [r4, #40]	; 0x28
   1c6d0:	cmpne	r5, #0
   1c6d4:	bne	1c66c <__assert_fail@plt+0xb154>
   1c6d8:	add	r3, r3, #1
   1c6dc:	cmp	r3, r1
   1c6e0:	blt	1c6a8 <__assert_fail@plt+0xb190>
   1c6e4:	mov	r0, #56	; 0x38
   1c6e8:	mov	r1, #1
   1c6ec:	bl	221cc <__assert_fail@plt+0x10cb4>
   1c6f0:	cmp	r0, #0
   1c6f4:	beq	1c8f8 <__assert_fail@plt+0xb3e0>
   1c6f8:	add	r5, r0, #4
   1c6fc:	mov	r4, r0
   1c700:	mov	r1, sl
   1c704:	mov	r0, r5
   1c708:	bl	1c510 <__assert_fail@plt+0xaff8>
   1c70c:	cmp	r0, #0
   1c710:	bne	1c920 <__assert_fail@plt+0xb408>
   1c714:	str	r5, [r4, #40]	; 0x28
   1c718:	and	r0, r8, #15
   1c71c:	ldr	r6, [sp, #12]
   1c720:	ldrb	r1, [r4, #52]	; 0x34
   1c724:	and	r1, r1, #240	; 0xf0
   1c728:	orr	r0, r1, r0
   1c72c:	strb	r0, [r4, #52]	; 0x34
   1c730:	ldr	r0, [sl, #4]
   1c734:	cmp	r0, #1
   1c738:	blt	1c8d8 <__assert_fail@plt+0xb3c0>
   1c73c:	movw	r9, #65280	; 0xff00
   1c740:	and	r0, r8, #4
   1c744:	mov	ip, r5
   1c748:	and	lr, r8, #1
   1c74c:	str	r0, [sp]
   1c750:	and	r0, r8, #2
   1c754:	movt	r9, #3
   1c758:	mov	r8, #0
   1c75c:	str	r0, [sp, #8]
   1c760:	add	r3, r9, #255	; 0xff
   1c764:	mov	r0, #0
   1c768:	str	r3, [sp, #16]
   1c76c:	b	1c7a4 <__assert_fail@plt+0xb28c>
   1c770:	sub	r2, r2, #1
   1c774:	cmp	r2, r1
   1c778:	str	r2, [r4, #8]
   1c77c:	ble	1c8c0 <__assert_fail@plt+0xb3a8>
   1c780:	ldr	r2, [r4, #12]
   1c784:	add	r3, r2, r1, lsl #2
   1c788:	ldr	r3, [r3, #4]
   1c78c:	str	r3, [r2, r1, lsl #2]
   1c790:	add	r1, r1, #1
   1c794:	ldr	r3, [r4, #8]
   1c798:	cmp	r1, r3
   1c79c:	blt	1c784 <__assert_fail@plt+0xb26c>
   1c7a0:	b	1c8c0 <__assert_fail@plt+0xb3a8>
   1c7a4:	ldr	r1, [sl, #8]
   1c7a8:	ldr	r2, [r6]
   1c7ac:	ldr	r1, [r1, r8, lsl #2]
   1c7b0:	add	r1, r2, r1, lsl #3
   1c7b4:	ldr	r5, [r1, #4]
   1c7b8:	and	r1, r5, r3
   1c7bc:	cmp	r1, #1
   1c7c0:	beq	1c8c8 <__assert_fail@plt+0xb3b0>
   1c7c4:	ldrb	r3, [r4, #52]	; 0x34
   1c7c8:	mov	r2, #32
   1c7cc:	and	r1, r5, r9
   1c7d0:	and	r2, r2, r5, lsr #15
   1c7d4:	orr	r2, r3, r2
   1c7d8:	uxtb	r3, r5
   1c7dc:	cmp	r3, #2
   1c7e0:	strb	r2, [r4, #52]	; 0x34
   1c7e4:	beq	1c7f8 <__assert_fail@plt+0xb2e0>
   1c7e8:	cmp	r3, #4
   1c7ec:	bne	1c804 <__assert_fail@plt+0xb2ec>
   1c7f0:	mov	r3, #64	; 0x40
   1c7f4:	b	1c7fc <__assert_fail@plt+0xb2e4>
   1c7f8:	mov	r3, #16
   1c7fc:	orr	r2, r2, r3
   1c800:	strb	r2, [r4, #52]	; 0x34
   1c804:	cmp	r1, #0
   1c808:	beq	1c8c4 <__assert_fail@plt+0xb3ac>
   1c80c:	ldr	r1, [r4, #40]	; 0x28
   1c810:	cmp	r1, ip
   1c814:	bne	1c868 <__assert_fail@plt+0xb350>
   1c818:	mov	r0, #12
   1c81c:	mov	r6, lr
   1c820:	mov	r9, ip
   1c824:	bl	22220 <__assert_fail@plt+0x10d08>
   1c828:	cmp	r0, #0
   1c82c:	beq	1c8f0 <__assert_fail@plt+0xb3d8>
   1c830:	mov	r1, sl
   1c834:	str	r0, [r4, #40]	; 0x28
   1c838:	bl	1c510 <__assert_fail@plt+0xaff8>
   1c83c:	cmp	r0, #0
   1c840:	bne	1c8f0 <__assert_fail@plt+0xb3d8>
   1c844:	ldrb	r0, [r4, #52]	; 0x34
   1c848:	mov	lr, r6
   1c84c:	ldr	r6, [sp, #12]
   1c850:	mov	ip, r9
   1c854:	movw	r9, #65280	; 0xff00
   1c858:	movt	r9, #3
   1c85c:	orr	r0, r0, #128	; 0x80
   1c860:	strb	r0, [r4, #52]	; 0x34
   1c864:	mov	r0, #0
   1c868:	cmp	lr, #0
   1c86c:	bne	1c878 <__assert_fail@plt+0xb360>
   1c870:	ands	r1, r5, #256	; 0x100
   1c874:	bne	1c8ac <__assert_fail@plt+0xb394>
   1c878:	cmp	lr, #0
   1c87c:	andsne	r1, r5, #512	; 0x200
   1c880:	bne	1c8ac <__assert_fail@plt+0xb394>
   1c884:	ldr	r1, [sp, #8]
   1c888:	cmp	r1, #0
   1c88c:	bne	1c898 <__assert_fail@plt+0xb380>
   1c890:	ands	r1, r5, #4096	; 0x1000
   1c894:	bne	1c8ac <__assert_fail@plt+0xb394>
   1c898:	ldr	r1, [sp]
   1c89c:	cmp	r1, #0
   1c8a0:	bne	1c8c4 <__assert_fail@plt+0xb3ac>
   1c8a4:	ands	r1, r5, #16384	; 0x4000
   1c8a8:	beq	1c8c4 <__assert_fail@plt+0xb3ac>
   1c8ac:	sub	r1, r8, r0
   1c8b0:	cmp	r1, #0
   1c8b4:	ldrge	r2, [r4, #8]
   1c8b8:	cmpge	r2, r1
   1c8bc:	bgt	1c770 <__assert_fail@plt+0xb258>
   1c8c0:	add	r0, r0, #1
   1c8c4:	ldr	r3, [sp, #16]
   1c8c8:	ldr	r1, [sl, #4]
   1c8cc:	add	r8, r8, #1
   1c8d0:	cmp	r8, r1
   1c8d4:	blt	1c7a4 <__assert_fail@plt+0xb28c>
   1c8d8:	mov	r0, r6
   1c8dc:	mov	r1, r4
   1c8e0:	mov	r2, r7
   1c8e4:	bl	1c92c <__assert_fail@plt+0xb414>
   1c8e8:	cmp	r0, #0
   1c8ec:	beq	1c914 <__assert_fail@plt+0xb3fc>
   1c8f0:	mov	r0, r4
   1c8f4:	bl	17a5c <__assert_fail@plt+0x6544>
   1c8f8:	ldr	r1, [sp, #4]
   1c8fc:	mov	r0, #12
   1c900:	mov	r4, #0
   1c904:	str	r0, [r1]
   1c908:	b	1c914 <__assert_fail@plt+0xb3fc>
   1c90c:	mov	r4, #0
   1c910:	str	r4, [r0]
   1c914:	mov	r0, r4
   1c918:	sub	sp, fp, #28
   1c91c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c920:	mov	r0, r4
   1c924:	bl	223dc <__assert_fail@plt+0x10ec4>
   1c928:	b	1c8f8 <__assert_fail@plt+0xb3e0>
   1c92c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c930:	add	fp, sp, #24
   1c934:	str	r2, [r1]
   1c938:	mov	r4, r1
   1c93c:	mov	r7, r0
   1c940:	mov	r0, #0
   1c944:	mov	r9, r2
   1c948:	ldr	r1, [r1, #8]
   1c94c:	str	r1, [r4, #16]
   1c950:	str	r0, [r4, #20]
   1c954:	lsl	r0, r1, #2
   1c958:	bl	22220 <__assert_fail@plt+0x10d08>
   1c95c:	mov	r8, #12
   1c960:	cmp	r0, #0
   1c964:	str	r0, [r4, #24]
   1c968:	beq	1c9fc <__assert_fail@plt+0xb4e4>
   1c96c:	ldr	r0, [r4, #8]
   1c970:	cmp	r0, #1
   1c974:	blt	1c9bc <__assert_fail@plt+0xb4a4>
   1c978:	add	r5, r4, #16
   1c97c:	mov	r6, #0
   1c980:	ldr	r1, [r4, #12]
   1c984:	ldr	r2, [r7]
   1c988:	ldr	r1, [r1, r6, lsl #2]
   1c98c:	add	r2, r2, r1, lsl #3
   1c990:	ldrb	r2, [r2, #4]
   1c994:	tst	r2, #8
   1c998:	bne	1c9b0 <__assert_fail@plt+0xb498>
   1c99c:	mov	r0, r5
   1c9a0:	bl	1c4a8 <__assert_fail@plt+0xaf90>
   1c9a4:	cmp	r0, #0
   1c9a8:	beq	1c9fc <__assert_fail@plt+0xb4e4>
   1c9ac:	ldr	r0, [r4, #8]
   1c9b0:	add	r6, r6, #1
   1c9b4:	cmp	r6, r0
   1c9b8:	blt	1c980 <__assert_fail@plt+0xb468>
   1c9bc:	ldr	r1, [r7, #68]	; 0x44
   1c9c0:	ldr	r0, [r7, #32]
   1c9c4:	and	r1, r1, r9
   1c9c8:	mov	r5, r0
   1c9cc:	add	r2, r1, r1, lsl #1
   1c9d0:	ldr	r1, [r5, r2, lsl #2]!
   1c9d4:	mov	r6, r5
   1c9d8:	ldr	r3, [r6, #4]!
   1c9dc:	cmp	r3, r1
   1c9e0:	ble	1ca04 <__assert_fail@plt+0xb4ec>
   1c9e4:	add	r0, r0, r2, lsl #2
   1c9e8:	ldr	r0, [r0, #8]
   1c9ec:	add	r2, r1, #1
   1c9f0:	mov	r8, #0
   1c9f4:	str	r2, [r5]
   1c9f8:	str	r4, [r0, r1, lsl #2]
   1c9fc:	mov	r0, r8
   1ca00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ca04:	add	r7, r0, r2, lsl #2
   1ca08:	mov	r2, #2
   1ca0c:	ldr	r0, [r7, #8]!
   1ca10:	add	r9, r2, r1, lsl #1
   1ca14:	lsl	r1, r9, #2
   1ca18:	bl	22250 <__assert_fail@plt+0x10d38>
   1ca1c:	cmp	r0, #0
   1ca20:	beq	1c9fc <__assert_fail@plt+0xb4e4>
   1ca24:	str	r0, [r7]
   1ca28:	str	r9, [r6]
   1ca2c:	ldr	r1, [r5]
   1ca30:	b	1c9ec <__assert_fail@plt+0xb4d4>
   1ca34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca38:	add	fp, sp, #28
   1ca3c:	sub	sp, sp, #36	; 0x24
   1ca40:	mov	r4, r0
   1ca44:	ldr	r0, [r0, #24]
   1ca48:	mov	r6, r2
   1ca4c:	mov	r9, r1
   1ca50:	cmp	r0, r1
   1ca54:	ble	1cbb8 <__assert_fail@plt+0xb6a0>
   1ca58:	ldr	r0, [r4, #80]	; 0x50
   1ca5c:	mov	r1, #4
   1ca60:	mov	r5, r9
   1ca64:	cmp	r0, #2
   1ca68:	movge	r0, #0
   1ca6c:	strge	r0, [r4, #16]
   1ca70:	strge	r0, [r4, #20]
   1ca74:	mov	r0, #0
   1ca78:	tst	r6, #1
   1ca7c:	str	r0, [r4, #24]
   1ca80:	str	r0, [r4, #28]
   1ca84:	str	r0, [r4, #32]
   1ca88:	strb	r0, [r4, #76]	; 0x4c
   1ca8c:	movweq	r1, #6
   1ca90:	ldr	r2, [r4, #44]	; 0x2c
   1ca94:	ldr	r3, [r4, #52]	; 0x34
   1ca98:	str	r2, [r4, #48]	; 0x30
   1ca9c:	str	r3, [r4, #56]	; 0x38
   1caa0:	str	r1, [r4, #60]	; 0x3c
   1caa4:	ldrb	r1, [r4, #75]	; 0x4b
   1caa8:	cmp	r1, #0
   1caac:	ldreq	r1, [r4]
   1cab0:	streq	r1, [r4, #4]
   1cab4:	cmp	r5, #0
   1cab8:	beq	1cb44 <__assert_fail@plt+0xb62c>
   1cabc:	ldr	r1, [r4, #32]
   1cac0:	cmp	r5, r1
   1cac4:	bge	1cbc0 <__assert_fail@plt+0xb6a8>
   1cac8:	ldrb	r0, [r4, #76]	; 0x4c
   1cacc:	cmp	r0, #0
   1cad0:	bne	1ccc0 <__assert_fail@plt+0xb7a8>
   1cad4:	sub	r1, r5, #1
   1cad8:	mov	r0, r4
   1cadc:	mov	r2, r6
   1cae0:	bl	1d260 <__assert_fail@plt+0xbd48>
   1cae4:	str	r0, [r4, #60]	; 0x3c
   1cae8:	ldr	r0, [r4, #80]	; 0x50
   1caec:	cmp	r0, #2
   1caf0:	blt	1cb0c <__assert_fail@plt+0xb5f4>
   1caf4:	ldr	r2, [r4, #28]
   1caf8:	ldr	r0, [r4, #8]
   1cafc:	sub	r2, r2, r5
   1cb00:	add	r1, r0, r5, lsl #2
   1cb04:	lsl	r2, r2, #2
   1cb08:	bl	11278 <memmove@plt>
   1cb0c:	ldrb	r0, [r4, #75]	; 0x4b
   1cb10:	cmp	r0, #0
   1cb14:	bne	1cdb4 <__assert_fail@plt+0xb89c>
   1cb18:	ldr	r0, [r4, #28]
   1cb1c:	ldr	r1, [r4, #32]
   1cb20:	sub	r0, r0, r5
   1cb24:	sub	r1, r1, r5
   1cb28:	str	r0, [r4, #28]
   1cb2c:	str	r1, [r4, #32]
   1cb30:	ldrb	r0, [r4, #75]	; 0x4b
   1cb34:	cmp	r0, #0
   1cb38:	ldreq	r0, [r4, #4]
   1cb3c:	addeq	r0, r0, r5
   1cb40:	streq	r0, [r4, #4]
   1cb44:	str	r9, [r4, #24]
   1cb48:	ldr	r0, [r4, #48]	; 0x30
   1cb4c:	ldr	r1, [r4, #56]	; 0x38
   1cb50:	ldr	r2, [r4, #80]	; 0x50
   1cb54:	sub	r0, r0, r5
   1cb58:	cmp	r2, #2
   1cb5c:	sub	r1, r1, r5
   1cb60:	str	r0, [r4, #48]	; 0x30
   1cb64:	str	r1, [r4, #56]	; 0x38
   1cb68:	blt	1cb8c <__assert_fail@plt+0xb674>
   1cb6c:	ldrb	r0, [r4, #72]	; 0x48
   1cb70:	cmp	r0, #0
   1cb74:	beq	1cba0 <__assert_fail@plt+0xb688>
   1cb78:	mov	r0, r4
   1cb7c:	bl	17c18 <__assert_fail@plt+0x6700>
   1cb80:	cmp	r0, #0
   1cb84:	bne	1cbb0 <__assert_fail@plt+0xb698>
   1cb88:	b	1cba8 <__assert_fail@plt+0xb690>
   1cb8c:	ldrb	r1, [r4, #75]	; 0x4b
   1cb90:	cmp	r1, #0
   1cb94:	bne	1cdcc <__assert_fail@plt+0xb8b4>
   1cb98:	str	r0, [r4, #28]
   1cb9c:	b	1cba8 <__assert_fail@plt+0xb690>
   1cba0:	mov	r0, r4
   1cba4:	bl	181f4 <__assert_fail@plt+0x6cdc>
   1cba8:	mov	r0, #0
   1cbac:	str	r0, [r4, #40]	; 0x28
   1cbb0:	sub	sp, fp, #28
   1cbb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbb8:	sub	r5, r9, r0
   1cbbc:	b	1cab4 <__assert_fail@plt+0xb59c>
   1cbc0:	ldrb	r2, [r4, #76]	; 0x4c
   1cbc4:	ldr	lr, [r4, #28]
   1cbc8:	cmp	r2, #0
   1cbcc:	bne	1d00c <__assert_fail@plt+0xbaf4>
   1cbd0:	mov	r2, #0
   1cbd4:	str	r2, [r4, #28]
   1cbd8:	ldr	r3, [r4, #80]	; 0x50
   1cbdc:	cmp	r3, #2
   1cbe0:	blt	1cde4 <__assert_fail@plt+0xb8cc>
   1cbe4:	ldrb	r2, [r4, #73]	; 0x49
   1cbe8:	cmp	r2, #0
   1cbec:	beq	1cca8 <__assert_fail@plt+0xb790>
   1cbf0:	ldr	r7, [r4]
   1cbf4:	sub	r3, r5, r3
   1cbf8:	add	ip, r7, r0
   1cbfc:	add	r3, ip, r3
   1cc00:	add	r8, ip, r5
   1cc04:	cmp	r3, r7
   1cc08:	movcc	r3, r7
   1cc0c:	mov	r7, r8
   1cc10:	sub	r7, r7, #1
   1cc14:	cmp	r7, r3
   1cc18:	bcc	1cca8 <__assert_fail@plt+0xb790>
   1cc1c:	ldrb	r2, [r7]
   1cc20:	and	r2, r2, #192	; 0xc0
   1cc24:	cmp	r2, #128	; 0x80
   1cc28:	beq	1cc10 <__assert_fail@plt+0xb6f8>
   1cc2c:	ldr	r0, [r4, #48]	; 0x30
   1cc30:	mov	sl, lr
   1cc34:	mov	r1, r7
   1cc38:	add	r3, ip, r0
   1cc3c:	ldr	r0, [r4, #64]	; 0x40
   1cc40:	sub	r2, r3, r7
   1cc44:	cmp	r0, #0
   1cc48:	bne	1d0a8 <__assert_fail@plt+0xbb90>
   1cc4c:	mov	r0, #0
   1cc50:	add	r3, sp, #24
   1cc54:	str	r0, [sp, #28]
   1cc58:	str	r0, [sp, #24]
   1cc5c:	add	r0, sp, #20
   1cc60:	bl	2243c <__assert_fail@plt+0x10f24>
   1cc64:	sub	r1, r8, r7
   1cc68:	mvn	r2, #0
   1cc6c:	cmp	r0, r1
   1cc70:	bcc	1cc94 <__assert_fail@plt+0xb77c>
   1cc74:	cmn	r0, #3
   1cc78:	bhi	1cc94 <__assert_fail@plt+0xb77c>
   1cc7c:	mov	r2, #0
   1cc80:	sub	r0, r0, r1
   1cc84:	str	r2, [r4, #16]
   1cc88:	str	r2, [r4, #20]
   1cc8c:	str	r0, [r4, #28]
   1cc90:	ldr	r2, [sp, #20]
   1cc94:	cmn	r2, #1
   1cc98:	bne	1cfb4 <__assert_fail@plt+0xba9c>
   1cc9c:	ldr	r0, [r4, #24]
   1cca0:	ldr	r1, [r4, #32]
   1cca4:	mov	lr, sl
   1cca8:	add	r8, r1, r0
   1ccac:	cmp	r8, r9
   1ccb0:	bge	1ce8c <__assert_fail@plt+0xb974>
   1ccb4:	add	sl, r4, #16
   1ccb8:	str	lr, [sp]
   1ccbc:	b	1cf54 <__assert_fail@plt+0xba3c>
   1ccc0:	ldr	r8, [r4, #28]
   1ccc4:	ldr	sl, [r4, #12]
   1ccc8:	mov	r0, #0
   1cccc:	mov	r1, r8
   1ccd0:	add	r2, r0, r1
   1ccd4:	add	r2, r2, r2, lsr #31
   1ccd8:	asr	r7, r2, #1
   1ccdc:	ldr	r2, [sl, r7, lsl #2]
   1cce0:	mov	r3, r7
   1cce4:	cmp	r2, r5
   1cce8:	bgt	1ccf8 <__assert_fail@plt+0xb7e0>
   1ccec:	bge	1cd04 <__assert_fail@plt+0xb7ec>
   1ccf0:	add	r0, r7, #1
   1ccf4:	mov	r3, r1
   1ccf8:	cmp	r0, r3
   1ccfc:	mov	r1, r3
   1cd00:	blt	1ccd0 <__assert_fail@plt+0xb7b8>
   1cd04:	cmp	r2, r5
   1cd08:	mov	r0, r4
   1cd0c:	mov	r2, r6
   1cd10:	addlt	r7, r7, #1
   1cd14:	sub	r1, r7, #1
   1cd18:	bl	1d260 <__assert_fail@plt+0xbd48>
   1cd1c:	cmp	r8, r5
   1cd20:	str	r0, [r4, #60]	; 0x3c
   1cd24:	ble	1cd38 <__assert_fail@plt+0xb820>
   1cd28:	cmp	r7, r5
   1cd2c:	ldreq	r0, [sl, r5, lsl #2]
   1cd30:	cmpeq	r0, r5
   1cd34:	beq	1ceb0 <__assert_fail@plt+0xb998>
   1cd38:	mov	r0, #0
   1cd3c:	strb	r0, [r4, #76]	; 0x4c
   1cd40:	sub	r0, r5, r9
   1cd44:	ldr	r1, [r4, #44]	; 0x2c
   1cd48:	ldr	r2, [r4, #52]	; 0x34
   1cd4c:	add	r1, r0, r1
   1cd50:	add	r0, r0, r2
   1cd54:	str	r1, [r4, #48]	; 0x30
   1cd58:	sub	r1, sl, #4
   1cd5c:	str	r0, [r4, #56]	; 0x38
   1cd60:	mov	r0, r7
   1cd64:	cmp	r7, #1
   1cd68:	blt	1cd7c <__assert_fail@plt+0xb864>
   1cd6c:	ldr	r2, [r1, r0, lsl #2]
   1cd70:	sub	r7, r0, #1
   1cd74:	cmp	r2, r5
   1cd78:	beq	1cd60 <__assert_fail@plt+0xb848>
   1cd7c:	cmp	r0, r8
   1cd80:	bge	1cda0 <__assert_fail@plt+0xb888>
   1cd84:	ldr	r1, [r4, #8]
   1cd88:	ldr	r2, [r1, r0, lsl #2]
   1cd8c:	cmn	r2, #1
   1cd90:	bne	1cda0 <__assert_fail@plt+0xb888>
   1cd94:	add	r0, r0, #1
   1cd98:	cmp	r0, r8
   1cd9c:	blt	1cd88 <__assert_fail@plt+0xb870>
   1cda0:	cmp	r0, r8
   1cda4:	bne	1ce40 <__assert_fail@plt+0xb928>
   1cda8:	mov	r0, #0
   1cdac:	str	r0, [r4, #28]
   1cdb0:	b	1d004 <__assert_fail@plt+0xbaec>
   1cdb4:	ldr	r2, [r4, #28]
   1cdb8:	ldr	r0, [r4, #4]
   1cdbc:	add	r1, r0, r5
   1cdc0:	sub	r2, r2, r5
   1cdc4:	bl	11278 <memmove@plt>
   1cdc8:	b	1cb18 <__assert_fail@plt+0xb600>
   1cdcc:	ldrb	r0, [r4, #72]	; 0x48
   1cdd0:	cmp	r0, #0
   1cdd4:	beq	1ce98 <__assert_fail@plt+0xb980>
   1cdd8:	mov	r0, r4
   1cddc:	bl	18188 <__assert_fail@plt+0x6c70>
   1cde0:	b	1cba8 <__assert_fail@plt+0xb690>
   1cde4:	ldr	r3, [r4]
   1cde8:	add	r0, r5, r0
   1cdec:	ldr	r1, [r4, #64]	; 0x40
   1cdf0:	add	r0, r3, r0
   1cdf4:	cmp	r1, #0
   1cdf8:	ldrb	r0, [r0, #-1]
   1cdfc:	str	r2, [r4, #32]
   1ce00:	ldrbne	r0, [r1, r0]
   1ce04:	ldr	r1, [r4, #68]	; 0x44
   1ce08:	ubfx	r2, r0, #5, #3
   1ce0c:	and	r3, r0, #31
   1ce10:	ldr	r2, [r1, r2, lsl #2]
   1ce14:	mov	r1, #1
   1ce18:	tst	r2, r1, lsl r3
   1ce1c:	bne	1ce38 <__assert_fail@plt+0xb920>
   1ce20:	mov	r1, #0
   1ce24:	cmp	r0, #10
   1ce28:	bne	1ce38 <__assert_fail@plt+0xb920>
   1ce2c:	ldrb	r1, [r4, #77]	; 0x4d
   1ce30:	cmp	r1, #0
   1ce34:	movwne	r1, #2
   1ce38:	str	r1, [r4, #60]	; 0x3c
   1ce3c:	b	1cb30 <__assert_fail@plt+0xb618>
   1ce40:	ldr	r0, [sl, r0, lsl #2]
   1ce44:	subs	r2, r0, r5
   1ce48:	str	r2, [r4, #28]
   1ce4c:	beq	1cf24 <__assert_fail@plt+0xba0c>
   1ce50:	cmp	r2, #1
   1ce54:	blt	1ce78 <__assert_fail@plt+0xb960>
   1ce58:	ldr	r0, [r4, #8]
   1ce5c:	mov	r1, #0
   1ce60:	mvn	r3, #0
   1ce64:	str	r3, [r0, r1, lsl #2]
   1ce68:	add	r1, r1, #1
   1ce6c:	ldr	r2, [r4, #28]
   1ce70:	cmp	r1, r2
   1ce74:	blt	1ce64 <__assert_fail@plt+0xb94c>
   1ce78:	ldr	r0, [r4, #4]
   1ce7c:	mov	r1, #255	; 0xff
   1ce80:	bl	1141c <memset@plt>
   1ce84:	ldr	r0, [r4, #28]
   1ce88:	b	1d004 <__assert_fail@plt+0xbaec>
   1ce8c:	sub	r7, r8, r9
   1ce90:	str	r7, [r4, #28]
   1ce94:	b	1cfe4 <__assert_fail@plt+0xbacc>
   1ce98:	ldr	r0, [r4, #64]	; 0x40
   1ce9c:	cmp	r0, #0
   1cea0:	beq	1cba8 <__assert_fail@plt+0xb690>
   1cea4:	mov	r0, r4
   1cea8:	bl	183d0 <__assert_fail@plt+0x6eb8>
   1ceac:	b	1cba8 <__assert_fail@plt+0xb690>
   1ceb0:	ldr	r0, [r4, #8]
   1ceb4:	sub	r2, r8, r5
   1ceb8:	lsl	r2, r2, #2
   1cebc:	add	r1, r0, r5, lsl #2
   1cec0:	bl	11278 <memmove@plt>
   1cec4:	ldr	r2, [r4, #28]
   1cec8:	ldr	r0, [r4, #4]
   1cecc:	add	r1, r0, r5
   1ced0:	sub	r2, r2, r5
   1ced4:	bl	11278 <memmove@plt>
   1ced8:	ldr	r0, [r4, #28]
   1cedc:	ldr	r1, [r4, #32]
   1cee0:	sub	r0, r0, r5
   1cee4:	sub	r1, r1, r5
   1cee8:	cmp	r0, #1
   1ceec:	str	r0, [r4, #28]
   1cef0:	str	r1, [r4, #32]
   1cef4:	blt	1cb30 <__assert_fail@plt+0xb618>
   1cef8:	ldr	r0, [r4, #12]
   1cefc:	mov	r2, #0
   1cf00:	add	r1, r0, r5, lsl #2
   1cf04:	ldr	r3, [r1, r2, lsl #2]
   1cf08:	sub	r3, r3, r5
   1cf0c:	str	r3, [r0, r2, lsl #2]
   1cf10:	add	r2, r2, #1
   1cf14:	ldr	r3, [r4, #28]
   1cf18:	cmp	r2, r3
   1cf1c:	blt	1cf04 <__assert_fail@plt+0xb9ec>
   1cf20:	b	1cb30 <__assert_fail@plt+0xb618>
   1cf24:	mov	r0, #0
   1cf28:	b	1d004 <__assert_fail@plt+0xbaec>
   1cf2c:	cmp	r7, #0
   1cf30:	ldr	r3, [sp, #4]
   1cf34:	ldr	r1, [sp, #8]
   1cf38:	mov	r2, #0
   1cf3c:	cmpne	r0, #0
   1cf40:	ldrne	r0, [r4]
   1cf44:	ldrbne	r2, [r0, r8]
   1cf48:	stm	sl, {r1, r3}
   1cf4c:	mov	r0, #1
   1cf50:	b	1cf94 <__assert_fail@plt+0xba7c>
   1cf54:	ldr	r0, [r4]
   1cf58:	ldr	r2, [r4, #44]	; 0x2c
   1cf5c:	mov	r3, sl
   1cf60:	add	r1, r0, r8
   1cf64:	ldr	r0, [sl]
   1cf68:	sub	r7, r2, r8
   1cf6c:	mov	r2, r7
   1cf70:	str	r0, [sp, #8]
   1cf74:	ldr	r0, [sl, #4]
   1cf78:	str	r0, [sp, #4]
   1cf7c:	add	r0, sp, #24
   1cf80:	bl	2243c <__assert_fail@plt+0x10f24>
   1cf84:	sub	r1, r0, #1
   1cf88:	cmn	r1, #3
   1cf8c:	bcs	1cf2c <__assert_fail@plt+0xba14>
   1cf90:	ldr	r2, [sp, #24]
   1cf94:	add	r8, r0, r8
   1cf98:	cmp	r8, r9
   1cf9c:	blt	1cf54 <__assert_fail@plt+0xba3c>
   1cfa0:	ldr	lr, [sp]
   1cfa4:	sub	r7, r8, r9
   1cfa8:	cmn	r2, #1
   1cfac:	str	r7, [r4, #28]
   1cfb0:	beq	1cfe4 <__assert_fail@plt+0xbacc>
   1cfb4:	ldrb	r0, [r4, #78]	; 0x4e
   1cfb8:	cmp	r0, #0
   1cfbc:	bne	1d078 <__assert_fail@plt+0xbb60>
   1cfc0:	mov	r1, #0
   1cfc4:	cmp	r2, #10
   1cfc8:	bne	1cfd8 <__assert_fail@plt+0xbac0>
   1cfcc:	ldrb	r1, [r4, #77]	; 0x4d
   1cfd0:	cmp	r1, #0
   1cfd4:	movwne	r1, #2
   1cfd8:	str	r1, [r4, #60]	; 0x3c
   1cfdc:	ldr	r7, [r4, #28]
   1cfe0:	b	1cff8 <__assert_fail@plt+0xbae0>
   1cfe4:	sub	r1, lr, #1
   1cfe8:	mov	r0, r4
   1cfec:	mov	r2, r6
   1cff0:	bl	1d260 <__assert_fail@plt+0xbd48>
   1cff4:	str	r0, [r4, #60]	; 0x3c
   1cff8:	mov	r0, #0
   1cffc:	cmp	r7, #0
   1d000:	bne	1d034 <__assert_fail@plt+0xbb1c>
   1d004:	str	r0, [r4, #32]
   1d008:	b	1cb30 <__assert_fail@plt+0xb618>
   1d00c:	mov	r2, #0
   1d010:	strb	r2, [r4, #76]	; 0x4c
   1d014:	sub	r2, r5, r9
   1d018:	ldr	r3, [r4, #44]	; 0x2c
   1d01c:	ldr	r7, [r4, #52]	; 0x34
   1d020:	add	r3, r2, r3
   1d024:	add	r2, r2, r7
   1d028:	str	r3, [r4, #48]	; 0x30
   1d02c:	str	r2, [r4, #56]	; 0x38
   1d030:	b	1cbd0 <__assert_fail@plt+0xb6b8>
   1d034:	cmp	r7, #1
   1d038:	blt	1d05c <__assert_fail@plt+0xbb44>
   1d03c:	ldr	r0, [r4, #8]
   1d040:	mov	r1, #0
   1d044:	mvn	r2, #0
   1d048:	str	r2, [r0, r1, lsl #2]
   1d04c:	add	r1, r1, #1
   1d050:	ldr	r7, [r4, #28]
   1d054:	cmp	r1, r7
   1d058:	blt	1d048 <__assert_fail@plt+0xbb30>
   1d05c:	ldrb	r0, [r4, #75]	; 0x4b
   1d060:	cmp	r0, #0
   1d064:	beq	1d0a0 <__assert_fail@plt+0xbb88>
   1d068:	ldr	r0, [r4, #4]
   1d06c:	mov	r1, #255	; 0xff
   1d070:	mov	r2, r7
   1d074:	b	1ce80 <__assert_fail@plt+0xb968>
   1d078:	mov	r0, r2
   1d07c:	mov	r6, r2
   1d080:	bl	11404 <iswalnum@plt>
   1d084:	mov	r1, #1
   1d088:	cmp	r6, #95	; 0x5f
   1d08c:	beq	1cfd8 <__assert_fail@plt+0xbac0>
   1d090:	mov	r2, r6
   1d094:	cmp	r0, #0
   1d098:	beq	1cfc0 <__assert_fail@plt+0xbaa8>
   1d09c:	b	1cfd8 <__assert_fail@plt+0xbac0>
   1d0a0:	mov	r0, r7
   1d0a4:	b	1d004 <__assert_fail@plt+0xbaec>
   1d0a8:	cmp	r2, #1
   1d0ac:	blt	1d0f0 <__assert_fail@plt+0xbbd8>
   1d0b0:	sub	r1, r7, #1
   1d0b4:	sub	r1, r1, r3
   1d0b8:	mvn	r3, #1
   1d0bc:	cmn	r1, #7
   1d0c0:	mvnle	r1, #6
   1d0c4:	sub	ip, r3, r1
   1d0c8:	add	r1, sp, #14
   1d0cc:	ldrb	r3, [r7, ip]
   1d0d0:	sub	lr, ip, #1
   1d0d4:	ldrb	r3, [r0, r3]
   1d0d8:	strb	r3, [r1, ip]
   1d0dc:	add	r3, ip, #1
   1d0e0:	mov	ip, lr
   1d0e4:	cmp	r3, #1
   1d0e8:	bgt	1d0cc <__assert_fail@plt+0xbbb4>
   1d0ec:	b	1cc4c <__assert_fail@plt+0xb734>
   1d0f0:	add	r1, sp, #14
   1d0f4:	b	1cc4c <__assert_fail@plt+0xb734>
   1d0f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d0fc:	add	fp, sp, #24
   1d100:	mov	r3, r2
   1d104:	ldr	r2, [r0, #88]	; 0x58
   1d108:	mov	r5, r1
   1d10c:	mov	r4, r0
   1d110:	mov	r1, r3
   1d114:	bl	1d260 <__assert_fail@plt+0xbd48>
   1d118:	ldr	r1, [r5, #8]
   1d11c:	cmp	r1, #1
   1d120:	blt	1d1b0 <__assert_fail@plt+0xbc98>
   1d124:	and	ip, r0, #8
   1d128:	and	lr, r0, #2
   1d12c:	and	r2, r0, #1
   1d130:	ldr	r0, [r4, #84]	; 0x54
   1d134:	ldr	r5, [r5, #12]
   1d138:	movw	r8, #65280	; 0xff00
   1d13c:	mov	r3, #0
   1d140:	movt	r8, #3
   1d144:	ldr	r4, [r0]
   1d148:	ldr	r0, [r5, r3, lsl #2]
   1d14c:	add	r7, r4, r0, lsl #3
   1d150:	ldr	r7, [r7, #4]
   1d154:	uxtb	r6, r7
   1d158:	cmp	r6, #2
   1d15c:	bne	1d1a4 <__assert_fail@plt+0xbc8c>
   1d160:	tst	r7, r8
   1d164:	beq	1d1b4 <__assert_fail@plt+0xbc9c>
   1d168:	cmp	r2, #0
   1d16c:	bne	1d178 <__assert_fail@plt+0xbc60>
   1d170:	ands	r6, r7, #1024	; 0x400
   1d174:	bne	1d1a4 <__assert_fail@plt+0xbc8c>
   1d178:	cmp	r2, #0
   1d17c:	andsne	r6, r7, #2048	; 0x800
   1d180:	bne	1d1a4 <__assert_fail@plt+0xbc8c>
   1d184:	cmp	lr, #0
   1d188:	bne	1d194 <__assert_fail@plt+0xbc7c>
   1d18c:	ands	r6, r7, #8192	; 0x2000
   1d190:	bne	1d1a4 <__assert_fail@plt+0xbc8c>
   1d194:	cmp	ip, #0
   1d198:	bne	1d1b4 <__assert_fail@plt+0xbc9c>
   1d19c:	ands	r6, r7, #32768	; 0x8000
   1d1a0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d1a4:	add	r3, r3, #1
   1d1a8:	cmp	r3, r1
   1d1ac:	blt	1d148 <__assert_fail@plt+0xbc30>
   1d1b0:	mov	r0, #0
   1d1b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d1b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d1bc:	add	fp, sp, #24
   1d1c0:	mov	r8, r0
   1d1c4:	ldr	r0, [r0, #124]	; 0x7c
   1d1c8:	cmp	r0, #1
   1d1cc:	blt	1d250 <__assert_fail@plt+0xbd38>
   1d1d0:	mov	r7, #0
   1d1d4:	ldr	r0, [r8, #132]	; 0x84
   1d1d8:	ldr	r5, [r0, r7, lsl #2]
   1d1dc:	ldr	r0, [r5, #16]
   1d1e0:	cmp	r0, #1
   1d1e4:	blt	1d214 <__assert_fail@plt+0xbcfc>
   1d1e8:	mov	r4, #0
   1d1ec:	ldr	r0, [r5, #20]
   1d1f0:	ldr	r6, [r0, r4, lsl #2]
   1d1f4:	ldr	r0, [r6, #16]
   1d1f8:	bl	223dc <__assert_fail@plt+0x10ec4>
   1d1fc:	mov	r0, r6
   1d200:	bl	223dc <__assert_fail@plt+0x10ec4>
   1d204:	ldr	r0, [r5, #16]
   1d208:	add	r4, r4, #1
   1d20c:	cmp	r4, r0
   1d210:	blt	1d1ec <__assert_fail@plt+0xbcd4>
   1d214:	ldr	r0, [r5, #20]
   1d218:	bl	223dc <__assert_fail@plt+0x10ec4>
   1d21c:	ldr	r0, [r5, #8]
   1d220:	cmp	r0, #0
   1d224:	beq	1d238 <__assert_fail@plt+0xbd20>
   1d228:	ldr	r0, [r0, #8]
   1d22c:	bl	223dc <__assert_fail@plt+0x10ec4>
   1d230:	ldr	r0, [r5, #8]
   1d234:	bl	223dc <__assert_fail@plt+0x10ec4>
   1d238:	mov	r0, r5
   1d23c:	bl	223dc <__assert_fail@plt+0x10ec4>
   1d240:	ldr	r0, [r8, #124]	; 0x7c
   1d244:	add	r7, r7, #1
   1d248:	cmp	r7, r0
   1d24c:	blt	1d1d4 <__assert_fail@plt+0xbcbc>
   1d250:	mov	r0, #0
   1d254:	str	r0, [r8, #108]	; 0x6c
   1d258:	str	r0, [r8, #124]	; 0x7c
   1d25c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d260:	push	{r4, r5, fp, lr}
   1d264:	add	fp, sp, #8
   1d268:	mov	r4, r0
   1d26c:	cmn	r1, #1
   1d270:	ble	1d2ac <__assert_fail@plt+0xbd94>
   1d274:	ldr	r0, [r4, #48]	; 0x30
   1d278:	cmp	r0, r1
   1d27c:	beq	1d310 <__assert_fail@plt+0xbdf8>
   1d280:	ldr	r0, [r4, #80]	; 0x50
   1d284:	cmp	r0, #2
   1d288:	blt	1d2b4 <__assert_fail@plt+0xbd9c>
   1d28c:	ldr	r0, [r4, #8]
   1d290:	ldr	r5, [r0, r1, lsl #2]
   1d294:	cmn	r5, #1
   1d298:	bne	1d2e8 <__assert_fail@plt+0xbdd0>
   1d29c:	sub	r2, r1, #1
   1d2a0:	cmp	r1, #0
   1d2a4:	mov	r1, r2
   1d2a8:	bgt	1d290 <__assert_fail@plt+0xbd78>
   1d2ac:	ldr	r0, [r4, #60]	; 0x3c
   1d2b0:	pop	{r4, r5, fp, pc}
   1d2b4:	ldr	r0, [r4, #4]
   1d2b8:	ldr	r2, [r4, #68]	; 0x44
   1d2bc:	ldrb	r1, [r0, r1]
   1d2c0:	ubfx	r0, r1, #5, #3
   1d2c4:	and	r3, r1, #31
   1d2c8:	ldr	r2, [r2, r0, lsl #2]
   1d2cc:	mov	r0, #1
   1d2d0:	tst	r2, r0, lsl r3
   1d2d4:	bne	1d30c <__assert_fail@plt+0xbdf4>
   1d2d8:	mov	r0, #0
   1d2dc:	cmp	r1, #10
   1d2e0:	popne	{r4, r5, fp, pc}
   1d2e4:	b	1d300 <__assert_fail@plt+0xbde8>
   1d2e8:	ldrb	r0, [r4, #78]	; 0x4e
   1d2ec:	cmp	r0, #0
   1d2f0:	bne	1d31c <__assert_fail@plt+0xbe04>
   1d2f4:	mov	r0, #0
   1d2f8:	cmp	r5, #10
   1d2fc:	bne	1d30c <__assert_fail@plt+0xbdf4>
   1d300:	ldrb	r0, [r4, #77]	; 0x4d
   1d304:	cmp	r0, #0
   1d308:	movwne	r0, #2
   1d30c:	pop	{r4, r5, fp, pc}
   1d310:	and	r0, r2, #2
   1d314:	eor	r0, r0, #10
   1d318:	pop	{r4, r5, fp, pc}
   1d31c:	mov	r0, r5
   1d320:	bl	11404 <iswalnum@plt>
   1d324:	mov	r1, r0
   1d328:	mov	r0, #1
   1d32c:	cmp	r5, #95	; 0x5f
   1d330:	beq	1d30c <__assert_fail@plt+0xbdf4>
   1d334:	cmp	r1, #0
   1d338:	beq	1d2f4 <__assert_fail@plt+0xbddc>
   1d33c:	b	1d30c <__assert_fail@plt+0xbdf4>
   1d340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d344:	add	fp, sp, #28
   1d348:	sub	sp, sp, #4
   1d34c:	mov	sl, r0
   1d350:	ldr	r0, [r1, #4]
   1d354:	cmp	r0, #1
   1d358:	blt	1d424 <__assert_fail@plt+0xbf0c>
   1d35c:	ldr	r7, [sl, #84]	; 0x54
   1d360:	mov	r8, r2
   1d364:	mov	r5, r1
   1d368:	mov	r4, #0
   1d36c:	b	1d394 <__assert_fail@plt+0xbe7c>
   1d370:	ldr	r0, [sl, #132]	; 0x84
   1d374:	lsl	r1, r9, #3
   1d378:	bl	22250 <__assert_fail@plt+0x10d38>
   1d37c:	cmp	r0, #0
   1d380:	beq	1d430 <__assert_fail@plt+0xbf18>
   1d384:	lsl	r1, r9, #1
   1d388:	str	r1, [sl, #128]	; 0x80
   1d38c:	str	r0, [sl, #132]	; 0x84
   1d390:	b	1d3dc <__assert_fail@plt+0xbec4>
   1d394:	ldr	r1, [r5, #8]
   1d398:	ldr	r6, [r1, r4, lsl #2]
   1d39c:	ldr	r1, [r7]
   1d3a0:	add	r2, r1, r6, lsl #3
   1d3a4:	ldrb	r2, [r2, #4]
   1d3a8:	cmp	r2, #8
   1d3ac:	bne	1d418 <__assert_fail@plt+0xbf00>
   1d3b0:	ldr	r1, [r1, r6, lsl #3]
   1d3b4:	cmp	r1, #31
   1d3b8:	bgt	1d418 <__assert_fail@plt+0xbf00>
   1d3bc:	ldr	r2, [r7, #80]	; 0x50
   1d3c0:	mov	r3, #1
   1d3c4:	tst	r2, r3, lsl r1
   1d3c8:	beq	1d418 <__assert_fail@plt+0xbf00>
   1d3cc:	ldr	r9, [sl, #124]	; 0x7c
   1d3d0:	ldr	r0, [sl, #128]	; 0x80
   1d3d4:	cmp	r9, r0
   1d3d8:	beq	1d370 <__assert_fail@plt+0xbe58>
   1d3dc:	mov	r0, #1
   1d3e0:	mov	r1, #24
   1d3e4:	bl	221cc <__assert_fail@plt+0x10cb4>
   1d3e8:	ldr	r1, [sl, #124]	; 0x7c
   1d3ec:	ldr	r2, [sl, #132]	; 0x84
   1d3f0:	str	r0, [r2, r1, lsl #2]
   1d3f4:	ldr	r0, [sl, #132]	; 0x84
   1d3f8:	ldr	r0, [r0, r1, lsl #2]
   1d3fc:	cmp	r0, #0
   1d400:	beq	1d430 <__assert_fail@plt+0xbf18>
   1d404:	add	r1, r1, #1
   1d408:	str	r6, [r0, #4]
   1d40c:	str	r1, [sl, #124]	; 0x7c
   1d410:	str	r8, [r0]
   1d414:	ldr	r0, [r5, #4]
   1d418:	add	r4, r4, #1
   1d41c:	cmp	r4, r0
   1d420:	blt	1d394 <__assert_fail@plt+0xbe7c>
   1d424:	mov	r0, #0
   1d428:	sub	sp, fp, #28
   1d42c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d430:	mov	r0, #12
   1d434:	b	1d428 <__assert_fail@plt+0xbf10>
   1d438:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d43c:	add	fp, sp, #28
   1d440:	sub	sp, sp, #76	; 0x4c
   1d444:	mov	lr, r0
   1d448:	ldr	r0, [r1, #4]
   1d44c:	cmp	r0, #1
   1d450:	blt	1db30 <__assert_fail@plt+0xc618>
   1d454:	ldr	r2, [lr, #84]	; 0x54
   1d458:	ldr	r0, [lr, #40]	; 0x28
   1d45c:	mov	r3, #0
   1d460:	str	lr, [sp, #48]	; 0x30
   1d464:	str	r1, [sp, #16]
   1d468:	str	r0, [fp, #-48]	; 0xffffffd0
   1d46c:	str	r2, [sp, #32]
   1d470:	ldr	r0, [r1, #8]
   1d474:	str	r3, [sp, #36]	; 0x24
   1d478:	ldr	r3, [r0, r3, lsl #2]
   1d47c:	ldr	r0, [r2]
   1d480:	add	r0, r0, r3, lsl #3
   1d484:	mov	r1, r3
   1d488:	str	r3, [sp, #52]	; 0x34
   1d48c:	ldr	r4, [r0, #4]
   1d490:	uxtb	r0, r4
   1d494:	cmp	r0, #4
   1d498:	bne	1db14 <__assert_fail@plt+0xc5fc>
   1d49c:	movw	r0, #65280	; 0xff00
   1d4a0:	movt	r0, #3
   1d4a4:	tst	r4, r0
   1d4a8:	beq	1d504 <__assert_fail@plt+0xbfec>
   1d4ac:	ldr	r2, [lr, #88]	; 0x58
   1d4b0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1d4b4:	mov	r0, lr
   1d4b8:	mov	r5, lr
   1d4bc:	bl	1d260 <__assert_fail@plt+0xbd48>
   1d4c0:	mov	lr, r5
   1d4c4:	and	r1, r0, #1
   1d4c8:	tst	r4, #1024	; 0x400
   1d4cc:	beq	1d4d8 <__assert_fail@plt+0xbfc0>
   1d4d0:	cmp	r1, #0
   1d4d4:	beq	1db14 <__assert_fail@plt+0xc5fc>
   1d4d8:	tst	r4, #2048	; 0x800
   1d4dc:	cmpne	r1, #0
   1d4e0:	bne	1db14 <__assert_fail@plt+0xc5fc>
   1d4e4:	tst	r4, #8192	; 0x2000
   1d4e8:	beq	1d4f4 <__assert_fail@plt+0xbfdc>
   1d4ec:	ands	r1, r0, #2
   1d4f0:	beq	1db14 <__assert_fail@plt+0xc5fc>
   1d4f4:	tst	r4, #32768	; 0x8000
   1d4f8:	beq	1d504 <__assert_fail@plt+0xbfec>
   1d4fc:	ands	r0, r0, #8
   1d500:	beq	1db14 <__assert_fail@plt+0xc5fc>
   1d504:	ldr	r0, [lr, #108]	; 0x6c
   1d508:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1d50c:	ldr	r4, [lr, #4]
   1d510:	ldr	r7, [lr, #84]	; 0x54
   1d514:	mov	r5, lr
   1d518:	str	r0, [sp, #12]
   1d51c:	mov	r0, lr
   1d520:	bl	1dfa0 <__assert_fail@plt+0xca88>
   1d524:	mov	lr, r5
   1d528:	cmn	r0, #1
   1d52c:	beq	1d55c <__assert_fail@plt+0xc044>
   1d530:	ldr	r1, [lr, #116]	; 0x74
   1d534:	add	r0, r0, r0, lsl #1
   1d538:	add	r0, r1, r0, lsl #3
   1d53c:	ldr	r1, [r0]
   1d540:	ldr	r2, [sp, #52]	; 0x34
   1d544:	cmp	r1, r2
   1d548:	beq	1d904 <__assert_fail@plt+0xc3ec>
   1d54c:	ldrb	r1, [r0, #20]
   1d550:	add	r0, r0, #24
   1d554:	cmp	r1, #0
   1d558:	bne	1d53c <__assert_fail@plt+0xc024>
   1d55c:	ldr	r0, [lr, #124]	; 0x7c
   1d560:	cmp	r0, #1
   1d564:	blt	1d904 <__assert_fail@plt+0xc3ec>
   1d568:	ldr	r0, [r7]
   1d56c:	ldr	r1, [sp, #52]	; 0x34
   1d570:	mov	r2, #0
   1d574:	mov	ip, r4
   1d578:	str	r7, [sp, #24]
   1d57c:	ldr	r8, [r0, r1, lsl #3]
   1d580:	str	r8, [sp, #28]
   1d584:	ldr	r1, [lr, #132]	; 0x84
   1d588:	str	r2, [sp, #40]	; 0x28
   1d58c:	ldr	r6, [r1, r2, lsl #2]
   1d590:	ldr	r1, [r6, #4]
   1d594:	ldr	r0, [r0, r1, lsl #3]
   1d598:	cmp	r0, r8
   1d59c:	bne	1d6c0 <__assert_fail@plt+0xc1a8>
   1d5a0:	ldr	r0, [r6, #16]
   1d5a4:	ldr	r9, [r6]
   1d5a8:	mov	r8, #0
   1d5ac:	str	r6, [sp, #44]	; 0x2c
   1d5b0:	cmp	r0, #1
   1d5b4:	blt	1d5c4 <__assert_fail@plt+0xc0ac>
   1d5b8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1d5bc:	mov	r7, r9
   1d5c0:	b	1d5f8 <__assert_fail@plt+0xc0e0>
   1d5c4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1d5c8:	b	1d69c <__assert_fail@plt+0xc184>
   1d5cc:	ldr	r2, [lr, #48]	; 0x30
   1d5d0:	cmp	r1, r2
   1d5d4:	bgt	1d698 <__assert_fail@plt+0xc180>
   1d5d8:	mov	r0, lr
   1d5dc:	mov	r6, lr
   1d5e0:	bl	1e028 <__assert_fail@plt+0xcb10>
   1d5e4:	cmp	r0, #0
   1d5e8:	bne	1db40 <__assert_fail@plt+0xc628>
   1d5ec:	ldr	ip, [r6, #4]
   1d5f0:	mov	r1, r6
   1d5f4:	b	1d620 <__assert_fail@plt+0xc108>
   1d5f8:	ldr	r1, [r6, #20]
   1d5fc:	ldr	sl, [r1, r8, lsl #2]
   1d600:	ldr	r9, [sl, #4]
   1d604:	sub	r4, r9, r7
   1d608:	cmp	r4, #1
   1d60c:	blt	1d648 <__assert_fail@plt+0xc130>
   1d610:	ldr	r2, [lr, #28]
   1d614:	add	r1, r4, r5
   1d618:	cmp	r1, r2
   1d61c:	bgt	1d5cc <__assert_fail@plt+0xc0b4>
   1d620:	add	r0, ip, r5
   1d624:	add	r1, ip, r7
   1d628:	mov	r2, r4
   1d62c:	mov	r6, ip
   1d630:	bl	112f0 <memcmp@plt>
   1d634:	mov	ip, r6
   1d638:	ldr	r6, [sp, #44]	; 0x2c
   1d63c:	ldr	lr, [sp, #48]	; 0x30
   1d640:	cmp	r0, #0
   1d644:	bne	1d694 <__assert_fail@plt+0xc17c>
   1d648:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1d64c:	ldr	r3, [sp, #52]	; 0x34
   1d650:	mov	r1, r6
   1d654:	mov	r2, sl
   1d658:	mov	r7, lr
   1d65c:	str	r0, [sp]
   1d660:	mov	r0, lr
   1d664:	bl	1e0b8 <__assert_fail@plt+0xcba0>
   1d668:	cmp	r0, #1
   1d66c:	bhi	1db40 <__assert_fail@plt+0xc628>
   1d670:	ldr	r0, [r6, #16]
   1d674:	ldr	ip, [r7, #4]
   1d678:	add	r8, r8, #1
   1d67c:	mov	lr, r7
   1d680:	add	r5, r4, r5
   1d684:	mov	r7, r9
   1d688:	cmp	r8, r0
   1d68c:	blt	1d5f8 <__assert_fail@plt+0xc0e0>
   1d690:	b	1d69c <__assert_fail@plt+0xc184>
   1d694:	ldr	r0, [r6, #16]
   1d698:	mov	r9, r7
   1d69c:	cmp	r8, r0
   1d6a0:	blt	1d6b8 <__assert_fail@plt+0xc1a0>
   1d6a4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1d6a8:	cmp	r8, #0
   1d6ac:	addne	r9, r9, #1
   1d6b0:	cmp	r9, r0
   1d6b4:	ble	1d6dc <__assert_fail@plt+0xc1c4>
   1d6b8:	ldr	r7, [sp, #24]
   1d6bc:	ldr	r8, [sp, #28]
   1d6c0:	ldr	r2, [sp, #40]	; 0x28
   1d6c4:	ldr	r0, [lr, #124]	; 0x7c
   1d6c8:	add	r2, r2, #1
   1d6cc:	cmp	r2, r0
   1d6d0:	bge	1d910 <__assert_fail@plt+0xc3f8>
   1d6d4:	ldr	r0, [r7]
   1d6d8:	b	1d584 <__assert_fail@plt+0xc06c>
   1d6dc:	ldr	r7, [sp, #24]
   1d6e0:	ldr	r8, [sp, #28]
   1d6e4:	b	1d854 <__assert_fail@plt+0xc33c>
   1d6e8:	cmn	r4, #1
   1d6ec:	beq	1d8e8 <__assert_fail@plt+0xc3d0>
   1d6f0:	ldr	r1, [r6, #8]
   1d6f4:	mov	r7, ip
   1d6f8:	str	r5, [sp, #20]
   1d6fc:	cmp	r1, #0
   1d700:	bne	1d730 <__assert_fail@plt+0xc218>
   1d704:	ldr	r0, [r6]
   1d708:	add	r1, sl, #1
   1d70c:	mov	r5, #12
   1d710:	sub	r1, r1, r0
   1d714:	mov	r0, #12
   1d718:	bl	221cc <__assert_fail@plt+0x10cb4>
   1d71c:	ldr	r6, [sp, #44]	; 0x2c
   1d720:	mov	r1, r0
   1d724:	cmp	r0, #0
   1d728:	str	r0, [r6, #8]
   1d72c:	beq	1db44 <__assert_fail@plt+0xc62c>
   1d730:	ldr	r3, [r6]
   1d734:	ldr	r2, [r6, #4]
   1d738:	stm	sp, {r4, sl}
   1d73c:	mov	r0, #9
   1d740:	str	r0, [sp, #8]
   1d744:	ldr	r0, [sp, #48]	; 0x30
   1d748:	bl	1e208 <__assert_fail@plt+0xccf0>
   1d74c:	ldr	r6, [sp, #44]	; 0x2c
   1d750:	ldr	r5, [sp, #20]
   1d754:	mov	ip, r7
   1d758:	cmp	r0, #1
   1d75c:	mov	r7, r9
   1d760:	beq	1d8ec <__assert_fail@plt+0xc3d4>
   1d764:	cmp	r0, #0
   1d768:	bne	1db40 <__assert_fail@plt+0xc628>
   1d76c:	ldr	r1, [r6, #12]
   1d770:	ldr	r0, [r6, #16]
   1d774:	ldr	r7, [sp, #48]	; 0x30
   1d778:	cmp	r0, r1
   1d77c:	beq	1d828 <__assert_fail@plt+0xc310>
   1d780:	mov	r0, #1
   1d784:	mov	r1, #20
   1d788:	bl	221cc <__assert_fail@plt+0x10cb4>
   1d78c:	cmp	r0, #0
   1d790:	beq	1db50 <__assert_fail@plt+0xc638>
   1d794:	ldr	r1, [sp, #44]	; 0x2c
   1d798:	mov	r2, r0
   1d79c:	ldr	r0, [r1, #16]
   1d7a0:	ldr	r3, [r1, #20]
   1d7a4:	str	r2, [r3, r0, lsl #2]
   1d7a8:	stm	r2, {r4, sl}
   1d7ac:	add	r0, r0, #1
   1d7b0:	str	r0, [r1, #16]
   1d7b4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1d7b8:	ldr	r3, [sp, #52]	; 0x34
   1d7bc:	str	r0, [sp]
   1d7c0:	mov	r0, r7
   1d7c4:	bl	1e0b8 <__assert_fail@plt+0xcba0>
   1d7c8:	cmp	r0, #1
   1d7cc:	bhi	1db40 <__assert_fail@plt+0xc628>
   1d7d0:	ldr	ip, [r7, #4]
   1d7d4:	ldr	r6, [sp, #44]	; 0x2c
   1d7d8:	ldr	r5, [sp, #20]
   1d7dc:	b	1d8e8 <__assert_fail@plt+0xc3d0>
   1d7e0:	ldr	r0, [lr, #48]	; 0x30
   1d7e4:	cmp	r5, r0
   1d7e8:	bge	1d6c0 <__assert_fail@plt+0xc1a8>
   1d7ec:	add	r4, r5, #1
   1d7f0:	mov	r0, lr
   1d7f4:	mov	r9, r7
   1d7f8:	mov	r7, r5
   1d7fc:	mov	r5, lr
   1d800:	mov	r1, r4
   1d804:	bl	1db70 <__assert_fail@plt+0xc658>
   1d808:	cmp	r0, #0
   1d80c:	bne	1db40 <__assert_fail@plt+0xc628>
   1d810:	ldr	ip, [r5, #4]
   1d814:	ldr	r6, [sp, #44]	; 0x2c
   1d818:	mov	lr, r5
   1d81c:	mov	r5, r7
   1d820:	mov	r7, r9
   1d824:	b	1d874 <__assert_fail@plt+0xc35c>
   1d828:	mov	r1, #1
   1d82c:	orr	r5, r1, r0, lsl #1
   1d830:	ldr	r0, [r6, #20]
   1d834:	lsl	r1, r5, #2
   1d838:	bl	22250 <__assert_fail@plt+0x10d38>
   1d83c:	cmp	r0, #0
   1d840:	beq	1db50 <__assert_fail@plt+0xc638>
   1d844:	ldr	r8, [sp, #28]
   1d848:	str	r5, [r6, #12]
   1d84c:	str	r0, [r6, #20]
   1d850:	b	1d780 <__assert_fail@plt+0xc268>
   1d854:	ldr	r0, [r6]
   1d858:	mov	sl, r9
   1d85c:	cmp	r9, r0
   1d860:	ble	1d88c <__assert_fail@plt+0xc374>
   1d864:	ldr	r0, [lr, #28]
   1d868:	cmp	r5, r0
   1d86c:	bge	1d7e0 <__assert_fail@plt+0xc2c8>
   1d870:	add	r4, r5, #1
   1d874:	add	r1, ip, sl
   1d878:	ldrb	r0, [ip, r5]
   1d87c:	ldrb	r1, [r1, #-1]
   1d880:	cmp	r0, r1
   1d884:	beq	1d890 <__assert_fail@plt+0xc378>
   1d888:	b	1d6c0 <__assert_fail@plt+0xc1a8>
   1d88c:	mov	r4, r5
   1d890:	ldr	r0, [lr, #100]	; 0x64
   1d894:	mov	r5, r4
   1d898:	ldr	r2, [r0, sl, lsl #2]
   1d89c:	cmp	r2, #0
   1d8a0:	beq	1d8ec <__assert_fail@plt+0xc3d4>
   1d8a4:	ldr	r0, [r2, #8]
   1d8a8:	cmp	r0, #1
   1d8ac:	blt	1d8ec <__assert_fail@plt+0xc3d4>
   1d8b0:	ldr	r1, [r7]
   1d8b4:	ldr	r2, [r2, #12]
   1d8b8:	mov	r9, r7
   1d8bc:	mov	r3, #0
   1d8c0:	ldr	r4, [r2, r3, lsl #2]
   1d8c4:	add	r7, r1, r4, lsl #3
   1d8c8:	ldrb	r7, [r7, #4]
   1d8cc:	cmp	r7, #9
   1d8d0:	ldreq	r7, [r1, r4, lsl #3]
   1d8d4:	cmpeq	r7, r8
   1d8d8:	beq	1d6e8 <__assert_fail@plt+0xc1d0>
   1d8dc:	add	r3, r3, #1
   1d8e0:	cmp	r3, r0
   1d8e4:	blt	1d8c0 <__assert_fail@plt+0xc3a8>
   1d8e8:	mov	r7, r9
   1d8ec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1d8f0:	ldr	lr, [sp, #48]	; 0x30
   1d8f4:	add	r9, sl, #1
   1d8f8:	cmp	sl, r0
   1d8fc:	blt	1d854 <__assert_fail@plt+0xc33c>
   1d900:	b	1d6c0 <__assert_fail@plt+0xc1a8>
   1d904:	mov	r0, #0
   1d908:	str	r0, [fp, #-32]	; 0xffffffe0
   1d90c:	b	1db14 <__assert_fail@plt+0xc5fc>
   1d910:	ldr	r0, [lr, #108]	; 0x6c
   1d914:	ldr	r7, [sp, #12]
   1d918:	mov	r1, #0
   1d91c:	str	r1, [fp, #-32]	; 0xffffffe0
   1d920:	cmp	r7, r0
   1d924:	bge	1db14 <__assert_fail@plt+0xc5fc>
   1d928:	add	r0, r7, r7, lsl #1
   1d92c:	lsl	r5, r0, #3
   1d930:	ldr	r0, [lr, #116]	; 0x74
   1d934:	ldr	r2, [sp, #52]	; 0x34
   1d938:	ldr	r1, [r0, r5]
   1d93c:	cmp	r1, r2
   1d940:	bne	1dafc <__assert_fail@plt+0xc5e4>
   1d944:	add	r0, r0, r5
   1d948:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1d94c:	ldr	r1, [r0, #4]
   1d950:	cmp	r1, r2
   1d954:	bne	1dafc <__assert_fail@plt+0xc5e4>
   1d958:	ldr	r2, [r0, #8]
   1d95c:	ldr	r3, [r0, #12]
   1d960:	ldr	r0, [sp, #32]
   1d964:	ldr	r4, [r0, #24]
   1d968:	cmp	r3, r2
   1d96c:	bne	1d988 <__assert_fail@plt+0xc470>
   1d970:	ldr	r1, [sp, #52]	; 0x34
   1d974:	ldr	r0, [r0, #20]
   1d978:	add	r1, r1, r1, lsl #1
   1d97c:	add	r0, r0, r1, lsl #2
   1d980:	ldr	r0, [r0, #8]
   1d984:	b	1d994 <__assert_fail@plt+0xc47c>
   1d988:	ldr	r0, [r0, #12]
   1d98c:	ldr	r1, [sp, #52]	; 0x34
   1d990:	add	r0, r0, r1, lsl #2
   1d994:	ldr	r0, [r0]
   1d998:	ldr	r8, [fp, #-48]	; 0xffffffd0
   1d99c:	ldr	r6, [sp, #48]	; 0x30
   1d9a0:	str	r2, [sp, #44]	; 0x2c
   1d9a4:	str	r3, [sp, #40]	; 0x28
   1d9a8:	add	r9, r0, r0, lsl #1
   1d9ac:	add	r0, r3, r8
   1d9b0:	sub	sl, r0, r2
   1d9b4:	ldr	r2, [r6, #88]	; 0x58
   1d9b8:	mov	r0, r6
   1d9bc:	sub	r1, sl, #1
   1d9c0:	bl	1d260 <__assert_fail@plt+0xbd48>
   1d9c4:	mov	r3, r0
   1d9c8:	ldr	r0, [r6, #100]	; 0x64
   1d9cc:	ldr	r1, [r0, r8, lsl #2]
   1d9d0:	ldr	r2, [r0, sl, lsl #2]
   1d9d4:	add	r8, r4, r9, lsl #2
   1d9d8:	cmp	r1, #0
   1d9dc:	ldrne	r0, [r1, #8]
   1d9e0:	moveq	r0, #0
   1d9e4:	cmp	r2, #0
   1d9e8:	str	r0, [sp, #28]
   1d9ec:	sub	r0, fp, #44	; 0x2c
   1d9f0:	beq	1da5c <__assert_fail@plt+0xc544>
   1d9f4:	ldr	r1, [r2, #40]	; 0x28
   1d9f8:	mov	r2, r8
   1d9fc:	mov	r4, r3
   1da00:	mov	r6, r0
   1da04:	bl	1dd9c <__assert_fail@plt+0xc884>
   1da08:	cmp	r0, #0
   1da0c:	str	r0, [fp, #-32]	; 0xffffffe0
   1da10:	bne	1db58 <__assert_fail@plt+0xc640>
   1da14:	ldr	r1, [sp, #32]
   1da18:	sub	r0, fp, #32
   1da1c:	mov	r2, r6
   1da20:	mov	r3, r4
   1da24:	bl	1c5f0 <__assert_fail@plt+0xb0d8>
   1da28:	ldr	r4, [sp, #48]	; 0x30
   1da2c:	ldr	r1, [r4, #100]	; 0x64
   1da30:	str	r0, [r1, sl, lsl #2]
   1da34:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1da38:	bl	223dc <__assert_fail@plt+0x10ec4>
   1da3c:	ldr	r3, [r4, #100]	; 0x64
   1da40:	ldr	r1, [r3, sl, lsl #2]
   1da44:	cmp	r1, #0
   1da48:	bne	1da9c <__assert_fail@plt+0xc584>
   1da4c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1da50:	cmp	r0, #0
   1da54:	beq	1da9c <__assert_fail@plt+0xc584>
   1da58:	b	1db38 <__assert_fail@plt+0xc620>
   1da5c:	ldr	r1, [sp, #32]
   1da60:	sub	r0, fp, #32
   1da64:	mov	r2, r8
   1da68:	bl	1c5f0 <__assert_fail@plt+0xb0d8>
   1da6c:	ldr	r1, [r6, #100]	; 0x64
   1da70:	str	r0, [r1, sl, lsl #2]
   1da74:	ldr	r3, [r6, #100]	; 0x64
   1da78:	ldr	r1, [r3, sl, lsl #2]
   1da7c:	cmp	r1, #0
   1da80:	bne	1da9c <__assert_fail@plt+0xc584>
   1da84:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1da88:	ldr	r1, [sp, #44]	; 0x2c
   1da8c:	ldr	r2, [sp, #40]	; 0x28
   1da90:	cmp	r0, #0
   1da94:	beq	1daa4 <__assert_fail@plt+0xc58c>
   1da98:	b	1db38 <__assert_fail@plt+0xc620>
   1da9c:	ldr	r1, [sp, #44]	; 0x2c
   1daa0:	ldr	r2, [sp, #40]	; 0x28
   1daa4:	cmp	r2, r1
   1daa8:	bne	1dafc <__assert_fail@plt+0xc5e4>
   1daac:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1dab0:	ldr	r0, [r3, r1, lsl #2]
   1dab4:	ldr	r1, [sp, #28]
   1dab8:	ldr	r0, [r0, #8]
   1dabc:	cmp	r0, r1
   1dac0:	ble	1dafc <__assert_fail@plt+0xc5e4>
   1dac4:	ldr	r4, [sp, #48]	; 0x30
   1dac8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1dacc:	mov	r1, r8
   1dad0:	mov	r0, r4
   1dad4:	bl	1d340 <__assert_fail@plt+0xbe28>
   1dad8:	cmp	r0, #0
   1dadc:	str	r0, [fp, #-32]	; 0xffffffe0
   1dae0:	bne	1db38 <__assert_fail@plt+0xc620>
   1dae4:	mov	r0, r4
   1dae8:	mov	r1, r8
   1daec:	bl	1d438 <__assert_fail@plt+0xbf20>
   1daf0:	cmp	r0, #0
   1daf4:	str	r0, [fp, #-32]	; 0xffffffe0
   1daf8:	bne	1db38 <__assert_fail@plt+0xc620>
   1dafc:	ldr	lr, [sp, #48]	; 0x30
   1db00:	add	r7, r7, #1
   1db04:	add	r5, r5, #24
   1db08:	ldr	r0, [lr, #108]	; 0x6c
   1db0c:	cmp	r7, r0
   1db10:	blt	1d930 <__assert_fail@plt+0xc418>
   1db14:	ldr	r1, [sp, #16]
   1db18:	ldr	r3, [sp, #36]	; 0x24
   1db1c:	ldr	r2, [sp, #32]
   1db20:	ldr	r0, [r1, #4]
   1db24:	add	r3, r3, #1
   1db28:	cmp	r3, r0
   1db2c:	blt	1d470 <__assert_fail@plt+0xbf58>
   1db30:	mov	r0, #0
   1db34:	str	r0, [fp, #-32]	; 0xffffffe0
   1db38:	sub	sp, fp, #28
   1db3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db40:	mov	r5, r0
   1db44:	str	r5, [fp, #-32]	; 0xffffffe0
   1db48:	mov	r0, r5
   1db4c:	b	1db38 <__assert_fail@plt+0xc620>
   1db50:	mov	r5, #12
   1db54:	b	1db44 <__assert_fail@plt+0xc62c>
   1db58:	mov	r1, r0
   1db5c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1db60:	mov	r4, r1
   1db64:	bl	223dc <__assert_fail@plt+0x10ec4>
   1db68:	mov	r0, r4
   1db6c:	b	1db38 <__assert_fail@plt+0xc620>
   1db70:	push	{r4, r5, fp, lr}
   1db74:	add	fp, sp, #8
   1db78:	mov	r4, r0
   1db7c:	ldr	r0, [r0, #36]	; 0x24
   1db80:	mov	r5, #12
   1db84:	cmn	r0, #-536870910	; 0xe0000002
   1db88:	bhi	1dc40 <__assert_fail@plt+0xc728>
   1db8c:	ldr	r2, [r4, #48]	; 0x30
   1db90:	cmp	r2, r0, lsl #1
   1db94:	lslge	r2, r0, #1
   1db98:	mov	r0, r4
   1db9c:	cmp	r2, r1
   1dba0:	movle	r2, r1
   1dba4:	mov	r1, r2
   1dba8:	bl	17b78 <__assert_fail@plt+0x6660>
   1dbac:	cmp	r0, #0
   1dbb0:	bne	1dc04 <__assert_fail@plt+0xc6ec>
   1dbb4:	ldr	r0, [r4, #100]	; 0x64
   1dbb8:	cmp	r0, #0
   1dbbc:	beq	1dbdc <__assert_fail@plt+0xc6c4>
   1dbc0:	ldr	r1, [r4, #36]	; 0x24
   1dbc4:	mov	r2, #4
   1dbc8:	add	r1, r2, r1, lsl #2
   1dbcc:	bl	22250 <__assert_fail@plt+0x10d38>
   1dbd0:	cmp	r0, #0
   1dbd4:	beq	1dc40 <__assert_fail@plt+0xc728>
   1dbd8:	str	r0, [r4, #100]	; 0x64
   1dbdc:	ldrb	r1, [r4, #72]	; 0x48
   1dbe0:	ldr	r0, [r4, #80]	; 0x50
   1dbe4:	cmp	r1, #0
   1dbe8:	beq	1dc0c <__assert_fail@plt+0xc6f4>
   1dbec:	cmp	r0, #2
   1dbf0:	blt	1dc20 <__assert_fail@plt+0xc708>
   1dbf4:	mov	r0, r4
   1dbf8:	bl	17c18 <__assert_fail@plt+0x6700>
   1dbfc:	cmp	r0, #0
   1dc00:	beq	1dc3c <__assert_fail@plt+0xc724>
   1dc04:	mov	r5, r0
   1dc08:	b	1dc40 <__assert_fail@plt+0xc728>
   1dc0c:	cmp	r0, #2
   1dc10:	blt	1dc2c <__assert_fail@plt+0xc714>
   1dc14:	mov	r0, r4
   1dc18:	bl	181f4 <__assert_fail@plt+0x6cdc>
   1dc1c:	b	1dc3c <__assert_fail@plt+0xc724>
   1dc20:	mov	r0, r4
   1dc24:	bl	18188 <__assert_fail@plt+0x6c70>
   1dc28:	b	1dc3c <__assert_fail@plt+0xc724>
   1dc2c:	ldr	r0, [r4, #64]	; 0x40
   1dc30:	cmp	r0, #0
   1dc34:	movne	r0, r4
   1dc38:	blne	183d0 <__assert_fail@plt+0x6eb8>
   1dc3c:	mov	r5, #0
   1dc40:	mov	r0, r5
   1dc44:	pop	{r4, r5, fp, pc}
   1dc48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1dc4c:	add	fp, sp, #24
   1dc50:	sub	sp, sp, #16
   1dc54:	mov	r8, r0
   1dc58:	mov	r4, r1
   1dc5c:	ldr	r5, [r1, #40]	; 0x28
   1dc60:	ldr	r7, [r1, #84]	; 0x54
   1dc64:	ldr	r0, [r1, #100]	; 0x64
   1dc68:	ldr	r1, [r1, #104]	; 0x68
   1dc6c:	mov	r6, r2
   1dc70:	cmp	r5, r1
   1dc74:	ble	1dc84 <__assert_fail@plt+0xc76c>
   1dc78:	str	r6, [r0, r5, lsl #2]
   1dc7c:	str	r5, [r4, #104]	; 0x68
   1dc80:	b	1dd28 <__assert_fail@plt+0xc810>
   1dc84:	ldr	r1, [r0, r5, lsl #2]
   1dc88:	cmp	r1, #0
   1dc8c:	beq	1dcc8 <__assert_fail@plt+0xc7b0>
   1dc90:	ldr	r2, [r1, #40]	; 0x28
   1dc94:	cmp	r6, #0
   1dc98:	beq	1dcd0 <__assert_fail@plt+0xc7b8>
   1dc9c:	ldr	r6, [r6, #40]	; 0x28
   1dca0:	mov	r0, sp
   1dca4:	mov	r1, r6
   1dca8:	bl	1dd9c <__assert_fail@plt+0xc884>
   1dcac:	cmp	r0, #0
   1dcb0:	str	r0, [r8]
   1dcb4:	bne	1dd94 <__assert_fail@plt+0xc87c>
   1dcb8:	ldr	r0, [r4, #40]	; 0x28
   1dcbc:	clz	r1, r6
   1dcc0:	lsr	r9, r1, #5
   1dcc4:	b	1dce8 <__assert_fail@plt+0xc7d0>
   1dcc8:	str	r6, [r0, r5, lsl #2]
   1dccc:	b	1dd28 <__assert_fail@plt+0xc810>
   1dcd0:	ldr	r0, [r2, #8]
   1dcd4:	vldr	d16, [r2]
   1dcd8:	mov	r9, #1
   1dcdc:	str	r0, [sp, #8]
   1dce0:	mov	r0, r5
   1dce4:	vstr	d16, [sp]
   1dce8:	ldr	r2, [r4, #88]	; 0x58
   1dcec:	sub	r1, r0, #1
   1dcf0:	mov	r0, r4
   1dcf4:	bl	1d260 <__assert_fail@plt+0xbd48>
   1dcf8:	mov	r3, r0
   1dcfc:	mov	r2, sp
   1dd00:	mov	r0, r8
   1dd04:	mov	r1, r7
   1dd08:	bl	1c5f0 <__assert_fail@plt+0xb0d8>
   1dd0c:	mov	r6, r0
   1dd10:	ldr	r0, [r4, #100]	; 0x64
   1dd14:	cmp	r9, #0
   1dd18:	str	r6, [r0, r5, lsl #2]
   1dd1c:	bne	1dd28 <__assert_fail@plt+0xc810>
   1dd20:	ldr	r0, [sp, #8]
   1dd24:	bl	223dc <__assert_fail@plt+0x10ec4>
   1dd28:	cmp	r6, #0
   1dd2c:	ldrne	r0, [r7, #76]	; 0x4c
   1dd30:	cmpne	r0, #0
   1dd34:	bne	1dd44 <__assert_fail@plt+0xc82c>
   1dd38:	mov	r0, r6
   1dd3c:	sub	sp, fp, #24
   1dd40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1dd44:	add	r7, r6, #4
   1dd48:	mov	r0, r4
   1dd4c:	mov	r2, r5
   1dd50:	mov	r1, r7
   1dd54:	bl	1d340 <__assert_fail@plt+0xbe28>
   1dd58:	cmp	r0, #0
   1dd5c:	str	r0, [r8]
   1dd60:	bne	1dd94 <__assert_fail@plt+0xc87c>
   1dd64:	ldrb	r0, [r6, #52]	; 0x34
   1dd68:	tst	r0, #64	; 0x40
   1dd6c:	beq	1dd38 <__assert_fail@plt+0xc820>
   1dd70:	mov	r0, r4
   1dd74:	mov	r1, r7
   1dd78:	bl	1d438 <__assert_fail@plt+0xbf20>
   1dd7c:	str	r0, [r8]
   1dd80:	cmp	r0, #0
   1dd84:	mov	r6, #0
   1dd88:	ldreq	r0, [r4, #100]	; 0x64
   1dd8c:	ldreq	r6, [r0, r5, lsl #2]
   1dd90:	b	1dd38 <__assert_fail@plt+0xc820>
   1dd94:	mov	r6, #0
   1dd98:	b	1dd38 <__assert_fail@plt+0xc820>
   1dd9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dda0:	add	fp, sp, #28
   1dda4:	sub	sp, sp, #20
   1dda8:	mov	r8, r2
   1ddac:	cmp	r1, #0
   1ddb0:	str	r0, [sp, #16]
   1ddb4:	beq	1ddec <__assert_fail@plt+0xc8d4>
   1ddb8:	ldr	r0, [r1, #4]
   1ddbc:	mov	r6, r1
   1ddc0:	cmp	r8, #0
   1ddc4:	beq	1ddd8 <__assert_fail@plt+0xc8c0>
   1ddc8:	cmp	r0, #1
   1ddcc:	ldrge	r1, [r8, #4]
   1ddd0:	cmpge	r1, #1
   1ddd4:	bge	1de2c <__assert_fail@plt+0xc914>
   1ddd8:	cmp	r0, #1
   1dddc:	blt	1ddec <__assert_fail@plt+0xc8d4>
   1dde0:	ldr	r0, [sp, #16]
   1dde4:	mov	r1, r6
   1dde8:	b	1de08 <__assert_fail@plt+0xc8f0>
   1ddec:	cmp	r8, #0
   1ddf0:	beq	1de14 <__assert_fail@plt+0xc8fc>
   1ddf4:	ldr	r0, [r8, #4]
   1ddf8:	cmp	r0, #1
   1ddfc:	blt	1de14 <__assert_fail@plt+0xc8fc>
   1de00:	ldr	r0, [sp, #16]
   1de04:	mov	r1, r8
   1de08:	sub	sp, fp, #28
   1de0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de10:	b	1c510 <__assert_fail@plt+0xaff8>
   1de14:	ldr	r1, [sp, #16]
   1de18:	mov	r0, #0
   1de1c:	str	r0, [r1]
   1de20:	str	r0, [r1, #4]
   1de24:	str	r0, [r1, #8]
   1de28:	b	1df90 <__assert_fail@plt+0xca78>
   1de2c:	ldr	r4, [sp, #16]
   1de30:	add	r0, r1, r0
   1de34:	str	r0, [r4]
   1de38:	lsl	r0, r0, #2
   1de3c:	bl	22220 <__assert_fail@plt+0x10d08>
   1de40:	cmp	r0, #0
   1de44:	str	r0, [r4, #8]
   1de48:	beq	1df98 <__assert_fail@plt+0xca80>
   1de4c:	ldr	r9, [r8, #4]
   1de50:	ldr	lr, [r6, #4]
   1de54:	mov	r1, #0
   1de58:	mov	r7, #0
   1de5c:	cmp	r9, #0
   1de60:	movwgt	r1, #1
   1de64:	cmp	lr, #1
   1de68:	blt	1df2c <__assert_fail@plt+0xca14>
   1de6c:	mov	r2, #0
   1de70:	mov	ip, #0
   1de74:	str	r2, [sp, #8]
   1de78:	mov	r2, #0
   1de7c:	str	r2, [sp, #12]
   1de80:	mov	r2, #0
   1de84:	ldr	r4, [sp, #12]
   1de88:	mov	r7, ip
   1de8c:	tst	r1, #1
   1de90:	beq	1df5c <__assert_fail@plt+0xca44>
   1de94:	ldr	r1, [r8, #8]
   1de98:	ldr	r3, [r1, r7, lsl #2]
   1de9c:	ldr	r1, [r6, #8]
   1dea0:	ldr	sl, [r1, r2, lsl #2]
   1dea4:	cmp	sl, r3
   1dea8:	ble	1ded0 <__assert_fail@plt+0xc9b8>
   1deac:	add	r7, r7, #1
   1deb0:	mov	r1, #0
   1deb4:	str	r3, [r0, r4, lsl #2]
   1deb8:	add	r4, r4, #1
   1debc:	cmp	r9, r7
   1dec0:	movwgt	r1, #1
   1dec4:	cmp	lr, r2
   1dec8:	bgt	1de8c <__assert_fail@plt+0xc974>
   1decc:	b	1df30 <__assert_fail@plt+0xca18>
   1ded0:	add	r1, r7, #1
   1ded4:	str	sl, [r0, r4, lsl #2]
   1ded8:	mov	ip, r7
   1dedc:	add	r2, r2, #1
   1dee0:	str	r1, [sp, #4]
   1dee4:	ldr	r9, [r8, #4]
   1dee8:	ldr	lr, [r6, #4]
   1deec:	moveq	ip, r1
   1def0:	mov	r1, #0
   1def4:	ldr	r5, [sp, #8]
   1def8:	cmp	r9, ip
   1defc:	sub	r5, r5, #1
   1df00:	movwgt	r1, #1
   1df04:	cmp	lr, r2
   1df08:	str	r5, [sp, #8]
   1df0c:	add	r5, r4, #1
   1df10:	str	r5, [sp, #12]
   1df14:	bgt	1de84 <__assert_fail@plt+0xc96c>
   1df18:	ldr	r2, [sp, #4]
   1df1c:	cmp	sl, r3
   1df20:	add	r4, r4, #1
   1df24:	moveq	r7, r2
   1df28:	b	1df30 <__assert_fail@plt+0xca18>
   1df2c:	mov	r4, #0
   1df30:	cmp	r1, #0
   1df34:	beq	1df84 <__assert_fail@plt+0xca6c>
   1df38:	ldr	r1, [r8, #8]
   1df3c:	sub	r2, r9, r7
   1df40:	add	r0, r0, r4, lsl #2
   1df44:	lsl	r2, r2, #2
   1df48:	add	r1, r1, r7, lsl #2
   1df4c:	bl	112a8 <memcpy@plt>
   1df50:	sub	r0, r4, r7
   1df54:	add	r4, r0, r9
   1df58:	b	1df84 <__assert_fail@plt+0xca6c>
   1df5c:	ldr	r1, [r6, #8]
   1df60:	add	r0, r0, r4, lsl #2
   1df64:	add	r1, r1, r2, lsl #2
   1df68:	sub	r2, lr, r2
   1df6c:	lsl	r2, r2, #2
   1df70:	bl	112a8 <memcpy@plt>
   1df74:	ldr	r0, [r6, #4]
   1df78:	ldr	r1, [sp, #8]
   1df7c:	add	r0, r0, r1
   1df80:	add	r4, r0, r4
   1df84:	ldr	r0, [sp, #16]
   1df88:	str	r4, [r0, #4]
   1df8c:	mov	r0, #0
   1df90:	sub	sp, fp, #28
   1df94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df98:	mov	r0, #12
   1df9c:	b	1df90 <__assert_fail@plt+0xca78>
   1dfa0:	push	{r4, r5, r6, r7, fp, lr}
   1dfa4:	add	fp, sp, #16
   1dfa8:	ldr	lr, [r0, #108]	; 0x6c
   1dfac:	mov	ip, r0
   1dfb0:	cmp	lr, #1
   1dfb4:	blt	1dff8 <__assert_fail@plt+0xcae0>
   1dfb8:	ldr	r2, [ip, #116]	; 0x74
   1dfbc:	mov	r0, #0
   1dfc0:	mov	r3, #1
   1dfc4:	mov	r4, lr
   1dfc8:	add	r5, r0, r4
   1dfcc:	add	r5, r5, r5, lsr #31
   1dfd0:	asr	r6, r5, #1
   1dfd4:	add	r7, r6, r6, lsl #1
   1dfd8:	add	r7, r2, r7, lsl #3
   1dfdc:	ldr	r7, [r7, #4]
   1dfe0:	cmp	r7, r1
   1dfe4:	addlt	r0, r3, r5, asr #1
   1dfe8:	movge	r4, r6
   1dfec:	cmp	r0, r4
   1dff0:	blt	1dfc8 <__assert_fail@plt+0xcab0>
   1dff4:	b	1dffc <__assert_fail@plt+0xcae4>
   1dff8:	mov	r0, #0
   1dffc:	cmp	r0, lr
   1e000:	bge	1e020 <__assert_fail@plt+0xcb08>
   1e004:	ldr	r2, [ip, #116]	; 0x74
   1e008:	add	r3, r0, r0, lsl #1
   1e00c:	add	r2, r2, r3, lsl #3
   1e010:	ldr	r2, [r2, #4]
   1e014:	cmp	r2, r1
   1e018:	mvnne	r0, #0
   1e01c:	pop	{r4, r5, r6, r7, fp, pc}
   1e020:	mvn	r0, #0
   1e024:	pop	{r4, r5, r6, r7, fp, pc}
   1e028:	push	{r4, r5, r6, r7, fp, lr}
   1e02c:	add	fp, sp, #16
   1e030:	mov	r5, r0
   1e034:	ldr	r0, [r0, #36]	; 0x24
   1e038:	mov	r4, r1
   1e03c:	ldr	r7, [r5, #104]	; 0x68
   1e040:	cmp	r0, r1
   1e044:	ldrle	r1, [r5, #48]	; 0x30
   1e048:	cmple	r0, r1
   1e04c:	blt	1e098 <__assert_fail@plt+0xcb80>
   1e050:	ldr	r0, [r5, #28]
   1e054:	cmp	r0, r4
   1e058:	ldrle	r1, [r5, #48]	; 0x30
   1e05c:	cmple	r0, r1
   1e060:	blt	1e098 <__assert_fail@plt+0xcb80>
   1e064:	mov	r6, #0
   1e068:	cmp	r7, r4
   1e06c:	bge	1e0b0 <__assert_fail@plt+0xcb98>
   1e070:	sub	r0, r4, r7
   1e074:	mov	r1, #0
   1e078:	mov	r6, #0
   1e07c:	lsl	r2, r0, #2
   1e080:	ldr	r0, [r5, #100]	; 0x64
   1e084:	add	r0, r0, r7, lsl #2
   1e088:	add	r0, r0, #4
   1e08c:	bl	1141c <memset@plt>
   1e090:	str	r4, [r5, #104]	; 0x68
   1e094:	b	1e0b0 <__assert_fail@plt+0xcb98>
   1e098:	add	r1, r4, #1
   1e09c:	mov	r0, r5
   1e0a0:	bl	1db70 <__assert_fail@plt+0xc658>
   1e0a4:	mov	r6, r0
   1e0a8:	cmp	r0, #0
   1e0ac:	beq	1e064 <__assert_fail@plt+0xcb4c>
   1e0b0:	mov	r0, r6
   1e0b4:	pop	{r4, r5, r6, r7, fp, pc}
   1e0b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0bc:	add	fp, sp, #28
   1e0c0:	sub	sp, sp, #12
   1e0c4:	mov	r6, r2
   1e0c8:	mov	r4, r0
   1e0cc:	mov	r0, #8
   1e0d0:	mov	r7, r3
   1e0d4:	ldr	r2, [r2]
   1e0d8:	mov	r8, r1
   1e0dc:	ldr	r3, [r6, #4]
   1e0e0:	str	r0, [sp, #8]
   1e0e4:	add	r1, r6, #8
   1e0e8:	mov	r0, r4
   1e0ec:	ldr	r5, [fp, #8]
   1e0f0:	str	r7, [sp]
   1e0f4:	str	r5, [sp, #4]
   1e0f8:	bl	1e208 <__assert_fail@plt+0xccf0>
   1e0fc:	cmp	r0, #0
   1e100:	beq	1e10c <__assert_fail@plt+0xcbf4>
   1e104:	sub	sp, fp, #28
   1e108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e10c:	ldr	r0, [r4, #108]	; 0x6c
   1e110:	ldr	r1, [r4, #112]	; 0x70
   1e114:	ldr	r9, [r6, #4]
   1e118:	ldr	sl, [r8]
   1e11c:	cmp	r0, r1
   1e120:	blt	1e170 <__assert_fail@plt+0xcc58>
   1e124:	ldr	r0, [r4, #116]	; 0x74
   1e128:	add	r1, r1, r1, lsl #1
   1e12c:	lsl	r1, r1, #4
   1e130:	bl	22250 <__assert_fail@plt+0x10d38>
   1e134:	cmp	r0, #0
   1e138:	beq	1e1f8 <__assert_fail@plt+0xcce0>
   1e13c:	str	r0, [r4, #116]	; 0x74
   1e140:	ldr	r1, [r4, #108]	; 0x6c
   1e144:	ldr	r2, [r4, #112]	; 0x70
   1e148:	add	r1, r1, r1, lsl #1
   1e14c:	add	r0, r0, r1, lsl #3
   1e150:	add	r1, r2, r2, lsl #1
   1e154:	lsl	r2, r1, #3
   1e158:	mov	r1, #0
   1e15c:	bl	1141c <memset@plt>
   1e160:	ldr	r1, [r4, #112]	; 0x70
   1e164:	ldr	r0, [r4, #108]	; 0x6c
   1e168:	lsl	r1, r1, #1
   1e16c:	str	r1, [r4, #112]	; 0x70
   1e170:	ldr	r1, [r4, #116]	; 0x74
   1e174:	cmp	r0, #1
   1e178:	blt	1e198 <__assert_fail@plt+0xcc80>
   1e17c:	sub	r2, r0, #1
   1e180:	add	r2, r2, r2, lsl #1
   1e184:	add	r2, r1, r2, lsl #3
   1e188:	ldr	r3, [r2, #4]
   1e18c:	cmp	r3, r5
   1e190:	moveq	r3, #1
   1e194:	strbeq	r3, [r2, #20]
   1e198:	add	r2, r0, r0, lsl #1
   1e19c:	cmp	r9, sl
   1e1a0:	mov	r3, #0
   1e1a4:	add	r0, r0, #1
   1e1a8:	str	r7, [r1, r2, lsl #3]!
   1e1ac:	mov	r2, #0
   1e1b0:	mvneq	r3, #0
   1e1b4:	stmib	r1, {r5, sl}
   1e1b8:	str	r9, [r1, #12]
   1e1bc:	str	r3, [r1, #16]
   1e1c0:	str	r0, [r4, #108]	; 0x6c
   1e1c4:	strb	r2, [r1, #20]
   1e1c8:	sub	r0, r9, sl
   1e1cc:	ldr	r1, [r4, #120]	; 0x78
   1e1d0:	cmp	r1, r0
   1e1d4:	strlt	r0, [r4, #120]	; 0x78
   1e1d8:	ldr	r0, [r6, #4]
   1e1dc:	ldr	r1, [r8]
   1e1e0:	add	r0, r0, r5
   1e1e4:	sub	r1, r0, r1
   1e1e8:	mov	r0, r4
   1e1ec:	sub	sp, fp, #28
   1e1f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1f4:	b	1e028 <__assert_fail@plt+0xcb10>
   1e1f8:	ldr	r0, [r4, #116]	; 0x74
   1e1fc:	bl	223dc <__assert_fail@plt+0x10ec4>
   1e200:	mov	r0, #12
   1e204:	b	1e104 <__assert_fail@plt+0xcbec>
   1e208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e20c:	add	fp, sp, #28
   1e210:	sub	sp, sp, #84	; 0x54
   1e214:	ldr	r9, [r0, #84]	; 0x54
   1e218:	mov	r6, r3
   1e21c:	mov	r3, r1
   1e220:	mov	r1, #0
   1e224:	str	r0, [sp, #44]	; 0x2c
   1e228:	ldr	sl, [fp, #12]
   1e22c:	mov	r8, r2
   1e230:	str	r1, [fp, #-52]	; 0xffffffcc
   1e234:	ldr	r0, [r0, #120]	; 0x78
   1e238:	ldr	r5, [r3, #4]
   1e23c:	ldr	r1, [r9]
   1e240:	str	r9, [sp, #20]
   1e244:	add	r0, r0, sl
   1e248:	cmp	r5, r0
   1e24c:	ldr	r1, [r1, r2, lsl #3]
   1e250:	str	r1, [sp, #24]
   1e254:	ble	1e728 <__assert_fail@plt+0xd210>
   1e258:	add	r4, r3, #8
   1e25c:	ldr	r0, [sp, #44]	; 0x2c
   1e260:	ldr	r5, [r3]
   1e264:	ldr	r4, [r4]
   1e268:	str	r3, [sp, #16]
   1e26c:	ldr	r1, [r0, #40]	; 0x28
   1e270:	ldr	r2, [r0, #88]	; 0x58
   1e274:	cmp	r5, #0
   1e278:	moveq	r5, r6
   1e27c:	str	r1, [sp, #12]
   1e280:	ldr	r1, [r0, #100]	; 0x64
   1e284:	str	r4, [r0, #100]	; 0x64
   1e288:	str	r5, [r0, #40]	; 0x28
   1e28c:	str	r1, [sp, #8]
   1e290:	sub	r1, r5, #1
   1e294:	bl	1d260 <__assert_fail@plt+0xbd48>
   1e298:	mov	r7, r0
   1e29c:	cmp	r5, r6
   1e2a0:	bne	1e36c <__assert_fail@plt+0xce54>
   1e2a4:	mov	r0, #1
   1e2a8:	str	r0, [sp, #52]	; 0x34
   1e2ac:	str	r0, [sp, #48]	; 0x30
   1e2b0:	mov	r0, #4
   1e2b4:	bl	22220 <__assert_fail@plt+0x10d08>
   1e2b8:	cmp	r0, #0
   1e2bc:	str	r0, [sp, #56]	; 0x38
   1e2c0:	beq	1e7ac <__assert_fail@plt+0xd294>
   1e2c4:	ldr	r6, [sp, #24]
   1e2c8:	ldr	r4, [fp, #16]
   1e2cc:	str	r8, [r0]
   1e2d0:	mov	r0, #0
   1e2d4:	add	r1, sp, #48	; 0x30
   1e2d8:	str	r7, [sp, #40]	; 0x28
   1e2dc:	str	r0, [fp, #-52]	; 0xffffffcc
   1e2e0:	mov	r0, r9
   1e2e4:	mov	r2, r6
   1e2e8:	mov	r3, r4
   1e2ec:	bl	1e7cc <__assert_fail@plt+0xd2b4>
   1e2f0:	ldr	r8, [sp, #44]	; 0x2c
   1e2f4:	cmp	r0, #0
   1e2f8:	str	r0, [fp, #-52]	; 0xffffffcc
   1e2fc:	bne	1e79c <__assert_fail@plt+0xd284>
   1e300:	ldr	r0, [sp, #52]	; 0x34
   1e304:	cmp	r0, #0
   1e308:	beq	1e330 <__assert_fail@plt+0xce18>
   1e30c:	add	r1, sp, #48	; 0x30
   1e310:	mov	r0, r8
   1e314:	mov	r2, r5
   1e318:	mov	r3, r6
   1e31c:	str	r4, [sp]
   1e320:	bl	1e904 <__assert_fail@plt+0xd3ec>
   1e324:	cmp	r0, #0
   1e328:	str	r0, [fp, #-52]	; 0xffffffcc
   1e32c:	bne	1e79c <__assert_fail@plt+0xd284>
   1e330:	ldr	r3, [sp, #40]	; 0x28
   1e334:	sub	r0, fp, #52	; 0x34
   1e338:	add	r2, sp, #48	; 0x30
   1e33c:	mov	r1, r9
   1e340:	bl	1c5f0 <__assert_fail@plt+0xb0d8>
   1e344:	mov	r6, r0
   1e348:	cmp	r0, #0
   1e34c:	bne	1e35c <__assert_fail@plt+0xce44>
   1e350:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1e354:	cmp	r0, #0
   1e358:	bne	1e718 <__assert_fail@plt+0xd200>
   1e35c:	ldr	r0, [r8, #100]	; 0x64
   1e360:	mov	r4, r5
   1e364:	str	r6, [r0, r5, lsl #2]
   1e368:	b	1e3e0 <__assert_fail@plt+0xcec8>
   1e36c:	ldr	r6, [r4, r5, lsl #2]
   1e370:	mov	r4, r5
   1e374:	cmp	r6, #0
   1e378:	beq	1e3a0 <__assert_fail@plt+0xce88>
   1e37c:	ldrb	r0, [r6, #52]	; 0x34
   1e380:	ldr	r8, [sp, #44]	; 0x2c
   1e384:	tst	r0, #64	; 0x40
   1e388:	bne	1e3b8 <__assert_fail@plt+0xcea0>
   1e38c:	mov	r0, #0
   1e390:	str	r0, [sp, #52]	; 0x34
   1e394:	str	r0, [sp, #48]	; 0x30
   1e398:	str	r0, [sp, #56]	; 0x38
   1e39c:	b	1e3e0 <__assert_fail@plt+0xcec8>
   1e3a0:	ldr	r8, [sp, #44]	; 0x2c
   1e3a4:	mov	r6, #0
   1e3a8:	str	r6, [sp, #52]	; 0x34
   1e3ac:	str	r6, [sp, #48]	; 0x30
   1e3b0:	str	r6, [sp, #56]	; 0x38
   1e3b4:	b	1e3e0 <__assert_fail@plt+0xcec8>
   1e3b8:	add	r1, r6, #4
   1e3bc:	add	r0, sp, #48	; 0x30
   1e3c0:	str	r7, [sp, #40]	; 0x28
   1e3c4:	bl	1c510 <__assert_fail@plt+0xaff8>
   1e3c8:	cmp	r0, #0
   1e3cc:	str	r0, [fp, #-52]	; 0xffffffcc
   1e3d0:	bne	1e7c4 <__assert_fail@plt+0xd2ac>
   1e3d4:	ldrb	r0, [r6, #52]	; 0x34
   1e3d8:	tst	r0, #64	; 0x40
   1e3dc:	bne	1e6e8 <__assert_fail@plt+0xd1d0>
   1e3e0:	cmp	r4, sl
   1e3e4:	bge	1e684 <__assert_fail@plt+0xd16c>
   1e3e8:	add	r5, sp, #48	; 0x30
   1e3ec:	mov	r2, #0
   1e3f0:	ldr	r0, [r8, #120]	; 0x78
   1e3f4:	cmp	r2, r0
   1e3f8:	bgt	1e684 <__assert_fail@plt+0xd16c>
   1e3fc:	mov	r0, #0
   1e400:	add	r1, r4, #1
   1e404:	str	r2, [sp, #28]
   1e408:	str	r0, [sp, #52]	; 0x34
   1e40c:	str	r1, [sp, #32]
   1e410:	ldr	r0, [r8, #100]	; 0x64
   1e414:	ldr	r0, [r0, r1, lsl #2]
   1e418:	cmp	r0, #0
   1e41c:	beq	1e438 <__assert_fail@plt+0xcf20>
   1e420:	add	r1, r0, #4
   1e424:	mov	r0, r5
   1e428:	bl	1c160 <__assert_fail@plt+0xac48>
   1e42c:	cmp	r0, #0
   1e430:	str	r0, [fp, #-52]	; 0xffffffcc
   1e434:	bne	1e718 <__assert_fail@plt+0xd200>
   1e438:	cmp	r6, #0
   1e43c:	beq	1e5b8 <__assert_fail@plt+0xd0a0>
   1e440:	mov	r0, #0
   1e444:	ldr	r7, [r8, #84]	; 0x54
   1e448:	str	r0, [fp, #-32]	; 0xffffffe0
   1e44c:	str	r0, [fp, #-44]	; 0xffffffd4
   1e450:	str	r0, [fp, #-48]	; 0xffffffd0
   1e454:	str	r0, [fp, #-40]	; 0xffffffd8
   1e458:	ldr	r1, [r6, #20]
   1e45c:	cmp	r1, #1
   1e460:	blt	1e5a8 <__assert_fail@plt+0xd090>
   1e464:	mov	r5, #0
   1e468:	str	r4, [sp, #40]	; 0x28
   1e46c:	str	r6, [sp, #36]	; 0x24
   1e470:	b	1e47c <__assert_fail@plt+0xcf64>
   1e474:	ldr	r0, [r7]
   1e478:	b	1e498 <__assert_fail@plt+0xcf80>
   1e47c:	ldr	r0, [r6, #24]
   1e480:	ldr	sl, [r0, r5, lsl #2]
   1e484:	ldr	r0, [r7]
   1e488:	add	r1, r0, sl, lsl #3
   1e48c:	ldrb	r1, [r1, #6]
   1e490:	tst	r1, #16
   1e494:	bne	1e4b4 <__assert_fail@plt+0xcf9c>
   1e498:	add	r1, r0, sl, lsl #3
   1e49c:	mov	r0, r8
   1e4a0:	mov	r2, r4
   1e4a4:	bl	1f1d8 <__assert_fail@plt+0xdcc0>
   1e4a8:	cmp	r0, #0
   1e4ac:	bne	1e570 <__assert_fail@plt+0xd058>
   1e4b0:	b	1e588 <__assert_fail@plt+0xd070>
   1e4b4:	mov	r0, r7
   1e4b8:	mov	r1, sl
   1e4bc:	mov	r2, r8
   1e4c0:	mov	r3, r4
   1e4c4:	bl	1eee8 <__assert_fail@plt+0xd9d0>
   1e4c8:	cmp	r0, #2
   1e4cc:	blt	1e568 <__assert_fail@plt+0xd050>
   1e4d0:	add	r4, r0, r4
   1e4d4:	ldr	r0, [r8, #100]	; 0x64
   1e4d8:	ldr	r1, [r7, #12]
   1e4dc:	sub	r8, fp, #48	; 0x30
   1e4e0:	ldr	r0, [r0, r4, lsl #2]
   1e4e4:	ldr	r6, [r1, sl, lsl #2]
   1e4e8:	mov	r1, #0
   1e4ec:	str	r1, [fp, #-44]	; 0xffffffd4
   1e4f0:	cmp	r0, #0
   1e4f4:	beq	1e510 <__assert_fail@plt+0xcff8>
   1e4f8:	add	r1, r0, #4
   1e4fc:	mov	r0, r8
   1e500:	bl	1c160 <__assert_fail@plt+0xac48>
   1e504:	cmp	r0, #0
   1e508:	str	r0, [fp, #-32]	; 0xffffffe0
   1e50c:	bne	1e708 <__assert_fail@plt+0xd1f0>
   1e510:	mov	r0, r8
   1e514:	mov	r1, r6
   1e518:	bl	1c374 <__assert_fail@plt+0xae5c>
   1e51c:	cmp	r0, #0
   1e520:	beq	1e6f8 <__assert_fail@plt+0xd1e0>
   1e524:	sub	r0, fp, #32
   1e528:	mov	r1, r7
   1e52c:	mov	r2, r8
   1e530:	bl	1ecec <__assert_fail@plt+0xd7d4>
   1e534:	ldr	r8, [sp, #44]	; 0x2c
   1e538:	ldr	r6, [sp, #36]	; 0x24
   1e53c:	ldr	r1, [r8, #100]	; 0x64
   1e540:	str	r0, [r1, r4, lsl #2]
   1e544:	ldr	r0, [r8, #100]	; 0x64
   1e548:	ldr	r0, [r0, r4, lsl #2]
   1e54c:	ldr	r4, [sp, #40]	; 0x28
   1e550:	cmp	r0, #0
   1e554:	bne	1e570 <__assert_fail@plt+0xd058>
   1e558:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1e55c:	cmp	r9, #0
   1e560:	beq	1e570 <__assert_fail@plt+0xd058>
   1e564:	b	1e70c <__assert_fail@plt+0xd1f4>
   1e568:	cmp	r0, #0
   1e56c:	beq	1e474 <__assert_fail@plt+0xcf5c>
   1e570:	ldr	r0, [r7, #12]
   1e574:	ldr	r1, [r0, sl, lsl #2]
   1e578:	add	r0, sp, #48	; 0x30
   1e57c:	bl	1c374 <__assert_fail@plt+0xae5c>
   1e580:	cmp	r0, #0
   1e584:	beq	1e6f8 <__assert_fail@plt+0xd1e0>
   1e588:	ldr	r0, [r6, #20]
   1e58c:	add	r5, r5, #1
   1e590:	cmp	r5, r0
   1e594:	blt	1e47c <__assert_fail@plt+0xcf64>
   1e598:	ldr	r5, [fp, #12]
   1e59c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1e5a0:	ldr	r9, [sp, #20]
   1e5a4:	mov	sl, r5
   1e5a8:	bl	223dc <__assert_fail@plt+0x10ec4>
   1e5ac:	mov	r0, #0
   1e5b0:	add	r5, sp, #48	; 0x30
   1e5b4:	str	r0, [fp, #-52]	; 0xffffffcc
   1e5b8:	ldr	r0, [sp, #52]	; 0x34
   1e5bc:	cmp	r0, #0
   1e5c0:	beq	1e618 <__assert_fail@plt+0xd100>
   1e5c4:	mov	r6, r4
   1e5c8:	ldr	r4, [sp, #24]
   1e5cc:	ldr	r7, [fp, #16]
   1e5d0:	mov	r0, r9
   1e5d4:	mov	r1, r5
   1e5d8:	mov	r2, r4
   1e5dc:	mov	r3, r7
   1e5e0:	bl	1e7cc <__assert_fail@plt+0xd2b4>
   1e5e4:	cmp	r0, #0
   1e5e8:	str	r0, [fp, #-52]	; 0xffffffcc
   1e5ec:	bne	1e718 <__assert_fail@plt+0xd200>
   1e5f0:	ldr	r2, [sp, #32]
   1e5f4:	mov	r0, r8
   1e5f8:	mov	r1, r5
   1e5fc:	mov	r3, r4
   1e600:	str	r7, [sp]
   1e604:	bl	1e904 <__assert_fail@plt+0xd3ec>
   1e608:	cmp	r0, #0
   1e60c:	mov	r4, r6
   1e610:	str	r0, [fp, #-52]	; 0xffffffcc
   1e614:	bne	1e718 <__assert_fail@plt+0xd200>
   1e618:	ldr	r2, [r8, #88]	; 0x58
   1e61c:	mov	r0, r8
   1e620:	mov	r1, r4
   1e624:	bl	1d260 <__assert_fail@plt+0xbd48>
   1e628:	mov	r3, r0
   1e62c:	sub	r0, fp, #52	; 0x34
   1e630:	mov	r1, r9
   1e634:	mov	r2, r5
   1e638:	bl	1c5f0 <__assert_fail@plt+0xb0d8>
   1e63c:	mov	r6, r0
   1e640:	cmp	r0, #0
   1e644:	bne	1e654 <__assert_fail@plt+0xd13c>
   1e648:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1e64c:	cmp	r0, #0
   1e650:	bne	1e718 <__assert_fail@plt+0xd200>
   1e654:	ldr	r1, [sp, #32]
   1e658:	ldr	r0, [r8, #100]	; 0x64
   1e65c:	ldr	r2, [sp, #28]
   1e660:	cmp	r6, #0
   1e664:	str	r6, [r0, r1, lsl #2]
   1e668:	mov	r0, #0
   1e66c:	mov	r4, r1
   1e670:	addeq	r0, r2, #1
   1e674:	cmp	r1, sl
   1e678:	mov	r2, r0
   1e67c:	blt	1e3f0 <__assert_fail@plt+0xced8>
   1e680:	b	1e688 <__assert_fail@plt+0xd170>
   1e684:	mov	r1, r4
   1e688:	ldr	r0, [sp, #56]	; 0x38
   1e68c:	mov	r4, r1
   1e690:	bl	223dc <__assert_fail@plt+0x10ec4>
   1e694:	ldr	r0, [r8, #100]	; 0x64
   1e698:	ldr	r1, [sp, #16]
   1e69c:	ldr	r0, [r0, sl, lsl #2]
   1e6a0:	str	r4, [r1]
   1e6a4:	ldr	r1, [sp, #12]
   1e6a8:	str	r1, [r8, #40]	; 0x28
   1e6ac:	ldr	r1, [sp, #8]
   1e6b0:	cmp	r0, #0
   1e6b4:	str	r1, [r8, #100]	; 0x64
   1e6b8:	beq	1e6d8 <__assert_fail@plt+0xd1c0>
   1e6bc:	ldr	r1, [fp, #8]
   1e6c0:	add	r0, r0, #4
   1e6c4:	bl	1c58c <__assert_fail@plt+0xb074>
   1e6c8:	mov	r7, #0
   1e6cc:	cmp	r0, #0
   1e6d0:	moveq	r7, #1
   1e6d4:	b	1e6dc <__assert_fail@plt+0xd1c4>
   1e6d8:	mov	r7, #1
   1e6dc:	mov	r0, r7
   1e6e0:	sub	sp, fp, #28
   1e6e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6e8:	mov	r5, r4
   1e6ec:	ldr	r6, [sp, #24]
   1e6f0:	ldr	r4, [fp, #16]
   1e6f4:	b	1e300 <__assert_fail@plt+0xcde8>
   1e6f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1e6fc:	bl	223dc <__assert_fail@plt+0x10ec4>
   1e700:	mov	r9, #12
   1e704:	b	1e714 <__assert_fail@plt+0xd1fc>
   1e708:	mov	r9, r0
   1e70c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1e710:	bl	223dc <__assert_fail@plt+0x10ec4>
   1e714:	str	r9, [fp, #-52]	; 0xffffffcc
   1e718:	ldr	r0, [sp, #56]	; 0x38
   1e71c:	bl	223dc <__assert_fail@plt+0x10ec4>
   1e720:	ldr	r7, [fp, #-52]	; 0xffffffcc
   1e724:	b	1e6dc <__assert_fail@plt+0xd1c4>
   1e728:	mvn	r1, #-2147483648	; 0x80000000
   1e72c:	mov	r7, #12
   1e730:	sub	r1, r1, r5
   1e734:	cmp	r1, r0
   1e738:	ble	1e6dc <__assert_fail@plt+0xd1c4>
   1e73c:	add	r0, r0, #1
   1e740:	add	sl, r0, r5
   1e744:	str	r0, [sp, #40]	; 0x28
   1e748:	cmn	sl, #-1073741823	; 0xc0000001
   1e74c:	bhi	1e6dc <__assert_fail@plt+0xd1c4>
   1e750:	mov	r4, r3
   1e754:	lsl	r1, sl, #2
   1e758:	mov	r9, r3
   1e75c:	ldr	r0, [r4, #8]!
   1e760:	bl	22250 <__assert_fail@plt+0x10d38>
   1e764:	cmp	r0, #0
   1e768:	beq	1e6dc <__assert_fail@plt+0xd1c4>
   1e76c:	ldr	r1, [sp, #40]	; 0x28
   1e770:	str	sl, [r9, #4]
   1e774:	str	r0, [r9, #8]
   1e778:	add	r0, r0, r5, lsl #2
   1e77c:	lsl	r2, r1, #2
   1e780:	mov	r1, #0
   1e784:	bl	1141c <memset@plt>
   1e788:	ldr	r5, [fp, #12]
   1e78c:	mov	r3, r9
   1e790:	ldr	r9, [sp, #20]
   1e794:	mov	sl, r5
   1e798:	b	1e25c <__assert_fail@plt+0xcd44>
   1e79c:	mov	r7, r0
   1e7a0:	ldr	r0, [sp, #56]	; 0x38
   1e7a4:	bl	223dc <__assert_fail@plt+0x10ec4>
   1e7a8:	b	1e6dc <__assert_fail@plt+0xd1c4>
   1e7ac:	mov	r0, #0
   1e7b0:	mov	r7, #12
   1e7b4:	str	r0, [sp, #48]	; 0x30
   1e7b8:	str	r0, [sp, #52]	; 0x34
   1e7bc:	str	r7, [fp, #-52]	; 0xffffffcc
   1e7c0:	b	1e6dc <__assert_fail@plt+0xd1c4>
   1e7c4:	mov	r7, r0
   1e7c8:	b	1e6dc <__assert_fail@plt+0xd1c4>
   1e7cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e7d0:	add	fp, sp, #28
   1e7d4:	sub	sp, sp, #28
   1e7d8:	str	r0, [sp, #12]
   1e7dc:	ldr	r0, [r1, #4]
   1e7e0:	mov	r4, r1
   1e7e4:	mov	r1, #0
   1e7e8:	mov	sl, r3
   1e7ec:	mov	r8, r2
   1e7f0:	str	r1, [sp, #20]
   1e7f4:	str	r0, [sp, #16]
   1e7f8:	lsl	r0, r0, #2
   1e7fc:	bl	22220 <__assert_fail@plt+0x10d08>
   1e800:	cmp	r0, #0
   1e804:	str	r0, [sp, #24]
   1e808:	beq	1e8fc <__assert_fail@plt+0xd3e4>
   1e80c:	ldr	r0, [r4, #4]
   1e810:	cmp	r0, #1
   1e814:	blt	1e8c4 <__assert_fail@plt+0xd3ac>
   1e818:	mov	r9, #0
   1e81c:	str	r4, [sp, #8]
   1e820:	b	1e844 <__assert_fail@plt+0xd32c>
   1e824:	cmn	r4, #1
   1e828:	beq	1e8a0 <__assert_fail@plt+0xd388>
   1e82c:	ldr	r0, [sp, #12]
   1e830:	add	r1, sp, #16
   1e834:	mov	r3, r8
   1e838:	str	sl, [sp]
   1e83c:	bl	1ebe8 <__assert_fail@plt+0xd6d0>
   1e840:	b	1e8a8 <__assert_fail@plt+0xd390>
   1e844:	ldr	r0, [r4, #8]
   1e848:	ldr	r1, [sp, #12]
   1e84c:	ldr	r2, [r0, r9, lsl #2]
   1e850:	ldr	r1, [r1, #24]
   1e854:	add	r0, r2, r2, lsl #1
   1e858:	add	r1, r1, r0, lsl #2
   1e85c:	ldr	r0, [r1, #4]
   1e860:	cmp	r0, #1
   1e864:	blt	1e8a0 <__assert_fail@plt+0xd388>
   1e868:	ldr	r7, [sp, #12]
   1e86c:	ldr	r3, [r1, #8]
   1e870:	mov	r6, #0
   1e874:	ldr	r7, [r7]
   1e878:	ldr	r4, [r3, r6, lsl #2]
   1e87c:	add	r5, r7, r4, lsl #3
   1e880:	ldrb	r5, [r5, #4]
   1e884:	cmp	r5, sl
   1e888:	ldreq	r5, [r7, r4, lsl #3]
   1e88c:	cmpeq	r5, r8
   1e890:	beq	1e824 <__assert_fail@plt+0xd30c>
   1e894:	add	r6, r6, #1
   1e898:	cmp	r6, r0
   1e89c:	blt	1e878 <__assert_fail@plt+0xd360>
   1e8a0:	add	r0, sp, #16
   1e8a4:	bl	1c160 <__assert_fail@plt+0xac48>
   1e8a8:	cmp	r0, #0
   1e8ac:	bne	1e8ec <__assert_fail@plt+0xd3d4>
   1e8b0:	ldr	r4, [sp, #8]
   1e8b4:	add	r9, r9, #1
   1e8b8:	ldr	r0, [r4, #4]
   1e8bc:	cmp	r9, r0
   1e8c0:	blt	1e844 <__assert_fail@plt+0xd32c>
   1e8c4:	ldr	r0, [r4, #8]
   1e8c8:	bl	223dc <__assert_fail@plt+0x10ec4>
   1e8cc:	vldr	d16, [sp, #16]
   1e8d0:	ldr	r0, [sp, #24]
   1e8d4:	mov	r7, #0
   1e8d8:	str	r0, [r4, #8]
   1e8dc:	vstr	d16, [r4]
   1e8e0:	mov	r0, r7
   1e8e4:	sub	sp, fp, #28
   1e8e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8ec:	mov	r7, r0
   1e8f0:	ldr	r0, [sp, #24]
   1e8f4:	bl	223dc <__assert_fail@plt+0x10ec4>
   1e8f8:	b	1e8e0 <__assert_fail@plt+0xd3c8>
   1e8fc:	mov	r7, #12
   1e900:	b	1e8e0 <__assert_fail@plt+0xd3c8>
   1e904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e908:	add	fp, sp, #28
   1e90c:	sub	sp, sp, #44	; 0x2c
   1e910:	ldr	r6, [r0, #84]	; 0x54
   1e914:	mov	r4, r1
   1e918:	mov	r1, r2
   1e91c:	str	r3, [sp, #4]
   1e920:	mov	r5, r2
   1e924:	str	r0, [sp, #24]
   1e928:	bl	1dfa0 <__assert_fail@plt+0xca88>
   1e92c:	cmn	r0, #1
   1e930:	beq	1ebdc <__assert_fail@plt+0xd6c4>
   1e934:	add	r1, r0, r0, lsl #1
   1e938:	str	r5, [sp, #16]
   1e93c:	str	r6, [sp, #12]
   1e940:	str	r4, [sp, #8]
   1e944:	str	r1, [sp]
   1e948:	b	1e950 <__assert_fail@plt+0xd438>
   1e94c:	ldr	r1, [sp]
   1e950:	ldr	r0, [sp, #24]
   1e954:	ldr	r0, [r0, #116]	; 0x74
   1e958:	add	r0, r0, r1, lsl #3
   1e95c:	add	r0, r0, #8
   1e960:	ldr	r7, [r0, #-8]
   1e964:	mov	sl, r0
   1e968:	mov	r0, r4
   1e96c:	mov	r1, r7
   1e970:	bl	1c58c <__assert_fail@plt+0xb074>
   1e974:	cmp	r0, #0
   1e978:	beq	1eb40 <__assert_fail@plt+0xd628>
   1e97c:	ldm	sl, {r0, r1}
   1e980:	add	r1, r1, r5
   1e984:	sub	r9, r1, r0
   1e988:	cmp	r9, r5
   1e98c:	bne	1ea34 <__assert_fail@plt+0xd51c>
   1e990:	ldr	r0, [r6, #20]
   1e994:	add	r1, r7, r7, lsl #1
   1e998:	add	r0, r0, r1, lsl #2
   1e99c:	ldr	r0, [r0, #8]
   1e9a0:	ldr	r7, [r0]
   1e9a4:	mov	r0, r4
   1e9a8:	mov	r1, r7
   1e9ac:	bl	1c58c <__assert_fail@plt+0xb074>
   1e9b0:	mov	r1, #4
   1e9b4:	cmp	r0, #0
   1e9b8:	bne	1ea2c <__assert_fail@plt+0xd514>
   1e9bc:	mov	r0, #1
   1e9c0:	str	r0, [sp, #32]
   1e9c4:	str	r0, [sp, #28]
   1e9c8:	mov	r0, #4
   1e9cc:	bl	22220 <__assert_fail@plt+0x10d08>
   1e9d0:	cmp	r0, #0
   1e9d4:	str	r0, [sp, #36]	; 0x24
   1e9d8:	beq	1eb54 <__assert_fail@plt+0xd63c>
   1e9dc:	mov	r5, #0
   1e9e0:	str	r7, [r0]
   1e9e4:	ldr	r2, [sp, #4]
   1e9e8:	ldr	r3, [fp, #8]
   1e9ec:	add	r7, sp, #28
   1e9f0:	mov	r0, r6
   1e9f4:	str	r5, [fp, #-32]	; 0xffffffe0
   1e9f8:	mov	r1, r7
   1e9fc:	bl	1e7cc <__assert_fail@plt+0xd2b4>
   1ea00:	mov	r9, r0
   1ea04:	mov	r0, r4
   1ea08:	mov	r1, r7
   1ea0c:	bl	1c160 <__assert_fail@plt+0xac48>
   1ea10:	mov	r8, r0
   1ea14:	ldr	r0, [sp, #36]	; 0x24
   1ea18:	bl	223dc <__assert_fail@plt+0x10ec4>
   1ea1c:	orr	r0, r9, r5
   1ea20:	mov	r1, #2
   1ea24:	orrs	r0, r0, r8
   1ea28:	bne	1eb68 <__assert_fail@plt+0xd650>
   1ea2c:	ldr	r5, [sp, #16]
   1ea30:	b	1eb34 <__assert_fail@plt+0xd61c>
   1ea34:	ldr	r0, [sp, #24]
   1ea38:	ldr	r1, [r6, #12]
   1ea3c:	ldr	r0, [r0, #100]	; 0x64
   1ea40:	ldr	r8, [r1, r7, lsl #2]
   1ea44:	ldr	r0, [r0, r9, lsl #2]
   1ea48:	cmp	r0, #0
   1ea4c:	beq	1ea74 <__assert_fail@plt+0xd55c>
   1ea50:	add	r4, r0, #4
   1ea54:	mov	r1, r8
   1ea58:	mov	r0, r4
   1ea5c:	bl	1c58c <__assert_fail@plt+0xb074>
   1ea60:	mov	r1, #4
   1ea64:	cmp	r0, #0
   1ea68:	beq	1eaa4 <__assert_fail@plt+0xd58c>
   1ea6c:	ldr	r6, [sp, #12]
   1ea70:	b	1eb30 <__assert_fail@plt+0xd618>
   1ea74:	mov	r0, #1
   1ea78:	str	r0, [sp, #32]
   1ea7c:	str	r0, [sp, #28]
   1ea80:	mov	r0, #4
   1ea84:	bl	22220 <__assert_fail@plt+0x10d08>
   1ea88:	cmp	r0, #0
   1ea8c:	str	r0, [sp, #36]	; 0x24
   1ea90:	beq	1eb88 <__assert_fail@plt+0xd670>
   1ea94:	str	r8, [r0]
   1ea98:	mov	r0, #0
   1ea9c:	str	r0, [fp, #-32]	; 0xffffffe0
   1eaa0:	b	1ead8 <__assert_fail@plt+0xd5c0>
   1eaa4:	add	r6, sp, #28
   1eaa8:	mov	r1, r4
   1eaac:	mov	r0, r6
   1eab0:	bl	1c510 <__assert_fail@plt+0xaff8>
   1eab4:	mov	r4, r0
   1eab8:	str	r0, [fp, #-32]	; 0xffffffe0
   1eabc:	mov	r0, r6
   1eac0:	mov	r1, r8
   1eac4:	bl	1c374 <__assert_fail@plt+0xae5c>
   1eac8:	cmp	r4, #0
   1eacc:	bne	1ebac <__assert_fail@plt+0xd694>
   1ead0:	cmp	r0, #0
   1ead4:	beq	1ebac <__assert_fail@plt+0xd694>
   1ead8:	ldr	r6, [sp, #12]
   1eadc:	sub	r0, fp, #32
   1eae0:	add	r2, sp, #28
   1eae4:	mov	r1, r6
   1eae8:	bl	1ecec <__assert_fail@plt+0xd7d4>
   1eaec:	ldr	r4, [sp, #24]
   1eaf0:	ldr	r1, [r4, #100]	; 0x64
   1eaf4:	str	r0, [r1, r9, lsl #2]
   1eaf8:	ldr	r0, [sp, #36]	; 0x24
   1eafc:	bl	223dc <__assert_fail@plt+0x10ec4>
   1eb00:	ldr	r0, [r4, #100]	; 0x64
   1eb04:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1eb08:	ldr	r0, [r0, r9, lsl #2]
   1eb0c:	cmp	r2, #0
   1eb10:	mov	r1, r2
   1eb14:	movwne	r1, #1
   1eb18:	clz	r0, r0
   1eb1c:	lsr	r0, r0, #5
   1eb20:	ands	r1, r0, r1
   1eb24:	ldr	r0, [sp, #20]
   1eb28:	movne	r0, r2
   1eb2c:	str	r0, [sp, #20]
   1eb30:	ldr	r4, [sp, #8]
   1eb34:	cmp	r1, #0
   1eb38:	cmpne	r1, #4
   1eb3c:	bne	1ebcc <__assert_fail@plt+0xd6b4>
   1eb40:	ldrb	r1, [sl, #12]
   1eb44:	add	r0, sl, #24
   1eb48:	cmp	r1, #0
   1eb4c:	bne	1e960 <__assert_fail@plt+0xd448>
   1eb50:	b	1ebdc <__assert_fail@plt+0xd6c4>
   1eb54:	mov	r0, #0
   1eb58:	mov	r5, #12
   1eb5c:	str	r0, [sp, #28]
   1eb60:	str	r0, [sp, #32]
   1eb64:	b	1e9e4 <__assert_fail@plt+0xd4cc>
   1eb68:	cmp	r9, #0
   1eb6c:	mov	r1, #1
   1eb70:	movne	r8, r9
   1eb74:	cmp	r5, #0
   1eb78:	movne	r8, r5
   1eb7c:	str	r8, [fp, #-32]	; 0xffffffe0
   1eb80:	str	r8, [sp, #20]
   1eb84:	b	1ea2c <__assert_fail@plt+0xd514>
   1eb88:	mov	r0, #0
   1eb8c:	mov	r1, #12
   1eb90:	str	r0, [sp, #28]
   1eb94:	str	r0, [sp, #32]
   1eb98:	mov	r0, #12
   1eb9c:	str	r1, [fp, #-32]	; 0xffffffe0
   1eba0:	mov	r1, #1
   1eba4:	str	r0, [sp, #20]
   1eba8:	b	1ea6c <__assert_fail@plt+0xd554>
   1ebac:	ldr	r0, [sp, #36]	; 0x24
   1ebb0:	bl	223dc <__assert_fail@plt+0x10ec4>
   1ebb4:	cmp	r4, #0
   1ebb8:	mov	r1, #1
   1ebbc:	movweq	r4, #12
   1ebc0:	str	r4, [fp, #-32]	; 0xffffffe0
   1ebc4:	str	r4, [sp, #20]
   1ebc8:	b	1ea6c <__assert_fail@plt+0xd554>
   1ebcc:	cmp	r1, #2
   1ebd0:	beq	1e94c <__assert_fail@plt+0xd434>
   1ebd4:	ldr	r0, [sp, #20]
   1ebd8:	b	1ebe0 <__assert_fail@plt+0xd6c8>
   1ebdc:	mov	r0, #0
   1ebe0:	sub	sp, fp, #28
   1ebe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ebe8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ebec:	add	fp, sp, #24
   1ebf0:	sub	sp, sp, #8
   1ebf4:	mov	r6, r0
   1ebf8:	mov	r4, r1
   1ebfc:	mov	r0, r1
   1ec00:	mov	r1, r2
   1ec04:	mov	r5, r3
   1ec08:	mov	r7, r2
   1ec0c:	bl	1c58c <__assert_fail@plt+0xb074>
   1ec10:	cmp	r0, #0
   1ec14:	beq	1ec24 <__assert_fail@plt+0xd70c>
   1ec18:	mov	r0, #0
   1ec1c:	sub	sp, fp, #24
   1ec20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ec24:	ldr	r8, [fp, #8]
   1ec28:	ldr	r0, [r6]
   1ec2c:	add	r1, r0, r7, lsl #3
   1ec30:	ldrb	r1, [r1, #4]
   1ec34:	cmp	r1, r8
   1ec38:	ldreq	r0, [r0, r7, lsl #3]
   1ec3c:	cmpeq	r0, r5
   1ec40:	beq	1ecc8 <__assert_fail@plt+0xd7b0>
   1ec44:	mov	r0, r4
   1ec48:	mov	r1, r7
   1ec4c:	bl	1c374 <__assert_fail@plt+0xae5c>
   1ec50:	cmp	r0, #0
   1ec54:	beq	1ece4 <__assert_fail@plt+0xd7cc>
   1ec58:	ldr	r0, [r6, #20]
   1ec5c:	add	r7, r7, r7, lsl #1
   1ec60:	add	r1, r0, r7, lsl #2
   1ec64:	ldr	r2, [r1, #4]
   1ec68:	cmp	r2, #2
   1ec6c:	beq	1ec7c <__assert_fail@plt+0xd764>
   1ec70:	cmp	r2, #0
   1ec74:	bne	1eca4 <__assert_fail@plt+0xd78c>
   1ec78:	b	1ec18 <__assert_fail@plt+0xd700>
   1ec7c:	ldr	r0, [r1, #8]
   1ec80:	mov	r1, r4
   1ec84:	mov	r3, r5
   1ec88:	ldr	r2, [r0, #4]
   1ec8c:	mov	r0, r6
   1ec90:	str	r8, [sp]
   1ec94:	bl	1ebe8 <__assert_fail@plt+0xd6d0>
   1ec98:	cmp	r0, #0
   1ec9c:	bne	1ec1c <__assert_fail@plt+0xd704>
   1eca0:	ldr	r0, [r6, #20]
   1eca4:	add	r0, r0, r7, lsl #2
   1eca8:	ldr	r0, [r0, #8]
   1ecac:	ldr	r7, [r0]
   1ecb0:	mov	r0, r4
   1ecb4:	mov	r1, r7
   1ecb8:	bl	1c58c <__assert_fail@plt+0xb074>
   1ecbc:	cmp	r0, #0
   1ecc0:	beq	1ec28 <__assert_fail@plt+0xd710>
   1ecc4:	b	1ec18 <__assert_fail@plt+0xd700>
   1ecc8:	cmp	r8, #9
   1eccc:	bne	1ec18 <__assert_fail@plt+0xd700>
   1ecd0:	mov	r0, r4
   1ecd4:	mov	r1, r7
   1ecd8:	bl	1c374 <__assert_fail@plt+0xae5c>
   1ecdc:	cmp	r0, #0
   1ece0:	bne	1ec18 <__assert_fail@plt+0xd700>
   1ece4:	mov	r0, #12
   1ece8:	b	1ec1c <__assert_fail@plt+0xd704>
   1ecec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ecf0:	add	fp, sp, #28
   1ecf4:	sub	sp, sp, #4
   1ecf8:	ldr	sl, [r2, #4]
   1ecfc:	cmp	sl, #0
   1ed00:	beq	1eeb4 <__assert_fail@plt+0xd99c>
   1ed04:	mov	r4, r2
   1ed08:	mov	r9, r1
   1ed0c:	cmp	sl, #1
   1ed10:	mov	r6, sl
   1ed14:	str	r0, [sp]
   1ed18:	blt	1ed38 <__assert_fail@plt+0xd820>
   1ed1c:	ldr	r1, [r4, #8]
   1ed20:	mov	r2, sl
   1ed24:	mov	r6, sl
   1ed28:	ldr	r3, [r1], #4
   1ed2c:	subs	r2, r2, #1
   1ed30:	add	r6, r3, r6
   1ed34:	bne	1ed28 <__assert_fail@plt+0xd810>
   1ed38:	ldr	r1, [r9, #68]	; 0x44
   1ed3c:	ldr	r2, [r9, #32]
   1ed40:	and	r1, r1, r6
   1ed44:	add	r3, r1, r1, lsl #1
   1ed48:	ldr	r1, [r2, r3, lsl #2]
   1ed4c:	cmp	r1, #1
   1ed50:	blt	1edc4 <__assert_fail@plt+0xd8ac>
   1ed54:	add	r2, r2, r3, lsl #2
   1ed58:	sub	ip, sl, #1
   1ed5c:	mov	r5, #0
   1ed60:	ldr	lr, [r2, #8]
   1ed64:	b	1ed98 <__assert_fail@plt+0xd880>
   1ed68:	mov	r3, ip
   1ed6c:	add	r2, r3, #1
   1ed70:	cmp	r2, #1
   1ed74:	blt	1eea8 <__assert_fail@plt+0xd990>
   1ed78:	ldr	r2, [r4, #8]
   1ed7c:	ldr	r0, [r7, #12]
   1ed80:	ldr	r2, [r2, r3, lsl #2]
   1ed84:	ldr	r0, [r0, r3, lsl #2]
   1ed88:	sub	r3, r3, #1
   1ed8c:	cmp	r0, r2
   1ed90:	beq	1ed6c <__assert_fail@plt+0xd854>
   1ed94:	b	1edb8 <__assert_fail@plt+0xd8a0>
   1ed98:	cmp	r4, #0
   1ed9c:	beq	1edb8 <__assert_fail@plt+0xd8a0>
   1eda0:	ldr	r7, [lr, r5, lsl #2]
   1eda4:	ldr	r3, [r7]
   1eda8:	cmp	r6, r3
   1edac:	ldreq	r3, [r7, #8]
   1edb0:	cmpeq	r3, sl
   1edb4:	beq	1ed68 <__assert_fail@plt+0xd850>
   1edb8:	add	r5, r5, #1
   1edbc:	cmp	r5, r1
   1edc0:	blt	1ed98 <__assert_fail@plt+0xd880>
   1edc4:	mov	r0, #56	; 0x38
   1edc8:	mov	r1, #1
   1edcc:	bl	221cc <__assert_fail@plt+0x10cb4>
   1edd0:	cmp	r0, #0
   1edd4:	beq	1eed4 <__assert_fail@plt+0xd9bc>
   1edd8:	add	r5, r0, #4
   1eddc:	mov	r7, r0
   1ede0:	mov	r1, r4
   1ede4:	mov	r0, r5
   1ede8:	bl	1c510 <__assert_fail@plt+0xaff8>
   1edec:	cmp	r0, #0
   1edf0:	bne	1eec0 <__assert_fail@plt+0xd9a8>
   1edf4:	str	r5, [r7, #40]	; 0x28
   1edf8:	ldr	r0, [r4, #4]
   1edfc:	cmp	r0, #1
   1ee00:	blt	1ee90 <__assert_fail@plt+0xd978>
   1ee04:	ldr	r1, [r4, #8]
   1ee08:	ldr	sl, [r9]
   1ee0c:	movw	ip, #65280	; 0xff00
   1ee10:	mov	lr, #32
   1ee14:	movt	ip, #3
   1ee18:	add	r5, ip, #255	; 0xff
   1ee1c:	ldr	r2, [r1]
   1ee20:	add	r3, sl, r2, lsl #3
   1ee24:	ldr	r2, [r3, #4]!
   1ee28:	and	r4, r2, r5
   1ee2c:	cmp	r4, #1
   1ee30:	beq	1ee84 <__assert_fail@plt+0xd96c>
   1ee34:	ldrb	r8, [r7, #52]	; 0x34
   1ee38:	and	r4, lr, r2, lsr #15
   1ee3c:	uxtb	r2, r2
   1ee40:	cmp	r2, #12
   1ee44:	orr	r4, r8, r4
   1ee48:	strb	r4, [r7, #52]	; 0x34
   1ee4c:	beq	1ee7c <__assert_fail@plt+0xd964>
   1ee50:	cmp	r2, #4
   1ee54:	beq	1ee68 <__assert_fail@plt+0xd950>
   1ee58:	cmp	r2, #2
   1ee5c:	bne	1ee70 <__assert_fail@plt+0xd958>
   1ee60:	orr	r2, r4, #16
   1ee64:	b	1ee80 <__assert_fail@plt+0xd968>
   1ee68:	orr	r2, r4, #64	; 0x40
   1ee6c:	b	1ee80 <__assert_fail@plt+0xd968>
   1ee70:	ldr	r2, [r3]
   1ee74:	tst	r2, ip
   1ee78:	beq	1ee84 <__assert_fail@plt+0xd96c>
   1ee7c:	orr	r2, r4, #128	; 0x80
   1ee80:	strb	r2, [r7, #52]	; 0x34
   1ee84:	add	r1, r1, #4
   1ee88:	subs	r0, r0, #1
   1ee8c:	bne	1ee1c <__assert_fail@plt+0xd904>
   1ee90:	mov	r0, r9
   1ee94:	mov	r1, r7
   1ee98:	mov	r2, r6
   1ee9c:	bl	1c92c <__assert_fail@plt+0xb414>
   1eea0:	cmp	r0, #0
   1eea4:	bne	1eecc <__assert_fail@plt+0xd9b4>
   1eea8:	mov	r0, r7
   1eeac:	sub	sp, fp, #28
   1eeb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eeb4:	mov	r7, #0
   1eeb8:	str	r7, [r0]
   1eebc:	b	1eea8 <__assert_fail@plt+0xd990>
   1eec0:	mov	r0, r7
   1eec4:	bl	223dc <__assert_fail@plt+0x10ec4>
   1eec8:	b	1eed4 <__assert_fail@plt+0xd9bc>
   1eecc:	mov	r0, r7
   1eed0:	bl	17a5c <__assert_fail@plt+0x6544>
   1eed4:	ldr	r1, [sp]
   1eed8:	mov	r0, #12
   1eedc:	mov	r7, #0
   1eee0:	str	r0, [r1]
   1eee4:	b	1eea8 <__assert_fail@plt+0xd990>
   1eee8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1eeec:	add	fp, sp, #24
   1eef0:	ldr	lr, [r0]
   1eef4:	add	r7, lr, r1, lsl #3
   1eef8:	ldrb	r9, [r7, #4]
   1eefc:	cmp	r9, #7
   1ef00:	beq	1f0d0 <__assert_fail@plt+0xdbb8>
   1ef04:	ldr	ip, [r2, #80]	; 0x50
   1ef08:	mov	r6, #1
   1ef0c:	cmp	ip, #1
   1ef10:	beq	1ef4c <__assert_fail@plt+0xda34>
   1ef14:	ldr	r5, [r2, #28]
   1ef18:	add	r7, r3, #1
   1ef1c:	cmp	r7, r5
   1ef20:	bge	1ef4c <__assert_fail@plt+0xda34>
   1ef24:	ldr	r6, [r2, #8]
   1ef28:	add	r7, r6, r3, lsl #2
   1ef2c:	mov	r6, #1
   1ef30:	ldr	r4, [r7, r6, lsl #2]
   1ef34:	cmn	r4, #1
   1ef38:	bne	1ef4c <__assert_fail@plt+0xda34>
   1ef3c:	add	r6, r6, #1
   1ef40:	add	r4, r3, r6
   1ef44:	cmp	r4, r5
   1ef48:	blt	1ef30 <__assert_fail@plt+0xda18>
   1ef4c:	mov	r8, #0
   1ef50:	cmp	r9, #5
   1ef54:	bne	1ef98 <__assert_fail@plt+0xda80>
   1ef58:	cmp	r6, #2
   1ef5c:	blt	1f0c0 <__assert_fail@plt+0xdba8>
   1ef60:	ldr	r0, [r0, #128]	; 0x80
   1ef64:	tst	r0, #64	; 0x40
   1ef68:	bne	1ef7c <__assert_fail@plt+0xda64>
   1ef6c:	ldr	r1, [r2, #4]
   1ef70:	ldrb	r1, [r1, r3]
   1ef74:	cmp	r1, #10
   1ef78:	beq	1f0c0 <__assert_fail@plt+0xdba8>
   1ef7c:	tst	r0, #128	; 0x80
   1ef80:	beq	1f0bc <__assert_fail@plt+0xdba4>
   1ef84:	ldr	r0, [r2, #4]
   1ef88:	ldrb	r0, [r0, r3]
   1ef8c:	cmp	r0, #0
   1ef90:	movne	r8, r6
   1ef94:	b	1f0c0 <__assert_fail@plt+0xdba8>
   1ef98:	cmp	r9, #6
   1ef9c:	bne	1f0c0 <__assert_fail@plt+0xdba8>
   1efa0:	cmp	r6, #2
   1efa4:	blt	1f0c0 <__assert_fail@plt+0xdba8>
   1efa8:	ldr	r7, [lr, r1, lsl #3]
   1efac:	ldr	r0, [r7, #32]
   1efb0:	cmp	r0, #0
   1efb4:	bne	1efd0 <__assert_fail@plt+0xdab8>
   1efb8:	ldr	r1, [r7, #36]	; 0x24
   1efbc:	cmp	r1, #0
   1efc0:	bne	1efd0 <__assert_fail@plt+0xdab8>
   1efc4:	ldr	r1, [r7, #20]
   1efc8:	cmp	r1, #0
   1efcc:	beq	1f0c8 <__assert_fail@plt+0xdbb0>
   1efd0:	cmp	ip, #1
   1efd4:	bne	1efe4 <__assert_fail@plt+0xdacc>
   1efd8:	ldr	r1, [r2, #4]
   1efdc:	ldrb	r5, [r1, r3]
   1efe0:	b	1efec <__assert_fail@plt+0xdad4>
   1efe4:	ldr	r1, [r2, #8]
   1efe8:	ldr	r5, [r1, r3, lsl #2]
   1efec:	ldr	r1, [r7, #20]
   1eff0:	cmp	r1, #1
   1eff4:	blt	1f018 <__assert_fail@plt+0xdb00>
   1eff8:	ldr	r2, [r7]
   1effc:	mov	r3, #0
   1f000:	ldr	r4, [r2, r3, lsl #2]
   1f004:	cmp	r5, r4
   1f008:	beq	1f094 <__assert_fail@plt+0xdb7c>
   1f00c:	add	r3, r3, #1
   1f010:	cmp	r3, r1
   1f014:	blt	1f000 <__assert_fail@plt+0xdae8>
   1f018:	ldr	r1, [r7, #36]	; 0x24
   1f01c:	cmp	r1, #1
   1f020:	blt	1f054 <__assert_fail@plt+0xdb3c>
   1f024:	mov	r4, #0
   1f028:	ldr	r0, [r7, #12]
   1f02c:	ldr	r1, [r0, r4, lsl #2]
   1f030:	mov	r0, r5
   1f034:	bl	1123c <iswctype@plt>
   1f038:	cmp	r0, #0
   1f03c:	bne	1f094 <__assert_fail@plt+0xdb7c>
   1f040:	ldr	r0, [r7, #36]	; 0x24
   1f044:	add	r4, r4, #1
   1f048:	cmp	r4, r0
   1f04c:	blt	1f028 <__assert_fail@plt+0xdb10>
   1f050:	ldr	r0, [r7, #32]
   1f054:	cmp	r0, #1
   1f058:	blt	1f08c <__assert_fail@plt+0xdb74>
   1f05c:	ldr	r1, [r7, #4]
   1f060:	mov	r2, #0
   1f064:	ldr	r3, [r1, r2, lsl #2]
   1f068:	cmp	r3, r5
   1f06c:	bhi	1f080 <__assert_fail@plt+0xdb68>
   1f070:	ldr	r3, [r7, #8]
   1f074:	ldr	r3, [r3, r2, lsl #2]
   1f078:	cmp	r5, r3
   1f07c:	bls	1f094 <__assert_fail@plt+0xdb7c>
   1f080:	add	r2, r2, #1
   1f084:	cmp	r2, r0
   1f088:	blt	1f064 <__assert_fail@plt+0xdb4c>
   1f08c:	mov	r0, #0
   1f090:	b	1f098 <__assert_fail@plt+0xdb80>
   1f094:	mov	r0, r6
   1f098:	ldrb	r1, [r7, #16]
   1f09c:	tst	r1, #1
   1f0a0:	bne	1f0ac <__assert_fail@plt+0xdb94>
   1f0a4:	mov	r8, r0
   1f0a8:	b	1f0c0 <__assert_fail@plt+0xdba8>
   1f0ac:	cmp	r0, #0
   1f0b0:	bgt	1f0c0 <__assert_fail@plt+0xdba8>
   1f0b4:	cmp	r6, #1
   1f0b8:	movle	r6, #1
   1f0bc:	mov	r8, r6
   1f0c0:	mov	r0, r8
   1f0c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f0c8:	mov	r5, #0
   1f0cc:	b	1efec <__assert_fail@plt+0xdad4>
   1f0d0:	ldr	r0, [r2, #4]
   1f0d4:	mov	r8, #0
   1f0d8:	ldrb	r6, [r0, r3]
   1f0dc:	cmp	r6, #194	; 0xc2
   1f0e0:	bcc	1f0c0 <__assert_fail@plt+0xdba8>
   1f0e4:	ldr	r1, [r2, #48]	; 0x30
   1f0e8:	add	r2, r3, #2
   1f0ec:	cmp	r2, r1
   1f0f0:	bgt	1f0c0 <__assert_fail@plt+0xdba8>
   1f0f4:	add	r0, r0, r3
   1f0f8:	cmp	r6, #223	; 0xdf
   1f0fc:	ldrb	r7, [r0, #1]
   1f100:	bhi	1f120 <__assert_fail@plt+0xdc08>
   1f104:	mov	r8, #2
   1f108:	cmp	r7, #191	; 0xbf
   1f10c:	sxtb	r0, r7
   1f110:	movwhi	r8, #0
   1f114:	cmn	r0, #1
   1f118:	movwgt	r8, #0
   1f11c:	b	1f0c0 <__assert_fail@plt+0xdba8>
   1f120:	cmp	r6, #239	; 0xef
   1f124:	bhi	1f140 <__assert_fail@plt+0xdc28>
   1f128:	mov	r2, #3
   1f12c:	cmp	r6, #224	; 0xe0
   1f130:	bne	1f19c <__assert_fail@plt+0xdc84>
   1f134:	cmp	r7, #160	; 0xa0
   1f138:	bcc	1f0c0 <__assert_fail@plt+0xdba8>
   1f13c:	b	1f19c <__assert_fail@plt+0xdc84>
   1f140:	cmp	r6, #247	; 0xf7
   1f144:	bhi	1f160 <__assert_fail@plt+0xdc48>
   1f148:	mov	r2, #4
   1f14c:	cmp	r6, #240	; 0xf0
   1f150:	bne	1f19c <__assert_fail@plt+0xdc84>
   1f154:	cmp	r7, #144	; 0x90
   1f158:	bcc	1f0c0 <__assert_fail@plt+0xdba8>
   1f15c:	b	1f19c <__assert_fail@plt+0xdc84>
   1f160:	cmp	r6, #251	; 0xfb
   1f164:	bhi	1f180 <__assert_fail@plt+0xdc68>
   1f168:	mov	r2, #5
   1f16c:	cmp	r6, #248	; 0xf8
   1f170:	bne	1f19c <__assert_fail@plt+0xdc84>
   1f174:	cmp	r7, #136	; 0x88
   1f178:	bcc	1f0c0 <__assert_fail@plt+0xdba8>
   1f17c:	b	1f19c <__assert_fail@plt+0xdc84>
   1f180:	cmp	r6, #253	; 0xfd
   1f184:	bhi	1f0c0 <__assert_fail@plt+0xdba8>
   1f188:	mov	r2, #6
   1f18c:	cmp	r6, #252	; 0xfc
   1f190:	bne	1f19c <__assert_fail@plt+0xdc84>
   1f194:	cmp	r7, #132	; 0x84
   1f198:	bcc	1f0c0 <__assert_fail@plt+0xdba8>
   1f19c:	add	r3, r2, r3
   1f1a0:	cmp	r3, r1
   1f1a4:	bgt	1f0c0 <__assert_fail@plt+0xdba8>
   1f1a8:	mov	r1, #1
   1f1ac:	ldrb	r3, [r0, r1]
   1f1b0:	sxtb	r7, r3
   1f1b4:	cmn	r7, #1
   1f1b8:	bgt	1f0c0 <__assert_fail@plt+0xdba8>
   1f1bc:	cmp	r3, #191	; 0xbf
   1f1c0:	bhi	1f0c0 <__assert_fail@plt+0xdba8>
   1f1c4:	add	r1, r1, #1
   1f1c8:	cmp	r1, r2
   1f1cc:	bcc	1f1ac <__assert_fail@plt+0xdc94>
   1f1d0:	mov	r8, r2
   1f1d4:	b	1f0c0 <__assert_fail@plt+0xdba8>
   1f1d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f1dc:	add	fp, sp, #24
   1f1e0:	ldr	r5, [r1, #4]
   1f1e4:	mvn	r3, #0
   1f1e8:	mov	r8, #0
   1f1ec:	uxtab	r4, r3, r5
   1f1f0:	cmp	r4, #6
   1f1f4:	bhi	1f304 <__assert_fail@plt+0xddec>
   1f1f8:	ldr	r3, [r0, #4]
   1f1fc:	ldrb	r3, [r3, r2]
   1f200:	add	r7, pc, #4
   1f204:	sxtb	r6, r3
   1f208:	ldr	pc, [r7, r4, lsl #2]
   1f20c:	andeq	pc, r1, r8, lsr #4
   1f210:	andeq	pc, r1, r4, lsl #6
   1f214:	andeq	pc, r1, ip, lsr r2	; <UNPREDICTABLE>
   1f218:	andeq	pc, r1, r4, lsl #6
   1f21c:	andeq	pc, r1, r4, ror #4
   1f220:	andeq	pc, r1, r4, lsl #6
   1f224:	andeq	pc, r1, ip, asr r2	; <UNPREDICTABLE>
   1f228:	ldrb	r1, [r1]
   1f22c:	uxtb	r3, r6
   1f230:	cmp	r1, r3
   1f234:	beq	1f298 <__assert_fail@plt+0xdd80>
   1f238:	b	1f304 <__assert_fail@plt+0xddec>
   1f23c:	ldr	r1, [r1]
   1f240:	ubfx	r7, r3, #5, #3
   1f244:	and	r3, r3, #31
   1f248:	ldr	r1, [r1, r7, lsl #2]
   1f24c:	mov	r7, #1
   1f250:	tst	r1, r7, lsl r3
   1f254:	bne	1f298 <__assert_fail@plt+0xdd80>
   1f258:	b	1f304 <__assert_fail@plt+0xddec>
   1f25c:	cmp	r6, #0
   1f260:	blt	1f304 <__assert_fail@plt+0xddec>
   1f264:	cmp	r3, #0
   1f268:	beq	1f288 <__assert_fail@plt+0xdd70>
   1f26c:	cmp	r3, #10
   1f270:	bne	1f298 <__assert_fail@plt+0xdd80>
   1f274:	ldr	r1, [r0, #84]	; 0x54
   1f278:	ldrb	r1, [r1, #128]	; 0x80
   1f27c:	tst	r1, #64	; 0x40
   1f280:	bne	1f298 <__assert_fail@plt+0xdd80>
   1f284:	b	1f304 <__assert_fail@plt+0xddec>
   1f288:	ldr	r1, [r0, #84]	; 0x54
   1f28c:	ldrb	r1, [r1, #128]	; 0x80
   1f290:	tst	r1, #128	; 0x80
   1f294:	bne	1f304 <__assert_fail@plt+0xddec>
   1f298:	movw	r1, #65280	; 0xff00
   1f29c:	movt	r1, #3
   1f2a0:	tst	r5, r1
   1f2a4:	beq	1f300 <__assert_fail@plt+0xdde8>
   1f2a8:	ldr	r3, [r0, #88]	; 0x58
   1f2ac:	mov	r1, r2
   1f2b0:	mov	r2, r3
   1f2b4:	bl	1d260 <__assert_fail@plt+0xbd48>
   1f2b8:	and	r1, r0, #1
   1f2bc:	tst	r5, #1024	; 0x400
   1f2c0:	beq	1f2cc <__assert_fail@plt+0xddb4>
   1f2c4:	cmp	r1, #0
   1f2c8:	beq	1f304 <__assert_fail@plt+0xddec>
   1f2cc:	tst	r5, #2048	; 0x800
   1f2d0:	cmpne	r1, #0
   1f2d4:	bne	1f304 <__assert_fail@plt+0xddec>
   1f2d8:	tst	r5, #8192	; 0x2000
   1f2dc:	beq	1f2e8 <__assert_fail@plt+0xddd0>
   1f2e0:	ands	r1, r0, #2
   1f2e4:	beq	1f304 <__assert_fail@plt+0xddec>
   1f2e8:	and	r1, r5, #32768	; 0x8000
   1f2ec:	mov	r2, #1
   1f2f0:	and	r0, r0, #8
   1f2f4:	eor	r1, r2, r1, lsr #15
   1f2f8:	orr	r0, r1, r0, lsr #3
   1f2fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f300:	mov	r8, #1
   1f304:	mov	r0, r8
   1f308:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f30c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f310:	add	fp, sp, #28
   1f314:	sub	sp, sp, #4
   1f318:	vpush	{d8-d11}
   1f31c:	sub	sp, sp, #2128	; 0x850
   1f320:	sub	sp, sp, #12288	; 0x3000
   1f324:	sub	lr, fp, #1024	; 0x400
   1f328:	mov	r8, #0
   1f32c:	vmov.i32	q4, #0	; 0x00000000
   1f330:	sub	r4, lr, #72	; 0x48
   1f334:	str	r8, [r1, #44]	; 0x2c
   1f338:	str	r8, [r1, #48]	; 0x30
   1f33c:	mov	r2, r4
   1f340:	vst1.64	{d8-d9}, [r2]!
   1f344:	vst1.64	{d8-d9}, [r2]
   1f348:	ldr	r2, [r1, #8]
   1f34c:	cmp	r2, #1
   1f350:	blt	1fd04 <__assert_fail@plt+0xe7ec>
   1f354:	sub	lr, fp, #2048	; 0x800
   1f358:	add	sl, r0, #96	; 0x60
   1f35c:	mov	r3, #0
   1f360:	mov	r8, #0
   1f364:	str	r1, [sp, #12]
   1f368:	str	r0, [sp, #20]
   1f36c:	sub	r9, lr, #72	; 0x48
   1f370:	str	sl, [sp]
   1f374:	ldr	r2, [r1, #12]
   1f378:	ldr	r5, [r0]
   1f37c:	str	r3, [sp, #16]
   1f380:	ldr	r6, [r2, r3, lsl #2]
   1f384:	add	r2, r5, r6, lsl #3
   1f388:	ldr	r7, [r2, #4]
   1f38c:	uxtb	ip, r7
   1f390:	cmp	ip, #1
   1f394:	bne	1f46c <__assert_fail@plt+0xdf54>
   1f398:	ldrb	r0, [r5, r6, lsl #3]
   1f39c:	mov	r3, #1
   1f3a0:	ubfx	r1, r0, #5, #3
   1f3a4:	and	r0, r0, #31
   1f3a8:	ldr	r2, [r4, r1, lsl #2]
   1f3ac:	orr	r0, r2, r3, lsl r0
   1f3b0:	str	r0, [r4, r1, lsl #2]
   1f3b4:	movw	r0, #65280	; 0xff00
   1f3b8:	sub	lr, fp, #3072	; 0xc00
   1f3bc:	movt	r0, #3
   1f3c0:	sub	r3, lr, #72	; 0x48
   1f3c4:	ands	r0, r7, r0
   1f3c8:	beq	1f6a0 <__assert_fail@plt+0xe188>
   1f3cc:	tst	r7, #8192	; 0x2000
   1f3d0:	beq	1f3f4 <__assert_fail@plt+0xdedc>
   1f3d4:	ldr	r0, [fp, #-1096]	; 0xfffffbb8
   1f3d8:	mov	r1, r4
   1f3dc:	vst1.64	{d8-d9}, [r1]!
   1f3e0:	vst1.64	{d8-d9}, [r1]
   1f3e4:	tst	r0, #1024	; 0x400
   1f3e8:	beq	1f5f4 <__assert_fail@plt+0xe0dc>
   1f3ec:	mov	r0, #1024	; 0x400
   1f3f0:	str	r0, [fp, #-1096]	; 0xfffffbb8
   1f3f4:	tst	r7, #32768	; 0x8000
   1f3f8:	bne	1f5e8 <__assert_fail@plt+0xe0d0>
   1f3fc:	tst	r7, #1024	; 0x400
   1f400:	beq	1f5d0 <__assert_fail@plt+0xe0b8>
   1f404:	movw	r0, #255	; 0xff
   1f408:	movt	r0, #64	; 0x40
   1f40c:	and	r0, r7, r0
   1f410:	cmp	r0, #1
   1f414:	beq	1f5e8 <__assert_fail@plt+0xe0d0>
   1f418:	ldr	r1, [sp, #20]
   1f41c:	vmov.i32	q8, #0	; 0x00000000
   1f420:	ldr	r0, [r1, #92]	; 0x5c
   1f424:	cmp	r0, #1
   1f428:	ble	1f580 <__assert_fail@plt+0xe068>
   1f42c:	ldr	r0, [r1, #60]	; 0x3c
   1f430:	mov	r1, #0
   1f434:	add	r2, sl, r1
   1f438:	add	r3, r0, r1
   1f43c:	vld1.32	{d20-d21}, [r2]
   1f440:	vld1.32	{d18-d19}, [r3]
   1f444:	add	r2, r4, r1
   1f448:	add	r1, r1, #16
   1f44c:	vld1.32	{d22-d23}, [r2]
   1f450:	cmp	r1, #32
   1f454:	vorn	q9, q10, q9
   1f458:	vand	q9, q11, q9
   1f45c:	vorr	q8, q9, q8
   1f460:	vst1.32	{d18-d19}, [r2]
   1f464:	bne	1f434 <__assert_fail@plt+0xdf1c>
   1f468:	b	1f5ac <__assert_fail@plt+0xe094>
   1f46c:	cmp	ip, #7
   1f470:	beq	1f4b4 <__assert_fail@plt+0xdf9c>
   1f474:	cmp	ip, #5
   1f478:	beq	1f500 <__assert_fail@plt+0xdfe8>
   1f47c:	cmp	ip, #3
   1f480:	bne	1f904 <__assert_fail@plt+0xe3ec>
   1f484:	ldr	r0, [r5, r6, lsl #3]
   1f488:	mov	r1, #0
   1f48c:	add	r2, r4, r1
   1f490:	add	r3, r0, r1
   1f494:	add	r1, r1, #16
   1f498:	vld1.32	{d16-d17}, [r3]
   1f49c:	vld1.32	{d18-d19}, [r2]
   1f4a0:	cmp	r1, #32
   1f4a4:	vorr	q8, q9, q8
   1f4a8:	vst1.32	{d16-d17}, [r2]
   1f4ac:	bne	1f48c <__assert_fail@plt+0xdf74>
   1f4b0:	b	1f3b4 <__assert_fail@plt+0xde9c>
   1f4b4:	mvn	r1, #0
   1f4b8:	str	r1, [fp, #-1084]	; 0xfffffbc4
   1f4bc:	str	r1, [fp, #-1088]	; 0xfffffbc0
   1f4c0:	str	r1, [fp, #-1092]	; 0xfffffbbc
   1f4c4:	str	r1, [fp, #-1096]	; 0xfffffbb8
   1f4c8:	ldr	r1, [r0, #128]	; 0x80
   1f4cc:	and	r0, r1, #128	; 0x80
   1f4d0:	ands	r1, r1, #64	; 0x40
   1f4d4:	beq	1f4e0 <__assert_fail@plt+0xdfc8>
   1f4d8:	cmp	r0, #0
   1f4dc:	beq	1f3b4 <__assert_fail@plt+0xde9c>
   1f4e0:	cmp	r1, #0
   1f4e4:	mvn	r1, #1
   1f4e8:	movweq	r1, #64510	; 0xfbfe
   1f4ec:	movteq	r1, #65535	; 0xffff
   1f4f0:	cmp	r0, #0
   1f4f4:	mvneq	r1, #1024	; 0x400
   1f4f8:	str	r1, [fp, #-1096]	; 0xfffffbb8
   1f4fc:	b	1f3b4 <__assert_fail@plt+0xde9c>
   1f500:	ldr	r1, [r0, #92]	; 0x5c
   1f504:	cmp	r1, #2
   1f508:	blt	1f53c <__assert_fail@plt+0xe024>
   1f50c:	ldr	r0, [r0, #60]	; 0x3c
   1f510:	mov	r1, #0
   1f514:	add	r2, r4, r1
   1f518:	add	r3, r0, r1
   1f51c:	add	r1, r1, #16
   1f520:	vld1.32	{d16-d17}, [r3]
   1f524:	vld1.32	{d18-d19}, [r2]
   1f528:	cmp	r1, #32
   1f52c:	vorr	q8, q9, q8
   1f530:	vst1.32	{d16-d17}, [r2]
   1f534:	bne	1f514 <__assert_fail@plt+0xdffc>
   1f538:	b	1f554 <__assert_fail@plt+0xe03c>
   1f53c:	mov	r0, r4
   1f540:	mov	r1, #255	; 0xff
   1f544:	mov	r2, #32
   1f548:	str	ip, [sp, #8]
   1f54c:	bl	1141c <memset@plt>
   1f550:	ldr	ip, [sp, #8]
   1f554:	ldr	r0, [sp, #20]
   1f558:	ldr	r0, [r0, #128]	; 0x80
   1f55c:	tst	r0, #64	; 0x40
   1f560:	ldreq	r1, [fp, #-1096]	; 0xfffffbb8
   1f564:	biceq	r1, r1, #1024	; 0x400
   1f568:	streq	r1, [fp, #-1096]	; 0xfffffbb8
   1f56c:	tst	r0, #128	; 0x80
   1f570:	ldrne	r0, [fp, #-1096]	; 0xfffffbb8
   1f574:	bicne	r0, r0, #1
   1f578:	strne	r0, [fp, #-1096]	; 0xfffffbb8
   1f57c:	b	1f3b4 <__assert_fail@plt+0xde9c>
   1f580:	mov	r0, #0
   1f584:	add	r1, r4, r0
   1f588:	add	r2, sl, r0
   1f58c:	add	r0, r0, #16
   1f590:	vld1.32	{d18-d19}, [r2]
   1f594:	vld1.32	{d20-d21}, [r1]
   1f598:	cmp	r0, #32
   1f59c:	vand	q9, q10, q9
   1f5a0:	vorr	q8, q9, q8
   1f5a4:	vst1.32	{d18-d19}, [r1]
   1f5a8:	bne	1f584 <__assert_fail@plt+0xe06c>
   1f5ac:	vext.8	q9, q8, q8, #8
   1f5b0:	sub	lr, fp, #3072	; 0xc00
   1f5b4:	vorr	q8, q8, q9
   1f5b8:	sub	r3, lr, #72	; 0x48
   1f5bc:	vdup.32	q9, d16[1]
   1f5c0:	vorr	q8, q8, q9
   1f5c4:	vmov.32	r0, d16[0]
   1f5c8:	cmp	r0, #0
   1f5cc:	beq	1f5f4 <__assert_fail@plt+0xe0dc>
   1f5d0:	tst	r7, #2048	; 0x800
   1f5d4:	beq	1f6a0 <__assert_fail@plt+0xe188>
   1f5d8:	tst	r7, #4194304	; 0x400000
   1f5dc:	beq	1f5fc <__assert_fail@plt+0xe0e4>
   1f5e0:	cmp	ip, #1
   1f5e4:	bne	1f5fc <__assert_fail@plt+0xe0e4>
   1f5e8:	mov	r0, r4
   1f5ec:	vst1.64	{d8-d9}, [r0]!
   1f5f0:	vst1.64	{d8-d9}, [r0]
   1f5f4:	ldr	r1, [sp, #12]
   1f5f8:	b	1f904 <__assert_fail@plt+0xe3ec>
   1f5fc:	ldr	r1, [sp, #20]
   1f600:	vmov.i32	q8, #0	; 0x00000000
   1f604:	ldr	r0, [r1, #92]	; 0x5c
   1f608:	cmp	r0, #1
   1f60c:	ble	1f650 <__assert_fail@plt+0xe138>
   1f610:	ldr	r0, [r1, #60]	; 0x3c
   1f614:	mov	r1, #0
   1f618:	add	r2, r0, r1
   1f61c:	add	r3, sl, r1
   1f620:	vld1.32	{d20-d21}, [r2]
   1f624:	vld1.32	{d18-d19}, [r3]
   1f628:	add	r2, r4, r1
   1f62c:	add	r1, r1, #16
   1f630:	vld1.32	{d22-d23}, [r2]
   1f634:	cmp	r1, #32
   1f638:	vand	q9, q10, q9
   1f63c:	vbic	q9, q11, q9
   1f640:	vorr	q8, q9, q8
   1f644:	vst1.32	{d18-d19}, [r2]
   1f648:	bne	1f618 <__assert_fail@plt+0xe100>
   1f64c:	b	1f67c <__assert_fail@plt+0xe164>
   1f650:	mov	r0, #0
   1f654:	add	r1, r4, r0
   1f658:	add	r2, sl, r0
   1f65c:	add	r0, r0, #16
   1f660:	vld1.32	{d18-d19}, [r2]
   1f664:	vld1.32	{d20-d21}, [r1]
   1f668:	cmp	r0, #32
   1f66c:	vbic	q9, q10, q9
   1f670:	vorr	q8, q9, q8
   1f674:	vst1.32	{d18-d19}, [r1]
   1f678:	bne	1f654 <__assert_fail@plt+0xe13c>
   1f67c:	vext.8	q9, q8, q8, #8
   1f680:	sub	lr, fp, #3072	; 0xc00
   1f684:	vorr	q8, q8, q9
   1f688:	sub	r3, lr, #72	; 0x48
   1f68c:	vdup.32	q9, d16[1]
   1f690:	vorr	q8, q8, q9
   1f694:	vmov.32	r0, d16[0]
   1f698:	cmp	r0, #0
   1f69c:	beq	1f5f4 <__assert_fail@plt+0xe0dc>
   1f6a0:	mov	r7, #0
   1f6a4:	cmp	r8, #1
   1f6a8:	blt	1f87c <__assert_fail@plt+0xe364>
   1f6ac:	add	sl, sp, #24
   1f6b0:	stmib	sp, {r5, ip}
   1f6b4:	cmp	ip, #1
   1f6b8:	bne	1f6e0 <__assert_fail@plt+0xe1c8>
   1f6bc:	ldrb	r1, [r5, r6, lsl #3]
   1f6c0:	add	r0, sp, #24
   1f6c4:	add	r0, r0, r7, lsl #5
   1f6c8:	ubfx	r2, r1, #5, #3
   1f6cc:	and	r1, r1, #31
   1f6d0:	ldr	r0, [r0, r2, lsl #2]
   1f6d4:	mov	r2, #1
   1f6d8:	tst	r0, r2, lsl r1
   1f6dc:	beq	1f860 <__assert_fail@plt+0xe348>
   1f6e0:	vmov.i32	q8, #0	; 0x00000000
   1f6e4:	mov	r0, #0
   1f6e8:	add	r1, sl, r0
   1f6ec:	add	r2, r4, r0
   1f6f0:	vld1.32	{d20-d21}, [r1]
   1f6f4:	vld1.32	{d18-d19}, [r2]
   1f6f8:	add	r1, r9, r0
   1f6fc:	add	r0, r0, #16
   1f700:	cmp	r0, #32
   1f704:	vand	q9, q10, q9
   1f708:	vorr	q8, q9, q8
   1f70c:	vst1.32	{d18-d19}, [r1]
   1f710:	bne	1f6e8 <__assert_fail@plt+0xe1d0>
   1f714:	vext.8	q9, q8, q8, #8
   1f718:	vorr	q8, q8, q9
   1f71c:	vdup.32	q9, d16[1]
   1f720:	vorr	q8, q8, q9
   1f724:	vmov.32	r0, d16[0]
   1f728:	cmp	r0, #0
   1f72c:	beq	1f860 <__assert_fail@plt+0xe348>
   1f730:	vmov.i32	q5, #0	; 0x00000000
   1f734:	mov	r0, #0
   1f738:	vmov.i32	q8, #0	; 0x00000000
   1f73c:	add	r1, r4, r0
   1f740:	add	r2, sl, r0
   1f744:	vld1.32	{d18-d19}, [r2]
   1f748:	vld1.32	{d20-d21}, [r1]
   1f74c:	add	r2, r3, r0
   1f750:	add	r0, r0, #16
   1f754:	cmp	r0, #32
   1f758:	vbic	q11, q10, q9
   1f75c:	vbic	q9, q9, q10
   1f760:	vorr	q5, q11, q5
   1f764:	vorr	q8, q9, q8
   1f768:	vst1.32	{d18-d19}, [r2]
   1f76c:	vst1.32	{d22-d23}, [r1]
   1f770:	bne	1f73c <__assert_fail@plt+0xe224>
   1f774:	vext.8	q9, q8, q8, #8
   1f778:	vorr	q8, q8, q9
   1f77c:	vdup.32	q9, d16[1]
   1f780:	vorr	q8, q8, q9
   1f784:	vmov.32	r0, d16[0]
   1f788:	cmp	r0, #0
   1f78c:	beq	1f7fc <__assert_fail@plt+0xe2e4>
   1f790:	mov	r0, r3
   1f794:	mov	r1, r9
   1f798:	add	r2, sp, #24
   1f79c:	sub	lr, fp, #6144	; 0x1800
   1f7a0:	vld1.32	{d16-d17}, [r0]!
   1f7a4:	vld1.32	{d18-d19}, [r1]!
   1f7a8:	mov	r3, r2
   1f7ac:	add	r2, r2, r8, lsl #5
   1f7b0:	vld1.64	{d20-d21}, [r0]
   1f7b4:	vst1.32	{d16-d17}, [r2]!
   1f7b8:	vld1.64	{d16-d17}, [r1]
   1f7bc:	add	r0, r3, r7, lsl #5
   1f7c0:	sub	r1, lr, #120	; 0x78
   1f7c4:	vst1.32	{d20-d21}, [r2]
   1f7c8:	vst1.32	{d18-d19}, [r0]!
   1f7cc:	mov	r2, r1
   1f7d0:	vst1.32	{d16-d17}, [r0]
   1f7d4:	add	r0, r8, r8, lsl #1
   1f7d8:	add	r0, r1, r0, lsl #2
   1f7dc:	add	r1, r7, r7, lsl #1
   1f7e0:	add	r5, r2, r1, lsl #2
   1f7e4:	mov	r1, r5
   1f7e8:	bl	1c510 <__assert_fail@plt+0xaff8>
   1f7ec:	cmp	r0, #0
   1f7f0:	bne	1fcd0 <__assert_fail@plt+0xe7b8>
   1f7f4:	add	r8, r8, #1
   1f7f8:	b	1f80c <__assert_fail@plt+0xe2f4>
   1f7fc:	sub	lr, fp, #6144	; 0x1800
   1f800:	add	r0, r7, r7, lsl #1
   1f804:	sub	r1, lr, #120	; 0x78
   1f808:	add	r5, r1, r0, lsl #2
   1f80c:	ldr	r0, [sp, #12]
   1f810:	ldr	r1, [sp, #16]
   1f814:	ldr	r0, [r0, #12]
   1f818:	ldr	r1, [r0, r1, lsl #2]
   1f81c:	mov	r0, r5
   1f820:	bl	1c374 <__assert_fail@plt+0xae5c>
   1f824:	cmp	r0, #0
   1f828:	beq	1fcd0 <__assert_fail@plt+0xe7b8>
   1f82c:	vext.8	q8, q5, q8, #8
   1f830:	mov	r1, #0
   1f834:	vorr	q8, q5, q8
   1f838:	vdup.32	q9, d16[1]
   1f83c:	vorr	q8, q8, q9
   1f840:	vmov.32	r0, d16[0]
   1f844:	cmp	r0, #0
   1f848:	movweq	r1, #17
   1f84c:	cmp	r1, #0
   1f850:	bne	1f874 <__assert_fail@plt+0xe35c>
   1f854:	ldmib	sp, {r5, ip}
   1f858:	sub	lr, fp, #3072	; 0xc00
   1f85c:	sub	r3, lr, #72	; 0x48
   1f860:	add	r7, r7, #1
   1f864:	add	sl, sl, #32
   1f868:	cmp	r7, r8
   1f86c:	blt	1f6b4 <__assert_fail@plt+0xe19c>
   1f870:	b	1f87c <__assert_fail@plt+0xe364>
   1f874:	cmp	r1, #17
   1f878:	bne	1f920 <__assert_fail@plt+0xe408>
   1f87c:	ldr	r1, [sp, #12]
   1f880:	ldr	sl, [sp]
   1f884:	cmp	r7, r8
   1f888:	bne	1f904 <__assert_fail@plt+0xe3ec>
   1f88c:	mov	r0, r4
   1f890:	sub	lr, fp, #6144	; 0x1800
   1f894:	vld1.32	{d16-d17}, [r0]!
   1f898:	sub	r2, lr, #120	; 0x78
   1f89c:	vld1.64	{d18-d19}, [r0]
   1f8a0:	add	r0, sp, #24
   1f8a4:	add	r0, r0, r7, lsl #5
   1f8a8:	vst1.32	{d16-d17}, [r0]!
   1f8ac:	vst1.32	{d18-d19}, [r0]
   1f8b0:	ldr	r0, [r1, #12]
   1f8b4:	ldr	r1, [sp, #16]
   1f8b8:	ldr	r8, [r0, r1, lsl #2]
   1f8bc:	add	r0, r7, r7, lsl #1
   1f8c0:	mov	r1, #1
   1f8c4:	add	r5, r2, r0, lsl #2
   1f8c8:	str	r1, [r2, r0, lsl #2]
   1f8cc:	mov	r0, #4
   1f8d0:	mov	r6, r5
   1f8d4:	str	r1, [r6, #4]!
   1f8d8:	bl	22220 <__assert_fail@plt+0x10d08>
   1f8dc:	cmp	r0, #0
   1f8e0:	str	r0, [r5, #8]
   1f8e4:	beq	1fd3c <__assert_fail@plt+0xe824>
   1f8e8:	ldr	r1, [sp, #12]
   1f8ec:	ldr	sl, [sp]
   1f8f0:	str	r8, [r0]
   1f8f4:	mov	r0, r4
   1f8f8:	add	r8, r7, #1
   1f8fc:	vst1.64	{d8-d9}, [r0]!
   1f900:	vst1.64	{d8-d9}, [r0]
   1f904:	ldr	r3, [sp, #16]
   1f908:	ldr	r0, [r1, #8]
   1f90c:	add	r3, r3, #1
   1f910:	cmp	r3, r0
   1f914:	ldr	r0, [sp, #20]
   1f918:	blt	1f374 <__assert_fail@plt+0xde5c>
   1f91c:	b	1f934 <__assert_fail@plt+0xe41c>
   1f920:	ldr	r1, [sp, #12]
   1f924:	ldr	sl, [sp]
   1f928:	cmp	r0, #0
   1f92c:	bne	1f904 <__assert_fail@plt+0xe3ec>
   1f930:	b	1f93c <__assert_fail@plt+0xe424>
   1f934:	cmp	r8, #0
   1f938:	ble	1fd04 <__assert_fail@plt+0xe7ec>
   1f93c:	mov	r0, #0
   1f940:	str	r0, [fp, #-3152]	; 0xfffff3b0
   1f944:	add	r0, r8, #1
   1f948:	str	r0, [fp, #-3156]	; 0xfffff3ac
   1f94c:	lsl	r0, r0, #2
   1f950:	bl	22220 <__assert_fail@plt+0x10d08>
   1f954:	cmp	r0, #0
   1f958:	str	r0, [fp, #-3148]	; 0xfffff3b4
   1f95c:	mov	r0, #0
   1f960:	movweq	r0, #12
   1f964:	str	r0, [fp, #-72]	; 0xffffffb8
   1f968:	beq	1fd4c <__assert_fail@plt+0xe834>
   1f96c:	sub	lr, fp, #3072	; 0xc00
   1f970:	vmov.i32	q8, #0	; 0x00000000
   1f974:	add	r7, sp, #24
   1f978:	mov	r6, #0
   1f97c:	mov	r1, #0
   1f980:	sub	sl, lr, #120	; 0x78
   1f984:	mov	r0, sl
   1f988:	vst1.64	{d16-d17}, [r0]!
   1f98c:	vst1.64	{d16-d17}, [r0]
   1f990:	mov	r0, #0
   1f994:	stmib	sp, {r0, r8}
   1f998:	mov	r0, #0
   1f99c:	sub	lr, fp, #6144	; 0x1800
   1f9a0:	str	r1, [sp, #16]
   1f9a4:	str	r0, [fp, #-3152]	; 0xfffff3b0
   1f9a8:	add	r0, r1, r1, lsl #1
   1f9ac:	sub	r2, lr, #120	; 0x78
   1f9b0:	ldr	r1, [sp, #20]
   1f9b4:	add	r0, r2, r0, lsl #2
   1f9b8:	ldr	r5, [r0, #4]
   1f9bc:	cmp	r5, #1
   1f9c0:	blt	1fa24 <__assert_fail@plt+0xe50c>
   1f9c4:	ldr	sl, [r0, #8]
   1f9c8:	mov	r8, #0
   1f9cc:	ldr	r0, [sl, r8, lsl #2]
   1f9d0:	ldr	r2, [r1, #12]
   1f9d4:	ldr	r0, [r2, r0, lsl #2]
   1f9d8:	cmn	r0, #1
   1f9dc:	beq	1fa08 <__assert_fail@plt+0xe4f0>
   1f9e0:	ldr	r1, [r1, #24]
   1f9e4:	add	r0, r0, r0, lsl #1
   1f9e8:	sub	lr, fp, #3072	; 0xc00
   1f9ec:	add	r1, r1, r0, lsl #2
   1f9f0:	sub	r0, lr, #84	; 0x54
   1f9f4:	bl	1c160 <__assert_fail@plt+0xac48>
   1f9f8:	ldr	r1, [sp, #20]
   1f9fc:	mov	r6, #0
   1fa00:	cmp	r0, #0
   1fa04:	bne	1fc94 <__assert_fail@plt+0xe77c>
   1fa08:	add	r8, r8, #1
   1fa0c:	cmp	r8, r5
   1fa10:	blt	1f9cc <__assert_fail@plt+0xe4b4>
   1fa14:	ldr	r8, [sp, #8]
   1fa18:	sub	lr, fp, #3072	; 0xc00
   1fa1c:	str	r6, [fp, #-72]	; 0xffffffb8
   1fa20:	sub	sl, lr, #120	; 0x78
   1fa24:	sub	lr, fp, #3072	; 0xc00
   1fa28:	sub	r0, fp, #72	; 0x48
   1fa2c:	mov	r3, #0
   1fa30:	sub	r2, lr, #84	; 0x54
   1fa34:	bl	1c5f0 <__assert_fail@plt+0xb0d8>
   1fa38:	ldr	r1, [sp, #16]
   1fa3c:	ldr	r6, [fp, #-72]	; 0xffffffb8
   1fa40:	mov	r5, r0
   1fa44:	cmp	r0, #0
   1fa48:	str	r0, [r4, r1, lsl #2]
   1fa4c:	bne	1fa58 <__assert_fail@plt+0xe540>
   1fa50:	cmp	r6, #0
   1fa54:	bne	1fc9c <__assert_fail@plt+0xe784>
   1fa58:	ldrsb	r0, [r5, #52]	; 0x34
   1fa5c:	cmn	r0, #1
   1fa60:	ble	1fa78 <__assert_fail@plt+0xe560>
   1fa64:	sub	lr, fp, #3072	; 0xc00
   1fa68:	str	r5, [r9, r1, lsl #2]
   1fa6c:	sub	r0, lr, #72	; 0x48
   1fa70:	str	r5, [r0, r1, lsl #2]
   1fa74:	b	1fb18 <__assert_fail@plt+0xe600>
   1fa78:	ldr	r1, [sp, #20]
   1fa7c:	sub	lr, fp, #3072	; 0xc00
   1fa80:	sub	r0, fp, #72	; 0x48
   1fa84:	mov	r3, #1
   1fa88:	sub	r2, lr, #84	; 0x54
   1fa8c:	bl	1c5f0 <__assert_fail@plt+0xb0d8>
   1fa90:	ldr	r1, [sp, #16]
   1fa94:	cmp	r0, #0
   1fa98:	str	r0, [r9, r1, lsl #2]
   1fa9c:	bne	1faac <__assert_fail@plt+0xe594>
   1faa0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1faa4:	cmp	r1, #0
   1faa8:	bne	1fc9c <__assert_fail@plt+0xe784>
   1faac:	cmp	r5, r0
   1fab0:	beq	1fad8 <__assert_fail@plt+0xe5c0>
   1fab4:	ldr	r1, [sp, #20]
   1fab8:	ldr	r2, [sp, #4]
   1fabc:	ldr	r0, [r1, #92]	; 0x5c
   1fac0:	cmp	r0, #1
   1fac4:	mov	r0, #0
   1fac8:	movwgt	r0, #1
   1facc:	orr	r2, r2, r0
   1fad0:	str	r2, [sp, #4]
   1fad4:	b	1fadc <__assert_fail@plt+0xe5c4>
   1fad8:	ldr	r1, [sp, #20]
   1fadc:	sub	lr, fp, #3072	; 0xc00
   1fae0:	sub	r0, fp, #72	; 0x48
   1fae4:	mov	r3, #2
   1fae8:	sub	r2, lr, #84	; 0x54
   1faec:	bl	1c5f0 <__assert_fail@plt+0xb0d8>
   1faf0:	ldr	r2, [sp, #16]
   1faf4:	ldr	r6, [fp, #-72]	; 0xffffffb8
   1faf8:	sub	lr, fp, #3072	; 0xc00
   1fafc:	cmp	r0, #0
   1fb00:	sub	r1, lr, #72	; 0x48
   1fb04:	str	r0, [r1, r2, lsl #2]
   1fb08:	mov	r1, r2
   1fb0c:	bne	1fb18 <__assert_fail@plt+0xe600>
   1fb10:	cmp	r6, #0
   1fb14:	bne	1fc9c <__assert_fail@plt+0xe784>
   1fb18:	mov	r0, #0
   1fb1c:	add	r2, sl, r0
   1fb20:	add	r3, r7, r0
   1fb24:	add	r0, r0, #16
   1fb28:	vld1.32	{d16-d17}, [r3]
   1fb2c:	vld1.32	{d18-d19}, [r2]
   1fb30:	cmp	r0, #32
   1fb34:	vorr	q8, q9, q8
   1fb38:	vst1.32	{d16-d17}, [r2]
   1fb3c:	bne	1fb1c <__assert_fail@plt+0xe604>
   1fb40:	add	r1, r1, #1
   1fb44:	add	r7, r7, #32
   1fb48:	cmp	r1, r8
   1fb4c:	blt	1f998 <__assert_fail@plt+0xe480>
   1fb50:	ldr	r0, [sp, #4]
   1fb54:	tst	r0, #1
   1fb58:	bne	1fd58 <__assert_fail@plt+0xe840>
   1fb5c:	mov	r0, #4
   1fb60:	mov	r1, #256	; 0x100
   1fb64:	bl	221cc <__assert_fail@plt+0x10cb4>
   1fb68:	ldr	r1, [sp, #12]
   1fb6c:	cmp	r0, #0
   1fb70:	str	r0, [r1, #44]	; 0x2c
   1fb74:	beq	1fc9c <__assert_fail@plt+0xe784>
   1fb78:	mov	r1, #0
   1fb7c:	add	sl, sp, #24
   1fb80:	mov	r3, #0
   1fb84:	sub	lr, fp, #3072	; 0xc00
   1fb88:	sub	r2, lr, #120	; 0x78
   1fb8c:	ldr	r7, [r2, r3, lsl #2]
   1fb90:	cmp	r7, #0
   1fb94:	beq	1fc08 <__assert_fail@plt+0xe6f0>
   1fb98:	ldr	r2, [sp, #20]
   1fb9c:	lsl	r5, r3, #5
   1fba0:	add	r6, r2, r3, lsl #2
   1fba4:	add	ip, r6, #96	; 0x60
   1fba8:	mov	r6, #1
   1fbac:	b	1fbe8 <__assert_fail@plt+0xe6d0>
   1fbb0:	mov	lr, #0
   1fbb4:	ldr	r8, [sl, lr, lsl #3]
   1fbb8:	add	lr, lr, #4
   1fbbc:	tst	r8, r6
   1fbc0:	beq	1fbb4 <__assert_fail@plt+0xe69c>
   1fbc4:	ldr	r2, [ip]
   1fbc8:	ldr	r8, [sp, #8]
   1fbcc:	tst	r2, r6
   1fbd0:	mov	r2, r9
   1fbd4:	moveq	r2, r4
   1fbd8:	add	r2, r2, lr
   1fbdc:	ldr	r2, [r2, #-4]
   1fbe0:	str	r2, [r0, r5, lsl #2]
   1fbe4:	b	1fbf0 <__assert_fail@plt+0xe6d8>
   1fbe8:	tst	r7, #1
   1fbec:	bne	1fbb0 <__assert_fail@plt+0xe698>
   1fbf0:	lsr	r2, r7, #1
   1fbf4:	cmp	r1, r7, lsr #1
   1fbf8:	add	r5, r5, #1
   1fbfc:	lsl	r6, r6, #1
   1fc00:	mov	r7, r2
   1fc04:	bne	1fbe8 <__assert_fail@plt+0xe6d0>
   1fc08:	add	r3, r3, #1
   1fc0c:	add	sl, sl, #4
   1fc10:	cmp	r3, #8
   1fc14:	bne	1fb84 <__assert_fail@plt+0xe66c>
   1fc18:	ldrb	r1, [fp, #-3191]	; 0xfffff389
   1fc1c:	sub	lr, fp, #6144	; 0x1800
   1fc20:	sub	r4, lr, #120	; 0x78
   1fc24:	tst	r1, #4
   1fc28:	beq	1fc70 <__assert_fail@plt+0xe758>
   1fc2c:	mov	r1, #0
   1fc30:	add	r2, sp, #24
   1fc34:	add	r3, r2, r1, lsl #5
   1fc38:	ldrb	r3, [r3, #1]
   1fc3c:	tst	r3, #4
   1fc40:	bne	1fc54 <__assert_fail@plt+0xe73c>
   1fc44:	add	r1, r1, #1
   1fc48:	cmp	r1, r8
   1fc4c:	blt	1fc34 <__assert_fail@plt+0xe71c>
   1fc50:	b	1fc70 <__assert_fail@plt+0xe758>
   1fc54:	sub	lr, fp, #3072	; 0xc00
   1fc58:	sub	r2, lr, #72	; 0x48
   1fc5c:	ldr	r1, [r2, r1, lsl #2]
   1fc60:	ldr	r2, [sp, #4]
   1fc64:	tst	r2, #1
   1fc68:	str	r1, [r0, #40]	; 0x28
   1fc6c:	strne	r1, [r0, #1064]	; 0x428
   1fc70:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   1fc74:	bl	223dc <__assert_fail@plt+0x10ec4>
   1fc78:	add	r4, r4, #8
   1fc7c:	ldr	r0, [r4], #12
   1fc80:	bl	223dc <__assert_fail@plt+0x10ec4>
   1fc84:	subs	r8, r8, #1
   1fc88:	bne	1fc7c <__assert_fail@plt+0xe764>
   1fc8c:	mov	r0, #1
   1fc90:	b	1fd2c <__assert_fail@plt+0xe814>
   1fc94:	ldr	r8, [sp, #8]
   1fc98:	str	r0, [fp, #-72]	; 0xffffffb8
   1fc9c:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   1fca0:	bl	223dc <__assert_fail@plt+0x10ec4>
   1fca4:	cmp	r8, #1
   1fca8:	blt	1fcc8 <__assert_fail@plt+0xe7b0>
   1fcac:	sub	lr, fp, #6144	; 0x1800
   1fcb0:	sub	r0, lr, #120	; 0x78
   1fcb4:	add	r4, r0, #8
   1fcb8:	ldr	r0, [r4], #12
   1fcbc:	bl	223dc <__assert_fail@plt+0x10ec4>
   1fcc0:	subs	r8, r8, #1
   1fcc4:	bne	1fcb8 <__assert_fail@plt+0xe7a0>
   1fcc8:	mov	r0, #0
   1fccc:	b	1fd2c <__assert_fail@plt+0xe814>
   1fcd0:	mov	r7, r8
   1fcd4:	ldr	r1, [sp, #12]
   1fcd8:	mvn	r8, #0
   1fcdc:	cmp	r7, #1
   1fce0:	blt	1fd04 <__assert_fail@plt+0xe7ec>
   1fce4:	sub	lr, fp, #6144	; 0x1800
   1fce8:	sub	r0, lr, #120	; 0x78
   1fcec:	add	r4, r0, #8
   1fcf0:	ldr	r0, [r4], #12
   1fcf4:	bl	223dc <__assert_fail@plt+0x10ec4>
   1fcf8:	subs	r7, r7, #1
   1fcfc:	bne	1fcf0 <__assert_fail@plt+0xe7d8>
   1fd00:	ldr	r1, [sp, #12]
   1fd04:	mov	r0, #0
   1fd08:	cmp	r8, #0
   1fd0c:	bne	1fd2c <__assert_fail@plt+0xe814>
   1fd10:	mov	r4, r1
   1fd14:	mov	r0, #4
   1fd18:	mov	r1, #256	; 0x100
   1fd1c:	bl	221cc <__assert_fail@plt+0x10cb4>
   1fd20:	cmp	r0, #0
   1fd24:	str	r0, [r4, #44]	; 0x2c
   1fd28:	movwne	r0, #1
   1fd2c:	sub	sp, fp, #64	; 0x40
   1fd30:	vpop	{d8-d11}
   1fd34:	add	sp, sp, #4
   1fd38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd3c:	mov	r0, #0
   1fd40:	str	r0, [r6]
   1fd44:	str	r0, [r5]
   1fd48:	b	1fcd4 <__assert_fail@plt+0xe7bc>
   1fd4c:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   1fd50:	bl	223dc <__assert_fail@plt+0x10ec4>
   1fd54:	b	1fcac <__assert_fail@plt+0xe794>
   1fd58:	mov	r0, #4
   1fd5c:	mov	r1, #512	; 0x200
   1fd60:	bl	221cc <__assert_fail@plt+0x10cb4>
   1fd64:	ldr	r1, [sp, #12]
   1fd68:	cmp	r0, #0
   1fd6c:	str	r0, [r1, #48]	; 0x30
   1fd70:	beq	1fc9c <__assert_fail@plt+0xe784>
   1fd74:	sub	ip, r4, #4
   1fd78:	sub	lr, r9, #4
   1fd7c:	mov	r3, #0
   1fd80:	add	r7, sp, #24
   1fd84:	mov	r6, #0
   1fd88:	ldr	r5, [sl, r6, lsl #2]
   1fd8c:	cmp	r5, #0
   1fd90:	beq	1fe04 <__assert_fail@plt+0xe8ec>
   1fd94:	lsl	r4, r6, #5
   1fd98:	mov	r1, #1
   1fd9c:	b	1fde4 <__assert_fail@plt+0xe8cc>
   1fda0:	mov	sl, r7
   1fda4:	mov	r9, ip
   1fda8:	mov	r8, lr
   1fdac:	ldr	r2, [sl], #32
   1fdb0:	add	r9, r9, #4
   1fdb4:	add	r8, r8, #4
   1fdb8:	tst	r2, r1
   1fdbc:	beq	1fdac <__assert_fail@plt+0xe894>
   1fdc0:	ldr	r9, [r9]
   1fdc4:	mov	sl, r0
   1fdc8:	str	r9, [sl, r4, lsl #2]!
   1fdcc:	ldr	r2, [r8]
   1fdd0:	ldr	r8, [sp, #8]
   1fdd4:	str	r2, [sl, #1024]	; 0x400
   1fdd8:	sub	r2, fp, #3072	; 0xc00
   1fddc:	sub	sl, r2, #120	; 0x78
   1fde0:	b	1fdec <__assert_fail@plt+0xe8d4>
   1fde4:	tst	r5, #1
   1fde8:	bne	1fda0 <__assert_fail@plt+0xe888>
   1fdec:	lsr	r2, r5, #1
   1fdf0:	cmp	r3, r5, lsr #1
   1fdf4:	add	r4, r4, #1
   1fdf8:	lsl	r1, r1, #1
   1fdfc:	mov	r5, r2
   1fe00:	bne	1fde4 <__assert_fail@plt+0xe8cc>
   1fe04:	add	r6, r6, #1
   1fe08:	add	r7, r7, #4
   1fe0c:	cmp	r6, #8
   1fe10:	bne	1fd88 <__assert_fail@plt+0xe870>
   1fe14:	b	1fc18 <__assert_fail@plt+0xe700>
   1fe18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe1c:	add	fp, sp, #28
   1fe20:	sub	sp, sp, #44	; 0x2c
   1fe24:	ldr	r4, [r1, #8]
   1fe28:	ldr	r6, [r1, #12]
   1fe2c:	mov	r9, r0
   1fe30:	mov	r0, #1
   1fe34:	mov	sl, r1
   1fe38:	str	r0, [sp, #36]	; 0x24
   1fe3c:	str	r0, [sp, #32]
   1fe40:	mov	r0, #4
   1fe44:	bl	22220 <__assert_fail@plt+0x10d08>
   1fe48:	cmp	r0, #0
   1fe4c:	str	r0, [sp, #40]	; 0x28
   1fe50:	beq	2009c <__assert_fail@plt+0xeb84>
   1fe54:	str	r4, [r0]
   1fe58:	add	r3, sp, #32
   1fe5c:	mov	r0, r9
   1fe60:	mov	r1, sl
   1fe64:	mov	r2, r6
   1fe68:	bl	2015c <__assert_fail@plt+0xec44>
   1fe6c:	cmp	r0, #0
   1fe70:	bne	20060 <__assert_fail@plt+0xeb48>
   1fe74:	add	r0, sl, #16
   1fe78:	mov	r1, #0
   1fe7c:	str	r0, [sp, #12]
   1fe80:	cmp	r6, #1
   1fe84:	blt	20070 <__assert_fail@plt+0xeb58>
   1fe88:	ldr	r0, [sl]
   1fe8c:	ldr	r2, [r0, r6, lsl #2]
   1fe90:	cmp	r2, #0
   1fe94:	mov	r2, #0
   1fe98:	addeq	r2, r1, #1
   1fe9c:	ldr	r1, [r9, #120]	; 0x78
   1fea0:	cmp	r2, r1
   1fea4:	bgt	20078 <__assert_fail@plt+0xeb60>
   1fea8:	mov	r0, #0
   1feac:	str	r6, [sp, #16]
   1feb0:	sub	r6, r6, #1
   1feb4:	str	r2, [sp, #8]
   1feb8:	str	r0, [sp, #36]	; 0x24
   1febc:	ldr	r0, [r9, #100]	; 0x64
   1fec0:	ldr	r1, [r0, r6, lsl #2]
   1fec4:	cmp	r1, #0
   1fec8:	beq	20040 <__assert_fail@plt+0xeb28>
   1fecc:	ldr	r0, [r1, #20]
   1fed0:	cmp	r0, #1
   1fed4:	blt	20040 <__assert_fail@plt+0xeb28>
   1fed8:	ldr	r0, [r9, #84]	; 0x54
   1fedc:	mov	r5, #0
   1fee0:	str	r1, [sp, #24]
   1fee4:	str	r0, [sp, #28]
   1fee8:	ldr	r0, [r1, #24]
   1feec:	ldr	r7, [r0, r5, lsl #2]
   1fef0:	ldr	r0, [sp, #28]
   1fef4:	ldr	r0, [r0]
   1fef8:	add	r0, r0, r7, lsl #3
   1fefc:	ldrb	r0, [r0, #6]
   1ff00:	tst	r0, #16
   1ff04:	bne	1ff60 <__assert_fail@plt+0xea48>
   1ff08:	ldr	r0, [sp, #28]
   1ff0c:	mov	r2, r6
   1ff10:	ldr	r0, [r0]
   1ff14:	add	r1, r0, r7, lsl #3
   1ff18:	mov	r0, r9
   1ff1c:	bl	1f1d8 <__assert_fail@plt+0xdcc0>
   1ff20:	cmp	r0, #0
   1ff24:	beq	2002c <__assert_fail@plt+0xeb14>
   1ff28:	ldr	r0, [sl]
   1ff2c:	ldr	r1, [sp, #16]
   1ff30:	ldr	r0, [r0, r1, lsl #2]
   1ff34:	cmp	r0, #0
   1ff38:	beq	2002c <__assert_fail@plt+0xeb14>
   1ff3c:	ldr	r1, [sp, #28]
   1ff40:	add	r0, r0, #4
   1ff44:	ldr	r1, [r1, #12]
   1ff48:	ldr	r1, [r1, r7, lsl #2]
   1ff4c:	bl	1c58c <__assert_fail@plt+0xb074>
   1ff50:	mov	r4, #1
   1ff54:	cmp	r0, #0
   1ff58:	bne	1ffe0 <__assert_fail@plt+0xeac8>
   1ff5c:	b	2002c <__assert_fail@plt+0xeb14>
   1ff60:	ldr	r0, [sl, #12]
   1ff64:	ldr	r8, [r9, #84]	; 0x54
   1ff68:	mov	r2, r9
   1ff6c:	mov	r1, r7
   1ff70:	mov	r3, r6
   1ff74:	str	r0, [sp, #20]
   1ff78:	mov	r0, r8
   1ff7c:	bl	1eee8 <__assert_fail@plt+0xd9d0>
   1ff80:	mov	r4, r0
   1ff84:	cmp	r0, #1
   1ff88:	blt	1ffa8 <__assert_fail@plt+0xea90>
   1ff8c:	ldr	r1, [sp, #20]
   1ff90:	add	r0, r4, r6
   1ff94:	mov	r2, r6
   1ff98:	cmp	r0, r1
   1ff9c:	ble	1ffb4 <__assert_fail@plt+0xea9c>
   1ffa0:	mov	r6, r2
   1ffa4:	b	1ffe0 <__assert_fail@plt+0xeac8>
   1ffa8:	cmp	r4, #0
   1ffac:	bne	1ffe0 <__assert_fail@plt+0xeac8>
   1ffb0:	b	1ff08 <__assert_fail@plt+0xe9f0>
   1ffb4:	ldr	r1, [sl]
   1ffb8:	mov	r6, r2
   1ffbc:	ldr	r0, [r1, r0, lsl #2]
   1ffc0:	cmp	r0, #0
   1ffc4:	beq	1ff08 <__assert_fail@plt+0xe9f0>
   1ffc8:	ldr	r1, [r8, #12]
   1ffcc:	add	r0, r0, #4
   1ffd0:	ldr	r1, [r1, r7, lsl #2]
   1ffd4:	bl	1c58c <__assert_fail@plt+0xb074>
   1ffd8:	cmp	r0, #0
   1ffdc:	beq	1ff08 <__assert_fail@plt+0xe9f0>
   1ffe0:	ldr	r0, [sl, #20]
   1ffe4:	cmp	r0, #0
   1ffe8:	beq	20018 <__assert_fail@plt+0xeb00>
   1ffec:	ldr	r0, [sp, #28]
   1fff0:	ldr	r1, [sp, #12]
   1fff4:	add	r3, r4, r6
   1fff8:	ldr	r0, [r0, #12]
   1fffc:	ldr	r2, [r0, r7, lsl #2]
   20000:	mov	r0, r9
   20004:	str	r7, [sp]
   20008:	str	r6, [sp, #4]
   2000c:	bl	20c88 <__assert_fail@plt+0xf770>
   20010:	cmp	r0, #0
   20014:	bne	2002c <__assert_fail@plt+0xeb14>
   20018:	add	r0, sp, #32
   2001c:	mov	r1, r7
   20020:	bl	1c374 <__assert_fail@plt+0xae5c>
   20024:	cmp	r0, #0
   20028:	beq	20068 <__assert_fail@plt+0xeb50>
   2002c:	ldr	r1, [sp, #24]
   20030:	add	r5, r5, #1
   20034:	ldr	r0, [r1, #20]
   20038:	cmp	r5, r0
   2003c:	blt	1fee8 <__assert_fail@plt+0xe9d0>
   20040:	mov	r0, r9
   20044:	mov	r1, sl
   20048:	mov	r2, r6
   2004c:	add	r3, sp, #32
   20050:	bl	2015c <__assert_fail@plt+0xec44>
   20054:	ldr	r1, [sp, #8]
   20058:	cmp	r0, #0
   2005c:	beq	1fe80 <__assert_fail@plt+0xe968>
   20060:	mov	r4, r0
   20064:	b	20088 <__assert_fail@plt+0xeb70>
   20068:	mov	r4, #12
   2006c:	b	20088 <__assert_fail@plt+0xeb70>
   20070:	mov	r4, #0
   20074:	b	20088 <__assert_fail@plt+0xeb70>
   20078:	lsl	r2, r6, #2
   2007c:	mov	r1, #0
   20080:	mov	r4, #0
   20084:	bl	1141c <memset@plt>
   20088:	ldr	r0, [sp, #40]	; 0x28
   2008c:	bl	223dc <__assert_fail@plt+0x10ec4>
   20090:	mov	r0, r4
   20094:	sub	sp, fp, #28
   20098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2009c:	mov	r0, #0
   200a0:	mov	r4, #12
   200a4:	str	r0, [sp, #32]
   200a8:	str	r0, [sp, #36]	; 0x24
   200ac:	b	20090 <__assert_fail@plt+0xeb78>
   200b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200b4:	add	fp, sp, #28
   200b8:	sub	sp, sp, #20
   200bc:	cmp	r3, #1
   200c0:	blt	20150 <__assert_fail@plt+0xec38>
   200c4:	mov	r4, r3
   200c8:	mov	r5, r2
   200cc:	mov	r6, r1
   200d0:	mov	sl, r0
   200d4:	mov	r7, #0
   200d8:	add	r8, sp, #4
   200dc:	add	r9, sp, #16
   200e0:	ldr	r1, [r6, r7, lsl #2]
   200e4:	ldr	r0, [r5, r7, lsl #2]
   200e8:	cmp	r1, #0
   200ec:	beq	20140 <__assert_fail@plt+0xec28>
   200f0:	cmp	r0, #0
   200f4:	beq	20144 <__assert_fail@plt+0xec2c>
   200f8:	add	r2, r0, #4
   200fc:	add	r1, r1, #4
   20100:	mov	r0, r8
   20104:	bl	1dd9c <__assert_fail@plt+0xc884>
   20108:	cmp	r0, #0
   2010c:	str	r0, [sp, #16]
   20110:	bne	20154 <__assert_fail@plt+0xec3c>
   20114:	mov	r0, r9
   20118:	mov	r1, sl
   2011c:	mov	r2, r8
   20120:	bl	1ecec <__assert_fail@plt+0xd7d4>
   20124:	str	r0, [r6, r7, lsl #2]
   20128:	ldr	r0, [sp, #12]
   2012c:	bl	223dc <__assert_fail@plt+0x10ec4>
   20130:	ldr	r0, [sp, #16]
   20134:	cmp	r0, #0
   20138:	beq	20144 <__assert_fail@plt+0xec2c>
   2013c:	b	20154 <__assert_fail@plt+0xec3c>
   20140:	str	r0, [r6, r7, lsl #2]
   20144:	add	r7, r7, #1
   20148:	cmp	r7, r4
   2014c:	blt	200e0 <__assert_fail@plt+0xebc8>
   20150:	mov	r0, #0
   20154:	sub	sp, fp, #28
   20158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2015c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20160:	add	fp, sp, #28
   20164:	sub	sp, sp, #84	; 0x54
   20168:	mov	r6, r3
   2016c:	mov	r3, #0
   20170:	ldr	r7, [r0, #84]	; 0x54
   20174:	mov	r4, r2
   20178:	str	r0, [sp, #44]	; 0x2c
   2017c:	str	r1, [sp, #48]	; 0x30
   20180:	str	r3, [sp, #52]	; 0x34
   20184:	str	r4, [sp, #40]	; 0x28
   20188:	ldr	r2, [r0, #100]	; 0x64
   2018c:	ldr	r8, [r2, r4, lsl #2]
   20190:	ldr	r2, [r6, #4]
   20194:	cmp	r8, #0
   20198:	mov	r0, r8
   2019c:	addne	r0, r0, #4
   201a0:	cmp	r2, #0
   201a4:	str	r0, [sp, #36]	; 0x24
   201a8:	beq	20528 <__assert_fail@plt+0xf010>
   201ac:	cmp	r8, #0
   201b0:	beq	204fc <__assert_fail@plt+0xefe4>
   201b4:	mov	r0, #0
   201b8:	mov	r1, r7
   201bc:	mov	r2, r6
   201c0:	str	r7, [sp, #28]
   201c4:	str	r6, [sp, #20]
   201c8:	str	r0, [sp, #56]	; 0x38
   201cc:	add	r0, sp, #56	; 0x38
   201d0:	bl	1ecec <__assert_fail@plt+0xd7d4>
   201d4:	ldr	r9, [sp, #56]	; 0x38
   201d8:	cmp	r9, #0
   201dc:	bne	20844 <__assert_fail@plt+0xf32c>
   201e0:	mov	r6, r0
   201e4:	mov	r5, r0
   201e8:	ldr	r2, [sp, #20]
   201ec:	ldr	r0, [r6, #28]!
   201f0:	cmp	r0, #0
   201f4:	bne	20288 <__assert_fail@plt+0xed70>
   201f8:	ldr	r0, [r2, #4]
   201fc:	mov	r4, #0
   20200:	mov	r7, r2
   20204:	str	r0, [r5, #28]
   20208:	lsl	r0, r0, #2
   2020c:	str	r4, [r5, #32]
   20210:	bl	22220 <__assert_fail@plt+0x10d08>
   20214:	cmp	r0, #0
   20218:	mov	r9, #12
   2021c:	str	r0, [r5, #36]	; 0x24
   20220:	movweq	r4, #12
   20224:	str	r4, [sp, #56]	; 0x38
   20228:	beq	20844 <__assert_fail@plt+0xf32c>
   2022c:	ldr	r0, [r7, #4]
   20230:	mov	r2, r7
   20234:	cmp	r0, #1
   20238:	blt	20288 <__assert_fail@plt+0xed70>
   2023c:	mov	r5, #0
   20240:	ldr	r0, [r2, #8]
   20244:	ldr	r1, [sp, #28]
   20248:	mov	r4, r2
   2024c:	ldr	r0, [r0, r5, lsl #2]
   20250:	ldr	r1, [r1, #28]
   20254:	add	r0, r0, r0, lsl #1
   20258:	add	r1, r1, r0, lsl #2
   2025c:	mov	r0, r6
   20260:	bl	1c160 <__assert_fail@plt+0xac48>
   20264:	cmp	r0, #0
   20268:	bne	20854 <__assert_fail@plt+0xf33c>
   2026c:	ldr	r0, [r4, #4]
   20270:	add	r5, r5, #1
   20274:	mov	r2, r4
   20278:	cmp	r5, r0
   2027c:	blt	20240 <__assert_fail@plt+0xed28>
   20280:	mov	r0, #0
   20284:	str	r0, [sp, #56]	; 0x38
   20288:	ldr	r1, [sp, #36]	; 0x24
   2028c:	mov	r0, r2
   20290:	mov	r2, r6
   20294:	bl	20870 <__assert_fail@plt+0xf358>
   20298:	cmp	r0, #0
   2029c:	str	r0, [sp, #52]	; 0x34
   202a0:	bne	20868 <__assert_fail@plt+0xf350>
   202a4:	ldr	ip, [sp, #48]	; 0x30
   202a8:	ldr	r4, [sp, #40]	; 0x28
   202ac:	ldr	r7, [sp, #28]
   202b0:	ldr	r6, [sp, #20]
   202b4:	ldr	r0, [ip, #20]
   202b8:	cmp	r0, #0
   202bc:	beq	204fc <__assert_fail@plt+0xefe4>
   202c0:	cmp	r0, #1
   202c4:	str	r8, [sp, #12]
   202c8:	blt	204f0 <__assert_fail@plt+0xefd8>
   202cc:	ldr	r0, [sp, #44]	; 0x2c
   202d0:	mov	r8, #0
   202d4:	ldr	r0, [r0, #116]	; 0x74
   202d8:	str	r0, [sp, #24]
   202dc:	ldr	r0, [ip, #24]
   202e0:	ldr	r1, [sp, #24]
   202e4:	ldr	r0, [r0, r8, lsl #2]
   202e8:	add	r0, r0, r0, lsl #1
   202ec:	add	r1, r1, r0, lsl #3
   202f0:	ldr	r2, [r1, #8]
   202f4:	cmp	r2, r4
   202f8:	bge	204e0 <__assert_fail@plt+0xefc8>
   202fc:	ldr	r1, [r1, #4]
   20300:	cmp	r1, r4
   20304:	blt	204e0 <__assert_fail@plt+0xefc8>
   20308:	ldr	r1, [sp, #24]
   2030c:	ldr	r2, [r7]
   20310:	ldr	r0, [r1, r0, lsl #3]!
   20314:	ldr	r1, [r1, #12]
   20318:	ldr	sl, [r2, r0, lsl #3]
   2031c:	ldr	r0, [r6, #4]
   20320:	cmp	r1, r4
   20324:	bne	203e0 <__assert_fail@plt+0xeec8>
   20328:	cmp	r0, #1
   2032c:	blt	204e0 <__assert_fail@plt+0xefc8>
   20330:	ldr	r3, [r6, #8]
   20334:	mvn	r1, #0
   20338:	str	r1, [sp, #32]
   2033c:	mvn	r1, #0
   20340:	ldr	r5, [r3]
   20344:	add	r4, r2, r5, lsl #3
   20348:	ldrb	r4, [r4, #4]
   2034c:	cmp	r4, #9
   20350:	beq	2036c <__assert_fail@plt+0xee54>
   20354:	cmp	r4, #8
   20358:	bne	20380 <__assert_fail@plt+0xee68>
   2035c:	ldr	r4, [r2, r5, lsl #3]
   20360:	cmp	sl, r4
   20364:	moveq	r1, r5
   20368:	b	20380 <__assert_fail@plt+0xee68>
   2036c:	ldr	r4, [r2, r5, lsl #3]
   20370:	cmp	sl, r4
   20374:	ldr	r4, [sp, #32]
   20378:	moveq	r4, r5
   2037c:	str	r4, [sp, #32]
   20380:	add	r3, r3, #4
   20384:	subs	r0, r0, #1
   20388:	bne	20340 <__assert_fail@plt+0xee28>
   2038c:	cmp	r1, #0
   20390:	blt	203b8 <__assert_fail@plt+0xeea0>
   20394:	ldr	r3, [sp, #36]	; 0x24
   20398:	mov	r0, r7
   2039c:	mov	r2, r6
   203a0:	bl	20a78 <__assert_fail@plt+0xf560>
   203a4:	ldr	r6, [sp, #20]
   203a8:	ldr	r7, [sp, #28]
   203ac:	ldr	ip, [sp, #48]	; 0x30
   203b0:	cmp	r0, #0
   203b4:	bne	20840 <__assert_fail@plt+0xf328>
   203b8:	ldr	sl, [sp, #32]
   203bc:	ldr	r4, [sp, #40]	; 0x28
   203c0:	cmp	sl, #0
   203c4:	blt	204e0 <__assert_fail@plt+0xefc8>
   203c8:	ldr	r0, [r6, #4]
   203cc:	cmp	r0, #1
   203d0:	str	r0, [sp, #16]
   203d4:	blt	204e0 <__assert_fail@plt+0xefc8>
   203d8:	mov	r5, #0
   203dc:	b	20488 <__assert_fail@plt+0xef70>
   203e0:	cmp	r0, #1
   203e4:	blt	204e0 <__assert_fail@plt+0xefc8>
   203e8:	mov	r5, #0
   203ec:	ldr	r1, [r6, #8]
   203f0:	ldr	r1, [r1, r5, lsl #2]
   203f4:	add	r3, r2, r1, lsl #3
   203f8:	ldr	r3, [r3, #4]
   203fc:	and	r3, r3, #254	; 0xfe
   20400:	orr	r3, r3, #1
   20404:	cmp	r3, #9
   20408:	ldreq	r2, [r2, r1, lsl #3]
   2040c:	cmpeq	sl, r2
   20410:	beq	20428 <__assert_fail@plt+0xef10>
   20414:	add	r5, r5, #1
   20418:	cmp	r5, r0
   2041c:	bge	204e0 <__assert_fail@plt+0xefc8>
   20420:	ldr	r2, [r7]
   20424:	b	203ec <__assert_fail@plt+0xeed4>
   20428:	ldr	r3, [sp, #36]	; 0x24
   2042c:	mov	r0, r7
   20430:	mov	r2, r6
   20434:	bl	20a78 <__assert_fail@plt+0xf560>
   20438:	cmp	r0, #0
   2043c:	bne	20840 <__assert_fail@plt+0xf328>
   20440:	ldr	r0, [r6, #4]
   20444:	ldr	r4, [sp, #40]	; 0x28
   20448:	ldr	ip, [sp, #48]	; 0x30
   2044c:	ldr	r7, [sp, #28]
   20450:	b	20414 <__assert_fail@plt+0xeefc>
   20454:	mov	r1, r6
   20458:	ldr	r6, [sp, #20]
   2045c:	ldr	r3, [sp, #36]	; 0x24
   20460:	mov	r0, r7
   20464:	mov	r2, r6
   20468:	bl	20a78 <__assert_fail@plt+0xf560>
   2046c:	cmp	r0, #0
   20470:	bne	20840 <__assert_fail@plt+0xf328>
   20474:	ldr	r0, [r6, #4]
   20478:	ldr	r7, [sp, #28]
   2047c:	sub	r5, r5, #1
   20480:	str	r0, [sp, #16]
   20484:	b	204c8 <__assert_fail@plt+0xefb0>
   20488:	ldr	r0, [r6, #8]
   2048c:	mov	r1, sl
   20490:	ldr	r6, [r0, r5, lsl #2]
   20494:	ldr	r0, [r7, #28]
   20498:	add	r9, r6, r6, lsl #1
   2049c:	add	r0, r0, r9, lsl #2
   204a0:	bl	1c58c <__assert_fail@plt+0xb074>
   204a4:	cmp	r0, #0
   204a8:	bne	204c4 <__assert_fail@plt+0xefac>
   204ac:	ldr	r0, [r7, #24]
   204b0:	mov	r1, sl
   204b4:	add	r0, r0, r9, lsl #2
   204b8:	bl	1c58c <__assert_fail@plt+0xb074>
   204bc:	cmp	r0, #0
   204c0:	beq	20454 <__assert_fail@plt+0xef3c>
   204c4:	ldr	r6, [sp, #20]
   204c8:	ldr	r0, [sp, #16]
   204cc:	ldr	r4, [sp, #40]	; 0x28
   204d0:	ldr	ip, [sp, #48]	; 0x30
   204d4:	add	r5, r5, #1
   204d8:	cmp	r5, r0
   204dc:	blt	20488 <__assert_fail@plt+0xef70>
   204e0:	ldr	r0, [ip, #20]
   204e4:	add	r8, r8, #1
   204e8:	cmp	r8, r0
   204ec:	blt	202dc <__assert_fail@plt+0xedc4>
   204f0:	ldr	r8, [sp, #12]
   204f4:	mov	r0, #0
   204f8:	str	r0, [sp, #52]	; 0x34
   204fc:	add	r0, sp, #52	; 0x34
   20500:	mov	r1, r7
   20504:	mov	r2, r6
   20508:	bl	1ecec <__assert_fail@plt+0xd7d4>
   2050c:	ldr	r1, [sp, #48]	; 0x30
   20510:	ldr	r1, [r1]
   20514:	str	r0, [r1, r4, lsl #2]
   20518:	ldr	r9, [sp, #52]	; 0x34
   2051c:	cmp	r9, #0
   20520:	beq	20530 <__assert_fail@plt+0xf018>
   20524:	b	20834 <__assert_fail@plt+0xf31c>
   20528:	ldr	r1, [r1]
   2052c:	str	r3, [r1, r4, lsl #2]
   20530:	cmp	r8, #0
   20534:	beq	20830 <__assert_fail@plt+0xf318>
   20538:	ldr	r0, [sp, #44]	; 0x2c
   2053c:	ldr	r1, [sp, #40]	; 0x28
   20540:	ldr	r0, [r0, #100]	; 0x64
   20544:	ldr	r0, [r0, r1, lsl #2]
   20548:	ldrb	r0, [r0, #52]	; 0x34
   2054c:	tst	r0, #64	; 0x40
   20550:	beq	20830 <__assert_fail@plt+0xf318>
   20554:	ldr	r0, [sp, #44]	; 0x2c
   20558:	ldr	r9, [sp, #40]	; 0x28
   2055c:	ldr	r8, [r0, #84]	; 0x54
   20560:	mov	r1, r9
   20564:	bl	1dfa0 <__assert_fail@plt+0xca88>
   20568:	cmn	r0, #1
   2056c:	str	r0, [sp, #16]
   20570:	beq	20820 <__assert_fail@plt+0xf308>
   20574:	ldr	r0, [sp, #36]	; 0x24
   20578:	mov	r6, #0
   2057c:	str	r6, [sp, #56]	; 0x38
   20580:	ldr	r0, [r0, #4]
   20584:	cmp	r0, #0
   20588:	ble	2082c <__assert_fail@plt+0xf314>
   2058c:	ldr	r3, [sp, #48]	; 0x30
   20590:	add	r1, r9, #1
   20594:	mov	r7, #0
   20598:	str	r1, [sp, #8]
   2059c:	add	r1, sp, #56	; 0x38
   205a0:	add	r1, r1, #16
   205a4:	str	r1, [sp, #24]
   205a8:	add	r1, r3, #16
   205ac:	str	r1, [sp, #28]
   205b0:	ldr	r1, [sp, #16]
   205b4:	add	r1, r1, r1, lsl #1
   205b8:	str	r1, [sp, #12]
   205bc:	ldr	r1, [sp, #36]	; 0x24
   205c0:	ldr	r2, [r3, #8]
   205c4:	ldr	r1, [r1, #8]
   205c8:	ldr	sl, [r1, r7, lsl #2]
   205cc:	ldr	r1, [r8]
   205d0:	add	r1, r1, sl, lsl #3
   205d4:	cmp	sl, r2
   205d8:	ldrb	r1, [r1, #4]
   205dc:	bne	205f8 <__assert_fail@plt+0xf0e0>
   205e0:	cmp	r1, #4
   205e4:	bne	207f0 <__assert_fail@plt+0xf2d8>
   205e8:	ldr	r1, [r3, #12]
   205ec:	cmp	r1, r9
   205f0:	bne	20600 <__assert_fail@plt+0xf0e8>
   205f4:	b	207f0 <__assert_fail@plt+0xf2d8>
   205f8:	cmp	r1, #4
   205fc:	bne	207f0 <__assert_fail@plt+0xf2d8>
   20600:	ldr	r0, [sp, #44]	; 0x2c
   20604:	ldr	r1, [sp, #12]
   20608:	str	r7, [sp, #20]
   2060c:	ldr	r7, [sp, #16]
   20610:	str	r6, [sp, #32]
   20614:	ldr	r0, [r0, #116]	; 0x74
   20618:	add	r5, r0, r1, lsl #3
   2061c:	b	20730 <__assert_fail@plt+0xf218>
   20620:	ldr	r0, [sp, #32]
   20624:	cmp	r0, #0
   20628:	bne	2065c <__assert_fail@plt+0xf144>
   2062c:	ldr	r0, [sp, #48]	; 0x30
   20630:	mov	r1, #12
   20634:	vld1.32	{d16-d17}, [r0], r1
   20638:	vld1.32	{d18-d19}, [r0]
   2063c:	add	r0, sp, #56	; 0x38
   20640:	vst1.64	{d16-d17}, [r0], r1
   20644:	ldr	r1, [sp, #28]
   20648:	vst1.32	{d18-d19}, [r0]
   2064c:	ldr	r0, [sp, #24]
   20650:	bl	1c510 <__assert_fail@plt+0xaff8>
   20654:	cmp	r0, #0
   20658:	bne	2084c <__assert_fail@plt+0xf334>
   2065c:	ldr	r4, [sp, #40]	; 0x28
   20660:	ldr	r0, [sp, #24]
   20664:	mov	r1, r7
   20668:	str	r4, [sp, #68]	; 0x44
   2066c:	str	sl, [sp, #64]	; 0x40
   20670:	bl	1c374 <__assert_fail@plt+0xae5c>
   20674:	cmp	r0, #0
   20678:	beq	2085c <__assert_fail@plt+0xf344>
   2067c:	ldr	r5, [sp, #56]	; 0x38
   20680:	ldr	r0, [sp, #44]	; 0x2c
   20684:	add	r1, sp, #56	; 0x38
   20688:	ldr	r4, [r5, r4, lsl #2]
   2068c:	bl	1fe18 <__assert_fail@plt+0xe900>
   20690:	cmp	r0, #0
   20694:	bne	2084c <__assert_fail@plt+0xf334>
   20698:	ldr	r0, [sp, #48]	; 0x30
   2069c:	ldr	r1, [r0, #4]
   206a0:	cmp	r1, #0
   206a4:	beq	206c0 <__assert_fail@plt+0xf1a8>
   206a8:	ldr	r3, [sp, #8]
   206ac:	mov	r0, r8
   206b0:	mov	r2, r5
   206b4:	bl	200b0 <__assert_fail@plt+0xeb98>
   206b8:	cmp	r0, #0
   206bc:	bne	2084c <__assert_fail@plt+0xf334>
   206c0:	ldr	r9, [sp, #40]	; 0x28
   206c4:	ldr	r0, [sp, #24]
   206c8:	mov	r1, r7
   206cc:	str	r5, [sp, #32]
   206d0:	str	r4, [r5, r9, lsl #2]
   206d4:	bl	1c58c <__assert_fail@plt+0xb074>
   206d8:	subs	r1, r0, #1
   206dc:	blt	206f4 <__assert_fail@plt+0xf1dc>
   206e0:	ldr	r2, [sp, #76]	; 0x4c
   206e4:	cmp	r2, r0
   206e8:	subge	r2, r2, #1
   206ec:	strge	r2, [sp, #76]	; 0x4c
   206f0:	bgt	2070c <__assert_fail@plt+0xf1f4>
   206f4:	ldr	r0, [sp, #44]	; 0x2c
   206f8:	add	r1, r7, r7, lsl #1
   206fc:	ldr	r0, [r0, #116]	; 0x74
   20700:	add	r0, r0, r1, lsl #3
   20704:	ldr	r3, [sp, #48]	; 0x30
   20708:	b	207cc <__assert_fail@plt+0xf2b4>
   2070c:	ldr	r3, [sp, #80]	; 0x50
   20710:	add	r0, r3, r0, lsl #2
   20714:	ldr	r3, [r0]
   20718:	add	r1, r1, #1
   2071c:	cmp	r1, r2
   20720:	str	r3, [r0, #-4]
   20724:	add	r0, r0, #4
   20728:	blt	20714 <__assert_fail@plt+0xf1fc>
   2072c:	b	206f4 <__assert_fail@plt+0xf1dc>
   20730:	ldr	r0, [r5]
   20734:	cmp	r0, sl
   20738:	bne	207c8 <__assert_fail@plt+0xf2b0>
   2073c:	ldr	r0, [r5, #8]
   20740:	ldr	r1, [r5, #12]
   20744:	subs	r0, r1, r0
   20748:	add	r6, r0, r9
   2074c:	beq	2075c <__assert_fail@plt+0xf244>
   20750:	ldr	r0, [r8, #12]
   20754:	add	r0, r0, sl, lsl #2
   20758:	b	2076c <__assert_fail@plt+0xf254>
   2075c:	ldr	r0, [r8, #20]
   20760:	add	r1, sl, sl, lsl #1
   20764:	add	r0, r0, r1, lsl #2
   20768:	ldr	r0, [r0, #8]
   2076c:	ldr	r1, [r3, #12]
   20770:	cmp	r6, r1
   20774:	bgt	207c8 <__assert_fail@plt+0xf2b0>
   20778:	ldr	r1, [r3]
   2077c:	ldr	r1, [r1, r6, lsl #2]
   20780:	cmp	r1, #0
   20784:	beq	207c8 <__assert_fail@plt+0xf2b0>
   20788:	ldr	r4, [r0]
   2078c:	add	r0, r1, #4
   20790:	mov	r1, r4
   20794:	bl	1c58c <__assert_fail@plt+0xb074>
   20798:	cmp	r0, #0
   2079c:	beq	207c0 <__assert_fail@plt+0xf2a8>
   207a0:	stm	sp, {r4, r6}
   207a4:	mov	r2, sl
   207a8:	mov	r3, r9
   207ac:	ldr	r0, [sp, #44]	; 0x2c
   207b0:	ldr	r1, [sp, #28]
   207b4:	bl	20c88 <__assert_fail@plt+0xf770>
   207b8:	cmp	r0, #0
   207bc:	beq	20620 <__assert_fail@plt+0xf108>
   207c0:	mov	r0, r5
   207c4:	b	20704 <__assert_fail@plt+0xf1ec>
   207c8:	mov	r0, r5
   207cc:	add	r5, r0, #24
   207d0:	ldrb	r0, [r0, #20]
   207d4:	add	r7, r7, #1
   207d8:	cmp	r0, #0
   207dc:	bne	20730 <__assert_fail@plt+0xf218>
   207e0:	ldr	r0, [sp, #36]	; 0x24
   207e4:	ldr	r7, [sp, #20]
   207e8:	ldr	r6, [sp, #32]
   207ec:	ldr	r0, [r0, #4]
   207f0:	add	r7, r7, #1
   207f4:	cmp	r7, r0
   207f8:	blt	205bc <__assert_fail@plt+0xf0a4>
   207fc:	mov	r9, #0
   20800:	cmp	r6, #0
   20804:	beq	20810 <__assert_fail@plt+0xf2f8>
   20808:	ldr	r0, [sp, #80]	; 0x50
   2080c:	bl	223dc <__assert_fail@plt+0x10ec4>
   20810:	cmp	r9, #0
   20814:	str	r9, [sp, #52]	; 0x34
   20818:	moveq	r9, #0
   2081c:	b	20834 <__assert_fail@plt+0xf31c>
   20820:	mov	r0, #0
   20824:	str	r0, [sp, #52]	; 0x34
   20828:	b	20830 <__assert_fail@plt+0xf318>
   2082c:	str	r6, [sp, #52]	; 0x34
   20830:	mov	r9, #0
   20834:	mov	r0, r9
   20838:	sub	sp, fp, #28
   2083c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20840:	mov	r9, r0
   20844:	str	r9, [sp, #52]	; 0x34
   20848:	b	20834 <__assert_fail@plt+0xf31c>
   2084c:	mov	r9, r0
   20850:	b	20860 <__assert_fail@plt+0xf348>
   20854:	str	r0, [sp, #56]	; 0x38
   20858:	b	20844 <__assert_fail@plt+0xf32c>
   2085c:	mov	r9, #12
   20860:	ldr	r6, [sp, #56]	; 0x38
   20864:	b	20800 <__assert_fail@plt+0xf2e8>
   20868:	mov	r9, r0
   2086c:	b	20834 <__assert_fail@plt+0xf31c>
   20870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20874:	add	fp, sp, #28
   20878:	sub	sp, sp, #12
   2087c:	ldr	ip, [r1, #4]
   20880:	mov	sl, r0
   20884:	mov	r0, #0
   20888:	cmp	ip, #0
   2088c:	ldrne	lr, [r2, #4]
   20890:	cmpne	lr, #0
   20894:	beq	20a68 <__assert_fail@plt+0xf550>
   20898:	mov	r7, r1
   2089c:	ldr	r1, [sl, #4]
   208a0:	ldr	r6, [sl]
   208a4:	add	r3, lr, ip
   208a8:	add	r4, r1, r3
   208ac:	cmp	r4, r6
   208b0:	ble	208f4 <__assert_fail@plt+0xf3dc>
   208b4:	mov	r5, r2
   208b8:	mov	r2, sl
   208bc:	add	r4, r6, r3
   208c0:	ldr	r0, [r2, #8]!
   208c4:	lsl	r1, r4, #2
   208c8:	str	r2, [sp, #8]
   208cc:	bl	22250 <__assert_fail@plt+0x10d38>
   208d0:	cmp	r0, #0
   208d4:	beq	20a70 <__assert_fail@plt+0xf558>
   208d8:	str	r4, [sl]
   208dc:	str	r0, [sl, #8]
   208e0:	mov	r2, r5
   208e4:	ldr	r1, [sl, #4]
   208e8:	ldr	lr, [r5, #4]
   208ec:	ldr	ip, [r7, #4]
   208f0:	b	208fc <__assert_fail@plt+0xf3e4>
   208f4:	add	r0, sl, #8
   208f8:	str	r0, [sp, #8]
   208fc:	str	r2, [sp, #4]
   20900:	ldr	r2, [r2, #8]
   20904:	ldr	r4, [r7, #8]
   20908:	add	r3, ip, r1
   2090c:	sub	r8, r1, #1
   20910:	add	r9, r3, lr
   20914:	sub	ip, ip, #1
   20918:	sub	r3, lr, #1
   2091c:	ldr	r1, [r2, r3, lsl #2]
   20920:	ldr	r6, [r4, ip, lsl #2]
   20924:	cmp	r6, r1
   20928:	beq	20954 <__assert_fail@plt+0xf43c>
   2092c:	blt	20944 <__assert_fail@plt+0xf42c>
   20930:	sub	r5, ip, #1
   20934:	cmp	ip, #0
   20938:	mov	ip, r5
   2093c:	bgt	20920 <__assert_fail@plt+0xf408>
   20940:	b	209c8 <__assert_fail@plt+0xf4b0>
   20944:	cmp	lr, #2
   20948:	mov	lr, r3
   2094c:	bge	20918 <__assert_fail@plt+0xf400>
   20950:	b	209c8 <__assert_fail@plt+0xf4b0>
   20954:	mov	r0, r9
   20958:	cmp	r8, #0
   2095c:	blt	209a0 <__assert_fail@plt+0xf488>
   20960:	ldr	r1, [sp, #8]
   20964:	ldr	r9, [r1]
   20968:	mov	r1, r8
   2096c:	ldr	r5, [r9, r1, lsl #2]
   20970:	cmp	r5, r6
   20974:	ble	2098c <__assert_fail@plt+0xf474>
   20978:	sub	r8, r1, #1
   2097c:	cmp	r1, #0
   20980:	mov	r1, r8
   20984:	bgt	2096c <__assert_fail@plt+0xf454>
   20988:	b	209a0 <__assert_fail@plt+0xf488>
   2098c:	mov	r8, r1
   20990:	bne	209a0 <__assert_fail@plt+0xf488>
   20994:	mov	r8, r1
   20998:	mov	r9, r0
   2099c:	b	209b4 <__assert_fail@plt+0xf49c>
   209a0:	ldr	r1, [sp, #8]
   209a4:	mov	r9, r0
   209a8:	sub	r9, r0, #1
   209ac:	ldr	r1, [r1]
   209b0:	str	r6, [r1, r9, lsl #2]
   209b4:	cmp	ip, #1
   209b8:	blt	209c8 <__assert_fail@plt+0xf4b0>
   209bc:	cmp	lr, #2
   209c0:	mov	lr, r3
   209c4:	bge	20914 <__assert_fail@plt+0xf3fc>
   209c8:	ldr	lr, [r7, #4]
   209cc:	ldr	r7, [sp, #4]
   209d0:	ldr	r2, [sl, #4]
   209d4:	ldr	r0, [sl, #8]
   209d8:	ldr	r4, [r7, #4]
   209dc:	subs	r1, r2, #1
   209e0:	add	r3, r1, lr
   209e4:	add	r3, r3, r4
   209e8:	sub	r5, r3, r9
   209ec:	add	r6, r5, #1
   209f0:	cmpge	r5, #0
   209f4:	add	r7, r6, r2
   209f8:	str	r7, [sl, #4]
   209fc:	blt	20a54 <__assert_fail@plt+0xf53c>
   20a00:	add	r2, r2, r4
   20a04:	add	r2, r2, lr
   20a08:	sub	r2, r2, r9
   20a0c:	add	r7, r0, r2, lsl #2
   20a10:	ldr	r2, [r0, r1, lsl #2]
   20a14:	ldr	r5, [r0, r3, lsl #2]
   20a18:	cmp	r5, r2
   20a1c:	bgt	20a38 <__assert_fail@plt+0xf520>
   20a20:	str	r2, [r7, r1, lsl #2]
   20a24:	sub	r2, r1, #1
   20a28:	cmp	r1, #0
   20a2c:	mov	r1, r2
   20a30:	bgt	20a10 <__assert_fail@plt+0xf4f8>
   20a34:	b	20a54 <__assert_fail@plt+0xf53c>
   20a38:	str	r5, [r7, r1, lsl #2]
   20a3c:	sub	r7, r7, #4
   20a40:	subs	r6, r6, #1
   20a44:	sub	r3, r3, #1
   20a48:	mov	r2, #0
   20a4c:	bne	20a10 <__assert_fail@plt+0xf4f8>
   20a50:	b	20a58 <__assert_fail@plt+0xf540>
   20a54:	mov	r2, r6
   20a58:	add	r1, r0, r9, lsl #2
   20a5c:	lsl	r2, r2, #2
   20a60:	bl	112a8 <memcpy@plt>
   20a64:	mov	r0, #0
   20a68:	sub	sp, fp, #28
   20a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a70:	mov	r0, #12
   20a74:	b	20a68 <__assert_fail@plt+0xf550>
   20a78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a7c:	add	fp, sp, #28
   20a80:	sub	sp, sp, #36	; 0x24
   20a84:	mov	r5, r2
   20a88:	mov	r2, r0
   20a8c:	ldr	r0, [r0, #28]
   20a90:	str	r1, [sp, #20]
   20a94:	add	r1, r1, r1, lsl #1
   20a98:	mov	r9, #0
   20a9c:	str	r3, [sp, #4]
   20aa0:	str	r9, [sp, #28]
   20aa4:	str	r9, [sp, #24]
   20aa8:	str	r9, [sp, #32]
   20aac:	add	r1, r0, r1, lsl #2
   20ab0:	mov	r0, r1
   20ab4:	ldr	r4, [r0, #4]!
   20ab8:	cmp	r4, #1
   20abc:	blt	20c60 <__assert_fail@plt+0xf748>
   20ac0:	add	r9, r1, #8
   20ac4:	mov	r6, #0
   20ac8:	str	r0, [sp, #8]
   20acc:	str	r1, [sp, #16]
   20ad0:	ldr	r0, [r9]
   20ad4:	ldr	r1, [sp, #20]
   20ad8:	ldr	r0, [r0, r6, lsl #2]
   20adc:	cmp	r0, r1
   20ae0:	beq	20bb8 <__assert_fail@plt+0xf6a0>
   20ae4:	ldr	r1, [r2]
   20ae8:	add	r1, r1, r0, lsl #3
   20aec:	ldrb	r1, [r1, #4]
   20af0:	tst	r1, #8
   20af4:	beq	20bb8 <__assert_fail@plt+0xf6a0>
   20af8:	ldr	r1, [r2, #20]
   20afc:	add	r0, r0, r0, lsl #1
   20b00:	mvn	sl, #0
   20b04:	mov	r7, r2
   20b08:	str	r0, [sp, #12]
   20b0c:	add	r0, r1, r0, lsl #2
   20b10:	ldr	r1, [r0, #4]
   20b14:	ldr	r0, [r0, #8]
   20b18:	cmp	r1, #2
   20b1c:	ldr	r8, [r0]
   20b20:	ldrge	sl, [r0, #4]
   20b24:	ldr	r0, [sp, #16]
   20b28:	mov	r1, r8
   20b2c:	bl	1c58c <__assert_fail@plt+0xb074>
   20b30:	cmp	r0, #0
   20b34:	mov	r2, r7
   20b38:	beq	20b74 <__assert_fail@plt+0xf65c>
   20b3c:	cmp	sl, #1
   20b40:	blt	20bb8 <__assert_fail@plt+0xf6a0>
   20b44:	ldr	r0, [sp, #16]
   20b48:	mov	r1, sl
   20b4c:	bl	1c58c <__assert_fail@plt+0xb074>
   20b50:	cmp	r0, #0
   20b54:	bne	20bb4 <__assert_fail@plt+0xf69c>
   20b58:	mov	r0, r5
   20b5c:	mov	r1, sl
   20b60:	bl	1c58c <__assert_fail@plt+0xb074>
   20b64:	cmp	r0, #0
   20b68:	mov	r2, r7
   20b6c:	bne	20b8c <__assert_fail@plt+0xf674>
   20b70:	b	20bb8 <__assert_fail@plt+0xf6a0>
   20b74:	mov	r0, r5
   20b78:	mov	r1, r8
   20b7c:	bl	1c58c <__assert_fail@plt+0xb074>
   20b80:	mov	r2, r7
   20b84:	cmp	r0, #0
   20b88:	beq	20b3c <__assert_fail@plt+0xf624>
   20b8c:	ldr	r0, [r2, #28]
   20b90:	ldr	r1, [sp, #12]
   20b94:	add	r2, r0, r1, lsl #2
   20b98:	ldr	r1, [sp, #4]
   20b9c:	add	r0, sp, #24
   20ba0:	bl	20870 <__assert_fail@plt+0xf358>
   20ba4:	cmp	r0, #0
   20ba8:	bne	20c74 <__assert_fail@plt+0xf75c>
   20bac:	ldr	r0, [sp, #8]
   20bb0:	ldr	r4, [r0]
   20bb4:	mov	r2, r7
   20bb8:	add	r6, r6, #1
   20bbc:	cmp	r6, r4
   20bc0:	blt	20ad0 <__assert_fail@plt+0xf5b8>
   20bc4:	ldr	sl, [sp, #8]
   20bc8:	ldr	r0, [sp, #16]
   20bcc:	cmp	r4, #1
   20bd0:	mov	r9, #0
   20bd4:	blt	20c60 <__assert_fail@plt+0xf748>
   20bd8:	ldr	r7, [r0, #8]
   20bdc:	mov	r4, #0
   20be0:	add	r8, sp, #24
   20be4:	b	20c10 <__assert_fail@plt+0xf6f8>
   20be8:	ldr	r2, [r5, #8]
   20bec:	add	r0, r2, r0, lsl #2
   20bf0:	ldr	r2, [r0]
   20bf4:	add	r1, r1, #1
   20bf8:	str	r2, [r0, #-4]
   20bfc:	add	r0, r0, #4
   20c00:	ldr	r2, [r5, #4]
   20c04:	cmp	r1, r2
   20c08:	blt	20bf0 <__assert_fail@plt+0xf6d8>
   20c0c:	b	20c50 <__assert_fail@plt+0xf738>
   20c10:	ldr	r6, [r7, r4, lsl #2]
   20c14:	mov	r0, r8
   20c18:	mov	r1, r6
   20c1c:	bl	1c58c <__assert_fail@plt+0xb074>
   20c20:	cmp	r0, #0
   20c24:	bne	20c50 <__assert_fail@plt+0xf738>
   20c28:	mov	r0, r5
   20c2c:	mov	r1, r6
   20c30:	bl	1c58c <__assert_fail@plt+0xb074>
   20c34:	subs	r1, r0, #1
   20c38:	blt	20c50 <__assert_fail@plt+0xf738>
   20c3c:	ldr	r2, [r5, #4]
   20c40:	cmp	r2, r0
   20c44:	subge	r2, r2, #1
   20c48:	strge	r2, [r5, #4]
   20c4c:	bgt	20be8 <__assert_fail@plt+0xf6d0>
   20c50:	ldr	r0, [sl]
   20c54:	add	r4, r4, #1
   20c58:	cmp	r4, r0
   20c5c:	blt	20c10 <__assert_fail@plt+0xf6f8>
   20c60:	ldr	r0, [sp, #32]
   20c64:	bl	223dc <__assert_fail@plt+0x10ec4>
   20c68:	mov	r0, r9
   20c6c:	sub	sp, fp, #28
   20c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c74:	mov	r4, r0
   20c78:	ldr	r0, [sp, #32]
   20c7c:	bl	223dc <__assert_fail@plt+0x10ec4>
   20c80:	mov	r9, r4
   20c84:	b	20c68 <__assert_fail@plt+0xf750>
   20c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c8c:	add	fp, sp, #28
   20c90:	sub	sp, sp, #20
   20c94:	mov	r6, r1
   20c98:	mov	r1, r3
   20c9c:	str	r2, [sp, #12]
   20ca0:	mov	r7, r0
   20ca4:	str	r3, [sp, #16]
   20ca8:	bl	1dfa0 <__assert_fail@plt+0xca88>
   20cac:	ldr	r1, [fp, #12]
   20cb0:	str	r0, [sp, #8]
   20cb4:	mov	r0, r7
   20cb8:	bl	1dfa0 <__assert_fail@plt+0xca88>
   20cbc:	mov	r4, r0
   20cc0:	ldr	r0, [r6, #4]
   20cc4:	cmp	r0, #1
   20cc8:	blt	20d4c <__assert_fail@plt+0xf834>
   20ccc:	ldr	sl, [r7, #84]	; 0x54
   20cd0:	mov	r5, #0
   20cd4:	ldr	r0, [r6, #8]
   20cd8:	ldr	r2, [r7, #116]	; 0x74
   20cdc:	ldr	r3, [sp, #12]
   20ce0:	ldr	r1, [r0, r5, lsl #2]
   20ce4:	add	r0, r1, r1, lsl #1
   20ce8:	ldr	r0, [r2, r0, lsl #3]
   20cec:	ldr	r2, [sl]
   20cf0:	ldr	r9, [r2, r0, lsl #3]
   20cf4:	ldr	r0, [sp, #16]
   20cf8:	str	r0, [sp]
   20cfc:	ldr	r0, [sp, #8]
   20d00:	mov	r2, r9
   20d04:	str	r0, [sp, #4]
   20d08:	mov	r0, r7
   20d0c:	bl	20d60 <__assert_fail@plt+0xf848>
   20d10:	mov	r8, r0
   20d14:	ldr	r0, [r6, #8]
   20d18:	ldr	r3, [fp, #8]
   20d1c:	mov	r2, r9
   20d20:	ldr	r1, [r0, r5, lsl #2]
   20d24:	ldr	r0, [fp, #12]
   20d28:	stm	sp, {r0, r4}
   20d2c:	mov	r0, r7
   20d30:	bl	20d60 <__assert_fail@plt+0xf848>
   20d34:	cmp	r0, r8
   20d38:	bne	20d54 <__assert_fail@plt+0xf83c>
   20d3c:	ldr	r0, [r6, #4]
   20d40:	add	r5, r5, #1
   20d44:	cmp	r5, r0
   20d48:	blt	20cd4 <__assert_fail@plt+0xf7bc>
   20d4c:	mov	r0, #0
   20d50:	b	20d58 <__assert_fail@plt+0xf840>
   20d54:	mov	r0, #1
   20d58:	sub	sp, fp, #28
   20d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d60:	push	{r4, r5, fp, lr}
   20d64:	add	fp, sp, #8
   20d68:	sub	sp, sp, #8
   20d6c:	ldr	r4, [r0, #116]	; 0x74
   20d70:	add	r1, r1, r1, lsl #1
   20d74:	ldr	lr, [fp, #8]
   20d78:	add	r4, r4, r1, lsl #3
   20d7c:	mvn	r1, #0
   20d80:	ldr	ip, [r4, #8]
   20d84:	cmp	ip, lr
   20d88:	bgt	20dd8 <__assert_fail@plt+0xf8c0>
   20d8c:	ldr	r4, [r4, #12]
   20d90:	mov	r1, #1
   20d94:	cmp	r4, lr
   20d98:	blt	20dd8 <__assert_fail@plt+0xf8c0>
   20d9c:	sub	r1, r4, lr
   20da0:	mov	r5, #1
   20da4:	cmp	ip, lr
   20da8:	clz	r1, r1
   20dac:	lsr	r4, r1, #5
   20db0:	lsl	r1, r4, #1
   20db4:	orreq	r1, r5, r4, lsl #1
   20db8:	cmp	r1, #0
   20dbc:	beq	20dd4 <__assert_fail@plt+0xf8bc>
   20dc0:	ldr	r5, [fp, #12]
   20dc4:	str	r5, [sp]
   20dc8:	bl	20de4 <__assert_fail@plt+0xf8cc>
   20dcc:	sub	sp, fp, #8
   20dd0:	pop	{r4, r5, fp, pc}
   20dd4:	mov	r1, #0
   20dd8:	mov	r0, r1
   20ddc:	sub	sp, fp, #8
   20de0:	pop	{r4, r5, fp, pc}
   20de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20de8:	add	fp, sp, #28
   20dec:	sub	sp, sp, #36	; 0x24
   20df0:	ldr	r4, [r0, #84]	; 0x54
   20df4:	mov	r7, r0
   20df8:	mov	r5, r1
   20dfc:	add	r1, r3, r3, lsl #1
   20e00:	str	r3, [sp, #32]
   20e04:	ldr	r0, [r4, #24]
   20e08:	add	r1, r0, r1, lsl #2
   20e0c:	mov	lr, r1
   20e10:	ldr	r0, [lr, #4]!
   20e14:	cmp	r0, #1
   20e18:	blt	20fb4 <__assert_fail@plt+0xfa9c>
   20e1c:	mov	ip, #1
   20e20:	mov	r6, r2
   20e24:	and	r3, r5, #2
   20e28:	mov	sl, #0
   20e2c:	mvn	r2, ip, lsl r2
   20e30:	cmp	r6, #31
   20e34:	str	r3, [sp, #16]
   20e38:	str	r2, [sp, #24]
   20e3c:	lsl	r2, ip, r6
   20e40:	and	ip, r5, #1
   20e44:	str	r2, [sp, #28]
   20e48:	mov	r2, #0
   20e4c:	str	ip, [sp, #12]
   20e50:	movwgt	r2, #1
   20e54:	orr	r2, r2, r3, lsr #1
   20e58:	add	r3, r1, #8
   20e5c:	str	r2, [sp, #20]
   20e60:	stmib	sp, {r3, lr}
   20e64:	ldr	r1, [r3]
   20e68:	ldr	r9, [r1, sl, lsl #2]
   20e6c:	ldr	r1, [r4]
   20e70:	add	r2, r1, r9, lsl #3
   20e74:	ldrb	r2, [r2, #4]
   20e78:	cmp	r2, #9
   20e7c:	beq	20f78 <__assert_fail@plt+0xfa60>
   20e80:	cmp	r2, #8
   20e84:	beq	20f94 <__assert_fail@plt+0xfa7c>
   20e88:	cmp	r2, #4
   20e8c:	bne	20fa8 <__assert_fail@plt+0xfa90>
   20e90:	ldr	r1, [fp, #8]
   20e94:	cmn	r1, #1
   20e98:	beq	20fa8 <__assert_fail@plt+0xfa90>
   20e9c:	ldr	r1, [fp, #8]
   20ea0:	ldr	r0, [r7, #116]	; 0x74
   20ea4:	add	r1, r1, r1, lsl #1
   20ea8:	add	r0, r0, r1, lsl #3
   20eac:	add	r8, r0, #16
   20eb0:	ldr	r0, [r8, #-16]
   20eb4:	cmp	r0, r9
   20eb8:	bne	20f54 <__assert_fail@plt+0xfa3c>
   20ebc:	cmp	r6, #31
   20ec0:	bgt	20ed4 <__assert_fail@plt+0xf9bc>
   20ec4:	ldr	r0, [r8]
   20ec8:	ldr	r1, [sp, #28]
   20ecc:	tst	r0, r1
   20ed0:	beq	20f54 <__assert_fail@plt+0xfa3c>
   20ed4:	ldr	r0, [r4, #20]
   20ed8:	add	r1, r9, r9, lsl #1
   20edc:	add	r0, r0, r1, lsl #2
   20ee0:	ldr	r0, [r0, #8]
   20ee4:	ldr	r3, [r0]
   20ee8:	ldr	r0, [sp, #32]
   20eec:	cmp	r3, r0
   20ef0:	beq	20fbc <__assert_fail@plt+0xfaa4>
   20ef4:	ldr	r0, [fp, #8]
   20ef8:	mov	r1, r5
   20efc:	mov	r2, r6
   20f00:	str	r0, [sp]
   20f04:	mov	r0, r7
   20f08:	bl	20de4 <__assert_fail@plt+0xf8cc>
   20f0c:	cmp	r0, #0
   20f10:	beq	20f28 <__assert_fail@plt+0xfa10>
   20f14:	cmn	r0, #1
   20f18:	beq	20fd4 <__assert_fail@plt+0xfabc>
   20f1c:	cmp	r6, #31
   20f20:	ble	20f44 <__assert_fail@plt+0xfa2c>
   20f24:	b	20f54 <__assert_fail@plt+0xfa3c>
   20f28:	ldr	r0, [sp, #20]
   20f2c:	cmp	r0, #0
   20f30:	beq	20f44 <__assert_fail@plt+0xfa2c>
   20f34:	ldr	r0, [sp, #16]
   20f38:	cmp	r0, #0
   20f3c:	beq	20f54 <__assert_fail@plt+0xfa3c>
   20f40:	b	20fc8 <__assert_fail@plt+0xfab0>
   20f44:	ldr	r0, [r8]
   20f48:	ldr	r1, [sp, #24]
   20f4c:	and	r0, r0, r1
   20f50:	str	r0, [r8]
   20f54:	ldrb	r0, [r8, #4]
   20f58:	add	r8, r8, #24
   20f5c:	cmp	r0, #0
   20f60:	bne	20eb0 <__assert_fail@plt+0xf998>
   20f64:	ldr	lr, [sp, #8]
   20f68:	ldr	ip, [sp, #12]
   20f6c:	ldr	r3, [sp, #4]
   20f70:	ldr	r0, [lr]
   20f74:	b	20fa8 <__assert_fail@plt+0xfa90>
   20f78:	ldr	r2, [sp, #16]
   20f7c:	cmp	r2, #0
   20f80:	beq	20fa8 <__assert_fail@plt+0xfa90>
   20f84:	ldr	r1, [r1, r9, lsl #3]
   20f88:	cmp	r1, r6
   20f8c:	bne	20fa8 <__assert_fail@plt+0xfa90>
   20f90:	b	20fc8 <__assert_fail@plt+0xfab0>
   20f94:	cmp	ip, #0
   20f98:	beq	20fa8 <__assert_fail@plt+0xfa90>
   20f9c:	ldr	r1, [r1, r9, lsl #3]
   20fa0:	cmp	r1, r6
   20fa4:	beq	20fd0 <__assert_fail@plt+0xfab8>
   20fa8:	add	sl, sl, #1
   20fac:	cmp	sl, r0
   20fb0:	blt	20e64 <__assert_fail@plt+0xf94c>
   20fb4:	ubfx	r0, r5, #1, #1
   20fb8:	b	20fd4 <__assert_fail@plt+0xfabc>
   20fbc:	ldr	r0, [sp, #12]
   20fc0:	rsb	r0, r0, #0
   20fc4:	b	20fd4 <__assert_fail@plt+0xfabc>
   20fc8:	mov	r0, #0
   20fcc:	b	20fd4 <__assert_fail@plt+0xfabc>
   20fd0:	mvn	r0, #0
   20fd4:	sub	sp, fp, #28
   20fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fdc:	cmp	r0, #0
   20fe0:	bxeq	lr
   20fe4:	push	{r4, r5, r6, sl, fp, lr}
   20fe8:	add	fp, sp, #16
   20fec:	ldr	r1, [r0]
   20ff0:	mov	r4, r0
   20ff4:	ldr	r0, [r0, #8]
   20ff8:	cmp	r1, #1
   20ffc:	blt	2103c <__assert_fail@plt+0xfb24>
   21000:	mov	r5, #0
   21004:	mov	r6, #0
   21008:	add	r0, r0, r5
   2100c:	ldr	r0, [r0, #20]
   21010:	bl	223dc <__assert_fail@plt+0x10ec4>
   21014:	ldr	r0, [r4, #8]
   21018:	add	r0, r0, r5
   2101c:	ldr	r0, [r0, #8]
   21020:	bl	223dc <__assert_fail@plt+0x10ec4>
   21024:	ldr	r1, [r4]
   21028:	ldr	r0, [r4, #8]
   2102c:	add	r6, r6, #1
   21030:	add	r5, r5, #24
   21034:	cmp	r6, r1
   21038:	blt	21008 <__assert_fail@plt+0xfaf0>
   2103c:	pop	{r4, r5, r6, sl, fp, lr}
   21040:	b	223dc <__assert_fail@plt+0x10ec4>
   21044:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21048:	add	fp, sp, #24
   2104c:	mov	r4, r0
   21050:	mvn	r0, #0
   21054:	cmp	r4, #0
   21058:	beq	210f8 <__assert_fail@plt+0xfbe0>
   2105c:	mov	r5, r2
   21060:	ldr	r2, [r4]
   21064:	cmp	r2, #0
   21068:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   2106c:	sub	r0, r2, #1
   21070:	ldr	r9, [fp, #12]
   21074:	ldr	r8, [fp, #8]
   21078:	lsl	r7, r5, #3
   2107c:	str	r0, [r4]
   21080:	add	r6, r0, r0, lsl #1
   21084:	ldr	r2, [r4, #8]
   21088:	ldr	r0, [r2, r6, lsl #3]!
   2108c:	str	r0, [r1]
   21090:	mov	r0, r3
   21094:	ldr	r1, [r2, #8]
   21098:	mov	r2, r7
   2109c:	bl	112a8 <memcpy@plt>
   210a0:	ldr	r0, [r4, #8]
   210a4:	mov	r2, r7
   210a8:	add	r0, r0, r6, lsl #3
   210ac:	ldr	r0, [r0, #8]
   210b0:	add	r1, r0, r5, lsl #3
   210b4:	mov	r0, r8
   210b8:	bl	112a8 <memcpy@plt>
   210bc:	ldr	r0, [r9, #8]
   210c0:	bl	223dc <__assert_fail@plt+0x10ec4>
   210c4:	ldr	r0, [r4, #8]
   210c8:	add	r0, r0, r6, lsl #3
   210cc:	ldr	r0, [r0, #8]
   210d0:	bl	223dc <__assert_fail@plt+0x10ec4>
   210d4:	ldr	r0, [r4, #8]
   210d8:	add	r0, r0, r6, lsl #3
   210dc:	vldr	d16, [r0, #12]
   210e0:	ldr	r0, [r0, #20]
   210e4:	str	r0, [r9, #8]
   210e8:	vstr	d16, [r9]
   210ec:	ldr	r0, [r4, #8]
   210f0:	add	r0, r0, r6, lsl #3
   210f4:	ldr	r0, [r0, #4]
   210f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   210fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21100:	add	fp, sp, #24
   21104:	sub	sp, sp, #32
   21108:	ldr	r6, [fp, #12]
   2110c:	ldr	r7, [fp, #8]
   21110:	mov	r4, r2
   21114:	mov	r8, r0
   21118:	cmp	r1, #0
   2111c:	beq	21144 <__assert_fail@plt+0xfc2c>
   21120:	movw	r2, #14265	; 0x37b9
   21124:	mov	r5, r1
   21128:	str	r3, [sp, #4]
   2112c:	str	r4, [sp]
   21130:	mov	r0, r8
   21134:	mov	r1, #1
   21138:	movt	r2, #2
   2113c:	mov	r3, r5
   21140:	b	2115c <__assert_fail@plt+0xfc44>
   21144:	movw	r2, #14277	; 0x37c5
   21148:	str	r3, [sp]
   2114c:	mov	r0, r8
   21150:	mov	r1, #1
   21154:	mov	r3, r4
   21158:	movt	r2, #2
   2115c:	bl	1144c <__fprintf_chk@plt>
   21160:	movw	r1, #14284	; 0x37cc
   21164:	mov	r0, #0
   21168:	mov	r2, #5
   2116c:	movt	r1, #2
   21170:	bl	11314 <dcgettext@plt>
   21174:	movw	r2, #15002	; 0x3a9a
   21178:	mov	r3, r0
   2117c:	movw	r0, #2022	; 0x7e6
   21180:	mov	r1, #1
   21184:	str	r0, [sp]
   21188:	movt	r2, #2
   2118c:	mov	r0, r8
   21190:	bl	1144c <__fprintf_chk@plt>
   21194:	movw	r4, #12039	; 0x2f07
   21198:	mov	r1, r8
   2119c:	movt	r4, #2
   211a0:	mov	r0, r4
   211a4:	bl	1120c <fputs_unlocked@plt>
   211a8:	movw	r1, #14288	; 0x37d0
   211ac:	mov	r0, #0
   211b0:	mov	r2, #5
   211b4:	movt	r1, #2
   211b8:	bl	11314 <dcgettext@plt>
   211bc:	movw	r3, #14459	; 0x387b
   211c0:	mov	r2, r0
   211c4:	mov	r0, r8
   211c8:	mov	r1, #1
   211cc:	movt	r3, #2
   211d0:	bl	1144c <__fprintf_chk@plt>
   211d4:	mov	r0, r4
   211d8:	mov	r1, r8
   211dc:	bl	1120c <fputs_unlocked@plt>
   211e0:	cmp	r6, #9
   211e4:	bhi	21248 <__assert_fail@plt+0xfd30>
   211e8:	add	r0, pc, #0
   211ec:	ldr	pc, [r0, r6, lsl #2]
   211f0:	andeq	r1, r2, r0, lsr #8
   211f4:	andeq	r1, r2, r8, lsl r2
   211f8:	andeq	r1, r2, r4, asr r2
   211fc:	andeq	r1, r2, ip, ror r2
   21200:	andeq	r1, r2, r4, lsr #5
   21204:	andeq	r1, r2, ip, asr #5
   21208:	strdeq	r1, [r2], -r4
   2120c:	andeq	r1, r2, ip, lsr #6
   21210:	andeq	r1, r2, ip, asr #7
   21214:	andeq	r1, r2, r4, ror r3
   21218:	movw	r1, #14493	; 0x389d
   2121c:	mov	r0, #0
   21220:	mov	r2, #5
   21224:	movt	r1, #2
   21228:	bl	11314 <dcgettext@plt>
   2122c:	ldr	r3, [r7]
   21230:	mov	r2, r0
   21234:	mov	r0, r8
   21238:	mov	r1, #1
   2123c:	sub	sp, fp, #24
   21240:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   21244:	b	1144c <__fprintf_chk@plt>
   21248:	movw	r1, #14812	; 0x39dc
   2124c:	movt	r1, #2
   21250:	b	2137c <__assert_fail@plt+0xfe64>
   21254:	movw	r1, #14509	; 0x38ad
   21258:	mov	r0, #0
   2125c:	mov	r2, #5
   21260:	movt	r1, #2
   21264:	bl	11314 <dcgettext@plt>
   21268:	mov	r2, r0
   2126c:	ldr	r3, [r7]
   21270:	ldr	r0, [r7, #4]
   21274:	str	r0, [sp]
   21278:	b	21368 <__assert_fail@plt+0xfe50>
   2127c:	movw	r1, #14532	; 0x38c4
   21280:	mov	r0, #0
   21284:	mov	r2, #5
   21288:	movt	r1, #2
   2128c:	bl	11314 <dcgettext@plt>
   21290:	ldr	r3, [r7]
   21294:	mov	r2, r0
   21298:	ldmib	r7, {r0, r1}
   2129c:	stm	sp, {r0, r1}
   212a0:	b	21368 <__assert_fail@plt+0xfe50>
   212a4:	movw	r1, #14560	; 0x38e0
   212a8:	mov	r0, #0
   212ac:	mov	r2, #5
   212b0:	movt	r1, #2
   212b4:	bl	11314 <dcgettext@plt>
   212b8:	ldr	r3, [r7]
   212bc:	mov	r2, r0
   212c0:	ldmib	r7, {r0, r1, r7}
   212c4:	stm	sp, {r0, r1, r7}
   212c8:	b	21368 <__assert_fail@plt+0xfe50>
   212cc:	movw	r1, #14592	; 0x3900
   212d0:	mov	r0, #0
   212d4:	mov	r2, #5
   212d8:	movt	r1, #2
   212dc:	bl	11314 <dcgettext@plt>
   212e0:	ldr	r3, [r7]
   212e4:	mov	r2, r0
   212e8:	ldmib	r7, {r0, r1, r6, r7}
   212ec:	stm	sp, {r0, r1, r6, r7}
   212f0:	b	21368 <__assert_fail@plt+0xfe50>
   212f4:	movw	r1, #14628	; 0x3924
   212f8:	mov	r0, #0
   212fc:	mov	r2, #5
   21300:	movt	r1, #2
   21304:	bl	11314 <dcgettext@plt>
   21308:	ldr	r3, [r7]
   2130c:	mov	r2, r0
   21310:	ldmib	r7, {r0, r1, r6}
   21314:	ldr	r5, [r7, #16]
   21318:	ldr	r7, [r7, #20]
   2131c:	stm	sp, {r0, r1, r6}
   21320:	str	r5, [sp, #12]
   21324:	str	r7, [sp, #16]
   21328:	b	21368 <__assert_fail@plt+0xfe50>
   2132c:	movw	r1, #14668	; 0x394c
   21330:	mov	r0, #0
   21334:	mov	r2, #5
   21338:	movt	r1, #2
   2133c:	bl	11314 <dcgettext@plt>
   21340:	ldr	r3, [r7]
   21344:	mov	r2, r0
   21348:	ldmib	r7, {r0, r1, r6}
   2134c:	ldr	r5, [r7, #16]
   21350:	ldr	r4, [r7, #20]
   21354:	ldr	r7, [r7, #24]
   21358:	stm	sp, {r0, r1, r6}
   2135c:	str	r5, [sp, #12]
   21360:	str	r4, [sp, #16]
   21364:	str	r7, [sp, #20]
   21368:	mov	r0, r8
   2136c:	mov	r1, #1
   21370:	b	2141c <__assert_fail@plt+0xff04>
   21374:	movw	r1, #14760	; 0x39a8
   21378:	movt	r1, #2
   2137c:	mov	r0, #0
   21380:	mov	r2, #5
   21384:	bl	11314 <dcgettext@plt>
   21388:	mov	ip, r0
   2138c:	ldr	r3, [r7]
   21390:	ldr	r0, [r7, #4]
   21394:	ldr	r1, [r7, #8]
   21398:	ldr	r6, [r7, #12]
   2139c:	ldr	r5, [r7, #16]
   213a0:	ldr	r4, [r7, #20]
   213a4:	ldr	r2, [r7, #24]
   213a8:	ldr	lr, [r7, #28]
   213ac:	ldr	r7, [r7, #32]
   213b0:	stm	sp, {r0, r1, r6}
   213b4:	str	r5, [sp, #12]
   213b8:	str	r4, [sp, #16]
   213bc:	str	r2, [sp, #20]
   213c0:	str	lr, [sp, #24]
   213c4:	str	r7, [sp, #28]
   213c8:	b	21410 <__assert_fail@plt+0xfef8>
   213cc:	movw	r1, #14712	; 0x3978
   213d0:	mov	r0, #0
   213d4:	mov	r2, #5
   213d8:	movt	r1, #2
   213dc:	bl	11314 <dcgettext@plt>
   213e0:	mov	ip, r0
   213e4:	ldr	r3, [r7]
   213e8:	ldmib	r7, {r0, r1, r6}
   213ec:	ldr	r5, [r7, #16]
   213f0:	ldr	r4, [r7, #20]
   213f4:	ldr	r2, [r7, #24]
   213f8:	ldr	r7, [r7, #28]
   213fc:	stm	sp, {r0, r1, r6}
   21400:	str	r5, [sp, #12]
   21404:	str	r4, [sp, #16]
   21408:	str	r2, [sp, #20]
   2140c:	str	r7, [sp, #24]
   21410:	mov	r0, r8
   21414:	mov	r1, #1
   21418:	mov	r2, ip
   2141c:	bl	1144c <__fprintf_chk@plt>
   21420:	sub	sp, fp, #24
   21424:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21428:	push	{r4, sl, fp, lr}
   2142c:	add	fp, sp, #8
   21430:	sub	sp, sp, #8
   21434:	ldr	ip, [fp, #8]
   21438:	mov	lr, #0
   2143c:	ldr	r4, [ip, lr, lsl #2]
   21440:	add	lr, lr, #1
   21444:	cmp	r4, #0
   21448:	bne	2143c <__assert_fail@plt+0xff24>
   2144c:	sub	r4, lr, #1
   21450:	str	ip, [sp]
   21454:	str	r4, [sp, #4]
   21458:	bl	210fc <__assert_fail@plt+0xfbe4>
   2145c:	sub	sp, fp, #8
   21460:	pop	{r4, sl, fp, pc}
   21464:	push	{r4, r5, fp, lr}
   21468:	add	fp, sp, #8
   2146c:	sub	sp, sp, #48	; 0x30
   21470:	ldr	r4, [fp, #8]
   21474:	mov	ip, #0
   21478:	add	lr, sp, #8
   2147c:	ldr	r5, [r4]
   21480:	cmp	r5, #0
   21484:	str	r5, [lr, ip, lsl #2]
   21488:	beq	2149c <__assert_fail@plt+0xff84>
   2148c:	add	ip, ip, #1
   21490:	add	r4, r4, #4
   21494:	cmp	ip, #10
   21498:	bcc	2147c <__assert_fail@plt+0xff64>
   2149c:	str	lr, [sp]
   214a0:	str	ip, [sp, #4]
   214a4:	bl	210fc <__assert_fail@plt+0xfbe4>
   214a8:	sub	sp, fp, #8
   214ac:	pop	{r4, r5, fp, pc}
   214b0:	push	{fp, lr}
   214b4:	mov	fp, sp
   214b8:	sub	sp, sp, #8
   214bc:	add	ip, fp, #8
   214c0:	str	ip, [sp, #4]
   214c4:	str	ip, [sp]
   214c8:	bl	21464 <__assert_fail@plt+0xff4c>
   214cc:	mov	sp, fp
   214d0:	pop	{fp, pc}
   214d4:	push	{fp, lr}
   214d8:	mov	fp, sp
   214dc:	movw	r0, #16844	; 0x41cc
   214e0:	movt	r0, #3
   214e4:	ldr	r1, [r0]
   214e8:	movw	r0, #12039	; 0x2f07
   214ec:	movt	r0, #2
   214f0:	bl	1120c <fputs_unlocked@plt>
   214f4:	movw	r1, #14872	; 0x3a18
   214f8:	mov	r0, #0
   214fc:	mov	r2, #5
   21500:	movt	r1, #2
   21504:	bl	11314 <dcgettext@plt>
   21508:	movw	r2, #14892	; 0x3a2c
   2150c:	mov	r1, r0
   21510:	mov	r0, #1
   21514:	movt	r2, #2
   21518:	bl	11434 <__printf_chk@plt>
   2151c:	movw	r1, #14914	; 0x3a42
   21520:	mov	r0, #0
   21524:	mov	r2, #5
   21528:	movt	r1, #2
   2152c:	bl	11314 <dcgettext@plt>
   21530:	movw	r2, #12362	; 0x304a
   21534:	movw	r3, #12655	; 0x316f
   21538:	mov	r1, r0
   2153c:	mov	r0, #1
   21540:	movt	r2, #2
   21544:	movt	r3, #2
   21548:	bl	11434 <__printf_chk@plt>
   2154c:	movw	r1, #14934	; 0x3a56
   21550:	mov	r0, #0
   21554:	mov	r2, #5
   21558:	movt	r1, #2
   2155c:	bl	11314 <dcgettext@plt>
   21560:	movw	r2, #14973	; 0x3a7d
   21564:	mov	r1, r0
   21568:	mov	r0, #1
   2156c:	movt	r2, #2
   21570:	pop	{fp, lr}
   21574:	b	11434 <__printf_chk@plt>
   21578:	b	2157c <__assert_fail@plt+0x10064>
   2157c:	push	{r4, r5, r6, sl, fp, lr}
   21580:	add	fp, sp, #16
   21584:	mov	r4, r2
   21588:	mov	r5, r1
   2158c:	mov	r6, r0
   21590:	bl	2249c <__assert_fail@plt+0x10f84>
   21594:	cmp	r0, #0
   21598:	popne	{r4, r5, r6, sl, fp, pc}
   2159c:	cmp	r6, #0
   215a0:	beq	215b4 <__assert_fail@plt+0x1009c>
   215a4:	cmp	r5, #0
   215a8:	cmpne	r4, #0
   215ac:	bne	215b4 <__assert_fail@plt+0x1009c>
   215b0:	pop	{r4, r5, r6, sl, fp, pc}
   215b4:	bl	21a08 <__assert_fail@plt+0x104f0>
   215b8:	push	{fp, lr}
   215bc:	mov	fp, sp
   215c0:	bl	22220 <__assert_fail@plt+0x10d08>
   215c4:	cmp	r0, #0
   215c8:	popne	{fp, pc}
   215cc:	bl	21a08 <__assert_fail@plt+0x104f0>
   215d0:	push	{fp, lr}
   215d4:	mov	fp, sp
   215d8:	bl	22220 <__assert_fail@plt+0x10d08>
   215dc:	cmp	r0, #0
   215e0:	popne	{fp, pc}
   215e4:	bl	21a08 <__assert_fail@plt+0x104f0>
   215e8:	push	{fp, lr}
   215ec:	mov	fp, sp
   215f0:	bl	22220 <__assert_fail@plt+0x10d08>
   215f4:	cmp	r0, #0
   215f8:	popne	{fp, pc}
   215fc:	bl	21a08 <__assert_fail@plt+0x104f0>
   21600:	push	{r4, r5, fp, lr}
   21604:	add	fp, sp, #8
   21608:	mov	r4, r1
   2160c:	mov	r5, r0
   21610:	bl	22250 <__assert_fail@plt+0x10d38>
   21614:	cmp	r0, #0
   21618:	popne	{r4, r5, fp, pc}
   2161c:	cmp	r5, #0
   21620:	beq	21630 <__assert_fail@plt+0x10118>
   21624:	cmp	r4, #0
   21628:	bne	21630 <__assert_fail@plt+0x10118>
   2162c:	pop	{r4, r5, fp, pc}
   21630:	bl	21a08 <__assert_fail@plt+0x104f0>
   21634:	push	{fp, lr}
   21638:	mov	fp, sp
   2163c:	cmp	r1, #0
   21640:	orreq	r1, r1, #1
   21644:	bl	22250 <__assert_fail@plt+0x10d38>
   21648:	cmp	r0, #0
   2164c:	popne	{fp, pc}
   21650:	bl	21a08 <__assert_fail@plt+0x104f0>
   21654:	push	{fp, lr}
   21658:	mov	fp, sp
   2165c:	clz	r3, r2
   21660:	lsr	ip, r3, #5
   21664:	clz	r3, r1
   21668:	lsr	r3, r3, #5
   2166c:	orrs	r3, r3, ip
   21670:	movwne	r1, #1
   21674:	movwne	r2, #1
   21678:	bl	2249c <__assert_fail@plt+0x10f84>
   2167c:	cmp	r0, #0
   21680:	popne	{fp, pc}
   21684:	bl	21a08 <__assert_fail@plt+0x104f0>
   21688:	push	{fp, lr}
   2168c:	mov	fp, sp
   21690:	mov	r2, r1
   21694:	mov	r1, r0
   21698:	mov	r0, #0
   2169c:	bl	2249c <__assert_fail@plt+0x10f84>
   216a0:	cmp	r0, #0
   216a4:	popne	{fp, pc}
   216a8:	bl	21a08 <__assert_fail@plt+0x104f0>
   216ac:	mov	r2, r1
   216b0:	mov	r1, r0
   216b4:	mov	r0, #0
   216b8:	b	21654 <__assert_fail@plt+0x1013c>
   216bc:	mov	r2, #1
   216c0:	b	216c4 <__assert_fail@plt+0x101ac>
   216c4:	push	{r4, r5, fp, lr}
   216c8:	add	fp, sp, #8
   216cc:	ldr	r5, [r1]
   216d0:	mov	r4, r1
   216d4:	cmp	r0, #0
   216d8:	beq	216f0 <__assert_fail@plt+0x101d8>
   216dc:	mov	r1, #1
   216e0:	add	r1, r1, r5, lsr #1
   216e4:	adds	r5, r5, r1
   216e8:	bcc	21708 <__assert_fail@plt+0x101f0>
   216ec:	bl	21a08 <__assert_fail@plt+0x104f0>
   216f0:	cmp	r5, #0
   216f4:	bne	21708 <__assert_fail@plt+0x101f0>
   216f8:	mov	r1, #64	; 0x40
   216fc:	cmp	r2, #64	; 0x40
   21700:	udiv	r5, r1, r2
   21704:	addhi	r5, r5, #1
   21708:	mov	r1, r5
   2170c:	bl	2157c <__assert_fail@plt+0x10064>
   21710:	str	r5, [r4]
   21714:	pop	{r4, r5, fp, pc}
   21718:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2171c:	add	fp, sp, #24
   21720:	ldr	r6, [r1]
   21724:	mov	r8, r1
   21728:	ldr	r4, [fp, #8]
   2172c:	add	r1, r6, r6, asr #1
   21730:	cmp	r1, r6
   21734:	mvnvs	r1, #-2147483648	; 0x80000000
   21738:	cmp	r1, r3
   2173c:	mov	r5, r1
   21740:	movgt	r5, r3
   21744:	cmn	r3, #1
   21748:	movle	r5, r1
   2174c:	cmn	r4, #1
   21750:	ble	21770 <__assert_fail@plt+0x10258>
   21754:	cmp	r4, #0
   21758:	beq	217c4 <__assert_fail@plt+0x102ac>
   2175c:	cmn	r5, #1
   21760:	ble	21798 <__assert_fail@plt+0x10280>
   21764:	mvn	r7, #-2147483648	; 0x80000000
   21768:	udiv	r1, r7, r4
   2176c:	b	2178c <__assert_fail@plt+0x10274>
   21770:	cmn	r5, #1
   21774:	ble	217b4 <__assert_fail@plt+0x1029c>
   21778:	cmn	r4, #1
   2177c:	beq	217c4 <__assert_fail@plt+0x102ac>
   21780:	mov	r1, #-2147483648	; 0x80000000
   21784:	mvn	r7, #-2147483648	; 0x80000000
   21788:	sdiv	r1, r1, r4
   2178c:	cmp	r1, r5
   21790:	bge	217c4 <__assert_fail@plt+0x102ac>
   21794:	b	217d4 <__assert_fail@plt+0x102bc>
   21798:	beq	217c4 <__assert_fail@plt+0x102ac>
   2179c:	mov	r1, #-2147483648	; 0x80000000
   217a0:	mvn	r7, #-2147483648	; 0x80000000
   217a4:	sdiv	r1, r1, r5
   217a8:	cmp	r1, r4
   217ac:	bge	217c4 <__assert_fail@plt+0x102ac>
   217b0:	b	217d4 <__assert_fail@plt+0x102bc>
   217b4:	mvn	r7, #-2147483648	; 0x80000000
   217b8:	sdiv	r1, r7, r4
   217bc:	cmp	r5, r1
   217c0:	blt	217d4 <__assert_fail@plt+0x102bc>
   217c4:	mul	r1, r5, r4
   217c8:	mov	r7, #64	; 0x40
   217cc:	cmp	r1, #63	; 0x3f
   217d0:	bgt	217dc <__assert_fail@plt+0x102c4>
   217d4:	sdiv	r5, r7, r4
   217d8:	mul	r1, r5, r4
   217dc:	cmp	r0, #0
   217e0:	moveq	r7, #0
   217e4:	streq	r7, [r8]
   217e8:	sub	r7, r5, r6
   217ec:	cmp	r7, r2
   217f0:	bge	21894 <__assert_fail@plt+0x1037c>
   217f4:	add	r5, r6, r2
   217f8:	mov	r2, #0
   217fc:	mov	r1, #0
   21800:	cmp	r5, r3
   21804:	movwgt	r2, #1
   21808:	cmn	r3, #1
   2180c:	movwgt	r1, #1
   21810:	cmp	r5, r6
   21814:	bvs	2187c <__assert_fail@plt+0x10364>
   21818:	ands	r1, r1, r2
   2181c:	bne	2187c <__assert_fail@plt+0x10364>
   21820:	cmn	r4, #1
   21824:	ble	21844 <__assert_fail@plt+0x1032c>
   21828:	cmp	r4, #0
   2182c:	beq	21890 <__assert_fail@plt+0x10378>
   21830:	cmn	r5, #1
   21834:	ble	21868 <__assert_fail@plt+0x10350>
   21838:	mvn	r1, #-2147483648	; 0x80000000
   2183c:	udiv	r1, r1, r4
   21840:	b	2185c <__assert_fail@plt+0x10344>
   21844:	cmn	r5, #1
   21848:	ble	21880 <__assert_fail@plt+0x10368>
   2184c:	cmn	r4, #1
   21850:	beq	21890 <__assert_fail@plt+0x10378>
   21854:	mov	r1, #-2147483648	; 0x80000000
   21858:	sdiv	r1, r1, r4
   2185c:	cmp	r1, r5
   21860:	bge	21890 <__assert_fail@plt+0x10378>
   21864:	b	2187c <__assert_fail@plt+0x10364>
   21868:	beq	21890 <__assert_fail@plt+0x10378>
   2186c:	mov	r1, #-2147483648	; 0x80000000
   21870:	sdiv	r1, r1, r5
   21874:	cmp	r1, r4
   21878:	bge	21890 <__assert_fail@plt+0x10378>
   2187c:	bl	21a08 <__assert_fail@plt+0x104f0>
   21880:	mvn	r1, #-2147483648	; 0x80000000
   21884:	sdiv	r1, r1, r4
   21888:	cmp	r5, r1
   2188c:	blt	2187c <__assert_fail@plt+0x10364>
   21890:	mul	r1, r5, r4
   21894:	bl	21600 <__assert_fail@plt+0x100e8>
   21898:	str	r5, [r8]
   2189c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   218a0:	push	{fp, lr}
   218a4:	mov	fp, sp
   218a8:	mov	r1, #1
   218ac:	bl	221cc <__assert_fail@plt+0x10cb4>
   218b0:	cmp	r0, #0
   218b4:	popne	{fp, pc}
   218b8:	bl	21a08 <__assert_fail@plt+0x104f0>
   218bc:	push	{fp, lr}
   218c0:	mov	fp, sp
   218c4:	bl	221cc <__assert_fail@plt+0x10cb4>
   218c8:	cmp	r0, #0
   218cc:	popne	{fp, pc}
   218d0:	bl	21a08 <__assert_fail@plt+0x104f0>
   218d4:	push	{fp, lr}
   218d8:	mov	fp, sp
   218dc:	mov	r1, #1
   218e0:	bl	221cc <__assert_fail@plt+0x10cb4>
   218e4:	cmp	r0, #0
   218e8:	popne	{fp, pc}
   218ec:	bl	21a08 <__assert_fail@plt+0x104f0>
   218f0:	push	{fp, lr}
   218f4:	mov	fp, sp
   218f8:	bl	221cc <__assert_fail@plt+0x10cb4>
   218fc:	cmp	r0, #0
   21900:	popne	{fp, pc}
   21904:	bl	21a08 <__assert_fail@plt+0x104f0>
   21908:	push	{r4, r5, r6, sl, fp, lr}
   2190c:	add	fp, sp, #16
   21910:	mov	r5, r0
   21914:	mov	r0, r1
   21918:	mov	r4, r1
   2191c:	bl	22220 <__assert_fail@plt+0x10d08>
   21920:	cmp	r0, #0
   21924:	beq	21940 <__assert_fail@plt+0x10428>
   21928:	mov	r1, r5
   2192c:	mov	r2, r4
   21930:	mov	r6, r0
   21934:	bl	112a8 <memcpy@plt>
   21938:	mov	r0, r6
   2193c:	pop	{r4, r5, r6, sl, fp, pc}
   21940:	bl	21a08 <__assert_fail@plt+0x104f0>
   21944:	push	{r4, r5, r6, sl, fp, lr}
   21948:	add	fp, sp, #16
   2194c:	mov	r5, r0
   21950:	mov	r0, r1
   21954:	mov	r4, r1
   21958:	bl	22220 <__assert_fail@plt+0x10d08>
   2195c:	cmp	r0, #0
   21960:	beq	2197c <__assert_fail@plt+0x10464>
   21964:	mov	r1, r5
   21968:	mov	r2, r4
   2196c:	mov	r6, r0
   21970:	bl	112a8 <memcpy@plt>
   21974:	mov	r0, r6
   21978:	pop	{r4, r5, r6, sl, fp, pc}
   2197c:	bl	21a08 <__assert_fail@plt+0x104f0>
   21980:	push	{r4, r5, r6, sl, fp, lr}
   21984:	add	fp, sp, #16
   21988:	mov	r5, r0
   2198c:	add	r0, r1, #1
   21990:	mov	r4, r1
   21994:	bl	22220 <__assert_fail@plt+0x10d08>
   21998:	cmp	r0, #0
   2199c:	beq	219c4 <__assert_fail@plt+0x104ac>
   219a0:	mov	r6, r0
   219a4:	mov	r0, #0
   219a8:	mov	r1, r5
   219ac:	mov	r2, r4
   219b0:	strb	r0, [r6, r4]
   219b4:	mov	r0, r6
   219b8:	bl	112a8 <memcpy@plt>
   219bc:	mov	r0, r6
   219c0:	pop	{r4, r5, r6, sl, fp, pc}
   219c4:	bl	21a08 <__assert_fail@plt+0x104f0>
   219c8:	push	{r4, r5, r6, sl, fp, lr}
   219cc:	add	fp, sp, #16
   219d0:	mov	r4, r0
   219d4:	bl	113e0 <strlen@plt>
   219d8:	add	r5, r0, #1
   219dc:	mov	r0, r5
   219e0:	bl	22220 <__assert_fail@plt+0x10d08>
   219e4:	cmp	r0, #0
   219e8:	beq	21a04 <__assert_fail@plt+0x104ec>
   219ec:	mov	r1, r4
   219f0:	mov	r2, r5
   219f4:	mov	r6, r0
   219f8:	bl	112a8 <memcpy@plt>
   219fc:	mov	r0, r6
   21a00:	pop	{r4, r5, r6, sl, fp, pc}
   21a04:	bl	21a08 <__assert_fail@plt+0x104f0>
   21a08:	push	{fp, lr}
   21a0c:	mov	fp, sp
   21a10:	movw	r0, #16744	; 0x4168
   21a14:	movw	r1, #15049	; 0x3ac9
   21a18:	mov	r2, #5
   21a1c:	movt	r0, #3
   21a20:	movt	r1, #2
   21a24:	ldr	r4, [r0]
   21a28:	mov	r0, #0
   21a2c:	bl	11314 <dcgettext@plt>
   21a30:	movw	r2, #12122	; 0x2f5a
   21a34:	mov	r3, r0
   21a38:	mov	r0, r4
   21a3c:	mov	r1, #0
   21a40:	movt	r2, #2
   21a44:	bl	11380 <error@plt>
   21a48:	bl	114f4 <abort@plt>
   21a4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21a50:	add	fp, sp, #24
   21a54:	sub	sp, sp, #16
   21a58:	mov	r8, r0
   21a5c:	ldr	r0, [fp, #16]
   21a60:	mov	r7, r3
   21a64:	mov	r4, r2
   21a68:	mov	r2, r1
   21a6c:	add	r3, sp, #8
   21a70:	mov	r1, #0
   21a74:	str	r0, [sp]
   21a78:	mov	r0, r8
   21a7c:	bl	21b60 <__assert_fail@plt+0x10648>
   21a80:	cmp	r0, #0
   21a84:	bne	21b34 <__assert_fail@plt+0x1061c>
   21a88:	ldr	r6, [sp, #8]
   21a8c:	ldr	r5, [sp, #12]
   21a90:	subs	r0, r6, r4
   21a94:	sbcs	r0, r5, r7
   21a98:	blt	21abc <__assert_fail@plt+0x105a4>
   21a9c:	ldr	r1, [fp, #8]
   21aa0:	ldr	r0, [fp, #12]
   21aa4:	subs	r1, r1, r6
   21aa8:	sbcs	r0, r0, r5
   21aac:	movge	r0, r6
   21ab0:	movge	r1, r5
   21ab4:	subge	sp, fp, #24
   21ab8:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   21abc:	subs	r0, r6, #1073741824	; 0x40000000
   21ac0:	sbcs	r0, r5, #0
   21ac4:	blt	21ad0 <__assert_fail@plt+0x105b8>
   21ac8:	bl	113f8 <__errno_location@plt>
   21acc:	b	21ae8 <__assert_fail@plt+0x105d0>
   21ad0:	bl	113f8 <__errno_location@plt>
   21ad4:	mvn	r2, #1073741824	; 0x40000000
   21ad8:	mvn	r1, #0
   21adc:	subs	r2, r2, r6
   21ae0:	sbcs	r1, r1, r5
   21ae4:	blt	21af0 <__assert_fail@plt+0x105d8>
   21ae8:	mov	r1, #75	; 0x4b
   21aec:	b	21af4 <__assert_fail@plt+0x105dc>
   21af0:	mov	r1, #34	; 0x22
   21af4:	str	r1, [r0]
   21af8:	ldr	r6, [r0]
   21afc:	ldr	r4, [fp, #24]
   21b00:	ldr	r5, [fp, #20]
   21b04:	mov	r0, r8
   21b08:	bl	144ac <__assert_fail@plt+0x2f94>
   21b0c:	subs	r1, r6, #22
   21b10:	movw	r2, #13435	; 0x347b
   21b14:	str	r0, [sp]
   21b18:	mov	r3, r5
   21b1c:	movne	r1, r6
   21b20:	cmp	r4, #0
   21b24:	movt	r2, #2
   21b28:	movweq	r4, #1
   21b2c:	mov	r0, r4
   21b30:	bl	11380 <error@plt>
   21b34:	cmp	r0, #1
   21b38:	beq	21ac8 <__assert_fail@plt+0x105b0>
   21b3c:	cmp	r0, #3
   21b40:	bne	21b50 <__assert_fail@plt+0x10638>
   21b44:	bl	113f8 <__errno_location@plt>
   21b48:	mov	r1, #0
   21b4c:	b	21af4 <__assert_fail@plt+0x105dc>
   21b50:	bl	113f8 <__errno_location@plt>
   21b54:	b	21af8 <__assert_fail@plt+0x105e0>
   21b58:	mov	r1, #10
   21b5c:	b	21a4c <__assert_fail@plt+0x10534>
   21b60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b64:	add	fp, sp, #28
   21b68:	sub	sp, sp, #28
   21b6c:	cmp	r2, #37	; 0x25
   21b70:	str	r3, [sp, #12]
   21b74:	bcs	22084 <__assert_fail@plt+0x10b6c>
   21b78:	ldr	sl, [fp, #8]
   21b7c:	mov	r4, r2
   21b80:	mov	r6, r1
   21b84:	mov	r5, r0
   21b88:	bl	113f8 <__errno_location@plt>
   21b8c:	add	r8, sp, #24
   21b90:	cmp	r6, #0
   21b94:	mov	r7, r0
   21b98:	mov	r0, #0
   21b9c:	mov	r2, r4
   21ba0:	movne	r8, r6
   21ba4:	str	r0, [r7]
   21ba8:	mov	r0, r5
   21bac:	mov	r1, r8
   21bb0:	bl	11458 <strtoimax@plt>
   21bb4:	str	r1, [sp, #20]
   21bb8:	str	r0, [sp, #16]
   21bbc:	ldr	r4, [r8]
   21bc0:	cmp	r4, r5
   21bc4:	beq	21bf0 <__assert_fail@plt+0x106d8>
   21bc8:	mov	r6, r0
   21bcc:	ldr	r0, [r7]
   21bd0:	mov	r9, r1
   21bd4:	cmp	r0, #0
   21bd8:	beq	21c2c <__assert_fail@plt+0x10714>
   21bdc:	mov	r7, #4
   21be0:	cmp	r0, #34	; 0x22
   21be4:	bne	22078 <__assert_fail@plt+0x10b60>
   21be8:	mov	r7, #1
   21bec:	b	21c30 <__assert_fail@plt+0x10718>
   21bf0:	cmp	sl, #0
   21bf4:	mov	r7, #4
   21bf8:	ldrbne	r1, [r5]
   21bfc:	cmpne	r1, #0
   21c00:	beq	22078 <__assert_fail@plt+0x10b60>
   21c04:	mov	r0, sl
   21c08:	bl	113ec <strchr@plt>
   21c0c:	cmp	r0, #0
   21c10:	beq	22078 <__assert_fail@plt+0x10b60>
   21c14:	mov	r9, #0
   21c18:	mov	r6, #1
   21c1c:	mov	r7, #0
   21c20:	str	r9, [sp, #20]
   21c24:	str	r6, [sp, #16]
   21c28:	b	21c38 <__assert_fail@plt+0x10720>
   21c2c:	mov	r7, r0
   21c30:	cmp	sl, #0
   21c34:	beq	21cdc <__assert_fail@plt+0x107c4>
   21c38:	ldrb	r5, [r4]
   21c3c:	cmp	r5, #0
   21c40:	beq	21ce4 <__assert_fail@plt+0x107cc>
   21c44:	mov	r0, sl
   21c48:	mov	r1, r5
   21c4c:	bl	113ec <strchr@plt>
   21c50:	cmp	r0, #0
   21c54:	beq	21cec <__assert_fail@plt+0x107d4>
   21c58:	sub	r0, r5, #69	; 0x45
   21c5c:	str	r7, [sp, #4]
   21c60:	mov	r1, #1
   21c64:	mov	r7, #1024	; 0x400
   21c68:	cmp	r0, #21
   21c6c:	str	r1, [sp, #8]
   21c70:	bhi	21c88 <__assert_fail@plt+0x10770>
   21c74:	movw	r2, #35141	; 0x8945
   21c78:	mov	r1, #1
   21c7c:	movt	r2, #48	; 0x30
   21c80:	tst	r2, r1, lsl r0
   21c84:	bne	21ca4 <__assert_fail@plt+0x1078c>
   21c88:	sub	r0, r5, #103	; 0x67
   21c8c:	cmp	r0, #13
   21c90:	bhi	21cfc <__assert_fail@plt+0x107e4>
   21c94:	mov	r1, #1
   21c98:	movw	r2, #8273	; 0x2051
   21c9c:	tst	r2, r1, lsl r0
   21ca0:	beq	21cfc <__assert_fail@plt+0x107e4>
   21ca4:	ldr	r0, [fp, #8]
   21ca8:	mov	r1, #48	; 0x30
   21cac:	bl	113ec <strchr@plt>
   21cb0:	cmp	r0, #0
   21cb4:	beq	21cfc <__assert_fail@plt+0x107e4>
   21cb8:	ldrb	r0, [r4, #1]
   21cbc:	ldr	sl, [sp, #12]
   21cc0:	cmp	r0, #66	; 0x42
   21cc4:	cmpne	r0, #68	; 0x44
   21cc8:	bne	21dd0 <__assert_fail@plt+0x108b8>
   21ccc:	mov	r0, #2
   21cd0:	mov	r7, #1000	; 0x3e8
   21cd4:	str	r0, [sp, #8]
   21cd8:	b	21d00 <__assert_fail@plt+0x107e8>
   21cdc:	ldr	r0, [sp, #12]
   21ce0:	b	21cf4 <__assert_fail@plt+0x107dc>
   21ce4:	ldr	sl, [sp, #12]
   21ce8:	b	22074 <__assert_fail@plt+0x10b5c>
   21cec:	ldr	r0, [sp, #12]
   21cf0:	orr	r7, r7, #2
   21cf4:	stm	r0, {r6, r9}
   21cf8:	b	22078 <__assert_fail@plt+0x10b60>
   21cfc:	ldr	sl, [sp, #12]
   21d00:	cmp	r5, #89	; 0x59
   21d04:	bgt	21d6c <__assert_fail@plt+0x10854>
   21d08:	sub	r0, r5, #66	; 0x42
   21d0c:	cmp	r0, #14
   21d10:	bhi	21df0 <__assert_fail@plt+0x108d8>
   21d14:	add	r1, pc, #0
   21d18:	ldr	pc, [r1, r0, lsl #2]
   21d1c:	andeq	r1, r2, r8, asr sp
   21d20:	andeq	r1, r2, r8, lsl #30
   21d24:	andeq	r1, r2, r8, lsl #30
   21d28:	andeq	r1, r2, r8, lsl pc
   21d2c:	andeq	r1, r2, r8, lsl #30
   21d30:	andeq	r1, r2, ip, asr #28
   21d34:	andeq	r1, r2, r8, lsl #30
   21d38:	andeq	r1, r2, r8, lsl #30
   21d3c:	andeq	r1, r2, r8, lsl #30
   21d40:	andeq	r1, r2, r4, ror lr
   21d44:	andeq	r1, r2, r8, lsl #30
   21d48:	andeq	r1, r2, r8, lsl #29
   21d4c:	andeq	r1, r2, r8, lsl #30
   21d50:	andeq	r1, r2, r8, lsl #30
   21d54:	andeq	r1, r2, r0, asr #30
   21d58:	cmn	r9, #1
   21d5c:	ble	21f68 <__assert_fail@plt+0x10a50>
   21d60:	cmp	r9, #2097152	; 0x200000
   21d64:	blt	21f94 <__assert_fail@plt+0x10a7c>
   21d68:	b	22014 <__assert_fail@plt+0x10afc>
   21d6c:	cmp	r5, #115	; 0x73
   21d70:	bgt	21e28 <__assert_fail@plt+0x10910>
   21d74:	sub	r0, r5, #98	; 0x62
   21d78:	cmp	r0, #11
   21d7c:	bhi	21ed8 <__assert_fail@plt+0x109c0>
   21d80:	add	r1, pc, #4
   21d84:	mov	r4, #0
   21d88:	ldr	pc, [r1, r0, lsl #2]
   21d8c:			; <UNDEFINED> instruction: 0x00021dbc
   21d90:	andeq	r2, r2, r8, asr #32
   21d94:	andeq	r1, r2, r8, lsl #30
   21d98:	andeq	r1, r2, r8, lsl #30
   21d9c:	andeq	r1, r2, r8, lsl #30
   21da0:	andeq	r1, r2, ip, asr #28
   21da4:	andeq	r1, r2, r8, lsl #30
   21da8:	andeq	r1, r2, r8, lsl #30
   21dac:	andeq	r1, r2, r8, lsl #30
   21db0:	andeq	r1, r2, r4, ror lr
   21db4:	andeq	r1, r2, r8, lsl #30
   21db8:	andeq	r1, r2, r8, lsl #29
   21dbc:	cmn	r9, #1
   21dc0:	ble	21fa8 <__assert_fail@plt+0x10a90>
   21dc4:	cmp	r9, #4194304	; 0x400000
   21dc8:	blt	21fd4 <__assert_fail@plt+0x10abc>
   21dcc:	b	22014 <__assert_fail@plt+0x10afc>
   21dd0:	cmp	r0, #105	; 0x69
   21dd4:	bne	21d00 <__assert_fail@plt+0x107e8>
   21dd8:	ldrb	r0, [r4, #2]
   21ddc:	mov	r1, #1
   21de0:	cmp	r0, #66	; 0x42
   21de4:	movweq	r1, #3
   21de8:	str	r1, [sp, #8]
   21dec:	b	21d00 <__assert_fail@plt+0x107e8>
   21df0:	cmp	r5, #84	; 0x54
   21df4:	beq	21eb0 <__assert_fail@plt+0x10998>
   21df8:	cmp	r5, #89	; 0x59
   21dfc:	bne	21f08 <__assert_fail@plt+0x109f0>
   21e00:	mov	r4, #0
   21e04:	mvn	r6, #7
   21e08:	add	r5, sp, #16
   21e0c:	mov	r0, r5
   21e10:	mov	r1, r7
   21e14:	bl	220a4 <__assert_fail@plt+0x10b8c>
   21e18:	orr	r4, r0, r4
   21e1c:	adds	r6, r6, #1
   21e20:	bne	21e0c <__assert_fail@plt+0x108f4>
   21e24:	b	22048 <__assert_fail@plt+0x10b30>
   21e28:	cmp	r5, #116	; 0x74
   21e2c:	beq	21eb0 <__assert_fail@plt+0x10998>
   21e30:	cmp	r5, #119	; 0x77
   21e34:	bne	21f08 <__assert_fail@plt+0x109f0>
   21e38:	cmn	r9, #1
   21e3c:	ble	21fe8 <__assert_fail@plt+0x10ad0>
   21e40:	cmp	r9, #1073741824	; 0x40000000
   21e44:	bge	22014 <__assert_fail@plt+0x10afc>
   21e48:	b	22030 <__assert_fail@plt+0x10b18>
   21e4c:	mov	r4, #0
   21e50:	mvn	r6, #2
   21e54:	add	r5, sp, #16
   21e58:	mov	r0, r5
   21e5c:	mov	r1, r7
   21e60:	bl	220a4 <__assert_fail@plt+0x10b8c>
   21e64:	orr	r4, r0, r4
   21e68:	adds	r6, r6, #1
   21e6c:	bne	21e58 <__assert_fail@plt+0x10940>
   21e70:	b	22048 <__assert_fail@plt+0x10b30>
   21e74:	add	r0, sp, #16
   21e78:	mov	r1, r7
   21e7c:	bl	220a4 <__assert_fail@plt+0x10b8c>
   21e80:	mov	r4, r0
   21e84:	b	22048 <__assert_fail@plt+0x10b30>
   21e88:	mov	r4, #0
   21e8c:	mvn	r6, #1
   21e90:	add	r5, sp, #16
   21e94:	mov	r0, r5
   21e98:	mov	r1, r7
   21e9c:	bl	220a4 <__assert_fail@plt+0x10b8c>
   21ea0:	orr	r4, r0, r4
   21ea4:	adds	r6, r6, #1
   21ea8:	bne	21e94 <__assert_fail@plt+0x1097c>
   21eac:	b	22048 <__assert_fail@plt+0x10b30>
   21eb0:	mov	r4, #0
   21eb4:	mvn	r6, #3
   21eb8:	add	r5, sp, #16
   21ebc:	mov	r0, r5
   21ec0:	mov	r1, r7
   21ec4:	bl	220a4 <__assert_fail@plt+0x10b8c>
   21ec8:	orr	r4, r0, r4
   21ecc:	adds	r6, r6, #1
   21ed0:	bne	21ebc <__assert_fail@plt+0x109a4>
   21ed4:	b	22048 <__assert_fail@plt+0x10b30>
   21ed8:	cmp	r5, #90	; 0x5a
   21edc:	bne	21f08 <__assert_fail@plt+0x109f0>
   21ee0:	mov	r4, #0
   21ee4:	mvn	r6, #6
   21ee8:	add	r5, sp, #16
   21eec:	mov	r0, r5
   21ef0:	mov	r1, r7
   21ef4:	bl	220a4 <__assert_fail@plt+0x10b8c>
   21ef8:	orr	r4, r0, r4
   21efc:	adds	r6, r6, #1
   21f00:	bne	21eec <__assert_fail@plt+0x109d4>
   21f04:	b	22048 <__assert_fail@plt+0x10b30>
   21f08:	stm	sl, {r6, r9}
   21f0c:	ldr	r7, [sp, #4]
   21f10:	orr	r7, r7, #2
   21f14:	b	22078 <__assert_fail@plt+0x10b60>
   21f18:	mov	r4, #0
   21f1c:	mvn	r6, #5
   21f20:	add	r5, sp, #16
   21f24:	mov	r0, r5
   21f28:	mov	r1, r7
   21f2c:	bl	220a4 <__assert_fail@plt+0x10b8c>
   21f30:	orr	r4, r0, r4
   21f34:	adds	r6, r6, #1
   21f38:	bne	21f24 <__assert_fail@plt+0x10a0c>
   21f3c:	b	22048 <__assert_fail@plt+0x10b30>
   21f40:	mov	r4, #0
   21f44:	mvn	r6, #4
   21f48:	add	r5, sp, #16
   21f4c:	mov	r0, r5
   21f50:	mov	r1, r7
   21f54:	bl	220a4 <__assert_fail@plt+0x10b8c>
   21f58:	orr	r4, r0, r4
   21f5c:	adds	r6, r6, #1
   21f60:	bne	21f4c <__assert_fail@plt+0x10a34>
   21f64:	b	22048 <__assert_fail@plt+0x10b30>
   21f68:	and	r0, r6, r9
   21f6c:	cmn	r0, #1
   21f70:	beq	21f94 <__assert_fail@plt+0x10a7c>
   21f74:	mov	r0, #0
   21f78:	mov	r1, #-2147483648	; 0x80000000
   21f7c:	mov	r2, r6
   21f80:	mov	r3, r9
   21f84:	bl	225d0 <__assert_fail@plt+0x110b8>
   21f88:	subs	r0, r0, #1024	; 0x400
   21f8c:	sbcs	r0, r1, #0
   21f90:	blt	22014 <__assert_fail@plt+0x10afc>
   21f94:	lsl	r0, r9, #10
   21f98:	lsl	r1, r6, #10
   21f9c:	mov	r4, #0
   21fa0:	orr	r0, r0, r6, lsr #22
   21fa4:	b	22040 <__assert_fail@plt+0x10b28>
   21fa8:	and	r0, r6, r9
   21fac:	cmn	r0, #1
   21fb0:	beq	21fd4 <__assert_fail@plt+0x10abc>
   21fb4:	mov	r0, #0
   21fb8:	mov	r1, #-2147483648	; 0x80000000
   21fbc:	mov	r2, r6
   21fc0:	mov	r3, r9
   21fc4:	bl	225d0 <__assert_fail@plt+0x110b8>
   21fc8:	subs	r0, r0, #512	; 0x200
   21fcc:	sbcs	r0, r1, #0
   21fd0:	blt	22014 <__assert_fail@plt+0x10afc>
   21fd4:	lsl	r0, r9, #9
   21fd8:	lsl	r1, r6, #9
   21fdc:	mov	r4, #0
   21fe0:	orr	r0, r0, r6, lsr #23
   21fe4:	b	22040 <__assert_fail@plt+0x10b28>
   21fe8:	and	r0, r6, r9
   21fec:	cmn	r0, #1
   21ff0:	beq	22030 <__assert_fail@plt+0x10b18>
   21ff4:	mov	r0, #0
   21ff8:	mov	r1, #-2147483648	; 0x80000000
   21ffc:	mov	r2, r6
   22000:	mov	r3, r9
   22004:	bl	225d0 <__assert_fail@plt+0x110b8>
   22008:	subs	r0, r0, #2
   2200c:	sbcs	r0, r1, #0
   22010:	bge	22030 <__assert_fail@plt+0x10b18>
   22014:	mvn	r0, #-2147483648	; 0x80000000
   22018:	cmp	r9, #0
   2201c:	mvn	r1, #0
   22020:	mov	r4, #1
   22024:	movlt	r0, #-2147483648	; 0x80000000
   22028:	movwlt	r1, #0
   2202c:	b	22040 <__assert_fail@plt+0x10b28>
   22030:	lsl	r0, r9, #1
   22034:	lsl	r1, r6, #1
   22038:	mov	r4, #0
   2203c:	orr	r0, r0, r6, lsr #31
   22040:	str	r1, [sp, #16]
   22044:	str	r0, [sp, #20]
   22048:	ldr	r0, [r8]
   2204c:	ldr	r2, [sp, #8]
   22050:	ldr	r7, [sp, #4]
   22054:	add	r1, r0, r2
   22058:	orr	r7, r4, r7
   2205c:	str	r1, [r8]
   22060:	ldrb	r0, [r0, r2]
   22064:	ldr	r6, [sp, #16]
   22068:	ldr	r9, [sp, #20]
   2206c:	cmp	r0, #0
   22070:	orrne	r7, r7, #2
   22074:	stm	sl, {r6, r9}
   22078:	mov	r0, r7
   2207c:	sub	sp, fp, #28
   22080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22084:	movw	r0, #15066	; 0x3ada
   22088:	movw	r1, #15104	; 0x3b00
   2208c:	movw	r3, #15120	; 0x3b10
   22090:	mov	r2, #85	; 0x55
   22094:	movt	r0, #2
   22098:	movt	r1, #2
   2209c:	movt	r3, #2
   220a0:	bl	11518 <__assert_fail@plt>
   220a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   220a8:	add	fp, sp, #24
   220ac:	mov	r5, r1
   220b0:	mov	r4, r0
   220b4:	cmn	r1, #1
   220b8:	ble	220f0 <__assert_fail@plt+0x10bd8>
   220bc:	ldrd	r8, [r4]
   220c0:	cmp	r5, #0
   220c4:	beq	22128 <__assert_fail@plt+0x10c10>
   220c8:	cmn	r9, #1
   220cc:	ble	22134 <__assert_fail@plt+0x10c1c>
   220d0:	asr	r3, r5, #31
   220d4:	mvn	r0, #0
   220d8:	mvn	r1, #-2147483648	; 0x80000000
   220dc:	mov	r2, r5
   220e0:	bl	225d0 <__assert_fail@plt+0x110b8>
   220e4:	subs	r0, r0, r8
   220e8:	sbcs	r0, r1, r9
   220ec:	b	22164 <__assert_fail@plt+0x10c4c>
   220f0:	ldrd	r6, [r4]
   220f4:	cmn	r7, #1
   220f8:	ble	2218c <__assert_fail@plt+0x10c74>
   220fc:	cmn	r5, #1
   22100:	beq	221ac <__assert_fail@plt+0x10c94>
   22104:	asr	r3, r5, #31
   22108:	mov	r0, #0
   2210c:	mov	r1, #-2147483648	; 0x80000000
   22110:	mov	r2, r5
   22114:	bl	225d0 <__assert_fail@plt+0x110b8>
   22118:	subs	r0, r0, r6
   2211c:	sbcs	r0, r1, r7
   22120:	blt	22170 <__assert_fail@plt+0x10c58>
   22124:	b	221ac <__assert_fail@plt+0x10c94>
   22128:	mov	r6, r8
   2212c:	mov	r7, r9
   22130:	b	221ac <__assert_fail@plt+0x10c94>
   22134:	and	r0, r8, r9
   22138:	mvn	r6, #0
   2213c:	mvn	r7, #0
   22140:	cmn	r0, #1
   22144:	beq	221ac <__assert_fail@plt+0x10c94>
   22148:	mov	r0, #0
   2214c:	mov	r1, #-2147483648	; 0x80000000
   22150:	mov	r2, r8
   22154:	mov	r3, r9
   22158:	bl	225d0 <__assert_fail@plt+0x110b8>
   2215c:	subs	r0, r0, r5
   22160:	sbcs	r0, r1, r5, asr #31
   22164:	mov	r7, r9
   22168:	mov	r6, r8
   2216c:	bge	221ac <__assert_fail@plt+0x10c94>
   22170:	mvn	r1, #-2147483648	; 0x80000000
   22174:	cmp	r7, #0
   22178:	mvn	r2, #0
   2217c:	mov	r0, #1
   22180:	movlt	r1, #-2147483648	; 0x80000000
   22184:	movwlt	r2, #0
   22188:	b	221c0 <__assert_fail@plt+0x10ca8>
   2218c:	asr	r3, r5, #31
   22190:	mvn	r0, #0
   22194:	mvn	r1, #-2147483648	; 0x80000000
   22198:	mov	r2, r5
   2219c:	bl	225d0 <__assert_fail@plt+0x110b8>
   221a0:	subs	r0, r6, r0
   221a4:	sbcs	r0, r7, r1
   221a8:	blt	22170 <__assert_fail@plt+0x10c58>
   221ac:	umull	r2, r0, r6, r5
   221b0:	asr	r1, r5, #31
   221b4:	mla	r0, r6, r1, r0
   221b8:	mla	r1, r7, r5, r0
   221bc:	mov	r0, #0
   221c0:	str	r2, [r4]
   221c4:	str	r1, [r4, #4]
   221c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   221cc:	clz	r2, r1
   221d0:	clz	r3, r0
   221d4:	lsr	r2, r2, #5
   221d8:	lsr	r3, r3, #5
   221dc:	orrs	r2, r3, r2
   221e0:	movwne	r1, #1
   221e4:	movwne	r0, #1
   221e8:	cmp	r1, #0
   221ec:	beq	2221c <__assert_fail@plt+0x10d04>
   221f0:	mvn	r2, #-2147483648	; 0x80000000
   221f4:	udiv	r2, r2, r1
   221f8:	cmp	r2, r0
   221fc:	bcs	2221c <__assert_fail@plt+0x10d04>
   22200:	push	{fp, lr}
   22204:	mov	fp, sp
   22208:	bl	113f8 <__errno_location@plt>
   2220c:	mov	r1, #12
   22210:	str	r1, [r0]
   22214:	mov	r0, #0
   22218:	pop	{fp, pc}
   2221c:	b	11200 <calloc@plt>
   22220:	cmp	r0, #0
   22224:	movweq	r0, #1
   22228:	cmn	r0, #1
   2222c:	ble	22234 <__assert_fail@plt+0x10d1c>
   22230:	b	1138c <malloc@plt>
   22234:	push	{fp, lr}
   22238:	mov	fp, sp
   2223c:	bl	113f8 <__errno_location@plt>
   22240:	mov	r1, #12
   22244:	str	r1, [r0]
   22248:	mov	r0, #0
   2224c:	pop	{fp, pc}
   22250:	push	{fp, lr}
   22254:	mov	fp, sp
   22258:	cmp	r0, #0
   2225c:	beq	22278 <__assert_fail@plt+0x10d60>
   22260:	cmp	r1, #0
   22264:	beq	22284 <__assert_fail@plt+0x10d6c>
   22268:	cmn	r1, #1
   2226c:	ble	2228c <__assert_fail@plt+0x10d74>
   22270:	pop	{fp, lr}
   22274:	b	11320 <realloc@plt>
   22278:	mov	r0, r1
   2227c:	pop	{fp, lr}
   22280:	b	22220 <__assert_fail@plt+0x10d08>
   22284:	bl	223dc <__assert_fail@plt+0x10ec4>
   22288:	b	22298 <__assert_fail@plt+0x10d80>
   2228c:	bl	113f8 <__errno_location@plt>
   22290:	mov	r1, #12
   22294:	str	r1, [r0]
   22298:	mov	r0, #0
   2229c:	pop	{fp, pc}
   222a0:	push	{r4, r5, r6, sl, fp, lr}
   222a4:	add	fp, sp, #16
   222a8:	mov	r4, r0
   222ac:	bl	1135c <__fpending@plt>
   222b0:	mov	r5, r0
   222b4:	mov	r0, r4
   222b8:	bl	11368 <ferror_unlocked@plt>
   222bc:	mov	r6, r0
   222c0:	mov	r0, r4
   222c4:	bl	12810 <__assert_fail@plt+0x12f8>
   222c8:	cmp	r6, #0
   222cc:	beq	222ec <__assert_fail@plt+0x10dd4>
   222d0:	mvn	r4, #0
   222d4:	cmp	r0, #0
   222d8:	bne	22318 <__assert_fail@plt+0x10e00>
   222dc:	bl	113f8 <__errno_location@plt>
   222e0:	mov	r1, #0
   222e4:	str	r1, [r0]
   222e8:	b	22318 <__assert_fail@plt+0x10e00>
   222ec:	cmp	r0, #0
   222f0:	mov	r4, r0
   222f4:	mvnne	r4, #0
   222f8:	cmp	r5, #0
   222fc:	bne	22318 <__assert_fail@plt+0x10e00>
   22300:	cmp	r0, #0
   22304:	beq	22318 <__assert_fail@plt+0x10e00>
   22308:	bl	113f8 <__errno_location@plt>
   2230c:	ldr	r0, [r0]
   22310:	subs	r4, r0, #9
   22314:	mvnne	r4, #0
   22318:	mov	r0, r4
   2231c:	pop	{r4, r5, r6, sl, fp, pc}
   22320:	push	{r4, r5, r6, r7, fp, lr}
   22324:	add	fp, sp, #16
   22328:	mov	r4, r0
   2232c:	ldr	r0, [r0, #4]
   22330:	mov	r5, r1
   22334:	cmp	r0, r1
   22338:	bcs	22368 <__assert_fail@plt+0x10e50>
   2233c:	mov	r6, r3
   22340:	cmp	r3, #0
   22344:	beq	22370 <__assert_fail@plt+0x10e58>
   22348:	mvn	r0, #0
   2234c:	udiv	r0, r0, r6
   22350:	cmp	r0, r5
   22354:	bcs	22370 <__assert_fail@plt+0x10e58>
   22358:	bl	113f8 <__errno_location@plt>
   2235c:	mov	r1, #12
   22360:	str	r1, [r0]
   22364:	b	223d4 <__assert_fail@plt+0x10ebc>
   22368:	str	r5, [r4]
   2236c:	b	223cc <__assert_fail@plt+0x10eb4>
   22370:	ldr	r0, [r4, #8]
   22374:	mul	r1, r6, r5
   22378:	cmp	r0, r2
   2237c:	beq	22394 <__assert_fail@plt+0x10e7c>
   22380:	bl	22250 <__assert_fail@plt+0x10d38>
   22384:	mov	r7, r0
   22388:	cmp	r0, #0
   2238c:	bne	223c4 <__assert_fail@plt+0x10eac>
   22390:	b	223d4 <__assert_fail@plt+0x10ebc>
   22394:	mov	r0, r1
   22398:	bl	22220 <__assert_fail@plt+0x10d08>
   2239c:	cmp	r0, #0
   223a0:	beq	223d4 <__assert_fail@plt+0x10ebc>
   223a4:	ldr	r1, [r4, #8]
   223a8:	mov	r7, r0
   223ac:	cmp	r1, #0
   223b0:	beq	223c4 <__assert_fail@plt+0x10eac>
   223b4:	ldr	r0, [r4]
   223b8:	mul	r2, r0, r6
   223bc:	mov	r0, r7
   223c0:	bl	112a8 <memcpy@plt>
   223c4:	str	r5, [r4]
   223c8:	stmib	r4, {r5, r7}
   223cc:	mov	r0, #1
   223d0:	pop	{r4, r5, r6, r7, fp, pc}
   223d4:	mov	r0, #0
   223d8:	pop	{r4, r5, r6, r7, fp, pc}
   223dc:	push	{r4, r5, r6, sl, fp, lr}
   223e0:	add	fp, sp, #16
   223e4:	mov	r4, r0
   223e8:	bl	113f8 <__errno_location@plt>
   223ec:	ldr	r6, [r0]
   223f0:	mov	r5, r0
   223f4:	mov	r0, r4
   223f8:	bl	11284 <free@plt>
   223fc:	str	r6, [r5]
   22400:	pop	{r4, r5, r6, sl, fp, pc}
   22404:	push	{fp, lr}
   22408:	mov	fp, sp
   2240c:	mov	r0, #14
   22410:	bl	114a0 <nl_langinfo@plt>
   22414:	movw	r1, #13038	; 0x32ee
   22418:	cmp	r0, #0
   2241c:	movt	r1, #2
   22420:	movne	r1, r0
   22424:	movw	r0, #15198	; 0x3b5e
   22428:	ldrb	r2, [r1]
   2242c:	movt	r0, #2
   22430:	cmp	r2, #0
   22434:	movne	r0, r1
   22438:	pop	{fp, pc}
   2243c:	push	{r4, r5, r6, r7, fp, lr}
   22440:	add	fp, sp, #16
   22444:	sub	sp, sp, #8
   22448:	add	r5, sp, #4
   2244c:	cmp	r0, #0
   22450:	mov	r7, r2
   22454:	mov	r4, r1
   22458:	movne	r5, r0
   2245c:	mov	r0, r5
   22460:	bl	11374 <mbrtowc@plt>
   22464:	mov	r6, r0
   22468:	cmp	r7, #0
   2246c:	beq	22490 <__assert_fail@plt+0x10f78>
   22470:	cmn	r6, #2
   22474:	bcc	22490 <__assert_fail@plt+0x10f78>
   22478:	mov	r0, #0
   2247c:	bl	224d8 <__assert_fail@plt+0x10fc0>
   22480:	cmp	r0, #0
   22484:	ldrbeq	r0, [r4]
   22488:	moveq	r6, #1
   2248c:	streq	r0, [r5]
   22490:	mov	r0, r6
   22494:	sub	sp, fp, #16
   22498:	pop	{r4, r5, r6, r7, fp, pc}
   2249c:	cmp	r2, #0
   224a0:	beq	224d0 <__assert_fail@plt+0x10fb8>
   224a4:	mvn	r3, #0
   224a8:	udiv	r3, r3, r2
   224ac:	cmp	r3, r1
   224b0:	bcs	224d0 <__assert_fail@plt+0x10fb8>
   224b4:	push	{fp, lr}
   224b8:	mov	fp, sp
   224bc:	bl	113f8 <__errno_location@plt>
   224c0:	mov	r1, #12
   224c4:	str	r1, [r0]
   224c8:	mov	r0, #0
   224cc:	pop	{fp, pc}
   224d0:	mul	r1, r2, r1
   224d4:	b	22250 <__assert_fail@plt+0x10d38>
   224d8:	push	{r4, sl, fp, lr}
   224dc:	add	fp, sp, #8
   224e0:	sub	sp, sp, #264	; 0x108
   224e4:	add	r1, sp, #7
   224e8:	movw	r2, #257	; 0x101
   224ec:	bl	2253c <__assert_fail@plt+0x11024>
   224f0:	mov	r4, #0
   224f4:	cmp	r0, #0
   224f8:	bne	22530 <__assert_fail@plt+0x11018>
   224fc:	movw	r1, #15204	; 0x3b64
   22500:	add	r0, sp, #7
   22504:	movt	r1, #2
   22508:	bl	11248 <strcmp@plt>
   2250c:	cmp	r0, #0
   22510:	beq	22530 <__assert_fail@plt+0x11018>
   22514:	movw	r1, #15206	; 0x3b66
   22518:	add	r0, sp, #7
   2251c:	movt	r1, #2
   22520:	bl	11248 <strcmp@plt>
   22524:	mov	r4, r0
   22528:	cmp	r0, #0
   2252c:	movwne	r4, #1
   22530:	mov	r0, r4
   22534:	sub	sp, fp, #8
   22538:	pop	{r4, sl, fp, pc}
   2253c:	push	{r4, r5, r6, r7, fp, lr}
   22540:	add	fp, sp, #16
   22544:	mov	r4, r1
   22548:	mov	r1, #0
   2254c:	mov	r6, r2
   22550:	bl	1147c <setlocale@plt>
   22554:	cmp	r0, #0
   22558:	beq	22584 <__assert_fail@plt+0x1106c>
   2255c:	mov	r7, r0
   22560:	bl	113e0 <strlen@plt>
   22564:	cmp	r0, r6
   22568:	bcs	22598 <__assert_fail@plt+0x11080>
   2256c:	add	r2, r0, #1
   22570:	mov	r0, r4
   22574:	mov	r1, r7
   22578:	bl	112a8 <memcpy@plt>
   2257c:	mov	r5, #0
   22580:	b	225c0 <__assert_fail@plt+0x110a8>
   22584:	cmp	r6, #0
   22588:	mov	r5, #22
   2258c:	movne	r0, #0
   22590:	strbne	r0, [r4]
   22594:	b	225c0 <__assert_fail@plt+0x110a8>
   22598:	mov	r5, #34	; 0x22
   2259c:	cmp	r6, #0
   225a0:	beq	225c0 <__assert_fail@plt+0x110a8>
   225a4:	sub	r6, r6, #1
   225a8:	mov	r0, r4
   225ac:	mov	r1, r7
   225b0:	mov	r2, r6
   225b4:	bl	112a8 <memcpy@plt>
   225b8:	mov	r0, #0
   225bc:	strb	r0, [r4, r6]
   225c0:	mov	r0, r5
   225c4:	pop	{r4, r5, r6, r7, fp, pc}
   225c8:	mov	r1, #0
   225cc:	b	1147c <setlocale@plt>
   225d0:	cmp	r3, #0
   225d4:	cmpeq	r2, #0
   225d8:	bne	225fc <__assert_fail@plt+0x110e4>
   225dc:	cmp	r1, #0
   225e0:	movlt	r1, #-2147483648	; 0x80000000
   225e4:	movlt	r0, #0
   225e8:	blt	225f8 <__assert_fail@plt+0x110e0>
   225ec:	cmpeq	r0, #0
   225f0:	mvnne	r1, #-2147483648	; 0x80000000
   225f4:	mvnne	r0, #0
   225f8:	b	226a4 <__assert_fail@plt+0x1118c>
   225fc:	sub	sp, sp, #8
   22600:	push	{sp, lr}
   22604:	cmp	r1, #0
   22608:	blt	22628 <__assert_fail@plt+0x11110>
   2260c:	cmp	r3, #0
   22610:	blt	2265c <__assert_fail@plt+0x11144>
   22614:	bl	226b4 <__assert_fail@plt+0x1119c>
   22618:	ldr	lr, [sp, #4]
   2261c:	add	sp, sp, #8
   22620:	pop	{r2, r3}
   22624:	bx	lr
   22628:	rsbs	r0, r0, #0
   2262c:	sbc	r1, r1, r1, lsl #1
   22630:	cmp	r3, #0
   22634:	blt	22680 <__assert_fail@plt+0x11168>
   22638:	bl	226b4 <__assert_fail@plt+0x1119c>
   2263c:	ldr	lr, [sp, #4]
   22640:	add	sp, sp, #8
   22644:	pop	{r2, r3}
   22648:	rsbs	r0, r0, #0
   2264c:	sbc	r1, r1, r1, lsl #1
   22650:	rsbs	r2, r2, #0
   22654:	sbc	r3, r3, r3, lsl #1
   22658:	bx	lr
   2265c:	rsbs	r2, r2, #0
   22660:	sbc	r3, r3, r3, lsl #1
   22664:	bl	226b4 <__assert_fail@plt+0x1119c>
   22668:	ldr	lr, [sp, #4]
   2266c:	add	sp, sp, #8
   22670:	pop	{r2, r3}
   22674:	rsbs	r0, r0, #0
   22678:	sbc	r1, r1, r1, lsl #1
   2267c:	bx	lr
   22680:	rsbs	r2, r2, #0
   22684:	sbc	r3, r3, r3, lsl #1
   22688:	bl	226b4 <__assert_fail@plt+0x1119c>
   2268c:	ldr	lr, [sp, #4]
   22690:	add	sp, sp, #8
   22694:	pop	{r2, r3}
   22698:	rsbs	r2, r2, #0
   2269c:	sbc	r3, r3, r3, lsl #1
   226a0:	bx	lr
   226a4:	push	{r1, lr}
   226a8:	mov	r0, #8
   226ac:	bl	11224 <raise@plt>
   226b0:	pop	{r1, pc}
   226b4:	cmp	r1, r3
   226b8:	cmpeq	r0, r2
   226bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   226c0:	mov	r4, r0
   226c4:	movcc	r0, #0
   226c8:	mov	r5, r1
   226cc:	ldr	lr, [sp, #36]	; 0x24
   226d0:	movcc	r1, r0
   226d4:	bcc	227d0 <__assert_fail@plt+0x112b8>
   226d8:	cmp	r3, #0
   226dc:	clzeq	ip, r2
   226e0:	clzne	ip, r3
   226e4:	addeq	ip, ip, #32
   226e8:	cmp	r5, #0
   226ec:	clzeq	r1, r4
   226f0:	addeq	r1, r1, #32
   226f4:	clzne	r1, r5
   226f8:	sub	ip, ip, r1
   226fc:	sub	sl, ip, #32
   22700:	lsl	r9, r3, ip
   22704:	rsb	fp, ip, #32
   22708:	orr	r9, r9, r2, lsl sl
   2270c:	orr	r9, r9, r2, lsr fp
   22710:	lsl	r8, r2, ip
   22714:	cmp	r5, r9
   22718:	cmpeq	r4, r8
   2271c:	movcc	r0, #0
   22720:	movcc	r1, r0
   22724:	bcc	22740 <__assert_fail@plt+0x11228>
   22728:	mov	r0, #1
   2272c:	subs	r4, r4, r8
   22730:	lsl	r1, r0, sl
   22734:	orr	r1, r1, r0, lsr fp
   22738:	lsl	r0, r0, ip
   2273c:	sbc	r5, r5, r9
   22740:	cmp	ip, #0
   22744:	beq	227d0 <__assert_fail@plt+0x112b8>
   22748:	lsr	r6, r8, #1
   2274c:	orr	r6, r6, r9, lsl #31
   22750:	lsr	r7, r9, #1
   22754:	mov	r2, ip
   22758:	b	2277c <__assert_fail@plt+0x11264>
   2275c:	subs	r3, r4, r6
   22760:	sbc	r8, r5, r7
   22764:	adds	r3, r3, r3
   22768:	adc	r8, r8, r8
   2276c:	adds	r4, r3, #1
   22770:	adc	r5, r8, #0
   22774:	subs	r2, r2, #1
   22778:	beq	22798 <__assert_fail@plt+0x11280>
   2277c:	cmp	r5, r7
   22780:	cmpeq	r4, r6
   22784:	bcs	2275c <__assert_fail@plt+0x11244>
   22788:	adds	r4, r4, r4
   2278c:	adc	r5, r5, r5
   22790:	subs	r2, r2, #1
   22794:	bne	2277c <__assert_fail@plt+0x11264>
   22798:	lsr	r3, r4, ip
   2279c:	orr	r3, r3, r5, lsl fp
   227a0:	lsr	r2, r5, ip
   227a4:	orr	r3, r3, r5, lsr sl
   227a8:	adds	r0, r0, r4
   227ac:	mov	r4, r3
   227b0:	lsl	r3, r2, ip
   227b4:	orr	r3, r3, r4, lsl sl
   227b8:	lsl	ip, r4, ip
   227bc:	orr	r3, r3, r4, lsr fp
   227c0:	adc	r1, r1, r5
   227c4:	subs	r0, r0, ip
   227c8:	mov	r5, r2
   227cc:	sbc	r1, r1, r3
   227d0:	cmp	lr, #0
   227d4:	strdne	r4, [lr]
   227d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   227dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   227e0:	mov	r7, r0
   227e4:	ldr	r6, [pc, #72]	; 22834 <__assert_fail@plt+0x1131c>
   227e8:	ldr	r5, [pc, #72]	; 22838 <__assert_fail@plt+0x11320>
   227ec:	add	r6, pc, r6
   227f0:	add	r5, pc, r5
   227f4:	sub	r6, r6, r5
   227f8:	mov	r8, r1
   227fc:	mov	r9, r2
   22800:	bl	111d4 <pthread_mutex_unlock@plt-0x20>
   22804:	asrs	r6, r6, #2
   22808:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2280c:	mov	r4, #0
   22810:	add	r4, r4, #1
   22814:	ldr	r3, [r5], #4
   22818:	mov	r2, r9
   2281c:	mov	r1, r8
   22820:	mov	r0, r7
   22824:	blx	r3
   22828:	cmp	r6, r4
   2282c:	bne	22810 <__assert_fail@plt+0x112f8>
   22830:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22834:	andeq	r1, r1, r8, lsl r7
   22838:	andeq	r1, r1, r0, lsl r7
   2283c:	bx	lr
   22840:	ldr	r3, [pc, #12]	; 22854 <__assert_fail@plt+0x1133c>
   22844:	mov	r1, #0
   22848:	add	r3, pc, r3
   2284c:	ldr	r2, [r3]
   22850:	b	11410 <__cxa_atexit@plt>
   22854:	ldrdeq	r1, [r1], -r4

Disassembly of section .fini:

00022858 <.fini>:
   22858:	push	{r3, lr}
   2285c:	pop	{r3, pc}
