
../repos/Snaipe-Mimick-1dc4659/sample/strdup/strdup_test:     file format elf32-littlearm


Disassembly of section .init:

00011188 <.init>:
   11188:	push	{r3, lr}
   1118c:	bl	112ec <_start@@Base+0x3c>
   11190:	pop	{r3, pc}

Disassembly of section .plt:

00011194 <strstr@plt-0x14>:
   11194:	push	{lr}		; (str lr, [sp, #-4]!)
   11198:	ldr	lr, [pc, #4]	; 111a4 <strstr@plt-0x4>
   1119c:	add	lr, pc, lr
   111a0:	ldr	pc, [lr, #8]!
   111a4:	andeq	r2, r1, ip, asr lr

000111a8 <strstr@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #73728	; 0x12000
   111b0:	ldr	pc, [ip, #3676]!	; 0xe5c

000111b4 <raise@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #73728	; 0x12000
   111bc:	ldr	pc, [ip, #3668]!	; 0xe54

000111c0 <strcmp@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #73728	; 0x12000
   111c8:	ldr	pc, [ip, #3660]!	; 0xe4c

000111cc <mprotect@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #73728	; 0x12000
   111d4:	ldr	pc, [ip, #3652]!	; 0xe44

000111d8 <free@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #73728	; 0x12000
   111e0:	ldr	pc, [ip, #3644]!	; 0xe3c

000111e4 <memcpy@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #73728	; 0x12000
   111ec:	ldr	pc, [ip, #3636]!	; 0xe34

000111f0 <realloc@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #73728	; 0x12000
   111f8:	ldr	pc, [ip, #3628]!	; 0xe2c

000111fc <malloc@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #73728	; 0x12000
   11204:	ldr	pc, [ip, #3620]!	; 0xe24

00011208 <__libc_start_main@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #73728	; 0x12000
   11210:	ldr	pc, [ip, #3612]!	; 0xe1c

00011214 <__gmon_start__@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #73728	; 0x12000
   1121c:	ldr	pc, [ip, #3604]!	; 0xe14

00011220 <strlen@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #73728	; 0x12000
   11228:	ldr	pc, [ip, #3596]!	; 0xe0c

0001122c <mmap@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #73728	; 0x12000
   11234:	ldr	pc, [ip, #3588]!	; 0xe04

00011238 <strchr@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #73728	; 0x12000
   11240:	ldr	pc, [ip, #3580]!	; 0xdfc

00011244 <fprintf@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #73728	; 0x12000
   1124c:	ldr	pc, [ip, #3572]!	; 0xdf4

00011250 <__errno_location@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #73728	; 0x12000
   11258:	ldr	pc, [ip, #3564]!	; 0xdec

0001125c <snprintf@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #73728	; 0x12000
   11264:	ldr	pc, [ip, #3556]!	; 0xde4

00011268 <memset@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #73728	; 0x12000
   11270:	ldr	pc, [ip, #3548]!	; 0xddc

00011274 <munmap@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #73728	; 0x12000
   1127c:	ldr	pc, [ip, #3540]!	; 0xdd4

00011280 <my_strdup@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #73728	; 0x12000
   11288:	ldr	pc, [ip, #3532]!	; 0xdcc

0001128c <strncmp@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #73728	; 0x12000
   11294:	ldr	pc, [ip, #3524]!	; 0xdc4

00011298 <abort@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #73728	; 0x12000
   112a0:	ldr	pc, [ip, #3516]!	; 0xdbc

Disassembly of section .text:

000112b0 <_start@@Base>:
   112b0:	mov	fp, #0
   112b4:	mov	lr, #0
   112b8:	pop	{r1}		; (ldr r1, [sp], #4)
   112bc:	mov	r2, sp
   112c0:	push	{r2}		; (str r2, [sp, #-4]!)
   112c4:	push	{r0}		; (str r0, [sp, #-4]!)
   112c8:	ldr	ip, [pc, #16]	; 112e0 <_start@@Base+0x30>
   112cc:	push	{ip}		; (str ip, [sp, #-4]!)
   112d0:	ldr	r0, [pc, #12]	; 112e4 <_start@@Base+0x34>
   112d4:	ldr	r3, [pc, #12]	; 112e8 <_start@@Base+0x38>
   112d8:	bl	11208 <__libc_start_main@plt>
   112dc:	bl	11298 <abort@plt>
   112e0:	andeq	r3, r1, r4, asr #10
   112e4:	andeq	r1, r1, r4, ror fp
   112e8:	andeq	r3, r1, r4, ror #9
   112ec:	ldr	r3, [pc, #20]	; 11308 <_start@@Base+0x58>
   112f0:	ldr	r2, [pc, #20]	; 1130c <_start@@Base+0x5c>
   112f4:	add	r3, pc, r3
   112f8:	ldr	r2, [r3, r2]
   112fc:	cmp	r2, #0
   11300:	bxeq	lr
   11304:	b	11214 <__gmon_start__@plt>
   11308:	andeq	r2, r1, r4, lsl #26
   1130c:	andeq	r0, r0, r0, rrx
   11310:	ldr	r3, [pc, #28]	; 11334 <_start@@Base+0x84>
   11314:	ldr	r0, [pc, #28]	; 11338 <_start@@Base+0x88>
   11318:	sub	r3, r3, r0
   1131c:	cmp	r3, #6
   11320:	bxls	lr
   11324:	ldr	r3, [pc, #16]	; 1133c <_start@@Base+0x8c>
   11328:	cmp	r3, #0
   1132c:	bxeq	lr
   11330:	bx	r3
   11334:	andeq	r4, r2, fp, ror r0
   11338:	andeq	r4, r2, r8, ror r0
   1133c:	andeq	r0, r0, r0
   11340:	ldr	r1, [pc, #36]	; 1136c <_start@@Base+0xbc>
   11344:	ldr	r0, [pc, #36]	; 11370 <_start@@Base+0xc0>
   11348:	sub	r1, r1, r0
   1134c:	asr	r1, r1, #2
   11350:	add	r1, r1, r1, lsr #31
   11354:	asrs	r1, r1, #1
   11358:	bxeq	lr
   1135c:	ldr	r3, [pc, #16]	; 11374 <_start@@Base+0xc4>
   11360:	cmp	r3, #0
   11364:	bxeq	lr
   11368:	bx	r3
   1136c:	andeq	r4, r2, r8, ror r0
   11370:	andeq	r4, r2, r8, ror r0
   11374:	andeq	r0, r0, r0
   11378:	push	{r4, lr}
   1137c:	ldr	r4, [pc, #24]	; 1139c <_start@@Base+0xec>
   11380:	ldrb	r3, [r4]
   11384:	cmp	r3, #0
   11388:	popne	{r4, pc}
   1138c:	bl	11310 <_start@@Base+0x60>
   11390:	mov	r3, #1
   11394:	strb	r3, [r4]
   11398:	pop	{r4, pc}
   1139c:	muleq	r2, r0, r0
   113a0:	ldr	r0, [pc, #40]	; 113d0 <_start@@Base+0x120>
   113a4:	ldr	r3, [r0]
   113a8:	cmp	r3, #0
   113ac:	bne	113b4 <_start@@Base+0x104>
   113b0:	b	11340 <_start@@Base+0x90>
   113b4:	ldr	r3, [pc, #24]	; 113d4 <_start@@Base+0x124>
   113b8:	cmp	r3, #0
   113bc:	beq	113b0 <_start@@Base+0x100>
   113c0:	push	{r4, lr}
   113c4:	blx	r3
   113c8:	pop	{r4, lr}
   113cc:	b	11340 <_start@@Base+0x90>
   113d0:	strdeq	r3, [r2], -ip
   113d4:	andeq	r0, r0, r0
   113d8:	push	{fp, lr}
   113dc:	add	fp, sp, #4
   113e0:	sub	sp, sp, #96	; 0x60
   113e4:	str	r0, [fp, #-96]	; 0xffffffa0
   113e8:	bl	11d38 <mmk_matcher_ctx@@Base>
   113ec:	str	r0, [fp, #-24]	; 0xffffffe8
   113f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   113f4:	cmp	r3, #0
   113f8:	beq	1164c <_start@@Base+0x39c>
   113fc:	bl	129d8 <mmk_ctx@@Base>
   11400:	mov	r3, r0
   11404:	mov	r0, r3
   11408:	bl	12610 <mmk_stub_context@@Base>
   1140c:	str	r0, [fp, #-28]	; 0xffffffe4
   11410:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11414:	ldr	r3, [r3]
   11418:	cmp	r3, #0
   1141c:	bne	1146c <_start@@Base+0x1bc>
   11420:	mov	r0, #44	; 0x2c
   11424:	bl	130a8 <mmk_malloc@@Base>
   11428:	str	r0, [fp, #-32]	; 0xffffffe0
   1142c:	bl	131f0 <mmk_when_get_result@@Base>
   11430:	mov	r2, r0
   11434:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11438:	add	ip, r3, #8
   1143c:	mov	lr, r2
   11440:	ldm	lr!, {r0, r1, r2, r3}
   11444:	stmia	ip!, {r0, r1, r2, r3}
   11448:	ldr	r3, [lr]
   1144c:	str	r3, [ip]
   11450:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11454:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11458:	str	r2, [r3, #40]	; 0x28
   1145c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11460:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11464:	bl	13214 <mmk_when_impl@@Base>
   11468:	b	11640 <_start@@Base+0x390>
   1146c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11470:	ldr	r3, [r3]
   11474:	cmp	r3, #1
   11478:	bne	11640 <_start@@Base+0x390>
   1147c:	mov	r3, #0
   11480:	str	r3, [fp, #-8]
   11484:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11488:	bl	12074 <mmk_mock_params_begin@@Base>
   1148c:	str	r0, [fp, #-12]
   11490:	b	115f8 <_start@@Base+0x348>
   11494:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11498:	str	r3, [fp, #-36]	; 0xffffffdc
   1149c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114a0:	ldr	r3, [r3, #8]
   114a4:	cmp	r3, #0
   114a8:	beq	11598 <_start@@Base+0x2e8>
   114ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114b0:	ldr	r3, [r3, #8]
   114b4:	str	r3, [fp, #-36]	; 0xffffffdc
   114b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114bc:	ldr	r3, [r3]
   114c0:	cmp	r3, #0
   114c4:	beq	115bc <_start@@Base+0x30c>
   114c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114cc:	ldr	r3, [r3]
   114d0:	cmp	r3, #0
   114d4:	bge	11558 <_start@@Base+0x2a8>
   114d8:	ldr	r3, [fp, #-12]
   114dc:	add	r3, r3, #12
   114e0:	sub	r1, fp, #96	; 0x60
   114e4:	mov	r2, #4
   114e8:	mov	r0, r3
   114ec:	bl	12f10 <mmk_memcmp@@Base>
   114f0:	str	r0, [fp, #-40]	; 0xffffffd8
   114f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   114f8:	cmp	r3, #0
   114fc:	bne	11514 <_start@@Base+0x264>
   11500:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11504:	ldr	r3, [r3]
   11508:	and	r3, r3, #2
   1150c:	cmp	r3, #0
   11510:	beq	115d4 <_start@@Base+0x324>
   11514:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11518:	cmp	r3, #0
   1151c:	bge	11534 <_start@@Base+0x284>
   11520:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11524:	ldr	r3, [r3]
   11528:	and	r3, r3, #4
   1152c:	cmp	r3, #0
   11530:	beq	115dc <_start@@Base+0x32c>
   11534:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11538:	cmp	r3, #0
   1153c:	ble	115bc <_start@@Base+0x30c>
   11540:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11544:	ldr	r3, [r3]
   11548:	and	r3, r3, #8
   1154c:	cmp	r3, #0
   11550:	bne	115bc <_start@@Base+0x30c>
   11554:	b	115e8 <_start@@Base+0x338>
   11558:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1155c:	ldr	r3, [r3]
   11560:	cmp	r3, #1
   11564:	bne	115bc <_start@@Base+0x30c>
   11568:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1156c:	bl	11dbc <mmk_matcher_get_predicate@@Base>
   11570:	str	r0, [fp, #-44]	; 0xffffffd4
   11574:	ldr	r3, [fp, #-12]
   11578:	ldr	r2, [r3, #12]
   1157c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11580:	mov	r0, r2
   11584:	blx	r3
   11588:	mov	r3, r0
   1158c:	cmp	r3, #0
   11590:	bne	115bc <_start@@Base+0x30c>
   11594:	b	115e8 <_start@@Base+0x338>
   11598:	ldr	r3, [fp, #-12]
   1159c:	add	r3, r3, #12
   115a0:	sub	r1, fp, #96	; 0x60
   115a4:	mov	r2, #4
   115a8:	mov	r0, r3
   115ac:	bl	12f10 <mmk_memcmp@@Base>
   115b0:	mov	r3, r0
   115b4:	cmp	r3, #0
   115b8:	bne	115e4 <_start@@Base+0x334>
   115bc:	ldr	r3, [fp, #-12]
   115c0:	ldr	r3, [r3]
   115c4:	ldr	r2, [fp, #-8]
   115c8:	add	r3, r2, r3
   115cc:	str	r3, [fp, #-8]
   115d0:	b	115e8 <_start@@Base+0x338>
   115d4:	nop			; (mov r0, r0)
   115d8:	b	115e8 <_start@@Base+0x338>
   115dc:	nop			; (mov r0, r0)
   115e0:	b	115e8 <_start@@Base+0x338>
   115e4:	nop			; (mov r0, r0)
   115e8:	ldr	r1, [fp, #-12]
   115ec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   115f0:	bl	120c8 <mmk_mock_params_next@@Base>
   115f4:	str	r0, [fp, #-12]
   115f8:	ldr	r3, [fp, #-12]
   115fc:	cmp	r3, #0
   11600:	bne	11494 <_start@@Base+0x1e4>
   11604:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11608:	str	r3, [fp, #-16]
   1160c:	b	1162c <_start@@Base+0x37c>
   11610:	ldr	r3, [fp, #-16]
   11614:	ldr	r3, [r3, #8]
   11618:	str	r3, [fp, #-48]	; 0xffffffd0
   1161c:	ldr	r0, [fp, #-16]
   11620:	bl	130c8 <mmk_free@@Base>
   11624:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11628:	str	r3, [fp, #-16]
   1162c:	ldr	r3, [fp, #-16]
   11630:	cmp	r3, #0
   11634:	bne	11610 <_start@@Base+0x360>
   11638:	ldr	r0, [fp, #-8]
   1163c:	bl	12b0c <mmk_verify_set_times@@Base>
   11640:	ldr	r3, [pc, #636]	; 118c4 <_start@@Base+0x614>
   11644:	ldr	r3, [r3]
   11648:	b	118b8 <_start@@Base+0x608>
   1164c:	sub	r3, fp, #88	; 0x58
   11650:	mov	r2, #0
   11654:	str	r2, [r3]
   11658:	str	r2, [r3, #4]
   1165c:	str	r2, [r3, #8]
   11660:	str	r2, [r3, #12]
   11664:	ldr	r3, [fp, #-96]	; 0xffffffa0
   11668:	str	r3, [fp, #-76]	; 0xffffffb4
   1166c:	sub	r3, fp, #88	; 0x58
   11670:	str	r3, [fp, #-52]	; 0xffffffcc
   11674:	mov	r1, #16
   11678:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1167c:	bl	12d10 <mmk_verify_register_call@@Base>
   11680:	bl	12140 <mmk_mock_get_params@@Base>
   11684:	str	r0, [fp, #-20]	; 0xffffffec
   11688:	b	118a4 <_start@@Base+0x5f4>
   1168c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11690:	str	r3, [fp, #-56]	; 0xffffffc8
   11694:	ldr	r3, [fp, #-20]	; 0xffffffec
   11698:	ldr	r3, [r3]
   1169c:	str	r3, [fp, #-60]	; 0xffffffc4
   116a0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116a4:	ldr	r3, [r3, #8]
   116a8:	cmp	r3, #0
   116ac:	beq	11794 <_start@@Base+0x4e4>
   116b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116b4:	ldr	r3, [r3, #8]
   116b8:	str	r3, [fp, #-60]	; 0xffffffc4
   116bc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116c0:	ldr	r3, [r3]
   116c4:	cmp	r3, #0
   116c8:	beq	117b8 <_start@@Base+0x508>
   116cc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116d0:	ldr	r3, [r3]
   116d4:	cmp	r3, #0
   116d8:	bge	11758 <_start@@Base+0x4a8>
   116dc:	sub	r1, fp, #96	; 0x60
   116e0:	sub	r3, fp, #96	; 0x60
   116e4:	mov	r2, #4
   116e8:	mov	r0, r3
   116ec:	bl	12f10 <mmk_memcmp@@Base>
   116f0:	str	r0, [fp, #-64]	; 0xffffffc0
   116f4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   116f8:	cmp	r3, #0
   116fc:	bne	11714 <_start@@Base+0x464>
   11700:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11704:	ldr	r3, [r3]
   11708:	and	r3, r3, #2
   1170c:	cmp	r3, #0
   11710:	beq	1188c <_start@@Base+0x5dc>
   11714:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11718:	cmp	r3, #0
   1171c:	bge	11734 <_start@@Base+0x484>
   11720:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11724:	ldr	r3, [r3]
   11728:	and	r3, r3, #4
   1172c:	cmp	r3, #0
   11730:	beq	1188c <_start@@Base+0x5dc>
   11734:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11738:	cmp	r3, #0
   1173c:	ble	117b8 <_start@@Base+0x508>
   11740:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11744:	ldr	r3, [r3]
   11748:	and	r3, r3, #8
   1174c:	cmp	r3, #0
   11750:	bne	117b8 <_start@@Base+0x508>
   11754:	b	1188c <_start@@Base+0x5dc>
   11758:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1175c:	ldr	r3, [r3]
   11760:	cmp	r3, #1
   11764:	bne	117b8 <_start@@Base+0x508>
   11768:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1176c:	bl	11dbc <mmk_matcher_get_predicate@@Base>
   11770:	str	r0, [fp, #-68]	; 0xffffffbc
   11774:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11778:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1177c:	mov	r0, r2
   11780:	blx	r3
   11784:	mov	r3, r0
   11788:	cmp	r3, #0
   1178c:	bne	117b8 <_start@@Base+0x508>
   11790:	b	11898 <_start@@Base+0x5e8>
   11794:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11798:	add	r1, r3, #40	; 0x28
   1179c:	sub	r3, fp, #96	; 0x60
   117a0:	mov	r2, #4
   117a4:	mov	r0, r3
   117a8:	bl	12f10 <mmk_memcmp@@Base>
   117ac:	mov	r3, r0
   117b0:	cmp	r3, #0
   117b4:	bne	11894 <_start@@Base+0x5e4>
   117b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117bc:	ldr	r3, [r3, #12]
   117c0:	cmp	r3, #0
   117c4:	beq	117dc <_start@@Base+0x52c>
   117c8:	bl	11250 <__errno_location@plt>
   117cc:	mov	r2, r0
   117d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117d4:	ldr	r3, [r3, #12]
   117d8:	str	r3, [r2]
   117dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117e0:	ldr	r3, [r3, #20]
   117e4:	cmp	r3, #0
   117e8:	beq	1181c <_start@@Base+0x56c>
   117ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117f0:	ldr	r3, [r3, #16]
   117f4:	cmp	r3, #0
   117f8:	bne	1181c <_start@@Base+0x56c>
   117fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11800:	ldr	r3, [r3, #20]
   11804:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11808:	mov	r0, r2
   1180c:	blx	r3
   11810:	str	r0, [fp, #-72]	; 0xffffffb8
   11814:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11818:	b	118b8 <_start@@Base+0x608>
   1181c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11820:	ldr	r3, [r3, #20]
   11824:	cmp	r3, #0
   11828:	beq	11860 <_start@@Base+0x5b0>
   1182c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11830:	ldr	r3, [r3, #16]
   11834:	cmp	r3, #0
   11838:	beq	11860 <_start@@Base+0x5b0>
   1183c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11840:	ldr	r3, [r3, #20]
   11844:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11848:	mov	r0, r2
   1184c:	blx	r3
   11850:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11854:	ldr	r3, [r3, #16]
   11858:	ldr	r3, [r3]
   1185c:	b	118b8 <_start@@Base+0x608>
   11860:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11864:	ldr	r3, [r3, #16]
   11868:	cmp	r3, #0
   1186c:	beq	11880 <_start@@Base+0x5d0>
   11870:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11874:	ldr	r3, [r3, #16]
   11878:	ldr	r3, [r3]
   1187c:	b	118b8 <_start@@Base+0x608>
   11880:	ldr	r3, [pc, #60]	; 118c4 <_start@@Base+0x614>
   11884:	ldr	r3, [r3]
   11888:	b	118b8 <_start@@Base+0x608>
   1188c:	nop			; (mov r0, r0)
   11890:	b	11898 <_start@@Base+0x5e8>
   11894:	nop			; (mov r0, r0)
   11898:	ldr	r3, [fp, #-20]	; 0xffffffec
   1189c:	ldr	r3, [r3, #4]
   118a0:	str	r3, [fp, #-20]	; 0xffffffec
   118a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   118a8:	cmp	r3, #0
   118ac:	bne	1168c <_start@@Base+0x3dc>
   118b0:	ldr	r3, [pc, #12]	; 118c4 <_start@@Base+0x614>
   118b4:	ldr	r3, [r3]
   118b8:	mov	r0, r3
   118bc:	sub	sp, fp, #4
   118c0:	pop	{fp, pc}
   118c4:	muleq	r2, r4, r0
   118c8:	push	{fp, lr}
   118cc:	add	fp, sp, #4
   118d0:	sub	sp, sp, #8
   118d4:	str	r0, [fp, #-8]
   118d8:	ldr	r1, [pc, #20]	; 118f4 <_start@@Base+0x644>
   118dc:	ldr	r0, [fp, #-8]
   118e0:	bl	11dc4 <mmk_mock_create_internal@@Base>
   118e4:	mov	r3, r0
   118e8:	mov	r0, r3
   118ec:	sub	sp, fp, #4
   118f0:	pop	{fp, pc}
   118f4:	ldrdeq	r1, [r1], -r8

000118f8 <test_simple_case@@Base>:
   118f8:	push	{fp, lr}
   118fc:	add	fp, sp, #4
   11900:	sub	sp, sp, #72	; 0x48
   11904:	ldr	r0, [pc, #332]	; 11a58 <test_simple_case@@Base+0x160>
   11908:	bl	118c8 <_start@@Base+0x618>
   1190c:	mov	r0, #0
   11910:	bl	11ce4 <mmk_matcher_init@@Base>
   11914:	sub	r3, fp, #60	; 0x3c
   11918:	mov	r2, #0
   1191c:	str	r2, [r3]
   11920:	str	r2, [r3, #4]
   11924:	str	r2, [r3, #8]
   11928:	str	r2, [r3, #12]
   1192c:	str	r2, [r3, #16]
   11930:	sub	r3, fp, #68	; 0x44
   11934:	str	r3, [fp, #-40]	; 0xffffffd8
   11938:	sub	r3, fp, #40	; 0x28
   1193c:	str	r3, [fp, #-52]	; 0xffffffcc
   11940:	sub	r3, fp, #60	; 0x3c
   11944:	mov	r0, r3
   11948:	bl	131bc <mmk_when_init@@Base>
   1194c:	mov	r0, #6
   11950:	bl	111fc <malloc@plt>
   11954:	bl	11d1c <mmk_matcher_term@@Base>
   11958:	ldr	r0, [pc, #252]	; 11a5c <test_simple_case@@Base+0x164>
   1195c:	bl	11280 <my_strdup@plt>
   11960:	str	r0, [fp, #-8]
   11964:	mov	r0, #1
   11968:	bl	11ce4 <mmk_matcher_init@@Base>
   1196c:	mov	r1, #0
   11970:	mov	r0, #-2147483638	; 0x8000000a
   11974:	bl	11d50 <mmk_matcher_add@@Base>
   11978:	mov	r0, #6
   1197c:	bl	111fc <malloc@plt>
   11980:	bl	11d1c <mmk_matcher_term@@Base>
   11984:	sub	r3, fp, #36	; 0x24
   11988:	mov	r2, #0
   1198c:	str	r2, [r3]
   11990:	str	r2, [r3, #4]
   11994:	str	r2, [r3, #8]
   11998:	str	r2, [r3, #12]
   1199c:	str	r2, [r3, #16]
   119a0:	str	r2, [r3, #20]
   119a4:	mov	r3, #1
   119a8:	str	r3, [fp, #-36]	; 0xffffffdc
   119ac:	mov	r3, #1
   119b0:	str	r3, [fp, #-20]	; 0xffffffec
   119b4:	sub	r3, fp, #36	; 0x24
   119b8:	mov	r0, r3
   119bc:	bl	12b40 <mmk_verify_times@@Base>
   119c0:	str	r0, [fp, #-12]
   119c4:	ldr	r3, [fp, #-12]
   119c8:	cmp	r3, #0
   119cc:	bne	119f4 <test_simple_case@@Base+0xfc>
   119d0:	ldr	r3, [pc, #136]	; 11a60 <test_simple_case@@Base+0x168>
   119d4:	ldr	r0, [r3]
   119d8:	ldr	r3, [pc, #132]	; 11a64 <test_simple_case@@Base+0x16c>
   119dc:	str	r3, [sp]
   119e0:	mov	r3, #23
   119e4:	ldr	r2, [pc, #124]	; 11a68 <test_simple_case@@Base+0x170>
   119e8:	ldr	r1, [pc, #124]	; 11a6c <test_simple_case@@Base+0x174>
   119ec:	bl	11244 <fprintf@plt>
   119f0:	bl	11298 <abort@plt>
   119f4:	sub	r3, fp, #68	; 0x44
   119f8:	ldr	r2, [fp, #-8]
   119fc:	cmp	r2, r3
   11a00:	bne	11a20 <test_simple_case@@Base+0x128>
   11a04:	sub	r3, fp, #68	; 0x44
   11a08:	mov	r1, r3
   11a0c:	ldr	r0, [pc, #92]	; 11a70 <test_simple_case@@Base+0x178>
   11a10:	bl	111c0 <strcmp@plt>
   11a14:	mov	r3, r0
   11a18:	cmp	r3, #0
   11a1c:	beq	11a44 <test_simple_case@@Base+0x14c>
   11a20:	ldr	r3, [pc, #56]	; 11a60 <test_simple_case@@Base+0x168>
   11a24:	ldr	r0, [r3]
   11a28:	ldr	r3, [pc, #68]	; 11a74 <test_simple_case@@Base+0x17c>
   11a2c:	str	r3, [sp]
   11a30:	mov	r3, #24
   11a34:	ldr	r2, [pc, #44]	; 11a68 <test_simple_case@@Base+0x170>
   11a38:	ldr	r1, [pc, #44]	; 11a6c <test_simple_case@@Base+0x174>
   11a3c:	bl	11244 <fprintf@plt>
   11a40:	bl	11298 <abort@plt>
   11a44:	ldr	r0, [pc, #44]	; 11a78 <test_simple_case@@Base+0x180>
   11a48:	bl	11c98 <mmk_reset@@Base>
   11a4c:	nop			; (mov r0, r0)
   11a50:	sub	sp, fp, #4
   11a54:	pop	{fp, pc}
   11a58:	andeq	r3, r1, r4, ror #10
   11a5c:	andeq	r3, r1, r8, ror r5
   11a60:	andeq	r4, r2, r8, ror r0
   11a64:	andeq	r3, r1, r4, ror #11
   11a68:	andeq	r3, r1, r0, lsl #11
   11a6c:	andeq	r3, r1, r4, asr #11
   11a70:	andeq	r4, r2, ip, rrx
   11a74:	andeq	r3, r1, ip, ror #11
   11a78:	strdeq	r1, [r1], -ip

00011a7c <test_error_case@@Base>:
   11a7c:	push	{fp, lr}
   11a80:	add	fp, sp, #4
   11a84:	sub	sp, sp, #40	; 0x28
   11a88:	ldr	r0, [pc, #204]	; 11b5c <test_error_case@@Base+0xe0>
   11a8c:	bl	118c8 <_start@@Base+0x618>
   11a90:	str	r0, [fp, #-8]
   11a94:	mov	r0, #0
   11a98:	bl	11ce4 <mmk_matcher_init@@Base>
   11a9c:	sub	r3, fp, #36	; 0x24
   11aa0:	mov	r2, #0
   11aa4:	str	r2, [r3]
   11aa8:	str	r2, [r3, #4]
   11aac:	str	r2, [r3, #8]
   11ab0:	str	r2, [r3, #12]
   11ab4:	str	r2, [r3, #16]
   11ab8:	mov	r3, #12
   11abc:	str	r3, [fp, #-32]	; 0xffffffe0
   11ac0:	mov	r3, #0
   11ac4:	str	r3, [fp, #-16]
   11ac8:	sub	r3, fp, #16
   11acc:	str	r3, [fp, #-28]	; 0xffffffe4
   11ad0:	sub	r3, fp, #36	; 0x24
   11ad4:	mov	r0, r3
   11ad8:	bl	131bc <mmk_when_init@@Base>
   11adc:	mov	r1, #1
   11ae0:	mov	r0, #0
   11ae4:	bl	11d50 <mmk_matcher_add@@Base>
   11ae8:	ldr	r3, [fp, #-8]
   11aec:	mov	r0, #0
   11af0:	blx	r3
   11af4:	bl	11d1c <mmk_matcher_term@@Base>
   11af8:	ldr	r0, [pc, #96]	; 11b60 <test_error_case@@Base+0xe4>
   11afc:	bl	11280 <my_strdup@plt>
   11b00:	str	r0, [fp, #-12]
   11b04:	ldr	r3, [fp, #-12]
   11b08:	cmp	r3, #0
   11b0c:	bne	11b24 <test_error_case@@Base+0xa8>
   11b10:	bl	11250 <__errno_location@plt>
   11b14:	mov	r3, r0
   11b18:	ldr	r3, [r3]
   11b1c:	cmp	r3, #12
   11b20:	beq	11b48 <test_error_case@@Base+0xcc>
   11b24:	ldr	r3, [pc, #56]	; 11b64 <test_error_case@@Base+0xe8>
   11b28:	ldr	r0, [r3]
   11b2c:	ldr	r3, [pc, #52]	; 11b68 <test_error_case@@Base+0xec>
   11b30:	str	r3, [sp]
   11b34:	mov	r3, #39	; 0x27
   11b38:	ldr	r2, [pc, #44]	; 11b6c <test_error_case@@Base+0xf0>
   11b3c:	ldr	r1, [pc, #44]	; 11b70 <test_error_case@@Base+0xf4>
   11b40:	bl	11244 <fprintf@plt>
   11b44:	bl	11298 <abort@plt>
   11b48:	ldr	r0, [fp, #-8]
   11b4c:	bl	11c98 <mmk_reset@@Base>
   11b50:	nop			; (mov r0, r0)
   11b54:	sub	sp, fp, #4
   11b58:	pop	{fp, pc}
   11b5c:	andeq	r3, r1, r4, ror #10
   11b60:	andeq	r3, r1, ip, lsl #12
   11b64:	andeq	r4, r2, r8, ror r0
   11b68:	andeq	r3, r1, r0, lsl r6
   11b6c:	andeq	r3, r1, r0, lsl #11
   11b70:	andeq	r3, r1, r4, asr #11

00011b74 <main@@Base>:
   11b74:	push	{fp, lr}
   11b78:	add	fp, sp, #4
   11b7c:	bl	118f8 <test_simple_case@@Base>
   11b80:	bl	11a7c <test_error_case@@Base>
   11b84:	mov	r3, #0
   11b88:	mov	r0, r3
   11b8c:	pop	{fp, pc}

00011b90 <mmk_init@@Base>:
   11b90:	push	{fp, lr}
   11b94:	add	fp, sp, #4
   11b98:	sub	sp, sp, #8
   11b9c:	ldr	r3, [pc, #120]	; 11c1c <mmk_init@@Base+0x8c>
   11ba0:	ldr	r3, [r3]
   11ba4:	cmp	r3, #0
   11ba8:	bne	11c10 <mmk_init@@Base+0x80>
   11bac:	bl	122ec <plt_init_ctx@@Base>
   11bb0:	mov	r2, r0
   11bb4:	ldr	r3, [pc, #96]	; 11c1c <mmk_init@@Base+0x8c>
   11bb8:	str	r2, [r3, #4]
   11bbc:	ldr	r3, [pc, #88]	; 11c1c <mmk_init@@Base+0x8c>
   11bc0:	ldr	r3, [r3, #4]
   11bc4:	cmn	r3, #1
   11bc8:	bne	11bf0 <mmk_init@@Base+0x60>
   11bcc:	ldr	r3, [pc, #76]	; 11c20 <mmk_init@@Base+0x90>
   11bd0:	ldr	r0, [r3]
   11bd4:	ldr	r3, [pc, #72]	; 11c24 <mmk_init@@Base+0x94>
   11bd8:	str	r3, [sp]
   11bdc:	mov	r3, #45	; 0x2d
   11be0:	ldr	r2, [pc, #64]	; 11c28 <mmk_init@@Base+0x98>
   11be4:	ldr	r1, [pc, #64]	; 11c2c <mmk_init@@Base+0x9c>
   11be8:	bl	11244 <fprintf@plt>
   11bec:	bl	11298 <abort@plt>
   11bf0:	ldr	r3, [pc, #36]	; 11c1c <mmk_init@@Base+0x8c>
   11bf4:	ldr	r3, [r3, #4]
   11bf8:	mov	r0, r3
   11bfc:	bl	130d8 <mmk_init_vital_functions@@Base>
   11c00:	ldr	r3, [pc, #20]	; 11c1c <mmk_init@@Base+0x8c>
   11c04:	mov	r2, #1
   11c08:	str	r2, [r3]
   11c0c:	b	11c14 <mmk_init@@Base+0x84>
   11c10:	nop			; (mov r0, r0)
   11c14:	sub	sp, fp, #4
   11c18:	pop	{fp, pc}
   11c1c:	muleq	r2, r8, r0
   11c20:	andeq	r4, r2, r8, ror r0
   11c24:	andeq	r3, r1, r8, lsl #13
   11c28:	andeq	r3, r1, r0, lsr r6
   11c2c:	andeq	r3, r1, r8, ror #12

00011c30 <mmk_plt_ctx@@Base>:
   11c30:	push	{fp, lr}
   11c34:	add	fp, sp, #4
   11c38:	sub	sp, sp, #8
   11c3c:	ldr	r3, [pc, #64]	; 11c84 <mmk_plt_ctx@@Base+0x54>
   11c40:	ldr	r3, [r3]
   11c44:	cmp	r3, #0
   11c48:	bne	11c70 <mmk_plt_ctx@@Base+0x40>
   11c4c:	ldr	r3, [pc, #52]	; 11c88 <mmk_plt_ctx@@Base+0x58>
   11c50:	ldr	r0, [r3]
   11c54:	ldr	r3, [pc, #48]	; 11c8c <mmk_plt_ctx@@Base+0x5c>
   11c58:	str	r3, [sp]
   11c5c:	mov	r3, #54	; 0x36
   11c60:	ldr	r2, [pc, #40]	; 11c90 <mmk_plt_ctx@@Base+0x60>
   11c64:	ldr	r1, [pc, #40]	; 11c94 <mmk_plt_ctx@@Base+0x64>
   11c68:	bl	11244 <fprintf@plt>
   11c6c:	bl	11298 <abort@plt>
   11c70:	ldr	r3, [pc, #12]	; 11c84 <mmk_plt_ctx@@Base+0x54>
   11c74:	ldr	r3, [r3, #4]
   11c78:	mov	r0, r3
   11c7c:	sub	sp, fp, #4
   11c80:	pop	{fp, pc}
   11c84:	muleq	r2, r8, r0
   11c88:	andeq	r4, r2, r8, ror r0
   11c8c:	andeq	r3, r1, r0, lsr #13
   11c90:	andeq	r3, r1, r0, lsr r6
   11c94:	andeq	r3, r1, r8, ror #12

00011c98 <mmk_reset@@Base>:
   11c98:	push	{fp, lr}
   11c9c:	add	fp, sp, #4
   11ca0:	sub	sp, sp, #16
   11ca4:	str	r0, [fp, #-16]
   11ca8:	ldr	r3, [fp, #-16]
   11cac:	cmp	r3, #0
   11cb0:	beq	11cd8 <mmk_reset@@Base+0x40>
   11cb4:	ldr	r0, [fp, #-16]
   11cb8:	bl	12950 <mmk_ask_ctx@@Base>
   11cbc:	str	r0, [fp, #-8]
   11cc0:	ldr	r0, [fp, #-8]
   11cc4:	bl	12610 <mmk_stub_context@@Base>
   11cc8:	str	r0, [fp, #-12]
   11ccc:	ldr	r0, [fp, #-12]
   11cd0:	bl	11f98 <mmk_mock_destroy_internal@@Base>
   11cd4:	b	11cdc <mmk_reset@@Base+0x44>
   11cd8:	nop			; (mov r0, r0)
   11cdc:	sub	sp, fp, #4
   11ce0:	pop	{fp, pc}

00011ce4 <mmk_matcher_init@@Base>:
   11ce4:	push	{r4, lr}
   11ce8:	mov	r4, r0
   11cec:	mov	r0, #12
   11cf0:	bl	130a8 <mmk_malloc@@Base>
   11cf4:	mov	r2, #0
   11cf8:	str	r2, [r0, #4]
   11cfc:	str	r2, [r0, #8]
   11d00:	ldr	r2, [pc, #16]	; 11d18 <mmk_matcher_init@@Base+0x34>
   11d04:	mov	r3, r0
   11d08:	str	r4, [r0]
   11d0c:	bl	13550 <__libc_csu_fini@@Base+0xc>
   11d10:	str	r3, [r2, r0]
   11d14:	pop	{r4, pc}
   11d18:	andeq	r0, r0, r8

00011d1c <mmk_matcher_term@@Base>:
   11d1c:	ldr	r3, [pc, #16]	; 11d34 <mmk_matcher_term@@Base+0x18>
   11d20:	mov	r2, #0
   11d24:	push	{lr}		; (str lr, [sp, #-4]!)
   11d28:	bl	13550 <__libc_csu_fini@@Base+0xc>
   11d2c:	str	r2, [r0, r3]
   11d30:	pop	{pc}		; (ldr pc, [sp], #4)
   11d34:	andeq	r0, r0, r8

00011d38 <mmk_matcher_ctx@@Base>:
   11d38:	ldr	r3, [pc, #12]	; 11d4c <mmk_matcher_ctx@@Base+0x14>
   11d3c:	push	{lr}		; (str lr, [sp, #-4]!)
   11d40:	bl	13550 <__libc_csu_fini@@Base+0xc>
   11d44:	ldr	r0, [r3, r0]
   11d48:	pop	{pc}		; (ldr pc, [sp], #4)
   11d4c:	andeq	r0, r0, r8

00011d50 <mmk_matcher_add@@Base>:
   11d50:	push	{r4, r5, r6, lr}
   11d54:	mov	r5, r0
   11d58:	mov	r0, #12
   11d5c:	mov	r4, r1
   11d60:	bl	130a8 <mmk_malloc@@Base>
   11d64:	ldr	r2, [pc, #76]	; 11db8 <mmk_matcher_add@@Base+0x68>
   11d68:	mov	r3, r0
   11d6c:	bl	13550 <__libc_csu_fini@@Base+0xc>
   11d70:	ldr	r0, [r2, r0]
   11d74:	mov	r2, #0
   11d78:	str	r2, [r3, #8]
   11d7c:	ldr	r2, [r0, #8]
   11d80:	str	r5, [r3]
   11d84:	str	r4, [r3, #4]
   11d88:	cmp	r2, #0
   11d8c:	bne	11da0 <mmk_matcher_add@@Base+0x50>
   11d90:	ldr	r2, [r0, #8]
   11d94:	str	r2, [r3, #8]
   11d98:	str	r3, [r0, #8]
   11d9c:	pop	{r4, r5, r6, pc}
   11da0:	ldr	r1, [r2, #4]
   11da4:	cmp	r4, r1
   11da8:	bls	11d90 <mmk_matcher_add@@Base+0x40>
   11dac:	mov	r0, r2
   11db0:	ldr	r2, [r2, #8]
   11db4:	b	11d88 <mmk_matcher_add@@Base+0x38>
   11db8:	andeq	r0, r0, r8

00011dbc <mmk_matcher_get_predicate@@Base>:
   11dbc:	add	r0, r0, #12
   11dc0:	bx	lr

00011dc4 <mmk_mock_create_internal@@Base>:
   11dc4:	push	{r4, fp, lr}
   11dc8:	add	fp, sp, #8
   11dcc:	sub	sp, sp, #44	; 0x2c
   11dd0:	str	r0, [fp, #-40]	; 0xffffffd8
   11dd4:	str	r1, [fp, #-44]	; 0xffffffd4
   11dd8:	bl	11b90 <mmk_init@@Base>
   11ddc:	mov	r0, #20
   11de0:	bl	130a8 <mmk_malloc@@Base>
   11de4:	str	r0, [fp, #-20]	; 0xffffffec
   11de8:	ldr	r3, [fp, #-20]	; 0xffffffec
   11dec:	cmp	r3, #0
   11df0:	bne	11e18 <mmk_mock_create_internal@@Base+0x54>
   11df4:	ldr	r3, [pc, #388]	; 11f80 <mmk_mock_create_internal@@Base+0x1bc>
   11df8:	ldr	r0, [r3]
   11dfc:	ldr	r3, [pc, #384]	; 11f84 <mmk_mock_create_internal@@Base+0x1c0>
   11e00:	str	r3, [sp]
   11e04:	mov	r3, #36	; 0x24
   11e08:	ldr	r2, [pc, #376]	; 11f88 <mmk_mock_create_internal@@Base+0x1c4>
   11e0c:	ldr	r1, [pc, #376]	; 11f8c <mmk_mock_create_internal@@Base+0x1c8>
   11e10:	bl	11244 <fprintf@plt>
   11e14:	bl	11298 <abort@plt>
   11e18:	ldr	r3, [fp, #-20]	; 0xffffffec
   11e1c:	mov	r2, r3
   11e20:	mov	r3, #0
   11e24:	str	r3, [r2]
   11e28:	str	r3, [r2, #4]
   11e2c:	str	r3, [r2, #8]
   11e30:	str	r3, [r2, #12]
   11e34:	str	r3, [r2, #16]
   11e38:	mov	r1, #64	; 0x40
   11e3c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11e40:	bl	12fdc <mmk_strchr@@Base>
   11e44:	str	r0, [fp, #-24]	; 0xffffffe8
   11e48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e4c:	cmp	r3, #0
   11e50:	bne	11e64 <mmk_mock_create_internal@@Base+0xa0>
   11e54:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11e58:	bl	13060 <mmk_strlen@@Base>
   11e5c:	str	r0, [fp, #-16]
   11e60:	b	11e74 <mmk_mock_create_internal@@Base+0xb0>
   11e64:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11e68:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11e6c:	sub	r3, r2, r3
   11e70:	str	r3, [fp, #-16]
   11e74:	ldr	r3, [fp, #-16]
   11e78:	add	r3, r3, #1
   11e7c:	mov	r0, r3
   11e80:	bl	130a8 <mmk_malloc@@Base>
   11e84:	str	r0, [fp, #-28]	; 0xffffffe4
   11e88:	ldr	r2, [fp, #-16]
   11e8c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11e90:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11e94:	bl	13024 <mmk_strncpy@@Base>
   11e98:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11e9c:	ldr	r3, [fp, #-16]
   11ea0:	add	r3, r2, r3
   11ea4:	mov	r2, #0
   11ea8:	strb	r2, [r3]
   11eac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11eb0:	cmp	r3, #0
   11eb4:	beq	11edc <mmk_mock_create_internal@@Base+0x118>
   11eb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ebc:	add	r3, r3, #1
   11ec0:	mov	r2, #4
   11ec4:	ldr	r1, [pc, #196]	; 11f90 <mmk_mock_create_internal@@Base+0x1cc>
   11ec8:	mov	r0, r3
   11ecc:	bl	12f78 <mmk_strneq@@Base>
   11ed0:	mov	r3, r0
   11ed4:	cmp	r3, #0
   11ed8:	beq	11ee4 <mmk_mock_create_internal@@Base+0x120>
   11edc:	mov	r3, #1
   11ee0:	b	11ee8 <mmk_mock_create_internal@@Base+0x124>
   11ee4:	mov	r3, #0
   11ee8:	str	r3, [fp, #-32]	; 0xffffffe0
   11eec:	ldr	r2, [fp, #-20]	; 0xffffffec
   11ef0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   11ef4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11ef8:	bl	12840 <mmk_stub_create@@Base>
   11efc:	mov	r2, r0
   11f00:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f04:	str	r2, [r3, #4]
   11f08:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f0c:	ldr	r3, [r3, #4]
   11f10:	cmp	r3, #0
   11f14:	bne	11f34 <mmk_mock_create_internal@@Base+0x170>
   11f18:	ldr	r3, [pc, #96]	; 11f80 <mmk_mock_create_internal@@Base+0x1bc>
   11f1c:	ldr	r3, [r3]
   11f20:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11f24:	ldr	r1, [pc, #104]	; 11f94 <mmk_mock_create_internal@@Base+0x1d0>
   11f28:	mov	r0, r3
   11f2c:	bl	11244 <fprintf@plt>
   11f30:	bl	11298 <abort@plt>
   11f34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11f38:	cmp	r3, #0
   11f3c:	bne	11f60 <mmk_mock_create_internal@@Base+0x19c>
   11f40:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f44:	ldr	r4, [r3, #4]
   11f48:	ldr	r2, [fp, #-20]	; 0xffffffec
   11f4c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   11f50:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11f54:	bl	12840 <mmk_stub_create@@Base>
   11f58:	mov	r3, r0
   11f5c:	str	r3, [r4, #36]	; 0x24
   11f60:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11f64:	bl	130c8 <mmk_free@@Base>
   11f68:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f6c:	ldr	r3, [r3, #4]
   11f70:	ldr	r3, [r3, #32]
   11f74:	mov	r0, r3
   11f78:	sub	sp, fp, #8
   11f7c:	pop	{r4, fp, pc}
   11f80:	andeq	r4, r2, r8, ror r0
   11f84:	andeq	r3, r1, ip, lsl #14
   11f88:			; <UNDEFINED> instruction: 0x000136b4
   11f8c:	andeq	r3, r1, ip, ror #13
   11f90:	andeq	r3, r1, r0, lsl r7
   11f94:	andeq	r3, r1, r8, lsl r7

00011f98 <mmk_mock_destroy_internal@@Base>:
   11f98:	push	{fp, lr}
   11f9c:	add	fp, sp, #4
   11fa0:	sub	sp, sp, #32
   11fa4:	str	r0, [fp, #-32]	; 0xffffffe0
   11fa8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11fac:	ldr	r3, [r3, #4]
   11fb0:	str	r3, [fp, #-8]
   11fb4:	b	11fd4 <mmk_mock_destroy_internal@@Base+0x3c>
   11fb8:	ldr	r3, [fp, #-8]
   11fbc:	ldr	r3, [r3, #36]	; 0x24
   11fc0:	str	r3, [fp, #-20]	; 0xffffffec
   11fc4:	ldr	r0, [fp, #-8]
   11fc8:	bl	12924 <mmk_stub_destroy@@Base>
   11fcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   11fd0:	str	r3, [fp, #-8]
   11fd4:	ldr	r3, [fp, #-8]
   11fd8:	cmp	r3, #0
   11fdc:	bne	11fb8 <mmk_mock_destroy_internal@@Base+0x20>
   11fe0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11fe4:	ldr	r3, [r3, #8]
   11fe8:	mov	r0, r3
   11fec:	bl	130c8 <mmk_free@@Base>
   11ff0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11ff4:	ldr	r3, [r3]
   11ff8:	str	r3, [fp, #-12]
   11ffc:	b	12054 <mmk_mock_destroy_internal@@Base+0xbc>
   12000:	ldr	r3, [fp, #-12]
   12004:	ldr	r3, [r3, #4]
   12008:	str	r3, [fp, #-24]	; 0xffffffe8
   1200c:	ldr	r3, [fp, #-12]
   12010:	ldr	r3, [r3]
   12014:	str	r3, [fp, #-16]
   12018:	b	12038 <mmk_mock_destroy_internal@@Base+0xa0>
   1201c:	ldr	r3, [fp, #-16]
   12020:	ldr	r3, [r3, #8]
   12024:	str	r3, [fp, #-28]	; 0xffffffe4
   12028:	ldr	r0, [fp, #-16]
   1202c:	bl	130c8 <mmk_free@@Base>
   12030:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12034:	str	r3, [fp, #-16]
   12038:	ldr	r3, [fp, #-16]
   1203c:	cmp	r3, #0
   12040:	bne	1201c <mmk_mock_destroy_internal@@Base+0x84>
   12044:	ldr	r0, [fp, #-12]
   12048:	bl	130c8 <mmk_free@@Base>
   1204c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12050:	str	r3, [fp, #-12]
   12054:	ldr	r3, [fp, #-12]
   12058:	cmp	r3, #0
   1205c:	bne	12000 <mmk_mock_destroy_internal@@Base+0x68>
   12060:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12064:	bl	130c8 <mmk_free@@Base>
   12068:	nop			; (mov r0, r0)
   1206c:	sub	sp, fp, #4
   12070:	pop	{fp, pc}

00012074 <mmk_mock_params_begin@@Base>:
   12074:	push	{fp}		; (str fp, [sp, #-4]!)
   12078:	add	fp, sp, #0
   1207c:	sub	sp, sp, #12
   12080:	str	r0, [fp, #-8]
   12084:	ldr	r3, [fp, #-8]
   12088:	ldr	r3, [r3, #8]
   1208c:	cmp	r3, #0
   12090:	beq	120a4 <mmk_mock_params_begin@@Base+0x30>
   12094:	ldr	r3, [fp, #-8]
   12098:	ldr	r3, [r3, #12]
   1209c:	cmp	r3, #0
   120a0:	bne	120ac <mmk_mock_params_begin@@Base+0x38>
   120a4:	mov	r3, #0
   120a8:	b	120b8 <mmk_mock_params_begin@@Base+0x44>
   120ac:	ldr	r3, [fp, #-8]
   120b0:	ldr	r3, [r3, #8]
   120b4:	add	r3, r3, #4
   120b8:	mov	r0, r3
   120bc:	add	sp, fp, #0
   120c0:	pop	{fp}		; (ldr fp, [sp], #4)
   120c4:	bx	lr

000120c8 <mmk_mock_params_next@@Base>:
   120c8:	push	{fp}		; (str fp, [sp, #-4]!)
   120cc:	add	fp, sp, #0
   120d0:	sub	sp, sp, #20
   120d4:	str	r0, [fp, #-16]
   120d8:	str	r1, [fp, #-20]	; 0xffffffec
   120dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   120e0:	str	r3, [fp, #-8]
   120e4:	ldr	r3, [fp, #-8]
   120e8:	ldr	r3, [r3, #-4]
   120ec:	str	r3, [fp, #-12]
   120f0:	ldr	r3, [fp, #-12]
   120f4:	add	r3, r3, #4
   120f8:	ldr	r2, [fp, #-8]
   120fc:	add	r3, r2, r3
   12100:	str	r3, [fp, #-8]
   12104:	ldr	r3, [fp, #-16]
   12108:	ldr	r2, [r3, #8]
   1210c:	ldr	r3, [fp, #-16]
   12110:	ldr	r3, [r3, #12]
   12114:	add	r2, r2, r3
   12118:	ldr	r3, [fp, #-8]
   1211c:	cmp	r2, r3
   12120:	bhi	1212c <mmk_mock_params_next@@Base+0x64>
   12124:	mov	r3, #0
   12128:	b	12130 <mmk_mock_params_next@@Base+0x68>
   1212c:	ldr	r3, [fp, #-8]
   12130:	mov	r0, r3
   12134:	add	sp, fp, #0
   12138:	pop	{fp}		; (ldr fp, [sp], #4)
   1213c:	bx	lr

00012140 <mmk_mock_get_params@@Base>:
   12140:	push	{fp, lr}
   12144:	add	fp, sp, #4
   12148:	sub	sp, sp, #8
   1214c:	bl	129d8 <mmk_ctx@@Base>
   12150:	mov	r3, r0
   12154:	mov	r0, r3
   12158:	bl	12610 <mmk_stub_context@@Base>
   1215c:	str	r0, [fp, #-8]
   12160:	ldr	r3, [fp, #-8]
   12164:	ldr	r3, [r3]
   12168:	mov	r0, r3
   1216c:	sub	sp, fp, #4
   12170:	pop	{fp, pc}
   12174:	ldr	r2, [r0, #8]
   12178:	ldr	r3, [r2]
   1217c:	cmp	r3, #0
   12180:	bne	1218c <mmk_mock_get_params@@Base+0x4c>
   12184:	mov	r0, r3
   12188:	bx	lr
   1218c:	cmp	r3, r1
   12190:	bne	121a8 <mmk_mock_get_params@@Base+0x68>
   12194:	ldr	r3, [r0]
   12198:	ldr	r0, [r2, #4]
   1219c:	cmp	r3, r0
   121a0:	addhi	r0, r3, r0
   121a4:	bx	lr
   121a8:	add	r2, r2, #8
   121ac:	b	12178 <mmk_mock_get_params@@Base+0x38>
   121b0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121b4:	mov	r9, r1
   121b8:	mov	r1, #6
   121bc:	mov	r6, r0
   121c0:	bl	12174 <mmk_mock_get_params@@Base+0x34>
   121c4:	mov	r1, #5
   121c8:	mov	r7, r0
   121cc:	mov	r0, r6
   121d0:	bl	12174 <mmk_mock_get_params@@Base+0x34>
   121d4:	ldr	r5, [r6, #8]
   121d8:	mov	r3, r5
   121dc:	mov	r8, r0
   121e0:	ldr	r4, [r3]
   121e4:	cmp	r4, #0
   121e8:	beq	121f8 <mmk_mock_get_params@@Base+0xb8>
   121ec:	cmp	r4, #20
   121f0:	bne	1228c <mmk_mock_get_params@@Base+0x14c>
   121f4:	ldr	r4, [r3, #4]
   121f8:	mov	r1, #23
   121fc:	mov	r0, r6
   12200:	bl	12174 <mmk_mock_get_params@@Base+0x34>
   12204:	mov	r3, r5
   12208:	mov	sl, r0
   1220c:	ldr	r0, [r3]
   12210:	cmp	r0, #0
   12214:	beq	12224 <mmk_mock_get_params@@Base+0xe4>
   12218:	cmp	r0, #2
   1221c:	bne	12294 <mmk_mock_get_params@@Base+0x154>
   12220:	ldr	r0, [r3, #4]
   12224:	add	r2, r4, #2
   12228:	mov	r3, r5
   1222c:	ldr	r5, [r3]
   12230:	cmp	r5, #0
   12234:	beq	12244 <mmk_mock_get_params@@Base+0x104>
   12238:	cmp	r2, r5
   1223c:	bne	1229c <mmk_mock_get_params@@Base+0x15c>
   12240:	ldr	r5, [r3, #4]
   12244:	cmp	r8, #0
   12248:	cmpne	r7, #0
   1224c:	beq	12284 <mmk_mock_get_params@@Base+0x144>
   12250:	cmp	sl, #0
   12254:	cmpne	r4, #0
   12258:	beq	12284 <mmk_mock_get_params@@Base+0x144>
   1225c:	cmp	r5, #0
   12260:	cmpne	r0, #0
   12264:	moveq	r4, #1
   12268:	movne	r4, #0
   1226c:	beq	12284 <mmk_mock_get_params@@Base+0x144>
   12270:	mov	r1, r5
   12274:	bl	132c8 <mmk_trampoline_end@@Base+0x4>
   12278:	mov	fp, r0
   1227c:	cmp	r4, fp
   12280:	bne	122a4 <mmk_mock_get_params@@Base+0x164>
   12284:	mov	r0, #0
   12288:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1228c:	add	r3, r3, #8
   12290:	b	121e0 <mmk_mock_get_params@@Base+0xa0>
   12294:	add	r3, r3, #8
   12298:	b	1220c <mmk_mock_get_params@@Base+0xcc>
   1229c:	add	r3, r3, #8
   122a0:	b	1222c <mmk_mock_get_params@@Base+0xec>
   122a4:	ldr	r3, [sl, #4]
   122a8:	mov	r1, r9
   122ac:	lsr	r3, r3, #8
   122b0:	ldr	r0, [r7, r3, lsl #4]
   122b4:	add	r0, r8, r0
   122b8:	bl	111c0 <strcmp@plt>
   122bc:	cmp	r0, #0
   122c0:	bne	122d8 <mmk_mock_get_params@@Base+0x198>
   122c4:	ldr	r0, [sl]
   122c8:	ldr	r3, [r6]
   122cc:	cmp	r0, #0
   122d0:	bne	122e4 <mmk_mock_get_params@@Base+0x1a4>
   122d4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122d8:	add	r4, r4, #1
   122dc:	add	sl, sl, r5
   122e0:	b	1227c <mmk_mock_get_params@@Base+0x13c>
   122e4:	add	r0, r3, r0
   122e8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000122ec <plt_init_ctx@@Base>:
   122ec:	ldr	r3, [pc, #20]	; 12308 <plt_init_ctx@@Base+0x1c>
   122f0:	ldr	r2, [r3]
   122f4:	cmn	r2, #1
   122f8:	ldreq	r2, [pc, #12]	; 1230c <plt_init_ctx@@Base+0x20>
   122fc:	streq	r2, [r3]
   12300:	ldr	r0, [r3]
   12304:	bx	lr
   12308:	andeq	r4, r2, r4, ror r0
   1230c:	andeq	r4, r2, ip, ror r0

00012310 <plt_get_lib@@Base>:
   12310:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12314:	cmp	r1, #0
   12318:	ldr	r5, [pc, #476]	; 124fc <plt_get_lib@@Base+0x1ec>
   1231c:	movne	r4, r1
   12320:	moveq	r4, r5
   12324:	add	fp, sp, #32
   12328:	mov	r9, r0
   1232c:	sub	sp, sp, #12
   12330:	mov	r2, #4
   12334:	ldr	r1, [pc, #452]	; 12500 <plt_get_lib@@Base+0x1f0>
   12338:	mov	r0, r4
   1233c:	bl	1128c <strncmp@plt>
   12340:	cmp	r0, #0
   12344:	beq	12464 <plt_get_lib@@Base+0x154>
   12348:	mov	r2, #5
   1234c:	ldr	r1, [pc, #432]	; 12504 <plt_get_lib@@Base+0x1f4>
   12350:	mov	r0, r4
   12354:	bl	1128c <strncmp@plt>
   12358:	cmp	r0, #0
   1235c:	beq	124ec <plt_get_lib@@Base+0x1dc>
   12360:	mov	r2, #4
   12364:	ldr	r1, [pc, #412]	; 12508 <plt_get_lib@@Base+0x1f8>
   12368:	mov	r0, r4
   1236c:	bl	1128c <strncmp@plt>
   12370:	cmp	r0, #0
   12374:	beq	124f4 <plt_get_lib@@Base+0x1e4>
   12378:	mov	r0, r4
   1237c:	mov	r1, r5
   12380:	bl	111c0 <strcmp@plt>
   12384:	subs	r6, r0, #0
   12388:	ldreq	r4, [pc, #380]	; 1250c <plt_get_lib@@Base+0x1fc>
   1238c:	moveq	r7, r4
   12390:	beq	12478 <plt_get_lib@@Base+0x168>
   12394:	mov	r1, #58	; 0x3a
   12398:	mov	r0, r4
   1239c:	bl	11238 <strchr@plt>
   123a0:	subs	r2, r0, #0
   123a4:	ldr	r0, [pc, #356]	; 12510 <plt_get_lib@@Base+0x200>
   123a8:	beq	123c8 <plt_get_lib@@Base+0xb8>
   123ac:	sub	r2, r2, r4
   123b0:	mov	r3, r4
   123b4:	add	r2, r2, #1
   123b8:	ldr	r1, [pc, #340]	; 12514 <plt_get_lib@@Base+0x204>
   123bc:	ldr	r0, [r0]
   123c0:	bl	11244 <fprintf@plt>
   123c4:	bl	11298 <abort@plt>
   123c8:	mov	r2, r4
   123cc:	ldr	r1, [pc, #324]	; 12518 <plt_get_lib@@Base+0x208>
   123d0:	ldr	r0, [r0]
   123d4:	bl	11244 <fprintf@plt>
   123d8:	b	123c4 <plt_get_lib@@Base+0xb4>
   123dc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   123e0:	mov	r9, sp
   123e4:	sub	sp, sp, r3
   123e8:	ldr	r2, [pc, #300]	; 1251c <plt_get_lib@@Base+0x20c>
   123ec:	mov	r3, r7
   123f0:	add	r1, r8, #8
   123f4:	mov	r0, sp
   123f8:	bl	1125c <snprintf@plt>
   123fc:	ldr	r0, [r5, #4]
   12400:	mov	r1, sp
   12404:	bl	111a8 <strstr@plt>
   12408:	cmp	r0, #0
   1240c:	beq	12420 <plt_get_lib@@Base+0x110>
   12410:	mov	sp, r9
   12414:	mov	r0, r5
   12418:	sub	sp, fp, #32
   1241c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12420:	mov	sp, r9
   12424:	ldr	r5, [r5, #12]
   12428:	b	124a4 <plt_get_lib@@Base+0x194>
   1242c:	tst	r6, #1
   12430:	bne	1244c <plt_get_lib@@Base+0x13c>
   12434:	ldr	r1, [r5, #4]
   12438:	mov	r0, r4
   1243c:	bl	111c0 <strcmp@plt>
   12440:	cmp	r0, #0
   12444:	bne	12424 <plt_get_lib@@Base+0x114>
   12448:	b	12414 <plt_get_lib@@Base+0x104>
   1244c:	cmp	r6, #3
   12450:	bne	12424 <plt_get_lib@@Base+0x114>
   12454:	mov	r1, r7
   12458:	mov	r0, r5
   1245c:	bl	121b0 <mmk_mock_get_params@@Base+0x70>
   12460:	b	124e0 <plt_get_lib@@Base+0x1d0>
   12464:	mov	r6, #1
   12468:	mov	r1, #58	; 0x3a
   1246c:	mov	r0, r4
   12470:	bl	11238 <strchr@plt>
   12474:	add	r7, r0, #1
   12478:	mov	r0, r7
   1247c:	bl	11220 <strlen@plt>
   12480:	ldr	r1, [pc, #152]	; 12520 <plt_get_lib@@Base+0x210>
   12484:	mov	r8, r0
   12488:	mov	r0, r7
   1248c:	bl	111c0 <strcmp@plt>
   12490:	ldr	r5, [r9, #4]
   12494:	add	r3, r8, #15
   12498:	bic	r3, r3, #7
   1249c:	str	r3, [fp, #-40]	; 0xffffffd8
   124a0:	mov	sl, r0
   124a4:	cmp	r5, #0
   124a8:	beq	12414 <plt_get_lib@@Base+0x104>
   124ac:	cmp	r6, #1
   124b0:	bne	1242c <plt_get_lib@@Base+0x11c>
   124b4:	cmp	sl, #0
   124b8:	bne	123dc <plt_get_lib@@Base+0xcc>
   124bc:	ldr	r9, [r5, #4]
   124c0:	ldr	r1, [pc, #92]	; 12524 <plt_get_lib@@Base+0x214>
   124c4:	mov	r0, r9
   124c8:	bl	111a8 <strstr@plt>
   124cc:	cmp	r0, #0
   124d0:	bne	12414 <plt_get_lib@@Base+0x104>
   124d4:	ldr	r1, [pc, #76]	; 12528 <plt_get_lib@@Base+0x218>
   124d8:	mov	r0, r9
   124dc:	bl	111a8 <strstr@plt>
   124e0:	cmp	r0, #0
   124e4:	beq	12424 <plt_get_lib@@Base+0x114>
   124e8:	b	12414 <plt_get_lib@@Base+0x104>
   124ec:	mov	r6, #2
   124f0:	b	12468 <plt_get_lib@@Base+0x158>
   124f4:	mov	r6, #3
   124f8:	b	12468 <plt_get_lib@@Base+0x158>
   124fc:	andeq	r3, r1, fp, asr #14
   12500:	andeq	r3, r1, r0, asr r7
   12504:	andeq	r3, r1, r5, asr r7
   12508:	andeq	r3, r1, fp, asr r7
   1250c:	andeq	r3, r1, r4, lsr #15
   12510:	andeq	r4, r2, r8, ror r0
   12514:	andeq	r3, r1, r0, ror #14
   12518:	andeq	r3, r1, r2, lsl #15
   1251c:			; <UNDEFINED> instruction: 0x000137b7
   12520:	strdeq	r3, [r1], -sp
   12524:	andeq	r3, r1, r5, lsr #15
   12528:	andeq	r3, r1, lr, lsr #15

0001252c <plt_get_offsets@@Base>:
   1252c:	push	{r4, r5, r6, lr}
   12530:	mov	r5, r2
   12534:	bl	121b0 <mmk_mock_get_params@@Base+0x70>
   12538:	subs	r4, r0, #0
   1253c:	beq	12560 <plt_get_offsets@@Base+0x34>
   12540:	mov	r0, #8
   12544:	bl	130a8 <mmk_malloc@@Base>
   12548:	mov	r3, #1
   1254c:	str	r3, [r5]
   12550:	mov	r3, #0
   12554:	str	r3, [r0, #4]
   12558:	str	r4, [r0]
   1255c:	pop	{r4, r5, r6, pc}
   12560:	mov	r0, r4
   12564:	pop	{r4, r5, r6, pc}

00012568 <plt_set_offsets@@Base>:
   12568:	mov	r3, #0
   1256c:	cmp	r3, r1
   12570:	mov	ip, r0
   12574:	bne	1257c <plt_set_offsets@@Base+0x14>
   12578:	bx	lr
   1257c:	push	{r4, lr}
   12580:	add	ip, ip, #8
   12584:	ldr	lr, [ip, #-4]
   12588:	cmp	lr, #0
   1258c:	ldr	lr, [r0, r3, lsl #3]
   12590:	add	r3, r3, #1
   12594:	ldreq	r4, [lr]
   12598:	streq	r4, [ip, #-4]
   1259c:	cmp	r3, r1
   125a0:	str	r2, [lr]
   125a4:	bne	12580 <plt_set_offsets@@Base+0x18>
   125a8:	pop	{r4, pc}

000125ac <plt_reset_offsets@@Base>:
   125ac:	mov	r3, #0
   125b0:	cmp	r3, r1
   125b4:	add	r0, r0, #8
   125b8:	bne	125c0 <plt_reset_offsets@@Base+0x14>
   125bc:	bx	lr
   125c0:	ldmdb	r0, {r2, ip}
   125c4:	add	r3, r3, #1
   125c8:	str	ip, [r2]
   125cc:	b	125b0 <plt_reset_offsets@@Base+0x4>

000125d0 <plt_get_real_fn@@Base>:
   125d0:	push	{r4, r5, r6, lr}
   125d4:	mov	r5, r1
   125d8:	ldr	r4, [r0, #4]
   125dc:	cmp	r4, #0
   125e0:	bne	125ec <plt_get_real_fn@@Base+0x1c>
   125e4:	mov	r0, r4
   125e8:	pop	{r4, r5, r6, pc}
   125ec:	mov	r1, r5
   125f0:	mov	r0, r4
   125f4:	bl	121b0 <mmk_mock_get_params@@Base+0x70>
   125f8:	cmp	r0, #0
   125fc:	beq	12608 <plt_get_real_fn@@Base+0x38>
   12600:	ldr	r0, [r0]
   12604:	pop	{r4, r5, r6, pc}
   12608:	ldr	r4, [r4, #12]
   1260c:	b	125dc <plt_get_real_fn@@Base+0xc>

00012610 <mmk_stub_context@@Base>:
   12610:	push	{fp}		; (str fp, [sp, #-4]!)
   12614:	add	fp, sp, #0
   12618:	sub	sp, sp, #12
   1261c:	str	r0, [fp, #-8]
   12620:	ldr	r3, [fp, #-8]
   12624:	cmp	r3, #0
   12628:	bne	12634 <mmk_stub_context@@Base+0x24>
   1262c:	mov	r3, #0
   12630:	b	1263c <mmk_stub_context@@Base+0x2c>
   12634:	ldr	r3, [fp, #-8]
   12638:	ldr	r3, [r3, #12]
   1263c:	mov	r0, r3
   12640:	add	sp, fp, #0
   12644:	pop	{fp}		; (ldr fp, [sp], #4)
   12648:	bx	lr

0001264c <mmk_stub_create_static@@Base>:
   1264c:	push	{r4, fp, lr}
   12650:	add	fp, sp, #8
   12654:	sub	sp, sp, #44	; 0x2c
   12658:	str	r0, [fp, #-40]	; 0xffffffd8
   1265c:	str	r1, [fp, #-44]	; 0xffffffd4
   12660:	str	r2, [fp, #-48]	; 0xffffffd0
   12664:	str	r3, [fp, #-52]	; 0xffffffcc
   12668:	bl	13550 <__libc_csu_fini@@Base+0xc>
   1266c:	mov	r1, r0
   12670:	ldr	r3, [pc, #436]	; 1282c <mmk_stub_create_static@@Base+0x1e0>
   12674:	mov	r2, #0
   12678:	str	r2, [r1, r3]
   1267c:	bl	13550 <__libc_csu_fini@@Base+0xc>
   12680:	mov	r1, r0
   12684:	ldr	r3, [pc, #420]	; 12830 <mmk_stub_create_static@@Base+0x1e4>
   12688:	mov	r2, #0
   1268c:	str	r2, [r1, r3]
   12690:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12694:	bl	13060 <mmk_strlen@@Base>
   12698:	mov	r3, r0
   1269c:	add	r3, r3, #1
   126a0:	mov	r0, r3
   126a4:	bl	130a8 <mmk_malloc@@Base>
   126a8:	str	r0, [fp, #-20]	; 0xffffffec
   126ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   126b0:	cmp	r3, #0
   126b4:	bne	126c0 <mmk_stub_create_static@@Base+0x74>
   126b8:	mvn	r3, #11
   126bc:	b	12820 <mmk_stub_create_static@@Base+0x1d4>
   126c0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   126c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   126c8:	bl	13004 <mmk_strcpy@@Base>
   126cc:	mov	r3, #0
   126d0:	str	r3, [fp, #-16]
   126d4:	mov	r1, #64	; 0x40
   126d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   126dc:	bl	12fdc <mmk_strchr@@Base>
   126e0:	str	r0, [fp, #-24]	; 0xffffffe8
   126e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   126e8:	cmp	r3, #0
   126ec:	beq	12708 <mmk_stub_create_static@@Base+0xbc>
   126f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   126f4:	mov	r2, #0
   126f8:	strb	r2, [r3]
   126fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12700:	add	r3, r3, #1
   12704:	str	r3, [fp, #-16]
   12708:	bl	11c30 <mmk_plt_ctx@@Base>
   1270c:	mov	r3, r0
   12710:	ldr	r1, [fp, #-16]
   12714:	mov	r0, r3
   12718:	bl	12310 <plt_get_lib@@Base>
   1271c:	str	r0, [fp, #-28]	; 0xffffffe4
   12720:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12724:	cmp	r3, #0
   12728:	bne	12734 <mmk_stub_create_static@@Base+0xe8>
   1272c:	mvn	r3, #1
   12730:	b	12820 <mmk_stub_create_static@@Base+0x1d4>
   12734:	mov	r3, #0
   12738:	str	r3, [fp, #-36]	; 0xffffffdc
   1273c:	sub	r3, fp, #36	; 0x24
   12740:	mov	r2, r3
   12744:	ldr	r1, [fp, #-20]	; 0xffffffec
   12748:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1274c:	bl	1252c <plt_get_offsets@@Base>
   12750:	str	r0, [fp, #-32]	; 0xffffffe0
   12754:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12758:	cmp	r3, #0
   1275c:	beq	1276c <mmk_stub_create_static@@Base+0x120>
   12760:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12764:	cmp	r3, #0
   12768:	bne	12774 <mmk_stub_create_static@@Base+0x128>
   1276c:	mvn	r3, #1
   12770:	b	12820 <mmk_stub_create_static@@Base+0x1d4>
   12774:	ldr	r4, [fp, #-36]	; 0xffffffdc
   12778:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1277c:	mov	r0, r3
   12780:	mov	r3, #40	; 0x28
   12784:	mov	r2, r3
   12788:	mov	r1, #0
   1278c:	bl	11268 <memset@plt>
   12790:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12794:	ldr	r2, [pc, #152]	; 12834 <mmk_stub_create_static@@Base+0x1e8>
   12798:	str	r2, [r3]
   1279c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   127a0:	ldr	r2, [pc, #144]	; 12838 <mmk_stub_create_static@@Base+0x1ec>
   127a4:	str	r2, [r3, #4]
   127a8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   127ac:	ldr	r2, [pc, #136]	; 1283c <mmk_stub_create_static@@Base+0x1f0>
   127b0:	str	r2, [r3, #8]
   127b4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   127b8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   127bc:	str	r2, [r3, #12]
   127c0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   127c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   127c8:	str	r2, [r3, #16]
   127cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   127d0:	ldr	r2, [fp, #-16]
   127d4:	str	r2, [r3, #20]
   127d8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   127dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   127e0:	str	r2, [r3, #24]
   127e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   127e8:	str	r4, [r3, #28]
   127ec:	ldr	r1, [fp, #-48]	; 0xffffffd0
   127f0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   127f4:	bl	12a30 <create_trampoline@@Base>
   127f8:	mov	r2, r0
   127fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12800:	str	r2, [r3, #32]
   12804:	ldr	r1, [fp, #-36]	; 0xffffffdc
   12808:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1280c:	ldr	r3, [r3, #32]
   12810:	mov	r2, r3
   12814:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12818:	bl	12568 <plt_set_offsets@@Base>
   1281c:	mov	r3, #0
   12820:	mov	r0, r3
   12824:	sub	sp, fp, #8
   12828:	pop	{r4, fp, pc}
   1282c:	andeq	r0, r0, ip
   12830:	andeq	r0, r0, r0, lsl r0
   12834:	muleq	r1, r0, r9
   12838:	strdeq	r2, [r1], -ip
   1283c:	ldrdeq	r2, [r1], -r8

00012840 <mmk_stub_create@@Base>:
   12840:	push	{fp, lr}
   12844:	add	fp, sp, #4
   12848:	sub	sp, sp, #24
   1284c:	str	r0, [fp, #-16]
   12850:	str	r1, [fp, #-20]	; 0xffffffec
   12854:	str	r2, [fp, #-24]	; 0xffffffe8
   12858:	bl	11b90 <mmk_init@@Base>
   1285c:	mov	r0, #40	; 0x28
   12860:	bl	130a8 <mmk_malloc@@Base>
   12864:	str	r0, [fp, #-8]
   12868:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1286c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12870:	ldr	r1, [fp, #-16]
   12874:	ldr	r0, [fp, #-8]
   12878:	bl	1264c <mmk_stub_create_static@@Base>
   1287c:	str	r0, [fp, #-12]
   12880:	ldr	r3, [fp, #-12]
   12884:	cmp	r3, #0
   12888:	bge	128ac <mmk_stub_create@@Base+0x6c>
   1288c:	ldr	r0, [fp, #-8]
   12890:	bl	130c8 <mmk_free@@Base>
   12894:	bl	11250 <__errno_location@plt>
   12898:	mov	r2, r0
   1289c:	ldr	r3, [fp, #-12]
   128a0:	str	r3, [r2]
   128a4:	mov	r3, #0
   128a8:	str	r3, [fp, #-8]
   128ac:	ldr	r3, [fp, #-8]
   128b0:	mov	r0, r3
   128b4:	sub	sp, fp, #4
   128b8:	pop	{fp, pc}

000128bc <mmk_stub_destroy_static@@Base>:
   128bc:	push	{fp, lr}
   128c0:	add	fp, sp, #4
   128c4:	sub	sp, sp, #8
   128c8:	str	r0, [fp, #-8]
   128cc:	ldr	r3, [fp, #-8]
   128d0:	ldr	r2, [r3, #24]
   128d4:	ldr	r3, [fp, #-8]
   128d8:	ldr	r3, [r3, #28]
   128dc:	mov	r1, r3
   128e0:	mov	r0, r2
   128e4:	bl	125ac <plt_reset_offsets@@Base>
   128e8:	ldr	r3, [fp, #-8]
   128ec:	ldr	r3, [r3, #24]
   128f0:	mov	r0, r3
   128f4:	bl	130c8 <mmk_free@@Base>
   128f8:	ldr	r3, [fp, #-8]
   128fc:	ldr	r3, [r3, #32]
   12900:	mov	r0, r3
   12904:	bl	12b00 <destroy_trampoline@@Base>
   12908:	ldr	r3, [fp, #-8]
   1290c:	ldr	r3, [r3, #16]
   12910:	mov	r0, r3
   12914:	bl	130c8 <mmk_free@@Base>
   12918:	nop			; (mov r0, r0)
   1291c:	sub	sp, fp, #4
   12920:	pop	{fp, pc}

00012924 <mmk_stub_destroy@@Base>:
   12924:	push	{fp, lr}
   12928:	add	fp, sp, #4
   1292c:	sub	sp, sp, #8
   12930:	str	r0, [fp, #-8]
   12934:	ldr	r0, [fp, #-8]
   12938:	bl	128bc <mmk_stub_destroy_static@@Base>
   1293c:	ldr	r0, [fp, #-8]
   12940:	bl	130c8 <mmk_free@@Base>
   12944:	nop			; (mov r0, r0)
   12948:	sub	sp, fp, #4
   1294c:	pop	{fp, pc}

00012950 <mmk_ask_ctx@@Base>:
   12950:	push	{fp, lr}
   12954:	add	fp, sp, #4
   12958:	sub	sp, sp, #8
   1295c:	str	r0, [fp, #-8]
   12960:	bl	13550 <__libc_csu_fini@@Base+0xc>
   12964:	mov	r1, r0
   12968:	ldr	r3, [pc, #28]	; 1298c <mmk_ask_ctx@@Base+0x3c>
   1296c:	mov	r2, #1
   12970:	str	r2, [r1, r3]
   12974:	ldr	r3, [fp, #-8]
   12978:	blx	r3
   1297c:	mov	r3, r0
   12980:	mov	r0, r3
   12984:	sub	sp, fp, #4
   12988:	pop	{fp, pc}
   1298c:	andeq	r0, r0, ip

00012990 <mmk_ctx_asked@@Base>:
   12990:	push	{fp, lr}
   12994:	add	fp, sp, #4
   12998:	sub	sp, sp, #8
   1299c:	bl	13550 <__libc_csu_fini@@Base+0xc>
   129a0:	mov	r2, r0
   129a4:	ldr	r3, [pc, #40]	; 129d4 <mmk_ctx_asked@@Base+0x44>
   129a8:	ldr	r3, [r2, r3]
   129ac:	str	r3, [fp, #-8]
   129b0:	bl	13550 <__libc_csu_fini@@Base+0xc>
   129b4:	mov	r1, r0
   129b8:	ldr	r3, [pc, #20]	; 129d4 <mmk_ctx_asked@@Base+0x44>
   129bc:	mov	r2, #0
   129c0:	str	r2, [r1, r3]
   129c4:	ldr	r3, [fp, #-8]
   129c8:	mov	r0, r3
   129cc:	sub	sp, fp, #4
   129d0:	pop	{fp, pc}
   129d4:	andeq	r0, r0, ip

000129d8 <mmk_ctx@@Base>:
   129d8:	push	{fp, lr}
   129dc:	add	fp, sp, #4
   129e0:	bl	13550 <__libc_csu_fini@@Base+0xc>
   129e4:	mov	r2, r0
   129e8:	ldr	r3, [pc, #8]	; 129f8 <mmk_ctx@@Base+0x20>
   129ec:	ldr	r3, [r2, r3]
   129f0:	mov	r0, r3
   129f4:	pop	{fp, pc}
   129f8:	andeq	r0, r0, r0, lsl r0

000129fc <mmk_set_ctx@@Base>:
   129fc:	push	{fp, lr}
   12a00:	add	fp, sp, #4
   12a04:	sub	sp, sp, #8
   12a08:	str	r0, [fp, #-8]
   12a0c:	bl	13550 <__libc_csu_fini@@Base+0xc>
   12a10:	mov	r1, r0
   12a14:	ldr	r2, [pc, #16]	; 12a2c <mmk_set_ctx@@Base+0x30>
   12a18:	ldr	r3, [fp, #-8]
   12a1c:	str	r3, [r1, r2]
   12a20:	nop			; (mov r0, r0)
   12a24:	sub	sp, fp, #4
   12a28:	pop	{fp, pc}
   12a2c:	andeq	r0, r0, r0, lsl r0

00012a30 <create_trampoline@@Base>:
   12a30:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   12a34:	ldr	r7, [pc, #168]	; 12ae4 <create_trampoline@@Base+0xb4>
   12a38:	ldr	r5, [pc, #168]	; 12ae8 <create_trampoline@@Base+0xb8>
   12a3c:	sub	r5, r5, r7
   12a40:	cmp	r5, #4096	; 0x1000
   12a44:	bcc	12a6c <create_trampoline@@Base+0x3c>
   12a48:	ldr	r3, [pc, #156]	; 12aec <create_trampoline@@Base+0xbc>
   12a4c:	str	r3, [sp]
   12a50:	mov	r3, #45	; 0x2d
   12a54:	ldr	r0, [pc, #148]	; 12af0 <create_trampoline@@Base+0xc0>
   12a58:	ldr	r2, [pc, #148]	; 12af4 <create_trampoline@@Base+0xc4>
   12a5c:	ldr	r1, [pc, #148]	; 12af8 <create_trampoline@@Base+0xc8>
   12a60:	ldr	r0, [r0]
   12a64:	bl	11244 <fprintf@plt>
   12a68:	bl	11298 <abort@plt>
   12a6c:	mvn	r3, #0
   12a70:	mov	r8, r0
   12a74:	mov	r0, #0
   12a78:	str	r3, [sp]
   12a7c:	mov	r6, r1
   12a80:	str	r0, [sp, #4]
   12a84:	mov	r3, #34	; 0x22
   12a88:	mov	r2, #7
   12a8c:	mov	r1, #4096	; 0x1000
   12a90:	bl	1122c <mmap@plt>
   12a94:	cmn	r0, #1
   12a98:	mov	r4, r0
   12a9c:	ldreq	r3, [pc, #88]	; 12afc <create_trampoline@@Base+0xcc>
   12aa0:	streq	r3, [sp]
   12aa4:	moveq	r3, #69	; 0x45
   12aa8:	beq	12a54 <create_trampoline@@Base+0x24>
   12aac:	str	r6, [r0, #4]
   12ab0:	add	r6, r0, #8
   12ab4:	str	r8, [r0]
   12ab8:	mov	r2, r5
   12abc:	mov	r1, r7
   12ac0:	mov	r0, r6
   12ac4:	bl	111e4 <memcpy@plt>
   12ac8:	mov	r2, #5
   12acc:	mov	r1, #4096	; 0x1000
   12ad0:	mov	r0, r4
   12ad4:	bl	111cc <mprotect@plt>
   12ad8:	mov	r0, r6
   12adc:	add	sp, sp, #8
   12ae0:	pop	{r4, r5, r6, r7, r8, pc}
   12ae4:	andeq	r3, r1, r8, ror #4
   12ae8:	andeq	r3, r1, r4, asr #5
   12aec:	andeq	r3, r1, ip, lsl r8
   12af0:	andeq	r4, r2, r8, ror r0
   12af4:	andeq	r3, r1, r1, asr #15
   12af8:	strdeq	r3, [r1], -pc	; <UNPREDICTABLE>
   12afc:	andeq	r3, r1, r6, lsr r8

00012b00 <destroy_trampoline@@Base>:
   12b00:	mov	r1, #4096	; 0x1000
   12b04:	sub	r0, r0, #8
   12b08:	b	11274 <munmap@plt>

00012b0c <mmk_verify_set_times@@Base>:
   12b0c:	push	{fp, lr}
   12b10:	add	fp, sp, #4
   12b14:	sub	sp, sp, #8
   12b18:	str	r0, [fp, #-8]
   12b1c:	bl	13550 <__libc_csu_fini@@Base+0xc>
   12b20:	mov	r1, r0
   12b24:	ldr	r2, [pc, #16]	; 12b3c <mmk_verify_set_times@@Base+0x30>
   12b28:	ldr	r3, [fp, #-8]
   12b2c:	str	r3, [r1, r2]
   12b30:	nop			; (mov r0, r0)
   12b34:	sub	sp, fp, #4
   12b38:	pop	{fp, pc}
   12b3c:	andeq	r0, r0, r4, lsl r0

00012b40 <mmk_verify_times@@Base>:
   12b40:	push	{fp, lr}
   12b44:	add	fp, sp, #4
   12b48:	sub	sp, sp, #16
   12b4c:	str	r0, [fp, #-16]
   12b50:	bl	13550 <__libc_csu_fini@@Base+0xc>
   12b54:	mov	r2, r0
   12b58:	ldr	r3, [pc, #244]	; 12c54 <mmk_verify_times@@Base+0x114>
   12b5c:	ldr	r3, [r2, r3]
   12b60:	str	r3, [fp, #-8]
   12b64:	ldr	r3, [fp, #-16]
   12b68:	ldr	r3, [r3, #4]
   12b6c:	cmp	r3, #0
   12b70:	beq	12b8c <mmk_verify_times@@Base+0x4c>
   12b74:	ldr	r3, [fp, #-8]
   12b78:	cmp	r3, #0
   12b7c:	moveq	r3, #1
   12b80:	movne	r3, #0
   12b84:	uxtb	r3, r3
   12b88:	b	12c48 <mmk_verify_times@@Base+0x108>
   12b8c:	ldr	r3, [fp, #-16]
   12b90:	ldr	r3, [r3, #8]
   12b94:	cmp	r3, #0
   12b98:	bne	12bac <mmk_verify_times@@Base+0x6c>
   12b9c:	ldr	r3, [fp, #-16]
   12ba0:	ldr	r3, [r3, #12]
   12ba4:	cmp	r3, #0
   12ba8:	beq	12c04 <mmk_verify_times@@Base+0xc4>
   12bac:	ldr	r3, [fp, #-16]
   12bb0:	ldr	r3, [r3, #12]
   12bb4:	cmp	r3, #0
   12bb8:	beq	12bc8 <mmk_verify_times@@Base+0x88>
   12bbc:	ldr	r3, [fp, #-16]
   12bc0:	ldr	r3, [r3, #12]
   12bc4:	b	12bcc <mmk_verify_times@@Base+0x8c>
   12bc8:	ldr	r3, [fp, #-8]
   12bcc:	str	r3, [fp, #-12]
   12bd0:	ldr	r3, [fp, #-16]
   12bd4:	ldr	r2, [r3, #8]
   12bd8:	ldr	r3, [fp, #-8]
   12bdc:	cmp	r2, r3
   12be0:	bhi	12bfc <mmk_verify_times@@Base+0xbc>
   12be4:	ldr	r2, [fp, #-8]
   12be8:	ldr	r3, [fp, #-12]
   12bec:	cmp	r2, r3
   12bf0:	bhi	12bfc <mmk_verify_times@@Base+0xbc>
   12bf4:	mov	r3, #1
   12bf8:	b	12c48 <mmk_verify_times@@Base+0x108>
   12bfc:	mov	r3, #0
   12c00:	b	12c48 <mmk_verify_times@@Base+0x108>
   12c04:	ldr	r3, [fp, #-16]
   12c08:	ldr	r3, [r3, #20]
   12c0c:	cmp	r3, #0
   12c10:	beq	12c2c <mmk_verify_times@@Base+0xec>
   12c14:	ldr	r3, [fp, #-16]
   12c18:	ldr	r3, [r3, #20]
   12c1c:	ldr	r0, [fp, #-8]
   12c20:	blx	r3
   12c24:	mov	r3, r0
   12c28:	b	12c48 <mmk_verify_times@@Base+0x108>
   12c2c:	ldr	r3, [fp, #-16]
   12c30:	ldr	r2, [r3, #16]
   12c34:	ldr	r3, [fp, #-8]
   12c38:	cmp	r2, r3
   12c3c:	moveq	r3, #1
   12c40:	movne	r3, #0
   12c44:	uxtb	r3, r3
   12c48:	mov	r0, r3
   12c4c:	sub	sp, fp, #4
   12c50:	pop	{fp, pc}
   12c54:	andeq	r0, r0, r4, lsl r0
   12c58:	push	{fp, lr}
   12c5c:	add	fp, sp, #4
   12c60:	sub	sp, sp, #32
   12c64:	str	r0, [fp, #-24]	; 0xffffffe8
   12c68:	str	r1, [fp, #-28]	; 0xffffffe4
   12c6c:	str	r2, [fp, #-32]	; 0xffffffe0
   12c70:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12c74:	add	r3, r3, #4
   12c78:	str	r3, [fp, #-28]	; 0xffffffe4
   12c7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12c80:	sub	r3, r3, #4
   12c84:	str	r3, [fp, #-32]	; 0xffffffe0
   12c88:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12c8c:	bl	12074 <mmk_mock_params_begin@@Base>
   12c90:	str	r0, [fp, #-8]
   12c94:	b	12cf4 <mmk_verify_times@@Base+0x1b4>
   12c98:	ldr	r3, [fp, #-8]
   12c9c:	add	r3, r3, #4
   12ca0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12ca4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12ca8:	mov	r0, r3
   12cac:	bl	12f10 <mmk_memcmp@@Base>
   12cb0:	str	r0, [fp, #-12]
   12cb4:	ldr	r3, [fp, #-12]
   12cb8:	cmp	r3, #0
   12cbc:	bne	12ce4 <mmk_verify_times@@Base+0x1a4>
   12cc0:	ldr	r3, [fp, #-8]
   12cc4:	str	r3, [fp, #-16]
   12cc8:	ldr	r3, [fp, #-16]
   12ccc:	ldr	r3, [r3]
   12cd0:	add	r2, r3, #1
   12cd4:	ldr	r3, [fp, #-16]
   12cd8:	str	r2, [r3]
   12cdc:	mov	r3, #1
   12ce0:	b	12d04 <mmk_verify_times@@Base+0x1c4>
   12ce4:	ldr	r1, [fp, #-8]
   12ce8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12cec:	bl	120c8 <mmk_mock_params_next@@Base>
   12cf0:	str	r0, [fp, #-8]
   12cf4:	ldr	r3, [fp, #-8]
   12cf8:	cmp	r3, #0
   12cfc:	bne	12c98 <mmk_verify_times@@Base+0x158>
   12d00:	mov	r3, #0
   12d04:	mov	r0, r3
   12d08:	sub	sp, fp, #4
   12d0c:	pop	{fp, pc}

00012d10 <mmk_verify_register_call@@Base>:
   12d10:	push	{fp, lr}
   12d14:	add	fp, sp, #4
   12d18:	sub	sp, sp, #24
   12d1c:	str	r0, [fp, #-16]
   12d20:	str	r1, [fp, #-20]	; 0xffffffec
   12d24:	bl	129d8 <mmk_ctx@@Base>
   12d28:	mov	r3, r0
   12d2c:	mov	r0, r3
   12d30:	bl	12610 <mmk_stub_context@@Base>
   12d34:	str	r0, [fp, #-8]
   12d38:	ldr	r3, [fp, #-8]
   12d3c:	ldr	r3, [r3, #8]
   12d40:	cmp	r3, #0
   12d44:	bne	12d9c <mmk_verify_register_call@@Base+0x8c>
   12d48:	mov	r0, #4096	; 0x1000
   12d4c:	bl	130a8 <mmk_malloc@@Base>
   12d50:	mov	r2, r0
   12d54:	ldr	r3, [fp, #-8]
   12d58:	str	r2, [r3, #8]
   12d5c:	ldr	r3, [fp, #-8]
   12d60:	ldr	r3, [r3, #8]
   12d64:	cmp	r3, #0
   12d68:	bne	12d90 <mmk_verify_register_call@@Base+0x80>
   12d6c:	ldr	r3, [pc, #396]	; 12f00 <mmk_verify_register_call@@Base+0x1f0>
   12d70:	ldr	r0, [r3]
   12d74:	ldr	r3, [pc, #392]	; 12f04 <mmk_verify_register_call@@Base+0x1f4>
   12d78:	str	r3, [sp]
   12d7c:	mov	r3, #79	; 0x4f
   12d80:	ldr	r2, [pc, #384]	; 12f08 <mmk_verify_register_call@@Base+0x1f8>
   12d84:	ldr	r1, [pc, #384]	; 12f0c <mmk_verify_register_call@@Base+0x1fc>
   12d88:	bl	11244 <fprintf@plt>
   12d8c:	bl	11298 <abort@plt>
   12d90:	ldr	r3, [fp, #-8]
   12d94:	mov	r2, #4096	; 0x1000
   12d98:	str	r2, [r3, #16]
   12d9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12da0:	mov	r2, r3
   12da4:	ldr	r1, [fp, #-16]
   12da8:	ldr	r0, [fp, #-8]
   12dac:	bl	12c58 <mmk_verify_times@@Base+0x118>
   12db0:	mov	r3, r0
   12db4:	cmp	r3, #0
   12db8:	bne	12ef4 <mmk_verify_register_call@@Base+0x1e4>
   12dbc:	ldr	r3, [fp, #-8]
   12dc0:	ldr	r2, [r3, #12]
   12dc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12dc8:	add	r3, r2, r3
   12dcc:	add	r2, r3, #4
   12dd0:	ldr	r3, [fp, #-8]
   12dd4:	ldr	r3, [r3, #16]
   12dd8:	cmp	r2, r3
   12ddc:	bcc	12e78 <mmk_verify_register_call@@Base+0x168>
   12de0:	b	12df8 <mmk_verify_register_call@@Base+0xe8>
   12de4:	ldr	r3, [fp, #-8]
   12de8:	ldr	r3, [r3, #16]
   12dec:	add	r2, r3, #4096	; 0x1000
   12df0:	ldr	r3, [fp, #-8]
   12df4:	str	r2, [r3, #16]
   12df8:	ldr	r3, [fp, #-8]
   12dfc:	ldr	r2, [r3, #12]
   12e00:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e04:	add	r3, r2, r3
   12e08:	add	r2, r3, #4
   12e0c:	ldr	r3, [fp, #-8]
   12e10:	ldr	r3, [r3, #16]
   12e14:	cmp	r2, r3
   12e18:	bcs	12de4 <mmk_verify_register_call@@Base+0xd4>
   12e1c:	ldr	r3, [fp, #-8]
   12e20:	ldr	r2, [r3, #8]
   12e24:	ldr	r3, [fp, #-8]
   12e28:	ldr	r3, [r3, #16]
   12e2c:	mov	r1, r3
   12e30:	mov	r0, r2
   12e34:	bl	130b8 <mmk_realloc@@Base>
   12e38:	mov	r2, r0
   12e3c:	ldr	r3, [fp, #-8]
   12e40:	str	r2, [r3, #8]
   12e44:	ldr	r3, [fp, #-8]
   12e48:	ldr	r3, [r3, #8]
   12e4c:	cmp	r3, #0
   12e50:	bne	12e78 <mmk_verify_register_call@@Base+0x168>
   12e54:	ldr	r3, [pc, #164]	; 12f00 <mmk_verify_register_call@@Base+0x1f0>
   12e58:	ldr	r0, [r3]
   12e5c:	ldr	r3, [pc, #160]	; 12f04 <mmk_verify_register_call@@Base+0x1f4>
   12e60:	str	r3, [sp]
   12e64:	mov	r3, #91	; 0x5b
   12e68:	ldr	r2, [pc, #152]	; 12f08 <mmk_verify_register_call@@Base+0x1f8>
   12e6c:	ldr	r1, [pc, #152]	; 12f0c <mmk_verify_register_call@@Base+0x1fc>
   12e70:	bl	11244 <fprintf@plt>
   12e74:	bl	11298 <abort@plt>
   12e78:	ldr	r3, [fp, #-8]
   12e7c:	ldr	r2, [r3, #8]
   12e80:	ldr	r3, [fp, #-8]
   12e84:	ldr	r3, [r3, #12]
   12e88:	add	r3, r2, r3
   12e8c:	sub	r1, fp, #20
   12e90:	mov	r2, #4
   12e94:	mov	r0, r3
   12e98:	bl	12f54 <mmk_memcpy@@Base>
   12e9c:	ldr	r3, [fp, #-8]
   12ea0:	ldr	r2, [r3, #8]
   12ea4:	ldr	r3, [fp, #-8]
   12ea8:	ldr	r3, [r3, #12]
   12eac:	add	r3, r3, #4
   12eb0:	add	r3, r2, r3
   12eb4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12eb8:	ldr	r1, [fp, #-16]
   12ebc:	mov	r0, r3
   12ec0:	bl	12f54 <mmk_memcpy@@Base>
   12ec4:	str	r0, [fp, #-12]
   12ec8:	ldr	r3, [fp, #-12]
   12ecc:	mov	r2, #1
   12ed0:	str	r2, [r3]
   12ed4:	ldr	r3, [fp, #-8]
   12ed8:	ldr	r2, [r3, #12]
   12edc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ee0:	add	r3, r2, r3
   12ee4:	add	r2, r3, #4
   12ee8:	ldr	r3, [fp, #-8]
   12eec:	str	r2, [r3, #12]
   12ef0:	b	12ef8 <mmk_verify_register_call@@Base+0x1e8>
   12ef4:	nop			; (mov r0, r0)
   12ef8:	sub	sp, fp, #4
   12efc:	pop	{fp, pc}
   12f00:	andeq	r4, r2, r8, ror r0
   12f04:	andeq	r3, r1, r4, lsr #17
   12f08:	andeq	r3, r1, r8, asr #16
   12f0c:	andeq	r3, r1, r4, lsl #17

00012f10 <mmk_memcmp@@Base>:
   12f10:	sub	r1, r1, #1
   12f14:	add	r2, r0, r2
   12f18:	cmp	r0, r2
   12f1c:	bne	12f28 <mmk_memcmp@@Base+0x18>
   12f20:	mov	r0, #0
   12f24:	bx	lr
   12f28:	ldrb	ip, [r0]
   12f2c:	ldrb	r3, [r1, #1]!
   12f30:	cmp	ip, r3
   12f34:	beq	12f44 <mmk_memcmp@@Base+0x34>
   12f38:	bcc	12f4c <mmk_memcmp@@Base+0x3c>
   12f3c:	mov	r0, #1
   12f40:	bx	lr
   12f44:	add	r0, r0, #1
   12f48:	b	12f18 <mmk_memcmp@@Base+0x8>
   12f4c:	mvn	r0, #0
   12f50:	bx	lr

00012f54 <mmk_memcpy@@Base>:
   12f54:	sub	r1, r1, #1
   12f58:	add	r2, r0, r2
   12f5c:	mov	r3, r0
   12f60:	cmp	r3, r2
   12f64:	bne	12f6c <mmk_memcpy@@Base+0x18>
   12f68:	bx	lr
   12f6c:	ldrb	ip, [r1, #1]!
   12f70:	strb	ip, [r3], #1
   12f74:	b	12f60 <mmk_memcpy@@Base+0xc>

00012f78 <mmk_strneq@@Base>:
   12f78:	sub	r0, r0, #1
   12f7c:	push	{lr}		; (str lr, [sp, #-4]!)
   12f80:	mov	lr, r1
   12f84:	ldrb	r3, [r0, #1]!
   12f88:	cmp	r3, #0
   12f8c:	beq	12fbc <mmk_strneq@@Base+0x44>
   12f90:	ldrb	ip, [r1], #1
   12f94:	cmp	ip, #0
   12f98:	beq	12fbc <mmk_strneq@@Base+0x44>
   12f9c:	cmp	r2, #0
   12fa0:	bne	12fac <mmk_strneq@@Base+0x34>
   12fa4:	mov	r0, #1
   12fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   12fac:	cmp	r3, ip
   12fb0:	bne	12fd4 <mmk_strneq@@Base+0x5c>
   12fb4:	sub	r2, r2, #1
   12fb8:	b	12f80 <mmk_strneq@@Base+0x8>
   12fbc:	cmp	r2, #0
   12fc0:	beq	12fa4 <mmk_strneq@@Base+0x2c>
   12fc4:	ldrb	r0, [lr]
   12fc8:	clz	r0, r0
   12fcc:	lsr	r0, r0, #5
   12fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fd4:	mov	r0, #0
   12fd8:	pop	{pc}		; (ldr pc, [sp], #4)

00012fdc <mmk_strchr@@Base>:
   12fdc:	mov	r3, r0
   12fe0:	ldrb	r2, [r0], #1
   12fe4:	cmp	r2, #0
   12fe8:	bne	12ff4 <mmk_strchr@@Base+0x18>
   12fec:	mov	r0, r2
   12ff0:	bx	lr
   12ff4:	cmp	r2, r1
   12ff8:	bne	12fdc <mmk_strchr@@Base>
   12ffc:	mov	r0, r3
   13000:	bx	lr

00013004 <mmk_strcpy@@Base>:
   13004:	sub	r1, r1, #1
   13008:	ldrb	r3, [r1, #1]!
   1300c:	cmp	r3, #0
   13010:	bne	1301c <mmk_strcpy@@Base+0x18>
   13014:	strb	r3, [r0]
   13018:	bx	lr
   1301c:	strb	r3, [r0], #1
   13020:	b	13008 <mmk_strcpy@@Base+0x4>

00013024 <mmk_strncpy@@Base>:
   13024:	sub	r1, r1, #1
   13028:	mov	r3, r0
   1302c:	push	{lr}		; (str lr, [sp, #-4]!)
   13030:	sub	ip, r3, r2
   13034:	ldrb	lr, [r1, #1]!
   13038:	cmp	lr, #0
   1303c:	cmpne	r0, ip
   13040:	movne	ip, #1
   13044:	moveq	ip, #0
   13048:	bne	13058 <mmk_strncpy@@Base+0x34>
   1304c:	strb	ip, [r3]
   13050:	mov	r0, r3
   13054:	pop	{pc}		; (ldr pc, [sp], #4)
   13058:	strb	lr, [r3], #1
   1305c:	b	13030 <mmk_strncpy@@Base+0xc>

00013060 <mmk_strlen@@Base>:
   13060:	mov	r2, r0
   13064:	mov	r3, r0
   13068:	sub	r0, r3, r2
   1306c:	ldrb	r1, [r3], #1
   13070:	cmp	r1, #0
   13074:	bne	13068 <mmk_strlen@@Base+0x8>
   13078:	bx	lr

0001307c <mmk_isspace@@Base>:
   1307c:	cmp	r0, #9
   13080:	cmpne	r0, #32
   13084:	mov	r3, r0
   13088:	moveq	r0, #1
   1308c:	movne	r0, #0
   13090:	bxeq	lr
   13094:	cmp	r3, #10
   13098:	cmpne	r3, #13
   1309c:	moveq	r0, #1
   130a0:	movne	r0, #0
   130a4:	bx	lr

000130a8 <mmk_malloc@@Base>:
   130a8:	ldr	r3, [pc, #4]	; 130b4 <mmk_malloc@@Base+0xc>
   130ac:	ldr	r3, [r3]
   130b0:	bx	r3
   130b4:	andeq	r4, r2, r8, lsr #1

000130b8 <mmk_realloc@@Base>:
   130b8:	ldr	r3, [pc, #4]	; 130c4 <mmk_realloc@@Base+0xc>
   130bc:	ldr	r3, [r3]
   130c0:	bx	r3
   130c4:	andeq	r4, r2, r0, lsr #1

000130c8 <mmk_free@@Base>:
   130c8:	ldr	r3, [pc, #4]	; 130d4 <mmk_free@@Base+0xc>
   130cc:	ldr	r3, [r3]
   130d0:	bx	r3
   130d4:	andeq	r4, r2, r4, lsr #1

000130d8 <mmk_init_vital_functions@@Base>:
   130d8:	push	{r0, r1, r4, lr}
   130dc:	mov	r4, r0
   130e0:	mov	r0, #0
   130e4:	bl	111fc <malloc@plt>
   130e8:	mov	r1, #0
   130ec:	bl	111f0 <realloc@plt>
   130f0:	bl	111d8 <free@plt>
   130f4:	ldr	r1, [pc, #144]	; 1318c <mmk_init_vital_functions@@Base+0xb4>
   130f8:	mov	r0, r4
   130fc:	bl	125d0 <plt_get_real_fn@@Base>
   13100:	ldr	r3, [pc, #136]	; 13190 <mmk_init_vital_functions@@Base+0xb8>
   13104:	cmp	r0, #0
   13108:	str	r0, [r3]
   1310c:	bne	13134 <mmk_init_vital_functions@@Base+0x5c>
   13110:	ldr	r3, [pc, #124]	; 13194 <mmk_init_vital_functions@@Base+0xbc>
   13114:	str	r3, [sp]
   13118:	mov	r3, #88	; 0x58
   1311c:	ldr	r0, [pc, #116]	; 13198 <mmk_init_vital_functions@@Base+0xc0>
   13120:	ldr	r2, [pc, #116]	; 1319c <mmk_init_vital_functions@@Base+0xc4>
   13124:	ldr	r1, [pc, #116]	; 131a0 <mmk_init_vital_functions@@Base+0xc8>
   13128:	ldr	r0, [r0]
   1312c:	bl	11244 <fprintf@plt>
   13130:	bl	11298 <abort@plt>
   13134:	ldr	r1, [pc, #104]	; 131a4 <mmk_init_vital_functions@@Base+0xcc>
   13138:	mov	r0, r4
   1313c:	bl	125d0 <plt_get_real_fn@@Base>
   13140:	ldr	r3, [pc, #96]	; 131a8 <mmk_init_vital_functions@@Base+0xd0>
   13144:	cmp	r0, #0
   13148:	str	r0, [r3]
   1314c:	ldreq	r3, [pc, #88]	; 131ac <mmk_init_vital_functions@@Base+0xd4>
   13150:	streq	r3, [sp]
   13154:	moveq	r3, #89	; 0x59
   13158:	beq	1311c <mmk_init_vital_functions@@Base+0x44>
   1315c:	ldr	r1, [pc, #76]	; 131b0 <mmk_init_vital_functions@@Base+0xd8>
   13160:	mov	r0, r4
   13164:	bl	125d0 <plt_get_real_fn@@Base>
   13168:	ldr	r3, [pc, #68]	; 131b4 <mmk_init_vital_functions@@Base+0xdc>
   1316c:	cmp	r0, #0
   13170:	str	r0, [r3]
   13174:	ldreq	r3, [pc, #60]	; 131b8 <mmk_init_vital_functions@@Base+0xe0>
   13178:	streq	r3, [sp]
   1317c:	moveq	r3, #90	; 0x5a
   13180:	beq	1311c <mmk_init_vital_functions@@Base+0x44>
   13184:	add	sp, sp, #8
   13188:	pop	{r4, pc}
   1318c:			; <UNDEFINED> instruction: 0x000138b4
   13190:	andeq	r4, r2, r8, lsr #1
   13194:	strdeq	r3, [r1], -r5
   13198:	andeq	r4, r2, r8, ror r0
   1319c:			; <UNDEFINED> instruction: 0x000138bb
   131a0:	strdeq	r3, [r1], -pc	; <UNPREDICTABLE>
   131a4:	andeq	r3, r1, fp, lsr #18
   131a8:	andeq	r4, r2, r0, lsr #1
   131ac:	andeq	r3, r1, r3, lsr r9
   131b0:	andeq	r3, r1, fp, ror #18
   131b4:	andeq	r4, r2, r4, lsr #1
   131b8:	andeq	r3, r1, r0, ror r9

000131bc <mmk_when_init@@Base>:
   131bc:	push	{fp, lr}
   131c0:	add	fp, sp, #4
   131c4:	sub	sp, sp, #8
   131c8:	str	r0, [fp, #-8]
   131cc:	bl	13550 <__libc_csu_fini@@Base+0xc>
   131d0:	mov	r1, r0
   131d4:	ldr	r2, [pc, #16]	; 131ec <mmk_when_init@@Base+0x30>
   131d8:	ldr	r3, [fp, #-8]
   131dc:	str	r3, [r1, r2]
   131e0:	nop			; (mov r0, r0)
   131e4:	sub	sp, fp, #4
   131e8:	pop	{fp, pc}
   131ec:	andeq	r0, r0, r8, lsl r0

000131f0 <mmk_when_get_result@@Base>:
   131f0:	push	{fp, lr}
   131f4:	add	fp, sp, #4
   131f8:	bl	13550 <__libc_csu_fini@@Base+0xc>
   131fc:	mov	r2, r0
   13200:	ldr	r3, [pc, #8]	; 13210 <mmk_when_get_result@@Base+0x20>
   13204:	ldr	r3, [r2, r3]
   13208:	mov	r0, r3
   1320c:	pop	{fp, pc}
   13210:	andeq	r0, r0, r8, lsl r0

00013214 <mmk_when_impl@@Base>:
   13214:	push	{fp, lr}
   13218:	add	fp, sp, #4
   1321c:	sub	sp, sp, #16
   13220:	str	r0, [fp, #-16]
   13224:	str	r1, [fp, #-20]	; 0xffffffec
   13228:	ldr	r3, [fp, #-20]	; 0xffffffec
   1322c:	str	r3, [fp, #-8]
   13230:	bl	11d38 <mmk_matcher_ctx@@Base>
   13234:	mov	r2, r0
   13238:	ldr	r3, [fp, #-8]
   1323c:	str	r2, [r3]
   13240:	ldr	r3, [fp, #-16]
   13244:	ldr	r2, [r3]
   13248:	ldr	r3, [fp, #-8]
   1324c:	str	r2, [r3, #4]
   13250:	ldr	r3, [fp, #-16]
   13254:	ldr	r2, [fp, #-8]
   13258:	str	r2, [r3]
   1325c:	nop			; (mov r0, r0)
   13260:	sub	sp, fp, #4
   13264:	pop	{fp, pc}

00013268 <mmk_trampoline@@Base>:
   13268:	sub	ip, pc, #8
   1326c:	push	{r0, r1, r2, r3}
   13270:	push	{ip, lr}
   13274:	ldr	r0, [ip, #-8]
   13278:	ldr	ip, [r0, #4]
   1327c:	blx	ip
   13280:	pop	{ip, lr}
   13284:	push	{ip, lr}
   13288:	ldr	ip, [ip, #-8]
   1328c:	ldr	ip, [ip]
   13290:	blx	ip
   13294:	cmp	r0, #0
   13298:	bne	132a8 <mmk_trampoline@@Base+0x40>
   1329c:	pop	{ip, lr}
   132a0:	pop	{r0, r1, r2, r3}
   132a4:	ldr	pc, [ip, #-4]
   132a8:	pop	{ip, lr}
   132ac:	pop	{r0, r1, r2, r3}
   132b0:	push	{ip, lr}
   132b4:	ldr	ip, [ip, #-8]
   132b8:	ldr	ip, [ip, #8]
   132bc:	blx	ip
   132c0:	pop	{ip, pc}

000132c4 <mmk_trampoline_end@@Base>:
   132c4:	nop			; (mov r0, r0)
   132c8:	subs	r2, r1, #1
   132cc:	bxeq	lr
   132d0:	bcc	134a8 <mmk_trampoline_end@@Base+0x1e4>
   132d4:	cmp	r0, r1
   132d8:	bls	1348c <mmk_trampoline_end@@Base+0x1c8>
   132dc:	tst	r1, r2
   132e0:	beq	13498 <mmk_trampoline_end@@Base+0x1d4>
   132e4:	clz	r3, r0
   132e8:	clz	r2, r1
   132ec:	sub	r3, r2, r3
   132f0:	rsbs	r3, r3, #31
   132f4:	addne	r3, r3, r3, lsl #1
   132f8:	mov	r2, #0
   132fc:	addne	pc, pc, r3, lsl #2
   13300:	nop			; (mov r0, r0)
   13304:	cmp	r0, r1, lsl #31
   13308:	adc	r2, r2, r2
   1330c:	subcs	r0, r0, r1, lsl #31
   13310:	cmp	r0, r1, lsl #30
   13314:	adc	r2, r2, r2
   13318:	subcs	r0, r0, r1, lsl #30
   1331c:	cmp	r0, r1, lsl #29
   13320:	adc	r2, r2, r2
   13324:	subcs	r0, r0, r1, lsl #29
   13328:	cmp	r0, r1, lsl #28
   1332c:	adc	r2, r2, r2
   13330:	subcs	r0, r0, r1, lsl #28
   13334:	cmp	r0, r1, lsl #27
   13338:	adc	r2, r2, r2
   1333c:	subcs	r0, r0, r1, lsl #27
   13340:	cmp	r0, r1, lsl #26
   13344:	adc	r2, r2, r2
   13348:	subcs	r0, r0, r1, lsl #26
   1334c:	cmp	r0, r1, lsl #25
   13350:	adc	r2, r2, r2
   13354:	subcs	r0, r0, r1, lsl #25
   13358:	cmp	r0, r1, lsl #24
   1335c:	adc	r2, r2, r2
   13360:	subcs	r0, r0, r1, lsl #24
   13364:	cmp	r0, r1, lsl #23
   13368:	adc	r2, r2, r2
   1336c:	subcs	r0, r0, r1, lsl #23
   13370:	cmp	r0, r1, lsl #22
   13374:	adc	r2, r2, r2
   13378:	subcs	r0, r0, r1, lsl #22
   1337c:	cmp	r0, r1, lsl #21
   13380:	adc	r2, r2, r2
   13384:	subcs	r0, r0, r1, lsl #21
   13388:	cmp	r0, r1, lsl #20
   1338c:	adc	r2, r2, r2
   13390:	subcs	r0, r0, r1, lsl #20
   13394:	cmp	r0, r1, lsl #19
   13398:	adc	r2, r2, r2
   1339c:	subcs	r0, r0, r1, lsl #19
   133a0:	cmp	r0, r1, lsl #18
   133a4:	adc	r2, r2, r2
   133a8:	subcs	r0, r0, r1, lsl #18
   133ac:	cmp	r0, r1, lsl #17
   133b0:	adc	r2, r2, r2
   133b4:	subcs	r0, r0, r1, lsl #17
   133b8:	cmp	r0, r1, lsl #16
   133bc:	adc	r2, r2, r2
   133c0:	subcs	r0, r0, r1, lsl #16
   133c4:	cmp	r0, r1, lsl #15
   133c8:	adc	r2, r2, r2
   133cc:	subcs	r0, r0, r1, lsl #15
   133d0:	cmp	r0, r1, lsl #14
   133d4:	adc	r2, r2, r2
   133d8:	subcs	r0, r0, r1, lsl #14
   133dc:	cmp	r0, r1, lsl #13
   133e0:	adc	r2, r2, r2
   133e4:	subcs	r0, r0, r1, lsl #13
   133e8:	cmp	r0, r1, lsl #12
   133ec:	adc	r2, r2, r2
   133f0:	subcs	r0, r0, r1, lsl #12
   133f4:	cmp	r0, r1, lsl #11
   133f8:	adc	r2, r2, r2
   133fc:	subcs	r0, r0, r1, lsl #11
   13400:	cmp	r0, r1, lsl #10
   13404:	adc	r2, r2, r2
   13408:	subcs	r0, r0, r1, lsl #10
   1340c:	cmp	r0, r1, lsl #9
   13410:	adc	r2, r2, r2
   13414:	subcs	r0, r0, r1, lsl #9
   13418:	cmp	r0, r1, lsl #8
   1341c:	adc	r2, r2, r2
   13420:	subcs	r0, r0, r1, lsl #8
   13424:	cmp	r0, r1, lsl #7
   13428:	adc	r2, r2, r2
   1342c:	subcs	r0, r0, r1, lsl #7
   13430:	cmp	r0, r1, lsl #6
   13434:	adc	r2, r2, r2
   13438:	subcs	r0, r0, r1, lsl #6
   1343c:	cmp	r0, r1, lsl #5
   13440:	adc	r2, r2, r2
   13444:	subcs	r0, r0, r1, lsl #5
   13448:	cmp	r0, r1, lsl #4
   1344c:	adc	r2, r2, r2
   13450:	subcs	r0, r0, r1, lsl #4
   13454:	cmp	r0, r1, lsl #3
   13458:	adc	r2, r2, r2
   1345c:	subcs	r0, r0, r1, lsl #3
   13460:	cmp	r0, r1, lsl #2
   13464:	adc	r2, r2, r2
   13468:	subcs	r0, r0, r1, lsl #2
   1346c:	cmp	r0, r1, lsl #1
   13470:	adc	r2, r2, r2
   13474:	subcs	r0, r0, r1, lsl #1
   13478:	cmp	r0, r1
   1347c:	adc	r2, r2, r2
   13480:	subcs	r0, r0, r1
   13484:	mov	r0, r2
   13488:	bx	lr
   1348c:	moveq	r0, #1
   13490:	movne	r0, #0
   13494:	bx	lr
   13498:	clz	r2, r1
   1349c:	rsb	r2, r2, #31
   134a0:	lsr	r0, r0, r2
   134a4:	bx	lr
   134a8:	cmp	r0, #0
   134ac:	mvnne	r0, #0
   134b0:	b	134d4 <mmk_trampoline_end@@Base+0x210>
   134b4:	cmp	r1, #0
   134b8:	beq	134a8 <mmk_trampoline_end@@Base+0x1e4>
   134bc:	push	{r0, r1, lr}
   134c0:	bl	132c8 <mmk_trampoline_end@@Base+0x4>
   134c4:	pop	{r1, r2, lr}
   134c8:	mul	r3, r2, r0
   134cc:	sub	r1, r1, r3
   134d0:	bx	lr
   134d4:	push	{r1, lr}
   134d8:	mov	r0, #8
   134dc:	bl	111b4 <raise@plt>
   134e0:	pop	{r1, pc}

000134e4 <__libc_csu_init@@Base>:
   134e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   134e8:	mov	r7, r0
   134ec:	ldr	r6, [pc, #72]	; 1353c <__libc_csu_init@@Base+0x58>
   134f0:	ldr	r5, [pc, #72]	; 13540 <__libc_csu_init@@Base+0x5c>
   134f4:	add	r6, pc, r6
   134f8:	add	r5, pc, r5
   134fc:	sub	r6, r6, r5
   13500:	mov	r8, r1
   13504:	mov	r9, r2
   13508:	bl	11188 <strstr@plt-0x20>
   1350c:	asrs	r6, r6, #2
   13510:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13514:	mov	r4, #0
   13518:	add	r4, r4, #1
   1351c:	ldr	r3, [r5], #4
   13520:	mov	r2, r9
   13524:	mov	r1, r8
   13528:	mov	r0, r7
   1352c:	blx	r3
   13530:	cmp	r6, r4
   13534:	bne	13518 <__libc_csu_init@@Base+0x34>
   13538:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1353c:	strdeq	r0, [r1], -ip
   13540:	strdeq	r0, [r1], -r4

00013544 <__libc_csu_fini@@Base>:
   13544:	bx	lr
	...
   13550:	mvn	r0, #61440	; 0xf000
   13554:	sub	pc, r0, #31

Disassembly of section .fini:

00013558 <.fini>:
   13558:	push	{r3, lr}
   1355c:	pop	{r3, pc}
