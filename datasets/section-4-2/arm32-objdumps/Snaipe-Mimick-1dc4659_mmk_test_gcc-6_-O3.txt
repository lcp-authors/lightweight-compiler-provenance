
../repos/Snaipe-Mimick-1dc4659/test/mmk_test:     file format elf32-littlearm


Disassembly of section .init:

00011198 <.init>:
   11198:	push	{r3, lr}
   1119c:	bl	1130c <_start@@Base+0x3c>
   111a0:	pop	{r3, pc}

Disassembly of section .plt:

000111a4 <strstr@plt-0x14>:
   111a4:	push	{lr}		; (str lr, [sp, #-4]!)
   111a8:	ldr	lr, [pc, #4]	; 111b4 <strstr@plt-0x4>
   111ac:	add	lr, pc, lr
   111b0:	ldr	pc, [lr, #8]!
   111b4:	andeq	r4, r1, ip, asr #28

000111b8 <strstr@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #20, 20	; 0x14000
   111c0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111c4 <raise@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #20, 20	; 0x14000
   111cc:	ldr	pc, [ip, #3652]!	; 0xe44

000111d0 <strcmp@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #20, 20	; 0x14000
   111d8:	ldr	pc, [ip, #3644]!	; 0xe3c

000111dc <mprotect@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #20, 20	; 0x14000
   111e4:	ldr	pc, [ip, #3636]!	; 0xe34

000111e8 <free@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #20, 20	; 0x14000
   111f0:	ldr	pc, [ip, #3628]!	; 0xe2c

000111f4 <memcpy@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #20, 20	; 0x14000
   111fc:	ldr	pc, [ip, #3620]!	; 0xe24

00011200 <fn_vv@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #20, 20	; 0x14000
   11208:	ldr	pc, [ip, #3612]!	; 0xe1c

0001120c <realloc@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #20, 20	; 0x14000
   11214:	ldr	pc, [ip, #3604]!	; 0xe14

00011218 <fn_ii@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #20, 20	; 0x14000
   11220:	ldr	pc, [ip, #3596]!	; 0xe0c

00011224 <fn_ii_va@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #20, 20	; 0x14000
   1122c:	ldr	pc, [ip, #3588]!	; 0xe04

00011230 <malloc@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #20, 20	; 0x14000
   11238:	ldr	pc, [ip, #3580]!	; 0xdfc

0001123c <__libc_start_main@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #20, 20	; 0x14000
   11244:	ldr	pc, [ip, #3572]!	; 0xdf4

00011248 <__gmon_start__@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #20, 20	; 0x14000
   11250:	ldr	pc, [ip, #3564]!	; 0xdec

00011254 <strlen@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #20, 20	; 0x14000
   1125c:	ldr	pc, [ip, #3556]!	; 0xde4

00011260 <mmap@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #20, 20	; 0x14000
   11268:	ldr	pc, [ip, #3548]!	; 0xddc

0001126c <strchr@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #20, 20	; 0x14000
   11274:	ldr	pc, [ip, #3540]!	; 0xdd4

00011278 <fprintf@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #20, 20	; 0x14000
   11280:	ldr	pc, [ip, #3532]!	; 0xdcc

00011284 <__errno_location@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #20, 20	; 0x14000
   1128c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011290 <snprintf@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #20, 20	; 0x14000
   11298:	ldr	pc, [ip, #3516]!	; 0xdbc

0001129c <memset@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #20, 20	; 0x14000
   112a4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112a8 <munmap@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #20, 20	; 0x14000
   112b0:	ldr	pc, [ip, #3500]!	; 0xdac

000112b4 <strncmp@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #20, 20	; 0x14000
   112bc:	ldr	pc, [ip, #3492]!	; 0xda4

000112c0 <abort@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #20, 20	; 0x14000
   112c8:	ldr	pc, [ip, #3484]!	; 0xd9c

Disassembly of section .text:

000112d0 <_start@@Base>:
   112d0:	mov	fp, #0
   112d4:	mov	lr, #0
   112d8:	pop	{r1}		; (ldr r1, [sp], #4)
   112dc:	mov	r2, sp
   112e0:	push	{r2}		; (str r2, [sp, #-4]!)
   112e4:	push	{r0}		; (str r0, [sp, #-4]!)
   112e8:	ldr	ip, [pc, #16]	; 11300 <_start@@Base+0x30>
   112ec:	push	{ip}		; (str ip, [sp, #-4]!)
   112f0:	ldr	r0, [pc, #12]	; 11304 <_start@@Base+0x34>
   112f4:	ldr	r3, [pc, #12]	; 11308 <_start@@Base+0x38>
   112f8:	bl	1123c <__libc_start_main@plt>
   112fc:	bl	112c0 <abort@plt>
   11300:	andeq	r4, r1, r4, ror #23
   11304:	andeq	r2, r1, ip, asr #9
   11308:	andeq	r4, r1, r4, lsl #23
   1130c:	ldr	r3, [pc, #20]	; 11328 <_start@@Base+0x58>
   11310:	ldr	r2, [pc, #20]	; 1132c <_start@@Base+0x5c>
   11314:	add	r3, pc, r3
   11318:	ldr	r2, [r3, r2]
   1131c:	cmp	r2, #0
   11320:	bxeq	lr
   11324:	b	11248 <__gmon_start__@plt>
   11328:	andeq	r4, r1, r4, ror #25
   1132c:	andeq	r0, r0, r8, rrx
   11330:	ldr	r3, [pc, #28]	; 11354 <_start@@Base+0x84>
   11334:	ldr	r0, [pc, #28]	; 11358 <_start@@Base+0x88>
   11338:	sub	r3, r3, r0
   1133c:	cmp	r3, #6
   11340:	bxls	lr
   11344:	ldr	r3, [pc, #16]	; 1135c <_start@@Base+0x8c>
   11348:	cmp	r3, #0
   1134c:	bxeq	lr
   11350:	bx	r3
   11354:	andeq	r6, r2, fp, ror r0
   11358:	andeq	r6, r2, r8, ror r0
   1135c:	andeq	r0, r0, r0
   11360:	ldr	r1, [pc, #36]	; 1138c <_start@@Base+0xbc>
   11364:	ldr	r0, [pc, #36]	; 11390 <_start@@Base+0xc0>
   11368:	sub	r1, r1, r0
   1136c:	asr	r1, r1, #2
   11370:	add	r1, r1, r1, lsr #31
   11374:	asrs	r1, r1, #1
   11378:	bxeq	lr
   1137c:	ldr	r3, [pc, #16]	; 11394 <_start@@Base+0xc4>
   11380:	cmp	r3, #0
   11384:	bxeq	lr
   11388:	bx	r3
   1138c:	andeq	r6, r2, r8, ror r0
   11390:	andeq	r6, r2, r8, ror r0
   11394:	andeq	r0, r0, r0
   11398:	push	{r4, lr}
   1139c:	ldr	r4, [pc, #24]	; 113bc <_start@@Base+0xec>
   113a0:	ldrb	r3, [r4]
   113a4:	cmp	r3, #0
   113a8:	popne	{r4, pc}
   113ac:	bl	11330 <_start@@Base+0x60>
   113b0:	mov	r3, #1
   113b4:	strb	r3, [r4]
   113b8:	pop	{r4, pc}
   113bc:	muleq	r2, r0, r0
   113c0:	ldr	r0, [pc, #40]	; 113f0 <_start@@Base+0x120>
   113c4:	ldr	r3, [r0]
   113c8:	cmp	r3, #0
   113cc:	bne	113d4 <_start@@Base+0x104>
   113d0:	b	11360 <_start@@Base+0x90>
   113d4:	ldr	r3, [pc, #24]	; 113f4 <_start@@Base+0x124>
   113d8:	cmp	r3, #0
   113dc:	beq	113d0 <_start@@Base+0x100>
   113e0:	push	{r4, lr}
   113e4:	blx	r3
   113e8:	pop	{r4, lr}
   113ec:	b	11360 <_start@@Base+0x90>
   113f0:	strdeq	r5, [r2], -ip
   113f4:	andeq	r0, r0, r0
   113f8:	push	{fp, lr}
   113fc:	add	fp, sp, #4
   11400:	sub	sp, sp, #96	; 0x60
   11404:	str	r0, [fp, #-96]	; 0xffffffa0
   11408:	bl	13110 <mmk_matcher_ctx@@Base>
   1140c:	str	r0, [fp, #-24]	; 0xffffffe8
   11410:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11414:	cmp	r3, #0
   11418:	beq	1166c <_start@@Base+0x39c>
   1141c:	bl	13ebc <mmk_ctx@@Base>
   11420:	mov	r3, r0
   11424:	mov	r0, r3
   11428:	bl	13af4 <mmk_stub_context@@Base>
   1142c:	str	r0, [fp, #-28]	; 0xffffffe4
   11430:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11434:	ldr	r3, [r3]
   11438:	cmp	r3, #0
   1143c:	bne	1148c <_start@@Base+0x1bc>
   11440:	mov	r0, #44	; 0x2c
   11444:	bl	1473c <mmk_malloc@@Base>
   11448:	str	r0, [fp, #-32]	; 0xffffffe0
   1144c:	bl	14890 <mmk_when_get_result@@Base>
   11450:	mov	r2, r0
   11454:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11458:	add	ip, r3, #8
   1145c:	mov	lr, r2
   11460:	ldm	lr!, {r0, r1, r2, r3}
   11464:	stmia	ip!, {r0, r1, r2, r3}
   11468:	ldr	r3, [lr]
   1146c:	str	r3, [ip]
   11470:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11474:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11478:	str	r2, [r3, #40]	; 0x28
   1147c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11480:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11484:	bl	148b4 <mmk_when_impl@@Base>
   11488:	b	11660 <_start@@Base+0x390>
   1148c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11490:	ldr	r3, [r3]
   11494:	cmp	r3, #1
   11498:	bne	11660 <_start@@Base+0x390>
   1149c:	mov	r3, #0
   114a0:	str	r3, [fp, #-8]
   114a4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   114a8:	bl	13450 <mmk_mock_params_begin@@Base>
   114ac:	str	r0, [fp, #-12]
   114b0:	b	11618 <_start@@Base+0x348>
   114b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114b8:	str	r3, [fp, #-36]	; 0xffffffdc
   114bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114c0:	ldr	r3, [r3, #8]
   114c4:	cmp	r3, #0
   114c8:	beq	115b8 <_start@@Base+0x2e8>
   114cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114d0:	ldr	r3, [r3, #8]
   114d4:	str	r3, [fp, #-36]	; 0xffffffdc
   114d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114dc:	ldr	r3, [r3]
   114e0:	cmp	r3, #0
   114e4:	beq	115dc <_start@@Base+0x30c>
   114e8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114ec:	ldr	r3, [r3]
   114f0:	cmp	r3, #0
   114f4:	bge	11578 <_start@@Base+0x2a8>
   114f8:	ldr	r3, [fp, #-12]
   114fc:	add	r3, r3, #12
   11500:	sub	r1, fp, #96	; 0x60
   11504:	mov	r2, #4
   11508:	mov	r0, r3
   1150c:	bl	143fc <mmk_memcmp@@Base>
   11510:	str	r0, [fp, #-40]	; 0xffffffd8
   11514:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11518:	cmp	r3, #0
   1151c:	bne	11534 <_start@@Base+0x264>
   11520:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11524:	ldr	r3, [r3]
   11528:	and	r3, r3, #2
   1152c:	cmp	r3, #0
   11530:	beq	115f4 <_start@@Base+0x324>
   11534:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11538:	cmp	r3, #0
   1153c:	bge	11554 <_start@@Base+0x284>
   11540:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11544:	ldr	r3, [r3]
   11548:	and	r3, r3, #4
   1154c:	cmp	r3, #0
   11550:	beq	115fc <_start@@Base+0x32c>
   11554:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11558:	cmp	r3, #0
   1155c:	ble	115dc <_start@@Base+0x30c>
   11560:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11564:	ldr	r3, [r3]
   11568:	and	r3, r3, #8
   1156c:	cmp	r3, #0
   11570:	bne	115dc <_start@@Base+0x30c>
   11574:	b	11608 <_start@@Base+0x338>
   11578:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1157c:	ldr	r3, [r3]
   11580:	cmp	r3, #1
   11584:	bne	115dc <_start@@Base+0x30c>
   11588:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1158c:	bl	13198 <mmk_matcher_get_predicate@@Base>
   11590:	str	r0, [fp, #-44]	; 0xffffffd4
   11594:	ldr	r3, [fp, #-12]
   11598:	ldr	r2, [r3, #12]
   1159c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   115a0:	mov	r0, r2
   115a4:	blx	r3
   115a8:	mov	r3, r0
   115ac:	cmp	r3, #0
   115b0:	bne	115dc <_start@@Base+0x30c>
   115b4:	b	11608 <_start@@Base+0x338>
   115b8:	ldr	r3, [fp, #-12]
   115bc:	add	r3, r3, #12
   115c0:	sub	r1, fp, #96	; 0x60
   115c4:	mov	r2, #4
   115c8:	mov	r0, r3
   115cc:	bl	143fc <mmk_memcmp@@Base>
   115d0:	mov	r3, r0
   115d4:	cmp	r3, #0
   115d8:	bne	11604 <_start@@Base+0x334>
   115dc:	ldr	r3, [fp, #-12]
   115e0:	ldr	r3, [r3]
   115e4:	ldr	r2, [fp, #-8]
   115e8:	add	r3, r2, r3
   115ec:	str	r3, [fp, #-8]
   115f0:	b	11608 <_start@@Base+0x338>
   115f4:	nop			; (mov r0, r0)
   115f8:	b	11608 <_start@@Base+0x338>
   115fc:	nop			; (mov r0, r0)
   11600:	b	11608 <_start@@Base+0x338>
   11604:	nop			; (mov r0, r0)
   11608:	ldr	r1, [fp, #-12]
   1160c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11610:	bl	134a4 <mmk_mock_params_next@@Base>
   11614:	str	r0, [fp, #-12]
   11618:	ldr	r3, [fp, #-12]
   1161c:	cmp	r3, #0
   11620:	bne	114b4 <_start@@Base+0x1e4>
   11624:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11628:	str	r3, [fp, #-16]
   1162c:	b	1164c <_start@@Base+0x37c>
   11630:	ldr	r3, [fp, #-16]
   11634:	ldr	r3, [r3, #8]
   11638:	str	r3, [fp, #-48]	; 0xffffffd0
   1163c:	ldr	r0, [fp, #-16]
   11640:	bl	1475c <mmk_free@@Base>
   11644:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11648:	str	r3, [fp, #-16]
   1164c:	ldr	r3, [fp, #-16]
   11650:	cmp	r3, #0
   11654:	bne	11630 <_start@@Base+0x360>
   11658:	ldr	r0, [fp, #-8]
   1165c:	bl	13ff8 <mmk_verify_set_times@@Base>
   11660:	ldr	r3, [pc, #636]	; 118e4 <_start@@Base+0x614>
   11664:	ldr	r3, [r3]
   11668:	b	118d8 <_start@@Base+0x608>
   1166c:	sub	r3, fp, #88	; 0x58
   11670:	mov	r2, #0
   11674:	str	r2, [r3]
   11678:	str	r2, [r3, #4]
   1167c:	str	r2, [r3, #8]
   11680:	str	r2, [r3, #12]
   11684:	ldr	r3, [fp, #-96]	; 0xffffffa0
   11688:	str	r3, [fp, #-76]	; 0xffffffb4
   1168c:	sub	r3, fp, #88	; 0x58
   11690:	str	r3, [fp, #-52]	; 0xffffffcc
   11694:	mov	r1, #16
   11698:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1169c:	bl	141fc <mmk_verify_register_call@@Base>
   116a0:	bl	1351c <mmk_mock_get_params@@Base>
   116a4:	str	r0, [fp, #-20]	; 0xffffffec
   116a8:	b	118c4 <_start@@Base+0x5f4>
   116ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   116b0:	str	r3, [fp, #-56]	; 0xffffffc8
   116b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   116b8:	ldr	r3, [r3]
   116bc:	str	r3, [fp, #-60]	; 0xffffffc4
   116c0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116c4:	ldr	r3, [r3, #8]
   116c8:	cmp	r3, #0
   116cc:	beq	117b4 <_start@@Base+0x4e4>
   116d0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116d4:	ldr	r3, [r3, #8]
   116d8:	str	r3, [fp, #-60]	; 0xffffffc4
   116dc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116e0:	ldr	r3, [r3]
   116e4:	cmp	r3, #0
   116e8:	beq	117d8 <_start@@Base+0x508>
   116ec:	ldr	r3, [fp, #-60]	; 0xffffffc4
   116f0:	ldr	r3, [r3]
   116f4:	cmp	r3, #0
   116f8:	bge	11778 <_start@@Base+0x4a8>
   116fc:	sub	r1, fp, #96	; 0x60
   11700:	sub	r3, fp, #96	; 0x60
   11704:	mov	r2, #4
   11708:	mov	r0, r3
   1170c:	bl	143fc <mmk_memcmp@@Base>
   11710:	str	r0, [fp, #-64]	; 0xffffffc0
   11714:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11718:	cmp	r3, #0
   1171c:	bne	11734 <_start@@Base+0x464>
   11720:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11724:	ldr	r3, [r3]
   11728:	and	r3, r3, #2
   1172c:	cmp	r3, #0
   11730:	beq	118ac <_start@@Base+0x5dc>
   11734:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11738:	cmp	r3, #0
   1173c:	bge	11754 <_start@@Base+0x484>
   11740:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11744:	ldr	r3, [r3]
   11748:	and	r3, r3, #4
   1174c:	cmp	r3, #0
   11750:	beq	118ac <_start@@Base+0x5dc>
   11754:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11758:	cmp	r3, #0
   1175c:	ble	117d8 <_start@@Base+0x508>
   11760:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11764:	ldr	r3, [r3]
   11768:	and	r3, r3, #8
   1176c:	cmp	r3, #0
   11770:	bne	117d8 <_start@@Base+0x508>
   11774:	b	118ac <_start@@Base+0x5dc>
   11778:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1177c:	ldr	r3, [r3]
   11780:	cmp	r3, #1
   11784:	bne	117d8 <_start@@Base+0x508>
   11788:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1178c:	bl	13198 <mmk_matcher_get_predicate@@Base>
   11790:	str	r0, [fp, #-68]	; 0xffffffbc
   11794:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11798:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1179c:	mov	r0, r2
   117a0:	blx	r3
   117a4:	mov	r3, r0
   117a8:	cmp	r3, #0
   117ac:	bne	117d8 <_start@@Base+0x508>
   117b0:	b	118b8 <_start@@Base+0x5e8>
   117b4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117b8:	add	r1, r3, #40	; 0x28
   117bc:	sub	r3, fp, #96	; 0x60
   117c0:	mov	r2, #4
   117c4:	mov	r0, r3
   117c8:	bl	143fc <mmk_memcmp@@Base>
   117cc:	mov	r3, r0
   117d0:	cmp	r3, #0
   117d4:	bne	118b4 <_start@@Base+0x5e4>
   117d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117dc:	ldr	r3, [r3, #12]
   117e0:	cmp	r3, #0
   117e4:	beq	117fc <_start@@Base+0x52c>
   117e8:	bl	11284 <__errno_location@plt>
   117ec:	mov	r2, r0
   117f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   117f4:	ldr	r3, [r3, #12]
   117f8:	str	r3, [r2]
   117fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11800:	ldr	r3, [r3, #20]
   11804:	cmp	r3, #0
   11808:	beq	1183c <_start@@Base+0x56c>
   1180c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11810:	ldr	r3, [r3, #16]
   11814:	cmp	r3, #0
   11818:	bne	1183c <_start@@Base+0x56c>
   1181c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11820:	ldr	r3, [r3, #20]
   11824:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11828:	mov	r0, r2
   1182c:	blx	r3
   11830:	str	r0, [fp, #-72]	; 0xffffffb8
   11834:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11838:	b	118d8 <_start@@Base+0x608>
   1183c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11840:	ldr	r3, [r3, #20]
   11844:	cmp	r3, #0
   11848:	beq	11880 <_start@@Base+0x5b0>
   1184c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11850:	ldr	r3, [r3, #16]
   11854:	cmp	r3, #0
   11858:	beq	11880 <_start@@Base+0x5b0>
   1185c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11860:	ldr	r3, [r3, #20]
   11864:	ldr	r2, [fp, #-96]	; 0xffffffa0
   11868:	mov	r0, r2
   1186c:	blx	r3
   11870:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11874:	ldr	r3, [r3, #16]
   11878:	ldr	r3, [r3]
   1187c:	b	118d8 <_start@@Base+0x608>
   11880:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11884:	ldr	r3, [r3, #16]
   11888:	cmp	r3, #0
   1188c:	beq	118a0 <_start@@Base+0x5d0>
   11890:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11894:	ldr	r3, [r3, #16]
   11898:	ldr	r3, [r3]
   1189c:	b	118d8 <_start@@Base+0x608>
   118a0:	ldr	r3, [pc, #60]	; 118e4 <_start@@Base+0x614>
   118a4:	ldr	r3, [r3]
   118a8:	b	118d8 <_start@@Base+0x608>
   118ac:	nop			; (mov r0, r0)
   118b0:	b	118b8 <_start@@Base+0x5e8>
   118b4:	nop			; (mov r0, r0)
   118b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   118bc:	ldr	r3, [r3, #4]
   118c0:	str	r3, [fp, #-20]	; 0xffffffec
   118c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   118c8:	cmp	r3, #0
   118cc:	bne	116ac <_start@@Base+0x3dc>
   118d0:	ldr	r3, [pc, #12]	; 118e4 <_start@@Base+0x614>
   118d4:	ldr	r3, [r3]
   118d8:	mov	r0, r3
   118dc:	sub	sp, fp, #4
   118e0:	pop	{fp, pc}
   118e4:	muleq	r2, r8, r0
   118e8:	push	{fp, lr}
   118ec:	add	fp, sp, #4
   118f0:	sub	sp, sp, #8
   118f4:	str	r0, [fp, #-8]
   118f8:	ldr	r1, [pc, #20]	; 11914 <_start@@Base+0x644>
   118fc:	ldr	r0, [fp, #-8]
   11900:	bl	131a0 <mmk_mock_create_internal@@Base>
   11904:	mov	r3, r0
   11908:	mov	r0, r3
   1190c:	sub	sp, fp, #4
   11910:	pop	{fp, pc}
   11914:	strdeq	r1, [r1], -r8
   11918:	push	{fp, lr}
   1191c:	add	fp, sp, #4
   11920:	sub	sp, sp, #64	; 0x40
   11924:	bl	13110 <mmk_matcher_ctx@@Base>
   11928:	str	r0, [fp, #-20]	; 0xffffffec
   1192c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11930:	cmp	r3, #0
   11934:	beq	11a40 <_start@@Base+0x770>
   11938:	bl	13ebc <mmk_ctx@@Base>
   1193c:	mov	r3, r0
   11940:	mov	r0, r3
   11944:	bl	13af4 <mmk_stub_context@@Base>
   11948:	str	r0, [fp, #-24]	; 0xffffffe8
   1194c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11950:	ldr	r3, [r3]
   11954:	cmp	r3, #0
   11958:	bne	1199c <_start@@Base+0x6cc>
   1195c:	mov	r0, #40	; 0x28
   11960:	bl	1473c <mmk_malloc@@Base>
   11964:	str	r0, [fp, #-28]	; 0xffffffe4
   11968:	bl	14890 <mmk_when_get_result@@Base>
   1196c:	mov	r2, r0
   11970:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11974:	add	ip, r3, #8
   11978:	mov	lr, r2
   1197c:	ldm	lr!, {r0, r1, r2, r3}
   11980:	stmia	ip!, {r0, r1, r2, r3}
   11984:	ldr	r3, [lr]
   11988:	str	r3, [ip]
   1198c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   11990:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11994:	bl	148b4 <mmk_when_impl@@Base>
   11998:	b	11b24 <_start@@Base+0x854>
   1199c:	ldr	r3, [fp, #-20]	; 0xffffffec
   119a0:	ldr	r3, [r3]
   119a4:	cmp	r3, #1
   119a8:	bne	11b24 <_start@@Base+0x854>
   119ac:	mov	r3, #0
   119b0:	str	r3, [fp, #-8]
   119b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   119b8:	bl	13450 <mmk_mock_params_begin@@Base>
   119bc:	str	r0, [fp, #-12]
   119c0:	b	119f4 <_start@@Base+0x724>
   119c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   119c8:	str	r3, [fp, #-32]	; 0xffffffe0
   119cc:	ldr	r3, [fp, #-12]
   119d0:	ldr	r3, [r3]
   119d4:	ldr	r2, [fp, #-8]
   119d8:	add	r3, r2, r3
   119dc:	str	r3, [fp, #-8]
   119e0:	nop			; (mov r0, r0)
   119e4:	ldr	r1, [fp, #-12]
   119e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   119ec:	bl	134a4 <mmk_mock_params_next@@Base>
   119f0:	str	r0, [fp, #-12]
   119f4:	ldr	r3, [fp, #-12]
   119f8:	cmp	r3, #0
   119fc:	bne	119c4 <_start@@Base+0x6f4>
   11a00:	ldr	r3, [fp, #-20]	; 0xffffffec
   11a04:	str	r3, [fp, #-16]
   11a08:	b	11a28 <_start@@Base+0x758>
   11a0c:	ldr	r3, [fp, #-16]
   11a10:	ldr	r3, [r3, #8]
   11a14:	str	r3, [fp, #-36]	; 0xffffffdc
   11a18:	ldr	r0, [fp, #-16]
   11a1c:	bl	1475c <mmk_free@@Base>
   11a20:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11a24:	str	r3, [fp, #-16]
   11a28:	ldr	r3, [fp, #-16]
   11a2c:	cmp	r3, #0
   11a30:	bne	11a0c <_start@@Base+0x73c>
   11a34:	ldr	r0, [fp, #-8]
   11a38:	bl	13ff8 <mmk_verify_set_times@@Base>
   11a3c:	b	11b24 <_start@@Base+0x854>
   11a40:	sub	r3, fp, #64	; 0x40
   11a44:	mov	r2, #0
   11a48:	str	r2, [r3]
   11a4c:	str	r2, [r3, #4]
   11a50:	str	r2, [r3, #8]
   11a54:	sub	r3, fp, #64	; 0x40
   11a58:	str	r3, [fp, #-40]	; 0xffffffd8
   11a5c:	mov	r1, #12
   11a60:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11a64:	bl	141fc <mmk_verify_register_call@@Base>
   11a68:	bl	1351c <mmk_mock_get_params@@Base>
   11a6c:	str	r0, [fp, #-44]	; 0xffffffd4
   11a70:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11a74:	cmp	r3, #0
   11a78:	beq	11b2c <_start@@Base+0x85c>
   11a7c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11a80:	str	r3, [fp, #-48]	; 0xffffffd0
   11a84:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11a88:	ldr	r3, [r3]
   11a8c:	str	r3, [fp, #-52]	; 0xffffffcc
   11a90:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11a94:	ldr	r3, [r3, #12]
   11a98:	cmp	r3, #0
   11a9c:	beq	11ab4 <_start@@Base+0x7e4>
   11aa0:	bl	11284 <__errno_location@plt>
   11aa4:	mov	r2, r0
   11aa8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11aac:	ldr	r3, [r3, #12]
   11ab0:	str	r3, [r2]
   11ab4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11ab8:	ldr	r3, [r3, #20]
   11abc:	cmp	r3, #0
   11ac0:	beq	11ae4 <_start@@Base+0x814>
   11ac4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11ac8:	ldr	r3, [r3, #16]
   11acc:	cmp	r3, #0
   11ad0:	bne	11ae4 <_start@@Base+0x814>
   11ad4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11ad8:	ldr	r3, [r3, #20]
   11adc:	blx	r3
   11ae0:	b	11b30 <_start@@Base+0x860>
   11ae4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11ae8:	ldr	r3, [r3, #20]
   11aec:	cmp	r3, #0
   11af0:	beq	11b14 <_start@@Base+0x844>
   11af4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11af8:	ldr	r3, [r3, #16]
   11afc:	cmp	r3, #0
   11b00:	beq	11b14 <_start@@Base+0x844>
   11b04:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11b08:	ldr	r3, [r3, #20]
   11b0c:	blx	r3
   11b10:	b	11b30 <_start@@Base+0x860>
   11b14:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11b18:	ldr	r3, [r3, #16]
   11b1c:	cmp	r3, #0
   11b20:	b	11b30 <_start@@Base+0x860>
   11b24:	nop			; (mov r0, r0)
   11b28:	b	11b30 <_start@@Base+0x860>
   11b2c:	nop			; (mov r0, r0)
   11b30:	sub	sp, fp, #4
   11b34:	pop	{fp, pc}
   11b38:	push	{fp, lr}
   11b3c:	add	fp, sp, #4
   11b40:	sub	sp, sp, #8
   11b44:	str	r0, [fp, #-8]
   11b48:	ldr	r1, [pc, #20]	; 11b64 <_start@@Base+0x894>
   11b4c:	ldr	r0, [fp, #-8]
   11b50:	bl	131a0 <mmk_mock_create_internal@@Base>
   11b54:	mov	r3, r0
   11b58:	mov	r0, r3
   11b5c:	sub	sp, fp, #4
   11b60:	pop	{fp, pc}
   11b64:	andeq	r1, r1, r8, lsl r9
   11b68:	push	{r4, fp, lr}
   11b6c:	add	fp, sp, #8
   11b70:	sub	sp, sp, #36	; 0x24
   11b74:	str	r0, [fp, #-32]	; 0xffffffe0
   11b78:	str	r1, [fp, #-36]	; 0xffffffdc
   11b7c:	str	r2, [fp, #-40]	; 0xffffffd8
   11b80:	str	r3, [fp, #-44]	; 0xffffffd4
   11b84:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11b88:	cmp	r3, #0
   11b8c:	bgt	11b98 <_start@@Base+0x8c8>
   11b90:	mov	r3, #0
   11b94:	b	11c68 <_start@@Base+0x998>
   11b98:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11b9c:	lsl	r3, r3, #2
   11ba0:	mov	r0, r3
   11ba4:	bl	1473c <mmk_malloc@@Base>
   11ba8:	str	r0, [fp, #-20]	; 0xffffffec
   11bac:	mov	r3, #0
   11bb0:	str	r3, [fp, #-16]
   11bb4:	b	11c3c <_start@@Base+0x96c>
   11bb8:	ldr	r3, [fp, #-16]
   11bbc:	lsl	r3, r3, #2
   11bc0:	ldr	r2, [fp, #-20]	; 0xffffffec
   11bc4:	add	r4, r2, r3
   11bc8:	mov	r0, #8
   11bcc:	bl	1473c <mmk_malloc@@Base>
   11bd0:	mov	r3, r0
   11bd4:	str	r3, [r4]
   11bd8:	ldr	r3, [fp, #-16]
   11bdc:	lsl	r3, r3, #2
   11be0:	ldr	r2, [fp, #-20]	; 0xffffffec
   11be4:	add	r3, r2, r3
   11be8:	ldr	r3, [r3]
   11bec:	mov	r2, #4
   11bf0:	str	r2, [r3]
   11bf4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11bf8:	add	r2, r3, #4
   11bfc:	str	r2, [fp, #-36]	; 0xffffffdc
   11c00:	ldr	r3, [r3]
   11c04:	str	r3, [fp, #-24]	; 0xffffffe8
   11c08:	ldr	r3, [fp, #-16]
   11c0c:	lsl	r3, r3, #2
   11c10:	ldr	r2, [fp, #-20]	; 0xffffffec
   11c14:	add	r3, r2, r3
   11c18:	ldr	r3, [r3]
   11c1c:	add	r3, r3, #4
   11c20:	sub	r1, fp, #24
   11c24:	mov	r2, #4
   11c28:	mov	r0, r3
   11c2c:	bl	14450 <mmk_memcpy@@Base>
   11c30:	ldr	r3, [fp, #-16]
   11c34:	add	r3, r3, #1
   11c38:	str	r3, [fp, #-16]
   11c3c:	ldr	r2, [fp, #-16]
   11c40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c44:	cmp	r2, r3
   11c48:	blt	11bb8 <_start@@Base+0x8e8>
   11c4c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11c50:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11c54:	str	r2, [r3]
   11c58:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11c5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11c60:	str	r2, [r3]
   11c64:	mov	r3, #1
   11c68:	mov	r0, r3
   11c6c:	sub	sp, fp, #8
   11c70:	pop	{r4, fp, pc}
   11c74:	push	{r0, r1, r2, r3}
   11c78:	push	{r4, fp, lr}
   11c7c:	add	fp, sp, #8
   11c80:	sub	sp, sp, #156	; 0x9c
   11c84:	ldr	r3, [pc, #2016]	; 1246c <_start@@Base+0x119c>
   11c88:	str	r3, [fp, #-40]	; 0xffffffd8
   11c8c:	add	r3, fp, #8
   11c90:	str	r3, [fp, #-136]	; 0xffffff78
   11c94:	bl	13110 <mmk_matcher_ctx@@Base>
   11c98:	str	r0, [fp, #-44]	; 0xffffffd4
   11c9c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11ca0:	cmp	r3, #0
   11ca4:	beq	12174 <_start@@Base+0xea4>
   11ca8:	bl	13ebc <mmk_ctx@@Base>
   11cac:	mov	r3, r0
   11cb0:	mov	r0, r3
   11cb4:	bl	13af4 <mmk_stub_context@@Base>
   11cb8:	str	r0, [fp, #-48]	; 0xffffffd0
   11cbc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11cc0:	ldr	r3, [r3]
   11cc4:	cmp	r3, #0
   11cc8:	bne	11d70 <_start@@Base+0xaa0>
   11ccc:	mov	r0, #44	; 0x2c
   11cd0:	bl	1473c <mmk_malloc@@Base>
   11cd4:	str	r0, [fp, #-52]	; 0xffffffcc
   11cd8:	bl	14890 <mmk_when_get_result@@Base>
   11cdc:	mov	r2, r0
   11ce0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11ce4:	add	ip, r3, #8
   11ce8:	mov	lr, r2
   11cec:	ldm	lr!, {r0, r1, r2, r3}
   11cf0:	stmia	ip!, {r0, r1, r2, r3}
   11cf4:	ldr	r3, [lr]
   11cf8:	str	r3, [ip]
   11cfc:	ldr	r2, [fp, #4]
   11d00:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11d04:	str	r2, [r3, #40]	; 0x28
   11d08:	mov	r3, #0
   11d0c:	str	r3, [fp, #-144]	; 0xffffff70
   11d10:	mov	r3, #0
   11d14:	str	r3, [fp, #-148]	; 0xffffff6c
   11d18:	ldr	r3, [fp, #-136]	; 0xffffff78
   11d1c:	str	r3, [fp, #-140]	; 0xffffff74
   11d20:	ldr	r0, [fp, #4]
   11d24:	sub	r3, fp, #148	; 0x94
   11d28:	sub	r2, fp, #144	; 0x90
   11d2c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   11d30:	ldr	r1, [fp, #-140]	; 0xffffff74
   11d34:	blx	r4
   11d38:	str	r0, [fp, #-56]	; 0xffffffc8
   11d3c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11d40:	cmp	r3, #0
   11d44:	beq	11d60 <_start@@Base+0xa90>
   11d48:	ldr	r2, [fp, #-144]	; 0xffffff70
   11d4c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11d50:	str	r2, [r3, #32]
   11d54:	ldr	r2, [fp, #-148]	; 0xffffff6c
   11d58:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11d5c:	str	r2, [r3, #36]	; 0x24
   11d60:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11d64:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11d68:	bl	148b4 <mmk_when_impl@@Base>
   11d6c:	b	12168 <_start@@Base+0xe98>
   11d70:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11d74:	ldr	r3, [r3]
   11d78:	cmp	r3, #1
   11d7c:	bne	12168 <_start@@Base+0xe98>
   11d80:	mov	r3, #0
   11d84:	str	r3, [fp, #-16]
   11d88:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11d8c:	bl	13450 <mmk_mock_params_begin@@Base>
   11d90:	str	r0, [fp, #-20]	; 0xffffffec
   11d94:	b	12120 <_start@@Base+0xe50>
   11d98:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11d9c:	str	r3, [fp, #-24]	; 0xffffffe8
   11da0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11da4:	ldr	r3, [r3, #8]
   11da8:	cmp	r3, #0
   11dac:	beq	11e9c <_start@@Base+0xbcc>
   11db0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11db4:	ldr	r3, [r3, #8]
   11db8:	str	r3, [fp, #-24]	; 0xffffffe8
   11dbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11dc0:	ldr	r3, [r3]
   11dc4:	cmp	r3, #0
   11dc8:	beq	11ec0 <_start@@Base+0xbf0>
   11dcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11dd0:	ldr	r3, [r3]
   11dd4:	cmp	r3, #0
   11dd8:	bge	11e5c <_start@@Base+0xb8c>
   11ddc:	ldr	r3, [fp, #-20]	; 0xffffffec
   11de0:	add	r3, r3, #12
   11de4:	mov	r2, #4
   11de8:	add	r1, fp, #4
   11dec:	mov	r0, r3
   11df0:	bl	143fc <mmk_memcmp@@Base>
   11df4:	str	r0, [fp, #-60]	; 0xffffffc4
   11df8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11dfc:	cmp	r3, #0
   11e00:	bne	11e18 <_start@@Base+0xb48>
   11e04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e08:	ldr	r3, [r3]
   11e0c:	and	r3, r3, #2
   11e10:	cmp	r3, #0
   11e14:	beq	120dc <_start@@Base+0xe0c>
   11e18:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e1c:	cmp	r3, #0
   11e20:	bge	11e38 <_start@@Base+0xb68>
   11e24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e28:	ldr	r3, [r3]
   11e2c:	and	r3, r3, #4
   11e30:	cmp	r3, #0
   11e34:	beq	120e4 <_start@@Base+0xe14>
   11e38:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e3c:	cmp	r3, #0
   11e40:	ble	11ec0 <_start@@Base+0xbf0>
   11e44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e48:	ldr	r3, [r3]
   11e4c:	and	r3, r3, #8
   11e50:	cmp	r3, #0
   11e54:	bne	11ec0 <_start@@Base+0xbf0>
   11e58:	b	12110 <_start@@Base+0xe40>
   11e5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11e60:	ldr	r3, [r3]
   11e64:	cmp	r3, #1
   11e68:	bne	11ec0 <_start@@Base+0xbf0>
   11e6c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11e70:	bl	13198 <mmk_matcher_get_predicate@@Base>
   11e74:	str	r0, [fp, #-64]	; 0xffffffc0
   11e78:	ldr	r3, [fp, #-20]	; 0xffffffec
   11e7c:	ldr	r2, [r3, #12]
   11e80:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11e84:	mov	r0, r2
   11e88:	blx	r3
   11e8c:	mov	r3, r0
   11e90:	cmp	r3, #0
   11e94:	bne	11ec0 <_start@@Base+0xbf0>
   11e98:	b	12110 <_start@@Base+0xe40>
   11e9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11ea0:	add	r3, r3, #12
   11ea4:	mov	r2, #4
   11ea8:	add	r1, fp, #4
   11eac:	mov	r0, r3
   11eb0:	bl	143fc <mmk_memcmp@@Base>
   11eb4:	mov	r3, r0
   11eb8:	cmp	r3, #0
   11ebc:	bne	120ec <_start@@Base+0xe1c>
   11ec0:	mov	r3, #0
   11ec4:	str	r3, [fp, #-152]	; 0xffffff68
   11ec8:	mov	r3, #0
   11ecc:	str	r3, [fp, #-156]	; 0xffffff64
   11ed0:	ldr	r3, [fp, #-136]	; 0xffffff78
   11ed4:	str	r3, [fp, #-140]	; 0xffffff74
   11ed8:	ldr	r0, [fp, #4]
   11edc:	sub	r3, fp, #156	; 0x9c
   11ee0:	sub	r2, fp, #152	; 0x98
   11ee4:	ldr	r4, [fp, #-40]	; 0xffffffd8
   11ee8:	ldr	r1, [fp, #-140]	; 0xffffff74
   11eec:	blx	r4
   11ef0:	str	r0, [fp, #-68]	; 0xffffffbc
   11ef4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11ef8:	cmp	r3, #0
   11efc:	beq	12110 <_start@@Base+0xe40>
   11f00:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f04:	ldr	r2, [r3, #4]
   11f08:	ldr	r3, [fp, #-152]	; 0xffffff68
   11f0c:	cmp	r2, r3
   11f10:	bne	12110 <_start@@Base+0xe40>
   11f14:	mov	r3, #0
   11f18:	str	r3, [fp, #-28]	; 0xffffffe4
   11f1c:	b	120a8 <_start@@Base+0xdd8>
   11f20:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f24:	ldr	r2, [r3, #8]
   11f28:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11f2c:	lsl	r3, r3, #2
   11f30:	add	r3, r2, r3
   11f34:	ldr	r3, [r3]
   11f38:	str	r3, [fp, #-72]	; 0xffffffb8
   11f3c:	ldr	r2, [fp, #-156]	; 0xffffff64
   11f40:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11f44:	lsl	r3, r3, #2
   11f48:	add	r3, r2, r3
   11f4c:	ldr	r3, [r3]
   11f50:	str	r3, [fp, #-76]	; 0xffffffb4
   11f54:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11f58:	ldr	r2, [r3]
   11f5c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11f60:	ldr	r3, [r3]
   11f64:	cmp	r2, r3
   11f68:	bne	120f4 <_start@@Base+0xe24>
   11f6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f70:	ldr	r3, [r3, #8]
   11f74:	cmp	r3, #0
   11f78:	beq	12068 <_start@@Base+0xd98>
   11f7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f80:	ldr	r3, [r3, #8]
   11f84:	str	r3, [fp, #-24]	; 0xffffffe8
   11f88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f8c:	ldr	r3, [r3]
   11f90:	cmp	r3, #0
   11f94:	beq	12094 <_start@@Base+0xdc4>
   11f98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11f9c:	ldr	r3, [r3]
   11fa0:	cmp	r3, #0
   11fa4:	bge	12030 <_start@@Base+0xd60>
   11fa8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11fac:	add	r0, r3, #4
   11fb0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11fb4:	add	r1, r3, #4
   11fb8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11fbc:	ldr	r3, [r3]
   11fc0:	mov	r2, r3
   11fc4:	bl	143fc <mmk_memcmp@@Base>
   11fc8:	str	r0, [fp, #-80]	; 0xffffffb0
   11fcc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11fd0:	cmp	r3, #0
   11fd4:	bne	11fec <_start@@Base+0xd1c>
   11fd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11fdc:	ldr	r3, [r3]
   11fe0:	and	r3, r3, #2
   11fe4:	cmp	r3, #0
   11fe8:	beq	120fc <_start@@Base+0xe2c>
   11fec:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11ff0:	cmp	r3, #0
   11ff4:	bge	1200c <_start@@Base+0xd3c>
   11ff8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ffc:	ldr	r3, [r3]
   12000:	and	r3, r3, #4
   12004:	cmp	r3, #0
   12008:	beq	12104 <_start@@Base+0xe34>
   1200c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12010:	cmp	r3, #0
   12014:	ble	12094 <_start@@Base+0xdc4>
   12018:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1201c:	ldr	r3, [r3]
   12020:	and	r3, r3, #8
   12024:	cmp	r3, #0
   12028:	bne	12094 <_start@@Base+0xdc4>
   1202c:	b	12110 <_start@@Base+0xe40>
   12030:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12034:	ldr	r3, [r3]
   12038:	cmp	r3, #1
   1203c:	bne	12094 <_start@@Base+0xdc4>
   12040:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12044:	bl	13198 <mmk_matcher_get_predicate@@Base>
   12048:	str	r0, [fp, #-84]	; 0xffffffac
   1204c:	ldr	r3, [fp, #-84]	; 0xffffffac
   12050:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12054:	blx	r3
   12058:	mov	r3, r0
   1205c:	cmp	r3, #0
   12060:	bne	12094 <_start@@Base+0xdc4>
   12064:	b	12110 <_start@@Base+0xe40>
   12068:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1206c:	add	r0, r3, #4
   12070:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12074:	add	r1, r3, #4
   12078:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1207c:	ldr	r3, [r3]
   12080:	mov	r2, r3
   12084:	bl	143fc <mmk_memcmp@@Base>
   12088:	mov	r3, r0
   1208c:	cmp	r3, #0
   12090:	bne	1210c <_start@@Base+0xe3c>
   12094:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12098:	bl	1475c <mmk_free@@Base>
   1209c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   120a0:	add	r3, r3, #1
   120a4:	str	r3, [fp, #-28]	; 0xffffffe4
   120a8:	ldr	r3, [fp, #-152]	; 0xffffff68
   120ac:	ldr	r2, [fp, #-28]	; 0xffffffe4
   120b0:	cmp	r2, r3
   120b4:	bcc	11f20 <_start@@Base+0xc50>
   120b8:	ldr	r3, [fp, #-156]	; 0xffffff64
   120bc:	mov	r0, r3
   120c0:	bl	1475c <mmk_free@@Base>
   120c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   120c8:	ldr	r3, [r3]
   120cc:	ldr	r2, [fp, #-16]
   120d0:	add	r3, r2, r3
   120d4:	str	r3, [fp, #-16]
   120d8:	b	12110 <_start@@Base+0xe40>
   120dc:	nop			; (mov r0, r0)
   120e0:	b	12110 <_start@@Base+0xe40>
   120e4:	nop			; (mov r0, r0)
   120e8:	b	12110 <_start@@Base+0xe40>
   120ec:	nop			; (mov r0, r0)
   120f0:	b	12110 <_start@@Base+0xe40>
   120f4:	nop			; (mov r0, r0)
   120f8:	b	12110 <_start@@Base+0xe40>
   120fc:	nop			; (mov r0, r0)
   12100:	b	12110 <_start@@Base+0xe40>
   12104:	nop			; (mov r0, r0)
   12108:	b	12110 <_start@@Base+0xe40>
   1210c:	nop			; (mov r0, r0)
   12110:	ldr	r1, [fp, #-20]	; 0xffffffec
   12114:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12118:	bl	134a4 <mmk_mock_params_next@@Base>
   1211c:	str	r0, [fp, #-20]	; 0xffffffec
   12120:	ldr	r3, [fp, #-20]	; 0xffffffec
   12124:	cmp	r3, #0
   12128:	bne	11d98 <_start@@Base+0xac8>
   1212c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12130:	str	r3, [fp, #-32]	; 0xffffffe0
   12134:	b	12154 <_start@@Base+0xe84>
   12138:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1213c:	ldr	r3, [r3, #8]
   12140:	str	r3, [fp, #-88]	; 0xffffffa8
   12144:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12148:	bl	1475c <mmk_free@@Base>
   1214c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12150:	str	r3, [fp, #-32]	; 0xffffffe0
   12154:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12158:	cmp	r3, #0
   1215c:	bne	12138 <_start@@Base+0xe68>
   12160:	ldr	r0, [fp, #-16]
   12164:	bl	13ff8 <mmk_verify_set_times@@Base>
   12168:	ldr	r3, [pc, #768]	; 12470 <_start@@Base+0x11a0>
   1216c:	ldr	r3, [r3]
   12170:	b	12458 <_start@@Base+0x1188>
   12174:	sub	r3, fp, #132	; 0x84
   12178:	mov	r2, #0
   1217c:	str	r2, [r3]
   12180:	str	r2, [r3, #4]
   12184:	str	r2, [r3, #8]
   12188:	str	r2, [r3, #12]
   1218c:	ldr	r3, [fp, #4]
   12190:	str	r3, [fp, #-120]	; 0xffffff88
   12194:	sub	r3, fp, #132	; 0x84
   12198:	str	r3, [fp, #-92]	; 0xffffffa4
   1219c:	mov	r3, #0
   121a0:	str	r3, [fp, #-160]	; 0xffffff60
   121a4:	mov	r3, #0
   121a8:	str	r3, [fp, #-164]	; 0xffffff5c
   121ac:	ldr	r3, [fp, #-136]	; 0xffffff78
   121b0:	str	r3, [fp, #-140]	; 0xffffff74
   121b4:	ldr	r0, [fp, #4]
   121b8:	sub	r3, fp, #164	; 0xa4
   121bc:	sub	r2, fp, #160	; 0xa0
   121c0:	ldr	r4, [fp, #-40]	; 0xffffffd8
   121c4:	ldr	r1, [fp, #-140]	; 0xffffff74
   121c8:	blx	r4
   121cc:	str	r0, [fp, #-96]	; 0xffffffa0
   121d0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   121d4:	cmp	r3, #0
   121d8:	beq	121f4 <_start@@Base+0xf24>
   121dc:	ldr	r2, [fp, #-160]	; 0xffffff60
   121e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   121e4:	str	r2, [r3, #4]
   121e8:	ldr	r2, [fp, #-164]	; 0xffffff5c
   121ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   121f0:	str	r2, [r3, #8]
   121f4:	mov	r1, #16
   121f8:	ldr	r0, [fp, #-92]	; 0xffffffa4
   121fc:	bl	141fc <mmk_verify_register_call@@Base>
   12200:	bl	1351c <mmk_mock_get_params@@Base>
   12204:	str	r0, [fp, #-36]	; 0xffffffdc
   12208:	b	12444 <_start@@Base+0x1174>
   1220c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12210:	str	r3, [fp, #-100]	; 0xffffff9c
   12214:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12218:	ldr	r3, [r3]
   1221c:	str	r3, [fp, #-104]	; 0xffffff98
   12220:	ldr	r3, [fp, #-104]	; 0xffffff98
   12224:	ldr	r3, [r3, #8]
   12228:	cmp	r3, #0
   1222c:	beq	12318 <_start@@Base+0x1048>
   12230:	ldr	r3, [fp, #-104]	; 0xffffff98
   12234:	ldr	r3, [r3, #8]
   12238:	str	r3, [fp, #-104]	; 0xffffff98
   1223c:	ldr	r3, [fp, #-104]	; 0xffffff98
   12240:	ldr	r3, [r3]
   12244:	cmp	r3, #0
   12248:	beq	12340 <_start@@Base+0x1070>
   1224c:	ldr	r3, [fp, #-104]	; 0xffffff98
   12250:	ldr	r3, [r3]
   12254:	cmp	r3, #0
   12258:	bge	122dc <_start@@Base+0x100c>
   1225c:	mov	r2, #4
   12260:	add	r3, fp, #4
   12264:	mov	r1, r3
   12268:	add	r3, fp, #4
   1226c:	mov	r0, r3
   12270:	bl	143fc <mmk_memcmp@@Base>
   12274:	str	r0, [fp, #-108]	; 0xffffff94
   12278:	ldr	r3, [fp, #-108]	; 0xffffff94
   1227c:	cmp	r3, #0
   12280:	bne	12298 <_start@@Base+0xfc8>
   12284:	ldr	r3, [fp, #-104]	; 0xffffff98
   12288:	ldr	r3, [r3]
   1228c:	and	r3, r3, #2
   12290:	cmp	r3, #0
   12294:	beq	1242c <_start@@Base+0x115c>
   12298:	ldr	r3, [fp, #-108]	; 0xffffff94
   1229c:	cmp	r3, #0
   122a0:	bge	122b8 <_start@@Base+0xfe8>
   122a4:	ldr	r3, [fp, #-104]	; 0xffffff98
   122a8:	ldr	r3, [r3]
   122ac:	and	r3, r3, #4
   122b0:	cmp	r3, #0
   122b4:	beq	1242c <_start@@Base+0x115c>
   122b8:	ldr	r3, [fp, #-108]	; 0xffffff94
   122bc:	cmp	r3, #0
   122c0:	ble	12340 <_start@@Base+0x1070>
   122c4:	ldr	r3, [fp, #-104]	; 0xffffff98
   122c8:	ldr	r3, [r3]
   122cc:	and	r3, r3, #8
   122d0:	cmp	r3, #0
   122d4:	bne	12340 <_start@@Base+0x1070>
   122d8:	b	1242c <_start@@Base+0x115c>
   122dc:	ldr	r3, [fp, #-104]	; 0xffffff98
   122e0:	ldr	r3, [r3]
   122e4:	cmp	r3, #1
   122e8:	bne	12340 <_start@@Base+0x1070>
   122ec:	ldr	r0, [fp, #-104]	; 0xffffff98
   122f0:	bl	13198 <mmk_matcher_get_predicate@@Base>
   122f4:	str	r0, [fp, #-112]	; 0xffffff90
   122f8:	ldr	r2, [fp, #4]
   122fc:	ldr	r3, [fp, #-112]	; 0xffffff90
   12300:	mov	r0, r2
   12304:	blx	r3
   12308:	mov	r3, r0
   1230c:	cmp	r3, #0
   12310:	bne	12340 <_start@@Base+0x1070>
   12314:	b	12438 <_start@@Base+0x1168>
   12318:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1231c:	add	r3, r3, #40	; 0x28
   12320:	mov	r2, #4
   12324:	mov	r1, r3
   12328:	add	r3, fp, #4
   1232c:	mov	r0, r3
   12330:	bl	143fc <mmk_memcmp@@Base>
   12334:	mov	r3, r0
   12338:	cmp	r3, #0
   1233c:	bne	12434 <_start@@Base+0x1164>
   12340:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12344:	ldr	r3, [r3, #12]
   12348:	cmp	r3, #0
   1234c:	beq	12364 <_start@@Base+0x1094>
   12350:	bl	11284 <__errno_location@plt>
   12354:	mov	r2, r0
   12358:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1235c:	ldr	r3, [r3, #12]
   12360:	str	r3, [r2]
   12364:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12368:	ldr	r3, [r3, #20]
   1236c:	cmp	r3, #0
   12370:	beq	123b0 <_start@@Base+0x10e0>
   12374:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12378:	ldr	r3, [r3, #16]
   1237c:	cmp	r3, #0
   12380:	bne	123b0 <_start@@Base+0x10e0>
   12384:	ldr	r3, [fp, #-136]	; 0xffffff78
   12388:	str	r3, [fp, #-140]	; 0xffffff74
   1238c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12390:	ldr	r3, [r3, #20]
   12394:	ldr	r2, [fp, #4]
   12398:	ldr	r1, [fp, #-140]	; 0xffffff74
   1239c:	mov	r0, r2
   123a0:	blx	r3
   123a4:	str	r0, [fp, #-116]	; 0xffffff8c
   123a8:	ldr	r3, [fp, #-116]	; 0xffffff8c
   123ac:	b	12458 <_start@@Base+0x1188>
   123b0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   123b4:	ldr	r3, [r3, #20]
   123b8:	cmp	r3, #0
   123bc:	beq	12400 <_start@@Base+0x1130>
   123c0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   123c4:	ldr	r3, [r3, #16]
   123c8:	cmp	r3, #0
   123cc:	beq	12400 <_start@@Base+0x1130>
   123d0:	ldr	r3, [fp, #-136]	; 0xffffff78
   123d4:	str	r3, [fp, #-140]	; 0xffffff74
   123d8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   123dc:	ldr	r3, [r3, #20]
   123e0:	ldr	r2, [fp, #4]
   123e4:	ldr	r1, [fp, #-140]	; 0xffffff74
   123e8:	mov	r0, r2
   123ec:	blx	r3
   123f0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   123f4:	ldr	r3, [r3, #16]
   123f8:	ldr	r3, [r3]
   123fc:	b	12458 <_start@@Base+0x1188>
   12400:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12404:	ldr	r3, [r3, #16]
   12408:	cmp	r3, #0
   1240c:	beq	12420 <_start@@Base+0x1150>
   12410:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12414:	ldr	r3, [r3, #16]
   12418:	ldr	r3, [r3]
   1241c:	b	12458 <_start@@Base+0x1188>
   12420:	ldr	r3, [pc, #72]	; 12470 <_start@@Base+0x11a0>
   12424:	ldr	r3, [r3]
   12428:	b	12458 <_start@@Base+0x1188>
   1242c:	nop			; (mov r0, r0)
   12430:	b	12438 <_start@@Base+0x1168>
   12434:	nop			; (mov r0, r0)
   12438:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1243c:	ldr	r3, [r3, #4]
   12440:	str	r3, [fp, #-36]	; 0xffffffdc
   12444:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12448:	cmp	r3, #0
   1244c:	bne	1220c <_start@@Base+0xf3c>
   12450:	ldr	r3, [pc, #24]	; 12470 <_start@@Base+0x11a0>
   12454:	ldr	r3, [r3]
   12458:	mov	r0, r3
   1245c:	sub	sp, fp, #8
   12460:	pop	{r4, fp, lr}
   12464:	add	sp, sp, #16
   12468:	bx	lr
   1246c:	andeq	r1, r1, r8, ror #22
   12470:	muleq	r2, ip, r0
   12474:	push	{fp, lr}
   12478:	add	fp, sp, #4
   1247c:	sub	sp, sp, #8
   12480:	str	r0, [fp, #-8]
   12484:	ldr	r1, [pc, #20]	; 124a0 <_start@@Base+0x11d0>
   12488:	ldr	r0, [fp, #-8]
   1248c:	bl	131a0 <mmk_mock_create_internal@@Base>
   12490:	mov	r3, r0
   12494:	mov	r0, r3
   12498:	sub	sp, fp, #4
   1249c:	pop	{fp, pc}
   124a0:	andeq	r1, r1, r4, ror ip

000124a4 <set_valid@@Base>:
   124a4:	push	{fp}		; (str fp, [sp, #-4]!)
   124a8:	add	fp, sp, #0
   124ac:	ldr	r3, [pc, #20]	; 124c8 <set_valid@@Base+0x24>
   124b0:	mov	r2, #1
   124b4:	str	r2, [r3]
   124b8:	nop			; (mov r0, r0)
   124bc:	add	sp, fp, #0
   124c0:	pop	{fp}		; (ldr fp, [sp], #4)
   124c4:	bx	lr
   124c8:	muleq	r2, r4, r0

000124cc <main@@Base>:
   124cc:	push	{fp, lr}
   124d0:	add	fp, sp, #4
   124d4:	sub	sp, sp, #464	; 0x1d0
   124d8:	ldr	r0, [pc, #2572]	; 12eec <main@@Base+0xa20>
   124dc:	bl	11b38 <_start@@Base+0x868>
   124e0:	mov	r0, #0
   124e4:	bl	130bc <mmk_matcher_init@@Base>
   124e8:	sub	r3, fp, #460	; 0x1cc
   124ec:	mov	r2, #0
   124f0:	str	r2, [r3]
   124f4:	str	r2, [r3, #4]
   124f8:	str	r2, [r3, #8]
   124fc:	str	r2, [r3, #12]
   12500:	str	r2, [r3, #16]
   12504:	ldr	r3, [pc, #2532]	; 12ef0 <main@@Base+0xa24>
   12508:	str	r3, [fp, #-448]	; 0xfffffe40
   1250c:	sub	r3, fp, #460	; 0x1cc
   12510:	mov	r0, r3
   12514:	bl	1485c <mmk_when_init@@Base>
   12518:	bl	11200 <fn_vv@plt>
   1251c:	bl	130f4 <mmk_matcher_term@@Base>
   12520:	mov	r0, #1
   12524:	bl	130bc <mmk_matcher_init@@Base>
   12528:	bl	11200 <fn_vv@plt>
   1252c:	bl	130f4 <mmk_matcher_term@@Base>
   12530:	sub	r3, fp, #440	; 0x1b8
   12534:	mov	r2, #0
   12538:	str	r2, [r3]
   1253c:	str	r2, [r3, #4]
   12540:	str	r2, [r3, #8]
   12544:	str	r2, [r3, #12]
   12548:	str	r2, [r3, #16]
   1254c:	str	r2, [r3, #20]
   12550:	mov	r3, #1
   12554:	str	r3, [fp, #-440]	; 0xfffffe48
   12558:	mov	r3, #1
   1255c:	str	r3, [fp, #-436]	; 0xfffffe4c
   12560:	sub	r3, fp, #440	; 0x1b8
   12564:	mov	r0, r3
   12568:	bl	1402c <mmk_verify_times@@Base>
   1256c:	mov	r3, r0
   12570:	cmp	r3, #0
   12574:	bne	1259c <main@@Base+0xd0>
   12578:	ldr	r3, [pc, #2420]	; 12ef4 <main@@Base+0xa28>
   1257c:	ldr	r0, [r3]
   12580:	ldr	r3, [pc, #2416]	; 12ef8 <main@@Base+0xa2c>
   12584:	str	r3, [sp]
   12588:	mov	r3, #42	; 0x2a
   1258c:	ldr	r2, [pc, #2408]	; 12efc <main@@Base+0xa30>
   12590:	ldr	r1, [pc, #2408]	; 12f00 <main@@Base+0xa34>
   12594:	bl	11278 <fprintf@plt>
   12598:	bl	112c0 <abort@plt>
   1259c:	mov	r0, #1
   125a0:	bl	130bc <mmk_matcher_init@@Base>
   125a4:	bl	11200 <fn_vv@plt>
   125a8:	bl	130f4 <mmk_matcher_term@@Base>
   125ac:	sub	r3, fp, #416	; 0x1a0
   125b0:	mov	r2, #0
   125b4:	str	r2, [r3]
   125b8:	str	r2, [r3, #4]
   125bc:	str	r2, [r3, #8]
   125c0:	str	r2, [r3, #12]
   125c4:	str	r2, [r3, #16]
   125c8:	str	r2, [r3, #20]
   125cc:	mov	r3, #1
   125d0:	str	r3, [fp, #-416]	; 0xfffffe60
   125d4:	mov	r3, #1
   125d8:	str	r3, [fp, #-404]	; 0xfffffe6c
   125dc:	sub	r3, fp, #416	; 0x1a0
   125e0:	mov	r0, r3
   125e4:	bl	1402c <mmk_verify_times@@Base>
   125e8:	mov	r3, r0
   125ec:	cmp	r3, #0
   125f0:	bne	12618 <main@@Base+0x14c>
   125f4:	ldr	r3, [pc, #2296]	; 12ef4 <main@@Base+0xa28>
   125f8:	ldr	r0, [r3]
   125fc:	ldr	r3, [pc, #2304]	; 12f04 <main@@Base+0xa38>
   12600:	str	r3, [sp]
   12604:	mov	r3, #43	; 0x2b
   12608:	ldr	r2, [pc, #2284]	; 12efc <main@@Base+0xa30>
   1260c:	ldr	r1, [pc, #2284]	; 12f00 <main@@Base+0xa34>
   12610:	bl	11278 <fprintf@plt>
   12614:	bl	112c0 <abort@plt>
   12618:	mov	r0, #1
   1261c:	bl	130bc <mmk_matcher_init@@Base>
   12620:	bl	11200 <fn_vv@plt>
   12624:	bl	130f4 <mmk_matcher_term@@Base>
   12628:	sub	r3, fp, #392	; 0x188
   1262c:	mov	r2, #0
   12630:	str	r2, [r3]
   12634:	str	r2, [r3, #4]
   12638:	str	r2, [r3, #8]
   1263c:	str	r2, [r3, #12]
   12640:	str	r2, [r3, #16]
   12644:	str	r2, [r3, #20]
   12648:	mov	r3, #1
   1264c:	str	r3, [fp, #-392]	; 0xfffffe78
   12650:	mov	r3, #1
   12654:	str	r3, [fp, #-376]	; 0xfffffe88
   12658:	sub	r3, fp, #392	; 0x188
   1265c:	mov	r0, r3
   12660:	bl	1402c <mmk_verify_times@@Base>
   12664:	mov	r3, r0
   12668:	cmp	r3, #0
   1266c:	beq	12694 <main@@Base+0x1c8>
   12670:	ldr	r3, [pc, #2172]	; 12ef4 <main@@Base+0xa28>
   12674:	ldr	r0, [r3]
   12678:	ldr	r3, [pc, #2184]	; 12f08 <main@@Base+0xa3c>
   1267c:	str	r3, [sp]
   12680:	mov	r3, #45	; 0x2d
   12684:	ldr	r2, [pc, #2160]	; 12efc <main@@Base+0xa30>
   12688:	ldr	r1, [pc, #2160]	; 12f00 <main@@Base+0xa34>
   1268c:	bl	11278 <fprintf@plt>
   12690:	bl	112c0 <abort@plt>
   12694:	mov	r0, #1
   12698:	bl	130bc <mmk_matcher_init@@Base>
   1269c:	bl	11200 <fn_vv@plt>
   126a0:	bl	130f4 <mmk_matcher_term@@Base>
   126a4:	sub	r3, fp, #368	; 0x170
   126a8:	mov	r2, #0
   126ac:	str	r2, [r3]
   126b0:	str	r2, [r3, #4]
   126b4:	str	r2, [r3, #8]
   126b8:	str	r2, [r3, #12]
   126bc:	str	r2, [r3, #16]
   126c0:	str	r2, [r3, #20]
   126c4:	mov	r3, #1
   126c8:	str	r3, [fp, #-368]	; 0xfffffe90
   126cc:	mov	r3, #1
   126d0:	str	r3, [fp, #-360]	; 0xfffffe98
   126d4:	sub	r3, fp, #368	; 0x170
   126d8:	mov	r0, r3
   126dc:	bl	1402c <mmk_verify_times@@Base>
   126e0:	mov	r3, r0
   126e4:	cmp	r3, #0
   126e8:	beq	12710 <main@@Base+0x244>
   126ec:	ldr	r3, [pc, #2048]	; 12ef4 <main@@Base+0xa28>
   126f0:	ldr	r0, [r3]
   126f4:	ldr	r3, [pc, #2064]	; 12f0c <main@@Base+0xa40>
   126f8:	str	r3, [sp]
   126fc:	mov	r3, #46	; 0x2e
   12700:	ldr	r2, [pc, #2036]	; 12efc <main@@Base+0xa30>
   12704:	ldr	r1, [pc, #2036]	; 12f00 <main@@Base+0xa34>
   12708:	bl	11278 <fprintf@plt>
   1270c:	bl	112c0 <abort@plt>
   12710:	mov	r0, #1
   12714:	bl	130bc <mmk_matcher_init@@Base>
   12718:	bl	11200 <fn_vv@plt>
   1271c:	bl	130f4 <mmk_matcher_term@@Base>
   12720:	sub	r3, fp, #344	; 0x158
   12724:	mov	r2, #0
   12728:	str	r2, [r3]
   1272c:	str	r2, [r3, #4]
   12730:	str	r2, [r3, #8]
   12734:	str	r2, [r3, #12]
   12738:	str	r2, [r3, #16]
   1273c:	str	r2, [r3, #20]
   12740:	mov	r3, #1
   12744:	str	r3, [fp, #-344]	; 0xfffffea8
   12748:	mov	r3, #1
   1274c:	str	r3, [fp, #-336]	; 0xfffffeb0
   12750:	mov	r3, #1
   12754:	str	r3, [fp, #-332]	; 0xfffffeb4
   12758:	sub	r3, fp, #344	; 0x158
   1275c:	mov	r0, r3
   12760:	bl	1402c <mmk_verify_times@@Base>
   12764:	mov	r3, r0
   12768:	cmp	r3, #0
   1276c:	beq	12794 <main@@Base+0x2c8>
   12770:	ldr	r3, [pc, #1916]	; 12ef4 <main@@Base+0xa28>
   12774:	ldr	r0, [r3]
   12778:	ldr	r3, [pc, #1936]	; 12f10 <main@@Base+0xa44>
   1277c:	str	r3, [sp]
   12780:	mov	r3, #47	; 0x2f
   12784:	ldr	r2, [pc, #1904]	; 12efc <main@@Base+0xa30>
   12788:	ldr	r1, [pc, #1904]	; 12f00 <main@@Base+0xa34>
   1278c:	bl	11278 <fprintf@plt>
   12790:	bl	112c0 <abort@plt>
   12794:	bl	11200 <fn_vv@plt>
   12798:	ldr	r3, [pc, #1908]	; 12f14 <main@@Base+0xa48>
   1279c:	ldr	r3, [r3]
   127a0:	cmp	r3, #0
   127a4:	bne	127cc <main@@Base+0x300>
   127a8:	ldr	r3, [pc, #1860]	; 12ef4 <main@@Base+0xa28>
   127ac:	ldr	r0, [r3]
   127b0:	ldr	r3, [pc, #1888]	; 12f18 <main@@Base+0xa4c>
   127b4:	str	r3, [sp]
   127b8:	mov	r3, #50	; 0x32
   127bc:	ldr	r2, [pc, #1848]	; 12efc <main@@Base+0xa30>
   127c0:	ldr	r1, [pc, #1848]	; 12f00 <main@@Base+0xa34>
   127c4:	bl	11278 <fprintf@plt>
   127c8:	bl	112c0 <abort@plt>
   127cc:	mov	r0, #1
   127d0:	bl	130bc <mmk_matcher_init@@Base>
   127d4:	bl	11200 <fn_vv@plt>
   127d8:	bl	130f4 <mmk_matcher_term@@Base>
   127dc:	sub	r3, fp, #320	; 0x140
   127e0:	mov	r2, #0
   127e4:	str	r2, [r3]
   127e8:	str	r2, [r3, #4]
   127ec:	str	r2, [r3, #8]
   127f0:	str	r2, [r3, #12]
   127f4:	str	r2, [r3, #16]
   127f8:	str	r2, [r3, #20]
   127fc:	mov	r3, #1
   12800:	str	r3, [fp, #-320]	; 0xfffffec0
   12804:	mov	r3, #1
   12808:	str	r3, [fp, #-304]	; 0xfffffed0
   1280c:	sub	r3, fp, #320	; 0x140
   12810:	mov	r0, r3
   12814:	bl	1402c <mmk_verify_times@@Base>
   12818:	mov	r3, r0
   1281c:	cmp	r3, #0
   12820:	bne	12848 <main@@Base+0x37c>
   12824:	ldr	r3, [pc, #1736]	; 12ef4 <main@@Base+0xa28>
   12828:	ldr	r0, [r3]
   1282c:	ldr	r3, [pc, #1768]	; 12f1c <main@@Base+0xa50>
   12830:	str	r3, [sp]
   12834:	mov	r3, #51	; 0x33
   12838:	ldr	r2, [pc, #1724]	; 12efc <main@@Base+0xa30>
   1283c:	ldr	r1, [pc, #1724]	; 12f00 <main@@Base+0xa34>
   12840:	bl	11278 <fprintf@plt>
   12844:	bl	112c0 <abort@plt>
   12848:	mov	r0, #1
   1284c:	bl	130bc <mmk_matcher_init@@Base>
   12850:	bl	11200 <fn_vv@plt>
   12854:	bl	130f4 <mmk_matcher_term@@Base>
   12858:	sub	r3, fp, #296	; 0x128
   1285c:	mov	r2, #0
   12860:	str	r2, [r3]
   12864:	str	r2, [r3, #4]
   12868:	str	r2, [r3, #8]
   1286c:	str	r2, [r3, #12]
   12870:	str	r2, [r3, #16]
   12874:	str	r2, [r3, #20]
   12878:	mov	r3, #1
   1287c:	str	r3, [fp, #-296]	; 0xfffffed8
   12880:	mov	r3, #1
   12884:	str	r3, [fp, #-288]	; 0xfffffee0
   12888:	sub	r3, fp, #296	; 0x128
   1288c:	mov	r0, r3
   12890:	bl	1402c <mmk_verify_times@@Base>
   12894:	mov	r3, r0
   12898:	cmp	r3, #0
   1289c:	bne	128c4 <main@@Base+0x3f8>
   128a0:	ldr	r3, [pc, #1612]	; 12ef4 <main@@Base+0xa28>
   128a4:	ldr	r0, [r3]
   128a8:	ldr	r3, [pc, #1648]	; 12f20 <main@@Base+0xa54>
   128ac:	str	r3, [sp]
   128b0:	mov	r3, #52	; 0x34
   128b4:	ldr	r2, [pc, #1600]	; 12efc <main@@Base+0xa30>
   128b8:	ldr	r1, [pc, #1600]	; 12f00 <main@@Base+0xa34>
   128bc:	bl	11278 <fprintf@plt>
   128c0:	bl	112c0 <abort@plt>
   128c4:	mov	r0, #1
   128c8:	bl	130bc <mmk_matcher_init@@Base>
   128cc:	bl	11200 <fn_vv@plt>
   128d0:	bl	130f4 <mmk_matcher_term@@Base>
   128d4:	sub	r3, fp, #272	; 0x110
   128d8:	mov	r2, #0
   128dc:	str	r2, [r3]
   128e0:	str	r2, [r3, #4]
   128e4:	str	r2, [r3, #8]
   128e8:	str	r2, [r3, #12]
   128ec:	str	r2, [r3, #16]
   128f0:	str	r2, [r3, #20]
   128f4:	mov	r3, #1
   128f8:	str	r3, [fp, #-272]	; 0xfffffef0
   128fc:	mov	r3, #1
   12900:	str	r3, [fp, #-260]	; 0xfffffefc
   12904:	sub	r3, fp, #272	; 0x110
   12908:	mov	r0, r3
   1290c:	bl	1402c <mmk_verify_times@@Base>
   12910:	mov	r3, r0
   12914:	cmp	r3, #0
   12918:	bne	12940 <main@@Base+0x474>
   1291c:	ldr	r3, [pc, #1488]	; 12ef4 <main@@Base+0xa28>
   12920:	ldr	r0, [r3]
   12924:	ldr	r3, [pc, #1496]	; 12f04 <main@@Base+0xa38>
   12928:	str	r3, [sp]
   1292c:	mov	r3, #53	; 0x35
   12930:	ldr	r2, [pc, #1476]	; 12efc <main@@Base+0xa30>
   12934:	ldr	r1, [pc, #1476]	; 12f00 <main@@Base+0xa34>
   12938:	bl	11278 <fprintf@plt>
   1293c:	bl	112c0 <abort@plt>
   12940:	mov	r0, #1
   12944:	bl	130bc <mmk_matcher_init@@Base>
   12948:	bl	11200 <fn_vv@plt>
   1294c:	bl	130f4 <mmk_matcher_term@@Base>
   12950:	sub	r3, fp, #248	; 0xf8
   12954:	mov	r2, #0
   12958:	str	r2, [r3]
   1295c:	str	r2, [r3, #4]
   12960:	str	r2, [r3, #8]
   12964:	str	r2, [r3, #12]
   12968:	str	r2, [r3, #16]
   1296c:	str	r2, [r3, #20]
   12970:	mov	r3, #1
   12974:	str	r3, [fp, #-248]	; 0xffffff08
   12978:	mov	r3, #1
   1297c:	str	r3, [fp, #-240]	; 0xffffff10
   12980:	mov	r3, #1
   12984:	str	r3, [fp, #-236]	; 0xffffff14
   12988:	sub	r3, fp, #248	; 0xf8
   1298c:	mov	r0, r3
   12990:	bl	1402c <mmk_verify_times@@Base>
   12994:	mov	r3, r0
   12998:	cmp	r3, #0
   1299c:	bne	129c4 <main@@Base+0x4f8>
   129a0:	ldr	r3, [pc, #1356]	; 12ef4 <main@@Base+0xa28>
   129a4:	ldr	r0, [r3]
   129a8:	ldr	r3, [pc, #1396]	; 12f24 <main@@Base+0xa58>
   129ac:	str	r3, [sp]
   129b0:	mov	r3, #54	; 0x36
   129b4:	ldr	r2, [pc, #1344]	; 12efc <main@@Base+0xa30>
   129b8:	ldr	r1, [pc, #1344]	; 12f00 <main@@Base+0xa34>
   129bc:	bl	11278 <fprintf@plt>
   129c0:	bl	112c0 <abort@plt>
   129c4:	mov	r0, #1
   129c8:	bl	130bc <mmk_matcher_init@@Base>
   129cc:	bl	11200 <fn_vv@plt>
   129d0:	bl	130f4 <mmk_matcher_term@@Base>
   129d4:	sub	r3, fp, #224	; 0xe0
   129d8:	mov	r2, #0
   129dc:	str	r2, [r3]
   129e0:	str	r2, [r3, #4]
   129e4:	str	r2, [r3, #8]
   129e8:	str	r2, [r3, #12]
   129ec:	str	r2, [r3, #16]
   129f0:	str	r2, [r3, #20]
   129f4:	mov	r3, #1
   129f8:	str	r3, [fp, #-224]	; 0xffffff20
   129fc:	mov	r3, #1
   12a00:	str	r3, [fp, #-220]	; 0xffffff24
   12a04:	sub	r3, fp, #224	; 0xe0
   12a08:	mov	r0, r3
   12a0c:	bl	1402c <mmk_verify_times@@Base>
   12a10:	mov	r3, r0
   12a14:	cmp	r3, #0
   12a18:	beq	12a40 <main@@Base+0x574>
   12a1c:	ldr	r3, [pc, #1232]	; 12ef4 <main@@Base+0xa28>
   12a20:	ldr	r0, [r3]
   12a24:	ldr	r3, [pc, #1276]	; 12f28 <main@@Base+0xa5c>
   12a28:	str	r3, [sp]
   12a2c:	mov	r3, #55	; 0x37
   12a30:	ldr	r2, [pc, #1220]	; 12efc <main@@Base+0xa30>
   12a34:	ldr	r1, [pc, #1220]	; 12f00 <main@@Base+0xa34>
   12a38:	bl	11278 <fprintf@plt>
   12a3c:	bl	112c0 <abort@plt>
   12a40:	mov	r0, #1
   12a44:	bl	130bc <mmk_matcher_init@@Base>
   12a48:	bl	11200 <fn_vv@plt>
   12a4c:	bl	130f4 <mmk_matcher_term@@Base>
   12a50:	sub	r3, fp, #200	; 0xc8
   12a54:	mov	r2, #0
   12a58:	str	r2, [r3]
   12a5c:	str	r2, [r3, #4]
   12a60:	str	r2, [r3, #8]
   12a64:	str	r2, [r3, #12]
   12a68:	str	r2, [r3, #16]
   12a6c:	str	r2, [r3, #20]
   12a70:	mov	r3, #1
   12a74:	str	r3, [fp, #-200]	; 0xffffff38
   12a78:	mov	r3, #2
   12a7c:	str	r3, [fp, #-184]	; 0xffffff48
   12a80:	sub	r3, fp, #200	; 0xc8
   12a84:	mov	r0, r3
   12a88:	bl	1402c <mmk_verify_times@@Base>
   12a8c:	mov	r3, r0
   12a90:	cmp	r3, #0
   12a94:	beq	12abc <main@@Base+0x5f0>
   12a98:	ldr	r3, [pc, #1108]	; 12ef4 <main@@Base+0xa28>
   12a9c:	ldr	r0, [r3]
   12aa0:	ldr	r3, [pc, #1156]	; 12f2c <main@@Base+0xa60>
   12aa4:	str	r3, [sp]
   12aa8:	mov	r3, #56	; 0x38
   12aac:	ldr	r2, [pc, #1096]	; 12efc <main@@Base+0xa30>
   12ab0:	ldr	r1, [pc, #1096]	; 12f00 <main@@Base+0xa34>
   12ab4:	bl	11278 <fprintf@plt>
   12ab8:	bl	112c0 <abort@plt>
   12abc:	mov	r0, #1
   12ac0:	bl	130bc <mmk_matcher_init@@Base>
   12ac4:	bl	11200 <fn_vv@plt>
   12ac8:	bl	130f4 <mmk_matcher_term@@Base>
   12acc:	sub	r3, fp, #176	; 0xb0
   12ad0:	mov	r2, #0
   12ad4:	str	r2, [r3]
   12ad8:	str	r2, [r3, #4]
   12adc:	str	r2, [r3, #8]
   12ae0:	str	r2, [r3, #12]
   12ae4:	str	r2, [r3, #16]
   12ae8:	str	r2, [r3, #20]
   12aec:	mov	r3, #1
   12af0:	str	r3, [fp, #-176]	; 0xffffff50
   12af4:	mov	r3, #2
   12af8:	str	r3, [fp, #-168]	; 0xffffff58
   12afc:	sub	r3, fp, #176	; 0xb0
   12b00:	mov	r0, r3
   12b04:	bl	1402c <mmk_verify_times@@Base>
   12b08:	mov	r3, r0
   12b0c:	cmp	r3, #0
   12b10:	beq	12b38 <main@@Base+0x66c>
   12b14:	ldr	r3, [pc, #984]	; 12ef4 <main@@Base+0xa28>
   12b18:	ldr	r0, [r3]
   12b1c:	ldr	r3, [pc, #1036]	; 12f30 <main@@Base+0xa64>
   12b20:	str	r3, [sp]
   12b24:	mov	r3, #57	; 0x39
   12b28:	ldr	r2, [pc, #972]	; 12efc <main@@Base+0xa30>
   12b2c:	ldr	r1, [pc, #972]	; 12f00 <main@@Base+0xa34>
   12b30:	bl	11278 <fprintf@plt>
   12b34:	bl	112c0 <abort@plt>
   12b38:	ldr	r0, [pc, #1012]	; 12f34 <main@@Base+0xa68>
   12b3c:	bl	13070 <mmk_reset@@Base>
   12b40:	ldr	r3, [pc, #1008]	; 12f38 <main@@Base+0xa6c>
   12b44:	str	r3, [fp, #-8]
   12b48:	ldr	r0, [pc, #1004]	; 12f3c <main@@Base+0xa70>
   12b4c:	bl	118e8 <_start@@Base+0x618>
   12b50:	mov	r0, #0
   12b54:	bl	130bc <mmk_matcher_init@@Base>
   12b58:	sub	r3, fp, #152	; 0x98
   12b5c:	mov	r2, #0
   12b60:	str	r2, [r3]
   12b64:	str	r2, [r3, #4]
   12b68:	str	r2, [r3, #8]
   12b6c:	str	r2, [r3, #12]
   12b70:	str	r2, [r3, #16]
   12b74:	ldr	r3, [fp, #-8]
   12b78:	str	r3, [fp, #-148]	; 0xffffff6c
   12b7c:	mov	r3, #1
   12b80:	str	r3, [fp, #-132]	; 0xffffff7c
   12b84:	sub	r3, fp, #132	; 0x84
   12b88:	str	r3, [fp, #-144]	; 0xffffff70
   12b8c:	sub	r3, fp, #152	; 0x98
   12b90:	mov	r0, r3
   12b94:	bl	1485c <mmk_when_init@@Base>
   12b98:	mov	r0, #1
   12b9c:	bl	11218 <fn_ii@plt>
   12ba0:	bl	130f4 <mmk_matcher_term@@Base>
   12ba4:	mov	r0, #1
   12ba8:	bl	11218 <fn_ii@plt>
   12bac:	mov	r3, r0
   12bb0:	cmp	r3, #1
   12bb4:	bne	12bd0 <main@@Base+0x704>
   12bb8:	bl	11284 <__errno_location@plt>
   12bbc:	mov	r3, r0
   12bc0:	ldr	r2, [r3]
   12bc4:	ldr	r3, [fp, #-8]
   12bc8:	cmp	r2, r3
   12bcc:	beq	12bf4 <main@@Base+0x728>
   12bd0:	ldr	r3, [pc, #796]	; 12ef4 <main@@Base+0xa28>
   12bd4:	ldr	r0, [r3]
   12bd8:	ldr	r3, [pc, #864]	; 12f40 <main@@Base+0xa74>
   12bdc:	str	r3, [sp]
   12be0:	mov	r3, #64	; 0x40
   12be4:	ldr	r2, [pc, #784]	; 12efc <main@@Base+0xa30>
   12be8:	ldr	r1, [pc, #784]	; 12f00 <main@@Base+0xa34>
   12bec:	bl	11278 <fprintf@plt>
   12bf0:	bl	112c0 <abort@plt>
   12bf4:	mov	r0, #42	; 0x2a
   12bf8:	bl	11218 <fn_ii@plt>
   12bfc:	mov	r3, r0
   12c00:	cmp	r3, #0
   12c04:	beq	12c2c <main@@Base+0x760>
   12c08:	ldr	r3, [pc, #740]	; 12ef4 <main@@Base+0xa28>
   12c0c:	ldr	r0, [r3]
   12c10:	ldr	r3, [pc, #812]	; 12f44 <main@@Base+0xa78>
   12c14:	str	r3, [sp]
   12c18:	mov	r3, #65	; 0x41
   12c1c:	ldr	r2, [pc, #728]	; 12efc <main@@Base+0xa30>
   12c20:	ldr	r1, [pc, #728]	; 12f00 <main@@Base+0xa34>
   12c24:	bl	11278 <fprintf@plt>
   12c28:	bl	112c0 <abort@plt>
   12c2c:	mov	r0, #1
   12c30:	bl	130bc <mmk_matcher_init@@Base>
   12c34:	mov	r1, #0
   12c38:	mov	r0, #0
   12c3c:	bl	13128 <mmk_matcher_add@@Base>
   12c40:	mov	r0, #0
   12c44:	bl	11218 <fn_ii@plt>
   12c48:	bl	130f4 <mmk_matcher_term@@Base>
   12c4c:	sub	r3, fp, #128	; 0x80
   12c50:	mov	r2, #0
   12c54:	str	r2, [r3]
   12c58:	str	r2, [r3, #4]
   12c5c:	str	r2, [r3, #8]
   12c60:	str	r2, [r3, #12]
   12c64:	str	r2, [r3, #16]
   12c68:	str	r2, [r3, #20]
   12c6c:	mov	r3, #1
   12c70:	str	r3, [fp, #-128]	; 0xffffff80
   12c74:	mov	r3, #2
   12c78:	str	r3, [fp, #-112]	; 0xffffff90
   12c7c:	sub	r3, fp, #128	; 0x80
   12c80:	mov	r0, r3
   12c84:	bl	1402c <mmk_verify_times@@Base>
   12c88:	mov	r3, r0
   12c8c:	cmp	r3, #0
   12c90:	bne	12cb8 <main@@Base+0x7ec>
   12c94:	ldr	r3, [pc, #600]	; 12ef4 <main@@Base+0xa28>
   12c98:	ldr	r0, [r3]
   12c9c:	ldr	r3, [pc, #676]	; 12f48 <main@@Base+0xa7c>
   12ca0:	str	r3, [sp]
   12ca4:	mov	r3, #67	; 0x43
   12ca8:	ldr	r2, [pc, #588]	; 12efc <main@@Base+0xa30>
   12cac:	ldr	r1, [pc, #588]	; 12f00 <main@@Base+0xa34>
   12cb0:	bl	11278 <fprintf@plt>
   12cb4:	bl	112c0 <abort@plt>
   12cb8:	mov	r0, #1
   12cbc:	bl	130bc <mmk_matcher_init@@Base>
   12cc0:	mov	r0, #1
   12cc4:	bl	11218 <fn_ii@plt>
   12cc8:	bl	130f4 <mmk_matcher_term@@Base>
   12ccc:	sub	r3, fp, #104	; 0x68
   12cd0:	mov	r2, #0
   12cd4:	str	r2, [r3]
   12cd8:	str	r2, [r3, #4]
   12cdc:	str	r2, [r3, #8]
   12ce0:	str	r2, [r3, #12]
   12ce4:	str	r2, [r3, #16]
   12ce8:	str	r2, [r3, #20]
   12cec:	mov	r3, #1
   12cf0:	str	r3, [fp, #-104]	; 0xffffff98
   12cf4:	mov	r3, #1
   12cf8:	str	r3, [fp, #-88]	; 0xffffffa8
   12cfc:	sub	r3, fp, #104	; 0x68
   12d00:	mov	r0, r3
   12d04:	bl	1402c <mmk_verify_times@@Base>
   12d08:	mov	r3, r0
   12d0c:	cmp	r3, #0
   12d10:	bne	12d38 <main@@Base+0x86c>
   12d14:	ldr	r3, [pc, #472]	; 12ef4 <main@@Base+0xa28>
   12d18:	ldr	r0, [r3]
   12d1c:	ldr	r3, [pc, #552]	; 12f4c <main@@Base+0xa80>
   12d20:	str	r3, [sp]
   12d24:	mov	r3, #68	; 0x44
   12d28:	ldr	r2, [pc, #460]	; 12efc <main@@Base+0xa30>
   12d2c:	ldr	r1, [pc, #460]	; 12f00 <main@@Base+0xa34>
   12d30:	bl	11278 <fprintf@plt>
   12d34:	bl	112c0 <abort@plt>
   12d38:	mov	r0, #1
   12d3c:	bl	130bc <mmk_matcher_init@@Base>
   12d40:	mov	r0, #42	; 0x2a
   12d44:	bl	11218 <fn_ii@plt>
   12d48:	bl	130f4 <mmk_matcher_term@@Base>
   12d4c:	sub	r3, fp, #80	; 0x50
   12d50:	mov	r2, #0
   12d54:	str	r2, [r3]
   12d58:	str	r2, [r3, #4]
   12d5c:	str	r2, [r3, #8]
   12d60:	str	r2, [r3, #12]
   12d64:	str	r2, [r3, #16]
   12d68:	str	r2, [r3, #20]
   12d6c:	mov	r3, #1
   12d70:	str	r3, [fp, #-80]	; 0xffffffb0
   12d74:	mov	r3, #1
   12d78:	str	r3, [fp, #-64]	; 0xffffffc0
   12d7c:	sub	r3, fp, #80	; 0x50
   12d80:	mov	r0, r3
   12d84:	bl	1402c <mmk_verify_times@@Base>
   12d88:	mov	r3, r0
   12d8c:	cmp	r3, #0
   12d90:	bne	12db8 <main@@Base+0x8ec>
   12d94:	ldr	r3, [pc, #344]	; 12ef4 <main@@Base+0xa28>
   12d98:	ldr	r0, [r3]
   12d9c:	ldr	r3, [pc, #428]	; 12f50 <main@@Base+0xa84>
   12da0:	str	r3, [sp]
   12da4:	mov	r3, #69	; 0x45
   12da8:	ldr	r2, [pc, #332]	; 12efc <main@@Base+0xa30>
   12dac:	ldr	r1, [pc, #332]	; 12f00 <main@@Base+0xa34>
   12db0:	bl	11278 <fprintf@plt>
   12db4:	bl	112c0 <abort@plt>
   12db8:	mov	r0, #1
   12dbc:	bl	130bc <mmk_matcher_init@@Base>
   12dc0:	mov	r0, #12
   12dc4:	bl	11218 <fn_ii@plt>
   12dc8:	bl	130f4 <mmk_matcher_term@@Base>
   12dcc:	sub	r3, fp, #56	; 0x38
   12dd0:	mov	r2, #0
   12dd4:	str	r2, [r3]
   12dd8:	str	r2, [r3, #4]
   12ddc:	str	r2, [r3, #8]
   12de0:	str	r2, [r3, #12]
   12de4:	str	r2, [r3, #16]
   12de8:	str	r2, [r3, #20]
   12dec:	mov	r3, #1
   12df0:	str	r3, [fp, #-56]	; 0xffffffc8
   12df4:	mov	r3, #1
   12df8:	str	r3, [fp, #-52]	; 0xffffffcc
   12dfc:	sub	r3, fp, #56	; 0x38
   12e00:	mov	r0, r3
   12e04:	bl	1402c <mmk_verify_times@@Base>
   12e08:	mov	r3, r0
   12e0c:	cmp	r3, #0
   12e10:	bne	12e38 <main@@Base+0x96c>
   12e14:	ldr	r3, [pc, #216]	; 12ef4 <main@@Base+0xa28>
   12e18:	ldr	r0, [r3]
   12e1c:	ldr	r3, [pc, #304]	; 12f54 <main@@Base+0xa88>
   12e20:	str	r3, [sp]
   12e24:	mov	r3, #70	; 0x46
   12e28:	ldr	r2, [pc, #204]	; 12efc <main@@Base+0xa30>
   12e2c:	ldr	r1, [pc, #204]	; 12f00 <main@@Base+0xa34>
   12e30:	bl	11278 <fprintf@plt>
   12e34:	bl	112c0 <abort@plt>
   12e38:	ldr	r0, [pc, #280]	; 12f58 <main@@Base+0xa8c>
   12e3c:	bl	13070 <mmk_reset@@Base>
   12e40:	ldr	r0, [pc, #276]	; 12f5c <main@@Base+0xa90>
   12e44:	bl	12474 <_start@@Base+0x11a4>
   12e48:	mov	r0, #0
   12e4c:	bl	130bc <mmk_matcher_init@@Base>
   12e50:	sub	r3, fp, #32
   12e54:	mov	r2, #0
   12e58:	str	r2, [r3]
   12e5c:	str	r2, [r3, #4]
   12e60:	str	r2, [r3, #8]
   12e64:	str	r2, [r3, #12]
   12e68:	str	r2, [r3, #16]
   12e6c:	mov	r3, #1
   12e70:	str	r3, [fp, #-12]
   12e74:	sub	r3, fp, #12
   12e78:	str	r3, [fp, #-24]	; 0xffffffe8
   12e7c:	sub	r3, fp, #32
   12e80:	mov	r0, r3
   12e84:	bl	1485c <mmk_when_init@@Base>
   12e88:	mov	r1, #42	; 0x2a
   12e8c:	mov	r0, #1
   12e90:	bl	11224 <fn_ii_va@plt>
   12e94:	bl	130f4 <mmk_matcher_term@@Base>
   12e98:	mov	r1, #42	; 0x2a
   12e9c:	mov	r0, #1
   12ea0:	bl	11224 <fn_ii_va@plt>
   12ea4:	mov	r3, r0
   12ea8:	cmp	r3, #1
   12eac:	beq	12ed4 <main@@Base+0xa08>
   12eb0:	ldr	r3, [pc, #60]	; 12ef4 <main@@Base+0xa28>
   12eb4:	ldr	r0, [r3]
   12eb8:	ldr	r3, [pc, #160]	; 12f60 <main@@Base+0xa94>
   12ebc:	str	r3, [sp]
   12ec0:	mov	r3, #77	; 0x4d
   12ec4:	ldr	r2, [pc, #48]	; 12efc <main@@Base+0xa30>
   12ec8:	ldr	r1, [pc, #48]	; 12f00 <main@@Base+0xa34>
   12ecc:	bl	11278 <fprintf@plt>
   12ed0:	bl	112c0 <abort@plt>
   12ed4:	ldr	r0, [pc, #136]	; 12f64 <main@@Base+0xa98>
   12ed8:	bl	13070 <mmk_reset@@Base>
   12edc:	mov	r3, #0
   12ee0:	mov	r0, r3
   12ee4:	sub	sp, fp, #4
   12ee8:	pop	{fp, pc}
   12eec:	andeq	r4, r1, r4, lsl #24
   12ef0:	andeq	r2, r1, r4, lsr #9
   12ef4:	andeq	r6, r2, r8, ror r0
   12ef8:	andeq	r4, r1, r8, ror #24
   12efc:	andeq	r4, r1, ip, lsl #24
   12f00:	andeq	r4, r1, r8, asr #24
   12f04:	andeq	r4, r1, r8, lsl #25
   12f08:	andeq	r4, r1, ip, lsr #25
   12f0c:	ldrdeq	r4, [r1], -r0
   12f10:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   12f14:	muleq	r2, r4, r0
   12f18:	andeq	r4, r1, r8, lsr #26
   12f1c:	andeq	r4, r1, r0, lsr sp
   12f20:	andeq	r4, r1, r0, asr sp
   12f24:	andeq	r4, r1, r4, ror sp
   12f28:	andeq	r4, r1, r8, lsr #27
   12f2c:	andeq	r4, r1, ip, asr #27
   12f30:	strdeq	r4, [r1], -r0
   12f34:	andeq	r1, r1, r0, lsl #4
   12f38:	mrc2	14, 7, pc, cr14, cr14, {7}
   12f3c:	andeq	r4, r1, r4, lsl lr
   12f40:	andeq	r4, r1, ip, lsl lr
   12f44:	andeq	r4, r1, ip, lsr lr
   12f48:	andeq	r4, r1, ip, asr #28
   12f4c:	andeq	r4, r1, r8, ror lr
   12f50:	muleq	r1, ip, lr
   12f54:	andeq	r4, r1, r0, asr #29
   12f58:	andeq	r1, r1, r8, lsl r2
   12f5c:	andeq	r4, r1, r4, ror #29
   12f60:	strdeq	r4, [r1], -r0
   12f64:	andeq	r1, r1, r4, lsr #4

00012f68 <mmk_init@@Base>:
   12f68:	push	{fp, lr}
   12f6c:	add	fp, sp, #4
   12f70:	sub	sp, sp, #8
   12f74:	ldr	r3, [pc, #120]	; 12ff4 <mmk_init@@Base+0x8c>
   12f78:	ldr	r3, [r3]
   12f7c:	cmp	r3, #0
   12f80:	bne	12fe8 <mmk_init@@Base+0x80>
   12f84:	bl	13754 <plt_init_ctx@@Base>
   12f88:	mov	r2, r0
   12f8c:	ldr	r3, [pc, #96]	; 12ff4 <mmk_init@@Base+0x8c>
   12f90:	str	r2, [r3, #4]
   12f94:	ldr	r3, [pc, #88]	; 12ff4 <mmk_init@@Base+0x8c>
   12f98:	ldr	r3, [r3, #4]
   12f9c:	cmn	r3, #1
   12fa0:	bne	12fc8 <mmk_init@@Base+0x60>
   12fa4:	ldr	r3, [pc, #76]	; 12ff8 <mmk_init@@Base+0x90>
   12fa8:	ldr	r0, [r3]
   12fac:	ldr	r3, [pc, #72]	; 12ffc <mmk_init@@Base+0x94>
   12fb0:	str	r3, [sp]
   12fb4:	mov	r3, #45	; 0x2d
   12fb8:	ldr	r2, [pc, #64]	; 13000 <mmk_init@@Base+0x98>
   12fbc:	ldr	r1, [pc, #64]	; 13004 <mmk_init@@Base+0x9c>
   12fc0:	bl	11278 <fprintf@plt>
   12fc4:	bl	112c0 <abort@plt>
   12fc8:	ldr	r3, [pc, #36]	; 12ff4 <mmk_init@@Base+0x8c>
   12fcc:	ldr	r3, [r3, #4]
   12fd0:	mov	r0, r3
   12fd4:	bl	1476c <mmk_init_vital_functions@@Base>
   12fd8:	ldr	r3, [pc, #20]	; 12ff4 <mmk_init@@Base+0x8c>
   12fdc:	mov	r2, #1
   12fe0:	str	r2, [r3]
   12fe4:	b	12fec <mmk_init@@Base+0x84>
   12fe8:	nop			; (mov r0, r0)
   12fec:	sub	sp, fp, #4
   12ff0:	pop	{fp, pc}
   12ff4:	andeq	r6, r2, r0, lsr #1
   12ff8:	andeq	r6, r2, r8, ror r0
   12ffc:	andeq	r4, r1, r0, ror #30
   13000:	andeq	r4, r1, r8, lsl #30
   13004:	andeq	r4, r1, r0, asr #30

00013008 <mmk_plt_ctx@@Base>:
   13008:	push	{fp, lr}
   1300c:	add	fp, sp, #4
   13010:	sub	sp, sp, #8
   13014:	ldr	r3, [pc, #64]	; 1305c <mmk_plt_ctx@@Base+0x54>
   13018:	ldr	r3, [r3]
   1301c:	cmp	r3, #0
   13020:	bne	13048 <mmk_plt_ctx@@Base+0x40>
   13024:	ldr	r3, [pc, #52]	; 13060 <mmk_plt_ctx@@Base+0x58>
   13028:	ldr	r0, [r3]
   1302c:	ldr	r3, [pc, #48]	; 13064 <mmk_plt_ctx@@Base+0x5c>
   13030:	str	r3, [sp]
   13034:	mov	r3, #54	; 0x36
   13038:	ldr	r2, [pc, #40]	; 13068 <mmk_plt_ctx@@Base+0x60>
   1303c:	ldr	r1, [pc, #40]	; 1306c <mmk_plt_ctx@@Base+0x64>
   13040:	bl	11278 <fprintf@plt>
   13044:	bl	112c0 <abort@plt>
   13048:	ldr	r3, [pc, #12]	; 1305c <mmk_plt_ctx@@Base+0x54>
   1304c:	ldr	r3, [r3, #4]
   13050:	mov	r0, r3
   13054:	sub	sp, fp, #4
   13058:	pop	{fp, pc}
   1305c:	andeq	r6, r2, r0, lsr #1
   13060:	andeq	r6, r2, r8, ror r0
   13064:	andeq	r4, r1, r8, ror pc
   13068:	andeq	r4, r1, r8, lsl #30
   1306c:	andeq	r4, r1, r0, asr #30

00013070 <mmk_reset@@Base>:
   13070:	push	{fp, lr}
   13074:	add	fp, sp, #4
   13078:	sub	sp, sp, #16
   1307c:	str	r0, [fp, #-16]
   13080:	ldr	r3, [fp, #-16]
   13084:	cmp	r3, #0
   13088:	beq	130b0 <mmk_reset@@Base+0x40>
   1308c:	ldr	r0, [fp, #-16]
   13090:	bl	13e34 <mmk_ask_ctx@@Base>
   13094:	str	r0, [fp, #-8]
   13098:	ldr	r0, [fp, #-8]
   1309c:	bl	13af4 <mmk_stub_context@@Base>
   130a0:	str	r0, [fp, #-12]
   130a4:	ldr	r0, [fp, #-12]
   130a8:	bl	13374 <mmk_mock_destroy_internal@@Base>
   130ac:	b	130b4 <mmk_reset@@Base+0x44>
   130b0:	nop			; (mov r0, r0)
   130b4:	sub	sp, fp, #4
   130b8:	pop	{fp, pc}

000130bc <mmk_matcher_init@@Base>:
   130bc:	push	{r4, lr}
   130c0:	mov	r4, r0
   130c4:	mov	r0, #12
   130c8:	bl	1473c <mmk_malloc@@Base>
   130cc:	ldr	r1, [pc, #28]	; 130f0 <mmk_matcher_init@@Base+0x34>
   130d0:	mov	r2, #0
   130d4:	mov	r3, r0
   130d8:	str	r4, [r0]
   130dc:	bl	14bf0 <__libc_csu_fini@@Base+0xc>
   130e0:	str	r2, [r3, #4]
   130e4:	str	r3, [r1, r0]
   130e8:	str	r2, [r3, #8]
   130ec:	pop	{r4, pc}
   130f0:	andeq	r0, r0, r8

000130f4 <mmk_matcher_term@@Base>:
   130f4:	ldr	r3, [pc, #16]	; 1310c <mmk_matcher_term@@Base+0x18>
   130f8:	mov	r2, #0
   130fc:	push	{lr}		; (str lr, [sp, #-4]!)
   13100:	bl	14bf0 <__libc_csu_fini@@Base+0xc>
   13104:	str	r2, [r0, r3]
   13108:	pop	{pc}		; (ldr pc, [sp], #4)
   1310c:	andeq	r0, r0, r8

00013110 <mmk_matcher_ctx@@Base>:
   13110:	ldr	r3, [pc, #12]	; 13124 <mmk_matcher_ctx@@Base+0x14>
   13114:	push	{lr}		; (str lr, [sp, #-4]!)
   13118:	bl	14bf0 <__libc_csu_fini@@Base+0xc>
   1311c:	ldr	r0, [r3, r0]
   13120:	pop	{pc}		; (ldr pc, [sp], #4)
   13124:	andeq	r0, r0, r8

00013128 <mmk_matcher_add@@Base>:
   13128:	push	{r4, r5, r6, lr}
   1312c:	mov	r5, r0
   13130:	mov	r0, #12
   13134:	mov	r4, r1
   13138:	bl	1473c <mmk_malloc@@Base>
   1313c:	ldr	r1, [pc, #80]	; 13194 <mmk_matcher_add@@Base+0x6c>
   13140:	mov	r3, #0
   13144:	mov	r2, r0
   13148:	bl	14bf0 <__libc_csu_fini@@Base+0xc>
   1314c:	ldr	r0, [r1, r0]
   13150:	str	r3, [r2, #8]
   13154:	str	r5, [r2]
   13158:	ldr	r3, [r0, #8]
   1315c:	str	r4, [r2, #4]
   13160:	cmp	r3, #0
   13164:	beq	13174 <mmk_matcher_add@@Base+0x4c>
   13168:	ldr	r1, [r3, #4]
   1316c:	cmp	r4, r1
   13170:	bhi	13180 <mmk_matcher_add@@Base+0x58>
   13174:	str	r3, [r2, #8]
   13178:	str	r2, [r0, #8]
   1317c:	pop	{r4, r5, r6, pc}
   13180:	mov	r0, r3
   13184:	ldr	r3, [r3, #8]
   13188:	cmp	r3, #0
   1318c:	bne	13168 <mmk_matcher_add@@Base+0x40>
   13190:	b	13174 <mmk_matcher_add@@Base+0x4c>
   13194:	andeq	r0, r0, r8

00013198 <mmk_matcher_get_predicate@@Base>:
   13198:	add	r0, r0, #12
   1319c:	bx	lr

000131a0 <mmk_mock_create_internal@@Base>:
   131a0:	push	{r4, fp, lr}
   131a4:	add	fp, sp, #8
   131a8:	sub	sp, sp, #44	; 0x2c
   131ac:	str	r0, [fp, #-40]	; 0xffffffd8
   131b0:	str	r1, [fp, #-44]	; 0xffffffd4
   131b4:	bl	12f68 <mmk_init@@Base>
   131b8:	mov	r0, #20
   131bc:	bl	1473c <mmk_malloc@@Base>
   131c0:	str	r0, [fp, #-20]	; 0xffffffec
   131c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   131c8:	cmp	r3, #0
   131cc:	bne	131f4 <mmk_mock_create_internal@@Base+0x54>
   131d0:	ldr	r3, [pc, #388]	; 1335c <mmk_mock_create_internal@@Base+0x1bc>
   131d4:	ldr	r0, [r3]
   131d8:	ldr	r3, [pc, #384]	; 13360 <mmk_mock_create_internal@@Base+0x1c0>
   131dc:	str	r3, [sp]
   131e0:	mov	r3, #36	; 0x24
   131e4:	ldr	r2, [pc, #376]	; 13364 <mmk_mock_create_internal@@Base+0x1c4>
   131e8:	ldr	r1, [pc, #376]	; 13368 <mmk_mock_create_internal@@Base+0x1c8>
   131ec:	bl	11278 <fprintf@plt>
   131f0:	bl	112c0 <abort@plt>
   131f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   131f8:	mov	r2, r3
   131fc:	mov	r3, #0
   13200:	str	r3, [r2]
   13204:	str	r3, [r2, #4]
   13208:	str	r3, [r2, #8]
   1320c:	str	r3, [r2, #12]
   13210:	str	r3, [r2, #16]
   13214:	mov	r1, #64	; 0x40
   13218:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1321c:	bl	1463c <mmk_strchr@@Base>
   13220:	str	r0, [fp, #-24]	; 0xffffffe8
   13224:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13228:	cmp	r3, #0
   1322c:	bne	13240 <mmk_mock_create_internal@@Base+0xa0>
   13230:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13234:	bl	146e8 <mmk_strlen@@Base>
   13238:	str	r0, [fp, #-16]
   1323c:	b	13250 <mmk_mock_create_internal@@Base+0xb0>
   13240:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13244:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13248:	sub	r3, r2, r3
   1324c:	str	r3, [fp, #-16]
   13250:	ldr	r3, [fp, #-16]
   13254:	add	r3, r3, #1
   13258:	mov	r0, r3
   1325c:	bl	1473c <mmk_malloc@@Base>
   13260:	str	r0, [fp, #-28]	; 0xffffffe4
   13264:	ldr	r2, [fp, #-16]
   13268:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1326c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13270:	bl	146a4 <mmk_strncpy@@Base>
   13274:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13278:	ldr	r3, [fp, #-16]
   1327c:	add	r3, r2, r3
   13280:	mov	r2, #0
   13284:	strb	r2, [r3]
   13288:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1328c:	cmp	r3, #0
   13290:	beq	132b8 <mmk_mock_create_internal@@Base+0x118>
   13294:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13298:	add	r3, r3, #1
   1329c:	mov	r2, #4
   132a0:	ldr	r1, [pc, #196]	; 1336c <mmk_mock_create_internal@@Base+0x1cc>
   132a4:	mov	r0, r3
   132a8:	bl	14588 <mmk_strneq@@Base>
   132ac:	mov	r3, r0
   132b0:	cmp	r3, #0
   132b4:	beq	132c0 <mmk_mock_create_internal@@Base+0x120>
   132b8:	mov	r3, #1
   132bc:	b	132c4 <mmk_mock_create_internal@@Base+0x124>
   132c0:	mov	r3, #0
   132c4:	str	r3, [fp, #-32]	; 0xffffffe0
   132c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   132cc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   132d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   132d4:	bl	13d24 <mmk_stub_create@@Base>
   132d8:	mov	r2, r0
   132dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   132e0:	str	r2, [r3, #4]
   132e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   132e8:	ldr	r3, [r3, #4]
   132ec:	cmp	r3, #0
   132f0:	bne	13310 <mmk_mock_create_internal@@Base+0x170>
   132f4:	ldr	r3, [pc, #96]	; 1335c <mmk_mock_create_internal@@Base+0x1bc>
   132f8:	ldr	r3, [r3]
   132fc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13300:	ldr	r1, [pc, #104]	; 13370 <mmk_mock_create_internal@@Base+0x1d0>
   13304:	mov	r0, r3
   13308:	bl	11278 <fprintf@plt>
   1330c:	bl	112c0 <abort@plt>
   13310:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13314:	cmp	r3, #0
   13318:	bne	1333c <mmk_mock_create_internal@@Base+0x19c>
   1331c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13320:	ldr	r4, [r3, #4]
   13324:	ldr	r2, [fp, #-20]	; 0xffffffec
   13328:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1332c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13330:	bl	13d24 <mmk_stub_create@@Base>
   13334:	mov	r3, r0
   13338:	str	r3, [r4, #36]	; 0x24
   1333c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13340:	bl	1475c <mmk_free@@Base>
   13344:	ldr	r3, [fp, #-20]	; 0xffffffec
   13348:	ldr	r3, [r3, #4]
   1334c:	ldr	r3, [r3, #32]
   13350:	mov	r0, r3
   13354:	sub	sp, fp, #8
   13358:	pop	{r4, fp, pc}
   1335c:	andeq	r6, r2, r8, ror r0
   13360:	andeq	r4, r1, r4, ror #31
   13364:	andeq	r4, r1, ip, lsl #31
   13368:	andeq	r4, r1, r4, asr #31
   1336c:	andeq	r4, r1, r8, ror #31
   13370:	strdeq	r4, [r1], -r0

00013374 <mmk_mock_destroy_internal@@Base>:
   13374:	push	{fp, lr}
   13378:	add	fp, sp, #4
   1337c:	sub	sp, sp, #32
   13380:	str	r0, [fp, #-32]	; 0xffffffe0
   13384:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13388:	ldr	r3, [r3, #4]
   1338c:	str	r3, [fp, #-8]
   13390:	b	133b0 <mmk_mock_destroy_internal@@Base+0x3c>
   13394:	ldr	r3, [fp, #-8]
   13398:	ldr	r3, [r3, #36]	; 0x24
   1339c:	str	r3, [fp, #-20]	; 0xffffffec
   133a0:	ldr	r0, [fp, #-8]
   133a4:	bl	13e08 <mmk_stub_destroy@@Base>
   133a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   133ac:	str	r3, [fp, #-8]
   133b0:	ldr	r3, [fp, #-8]
   133b4:	cmp	r3, #0
   133b8:	bne	13394 <mmk_mock_destroy_internal@@Base+0x20>
   133bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   133c0:	ldr	r3, [r3, #8]
   133c4:	mov	r0, r3
   133c8:	bl	1475c <mmk_free@@Base>
   133cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   133d0:	ldr	r3, [r3]
   133d4:	str	r3, [fp, #-12]
   133d8:	b	13430 <mmk_mock_destroy_internal@@Base+0xbc>
   133dc:	ldr	r3, [fp, #-12]
   133e0:	ldr	r3, [r3, #4]
   133e4:	str	r3, [fp, #-24]	; 0xffffffe8
   133e8:	ldr	r3, [fp, #-12]
   133ec:	ldr	r3, [r3]
   133f0:	str	r3, [fp, #-16]
   133f4:	b	13414 <mmk_mock_destroy_internal@@Base+0xa0>
   133f8:	ldr	r3, [fp, #-16]
   133fc:	ldr	r3, [r3, #8]
   13400:	str	r3, [fp, #-28]	; 0xffffffe4
   13404:	ldr	r0, [fp, #-16]
   13408:	bl	1475c <mmk_free@@Base>
   1340c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13410:	str	r3, [fp, #-16]
   13414:	ldr	r3, [fp, #-16]
   13418:	cmp	r3, #0
   1341c:	bne	133f8 <mmk_mock_destroy_internal@@Base+0x84>
   13420:	ldr	r0, [fp, #-12]
   13424:	bl	1475c <mmk_free@@Base>
   13428:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1342c:	str	r3, [fp, #-12]
   13430:	ldr	r3, [fp, #-12]
   13434:	cmp	r3, #0
   13438:	bne	133dc <mmk_mock_destroy_internal@@Base+0x68>
   1343c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13440:	bl	1475c <mmk_free@@Base>
   13444:	nop			; (mov r0, r0)
   13448:	sub	sp, fp, #4
   1344c:	pop	{fp, pc}

00013450 <mmk_mock_params_begin@@Base>:
   13450:	push	{fp}		; (str fp, [sp, #-4]!)
   13454:	add	fp, sp, #0
   13458:	sub	sp, sp, #12
   1345c:	str	r0, [fp, #-8]
   13460:	ldr	r3, [fp, #-8]
   13464:	ldr	r3, [r3, #8]
   13468:	cmp	r3, #0
   1346c:	beq	13480 <mmk_mock_params_begin@@Base+0x30>
   13470:	ldr	r3, [fp, #-8]
   13474:	ldr	r3, [r3, #12]
   13478:	cmp	r3, #0
   1347c:	bne	13488 <mmk_mock_params_begin@@Base+0x38>
   13480:	mov	r3, #0
   13484:	b	13494 <mmk_mock_params_begin@@Base+0x44>
   13488:	ldr	r3, [fp, #-8]
   1348c:	ldr	r3, [r3, #8]
   13490:	add	r3, r3, #4
   13494:	mov	r0, r3
   13498:	add	sp, fp, #0
   1349c:	pop	{fp}		; (ldr fp, [sp], #4)
   134a0:	bx	lr

000134a4 <mmk_mock_params_next@@Base>:
   134a4:	push	{fp}		; (str fp, [sp, #-4]!)
   134a8:	add	fp, sp, #0
   134ac:	sub	sp, sp, #20
   134b0:	str	r0, [fp, #-16]
   134b4:	str	r1, [fp, #-20]	; 0xffffffec
   134b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   134bc:	str	r3, [fp, #-8]
   134c0:	ldr	r3, [fp, #-8]
   134c4:	ldr	r3, [r3, #-4]
   134c8:	str	r3, [fp, #-12]
   134cc:	ldr	r3, [fp, #-12]
   134d0:	add	r3, r3, #4
   134d4:	ldr	r2, [fp, #-8]
   134d8:	add	r3, r2, r3
   134dc:	str	r3, [fp, #-8]
   134e0:	ldr	r3, [fp, #-16]
   134e4:	ldr	r2, [r3, #8]
   134e8:	ldr	r3, [fp, #-16]
   134ec:	ldr	r3, [r3, #12]
   134f0:	add	r2, r2, r3
   134f4:	ldr	r3, [fp, #-8]
   134f8:	cmp	r2, r3
   134fc:	bhi	13508 <mmk_mock_params_next@@Base+0x64>
   13500:	mov	r3, #0
   13504:	b	1350c <mmk_mock_params_next@@Base+0x68>
   13508:	ldr	r3, [fp, #-8]
   1350c:	mov	r0, r3
   13510:	add	sp, fp, #0
   13514:	pop	{fp}		; (ldr fp, [sp], #4)
   13518:	bx	lr

0001351c <mmk_mock_get_params@@Base>:
   1351c:	push	{fp, lr}
   13520:	add	fp, sp, #4
   13524:	sub	sp, sp, #8
   13528:	bl	13ebc <mmk_ctx@@Base>
   1352c:	mov	r3, r0
   13530:	mov	r0, r3
   13534:	bl	13af4 <mmk_stub_context@@Base>
   13538:	str	r0, [fp, #-8]
   1353c:	ldr	r3, [fp, #-8]
   13540:	ldr	r3, [r3]
   13544:	mov	r0, r3
   13548:	sub	sp, fp, #4
   1354c:	pop	{fp, pc}
   13550:	ldr	ip, [r0, #8]
   13554:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13558:	ldr	lr, [ip]
   1355c:	ldr	r7, [r0]
   13560:	cmp	lr, #0
   13564:	beq	136d0 <mmk_mock_get_params@@Base+0x1b4>
   13568:	cmp	lr, #6
   1356c:	mov	r3, ip
   13570:	bne	13580 <mmk_mock_get_params@@Base+0x64>
   13574:	b	13720 <mmk_mock_get_params@@Base+0x204>
   13578:	cmp	r5, #6
   1357c:	beq	13720 <mmk_mock_get_params@@Base+0x204>
   13580:	ldr	r5, [r3, #8]!
   13584:	cmp	r5, #0
   13588:	bne	13578 <mmk_mock_get_params@@Base+0x5c>
   1358c:	mov	r9, #1
   13590:	cmp	lr, #5
   13594:	mov	r3, ip
   13598:	bne	135a8 <mmk_mock_get_params@@Base+0x8c>
   1359c:	b	13708 <mmk_mock_get_params@@Base+0x1ec>
   135a0:	cmp	r6, #5
   135a4:	beq	13708 <mmk_mock_get_params@@Base+0x1ec>
   135a8:	ldr	r6, [r3, #8]!
   135ac:	cmp	r6, #0
   135b0:	bne	135a0 <mmk_mock_get_params@@Base+0x84>
   135b4:	mov	r9, #1
   135b8:	cmp	lr, #20
   135bc:	mov	r2, ip
   135c0:	bne	135d0 <mmk_mock_get_params@@Base+0xb4>
   135c4:	b	136fc <mmk_mock_get_params@@Base+0x1e0>
   135c8:	cmp	r3, #20
   135cc:	beq	136fc <mmk_mock_get_params@@Base+0x1e0>
   135d0:	ldr	r3, [r2, #8]!
   135d4:	cmp	r3, #0
   135d8:	bne	135c8 <mmk_mock_get_params@@Base+0xac>
   135dc:	mov	r2, r3
   135e0:	mov	r8, #2
   135e4:	cmp	lr, #23
   135e8:	mov	r0, ip
   135ec:	bne	135fc <mmk_mock_get_params@@Base+0xe0>
   135f0:	b	136e8 <mmk_mock_get_params@@Base+0x1cc>
   135f4:	cmp	r3, #23
   135f8:	beq	136e8 <mmk_mock_get_params@@Base+0x1cc>
   135fc:	ldr	r3, [r0, #8]!
   13600:	cmp	r3, #0
   13604:	bne	135f4 <mmk_mock_get_params@@Base+0xd8>
   13608:	mov	r4, r3
   1360c:	cmp	lr, #2
   13610:	mov	r3, ip
   13614:	bne	13624 <mmk_mock_get_params@@Base+0x108>
   13618:	b	136e0 <mmk_mock_get_params@@Base+0x1c4>
   1361c:	cmp	r0, #2
   13620:	beq	136e0 <mmk_mock_get_params@@Base+0x1c4>
   13624:	ldr	r0, [r3, #8]!
   13628:	cmp	r0, #0
   1362c:	bne	1361c <mmk_mock_get_params@@Base+0x100>
   13630:	cmp	lr, r8
   13634:	bne	13644 <mmk_mock_get_params@@Base+0x128>
   13638:	b	136d8 <mmk_mock_get_params@@Base+0x1bc>
   1363c:	cmp	r3, r8
   13640:	beq	136d8 <mmk_mock_get_params@@Base+0x1bc>
   13644:	ldr	r3, [ip, #8]!
   13648:	cmp	r3, #0
   1364c:	bne	1363c <mmk_mock_get_params@@Base+0x120>
   13650:	mov	r8, r3
   13654:	cmp	r9, #0
   13658:	bne	136d0 <mmk_mock_get_params@@Base+0x1b4>
   1365c:	cmp	r4, #0
   13660:	cmpne	r2, #0
   13664:	beq	136d0 <mmk_mock_get_params@@Base+0x1b4>
   13668:	cmp	r8, #0
   1366c:	cmpne	r0, #0
   13670:	beq	136d0 <mmk_mock_get_params@@Base+0x1b4>
   13674:	mov	sl, r1
   13678:	mov	r1, r8
   1367c:	bl	14968 <mmk_trampoline_end@@Base+0x4>
   13680:	subs	fp, r0, #0
   13684:	bne	13698 <mmk_mock_get_params@@Base+0x17c>
   13688:	b	136d0 <mmk_mock_get_params@@Base+0x1b4>
   1368c:	cmp	r9, fp
   13690:	add	r4, r4, r8
   13694:	beq	136d0 <mmk_mock_get_params@@Base+0x1b4>
   13698:	ldr	r2, [r4, #4]
   1369c:	mov	r1, sl
   136a0:	add	r9, r9, #1
   136a4:	lsr	r2, r2, #8
   136a8:	ldr	r0, [r5, r2, lsl #4]
   136ac:	add	r0, r6, r0
   136b0:	bl	111d0 <strcmp@plt>
   136b4:	cmp	r0, #0
   136b8:	bne	1368c <mmk_mock_get_params@@Base+0x170>
   136bc:	ldr	r9, [r4]
   136c0:	cmp	r9, #0
   136c4:	beq	136d0 <mmk_mock_get_params@@Base+0x1b4>
   136c8:	add	r0, r7, r9
   136cc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136d0:	mov	r0, #0
   136d4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136d8:	ldr	r8, [ip, #4]
   136dc:	b	13654 <mmk_mock_get_params@@Base+0x138>
   136e0:	ldr	r0, [r3, #4]
   136e4:	b	13630 <mmk_mock_get_params@@Base+0x114>
   136e8:	ldr	r3, [r0, #4]
   136ec:	cmp	r7, r3
   136f0:	addhi	r4, r7, r3
   136f4:	bhi	1360c <mmk_mock_get_params@@Base+0xf0>
   136f8:	b	13608 <mmk_mock_get_params@@Base+0xec>
   136fc:	ldr	r2, [r2, #4]
   13700:	add	r8, r2, #2
   13704:	b	135e4 <mmk_mock_get_params@@Base+0xc8>
   13708:	ldr	r6, [r3, #4]
   1370c:	cmp	r7, r6
   13710:	bhi	13738 <mmk_mock_get_params@@Base+0x21c>
   13714:	cmp	r6, #0
   13718:	orreq	r9, r9, #1
   1371c:	b	135b8 <mmk_mock_get_params@@Base+0x9c>
   13720:	ldr	r5, [r3, #4]
   13724:	cmp	r7, r5
   13728:	bhi	13744 <mmk_mock_get_params@@Base+0x228>
   1372c:	clz	r9, r5
   13730:	lsr	r9, r9, #5
   13734:	b	13590 <mmk_mock_get_params@@Base+0x74>
   13738:	adds	r6, r7, r6
   1373c:	orreq	r9, r9, #1
   13740:	b	135b8 <mmk_mock_get_params@@Base+0x9c>
   13744:	adds	r5, r7, r5
   13748:	moveq	r9, #1
   1374c:	movne	r9, #0
   13750:	b	13590 <mmk_mock_get_params@@Base+0x74>

00013754 <plt_init_ctx@@Base>:
   13754:	ldr	r3, [pc, #20]	; 13770 <plt_init_ctx@@Base+0x1c>
   13758:	ldr	r0, [r3]
   1375c:	cmn	r0, #1
   13760:	ldreq	r2, [pc, #12]	; 13774 <plt_init_ctx@@Base+0x20>
   13764:	moveq	r0, r2
   13768:	streq	r2, [r3]
   1376c:	bx	lr
   13770:	andeq	r6, r2, r4, ror r0
   13774:	andeq	r6, r2, ip, ror r0

00013778 <plt_get_lib@@Base>:
   13778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1377c:	subs	r7, r1, #0
   13780:	add	fp, sp, #32
   13784:	mov	r4, r0
   13788:	sub	sp, sp, #20
   1378c:	beq	13970 <plt_get_lib@@Base+0x1f8>
   13790:	mov	r2, #4
   13794:	ldr	r1, [pc, #548]	; 139c0 <plt_get_lib@@Base+0x248>
   13798:	mov	r0, r7
   1379c:	bl	112b4 <strncmp@plt>
   137a0:	cmp	r0, #0
   137a4:	moveq	r5, #1
   137a8:	bne	138f0 <plt_get_lib@@Base+0x178>
   137ac:	mov	r1, #58	; 0x3a
   137b0:	mov	r0, r7
   137b4:	bl	1126c <strchr@plt>
   137b8:	add	r3, r0, #1
   137bc:	mov	r0, r3
   137c0:	mov	r6, r3
   137c4:	str	r3, [fp, #-40]	; 0xffffffd8
   137c8:	bl	11254 <strlen@plt>
   137cc:	ldr	r1, [pc, #496]	; 139c4 <plt_get_lib@@Base+0x24c>
   137d0:	str	r0, [fp, #-44]	; 0xffffffd4
   137d4:	mov	r0, r6
   137d8:	bl	111d0 <strcmp@plt>
   137dc:	mov	r8, r0
   137e0:	ldr	r4, [r4, #4]
   137e4:	cmp	r4, #0
   137e8:	beq	138a0 <plt_get_lib@@Base+0x128>
   137ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   137f0:	ldr	r9, [pc, #464]	; 139c8 <plt_get_lib@@Base+0x250>
   137f4:	add	r3, r3, #15
   137f8:	bic	r3, r3, #7
   137fc:	str	r3, [fp, #-48]	; 0xffffffd0
   13800:	bic	r6, r5, #2
   13804:	b	13828 <plt_get_lib@@Base+0xb0>
   13808:	ldr	r1, [r4, #4]
   1380c:	mov	r0, r7
   13810:	bl	111d0 <strcmp@plt>
   13814:	cmp	r0, #0
   13818:	beq	13854 <plt_get_lib@@Base+0xdc>
   1381c:	ldr	r4, [r4, #12]
   13820:	cmp	r4, #0
   13824:	beq	138a0 <plt_get_lib@@Base+0x128>
   13828:	cmp	r5, #1
   1382c:	beq	13860 <plt_get_lib@@Base+0xe8>
   13830:	cmp	r6, #0
   13834:	beq	13808 <plt_get_lib@@Base+0x90>
   13838:	cmp	r5, #3
   1383c:	bne	1381c <plt_get_lib@@Base+0xa4>
   13840:	ldr	r1, [fp, #-40]	; 0xffffffd8
   13844:	mov	r0, r4
   13848:	bl	13550 <mmk_mock_get_params@@Base+0x34>
   1384c:	cmp	r0, #0
   13850:	beq	1381c <plt_get_lib@@Base+0xa4>
   13854:	mov	r0, r4
   13858:	sub	sp, fp, #32
   1385c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13860:	cmp	r8, #0
   13864:	bne	138b0 <plt_get_lib@@Base+0x138>
   13868:	ldr	sl, [r4, #4]
   1386c:	mov	r1, r9
   13870:	mov	r0, sl
   13874:	bl	111b8 <strstr@plt>
   13878:	cmp	r0, #0
   1387c:	bne	13854 <plt_get_lib@@Base+0xdc>
   13880:	mov	r0, sl
   13884:	ldr	r1, [pc, #320]	; 139cc <plt_get_lib@@Base+0x254>
   13888:	bl	111b8 <strstr@plt>
   1388c:	cmp	r0, #0
   13890:	bne	13854 <plt_get_lib@@Base+0xdc>
   13894:	ldr	r4, [r4, #12]
   13898:	cmp	r4, #0
   1389c:	bne	13828 <plt_get_lib@@Base+0xb0>
   138a0:	mov	r4, #0
   138a4:	mov	r0, r4
   138a8:	sub	sp, fp, #32
   138ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   138b4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   138b8:	mov	sl, sp
   138bc:	sub	sp, sp, r3
   138c0:	ldr	r2, [pc, #264]	; 139d0 <plt_get_lib@@Base+0x258>
   138c4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   138c8:	add	r1, r1, #8
   138cc:	mov	r0, sp
   138d0:	bl	11290 <snprintf@plt>
   138d4:	ldr	r0, [r4, #4]
   138d8:	mov	r1, sp
   138dc:	bl	111b8 <strstr@plt>
   138e0:	cmp	r0, #0
   138e4:	bne	13988 <plt_get_lib@@Base+0x210>
   138e8:	mov	sp, sl
   138ec:	b	1381c <plt_get_lib@@Base+0xa4>
   138f0:	mov	r2, #5
   138f4:	ldr	r1, [pc, #216]	; 139d4 <plt_get_lib@@Base+0x25c>
   138f8:	mov	r0, r7
   138fc:	bl	112b4 <strncmp@plt>
   13900:	cmp	r0, #0
   13904:	moveq	r5, #2
   13908:	beq	137ac <plt_get_lib@@Base+0x34>
   1390c:	mov	r2, #4
   13910:	ldr	r1, [pc, #192]	; 139d8 <plt_get_lib@@Base+0x260>
   13914:	mov	r0, r7
   13918:	bl	112b4 <strncmp@plt>
   1391c:	cmp	r0, #0
   13920:	moveq	r5, #3
   13924:	beq	137ac <plt_get_lib@@Base+0x34>
   13928:	ldr	r1, [pc, #172]	; 139dc <plt_get_lib@@Base+0x264>
   1392c:	mov	r0, r7
   13930:	bl	111d0 <strcmp@plt>
   13934:	cmp	r0, #0
   13938:	beq	13990 <plt_get_lib@@Base+0x218>
   1393c:	mov	r1, #58	; 0x3a
   13940:	mov	r0, r7
   13944:	bl	1126c <strchr@plt>
   13948:	subs	r2, r0, #0
   1394c:	beq	139a8 <plt_get_lib@@Base+0x230>
   13950:	ldr	r1, [pc, #136]	; 139e0 <plt_get_lib@@Base+0x268>
   13954:	sub	r2, r2, r7
   13958:	add	r2, r2, #1
   1395c:	ldr	r0, [r1]
   13960:	mov	r3, r7
   13964:	ldr	r1, [pc, #120]	; 139e4 <plt_get_lib@@Base+0x26c>
   13968:	bl	11278 <fprintf@plt>
   1396c:	bl	112c0 <abort@plt>
   13970:	mov	r5, r7
   13974:	str	r7, [fp, #-44]	; 0xffffffd4
   13978:	ldr	r7, [pc, #104]	; 139e8 <plt_get_lib@@Base+0x270>
   1397c:	mvn	r8, #0
   13980:	str	r7, [fp, #-40]	; 0xffffffd8
   13984:	b	137e0 <plt_get_lib@@Base+0x68>
   13988:	mov	sp, sl
   1398c:	b	13854 <plt_get_lib@@Base+0xdc>
   13990:	ldr	r7, [pc, #80]	; 139e8 <plt_get_lib@@Base+0x270>
   13994:	str	r0, [fp, #-44]	; 0xffffffd4
   13998:	mov	r5, r0
   1399c:	str	r7, [fp, #-40]	; 0xffffffd8
   139a0:	mvn	r8, #0
   139a4:	b	137e0 <plt_get_lib@@Base+0x68>
   139a8:	ldr	r3, [pc, #48]	; 139e0 <plt_get_lib@@Base+0x268>
   139ac:	mov	r2, r7
   139b0:	ldr	r1, [pc, #52]	; 139ec <plt_get_lib@@Base+0x274>
   139b4:	ldr	r0, [r3]
   139b8:	bl	11278 <fprintf@plt>
   139bc:	b	1396c <plt_get_lib@@Base+0x1f4>
   139c0:	andeq	r5, r1, r4, lsr #32
   139c4:	andeq	r5, r1, ip, ror #1
   139c8:	andeq	r5, r1, ip, lsl #1
   139cc:	muleq	r1, r8, r0
   139d0:	andeq	r5, r1, r4, lsr #1
   139d4:	andeq	r5, r1, ip, lsr #32
   139d8:	andeq	r5, r1, r4, lsr r0
   139dc:	andeq	r5, r1, ip, lsr r0
   139e0:	andeq	r6, r2, r8, ror r0
   139e4:	andeq	r5, r1, r4, asr #32
   139e8:	andeq	r5, r1, ip, lsl #2
   139ec:	andeq	r5, r1, r8, rrx

000139f0 <plt_get_offsets@@Base>:
   139f0:	push	{r4, r5, r6, lr}
   139f4:	mov	r5, r2
   139f8:	bl	13550 <mmk_mock_get_params@@Base+0x34>
   139fc:	subs	r4, r0, #0
   13a00:	beq	13a24 <plt_get_offsets@@Base+0x34>
   13a04:	mov	r0, #8
   13a08:	bl	1473c <mmk_malloc@@Base>
   13a0c:	mov	r2, #1
   13a10:	mov	r3, #0
   13a14:	str	r2, [r5]
   13a18:	str	r4, [r0]
   13a1c:	str	r3, [r0, #4]
   13a20:	pop	{r4, r5, r6, pc}
   13a24:	mov	r0, r4
   13a28:	pop	{r4, r5, r6, pc}

00013a2c <plt_set_offsets@@Base>:
   13a2c:	cmp	r1, #0
   13a30:	bxeq	lr
   13a34:	add	r1, r0, r1, lsl #3
   13a38:	add	r3, r0, #4
   13a3c:	push	{lr}		; (str lr, [sp, #-4]!)
   13a40:	ldr	ip, [r0, #4]
   13a44:	cmp	ip, #0
   13a48:	ldr	ip, [r3, #-4]
   13a4c:	beq	13a68 <plt_set_offsets@@Base+0x3c>
   13a50:	add	r0, r0, #8
   13a54:	cmp	r0, r1
   13a58:	str	r2, [ip]
   13a5c:	add	r3, r3, #8
   13a60:	bne	13a40 <plt_set_offsets@@Base+0x14>
   13a64:	pop	{pc}		; (ldr pc, [sp], #4)
   13a68:	ldr	lr, [ip]
   13a6c:	add	r0, r0, #8
   13a70:	str	lr, [r0, #-4]
   13a74:	cmp	r0, r1
   13a78:	add	r3, r3, #8
   13a7c:	str	r2, [ip]
   13a80:	bne	13a40 <plt_set_offsets@@Base+0x14>
   13a84:	pop	{pc}		; (ldr pc, [sp], #4)

00013a88 <plt_reset_offsets@@Base>:
   13a88:	cmp	r1, #0
   13a8c:	bxeq	lr
   13a90:	add	r1, r0, r1, lsl #3
   13a94:	ldr	r2, [r0, #4]
   13a98:	ldr	r3, [r0], #8
   13a9c:	cmp	r1, r0
   13aa0:	str	r2, [r3]
   13aa4:	bne	13a94 <plt_reset_offsets@@Base+0xc>
   13aa8:	bx	lr

00013aac <plt_get_real_fn@@Base>:
   13aac:	push	{r4, r5, r6, lr}
   13ab0:	ldr	r4, [r0, #4]
   13ab4:	cmp	r4, #0
   13ab8:	beq	13aec <plt_get_real_fn@@Base+0x40>
   13abc:	mov	r5, r1
   13ac0:	b	13ad0 <plt_get_real_fn@@Base+0x24>
   13ac4:	ldr	r4, [r4, #12]
   13ac8:	cmp	r4, #0
   13acc:	beq	13aec <plt_get_real_fn@@Base+0x40>
   13ad0:	mov	r1, r5
   13ad4:	mov	r0, r4
   13ad8:	bl	13550 <mmk_mock_get_params@@Base+0x34>
   13adc:	cmp	r0, #0
   13ae0:	beq	13ac4 <plt_get_real_fn@@Base+0x18>
   13ae4:	ldr	r0, [r0]
   13ae8:	pop	{r4, r5, r6, pc}
   13aec:	mov	r0, r4
   13af0:	pop	{r4, r5, r6, pc}

00013af4 <mmk_stub_context@@Base>:
   13af4:	push	{fp}		; (str fp, [sp, #-4]!)
   13af8:	add	fp, sp, #0
   13afc:	sub	sp, sp, #12
   13b00:	str	r0, [fp, #-8]
   13b04:	ldr	r3, [fp, #-8]
   13b08:	cmp	r3, #0
   13b0c:	bne	13b18 <mmk_stub_context@@Base+0x24>
   13b10:	mov	r3, #0
   13b14:	b	13b20 <mmk_stub_context@@Base+0x2c>
   13b18:	ldr	r3, [fp, #-8]
   13b1c:	ldr	r3, [r3, #12]
   13b20:	mov	r0, r3
   13b24:	add	sp, fp, #0
   13b28:	pop	{fp}		; (ldr fp, [sp], #4)
   13b2c:	bx	lr

00013b30 <mmk_stub_create_static@@Base>:
   13b30:	push	{r4, fp, lr}
   13b34:	add	fp, sp, #8
   13b38:	sub	sp, sp, #44	; 0x2c
   13b3c:	str	r0, [fp, #-40]	; 0xffffffd8
   13b40:	str	r1, [fp, #-44]	; 0xffffffd4
   13b44:	str	r2, [fp, #-48]	; 0xffffffd0
   13b48:	str	r3, [fp, #-52]	; 0xffffffcc
   13b4c:	bl	14bf0 <__libc_csu_fini@@Base+0xc>
   13b50:	mov	r1, r0
   13b54:	ldr	r3, [pc, #436]	; 13d10 <mmk_stub_create_static@@Base+0x1e0>
   13b58:	mov	r2, #0
   13b5c:	str	r2, [r1, r3]
   13b60:	bl	14bf0 <__libc_csu_fini@@Base+0xc>
   13b64:	mov	r1, r0
   13b68:	ldr	r3, [pc, #420]	; 13d14 <mmk_stub_create_static@@Base+0x1e4>
   13b6c:	mov	r2, #0
   13b70:	str	r2, [r1, r3]
   13b74:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13b78:	bl	146e8 <mmk_strlen@@Base>
   13b7c:	mov	r3, r0
   13b80:	add	r3, r3, #1
   13b84:	mov	r0, r3
   13b88:	bl	1473c <mmk_malloc@@Base>
   13b8c:	str	r0, [fp, #-20]	; 0xffffffec
   13b90:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b94:	cmp	r3, #0
   13b98:	bne	13ba4 <mmk_stub_create_static@@Base+0x74>
   13b9c:	mvn	r3, #11
   13ba0:	b	13d04 <mmk_stub_create_static@@Base+0x1d4>
   13ba4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13ba8:	ldr	r0, [fp, #-20]	; 0xffffffec
   13bac:	bl	1467c <mmk_strcpy@@Base>
   13bb0:	mov	r3, #0
   13bb4:	str	r3, [fp, #-16]
   13bb8:	mov	r1, #64	; 0x40
   13bbc:	ldr	r0, [fp, #-20]	; 0xffffffec
   13bc0:	bl	1463c <mmk_strchr@@Base>
   13bc4:	str	r0, [fp, #-24]	; 0xffffffe8
   13bc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13bcc:	cmp	r3, #0
   13bd0:	beq	13bec <mmk_stub_create_static@@Base+0xbc>
   13bd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13bd8:	mov	r2, #0
   13bdc:	strb	r2, [r3]
   13be0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13be4:	add	r3, r3, #1
   13be8:	str	r3, [fp, #-16]
   13bec:	bl	13008 <mmk_plt_ctx@@Base>
   13bf0:	mov	r3, r0
   13bf4:	ldr	r1, [fp, #-16]
   13bf8:	mov	r0, r3
   13bfc:	bl	13778 <plt_get_lib@@Base>
   13c00:	str	r0, [fp, #-28]	; 0xffffffe4
   13c04:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13c08:	cmp	r3, #0
   13c0c:	bne	13c18 <mmk_stub_create_static@@Base+0xe8>
   13c10:	mvn	r3, #1
   13c14:	b	13d04 <mmk_stub_create_static@@Base+0x1d4>
   13c18:	mov	r3, #0
   13c1c:	str	r3, [fp, #-36]	; 0xffffffdc
   13c20:	sub	r3, fp, #36	; 0x24
   13c24:	mov	r2, r3
   13c28:	ldr	r1, [fp, #-20]	; 0xffffffec
   13c2c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13c30:	bl	139f0 <plt_get_offsets@@Base>
   13c34:	str	r0, [fp, #-32]	; 0xffffffe0
   13c38:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13c3c:	cmp	r3, #0
   13c40:	beq	13c50 <mmk_stub_create_static@@Base+0x120>
   13c44:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13c48:	cmp	r3, #0
   13c4c:	bne	13c58 <mmk_stub_create_static@@Base+0x128>
   13c50:	mvn	r3, #1
   13c54:	b	13d04 <mmk_stub_create_static@@Base+0x1d4>
   13c58:	ldr	r4, [fp, #-36]	; 0xffffffdc
   13c5c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13c60:	mov	r0, r3
   13c64:	mov	r3, #40	; 0x28
   13c68:	mov	r2, r3
   13c6c:	mov	r1, #0
   13c70:	bl	1129c <memset@plt>
   13c74:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13c78:	ldr	r2, [pc, #152]	; 13d18 <mmk_stub_create_static@@Base+0x1e8>
   13c7c:	str	r2, [r3]
   13c80:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13c84:	ldr	r2, [pc, #144]	; 13d1c <mmk_stub_create_static@@Base+0x1ec>
   13c88:	str	r2, [r3, #4]
   13c8c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13c90:	ldr	r2, [pc, #136]	; 13d20 <mmk_stub_create_static@@Base+0x1f0>
   13c94:	str	r2, [r3, #8]
   13c98:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13c9c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13ca0:	str	r2, [r3, #12]
   13ca4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13ca8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13cac:	str	r2, [r3, #16]
   13cb0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13cb4:	ldr	r2, [fp, #-16]
   13cb8:	str	r2, [r3, #20]
   13cbc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13cc0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13cc4:	str	r2, [r3, #24]
   13cc8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13ccc:	str	r4, [r3, #28]
   13cd0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13cd4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13cd8:	bl	13f14 <create_trampoline@@Base>
   13cdc:	mov	r2, r0
   13ce0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13ce4:	str	r2, [r3, #32]
   13ce8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13cec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13cf0:	ldr	r3, [r3, #32]
   13cf4:	mov	r2, r3
   13cf8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13cfc:	bl	13a2c <plt_set_offsets@@Base>
   13d00:	mov	r3, #0
   13d04:	mov	r0, r3
   13d08:	sub	sp, fp, #8
   13d0c:	pop	{r4, fp, pc}
   13d10:	andeq	r0, r0, ip
   13d14:	andeq	r0, r0, r0, lsl r0
   13d18:	andeq	r3, r1, r4, ror lr
   13d1c:	andeq	r3, r1, r0, ror #29
   13d20:			; <UNDEFINED> instruction: 0x00013ebc

00013d24 <mmk_stub_create@@Base>:
   13d24:	push	{fp, lr}
   13d28:	add	fp, sp, #4
   13d2c:	sub	sp, sp, #24
   13d30:	str	r0, [fp, #-16]
   13d34:	str	r1, [fp, #-20]	; 0xffffffec
   13d38:	str	r2, [fp, #-24]	; 0xffffffe8
   13d3c:	bl	12f68 <mmk_init@@Base>
   13d40:	mov	r0, #40	; 0x28
   13d44:	bl	1473c <mmk_malloc@@Base>
   13d48:	str	r0, [fp, #-8]
   13d4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13d50:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d54:	ldr	r1, [fp, #-16]
   13d58:	ldr	r0, [fp, #-8]
   13d5c:	bl	13b30 <mmk_stub_create_static@@Base>
   13d60:	str	r0, [fp, #-12]
   13d64:	ldr	r3, [fp, #-12]
   13d68:	cmp	r3, #0
   13d6c:	bge	13d90 <mmk_stub_create@@Base+0x6c>
   13d70:	ldr	r0, [fp, #-8]
   13d74:	bl	1475c <mmk_free@@Base>
   13d78:	bl	11284 <__errno_location@plt>
   13d7c:	mov	r2, r0
   13d80:	ldr	r3, [fp, #-12]
   13d84:	str	r3, [r2]
   13d88:	mov	r3, #0
   13d8c:	str	r3, [fp, #-8]
   13d90:	ldr	r3, [fp, #-8]
   13d94:	mov	r0, r3
   13d98:	sub	sp, fp, #4
   13d9c:	pop	{fp, pc}

00013da0 <mmk_stub_destroy_static@@Base>:
   13da0:	push	{fp, lr}
   13da4:	add	fp, sp, #4
   13da8:	sub	sp, sp, #8
   13dac:	str	r0, [fp, #-8]
   13db0:	ldr	r3, [fp, #-8]
   13db4:	ldr	r2, [r3, #24]
   13db8:	ldr	r3, [fp, #-8]
   13dbc:	ldr	r3, [r3, #28]
   13dc0:	mov	r1, r3
   13dc4:	mov	r0, r2
   13dc8:	bl	13a88 <plt_reset_offsets@@Base>
   13dcc:	ldr	r3, [fp, #-8]
   13dd0:	ldr	r3, [r3, #24]
   13dd4:	mov	r0, r3
   13dd8:	bl	1475c <mmk_free@@Base>
   13ddc:	ldr	r3, [fp, #-8]
   13de0:	ldr	r3, [r3, #32]
   13de4:	mov	r0, r3
   13de8:	bl	13fec <destroy_trampoline@@Base>
   13dec:	ldr	r3, [fp, #-8]
   13df0:	ldr	r3, [r3, #16]
   13df4:	mov	r0, r3
   13df8:	bl	1475c <mmk_free@@Base>
   13dfc:	nop			; (mov r0, r0)
   13e00:	sub	sp, fp, #4
   13e04:	pop	{fp, pc}

00013e08 <mmk_stub_destroy@@Base>:
   13e08:	push	{fp, lr}
   13e0c:	add	fp, sp, #4
   13e10:	sub	sp, sp, #8
   13e14:	str	r0, [fp, #-8]
   13e18:	ldr	r0, [fp, #-8]
   13e1c:	bl	13da0 <mmk_stub_destroy_static@@Base>
   13e20:	ldr	r0, [fp, #-8]
   13e24:	bl	1475c <mmk_free@@Base>
   13e28:	nop			; (mov r0, r0)
   13e2c:	sub	sp, fp, #4
   13e30:	pop	{fp, pc}

00013e34 <mmk_ask_ctx@@Base>:
   13e34:	push	{fp, lr}
   13e38:	add	fp, sp, #4
   13e3c:	sub	sp, sp, #8
   13e40:	str	r0, [fp, #-8]
   13e44:	bl	14bf0 <__libc_csu_fini@@Base+0xc>
   13e48:	mov	r1, r0
   13e4c:	ldr	r3, [pc, #28]	; 13e70 <mmk_ask_ctx@@Base+0x3c>
   13e50:	mov	r2, #1
   13e54:	str	r2, [r1, r3]
   13e58:	ldr	r3, [fp, #-8]
   13e5c:	blx	r3
   13e60:	mov	r3, r0
   13e64:	mov	r0, r3
   13e68:	sub	sp, fp, #4
   13e6c:	pop	{fp, pc}
   13e70:	andeq	r0, r0, ip

00013e74 <mmk_ctx_asked@@Base>:
   13e74:	push	{fp, lr}
   13e78:	add	fp, sp, #4
   13e7c:	sub	sp, sp, #8
   13e80:	bl	14bf0 <__libc_csu_fini@@Base+0xc>
   13e84:	mov	r2, r0
   13e88:	ldr	r3, [pc, #40]	; 13eb8 <mmk_ctx_asked@@Base+0x44>
   13e8c:	ldr	r3, [r2, r3]
   13e90:	str	r3, [fp, #-8]
   13e94:	bl	14bf0 <__libc_csu_fini@@Base+0xc>
   13e98:	mov	r1, r0
   13e9c:	ldr	r3, [pc, #20]	; 13eb8 <mmk_ctx_asked@@Base+0x44>
   13ea0:	mov	r2, #0
   13ea4:	str	r2, [r1, r3]
   13ea8:	ldr	r3, [fp, #-8]
   13eac:	mov	r0, r3
   13eb0:	sub	sp, fp, #4
   13eb4:	pop	{fp, pc}
   13eb8:	andeq	r0, r0, ip

00013ebc <mmk_ctx@@Base>:
   13ebc:	push	{fp, lr}
   13ec0:	add	fp, sp, #4
   13ec4:	bl	14bf0 <__libc_csu_fini@@Base+0xc>
   13ec8:	mov	r2, r0
   13ecc:	ldr	r3, [pc, #8]	; 13edc <mmk_ctx@@Base+0x20>
   13ed0:	ldr	r3, [r2, r3]
   13ed4:	mov	r0, r3
   13ed8:	pop	{fp, pc}
   13edc:	andeq	r0, r0, r0, lsl r0

00013ee0 <mmk_set_ctx@@Base>:
   13ee0:	push	{fp, lr}
   13ee4:	add	fp, sp, #4
   13ee8:	sub	sp, sp, #8
   13eec:	str	r0, [fp, #-8]
   13ef0:	bl	14bf0 <__libc_csu_fini@@Base+0xc>
   13ef4:	mov	r1, r0
   13ef8:	ldr	r2, [pc, #16]	; 13f10 <mmk_set_ctx@@Base+0x30>
   13efc:	ldr	r3, [fp, #-8]
   13f00:	str	r3, [r1, r2]
   13f04:	nop			; (mov r0, r0)
   13f08:	sub	sp, fp, #4
   13f0c:	pop	{fp, pc}
   13f10:	andeq	r0, r0, r0, lsl r0

00013f14 <create_trampoline@@Base>:
   13f14:	push	{r4, r5, r6, r7, r8, r9, lr}
   13f18:	sub	sp, sp, #12
   13f1c:	ldr	r5, [pc, #172]	; 13fd0 <create_trampoline@@Base+0xbc>
   13f20:	ldr	r6, [pc, #172]	; 13fd4 <create_trampoline@@Base+0xc0>
   13f24:	sub	r5, r5, r6
   13f28:	cmp	r5, #4096	; 0x1000
   13f2c:	bcs	13f9c <create_trampoline@@Base+0x88>
   13f30:	mvn	r3, #0
   13f34:	mov	r9, r0
   13f38:	mov	r0, #0
   13f3c:	str	r3, [sp]
   13f40:	mov	r8, r1
   13f44:	str	r0, [sp, #4]
   13f48:	mov	r3, #34	; 0x22
   13f4c:	mov	r2, #7
   13f50:	mov	r1, #4096	; 0x1000
   13f54:	bl	11260 <mmap@plt>
   13f58:	cmn	r0, #1
   13f5c:	mov	r4, r0
   13f60:	beq	13fc0 <create_trampoline@@Base+0xac>
   13f64:	add	r7, r0, #8
   13f68:	str	r9, [r0]
   13f6c:	str	r8, [r0, #4]
   13f70:	mov	r2, r5
   13f74:	mov	r1, r6
   13f78:	mov	r0, r7
   13f7c:	bl	111f4 <memcpy@plt>
   13f80:	mov	r0, r4
   13f84:	mov	r2, #5
   13f88:	mov	r1, #4096	; 0x1000
   13f8c:	bl	111dc <mprotect@plt>
   13f90:	mov	r0, r7
   13f94:	add	sp, sp, #12
   13f98:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13f9c:	ldr	r1, [pc, #52]	; 13fd8 <create_trampoline@@Base+0xc4>
   13fa0:	ldr	r2, [pc, #52]	; 13fdc <create_trampoline@@Base+0xc8>
   13fa4:	mov	r3, #45	; 0x2d
   13fa8:	ldr	r0, [r1]
   13fac:	str	r2, [sp]
   13fb0:	ldr	r1, [pc, #40]	; 13fe0 <create_trampoline@@Base+0xcc>
   13fb4:	ldr	r2, [pc, #40]	; 13fe4 <create_trampoline@@Base+0xd0>
   13fb8:	bl	11278 <fprintf@plt>
   13fbc:	bl	112c0 <abort@plt>
   13fc0:	ldr	r1, [pc, #16]	; 13fd8 <create_trampoline@@Base+0xc4>
   13fc4:	ldr	r2, [pc, #28]	; 13fe8 <create_trampoline@@Base+0xd4>
   13fc8:	mov	r3, #69	; 0x45
   13fcc:	b	13fa8 <create_trampoline@@Base+0x94>
   13fd0:	andeq	r4, r1, r4, ror #18
   13fd4:	andeq	r4, r1, r8, lsl #18
   13fd8:	andeq	r6, r2, r8, ror r0
   13fdc:	andeq	r5, r1, r0, lsl r1
   13fe0:	strdeq	r5, [r1], -r0
   13fe4:	strheq	r5, [r1], -r0
   13fe8:	andeq	r5, r1, ip, lsr #2

00013fec <destroy_trampoline@@Base>:
   13fec:	sub	r0, r0, #8
   13ff0:	mov	r1, #4096	; 0x1000
   13ff4:	b	112a8 <munmap@plt>

00013ff8 <mmk_verify_set_times@@Base>:
   13ff8:	push	{fp, lr}
   13ffc:	add	fp, sp, #4
   14000:	sub	sp, sp, #8
   14004:	str	r0, [fp, #-8]
   14008:	bl	14bf0 <__libc_csu_fini@@Base+0xc>
   1400c:	mov	r1, r0
   14010:	ldr	r2, [pc, #16]	; 14028 <mmk_verify_set_times@@Base+0x30>
   14014:	ldr	r3, [fp, #-8]
   14018:	str	r3, [r1, r2]
   1401c:	nop			; (mov r0, r0)
   14020:	sub	sp, fp, #4
   14024:	pop	{fp, pc}
   14028:	andeq	r0, r0, r4, lsl r0

0001402c <mmk_verify_times@@Base>:
   1402c:	push	{fp, lr}
   14030:	add	fp, sp, #4
   14034:	sub	sp, sp, #16
   14038:	str	r0, [fp, #-16]
   1403c:	bl	14bf0 <__libc_csu_fini@@Base+0xc>
   14040:	mov	r2, r0
   14044:	ldr	r3, [pc, #244]	; 14140 <mmk_verify_times@@Base+0x114>
   14048:	ldr	r3, [r2, r3]
   1404c:	str	r3, [fp, #-8]
   14050:	ldr	r3, [fp, #-16]
   14054:	ldr	r3, [r3, #4]
   14058:	cmp	r3, #0
   1405c:	beq	14078 <mmk_verify_times@@Base+0x4c>
   14060:	ldr	r3, [fp, #-8]
   14064:	cmp	r3, #0
   14068:	moveq	r3, #1
   1406c:	movne	r3, #0
   14070:	uxtb	r3, r3
   14074:	b	14134 <mmk_verify_times@@Base+0x108>
   14078:	ldr	r3, [fp, #-16]
   1407c:	ldr	r3, [r3, #8]
   14080:	cmp	r3, #0
   14084:	bne	14098 <mmk_verify_times@@Base+0x6c>
   14088:	ldr	r3, [fp, #-16]
   1408c:	ldr	r3, [r3, #12]
   14090:	cmp	r3, #0
   14094:	beq	140f0 <mmk_verify_times@@Base+0xc4>
   14098:	ldr	r3, [fp, #-16]
   1409c:	ldr	r3, [r3, #12]
   140a0:	cmp	r3, #0
   140a4:	beq	140b4 <mmk_verify_times@@Base+0x88>
   140a8:	ldr	r3, [fp, #-16]
   140ac:	ldr	r3, [r3, #12]
   140b0:	b	140b8 <mmk_verify_times@@Base+0x8c>
   140b4:	ldr	r3, [fp, #-8]
   140b8:	str	r3, [fp, #-12]
   140bc:	ldr	r3, [fp, #-16]
   140c0:	ldr	r2, [r3, #8]
   140c4:	ldr	r3, [fp, #-8]
   140c8:	cmp	r2, r3
   140cc:	bhi	140e8 <mmk_verify_times@@Base+0xbc>
   140d0:	ldr	r2, [fp, #-8]
   140d4:	ldr	r3, [fp, #-12]
   140d8:	cmp	r2, r3
   140dc:	bhi	140e8 <mmk_verify_times@@Base+0xbc>
   140e0:	mov	r3, #1
   140e4:	b	14134 <mmk_verify_times@@Base+0x108>
   140e8:	mov	r3, #0
   140ec:	b	14134 <mmk_verify_times@@Base+0x108>
   140f0:	ldr	r3, [fp, #-16]
   140f4:	ldr	r3, [r3, #20]
   140f8:	cmp	r3, #0
   140fc:	beq	14118 <mmk_verify_times@@Base+0xec>
   14100:	ldr	r3, [fp, #-16]
   14104:	ldr	r3, [r3, #20]
   14108:	ldr	r0, [fp, #-8]
   1410c:	blx	r3
   14110:	mov	r3, r0
   14114:	b	14134 <mmk_verify_times@@Base+0x108>
   14118:	ldr	r3, [fp, #-16]
   1411c:	ldr	r2, [r3, #16]
   14120:	ldr	r3, [fp, #-8]
   14124:	cmp	r2, r3
   14128:	moveq	r3, #1
   1412c:	movne	r3, #0
   14130:	uxtb	r3, r3
   14134:	mov	r0, r3
   14138:	sub	sp, fp, #4
   1413c:	pop	{fp, pc}
   14140:	andeq	r0, r0, r4, lsl r0
   14144:	push	{fp, lr}
   14148:	add	fp, sp, #4
   1414c:	sub	sp, sp, #32
   14150:	str	r0, [fp, #-24]	; 0xffffffe8
   14154:	str	r1, [fp, #-28]	; 0xffffffe4
   14158:	str	r2, [fp, #-32]	; 0xffffffe0
   1415c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14160:	add	r3, r3, #4
   14164:	str	r3, [fp, #-28]	; 0xffffffe4
   14168:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1416c:	sub	r3, r3, #4
   14170:	str	r3, [fp, #-32]	; 0xffffffe0
   14174:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14178:	bl	13450 <mmk_mock_params_begin@@Base>
   1417c:	str	r0, [fp, #-8]
   14180:	b	141e0 <mmk_verify_times@@Base+0x1b4>
   14184:	ldr	r3, [fp, #-8]
   14188:	add	r3, r3, #4
   1418c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14190:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14194:	mov	r0, r3
   14198:	bl	143fc <mmk_memcmp@@Base>
   1419c:	str	r0, [fp, #-12]
   141a0:	ldr	r3, [fp, #-12]
   141a4:	cmp	r3, #0
   141a8:	bne	141d0 <mmk_verify_times@@Base+0x1a4>
   141ac:	ldr	r3, [fp, #-8]
   141b0:	str	r3, [fp, #-16]
   141b4:	ldr	r3, [fp, #-16]
   141b8:	ldr	r3, [r3]
   141bc:	add	r2, r3, #1
   141c0:	ldr	r3, [fp, #-16]
   141c4:	str	r2, [r3]
   141c8:	mov	r3, #1
   141cc:	b	141f0 <mmk_verify_times@@Base+0x1c4>
   141d0:	ldr	r1, [fp, #-8]
   141d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   141d8:	bl	134a4 <mmk_mock_params_next@@Base>
   141dc:	str	r0, [fp, #-8]
   141e0:	ldr	r3, [fp, #-8]
   141e4:	cmp	r3, #0
   141e8:	bne	14184 <mmk_verify_times@@Base+0x158>
   141ec:	mov	r3, #0
   141f0:	mov	r0, r3
   141f4:	sub	sp, fp, #4
   141f8:	pop	{fp, pc}

000141fc <mmk_verify_register_call@@Base>:
   141fc:	push	{fp, lr}
   14200:	add	fp, sp, #4
   14204:	sub	sp, sp, #24
   14208:	str	r0, [fp, #-16]
   1420c:	str	r1, [fp, #-20]	; 0xffffffec
   14210:	bl	13ebc <mmk_ctx@@Base>
   14214:	mov	r3, r0
   14218:	mov	r0, r3
   1421c:	bl	13af4 <mmk_stub_context@@Base>
   14220:	str	r0, [fp, #-8]
   14224:	ldr	r3, [fp, #-8]
   14228:	ldr	r3, [r3, #8]
   1422c:	cmp	r3, #0
   14230:	bne	14288 <mmk_verify_register_call@@Base+0x8c>
   14234:	mov	r0, #4096	; 0x1000
   14238:	bl	1473c <mmk_malloc@@Base>
   1423c:	mov	r2, r0
   14240:	ldr	r3, [fp, #-8]
   14244:	str	r2, [r3, #8]
   14248:	ldr	r3, [fp, #-8]
   1424c:	ldr	r3, [r3, #8]
   14250:	cmp	r3, #0
   14254:	bne	1427c <mmk_verify_register_call@@Base+0x80>
   14258:	ldr	r3, [pc, #396]	; 143ec <mmk_verify_register_call@@Base+0x1f0>
   1425c:	ldr	r0, [r3]
   14260:	ldr	r3, [pc, #392]	; 143f0 <mmk_verify_register_call@@Base+0x1f4>
   14264:	str	r3, [sp]
   14268:	mov	r3, #79	; 0x4f
   1426c:	ldr	r2, [pc, #384]	; 143f4 <mmk_verify_register_call@@Base+0x1f8>
   14270:	ldr	r1, [pc, #384]	; 143f8 <mmk_verify_register_call@@Base+0x1fc>
   14274:	bl	11278 <fprintf@plt>
   14278:	bl	112c0 <abort@plt>
   1427c:	ldr	r3, [fp, #-8]
   14280:	mov	r2, #4096	; 0x1000
   14284:	str	r2, [r3, #16]
   14288:	ldr	r3, [fp, #-20]	; 0xffffffec
   1428c:	mov	r2, r3
   14290:	ldr	r1, [fp, #-16]
   14294:	ldr	r0, [fp, #-8]
   14298:	bl	14144 <mmk_verify_times@@Base+0x118>
   1429c:	mov	r3, r0
   142a0:	cmp	r3, #0
   142a4:	bne	143e0 <mmk_verify_register_call@@Base+0x1e4>
   142a8:	ldr	r3, [fp, #-8]
   142ac:	ldr	r2, [r3, #12]
   142b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   142b4:	add	r3, r2, r3
   142b8:	add	r2, r3, #4
   142bc:	ldr	r3, [fp, #-8]
   142c0:	ldr	r3, [r3, #16]
   142c4:	cmp	r2, r3
   142c8:	bcc	14364 <mmk_verify_register_call@@Base+0x168>
   142cc:	b	142e4 <mmk_verify_register_call@@Base+0xe8>
   142d0:	ldr	r3, [fp, #-8]
   142d4:	ldr	r3, [r3, #16]
   142d8:	add	r2, r3, #4096	; 0x1000
   142dc:	ldr	r3, [fp, #-8]
   142e0:	str	r2, [r3, #16]
   142e4:	ldr	r3, [fp, #-8]
   142e8:	ldr	r2, [r3, #12]
   142ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   142f0:	add	r3, r2, r3
   142f4:	add	r2, r3, #4
   142f8:	ldr	r3, [fp, #-8]
   142fc:	ldr	r3, [r3, #16]
   14300:	cmp	r2, r3
   14304:	bcs	142d0 <mmk_verify_register_call@@Base+0xd4>
   14308:	ldr	r3, [fp, #-8]
   1430c:	ldr	r2, [r3, #8]
   14310:	ldr	r3, [fp, #-8]
   14314:	ldr	r3, [r3, #16]
   14318:	mov	r1, r3
   1431c:	mov	r0, r2
   14320:	bl	1474c <mmk_realloc@@Base>
   14324:	mov	r2, r0
   14328:	ldr	r3, [fp, #-8]
   1432c:	str	r2, [r3, #8]
   14330:	ldr	r3, [fp, #-8]
   14334:	ldr	r3, [r3, #8]
   14338:	cmp	r3, #0
   1433c:	bne	14364 <mmk_verify_register_call@@Base+0x168>
   14340:	ldr	r3, [pc, #164]	; 143ec <mmk_verify_register_call@@Base+0x1f0>
   14344:	ldr	r0, [r3]
   14348:	ldr	r3, [pc, #160]	; 143f0 <mmk_verify_register_call@@Base+0x1f4>
   1434c:	str	r3, [sp]
   14350:	mov	r3, #91	; 0x5b
   14354:	ldr	r2, [pc, #152]	; 143f4 <mmk_verify_register_call@@Base+0x1f8>
   14358:	ldr	r1, [pc, #152]	; 143f8 <mmk_verify_register_call@@Base+0x1fc>
   1435c:	bl	11278 <fprintf@plt>
   14360:	bl	112c0 <abort@plt>
   14364:	ldr	r3, [fp, #-8]
   14368:	ldr	r2, [r3, #8]
   1436c:	ldr	r3, [fp, #-8]
   14370:	ldr	r3, [r3, #12]
   14374:	add	r3, r2, r3
   14378:	sub	r1, fp, #20
   1437c:	mov	r2, #4
   14380:	mov	r0, r3
   14384:	bl	14450 <mmk_memcpy@@Base>
   14388:	ldr	r3, [fp, #-8]
   1438c:	ldr	r2, [r3, #8]
   14390:	ldr	r3, [fp, #-8]
   14394:	ldr	r3, [r3, #12]
   14398:	add	r3, r3, #4
   1439c:	add	r3, r2, r3
   143a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   143a4:	ldr	r1, [fp, #-16]
   143a8:	mov	r0, r3
   143ac:	bl	14450 <mmk_memcpy@@Base>
   143b0:	str	r0, [fp, #-12]
   143b4:	ldr	r3, [fp, #-12]
   143b8:	mov	r2, #1
   143bc:	str	r2, [r3]
   143c0:	ldr	r3, [fp, #-8]
   143c4:	ldr	r2, [r3, #12]
   143c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   143cc:	add	r3, r2, r3
   143d0:	add	r2, r3, #4
   143d4:	ldr	r3, [fp, #-8]
   143d8:	str	r2, [r3, #12]
   143dc:	b	143e4 <mmk_verify_register_call@@Base+0x1e8>
   143e0:	nop			; (mov r0, r0)
   143e4:	sub	sp, fp, #4
   143e8:	pop	{fp, pc}
   143ec:	andeq	r6, r2, r8, ror r0
   143f0:	muleq	r1, ip, r1
   143f4:	andeq	r5, r1, r0, asr #2
   143f8:	andeq	r5, r1, ip, ror r1

000143fc <mmk_memcmp@@Base>:
   143fc:	cmp	r2, #0
   14400:	beq	14438 <mmk_memcmp@@Base+0x3c>
   14404:	ldrb	ip, [r0]
   14408:	ldrb	r3, [r1]
   1440c:	cmp	r3, ip
   14410:	addeq	r2, r0, r2
   14414:	addeq	r0, r0, #1
   14418:	beq	14430 <mmk_memcmp@@Base+0x34>
   1441c:	b	14440 <mmk_memcmp@@Base+0x44>
   14420:	ldrb	ip, [r0], #1
   14424:	ldrb	r3, [r1, #1]!
   14428:	cmp	ip, r3
   1442c:	bne	14440 <mmk_memcmp@@Base+0x44>
   14430:	cmp	r0, r2
   14434:	bne	14420 <mmk_memcmp@@Base+0x24>
   14438:	mov	r0, #0
   1443c:	bx	lr
   14440:	cmp	ip, r3
   14444:	mvncc	r0, #0
   14448:	movcs	r0, #1
   1444c:	bx	lr

00014450 <mmk_memcpy@@Base>:
   14450:	cmp	r2, #0
   14454:	bxeq	lr
   14458:	add	r3, r0, #4
   1445c:	add	ip, r1, #4
   14460:	cmp	r0, ip
   14464:	cmpcc	r1, r3
   14468:	movcs	r3, #1
   1446c:	movcc	r3, #0
   14470:	cmp	r2, #11
   14474:	movls	r3, #0
   14478:	andhi	r3, r3, #1
   1447c:	cmp	r3, #0
   14480:	beq	14564 <mmk_memcpy@@Base+0x114>
   14484:	rsb	r3, r1, #0
   14488:	ands	r3, r3, #3
   1448c:	push	{r4, r5, r6, r7, r8, lr}
   14490:	beq	14554 <mmk_memcpy@@Base+0x104>
   14494:	mov	r6, r1
   14498:	mov	r5, r0
   1449c:	ldrb	ip, [r6], #1
   144a0:	cmp	r3, #1
   144a4:	sub	r7, r2, #1
   144a8:	strb	ip, [r5], #1
   144ac:	beq	144e0 <mmk_memcpy@@Base+0x90>
   144b0:	ldrb	ip, [r1, #1]
   144b4:	cmp	r3, #3
   144b8:	add	r5, r0, #2
   144bc:	strb	ip, [r0, #1]
   144c0:	add	r6, r1, #2
   144c4:	sub	r7, r2, #2
   144c8:	bne	144e0 <mmk_memcpy@@Base+0x90>
   144cc:	ldrb	ip, [r1, #2]
   144d0:	add	r5, r0, #3
   144d4:	add	r6, r1, #3
   144d8:	sub	r7, r2, #3
   144dc:	strb	ip, [r0, #2]
   144e0:	sub	r2, r2, r3
   144e4:	sub	ip, r2, #4
   144e8:	add	r1, r1, r3
   144ec:	lsr	ip, ip, #2
   144f0:	add	r4, ip, #1
   144f4:	add	r3, r0, r3
   144f8:	lsl	ip, r4, #2
   144fc:	mov	lr, #0
   14500:	add	lr, lr, #1
   14504:	ldr	r8, [r1], #4
   14508:	cmp	r4, lr
   1450c:	str	r8, [r3], #4
   14510:	bhi	14500 <mmk_memcpy@@Base+0xb0>
   14514:	cmp	r2, ip
   14518:	sub	r3, r7, ip
   1451c:	add	r2, r6, ip
   14520:	add	ip, r5, ip
   14524:	popeq	{r4, r5, r6, r7, r8, pc}
   14528:	ldrb	r1, [r6, r4, lsl #2]
   1452c:	cmp	r3, #1
   14530:	strb	r1, [r5, r4, lsl #2]
   14534:	popeq	{r4, r5, r6, r7, r8, pc}
   14538:	ldrb	r1, [r2, #1]
   1453c:	cmp	r3, #2
   14540:	strb	r1, [ip, #1]
   14544:	beq	14584 <mmk_memcpy@@Base+0x134>
   14548:	ldrb	r3, [r2, #2]
   1454c:	strb	r3, [ip, #2]
   14550:	pop	{r4, r5, r6, r7, r8, pc}
   14554:	mov	r5, r0
   14558:	mov	r6, r1
   1455c:	mov	r7, r2
   14560:	b	144e0 <mmk_memcpy@@Base+0x90>
   14564:	sub	r1, r1, #1
   14568:	add	r2, r0, r2
   1456c:	mov	r3, r0
   14570:	ldrb	ip, [r1, #1]!
   14574:	strb	ip, [r3], #1
   14578:	cmp	r3, r2
   1457c:	bne	14570 <mmk_memcpy@@Base+0x120>
   14580:	bx	lr
   14584:	pop	{r4, r5, r6, r7, r8, pc}

00014588 <mmk_strneq@@Base>:
   14588:	ldrb	r3, [r0]
   1458c:	cmp	r3, #0
   14590:	beq	14624 <mmk_strneq@@Base+0x9c>
   14594:	ldrb	ip, [r1]
   14598:	cmp	ip, #0
   1459c:	beq	14624 <mmk_strneq@@Base+0x9c>
   145a0:	cmp	r2, #0
   145a4:	beq	14614 <mmk_strneq@@Base+0x8c>
   145a8:	cmp	ip, r3
   145ac:	bne	1461c <mmk_strneq@@Base+0x94>
   145b0:	push	{lr}		; (str lr, [sp, #-4]!)
   145b4:	add	r3, r1, #1
   145b8:	b	145d8 <mmk_strneq@@Base+0x50>
   145bc:	ldrb	lr, [r3], #1
   145c0:	cmp	lr, #0
   145c4:	beq	145ec <mmk_strneq@@Base+0x64>
   145c8:	cmp	r2, #0
   145cc:	beq	14604 <mmk_strneq@@Base+0x7c>
   145d0:	cmp	ip, lr
   145d4:	bne	1460c <mmk_strneq@@Base+0x84>
   145d8:	ldrb	ip, [r0, #1]!
   145dc:	sub	r2, r2, #1
   145e0:	mov	r1, r3
   145e4:	cmp	ip, #0
   145e8:	bne	145bc <mmk_strneq@@Base+0x34>
   145ec:	cmp	r2, #0
   145f0:	beq	14604 <mmk_strneq@@Base+0x7c>
   145f4:	ldrb	r0, [r1]
   145f8:	clz	r0, r0
   145fc:	lsr	r0, r0, #5
   14600:	pop	{pc}		; (ldr pc, [sp], #4)
   14604:	mov	r0, #1
   14608:	pop	{pc}		; (ldr pc, [sp], #4)
   1460c:	mov	r0, #0
   14610:	pop	{pc}		; (ldr pc, [sp], #4)
   14614:	mov	r0, #1
   14618:	bx	lr
   1461c:	mov	r0, #0
   14620:	bx	lr
   14624:	cmp	r2, #0
   14628:	beq	14614 <mmk_strneq@@Base+0x8c>
   1462c:	ldrb	r0, [r1]
   14630:	clz	r0, r0
   14634:	lsr	r0, r0, #5
   14638:	bx	lr

0001463c <mmk_strchr@@Base>:
   1463c:	ldrb	r2, [r0]
   14640:	cmp	r2, #0
   14644:	beq	14670 <mmk_strchr@@Base+0x34>
   14648:	cmp	r1, r2
   1464c:	bne	1465c <mmk_strchr@@Base+0x20>
   14650:	b	14678 <mmk_strchr@@Base+0x3c>
   14654:	cmp	r3, r1
   14658:	bxeq	lr
   1465c:	ldrb	r3, [r0, #1]!
   14660:	cmp	r3, #0
   14664:	bne	14654 <mmk_strchr@@Base+0x18>
   14668:	mov	r0, r3
   1466c:	bx	lr
   14670:	mov	r0, r2
   14674:	bx	lr
   14678:	bx	lr

0001467c <mmk_strcpy@@Base>:
   1467c:	ldrb	r3, [r1]
   14680:	cmp	r3, #0
   14684:	beq	14698 <mmk_strcpy@@Base+0x1c>
   14688:	strb	r3, [r0], #1
   1468c:	ldrb	r3, [r1, #1]!
   14690:	cmp	r3, #0
   14694:	bne	14688 <mmk_strcpy@@Base+0xc>
   14698:	mov	r3, #0
   1469c:	strb	r3, [r0]
   146a0:	bx	lr

000146a4 <mmk_strncpy@@Base>:
   146a4:	ldrb	ip, [r1]
   146a8:	cmp	r2, #0
   146ac:	cmpne	ip, #0
   146b0:	beq	146dc <mmk_strncpy@@Base+0x38>
   146b4:	strb	ip, [r0], #1
   146b8:	ldrb	ip, [r1, #1]!
   146bc:	subs	r2, r2, #1
   146c0:	movne	r3, #1
   146c4:	moveq	r3, #0
   146c8:	cmp	ip, #0
   146cc:	moveq	r3, #0
   146d0:	andne	r3, r3, #1
   146d4:	cmp	r3, #0
   146d8:	bne	146b4 <mmk_strncpy@@Base+0x10>
   146dc:	mov	r3, #0
   146e0:	strb	r3, [r0]
   146e4:	bx	lr

000146e8 <mmk_strlen@@Base>:
   146e8:	ldrb	r3, [r0]
   146ec:	cmp	r3, #0
   146f0:	beq	14708 <mmk_strlen@@Base+0x20>
   146f4:	mov	r3, #0
   146f8:	ldrb	r2, [r0, #1]!
   146fc:	add	r3, r3, #1
   14700:	cmp	r2, #0
   14704:	bne	146f8 <mmk_strlen@@Base+0x10>
   14708:	mov	r0, r3
   1470c:	bx	lr

00014710 <mmk_isspace@@Base>:
   14710:	cmp	r0, #9
   14714:	cmpne	r0, #32
   14718:	mov	r3, r0
   1471c:	moveq	r0, #1
   14720:	movne	r0, #0
   14724:	bxeq	lr
   14728:	cmp	r3, #10
   1472c:	cmpne	r3, #13
   14730:	moveq	r0, #1
   14734:	movne	r0, #0
   14738:	bx	lr

0001473c <mmk_malloc@@Base>:
   1473c:	ldr	r3, [pc, #4]	; 14748 <mmk_malloc@@Base+0xc>
   14740:	ldr	r3, [r3]
   14744:	bx	r3
   14748:	strheq	r6, [r2], -r0

0001474c <mmk_realloc@@Base>:
   1474c:	ldr	r3, [pc, #4]	; 14758 <mmk_realloc@@Base+0xc>
   14750:	ldr	r3, [r3]
   14754:	bx	r3
   14758:	andeq	r6, r2, r8, lsr #1

0001475c <mmk_free@@Base>:
   1475c:	ldr	r3, [pc, #4]	; 14768 <mmk_free@@Base+0xc>
   14760:	ldr	r3, [r3]
   14764:	bx	r3
   14768:	andeq	r6, r2, ip, lsr #1

0001476c <mmk_init_vital_functions@@Base>:
   1476c:	push	{r4, lr}
   14770:	mov	r4, r0
   14774:	sub	sp, sp, #8
   14778:	mov	r0, #0
   1477c:	bl	11230 <malloc@plt>
   14780:	mov	r1, #0
   14784:	bl	1120c <realloc@plt>
   14788:	bl	111e8 <free@plt>
   1478c:	mov	r0, r4
   14790:	ldr	r1, [pc, #148]	; 1482c <mmk_init_vital_functions@@Base+0xc0>
   14794:	bl	13aac <plt_get_real_fn@@Base>
   14798:	ldr	r3, [pc, #144]	; 14830 <mmk_init_vital_functions@@Base+0xc4>
   1479c:	cmp	r0, #0
   147a0:	str	r0, [r3]
   147a4:	beq	147e8 <mmk_init_vital_functions@@Base+0x7c>
   147a8:	ldr	r1, [pc, #132]	; 14834 <mmk_init_vital_functions@@Base+0xc8>
   147ac:	mov	r0, r4
   147b0:	bl	13aac <plt_get_real_fn@@Base>
   147b4:	ldr	r3, [pc, #124]	; 14838 <mmk_init_vital_functions@@Base+0xcc>
   147b8:	cmp	r0, #0
   147bc:	str	r0, [r3]
   147c0:	beq	1481c <mmk_init_vital_functions@@Base+0xb0>
   147c4:	mov	r0, r4
   147c8:	ldr	r1, [pc, #108]	; 1483c <mmk_init_vital_functions@@Base+0xd0>
   147cc:	bl	13aac <plt_get_real_fn@@Base>
   147d0:	ldr	r3, [pc, #104]	; 14840 <mmk_init_vital_functions@@Base+0xd4>
   147d4:	cmp	r0, #0
   147d8:	str	r0, [r3]
   147dc:	beq	1480c <mmk_init_vital_functions@@Base+0xa0>
   147e0:	add	sp, sp, #8
   147e4:	pop	{r4, pc}
   147e8:	ldr	r1, [pc, #84]	; 14844 <mmk_init_vital_functions@@Base+0xd8>
   147ec:	ldr	r2, [pc, #84]	; 14848 <mmk_init_vital_functions@@Base+0xdc>
   147f0:	mov	r3, #88	; 0x58
   147f4:	ldr	r0, [r1]
   147f8:	str	r2, [sp]
   147fc:	ldr	r1, [pc, #72]	; 1484c <mmk_init_vital_functions@@Base+0xe0>
   14800:	ldr	r2, [pc, #72]	; 14850 <mmk_init_vital_functions@@Base+0xe4>
   14804:	bl	11278 <fprintf@plt>
   14808:	bl	112c0 <abort@plt>
   1480c:	ldr	r1, [pc, #48]	; 14844 <mmk_init_vital_functions@@Base+0xd8>
   14810:	ldr	r2, [pc, #60]	; 14854 <mmk_init_vital_functions@@Base+0xe8>
   14814:	mov	r3, #90	; 0x5a
   14818:	b	147f4 <mmk_init_vital_functions@@Base+0x88>
   1481c:	ldr	r1, [pc, #32]	; 14844 <mmk_init_vital_functions@@Base+0xd8>
   14820:	ldr	r2, [pc, #48]	; 14858 <mmk_init_vital_functions@@Base+0xec>
   14824:	mov	r3, #89	; 0x59
   14828:	b	147f4 <mmk_init_vital_functions@@Base+0x88>
   1482c:	andeq	r5, r1, ip, lsr #3
   14830:	strheq	r6, [r2], -r0
   14834:	andeq	r5, r1, r8, lsr #4
   14838:	andeq	r6, r2, r8, lsr #1
   1483c:	andeq	r5, r1, r8, ror #4
   14840:	andeq	r6, r2, ip, lsr #1
   14844:	andeq	r6, r2, r8, ror r0
   14848:	strdeq	r5, [r1], -r0
   1484c:	strdeq	r5, [r1], -r0
   14850:			; <UNDEFINED> instruction: 0x000151b4
   14854:	andeq	r5, r1, r0, ror r2
   14858:	andeq	r5, r1, r0, lsr r2

0001485c <mmk_when_init@@Base>:
   1485c:	push	{fp, lr}
   14860:	add	fp, sp, #4
   14864:	sub	sp, sp, #8
   14868:	str	r0, [fp, #-8]
   1486c:	bl	14bf0 <__libc_csu_fini@@Base+0xc>
   14870:	mov	r1, r0
   14874:	ldr	r2, [pc, #16]	; 1488c <mmk_when_init@@Base+0x30>
   14878:	ldr	r3, [fp, #-8]
   1487c:	str	r3, [r1, r2]
   14880:	nop			; (mov r0, r0)
   14884:	sub	sp, fp, #4
   14888:	pop	{fp, pc}
   1488c:	andeq	r0, r0, r8, lsl r0

00014890 <mmk_when_get_result@@Base>:
   14890:	push	{fp, lr}
   14894:	add	fp, sp, #4
   14898:	bl	14bf0 <__libc_csu_fini@@Base+0xc>
   1489c:	mov	r2, r0
   148a0:	ldr	r3, [pc, #8]	; 148b0 <mmk_when_get_result@@Base+0x20>
   148a4:	ldr	r3, [r2, r3]
   148a8:	mov	r0, r3
   148ac:	pop	{fp, pc}
   148b0:	andeq	r0, r0, r8, lsl r0

000148b4 <mmk_when_impl@@Base>:
   148b4:	push	{fp, lr}
   148b8:	add	fp, sp, #4
   148bc:	sub	sp, sp, #16
   148c0:	str	r0, [fp, #-16]
   148c4:	str	r1, [fp, #-20]	; 0xffffffec
   148c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   148cc:	str	r3, [fp, #-8]
   148d0:	bl	13110 <mmk_matcher_ctx@@Base>
   148d4:	mov	r2, r0
   148d8:	ldr	r3, [fp, #-8]
   148dc:	str	r2, [r3]
   148e0:	ldr	r3, [fp, #-16]
   148e4:	ldr	r2, [r3]
   148e8:	ldr	r3, [fp, #-8]
   148ec:	str	r2, [r3, #4]
   148f0:	ldr	r3, [fp, #-16]
   148f4:	ldr	r2, [fp, #-8]
   148f8:	str	r2, [r3]
   148fc:	nop			; (mov r0, r0)
   14900:	sub	sp, fp, #4
   14904:	pop	{fp, pc}

00014908 <mmk_trampoline@@Base>:
   14908:	sub	ip, pc, #8
   1490c:	push	{r0, r1, r2, r3}
   14910:	push	{ip, lr}
   14914:	ldr	r0, [ip, #-8]
   14918:	ldr	ip, [r0, #4]
   1491c:	blx	ip
   14920:	pop	{ip, lr}
   14924:	push	{ip, lr}
   14928:	ldr	ip, [ip, #-8]
   1492c:	ldr	ip, [ip]
   14930:	blx	ip
   14934:	cmp	r0, #0
   14938:	bne	14948 <mmk_trampoline@@Base+0x40>
   1493c:	pop	{ip, lr}
   14940:	pop	{r0, r1, r2, r3}
   14944:	ldr	pc, [ip, #-4]
   14948:	pop	{ip, lr}
   1494c:	pop	{r0, r1, r2, r3}
   14950:	push	{ip, lr}
   14954:	ldr	ip, [ip, #-8]
   14958:	ldr	ip, [ip, #8]
   1495c:	blx	ip
   14960:	pop	{ip, pc}

00014964 <mmk_trampoline_end@@Base>:
   14964:	nop			; (mov r0, r0)
   14968:	subs	r2, r1, #1
   1496c:	bxeq	lr
   14970:	bcc	14b48 <mmk_trampoline_end@@Base+0x1e4>
   14974:	cmp	r0, r1
   14978:	bls	14b2c <mmk_trampoline_end@@Base+0x1c8>
   1497c:	tst	r1, r2
   14980:	beq	14b38 <mmk_trampoline_end@@Base+0x1d4>
   14984:	clz	r3, r0
   14988:	clz	r2, r1
   1498c:	sub	r3, r2, r3
   14990:	rsbs	r3, r3, #31
   14994:	addne	r3, r3, r3, lsl #1
   14998:	mov	r2, #0
   1499c:	addne	pc, pc, r3, lsl #2
   149a0:	nop			; (mov r0, r0)
   149a4:	cmp	r0, r1, lsl #31
   149a8:	adc	r2, r2, r2
   149ac:	subcs	r0, r0, r1, lsl #31
   149b0:	cmp	r0, r1, lsl #30
   149b4:	adc	r2, r2, r2
   149b8:	subcs	r0, r0, r1, lsl #30
   149bc:	cmp	r0, r1, lsl #29
   149c0:	adc	r2, r2, r2
   149c4:	subcs	r0, r0, r1, lsl #29
   149c8:	cmp	r0, r1, lsl #28
   149cc:	adc	r2, r2, r2
   149d0:	subcs	r0, r0, r1, lsl #28
   149d4:	cmp	r0, r1, lsl #27
   149d8:	adc	r2, r2, r2
   149dc:	subcs	r0, r0, r1, lsl #27
   149e0:	cmp	r0, r1, lsl #26
   149e4:	adc	r2, r2, r2
   149e8:	subcs	r0, r0, r1, lsl #26
   149ec:	cmp	r0, r1, lsl #25
   149f0:	adc	r2, r2, r2
   149f4:	subcs	r0, r0, r1, lsl #25
   149f8:	cmp	r0, r1, lsl #24
   149fc:	adc	r2, r2, r2
   14a00:	subcs	r0, r0, r1, lsl #24
   14a04:	cmp	r0, r1, lsl #23
   14a08:	adc	r2, r2, r2
   14a0c:	subcs	r0, r0, r1, lsl #23
   14a10:	cmp	r0, r1, lsl #22
   14a14:	adc	r2, r2, r2
   14a18:	subcs	r0, r0, r1, lsl #22
   14a1c:	cmp	r0, r1, lsl #21
   14a20:	adc	r2, r2, r2
   14a24:	subcs	r0, r0, r1, lsl #21
   14a28:	cmp	r0, r1, lsl #20
   14a2c:	adc	r2, r2, r2
   14a30:	subcs	r0, r0, r1, lsl #20
   14a34:	cmp	r0, r1, lsl #19
   14a38:	adc	r2, r2, r2
   14a3c:	subcs	r0, r0, r1, lsl #19
   14a40:	cmp	r0, r1, lsl #18
   14a44:	adc	r2, r2, r2
   14a48:	subcs	r0, r0, r1, lsl #18
   14a4c:	cmp	r0, r1, lsl #17
   14a50:	adc	r2, r2, r2
   14a54:	subcs	r0, r0, r1, lsl #17
   14a58:	cmp	r0, r1, lsl #16
   14a5c:	adc	r2, r2, r2
   14a60:	subcs	r0, r0, r1, lsl #16
   14a64:	cmp	r0, r1, lsl #15
   14a68:	adc	r2, r2, r2
   14a6c:	subcs	r0, r0, r1, lsl #15
   14a70:	cmp	r0, r1, lsl #14
   14a74:	adc	r2, r2, r2
   14a78:	subcs	r0, r0, r1, lsl #14
   14a7c:	cmp	r0, r1, lsl #13
   14a80:	adc	r2, r2, r2
   14a84:	subcs	r0, r0, r1, lsl #13
   14a88:	cmp	r0, r1, lsl #12
   14a8c:	adc	r2, r2, r2
   14a90:	subcs	r0, r0, r1, lsl #12
   14a94:	cmp	r0, r1, lsl #11
   14a98:	adc	r2, r2, r2
   14a9c:	subcs	r0, r0, r1, lsl #11
   14aa0:	cmp	r0, r1, lsl #10
   14aa4:	adc	r2, r2, r2
   14aa8:	subcs	r0, r0, r1, lsl #10
   14aac:	cmp	r0, r1, lsl #9
   14ab0:	adc	r2, r2, r2
   14ab4:	subcs	r0, r0, r1, lsl #9
   14ab8:	cmp	r0, r1, lsl #8
   14abc:	adc	r2, r2, r2
   14ac0:	subcs	r0, r0, r1, lsl #8
   14ac4:	cmp	r0, r1, lsl #7
   14ac8:	adc	r2, r2, r2
   14acc:	subcs	r0, r0, r1, lsl #7
   14ad0:	cmp	r0, r1, lsl #6
   14ad4:	adc	r2, r2, r2
   14ad8:	subcs	r0, r0, r1, lsl #6
   14adc:	cmp	r0, r1, lsl #5
   14ae0:	adc	r2, r2, r2
   14ae4:	subcs	r0, r0, r1, lsl #5
   14ae8:	cmp	r0, r1, lsl #4
   14aec:	adc	r2, r2, r2
   14af0:	subcs	r0, r0, r1, lsl #4
   14af4:	cmp	r0, r1, lsl #3
   14af8:	adc	r2, r2, r2
   14afc:	subcs	r0, r0, r1, lsl #3
   14b00:	cmp	r0, r1, lsl #2
   14b04:	adc	r2, r2, r2
   14b08:	subcs	r0, r0, r1, lsl #2
   14b0c:	cmp	r0, r1, lsl #1
   14b10:	adc	r2, r2, r2
   14b14:	subcs	r0, r0, r1, lsl #1
   14b18:	cmp	r0, r1
   14b1c:	adc	r2, r2, r2
   14b20:	subcs	r0, r0, r1
   14b24:	mov	r0, r2
   14b28:	bx	lr
   14b2c:	moveq	r0, #1
   14b30:	movne	r0, #0
   14b34:	bx	lr
   14b38:	clz	r2, r1
   14b3c:	rsb	r2, r2, #31
   14b40:	lsr	r0, r0, r2
   14b44:	bx	lr
   14b48:	cmp	r0, #0
   14b4c:	mvnne	r0, #0
   14b50:	b	14b74 <mmk_trampoline_end@@Base+0x210>
   14b54:	cmp	r1, #0
   14b58:	beq	14b48 <mmk_trampoline_end@@Base+0x1e4>
   14b5c:	push	{r0, r1, lr}
   14b60:	bl	14968 <mmk_trampoline_end@@Base+0x4>
   14b64:	pop	{r1, r2, lr}
   14b68:	mul	r3, r2, r0
   14b6c:	sub	r1, r1, r3
   14b70:	bx	lr
   14b74:	push	{r1, lr}
   14b78:	mov	r0, #8
   14b7c:	bl	111c4 <raise@plt>
   14b80:	pop	{r1, pc}

00014b84 <__libc_csu_init@@Base>:
   14b84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14b88:	mov	r7, r0
   14b8c:	ldr	r6, [pc, #72]	; 14bdc <__libc_csu_init@@Base+0x58>
   14b90:	ldr	r5, [pc, #72]	; 14be0 <__libc_csu_init@@Base+0x5c>
   14b94:	add	r6, pc, r6
   14b98:	add	r5, pc, r5
   14b9c:	sub	r6, r6, r5
   14ba0:	mov	r8, r1
   14ba4:	mov	r9, r2
   14ba8:	bl	11198 <strstr@plt-0x20>
   14bac:	asrs	r6, r6, #2
   14bb0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14bb4:	mov	r4, #0
   14bb8:	add	r4, r4, #1
   14bbc:	ldr	r3, [r5], #4
   14bc0:	mov	r2, r9
   14bc4:	mov	r1, r8
   14bc8:	mov	r0, r7
   14bcc:	blx	r3
   14bd0:	cmp	r6, r4
   14bd4:	bne	14bb8 <__libc_csu_init@@Base+0x34>
   14bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14bdc:	andeq	r1, r1, ip, asr r3
   14be0:	andeq	r1, r1, r4, asr r3

00014be4 <__libc_csu_fini@@Base>:
   14be4:	bx	lr
	...
   14bf0:	mvn	r0, #61440	; 0xf000
   14bf4:	sub	pc, r0, #31

Disassembly of section .fini:

00014bf8 <.fini>:
   14bf8:	push	{r3, lr}
   14bfc:	pop	{r3, pc}
