
../repos/coreutils/src/dir:     file format elf32-littlearm


Disassembly of section .init:

00011838 <.init>:
   11838:	push	{r3, lr}
   1183c:	bl	11dbc <__assert_fail@plt+0x48>
   11840:	pop	{r3, pc}

Disassembly of section .plt:

00011844 <calloc@plt-0x14>:
   11844:	push	{lr}		; (str lr, [sp, #-4]!)
   11848:	ldr	lr, [pc, #4]	; 11854 <calloc@plt-0x4>
   1184c:	add	lr, pc, lr
   11850:	ldr	pc, [lr, #8]!
   11854:	andeq	r7, r2, ip, lsr #15

00011858 <calloc@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #159744	; 0x27000
   11860:	ldr	pc, [ip, #1964]!	; 0x7ac

00011864 <fputs_unlocked@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #159744	; 0x27000
   1186c:	ldr	pc, [ip, #1956]!	; 0x7a4

00011870 <cap_to_text@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #159744	; 0x27000
   11878:	ldr	pc, [ip, #1948]!	; 0x79c

0001187c <raise@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #159744	; 0x27000
   11884:	ldr	pc, [ip, #1940]!	; 0x794

00011888 <gmtime_r@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #159744	; 0x27000
   11890:	ldr	pc, [ip, #1932]!	; 0x78c

00011894 <getpwnam@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #159744	; 0x27000
   1189c:	ldr	pc, [ip, #1924]!	; 0x784

000118a0 <strcmp@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #159744	; 0x27000
   118a8:	ldr	pc, [ip, #1916]!	; 0x77c

000118ac <getpwuid@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #159744	; 0x27000
   118b4:	ldr	pc, [ip, #1908]!	; 0x774

000118b8 <mktime@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #159744	; 0x27000
   118c0:	ldr	pc, [ip, #1900]!	; 0x76c

000118c4 <fflush@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #159744	; 0x27000
   118cc:	ldr	pc, [ip, #1892]!	; 0x764

000118d0 <wcwidth@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #159744	; 0x27000
   118d8:	ldr	pc, [ip, #1884]!	; 0x75c

000118dc <sigprocmask@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #159744	; 0x27000
   118e4:	ldr	pc, [ip, #1876]!	; 0x754

000118e8 <_setjmp@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #159744	; 0x27000
   118f0:	ldr	pc, [ip, #1868]!	; 0x74c

000118f4 <memmove@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #159744	; 0x27000
   118fc:	ldr	pc, [ip, #1860]!	; 0x744

00011900 <free@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #159744	; 0x27000
   11908:	ldr	pc, [ip, #1852]!	; 0x73c

0001190c <faccessat@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #159744	; 0x27000
   11914:	ldr	pc, [ip, #1844]!	; 0x734

00011918 <clock_gettime@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #159744	; 0x27000
   11920:	ldr	pc, [ip, #1836]!	; 0x72c

00011924 <_exit@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #159744	; 0x27000
   1192c:	ldr	pc, [ip, #1828]!	; 0x724

00011930 <memcpy@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #159744	; 0x27000
   11938:	ldr	pc, [ip, #1820]!	; 0x71c

0001193c <__strtoull_internal@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #159744	; 0x27000
   11944:	ldr	pc, [ip, #1812]!	; 0x714

00011948 <mbsinit@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #159744	; 0x27000
   11950:	ldr	pc, [ip, #1804]!	; 0x70c

00011954 <signal@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #159744	; 0x27000
   1195c:	ldr	pc, [ip, #1796]!	; 0x704

00011960 <fwrite_unlocked@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #159744	; 0x27000
   11968:	ldr	pc, [ip, #1788]!	; 0x6fc

0001196c <memcmp@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #159744	; 0x27000
   11974:	ldr	pc, [ip, #1780]!	; 0x6f4

00011978 <fputc_unlocked@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #159744	; 0x27000
   11980:	ldr	pc, [ip, #1772]!	; 0x6ec

00011984 <dcgettext@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #159744	; 0x27000
   1198c:	ldr	pc, [ip, #1764]!	; 0x6e4

00011990 <realloc@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #159744	; 0x27000
   11998:	ldr	pc, [ip, #1756]!	; 0x6dc

0001199c <sigismember@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #159744	; 0x27000
   119a4:	ldr	pc, [ip, #1748]!	; 0x6d4

000119a8 <fgetfilecon@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #159744	; 0x27000
   119b0:	ldr	pc, [ip, #1740]!	; 0x6cc

000119b4 <localtime_r@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #159744	; 0x27000
   119bc:	ldr	pc, [ip, #1732]!	; 0x6c4

000119c0 <textdomain@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #159744	; 0x27000
   119c8:	ldr	pc, [ip, #1724]!	; 0x6bc

000119cc <iswcntrl@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #159744	; 0x27000
   119d4:	ldr	pc, [ip, #1716]!	; 0x6b4

000119d8 <rawmemchr@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #159744	; 0x27000
   119e0:	ldr	pc, [ip, #1708]!	; 0x6ac

000119e4 <fflush_unlocked@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #159744	; 0x27000
   119ec:	ldr	pc, [ip, #1700]!	; 0x6a4

000119f0 <iswprint@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #159744	; 0x27000
   119f8:	ldr	pc, [ip, #1692]!	; 0x69c

000119fc <tzset@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #159744	; 0x27000
   11a04:	ldr	pc, [ip, #1684]!	; 0x694

00011a08 <readlink@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #159744	; 0x27000
   11a10:	ldr	pc, [ip, #1676]!	; 0x68c

00011a14 <sigaction@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #159744	; 0x27000
   11a1c:	ldr	pc, [ip, #1668]!	; 0x684

00011a20 <__memcpy_chk@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #159744	; 0x27000
   11a28:	ldr	pc, [ip, #1660]!	; 0x67c

00011a2c <fwrite@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #159744	; 0x27000
   11a34:	ldr	pc, [ip, #1652]!	; 0x674

00011a38 <ioctl@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #159744	; 0x27000
   11a40:	ldr	pc, [ip, #1644]!	; 0x66c

00011a44 <lseek64@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #159744	; 0x27000
   11a4c:	ldr	pc, [ip, #1636]!	; 0x664

00011a50 <__ctype_get_mb_cur_max@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #159744	; 0x27000
   11a58:	ldr	pc, [ip, #1628]!	; 0x65c

00011a5c <strcpy@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #159744	; 0x27000
   11a64:	ldr	pc, [ip, #1620]!	; 0x654

00011a68 <__fpending@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #159744	; 0x27000
   11a70:	ldr	pc, [ip, #1612]!	; 0x64c

00011a74 <mbrtowc@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #159744	; 0x27000
   11a7c:	ldr	pc, [ip, #1604]!	; 0x644

00011a80 <wcstombs@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #159744	; 0x27000
   11a88:	ldr	pc, [ip, #1596]!	; 0x63c

00011a8c <error@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #159744	; 0x27000
   11a94:	ldr	pc, [ip, #1588]!	; 0x634

00011a98 <gethostname@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #159744	; 0x27000
   11aa0:	ldr	pc, [ip, #1580]!	; 0x62c

00011aa4 <opendir@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #159744	; 0x27000
   11aac:	ldr	pc, [ip, #1572]!	; 0x624

00011ab0 <fnmatch@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #159744	; 0x27000
   11ab8:	ldr	pc, [ip, #1564]!	; 0x61c

00011abc <strcoll@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #159744	; 0x27000
   11ac4:	ldr	pc, [ip, #1556]!	; 0x614

00011ac8 <getenv@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #159744	; 0x27000
   11ad0:	ldr	pc, [ip, #1548]!	; 0x60c

00011ad4 <lgetfilecon@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #159744	; 0x27000
   11adc:	ldr	pc, [ip, #1540]!	; 0x604

00011ae0 <malloc@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #159744	; 0x27000
   11ae8:	ldr	pc, [ip, #1532]!	; 0x5fc

00011aec <sigaddset@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #159744	; 0x27000
   11af4:	ldr	pc, [ip, #1524]!	; 0x5f4

00011af8 <__libc_start_main@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #159744	; 0x27000
   11b00:	ldr	pc, [ip, #1516]!	; 0x5ec

00011b04 <strftime@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #159744	; 0x27000
   11b0c:	ldr	pc, [ip, #1508]!	; 0x5e4

00011b10 <__freading@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #159744	; 0x27000
   11b18:	ldr	pc, [ip, #1500]!	; 0x5dc

00011b1c <__ctype_tolower_loc@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #159744	; 0x27000
   11b24:	ldr	pc, [ip, #1492]!	; 0x5d4

00011b28 <__ctype_toupper_loc@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #159744	; 0x27000
   11b30:	ldr	pc, [ip, #1484]!	; 0x5cc

00011b34 <__gmon_start__@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #159744	; 0x27000
   11b3c:	ldr	pc, [ip, #1476]!	; 0x5c4

00011b40 <mempcpy@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #159744	; 0x27000
   11b48:	ldr	pc, [ip, #1468]!	; 0x5bc

00011b4c <getopt_long@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #159744	; 0x27000
   11b54:	ldr	pc, [ip, #1460]!	; 0x5b4

00011b58 <__ctype_b_loc@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #159744	; 0x27000
   11b60:	ldr	pc, [ip, #1452]!	; 0x5ac

00011b64 <getcwd@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #159744	; 0x27000
   11b6c:	ldr	pc, [ip, #1444]!	; 0x5a4

00011b70 <exit@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #159744	; 0x27000
   11b78:	ldr	pc, [ip, #1436]!	; 0x59c

00011b7c <getfilecon@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #159744	; 0x27000
   11b84:	ldr	pc, [ip, #1428]!	; 0x594

00011b88 <tcgetpgrp@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #159744	; 0x27000
   11b90:	ldr	pc, [ip, #1420]!	; 0x58c

00011b94 <strlen@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #159744	; 0x27000
   11b9c:	ldr	pc, [ip, #1412]!	; 0x584

00011ba0 <strchr@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #159744	; 0x27000
   11ba8:	ldr	pc, [ip, #1404]!	; 0x57c

00011bac <setenv@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #159744	; 0x27000
   11bb4:	ldr	pc, [ip, #1396]!	; 0x574

00011bb8 <__errno_location@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #159744	; 0x27000
   11bc0:	ldr	pc, [ip, #1388]!	; 0x56c

00011bc4 <__sprintf_chk@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #159744	; 0x27000
   11bcc:	ldr	pc, [ip, #1380]!	; 0x564

00011bd0 <snprintf@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #159744	; 0x27000
   11bd8:	ldr	pc, [ip, #1372]!	; 0x55c

00011bdc <__cxa_atexit@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #159744	; 0x27000
   11be4:	ldr	pc, [ip, #1364]!	; 0x554

00011be8 <memset@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #159744	; 0x27000
   11bf0:	ldr	pc, [ip, #1356]!	; 0x54c

00011bf4 <__printf_chk@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #159744	; 0x27000
   11bfc:	ldr	pc, [ip, #1348]!	; 0x544

00011c00 <stpncpy@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #159744	; 0x27000
   11c08:	ldr	pc, [ip, #1340]!	; 0x53c

00011c0c <fileno@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #159744	; 0x27000
   11c14:	ldr	pc, [ip, #1332]!	; 0x534

00011c18 <__fprintf_chk@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #159744	; 0x27000
   11c20:	ldr	pc, [ip, #1324]!	; 0x52c

00011c24 <fclose@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #159744	; 0x27000
   11c2c:	ldr	pc, [ip, #1316]!	; 0x524

00011c30 <fseeko64@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #159744	; 0x27000
   11c38:	ldr	pc, [ip, #1308]!	; 0x51c

00011c3c <statx@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #159744	; 0x27000
   11c44:	ldr	pc, [ip, #1300]!	; 0x514

00011c48 <__overflow@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #159744	; 0x27000
   11c50:	ldr	pc, [ip, #1292]!	; 0x50c

00011c54 <setlocale@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #159744	; 0x27000
   11c5c:	ldr	pc, [ip, #1284]!	; 0x504

00011c60 <sigemptyset@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #159744	; 0x27000
   11c68:	ldr	pc, [ip, #1276]!	; 0x4fc

00011c6c <wcswidth@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #159744	; 0x27000
   11c74:	ldr	pc, [ip, #1268]!	; 0x4f4

00011c78 <strrchr@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #159744	; 0x27000
   11c80:	ldr	pc, [ip, #1260]!	; 0x4ec

00011c84 <cap_get_file@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #159744	; 0x27000
   11c8c:	ldr	pc, [ip, #1252]!	; 0x4e4

00011c90 <nl_langinfo@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #159744	; 0x27000
   11c98:	ldr	pc, [ip, #1244]!	; 0x4dc

00011c9c <localeconv@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #159744	; 0x27000
   11ca4:	ldr	pc, [ip, #1236]!	; 0x4d4

00011ca8 <mbstowcs@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #159744	; 0x27000
   11cb0:	ldr	pc, [ip, #1228]!	; 0x4cc

00011cb4 <readdir64@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #159744	; 0x27000
   11cbc:	ldr	pc, [ip, #1220]!	; 0x4c4

00011cc0 <timegm@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #159744	; 0x27000
   11cc8:	ldr	pc, [ip, #1212]!	; 0x4bc

00011ccc <cap_free@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #159744	; 0x27000
   11cd4:	ldr	pc, [ip, #1204]!	; 0x4b4

00011cd8 <dirfd@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #159744	; 0x27000
   11ce0:	ldr	pc, [ip, #1196]!	; 0x4ac

00011ce4 <freecon@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #159744	; 0x27000
   11cec:	ldr	pc, [ip, #1188]!	; 0x4a4

00011cf0 <bindtextdomain@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #159744	; 0x27000
   11cf8:	ldr	pc, [ip, #1180]!	; 0x49c

00011cfc <__xstat64@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #159744	; 0x27000
   11d04:	ldr	pc, [ip, #1172]!	; 0x494

00011d08 <isatty@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #159744	; 0x27000
   11d10:	ldr	pc, [ip, #1164]!	; 0x48c

00011d14 <unsetenv@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #159744	; 0x27000
   11d1c:	ldr	pc, [ip, #1156]!	; 0x484

00011d20 <strncmp@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #159744	; 0x27000
   11d28:	ldr	pc, [ip, #1148]!	; 0x47c

00011d2c <abort@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #159744	; 0x27000
   11d34:	ldr	pc, [ip, #1140]!	; 0x474

00011d38 <closedir@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #159744	; 0x27000
   11d40:	ldr	pc, [ip, #1132]!	; 0x46c

00011d44 <getgrgid@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #159744	; 0x27000
   11d4c:	ldr	pc, [ip, #1124]!	; 0x464

00011d50 <getgrnam@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #159744	; 0x27000
   11d58:	ldr	pc, [ip, #1116]!	; 0x45c

00011d5c <__snprintf_chk@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #159744	; 0x27000
   11d64:	ldr	pc, [ip, #1108]!	; 0x454

00011d68 <strspn@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #159744	; 0x27000
   11d70:	ldr	pc, [ip, #1100]!	; 0x44c

00011d74 <__assert_fail@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #159744	; 0x27000
   11d7c:	ldr	pc, [ip, #1092]!	; 0x444

Disassembly of section .text:

00011d80 <_obstack_begin@@Base-0xda3c>:
   11d80:	mov	fp, #0
   11d84:	mov	lr, #0
   11d88:	pop	{r1}		; (ldr r1, [sp], #4)
   11d8c:	mov	r2, sp
   11d90:	push	{r2}		; (str r2, [sp, #-4]!)
   11d94:	push	{r0}		; (str r0, [sp, #-4]!)
   11d98:	ldr	ip, [pc, #16]	; 11db0 <__assert_fail@plt+0x3c>
   11d9c:	push	{ip}		; (str ip, [sp, #-4]!)
   11da0:	ldr	r0, [pc, #12]	; 11db4 <__assert_fail@plt+0x40>
   11da4:	ldr	r3, [pc, #12]	; 11db8 <__assert_fail@plt+0x44>
   11da8:	bl	11af8 <__libc_start_main@plt>
   11dac:	bl	11d2c <abort@plt>
   11db0:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   11db4:	muleq	r1, r4, ip
   11db8:	andeq	r3, r2, r0, lsr pc
   11dbc:	ldr	r3, [pc, #20]	; 11dd8 <__assert_fail@plt+0x64>
   11dc0:	ldr	r2, [pc, #20]	; 11ddc <__assert_fail@plt+0x68>
   11dc4:	add	r3, pc, r3
   11dc8:	ldr	r2, [r3, r2]
   11dcc:	cmp	r2, #0
   11dd0:	bxeq	lr
   11dd4:	b	11b34 <__gmon_start__@plt>
   11dd8:	andeq	r7, r2, r4, lsr r2
   11ddc:	andeq	r0, r0, r4, asr #3
   11de0:	ldr	r3, [pc, #28]	; 11e04 <__assert_fail@plt+0x90>
   11de4:	ldr	r0, [pc, #28]	; 11e08 <__assert_fail@plt+0x94>
   11de8:	sub	r3, r3, r0
   11dec:	cmp	r3, #6
   11df0:	bxls	lr
   11df4:	ldr	r3, [pc, #16]	; 11e0c <__assert_fail@plt+0x98>
   11df8:	cmp	r3, #0
   11dfc:	bxeq	lr
   11e00:	bx	r3
   11e04:	andeq	r9, r3, pc, lsl #6
   11e08:	andeq	r9, r3, ip, lsl #6
   11e0c:	andeq	r0, r0, r0
   11e10:	ldr	r1, [pc, #36]	; 11e3c <__assert_fail@plt+0xc8>
   11e14:	ldr	r0, [pc, #36]	; 11e40 <__assert_fail@plt+0xcc>
   11e18:	sub	r1, r1, r0
   11e1c:	asr	r1, r1, #2
   11e20:	add	r1, r1, r1, lsr #31
   11e24:	asrs	r1, r1, #1
   11e28:	bxeq	lr
   11e2c:	ldr	r3, [pc, #16]	; 11e44 <__assert_fail@plt+0xd0>
   11e30:	cmp	r3, #0
   11e34:	bxeq	lr
   11e38:	bx	r3
   11e3c:	andeq	r9, r3, ip, lsl #6
   11e40:	andeq	r9, r3, ip, lsl #6
   11e44:	andeq	r0, r0, r0
   11e48:	push	{r4, lr}
   11e4c:	ldr	r4, [pc, #24]	; 11e6c <__assert_fail@plt+0xf8>
   11e50:	ldrb	r3, [r4]
   11e54:	cmp	r3, #0
   11e58:	popne	{r4, pc}
   11e5c:	bl	11de0 <__assert_fail@plt+0x6c>
   11e60:	mov	r3, #1
   11e64:	strb	r3, [r4]
   11e68:	pop	{r4, pc}
   11e6c:	andeq	r9, r3, ip, lsr #6
   11e70:	ldr	r0, [pc, #40]	; 11ea0 <__assert_fail@plt+0x12c>
   11e74:	ldr	r3, [r0]
   11e78:	cmp	r3, #0
   11e7c:	bne	11e84 <__assert_fail@plt+0x110>
   11e80:	b	11e10 <__assert_fail@plt+0x9c>
   11e84:	ldr	r3, [pc, #24]	; 11ea4 <__assert_fail@plt+0x130>
   11e88:	cmp	r3, #0
   11e8c:	beq	11e80 <__assert_fail@plt+0x10c>
   11e90:	push	{r4, lr}
   11e94:	blx	r3
   11e98:	pop	{r4, lr}
   11e9c:	b	11e10 <__assert_fail@plt+0x9c>
   11ea0:	andeq	r8, r3, r4, lsl #30
   11ea4:	andeq	r0, r0, r0
   11ea8:	push	{r4, lr}
   11eac:	mov	r2, r1
   11eb0:	mov	r3, #0
   11eb4:	ldrd	r0, [r0]
   11eb8:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   11ebc:	mov	r0, r2
   11ec0:	pop	{r4, pc}
   11ec4:	push	{r4, r5}
   11ec8:	ldrd	r4, [r0]
   11ecc:	ldrd	r2, [r1]
   11ed0:	cmp	r5, r3
   11ed4:	cmpeq	r4, r2
   11ed8:	movne	r0, #0
   11edc:	beq	11ee8 <__assert_fail@plt+0x174>
   11ee0:	pop	{r4, r5}
   11ee4:	bx	lr
   11ee8:	ldrd	r4, [r0, #8]
   11eec:	ldrd	r2, [r1, #8]
   11ef0:	cmp	r5, r3
   11ef4:	cmpeq	r4, r2
   11ef8:	moveq	r0, #1
   11efc:	movne	r0, #0
   11f00:	b	11ee0 <__assert_fail@plt+0x16c>
   11f04:	ldr	r3, [pc, #16]	; 11f1c <__assert_fail@plt+0x1a8>
   11f08:	ldr	r3, [r3]
   11f0c:	cmp	r3, #0
   11f10:	ldreq	r3, [pc, #4]	; 11f1c <__assert_fail@plt+0x1a8>
   11f14:	streq	r0, [r3]
   11f18:	bx	lr
   11f1c:	andeq	r9, r3, r0, lsr r3
   11f20:	ldr	r3, [pc, #24]	; 11f40 <__assert_fail@plt+0x1cc>
   11f24:	ldr	r3, [r3]
   11f28:	cmp	r3, #0
   11f2c:	ldreq	r2, [pc, #12]	; 11f40 <__assert_fail@plt+0x1cc>
   11f30:	ldreq	r3, [r2, #4]
   11f34:	addeq	r3, r3, #1
   11f38:	streq	r3, [r2, #4]
   11f3c:	bx	lr
   11f40:	andeq	r9, r3, r0, lsr r3
   11f44:	sub	r3, r0, #22
   11f48:	bic	r3, r3, #16
   11f4c:	cmp	r3, #0
   11f50:	cmpne	r0, #95	; 0x5f
   11f54:	moveq	r0, #1
   11f58:	movne	r0, #0
   11f5c:	bx	lr
   11f60:	push	{r4, r5, r6, lr}
   11f64:	mov	lr, r0
   11f68:	ldr	r0, [r1, #104]	; 0x68
   11f6c:	ldr	r5, [r1, #108]	; 0x6c
   11f70:	ldr	r3, [lr, #104]	; 0x68
   11f74:	ldr	r4, [lr, #108]	; 0x6c
   11f78:	cmp	r0, r3
   11f7c:	movgt	ip, #1
   11f80:	movle	ip, #0
   11f84:	movlt	r0, #1
   11f88:	movge	r0, #0
   11f8c:	sub	ip, ip, r0
   11f90:	cmp	r5, r4
   11f94:	movgt	r3, #1
   11f98:	movle	r3, #0
   11f9c:	movlt	r0, #1
   11fa0:	movge	r0, #0
   11fa4:	sub	r3, r3, r0
   11fa8:	adds	r0, r3, ip, lsl #1
   11fac:	popne	{r4, r5, r6, pc}
   11fb0:	ldr	r1, [r1]
   11fb4:	ldr	r0, [lr]
   11fb8:	blx	r2
   11fbc:	pop	{r4, r5, r6, pc}
   11fc0:	push	{r4, r5, r6, lr}
   11fc4:	mov	lr, r0
   11fc8:	ldr	r0, [r1, #96]	; 0x60
   11fcc:	ldr	r5, [r1, #100]	; 0x64
   11fd0:	ldr	r3, [lr, #96]	; 0x60
   11fd4:	ldr	r4, [lr, #100]	; 0x64
   11fd8:	cmp	r0, r3
   11fdc:	movgt	ip, #1
   11fe0:	movle	ip, #0
   11fe4:	movlt	r0, #1
   11fe8:	movge	r0, #0
   11fec:	sub	ip, ip, r0
   11ff0:	cmp	r5, r4
   11ff4:	movgt	r3, #1
   11ff8:	movle	r3, #0
   11ffc:	movlt	r0, #1
   12000:	movge	r0, #0
   12004:	sub	r3, r3, r0
   12008:	adds	r0, r3, ip, lsl #1
   1200c:	popne	{r4, r5, r6, pc}
   12010:	ldr	r1, [r1]
   12014:	ldr	r0, [lr]
   12018:	blx	r2
   1201c:	pop	{r4, r5, r6, pc}
   12020:	push	{r4, r5, r6, lr}
   12024:	mov	lr, r0
   12028:	ldr	r0, [r1, #88]	; 0x58
   1202c:	ldr	r5, [r1, #92]	; 0x5c
   12030:	ldr	r3, [lr, #88]	; 0x58
   12034:	ldr	r4, [lr, #92]	; 0x5c
   12038:	cmp	r0, r3
   1203c:	movgt	ip, #1
   12040:	movle	ip, #0
   12044:	movlt	r0, #1
   12048:	movge	r0, #0
   1204c:	sub	ip, ip, r0
   12050:	cmp	r5, r4
   12054:	movgt	r3, #1
   12058:	movle	r3, #0
   1205c:	movlt	r0, #1
   12060:	movge	r0, #0
   12064:	sub	r3, r3, r0
   12068:	adds	r0, r3, ip, lsl #1
   1206c:	popne	{r4, r5, r6, pc}
   12070:	ldr	r1, [r1]
   12074:	ldr	r0, [lr]
   12078:	blx	r2
   1207c:	pop	{r4, r5, r6, pc}
   12080:	push	{r4, r5, r6, r7, r8, lr}
   12084:	ldrd	r4, [r1, #64]	; 0x40
   12088:	ldrd	r6, [r0, #64]	; 0x40
   1208c:	cmp	r4, r6
   12090:	sbcs	r3, r5, r7
   12094:	blt	120bc <__assert_fail@plt+0x348>
   12098:	cmp	r6, r4
   1209c:	sbcs	r3, r7, r5
   120a0:	bge	120ac <__assert_fail@plt+0x338>
   120a4:	mov	r0, #1
   120a8:	pop	{r4, r5, r6, r7, r8, pc}
   120ac:	ldr	r1, [r1]
   120b0:	ldr	r0, [r0]
   120b4:	blx	r2
   120b8:	pop	{r4, r5, r6, r7, r8, pc}
   120bc:	mvn	r0, #0
   120c0:	pop	{r4, r5, r6, r7, r8, pc}
   120c4:	push	{r4, lr}
   120c8:	ldr	r2, [pc, #4]	; 120d4 <__assert_fail@plt+0x360>
   120cc:	bl	11f60 <__assert_fail@plt+0x1ec>
   120d0:	pop	{r4, pc}
   120d4:	andeq	r3, r1, r0, asr #3
   120d8:	push	{r4, lr}
   120dc:	ldr	r2, [pc, #4]	; 120e8 <__assert_fail@plt+0x374>
   120e0:	bl	11f60 <__assert_fail@plt+0x1ec>
   120e4:	pop	{r4, pc}
   120e8:	andeq	r1, r1, r0, lsr #17
   120ec:	push	{r4, lr}
   120f0:	mov	r3, r1
   120f4:	ldr	r2, [pc, #12]	; 12108 <__assert_fail@plt+0x394>
   120f8:	mov	r1, r0
   120fc:	mov	r0, r3
   12100:	bl	11f60 <__assert_fail@plt+0x1ec>
   12104:	pop	{r4, pc}
   12108:	andeq	r3, r1, r0, asr #3
   1210c:	push	{r4, lr}
   12110:	mov	r3, r1
   12114:	ldr	r2, [pc, #12]	; 12128 <__assert_fail@plt+0x3b4>
   12118:	mov	r1, r0
   1211c:	mov	r0, r3
   12120:	bl	11f60 <__assert_fail@plt+0x1ec>
   12124:	pop	{r4, pc}
   12128:	andeq	r1, r1, r0, lsr #17
   1212c:	push	{r4, lr}
   12130:	ldr	r2, [pc, #4]	; 1213c <__assert_fail@plt+0x3c8>
   12134:	bl	11fc0 <__assert_fail@plt+0x24c>
   12138:	pop	{r4, pc}
   1213c:	andeq	r3, r1, r0, asr #3
   12140:	push	{r4, lr}
   12144:	ldr	r2, [pc, #4]	; 12150 <__assert_fail@plt+0x3dc>
   12148:	bl	11fc0 <__assert_fail@plt+0x24c>
   1214c:	pop	{r4, pc}
   12150:	andeq	r1, r1, r0, lsr #17
   12154:	push	{r4, lr}
   12158:	mov	r3, r1
   1215c:	ldr	r2, [pc, #12]	; 12170 <__assert_fail@plt+0x3fc>
   12160:	mov	r1, r0
   12164:	mov	r0, r3
   12168:	bl	11fc0 <__assert_fail@plt+0x24c>
   1216c:	pop	{r4, pc}
   12170:	andeq	r3, r1, r0, asr #3
   12174:	push	{r4, lr}
   12178:	mov	r3, r1
   1217c:	ldr	r2, [pc, #12]	; 12190 <__assert_fail@plt+0x41c>
   12180:	mov	r1, r0
   12184:	mov	r0, r3
   12188:	bl	11fc0 <__assert_fail@plt+0x24c>
   1218c:	pop	{r4, pc}
   12190:	andeq	r1, r1, r0, lsr #17
   12194:	push	{r4, lr}
   12198:	ldr	r2, [pc, #4]	; 121a4 <__assert_fail@plt+0x430>
   1219c:	bl	12020 <__assert_fail@plt+0x2ac>
   121a0:	pop	{r4, pc}
   121a4:	andeq	r3, r1, r0, asr #3
   121a8:	push	{r4, lr}
   121ac:	ldr	r2, [pc, #4]	; 121b8 <__assert_fail@plt+0x444>
   121b0:	bl	12020 <__assert_fail@plt+0x2ac>
   121b4:	pop	{r4, pc}
   121b8:	andeq	r1, r1, r0, lsr #17
   121bc:	push	{r4, lr}
   121c0:	mov	r3, r1
   121c4:	ldr	r2, [pc, #12]	; 121d8 <__assert_fail@plt+0x464>
   121c8:	mov	r1, r0
   121cc:	mov	r0, r3
   121d0:	bl	12020 <__assert_fail@plt+0x2ac>
   121d4:	pop	{r4, pc}
   121d8:	andeq	r3, r1, r0, asr #3
   121dc:	push	{r4, lr}
   121e0:	mov	r3, r1
   121e4:	ldr	r2, [pc, #12]	; 121f8 <__assert_fail@plt+0x484>
   121e8:	mov	r1, r0
   121ec:	mov	r0, r3
   121f0:	bl	12020 <__assert_fail@plt+0x2ac>
   121f4:	pop	{r4, pc}
   121f8:	andeq	r1, r1, r0, lsr #17
   121fc:	push	{r4, lr}
   12200:	ldr	r2, [pc, #4]	; 1220c <__assert_fail@plt+0x498>
   12204:	bl	12080 <__assert_fail@plt+0x30c>
   12208:	pop	{r4, pc}
   1220c:	andeq	r3, r1, r0, asr #3
   12210:	push	{r4, lr}
   12214:	ldr	r2, [pc, #4]	; 12220 <__assert_fail@plt+0x4ac>
   12218:	bl	12080 <__assert_fail@plt+0x30c>
   1221c:	pop	{r4, pc}
   12220:	andeq	r1, r1, r0, lsr #17
   12224:	push	{r4, lr}
   12228:	mov	r3, r1
   1222c:	ldr	r2, [pc, #12]	; 12240 <__assert_fail@plt+0x4cc>
   12230:	mov	r1, r0
   12234:	mov	r0, r3
   12238:	bl	12080 <__assert_fail@plt+0x30c>
   1223c:	pop	{r4, pc}
   12240:	andeq	r3, r1, r0, asr #3
   12244:	push	{r4, lr}
   12248:	mov	r3, r1
   1224c:	ldr	r2, [pc, #12]	; 12260 <__assert_fail@plt+0x4ec>
   12250:	mov	r1, r0
   12254:	mov	r0, r3
   12258:	bl	12080 <__assert_fail@plt+0x30c>
   1225c:	pop	{r4, pc}
   12260:	andeq	r1, r1, r0, lsr #17
   12264:	push	{r4, lr}
   12268:	ldr	r1, [r1]
   1226c:	ldr	r0, [r0]
   12270:	bl	131c0 <__assert_fail@plt+0x144c>
   12274:	pop	{r4, pc}
   12278:	ldr	r3, [pc, #44]	; 122ac <__assert_fail@plt+0x538>
   1227c:	ldr	r0, [r3, #8]
   12280:	cmp	r0, #0
   12284:	bxeq	lr
   12288:	ldr	r1, [r3, #12]
   1228c:	ldr	r2, [r3, #16]
   12290:	mov	r3, r1
   12294:	add	r1, r1, r0, lsl #2
   12298:	str	r2, [r3], #4
   1229c:	add	r2, r2, #152	; 0x98
   122a0:	cmp	r3, r1
   122a4:	bne	12298 <__assert_fail@plt+0x524>
   122a8:	bx	lr
   122ac:	andeq	r9, r3, r0, lsr r3
   122b0:	cmp	r0, #0
   122b4:	beq	122dc <__assert_fail@plt+0x568>
   122b8:	and	r3, r1, #61440	; 0xf000
   122bc:	cmp	r3, #32768	; 0x8000
   122c0:	bne	1230c <__assert_fail@plt+0x598>
   122c4:	ldr	r3, [pc, #248]	; 123c4 <__assert_fail@plt+0x650>
   122c8:	ldr	r3, [r3, #20]
   122cc:	cmp	r3, #3
   122d0:	beq	122f8 <__assert_fail@plt+0x584>
   122d4:	mov	r0, #0
   122d8:	bx	lr
   122dc:	cmp	r2, #5
   122e0:	beq	123b4 <__assert_fail@plt+0x640>
   122e4:	cmp	r2, #9
   122e8:	cmpne	r2, #3
   122ec:	moveq	r3, #1
   122f0:	movne	r3, #0
   122f4:	b	1231c <__assert_fail@plt+0x5a8>
   122f8:	and	r0, r1, #73	; 0x49
   122fc:	cmp	r0, #0
   12300:	movne	r0, #42	; 0x2a
   12304:	moveq	r0, #0
   12308:	bx	lr
   1230c:	and	r3, r1, #61440	; 0xf000
   12310:	cmp	r3, #16384	; 0x4000
   12314:	movne	r3, #0
   12318:	moveq	r3, #1
   1231c:	cmp	r3, #0
   12320:	beq	1232c <__assert_fail@plt+0x5b8>
   12324:	mov	r0, #47	; 0x2f
   12328:	bx	lr
   1232c:	ldr	r3, [pc, #144]	; 123c4 <__assert_fail@plt+0x650>
   12330:	ldr	r3, [r3, #20]
   12334:	cmp	r3, #1
   12338:	beq	123bc <__assert_fail@plt+0x648>
   1233c:	cmp	r0, #0
   12340:	beq	12358 <__assert_fail@plt+0x5e4>
   12344:	and	r1, r1, #61440	; 0xf000
   12348:	cmp	r1, #40960	; 0xa000
   1234c:	bne	12368 <__assert_fail@plt+0x5f4>
   12350:	mov	r0, #64	; 0x40
   12354:	bx	lr
   12358:	cmp	r2, #6
   1235c:	bne	12378 <__assert_fail@plt+0x604>
   12360:	mov	r0, #64	; 0x40
   12364:	bx	lr
   12368:	cmp	r1, #4096	; 0x1000
   1236c:	bne	12388 <__assert_fail@plt+0x614>
   12370:	mov	r0, #124	; 0x7c
   12374:	bx	lr
   12378:	cmp	r2, #1
   1237c:	bne	123a4 <__assert_fail@plt+0x630>
   12380:	mov	r0, #124	; 0x7c
   12384:	bx	lr
   12388:	cmp	r1, #49152	; 0xc000
   1238c:	movne	r1, #0
   12390:	moveq	r1, #1
   12394:	cmp	r1, #0
   12398:	movne	r0, #61	; 0x3d
   1239c:	moveq	r0, #0
   123a0:	bx	lr
   123a4:	cmp	r2, #7
   123a8:	movne	r1, #0
   123ac:	moveq	r1, #1
   123b0:	b	12394 <__assert_fail@plt+0x620>
   123b4:	mov	r0, #0
   123b8:	bx	lr
   123bc:	mov	r0, #0
   123c0:	bx	lr
   123c4:	andeq	r9, r3, r0, lsr r3
   123c8:	push	{r4, lr}
   123cc:	bl	1b388 <__assert_fail@plt+0x9614>
   123d0:	pop	{r4, pc}
   123d4:	push	{r4, lr}
   123d8:	mov	r4, r0
   123dc:	mov	r0, #8
   123e0:	bl	2227c <_obstack_memory_used@@Base+0x28a8>
   123e4:	str	r4, [r0]
   123e8:	ldr	r3, [pc, #12]	; 123fc <__assert_fail@plt+0x688>
   123ec:	ldr	r2, [r3, #24]
   123f0:	str	r2, [r0, #4]
   123f4:	str	r0, [r3, #24]
   123f8:	pop	{r4, pc}
   123fc:	andeq	r9, r3, r0, lsr r3
   12400:	push	{lr}		; (str lr, [sp, #-4]!)
   12404:	sub	sp, sp, #20
   12408:	ldr	r3, [pc, #72]	; 12458 <__assert_fail@plt+0x6e4>
   1240c:	str	r3, [sp]
   12410:	add	r3, sp, #8
   12414:	mov	r2, #0
   12418:	mov	r1, r2
   1241c:	bl	22c64 <_obstack_memory_used@@Base+0x3290>
   12420:	cmp	r0, #0
   12424:	beq	1243c <__assert_fail@plt+0x6c8>
   12428:	cmp	r0, #1
   1242c:	moveq	r0, #0
   12430:	mvnne	r0, #0
   12434:	add	sp, sp, #20
   12438:	pop	{pc}		; (ldr pc, [sp], #4)
   1243c:	ldrd	r0, [sp, #8]
   12440:	mvn	r2, #-2147483648	; 0x80000000
   12444:	mov	r3, #0
   12448:	cmp	r1, r3
   1244c:	cmpeq	r0, r2
   12450:	movhi	r0, #0
   12454:	b	12434 <__assert_fail@plt+0x6c0>
   12458:	andeq	r8, r2, ip, ror #1
   1245c:	ldr	r3, [pc, #96]	; 124c4 <__assert_fail@plt+0x750>
   12460:	ldr	r3, [r3, r0, lsl #3]
   12464:	cmp	r3, #0
   12468:	beq	124bc <__assert_fail@plt+0x748>
   1246c:	ldr	r2, [pc, #80]	; 124c4 <__assert_fail@plt+0x750>
   12470:	add	r0, r2, r0, lsl #3
   12474:	ldr	r0, [r0, #4]
   12478:	cmp	r3, #1
   1247c:	beq	12490 <__assert_fail@plt+0x71c>
   12480:	cmp	r3, #2
   12484:	beq	124a0 <__assert_fail@plt+0x72c>
   12488:	mov	r0, #1
   1248c:	bx	lr
   12490:	ldrb	r0, [r0]
   12494:	subs	r0, r0, #48	; 0x30
   12498:	movne	r0, #1
   1249c:	bx	lr
   124a0:	push	{r4, lr}
   124a4:	mov	r2, #2
   124a8:	ldr	r1, [pc, #24]	; 124c8 <__assert_fail@plt+0x754>
   124ac:	bl	11d20 <strncmp@plt>
   124b0:	adds	r0, r0, #0
   124b4:	movne	r0, #1
   124b8:	pop	{r4, pc}
   124bc:	mov	r0, #0
   124c0:	bx	lr
   124c4:	ldrdeq	r9, [r3], -r0
   124c8:	strdeq	r5, [r2], -r4
   124cc:	ldr	r3, [pc, #68]	; 12518 <__assert_fail@plt+0x7a4>
   124d0:	ldrsb	r3, [r3, #192]	; 0xc0
   124d4:	cmp	r3, #0
   124d8:	blt	124f0 <__assert_fail@plt+0x77c>
   124dc:	ldr	r3, [pc, #52]	; 12518 <__assert_fail@plt+0x7a4>
   124e0:	ldrsb	r0, [r3, #192]	; 0xc0
   124e4:	adds	r0, r0, #0
   124e8:	movne	r0, #1
   124ec:	bx	lr
   124f0:	push	{r4, lr}
   124f4:	mov	r0, #1
   124f8:	bl	11d08 <isatty@plt>
   124fc:	ldr	r3, [pc, #20]	; 12518 <__assert_fail@plt+0x7a4>
   12500:	strb	r0, [r3, #192]	; 0xc0
   12504:	ldr	r3, [pc, #12]	; 12518 <__assert_fail@plt+0x7a4>
   12508:	ldrsb	r0, [r3, #192]	; 0xc0
   1250c:	adds	r0, r0, #0
   12510:	movne	r0, #1
   12514:	pop	{r4, pc}
   12518:	ldrdeq	r9, [r3], -r0
   1251c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12520:	sub	sp, sp, #1568	; 0x620
   12524:	sub	sp, sp, #12
   12528:	mov	r1, #0
   1252c:	ldr	lr, [pc, #512]	; 12734 <__assert_fail@plt+0x9c0>
   12530:	mov	r4, r1
   12534:	add	ip, sp, #1568	; 0x620
   12538:	b	1258c <__assert_fail@plt+0x818>
   1253c:	add	r3, r2, #1
   12540:	add	r2, r3, #1
   12544:	ldrb	r3, [r3, #1]
   12548:	cmp	r3, #0
   1254c:	beq	12578 <__assert_fail@plt+0x804>
   12550:	cmp	r3, #37	; 0x25
   12554:	movne	r3, r2
   12558:	bne	12540 <__assert_fail@plt+0x7cc>
   1255c:	ldrb	r3, [r2, #1]
   12560:	cmp	r3, #37	; 0x25
   12564:	beq	1253c <__assert_fail@plt+0x7c8>
   12568:	cmp	r3, #98	; 0x62
   1256c:	beq	1257c <__assert_fail@plt+0x808>
   12570:	mov	r3, r2
   12574:	b	12540 <__assert_fail@plt+0x7cc>
   12578:	mov	r2, r4
   1257c:	str	r2, [ip, r0, lsl #2]
   12580:	add	r1, r1, #1
   12584:	cmp	r1, #2
   12588:	beq	125a8 <__assert_fail@plt+0x834>
   1258c:	mov	r0, r1
   12590:	ldr	r2, [lr, r1, lsl #2]
   12594:	ldrb	r3, [r2]
   12598:	cmp	r3, #0
   1259c:	bne	12550 <__assert_fail@plt+0x7dc>
   125a0:	mov	r2, r4
   125a4:	b	1257c <__assert_fail@plt+0x808>
   125a8:	ldr	r3, [sp, #1568]	; 0x620
   125ac:	cmp	r3, #0
   125b0:	movne	r8, #12
   125b4:	beq	125c8 <__assert_fail@plt+0x854>
   125b8:	add	sl, sp, #28
   125bc:	mov	r9, #0
   125c0:	ldr	fp, [pc, #368]	; 12738 <__assert_fail@plt+0x9c4>
   125c4:	b	125e0 <__assert_fail@plt+0x86c>
   125c8:	ldr	r3, [sp, #1572]	; 0x624
   125cc:	cmp	r3, #0
   125d0:	movne	r8, #12
   125d4:	bne	125b8 <__assert_fail@plt+0x844>
   125d8:	b	12714 <__assert_fail@plt+0x9a0>
   125dc:	mov	r8, r5
   125e0:	add	r6, sp, #32
   125e4:	ldr	r4, [pc, #336]	; 1273c <__assert_fail@plt+0x9c8>
   125e8:	mov	r5, #0
   125ec:	str	r8, [sp, #28]
   125f0:	mov	r0, r4
   125f4:	bl	11c90 <nl_langinfo@plt>
   125f8:	mov	r7, r0
   125fc:	mov	r1, #37	; 0x25
   12600:	bl	11ba0 <strchr@plt>
   12604:	cmp	r0, #0
   12608:	bne	12714 <__assert_fail@plt+0x9a0>
   1260c:	bl	11b58 <__ctype_b_loc@plt>
   12610:	str	r9, [sp, #4]
   12614:	ldrb	r3, [r7]
   12618:	ldr	r2, [r0]
   1261c:	lsl	r3, r3, #1
   12620:	ldrh	r3, [r2, r3]
   12624:	lsr	r3, r3, #11
   12628:	and	r3, r3, #1
   1262c:	str	r3, [sp]
   12630:	mov	r3, sl
   12634:	mov	r2, #128	; 0x80
   12638:	mov	r1, r6
   1263c:	mov	r0, r7
   12640:	bl	1d458 <__assert_fail@plt+0xb6e4>
   12644:	cmp	r0, #127	; 0x7f
   12648:	bhi	12714 <__assert_fail@plt+0x9a0>
   1264c:	ldr	r3, [sp, #28]
   12650:	cmp	r5, r3
   12654:	movcc	r5, r3
   12658:	add	r4, r4, #1
   1265c:	add	r6, r6, #128	; 0x80
   12660:	cmp	r4, fp
   12664:	bne	125ec <__assert_fail@plt+0x878>
   12668:	cmp	r8, r5
   1266c:	bhi	125dc <__assert_fail@plt+0x868>
   12670:	mov	fp, #0
   12674:	ldr	r9, [pc, #196]	; 12740 <__assert_fail@plt+0x9cc>
   12678:	add	r8, sp, #1568	; 0x620
   1267c:	ldr	sl, [pc, #192]	; 12744 <__assert_fail@plt+0x9d0>
   12680:	mov	r7, fp
   12684:	ldr	r3, [pc, #168]	; 12734 <__assert_fail@plt+0x9c0>
   12688:	ldr	r5, [r3, fp, lsl #2]
   1268c:	mov	r6, #1536	; 0x600
   12690:	mul	r6, r6, fp
   12694:	mov	r4, #0
   12698:	add	r0, r6, r4
   1269c:	add	r0, r9, r0
   126a0:	ldr	r3, [r8, r7, lsl #2]
   126a4:	cmp	r3, #0
   126a8:	beq	12720 <__assert_fail@plt+0x9ac>
   126ac:	sub	r2, r3, r5
   126b0:	cmp	r2, #128	; 0x80
   126b4:	bgt	12714 <__assert_fail@plt+0x9a0>
   126b8:	add	r3, r3, #2
   126bc:	str	r3, [sp, #16]
   126c0:	add	r3, sp, #32
   126c4:	add	r3, r3, r4
   126c8:	str	r3, [sp, #12]
   126cc:	str	r5, [sp, #8]
   126d0:	str	r2, [sp, #4]
   126d4:	str	sl, [sp]
   126d8:	mvn	r3, #0
   126dc:	mov	r2, #1
   126e0:	mov	r1, #128	; 0x80
   126e4:	bl	11d5c <__snprintf_chk@plt>
   126e8:	cmp	r0, #127	; 0x7f
   126ec:	bhi	12714 <__assert_fail@plt+0x9a0>
   126f0:	add	r4, r4, #128	; 0x80
   126f4:	cmp	r4, #1536	; 0x600
   126f8:	bne	12698 <__assert_fail@plt+0x924>
   126fc:	add	fp, fp, #1
   12700:	cmp	fp, #2
   12704:	bne	12680 <__assert_fail@plt+0x90c>
   12708:	mov	r2, #1
   1270c:	ldr	r3, [pc, #52]	; 12748 <__assert_fail@plt+0x9d4>
   12710:	strb	r2, [r3, #3100]	; 0xc1c
   12714:	add	sp, sp, #1568	; 0x620
   12718:	add	sp, sp, #12
   1271c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12720:	mov	r3, r5
   12724:	ldr	r2, [pc, #32]	; 1274c <__assert_fail@plt+0x9d8>
   12728:	mov	r1, #128	; 0x80
   1272c:	bl	11bd0 <snprintf@plt>
   12730:	b	126e8 <__assert_fail@plt+0x974>
   12734:	muleq	r3, r4, r2
   12738:	andeq	r0, r2, sl, lsl r0
   1273c:	andeq	r0, r2, lr
   12740:	andeq	r9, r3, ip, asr #6
   12744:	strdeq	r5, [r2], -r8
   12748:	andeq	r9, r3, r0, lsr r3
   1274c:	strdeq	r7, [r2], -r4
   12750:	push	{r4, r5, r6, r7, r8, lr}
   12754:	mov	r5, r0
   12758:	mov	r6, r1
   1275c:	mov	r7, r2
   12760:	mov	r0, #16
   12764:	bl	2227c <_obstack_memory_used@@Base+0x28a8>
   12768:	mov	r4, r0
   1276c:	cmp	r6, #0
   12770:	moveq	r0, #0
   12774:	beq	12780 <__assert_fail@plt+0xa0c>
   12778:	mov	r0, r6
   1277c:	bl	22804 <_obstack_memory_used@@Base+0x2e30>
   12780:	str	r0, [r4, #4]
   12784:	cmp	r5, #0
   12788:	moveq	r0, #0
   1278c:	beq	12798 <__assert_fail@plt+0xa24>
   12790:	mov	r0, r5
   12794:	bl	22804 <_obstack_memory_used@@Base+0x2e30>
   12798:	str	r0, [r4]
   1279c:	strb	r7, [r4, #8]
   127a0:	ldr	r3, [pc, #12]	; 127b4 <__assert_fail@plt+0xa40>
   127a4:	ldr	r2, [r3, #3104]	; 0xc20
   127a8:	str	r2, [r4, #12]
   127ac:	str	r4, [r3, #3104]	; 0xc20
   127b0:	pop	{r4, r5, r6, r7, r8, pc}
   127b4:	andeq	r9, r3, r0, lsr r3
   127b8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127bc:	ldr	r4, [r1]
   127c0:	ldr	r5, [r0]
   127c4:	mov	ip, #0
   127c8:	mov	r6, ip
   127cc:	mov	lr, ip
   127d0:	mov	r9, #127	; 0x7f
   127d4:	mov	r8, ip
   127d8:	mov	sl, #6
   127dc:	cmp	ip, #4
   127e0:	ldrls	pc, [pc, ip, lsl #2]
   127e4:	b	12c98 <__assert_fail@plt+0xf24>
   127e8:	strdeq	r2, [r1], -ip
   127ec:	andeq	r2, r1, r4, ror #16
   127f0:			; <UNDEFINED> instruction: 0x00012abc
   127f4:	strdeq	r2, [r1], -r0
   127f8:	andeq	r2, r1, r0, lsr ip
   127fc:	ldrb	r7, [r4]
   12800:	cmp	r7, #61	; 0x3d
   12804:	beq	12854 <__assert_fail@plt+0xae0>
   12808:	bls	12830 <__assert_fail@plt+0xabc>
   1280c:	cmp	r7, #92	; 0x5c
   12810:	addeq	r4, r4, #1
   12814:	moveq	ip, #1
   12818:	beq	127dc <__assert_fail@plt+0xa68>
   1281c:	cmp	r7, #94	; 0x5e
   12820:	addeq	r4, r4, #1
   12824:	moveq	ip, #4
   12828:	beq	127dc <__assert_fail@plt+0xa68>
   1282c:	b	12840 <__assert_fail@plt+0xacc>
   12830:	cmp	r7, #0
   12834:	beq	12c9c <__assert_fail@plt+0xf28>
   12838:	cmp	r7, #58	; 0x3a
   1283c:	beq	12c9c <__assert_fail@plt+0xf28>
   12840:	add	r4, r4, #1
   12844:	strb	r7, [r5]
   12848:	add	r6, r6, #1
   1284c:	add	r5, r5, #1
   12850:	b	127dc <__assert_fail@plt+0xa68>
   12854:	cmp	r2, #0
   12858:	beq	12840 <__assert_fail@plt+0xacc>
   1285c:	mov	ip, #5
   12860:	b	12c6c <__assert_fail@plt+0xef8>
   12864:	ldrb	ip, [r4]
   12868:	cmp	ip, #120	; 0x78
   1286c:	ldrls	pc, [pc, ip, lsl #2]
   12870:	b	12aa8 <__assert_fail@plt+0xd34>
   12874:	ldrdeq	r2, [r1], -r0
   12878:	andeq	r2, r1, r8, lsr #21
   1287c:	andeq	r2, r1, r8, lsr #21
   12880:	andeq	r2, r1, r8, lsr #21
   12884:	andeq	r2, r1, r8, lsr #21
   12888:	andeq	r2, r1, r8, lsr #21
   1288c:	andeq	r2, r1, r8, lsr #21
   12890:	andeq	r2, r1, r8, lsr #21
   12894:	andeq	r2, r1, r8, lsr #21
   12898:	andeq	r2, r1, r8, lsr #21
   1289c:	andeq	r2, r1, r8, lsr #21
   128a0:	andeq	r2, r1, r8, lsr #21
   128a4:	andeq	r2, r1, r8, lsr #21
   128a8:	andeq	r2, r1, r8, lsr #21
   128ac:	andeq	r2, r1, r8, lsr #21
   128b0:	andeq	r2, r1, r8, lsr #21
   128b4:	andeq	r2, r1, r8, lsr #21
   128b8:	andeq	r2, r1, r8, lsr #21
   128bc:	andeq	r2, r1, r8, lsr #21
   128c0:	andeq	r2, r1, r8, lsr #21
   128c4:	andeq	r2, r1, r8, lsr #21
   128c8:	andeq	r2, r1, r8, lsr #21
   128cc:	andeq	r2, r1, r8, lsr #21
   128d0:	andeq	r2, r1, r8, lsr #21
   128d4:	andeq	r2, r1, r8, lsr #21
   128d8:	andeq	r2, r1, r8, lsr #21
   128dc:	andeq	r2, r1, r8, lsr #21
   128e0:	andeq	r2, r1, r8, lsr #21
   128e4:	andeq	r2, r1, r8, lsr #21
   128e8:	andeq	r2, r1, r8, lsr #21
   128ec:	andeq	r2, r1, r8, lsr #21
   128f0:	andeq	r2, r1, r8, lsr #21
   128f4:	andeq	r2, r1, r8, lsr #21
   128f8:	andeq	r2, r1, r8, lsr #21
   128fc:	andeq	r2, r1, r8, lsr #21
   12900:	andeq	r2, r1, r8, lsr #21
   12904:	andeq	r2, r1, r8, lsr #21
   12908:	andeq	r2, r1, r8, lsr #21
   1290c:	andeq	r2, r1, r8, lsr #21
   12910:	andeq	r2, r1, r8, lsr #21
   12914:	andeq	r2, r1, r8, lsr #21
   12918:	andeq	r2, r1, r8, lsr #21
   1291c:	andeq	r2, r1, r8, lsr #21
   12920:	andeq	r2, r1, r8, lsr #21
   12924:	andeq	r2, r1, r8, lsr #21
   12928:	andeq	r2, r1, r8, lsr #21
   1292c:	andeq	r2, r1, r8, lsr #21
   12930:	andeq	r2, r1, r8, lsr #21
   12934:	andeq	r2, r1, r0, ror #20
   12938:	andeq	r2, r1, r0, ror #20
   1293c:	andeq	r2, r1, r0, ror #20
   12940:	andeq	r2, r1, r0, ror #20
   12944:	andeq	r2, r1, r0, ror #20
   12948:	andeq	r2, r1, r0, ror #20
   1294c:	andeq	r2, r1, r0, ror #20
   12950:	andeq	r2, r1, r0, ror #20
   12954:	andeq	r2, r1, r8, lsr #21
   12958:	andeq	r2, r1, r8, lsr #21
   1295c:	andeq	r2, r1, r8, lsr #21
   12960:	andeq	r2, r1, r8, lsr #21
   12964:	andeq	r2, r1, r8, lsr #21
   12968:	andeq	r2, r1, r8, lsr #21
   1296c:	andeq	r2, r1, r8, lsr #21
   12970:	muleq	r1, r8, sl
   12974:	andeq	r2, r1, r8, lsr #21
   12978:	andeq	r2, r1, r8, lsr #21
   1297c:	andeq	r2, r1, r8, lsr #21
   12980:	andeq	r2, r1, r8, lsr #21
   12984:	andeq	r2, r1, r8, lsr #21
   12988:	andeq	r2, r1, r8, lsr #21
   1298c:	andeq	r2, r1, r8, lsr #21
   12990:	andeq	r2, r1, r8, lsr #21
   12994:	andeq	r2, r1, r8, lsr #21
   12998:	andeq	r2, r1, r8, lsr #21
   1299c:	andeq	r2, r1, r8, lsr #21
   129a0:	andeq	r2, r1, r8, lsr #21
   129a4:	andeq	r2, r1, r8, lsr #21
   129a8:	andeq	r2, r1, r8, lsr #21
   129ac:	andeq	r2, r1, r8, lsr #21
   129b0:	andeq	r2, r1, r8, lsr #21
   129b4:	andeq	r2, r1, r8, lsr #21
   129b8:	andeq	r2, r1, r8, lsr #21
   129bc:	andeq	r2, r1, r8, lsr #21
   129c0:	andeq	r2, r1, r8, lsr #21
   129c4:	andeq	r2, r1, r8, lsr #21
   129c8:	andeq	r2, r1, r8, lsr #21
   129cc:	andeq	r2, r1, r8, lsr #21
   129d0:	andeq	r2, r1, r8, lsr #21
   129d4:			; <UNDEFINED> instruction: 0x00012ab0
   129d8:	andeq	r2, r1, r8, lsr #21
   129dc:	andeq	r2, r1, r8, lsr #21
   129e0:	andeq	r2, r1, r8, lsr #21
   129e4:	andeq	r2, r1, r8, lsr #21
   129e8:	andeq	r2, r1, r8, lsr #21
   129ec:	andeq	r2, r1, r8, lsr #21
   129f0:	andeq	r2, r1, r0, lsr #21
   129f4:	andeq	r2, r1, r8, lsr #21
   129f8:	andeq	r2, r1, r4, lsr #25
   129fc:	andeq	r2, r1, r8, asr sl
   12a00:	andeq	r2, r1, r8, lsr #21
   12a04:	andeq	r2, r1, r8, lsr #21
   12a08:	andeq	r2, r1, ip, lsr #25
   12a0c:	andeq	r2, r1, r0, ror sl
   12a10:	andeq	r2, r1, r8, lsr #21
   12a14:	andeq	r2, r1, r8, lsr #21
   12a18:	andeq	r2, r1, r8, lsr #21
   12a1c:	andeq	r2, r1, r8, lsr #21
   12a20:	andeq	r2, r1, r8, lsr #21
   12a24:	andeq	r2, r1, r8, lsr #21
   12a28:	andeq	r2, r1, r8, lsr #21
   12a2c:	andeq	r2, r1, r8, ror sl
   12a30:	andeq	r2, r1, r8, lsr #21
   12a34:	andeq	r2, r1, r8, lsr #21
   12a38:	andeq	r2, r1, r8, lsr #21
   12a3c:	andeq	r2, r1, r0, lsl #21
   12a40:	andeq	r2, r1, r8, lsr #21
   12a44:	andeq	r2, r1, r8, lsl #21
   12a48:	andeq	r2, r1, r8, lsr #21
   12a4c:	muleq	r1, r0, sl
   12a50:	andeq	r2, r1, r8, lsr #21
   12a54:			; <UNDEFINED> instruction: 0x00012ab0
   12a58:	mov	lr, #8
   12a5c:	b	12cb0 <__assert_fail@plt+0xf3c>
   12a60:	sub	lr, ip, #48	; 0x30
   12a64:	uxtb	lr, lr
   12a68:	mov	ip, #2
   12a6c:	b	12cc0 <__assert_fail@plt+0xf4c>
   12a70:	mov	lr, #12
   12a74:	b	12cb0 <__assert_fail@plt+0xf3c>
   12a78:	mov	lr, #10
   12a7c:	b	12cb0 <__assert_fail@plt+0xf3c>
   12a80:	mov	lr, #13
   12a84:	b	12cb0 <__assert_fail@plt+0xf3c>
   12a88:	mov	lr, #9
   12a8c:	b	12cb0 <__assert_fail@plt+0xf3c>
   12a90:	mov	lr, #11
   12a94:	b	12cb0 <__assert_fail@plt+0xf3c>
   12a98:	mov	lr, r9
   12a9c:	b	12cb0 <__assert_fail@plt+0xf3c>
   12aa0:	mov	lr, #32
   12aa4:	b	12cb0 <__assert_fail@plt+0xf3c>
   12aa8:	mov	lr, ip
   12aac:	b	12cb0 <__assert_fail@plt+0xf3c>
   12ab0:	mov	lr, r8
   12ab4:	mov	ip, #3
   12ab8:	b	12cc0 <__assert_fail@plt+0xf4c>
   12abc:	ldrb	r7, [r4]
   12ac0:	sub	fp, r7, #48	; 0x30
   12ac4:	uxtb	fp, fp
   12ac8:	cmp	fp, #7
   12acc:	strbhi	lr, [r5]
   12ad0:	addhi	r6, r6, #1
   12ad4:	addhi	r5, r5, #1
   12ad8:	movhi	ip, r8
   12adc:	addls	r4, r4, #1
   12ae0:	addls	lr, r7, lr, lsl #3
   12ae4:	subls	lr, lr, #48	; 0x30
   12ae8:	andls	lr, lr, #255	; 0xff
   12aec:	b	127dc <__assert_fail@plt+0xa68>
   12af0:	ldrb	r7, [r4]
   12af4:	sub	fp, r7, #48	; 0x30
   12af8:	cmp	fp, #54	; 0x36
   12afc:	ldrls	pc, [pc, fp, lsl #2]
   12b00:	b	12c1c <__assert_fail@plt+0xea8>
   12b04:	andeq	r2, r1, r0, ror #23
   12b08:	andeq	r2, r1, r0, ror #23
   12b0c:	andeq	r2, r1, r0, ror #23
   12b10:	andeq	r2, r1, r0, ror #23
   12b14:	andeq	r2, r1, r0, ror #23
   12b18:	andeq	r2, r1, r0, ror #23
   12b1c:	andeq	r2, r1, r0, ror #23
   12b20:	andeq	r2, r1, r0, ror #23
   12b24:	andeq	r2, r1, r0, ror #23
   12b28:	andeq	r2, r1, r0, ror #23
   12b2c:	andeq	r2, r1, ip, lsl ip
   12b30:	andeq	r2, r1, ip, lsl ip
   12b34:	andeq	r2, r1, ip, lsl ip
   12b38:	andeq	r2, r1, ip, lsl ip
   12b3c:	andeq	r2, r1, ip, lsl ip
   12b40:	andeq	r2, r1, ip, lsl ip
   12b44:	andeq	r2, r1, ip, lsl ip
   12b48:	andeq	r2, r1, r8, lsl #24
   12b4c:	andeq	r2, r1, r8, lsl #24
   12b50:	andeq	r2, r1, r8, lsl #24
   12b54:	andeq	r2, r1, r8, lsl #24
   12b58:	andeq	r2, r1, r8, lsl #24
   12b5c:	andeq	r2, r1, r8, lsl #24
   12b60:	andeq	r2, r1, ip, lsl ip
   12b64:	andeq	r2, r1, ip, lsl ip
   12b68:	andeq	r2, r1, ip, lsl ip
   12b6c:	andeq	r2, r1, ip, lsl ip
   12b70:	andeq	r2, r1, ip, lsl ip
   12b74:	andeq	r2, r1, ip, lsl ip
   12b78:	andeq	r2, r1, ip, lsl ip
   12b7c:	andeq	r2, r1, ip, lsl ip
   12b80:	andeq	r2, r1, ip, lsl ip
   12b84:	andeq	r2, r1, ip, lsl ip
   12b88:	andeq	r2, r1, ip, lsl ip
   12b8c:	andeq	r2, r1, ip, lsl ip
   12b90:	andeq	r2, r1, ip, lsl ip
   12b94:	andeq	r2, r1, ip, lsl ip
   12b98:	andeq	r2, r1, ip, lsl ip
   12b9c:	andeq	r2, r1, ip, lsl ip
   12ba0:	andeq	r2, r1, ip, lsl ip
   12ba4:	andeq	r2, r1, ip, lsl ip
   12ba8:	andeq	r2, r1, ip, lsl ip
   12bac:	andeq	r2, r1, ip, lsl ip
   12bb0:	andeq	r2, r1, ip, lsl ip
   12bb4:	andeq	r2, r1, ip, lsl ip
   12bb8:	andeq	r2, r1, ip, lsl ip
   12bbc:	andeq	r2, r1, ip, lsl ip
   12bc0:	andeq	r2, r1, ip, lsl ip
   12bc4:	andeq	r2, r1, ip, lsl ip
   12bc8:	strdeq	r2, [r1], -r4
   12bcc:	strdeq	r2, [r1], -r4
   12bd0:	strdeq	r2, [r1], -r4
   12bd4:	strdeq	r2, [r1], -r4
   12bd8:	strdeq	r2, [r1], -r4
   12bdc:	strdeq	r2, [r1], -r4
   12be0:	add	r4, r4, #1
   12be4:	add	lr, r7, lr, lsl #4
   12be8:	sub	lr, lr, #48	; 0x30
   12bec:	and	lr, lr, #255	; 0xff
   12bf0:	b	127dc <__assert_fail@plt+0xa68>
   12bf4:	add	r4, r4, #1
   12bf8:	add	lr, r7, lr, lsl #4
   12bfc:	sub	lr, lr, #87	; 0x57
   12c00:	and	lr, lr, #255	; 0xff
   12c04:	b	127dc <__assert_fail@plt+0xa68>
   12c08:	add	r4, r4, #1
   12c0c:	add	lr, r7, lr, lsl #4
   12c10:	sub	lr, lr, #55	; 0x37
   12c14:	and	lr, lr, #255	; 0xff
   12c18:	b	127dc <__assert_fail@plt+0xa68>
   12c1c:	strb	lr, [r5]
   12c20:	add	r6, r6, #1
   12c24:	add	r5, r5, #1
   12c28:	mov	ip, r8
   12c2c:	b	127dc <__assert_fail@plt+0xa68>
   12c30:	ldrb	r7, [r4]
   12c34:	sub	ip, r7, #64	; 0x40
   12c38:	uxtb	ip, ip
   12c3c:	cmp	ip, #62	; 0x3e
   12c40:	bhi	12c60 <__assert_fail@plt+0xeec>
   12c44:	add	r4, r4, #1
   12c48:	and	r7, r7, #31
   12c4c:	strb	r7, [r5]
   12c50:	add	r6, r6, #1
   12c54:	add	r5, r5, #1
   12c58:	mov	ip, r8
   12c5c:	b	127dc <__assert_fail@plt+0xa68>
   12c60:	cmp	r7, #63	; 0x3f
   12c64:	beq	12c84 <__assert_fail@plt+0xf10>
   12c68:	mov	ip, #6
   12c6c:	str	r5, [r0]
   12c70:	str	r4, [r1]
   12c74:	str	r6, [r3]
   12c78:	subs	r0, ip, #6
   12c7c:	movne	r0, #1
   12c80:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c84:	strb	r9, [r5]
   12c88:	add	r6, r6, #1
   12c8c:	add	r5, r5, #1
   12c90:	mov	ip, r8
   12c94:	b	127dc <__assert_fail@plt+0xa68>
   12c98:	bl	11d2c <abort@plt>
   12c9c:	mov	ip, #5
   12ca0:	b	12cc4 <__assert_fail@plt+0xf50>
   12ca4:	mov	lr, #7
   12ca8:	b	12cb0 <__assert_fail@plt+0xf3c>
   12cac:	mov	lr, #27
   12cb0:	strb	lr, [r5]
   12cb4:	add	r6, r6, #1
   12cb8:	add	r5, r5, #1
   12cbc:	mov	ip, r8
   12cc0:	add	r4, r4, #1
   12cc4:	cmp	ip, #4
   12cc8:	bls	127dc <__assert_fail@plt+0xa68>
   12ccc:	b	12c6c <__assert_fail@plt+0xef8>
   12cd0:	mov	ip, sl
   12cd4:	b	12cc0 <__assert_fail@plt+0xf4c>
   12cd8:	ldr	r3, [pc, #68]	; 12d24 <__assert_fail@plt+0xfb0>
   12cdc:	ldr	r3, [r3, #3108]	; 0xc24
   12ce0:	cmp	r3, #3
   12ce4:	ldrls	pc, [pc, r3, lsl #2]
   12ce8:	b	12d0c <__assert_fail@plt+0xf98>
   12cec:	strdeq	r2, [r1], -ip
   12cf0:	andeq	r2, r1, r4, lsl sp
   12cf4:	andeq	r2, r1, ip, lsl sp
   12cf8:	andeq	r2, r1, r4, lsl #26
   12cfc:	mov	r0, #64	; 0x40
   12d00:	b	12d20 <__assert_fail@plt+0xfac>
   12d04:	mov	r0, #2048	; 0x800
   12d08:	b	12d20 <__assert_fail@plt+0xfac>
   12d0c:	push	{r4, lr}
   12d10:	bl	11d2c <abort@plt>
   12d14:	mov	r0, #128	; 0x80
   12d18:	b	12d20 <__assert_fail@plt+0xfac>
   12d1c:	mov	r0, #32
   12d20:	bx	lr
   12d24:	andeq	r9, r3, r0, lsr r3
   12d28:	push	{r4, lr}
   12d2c:	ldr	r3, [pc, #180]	; 12de8 <__assert_fail@plt+0x1074>
   12d30:	ldrb	r0, [r3, #3112]	; 0xc28
   12d34:	ldr	r4, [pc, #176]	; 12dec <__assert_fail@plt+0x1078>
   12d38:	cmp	r0, #0
   12d3c:	moveq	r4, #2
   12d40:	ldrb	r3, [r3, #3113]	; 0xc29
   12d44:	cmp	r3, #0
   12d48:	orrne	r4, r4, #1024	; 0x400
   12d4c:	ldr	r3, [pc, #148]	; 12de8 <__assert_fail@plt+0x1074>
   12d50:	ldr	r3, [r3, #3116]	; 0xc2c
   12d54:	cmp	r3, #0
   12d58:	bne	12d9c <__assert_fail@plt+0x1028>
   12d5c:	bl	12cd8 <__assert_fail@plt+0xf64>
   12d60:	orr	r4, r4, r0
   12d64:	ldr	r3, [pc, #132]	; 12df0 <__assert_fail@plt+0x107c>
   12d68:	ldrb	r3, [r3, #204]	; 0xcc
   12d6c:	cmp	r3, #0
   12d70:	bne	12d88 <__assert_fail@plt+0x1014>
   12d74:	ldr	r3, [pc, #108]	; 12de8 <__assert_fail@plt+0x1074>
   12d78:	ldrb	r3, [r3, #3120]	; 0xc30
   12d7c:	cmp	r3, #0
   12d80:	orreq	r4, r4, #516	; 0x204
   12d84:	beq	12d8c <__assert_fail@plt+0x1018>
   12d88:	orr	r4, r4, #524	; 0x20c
   12d8c:	ldr	r3, [pc, #92]	; 12df0 <__assert_fail@plt+0x107c>
   12d90:	ldrb	r3, [r3, #205]	; 0xcd
   12d94:	cmp	r3, #0
   12d98:	orrne	r4, r4, #16
   12d9c:	ldr	r3, [pc, #68]	; 12de8 <__assert_fail@plt+0x1074>
   12da0:	ldr	r3, [r3, #3124]	; 0xc34
   12da4:	cmp	r3, #6
   12da8:	ldrls	pc, [pc, r3, lsl #2]
   12dac:	b	12de4 <__assert_fail@plt+0x1070>
   12db0:	ldrdeq	r2, [r1], -r4
   12db4:	ldrdeq	r2, [r1], -r4
   12db8:	ldrdeq	r2, [r1], -r4
   12dbc:	ldrdeq	r2, [r1], -ip
   12dc0:	ldrdeq	r2, [r1], -r4
   12dc4:	andeq	r2, r1, ip, asr #27
   12dc8:	ldrdeq	r2, [r1], -r4
   12dcc:	bl	12cd8 <__assert_fail@plt+0xf64>
   12dd0:	orr	r4, r4, r0
   12dd4:	mov	r0, r4
   12dd8:	pop	{r4, pc}
   12ddc:	orr	r4, r4, #512	; 0x200
   12de0:	b	12dd4 <__assert_fail@plt+0x1060>
   12de4:	bl	11d2c <abort@plt>
   12de8:	andeq	r9, r3, r0, lsr r3
   12dec:	andeq	r0, r0, r2, lsl #2
   12df0:	ldrdeq	r9, [r3], -r0
   12df4:	push	{r4, lr}
   12df8:	mov	r4, r0
   12dfc:	ldr	r0, [r0]
   12e00:	bl	1b388 <__assert_fail@plt+0x9614>
   12e04:	ldr	r0, [r4, #4]
   12e08:	bl	1b388 <__assert_fail@plt+0x9614>
   12e0c:	ldr	r0, [r4, #8]
   12e10:	bl	1b388 <__assert_fail@plt+0x9614>
   12e14:	ldr	r0, [r4, #128]	; 0x80
   12e18:	ldr	r3, [pc, #12]	; 12e2c <__assert_fail@plt+0x10b8>
   12e1c:	cmp	r0, r3
   12e20:	popeq	{r4, pc}
   12e24:	bl	11ce4 <freecon@plt>
   12e28:	pop	{r4, pc}
   12e2c:	andeq	r9, r3, r0, lsr #5
   12e30:	push	{r4, r5, r6, lr}
   12e34:	ldr	r3, [pc, #108]	; 12ea8 <__assert_fail@plt+0x1134>
   12e38:	ldr	r3, [r3, #8]
   12e3c:	cmp	r3, #0
   12e40:	beq	12e68 <__assert_fail@plt+0x10f4>
   12e44:	mov	r4, #0
   12e48:	ldr	r5, [pc, #88]	; 12ea8 <__assert_fail@plt+0x1134>
   12e4c:	ldr	r3, [r5, #12]
   12e50:	ldr	r0, [r3, r4, lsl #2]
   12e54:	bl	12df4 <__assert_fail@plt+0x1080>
   12e58:	add	r4, r4, #1
   12e5c:	ldr	r3, [r5, #8]
   12e60:	cmp	r3, r4
   12e64:	bhi	12e4c <__assert_fail@plt+0x10d8>
   12e68:	ldr	r3, [pc, #56]	; 12ea8 <__assert_fail@plt+0x1134>
   12e6c:	mov	r2, #0
   12e70:	str	r2, [r3, #8]
   12e74:	strb	r2, [r3, #3128]	; 0xc38
   12e78:	strb	r2, [r3, #3129]	; 0xc39
   12e7c:	str	r2, [r3, #3132]	; 0xc3c
   12e80:	str	r2, [r3, #3136]	; 0xc40
   12e84:	str	r2, [r3, #3140]	; 0xc44
   12e88:	str	r2, [r3, #3144]	; 0xc48
   12e8c:	str	r2, [r3, #3148]	; 0xc4c
   12e90:	str	r2, [r3, #3152]	; 0xc50
   12e94:	str	r2, [r3, #3156]	; 0xc54
   12e98:	str	r2, [r3, #3160]	; 0xc58
   12e9c:	str	r2, [r3, #3164]	; 0xc5c
   12ea0:	str	r2, [r3, #3168]	; 0xc60
   12ea4:	pop	{r4, r5, r6, pc}
   12ea8:	andeq	r9, r3, r0, lsr r3
   12eac:	push	{lr}		; (str lr, [sp, #-4]!)
   12eb0:	sub	sp, sp, #20
   12eb4:	cmp	r0, #0
   12eb8:	beq	12ed0 <__assert_fail@plt+0x115c>
   12ebc:	mov	r1, #0
   12ec0:	bl	1da48 <__assert_fail@plt+0xbcd4>
   12ec4:	bic	r0, r0, r0, asr #31
   12ec8:	add	sp, sp, #20
   12ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   12ed0:	strd	r2, [sp, #8]
   12ed4:	ldr	r3, [pc, #24]	; 12ef4 <__assert_fail@plt+0x1180>
   12ed8:	str	r3, [sp]
   12edc:	mvn	r3, #0
   12ee0:	mov	r2, #1
   12ee4:	mov	r1, #0
   12ee8:	mov	r0, r1
   12eec:	bl	11d5c <__snprintf_chk@plt>
   12ef0:	b	12ec8 <__assert_fail@plt+0x1154>
   12ef4:	andeq	r5, r2, r4, lsl #14
   12ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12efc:	sub	sp, sp, #268	; 0x10c
   12f00:	mov	r4, r2
   12f04:	mov	r2, r3
   12f08:	add	r3, sp, #8
   12f0c:	str	r3, [sp]
   12f10:	ldr	r3, [sp, #304]	; 0x130
   12f14:	bl	11c3c <statx@plt>
   12f18:	subs	ip, r0, #0
   12f1c:	blt	13094 <__assert_fail@plt+0x1320>
   12f20:	ldr	lr, [sp, #148]	; 0x94
   12f24:	ldr	r1, [sp, #144]	; 0x90
   12f28:	mov	r5, #0
   12f2c:	lsr	r3, r1, #24
   12f30:	lsl	r2, r1, #8
   12f34:	ldr	sl, [pc, #364]	; 130a8 <__assert_fail@plt+0x1334>
   12f38:	mov	fp, #0
   12f3c:	and	r2, r2, sl
   12f40:	and	r3, r3, fp
   12f44:	mov	r7, r1
   12f48:	mov	r6, r5
   12f4c:	mov	r8, #0
   12f50:	ldr	r9, [pc, #340]	; 130ac <__assert_fail@plt+0x1338>
   12f54:	and	r6, r6, r8
   12f58:	and	r7, r7, r9
   12f5c:	orr	r2, r2, r6
   12f60:	orr	r3, r3, r7
   12f64:	uxtb	r0, lr
   12f68:	mov	r1, #0
   12f6c:	orr	r0, r0, r2
   12f70:	orr	r1, r1, r3
   12f74:	lsr	r3, lr, #20
   12f78:	lsl	r2, lr, #12
   12f7c:	add	r7, pc, #284	; 0x11c
   12f80:	ldrd	r6, [r7]
   12f84:	and	r2, r2, r6
   12f88:	and	r3, r3, r7
   12f8c:	orr	r2, r2, r0
   12f90:	orr	r3, r3, r1
   12f94:	strd	r2, [r4]
   12f98:	ldrd	r2, [sp, #40]	; 0x28
   12f9c:	strd	r2, [r4, #96]	; 0x60
   12fa0:	ldrh	r3, [sp, #36]	; 0x24
   12fa4:	str	r3, [r4, #16]
   12fa8:	ldr	r3, [sp, #24]
   12fac:	str	r3, [r4, #20]
   12fb0:	ldr	r3, [sp, #28]
   12fb4:	str	r3, [r4, #24]
   12fb8:	ldr	r3, [sp, #32]
   12fbc:	str	r3, [r4, #28]
   12fc0:	ldr	r1, [sp, #140]	; 0x8c
   12fc4:	ldr	r0, [sp, #136]	; 0x88
   12fc8:	lsr	r3, r0, #24
   12fcc:	lsl	r2, r0, #8
   12fd0:	and	sl, sl, r2
   12fd4:	and	fp, fp, r3
   12fd8:	mov	r3, r0
   12fdc:	mov	r2, r5
   12fe0:	and	r2, r2, r8
   12fe4:	and	r3, r3, r9
   12fe8:	orr	sl, sl, r2
   12fec:	orr	fp, fp, r3
   12ff0:	uxtb	r2, r1
   12ff4:	mov	r3, #0
   12ff8:	orr	r2, r2, sl
   12ffc:	orr	r3, r3, fp
   13000:	lsr	fp, r1, #20
   13004:	lsl	sl, r1, #12
   13008:	and	r6, r6, sl
   1300c:	and	r7, r7, fp
   13010:	orr	r2, r2, r6
   13014:	orr	r3, r3, r7
   13018:	strd	r2, [r4, #32]
   1301c:	ldrd	r2, [sp, #48]	; 0x30
   13020:	strd	r2, [r4, #48]	; 0x30
   13024:	ldr	r3, [sp, #12]
   13028:	str	r3, [r4, #56]	; 0x38
   1302c:	ldrd	r2, [sp, #56]	; 0x38
   13030:	strd	r2, [r4, #64]	; 0x40
   13034:	ldr	r3, [sp, #72]	; 0x48
   13038:	str	r3, [r4, #72]	; 0x48
   1303c:	ldr	r3, [sp, #80]	; 0x50
   13040:	str	r3, [r4, #76]	; 0x4c
   13044:	ldr	r3, [sp, #120]	; 0x78
   13048:	str	r3, [r4, #80]	; 0x50
   1304c:	ldr	r3, [sp, #128]	; 0x80
   13050:	str	r3, [r4, #84]	; 0x54
   13054:	ldr	r3, [sp, #104]	; 0x68
   13058:	str	r3, [r4, #88]	; 0x58
   1305c:	ldr	r3, [sp, #112]	; 0x70
   13060:	str	r3, [r4, #92]	; 0x5c
   13064:	ldr	r3, [sp, #304]	; 0x130
   13068:	tst	r3, #2048	; 0x800
   1306c:	beq	13094 <__assert_fail@plt+0x1320>
   13070:	ldr	r3, [sp, #8]
   13074:	tst	r3, #2048	; 0x800
   13078:	ldrne	r3, [sp, #88]	; 0x58
   1307c:	strne	r3, [r4, #80]	; 0x50
   13080:	ldrne	r3, [sp, #96]	; 0x60
   13084:	strne	r3, [r4, #84]	; 0x54
   13088:	mvneq	r3, #0
   1308c:	streq	r3, [r4, #84]	; 0x54
   13090:	streq	r3, [r4, #80]	; 0x50
   13094:	mov	r0, ip
   13098:	add	sp, sp, #268	; 0x10c
   1309c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130a0:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   130a4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   130a8:	andeq	pc, pc, r0, lsl #30
   130ac:			; <UNDEFINED> instruction: 0xfffff000
   130b0:	push	{r4, r5, r6, r7, r8, lr}
   130b4:	mov	r4, r0
   130b8:	mov	r6, r1
   130bc:	mov	r7, r2
   130c0:	bl	11bb8 <__errno_location@plt>
   130c4:	ldr	r5, [r0]
   130c8:	mov	r1, r7
   130cc:	mov	r0, #4
   130d0:	bl	21324 <_obstack_memory_used@@Base+0x1950>
   130d4:	mov	r3, r0
   130d8:	mov	r2, r6
   130dc:	mov	r1, r5
   130e0:	mov	r0, #0
   130e4:	bl	11a8c <error@plt>
   130e8:	cmp	r4, #0
   130ec:	bne	1310c <__assert_fail@plt+0x1398>
   130f0:	ldr	r3, [pc, #36]	; 1311c <__assert_fail@plt+0x13a8>
   130f4:	ldr	r3, [r3, #3172]	; 0xc64
   130f8:	cmp	r3, #0
   130fc:	moveq	r2, #1
   13100:	ldreq	r3, [pc, #20]	; 1311c <__assert_fail@plt+0x13a8>
   13104:	streq	r2, [r3, #3172]	; 0xc64
   13108:	pop	{r4, r5, r6, r7, r8, pc}
   1310c:	mov	r2, #2
   13110:	ldr	r3, [pc, #4]	; 1311c <__assert_fail@plt+0x13a8>
   13114:	str	r2, [r3, #3172]	; 0xc64
   13118:	pop	{r4, r5, r6, r7, r8, pc}
   1311c:	andeq	r9, r3, r0, lsr r3
   13120:	push	{r4, r5, lr}
   13124:	sub	sp, sp, #20
   13128:	mov	r4, r0
   1312c:	ldr	r3, [pc, #76]	; 13180 <__assert_fail@plt+0x140c>
   13130:	ldr	r3, [r3, #3176]	; 0xc68
   13134:	str	r3, [sp]
   13138:	mvn	r3, #0
   1313c:	mov	r2, r0
   13140:	mov	r1, #2
   13144:	add	r0, sp, #12
   13148:	bl	21058 <_obstack_memory_used@@Base+0x1684>
   1314c:	ldrb	r2, [r4]
   13150:	ldrb	r3, [sp, #12]
   13154:	cmp	r2, r3
   13158:	movne	r0, #1
   1315c:	beq	13168 <__assert_fail@plt+0x13f4>
   13160:	add	sp, sp, #20
   13164:	pop	{r4, r5, pc}
   13168:	mov	r5, r0
   1316c:	mov	r0, r4
   13170:	bl	11b94 <strlen@plt>
   13174:	subs	r0, r5, r0
   13178:	movne	r0, #1
   1317c:	b	13160 <__assert_fail@plt+0x13ec>
   13180:	andeq	r9, r3, r0, lsr r3
   13184:	push	{r4, lr}
   13188:	mov	r4, r0
   1318c:	ldr	r3, [pc, #40]	; 131bc <__assert_fail@plt+0x1448>
   13190:	ldrb	r3, [r3, #3180]	; 0xc6c
   13194:	cmp	r3, #0
   13198:	movne	r0, #0
   1319c:	beq	131b0 <__assert_fail@plt+0x143c>
   131a0:	mov	r2, r4
   131a4:	mov	r3, #0
   131a8:	bl	12eac <__assert_fail@plt+0x1138>
   131ac:	pop	{r4, pc}
   131b0:	mov	r0, r4
   131b4:	bl	1cf5c <__assert_fail@plt+0xb1e8>
   131b8:	b	131a0 <__assert_fail@plt+0x142c>
   131bc:	andeq	r9, r3, r0, lsr r3
   131c0:	push	{r4, r5, r6, lr}
   131c4:	mov	r4, r0
   131c8:	mov	r5, r1
   131cc:	bl	11bb8 <__errno_location@plt>
   131d0:	mov	r3, #0
   131d4:	str	r3, [r0]
   131d8:	mov	r1, r5
   131dc:	mov	r0, r4
   131e0:	bl	11abc <strcoll@plt>
   131e4:	pop	{r4, r5, r6, pc}
   131e8:	push	{r4, lr}
   131ec:	ldr	r3, [r1]
   131f0:	ldr	r1, [r0]
   131f4:	mov	r0, r3
   131f8:	bl	1b01c <__assert_fail@plt+0x92a8>
   131fc:	pop	{r4, pc}
   13200:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13204:	sub	sp, sp, #36	; 0x24
   13208:	str	r0, [sp, #8]
   1320c:	mov	r8, r1
   13210:	mov	r5, r2
   13214:	mov	r7, r3
   13218:	ldr	sl, [r0]
   1321c:	mov	r0, r7
   13220:	bl	20f94 <_obstack_memory_used@@Base+0x15c0>
   13224:	ldr	r3, [pc, #1028]	; 13630 <__assert_fail@plt+0x18bc>
   13228:	ldrb	r4, [r3, #3181]	; 0xc6d
   1322c:	cmp	r0, #2
   13230:	movhi	r4, #0
   13234:	andls	r4, r4, #1
   13238:	ldr	r3, [sp, #72]	; 0x48
   1323c:	cmp	r3, #0
   13240:	bne	132a4 <__assert_fail@plt+0x1530>
   13244:	cmp	r4, #0
   13248:	beq	13340 <__assert_fail@plt+0x15cc>
   1324c:	mov	r0, r5
   13250:	bl	11b94 <strlen@plt>
   13254:	mov	r7, r0
   13258:	cmp	r8, r0
   1325c:	bls	13330 <__assert_fail@plt+0x15bc>
   13260:	add	r2, r7, #1
   13264:	mov	r1, r5
   13268:	mov	r0, sl
   1326c:	bl	11930 <memcpy@plt>
   13270:	mov	r3, #0
   13274:	str	r3, [sp, #12]
   13278:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   1327c:	cmp	r0, #1
   13280:	bls	13528 <__assert_fail@plt+0x17b4>
   13284:	add	r9, sl, r7
   13288:	cmp	r9, sl
   1328c:	bls	134bc <__assert_fail@plt+0x1748>
   13290:	mov	r6, sl
   13294:	mov	r4, sl
   13298:	mov	r7, #0
   1329c:	mov	fp, #63	; 0x3f
   132a0:	b	133d4 <__assert_fail@plt+0x1660>
   132a4:	str	r7, [sp]
   132a8:	mvn	r3, #0
   132ac:	mov	r2, r5
   132b0:	mov	r1, r8
   132b4:	mov	r0, sl
   132b8:	bl	21058 <_obstack_memory_used@@Base+0x1684>
   132bc:	mov	r6, r0
   132c0:	cmp	r8, r0
   132c4:	bls	132f0 <__assert_fail@plt+0x157c>
   132c8:	ldrb	r2, [r5]
   132cc:	ldrb	r3, [sl]
   132d0:	cmp	r2, r3
   132d4:	movne	r3, #1
   132d8:	strne	r3, [sp, #12]
   132dc:	beq	13318 <__assert_fail@plt+0x15a4>
   132e0:	cmp	r4, #0
   132e4:	beq	13354 <__assert_fail@plt+0x15e0>
   132e8:	mov	r7, r6
   132ec:	b	13278 <__assert_fail@plt+0x1504>
   132f0:	add	r8, r0, #1
   132f4:	mov	r0, r8
   132f8:	bl	2227c <_obstack_memory_used@@Base+0x28a8>
   132fc:	mov	sl, r0
   13300:	str	r7, [sp]
   13304:	mvn	r3, #0
   13308:	mov	r2, r5
   1330c:	mov	r1, r8
   13310:	bl	21058 <_obstack_memory_used@@Base+0x1684>
   13314:	b	132c8 <__assert_fail@plt+0x1554>
   13318:	mov	r0, r5
   1331c:	bl	11b94 <strlen@plt>
   13320:	subs	r3, r6, r0
   13324:	movne	r3, #1
   13328:	str	r3, [sp, #12]
   1332c:	b	132e0 <__assert_fail@plt+0x156c>
   13330:	add	r0, r0, #1
   13334:	bl	2227c <_obstack_memory_used@@Base+0x28a8>
   13338:	mov	sl, r0
   1333c:	b	13260 <__assert_fail@plt+0x14ec>
   13340:	mov	r0, r5
   13344:	bl	11b94 <strlen@plt>
   13348:	mov	r6, r0
   1334c:	str	r4, [sp, #12]
   13350:	mov	sl, r5
   13354:	ldr	r3, [sp, #76]	; 0x4c
   13358:	cmp	r3, #0
   1335c:	beq	135cc <__assert_fail@plt+0x1858>
   13360:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   13364:	cmp	r0, #1
   13368:	bls	1356c <__assert_fail@plt+0x17f8>
   1336c:	mov	r2, #0
   13370:	mov	r1, r6
   13374:	mov	r0, sl
   13378:	bl	1d858 <__assert_fail@plt+0xbae4>
   1337c:	mov	r7, r0
   13380:	ldr	r3, [pc, #680]	; 13630 <__assert_fail@plt+0x18bc>
   13384:	ldrb	r3, [r3, #3182]	; 0xc6e
   13388:	cmp	r3, #0
   1338c:	bne	13608 <__assert_fail@plt+0x1894>
   13390:	mov	r3, #0
   13394:	ldr	r2, [sp, #80]	; 0x50
   13398:	strb	r3, [r2]
   1339c:	b	1350c <__assert_fail@plt+0x1798>
   133a0:	cmp	r3, #65	; 0x41
   133a4:	bcc	133f4 <__assert_fail@plt+0x1680>
   133a8:	cmp	r3, #95	; 0x5f
   133ac:	bls	133bc <__assert_fail@plt+0x1648>
   133b0:	sub	r2, r3, #97	; 0x61
   133b4:	cmp	r2, #29
   133b8:	bhi	133f4 <__assert_fail@plt+0x1680>
   133bc:	add	r4, r4, #1
   133c0:	strb	r3, [r6]
   133c4:	add	r7, r7, #1
   133c8:	add	r6, r6, #1
   133cc:	cmp	r4, r9
   133d0:	bcs	134c4 <__assert_fail@plt+0x1750>
   133d4:	ldrb	r3, [r4]
   133d8:	cmp	r3, #63	; 0x3f
   133dc:	bhi	133a0 <__assert_fail@plt+0x162c>
   133e0:	cmp	r3, #37	; 0x25
   133e4:	bcs	133bc <__assert_fail@plt+0x1648>
   133e8:	sub	r2, r3, #32
   133ec:	cmp	r2, #3
   133f0:	bls	133bc <__assert_fail@plt+0x1648>
   133f4:	add	r8, sp, #32
   133f8:	mov	r3, #0
   133fc:	str	r3, [r8, #-8]!
   13400:	str	r3, [sp, #28]
   13404:	b	1344c <__assert_fail@plt+0x16d8>
   13408:	add	r4, r4, #1
   1340c:	strb	fp, [r6]
   13410:	add	r7, r7, #1
   13414:	add	r6, r6, #1
   13418:	b	133cc <__assert_fail@plt+0x1658>
   1341c:	strb	fp, [r6]
   13420:	add	r7, r7, #1
   13424:	add	r6, r6, #1
   13428:	mov	r4, r9
   1342c:	b	133cc <__assert_fail@plt+0x1658>
   13430:	add	r6, r6, r5
   13434:	add	r7, r7, r0
   13438:	mov	r4, r1
   1343c:	mov	r0, r8
   13440:	bl	11948 <mbsinit@plt>
   13444:	cmp	r0, #0
   13448:	bne	133cc <__assert_fail@plt+0x1658>
   1344c:	mov	r3, r8
   13450:	sub	r2, r9, r4
   13454:	mov	r1, r4
   13458:	add	r0, sp, #20
   1345c:	bl	1d400 <__assert_fail@plt+0xb68c>
   13460:	mov	r5, r0
   13464:	cmn	r0, #1
   13468:	beq	13408 <__assert_fail@plt+0x1694>
   1346c:	cmn	r0, #2
   13470:	beq	1341c <__assert_fail@plt+0x16a8>
   13474:	cmp	r0, #0
   13478:	moveq	r5, #1
   1347c:	ldr	r0, [sp, #20]
   13480:	bl	118d0 <wcwidth@plt>
   13484:	cmp	r0, #0
   13488:	subge	r3, r6, #1
   1348c:	addge	r1, r4, r5
   13490:	blt	134a8 <__assert_fail@plt+0x1734>
   13494:	ldrb	r2, [r4], #1
   13498:	strb	r2, [r3, #1]!
   1349c:	cmp	r4, r1
   134a0:	bne	13494 <__assert_fail@plt+0x1720>
   134a4:	b	13430 <__assert_fail@plt+0x16bc>
   134a8:	add	r4, r4, r5
   134ac:	strb	fp, [r6]
   134b0:	add	r7, r7, #1
   134b4:	add	r6, r6, #1
   134b8:	b	1343c <__assert_fail@plt+0x16c8>
   134bc:	mov	r6, sl
   134c0:	mov	r7, #0
   134c4:	sub	r6, r6, sl
   134c8:	ldr	r3, [pc, #352]	; 13630 <__assert_fail@plt+0x18bc>
   134cc:	ldrb	r3, [r3, #3182]	; 0xc6e
   134d0:	cmp	r3, #0
   134d4:	beq	134f4 <__assert_fail@plt+0x1780>
   134d8:	ldr	r3, [pc, #336]	; 13630 <__assert_fail@plt+0x18bc>
   134dc:	ldrb	r3, [r3, #3128]	; 0xc38
   134e0:	eor	r3, r3, #1
   134e4:	ldr	r2, [sp, #12]
   134e8:	orrs	r3, r2, r3
   134ec:	moveq	r3, #1
   134f0:	beq	134f8 <__assert_fail@plt+0x1784>
   134f4:	mov	r3, #0
   134f8:	ldr	r2, [sp, #80]	; 0x50
   134fc:	strb	r3, [r2]
   13500:	ldr	r3, [sp, #76]	; 0x4c
   13504:	cmp	r3, #0
   13508:	beq	13514 <__assert_fail@plt+0x17a0>
   1350c:	ldr	r3, [sp, #76]	; 0x4c
   13510:	str	r7, [r3]
   13514:	ldr	r3, [sp, #8]
   13518:	str	sl, [r3]
   1351c:	mov	r0, r6
   13520:	add	sp, sp, #36	; 0x24
   13524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13528:	add	r4, sl, r7
   1352c:	cmp	r4, sl
   13530:	bls	135ac <__assert_fail@plt+0x1838>
   13534:	bl	11b58 <__ctype_b_loc@plt>
   13538:	mov	r3, sl
   1353c:	mov	ip, #63	; 0x3f
   13540:	ldrb	r2, [r3]
   13544:	ldr	r1, [r0]
   13548:	lsl	r2, r2, #1
   1354c:	ldrh	r2, [r1, r2]
   13550:	tst	r2, #16384	; 0x4000
   13554:	strbeq	ip, [r3]
   13558:	add	r3, r3, #1
   1355c:	cmp	r4, r3
   13560:	bne	13540 <__assert_fail@plt+0x17cc>
   13564:	mov	r6, r7
   13568:	b	134c8 <__assert_fail@plt+0x1754>
   1356c:	add	r4, sl, r6
   13570:	cmp	r4, sl
   13574:	bls	135b4 <__assert_fail@plt+0x1840>
   13578:	bl	11b58 <__ctype_b_loc@plt>
   1357c:	ldr	r0, [r0]
   13580:	sub	r2, sl, #1
   13584:	sub	r1, r4, #1
   13588:	mov	r7, #0
   1358c:	ldrb	r3, [r2, #1]!
   13590:	lsl	r3, r3, #1
   13594:	ldrh	r3, [r0, r3]
   13598:	tst	r3, #16384	; 0x4000
   1359c:	addne	r7, r7, #1
   135a0:	cmp	r1, r2
   135a4:	bne	1358c <__assert_fail@plt+0x1818>
   135a8:	b	13380 <__assert_fail@plt+0x160c>
   135ac:	mov	r6, r7
   135b0:	b	134c8 <__assert_fail@plt+0x1754>
   135b4:	mov	r7, #0
   135b8:	b	13380 <__assert_fail@plt+0x160c>
   135bc:	mov	r3, #0
   135c0:	ldr	r2, [sp, #80]	; 0x50
   135c4:	strb	r3, [r2]
   135c8:	b	13514 <__assert_fail@plt+0x17a0>
   135cc:	ldr	r3, [pc, #92]	; 13630 <__assert_fail@plt+0x18bc>
   135d0:	ldrb	r3, [r3, #3182]	; 0xc6e
   135d4:	cmp	r3, #0
   135d8:	beq	135bc <__assert_fail@plt+0x1848>
   135dc:	ldr	r3, [pc, #76]	; 13630 <__assert_fail@plt+0x18bc>
   135e0:	ldrb	r3, [r3, #3128]	; 0xc38
   135e4:	eor	r3, r3, #1
   135e8:	ldr	r2, [sp, #12]
   135ec:	orrs	r3, r2, r3
   135f0:	movne	r7, #0
   135f4:	bne	134f4 <__assert_fail@plt+0x1780>
   135f8:	mov	r3, #1
   135fc:	ldr	r2, [sp, #80]	; 0x50
   13600:	strb	r3, [r2]
   13604:	b	13514 <__assert_fail@plt+0x17a0>
   13608:	ldr	r3, [pc, #32]	; 13630 <__assert_fail@plt+0x18bc>
   1360c:	ldrb	r3, [r3, #3128]	; 0xc38
   13610:	eor	r3, r3, #1
   13614:	ldr	r2, [sp, #12]
   13618:	orrs	r3, r2, r3
   1361c:	bne	134f4 <__assert_fail@plt+0x1780>
   13620:	mov	r3, #1
   13624:	ldr	r2, [sp, #80]	; 0x50
   13628:	strb	r3, [r2]
   1362c:	b	1350c <__assert_fail@plt+0x1798>
   13630:	andeq	r9, r3, r0, lsr r3
   13634:	push	{r4, r5, lr}
   13638:	sub	sp, sp, #8192	; 0x2000
   1363c:	sub	sp, sp, #36	; 0x24
   13640:	mov	r5, r0
   13644:	add	r4, sp, #32
   13648:	str	r4, [r4, #-4]
   1364c:	sub	r3, r4, #9
   13650:	str	r3, [sp, #8]
   13654:	sub	r3, r4, #8
   13658:	str	r3, [sp, #4]
   1365c:	str	r2, [sp]
   13660:	mov	r3, r1
   13664:	mov	r2, r0
   13668:	mov	r1, #8192	; 0x2000
   1366c:	sub	r0, r4, #4
   13670:	bl	13200 <__assert_fail@plt+0x148c>
   13674:	ldr	r0, [r4, #-4]
   13678:	cmp	r5, r0
   1367c:	cmpne	r0, r4
   13680:	beq	13688 <__assert_fail@plt+0x1914>
   13684:	bl	1b388 <__assert_fail@plt+0x9614>
   13688:	ldrb	r0, [sp, #23]
   1368c:	ldr	r3, [sp, #24]
   13690:	add	r0, r0, r3
   13694:	add	sp, sp, #8192	; 0x2000
   13698:	add	sp, sp, #36	; 0x24
   1369c:	pop	{r4, r5, pc}
   136a0:	mov	r3, r0
   136a4:	ldr	r0, [r0, #148]	; 0x94
   136a8:	cmp	r0, #0
   136ac:	bxne	lr
   136b0:	push	{r4, lr}
   136b4:	ldr	r2, [r3, #144]	; 0x90
   136b8:	ldr	r1, [pc, #12]	; 136cc <__assert_fail@plt+0x1958>
   136bc:	ldr	r1, [r1, #3176]	; 0xc68
   136c0:	ldr	r0, [r3]
   136c4:	bl	13634 <__assert_fail@plt+0x18c0>
   136c8:	pop	{r4, pc}
   136cc:	andeq	r9, r3, r0, lsr r3
   136d0:	push	{r4, r5, r6, r7, r8, lr}
   136d4:	mov	r7, r0
   136d8:	mov	r5, r1
   136dc:	mov	r6, r2
   136e0:	bl	136a0 <__assert_fail@plt+0x192c>
   136e4:	mov	r4, r0
   136e8:	mov	r0, r5
   136ec:	bl	136a0 <__assert_fail@plt+0x192c>
   136f0:	subs	r0, r4, r0
   136f4:	popne	{r4, r5, r6, r7, r8, pc}
   136f8:	ldr	r1, [r5]
   136fc:	ldr	r0, [r7]
   13700:	blx	r6
   13704:	pop	{r4, r5, r6, r7, r8, pc}
   13708:	push	{r4, lr}
   1370c:	mov	r3, r1
   13710:	ldr	r2, [pc, #12]	; 13724 <__assert_fail@plt+0x19b0>
   13714:	mov	r1, r0
   13718:	mov	r0, r3
   1371c:	bl	136d0 <__assert_fail@plt+0x195c>
   13720:	pop	{r4, pc}
   13724:	andeq	r1, r1, r0, lsr #17
   13728:	push	{r4, lr}
   1372c:	ldr	r2, [pc, #4]	; 13738 <__assert_fail@plt+0x19c4>
   13730:	bl	136d0 <__assert_fail@plt+0x195c>
   13734:	pop	{r4, pc}
   13738:	andeq	r1, r1, r0, lsr #17
   1373c:	push	{r4, lr}
   13740:	mov	r3, r1
   13744:	ldr	r2, [pc, #12]	; 13758 <__assert_fail@plt+0x19e4>
   13748:	mov	r1, r0
   1374c:	mov	r0, r3
   13750:	bl	136d0 <__assert_fail@plt+0x195c>
   13754:	pop	{r4, pc}
   13758:	andeq	r3, r1, r0, asr #3
   1375c:	push	{r4, lr}
   13760:	ldr	r2, [pc, #4]	; 1376c <__assert_fail@plt+0x19f8>
   13764:	bl	136d0 <__assert_fail@plt+0x195c>
   13768:	pop	{r4, pc}
   1376c:	andeq	r3, r1, r0, asr #3
   13770:	push	{r4, r5, r6, lr}
   13774:	ldr	r2, [pc, #360]	; 138e4 <__assert_fail@plt+0x1b70>
   13778:	ldr	r3, [r2, #8]
   1377c:	add	r3, r3, r3, lsr #1
   13780:	ldr	r2, [r2, #3184]	; 0xc70
   13784:	cmp	r3, r2
   13788:	bls	137b4 <__assert_fail@plt+0x1a40>
   1378c:	ldr	r4, [pc, #336]	; 138e4 <__assert_fail@plt+0x1b70>
   13790:	ldr	r0, [r4, #12]
   13794:	bl	1b388 <__assert_fail@plt+0x9614>
   13798:	mov	r1, #12
   1379c:	ldr	r0, [r4, #8]
   137a0:	bl	22374 <_obstack_memory_used@@Base+0x29a0>
   137a4:	str	r0, [r4, #12]
   137a8:	ldr	r3, [r4, #8]
   137ac:	add	r3, r3, r3, lsl #1
   137b0:	str	r3, [r4, #3184]	; 0xc70
   137b4:	bl	12278 <__assert_fail@plt+0x504>
   137b8:	ldr	r3, [pc, #292]	; 138e4 <__assert_fail@plt+0x1b70>
   137bc:	ldr	r3, [r3, #3124]	; 0xc34
   137c0:	cmp	r3, #2
   137c4:	beq	13820 <__assert_fail@plt+0x1aac>
   137c8:	ldr	r3, [pc, #276]	; 138e4 <__assert_fail@plt+0x1b70>
   137cc:	ldr	r3, [r3, #3188]	; 0xc74
   137d0:	cmp	r3, #0
   137d4:	beq	1385c <__assert_fail@plt+0x1ae8>
   137d8:	ldr	r3, [pc, #260]	; 138e4 <__assert_fail@plt+0x1b70>
   137dc:	ldr	r3, [r3, #3116]	; 0xc2c
   137e0:	sub	r3, r3, #2
   137e4:	cmp	r3, #1
   137e8:	bhi	1385c <__assert_fail@plt+0x1ae8>
   137ec:	ldr	r3, [pc, #240]	; 138e4 <__assert_fail@plt+0x1b70>
   137f0:	ldr	r3, [r3, #8]
   137f4:	cmp	r3, #0
   137f8:	movne	r4, #0
   137fc:	bne	13834 <__assert_fail@plt+0x1ac0>
   13800:	b	1385c <__assert_fail@plt+0x1ae8>
   13804:	ldr	r3, [pc, #220]	; 138e8 <__assert_fail@plt+0x1b74>
   13808:	ldr	r2, [pc, #220]	; 138ec <__assert_fail@plt+0x1b78>
   1380c:	ldr	r1, [pc, #220]	; 138f0 <__assert_fail@plt+0x1b7c>
   13810:	ldr	r0, [pc, #220]	; 138f4 <__assert_fail@plt+0x1b80>
   13814:	bl	11d74 <__assert_fail@plt>
   13818:	mov	r2, #0
   1381c:	b	13894 <__assert_fail@plt+0x1b20>
   13820:	ldr	r3, [pc, #188]	; 138e4 <__assert_fail@plt+0x1b70>
   13824:	ldr	r3, [r3, #8]
   13828:	cmp	r3, #0
   1382c:	movne	r4, #0
   13830:	beq	1386c <__assert_fail@plt+0x1af8>
   13834:	ldr	r6, [pc, #168]	; 138e4 <__assert_fail@plt+0x1b70>
   13838:	ldr	r3, [r6, #12]
   1383c:	ldr	r5, [r3, r4, lsl #2]
   13840:	mov	r0, r5
   13844:	bl	136a0 <__assert_fail@plt+0x192c>
   13848:	str	r0, [r5, #148]	; 0x94
   1384c:	add	r4, r4, #1
   13850:	ldr	r3, [r6, #8]
   13854:	cmp	r4, r3
   13858:	bcc	13838 <__assert_fail@plt+0x1ac4>
   1385c:	ldr	r3, [pc, #128]	; 138e4 <__assert_fail@plt+0x1b70>
   13860:	ldr	r3, [r3, #3124]	; 0xc34
   13864:	cmp	r3, #6
   13868:	popeq	{r4, r5, r6, pc}
   1386c:	ldr	r0, [pc, #132]	; 138f8 <__assert_fail@plt+0x1b84>
   13870:	bl	118e8 <_setjmp@plt>
   13874:	cmp	r0, #0
   13878:	beq	13818 <__assert_fail@plt+0x1aa4>
   1387c:	ldr	r3, [pc, #96]	; 138e4 <__assert_fail@plt+0x1b70>
   13880:	ldr	r3, [r3, #3124]	; 0xc34
   13884:	cmp	r3, #4
   13888:	beq	13804 <__assert_fail@plt+0x1a90>
   1388c:	bl	12278 <__assert_fail@plt+0x504>
   13890:	mov	r2, #1
   13894:	ldr	ip, [pc, #72]	; 138e4 <__assert_fail@plt+0x1b70>
   13898:	ldr	r0, [ip, #12]
   1389c:	ldr	r1, [ip, #8]
   138a0:	ldr	ip, [ip, #3124]	; 0xc34
   138a4:	cmp	ip, #5
   138a8:	ldreq	r3, [pc, #52]	; 138e4 <__assert_fail@plt+0x1b70>
   138ac:	ldreq	r3, [r3, #3108]	; 0xc24
   138b0:	movne	r3, #0
   138b4:	add	r3, r3, ip
   138b8:	add	r3, r2, r3, lsl #1
   138bc:	ldr	ip, [pc, #32]	; 138e4 <__assert_fail@plt+0x1b70>
   138c0:	ldrb	r2, [ip, #3584]	; 0xe00
   138c4:	add	r2, r2, r3, lsl #1
   138c8:	ldrb	r3, [ip, #3585]	; 0xe01
   138cc:	add	r2, r3, r2, lsl #1
   138d0:	ldr	r3, [pc, #16]	; 138e8 <__assert_fail@plt+0x1b74>
   138d4:	add	r3, r3, r2, lsl #2
   138d8:	ldr	r2, [r3, #12]
   138dc:	bl	1dc64 <__assert_fail@plt+0xbef0>
   138e0:	pop	{r4, r5, r6, pc}
   138e4:	andeq	r9, r3, r0, lsr r3
   138e8:			; <UNDEFINED> instruction: 0x00023fb8
   138ec:	andeq	r1, r0, r6
   138f0:	andeq	r5, r2, ip, lsl #14
   138f4:	andeq	r5, r2, r8, lsl r7
   138f8:	andeq	r9, r3, r8, lsr #31
   138fc:	push	{r4, r5, lr}
   13900:	sub	sp, sp, #676	; 0x2a4
   13904:	mov	r5, r0
   13908:	ldr	r3, [pc, #352]	; 13a70 <__assert_fail@plt+0x1cfc>
   1390c:	ldrb	r3, [r3, #3112]	; 0xc28
   13910:	cmp	r3, #0
   13914:	beq	1396c <__assert_fail@plt+0x1bf8>
   13918:	ldr	r3, [pc, #336]	; 13a70 <__assert_fail@plt+0x1cfc>
   1391c:	ldr	r3, [r3, #3116]	; 0xc2c
   13920:	cmp	r3, #4
   13924:	beq	13954 <__assert_fail@plt+0x1be0>
   13928:	ldr	r3, [pc, #320]	; 13a70 <__assert_fail@plt+0x1cfc>
   1392c:	ldr	r4, [r3, #3132]	; 0xc3c
   13930:	add	r4, r4, #1
   13934:	ldrb	r3, [r3, #3113]	; 0xc29
   13938:	cmp	r3, #0
   1393c:	bne	13990 <__assert_fail@plt+0x1c1c>
   13940:	ldr	r3, [pc, #296]	; 13a70 <__assert_fail@plt+0x1cfc>
   13944:	ldrb	r3, [r3, #3600]	; 0xe10
   13948:	cmp	r3, #0
   1394c:	bne	139c0 <__assert_fail@plt+0x1c4c>
   13950:	b	139d0 <__assert_fail@plt+0x1c5c>
   13954:	add	r2, sp, #20
   13958:	ldrd	r0, [r0, #112]	; 0x70
   1395c:	bl	1d398 <__assert_fail@plt+0xb624>
   13960:	bl	11b94 <strlen@plt>
   13964:	add	r4, r0, #1
   13968:	b	13970 <__assert_fail@plt+0x1bfc>
   1396c:	mov	r4, #0
   13970:	ldr	r3, [pc, #248]	; 13a70 <__assert_fail@plt+0x1cfc>
   13974:	ldrb	r3, [r3, #3113]	; 0xc29
   13978:	cmp	r3, #0
   1397c:	beq	139a0 <__assert_fail@plt+0x1c2c>
   13980:	ldr	r3, [pc, #232]	; 13a70 <__assert_fail@plt+0x1cfc>
   13984:	ldr	r3, [r3, #3116]	; 0xc2c
   13988:	cmp	r3, #4
   1398c:	beq	13a10 <__assert_fail@plt+0x1c9c>
   13990:	ldr	r3, [pc, #216]	; 13a70 <__assert_fail@plt+0x1cfc>
   13994:	ldr	r0, [r3, #3136]	; 0xc40
   13998:	add	r0, r0, #1
   1399c:	add	r4, r4, r0
   139a0:	ldr	r3, [pc, #200]	; 13a70 <__assert_fail@plt+0x1cfc>
   139a4:	ldrb	r3, [r3, #3600]	; 0xe10
   139a8:	cmp	r3, #0
   139ac:	beq	139d0 <__assert_fail@plt+0x1c5c>
   139b0:	ldr	r3, [pc, #184]	; 13a70 <__assert_fail@plt+0x1cfc>
   139b4:	ldr	r3, [r3, #3116]	; 0xc2c
   139b8:	cmp	r3, #4
   139bc:	beq	13a60 <__assert_fail@plt+0x1cec>
   139c0:	ldr	r3, [pc, #168]	; 13a70 <__assert_fail@plt+0x1cfc>
   139c4:	ldr	r0, [r3, #3156]	; 0xc54
   139c8:	add	r0, r0, #1
   139cc:	add	r4, r4, r0
   139d0:	mov	r0, r5
   139d4:	bl	136a0 <__assert_fail@plt+0x192c>
   139d8:	add	r4, r4, r0
   139dc:	ldr	r3, [pc, #140]	; 13a70 <__assert_fail@plt+0x1cfc>
   139e0:	ldr	r3, [r3, #20]
   139e4:	cmp	r3, #0
   139e8:	beq	13a04 <__assert_fail@plt+0x1c90>
   139ec:	ldr	r2, [r5, #120]	; 0x78
   139f0:	ldr	r1, [r5, #32]
   139f4:	ldrb	r0, [r5, #132]	; 0x84
   139f8:	bl	122b0 <__assert_fail@plt+0x53c>
   139fc:	cmp	r0, #0
   13a00:	addne	r4, r4, #1
   13a04:	mov	r0, r4
   13a08:	add	sp, sp, #676	; 0x2a4
   13a0c:	pop	{r4, r5, pc}
   13a10:	ldrb	r3, [r5, #132]	; 0x84
   13a14:	cmp	r3, #0
   13a18:	ldreq	r0, [pc, #84]	; 13a74 <__assert_fail@plt+0x1d00>
   13a1c:	bne	13a2c <__assert_fail@plt+0x1cb8>
   13a20:	bl	11b94 <strlen@plt>
   13a24:	add	r0, r0, #1
   13a28:	b	1399c <__assert_fail@plt+0x1c28>
   13a2c:	ldr	r2, [pc, #60]	; 13a70 <__assert_fail@plt+0x1cfc>
   13a30:	ldr	r1, [r2, #3588]	; 0xe04
   13a34:	add	r2, r2, #3600	; 0xe10
   13a38:	ldrd	r2, [r2, #-8]
   13a3c:	strd	r2, [sp, #8]
   13a40:	mov	r2, #512	; 0x200
   13a44:	mov	r3, #0
   13a48:	strd	r2, [sp]
   13a4c:	mov	r3, r1
   13a50:	add	r2, sp, #20
   13a54:	ldrd	r0, [r5, #80]	; 0x50
   13a58:	bl	1c540 <__assert_fail@plt+0xa7cc>
   13a5c:	b	13a20 <__assert_fail@plt+0x1cac>
   13a60:	ldr	r0, [r5, #128]	; 0x80
   13a64:	bl	11b94 <strlen@plt>
   13a68:	add	r0, r0, #1
   13a6c:	b	139cc <__assert_fail@plt+0x1c58>
   13a70:	andeq	r9, r3, r0, lsr r3
   13a74:	andeq	r5, r2, r4, lsr r7
   13a78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a7c:	sub	sp, sp, #20
   13a80:	mov	r7, r0
   13a84:	ldr	r3, [pc, #808]	; 13db4 <__assert_fail@plt+0x2040>
   13a88:	ldr	r1, [r3, #3604]	; 0xe14
   13a8c:	cmp	r1, #0
   13a90:	beq	13d9c <__assert_fail@plt+0x2028>
   13a94:	ldr	r3, [r3, #8]
   13a98:	cmp	r1, r3
   13a9c:	bcc	13d68 <__assert_fail@plt+0x1ff4>
   13aa0:	ldr	r3, [pc, #780]	; 13db4 <__assert_fail@plt+0x2040>
   13aa4:	ldr	fp, [r3, #8]
   13aa8:	ldr	r3, [r3, #3612]	; 0xe1c
   13aac:	cmp	fp, r3
   13ab0:	bls	13b64 <__assert_fail@plt+0x1df0>
   13ab4:	cmp	fp, r1, lsr #1
   13ab8:	bcs	13be8 <__assert_fail@plt+0x1e74>
   13abc:	ldr	r4, [pc, #752]	; 13db4 <__assert_fail@plt+0x2040>
   13ac0:	mov	r2, #24
   13ac4:	mov	r1, fp
   13ac8:	ldr	r0, [r4, #3608]	; 0xe18
   13acc:	bl	22300 <_obstack_memory_used@@Base+0x292c>
   13ad0:	str	r0, [r4, #3608]	; 0xe18
   13ad4:	lsl	r4, fp, #1
   13ad8:	ldr	r3, [pc, #724]	; 13db4 <__assert_fail@plt+0x2040>
   13adc:	ldr	r3, [r3, #3612]	; 0xe1c
   13ae0:	sub	r1, r4, r3
   13ae4:	add	r3, r3, #1
   13ae8:	add	r5, r3, r4
   13aec:	mul	r6, r5, r1
   13af0:	cmp	r4, r5
   13af4:	bhi	13c04 <__assert_fail@plt+0x1e90>
   13af8:	mov	r0, r6
   13afc:	bl	2349c <_obstack_memory_used@@Base+0x3ac8>
   13b00:	cmp	r5, r0
   13b04:	bne	13c04 <__assert_fail@plt+0x1e90>
   13b08:	mov	r1, #4
   13b0c:	lsr	r0, r6, #1
   13b10:	bl	22374 <_obstack_memory_used@@Base+0x29a0>
   13b14:	ldr	r3, [pc, #664]	; 13db4 <__assert_fail@plt+0x2040>
   13b18:	ldr	r3, [r3, #3612]	; 0xe1c
   13b1c:	cmp	r4, r3
   13b20:	bls	13b5c <__assert_fail@plt+0x1de8>
   13b24:	add	r1, r3, r3, lsl #1
   13b28:	ldr	r2, [pc, #644]	; 13db4 <__assert_fail@plt+0x2040>
   13b2c:	ldr	r2, [r2, #3608]	; 0xe18
   13b30:	add	r2, r2, r1, lsl #2
   13b34:	add	r3, r3, #1
   13b38:	lsl	r3, r3, #2
   13b3c:	add	r1, r4, #1
   13b40:	lsl	r1, r1, #2
   13b44:	str	r0, [r2, #8]
   13b48:	add	r0, r0, r3
   13b4c:	add	r2, r2, #12
   13b50:	add	r3, r3, #4
   13b54:	cmp	r3, r1
   13b58:	bne	13b44 <__assert_fail@plt+0x1dd0>
   13b5c:	ldr	r3, [pc, #592]	; 13db4 <__assert_fail@plt+0x2040>
   13b60:	str	r4, [r3, #3612]	; 0xe1c
   13b64:	cmp	fp, #0
   13b68:	beq	13d84 <__assert_fail@plt+0x2010>
   13b6c:	ldr	r3, [pc, #576]	; 13db4 <__assert_fail@plt+0x2040>
   13b70:	ldr	lr, [r3, #3608]	; 0xe18
   13b74:	mov	r1, #0
   13b78:	mov	r5, #1
   13b7c:	mov	ip, #3
   13b80:	mov	r0, lr
   13b84:	strb	r5, [lr]
   13b88:	add	r4, r1, #1
   13b8c:	add	r3, r4, r4, lsl #1
   13b90:	str	r3, [lr, #4]
   13b94:	mov	r3, #0
   13b98:	ldr	r2, [r0, #8]
   13b9c:	str	ip, [r2, r3, lsl #2]
   13ba0:	add	r3, r3, #1
   13ba4:	cmp	r3, r1
   13ba8:	bls	13b98 <__assert_fail@plt+0x1e24>
   13bac:	add	lr, lr, #12
   13bb0:	mov	r1, r4
   13bb4:	cmp	fp, r4
   13bb8:	bne	13b80 <__assert_fail@plt+0x1e0c>
   13bbc:	ldr	r3, [pc, #496]	; 13db4 <__assert_fail@plt+0x2040>
   13bc0:	ldr	r3, [r3, #8]
   13bc4:	cmp	r3, #0
   13bc8:	beq	13d14 <__assert_fail@plt+0x1fa0>
   13bcc:	mov	r3, #0
   13bd0:	str	r3, [sp]
   13bd4:	ldr	sl, [pc, #472]	; 13db4 <__assert_fail@plt+0x2040>
   13bd8:	add	r8, fp, #1
   13bdc:	str	fp, [sp, #12]
   13be0:	mov	fp, r7
   13be4:	b	13cd0 <__assert_fail@plt+0x1f5c>
   13be8:	ldr	r4, [pc, #452]	; 13db4 <__assert_fail@plt+0x2040>
   13bec:	mov	r2, #12
   13bf0:	ldr	r0, [r4, #3608]	; 0xe18
   13bf4:	bl	22300 <_obstack_memory_used@@Base+0x292c>
   13bf8:	str	r0, [r4, #3608]	; 0xe18
   13bfc:	ldr	r4, [r4, #3604]	; 0xe14
   13c00:	b	13ad8 <__assert_fail@plt+0x1d64>
   13c04:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   13c08:	mov	r1, r4
   13c0c:	ldr	r0, [sp]
   13c10:	bl	23688 <_obstack_memory_used@@Base+0x3cb4>
   13c14:	b	13c64 <__assert_fail@plt+0x1ef0>
   13c18:	add	r4, r4, #1
   13c1c:	add	r5, r5, #12
   13c20:	cmp	r4, r8
   13c24:	beq	13cb4 <__assert_fail@plt+0x1f40>
   13c28:	sub	r6, r4, #1
   13c2c:	mov	r7, r5
   13c30:	ldrb	r3, [r5]
   13c34:	cmp	r3, #0
   13c38:	beq	13c18 <__assert_fail@plt+0x1ea4>
   13c3c:	cmp	fp, #0
   13c40:	beq	13c08 <__assert_fail@plt+0x1e94>
   13c44:	mov	r1, r4
   13c48:	ldr	r3, [sp, #8]
   13c4c:	add	r0, r3, r4
   13c50:	bl	2349c <_obstack_memory_used@@Base+0x3ac8>
   13c54:	mov	r1, r0
   13c58:	ldr	r0, [sp]
   13c5c:	bl	2349c <_obstack_memory_used@@Base+0x3ac8>
   13c60:	mov	r1, r0
   13c64:	cmp	r1, r6
   13c68:	movne	r6, #2
   13c6c:	moveq	r6, #0
   13c70:	add	r6, r6, r9
   13c74:	ldr	r2, [r7, #8]
   13c78:	ldr	r0, [r2, r1, lsl #2]
   13c7c:	cmp	r6, r0
   13c80:	bls	13c18 <__assert_fail@plt+0x1ea4>
   13c84:	ldr	r3, [r7, #4]
   13c88:	sub	r3, r3, r0
   13c8c:	add	r3, r3, r6
   13c90:	str	r3, [r7, #4]
   13c94:	str	r6, [r2, r1, lsl #2]
   13c98:	ldr	r3, [r7, #4]
   13c9c:	ldr	r2, [sp, #4]
   13ca0:	cmp	r3, r2
   13ca4:	movcs	r3, #0
   13ca8:	movcc	r3, #1
   13cac:	strb	r3, [r7]
   13cb0:	b	13c18 <__assert_fail@plt+0x1ea4>
   13cb4:	ldr	r3, [sp]
   13cb8:	add	r3, r3, #1
   13cbc:	mov	r2, r3
   13cc0:	str	r3, [sp]
   13cc4:	ldr	r3, [sl, #8]
   13cc8:	cmp	r3, r2
   13ccc:	bls	13d10 <__assert_fail@plt+0x1f9c>
   13cd0:	ldr	r3, [sl, #12]
   13cd4:	ldr	r2, [sp]
   13cd8:	ldr	r0, [r3, r2, lsl #2]
   13cdc:	bl	138fc <__assert_fail@plt+0x1b88>
   13ce0:	mov	r9, r0
   13ce4:	ldr	r3, [sp, #12]
   13ce8:	cmp	r3, #0
   13cec:	beq	13cb4 <__assert_fail@plt+0x1f40>
   13cf0:	ldr	r3, [sl, #8]
   13cf4:	ldr	r2, [sl, #3188]	; 0xc74
   13cf8:	str	r2, [sp, #4]
   13cfc:	ldr	r5, [sl, #3608]	; 0xe18
   13d00:	mov	r4, #1
   13d04:	sub	r3, r3, #1
   13d08:	str	r3, [sp, #8]
   13d0c:	b	13c28 <__assert_fail@plt+0x1eb4>
   13d10:	ldr	fp, [sp, #12]
   13d14:	cmp	fp, #1
   13d18:	bls	13d5c <__assert_fail@plt+0x1fe8>
   13d1c:	ldr	r3, [pc, #144]	; 13db4 <__assert_fail@plt+0x2040>
   13d20:	ldr	r3, [r3, #3608]	; 0xe18
   13d24:	add	r2, fp, fp, lsl #1
   13d28:	lsl	r2, r2, #2
   13d2c:	add	r1, r3, r2
   13d30:	ldrb	r1, [r1, #-12]
   13d34:	cmp	r1, #0
   13d38:	bne	13d5c <__assert_fail@plt+0x1fe8>
   13d3c:	add	r3, r3, r2
   13d40:	sub	fp, fp, #1
   13d44:	cmp	fp, #1
   13d48:	beq	13d5c <__assert_fail@plt+0x1fe8>
   13d4c:	sub	r3, r3, #12
   13d50:	ldrb	r2, [r3, #-12]
   13d54:	cmp	r2, #0
   13d58:	beq	13d40 <__assert_fail@plt+0x1fcc>
   13d5c:	mov	r0, fp
   13d60:	add	sp, sp, #20
   13d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d68:	ldr	r3, [pc, #68]	; 13db4 <__assert_fail@plt+0x2040>
   13d6c:	ldr	r3, [r3, #3612]	; 0xe1c
   13d70:	cmp	r1, r3
   13d74:	movls	fp, r1
   13d78:	bls	13b6c <__assert_fail@plt+0x1df8>
   13d7c:	mov	fp, r1
   13d80:	b	13ab4 <__assert_fail@plt+0x1d40>
   13d84:	ldr	r3, [pc, #40]	; 13db4 <__assert_fail@plt+0x2040>
   13d88:	ldr	r3, [r3, #8]
   13d8c:	cmp	r3, #0
   13d90:	moveq	fp, r3
   13d94:	bne	13bcc <__assert_fail@plt+0x1e58>
   13d98:	b	13d5c <__assert_fail@plt+0x1fe8>
   13d9c:	ldr	r3, [pc, #16]	; 13db4 <__assert_fail@plt+0x2040>
   13da0:	ldr	fp, [r3, #8]
   13da4:	ldr	r3, [r3, #3612]	; 0xe1c
   13da8:	cmp	fp, r3
   13dac:	bls	13b64 <__assert_fail@plt+0x1df0>
   13db0:	b	13abc <__assert_fail@plt+0x1d48>
   13db4:	andeq	r9, r3, r0, lsr r3
   13db8:	push	{r4, r5, r6, r7, r8, lr}
   13dbc:	mov	r6, r0
   13dc0:	mov	r7, r1
   13dc4:	mov	r5, r2
   13dc8:	mov	r1, #46	; 0x2e
   13dcc:	ldr	r0, [r0]
   13dd0:	bl	11c78 <strrchr@plt>
   13dd4:	mov	r4, r0
   13dd8:	mov	r1, #46	; 0x2e
   13ddc:	ldr	r0, [r7]
   13de0:	bl	11c78 <strrchr@plt>
   13de4:	ldr	r1, [pc, #44]	; 13e18 <__assert_fail@plt+0x20a4>
   13de8:	cmp	r0, #0
   13dec:	movne	r1, r0
   13df0:	ldr	r0, [pc, #32]	; 13e18 <__assert_fail@plt+0x20a4>
   13df4:	cmp	r4, #0
   13df8:	movne	r0, r4
   13dfc:	blx	r5
   13e00:	cmp	r0, #0
   13e04:	popne	{r4, r5, r6, r7, r8, pc}
   13e08:	ldr	r1, [r7]
   13e0c:	ldr	r0, [r6]
   13e10:	blx	r5
   13e14:	pop	{r4, r5, r6, r7, r8, pc}
   13e18:	andeq	r8, r2, ip, ror #1
   13e1c:	push	{r4, lr}
   13e20:	mov	r3, r1
   13e24:	ldr	r2, [pc, #12]	; 13e38 <__assert_fail@plt+0x20c4>
   13e28:	mov	r1, r0
   13e2c:	mov	r0, r3
   13e30:	bl	13db8 <__assert_fail@plt+0x2044>
   13e34:	pop	{r4, pc}
   13e38:	andeq	r1, r1, r0, lsr #17
   13e3c:	push	{r4, lr}
   13e40:	ldr	r2, [pc, #4]	; 13e4c <__assert_fail@plt+0x20d8>
   13e44:	bl	13db8 <__assert_fail@plt+0x2044>
   13e48:	pop	{r4, pc}
   13e4c:	andeq	r1, r1, r0, lsr #17
   13e50:	push	{r4, lr}
   13e54:	mov	r3, r1
   13e58:	ldr	r2, [pc, #12]	; 13e6c <__assert_fail@plt+0x20f8>
   13e5c:	mov	r1, r0
   13e60:	mov	r0, r3
   13e64:	bl	13db8 <__assert_fail@plt+0x2044>
   13e68:	pop	{r4, pc}
   13e6c:	andeq	r3, r1, r0, asr #3
   13e70:	push	{r4, lr}
   13e74:	ldr	r2, [pc, #4]	; 13e80 <__assert_fail@plt+0x210c>
   13e78:	bl	13db8 <__assert_fail@plt+0x2044>
   13e7c:	pop	{r4, pc}
   13e80:	andeq	r3, r1, r0, asr #3
   13e84:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e88:	mov	r9, r1
   13e8c:	subs	r8, r0, #0
   13e90:	beq	13eb4 <__assert_fail@plt+0x2140>
   13e94:	ldr	r3, [pc, #332]	; 13fe8 <__assert_fail@plt+0x2274>
   13e98:	ldr	r3, [r3, #3616]	; 0xe20
   13e9c:	cmp	r3, #0
   13ea0:	beq	13eb4 <__assert_fail@plt+0x2140>
   13ea4:	mov	r2, #0
   13ea8:	mov	r1, r8
   13eac:	mov	r0, r2
   13eb0:	bl	12750 <__assert_fail@plt+0x9dc>
   13eb4:	ldr	r3, [pc, #300]	; 13fe8 <__assert_fail@plt+0x2274>
   13eb8:	ldr	r4, [r3, #8]
   13ebc:	sub	r5, r4, #-1073741823	; 0xc0000001
   13ec0:	lsl	r5, r5, #2
   13ec4:	mov	r7, r3
   13ec8:	mov	sl, #0
   13ecc:	b	13f18 <__assert_fail@plt+0x21a4>
   13ed0:	ldrb	r3, [r0, #1]
   13ed4:	cmp	r3, #46	; 0x2e
   13ed8:	moveq	r3, #2
   13edc:	movne	r3, #1
   13ee0:	ldrb	r3, [r0, r3]
   13ee4:	cmp	r3, #47	; 0x2f
   13ee8:	cmpne	r3, #0
   13eec:	beq	13f10 <__assert_fail@plt+0x219c>
   13ef0:	b	13f58 <__assert_fail@plt+0x21e4>
   13ef4:	mov	r2, r9
   13ef8:	ldr	r1, [r6, #4]
   13efc:	ldr	r0, [r6]
   13f00:	bl	12750 <__assert_fail@plt+0x9dc>
   13f04:	ldr	r3, [r6, #120]	; 0x78
   13f08:	cmp	r3, #9
   13f0c:	beq	13f90 <__assert_fail@plt+0x221c>
   13f10:	sub	r4, r4, #1
   13f14:	sub	r5, r5, #4
   13f18:	cmp	r4, #0
   13f1c:	beq	13f9c <__assert_fail@plt+0x2228>
   13f20:	ldr	r3, [r7, #12]
   13f24:	ldr	r6, [r3, r5]
   13f28:	ldr	r3, [r6, #120]	; 0x78
   13f2c:	cmp	r3, #9
   13f30:	cmpne	r3, #3
   13f34:	bne	13f10 <__assert_fail@plt+0x219c>
   13f38:	cmp	r8, #0
   13f3c:	beq	13ef4 <__assert_fail@plt+0x2180>
   13f40:	ldr	fp, [r6]
   13f44:	mov	r0, fp
   13f48:	bl	1a118 <__assert_fail@plt+0x83a4>
   13f4c:	ldrb	r3, [r0]
   13f50:	cmp	r3, #46	; 0x2e
   13f54:	beq	13ed0 <__assert_fail@plt+0x215c>
   13f58:	ldrb	r3, [fp]
   13f5c:	cmp	r3, #47	; 0x2f
   13f60:	beq	13ef4 <__assert_fail@plt+0x2180>
   13f64:	mov	r2, sl
   13f68:	mov	r1, fp
   13f6c:	mov	r0, r8
   13f70:	bl	1ae14 <__assert_fail@plt+0x90a0>
   13f74:	mov	fp, r0
   13f78:	mov	r2, r9
   13f7c:	ldr	r1, [r6, #4]
   13f80:	bl	12750 <__assert_fail@plt+0x9dc>
   13f84:	mov	r0, fp
   13f88:	bl	1b388 <__assert_fail@plt+0x9614>
   13f8c:	b	13f04 <__assert_fail@plt+0x2190>
   13f90:	mov	r0, r6
   13f94:	bl	12df4 <__assert_fail@plt+0x1080>
   13f98:	b	13f10 <__assert_fail@plt+0x219c>
   13f9c:	ldr	r3, [pc, #68]	; 13fe8 <__assert_fail@plt+0x2274>
   13fa0:	ldr	r1, [r3, #8]
   13fa4:	cmp	r1, #0
   13fa8:	beq	13fe0 <__assert_fail@plt+0x226c>
   13fac:	ldr	r0, [r3, #12]
   13fb0:	mov	r3, r0
   13fb4:	add	r1, r0, r1, lsl #2
   13fb8:	ldr	r2, [r3], #4
   13fbc:	str	r2, [r0, r4, lsl #2]
   13fc0:	ldr	r2, [r2, #120]	; 0x78
   13fc4:	cmp	r2, #9
   13fc8:	addne	r4, r4, #1
   13fcc:	cmp	r3, r1
   13fd0:	bne	13fb8 <__assert_fail@plt+0x2244>
   13fd4:	ldr	r3, [pc, #12]	; 13fe8 <__assert_fail@plt+0x2274>
   13fd8:	str	r4, [r3, #8]
   13fdc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fe0:	mov	r4, r1
   13fe4:	b	13fd4 <__assert_fail@plt+0x2260>
   13fe8:	andeq	r9, r3, r0, lsr r3
   13fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ff0:	sub	sp, sp, #20
   13ff4:	mov	r5, r0
   13ff8:	mov	r7, r1
   13ffc:	bl	11b94 <strlen@plt>
   14000:	add	r1, r0, #1
   14004:	mov	r0, #3
   14008:	bl	22374 <_obstack_memory_used@@Base+0x29a0>
   1400c:	str	r0, [sp, #12]
   14010:	mov	r4, r0
   14014:	ldr	r6, [pc, #132]	; 140a0 <__assert_fail@plt+0x232c>
   14018:	ldr	sl, [pc, #132]	; 140a4 <__assert_fail@plt+0x2330>
   1401c:	mvn	r9, #0
   14020:	mov	r8, #1
   14024:	mov	fp, #47	; 0x2f
   14028:	b	14044 <__assert_fail@plt+0x22d0>
   1402c:	add	r2, r6, r3
   14030:	ldrb	r2, [r2, #3620]	; 0xe24
   14034:	cmp	r2, #0
   14038:	beq	14070 <__assert_fail@plt+0x22fc>
   1403c:	strb	r3, [r4]
   14040:	add	r4, r4, #1
   14044:	ldrb	r3, [r5], #1
   14048:	cmp	r3, #0
   1404c:	beq	14090 <__assert_fail@plt+0x231c>
   14050:	cmp	r3, #47	; 0x2f
   14054:	movne	r2, #0
   14058:	andeq	r2, r7, #1
   1405c:	cmp	r2, #0
   14060:	strbne	fp, [r4]
   14064:	addne	r4, r4, #1
   14068:	beq	1402c <__assert_fail@plt+0x22b8>
   1406c:	b	14044 <__assert_fail@plt+0x22d0>
   14070:	str	r3, [sp]
   14074:	mov	r3, sl
   14078:	mov	r2, r9
   1407c:	mov	r1, r8
   14080:	mov	r0, r4
   14084:	bl	11bc4 <__sprintf_chk@plt>
   14088:	add	r4, r4, r0
   1408c:	b	14044 <__assert_fail@plt+0x22d0>
   14090:	strb	r3, [r4]
   14094:	ldr	r0, [sp, #12]
   14098:	add	sp, sp, #20
   1409c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140a0:	andeq	r9, r3, r0, lsr r3
   140a4:	andeq	r5, r2, r8, lsr r7
   140a8:	ldr	ip, [pc, #72]	; 140f8 <__assert_fail@plt+0x2384>
   140ac:	ldrd	r2, [ip, #-8]
   140b0:	adds	r2, r2, #1
   140b4:	adc	r3, r3, #0
   140b8:	strd	r2, [ip, #-8]
   140bc:	ldr	r3, [pc, #56]	; 140fc <__assert_fail@plt+0x2388>
   140c0:	ldr	r3, [r3]
   140c4:	ldr	r2, [r3, #20]
   140c8:	ldr	r1, [r3, #24]
   140cc:	cmp	r2, r1
   140d0:	bcs	140e4 <__assert_fail@plt+0x2370>
   140d4:	add	r1, r2, #1
   140d8:	str	r1, [r3, #20]
   140dc:	strb	r0, [r2]
   140e0:	bx	lr
   140e4:	push	{r4, lr}
   140e8:	mov	r1, r0
   140ec:	mov	r0, r3
   140f0:	bl	11c48 <__overflow@plt>
   140f4:	pop	{r4, pc}
   140f8:	andeq	sl, r3, r0, ror #4
   140fc:	andeq	r9, r3, r4, lsr #6
   14100:	push	{r4, lr}
   14104:	bl	122b0 <__assert_fail@plt+0x53c>
   14108:	subs	r4, r0, #0
   1410c:	bne	1411c <__assert_fail@plt+0x23a8>
   14110:	adds	r0, r4, #0
   14114:	movne	r0, #1
   14118:	pop	{r4, pc}
   1411c:	mov	r0, r4
   14120:	bl	140a8 <__assert_fail@plt+0x2334>
   14124:	b	14110 <__assert_fail@plt+0x239c>
   14128:	cmp	r0, r1
   1412c:	bxcs	lr
   14130:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14134:	mov	r4, r0
   14138:	mov	r6, r1
   1413c:	ldr	r7, [pc, #192]	; 14204 <__assert_fail@plt+0x2490>
   14140:	ldr	r8, [pc, #192]	; 14208 <__assert_fail@plt+0x2494>
   14144:	mov	sl, #9
   14148:	mov	r9, #32
   1414c:	b	14188 <__assert_fail@plt+0x2414>
   14150:	mov	r1, sl
   14154:	bl	11c48 <__overflow@plt>
   14158:	b	141d8 <__assert_fail@plt+0x2464>
   1415c:	ldr	r0, [r8]
   14160:	ldr	r3, [r0, #20]
   14164:	ldr	r2, [r0, #24]
   14168:	cmp	r3, r2
   1416c:	addcc	r2, r3, #1
   14170:	strcc	r2, [r0, #20]
   14174:	strbcc	r9, [r3]
   14178:	bcs	141f4 <__assert_fail@plt+0x2480>
   1417c:	add	r4, r4, #1
   14180:	cmp	r6, r4
   14184:	bls	14200 <__assert_fail@plt+0x248c>
   14188:	ldr	r5, [r7, #3888]	; 0xf30
   1418c:	cmp	r5, #0
   14190:	beq	1415c <__assert_fail@plt+0x23e8>
   14194:	mov	r1, r5
   14198:	mov	r0, r6
   1419c:	bl	2349c <_obstack_memory_used@@Base+0x3ac8>
   141a0:	mov	fp, r0
   141a4:	mov	r1, r5
   141a8:	add	r0, r4, #1
   141ac:	bl	2349c <_obstack_memory_used@@Base+0x3ac8>
   141b0:	cmp	fp, r0
   141b4:	bls	1415c <__assert_fail@plt+0x23e8>
   141b8:	ldr	r0, [r8]
   141bc:	ldr	r3, [r0, #20]
   141c0:	ldr	r2, [r0, #24]
   141c4:	cmp	r3, r2
   141c8:	addcc	r2, r3, #1
   141cc:	strcc	r2, [r0, #20]
   141d0:	strbcc	sl, [r3]
   141d4:	bcs	14150 <__assert_fail@plt+0x23dc>
   141d8:	ldr	r5, [r7, #3888]	; 0xf30
   141dc:	mov	r1, r5
   141e0:	mov	r0, r4
   141e4:	bl	23688 <_obstack_memory_used@@Base+0x3cb4>
   141e8:	add	r4, r5, r4
   141ec:	sub	r4, r4, r1
   141f0:	b	14180 <__assert_fail@plt+0x240c>
   141f4:	mov	r1, r9
   141f8:	bl	11c48 <__overflow@plt>
   141fc:	b	1417c <__assert_fail@plt+0x2408>
   14200:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14204:	andeq	r9, r3, r0, lsr r3
   14208:	andeq	r9, r3, r4, lsr #6
   1420c:	push	{r4, r5, r6, lr}
   14210:	mov	r2, r1
   14214:	ldr	r3, [pc, #32]	; 1423c <__assert_fail@plt+0x24c8>
   14218:	ldrd	r4, [r3, #-8]
   1421c:	adds	r4, r4, r1
   14220:	adc	r5, r5, #0
   14224:	strd	r4, [r3, #-8]
   14228:	ldr	r3, [pc, #16]	; 14240 <__assert_fail@plt+0x24cc>
   1422c:	ldr	r3, [r3]
   14230:	mov	r1, #1
   14234:	bl	11960 <fwrite_unlocked@plt>
   14238:	pop	{r4, r5, r6, pc}
   1423c:	andeq	sl, r3, r0, ror #4
   14240:	andeq	r9, r3, r4, lsr #6
   14244:	push	{r4, lr}
   14248:	mov	r4, r0
   1424c:	bl	11b94 <strlen@plt>
   14250:	mov	r1, r0
   14254:	mov	r0, r4
   14258:	bl	1420c <__assert_fail@plt+0x2498>
   1425c:	pop	{r4, pc}
   14260:	ldr	r3, [pc, #24]	; 14280 <__assert_fail@plt+0x250c>
   14264:	ldrb	r3, [r3, #3892]	; 0xf34
   14268:	cmp	r3, #0
   1426c:	bxeq	lr
   14270:	push	{r4, lr}
   14274:	ldr	r0, [pc, #8]	; 14284 <__assert_fail@plt+0x2510>
   14278:	bl	14244 <__assert_fail@plt+0x24d0>
   1427c:	pop	{r4, pc}
   14280:	andeq	r9, r3, r0, lsr r3
   14284:	andeq	r5, r2, r0, asr #14
   14288:	ldr	r3, [pc, #84]	; 142e4 <__assert_fail@plt+0x2570>
   1428c:	ldrb	r3, [r3, #3892]	; 0xf34
   14290:	cmp	r3, #0
   14294:	bxeq	lr
   14298:	push	{r4, lr}
   1429c:	mov	r4, r0
   142a0:	ldr	r3, [r0, #16]
   142a4:	ldr	r2, [r0, #12]
   142a8:	sub	r3, r3, r2
   142ac:	cmp	r3, #7
   142b0:	bls	142d8 <__assert_fail@plt+0x2564>
   142b4:	ldr	r2, [r4, #12]
   142b8:	ldr	r3, [pc, #40]	; 142e8 <__assert_fail@plt+0x2574>
   142bc:	ldm	r3!, {r0, r1}
   142c0:	str	r0, [r2]
   142c4:	str	r1, [r2, #4]
   142c8:	ldr	r3, [r4, #12]
   142cc:	add	r3, r3, #8
   142d0:	str	r3, [r4, #12]
   142d4:	pop	{r4, pc}
   142d8:	mov	r1, #8
   142dc:	bl	1f80c <_obstack_newchunk@@Base>
   142e0:	b	142b4 <__assert_fail@plt+0x2540>
   142e4:	andeq	r9, r3, r0, lsr r3
   142e8:	andeq	sl, r3, r8, asr r2
   142ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142f0:	sub	sp, sp, #148	; 0x94
   142f4:	mov	r7, r0
   142f8:	ldr	r3, [pc, #276]	; 14414 <__assert_fail@plt+0x26a0>
   142fc:	ldrb	r3, [r3, #3893]	; 0xf35
   14300:	cmp	r3, #0
   14304:	beq	14328 <__assert_fail@plt+0x25b4>
   14308:	ldr	r3, [pc, #264]	; 14418 <__assert_fail@plt+0x26a4>
   1430c:	ldr	r3, [r3]
   14310:	mov	r2, #1
   14314:	ldr	r1, [r7]
   14318:	ldr	r0, [r7, #4]
   1431c:	bl	11960 <fwrite_unlocked@plt>
   14320:	add	sp, sp, #148	; 0x94
   14324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14328:	mov	r0, #1
   1432c:	ldr	r3, [pc, #224]	; 14414 <__assert_fail@plt+0x26a0>
   14330:	strb	r0, [r3, #3893]	; 0xf35
   14334:	bl	11b88 <tcgetpgrp@plt>
   14338:	cmp	r0, #0
   1433c:	blt	1440c <__assert_fail@plt+0x2698>
   14340:	ldr	r0, [pc, #212]	; 1441c <__assert_fail@plt+0x26a8>
   14344:	bl	11c60 <sigemptyset@plt>
   14348:	ldr	r8, [pc, #208]	; 14420 <__assert_fail@plt+0x26ac>
   1434c:	add	r5, r8, #296	; 0x128
   14350:	add	r8, r8, #344	; 0x158
   14354:	mov	r4, r5
   14358:	mov	r9, #0
   1435c:	ldr	sl, [pc, #184]	; 1441c <__assert_fail@plt+0x26a8>
   14360:	b	1436c <__assert_fail@plt+0x25f8>
   14364:	cmp	r4, r8
   14368:	beq	1439c <__assert_fail@plt+0x2628>
   1436c:	ldr	r6, [r4, #4]!
   14370:	add	r2, sp, #4
   14374:	mov	r1, r9
   14378:	mov	r0, r6
   1437c:	bl	11a14 <sigaction@plt>
   14380:	ldr	r3, [sp, #4]
   14384:	cmp	r3, #1
   14388:	beq	14364 <__assert_fail@plt+0x25f0>
   1438c:	mov	r1, r6
   14390:	mov	r0, sl
   14394:	bl	11aec <sigaddset@plt>
   14398:	b	14364 <__assert_fail@plt+0x25f0>
   1439c:	mov	r2, #128	; 0x80
   143a0:	ldr	r1, [pc, #116]	; 1441c <__assert_fail@plt+0x26a8>
   143a4:	add	r0, sp, #8
   143a8:	bl	11930 <memcpy@plt>
   143ac:	mov	r3, #268435456	; 0x10000000
   143b0:	str	r3, [sp, #136]	; 0x88
   143b4:	ldr	r8, [pc, #96]	; 1441c <__assert_fail@plt+0x26a8>
   143b8:	ldr	fp, [pc, #100]	; 14424 <__assert_fail@plt+0x26b0>
   143bc:	ldr	sl, [pc, #100]	; 14428 <__assert_fail@plt+0x26b4>
   143c0:	mov	r9, #0
   143c4:	b	143d0 <__assert_fail@plt+0x265c>
   143c8:	cmp	r4, r5
   143cc:	beq	1440c <__assert_fail@plt+0x2698>
   143d0:	ldr	r6, [r5, #4]!
   143d4:	mov	r1, r6
   143d8:	mov	r0, r8
   143dc:	bl	1199c <sigismember@plt>
   143e0:	cmp	r0, #0
   143e4:	beq	143c8 <__assert_fail@plt+0x2654>
   143e8:	cmp	r6, #20
   143ec:	moveq	r3, fp
   143f0:	movne	r3, sl
   143f4:	str	r3, [sp, #4]
   143f8:	mov	r2, r9
   143fc:	add	r1, sp, #4
   14400:	mov	r0, r6
   14404:	bl	11a14 <sigaction@plt>
   14408:	b	143c8 <__assert_fail@plt+0x2654>
   1440c:	bl	1442c <__assert_fail@plt+0x26b8>
   14410:	b	14308 <__assert_fail@plt+0x2594>
   14414:	andeq	r9, r3, r0, lsr r3
   14418:	andeq	r9, r3, r4, lsr #6
   1441c:	andeq	sl, r3, r8, ror #4
   14420:			; <UNDEFINED> instruction: 0x00023fb8
   14424:	andeq	r1, r1, r0, lsr #30
   14428:	andeq	r1, r1, r4, lsl #30
   1442c:	push	{r4, lr}
   14430:	ldr	r3, [pc, #52]	; 1446c <__assert_fail@plt+0x26f8>
   14434:	ldr	r3, [r3, #20]
   14438:	cmp	r3, #0
   1443c:	beq	1444c <__assert_fail@plt+0x26d8>
   14440:	ldr	r0, [pc, #40]	; 14470 <__assert_fail@plt+0x26fc>
   14444:	bl	142ec <__assert_fail@plt+0x2578>
   14448:	pop	{r4, pc}
   1444c:	ldr	r4, [pc, #24]	; 1446c <__assert_fail@plt+0x26f8>
   14450:	mov	r0, r4
   14454:	bl	142ec <__assert_fail@plt+0x2578>
   14458:	add	r0, r4, #24
   1445c:	bl	142ec <__assert_fail@plt+0x2578>
   14460:	add	r0, r4, #8
   14464:	bl	142ec <__assert_fail@plt+0x2578>
   14468:	pop	{r4, pc}
   1446c:	ldrdeq	r9, [r3], -r0
   14470:	andeq	r9, r3, r0, ror #3
   14474:	ldr	r3, [pc, #60]	; 144b8 <__assert_fail@plt+0x2744>
   14478:	ldrb	r3, [r3, #4024]	; 0xfb8
   1447c:	cmp	r3, #0
   14480:	bxeq	lr
   14484:	push	{r4, lr}
   14488:	mov	r0, #4
   1448c:	bl	1245c <__assert_fail@plt+0x6e8>
   14490:	cmp	r0, #0
   14494:	popeq	{r4, pc}
   14498:	ldr	r4, [pc, #28]	; 144bc <__assert_fail@plt+0x2748>
   1449c:	mov	r0, r4
   144a0:	bl	142ec <__assert_fail@plt+0x2578>
   144a4:	add	r0, r4, #32
   144a8:	bl	142ec <__assert_fail@plt+0x2578>
   144ac:	add	r0, r4, #8
   144b0:	bl	142ec <__assert_fail@plt+0x2578>
   144b4:	pop	{r4, pc}
   144b8:	andeq	r9, r3, r0, lsr r3
   144bc:	ldrdeq	r9, [r3], -r0
   144c0:	push	{r4, lr}
   144c4:	ldr	r4, [pc, #16]	; 144dc <__assert_fail@plt+0x2768>
   144c8:	mov	r0, r4
   144cc:	bl	142ec <__assert_fail@plt+0x2578>
   144d0:	add	r0, r4, #8
   144d4:	bl	142ec <__assert_fail@plt+0x2578>
   144d8:	pop	{r4, pc}
   144dc:	ldrdeq	r9, [r3], -r0
   144e0:	push	{r4, r5, r6, r7, r8, lr}
   144e4:	sub	sp, sp, #128	; 0x80
   144e8:	ldr	r4, [pc, #160]	; 14590 <__assert_fail@plt+0x281c>
   144ec:	ldr	r8, [pc, #160]	; 14594 <__assert_fail@plt+0x2820>
   144f0:	add	r7, r4, #3888	; 0xf30
   144f4:	add	r7, r7, #8
   144f8:	mov	r6, #0
   144fc:	b	14558 <__assert_fail@plt+0x27e4>
   14500:	ldrb	r3, [r4, #3893]	; 0xf35
   14504:	cmp	r3, #0
   14508:	bne	14578 <__assert_fail@plt+0x2804>
   1450c:	ldr	r0, [r8]
   14510:	bl	119e4 <fflush_unlocked@plt>
   14514:	mov	r2, sp
   14518:	mov	r1, r7
   1451c:	mov	r0, r6
   14520:	bl	118dc <sigprocmask@plt>
   14524:	ldr	r5, [r4]
   14528:	ldr	r3, [r4, #4]
   1452c:	cmp	r3, #0
   14530:	beq	14580 <__assert_fail@plt+0x280c>
   14534:	sub	r3, r3, #1
   14538:	str	r3, [r4, #4]
   1453c:	mov	r5, #19
   14540:	mov	r0, r5
   14544:	bl	1187c <raise@plt>
   14548:	mov	r2, r6
   1454c:	mov	r1, sp
   14550:	mov	r0, #2
   14554:	bl	118dc <sigprocmask@plt>
   14558:	ldr	r3, [r4]
   1455c:	cmp	r3, #0
   14560:	bne	14500 <__assert_fail@plt+0x278c>
   14564:	ldr	r3, [r4, #4]
   14568:	cmp	r3, #0
   1456c:	bne	14500 <__assert_fail@plt+0x278c>
   14570:	add	sp, sp, #128	; 0x80
   14574:	pop	{r4, r5, r6, r7, r8, pc}
   14578:	bl	144c0 <__assert_fail@plt+0x274c>
   1457c:	b	1450c <__assert_fail@plt+0x2798>
   14580:	mov	r1, r6
   14584:	mov	r0, r5
   14588:	bl	11954 <signal@plt>
   1458c:	b	14540 <__assert_fail@plt+0x27cc>
   14590:	andeq	r9, r3, r0, lsr r3
   14594:	andeq	r9, r3, r4, lsr #6
   14598:	push	{r4, r5, r6, r7, r8, lr}
   1459c:	ldr	r3, [r1, #12]
   145a0:	ldr	r5, [r1, #8]
   145a4:	sub	r6, r3, r5
   145a8:	lsrs	r6, r6, #3
   145ac:	popeq	{r4, r5, r6, r7, r8, pc}
   145b0:	cmp	r3, r5
   145b4:	ldrbeq	r2, [r1, #40]	; 0x28
   145b8:	orreq	r2, r2, #2
   145bc:	strbeq	r2, [r1, #40]	; 0x28
   145c0:	ldr	r2, [r1, #24]
   145c4:	add	r3, r3, r2
   145c8:	bic	r3, r3, r2
   145cc:	str	r3, [r1, #12]
   145d0:	ldr	r2, [r1, #4]
   145d4:	ldr	ip, [r1, #16]
   145d8:	sub	r3, r3, r2
   145dc:	sub	r2, ip, r2
   145e0:	cmp	r3, r2
   145e4:	strhi	ip, [r1, #12]
   145e8:	ldr	r3, [r1, #12]
   145ec:	str	r3, [r1, #8]
   145f0:	ldr	r3, [pc, #104]	; 14660 <__assert_fail@plt+0x28ec>
   145f4:	ldr	r1, [r3]
   145f8:	bl	11864 <fputs_unlocked@plt>
   145fc:	sub	r5, r5, #8
   14600:	mov	r4, #0
   14604:	ldr	r8, [pc, #88]	; 14664 <__assert_fail@plt+0x28f0>
   14608:	mov	r7, #1
   1460c:	ldrd	r2, [r5, #8]!
   14610:	mov	r1, r8
   14614:	mov	r0, r7
   14618:	bl	11bf4 <__printf_chk@plt>
   1461c:	add	r4, r4, #1
   14620:	cmp	r6, r4
   14624:	bne	1460c <__assert_fail@plt+0x2898>
   14628:	ldr	r3, [pc, #48]	; 14660 <__assert_fail@plt+0x28ec>
   1462c:	ldr	r0, [r3]
   14630:	ldr	r3, [r0, #20]
   14634:	ldr	r2, [r0, #24]
   14638:	cmp	r3, r2
   1463c:	bcs	14654 <__assert_fail@plt+0x28e0>
   14640:	add	r2, r3, #1
   14644:	str	r2, [r0, #20]
   14648:	mov	r2, #10
   1464c:	strb	r2, [r3]
   14650:	pop	{r4, r5, r6, r7, r8, pc}
   14654:	mov	r1, #10
   14658:	bl	11c48 <__overflow@plt>
   1465c:	pop	{r4, r5, r6, r7, r8, pc}
   14660:	andeq	r9, r3, r4, lsr #6
   14664:	andeq	r5, r2, r4, asr #14
   14668:	push	{r4, r5, lr}
   1466c:	sub	sp, sp, #12
   14670:	subs	r5, r0, #0
   14674:	beq	146b8 <__assert_fail@plt+0x2944>
   14678:	mov	r1, #0
   1467c:	mov	r0, r5
   14680:	bl	1da48 <__assert_fail@plt+0xbcd4>
   14684:	ldr	r3, [sp, #24]
   14688:	sub	r4, r3, r0
   1468c:	bic	r4, r4, r4, asr #31
   14690:	mov	r0, r5
   14694:	bl	14244 <__assert_fail@plt+0x24d0>
   14698:	mov	r5, #32
   1469c:	mov	r0, r5
   146a0:	bl	140a8 <__assert_fail@plt+0x2334>
   146a4:	sub	r4, r4, #1
   146a8:	cmn	r4, #1
   146ac:	bne	1469c <__assert_fail@plt+0x2928>
   146b0:	add	sp, sp, #12
   146b4:	pop	{r4, r5, pc}
   146b8:	strd	r2, [sp]
   146bc:	ldr	r2, [sp, #24]
   146c0:	ldr	r1, [pc, #28]	; 146e4 <__assert_fail@plt+0x2970>
   146c4:	mov	r0, #1
   146c8:	bl	11bf4 <__printf_chk@plt>
   146cc:	ldr	r1, [pc, #20]	; 146e8 <__assert_fail@plt+0x2974>
   146d0:	ldrd	r2, [r1, #-8]
   146d4:	adds	r2, r2, r0
   146d8:	adc	r3, r3, r0, asr #31
   146dc:	strd	r2, [r1, #-8]
   146e0:	b	146b0 <__assert_fail@plt+0x293c>
   146e4:	andeq	r5, r2, ip, asr #14
   146e8:	andeq	sl, r3, r0, ror #4
   146ec:	push	{r4, r5, lr}
   146f0:	sub	sp, sp, #12
   146f4:	mov	r4, r0
   146f8:	mov	r5, r1
   146fc:	cmp	r2, #0
   14700:	beq	14724 <__assert_fail@plt+0x29b0>
   14704:	ldr	r3, [pc, #52]	; 14740 <__assert_fail@plt+0x29cc>
   14708:	ldrb	r3, [r3, #3180]	; 0xc6c
   1470c:	cmp	r3, #0
   14710:	movne	r0, #0
   14714:	bne	14728 <__assert_fail@plt+0x29b4>
   14718:	mov	r0, r4
   1471c:	bl	1cf5c <__assert_fail@plt+0xb1e8>
   14720:	b	14728 <__assert_fail@plt+0x29b4>
   14724:	ldr	r0, [pc, #24]	; 14744 <__assert_fail@plt+0x29d0>
   14728:	str	r5, [sp]
   1472c:	mov	r2, r4
   14730:	mov	r3, #0
   14734:	bl	14668 <__assert_fail@plt+0x28f4>
   14738:	add	sp, sp, #12
   1473c:	pop	{r4, r5, pc}
   14740:	andeq	r9, r3, r0, lsr r3
   14744:	andeq	r5, r2, r4, lsr r7
   14748:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1474c:	sub	sp, sp, #8192	; 0x2000
   14750:	sub	sp, sp, #24
   14754:	mov	r9, r0
   14758:	mov	r7, r3
   1475c:	add	r3, sp, #8192	; 0x2000
   14760:	add	r3, r3, #60	; 0x3c
   14764:	ldr	r8, [r3]
   14768:	add	r3, sp, #8256	; 0x2040
   1476c:	ldr	r6, [r3]
   14770:	add	r4, sp, #24
   14774:	str	r4, [r4, #-4]
   14778:	sub	r3, r4, #5
   1477c:	str	r3, [sp, #8]
   14780:	mov	r3, #0
   14784:	str	r3, [sp, #4]
   14788:	str	r2, [sp]
   1478c:	mov	r3, r1
   14790:	mov	r2, r0
   14794:	mov	r1, #8192	; 0x2000
   14798:	sub	r0, r4, #4
   1479c:	bl	13200 <__assert_fail@plt+0x148c>
   147a0:	mov	r5, r0
   147a4:	ldrb	r3, [r4, #-5]
   147a8:	add	r2, sp, #8192	; 0x2000
   147ac:	add	r2, r2, #56	; 0x38
   147b0:	ldrb	r2, [r2]
   147b4:	tst	r2, r3
   147b8:	bne	1497c <__assert_fail@plt+0x2c08>
   147bc:	cmp	r7, #0
   147c0:	beq	147f0 <__assert_fail@plt+0x2a7c>
   147c4:	mov	r0, #4
   147c8:	bl	1245c <__assert_fail@plt+0x6e8>
   147cc:	cmp	r0, #0
   147d0:	bne	14988 <__assert_fail@plt+0x2c14>
   147d4:	ldr	r4, [pc, #504]	; 149d4 <__assert_fail@plt+0x2c60>
   147d8:	mov	r0, r4
   147dc:	bl	142ec <__assert_fail@plt+0x2578>
   147e0:	mov	r0, r7
   147e4:	bl	142ec <__assert_fail@plt+0x2578>
   147e8:	add	r0, r4, #8
   147ec:	bl	142ec <__assert_fail@plt+0x2578>
   147f0:	cmp	r6, #0
   147f4:	moveq	r4, #0
   147f8:	beq	148b0 <__assert_fail@plt+0x2b3c>
   147fc:	ldr	r3, [pc, #468]	; 149d8 <__assert_fail@plt+0x2c64>
   14800:	ldrb	r4, [r3, #3182]	; 0xc6e
   14804:	cmp	r4, #0
   14808:	beq	14854 <__assert_fail@plt+0x2ae0>
   1480c:	ldrb	r4, [r3, #3128]	; 0xc38
   14810:	cmp	r4, #0
   14814:	beq	14854 <__assert_fail@plt+0x2ae0>
   14818:	ldrb	r3, [sp, #19]
   1481c:	cmp	r3, #0
   14820:	movne	r4, #0
   14824:	bne	14854 <__assert_fail@plt+0x2ae0>
   14828:	ldr	r3, [sp, #20]
   1482c:	ldrb	r1, [r3]
   14830:	ldr	r3, [pc, #420]	; 149dc <__assert_fail@plt+0x2c68>
   14834:	ldr	r0, [r3]
   14838:	ldr	r3, [r0, #20]
   1483c:	ldr	r2, [r0, #24]
   14840:	cmp	r3, r2
   14844:	addcc	r2, r3, #1
   14848:	strcc	r2, [r0, #20]
   1484c:	strbcc	r1, [r3]
   14850:	bcs	14990 <__assert_fail@plt+0x2c1c>
   14854:	mov	r1, #0
   14858:	ldr	r3, [pc, #376]	; 149d8 <__assert_fail@plt+0x2c64>
   1485c:	ldr	r0, [r3, #4028]	; 0xfbc
   14860:	bl	13fec <__assert_fail@plt+0x2278>
   14864:	mov	sl, r0
   14868:	mov	r1, #1
   1486c:	mov	r0, r6
   14870:	bl	13fec <__assert_fail@plt+0x2278>
   14874:	mov	r7, r0
   14878:	ldrb	r1, [r0]
   1487c:	str	r0, [sp]
   14880:	ldr	r2, [pc, #344]	; 149e0 <__assert_fail@plt+0x2c6c>
   14884:	ldr	r3, [pc, #344]	; 149e4 <__assert_fail@plt+0x2c70>
   14888:	cmp	r1, #47	; 0x2f
   1488c:	movne	r3, r2
   14890:	mov	r2, sl
   14894:	ldr	r1, [pc, #332]	; 149e8 <__assert_fail@plt+0x2c74>
   14898:	mov	r0, #1
   1489c:	bl	11bf4 <__printf_chk@plt>
   148a0:	mov	r0, sl
   148a4:	bl	1b388 <__assert_fail@plt+0x9614>
   148a8:	mov	r0, r7
   148ac:	bl	1b388 <__assert_fail@plt+0x9614>
   148b0:	cmp	r8, #0
   148b4:	beq	149a0 <__assert_fail@plt+0x2c2c>
   148b8:	mov	r0, r8
   148bc:	bl	14288 <__assert_fail@plt+0x2514>
   148c0:	ldr	r0, [sp, #20]
   148c4:	ldr	r3, [pc, #272]	; 149dc <__assert_fail@plt+0x2c68>
   148c8:	ldr	r3, [r3]
   148cc:	sub	r2, r5, r4, lsl #1
   148d0:	mov	r1, #1
   148d4:	add	r0, r0, r4
   148d8:	bl	11960 <fwrite_unlocked@plt>
   148dc:	ldr	r1, [pc, #264]	; 149ec <__assert_fail@plt+0x2c78>
   148e0:	ldrd	r2, [r1, #-8]
   148e4:	adds	r2, r2, r5
   148e8:	adc	r3, r3, #0
   148ec:	strd	r2, [r1, #-8]
   148f0:	mov	r0, r8
   148f4:	bl	14288 <__assert_fail@plt+0x2514>
   148f8:	cmp	r6, #0
   148fc:	beq	14950 <__assert_fail@plt+0x2bdc>
   14900:	ldr	r3, [pc, #212]	; 149dc <__assert_fail@plt+0x2c68>
   14904:	ldr	r3, [r3]
   14908:	mov	r2, #6
   1490c:	mov	r1, #1
   14910:	ldr	r0, [pc, #216]	; 149f0 <__assert_fail@plt+0x2c7c>
   14914:	bl	11960 <fwrite_unlocked@plt>
   14918:	cmp	r4, #0
   1491c:	beq	14950 <__assert_fail@plt+0x2bdc>
   14920:	ldr	r3, [sp, #20]
   14924:	add	r3, r3, r5
   14928:	ldrb	r1, [r3, #-1]
   1492c:	ldr	r3, [pc, #168]	; 149dc <__assert_fail@plt+0x2c68>
   14930:	ldr	r0, [r3]
   14934:	ldr	r3, [r0, #20]
   14938:	ldr	r2, [r0, #24]
   1493c:	cmp	r3, r2
   14940:	addcc	r2, r3, #1
   14944:	strcc	r2, [r0, #20]
   14948:	strbcc	r1, [r3]
   1494c:	bcs	14998 <__assert_fail@plt+0x2c24>
   14950:	add	r3, sp, #24
   14954:	ldr	r0, [sp, #20]
   14958:	cmp	r0, r3
   1495c:	cmpne	r9, r0
   14960:	beq	14968 <__assert_fail@plt+0x2bf4>
   14964:	bl	1b388 <__assert_fail@plt+0x9614>
   14968:	ldrb	r0, [sp, #19]
   1496c:	add	r0, r0, r5
   14970:	add	sp, sp, #8192	; 0x2000
   14974:	add	sp, sp, #24
   14978:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1497c:	mov	r0, #32
   14980:	bl	140a8 <__assert_fail@plt+0x2334>
   14984:	b	147bc <__assert_fail@plt+0x2a48>
   14988:	bl	144c0 <__assert_fail@plt+0x274c>
   1498c:	b	147d4 <__assert_fail@plt+0x2a60>
   14990:	bl	11c48 <__overflow@plt>
   14994:	b	14854 <__assert_fail@plt+0x2ae0>
   14998:	bl	11c48 <__overflow@plt>
   1499c:	b	14950 <__assert_fail@plt+0x2bdc>
   149a0:	ldr	r0, [sp, #20]
   149a4:	ldr	r3, [pc, #48]	; 149dc <__assert_fail@plt+0x2c68>
   149a8:	ldr	r3, [r3]
   149ac:	sub	r2, r5, r4, lsl #1
   149b0:	mov	r1, #1
   149b4:	add	r0, r0, r4
   149b8:	bl	11960 <fwrite_unlocked@plt>
   149bc:	ldr	r1, [pc, #40]	; 149ec <__assert_fail@plt+0x2c78>
   149c0:	ldrd	r2, [r1, #-8]
   149c4:	adds	r2, r2, r5
   149c8:	adc	r3, r3, #0
   149cc:	strd	r2, [r1, #-8]
   149d0:	b	148f8 <__assert_fail@plt+0x2b84>
   149d4:	ldrdeq	r9, [r3], -r0
   149d8:	andeq	r9, r3, r0, lsr r3
   149dc:	andeq	r9, r3, r4, lsr #6
   149e0:	andeq	r7, r2, r0, asr fp
   149e4:	andeq	r8, r2, ip, ror #1
   149e8:	andeq	r5, r2, r4, asr r7
   149ec:	andeq	sl, r3, r0, ror #4
   149f0:	andeq	r5, r2, r8, ror #14
   149f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   149f8:	sub	sp, sp, #16
   149fc:	mov	r5, r0
   14a00:	mov	r8, r2
   14a04:	mov	r9, r3
   14a08:	subs	r7, r1, #0
   14a0c:	beq	14a88 <__assert_fail@plt+0x2d14>
   14a10:	ldr	r6, [r0, #4]
   14a14:	ldr	r3, [pc, #992]	; 14dfc <__assert_fail@plt+0x3088>
   14a18:	ldrb	r3, [r3, #4024]	; 0xfb8
   14a1c:	cmp	r3, #0
   14a20:	moveq	r0, r6
   14a24:	beq	14d00 <__assert_fail@plt+0x2f8c>
   14a28:	ldr	r4, [r5, #124]	; 0x7c
   14a2c:	ldrb	sl, [r5, #133]	; 0x85
   14a30:	eor	sl, sl, #1
   14a34:	rsb	sl, sl, #0
   14a38:	cmn	sl, #1
   14a3c:	beq	14ad0 <__assert_fail@plt+0x2d5c>
   14a40:	ldrb	r3, [r5, #132]	; 0x84
   14a44:	cmp	r3, #0
   14a48:	bne	14ae8 <__assert_fail@plt+0x2d74>
   14a4c:	ldr	r2, [r5, #120]	; 0x78
   14a50:	ldr	r3, [pc, #936]	; 14e00 <__assert_fail@plt+0x308c>
   14a54:	add	r3, r3, r2, lsl #2
   14a58:	ldr	r4, [r3, #348]	; 0x15c
   14a5c:	cmp	r4, #5
   14a60:	bne	14da0 <__assert_fail@plt+0x302c>
   14a64:	mov	r0, r6
   14a68:	bl	11b94 <strlen@plt>
   14a6c:	mov	sl, r0
   14a70:	ldr	r3, [pc, #900]	; 14dfc <__assert_fail@plt+0x3088>
   14a74:	ldr	r4, [r3, #4036]	; 0xfc4
   14a78:	cmp	r4, #0
   14a7c:	bne	14c30 <__assert_fail@plt+0x2ebc>
   14a80:	mov	r4, #5
   14a84:	b	14dd0 <__assert_fail@plt+0x305c>
   14a88:	ldr	r6, [r0]
   14a8c:	ldr	r3, [pc, #872]	; 14dfc <__assert_fail@plt+0x3088>
   14a90:	ldrb	r3, [r3, #4024]	; 0xfb8
   14a94:	cmp	r3, #0
   14a98:	moveq	r0, r6
   14a9c:	beq	14d00 <__assert_fail@plt+0x2f8c>
   14aa0:	ldr	r3, [pc, #852]	; 14dfc <__assert_fail@plt+0x3088>
   14aa4:	ldrb	r3, [r3, #4032]	; 0xfc0
   14aa8:	cmp	r3, #0
   14aac:	beq	14abc <__assert_fail@plt+0x2d48>
   14ab0:	ldrb	r3, [r5, #133]	; 0x85
   14ab4:	cmp	r3, #0
   14ab8:	bne	14ac8 <__assert_fail@plt+0x2d54>
   14abc:	ldr	r4, [r5, #32]
   14ac0:	ldrb	sl, [r5, #133]	; 0x85
   14ac4:	b	14a38 <__assert_fail@plt+0x2cc4>
   14ac8:	ldr	r4, [r5, #124]	; 0x7c
   14acc:	b	14ac0 <__assert_fail@plt+0x2d4c>
   14ad0:	mov	r0, #12
   14ad4:	bl	1245c <__assert_fail@plt+0x6e8>
   14ad8:	cmp	r0, #0
   14adc:	beq	14a40 <__assert_fail@plt+0x2ccc>
   14ae0:	mov	r4, #12
   14ae4:	b	14dd0 <__assert_fail@plt+0x305c>
   14ae8:	and	r3, r4, #61440	; 0xf000
   14aec:	cmp	r3, #32768	; 0x8000
   14af0:	beq	14b38 <__assert_fail@plt+0x2dc4>
   14af4:	cmp	r3, #16384	; 0x4000
   14af8:	beq	14bc0 <__assert_fail@plt+0x2e4c>
   14afc:	cmp	r3, #40960	; 0xa000
   14b00:	beq	14d8c <__assert_fail@plt+0x3018>
   14b04:	cmp	r3, #4096	; 0x1000
   14b08:	moveq	r4, #8
   14b0c:	beq	14dd0 <__assert_fail@plt+0x305c>
   14b10:	cmp	r3, #49152	; 0xc000
   14b14:	moveq	r4, #9
   14b18:	beq	14dd0 <__assert_fail@plt+0x305c>
   14b1c:	cmp	r3, #24576	; 0x6000
   14b20:	moveq	r4, #10
   14b24:	beq	14dd0 <__assert_fail@plt+0x305c>
   14b28:	cmp	r3, #8192	; 0x2000
   14b2c:	moveq	r4, #11
   14b30:	movne	r4, #13
   14b34:	b	14dd0 <__assert_fail@plt+0x305c>
   14b38:	tst	r4, #2048	; 0x800
   14b3c:	beq	14b50 <__assert_fail@plt+0x2ddc>
   14b40:	mov	r0, #16
   14b44:	bl	1245c <__assert_fail@plt+0x6e8>
   14b48:	cmp	r0, #0
   14b4c:	bne	14ddc <__assert_fail@plt+0x3068>
   14b50:	tst	r4, #1024	; 0x400
   14b54:	beq	14b68 <__assert_fail@plt+0x2df4>
   14b58:	mov	r0, #17
   14b5c:	bl	1245c <__assert_fail@plt+0x6e8>
   14b60:	cmp	r0, #0
   14b64:	bne	14de4 <__assert_fail@plt+0x3070>
   14b68:	mov	r0, #21
   14b6c:	bl	1245c <__assert_fail@plt+0x6e8>
   14b70:	cmp	r0, #0
   14b74:	beq	14b84 <__assert_fail@plt+0x2e10>
   14b78:	ldrb	r3, [r5, #140]	; 0x8c
   14b7c:	cmp	r3, #0
   14b80:	bne	14dec <__assert_fail@plt+0x3078>
   14b84:	tst	r4, #73	; 0x49
   14b88:	beq	14b9c <__assert_fail@plt+0x2e28>
   14b8c:	mov	r0, #14
   14b90:	bl	1245c <__assert_fail@plt+0x6e8>
   14b94:	cmp	r0, #0
   14b98:	bne	14df4 <__assert_fail@plt+0x3080>
   14b9c:	ldr	r3, [r5, #36]	; 0x24
   14ba0:	cmp	r3, #1
   14ba4:	bls	14a64 <__assert_fail@plt+0x2cf0>
   14ba8:	mov	r0, #22
   14bac:	bl	1245c <__assert_fail@plt+0x6e8>
   14bb0:	cmp	r0, #0
   14bb4:	beq	14a64 <__assert_fail@plt+0x2cf0>
   14bb8:	mov	r4, #22
   14bbc:	b	14dd0 <__assert_fail@plt+0x305c>
   14bc0:	ldr	r3, [pc, #572]	; 14e04 <__assert_fail@plt+0x3090>
   14bc4:	bics	r3, r3, r4
   14bc8:	beq	14c0c <__assert_fail@plt+0x2e98>
   14bcc:	tst	r4, #2
   14bd0:	beq	14be8 <__assert_fail@plt+0x2e74>
   14bd4:	mov	r0, #19
   14bd8:	bl	1245c <__assert_fail@plt+0x6e8>
   14bdc:	cmp	r0, #0
   14be0:	movne	r4, #19
   14be4:	bne	14dd0 <__assert_fail@plt+0x305c>
   14be8:	tst	r4, #512	; 0x200
   14bec:	moveq	r4, #6
   14bf0:	beq	14dd0 <__assert_fail@plt+0x305c>
   14bf4:	mov	r0, #18
   14bf8:	bl	1245c <__assert_fail@plt+0x6e8>
   14bfc:	cmp	r0, #0
   14c00:	moveq	r4, #6
   14c04:	movne	r4, #18
   14c08:	b	14dd0 <__assert_fail@plt+0x305c>
   14c0c:	mov	r0, #20
   14c10:	bl	1245c <__assert_fail@plt+0x6e8>
   14c14:	cmp	r0, #0
   14c18:	movne	r4, #20
   14c1c:	bne	14dd0 <__assert_fail@plt+0x305c>
   14c20:	b	14bcc <__assert_fail@plt+0x2e58>
   14c24:	ldr	r4, [r4, #16]
   14c28:	cmp	r4, #0
   14c2c:	beq	14cf0 <__assert_fail@plt+0x2f7c>
   14c30:	ldr	r2, [r4]
   14c34:	cmp	sl, r2
   14c38:	bcc	14c24 <__assert_fail@plt+0x2eb0>
   14c3c:	sub	r0, sl, r2
   14c40:	ldr	r1, [r4, #4]
   14c44:	add	r0, r6, r0
   14c48:	bl	1a1d8 <__assert_fail@plt+0x8464>
   14c4c:	cmp	r0, #0
   14c50:	bne	14c24 <__assert_fail@plt+0x2eb0>
   14c54:	cmp	r4, #0
   14c58:	beq	14cf8 <__assert_fail@plt+0x2f84>
   14c5c:	add	r3, r4, #8
   14c60:	ldr	r2, [r3, #4]
   14c64:	cmp	r2, #0
   14c68:	moveq	r4, #0
   14c6c:	beq	14d40 <__assert_fail@plt+0x2fcc>
   14c70:	cmp	r3, #0
   14c74:	beq	14d3c <__assert_fail@plt+0x2fc8>
   14c78:	ldr	r2, [r5, #144]	; 0x90
   14c7c:	ldr	r1, [pc, #376]	; 14dfc <__assert_fail@plt+0x3088>
   14c80:	ldr	r1, [r1, #3176]	; 0xc68
   14c84:	ldr	r0, [r5, #8]
   14c88:	str	r0, [sp, #8]
   14c8c:	str	r8, [sp, #4]
   14c90:	eor	r7, r7, #1
   14c94:	str	r7, [sp]
   14c98:	mov	r0, r6
   14c9c:	bl	14748 <__assert_fail@plt+0x29d4>
   14ca0:	mov	r4, r0
   14ca4:	bl	144e0 <__assert_fail@plt+0x276c>
   14ca8:	bl	1442c <__assert_fail@plt+0x26b8>
   14cac:	ldr	r3, [pc, #328]	; 14dfc <__assert_fail@plt+0x3088>
   14cb0:	ldr	r5, [r3, #3188]	; 0xc74
   14cb4:	cmp	r5, #0
   14cb8:	beq	14d30 <__assert_fail@plt+0x2fbc>
   14cbc:	mov	r1, r5
   14cc0:	mov	r0, r9
   14cc4:	bl	2349c <_obstack_memory_used@@Base+0x3ac8>
   14cc8:	mov	r6, r0
   14ccc:	sub	r0, r9, #1
   14cd0:	mov	r1, r5
   14cd4:	add	r0, r0, r4
   14cd8:	bl	2349c <_obstack_memory_used@@Base+0x3ac8>
   14cdc:	cmp	r6, r0
   14ce0:	beq	14d30 <__assert_fail@plt+0x2fbc>
   14ce4:	ldr	r0, [pc, #284]	; 14e08 <__assert_fail@plt+0x3094>
   14ce8:	bl	142ec <__assert_fail@plt+0x2578>
   14cec:	b	14d30 <__assert_fail@plt+0x2fbc>
   14cf0:	mov	r4, #5
   14cf4:	b	14dd0 <__assert_fail@plt+0x305c>
   14cf8:	mov	r4, #5
   14cfc:	b	14dd0 <__assert_fail@plt+0x305c>
   14d00:	ldr	r2, [r5, #144]	; 0x90
   14d04:	ldr	r3, [pc, #240]	; 14dfc <__assert_fail@plt+0x3088>
   14d08:	ldr	r1, [r3, #3176]	; 0xc68
   14d0c:	ldr	r3, [r5, #8]
   14d10:	str	r3, [sp, #8]
   14d14:	str	r8, [sp, #4]
   14d18:	eor	r7, r7, #1
   14d1c:	str	r7, [sp]
   14d20:	mov	r3, #0
   14d24:	bl	14748 <__assert_fail@plt+0x29d4>
   14d28:	mov	r4, r0
   14d2c:	bl	144e0 <__assert_fail@plt+0x276c>
   14d30:	mov	r0, r4
   14d34:	add	sp, sp, #16
   14d38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d3c:	mov	r4, r3
   14d40:	mov	r0, #4
   14d44:	bl	1245c <__assert_fail@plt+0x6e8>
   14d48:	mov	sl, r0
   14d4c:	ldr	r2, [r5, #144]	; 0x90
   14d50:	ldr	r3, [pc, #164]	; 14dfc <__assert_fail@plt+0x3088>
   14d54:	ldr	r1, [r3, #3176]	; 0xc68
   14d58:	ldr	r3, [r5, #8]
   14d5c:	str	r3, [sp, #8]
   14d60:	str	r8, [sp, #4]
   14d64:	eor	r7, r7, #1
   14d68:	str	r7, [sp]
   14d6c:	mov	r3, r4
   14d70:	mov	r0, r6
   14d74:	bl	14748 <__assert_fail@plt+0x29d4>
   14d78:	mov	r4, r0
   14d7c:	bl	144e0 <__assert_fail@plt+0x276c>
   14d80:	cmp	sl, #0
   14d84:	beq	14d30 <__assert_fail@plt+0x2fbc>
   14d88:	b	14ca8 <__assert_fail@plt+0x2f34>
   14d8c:	cmp	sl, #0
   14d90:	movne	r4, #7
   14d94:	bne	14dd0 <__assert_fail@plt+0x305c>
   14d98:	mov	r4, #7
   14d9c:	b	14dac <__assert_fail@plt+0x3038>
   14da0:	cmp	r4, #7
   14da4:	cmpeq	sl, #0
   14da8:	bne	14dd0 <__assert_fail@plt+0x305c>
   14dac:	ldr	r3, [pc, #72]	; 14dfc <__assert_fail@plt+0x3088>
   14db0:	ldrb	r3, [r3, #4032]	; 0xfc0
   14db4:	cmp	r3, #0
   14db8:	movne	r4, #13
   14dbc:	bne	14dd0 <__assert_fail@plt+0x305c>
   14dc0:	mov	r0, #13
   14dc4:	bl	1245c <__assert_fail@plt+0x6e8>
   14dc8:	cmp	r0, #0
   14dcc:	movne	r4, #13
   14dd0:	ldr	r3, [pc, #52]	; 14e0c <__assert_fail@plt+0x3098>
   14dd4:	add	r3, r3, r4, lsl #3
   14dd8:	b	14c60 <__assert_fail@plt+0x2eec>
   14ddc:	mov	r4, #16
   14de0:	b	14dd0 <__assert_fail@plt+0x305c>
   14de4:	mov	r4, #17
   14de8:	b	14dd0 <__assert_fail@plt+0x305c>
   14dec:	mov	r4, #21
   14df0:	b	14dd0 <__assert_fail@plt+0x305c>
   14df4:	mov	r4, #14
   14df8:	b	14dd0 <__assert_fail@plt+0x305c>
   14dfc:	andeq	r9, r3, r0, lsr r3
   14e00:			; <UNDEFINED> instruction: 0x00023fb8
   14e04:	andeq	r0, r0, r2, lsl #4
   14e08:	andeq	r9, r3, r8, lsl #5
   14e0c:	ldrdeq	r9, [r3], -r0
   14e10:	push	{r4, r5, r6, lr}
   14e14:	sub	sp, sp, #672	; 0x2a0
   14e18:	mov	r4, r0
   14e1c:	mov	r5, r1
   14e20:	bl	14474 <__assert_fail@plt+0x2700>
   14e24:	ldr	r3, [pc, #356]	; 14f90 <__assert_fail@plt+0x321c>
   14e28:	ldrb	r3, [r3, #3112]	; 0xc28
   14e2c:	cmp	r3, #0
   14e30:	beq	14e8c <__assert_fail@plt+0x3118>
   14e34:	ldr	r3, [pc, #340]	; 14f90 <__assert_fail@plt+0x321c>
   14e38:	ldr	r3, [r3, #3116]	; 0xc2c
   14e3c:	cmp	r3, #4
   14e40:	ldrne	r3, [pc, #328]	; 14f90 <__assert_fail@plt+0x321c>
   14e44:	ldrne	r6, [r3, #3132]	; 0xc3c
   14e48:	moveq	r6, #0
   14e4c:	ldrb	r3, [r4, #132]	; 0x84
   14e50:	cmp	r3, #0
   14e54:	beq	14e78 <__assert_fail@plt+0x3104>
   14e58:	ldrd	r0, [r4, #112]	; 0x70
   14e5c:	orrs	r3, r0, r1
   14e60:	ldreq	r3, [pc, #300]	; 14f94 <__assert_fail@plt+0x3220>
   14e64:	beq	14e7c <__assert_fail@plt+0x3108>
   14e68:	add	r2, sp, #20
   14e6c:	bl	1d398 <__assert_fail@plt+0xb624>
   14e70:	mov	r3, r0
   14e74:	b	14e7c <__assert_fail@plt+0x3108>
   14e78:	ldr	r3, [pc, #276]	; 14f94 <__assert_fail@plt+0x3220>
   14e7c:	mov	r2, r6
   14e80:	ldr	r1, [pc, #272]	; 14f98 <__assert_fail@plt+0x3224>
   14e84:	mov	r0, #1
   14e88:	bl	11bf4 <__printf_chk@plt>
   14e8c:	ldr	r3, [pc, #252]	; 14f90 <__assert_fail@plt+0x321c>
   14e90:	ldrb	r3, [r3, #3113]	; 0xc29
   14e94:	cmp	r3, #0
   14e98:	beq	14ed4 <__assert_fail@plt+0x3160>
   14e9c:	ldr	r3, [pc, #236]	; 14f90 <__assert_fail@plt+0x321c>
   14ea0:	ldr	r3, [r3, #3116]	; 0xc2c
   14ea4:	cmp	r3, #4
   14ea8:	ldrne	r3, [pc, #224]	; 14f90 <__assert_fail@plt+0x321c>
   14eac:	ldrne	r6, [r3, #3136]	; 0xc40
   14eb0:	moveq	r6, #0
   14eb4:	ldrb	r3, [r4, #132]	; 0x84
   14eb8:	cmp	r3, #0
   14ebc:	ldreq	r3, [pc, #208]	; 14f94 <__assert_fail@plt+0x3220>
   14ec0:	bne	14f40 <__assert_fail@plt+0x31cc>
   14ec4:	mov	r2, r6
   14ec8:	ldr	r1, [pc, #200]	; 14f98 <__assert_fail@plt+0x3224>
   14ecc:	mov	r0, #1
   14ed0:	bl	11bf4 <__printf_chk@plt>
   14ed4:	ldr	r3, [pc, #180]	; 14f90 <__assert_fail@plt+0x321c>
   14ed8:	ldrb	r3, [r3, #3600]	; 0xe10
   14edc:	cmp	r3, #0
   14ee0:	beq	14f0c <__assert_fail@plt+0x3198>
   14ee4:	ldr	r3, [pc, #164]	; 14f90 <__assert_fail@plt+0x321c>
   14ee8:	ldr	r3, [r3, #3116]	; 0xc2c
   14eec:	cmp	r3, #4
   14ef0:	ldrne	r3, [pc, #152]	; 14f90 <__assert_fail@plt+0x321c>
   14ef4:	ldrne	r2, [r3, #3156]	; 0xc54
   14ef8:	moveq	r2, #0
   14efc:	ldr	r3, [r4, #128]	; 0x80
   14f00:	ldr	r1, [pc, #144]	; 14f98 <__assert_fail@plt+0x3224>
   14f04:	mov	r0, #1
   14f08:	bl	11bf4 <__printf_chk@plt>
   14f0c:	mov	r3, r5
   14f10:	mov	r2, #0
   14f14:	mov	r1, r2
   14f18:	mov	r0, r4
   14f1c:	bl	149f4 <__assert_fail@plt+0x2c80>
   14f20:	mov	r5, r0
   14f24:	ldr	r3, [pc, #100]	; 14f90 <__assert_fail@plt+0x321c>
   14f28:	ldr	r3, [r3, #20]
   14f2c:	cmp	r3, #0
   14f30:	bne	14f78 <__assert_fail@plt+0x3204>
   14f34:	mov	r0, r5
   14f38:	add	sp, sp, #672	; 0x2a0
   14f3c:	pop	{r4, r5, r6, pc}
   14f40:	ldr	r2, [pc, #72]	; 14f90 <__assert_fail@plt+0x321c>
   14f44:	ldr	r1, [r2, #3588]	; 0xe04
   14f48:	add	r2, r2, #3600	; 0xe10
   14f4c:	ldrd	r2, [r2, #-8]
   14f50:	strd	r2, [sp, #8]
   14f54:	mov	r2, #512	; 0x200
   14f58:	mov	r3, #0
   14f5c:	strd	r2, [sp]
   14f60:	mov	r3, r1
   14f64:	add	r2, sp, #20
   14f68:	ldrd	r0, [r4, #80]	; 0x50
   14f6c:	bl	1c540 <__assert_fail@plt+0xa7cc>
   14f70:	mov	r3, r0
   14f74:	b	14ec4 <__assert_fail@plt+0x3150>
   14f78:	ldr	r2, [r4, #120]	; 0x78
   14f7c:	ldr	r1, [r4, #32]
   14f80:	ldrb	r0, [r4, #132]	; 0x84
   14f84:	bl	14100 <__assert_fail@plt+0x238c>
   14f88:	add	r5, r5, r0
   14f8c:	b	14f34 <__assert_fail@plt+0x31c0>
   14f90:	andeq	r9, r3, r0, lsr r3
   14f94:	andeq	r5, r2, r4, lsr r7
   14f98:	andeq	r5, r2, r0, ror r7
   14f9c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fa0:	ldr	r3, [pc, #332]	; 150f4 <__assert_fail@plt+0x3380>
   14fa4:	ldr	r3, [r3, #8]
   14fa8:	cmp	r3, #0
   14fac:	beq	150bc <__assert_fail@plt+0x3348>
   14fb0:	mov	fp, r0
   14fb4:	mov	r5, #0
   14fb8:	mov	r4, r5
   14fbc:	ldr	r7, [pc, #304]	; 150f4 <__assert_fail@plt+0x3380>
   14fc0:	ldr	r9, [pc, #304]	; 150f8 <__assert_fail@plt+0x3384>
   14fc4:	b	15070 <__assert_fail@plt+0x32fc>
   14fc8:	mov	r0, r8
   14fcc:	bl	138fc <__assert_fail@plt+0x1b88>
   14fd0:	mov	r6, r0
   14fd4:	cmp	r4, #0
   14fd8:	beq	15050 <__assert_fail@plt+0x32dc>
   14fdc:	ldr	r2, [r7, #3188]	; 0xc74
   14fe0:	cmp	r2, #0
   14fe4:	beq	15008 <__assert_fail@plt+0x3294>
   14fe8:	add	r3, r5, #2
   14fec:	add	r3, r3, r0
   14ff0:	cmp	r2, r3
   14ff4:	bls	15094 <__assert_fail@plt+0x3320>
   14ff8:	mvn	r3, #2
   14ffc:	sub	r3, r3, r0
   15000:	cmp	r3, r5
   15004:	bcc	15094 <__assert_fail@plt+0x3320>
   15008:	add	r5, r5, #2
   1500c:	mov	sl, #32
   15010:	ldr	r0, [r9]
   15014:	ldr	r3, [r0, #20]
   15018:	ldr	r2, [r0, #24]
   1501c:	cmp	r3, r2
   15020:	addcc	r2, r3, #1
   15024:	strcc	r2, [r0, #20]
   15028:	strbcc	fp, [r3]
   1502c:	bcs	150a4 <__assert_fail@plt+0x3330>
   15030:	ldr	r0, [r9]
   15034:	ldr	r3, [r0, #20]
   15038:	ldr	r2, [r0, #24]
   1503c:	cmp	r3, r2
   15040:	addcc	r2, r3, #1
   15044:	strcc	r2, [r0, #20]
   15048:	strbcc	sl, [r3]
   1504c:	bcs	150b0 <__assert_fail@plt+0x333c>
   15050:	mov	r1, r5
   15054:	mov	r0, r8
   15058:	bl	14e10 <__assert_fail@plt+0x309c>
   1505c:	add	r5, r5, r6
   15060:	add	r4, r4, #1
   15064:	ldr	r3, [r7, #8]
   15068:	cmp	r3, r4
   1506c:	bls	150bc <__assert_fail@plt+0x3348>
   15070:	ldr	r3, [r7, #12]
   15074:	ldr	r8, [r3, r4, lsl #2]
   15078:	ldr	r6, [r7, #3188]	; 0xc74
   1507c:	cmp	r6, #0
   15080:	bne	14fc8 <__assert_fail@plt+0x3254>
   15084:	cmp	r4, #0
   15088:	moveq	r6, r4
   1508c:	beq	15050 <__assert_fail@plt+0x32dc>
   15090:	b	15008 <__assert_fail@plt+0x3294>
   15094:	ldr	r3, [pc, #96]	; 150fc <__assert_fail@plt+0x3388>
   15098:	ldrb	sl, [r3, #210]	; 0xd2
   1509c:	mov	r5, #0
   150a0:	b	15010 <__assert_fail@plt+0x329c>
   150a4:	mov	r1, fp
   150a8:	bl	11c48 <__overflow@plt>
   150ac:	b	15030 <__assert_fail@plt+0x32bc>
   150b0:	mov	r1, sl
   150b4:	bl	11c48 <__overflow@plt>
   150b8:	b	15050 <__assert_fail@plt+0x32dc>
   150bc:	ldr	r3, [pc, #56]	; 150fc <__assert_fail@plt+0x3388>
   150c0:	ldrb	r1, [r3, #210]	; 0xd2
   150c4:	ldr	r3, [pc, #44]	; 150f8 <__assert_fail@plt+0x3384>
   150c8:	ldr	r0, [r3]
   150cc:	ldr	r3, [r0, #20]
   150d0:	ldr	r2, [r0, #24]
   150d4:	cmp	r3, r2
   150d8:	bcs	150ec <__assert_fail@plt+0x3378>
   150dc:	add	r2, r3, #1
   150e0:	str	r2, [r0, #20]
   150e4:	strb	r1, [r3]
   150e8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150ec:	bl	11c48 <__overflow@plt>
   150f0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150f4:	andeq	r9, r3, r0, lsr r3
   150f8:	andeq	r9, r3, r4, lsr #6
   150fc:	ldrdeq	r9, [r3], -r0
   15100:	push	{r4, lr}
   15104:	ldr	r1, [r1]
   15108:	ldr	r0, [r0]
   1510c:	bl	1b01c <__assert_fail@plt+0x92a8>
   15110:	pop	{r4, pc}
   15114:	push	{r4, lr}
   15118:	ldr	r3, [r1]
   1511c:	ldr	r1, [r0]
   15120:	mov	r0, r3
   15124:	bl	118a0 <strcmp@plt>
   15128:	pop	{r4, pc}
   1512c:	push	{r4, lr}
   15130:	ldr	r3, [r1]
   15134:	ldr	r1, [r0]
   15138:	mov	r0, r3
   1513c:	bl	131c0 <__assert_fail@plt+0x144c>
   15140:	pop	{r4, pc}
   15144:	push	{r4, lr}
   15148:	ldr	r1, [r1]
   1514c:	ldr	r0, [r0]
   15150:	bl	118a0 <strcmp@plt>
   15154:	pop	{r4, pc}
   15158:	push	{r4, lr}
   1515c:	mov	lr, r0
   15160:	ldr	r3, [r1, #120]	; 0x78
   15164:	cmp	r3, #9
   15168:	cmpne	r3, #3
   1516c:	beq	151c4 <__assert_fail@plt+0x3450>
   15170:	ldr	ip, [r1, #124]	; 0x7c
   15174:	and	ip, ip, #61440	; 0xf000
   15178:	cmp	ip, #16384	; 0x4000
   1517c:	movne	ip, #0
   15180:	moveq	ip, #1
   15184:	ldr	r3, [r0, #120]	; 0x78
   15188:	cmp	r3, #9
   1518c:	cmpne	r3, #3
   15190:	moveq	r3, #1
   15194:	movne	r3, #0
   15198:	beq	151b0 <__assert_fail@plt+0x343c>
   1519c:	ldr	r3, [lr, #124]	; 0x7c
   151a0:	and	r3, r3, #61440	; 0xf000
   151a4:	cmp	r3, #16384	; 0x4000
   151a8:	movne	r3, #0
   151ac:	moveq	r3, #1
   151b0:	subs	r0, ip, r3
   151b4:	popne	{r4, pc}
   151b8:	mov	r0, lr
   151bc:	blx	r2
   151c0:	pop	{r4, pc}
   151c4:	ldr	r3, [r0, #120]	; 0x78
   151c8:	cmp	r3, #9
   151cc:	cmpne	r3, #3
   151d0:	movne	ip, #1
   151d4:	bne	1519c <__assert_fail@plt+0x3428>
   151d8:	b	151b8 <__assert_fail@plt+0x3444>
   151dc:	push	{r4, lr}
   151e0:	ldr	r2, [pc, #4]	; 151ec <__assert_fail@plt+0x3478>
   151e4:	bl	15158 <__assert_fail@plt+0x33e4>
   151e8:	pop	{r4, pc}
   151ec:	andeq	r2, r1, r4, asr #1
   151f0:	push	{r4, lr}
   151f4:	ldr	r2, [pc, #4]	; 15200 <__assert_fail@plt+0x348c>
   151f8:	bl	15158 <__assert_fail@plt+0x33e4>
   151fc:	pop	{r4, pc}
   15200:	ldrdeq	r2, [r1], -r8
   15204:	push	{r4, lr}
   15208:	ldr	r2, [pc, #4]	; 15214 <__assert_fail@plt+0x34a0>
   1520c:	bl	15158 <__assert_fail@plt+0x33e4>
   15210:	pop	{r4, pc}
   15214:	andeq	r2, r1, ip, ror #1
   15218:	push	{r4, lr}
   1521c:	ldr	r2, [pc, #4]	; 15228 <__assert_fail@plt+0x34b4>
   15220:	bl	15158 <__assert_fail@plt+0x33e4>
   15224:	pop	{r4, pc}
   15228:	andeq	r2, r1, ip, lsl #2
   1522c:	push	{r4, lr}
   15230:	ldr	r2, [pc, #4]	; 1523c <__assert_fail@plt+0x34c8>
   15234:	bl	15158 <__assert_fail@plt+0x33e4>
   15238:	pop	{r4, pc}
   1523c:	andeq	r2, r1, ip, lsr #2
   15240:	push	{r4, lr}
   15244:	ldr	r2, [pc, #4]	; 15250 <__assert_fail@plt+0x34dc>
   15248:	bl	15158 <__assert_fail@plt+0x33e4>
   1524c:	pop	{r4, pc}
   15250:	andeq	r2, r1, r0, asr #2
   15254:	push	{r4, lr}
   15258:	ldr	r2, [pc, #4]	; 15264 <__assert_fail@plt+0x34f0>
   1525c:	bl	15158 <__assert_fail@plt+0x33e4>
   15260:	pop	{r4, pc}
   15264:	andeq	r2, r1, r4, asr r1
   15268:	push	{r4, lr}
   1526c:	ldr	r2, [pc, #4]	; 15278 <__assert_fail@plt+0x3504>
   15270:	bl	15158 <__assert_fail@plt+0x33e4>
   15274:	pop	{r4, pc}
   15278:	andeq	r2, r1, r4, ror r1
   1527c:	push	{r4, lr}
   15280:	ldr	r2, [pc, #4]	; 1528c <__assert_fail@plt+0x3518>
   15284:	bl	15158 <__assert_fail@plt+0x33e4>
   15288:	pop	{r4, pc}
   1528c:	muleq	r1, r4, r1
   15290:	push	{r4, lr}
   15294:	ldr	r2, [pc, #4]	; 152a0 <__assert_fail@plt+0x352c>
   15298:	bl	15158 <__assert_fail@plt+0x33e4>
   1529c:	pop	{r4, pc}
   152a0:	andeq	r2, r1, r8, lsr #3
   152a4:	push	{r4, lr}
   152a8:	ldr	r2, [pc, #4]	; 152b4 <__assert_fail@plt+0x3540>
   152ac:	bl	15158 <__assert_fail@plt+0x33e4>
   152b0:	pop	{r4, pc}
   152b4:			; <UNDEFINED> instruction: 0x000121bc
   152b8:	push	{r4, lr}
   152bc:	ldr	r2, [pc, #4]	; 152c8 <__assert_fail@plt+0x3554>
   152c0:	bl	15158 <__assert_fail@plt+0x33e4>
   152c4:	pop	{r4, pc}
   152c8:	ldrdeq	r2, [r1], -ip
   152cc:	push	{r4, lr}
   152d0:	ldr	r2, [pc, #4]	; 152dc <__assert_fail@plt+0x3568>
   152d4:	bl	15158 <__assert_fail@plt+0x33e4>
   152d8:	pop	{r4, pc}
   152dc:	andeq	r7, r1, r4, ror #11
   152e0:	push	{r4, lr}
   152e4:	ldr	r2, [pc, #4]	; 152f0 <__assert_fail@plt+0x357c>
   152e8:	bl	15158 <__assert_fail@plt+0x33e4>
   152ec:	pop	{r4, pc}
   152f0:	strdeq	r7, [r1], -r8
   152f4:	push	{r4, lr}
   152f8:	ldr	r2, [pc, #4]	; 15304 <__assert_fail@plt+0x3590>
   152fc:	bl	15158 <__assert_fail@plt+0x33e4>
   15300:	pop	{r4, pc}
   15304:	andeq	r7, r1, ip, lsl #12
   15308:	push	{r4, lr}
   1530c:	ldr	r2, [pc, #4]	; 15318 <__assert_fail@plt+0x35a4>
   15310:	bl	15158 <__assert_fail@plt+0x33e4>
   15314:	pop	{r4, pc}
   15318:	andeq	r7, r1, ip, lsr #12
   1531c:	push	{r4, lr}
   15320:	ldr	r2, [pc, #4]	; 1532c <__assert_fail@plt+0x35b8>
   15324:	bl	15158 <__assert_fail@plt+0x33e4>
   15328:	pop	{r4, pc}
   1532c:	strdeq	r2, [r1], -ip
   15330:	push	{r4, lr}
   15334:	ldr	r2, [pc, #4]	; 15340 <__assert_fail@plt+0x35cc>
   15338:	bl	15158 <__assert_fail@plt+0x33e4>
   1533c:	pop	{r4, pc}
   15340:	andeq	r2, r1, r0, lsl r2
   15344:	push	{r4, lr}
   15348:	ldr	r2, [pc, #4]	; 15354 <__assert_fail@plt+0x35e0>
   1534c:	bl	15158 <__assert_fail@plt+0x33e4>
   15350:	pop	{r4, pc}
   15354:	andeq	r2, r1, r4, lsr #4
   15358:	push	{r4, lr}
   1535c:	ldr	r2, [pc, #4]	; 15368 <__assert_fail@plt+0x35f4>
   15360:	bl	15158 <__assert_fail@plt+0x33e4>
   15364:	pop	{r4, pc}
   15368:	andeq	r2, r1, r4, asr #4
   1536c:	push	{r4, lr}
   15370:	ldr	r2, [pc, #4]	; 1537c <__assert_fail@plt+0x3608>
   15374:	bl	15158 <__assert_fail@plt+0x33e4>
   15378:	pop	{r4, pc}
   1537c:	andeq	r2, r1, r4, ror #4
   15380:	push	{r4, lr}
   15384:	ldr	r2, [pc, #4]	; 15390 <__assert_fail@plt+0x361c>
   15388:	bl	15158 <__assert_fail@plt+0x33e4>
   1538c:	pop	{r4, pc}
   15390:	andeq	r5, r1, r4, asr #2
   15394:	push	{r4, lr}
   15398:	ldr	r2, [pc, #4]	; 153a4 <__assert_fail@plt+0x3630>
   1539c:	bl	15158 <__assert_fail@plt+0x33e4>
   153a0:	pop	{r4, pc}
   153a4:	andeq	r5, r1, ip, lsr #2
   153a8:	push	{r4, lr}
   153ac:	ldr	r2, [pc, #4]	; 153b8 <__assert_fail@plt+0x3644>
   153b0:	bl	15158 <__assert_fail@plt+0x33e4>
   153b4:	pop	{r4, pc}
   153b8:	andeq	r5, r1, r4, lsl r1
   153bc:	push	{r4, lr}
   153c0:	ldr	r2, [pc, #4]	; 153cc <__assert_fail@plt+0x3658>
   153c4:	bl	15158 <__assert_fail@plt+0x33e4>
   153c8:	pop	{r4, pc}
   153cc:	andeq	r3, r1, r0, ror lr
   153d0:	push	{r4, lr}
   153d4:	ldr	r2, [pc, #4]	; 153e0 <__assert_fail@plt+0x366c>
   153d8:	bl	15158 <__assert_fail@plt+0x33e4>
   153dc:	pop	{r4, pc}
   153e0:	andeq	r3, r1, ip, lsr lr
   153e4:	push	{r4, lr}
   153e8:	ldr	r2, [pc, #4]	; 153f4 <__assert_fail@plt+0x3680>
   153ec:	bl	15158 <__assert_fail@plt+0x33e4>
   153f0:	pop	{r4, pc}
   153f4:	andeq	r3, r1, r0, asr lr
   153f8:	push	{r4, lr}
   153fc:	ldr	r2, [pc, #4]	; 15408 <__assert_fail@plt+0x3694>
   15400:	bl	15158 <__assert_fail@plt+0x33e4>
   15404:	pop	{r4, pc}
   15408:	andeq	r3, r1, ip, lsl lr
   1540c:	push	{r4, lr}
   15410:	ldr	r2, [pc, #4]	; 1541c <__assert_fail@plt+0x36a8>
   15414:	bl	15158 <__assert_fail@plt+0x33e4>
   15418:	pop	{r4, pc}
   1541c:	andeq	r3, r1, ip, asr r7
   15420:	push	{r4, lr}
   15424:	ldr	r2, [pc, #4]	; 15430 <__assert_fail@plt+0x36bc>
   15428:	bl	15158 <__assert_fail@plt+0x33e4>
   1542c:	pop	{r4, pc}
   15430:	andeq	r3, r1, r8, lsr #14
   15434:	push	{r4, lr}
   15438:	ldr	r2, [pc, #4]	; 15444 <__assert_fail@plt+0x36d0>
   1543c:	bl	15158 <__assert_fail@plt+0x33e4>
   15440:	pop	{r4, pc}
   15444:	andeq	r3, r1, ip, lsr r7
   15448:	push	{r4, lr}
   1544c:	ldr	r2, [pc, #4]	; 15458 <__assert_fail@plt+0x36e4>
   15450:	bl	15158 <__assert_fail@plt+0x33e4>
   15454:	pop	{r4, pc}
   15458:	andeq	r3, r1, r8, lsl #14
   1545c:	push	{r4, lr}
   15460:	ldr	r2, [pc, #4]	; 1546c <__assert_fail@plt+0x36f8>
   15464:	bl	15158 <__assert_fail@plt+0x33e4>
   15468:	pop	{r4, pc}
   1546c:	andeq	r5, r1, r0, lsl #2
   15470:	push	{r4, lr}
   15474:	ldr	r2, [pc, #4]	; 15480 <__assert_fail@plt+0x370c>
   15478:	bl	15158 <__assert_fail@plt+0x33e4>
   1547c:	pop	{r4, pc}
   15480:	andeq	r3, r1, r8, ror #3
   15484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15488:	add	fp, sp, #32
   1548c:	sub	sp, sp, #716	; 0x2cc
   15490:	str	r0, [fp, #-720]	; 0xfffffd30
   15494:	str	r1, [fp, #-724]	; 0xfffffd2c
   15498:	mov	r7, r2
   1549c:	mov	r8, r3
   154a0:	ldrb	r6, [fp, #4]
   154a4:	orrs	r3, r2, r8
   154a8:	moveq	r3, #1
   154ac:	movne	r3, #0
   154b0:	mov	r2, r3
   154b4:	str	r3, [fp, #-732]	; 0xfffffd24
   154b8:	eor	r3, r6, #1
   154bc:	orrs	r3, r2, r3
   154c0:	str	r3, [fp, #-728]	; 0xfffffd28
   154c4:	beq	155a0 <__assert_fail@plt+0x382c>
   154c8:	ldr	r3, [pc, #3556]	; 162b4 <__assert_fail@plt+0x4540>
   154cc:	ldr	r1, [r3, #8]
   154d0:	ldr	r3, [r3, #4040]	; 0xfc8
   154d4:	cmp	r1, r3
   154d8:	beq	155b4 <__assert_fail@plt+0x3840>
   154dc:	ldr	r5, [pc, #3536]	; 162b4 <__assert_fail@plt+0x4540>
   154e0:	ldr	r3, [r5, #8]
   154e4:	mov	r2, #152	; 0x98
   154e8:	mul	r9, r2, r3
   154ec:	ldr	sl, [r5, #16]
   154f0:	add	r4, sl, r9
   154f4:	mov	r1, #0
   154f8:	mov	r0, r4
   154fc:	bl	11be8 <memset@plt>
   15500:	str	r7, [r4, #112]	; 0x70
   15504:	str	r8, [r4, #116]	; 0x74
   15508:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   1550c:	str	r3, [r4, #120]	; 0x78
   15510:	mvn	r3, #0
   15514:	str	r3, [r4, #144]	; 0x90
   15518:	ldrb	r3, [r5, #3128]	; 0xc38
   1551c:	cmp	r3, #0
   15520:	bne	15530 <__assert_fail@plt+0x37bc>
   15524:	ldrb	r3, [r5, #3182]	; 0xc6e
   15528:	cmp	r3, #0
   1552c:	bne	155d8 <__assert_fail@plt+0x3864>
   15530:	cmp	r6, #0
   15534:	bne	15764 <__assert_fail@plt+0x39f0>
   15538:	ldr	r3, [pc, #3444]	; 162b4 <__assert_fail@plt+0x4540>
   1553c:	ldrb	r3, [r3, #4044]	; 0xfcc
   15540:	cmp	r3, #0
   15544:	bne	16140 <__assert_fail@plt+0x43cc>
   15548:	ldr	r3, [pc, #3428]	; 162b4 <__assert_fail@plt+0x4540>
   1554c:	ldrb	r5, [r3, #4045]	; 0xfcd
   15550:	cmp	r5, #0
   15554:	bne	156e8 <__assert_fail@plt+0x3974>
   15558:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   1555c:	cmp	r3, #3
   15560:	beq	155f8 <__assert_fail@plt+0x3884>
   15564:	ldr	r3, [pc, #3400]	; 162b4 <__assert_fail@plt+0x4540>
   15568:	ldrb	r3, [r3, #3112]	; 0xc28
   1556c:	cmp	r3, #0
   15570:	bne	15714 <__assert_fail@plt+0x39a0>
   15574:	ldr	r3, [pc, #3384]	; 162b4 <__assert_fail@plt+0x4540>
   15578:	ldrb	r3, [r3, #4046]	; 0xfce
   1557c:	cmp	r3, #0
   15580:	moveq	r6, #0
   15584:	moveq	r7, #0
   15588:	beq	15e28 <__assert_fail@plt+0x40b4>
   1558c:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   15590:	cmp	r3, #0
   15594:	cmpne	r3, #6
   15598:	beq	1572c <__assert_fail@plt+0x39b8>
   1559c:	b	15664 <__assert_fail@plt+0x38f0>
   155a0:	ldr	r3, [pc, #3344]	; 162b8 <__assert_fail@plt+0x4544>
   155a4:	ldr	r2, [pc, #3344]	; 162bc <__assert_fail@plt+0x4548>
   155a8:	ldr	r1, [pc, #3344]	; 162c0 <__assert_fail@plt+0x454c>
   155ac:	ldr	r0, [pc, #3344]	; 162c4 <__assert_fail@plt+0x4550>
   155b0:	bl	11d74 <__assert_fail@plt>
   155b4:	ldr	r4, [pc, #3320]	; 162b4 <__assert_fail@plt+0x4540>
   155b8:	mov	r2, #304	; 0x130
   155bc:	ldr	r0, [r4, #16]
   155c0:	bl	22300 <_obstack_memory_used@@Base+0x292c>
   155c4:	str	r0, [r4, #16]
   155c8:	ldr	r3, [r4, #4040]	; 0xfc8
   155cc:	lsl	r3, r3, #1
   155d0:	str	r3, [r4, #4040]	; 0xfc8
   155d4:	b	154dc <__assert_fail@plt+0x3768>
   155d8:	ldr	r0, [fp, #-720]	; 0xfffffd30
   155dc:	bl	13120 <__assert_fail@plt+0x13ac>
   155e0:	str	r0, [r4, #144]	; 0x90
   155e4:	cmp	r0, #0
   155e8:	movne	r2, #1
   155ec:	movne	r3, r5
   155f0:	strbne	r2, [r3, #3128]	; 0xc38
   155f4:	b	15530 <__assert_fail@plt+0x37bc>
   155f8:	ldr	r3, [pc, #3252]	; 162b4 <__assert_fail@plt+0x4540>
   155fc:	ldrb	r3, [r3, #4024]	; 0xfb8
   15600:	cmp	r3, #0
   15604:	beq	15638 <__assert_fail@plt+0x38c4>
   15608:	mov	r0, #19
   1560c:	bl	1245c <__assert_fail@plt+0x6e8>
   15610:	cmp	r0, #0
   15614:	bne	156e8 <__assert_fail@plt+0x3974>
   15618:	mov	r0, #18
   1561c:	bl	1245c <__assert_fail@plt+0x6e8>
   15620:	cmp	r0, #0
   15624:	bne	156e8 <__assert_fail@plt+0x3974>
   15628:	mov	r0, #20
   1562c:	bl	1245c <__assert_fail@plt+0x6e8>
   15630:	cmp	r0, #0
   15634:	bne	156e8 <__assert_fail@plt+0x3974>
   15638:	ldr	r3, [pc, #3188]	; 162b4 <__assert_fail@plt+0x4540>
   1563c:	ldrb	r3, [r3, #3112]	; 0xc28
   15640:	cmp	r3, #0
   15644:	beq	15574 <__assert_fail@plt+0x3800>
   15648:	ldr	r2, [fp, #-732]	; 0xfffffd24
   1564c:	tst	r2, r3
   15650:	bne	156e8 <__assert_fail@plt+0x3974>
   15654:	ldr	r3, [pc, #3160]	; 162b4 <__assert_fail@plt+0x4540>
   15658:	ldrb	r3, [r3, #4046]	; 0xfce
   1565c:	cmp	r3, #0
   15660:	beq	16100 <__assert_fail@plt+0x438c>
   15664:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   15668:	cmp	r3, #0
   1566c:	beq	156e8 <__assert_fail@plt+0x3974>
   15670:	cmp	r3, #5
   15674:	movne	r6, #0
   15678:	movne	r7, #0
   1567c:	bne	15e28 <__assert_fail@plt+0x40b4>
   15680:	ldr	r3, [pc, #3116]	; 162b4 <__assert_fail@plt+0x4540>
   15684:	ldr	r3, [r3, #20]
   15688:	cmp	r3, #3
   1568c:	beq	156e8 <__assert_fail@plt+0x3974>
   15690:	ldr	r3, [pc, #3100]	; 162b4 <__assert_fail@plt+0x4540>
   15694:	ldrb	r3, [r3, #4024]	; 0xfb8
   15698:	cmp	r3, #0
   1569c:	beq	1610c <__assert_fail@plt+0x4398>
   156a0:	mov	r0, #14
   156a4:	bl	1245c <__assert_fail@plt+0x6e8>
   156a8:	cmp	r0, #0
   156ac:	bne	156e8 <__assert_fail@plt+0x3974>
   156b0:	mov	r0, #16
   156b4:	bl	1245c <__assert_fail@plt+0x6e8>
   156b8:	cmp	r0, #0
   156bc:	bne	156e8 <__assert_fail@plt+0x3974>
   156c0:	mov	r0, #17
   156c4:	bl	1245c <__assert_fail@plt+0x6e8>
   156c8:	cmp	r0, #0
   156cc:	bne	156e8 <__assert_fail@plt+0x3974>
   156d0:	mov	r0, #21
   156d4:	bl	1245c <__assert_fail@plt+0x6e8>
   156d8:	cmp	r0, #0
   156dc:	moveq	r6, #0
   156e0:	moveq	r7, #0
   156e4:	beq	15e28 <__assert_fail@plt+0x40b4>
   156e8:	ldr	r3, [fp, #-720]	; 0xfffffd30
   156ec:	ldrb	r5, [r3]
   156f0:	cmp	r5, #47	; 0x2f
   156f4:	bne	161e8 <__assert_fail@plt+0x4474>
   156f8:	ldr	r3, [pc, #2996]	; 162b4 <__assert_fail@plt+0x4540>
   156fc:	ldr	r3, [r3, #4048]	; 0xfd0
   15700:	cmp	r3, #4
   15704:	ldrne	r8, [fp, #-720]	; 0xfffffd30
   15708:	bne	1586c <__assert_fail@plt+0x3af8>
   1570c:	ldr	r8, [fp, #-720]	; 0xfffffd30
   15710:	b	157b8 <__assert_fail@plt+0x3a44>
   15714:	ldr	r2, [fp, #-724]	; 0xfffffd2c
   15718:	cmp	r2, #0
   1571c:	cmpne	r2, #6
   15720:	moveq	r5, #1
   15724:	movne	r5, #0
   15728:	bne	15648 <__assert_fail@plt+0x38d4>
   1572c:	ldr	r3, [pc, #2944]	; 162b4 <__assert_fail@plt+0x4540>
   15730:	ldr	r3, [r3, #4048]	; 0xfd0
   15734:	cmp	r3, #4
   15738:	beq	156e8 <__assert_fail@plt+0x3974>
   1573c:	ldr	r3, [pc, #2928]	; 162b4 <__assert_fail@plt+0x4540>
   15740:	ldrb	r3, [r3, #4032]	; 0xfc0
   15744:	cmp	r3, #0
   15748:	bne	156e8 <__assert_fail@plt+0x3974>
   1574c:	ldr	r3, [pc, #2912]	; 162b4 <__assert_fail@plt+0x4540>
   15750:	ldrb	r3, [r3, #4052]	; 0xfd4
   15754:	cmp	r3, #0
   15758:	bne	156e8 <__assert_fail@plt+0x3974>
   1575c:	mov	r3, r5
   15760:	b	15648 <__assert_fail@plt+0x38d4>
   15764:	ldr	r3, [fp, #-720]	; 0xfffffd30
   15768:	ldrb	r5, [r3]
   1576c:	cmp	r5, #47	; 0x2f
   15770:	beq	15854 <__assert_fail@plt+0x3ae0>
   15774:	ldr	r3, [fp, #8]
   15778:	ldrb	r7, [r3]
   1577c:	cmp	r7, #0
   15780:	ldreq	r8, [fp, #-720]	; 0xfffffd30
   15784:	bne	161fc <__assert_fail@plt+0x4488>
   15788:	ldr	r3, [pc, #2852]	; 162b4 <__assert_fail@plt+0x4540>
   1578c:	ldrb	r3, [r3, #4044]	; 0xfcc
   15790:	cmp	r3, #0
   15794:	bne	16164 <__assert_fail@plt+0x43f0>
   15798:	ldr	r3, [pc, #2836]	; 162b4 <__assert_fail@plt+0x4540>
   1579c:	ldr	r5, [r3, #4048]	; 0xfd0
   157a0:	cmp	r5, #2
   157a4:	bcc	1586c <__assert_fail@plt+0x3af8>
   157a8:	cmp	r5, #3
   157ac:	bls	15864 <__assert_fail@plt+0x3af0>
   157b0:	cmp	r5, #4
   157b4:	bne	1586c <__assert_fail@plt+0x3af8>
   157b8:	bl	12d28 <__assert_fail@plt+0xfb4>
   157bc:	str	r0, [sp]
   157c0:	mov	r3, #0
   157c4:	add	r2, r4, #16
   157c8:	mov	r1, r8
   157cc:	mvn	r0, #99	; 0x63
   157d0:	bl	12ef8 <__assert_fail@plt+0x1184>
   157d4:	b	15890 <__assert_fail@plt+0x3b1c>
   157d8:	ldr	r3, [fp, #8]
   157dc:	ldrb	r3, [r3, #1]
   157e0:	cmp	r3, #0
   157e4:	moveq	r3, r8
   157e8:	beq	1582c <__assert_fail@plt+0x3ab8>
   157ec:	b	1622c <__assert_fail@plt+0x44b8>
   157f0:	mov	r1, r3
   157f4:	mov	r3, r1
   157f8:	mov	r0, r2
   157fc:	strb	r7, [r3], #1
   15800:	ldrb	r7, [r2], #1
   15804:	cmp	r7, #0
   15808:	bne	157f0 <__assert_fail@plt+0x3a7c>
   1580c:	ldr	r2, [fp, #8]
   15810:	cmp	r2, r0
   15814:	bcs	1582c <__assert_fail@plt+0x3ab8>
   15818:	ldrb	r2, [r0, #-1]
   1581c:	cmp	r2, #47	; 0x2f
   15820:	movne	r2, #47	; 0x2f
   15824:	strbne	r2, [r3]
   15828:	addne	r3, r1, #2
   1582c:	cmp	r5, #0
   15830:	beq	15848 <__assert_fail@plt+0x3ad4>
   15834:	ldr	r2, [fp, #-720]	; 0xfffffd30
   15838:	strb	r5, [r3], #1
   1583c:	ldrb	r5, [r2, #1]!
   15840:	cmp	r5, #0
   15844:	bne	15838 <__assert_fail@plt+0x3ac4>
   15848:	mov	r2, #0
   1584c:	strb	r2, [r3]
   15850:	b	15788 <__assert_fail@plt+0x3a14>
   15854:	ldr	r8, [fp, #-720]	; 0xfffffd30
   15858:	b	15788 <__assert_fail@plt+0x3a14>
   1585c:	ldr	r8, [fp, #-720]	; 0xfffffd30
   15860:	b	16164 <__assert_fail@plt+0x43f0>
   15864:	cmp	r6, #0
   15868:	bne	15a60 <__assert_fail@plt+0x3cec>
   1586c:	bl	12d28 <__assert_fail@plt+0xfb4>
   15870:	str	r0, [sp]
   15874:	mov	r3, #256	; 0x100
   15878:	add	r2, r4, #16
   1587c:	mov	r1, r8
   15880:	mvn	r0, #99	; 0x63
   15884:	bl	12ef8 <__assert_fail@plt+0x1184>
   15888:	mov	r3, #0
   1588c:	str	r3, [fp, #-728]	; 0xfffffd28
   15890:	cmp	r0, #0
   15894:	bne	15af0 <__assert_fail@plt+0x3d7c>
   15898:	mov	r3, #1
   1589c:	strb	r3, [r4, #132]	; 0x84
   158a0:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   158a4:	cmp	r3, #5
   158a8:	beq	15b50 <__assert_fail@plt+0x3ddc>
   158ac:	ldr	r3, [r4, #32]
   158b0:	and	r3, r3, #61440	; 0xf000
   158b4:	cmp	r3, #32768	; 0x8000
   158b8:	beq	15b50 <__assert_fail@plt+0x3ddc>
   158bc:	ldr	r3, [pc, #2544]	; 162b4 <__assert_fail@plt+0x4540>
   158c0:	ldr	r3, [r3, #3116]	; 0xc2c
   158c4:	cmp	r3, #0
   158c8:	beq	158dc <__assert_fail@plt+0x3b68>
   158cc:	ldr	r3, [pc, #2528]	; 162b4 <__assert_fail@plt+0x4540>
   158d0:	ldrb	r3, [r3, #3600]	; 0xe10
   158d4:	cmp	r3, #0
   158d8:	beq	1619c <__assert_fail@plt+0x4428>
   158dc:	ldrd	r2, [r4, #16]
   158e0:	ldr	r1, [pc, #2528]	; 162c8 <__assert_fail@plt+0x4554>
   158e4:	ldrd	r0, [r1]
   158e8:	cmp	r3, r1
   158ec:	cmpeq	r2, r0
   158f0:	beq	15c0c <__assert_fail@plt+0x3e98>
   158f4:	ldr	r3, [fp, #-728]	; 0xfffffd28
   158f8:	cmp	r3, #0
   158fc:	beq	15c20 <__assert_fail@plt+0x3eac>
   15900:	add	r1, r4, #128	; 0x80
   15904:	mov	r0, r8
   15908:	bl	21734 <_obstack_memory_used@@Base+0x1d60>
   1590c:	mov	r7, r0
   15910:	cmp	r7, #0
   15914:	blt	15c34 <__assert_fail@plt+0x3ec0>
   15918:	ldr	r1, [r4, #128]	; 0x80
   1591c:	ldr	r0, [pc, #2472]	; 162cc <__assert_fail@plt+0x4558>
   15920:	bl	118a0 <strcmp@plt>
   15924:	adds	r5, r0, #0
   15928:	movne	r5, #1
   1592c:	ldr	r3, [pc, #2432]	; 162b4 <__assert_fail@plt+0x4540>
   15930:	ldr	r3, [r3, #3116]	; 0xc2c
   15934:	cmp	r3, #0
   15938:	beq	16250 <__assert_fail@plt+0x44dc>
   1593c:	cmp	r5, #0
   15940:	bne	15e84 <__assert_fail@plt+0x4110>
   15944:	mov	r3, #0
   15948:	str	r3, [r4, #136]	; 0x88
   1594c:	ldr	r3, [r4, #32]
   15950:	and	r3, r3, #61440	; 0xf000
   15954:	cmp	r3, #40960	; 0xa000
   15958:	bne	15d28 <__assert_fail@plt+0x3fb4>
   1595c:	ldr	r3, [pc, #2384]	; 162b4 <__assert_fail@plt+0x4540>
   15960:	ldrb	r3, [r3, #4052]	; 0xfd4
   15964:	cmp	r3, #0
   15968:	beq	15a54 <__assert_fail@plt+0x3ce0>
   1596c:	ldr	r1, [r4, #64]	; 0x40
   15970:	mov	r0, r8
   15974:	bl	19c58 <__assert_fail@plt+0x7ee4>
   15978:	mov	r5, r0
   1597c:	str	r0, [r4, #4]
   15980:	cmp	r0, #0
   15984:	beq	15ea4 <__assert_fail@plt+0x4130>
   15988:	ldrb	r3, [r5]
   1598c:	cmp	r3, #47	; 0x2f
   15990:	beq	15edc <__assert_fail@plt+0x4168>
   15994:	mov	r0, r8
   15998:	bl	1ab04 <__assert_fail@plt+0x8d90>
   1599c:	subs	r7, r0, #0
   159a0:	beq	15eec <__assert_fail@plt+0x4178>
   159a4:	mov	r0, r5
   159a8:	bl	11b94 <strlen@plt>
   159ac:	add	r3, r7, #2
   159b0:	add	r0, r3, r0
   159b4:	bl	2227c <_obstack_memory_used@@Base+0x28a8>
   159b8:	str	r0, [fp, #-724]	; 0xfffffd2c
   159bc:	add	r3, r8, r7
   159c0:	ldrb	r3, [r3, #-1]
   159c4:	cmp	r3, #47	; 0x2f
   159c8:	addne	r7, r7, #1
   159cc:	mov	r2, r7
   159d0:	mov	r1, r8
   159d4:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   159d8:	bl	11c00 <stpncpy@plt>
   159dc:	mov	r1, r5
   159e0:	bl	11a5c <strcpy@plt>
   159e4:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   159e8:	cmp	r3, #0
   159ec:	beq	15a3c <__assert_fail@plt+0x3cc8>
   159f0:	ldr	r3, [r4, #144]	; 0x90
   159f4:	cmp	r3, #0
   159f8:	beq	15efc <__assert_fail@plt+0x4188>
   159fc:	ldr	r3, [pc, #2224]	; 162b4 <__assert_fail@plt+0x4540>
   15a00:	ldr	r3, [r3, #20]
   15a04:	cmp	r3, #1
   15a08:	bls	15f14 <__assert_fail@plt+0x41a0>
   15a0c:	mov	r3, #2
   15a10:	str	r3, [sp]
   15a14:	mov	r3, #0
   15a18:	sub	r2, fp, #692	; 0x2b4
   15a1c:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   15a20:	mvn	r0, #99	; 0x63
   15a24:	bl	12ef8 <__assert_fail@plt+0x1184>
   15a28:	cmp	r0, #0
   15a2c:	moveq	r3, #1
   15a30:	strbeq	r3, [r4, #133]	; 0x85
   15a34:	ldreq	r3, [fp, #-676]	; 0xfffffd5c
   15a38:	streq	r3, [r4, #124]	; 0x7c
   15a3c:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   15a40:	bl	1b388 <__assert_fail@plt+0x9614>
   15a44:	ldr	r3, [r4, #32]
   15a48:	and	r3, r3, #61440	; 0xf000
   15a4c:	cmp	r3, #40960	; 0xa000
   15a50:	bne	15d28 <__assert_fail@plt+0x3fb4>
   15a54:	mov	r3, #6
   15a58:	str	r3, [r4, #120]	; 0x78
   15a5c:	b	15d38 <__assert_fail@plt+0x3fc4>
   15a60:	bl	12d28 <__assert_fail@plt+0xfb4>
   15a64:	str	r0, [sp]
   15a68:	mov	r3, #0
   15a6c:	add	r2, r4, #16
   15a70:	mov	r1, r8
   15a74:	mvn	r0, #99	; 0x63
   15a78:	bl	12ef8 <__assert_fail@plt+0x1184>
   15a7c:	cmp	r5, #2
   15a80:	beq	15a9c <__assert_fail@plt+0x3d28>
   15a84:	cmp	r0, #0
   15a88:	blt	15aac <__assert_fail@plt+0x3d38>
   15a8c:	ldr	r3, [r4, #32]
   15a90:	and	r3, r3, #61440	; 0xf000
   15a94:	cmp	r3, #16384	; 0x4000
   15a98:	bne	1586c <__assert_fail@plt+0x3af8>
   15a9c:	cmp	r0, #0
   15aa0:	streq	r6, [fp, #-728]	; 0xfffffd28
   15aa4:	beq	15898 <__assert_fail@plt+0x3b24>
   15aa8:	b	15abc <__assert_fail@plt+0x3d48>
   15aac:	bl	11bb8 <__errno_location@plt>
   15ab0:	ldr	r3, [r0]
   15ab4:	cmp	r3, #2
   15ab8:	beq	1586c <__assert_fail@plt+0x3af8>
   15abc:	mov	r2, #5
   15ac0:	ldr	r1, [pc, #2056]	; 162d0 <__assert_fail@plt+0x455c>
   15ac4:	mov	r0, #0
   15ac8:	bl	11984 <dcgettext@plt>
   15acc:	mov	r2, r8
   15ad0:	mov	r1, r0
   15ad4:	mov	r0, #1
   15ad8:	bl	130b0 <__assert_fail@plt+0x133c>
   15adc:	ldr	r3, [pc, #2032]	; 162d4 <__assert_fail@plt+0x4560>
   15ae0:	str	r3, [r4, #128]	; 0x80
   15ae4:	mov	r6, #0
   15ae8:	mov	r7, #0
   15aec:	b	15e54 <__assert_fail@plt+0x40e0>
   15af0:	mov	r2, #5
   15af4:	ldr	r1, [pc, #2004]	; 162d0 <__assert_fail@plt+0x455c>
   15af8:	mov	r0, #0
   15afc:	bl	11984 <dcgettext@plt>
   15b00:	mov	r2, r8
   15b04:	mov	r1, r0
   15b08:	mov	r0, r6
   15b0c:	bl	130b0 <__assert_fail@plt+0x133c>
   15b10:	ldr	r3, [pc, #1980]	; 162d4 <__assert_fail@plt+0x4560>
   15b14:	str	r3, [r4, #128]	; 0x80
   15b18:	cmp	r6, #0
   15b1c:	movne	r6, #0
   15b20:	movne	r7, #0
   15b24:	bne	15e54 <__assert_fail@plt+0x40e0>
   15b28:	ldr	r0, [fp, #-720]	; 0xfffffd30
   15b2c:	bl	22804 <_obstack_memory_used@@Base+0x2e30>
   15b30:	str	r0, [sl, r9]
   15b34:	ldr	r2, [pc, #1912]	; 162b4 <__assert_fail@plt+0x4540>
   15b38:	ldr	r3, [r2, #8]
   15b3c:	add	r3, r3, #1
   15b40:	str	r3, [r2, #8]
   15b44:	mov	r6, #0
   15b48:	mov	r7, #0
   15b4c:	b	15e54 <__assert_fail@plt+0x40e0>
   15b50:	ldr	r3, [pc, #1884]	; 162b4 <__assert_fail@plt+0x4540>
   15b54:	ldrb	r3, [r3, #4024]	; 0xfb8
   15b58:	cmp	r3, #0
   15b5c:	beq	158bc <__assert_fail@plt+0x3b48>
   15b60:	mov	r0, #21
   15b64:	bl	1245c <__assert_fail@plt+0x6e8>
   15b68:	subs	r5, r0, #0
   15b6c:	beq	158bc <__assert_fail@plt+0x3b48>
   15b70:	ldrd	r2, [r4, #16]
   15b74:	ldr	r1, [pc, #1868]	; 162c8 <__assert_fail@plt+0x4554>
   15b78:	ldrd	r0, [r1, #-8]
   15b7c:	cmp	r3, r1
   15b80:	cmpeq	r2, r0
   15b84:	beq	15bf4 <__assert_fail@plt+0x3e80>
   15b88:	mov	r0, r8
   15b8c:	bl	11c84 <cap_get_file@plt>
   15b90:	subs	r7, r0, #0
   15b94:	beq	15bd0 <__assert_fail@plt+0x3e5c>
   15b98:	mov	r1, #0
   15b9c:	mov	r0, r7
   15ba0:	bl	11870 <cap_to_text@plt>
   15ba4:	str	r0, [fp, #-724]	; 0xfffffd2c
   15ba8:	mov	r0, r7
   15bac:	bl	11ccc <cap_free@plt>
   15bb0:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   15bb4:	cmp	r3, #0
   15bb8:	beq	15bd0 <__assert_fail@plt+0x3e5c>
   15bbc:	ldrb	r7, [r3]
   15bc0:	mov	r0, r3
   15bc4:	bl	11ccc <cap_free@plt>
   15bc8:	cmp	r7, #0
   15bcc:	bne	15c04 <__assert_fail@plt+0x3e90>
   15bd0:	bl	11bb8 <__errno_location@plt>
   15bd4:	ldr	r0, [r0]
   15bd8:	bl	11f44 <__assert_fail@plt+0x1d0>
   15bdc:	subs	r5, r0, #0
   15be0:	ldrdne	r2, [r4, #16]
   15be4:	ldrne	r1, [pc, #1756]	; 162c8 <__assert_fail@plt+0x4554>
   15be8:	strdne	r2, [r1, #-8]
   15bec:	movne	r5, #0
   15bf0:	b	15c04 <__assert_fail@plt+0x3e90>
   15bf4:	bl	11bb8 <__errno_location@plt>
   15bf8:	mov	r3, #95	; 0x5f
   15bfc:	str	r3, [r0]
   15c00:	mov	r5, #0
   15c04:	strb	r5, [r4, #140]	; 0x8c
   15c08:	b	158bc <__assert_fail@plt+0x3b48>
   15c0c:	bl	11bb8 <__errno_location@plt>
   15c10:	mov	r3, #95	; 0x5f
   15c14:	str	r3, [r0]
   15c18:	mvn	r7, #0
   15c1c:	b	15c50 <__assert_fail@plt+0x3edc>
   15c20:	add	r1, r4, #128	; 0x80
   15c24:	mov	r0, r8
   15c28:	bl	2174c <_obstack_memory_used@@Base+0x1d78>
   15c2c:	mov	r7, r0
   15c30:	b	15910 <__assert_fail@plt+0x3b9c>
   15c34:	bl	11bb8 <__errno_location@plt>
   15c38:	ldr	r0, [r0]
   15c3c:	bl	11f44 <__assert_fail@plt+0x1d0>
   15c40:	cmp	r0, #0
   15c44:	ldrdne	r2, [r4, #16]
   15c48:	ldrne	r1, [pc, #1656]	; 162c8 <__assert_fail@plt+0x4554>
   15c4c:	strdne	r2, [r1]
   15c50:	ldr	r3, [pc, #1660]	; 162d4 <__assert_fail@plt+0x4560>
   15c54:	str	r3, [r4, #128]	; 0x80
   15c58:	bl	11bb8 <__errno_location@plt>
   15c5c:	ldr	r5, [r0]
   15c60:	cmp	r5, #95	; 0x5f
   15c64:	cmpne	r5, #61	; 0x3d
   15c68:	moveq	r5, #1
   15c6c:	movne	r5, #0
   15c70:	beq	1623c <__assert_fail@plt+0x44c8>
   15c74:	cmp	r7, #0
   15c78:	movlt	r3, #0
   15c7c:	strlt	r3, [r4, #136]	; 0x88
   15c80:	bge	1592c <__assert_fail@plt+0x3bb8>
   15c84:	bl	11bb8 <__errno_location@plt>
   15c88:	ldr	r5, [r0]
   15c8c:	mov	r2, r8
   15c90:	mov	r1, #3
   15c94:	mov	r0, #0
   15c98:	bl	213f0 <_obstack_memory_used@@Base+0x1a1c>
   15c9c:	mov	r3, r0
   15ca0:	ldr	r2, [pc, #1584]	; 162d8 <__assert_fail@plt+0x4564>
   15ca4:	mov	r1, r5
   15ca8:	mov	r0, #0
   15cac:	bl	11a8c <error@plt>
   15cb0:	b	15d18 <__assert_fail@plt+0x3fa4>
   15cb4:	bl	11bb8 <__errno_location@plt>
   15cb8:	mov	r3, #95	; 0x5f
   15cbc:	str	r3, [r0]
   15cc0:	mov	r7, #0
   15cc4:	lsr	r3, r7, #31
   15cc8:	cmp	r7, #0
   15ccc:	movle	r7, #0
   15cd0:	movgt	r7, #1
   15cd4:	orrs	r2, r7, r5
   15cd8:	moveq	r5, #0
   15cdc:	beq	15cf4 <__assert_fail@plt+0x3f80>
   15ce0:	eor	r7, r7, #1
   15ce4:	and	r5, r5, r7
   15ce8:	cmp	r5, #0
   15cec:	movne	r5, #1
   15cf0:	moveq	r5, #2
   15cf4:	str	r5, [r4, #136]	; 0x88
   15cf8:	ldr	r1, [pc, #1460]	; 162b4 <__assert_fail@plt+0x4540>
   15cfc:	ldrb	r2, [r1, #3129]	; 0xc39
   15d00:	cmp	r5, #0
   15d04:	moveq	r5, r2
   15d08:	orrne	r5, r2, #1
   15d0c:	strb	r5, [r1, #3129]	; 0xc39
   15d10:	cmp	r3, #0
   15d14:	bne	15c84 <__assert_fail@plt+0x3f10>
   15d18:	ldr	r3, [r4, #32]
   15d1c:	and	r3, r3, #61440	; 0xf000
   15d20:	cmp	r3, #40960	; 0xa000
   15d24:	beq	15e90 <__assert_fail@plt+0x411c>
   15d28:	cmp	r3, #16384	; 0x4000
   15d2c:	movne	r3, #5
   15d30:	strne	r3, [r4, #120]	; 0x78
   15d34:	beq	15f28 <__assert_fail@plt+0x41b4>
   15d38:	ldrd	r6, [r4, #80]	; 0x50
   15d3c:	ldr	r3, [pc, #1392]	; 162b4 <__assert_fail@plt+0x4540>
   15d40:	ldr	r3, [r3, #3116]	; 0xc2c
   15d44:	cmp	r3, #0
   15d48:	beq	15d5c <__assert_fail@plt+0x3fe8>
   15d4c:	ldr	r3, [pc, #1376]	; 162b4 <__assert_fail@plt+0x4540>
   15d50:	ldrb	r3, [r3, #3113]	; 0xc29
   15d54:	cmp	r3, #0
   15d58:	beq	162a0 <__assert_fail@plt+0x452c>
   15d5c:	ldr	r5, [pc, #1360]	; 162b4 <__assert_fail@plt+0x4540>
   15d60:	add	r3, r5, #3600	; 0xe10
   15d64:	ldrd	r2, [r3, #-8]
   15d68:	strd	r2, [sp, #8]
   15d6c:	mov	r2, #512	; 0x200
   15d70:	mov	r3, #0
   15d74:	strd	r2, [sp]
   15d78:	ldr	r3, [r5, #3588]	; 0xe04
   15d7c:	sub	r2, fp, #692	; 0x2b4
   15d80:	mov	r0, r6
   15d84:	mov	r1, r7
   15d88:	bl	1c540 <__assert_fail@plt+0xa7cc>
   15d8c:	mov	r1, #0
   15d90:	bl	1da48 <__assert_fail@plt+0xbcd4>
   15d94:	ldr	r3, [r5, #3136]	; 0xc40
   15d98:	cmp	r0, r3
   15d9c:	movgt	r3, r5
   15da0:	strgt	r0, [r3, #3136]	; 0xc40
   15da4:	ldr	r3, [pc, #1288]	; 162b4 <__assert_fail@plt+0x4540>
   15da8:	ldr	r3, [r3, #3116]	; 0xc2c
   15dac:	cmp	r3, #0
   15db0:	bne	161b8 <__assert_fail@plt+0x4444>
   15db4:	ldr	r3, [pc, #1312]	; 162dc <__assert_fail@plt+0x4568>
   15db8:	ldrb	r3, [r3, #204]	; 0xcc
   15dbc:	cmp	r3, #0
   15dc0:	bne	15f54 <__assert_fail@plt+0x41e0>
   15dc4:	ldr	r3, [pc, #1296]	; 162dc <__assert_fail@plt+0x4568>
   15dc8:	ldrb	r3, [r3, #205]	; 0xcd
   15dcc:	cmp	r3, #0
   15dd0:	bne	15f74 <__assert_fail@plt+0x4200>
   15dd4:	ldr	r3, [pc, #1240]	; 162b4 <__assert_fail@plt+0x4540>
   15dd8:	ldrb	r3, [r3, #3120]	; 0xc30
   15ddc:	cmp	r3, #0
   15de0:	bne	15fbc <__assert_fail@plt+0x4248>
   15de4:	ldr	r3, [pc, #1224]	; 162b4 <__assert_fail@plt+0x4540>
   15de8:	ldrb	r3, [r3, #3600]	; 0xe10
   15dec:	cmp	r3, #0
   15df0:	beq	15e18 <__assert_fail@plt+0x40a4>
   15df4:	ldr	r0, [r4, #128]	; 0x80
   15df8:	bl	11b94 <strlen@plt>
   15dfc:	mov	r2, r0
   15e00:	ldr	r3, [pc, #1196]	; 162b4 <__assert_fail@plt+0x4540>
   15e04:	ldr	r3, [r3, #3156]	; 0xc54
   15e08:	cmp	r0, r3
   15e0c:	ble	15e18 <__assert_fail@plt+0x40a4>
   15e10:	ldr	r3, [pc, #1180]	; 162b4 <__assert_fail@plt+0x4540>
   15e14:	str	r2, [r3, #3156]	; 0xc54
   15e18:	ldr	r3, [pc, #1172]	; 162b4 <__assert_fail@plt+0x4540>
   15e1c:	ldr	r3, [r3, #3116]	; 0xc2c
   15e20:	cmp	r3, #0
   15e24:	beq	15fdc <__assert_fail@plt+0x4268>
   15e28:	ldr	r3, [pc, #1156]	; 162b4 <__assert_fail@plt+0x4540>
   15e2c:	ldrb	r3, [r3, #3112]	; 0xc28
   15e30:	cmp	r3, #0
   15e34:	bne	16118 <__assert_fail@plt+0x43a4>
   15e38:	ldr	r0, [fp, #-720]	; 0xfffffd30
   15e3c:	bl	22804 <_obstack_memory_used@@Base+0x2e30>
   15e40:	str	r0, [sl, r9]
   15e44:	ldr	r2, [pc, #1128]	; 162b4 <__assert_fail@plt+0x4540>
   15e48:	ldr	r3, [r2, #8]
   15e4c:	add	r3, r3, #1
   15e50:	str	r3, [r2, #8]
   15e54:	mov	r0, r6
   15e58:	mov	r1, r7
   15e5c:	sub	sp, fp, #32
   15e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e64:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   15e68:	ldr	r0, [r3]
   15e6c:	bl	11f44 <__assert_fail@plt+0x1d0>
   15e70:	cmp	r0, #0
   15e74:	ldrdne	r2, [r4, #16]
   15e78:	ldrne	r1, [pc, #1120]	; 162e0 <__assert_fail@plt+0x456c>
   15e7c:	strdne	r2, [r1, #-8]
   15e80:	b	15cc4 <__assert_fail@plt+0x3f50>
   15e84:	mov	r3, #0
   15e88:	mov	r5, #1
   15e8c:	b	15cf4 <__assert_fail@plt+0x3f80>
   15e90:	ldr	r3, [pc, #1052]	; 162b4 <__assert_fail@plt+0x4540>
   15e94:	ldr	r3, [r3, #3116]	; 0xc2c
   15e98:	cmp	r3, #0
   15e9c:	beq	1596c <__assert_fail@plt+0x3bf8>
   15ea0:	b	1595c <__assert_fail@plt+0x3be8>
   15ea4:	mov	r2, #5
   15ea8:	ldr	r1, [pc, #1076]	; 162e4 <__assert_fail@plt+0x4570>
   15eac:	mov	r0, #0
   15eb0:	bl	11984 <dcgettext@plt>
   15eb4:	mov	r2, r8
   15eb8:	mov	r1, r0
   15ebc:	mov	r0, r6
   15ec0:	bl	130b0 <__assert_fail@plt+0x133c>
   15ec4:	ldr	r3, [r4, #4]
   15ec8:	cmp	r3, #0
   15ecc:	streq	r5, [fp, #-724]	; 0xfffffd2c
   15ed0:	beq	15a3c <__assert_fail@plt+0x3cc8>
   15ed4:	mov	r5, r3
   15ed8:	b	15988 <__assert_fail@plt+0x3c14>
   15edc:	mov	r0, r5
   15ee0:	bl	22804 <_obstack_memory_used@@Base+0x2e30>
   15ee4:	str	r0, [fp, #-724]	; 0xfffffd2c
   15ee8:	b	159e4 <__assert_fail@plt+0x3c70>
   15eec:	mov	r0, r5
   15ef0:	bl	22804 <_obstack_memory_used@@Base+0x2e30>
   15ef4:	str	r0, [fp, #-724]	; 0xfffffd2c
   15ef8:	b	159e4 <__assert_fail@plt+0x3c70>
   15efc:	ldr	r0, [r4, #4]
   15f00:	bl	13120 <__assert_fail@plt+0x13ac>
   15f04:	cmp	r0, #0
   15f08:	mvnne	r3, #0
   15f0c:	strne	r3, [r4, #144]	; 0x90
   15f10:	b	159fc <__assert_fail@plt+0x3c88>
   15f14:	ldr	r3, [pc, #920]	; 162b4 <__assert_fail@plt+0x4540>
   15f18:	ldrb	r3, [r3, #4052]	; 0xfd4
   15f1c:	cmp	r3, #0
   15f20:	beq	15a3c <__assert_fail@plt+0x3cc8>
   15f24:	b	15a0c <__assert_fail@plt+0x3c98>
   15f28:	cmp	r6, #0
   15f2c:	beq	15f48 <__assert_fail@plt+0x41d4>
   15f30:	ldr	r3, [pc, #892]	; 162b4 <__assert_fail@plt+0x4540>
   15f34:	ldrb	r3, [r3, #4080]	; 0xff0
   15f38:	cmp	r3, #0
   15f3c:	moveq	r3, #9
   15f40:	streq	r3, [r4, #120]	; 0x78
   15f44:	beq	15d38 <__assert_fail@plt+0x3fc4>
   15f48:	mov	r3, #3
   15f4c:	str	r3, [r4, #120]	; 0x78
   15f50:	b	15d38 <__assert_fail@plt+0x3fc4>
   15f54:	ldr	r0, [r4, #40]	; 0x28
   15f58:	bl	13184 <__assert_fail@plt+0x1410>
   15f5c:	ldr	r3, [pc, #848]	; 162b4 <__assert_fail@plt+0x4540>
   15f60:	ldr	r3, [r3, #3144]	; 0xc48
   15f64:	cmp	r0, r3
   15f68:	ldrgt	r3, [pc, #836]	; 162b4 <__assert_fail@plt+0x4540>
   15f6c:	strgt	r0, [r3, #3144]	; 0xc48
   15f70:	b	15dc4 <__assert_fail@plt+0x4050>
   15f74:	ldr	r5, [r4, #44]	; 0x2c
   15f78:	ldr	r3, [pc, #820]	; 162b4 <__assert_fail@plt+0x4540>
   15f7c:	ldrb	r3, [r3, #3180]	; 0xc6c
   15f80:	cmp	r3, #0
   15f84:	movne	r0, #0
   15f88:	beq	15fb0 <__assert_fail@plt+0x423c>
   15f8c:	mov	r2, r5
   15f90:	mov	r3, #0
   15f94:	bl	12eac <__assert_fail@plt+0x1138>
   15f98:	ldr	r3, [pc, #788]	; 162b4 <__assert_fail@plt+0x4540>
   15f9c:	ldr	r3, [r3, #3148]	; 0xc4c
   15fa0:	cmp	r3, r0
   15fa4:	ldrlt	r3, [pc, #776]	; 162b4 <__assert_fail@plt+0x4540>
   15fa8:	strlt	r0, [r3, #3148]	; 0xc4c
   15fac:	b	15dd4 <__assert_fail@plt+0x4060>
   15fb0:	mov	r0, r5
   15fb4:	bl	1d110 <__assert_fail@plt+0xb39c>
   15fb8:	b	15f8c <__assert_fail@plt+0x4218>
   15fbc:	ldr	r0, [r4, #40]	; 0x28
   15fc0:	bl	13184 <__assert_fail@plt+0x1410>
   15fc4:	ldr	r3, [pc, #744]	; 162b4 <__assert_fail@plt+0x4540>
   15fc8:	ldr	r3, [r3, #3152]	; 0xc50
   15fcc:	cmp	r0, r3
   15fd0:	ldrgt	r3, [pc, #732]	; 162b4 <__assert_fail@plt+0x4540>
   15fd4:	strgt	r0, [r3, #3152]	; 0xc50
   15fd8:	b	15de4 <__assert_fail@plt+0x4070>
   15fdc:	sub	r2, fp, #716	; 0x2cc
   15fe0:	ldr	r0, [r4, #36]	; 0x24
   15fe4:	mov	r1, #0
   15fe8:	bl	1d398 <__assert_fail@plt+0xb624>
   15fec:	bl	11b94 <strlen@plt>
   15ff0:	ldr	r3, [pc, #700]	; 162b4 <__assert_fail@plt+0x4540>
   15ff4:	ldr	r3, [r3, #3140]	; 0xc44
   15ff8:	cmp	r0, r3
   15ffc:	ldrgt	r3, [pc, #688]	; 162b4 <__assert_fail@plt+0x4540>
   16000:	strgt	r0, [r3, #3140]	; 0xc44
   16004:	ldr	r3, [r4, #32]
   16008:	and	r3, r3, #45056	; 0xb000
   1600c:	cmp	r3, #8192	; 0x2000
   16010:	bne	160b8 <__assert_fail@plt+0x4344>
   16014:	ldr	r0, [r4, #48]	; 0x30
   16018:	ldr	r3, [r4, #52]	; 0x34
   1601c:	lsl	r0, r0, #12
   16020:	bic	r3, r3, #4080	; 0xff0
   16024:	bic	r3, r3, #15
   16028:	sub	r2, fp, #692	; 0x2b4
   1602c:	orr	r0, r3, r0, lsr #20
   16030:	mov	r1, #0
   16034:	bl	1d398 <__assert_fail@plt+0xb624>
   16038:	bl	11b94 <strlen@plt>
   1603c:	ldr	r3, [pc, #624]	; 162b4 <__assert_fail@plt+0x4540>
   16040:	ldr	r3, [r3, #3160]	; 0xc58
   16044:	cmp	r0, r3
   16048:	ldrgt	r3, [pc, #612]	; 162b4 <__assert_fail@plt+0x4540>
   1604c:	strgt	r0, [r3, #3160]	; 0xc58
   16050:	ldr	r3, [r4, #48]	; 0x30
   16054:	ldr	r2, [r4, #52]	; 0x34
   16058:	uxtb	r0, r3
   1605c:	lsr	r3, r3, #12
   16060:	orr	r3, r3, r2, lsl #20
   16064:	bic	r3, r3, #255	; 0xff
   16068:	sub	r2, fp, #692	; 0x2b4
   1606c:	orr	r0, r3, r0
   16070:	mov	r1, #0
   16074:	bl	1d398 <__assert_fail@plt+0xb624>
   16078:	bl	11b94 <strlen@plt>
   1607c:	ldr	r3, [pc, #560]	; 162b4 <__assert_fail@plt+0x4540>
   16080:	ldr	r3, [r3, #3164]	; 0xc5c
   16084:	cmp	r0, r3
   16088:	ldrgt	r3, [pc, #548]	; 162b4 <__assert_fail@plt+0x4540>
   1608c:	strgt	r0, [r3, #3164]	; 0xc5c
   16090:	ldr	r2, [pc, #540]	; 162b4 <__assert_fail@plt+0x4540>
   16094:	ldr	r3, [r2, #3160]	; 0xc58
   16098:	add	r3, r3, #2
   1609c:	ldr	r1, [r2, #3164]	; 0xc5c
   160a0:	add	r3, r3, r1
   160a4:	ldr	r2, [r2, #3168]	; 0xc60
   160a8:	cmp	r3, r2
   160ac:	ldrgt	r2, [pc, #512]	; 162b4 <__assert_fail@plt+0x4540>
   160b0:	strgt	r3, [r2, #3168]	; 0xc60
   160b4:	b	15e28 <__assert_fail@plt+0x40b4>
   160b8:	ldr	r5, [pc, #500]	; 162b4 <__assert_fail@plt+0x4540>
   160bc:	ldrd	r0, [r4, #64]	; 0x40
   160c0:	ldr	r3, [pc, #532]	; 162dc <__assert_fail@plt+0x4568>
   160c4:	ldrd	r2, [r3, #216]	; 0xd8
   160c8:	strd	r2, [sp, #8]
   160cc:	mov	r2, #1
   160d0:	mov	r3, #0
   160d4:	strd	r2, [sp]
   160d8:	ldr	r3, [r5, #4084]	; 0xff4
   160dc:	sub	r2, fp, #692	; 0x2b4
   160e0:	bl	1c540 <__assert_fail@plt+0xa7cc>
   160e4:	mov	r1, #0
   160e8:	bl	1da48 <__assert_fail@plt+0xbcd4>
   160ec:	ldr	r3, [r5, #3168]	; 0xc60
   160f0:	cmp	r0, r3
   160f4:	movgt	r3, r5
   160f8:	strgt	r0, [r3, #3168]	; 0xc60
   160fc:	b	15e28 <__assert_fail@plt+0x40b4>
   16100:	mov	r6, #0
   16104:	mov	r7, #0
   16108:	b	15e28 <__assert_fail@plt+0x40b4>
   1610c:	mov	r6, #0
   16110:	mov	r7, #0
   16114:	b	15e28 <__assert_fail@plt+0x40b4>
   16118:	sub	r2, fp, #692	; 0x2b4
   1611c:	ldrd	r0, [r4, #112]	; 0x70
   16120:	bl	1d398 <__assert_fail@plt+0xb624>
   16124:	bl	11b94 <strlen@plt>
   16128:	ldr	r3, [pc, #388]	; 162b4 <__assert_fail@plt+0x4540>
   1612c:	ldr	r3, [r3, #3132]	; 0xc3c
   16130:	cmp	r0, r3
   16134:	ldrgt	r3, [pc, #376]	; 162b4 <__assert_fail@plt+0x4540>
   16138:	strgt	r0, [r3, #3132]	; 0xc3c
   1613c:	b	15e38 <__assert_fail@plt+0x40c4>
   16140:	ldr	r3, [fp, #-720]	; 0xfffffd30
   16144:	ldrb	r5, [r3]
   16148:	cmp	r5, #47	; 0x2f
   1614c:	beq	1585c <__assert_fail@plt+0x3ae8>
   16150:	ldr	r3, [fp, #8]
   16154:	ldrb	r7, [r3]
   16158:	cmp	r7, #0
   1615c:	ldreq	r8, [fp, #-720]	; 0xfffffd30
   16160:	bne	161fc <__assert_fail@plt+0x4488>
   16164:	mov	r1, #2
   16168:	mov	r0, r8
   1616c:	bl	1a258 <__assert_fail@plt+0x84e4>
   16170:	str	r0, [r4, #8]
   16174:	cmp	r0, #0
   16178:	bne	15798 <__assert_fail@plt+0x3a24>
   1617c:	mov	r2, #5
   16180:	ldr	r1, [pc, #352]	; 162e8 <__assert_fail@plt+0x4574>
   16184:	bl	11984 <dcgettext@plt>
   16188:	mov	r2, r8
   1618c:	mov	r1, r0
   16190:	mov	r0, r6
   16194:	bl	130b0 <__assert_fail@plt+0x133c>
   16198:	b	15798 <__assert_fail@plt+0x3a24>
   1619c:	ldr	r3, [r4, #32]
   161a0:	and	r3, r3, #61440	; 0xf000
   161a4:	cmp	r3, #40960	; 0xa000
   161a8:	beq	1595c <__assert_fail@plt+0x3be8>
   161ac:	ldr	r3, [r4, #32]
   161b0:	and	r3, r3, #61440	; 0xf000
   161b4:	b	15d28 <__assert_fail@plt+0x3fb4>
   161b8:	ldr	r3, [pc, #244]	; 162b4 <__assert_fail@plt+0x4540>
   161bc:	ldrb	r3, [r3, #3600]	; 0xe10
   161c0:	cmp	r3, #0
   161c4:	beq	15e28 <__assert_fail@plt+0x40b4>
   161c8:	ldr	r0, [r4, #128]	; 0x80
   161cc:	bl	11b94 <strlen@plt>
   161d0:	mov	r2, r0
   161d4:	ldr	r3, [pc, #216]	; 162b4 <__assert_fail@plt+0x4540>
   161d8:	ldr	r3, [r3, #3156]	; 0xc54
   161dc:	cmp	r3, r0
   161e0:	blt	15e10 <__assert_fail@plt+0x409c>
   161e4:	b	15e28 <__assert_fail@plt+0x40b4>
   161e8:	ldr	r3, [fp, #8]
   161ec:	ldrb	r7, [r3]
   161f0:	cmp	r7, #0
   161f4:	ldreq	r8, [fp, #-720]	; 0xfffffd30
   161f8:	beq	15798 <__assert_fail@plt+0x3a24>
   161fc:	ldr	r0, [fp, #-720]	; 0xfffffd30
   16200:	bl	11b94 <strlen@plt>
   16204:	mov	r8, r0
   16208:	ldr	r0, [fp, #8]
   1620c:	bl	11b94 <strlen@plt>
   16210:	add	r0, r8, r0
   16214:	add	r0, r0, #16
   16218:	bic	r0, r0, #7
   1621c:	sub	sp, sp, r0
   16220:	add	r8, sp, #16
   16224:	cmp	r7, #46	; 0x2e
   16228:	beq	157d8 <__assert_fail@plt+0x3a64>
   1622c:	ldr	r3, [fp, #8]
   16230:	add	r2, r3, #1
   16234:	mov	r1, r8
   16238:	b	157f4 <__assert_fail@plt+0x3a80>
   1623c:	ldr	r3, [pc, #112]	; 162b4 <__assert_fail@plt+0x4540>
   16240:	ldr	r3, [r3, #3116]	; 0xc2c
   16244:	cmp	r3, #0
   16248:	bne	15944 <__assert_fail@plt+0x3bd0>
   1624c:	mov	r5, #0
   16250:	ldrd	r2, [r4, #16]
   16254:	ldr	r1, [pc, #132]	; 162e0 <__assert_fail@plt+0x456c>
   16258:	ldrd	r0, [r1, #-8]
   1625c:	cmp	r3, r1
   16260:	cmpeq	r2, r0
   16264:	beq	15cb4 <__assert_fail@plt+0x3f40>
   16268:	bl	11bb8 <__errno_location@plt>
   1626c:	str	r0, [fp, #-724]	; 0xfffffd2c
   16270:	mov	r3, #0
   16274:	str	r3, [r0]
   16278:	add	r1, r4, #16
   1627c:	mov	r0, r8
   16280:	bl	1abd8 <__assert_fail@plt+0x8e64>
   16284:	subs	r7, r0, #0
   16288:	ble	15e64 <__assert_fail@plt+0x40f0>
   1628c:	lsr	r3, r7, #31
   16290:	cmp	r7, #0
   16294:	movle	r7, #0
   16298:	movgt	r7, #1
   1629c:	b	15ce0 <__assert_fail@plt+0x3f6c>
   162a0:	ldr	r3, [pc, #12]	; 162b4 <__assert_fail@plt+0x4540>
   162a4:	ldrb	r3, [r3, #3600]	; 0xe10
   162a8:	cmp	r3, #0
   162ac:	bne	15df4 <__assert_fail@plt+0x4080>
   162b0:	b	15e28 <__assert_fail@plt+0x40b4>
   162b4:	andeq	r9, r3, r0, lsr r3
   162b8:	andeq	r4, r2, ip, lsr r1
   162bc:	andeq	r0, r0, r7, lsl #26
   162c0:	andeq	r5, r2, ip, lsl #14
   162c4:	andeq	r5, r2, r8, ror r7
   162c8:	andeq	sl, r3, r0, lsl r3
   162cc:	strdeq	r5, [r2], -r8
   162d0:	andeq	r5, r2, r4, asr #15
   162d4:	andeq	r9, r3, r0, lsr #5
   162d8:	strdeq	r7, [r2], -r4
   162dc:	ldrdeq	r9, [r3], -r0
   162e0:	andeq	sl, r3, r0, lsr #6
   162e4:	ldrdeq	r5, [r2], -r8
   162e8:	andeq	r5, r2, ip, lsr #15
   162ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   162f0:	sub	sp, sp, #4736	; 0x1280
   162f4:	sub	sp, sp, #48	; 0x30
   162f8:	mov	r5, r0
   162fc:	ldrb	r3, [r0, #132]	; 0x84
   16300:	cmp	r3, #0
   16304:	beq	16358 <__assert_fail@plt+0x45e4>
   16308:	add	r1, sp, #4736	; 0x1280
   1630c:	add	r1, r1, #36	; 0x24
   16310:	add	r0, r0, #16
   16314:	bl	1ae04 <__assert_fail@plt+0x9090>
   16318:	ldr	r3, [pc, #2168]	; 16b98 <__assert_fail@plt+0x4e24>
   1631c:	ldrb	r3, [r3, #3129]	; 0xc39
   16320:	cmp	r3, #0
   16324:	bne	163a0 <__assert_fail@plt+0x462c>
   16328:	add	r2, sp, #4736	; 0x1280
   1632c:	add	r2, r2, #46	; 0x2e
   16330:	strb	r3, [r2]
   16334:	ldr	r3, [pc, #2140]	; 16b98 <__assert_fail@plt+0x4e24>
   16338:	ldr	r3, [r3, #3108]	; 0xc24
   1633c:	cmp	r3, #3
   16340:	ldrls	pc, [pc, r3, lsl #2]
   16344:	b	165fc <__assert_fail@plt+0x4888>
   16348:	andeq	r6, r1, r4, lsr #11
   1634c:	ldrdeq	r6, [r1], -r8
   16350:			; <UNDEFINED> instruction: 0x000165bc
   16354:	ldrdeq	r6, [r1], -r4
   16358:	ldr	r2, [r0, #120]	; 0x78
   1635c:	ldr	r3, [pc, #2104]	; 16b9c <__assert_fail@plt+0x4e28>
   16360:	add	r3, r3, r2
   16364:	ldrb	r3, [r3, #400]	; 0x190
   16368:	add	r2, sp, #4736	; 0x1280
   1636c:	add	r2, r2, #36	; 0x24
   16370:	strb	r3, [r2]
   16374:	add	r2, sp, #4736	; 0x1280
   16378:	add	r2, r2, #37	; 0x25
   1637c:	ldr	r3, [pc, #2076]	; 16ba0 <__assert_fail@plt+0x4e2c>
   16380:	str	r3, [r2]
   16384:	str	r3, [r2, #4]
   16388:	strh	r3, [r2, #8]
   1638c:	mov	r3, #0
   16390:	add	r2, sp, #4736	; 0x1280
   16394:	add	r2, r2, #47	; 0x2f
   16398:	strb	r3, [r2]
   1639c:	b	16318 <__assert_fail@plt+0x45a4>
   163a0:	ldr	r3, [r5, #136]	; 0x88
   163a4:	cmp	r3, #1
   163a8:	beq	163c4 <__assert_fail@plt+0x4650>
   163ac:	cmp	r3, #2
   163b0:	moveq	r3, #43	; 0x2b
   163b4:	addeq	r2, sp, #4736	; 0x1280
   163b8:	addeq	r2, r2, #46	; 0x2e
   163bc:	strbeq	r3, [r2]
   163c0:	b	16334 <__assert_fail@plt+0x45c0>
   163c4:	mov	r3, #46	; 0x2e
   163c8:	add	r2, sp, #4736	; 0x1280
   163cc:	add	r2, r2, #46	; 0x2e
   163d0:	strb	r3, [r2]
   163d4:	b	16334 <__assert_fail@plt+0x45c0>
   163d8:	ldr	r3, [r5, #108]	; 0x6c
   163dc:	ldr	r2, [r5, #104]	; 0x68
   163e0:	str	r2, [sp, #1120]	; 0x460
   163e4:	str	r3, [sp, #1124]	; 0x464
   163e8:	mov	r7, #1
   163ec:	ldr	r3, [pc, #1956]	; 16b98 <__assert_fail@plt+0x4e24>
   163f0:	ldrb	r3, [r3, #3112]	; 0xc28
   163f4:	cmp	r3, #0
   163f8:	addeq	r3, sp, #1136	; 0x470
   163fc:	subeq	r4, r3, #8
   16400:	bne	16600 <__assert_fail@plt+0x488c>
   16404:	ldr	r3, [pc, #1932]	; 16b98 <__assert_fail@plt+0x4e24>
   16408:	ldrb	r3, [r3, #3113]	; 0xc29
   1640c:	cmp	r3, #0
   16410:	beq	16470 <__assert_fail@plt+0x46fc>
   16414:	ldrb	r3, [r5, #132]	; 0x84
   16418:	cmp	r3, #0
   1641c:	ldreq	r8, [pc, #1920]	; 16ba4 <__assert_fail@plt+0x4e30>
   16420:	bne	16668 <__assert_fail@plt+0x48f4>
   16424:	ldr	r3, [pc, #1900]	; 16b98 <__assert_fail@plt+0x4e24>
   16428:	ldr	r6, [r3, #3136]	; 0xc40
   1642c:	mov	r1, #0
   16430:	mov	r0, r8
   16434:	bl	1da48 <__assert_fail@plt+0xbcd4>
   16438:	sub	r0, r6, r0
   1643c:	cmp	r0, #0
   16440:	ble	16458 <__assert_fail@plt+0x46e4>
   16444:	add	r0, r4, r0
   16448:	mov	r3, #32
   1644c:	strb	r3, [r4], #1
   16450:	cmp	r0, r4
   16454:	bne	1644c <__assert_fail@plt+0x46d8>
   16458:	ldrb	r3, [r8], #1
   1645c:	strb	r3, [r4], #1
   16460:	cmp	r3, #0
   16464:	bne	16458 <__assert_fail@plt+0x46e4>
   16468:	mov	r3, #32
   1646c:	strb	r3, [r4, #-1]
   16470:	ldr	r3, [pc, #1824]	; 16b98 <__assert_fail@plt+0x4e24>
   16474:	ldr	r6, [r3, #3140]	; 0xc44
   16478:	ldrb	r3, [r5, #132]	; 0x84
   1647c:	cmp	r3, #0
   16480:	ldreq	r0, [pc, #1820]	; 16ba4 <__assert_fail@plt+0x4e30>
   16484:	bne	166a0 <__assert_fail@plt+0x492c>
   16488:	str	r0, [sp, #8]
   1648c:	str	r6, [sp, #4]
   16490:	add	r3, sp, #4736	; 0x1280
   16494:	add	r3, r3, #36	; 0x24
   16498:	str	r3, [sp]
   1649c:	ldr	r3, [pc, #1796]	; 16ba8 <__assert_fail@plt+0x4e34>
   164a0:	mvn	r2, #0
   164a4:	mov	r1, #1
   164a8:	mov	r0, r4
   164ac:	bl	11bc4 <__sprintf_chk@plt>
   164b0:	add	r4, r4, r0
   164b4:	bl	14260 <__assert_fail@plt+0x24ec>
   164b8:	ldr	r3, [pc, #1772]	; 16bac <__assert_fail@plt+0x4e38>
   164bc:	ldrb	r3, [r3, #204]	; 0xcc
   164c0:	cmp	r3, #0
   164c4:	bne	164f8 <__assert_fail@plt+0x4784>
   164c8:	ldr	r3, [pc, #1756]	; 16bac <__assert_fail@plt+0x4e38>
   164cc:	ldrb	r3, [r3, #205]	; 0xcd
   164d0:	cmp	r3, #0
   164d4:	bne	164f8 <__assert_fail@plt+0x4784>
   164d8:	ldr	r3, [pc, #1720]	; 16b98 <__assert_fail@plt+0x4e24>
   164dc:	ldrb	r3, [r3, #3120]	; 0xc30
   164e0:	cmp	r3, #0
   164e4:	bne	164f8 <__assert_fail@plt+0x4784>
   164e8:	ldr	r3, [pc, #1704]	; 16b98 <__assert_fail@plt+0x4e24>
   164ec:	ldrb	r3, [r3, #3600]	; 0xe10
   164f0:	cmp	r3, #0
   164f4:	beq	16550 <__assert_fail@plt+0x47dc>
   164f8:	add	r3, sp, #1136	; 0x470
   164fc:	sub	r0, r3, #8
   16500:	sub	r1, r4, r0
   16504:	bl	1420c <__assert_fail@plt+0x2498>
   16508:	ldr	r3, [pc, #1692]	; 16bac <__assert_fail@plt+0x4e38>
   1650c:	ldrb	r3, [r3, #204]	; 0xcc
   16510:	cmp	r3, #0
   16514:	bne	166b4 <__assert_fail@plt+0x4940>
   16518:	ldr	r3, [pc, #1676]	; 16bac <__assert_fail@plt+0x4e38>
   1651c:	ldrb	r3, [r3, #205]	; 0xcd
   16520:	cmp	r3, #0
   16524:	bne	166cc <__assert_fail@plt+0x4958>
   16528:	ldr	r3, [pc, #1640]	; 16b98 <__assert_fail@plt+0x4e24>
   1652c:	ldrb	r3, [r3, #3120]	; 0xc30
   16530:	cmp	r3, #0
   16534:	bne	1671c <__assert_fail@plt+0x49a8>
   16538:	ldr	r3, [pc, #1624]	; 16b98 <__assert_fail@plt+0x4e24>
   1653c:	ldrb	r3, [r3, #3600]	; 0xe10
   16540:	cmp	r3, #0
   16544:	addeq	r3, sp, #1136	; 0x470
   16548:	subeq	r4, r3, #8
   1654c:	bne	16734 <__assert_fail@plt+0x49c0>
   16550:	ldrb	r3, [r5, #132]	; 0x84
   16554:	cmp	r3, #0
   16558:	beq	16804 <__assert_fail@plt+0x4a90>
   1655c:	ldr	r3, [r5, #32]
   16560:	and	r3, r3, #45056	; 0xb000
   16564:	cmp	r3, #8192	; 0x2000
   16568:	beq	1675c <__assert_fail@plt+0x49e8>
   1656c:	ldr	r3, [pc, #1572]	; 16b98 <__assert_fail@plt+0x4e24>
   16570:	ldr	r1, [r3, #4084]	; 0xff4
   16574:	ldr	r3, [pc, #1584]	; 16bac <__assert_fail@plt+0x4e38>
   16578:	ldrd	r2, [r3, #216]	; 0xd8
   1657c:	strd	r2, [sp, #8]
   16580:	mov	r2, #1
   16584:	mov	r3, #0
   16588:	strd	r2, [sp]
   1658c:	mov	r3, r1
   16590:	add	r2, sp, #72	; 0x48
   16594:	ldrd	r0, [r5, #64]	; 0x40
   16598:	bl	1c540 <__assert_fail@plt+0xa7cc>
   1659c:	mov	r8, r0
   165a0:	b	16808 <__assert_fail@plt+0x4a94>
   165a4:	ldr	r3, [r5, #100]	; 0x64
   165a8:	ldr	r2, [r5, #96]	; 0x60
   165ac:	str	r2, [sp, #1120]	; 0x460
   165b0:	str	r3, [sp, #1124]	; 0x464
   165b4:	mov	r7, #1
   165b8:	b	163ec <__assert_fail@plt+0x4678>
   165bc:	ldr	r3, [r5, #92]	; 0x5c
   165c0:	ldr	r2, [r5, #88]	; 0x58
   165c4:	str	r2, [sp, #1120]	; 0x460
   165c8:	str	r3, [sp, #1124]	; 0x464
   165cc:	mov	r7, #1
   165d0:	b	163ec <__assert_fail@plt+0x4678>
   165d4:	ldr	r7, [r5, #96]	; 0x60
   165d8:	ldr	r3, [r5, #100]	; 0x64
   165dc:	str	r7, [sp, #1120]	; 0x460
   165e0:	str	r3, [sp, #1124]	; 0x464
   165e4:	cmn	r7, #1
   165e8:	cmneq	r3, #1
   165ec:	moveq	r7, #1
   165f0:	movne	r7, #0
   165f4:	eor	r7, r7, #1
   165f8:	b	163ec <__assert_fail@plt+0x4678>
   165fc:	bl	11d2c <abort@plt>
   16600:	ldr	r3, [pc, #1424]	; 16b98 <__assert_fail@plt+0x4e24>
   16604:	ldr	r4, [r3, #3132]	; 0xc3c
   16608:	ldrb	r3, [r5, #132]	; 0x84
   1660c:	cmp	r3, #0
   16610:	beq	16630 <__assert_fail@plt+0x48bc>
   16614:	ldrd	r0, [r5, #112]	; 0x70
   16618:	orrs	r3, r0, r1
   1661c:	ldreq	r0, [pc, #1408]	; 16ba4 <__assert_fail@plt+0x4e30>
   16620:	beq	16634 <__assert_fail@plt+0x48c0>
   16624:	add	r2, sp, #72	; 0x48
   16628:	bl	1d398 <__assert_fail@plt+0xb624>
   1662c:	b	16634 <__assert_fail@plt+0x48c0>
   16630:	ldr	r0, [pc, #1388]	; 16ba4 <__assert_fail@plt+0x4e30>
   16634:	add	r3, sp, #1136	; 0x470
   16638:	sub	r3, r3, #8
   1663c:	str	r3, [sp, #20]
   16640:	str	r0, [sp, #4]
   16644:	str	r4, [sp]
   16648:	ldr	r3, [pc, #1376]	; 16bb0 <__assert_fail@plt+0x4e3c>
   1664c:	ldr	r2, [pc, #1376]	; 16bb4 <__assert_fail@plt+0x4e40>
   16650:	mov	r1, #1
   16654:	ldr	r0, [sp, #20]
   16658:	bl	11bc4 <__sprintf_chk@plt>
   1665c:	ldr	r3, [sp, #20]
   16660:	add	r4, r3, r0
   16664:	b	16404 <__assert_fail@plt+0x4690>
   16668:	ldr	r2, [pc, #1320]	; 16b98 <__assert_fail@plt+0x4e24>
   1666c:	ldr	r1, [r2, #3588]	; 0xe04
   16670:	add	r2, r2, #3600	; 0xe10
   16674:	ldrd	r2, [r2, #-8]
   16678:	strd	r2, [sp, #8]
   1667c:	mov	r2, #512	; 0x200
   16680:	mov	r3, #0
   16684:	strd	r2, [sp]
   16688:	mov	r3, r1
   1668c:	add	r2, sp, #72	; 0x48
   16690:	ldrd	r0, [r5, #80]	; 0x50
   16694:	bl	1c540 <__assert_fail@plt+0xa7cc>
   16698:	mov	r8, r0
   1669c:	b	16424 <__assert_fail@plt+0x46b0>
   166a0:	add	r2, sp, #72	; 0x48
   166a4:	ldr	r0, [r5, #36]	; 0x24
   166a8:	mov	r1, #0
   166ac:	bl	1d398 <__assert_fail@plt+0xb624>
   166b0:	b	16488 <__assert_fail@plt+0x4714>
   166b4:	ldrb	r2, [r5, #132]	; 0x84
   166b8:	ldr	r3, [pc, #1240]	; 16b98 <__assert_fail@plt+0x4e24>
   166bc:	ldr	r1, [r3, #3144]	; 0xc48
   166c0:	ldr	r0, [r5, #40]	; 0x28
   166c4:	bl	146ec <__assert_fail@plt+0x2978>
   166c8:	b	16518 <__assert_fail@plt+0x47a4>
   166cc:	ldr	r4, [r5, #44]	; 0x2c
   166d0:	ldr	r3, [pc, #1216]	; 16b98 <__assert_fail@plt+0x4e24>
   166d4:	ldr	r6, [r3, #3148]	; 0xc4c
   166d8:	ldrb	r3, [r5, #132]	; 0x84
   166dc:	cmp	r3, #0
   166e0:	beq	16704 <__assert_fail@plt+0x4990>
   166e4:	ldr	r3, [pc, #1196]	; 16b98 <__assert_fail@plt+0x4e24>
   166e8:	ldrb	r3, [r3, #3180]	; 0xc6c
   166ec:	cmp	r3, #0
   166f0:	movne	r0, #0
   166f4:	bne	16708 <__assert_fail@plt+0x4994>
   166f8:	mov	r0, r4
   166fc:	bl	1d110 <__assert_fail@plt+0xb39c>
   16700:	b	16708 <__assert_fail@plt+0x4994>
   16704:	ldr	r0, [pc, #1176]	; 16ba4 <__assert_fail@plt+0x4e30>
   16708:	str	r6, [sp]
   1670c:	mov	r2, r4
   16710:	mov	r3, #0
   16714:	bl	14668 <__assert_fail@plt+0x28f4>
   16718:	b	16528 <__assert_fail@plt+0x47b4>
   1671c:	ldrb	r2, [r5, #132]	; 0x84
   16720:	ldr	r3, [pc, #1136]	; 16b98 <__assert_fail@plt+0x4e24>
   16724:	ldr	r1, [r3, #3152]	; 0xc50
   16728:	ldr	r0, [r5, #40]	; 0x28
   1672c:	bl	146ec <__assert_fail@plt+0x2978>
   16730:	b	16538 <__assert_fail@plt+0x47c4>
   16734:	ldr	r3, [pc, #1116]	; 16b98 <__assert_fail@plt+0x4e24>
   16738:	ldr	r3, [r3, #3156]	; 0xc54
   1673c:	str	r3, [sp]
   16740:	mov	r2, #0
   16744:	mov	r3, #0
   16748:	ldr	r0, [r5, #128]	; 0x80
   1674c:	bl	14668 <__assert_fail@plt+0x28f4>
   16750:	add	r3, sp, #1136	; 0x470
   16754:	sub	r4, r3, #8
   16758:	b	16550 <__assert_fail@plt+0x47dc>
   1675c:	ldr	sl, [pc, #1076]	; 16b98 <__assert_fail@plt+0x4e24>
   16760:	ldr	r6, [sl, #3160]	; 0xc58
   16764:	add	r3, r6, #2
   16768:	ldr	r2, [sl, #3164]	; 0xc5c
   1676c:	add	r2, r3, r2
   16770:	ldr	r3, [sl, #3168]	; 0xc60
   16774:	sub	r3, r3, r2
   16778:	cmp	r3, #0
   1677c:	addge	r6, r6, r3
   16780:	ldr	r0, [r5, #48]	; 0x30
   16784:	ldr	r3, [r5, #52]	; 0x34
   16788:	lsl	r0, r0, #12
   1678c:	bic	r3, r3, #4080	; 0xff0
   16790:	bic	r3, r3, #15
   16794:	mov	r8, #0
   16798:	add	r2, sp, #28
   1679c:	orr	r0, r3, r0, lsr #20
   167a0:	mov	r1, r8
   167a4:	bl	1d398 <__assert_fail@plt+0xb624>
   167a8:	mov	r9, r0
   167ac:	ldr	sl, [sl, #3164]	; 0xc5c
   167b0:	ldr	r3, [r5, #48]	; 0x30
   167b4:	ldr	r2, [r5, #52]	; 0x34
   167b8:	uxtb	r0, r3
   167bc:	lsr	r3, r3, #12
   167c0:	orr	r3, r3, r2, lsl #20
   167c4:	bic	r3, r3, #255	; 0xff
   167c8:	add	r2, sp, #72	; 0x48
   167cc:	orr	r0, r3, r0
   167d0:	mov	r1, r8
   167d4:	bl	1d398 <__assert_fail@plt+0xb624>
   167d8:	str	r0, [sp, #12]
   167dc:	str	sl, [sp, #8]
   167e0:	str	r9, [sp, #4]
   167e4:	str	r6, [sp]
   167e8:	ldr	r3, [pc, #968]	; 16bb8 <__assert_fail@plt+0x4e44>
   167ec:	mvn	r2, #0
   167f0:	mov	r1, #1
   167f4:	mov	r0, r4
   167f8:	bl	11bc4 <__sprintf_chk@plt>
   167fc:	add	r4, r4, r0
   16800:	b	16854 <__assert_fail@plt+0x4ae0>
   16804:	ldr	r8, [pc, #920]	; 16ba4 <__assert_fail@plt+0x4e30>
   16808:	ldr	r3, [pc, #904]	; 16b98 <__assert_fail@plt+0x4e24>
   1680c:	ldr	r6, [r3, #3168]	; 0xc60
   16810:	mov	r1, #0
   16814:	mov	r0, r8
   16818:	bl	1da48 <__assert_fail@plt+0xbcd4>
   1681c:	sub	r0, r6, r0
   16820:	cmp	r0, #0
   16824:	ble	1683c <__assert_fail@plt+0x4ac8>
   16828:	add	r0, r4, r0
   1682c:	mov	r3, #32
   16830:	strb	r3, [r4], #1
   16834:	cmp	r0, r4
   16838:	bne	16830 <__assert_fail@plt+0x4abc>
   1683c:	ldrb	r3, [r8], #1
   16840:	strb	r3, [r4], #1
   16844:	cmp	r3, #0
   16848:	bne	1683c <__assert_fail@plt+0x4ac8>
   1684c:	mov	r3, #32
   16850:	strb	r3, [r4, #-1]
   16854:	mov	r3, #1
   16858:	strb	r3, [r4]
   1685c:	ldrb	r3, [r5, #132]	; 0x84
   16860:	tst	r7, r3
   16864:	bne	168b4 <__assert_fail@plt+0x4b40>
   16868:	ldr	r3, [pc, #828]	; 16bac <__assert_fail@plt+0x4e38>
   1686c:	ldr	r3, [r3, #224]	; 0xe0
   16870:	cmp	r3, #0
   16874:	blt	16a80 <__assert_fail@plt+0x4d0c>
   16878:	ldr	r3, [pc, #812]	; 16bac <__assert_fail@plt+0x4e38>
   1687c:	ldr	r6, [r3, #224]	; 0xe0
   16880:	ldrb	r3, [r5, #132]	; 0x84
   16884:	tst	r7, r3
   16888:	ldreq	r0, [pc, #788]	; 16ba4 <__assert_fail@plt+0x4e30>
   1688c:	bne	16b24 <__assert_fail@plt+0x4db0>
   16890:	str	r0, [sp, #4]
   16894:	str	r6, [sp]
   16898:	ldr	r3, [pc, #784]	; 16bb0 <__assert_fail@plt+0x4e3c>
   1689c:	mvn	r2, #0
   168a0:	mov	r1, #1
   168a4:	mov	r0, r4
   168a8:	bl	11bc4 <__sprintf_chk@plt>
   168ac:	add	r3, r4, r0
   168b0:	b	169f8 <__assert_fail@plt+0x4c84>
   168b4:	add	r3, sp, #1088	; 0x440
   168b8:	sub	r2, r3, #12
   168bc:	add	r1, sp, #1120	; 0x460
   168c0:	ldr	r3, [pc, #720]	; 16b98 <__assert_fail@plt+0x4e24>
   168c4:	ldr	r0, [r3, #4088]	; 0xff8
   168c8:	bl	21b70 <_obstack_memory_used@@Base+0x219c>
   168cc:	cmp	r0, #0
   168d0:	beq	169d8 <__assert_fail@plt+0x4c64>
   168d4:	ldr	r3, [pc, #700]	; 16b98 <__assert_fail@plt+0x4e24>
   168d8:	ldr	r2, [r3, #4092]	; 0xffc
   168dc:	add	r3, r3, #4096	; 0x1000
   168e0:	ldr	r3, [r3]
   168e4:	ldr	r1, [sp, #1120]	; 0x460
   168e8:	cmp	r1, r2
   168ec:	movlt	r2, #1
   168f0:	movge	r2, #0
   168f4:	movgt	r1, #1
   168f8:	movle	r1, #0
   168fc:	sub	r2, r2, r1
   16900:	ldr	r1, [sp, #1124]	; 0x464
   16904:	cmp	r1, r3
   16908:	movlt	r3, #1
   1690c:	movge	r3, #0
   16910:	movgt	r1, #1
   16914:	movle	r1, #0
   16918:	sub	r3, r3, r1
   1691c:	adds	r3, r3, r2, lsl #1
   16920:	bmi	16a4c <__assert_fail@plt+0x4cd8>
   16924:	ldr	r3, [pc, #620]	; 16b98 <__assert_fail@plt+0x4e24>
   16928:	ldr	ip, [r3, #4092]	; 0xffc
   1692c:	ldr	r2, [pc, #648]	; 16bbc <__assert_fail@plt+0x4e48>
   16930:	add	r2, ip, r2
   16934:	add	r3, r3, #4096	; 0x1000
   16938:	ldr	r3, [r3]
   1693c:	ldr	lr, [sp, #1120]	; 0x460
   16940:	ldr	r1, [sp, #1124]	; 0x464
   16944:	cmp	r3, r1
   16948:	movgt	r0, #1
   1694c:	movle	r0, #0
   16950:	movlt	r3, #1
   16954:	movge	r3, #0
   16958:	cmp	lr, r2
   1695c:	movlt	r2, #1
   16960:	movge	r2, #0
   16964:	movgt	r6, #1
   16968:	movle	r6, #0
   1696c:	sub	r2, r2, r6
   16970:	sub	r6, r0, r3
   16974:	adds	r2, r6, r2, lsl #1
   16978:	movpl	r3, #0
   1697c:	bmi	16a58 <__assert_fail@plt+0x4ce4>
   16980:	ldr	r2, [pc, #528]	; 16b98 <__assert_fail@plt+0x4e24>
   16984:	ldr	r0, [r2, #4088]	; 0xff8
   16988:	ldrb	r2, [r2, #3100]	; 0xc1c
   1698c:	cmp	r2, #0
   16990:	lslne	r2, r3, #1
   16994:	addne	r2, r2, r3
   16998:	ldrne	r3, [sp, #1092]	; 0x444
   1699c:	addne	r3, r3, r2, lsl #2
   169a0:	ldrne	r2, [pc, #536]	; 16bc0 <__assert_fail@plt+0x4e4c>
   169a4:	addne	r2, r2, r3, lsl #7
   169a8:	ldreq	r2, [pc, #508]	; 16bac <__assert_fail@plt+0x4e38>
   169ac:	addeq	r3, r2, r3, lsl #2
   169b0:	ldreq	r2, [r3, #196]	; 0xc4
   169b4:	str	r1, [sp, #4]
   169b8:	str	r0, [sp]
   169bc:	add	r3, sp, #1088	; 0x440
   169c0:	sub	r3, r3, #12
   169c4:	ldr	r1, [pc, #504]	; 16bc4 <__assert_fail@plt+0x4e50>
   169c8:	mov	r0, r4
   169cc:	bl	1f638 <__assert_fail@plt+0xd8c4>
   169d0:	cmp	r0, #0
   169d4:	bne	169e8 <__assert_fail@plt+0x4c74>
   169d8:	ldrb	r3, [r4]
   169dc:	cmp	r3, #0
   169e0:	bne	16868 <__assert_fail@plt+0x4af4>
   169e4:	mov	r0, #0
   169e8:	add	r3, r4, r0
   169ec:	add	r3, r3, #1
   169f0:	mov	r2, #32
   169f4:	strb	r2, [r4, r0]
   169f8:	add	r2, sp, #1136	; 0x470
   169fc:	sub	r0, r2, #8
   16a00:	sub	r4, r3, r0
   16a04:	mov	r1, r4
   16a08:	bl	1420c <__assert_fail@plt+0x2498>
   16a0c:	mov	r3, r4
   16a10:	ldr	r2, [pc, #432]	; 16bc8 <__assert_fail@plt+0x4e54>
   16a14:	mov	r1, #0
   16a18:	mov	r0, r5
   16a1c:	bl	149f4 <__assert_fail@plt+0x2c80>
   16a20:	mov	r6, r0
   16a24:	ldr	r2, [r5, #120]	; 0x78
   16a28:	cmp	r2, #6
   16a2c:	beq	16b38 <__assert_fail@plt+0x4dc4>
   16a30:	ldr	r3, [pc, #352]	; 16b98 <__assert_fail@plt+0x4e24>
   16a34:	ldr	r3, [r3, #20]
   16a38:	cmp	r3, #0
   16a3c:	bne	16b88 <__assert_fail@plt+0x4e14>
   16a40:	add	sp, sp, #4736	; 0x1280
   16a44:	add	sp, sp, #48	; 0x30
   16a48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a4c:	ldr	r0, [pc, #376]	; 16bcc <__assert_fail@plt+0x4e58>
   16a50:	bl	1b3e0 <__assert_fail@plt+0x966c>
   16a54:	b	16924 <__assert_fail@plt+0x4bb0>
   16a58:	cmp	lr, ip
   16a5c:	movgt	r2, #1
   16a60:	movle	r2, #0
   16a64:	movlt	ip, #1
   16a68:	movge	ip, #0
   16a6c:	sub	r2, r2, ip
   16a70:	sub	r3, r3, r0
   16a74:	add	r3, r3, r2, lsl #1
   16a78:	lsr	r3, r3, #31
   16a7c:	b	16980 <__assert_fail@plt+0x4c0c>
   16a80:	mov	r3, #0
   16a84:	str	r3, [sp, #24]
   16a88:	add	r3, sp, #48	; 0x30
   16a8c:	add	r2, sp, #28
   16a90:	sub	r1, r3, #24
   16a94:	ldr	r3, [pc, #252]	; 16b98 <__assert_fail@plt+0x4e24>
   16a98:	ldr	r0, [r3, #4088]	; 0xff8
   16a9c:	bl	21b70 <_obstack_memory_used@@Base+0x219c>
   16aa0:	cmp	r0, #0
   16aa4:	beq	16af0 <__assert_fail@plt+0x4d7c>
   16aa8:	ldr	r3, [pc, #232]	; 16b98 <__assert_fail@plt+0x4e24>
   16aac:	ldr	r1, [r3, #4088]	; 0xff8
   16ab0:	ldrb	r3, [r3, #3100]	; 0xc1c
   16ab4:	cmp	r3, #0
   16ab8:	ldrne	r3, [sp, #44]	; 0x2c
   16abc:	ldrne	r2, [pc, #252]	; 16bc0 <__assert_fail@plt+0x4e4c>
   16ac0:	addne	r2, r2, r3, lsl #7
   16ac4:	ldreq	r3, [pc, #224]	; 16bac <__assert_fail@plt+0x4e38>
   16ac8:	ldreq	r2, [r3, #196]	; 0xc4
   16acc:	mov	r3, #0
   16ad0:	str	r3, [sp, #4]
   16ad4:	str	r1, [sp]
   16ad8:	add	r3, sp, #28
   16adc:	ldr	r1, [pc, #224]	; 16bc4 <__assert_fail@plt+0x4e50>
   16ae0:	add	r0, sp, #72	; 0x48
   16ae4:	bl	1f638 <__assert_fail@plt+0xd8c4>
   16ae8:	subs	r1, r0, #0
   16aec:	bne	16b0c <__assert_fail@plt+0x4d98>
   16af0:	ldr	r3, [pc, #180]	; 16bac <__assert_fail@plt+0x4e38>
   16af4:	ldr	r3, [r3, #224]	; 0xe0
   16af8:	cmp	r3, #0
   16afc:	movlt	r2, #0
   16b00:	ldrlt	r3, [pc, #164]	; 16bac <__assert_fail@plt+0x4e38>
   16b04:	strlt	r2, [r3, #224]	; 0xe0
   16b08:	b	16878 <__assert_fail@plt+0x4b04>
   16b0c:	mov	r2, #0
   16b10:	add	r0, sp, #72	; 0x48
   16b14:	bl	1d858 <__assert_fail@plt+0xbae4>
   16b18:	ldr	r3, [pc, #140]	; 16bac <__assert_fail@plt+0x4e38>
   16b1c:	str	r0, [r3, #224]	; 0xe0
   16b20:	b	16af0 <__assert_fail@plt+0x4d7c>
   16b24:	add	r2, sp, #72	; 0x48
   16b28:	ldr	r0, [sp, #1120]	; 0x460
   16b2c:	asr	r1, r0, #31
   16b30:	bl	1d2c4 <__assert_fail@plt+0xb550>
   16b34:	b	16890 <__assert_fail@plt+0x4b1c>
   16b38:	ldr	r3, [r5, #4]
   16b3c:	cmp	r3, #0
   16b40:	beq	16a40 <__assert_fail@plt+0x4ccc>
   16b44:	ldr	r0, [pc, #132]	; 16bd0 <__assert_fail@plt+0x4e5c>
   16b48:	bl	14244 <__assert_fail@plt+0x24d0>
   16b4c:	add	r3, r6, #4
   16b50:	add	r3, r3, r4
   16b54:	mov	r2, #0
   16b58:	mov	r1, #1
   16b5c:	mov	r0, r5
   16b60:	bl	149f4 <__assert_fail@plt+0x2c80>
   16b64:	ldr	r3, [pc, #44]	; 16b98 <__assert_fail@plt+0x4e24>
   16b68:	ldr	r3, [r3, #20]
   16b6c:	cmp	r3, #0
   16b70:	beq	16a40 <__assert_fail@plt+0x4ccc>
   16b74:	mov	r2, #0
   16b78:	ldr	r1, [r5, #124]	; 0x7c
   16b7c:	mov	r0, #1
   16b80:	bl	14100 <__assert_fail@plt+0x238c>
   16b84:	b	16a40 <__assert_fail@plt+0x4ccc>
   16b88:	ldr	r1, [r5, #32]
   16b8c:	ldrb	r0, [r5, #132]	; 0x84
   16b90:	bl	14100 <__assert_fail@plt+0x238c>
   16b94:	b	16a40 <__assert_fail@plt+0x4ccc>
   16b98:	andeq	r9, r3, r0, lsr r3
   16b9c:			; <UNDEFINED> instruction: 0x00023fb8
   16ba0:	svccc	0x003f3f3f
   16ba4:	andeq	r5, r2, r4, lsr r7
   16ba8:	andeq	r5, r2, r4, lsl #16
   16bac:	ldrdeq	r9, [r3], -r0
   16bb0:	andeq	r5, r2, r0, ror r7
   16bb4:	andeq	r0, r0, fp, lsr lr
   16bb8:	andeq	r5, r2, ip, lsl #16
   16bbc:			; <UNDEFINED> instruction: 0xff0f3d54
   16bc0:	andeq	r9, r3, ip, asr #6
   16bc4:	andeq	r0, r0, r9, ror #7
   16bc8:	andeq	sl, r3, r4, lsr r3
   16bcc:	andeq	sl, r3, ip, lsr #6
   16bd0:	andeq	r5, r2, r8, lsl r8
   16bd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bd8:	sub	sp, sp, #20
   16bdc:	ldr	r3, [pc, #900]	; 16f68 <__assert_fail@plt+0x51f4>
   16be0:	ldr	r3, [r3, #3116]	; 0xc2c
   16be4:	cmp	r3, #4
   16be8:	ldrls	pc, [pc, r3, lsl #2]
   16bec:	b	16f60 <__assert_fail@plt+0x51ec>
   16bf0:	andeq	r6, r1, ip, lsr #24
   16bf4:	andeq	r6, r1, r4, lsl #24
   16bf8:	andeq	r6, r1, r0, asr #25
   16bfc:	andeq	r6, r1, r8, lsl #28
   16c00:	andeq	r6, r1, r8, asr pc
   16c04:	ldr	r3, [pc, #860]	; 16f68 <__assert_fail@plt+0x51f4>
   16c08:	ldr	r3, [r3, #8]
   16c0c:	cmp	r3, #0
   16c10:	beq	16f60 <__assert_fail@plt+0x51ec>
   16c14:	mov	r4, #0
   16c18:	ldr	r5, [pc, #840]	; 16f68 <__assert_fail@plt+0x51f4>
   16c1c:	mov	r8, r4
   16c20:	ldr	r7, [pc, #836]	; 16f6c <__assert_fail@plt+0x51f8>
   16c24:	ldr	r6, [pc, #836]	; 16f70 <__assert_fail@plt+0x51fc>
   16c28:	b	16c84 <__assert_fail@plt+0x4f10>
   16c2c:	ldr	r3, [pc, #820]	; 16f68 <__assert_fail@plt+0x51f4>
   16c30:	ldr	r3, [r3, #8]
   16c34:	cmp	r3, #0
   16c38:	beq	16f60 <__assert_fail@plt+0x51ec>
   16c3c:	mov	r4, #0
   16c40:	ldr	r5, [pc, #800]	; 16f68 <__assert_fail@plt+0x51f4>
   16c44:	ldr	r6, [pc, #800]	; 16f6c <__assert_fail@plt+0x51f8>
   16c48:	bl	14474 <__assert_fail@plt+0x2700>
   16c4c:	ldr	r3, [r5, #12]
   16c50:	ldr	r0, [r3, r4, lsl #2]
   16c54:	bl	162ec <__assert_fail@plt+0x4578>
   16c58:	ldrb	r0, [r6, #210]	; 0xd2
   16c5c:	bl	140a8 <__assert_fail@plt+0x2334>
   16c60:	add	r4, r4, #1
   16c64:	ldr	r3, [r5, #8]
   16c68:	cmp	r3, r4
   16c6c:	bhi	16c48 <__assert_fail@plt+0x4ed4>
   16c70:	b	16f60 <__assert_fail@plt+0x51ec>
   16c74:	add	r4, r4, #1
   16c78:	ldr	r3, [r5, #8]
   16c7c:	cmp	r3, r4
   16c80:	bls	16f60 <__assert_fail@plt+0x51ec>
   16c84:	ldr	r3, [r5, #12]
   16c88:	mov	r1, r8
   16c8c:	ldr	r0, [r3, r4, lsl #2]
   16c90:	bl	14e10 <__assert_fail@plt+0x309c>
   16c94:	ldrb	r1, [r7, #210]	; 0xd2
   16c98:	ldr	r0, [r6]
   16c9c:	ldr	r3, [r0, #20]
   16ca0:	ldr	r2, [r0, #24]
   16ca4:	cmp	r3, r2
   16ca8:	addcc	r2, r3, #1
   16cac:	strcc	r2, [r0, #20]
   16cb0:	strbcc	r1, [r3]
   16cb4:	bcc	16c74 <__assert_fail@plt+0x4f00>
   16cb8:	bl	11c48 <__overflow@plt>
   16cbc:	b	16c74 <__assert_fail@plt+0x4f00>
   16cc0:	ldr	r3, [pc, #672]	; 16f68 <__assert_fail@plt+0x51f4>
   16cc4:	ldr	r3, [r3, #3188]	; 0xc74
   16cc8:	cmp	r3, #0
   16ccc:	bne	16cdc <__assert_fail@plt+0x4f68>
   16cd0:	mov	r0, #32
   16cd4:	bl	14f9c <__assert_fail@plt+0x3228>
   16cd8:	b	16f60 <__assert_fail@plt+0x51ec>
   16cdc:	mov	r0, #1
   16ce0:	bl	13a78 <__assert_fail@plt+0x1d04>
   16ce4:	mov	r4, r0
   16ce8:	ldr	r2, [pc, #632]	; 16f68 <__assert_fail@plt+0x51f4>
   16cec:	add	r3, r0, r0, lsl #1
   16cf0:	lsl	r3, r3, #2
   16cf4:	sub	r3, r3, #12
   16cf8:	ldr	r1, [r2, #3608]	; 0xe18
   16cfc:	add	r5, r1, r3
   16d00:	ldr	r6, [r2, #8]
   16d04:	mov	r1, r0
   16d08:	mov	r0, r6
   16d0c:	bl	23688 <_obstack_memory_used@@Base+0x3cb4>
   16d10:	adds	r7, r1, #0
   16d14:	movne	r7, #1
   16d18:	mov	r1, r4
   16d1c:	mov	r0, r6
   16d20:	bl	2349c <_obstack_memory_used@@Base+0x3ac8>
   16d24:	adds	r3, r7, r0
   16d28:	str	r3, [sp, #4]
   16d2c:	beq	16f60 <__assert_fail@plt+0x51ec>
   16d30:	lsl	r3, r3, #2
   16d34:	str	r3, [sp, #8]
   16d38:	mov	r3, #0
   16d3c:	str	r3, [sp, #12]
   16d40:	ldr	sl, [pc, #544]	; 16f68 <__assert_fail@plt+0x51f4>
   16d44:	b	16d8c <__assert_fail@plt+0x5018>
   16d48:	ldr	r3, [pc, #540]	; 16f6c <__assert_fail@plt+0x51f8>
   16d4c:	ldrb	r1, [r3, #210]	; 0xd2
   16d50:	ldr	r3, [pc, #536]	; 16f70 <__assert_fail@plt+0x51fc>
   16d54:	ldr	r0, [r3]
   16d58:	ldr	r3, [r0, #20]
   16d5c:	ldr	r2, [r0, #24]
   16d60:	cmp	r3, r2
   16d64:	addcc	r2, r3, #1
   16d68:	strcc	r2, [r0, #20]
   16d6c:	strbcc	r1, [r3]
   16d70:	bcs	16e00 <__assert_fail@plt+0x508c>
   16d74:	ldr	r3, [sp, #12]
   16d78:	add	r3, r3, #1
   16d7c:	str	r3, [sp, #12]
   16d80:	ldr	r2, [sp, #4]
   16d84:	cmp	r2, r3
   16d88:	beq	16f60 <__assert_fail@plt+0x51ec>
   16d8c:	ldr	r3, [sp, #12]
   16d90:	lsl	r8, r3, #2
   16d94:	mov	r7, r3
   16d98:	mov	r6, #0
   16d9c:	mov	r4, r6
   16da0:	ldr	r3, [sl, #12]
   16da4:	ldr	r9, [r3, r8]
   16da8:	mov	r0, r9
   16dac:	bl	138fc <__assert_fail@plt+0x1b88>
   16db0:	str	r0, [sp]
   16db4:	ldr	r3, [r5, #8]
   16db8:	ldr	fp, [r3, r6]
   16dbc:	mov	r1, r4
   16dc0:	mov	r0, r9
   16dc4:	bl	14e10 <__assert_fail@plt+0x309c>
   16dc8:	ldr	r3, [sp, #4]
   16dcc:	add	r7, r7, r3
   16dd0:	ldr	r3, [sp, #8]
   16dd4:	add	r8, r8, r3
   16dd8:	add	r6, r6, #4
   16ddc:	ldr	r3, [sl, #8]
   16de0:	cmp	r7, r3
   16de4:	bcs	16d48 <__assert_fail@plt+0x4fd4>
   16de8:	ldr	r3, [sp]
   16dec:	add	r0, r3, r4
   16df0:	add	r4, r4, fp
   16df4:	mov	r1, r4
   16df8:	bl	14128 <__assert_fail@plt+0x23b4>
   16dfc:	b	16da0 <__assert_fail@plt+0x502c>
   16e00:	bl	11c48 <__overflow@plt>
   16e04:	b	16d74 <__assert_fail@plt+0x5000>
   16e08:	ldr	r3, [pc, #344]	; 16f68 <__assert_fail@plt+0x51f4>
   16e0c:	ldr	r3, [r3, #3188]	; 0xc74
   16e10:	cmp	r3, #0
   16e14:	bne	16e24 <__assert_fail@plt+0x50b0>
   16e18:	mov	r0, #32
   16e1c:	bl	14f9c <__assert_fail@plt+0x3228>
   16e20:	b	16f60 <__assert_fail@plt+0x51ec>
   16e24:	mov	r0, #0
   16e28:	bl	13a78 <__assert_fail@plt+0x1d04>
   16e2c:	str	r0, [sp]
   16e30:	ldr	r4, [pc, #304]	; 16f68 <__assert_fail@plt+0x51f4>
   16e34:	add	r3, r0, r0, lsl #1
   16e38:	lsl	r3, r3, #2
   16e3c:	sub	r3, r3, #12
   16e40:	ldr	sl, [r4, #3608]	; 0xe18
   16e44:	add	sl, sl, r3
   16e48:	ldr	r3, [r4, #12]
   16e4c:	ldr	r5, [r3]
   16e50:	mov	r0, r5
   16e54:	bl	138fc <__assert_fail@plt+0x1b88>
   16e58:	mov	r8, r0
   16e5c:	ldr	r3, [sl, #8]
   16e60:	ldr	r9, [r3]
   16e64:	mov	r1, #0
   16e68:	mov	r0, r5
   16e6c:	bl	14e10 <__assert_fail@plt+0x309c>
   16e70:	ldr	r3, [r4, #8]
   16e74:	cmp	r3, #1
   16e78:	bls	16f24 <__assert_fail@plt+0x51b0>
   16e7c:	mov	r5, #0
   16e80:	mov	r4, #1
   16e84:	ldr	fp, [pc, #224]	; 16f6c <__assert_fail@plt+0x51f8>
   16e88:	ldr	r7, [pc, #216]	; 16f68 <__assert_fail@plt+0x51f4>
   16e8c:	b	16ed8 <__assert_fail@plt+0x5164>
   16e90:	add	r0, r5, r8
   16e94:	add	r5, r5, r9
   16e98:	mov	r1, r5
   16e9c:	bl	14128 <__assert_fail@plt+0x23b4>
   16ea0:	ldr	r3, [r7, #12]
   16ea4:	ldr	r8, [r3, r4, lsl #2]
   16ea8:	mov	r1, r5
   16eac:	mov	r0, r8
   16eb0:	bl	14e10 <__assert_fail@plt+0x309c>
   16eb4:	mov	r0, r8
   16eb8:	bl	138fc <__assert_fail@plt+0x1b88>
   16ebc:	mov	r8, r0
   16ec0:	ldr	r3, [sl, #8]
   16ec4:	ldr	r9, [r3, r6, lsl #2]
   16ec8:	add	r4, r4, #1
   16ecc:	ldr	r3, [r7, #8]
   16ed0:	cmp	r4, r3
   16ed4:	bcs	16f24 <__assert_fail@plt+0x51b0>
   16ed8:	ldr	r1, [sp]
   16edc:	mov	r0, r4
   16ee0:	bl	23688 <_obstack_memory_used@@Base+0x3cb4>
   16ee4:	subs	r6, r1, #0
   16ee8:	bne	16e90 <__assert_fail@plt+0x511c>
   16eec:	ldrb	r1, [fp, #210]	; 0xd2
   16ef0:	ldr	r3, [pc, #120]	; 16f70 <__assert_fail@plt+0x51fc>
   16ef4:	ldr	r0, [r3]
   16ef8:	ldr	r3, [r0, #20]
   16efc:	ldr	r2, [r0, #24]
   16f00:	cmp	r3, r2
   16f04:	addcc	r2, r3, #1
   16f08:	strcc	r2, [r0, #20]
   16f0c:	strbcc	r1, [r3]
   16f10:	movcc	r5, r6
   16f14:	bcc	16ea0 <__assert_fail@plt+0x512c>
   16f18:	bl	11c48 <__overflow@plt>
   16f1c:	mov	r5, r6
   16f20:	b	16ea0 <__assert_fail@plt+0x512c>
   16f24:	ldr	r3, [pc, #64]	; 16f6c <__assert_fail@plt+0x51f8>
   16f28:	ldrb	r1, [r3, #210]	; 0xd2
   16f2c:	ldr	r3, [pc, #60]	; 16f70 <__assert_fail@plt+0x51fc>
   16f30:	ldr	r0, [r3]
   16f34:	ldr	r3, [r0, #20]
   16f38:	ldr	r2, [r0, #24]
   16f3c:	cmp	r3, r2
   16f40:	addcc	r2, r3, #1
   16f44:	strcc	r2, [r0, #20]
   16f48:	strbcc	r1, [r3]
   16f4c:	bcc	16f60 <__assert_fail@plt+0x51ec>
   16f50:	bl	11c48 <__overflow@plt>
   16f54:	b	16f60 <__assert_fail@plt+0x51ec>
   16f58:	mov	r0, #44	; 0x2c
   16f5c:	bl	14f9c <__assert_fail@plt+0x3228>
   16f60:	add	sp, sp, #20
   16f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f68:	andeq	r9, r3, r0, lsr r3
   16f6c:	ldrdeq	r9, [r3], -r0
   16f70:	andeq	r9, r3, r4, lsr #6
   16f74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f78:	sub	sp, sp, #700	; 0x2bc
   16f7c:	mov	r6, r0
   16f80:	str	r0, [sp, #32]
   16f84:	mov	r4, r1
   16f88:	str	r2, [sp, #36]	; 0x24
   16f8c:	bl	11bb8 <__errno_location@plt>
   16f90:	mov	r5, r0
   16f94:	mov	r3, #0
   16f98:	str	r3, [r0]
   16f9c:	mov	r0, r6
   16fa0:	bl	11aa4 <opendir@plt>
   16fa4:	subs	r3, r0, #0
   16fa8:	str	r3, [sp, #20]
   16fac:	beq	17030 <__assert_fail@plt+0x52bc>
   16fb0:	ldr	r3, [pc, #1432]	; 17550 <__assert_fail@plt+0x57dc>
   16fb4:	ldr	r3, [r3, #3616]	; 0xe20
   16fb8:	cmp	r3, #0
   16fbc:	beq	17494 <__assert_fail@plt+0x5720>
   16fc0:	ldr	r0, [sp, #20]
   16fc4:	bl	11cd8 <dirfd@plt>
   16fc8:	cmp	r0, #0
   16fcc:	mov	r3, #256	; 0x100
   16fd0:	str	r3, [sp]
   16fd4:	movge	r3, #4096	; 0x1000
   16fd8:	addge	r2, sp, #40	; 0x28
   16fdc:	ldrge	r1, [pc, #1392]	; 17554 <__assert_fail@plt+0x57e0>
   16fe0:	movlt	r3, #0
   16fe4:	addlt	r2, sp, #40	; 0x28
   16fe8:	ldrlt	r1, [sp, #32]
   16fec:	mvnlt	r0, #99	; 0x63
   16ff0:	bl	12ef8 <__assert_fail@plt+0x1184>
   16ff4:	lsr	r0, r0, #31
   16ff8:	cmp	r0, #0
   16ffc:	beq	17050 <__assert_fail@plt+0x52dc>
   17000:	mov	r2, #5
   17004:	ldr	r1, [pc, #1356]	; 17558 <__assert_fail@plt+0x57e4>
   17008:	mov	r0, #0
   1700c:	bl	11984 <dcgettext@plt>
   17010:	ldr	r2, [sp, #32]
   17014:	mov	r1, r0
   17018:	ldr	r0, [sp, #36]	; 0x24
   1701c:	bl	130b0 <__assert_fail@plt+0x133c>
   17020:	ldr	r0, [sp, #20]
   17024:	bl	11d38 <closedir@plt>
   17028:	add	sp, sp, #700	; 0x2bc
   1702c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17030:	mov	r2, #5
   17034:	ldr	r1, [pc, #1312]	; 1755c <__assert_fail@plt+0x57e8>
   17038:	bl	11984 <dcgettext@plt>
   1703c:	ldr	r2, [sp, #32]
   17040:	mov	r1, r0
   17044:	ldr	r0, [sp, #36]	; 0x24
   17048:	bl	130b0 <__assert_fail@plt+0x133c>
   1704c:	b	17028 <__assert_fail@plt+0x52b4>
   17050:	ldrd	r6, [sp, #40]	; 0x28
   17054:	ldrd	r8, [sp, #136]	; 0x88
   17058:	mov	r0, #16
   1705c:	bl	2227c <_obstack_memory_used@@Base+0x28a8>
   17060:	mov	sl, r0
   17064:	strd	r8, [r0]
   17068:	strd	r6, [r0, #8]
   1706c:	mov	r1, r0
   17070:	ldr	r3, [pc, #1240]	; 17550 <__assert_fail@plt+0x57dc>
   17074:	ldr	r0, [r3, #3616]	; 0xe20
   17078:	bl	1c2bc <__assert_fail@plt+0xa548>
   1707c:	cmp	r0, #0
   17080:	beq	170e4 <__assert_fail@plt+0x5370>
   17084:	cmp	sl, r0
   17088:	beq	1745c <__assert_fail@plt+0x56e8>
   1708c:	mov	r0, sl
   17090:	bl	1b388 <__assert_fail@plt+0x9614>
   17094:	mov	r2, #5
   17098:	ldr	r1, [pc, #1216]	; 17560 <__assert_fail@plt+0x57ec>
   1709c:	mov	r0, #0
   170a0:	bl	11984 <dcgettext@plt>
   170a4:	mov	r4, r0
   170a8:	ldr	r2, [sp, #32]
   170ac:	mov	r1, #3
   170b0:	mov	r0, #0
   170b4:	bl	213f0 <_obstack_memory_used@@Base+0x1a1c>
   170b8:	mov	r3, r0
   170bc:	mov	r2, r4
   170c0:	mov	r1, #0
   170c4:	mov	r0, r1
   170c8:	bl	11a8c <error@plt>
   170cc:	ldr	r0, [sp, #20]
   170d0:	bl	11d38 <closedir@plt>
   170d4:	mov	r2, #2
   170d8:	ldr	r3, [pc, #1136]	; 17550 <__assert_fail@plt+0x57dc>
   170dc:	str	r2, [r3, #3172]	; 0xc64
   170e0:	b	17028 <__assert_fail@plt+0x52b4>
   170e4:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   170e8:	mov	r1, #16
   170ec:	ldr	r0, [pc, #1136]	; 17564 <__assert_fail@plt+0x57f0>
   170f0:	bl	1f80c <_obstack_newchunk@@Base>
   170f4:	b	1747c <__assert_fail@plt+0x5708>
   170f8:	mov	r0, #10
   170fc:	bl	140a8 <__assert_fail@plt+0x2334>
   17100:	b	174c8 <__assert_fail@plt+0x5754>
   17104:	mov	r1, #2
   17108:	ldr	r0, [sp, #32]
   1710c:	bl	1a258 <__assert_fail@plt+0x84e4>
   17110:	subs	r6, r0, #0
   17114:	bne	174ec <__assert_fail@plt+0x5778>
   17118:	mov	r2, #5
   1711c:	ldr	r1, [pc, #1092]	; 17568 <__assert_fail@plt+0x57f4>
   17120:	bl	11984 <dcgettext@plt>
   17124:	ldr	r2, [sp, #32]
   17128:	mov	r1, r0
   1712c:	ldr	r0, [sp, #36]	; 0x24
   17130:	bl	130b0 <__assert_fail@plt+0x133c>
   17134:	b	174ec <__assert_fail@plt+0x5778>
   17138:	cmp	r3, #0
   1713c:	beq	172a8 <__assert_fail@plt+0x5534>
   17140:	ldrb	r3, [r7, #20]
   17144:	cmp	r3, #46	; 0x2e
   17148:	moveq	r3, #2
   1714c:	movne	r3, #1
   17150:	ldrb	r3, [r6, r3]
   17154:	cmp	r3, #0
   17158:	bne	17318 <__assert_fail@plt+0x55a4>
   1715c:	b	172a8 <__assert_fail@plt+0x5534>
   17160:	mov	r3, r8
   17164:	b	1716c <__assert_fail@plt+0x53f8>
   17168:	mov	r3, #1
   1716c:	cmp	r3, #0
   17170:	bne	172a8 <__assert_fail@plt+0x5534>
   17174:	ldrb	r3, [r7, #18]
   17178:	sub	r3, r3, #1
   1717c:	cmp	r3, #13
   17180:	ldrls	pc, [pc, r3, lsl #2]
   17184:	b	17268 <__assert_fail@plt+0x54f4>
   17188:	andeq	r7, r1, r0, asr #4
   1718c:	andeq	r7, r1, r0, lsr r2
   17190:	andeq	r7, r1, r8, ror #4
   17194:	andeq	r7, r1, r8, lsr r2
   17198:	andeq	r7, r1, r8, ror #4
   1719c:	andeq	r7, r1, r0, asr #3
   171a0:	andeq	r7, r1, r8, ror #4
   171a4:	andeq	r7, r1, r0, asr r2
   171a8:	andeq	r7, r1, r8, ror #4
   171ac:	andeq	r7, r1, r8, asr #4
   171b0:	andeq	r7, r1, r8, ror #4
   171b4:	andeq	r7, r1, r8, asr r2
   171b8:	andeq	r7, r1, r8, ror #4
   171bc:	andeq	r7, r1, r0, ror #4
   171c0:	mov	r1, #4
   171c4:	ldr	r3, [sp, #32]
   171c8:	str	r3, [sp, #4]
   171cc:	str	r8, [sp]
   171d0:	mov	r2, #0
   171d4:	mov	r3, #0
   171d8:	mov	r0, r6
   171dc:	bl	15484 <__assert_fail@plt+0x3710>
   171e0:	ldrd	r2, [sp, #24]
   171e4:	adds	r2, r2, r0
   171e8:	adc	r3, r3, r1
   171ec:	strd	r2, [sp, #24]
   171f0:	ldr	r3, [sl, #3116]	; 0xc2c
   171f4:	cmp	r3, #1
   171f8:	bne	172a8 <__assert_fail@plt+0x5534>
   171fc:	ldr	r3, [sl, #3124]	; 0xc34
   17200:	cmp	r3, #6
   17204:	bne	172a8 <__assert_fail@plt+0x5534>
   17208:	ldrb	r3, [sl, #3113]	; 0xc29
   1720c:	cmp	r3, #0
   17210:	bne	172a8 <__assert_fail@plt+0x5534>
   17214:	ldrb	r3, [r9, #-3996]	; 0xfffff064
   17218:	cmp	r3, #0
   1721c:	bne	172a8 <__assert_fail@plt+0x5534>
   17220:	bl	13770 <__assert_fail@plt+0x19fc>
   17224:	bl	16bd4 <__assert_fail@plt+0x4e60>
   17228:	bl	12e30 <__assert_fail@plt+0x10bc>
   1722c:	b	172a8 <__assert_fail@plt+0x5534>
   17230:	mov	r1, #2
   17234:	b	171c4 <__assert_fail@plt+0x5450>
   17238:	mov	r1, #3
   1723c:	b	171c4 <__assert_fail@plt+0x5450>
   17240:	mov	r1, #1
   17244:	b	171c4 <__assert_fail@plt+0x5450>
   17248:	mov	r1, #6
   1724c:	b	171c4 <__assert_fail@plt+0x5450>
   17250:	mov	r1, #5
   17254:	b	171c4 <__assert_fail@plt+0x5450>
   17258:	mov	r1, #7
   1725c:	b	171c4 <__assert_fail@plt+0x5450>
   17260:	mov	r1, #8
   17264:	b	171c4 <__assert_fail@plt+0x5450>
   17268:	mov	r1, r8
   1726c:	b	171c4 <__assert_fail@plt+0x5450>
   17270:	ldr	r3, [r5]
   17274:	cmp	r3, #0
   17278:	beq	17354 <__assert_fail@plt+0x55e0>
   1727c:	mov	r2, #5
   17280:	ldr	r1, [pc, #740]	; 1756c <__assert_fail@plt+0x57f8>
   17284:	mov	r0, r8
   17288:	bl	11984 <dcgettext@plt>
   1728c:	ldr	r2, [sp, #32]
   17290:	mov	r1, r0
   17294:	ldr	r0, [sp, #36]	; 0x24
   17298:	bl	130b0 <__assert_fail@plt+0x133c>
   1729c:	ldr	r3, [r5]
   172a0:	cmp	r3, #75	; 0x4b
   172a4:	bne	17354 <__assert_fail@plt+0x55e0>
   172a8:	bl	144e0 <__assert_fail@plt+0x276c>
   172ac:	str	r8, [r5]
   172b0:	ldr	r0, [sp, #20]
   172b4:	bl	11cb4 <readdir64@plt>
   172b8:	subs	r7, r0, #0
   172bc:	beq	17270 <__assert_fail@plt+0x54fc>
   172c0:	add	r6, r7, #19
   172c4:	ldr	r3, [r9, #-3944]	; 0xfffff098
   172c8:	cmp	r3, #2
   172cc:	beq	17318 <__assert_fail@plt+0x55a4>
   172d0:	ldrb	r2, [r7, #19]
   172d4:	cmp	r2, #46	; 0x2e
   172d8:	beq	17138 <__assert_fail@plt+0x53c4>
   172dc:	cmp	r3, #0
   172e0:	bne	17318 <__assert_fail@plt+0x55a4>
   172e4:	ldr	r4, [r9, #-3940]	; 0xfffff09c
   172e8:	cmp	r4, #0
   172ec:	beq	17318 <__assert_fail@plt+0x55a4>
   172f0:	mov	fp, #4
   172f4:	mov	r2, fp
   172f8:	mov	r1, r6
   172fc:	ldr	r0, [r4]
   17300:	bl	11ab0 <fnmatch@plt>
   17304:	cmp	r0, #0
   17308:	beq	172a8 <__assert_fail@plt+0x5534>
   1730c:	ldr	r4, [r4, #4]
   17310:	cmp	r4, #0
   17314:	bne	172f4 <__assert_fail@plt+0x5580>
   17318:	ldr	r4, [sl, #24]
   1731c:	cmp	r4, #0
   17320:	beq	17160 <__assert_fail@plt+0x53ec>
   17324:	mov	fp, #4
   17328:	mov	r2, fp
   1732c:	mov	r1, r6
   17330:	ldr	r0, [r4]
   17334:	bl	11ab0 <fnmatch@plt>
   17338:	cmp	r0, #0
   1733c:	beq	17168 <__assert_fail@plt+0x53f4>
   17340:	ldr	r4, [r4, #4]
   17344:	cmp	r4, #0
   17348:	bne	17328 <__assert_fail@plt+0x55b4>
   1734c:	mov	r3, r8
   17350:	b	1716c <__assert_fail@plt+0x53f8>
   17354:	ldr	r0, [sp, #20]
   17358:	bl	11d38 <closedir@plt>
   1735c:	cmp	r0, #0
   17360:	bne	17428 <__assert_fail@plt+0x56b4>
   17364:	bl	13770 <__assert_fail@plt+0x19fc>
   17368:	ldr	r3, [pc, #512]	; 17570 <__assert_fail@plt+0x57fc>
   1736c:	ldrb	r3, [r3, #-3996]	; 0xfffff064
   17370:	cmp	r3, #0
   17374:	bne	1744c <__assert_fail@plt+0x56d8>
   17378:	ldr	r3, [pc, #464]	; 17550 <__assert_fail@plt+0x57dc>
   1737c:	ldr	r3, [r3, #3116]	; 0xc2c
   17380:	cmp	r3, #0
   17384:	beq	17398 <__assert_fail@plt+0x5624>
   17388:	ldr	r3, [pc, #448]	; 17550 <__assert_fail@plt+0x57dc>
   1738c:	ldrb	r3, [r3, #3113]	; 0xc29
   17390:	cmp	r3, #0
   17394:	beq	17410 <__assert_fail@plt+0x569c>
   17398:	ldr	r2, [pc, #432]	; 17550 <__assert_fail@plt+0x57dc>
   1739c:	ldr	r3, [r2, #3588]	; 0xe04
   173a0:	add	r2, r2, #3600	; 0xe10
   173a4:	ldrd	r0, [r2, #-8]
   173a8:	strd	r0, [sp, #8]
   173ac:	mov	r0, #512	; 0x200
   173b0:	mov	r1, #0
   173b4:	strd	r0, [sp]
   173b8:	add	r2, sp, #41	; 0x29
   173bc:	ldrd	r0, [sp, #24]
   173c0:	bl	1c540 <__assert_fail@plt+0xa7cc>
   173c4:	mov	r4, r0
   173c8:	bl	11b94 <strlen@plt>
   173cc:	add	r5, r4, r0
   173d0:	sub	r6, r4, #1
   173d4:	mov	r3, #32
   173d8:	strb	r3, [r4, #-1]
   173dc:	ldr	r3, [pc, #400]	; 17574 <__assert_fail@plt+0x5800>
   173e0:	ldrb	r3, [r3, #210]	; 0xd2
   173e4:	strb	r3, [r4, r0]
   173e8:	bl	14260 <__assert_fail@plt+0x24ec>
   173ec:	mov	r2, #5
   173f0:	ldr	r1, [pc, #384]	; 17578 <__assert_fail@plt+0x5804>
   173f4:	mov	r0, #0
   173f8:	bl	11984 <dcgettext@plt>
   173fc:	bl	14244 <__assert_fail@plt+0x24d0>
   17400:	add	r1, r5, #1
   17404:	sub	r1, r1, r6
   17408:	mov	r0, r6
   1740c:	bl	1420c <__assert_fail@plt+0x2498>
   17410:	ldr	r3, [pc, #312]	; 17550 <__assert_fail@plt+0x57dc>
   17414:	ldr	r3, [r3, #8]
   17418:	cmp	r3, #0
   1741c:	beq	17028 <__assert_fail@plt+0x52b4>
   17420:	bl	16bd4 <__assert_fail@plt+0x4e60>
   17424:	b	17028 <__assert_fail@plt+0x52b4>
   17428:	mov	r2, #5
   1742c:	ldr	r1, [pc, #328]	; 1757c <__assert_fail@plt+0x5808>
   17430:	mov	r0, #0
   17434:	bl	11984 <dcgettext@plt>
   17438:	ldr	r2, [sp, #32]
   1743c:	mov	r1, r0
   17440:	ldr	r0, [sp, #36]	; 0x24
   17444:	bl	130b0 <__assert_fail@plt+0x133c>
   17448:	b	17364 <__assert_fail@plt+0x55f0>
   1744c:	mov	r1, #0
   17450:	ldr	r0, [sp, #32]
   17454:	bl	13e84 <__assert_fail@plt+0x2110>
   17458:	b	17378 <__assert_fail@plt+0x5604>
   1745c:	ldrd	r6, [sp, #40]	; 0x28
   17460:	ldrd	r8, [sp, #136]	; 0x88
   17464:	ldr	r2, [pc, #260]	; 17570 <__assert_fail@plt+0x57fc>
   17468:	ldr	r3, [r2, #-4024]	; 0xfffff048
   1746c:	ldr	r2, [r2, #-4028]	; 0xfffff044
   17470:	sub	r3, r3, r2
   17474:	cmp	r3, #15
   17478:	bls	170e8 <__assert_fail@plt+0x5374>
   1747c:	ldr	r2, [pc, #236]	; 17570 <__assert_fail@plt+0x57fc>
   17480:	ldr	r3, [r2, #-4028]	; 0xfffff044
   17484:	add	r1, r3, #16
   17488:	str	r1, [r2, #-4028]	; 0xfffff044
   1748c:	strd	r6, [r3, #8]
   17490:	strd	r8, [r3]
   17494:	bl	12e30 <__assert_fail@plt+0x10bc>
   17498:	ldr	r3, [pc, #208]	; 17570 <__assert_fail@plt+0x57fc>
   1749c:	ldrb	r3, [r3, #-3996]	; 0xfffff064
   174a0:	cmp	r3, #0
   174a4:	bne	174b8 <__assert_fail@plt+0x5744>
   174a8:	ldr	r3, [pc, #192]	; 17570 <__assert_fail@plt+0x57fc>
   174ac:	ldrb	r3, [r3, #-3995]	; 0xfffff065
   174b0:	cmp	r3, #0
   174b4:	beq	17534 <__assert_fail@plt+0x57c0>
   174b8:	ldr	r3, [pc, #180]	; 17574 <__assert_fail@plt+0x5800>
   174bc:	ldrb	r3, [r3, #228]	; 0xe4
   174c0:	cmp	r3, #0
   174c4:	beq	170f8 <__assert_fail@plt+0x5384>
   174c8:	mov	r2, #0
   174cc:	ldr	r3, [pc, #160]	; 17574 <__assert_fail@plt+0x5800>
   174d0:	strb	r2, [r3, #228]	; 0xe4
   174d4:	bl	14260 <__assert_fail@plt+0x24ec>
   174d8:	ldr	r3, [pc, #112]	; 17550 <__assert_fail@plt+0x57dc>
   174dc:	ldrb	r3, [r3, #4044]	; 0xfcc
   174e0:	cmp	r3, #0
   174e4:	moveq	r6, #0
   174e8:	bne	17104 <__assert_fail@plt+0x5390>
   174ec:	ldr	r3, [pc, #124]	; 17570 <__assert_fail@plt+0x57fc>
   174f0:	ldr	r1, [r3, #-3992]	; 0xfffff068
   174f4:	str	r6, [sp, #8]
   174f8:	sub	r3, r3, #3984	; 0xf90
   174fc:	sub	r3, r3, #4
   17500:	str	r3, [sp, #4]
   17504:	mov	r3, #1
   17508:	str	r3, [sp]
   1750c:	mov	r3, #0
   17510:	mvn	r2, #0
   17514:	ldr	r0, [sp, #32]
   17518:	cmp	r4, r3
   1751c:	movne	r0, r4
   17520:	bl	14748 <__assert_fail@plt+0x29d4>
   17524:	mov	r0, r6
   17528:	bl	1b388 <__assert_fail@plt+0x9614>
   1752c:	ldr	r0, [pc, #76]	; 17580 <__assert_fail@plt+0x580c>
   17530:	bl	14244 <__assert_fail@plt+0x24d0>
   17534:	mov	r2, #0
   17538:	mov	r3, #0
   1753c:	strd	r2, [sp, #24]
   17540:	mov	r8, #0
   17544:	ldr	r9, [pc, #36]	; 17570 <__assert_fail@plt+0x57fc>
   17548:	ldr	sl, [pc]	; 17550 <__assert_fail@plt+0x57dc>
   1754c:	b	172ac <__assert_fail@plt+0x5538>
   17550:	andeq	r9, r3, r0, lsr r3
   17554:	andeq	r8, r2, ip, ror #1
   17558:	andeq	r5, r2, ip, lsr r8
   1755c:	andeq	r5, r2, r0, lsr #16
   17560:	andeq	r5, r2, r4, ror #16
   17564:	andeq	sl, r3, r0, ror #6
   17568:	andeq	r5, r2, ip, lsr #15
   1756c:	muleq	r2, r4, r8
   17570:	andeq	fp, r3, r8, lsr #6
   17574:	ldrdeq	r9, [r3], -r0
   17578:	andeq	r5, r2, r4, asr #17
   1757c:	andeq	r5, r2, ip, lsr #17
   17580:	muleq	r2, r0, r8
   17584:	push	{r4, r5, r6, lr}
   17588:	mov	lr, r0
   1758c:	ldr	r3, [r1, #96]	; 0x60
   17590:	ldr	r4, [r1, #100]	; 0x64
   17594:	ldr	r0, [r0, #96]	; 0x60
   17598:	ldr	r5, [lr, #100]	; 0x64
   1759c:	cmp	r0, r3
   175a0:	movlt	ip, #1
   175a4:	movge	ip, #0
   175a8:	movgt	r0, #1
   175ac:	movle	r0, #0
   175b0:	sub	ip, ip, r0
   175b4:	cmp	r5, r4
   175b8:	movlt	r3, #1
   175bc:	movge	r3, #0
   175c0:	movgt	r0, #1
   175c4:	movle	r0, #0
   175c8:	sub	r3, r3, r0
   175cc:	adds	r0, r3, ip, lsl #1
   175d0:	popne	{r4, r5, r6, pc}
   175d4:	ldr	r1, [r1]
   175d8:	ldr	r0, [lr]
   175dc:	blx	r2
   175e0:	pop	{r4, r5, r6, pc}
   175e4:	push	{r4, lr}
   175e8:	ldr	r2, [pc, #4]	; 175f4 <__assert_fail@plt+0x5880>
   175ec:	bl	17584 <__assert_fail@plt+0x5810>
   175f0:	pop	{r4, pc}
   175f4:	andeq	r3, r1, r0, asr #3
   175f8:	push	{r4, lr}
   175fc:	ldr	r2, [pc, #4]	; 17608 <__assert_fail@plt+0x5894>
   17600:	bl	17584 <__assert_fail@plt+0x5810>
   17604:	pop	{r4, pc}
   17608:	andeq	r1, r1, r0, lsr #17
   1760c:	push	{r4, lr}
   17610:	mov	r3, r1
   17614:	ldr	r2, [pc, #12]	; 17628 <__assert_fail@plt+0x58b4>
   17618:	mov	r1, r0
   1761c:	mov	r0, r3
   17620:	bl	17584 <__assert_fail@plt+0x5810>
   17624:	pop	{r4, pc}
   17628:	andeq	r3, r1, r0, asr #3
   1762c:	push	{r4, lr}
   17630:	mov	r3, r1
   17634:	ldr	r2, [pc, #12]	; 17648 <__assert_fail@plt+0x58d4>
   17638:	mov	r1, r0
   1763c:	mov	r0, r3
   17640:	bl	17584 <__assert_fail@plt+0x5810>
   17644:	pop	{r4, pc}
   17648:	andeq	r1, r1, r0, lsr #17
   1764c:	push	{lr}		; (str lr, [sp, #-4]!)
   17650:	sub	sp, sp, #60	; 0x3c
   17654:	subs	r6, r0, #0
   17658:	beq	17694 <__assert_fail@plt+0x5920>
   1765c:	ldr	r3, [pc, #1384]	; 17bcc <__assert_fail@plt+0x5e58>
   17660:	ldr	r4, [r3]
   17664:	mov	r2, #5
   17668:	ldr	r1, [pc, #1376]	; 17bd0 <__assert_fail@plt+0x5e5c>
   1766c:	mov	r0, #0
   17670:	bl	11984 <dcgettext@plt>
   17674:	ldr	r3, [pc, #1368]	; 17bd4 <__assert_fail@plt+0x5e60>
   17678:	ldr	r3, [r3]
   1767c:	mov	r2, r0
   17680:	mov	r1, #1
   17684:	mov	r0, r4
   17688:	bl	11c18 <__fprintf_chk@plt>
   1768c:	mov	r0, r6
   17690:	bl	11b70 <exit@plt>
   17694:	mov	r2, #5
   17698:	ldr	r1, [pc, #1336]	; 17bd8 <__assert_fail@plt+0x5e64>
   1769c:	mov	r0, #0
   176a0:	bl	11984 <dcgettext@plt>
   176a4:	ldr	r3, [pc, #1320]	; 17bd4 <__assert_fail@plt+0x5e60>
   176a8:	ldr	r2, [r3]
   176ac:	mov	r1, r0
   176b0:	mov	r0, #1
   176b4:	bl	11bf4 <__printf_chk@plt>
   176b8:	mov	r2, #5
   176bc:	ldr	r1, [pc, #1304]	; 17bdc <__assert_fail@plt+0x5e68>
   176c0:	mov	r0, #0
   176c4:	bl	11984 <dcgettext@plt>
   176c8:	ldr	r4, [pc, #1296]	; 17be0 <__assert_fail@plt+0x5e6c>
   176cc:	ldr	r1, [r4]
   176d0:	bl	11864 <fputs_unlocked@plt>
   176d4:	mov	r2, #5
   176d8:	ldr	r1, [pc, #1284]	; 17be4 <__assert_fail@plt+0x5e70>
   176dc:	mov	r0, #0
   176e0:	bl	11984 <dcgettext@plt>
   176e4:	ldr	r1, [r4]
   176e8:	bl	11864 <fputs_unlocked@plt>
   176ec:	mov	r2, #5
   176f0:	ldr	r1, [pc, #1264]	; 17be8 <__assert_fail@plt+0x5e74>
   176f4:	mov	r0, #0
   176f8:	bl	11984 <dcgettext@plt>
   176fc:	ldr	r1, [r4]
   17700:	bl	11864 <fputs_unlocked@plt>
   17704:	mov	r2, #5
   17708:	ldr	r1, [pc, #1244]	; 17bec <__assert_fail@plt+0x5e78>
   1770c:	mov	r0, #0
   17710:	bl	11984 <dcgettext@plt>
   17714:	ldr	r1, [r4]
   17718:	bl	11864 <fputs_unlocked@plt>
   1771c:	mov	r2, #5
   17720:	ldr	r1, [pc, #1224]	; 17bf0 <__assert_fail@plt+0x5e7c>
   17724:	mov	r0, #0
   17728:	bl	11984 <dcgettext@plt>
   1772c:	ldr	r1, [r4]
   17730:	bl	11864 <fputs_unlocked@plt>
   17734:	mov	r2, #5
   17738:	ldr	r1, [pc, #1204]	; 17bf4 <__assert_fail@plt+0x5e80>
   1773c:	mov	r0, #0
   17740:	bl	11984 <dcgettext@plt>
   17744:	ldr	r1, [r4]
   17748:	bl	11864 <fputs_unlocked@plt>
   1774c:	mov	r2, #5
   17750:	ldr	r1, [pc, #1184]	; 17bf8 <__assert_fail@plt+0x5e84>
   17754:	mov	r0, #0
   17758:	bl	11984 <dcgettext@plt>
   1775c:	ldr	r1, [r4]
   17760:	bl	11864 <fputs_unlocked@plt>
   17764:	mov	r2, #5
   17768:	ldr	r1, [pc, #1164]	; 17bfc <__assert_fail@plt+0x5e88>
   1776c:	mov	r0, #0
   17770:	bl	11984 <dcgettext@plt>
   17774:	ldr	r1, [r4]
   17778:	bl	11864 <fputs_unlocked@plt>
   1777c:	mov	r2, #5
   17780:	ldr	r1, [pc, #1144]	; 17c00 <__assert_fail@plt+0x5e8c>
   17784:	mov	r0, #0
   17788:	bl	11984 <dcgettext@plt>
   1778c:	ldr	r1, [r4]
   17790:	bl	11864 <fputs_unlocked@plt>
   17794:	mov	r2, #5
   17798:	ldr	r1, [pc, #1124]	; 17c04 <__assert_fail@plt+0x5e90>
   1779c:	mov	r0, #0
   177a0:	bl	11984 <dcgettext@plt>
   177a4:	ldr	r1, [r4]
   177a8:	bl	11864 <fputs_unlocked@plt>
   177ac:	mov	r2, #5
   177b0:	ldr	r1, [pc, #1104]	; 17c08 <__assert_fail@plt+0x5e94>
   177b4:	mov	r0, #0
   177b8:	bl	11984 <dcgettext@plt>
   177bc:	ldr	r1, [r4]
   177c0:	bl	11864 <fputs_unlocked@plt>
   177c4:	mov	r2, #5
   177c8:	ldr	r1, [pc, #1084]	; 17c0c <__assert_fail@plt+0x5e98>
   177cc:	mov	r0, #0
   177d0:	bl	11984 <dcgettext@plt>
   177d4:	ldr	r1, [r4]
   177d8:	bl	11864 <fputs_unlocked@plt>
   177dc:	mov	r2, #5
   177e0:	ldr	r1, [pc, #1064]	; 17c10 <__assert_fail@plt+0x5e9c>
   177e4:	mov	r0, #0
   177e8:	bl	11984 <dcgettext@plt>
   177ec:	ldr	r1, [r4]
   177f0:	bl	11864 <fputs_unlocked@plt>
   177f4:	mov	r2, #5
   177f8:	ldr	r1, [pc, #1044]	; 17c14 <__assert_fail@plt+0x5ea0>
   177fc:	mov	r0, #0
   17800:	bl	11984 <dcgettext@plt>
   17804:	ldr	r1, [r4]
   17808:	bl	11864 <fputs_unlocked@plt>
   1780c:	mov	r2, #5
   17810:	ldr	r1, [pc, #1024]	; 17c18 <__assert_fail@plt+0x5ea4>
   17814:	mov	r0, #0
   17818:	bl	11984 <dcgettext@plt>
   1781c:	ldr	r1, [r4]
   17820:	bl	11864 <fputs_unlocked@plt>
   17824:	mov	r2, #5
   17828:	ldr	r1, [pc, #1004]	; 17c1c <__assert_fail@plt+0x5ea8>
   1782c:	mov	r0, #0
   17830:	bl	11984 <dcgettext@plt>
   17834:	ldr	r1, [r4]
   17838:	bl	11864 <fputs_unlocked@plt>
   1783c:	mov	r2, #5
   17840:	ldr	r1, [pc, #984]	; 17c20 <__assert_fail@plt+0x5eac>
   17844:	mov	r0, #0
   17848:	bl	11984 <dcgettext@plt>
   1784c:	ldr	r1, [r4]
   17850:	bl	11864 <fputs_unlocked@plt>
   17854:	mov	r2, #5
   17858:	ldr	r1, [pc, #964]	; 17c24 <__assert_fail@plt+0x5eb0>
   1785c:	mov	r0, #0
   17860:	bl	11984 <dcgettext@plt>
   17864:	ldr	r1, [r4]
   17868:	bl	11864 <fputs_unlocked@plt>
   1786c:	mov	r2, #5
   17870:	ldr	r1, [pc, #944]	; 17c28 <__assert_fail@plt+0x5eb4>
   17874:	mov	r0, #0
   17878:	bl	11984 <dcgettext@plt>
   1787c:	ldr	r1, [r4]
   17880:	bl	11864 <fputs_unlocked@plt>
   17884:	mov	r2, #5
   17888:	ldr	r1, [pc, #924]	; 17c2c <__assert_fail@plt+0x5eb8>
   1788c:	mov	r0, #0
   17890:	bl	11984 <dcgettext@plt>
   17894:	ldr	r1, [r4]
   17898:	bl	11864 <fputs_unlocked@plt>
   1789c:	mov	r2, #5
   178a0:	ldr	r1, [pc, #904]	; 17c30 <__assert_fail@plt+0x5ebc>
   178a4:	mov	r0, #0
   178a8:	bl	11984 <dcgettext@plt>
   178ac:	ldr	r1, [r4]
   178b0:	bl	11864 <fputs_unlocked@plt>
   178b4:	mov	r2, #5
   178b8:	ldr	r1, [pc, #884]	; 17c34 <__assert_fail@plt+0x5ec0>
   178bc:	mov	r0, #0
   178c0:	bl	11984 <dcgettext@plt>
   178c4:	ldr	r1, [r4]
   178c8:	bl	11864 <fputs_unlocked@plt>
   178cc:	mov	r2, #5
   178d0:	ldr	r1, [pc, #864]	; 17c38 <__assert_fail@plt+0x5ec4>
   178d4:	mov	r0, #0
   178d8:	bl	11984 <dcgettext@plt>
   178dc:	ldr	r1, [r4]
   178e0:	bl	11864 <fputs_unlocked@plt>
   178e4:	mov	r2, #5
   178e8:	ldr	r1, [pc, #844]	; 17c3c <__assert_fail@plt+0x5ec8>
   178ec:	mov	r0, #0
   178f0:	bl	11984 <dcgettext@plt>
   178f4:	ldr	r1, [r4]
   178f8:	bl	11864 <fputs_unlocked@plt>
   178fc:	mov	r2, #5
   17900:	ldr	r1, [pc, #824]	; 17c40 <__assert_fail@plt+0x5ecc>
   17904:	mov	r0, #0
   17908:	bl	11984 <dcgettext@plt>
   1790c:	ldr	r1, [r4]
   17910:	bl	11864 <fputs_unlocked@plt>
   17914:	mov	r2, #5
   17918:	ldr	r1, [pc, #804]	; 17c44 <__assert_fail@plt+0x5ed0>
   1791c:	mov	r0, #0
   17920:	bl	11984 <dcgettext@plt>
   17924:	ldr	r1, [r4]
   17928:	bl	11864 <fputs_unlocked@plt>
   1792c:	mov	r2, #5
   17930:	ldr	r1, [pc, #784]	; 17c48 <__assert_fail@plt+0x5ed4>
   17934:	mov	r0, #0
   17938:	bl	11984 <dcgettext@plt>
   1793c:	ldr	r1, [r4]
   17940:	bl	11864 <fputs_unlocked@plt>
   17944:	mov	r2, #5
   17948:	ldr	r1, [pc, #764]	; 17c4c <__assert_fail@plt+0x5ed8>
   1794c:	mov	r0, #0
   17950:	bl	11984 <dcgettext@plt>
   17954:	ldr	r1, [r4]
   17958:	bl	11864 <fputs_unlocked@plt>
   1795c:	mov	r2, #5
   17960:	ldr	r1, [pc, #744]	; 17c50 <__assert_fail@plt+0x5edc>
   17964:	mov	r0, #0
   17968:	bl	11984 <dcgettext@plt>
   1796c:	ldr	r1, [r4]
   17970:	bl	11864 <fputs_unlocked@plt>
   17974:	mov	r2, #5
   17978:	ldr	r1, [pc, #724]	; 17c54 <__assert_fail@plt+0x5ee0>
   1797c:	mov	r0, #0
   17980:	bl	11984 <dcgettext@plt>
   17984:	ldr	r1, [r4]
   17988:	bl	11864 <fputs_unlocked@plt>
   1798c:	mov	r2, #5
   17990:	ldr	r1, [pc, #704]	; 17c58 <__assert_fail@plt+0x5ee4>
   17994:	mov	r0, #0
   17998:	bl	11984 <dcgettext@plt>
   1799c:	ldr	r1, [r4]
   179a0:	bl	11864 <fputs_unlocked@plt>
   179a4:	ldr	r3, [pc, #688]	; 17c5c <__assert_fail@plt+0x5ee8>
   179a8:	ldr	r3, [r3]
   179ac:	cmp	r3, #1
   179b0:	beq	17acc <__assert_fail@plt+0x5d58>
   179b4:	ldr	r2, [pc, #676]	; 17c60 <__assert_fail@plt+0x5eec>
   179b8:	ldr	r5, [pc, #676]	; 17c64 <__assert_fail@plt+0x5ef0>
   179bc:	cmp	r3, #2
   179c0:	movne	r5, r2
   179c4:	mov	ip, sp
   179c8:	ldr	lr, [pc, #664]	; 17c68 <__assert_fail@plt+0x5ef4>
   179cc:	ldm	lr!, {r0, r1, r2, r3}
   179d0:	stmia	ip!, {r0, r1, r2, r3}
   179d4:	ldm	lr!, {r0, r1, r2, r3}
   179d8:	stmia	ip!, {r0, r1, r2, r3}
   179dc:	ldm	lr!, {r0, r1, r2, r3}
   179e0:	stmia	ip!, {r0, r1, r2, r3}
   179e4:	ldm	lr, {r0, r1}
   179e8:	stm	ip, {r0, r1}
   179ec:	ldr	r1, [sp]
   179f0:	cmp	r1, #0
   179f4:	moveq	r4, sp
   179f8:	beq	17a1c <__assert_fail@plt+0x5ca8>
   179fc:	mov	r4, sp
   17a00:	mov	r0, r5
   17a04:	bl	118a0 <strcmp@plt>
   17a08:	cmp	r0, #0
   17a0c:	beq	17a1c <__assert_fail@plt+0x5ca8>
   17a10:	ldr	r1, [r4, #8]!
   17a14:	cmp	r1, #0
   17a18:	bne	17a00 <__assert_fail@plt+0x5c8c>
   17a1c:	ldr	r4, [r4, #4]
   17a20:	cmp	r4, #0
   17a24:	beq	17b3c <__assert_fail@plt+0x5dc8>
   17a28:	mov	r2, #5
   17a2c:	ldr	r1, [pc, #568]	; 17c6c <__assert_fail@plt+0x5ef8>
   17a30:	mov	r0, #0
   17a34:	bl	11984 <dcgettext@plt>
   17a38:	ldr	r3, [pc, #560]	; 17c70 <__assert_fail@plt+0x5efc>
   17a3c:	ldr	r2, [pc, #560]	; 17c74 <__assert_fail@plt+0x5f00>
   17a40:	mov	r1, r0
   17a44:	mov	r0, #1
   17a48:	bl	11bf4 <__printf_chk@plt>
   17a4c:	mov	r1, #0
   17a50:	mov	r0, #5
   17a54:	bl	11c54 <setlocale@plt>
   17a58:	cmp	r0, #0
   17a5c:	beq	17a74 <__assert_fail@plt+0x5d00>
   17a60:	mov	r2, #3
   17a64:	ldr	r1, [pc, #524]	; 17c78 <__assert_fail@plt+0x5f04>
   17a68:	bl	11d20 <strncmp@plt>
   17a6c:	cmp	r0, #0
   17a70:	bne	17ad8 <__assert_fail@plt+0x5d64>
   17a74:	mov	r2, #5
   17a78:	ldr	r1, [pc, #508]	; 17c7c <__assert_fail@plt+0x5f08>
   17a7c:	mov	r0, #0
   17a80:	bl	11984 <dcgettext@plt>
   17a84:	mov	r3, r5
   17a88:	ldr	r2, [pc, #480]	; 17c70 <__assert_fail@plt+0x5efc>
   17a8c:	mov	r1, r0
   17a90:	mov	r0, #1
   17a94:	bl	11bf4 <__printf_chk@plt>
   17a98:	mov	r2, #5
   17a9c:	ldr	r1, [pc, #476]	; 17c80 <__assert_fail@plt+0x5f0c>
   17aa0:	mov	r0, #0
   17aa4:	bl	11984 <dcgettext@plt>
   17aa8:	mov	r1, r0
   17aac:	ldr	r2, [pc, #464]	; 17c84 <__assert_fail@plt+0x5f10>
   17ab0:	ldr	r3, [pc, #464]	; 17c88 <__assert_fail@plt+0x5f14>
   17ab4:	cmp	r5, r4
   17ab8:	movne	r3, r2
   17abc:	mov	r2, r4
   17ac0:	mov	r0, #1
   17ac4:	bl	11bf4 <__printf_chk@plt>
   17ac8:	b	1768c <__assert_fail@plt+0x5918>
   17acc:	ldr	r5, [pc, #440]	; 17c8c <__assert_fail@plt+0x5f18>
   17ad0:	b	179c4 <__assert_fail@plt+0x5c50>
   17ad4:	mov	r4, r5
   17ad8:	mov	r2, #5
   17adc:	ldr	r1, [pc, #428]	; 17c90 <__assert_fail@plt+0x5f1c>
   17ae0:	mov	r0, #0
   17ae4:	bl	11984 <dcgettext@plt>
   17ae8:	ldr	r3, [pc, #240]	; 17be0 <__assert_fail@plt+0x5e6c>
   17aec:	ldr	r1, [r3]
   17af0:	bl	11864 <fputs_unlocked@plt>
   17af4:	b	17a74 <__assert_fail@plt+0x5d00>
   17af8:	mov	r2, #5
   17afc:	ldr	r1, [pc, #376]	; 17c7c <__assert_fail@plt+0x5f08>
   17b00:	mov	r0, #0
   17b04:	bl	11984 <dcgettext@plt>
   17b08:	mov	r3, r5
   17b0c:	ldr	r2, [pc, #348]	; 17c70 <__assert_fail@plt+0x5efc>
   17b10:	mov	r1, r0
   17b14:	mov	r0, #1
   17b18:	bl	11bf4 <__printf_chk@plt>
   17b1c:	mov	r2, #5
   17b20:	ldr	r1, [pc, #344]	; 17c80 <__assert_fail@plt+0x5f0c>
   17b24:	mov	r0, #0
   17b28:	bl	11984 <dcgettext@plt>
   17b2c:	mov	r1, r0
   17b30:	mov	r4, r5
   17b34:	ldr	r3, [pc, #332]	; 17c88 <__assert_fail@plt+0x5f14>
   17b38:	b	17abc <__assert_fail@plt+0x5d48>
   17b3c:	mov	r2, #5
   17b40:	ldr	r1, [pc, #292]	; 17c6c <__assert_fail@plt+0x5ef8>
   17b44:	mov	r0, #0
   17b48:	bl	11984 <dcgettext@plt>
   17b4c:	ldr	r3, [pc, #284]	; 17c70 <__assert_fail@plt+0x5efc>
   17b50:	ldr	r2, [pc, #284]	; 17c74 <__assert_fail@plt+0x5f00>
   17b54:	mov	r1, r0
   17b58:	mov	r0, #1
   17b5c:	bl	11bf4 <__printf_chk@plt>
   17b60:	mov	r1, #0
   17b64:	mov	r0, #5
   17b68:	bl	11c54 <setlocale@plt>
   17b6c:	cmp	r0, #0
   17b70:	beq	17af8 <__assert_fail@plt+0x5d84>
   17b74:	mov	r2, #3
   17b78:	ldr	r1, [pc, #248]	; 17c78 <__assert_fail@plt+0x5f04>
   17b7c:	bl	11d20 <strncmp@plt>
   17b80:	cmp	r0, #0
   17b84:	bne	17ad4 <__assert_fail@plt+0x5d60>
   17b88:	mov	r2, #5
   17b8c:	ldr	r1, [pc, #232]	; 17c7c <__assert_fail@plt+0x5f08>
   17b90:	mov	r0, #0
   17b94:	bl	11984 <dcgettext@plt>
   17b98:	mov	r3, r5
   17b9c:	ldr	r2, [pc, #204]	; 17c70 <__assert_fail@plt+0x5efc>
   17ba0:	mov	r1, r0
   17ba4:	mov	r0, #1
   17ba8:	bl	11bf4 <__printf_chk@plt>
   17bac:	mov	r2, #5
   17bb0:	ldr	r1, [pc, #200]	; 17c80 <__assert_fail@plt+0x5f0c>
   17bb4:	mov	r0, #0
   17bb8:	bl	11984 <dcgettext@plt>
   17bbc:	mov	r1, r0
   17bc0:	mov	r4, r5
   17bc4:	ldr	r3, [pc, #188]	; 17c88 <__assert_fail@plt+0x5f14>
   17bc8:	b	17abc <__assert_fail@plt+0x5d48>
   17bcc:	andeq	r9, r3, r0, lsr #6
   17bd0:	ldrdeq	r5, [r2], -r8
   17bd4:	andeq	sl, r3, r4, ror #7
   17bd8:	andeq	r5, r2, r0, lsl #18
   17bdc:	andeq	r5, r2, r4, lsr #18
   17be0:	andeq	r9, r3, r4, lsr #6
   17be4:			; <UNDEFINED> instruction: 0x000259b4
   17be8:	andeq	r5, r2, r0, lsl #20
   17bec:	andeq	r5, r2, r0, lsl fp
   17bf0:	andeq	r5, r2, ip, lsr #23
   17bf4:	andeq	r5, r2, r8, lsl sp
   17bf8:	andeq	r5, r2, ip, lsr #28
   17bfc:	andeq	r5, r2, ip, asr #31
   17c00:	andeq	r6, r2, ip
   17c04:	andeq	r6, r2, r4, lsl #2
   17c08:	andeq	r6, r2, r0, asr r1
   17c0c:	andeq	r6, r2, r8, ror #3
   17c10:	muleq	r2, r0, r3
   17c14:	andeq	r6, r2, r8, asr #7
   17c18:	andeq	r6, r2, ip, lsr #10
   17c1c:	andeq	r6, r2, r8, asr #11
   17c20:	andeq	r6, r2, r0, lsr r7
   17c24:	andeq	r6, r2, r0, ror #16
   17c28:	andeq	r6, r2, ip, lsr #21
   17c2c:	andeq	r6, r2, r4, ror fp
   17c30:	strdeq	r6, [r2], -r8
   17c34:	andeq	r6, r2, r8, asr #28
   17c38:	ldrdeq	r6, [r2], -r8
   17c3c:	andeq	r7, r2, ip, asr #32
   17c40:	andeq	r7, r2, r4, ror #3
   17c44:	andeq	r7, r2, r4, lsl r2
   17c48:	andeq	r7, r2, ip, asr #4
   17c4c:	andeq	r7, r2, r0, lsr #6
   17c50:	muleq	r2, r8, r4
   17c54:	andeq	r7, r2, r4, ror #9
   17c58:	andeq	r7, r2, r4, lsl #12
   17c5c:			; <UNDEFINED> instruction: 0x000392b8
   17c60:	andeq	r5, r2, ip, asr #17
   17c64:	andeq	r7, r2, r0, asr #28
   17c68:	andeq	r4, r2, r4, asr r1
   17c6c:	muleq	r2, ip, r6
   17c70:			; <UNDEFINED> instruction: 0x000276b4
   17c74:	ldrdeq	r7, [r2], -ip
   17c78:	andeq	r7, r2, ip, ror #13
   17c7c:	andeq	r7, r2, r8, lsr r7
   17c80:	andeq	r7, r2, r4, asr r7
   17c84:	andeq	r8, r2, ip, ror #1
   17c88:	andeq	r7, r2, r4, ror #23
   17c8c:	ldrdeq	r5, [r2], -r4
   17c90:	strdeq	r7, [r2], -r0
   17c94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c98:	sub	sp, sp, #84	; 0x54
   17c9c:	mov	fp, r0
   17ca0:	mov	r4, r1
   17ca4:	ldr	r0, [r1]
   17ca8:	bl	1fa08 <_obstack_memory_used@@Base+0x34>
   17cac:	ldr	r1, [pc, #3948]	; 18c20 <__assert_fail@plt+0x6eac>
   17cb0:	mov	r0, #6
   17cb4:	bl	11c54 <setlocale@plt>
   17cb8:	ldr	r5, [pc, #3940]	; 18c24 <__assert_fail@plt+0x6eb0>
   17cbc:	ldr	r1, [pc, #3940]	; 18c28 <__assert_fail@plt+0x6eb4>
   17cc0:	mov	r0, r5
   17cc4:	bl	11cf0 <bindtextdomain@plt>
   17cc8:	mov	r0, r5
   17ccc:	bl	119c0 <textdomain@plt>
   17cd0:	mov	r2, #2
   17cd4:	ldr	r3, [pc, #3920]	; 18c2c <__assert_fail@plt+0x6eb8>
   17cd8:	str	r2, [r3]
   17cdc:	ldr	r0, [pc, #3916]	; 18c30 <__assert_fail@plt+0x6ebc>
   17ce0:	bl	23f94 <_obstack_memory_used@@Base+0x45c0>
   17ce4:	ldr	r3, [pc, #3912]	; 18c34 <__assert_fail@plt+0x6ec0>
   17ce8:	mov	r7, #0
   17cec:	str	r7, [r3, #3172]	; 0xc64
   17cf0:	mov	r1, #1
   17cf4:	ldr	r2, [pc, #3900]	; 18c38 <__assert_fail@plt+0x6ec4>
   17cf8:	strb	r1, [r2, #-3995]	; 0xfffff065
   17cfc:	str	r7, [r3, #3104]	; 0xc20
   17d00:	mov	r2, #-2147483648	; 0x80000000
   17d04:	str	r2, [r3, #4092]	; 0xffc
   17d08:	add	r3, r3, #4096	; 0x1000
   17d0c:	mvn	r6, #0
   17d10:	str	r6, [r3]
   17d14:	str	r6, [sp, #36]	; 0x24
   17d18:	str	r6, [sp, #44]	; 0x2c
   17d1c:	mov	sl, r6
   17d20:	str	r6, [sp, #28]
   17d24:	str	r6, [sp, #32]
   17d28:	str	r7, [sp, #48]	; 0x30
   17d2c:	ldr	r5, [pc, #3848]	; 18c3c <__assert_fail@plt+0x6ec8>
   17d30:	sub	r8, r3, #4096	; 0x1000
   17d34:	add	r9, r8, #3600	; 0xe10
   17d38:	sub	r3, r9, #8
   17d3c:	str	r3, [sp, #52]	; 0x34
   17d40:	sub	r3, r5, #2656	; 0xa60
   17d44:	sub	r3, r3, #8
   17d48:	str	r3, [sp, #40]	; 0x28
   17d4c:	add	r2, sp, #80	; 0x50
   17d50:	mvn	r3, #0
   17d54:	str	r3, [r2, #-16]!
   17d58:	sub	r3, r5, #3376	; 0xd30
   17d5c:	str	r2, [sp]
   17d60:	sub	r3, r3, #8
   17d64:	ldr	r2, [pc, #3796]	; 18c40 <__assert_fail@plt+0x6ecc>
   17d68:	mov	r1, r4
   17d6c:	mov	r0, fp
   17d70:	bl	11b4c <getopt_long@plt>
   17d74:	cmn	r0, #1
   17d78:	beq	188bc <__assert_fail@plt+0x6b48>
   17d7c:	add	r0, r0, #3
   17d80:	cmp	r0, #276	; 0x114
   17d84:	ldrls	pc, [pc, r0, lsl #2]
   17d88:	b	188a0 <__assert_fail@plt+0x6b2c>
   17d8c:	andeq	r8, r1, r0, asr #16
   17d90:	andeq	r8, r1, r8, lsr r8
   17d94:	andeq	r8, r1, r0, lsr #17
   17d98:	andeq	r8, r1, r0, lsr #17
   17d9c:	andeq	r8, r1, r0, lsr #17
   17da0:	andeq	r8, r1, r0, lsr #17
   17da4:	andeq	r8, r1, r0, lsr #17
   17da8:	andeq	r8, r1, r0, lsr #17
   17dac:	andeq	r8, r1, r0, lsr #17
   17db0:	andeq	r8, r1, r0, lsr #17
   17db4:	andeq	r8, r1, r0, lsr #17
   17db8:	andeq	r8, r1, r0, lsr #17
   17dbc:	andeq	r8, r1, r0, lsr #17
   17dc0:	andeq	r8, r1, r0, lsr #17
   17dc4:	andeq	r8, r1, r0, lsr #17
   17dc8:	andeq	r8, r1, r0, lsr #17
   17dcc:	andeq	r8, r1, r0, lsr #17
   17dd0:	andeq	r8, r1, r0, lsr #17
   17dd4:	andeq	r8, r1, r0, lsr #17
   17dd8:	andeq	r8, r1, r0, lsr #17
   17ddc:	andeq	r8, r1, r0, lsr #17
   17de0:	andeq	r8, r1, r0, lsr #17
   17de4:	andeq	r8, r1, r0, lsr #17
   17de8:	andeq	r8, r1, r0, lsr #17
   17dec:	andeq	r8, r1, r0, lsr #17
   17df0:	andeq	r8, r1, r0, lsr #17
   17df4:	andeq	r8, r1, r0, lsr #17
   17df8:	andeq	r8, r1, r0, lsr #17
   17dfc:	andeq	r8, r1, r0, lsr #17
   17e00:	andeq	r8, r1, r0, lsr #17
   17e04:	andeq	r8, r1, r0, lsr #17
   17e08:	andeq	r8, r1, r0, lsr #17
   17e0c:	andeq	r8, r1, r0, lsr #17
   17e10:	andeq	r8, r1, r0, lsr #17
   17e14:	andeq	r8, r1, r0, lsr #17
   17e18:	andeq	r8, r1, r0, lsr #17
   17e1c:	andeq	r8, r1, r0, lsr #17
   17e20:	andeq	r8, r1, r0, lsr #17
   17e24:	andeq	r8, r1, r0, lsr #17
   17e28:	andeq	r8, r1, r0, lsr #17
   17e2c:	andeq	r8, r1, r0, lsr #17
   17e30:	andeq	r8, r1, r0, lsr #17
   17e34:	andeq	r8, r1, r0, lsr #17
   17e38:	andeq	r8, r1, r0, lsr #17
   17e3c:	andeq	r8, r1, r0, lsr #17
   17e40:	andeq	r8, r1, r0, lsr #17
   17e44:	andeq	r8, r1, r0, lsr #17
   17e48:	andeq	r8, r1, r0, lsr #17
   17e4c:	andeq	r8, r1, r0, lsr #17
   17e50:	andeq	r8, r1, r0, lsr #17
   17e54:	andeq	r8, r1, r0, lsr #17
   17e58:	andeq	r8, r1, r0, lsr #17
   17e5c:	ldrdeq	r8, [r1], -ip
   17e60:	andeq	r8, r1, r0, lsr #17
   17e64:	andeq	r8, r1, r0, lsr #17
   17e68:	andeq	r8, r1, r0, lsr #17
   17e6c:	andeq	r8, r1, r0, lsr #17
   17e70:	andeq	r8, r1, r0, lsr #17
   17e74:	andeq	r8, r1, r0, lsr #17
   17e78:	andeq	r8, r1, r0, lsr #17
   17e7c:	andeq	r8, r1, r0, lsr #17
   17e80:	andeq	r8, r1, r0, lsr #17
   17e84:	andeq	r8, r1, r0, lsr #17
   17e88:	andeq	r8, r1, r0, lsr #17
   17e8c:	andeq	r8, r1, r0, lsr #17
   17e90:	andeq	r8, r1, r0, lsr #17
   17e94:	andeq	r8, r1, r0, lsr #17
   17e98:	andeq	r8, r1, r0, lsr #17
   17e9c:	andeq	r8, r1, r8, asr r3
   17ea0:	andeq	r8, r1, r8, ror #6
   17ea4:	andeq	r8, r1, ip, ror r3
   17ea8:	andeq	r8, r1, r4, lsl #7
   17eac:	andeq	r8, r1, r0, lsr #17
   17eb0:	muleq	r1, r0, r3
   17eb4:	andeq	r8, r1, r0, lsl #8
   17eb8:	andeq	r8, r1, r0, lsl r4
   17ebc:	andeq	r8, r1, r8, lsr #8
   17ec0:	andeq	r8, r1, r0, lsr #17
   17ec4:	andeq	r8, r1, r0, lsr #17
   17ec8:	andeq	r8, r1, r8, lsr r4
   17ecc:	andeq	r8, r1, r0, lsr #17
   17ed0:	andeq	r8, r1, r4, asr #8
   17ed4:	andeq	r8, r1, r0, lsr #17
   17ed8:	andeq	r8, r1, r0, lsr #17
   17edc:	andeq	r8, r1, r0, asr r4
   17ee0:	andeq	r8, r1, ip, asr r4
   17ee4:	andeq	r8, r1, ip, ror #8
   17ee8:	andeq	r8, r1, r4, ror r4
   17eec:	andeq	r8, r1, ip, asr #9
   17ef0:	andeq	r8, r1, r0, lsr #17
   17ef4:	andeq	r8, r1, r0, lsr #17
   17ef8:	ldrdeq	r8, [r1], -r4
   17efc:	andeq	r8, r1, r0, lsr #17
   17f00:	andeq	r8, r1, r8, lsl #16
   17f04:	andeq	r8, r1, r0, lsr #17
   17f08:	andeq	r8, r1, r0, lsr #17
   17f0c:	andeq	r8, r1, r0, lsr #17
   17f10:	andeq	r8, r1, r0, lsr #17
   17f14:	andeq	r8, r1, r0, lsr #17
   17f18:	andeq	r8, r1, r0, lsr #17
   17f1c:	andeq	r8, r1, ip, ror #3
   17f20:	andeq	r8, r1, r8, lsr #17
   17f24:	strdeq	r8, [r1], -ip
   17f28:	andeq	r8, r1, r8, lsl #4
   17f2c:	andeq	r8, r1, r0, lsr #17
   17f30:	andeq	r8, r1, r4, lsl r2
   17f34:	andeq	r8, r1, ip, asr #4
   17f38:	andeq	r8, r1, ip, asr r2
   17f3c:	andeq	r8, r1, r0, lsl #5
   17f40:	andeq	r8, r1, r0, lsr #17
   17f44:	andeq	r8, r1, r0, ror #3
   17f48:			; <UNDEFINED> instruction: 0x000188b4
   17f4c:	andeq	r8, r1, ip, lsl #5
   17f50:	muleq	r1, r4, r2
   17f54:	andeq	r8, r1, r4, lsr #5
   17f58:			; <UNDEFINED> instruction: 0x000182b4
   17f5c:	andeq	r8, r1, r0, asr #5
   17f60:	andeq	r8, r1, ip, asr #5
   17f64:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f68:	andeq	r8, r1, r4, ror #5
   17f6c:	andeq	r8, r1, ip, ror #5
   17f70:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f74:	andeq	r8, r1, r0, lsl #6
   17f78:	andeq	r8, r1, r0, asr r3
   17f7c:	andeq	r8, r1, r0, lsr #17
   17f80:	andeq	r8, r1, r0, lsr #17
   17f84:	andeq	r8, r1, r0, lsr #17
   17f88:	andeq	r8, r1, r0, lsr #17
   17f8c:	andeq	r8, r1, r0, lsr #17
   17f90:	andeq	r8, r1, r0, lsr #17
   17f94:	andeq	r8, r1, r0, lsr #17
   17f98:	andeq	r8, r1, r0, lsr #17
   17f9c:	andeq	r8, r1, r0, lsr #17
   17fa0:	andeq	r8, r1, r0, lsr #17
   17fa4:	andeq	r8, r1, r0, lsr #17
   17fa8:	andeq	r8, r1, r0, lsr #17
   17fac:	andeq	r8, r1, r0, lsr #17
   17fb0:	andeq	r8, r1, r0, lsr #17
   17fb4:	andeq	r8, r1, r0, lsr #17
   17fb8:	andeq	r8, r1, r0, lsr #17
   17fbc:	andeq	r8, r1, r0, lsr #17
   17fc0:	andeq	r8, r1, r0, lsr #17
   17fc4:	andeq	r8, r1, r0, lsr #17
   17fc8:	andeq	r8, r1, r0, lsr #17
   17fcc:	andeq	r8, r1, r0, lsr #17
   17fd0:	andeq	r8, r1, r0, lsr #17
   17fd4:	andeq	r8, r1, r0, lsr #17
   17fd8:	andeq	r8, r1, r0, lsr #17
   17fdc:	andeq	r8, r1, r0, lsr #17
   17fe0:	andeq	r8, r1, r0, lsr #17
   17fe4:	andeq	r8, r1, r0, lsr #17
   17fe8:	andeq	r8, r1, r0, lsr #17
   17fec:	andeq	r8, r1, r0, lsr #17
   17ff0:	andeq	r8, r1, r0, lsr #17
   17ff4:	andeq	r8, r1, r0, lsr #17
   17ff8:	andeq	r8, r1, r0, lsr #17
   17ffc:	andeq	r8, r1, r0, lsr #17
   18000:	andeq	r8, r1, r0, lsr #17
   18004:	andeq	r8, r1, r0, lsr #17
   18008:	andeq	r8, r1, r0, lsr #17
   1800c:	andeq	r8, r1, r0, lsr #17
   18010:	andeq	r8, r1, r0, lsr #17
   18014:	andeq	r8, r1, r0, lsr #17
   18018:	andeq	r8, r1, r0, lsr #17
   1801c:	andeq	r8, r1, r0, lsr #17
   18020:	andeq	r8, r1, r0, lsr #17
   18024:	andeq	r8, r1, r0, lsr #17
   18028:	andeq	r8, r1, r0, lsr #17
   1802c:	andeq	r8, r1, r0, lsr #17
   18030:	andeq	r8, r1, r0, lsr #17
   18034:	andeq	r8, r1, r0, lsr #17
   18038:	andeq	r8, r1, r0, lsr #17
   1803c:	andeq	r8, r1, r0, lsr #17
   18040:	andeq	r8, r1, r0, lsr #17
   18044:	andeq	r8, r1, r0, lsr #17
   18048:	andeq	r8, r1, r0, lsr #17
   1804c:	andeq	r8, r1, r0, lsr #17
   18050:	andeq	r8, r1, r0, lsr #17
   18054:	andeq	r8, r1, r0, lsr #17
   18058:	andeq	r8, r1, r0, lsr #17
   1805c:	andeq	r8, r1, r0, lsr #17
   18060:	andeq	r8, r1, r0, lsr #17
   18064:	andeq	r8, r1, r0, lsr #17
   18068:	andeq	r8, r1, r0, lsr #17
   1806c:	andeq	r8, r1, r0, lsr #17
   18070:	andeq	r8, r1, r0, lsr #17
   18074:	andeq	r8, r1, r0, lsr #17
   18078:	andeq	r8, r1, r0, lsr #17
   1807c:	andeq	r8, r1, r0, lsr #17
   18080:	andeq	r8, r1, r0, lsr #17
   18084:	andeq	r8, r1, r0, lsr #17
   18088:	andeq	r8, r1, r0, lsr #17
   1808c:	andeq	r8, r1, r0, lsr #17
   18090:	andeq	r8, r1, r0, lsr #17
   18094:	andeq	r8, r1, r0, lsr #17
   18098:	andeq	r8, r1, r0, lsr #17
   1809c:	andeq	r8, r1, r0, lsr #17
   180a0:	andeq	r8, r1, r0, lsr #17
   180a4:	andeq	r8, r1, r0, lsr #17
   180a8:	andeq	r8, r1, r0, lsr #17
   180ac:	andeq	r8, r1, r0, lsr #17
   180b0:	andeq	r8, r1, r0, lsr #17
   180b4:	andeq	r8, r1, r0, lsr #17
   180b8:	andeq	r8, r1, r0, lsr #17
   180bc:	andeq	r8, r1, r0, lsr #17
   180c0:	andeq	r8, r1, r0, lsr #17
   180c4:	andeq	r8, r1, r0, lsr #17
   180c8:	andeq	r8, r1, r0, lsr #17
   180cc:	andeq	r8, r1, r0, lsr #17
   180d0:	andeq	r8, r1, r0, lsr #17
   180d4:	andeq	r8, r1, r0, lsr #17
   180d8:	andeq	r8, r1, r0, lsr #17
   180dc:	andeq	r8, r1, r0, lsr #17
   180e0:	andeq	r8, r1, r0, lsr #17
   180e4:	andeq	r8, r1, r0, lsr #17
   180e8:	andeq	r8, r1, r0, lsr #17
   180ec:	andeq	r8, r1, r0, lsr #17
   180f0:	andeq	r8, r1, r0, lsr #17
   180f4:	andeq	r8, r1, r0, lsr #17
   180f8:	andeq	r8, r1, r0, lsr #17
   180fc:	andeq	r8, r1, r0, lsr #17
   18100:	andeq	r8, r1, r0, lsr #17
   18104:	andeq	r8, r1, r0, lsr #17
   18108:	andeq	r8, r1, r0, lsr #17
   1810c:	andeq	r8, r1, r0, lsr #17
   18110:	andeq	r8, r1, r0, lsr #17
   18114:	andeq	r8, r1, r0, lsr #17
   18118:	andeq	r8, r1, r0, lsr #17
   1811c:	andeq	r8, r1, r0, lsr #17
   18120:	andeq	r8, r1, r0, lsr #17
   18124:	andeq	r8, r1, r0, lsr #17
   18128:	andeq	r8, r1, r0, lsr #17
   1812c:	andeq	r8, r1, r0, lsr #17
   18130:	andeq	r8, r1, r0, lsr #17
   18134:	andeq	r8, r1, r0, lsr #17
   18138:	andeq	r8, r1, r0, lsr #17
   1813c:	andeq	r8, r1, r0, lsr #17
   18140:	andeq	r8, r1, r0, lsr #17
   18144:	andeq	r8, r1, r0, lsr #17
   18148:	andeq	r8, r1, r0, lsr #17
   1814c:	andeq	r8, r1, r0, lsr #17
   18150:	andeq	r8, r1, r0, lsr #17
   18154:	andeq	r8, r1, r0, lsr #17
   18158:	andeq	r8, r1, r0, lsr #17
   1815c:	andeq	r8, r1, r0, lsr #17
   18160:	andeq	r8, r1, r0, lsr #17
   18164:	andeq	r8, r1, r0, lsr #17
   18168:	andeq	r8, r1, r0, lsr #17
   1816c:	andeq	r8, r1, r0, lsr #17
   18170:	andeq	r8, r1, r0, lsr #17
   18174:	andeq	r8, r1, r0, lsr #17
   18178:	andeq	r8, r1, r0, lsr #17
   1817c:	andeq	r8, r1, r0, lsr #17
   18180:	andeq	r8, r1, r0, lsr #17
   18184:	andeq	r8, r1, r0, lsr #17
   18188:	andeq	r8, r1, r0, lsr #17
   1818c:	andeq	r8, r1, r0, lsr #17
   18190:	andeq	r8, r1, r0, lsr #17
   18194:	andeq	r8, r1, r0, lsr #17
   18198:	andeq	r8, r1, r8, ror #9
   1819c:	muleq	r1, r4, r7
   181a0:	andeq	r8, r1, ip, lsl #12
   181a4:	andeq	r8, r1, ip, lsl r4
   181a8:	andeq	r8, r1, r0, asr #4
   181ac:			; <UNDEFINED> instruction: 0x000185bc
   181b0:	andeq	r8, r1, r0, lsl #12
   181b4:	andeq	r8, r1, r4, ror #10
   181b8:	strdeq	r8, [r1], -r4
   181bc:	andeq	r8, r1, r0, lsl #13
   181c0:	strdeq	r8, [r1], -r4
   181c4:	andeq	r8, r1, r8, lsr r7
   181c8:	andeq	r8, r1, r8, lsl #15
   181cc:	andeq	r8, r1, r4, ror #15
   181d0:	andeq	r8, r1, ip, lsl r5
   181d4:	andeq	r8, r1, r0, ror r5
   181d8:	andeq	r8, r1, ip, ror r7
   181dc:	andeq	r8, r1, r4, lsl r8
   181e0:	mov	r3, #1
   181e4:	str	r3, [sp, #48]	; 0x30
   181e8:	b	17d4c <__assert_fail@plt+0x5fd8>
   181ec:	mov	r2, #2
   181f0:	ldr	r3, [pc, #2624]	; 18c38 <__assert_fail@plt+0x6ec4>
   181f4:	str	r2, [r3, #-3944]	; 0xfffff098
   181f8:	b	17d4c <__assert_fail@plt+0x5fd8>
   181fc:	mov	r3, #1
   18200:	str	r3, [r8, #3108]	; 0xc24
   18204:	b	17d4c <__assert_fail@plt+0x5fd8>
   18208:	mov	r3, #1
   1820c:	strb	r3, [r8, #4080]	; 0xff0
   18210:	b	17d4c <__assert_fail@plt+0x5fd8>
   18214:	mov	r2, #2
   18218:	ldr	r3, [pc, #2584]	; 18c38 <__assert_fail@plt+0x6ec4>
   1821c:	str	r2, [r3, #-3944]	; 0xfffff098
   18220:	cmp	r6, #0
   18224:	mvneq	r6, #0
   18228:	mov	r3, #0
   1822c:	strb	r3, [r8, #4024]	; 0xfb8
   18230:	strb	r3, [r8, #4044]	; 0xfcc
   18234:	strb	r3, [r8, #3113]	; 0xc29
   18238:	mov	sl, #6
   1823c:	b	17d4c <__assert_fail@plt+0x5fd8>
   18240:	mov	r3, #2
   18244:	str	r3, [r8, #20]
   18248:	b	17d4c <__assert_fail@plt+0x5fd8>
   1824c:	mov	r6, #0
   18250:	ldr	r3, [pc, #2880]	; 18d98 <__assert_fail@plt+0x7024>
   18254:	strb	r6, [r3, #204]	; 0xcc
   18258:	b	17d4c <__assert_fail@plt+0x5fd8>
   1825c:	mov	r3, #176	; 0xb0
   18260:	str	r3, [r8, #3588]	; 0xe04
   18264:	str	r3, [r8, #4084]	; 0xff4
   18268:	mov	r2, #1
   1826c:	mov	r3, #0
   18270:	strd	r2, [r9, #-8]
   18274:	ldr	r1, [pc, #2844]	; 18d98 <__assert_fail@plt+0x7024>
   18278:	strd	r2, [r1, #216]	; 0xd8
   1827c:	b	17d4c <__assert_fail@plt+0x5fd8>
   18280:	mov	r3, #1
   18284:	strb	r3, [r8, #3112]	; 0xc28
   18288:	b	17d4c <__assert_fail@plt+0x5fd8>
   1828c:	mov	r6, #4
   18290:	b	17d4c <__assert_fail@plt+0x5fd8>
   18294:	mov	r3, #1
   18298:	strb	r3, [r8, #3180]	; 0xc6c
   1829c:	mov	r6, #0
   182a0:	b	17d4c <__assert_fail@plt+0x5fd8>
   182a4:	mov	r6, #0
   182a8:	ldr	r3, [pc, #2792]	; 18d98 <__assert_fail@plt+0x7024>
   182ac:	strb	r6, [r3, #205]	; 0xcd
   182b0:	b	17d4c <__assert_fail@plt+0x5fd8>
   182b4:	mov	r3, #1
   182b8:	str	r3, [r8, #20]
   182bc:	b	17d4c <__assert_fail@plt+0x5fd8>
   182c0:	mov	r3, #1
   182c4:	str	r3, [sp, #32]
   182c8:	b	17d4c <__assert_fail@plt+0x5fd8>
   182cc:	mov	r3, #1
   182d0:	strb	r3, [r8, #3584]	; 0xe00
   182d4:	b	17d4c <__assert_fail@plt+0x5fd8>
   182d8:	mov	r3, #1
   182dc:	strb	r3, [r8, #3113]	; 0xc29
   182e0:	b	17d4c <__assert_fail@plt+0x5fd8>
   182e4:	mov	sl, #5
   182e8:	b	17d4c <__assert_fail@plt+0x5fd8>
   182ec:	mov	r3, #2
   182f0:	str	r3, [r8, #3108]	; 0xc24
   182f4:	b	17d4c <__assert_fail@plt+0x5fd8>
   182f8:	mov	sl, #4
   182fc:	b	17d4c <__assert_fail@plt+0x5fd8>
   18300:	ldr	r3, [pc, #2364]	; 18c44 <__assert_fail@plt+0x6ed0>
   18304:	ldr	r0, [r3]
   18308:	bl	12400 <__assert_fail@plt+0x68c>
   1830c:	subs	r3, r0, #0
   18310:	str	r3, [sp, #36]	; 0x24
   18314:	bge	17d4c <__assert_fail@plt+0x5fd8>
   18318:	mov	r2, #5
   1831c:	ldr	r1, [pc, #2340]	; 18c48 <__assert_fail@plt+0x6ed4>
   18320:	mov	r0, #0
   18324:	bl	11984 <dcgettext@plt>
   18328:	mov	r4, r0
   1832c:	ldr	r3, [pc, #2320]	; 18c44 <__assert_fail@plt+0x6ed0>
   18330:	ldr	r0, [r3]
   18334:	bl	21558 <_obstack_memory_used@@Base+0x1b84>
   18338:	str	r0, [sp]
   1833c:	mov	r3, r4
   18340:	ldr	r2, [pc, #2308]	; 18c4c <__assert_fail@plt+0x6ed8>
   18344:	mov	r1, #0
   18348:	mov	r0, #2
   1834c:	bl	11a8c <error@plt>
   18350:	mov	r6, #3
   18354:	b	17d4c <__assert_fail@plt+0x5fd8>
   18358:	mov	r2, #1
   1835c:	ldr	r3, [pc, #2260]	; 18c38 <__assert_fail@plt+0x6ec4>
   18360:	str	r2, [r3, #-3944]	; 0xfffff098
   18364:	b	17d4c <__assert_fail@plt+0x5fd8>
   18368:	ldr	r0, [pc, #2272]	; 18c50 <__assert_fail@plt+0x6edc>
   1836c:	bl	123d4 <__assert_fail@plt+0x660>
   18370:	ldr	r0, [pc, #2268]	; 18c54 <__assert_fail@plt+0x6ee0>
   18374:	bl	123d4 <__assert_fail@plt+0x660>
   18378:	b	17d4c <__assert_fail@plt+0x5fd8>
   1837c:	mov	r6, #2
   18380:	b	17d4c <__assert_fail@plt+0x5fd8>
   18384:	mov	r3, #1
   18388:	strb	r3, [r8, #3892]	; 0xf34
   1838c:	b	17d4c <__assert_fail@plt+0x5fd8>
   18390:	ldr	r3, [pc, #2220]	; 18c44 <__assert_fail@plt+0x6ed0>
   18394:	ldr	r1, [r3]
   18398:	cmp	r1, #0
   1839c:	beq	183f4 <__assert_fail@plt+0x6680>
   183a0:	mov	r3, #1
   183a4:	str	r3, [sp, #8]
   183a8:	ldr	r3, [pc, #2216]	; 18c58 <__assert_fail@plt+0x6ee4>
   183ac:	ldr	r3, [r3]
   183b0:	str	r3, [sp, #4]
   183b4:	mov	r3, #4
   183b8:	str	r3, [sp]
   183bc:	ldr	r3, [sp, #40]	; 0x28
   183c0:	sub	r2, r5, #2624	; 0xa40
   183c4:	sub	r2, r2, #4
   183c8:	ldr	r0, [pc, #2188]	; 18c5c <__assert_fail@plt+0x6ee8>
   183cc:	bl	1a044 <__assert_fail@plt+0x82d0>
   183d0:	add	r0, r5, r0, lsl #2
   183d4:	ldr	r3, [r0, #-2664]	; 0xfffff598
   183d8:	cmp	r3, #1
   183dc:	beq	183f4 <__assert_fail@plt+0x6680>
   183e0:	cmp	r3, #2
   183e4:	bne	17d4c <__assert_fail@plt+0x5fd8>
   183e8:	bl	124cc <__assert_fail@plt+0x758>
   183ec:	cmp	r0, #0
   183f0:	beq	17d4c <__assert_fail@plt+0x5fd8>
   183f4:	mov	r3, #3
   183f8:	str	r3, [r8, #20]
   183fc:	b	17d4c <__assert_fail@plt+0x5fd8>
   18400:	mov	r2, #0
   18404:	ldr	r3, [pc, #2444]	; 18d98 <__assert_fail@plt+0x7024>
   18408:	strb	r2, [r3, #205]	; 0xcd
   1840c:	b	17d4c <__assert_fail@plt+0x5fd8>
   18410:	mov	r3, #2
   18414:	str	r3, [r8, #4048]	; 0xfd0
   18418:	b	17d4c <__assert_fail@plt+0x5fd8>
   1841c:	mov	r3, #3
   18420:	str	r3, [r8, #4048]	; 0xfd0
   18424:	b	17d4c <__assert_fail@plt+0x5fd8>
   18428:	ldr	r3, [pc, #2068]	; 18c44 <__assert_fail@plt+0x6ed0>
   1842c:	ldr	r0, [r3]
   18430:	bl	123d4 <__assert_fail@plt+0x660>
   18434:	b	17d4c <__assert_fail@plt+0x5fd8>
   18438:	mov	r3, #4
   1843c:	str	r3, [r8, #4048]	; 0xfd0
   18440:	b	17d4c <__assert_fail@plt+0x5fd8>
   18444:	mov	r3, #0
   18448:	str	r3, [sp, #28]
   1844c:	b	17d4c <__assert_fail@plt+0x5fd8>
   18450:	mov	r3, #5
   18454:	str	r3, [sp, #28]
   18458:	b	17d4c <__assert_fail@plt+0x5fd8>
   1845c:	mov	r2, #1
   18460:	ldr	r3, [pc, #2000]	; 18c38 <__assert_fail@plt+0x6ec4>
   18464:	strb	r2, [r3, #-3996]	; 0xfffff064
   18468:	b	17d4c <__assert_fail@plt+0x5fd8>
   1846c:	mov	sl, #3
   18470:	b	17d4c <__assert_fail@plt+0x5fd8>
   18474:	ldr	r3, [pc, #1992]	; 18c44 <__assert_fail@plt+0x6ed0>
   18478:	ldr	r3, [r3]
   1847c:	str	r3, [sp, #44]	; 0x2c
   18480:	mov	r2, #5
   18484:	ldr	r1, [pc, #2004]	; 18c60 <__assert_fail@plt+0x6eec>
   18488:	mov	r0, #0
   1848c:	bl	11984 <dcgettext@plt>
   18490:	mov	r3, #2
   18494:	str	r3, [sp, #16]
   18498:	str	r0, [sp, #12]
   1849c:	ldr	r3, [pc, #1916]	; 18c20 <__assert_fail@plt+0x6eac>
   184a0:	str	r3, [sp, #8]
   184a4:	mvn	r2, #-2147483648	; 0x80000000
   184a8:	mov	r3, #0
   184ac:	strd	r2, [sp]
   184b0:	mov	r2, #0
   184b4:	mov	r3, #0
   184b8:	mov	r1, #0
   184bc:	ldr	r0, [sp, #44]	; 0x2c
   184c0:	bl	22860 <_obstack_memory_used@@Base+0x2e8c>
   184c4:	str	r0, [sp, #44]	; 0x2c
   184c8:	b	17d4c <__assert_fail@plt+0x5fd8>
   184cc:	mov	sl, #6
   184d0:	b	17d4c <__assert_fail@plt+0x5fd8>
   184d4:	mov	sl, #1
   184d8:	b	17d4c <__assert_fail@plt+0x5fd8>
   184dc:	adds	r6, r6, #0
   184e0:	movne	r6, #1
   184e4:	b	17d4c <__assert_fail@plt+0x5fd8>
   184e8:	mov	r3, #1
   184ec:	strb	r3, [r8, #3120]	; 0xc30
   184f0:	b	17d4c <__assert_fail@plt+0x5fd8>
   184f4:	mov	r0, #8
   184f8:	bl	2227c <_obstack_memory_used@@Base+0x28a8>
   184fc:	ldr	r3, [pc, #1856]	; 18c44 <__assert_fail@plt+0x6ed0>
   18500:	ldr	r3, [r3]
   18504:	str	r3, [r0]
   18508:	ldr	r3, [pc, #1832]	; 18c38 <__assert_fail@plt+0x6ec4>
   1850c:	ldr	r2, [r3, #-3940]	; 0xfffff09c
   18510:	str	r2, [r0, #4]
   18514:	str	r0, [r3, #-3940]	; 0xfffff09c
   18518:	b	17d4c <__assert_fail@plt+0x5fd8>
   1851c:	mov	r3, #1
   18520:	str	r3, [sp, #8]
   18524:	ldr	r3, [pc, #1836]	; 18c58 <__assert_fail@plt+0x6ee4>
   18528:	ldr	r3, [r3]
   1852c:	str	r3, [sp, #4]
   18530:	mov	r3, #4
   18534:	str	r3, [sp]
   18538:	sub	r3, r5, #2576	; 0xa10
   1853c:	sub	r3, r3, #12
   18540:	sub	r2, r5, #2560	; 0xa00
   18544:	sub	r2, r2, #4
   18548:	ldr	r1, [pc, #1780]	; 18c44 <__assert_fail@plt+0x6ed0>
   1854c:	ldr	r1, [r1]
   18550:	ldr	r0, [pc, #1804]	; 18c64 <__assert_fail@plt+0x6ef0>
   18554:	bl	1a044 <__assert_fail@plt+0x82d0>
   18558:	add	r0, r5, r0, lsl #2
   1855c:	ldr	sl, [r0, #-2588]	; 0xfffff5e4
   18560:	b	17d4c <__assert_fail@plt+0x5fd8>
   18564:	mov	r3, #1
   18568:	strb	r3, [r8, #3585]	; 0xe01
   1856c:	b	17d4c <__assert_fail@plt+0x5fd8>
   18570:	mov	r3, #1
   18574:	str	r3, [sp, #8]
   18578:	ldr	r3, [pc, #1752]	; 18c58 <__assert_fail@plt+0x6ee4>
   1857c:	ldr	r3, [r3]
   18580:	str	r3, [sp, #4]
   18584:	mov	r3, #4
   18588:	str	r3, [sp]
   1858c:	sub	r3, r5, #2528	; 0x9e0
   18590:	sub	r3, r3, #8
   18594:	sub	r2, r5, #2496	; 0x9c0
   18598:	sub	r2, r2, #12
   1859c:	ldr	r1, [pc, #1696]	; 18c44 <__assert_fail@plt+0x6ed0>
   185a0:	ldr	r1, [r1]
   185a4:	ldr	r0, [pc, #1724]	; 18c68 <__assert_fail@plt+0x6ef4>
   185a8:	bl	1a044 <__assert_fail@plt+0x82d0>
   185ac:	add	r0, r5, r0, lsl #2
   185b0:	ldr	r3, [r0, #-2536]	; 0xfffff618
   185b4:	str	r3, [r8, #3108]	; 0xc24
   185b8:	b	17d4c <__assert_fail@plt+0x5fd8>
   185bc:	mov	r3, #1
   185c0:	str	r3, [sp, #8]
   185c4:	ldr	r3, [pc, #1676]	; 18c58 <__assert_fail@plt+0x6ee4>
   185c8:	ldr	r3, [r3]
   185cc:	str	r3, [sp, #4]
   185d0:	mov	r3, #4
   185d4:	str	r3, [sp]
   185d8:	sub	r3, r5, #2464	; 0x9a0
   185dc:	sub	r3, r3, #12
   185e0:	sub	r2, r5, #2448	; 0x990
   185e4:	ldr	r1, [pc, #1624]	; 18c44 <__assert_fail@plt+0x6ed0>
   185e8:	ldr	r1, [r1]
   185ec:	ldr	r0, [pc, #1656]	; 18c6c <__assert_fail@plt+0x6ef8>
   185f0:	bl	1a044 <__assert_fail@plt+0x82d0>
   185f4:	add	r0, r5, r0, lsl #2
   185f8:	ldr	r6, [r0, #-2476]	; 0xfffff654
   185fc:	b	17d4c <__assert_fail@plt+0x5fd8>
   18600:	mov	r6, #0
   18604:	ldr	r7, [pc, #1796]	; 18d10 <__assert_fail@plt+0x6f9c>
   18608:	b	17d4c <__assert_fail@plt+0x5fd8>
   1860c:	ldr	r3, [pc, #1584]	; 18c44 <__assert_fail@plt+0x6ed0>
   18610:	ldr	r1, [r3]
   18614:	cmp	r1, #0
   18618:	moveq	r0, #1
   1861c:	beq	1866c <__assert_fail@plt+0x68f8>
   18620:	mov	r3, #1
   18624:	str	r3, [sp, #8]
   18628:	ldr	r3, [pc, #1576]	; 18c58 <__assert_fail@plt+0x6ee4>
   1862c:	ldr	r3, [r3]
   18630:	str	r3, [sp, #4]
   18634:	mov	r3, #4
   18638:	str	r3, [sp]
   1863c:	ldr	r3, [sp, #40]	; 0x28
   18640:	sub	r2, r5, #2624	; 0xa40
   18644:	sub	r2, r2, #4
   18648:	ldr	r0, [pc, #1568]	; 18c70 <__assert_fail@plt+0x6efc>
   1864c:	bl	1a044 <__assert_fail@plt+0x82d0>
   18650:	add	r0, r5, r0, lsl #2
   18654:	ldr	r0, [r0, #-2664]	; 0xfffff598
   18658:	cmp	r0, #1
   1865c:	beq	1866c <__assert_fail@plt+0x68f8>
   18660:	cmp	r0, #2
   18664:	movne	r0, #0
   18668:	beq	18678 <__assert_fail@plt+0x6904>
   1866c:	and	r0, r0, #1
   18670:	strb	r0, [r8, #4024]	; 0xfb8
   18674:	b	17d4c <__assert_fail@plt+0x5fd8>
   18678:	bl	124cc <__assert_fail@plt+0x758>
   1867c:	b	1866c <__assert_fail@plt+0x68f8>
   18680:	ldr	r3, [pc, #1468]	; 18c44 <__assert_fail@plt+0x6ed0>
   18684:	ldr	r1, [r3]
   18688:	cmp	r1, #0
   1868c:	moveq	r0, #1
   18690:	beq	186e0 <__assert_fail@plt+0x696c>
   18694:	mov	r3, #1
   18698:	str	r3, [sp, #8]
   1869c:	ldr	r3, [pc, #1460]	; 18c58 <__assert_fail@plt+0x6ee4>
   186a0:	ldr	r3, [r3]
   186a4:	str	r3, [sp, #4]
   186a8:	mov	r3, #4
   186ac:	str	r3, [sp]
   186b0:	ldr	r3, [sp, #40]	; 0x28
   186b4:	sub	r2, r5, #2624	; 0xa40
   186b8:	sub	r2, r2, #4
   186bc:	ldr	r0, [pc, #1456]	; 18c74 <__assert_fail@plt+0x6f00>
   186c0:	bl	1a044 <__assert_fail@plt+0x82d0>
   186c4:	add	r0, r5, r0, lsl #2
   186c8:	ldr	r0, [r0, #-2664]	; 0xfffff598
   186cc:	cmp	r0, #1
   186d0:	beq	186e0 <__assert_fail@plt+0x696c>
   186d4:	cmp	r0, #2
   186d8:	movne	r0, #0
   186dc:	beq	186ec <__assert_fail@plt+0x6978>
   186e0:	and	r0, r0, #1
   186e4:	strb	r0, [r8, #4044]	; 0xfcc
   186e8:	b	17d4c <__assert_fail@plt+0x5fd8>
   186ec:	bl	124cc <__assert_fail@plt+0x758>
   186f0:	b	186e0 <__assert_fail@plt+0x696c>
   186f4:	mov	r3, #1
   186f8:	str	r3, [sp, #8]
   186fc:	ldr	r3, [pc, #1364]	; 18c58 <__assert_fail@plt+0x6ee4>
   18700:	ldr	r3, [r3]
   18704:	str	r3, [sp, #4]
   18708:	mov	r3, #4
   1870c:	str	r3, [sp]
   18710:	sub	r3, r5, #2416	; 0x970
   18714:	sub	r2, r5, #2400	; 0x960
   18718:	ldr	r1, [pc, #1316]	; 18c44 <__assert_fail@plt+0x6ed0>
   1871c:	ldr	r1, [r1]
   18720:	ldr	r0, [pc, #1360]	; 18c78 <__assert_fail@plt+0x6f04>
   18724:	bl	1a044 <__assert_fail@plt+0x82d0>
   18728:	add	r0, r5, r0, lsl #2
   1872c:	ldr	r3, [r0, #-2416]	; 0xfffff690
   18730:	str	r3, [r8, #20]
   18734:	b	17d4c <__assert_fail@plt+0x5fd8>
   18738:	mov	r3, #1
   1873c:	str	r3, [sp, #8]
   18740:	ldr	r3, [pc, #1296]	; 18c58 <__assert_fail@plt+0x6ee4>
   18744:	ldr	r3, [r3]
   18748:	str	r3, [sp, #4]
   1874c:	mov	r3, #4
   18750:	str	r3, [sp]
   18754:	ldr	r3, [pc, #1416]	; 18ce4 <__assert_fail@plt+0x6f70>
   18758:	ldr	r2, [pc, #1604]	; 18da4 <__assert_fail@plt+0x7030>
   1875c:	ldr	r1, [pc, #1248]	; 18c44 <__assert_fail@plt+0x6ed0>
   18760:	ldr	r1, [r1]
   18764:	ldr	r0, [pc, #1296]	; 18c7c <__assert_fail@plt+0x6f08>
   18768:	bl	1a044 <__assert_fail@plt+0x82d0>
   1876c:	ldr	r3, [pc, #1392]	; 18ce4 <__assert_fail@plt+0x6f70>
   18770:	ldr	r3, [r3, r0, lsl #2]
   18774:	str	r3, [sp, #28]
   18778:	b	17d4c <__assert_fail@plt+0x5fd8>
   1877c:	ldr	r3, [pc, #1216]	; 18c44 <__assert_fail@plt+0x6ed0>
   18780:	ldr	r7, [r3]
   18784:	b	17d4c <__assert_fail@plt+0x5fd8>
   18788:	mov	r3, #0
   1878c:	str	r3, [sp, #32]
   18790:	b	17d4c <__assert_fail@plt+0x5fd8>
   18794:	ldr	r2, [sp, #52]	; 0x34
   18798:	ldr	r1, [pc, #1248]	; 18c80 <__assert_fail@plt+0x6f0c>
   1879c:	ldr	r3, [pc, #1184]	; 18c44 <__assert_fail@plt+0x6ed0>
   187a0:	ldr	r0, [r3]
   187a4:	bl	1cdc8 <__assert_fail@plt+0xb054>
   187a8:	cmp	r0, #0
   187ac:	bne	187c8 <__assert_fail@plt+0x6a54>
   187b0:	ldr	r3, [r8, #3588]	; 0xe04
   187b4:	str	r3, [r8, #4084]	; 0xff4
   187b8:	ldrd	r2, [r9, #-8]
   187bc:	ldr	r1, [pc, #1492]	; 18d98 <__assert_fail@plt+0x7024>
   187c0:	strd	r2, [r1, #216]	; 0xd8
   187c4:	b	17d4c <__assert_fail@plt+0x5fd8>
   187c8:	ldr	r3, [pc, #1140]	; 18c44 <__assert_fail@plt+0x6ed0>
   187cc:	ldr	r3, [r3]
   187d0:	str	r3, [sp]
   187d4:	ldr	r3, [pc, #1192]	; 18c84 <__assert_fail@plt+0x6f10>
   187d8:	mov	r2, #0
   187dc:	ldr	r1, [sp, #64]	; 0x40
   187e0:	bl	22ac8 <_obstack_memory_used@@Base+0x30f4>
   187e4:	mov	r3, #144	; 0x90
   187e8:	str	r3, [r8, #3588]	; 0xe04
   187ec:	str	r3, [r8, #4084]	; 0xff4
   187f0:	mov	r2, #1
   187f4:	mov	r3, #0
   187f8:	strd	r2, [r9, #-8]
   187fc:	ldr	r1, [pc, #1428]	; 18d98 <__assert_fail@plt+0x7024>
   18800:	strd	r2, [r1, #216]	; 0xd8
   18804:	b	17d4c <__assert_fail@plt+0x5fd8>
   18808:	mov	r3, #1
   1880c:	strb	r3, [r8, #3600]	; 0xe10
   18810:	b	17d4c <__assert_fail@plt+0x5fd8>
   18814:	mov	r3, #0
   18818:	ldr	r2, [pc, #1400]	; 18d98 <__assert_fail@plt+0x7024>
   1881c:	strb	r3, [r2, #210]	; 0xd2
   18820:	subs	r6, r6, r3
   18824:	movne	r6, #1
   18828:	strb	r3, [r8, #4024]	; 0xfb8
   1882c:	str	r3, [sp, #28]
   18830:	str	r3, [sp, #32]
   18834:	b	17d4c <__assert_fail@plt+0x5fd8>
   18838:	mov	r0, #0
   1883c:	bl	1764c <__assert_fail@plt+0x58d8>
   18840:	ldr	r3, [pc, #1344]	; 18d88 <__assert_fail@plt+0x7014>
   18844:	ldr	r0, [r3]
   18848:	ldr	r3, [pc, #1176]	; 18ce8 <__assert_fail@plt+0x6f74>
   1884c:	ldr	r3, [r3]
   18850:	cmp	r3, #1
   18854:	beq	18898 <__assert_fail@plt+0x6b24>
   18858:	ldr	r2, [pc, #1064]	; 18c88 <__assert_fail@plt+0x6f14>
   1885c:	ldr	r1, [pc, #1064]	; 18c8c <__assert_fail@plt+0x6f18>
   18860:	cmp	r3, #2
   18864:	movne	r1, r2
   18868:	mov	r4, #0
   1886c:	str	r4, [sp, #8]
   18870:	ldr	r3, [pc, #1048]	; 18c90 <__assert_fail@plt+0x6f1c>
   18874:	str	r3, [sp, #4]
   18878:	ldr	r3, [pc, #1044]	; 18c94 <__assert_fail@plt+0x6f20>
   1887c:	str	r3, [sp]
   18880:	ldr	r3, [pc, #1040]	; 18c98 <__assert_fail@plt+0x6f24>
   18884:	ldr	r3, [r3]
   18888:	ldr	r2, [pc, #1036]	; 18c9c <__assert_fail@plt+0x6f28>
   1888c:	bl	221b0 <_obstack_memory_used@@Base+0x27dc>
   18890:	mov	r0, r4
   18894:	bl	11b70 <exit@plt>
   18898:	ldr	r1, [pc, #1024]	; 18ca0 <__assert_fail@plt+0x6f2c>
   1889c:	b	18868 <__assert_fail@plt+0x6af4>
   188a0:	mov	r0, #2
   188a4:	bl	1764c <__assert_fail@plt+0x58d8>
   188a8:	mov	r3, #7
   188ac:	str	r3, [sp, #28]
   188b0:	b	17d4c <__assert_fail@plt+0x5fd8>
   188b4:	mov	r6, #0
   188b8:	b	17d4c <__assert_fail@plt+0x5fd8>
   188bc:	ldr	r3, [pc, #992]	; 18ca4 <__assert_fail@plt+0x6f30>
   188c0:	ldrd	r2, [r3, #-8]
   188c4:	orrs	r3, r2, r3
   188c8:	beq	18dcc <__assert_fail@plt+0x7058>
   188cc:	cmp	r6, #0
   188d0:	blt	18e48 <__assert_fail@plt+0x70d4>
   188d4:	ldr	r3, [pc, #856]	; 18c34 <__assert_fail@plt+0x6ec0>
   188d8:	str	r6, [r3, #3116]	; 0xc2c
   188dc:	sub	r6, r6, #2
   188e0:	cmp	r6, #2
   188e4:	bhi	18e6c <__assert_fail@plt+0x70f8>
   188e8:	ldr	r3, [sp, #36]	; 0x24
   188ec:	cmp	r3, #0
   188f0:	blt	18eb4 <__assert_fail@plt+0x7140>
   188f4:	ldr	r5, [pc, #824]	; 18c34 <__assert_fail@plt+0x6ec0>
   188f8:	ldr	r8, [sp, #36]	; 0x24
   188fc:	str	r8, [r5, #3188]	; 0xc74
   18900:	mov	r1, #3
   18904:	mov	r0, r8
   18908:	bl	23688 <_obstack_memory_used@@Base+0x3cb4>
   1890c:	adds	r6, r1, #0
   18910:	movne	r6, #1
   18914:	mov	r1, #3
   18918:	mov	r0, r8
   1891c:	bl	2349c <_obstack_memory_used@@Base+0x3ac8>
   18920:	add	r0, r6, r0
   18924:	str	r0, [r5, #3604]	; 0xe14
   18928:	ldr	r3, [r5, #3116]	; 0xc2c
   1892c:	sub	r3, r3, #2
   18930:	cmp	r3, #2
   18934:	bhi	18948 <__assert_fail@plt+0x6bd4>
   18938:	ldr	r2, [sp, #44]	; 0x2c
   1893c:	cmp	r2, #0
   18940:	blt	18f5c <__assert_fail@plt+0x71e8>
   18944:	str	r2, [r5, #3888]	; 0xf30
   18948:	ldr	r3, [sp, #32]
   1894c:	cmp	r3, #0
   18950:	blt	18ff0 <__assert_fail@plt+0x727c>
   18954:	ldr	r3, [sp, #32]
   18958:	adds	r3, r3, #0
   1895c:	movne	r3, #1
   18960:	ldr	r2, [pc, #716]	; 18c34 <__assert_fail@plt+0x6ec0>
   18964:	strb	r3, [r2, #3181]	; 0xc6d
   18968:	ldr	r3, [sp, #28]
   1896c:	cmp	r3, #0
   18970:	blt	19014 <__assert_fail@plt+0x72a0>
   18974:	ldr	r1, [sp, #28]
   18978:	mov	r0, #0
   1897c:	bl	20fac <_obstack_memory_used@@Base+0x15d8>
   18980:	mov	r0, #0
   18984:	bl	20f94 <_obstack_memory_used@@Base+0x15c0>
   18988:	mov	r5, r0
   1898c:	ldr	r3, [pc, #672]	; 18c34 <__assert_fail@plt+0x6ec0>
   18990:	ldr	r3, [r3, #3116]	; 0xc2c
   18994:	cmp	r3, #0
   18998:	beq	189c0 <__assert_fail@plt+0x6c4c>
   1899c:	sub	r3, r3, #2
   189a0:	cmp	r3, #1
   189a4:	movhi	r3, #0
   189a8:	bhi	189d4 <__assert_fail@plt+0x6c60>
   189ac:	ldr	r3, [pc, #640]	; 18c34 <__assert_fail@plt+0x6ec0>
   189b0:	ldr	r3, [r3, #3188]	; 0xc74
   189b4:	cmp	r3, #0
   189b8:	moveq	r3, #0
   189bc:	beq	189d4 <__assert_fail@plt+0x6c60>
   189c0:	bic	r3, r5, #2
   189c4:	cmp	r5, #6
   189c8:	cmpne	r3, #1
   189cc:	moveq	r3, #1
   189d0:	movne	r3, #0
   189d4:	ldr	r6, [pc, #600]	; 18c34 <__assert_fail@plt+0x6ec0>
   189d8:	strb	r3, [r6, #3182]	; 0xc6e
   189dc:	mov	r0, #0
   189e0:	bl	20f5c <_obstack_memory_used@@Base+0x1588>
   189e4:	str	r0, [r6, #3176]	; 0xc68
   189e8:	cmp	r5, #7
   189ec:	beq	190b8 <__assert_fail@plt+0x7344>
   189f0:	ldr	r3, [pc, #572]	; 18c34 <__assert_fail@plt+0x6ec0>
   189f4:	ldr	r3, [r3, #20]
   189f8:	cmp	r3, #1
   189fc:	bls	18a38 <__assert_fail@plt+0x6cc4>
   18a00:	sub	r3, r3, #2
   18a04:	ldr	r2, [pc, #668]	; 18ca8 <__assert_fail@plt+0x6f34>
   18a08:	add	r5, r3, r2
   18a0c:	ldrb	r1, [r2, r3]
   18a10:	cmp	r1, #0
   18a14:	beq	18a38 <__assert_fail@plt+0x6cc4>
   18a18:	ldr	r8, [pc, #532]	; 18c34 <__assert_fail@plt+0x6ec0>
   18a1c:	mov	r6, #1
   18a20:	mov	r2, r6
   18a24:	ldr	r0, [r8, #3176]	; 0xc68
   18a28:	bl	20fc4 <_obstack_memory_used@@Base+0x15f0>
   18a2c:	ldrb	r1, [r5, #1]!
   18a30:	cmp	r1, #0
   18a34:	bne	18a20 <__assert_fail@plt+0x6cac>
   18a38:	mov	r0, #0
   18a3c:	bl	20f5c <_obstack_memory_used@@Base+0x1588>
   18a40:	ldr	r3, [pc, #496]	; 18c38 <__assert_fail@plt+0x6ec4>
   18a44:	str	r0, [r3, #-3992]	; 0xfffff068
   18a48:	mov	r2, #1
   18a4c:	mov	r1, #58	; 0x3a
   18a50:	bl	20fc4 <_obstack_memory_used@@Base+0x15f0>
   18a54:	ldr	r2, [pc, #472]	; 18c34 <__assert_fail@plt+0x6ec0>
   18a58:	ldr	r1, [r2, #3116]	; 0xc2c
   18a5c:	ldrb	r3, [r2, #4044]	; 0xfcc
   18a60:	eor	r3, r3, #1
   18a64:	cmp	r1, #0
   18a68:	movne	r3, #0
   18a6c:	andeq	r3, r3, #1
   18a70:	ldrb	r0, [r2, #3892]	; 0xf34
   18a74:	and	r3, r3, r0
   18a78:	strb	r3, [r2, #3892]	; 0xf34
   18a7c:	ldr	r2, [pc, #788]	; 18d98 <__assert_fail@plt+0x7024>
   18a80:	ldrb	r2, [r2, #210]	; 0xd2
   18a84:	cmp	r3, r2
   18a88:	bgt	190c8 <__assert_fail@plt+0x7354>
   18a8c:	cmp	sl, #0
   18a90:	movge	r2, sl
   18a94:	blt	190e8 <__assert_fail@plt+0x7374>
   18a98:	ldr	r3, [pc, #404]	; 18c34 <__assert_fail@plt+0x6ec0>
   18a9c:	str	r2, [r3, #3124]	; 0xc34
   18aa0:	cmp	r1, #0
   18aa4:	beq	19c14 <__assert_fail@plt+0x7ea0>
   18aa8:	ldr	r3, [pc, #588]	; 18cfc <__assert_fail@plt+0x6f88>
   18aac:	ldr	r5, [r3]
   18ab0:	ldr	r3, [pc, #380]	; 18c34 <__assert_fail@plt+0x6ec0>
   18ab4:	ldrb	r3, [r3, #4024]	; 0xfb8
   18ab8:	cmp	r3, #0
   18abc:	bne	192f4 <__assert_fail@plt+0x7580>
   18ac0:	ldr	r3, [pc, #364]	; 18c34 <__assert_fail@plt+0x6ec0>
   18ac4:	ldrb	r3, [r3, #3585]	; 0xe01
   18ac8:	cmp	r3, #0
   18acc:	beq	18adc <__assert_fail@plt+0x6d68>
   18ad0:	mov	r2, #1
   18ad4:	ldr	r3, [pc, #344]	; 18c34 <__assert_fail@plt+0x6ec0>
   18ad8:	strb	r2, [r3, #4052]	; 0xfd4
   18adc:	ldr	r3, [pc, #336]	; 18c34 <__assert_fail@plt+0x6ec0>
   18ae0:	ldr	r3, [r3, #4048]	; 0xfd0
   18ae4:	cmp	r3, #0
   18ae8:	bne	18b30 <__assert_fail@plt+0x6dbc>
   18aec:	ldr	r3, [pc, #320]	; 18c34 <__assert_fail@plt+0x6ec0>
   18af0:	ldrb	r3, [r3, #4080]	; 0xff0
   18af4:	cmp	r3, #0
   18af8:	movne	r3, #1
   18afc:	bne	18b28 <__assert_fail@plt+0x6db4>
   18b00:	ldr	r3, [pc, #300]	; 18c34 <__assert_fail@plt+0x6ec0>
   18b04:	ldr	r3, [r3, #20]
   18b08:	cmp	r3, #3
   18b0c:	moveq	r3, #1
   18b10:	beq	18b28 <__assert_fail@plt+0x6db4>
   18b14:	ldr	r3, [pc, #280]	; 18c34 <__assert_fail@plt+0x6ec0>
   18b18:	ldr	r3, [r3, #3116]	; 0xc2c
   18b1c:	cmp	r3, #0
   18b20:	moveq	r3, #1
   18b24:	movne	r3, #3
   18b28:	ldr	r2, [pc, #260]	; 18c34 <__assert_fail@plt+0x6ec0>
   18b2c:	str	r3, [r2, #4048]	; 0xfd0
   18b30:	ldr	r3, [pc, #256]	; 18c38 <__assert_fail@plt+0x6ec4>
   18b34:	ldrb	r3, [r3, #-3996]	; 0xfffff064
   18b38:	cmp	r3, #0
   18b3c:	beq	18b88 <__assert_fail@plt+0x6e14>
   18b40:	ldr	r3, [pc, #356]	; 18cac <__assert_fail@plt+0x6f38>
   18b44:	str	r3, [sp]
   18b48:	ldr	r3, [pc, #352]	; 18cb0 <__assert_fail@plt+0x6f3c>
   18b4c:	ldr	r2, [pc, #352]	; 18cb4 <__assert_fail@plt+0x6f40>
   18b50:	mov	r1, #0
   18b54:	mov	r0, #30
   18b58:	bl	1bd70 <__assert_fail@plt+0x9ffc>
   18b5c:	ldr	r3, [pc, #208]	; 18c34 <__assert_fail@plt+0x6ec0>
   18b60:	str	r0, [r3, #3616]	; 0xe20
   18b64:	cmp	r0, #0
   18b68:	beq	19668 <__assert_fail@plt+0x78f4>
   18b6c:	ldr	r3, [pc, #500]	; 18d68 <__assert_fail@plt+0x6ff4>
   18b70:	str	r3, [sp]
   18b74:	ldr	r3, [pc, #488]	; 18d64 <__assert_fail@plt+0x6ff0>
   18b78:	mov	r2, #0
   18b7c:	mov	r1, r2
   18b80:	ldr	r0, [pc, #304]	; 18cb8 <__assert_fail@plt+0x6f44>
   18b84:	bl	1f7bc <_obstack_begin@@Base>
   18b88:	ldr	r0, [pc, #300]	; 18cbc <__assert_fail@plt+0x6f48>
   18b8c:	bl	11ac8 <getenv@plt>
   18b90:	bl	21850 <_obstack_memory_used@@Base+0x1e7c>
   18b94:	ldr	r3, [pc, #152]	; 18c34 <__assert_fail@plt+0x6ec0>
   18b98:	str	r0, [r3, #4088]	; 0xff8
   18b9c:	ldr	r3, [r3, #3124]	; 0xc34
   18ba0:	sub	r3, r3, #3
   18ba4:	bics	r3, r3, #2
   18ba8:	beq	19b3c <__assert_fail@plt+0x7dc8>
   18bac:	ldr	r3, [pc, #128]	; 18c34 <__assert_fail@plt+0x6ec0>
   18bb0:	ldr	r3, [r3, #3116]	; 0xc2c
   18bb4:	cmp	r3, #0
   18bb8:	beq	19b3c <__assert_fail@plt+0x7dc8>
   18bbc:	ldr	r3, [pc, #112]	; 18c34 <__assert_fail@plt+0x6ec0>
   18bc0:	ldrb	r3, [r3, #3600]	; 0xe10
   18bc4:	cmp	r3, #0
   18bc8:	bne	19b3c <__assert_fail@plt+0x7dc8>
   18bcc:	ldr	r2, [pc, #96]	; 18c34 <__assert_fail@plt+0x6ec0>
   18bd0:	ldrb	r3, [r2, #3113]	; 0xc29
   18bd4:	strb	r3, [r2, #4045]	; 0xfcd
   18bd8:	cmp	r3, #0
   18bdc:	movne	r3, #0
   18be0:	bne	19b4c <__assert_fail@plt+0x7dd8>
   18be4:	ldr	r3, [pc, #76]	; 18c38 <__assert_fail@plt+0x6ec4>
   18be8:	ldrb	r3, [r3, #-3996]	; 0xfffff064
   18bec:	cmp	r3, #0
   18bf0:	movne	r3, #1
   18bf4:	bne	19b4c <__assert_fail@plt+0x7dd8>
   18bf8:	ldrb	r3, [r2, #4024]	; 0xfb8
   18bfc:	cmp	r3, #0
   18c00:	movne	r3, #1
   18c04:	bne	19b4c <__assert_fail@plt+0x7dd8>
   18c08:	ldr	r3, [r2, #20]
   18c0c:	cmp	r3, #0
   18c10:	moveq	r3, r2
   18c14:	ldrbeq	r3, [r3, #3585]	; 0xe01
   18c18:	movne	r3, #1
   18c1c:	b	19b4c <__assert_fail@plt+0x7dd8>
   18c20:	andeq	r8, r2, ip, ror #1
   18c24:	andeq	r7, r2, r0, ror #13
   18c28:	andeq	r7, r2, r0, lsr #15
   18c2c:	andeq	r9, r3, r4, asr #5
   18c30:	andeq	sl, r1, r0, lsl sl
   18c34:	andeq	r9, r3, r0, lsr r3
   18c38:	andeq	fp, r3, r8, lsr #6
   18c3c:			; <UNDEFINED> instruction: 0x00025fb0
   18c40:			; <UNDEFINED> instruction: 0x000277b8
   18c44:	andeq	r9, r3, r8, lsr #6
   18c48:	andeq	r7, r2, r4, ror #15
   18c4c:	strdeq	r7, [r2], -r8
   18c50:	andeq	r7, r2, r0, lsl #16
   18c54:	andeq	r7, r2, r4, lsl #16
   18c58:	andeq	r9, r3, r0, asr #5
   18c5c:	andeq	r7, r2, r8, lsl #16
   18c60:	andeq	r7, r2, r4, lsl r8
   18c64:	andeq	r7, r2, r8, lsr #16
   18c68:	andeq	r7, r2, r0, lsr r8
   18c6c:	andeq	r7, r2, r8, lsr r8
   18c70:	andeq	r7, r2, r4, asr #16
   18c74:	andeq	r7, r2, ip, asr #16
   18c78:	andeq	r7, r2, r8, asr r8
   18c7c:	andeq	r7, r2, ip, ror #16
   18c80:	andeq	sl, r3, r4, lsr r1
   18c84:	andeq	r5, r2, r8, ror r2
   18c88:	andeq	r5, r2, ip, asr #17
   18c8c:	andeq	r7, r2, r0, asr #28
   18c90:	andeq	r7, r2, ip, ror r8
   18c94:	andeq	r7, r2, ip, lsl #17
   18c98:			; <UNDEFINED> instruction: 0x000392bc
   18c9c:	ldrdeq	r7, [r2], -ip
   18ca0:	ldrdeq	r5, [r2], -r4
   18ca4:	andeq	sl, r3, r0, asr #2
   18ca8:	muleq	r2, r4, r9
   18cac:	andeq	r2, r1, r8, asr #7
   18cb0:	andeq	r1, r1, r4, asr #29
   18cb4:	andeq	r1, r1, r8, lsr #29
   18cb8:	andeq	sl, r3, r0, ror #6
   18cbc:	strdeq	r7, [r2], -ip
   18cc0:	andeq	r7, r2, r0, lsr #17
   18cc4:	andeq	sl, r3, r8, lsr r1
   18cc8:			; <UNDEFINED> instruction: 0x000278b0
   18ccc:	ldrdeq	r7, [r2], -r0
   18cd0:	andeq	r5, r0, r3, lsl r4
   18cd4:			; <UNDEFINED> instruction: 0x000278bc
   18cd8:	strdeq	r7, [r2], -r8
   18cdc:	andeq	r7, r2, r0, lsl #18
   18ce0:	andeq	r7, r2, r0, asr #18
   18ce4:	andeq	r8, r2, ip, ror #3
   18ce8:			; <UNDEFINED> instruction: 0x000392b8
   18cec:	andeq	r7, r2, r0, asr r9
   18cf0:	muleq	r2, ip, r9
   18cf4:	andeq	r7, r2, r0, asr #19
   18cf8:	muleq	r2, r4, r7
   18cfc:	andeq	r9, r3, r8, lsl r3
   18d00:	andeq	r5, r2, ip, ror #12
   18d04:	andeq	r7, r2, ip, asr #19
   18d08:	andeq	r7, r2, ip, ror #19
   18d0c:	strdeq	r7, [r2], -r8
   18d10:	andeq	r7, r2, r8, lsl #15
   18d14:	andeq	r4, r2, ip, lsl #3
   18d18:	andeq	r7, r2, r0, lsl sl
   18d1c:	andeq	r7, r2, r0, lsr #20
   18d20:	andeq	r9, r3, r0, lsr #6
   18d24:	andeq	r7, r2, r8, asr sl
   18d28:	andeq	r7, r2, r0, ror sl
   18d2c:	andeq	r7, r2, r0, lsl #21
   18d30:	andeq	r7, r2, ip, lsl #21
   18d34:	muleq	r2, r8, sl
   18d38:	andeq	r7, r2, r4, lsr #21
   18d3c:			; <UNDEFINED> instruction: 0x00027ab0
   18d40:	andeq	r4, r2, r0, lsr #3
   18d44:	ldrdeq	r1, [r0], -r5
   18d48:			; <UNDEFINED> instruction: 0x00027ab8
   18d4c:	ldrdeq	r7, [r2], -r8
   18d50:	muleq	r2, ip, r7
   18d54:	andeq	r5, r2, ip, ror r6
   18d58:			; <UNDEFINED> instruction: 0x00027bb8
   18d5c:	strdeq	r7, [r2], -r4
   18d60:	andeq	r7, r2, r0, asr #21
   18d64:	andeq	r3, r2, r4, lsr r1
   18d68:	andeq	fp, r1, r8, lsl #7
   18d6c:	andeq	sl, r3, r3, asr r1
   18d70:	andeq	r7, r2, r0, lsl #22
   18d74:	andeq	r5, r2, r0, ror #13
   18d78:	andeq	r0, r0, sp, lsl r4
   18d7c:	andeq	r7, r2, r4, lsl #22
   18d80:	andeq	r7, r2, ip, lsr fp
   18d84:	andeq	r0, r0, sp, lsl #14
   18d88:	andeq	r9, r3, r4, lsr #6
   18d8c:			; <UNDEFINED> instruction: 0x00023fb8
   18d90:	andeq	sl, r3, r8, ror #4
   18d94:	andeq	r7, r2, r4, asr #22
   18d98:	ldrdeq	r9, [r3], -r0
   18d9c:	andeq	r7, r2, r8, asr #22
   18da0:	andeq	r7, r2, r4, asr fp
   18da4:	andeq	r8, r2, r4, lsl r2
   18da8:	andeq	r7, r2, r4, ror #22
   18dac:	andeq	r5, r2, ip, ror #13
   18db0:	andeq	r0, r0, r1, asr #14
   18db4:	andeq	r7, r2, ip, lsl #23
   18db8:	andeq	r5, r2, ip, lsl #14
   18dbc:	andeq	r8, r2, ip, ror #1
   18dc0:	andeq	fp, r3, r8, lsr #6
   18dc4:	andeq	r9, r3, r0, lsr r3
   18dc8:	andeq	r5, r2, r4, ror #12
   18dcc:	ldr	r0, [pc, #-276]	; 18cc0 <__assert_fail@plt+0x6f4c>
   18dd0:	bl	11ac8 <getenv@plt>
   18dd4:	mov	r5, r0
   18dd8:	ldr	r2, [pc, #-284]	; 18cc4 <__assert_fail@plt+0x6f50>
   18ddc:	sub	r1, r2, #4
   18de0:	bl	1cdc8 <__assert_fail@plt+0xb054>
   18de4:	cmp	r5, #0
   18de8:	beq	18e34 <__assert_fail@plt+0x70c0>
   18dec:	ldr	r3, [pc, #-48]	; 18dc4 <__assert_fail@plt+0x7050>
   18df0:	ldr	r2, [r3, #3588]	; 0xe04
   18df4:	str	r2, [r3, #4084]	; 0xff4
   18df8:	add	r3, r3, #3600	; 0xe10
   18dfc:	ldrd	r0, [r3, #-8]
   18e00:	ldr	r3, [pc, #-112]	; 18d98 <__assert_fail@plt+0x7024>
   18e04:	strd	r0, [r3, #216]	; 0xd8
   18e08:	ldr	r3, [sp, #48]	; 0x30
   18e0c:	cmp	r3, #0
   18e10:	beq	188cc <__assert_fail@plt+0x6b58>
   18e14:	ldr	r3, [pc, #-88]	; 18dc4 <__assert_fail@plt+0x7050>
   18e18:	mov	r2, #0
   18e1c:	str	r2, [r3, #3588]	; 0xe04
   18e20:	add	r3, r3, #3600	; 0xe10
   18e24:	mov	r0, #1024	; 0x400
   18e28:	mov	r1, #0
   18e2c:	strd	r0, [r3, #-8]
   18e30:	b	188cc <__assert_fail@plt+0x6b58>
   18e34:	ldr	r0, [pc, #-372]	; 18cc8 <__assert_fail@plt+0x6f54>
   18e38:	bl	11ac8 <getenv@plt>
   18e3c:	cmp	r0, #0
   18e40:	bne	18dec <__assert_fail@plt+0x7078>
   18e44:	b	18e08 <__assert_fail@plt+0x7094>
   18e48:	ldr	r3, [pc, #-360]	; 18ce8 <__assert_fail@plt+0x6f74>
   18e4c:	ldr	r3, [r3]
   18e50:	cmp	r3, #1
   18e54:	beq	18e94 <__assert_fail@plt+0x7120>
   18e58:	cmp	r3, #2
   18e5c:	movne	r3, #0
   18e60:	beq	18ea4 <__assert_fail@plt+0x7130>
   18e64:	ldr	r2, [pc, #-168]	; 18dc4 <__assert_fail@plt+0x7050>
   18e68:	str	r3, [r2, #3116]	; 0xc2c
   18e6c:	ldr	r3, [pc, #-176]	; 18dc4 <__assert_fail@plt+0x7050>
   18e70:	ldrb	r3, [r3, #4024]	; 0xfb8
   18e74:	cmp	r3, #0
   18e78:	bne	188e8 <__assert_fail@plt+0x6b74>
   18e7c:	ldr	r2, [sp, #36]	; 0x24
   18e80:	mov	r3, r2
   18e84:	cmp	r2, #0
   18e88:	movlt	r3, #80	; 0x50
   18e8c:	str	r3, [sp, #36]	; 0x24
   18e90:	b	188f4 <__assert_fail@plt+0x6b80>
   18e94:	bl	124cc <__assert_fail@plt+0x758>
   18e98:	cmp	r0, #0
   18e9c:	moveq	r3, #1
   18ea0:	beq	18e64 <__assert_fail@plt+0x70f0>
   18ea4:	mov	r2, #2
   18ea8:	ldr	r3, [pc, #-236]	; 18dc4 <__assert_fail@plt+0x7050>
   18eac:	str	r2, [r3, #3116]	; 0xc2c
   18eb0:	b	188e8 <__assert_fail@plt+0x6b74>
   18eb4:	bl	124cc <__assert_fail@plt+0x758>
   18eb8:	cmp	r0, #0
   18ebc:	bne	18ee8 <__assert_fail@plt+0x7174>
   18ec0:	ldr	r0, [pc, #-508]	; 18ccc <__assert_fail@plt+0x6f58>
   18ec4:	bl	11ac8 <getenv@plt>
   18ec8:	subs	r5, r0, #0
   18ecc:	beq	18edc <__assert_fail@plt+0x7168>
   18ed0:	ldrb	r3, [r5]
   18ed4:	cmp	r3, #0
   18ed8:	bne	18f14 <__assert_fail@plt+0x71a0>
   18edc:	mov	r3, #80	; 0x50
   18ee0:	str	r3, [sp, #36]	; 0x24
   18ee4:	b	188f4 <__assert_fail@plt+0x6b80>
   18ee8:	add	r2, sp, #64	; 0x40
   18eec:	ldr	r1, [pc, #-548]	; 18cd0 <__assert_fail@plt+0x6f5c>
   18ef0:	mov	r0, #1
   18ef4:	bl	11a38 <ioctl@plt>
   18ef8:	cmp	r0, #0
   18efc:	blt	18ec0 <__assert_fail@plt+0x714c>
   18f00:	ldrh	r3, [sp, #66]	; 0x42
   18f04:	cmp	r3, #0
   18f08:	strne	r3, [sp, #36]	; 0x24
   18f0c:	bne	188f4 <__assert_fail@plt+0x6b80>
   18f10:	b	18ec0 <__assert_fail@plt+0x714c>
   18f14:	mov	r0, r5
   18f18:	bl	12400 <__assert_fail@plt+0x68c>
   18f1c:	subs	r3, r0, #0
   18f20:	str	r3, [sp, #36]	; 0x24
   18f24:	bge	188f4 <__assert_fail@plt+0x6b80>
   18f28:	mov	r2, #5
   18f2c:	ldr	r1, [pc, #-608]	; 18cd4 <__assert_fail@plt+0x6f60>
   18f30:	mov	r0, #0
   18f34:	bl	11984 <dcgettext@plt>
   18f38:	mov	r6, r0
   18f3c:	mov	r0, r5
   18f40:	bl	21558 <_obstack_memory_used@@Base+0x1b84>
   18f44:	mov	r3, r0
   18f48:	mov	r2, r6
   18f4c:	mov	r1, #0
   18f50:	mov	r0, r1
   18f54:	bl	11a8c <error@plt>
   18f58:	b	18edc <__assert_fail@plt+0x7168>
   18f5c:	mov	r2, #8
   18f60:	ldr	r3, [pc, #-420]	; 18dc4 <__assert_fail@plt+0x7050>
   18f64:	str	r2, [r3, #3888]	; 0xf30
   18f68:	ldr	r0, [pc, #-664]	; 18cd8 <__assert_fail@plt+0x6f64>
   18f6c:	bl	11ac8 <getenv@plt>
   18f70:	subs	r5, r0, #0
   18f74:	beq	18948 <__assert_fail@plt+0x6bd4>
   18f78:	ldr	r3, [pc, #-452]	; 18dbc <__assert_fail@plt+0x7048>
   18f7c:	str	r3, [sp]
   18f80:	add	r3, sp, #64	; 0x40
   18f84:	mov	r2, #0
   18f88:	mov	r1, r2
   18f8c:	mov	r0, r5
   18f90:	bl	22c64 <_obstack_memory_used@@Base+0x3290>
   18f94:	cmp	r0, #0
   18f98:	bne	18fbc <__assert_fail@plt+0x7248>
   18f9c:	ldrd	r2, [sp, #64]	; 0x40
   18fa0:	mvn	r0, #0
   18fa4:	mov	r1, #0
   18fa8:	cmp	r3, r1
   18fac:	cmpeq	r2, r0
   18fb0:	ldrls	r3, [pc, #-500]	; 18dc4 <__assert_fail@plt+0x7050>
   18fb4:	strls	r2, [r3, #3888]	; 0xf30
   18fb8:	bls	18948 <__assert_fail@plt+0x6bd4>
   18fbc:	mov	r2, #5
   18fc0:	ldr	r1, [pc, #-748]	; 18cdc <__assert_fail@plt+0x6f68>
   18fc4:	mov	r0, #0
   18fc8:	bl	11984 <dcgettext@plt>
   18fcc:	mov	r6, r0
   18fd0:	mov	r0, r5
   18fd4:	bl	21558 <_obstack_memory_used@@Base+0x1b84>
   18fd8:	mov	r3, r0
   18fdc:	mov	r2, r6
   18fe0:	mov	r1, #0
   18fe4:	mov	r0, r1
   18fe8:	bl	11a8c <error@plt>
   18fec:	b	18948 <__assert_fail@plt+0x6bd4>
   18ff0:	ldr	r3, [pc, #-784]	; 18ce8 <__assert_fail@plt+0x6f74>
   18ff4:	ldr	r3, [r3]
   18ff8:	cmp	r3, #1
   18ffc:	movne	r0, #0
   19000:	beq	1900c <__assert_fail@plt+0x7298>
   19004:	and	r3, r0, #1
   19008:	b	18960 <__assert_fail@plt+0x6bec>
   1900c:	bl	124cc <__assert_fail@plt+0x758>
   19010:	b	19004 <__assert_fail@plt+0x7290>
   19014:	ldr	r0, [pc, #-828]	; 18ce0 <__assert_fail@plt+0x6f6c>
   19018:	bl	11ac8 <getenv@plt>
   1901c:	subs	r5, r0, #0
   19020:	beq	19054 <__assert_fail@plt+0x72e0>
   19024:	mov	r3, #4
   19028:	ldr	r2, [pc, #-844]	; 18ce4 <__assert_fail@plt+0x6f70>
   1902c:	ldr	r1, [pc, #-656]	; 18da4 <__assert_fail@plt+0x7030>
   19030:	mov	r0, r5
   19034:	bl	19d98 <__assert_fail@plt+0x8024>
   19038:	cmp	r0, #0
   1903c:	blt	19084 <__assert_fail@plt+0x7310>
   19040:	ldr	r3, [pc, #-868]	; 18ce4 <__assert_fail@plt+0x6f70>
   19044:	ldr	r3, [r3, r0, lsl #2]
   19048:	str	r3, [sp, #28]
   1904c:	cmp	r3, #0
   19050:	bge	18974 <__assert_fail@plt+0x6c00>
   19054:	ldr	r3, [pc, #-884]	; 18ce8 <__assert_fail@plt+0x6f74>
   19058:	ldr	r3, [r3]
   1905c:	cmp	r3, #1
   19060:	movne	r3, #7
   19064:	strne	r3, [sp, #28]
   19068:	bne	18974 <__assert_fail@plt+0x6c00>
   1906c:	bl	124cc <__assert_fail@plt+0x758>
   19070:	cmp	r0, #0
   19074:	beq	18980 <__assert_fail@plt+0x6c0c>
   19078:	mov	r3, #3
   1907c:	str	r3, [sp, #28]
   19080:	b	18974 <__assert_fail@plt+0x6c00>
   19084:	mov	r2, #5
   19088:	ldr	r1, [pc, #-932]	; 18cec <__assert_fail@plt+0x6f78>
   1908c:	mov	r0, #0
   19090:	bl	11984 <dcgettext@plt>
   19094:	mov	r6, r0
   19098:	mov	r0, r5
   1909c:	bl	21558 <_obstack_memory_used@@Base+0x1b84>
   190a0:	mov	r3, r0
   190a4:	mov	r2, r6
   190a8:	mov	r1, #0
   190ac:	mov	r0, r1
   190b0:	bl	11a8c <error@plt>
   190b4:	b	19054 <__assert_fail@plt+0x72e0>
   190b8:	mov	r2, #1
   190bc:	mov	r1, #32
   190c0:	bl	20fc4 <_obstack_memory_used@@Base+0x15f0>
   190c4:	b	189f0 <__assert_fail@plt+0x6c7c>
   190c8:	mov	r2, #5
   190cc:	ldr	r1, [pc, #-996]	; 18cf0 <__assert_fail@plt+0x6f7c>
   190d0:	mov	r0, #0
   190d4:	bl	11984 <dcgettext@plt>
   190d8:	mov	r2, r0
   190dc:	mov	r1, #0
   190e0:	mov	r0, #2
   190e4:	bl	11a8c <error@plt>
   190e8:	cmp	r1, #0
   190ec:	beq	19c08 <__assert_fail@plt+0x7e94>
   190f0:	ldr	r3, [pc, #-820]	; 18dc4 <__assert_fail@plt+0x7050>
   190f4:	ldr	r3, [r3, #3108]	; 0xc24
   190f8:	sub	r3, r3, #1
   190fc:	cmp	r3, #2
   19100:	movls	r2, #5
   19104:	movhi	r2, #0
   19108:	b	18a98 <__assert_fail@plt+0x6d24>
   1910c:	ldr	r0, [pc, #-1056]	; 18cf4 <__assert_fail@plt+0x6f80>
   19110:	bl	11ac8 <getenv@plt>
   19114:	subs	r7, r0, #0
   19118:	bne	19c1c <__assert_fail@plt+0x7ea8>
   1911c:	ldr	r7, [pc, #-1068]	; 18cf8 <__assert_fail@plt+0x6f84>
   19120:	b	1913c <__assert_fail@plt+0x73c8>
   19124:	ldr	r3, [pc, #-1072]	; 18cfc <__assert_fail@plt+0x6f88>
   19128:	ldr	r5, [r3]
   1912c:	b	18ab0 <__assert_fail@plt+0x6d3c>
   19130:	ldrb	r3, [r7]
   19134:	cmp	r3, #43	; 0x2b
   19138:	beq	19174 <__assert_fail@plt+0x7400>
   1913c:	mov	r3, #4
   19140:	ldr	r2, [pc, #-1096]	; 18d00 <__assert_fail@plt+0x6f8c>
   19144:	ldr	r1, [pc, #-1080]	; 18d14 <__assert_fail@plt+0x6fa0>
   19148:	mov	r0, r7
   1914c:	bl	19d98 <__assert_fail@plt+0x8024>
   19150:	subs	r2, r0, #0
   19154:	blt	191f8 <__assert_fail@plt+0x7484>
   19158:	cmp	r2, #3
   1915c:	ldrls	pc, [pc, r2, lsl #2]
   19160:	b	191b8 <__assert_fail@plt+0x7444>
   19164:	andeq	r9, r1, r4, ror r2
   19168:	andeq	r9, r1, r8, lsl #5
   1916c:	muleq	r1, ip, r2
   19170:			; <UNDEFINED> instruction: 0x000192b4
   19174:	add	r7, r7, #1
   19178:	mov	r1, #10
   1917c:	mov	r0, r7
   19180:	bl	11ba0 <strchr@plt>
   19184:	subs	r6, r0, #0
   19188:	beq	191f0 <__assert_fail@plt+0x747c>
   1918c:	add	r5, r6, #1
   19190:	mov	r1, #10
   19194:	mov	r0, r5
   19198:	bl	11ba0 <strchr@plt>
   1919c:	cmp	r0, #0
   191a0:	moveq	r3, #0
   191a4:	strbeq	r3, [r6]
   191a8:	bne	191c0 <__assert_fail@plt+0x744c>
   191ac:	ldr	r3, [pc, #-1052]	; 18d98 <__assert_fail@plt+0x7024>
   191b0:	str	r7, [r3, #196]	; 0xc4
   191b4:	str	r5, [r3, #200]	; 0xc8
   191b8:	bl	1251c <__assert_fail@plt+0x7a8>
   191bc:	b	18aa8 <__assert_fail@plt+0x6d34>
   191c0:	mov	r2, #5
   191c4:	ldr	r1, [pc, #-1224]	; 18d04 <__assert_fail@plt+0x6f90>
   191c8:	mov	r0, #0
   191cc:	bl	11984 <dcgettext@plt>
   191d0:	mov	r4, r0
   191d4:	mov	r0, r7
   191d8:	bl	21558 <_obstack_memory_used@@Base+0x1b84>
   191dc:	mov	r3, r0
   191e0:	mov	r2, r4
   191e4:	mov	r1, #0
   191e8:	mov	r0, #2
   191ec:	bl	11a8c <error@plt>
   191f0:	mov	r5, r7
   191f4:	b	191ac <__assert_fail@plt+0x7438>
   191f8:	mov	r1, r7
   191fc:	ldr	r0, [pc, #-1276]	; 18d08 <__assert_fail@plt+0x6f94>
   19200:	bl	19ec4 <__assert_fail@plt+0x8150>
   19204:	mov	r2, #5
   19208:	ldr	r1, [pc, #-1284]	; 18d0c <__assert_fail@plt+0x6f98>
   1920c:	mov	r0, #0
   19210:	bl	11984 <dcgettext@plt>
   19214:	ldr	r3, [pc, #-1276]	; 18d20 <__assert_fail@plt+0x6fac>
   19218:	ldr	r1, [r3]
   1921c:	bl	11864 <fputs_unlocked@plt>
   19220:	ldr	r3, [pc, #-1304]	; 18d10 <__assert_fail@plt+0x6f9c>
   19224:	ldr	r4, [pc, #-1304]	; 18d14 <__assert_fail@plt+0x6fa0>
   19228:	ldr	r7, [pc, #-1304]	; 18d18 <__assert_fail@plt+0x6fa4>
   1922c:	ldr	r6, [pc, #-1300]	; 18d20 <__assert_fail@plt+0x6fac>
   19230:	mov	r5, #1
   19234:	mov	r2, r7
   19238:	mov	r1, r5
   1923c:	ldr	r0, [r6]
   19240:	bl	11c18 <__fprintf_chk@plt>
   19244:	ldr	r3, [r4, #4]!
   19248:	cmp	r3, #0
   1924c:	bne	19234 <__assert_fail@plt+0x74c0>
   19250:	mov	r2, #5
   19254:	ldr	r1, [pc, #-1344]	; 18d1c <__assert_fail@plt+0x6fa8>
   19258:	mov	r0, #0
   1925c:	bl	11984 <dcgettext@plt>
   19260:	ldr	r3, [pc, #-1352]	; 18d20 <__assert_fail@plt+0x6fac>
   19264:	ldr	r1, [r3]
   19268:	bl	11864 <fputs_unlocked@plt>
   1926c:	mov	r0, #2
   19270:	bl	1764c <__assert_fail@plt+0x58d8>
   19274:	ldr	r3, [pc, #-1252]	; 18d98 <__assert_fail@plt+0x7024>
   19278:	ldr	r2, [pc, #-1372]	; 18d24 <__assert_fail@plt+0x6fb0>
   1927c:	str	r2, [r3, #200]	; 0xc8
   19280:	str	r2, [r3, #196]	; 0xc4
   19284:	b	191b8 <__assert_fail@plt+0x7444>
   19288:	ldr	r3, [pc, #-1272]	; 18d98 <__assert_fail@plt+0x7024>
   1928c:	ldr	r2, [pc, #-1388]	; 18d28 <__assert_fail@plt+0x6fb4>
   19290:	str	r2, [r3, #200]	; 0xc8
   19294:	str	r2, [r3, #196]	; 0xc4
   19298:	b	191b8 <__assert_fail@plt+0x7444>
   1929c:	ldr	r3, [pc, #-1292]	; 18d98 <__assert_fail@plt+0x7024>
   192a0:	ldr	r2, [pc, #-1404]	; 18d2c <__assert_fail@plt+0x6fb8>
   192a4:	str	r2, [r3, #196]	; 0xc4
   192a8:	ldr	r2, [pc, #-1408]	; 18d30 <__assert_fail@plt+0x6fbc>
   192ac:	str	r2, [r3, #200]	; 0xc8
   192b0:	b	191b8 <__assert_fail@plt+0x7444>
   192b4:	mov	r0, #2
   192b8:	bl	1b41c <__assert_fail@plt+0x96a8>
   192bc:	cmp	r0, #0
   192c0:	beq	191b8 <__assert_fail@plt+0x7444>
   192c4:	ldr	r5, [pc, #-1332]	; 18d98 <__assert_fail@plt+0x7024>
   192c8:	mov	r2, #2
   192cc:	ldr	r1, [r5, #196]	; 0xc4
   192d0:	mov	r0, #0
   192d4:	bl	11984 <dcgettext@plt>
   192d8:	str	r0, [r5, #196]	; 0xc4
   192dc:	mov	r2, #2
   192e0:	ldr	r1, [r5, #200]	; 0xc8
   192e4:	mov	r0, #0
   192e8:	bl	11984 <dcgettext@plt>
   192ec:	str	r0, [r5, #200]	; 0xc8
   192f0:	b	191b8 <__assert_fail@plt+0x7444>
   192f4:	ldr	r0, [pc, #-1480]	; 18d34 <__assert_fail@plt+0x6fc0>
   192f8:	bl	11ac8 <getenv@plt>
   192fc:	str	r0, [sp, #60]	; 0x3c
   19300:	cmp	r0, #0
   19304:	beq	19314 <__assert_fail@plt+0x75a0>
   19308:	ldrb	r3, [r0]
   1930c:	cmp	r3, #0
   19310:	bne	193b0 <__assert_fail@plt+0x763c>
   19314:	ldr	r0, [pc, #-1508]	; 18d38 <__assert_fail@plt+0x6fc4>
   19318:	bl	11ac8 <getenv@plt>
   1931c:	cmp	r0, #0
   19320:	beq	19330 <__assert_fail@plt+0x75bc>
   19324:	ldrb	r3, [r0]
   19328:	cmp	r3, #0
   1932c:	bne	19aa0 <__assert_fail@plt+0x7d2c>
   19330:	ldr	r0, [pc, #-1532]	; 18d3c <__assert_fail@plt+0x6fc8>
   19334:	bl	11ac8 <getenv@plt>
   19338:	subs	sl, r0, #0
   1933c:	beq	19a94 <__assert_fail@plt+0x7d20>
   19340:	ldrb	r3, [sl]
   19344:	cmp	r3, #0
   19348:	beq	19a94 <__assert_fail@plt+0x7d20>
   1934c:	ldr	r6, [pc, #-1556]	; 18d40 <__assert_fail@plt+0x6fcc>
   19350:	mov	r8, r6
   19354:	ldr	r7, [pc, #-1560]	; 18d44 <__assert_fail@plt+0x6fd0>
   19358:	ldr	r9, [pc, #-1560]	; 18d48 <__assert_fail@plt+0x6fd4>
   1935c:	b	19370 <__assert_fail@plt+0x75fc>
   19360:	mov	r0, r6
   19364:	bl	11b94 <strlen@plt>
   19368:	add	r0, r0, #1
   1936c:	add	r6, r6, r0
   19370:	sub	r3, r6, r8
   19374:	cmp	r3, r7
   19378:	bhi	19a94 <__assert_fail@plt+0x7d20>
   1937c:	mov	r2, #5
   19380:	mov	r1, r9
   19384:	mov	r0, r6
   19388:	bl	11d20 <strncmp@plt>
   1938c:	cmp	r0, #0
   19390:	bne	19360 <__assert_fail@plt+0x75ec>
   19394:	mov	r2, #0
   19398:	mov	r1, sl
   1939c:	add	r0, r6, #5
   193a0:	bl	11ab0 <fnmatch@plt>
   193a4:	cmp	r0, #0
   193a8:	bne	19360 <__assert_fail@plt+0x75ec>
   193ac:	b	19aa0 <__assert_fail@plt+0x7d2c>
   193b0:	ldr	r3, [pc, #-1644]	; 18d4c <__assert_fail@plt+0x6fd8>
   193b4:	ldr	r3, [r3]
   193b8:	strh	r3, [sp, #56]	; 0x38
   193bc:	lsr	r3, r3, #16
   193c0:	strb	r3, [sp, #58]	; 0x3a
   193c4:	bl	22804 <_obstack_memory_used@@Base+0x2e30>
   193c8:	ldr	r3, [pc, #-1552]	; 18dc0 <__assert_fail@plt+0x704c>
   193cc:	str	r0, [r3, #-3936]	; 0xfffff0a0
   193d0:	str	r0, [sp, #64]	; 0x40
   193d4:	mov	r0, #1
   193d8:	mov	r7, #0
   193dc:	ldr	r9, [pc, #-1684]	; 18d50 <__assert_fail@plt+0x6fdc>
   193e0:	ldr	r8, [pc, #-1684]	; 18d54 <__assert_fail@plt+0x6fe0>
   193e4:	sub	r3, r0, #1
   193e8:	cmp	r3, #5
   193ec:	ldrls	pc, [pc, r3, lsl #2]
   193f0:	b	195c4 <__assert_fail@plt+0x7850>
   193f4:	andeq	r9, r1, ip, lsl #8
   193f8:	andeq	r9, r1, r4, lsr #9
   193fc:	ldrdeq	r9, [r1], -r0
   19400:	andeq	r9, r1, ip, ror r5
   19404:	andeq	r9, r1, r4, asr #11
   19408:	andeq	r9, r1, ip, asr #11
   1940c:	ldr	r3, [sp, #60]	; 0x3c
   19410:	ldrb	r2, [r3]
   19414:	cmp	r2, #42	; 0x2a
   19418:	beq	19450 <__assert_fail@plt+0x76dc>
   1941c:	cmp	r2, #58	; 0x3a
   19420:	beq	19444 <__assert_fail@plt+0x76d0>
   19424:	cmp	r2, #0
   19428:	beq	195c8 <__assert_fail@plt+0x7854>
   1942c:	add	r2, r3, #1
   19430:	str	r2, [sp, #60]	; 0x3c
   19434:	ldrb	r3, [r3]
   19438:	strb	r3, [sp, #56]	; 0x38
   1943c:	mov	r0, #2
   19440:	b	193e4 <__assert_fail@plt+0x7670>
   19444:	add	r3, r3, #1
   19448:	str	r3, [sp, #60]	; 0x3c
   1944c:	b	193e4 <__assert_fail@plt+0x7670>
   19450:	mov	r0, #20
   19454:	bl	2227c <_obstack_memory_used@@Base+0x28a8>
   19458:	mov	r7, r0
   1945c:	ldr	r3, [pc, #-1696]	; 18dc4 <__assert_fail@plt+0x7050>
   19460:	ldr	r2, [r3, #4036]	; 0xfc4
   19464:	str	r2, [r0, #16]
   19468:	str	r0, [r3, #4036]	; 0xfc4
   1946c:	ldr	r3, [sp, #60]	; 0x3c
   19470:	add	r3, r3, #1
   19474:	str	r3, [sp, #60]	; 0x3c
   19478:	ldr	r3, [sp, #64]	; 0x40
   1947c:	str	r3, [r0, #4]
   19480:	mov	r3, r0
   19484:	mov	r2, #1
   19488:	add	r1, sp, #60	; 0x3c
   1948c:	add	r0, sp, #64	; 0x40
   19490:	bl	127b8 <__assert_fail@plt+0xa44>
   19494:	cmp	r0, #0
   19498:	movne	r0, #4
   1949c:	moveq	r0, #6
   194a0:	b	193e4 <__assert_fail@plt+0x7670>
   194a4:	ldr	r3, [sp, #60]	; 0x3c
   194a8:	ldrb	r2, [r3]
   194ac:	cmp	r2, #0
   194b0:	moveq	r0, #6
   194b4:	beq	193e4 <__assert_fail@plt+0x7670>
   194b8:	add	r2, r3, #1
   194bc:	str	r2, [sp, #60]	; 0x3c
   194c0:	ldrb	r3, [r3]
   194c4:	strb	r3, [sp, #57]	; 0x39
   194c8:	mov	r0, #3
   194cc:	b	193e4 <__assert_fail@plt+0x7670>
   194d0:	ldr	r3, [sp, #60]	; 0x3c
   194d4:	add	r2, r3, #1
   194d8:	str	r2, [sp, #60]	; 0x3c
   194dc:	ldrb	r3, [r3]
   194e0:	cmp	r3, #61	; 0x3d
   194e4:	movne	r0, #6
   194e8:	bne	193e4 <__assert_fail@plt+0x7670>
   194ec:	mov	r6, #0
   194f0:	mov	r1, r9
   194f4:	add	r0, sp, #56	; 0x38
   194f8:	bl	118a0 <strcmp@plt>
   194fc:	cmp	r0, #0
   19500:	beq	19518 <__assert_fail@plt+0x77a4>
   19504:	add	r6, r6, #1
   19508:	ldr	r1, [r8, r6, lsl #2]
   1950c:	cmp	r1, #0
   19510:	bne	194f4 <__assert_fail@plt+0x7780>
   19514:	b	19544 <__assert_fail@plt+0x77d0>
   19518:	ldr	r3, [pc, #-1928]	; 18d98 <__assert_fail@plt+0x7024>
   1951c:	add	r3, r3, r6, lsl #3
   19520:	ldr	r2, [sp, #64]	; 0x40
   19524:	str	r2, [r3, #4]
   19528:	mov	r2, #0
   1952c:	add	r1, sp, #60	; 0x3c
   19530:	add	r0, sp, #64	; 0x40
   19534:	bl	127b8 <__assert_fail@plt+0xa44>
   19538:	cmp	r0, #0
   1953c:	movne	r0, #1
   19540:	bne	193e4 <__assert_fail@plt+0x7670>
   19544:	mov	r2, #5
   19548:	ldr	r1, [pc, #-2040]	; 18d58 <__assert_fail@plt+0x6fe4>
   1954c:	mov	r0, #0
   19550:	bl	11984 <dcgettext@plt>
   19554:	mov	r6, r0
   19558:	add	r0, sp, #56	; 0x38
   1955c:	bl	21558 <_obstack_memory_used@@Base+0x1b84>
   19560:	mov	r3, r0
   19564:	mov	r2, r6
   19568:	mov	r1, #0
   1956c:	mov	r0, r1
   19570:	bl	11a8c <error@plt>
   19574:	mov	r0, #6
   19578:	b	193e4 <__assert_fail@plt+0x7670>
   1957c:	ldr	r3, [sp, #60]	; 0x3c
   19580:	add	r2, r3, #1
   19584:	str	r2, [sp, #60]	; 0x3c
   19588:	ldrb	r3, [r3]
   1958c:	cmp	r3, #61	; 0x3d
   19590:	movne	r0, #6
   19594:	bne	193e4 <__assert_fail@plt+0x7670>
   19598:	ldr	r3, [sp, #64]	; 0x40
   1959c:	str	r3, [r7, #12]
   195a0:	add	r3, r7, #8
   195a4:	mov	r2, #0
   195a8:	add	r1, sp, #60	; 0x3c
   195ac:	add	r0, sp, #64	; 0x40
   195b0:	bl	127b8 <__assert_fail@plt+0xa44>
   195b4:	cmp	r0, #0
   195b8:	movne	r0, #1
   195bc:	moveq	r0, #6
   195c0:	b	193e4 <__assert_fail@plt+0x7670>
   195c4:	bl	11d2c <abort@plt>
   195c8:	mov	r0, #5
   195cc:	cmp	r0, #6
   195d0:	beq	1960c <__assert_fail@plt+0x7898>
   195d4:	ldr	r3, [pc, #-2116]	; 18d98 <__assert_fail@plt+0x7024>
   195d8:	ldr	r3, [r3, #56]	; 0x38
   195dc:	cmp	r3, #6
   195e0:	bne	19aa0 <__assert_fail@plt+0x7d2c>
   195e4:	mov	r2, #6
   195e8:	ldr	r1, [pc, #-2196]	; 18d5c <__assert_fail@plt+0x6fe8>
   195ec:	ldr	r3, [pc, #-2140]	; 18d98 <__assert_fail@plt+0x7024>
   195f0:	ldr	r0, [r3, #60]	; 0x3c
   195f4:	bl	11d20 <strncmp@plt>
   195f8:	cmp	r0, #0
   195fc:	moveq	r2, #1
   19600:	ldreq	r3, [pc, #-2116]	; 18dc4 <__assert_fail@plt+0x7050>
   19604:	strbeq	r2, [r3, #4032]	; 0xfc0
   19608:	b	19aa0 <__assert_fail@plt+0x7d2c>
   1960c:	mov	r2, #5
   19610:	ldr	r1, [pc, #-2232]	; 18d60 <__assert_fail@plt+0x6fec>
   19614:	mov	r0, #0
   19618:	bl	11984 <dcgettext@plt>
   1961c:	mov	r2, r0
   19620:	mov	r1, #0
   19624:	mov	r0, r1
   19628:	bl	11a8c <error@plt>
   1962c:	ldr	r3, [pc, #-2164]	; 18dc0 <__assert_fail@plt+0x704c>
   19630:	ldr	r0, [r3, #-3936]	; 0xfffff0a0
   19634:	bl	1b388 <__assert_fail@plt+0x9614>
   19638:	ldr	r3, [pc, #-2172]	; 18dc4 <__assert_fail@plt+0x7050>
   1963c:	ldr	r0, [r3, #4036]	; 0xfc4
   19640:	b	19650 <__assert_fail@plt+0x78dc>
   19644:	ldr	r6, [r0, #16]
   19648:	bl	1b388 <__assert_fail@plt+0x9614>
   1964c:	mov	r0, r6
   19650:	cmp	r0, #0
   19654:	bne	19644 <__assert_fail@plt+0x78d0>
   19658:	mov	r2, #0
   1965c:	ldr	r3, [pc, #-2208]	; 18dc4 <__assert_fail@plt+0x7050>
   19660:	strb	r2, [r3, #4024]	; 0xfb8
   19664:	b	195d4 <__assert_fail@plt+0x7860>
   19668:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   1966c:	ldr	r7, [pc, #-2320]	; 18d64 <__assert_fail@plt+0x6ff0>
   19670:	ldr	r6, [pc, #-2232]	; 18dc0 <__assert_fail@plt+0x704c>
   19674:	ldr	r8, [pc, #-2324]	; 18d68 <__assert_fail@plt+0x6ff4>
   19678:	str	r8, [sp]
   1967c:	mov	r3, r7
   19680:	mov	r2, #0
   19684:	mov	r1, r2
   19688:	sub	r0, r6, #4080	; 0xff0
   1968c:	sub	r0, r0, #4
   19690:	bl	1f7bc <_obstack_begin@@Base>
   19694:	str	r8, [sp]
   19698:	mov	r3, r7
   1969c:	mov	r2, #0
   196a0:	mov	r1, r2
   196a4:	sub	r0, r6, #3984	; 0xf90
   196a8:	sub	r0, r0, #4
   196ac:	bl	1f7bc <_obstack_begin@@Base>
   196b0:	b	19b64 <__assert_fail@plt+0x7df0>
   196b4:	ldr	r0, [pc, #-2384]	; 18d6c <__assert_fail@plt+0x6ff8>
   196b8:	mov	r3, #0
   196bc:	mov	ip, #1
   196c0:	b	196ec <__assert_fail@plt+0x7978>
   196c4:	sub	r2, r3, #97	; 0x61
   196c8:	cmp	r2, #25
   196cc:	bhi	19708 <__assert_fail@plt+0x7994>
   196d0:	mov	r1, ip
   196d4:	ldrb	r2, [r0, #1]
   196d8:	orr	r2, r2, r1
   196dc:	strb	r2, [r0, #1]!
   196e0:	add	r3, r3, #1
   196e4:	cmp	r3, #256	; 0x100
   196e8:	beq	1972c <__assert_fail@plt+0x79b8>
   196ec:	cmp	r3, #90	; 0x5a
   196f0:	bgt	196c4 <__assert_fail@plt+0x7950>
   196f4:	cmp	r3, #65	; 0x41
   196f8:	bge	196d0 <__assert_fail@plt+0x795c>
   196fc:	sub	r2, r3, #48	; 0x30
   19700:	cmp	r2, #9
   19704:	bls	196d0 <__assert_fail@plt+0x795c>
   19708:	sub	r2, r3, #45	; 0x2d
   1970c:	cmp	r3, #126	; 0x7e
   19710:	cmpne	r2, #1
   19714:	movls	r1, ip
   19718:	bls	196d4 <__assert_fail@plt+0x7960>
   1971c:	cmp	r3, #95	; 0x5f
   19720:	movne	r1, #0
   19724:	moveq	r1, #1
   19728:	b	196d4 <__assert_fail@plt+0x7960>
   1972c:	bl	229d0 <_obstack_memory_used@@Base+0x2ffc>
   19730:	ldr	r3, [pc, #-2420]	; 18dc4 <__assert_fail@plt+0x7050>
   19734:	str	r0, [r3, #4028]	; 0xfbc
   19738:	cmp	r0, #0
   1973c:	ldreq	r2, [pc, #-2440]	; 18dbc <__assert_fail@plt+0x7048>
   19740:	streq	r2, [r3, #4028]	; 0xfbc
   19744:	b	19b74 <__assert_fail@plt+0x7e00>
   19748:	ldr	r3, [pc, #-2444]	; 18dc4 <__assert_fail@plt+0x7050>
   1974c:	ldrb	r3, [r3, #4080]	; 0xff0
   19750:	cmp	r3, #0
   19754:	beq	19780 <__assert_fail@plt+0x7a0c>
   19758:	ldr	r3, [pc, #-2468]	; 18dbc <__assert_fail@plt+0x7048>
   1975c:	str	r3, [sp, #4]
   19760:	mov	r3, #1
   19764:	str	r3, [sp]
   19768:	mov	r2, #0
   1976c:	mov	r3, #0
   19770:	mov	r1, #3
   19774:	ldr	r0, [pc, #-2572]	; 18d70 <__assert_fail@plt+0x6ffc>
   19778:	bl	15484 <__assert_fail@plt+0x3710>
   1977c:	b	19bdc <__assert_fail@plt+0x7e68>
   19780:	mov	r2, #1
   19784:	mov	r1, #0
   19788:	ldr	r0, [pc, #-2592]	; 18d70 <__assert_fail@plt+0x6ffc>
   1978c:	bl	12750 <__assert_fail@plt+0x9dc>
   19790:	b	19bdc <__assert_fail@plt+0x7e68>
   19794:	bl	13770 <__assert_fail@plt+0x19fc>
   19798:	ldr	r3, [pc, #-2524]	; 18dc4 <__assert_fail@plt+0x7050>
   1979c:	ldrb	r3, [r3, #4080]	; 0xff0
   197a0:	cmp	r3, #0
   197a4:	beq	197d8 <__assert_fail@plt+0x7a64>
   197a8:	ldr	r3, [pc, #-2540]	; 18dc4 <__assert_fail@plt+0x7050>
   197ac:	ldr	r3, [r3, #8]
   197b0:	cmp	r3, #0
   197b4:	beq	19bec <__assert_fail@plt+0x7e78>
   197b8:	bl	16bd4 <__assert_fail@plt+0x4e60>
   197bc:	ldr	r3, [pc, #-2560]	; 18dc4 <__assert_fail@plt+0x7050>
   197c0:	ldr	r3, [r3, #3104]	; 0xc20
   197c4:	cmp	r3, #0
   197c8:	beq	198e8 <__assert_fail@plt+0x7b74>
   197cc:	mov	r0, #10
   197d0:	bl	140a8 <__assert_fail@plt+0x2334>
   197d4:	b	19bf4 <__assert_fail@plt+0x7e80>
   197d8:	mov	r1, #1
   197dc:	mov	r0, #0
   197e0:	bl	13e84 <__assert_fail@plt+0x2110>
   197e4:	b	197a8 <__assert_fail@plt+0x7a34>
   197e8:	ldr	r3, [pc, #-2604]	; 18dc4 <__assert_fail@plt+0x7050>
   197ec:	ldr	r3, [r3, #3104]	; 0xc20
   197f0:	cmp	r3, #0
   197f4:	beq	198e8 <__assert_fail@plt+0x7b74>
   197f8:	ldr	r3, [r3, #12]
   197fc:	cmp	r3, #0
   19800:	moveq	r2, #0
   19804:	ldreq	r3, [pc, #-2636]	; 18dc0 <__assert_fail@plt+0x704c>
   19808:	strbeq	r2, [r3, #-3995]	; 0xfffff065
   1980c:	b	19bf4 <__assert_fail@plt+0x7e80>
   19810:	ldr	r3, [pc, #-2724]	; 18d74 <__assert_fail@plt+0x7000>
   19814:	ldr	r2, [pc, #-2724]	; 18d78 <__assert_fail@plt+0x7004>
   19818:	ldr	r1, [pc, #-2664]	; 18db8 <__assert_fail@plt+0x7044>
   1981c:	ldr	r0, [pc, #-2728]	; 18d7c <__assert_fail@plt+0x7008>
   19820:	bl	11d74 <__assert_fail@plt>
   19824:	ldr	r3, [pc, #-2688]	; 18dac <__assert_fail@plt+0x7038>
   19828:	ldr	r2, [pc, #-2732]	; 18d84 <__assert_fail@plt+0x7010>
   1982c:	ldr	r1, [pc, #-2684]	; 18db8 <__assert_fail@plt+0x7044>
   19830:	ldr	r0, [pc, #-2744]	; 18d80 <__assert_fail@plt+0x700c>
   19834:	bl	11d74 <__assert_fail@plt>
   19838:	ldrb	r2, [r4, #8]
   1983c:	ldr	r1, [r4, #4]
   19840:	ldr	r0, [r4]
   19844:	bl	16f74 <__assert_fail@plt+0x5200>
   19848:	ldr	r0, [r4]
   1984c:	bl	1b388 <__assert_fail@plt+0x9614>
   19850:	ldr	r0, [r4, #4]
   19854:	bl	1b388 <__assert_fail@plt+0x9614>
   19858:	mov	r0, r4
   1985c:	bl	1b388 <__assert_fail@plt+0x9614>
   19860:	strb	r7, [r6, #-3995]	; 0xfffff065
   19864:	ldr	r4, [r5, #3104]	; 0xc20
   19868:	cmp	r4, #0
   1986c:	beq	198e8 <__assert_fail@plt+0x7b74>
   19870:	ldr	r3, [r4, #12]
   19874:	str	r3, [r5, #3104]	; 0xc20
   19878:	ldr	ip, [r5, #3616]	; 0xe20
   1987c:	cmp	ip, #0
   19880:	beq	19838 <__assert_fail@plt+0x7ac4>
   19884:	ldr	r3, [r4]
   19888:	cmp	r3, #0
   1988c:	bne	19838 <__assert_fail@plt+0x7ac4>
   19890:	ldr	r3, [r6, #-4028]	; 0xfffff044
   19894:	ldr	r2, [r6, #-4032]	; 0xfffff040
   19898:	sub	r2, r3, r2
   1989c:	cmp	r2, #15
   198a0:	bls	19810 <__assert_fail@plt+0x7a9c>
   198a4:	sub	r3, r3, #16
   198a8:	str	r3, [r6, #-4028]	; 0xfffff044
   198ac:	ldm	r3, {r0, r1, r2, r3}
   198b0:	stm	r8, {r0, r1, r2, r3}
   198b4:	mov	r1, r8
   198b8:	mov	r0, ip
   198bc:	bl	1c2f4 <__assert_fail@plt+0xa580>
   198c0:	cmp	r0, #0
   198c4:	beq	19824 <__assert_fail@plt+0x7ab0>
   198c8:	bl	1b388 <__assert_fail@plt+0x9614>
   198cc:	ldr	r0, [r4]
   198d0:	bl	1b388 <__assert_fail@plt+0x9614>
   198d4:	ldr	r0, [r4, #4]
   198d8:	bl	1b388 <__assert_fail@plt+0x9614>
   198dc:	mov	r0, r4
   198e0:	bl	1b388 <__assert_fail@plt+0x9614>
   198e4:	b	19864 <__assert_fail@plt+0x7af0>
   198e8:	ldr	r3, [pc, #-2860]	; 18dc4 <__assert_fail@plt+0x7050>
   198ec:	ldrb	r3, [r3, #4024]	; 0xfb8
   198f0:	cmp	r3, #0
   198f4:	beq	199e8 <__assert_fail@plt+0x7c74>
   198f8:	ldr	r3, [pc, #-2876]	; 18dc4 <__assert_fail@plt+0x7050>
   198fc:	ldrb	r3, [r3, #3893]	; 0xf35
   19900:	cmp	r3, #0
   19904:	beq	199e8 <__assert_fail@plt+0x7c74>
   19908:	ldr	r3, [pc, #-2936]	; 18d98 <__assert_fail@plt+0x7024>
   1990c:	ldr	r3, [r3]
   19910:	cmp	r3, #2
   19914:	beq	19940 <__assert_fail@plt+0x7bcc>
   19918:	bl	144c0 <__assert_fail@plt+0x274c>
   1991c:	ldr	r3, [pc, #-2972]	; 18d88 <__assert_fail@plt+0x7014>
   19920:	ldr	r0, [r3]
   19924:	bl	119e4 <fflush_unlocked@plt>
   19928:	ldr	r6, [pc, #-2980]	; 18d8c <__assert_fail@plt+0x7018>
   1992c:	add	r4, r6, #296	; 0x128
   19930:	add	r6, r6, #344	; 0x158
   19934:	ldr	r7, [pc, #-2988]	; 18d90 <__assert_fail@plt+0x701c>
   19938:	mov	r8, #0
   1993c:	b	1998c <__assert_fail@plt+0x7c18>
   19940:	mov	r2, #2
   19944:	ldr	r1, [pc, #-3000]	; 18d94 <__assert_fail@plt+0x7020>
   19948:	ldr	r3, [pc, #-3000]	; 18d98 <__assert_fail@plt+0x7024>
   1994c:	ldr	r0, [r3, #4]
   19950:	bl	1196c <memcmp@plt>
   19954:	cmp	r0, #0
   19958:	bne	19918 <__assert_fail@plt+0x7ba4>
   1995c:	ldr	r3, [pc, #-3020]	; 18d98 <__assert_fail@plt+0x7024>
   19960:	ldr	r3, [r3, #8]
   19964:	cmp	r3, #1
   19968:	bne	19918 <__assert_fail@plt+0x7ba4>
   1996c:	ldr	r3, [pc, #-3036]	; 18d98 <__assert_fail@plt+0x7024>
   19970:	ldr	r3, [r3, #12]
   19974:	ldrb	r3, [r3]
   19978:	cmp	r3, #109	; 0x6d
   1997c:	bne	19918 <__assert_fail@plt+0x7ba4>
   19980:	b	1991c <__assert_fail@plt+0x7ba8>
   19984:	cmp	r4, r6
   19988:	beq	199b4 <__assert_fail@plt+0x7c40>
   1998c:	ldr	r5, [r4, #4]!
   19990:	mov	r1, r5
   19994:	mov	r0, r7
   19998:	bl	1199c <sigismember@plt>
   1999c:	cmp	r0, #0
   199a0:	beq	19984 <__assert_fail@plt+0x7c10>
   199a4:	mov	r1, r8
   199a8:	mov	r0, r5
   199ac:	bl	11954 <signal@plt>
   199b0:	b	19984 <__assert_fail@plt+0x7c10>
   199b4:	ldr	r3, [pc, #-3064]	; 18dc4 <__assert_fail@plt+0x7050>
   199b8:	ldr	r4, [r3, #4]
   199bc:	cmp	r4, #0
   199c0:	beq	199d8 <__assert_fail@plt+0x7c64>
   199c4:	mov	r5, #19
   199c8:	mov	r0, r5
   199cc:	bl	1187c <raise@plt>
   199d0:	subs	r4, r4, #1
   199d4:	bne	199c8 <__assert_fail@plt+0x7c54>
   199d8:	ldr	r3, [pc, #-3100]	; 18dc4 <__assert_fail@plt+0x7050>
   199dc:	ldr	r0, [r3]
   199e0:	cmp	r0, #0
   199e4:	bne	19a30 <__assert_fail@plt+0x7cbc>
   199e8:	ldr	r3, [pc, #-3116]	; 18dc4 <__assert_fail@plt+0x7050>
   199ec:	ldrb	r3, [r3, #3892]	; 0xf34
   199f0:	cmp	r3, #0
   199f4:	bne	19a38 <__assert_fail@plt+0x7cc4>
   199f8:	ldr	r3, [pc, #-3132]	; 18dc4 <__assert_fail@plt+0x7050>
   199fc:	ldr	r4, [r3, #3616]	; 0xe20
   19a00:	cmp	r4, #0
   19a04:	beq	19a20 <__assert_fail@plt+0x7cac>
   19a08:	mov	r0, r4
   19a0c:	bl	1b904 <__assert_fail@plt+0x9b90>
   19a10:	cmp	r0, #0
   19a14:	bne	19a80 <__assert_fail@plt+0x7d0c>
   19a18:	mov	r0, r4
   19a1c:	bl	1bf00 <__assert_fail@plt+0xa18c>
   19a20:	ldr	r3, [pc, #-3172]	; 18dc4 <__assert_fail@plt+0x7050>
   19a24:	ldr	r0, [r3, #3172]	; 0xc64
   19a28:	add	sp, sp, #84	; 0x54
   19a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a30:	bl	1187c <raise@plt>
   19a34:	b	199e8 <__assert_fail@plt+0x7c74>
   19a38:	ldr	r4, [pc, #-3200]	; 18dc0 <__assert_fail@plt+0x704c>
   19a3c:	sub	r1, r4, #4080	; 0xff0
   19a40:	sub	r1, r1, #4
   19a44:	ldr	r0, [pc, #-3248]	; 18d9c <__assert_fail@plt+0x7028>
   19a48:	bl	14598 <__assert_fail@plt+0x2824>
   19a4c:	sub	r1, r4, #3984	; 0xf90
   19a50:	sub	r1, r1, #4
   19a54:	ldr	r0, [pc, #-3260]	; 18da0 <__assert_fail@plt+0x702c>
   19a58:	bl	14598 <__assert_fail@plt+0x2824>
   19a5c:	ldr	r3, [pc, #-3232]	; 18dc4 <__assert_fail@plt+0x7050>
   19a60:	ldr	r0, [r3, #3176]	; 0xc68
   19a64:	bl	20f94 <_obstack_memory_used@@Base+0x15c0>
   19a68:	ldr	r3, [pc, #-3276]	; 18da4 <__assert_fail@plt+0x7030>
   19a6c:	ldr	r2, [r3, r0, lsl #2]
   19a70:	ldr	r1, [pc, #-3280]	; 18da8 <__assert_fail@plt+0x7034>
   19a74:	mov	r0, #1
   19a78:	bl	11bf4 <__printf_chk@plt>
   19a7c:	b	199f8 <__assert_fail@plt+0x7c84>
   19a80:	ldr	r3, [pc, #-3292]	; 18dac <__assert_fail@plt+0x7038>
   19a84:	ldr	r2, [pc, #-3292]	; 18db0 <__assert_fail@plt+0x703c>
   19a88:	ldr	r1, [pc, #-3288]	; 18db8 <__assert_fail@plt+0x7044>
   19a8c:	ldr	r0, [pc, #-3296]	; 18db4 <__assert_fail@plt+0x7040>
   19a90:	bl	11d74 <__assert_fail@plt>
   19a94:	mov	r2, #0
   19a98:	ldr	r3, [pc, #-3292]	; 18dc4 <__assert_fail@plt+0x7050>
   19a9c:	strb	r2, [r3, #4024]	; 0xfb8
   19aa0:	ldr	r3, [pc, #-3300]	; 18dc4 <__assert_fail@plt+0x7050>
   19aa4:	ldrb	r3, [r3, #4024]	; 0xfb8
   19aa8:	cmp	r3, #0
   19aac:	beq	19b28 <__assert_fail@plt+0x7db4>
   19ab0:	ldr	r3, [pc, #-3316]	; 18dc4 <__assert_fail@plt+0x7050>
   19ab4:	mov	r2, #0
   19ab8:	str	r2, [r3, #3888]	; 0xf30
   19abc:	ldrb	r3, [r3, #3585]	; 0xe01
   19ac0:	cmp	r3, r2
   19ac4:	bne	18ad0 <__assert_fail@plt+0x6d5c>
   19ac8:	mov	r0, #13
   19acc:	bl	1245c <__assert_fail@plt+0x6e8>
   19ad0:	cmp	r0, #0
   19ad4:	bne	19b18 <__assert_fail@plt+0x7da4>
   19ad8:	mov	r0, #14
   19adc:	bl	1245c <__assert_fail@plt+0x6e8>
   19ae0:	cmp	r0, #0
   19ae4:	beq	19af8 <__assert_fail@plt+0x7d84>
   19ae8:	ldr	r3, [pc, #-3372]	; 18dc4 <__assert_fail@plt+0x7050>
   19aec:	ldrb	r3, [r3, #4032]	; 0xfc0
   19af0:	cmp	r3, #0
   19af4:	bne	19b18 <__assert_fail@plt+0x7da4>
   19af8:	mov	r0, #12
   19afc:	bl	1245c <__assert_fail@plt+0x6e8>
   19b00:	cmp	r0, #0
   19b04:	beq	18adc <__assert_fail@plt+0x6d68>
   19b08:	ldr	r3, [pc, #-3404]	; 18dc4 <__assert_fail@plt+0x7050>
   19b0c:	ldr	r3, [r3, #3116]	; 0xc2c
   19b10:	cmp	r3, #0
   19b14:	bne	18adc <__assert_fail@plt+0x6d68>
   19b18:	mov	r2, #1
   19b1c:	ldr	r3, [pc, #-3424]	; 18dc4 <__assert_fail@plt+0x7050>
   19b20:	strb	r2, [r3, #4052]	; 0xfd4
   19b24:	b	18adc <__assert_fail@plt+0x6d68>
   19b28:	ldr	r3, [pc, #-3436]	; 18dc4 <__assert_fail@plt+0x7050>
   19b2c:	ldrb	r3, [r3, #3585]	; 0xe01
   19b30:	cmp	r3, #0
   19b34:	bne	18ad0 <__assert_fail@plt+0x6d5c>
   19b38:	b	18adc <__assert_fail@plt+0x6d68>
   19b3c:	mov	r2, #1
   19b40:	ldr	r3, [pc, #-3460]	; 18dc4 <__assert_fail@plt+0x7050>
   19b44:	strb	r2, [r3, #4045]	; 0xfcd
   19b48:	mov	r3, #0
   19b4c:	ldr	r2, [pc, #-3472]	; 18dc4 <__assert_fail@plt+0x7050>
   19b50:	and	r3, r3, #1
   19b54:	strb	r3, [r2, #4046]	; 0xfce
   19b58:	ldrb	r3, [r2, #3892]	; 0xf34
   19b5c:	cmp	r3, #0
   19b60:	bne	1966c <__assert_fail@plt+0x78f8>
   19b64:	ldr	r3, [pc, #-3496]	; 18dc4 <__assert_fail@plt+0x7050>
   19b68:	ldrb	r3, [r3, #4044]	; 0xfcc
   19b6c:	cmp	r3, #0
   19b70:	bne	196b4 <__assert_fail@plt+0x7940>
   19b74:	ldr	r6, [pc, #-3512]	; 18dc4 <__assert_fail@plt+0x7050>
   19b78:	mov	r0, #100	; 0x64
   19b7c:	str	r0, [r6, #4040]	; 0xfc8
   19b80:	mov	r1, #152	; 0x98
   19b84:	bl	22374 <_obstack_memory_used@@Base+0x29a0>
   19b88:	str	r0, [r6, #16]
   19b8c:	mov	r3, #0
   19b90:	str	r3, [r6, #8]
   19b94:	bl	12e30 <__assert_fail@plt+0x10bc>
   19b98:	sub	r6, fp, r5
   19b9c:	cmp	r6, #0
   19ba0:	ble	19748 <__assert_fail@plt+0x79d4>
   19ba4:	add	r4, r4, r5, lsl #2
   19ba8:	ldr	sl, [pc, #-3572]	; 18dbc <__assert_fail@plt+0x7048>
   19bac:	mov	r9, #1
   19bb0:	mov	r8, #0
   19bb4:	add	r5, r5, #1
   19bb8:	ldr	r0, [r4], #4
   19bbc:	str	sl, [sp, #4]
   19bc0:	str	r9, [sp]
   19bc4:	mov	r2, #0
   19bc8:	mov	r3, #0
   19bcc:	mov	r1, r8
   19bd0:	bl	15484 <__assert_fail@plt+0x3710>
   19bd4:	cmp	fp, r5
   19bd8:	bgt	19bb4 <__assert_fail@plt+0x7e40>
   19bdc:	ldr	r3, [pc, #-3616]	; 18dc4 <__assert_fail@plt+0x7050>
   19be0:	ldr	r3, [r3, #8]
   19be4:	cmp	r3, #0
   19be8:	bne	19794 <__assert_fail@plt+0x7a20>
   19bec:	cmp	r6, #1
   19bf0:	ble	197e8 <__assert_fail@plt+0x7a74>
   19bf4:	ldr	r5, [pc, #-3640]	; 18dc4 <__assert_fail@plt+0x7050>
   19bf8:	ldr	r6, [pc, #-3648]	; 18dc0 <__assert_fail@plt+0x704c>
   19bfc:	mov	r7, #1
   19c00:	add	r8, sp, #64	; 0x40
   19c04:	b	19864 <__assert_fail@plt+0x7af0>
   19c08:	mov	r2, #0
   19c0c:	ldr	r3, [pc, #-3664]	; 18dc4 <__assert_fail@plt+0x7050>
   19c10:	str	r2, [r3, #3124]	; 0xc34
   19c14:	cmp	r7, #0
   19c18:	beq	1910c <__assert_fail@plt+0x7398>
   19c1c:	ldr	r6, [pc, #-3676]	; 18dc8 <__assert_fail@plt+0x7054>
   19c20:	mov	r5, #6
   19c24:	mov	r8, #2
   19c28:	mov	r2, r5
   19c2c:	mov	r1, r6
   19c30:	mov	r0, r7
   19c34:	bl	11d20 <strncmp@plt>
   19c38:	cmp	r0, #0
   19c3c:	bne	19130 <__assert_fail@plt+0x73bc>
   19c40:	mov	r0, r8
   19c44:	bl	1b41c <__assert_fail@plt+0x96a8>
   19c48:	cmp	r0, #0
   19c4c:	beq	19124 <__assert_fail@plt+0x73b0>
   19c50:	add	r7, r7, #6
   19c54:	b	19c28 <__assert_fail@plt+0x7eb4>
   19c58:	push	{r4, r5, r6, r7, r8, lr}
   19c5c:	sub	sp, sp, #128	; 0x80
   19c60:	mov	r8, r0
   19c64:	subs	r7, r1, #0
   19c68:	moveq	r4, #128	; 0x80
   19c6c:	beq	19c7c <__assert_fail@plt+0x7f08>
   19c70:	cmp	r7, #1024	; 0x400
   19c74:	addls	r4, r7, #1
   19c78:	ldrhi	r4, [pc, #260]	; 19d84 <__assert_fail@plt+0x8010>
   19c7c:	cmp	r4, #128	; 0x80
   19c80:	cmpeq	r7, #0
   19c84:	moveq	r6, #0
   19c88:	moveq	r5, sp
   19c8c:	bne	19cd4 <__assert_fail@plt+0x7f60>
   19c90:	mov	r2, r4
   19c94:	mov	r1, r5
   19c98:	mov	r0, r8
   19c9c:	bl	11a08 <readlink@plt>
   19ca0:	cmp	r0, #0
   19ca4:	blt	19cfc <__assert_fail@plt+0x7f88>
   19ca8:	cmp	r4, r0
   19cac:	bhi	19d14 <__assert_fail@plt+0x7fa0>
   19cb0:	mov	r0, r6
   19cb4:	bl	1b388 <__assert_fail@plt+0x9614>
   19cb8:	cmn	r4, #-1073741823	; 0xc0000001
   19cbc:	lslls	r4, r4, #1
   19cc0:	bls	19c7c <__assert_fail@plt+0x7f08>
   19cc4:	cmn	r4, #-2147483646	; 0x80000002
   19cc8:	bhi	19d70 <__assert_fail@plt+0x7ffc>
   19ccc:	mvn	r4, #-2147483648	; 0x80000000
   19cd0:	b	19c7c <__assert_fail@plt+0x7f08>
   19cd4:	mov	r0, r4
   19cd8:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   19cdc:	subs	r5, r0, #0
   19ce0:	movne	r6, r5
   19ce4:	bne	19c90 <__assert_fail@plt+0x7f1c>
   19ce8:	bl	11bb8 <__errno_location@plt>
   19cec:	mov	r3, #12
   19cf0:	str	r3, [r0]
   19cf4:	mov	r6, r5
   19cf8:	b	19d08 <__assert_fail@plt+0x7f94>
   19cfc:	mov	r0, r6
   19d00:	bl	1b388 <__assert_fail@plt+0x9614>
   19d04:	mov	r6, #0
   19d08:	mov	r0, r6
   19d0c:	add	sp, sp, #128	; 0x80
   19d10:	pop	{r4, r5, r6, r7, r8, pc}
   19d14:	mov	r3, #0
   19d18:	strb	r3, [r5, r0]
   19d1c:	cmp	r6, r3
   19d20:	beq	19d44 <__assert_fail@plt+0x7fd0>
   19d24:	add	r1, r0, #1
   19d28:	cmp	r4, r1
   19d2c:	bls	19d08 <__assert_fail@plt+0x7f94>
   19d30:	mov	r0, r6
   19d34:	bl	23164 <_obstack_memory_used@@Base+0x3790>
   19d38:	cmp	r0, #0
   19d3c:	movne	r6, r0
   19d40:	b	19d08 <__assert_fail@plt+0x7f94>
   19d44:	add	r4, r0, #1
   19d48:	mov	r0, r4
   19d4c:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   19d50:	subs	r6, r0, #0
   19d54:	beq	19d08 <__assert_fail@plt+0x7f94>
   19d58:	mov	r2, r4
   19d5c:	mov	r1, r5
   19d60:	mov	r0, r6
   19d64:	bl	11930 <memcpy@plt>
   19d68:	mov	r6, r0
   19d6c:	b	19d08 <__assert_fail@plt+0x7f94>
   19d70:	bl	11bb8 <__errno_location@plt>
   19d74:	mov	r3, #12
   19d78:	str	r3, [r0]
   19d7c:	mov	r6, #0
   19d80:	b	19d08 <__assert_fail@plt+0x7f94>
   19d84:	andeq	r0, r0, r1, lsl #8
   19d88:	push	{r4, lr}
   19d8c:	mov	r0, #1
   19d90:	bl	1764c <__assert_fail@plt+0x58d8>
   19d94:	pop	{r4, pc}
   19d98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d9c:	sub	sp, sp, #12
   19da0:	str	r0, [sp, #4]
   19da4:	mov	r6, r1
   19da8:	mov	fp, r2
   19dac:	mov	r8, r3
   19db0:	bl	11b94 <strlen@plt>
   19db4:	str	r0, [sp]
   19db8:	ldr	r4, [r6]
   19dbc:	cmp	r4, #0
   19dc0:	beq	19e68 <__assert_fail@plt+0x80f4>
   19dc4:	mov	r5, fp
   19dc8:	mov	sl, #0
   19dcc:	mvn	r9, #0
   19dd0:	mov	r7, sl
   19dd4:	b	19df4 <__assert_fail@plt+0x8080>
   19dd8:	mov	r9, r7
   19ddc:	b	19e5c <__assert_fail@plt+0x80e8>
   19de0:	add	r7, r7, #1
   19de4:	ldr	r4, [r6, #4]!
   19de8:	add	r5, r5, r8
   19dec:	cmp	r4, #0
   19df0:	beq	19e54 <__assert_fail@plt+0x80e0>
   19df4:	ldr	r2, [sp]
   19df8:	ldr	r1, [sp, #4]
   19dfc:	mov	r0, r4
   19e00:	bl	11d20 <strncmp@plt>
   19e04:	cmp	r0, #0
   19e08:	bne	19de0 <__assert_fail@plt+0x806c>
   19e0c:	mov	r0, r4
   19e10:	bl	11b94 <strlen@plt>
   19e14:	ldr	r3, [sp]
   19e18:	cmp	r3, r0
   19e1c:	beq	19dd8 <__assert_fail@plt+0x8064>
   19e20:	cmn	r9, #1
   19e24:	moveq	r9, r7
   19e28:	beq	19de0 <__assert_fail@plt+0x806c>
   19e2c:	cmp	fp, #0
   19e30:	moveq	sl, #1
   19e34:	beq	19de0 <__assert_fail@plt+0x806c>
   19e38:	mov	r2, r8
   19e3c:	mov	r1, r5
   19e40:	mla	r0, r8, r9, fp
   19e44:	bl	1196c <memcmp@plt>
   19e48:	cmp	r0, #0
   19e4c:	movne	sl, #1
   19e50:	b	19de0 <__assert_fail@plt+0x806c>
   19e54:	cmp	sl, #0
   19e58:	mvnne	r9, #1
   19e5c:	mov	r0, r9
   19e60:	add	sp, sp, #12
   19e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e68:	mvn	r9, #0
   19e6c:	b	19e5c <__assert_fail@plt+0x80e8>
   19e70:	push	{r4, r5, r6, lr}
   19e74:	mov	r6, r0
   19e78:	ldr	r0, [r1]
   19e7c:	cmp	r0, #0
   19e80:	beq	19ebc <__assert_fail@plt+0x8148>
   19e84:	mov	r4, r1
   19e88:	mov	r5, #0
   19e8c:	mov	r1, r6
   19e90:	bl	118a0 <strcmp@plt>
   19e94:	cmp	r0, #0
   19e98:	beq	19eb4 <__assert_fail@plt+0x8140>
   19e9c:	add	r5, r5, #1
   19ea0:	ldr	r0, [r4, #4]!
   19ea4:	cmp	r0, #0
   19ea8:	bne	19e8c <__assert_fail@plt+0x8118>
   19eac:	mvn	r0, #0
   19eb0:	pop	{r4, r5, r6, pc}
   19eb4:	mov	r0, r5
   19eb8:	pop	{r4, r5, r6, pc}
   19ebc:	mvn	r0, #0
   19ec0:	pop	{r4, r5, r6, pc}
   19ec4:	push	{r4, r5, r6, lr}
   19ec8:	sub	sp, sp, #8
   19ecc:	mov	r5, r0
   19ed0:	mov	r4, r1
   19ed4:	cmn	r2, #1
   19ed8:	mov	r2, #5
   19edc:	ldreq	r1, [pc, #76]	; 19f30 <__assert_fail@plt+0x81bc>
   19ee0:	ldrne	r1, [pc, #76]	; 19f34 <__assert_fail@plt+0x81c0>
   19ee4:	mov	r0, #0
   19ee8:	bl	11984 <dcgettext@plt>
   19eec:	mov	r6, r0
   19ef0:	mov	r2, r4
   19ef4:	mov	r1, #8
   19ef8:	mov	r0, #0
   19efc:	bl	212b8 <_obstack_memory_used@@Base+0x18e4>
   19f00:	mov	r4, r0
   19f04:	mov	r1, r5
   19f08:	mov	r0, #1
   19f0c:	bl	21548 <_obstack_memory_used@@Base+0x1b74>
   19f10:	str	r0, [sp]
   19f14:	mov	r3, r4
   19f18:	mov	r2, r6
   19f1c:	mov	r1, #0
   19f20:	mov	r0, r1
   19f24:	bl	11a8c <error@plt>
   19f28:	add	sp, sp, #8
   19f2c:	pop	{r4, r5, r6, pc}
   19f30:	andeq	r8, r2, r8
   19f34:	andeq	r8, r2, r4, lsr #32
   19f38:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f3c:	mov	r7, r0
   19f40:	mov	r4, r1
   19f44:	mov	r8, r2
   19f48:	mov	r2, #5
   19f4c:	ldr	r1, [pc, #224]	; 1a034 <__assert_fail@plt+0x82c0>
   19f50:	mov	r0, #0
   19f54:	bl	11984 <dcgettext@plt>
   19f58:	ldr	r3, [pc, #216]	; 1a038 <__assert_fail@plt+0x82c4>
   19f5c:	ldr	r1, [r3]
   19f60:	bl	11864 <fputs_unlocked@plt>
   19f64:	ldr	r5, [r7]
   19f68:	cmp	r5, #0
   19f6c:	beq	19ffc <__assert_fail@plt+0x8288>
   19f70:	mov	r9, #0
   19f74:	mov	r6, r9
   19f78:	ldr	sl, [pc, #184]	; 1a038 <__assert_fail@plt+0x82c4>
   19f7c:	b	19fb8 <__assert_fail@plt+0x8244>
   19f80:	ldr	r9, [sl]
   19f84:	mov	r0, r5
   19f88:	bl	21558 <_obstack_memory_used@@Base+0x1b84>
   19f8c:	mov	r3, r0
   19f90:	ldr	r2, [pc, #164]	; 1a03c <__assert_fail@plt+0x82c8>
   19f94:	mov	r1, #1
   19f98:	mov	r0, r9
   19f9c:	bl	11c18 <__fprintf_chk@plt>
   19fa0:	mov	r9, r4
   19fa4:	add	r6, r6, #1
   19fa8:	ldr	r5, [r7, #4]!
   19fac:	add	r4, r4, r8
   19fb0:	cmp	r5, #0
   19fb4:	beq	19ffc <__assert_fail@plt+0x8288>
   19fb8:	cmp	r6, #0
   19fbc:	beq	19f80 <__assert_fail@plt+0x820c>
   19fc0:	mov	r2, r8
   19fc4:	mov	r1, r4
   19fc8:	mov	r0, r9
   19fcc:	bl	1196c <memcmp@plt>
   19fd0:	cmp	r0, #0
   19fd4:	bne	19f80 <__assert_fail@plt+0x820c>
   19fd8:	ldr	fp, [sl]
   19fdc:	mov	r0, r5
   19fe0:	bl	21558 <_obstack_memory_used@@Base+0x1b84>
   19fe4:	mov	r3, r0
   19fe8:	ldr	r2, [pc, #80]	; 1a040 <__assert_fail@plt+0x82cc>
   19fec:	mov	r1, #1
   19ff0:	mov	r0, fp
   19ff4:	bl	11c18 <__fprintf_chk@plt>
   19ff8:	b	19fa4 <__assert_fail@plt+0x8230>
   19ffc:	ldr	r3, [pc, #52]	; 1a038 <__assert_fail@plt+0x82c4>
   1a000:	ldr	r0, [r3]
   1a004:	ldr	r3, [r0, #20]
   1a008:	ldr	r2, [r0, #24]
   1a00c:	cmp	r3, r2
   1a010:	bcs	1a028 <__assert_fail@plt+0x82b4>
   1a014:	add	r2, r3, #1
   1a018:	str	r2, [r0, #20]
   1a01c:	mov	r2, #10
   1a020:	strb	r2, [r3]
   1a024:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a028:	mov	r1, #10
   1a02c:	bl	11c48 <__overflow@plt>
   1a030:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a034:	andeq	r8, r2, r4, asr #32
   1a038:	andeq	r9, r3, r0, lsr #6
   1a03c:	andeq	r8, r2, ip, asr r0
   1a040:	andeq	r8, r2, r4, rrx
   1a044:	push	{r4, r5, r6, r7, r8, lr}
   1a048:	mov	r7, r0
   1a04c:	mov	r5, r1
   1a050:	mov	r4, r2
   1a054:	mov	r6, r3
   1a058:	ldrb	r3, [sp, #32]
   1a05c:	cmp	r3, #0
   1a060:	beq	1a0b0 <__assert_fail@plt+0x833c>
   1a064:	ldr	r3, [sp, #24]
   1a068:	mov	r2, r6
   1a06c:	mov	r1, r4
   1a070:	mov	r0, r5
   1a074:	bl	19d98 <__assert_fail@plt+0x8024>
   1a078:	cmp	r0, #0
   1a07c:	popge	{r4, r5, r6, r7, r8, pc}
   1a080:	mov	r2, r0
   1a084:	mov	r1, r5
   1a088:	mov	r0, r7
   1a08c:	bl	19ec4 <__assert_fail@plt+0x8150>
   1a090:	ldr	r2, [sp, #24]
   1a094:	mov	r1, r6
   1a098:	mov	r0, r4
   1a09c:	bl	19f38 <__assert_fail@plt+0x81c4>
   1a0a0:	ldr	r3, [sp, #28]
   1a0a4:	blx	r3
   1a0a8:	mvn	r0, #0
   1a0ac:	pop	{r4, r5, r6, r7, r8, pc}
   1a0b0:	mov	r1, r2
   1a0b4:	mov	r0, r5
   1a0b8:	bl	19e70 <__assert_fail@plt+0x80fc>
   1a0bc:	b	1a078 <__assert_fail@plt+0x8304>
   1a0c0:	push	{r4, r5, r6, r7, r8, lr}
   1a0c4:	ldr	r6, [r1]
   1a0c8:	cmp	r6, #0
   1a0cc:	beq	1a110 <__assert_fail@plt+0x839c>
   1a0d0:	mov	r7, r3
   1a0d4:	mov	r8, r0
   1a0d8:	mov	r4, r2
   1a0dc:	mov	r5, r1
   1a0e0:	mov	r2, r7
   1a0e4:	mov	r1, r4
   1a0e8:	mov	r0, r8
   1a0ec:	bl	1196c <memcmp@plt>
   1a0f0:	cmp	r0, #0
   1a0f4:	beq	1a108 <__assert_fail@plt+0x8394>
   1a0f8:	ldr	r6, [r5, #4]!
   1a0fc:	add	r4, r4, r7
   1a100:	cmp	r6, #0
   1a104:	bne	1a0e0 <__assert_fail@plt+0x836c>
   1a108:	mov	r0, r6
   1a10c:	pop	{r4, r5, r6, r7, r8, pc}
   1a110:	mov	r6, #0
   1a114:	b	1a108 <__assert_fail@plt+0x8394>
   1a118:	ldrb	r3, [r0]
   1a11c:	cmp	r3, #47	; 0x2f
   1a120:	bne	1a130 <__assert_fail@plt+0x83bc>
   1a124:	ldrb	r3, [r0, #1]!
   1a128:	cmp	r3, #47	; 0x2f
   1a12c:	beq	1a124 <__assert_fail@plt+0x83b0>
   1a130:	ldrb	r2, [r0]
   1a134:	cmp	r2, #0
   1a138:	bxeq	lr
   1a13c:	push	{lr}		; (str lr, [sp, #-4]!)
   1a140:	mov	r1, r0
   1a144:	mov	r3, #0
   1a148:	mov	lr, #1
   1a14c:	mov	ip, r3
   1a150:	b	1a160 <__assert_fail@plt+0x83ec>
   1a154:	ldrb	r2, [r1, #1]!
   1a158:	cmp	r2, #0
   1a15c:	beq	1a17c <__assert_fail@plt+0x8408>
   1a160:	cmp	r2, #47	; 0x2f
   1a164:	moveq	r3, lr
   1a168:	beq	1a154 <__assert_fail@plt+0x83e0>
   1a16c:	cmp	r3, #0
   1a170:	movne	r0, r1
   1a174:	movne	r3, ip
   1a178:	b	1a154 <__assert_fail@plt+0x83e0>
   1a17c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a180:	push	{r4, lr}
   1a184:	mov	r4, r0
   1a188:	bl	11b94 <strlen@plt>
   1a18c:	cmp	r0, #1
   1a190:	popls	{r4, pc}
   1a194:	sub	r3, r0, #1
   1a198:	add	r2, r4, r3
   1a19c:	ldrb	r1, [r4, r3]
   1a1a0:	cmp	r1, #47	; 0x2f
   1a1a4:	popne	{r4, pc}
   1a1a8:	cmp	r3, #1
   1a1ac:	beq	1a1d0 <__assert_fail@plt+0x845c>
   1a1b0:	sub	r0, r3, #1
   1a1b4:	ldrb	r1, [r2, #-1]!
   1a1b8:	cmp	r1, #47	; 0x2f
   1a1bc:	beq	1a1c8 <__assert_fail@plt+0x8454>
   1a1c0:	mov	r0, r3
   1a1c4:	pop	{r4, pc}
   1a1c8:	mov	r3, r0
   1a1cc:	b	1a1a8 <__assert_fail@plt+0x8434>
   1a1d0:	mov	r0, #1
   1a1d4:	pop	{r4, pc}
   1a1d8:	cmp	r2, #0
   1a1dc:	cmpne	r0, r1
   1a1e0:	beq	1a250 <__assert_fail@plt+0x84dc>
   1a1e4:	push	{r4, r5, lr}
   1a1e8:	mov	ip, r2
   1a1ec:	sub	r4, r0, #1
   1a1f0:	sub	r1, r1, #1
   1a1f4:	ldrb	r3, [r4, #1]!
   1a1f8:	sub	r2, r3, #65	; 0x41
   1a1fc:	cmp	r2, #25
   1a200:	addls	r3, r3, #32
   1a204:	uxtb	lr, r3
   1a208:	ldrb	r0, [r1, #1]!
   1a20c:	sub	r2, r0, #65	; 0x41
   1a210:	cmp	r2, #25
   1a214:	addls	r0, r0, #32
   1a218:	uxtb	r5, r0
   1a21c:	subs	ip, ip, #1
   1a220:	moveq	r2, #1
   1a224:	movne	r2, #0
   1a228:	cmp	lr, #0
   1a22c:	orreq	r2, r2, #1
   1a230:	cmp	r2, #0
   1a234:	bne	1a240 <__assert_fail@plt+0x84cc>
   1a238:	cmp	lr, r5
   1a23c:	beq	1a1f4 <__assert_fail@plt+0x8480>
   1a240:	uxtb	r3, r3
   1a244:	uxtb	r0, r0
   1a248:	sub	r0, r3, r0
   1a24c:	pop	{r4, r5, pc}
   1a250:	mov	r0, #0
   1a254:	bx	lr
   1a258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a25c:	sub	sp, sp, #3232	; 0xca0
   1a260:	sub	sp, sp, #12
   1a264:	and	fp, r1, #3
   1a268:	sub	r3, fp, #1
   1a26c:	tst	r3, fp
   1a270:	bne	1a314 <__assert_fail@plt+0x85a0>
   1a274:	mov	r4, r0
   1a278:	mov	r6, r1
   1a27c:	cmp	r0, #0
   1a280:	beq	1a328 <__assert_fail@plt+0x85b4>
   1a284:	ldrb	r1, [r0]
   1a288:	cmp	r1, #0
   1a28c:	beq	1a33c <__assert_fail@plt+0x85c8>
   1a290:	add	r3, sp, #152	; 0x98
   1a294:	str	r3, [sp, #144]	; 0x90
   1a298:	mov	r3, #1024	; 0x400
   1a29c:	str	r3, [sp, #148]	; 0x94
   1a2a0:	add	r2, sp, #1184	; 0x4a0
   1a2a4:	str	r2, [sp, #1176]	; 0x498
   1a2a8:	str	r3, [sp, #1180]	; 0x49c
   1a2ac:	add	r2, sp, #2208	; 0x8a0
   1a2b0:	add	r2, r2, #8
   1a2b4:	str	r2, [sp, #2208]	; 0x8a0
   1a2b8:	str	r3, [sp, #2212]	; 0x8a4
   1a2bc:	cmp	r1, #47	; 0x2f
   1a2c0:	beq	1a368 <__assert_fail@plt+0x85f4>
   1a2c4:	add	r5, sp, #2208	; 0x8a0
   1a2c8:	add	r5, r5, #8
   1a2cc:	sub	r7, r5, #8
   1a2d0:	ldr	r1, [sp, #2212]	; 0x8a4
   1a2d4:	mov	r0, r5
   1a2d8:	bl	11b64 <getcwd@plt>
   1a2dc:	cmp	r0, #0
   1a2e0:	bne	1a354 <__assert_fail@plt+0x85e0>
   1a2e4:	bl	11bb8 <__errno_location@plt>
   1a2e8:	ldr	r3, [r0]
   1a2ec:	cmp	r3, #12
   1a2f0:	beq	1a350 <__assert_fail@plt+0x85dc>
   1a2f4:	cmp	r3, #34	; 0x22
   1a2f8:	bne	1a950 <__assert_fail@plt+0x8bdc>
   1a2fc:	mov	r0, r7
   1a300:	bl	215b4 <_obstack_memory_used@@Base+0x1be0>
   1a304:	cmp	r0, #0
   1a308:	beq	1a350 <__assert_fail@plt+0x85dc>
   1a30c:	ldr	r5, [sp, #2208]	; 0x8a0
   1a310:	b	1a2d0 <__assert_fail@plt+0x855c>
   1a314:	bl	11bb8 <__errno_location@plt>
   1a318:	mov	r3, #22
   1a31c:	str	r3, [r0]
   1a320:	mov	r0, #0
   1a324:	b	1a9b0 <__assert_fail@plt+0x8c3c>
   1a328:	bl	11bb8 <__errno_location@plt>
   1a32c:	mov	r3, #22
   1a330:	str	r3, [r0]
   1a334:	mov	r0, #0
   1a338:	b	1a9b0 <__assert_fail@plt+0x8c3c>
   1a33c:	bl	11bb8 <__errno_location@plt>
   1a340:	mov	r3, #2
   1a344:	str	r3, [r0]
   1a348:	mov	r0, #0
   1a34c:	b	1a9b0 <__assert_fail@plt+0x8c3c>
   1a350:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   1a354:	mov	r1, #0
   1a358:	mov	r0, r5
   1a35c:	bl	119d8 <rawmemchr@plt>
   1a360:	mov	r1, r0
   1a364:	b	1a380 <__assert_fail@plt+0x860c>
   1a368:	add	r1, sp, #3232	; 0xca0
   1a36c:	add	r1, r1, #8
   1a370:	mov	r3, #47	; 0x2f
   1a374:	strb	r3, [r1, #-1024]!	; 0xfffffc00
   1a378:	mov	r5, r1
   1a37c:	add	r1, r1, #1
   1a380:	and	r3, r6, #4
   1a384:	str	r3, [sp, #12]
   1a388:	mov	r3, #0
   1a38c:	str	r3, [sp, #28]
   1a390:	str	r3, [sp, #20]
   1a394:	str	r3, [sp, #24]
   1a398:	ldrb	r2, [r4]
   1a39c:	cmp	r2, #0
   1a3a0:	beq	1a8dc <__assert_fail@plt+0x8b68>
   1a3a4:	cmp	r2, #47	; 0x2f
   1a3a8:	bne	1a3c8 <__assert_fail@plt+0x8654>
   1a3ac:	ldrb	r2, [r4, #1]!
   1a3b0:	cmp	r2, #47	; 0x2f
   1a3b4:	beq	1a3ac <__assert_fail@plt+0x8638>
   1a3b8:	mov	r3, r2
   1a3bc:	cmp	r2, #47	; 0x2f
   1a3c0:	cmpne	r2, #0
   1a3c4:	beq	1a4d8 <__assert_fail@plt+0x8764>
   1a3c8:	mov	r6, r4
   1a3cc:	ldrb	r3, [r6, #1]!
   1a3d0:	cmp	r3, #0
   1a3d4:	cmpne	r3, #47	; 0x2f
   1a3d8:	bne	1a3cc <__assert_fail@plt+0x8658>
   1a3dc:	str	r6, [sp, #16]
   1a3e0:	subs	r8, r6, r4
   1a3e4:	beq	1a8dc <__assert_fail@plt+0x8b68>
   1a3e8:	cmp	r2, #46	; 0x2e
   1a3ec:	movne	r3, #0
   1a3f0:	moveq	r3, #1
   1a3f4:	cmp	r8, #1
   1a3f8:	cmpeq	r2, #46	; 0x2e
   1a3fc:	beq	1a8d4 <__assert_fail@plt+0x8b60>
   1a400:	cmp	r8, #2
   1a404:	movne	r3, #0
   1a408:	andeq	r3, r3, #1
   1a40c:	cmp	r3, #0
   1a410:	bne	1a4e0 <__assert_fail@plt+0x876c>
   1a414:	ldrb	r3, [r1, #-1]
   1a418:	cmp	r3, #47	; 0x2f
   1a41c:	addne	r0, r1, #1
   1a420:	movne	r3, #47	; 0x2f
   1a424:	strbne	r3, [r1]
   1a428:	moveq	r0, r1
   1a42c:	mov	r2, r0
   1a430:	add	r9, r8, #2
   1a434:	ldr	r3, [sp, #2212]	; 0x8a4
   1a438:	add	r3, r5, r3
   1a43c:	sub	r3, r3, r0
   1a440:	cmp	r3, r9
   1a444:	bcs	1a478 <__assert_fail@plt+0x8704>
   1a448:	sub	r7, r2, r5
   1a44c:	add	r0, sp, #2208	; 0x8a0
   1a450:	bl	21624 <_obstack_memory_used@@Base+0x1c50>
   1a454:	cmp	r0, #0
   1a458:	beq	1a538 <__assert_fail@plt+0x87c4>
   1a45c:	ldr	r5, [sp, #2208]	; 0x8a0
   1a460:	add	r0, r5, r7
   1a464:	mov	r2, r0
   1a468:	ldr	r3, [sp, #2212]	; 0x8a4
   1a46c:	sub	r3, r3, r7
   1a470:	cmp	r3, r9
   1a474:	bcc	1a448 <__assert_fail@plt+0x86d4>
   1a478:	mov	r2, r8
   1a47c:	mov	r1, r4
   1a480:	bl	11b40 <mempcpy@plt>
   1a484:	str	r0, [sp, #32]
   1a488:	mov	r3, #0
   1a48c:	strb	r3, [r0]
   1a490:	ldr	r3, [sp, #12]
   1a494:	cmp	r3, #0
   1a498:	bne	1a758 <__assert_fail@plt+0x89e4>
   1a49c:	ldr	sl, [sp, #1176]	; 0x498
   1a4a0:	ldr	r7, [sp, #1180]	; 0x49c
   1a4a4:	sub	r7, r7, #1
   1a4a8:	mov	r2, r7
   1a4ac:	mov	r1, sl
   1a4b0:	mov	r0, r5
   1a4b4:	bl	11a08 <readlink@plt>
   1a4b8:	cmp	r7, r0
   1a4bc:	bgt	1a53c <__assert_fail@plt+0x87c8>
   1a4c0:	add	r0, sp, #1168	; 0x490
   1a4c4:	add	r0, r0, #8
   1a4c8:	bl	215b4 <_obstack_memory_used@@Base+0x1be0>
   1a4cc:	cmp	r0, #0
   1a4d0:	bne	1a49c <__assert_fail@plt+0x8728>
   1a4d4:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   1a4d8:	mov	r6, r4
   1a4dc:	b	1a3dc <__assert_fail@plt+0x8668>
   1a4e0:	ldrb	r3, [r4, #1]
   1a4e4:	cmp	r3, #46	; 0x2e
   1a4e8:	bne	1a414 <__assert_fail@plt+0x86a0>
   1a4ec:	add	r3, r5, #1
   1a4f0:	cmp	r1, r3
   1a4f4:	bls	1a8d4 <__assert_fail@plt+0x8b60>
   1a4f8:	sub	r3, r1, #1
   1a4fc:	cmp	r5, r3
   1a500:	bcs	1a884 <__assert_fail@plt+0x8b10>
   1a504:	ldrb	r2, [r1, #-2]
   1a508:	cmp	r2, #47	; 0x2f
   1a50c:	moveq	r1, r3
   1a510:	beq	1a8d4 <__assert_fail@plt+0x8b60>
   1a514:	sub	r3, r1, #2
   1a518:	mov	r2, r5
   1a51c:	mov	r1, r3
   1a520:	cmp	r2, r3
   1a524:	beq	1a8d4 <__assert_fail@plt+0x8b60>
   1a528:	ldrb	r0, [r3, #-1]!
   1a52c:	cmp	r0, #47	; 0x2f
   1a530:	bne	1a51c <__assert_fail@plt+0x87a8>
   1a534:	b	1a8d4 <__assert_fail@plt+0x8b60>
   1a538:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   1a53c:	mov	r9, r0
   1a540:	cmp	r0, #0
   1a544:	blt	1a758 <__assert_fail@plt+0x89e4>
   1a548:	ldr	r3, [sp, #24]
   1a54c:	cmp	r3, #19
   1a550:	addle	r3, r3, #1
   1a554:	strle	r3, [sp, #24]
   1a558:	ble	1a62c <__assert_fail@plt+0x88b8>
   1a55c:	ldrb	r3, [r4]
   1a560:	cmp	r3, #0
   1a564:	beq	1a62c <__assert_fail@plt+0x88b8>
   1a568:	rsb	r8, r8, #0
   1a56c:	mov	r3, #0
   1a570:	ldr	r7, [sp, #32]
   1a574:	strb	r3, [r7, r8]
   1a578:	ldrb	r1, [r5]
   1a57c:	add	r2, sp, #40	; 0x28
   1a580:	ldr	r3, [pc, #1108]	; 1a9dc <__assert_fail@plt+0x8c68>
   1a584:	cmp	r1, #0
   1a588:	movne	r3, r5
   1a58c:	mov	r1, r3
   1a590:	mov	r0, #3
   1a594:	bl	11cfc <__xstat64@plt>
   1a598:	cmp	r0, #0
   1a59c:	bne	1a5e0 <__assert_fail@plt+0x886c>
   1a5a0:	ldrb	r3, [r4]
   1a5a4:	strb	r3, [r7, r8]
   1a5a8:	ldr	r3, [sp, #28]
   1a5ac:	cmp	r3, #0
   1a5b0:	beq	1a5f0 <__assert_fail@plt+0x887c>
   1a5b4:	add	r2, sp, #40	; 0x28
   1a5b8:	mov	r1, r4
   1a5bc:	ldr	r0, [sp, #28]
   1a5c0:	bl	1ac48 <__assert_fail@plt+0x8ed4>
   1a5c4:	cmp	r0, #0
   1a5c8:	beq	1a61c <__assert_fail@plt+0x88a8>
   1a5cc:	cmp	fp, #2
   1a5d0:	beq	1a730 <__assert_fail@plt+0x89bc>
   1a5d4:	bl	11bb8 <__errno_location@plt>
   1a5d8:	mov	r3, #40	; 0x28
   1a5dc:	str	r3, [r0]
   1a5e0:	mov	r6, r5
   1a5e4:	ldr	r5, [sp, #32]
   1a5e8:	mov	r4, #1
   1a5ec:	b	1a93c <__assert_fail@plt+0x8bc8>
   1a5f0:	ldr	r3, [pc, #1000]	; 1a9e0 <__assert_fail@plt+0x8c6c>
   1a5f4:	str	r3, [sp]
   1a5f8:	ldr	r3, [pc, #996]	; 1a9e4 <__assert_fail@plt+0x8c70>
   1a5fc:	ldr	r2, [pc, #996]	; 1a9e8 <__assert_fail@plt+0x8c74>
   1a600:	mov	r1, #0
   1a604:	mov	r0, #7
   1a608:	bl	1bd70 <__assert_fail@plt+0x9ffc>
   1a60c:	subs	r3, r0, #0
   1a610:	str	r3, [sp, #28]
   1a614:	bne	1a5b4 <__assert_fail@plt+0x8840>
   1a618:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   1a61c:	add	r2, sp, #40	; 0x28
   1a620:	mov	r1, r4
   1a624:	ldr	r0, [sp, #28]
   1a628:	bl	1abe0 <__assert_fail@plt+0x8e6c>
   1a62c:	mov	r3, #0
   1a630:	strb	r3, [sl, r9]
   1a634:	ldr	r8, [sp, #144]	; 0x90
   1a638:	ldr	r3, [sp, #20]
   1a63c:	cmp	r3, #0
   1a640:	ldrne	r3, [sp, #16]
   1a644:	subne	r3, r3, r8
   1a648:	moveq	r3, #0
   1a64c:	str	r3, [sp, #36]	; 0x24
   1a650:	mov	r0, r6
   1a654:	bl	11b94 <strlen@plt>
   1a658:	mov	r7, r0
   1a65c:	adds	r4, r9, r0
   1a660:	bcs	1a738 <__assert_fail@plt+0x89c4>
   1a664:	ldr	r3, [sp, #148]	; 0x94
   1a668:	cmp	r3, r4
   1a66c:	addls	r3, sp, #152	; 0x98
   1a670:	addls	r3, sp, #144	; 0x90
   1a674:	strls	r3, [sp, #16]
   1a678:	bhi	1a69c <__assert_fail@plt+0x8928>
   1a67c:	ldr	r0, [sp, #16]
   1a680:	bl	21624 <_obstack_memory_used@@Base+0x1c50>
   1a684:	cmp	r0, #0
   1a688:	beq	1a73c <__assert_fail@plt+0x89c8>
   1a68c:	ldr	r3, [sp, #148]	; 0x94
   1a690:	cmp	r4, r3
   1a694:	bcs	1a67c <__assert_fail@plt+0x8908>
   1a698:	ldr	r8, [sp, #144]	; 0x90
   1a69c:	ldr	r3, [sp, #20]
   1a6a0:	cmp	r3, #0
   1a6a4:	ldrne	r3, [sp, #36]	; 0x24
   1a6a8:	addne	r6, r8, r3
   1a6ac:	add	r2, r7, #1
   1a6b0:	mov	r1, r6
   1a6b4:	add	r0, r8, r9
   1a6b8:	bl	118f4 <memmove@plt>
   1a6bc:	mov	r2, r9
   1a6c0:	mov	r1, sl
   1a6c4:	mov	r0, r8
   1a6c8:	bl	11930 <memcpy@plt>
   1a6cc:	ldrb	r3, [sl]
   1a6d0:	cmp	r3, #47	; 0x2f
   1a6d4:	beq	1a740 <__assert_fail@plt+0x89cc>
   1a6d8:	add	r3, r5, #1
   1a6dc:	ldr	r2, [sp, #32]
   1a6e0:	cmp	r2, r3
   1a6e4:	bls	1a88c <__assert_fail@plt+0x8b18>
   1a6e8:	sub	r1, r2, #1
   1a6ec:	cmp	r1, r5
   1a6f0:	bls	1a8a0 <__assert_fail@plt+0x8b2c>
   1a6f4:	ldrb	r3, [r2, #-2]
   1a6f8:	cmp	r3, #47	; 0x2f
   1a6fc:	beq	1a8b0 <__assert_fail@plt+0x8b3c>
   1a700:	sub	r3, r2, #2
   1a704:	mov	ip, r5
   1a708:	mov	r1, r3
   1a70c:	cmp	r3, ip
   1a710:	beq	1a8c0 <__assert_fail@plt+0x8b4c>
   1a714:	ldrb	r2, [r3, #-1]!
   1a718:	cmp	r2, #47	; 0x2f
   1a71c:	bne	1a708 <__assert_fail@plt+0x8994>
   1a720:	mov	r6, r0
   1a724:	mov	r3, #1
   1a728:	str	r3, [sp, #20]
   1a72c:	b	1a8d4 <__assert_fail@plt+0x8b60>
   1a730:	ldr	r1, [sp, #32]
   1a734:	b	1a8d4 <__assert_fail@plt+0x8b60>
   1a738:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   1a73c:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   1a740:	add	r1, r5, #1
   1a744:	strb	r3, [r5]
   1a748:	mov	r6, r0
   1a74c:	mov	r3, #1
   1a750:	str	r3, [sp, #20]
   1a754:	b	1a8d4 <__assert_fail@plt+0x8b60>
   1a758:	cmp	fp, #2
   1a75c:	ldreq	r1, [sp, #32]
   1a760:	beq	1a8d4 <__assert_fail@plt+0x8b60>
   1a764:	mov	r3, r6
   1a768:	ldrb	r2, [r3]
   1a76c:	cmp	r2, #47	; 0x2f
   1a770:	beq	1a7d4 <__assert_fail@plt+0x8a60>
   1a774:	ldr	r3, [sp, #12]
   1a778:	cmp	r3, #0
   1a77c:	bne	1a84c <__assert_fail@plt+0x8ad8>
   1a780:	bl	11bb8 <__errno_location@plt>
   1a784:	ldr	r4, [r0]
   1a788:	subs	r4, r4, #22
   1a78c:	movne	r4, #1
   1a790:	cmp	r4, #0
   1a794:	beq	1a8d0 <__assert_fail@plt+0x8b5c>
   1a798:	cmp	fp, #1
   1a79c:	bne	1a90c <__assert_fail@plt+0x8b98>
   1a7a0:	bl	11bb8 <__errno_location@plt>
   1a7a4:	ldr	r3, [r0]
   1a7a8:	cmp	r3, #2
   1a7ac:	bne	1a918 <__assert_fail@plt+0x8ba4>
   1a7b0:	ldr	r1, [pc, #564]	; 1a9ec <__assert_fail@plt+0x8c78>
   1a7b4:	mov	r0, r6
   1a7b8:	bl	11d68 <strspn@plt>
   1a7bc:	ldrb	r3, [r6, r0]
   1a7c0:	cmp	r3, #0
   1a7c4:	bne	1a924 <__assert_fail@plt+0x8bb0>
   1a7c8:	ldr	r1, [sp, #32]
   1a7cc:	b	1a8d4 <__assert_fail@plt+0x8b60>
   1a7d0:	mov	r3, r1
   1a7d4:	add	r1, r3, #1
   1a7d8:	ldrb	r2, [r3, #1]
   1a7dc:	cmp	r2, #47	; 0x2f
   1a7e0:	beq	1a7d0 <__assert_fail@plt+0x8a5c>
   1a7e4:	add	r3, r3, #2
   1a7e8:	cmp	r2, #0
   1a7ec:	beq	1a81c <__assert_fail@plt+0x8aa8>
   1a7f0:	cmp	r2, #46	; 0x2e
   1a7f4:	bne	1a774 <__assert_fail@plt+0x8a00>
   1a7f8:	ldrb	r2, [r1, #1]
   1a7fc:	cmp	r2, #0
   1a800:	beq	1a81c <__assert_fail@plt+0x8aa8>
   1a804:	cmp	r2, #46	; 0x2e
   1a808:	bne	1a768 <__assert_fail@plt+0x89f4>
   1a80c:	ldrb	r2, [r1, #2]
   1a810:	cmp	r2, #47	; 0x2f
   1a814:	cmpne	r2, #0
   1a818:	bne	1a768 <__assert_fail@plt+0x89f4>
   1a81c:	ldr	r3, [pc, #456]	; 1a9ec <__assert_fail@plt+0x8c78>
   1a820:	ldrh	r3, [r3]
   1a824:	ldr	r2, [sp, #32]
   1a828:	strh	r3, [r2]
   1a82c:	mov	r3, #512	; 0x200
   1a830:	mov	r2, #0
   1a834:	mov	r1, r5
   1a838:	mvn	r0, #99	; 0x63
   1a83c:	bl	1190c <faccessat@plt>
   1a840:	adds	r4, r0, #0
   1a844:	movne	r4, #1
   1a848:	b	1a790 <__assert_fail@plt+0x8a1c>
   1a84c:	ldrb	r3, [r6]
   1a850:	cmp	r3, #0
   1a854:	movne	r0, #0
   1a858:	beq	1a864 <__assert_fail@plt+0x8af0>
   1a85c:	mov	r4, r0
   1a860:	b	1a790 <__assert_fail@plt+0x8a1c>
   1a864:	mov	r3, #512	; 0x200
   1a868:	mov	r2, #0
   1a86c:	mov	r1, r5
   1a870:	mvn	r0, #99	; 0x63
   1a874:	bl	1190c <faccessat@plt>
   1a878:	adds	r0, r0, #0
   1a87c:	movne	r0, #1
   1a880:	b	1a85c <__assert_fail@plt+0x8ae8>
   1a884:	mov	r1, r3
   1a888:	b	1a8d4 <__assert_fail@plt+0x8b60>
   1a88c:	mov	r6, r0
   1a890:	ldr	r1, [sp, #32]
   1a894:	mov	r3, #1
   1a898:	str	r3, [sp, #20]
   1a89c:	b	1a8d4 <__assert_fail@plt+0x8b60>
   1a8a0:	mov	r6, r0
   1a8a4:	mov	r3, #1
   1a8a8:	str	r3, [sp, #20]
   1a8ac:	b	1a8d4 <__assert_fail@plt+0x8b60>
   1a8b0:	mov	r6, r0
   1a8b4:	mov	r3, #1
   1a8b8:	str	r3, [sp, #20]
   1a8bc:	b	1a8d4 <__assert_fail@plt+0x8b60>
   1a8c0:	mov	r6, r0
   1a8c4:	mov	r3, #1
   1a8c8:	str	r3, [sp, #20]
   1a8cc:	b	1a8d4 <__assert_fail@plt+0x8b60>
   1a8d0:	ldr	r1, [sp, #32]
   1a8d4:	mov	r4, r6
   1a8d8:	b	1a398 <__assert_fail@plt+0x8624>
   1a8dc:	add	r3, r5, #1
   1a8e0:	cmp	r1, r3
   1a8e4:	bls	1a930 <__assert_fail@plt+0x8bbc>
   1a8e8:	ldrb	r3, [r1, #-1]
   1a8ec:	cmp	r3, #47	; 0x2f
   1a8f0:	moveq	r6, r5
   1a8f4:	subeq	r5, r1, #1
   1a8f8:	moveq	r4, #0
   1a8fc:	movne	r6, r5
   1a900:	movne	r5, r1
   1a904:	movne	r4, #0
   1a908:	b	1a93c <__assert_fail@plt+0x8bc8>
   1a90c:	mov	r6, r5
   1a910:	ldr	r5, [sp, #32]
   1a914:	b	1a93c <__assert_fail@plt+0x8bc8>
   1a918:	mov	r6, r5
   1a91c:	ldr	r5, [sp, #32]
   1a920:	b	1a93c <__assert_fail@plt+0x8bc8>
   1a924:	mov	r6, r5
   1a928:	ldr	r5, [sp, #32]
   1a92c:	b	1a93c <__assert_fail@plt+0x8bc8>
   1a930:	mov	r6, r5
   1a934:	mov	r5, r1
   1a938:	mov	r4, #0
   1a93c:	ldr	r0, [sp, #28]
   1a940:	cmp	r0, #0
   1a944:	beq	1a958 <__assert_fail@plt+0x8be4>
   1a948:	bl	1bf00 <__assert_fail@plt+0xa18c>
   1a94c:	b	1a958 <__assert_fail@plt+0x8be4>
   1a950:	mov	r6, r5
   1a954:	mov	r4, #1
   1a958:	ldr	r0, [sp, #144]	; 0x90
   1a95c:	add	r3, sp, #152	; 0x98
   1a960:	cmp	r0, r3
   1a964:	beq	1a96c <__assert_fail@plt+0x8bf8>
   1a968:	bl	1b388 <__assert_fail@plt+0x9614>
   1a96c:	add	r3, sp, #3232	; 0xca0
   1a970:	add	r3, r3, #8
   1a974:	ldr	r0, [r3, #-2064]!	; 0xfffff7f0
   1a978:	add	r3, r3, #8
   1a97c:	cmp	r0, r3
   1a980:	beq	1a988 <__assert_fail@plt+0x8c14>
   1a984:	bl	1b388 <__assert_fail@plt+0x9614>
   1a988:	cmp	r4, #0
   1a98c:	beq	1a9bc <__assert_fail@plt+0x8c48>
   1a990:	ldr	r0, [sp, #2208]	; 0x8a0
   1a994:	add	r3, sp, #2208	; 0x8a0
   1a998:	add	r3, r3, #8
   1a99c:	cmp	r0, r3
   1a9a0:	moveq	r0, #0
   1a9a4:	beq	1a9b0 <__assert_fail@plt+0x8c3c>
   1a9a8:	bl	1b388 <__assert_fail@plt+0x9614>
   1a9ac:	mov	r0, #0
   1a9b0:	add	sp, sp, #3232	; 0xca0
   1a9b4:	add	sp, sp, #12
   1a9b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9bc:	mov	r3, #0
   1a9c0:	strb	r3, [r5], #1
   1a9c4:	sub	r1, r5, r6
   1a9c8:	add	r0, sp, #2208	; 0x8a0
   1a9cc:	bl	2156c <_obstack_memory_used@@Base+0x1b98>
   1a9d0:	cmp	r0, #0
   1a9d4:	bne	1a9b0 <__assert_fail@plt+0x8c3c>
   1a9d8:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   1a9dc:	andeq	r7, r2, r0, lsl #22
   1a9e0:	muleq	r1, r4, r4
   1a9e4:	andeq	ip, r1, r0, asr #8
   1a9e8:	andeq	ip, r1, r8, lsl #8
   1a9ec:	andeq	r7, r2, r0, asr fp
   1a9f0:	ldr	r3, [pc, #4]	; 1a9fc <__assert_fail@plt+0x8c88>
   1a9f4:	str	r0, [r3]
   1a9f8:	bx	lr
   1a9fc:	andeq	sl, r3, ip, asr #7
   1aa00:	ldr	r3, [pc, #4]	; 1aa0c <__assert_fail@plt+0x8c98>
   1aa04:	strb	r0, [r3, #4]
   1aa08:	bx	lr
   1aa0c:	andeq	sl, r3, ip, asr #7
   1aa10:	push	{r4, r5, r6, lr}
   1aa14:	sub	sp, sp, #8
   1aa18:	ldr	r3, [pc, #200]	; 1aae8 <__assert_fail@plt+0x8d74>
   1aa1c:	ldr	r0, [r3]
   1aa20:	bl	231b4 <_obstack_memory_used@@Base+0x37e0>
   1aa24:	cmp	r0, #0
   1aa28:	beq	1aa4c <__assert_fail@plt+0x8cd8>
   1aa2c:	ldr	r3, [pc, #184]	; 1aaec <__assert_fail@plt+0x8d78>
   1aa30:	ldrb	r3, [r3, #4]
   1aa34:	cmp	r3, #0
   1aa38:	beq	1aa68 <__assert_fail@plt+0x8cf4>
   1aa3c:	bl	11bb8 <__errno_location@plt>
   1aa40:	ldr	r3, [r0]
   1aa44:	cmp	r3, #32
   1aa48:	bne	1aa68 <__assert_fail@plt+0x8cf4>
   1aa4c:	ldr	r3, [pc, #156]	; 1aaf0 <__assert_fail@plt+0x8d7c>
   1aa50:	ldr	r0, [r3]
   1aa54:	bl	231b4 <_obstack_memory_used@@Base+0x37e0>
   1aa58:	cmp	r0, #0
   1aa5c:	bne	1aadc <__assert_fail@plt+0x8d68>
   1aa60:	add	sp, sp, #8
   1aa64:	pop	{r4, r5, r6, pc}
   1aa68:	mov	r2, #5
   1aa6c:	ldr	r1, [pc, #128]	; 1aaf4 <__assert_fail@plt+0x8d80>
   1aa70:	mov	r0, #0
   1aa74:	bl	11984 <dcgettext@plt>
   1aa78:	mov	r4, r0
   1aa7c:	ldr	r3, [pc, #104]	; 1aaec <__assert_fail@plt+0x8d78>
   1aa80:	ldr	r5, [r3]
   1aa84:	cmp	r5, #0
   1aa88:	beq	1aac0 <__assert_fail@plt+0x8d4c>
   1aa8c:	bl	11bb8 <__errno_location@plt>
   1aa90:	ldr	r6, [r0]
   1aa94:	mov	r0, r5
   1aa98:	bl	213d0 <_obstack_memory_used@@Base+0x19fc>
   1aa9c:	str	r4, [sp]
   1aaa0:	mov	r3, r0
   1aaa4:	ldr	r2, [pc, #76]	; 1aaf8 <__assert_fail@plt+0x8d84>
   1aaa8:	mov	r1, r6
   1aaac:	mov	r0, #0
   1aab0:	bl	11a8c <error@plt>
   1aab4:	ldr	r3, [pc, #64]	; 1aafc <__assert_fail@plt+0x8d88>
   1aab8:	ldr	r0, [r3]
   1aabc:	bl	11924 <_exit@plt>
   1aac0:	bl	11bb8 <__errno_location@plt>
   1aac4:	mov	r3, r4
   1aac8:	ldr	r2, [pc, #48]	; 1ab00 <__assert_fail@plt+0x8d8c>
   1aacc:	ldr	r1, [r0]
   1aad0:	mov	r0, #0
   1aad4:	bl	11a8c <error@plt>
   1aad8:	b	1aab4 <__assert_fail@plt+0x8d40>
   1aadc:	ldr	r3, [pc, #24]	; 1aafc <__assert_fail@plt+0x8d88>
   1aae0:	ldr	r0, [r3]
   1aae4:	bl	11924 <_exit@plt>
   1aae8:	andeq	r9, r3, r4, lsr #6
   1aaec:	andeq	sl, r3, ip, asr #7
   1aaf0:	andeq	r9, r3, r0, lsr #6
   1aaf4:	andeq	r8, r2, ip, rrx
   1aaf8:	strdeq	r7, [r2], -r8
   1aafc:	andeq	r9, r3, r4, asr #5
   1ab00:	strdeq	r7, [r2], -r4
   1ab04:	push	{r4, r5, r6, lr}
   1ab08:	mov	r5, r0
   1ab0c:	ldrb	r4, [r0]
   1ab10:	cmp	r4, #47	; 0x2f
   1ab14:	movne	r4, #0
   1ab18:	moveq	r4, #1
   1ab1c:	bl	1a118 <__assert_fail@plt+0x83a4>
   1ab20:	sub	r0, r0, r5
   1ab24:	cmp	r0, r4
   1ab28:	bls	1ab60 <__assert_fail@plt+0x8dec>
   1ab2c:	sub	r3, r0, #1
   1ab30:	add	r2, r5, r3
   1ab34:	ldrb	r1, [r5, r3]
   1ab38:	cmp	r1, #47	; 0x2f
   1ab3c:	bne	1ab68 <__assert_fail@plt+0x8df4>
   1ab40:	cmp	r4, r3
   1ab44:	beq	1ab74 <__assert_fail@plt+0x8e00>
   1ab48:	sub	r0, r3, #1
   1ab4c:	ldrb	r1, [r2, #-1]!
   1ab50:	cmp	r1, #47	; 0x2f
   1ab54:	bne	1ab70 <__assert_fail@plt+0x8dfc>
   1ab58:	mov	r3, r0
   1ab5c:	b	1ab40 <__assert_fail@plt+0x8dcc>
   1ab60:	mov	r4, r0
   1ab64:	b	1ab74 <__assert_fail@plt+0x8e00>
   1ab68:	mov	r4, r0
   1ab6c:	b	1ab74 <__assert_fail@plt+0x8e00>
   1ab70:	mov	r4, r3
   1ab74:	mov	r0, r4
   1ab78:	pop	{r4, r5, r6, pc}
   1ab7c:	push	{r4, r5, r6, r7, r8, lr}
   1ab80:	mov	r7, r0
   1ab84:	bl	1ab04 <__assert_fail@plt+0x8d90>
   1ab88:	mov	r4, r0
   1ab8c:	add	r6, r0, #1
   1ab90:	cmp	r0, #0
   1ab94:	movne	r0, r6
   1ab98:	addeq	r0, r6, #1
   1ab9c:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   1aba0:	subs	r5, r0, #0
   1aba4:	beq	1abd0 <__assert_fail@plt+0x8e5c>
   1aba8:	mov	r2, r4
   1abac:	mov	r1, r7
   1abb0:	mov	r0, r5
   1abb4:	bl	11930 <memcpy@plt>
   1abb8:	cmp	r4, #0
   1abbc:	moveq	r3, #46	; 0x2e
   1abc0:	strbeq	r3, [r5, r4]
   1abc4:	moveq	r4, r6
   1abc8:	mov	r3, #0
   1abcc:	strb	r3, [r5, r4]
   1abd0:	mov	r0, r5
   1abd4:	pop	{r4, r5, r6, r7, r8, pc}
   1abd8:	mov	r0, #0
   1abdc:	bx	lr
   1abe0:	push	{r4, r5, r6, r7, r8, lr}
   1abe4:	subs	r7, r0, #0
   1abe8:	popeq	{r4, r5, r6, r7, r8, pc}
   1abec:	mov	r5, r2
   1abf0:	mov	r6, r1
   1abf4:	mov	r0, #24
   1abf8:	bl	2227c <_obstack_memory_used@@Base+0x28a8>
   1abfc:	mov	r4, r0
   1ac00:	mov	r0, r6
   1ac04:	bl	22804 <_obstack_memory_used@@Base+0x2e30>
   1ac08:	str	r0, [r4]
   1ac0c:	ldrd	r2, [r5, #96]	; 0x60
   1ac10:	strd	r2, [r4, #8]
   1ac14:	ldrd	r2, [r5]
   1ac18:	strd	r2, [r4, #16]
   1ac1c:	mov	r1, r4
   1ac20:	mov	r0, r7
   1ac24:	bl	1c2bc <__assert_fail@plt+0xa548>
   1ac28:	cmp	r0, #0
   1ac2c:	beq	1ac44 <__assert_fail@plt+0x8ed0>
   1ac30:	cmp	r4, r0
   1ac34:	popeq	{r4, r5, r6, r7, r8, pc}
   1ac38:	mov	r0, r4
   1ac3c:	bl	1c494 <__assert_fail@plt+0xa720>
   1ac40:	pop	{r4, r5, r6, r7, r8, pc}
   1ac44:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   1ac48:	cmp	r0, #0
   1ac4c:	beq	1ac84 <__assert_fail@plt+0x8f10>
   1ac50:	push	{r4, r5, lr}
   1ac54:	sub	sp, sp, #28
   1ac58:	str	r1, [sp]
   1ac5c:	ldrd	r4, [r2, #96]	; 0x60
   1ac60:	strd	r4, [sp, #8]
   1ac64:	ldrd	r2, [r2]
   1ac68:	strd	r2, [sp, #16]
   1ac6c:	mov	r1, sp
   1ac70:	bl	1bab8 <__assert_fail@plt+0x9d44>
   1ac74:	adds	r0, r0, #0
   1ac78:	movne	r0, #1
   1ac7c:	add	sp, sp, #28
   1ac80:	pop	{r4, r5, pc}
   1ac84:	mov	r0, #0
   1ac88:	bx	lr
   1ac8c:	and	r3, r0, #61440	; 0xf000
   1ac90:	cmp	r3, #32768	; 0x8000
   1ac94:	moveq	r3, #45	; 0x2d
   1ac98:	beq	1ace4 <__assert_fail@plt+0x8f70>
   1ac9c:	cmp	r3, #16384	; 0x4000
   1aca0:	moveq	r3, #100	; 0x64
   1aca4:	beq	1ace4 <__assert_fail@plt+0x8f70>
   1aca8:	cmp	r3, #24576	; 0x6000
   1acac:	moveq	r3, #98	; 0x62
   1acb0:	beq	1ace4 <__assert_fail@plt+0x8f70>
   1acb4:	cmp	r3, #8192	; 0x2000
   1acb8:	moveq	r3, #99	; 0x63
   1acbc:	beq	1ace4 <__assert_fail@plt+0x8f70>
   1acc0:	cmp	r3, #40960	; 0xa000
   1acc4:	moveq	r3, #108	; 0x6c
   1acc8:	beq	1ace4 <__assert_fail@plt+0x8f70>
   1accc:	cmp	r3, #4096	; 0x1000
   1acd0:	moveq	r3, #112	; 0x70
   1acd4:	beq	1ace4 <__assert_fail@plt+0x8f70>
   1acd8:	cmp	r3, #49152	; 0xc000
   1acdc:	moveq	r3, #115	; 0x73
   1ace0:	movne	r3, #63	; 0x3f
   1ace4:	strb	r3, [r1]
   1ace8:	and	r3, r0, #256	; 0x100
   1acec:	cmp	r3, #0
   1acf0:	movne	r3, #114	; 0x72
   1acf4:	moveq	r3, #45	; 0x2d
   1acf8:	strb	r3, [r1, #1]
   1acfc:	and	r3, r0, #128	; 0x80
   1ad00:	cmp	r3, #0
   1ad04:	movne	r3, #119	; 0x77
   1ad08:	moveq	r3, #45	; 0x2d
   1ad0c:	strb	r3, [r1, #2]
   1ad10:	tst	r0, #2048	; 0x800
   1ad14:	beq	1adc8 <__assert_fail@plt+0x9054>
   1ad18:	and	r3, r0, #64	; 0x40
   1ad1c:	cmp	r3, #0
   1ad20:	movne	r3, #115	; 0x73
   1ad24:	moveq	r3, #83	; 0x53
   1ad28:	strb	r3, [r1, #3]
   1ad2c:	and	r3, r0, #32
   1ad30:	cmp	r3, #0
   1ad34:	movne	r3, #114	; 0x72
   1ad38:	moveq	r3, #45	; 0x2d
   1ad3c:	strb	r3, [r1, #4]
   1ad40:	and	r3, r0, #16
   1ad44:	cmp	r3, #0
   1ad48:	movne	r3, #119	; 0x77
   1ad4c:	moveq	r3, #45	; 0x2d
   1ad50:	strb	r3, [r1, #5]
   1ad54:	tst	r0, #1024	; 0x400
   1ad58:	beq	1addc <__assert_fail@plt+0x9068>
   1ad5c:	and	r3, r0, #8
   1ad60:	cmp	r3, #0
   1ad64:	movne	r3, #115	; 0x73
   1ad68:	moveq	r3, #83	; 0x53
   1ad6c:	strb	r3, [r1, #6]
   1ad70:	and	r3, r0, #4
   1ad74:	cmp	r3, #0
   1ad78:	movne	r3, #114	; 0x72
   1ad7c:	moveq	r3, #45	; 0x2d
   1ad80:	strb	r3, [r1, #7]
   1ad84:	and	r3, r0, #2
   1ad88:	cmp	r3, #0
   1ad8c:	movne	r3, #119	; 0x77
   1ad90:	moveq	r3, #45	; 0x2d
   1ad94:	strb	r3, [r1, #8]
   1ad98:	tst	r0, #512	; 0x200
   1ad9c:	beq	1adf0 <__assert_fail@plt+0x907c>
   1ada0:	and	r0, r0, #1
   1ada4:	cmp	r0, #0
   1ada8:	movne	r0, #116	; 0x74
   1adac:	moveq	r0, #84	; 0x54
   1adb0:	strb	r0, [r1, #9]
   1adb4:	mov	r3, #32
   1adb8:	strb	r3, [r1, #10]
   1adbc:	mov	r3, #0
   1adc0:	strb	r3, [r1, #11]
   1adc4:	bx	lr
   1adc8:	and	r3, r0, #64	; 0x40
   1adcc:	cmp	r3, #0
   1add0:	movne	r3, #120	; 0x78
   1add4:	moveq	r3, #45	; 0x2d
   1add8:	b	1ad28 <__assert_fail@plt+0x8fb4>
   1addc:	and	r3, r0, #8
   1ade0:	cmp	r3, #0
   1ade4:	movne	r3, #120	; 0x78
   1ade8:	moveq	r3, #45	; 0x2d
   1adec:	b	1ad6c <__assert_fail@plt+0x8ff8>
   1adf0:	and	r0, r0, #1
   1adf4:	cmp	r0, #0
   1adf8:	movne	r0, #120	; 0x78
   1adfc:	moveq	r0, #45	; 0x2d
   1ae00:	b	1adb0 <__assert_fail@plt+0x903c>
   1ae04:	push	{r4, lr}
   1ae08:	ldr	r0, [r0, #16]
   1ae0c:	bl	1ac8c <__assert_fail@plt+0x8f18>
   1ae10:	pop	{r4, pc}
   1ae14:	push	{r4, lr}
   1ae18:	bl	1ae28 <__assert_fail@plt+0x90b4>
   1ae1c:	cmp	r0, #0
   1ae20:	popne	{r4, pc}
   1ae24:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   1ae28:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae2c:	mov	fp, r0
   1ae30:	mov	r6, r1
   1ae34:	mov	r9, r2
   1ae38:	bl	1a118 <__assert_fail@plt+0x83a4>
   1ae3c:	mov	r4, r0
   1ae40:	bl	1a180 <__assert_fail@plt+0x840c>
   1ae44:	mov	r5, r0
   1ae48:	sub	r4, r4, fp
   1ae4c:	add	r4, r4, r0
   1ae50:	mov	r0, r6
   1ae54:	bl	11b94 <strlen@plt>
   1ae58:	mov	r8, r0
   1ae5c:	cmp	r5, #0
   1ae60:	beq	1ae8c <__assert_fail@plt+0x9118>
   1ae64:	add	r3, fp, r4
   1ae68:	ldrb	r3, [r3, #-1]
   1ae6c:	cmp	r3, #47	; 0x2f
   1ae70:	moveq	r5, #0
   1ae74:	beq	1ae9c <__assert_fail@plt+0x9128>
   1ae78:	ldrb	r5, [r6]
   1ae7c:	cmp	r5, #47	; 0x2f
   1ae80:	movne	r5, #47	; 0x2f
   1ae84:	moveq	r5, #0
   1ae88:	b	1ae9c <__assert_fail@plt+0x9128>
   1ae8c:	ldrb	r5, [r6]
   1ae90:	cmp	r5, #47	; 0x2f
   1ae94:	moveq	r5, #46	; 0x2e
   1ae98:	movne	r5, #0
   1ae9c:	adds	sl, r5, #0
   1aea0:	movne	sl, #1
   1aea4:	add	r0, r8, #1
   1aea8:	add	r0, r0, r4
   1aeac:	add	r0, r0, sl
   1aeb0:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   1aeb4:	subs	r7, r0, #0
   1aeb8:	beq	1aeec <__assert_fail@plt+0x9178>
   1aebc:	mov	r2, r4
   1aec0:	mov	r1, fp
   1aec4:	mov	r0, r7
   1aec8:	bl	11b40 <mempcpy@plt>
   1aecc:	strb	r5, [r0], sl
   1aed0:	cmp	r9, #0
   1aed4:	strne	r0, [r9]
   1aed8:	mov	r2, r8
   1aedc:	mov	r1, r6
   1aee0:	bl	11b40 <mempcpy@plt>
   1aee4:	mov	r3, #0
   1aee8:	strb	r3, [r0]
   1aeec:	mov	r0, r7
   1aef0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aef4:	ldr	r2, [r0]
   1aef8:	ldrb	r3, [r2]
   1aefc:	cmp	r3, #0
   1af00:	beq	1afc8 <__assert_fail@plt+0x9254>
   1af04:	push	{r4, r5, lr}
   1af08:	mov	ip, r0
   1af0c:	mov	r1, #0
   1af10:	mov	r0, r1
   1af14:	mov	r5, #1
   1af18:	mov	lr, r1
   1af1c:	b	1af44 <__assert_fail@plt+0x91d0>
   1af20:	cmp	r3, #126	; 0x7e
   1af24:	moveq	r1, lr
   1af28:	movne	r1, lr
   1af2c:	movne	r0, lr
   1af30:	add	r2, r2, #1
   1af34:	str	r2, [ip]
   1af38:	ldrb	r3, [r2]
   1af3c:	cmp	r3, #0
   1af40:	beq	1afc4 <__assert_fail@plt+0x9250>
   1af44:	cmp	r1, #0
   1af48:	beq	1af70 <__assert_fail@plt+0x91fc>
   1af4c:	cmp	r3, #65	; 0x41
   1af50:	bcc	1af20 <__assert_fail@plt+0x91ac>
   1af54:	cmp	r3, #90	; 0x5a
   1af58:	bls	1af68 <__assert_fail@plt+0x91f4>
   1af5c:	sub	r1, r3, #97	; 0x61
   1af60:	cmp	r1, #25
   1af64:	bhi	1af20 <__assert_fail@plt+0x91ac>
   1af68:	mov	r1, lr
   1af6c:	b	1af30 <__assert_fail@plt+0x91bc>
   1af70:	cmp	r3, #46	; 0x2e
   1af74:	beq	1afa0 <__assert_fail@plt+0x922c>
   1af78:	cmp	r3, #90	; 0x5a
   1af7c:	bhi	1afb4 <__assert_fail@plt+0x9240>
   1af80:	cmp	r3, #65	; 0x41
   1af84:	bcs	1af30 <__assert_fail@plt+0x91bc>
   1af88:	sub	r4, r3, #48	; 0x30
   1af8c:	cmp	r4, #9
   1af90:	bls	1af30 <__assert_fail@plt+0x91bc>
   1af94:	cmp	r3, #126	; 0x7e
   1af98:	movne	r0, #0
   1af9c:	b	1af30 <__assert_fail@plt+0x91bc>
   1afa0:	cmp	r0, #0
   1afa4:	moveq	r0, r2
   1afa8:	moveq	r1, r5
   1afac:	movne	r1, r5
   1afb0:	b	1af30 <__assert_fail@plt+0x91bc>
   1afb4:	sub	r4, r3, #97	; 0x61
   1afb8:	cmp	r4, #25
   1afbc:	bhi	1af94 <__assert_fail@plt+0x9220>
   1afc0:	b	1af30 <__assert_fail@plt+0x91bc>
   1afc4:	pop	{r4, r5, pc}
   1afc8:	mov	r0, #0
   1afcc:	bx	lr
   1afd0:	mov	r3, r0
   1afd4:	sub	r2, r0, #48	; 0x30
   1afd8:	cmp	r2, #9
   1afdc:	bls	1b00c <__assert_fail@plt+0x9298>
   1afe0:	cmp	r0, #65	; 0x41
   1afe4:	bcc	1affc <__assert_fail@plt+0x9288>
   1afe8:	cmp	r0, #90	; 0x5a
   1afec:	bxls	lr
   1aff0:	sub	r2, r0, #97	; 0x61
   1aff4:	cmp	r2, #25
   1aff8:	bxls	lr
   1affc:	cmp	r3, #126	; 0x7e
   1b000:	beq	1b014 <__assert_fail@plt+0x92a0>
   1b004:	add	r0, r3, #256	; 0x100
   1b008:	bx	lr
   1b00c:	mov	r0, #0
   1b010:	bx	lr
   1b014:	mvn	r0, #0
   1b018:	bx	lr
   1b01c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b020:	sub	sp, sp, #28
   1b024:	mov	r6, r0
   1b028:	str	r0, [sp, #4]
   1b02c:	mov	r7, r1
   1b030:	mov	r8, r1
   1b034:	bl	118a0 <strcmp@plt>
   1b038:	subs	fp, r0, #0
   1b03c:	beq	1b268 <__assert_fail@plt+0x94f4>
   1b040:	ldrb	r4, [r6]
   1b044:	cmp	r4, #0
   1b048:	beq	1b338 <__assert_fail@plt+0x95c4>
   1b04c:	ldrb	r5, [r7]
   1b050:	cmp	r5, #0
   1b054:	moveq	fp, #1
   1b058:	beq	1b268 <__assert_fail@plt+0x94f4>
   1b05c:	mov	r1, r6
   1b060:	ldr	r0, [pc, #792]	; 1b380 <__assert_fail@plt+0x960c>
   1b064:	bl	118a0 <strcmp@plt>
   1b068:	cmp	r0, #0
   1b06c:	beq	1b340 <__assert_fail@plt+0x95cc>
   1b070:	mov	r1, r7
   1b074:	ldr	r0, [pc, #772]	; 1b380 <__assert_fail@plt+0x960c>
   1b078:	bl	118a0 <strcmp@plt>
   1b07c:	cmp	r0, #0
   1b080:	moveq	fp, #1
   1b084:	beq	1b268 <__assert_fail@plt+0x94f4>
   1b088:	mov	r1, r6
   1b08c:	ldr	r0, [pc, #752]	; 1b384 <__assert_fail@plt+0x9610>
   1b090:	bl	118a0 <strcmp@plt>
   1b094:	cmp	r0, #0
   1b098:	beq	1b348 <__assert_fail@plt+0x95d4>
   1b09c:	mov	r1, r7
   1b0a0:	ldr	r0, [pc, #732]	; 1b384 <__assert_fail@plt+0x9610>
   1b0a4:	bl	118a0 <strcmp@plt>
   1b0a8:	cmp	r0, #0
   1b0ac:	moveq	fp, #1
   1b0b0:	beq	1b268 <__assert_fail@plt+0x94f4>
   1b0b4:	cmp	r4, #46	; 0x2e
   1b0b8:	movne	r3, #0
   1b0bc:	moveq	r3, #1
   1b0c0:	cmp	r5, #46	; 0x2e
   1b0c4:	moveq	r2, #0
   1b0c8:	andne	r2, r3, #1
   1b0cc:	cmp	r2, #0
   1b0d0:	bne	1b350 <__assert_fail@plt+0x95dc>
   1b0d4:	cmp	r5, #46	; 0x2e
   1b0d8:	movne	r5, #0
   1b0dc:	moveq	r5, #1
   1b0e0:	cmp	r4, #46	; 0x2e
   1b0e4:	moveq	r4, #0
   1b0e8:	andne	r4, r5, #1
   1b0ec:	cmp	r4, #0
   1b0f0:	movne	fp, #1
   1b0f4:	bne	1b268 <__assert_fail@plt+0x94f4>
   1b0f8:	tst	r5, r3
   1b0fc:	bne	1b19c <__assert_fail@plt+0x9428>
   1b100:	ldr	r3, [sp, #4]
   1b104:	str	r3, [sp, #20]
   1b108:	str	r8, [sp, #16]
   1b10c:	add	r0, sp, #20
   1b110:	bl	1aef4 <__assert_fail@plt+0x9180>
   1b114:	mov	r4, r0
   1b118:	add	r0, sp, #16
   1b11c:	bl	1aef4 <__assert_fail@plt+0x9180>
   1b120:	cmp	r4, #0
   1b124:	ldreq	sl, [sp, #20]
   1b128:	movne	sl, r4
   1b12c:	ldr	r3, [sp, #4]
   1b130:	mov	r6, r3
   1b134:	sub	sl, sl, r3
   1b138:	cmp	r0, #0
   1b13c:	ldreq	r9, [sp, #16]
   1b140:	movne	r9, r0
   1b144:	sub	r9, r9, r8
   1b148:	cmp	r0, #0
   1b14c:	cmpeq	r4, #0
   1b150:	movne	r4, #1
   1b154:	moveq	r4, #0
   1b158:	cmp	sl, r9
   1b15c:	movne	r4, #0
   1b160:	andeq	r4, r4, #1
   1b164:	cmp	r4, #0
   1b168:	bne	1b1b4 <__assert_fail@plt+0x9440>
   1b16c:	mov	r4, #0
   1b170:	mov	r7, r4
   1b174:	str	r4, [sp, #12]
   1b178:	str	fp, [sp, #8]
   1b17c:	mov	fp, r8
   1b180:	cmp	r9, r4
   1b184:	cmpls	sl, r7
   1b188:	bls	1b378 <__assert_fail@plt+0x9604>
   1b18c:	add	r6, fp, r4
   1b190:	ldr	r3, [sp, #4]
   1b194:	add	r5, r3, r7
   1b198:	b	1b210 <__assert_fail@plt+0x949c>
   1b19c:	ldr	r3, [sp, #4]
   1b1a0:	add	r3, r3, #1
   1b1a4:	str	r3, [sp, #4]
   1b1a8:	add	r3, r7, #1
   1b1ac:	mov	r8, r3
   1b1b0:	b	1b100 <__assert_fail@plt+0x938c>
   1b1b4:	mov	r2, sl
   1b1b8:	mov	r1, r8
   1b1bc:	ldr	r0, [sp, #4]
   1b1c0:	bl	11d20 <strncmp@plt>
   1b1c4:	cmp	r0, #0
   1b1c8:	ldreq	sl, [sp, #20]
   1b1cc:	subeq	sl, sl, r6
   1b1d0:	ldreq	r9, [sp, #16]
   1b1d4:	subeq	r9, r9, r8
   1b1d8:	b	1b16c <__assert_fail@plt+0x93f8>
   1b1dc:	ldrb	r0, [r5]
   1b1e0:	bl	1afd0 <__assert_fail@plt+0x925c>
   1b1e4:	mov	r8, r0
   1b1e8:	cmp	r9, r4
   1b1ec:	beq	1b250 <__assert_fail@plt+0x94dc>
   1b1f0:	ldrb	r0, [r6]
   1b1f4:	bl	1afd0 <__assert_fail@plt+0x925c>
   1b1f8:	cmp	r0, r8
   1b1fc:	bne	1b258 <__assert_fail@plt+0x94e4>
   1b200:	add	r7, r7, #1
   1b204:	add	r4, r4, #1
   1b208:	add	r6, r6, #1
   1b20c:	add	r5, r5, #1
   1b210:	cmp	sl, r7
   1b214:	bls	1b228 <__assert_fail@plt+0x94b4>
   1b218:	ldrb	r3, [r5]
   1b21c:	sub	r3, r3, #48	; 0x30
   1b220:	cmp	r3, #9
   1b224:	bhi	1b1dc <__assert_fail@plt+0x9468>
   1b228:	cmp	r9, r4
   1b22c:	bls	1b274 <__assert_fail@plt+0x9500>
   1b230:	ldrb	r3, [r6]
   1b234:	sub	r3, r3, #48	; 0x30
   1b238:	cmp	r3, #9
   1b23c:	bls	1b274 <__assert_fail@plt+0x9500>
   1b240:	cmp	sl, r7
   1b244:	bne	1b368 <__assert_fail@plt+0x95f4>
   1b248:	ldr	r8, [sp, #12]
   1b24c:	b	1b1f0 <__assert_fail@plt+0x947c>
   1b250:	ldr	r0, [sp, #12]
   1b254:	b	1b1f8 <__assert_fail@plt+0x9484>
   1b258:	ldr	fp, [sp, #8]
   1b25c:	sub	r8, r8, r0
   1b260:	cmp	r8, #0
   1b264:	movne	fp, r8
   1b268:	mov	r0, fp
   1b26c:	add	sp, sp, #28
   1b270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b274:	ldr	r3, [sp, #4]
   1b278:	add	r2, r3, r7
   1b27c:	ldrb	r3, [r3, r7]
   1b280:	cmp	r3, #48	; 0x30
   1b284:	movne	r3, r7
   1b288:	bne	1b2a0 <__assert_fail@plt+0x952c>
   1b28c:	mov	r3, r7
   1b290:	add	r3, r3, #1
   1b294:	ldrb	r1, [r2, #1]!
   1b298:	cmp	r1, #48	; 0x30
   1b29c:	beq	1b290 <__assert_fail@plt+0x951c>
   1b2a0:	add	r2, fp, r4
   1b2a4:	ldrb	r1, [fp, r4]
   1b2a8:	cmp	r1, #48	; 0x30
   1b2ac:	bne	1b2c0 <__assert_fail@plt+0x954c>
   1b2b0:	add	r4, r4, #1
   1b2b4:	ldrb	r1, [r2, #1]!
   1b2b8:	cmp	r1, #48	; 0x30
   1b2bc:	beq	1b2b0 <__assert_fail@plt+0x953c>
   1b2c0:	ldr	r2, [sp, #4]
   1b2c4:	add	r1, r2, r3
   1b2c8:	add	ip, fp, r4
   1b2cc:	mov	r7, r3
   1b2d0:	mov	r0, #0
   1b2d4:	sub	r3, r4, r3
   1b2d8:	add	r4, r3, r7
   1b2dc:	ldrb	r2, [r1], #1
   1b2e0:	sub	lr, r2, #48	; 0x30
   1b2e4:	cmp	lr, #9
   1b2e8:	bhi	1b2fc <__assert_fail@plt+0x9588>
   1b2ec:	ldrb	lr, [ip], #1
   1b2f0:	sub	r5, lr, #48	; 0x30
   1b2f4:	cmp	r5, #9
   1b2f8:	bls	1b328 <__assert_fail@plt+0x95b4>
   1b2fc:	sub	r2, r2, #48	; 0x30
   1b300:	cmp	r2, #9
   1b304:	bls	1b358 <__assert_fail@plt+0x95e4>
   1b308:	ldrb	r3, [fp, r4]
   1b30c:	sub	r3, r3, #48	; 0x30
   1b310:	cmp	r3, #9
   1b314:	bls	1b360 <__assert_fail@plt+0x95ec>
   1b318:	cmp	r0, #0
   1b31c:	beq	1b180 <__assert_fail@plt+0x940c>
   1b320:	mov	fp, r0
   1b324:	b	1b268 <__assert_fail@plt+0x94f4>
   1b328:	cmp	r0, #0
   1b32c:	subeq	r0, r2, lr
   1b330:	add	r7, r7, #1
   1b334:	b	1b2d8 <__assert_fail@plt+0x9564>
   1b338:	mvn	fp, #0
   1b33c:	b	1b268 <__assert_fail@plt+0x94f4>
   1b340:	mvn	fp, #0
   1b344:	b	1b268 <__assert_fail@plt+0x94f4>
   1b348:	mvn	fp, #0
   1b34c:	b	1b268 <__assert_fail@plt+0x94f4>
   1b350:	mvn	fp, #0
   1b354:	b	1b268 <__assert_fail@plt+0x94f4>
   1b358:	mov	fp, #1
   1b35c:	b	1b268 <__assert_fail@plt+0x94f4>
   1b360:	mvn	fp, #0
   1b364:	b	1b268 <__assert_fail@plt+0x94f4>
   1b368:	ldrb	r0, [r5]
   1b36c:	bl	1afd0 <__assert_fail@plt+0x925c>
   1b370:	mov	r8, r0
   1b374:	b	1b1f0 <__assert_fail@plt+0x947c>
   1b378:	ldr	fp, [sp, #8]
   1b37c:	b	1b268 <__assert_fail@plt+0x94f4>
   1b380:	andeq	r7, r2, r0, lsl #22
   1b384:	andeq	r8, r2, r8, ror r0
   1b388:	push	{r4, r5, lr}
   1b38c:	sub	sp, sp, #12
   1b390:	mov	r5, r0
   1b394:	bl	11bb8 <__errno_location@plt>
   1b398:	mov	r4, r0
   1b39c:	ldr	r3, [r0]
   1b3a0:	str	r3, [sp]
   1b3a4:	str	r3, [sp, #4]
   1b3a8:	mov	r3, #0
   1b3ac:	str	r3, [r0]
   1b3b0:	mov	r0, r5
   1b3b4:	bl	11900 <free@plt>
   1b3b8:	ldr	r3, [r4]
   1b3bc:	cmp	r3, #0
   1b3c0:	moveq	r3, #4
   1b3c4:	movne	r3, #0
   1b3c8:	add	r2, sp, #8
   1b3cc:	add	r3, r2, r3
   1b3d0:	ldr	r3, [r3, #-8]
   1b3d4:	str	r3, [r4]
   1b3d8:	add	sp, sp, #12
   1b3dc:	pop	{r4, r5, pc}
   1b3e0:	push	{r4, lr}
   1b3e4:	mov	r1, r0
   1b3e8:	mov	r0, #0
   1b3ec:	bl	11918 <clock_gettime@plt>
   1b3f0:	pop	{r4, pc}
   1b3f4:	push	{r4, r5, lr}
   1b3f8:	sub	sp, sp, #12
   1b3fc:	mov	r4, r0
   1b400:	mov	r0, sp
   1b404:	bl	1b3e0 <__assert_fail@plt+0x966c>
   1b408:	ldm	sp, {r0, r1}
   1b40c:	stm	r4, {r0, r1}
   1b410:	mov	r0, r4
   1b414:	add	sp, sp, #12
   1b418:	pop	{r4, r5, pc}
   1b41c:	push	{lr}		; (str lr, [sp, #-4]!)
   1b420:	sub	sp, sp, #268	; 0x10c
   1b424:	ldr	r2, [pc, #68]	; 1b470 <__assert_fail@plt+0x96fc>
   1b428:	add	r1, sp, #4
   1b42c:	bl	2177c <_obstack_memory_used@@Base+0x1da8>
   1b430:	cmp	r0, #0
   1b434:	movne	r0, #0
   1b438:	bne	1b468 <__assert_fail@plt+0x96f4>
   1b43c:	ldr	r1, [pc, #48]	; 1b474 <__assert_fail@plt+0x9700>
   1b440:	add	r0, sp, #4
   1b444:	bl	118a0 <strcmp@plt>
   1b448:	cmp	r0, #0
   1b44c:	moveq	r0, #0
   1b450:	beq	1b468 <__assert_fail@plt+0x96f4>
   1b454:	ldr	r1, [pc, #28]	; 1b478 <__assert_fail@plt+0x9704>
   1b458:	add	r0, sp, #4
   1b45c:	bl	118a0 <strcmp@plt>
   1b460:	adds	r0, r0, #0
   1b464:	movne	r0, #1
   1b468:	add	sp, sp, #268	; 0x10c
   1b46c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b470:	andeq	r0, r0, r1, lsl #2
   1b474:	andeq	r8, r2, ip, ror r0
   1b478:	andeq	r8, r2, r0, lsl #1
   1b47c:	andeq	r0, r0, r0
   1b480:	push	{r4, lr}
   1b484:	ror	r0, r0, #3
   1b488:	bl	23688 <_obstack_memory_used@@Base+0x3cb4>
   1b48c:	mov	r0, r1
   1b490:	pop	{r4, pc}
   1b494:	cmp	r1, r0
   1b498:	movne	r0, #0
   1b49c:	moveq	r0, #1
   1b4a0:	bx	lr
   1b4a4:	ldr	r3, [r0, #20]
   1b4a8:	ldr	r2, [pc, #176]	; 1b560 <__assert_fail@plt+0x97ec>
   1b4ac:	cmp	r3, r2
   1b4b0:	beq	1b548 <__assert_fail@plt+0x97d4>
   1b4b4:	vldr	s15, [r3, #8]
   1b4b8:	vldr	s14, [pc, #144]	; 1b550 <__assert_fail@plt+0x97dc>
   1b4bc:	vcmpe.f32	s15, s14
   1b4c0:	vmrs	APSR_nzcv, fpscr
   1b4c4:	ble	1b524 <__assert_fail@plt+0x97b0>
   1b4c8:	vldr	s14, [pc, #132]	; 1b554 <__assert_fail@plt+0x97e0>
   1b4cc:	vcmpe.f32	s15, s14
   1b4d0:	vmrs	APSR_nzcv, fpscr
   1b4d4:	bpl	1b524 <__assert_fail@plt+0x97b0>
   1b4d8:	vldr	s13, [r3, #12]
   1b4dc:	vldr	s14, [pc, #116]	; 1b558 <__assert_fail@plt+0x97e4>
   1b4e0:	vcmpe.f32	s13, s14
   1b4e4:	vmrs	APSR_nzcv, fpscr
   1b4e8:	ble	1b524 <__assert_fail@plt+0x97b0>
   1b4ec:	vldr	s14, [r3]
   1b4f0:	vcmpe.f32	s14, #0.0
   1b4f4:	vmrs	APSR_nzcv, fpscr
   1b4f8:	blt	1b524 <__assert_fail@plt+0x97b0>
   1b4fc:	vldr	s13, [pc, #76]	; 1b550 <__assert_fail@plt+0x97dc>
   1b500:	vadd.f32	s14, s14, s13
   1b504:	vldr	s13, [r3, #4]
   1b508:	vcmpe.f32	s14, s13
   1b50c:	vmrs	APSR_nzcv, fpscr
   1b510:	bpl	1b524 <__assert_fail@plt+0x97b0>
   1b514:	vldr	s12, [pc, #64]	; 1b55c <__assert_fail@plt+0x97e8>
   1b518:	vcmpe.f32	s13, s12
   1b51c:	vmrs	APSR_nzcv, fpscr
   1b520:	bls	1b534 <__assert_fail@plt+0x97c0>
   1b524:	ldr	r3, [pc, #52]	; 1b560 <__assert_fail@plt+0x97ec>
   1b528:	str	r3, [r0, #20]
   1b52c:	mov	r0, #0
   1b530:	bx	lr
   1b534:	vcmpe.f32	s15, s14
   1b538:	vmrs	APSR_nzcv, fpscr
   1b53c:	ble	1b524 <__assert_fail@plt+0x97b0>
   1b540:	mov	r0, #1
   1b544:	bx	lr
   1b548:	mov	r0, #1
   1b54c:	bx	lr
   1b550:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b554:	svccc	0x00666666
   1b558:	svccc	0x008ccccd
   1b55c:	svccc	0x00800000
   1b560:	andeq	r8, r2, r8, lsl #1
   1b564:	push	{r4, lr}
   1b568:	mov	r4, r0
   1b56c:	mov	r0, r1
   1b570:	ldr	r3, [r4, #24]
   1b574:	ldr	r1, [r4, #8]
   1b578:	blx	r3
   1b57c:	ldr	r3, [r4, #8]
   1b580:	cmp	r0, r3
   1b584:	bcs	1b594 <__assert_fail@plt+0x9820>
   1b588:	ldr	r3, [r4]
   1b58c:	add	r0, r3, r0, lsl #3
   1b590:	pop	{r4, pc}
   1b594:	bl	11d2c <abort@plt>
   1b598:	push	{r4, r5, r6, r7, r8, lr}
   1b59c:	ldrb	r3, [r1, #16]
   1b5a0:	cmp	r3, #0
   1b5a4:	bne	1b5d4 <__assert_fail@plt+0x9860>
   1b5a8:	vmov	s15, r0
   1b5ac:	vcvt.f32.u32	s13, s15
   1b5b0:	vldr	s14, [r1, #8]
   1b5b4:	vdiv.f32	s15, s13, s14
   1b5b8:	vldr	s14, [pc, #204]	; 1b68c <__assert_fail@plt+0x9918>
   1b5bc:	vcmpe.f32	s15, s14
   1b5c0:	vmrs	APSR_nzcv, fpscr
   1b5c4:	movge	r7, #0
   1b5c8:	bge	1b60c <__assert_fail@plt+0x9898>
   1b5cc:	vcvt.u32.f32	s15, s15
   1b5d0:	vmov	r0, s15
   1b5d4:	cmp	r0, #10
   1b5d8:	movcc	r0, #10
   1b5dc:	orr	r7, r0, #1
   1b5e0:	cmn	r7, #1
   1b5e4:	ldrne	r8, [pc, #164]	; 1b690 <__assert_fail@plt+0x991c>
   1b5e8:	bne	1b638 <__assert_fail@plt+0x98c4>
   1b5ec:	lsr	r3, r7, #30
   1b5f0:	lsl	r2, r7, #2
   1b5f4:	adds	r3, r3, #0
   1b5f8:	movne	r3, #1
   1b5fc:	cmp	r2, #0
   1b600:	movlt	r3, #1
   1b604:	cmp	r3, #0
   1b608:	movne	r7, #0
   1b60c:	mov	r0, r7
   1b610:	pop	{r4, r5, r6, r7, r8, pc}
   1b614:	mov	r4, #3
   1b618:	mov	r1, r4
   1b61c:	mov	r0, r7
   1b620:	bl	23688 <_obstack_memory_used@@Base+0x3cb4>
   1b624:	cmp	r1, #0
   1b628:	bne	1b5ec <__assert_fail@plt+0x9878>
   1b62c:	add	r7, r7, #2
   1b630:	cmn	r7, #1
   1b634:	beq	1b5ec <__assert_fail@plt+0x9878>
   1b638:	cmp	r7, #9
   1b63c:	bls	1b614 <__assert_fail@plt+0x98a0>
   1b640:	umull	r2, r3, r8, r7
   1b644:	lsr	r3, r3, #1
   1b648:	add	r3, r3, r3, lsl #1
   1b64c:	cmp	r7, r3
   1b650:	beq	1b62c <__assert_fail@plt+0x98b8>
   1b654:	mov	r6, #16
   1b658:	mov	r5, #9
   1b65c:	mov	r4, #3
   1b660:	add	r5, r5, r6
   1b664:	add	r4, r4, #2
   1b668:	cmp	r5, r7
   1b66c:	bcs	1b618 <__assert_fail@plt+0x98a4>
   1b670:	add	r6, r6, #8
   1b674:	mov	r1, r4
   1b678:	mov	r0, r7
   1b67c:	bl	23688 <_obstack_memory_used@@Base+0x3cb4>
   1b680:	cmp	r1, #0
   1b684:	bne	1b660 <__assert_fail@plt+0x98ec>
   1b688:	b	1b62c <__assert_fail@plt+0x98b8>
   1b68c:	svcmi	0x00800000
   1b690:	bge	feac6144 <optarg@@GLIBC_2.4+0xfea8ce1c>
   1b694:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b698:	ldr	r7, [r1]
   1b69c:	ldr	r3, [r1, #4]
   1b6a0:	cmp	r7, r3
   1b6a4:	bcs	1b7d8 <__assert_fail@plt+0x9a64>
   1b6a8:	mov	fp, r2
   1b6ac:	mov	sl, r1
   1b6b0:	mov	r6, r0
   1b6b4:	add	r7, r7, #8
   1b6b8:	mov	r9, #0
   1b6bc:	b	1b724 <__assert_fail@plt+0x99b0>
   1b6c0:	str	r5, [r0]
   1b6c4:	ldr	r2, [r6, #12]
   1b6c8:	add	r2, r2, #1
   1b6cc:	str	r2, [r6, #12]
   1b6d0:	str	r9, [r4]
   1b6d4:	ldr	r2, [r6, #36]	; 0x24
   1b6d8:	str	r2, [r4, #4]
   1b6dc:	str	r4, [r6, #36]	; 0x24
   1b6e0:	b	1b76c <__assert_fail@plt+0x99f8>
   1b6e4:	mov	r0, #8
   1b6e8:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   1b6ec:	cmp	r0, #0
   1b6f0:	beq	1b7e0 <__assert_fail@plt+0x9a6c>
   1b6f4:	str	r4, [r0]
   1b6f8:	ldr	r3, [r5, #4]
   1b6fc:	str	r3, [r0, #4]
   1b700:	str	r0, [r5, #4]
   1b704:	str	r9, [r8, #-8]
   1b708:	ldr	r3, [sl, #12]
   1b70c:	sub	r3, r3, #1
   1b710:	str	r3, [sl, #12]
   1b714:	add	r7, r7, #8
   1b718:	ldr	r3, [sl, #4]
   1b71c:	cmp	r3, r8
   1b720:	bls	1b7d0 <__assert_fail@plt+0x9a5c>
   1b724:	mov	r8, r7
   1b728:	ldr	r3, [r7, #-8]
   1b72c:	cmp	r3, #0
   1b730:	beq	1b714 <__assert_fail@plt+0x99a0>
   1b734:	ldr	r4, [r7, #-4]
   1b738:	cmp	r4, #0
   1b73c:	beq	1b778 <__assert_fail@plt+0x9a04>
   1b740:	ldr	r5, [r4]
   1b744:	mov	r1, r5
   1b748:	mov	r0, r6
   1b74c:	bl	1b564 <__assert_fail@plt+0x97f0>
   1b750:	ldr	r3, [r4, #4]
   1b754:	ldr	r2, [r0]
   1b758:	cmp	r2, #0
   1b75c:	beq	1b6c0 <__assert_fail@plt+0x994c>
   1b760:	ldr	r2, [r0, #4]
   1b764:	str	r2, [r4, #4]
   1b768:	str	r4, [r0, #4]
   1b76c:	mov	r4, r3
   1b770:	cmp	r3, #0
   1b774:	bne	1b740 <__assert_fail@plt+0x99cc>
   1b778:	ldr	r4, [r8, #-8]
   1b77c:	str	r9, [r8, #-4]
   1b780:	cmp	fp, #0
   1b784:	bne	1b714 <__assert_fail@plt+0x99a0>
   1b788:	mov	r1, r4
   1b78c:	mov	r0, r6
   1b790:	bl	1b564 <__assert_fail@plt+0x97f0>
   1b794:	mov	r5, r0
   1b798:	ldr	r3, [r0]
   1b79c:	cmp	r3, #0
   1b7a0:	beq	1b7bc <__assert_fail@plt+0x9a48>
   1b7a4:	ldr	r0, [r6, #36]	; 0x24
   1b7a8:	cmp	r0, #0
   1b7ac:	beq	1b6e4 <__assert_fail@plt+0x9970>
   1b7b0:	ldr	r3, [r0, #4]
   1b7b4:	str	r3, [r6, #36]	; 0x24
   1b7b8:	b	1b6f4 <__assert_fail@plt+0x9980>
   1b7bc:	str	r4, [r0]
   1b7c0:	ldr	r3, [r6, #12]
   1b7c4:	add	r3, r3, #1
   1b7c8:	str	r3, [r6, #12]
   1b7cc:	b	1b704 <__assert_fail@plt+0x9990>
   1b7d0:	mov	r0, #1
   1b7d4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7d8:	mov	r0, #1
   1b7dc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7e0:	mov	r0, fp
   1b7e4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7e8:	push	{r4, r5, r6, r7, r8, lr}
   1b7ec:	mov	r6, r0
   1b7f0:	mov	r5, r1
   1b7f4:	mov	r8, r2
   1b7f8:	mov	r7, r3
   1b7fc:	bl	1b564 <__assert_fail@plt+0x97f0>
   1b800:	str	r0, [r8]
   1b804:	ldr	r3, [r0]
   1b808:	cmp	r3, #0
   1b80c:	beq	1b8e4 <__assert_fail@plt+0x9b70>
   1b810:	mov	r4, r0
   1b814:	cmp	r5, r3
   1b818:	beq	1b8ac <__assert_fail@plt+0x9b38>
   1b81c:	ldr	r2, [r6, #28]
   1b820:	mov	r1, r3
   1b824:	mov	r0, r5
   1b828:	blx	r2
   1b82c:	cmp	r0, #0
   1b830:	bne	1b8ac <__assert_fail@plt+0x9b38>
   1b834:	ldr	r3, [r4, #4]
   1b838:	cmp	r3, #0
   1b83c:	beq	1b8ec <__assert_fail@plt+0x9b78>
   1b840:	ldr	r1, [r3]
   1b844:	cmp	r5, r1
   1b848:	beq	1b87c <__assert_fail@plt+0x9b08>
   1b84c:	ldr	r3, [r6, #28]
   1b850:	mov	r0, r5
   1b854:	blx	r3
   1b858:	cmp	r0, #0
   1b85c:	bne	1b87c <__assert_fail@plt+0x9b08>
   1b860:	ldr	r4, [r4, #4]
   1b864:	ldr	r3, [r4, #4]
   1b868:	cmp	r3, #0
   1b86c:	beq	1b8e4 <__assert_fail@plt+0x9b70>
   1b870:	ldr	r1, [r3]
   1b874:	cmp	r5, r1
   1b878:	bne	1b84c <__assert_fail@plt+0x9ad8>
   1b87c:	ldr	r2, [r4, #4]
   1b880:	ldr	r3, [r2]
   1b884:	cmp	r7, #0
   1b888:	beq	1b8e4 <__assert_fail@plt+0x9b70>
   1b88c:	ldr	r1, [r2, #4]
   1b890:	str	r1, [r4, #4]
   1b894:	mov	r1, #0
   1b898:	str	r1, [r2]
   1b89c:	ldr	r1, [r6, #36]	; 0x24
   1b8a0:	str	r1, [r2, #4]
   1b8a4:	str	r2, [r6, #36]	; 0x24
   1b8a8:	b	1b8e4 <__assert_fail@plt+0x9b70>
   1b8ac:	ldr	r3, [r4]
   1b8b0:	cmp	r7, #0
   1b8b4:	beq	1b8e4 <__assert_fail@plt+0x9b70>
   1b8b8:	ldr	r2, [r4, #4]
   1b8bc:	cmp	r2, #0
   1b8c0:	ldmne	r2, {r0, r1}
   1b8c4:	stmne	r4, {r0, r1}
   1b8c8:	movne	r1, #0
   1b8cc:	strne	r1, [r2]
   1b8d0:	ldrne	r1, [r6, #36]	; 0x24
   1b8d4:	strne	r1, [r2, #4]
   1b8d8:	strne	r2, [r6, #36]	; 0x24
   1b8dc:	moveq	r2, #0
   1b8e0:	streq	r2, [r4]
   1b8e4:	mov	r0, r3
   1b8e8:	pop	{r4, r5, r6, r7, r8, pc}
   1b8ec:	mov	r3, #0
   1b8f0:	b	1b8e4 <__assert_fail@plt+0x9b70>
   1b8f4:	ldr	r0, [r0, #8]
   1b8f8:	bx	lr
   1b8fc:	ldr	r0, [r0, #12]
   1b900:	bx	lr
   1b904:	ldr	r0, [r0, #16]
   1b908:	bx	lr
   1b90c:	ldr	r1, [r0]
   1b910:	ldr	ip, [r0, #4]
   1b914:	cmp	r1, ip
   1b918:	bcs	1b970 <__assert_fail@plt+0x9bfc>
   1b91c:	mov	r0, #0
   1b920:	b	1b93c <__assert_fail@plt+0x9bc8>
   1b924:	mov	r2, #1
   1b928:	cmp	r0, r2
   1b92c:	movcc	r0, r2
   1b930:	add	r1, r1, #8
   1b934:	cmp	r1, ip
   1b938:	bcs	1b96c <__assert_fail@plt+0x9bf8>
   1b93c:	ldr	r3, [r1]
   1b940:	cmp	r3, #0
   1b944:	beq	1b930 <__assert_fail@plt+0x9bbc>
   1b948:	ldr	r3, [r1, #4]
   1b94c:	cmp	r3, #0
   1b950:	beq	1b924 <__assert_fail@plt+0x9bb0>
   1b954:	mov	r2, #1
   1b958:	add	r2, r2, #1
   1b95c:	ldr	r3, [r3, #4]
   1b960:	cmp	r3, #0
   1b964:	bne	1b958 <__assert_fail@plt+0x9be4>
   1b968:	b	1b928 <__assert_fail@plt+0x9bb4>
   1b96c:	bx	lr
   1b970:	mov	r0, #0
   1b974:	bx	lr
   1b978:	push	{lr}		; (str lr, [sp, #-4]!)
   1b97c:	ldr	r1, [r0]
   1b980:	ldr	lr, [r0, #4]
   1b984:	cmp	r1, lr
   1b988:	bcs	1b9d8 <__assert_fail@plt+0x9c64>
   1b98c:	mov	r2, #0
   1b990:	mov	ip, r2
   1b994:	b	1b9a4 <__assert_fail@plt+0x9c30>
   1b998:	add	r1, r1, #8
   1b99c:	cmp	r1, lr
   1b9a0:	bcs	1b9e0 <__assert_fail@plt+0x9c6c>
   1b9a4:	ldr	r3, [r1]
   1b9a8:	cmp	r3, #0
   1b9ac:	beq	1b998 <__assert_fail@plt+0x9c24>
   1b9b0:	add	ip, ip, #1
   1b9b4:	add	r2, r2, #1
   1b9b8:	ldr	r3, [r1, #4]
   1b9bc:	cmp	r3, #0
   1b9c0:	beq	1b998 <__assert_fail@plt+0x9c24>
   1b9c4:	add	r2, r2, #1
   1b9c8:	ldr	r3, [r3, #4]
   1b9cc:	cmp	r3, #0
   1b9d0:	bne	1b9c4 <__assert_fail@plt+0x9c50>
   1b9d4:	b	1b998 <__assert_fail@plt+0x9c24>
   1b9d8:	mov	r2, #0
   1b9dc:	mov	ip, r2
   1b9e0:	ldr	r3, [r0, #12]
   1b9e4:	cmp	r3, ip
   1b9e8:	beq	1b9f4 <__assert_fail@plt+0x9c80>
   1b9ec:	mov	r0, #0
   1b9f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9f4:	ldr	r0, [r0, #16]
   1b9f8:	cmp	r0, r2
   1b9fc:	movne	r0, #0
   1ba00:	moveq	r0, #1
   1ba04:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba08:	push	{r4, r5, r6, r7, r8, lr}
   1ba0c:	sub	sp, sp, #8
   1ba10:	mov	r6, r0
   1ba14:	mov	r4, r1
   1ba18:	ldr	r5, [r0, #8]
   1ba1c:	ldr	r7, [r0, #12]
   1ba20:	bl	1b90c <__assert_fail@plt+0x9b98>
   1ba24:	mov	r8, r0
   1ba28:	ldr	r3, [r6, #16]
   1ba2c:	ldr	r2, [pc, #116]	; 1baa8 <__assert_fail@plt+0x9d34>
   1ba30:	mov	r1, #1
   1ba34:	mov	r0, r4
   1ba38:	bl	11c18 <__fprintf_chk@plt>
   1ba3c:	mov	r3, r5
   1ba40:	ldr	r2, [pc, #100]	; 1baac <__assert_fail@plt+0x9d38>
   1ba44:	mov	r1, #1
   1ba48:	mov	r0, r4
   1ba4c:	bl	11c18 <__fprintf_chk@plt>
   1ba50:	vmov	s15, r7
   1ba54:	vcvt.f64.u32	d6, s15
   1ba58:	vldr	d7, [pc, #64]	; 1baa0 <__assert_fail@plt+0x9d2c>
   1ba5c:	vmul.f64	d6, d6, d7
   1ba60:	vmov	s15, r5
   1ba64:	vcvt.f64.u32	d7, s15
   1ba68:	vdiv.f64	d5, d6, d7
   1ba6c:	vstr	d5, [sp]
   1ba70:	mov	r3, r7
   1ba74:	ldr	r2, [pc, #52]	; 1bab0 <__assert_fail@plt+0x9d3c>
   1ba78:	mov	r1, #1
   1ba7c:	mov	r0, r4
   1ba80:	bl	11c18 <__fprintf_chk@plt>
   1ba84:	mov	r3, r8
   1ba88:	ldr	r2, [pc, #36]	; 1bab4 <__assert_fail@plt+0x9d40>
   1ba8c:	mov	r1, #1
   1ba90:	mov	r0, r4
   1ba94:	bl	11c18 <__fprintf_chk@plt>
   1ba98:	add	sp, sp, #8
   1ba9c:	pop	{r4, r5, r6, r7, r8, pc}
   1baa0:	andeq	r0, r0, r0
   1baa4:	subsmi	r0, r9, r0
   1baa8:	muleq	r2, ip, r0
   1baac:	strheq	r8, [r2], -r4
   1bab0:	andeq	r8, r2, ip, asr #1
   1bab4:	strdeq	r8, [r2], -r0
   1bab8:	push	{r4, r5, r6, lr}
   1babc:	mov	r6, r0
   1bac0:	mov	r5, r1
   1bac4:	bl	1b564 <__assert_fail@plt+0x97f0>
   1bac8:	ldr	r1, [r0]
   1bacc:	cmp	r1, #0
   1bad0:	beq	1bb24 <__assert_fail@plt+0x9db0>
   1bad4:	mov	r4, r0
   1bad8:	cmp	r0, #0
   1badc:	beq	1bb2c <__assert_fail@plt+0x9db8>
   1bae0:	cmp	r5, r1
   1bae4:	beq	1bb14 <__assert_fail@plt+0x9da0>
   1bae8:	ldr	r3, [r6, #28]
   1baec:	mov	r0, r5
   1baf0:	blx	r3
   1baf4:	cmp	r0, #0
   1baf8:	bne	1bb14 <__assert_fail@plt+0x9da0>
   1bafc:	ldr	r4, [r4, #4]
   1bb00:	cmp	r4, #0
   1bb04:	beq	1bb1c <__assert_fail@plt+0x9da8>
   1bb08:	ldr	r1, [r4]
   1bb0c:	cmp	r5, r1
   1bb10:	bne	1bae8 <__assert_fail@plt+0x9d74>
   1bb14:	ldr	r0, [r4]
   1bb18:	pop	{r4, r5, r6, pc}
   1bb1c:	mov	r0, #0
   1bb20:	pop	{r4, r5, r6, pc}
   1bb24:	mov	r0, #0
   1bb28:	pop	{r4, r5, r6, pc}
   1bb2c:	mov	r0, #0
   1bb30:	pop	{r4, r5, r6, pc}
   1bb34:	ldr	r3, [r0, #16]
   1bb38:	cmp	r3, #0
   1bb3c:	beq	1bb80 <__assert_fail@plt+0x9e0c>
   1bb40:	ldr	r3, [r0]
   1bb44:	ldr	r2, [r0, #4]
   1bb48:	cmp	r3, r2
   1bb4c:	bcs	1bb78 <__assert_fail@plt+0x9e04>
   1bb50:	ldr	r0, [r3]
   1bb54:	cmp	r0, #0
   1bb58:	bne	1bb74 <__assert_fail@plt+0x9e00>
   1bb5c:	add	r3, r3, #8
   1bb60:	cmp	r3, r2
   1bb64:	bcs	1bb78 <__assert_fail@plt+0x9e04>
   1bb68:	ldr	r0, [r3]
   1bb6c:	cmp	r0, #0
   1bb70:	beq	1bb5c <__assert_fail@plt+0x9de8>
   1bb74:	bx	lr
   1bb78:	push	{r4, lr}
   1bb7c:	bl	11d2c <abort@plt>
   1bb80:	mov	r0, #0
   1bb84:	b	1bb74 <__assert_fail@plt+0x9e00>
   1bb88:	push	{r4, r5, r6, lr}
   1bb8c:	mov	r5, r0
   1bb90:	mov	r4, r1
   1bb94:	bl	1b564 <__assert_fail@plt+0x97f0>
   1bb98:	mov	r2, r0
   1bb9c:	mov	r3, r0
   1bba0:	ldr	r1, [r3]
   1bba4:	cmp	r4, r1
   1bba8:	beq	1bbbc <__assert_fail@plt+0x9e48>
   1bbac:	ldr	r3, [r3, #4]
   1bbb0:	cmp	r3, #0
   1bbb4:	bne	1bba0 <__assert_fail@plt+0x9e2c>
   1bbb8:	b	1bbc8 <__assert_fail@plt+0x9e54>
   1bbbc:	ldr	r3, [r3, #4]
   1bbc0:	cmp	r3, #0
   1bbc4:	bne	1bbe8 <__assert_fail@plt+0x9e74>
   1bbc8:	ldr	r3, [r5, #4]
   1bbcc:	add	r2, r2, #8
   1bbd0:	cmp	r2, r3
   1bbd4:	bcs	1bbf0 <__assert_fail@plt+0x9e7c>
   1bbd8:	ldr	r0, [r2]
   1bbdc:	cmp	r0, #0
   1bbe0:	beq	1bbcc <__assert_fail@plt+0x9e58>
   1bbe4:	pop	{r4, r5, r6, pc}
   1bbe8:	ldr	r0, [r3]
   1bbec:	pop	{r4, r5, r6, pc}
   1bbf0:	mov	r0, #0
   1bbf4:	pop	{r4, r5, r6, pc}
   1bbf8:	push	{r4, r5, lr}
   1bbfc:	ldr	r4, [r0]
   1bc00:	ldr	r3, [r0, #4]
   1bc04:	cmp	r4, r3
   1bc08:	bcs	1bc74 <__assert_fail@plt+0x9f00>
   1bc0c:	mov	r5, r0
   1bc10:	mov	r0, #0
   1bc14:	b	1bc28 <__assert_fail@plt+0x9eb4>
   1bc18:	add	r4, r4, #8
   1bc1c:	ldr	r3, [r5, #4]
   1bc20:	cmp	r3, r4
   1bc24:	bls	1bc70 <__assert_fail@plt+0x9efc>
   1bc28:	ldr	r3, [r4]
   1bc2c:	cmp	r3, #0
   1bc30:	beq	1bc18 <__assert_fail@plt+0x9ea4>
   1bc34:	cmp	r4, #0
   1bc38:	beq	1bc18 <__assert_fail@plt+0x9ea4>
   1bc3c:	cmp	r2, r0
   1bc40:	popls	{r4, r5, pc}
   1bc44:	add	ip, r1, r0, lsl #2
   1bc48:	mov	r3, r4
   1bc4c:	add	r0, r0, #1
   1bc50:	ldr	lr, [r3]
   1bc54:	str	lr, [ip], #4
   1bc58:	ldr	r3, [r3, #4]
   1bc5c:	cmp	r3, #0
   1bc60:	beq	1bc18 <__assert_fail@plt+0x9ea4>
   1bc64:	cmp	r2, r0
   1bc68:	bne	1bc4c <__assert_fail@plt+0x9ed8>
   1bc6c:	pop	{r4, r5, pc}
   1bc70:	pop	{r4, r5, pc}
   1bc74:	mov	r0, #0
   1bc78:	pop	{r4, r5, pc}
   1bc7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bc80:	ldr	r8, [r0]
   1bc84:	ldr	r3, [r0, #4]
   1bc88:	cmp	r8, r3
   1bc8c:	bcs	1bcf4 <__assert_fail@plt+0x9f80>
   1bc90:	mov	r7, r2
   1bc94:	mov	r6, r1
   1bc98:	mov	r9, r0
   1bc9c:	mov	r5, #0
   1bca0:	b	1bcb4 <__assert_fail@plt+0x9f40>
   1bca4:	add	r8, r8, #8
   1bca8:	ldr	r3, [r9, #4]
   1bcac:	cmp	r3, r8
   1bcb0:	bls	1bcf8 <__assert_fail@plt+0x9f84>
   1bcb4:	ldr	r3, [r8]
   1bcb8:	cmp	r3, #0
   1bcbc:	beq	1bca4 <__assert_fail@plt+0x9f30>
   1bcc0:	cmp	r8, #0
   1bcc4:	beq	1bca4 <__assert_fail@plt+0x9f30>
   1bcc8:	mov	r4, r8
   1bccc:	mov	r1, r7
   1bcd0:	ldr	r0, [r4]
   1bcd4:	blx	r6
   1bcd8:	cmp	r0, #0
   1bcdc:	beq	1bcf8 <__assert_fail@plt+0x9f84>
   1bce0:	add	r5, r5, #1
   1bce4:	ldr	r4, [r4, #4]
   1bce8:	cmp	r4, #0
   1bcec:	bne	1bccc <__assert_fail@plt+0x9f58>
   1bcf0:	b	1bca4 <__assert_fail@plt+0x9f30>
   1bcf4:	mov	r5, #0
   1bcf8:	mov	r0, r5
   1bcfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bd00:	ldrb	r3, [r0]
   1bd04:	cmp	r3, #0
   1bd08:	beq	1bd40 <__assert_fail@plt+0x9fcc>
   1bd0c:	push	{r4, r5, r6, lr}
   1bd10:	mov	r4, r0
   1bd14:	mov	r5, r1
   1bd18:	mov	r1, #0
   1bd1c:	rsb	r0, r1, r1, lsl #5
   1bd20:	mov	r1, r5
   1bd24:	add	r0, r0, r3
   1bd28:	bl	23688 <_obstack_memory_used@@Base+0x3cb4>
   1bd2c:	ldrb	r3, [r4, #1]!
   1bd30:	cmp	r3, #0
   1bd34:	bne	1bd1c <__assert_fail@plt+0x9fa8>
   1bd38:	mov	r0, r1
   1bd3c:	pop	{r4, r5, r6, pc}
   1bd40:	mov	r1, #0
   1bd44:	mov	r0, r1
   1bd48:	bx	lr
   1bd4c:	push	{lr}		; (str lr, [sp, #-4]!)
   1bd50:	mov	ip, r0
   1bd54:	ldr	lr, [pc, #16]	; 1bd6c <__assert_fail@plt+0x9ff8>
   1bd58:	ldm	lr!, {r0, r1, r2, r3}
   1bd5c:	stmia	ip!, {r0, r1, r2, r3}
   1bd60:	ldr	r3, [lr]
   1bd64:	str	r3, [ip]
   1bd68:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd6c:	andeq	r8, r2, r8, lsl #1
   1bd70:	push	{r4, r5, r6, r7, r8, lr}
   1bd74:	mov	r8, r0
   1bd78:	mov	r5, r1
   1bd7c:	subs	r7, r2, #0
   1bd80:	ldr	r2, [pc, #180]	; 1be3c <__assert_fail@plt+0xa0c8>
   1bd84:	cmp	r7, #0
   1bd88:	moveq	r7, r2
   1bd8c:	subs	r6, r3, #0
   1bd90:	ldr	r3, [pc, #168]	; 1be40 <__assert_fail@plt+0xa0cc>
   1bd94:	cmp	r6, #0
   1bd98:	moveq	r6, r3
   1bd9c:	mov	r0, #40	; 0x28
   1bda0:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   1bda4:	subs	r4, r0, #0
   1bda8:	beq	1be24 <__assert_fail@plt+0xa0b0>
   1bdac:	ldr	r3, [pc, #144]	; 1be44 <__assert_fail@plt+0xa0d0>
   1bdb0:	cmp	r5, #0
   1bdb4:	moveq	r5, r3
   1bdb8:	str	r5, [r4, #20]
   1bdbc:	mov	r0, r4
   1bdc0:	bl	1b4a4 <__assert_fail@plt+0x9730>
   1bdc4:	cmp	r0, #0
   1bdc8:	beq	1be2c <__assert_fail@plt+0xa0b8>
   1bdcc:	mov	r1, r5
   1bdd0:	mov	r0, r8
   1bdd4:	bl	1b598 <__assert_fail@plt+0x9824>
   1bdd8:	str	r0, [r4, #8]
   1bddc:	cmp	r0, #0
   1bde0:	beq	1be2c <__assert_fail@plt+0xa0b8>
   1bde4:	mov	r1, #8
   1bde8:	bl	230e4 <_obstack_memory_used@@Base+0x3710>
   1bdec:	str	r0, [r4]
   1bdf0:	cmp	r0, #0
   1bdf4:	beq	1be2c <__assert_fail@plt+0xa0b8>
   1bdf8:	ldr	r3, [r4, #8]
   1bdfc:	add	r0, r0, r3, lsl #3
   1be00:	str	r0, [r4, #4]
   1be04:	mov	r3, #0
   1be08:	str	r3, [r4, #12]
   1be0c:	str	r3, [r4, #16]
   1be10:	str	r7, [r4, #24]
   1be14:	str	r6, [r4, #28]
   1be18:	ldr	r2, [sp, #24]
   1be1c:	str	r2, [r4, #32]
   1be20:	str	r3, [r4, #36]	; 0x24
   1be24:	mov	r0, r4
   1be28:	pop	{r4, r5, r6, r7, r8, pc}
   1be2c:	mov	r0, r4
   1be30:	bl	1b388 <__assert_fail@plt+0x9614>
   1be34:	mov	r4, #0
   1be38:	b	1be24 <__assert_fail@plt+0xa0b0>
   1be3c:	andeq	fp, r1, r0, lsl #9
   1be40:	muleq	r1, r4, r4
   1be44:	andeq	r8, r2, r8, lsl #1
   1be48:	push	{r4, r5, r6, r7, r8, lr}
   1be4c:	mov	r5, r0
   1be50:	ldr	r7, [r0]
   1be54:	ldr	r3, [r0, #4]
   1be58:	cmp	r7, r3
   1be5c:	bcs	1bef0 <__assert_fail@plt+0xa17c>
   1be60:	add	r7, r7, #8
   1be64:	mov	r6, #0
   1be68:	b	1bed0 <__assert_fail@plt+0xa15c>
   1be6c:	str	r6, [r4]
   1be70:	ldr	r3, [r4, #4]
   1be74:	ldr	r2, [r5, #36]	; 0x24
   1be78:	str	r2, [r4, #4]
   1be7c:	str	r4, [r5, #36]	; 0x24
   1be80:	mov	r4, r3
   1be84:	cmp	r3, #0
   1be88:	beq	1bea4 <__assert_fail@plt+0xa130>
   1be8c:	ldr	r3, [r5, #32]
   1be90:	cmp	r3, #0
   1be94:	beq	1be6c <__assert_fail@plt+0xa0f8>
   1be98:	ldr	r0, [r4]
   1be9c:	blx	r3
   1bea0:	b	1be6c <__assert_fail@plt+0xa0f8>
   1bea4:	ldr	r3, [r5, #32]
   1bea8:	cmp	r3, #0
   1beac:	beq	1beb8 <__assert_fail@plt+0xa144>
   1beb0:	ldr	r0, [r8, #-8]
   1beb4:	blx	r3
   1beb8:	str	r6, [r8, #-8]
   1bebc:	str	r6, [r8, #-4]
   1bec0:	add	r7, r7, #8
   1bec4:	ldr	r3, [r5, #4]
   1bec8:	cmp	r3, r8
   1becc:	bls	1bef0 <__assert_fail@plt+0xa17c>
   1bed0:	mov	r8, r7
   1bed4:	ldr	r3, [r7, #-8]
   1bed8:	cmp	r3, #0
   1bedc:	beq	1bec0 <__assert_fail@plt+0xa14c>
   1bee0:	ldr	r4, [r7, #-4]
   1bee4:	cmp	r4, #0
   1bee8:	bne	1be8c <__assert_fail@plt+0xa118>
   1beec:	b	1bea4 <__assert_fail@plt+0xa130>
   1bef0:	mov	r3, #0
   1bef4:	str	r3, [r5, #12]
   1bef8:	str	r3, [r5, #16]
   1befc:	pop	{r4, r5, r6, r7, r8, pc}
   1bf00:	push	{r4, r5, r6, lr}
   1bf04:	mov	r5, r0
   1bf08:	ldr	r3, [r0, #32]
   1bf0c:	cmp	r3, #0
   1bf10:	beq	1bf78 <__assert_fail@plt+0xa204>
   1bf14:	ldr	r3, [r0, #16]
   1bf18:	cmp	r3, #0
   1bf1c:	beq	1bf78 <__assert_fail@plt+0xa204>
   1bf20:	ldr	r6, [r0]
   1bf24:	ldr	r3, [r0, #4]
   1bf28:	cmp	r6, r3
   1bf2c:	bcc	1bf44 <__assert_fail@plt+0xa1d0>
   1bf30:	b	1bfb8 <__assert_fail@plt+0xa244>
   1bf34:	add	r6, r6, #8
   1bf38:	ldr	r3, [r5, #4]
   1bf3c:	cmp	r3, r6
   1bf40:	bls	1bf78 <__assert_fail@plt+0xa204>
   1bf44:	ldr	r3, [r6]
   1bf48:	cmp	r3, #0
   1bf4c:	beq	1bf34 <__assert_fail@plt+0xa1c0>
   1bf50:	cmp	r6, #0
   1bf54:	beq	1bf34 <__assert_fail@plt+0xa1c0>
   1bf58:	mov	r4, r6
   1bf5c:	ldr	r3, [r5, #32]
   1bf60:	ldr	r0, [r4]
   1bf64:	blx	r3
   1bf68:	ldr	r4, [r4, #4]
   1bf6c:	cmp	r4, #0
   1bf70:	bne	1bf5c <__assert_fail@plt+0xa1e8>
   1bf74:	b	1bf34 <__assert_fail@plt+0xa1c0>
   1bf78:	ldr	r6, [r5]
   1bf7c:	ldr	r3, [r5, #4]
   1bf80:	cmp	r6, r3
   1bf84:	bcs	1bfb8 <__assert_fail@plt+0xa244>
   1bf88:	ldr	r0, [r6, #4]
   1bf8c:	cmp	r0, #0
   1bf90:	beq	1bfa8 <__assert_fail@plt+0xa234>
   1bf94:	ldr	r4, [r0, #4]
   1bf98:	bl	1b388 <__assert_fail@plt+0x9614>
   1bf9c:	mov	r0, r4
   1bfa0:	cmp	r4, #0
   1bfa4:	bne	1bf94 <__assert_fail@plt+0xa220>
   1bfa8:	add	r6, r6, #8
   1bfac:	ldr	r3, [r5, #4]
   1bfb0:	cmp	r3, r6
   1bfb4:	bhi	1bf88 <__assert_fail@plt+0xa214>
   1bfb8:	ldr	r0, [r5, #36]	; 0x24
   1bfbc:	cmp	r0, #0
   1bfc0:	beq	1bfd8 <__assert_fail@plt+0xa264>
   1bfc4:	ldr	r4, [r0, #4]
   1bfc8:	bl	1b388 <__assert_fail@plt+0x9614>
   1bfcc:	mov	r0, r4
   1bfd0:	cmp	r4, #0
   1bfd4:	bne	1bfc4 <__assert_fail@plt+0xa250>
   1bfd8:	ldr	r0, [r5]
   1bfdc:	bl	1b388 <__assert_fail@plt+0x9614>
   1bfe0:	mov	r0, r5
   1bfe4:	bl	1b388 <__assert_fail@plt+0x9614>
   1bfe8:	pop	{r4, r5, r6, pc}
   1bfec:	push	{r4, r5, lr}
   1bff0:	sub	sp, sp, #44	; 0x2c
   1bff4:	mov	r4, r0
   1bff8:	mov	r0, r1
   1bffc:	ldr	r1, [r4, #20]
   1c000:	bl	1b598 <__assert_fail@plt+0x9824>
   1c004:	subs	r5, r0, #0
   1c008:	beq	1c100 <__assert_fail@plt+0xa38c>
   1c00c:	ldr	r3, [r4, #8]
   1c010:	cmp	r5, r3
   1c014:	beq	1c110 <__assert_fail@plt+0xa39c>
   1c018:	mov	r1, #8
   1c01c:	mov	r0, r5
   1c020:	bl	230e4 <_obstack_memory_used@@Base+0x3710>
   1c024:	str	r0, [sp]
   1c028:	cmp	r0, #0
   1c02c:	beq	1c118 <__assert_fail@plt+0xa3a4>
   1c030:	str	r5, [sp, #8]
   1c034:	add	r0, r0, r5, lsl #3
   1c038:	str	r0, [sp, #4]
   1c03c:	mov	r2, #0
   1c040:	str	r2, [sp, #12]
   1c044:	str	r2, [sp, #16]
   1c048:	ldr	r3, [r4, #20]
   1c04c:	str	r3, [sp, #20]
   1c050:	ldr	r3, [r4, #24]
   1c054:	str	r3, [sp, #24]
   1c058:	ldr	r3, [r4, #28]
   1c05c:	str	r3, [sp, #28]
   1c060:	ldr	r3, [r4, #32]
   1c064:	str	r3, [sp, #32]
   1c068:	ldr	r3, [r4, #36]	; 0x24
   1c06c:	str	r3, [sp, #36]	; 0x24
   1c070:	mov	r1, r4
   1c074:	mov	r0, sp
   1c078:	bl	1b694 <__assert_fail@plt+0x9920>
   1c07c:	subs	r5, r0, #0
   1c080:	bne	1c0c8 <__assert_fail@plt+0xa354>
   1c084:	ldr	r3, [sp, #36]	; 0x24
   1c088:	str	r3, [r4, #36]	; 0x24
   1c08c:	mov	r2, #1
   1c090:	mov	r1, sp
   1c094:	mov	r0, r4
   1c098:	bl	1b694 <__assert_fail@plt+0x9920>
   1c09c:	cmp	r0, #0
   1c0a0:	beq	1c0fc <__assert_fail@plt+0xa388>
   1c0a4:	mov	r2, #0
   1c0a8:	mov	r1, sp
   1c0ac:	mov	r0, r4
   1c0b0:	bl	1b694 <__assert_fail@plt+0x9920>
   1c0b4:	cmp	r0, #0
   1c0b8:	beq	1c0fc <__assert_fail@plt+0xa388>
   1c0bc:	ldr	r0, [sp]
   1c0c0:	bl	1b388 <__assert_fail@plt+0x9614>
   1c0c4:	b	1c104 <__assert_fail@plt+0xa390>
   1c0c8:	ldr	r0, [r4]
   1c0cc:	bl	1b388 <__assert_fail@plt+0x9614>
   1c0d0:	ldr	r3, [sp]
   1c0d4:	str	r3, [r4]
   1c0d8:	ldr	r3, [sp, #4]
   1c0dc:	str	r3, [r4, #4]
   1c0e0:	ldr	r3, [sp, #8]
   1c0e4:	str	r3, [r4, #8]
   1c0e8:	ldr	r3, [sp, #12]
   1c0ec:	str	r3, [r4, #12]
   1c0f0:	ldr	r3, [sp, #36]	; 0x24
   1c0f4:	str	r3, [r4, #36]	; 0x24
   1c0f8:	b	1c104 <__assert_fail@plt+0xa390>
   1c0fc:	bl	11d2c <abort@plt>
   1c100:	mov	r5, #0
   1c104:	mov	r0, r5
   1c108:	add	sp, sp, #44	; 0x2c
   1c10c:	pop	{r4, r5, pc}
   1c110:	mov	r5, #1
   1c114:	b	1c104 <__assert_fail@plt+0xa390>
   1c118:	mov	r5, #0
   1c11c:	b	1c104 <__assert_fail@plt+0xa390>
   1c120:	push	{r4, r5, r6, lr}
   1c124:	sub	sp, sp, #8
   1c128:	subs	r6, r1, #0
   1c12c:	beq	1c168 <__assert_fail@plt+0xa3f4>
   1c130:	mov	r4, r0
   1c134:	mov	r5, r2
   1c138:	mov	r3, #0
   1c13c:	add	r2, sp, #4
   1c140:	mov	r1, r6
   1c144:	bl	1b7e8 <__assert_fail@plt+0x9a74>
   1c148:	cmp	r0, #0
   1c14c:	beq	1c16c <__assert_fail@plt+0xa3f8>
   1c150:	cmp	r5, #0
   1c154:	moveq	r0, #0
   1c158:	strne	r0, [r5]
   1c15c:	movne	r0, #0
   1c160:	add	sp, sp, #8
   1c164:	pop	{r4, r5, r6, pc}
   1c168:	bl	11d2c <abort@plt>
   1c16c:	vldr	s15, [r4, #12]
   1c170:	vcvt.f32.u32	s14, s15
   1c174:	ldr	r3, [r4, #20]
   1c178:	vldr	s15, [r4, #8]
   1c17c:	vcvt.f32.u32	s15, s15
   1c180:	vldr	s13, [r3, #8]
   1c184:	vmul.f32	s15, s15, s13
   1c188:	vcmpe.f32	s14, s15
   1c18c:	vmrs	APSR_nzcv, fpscr
   1c190:	bgt	1c1e0 <__assert_fail@plt+0xa46c>
   1c194:	ldr	r3, [sp, #4]
   1c198:	ldr	r2, [r3]
   1c19c:	cmp	r2, #0
   1c1a0:	beq	1c284 <__assert_fail@plt+0xa510>
   1c1a4:	ldr	r0, [r4, #36]	; 0x24
   1c1a8:	cmp	r0, #0
   1c1ac:	beq	1c26c <__assert_fail@plt+0xa4f8>
   1c1b0:	ldr	r3, [r0, #4]
   1c1b4:	str	r3, [r4, #36]	; 0x24
   1c1b8:	str	r6, [r0]
   1c1bc:	ldr	r3, [sp, #4]
   1c1c0:	ldr	r2, [r3, #4]
   1c1c4:	str	r2, [r0, #4]
   1c1c8:	str	r0, [r3, #4]
   1c1cc:	ldr	r3, [r4, #16]
   1c1d0:	add	r3, r3, #1
   1c1d4:	str	r3, [r4, #16]
   1c1d8:	mov	r0, #1
   1c1dc:	b	1c160 <__assert_fail@plt+0xa3ec>
   1c1e0:	mov	r0, r4
   1c1e4:	bl	1b4a4 <__assert_fail@plt+0x9730>
   1c1e8:	ldr	r3, [r4, #20]
   1c1ec:	vldr	s13, [r3, #8]
   1c1f0:	vldr	s15, [r4, #8]
   1c1f4:	vcvt.f32.u32	s15, s15
   1c1f8:	vldr	s14, [r4, #12]
   1c1fc:	vcvt.f32.u32	s14, s14
   1c200:	vmul.f32	s12, s13, s15
   1c204:	vcmpe.f32	s14, s12
   1c208:	vmrs	APSR_nzcv, fpscr
   1c20c:	ble	1c194 <__assert_fail@plt+0xa420>
   1c210:	ldrb	r2, [r3, #16]
   1c214:	cmp	r2, #0
   1c218:	vldr	s14, [r3, #12]
   1c21c:	vmul.f32	s15, s15, s14
   1c220:	vmuleq.f32	s15, s15, s13
   1c224:	vldr	s14, [pc, #140]	; 1c2b8 <__assert_fail@plt+0xa544>
   1c228:	vcmpe.f32	s15, s14
   1c22c:	vmrs	APSR_nzcv, fpscr
   1c230:	bge	1c2a8 <__assert_fail@plt+0xa534>
   1c234:	vcvt.u32.f32	s15, s15
   1c238:	vmov	r1, s15
   1c23c:	mov	r0, r4
   1c240:	bl	1bfec <__assert_fail@plt+0xa278>
   1c244:	cmp	r0, #0
   1c248:	beq	1c2b0 <__assert_fail@plt+0xa53c>
   1c24c:	mov	r3, #0
   1c250:	add	r2, sp, #4
   1c254:	mov	r1, r6
   1c258:	mov	r0, r4
   1c25c:	bl	1b7e8 <__assert_fail@plt+0x9a74>
   1c260:	cmp	r0, #0
   1c264:	beq	1c194 <__assert_fail@plt+0xa420>
   1c268:	bl	11d2c <abort@plt>
   1c26c:	mov	r0, #8
   1c270:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   1c274:	cmp	r0, #0
   1c278:	bne	1c1b8 <__assert_fail@plt+0xa444>
   1c27c:	mvn	r0, #0
   1c280:	b	1c160 <__assert_fail@plt+0xa3ec>
   1c284:	str	r6, [r3]
   1c288:	ldr	r3, [r4, #16]
   1c28c:	add	r3, r3, #1
   1c290:	str	r3, [r4, #16]
   1c294:	ldr	r3, [r4, #12]
   1c298:	add	r3, r3, #1
   1c29c:	str	r3, [r4, #12]
   1c2a0:	mov	r0, #1
   1c2a4:	b	1c160 <__assert_fail@plt+0xa3ec>
   1c2a8:	mvn	r0, #0
   1c2ac:	b	1c160 <__assert_fail@plt+0xa3ec>
   1c2b0:	mvn	r0, #0
   1c2b4:	b	1c160 <__assert_fail@plt+0xa3ec>
   1c2b8:	svcmi	0x00800000
   1c2bc:	push	{r4, lr}
   1c2c0:	sub	sp, sp, #8
   1c2c4:	mov	r4, r1
   1c2c8:	add	r2, sp, #4
   1c2cc:	bl	1c120 <__assert_fail@plt+0xa3ac>
   1c2d0:	cmn	r0, #1
   1c2d4:	beq	1c2ec <__assert_fail@plt+0xa578>
   1c2d8:	cmp	r0, #0
   1c2dc:	movne	r0, r4
   1c2e0:	ldreq	r0, [sp, #4]
   1c2e4:	add	sp, sp, #8
   1c2e8:	pop	{r4, pc}
   1c2ec:	mov	r0, #0
   1c2f0:	b	1c2e4 <__assert_fail@plt+0xa570>
   1c2f4:	push	{r4, r5, r6, lr}
   1c2f8:	sub	sp, sp, #8
   1c2fc:	mov	r4, r0
   1c300:	mov	r3, #1
   1c304:	add	r2, sp, #4
   1c308:	bl	1b7e8 <__assert_fail@plt+0x9a74>
   1c30c:	subs	r5, r0, #0
   1c310:	beq	1c330 <__assert_fail@plt+0xa5bc>
   1c314:	ldr	r3, [r4, #16]
   1c318:	sub	r3, r3, #1
   1c31c:	str	r3, [r4, #16]
   1c320:	ldr	r3, [sp, #4]
   1c324:	ldr	r3, [r3]
   1c328:	cmp	r3, #0
   1c32c:	beq	1c33c <__assert_fail@plt+0xa5c8>
   1c330:	mov	r0, r5
   1c334:	add	sp, sp, #8
   1c338:	pop	{r4, r5, r6, pc}
   1c33c:	ldr	r3, [r4, #12]
   1c340:	sub	r3, r3, #1
   1c344:	str	r3, [r4, #12]
   1c348:	vmov	s15, r3
   1c34c:	vcvt.f32.u32	s15, s15
   1c350:	ldr	r3, [r4, #20]
   1c354:	vldr	s14, [r4, #8]
   1c358:	vcvt.f32.u32	s14, s14
   1c35c:	vldr	s13, [r3]
   1c360:	vmul.f32	s14, s14, s13
   1c364:	vcmpe.f32	s15, s14
   1c368:	vmrs	APSR_nzcv, fpscr
   1c36c:	bpl	1c330 <__assert_fail@plt+0xa5bc>
   1c370:	mov	r0, r4
   1c374:	bl	1b4a4 <__assert_fail@plt+0x9730>
   1c378:	ldr	r3, [r4, #20]
   1c37c:	vldr	s15, [r4, #8]
   1c380:	vcvt.f32.u32	s15, s15
   1c384:	vldr	s14, [r4, #12]
   1c388:	vcvt.f32.u32	s13, s14
   1c38c:	vldr	s14, [r3]
   1c390:	vmul.f32	s14, s15, s14
   1c394:	vcmpe.f32	s13, s14
   1c398:	vmrs	APSR_nzcv, fpscr
   1c39c:	bpl	1c330 <__assert_fail@plt+0xa5bc>
   1c3a0:	ldrb	r2, [r3, #16]
   1c3a4:	cmp	r2, #0
   1c3a8:	vldr	s14, [r3, #4]
   1c3ac:	vmuleq.f32	s15, s15, s14
   1c3b0:	vldreq	s14, [r3, #8]
   1c3b4:	vmul.f32	s15, s15, s14
   1c3b8:	vcvt.u32.f32	s15, s15
   1c3bc:	vmov	r1, s15
   1c3c0:	mov	r0, r4
   1c3c4:	bl	1bfec <__assert_fail@plt+0xa278>
   1c3c8:	cmp	r0, #0
   1c3cc:	bne	1c330 <__assert_fail@plt+0xa5bc>
   1c3d0:	ldr	r0, [r4, #36]	; 0x24
   1c3d4:	cmp	r0, #0
   1c3d8:	beq	1c3f0 <__assert_fail@plt+0xa67c>
   1c3dc:	ldr	r6, [r0, #4]
   1c3e0:	bl	1b388 <__assert_fail@plt+0x9614>
   1c3e4:	mov	r0, r6
   1c3e8:	cmp	r6, #0
   1c3ec:	bne	1c3dc <__assert_fail@plt+0xa668>
   1c3f0:	mov	r3, #0
   1c3f4:	str	r3, [r4, #36]	; 0x24
   1c3f8:	b	1c330 <__assert_fail@plt+0xa5bc>
   1c3fc:	push	{r4, lr}
   1c400:	bl	1c2f4 <__assert_fail@plt+0xa580>
   1c404:	pop	{r4, pc}
   1c408:	push	{r4, r5, r6, lr}
   1c40c:	mov	r4, r0
   1c410:	mov	r6, r1
   1c414:	ldr	r0, [r0]
   1c418:	bl	233e0 <_obstack_memory_used@@Base+0x3a0c>
   1c41c:	ldrd	r4, [r4, #8]
   1c420:	mov	r2, r6
   1c424:	mov	r3, #0
   1c428:	eor	r4, r4, r0
   1c42c:	mov	r0, r4
   1c430:	mov	r1, r5
   1c434:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   1c438:	mov	r0, r2
   1c43c:	pop	{r4, r5, r6, pc}
   1c440:	push	{r4, r5, r6, lr}
   1c444:	ldrd	r4, [r0, #8]
   1c448:	ldrd	r2, [r1, #8]
   1c44c:	cmp	r5, r3
   1c450:	cmpeq	r4, r2
   1c454:	beq	1c460 <__assert_fail@plt+0xa6ec>
   1c458:	mov	r0, #0
   1c45c:	pop	{r4, r5, r6, pc}
   1c460:	ldrd	r4, [r0, #16]
   1c464:	ldrd	r2, [r1, #16]
   1c468:	cmp	r5, r3
   1c46c:	cmpeq	r4, r2
   1c470:	beq	1c47c <__assert_fail@plt+0xa708>
   1c474:	mov	r0, #0
   1c478:	pop	{r4, r5, r6, pc}
   1c47c:	ldr	r1, [r1]
   1c480:	ldr	r0, [r0]
   1c484:	bl	118a0 <strcmp@plt>
   1c488:	clz	r0, r0
   1c48c:	lsr	r0, r0, #5
   1c490:	pop	{r4, r5, r6, pc}
   1c494:	push	{r4, lr}
   1c498:	mov	r4, r0
   1c49c:	ldr	r0, [r0]
   1c4a0:	bl	1b388 <__assert_fail@plt+0x9614>
   1c4a4:	mov	r0, r4
   1c4a8:	bl	1b388 <__assert_fail@plt+0x9614>
   1c4ac:	pop	{r4, pc}
   1c4b0:	push	{r4, r6, r7, lr}
   1c4b4:	vpush	{d8}
   1c4b8:	vmov.f64	d8, d0
   1c4bc:	cmp	r0, #1
   1c4c0:	beq	1c528 <__assert_fail@plt+0xa7b4>
   1c4c4:	mov	r4, r0
   1c4c8:	vldr	d7, [pc, #104]	; 1c538 <__assert_fail@plt+0xa7c4>
   1c4cc:	vcmpe.f64	d0, d7
   1c4d0:	vmrs	APSR_nzcv, fpscr
   1c4d4:	bpl	1c528 <__assert_fail@plt+0xa7b4>
   1c4d8:	vmov	r0, r1, d0
   1c4dc:	bl	23dc0 <_obstack_memory_used@@Base+0x43ec>
   1c4e0:	mov	r6, r0
   1c4e4:	mov	r7, r1
   1c4e8:	cmp	r4, #0
   1c4ec:	movne	r0, #0
   1c4f0:	bne	1c510 <__assert_fail@plt+0xa79c>
   1c4f4:	mov	r0, r6
   1c4f8:	bl	23c2c <_obstack_memory_used@@Base+0x4258>
   1c4fc:	vmov	d7, r0, r1
   1c500:	vcmp.f64	d7, d8
   1c504:	vmrs	APSR_nzcv, fpscr
   1c508:	movne	r0, #1
   1c50c:	moveq	r0, #0
   1c510:	adds	r2, r6, r0
   1c514:	adc	r3, r7, r0, asr #31
   1c518:	mov	r0, r2
   1c51c:	mov	r1, r3
   1c520:	bl	23c2c <_obstack_memory_used@@Base+0x4258>
   1c524:	vmov	d8, r0, r1
   1c528:	vmov.f64	d0, d8
   1c52c:	vpop	{d8}
   1c530:	pop	{r4, r6, r7, pc}
   1c534:	nop			; (mov r0, r0)
   1c538:	andeq	r0, r0, r0
   1c53c:	mvnsmi	r0, #0
   1c540:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c544:	vpush	{d8-d9}
   1c548:	sub	sp, sp, #124	; 0x7c
   1c54c:	strd	r0, [sp, #32]
   1c550:	mov	r7, r2
   1c554:	str	r2, [sp, #24]
   1c558:	mov	r8, r3
   1c55c:	and	r3, r3, #3
   1c560:	str	r3, [sp, #28]
   1c564:	and	r3, r8, #32
   1c568:	str	r3, [sp, #40]	; 0x28
   1c56c:	cmp	r3, #0
   1c570:	movne	r3, #1024	; 0x400
   1c574:	moveq	r3, #1000	; 0x3e8
   1c578:	str	r3, [sp, #44]	; 0x2c
   1c57c:	bl	11c9c <localeconv@plt>
   1c580:	mov	r5, r0
   1c584:	ldr	r6, [r0]
   1c588:	mov	r0, r6
   1c58c:	bl	11b94 <strlen@plt>
   1c590:	mov	r4, r0
   1c594:	sub	r3, r0, #1
   1c598:	ldr	r2, [pc, #1112]	; 1c9f8 <__assert_fail@plt+0xac84>
   1c59c:	cmp	r3, #15
   1c5a0:	movhi	r6, r2
   1c5a4:	str	r6, [sp, #64]	; 0x40
   1c5a8:	cmp	r3, #15
   1c5ac:	movhi	r4, #1
   1c5b0:	ldr	r9, [r5, #8]
   1c5b4:	ldr	r5, [r5, #4]
   1c5b8:	mov	r0, r5
   1c5bc:	bl	11b94 <strlen@plt>
   1c5c0:	ldr	r3, [pc, #1076]	; 1c9fc <__assert_fail@plt+0xac88>
   1c5c4:	cmp	r0, #16
   1c5c8:	movhi	r5, r3
   1c5cc:	str	r5, [sp, #12]
   1c5d0:	add	sl, r7, #644	; 0x284
   1c5d4:	add	sl, sl, #3
   1c5d8:	ldrd	r2, [sp, #184]	; 0xb8
   1c5dc:	ldrd	r6, [sp, #176]	; 0xb0
   1c5e0:	cmp	r3, r7
   1c5e4:	cmpeq	r2, r6
   1c5e8:	bhi	1c76c <__assert_fail@plt+0xa9f8>
   1c5ec:	mov	r0, r6
   1c5f0:	mov	r1, r7
   1c5f4:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   1c5f8:	orrs	r3, r2, r3
   1c5fc:	bne	1c644 <__assert_fail@plt+0xa8d0>
   1c600:	ldrd	r2, [sp, #184]	; 0xb8
   1c604:	ldrd	r0, [sp, #176]	; 0xb0
   1c608:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   1c60c:	mov	r2, r0
   1c610:	mov	r3, r1
   1c614:	ldrd	r6, [sp, #32]
   1c618:	mul	r0, r2, r7
   1c61c:	mla	ip, r6, r3, r0
   1c620:	umull	r0, r1, r2, r6
   1c624:	strd	r0, [sp, #16]
   1c628:	add	r1, ip, r1
   1c62c:	str	r1, [sp, #20]
   1c630:	ldrd	r0, [sp, #16]
   1c634:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   1c638:	cmp	r7, r1
   1c63c:	cmpeq	r6, r0
   1c640:	beq	1c8e4 <__assert_fail@plt+0xab70>
   1c644:	ldrd	r0, [sp, #176]	; 0xb0
   1c648:	bl	23c2c <_obstack_memory_used@@Base+0x4258>
   1c64c:	vmov	d9, r0, r1
   1c650:	ldrd	r0, [sp, #184]	; 0xb8
   1c654:	bl	23c2c <_obstack_memory_used@@Base+0x4258>
   1c658:	vmov	d7, r0, r1
   1c65c:	vdiv.f64	d8, d9, d7
   1c660:	ldrd	r0, [sp, #32]
   1c664:	bl	23c2c <_obstack_memory_used@@Base+0x4258>
   1c668:	vmov	d7, r0, r1
   1c66c:	vmul.f64	d0, d8, d7
   1c670:	tst	r8, #16
   1c674:	beq	1c83c <__assert_fail@plt+0xaac8>
   1c678:	vldr	d7, [pc, #872]	; 1c9e8 <__assert_fail@plt+0xac74>
   1c67c:	mov	r7, #0
   1c680:	vldr	s13, [sp, #44]	; 0x2c
   1c684:	vcvt.f64.u32	d6, s13
   1c688:	vmul.f64	d7, d7, d6
   1c68c:	add	r7, r7, #1
   1c690:	vmul.f64	d5, d6, d7
   1c694:	vcmpe.f64	d0, d5
   1c698:	vmrs	APSR_nzcv, fpscr
   1c69c:	movge	r3, #1
   1c6a0:	movlt	r3, #0
   1c6a4:	cmp	r7, #7
   1c6a8:	movgt	r3, #0
   1c6ac:	andle	r3, r3, #1
   1c6b0:	cmp	r3, #0
   1c6b4:	bne	1c688 <__assert_fail@plt+0xa914>
   1c6b8:	vdiv.f64	d8, d0, d7
   1c6bc:	vmov.f64	d0, d8
   1c6c0:	ldr	r0, [sp, #28]
   1c6c4:	bl	1c4b0 <__assert_fail@plt+0xa73c>
   1c6c8:	vstr	d0, [sp]
   1c6cc:	ldr	r3, [pc, #812]	; 1ca00 <__assert_fail@plt+0xac8c>
   1c6d0:	mvn	r2, #0
   1c6d4:	mov	r1, #1
   1c6d8:	ldr	r6, [sp, #24]
   1c6dc:	mov	r0, r6
   1c6e0:	bl	11bc4 <__sprintf_chk@plt>
   1c6e4:	mov	r0, r6
   1c6e8:	bl	11b94 <strlen@plt>
   1c6ec:	mov	r5, r0
   1c6f0:	add	r4, r4, #1
   1c6f4:	ldr	r3, [sp, #40]	; 0x28
   1c6f8:	cmp	r3, #0
   1c6fc:	movne	r3, #1
   1c700:	moveq	r3, #2
   1c704:	add	r3, r3, r4
   1c708:	cmp	r0, r3
   1c70c:	bhi	1c728 <__assert_fail@plt+0xa9b4>
   1c710:	tst	r8, #8
   1c714:	beq	1c874 <__assert_fail@plt+0xab00>
   1c718:	add	r3, r6, r0
   1c71c:	ldrb	r3, [r3, #-1]
   1c720:	cmp	r3, #48	; 0x30
   1c724:	bne	1c874 <__assert_fail@plt+0xab00>
   1c728:	vldr	d9, [pc, #704]	; 1c9f0 <__assert_fail@plt+0xac7c>
   1c72c:	vmul.f64	d0, d8, d9
   1c730:	ldr	r0, [sp, #28]
   1c734:	bl	1c4b0 <__assert_fail@plt+0xa73c>
   1c738:	vdiv.f64	d0, d0, d9
   1c73c:	vstr	d0, [sp]
   1c740:	ldr	r3, [pc, #700]	; 1ca04 <__assert_fail@plt+0xac90>
   1c744:	mvn	r2, #0
   1c748:	mov	r1, #1
   1c74c:	ldr	r4, [sp, #24]
   1c750:	mov	r0, r4
   1c754:	bl	11bc4 <__sprintf_chk@plt>
   1c758:	mov	r0, r4
   1c75c:	bl	11b94 <strlen@plt>
   1c760:	mov	r5, r0
   1c764:	mov	r4, #0
   1c768:	b	1c874 <__assert_fail@plt+0xab00>
   1c76c:	ldrd	r2, [sp, #176]	; 0xb0
   1c770:	orrs	r3, r2, r3
   1c774:	beq	1c644 <__assert_fail@plt+0xa8d0>
   1c778:	ldrd	r2, [sp, #176]	; 0xb0
   1c77c:	ldrd	r0, [sp, #184]	; 0xb8
   1c780:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   1c784:	orrs	r3, r2, r3
   1c788:	bne	1c644 <__assert_fail@plt+0xa8d0>
   1c78c:	ldrd	r2, [sp, #176]	; 0xb0
   1c790:	ldrd	r0, [sp, #184]	; 0xb8
   1c794:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   1c798:	strd	r0, [sp, #48]	; 0x30
   1c79c:	mov	r2, r0
   1c7a0:	mov	r3, r1
   1c7a4:	ldrd	r0, [sp, #32]
   1c7a8:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   1c7ac:	mov	r1, #10
   1c7b0:	umull	r6, r7, r2, r1
   1c7b4:	mla	r7, r1, r3, r7
   1c7b8:	ldrd	r2, [sp, #48]	; 0x30
   1c7bc:	mov	r0, r6
   1c7c0:	mov	r1, r7
   1c7c4:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   1c7c8:	lsls	r0, r2, #1
   1c7cc:	adc	r1, r3, r3
   1c7d0:	strd	r0, [sp, #56]	; 0x38
   1c7d4:	ldrd	r2, [sp, #48]	; 0x30
   1c7d8:	ldrd	r0, [sp, #32]
   1c7dc:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   1c7e0:	strd	r0, [sp, #16]
   1c7e4:	ldrd	r2, [sp, #48]	; 0x30
   1c7e8:	mov	r0, r6
   1c7ec:	mov	r1, r7
   1c7f0:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   1c7f4:	mov	r6, r0
   1c7f8:	ldrd	r2, [sp, #48]	; 0x30
   1c7fc:	ldrd	r0, [sp, #56]	; 0x38
   1c800:	cmp	r3, r1
   1c804:	cmpeq	r2, r0
   1c808:	bls	1c820 <__assert_fail@plt+0xaaac>
   1c80c:	mov	r3, r0
   1c810:	orrs	r3, r3, r1
   1c814:	movne	fp, #1
   1c818:	moveq	fp, #0
   1c81c:	b	1c8ec <__assert_fail@plt+0xab78>
   1c820:	ldrd	r2, [sp, #48]	; 0x30
   1c824:	ldrd	r0, [sp, #56]	; 0x38
   1c828:	cmp	r3, r1
   1c82c:	cmpeq	r2, r0
   1c830:	movcc	fp, #3
   1c834:	movcs	fp, #2
   1c838:	b	1c8ec <__assert_fail@plt+0xab78>
   1c83c:	ldr	r0, [sp, #28]
   1c840:	bl	1c4b0 <__assert_fail@plt+0xa73c>
   1c844:	vstr	d0, [sp]
   1c848:	ldr	r3, [pc, #436]	; 1ca04 <__assert_fail@plt+0xac90>
   1c84c:	mvn	r2, #0
   1c850:	mov	r1, #1
   1c854:	ldr	r4, [sp, #24]
   1c858:	mov	r0, r4
   1c85c:	bl	11bc4 <__sprintf_chk@plt>
   1c860:	mov	r0, r4
   1c864:	bl	11b94 <strlen@plt>
   1c868:	mov	r5, r0
   1c86c:	mov	r4, #0
   1c870:	mvn	r7, #0
   1c874:	sub	r6, sl, r5
   1c878:	mov	r2, r5
   1c87c:	ldr	r1, [sp, #24]
   1c880:	mov	r0, r6
   1c884:	bl	118f4 <memmove@plt>
   1c888:	sub	r5, r5, r4
   1c88c:	add	r5, r6, r5
   1c890:	tst	r8, #4
   1c894:	bne	1cc6c <__assert_fail@plt+0xaef8>
   1c898:	tst	r8, #128	; 0x80
   1c89c:	beq	1cd98 <__assert_fail@plt+0xb024>
   1c8a0:	cmp	r7, #0
   1c8a4:	blt	1ccfc <__assert_fail@plt+0xaf88>
   1c8a8:	and	r3, r8, #256	; 0x100
   1c8ac:	orrs	r2, r7, r3
   1c8b0:	beq	1c8cc <__assert_fail@plt+0xab58>
   1c8b4:	tst	r8, #64	; 0x40
   1c8b8:	beq	1c8cc <__assert_fail@plt+0xab58>
   1c8bc:	ldr	r1, [sp, #24]
   1c8c0:	add	sl, r1, #648	; 0x288
   1c8c4:	mov	r2, #32
   1c8c8:	strb	r2, [r1, #647]	; 0x287
   1c8cc:	cmp	r7, #0
   1c8d0:	bne	1cd50 <__assert_fail@plt+0xafdc>
   1c8d4:	cmp	r3, #0
   1c8d8:	beq	1cd98 <__assert_fail@plt+0xb024>
   1c8dc:	mov	r2, sl
   1c8e0:	b	1cd8c <__assert_fail@plt+0xb018>
   1c8e4:	mov	fp, #0
   1c8e8:	mov	r6, fp
   1c8ec:	ands	r3, r8, #16
   1c8f0:	str	r3, [sp, #48]	; 0x30
   1c8f4:	streq	sl, [sp, #32]
   1c8f8:	mvneq	r7, #0
   1c8fc:	beq	1cab0 <__assert_fail@plt+0xad3c>
   1c900:	ldr	ip, [sp, #44]	; 0x2c
   1c904:	mov	r3, #0
   1c908:	ldrd	r0, [sp, #16]
   1c90c:	cmp	r1, r3
   1c910:	cmpeq	r0, ip
   1c914:	strcc	sl, [sp, #32]
   1c918:	movcc	r7, #0
   1c91c:	bcc	1cab0 <__assert_fail@plt+0xad3c>
   1c920:	mov	r7, #0
   1c924:	str	sl, [sp, #32]
   1c928:	mov	sl, ip
   1c92c:	str	r9, [sp, #56]	; 0x38
   1c930:	str	r8, [sp, #68]	; 0x44
   1c934:	mov	r8, ip
   1c938:	mov	r9, r3
   1c93c:	b	1c97c <__assert_fail@plt+0xac08>
   1c940:	add	fp, fp, r5
   1c944:	cmp	sl, fp
   1c948:	movcc	fp, #3
   1c94c:	movcs	fp, #2
   1c950:	add	r7, r7, #1
   1c954:	ldrd	r2, [sp, #16]
   1c958:	cmp	r9, r3
   1c95c:	cmpeq	r8, r2
   1c960:	movls	r3, #1
   1c964:	movhi	r3, #0
   1c968:	cmp	r7, #7
   1c96c:	movgt	r3, #0
   1c970:	andle	r3, r3, #1
   1c974:	cmp	r3, #0
   1c978:	beq	1ca0c <__assert_fail@plt+0xac98>
   1c97c:	mov	r2, r8
   1c980:	mov	r3, r9
   1c984:	ldrd	r0, [sp, #16]
   1c988:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   1c98c:	add	r2, r2, r2, lsl #2
   1c990:	add	r6, r6, r2, lsl #1
   1c994:	mov	r1, sl
   1c998:	mov	r0, r6
   1c99c:	bl	23688 <_obstack_memory_used@@Base+0x3cb4>
   1c9a0:	asr	r5, fp, #1
   1c9a4:	add	r5, r5, r1, lsl #1
   1c9a8:	mov	r2, r8
   1c9ac:	mov	r3, r9
   1c9b0:	ldrd	r0, [sp, #16]
   1c9b4:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   1c9b8:	strd	r0, [sp, #16]
   1c9bc:	mov	r1, sl
   1c9c0:	mov	r0, r6
   1c9c4:	bl	2349c <_obstack_memory_used@@Base+0x3ac8>
   1c9c8:	mov	r6, r0
   1c9cc:	cmp	sl, r5
   1c9d0:	bls	1c940 <__assert_fail@plt+0xabcc>
   1c9d4:	cmn	fp, r5
   1c9d8:	movne	fp, #1
   1c9dc:	moveq	fp, #0
   1c9e0:	b	1c950 <__assert_fail@plt+0xabdc>
   1c9e4:	nop			; (mov r0, r0)
   1c9e8:	andeq	r0, r0, r0
   1c9ec:	svccc	0x00f00000	; IMB
   1c9f0:	andeq	r0, r0, r0
   1c9f4:	eormi	r0, r4, r0
   1c9f8:	andeq	r7, r2, r0, lsl #22
   1c9fc:	andeq	r8, r2, ip, ror #1
   1ca00:	andeq	r8, r2, r0, lsr r1
   1ca04:	andeq	r8, r2, r8, lsr #2
   1ca08:	andeq	r8, r2, r8, lsl #2
   1ca0c:	ldr	sl, [sp, #32]
   1ca10:	ldr	r9, [sp, #56]	; 0x38
   1ca14:	ldr	r8, [sp, #68]	; 0x44
   1ca18:	ldrd	r2, [sp, #16]
   1ca1c:	cmp	r3, #0
   1ca20:	cmpeq	r2, #9
   1ca24:	strhi	sl, [sp, #32]
   1ca28:	bhi	1cab0 <__assert_fail@plt+0xad3c>
   1ca2c:	ldr	r3, [sp, #28]
   1ca30:	cmp	r3, #1
   1ca34:	beq	1cb58 <__assert_fail@plt+0xade4>
   1ca38:	ldr	r3, [sp, #28]
   1ca3c:	clz	r3, r3
   1ca40:	lsr	r3, r3, #5
   1ca44:	cmp	fp, #0
   1ca48:	moveq	r3, #0
   1ca4c:	cmp	r3, #0
   1ca50:	beq	1ca64 <__assert_fail@plt+0xacf0>
   1ca54:	add	r6, r6, #1
   1ca58:	cmp	r6, #10
   1ca5c:	movne	fp, #0
   1ca60:	beq	1cb70 <__assert_fail@plt+0xadfc>
   1ca64:	cmp	r6, #0
   1ca68:	bne	1ca7c <__assert_fail@plt+0xad08>
   1ca6c:	ands	r6, r8, #8
   1ca70:	strne	sl, [sp, #32]
   1ca74:	movne	r6, #0
   1ca78:	bne	1cab0 <__assert_fail@plt+0xad3c>
   1ca7c:	ldr	r3, [sp, #24]
   1ca80:	add	r5, r3, #644	; 0x284
   1ca84:	add	r5, r5, #2
   1ca88:	add	r6, r6, #48	; 0x30
   1ca8c:	strb	r6, [r3, #646]	; 0x286
   1ca90:	sub	r3, r5, r4
   1ca94:	str	r3, [sp, #32]
   1ca98:	mov	r2, r4
   1ca9c:	ldr	r1, [sp, #64]	; 0x40
   1caa0:	mov	r0, r3
   1caa4:	bl	11930 <memcpy@plt>
   1caa8:	mov	r6, #0
   1caac:	mov	fp, r6
   1cab0:	ldr	r3, [sp, #28]
   1cab4:	cmp	r3, #1
   1cab8:	beq	1cba0 <__assert_fail@plt+0xae2c>
   1cabc:	ldr	r3, [sp, #28]
   1cac0:	cmp	r3, #0
   1cac4:	movne	fp, #0
   1cac8:	bne	1cadc <__assert_fail@plt+0xad68>
   1cacc:	add	fp, r6, fp
   1cad0:	cmp	fp, #0
   1cad4:	movle	fp, #0
   1cad8:	movgt	fp, #1
   1cadc:	cmp	fp, #0
   1cae0:	beq	1cbfc <__assert_fail@plt+0xae88>
   1cae4:	ldrd	r2, [sp, #16]
   1cae8:	adds	r2, r2, #1
   1caec:	adc	r3, r3, #0
   1caf0:	mov	r0, r2
   1caf4:	mov	r1, r3
   1caf8:	strd	r0, [sp, #16]
   1cafc:	ldr	r3, [sp, #48]	; 0x30
   1cb00:	cmp	r3, #0
   1cb04:	beq	1cbfc <__assert_fail@plt+0xae88>
   1cb08:	ldr	r2, [sp, #44]	; 0x2c
   1cb0c:	mov	r3, #0
   1cb10:	cmp	r3, r1
   1cb14:	cmpeq	r2, r0
   1cb18:	moveq	r3, #1
   1cb1c:	movne	r3, #0
   1cb20:	cmp	r7, #7
   1cb24:	movgt	r3, #0
   1cb28:	andle	r3, r3, #1
   1cb2c:	cmp	r3, #0
   1cb30:	beq	1cbfc <__assert_fail@plt+0xae88>
   1cb34:	add	r7, r7, #1
   1cb38:	tst	r8, #8
   1cb3c:	beq	1cbd0 <__assert_fail@plt+0xae5c>
   1cb40:	ldr	r2, [sp, #32]
   1cb44:	sub	r6, r2, #1
   1cb48:	mov	r3, #49	; 0x31
   1cb4c:	strb	r3, [r2, #-1]
   1cb50:	mov	r5, r2
   1cb54:	b	1c890 <__assert_fail@plt+0xab1c>
   1cb58:	and	r3, r6, #1
   1cb5c:	add	r3, r3, fp
   1cb60:	cmp	r3, #2
   1cb64:	movle	r3, #0
   1cb68:	movgt	r3, #1
   1cb6c:	b	1ca4c <__assert_fail@plt+0xacd8>
   1cb70:	ldrd	r2, [sp, #16]
   1cb74:	adds	r2, r2, #1
   1cb78:	adc	r3, r3, #0
   1cb7c:	strd	r2, [sp, #16]
   1cb80:	cmp	r3, #0
   1cb84:	cmpeq	r2, #9
   1cb88:	strhi	sl, [sp, #32]
   1cb8c:	movhi	fp, #0
   1cb90:	movhi	r6, fp
   1cb94:	bhi	1cab0 <__assert_fail@plt+0xad3c>
   1cb98:	mov	fp, #0
   1cb9c:	b	1ca6c <__assert_fail@plt+0xacf8>
   1cba0:	ldrd	r2, [sp, #16]
   1cba4:	and	r2, r2, #1
   1cba8:	mov	r3, #0
   1cbac:	adds	r2, r2, fp
   1cbb0:	adc	r3, r3, fp, asr #31
   1cbb4:	orr	r2, r2, r3
   1cbb8:	cmp	r2, #0
   1cbbc:	addne	r6, r6, #1
   1cbc0:	cmp	r6, #5
   1cbc4:	movle	fp, #0
   1cbc8:	movgt	fp, #1
   1cbcc:	b	1cadc <__assert_fail@plt+0xad68>
   1cbd0:	mov	r3, #48	; 0x30
   1cbd4:	ldr	r2, [sp, #32]
   1cbd8:	strb	r3, [r2, #-1]
   1cbdc:	mvn	r3, r4
   1cbe0:	add	r3, r2, r3
   1cbe4:	str	r3, [sp, #32]
   1cbe8:	mov	r2, r4
   1cbec:	ldr	r1, [sp, #64]	; 0x40
   1cbf0:	mov	r0, r3
   1cbf4:	bl	11930 <memcpy@plt>
   1cbf8:	b	1cb40 <__assert_fail@plt+0xadcc>
   1cbfc:	ldr	r6, [sp, #32]
   1cc00:	mov	r4, #10
   1cc04:	mov	r5, #0
   1cc08:	mov	fp, r6
   1cc0c:	str	r8, [sp, #28]
   1cc10:	mov	r8, r7
   1cc14:	ldrd	r6, [sp, #16]
   1cc18:	mov	r2, r4
   1cc1c:	mov	r3, r5
   1cc20:	mov	r0, r6
   1cc24:	mov	r1, r7
   1cc28:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   1cc2c:	add	r2, r2, #48	; 0x30
   1cc30:	strb	r2, [fp, #-1]!
   1cc34:	mov	r2, r4
   1cc38:	mov	r3, r5
   1cc3c:	mov	r0, r6
   1cc40:	mov	r1, r7
   1cc44:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   1cc48:	mov	r6, r0
   1cc4c:	mov	r7, r1
   1cc50:	orrs	r3, r6, r7
   1cc54:	bne	1cc18 <__assert_fail@plt+0xaea4>
   1cc58:	mov	r7, r8
   1cc5c:	mov	r6, fp
   1cc60:	ldr	r8, [sp, #28]
   1cc64:	ldr	r5, [sp, #32]
   1cc68:	b	1c890 <__assert_fail@plt+0xab1c>
   1cc6c:	sub	r4, r5, r6
   1cc70:	ldr	r0, [sp, #12]
   1cc74:	bl	11b94 <strlen@plt>
   1cc78:	mov	fp, r0
   1cc7c:	mov	r3, #41	; 0x29
   1cc80:	mov	r2, r4
   1cc84:	mov	r1, r6
   1cc88:	add	r0, sp, #76	; 0x4c
   1cc8c:	bl	11a20 <__memcpy_chk@plt>
   1cc90:	mov	r6, r5
   1cc94:	mvn	r5, #0
   1cc98:	b	1ccdc <__assert_fail@plt+0xaf68>
   1cc9c:	cmp	r5, r4
   1cca0:	movcs	r5, r4
   1cca4:	sub	r6, r6, r5
   1cca8:	sub	r4, r4, r5
   1ccac:	mov	r2, r5
   1ccb0:	add	r3, sp, #76	; 0x4c
   1ccb4:	add	r1, r3, r4
   1ccb8:	mov	r0, r6
   1ccbc:	bl	11930 <memcpy@plt>
   1ccc0:	cmp	r4, #0
   1ccc4:	beq	1c898 <__assert_fail@plt+0xab24>
   1ccc8:	sub	r6, r6, fp
   1cccc:	mov	r2, fp
   1ccd0:	ldr	r1, [sp, #12]
   1ccd4:	mov	r0, r6
   1ccd8:	bl	11930 <memcpy@plt>
   1ccdc:	ldrb	r3, [r9]
   1cce0:	cmp	r3, #0
   1cce4:	beq	1cc9c <__assert_fail@plt+0xaf28>
   1cce8:	cmp	r3, #255	; 0xff
   1ccec:	movne	r5, r3
   1ccf0:	moveq	r5, r4
   1ccf4:	add	r9, r9, #1
   1ccf8:	b	1cc9c <__assert_fail@plt+0xaf28>
   1ccfc:	ldrd	r2, [sp, #184]	; 0xb8
   1cd00:	cmp	r3, #0
   1cd04:	cmpeq	r2, #1
   1cd08:	bls	1cdb8 <__assert_fail@plt+0xb044>
   1cd0c:	mov	r7, #1
   1cd10:	mov	r2, #1
   1cd14:	mov	r3, #0
   1cd18:	ldr	r1, [sp, #44]	; 0x2c
   1cd1c:	ldrd	r4, [sp, #184]	; 0xb8
   1cd20:	mul	r0, r1, r3
   1cd24:	umull	r2, r3, r2, r1
   1cd28:	add	r3, r0, r3
   1cd2c:	cmp	r5, r3
   1cd30:	cmpeq	r4, r2
   1cd34:	bls	1c8a8 <__assert_fail@plt+0xab34>
   1cd38:	add	r7, r7, #1
   1cd3c:	cmp	r7, #8
   1cd40:	bne	1cd20 <__assert_fail@plt+0xafac>
   1cd44:	and	r3, r8, #256	; 0x100
   1cd48:	tst	r8, #64	; 0x40
   1cd4c:	bne	1c8bc <__assert_fail@plt+0xab48>
   1cd50:	add	r2, sl, #1
   1cd54:	ldr	r1, [sp, #40]	; 0x28
   1cd58:	cmp	r1, #0
   1cd5c:	cmpeq	r7, #1
   1cd60:	ldrne	r1, [pc, #-864]	; 1ca08 <__assert_fail@plt+0xac94>
   1cd64:	ldrbne	r1, [r1, r7]
   1cd68:	moveq	r1, #107	; 0x6b
   1cd6c:	strb	r1, [sl]
   1cd70:	cmp	r3, #0
   1cd74:	beq	1cdb0 <__assert_fail@plt+0xb03c>
   1cd78:	ldr	r3, [sp, #40]	; 0x28
   1cd7c:	cmp	r3, #0
   1cd80:	addne	r2, sl, #2
   1cd84:	movne	r3, #105	; 0x69
   1cd88:	strbne	r3, [sl, #1]
   1cd8c:	add	sl, r2, #1
   1cd90:	mov	r3, #66	; 0x42
   1cd94:	strb	r3, [r2]
   1cd98:	mov	r3, #0
   1cd9c:	strb	r3, [sl]
   1cda0:	mov	r0, r6
   1cda4:	add	sp, sp, #124	; 0x7c
   1cda8:	vpop	{d8-d9}
   1cdac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdb0:	mov	sl, r2
   1cdb4:	b	1cd98 <__assert_fail@plt+0xb024>
   1cdb8:	ands	r3, r8, #256	; 0x100
   1cdbc:	movne	r7, #0
   1cdc0:	bne	1c8b4 <__assert_fail@plt+0xab40>
   1cdc4:	b	1c8d4 <__assert_fail@plt+0xab60>
   1cdc8:	push	{r4, r5, r6, r7, lr}
   1cdcc:	sub	sp, sp, #20
   1cdd0:	mov	r7, r1
   1cdd4:	mov	r6, r2
   1cdd8:	subs	r4, r0, #0
   1cddc:	beq	1ce4c <__assert_fail@plt+0xb0d8>
   1cde0:	ldrb	r3, [r4]
   1cde4:	cmp	r3, #39	; 0x27
   1cde8:	addeq	r4, r4, #1
   1cdec:	moveq	r5, #4
   1cdf0:	movne	r5, #0
   1cdf4:	ldr	r1, [pc, #332]	; 1cf48 <__assert_fail@plt+0xb1d4>
   1cdf8:	mov	r3, #4
   1cdfc:	add	r2, r1, #12
   1ce00:	add	r1, r1, #20
   1ce04:	mov	r0, r4
   1ce08:	bl	19d98 <__assert_fail@plt+0x8024>
   1ce0c:	cmp	r0, #0
   1ce10:	blt	1ce90 <__assert_fail@plt+0xb11c>
   1ce14:	ldr	r3, [pc, #300]	; 1cf48 <__assert_fail@plt+0xb1d4>
   1ce18:	add	r0, r3, r0, lsl #2
   1ce1c:	ldr	r3, [r0, #12]
   1ce20:	orr	r5, r5, r3
   1ce24:	mov	r2, #1
   1ce28:	mov	r3, #0
   1ce2c:	strd	r2, [r6]
   1ce30:	str	r5, [r7]
   1ce34:	mov	r0, #0
   1ce38:	ldrd	r2, [r6]
   1ce3c:	orrs	r3, r2, r3
   1ce40:	beq	1cf24 <__assert_fail@plt+0xb1b0>
   1ce44:	add	sp, sp, #20
   1ce48:	pop	{r4, r5, r6, r7, pc}
   1ce4c:	ldr	r0, [pc, #248]	; 1cf4c <__assert_fail@plt+0xb1d8>
   1ce50:	bl	11ac8 <getenv@plt>
   1ce54:	subs	r4, r0, #0
   1ce58:	bne	1cde0 <__assert_fail@plt+0xb06c>
   1ce5c:	ldr	r0, [pc, #236]	; 1cf50 <__assert_fail@plt+0xb1dc>
   1ce60:	bl	11ac8 <getenv@plt>
   1ce64:	subs	r4, r0, #0
   1ce68:	bne	1cde0 <__assert_fail@plt+0xb06c>
   1ce6c:	ldr	r0, [pc, #224]	; 1cf54 <__assert_fail@plt+0xb1e0>
   1ce70:	bl	11ac8 <getenv@plt>
   1ce74:	cmp	r0, #0
   1ce78:	moveq	r2, #1024	; 0x400
   1ce7c:	movne	r2, #512	; 0x200
   1ce80:	mov	r3, #0
   1ce84:	strd	r2, [r6]
   1ce88:	mov	r5, #0
   1ce8c:	b	1ce30 <__assert_fail@plt+0xb0bc>
   1ce90:	ldr	r3, [pc, #192]	; 1cf58 <__assert_fail@plt+0xb1e4>
   1ce94:	str	r3, [sp]
   1ce98:	mov	r3, r6
   1ce9c:	mov	r2, #0
   1cea0:	add	r1, sp, #12
   1cea4:	mov	r0, r4
   1cea8:	bl	22c64 <_obstack_memory_used@@Base+0x3290>
   1ceac:	cmp	r0, #0
   1ceb0:	movne	r3, #0
   1ceb4:	strne	r3, [r7]
   1ceb8:	bne	1ce38 <__assert_fail@plt+0xb0c4>
   1cebc:	ldrb	r3, [r4]
   1cec0:	sub	r3, r3, #48	; 0x30
   1cec4:	uxtb	r3, r3
   1cec8:	cmp	r3, #9
   1cecc:	bls	1ce30 <__assert_fail@plt+0xb0bc>
   1ced0:	ldr	r2, [sp, #12]
   1ced4:	cmp	r4, r2
   1ced8:	beq	1cef8 <__assert_fail@plt+0xb184>
   1cedc:	ldrb	r3, [r4, #1]!
   1cee0:	sub	r3, r3, #48	; 0x30
   1cee4:	uxtb	r3, r3
   1cee8:	cmp	r3, #9
   1ceec:	bls	1ce30 <__assert_fail@plt+0xb0bc>
   1cef0:	cmp	r4, r2
   1cef4:	bne	1cedc <__assert_fail@plt+0xb168>
   1cef8:	ldrb	r3, [r2, #-1]
   1cefc:	cmp	r3, #66	; 0x42
   1cf00:	orrne	r5, r5, #128	; 0x80
   1cf04:	beq	1cf10 <__assert_fail@plt+0xb19c>
   1cf08:	orr	r5, r5, #32
   1cf0c:	b	1ce30 <__assert_fail@plt+0xb0bc>
   1cf10:	orr	r5, r5, #384	; 0x180
   1cf14:	ldrb	r3, [r2, #-2]
   1cf18:	cmp	r3, #105	; 0x69
   1cf1c:	bne	1ce30 <__assert_fail@plt+0xb0bc>
   1cf20:	b	1cf08 <__assert_fail@plt+0xb194>
   1cf24:	ldr	r0, [pc, #40]	; 1cf54 <__assert_fail@plt+0xb1e0>
   1cf28:	bl	11ac8 <getenv@plt>
   1cf2c:	cmp	r0, #0
   1cf30:	moveq	r2, #1024	; 0x400
   1cf34:	movne	r2, #512	; 0x200
   1cf38:	mov	r3, #0
   1cf3c:	strd	r2, [r6]
   1cf40:	mov	r0, #4
   1cf44:	b	1ce44 <__assert_fail@plt+0xb0d0>
   1cf48:	andeq	r8, r2, r8, lsl #2
   1cf4c:			; <UNDEFINED> instruction: 0x000278b0
   1cf50:	andeq	r8, r2, r8, lsr r1
   1cf54:	andeq	r8, r2, r4, asr #2
   1cf58:	andeq	r8, r2, r4, asr r1
   1cf5c:	push	{r4, r5, r6, lr}
   1cf60:	ldr	r3, [pc, #140]	; 1cff4 <__assert_fail@plt+0xb280>
   1cf64:	ldr	r4, [r3]
   1cf68:	cmp	r4, #0
   1cf6c:	beq	1cfa8 <__assert_fail@plt+0xb234>
   1cf70:	ldr	r3, [r4]
   1cf74:	cmp	r0, r3
   1cf78:	beq	1cf94 <__assert_fail@plt+0xb220>
   1cf7c:	ldr	r4, [r4, #4]
   1cf80:	cmp	r4, #0
   1cf84:	beq	1cfa8 <__assert_fail@plt+0xb234>
   1cf88:	ldr	r3, [r4]
   1cf8c:	cmp	r3, r0
   1cf90:	bne	1cf7c <__assert_fail@plt+0xb208>
   1cf94:	ldrb	r3, [r4, #8]
   1cf98:	cmp	r3, #0
   1cf9c:	addne	r0, r4, #8
   1cfa0:	moveq	r0, #0
   1cfa4:	pop	{r4, r5, r6, pc}
   1cfa8:	mov	r5, r0
   1cfac:	bl	118ac <getpwuid@plt>
   1cfb0:	cmp	r0, #0
   1cfb4:	ldreq	r6, [pc, #60]	; 1cff8 <__assert_fail@plt+0xb284>
   1cfb8:	ldrne	r6, [r0]
   1cfbc:	mov	r0, r6
   1cfc0:	bl	11b94 <strlen@plt>
   1cfc4:	add	r0, r0, #12
   1cfc8:	bic	r0, r0, #3
   1cfcc:	bl	2227c <_obstack_memory_used@@Base+0x28a8>
   1cfd0:	mov	r4, r0
   1cfd4:	str	r5, [r0], #8
   1cfd8:	mov	r1, r6
   1cfdc:	bl	11a5c <strcpy@plt>
   1cfe0:	ldr	r3, [pc, #12]	; 1cff4 <__assert_fail@plt+0xb280>
   1cfe4:	ldr	r2, [r3]
   1cfe8:	str	r2, [r4, #4]
   1cfec:	str	r4, [r3]
   1cff0:	b	1cf94 <__assert_fail@plt+0xb220>
   1cff4:	ldrdeq	sl, [r3], -r4
   1cff8:	andeq	r8, r2, ip, ror #1
   1cffc:	push	{r4, r5, r6, lr}
   1d000:	mov	r6, r0
   1d004:	ldr	r3, [pc, #256]	; 1d10c <__assert_fail@plt+0xb398>
   1d008:	ldr	r4, [r3]
   1d00c:	cmp	r4, #0
   1d010:	beq	1d050 <__assert_fail@plt+0xb2dc>
   1d014:	ldrb	r5, [r0]
   1d018:	b	1d028 <__assert_fail@plt+0xb2b4>
   1d01c:	ldr	r4, [r4, #4]
   1d020:	cmp	r4, #0
   1d024:	beq	1d050 <__assert_fail@plt+0xb2dc>
   1d028:	ldrb	r3, [r4, #8]
   1d02c:	cmp	r3, r5
   1d030:	bne	1d01c <__assert_fail@plt+0xb2a8>
   1d034:	mov	r1, r6
   1d038:	add	r0, r4, #8
   1d03c:	bl	118a0 <strcmp@plt>
   1d040:	cmp	r0, #0
   1d044:	bne	1d01c <__assert_fail@plt+0xb2a8>
   1d048:	mov	r0, r4
   1d04c:	pop	{r4, r5, r6, pc}
   1d050:	ldr	r3, [pc, #180]	; 1d10c <__assert_fail@plt+0xb398>
   1d054:	ldr	r4, [r3, #4]
   1d058:	cmp	r4, #0
   1d05c:	beq	1d09c <__assert_fail@plt+0xb328>
   1d060:	ldrb	r5, [r6]
   1d064:	b	1d074 <__assert_fail@plt+0xb300>
   1d068:	ldr	r4, [r4, #4]
   1d06c:	cmp	r4, #0
   1d070:	beq	1d09c <__assert_fail@plt+0xb328>
   1d074:	ldrb	r3, [r4, #8]
   1d078:	cmp	r3, r5
   1d07c:	bne	1d068 <__assert_fail@plt+0xb2f4>
   1d080:	mov	r1, r6
   1d084:	add	r0, r4, #8
   1d088:	bl	118a0 <strcmp@plt>
   1d08c:	cmp	r0, #0
   1d090:	bne	1d068 <__assert_fail@plt+0xb2f4>
   1d094:	mov	r0, #0
   1d098:	pop	{r4, r5, r6, pc}
   1d09c:	mov	r0, r6
   1d0a0:	bl	11894 <getpwnam@plt>
   1d0a4:	mov	r5, r0
   1d0a8:	mov	r0, r6
   1d0ac:	bl	11b94 <strlen@plt>
   1d0b0:	add	r0, r0, #12
   1d0b4:	bic	r0, r0, #3
   1d0b8:	bl	2227c <_obstack_memory_used@@Base+0x28a8>
   1d0bc:	mov	r4, r0
   1d0c0:	mov	r1, r6
   1d0c4:	add	r0, r0, #8
   1d0c8:	bl	11a5c <strcpy@plt>
   1d0cc:	cmp	r5, #0
   1d0d0:	beq	1d0f4 <__assert_fail@plt+0xb380>
   1d0d4:	ldr	r3, [r5, #8]
   1d0d8:	str	r3, [r4]
   1d0dc:	ldr	r3, [pc, #40]	; 1d10c <__assert_fail@plt+0xb398>
   1d0e0:	ldr	r2, [r3]
   1d0e4:	str	r2, [r4, #4]
   1d0e8:	str	r4, [r3]
   1d0ec:	mov	r0, r4
   1d0f0:	pop	{r4, r5, r6, pc}
   1d0f4:	ldr	r3, [pc, #16]	; 1d10c <__assert_fail@plt+0xb398>
   1d0f8:	ldr	r2, [r3, #4]
   1d0fc:	str	r2, [r4, #4]
   1d100:	str	r4, [r3, #4]
   1d104:	mov	r0, #0
   1d108:	pop	{r4, r5, r6, pc}
   1d10c:	ldrdeq	sl, [r3], -r4
   1d110:	push	{r4, r5, r6, lr}
   1d114:	ldr	r3, [pc, #140]	; 1d1a8 <__assert_fail@plt+0xb434>
   1d118:	ldr	r4, [r3, #8]
   1d11c:	cmp	r4, #0
   1d120:	beq	1d15c <__assert_fail@plt+0xb3e8>
   1d124:	ldr	r3, [r4]
   1d128:	cmp	r0, r3
   1d12c:	beq	1d148 <__assert_fail@plt+0xb3d4>
   1d130:	ldr	r4, [r4, #4]
   1d134:	cmp	r4, #0
   1d138:	beq	1d15c <__assert_fail@plt+0xb3e8>
   1d13c:	ldr	r3, [r4]
   1d140:	cmp	r3, r0
   1d144:	bne	1d130 <__assert_fail@plt+0xb3bc>
   1d148:	ldrb	r3, [r4, #8]
   1d14c:	cmp	r3, #0
   1d150:	addne	r0, r4, #8
   1d154:	moveq	r0, #0
   1d158:	pop	{r4, r5, r6, pc}
   1d15c:	mov	r5, r0
   1d160:	bl	11d44 <getgrgid@plt>
   1d164:	cmp	r0, #0
   1d168:	ldreq	r6, [pc, #60]	; 1d1ac <__assert_fail@plt+0xb438>
   1d16c:	ldrne	r6, [r0]
   1d170:	mov	r0, r6
   1d174:	bl	11b94 <strlen@plt>
   1d178:	add	r0, r0, #12
   1d17c:	bic	r0, r0, #3
   1d180:	bl	2227c <_obstack_memory_used@@Base+0x28a8>
   1d184:	mov	r4, r0
   1d188:	str	r5, [r0], #8
   1d18c:	mov	r1, r6
   1d190:	bl	11a5c <strcpy@plt>
   1d194:	ldr	r3, [pc, #12]	; 1d1a8 <__assert_fail@plt+0xb434>
   1d198:	ldr	r2, [r3, #8]
   1d19c:	str	r2, [r4, #4]
   1d1a0:	str	r4, [r3, #8]
   1d1a4:	b	1d148 <__assert_fail@plt+0xb3d4>
   1d1a8:	ldrdeq	sl, [r3], -r4
   1d1ac:	andeq	r8, r2, ip, ror #1
   1d1b0:	push	{r4, r5, r6, lr}
   1d1b4:	mov	r6, r0
   1d1b8:	ldr	r3, [pc, #256]	; 1d2c0 <__assert_fail@plt+0xb54c>
   1d1bc:	ldr	r4, [r3, #8]
   1d1c0:	cmp	r4, #0
   1d1c4:	beq	1d204 <__assert_fail@plt+0xb490>
   1d1c8:	ldrb	r5, [r0]
   1d1cc:	b	1d1dc <__assert_fail@plt+0xb468>
   1d1d0:	ldr	r4, [r4, #4]
   1d1d4:	cmp	r4, #0
   1d1d8:	beq	1d204 <__assert_fail@plt+0xb490>
   1d1dc:	ldrb	r3, [r4, #8]
   1d1e0:	cmp	r3, r5
   1d1e4:	bne	1d1d0 <__assert_fail@plt+0xb45c>
   1d1e8:	mov	r1, r6
   1d1ec:	add	r0, r4, #8
   1d1f0:	bl	118a0 <strcmp@plt>
   1d1f4:	cmp	r0, #0
   1d1f8:	bne	1d1d0 <__assert_fail@plt+0xb45c>
   1d1fc:	mov	r0, r4
   1d200:	pop	{r4, r5, r6, pc}
   1d204:	ldr	r3, [pc, #180]	; 1d2c0 <__assert_fail@plt+0xb54c>
   1d208:	ldr	r4, [r3, #12]
   1d20c:	cmp	r4, #0
   1d210:	beq	1d250 <__assert_fail@plt+0xb4dc>
   1d214:	ldrb	r5, [r6]
   1d218:	b	1d228 <__assert_fail@plt+0xb4b4>
   1d21c:	ldr	r4, [r4, #4]
   1d220:	cmp	r4, #0
   1d224:	beq	1d250 <__assert_fail@plt+0xb4dc>
   1d228:	ldrb	r3, [r4, #8]
   1d22c:	cmp	r3, r5
   1d230:	bne	1d21c <__assert_fail@plt+0xb4a8>
   1d234:	mov	r1, r6
   1d238:	add	r0, r4, #8
   1d23c:	bl	118a0 <strcmp@plt>
   1d240:	cmp	r0, #0
   1d244:	bne	1d21c <__assert_fail@plt+0xb4a8>
   1d248:	mov	r0, #0
   1d24c:	pop	{r4, r5, r6, pc}
   1d250:	mov	r0, r6
   1d254:	bl	11d50 <getgrnam@plt>
   1d258:	mov	r5, r0
   1d25c:	mov	r0, r6
   1d260:	bl	11b94 <strlen@plt>
   1d264:	add	r0, r0, #12
   1d268:	bic	r0, r0, #3
   1d26c:	bl	2227c <_obstack_memory_used@@Base+0x28a8>
   1d270:	mov	r4, r0
   1d274:	mov	r1, r6
   1d278:	add	r0, r0, #8
   1d27c:	bl	11a5c <strcpy@plt>
   1d280:	cmp	r5, #0
   1d284:	beq	1d2a8 <__assert_fail@plt+0xb534>
   1d288:	ldr	r3, [r5, #8]
   1d28c:	str	r3, [r4]
   1d290:	ldr	r3, [pc, #40]	; 1d2c0 <__assert_fail@plt+0xb54c>
   1d294:	ldr	r2, [r3, #8]
   1d298:	str	r2, [r4, #4]
   1d29c:	str	r4, [r3, #8]
   1d2a0:	mov	r0, r4
   1d2a4:	pop	{r4, r5, r6, pc}
   1d2a8:	ldr	r3, [pc, #16]	; 1d2c0 <__assert_fail@plt+0xb54c>
   1d2ac:	ldr	r2, [r3, #12]
   1d2b0:	str	r2, [r4, #4]
   1d2b4:	str	r4, [r3, #12]
   1d2b8:	mov	r0, #0
   1d2bc:	pop	{r4, r5, r6, pc}
   1d2c0:	ldrdeq	sl, [r3], -r4
   1d2c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d2c8:	mov	r4, r0
   1d2cc:	mov	r5, r1
   1d2d0:	add	r6, r2, #20
   1d2d4:	mov	r3, #0
   1d2d8:	strb	r3, [r2, #20]
   1d2dc:	cmp	r0, #0
   1d2e0:	sbcs	r3, r1, #0
   1d2e4:	movlt	r8, #10
   1d2e8:	movlt	r9, #0
   1d2ec:	blt	1d344 <__assert_fail@plt+0xb5d0>
   1d2f0:	mov	r8, #10
   1d2f4:	mov	r9, #0
   1d2f8:	mov	r2, r8
   1d2fc:	mov	r3, r9
   1d300:	mov	r0, r4
   1d304:	mov	r1, r5
   1d308:	bl	23ca0 <_obstack_memory_used@@Base+0x42cc>
   1d30c:	add	r2, r2, #48	; 0x30
   1d310:	strb	r2, [r6, #-1]!
   1d314:	mov	r2, r8
   1d318:	mov	r3, r9
   1d31c:	mov	r0, r4
   1d320:	mov	r1, r5
   1d324:	bl	23ca0 <_obstack_memory_used@@Base+0x42cc>
   1d328:	mov	r4, r0
   1d32c:	mov	r5, r1
   1d330:	orrs	r3, r4, r5
   1d334:	bne	1d2f8 <__assert_fail@plt+0xb584>
   1d338:	mov	r0, r6
   1d33c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d340:	mov	r6, r7
   1d344:	sub	r7, r6, #1
   1d348:	mov	r2, r8
   1d34c:	mov	r3, r9
   1d350:	mov	r0, r4
   1d354:	mov	r1, r5
   1d358:	bl	23ca0 <_obstack_memory_used@@Base+0x42cc>
   1d35c:	rsb	r2, r2, #48	; 0x30
   1d360:	strb	r2, [r6, #-1]
   1d364:	mov	r2, r8
   1d368:	mov	r3, r9
   1d36c:	mov	r0, r4
   1d370:	mov	r1, r5
   1d374:	bl	23ca0 <_obstack_memory_used@@Base+0x42cc>
   1d378:	mov	r4, r0
   1d37c:	mov	r5, r1
   1d380:	orrs	r3, r4, r5
   1d384:	bne	1d340 <__assert_fail@plt+0xb5cc>
   1d388:	sub	r6, r6, #2
   1d38c:	mov	r3, #45	; 0x2d
   1d390:	strb	r3, [r7, #-1]
   1d394:	b	1d338 <__assert_fail@plt+0xb5c4>
   1d398:	push	{r4, r5, r6, r8, r9, lr}
   1d39c:	mov	r4, r0
   1d3a0:	mov	r5, r1
   1d3a4:	add	r6, r2, #20
   1d3a8:	mov	r3, #0
   1d3ac:	strb	r3, [r2, #20]
   1d3b0:	mov	r8, #10
   1d3b4:	mov	r9, #0
   1d3b8:	mov	r2, r8
   1d3bc:	mov	r3, r9
   1d3c0:	mov	r0, r4
   1d3c4:	mov	r1, r5
   1d3c8:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   1d3cc:	add	r2, r2, #48	; 0x30
   1d3d0:	strb	r2, [r6, #-1]!
   1d3d4:	mov	r2, r8
   1d3d8:	mov	r3, r9
   1d3dc:	mov	r0, r4
   1d3e0:	mov	r1, r5
   1d3e4:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   1d3e8:	mov	r4, r0
   1d3ec:	mov	r5, r1
   1d3f0:	orrs	r3, r4, r5
   1d3f4:	bne	1d3b8 <__assert_fail@plt+0xb644>
   1d3f8:	mov	r0, r6
   1d3fc:	pop	{r4, r5, r6, r8, r9, pc}
   1d400:	push	{r4, r5, r6, r7, lr}
   1d404:	sub	sp, sp, #12
   1d408:	mov	r7, r1
   1d40c:	mov	r5, r2
   1d410:	subs	r6, r0, #0
   1d414:	addeq	r6, sp, #4
   1d418:	mov	r0, r6
   1d41c:	bl	11a74 <mbrtowc@plt>
   1d420:	mov	r4, r0
   1d424:	cmp	r5, #0
   1d428:	cmnne	r0, #3
   1d42c:	bhi	1d43c <__assert_fail@plt+0xb6c8>
   1d430:	mov	r0, r4
   1d434:	add	sp, sp, #12
   1d438:	pop	{r4, r5, r6, r7, pc}
   1d43c:	mov	r0, #0
   1d440:	bl	1b41c <__assert_fail@plt+0x96a8>
   1d444:	cmp	r0, #0
   1d448:	ldrbeq	r3, [r7]
   1d44c:	streq	r3, [r6]
   1d450:	moveq	r4, #1
   1d454:	b	1d430 <__assert_fail@plt+0xb6bc>
   1d458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d45c:	sub	sp, sp, #20
   1d460:	str	r0, [sp, #8]
   1d464:	mov	r4, r1
   1d468:	mov	r6, r2
   1d46c:	mov	r9, r3
   1d470:	ldr	r8, [sp, #60]	; 0x3c
   1d474:	bl	11b94 <strlen@plt>
   1d478:	mov	fp, r0
   1d47c:	tst	r8, #2
   1d480:	movne	r3, #0
   1d484:	strne	r3, [sp, #4]
   1d488:	beq	1d51c <__assert_fail@plt+0xb7a8>
   1d48c:	mov	r5, fp
   1d490:	mov	sl, #0
   1d494:	ldr	r3, [r9]
   1d498:	cmp	r5, r3
   1d49c:	movhi	fp, r3
   1d4a0:	movhi	r7, #0
   1d4a4:	bls	1d7a4 <__assert_fail@plt+0xba30>
   1d4a8:	str	r3, [r9]
   1d4ac:	ldr	r3, [sp, #56]	; 0x38
   1d4b0:	cmp	r3, #0
   1d4b4:	moveq	r5, #0
   1d4b8:	beq	1d4d8 <__assert_fail@plt+0xb764>
   1d4bc:	cmp	r3, #1
   1d4c0:	moveq	r5, r7
   1d4c4:	moveq	r7, #0
   1d4c8:	lsrne	r3, r7, #1
   1d4cc:	andne	r7, r7, #1
   1d4d0:	addne	r5, r7, r3
   1d4d4:	movne	r7, r3
   1d4d8:	and	r3, r8, #4
   1d4dc:	cmp	r3, #0
   1d4e0:	movne	r5, #0
   1d4e4:	and	r8, r8, #8
   1d4e8:	cmp	r8, #0
   1d4ec:	movne	r7, #0
   1d4f0:	cmp	r6, #0
   1d4f4:	bne	1d6d4 <__assert_fail@plt+0xb960>
   1d4f8:	add	fp, r5, fp
   1d4fc:	add	r7, fp, r7
   1d500:	ldr	r0, [sp, #4]
   1d504:	bl	1b388 <__assert_fail@plt+0x9614>
   1d508:	mov	r0, sl
   1d50c:	bl	1b388 <__assert_fail@plt+0x9614>
   1d510:	mov	r0, r7
   1d514:	add	sp, sp, #20
   1d518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d51c:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   1d520:	cmp	r0, #1
   1d524:	bls	1d770 <__assert_fail@plt+0xb9fc>
   1d528:	mov	r2, #0
   1d52c:	ldr	r1, [sp, #8]
   1d530:	mov	r0, r2
   1d534:	bl	11ca8 <mbstowcs@plt>
   1d538:	cmn	r0, #1
   1d53c:	beq	1d668 <__assert_fail@plt+0xb8f4>
   1d540:	add	sl, r0, #1
   1d544:	lsl	r5, sl, #2
   1d548:	mov	r0, r5
   1d54c:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   1d550:	subs	r3, r0, #0
   1d554:	str	r3, [sp, #4]
   1d558:	beq	1d684 <__assert_fail@plt+0xb910>
   1d55c:	mov	r2, sl
   1d560:	ldr	r1, [sp, #8]
   1d564:	ldr	r0, [sp, #4]
   1d568:	bl	11ca8 <mbstowcs@plt>
   1d56c:	cmp	r0, #0
   1d570:	beq	1d48c <__assert_fail@plt+0xb718>
   1d574:	ldr	r2, [sp, #4]
   1d578:	add	r5, r2, r5
   1d57c:	mov	r3, #0
   1d580:	str	r3, [r5, #-4]
   1d584:	ldr	r0, [r2]
   1d588:	cmp	r0, #0
   1d58c:	beq	1d77c <__assert_fail@plt+0xba08>
   1d590:	mov	r5, r2
   1d594:	mov	r7, #0
   1d598:	bl	119f0 <iswprint@plt>
   1d59c:	cmp	r0, #0
   1d5a0:	ldreq	r3, [pc, #532]	; 1d7bc <__assert_fail@plt+0xba48>
   1d5a4:	streq	r3, [r5]
   1d5a8:	moveq	r7, #1
   1d5ac:	ldr	r0, [r5, #4]!
   1d5b0:	cmp	r0, #0
   1d5b4:	bne	1d598 <__assert_fail@plt+0xb824>
   1d5b8:	mov	r1, sl
   1d5bc:	ldr	r0, [sp, #4]
   1d5c0:	bl	11c6c <wcswidth@plt>
   1d5c4:	mov	r5, r0
   1d5c8:	cmp	r7, #0
   1d5cc:	beq	1d78c <__assert_fail@plt+0xba18>
   1d5d0:	mov	r2, #0
   1d5d4:	ldr	r1, [sp, #4]
   1d5d8:	mov	r0, r2
   1d5dc:	bl	11a80 <wcstombs@plt>
   1d5e0:	add	r3, r0, #1
   1d5e4:	str	r3, [sp, #12]
   1d5e8:	ldr	r0, [sp, #12]
   1d5ec:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   1d5f0:	subs	sl, r0, #0
   1d5f4:	beq	1d698 <__assert_fail@plt+0xb924>
   1d5f8:	ldr	fp, [r9]
   1d5fc:	ldr	r3, [sp, #4]
   1d600:	ldr	r0, [r3]
   1d604:	cmp	r0, #0
   1d608:	beq	1d6a8 <__assert_fail@plt+0xb934>
   1d60c:	mov	r7, r3
   1d610:	mov	r5, #0
   1d614:	bl	118d0 <wcwidth@plt>
   1d618:	cmn	r0, #1
   1d61c:	ldreq	r3, [pc, #408]	; 1d7bc <__assert_fail@plt+0xba48>
   1d620:	streq	r3, [r7]
   1d624:	moveq	r0, #1
   1d628:	add	r3, r0, r5
   1d62c:	cmp	fp, r3
   1d630:	bcc	1d644 <__assert_fail@plt+0xb8d0>
   1d634:	ldr	r0, [r7, #4]!
   1d638:	mov	r5, r3
   1d63c:	cmp	r0, #0
   1d640:	bne	1d614 <__assert_fail@plt+0xb8a0>
   1d644:	mov	r3, #0
   1d648:	str	r3, [r7]
   1d64c:	ldr	r2, [sp, #12]
   1d650:	ldr	r1, [sp, #4]
   1d654:	mov	r0, sl
   1d658:	bl	11a80 <wcstombs@plt>
   1d65c:	mov	fp, r0
   1d660:	str	sl, [sp, #8]
   1d664:	b	1d494 <__assert_fail@plt+0xb720>
   1d668:	tst	r8, #1
   1d66c:	bne	1d6b4 <__assert_fail@plt+0xb940>
   1d670:	mov	r3, #0
   1d674:	str	r3, [sp, #4]
   1d678:	mov	sl, r3
   1d67c:	mvn	r7, #0
   1d680:	b	1d500 <__assert_fail@plt+0xb78c>
   1d684:	tst	r8, #1
   1d688:	bne	1d6c8 <__assert_fail@plt+0xb954>
   1d68c:	mov	sl, #0
   1d690:	mvn	r7, #0
   1d694:	b	1d500 <__assert_fail@plt+0xb78c>
   1d698:	tst	r8, #1
   1d69c:	mvneq	r7, #0
   1d6a0:	beq	1d500 <__assert_fail@plt+0xb78c>
   1d6a4:	b	1d494 <__assert_fail@plt+0xb720>
   1d6a8:	ldr	r7, [sp, #4]
   1d6ac:	mov	r5, #0
   1d6b0:	b	1d644 <__assert_fail@plt+0xb8d0>
   1d6b4:	mov	r5, fp
   1d6b8:	mov	r3, #0
   1d6bc:	str	r3, [sp, #4]
   1d6c0:	mov	sl, r3
   1d6c4:	b	1d494 <__assert_fail@plt+0xb720>
   1d6c8:	mov	r5, fp
   1d6cc:	mov	sl, #0
   1d6d0:	b	1d494 <__assert_fail@plt+0xb720>
   1d6d4:	sub	r6, r6, #1
   1d6d8:	add	r6, r4, r6
   1d6dc:	sub	r3, r5, #1
   1d6e0:	cmp	r5, #0
   1d6e4:	cmpne	r4, r6
   1d6e8:	bcs	1d710 <__assert_fail@plt+0xb99c>
   1d6ec:	mov	r1, #32
   1d6f0:	strb	r1, [r4], #1
   1d6f4:	cmp	r3, #0
   1d6f8:	cmpne	r6, r4
   1d6fc:	movhi	r2, #1
   1d700:	movls	r2, #0
   1d704:	sub	r3, r3, #1
   1d708:	cmp	r2, #0
   1d70c:	bne	1d6f0 <__assert_fail@plt+0xb97c>
   1d710:	mov	r3, #0
   1d714:	strb	r3, [r4]
   1d718:	sub	r2, r6, r4
   1d71c:	cmp	r2, fp
   1d720:	movcs	r2, fp
   1d724:	ldr	r1, [sp, #8]
   1d728:	mov	r0, r4
   1d72c:	bl	11b40 <mempcpy@plt>
   1d730:	sub	r3, r7, #1
   1d734:	cmp	r7, #0
   1d738:	cmpne	r6, r0
   1d73c:	bls	1d764 <__assert_fail@plt+0xb9f0>
   1d740:	mov	r1, #32
   1d744:	strb	r1, [r0], #1
   1d748:	cmp	r3, #0
   1d74c:	cmpne	r6, r0
   1d750:	movhi	r2, #1
   1d754:	movls	r2, #0
   1d758:	sub	r3, r3, #1
   1d75c:	cmp	r2, #0
   1d760:	bne	1d744 <__assert_fail@plt+0xb9d0>
   1d764:	mov	r3, #0
   1d768:	strb	r3, [r0]
   1d76c:	b	1d4f8 <__assert_fail@plt+0xb784>
   1d770:	mov	r3, #0
   1d774:	str	r3, [sp, #4]
   1d778:	b	1d48c <__assert_fail@plt+0xb718>
   1d77c:	mov	r1, sl
   1d780:	ldr	r0, [sp, #4]
   1d784:	bl	11c6c <wcswidth@plt>
   1d788:	mov	r5, r0
   1d78c:	ldr	r3, [r9]
   1d790:	cmp	r3, r5
   1d794:	addcc	r3, fp, #1
   1d798:	strcc	r3, [sp, #12]
   1d79c:	bcc	1d5e8 <__assert_fail@plt+0xb874>
   1d7a0:	mov	sl, #0
   1d7a4:	cmp	r5, r3
   1d7a8:	movcs	r3, r5
   1d7ac:	movcs	r7, #0
   1d7b0:	subcc	r7, r3, r5
   1d7b4:	movcc	r3, r5
   1d7b8:	b	1d4a8 <__assert_fail@plt+0xb734>
   1d7bc:	strdeq	pc, [r0], -sp
   1d7c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d7c4:	sub	sp, sp, #12
   1d7c8:	mov	fp, r0
   1d7cc:	mov	r6, r1
   1d7d0:	mov	sl, r2
   1d7d4:	mov	r9, r3
   1d7d8:	ldr	r8, [r1]
   1d7dc:	mov	r0, r8
   1d7e0:	mov	r7, #0
   1d7e4:	add	r4, r0, #1
   1d7e8:	mov	r1, r4
   1d7ec:	mov	r0, r7
   1d7f0:	bl	23164 <_obstack_memory_used@@Base+0x3790>
   1d7f4:	subs	r5, r0, #0
   1d7f8:	beq	1d834 <__assert_fail@plt+0xbac0>
   1d7fc:	str	r8, [r6]
   1d800:	str	r9, [sp, #4]
   1d804:	str	sl, [sp]
   1d808:	mov	r3, r6
   1d80c:	mov	r2, r4
   1d810:	mov	r1, r5
   1d814:	mov	r0, fp
   1d818:	bl	1d458 <__assert_fail@plt+0xb6e4>
   1d81c:	cmn	r0, #1
   1d820:	beq	1d848 <__assert_fail@plt+0xbad4>
   1d824:	mov	r7, r5
   1d828:	cmp	r4, r0
   1d82c:	bls	1d7e4 <__assert_fail@plt+0xba70>
   1d830:	b	1d83c <__assert_fail@plt+0xbac8>
   1d834:	mov	r0, r7
   1d838:	bl	1b388 <__assert_fail@plt+0x9614>
   1d83c:	mov	r0, r5
   1d840:	add	sp, sp, #12
   1d844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d848:	mov	r0, r5
   1d84c:	bl	1b388 <__assert_fail@plt+0x9614>
   1d850:	mov	r5, #0
   1d854:	b	1d83c <__assert_fail@plt+0xbac8>
   1d858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d85c:	sub	sp, sp, #28
   1d860:	mov	r5, r0
   1d864:	mov	r4, r2
   1d868:	add	r8, r0, r1
   1d86c:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   1d870:	cmp	r0, #1
   1d874:	bls	1d89c <__assert_fail@plt+0xbb28>
   1d878:	cmp	r5, r8
   1d87c:	bcs	1da38 <__assert_fail@plt+0xbcc4>
   1d880:	mov	r6, #0
   1d884:	mov	fp, r6
   1d888:	and	sl, r4, #2
   1d88c:	mvn	r9, #-2147483648	; 0x80000000
   1d890:	and	r3, r4, #1
   1d894:	str	r3, [sp, #4]
   1d898:	b	1d8e8 <__assert_fail@plt+0xbb74>
   1d89c:	cmp	r5, r8
   1d8a0:	movcs	r6, #0
   1d8a4:	bcs	1d9e0 <__assert_fail@plt+0xbc6c>
   1d8a8:	bl	11b58 <__ctype_b_loc@plt>
   1d8ac:	ldr	r1, [r0]
   1d8b0:	mov	r6, #0
   1d8b4:	and	r2, r4, #2
   1d8b8:	b	1d9f8 <__assert_fail@plt+0xbc84>
   1d8bc:	cmp	r3, #65	; 0x41
   1d8c0:	bcc	1d908 <__assert_fail@plt+0xbb94>
   1d8c4:	cmp	r3, #95	; 0x5f
   1d8c8:	bls	1d8d8 <__assert_fail@plt+0xbb64>
   1d8cc:	sub	r3, r3, #97	; 0x61
   1d8d0:	cmp	r3, #29
   1d8d4:	bhi	1d908 <__assert_fail@plt+0xbb94>
   1d8d8:	add	r5, r5, #1
   1d8dc:	add	r6, r6, #1
   1d8e0:	cmp	r8, r5
   1d8e4:	bls	1d9e0 <__assert_fail@plt+0xbc6c>
   1d8e8:	ldrb	r3, [r5]
   1d8ec:	cmp	r3, #63	; 0x3f
   1d8f0:	bhi	1d8bc <__assert_fail@plt+0xbb48>
   1d8f4:	cmp	r3, #37	; 0x25
   1d8f8:	bcs	1d8d8 <__assert_fail@plt+0xbb64>
   1d8fc:	sub	r3, r3, #32
   1d900:	cmp	r3, #3
   1d904:	bls	1d8d8 <__assert_fail@plt+0xbb64>
   1d908:	add	r7, sp, #24
   1d90c:	str	fp, [r7, #-8]!
   1d910:	str	fp, [sp, #20]
   1d914:	b	1d980 <__assert_fail@plt+0xbc0c>
   1d918:	ldr	r3, [sp, #4]
   1d91c:	cmp	r3, #0
   1d920:	bne	1d9d4 <__assert_fail@plt+0xbc60>
   1d924:	add	r5, r5, #1
   1d928:	add	r6, r6, #1
   1d92c:	b	1d8e0 <__assert_fail@plt+0xbb6c>
   1d930:	ldr	r3, [sp, #4]
   1d934:	cmp	r3, #0
   1d938:	bne	1d9d4 <__assert_fail@plt+0xbc60>
   1d93c:	add	r6, r6, #1
   1d940:	mov	r5, r8
   1d944:	b	1d8e0 <__assert_fail@plt+0xbb6c>
   1d948:	cmp	sl, #0
   1d94c:	bne	1d9d4 <__assert_fail@plt+0xbc60>
   1d950:	ldr	r0, [sp, #12]
   1d954:	bl	119cc <iswcntrl@plt>
   1d958:	cmp	r0, #0
   1d95c:	bne	1d96c <__assert_fail@plt+0xbbf8>
   1d960:	cmn	r6, #-2147483647	; 0x80000001
   1d964:	beq	1d9dc <__assert_fail@plt+0xbc68>
   1d968:	add	r6, r6, #1
   1d96c:	add	r5, r5, r4
   1d970:	mov	r0, r7
   1d974:	bl	11948 <mbsinit@plt>
   1d978:	cmp	r0, #0
   1d97c:	bne	1d8e0 <__assert_fail@plt+0xbb6c>
   1d980:	mov	r3, r7
   1d984:	sub	r2, r8, r5
   1d988:	mov	r1, r5
   1d98c:	add	r0, sp, #12
   1d990:	bl	1d400 <__assert_fail@plt+0xb68c>
   1d994:	mov	r4, r0
   1d998:	cmn	r0, #1
   1d99c:	beq	1d918 <__assert_fail@plt+0xbba4>
   1d9a0:	cmn	r0, #2
   1d9a4:	beq	1d930 <__assert_fail@plt+0xbbbc>
   1d9a8:	cmp	r0, #0
   1d9ac:	moveq	r4, #1
   1d9b0:	ldr	r0, [sp, #12]
   1d9b4:	bl	118d0 <wcwidth@plt>
   1d9b8:	cmp	r0, #0
   1d9bc:	blt	1d948 <__assert_fail@plt+0xbbd4>
   1d9c0:	sub	r3, r9, r6
   1d9c4:	cmp	r0, r3
   1d9c8:	bgt	1d9dc <__assert_fail@plt+0xbc68>
   1d9cc:	add	r6, r6, r0
   1d9d0:	b	1d96c <__assert_fail@plt+0xbbf8>
   1d9d4:	mvn	r6, #0
   1d9d8:	b	1d9e0 <__assert_fail@plt+0xbc6c>
   1d9dc:	mvn	r6, #-2147483648	; 0x80000000
   1d9e0:	mov	r0, r6
   1d9e4:	add	sp, sp, #28
   1d9e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9ec:	add	r6, r6, #1
   1d9f0:	cmp	r8, r5
   1d9f4:	beq	1d9e0 <__assert_fail@plt+0xbc6c>
   1d9f8:	ldrb	r3, [r5], #1
   1d9fc:	lsl	r3, r3, #1
   1da00:	ldrh	r3, [r1, r3]
   1da04:	tst	r3, #16384	; 0x4000
   1da08:	beq	1da18 <__assert_fail@plt+0xbca4>
   1da0c:	cmn	r6, #-2147483647	; 0x80000001
   1da10:	bne	1d9ec <__assert_fail@plt+0xbc78>
   1da14:	b	1d9e0 <__assert_fail@plt+0xbc6c>
   1da18:	cmp	r2, #0
   1da1c:	bne	1da40 <__assert_fail@plt+0xbccc>
   1da20:	tst	r3, #2
   1da24:	bne	1d9f0 <__assert_fail@plt+0xbc7c>
   1da28:	cmn	r6, #-2147483647	; 0x80000001
   1da2c:	beq	1d9e0 <__assert_fail@plt+0xbc6c>
   1da30:	add	r6, r6, #1
   1da34:	b	1d9f0 <__assert_fail@plt+0xbc7c>
   1da38:	mov	r6, #0
   1da3c:	b	1d9e0 <__assert_fail@plt+0xbc6c>
   1da40:	mvn	r6, #0
   1da44:	b	1d9e0 <__assert_fail@plt+0xbc6c>
   1da48:	push	{r4, r5, r6, lr}
   1da4c:	mov	r4, r0
   1da50:	mov	r5, r1
   1da54:	bl	11b94 <strlen@plt>
   1da58:	mov	r2, r5
   1da5c:	mov	r1, r0
   1da60:	mov	r0, r4
   1da64:	bl	1d858 <__assert_fail@plt+0xbae4>
   1da68:	pop	{r4, r5, r6, pc}
   1da6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da70:	sub	sp, sp, #20
   1da74:	mov	r6, r0
   1da78:	str	r2, [sp]
   1da7c:	mov	r8, r3
   1da80:	cmp	r1, #2
   1da84:	bhi	1dab8 <__assert_fail@plt+0xbd44>
   1da88:	beq	1da94 <__assert_fail@plt+0xbd20>
   1da8c:	add	sp, sp, #20
   1da90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da94:	ldr	r4, [r0]
   1da98:	ldr	r5, [r0, #4]
   1da9c:	mov	r1, r5
   1daa0:	mov	r0, r4
   1daa4:	blx	r3
   1daa8:	cmp	r0, #0
   1daac:	strgt	r5, [r6]
   1dab0:	strgt	r4, [r6, #4]
   1dab4:	b	1da8c <__assert_fail@plt+0xbd18>
   1dab8:	mov	sl, r1
   1dabc:	lsr	r3, r1, #1
   1dac0:	mov	r4, r3
   1dac4:	str	r3, [sp, #4]
   1dac8:	mov	r3, r8
   1dacc:	ldr	r5, [sp]
   1dad0:	mov	r2, r5
   1dad4:	sub	r1, sl, r4
   1dad8:	add	r0, r6, r4, lsl #2
   1dadc:	bl	1da6c <__assert_fail@plt+0xbcf8>
   1dae0:	cmp	r4, #1
   1dae4:	bls	1db44 <__assert_fail@plt+0xbdd0>
   1dae8:	lsr	r3, sl, #2
   1daec:	mov	r5, r3
   1daf0:	str	r3, [sp, #8]
   1daf4:	bic	r4, sl, #3
   1daf8:	mov	r3, r8
   1dafc:	ldr	r9, [sp]
   1db00:	mov	r2, r9
   1db04:	ldr	r0, [sp, #4]
   1db08:	sub	r1, r0, r5
   1db0c:	add	r0, r6, r4
   1db10:	bl	1da6c <__assert_fail@plt+0xbcf8>
   1db14:	mov	r3, r8
   1db18:	mov	r2, r9
   1db1c:	mov	r1, r5
   1db20:	mov	r0, r6
   1db24:	bl	1da6c <__assert_fail@plt+0xbcf8>
   1db28:	ldr	fp, [r6]
   1db2c:	ldr	r7, [r6, r4]
   1db30:	add	r4, r9, #4
   1db34:	mov	r9, #0
   1db38:	str	sl, [sp, #12]
   1db3c:	ldr	sl, [sp, #4]
   1db40:	b	1db70 <__assert_fail@plt+0xbdfc>
   1db44:	ldr	r3, [r6]
   1db48:	str	r3, [r5]
   1db4c:	b	1dbcc <__assert_fail@plt+0xbe58>
   1db50:	mov	r0, r4
   1db54:	str	fp, [r4, #-4]
   1db58:	add	r9, r9, #1
   1db5c:	ldr	r3, [sp, #8]
   1db60:	cmp	r3, r9
   1db64:	beq	1dba0 <__assert_fail@plt+0xbe2c>
   1db68:	ldr	fp, [r6, r9, lsl #2]
   1db6c:	add	r4, r4, #4
   1db70:	mov	r1, r7
   1db74:	mov	r0, fp
   1db78:	blx	r8
   1db7c:	cmp	r0, #0
   1db80:	ble	1db50 <__assert_fail@plt+0xbddc>
   1db84:	mov	r0, r4
   1db88:	str	r7, [r4, #-4]
   1db8c:	add	r5, r5, #1
   1db90:	cmp	sl, r5
   1db94:	beq	1dbb4 <__assert_fail@plt+0xbe40>
   1db98:	ldr	r7, [r6, r5, lsl #2]
   1db9c:	b	1db6c <__assert_fail@plt+0xbdf8>
   1dba0:	ldr	sl, [sp, #12]
   1dba4:	ldr	r3, [sp, #4]
   1dba8:	str	r3, [sp, #8]
   1dbac:	mov	r9, r5
   1dbb0:	b	1dbb8 <__assert_fail@plt+0xbe44>
   1dbb4:	ldr	sl, [sp, #12]
   1dbb8:	ldr	r3, [sp, #8]
   1dbbc:	sub	r2, r3, r9
   1dbc0:	lsl	r2, r2, #2
   1dbc4:	add	r1, r6, r9, lsl #2
   1dbc8:	bl	11930 <memcpy@plt>
   1dbcc:	ldr	r3, [sp]
   1dbd0:	ldr	r9, [r3]
   1dbd4:	ldr	r3, [sp, #4]
   1dbd8:	ldr	r7, [r6, r3, lsl #2]
   1dbdc:	mov	r5, r3
   1dbe0:	mov	r4, #0
   1dbe4:	mov	fp, r4
   1dbe8:	mov	r3, r9
   1dbec:	mov	r9, r7
   1dbf0:	mov	r7, r3
   1dbf4:	b	1dc18 <__assert_fail@plt+0xbea4>
   1dbf8:	str	r7, [r6, r4, lsl #2]
   1dbfc:	add	fp, fp, #1
   1dc00:	ldr	r3, [sp, #4]
   1dc04:	cmp	r3, fp
   1dc08:	beq	1da8c <__assert_fail@plt+0xbd18>
   1dc0c:	ldr	r3, [sp]
   1dc10:	ldr	r7, [r3, fp, lsl #2]
   1dc14:	add	r4, r4, #1
   1dc18:	mov	r1, r9
   1dc1c:	mov	r0, r7
   1dc20:	blx	r8
   1dc24:	cmp	r0, #0
   1dc28:	ble	1dbf8 <__assert_fail@plt+0xbe84>
   1dc2c:	add	r0, r4, #1
   1dc30:	str	r9, [r6, r4, lsl #2]
   1dc34:	add	r5, r5, #1
   1dc38:	cmp	sl, r5
   1dc3c:	ldrne	r9, [r6, r5, lsl #2]
   1dc40:	bne	1dc14 <__assert_fail@plt+0xbea0>
   1dc44:	ldr	r3, [sp, #4]
   1dc48:	sub	r2, r3, fp
   1dc4c:	lsl	r2, r2, #2
   1dc50:	ldr	r3, [sp]
   1dc54:	add	r1, r3, fp, lsl #2
   1dc58:	add	r0, r6, r0, lsl #2
   1dc5c:	bl	11930 <memcpy@plt>
   1dc60:	b	1da8c <__assert_fail@plt+0xbd18>
   1dc64:	push	{r4, lr}
   1dc68:	mov	r3, r2
   1dc6c:	add	r2, r0, r1, lsl #2
   1dc70:	bl	1da6c <__assert_fail@plt+0xbcf8>
   1dc74:	pop	{r4, pc}
   1dc78:	push	{r4, r5, r6, lr}
   1dc7c:	mov	r5, r0
   1dc80:	subs	r4, r2, #0
   1dc84:	beq	1dcb4 <__assert_fail@plt+0xbf40>
   1dc88:	mov	r6, r1
   1dc8c:	bl	11b1c <__ctype_tolower_loc@plt>
   1dc90:	add	r3, r6, r4
   1dc94:	add	r2, r5, r4
   1dc98:	mov	r1, r6
   1dc9c:	ldrb	lr, [r3, #-1]!
   1dca0:	ldr	ip, [r0]
   1dca4:	ldr	ip, [ip, lr, lsl #2]
   1dca8:	strb	ip, [r2, #-1]!
   1dcac:	cmp	r3, r1
   1dcb0:	bne	1dc9c <__assert_fail@plt+0xbf28>
   1dcb4:	mov	r0, r5
   1dcb8:	pop	{r4, r5, r6, pc}
   1dcbc:	push	{r4, r5, r6, lr}
   1dcc0:	mov	r5, r0
   1dcc4:	subs	r4, r2, #0
   1dcc8:	beq	1dcf8 <__assert_fail@plt+0xbf84>
   1dccc:	mov	r6, r1
   1dcd0:	bl	11b28 <__ctype_toupper_loc@plt>
   1dcd4:	add	r3, r6, r4
   1dcd8:	add	r2, r5, r4
   1dcdc:	mov	r1, r6
   1dce0:	ldrb	lr, [r3, #-1]!
   1dce4:	ldr	ip, [r0]
   1dce8:	ldr	ip, [ip, lr, lsl #2]
   1dcec:	strb	ip, [r2, #-1]!
   1dcf0:	cmp	r3, r1
   1dcf4:	bne	1dce0 <__assert_fail@plt+0xbf6c>
   1dcf8:	mov	r0, r5
   1dcfc:	pop	{r4, r5, r6, pc}
   1dd00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd04:	sub	sp, sp, #1104	; 0x450
   1dd08:	sub	sp, sp, #12
   1dd0c:	mov	sl, r0
   1dd10:	str	r1, [sp, #32]
   1dd14:	mov	r9, r2
   1dd18:	mov	r4, r3
   1dd1c:	str	r3, [sp, #36]	; 0x24
   1dd20:	ldrb	r3, [sp, #1152]	; 0x480
   1dd24:	str	r3, [sp, #56]	; 0x38
   1dd28:	ldr	r5, [sp, #1160]	; 0x488
   1dd2c:	bl	11bb8 <__errno_location@plt>
   1dd30:	str	r0, [sp, #44]	; 0x2c
   1dd34:	ldr	r3, [r0]
   1dd38:	str	r3, [sp, #64]	; 0x40
   1dd3c:	ldr	r2, [r4, #8]
   1dd40:	mov	r0, r2
   1dd44:	str	r2, [sp, #48]	; 0x30
   1dd48:	ldr	r3, [r4, #40]	; 0x28
   1dd4c:	mov	r1, r3
   1dd50:	ldr	r3, [pc, #4012]	; 1ed04 <__assert_fail@plt+0xcf90>
   1dd54:	mov	r2, r1
   1dd58:	cmp	r1, #0
   1dd5c:	moveq	r2, r3
   1dd60:	str	r2, [sp, #60]	; 0x3c
   1dd64:	cmp	r0, #12
   1dd68:	ble	1dd8c <__assert_fail@plt+0xc018>
   1dd6c:	sub	r3, r0, #12
   1dd70:	str	r3, [sp, #48]	; 0x30
   1dd74:	ldrb	r3, [r9]
   1dd78:	cmp	r3, #0
   1dd7c:	beq	1f4c8 <__assert_fail@plt+0xd754>
   1dd80:	mov	fp, #0
   1dd84:	ldr	r6, [pc, #3964]	; 1ed08 <__assert_fail@plt+0xcf94>
   1dd88:	b	1ddf0 <__assert_fail@plt+0xc07c>
   1dd8c:	ldr	r2, [sp, #48]	; 0x30
   1dd90:	mov	r3, r2
   1dd94:	cmp	r2, #0
   1dd98:	moveq	r3, #12
   1dd9c:	str	r3, [sp, #48]	; 0x30
   1dda0:	b	1dd74 <__assert_fail@plt+0xc000>
   1dda4:	cmp	sl, #0
   1dda8:	beq	1ddd4 <__assert_fail@plt+0xc060>
   1ddac:	cmp	r5, #1
   1ddb0:	bls	1ddcc <__assert_fail@plt+0xc058>
   1ddb4:	sub	r5, r5, #1
   1ddb8:	mov	r2, r5
   1ddbc:	mov	r1, #32
   1ddc0:	mov	r0, sl
   1ddc4:	bl	11be8 <memset@plt>
   1ddc8:	add	sl, sl, r5
   1ddcc:	ldrb	r3, [r9]
   1ddd0:	strb	r3, [sl], #1
   1ddd4:	add	fp, fp, r4
   1ddd8:	mov	r7, r9
   1dddc:	add	r9, r7, #1
   1dde0:	ldrb	r3, [r7, #1]
   1dde4:	mvn	r5, #0
   1dde8:	cmp	r3, #0
   1ddec:	beq	1f4cc <__assert_fail@plt+0xd758>
   1ddf0:	cmp	r3, #37	; 0x25
   1ddf4:	beq	1df4c <__assert_fail@plt+0xc1d8>
   1ddf8:	bic	r5, r5, r5, asr #31
   1ddfc:	cmp	r5, #1
   1de00:	movcs	r4, r5
   1de04:	movcc	r4, #1
   1de08:	ldr	r3, [sp, #32]
   1de0c:	sub	r3, r3, fp
   1de10:	cmp	r4, r3
   1de14:	bcc	1dda4 <__assert_fail@plt+0xc030>
   1de18:	mov	r3, #34	; 0x22
   1de1c:	ldr	r2, [sp, #44]	; 0x2c
   1de20:	str	r3, [r2]
   1de24:	mov	fp, #0
   1de28:	mov	r0, fp
   1de2c:	add	sp, sp, #1104	; 0x450
   1de30:	add	sp, sp, #12
   1de34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de38:	str	r3, [sp, #28]
   1de3c:	b	1de44 <__assert_fail@plt+0xc0d0>
   1de40:	mov	r8, r1
   1de44:	ldrb	r3, [r7, #1]!
   1de48:	sub	r2, r3, #35	; 0x23
   1de4c:	cmp	r2, #60	; 0x3c
   1de50:	ldrls	pc, [pc, r2, lsl #2]
   1de54:	b	1df74 <__assert_fail@plt+0xc200>
   1de58:	andeq	sp, r1, r0, asr #28
   1de5c:	andeq	sp, r1, r4, ror pc
   1de60:	andeq	sp, r1, r4, ror pc
   1de64:	andeq	sp, r1, r4, ror pc
   1de68:	andeq	sp, r1, r4, ror pc
   1de6c:	andeq	sp, r1, r4, ror pc
   1de70:	andeq	sp, r1, r4, ror pc
   1de74:	andeq	sp, r1, r4, ror pc
   1de78:	andeq	sp, r1, r8, lsr lr
   1de7c:	andeq	sp, r1, r4, ror pc
   1de80:	andeq	sp, r1, r8, lsr lr
   1de84:	andeq	sp, r1, r4, ror pc
   1de88:	andeq	sp, r1, r4, ror pc
   1de8c:	andeq	sp, r1, r8, lsr lr
   1de90:	andeq	sp, r1, r4, ror pc
   1de94:	andeq	sp, r1, r4, ror pc
   1de98:	andeq	sp, r1, r4, ror pc
   1de9c:	andeq	sp, r1, r4, ror pc
   1dea0:	andeq	sp, r1, r4, ror pc
   1dea4:	andeq	sp, r1, r4, ror pc
   1dea8:	andeq	sp, r1, r4, ror pc
   1deac:	andeq	sp, r1, r4, ror pc
   1deb0:	andeq	sp, r1, r4, ror pc
   1deb4:	andeq	sp, r1, r4, ror pc
   1deb8:	andeq	sp, r1, r4, ror pc
   1debc:	andeq	sp, r1, r4, ror pc
   1dec0:	andeq	sp, r1, r4, ror pc
   1dec4:	andeq	sp, r1, r4, ror pc
   1dec8:	andeq	sp, r1, r4, ror pc
   1decc:	andeq	sp, r1, r4, ror pc
   1ded0:	andeq	sp, r1, r4, ror pc
   1ded4:	andeq	sp, r1, r4, ror pc
   1ded8:	andeq	sp, r1, r4, ror pc
   1dedc:	andeq	sp, r1, r4, ror pc
   1dee0:	andeq	sp, r1, r4, ror pc
   1dee4:	andeq	sp, r1, r4, ror pc
   1dee8:	andeq	sp, r1, r4, ror pc
   1deec:	andeq	sp, r1, r4, ror pc
   1def0:	andeq	sp, r1, r4, ror pc
   1def4:	andeq	sp, r1, r4, ror pc
   1def8:	andeq	sp, r1, r4, ror pc
   1defc:	andeq	sp, r1, r4, ror pc
   1df00:	andeq	sp, r1, r4, ror pc
   1df04:	andeq	sp, r1, r4, ror pc
   1df08:	andeq	sp, r1, r4, ror pc
   1df0c:	andeq	sp, r1, r4, ror pc
   1df10:	andeq	sp, r1, r4, ror pc
   1df14:	andeq	sp, r1, r4, ror pc
   1df18:	andeq	sp, r1, r4, ror pc
   1df1c:	andeq	sp, r1, r4, ror pc
   1df20:	andeq	sp, r1, r4, ror pc
   1df24:	andeq	sp, r1, r4, ror pc
   1df28:	andeq	sp, r1, r4, ror pc
   1df2c:	andeq	sp, r1, r4, ror pc
   1df30:	andeq	sp, r1, r4, ror pc
   1df34:	andeq	sp, r1, r4, ror pc
   1df38:	andeq	sp, r1, r4, ror pc
   1df3c:	andeq	sp, r1, r4, ror pc
   1df40:	andeq	sp, r1, r4, ror pc
   1df44:	andeq	sp, r1, r8, ror #30
   1df48:	andeq	sp, r1, r8, lsr lr
   1df4c:	ldr	r3, [sp, #56]	; 0x38
   1df50:	str	r3, [sp, #40]	; 0x28
   1df54:	mov	r7, r9
   1df58:	mov	r8, #0
   1df5c:	str	r8, [sp, #28]
   1df60:	mov	r1, #1
   1df64:	b	1de44 <__assert_fail@plt+0xc0d0>
   1df68:	mov	r3, #1
   1df6c:	str	r3, [sp, #40]	; 0x28
   1df70:	b	1de44 <__assert_fail@plt+0xc0d0>
   1df74:	sub	r3, r3, #48	; 0x30
   1df78:	cmp	r3, #9
   1df7c:	bhi	1e054 <__assert_fail@plt+0xc2e0>
   1df80:	mov	r5, #0
   1df84:	ldr	r4, [pc, #3456]	; 1ed0c <__assert_fail@plt+0xcf98>
   1df88:	b	1dfe4 <__assert_fail@plt+0xc270>
   1df8c:	cmn	r5, #1
   1df90:	moveq	r0, #0
   1df94:	beq	1dff8 <__assert_fail@plt+0xc284>
   1df98:	mov	r1, r5
   1df9c:	mov	r0, #-2147483648	; 0x80000000
   1dfa0:	bl	236a8 <_obstack_memory_used@@Base+0x3cd4>
   1dfa4:	cmp	r0, #9
   1dfa8:	movgt	r0, #0
   1dfac:	movle	r0, #1
   1dfb0:	b	1dff8 <__assert_fail@plt+0xc284>
   1dfb4:	rsb	r3, r2, #-2147483600	; 0x80000030
   1dfb8:	cmp	r5, r3
   1dfbc:	movge	r3, #0
   1dfc0:	movlt	r3, #1
   1dfc4:	cmp	r3, #0
   1dfc8:	addeq	r5, r2, r5
   1dfcc:	subeq	r5, r5, #48	; 0x30
   1dfd0:	mvnne	r5, #-2147483648	; 0x80000000
   1dfd4:	ldrb	r3, [r7, #1]!
   1dfd8:	sub	r3, r3, #48	; 0x30
   1dfdc:	cmp	r3, #9
   1dfe0:	bhi	1e054 <__assert_fail@plt+0xc2e0>
   1dfe4:	cmp	r5, #0
   1dfe8:	blt	1df8c <__assert_fail@plt+0xc218>
   1dfec:	cmp	r5, r4
   1dff0:	movle	r0, #0
   1dff4:	movgt	r0, #1
   1dff8:	cmp	r0, #0
   1dffc:	mvnne	r5, #-2147483648	; 0x80000000
   1e000:	bne	1dfd4 <__assert_fail@plt+0xc260>
   1e004:	add	r5, r5, r5, lsl #2
   1e008:	lsl	r5, r5, #1
   1e00c:	ldrb	r2, [r7]
   1e010:	subs	r3, r2, #48	; 0x30
   1e014:	bmi	1dfb4 <__assert_fail@plt+0xc240>
   1e018:	cmp	r5, #0
   1e01c:	blt	1e040 <__assert_fail@plt+0xc2cc>
   1e020:	rsb	r3, r3, #2130706432	; 0x7f000000
   1e024:	add	r3, r3, #16711680	; 0xff0000
   1e028:	add	r3, r3, #65280	; 0xff00
   1e02c:	add	r3, r3, #255	; 0xff
   1e030:	cmp	r5, r3
   1e034:	movle	r3, #0
   1e038:	movgt	r3, #1
   1e03c:	b	1dfc4 <__assert_fail@plt+0xc250>
   1e040:	rsb	r1, r5, #-2147483648	; 0x80000000
   1e044:	cmp	r3, r1
   1e048:	movge	r3, #0
   1e04c:	movlt	r3, #1
   1e050:	b	1dfc4 <__assert_fail@plt+0xc250>
   1e054:	ldrb	r2, [r7]
   1e058:	cmp	r2, #69	; 0x45
   1e05c:	beq	1e26c <__assert_fail@plt+0xc4f8>
   1e060:	cmp	r2, #79	; 0x4f
   1e064:	movne	r2, #0
   1e068:	beq	1e26c <__assert_fail@plt+0xc4f8>
   1e06c:	ldrb	r1, [r7]
   1e070:	mov	r4, r1
   1e074:	cmp	r1, #122	; 0x7a
   1e078:	ldrls	pc, [pc, r1, lsl #2]
   1e07c:	b	1e3b4 <__assert_fail@plt+0xc640>
   1e080:			; <UNDEFINED> instruction: 0x0001e3b0
   1e084:			; <UNDEFINED> instruction: 0x0001e3b4
   1e088:			; <UNDEFINED> instruction: 0x0001e3b4
   1e08c:			; <UNDEFINED> instruction: 0x0001e3b4
   1e090:			; <UNDEFINED> instruction: 0x0001e3b4
   1e094:			; <UNDEFINED> instruction: 0x0001e3b4
   1e098:			; <UNDEFINED> instruction: 0x0001e3b4
   1e09c:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0a0:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0a4:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0a8:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0ac:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0b0:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0b4:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0b8:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0bc:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0c0:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0c4:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0c8:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0cc:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0d0:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0d4:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0d8:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0dc:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0e0:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0e4:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0e8:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0ec:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0f0:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0f4:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0f8:			; <UNDEFINED> instruction: 0x0001e3b4
   1e0fc:			; <UNDEFINED> instruction: 0x0001e3b4
   1e100:			; <UNDEFINED> instruction: 0x0001e3b4
   1e104:			; <UNDEFINED> instruction: 0x0001e3b4
   1e108:			; <UNDEFINED> instruction: 0x0001e3b4
   1e10c:			; <UNDEFINED> instruction: 0x0001e3b4
   1e110:			; <UNDEFINED> instruction: 0x0001e3b4
   1e114:	andeq	lr, r1, r4, lsr #7
   1e118:			; <UNDEFINED> instruction: 0x0001e3b4
   1e11c:			; <UNDEFINED> instruction: 0x0001e3b4
   1e120:			; <UNDEFINED> instruction: 0x0001e3b4
   1e124:			; <UNDEFINED> instruction: 0x0001e3b4
   1e128:			; <UNDEFINED> instruction: 0x0001e3b4
   1e12c:			; <UNDEFINED> instruction: 0x0001e3b4
   1e130:			; <UNDEFINED> instruction: 0x0001e3b4
   1e134:			; <UNDEFINED> instruction: 0x0001e3b4
   1e138:			; <UNDEFINED> instruction: 0x0001e3b4
   1e13c:			; <UNDEFINED> instruction: 0x0001e3b4
   1e140:			; <UNDEFINED> instruction: 0x0001e3b4
   1e144:			; <UNDEFINED> instruction: 0x0001e3b4
   1e148:			; <UNDEFINED> instruction: 0x0001e3b4
   1e14c:			; <UNDEFINED> instruction: 0x0001e3b4
   1e150:			; <UNDEFINED> instruction: 0x0001e3b4
   1e154:			; <UNDEFINED> instruction: 0x0001e3b4
   1e158:			; <UNDEFINED> instruction: 0x0001e3b4
   1e15c:			; <UNDEFINED> instruction: 0x0001e3b4
   1e160:			; <UNDEFINED> instruction: 0x0001e3b4
   1e164:			; <UNDEFINED> instruction: 0x0001e3b4
   1e168:	andeq	lr, r1, r0, lsl #7
   1e16c:			; <UNDEFINED> instruction: 0x0001e3b4
   1e170:			; <UNDEFINED> instruction: 0x0001e3b4
   1e174:			; <UNDEFINED> instruction: 0x0001e3b4
   1e178:			; <UNDEFINED> instruction: 0x0001e3b4
   1e17c:			; <UNDEFINED> instruction: 0x0001e3b4
   1e180:			; <UNDEFINED> instruction: 0x0001e3b4
   1e184:	andeq	lr, r1, r8, lsl r5
   1e188:	andeq	lr, r1, r8, asr r5
   1e18c:	strdeq	lr, [r1], -ip
   1e190:	muleq	r1, ip, r7
   1e194:			; <UNDEFINED> instruction: 0x0001e3b4
   1e198:	andeq	lr, r1, r4, asr r9
   1e19c:	andeq	lr, r1, r0, lsl #30
   1e1a0:	andeq	lr, r1, ip, lsl #19
   1e1a4:	andeq	lr, r1, r4, lsr #19
   1e1a8:			; <UNDEFINED> instruction: 0x0001e3b4
   1e1ac:			; <UNDEFINED> instruction: 0x0001e3b4
   1e1b0:			; <UNDEFINED> instruction: 0x0001e3b4
   1e1b4:	andeq	lr, r1, r0, lsl sl
   1e1b8:	andeq	lr, r1, ip, asr sl
   1e1bc:			; <UNDEFINED> instruction: 0x0001e3b4
   1e1c0:	andeq	lr, r1, r4, ror ip
   1e1c4:			; <UNDEFINED> instruction: 0x0001e3b4
   1e1c8:	andeq	lr, r1, ip, lsl #11
   1e1cc:	andeq	lr, r1, ip, ror #25
   1e1d0:	andeq	lr, r1, r4, ror r2
   1e1d4:	andeq	lr, r1, r8, asr #29
   1e1d8:	andeq	lr, r1, r0, lsl #30
   1e1dc:	andeq	pc, r1, r0, ror r1	; <UNPREDICTABLE>
   1e1e0:	strdeq	lr, [r1], -r0
   1e1e4:	andeq	pc, r1, r0, ror #3
   1e1e8:	andeq	pc, r1, r0, ror r2	; <UNPREDICTABLE>
   1e1ec:			; <UNDEFINED> instruction: 0x0001e3b4
   1e1f0:			; <UNDEFINED> instruction: 0x0001e3b4
   1e1f4:			; <UNDEFINED> instruction: 0x0001e3b4
   1e1f8:			; <UNDEFINED> instruction: 0x0001e3b4
   1e1fc:			; <UNDEFINED> instruction: 0x0001e3b4
   1e200:			; <UNDEFINED> instruction: 0x0001e3b4
   1e204:	andeq	lr, r1, r0, ror #9
   1e208:	andeq	lr, r1, r8, lsr r5
   1e20c:	andeq	lr, r1, r8, ror r5
   1e210:			; <UNDEFINED> instruction: 0x0001e7b4
   1e214:	andeq	lr, r1, ip, asr #15
   1e218:			; <UNDEFINED> instruction: 0x0001e3b4
   1e21c:	andeq	lr, r1, r0, lsl #30
   1e220:	andeq	lr, r1, r8, lsr r5
   1e224:			; <UNDEFINED> instruction: 0x0001e3b4
   1e228:	ldrdeq	lr, [r1], -ip
   1e22c:			; <UNDEFINED> instruction: 0x0001e9b8
   1e230:	andeq	lr, r1, ip, asr #19
   1e234:	andeq	lr, r1, r8, lsr #20
   1e238:	andeq	lr, r1, r4, ror #23
   1e23c:			; <UNDEFINED> instruction: 0x0001e3b4
   1e240:	muleq	r1, r4, ip
   1e244:	muleq	r1, ip, ip
   1e248:	andeq	lr, r1, r4, asr #11
   1e24c:	andeq	lr, r1, r4, asr #26
   1e250:	andeq	lr, r1, r4, lsl #28
   1e254:	muleq	r1, r4, lr
   1e258:			; <UNDEFINED> instruction: 0x0001e3b4
   1e25c:	andeq	pc, r1, r8, asr #3
   1e260:	andeq	lr, r1, r8, lsl #15
   1e264:	andeq	pc, r1, ip, lsl r2	; <UNPREDICTABLE>
   1e268:	andeq	pc, r1, r4, lsl #7
   1e26c:	add	r7, r7, #1
   1e270:	b	1e06c <__assert_fail@plt+0xc2f8>
   1e274:	mvn	r8, #0
   1e278:	ldr	r3, [pc, #2704]	; 1ed10 <__assert_fail@plt+0xcf9c>
   1e27c:	str	r3, [sp, #52]	; 0x34
   1e280:	ldr	r3, [sp, #1172]	; 0x494
   1e284:	str	r3, [sp, #20]
   1e288:	ldr	r3, [sp, #1168]	; 0x490
   1e28c:	str	r3, [sp, #16]
   1e290:	ldr	r3, [sp, #1164]	; 0x48c
   1e294:	str	r3, [sp, #12]
   1e298:	str	r8, [sp, #8]
   1e29c:	ldr	r4, [sp, #28]
   1e2a0:	str	r4, [sp, #4]
   1e2a4:	ldr	r3, [sp, #40]	; 0x28
   1e2a8:	str	r3, [sp]
   1e2ac:	ldr	r3, [sp, #36]	; 0x24
   1e2b0:	ldr	r2, [sp, #52]	; 0x34
   1e2b4:	mvn	r1, #0
   1e2b8:	mov	r0, #0
   1e2bc:	bl	1dd00 <__assert_fail@plt+0xbf8c>
   1e2c0:	mov	r9, r0
   1e2c4:	subs	r3, r4, #45	; 0x2d
   1e2c8:	movne	r3, #1
   1e2cc:	cmp	r5, #0
   1e2d0:	movlt	r3, #0
   1e2d4:	cmp	r3, #0
   1e2d8:	moveq	r5, #0
   1e2dc:	mov	r4, r5
   1e2e0:	cmp	r5, r0
   1e2e4:	movcc	r5, r0
   1e2e8:	ldr	r3, [sp, #32]
   1e2ec:	sub	r3, r3, fp
   1e2f0:	str	r3, [sp, #68]	; 0x44
   1e2f4:	cmp	r5, r3
   1e2f8:	bcs	1e5b4 <__assert_fail@plt+0xc840>
   1e2fc:	cmp	sl, #0
   1e300:	beq	1e378 <__assert_fail@plt+0xc604>
   1e304:	cmp	r4, r0
   1e308:	bls	1e334 <__assert_fail@plt+0xc5c0>
   1e30c:	sub	r4, r4, r0
   1e310:	ldr	r3, [sp, #28]
   1e314:	cmp	r3, #43	; 0x2b
   1e318:	cmpne	r3, #48	; 0x30
   1e31c:	mov	r2, r4
   1e320:	moveq	r1, #48	; 0x30
   1e324:	movne	r1, #32
   1e328:	mov	r0, sl
   1e32c:	bl	11be8 <memset@plt>
   1e330:	add	sl, sl, r4
   1e334:	ldr	r3, [sp, #1172]	; 0x494
   1e338:	str	r3, [sp, #20]
   1e33c:	ldr	r3, [sp, #1168]	; 0x490
   1e340:	str	r3, [sp, #16]
   1e344:	ldr	r3, [sp, #1164]	; 0x48c
   1e348:	str	r3, [sp, #12]
   1e34c:	str	r8, [sp, #8]
   1e350:	ldr	r3, [sp, #28]
   1e354:	str	r3, [sp, #4]
   1e358:	ldr	r3, [sp, #40]	; 0x28
   1e35c:	str	r3, [sp]
   1e360:	ldr	r3, [sp, #36]	; 0x24
   1e364:	ldr	r2, [sp, #52]	; 0x34
   1e368:	ldr	r1, [sp, #68]	; 0x44
   1e36c:	mov	r0, sl
   1e370:	bl	1dd00 <__assert_fail@plt+0xbf8c>
   1e374:	add	sl, sl, r9
   1e378:	add	fp, fp, r5
   1e37c:	b	1dddc <__assert_fail@plt+0xc068>
   1e380:	add	r0, r7, #1
   1e384:	ldrb	r3, [r7, #1]
   1e388:	cmp	r3, #58	; 0x3a
   1e38c:	movne	lr, #1
   1e390:	beq	1f364 <__assert_fail@plt+0xd5f0>
   1e394:	cmp	r3, #122	; 0x7a
   1e398:	moveq	r7, r0
   1e39c:	bne	1e3b4 <__assert_fail@plt+0xc640>
   1e3a0:	b	1f388 <__assert_fail@plt+0xd614>
   1e3a4:	sub	r3, r7, #1
   1e3a8:	cmp	r9, r3
   1e3ac:	beq	1e454 <__assert_fail@plt+0xc6e0>
   1e3b0:	sub	r7, r7, #1
   1e3b4:	sub	r8, r7, r9
   1e3b8:	add	r8, r8, #1
   1e3bc:	ldr	r3, [sp, #28]
   1e3c0:	subs	r3, r3, #45	; 0x2d
   1e3c4:	movne	r3, #1
   1e3c8:	cmp	r5, #0
   1e3cc:	movlt	r3, #0
   1e3d0:	cmp	r3, #0
   1e3d4:	moveq	r5, #0
   1e3d8:	mov	r4, r5
   1e3dc:	cmp	r5, r8
   1e3e0:	movcc	r5, r8
   1e3e4:	ldr	r3, [sp, #32]
   1e3e8:	sub	r3, r3, fp
   1e3ec:	cmp	r5, r3
   1e3f0:	bcs	1f4a4 <__assert_fail@plt+0xd730>
   1e3f4:	cmp	sl, #0
   1e3f8:	beq	1e44c <__assert_fail@plt+0xc6d8>
   1e3fc:	cmp	r4, r8
   1e400:	bls	1e42c <__assert_fail@plt+0xc6b8>
   1e404:	sub	r4, r4, r8
   1e408:	ldr	r3, [sp, #28]
   1e40c:	cmp	r3, #43	; 0x2b
   1e410:	cmpne	r3, #48	; 0x30
   1e414:	mov	r2, r4
   1e418:	moveq	r1, #48	; 0x30
   1e41c:	movne	r1, #32
   1e420:	mov	r0, sl
   1e424:	bl	11be8 <memset@plt>
   1e428:	add	sl, sl, r4
   1e42c:	ldr	r3, [sp, #40]	; 0x28
   1e430:	cmp	r3, #0
   1e434:	beq	1f4b4 <__assert_fail@plt+0xd740>
   1e438:	mov	r2, r8
   1e43c:	mov	r1, r9
   1e440:	mov	r0, sl
   1e444:	bl	1dcbc <__assert_fail@plt+0xbf48>
   1e448:	add	sl, sl, r8
   1e44c:	add	fp, fp, r5
   1e450:	b	1dddc <__assert_fail@plt+0xc068>
   1e454:	ldr	r3, [sp, #28]
   1e458:	subs	r3, r3, #45	; 0x2d
   1e45c:	movne	r3, #1
   1e460:	cmp	r5, #0
   1e464:	movlt	r3, #0
   1e468:	cmp	r3, #0
   1e46c:	moveq	r5, #0
   1e470:	mov	r4, r5
   1e474:	cmp	r5, #1
   1e478:	movcc	r5, #1
   1e47c:	ldr	r3, [sp, #32]
   1e480:	sub	r3, r3, fp
   1e484:	cmp	r5, r3
   1e488:	movcs	r3, #34	; 0x22
   1e48c:	ldrcs	r2, [sp, #44]	; 0x2c
   1e490:	strcs	r3, [r2]
   1e494:	bcs	1de24 <__assert_fail@plt+0xc0b0>
   1e498:	cmp	sl, #0
   1e49c:	beq	1e4d8 <__assert_fail@plt+0xc764>
   1e4a0:	cmp	r4, #1
   1e4a4:	bls	1e4d0 <__assert_fail@plt+0xc75c>
   1e4a8:	sub	r4, r4, #1
   1e4ac:	ldr	r3, [sp, #28]
   1e4b0:	cmp	r3, #43	; 0x2b
   1e4b4:	cmpne	r3, #48	; 0x30
   1e4b8:	mov	r2, r4
   1e4bc:	moveq	r1, #48	; 0x30
   1e4c0:	movne	r1, #32
   1e4c4:	mov	r0, sl
   1e4c8:	bl	11be8 <memset@plt>
   1e4cc:	add	sl, sl, r4
   1e4d0:	ldrb	r3, [r7]
   1e4d4:	strb	r3, [sl], #1
   1e4d8:	add	fp, fp, r5
   1e4dc:	b	1dddc <__assert_fail@plt+0xc068>
   1e4e0:	cmp	r2, #0
   1e4e4:	bne	1e3b4 <__assert_fail@plt+0xc640>
   1e4e8:	ldr	r3, [sp, #40]	; 0x28
   1e4ec:	cmp	r8, #0
   1e4f0:	movne	r3, r8
   1e4f4:	str	r3, [sp, #40]	; 0x28
   1e4f8:	mov	r4, #97	; 0x61
   1e4fc:	mov	r3, #32
   1e500:	strb	r3, [sp, #72]	; 0x48
   1e504:	mov	r3, #37	; 0x25
   1e508:	strb	r3, [sp, #73]	; 0x49
   1e50c:	mov	r8, #0
   1e510:	add	r3, sp, #74	; 0x4a
   1e514:	b	1e5f8 <__assert_fail@plt+0xc884>
   1e518:	cmp	r2, #0
   1e51c:	bne	1e3b4 <__assert_fail@plt+0xc640>
   1e520:	ldr	r3, [sp, #40]	; 0x28
   1e524:	cmp	r8, #0
   1e528:	movne	r3, r8
   1e52c:	str	r3, [sp, #40]	; 0x28
   1e530:	mov	r4, #65	; 0x41
   1e534:	b	1e4fc <__assert_fail@plt+0xc788>
   1e538:	ldr	r3, [sp, #40]	; 0x28
   1e53c:	cmp	r8, #0
   1e540:	movne	r3, r8
   1e544:	str	r3, [sp, #40]	; 0x28
   1e548:	cmp	r2, #69	; 0x45
   1e54c:	movne	r8, #0
   1e550:	bne	1e5d0 <__assert_fail@plt+0xc85c>
   1e554:	b	1e3b4 <__assert_fail@plt+0xc640>
   1e558:	cmp	r2, #69	; 0x45
   1e55c:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1e560:	cmp	r8, #0
   1e564:	moveq	r4, #66	; 0x42
   1e568:	strne	r8, [sp, #40]	; 0x28
   1e56c:	movne	r4, #66	; 0x42
   1e570:	movne	r8, #0
   1e574:	b	1e5d0 <__assert_fail@plt+0xc85c>
   1e578:	cmp	r2, #79	; 0x4f
   1e57c:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1e580:	mov	r4, #99	; 0x63
   1e584:	mov	r8, #0
   1e588:	b	1e5d0 <__assert_fail@plt+0xc85c>
   1e58c:	mvn	r8, #0
   1e590:	ldr	r3, [pc, #1916]	; 1ed14 <__assert_fail@plt+0xcfa0>
   1e594:	str	r3, [sp, #52]	; 0x34
   1e598:	b	1e280 <__assert_fail@plt+0xc50c>
   1e59c:	mov	r8, #4
   1e5a0:	ldr	r3, [pc, #1904]	; 1ed18 <__assert_fail@plt+0xcfa4>
   1e5a4:	str	r3, [sp, #52]	; 0x34
   1e5a8:	mov	r3, #43	; 0x2b
   1e5ac:	str	r3, [sp, #28]
   1e5b0:	b	1e280 <__assert_fail@plt+0xc50c>
   1e5b4:	mov	r3, #34	; 0x22
   1e5b8:	ldr	r2, [sp, #44]	; 0x2c
   1e5bc:	str	r3, [r2]
   1e5c0:	b	1de24 <__assert_fail@plt+0xc0b0>
   1e5c4:	mov	r8, #0
   1e5c8:	b	1e5d0 <__assert_fail@plt+0xc85c>
   1e5cc:	mov	r8, #0
   1e5d0:	mov	r3, #32
   1e5d4:	strb	r3, [sp, #72]	; 0x48
   1e5d8:	mov	r3, #37	; 0x25
   1e5dc:	strb	r3, [sp, #73]	; 0x49
   1e5e0:	cmp	r2, #0
   1e5e4:	addeq	r3, sp, #72	; 0x48
   1e5e8:	addeq	r3, sp, #74	; 0x4a
   1e5ec:	beq	1e5f8 <__assert_fail@plt+0xc884>
   1e5f0:	strb	r2, [sp, #74]	; 0x4a
   1e5f4:	add	r3, sp, #75	; 0x4b
   1e5f8:	strb	r4, [r3]
   1e5fc:	mov	r2, #0
   1e600:	strb	r2, [r3, #1]
   1e604:	ldr	r3, [sp, #36]	; 0x24
   1e608:	add	r2, sp, #72	; 0x48
   1e60c:	mov	r1, #1024	; 0x400
   1e610:	add	r0, sp, #88	; 0x58
   1e614:	bl	11b04 <strftime@plt>
   1e618:	cmp	r0, #0
   1e61c:	beq	1dddc <__assert_fail@plt+0xc068>
   1e620:	sub	r9, r0, #1
   1e624:	ldr	r3, [sp, #28]
   1e628:	subs	r3, r3, #45	; 0x2d
   1e62c:	movne	r3, #1
   1e630:	cmp	r5, #0
   1e634:	movlt	r3, #0
   1e638:	cmp	r3, #0
   1e63c:	moveq	r5, #0
   1e640:	mov	r4, r5
   1e644:	cmp	r5, r9
   1e648:	movcc	r5, r9
   1e64c:	ldr	r3, [sp, #32]
   1e650:	sub	r3, r3, fp
   1e654:	cmp	r5, r3
   1e658:	bcs	1e6bc <__assert_fail@plt+0xc948>
   1e65c:	cmp	sl, #0
   1e660:	beq	1e6e0 <__assert_fail@plt+0xc96c>
   1e664:	cmp	r4, r9
   1e668:	bls	1e694 <__assert_fail@plt+0xc920>
   1e66c:	sub	r4, r4, r9
   1e670:	ldr	r3, [sp, #28]
   1e674:	cmp	r3, #43	; 0x2b
   1e678:	cmpne	r3, #48	; 0x30
   1e67c:	mov	r2, r4
   1e680:	moveq	r1, #48	; 0x30
   1e684:	movne	r1, #32
   1e688:	mov	r0, sl
   1e68c:	bl	11be8 <memset@plt>
   1e690:	add	sl, sl, r4
   1e694:	cmp	r8, #0
   1e698:	bne	1e6cc <__assert_fail@plt+0xc958>
   1e69c:	ldr	r3, [sp, #40]	; 0x28
   1e6a0:	cmp	r3, #0
   1e6a4:	beq	1e6e8 <__assert_fail@plt+0xc974>
   1e6a8:	mov	r2, r9
   1e6ac:	add	r1, sp, #89	; 0x59
   1e6b0:	mov	r0, sl
   1e6b4:	bl	1dcbc <__assert_fail@plt+0xbf48>
   1e6b8:	b	1e6dc <__assert_fail@plt+0xc968>
   1e6bc:	mov	r3, #34	; 0x22
   1e6c0:	ldr	r2, [sp, #44]	; 0x2c
   1e6c4:	str	r3, [r2]
   1e6c8:	b	1de24 <__assert_fail@plt+0xc0b0>
   1e6cc:	mov	r2, r9
   1e6d0:	add	r1, sp, #89	; 0x59
   1e6d4:	mov	r0, sl
   1e6d8:	bl	1dc78 <__assert_fail@plt+0xbf04>
   1e6dc:	add	sl, sl, r9
   1e6e0:	add	fp, fp, r5
   1e6e4:	b	1dddc <__assert_fail@plt+0xc068>
   1e6e8:	mov	r2, r9
   1e6ec:	add	r1, sp, #89	; 0x59
   1e6f0:	mov	r0, sl
   1e6f4:	bl	11930 <memcpy@plt>
   1e6f8:	b	1e6dc <__assert_fail@plt+0xc968>
   1e6fc:	cmp	r2, #69	; 0x45
   1e700:	beq	1f4f0 <__assert_fail@plt+0xd77c>
   1e704:	ldr	r3, [sp, #36]	; 0x24
   1e708:	ldr	r1, [r3, #20]
   1e70c:	ldr	r3, [pc, #1564]	; 1ed30 <__assert_fail@plt+0xcfbc>
   1e710:	cmp	r1, r3
   1e714:	movge	r3, #0
   1e718:	movlt	r3, #1
   1e71c:	str	r3, [sp, #52]	; 0x34
   1e720:	add	r3, r1, #1888	; 0x760
   1e724:	add	r3, r3, #12
   1e728:	ldr	r0, [pc, #1516]	; 1ed1c <__assert_fail@plt+0xcfa8>
   1e72c:	cmp	r3, r0
   1e730:	movhi	r3, #0
   1e734:	movls	r3, #1
   1e738:	mvn	r0, #98	; 0x62
   1e73c:	mla	r3, r0, r3, r1
   1e740:	ldr	r1, [pc, #1516]	; 1ed34 <__assert_fail@plt+0xcfc0>
   1e744:	smull	r0, r1, r1, r3
   1e748:	asr	r3, r3, #31
   1e74c:	rsb	r3, r3, r1, asr #5
   1e750:	add	r3, r3, #19
   1e754:	mov	r8, #2
   1e758:	ldr	r0, [sp, #28]
   1e75c:	mov	r1, r0
   1e760:	ldr	ip, [sp, #1156]	; 0x484
   1e764:	cmp	r0, #0
   1e768:	moveq	r1, ip
   1e76c:	str	r1, [sp, #28]
   1e770:	cmp	r1, #43	; 0x2b
   1e774:	movne	r1, #0
   1e778:	beq	1e8d4 <__assert_fail@plt+0xcb60>
   1e77c:	mov	r9, r1
   1e780:	mov	r0, #0
   1e784:	b	1e800 <__assert_fail@plt+0xca8c>
   1e788:	cmp	r2, #79	; 0x4f
   1e78c:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1e790:	mov	r4, #120	; 0x78
   1e794:	mov	r8, #0
   1e798:	b	1e5d0 <__assert_fail@plt+0xc85c>
   1e79c:	cmp	r2, #0
   1e7a0:	bne	1e3b4 <__assert_fail@plt+0xc640>
   1e7a4:	mvn	r8, #0
   1e7a8:	ldr	r3, [pc, #1392]	; 1ed20 <__assert_fail@plt+0xcfac>
   1e7ac:	str	r3, [sp, #52]	; 0x34
   1e7b0:	b	1e280 <__assert_fail@plt+0xc50c>
   1e7b4:	cmp	r2, #69	; 0x45
   1e7b8:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1e7bc:	ldr	r3, [sp, #36]	; 0x24
   1e7c0:	ldr	r3, [r3, #12]
   1e7c4:	mov	r8, #2
   1e7c8:	b	1e7f0 <__assert_fail@plt+0xca7c>
   1e7cc:	cmp	r2, #69	; 0x45
   1e7d0:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1e7d4:	ldr	r3, [sp, #36]	; 0x24
   1e7d8:	ldr	r3, [r3, #12]
   1e7dc:	ldr	r1, [sp, #28]
   1e7e0:	cmp	r1, #0
   1e7e4:	mov	r8, #2
   1e7e8:	moveq	r1, #95	; 0x5f
   1e7ec:	streq	r1, [sp, #28]
   1e7f0:	lsr	r1, r3, #31
   1e7f4:	str	r1, [sp, #52]	; 0x34
   1e7f8:	mov	r0, #0
   1e7fc:	mov	r9, r0
   1e800:	ldr	ip, [sp, #52]	; 0x34
   1e804:	eor	r1, ip, #1
   1e808:	cmp	r2, #79	; 0x4f
   1e80c:	movne	r1, #0
   1e810:	andeq	r1, r1, #1
   1e814:	cmp	r1, #0
   1e818:	bne	1e5cc <__assert_fail@plt+0xc858>
   1e81c:	mov	r1, ip
   1e820:	cmp	ip, #0
   1e824:	rsbne	r3, r3, #0
   1e828:	add	r4, sp, #86	; 0x56
   1e82c:	mov	lr, #58	; 0x3a
   1e830:	mov	ip, r3
   1e834:	tst	r0, #1
   1e838:	subne	r1, r4, #1
   1e83c:	strbne	lr, [r4, #-1]
   1e840:	moveq	r1, r4
   1e844:	sub	r4, r1, #1
   1e848:	ldr	r3, [pc, #1236]	; 1ed24 <__assert_fail@plt+0xcfb0>
   1e84c:	umull	r3, r2, r3, ip
   1e850:	lsr	r2, r2, #3
   1e854:	add	r3, r2, r2, lsl #2
   1e858:	sub	r3, ip, r3, lsl #1
   1e85c:	add	r3, r3, #48	; 0x30
   1e860:	strb	r3, [r1, #-1]
   1e864:	mov	ip, r2
   1e868:	asrs	r0, r0, #1
   1e86c:	movne	r3, #1
   1e870:	moveq	r3, #0
   1e874:	cmp	r2, #0
   1e878:	moveq	r2, r3
   1e87c:	orrne	r2, r3, #1
   1e880:	cmp	r2, #0
   1e884:	bne	1e834 <__assert_fail@plt+0xcac0>
   1e888:	ldr	r2, [sp, #28]
   1e88c:	mov	r3, r2
   1e890:	cmp	r2, #0
   1e894:	moveq	r3, #48	; 0x30
   1e898:	str	r3, [sp, #28]
   1e89c:	cmp	r5, #0
   1e8a0:	movlt	r5, r8
   1e8a4:	ldr	r3, [sp, #52]	; 0x34
   1e8a8:	cmp	r3, #0
   1e8ac:	bne	1f51c <__assert_fail@plt+0xd7a8>
   1e8b0:	cmp	r9, #0
   1e8b4:	bne	1f618 <__assert_fail@plt+0xd8a4>
   1e8b8:	add	r8, sp, #86	; 0x56
   1e8bc:	sub	r3, r8, r4
   1e8c0:	str	r3, [sp, #68]	; 0x44
   1e8c4:	ldr	r3, [sp, #28]
   1e8c8:	subs	r9, r3, #45	; 0x2d
   1e8cc:	movne	r9, #1
   1e8d0:	b	1f584 <__assert_fail@plt+0xd810>
   1e8d4:	ldr	r0, [pc, #1100]	; 1ed28 <__assert_fail@plt+0xcfb4>
   1e8d8:	cmp	r8, #2
   1e8dc:	moveq	r0, #99	; 0x63
   1e8e0:	cmp	r8, r5
   1e8e4:	movge	r1, #0
   1e8e8:	movlt	r1, #1
   1e8ec:	cmp	r3, r0
   1e8f0:	orrhi	r1, r1, #1
   1e8f4:	b	1e77c <__assert_fail@plt+0xca08>
   1e8f8:	cmp	sl, #0
   1e8fc:	beq	1e914 <__assert_fail@plt+0xcba0>
   1e900:	mov	r2, r8
   1e904:	mov	r1, #32
   1e908:	mov	r0, sl
   1e90c:	bl	11be8 <memset@plt>
   1e910:	add	sl, sl, r8
   1e914:	add	fp, fp, r8
   1e918:	sub	r5, r5, r8
   1e91c:	b	1f560 <__assert_fail@plt+0xd7ec>
   1e920:	mov	r3, #34	; 0x22
   1e924:	ldr	r2, [sp, #44]	; 0x2c
   1e928:	str	r3, [r2]
   1e92c:	b	1de24 <__assert_fail@plt+0xc0b0>
   1e930:	mov	r3, #34	; 0x22
   1e934:	ldr	r2, [sp, #44]	; 0x2c
   1e938:	str	r3, [r2]
   1e93c:	b	1de24 <__assert_fail@plt+0xc0b0>
   1e940:	mov	r2, r8
   1e944:	mov	r1, r4
   1e948:	mov	r0, sl
   1e94c:	bl	11930 <memcpy@plt>
   1e950:	b	1f60c <__assert_fail@plt+0xd898>
   1e954:	cmp	r2, #0
   1e958:	bne	1e3b4 <__assert_fail@plt+0xc640>
   1e95c:	lsr	r3, r5, #31
   1e960:	ldr	r2, [sp, #28]
   1e964:	cmp	r2, #0
   1e968:	movne	r3, #0
   1e96c:	andeq	r3, r3, #1
   1e970:	cmp	r3, #0
   1e974:	bne	1e59c <__assert_fail@plt+0xc828>
   1e978:	sub	r8, r5, #6
   1e97c:	bic	r8, r8, r8, asr #31
   1e980:	ldr	r3, [pc, #912]	; 1ed18 <__assert_fail@plt+0xcfa4>
   1e984:	str	r3, [sp, #52]	; 0x34
   1e988:	b	1e280 <__assert_fail@plt+0xc50c>
   1e98c:	cmp	r2, #69	; 0x45
   1e990:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1e994:	ldr	r3, [sp, #36]	; 0x24
   1e998:	ldr	r3, [r3, #8]
   1e99c:	mov	r8, #2
   1e9a0:	b	1e7f0 <__assert_fail@plt+0xca7c>
   1e9a4:	cmp	r2, #69	; 0x45
   1e9a8:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1e9ac:	ldr	r3, [sp, #48]	; 0x30
   1e9b0:	mov	r8, #2
   1e9b4:	b	1e7f0 <__assert_fail@plt+0xca7c>
   1e9b8:	cmp	r2, #69	; 0x45
   1e9bc:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1e9c0:	ldr	r3, [sp, #36]	; 0x24
   1e9c4:	ldr	r3, [r3, #8]
   1e9c8:	b	1e7dc <__assert_fail@plt+0xca68>
   1e9cc:	cmp	r2, #69	; 0x45
   1e9d0:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1e9d4:	ldr	r3, [sp, #48]	; 0x30
   1e9d8:	b	1e7dc <__assert_fail@plt+0xca68>
   1e9dc:	cmp	r2, #69	; 0x45
   1e9e0:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1e9e4:	ldr	r3, [sp, #36]	; 0x24
   1e9e8:	ldr	r3, [r3, #28]
   1e9ec:	cmn	r3, #1
   1e9f0:	movge	r1, #0
   1e9f4:	movlt	r1, #1
   1e9f8:	str	r1, [sp, #52]	; 0x34
   1e9fc:	add	r3, r3, #1
   1ea00:	mov	r0, #0
   1ea04:	mov	r9, r0
   1ea08:	mov	r8, #3
   1ea0c:	b	1e800 <__assert_fail@plt+0xca8c>
   1ea10:	cmp	r2, #69	; 0x45
   1ea14:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1ea18:	ldr	r3, [sp, #36]	; 0x24
   1ea1c:	ldr	r3, [r3, #4]
   1ea20:	mov	r8, #2
   1ea24:	b	1e7f0 <__assert_fail@plt+0xca7c>
   1ea28:	cmp	r2, #69	; 0x45
   1ea2c:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1ea30:	ldr	r3, [sp, #36]	; 0x24
   1ea34:	ldr	r3, [r3, #16]
   1ea38:	cmn	r3, #1
   1ea3c:	movge	r1, #0
   1ea40:	movlt	r1, #1
   1ea44:	str	r1, [sp, #52]	; 0x34
   1ea48:	add	r3, r3, #1
   1ea4c:	mov	r0, #0
   1ea50:	mov	r9, r0
   1ea54:	mov	r8, #2
   1ea58:	b	1e800 <__assert_fail@plt+0xca8c>
   1ea5c:	cmp	r2, #69	; 0x45
   1ea60:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1ea64:	cmp	r5, #0
   1ea68:	movle	r5, #9
   1ea6c:	ldr	r3, [sp, #1172]	; 0x494
   1ea70:	mov	r4, #9
   1ea74:	b	1ea88 <__assert_fail@plt+0xcd14>
   1ea78:	sub	r4, r4, #1
   1ea7c:	smull	r1, r2, r6, r3
   1ea80:	asr	r3, r3, #31
   1ea84:	rsb	r3, r3, r2, asr #2
   1ea88:	cmp	r4, r5
   1ea8c:	bgt	1ea78 <__assert_fail@plt+0xcd04>
   1ea90:	cmp	r4, #1
   1ea94:	ble	1eab0 <__assert_fail@plt+0xcd3c>
   1ea98:	smull	r2, r1, r6, r3
   1ea9c:	asr	r2, r3, #31
   1eaa0:	rsb	r2, r2, r1, asr #2
   1eaa4:	add	r2, r2, r2, lsl #2
   1eaa8:	cmp	r3, r2, lsl #1
   1eaac:	beq	1ea78 <__assert_fail@plt+0xcd04>
   1eab0:	cmp	r4, #0
   1eab4:	ble	1eae8 <__assert_fail@plt+0xcd74>
   1eab8:	add	r1, sp, #72	; 0x48
   1eabc:	add	r0, r1, r4
   1eac0:	smull	r2, ip, r6, r3
   1eac4:	asr	r2, r3, #31
   1eac8:	rsb	r2, r2, ip, asr #2
   1eacc:	add	ip, r2, r2, lsl #2
   1ead0:	sub	r3, r3, ip, lsl #1
   1ead4:	add	r3, r3, #48	; 0x30
   1ead8:	strb	r3, [r0, #-1]!
   1eadc:	mov	r3, r2
   1eae0:	cmp	r0, r1
   1eae4:	bne	1eac0 <__assert_fail@plt+0xcd4c>
   1eae8:	ldr	r2, [sp, #28]
   1eaec:	mov	r3, r2
   1eaf0:	cmp	r2, #0
   1eaf4:	moveq	r3, #48	; 0x30
   1eaf8:	str	r3, [sp, #28]
   1eafc:	mov	r8, r4
   1eb00:	cmp	r4, #0
   1eb04:	movcs	r9, r4
   1eb08:	movcc	r9, #0
   1eb0c:	ldr	r3, [sp, #32]
   1eb10:	sub	r3, r3, fp
   1eb14:	cmp	r9, r3
   1eb18:	bcs	1ebb0 <__assert_fail@plt+0xce3c>
   1eb1c:	cmp	sl, #0
   1eb20:	beq	1eb44 <__assert_fail@plt+0xcdd0>
   1eb24:	ldr	r3, [sp, #40]	; 0x28
   1eb28:	cmp	r3, #0
   1eb2c:	beq	1ebc0 <__assert_fail@plt+0xce4c>
   1eb30:	mov	r2, r4
   1eb34:	add	r1, sp, #72	; 0x48
   1eb38:	mov	r0, sl
   1eb3c:	bl	1dcbc <__assert_fail@plt+0xbf48>
   1eb40:	add	sl, sl, r8
   1eb44:	add	fp, r9, fp
   1eb48:	ldr	r3, [sp, #28]
   1eb4c:	cmp	r3, #45	; 0x2d
   1eb50:	beq	1f624 <__assert_fail@plt+0xd8b0>
   1eb54:	subs	r4, r5, r4
   1eb58:	bmi	1f624 <__assert_fail@plt+0xd8b0>
   1eb5c:	cmp	r4, #0
   1eb60:	movcs	r5, r4
   1eb64:	movcc	r5, #0
   1eb68:	ldr	r3, [sp, #32]
   1eb6c:	sub	r3, r3, fp
   1eb70:	cmp	r5, r3
   1eb74:	bcs	1ebd4 <__assert_fail@plt+0xce60>
   1eb78:	cmp	r4, #0
   1eb7c:	cmpne	sl, #0
   1eb80:	beq	1eba8 <__assert_fail@plt+0xce34>
   1eb84:	ldr	r3, [sp, #28]
   1eb88:	cmp	r3, #43	; 0x2b
   1eb8c:	cmpne	r3, #48	; 0x30
   1eb90:	mov	r2, r4
   1eb94:	moveq	r1, #48	; 0x30
   1eb98:	movne	r1, #32
   1eb9c:	mov	r0, sl
   1eba0:	bl	11be8 <memset@plt>
   1eba4:	add	sl, sl, r4
   1eba8:	add	fp, fp, r5
   1ebac:	b	1dddc <__assert_fail@plt+0xc068>
   1ebb0:	mov	r3, #34	; 0x22
   1ebb4:	ldr	r2, [sp, #44]	; 0x2c
   1ebb8:	str	r3, [r2]
   1ebbc:	b	1de24 <__assert_fail@plt+0xc0b0>
   1ebc0:	mov	r2, r4
   1ebc4:	add	r1, sp, #72	; 0x48
   1ebc8:	mov	r0, sl
   1ebcc:	bl	11930 <memcpy@plt>
   1ebd0:	b	1eb40 <__assert_fail@plt+0xcdcc>
   1ebd4:	mov	r3, #34	; 0x22
   1ebd8:	ldr	r2, [sp, #44]	; 0x2c
   1ebdc:	str	r3, [r2]
   1ebe0:	b	1de24 <__assert_fail@plt+0xc0b0>
   1ebe4:	ldr	r2, [sp, #28]
   1ebe8:	mvn	r3, r5
   1ebec:	lsr	r3, r3, #31
   1ebf0:	cmp	r2, #45	; 0x2d
   1ebf4:	moveq	r3, #0
   1ebf8:	cmp	r3, #0
   1ebfc:	moveq	r5, #0
   1ec00:	mov	r4, r5
   1ec04:	cmp	r5, #1
   1ec08:	movcc	r5, #1
   1ec0c:	ldr	r3, [sp, #32]
   1ec10:	sub	r3, r3, fp
   1ec14:	cmp	r5, r3
   1ec18:	bcs	1ec64 <__assert_fail@plt+0xcef0>
   1ec1c:	cmp	sl, #0
   1ec20:	beq	1ec5c <__assert_fail@plt+0xcee8>
   1ec24:	cmp	r4, #1
   1ec28:	bls	1ec54 <__assert_fail@plt+0xcee0>
   1ec2c:	sub	r4, r4, #1
   1ec30:	ldr	r3, [sp, #28]
   1ec34:	cmp	r3, #43	; 0x2b
   1ec38:	cmpne	r3, #48	; 0x30
   1ec3c:	mov	r2, r4
   1ec40:	moveq	r1, #48	; 0x30
   1ec44:	movne	r1, #32
   1ec48:	mov	r0, sl
   1ec4c:	bl	11be8 <memset@plt>
   1ec50:	add	sl, sl, r4
   1ec54:	mov	r3, #10
   1ec58:	strb	r3, [sl], #1
   1ec5c:	add	fp, fp, r5
   1ec60:	b	1dddc <__assert_fail@plt+0xc068>
   1ec64:	mov	r3, #34	; 0x22
   1ec68:	ldr	r2, [sp, #44]	; 0x2c
   1ec6c:	str	r3, [r2]
   1ec70:	b	1de24 <__assert_fail@plt+0xc0b0>
   1ec74:	mov	r3, #1
   1ec78:	cmp	r8, #0
   1ec7c:	moveq	r8, r3
   1ec80:	moveq	r4, #112	; 0x70
   1ec84:	movne	r4, #112	; 0x70
   1ec88:	movne	r3, #0
   1ec8c:	strne	r3, [sp, #40]	; 0x28
   1ec90:	b	1e5d0 <__assert_fail@plt+0xc85c>
   1ec94:	mov	r3, #0
   1ec98:	b	1ec78 <__assert_fail@plt+0xcf04>
   1ec9c:	ldr	r3, [sp, #36]	; 0x24
   1eca0:	ldr	r3, [r3, #16]
   1eca4:	cmp	r2, #79	; 0x4f
   1eca8:	bne	1ecc8 <__assert_fail@plt+0xcf54>
   1ecac:	mov	r3, #32
   1ecb0:	strb	r3, [sp, #72]	; 0x48
   1ecb4:	mov	r3, #37	; 0x25
   1ecb8:	strb	r3, [sp, #73]	; 0x49
   1ecbc:	mov	r4, #113	; 0x71
   1ecc0:	mov	r8, #0
   1ecc4:	b	1e5f0 <__assert_fail@plt+0xc87c>
   1ecc8:	add	r2, r3, r3, lsl #2
   1eccc:	add	r3, r3, r2, lsl #1
   1ecd0:	asr	r3, r3, #5
   1ecd4:	add	r3, r3, #1
   1ecd8:	mov	r0, #0
   1ecdc:	mov	r9, r0
   1ece0:	str	r0, [sp, #52]	; 0x34
   1ece4:	mov	r8, #1
   1ece8:	b	1e828 <__assert_fail@plt+0xcab4>
   1ecec:	cmp	r2, #69	; 0x45
   1ecf0:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1ecf4:	ldr	r3, [sp, #36]	; 0x24
   1ecf8:	ldr	r3, [r3]
   1ecfc:	mov	r8, #2
   1ed00:	b	1e7f0 <__assert_fail@plt+0xca7c>
   1ed04:	andeq	r8, r2, ip, ror #1
   1ed08:	strbtvs	r6, [r6], -r7, ror #12
   1ed0c:	stcleq	12, cr12, [ip], {204}	; 0xcc
   1ed10:	andeq	r8, r2, ip, ror r1
   1ed14:	andeq	r8, r2, r8, ror #2
   1ed18:	andeq	r8, r2, r0, ror r1
   1ed1c:	andeq	r0, r0, fp, ror #14
   1ed20:	andeq	r8, r2, r8, lsl #3
   1ed24:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1ed28:	andeq	r2, r0, pc, lsl #14
   1ed2c:	subls	r2, r9, #-1828716544	; 0x93000000
   1ed30:			; <UNDEFINED> instruction: 0xfffff894
   1ed34:	mvnpl	r8, pc, lsl r5
   1ed38:			; <UNDEFINED> instruction: 0x91a2b3c5
   1ed3c:	stmhi	r8, {r0, r3, r7, fp, pc}
   1ed40:	andeq	r2, r0, r0, lsl r7
   1ed44:	add	ip, sp, #88	; 0x58
   1ed48:	ldr	lr, [sp, #36]	; 0x24
   1ed4c:	ldm	lr!, {r0, r1, r2, r3}
   1ed50:	stmia	ip!, {r0, r1, r2, r3}
   1ed54:	ldm	lr!, {r0, r1, r2, r3}
   1ed58:	stmia	ip!, {r0, r1, r2, r3}
   1ed5c:	ldm	lr, {r0, r1, r2}
   1ed60:	stm	ip, {r0, r1, r2}
   1ed64:	mvn	r3, #0
   1ed68:	str	r3, [sp, #116]	; 0x74
   1ed6c:	add	r1, sp, #88	; 0x58
   1ed70:	ldr	r0, [sp, #1168]	; 0x490
   1ed74:	bl	21c04 <_obstack_memory_used@@Base+0x2230>
   1ed78:	ldr	r3, [sp, #116]	; 0x74
   1ed7c:	cmp	r3, #0
   1ed80:	blt	1ede0 <__assert_fail@plt+0xd06c>
   1ed84:	lsr	r3, r0, #31
   1ed88:	str	r3, [sp, #52]	; 0x34
   1ed8c:	add	r2, sp, #85	; 0x55
   1ed90:	mov	r1, r0
   1ed94:	smull	r3, ip, r6, r1
   1ed98:	asr	r3, r1, #31
   1ed9c:	rsb	r3, r3, ip, asr #2
   1eda0:	mov	ip, r3
   1eda4:	add	r3, r3, r3, lsl #2
   1eda8:	sub	r3, r1, r3, lsl #1
   1edac:	mov	r1, ip
   1edb0:	mov	r4, r2
   1edb4:	cmp	r0, #0
   1edb8:	rsblt	r3, r3, #48	; 0x30
   1edbc:	addge	r3, r3, #48	; 0x30
   1edc0:	uxtb	r3, r3
   1edc4:	strb	r3, [r2]
   1edc8:	sub	r2, r2, #1
   1edcc:	cmp	ip, #0
   1edd0:	bne	1ed94 <__assert_fail@plt+0xd020>
   1edd4:	mov	r9, #0
   1edd8:	mov	r8, #1
   1eddc:	b	1e888 <__assert_fail@plt+0xcb14>
   1ede0:	mov	r3, #75	; 0x4b
   1ede4:	ldr	r2, [sp, #44]	; 0x2c
   1ede8:	str	r3, [r2]
   1edec:	b	1de24 <__assert_fail@plt+0xc0b0>
   1edf0:	cmp	r2, #79	; 0x4f
   1edf4:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1edf8:	mov	r4, #88	; 0x58
   1edfc:	mov	r8, #0
   1ee00:	b	1e5d0 <__assert_fail@plt+0xc85c>
   1ee04:	ldr	r3, [sp, #28]
   1ee08:	subs	r3, r3, #45	; 0x2d
   1ee0c:	movne	r3, #1
   1ee10:	cmp	r5, #0
   1ee14:	movlt	r3, #0
   1ee18:	cmp	r3, #0
   1ee1c:	moveq	r5, #0
   1ee20:	mov	r4, r5
   1ee24:	cmp	r5, #1
   1ee28:	movcc	r5, #1
   1ee2c:	ldr	r3, [sp, #32]
   1ee30:	sub	r3, r3, fp
   1ee34:	cmp	r5, r3
   1ee38:	bcs	1ee84 <__assert_fail@plt+0xd110>
   1ee3c:	cmp	sl, #0
   1ee40:	beq	1ee7c <__assert_fail@plt+0xd108>
   1ee44:	cmp	r4, #1
   1ee48:	bls	1ee74 <__assert_fail@plt+0xd100>
   1ee4c:	sub	r4, r4, #1
   1ee50:	ldr	r3, [sp, #28]
   1ee54:	cmp	r3, #43	; 0x2b
   1ee58:	cmpne	r3, #48	; 0x30
   1ee5c:	mov	r2, r4
   1ee60:	moveq	r1, #48	; 0x30
   1ee64:	movne	r1, #32
   1ee68:	mov	r0, sl
   1ee6c:	bl	11be8 <memset@plt>
   1ee70:	add	sl, sl, r4
   1ee74:	mov	r3, #9
   1ee78:	strb	r3, [sl], #1
   1ee7c:	add	fp, fp, r5
   1ee80:	b	1dddc <__assert_fail@plt+0xc068>
   1ee84:	mov	r3, #34	; 0x22
   1ee88:	ldr	r2, [sp, #44]	; 0x2c
   1ee8c:	str	r3, [r2]
   1ee90:	b	1de24 <__assert_fail@plt+0xc0b0>
   1ee94:	ldr	r3, [sp, #36]	; 0x24
   1ee98:	ldr	r3, [r3, #24]
   1ee9c:	add	r3, r3, #6
   1eea0:	ldr	r1, [pc, #-380]	; 1ed2c <__assert_fail@plt+0xcfb8>
   1eea4:	smull	r0, r1, r1, r3
   1eea8:	add	r0, r1, r3
   1eeac:	asr	r1, r3, #31
   1eeb0:	rsb	r1, r1, r0, asr #2
   1eeb4:	rsb	r1, r1, r1, lsl #3
   1eeb8:	sub	r3, r3, r1
   1eebc:	add	r3, r3, #1
   1eec0:	mov	r8, #1
   1eec4:	b	1e7f0 <__assert_fail@plt+0xca7c>
   1eec8:	cmp	r2, #69	; 0x45
   1eecc:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1eed0:	ldr	r1, [sp, #36]	; 0x24
   1eed4:	ldr	r3, [r1, #28]
   1eed8:	ldr	r1, [r1, #24]
   1eedc:	sub	r3, r3, r1
   1eee0:	add	r3, r3, #7
   1eee4:	ldr	r1, [pc, #-448]	; 1ed2c <__assert_fail@plt+0xcfb8>
   1eee8:	smull	r0, r1, r1, r3
   1eeec:	add	r1, r1, r3
   1eef0:	asr	r3, r3, #31
   1eef4:	rsb	r3, r3, r1, asr #2
   1eef8:	mov	r8, #2
   1eefc:	b	1e7f0 <__assert_fail@plt+0xca7c>
   1ef00:	cmp	r2, #69	; 0x45
   1ef04:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1ef08:	ldr	r0, [sp, #36]	; 0x24
   1ef0c:	mov	r3, r0
   1ef10:	ldr	r8, [r0, #20]
   1ef14:	cmp	r8, #0
   1ef18:	movlt	r3, #300	; 0x12c
   1ef1c:	mvnge	r3, #99	; 0x63
   1ef20:	add	r3, r3, r8
   1ef24:	ldr	lr, [r0, #28]
   1ef28:	ldr	r0, [r0, #24]
   1ef2c:	str	r0, [sp, #52]	; 0x34
   1ef30:	sub	r0, lr, r0
   1ef34:	add	r0, r0, #380	; 0x17c
   1ef38:	add	r0, r0, #2
   1ef3c:	ldr	ip, [pc, #-536]	; 1ed2c <__assert_fail@plt+0xcfb8>
   1ef40:	smull	r9, ip, ip, r0
   1ef44:	add	r9, ip, r0
   1ef48:	asr	ip, r0, #31
   1ef4c:	rsb	ip, ip, r9, asr #2
   1ef50:	rsb	ip, ip, ip, lsl #3
   1ef54:	sub	ip, r0, ip
   1ef58:	sub	r9, lr, ip
   1ef5c:	adds	r9, r9, #3
   1ef60:	bmi	1f084 <__assert_fail@plt+0xd310>
   1ef64:	tst	r3, #3
   1ef68:	movne	r0, #0
   1ef6c:	bne	1efb8 <__assert_fail@plt+0xd244>
   1ef70:	ldr	r0, [pc, #-580]	; 1ed34 <__assert_fail@plt+0xcfc0>
   1ef74:	smull	ip, r0, r0, r3
   1ef78:	asr	ip, r3, #31
   1ef7c:	rsb	r0, ip, r0, asr #5
   1ef80:	mov	ip, #100	; 0x64
   1ef84:	mul	r0, ip, r0
   1ef88:	cmp	r3, r0
   1ef8c:	movne	r0, #1
   1ef90:	bne	1efb8 <__assert_fail@plt+0xd244>
   1ef94:	ldr	r0, [pc, #-616]	; 1ed34 <__assert_fail@plt+0xcfc0>
   1ef98:	smull	ip, r0, r0, r3
   1ef9c:	asr	ip, r3, #31
   1efa0:	rsb	ip, ip, r0, asr #7
   1efa4:	mov	r0, #400	; 0x190
   1efa8:	mul	r0, r0, ip
   1efac:	cmp	r3, r0
   1efb0:	movne	r0, #0
   1efb4:	moveq	r0, #1
   1efb8:	add	r3, r0, #364	; 0x16c
   1efbc:	add	r3, r3, #1
   1efc0:	sub	r3, lr, r3
   1efc4:	ldr	r0, [sp, #52]	; 0x34
   1efc8:	sub	r0, r3, r0
   1efcc:	add	r0, r0, #380	; 0x17c
   1efd0:	add	r0, r0, #2
   1efd4:	ldr	ip, [pc, #-688]	; 1ed2c <__assert_fail@plt+0xcfb8>
   1efd8:	smull	ip, lr, ip, r0
   1efdc:	add	lr, lr, r0
   1efe0:	asr	ip, r0, #31
   1efe4:	rsb	ip, ip, lr, asr #2
   1efe8:	rsb	ip, ip, ip, lsl #3
   1efec:	sub	ip, r0, ip
   1eff0:	sub	r3, r3, ip
   1eff4:	add	r3, r3, #3
   1eff8:	cmp	r3, #0
   1effc:	movge	r9, r3
   1f000:	mvn	lr, r3
   1f004:	lsr	lr, lr, #31
   1f008:	cmp	r1, #71	; 0x47
   1f00c:	beq	1f124 <__assert_fail@plt+0xd3b0>
   1f010:	cmp	r1, #103	; 0x67
   1f014:	bne	1f150 <__assert_fail@plt+0xd3dc>
   1f018:	ldr	r3, [pc, #-748]	; 1ed34 <__assert_fail@plt+0xcfc0>
   1f01c:	smull	r1, r3, r3, r8
   1f020:	asr	r1, r8, #31
   1f024:	rsb	r1, r1, r3, asr #5
   1f028:	mov	r0, #100	; 0x64
   1f02c:	mul	r1, r0, r1
   1f030:	sub	r1, r8, r1
   1f034:	add	r1, r1, lr
   1f038:	ldr	r3, [pc, #-780]	; 1ed34 <__assert_fail@plt+0xcfc0>
   1f03c:	smull	r3, ip, r3, r1
   1f040:	asr	r3, r1, #31
   1f044:	rsb	r3, r3, ip, asr #5
   1f048:	mul	r3, r0, r3
   1f04c:	subs	r3, r1, r3
   1f050:	movpl	r1, #0
   1f054:	strpl	r1, [sp, #52]	; 0x34
   1f058:	movpl	r8, #2
   1f05c:	bpl	1e758 <__assert_fail@plt+0xc9e4>
   1f060:	ldr	r1, [pc, #-824]	; 1ed30 <__assert_fail@plt+0xcfbc>
   1f064:	sub	r1, r1, lr
   1f068:	cmp	r8, r1
   1f06c:	rsblt	r3, r3, #0
   1f070:	addge	r3, r3, #100	; 0x64
   1f074:	mov	r1, #0
   1f078:	str	r1, [sp, #52]	; 0x34
   1f07c:	mov	r8, #2
   1f080:	b	1e758 <__assert_fail@plt+0xc9e4>
   1f084:	sub	r3, r3, #1
   1f088:	tst	r3, #3
   1f08c:	movne	r3, #0
   1f090:	bne	1f0dc <__assert_fail@plt+0xd368>
   1f094:	ldr	r0, [pc, #-872]	; 1ed34 <__assert_fail@plt+0xcfc0>
   1f098:	smull	ip, r0, r0, r3
   1f09c:	asr	ip, r3, #31
   1f0a0:	rsb	r0, ip, r0, asr #5
   1f0a4:	mov	ip, #100	; 0x64
   1f0a8:	mul	r0, ip, r0
   1f0ac:	cmp	r3, r0
   1f0b0:	movne	r3, #1
   1f0b4:	bne	1f0dc <__assert_fail@plt+0xd368>
   1f0b8:	ldr	r0, [pc, #-908]	; 1ed34 <__assert_fail@plt+0xcfc0>
   1f0bc:	smull	ip, r0, r0, r3
   1f0c0:	asr	ip, r3, #31
   1f0c4:	rsb	ip, ip, r0, asr #7
   1f0c8:	mov	r0, #400	; 0x190
   1f0cc:	mul	r0, r0, ip
   1f0d0:	cmp	r3, r0
   1f0d4:	movne	r3, #0
   1f0d8:	moveq	r3, #1
   1f0dc:	add	r3, r3, #364	; 0x16c
   1f0e0:	add	r3, r3, #1
   1f0e4:	add	r3, r3, lr
   1f0e8:	ldr	r0, [sp, #52]	; 0x34
   1f0ec:	sub	r0, r3, r0
   1f0f0:	add	r0, r0, #380	; 0x17c
   1f0f4:	add	r0, r0, #2
   1f0f8:	ldr	ip, [pc, #-980]	; 1ed2c <__assert_fail@plt+0xcfb8>
   1f0fc:	smull	ip, lr, ip, r0
   1f100:	add	lr, lr, r0
   1f104:	asr	ip, r0, #31
   1f108:	rsb	ip, ip, lr, asr #2
   1f10c:	rsb	ip, ip, ip, lsl #3
   1f110:	sub	ip, r0, ip
   1f114:	sub	ip, r3, ip
   1f118:	add	r9, ip, #3
   1f11c:	mvn	lr, #0
   1f120:	b	1f008 <__assert_fail@plt+0xd294>
   1f124:	ldr	r3, [pc, #-1020]	; 1ed30 <__assert_fail@plt+0xcfbc>
   1f128:	sub	r3, r3, lr
   1f12c:	cmp	r8, r3
   1f130:	movge	r3, #0
   1f134:	movlt	r3, #1
   1f138:	str	r3, [sp, #52]	; 0x34
   1f13c:	add	r3, r8, #1888	; 0x760
   1f140:	add	r3, r3, #12
   1f144:	add	r3, r3, lr
   1f148:	mov	r8, #4
   1f14c:	b	1e758 <__assert_fail@plt+0xc9e4>
   1f150:	ldr	r3, [pc, #-1068]	; 1ed2c <__assert_fail@plt+0xcfb8>
   1f154:	smull	r1, r3, r3, r9
   1f158:	add	r1, r3, r9
   1f15c:	asr	r3, r9, #31
   1f160:	rsb	r3, r3, r1, asr #2
   1f164:	add	r3, r3, #1
   1f168:	mov	r8, #2
   1f16c:	b	1e7f0 <__assert_fail@plt+0xca7c>
   1f170:	cmp	r2, #69	; 0x45
   1f174:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1f178:	ldr	ip, [sp, #36]	; 0x24
   1f17c:	ldr	r3, [ip, #24]
   1f180:	add	r3, r3, #6
   1f184:	ldr	r1, [pc, #-1120]	; 1ed2c <__assert_fail@plt+0xcfb8>
   1f188:	smull	r0, r1, r1, r3
   1f18c:	add	r0, r1, r3
   1f190:	asr	r1, r3, #31
   1f194:	rsb	r1, r1, r0, asr #2
   1f198:	rsb	r1, r1, r1, lsl #3
   1f19c:	sub	r1, r3, r1
   1f1a0:	ldr	r3, [ip, #28]
   1f1a4:	sub	r3, r3, r1
   1f1a8:	add	r3, r3, #7
   1f1ac:	ldr	r1, [pc, #-1160]	; 1ed2c <__assert_fail@plt+0xcfb8>
   1f1b0:	smull	r0, r1, r1, r3
   1f1b4:	add	r1, r1, r3
   1f1b8:	asr	r3, r3, #31
   1f1bc:	rsb	r3, r3, r1, asr #2
   1f1c0:	mov	r8, #2
   1f1c4:	b	1e7f0 <__assert_fail@plt+0xca7c>
   1f1c8:	cmp	r2, #69	; 0x45
   1f1cc:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1f1d0:	ldr	r3, [sp, #36]	; 0x24
   1f1d4:	ldr	r3, [r3, #24]
   1f1d8:	mov	r8, #1
   1f1dc:	b	1e7f0 <__assert_fail@plt+0xca7c>
   1f1e0:	cmp	r2, #69	; 0x45
   1f1e4:	beq	1f50c <__assert_fail@plt+0xd798>
   1f1e8:	cmp	r2, #79	; 0x4f
   1f1ec:	beq	1e3b4 <__assert_fail@plt+0xc640>
   1f1f0:	ldr	r3, [sp, #36]	; 0x24
   1f1f4:	ldr	r3, [r3, #20]
   1f1f8:	ldr	r1, [pc, #-1232]	; 1ed30 <__assert_fail@plt+0xcfbc>
   1f1fc:	cmp	r3, r1
   1f200:	movge	r1, #0
   1f204:	movlt	r1, #1
   1f208:	str	r1, [sp, #52]	; 0x34
   1f20c:	add	r3, r3, #1888	; 0x760
   1f210:	add	r3, r3, #12
   1f214:	mov	r8, #4
   1f218:	b	1e758 <__assert_fail@plt+0xc9e4>
   1f21c:	cmp	r2, #69	; 0x45
   1f220:	beq	1f514 <__assert_fail@plt+0xd7a0>
   1f224:	ldr	r3, [sp, #36]	; 0x24
   1f228:	ldr	r1, [r3, #20]
   1f22c:	ldr	r3, [pc, #-1280]	; 1ed34 <__assert_fail@plt+0xcfc0>
   1f230:	smull	r3, r0, r3, r1
   1f234:	asr	r3, r1, #31
   1f238:	rsb	r3, r3, r0, asr #5
   1f23c:	mov	r0, #100	; 0x64
   1f240:	mul	r3, r0, r3
   1f244:	subs	r3, r1, r3
   1f248:	bmi	1f25c <__assert_fail@plt+0xd4e8>
   1f24c:	mov	r1, #0
   1f250:	str	r1, [sp, #52]	; 0x34
   1f254:	mov	r8, #2
   1f258:	b	1e758 <__assert_fail@plt+0xc9e4>
   1f25c:	sub	r0, r0, #2000	; 0x7d0
   1f260:	cmp	r1, r0
   1f264:	rsblt	r3, r3, #0
   1f268:	addge	r3, r3, #100	; 0x64
   1f26c:	b	1f24c <__assert_fail@plt+0xd4d8>
   1f270:	ldr	r3, [sp, #40]	; 0x28
   1f274:	cmp	r8, #0
   1f278:	movne	r3, #0
   1f27c:	str	r3, [sp, #40]	; 0x28
   1f280:	ldr	r0, [sp, #60]	; 0x3c
   1f284:	bl	11b94 <strlen@plt>
   1f288:	mov	r9, r0
   1f28c:	ldr	r3, [sp, #28]
   1f290:	subs	r3, r3, #45	; 0x2d
   1f294:	movne	r3, #1
   1f298:	cmp	r5, #0
   1f29c:	movlt	r3, #0
   1f2a0:	cmp	r3, #0
   1f2a4:	moveq	r5, #0
   1f2a8:	mov	r4, r5
   1f2ac:	cmp	r5, r0
   1f2b0:	movcc	r5, r0
   1f2b4:	ldr	r3, [sp, #32]
   1f2b8:	sub	r3, r3, fp
   1f2bc:	cmp	r5, r3
   1f2c0:	bcs	1f324 <__assert_fail@plt+0xd5b0>
   1f2c4:	cmp	sl, #0
   1f2c8:	beq	1f348 <__assert_fail@plt+0xd5d4>
   1f2cc:	cmp	r4, r0
   1f2d0:	bls	1f2fc <__assert_fail@plt+0xd588>
   1f2d4:	sub	r4, r4, r0
   1f2d8:	ldr	r3, [sp, #28]
   1f2dc:	cmp	r3, #43	; 0x2b
   1f2e0:	cmpne	r3, #48	; 0x30
   1f2e4:	mov	r2, r4
   1f2e8:	moveq	r1, #48	; 0x30
   1f2ec:	movne	r1, #32
   1f2f0:	mov	r0, sl
   1f2f4:	bl	11be8 <memset@plt>
   1f2f8:	add	sl, sl, r4
   1f2fc:	cmp	r8, #0
   1f300:	bne	1f334 <__assert_fail@plt+0xd5c0>
   1f304:	ldr	r3, [sp, #40]	; 0x28
   1f308:	cmp	r3, #0
   1f30c:	beq	1f350 <__assert_fail@plt+0xd5dc>
   1f310:	mov	r2, r9
   1f314:	ldr	r1, [sp, #60]	; 0x3c
   1f318:	mov	r0, sl
   1f31c:	bl	1dcbc <__assert_fail@plt+0xbf48>
   1f320:	b	1f344 <__assert_fail@plt+0xd5d0>
   1f324:	mov	r3, #34	; 0x22
   1f328:	ldr	r2, [sp, #44]	; 0x2c
   1f32c:	str	r3, [r2]
   1f330:	b	1de24 <__assert_fail@plt+0xc0b0>
   1f334:	mov	r2, r9
   1f338:	ldr	r1, [sp, #60]	; 0x3c
   1f33c:	mov	r0, sl
   1f340:	bl	1dc78 <__assert_fail@plt+0xbf04>
   1f344:	add	sl, sl, r9
   1f348:	add	fp, fp, r5
   1f34c:	b	1dddc <__assert_fail@plt+0xc068>
   1f350:	mov	r2, r9
   1f354:	ldr	r1, [sp, #60]	; 0x3c
   1f358:	mov	r0, sl
   1f35c:	bl	11930 <memcpy@plt>
   1f360:	b	1f344 <__assert_fail@plt+0xd5d0>
   1f364:	add	r1, r7, #2
   1f368:	mov	lr, #1
   1f36c:	add	lr, lr, #1
   1f370:	mov	r0, r1
   1f374:	ldrb	r3, [r1], #1
   1f378:	cmp	r3, #58	; 0x3a
   1f37c:	bne	1e394 <__assert_fail@plt+0xc620>
   1f380:	b	1f36c <__assert_fail@plt+0xd5f8>
   1f384:	mov	lr, #0
   1f388:	ldr	r1, [sp, #36]	; 0x24
   1f38c:	ldr	r3, [r1, #32]
   1f390:	cmp	r3, #0
   1f394:	blt	1dddc <__assert_fail@plt+0xc068>
   1f398:	mov	r3, r1
   1f39c:	ldr	r1, [r1, #36]	; 0x24
   1f3a0:	cmp	r1, #0
   1f3a4:	movlt	r3, #1
   1f3a8:	blt	1f3c8 <__assert_fail@plt+0xd654>
   1f3ac:	movne	r3, #0
   1f3b0:	bne	1f3c8 <__assert_fail@plt+0xd654>
   1f3b4:	ldr	r3, [sp, #60]	; 0x3c
   1f3b8:	ldrb	r3, [r3]
   1f3bc:	cmp	r3, #45	; 0x2d
   1f3c0:	movne	r3, #0
   1f3c4:	moveq	r3, #1
   1f3c8:	str	r3, [sp, #52]	; 0x34
   1f3cc:	ldr	r3, [pc, #-1692]	; 1ed38 <__assert_fail@plt+0xcfc4>
   1f3d0:	smull	r0, r3, r3, r1
   1f3d4:	add	r3, r3, r1
   1f3d8:	asr	r0, r1, #31
   1f3dc:	rsb	r8, r0, r3, asr #11
   1f3e0:	ldr	r3, [pc, #-1708]	; 1ed3c <__assert_fail@plt+0xcfc8>
   1f3e4:	smull	ip, r3, r3, r1
   1f3e8:	add	r3, r3, r1
   1f3ec:	rsb	r3, r0, r3, asr #5
   1f3f0:	ldr	r0, [pc, #-1724]	; 1ed3c <__assert_fail@plt+0xcfc8>
   1f3f4:	smull	ip, r0, r0, r3
   1f3f8:	add	r0, r0, r3
   1f3fc:	asr	ip, r3, #31
   1f400:	rsb	r0, ip, r0, asr #5
   1f404:	rsb	r0, r0, r0, lsl #4
   1f408:	sub	r0, r3, r0, lsl #2
   1f40c:	rsb	r3, r3, r3, lsl #4
   1f410:	sub	r3, r1, r3, lsl #2
   1f414:	cmp	lr, #3
   1f418:	ldrls	pc, [pc, lr, lsl #2]
   1f41c:	b	1e3b4 <__assert_fail@plt+0xc640>
   1f420:	andeq	pc, r1, r0, lsr r4	; <UNPREDICTABLE>
   1f424:	andeq	pc, r1, r8, asr #8
   1f428:	andeq	pc, r1, r0, ror #8
   1f42c:	andeq	pc, r1, r4, lsl #9
   1f430:	mov	r3, #100	; 0x64
   1f434:	mla	r3, r3, r8, r0
   1f438:	mov	r0, #0
   1f43c:	mov	r9, #1
   1f440:	mov	r8, #5
   1f444:	b	1e800 <__assert_fail@plt+0xca8c>
   1f448:	mov	r3, #100	; 0x64
   1f44c:	mla	r3, r3, r8, r0
   1f450:	mov	r0, #4
   1f454:	mov	r9, #1
   1f458:	mov	r8, #6
   1f45c:	b	1e800 <__assert_fail@plt+0xca8c>
   1f460:	mov	r1, #100	; 0x64
   1f464:	mul	r0, r1, r0
   1f468:	ldr	r1, [pc, #-1840]	; 1ed40 <__assert_fail@plt+0xcfcc>
   1f46c:	mla	r0, r1, r8, r0
   1f470:	add	r3, r0, r3
   1f474:	mov	r0, #20
   1f478:	mov	r9, #1
   1f47c:	mov	r8, #9
   1f480:	b	1e800 <__assert_fail@plt+0xca8c>
   1f484:	cmp	r3, #0
   1f488:	bne	1f460 <__assert_fail@plt+0xd6ec>
   1f48c:	cmp	r0, #0
   1f490:	bne	1f448 <__assert_fail@plt+0xd6d4>
   1f494:	mov	r3, r8
   1f498:	mov	r9, #1
   1f49c:	mov	r8, #3
   1f4a0:	b	1e800 <__assert_fail@plt+0xca8c>
   1f4a4:	mov	r3, #34	; 0x22
   1f4a8:	ldr	r2, [sp, #44]	; 0x2c
   1f4ac:	str	r3, [r2]
   1f4b0:	b	1de24 <__assert_fail@plt+0xc0b0>
   1f4b4:	mov	r2, r8
   1f4b8:	mov	r1, r9
   1f4bc:	mov	r0, sl
   1f4c0:	bl	11930 <memcpy@plt>
   1f4c4:	b	1e448 <__assert_fail@plt+0xc6d4>
   1f4c8:	mov	fp, #0
   1f4cc:	ldr	r3, [sp, #32]
   1f4d0:	cmp	sl, #0
   1f4d4:	cmpne	r3, #0
   1f4d8:	movne	r3, #0
   1f4dc:	strbne	r3, [sl]
   1f4e0:	ldr	r3, [sp, #44]	; 0x2c
   1f4e4:	ldr	r2, [sp, #64]	; 0x40
   1f4e8:	str	r2, [r3]
   1f4ec:	b	1de28 <__assert_fail@plt+0xc0b4>
   1f4f0:	mov	r4, #67	; 0x43
   1f4f4:	mov	r3, #32
   1f4f8:	strb	r3, [sp, #72]	; 0x48
   1f4fc:	mov	r3, #37	; 0x25
   1f500:	strb	r3, [sp, #73]	; 0x49
   1f504:	mov	r8, #0
   1f508:	b	1e5f0 <__assert_fail@plt+0xc87c>
   1f50c:	mov	r4, #89	; 0x59
   1f510:	b	1f4f4 <__assert_fail@plt+0xd780>
   1f514:	mov	r4, #121	; 0x79
   1f518:	b	1f4f4 <__assert_fail@plt+0xd780>
   1f51c:	mov	r3, #45	; 0x2d
   1f520:	str	r3, [sp, #52]	; 0x34
   1f524:	add	r8, sp, #86	; 0x56
   1f528:	sub	r3, r8, r4
   1f52c:	str	r3, [sp, #68]	; 0x44
   1f530:	sub	r8, r5, #1
   1f534:	sub	r8, r8, r3
   1f538:	ldr	r2, [sp, #28]
   1f53c:	subs	r9, r2, #45	; 0x2d
   1f540:	movne	r9, #1
   1f544:	cmp	r8, #0
   1f548:	movle	r3, #0
   1f54c:	andgt	r3, r9, #1
   1f550:	cmp	r3, #0
   1f554:	moveq	r8, #0
   1f558:	cmp	r2, #95	; 0x5f
   1f55c:	beq	1e8f8 <__assert_fail@plt+0xcb84>
   1f560:	ldr	r3, [sp, #32]
   1f564:	sub	r3, r3, fp
   1f568:	cmp	r3, #1
   1f56c:	bls	1e920 <__assert_fail@plt+0xcbac>
   1f570:	cmp	sl, #0
   1f574:	ldrbne	r3, [sp, #52]	; 0x34
   1f578:	strbne	r3, [sl], #1
   1f57c:	add	fp, fp, #1
   1f580:	sub	r5, r5, #1
   1f584:	ldr	r8, [sp, #68]	; 0x44
   1f588:	cmp	r5, #0
   1f58c:	movlt	r9, #0
   1f590:	andge	r9, r9, #1
   1f594:	cmp	r9, #0
   1f598:	moveq	r5, #0
   1f59c:	cmp	r5, r8
   1f5a0:	movcs	r9, r5
   1f5a4:	movcc	r9, r8
   1f5a8:	ldr	r2, [sp, #32]
   1f5ac:	sub	r2, r2, fp
   1f5b0:	cmp	r9, r2
   1f5b4:	bcs	1e930 <__assert_fail@plt+0xcbbc>
   1f5b8:	cmp	sl, #0
   1f5bc:	beq	1f610 <__assert_fail@plt+0xd89c>
   1f5c0:	cmp	r5, r8
   1f5c4:	bls	1f5f0 <__assert_fail@plt+0xd87c>
   1f5c8:	sub	r5, r5, r8
   1f5cc:	ldr	r3, [sp, #28]
   1f5d0:	cmp	r3, #43	; 0x2b
   1f5d4:	cmpne	r3, #48	; 0x30
   1f5d8:	mov	r2, r5
   1f5dc:	moveq	r1, #48	; 0x30
   1f5e0:	movne	r1, #32
   1f5e4:	mov	r0, sl
   1f5e8:	bl	11be8 <memset@plt>
   1f5ec:	add	sl, sl, r5
   1f5f0:	ldr	r3, [sp, #40]	; 0x28
   1f5f4:	cmp	r3, #0
   1f5f8:	beq	1e940 <__assert_fail@plt+0xcbcc>
   1f5fc:	mov	r2, r8
   1f600:	mov	r1, r4
   1f604:	mov	r0, sl
   1f608:	bl	1dcbc <__assert_fail@plt+0xbf48>
   1f60c:	add	sl, sl, r8
   1f610:	add	fp, fp, r9
   1f614:	b	1dddc <__assert_fail@plt+0xc068>
   1f618:	mov	r3, #43	; 0x2b
   1f61c:	str	r3, [sp, #52]	; 0x34
   1f620:	b	1f524 <__assert_fail@plt+0xd7b0>
   1f624:	ldr	r3, [sp, #32]
   1f628:	cmp	r3, fp
   1f62c:	beq	1ebd4 <__assert_fail@plt+0xce60>
   1f630:	mov	r5, #0
   1f634:	b	1eba8 <__assert_fail@plt+0xce34>
   1f638:	push	{r4, lr}
   1f63c:	sub	sp, sp, #32
   1f640:	mov	ip, #0
   1f644:	add	lr, sp, #32
   1f648:	strb	ip, [lr, #-1]!
   1f64c:	ldr	r4, [sp, #44]	; 0x2c
   1f650:	str	r4, [sp, #20]
   1f654:	ldr	r4, [sp, #40]	; 0x28
   1f658:	str	r4, [sp, #16]
   1f65c:	str	lr, [sp, #12]
   1f660:	mvn	lr, #0
   1f664:	str	lr, [sp, #8]
   1f668:	str	ip, [sp, #4]
   1f66c:	str	ip, [sp]
   1f670:	bl	1dd00 <__assert_fail@plt+0xbf8c>
   1f674:	add	sp, sp, #32
   1f678:	pop	{r4, pc}
   1f67c:	push	{r4, lr}
   1f680:	ldrb	r3, [r0, #40]	; 0x28
   1f684:	tst	r3, #1
   1f688:	bne	1f69c <__assert_fail@plt+0xd928>
   1f68c:	ldr	r3, [r0, #28]
   1f690:	mov	r0, r1
   1f694:	blx	r3
   1f698:	pop	{r4, pc}
   1f69c:	ldr	r3, [r0, #28]
   1f6a0:	ldr	r0, [r0, #36]	; 0x24
   1f6a4:	blx	r3
   1f6a8:	pop	{r4, pc}
   1f6ac:	push	{r4, lr}
   1f6b0:	ldrb	r3, [r0, #40]	; 0x28
   1f6b4:	tst	r3, #1
   1f6b8:	bne	1f6cc <__assert_fail@plt+0xd958>
   1f6bc:	ldr	r3, [r0, #32]
   1f6c0:	mov	r0, r1
   1f6c4:	blx	r3
   1f6c8:	pop	{r4, pc}
   1f6cc:	ldr	r3, [r0, #32]
   1f6d0:	ldr	r0, [r0, #36]	; 0x24
   1f6d4:	blx	r3
   1f6d8:	pop	{r4, pc}
   1f6dc:	push	{r4, r5, r6, lr}
   1f6e0:	mov	r4, r0
   1f6e4:	subs	r5, r2, #0
   1f6e8:	cmp	r2, #0
   1f6ec:	moveq	r5, #8
   1f6f0:	ldr	r3, [pc, #112]	; 1f768 <__assert_fail@plt+0xd9f4>
   1f6f4:	cmp	r1, #0
   1f6f8:	moveq	r1, r3
   1f6fc:	str	r1, [r0]
   1f700:	sub	r6, r5, #1
   1f704:	str	r6, [r0, #24]
   1f708:	bl	1f67c <__assert_fail@plt+0xd908>
   1f70c:	str	r0, [r4, #4]
   1f710:	cmp	r0, #0
   1f714:	beq	1f75c <__assert_fail@plt+0xd9e8>
   1f718:	add	r3, r0, #8
   1f71c:	add	r3, r3, r6
   1f720:	rsb	r5, r5, #0
   1f724:	and	r5, r5, r3
   1f728:	str	r5, [r4, #8]
   1f72c:	str	r5, [r4, #12]
   1f730:	ldr	r3, [r4]
   1f734:	add	r3, r0, r3
   1f738:	str	r3, [r0]
   1f73c:	str	r3, [r4, #16]
   1f740:	mov	r3, #0
   1f744:	str	r3, [r0, #4]
   1f748:	ldrb	r3, [r4, #40]	; 0x28
   1f74c:	and	r3, r3, #249	; 0xf9
   1f750:	strb	r3, [r4, #40]	; 0x28
   1f754:	mov	r0, #1
   1f758:	pop	{r4, r5, r6, pc}
   1f75c:	ldr	r3, [pc, #8]	; 1f76c <__assert_fail@plt+0xd9f8>
   1f760:	ldr	r3, [r3]
   1f764:	blx	r3
   1f768:	andeq	r0, r0, r8, ror #31
   1f76c:	andeq	r9, r3, r8, asr #5
   1f770:	push	{r4, lr}
   1f774:	ldr	r3, [pc, #48]	; 1f7ac <__assert_fail@plt+0xda38>
   1f778:	ldr	r4, [r3]
   1f77c:	mov	r2, #5
   1f780:	ldr	r1, [pc, #40]	; 1f7b0 <__assert_fail@plt+0xda3c>
   1f784:	mov	r0, #0
   1f788:	bl	11984 <dcgettext@plt>
   1f78c:	mov	r3, r0
   1f790:	ldr	r2, [pc, #28]	; 1f7b4 <__assert_fail@plt+0xda40>
   1f794:	mov	r1, #1
   1f798:	mov	r0, r4
   1f79c:	bl	11c18 <__fprintf_chk@plt>
   1f7a0:	ldr	r3, [pc, #16]	; 1f7b8 <__assert_fail@plt+0xda44>
   1f7a4:	ldr	r0, [r3]
   1f7a8:	bl	11b70 <exit@plt>
   1f7ac:	andeq	r9, r3, r0, lsr #6
   1f7b0:	muleq	r2, r4, r1
   1f7b4:			; <UNDEFINED> instruction: 0x000282b0
   1f7b8:	andeq	r9, r3, r4, asr #5

0001f7bc <_obstack_begin@@Base>:
   1f7bc:	push	{r4, lr}
   1f7c0:	str	r3, [r0, #28]
   1f7c4:	ldr	r3, [sp, #8]
   1f7c8:	str	r3, [r0, #32]
   1f7cc:	ldrb	r3, [r0, #40]	; 0x28
   1f7d0:	bic	r3, r3, #1
   1f7d4:	strb	r3, [r0, #40]	; 0x28
   1f7d8:	bl	1f6dc <__assert_fail@plt+0xd968>
   1f7dc:	pop	{r4, pc}

0001f7e0 <_obstack_begin_1@@Base>:
   1f7e0:	push	{r4, lr}
   1f7e4:	str	r3, [r0, #28]
   1f7e8:	ldr	r3, [sp, #8]
   1f7ec:	str	r3, [r0, #32]
   1f7f0:	ldr	r3, [sp, #12]
   1f7f4:	str	r3, [r0, #36]	; 0x24
   1f7f8:	ldrb	r3, [r0, #40]	; 0x28
   1f7fc:	orr	r3, r3, #1
   1f800:	strb	r3, [r0, #40]	; 0x28
   1f804:	bl	1f6dc <__assert_fail@plt+0xd968>
   1f808:	pop	{r4, pc}

0001f80c <_obstack_newchunk@@Base>:
   1f80c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f810:	ldr	r5, [r0, #12]
   1f814:	ldr	r3, [r0, #8]
   1f818:	sub	r7, r5, r3
   1f81c:	add	r1, r7, r1
   1f820:	ldr	r3, [r0, #24]
   1f824:	adds	r3, r1, r3
   1f828:	movcc	r2, #1
   1f82c:	movcs	r2, #0
   1f830:	cmp	r7, r1
   1f834:	movhi	r1, #0
   1f838:	andls	r1, r2, #1
   1f83c:	cmp	r1, #0
   1f840:	bne	1f850 <_obstack_newchunk@@Base+0x44>
   1f844:	ldr	r3, [pc, #204]	; 1f918 <_obstack_newchunk@@Base+0x10c>
   1f848:	ldr	r3, [r3]
   1f84c:	blx	r3
   1f850:	mov	r4, r0
   1f854:	ldr	r8, [r0, #4]
   1f858:	add	r1, r3, r7, lsr #3
   1f85c:	add	r1, r1, #100	; 0x64
   1f860:	ldr	r6, [r0]
   1f864:	cmp	r3, r6
   1f868:	movcc	r3, r6
   1f86c:	cmp	r3, r1
   1f870:	movcs	r6, r3
   1f874:	movcc	r6, r1
   1f878:	mov	r1, r6
   1f87c:	bl	1f67c <__assert_fail@plt+0xd908>
   1f880:	subs	r9, r0, #0
   1f884:	beq	1f844 <_obstack_newchunk@@Base+0x38>
   1f888:	str	r9, [r4, #4]
   1f88c:	str	r8, [r9, #4]
   1f890:	add	r1, r9, r6
   1f894:	str	r1, [r4, #16]
   1f898:	mov	r5, r9
   1f89c:	str	r1, [r5], #8
   1f8a0:	ldr	r3, [r4, #24]
   1f8a4:	add	r5, r5, r3
   1f8a8:	bic	r5, r5, r3
   1f8ac:	mov	r2, r7
   1f8b0:	ldr	r1, [r4, #8]
   1f8b4:	mov	r0, r5
   1f8b8:	bl	11930 <memcpy@plt>
   1f8bc:	ldrb	r3, [r4, #40]	; 0x28
   1f8c0:	tst	r3, #2
   1f8c4:	bne	1f8e4 <_obstack_newchunk@@Base+0xd8>
   1f8c8:	ldr	r2, [r4, #24]
   1f8cc:	add	r3, r8, #8
   1f8d0:	add	r3, r3, r2
   1f8d4:	bic	r3, r3, r2
   1f8d8:	ldr	r2, [r4, #8]
   1f8dc:	cmp	r2, r3
   1f8e0:	beq	1f900 <_obstack_newchunk@@Base+0xf4>
   1f8e4:	str	r5, [r4, #8]
   1f8e8:	add	r5, r5, r7
   1f8ec:	str	r5, [r4, #12]
   1f8f0:	ldrb	r3, [r4, #40]	; 0x28
   1f8f4:	bic	r3, r3, #2
   1f8f8:	strb	r3, [r4, #40]	; 0x28
   1f8fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f900:	ldr	r3, [r8, #4]
   1f904:	str	r3, [r9, #4]
   1f908:	mov	r1, r8
   1f90c:	mov	r0, r4
   1f910:	bl	1f6ac <__assert_fail@plt+0xd938>
   1f914:	b	1f8e4 <_obstack_newchunk@@Base+0xd8>
   1f918:	andeq	r9, r3, r8, asr #5

0001f91c <_obstack_allocated_p@@Base>:
   1f91c:	ldr	r0, [r0, #4]
   1f920:	cmp	r0, #0
   1f924:	bne	1f938 <_obstack_allocated_p@@Base+0x1c>
   1f928:	b	1f94c <_obstack_allocated_p@@Base+0x30>
   1f92c:	ldr	r0, [r0, #4]
   1f930:	cmp	r0, #0
   1f934:	beq	1f94c <_obstack_allocated_p@@Base+0x30>
   1f938:	cmp	r1, r0
   1f93c:	bls	1f92c <_obstack_allocated_p@@Base+0x10>
   1f940:	ldr	r3, [r0]
   1f944:	cmp	r1, r3
   1f948:	bhi	1f92c <_obstack_allocated_p@@Base+0x10>
   1f94c:	adds	r0, r0, #0
   1f950:	movne	r0, #1
   1f954:	bx	lr

0001f958 <_obstack_free@@Base>:
   1f958:	push	{r4, r5, r6, lr}
   1f95c:	mov	r4, r0
   1f960:	mov	r6, r1
   1f964:	ldr	r1, [r0, #4]
   1f968:	cmp	r1, #0
   1f96c:	bne	1f9a0 <_obstack_free@@Base+0x48>
   1f970:	cmp	r6, #0
   1f974:	popeq	{r4, r5, r6, pc}
   1f978:	bl	11d2c <abort@plt>
   1f97c:	ldr	r5, [r1, #4]
   1f980:	mov	r0, r4
   1f984:	bl	1f6ac <__assert_fail@plt+0xd938>
   1f988:	ldrb	r3, [r4, #40]	; 0x28
   1f98c:	orr	r3, r3, #2
   1f990:	strb	r3, [r4, #40]	; 0x28
   1f994:	mov	r1, r5
   1f998:	cmp	r5, #0
   1f99c:	beq	1f970 <_obstack_free@@Base+0x18>
   1f9a0:	cmp	r6, r1
   1f9a4:	bls	1f97c <_obstack_free@@Base+0x24>
   1f9a8:	ldr	r3, [r1]
   1f9ac:	cmp	r6, r3
   1f9b0:	bhi	1f97c <_obstack_free@@Base+0x24>
   1f9b4:	cmp	r1, #0
   1f9b8:	beq	1f970 <_obstack_free@@Base+0x18>
   1f9bc:	str	r6, [r4, #12]
   1f9c0:	str	r6, [r4, #8]
   1f9c4:	ldr	r3, [r1]
   1f9c8:	str	r3, [r4, #16]
   1f9cc:	str	r1, [r4, #4]
   1f9d0:	pop	{r4, r5, r6, pc}

0001f9d4 <_obstack_memory_used@@Base>:
   1f9d4:	ldr	r3, [r0, #4]
   1f9d8:	cmp	r3, #0
   1f9dc:	beq	1fa00 <_obstack_memory_used@@Base+0x2c>
   1f9e0:	mov	r0, #0
   1f9e4:	ldr	r2, [r3]
   1f9e8:	sub	r2, r2, r3
   1f9ec:	add	r0, r0, r2
   1f9f0:	ldr	r3, [r3, #4]
   1f9f4:	cmp	r3, #0
   1f9f8:	bne	1f9e4 <_obstack_memory_used@@Base+0x10>
   1f9fc:	bx	lr
   1fa00:	mov	r0, #0
   1fa04:	bx	lr
   1fa08:	push	{r4, r5, r6, lr}
   1fa0c:	subs	r4, r0, #0
   1fa10:	beq	1fa88 <_obstack_memory_used@@Base+0xb4>
   1fa14:	mov	r1, #47	; 0x2f
   1fa18:	mov	r0, r4
   1fa1c:	bl	11c78 <strrchr@plt>
   1fa20:	cmp	r0, #0
   1fa24:	addne	r5, r0, #1
   1fa28:	moveq	r5, r4
   1fa2c:	sub	r3, r5, r4
   1fa30:	cmp	r3, #6
   1fa34:	ble	1fa74 <_obstack_memory_used@@Base+0xa0>
   1fa38:	mov	r2, #7
   1fa3c:	ldr	r1, [pc, #96]	; 1faa4 <_obstack_memory_used@@Base+0xd0>
   1fa40:	sub	r0, r5, #7
   1fa44:	bl	11d20 <strncmp@plt>
   1fa48:	cmp	r0, #0
   1fa4c:	bne	1fa74 <_obstack_memory_used@@Base+0xa0>
   1fa50:	mov	r2, #3
   1fa54:	ldr	r1, [pc, #76]	; 1faa8 <_obstack_memory_used@@Base+0xd4>
   1fa58:	mov	r0, r5
   1fa5c:	bl	11d20 <strncmp@plt>
   1fa60:	cmp	r0, #0
   1fa64:	addeq	r4, r5, #3
   1fa68:	ldreq	r3, [pc, #60]	; 1faac <_obstack_memory_used@@Base+0xd8>
   1fa6c:	streq	r4, [r3]
   1fa70:	movne	r4, r5
   1fa74:	ldr	r3, [pc, #52]	; 1fab0 <_obstack_memory_used@@Base+0xdc>
   1fa78:	str	r4, [r3]
   1fa7c:	ldr	r3, [pc, #48]	; 1fab4 <_obstack_memory_used@@Base+0xe0>
   1fa80:	str	r4, [r3]
   1fa84:	pop	{r4, r5, r6, pc}
   1fa88:	ldr	r3, [pc, #40]	; 1fab8 <_obstack_memory_used@@Base+0xe4>
   1fa8c:	ldr	r3, [r3]
   1fa90:	mov	r2, #55	; 0x37
   1fa94:	mov	r1, #1
   1fa98:	ldr	r0, [pc, #28]	; 1fabc <_obstack_memory_used@@Base+0xe8>
   1fa9c:	bl	11a2c <fwrite@plt>
   1faa0:	bl	11d2c <abort@plt>
   1faa4:	andeq	r8, r2, r0, ror #3
   1faa8:	andeq	r8, r2, r8, ror #3
   1faac:	andeq	r9, r3, r0, lsl r3
   1fab0:	andeq	sl, r3, r4, ror #7
   1fab4:	andeq	r9, r3, r4, lsl r3
   1fab8:	andeq	r9, r3, r0, lsr #6
   1fabc:	andeq	r8, r2, r8, lsr #3
   1fac0:	push	{r4, r5, r6, lr}
   1fac4:	mov	r5, r0
   1fac8:	mov	r4, r1
   1facc:	mov	r2, #48	; 0x30
   1fad0:	mov	r1, #0
   1fad4:	bl	11be8 <memset@plt>
   1fad8:	cmp	r4, #10
   1fadc:	beq	1faec <_obstack_memory_used@@Base+0x118>
   1fae0:	str	r4, [r5]
   1fae4:	mov	r0, r5
   1fae8:	pop	{r4, r5, r6, pc}
   1faec:	bl	11d2c <abort@plt>
   1faf0:	push	{r4, r5, r6, lr}
   1faf4:	mov	r4, r0
   1faf8:	mov	r5, r1
   1fafc:	mov	r2, #5
   1fb00:	mov	r1, r0
   1fb04:	mov	r0, #0
   1fb08:	bl	11984 <dcgettext@plt>
   1fb0c:	cmp	r4, r0
   1fb10:	popne	{r4, r5, r6, pc}
   1fb14:	bl	2341c <_obstack_memory_used@@Base+0x3a48>
   1fb18:	ldrb	r3, [r0]
   1fb1c:	bic	r3, r3, #32
   1fb20:	cmp	r3, #85	; 0x55
   1fb24:	beq	1fba0 <_obstack_memory_used@@Base+0x1cc>
   1fb28:	cmp	r3, #71	; 0x47
   1fb2c:	bne	1fbfc <_obstack_memory_used@@Base+0x228>
   1fb30:	ldrb	r3, [r0, #1]
   1fb34:	bic	r3, r3, #32
   1fb38:	cmp	r3, #66	; 0x42
   1fb3c:	bne	1fbfc <_obstack_memory_used@@Base+0x228>
   1fb40:	ldrb	r3, [r0, #2]
   1fb44:	cmp	r3, #49	; 0x31
   1fb48:	bne	1fbfc <_obstack_memory_used@@Base+0x228>
   1fb4c:	ldrb	r3, [r0, #3]
   1fb50:	cmp	r3, #56	; 0x38
   1fb54:	bne	1fbfc <_obstack_memory_used@@Base+0x228>
   1fb58:	ldrb	r3, [r0, #4]
   1fb5c:	cmp	r3, #48	; 0x30
   1fb60:	bne	1fbfc <_obstack_memory_used@@Base+0x228>
   1fb64:	ldrb	r3, [r0, #5]
   1fb68:	cmp	r3, #51	; 0x33
   1fb6c:	bne	1fbfc <_obstack_memory_used@@Base+0x228>
   1fb70:	ldrb	r3, [r0, #6]
   1fb74:	cmp	r3, #48	; 0x30
   1fb78:	bne	1fbfc <_obstack_memory_used@@Base+0x228>
   1fb7c:	ldrb	r3, [r0, #7]
   1fb80:	cmp	r3, #0
   1fb84:	bne	1fbfc <_obstack_memory_used@@Base+0x228>
   1fb88:	ldrb	r2, [r4]
   1fb8c:	ldr	r3, [pc, #124]	; 1fc10 <_obstack_memory_used@@Base+0x23c>
   1fb90:	ldr	r0, [pc, #124]	; 1fc14 <_obstack_memory_used@@Base+0x240>
   1fb94:	cmp	r2, #96	; 0x60
   1fb98:	movne	r0, r3
   1fb9c:	pop	{r4, r5, r6, pc}
   1fba0:	ldrb	r3, [r0, #1]
   1fba4:	bic	r3, r3, #32
   1fba8:	cmp	r3, #84	; 0x54
   1fbac:	bne	1fbfc <_obstack_memory_used@@Base+0x228>
   1fbb0:	ldrb	r3, [r0, #2]
   1fbb4:	bic	r3, r3, #32
   1fbb8:	cmp	r3, #70	; 0x46
   1fbbc:	bne	1fbfc <_obstack_memory_used@@Base+0x228>
   1fbc0:	ldrb	r3, [r0, #3]
   1fbc4:	cmp	r3, #45	; 0x2d
   1fbc8:	bne	1fbfc <_obstack_memory_used@@Base+0x228>
   1fbcc:	ldrb	r3, [r0, #4]
   1fbd0:	cmp	r3, #56	; 0x38
   1fbd4:	bne	1fbfc <_obstack_memory_used@@Base+0x228>
   1fbd8:	ldrb	r3, [r0, #5]
   1fbdc:	cmp	r3, #0
   1fbe0:	bne	1fbfc <_obstack_memory_used@@Base+0x228>
   1fbe4:	ldrb	r2, [r4]
   1fbe8:	ldr	r3, [pc, #40]	; 1fc18 <_obstack_memory_used@@Base+0x244>
   1fbec:	ldr	r0, [pc, #40]	; 1fc1c <_obstack_memory_used@@Base+0x248>
   1fbf0:	cmp	r2, #96	; 0x60
   1fbf4:	movne	r0, r3
   1fbf8:	pop	{r4, r5, r6, pc}
   1fbfc:	ldr	r3, [pc, #28]	; 1fc20 <_obstack_memory_used@@Base+0x24c>
   1fc00:	ldr	r0, [pc, #28]	; 1fc24 <_obstack_memory_used@@Base+0x250>
   1fc04:	cmp	r5, #9
   1fc08:	movne	r0, r3
   1fc0c:	pop	{r4, r5, r6, pc}
   1fc10:	andeq	r8, r2, r4, asr #4
   1fc14:	andeq	r8, r2, r0, asr r2
   1fc18:	andeq	r8, r2, r0, asr #4
   1fc1c:	andeq	r8, r2, r4, asr r2
   1fc20:	andeq	r8, r2, r8, asr #4
   1fc24:	andeq	r8, r2, ip, asr #4
   1fc28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc2c:	sub	sp, sp, #116	; 0x74
   1fc30:	str	r0, [sp, #36]	; 0x24
   1fc34:	mov	sl, r1
   1fc38:	str	r2, [sp, #52]	; 0x34
   1fc3c:	str	r3, [sp, #28]
   1fc40:	ldr	r8, [sp, #152]	; 0x98
   1fc44:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   1fc48:	str	r0, [sp, #84]	; 0x54
   1fc4c:	ldr	r3, [sp, #156]	; 0x9c
   1fc50:	lsr	r3, r3, #1
   1fc54:	and	r3, r3, #1
   1fc58:	str	r3, [sp, #32]
   1fc5c:	mov	r3, #1
   1fc60:	str	r3, [sp, #40]	; 0x28
   1fc64:	mov	r3, #0
   1fc68:	str	r3, [sp, #80]	; 0x50
   1fc6c:	str	r3, [sp, #44]	; 0x2c
   1fc70:	str	r3, [sp, #48]	; 0x30
   1fc74:	str	r3, [sp, #60]	; 0x3c
   1fc78:	str	r3, [sp, #72]	; 0x48
   1fc7c:	str	r3, [sp, #76]	; 0x4c
   1fc80:	mov	r7, sl
   1fc84:	mov	sl, r8
   1fc88:	cmp	sl, #10
   1fc8c:	ldrls	pc, [pc, sl, lsl #2]
   1fc90:	b	1fe48 <_obstack_memory_used@@Base+0x474>
   1fc94:	strdeq	pc, [r1], -r8
   1fc98:	andeq	pc, r1, r8, asr #25
   1fc9c:	andeq	pc, r1, r4, lsr #28
   1fca0:	andeq	pc, r1, r0, asr #25
   1fca4:	ldrdeq	pc, [r1], -r8
   1fca8:	andeq	pc, r1, r8, lsl #26
   1fcac:	andeq	r0, r2, r4, ror sp
   1fcb0:	andeq	pc, r1, ip, asr #28
   1fcb4:	andeq	pc, r1, r4, asr #26
   1fcb8:	andeq	pc, r1, r4, asr #26
   1fcbc:	andeq	pc, r1, r4, asr #26
   1fcc0:	mov	r3, #1
   1fcc4:	str	r3, [sp, #48]	; 0x30
   1fcc8:	mov	r3, #1
   1fccc:	str	r3, [sp, #32]
   1fcd0:	str	r3, [sp, #60]	; 0x3c
   1fcd4:	ldr	r3, [pc, #4068]	; 20cc0 <_obstack_memory_used@@Base+0x12ec>
   1fcd8:	str	r3, [sp, #72]	; 0x48
   1fcdc:	mov	fp, #0
   1fce0:	mov	sl, #2
   1fce4:	mov	r6, #0
   1fce8:	ldr	r3, [sp, #48]	; 0x30
   1fcec:	eor	r3, r3, #1
   1fcf0:	str	r3, [sp, #68]	; 0x44
   1fcf4:	b	205dc <_obstack_memory_used@@Base+0xc08>
   1fcf8:	mov	r3, #0
   1fcfc:	str	r3, [sp, #32]
   1fd00:	mov	fp, r3
   1fd04:	b	1fce4 <_obstack_memory_used@@Base+0x310>
   1fd08:	ldr	r3, [sp, #32]
   1fd0c:	cmp	r3, #0
   1fd10:	bne	1fe64 <_obstack_memory_used@@Base+0x490>
   1fd14:	cmp	r7, #0
   1fd18:	beq	1fe84 <_obstack_memory_used@@Base+0x4b0>
   1fd1c:	ldr	r3, [sp, #36]	; 0x24
   1fd20:	mov	r2, #34	; 0x22
   1fd24:	strb	r2, [r3]
   1fd28:	mov	r3, #1
   1fd2c:	str	r3, [sp, #48]	; 0x30
   1fd30:	str	r3, [sp, #60]	; 0x3c
   1fd34:	ldr	r3, [pc, #3980]	; 20cc8 <_obstack_memory_used@@Base+0x12f4>
   1fd38:	str	r3, [sp, #72]	; 0x48
   1fd3c:	mov	fp, #1
   1fd40:	b	1fce4 <_obstack_memory_used@@Base+0x310>
   1fd44:	cmp	sl, #10
   1fd48:	beq	1fd6c <_obstack_memory_used@@Base+0x398>
   1fd4c:	mov	r1, sl
   1fd50:	ldr	r0, [pc, #3948]	; 20cc4 <_obstack_memory_used@@Base+0x12f0>
   1fd54:	bl	1faf0 <_obstack_memory_used@@Base+0x11c>
   1fd58:	str	r0, [sp, #164]	; 0xa4
   1fd5c:	mov	r1, sl
   1fd60:	ldr	r0, [pc, #3928]	; 20cc0 <_obstack_memory_used@@Base+0x12ec>
   1fd64:	bl	1faf0 <_obstack_memory_used@@Base+0x11c>
   1fd68:	str	r0, [sp, #168]	; 0xa8
   1fd6c:	ldr	r3, [sp, #32]
   1fd70:	cmp	r3, #0
   1fd74:	movne	fp, #0
   1fd78:	bne	1fdb0 <_obstack_memory_used@@Base+0x3dc>
   1fd7c:	ldr	r3, [sp, #164]	; 0xa4
   1fd80:	ldrb	r3, [r3]
   1fd84:	cmp	r3, #0
   1fd88:	beq	1fdd0 <_obstack_memory_used@@Base+0x3fc>
   1fd8c:	ldr	r2, [sp, #164]	; 0xa4
   1fd90:	mov	fp, #0
   1fd94:	ldr	r1, [sp, #36]	; 0x24
   1fd98:	cmp	r7, fp
   1fd9c:	strbhi	r3, [r1, fp]
   1fda0:	add	fp, fp, #1
   1fda4:	ldrb	r3, [r2, #1]!
   1fda8:	cmp	r3, #0
   1fdac:	bne	1fd98 <_obstack_memory_used@@Base+0x3c4>
   1fdb0:	ldr	r0, [sp, #168]	; 0xa8
   1fdb4:	bl	11b94 <strlen@plt>
   1fdb8:	str	r0, [sp, #60]	; 0x3c
   1fdbc:	ldr	r3, [sp, #168]	; 0xa8
   1fdc0:	str	r3, [sp, #72]	; 0x48
   1fdc4:	mov	r3, #1
   1fdc8:	str	r3, [sp, #48]	; 0x30
   1fdcc:	b	1fce4 <_obstack_memory_used@@Base+0x310>
   1fdd0:	mov	fp, #0
   1fdd4:	b	1fdb0 <_obstack_memory_used@@Base+0x3dc>
   1fdd8:	ldr	r3, [sp, #32]
   1fddc:	cmp	r3, #0
   1fde0:	bne	1fea0 <_obstack_memory_used@@Base+0x4cc>
   1fde4:	mov	r3, #1
   1fde8:	str	r3, [sp, #48]	; 0x30
   1fdec:	cmp	r7, #0
   1fdf0:	beq	1febc <_obstack_memory_used@@Base+0x4e8>
   1fdf4:	ldr	r3, [sp, #36]	; 0x24
   1fdf8:	mov	r2, #39	; 0x27
   1fdfc:	strb	r2, [r3]
   1fe00:	mov	r3, #0
   1fe04:	str	r3, [sp, #32]
   1fe08:	mov	r3, #1
   1fe0c:	str	r3, [sp, #60]	; 0x3c
   1fe10:	ldr	r3, [pc, #3752]	; 20cc0 <_obstack_memory_used@@Base+0x12ec>
   1fe14:	str	r3, [sp, #72]	; 0x48
   1fe18:	mov	fp, #1
   1fe1c:	mov	sl, #2
   1fe20:	b	1fce4 <_obstack_memory_used@@Base+0x310>
   1fe24:	ldr	r3, [sp, #32]
   1fe28:	cmp	r3, #0
   1fe2c:	beq	1fdec <_obstack_memory_used@@Base+0x418>
   1fe30:	mov	r3, #1
   1fe34:	str	r3, [sp, #60]	; 0x3c
   1fe38:	ldr	r3, [pc, #3712]	; 20cc0 <_obstack_memory_used@@Base+0x12ec>
   1fe3c:	str	r3, [sp, #72]	; 0x48
   1fe40:	mov	fp, #0
   1fe44:	b	1fce4 <_obstack_memory_used@@Base+0x310>
   1fe48:	bl	11d2c <abort@plt>
   1fe4c:	mov	r3, #0
   1fe50:	str	r3, [sp, #32]
   1fe54:	mov	r3, #1
   1fe58:	str	r3, [sp, #48]	; 0x30
   1fe5c:	mov	fp, #0
   1fe60:	b	1fce4 <_obstack_memory_used@@Base+0x310>
   1fe64:	ldr	r3, [sp, #32]
   1fe68:	str	r3, [sp, #48]	; 0x30
   1fe6c:	mov	r3, #1
   1fe70:	str	r3, [sp, #60]	; 0x3c
   1fe74:	ldr	r3, [pc, #3660]	; 20cc8 <_obstack_memory_used@@Base+0x12f4>
   1fe78:	str	r3, [sp, #72]	; 0x48
   1fe7c:	mov	fp, #0
   1fe80:	b	1fce4 <_obstack_memory_used@@Base+0x310>
   1fe84:	mov	r3, #1
   1fe88:	str	r3, [sp, #48]	; 0x30
   1fe8c:	str	r3, [sp, #60]	; 0x3c
   1fe90:	ldr	r3, [pc, #3632]	; 20cc8 <_obstack_memory_used@@Base+0x12f4>
   1fe94:	str	r3, [sp, #72]	; 0x48
   1fe98:	mov	fp, #1
   1fe9c:	b	1fce4 <_obstack_memory_used@@Base+0x310>
   1fea0:	mov	r3, #1
   1fea4:	str	r3, [sp, #60]	; 0x3c
   1fea8:	ldr	r3, [pc, #3600]	; 20cc0 <_obstack_memory_used@@Base+0x12ec>
   1feac:	str	r3, [sp, #72]	; 0x48
   1feb0:	mov	fp, #0
   1feb4:	mov	sl, #2
   1feb8:	b	1fce4 <_obstack_memory_used@@Base+0x310>
   1febc:	mov	r3, #0
   1fec0:	str	r3, [sp, #32]
   1fec4:	mov	r3, #1
   1fec8:	str	r3, [sp, #60]	; 0x3c
   1fecc:	ldr	r3, [pc, #3564]	; 20cc0 <_obstack_memory_used@@Base+0x12ec>
   1fed0:	str	r3, [sp, #72]	; 0x48
   1fed4:	mov	fp, #1
   1fed8:	mov	sl, #2
   1fedc:	b	1fce4 <_obstack_memory_used@@Base+0x310>
   1fee0:	mov	r3, #0
   1fee4:	str	r3, [sp, #56]	; 0x38
   1fee8:	ldr	r3, [sp, #52]	; 0x34
   1feec:	add	r2, r3, r6
   1fef0:	str	r2, [sp, #64]	; 0x40
   1fef4:	ldrb	r4, [r3, r6]
   1fef8:	cmp	r4, #126	; 0x7e
   1fefc:	ldrls	pc, [pc, r4, lsl #2]
   1ff00:	b	2073c <_obstack_memory_used@@Base+0xd68>
   1ff04:	andeq	r0, r2, ip, lsl r1
   1ff08:	andeq	r0, r2, ip, lsr r7
   1ff0c:	andeq	r0, r2, ip, lsr r7
   1ff10:	andeq	r0, r2, ip, lsr r7
   1ff14:	andeq	r0, r2, ip, lsr r7
   1ff18:	andeq	r0, r2, ip, lsr r7
   1ff1c:	andeq	r0, r2, ip, lsr r7
   1ff20:	andeq	r0, r2, r8, ror r4
   1ff24:	andeq	r0, r2, r4, lsl r1
   1ff28:	andeq	r0, r2, r0, lsr r4
   1ff2c:	andeq	r0, r2, r8, lsr #8
   1ff30:	muleq	r2, r8, r3
   1ff34:	muleq	r2, r0, r3
   1ff38:	andeq	r0, r2, ip, lsl #2
   1ff3c:	andeq	r0, r2, ip, lsr r7
   1ff40:	andeq	r0, r2, ip, lsr r7
   1ff44:	andeq	r0, r2, ip, lsr r7
   1ff48:	andeq	r0, r2, ip, lsr r7
   1ff4c:	andeq	r0, r2, ip, lsr r7
   1ff50:	andeq	r0, r2, ip, lsr r7
   1ff54:	andeq	r0, r2, ip, lsr r7
   1ff58:	andeq	r0, r2, ip, lsr r7
   1ff5c:	andeq	r0, r2, ip, lsr r7
   1ff60:	andeq	r0, r2, ip, lsr r7
   1ff64:	andeq	r0, r2, ip, lsr r7
   1ff68:	andeq	r0, r2, ip, lsr r7
   1ff6c:	andeq	r0, r2, ip, lsr r7
   1ff70:	andeq	r0, r2, ip, lsr r7
   1ff74:	andeq	r0, r2, ip, lsr r7
   1ff78:	andeq	r0, r2, ip, lsr r7
   1ff7c:	andeq	r0, r2, ip, lsr r7
   1ff80:	andeq	r0, r2, ip, lsr r7
   1ff84:	andeq	r0, r2, ip, asr #9
   1ff88:	andeq	r0, r2, r8, asr #9
   1ff8c:	andeq	r0, r2, r8, asr #9
   1ff90:	andeq	r0, r2, r0, lsr #9
   1ff94:	andeq	r0, r2, r8, asr #9
   1ff98:	andeq	r0, r2, r0, lsl fp
   1ff9c:	andeq	r0, r2, r8, asr #9
   1ffa0:	andeq	r0, r2, r0, lsr #13
   1ffa4:	andeq	r0, r2, r8, asr #9
   1ffa8:	andeq	r0, r2, r8, asr #9
   1ffac:	andeq	r0, r2, r8, asr #9
   1ffb0:	andeq	r0, r2, r0, lsl fp
   1ffb4:	andeq	r0, r2, r0, lsl fp
   1ffb8:	andeq	r0, r2, r0, lsl fp
   1ffbc:	andeq	r0, r2, r0, lsl fp
   1ffc0:	andeq	r0, r2, r0, lsl fp
   1ffc4:	andeq	r0, r2, r0, lsl fp
   1ffc8:	andeq	r0, r2, r0, lsl fp
   1ffcc:	andeq	r0, r2, r0, lsl fp
   1ffd0:	andeq	r0, r2, r0, lsl fp
   1ffd4:	andeq	r0, r2, r0, lsl fp
   1ffd8:	andeq	r0, r2, r0, lsl fp
   1ffdc:	andeq	r0, r2, r0, lsl fp
   1ffe0:	andeq	r0, r2, r0, lsl fp
   1ffe4:	andeq	r0, r2, r0, lsl fp
   1ffe8:	andeq	r0, r2, r0, lsl fp
   1ffec:	andeq	r0, r2, r0, lsl fp
   1fff0:	andeq	r0, r2, r8, asr #9
   1fff4:	andeq	r0, r2, r8, asr #9
   1fff8:	andeq	r0, r2, r8, asr #9
   1fffc:	andeq	r0, r2, r8, asr #9
   20000:	andeq	r0, r2, r4, lsr #4
   20004:	andeq	r0, r2, ip, lsr r7
   20008:	andeq	r0, r2, r0, lsl fp
   2000c:	andeq	r0, r2, r0, lsl fp
   20010:	andeq	r0, r2, r0, lsl fp
   20014:	andeq	r0, r2, r0, lsl fp
   20018:	andeq	r0, r2, r0, lsl fp
   2001c:	andeq	r0, r2, r0, lsl fp
   20020:	andeq	r0, r2, r0, lsl fp
   20024:	andeq	r0, r2, r0, lsl fp
   20028:	andeq	r0, r2, r0, lsl fp
   2002c:	andeq	r0, r2, r0, lsl fp
   20030:	andeq	r0, r2, r0, lsl fp
   20034:	andeq	r0, r2, r0, lsl fp
   20038:	andeq	r0, r2, r0, lsl fp
   2003c:	andeq	r0, r2, r0, lsl fp
   20040:	andeq	r0, r2, r0, lsl fp
   20044:	andeq	r0, r2, r0, lsl fp
   20048:	andeq	r0, r2, r0, lsl fp
   2004c:	andeq	r0, r2, r0, lsl fp
   20050:	andeq	r0, r2, r0, lsl fp
   20054:	andeq	r0, r2, r0, lsl fp
   20058:	andeq	r0, r2, r0, lsl fp
   2005c:	andeq	r0, r2, r0, lsl fp
   20060:	andeq	r0, r2, r0, lsl fp
   20064:	andeq	r0, r2, r0, lsl fp
   20068:	andeq	r0, r2, r0, lsl fp
   2006c:	andeq	r0, r2, r0, lsl fp
   20070:	andeq	r0, r2, r8, asr #9
   20074:	andeq	r0, r2, r0, lsr #7
   20078:	andeq	r0, r2, r0, lsl fp
   2007c:	andeq	r0, r2, r8, asr #9
   20080:	andeq	r0, r2, r0, lsl fp
   20084:	andeq	r0, r2, r8, asr #9
   20088:	andeq	r0, r2, r0, lsl fp
   2008c:	andeq	r0, r2, r0, lsl fp
   20090:	andeq	r0, r2, r0, lsl fp
   20094:	andeq	r0, r2, r0, lsl fp
   20098:	andeq	r0, r2, r0, lsl fp
   2009c:	andeq	r0, r2, r0, lsl fp
   200a0:	andeq	r0, r2, r0, lsl fp
   200a4:	andeq	r0, r2, r0, lsl fp
   200a8:	andeq	r0, r2, r0, lsl fp
   200ac:	andeq	r0, r2, r0, lsl fp
   200b0:	andeq	r0, r2, r0, lsl fp
   200b4:	andeq	r0, r2, r0, lsl fp
   200b8:	andeq	r0, r2, r0, lsl fp
   200bc:	andeq	r0, r2, r0, lsl fp
   200c0:	andeq	r0, r2, r0, lsl fp
   200c4:	andeq	r0, r2, r0, lsl fp
   200c8:	andeq	r0, r2, r0, lsl fp
   200cc:	andeq	r0, r2, r0, lsl fp
   200d0:	andeq	r0, r2, r0, lsl fp
   200d4:	andeq	r0, r2, r0, lsl fp
   200d8:	andeq	r0, r2, r0, lsl fp
   200dc:	andeq	r0, r2, r0, lsl fp
   200e0:	andeq	r0, r2, r0, lsl fp
   200e4:	andeq	r0, r2, r0, lsl fp
   200e8:	andeq	r0, r2, r0, lsl fp
   200ec:	andeq	r0, r2, r0, lsl fp
   200f0:	andeq	r0, r2, r0, lsl #9
   200f4:	andeq	r0, r2, r8, asr #9
   200f8:	andeq	r0, r2, r0, lsl #9
   200fc:	andeq	r0, r2, r0, lsr #9
   20100:	mov	r3, #0
   20104:	str	r3, [sp, #56]	; 0x38
   20108:	b	1fee8 <_obstack_memory_used@@Base+0x514>
   2010c:	mov	r3, #114	; 0x72
   20110:	b	20434 <_obstack_memory_used@@Base+0xa60>
   20114:	mov	r3, #98	; 0x62
   20118:	b	2044c <_obstack_memory_used@@Base+0xa78>
   2011c:	ldr	r3, [sp, #48]	; 0x30
   20120:	cmp	r3, #0
   20124:	beq	2020c <_obstack_memory_used@@Base+0x838>
   20128:	ldr	r3, [sp, #32]
   2012c:	cmp	r3, #0
   20130:	bne	20c94 <_obstack_memory_used@@Base+0x12c0>
   20134:	ldr	r3, [sp, #44]	; 0x2c
   20138:	eor	r3, r3, #1
   2013c:	cmp	sl, #2
   20140:	movne	r3, #0
   20144:	andeq	r3, r3, #1
   20148:	cmp	r3, #0
   2014c:	moveq	r2, fp
   20150:	beq	20194 <_obstack_memory_used@@Base+0x7c0>
   20154:	cmp	r7, fp
   20158:	ldrhi	r2, [sp, #36]	; 0x24
   2015c:	movhi	r1, #39	; 0x27
   20160:	strbhi	r1, [r2, fp]
   20164:	add	r2, fp, #1
   20168:	cmp	r7, r2
   2016c:	ldrhi	r1, [sp, #36]	; 0x24
   20170:	movhi	r0, #36	; 0x24
   20174:	strbhi	r0, [r1, r2]
   20178:	add	r2, fp, #2
   2017c:	cmp	r7, r2
   20180:	ldrhi	r1, [sp, #36]	; 0x24
   20184:	movhi	r0, #39	; 0x27
   20188:	strbhi	r0, [r1, r2]
   2018c:	add	r2, fp, #3
   20190:	str	r3, [sp, #44]	; 0x2c
   20194:	cmp	r7, r2
   20198:	ldrhi	r3, [sp, #36]	; 0x24
   2019c:	movhi	r1, #92	; 0x5c
   201a0:	strbhi	r1, [r3, r2]
   201a4:	add	fp, r2, #1
   201a8:	cmp	r5, #0
   201ac:	beq	20b18 <_obstack_memory_used@@Base+0x1144>
   201b0:	add	r3, r6, #1
   201b4:	ldr	r1, [sp, #28]
   201b8:	cmp	r1, r3
   201bc:	bls	20b28 <_obstack_memory_used@@Base+0x1154>
   201c0:	ldr	r1, [sp, #52]	; 0x34
   201c4:	ldrb	r3, [r1, r3]
   201c8:	sub	r3, r3, #48	; 0x30
   201cc:	uxtb	r3, r3
   201d0:	cmp	r3, #9
   201d4:	bhi	20b34 <_obstack_memory_used@@Base+0x1160>
   201d8:	cmp	r7, fp
   201dc:	movhi	r3, #48	; 0x30
   201e0:	ldrhi	r1, [sp, #36]	; 0x24
   201e4:	strbhi	r3, [r1, fp]
   201e8:	add	r3, r2, #2
   201ec:	cmp	r7, r3
   201f0:	movhi	r1, #48	; 0x30
   201f4:	ldrhi	r0, [sp, #36]	; 0x24
   201f8:	strbhi	r1, [r0, r3]
   201fc:	add	fp, r2, #3
   20200:	ldr	r8, [sp, #32]
   20204:	mov	r4, #48	; 0x30
   20208:	b	204e4 <_obstack_memory_used@@Base+0xb10>
   2020c:	ldr	r3, [sp, #156]	; 0x9c
   20210:	tst	r3, #1
   20214:	bne	205d8 <_obstack_memory_used@@Base+0xc04>
   20218:	ldr	r5, [sp, #48]	; 0x30
   2021c:	mov	r8, r5
   20220:	b	204e4 <_obstack_memory_used@@Base+0xb10>
   20224:	cmp	sl, #2
   20228:	beq	20240 <_obstack_memory_used@@Base+0x86c>
   2022c:	cmp	sl, #5
   20230:	beq	20258 <_obstack_memory_used@@Base+0x884>
   20234:	mov	r8, #0
   20238:	mov	r5, r8
   2023c:	b	204e4 <_obstack_memory_used@@Base+0xb10>
   20240:	ldr	r3, [sp, #32]
   20244:	cmp	r3, #0
   20248:	bne	20ca8 <_obstack_memory_used@@Base+0x12d4>
   2024c:	mov	r8, r3
   20250:	mov	r5, r3
   20254:	b	204e4 <_obstack_memory_used@@Base+0xb10>
   20258:	ldr	r3, [sp, #156]	; 0x9c
   2025c:	tst	r3, #4
   20260:	beq	20b40 <_obstack_memory_used@@Base+0x116c>
   20264:	add	r3, r6, #2
   20268:	ldr	r2, [sp, #28]
   2026c:	cmp	r2, r3
   20270:	bls	20b4c <_obstack_memory_used@@Base+0x1178>
   20274:	ldr	r2, [sp, #52]	; 0x34
   20278:	add	r2, r2, r6
   2027c:	ldrb	r2, [r2, #1]
   20280:	cmp	r2, #63	; 0x3f
   20284:	movne	r8, #0
   20288:	movne	r5, r8
   2028c:	bne	204e4 <_obstack_memory_used@@Base+0xb10>
   20290:	ldr	r2, [sp, #52]	; 0x34
   20294:	ldrb	r2, [r2, r3]
   20298:	sub	r1, r2, #33	; 0x21
   2029c:	cmp	r1, #29
   202a0:	ldrls	pc, [pc, r1, lsl #2]
   202a4:	b	20b58 <_obstack_memory_used@@Base+0x1184>
   202a8:	andeq	r0, r2, r0, lsr #6
   202ac:	andeq	r0, r2, r8, asr fp
   202b0:	andeq	r0, r2, r8, asr fp
   202b4:	andeq	r0, r2, r8, asr fp
   202b8:	andeq	r0, r2, r8, asr fp
   202bc:	andeq	r0, r2, r8, asr fp
   202c0:	andeq	r0, r2, r0, lsr #6
   202c4:	andeq	r0, r2, r0, lsr #6
   202c8:	andeq	r0, r2, r0, lsr #6
   202cc:	andeq	r0, r2, r8, asr fp
   202d0:	andeq	r0, r2, r8, asr fp
   202d4:	andeq	r0, r2, r8, asr fp
   202d8:	andeq	r0, r2, r0, lsr #6
   202dc:	andeq	r0, r2, r8, asr fp
   202e0:	andeq	r0, r2, r0, lsr #6
   202e4:	andeq	r0, r2, r8, asr fp
   202e8:	andeq	r0, r2, r8, asr fp
   202ec:	andeq	r0, r2, r8, asr fp
   202f0:	andeq	r0, r2, r8, asr fp
   202f4:	andeq	r0, r2, r8, asr fp
   202f8:	andeq	r0, r2, r8, asr fp
   202fc:	andeq	r0, r2, r8, asr fp
   20300:	andeq	r0, r2, r8, asr fp
   20304:	andeq	r0, r2, r8, asr fp
   20308:	andeq	r0, r2, r8, asr fp
   2030c:	andeq	r0, r2, r8, asr fp
   20310:	andeq	r0, r2, r8, asr fp
   20314:	andeq	r0, r2, r0, lsr #6
   20318:	andeq	r0, r2, r0, lsr #6
   2031c:	andeq	r0, r2, r0, lsr #6
   20320:	ldr	r1, [sp, #32]
   20324:	cmp	r1, #0
   20328:	bne	20d68 <_obstack_memory_used@@Base+0x1394>
   2032c:	cmp	r7, fp
   20330:	movhi	r1, #63	; 0x3f
   20334:	ldrhi	r0, [sp, #36]	; 0x24
   20338:	strbhi	r1, [r0, fp]
   2033c:	add	r1, fp, #1
   20340:	cmp	r7, r1
   20344:	ldrhi	r0, [sp, #36]	; 0x24
   20348:	movhi	ip, #34	; 0x22
   2034c:	strbhi	ip, [r0, r1]
   20350:	add	r1, fp, #2
   20354:	cmp	r7, r1
   20358:	ldrhi	r0, [sp, #36]	; 0x24
   2035c:	movhi	ip, #34	; 0x22
   20360:	strbhi	ip, [r0, r1]
   20364:	add	r1, fp, #3
   20368:	cmp	r7, r1
   2036c:	movhi	r0, #63	; 0x3f
   20370:	ldrhi	ip, [sp, #36]	; 0x24
   20374:	strbhi	r0, [ip, r1]
   20378:	add	fp, fp, #4
   2037c:	ldr	r5, [sp, #32]
   20380:	mov	r8, r5
   20384:	mov	r4, r2
   20388:	mov	r6, r3
   2038c:	b	204e4 <_obstack_memory_used@@Base+0xb10>
   20390:	mov	r3, #102	; 0x66
   20394:	b	2044c <_obstack_memory_used@@Base+0xa78>
   20398:	mov	r3, #118	; 0x76
   2039c:	b	2044c <_obstack_memory_used@@Base+0xa78>
   203a0:	cmp	sl, #2
   203a4:	beq	20410 <_obstack_memory_used@@Base+0xa3c>
   203a8:	ldr	r3, [sp, #48]	; 0x30
   203ac:	ldr	r2, [sp, #32]
   203b0:	and	r3, r3, r2
   203b4:	tst	r9, r3
   203b8:	moveq	r3, r4
   203bc:	beq	2044c <_obstack_memory_used@@Base+0xa78>
   203c0:	mov	r8, #0
   203c4:	mov	r5, r8
   203c8:	eor	r5, r5, #1
   203cc:	ldr	r3, [sp, #44]	; 0x2c
   203d0:	and	r5, r5, r3
   203d4:	tst	r5, #255	; 0xff
   203d8:	beq	205b8 <_obstack_memory_used@@Base+0xbe4>
   203dc:	cmp	r7, fp
   203e0:	ldrhi	r3, [sp, #36]	; 0x24
   203e4:	movhi	r2, #39	; 0x27
   203e8:	strbhi	r2, [r3, fp]
   203ec:	add	r3, fp, #1
   203f0:	cmp	r7, r3
   203f4:	ldrhi	r2, [sp, #36]	; 0x24
   203f8:	movhi	r1, #39	; 0x27
   203fc:	strbhi	r1, [r2, r3]
   20400:	add	fp, fp, #2
   20404:	mov	r3, #0
   20408:	str	r3, [sp, #44]	; 0x2c
   2040c:	b	205b8 <_obstack_memory_used@@Base+0xbe4>
   20410:	ldr	r3, [sp, #32]
   20414:	cmp	r3, #0
   20418:	bne	20cb4 <_obstack_memory_used@@Base+0x12e0>
   2041c:	mov	r8, r3
   20420:	mov	r5, r3
   20424:	b	203c8 <_obstack_memory_used@@Base+0x9f4>
   20428:	mov	r3, #110	; 0x6e
   2042c:	b	20434 <_obstack_memory_used@@Base+0xa60>
   20430:	mov	r3, #116	; 0x74
   20434:	ldr	r2, [sp, #32]
   20438:	cmp	sl, #2
   2043c:	movne	r2, #0
   20440:	andeq	r2, r2, #1
   20444:	cmp	r2, #0
   20448:	bne	2046c <_obstack_memory_used@@Base+0xa98>
   2044c:	ldr	r2, [sp, #48]	; 0x30
   20450:	cmp	r2, #0
   20454:	moveq	r8, r2
   20458:	moveq	r5, r2
   2045c:	beq	204e4 <_obstack_memory_used@@Base+0xb10>
   20460:	mov	r4, r3
   20464:	mov	r8, #0
   20468:	b	2053c <_obstack_memory_used@@Base+0xb68>
   2046c:	mov	r8, sl
   20470:	mov	sl, r7
   20474:	b	20ce0 <_obstack_memory_used@@Base+0x130c>
   20478:	mov	r3, #97	; 0x61
   2047c:	b	2044c <_obstack_memory_used@@Base+0xa78>
   20480:	ldr	r3, [sp, #28]
   20484:	cmn	r3, #1
   20488:	beq	204b4 <_obstack_memory_used@@Base+0xae0>
   2048c:	ldr	r3, [sp, #28]
   20490:	subs	r3, r3, #1
   20494:	movne	r3, #1
   20498:	cmp	r3, #0
   2049c:	bne	20b64 <_obstack_memory_used@@Base+0x1190>
   204a0:	cmp	r6, #0
   204a4:	beq	204cc <_obstack_memory_used@@Base+0xaf8>
   204a8:	mov	r8, #0
   204ac:	mov	r5, r8
   204b0:	b	204e4 <_obstack_memory_used@@Base+0xb10>
   204b4:	ldr	r3, [sp, #52]	; 0x34
   204b8:	ldrb	r3, [r3, #1]
   204bc:	adds	r3, r3, #0
   204c0:	movne	r3, #1
   204c4:	b	20498 <_obstack_memory_used@@Base+0xac4>
   204c8:	mov	r8, #0
   204cc:	ldr	r5, [sp, #32]
   204d0:	cmp	sl, #2
   204d4:	movne	r5, #0
   204d8:	andeq	r5, r5, #1
   204dc:	cmp	r5, #0
   204e0:	bne	20694 <_obstack_memory_used@@Base+0xcc0>
   204e4:	ldr	r3, [sp, #68]	; 0x44
   204e8:	cmp	sl, #2
   204ec:	orreq	r3, r3, #1
   204f0:	eor	r3, r3, #1
   204f4:	ldr	r2, [sp, #32]
   204f8:	orr	r3, r2, r3
   204fc:	tst	r3, #255	; 0xff
   20500:	beq	20530 <_obstack_memory_used@@Base+0xb5c>
   20504:	ldr	r3, [sp, #160]	; 0xa0
   20508:	cmp	r3, #0
   2050c:	beq	20530 <_obstack_memory_used@@Base+0xb5c>
   20510:	lsr	r2, r4, #5
   20514:	uxtb	r2, r2
   20518:	and	r3, r4, #31
   2051c:	ldr	r1, [sp, #160]	; 0xa0
   20520:	ldr	r2, [r1, r2, lsl #2]
   20524:	lsr	r3, r2, r3
   20528:	tst	r3, #1
   2052c:	bne	2053c <_obstack_memory_used@@Base+0xb68>
   20530:	ldr	r3, [sp, #56]	; 0x38
   20534:	cmp	r3, #0
   20538:	beq	203c8 <_obstack_memory_used@@Base+0x9f4>
   2053c:	ldr	r3, [sp, #32]
   20540:	cmp	r3, #0
   20544:	bne	20d50 <_obstack_memory_used@@Base+0x137c>
   20548:	ldr	r3, [sp, #44]	; 0x2c
   2054c:	eor	r3, r3, #1
   20550:	cmp	sl, #2
   20554:	movne	r3, #0
   20558:	andeq	r3, r3, #1
   2055c:	cmp	r3, #0
   20560:	beq	205a4 <_obstack_memory_used@@Base+0xbd0>
   20564:	cmp	r7, fp
   20568:	ldrhi	r2, [sp, #36]	; 0x24
   2056c:	movhi	r1, #39	; 0x27
   20570:	strbhi	r1, [r2, fp]
   20574:	add	r2, fp, #1
   20578:	cmp	r7, r2
   2057c:	ldrhi	r1, [sp, #36]	; 0x24
   20580:	movhi	r0, #36	; 0x24
   20584:	strbhi	r0, [r1, r2]
   20588:	add	r2, fp, #2
   2058c:	cmp	r7, r2
   20590:	ldrhi	r1, [sp, #36]	; 0x24
   20594:	movhi	r0, #39	; 0x27
   20598:	strbhi	r0, [r1, r2]
   2059c:	add	fp, fp, #3
   205a0:	str	r3, [sp, #44]	; 0x2c
   205a4:	cmp	r7, fp
   205a8:	ldrhi	r3, [sp, #36]	; 0x24
   205ac:	movhi	r2, #92	; 0x5c
   205b0:	strbhi	r2, [r3, fp]
   205b4:	add	fp, fp, #1
   205b8:	cmp	fp, r7
   205bc:	ldrcc	r3, [sp, #36]	; 0x24
   205c0:	strbcc	r4, [r3, fp]
   205c4:	add	fp, fp, #1
   205c8:	ldr	r3, [sp, #40]	; 0x28
   205cc:	cmp	r8, #0
   205d0:	moveq	r3, #0
   205d4:	str	r3, [sp, #40]	; 0x28
   205d8:	add	r6, r6, #1
   205dc:	ldr	r3, [sp, #28]
   205e0:	cmn	r3, #1
   205e4:	beq	20b70 <_obstack_memory_used@@Base+0x119c>
   205e8:	ldr	r3, [sp, #28]
   205ec:	subs	r8, r3, r6
   205f0:	movne	r8, #1
   205f4:	cmp	r8, #0
   205f8:	beq	20b84 <_obstack_memory_used@@Base+0x11b0>
   205fc:	ldr	r5, [sp, #48]	; 0x30
   20600:	cmp	sl, #2
   20604:	moveq	r5, #0
   20608:	andne	r5, r5, #1
   2060c:	ldr	r3, [sp, #60]	; 0x3c
   20610:	adds	r9, r3, #0
   20614:	movne	r9, #1
   20618:	ands	r2, r5, r9
   2061c:	str	r2, [sp, #56]	; 0x38
   20620:	beq	1fee8 <_obstack_memory_used@@Base+0x514>
   20624:	add	r4, r6, r3
   20628:	ldr	r2, [sp, #28]
   2062c:	cmp	r3, #1
   20630:	movls	r3, #0
   20634:	movhi	r3, #1
   20638:	cmn	r2, #1
   2063c:	movne	r3, #0
   20640:	cmp	r3, #0
   20644:	beq	20654 <_obstack_memory_used@@Base+0xc80>
   20648:	ldr	r0, [sp, #52]	; 0x34
   2064c:	bl	11b94 <strlen@plt>
   20650:	str	r0, [sp, #28]
   20654:	ldr	r3, [sp, #28]
   20658:	cmp	r3, r4
   2065c:	bcc	1fee0 <_obstack_memory_used@@Base+0x50c>
   20660:	ldr	r2, [sp, #60]	; 0x3c
   20664:	ldr	r1, [sp, #72]	; 0x48
   20668:	ldr	r3, [sp, #52]	; 0x34
   2066c:	add	r0, r3, r6
   20670:	bl	1196c <memcmp@plt>
   20674:	cmp	r0, #0
   20678:	bne	20100 <_obstack_memory_used@@Base+0x72c>
   2067c:	ldr	r3, [sp, #32]
   20680:	cmp	r3, #0
   20684:	beq	1fee8 <_obstack_memory_used@@Base+0x514>
   20688:	mov	r8, sl
   2068c:	mov	sl, r7
   20690:	b	20ce0 <_obstack_memory_used@@Base+0x130c>
   20694:	mov	r8, sl
   20698:	mov	sl, r7
   2069c:	b	20ce0 <_obstack_memory_used@@Base+0x130c>
   206a0:	cmp	sl, #2
   206a4:	strne	r8, [sp, #80]	; 0x50
   206a8:	movne	r5, #0
   206ac:	bne	204e4 <_obstack_memory_used@@Base+0xb10>
   206b0:	ldr	r3, [sp, #32]
   206b4:	cmp	r3, #0
   206b8:	bne	20ccc <_obstack_memory_used@@Base+0x12f8>
   206bc:	ldr	r2, [sp, #76]	; 0x4c
   206c0:	adds	r3, r7, #0
   206c4:	movne	r3, #1
   206c8:	cmp	r2, #0
   206cc:	movne	r3, #0
   206d0:	cmp	r3, #0
   206d4:	movne	r3, #0
   206d8:	bne	20708 <_obstack_memory_used@@Base+0xd34>
   206dc:	cmp	r7, fp
   206e0:	ldrhi	r3, [sp, #36]	; 0x24
   206e4:	movhi	r2, #39	; 0x27
   206e8:	strbhi	r2, [r3, fp]
   206ec:	add	r3, fp, #1
   206f0:	cmp	r7, r3
   206f4:	ldrhi	r2, [sp, #36]	; 0x24
   206f8:	movhi	r1, #92	; 0x5c
   206fc:	strbhi	r1, [r2, r3]
   20700:	mov	r3, r7
   20704:	ldr	r7, [sp, #76]	; 0x4c
   20708:	add	r2, fp, #2
   2070c:	cmp	r2, r3
   20710:	ldrcc	r1, [sp, #36]	; 0x24
   20714:	movcc	r0, #39	; 0x27
   20718:	strbcc	r0, [r1, r2]
   2071c:	add	fp, fp, #3
   20720:	ldr	r2, [sp, #32]
   20724:	mov	r5, r2
   20728:	str	r8, [sp, #80]	; 0x50
   2072c:	str	r2, [sp, #44]	; 0x2c
   20730:	str	r7, [sp, #76]	; 0x4c
   20734:	mov	r7, r3
   20738:	b	204e4 <_obstack_memory_used@@Base+0xb10>
   2073c:	ldr	r5, [sp, #84]	; 0x54
   20740:	cmp	r5, #1
   20744:	beq	20774 <_obstack_memory_used@@Base+0xda0>
   20748:	mov	r3, #0
   2074c:	str	r3, [sp, #104]	; 0x68
   20750:	str	r3, [sp, #108]	; 0x6c
   20754:	ldr	r3, [sp, #28]
   20758:	cmn	r3, #1
   2075c:	beq	207a8 <_obstack_memory_used@@Base+0xdd4>
   20760:	mov	r3, #0
   20764:	str	r4, [sp, #88]	; 0x58
   20768:	str	fp, [sp, #92]	; 0x5c
   2076c:	mov	fp, r3
   20770:	b	208d0 <_obstack_memory_used@@Base+0xefc>
   20774:	bl	11b58 <__ctype_b_loc@plt>
   20778:	ldr	r2, [r0]
   2077c:	lsl	r3, r4, #1
   20780:	ldrh	r8, [r2, r3]
   20784:	lsr	r8, r8, #14
   20788:	and	r8, r8, #1
   2078c:	mov	r2, r5
   20790:	eor	r5, r8, #1
   20794:	ldr	r3, [sp, #48]	; 0x30
   20798:	and	r5, r5, r3
   2079c:	ands	r5, r5, #255	; 0xff
   207a0:	beq	204e4 <_obstack_memory_used@@Base+0xb10>
   207a4:	b	20968 <_obstack_memory_used@@Base+0xf94>
   207a8:	ldr	r0, [sp, #52]	; 0x34
   207ac:	bl	11b94 <strlen@plt>
   207b0:	str	r0, [sp, #28]
   207b4:	b	20760 <_obstack_memory_used@@Base+0xd8c>
   207b8:	mov	r2, fp
   207bc:	mov	r1, r4
   207c0:	ldr	r4, [sp, #88]	; 0x58
   207c4:	ldr	fp, [sp, #92]	; 0x5c
   207c8:	ldr	r0, [sp, #28]
   207cc:	cmp	r0, r5
   207d0:	bls	2099c <_obstack_memory_used@@Base+0xfc8>
   207d4:	ldrb	r3, [r1]
   207d8:	cmp	r3, #0
   207dc:	beq	209a4 <_obstack_memory_used@@Base+0xfd0>
   207e0:	mov	r3, r1
   207e4:	add	r2, r2, #1
   207e8:	add	r1, r6, r2
   207ec:	cmp	r0, r1
   207f0:	bls	209ac <_obstack_memory_used@@Base+0xfd8>
   207f4:	ldrb	r1, [r3, #1]!
   207f8:	cmp	r1, #0
   207fc:	bne	207e4 <_obstack_memory_used@@Base+0xe10>
   20800:	mov	r8, #0
   20804:	b	20960 <_obstack_memory_used@@Base+0xf8c>
   20808:	cmp	r4, r5
   2080c:	beq	208ac <_obstack_memory_used@@Base+0xed8>
   20810:	ldrb	r3, [r4, #1]!
   20814:	sub	r3, r3, #91	; 0x5b
   20818:	cmp	r3, #33	; 0x21
   2081c:	ldrls	pc, [pc, r3, lsl #2]
   20820:	b	20808 <_obstack_memory_used@@Base+0xe34>
   20824:	ldrdeq	r0, [r2], -r8
   20828:	ldrdeq	r0, [r2], -r8
   2082c:	andeq	r0, r2, r8, lsl #16
   20830:	ldrdeq	r0, [r2], -r8
   20834:	andeq	r0, r2, r8, lsl #16
   20838:	ldrdeq	r0, [r2], -r8
   2083c:	andeq	r0, r2, r8, lsl #16
   20840:	andeq	r0, r2, r8, lsl #16
   20844:	andeq	r0, r2, r8, lsl #16
   20848:	andeq	r0, r2, r8, lsl #16
   2084c:	andeq	r0, r2, r8, lsl #16
   20850:	andeq	r0, r2, r8, lsl #16
   20854:	andeq	r0, r2, r8, lsl #16
   20858:	andeq	r0, r2, r8, lsl #16
   2085c:	andeq	r0, r2, r8, lsl #16
   20860:	andeq	r0, r2, r8, lsl #16
   20864:	andeq	r0, r2, r8, lsl #16
   20868:	andeq	r0, r2, r8, lsl #16
   2086c:	andeq	r0, r2, r8, lsl #16
   20870:	andeq	r0, r2, r8, lsl #16
   20874:	andeq	r0, r2, r8, lsl #16
   20878:	andeq	r0, r2, r8, lsl #16
   2087c:	andeq	r0, r2, r8, lsl #16
   20880:	andeq	r0, r2, r8, lsl #16
   20884:	andeq	r0, r2, r8, lsl #16
   20888:	andeq	r0, r2, r8, lsl #16
   2088c:	andeq	r0, r2, r8, lsl #16
   20890:	andeq	r0, r2, r8, lsl #16
   20894:	andeq	r0, r2, r8, lsl #16
   20898:	andeq	r0, r2, r8, lsl #16
   2089c:	andeq	r0, r2, r8, lsl #16
   208a0:	andeq	r0, r2, r8, lsl #16
   208a4:	andeq	r0, r2, r8, lsl #16
   208a8:	ldrdeq	r0, [r2], -r8
   208ac:	ldr	r0, [sp, #100]	; 0x64
   208b0:	bl	119f0 <iswprint@plt>
   208b4:	cmp	r0, #0
   208b8:	moveq	r8, #0
   208bc:	add	fp, fp, r9
   208c0:	add	r0, sp, #104	; 0x68
   208c4:	bl	11948 <mbsinit@plt>
   208c8:	cmp	r0, #0
   208cc:	bne	20940 <_obstack_memory_used@@Base+0xf6c>
   208d0:	add	r5, r6, fp
   208d4:	ldr	r3, [sp, #52]	; 0x34
   208d8:	add	r4, r3, r5
   208dc:	add	r3, sp, #104	; 0x68
   208e0:	ldr	r2, [sp, #28]
   208e4:	sub	r2, r2, r5
   208e8:	mov	r1, r4
   208ec:	add	r0, sp, #100	; 0x64
   208f0:	bl	1d400 <__assert_fail@plt+0xb68c>
   208f4:	subs	r9, r0, #0
   208f8:	beq	209b4 <_obstack_memory_used@@Base+0xfe0>
   208fc:	cmn	r9, #1
   20900:	beq	20950 <_obstack_memory_used@@Base+0xf7c>
   20904:	cmn	r9, #2
   20908:	beq	207b8 <_obstack_memory_used@@Base+0xde4>
   2090c:	ldr	r3, [sp, #32]
   20910:	cmp	sl, #2
   20914:	movne	r3, #0
   20918:	andeq	r3, r3, #1
   2091c:	cmp	r3, #0
   20920:	beq	208ac <_obstack_memory_used@@Base+0xed8>
   20924:	cmp	r9, #1
   20928:	bls	208ac <_obstack_memory_used@@Base+0xed8>
   2092c:	sub	r3, r9, #1
   20930:	add	r5, r3, r5
   20934:	ldr	r3, [sp, #52]	; 0x34
   20938:	add	r5, r3, r5
   2093c:	b	20810 <_obstack_memory_used@@Base+0xe3c>
   20940:	ldr	r4, [sp, #88]	; 0x58
   20944:	mov	r2, fp
   20948:	ldr	fp, [sp, #92]	; 0x5c
   2094c:	b	20960 <_obstack_memory_used@@Base+0xf8c>
   20950:	ldr	r4, [sp, #88]	; 0x58
   20954:	mov	r2, fp
   20958:	ldr	fp, [sp, #92]	; 0x5c
   2095c:	mov	r8, #0
   20960:	cmp	r2, #1
   20964:	bls	20790 <_obstack_memory_used@@Base+0xdbc>
   20968:	add	r1, r6, r2
   2096c:	ldr	ip, [sp, #64]	; 0x40
   20970:	mov	r5, #0
   20974:	eor	r3, r8, #1
   20978:	ldr	r2, [sp, #48]	; 0x30
   2097c:	and	r3, r3, r2
   20980:	uxtb	r3, r3
   20984:	ldr	r9, [sp, #32]
   20988:	ldr	lr, [sp, #44]	; 0x2c
   2098c:	ldr	r2, [sp, #56]	; 0x38
   20990:	str	r8, [sp, #56]	; 0x38
   20994:	ldr	r0, [sp, #36]	; 0x24
   20998:	b	20a34 <_obstack_memory_used@@Base+0x1060>
   2099c:	mov	r8, #0
   209a0:	b	20960 <_obstack_memory_used@@Base+0xf8c>
   209a4:	mov	r8, #0
   209a8:	b	20960 <_obstack_memory_used@@Base+0xf8c>
   209ac:	mov	r8, #0
   209b0:	b	20960 <_obstack_memory_used@@Base+0xf8c>
   209b4:	ldr	r4, [sp, #88]	; 0x58
   209b8:	mov	r2, fp
   209bc:	ldr	fp, [sp, #92]	; 0x5c
   209c0:	b	20960 <_obstack_memory_used@@Base+0xf8c>
   209c4:	cmp	r2, #0
   209c8:	beq	209dc <_obstack_memory_used@@Base+0x1008>
   209cc:	cmp	r7, fp
   209d0:	movhi	r2, #92	; 0x5c
   209d4:	strbhi	r2, [r0, fp]
   209d8:	add	fp, fp, #1
   209dc:	add	r8, r6, #1
   209e0:	cmp	r1, r8
   209e4:	bls	20aec <_obstack_memory_used@@Base+0x1118>
   209e8:	eor	r2, r5, #1
   209ec:	and	r2, r2, lr
   209f0:	ands	r2, r2, #255	; 0xff
   209f4:	beq	20b08 <_obstack_memory_used@@Base+0x1134>
   209f8:	cmp	r7, fp
   209fc:	movhi	r2, #39	; 0x27
   20a00:	strbhi	r2, [r0, fp]
   20a04:	add	r2, fp, #1
   20a08:	cmp	r7, r2
   20a0c:	movhi	lr, #39	; 0x27
   20a10:	strbhi	lr, [r0, r2]
   20a14:	add	fp, fp, #2
   20a18:	mov	r6, r8
   20a1c:	mov	r2, r3
   20a20:	mov	lr, r3
   20a24:	cmp	r7, fp
   20a28:	strbhi	r4, [r0, fp]
   20a2c:	add	fp, fp, #1
   20a30:	ldrb	r4, [ip, #1]!
   20a34:	cmp	r3, #0
   20a38:	beq	209c4 <_obstack_memory_used@@Base+0xff0>
   20a3c:	cmp	r9, #0
   20a40:	bne	20d44 <_obstack_memory_used@@Base+0x1370>
   20a44:	eor	r5, lr, #1
   20a48:	cmp	sl, #2
   20a4c:	movne	r5, #0
   20a50:	andeq	r5, r5, #1
   20a54:	cmp	r5, #0
   20a58:	beq	20a90 <_obstack_memory_used@@Base+0x10bc>
   20a5c:	cmp	r7, fp
   20a60:	movhi	lr, #39	; 0x27
   20a64:	strbhi	lr, [r0, fp]
   20a68:	add	lr, fp, #1
   20a6c:	cmp	r7, lr
   20a70:	movhi	r8, #36	; 0x24
   20a74:	strbhi	r8, [r0, lr]
   20a78:	add	lr, fp, #2
   20a7c:	cmp	r7, lr
   20a80:	movhi	r8, #39	; 0x27
   20a84:	strbhi	r8, [r0, lr]
   20a88:	add	fp, fp, #3
   20a8c:	mov	lr, r5
   20a90:	cmp	r7, fp
   20a94:	movhi	r5, #92	; 0x5c
   20a98:	strbhi	r5, [r0, fp]
   20a9c:	add	r5, fp, #1
   20aa0:	cmp	r7, r5
   20aa4:	lsrhi	r8, r4, #6
   20aa8:	addhi	r8, r8, #48	; 0x30
   20aac:	strbhi	r8, [r0, r5]
   20ab0:	add	r8, fp, #2
   20ab4:	cmp	r7, r8
   20ab8:	lsrhi	r5, r4, #3
   20abc:	andhi	r5, r5, #7
   20ac0:	addhi	r5, r5, #48	; 0x30
   20ac4:	strbhi	r5, [r0, r8]
   20ac8:	add	fp, fp, #3
   20acc:	and	r4, r4, #7
   20ad0:	add	r4, r4, #48	; 0x30
   20ad4:	add	r5, r6, #1
   20ad8:	cmp	r1, r5
   20adc:	bls	20af8 <_obstack_memory_used@@Base+0x1124>
   20ae0:	mov	r6, r5
   20ae4:	mov	r5, r3
   20ae8:	b	20a24 <_obstack_memory_used@@Base+0x1050>
   20aec:	str	lr, [sp, #44]	; 0x2c
   20af0:	ldr	r8, [sp, #56]	; 0x38
   20af4:	b	203c8 <_obstack_memory_used@@Base+0x9f4>
   20af8:	str	lr, [sp, #44]	; 0x2c
   20afc:	ldr	r8, [sp, #56]	; 0x38
   20b00:	mov	r5, r3
   20b04:	b	203c8 <_obstack_memory_used@@Base+0x9f4>
   20b08:	mov	r6, r8
   20b0c:	b	20a24 <_obstack_memory_used@@Base+0x1050>
   20b10:	mov	r5, #0
   20b14:	b	204e4 <_obstack_memory_used@@Base+0xb10>
   20b18:	mov	r8, r5
   20b1c:	ldr	r5, [sp, #48]	; 0x30
   20b20:	mov	r4, #48	; 0x30
   20b24:	b	204e4 <_obstack_memory_used@@Base+0xb10>
   20b28:	ldr	r8, [sp, #32]
   20b2c:	mov	r4, #48	; 0x30
   20b30:	b	204e4 <_obstack_memory_used@@Base+0xb10>
   20b34:	ldr	r8, [sp, #32]
   20b38:	mov	r4, #48	; 0x30
   20b3c:	b	204e4 <_obstack_memory_used@@Base+0xb10>
   20b40:	mov	r8, #0
   20b44:	mov	r5, r8
   20b48:	b	204e4 <_obstack_memory_used@@Base+0xb10>
   20b4c:	mov	r8, #0
   20b50:	mov	r5, r8
   20b54:	b	204e4 <_obstack_memory_used@@Base+0xb10>
   20b58:	mov	r8, #0
   20b5c:	mov	r5, r8
   20b60:	b	204e4 <_obstack_memory_used@@Base+0xb10>
   20b64:	mov	r8, #0
   20b68:	mov	r5, r8
   20b6c:	b	204e4 <_obstack_memory_used@@Base+0xb10>
   20b70:	ldr	r3, [sp, #52]	; 0x34
   20b74:	ldrb	r8, [r3, r6]
   20b78:	adds	r8, r8, #0
   20b7c:	movne	r8, #1
   20b80:	b	205f4 <_obstack_memory_used@@Base+0xc20>
   20b84:	cmp	sl, #2
   20b88:	movne	r3, #0
   20b8c:	moveq	r3, #1
   20b90:	ldr	r1, [sp, #32]
   20b94:	mov	r2, r1
   20b98:	and	r2, r2, r3
   20b9c:	cmp	fp, #0
   20ba0:	movne	r2, #0
   20ba4:	andeq	r2, r2, #1
   20ba8:	cmp	r2, #0
   20bac:	bne	20d5c <_obstack_memory_used@@Base+0x1388>
   20bb0:	eor	r2, r1, #1
   20bb4:	and	r3, r3, r2
   20bb8:	ldr	r1, [sp, #80]	; 0x50
   20bbc:	tst	r1, r3
   20bc0:	beq	20c38 <_obstack_memory_used@@Base+0x1264>
   20bc4:	ldr	r3, [sp, #40]	; 0x28
   20bc8:	cmp	r3, #0
   20bcc:	bne	20bf4 <_obstack_memory_used@@Base+0x1220>
   20bd0:	ldr	r1, [sp, #76]	; 0x4c
   20bd4:	clz	r3, r7
   20bd8:	lsr	r3, r3, #5
   20bdc:	cmp	r1, #0
   20be0:	moveq	r3, #0
   20be4:	cmp	r3, #0
   20be8:	beq	20c38 <_obstack_memory_used@@Base+0x1264>
   20bec:	ldr	r7, [sp, #76]	; 0x4c
   20bf0:	b	1fc88 <_obstack_memory_used@@Base+0x2b4>
   20bf4:	ldr	r3, [sp, #168]	; 0xa8
   20bf8:	str	r3, [sp, #16]
   20bfc:	ldr	r3, [sp, #164]	; 0xa4
   20c00:	str	r3, [sp, #12]
   20c04:	ldr	r3, [sp, #160]	; 0xa0
   20c08:	str	r3, [sp, #8]
   20c0c:	ldr	r3, [sp, #156]	; 0x9c
   20c10:	str	r3, [sp, #4]
   20c14:	mov	r3, #5
   20c18:	str	r3, [sp]
   20c1c:	ldr	r3, [sp, #28]
   20c20:	ldr	r2, [sp, #52]	; 0x34
   20c24:	ldr	r1, [sp, #76]	; 0x4c
   20c28:	ldr	r0, [sp, #36]	; 0x24
   20c2c:	bl	1fc28 <_obstack_memory_used@@Base+0x254>
   20c30:	mov	fp, r0
   20c34:	b	20d38 <_obstack_memory_used@@Base+0x1364>
   20c38:	mov	sl, r7
   20c3c:	ldr	r3, [sp, #72]	; 0x48
   20c40:	cmp	r3, #0
   20c44:	moveq	r2, #0
   20c48:	andne	r2, r2, #1
   20c4c:	cmp	r2, #0
   20c50:	beq	20c80 <_obstack_memory_used@@Base+0x12ac>
   20c54:	mov	r2, r3
   20c58:	ldrb	r3, [r3]
   20c5c:	cmp	r3, #0
   20c60:	beq	20c80 <_obstack_memory_used@@Base+0x12ac>
   20c64:	ldr	r1, [sp, #36]	; 0x24
   20c68:	cmp	sl, fp
   20c6c:	strbhi	r3, [r1, fp]
   20c70:	add	fp, fp, #1
   20c74:	ldrb	r3, [r2, #1]!
   20c78:	cmp	r3, #0
   20c7c:	bne	20c68 <_obstack_memory_used@@Base+0x1294>
   20c80:	cmp	sl, fp
   20c84:	movhi	r3, #0
   20c88:	ldrhi	r2, [sp, #36]	; 0x24
   20c8c:	strbhi	r3, [r2, fp]
   20c90:	b	20d38 <_obstack_memory_used@@Base+0x1364>
   20c94:	mov	r8, sl
   20c98:	mov	sl, r7
   20c9c:	ldr	r3, [sp, #32]
   20ca0:	str	r3, [sp, #48]	; 0x30
   20ca4:	b	20ce0 <_obstack_memory_used@@Base+0x130c>
   20ca8:	mov	r8, sl
   20cac:	mov	sl, r7
   20cb0:	b	20ce0 <_obstack_memory_used@@Base+0x130c>
   20cb4:	mov	r8, sl
   20cb8:	mov	sl, r7
   20cbc:	b	20ce0 <_obstack_memory_used@@Base+0x130c>
   20cc0:	andeq	r8, r2, r8, asr #4
   20cc4:	andeq	r8, r2, r8, asr r2
   20cc8:	andeq	r8, r2, ip, asr #4
   20ccc:	mov	r8, sl
   20cd0:	mov	sl, r7
   20cd4:	b	20ce0 <_obstack_memory_used@@Base+0x130c>
   20cd8:	mov	r8, sl
   20cdc:	mov	sl, r7
   20ce0:	ldr	r3, [sp, #48]	; 0x30
   20ce4:	cmp	r8, #2
   20ce8:	movne	r3, #0
   20cec:	andeq	r3, r3, #1
   20cf0:	cmp	r3, #0
   20cf4:	movne	r8, #4
   20cf8:	ldr	r3, [sp, #168]	; 0xa8
   20cfc:	str	r3, [sp, #16]
   20d00:	ldr	r3, [sp, #164]	; 0xa4
   20d04:	str	r3, [sp, #12]
   20d08:	mov	r3, #0
   20d0c:	str	r3, [sp, #8]
   20d10:	ldr	r3, [sp, #156]	; 0x9c
   20d14:	bic	r3, r3, #2
   20d18:	str	r3, [sp, #4]
   20d1c:	str	r8, [sp]
   20d20:	ldr	r3, [sp, #28]
   20d24:	ldr	r2, [sp, #52]	; 0x34
   20d28:	mov	r1, sl
   20d2c:	ldr	r0, [sp, #36]	; 0x24
   20d30:	bl	1fc28 <_obstack_memory_used@@Base+0x254>
   20d34:	mov	fp, r0
   20d38:	mov	r0, fp
   20d3c:	add	sp, sp, #116	; 0x74
   20d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d44:	mov	r8, sl
   20d48:	mov	sl, r7
   20d4c:	b	20ce0 <_obstack_memory_used@@Base+0x130c>
   20d50:	mov	r8, sl
   20d54:	mov	sl, r7
   20d58:	b	20ce0 <_obstack_memory_used@@Base+0x130c>
   20d5c:	mov	r8, sl
   20d60:	mov	sl, r7
   20d64:	b	20ce0 <_obstack_memory_used@@Base+0x130c>
   20d68:	mov	r8, sl
   20d6c:	mov	sl, r7
   20d70:	b	20cf8 <_obstack_memory_used@@Base+0x1324>
   20d74:	mov	r3, #1
   20d78:	str	r3, [sp, #32]
   20d7c:	str	r3, [sp, #48]	; 0x30
   20d80:	str	r3, [sp, #60]	; 0x3c
   20d84:	ldr	r3, [pc, #-196]	; 20cc8 <_obstack_memory_used@@Base+0x12f4>
   20d88:	str	r3, [sp, #72]	; 0x48
   20d8c:	mov	fp, #0
   20d90:	mov	sl, #5
   20d94:	b	1fce4 <_obstack_memory_used@@Base+0x310>
   20d98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d9c:	sub	sp, sp, #52	; 0x34
   20da0:	mov	r5, r0
   20da4:	str	r1, [sp, #24]
   20da8:	str	r2, [sp, #28]
   20dac:	mov	r4, r3
   20db0:	bl	11bb8 <__errno_location@plt>
   20db4:	str	r0, [sp, #32]
   20db8:	ldr	r3, [r0]
   20dbc:	str	r3, [sp, #36]	; 0x24
   20dc0:	ldr	r3, [pc, #396]	; 20f54 <_obstack_memory_used@@Base+0x1580>
   20dc4:	ldr	r6, [r3]
   20dc8:	cmn	r5, #-2147483647	; 0x80000001
   20dcc:	movne	r3, #0
   20dd0:	moveq	r3, #1
   20dd4:	orrs	r3, r3, r5, lsr #31
   20dd8:	bne	20f18 <_obstack_memory_used@@Base+0x1544>
   20ddc:	ldr	r3, [pc, #368]	; 20f54 <_obstack_memory_used@@Base+0x1580>
   20de0:	ldr	r2, [r3, #4]
   20de4:	cmp	r5, r2
   20de8:	blt	20e50 <_obstack_memory_used@@Base+0x147c>
   20dec:	str	r2, [sp, #44]	; 0x2c
   20df0:	add	r3, r3, #8
   20df4:	cmp	r6, r3
   20df8:	beq	20f1c <_obstack_memory_used@@Base+0x1548>
   20dfc:	sub	r2, r5, r2
   20e00:	mov	r3, #8
   20e04:	str	r3, [sp]
   20e08:	mvn	r3, #-2147483648	; 0x80000000
   20e0c:	add	r2, r2, #1
   20e10:	add	r1, sp, #44	; 0x2c
   20e14:	mov	r0, r6
   20e18:	bl	22428 <_obstack_memory_used@@Base+0x2a54>
   20e1c:	mov	r6, r0
   20e20:	ldr	r3, [pc, #300]	; 20f54 <_obstack_memory_used@@Base+0x1580>
   20e24:	str	r0, [r3]
   20e28:	ldr	r7, [pc, #292]	; 20f54 <_obstack_memory_used@@Base+0x1580>
   20e2c:	ldr	r0, [r7, #4]
   20e30:	ldr	r2, [sp, #44]	; 0x2c
   20e34:	sub	r2, r2, r0
   20e38:	lsl	r2, r2, #3
   20e3c:	mov	r1, #0
   20e40:	add	r0, r6, r0, lsl #3
   20e44:	bl	11be8 <memset@plt>
   20e48:	ldr	r3, [sp, #44]	; 0x2c
   20e4c:	str	r3, [r7, #4]
   20e50:	add	fp, r6, r5, lsl #3
   20e54:	ldr	r8, [r6, r5, lsl #3]
   20e58:	ldr	r7, [fp, #4]
   20e5c:	ldr	r9, [r4, #4]
   20e60:	orr	r9, r9, #1
   20e64:	add	sl, r4, #8
   20e68:	ldr	r3, [r4, #44]	; 0x2c
   20e6c:	str	r3, [sp, #16]
   20e70:	ldr	r3, [r4, #40]	; 0x28
   20e74:	str	r3, [sp, #12]
   20e78:	str	sl, [sp, #8]
   20e7c:	str	r9, [sp, #4]
   20e80:	ldr	r3, [r4]
   20e84:	str	r3, [sp]
   20e88:	ldr	r3, [sp, #28]
   20e8c:	ldr	r2, [sp, #24]
   20e90:	mov	r1, r8
   20e94:	mov	r0, r7
   20e98:	bl	1fc28 <_obstack_memory_used@@Base+0x254>
   20e9c:	cmp	r8, r0
   20ea0:	bhi	20f00 <_obstack_memory_used@@Base+0x152c>
   20ea4:	add	r8, r0, #1
   20ea8:	str	r8, [r6, r5, lsl #3]
   20eac:	ldr	r3, [pc, #164]	; 20f58 <_obstack_memory_used@@Base+0x1584>
   20eb0:	cmp	r7, r3
   20eb4:	beq	20ec0 <_obstack_memory_used@@Base+0x14ec>
   20eb8:	mov	r0, r7
   20ebc:	bl	1b388 <__assert_fail@plt+0x9614>
   20ec0:	mov	r0, r8
   20ec4:	bl	222a4 <_obstack_memory_used@@Base+0x28d0>
   20ec8:	mov	r7, r0
   20ecc:	str	r0, [fp, #4]
   20ed0:	ldr	r3, [r4, #44]	; 0x2c
   20ed4:	str	r3, [sp, #16]
   20ed8:	ldr	r3, [r4, #40]	; 0x28
   20edc:	str	r3, [sp, #12]
   20ee0:	str	sl, [sp, #8]
   20ee4:	str	r9, [sp, #4]
   20ee8:	ldr	r3, [r4]
   20eec:	str	r3, [sp]
   20ef0:	ldr	r3, [sp, #28]
   20ef4:	ldr	r2, [sp, #24]
   20ef8:	mov	r1, r8
   20efc:	bl	1fc28 <_obstack_memory_used@@Base+0x254>
   20f00:	ldr	r3, [sp, #32]
   20f04:	ldr	r2, [sp, #36]	; 0x24
   20f08:	str	r2, [r3]
   20f0c:	mov	r0, r7
   20f10:	add	sp, sp, #52	; 0x34
   20f14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f18:	bl	11d2c <abort@plt>
   20f1c:	sub	r2, r5, r2
   20f20:	mov	r3, #8
   20f24:	str	r3, [sp]
   20f28:	mvn	r3, #-2147483648	; 0x80000000
   20f2c:	add	r2, r2, #1
   20f30:	add	r1, sp, #44	; 0x2c
   20f34:	mov	r0, #0
   20f38:	bl	22428 <_obstack_memory_used@@Base+0x2a54>
   20f3c:	mov	r6, r0
   20f40:	ldr	r3, [pc, #12]	; 20f54 <_obstack_memory_used@@Base+0x1580>
   20f44:	str	r0, [r3], #8
   20f48:	ldm	r3, {r0, r1}
   20f4c:	stm	r6, {r0, r1}
   20f50:	b	20e28 <_obstack_memory_used@@Base+0x1454>
   20f54:	andeq	r9, r3, ip, asr #5
   20f58:	andeq	sl, r3, r8, ror #7
   20f5c:	push	{r4, r5, r6, lr}
   20f60:	mov	r4, r0
   20f64:	bl	11bb8 <__errno_location@plt>
   20f68:	mov	r5, r0
   20f6c:	ldr	r6, [r0]
   20f70:	cmp	r4, #0
   20f74:	ldr	r3, [pc, #20]	; 20f90 <_obstack_memory_used@@Base+0x15bc>
   20f78:	moveq	r4, r3
   20f7c:	mov	r1, #48	; 0x30
   20f80:	mov	r0, r4
   20f84:	bl	22790 <_obstack_memory_used@@Base+0x2dbc>
   20f88:	str	r6, [r5]
   20f8c:	pop	{r4, r5, r6, pc}
   20f90:	andeq	sl, r3, r8, ror #9
   20f94:	subs	r3, r0, #0
   20f98:	ldr	r2, [pc, #8]	; 20fa8 <_obstack_memory_used@@Base+0x15d4>
   20f9c:	moveq	r3, r2
   20fa0:	ldr	r0, [r3]
   20fa4:	bx	lr
   20fa8:	andeq	sl, r3, r8, ror #9
   20fac:	subs	r3, r0, #0
   20fb0:	ldr	r2, [pc, #8]	; 20fc0 <_obstack_memory_used@@Base+0x15ec>
   20fb4:	moveq	r3, r2
   20fb8:	str	r1, [r3]
   20fbc:	bx	lr
   20fc0:	andeq	sl, r3, r8, ror #9
   20fc4:	push	{lr}		; (str lr, [sp, #-4]!)
   20fc8:	subs	r3, r0, #0
   20fcc:	ldr	r0, [pc, #44]	; 21000 <_obstack_memory_used@@Base+0x162c>
   20fd0:	moveq	r3, r0
   20fd4:	add	r3, r3, #8
   20fd8:	lsr	lr, r1, #5
   20fdc:	and	r1, r1, #31
   20fe0:	ldr	ip, [r3, lr, lsl #2]
   20fe4:	lsr	r0, ip, r1
   20fe8:	eor	r2, r2, r0
   20fec:	and	r2, r2, #1
   20ff0:	eor	r1, ip, r2, lsl r1
   20ff4:	str	r1, [r3, lr, lsl #2]
   20ff8:	and	r0, r0, #1
   20ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   21000:	andeq	sl, r3, r8, ror #9
   21004:	subs	r3, r0, #0
   21008:	ldr	r2, [pc, #12]	; 2101c <_obstack_memory_used@@Base+0x1648>
   2100c:	moveq	r3, r2
   21010:	ldr	r0, [r3, #4]
   21014:	str	r1, [r3, #4]
   21018:	bx	lr
   2101c:	andeq	sl, r3, r8, ror #9
   21020:	subs	r3, r0, #0
   21024:	ldr	r0, [pc, #40]	; 21054 <_obstack_memory_used@@Base+0x1680>
   21028:	moveq	r3, r0
   2102c:	mov	r0, #10
   21030:	str	r0, [r3]
   21034:	cmp	r2, #0
   21038:	cmpne	r1, #0
   2103c:	beq	2104c <_obstack_memory_used@@Base+0x1678>
   21040:	str	r1, [r3, #40]	; 0x28
   21044:	str	r2, [r3, #44]	; 0x2c
   21048:	bx	lr
   2104c:	push	{r4, lr}
   21050:	bl	11d2c <abort@plt>
   21054:	andeq	sl, r3, r8, ror #9
   21058:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2105c:	sub	sp, sp, #24
   21060:	mov	r7, r0
   21064:	mov	r8, r1
   21068:	mov	r9, r2
   2106c:	mov	sl, r3
   21070:	ldr	r4, [sp, #56]	; 0x38
   21074:	cmp	r4, #0
   21078:	ldr	r3, [pc, #84]	; 210d4 <_obstack_memory_used@@Base+0x1700>
   2107c:	moveq	r4, r3
   21080:	bl	11bb8 <__errno_location@plt>
   21084:	mov	r5, r0
   21088:	ldr	r6, [r0]
   2108c:	ldr	r3, [r4, #44]	; 0x2c
   21090:	str	r3, [sp, #16]
   21094:	ldr	r3, [r4, #40]	; 0x28
   21098:	str	r3, [sp, #12]
   2109c:	add	r3, r4, #8
   210a0:	str	r3, [sp, #8]
   210a4:	ldr	r3, [r4, #4]
   210a8:	str	r3, [sp, #4]
   210ac:	ldr	r3, [r4]
   210b0:	str	r3, [sp]
   210b4:	mov	r3, sl
   210b8:	mov	r2, r9
   210bc:	mov	r1, r8
   210c0:	mov	r0, r7
   210c4:	bl	1fc28 <_obstack_memory_used@@Base+0x254>
   210c8:	str	r6, [r5]
   210cc:	add	sp, sp, #24
   210d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   210d4:	andeq	sl, r3, r8, ror #9
   210d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210dc:	sub	sp, sp, #44	; 0x2c
   210e0:	str	r0, [sp, #28]
   210e4:	str	r1, [sp, #32]
   210e8:	mov	r6, r2
   210ec:	subs	r4, r3, #0
   210f0:	ldr	r3, [pc, #172]	; 211a4 <_obstack_memory_used@@Base+0x17d0>
   210f4:	moveq	r4, r3
   210f8:	bl	11bb8 <__errno_location@plt>
   210fc:	mov	r7, r0
   21100:	ldr	fp, [r0]
   21104:	ldr	r5, [r4, #4]
   21108:	cmp	r6, #0
   2110c:	orreq	r5, r5, #1
   21110:	add	r9, r4, #8
   21114:	ldr	r3, [r4, #44]	; 0x2c
   21118:	str	r3, [sp, #16]
   2111c:	ldr	r3, [r4, #40]	; 0x28
   21120:	str	r3, [sp, #12]
   21124:	str	r9, [sp, #8]
   21128:	str	r5, [sp, #4]
   2112c:	ldr	r3, [r4]
   21130:	str	r3, [sp]
   21134:	ldr	r3, [sp, #32]
   21138:	ldr	r2, [sp, #28]
   2113c:	mov	r1, #0
   21140:	mov	r0, r1
   21144:	bl	1fc28 <_obstack_memory_used@@Base+0x254>
   21148:	mov	sl, r0
   2114c:	add	r8, r0, #1
   21150:	mov	r0, r8
   21154:	bl	222a4 <_obstack_memory_used@@Base+0x28d0>
   21158:	str	r0, [sp, #36]	; 0x24
   2115c:	ldr	r3, [r4, #44]	; 0x2c
   21160:	str	r3, [sp, #16]
   21164:	ldr	r3, [r4, #40]	; 0x28
   21168:	str	r3, [sp, #12]
   2116c:	str	r9, [sp, #8]
   21170:	str	r5, [sp, #4]
   21174:	ldr	r3, [r4]
   21178:	str	r3, [sp]
   2117c:	ldr	r3, [sp, #32]
   21180:	ldr	r2, [sp, #28]
   21184:	mov	r1, r8
   21188:	bl	1fc28 <_obstack_memory_used@@Base+0x254>
   2118c:	str	fp, [r7]
   21190:	cmp	r6, #0
   21194:	strne	sl, [r6]
   21198:	ldr	r0, [sp, #36]	; 0x24
   2119c:	add	sp, sp, #44	; 0x2c
   211a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211a4:	andeq	sl, r3, r8, ror #9
   211a8:	push	{r4, lr}
   211ac:	mov	r3, r2
   211b0:	mov	r2, #0
   211b4:	bl	210d8 <_obstack_memory_used@@Base+0x1704>
   211b8:	pop	{r4, pc}
   211bc:	push	{r4, r5, r6, r7, r8, lr}
   211c0:	ldr	r3, [pc, #140]	; 21254 <_obstack_memory_used@@Base+0x1880>
   211c4:	ldr	r7, [r3]
   211c8:	ldr	r3, [r3, #4]
   211cc:	cmp	r3, #1
   211d0:	ble	211fc <_obstack_memory_used@@Base+0x1828>
   211d4:	mov	r5, r7
   211d8:	mov	r4, #1
   211dc:	ldr	r6, [pc, #112]	; 21254 <_obstack_memory_used@@Base+0x1880>
   211e0:	ldr	r0, [r5, #12]
   211e4:	bl	1b388 <__assert_fail@plt+0x9614>
   211e8:	add	r4, r4, #1
   211ec:	add	r5, r5, #8
   211f0:	ldr	r3, [r6, #4]
   211f4:	cmp	r3, r4
   211f8:	bgt	211e0 <_obstack_memory_used@@Base+0x180c>
   211fc:	ldr	r0, [r7, #4]
   21200:	ldr	r3, [pc, #80]	; 21258 <_obstack_memory_used@@Base+0x1884>
   21204:	cmp	r0, r3
   21208:	beq	21224 <_obstack_memory_used@@Base+0x1850>
   2120c:	bl	1b388 <__assert_fail@plt+0x9614>
   21210:	ldr	r3, [pc, #60]	; 21254 <_obstack_memory_used@@Base+0x1880>
   21214:	mov	r2, #256	; 0x100
   21218:	str	r2, [r3, #8]
   2121c:	ldr	r2, [pc, #52]	; 21258 <_obstack_memory_used@@Base+0x1884>
   21220:	str	r2, [r3, #12]
   21224:	ldr	r3, [pc, #48]	; 2125c <_obstack_memory_used@@Base+0x1888>
   21228:	cmp	r7, r3
   2122c:	beq	21244 <_obstack_memory_used@@Base+0x1870>
   21230:	mov	r0, r7
   21234:	bl	1b388 <__assert_fail@plt+0x9614>
   21238:	ldr	r3, [pc, #20]	; 21254 <_obstack_memory_used@@Base+0x1880>
   2123c:	add	r2, r3, #8
   21240:	str	r2, [r3]
   21244:	mov	r2, #1
   21248:	ldr	r3, [pc, #4]	; 21254 <_obstack_memory_used@@Base+0x1880>
   2124c:	str	r2, [r3, #4]
   21250:	pop	{r4, r5, r6, r7, r8, pc}
   21254:	andeq	r9, r3, ip, asr #5
   21258:	andeq	sl, r3, r8, ror #7
   2125c:	ldrdeq	r9, [r3], -r4
   21260:	push	{r4, lr}
   21264:	ldr	r3, [pc, #8]	; 21274 <_obstack_memory_used@@Base+0x18a0>
   21268:	mvn	r2, #0
   2126c:	bl	20d98 <_obstack_memory_used@@Base+0x13c4>
   21270:	pop	{r4, pc}
   21274:	andeq	sl, r3, r8, ror #9
   21278:	push	{r4, lr}
   2127c:	ldr	r3, [pc, #4]	; 21288 <_obstack_memory_used@@Base+0x18b4>
   21280:	bl	20d98 <_obstack_memory_used@@Base+0x13c4>
   21284:	pop	{r4, pc}
   21288:	andeq	sl, r3, r8, ror #9
   2128c:	push	{r4, lr}
   21290:	mov	r1, r0
   21294:	mov	r0, #0
   21298:	bl	21260 <_obstack_memory_used@@Base+0x188c>
   2129c:	pop	{r4, pc}
   212a0:	push	{r4, lr}
   212a4:	mov	r2, r1
   212a8:	mov	r1, r0
   212ac:	mov	r0, #0
   212b0:	bl	21278 <_obstack_memory_used@@Base+0x18a4>
   212b4:	pop	{r4, pc}
   212b8:	push	{r4, r5, lr}
   212bc:	sub	sp, sp, #52	; 0x34
   212c0:	mov	r4, r0
   212c4:	mov	r5, r2
   212c8:	mov	r0, sp
   212cc:	bl	1fac0 <_obstack_memory_used@@Base+0xec>
   212d0:	mov	r3, sp
   212d4:	mvn	r2, #0
   212d8:	mov	r1, r5
   212dc:	mov	r0, r4
   212e0:	bl	20d98 <_obstack_memory_used@@Base+0x13c4>
   212e4:	add	sp, sp, #52	; 0x34
   212e8:	pop	{r4, r5, pc}
   212ec:	push	{r4, r5, r6, lr}
   212f0:	sub	sp, sp, #48	; 0x30
   212f4:	mov	r4, r0
   212f8:	mov	r5, r2
   212fc:	mov	r6, r3
   21300:	mov	r0, sp
   21304:	bl	1fac0 <_obstack_memory_used@@Base+0xec>
   21308:	mov	r3, sp
   2130c:	mov	r2, r6
   21310:	mov	r1, r5
   21314:	mov	r0, r4
   21318:	bl	20d98 <_obstack_memory_used@@Base+0x13c4>
   2131c:	add	sp, sp, #48	; 0x30
   21320:	pop	{r4, r5, r6, pc}
   21324:	push	{r4, lr}
   21328:	mov	r2, r1
   2132c:	mov	r1, r0
   21330:	mov	r0, #0
   21334:	bl	212b8 <_obstack_memory_used@@Base+0x18e4>
   21338:	pop	{r4, pc}
   2133c:	push	{r4, lr}
   21340:	mov	r3, r2
   21344:	mov	r2, r1
   21348:	mov	r1, r0
   2134c:	mov	r0, #0
   21350:	bl	212ec <_obstack_memory_used@@Base+0x1918>
   21354:	pop	{r4, pc}
   21358:	push	{r4, r5, r6, lr}
   2135c:	sub	sp, sp, #48	; 0x30
   21360:	mov	r4, r0
   21364:	mov	r5, r1
   21368:	mov	r6, r2
   2136c:	mov	ip, sp
   21370:	ldr	lr, [pc, #64]	; 213b8 <_obstack_memory_used@@Base+0x19e4>
   21374:	ldm	lr!, {r0, r1, r2, r3}
   21378:	stmia	ip!, {r0, r1, r2, r3}
   2137c:	ldm	lr!, {r0, r1, r2, r3}
   21380:	stmia	ip!, {r0, r1, r2, r3}
   21384:	ldm	lr, {r0, r1, r2, r3}
   21388:	stm	ip, {r0, r1, r2, r3}
   2138c:	mov	r2, #1
   21390:	mov	r1, r6
   21394:	mov	r0, sp
   21398:	bl	20fc4 <_obstack_memory_used@@Base+0x15f0>
   2139c:	mov	r3, sp
   213a0:	mov	r2, r5
   213a4:	mov	r1, r4
   213a8:	mov	r0, #0
   213ac:	bl	20d98 <_obstack_memory_used@@Base+0x13c4>
   213b0:	add	sp, sp, #48	; 0x30
   213b4:	pop	{r4, r5, r6, pc}
   213b8:	andeq	sl, r3, r8, ror #9
   213bc:	push	{r4, lr}
   213c0:	mov	r2, r1
   213c4:	mvn	r1, #0
   213c8:	bl	21358 <_obstack_memory_used@@Base+0x1984>
   213cc:	pop	{r4, pc}
   213d0:	push	{r4, lr}
   213d4:	mov	r1, #58	; 0x3a
   213d8:	bl	213bc <_obstack_memory_used@@Base+0x19e8>
   213dc:	pop	{r4, pc}
   213e0:	push	{r4, lr}
   213e4:	mov	r2, #58	; 0x3a
   213e8:	bl	21358 <_obstack_memory_used@@Base+0x1984>
   213ec:	pop	{r4, pc}
   213f0:	push	{r4, r5, lr}
   213f4:	sub	sp, sp, #100	; 0x64
   213f8:	mov	r4, r0
   213fc:	mov	r5, r2
   21400:	mov	r0, sp
   21404:	bl	1fac0 <_obstack_memory_used@@Base+0xec>
   21408:	add	lr, sp, #48	; 0x30
   2140c:	mov	ip, sp
   21410:	ldm	ip!, {r0, r1, r2, r3}
   21414:	stmia	lr!, {r0, r1, r2, r3}
   21418:	ldm	ip!, {r0, r1, r2, r3}
   2141c:	stmia	lr!, {r0, r1, r2, r3}
   21420:	ldm	ip, {r0, r1, r2, r3}
   21424:	stm	lr, {r0, r1, r2, r3}
   21428:	mov	r2, #1
   2142c:	mov	r1, #58	; 0x3a
   21430:	add	r0, sp, #48	; 0x30
   21434:	bl	20fc4 <_obstack_memory_used@@Base+0x15f0>
   21438:	add	r3, sp, #48	; 0x30
   2143c:	mvn	r2, #0
   21440:	mov	r1, r5
   21444:	mov	r0, r4
   21448:	bl	20d98 <_obstack_memory_used@@Base+0x13c4>
   2144c:	add	sp, sp, #100	; 0x64
   21450:	pop	{r4, r5, pc}
   21454:	push	{r4, r5, r6, r7, lr}
   21458:	sub	sp, sp, #52	; 0x34
   2145c:	mov	r4, r0
   21460:	mov	r6, r1
   21464:	mov	r7, r2
   21468:	mov	r5, r3
   2146c:	mov	ip, sp
   21470:	ldr	lr, [pc, #64]	; 214b8 <_obstack_memory_used@@Base+0x1ae4>
   21474:	ldm	lr!, {r0, r1, r2, r3}
   21478:	stmia	ip!, {r0, r1, r2, r3}
   2147c:	ldm	lr!, {r0, r1, r2, r3}
   21480:	stmia	ip!, {r0, r1, r2, r3}
   21484:	ldm	lr, {r0, r1, r2, r3}
   21488:	stm	ip, {r0, r1, r2, r3}
   2148c:	mov	r2, r7
   21490:	mov	r1, r6
   21494:	mov	r0, sp
   21498:	bl	21020 <_obstack_memory_used@@Base+0x164c>
   2149c:	mov	r3, sp
   214a0:	ldr	r2, [sp, #72]	; 0x48
   214a4:	mov	r1, r5
   214a8:	mov	r0, r4
   214ac:	bl	20d98 <_obstack_memory_used@@Base+0x13c4>
   214b0:	add	sp, sp, #52	; 0x34
   214b4:	pop	{r4, r5, r6, r7, pc}
   214b8:	andeq	sl, r3, r8, ror #9
   214bc:	push	{lr}		; (str lr, [sp, #-4]!)
   214c0:	sub	sp, sp, #12
   214c4:	mvn	ip, #0
   214c8:	str	ip, [sp]
   214cc:	bl	21454 <_obstack_memory_used@@Base+0x1a80>
   214d0:	add	sp, sp, #12
   214d4:	pop	{pc}		; (ldr pc, [sp], #4)
   214d8:	push	{r4, lr}
   214dc:	mov	r3, r2
   214e0:	mov	r2, r1
   214e4:	mov	r1, r0
   214e8:	mov	r0, #0
   214ec:	bl	214bc <_obstack_memory_used@@Base+0x1ae8>
   214f0:	pop	{r4, pc}
   214f4:	push	{lr}		; (str lr, [sp, #-4]!)
   214f8:	sub	sp, sp, #12
   214fc:	str	r3, [sp]
   21500:	mov	r3, r2
   21504:	mov	r2, r1
   21508:	mov	r1, r0
   2150c:	mov	r0, #0
   21510:	bl	21454 <_obstack_memory_used@@Base+0x1a80>
   21514:	add	sp, sp, #12
   21518:	pop	{pc}		; (ldr pc, [sp], #4)
   2151c:	push	{r4, lr}
   21520:	ldr	r3, [pc, #4]	; 2152c <_obstack_memory_used@@Base+0x1b58>
   21524:	bl	20d98 <_obstack_memory_used@@Base+0x13c4>
   21528:	pop	{r4, pc}
   2152c:	ldrdeq	r9, [r3], -ip
   21530:	push	{r4, lr}
   21534:	mov	r2, r1
   21538:	mov	r1, r0
   2153c:	mov	r0, #0
   21540:	bl	2151c <_obstack_memory_used@@Base+0x1b48>
   21544:	pop	{r4, pc}
   21548:	push	{r4, lr}
   2154c:	mvn	r2, #0
   21550:	bl	2151c <_obstack_memory_used@@Base+0x1b48>
   21554:	pop	{r4, pc}
   21558:	push	{r4, lr}
   2155c:	mov	r1, r0
   21560:	mov	r0, #0
   21564:	bl	21548 <_obstack_memory_used@@Base+0x1b74>
   21568:	pop	{r4, pc}
   2156c:	push	{r4, r5, r6, lr}
   21570:	mov	r5, r1
   21574:	ldr	r4, [r0], #8
   21578:	cmp	r4, r0
   2157c:	beq	21594 <_obstack_memory_used@@Base+0x1bc0>
   21580:	mov	r0, r4
   21584:	bl	23164 <_obstack_memory_used@@Base+0x3790>
   21588:	cmp	r0, #0
   2158c:	moveq	r0, r4
   21590:	pop	{r4, r5, r6, pc}
   21594:	mov	r0, r1
   21598:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   2159c:	cmp	r0, #0
   215a0:	popeq	{r4, r5, r6, pc}
   215a4:	mov	r2, r5
   215a8:	mov	r1, r4
   215ac:	bl	11930 <memcpy@plt>
   215b0:	pop	{r4, r5, r6, pc}
   215b4:	push	{r4, r5, r6, lr}
   215b8:	mov	r4, r0
   215bc:	ldr	r5, [r0, #4]
   215c0:	lsl	r5, r5, #1
   215c4:	mov	r6, r0
   215c8:	ldr	r0, [r6], #8
   215cc:	cmp	r0, r6
   215d0:	beq	215d8 <_obstack_memory_used@@Base+0x1c04>
   215d4:	bl	1b388 <__assert_fail@plt+0x9614>
   215d8:	ldr	r3, [r4, #4]
   215dc:	cmp	r5, r3
   215e0:	bcc	21604 <_obstack_memory_used@@Base+0x1c30>
   215e4:	mov	r0, r5
   215e8:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   215ec:	cmp	r0, #0
   215f0:	beq	21610 <_obstack_memory_used@@Base+0x1c3c>
   215f4:	str	r0, [r4]
   215f8:	str	r5, [r4, #4]
   215fc:	mov	r0, #1
   21600:	pop	{r4, r5, r6, pc}
   21604:	bl	11bb8 <__errno_location@plt>
   21608:	mov	r3, #12
   2160c:	str	r3, [r0]
   21610:	str	r6, [r4]
   21614:	mov	r3, #1024	; 0x400
   21618:	str	r3, [r4, #4]
   2161c:	mov	r0, #0
   21620:	pop	{r4, r5, r6, pc}
   21624:	push	{r4, r5, r6, r7, r8, lr}
   21628:	mov	r4, r0
   2162c:	ldr	r3, [r0, #4]
   21630:	lsl	r6, r3, #1
   21634:	mov	r5, r0
   21638:	ldr	r0, [r5], #8
   2163c:	cmp	r0, r5
   21640:	beq	2166c <_obstack_memory_used@@Base+0x1c98>
   21644:	cmp	r3, r6
   21648:	bhi	21690 <_obstack_memory_used@@Base+0x1cbc>
   2164c:	mov	r1, r6
   21650:	bl	23164 <_obstack_memory_used@@Base+0x3790>
   21654:	subs	r7, r0, #0
   21658:	beq	2169c <_obstack_memory_used@@Base+0x1cc8>
   2165c:	str	r7, [r4]
   21660:	str	r6, [r4, #4]
   21664:	mov	r0, #1
   21668:	pop	{r4, r5, r6, r7, r8, pc}
   2166c:	mov	r0, r6
   21670:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   21674:	subs	r7, r0, #0
   21678:	beq	216b8 <_obstack_memory_used@@Base+0x1ce4>
   2167c:	ldr	r2, [r4, #4]
   21680:	mov	r1, r5
   21684:	mov	r0, r7
   21688:	bl	11930 <memcpy@plt>
   2168c:	b	2165c <_obstack_memory_used@@Base+0x1c88>
   21690:	bl	11bb8 <__errno_location@plt>
   21694:	mov	r3, #12
   21698:	str	r3, [r0]
   2169c:	ldr	r0, [r4]
   216a0:	bl	1b388 <__assert_fail@plt+0x9614>
   216a4:	str	r5, [r4]
   216a8:	mov	r3, #1024	; 0x400
   216ac:	str	r3, [r4, #4]
   216b0:	mov	r0, #0
   216b4:	pop	{r4, r5, r6, r7, r8, pc}
   216b8:	mov	r0, #0
   216bc:	pop	{r4, r5, r6, r7, r8, pc}
   216c0:	push	{r4, r5, r6, lr}
   216c4:	subs	r4, r0, #0
   216c8:	beq	216e0 <_obstack_memory_used@@Base+0x1d0c>
   216cc:	mov	r5, r1
   216d0:	cmp	r4, #10
   216d4:	beq	216f4 <_obstack_memory_used@@Base+0x1d20>
   216d8:	mov	r0, r4
   216dc:	pop	{r4, r5, r6, pc}
   216e0:	bl	11bb8 <__errno_location@plt>
   216e4:	mov	r3, #95	; 0x5f
   216e8:	str	r3, [r0]
   216ec:	mvn	r4, #0
   216f0:	b	216d8 <_obstack_memory_used@@Base+0x1d04>
   216f4:	ldr	r6, [r1]
   216f8:	ldr	r1, [pc, #48]	; 21730 <_obstack_memory_used@@Base+0x1d5c>
   216fc:	mov	r0, r6
   21700:	bl	118a0 <strcmp@plt>
   21704:	cmp	r0, #0
   21708:	bne	216d8 <_obstack_memory_used@@Base+0x1d04>
   2170c:	mov	r0, r6
   21710:	bl	11ce4 <freecon@plt>
   21714:	mov	r3, #0
   21718:	str	r3, [r5]
   2171c:	bl	11bb8 <__errno_location@plt>
   21720:	mov	r3, #61	; 0x3d
   21724:	str	r3, [r0]
   21728:	mvn	r4, #0
   2172c:	b	216d8 <_obstack_memory_used@@Base+0x1d04>
   21730:	strdeq	r5, [r2], -r8
   21734:	push	{r4, lr}
   21738:	mov	r4, r1
   2173c:	bl	11b7c <getfilecon@plt>
   21740:	mov	r1, r4
   21744:	bl	216c0 <_obstack_memory_used@@Base+0x1cec>
   21748:	pop	{r4, pc}
   2174c:	push	{r4, lr}
   21750:	mov	r4, r1
   21754:	bl	11ad4 <lgetfilecon@plt>
   21758:	mov	r1, r4
   2175c:	bl	216c0 <_obstack_memory_used@@Base+0x1cec>
   21760:	pop	{r4, pc}
   21764:	push	{r4, lr}
   21768:	mov	r4, r1
   2176c:	bl	119a8 <fgetfilecon@plt>
   21770:	mov	r1, r4
   21774:	bl	216c0 <_obstack_memory_used@@Base+0x1cec>
   21778:	pop	{r4, pc}
   2177c:	push	{r4, r5, r6, lr}
   21780:	mov	r6, r1
   21784:	mov	r4, r2
   21788:	mov	r1, #0
   2178c:	bl	11c54 <setlocale@plt>
   21790:	subs	r5, r0, #0
   21794:	beq	217b8 <_obstack_memory_used@@Base+0x1de4>
   21798:	mov	r0, r5
   2179c:	bl	11b94 <strlen@plt>
   217a0:	cmp	r4, r0
   217a4:	bhi	217d0 <_obstack_memory_used@@Base+0x1dfc>
   217a8:	cmp	r4, #0
   217ac:	bne	217e8 <_obstack_memory_used@@Base+0x1e14>
   217b0:	mov	r0, #34	; 0x22
   217b4:	pop	{r4, r5, r6, pc}
   217b8:	cmp	r4, #0
   217bc:	beq	2180c <_obstack_memory_used@@Base+0x1e38>
   217c0:	mov	r3, #0
   217c4:	strb	r3, [r6]
   217c8:	mov	r0, #22
   217cc:	pop	{r4, r5, r6, pc}
   217d0:	add	r2, r0, #1
   217d4:	mov	r1, r5
   217d8:	mov	r0, r6
   217dc:	bl	11930 <memcpy@plt>
   217e0:	mov	r0, #0
   217e4:	pop	{r4, r5, r6, pc}
   217e8:	sub	r4, r4, #1
   217ec:	mov	r2, r4
   217f0:	mov	r1, r5
   217f4:	mov	r0, r6
   217f8:	bl	11930 <memcpy@plt>
   217fc:	mov	r3, #0
   21800:	strb	r3, [r6, r4]
   21804:	mov	r0, #34	; 0x22
   21808:	pop	{r4, r5, r6, pc}
   2180c:	mov	r0, #22
   21810:	pop	{r4, r5, r6, pc}
   21814:	push	{r4, lr}
   21818:	mov	r1, #0
   2181c:	bl	11c54 <setlocale@plt>
   21820:	pop	{r4, pc}
   21824:	push	{r4, lr}
   21828:	subs	r1, r0, #0
   2182c:	beq	21840 <_obstack_memory_used@@Base+0x1e6c>
   21830:	mov	r2, #1
   21834:	ldr	r0, [pc, #16]	; 2184c <_obstack_memory_used@@Base+0x1e78>
   21838:	bl	11bac <setenv@plt>
   2183c:	pop	{r4, pc}
   21840:	ldr	r0, [pc, #4]	; 2184c <_obstack_memory_used@@Base+0x1e78>
   21844:	bl	11d14 <unsetenv@plt>
   21848:	pop	{r4, pc}
   2184c:	strdeq	r7, [r2], -ip
   21850:	push	{r4, r5, r6, r7, r8, lr}
   21854:	subs	r6, r0, #0
   21858:	beq	218c4 <_obstack_memory_used@@Base+0x1ef0>
   2185c:	mov	r0, r6
   21860:	bl	11b94 <strlen@plt>
   21864:	add	r7, r0, #1
   21868:	cmp	r7, #58	; 0x3a
   2186c:	addhi	r0, r0, #2
   21870:	bls	218fc <_obstack_memory_used@@Base+0x1f28>
   21874:	add	r0, r0, #8
   21878:	bic	r0, r0, #3
   2187c:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   21880:	subs	r4, r0, #0
   21884:	beq	218bc <_obstack_memory_used@@Base+0x1ee8>
   21888:	mov	r3, #0
   2188c:	str	r3, [r4]
   21890:	subs	r2, r6, r3
   21894:	movne	r2, #1
   21898:	strb	r2, [r4, #4]
   2189c:	strb	r3, [r4, #5]
   218a0:	add	r5, r4, #5
   218a4:	mov	r2, r7
   218a8:	mov	r1, r6
   218ac:	mov	r0, r5
   218b0:	bl	11930 <memcpy@plt>
   218b4:	mov	r3, #0
   218b8:	strb	r3, [r5, r7]
   218bc:	mov	r0, r4
   218c0:	pop	{r4, r5, r6, r7, r8, pc}
   218c4:	mov	r0, #64	; 0x40
   218c8:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   218cc:	subs	r4, r0, #0
   218d0:	beq	218bc <_obstack_memory_used@@Base+0x1ee8>
   218d4:	mov	r3, #0
   218d8:	str	r3, [r4]
   218dc:	cmp	r6, r3
   218e0:	movne	r2, #1
   218e4:	moveq	r2, r3
   218e8:	strb	r2, [r4, #4]
   218ec:	strb	r3, [r4, #5]
   218f0:	beq	218bc <_obstack_memory_used@@Base+0x1ee8>
   218f4:	mov	r7, r3
   218f8:	b	218a0 <_obstack_memory_used@@Base+0x1ecc>
   218fc:	mov	r0, #59	; 0x3b
   21900:	b	21874 <_obstack_memory_used@@Base+0x1ea0>
   21904:	push	{r4, r5, r6, r7, r8, lr}
   21908:	ldr	r6, [r1, #40]	; 0x28
   2190c:	cmp	r6, #0
   21910:	beq	21a0c <_obstack_memory_used@@Base+0x2038>
   21914:	mov	r5, r0
   21918:	mov	r7, r1
   2191c:	cmp	r1, r6
   21920:	bhi	21930 <_obstack_memory_used@@Base+0x1f5c>
   21924:	add	r3, r1, #44	; 0x2c
   21928:	cmp	r6, r3
   2192c:	bcc	21a14 <_obstack_memory_used@@Base+0x2040>
   21930:	ldrb	r3, [r6]
   21934:	cmp	r3, #0
   21938:	addne	r4, r5, #5
   2193c:	bne	2199c <_obstack_memory_used@@Base+0x1fc8>
   21940:	ldr	r4, [pc, #220]	; 21a24 <_obstack_memory_used@@Base+0x2050>
   21944:	str	r4, [r7, #40]	; 0x28
   21948:	mov	r0, #1
   2194c:	pop	{r4, r5, r6, r7, r8, pc}
   21950:	mov	r0, r6
   21954:	bl	21850 <_obstack_memory_used@@Base+0x1e7c>
   21958:	str	r0, [r5]
   2195c:	cmp	r0, #0
   21960:	beq	21a1c <_obstack_memory_used@@Base+0x2048>
   21964:	mov	r3, #0
   21968:	strb	r3, [r0, #4]
   2196c:	add	r4, r0, #5
   21970:	b	21944 <_obstack_memory_used@@Base+0x1f70>
   21974:	mov	r0, r4
   21978:	bl	11b94 <strlen@plt>
   2197c:	add	r0, r0, #1
   21980:	ldrb	r3, [r4, r0]!
   21984:	cmp	r3, #0
   21988:	bne	2199c <_obstack_memory_used@@Base+0x1fc8>
   2198c:	ldr	r3, [r5]
   21990:	cmp	r3, #0
   21994:	addne	r4, r3, #5
   21998:	movne	r5, r3
   2199c:	mov	r1, r6
   219a0:	mov	r0, r4
   219a4:	bl	118a0 <strcmp@plt>
   219a8:	cmp	r0, #0
   219ac:	beq	21944 <_obstack_memory_used@@Base+0x1f70>
   219b0:	ldrb	r3, [r4]
   219b4:	cmp	r3, #0
   219b8:	bne	21974 <_obstack_memory_used@@Base+0x1fa0>
   219bc:	add	r3, r5, #5
   219c0:	cmp	r4, r3
   219c4:	bne	219d4 <_obstack_memory_used@@Base+0x2000>
   219c8:	ldrb	r3, [r5, #4]
   219cc:	cmp	r3, #0
   219d0:	bne	21974 <_obstack_memory_used@@Base+0x1fa0>
   219d4:	mov	r0, r6
   219d8:	bl	11b94 <strlen@plt>
   219dc:	add	r8, r0, #1
   219e0:	add	r3, r5, #64	; 0x40
   219e4:	sub	r3, r3, r4
   219e8:	cmp	r8, r3
   219ec:	bge	21950 <_obstack_memory_used@@Base+0x1f7c>
   219f0:	mov	r2, r8
   219f4:	mov	r1, r6
   219f8:	mov	r0, r4
   219fc:	bl	11930 <memcpy@plt>
   21a00:	mov	r3, #0
   21a04:	strb	r3, [r4, r8]
   21a08:	b	21944 <_obstack_memory_used@@Base+0x1f70>
   21a0c:	mov	r0, #1
   21a10:	pop	{r4, r5, r6, r7, r8, pc}
   21a14:	mov	r0, #1
   21a18:	pop	{r4, r5, r6, r7, r8, pc}
   21a1c:	mov	r0, #0
   21a20:	pop	{r4, r5, r6, r7, r8, pc}
   21a24:	andeq	r8, r2, ip, ror #1
   21a28:	cmp	r0, #1
   21a2c:	bxeq	lr
   21a30:	cmp	r0, #0
   21a34:	bxeq	lr
   21a38:	push	{r4, lr}
   21a3c:	ldr	r4, [r0]
   21a40:	bl	1b388 <__assert_fail@plt+0x9614>
   21a44:	mov	r0, r4
   21a48:	cmp	r4, #0
   21a4c:	bne	21a3c <_obstack_memory_used@@Base+0x2068>
   21a50:	pop	{r4, pc}
   21a54:	push	{r4, r5, r6, lr}
   21a58:	mov	r4, r0
   21a5c:	ldr	r0, [pc, #164]	; 21b08 <_obstack_memory_used@@Base+0x2134>
   21a60:	bl	11ac8 <getenv@plt>
   21a64:	subs	r5, r0, #0
   21a68:	beq	21aa4 <_obstack_memory_used@@Base+0x20d0>
   21a6c:	ldrb	r3, [r4, #4]
   21a70:	cmp	r3, #0
   21a74:	moveq	r0, #0
   21a78:	beq	21a90 <_obstack_memory_used@@Base+0x20bc>
   21a7c:	mov	r1, r5
   21a80:	add	r0, r4, #5
   21a84:	bl	118a0 <strcmp@plt>
   21a88:	clz	r0, r0
   21a8c:	lsr	r0, r0, #5
   21a90:	cmp	r0, #0
   21a94:	movne	r5, #1
   21a98:	beq	21ab4 <_obstack_memory_used@@Base+0x20e0>
   21a9c:	mov	r0, r5
   21aa0:	pop	{r4, r5, r6, pc}
   21aa4:	ldrb	r0, [r4, #4]
   21aa8:	clz	r0, r0
   21aac:	lsr	r0, r0, #5
   21ab0:	b	21a90 <_obstack_memory_used@@Base+0x20bc>
   21ab4:	mov	r0, r5
   21ab8:	bl	21850 <_obstack_memory_used@@Base+0x1e7c>
   21abc:	subs	r5, r0, #0
   21ac0:	beq	21a9c <_obstack_memory_used@@Base+0x20c8>
   21ac4:	ldrb	r3, [r4, #4]
   21ac8:	cmp	r3, #0
   21acc:	addne	r0, r4, #5
   21ad0:	moveq	r0, #0
   21ad4:	bl	21824 <_obstack_memory_used@@Base+0x1e50>
   21ad8:	cmp	r0, #0
   21adc:	beq	21b00 <_obstack_memory_used@@Base+0x212c>
   21ae0:	bl	11bb8 <__errno_location@plt>
   21ae4:	mov	r4, r0
   21ae8:	ldr	r6, [r0]
   21aec:	mov	r0, r5
   21af0:	bl	21a28 <_obstack_memory_used@@Base+0x2054>
   21af4:	str	r6, [r4]
   21af8:	mov	r5, #0
   21afc:	b	21a9c <_obstack_memory_used@@Base+0x20c8>
   21b00:	bl	119fc <tzset@plt>
   21b04:	b	21a9c <_obstack_memory_used@@Base+0x20c8>
   21b08:	strdeq	r7, [r2], -ip
   21b0c:	push	{r4, r5, r6, r7, r8, lr}
   21b10:	cmp	r0, #1
   21b14:	moveq	r7, #1
   21b18:	beq	21b5c <_obstack_memory_used@@Base+0x2188>
   21b1c:	mov	r4, r0
   21b20:	bl	11bb8 <__errno_location@plt>
   21b24:	mov	r5, r0
   21b28:	ldr	r6, [r0]
   21b2c:	ldrb	r3, [r4, #4]
   21b30:	cmp	r3, #0
   21b34:	addne	r0, r4, #5
   21b38:	moveq	r0, #0
   21b3c:	bl	21824 <_obstack_memory_used@@Base+0x1e50>
   21b40:	cmp	r0, #0
   21b44:	beq	21b64 <_obstack_memory_used@@Base+0x2190>
   21b48:	ldr	r6, [r5]
   21b4c:	mov	r7, #0
   21b50:	mov	r0, r4
   21b54:	bl	21a28 <_obstack_memory_used@@Base+0x2054>
   21b58:	str	r6, [r5]
   21b5c:	mov	r0, r7
   21b60:	pop	{r4, r5, r6, r7, r8, pc}
   21b64:	bl	119fc <tzset@plt>
   21b68:	mov	r7, #1
   21b6c:	b	21b50 <_obstack_memory_used@@Base+0x217c>
   21b70:	push	{r4, r5, r6, r7, r8, lr}
   21b74:	mov	r6, r1
   21b78:	mov	r4, r2
   21b7c:	subs	r5, r0, #0
   21b80:	beq	21bd8 <_obstack_memory_used@@Base+0x2204>
   21b84:	mov	r0, r5
   21b88:	bl	21a54 <_obstack_memory_used@@Base+0x2080>
   21b8c:	subs	r7, r0, #0
   21b90:	beq	21bec <_obstack_memory_used@@Base+0x2218>
   21b94:	mov	r1, r4
   21b98:	mov	r0, r6
   21b9c:	bl	119b4 <localtime_r@plt>
   21ba0:	subs	r6, r0, #0
   21ba4:	beq	21bf4 <_obstack_memory_used@@Base+0x2220>
   21ba8:	mov	r1, r4
   21bac:	mov	r0, r5
   21bb0:	bl	21904 <_obstack_memory_used@@Base+0x1f30>
   21bb4:	mov	r5, r0
   21bb8:	mov	r0, r7
   21bbc:	bl	21b0c <_obstack_memory_used@@Base+0x2138>
   21bc0:	and	r0, r0, r5
   21bc4:	uxtb	r0, r0
   21bc8:	cmp	r0, #0
   21bcc:	moveq	r4, #0
   21bd0:	mov	r0, r4
   21bd4:	pop	{r4, r5, r6, r7, r8, pc}
   21bd8:	mov	r1, r2
   21bdc:	mov	r0, r6
   21be0:	bl	11888 <gmtime_r@plt>
   21be4:	mov	r4, r0
   21be8:	b	21bd0 <_obstack_memory_used@@Base+0x21fc>
   21bec:	mov	r4, #0
   21bf0:	b	21bd0 <_obstack_memory_used@@Base+0x21fc>
   21bf4:	mov	r0, r7
   21bf8:	bl	21b0c <_obstack_memory_used@@Base+0x2138>
   21bfc:	mov	r4, r6
   21c00:	b	21bd0 <_obstack_memory_used@@Base+0x21fc>
   21c04:	push	{r4, r5, r6, r7, lr}
   21c08:	sub	sp, sp, #52	; 0x34
   21c0c:	mov	r4, r1
   21c10:	subs	r5, r0, #0
   21c14:	beq	21cd0 <_obstack_memory_used@@Base+0x22fc>
   21c18:	mov	r0, r5
   21c1c:	bl	21a54 <_obstack_memory_used@@Base+0x2080>
   21c20:	subs	r7, r0, #0
   21c24:	beq	21ce0 <_obstack_memory_used@@Base+0x230c>
   21c28:	ldr	r3, [r4]
   21c2c:	str	r3, [sp, #4]
   21c30:	ldr	r3, [r4, #4]
   21c34:	str	r3, [sp, #8]
   21c38:	ldr	r3, [r4, #8]
   21c3c:	str	r3, [sp, #12]
   21c40:	ldr	r3, [r4, #12]
   21c44:	str	r3, [sp, #16]
   21c48:	ldr	r3, [r4, #16]
   21c4c:	str	r3, [sp, #20]
   21c50:	ldr	r3, [r4, #20]
   21c54:	str	r3, [sp, #24]
   21c58:	mvn	r3, #0
   21c5c:	str	r3, [sp, #32]
   21c60:	ldr	r3, [r4, #32]
   21c64:	str	r3, [sp, #36]	; 0x24
   21c68:	add	r0, sp, #4
   21c6c:	bl	118b8 <mktime@plt>
   21c70:	mov	r6, r0
   21c74:	ldr	r3, [sp, #32]
   21c78:	cmp	r3, #0
   21c7c:	blt	21ce8 <_obstack_memory_used@@Base+0x2314>
   21c80:	add	r1, sp, #4
   21c84:	mov	r0, r5
   21c88:	bl	21904 <_obstack_memory_used@@Base+0x1f30>
   21c8c:	mov	r5, r0
   21c90:	mov	r0, r7
   21c94:	bl	21b0c <_obstack_memory_used@@Base+0x2138>
   21c98:	and	r0, r0, r5
   21c9c:	tst	r0, #255	; 0xff
   21ca0:	beq	21cf0 <_obstack_memory_used@@Base+0x231c>
   21ca4:	mov	ip, r4
   21ca8:	add	lr, sp, #4
   21cac:	ldm	lr!, {r0, r1, r2, r3}
   21cb0:	stmia	ip!, {r0, r1, r2, r3}
   21cb4:	ldm	lr!, {r0, r1, r2, r3}
   21cb8:	stmia	ip!, {r0, r1, r2, r3}
   21cbc:	ldm	lr, {r0, r1, r2}
   21cc0:	stm	ip, {r0, r1, r2}
   21cc4:	mov	r0, r6
   21cc8:	add	sp, sp, #52	; 0x34
   21ccc:	pop	{r4, r5, r6, r7, pc}
   21cd0:	mov	r0, r1
   21cd4:	bl	11cc0 <timegm@plt>
   21cd8:	mov	r6, r0
   21cdc:	b	21cc4 <_obstack_memory_used@@Base+0x22f0>
   21ce0:	mvn	r6, #0
   21ce4:	b	21cc4 <_obstack_memory_used@@Base+0x22f0>
   21ce8:	mov	r0, r7
   21cec:	bl	21b0c <_obstack_memory_used@@Base+0x2138>
   21cf0:	mvn	r6, #0
   21cf4:	b	21cc4 <_obstack_memory_used@@Base+0x22f0>
   21cf8:	push	{r4, r5, r6, lr}
   21cfc:	sub	sp, sp, #32
   21d00:	mov	r4, r0
   21d04:	ldr	r5, [sp, #48]	; 0x30
   21d08:	ldr	r6, [sp, #52]	; 0x34
   21d0c:	cmp	r1, #0
   21d10:	beq	21dc8 <_obstack_memory_used@@Base+0x23f4>
   21d14:	str	r3, [sp, #4]
   21d18:	str	r2, [sp]
   21d1c:	mov	r3, r1
   21d20:	ldr	r2, [pc, #940]	; 220d4 <_obstack_memory_used@@Base+0x2700>
   21d24:	mov	r1, #1
   21d28:	bl	11c18 <__fprintf_chk@plt>
   21d2c:	mov	r2, #5
   21d30:	ldr	r1, [pc, #928]	; 220d8 <_obstack_memory_used@@Base+0x2704>
   21d34:	mov	r0, #0
   21d38:	bl	11984 <dcgettext@plt>
   21d3c:	ldr	r3, [pc, #920]	; 220dc <_obstack_memory_used@@Base+0x2708>
   21d40:	str	r3, [sp]
   21d44:	mov	r3, r0
   21d48:	ldr	r2, [pc, #912]	; 220e0 <_obstack_memory_used@@Base+0x270c>
   21d4c:	mov	r1, #1
   21d50:	mov	r0, r4
   21d54:	bl	11c18 <__fprintf_chk@plt>
   21d58:	mov	r1, r4
   21d5c:	mov	r0, #10
   21d60:	bl	11978 <fputc_unlocked@plt>
   21d64:	mov	r2, #5
   21d68:	ldr	r1, [pc, #884]	; 220e4 <_obstack_memory_used@@Base+0x2710>
   21d6c:	mov	r0, #0
   21d70:	bl	11984 <dcgettext@plt>
   21d74:	ldr	r3, [pc, #876]	; 220e8 <_obstack_memory_used@@Base+0x2714>
   21d78:	mov	r2, r0
   21d7c:	mov	r1, #1
   21d80:	mov	r0, r4
   21d84:	bl	11c18 <__fprintf_chk@plt>
   21d88:	mov	r1, r4
   21d8c:	mov	r0, #10
   21d90:	bl	11978 <fputc_unlocked@plt>
   21d94:	cmp	r6, #9
   21d98:	ldrls	pc, [pc, r6, lsl #2]
   21d9c:	b	2206c <_obstack_memory_used@@Base+0x2698>
   21da0:	andeq	r1, r2, r4, lsl #28
   21da4:	andeq	r1, r2, r0, ror #27
   21da8:	andeq	r1, r2, ip, lsl #28
   21dac:	andeq	r1, r2, ip, lsr lr
   21db0:	andeq	r1, r2, r4, ror lr
   21db4:			; <UNDEFINED> instruction: 0x00021eb4
   21db8:	strdeq	r1, [r2], -ip
   21dbc:	andeq	r1, r2, ip, asr #30
   21dc0:	andeq	r1, r2, r4, lsr #31
   21dc4:	andeq	r2, r2, r4
   21dc8:	str	r3, [sp]
   21dcc:	mov	r3, r2
   21dd0:	ldr	r2, [pc, #788]	; 220ec <_obstack_memory_used@@Base+0x2718>
   21dd4:	mov	r1, #1
   21dd8:	bl	11c18 <__fprintf_chk@plt>
   21ddc:	b	21d2c <_obstack_memory_used@@Base+0x2358>
   21de0:	mov	r2, #5
   21de4:	ldr	r1, [pc, #772]	; 220f0 <_obstack_memory_used@@Base+0x271c>
   21de8:	mov	r0, #0
   21dec:	bl	11984 <dcgettext@plt>
   21df0:	ldr	r3, [r5]
   21df4:	mov	r2, r0
   21df8:	mov	r1, #1
   21dfc:	mov	r0, r4
   21e00:	bl	11c18 <__fprintf_chk@plt>
   21e04:	add	sp, sp, #32
   21e08:	pop	{r4, r5, r6, pc}
   21e0c:	mov	r2, #5
   21e10:	ldr	r1, [pc, #732]	; 220f4 <_obstack_memory_used@@Base+0x2720>
   21e14:	mov	r0, #0
   21e18:	bl	11984 <dcgettext@plt>
   21e1c:	ldr	r3, [r5]
   21e20:	ldr	r2, [r5, #4]
   21e24:	str	r2, [sp]
   21e28:	mov	r2, r0
   21e2c:	mov	r1, #1
   21e30:	mov	r0, r4
   21e34:	bl	11c18 <__fprintf_chk@plt>
   21e38:	b	21e04 <_obstack_memory_used@@Base+0x2430>
   21e3c:	mov	r2, #5
   21e40:	ldr	r1, [pc, #688]	; 220f8 <_obstack_memory_used@@Base+0x2724>
   21e44:	mov	r0, #0
   21e48:	bl	11984 <dcgettext@plt>
   21e4c:	ldr	r3, [r5]
   21e50:	ldr	r2, [r5, #8]
   21e54:	str	r2, [sp, #4]
   21e58:	ldr	r2, [r5, #4]
   21e5c:	str	r2, [sp]
   21e60:	mov	r2, r0
   21e64:	mov	r1, #1
   21e68:	mov	r0, r4
   21e6c:	bl	11c18 <__fprintf_chk@plt>
   21e70:	b	21e04 <_obstack_memory_used@@Base+0x2430>
   21e74:	mov	r2, #5
   21e78:	ldr	r1, [pc, #636]	; 220fc <_obstack_memory_used@@Base+0x2728>
   21e7c:	mov	r0, #0
   21e80:	bl	11984 <dcgettext@plt>
   21e84:	ldr	r3, [r5]
   21e88:	ldr	r2, [r5, #12]
   21e8c:	str	r2, [sp, #8]
   21e90:	ldr	r2, [r5, #8]
   21e94:	str	r2, [sp, #4]
   21e98:	ldr	r2, [r5, #4]
   21e9c:	str	r2, [sp]
   21ea0:	mov	r2, r0
   21ea4:	mov	r1, #1
   21ea8:	mov	r0, r4
   21eac:	bl	11c18 <__fprintf_chk@plt>
   21eb0:	b	21e04 <_obstack_memory_used@@Base+0x2430>
   21eb4:	mov	r2, #5
   21eb8:	ldr	r1, [pc, #576]	; 22100 <_obstack_memory_used@@Base+0x272c>
   21ebc:	mov	r0, #0
   21ec0:	bl	11984 <dcgettext@plt>
   21ec4:	ldr	r3, [r5]
   21ec8:	ldr	r2, [r5, #16]
   21ecc:	str	r2, [sp, #12]
   21ed0:	ldr	r2, [r5, #12]
   21ed4:	str	r2, [sp, #8]
   21ed8:	ldr	r2, [r5, #8]
   21edc:	str	r2, [sp, #4]
   21ee0:	ldr	r2, [r5, #4]
   21ee4:	str	r2, [sp]
   21ee8:	mov	r2, r0
   21eec:	mov	r1, #1
   21ef0:	mov	r0, r4
   21ef4:	bl	11c18 <__fprintf_chk@plt>
   21ef8:	b	21e04 <_obstack_memory_used@@Base+0x2430>
   21efc:	mov	r2, #5
   21f00:	ldr	r1, [pc, #508]	; 22104 <_obstack_memory_used@@Base+0x2730>
   21f04:	mov	r0, #0
   21f08:	bl	11984 <dcgettext@plt>
   21f0c:	ldr	r3, [r5]
   21f10:	ldr	r2, [r5, #20]
   21f14:	str	r2, [sp, #16]
   21f18:	ldr	r2, [r5, #16]
   21f1c:	str	r2, [sp, #12]
   21f20:	ldr	r2, [r5, #12]
   21f24:	str	r2, [sp, #8]
   21f28:	ldr	r2, [r5, #8]
   21f2c:	str	r2, [sp, #4]
   21f30:	ldr	r2, [r5, #4]
   21f34:	str	r2, [sp]
   21f38:	mov	r2, r0
   21f3c:	mov	r1, #1
   21f40:	mov	r0, r4
   21f44:	bl	11c18 <__fprintf_chk@plt>
   21f48:	b	21e04 <_obstack_memory_used@@Base+0x2430>
   21f4c:	mov	r2, #5
   21f50:	ldr	r1, [pc, #432]	; 22108 <_obstack_memory_used@@Base+0x2734>
   21f54:	mov	r0, #0
   21f58:	bl	11984 <dcgettext@plt>
   21f5c:	ldr	r3, [r5]
   21f60:	ldr	r2, [r5, #24]
   21f64:	str	r2, [sp, #20]
   21f68:	ldr	r2, [r5, #20]
   21f6c:	str	r2, [sp, #16]
   21f70:	ldr	r2, [r5, #16]
   21f74:	str	r2, [sp, #12]
   21f78:	ldr	r2, [r5, #12]
   21f7c:	str	r2, [sp, #8]
   21f80:	ldr	r2, [r5, #8]
   21f84:	str	r2, [sp, #4]
   21f88:	ldr	r2, [r5, #4]
   21f8c:	str	r2, [sp]
   21f90:	mov	r2, r0
   21f94:	mov	r1, #1
   21f98:	mov	r0, r4
   21f9c:	bl	11c18 <__fprintf_chk@plt>
   21fa0:	b	21e04 <_obstack_memory_used@@Base+0x2430>
   21fa4:	mov	r2, #5
   21fa8:	ldr	r1, [pc, #348]	; 2210c <_obstack_memory_used@@Base+0x2738>
   21fac:	mov	r0, #0
   21fb0:	bl	11984 <dcgettext@plt>
   21fb4:	ldr	r3, [r5]
   21fb8:	ldr	r2, [r5, #28]
   21fbc:	str	r2, [sp, #24]
   21fc0:	ldr	r2, [r5, #24]
   21fc4:	str	r2, [sp, #20]
   21fc8:	ldr	r2, [r5, #20]
   21fcc:	str	r2, [sp, #16]
   21fd0:	ldr	r2, [r5, #16]
   21fd4:	str	r2, [sp, #12]
   21fd8:	ldr	r2, [r5, #12]
   21fdc:	str	r2, [sp, #8]
   21fe0:	ldr	r2, [r5, #8]
   21fe4:	str	r2, [sp, #4]
   21fe8:	ldr	r2, [r5, #4]
   21fec:	str	r2, [sp]
   21ff0:	mov	r2, r0
   21ff4:	mov	r1, #1
   21ff8:	mov	r0, r4
   21ffc:	bl	11c18 <__fprintf_chk@plt>
   22000:	b	21e04 <_obstack_memory_used@@Base+0x2430>
   22004:	mov	r2, #5
   22008:	ldr	r1, [pc, #256]	; 22110 <_obstack_memory_used@@Base+0x273c>
   2200c:	mov	r0, #0
   22010:	bl	11984 <dcgettext@plt>
   22014:	ldr	r3, [r5]
   22018:	ldr	r2, [r5, #32]
   2201c:	str	r2, [sp, #28]
   22020:	ldr	r2, [r5, #28]
   22024:	str	r2, [sp, #24]
   22028:	ldr	r2, [r5, #24]
   2202c:	str	r2, [sp, #20]
   22030:	ldr	r2, [r5, #20]
   22034:	str	r2, [sp, #16]
   22038:	ldr	r2, [r5, #16]
   2203c:	str	r2, [sp, #12]
   22040:	ldr	r2, [r5, #12]
   22044:	str	r2, [sp, #8]
   22048:	ldr	r2, [r5, #8]
   2204c:	str	r2, [sp, #4]
   22050:	ldr	r2, [r5, #4]
   22054:	str	r2, [sp]
   22058:	mov	r2, r0
   2205c:	mov	r1, #1
   22060:	mov	r0, r4
   22064:	bl	11c18 <__fprintf_chk@plt>
   22068:	b	21e04 <_obstack_memory_used@@Base+0x2430>
   2206c:	mov	r2, #5
   22070:	ldr	r1, [pc, #156]	; 22114 <_obstack_memory_used@@Base+0x2740>
   22074:	mov	r0, #0
   22078:	bl	11984 <dcgettext@plt>
   2207c:	ldr	r3, [r5]
   22080:	ldr	r2, [r5, #32]
   22084:	str	r2, [sp, #28]
   22088:	ldr	r2, [r5, #28]
   2208c:	str	r2, [sp, #24]
   22090:	ldr	r2, [r5, #24]
   22094:	str	r2, [sp, #20]
   22098:	ldr	r2, [r5, #20]
   2209c:	str	r2, [sp, #16]
   220a0:	ldr	r2, [r5, #16]
   220a4:	str	r2, [sp, #12]
   220a8:	ldr	r2, [r5, #12]
   220ac:	str	r2, [sp, #8]
   220b0:	ldr	r2, [r5, #8]
   220b4:	str	r2, [sp, #4]
   220b8:	ldr	r2, [r5, #4]
   220bc:	str	r2, [sp]
   220c0:	mov	r2, r0
   220c4:	mov	r1, #1
   220c8:	mov	r0, r4
   220cc:	bl	11c18 <__fprintf_chk@plt>
   220d0:	b	21e04 <_obstack_memory_used@@Base+0x2430>
   220d4:	andeq	r8, r2, r8, lsr #5
   220d8:			; <UNDEFINED> instruction: 0x000282bc
   220dc:	andeq	r0, r0, r6, ror #15
   220e0:	muleq	r2, r4, r5
   220e4:	andeq	r8, r2, r0, asr #5
   220e8:	andeq	r8, r2, ip, ror #6
   220ec:			; <UNDEFINED> instruction: 0x000282b4
   220f0:	muleq	r2, r0, r3
   220f4:	andeq	r8, r2, r0, lsr #7
   220f8:			; <UNDEFINED> instruction: 0x000283b8
   220fc:	ldrdeq	r8, [r2], -r4
   22100:	strdeq	r8, [r2], -r4
   22104:	andeq	r8, r2, r8, lsl r4
   22108:	andeq	r8, r2, r0, asr #8
   2210c:	andeq	r8, r2, ip, ror #8
   22110:	muleq	r2, ip, r4
   22114:	ldrdeq	r8, [r2], -r0
   22118:	push	{r4, r5, lr}
   2211c:	sub	sp, sp, #12
   22120:	ldr	r5, [sp, #24]
   22124:	ldr	ip, [r5]
   22128:	cmp	ip, #0
   2212c:	beq	2215c <_obstack_memory_used@@Base+0x2788>
   22130:	mov	lr, r5
   22134:	mov	ip, #0
   22138:	add	ip, ip, #1
   2213c:	ldr	r4, [lr, #4]!
   22140:	cmp	r4, #0
   22144:	bne	22138 <_obstack_memory_used@@Base+0x2764>
   22148:	str	ip, [sp, #4]
   2214c:	str	r5, [sp]
   22150:	bl	21cf8 <_obstack_memory_used@@Base+0x2324>
   22154:	add	sp, sp, #12
   22158:	pop	{r4, r5, pc}
   2215c:	mov	ip, #0
   22160:	b	22148 <_obstack_memory_used@@Base+0x2774>
   22164:	push	{r4, r5, lr}
   22168:	sub	sp, sp, #52	; 0x34
   2216c:	ldr	r4, [sp, #64]	; 0x40
   22170:	sub	r4, r4, #4
   22174:	add	r5, sp, #4
   22178:	mov	ip, #0
   2217c:	ldr	lr, [r4, #4]!
   22180:	str	lr, [r5, #4]!
   22184:	cmp	lr, #0
   22188:	beq	22198 <_obstack_memory_used@@Base+0x27c4>
   2218c:	add	ip, ip, #1
   22190:	cmp	ip, #10
   22194:	bne	2217c <_obstack_memory_used@@Base+0x27a8>
   22198:	str	ip, [sp, #4]
   2219c:	add	ip, sp, #8
   221a0:	str	ip, [sp]
   221a4:	bl	21cf8 <_obstack_memory_used@@Base+0x2324>
   221a8:	add	sp, sp, #52	; 0x34
   221ac:	pop	{r4, r5, pc}
   221b0:	push	{r3}		; (str r3, [sp, #-4]!)
   221b4:	push	{lr}		; (str lr, [sp, #-4]!)
   221b8:	sub	sp, sp, #16
   221bc:	add	r3, sp, #24
   221c0:	str	r3, [sp, #12]
   221c4:	str	r3, [sp]
   221c8:	ldr	r3, [sp, #20]
   221cc:	bl	22164 <_obstack_memory_used@@Base+0x2790>
   221d0:	add	sp, sp, #16
   221d4:	pop	{lr}		; (ldr lr, [sp], #4)
   221d8:	add	sp, sp, #4
   221dc:	bx	lr
   221e0:	push	{r4, lr}
   221e4:	ldr	r3, [pc, #112]	; 2225c <_obstack_memory_used@@Base+0x2888>
   221e8:	ldr	r1, [r3]
   221ec:	mov	r0, #10
   221f0:	bl	11978 <fputc_unlocked@plt>
   221f4:	mov	r2, #5
   221f8:	ldr	r1, [pc, #96]	; 22260 <_obstack_memory_used@@Base+0x288c>
   221fc:	mov	r0, #0
   22200:	bl	11984 <dcgettext@plt>
   22204:	ldr	r2, [pc, #88]	; 22264 <_obstack_memory_used@@Base+0x2890>
   22208:	mov	r1, r0
   2220c:	mov	r0, #1
   22210:	bl	11bf4 <__printf_chk@plt>
   22214:	mov	r2, #5
   22218:	ldr	r1, [pc, #72]	; 22268 <_obstack_memory_used@@Base+0x2894>
   2221c:	mov	r0, #0
   22220:	bl	11984 <dcgettext@plt>
   22224:	ldr	r3, [pc, #64]	; 2226c <_obstack_memory_used@@Base+0x2898>
   22228:	ldr	r2, [pc, #64]	; 22270 <_obstack_memory_used@@Base+0x289c>
   2222c:	mov	r1, r0
   22230:	mov	r0, #1
   22234:	bl	11bf4 <__printf_chk@plt>
   22238:	mov	r2, #5
   2223c:	ldr	r1, [pc, #48]	; 22274 <_obstack_memory_used@@Base+0x28a0>
   22240:	mov	r0, #0
   22244:	bl	11984 <dcgettext@plt>
   22248:	ldr	r2, [pc, #40]	; 22278 <_obstack_memory_used@@Base+0x28a4>
   2224c:	mov	r1, r0
   22250:	mov	r0, #1
   22254:	bl	11bf4 <__printf_chk@plt>
   22258:	pop	{r4, pc}
   2225c:	andeq	r9, r3, r4, lsr #6
   22260:	andeq	r8, r2, ip, lsl #10
   22264:	andeq	r8, r2, r0, lsr #10
   22268:	andeq	r8, r2, r8, lsr r5
   2226c:			; <UNDEFINED> instruction: 0x000276b4
   22270:	ldrdeq	r7, [r2], -ip
   22274:	andeq	r8, r2, ip, asr #10
   22278:	andeq	r8, r2, r4, ror r5
   2227c:	push	{r4, lr}
   22280:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   22284:	cmp	r0, #0
   22288:	popne	{r4, pc}
   2228c:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   22290:	push	{r4, lr}
   22294:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   22298:	cmp	r0, #0
   2229c:	popne	{r4, pc}
   222a0:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   222a4:	push	{r4, lr}
   222a8:	bl	2227c <_obstack_memory_used@@Base+0x28a8>
   222ac:	pop	{r4, pc}
   222b0:	push	{r4, r5, r6, lr}
   222b4:	mov	r5, r0
   222b8:	mov	r4, r1
   222bc:	bl	23164 <_obstack_memory_used@@Base+0x3790>
   222c0:	cmp	r0, #0
   222c4:	popne	{r4, r5, r6, pc}
   222c8:	adds	r4, r4, #0
   222cc:	movne	r4, #1
   222d0:	cmp	r5, #0
   222d4:	orreq	r4, r4, #1
   222d8:	cmp	r4, #0
   222dc:	popeq	{r4, r5, r6, pc}
   222e0:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   222e4:	push	{r4, lr}
   222e8:	cmp	r1, #0
   222ec:	orreq	r1, r1, #1
   222f0:	bl	23164 <_obstack_memory_used@@Base+0x3790>
   222f4:	cmp	r0, #0
   222f8:	popne	{r4, pc}
   222fc:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   22300:	push	{r4, r5, r6, lr}
   22304:	mov	r6, r0
   22308:	mov	r5, r1
   2230c:	mov	r4, r2
   22310:	bl	23450 <_obstack_memory_used@@Base+0x3a7c>
   22314:	cmp	r0, #0
   22318:	popne	{r4, r5, r6, pc}
   2231c:	cmp	r6, #0
   22320:	beq	22330 <_obstack_memory_used@@Base+0x295c>
   22324:	cmp	r5, #0
   22328:	cmpne	r4, #0
   2232c:	popeq	{r4, r5, r6, pc}
   22330:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   22334:	push	{r4, lr}
   22338:	bl	22300 <_obstack_memory_used@@Base+0x292c>
   2233c:	pop	{r4, pc}
   22340:	push	{r4, lr}
   22344:	mov	ip, r1
   22348:	mov	r3, r2
   2234c:	cmp	r2, #0
   22350:	cmpne	r1, #0
   22354:	moveq	r3, #1
   22358:	moveq	ip, r3
   2235c:	mov	r2, r3
   22360:	mov	r1, ip
   22364:	bl	23450 <_obstack_memory_used@@Base+0x3a7c>
   22368:	cmp	r0, #0
   2236c:	popne	{r4, pc}
   22370:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   22374:	push	{r4, lr}
   22378:	mov	r2, r1
   2237c:	mov	r1, r0
   22380:	mov	r0, #0
   22384:	bl	22300 <_obstack_memory_used@@Base+0x292c>
   22388:	pop	{r4, pc}
   2238c:	push	{r4, lr}
   22390:	mov	r2, r1
   22394:	mov	r1, r0
   22398:	mov	r0, #0
   2239c:	bl	22340 <_obstack_memory_used@@Base+0x296c>
   223a0:	pop	{r4, pc}
   223a4:	push	{r4, r5, r6, r7, r8, lr}
   223a8:	mov	r5, r1
   223ac:	mov	r6, r2
   223b0:	ldr	r4, [r1]
   223b4:	subs	r7, r0, #0
   223b8:	beq	223d4 <_obstack_memory_used@@Base+0x2a00>
   223bc:	lsr	r2, r4, #1
   223c0:	add	r3, r2, #1
   223c4:	mvn	r3, r3
   223c8:	cmp	r4, r3
   223cc:	bls	223f8 <_obstack_memory_used@@Base+0x2a24>
   223d0:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   223d4:	cmp	r4, #0
   223d8:	bne	22400 <_obstack_memory_used@@Base+0x2a2c>
   223dc:	mov	r1, r2
   223e0:	mov	r0, #64	; 0x40
   223e4:	bl	2349c <_obstack_memory_used@@Base+0x3ac8>
   223e8:	cmp	r0, #0
   223ec:	movne	r4, r0
   223f0:	addeq	r4, r0, #1
   223f4:	b	22400 <_obstack_memory_used@@Base+0x2a2c>
   223f8:	add	r4, r4, #1
   223fc:	add	r4, r4, r2
   22400:	mov	r2, r6
   22404:	mov	r1, r4
   22408:	mov	r0, r7
   2240c:	bl	22300 <_obstack_memory_used@@Base+0x292c>
   22410:	str	r4, [r5]
   22414:	pop	{r4, r5, r6, r7, r8, pc}
   22418:	push	{r4, lr}
   2241c:	mov	r2, #1
   22420:	bl	223a4 <_obstack_memory_used@@Base+0x29d0>
   22424:	pop	{r4, pc}
   22428:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2242c:	sub	sp, sp, #12
   22430:	mov	fp, r0
   22434:	mov	sl, r1
   22438:	mov	r9, r2
   2243c:	mov	r7, r3
   22440:	ldr	r6, [sp, #48]	; 0x30
   22444:	ldr	r5, [r1]
   22448:	asrs	r4, r5, #1
   2244c:	bmi	225a8 <_obstack_memory_used@@Base+0x2bd4>
   22450:	cmp	r5, #0
   22454:	blt	225bc <_obstack_memory_used@@Base+0x2be8>
   22458:	mvn	r3, #-2147483648	; 0x80000000
   2245c:	sub	r3, r3, r4
   22460:	cmp	r5, r3
   22464:	movle	r3, #0
   22468:	movgt	r3, #1
   2246c:	cmp	r3, #0
   22470:	addeq	r4, r4, r5
   22474:	mvnne	r4, #-2147483648	; 0x80000000
   22478:	mvn	r8, r7
   2247c:	lsr	r8, r8, #31
   22480:	cmp	r7, r4
   22484:	movge	r3, #0
   22488:	andlt	r3, r8, #1
   2248c:	cmp	r3, #0
   22490:	movne	r4, r7
   22494:	cmp	r6, #0
   22498:	blt	225d0 <_obstack_memory_used@@Base+0x2bfc>
   2249c:	cmp	r6, #0
   224a0:	beq	2267c <_obstack_memory_used@@Base+0x2ca8>
   224a4:	cmp	r4, #0
   224a8:	blt	2262c <_obstack_memory_used@@Base+0x2c58>
   224ac:	mov	r1, r6
   224b0:	mvn	r0, #-2147483648	; 0x80000000
   224b4:	bl	236a8 <_obstack_memory_used@@Base+0x3cd4>
   224b8:	cmp	r0, r4
   224bc:	movge	r0, #0
   224c0:	movlt	r0, #1
   224c4:	cmp	r0, #0
   224c8:	mvnne	r3, #-2147483648	; 0x80000000
   224cc:	strne	r3, [sp, #4]
   224d0:	beq	22664 <_obstack_memory_used@@Base+0x2c90>
   224d4:	mov	r1, r6
   224d8:	ldr	r0, [sp, #4]
   224dc:	bl	236a8 <_obstack_memory_used@@Base+0x3cd4>
   224e0:	mov	r4, r0
   224e4:	mov	r1, r6
   224e8:	ldr	r0, [sp, #4]
   224ec:	bl	238c8 <_obstack_memory_used@@Base+0x3ef4>
   224f0:	ldr	r3, [sp, #4]
   224f4:	sub	r1, r3, r1
   224f8:	cmp	fp, #0
   224fc:	moveq	r3, #0
   22500:	streq	r3, [sl]
   22504:	sub	r3, r4, r5
   22508:	cmp	r3, r9
   2250c:	bge	22594 <_obstack_memory_used@@Base+0x2bc0>
   22510:	cmp	r9, #0
   22514:	blt	22688 <_obstack_memory_used@@Base+0x2cb4>
   22518:	cmp	r5, #0
   2251c:	blt	2269c <_obstack_memory_used@@Base+0x2cc8>
   22520:	mvn	r3, #-2147483648	; 0x80000000
   22524:	sub	r3, r3, r9
   22528:	cmp	r5, r3
   2252c:	movle	r3, #0
   22530:	movgt	r3, #1
   22534:	cmp	r3, #0
   22538:	bne	22744 <_obstack_memory_used@@Base+0x2d70>
   2253c:	add	r5, r5, r9
   22540:	mov	r4, r5
   22544:	cmp	r7, r5
   22548:	movge	r7, #0
   2254c:	andlt	r7, r8, #1
   22550:	cmp	r7, #0
   22554:	bne	22744 <_obstack_memory_used@@Base+0x2d70>
   22558:	cmp	r6, #0
   2255c:	blt	226b0 <_obstack_memory_used@@Base+0x2cdc>
   22560:	cmp	r6, #0
   22564:	beq	22590 <_obstack_memory_used@@Base+0x2bbc>
   22568:	cmp	r5, #0
   2256c:	blt	2270c <_obstack_memory_used@@Base+0x2d38>
   22570:	mov	r1, r6
   22574:	mvn	r0, #-2147483648	; 0x80000000
   22578:	bl	236a8 <_obstack_memory_used@@Base+0x3cd4>
   2257c:	cmp	r5, r0
   22580:	movle	r0, #0
   22584:	movgt	r0, #1
   22588:	cmp	r0, #0
   2258c:	bne	22744 <_obstack_memory_used@@Base+0x2d70>
   22590:	mul	r1, r5, r6
   22594:	mov	r0, fp
   22598:	bl	222b0 <_obstack_memory_used@@Base+0x28dc>
   2259c:	str	r4, [sl]
   225a0:	add	sp, sp, #12
   225a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225a8:	rsb	r3, r4, #-2147483648	; 0x80000000
   225ac:	cmp	r5, r3
   225b0:	movge	r3, #0
   225b4:	movlt	r3, #1
   225b8:	b	2246c <_obstack_memory_used@@Base+0x2a98>
   225bc:	rsb	r3, r5, #-2147483648	; 0x80000000
   225c0:	cmp	r4, r3
   225c4:	movge	r3, #0
   225c8:	movlt	r3, #1
   225cc:	b	2246c <_obstack_memory_used@@Base+0x2a98>
   225d0:	cmp	r4, #0
   225d4:	blt	225fc <_obstack_memory_used@@Base+0x2c28>
   225d8:	cmn	r6, #1
   225dc:	beq	22618 <_obstack_memory_used@@Base+0x2c44>
   225e0:	mov	r1, r6
   225e4:	mov	r0, #-2147483648	; 0x80000000
   225e8:	bl	236a8 <_obstack_memory_used@@Base+0x3cd4>
   225ec:	cmp	r0, r4
   225f0:	movge	r0, #0
   225f4:	movlt	r0, #1
   225f8:	b	224c4 <_obstack_memory_used@@Base+0x2af0>
   225fc:	mov	r1, r6
   22600:	mvn	r0, #-2147483648	; 0x80000000
   22604:	bl	236a8 <_obstack_memory_used@@Base+0x3cd4>
   22608:	cmp	r0, r4
   2260c:	movle	r0, #0
   22610:	movgt	r0, #1
   22614:	b	224c4 <_obstack_memory_used@@Base+0x2af0>
   22618:	add	r0, r4, #-2147483648	; 0x80000000
   2261c:	cmp	r0, #0
   22620:	movle	r0, #0
   22624:	movgt	r0, #1
   22628:	b	224c4 <_obstack_memory_used@@Base+0x2af0>
   2262c:	cmn	r4, #1
   22630:	beq	22650 <_obstack_memory_used@@Base+0x2c7c>
   22634:	mov	r1, r4
   22638:	mov	r0, #-2147483648	; 0x80000000
   2263c:	bl	236a8 <_obstack_memory_used@@Base+0x3cd4>
   22640:	cmp	r6, r0
   22644:	movle	r0, #0
   22648:	movgt	r0, #1
   2264c:	b	224c4 <_obstack_memory_used@@Base+0x2af0>
   22650:	add	r0, r6, #-2147483648	; 0x80000000
   22654:	cmp	r0, #0
   22658:	movle	r0, #0
   2265c:	movgt	r0, #1
   22660:	b	224c4 <_obstack_memory_used@@Base+0x2af0>
   22664:	mul	r1, r6, r4
   22668:	cmp	r1, #63	; 0x3f
   2266c:	movle	r3, #64	; 0x40
   22670:	strle	r3, [sp, #4]
   22674:	bgt	224f8 <_obstack_memory_used@@Base+0x2b24>
   22678:	b	224d4 <_obstack_memory_used@@Base+0x2b00>
   2267c:	mov	r3, #64	; 0x40
   22680:	str	r3, [sp, #4]
   22684:	b	224d4 <_obstack_memory_used@@Base+0x2b00>
   22688:	rsb	r3, r9, #-2147483648	; 0x80000000
   2268c:	cmp	r5, r3
   22690:	movge	r3, #0
   22694:	movlt	r3, #1
   22698:	b	22534 <_obstack_memory_used@@Base+0x2b60>
   2269c:	rsb	r3, r5, #-2147483648	; 0x80000000
   226a0:	cmp	r9, r3
   226a4:	movge	r3, #0
   226a8:	movlt	r3, #1
   226ac:	b	22534 <_obstack_memory_used@@Base+0x2b60>
   226b0:	cmp	r5, #0
   226b4:	blt	226dc <_obstack_memory_used@@Base+0x2d08>
   226b8:	cmn	r6, #1
   226bc:	beq	226f8 <_obstack_memory_used@@Base+0x2d24>
   226c0:	mov	r1, r6
   226c4:	mov	r0, #-2147483648	; 0x80000000
   226c8:	bl	236a8 <_obstack_memory_used@@Base+0x3cd4>
   226cc:	cmp	r5, r0
   226d0:	movle	r0, #0
   226d4:	movgt	r0, #1
   226d8:	b	22588 <_obstack_memory_used@@Base+0x2bb4>
   226dc:	mov	r1, r6
   226e0:	mvn	r0, #-2147483648	; 0x80000000
   226e4:	bl	236a8 <_obstack_memory_used@@Base+0x3cd4>
   226e8:	cmp	r5, r0
   226ec:	movge	r0, #0
   226f0:	movlt	r0, #1
   226f4:	b	22588 <_obstack_memory_used@@Base+0x2bb4>
   226f8:	add	r0, r5, #-2147483648	; 0x80000000
   226fc:	cmp	r0, #0
   22700:	movle	r0, #0
   22704:	movgt	r0, #1
   22708:	b	22588 <_obstack_memory_used@@Base+0x2bb4>
   2270c:	cmn	r5, #1
   22710:	beq	22730 <_obstack_memory_used@@Base+0x2d5c>
   22714:	mov	r1, r5
   22718:	mov	r0, #-2147483648	; 0x80000000
   2271c:	bl	236a8 <_obstack_memory_used@@Base+0x3cd4>
   22720:	cmp	r6, r0
   22724:	movle	r0, #0
   22728:	movgt	r0, #1
   2272c:	b	22588 <_obstack_memory_used@@Base+0x2bb4>
   22730:	add	r0, r6, #-2147483648	; 0x80000000
   22734:	cmp	r0, #0
   22738:	movle	r0, #0
   2273c:	movgt	r0, #1
   22740:	b	22588 <_obstack_memory_used@@Base+0x2bb4>
   22744:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   22748:	push	{r4, lr}
   2274c:	bl	230e4 <_obstack_memory_used@@Base+0x3710>
   22750:	cmp	r0, #0
   22754:	popne	{r4, pc}
   22758:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   2275c:	push	{r4, lr}
   22760:	mov	r1, #1
   22764:	bl	22748 <_obstack_memory_used@@Base+0x2d74>
   22768:	pop	{r4, pc}
   2276c:	push	{r4, lr}
   22770:	bl	230e4 <_obstack_memory_used@@Base+0x3710>
   22774:	cmp	r0, #0
   22778:	popne	{r4, pc}
   2277c:	bl	22820 <_obstack_memory_used@@Base+0x2e4c>
   22780:	push	{r4, lr}
   22784:	mov	r1, #1
   22788:	bl	2276c <_obstack_memory_used@@Base+0x2d98>
   2278c:	pop	{r4, pc}
   22790:	push	{r4, r5, r6, lr}
   22794:	mov	r5, r0
   22798:	mov	r4, r1
   2279c:	mov	r0, r1
   227a0:	bl	2227c <_obstack_memory_used@@Base+0x28a8>
   227a4:	mov	r2, r4
   227a8:	mov	r1, r5
   227ac:	bl	11930 <memcpy@plt>
   227b0:	pop	{r4, r5, r6, pc}
   227b4:	push	{r4, r5, r6, lr}
   227b8:	mov	r5, r0
   227bc:	mov	r4, r1
   227c0:	mov	r0, r1
   227c4:	bl	22290 <_obstack_memory_used@@Base+0x28bc>
   227c8:	mov	r2, r4
   227cc:	mov	r1, r5
   227d0:	bl	11930 <memcpy@plt>
   227d4:	pop	{r4, r5, r6, pc}
   227d8:	push	{r4, r5, r6, lr}
   227dc:	mov	r5, r0
   227e0:	mov	r4, r1
   227e4:	add	r0, r1, #1
   227e8:	bl	22290 <_obstack_memory_used@@Base+0x28bc>
   227ec:	mov	r2, #0
   227f0:	strb	r2, [r0, r4]
   227f4:	mov	r2, r4
   227f8:	mov	r1, r5
   227fc:	bl	11930 <memcpy@plt>
   22800:	pop	{r4, r5, r6, pc}
   22804:	push	{r4, lr}
   22808:	mov	r4, r0
   2280c:	bl	11b94 <strlen@plt>
   22810:	add	r1, r0, #1
   22814:	mov	r0, r4
   22818:	bl	22790 <_obstack_memory_used@@Base+0x2dbc>
   2281c:	pop	{r4, pc}
   22820:	push	{r4, lr}
   22824:	ldr	r3, [pc, #40]	; 22854 <_obstack_memory_used@@Base+0x2e80>
   22828:	ldr	r4, [r3]
   2282c:	mov	r2, #5
   22830:	ldr	r1, [pc, #32]	; 22858 <_obstack_memory_used@@Base+0x2e84>
   22834:	mov	r0, #0
   22838:	bl	11984 <dcgettext@plt>
   2283c:	mov	r3, r0
   22840:	ldr	r2, [pc, #20]	; 2285c <_obstack_memory_used@@Base+0x2e88>
   22844:	mov	r1, #0
   22848:	mov	r0, r4
   2284c:	bl	11a8c <error@plt>
   22850:	bl	11d2c <abort@plt>
   22854:	andeq	r9, r3, r4, asr #5
   22858:	muleq	r2, r4, r1
   2285c:	strdeq	r7, [r2], -r4
   22860:	push	{r4, r5, r6, r7, lr}
   22864:	sub	sp, sp, #20
   22868:	mov	r7, r0
   2286c:	mov	r4, r2
   22870:	mov	r5, r3
   22874:	ldr	r6, [sp, #56]	; 0x38
   22878:	ldr	r3, [sp, #48]	; 0x30
   2287c:	str	r3, [sp]
   22880:	add	r3, sp, #8
   22884:	mov	r2, r1
   22888:	mov	r1, #0
   2288c:	bl	22c64 <_obstack_memory_used@@Base+0x3290>
   22890:	cmp	r0, #0
   22894:	bne	22914 <_obstack_memory_used@@Base+0x2f40>
   22898:	ldrd	r0, [sp, #8]
   2289c:	ldrd	r2, [sp, #40]	; 0x28
   228a0:	cmp	r1, r3
   228a4:	cmpeq	r0, r2
   228a8:	movhi	r3, #1
   228ac:	movls	r3, #0
   228b0:	cmp	r1, r5
   228b4:	cmpeq	r0, r4
   228b8:	orrcc	r3, r3, #1
   228bc:	cmp	r3, #0
   228c0:	beq	2298c <_obstack_memory_used@@Base+0x2fb8>
   228c4:	mvn	r2, #-1073741824	; 0xc0000000
   228c8:	mov	r3, #0
   228cc:	cmp	r1, r3
   228d0:	cmpeq	r0, r2
   228d4:	bls	22904 <_obstack_memory_used@@Base+0x2f30>
   228d8:	bl	11bb8 <__errno_location@plt>
   228dc:	mov	r3, #75	; 0x4b
   228e0:	str	r3, [r0]
   228e4:	cmp	r6, #0
   228e8:	bne	22964 <_obstack_memory_used@@Base+0x2f90>
   228ec:	mov	r6, #1
   228f0:	bl	11bb8 <__errno_location@plt>
   228f4:	ldr	r4, [r0]
   228f8:	cmp	r4, #22
   228fc:	moveq	r4, #0
   22900:	b	2296c <_obstack_memory_used@@Base+0x2f98>
   22904:	bl	11bb8 <__errno_location@plt>
   22908:	mov	r3, #34	; 0x22
   2290c:	str	r3, [r0]
   22910:	b	228e4 <_obstack_memory_used@@Base+0x2f10>
   22914:	cmp	r0, #1
   22918:	beq	22930 <_obstack_memory_used@@Base+0x2f5c>
   2291c:	cmp	r0, #3
   22920:	beq	22954 <_obstack_memory_used@@Base+0x2f80>
   22924:	cmp	r6, #0
   22928:	moveq	r6, #1
   2292c:	b	228f0 <_obstack_memory_used@@Base+0x2f1c>
   22930:	bl	11bb8 <__errno_location@plt>
   22934:	mov	r3, #75	; 0x4b
   22938:	str	r3, [r0]
   2293c:	cmp	r6, #0
   22940:	bne	228f0 <_obstack_memory_used@@Base+0x2f1c>
   22944:	bl	11bb8 <__errno_location@plt>
   22948:	ldr	r4, [r0]
   2294c:	mov	r6, #1
   22950:	b	2296c <_obstack_memory_used@@Base+0x2f98>
   22954:	bl	11bb8 <__errno_location@plt>
   22958:	mov	r3, #0
   2295c:	str	r3, [r0]
   22960:	b	2293c <_obstack_memory_used@@Base+0x2f68>
   22964:	bl	11bb8 <__errno_location@plt>
   22968:	ldr	r4, [r0]
   2296c:	mov	r0, r7
   22970:	bl	21558 <_obstack_memory_used@@Base+0x1b84>
   22974:	str	r0, [sp]
   22978:	ldr	r3, [sp, #52]	; 0x34
   2297c:	ldr	r2, [pc, #16]	; 22994 <_obstack_memory_used@@Base+0x2fc0>
   22980:	mov	r1, r4
   22984:	mov	r0, r6
   22988:	bl	11a8c <error@plt>
   2298c:	add	sp, sp, #20
   22990:	pop	{r4, r5, r6, r7, pc}
   22994:	strdeq	r7, [r2], -r8
   22998:	push	{r4, r5, lr}
   2299c:	sub	sp, sp, #28
   229a0:	ldr	r1, [sp, #56]	; 0x38
   229a4:	str	r1, [sp, #16]
   229a8:	ldr	r1, [sp, #52]	; 0x34
   229ac:	str	r1, [sp, #12]
   229b0:	ldr	r1, [sp, #48]	; 0x30
   229b4:	str	r1, [sp, #8]
   229b8:	ldrd	r4, [sp, #40]	; 0x28
   229bc:	strd	r4, [sp]
   229c0:	mov	r1, #10
   229c4:	bl	22860 <_obstack_memory_used@@Base+0x2e8c>
   229c8:	add	sp, sp, #28
   229cc:	pop	{r4, r5, pc}
   229d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229d4:	sub	sp, sp, #116	; 0x74
   229d8:	mov	r3, #100	; 0x64
   229dc:	str	r3, [sp, #8]
   229e0:	bl	11bb8 <__errno_location@plt>
   229e4:	mov	r5, r0
   229e8:	mov	fp, #0
   229ec:	add	sl, sp, #12
   229f0:	mov	r4, fp
   229f4:	mov	r6, #1
   229f8:	ldr	r7, [pc, #196]	; 22ac4 <_obstack_memory_used@@Base+0x30f0>
   229fc:	mvn	r8, #0
   22a00:	b	22a74 <_obstack_memory_used@@Base+0x30a0>
   22a04:	cmp	fp, #0
   22a08:	bne	22ab8 <_obstack_memory_used@@Base+0x30e4>
   22a0c:	mov	r1, r0
   22a10:	mov	r0, sl
   22a14:	bl	227b4 <_obstack_memory_used@@Base+0x2de0>
   22a18:	mov	fp, r0
   22a1c:	b	22ab8 <_obstack_memory_used@@Base+0x30e4>
   22a20:	mov	r0, fp
   22a24:	bl	1b388 <__assert_fail@plt+0x9614>
   22a28:	ldr	r2, [r5]
   22a2c:	cmp	r2, #22
   22a30:	lsrls	r3, r7, r2
   22a34:	eorls	r3, r3, #1
   22a38:	andls	r3, r3, #1
   22a3c:	movhi	r3, r6
   22a40:	cmp	r2, #36	; 0x24
   22a44:	moveq	r3, #0
   22a48:	andne	r3, r3, #1
   22a4c:	cmp	r3, #0
   22a50:	bne	22ab4 <_obstack_memory_used@@Base+0x30e0>
   22a54:	str	r6, [sp]
   22a58:	mov	r3, r8
   22a5c:	mov	r2, r6
   22a60:	add	r1, sp, #8
   22a64:	mov	r0, r4
   22a68:	bl	22428 <_obstack_memory_used@@Base+0x2a54>
   22a6c:	mov	fp, r0
   22a70:	mov	sl, r0
   22a74:	ldr	r9, [sp, #8]
   22a78:	sub	r9, r9, #1
   22a7c:	strb	r4, [sl, r9]
   22a80:	str	r4, [r5]
   22a84:	mov	r1, r9
   22a88:	mov	r0, sl
   22a8c:	bl	11a98 <gethostname@plt>
   22a90:	cmp	r0, #0
   22a94:	bne	22a20 <_obstack_memory_used@@Base+0x304c>
   22a98:	mov	r0, sl
   22a9c:	bl	11b94 <strlen@plt>
   22aa0:	add	r0, r0, #1
   22aa4:	cmp	r9, r0
   22aa8:	bgt	22a04 <_obstack_memory_used@@Base+0x3030>
   22aac:	str	r4, [r5]
   22ab0:	b	22a20 <_obstack_memory_used@@Base+0x304c>
   22ab4:	mov	fp, #0
   22ab8:	mov	r0, fp
   22abc:	add	sp, sp, #116	; 0x74
   22ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ac4:	subeq	r1, r0, r1
   22ac8:	push	{lr}		; (str lr, [sp, #-4]!)
   22acc:	sub	sp, sp, #20
   22ad0:	ldr	ip, [pc, #144]	; 22b68 <_obstack_memory_used@@Base+0x3194>
   22ad4:	ldr	r5, [ip]
   22ad8:	sub	r0, r0, #1
   22adc:	cmp	r0, #3
   22ae0:	ldrls	pc, [pc, r0, lsl #2]
   22ae4:	b	22b00 <_obstack_memory_used@@Base+0x312c>
   22ae8:	andeq	r2, r2, r4, lsl #22
   22aec:	strdeq	r2, [r2], -r8
   22af0:	strdeq	r2, [r2], -r8
   22af4:	andeq	r2, r2, ip, lsl #22
   22af8:	ldr	r0, [pc, #108]	; 22b6c <_obstack_memory_used@@Base+0x3198>
   22afc:	b	22b10 <_obstack_memory_used@@Base+0x313c>
   22b00:	bl	11d2c <abort@plt>
   22b04:	ldr	r0, [pc, #100]	; 22b70 <_obstack_memory_used@@Base+0x319c>
   22b08:	b	22b10 <_obstack_memory_used@@Base+0x313c>
   22b0c:	ldr	r0, [pc, #96]	; 22b74 <_obstack_memory_used@@Base+0x31a0>
   22b10:	cmp	r1, #0
   22b14:	ldrlt	r4, [pc, #92]	; 22b78 <_obstack_memory_used@@Base+0x31a4>
   22b18:	sublt	r4, r4, r1
   22b1c:	strblt	r2, [sp, #12]
   22b20:	movlt	r3, #0
   22b24:	strblt	r3, [sp, #13]
   22b28:	addlt	r6, sp, #12
   22b2c:	ldrge	r6, [r3, r1, lsl #4]
   22b30:	ldrge	r4, [pc, #64]	; 22b78 <_obstack_memory_used@@Base+0x31a4>
   22b34:	mov	r2, #5
   22b38:	mov	r1, r0
   22b3c:	mov	r0, #0
   22b40:	bl	11984 <dcgettext@plt>
   22b44:	ldr	r3, [sp, #24]
   22b48:	str	r3, [sp, #4]
   22b4c:	str	r6, [sp]
   22b50:	mov	r3, r4
   22b54:	mov	r2, r0
   22b58:	mov	r1, #0
   22b5c:	mov	r0, r5
   22b60:	bl	11a8c <error@plt>
   22b64:	bl	11d2c <abort@plt>
   22b68:	andeq	r9, r3, r4, asr #5
   22b6c:	andeq	r8, r2, r0, ror #11
   22b70:	andeq	r8, r2, r8, lsl #12
   22b74:	andeq	r8, r2, r4, asr #11
   22b78:	andeq	r8, r2, r8, lsr #12
   22b7c:	push	{r4, r5, r6, lr}
   22b80:	mov	r5, r0
   22b84:	subs	r4, r1, #0
   22b88:	blt	22bdc <_obstack_memory_used@@Base+0x3208>
   22b8c:	cmp	r4, #0
   22b90:	moveq	r3, #0
   22b94:	beq	22bc0 <_obstack_memory_used@@Base+0x31ec>
   22b98:	mov	r2, r4
   22b9c:	asr	r3, r4, #31
   22ba0:	mvn	r0, #0
   22ba4:	mvn	r1, #0
   22ba8:	bl	23d74 <_obstack_memory_used@@Base+0x43a0>
   22bac:	ldrd	r2, [r5]
   22bb0:	cmp	r1, r3
   22bb4:	cmpeq	r0, r2
   22bb8:	movcc	r3, #1
   22bbc:	movcs	r3, #0
   22bc0:	cmp	r3, #0
   22bc4:	beq	22bfc <_obstack_memory_used@@Base+0x3228>
   22bc8:	mvn	r2, #0
   22bcc:	mvn	r3, #0
   22bd0:	strd	r2, [r5]
   22bd4:	mov	r0, #1
   22bd8:	pop	{r4, r5, r6, pc}
   22bdc:	mov	r1, r4
   22be0:	mov	r0, #0
   22be4:	bl	236a8 <_obstack_memory_used@@Base+0x3cd4>
   22be8:	ldrd	r2, [r5]
   22bec:	orrs	r3, r2, r3
   22bf0:	movne	r3, #1
   22bf4:	moveq	r3, #0
   22bf8:	b	22bc0 <_obstack_memory_used@@Base+0x31ec>
   22bfc:	asr	r3, r4, #31
   22c00:	ldr	r1, [r5, #4]
   22c04:	ldr	r2, [r5]
   22c08:	mul	r3, r3, r2
   22c0c:	mla	r1, r4, r1, r3
   22c10:	umull	r2, r3, r2, r4
   22c14:	add	r3, r1, r3
   22c18:	strd	r2, [r5]
   22c1c:	mov	r0, #0
   22c20:	pop	{r4, r5, r6, pc}
   22c24:	push	{r4, r5, r6, r7, r8, lr}
   22c28:	subs	r4, r2, #0
   22c2c:	beq	22c5c <_obstack_memory_used@@Base+0x3288>
   22c30:	mov	r7, r1
   22c34:	mov	r6, r0
   22c38:	mov	r5, #0
   22c3c:	mov	r1, r7
   22c40:	mov	r0, r6
   22c44:	bl	22b7c <_obstack_memory_used@@Base+0x31a8>
   22c48:	orr	r5, r5, r0
   22c4c:	subs	r4, r4, #1
   22c50:	bne	22c3c <_obstack_memory_used@@Base+0x3268>
   22c54:	mov	r0, r5
   22c58:	pop	{r4, r5, r6, r7, r8, pc}
   22c5c:	mov	r5, #0
   22c60:	b	22c54 <_obstack_memory_used@@Base+0x3280>
   22c64:	push	{r4, r5, r6, r7, r8, r9, lr}
   22c68:	sub	sp, sp, #20
   22c6c:	cmp	r2, #36	; 0x24
   22c70:	bhi	22cb0 <_obstack_memory_used@@Base+0x32dc>
   22c74:	mov	r5, r0
   22c78:	mov	r6, r1
   22c7c:	mov	r7, r2
   22c80:	mov	r9, r3
   22c84:	cmp	r1, #0
   22c88:	addeq	r6, sp, #12
   22c8c:	bl	11bb8 <__errno_location@plt>
   22c90:	mov	r8, r0
   22c94:	mov	r3, #0
   22c98:	str	r3, [r0]
   22c9c:	ldrb	r4, [r5]
   22ca0:	bl	11b58 <__ctype_b_loc@plt>
   22ca4:	ldr	r1, [r0]
   22ca8:	mov	r2, r5
   22cac:	b	22cc8 <_obstack_memory_used@@Base+0x32f4>
   22cb0:	ldr	r3, [pc, #1056]	; 230d8 <_obstack_memory_used@@Base+0x3704>
   22cb4:	mov	r2, #85	; 0x55
   22cb8:	ldr	r1, [pc, #1052]	; 230dc <_obstack_memory_used@@Base+0x3708>
   22cbc:	ldr	r0, [pc, #1052]	; 230e0 <_obstack_memory_used@@Base+0x370c>
   22cc0:	bl	11d74 <__assert_fail@plt>
   22cc4:	ldrb	r4, [r2, #1]!
   22cc8:	lsl	r3, r4, #1
   22ccc:	ldrh	r3, [r1, r3]
   22cd0:	tst	r3, #8192	; 0x2000
   22cd4:	bne	22cc4 <_obstack_memory_used@@Base+0x32f0>
   22cd8:	cmp	r4, #45	; 0x2d
   22cdc:	moveq	r4, #4
   22ce0:	bne	22cf0 <_obstack_memory_used@@Base+0x331c>
   22ce4:	mov	r0, r4
   22ce8:	add	sp, sp, #20
   22cec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   22cf0:	mov	r3, #0
   22cf4:	mov	r2, r7
   22cf8:	mov	r1, r6
   22cfc:	mov	r0, r5
   22d00:	bl	1193c <__strtoull_internal@plt>
   22d04:	strd	r0, [sp]
   22d08:	ldr	r7, [r6]
   22d0c:	cmp	r5, r7
   22d10:	beq	22d34 <_obstack_memory_used@@Base+0x3360>
   22d14:	ldr	r3, [r8]
   22d18:	cmp	r3, #0
   22d1c:	beq	22d7c <_obstack_memory_used@@Base+0x33a8>
   22d20:	cmp	r3, #34	; 0x22
   22d24:	moveq	r4, #1
   22d28:	beq	22d80 <_obstack_memory_used@@Base+0x33ac>
   22d2c:	mov	r4, #4
   22d30:	b	22ce4 <_obstack_memory_used@@Base+0x3310>
   22d34:	ldr	r3, [sp, #48]	; 0x30
   22d38:	cmp	r3, #0
   22d3c:	moveq	r4, #4
   22d40:	beq	22ce4 <_obstack_memory_used@@Base+0x3310>
   22d44:	ldrb	r1, [r7]
   22d48:	cmp	r1, #0
   22d4c:	moveq	r4, #4
   22d50:	beq	22ce4 <_obstack_memory_used@@Base+0x3310>
   22d54:	mov	r0, r3
   22d58:	bl	11ba0 <strchr@plt>
   22d5c:	cmp	r0, #0
   22d60:	moveq	r4, #4
   22d64:	beq	22ce4 <_obstack_memory_used@@Base+0x3310>
   22d68:	mov	r2, #1
   22d6c:	mov	r3, #0
   22d70:	strd	r2, [sp]
   22d74:	mov	r4, #0
   22d78:	b	22d8c <_obstack_memory_used@@Base+0x33b8>
   22d7c:	mov	r4, #0
   22d80:	ldr	r3, [sp, #48]	; 0x30
   22d84:	cmp	r3, #0
   22d88:	beq	22e7c <_obstack_memory_used@@Base+0x34a8>
   22d8c:	ldrb	r5, [r7]
   22d90:	cmp	r5, #0
   22d94:	beq	23014 <_obstack_memory_used@@Base+0x3640>
   22d98:	mov	r1, r5
   22d9c:	ldr	r0, [sp, #48]	; 0x30
   22da0:	bl	11ba0 <strchr@plt>
   22da4:	cmp	r0, #0
   22da8:	beq	22e84 <_obstack_memory_used@@Base+0x34b0>
   22dac:	sub	r3, r5, #69	; 0x45
   22db0:	cmp	r3, #47	; 0x2f
   22db4:	ldrls	pc, [pc, r3, lsl #2]
   22db8:	b	22ef0 <_obstack_memory_used@@Base+0x351c>
   22dbc:	muleq	r2, r4, lr
   22dc0:	strdeq	r2, [r2], -r0
   22dc4:	muleq	r2, r4, lr
   22dc8:	strdeq	r2, [r2], -r0
   22dcc:	strdeq	r2, [r2], -r0
   22dd0:	strdeq	r2, [r2], -r0
   22dd4:	muleq	r2, r4, lr
   22dd8:	strdeq	r2, [r2], -r0
   22ddc:	muleq	r2, r4, lr
   22de0:	strdeq	r2, [r2], -r0
   22de4:	strdeq	r2, [r2], -r0
   22de8:	muleq	r2, r4, lr
   22dec:	strdeq	r2, [r2], -r0
   22df0:	strdeq	r2, [r2], -r0
   22df4:	strdeq	r2, [r2], -r0
   22df8:	muleq	r2, r4, lr
   22dfc:	strdeq	r2, [r2], -r0
   22e00:	strdeq	r2, [r2], -r0
   22e04:	strdeq	r2, [r2], -r0
   22e08:	strdeq	r2, [r2], -r0
   22e0c:	muleq	r2, r4, lr
   22e10:	muleq	r2, r4, lr
   22e14:	strdeq	r2, [r2], -r0
   22e18:	strdeq	r2, [r2], -r0
   22e1c:	strdeq	r2, [r2], -r0
   22e20:	strdeq	r2, [r2], -r0
   22e24:	strdeq	r2, [r2], -r0
   22e28:	strdeq	r2, [r2], -r0
   22e2c:	strdeq	r2, [r2], -r0
   22e30:	strdeq	r2, [r2], -r0
   22e34:	strdeq	r2, [r2], -r0
   22e38:	strdeq	r2, [r2], -r0
   22e3c:	strdeq	r2, [r2], -r0
   22e40:	strdeq	r2, [r2], -r0
   22e44:	muleq	r2, r4, lr
   22e48:	strdeq	r2, [r2], -r0
   22e4c:	strdeq	r2, [r2], -r0
   22e50:	strdeq	r2, [r2], -r0
   22e54:	muleq	r2, r4, lr
   22e58:	strdeq	r2, [r2], -r0
   22e5c:	muleq	r2, r4, lr
   22e60:	strdeq	r2, [r2], -r0
   22e64:	strdeq	r2, [r2], -r0
   22e68:	strdeq	r2, [r2], -r0
   22e6c:	strdeq	r2, [r2], -r0
   22e70:	strdeq	r2, [r2], -r0
   22e74:	strdeq	r2, [r2], -r0
   22e78:	muleq	r2, r4, lr
   22e7c:	strd	r0, [r9]
   22e80:	b	22ce4 <_obstack_memory_used@@Base+0x3310>
   22e84:	ldrd	r2, [sp]
   22e88:	strd	r2, [r9]
   22e8c:	orr	r4, r4, #2
   22e90:	b	22ce4 <_obstack_memory_used@@Base+0x3310>
   22e94:	mov	r1, #48	; 0x30
   22e98:	ldr	r0, [sp, #48]	; 0x30
   22e9c:	bl	11ba0 <strchr@plt>
   22ea0:	cmp	r0, #0
   22ea4:	beq	22fe0 <_obstack_memory_used@@Base+0x360c>
   22ea8:	ldrb	r3, [r7, #1]
   22eac:	cmp	r3, #68	; 0x44
   22eb0:	beq	22ecc <_obstack_memory_used@@Base+0x34f8>
   22eb4:	cmp	r3, #105	; 0x69
   22eb8:	beq	22ed8 <_obstack_memory_used@@Base+0x3504>
   22ebc:	cmp	r3, #66	; 0x42
   22ec0:	movne	r7, #1
   22ec4:	movne	r1, #1024	; 0x400
   22ec8:	bne	22ef8 <_obstack_memory_used@@Base+0x3524>
   22ecc:	mov	r7, #2
   22ed0:	mov	r1, #1000	; 0x3e8
   22ed4:	b	22ef8 <_obstack_memory_used@@Base+0x3524>
   22ed8:	ldrb	r7, [r7, #2]
   22edc:	cmp	r7, #66	; 0x42
   22ee0:	movne	r7, #1
   22ee4:	moveq	r7, #3
   22ee8:	mov	r1, #1024	; 0x400
   22eec:	b	22ef8 <_obstack_memory_used@@Base+0x3524>
   22ef0:	mov	r7, #1
   22ef4:	mov	r1, #1024	; 0x400
   22ef8:	sub	r5, r5, #66	; 0x42
   22efc:	cmp	r5, #53	; 0x35
   22f00:	ldrls	pc, [pc, r5, lsl #2]
   22f04:	b	230c0 <_obstack_memory_used@@Base+0x36ec>
   22f08:	andeq	r3, r2, r0, lsr #32
   22f0c:	andeq	r3, r2, r0, asr #1
   22f10:	andeq	r3, r2, r0, asr #1
   22f14:	andeq	r3, r2, r0, lsr r0
   22f18:	andeq	r3, r2, r0, asr #1
   22f1c:	andeq	r3, r2, r0, asr #32
   22f20:	andeq	r3, r2, r0, asr #1
   22f24:	andeq	r3, r2, r0, asr #1
   22f28:	andeq	r3, r2, r0, asr #1
   22f2c:	andeq	r3, r2, r0, asr r0
   22f30:	andeq	r3, r2, r0, asr #1
   22f34:	andeq	r3, r2, r0, rrx
   22f38:	andeq	r3, r2, r0, asr #1
   22f3c:	andeq	r3, r2, r0, asr #1
   22f40:	andeq	r3, r2, r0, ror r0
   22f44:	andeq	r3, r2, r0, asr #1
   22f48:	andeq	r3, r2, r0, asr #1
   22f4c:	andeq	r3, r2, r0, asr #1
   22f50:	andeq	r3, r2, r0, lsl #1
   22f54:	andeq	r3, r2, r0, asr #1
   22f58:	andeq	r3, r2, r0, asr #1
   22f5c:	andeq	r3, r2, r0, asr #1
   22f60:	andeq	r3, r2, r0, asr #1
   22f64:	andeq	r3, r2, r0, lsr #1
   22f68:	strheq	r3, [r2], -r0
   22f6c:	andeq	r3, r2, r0, asr #1
   22f70:	andeq	r3, r2, r0, asr #1
   22f74:	andeq	r3, r2, r0, asr #1
   22f78:	andeq	r3, r2, r0, asr #1
   22f7c:	andeq	r3, r2, r0, asr #1
   22f80:	andeq	r3, r2, r0, asr #1
   22f84:	andeq	r3, r2, r0, asr #1
   22f88:	andeq	r2, r2, ip, ror #31
   22f8c:	ldrdeq	r3, [r2], -r0
   22f90:	andeq	r3, r2, r0, asr #1
   22f94:	andeq	r3, r2, r0, asr #1
   22f98:	andeq	r3, r2, r0, asr #1
   22f9c:	andeq	r3, r2, r0, asr #32
   22fa0:	andeq	r3, r2, r0, asr #1
   22fa4:	andeq	r3, r2, r0, asr #1
   22fa8:	andeq	r3, r2, r0, asr #1
   22fac:	andeq	r3, r2, r0, asr r0
   22fb0:	andeq	r3, r2, r0, asr #1
   22fb4:	andeq	r3, r2, r0, rrx
   22fb8:	andeq	r3, r2, r0, asr #1
   22fbc:	andeq	r3, r2, r0, asr #1
   22fc0:	andeq	r3, r2, r0, asr #1
   22fc4:	andeq	r3, r2, r0, asr #1
   22fc8:	andeq	r3, r2, r0, asr #1
   22fcc:	andeq	r3, r2, r0, asr #1
   22fd0:	andeq	r3, r2, r0, lsl #1
   22fd4:	andeq	r3, r2, r0, asr #1
   22fd8:	andeq	r3, r2, r0, asr #1
   22fdc:	muleq	r2, r0, r0
   22fe0:	mov	r7, #1
   22fe4:	mov	r1, #1024	; 0x400
   22fe8:	b	22ef8 <_obstack_memory_used@@Base+0x3524>
   22fec:	mov	r1, #512	; 0x200
   22ff0:	mov	r0, sp
   22ff4:	bl	22b7c <_obstack_memory_used@@Base+0x31a8>
   22ff8:	orr	r4, r4, r0
   22ffc:	ldr	r3, [r6]
   23000:	add	r2, r3, r7
   23004:	str	r2, [r6]
   23008:	ldrb	r3, [r3, r7]
   2300c:	cmp	r3, #0
   23010:	orrne	r4, r4, #2
   23014:	ldrd	r2, [sp]
   23018:	strd	r2, [r9]
   2301c:	b	22ce4 <_obstack_memory_used@@Base+0x3310>
   23020:	mov	r1, #1024	; 0x400
   23024:	mov	r0, sp
   23028:	bl	22b7c <_obstack_memory_used@@Base+0x31a8>
   2302c:	b	22ff8 <_obstack_memory_used@@Base+0x3624>
   23030:	mov	r2, #6
   23034:	mov	r0, sp
   23038:	bl	22c24 <_obstack_memory_used@@Base+0x3250>
   2303c:	b	22ff8 <_obstack_memory_used@@Base+0x3624>
   23040:	mov	r2, #3
   23044:	mov	r0, sp
   23048:	bl	22c24 <_obstack_memory_used@@Base+0x3250>
   2304c:	b	22ff8 <_obstack_memory_used@@Base+0x3624>
   23050:	mov	r2, #1
   23054:	mov	r0, sp
   23058:	bl	22c24 <_obstack_memory_used@@Base+0x3250>
   2305c:	b	22ff8 <_obstack_memory_used@@Base+0x3624>
   23060:	mov	r2, #2
   23064:	mov	r0, sp
   23068:	bl	22c24 <_obstack_memory_used@@Base+0x3250>
   2306c:	b	22ff8 <_obstack_memory_used@@Base+0x3624>
   23070:	mov	r2, #5
   23074:	mov	r0, sp
   23078:	bl	22c24 <_obstack_memory_used@@Base+0x3250>
   2307c:	b	22ff8 <_obstack_memory_used@@Base+0x3624>
   23080:	mov	r2, #4
   23084:	mov	r0, sp
   23088:	bl	22c24 <_obstack_memory_used@@Base+0x3250>
   2308c:	b	22ff8 <_obstack_memory_used@@Base+0x3624>
   23090:	mov	r1, #2
   23094:	mov	r0, sp
   23098:	bl	22b7c <_obstack_memory_used@@Base+0x31a8>
   2309c:	b	22ff8 <_obstack_memory_used@@Base+0x3624>
   230a0:	mov	r2, #8
   230a4:	mov	r0, sp
   230a8:	bl	22c24 <_obstack_memory_used@@Base+0x3250>
   230ac:	b	22ff8 <_obstack_memory_used@@Base+0x3624>
   230b0:	mov	r2, #7
   230b4:	mov	r0, sp
   230b8:	bl	22c24 <_obstack_memory_used@@Base+0x3250>
   230bc:	b	22ff8 <_obstack_memory_used@@Base+0x3624>
   230c0:	ldrd	r2, [sp]
   230c4:	strd	r2, [r9]
   230c8:	orr	r4, r4, #2
   230cc:	b	22ce4 <_obstack_memory_used@@Base+0x3310>
   230d0:	mov	r0, #0
   230d4:	b	22ff8 <_obstack_memory_used@@Base+0x3624>
   230d8:	andeq	r8, r2, ip, lsr #12
   230dc:	andeq	r8, r2, r8, lsr r6
   230e0:	andeq	r8, r2, r8, asr #12
   230e4:	push	{r4, lr}
   230e8:	mov	r2, r0
   230ec:	mov	r3, r1
   230f0:	cmp	r1, #0
   230f4:	cmpne	r0, #0
   230f8:	moveq	r3, #1
   230fc:	moveq	r2, r3
   23100:	umull	r0, r1, r2, r3
   23104:	cmp	r0, #0
   23108:	cmpge	r1, #0
   2310c:	bne	23120 <_obstack_memory_used@@Base+0x374c>
   23110:	mov	r1, r3
   23114:	mov	r0, r2
   23118:	bl	11858 <calloc@plt>
   2311c:	pop	{r4, pc}
   23120:	bl	11bb8 <__errno_location@plt>
   23124:	mov	r3, #12
   23128:	str	r3, [r0]
   2312c:	mov	r0, #0
   23130:	pop	{r4, pc}
   23134:	push	{r4, lr}
   23138:	cmp	r0, #0
   2313c:	moveq	r0, #1
   23140:	cmp	r0, #0
   23144:	blt	23150 <_obstack_memory_used@@Base+0x377c>
   23148:	bl	11ae0 <malloc@plt>
   2314c:	pop	{r4, pc}
   23150:	bl	11bb8 <__errno_location@plt>
   23154:	mov	r3, #12
   23158:	str	r3, [r0]
   2315c:	mov	r0, #0
   23160:	pop	{r4, pc}
   23164:	push	{r4, lr}
   23168:	cmp	r0, #0
   2316c:	beq	23188 <_obstack_memory_used@@Base+0x37b4>
   23170:	cmp	r1, #0
   23174:	beq	23194 <_obstack_memory_used@@Base+0x37c0>
   23178:	cmp	r1, #0
   2317c:	blt	231a0 <_obstack_memory_used@@Base+0x37cc>
   23180:	bl	11990 <realloc@plt>
   23184:	pop	{r4, pc}
   23188:	mov	r0, r1
   2318c:	bl	23134 <_obstack_memory_used@@Base+0x3760>
   23190:	pop	{r4, pc}
   23194:	bl	1b388 <__assert_fail@plt+0x9614>
   23198:	mov	r0, #0
   2319c:	pop	{r4, pc}
   231a0:	bl	11bb8 <__errno_location@plt>
   231a4:	mov	r3, #12
   231a8:	str	r3, [r0]
   231ac:	mov	r0, #0
   231b0:	pop	{r4, pc}
   231b4:	push	{r4, r5, r6, lr}
   231b8:	mov	r5, r0
   231bc:	bl	11a68 <__fpending@plt>
   231c0:	mov	r6, r0
   231c4:	ldr	r4, [r5]
   231c8:	and	r4, r4, #32
   231cc:	mov	r0, r5
   231d0:	bl	2322c <_obstack_memory_used@@Base+0x3858>
   231d4:	cmp	r4, #0
   231d8:	bne	23200 <_obstack_memory_used@@Base+0x382c>
   231dc:	cmp	r0, #0
   231e0:	popeq	{r4, r5, r6, pc}
   231e4:	cmp	r6, #0
   231e8:	bne	2321c <_obstack_memory_used@@Base+0x3848>
   231ec:	bl	11bb8 <__errno_location@plt>
   231f0:	ldr	r0, [r0]
   231f4:	subs	r0, r0, #9
   231f8:	mvnne	r0, #0
   231fc:	pop	{r4, r5, r6, pc}
   23200:	cmp	r0, #0
   23204:	bne	23224 <_obstack_memory_used@@Base+0x3850>
   23208:	bl	11bb8 <__errno_location@plt>
   2320c:	mov	r3, #0
   23210:	str	r3, [r0]
   23214:	mvn	r0, #0
   23218:	pop	{r4, r5, r6, pc}
   2321c:	mvn	r0, #0
   23220:	pop	{r4, r5, r6, pc}
   23224:	mvn	r0, #0
   23228:	pop	{r4, r5, r6, pc}
   2322c:	push	{r4, r5, r6, lr}
   23230:	sub	sp, sp, #8
   23234:	mov	r4, r0
   23238:	bl	11c0c <fileno@plt>
   2323c:	cmp	r0, #0
   23240:	blt	232b8 <_obstack_memory_used@@Base+0x38e4>
   23244:	mov	r0, r4
   23248:	bl	11b10 <__freading@plt>
   2324c:	cmp	r0, #0
   23250:	beq	23284 <_obstack_memory_used@@Base+0x38b0>
   23254:	mov	r0, r4
   23258:	bl	11c0c <fileno@plt>
   2325c:	mov	r3, #1
   23260:	str	r3, [sp]
   23264:	mov	r2, #0
   23268:	mov	r3, #0
   2326c:	bl	11a44 <lseek64@plt>
   23270:	mvn	r2, #0
   23274:	mvn	r3, #0
   23278:	cmp	r1, r3
   2327c:	cmpeq	r0, r2
   23280:	beq	232c4 <_obstack_memory_used@@Base+0x38f0>
   23284:	mov	r0, r4
   23288:	bl	232d4 <_obstack_memory_used@@Base+0x3900>
   2328c:	cmp	r0, #0
   23290:	beq	232c4 <_obstack_memory_used@@Base+0x38f0>
   23294:	bl	11bb8 <__errno_location@plt>
   23298:	mov	r5, r0
   2329c:	ldr	r6, [r0]
   232a0:	mov	r0, r4
   232a4:	bl	11c24 <fclose@plt>
   232a8:	cmp	r6, #0
   232ac:	strne	r6, [r5]
   232b0:	mvnne	r0, #0
   232b4:	b	232cc <_obstack_memory_used@@Base+0x38f8>
   232b8:	mov	r0, r4
   232bc:	bl	11c24 <fclose@plt>
   232c0:	b	232cc <_obstack_memory_used@@Base+0x38f8>
   232c4:	mov	r0, r4
   232c8:	bl	11c24 <fclose@plt>
   232cc:	add	sp, sp, #8
   232d0:	pop	{r4, r5, r6, pc}
   232d4:	push	{r4, lr}
   232d8:	sub	sp, sp, #8
   232dc:	subs	r4, r0, #0
   232e0:	beq	232f4 <_obstack_memory_used@@Base+0x3920>
   232e4:	mov	r0, r4
   232e8:	bl	11b10 <__freading@plt>
   232ec:	cmp	r0, #0
   232f0:	bne	23304 <_obstack_memory_used@@Base+0x3930>
   232f4:	mov	r0, r4
   232f8:	bl	118c4 <fflush@plt>
   232fc:	add	sp, sp, #8
   23300:	pop	{r4, pc}
   23304:	ldr	r3, [r4]
   23308:	tst	r3, #256	; 0x100
   2330c:	bne	2331c <_obstack_memory_used@@Base+0x3948>
   23310:	mov	r0, r4
   23314:	bl	118c4 <fflush@plt>
   23318:	b	232fc <_obstack_memory_used@@Base+0x3928>
   2331c:	mov	r3, #1
   23320:	str	r3, [sp]
   23324:	mov	r2, #0
   23328:	mov	r3, #0
   2332c:	mov	r0, r4
   23330:	bl	23338 <_obstack_memory_used@@Base+0x3964>
   23334:	b	23310 <_obstack_memory_used@@Base+0x393c>
   23338:	push	{r4, r5, r6, r7, lr}
   2333c:	sub	sp, sp, #12
   23340:	mov	r4, r0
   23344:	mov	r6, r2
   23348:	mov	r7, r3
   2334c:	ldr	r5, [sp, #32]
   23350:	ldr	r2, [r0, #8]
   23354:	ldr	r3, [r0, #4]
   23358:	cmp	r2, r3
   2335c:	beq	2337c <_obstack_memory_used@@Base+0x39a8>
   23360:	str	r5, [sp]
   23364:	mov	r2, r6
   23368:	mov	r3, r7
   2336c:	mov	r0, r4
   23370:	bl	11c30 <fseeko64@plt>
   23374:	add	sp, sp, #12
   23378:	pop	{r4, r5, r6, r7, pc}
   2337c:	ldr	r2, [r0, #20]
   23380:	ldr	r3, [r0, #16]
   23384:	cmp	r2, r3
   23388:	bne	23360 <_obstack_memory_used@@Base+0x398c>
   2338c:	ldr	r3, [r0, #36]	; 0x24
   23390:	cmp	r3, #0
   23394:	bne	23360 <_obstack_memory_used@@Base+0x398c>
   23398:	bl	11c0c <fileno@plt>
   2339c:	str	r5, [sp]
   233a0:	mov	r2, r6
   233a4:	mov	r3, r7
   233a8:	bl	11a44 <lseek64@plt>
   233ac:	mvn	r2, #0
   233b0:	mvn	r3, #0
   233b4:	cmp	r1, r3
   233b8:	cmpeq	r0, r2
   233bc:	beq	233d8 <_obstack_memory_used@@Base+0x3a04>
   233c0:	ldr	r3, [r4]
   233c4:	bic	r3, r3, #16
   233c8:	str	r3, [r4]
   233cc:	strd	r0, [r4, #80]	; 0x50
   233d0:	mov	r0, #0
   233d4:	b	23374 <_obstack_memory_used@@Base+0x39a0>
   233d8:	mvn	r0, #0
   233dc:	b	23374 <_obstack_memory_used@@Base+0x39a0>
   233e0:	push	{r4, lr}
   233e4:	ldrb	r3, [r0]
   233e8:	cmp	r3, #0
   233ec:	beq	23414 <_obstack_memory_used@@Base+0x3a40>
   233f0:	mov	r2, r0
   233f4:	mov	r0, #0
   233f8:	add	r0, r3, r0, ror #23
   233fc:	ldrb	r3, [r2, #1]!
   23400:	cmp	r3, #0
   23404:	bne	233f8 <_obstack_memory_used@@Base+0x3a24>
   23408:	bl	23688 <_obstack_memory_used@@Base+0x3cb4>
   2340c:	mov	r0, r1
   23410:	pop	{r4, pc}
   23414:	mov	r0, #0
   23418:	b	23408 <_obstack_memory_used@@Base+0x3a34>
   2341c:	push	{r4, lr}
   23420:	mov	r0, #14
   23424:	bl	11c90 <nl_langinfo@plt>
   23428:	cmp	r0, #0
   2342c:	beq	23444 <_obstack_memory_used@@Base+0x3a70>
   23430:	ldrb	r2, [r0]
   23434:	ldr	r3, [pc, #16]	; 2344c <_obstack_memory_used@@Base+0x3a78>
   23438:	cmp	r2, #0
   2343c:	moveq	r0, r3
   23440:	pop	{r4, pc}
   23444:	ldr	r0, [pc]	; 2344c <_obstack_memory_used@@Base+0x3a78>
   23448:	pop	{r4, pc}
   2344c:	andeq	r8, r2, r0, ror r6
   23450:	push	{r4, r5, r6, lr}
   23454:	mov	r6, r0
   23458:	mov	r5, r1
   2345c:	subs	r4, r2, #0
   23460:	beq	2348c <_obstack_memory_used@@Base+0x3ab8>
   23464:	mov	r1, r4
   23468:	mvn	r0, #0
   2346c:	bl	2349c <_obstack_memory_used@@Base+0x3ac8>
   23470:	cmp	r0, r5
   23474:	bcs	2348c <_obstack_memory_used@@Base+0x3ab8>
   23478:	bl	11bb8 <__errno_location@plt>
   2347c:	mov	r3, #12
   23480:	str	r3, [r0]
   23484:	mov	r0, #0
   23488:	pop	{r4, r5, r6, pc}
   2348c:	mul	r1, r5, r4
   23490:	mov	r0, r6
   23494:	bl	23164 <_obstack_memory_used@@Base+0x3790>
   23498:	pop	{r4, r5, r6, pc}
   2349c:	subs	r2, r1, #1
   234a0:	bxeq	lr
   234a4:	bcc	2367c <_obstack_memory_used@@Base+0x3ca8>
   234a8:	cmp	r0, r1
   234ac:	bls	23660 <_obstack_memory_used@@Base+0x3c8c>
   234b0:	tst	r1, r2
   234b4:	beq	2366c <_obstack_memory_used@@Base+0x3c98>
   234b8:	clz	r3, r0
   234bc:	clz	r2, r1
   234c0:	sub	r3, r2, r3
   234c4:	rsbs	r3, r3, #31
   234c8:	addne	r3, r3, r3, lsl #1
   234cc:	mov	r2, #0
   234d0:	addne	pc, pc, r3, lsl #2
   234d4:	nop			; (mov r0, r0)
   234d8:	cmp	r0, r1, lsl #31
   234dc:	adc	r2, r2, r2
   234e0:	subcs	r0, r0, r1, lsl #31
   234e4:	cmp	r0, r1, lsl #30
   234e8:	adc	r2, r2, r2
   234ec:	subcs	r0, r0, r1, lsl #30
   234f0:	cmp	r0, r1, lsl #29
   234f4:	adc	r2, r2, r2
   234f8:	subcs	r0, r0, r1, lsl #29
   234fc:	cmp	r0, r1, lsl #28
   23500:	adc	r2, r2, r2
   23504:	subcs	r0, r0, r1, lsl #28
   23508:	cmp	r0, r1, lsl #27
   2350c:	adc	r2, r2, r2
   23510:	subcs	r0, r0, r1, lsl #27
   23514:	cmp	r0, r1, lsl #26
   23518:	adc	r2, r2, r2
   2351c:	subcs	r0, r0, r1, lsl #26
   23520:	cmp	r0, r1, lsl #25
   23524:	adc	r2, r2, r2
   23528:	subcs	r0, r0, r1, lsl #25
   2352c:	cmp	r0, r1, lsl #24
   23530:	adc	r2, r2, r2
   23534:	subcs	r0, r0, r1, lsl #24
   23538:	cmp	r0, r1, lsl #23
   2353c:	adc	r2, r2, r2
   23540:	subcs	r0, r0, r1, lsl #23
   23544:	cmp	r0, r1, lsl #22
   23548:	adc	r2, r2, r2
   2354c:	subcs	r0, r0, r1, lsl #22
   23550:	cmp	r0, r1, lsl #21
   23554:	adc	r2, r2, r2
   23558:	subcs	r0, r0, r1, lsl #21
   2355c:	cmp	r0, r1, lsl #20
   23560:	adc	r2, r2, r2
   23564:	subcs	r0, r0, r1, lsl #20
   23568:	cmp	r0, r1, lsl #19
   2356c:	adc	r2, r2, r2
   23570:	subcs	r0, r0, r1, lsl #19
   23574:	cmp	r0, r1, lsl #18
   23578:	adc	r2, r2, r2
   2357c:	subcs	r0, r0, r1, lsl #18
   23580:	cmp	r0, r1, lsl #17
   23584:	adc	r2, r2, r2
   23588:	subcs	r0, r0, r1, lsl #17
   2358c:	cmp	r0, r1, lsl #16
   23590:	adc	r2, r2, r2
   23594:	subcs	r0, r0, r1, lsl #16
   23598:	cmp	r0, r1, lsl #15
   2359c:	adc	r2, r2, r2
   235a0:	subcs	r0, r0, r1, lsl #15
   235a4:	cmp	r0, r1, lsl #14
   235a8:	adc	r2, r2, r2
   235ac:	subcs	r0, r0, r1, lsl #14
   235b0:	cmp	r0, r1, lsl #13
   235b4:	adc	r2, r2, r2
   235b8:	subcs	r0, r0, r1, lsl #13
   235bc:	cmp	r0, r1, lsl #12
   235c0:	adc	r2, r2, r2
   235c4:	subcs	r0, r0, r1, lsl #12
   235c8:	cmp	r0, r1, lsl #11
   235cc:	adc	r2, r2, r2
   235d0:	subcs	r0, r0, r1, lsl #11
   235d4:	cmp	r0, r1, lsl #10
   235d8:	adc	r2, r2, r2
   235dc:	subcs	r0, r0, r1, lsl #10
   235e0:	cmp	r0, r1, lsl #9
   235e4:	adc	r2, r2, r2
   235e8:	subcs	r0, r0, r1, lsl #9
   235ec:	cmp	r0, r1, lsl #8
   235f0:	adc	r2, r2, r2
   235f4:	subcs	r0, r0, r1, lsl #8
   235f8:	cmp	r0, r1, lsl #7
   235fc:	adc	r2, r2, r2
   23600:	subcs	r0, r0, r1, lsl #7
   23604:	cmp	r0, r1, lsl #6
   23608:	adc	r2, r2, r2
   2360c:	subcs	r0, r0, r1, lsl #6
   23610:	cmp	r0, r1, lsl #5
   23614:	adc	r2, r2, r2
   23618:	subcs	r0, r0, r1, lsl #5
   2361c:	cmp	r0, r1, lsl #4
   23620:	adc	r2, r2, r2
   23624:	subcs	r0, r0, r1, lsl #4
   23628:	cmp	r0, r1, lsl #3
   2362c:	adc	r2, r2, r2
   23630:	subcs	r0, r0, r1, lsl #3
   23634:	cmp	r0, r1, lsl #2
   23638:	adc	r2, r2, r2
   2363c:	subcs	r0, r0, r1, lsl #2
   23640:	cmp	r0, r1, lsl #1
   23644:	adc	r2, r2, r2
   23648:	subcs	r0, r0, r1, lsl #1
   2364c:	cmp	r0, r1
   23650:	adc	r2, r2, r2
   23654:	subcs	r0, r0, r1
   23658:	mov	r0, r2
   2365c:	bx	lr
   23660:	moveq	r0, #1
   23664:	movne	r0, #0
   23668:	bx	lr
   2366c:	clz	r2, r1
   23670:	rsb	r2, r2, #31
   23674:	lsr	r0, r0, r2
   23678:	bx	lr
   2367c:	cmp	r0, #0
   23680:	mvnne	r0, #0
   23684:	b	23db0 <_obstack_memory_used@@Base+0x43dc>
   23688:	cmp	r1, #0
   2368c:	beq	2367c <_obstack_memory_used@@Base+0x3ca8>
   23690:	push	{r0, r1, lr}
   23694:	bl	2349c <_obstack_memory_used@@Base+0x3ac8>
   23698:	pop	{r1, r2, lr}
   2369c:	mul	r3, r2, r0
   236a0:	sub	r1, r1, r3
   236a4:	bx	lr
   236a8:	cmp	r1, #0
   236ac:	beq	238b8 <_obstack_memory_used@@Base+0x3ee4>
   236b0:	eor	ip, r0, r1
   236b4:	rsbmi	r1, r1, #0
   236b8:	subs	r2, r1, #1
   236bc:	beq	23884 <_obstack_memory_used@@Base+0x3eb0>
   236c0:	movs	r3, r0
   236c4:	rsbmi	r3, r0, #0
   236c8:	cmp	r3, r1
   236cc:	bls	23890 <_obstack_memory_used@@Base+0x3ebc>
   236d0:	tst	r1, r2
   236d4:	beq	238a0 <_obstack_memory_used@@Base+0x3ecc>
   236d8:	clz	r2, r3
   236dc:	clz	r0, r1
   236e0:	sub	r2, r0, r2
   236e4:	rsbs	r2, r2, #31
   236e8:	addne	r2, r2, r2, lsl #1
   236ec:	mov	r0, #0
   236f0:	addne	pc, pc, r2, lsl #2
   236f4:	nop			; (mov r0, r0)
   236f8:	cmp	r3, r1, lsl #31
   236fc:	adc	r0, r0, r0
   23700:	subcs	r3, r3, r1, lsl #31
   23704:	cmp	r3, r1, lsl #30
   23708:	adc	r0, r0, r0
   2370c:	subcs	r3, r3, r1, lsl #30
   23710:	cmp	r3, r1, lsl #29
   23714:	adc	r0, r0, r0
   23718:	subcs	r3, r3, r1, lsl #29
   2371c:	cmp	r3, r1, lsl #28
   23720:	adc	r0, r0, r0
   23724:	subcs	r3, r3, r1, lsl #28
   23728:	cmp	r3, r1, lsl #27
   2372c:	adc	r0, r0, r0
   23730:	subcs	r3, r3, r1, lsl #27
   23734:	cmp	r3, r1, lsl #26
   23738:	adc	r0, r0, r0
   2373c:	subcs	r3, r3, r1, lsl #26
   23740:	cmp	r3, r1, lsl #25
   23744:	adc	r0, r0, r0
   23748:	subcs	r3, r3, r1, lsl #25
   2374c:	cmp	r3, r1, lsl #24
   23750:	adc	r0, r0, r0
   23754:	subcs	r3, r3, r1, lsl #24
   23758:	cmp	r3, r1, lsl #23
   2375c:	adc	r0, r0, r0
   23760:	subcs	r3, r3, r1, lsl #23
   23764:	cmp	r3, r1, lsl #22
   23768:	adc	r0, r0, r0
   2376c:	subcs	r3, r3, r1, lsl #22
   23770:	cmp	r3, r1, lsl #21
   23774:	adc	r0, r0, r0
   23778:	subcs	r3, r3, r1, lsl #21
   2377c:	cmp	r3, r1, lsl #20
   23780:	adc	r0, r0, r0
   23784:	subcs	r3, r3, r1, lsl #20
   23788:	cmp	r3, r1, lsl #19
   2378c:	adc	r0, r0, r0
   23790:	subcs	r3, r3, r1, lsl #19
   23794:	cmp	r3, r1, lsl #18
   23798:	adc	r0, r0, r0
   2379c:	subcs	r3, r3, r1, lsl #18
   237a0:	cmp	r3, r1, lsl #17
   237a4:	adc	r0, r0, r0
   237a8:	subcs	r3, r3, r1, lsl #17
   237ac:	cmp	r3, r1, lsl #16
   237b0:	adc	r0, r0, r0
   237b4:	subcs	r3, r3, r1, lsl #16
   237b8:	cmp	r3, r1, lsl #15
   237bc:	adc	r0, r0, r0
   237c0:	subcs	r3, r3, r1, lsl #15
   237c4:	cmp	r3, r1, lsl #14
   237c8:	adc	r0, r0, r0
   237cc:	subcs	r3, r3, r1, lsl #14
   237d0:	cmp	r3, r1, lsl #13
   237d4:	adc	r0, r0, r0
   237d8:	subcs	r3, r3, r1, lsl #13
   237dc:	cmp	r3, r1, lsl #12
   237e0:	adc	r0, r0, r0
   237e4:	subcs	r3, r3, r1, lsl #12
   237e8:	cmp	r3, r1, lsl #11
   237ec:	adc	r0, r0, r0
   237f0:	subcs	r3, r3, r1, lsl #11
   237f4:	cmp	r3, r1, lsl #10
   237f8:	adc	r0, r0, r0
   237fc:	subcs	r3, r3, r1, lsl #10
   23800:	cmp	r3, r1, lsl #9
   23804:	adc	r0, r0, r0
   23808:	subcs	r3, r3, r1, lsl #9
   2380c:	cmp	r3, r1, lsl #8
   23810:	adc	r0, r0, r0
   23814:	subcs	r3, r3, r1, lsl #8
   23818:	cmp	r3, r1, lsl #7
   2381c:	adc	r0, r0, r0
   23820:	subcs	r3, r3, r1, lsl #7
   23824:	cmp	r3, r1, lsl #6
   23828:	adc	r0, r0, r0
   2382c:	subcs	r3, r3, r1, lsl #6
   23830:	cmp	r3, r1, lsl #5
   23834:	adc	r0, r0, r0
   23838:	subcs	r3, r3, r1, lsl #5
   2383c:	cmp	r3, r1, lsl #4
   23840:	adc	r0, r0, r0
   23844:	subcs	r3, r3, r1, lsl #4
   23848:	cmp	r3, r1, lsl #3
   2384c:	adc	r0, r0, r0
   23850:	subcs	r3, r3, r1, lsl #3
   23854:	cmp	r3, r1, lsl #2
   23858:	adc	r0, r0, r0
   2385c:	subcs	r3, r3, r1, lsl #2
   23860:	cmp	r3, r1, lsl #1
   23864:	adc	r0, r0, r0
   23868:	subcs	r3, r3, r1, lsl #1
   2386c:	cmp	r3, r1
   23870:	adc	r0, r0, r0
   23874:	subcs	r3, r3, r1
   23878:	cmp	ip, #0
   2387c:	rsbmi	r0, r0, #0
   23880:	bx	lr
   23884:	teq	ip, r0
   23888:	rsbmi	r0, r0, #0
   2388c:	bx	lr
   23890:	movcc	r0, #0
   23894:	asreq	r0, ip, #31
   23898:	orreq	r0, r0, #1
   2389c:	bx	lr
   238a0:	clz	r2, r1
   238a4:	rsb	r2, r2, #31
   238a8:	cmp	ip, #0
   238ac:	lsr	r0, r3, r2
   238b0:	rsbmi	r0, r0, #0
   238b4:	bx	lr
   238b8:	cmp	r0, #0
   238bc:	mvngt	r0, #-2147483648	; 0x80000000
   238c0:	movlt	r0, #-2147483648	; 0x80000000
   238c4:	b	23db0 <_obstack_memory_used@@Base+0x43dc>
   238c8:	cmp	r1, #0
   238cc:	beq	238b8 <_obstack_memory_used@@Base+0x3ee4>
   238d0:	push	{r0, r1, lr}
   238d4:	bl	236b0 <_obstack_memory_used@@Base+0x3cdc>
   238d8:	pop	{r1, r2, lr}
   238dc:	mul	r3, r2, r0
   238e0:	sub	r1, r1, r3
   238e4:	bx	lr
   238e8:	eor	r1, r1, #-2147483648	; 0x80000000
   238ec:	b	238f4 <_obstack_memory_used@@Base+0x3f20>
   238f0:	eor	r3, r3, #-2147483648	; 0x80000000
   238f4:	push	{r4, r5, lr}
   238f8:	lsl	r4, r1, #1
   238fc:	lsl	r5, r3, #1
   23900:	teq	r4, r5
   23904:	teqeq	r0, r2
   23908:	orrsne	ip, r4, r0
   2390c:	orrsne	ip, r5, r2
   23910:	mvnsne	ip, r4, asr #21
   23914:	mvnsne	ip, r5, asr #21
   23918:	beq	23b04 <_obstack_memory_used@@Base+0x4130>
   2391c:	lsr	r4, r4, #21
   23920:	rsbs	r5, r4, r5, lsr #21
   23924:	rsblt	r5, r5, #0
   23928:	ble	23948 <_obstack_memory_used@@Base+0x3f74>
   2392c:	add	r4, r4, r5
   23930:	eor	r2, r0, r2
   23934:	eor	r3, r1, r3
   23938:	eor	r0, r2, r0
   2393c:	eor	r1, r3, r1
   23940:	eor	r2, r0, r2
   23944:	eor	r3, r1, r3
   23948:	cmp	r5, #54	; 0x36
   2394c:	pophi	{r4, r5, pc}
   23950:	tst	r1, #-2147483648	; 0x80000000
   23954:	lsl	r1, r1, #12
   23958:	mov	ip, #1048576	; 0x100000
   2395c:	orr	r1, ip, r1, lsr #12
   23960:	beq	2396c <_obstack_memory_used@@Base+0x3f98>
   23964:	rsbs	r0, r0, #0
   23968:	rsc	r1, r1, #0
   2396c:	tst	r3, #-2147483648	; 0x80000000
   23970:	lsl	r3, r3, #12
   23974:	orr	r3, ip, r3, lsr #12
   23978:	beq	23984 <_obstack_memory_used@@Base+0x3fb0>
   2397c:	rsbs	r2, r2, #0
   23980:	rsc	r3, r3, #0
   23984:	teq	r4, r5
   23988:	beq	23aec <_obstack_memory_used@@Base+0x4118>
   2398c:	sub	r4, r4, #1
   23990:	rsbs	lr, r5, #32
   23994:	blt	239b0 <_obstack_memory_used@@Base+0x3fdc>
   23998:	lsl	ip, r2, lr
   2399c:	adds	r0, r0, r2, lsr r5
   239a0:	adc	r1, r1, #0
   239a4:	adds	r0, r0, r3, lsl lr
   239a8:	adcs	r1, r1, r3, asr r5
   239ac:	b	239cc <_obstack_memory_used@@Base+0x3ff8>
   239b0:	sub	r5, r5, #32
   239b4:	add	lr, lr, #32
   239b8:	cmp	r2, #1
   239bc:	lsl	ip, r3, lr
   239c0:	orrcs	ip, ip, #2
   239c4:	adds	r0, r0, r3, asr r5
   239c8:	adcs	r1, r1, r3, asr #31
   239cc:	and	r5, r1, #-2147483648	; 0x80000000
   239d0:	bpl	239e0 <_obstack_memory_used@@Base+0x400c>
   239d4:	rsbs	ip, ip, #0
   239d8:	rscs	r0, r0, #0
   239dc:	rsc	r1, r1, #0
   239e0:	cmp	r1, #1048576	; 0x100000
   239e4:	bcc	23a24 <_obstack_memory_used@@Base+0x4050>
   239e8:	cmp	r1, #2097152	; 0x200000
   239ec:	bcc	23a0c <_obstack_memory_used@@Base+0x4038>
   239f0:	lsrs	r1, r1, #1
   239f4:	rrxs	r0, r0
   239f8:	rrx	ip, ip
   239fc:	add	r4, r4, #1
   23a00:	lsl	r2, r4, #21
   23a04:	cmn	r2, #4194304	; 0x400000
   23a08:	bcs	23b64 <_obstack_memory_used@@Base+0x4190>
   23a0c:	cmp	ip, #-2147483648	; 0x80000000
   23a10:	lsrseq	ip, r0, #1
   23a14:	adcs	r0, r0, #0
   23a18:	adc	r1, r1, r4, lsl #20
   23a1c:	orr	r1, r1, r5
   23a20:	pop	{r4, r5, pc}
   23a24:	lsls	ip, ip, #1
   23a28:	adcs	r0, r0, r0
   23a2c:	adc	r1, r1, r1
   23a30:	tst	r1, #1048576	; 0x100000
   23a34:	sub	r4, r4, #1
   23a38:	bne	23a0c <_obstack_memory_used@@Base+0x4038>
   23a3c:	teq	r1, #0
   23a40:	moveq	r1, r0
   23a44:	moveq	r0, #0
   23a48:	clz	r3, r1
   23a4c:	addeq	r3, r3, #32
   23a50:	sub	r3, r3, #11
   23a54:	subs	r2, r3, #32
   23a58:	bge	23a7c <_obstack_memory_used@@Base+0x40a8>
   23a5c:	adds	r2, r2, #12
   23a60:	ble	23a78 <_obstack_memory_used@@Base+0x40a4>
   23a64:	add	ip, r2, #20
   23a68:	rsb	r2, r2, #12
   23a6c:	lsl	r0, r1, ip
   23a70:	lsr	r1, r1, r2
   23a74:	b	23a8c <_obstack_memory_used@@Base+0x40b8>
   23a78:	add	r2, r2, #20
   23a7c:	rsble	ip, r2, #32
   23a80:	lsl	r1, r1, r2
   23a84:	orrle	r1, r1, r0, lsr ip
   23a88:	lslle	r0, r0, r2
   23a8c:	subs	r4, r4, r3
   23a90:	addge	r1, r1, r4, lsl #20
   23a94:	orrge	r1, r1, r5
   23a98:	popge	{r4, r5, pc}
   23a9c:	mvn	r4, r4
   23aa0:	subs	r4, r4, #31
   23aa4:	bge	23ae0 <_obstack_memory_used@@Base+0x410c>
   23aa8:	adds	r4, r4, #12
   23aac:	bgt	23ac8 <_obstack_memory_used@@Base+0x40f4>
   23ab0:	add	r4, r4, #20
   23ab4:	rsb	r2, r4, #32
   23ab8:	lsr	r0, r0, r4
   23abc:	orr	r0, r0, r1, lsl r2
   23ac0:	orr	r1, r5, r1, lsr r4
   23ac4:	pop	{r4, r5, pc}
   23ac8:	rsb	r4, r4, #12
   23acc:	rsb	r2, r4, #32
   23ad0:	lsr	r0, r0, r2
   23ad4:	orr	r0, r0, r1, lsl r4
   23ad8:	mov	r1, r5
   23adc:	pop	{r4, r5, pc}
   23ae0:	lsr	r0, r1, r4
   23ae4:	mov	r1, r5
   23ae8:	pop	{r4, r5, pc}
   23aec:	teq	r4, #0
   23af0:	eor	r3, r3, #1048576	; 0x100000
   23af4:	eoreq	r1, r1, #1048576	; 0x100000
   23af8:	addeq	r4, r4, #1
   23afc:	subne	r5, r5, #1
   23b00:	b	2398c <_obstack_memory_used@@Base+0x3fb8>
   23b04:	mvns	ip, r4, asr #21
   23b08:	mvnsne	ip, r5, asr #21
   23b0c:	beq	23b74 <_obstack_memory_used@@Base+0x41a0>
   23b10:	teq	r4, r5
   23b14:	teqeq	r0, r2
   23b18:	beq	23b2c <_obstack_memory_used@@Base+0x4158>
   23b1c:	orrs	ip, r4, r0
   23b20:	moveq	r1, r3
   23b24:	moveq	r0, r2
   23b28:	pop	{r4, r5, pc}
   23b2c:	teq	r1, r3
   23b30:	movne	r1, #0
   23b34:	movne	r0, #0
   23b38:	popne	{r4, r5, pc}
   23b3c:	lsrs	ip, r4, #21
   23b40:	bne	23b54 <_obstack_memory_used@@Base+0x4180>
   23b44:	lsls	r0, r0, #1
   23b48:	adcs	r1, r1, r1
   23b4c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   23b50:	pop	{r4, r5, pc}
   23b54:	adds	r4, r4, #4194304	; 0x400000
   23b58:	addcc	r1, r1, #1048576	; 0x100000
   23b5c:	popcc	{r4, r5, pc}
   23b60:	and	r5, r1, #-2147483648	; 0x80000000
   23b64:	orr	r1, r5, #2130706432	; 0x7f000000
   23b68:	orr	r1, r1, #15728640	; 0xf00000
   23b6c:	mov	r0, #0
   23b70:	pop	{r4, r5, pc}
   23b74:	mvns	ip, r4, asr #21
   23b78:	movne	r1, r3
   23b7c:	movne	r0, r2
   23b80:	mvnseq	ip, r5, asr #21
   23b84:	movne	r3, r1
   23b88:	movne	r2, r0
   23b8c:	orrs	r4, r0, r1, lsl #12
   23b90:	orrseq	r5, r2, r3, lsl #12
   23b94:	teqeq	r1, r3
   23b98:	orrne	r1, r1, #524288	; 0x80000
   23b9c:	pop	{r4, r5, pc}
   23ba0:	teq	r0, #0
   23ba4:	moveq	r1, #0
   23ba8:	bxeq	lr
   23bac:	push	{r4, r5, lr}
   23bb0:	mov	r4, #1024	; 0x400
   23bb4:	add	r4, r4, #50	; 0x32
   23bb8:	mov	r5, #0
   23bbc:	mov	r1, #0
   23bc0:	b	23a3c <_obstack_memory_used@@Base+0x4068>
   23bc4:	teq	r0, #0
   23bc8:	moveq	r1, #0
   23bcc:	bxeq	lr
   23bd0:	push	{r4, r5, lr}
   23bd4:	mov	r4, #1024	; 0x400
   23bd8:	add	r4, r4, #50	; 0x32
   23bdc:	ands	r5, r0, #-2147483648	; 0x80000000
   23be0:	rsbmi	r0, r0, #0
   23be4:	mov	r1, #0
   23be8:	b	23a3c <_obstack_memory_used@@Base+0x4068>
   23bec:	lsls	r2, r0, #1
   23bf0:	asr	r1, r2, #3
   23bf4:	rrx	r1, r1
   23bf8:	lsl	r0, r2, #28
   23bfc:	andsne	r3, r2, #-16777216	; 0xff000000
   23c00:	teqne	r3, #-16777216	; 0xff000000
   23c04:	eorne	r1, r1, #939524096	; 0x38000000
   23c08:	bxne	lr
   23c0c:	teq	r2, #0
   23c10:	teqne	r3, #-16777216	; 0xff000000
   23c14:	bxeq	lr
   23c18:	push	{r4, r5, lr}
   23c1c:	mov	r4, #896	; 0x380
   23c20:	and	r5, r1, #-2147483648	; 0x80000000
   23c24:	bic	r1, r1, #-2147483648	; 0x80000000
   23c28:	b	23a3c <_obstack_memory_used@@Base+0x4068>
   23c2c:	orrs	r2, r0, r1
   23c30:	bxeq	lr
   23c34:	push	{r4, r5, lr}
   23c38:	mov	r5, #0
   23c3c:	b	23c5c <_obstack_memory_used@@Base+0x4288>
   23c40:	orrs	r2, r0, r1
   23c44:	bxeq	lr
   23c48:	push	{r4, r5, lr}
   23c4c:	ands	r5, r1, #-2147483648	; 0x80000000
   23c50:	bpl	23c5c <_obstack_memory_used@@Base+0x4288>
   23c54:	rsbs	r0, r0, #0
   23c58:	rsc	r1, r1, #0
   23c5c:	mov	r4, #1024	; 0x400
   23c60:	add	r4, r4, #50	; 0x32
   23c64:	lsrs	ip, r1, #22
   23c68:	beq	239e0 <_obstack_memory_used@@Base+0x400c>
   23c6c:	mov	r2, #3
   23c70:	lsrs	ip, ip, #3
   23c74:	addne	r2, r2, #3
   23c78:	lsrs	ip, ip, #3
   23c7c:	addne	r2, r2, #3
   23c80:	add	r2, r2, ip, lsr #3
   23c84:	rsb	r3, r2, #32
   23c88:	lsl	ip, r0, r3
   23c8c:	lsr	r0, r0, r2
   23c90:	orr	r0, r0, r1, lsl r3
   23c94:	lsr	r1, r1, r2
   23c98:	add	r4, r4, r2
   23c9c:	b	239e0 <_obstack_memory_used@@Base+0x400c>
   23ca0:	cmp	r3, #0
   23ca4:	cmpeq	r2, #0
   23ca8:	bne	23ccc <_obstack_memory_used@@Base+0x42f8>
   23cac:	cmp	r1, #0
   23cb0:	movlt	r1, #-2147483648	; 0x80000000
   23cb4:	movlt	r0, #0
   23cb8:	blt	23cc8 <_obstack_memory_used@@Base+0x42f4>
   23cbc:	cmpeq	r0, #0
   23cc0:	mvnne	r1, #-2147483648	; 0x80000000
   23cc4:	mvnne	r0, #0
   23cc8:	b	23db0 <_obstack_memory_used@@Base+0x43dc>
   23ccc:	sub	sp, sp, #8
   23cd0:	push	{sp, lr}
   23cd4:	cmp	r1, #0
   23cd8:	blt	23cf8 <_obstack_memory_used@@Base+0x4324>
   23cdc:	cmp	r3, #0
   23ce0:	blt	23d2c <_obstack_memory_used@@Base+0x4358>
   23ce4:	bl	23e08 <_obstack_memory_used@@Base+0x4434>
   23ce8:	ldr	lr, [sp, #4]
   23cec:	add	sp, sp, #8
   23cf0:	pop	{r2, r3}
   23cf4:	bx	lr
   23cf8:	rsbs	r0, r0, #0
   23cfc:	sbc	r1, r1, r1, lsl #1
   23d00:	cmp	r3, #0
   23d04:	blt	23d50 <_obstack_memory_used@@Base+0x437c>
   23d08:	bl	23e08 <_obstack_memory_used@@Base+0x4434>
   23d0c:	ldr	lr, [sp, #4]
   23d10:	add	sp, sp, #8
   23d14:	pop	{r2, r3}
   23d18:	rsbs	r0, r0, #0
   23d1c:	sbc	r1, r1, r1, lsl #1
   23d20:	rsbs	r2, r2, #0
   23d24:	sbc	r3, r3, r3, lsl #1
   23d28:	bx	lr
   23d2c:	rsbs	r2, r2, #0
   23d30:	sbc	r3, r3, r3, lsl #1
   23d34:	bl	23e08 <_obstack_memory_used@@Base+0x4434>
   23d38:	ldr	lr, [sp, #4]
   23d3c:	add	sp, sp, #8
   23d40:	pop	{r2, r3}
   23d44:	rsbs	r0, r0, #0
   23d48:	sbc	r1, r1, r1, lsl #1
   23d4c:	bx	lr
   23d50:	rsbs	r2, r2, #0
   23d54:	sbc	r3, r3, r3, lsl #1
   23d58:	bl	23e08 <_obstack_memory_used@@Base+0x4434>
   23d5c:	ldr	lr, [sp, #4]
   23d60:	add	sp, sp, #8
   23d64:	pop	{r2, r3}
   23d68:	rsbs	r2, r2, #0
   23d6c:	sbc	r3, r3, r3, lsl #1
   23d70:	bx	lr
   23d74:	cmp	r3, #0
   23d78:	cmpeq	r2, #0
   23d7c:	bne	23d94 <_obstack_memory_used@@Base+0x43c0>
   23d80:	cmp	r1, #0
   23d84:	cmpeq	r0, #0
   23d88:	mvnne	r1, #0
   23d8c:	mvnne	r0, #0
   23d90:	b	23db0 <_obstack_memory_used@@Base+0x43dc>
   23d94:	sub	sp, sp, #8
   23d98:	push	{sp, lr}
   23d9c:	bl	23e08 <_obstack_memory_used@@Base+0x4434>
   23da0:	ldr	lr, [sp, #4]
   23da4:	add	sp, sp, #8
   23da8:	pop	{r2, r3}
   23dac:	bx	lr
   23db0:	push	{r1, lr}
   23db4:	mov	r0, #8
   23db8:	bl	1187c <raise@plt>
   23dbc:	pop	{r1, pc}
   23dc0:	vmov	d7, r0, r1
   23dc4:	vldr	d6, [pc, #44]	; 23df8 <_obstack_memory_used@@Base+0x4424>
   23dc8:	vldr	d5, [pc, #48]	; 23e00 <_obstack_memory_used@@Base+0x442c>
   23dcc:	mov	r0, #0
   23dd0:	vmul.f64	d6, d7, d6
   23dd4:	vcvt.u32.f64	s12, d6
   23dd8:	vcvt.f64.u32	d4, s12
   23ddc:	vmov	r1, s12
   23de0:	vmls.f64	d7, d4, d5
   23de4:	vcvt.u32.f64	s14, d7
   23de8:	vmov	r3, s14
   23dec:	orr	r0, r0, r3
   23df0:	bx	lr
   23df4:	nop			; (mov r0, r0)
   23df8:	andeq	r0, r0, r0
   23dfc:	ldclcc	0, cr0, [r0]
   23e00:	andeq	r0, r0, r0
   23e04:	mvnsmi	r0, r0
   23e08:	cmp	r1, r3
   23e0c:	push	{r4, r5, r6, r7, r8, r9, lr}
   23e10:	cmpeq	r0, r2
   23e14:	mov	r4, r0
   23e18:	mov	r5, r1
   23e1c:	ldr	r9, [sp, #28]
   23e20:	movcc	r0, #0
   23e24:	movcc	r1, #0
   23e28:	bcc	23f20 <_obstack_memory_used@@Base+0x454c>
   23e2c:	cmp	r3, #0
   23e30:	clzeq	ip, r2
   23e34:	clzne	ip, r3
   23e38:	addeq	ip, ip, #32
   23e3c:	cmp	r5, #0
   23e40:	clzeq	r1, r4
   23e44:	addeq	r1, r1, #32
   23e48:	clzne	r1, r5
   23e4c:	sub	ip, ip, r1
   23e50:	sub	lr, ip, #32
   23e54:	lsl	r7, r3, ip
   23e58:	rsb	r8, ip, #32
   23e5c:	orr	r7, r7, r2, lsl lr
   23e60:	orr	r7, r7, r2, lsr r8
   23e64:	lsl	r6, r2, ip
   23e68:	cmp	r5, r7
   23e6c:	cmpeq	r4, r6
   23e70:	movcc	r0, #0
   23e74:	movcc	r1, #0
   23e78:	bcc	23e94 <_obstack_memory_used@@Base+0x44c0>
   23e7c:	mov	r3, #1
   23e80:	subs	r4, r4, r6
   23e84:	lsl	r1, r3, lr
   23e88:	lsl	r0, r3, ip
   23e8c:	orr	r1, r1, r3, lsr r8
   23e90:	sbc	r5, r5, r7
   23e94:	cmp	ip, #0
   23e98:	beq	23f20 <_obstack_memory_used@@Base+0x454c>
   23e9c:	lsrs	r3, r7, #1
   23ea0:	rrx	r2, r6
   23ea4:	mov	r6, ip
   23ea8:	b	23ecc <_obstack_memory_used@@Base+0x44f8>
   23eac:	subs	r4, r4, r2
   23eb0:	sbc	r5, r5, r3
   23eb4:	adds	r4, r4, r4
   23eb8:	adc	r5, r5, r5
   23ebc:	adds	r4, r4, #1
   23ec0:	adc	r5, r5, #0
   23ec4:	subs	r6, r6, #1
   23ec8:	beq	23ee8 <_obstack_memory_used@@Base+0x4514>
   23ecc:	cmp	r5, r3
   23ed0:	cmpeq	r4, r2
   23ed4:	bcs	23eac <_obstack_memory_used@@Base+0x44d8>
   23ed8:	adds	r4, r4, r4
   23edc:	adc	r5, r5, r5
   23ee0:	subs	r6, r6, #1
   23ee4:	bne	23ecc <_obstack_memory_used@@Base+0x44f8>
   23ee8:	lsr	r6, r4, ip
   23eec:	lsr	r7, r5, ip
   23ef0:	orr	r6, r6, r5, lsl r8
   23ef4:	adds	r2, r0, r4
   23ef8:	orr	r6, r6, r5, lsr lr
   23efc:	adc	r3, r1, r5
   23f00:	lsl	r1, r7, ip
   23f04:	orr	r1, r1, r6, lsl lr
   23f08:	lsl	r0, r6, ip
   23f0c:	orr	r1, r1, r6, lsr r8
   23f10:	subs	r0, r2, r0
   23f14:	mov	r4, r6
   23f18:	mov	r5, r7
   23f1c:	sbc	r1, r3, r1
   23f20:	cmp	r9, #0
   23f24:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   23f28:	strd	r4, [r9]
   23f2c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23f30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23f34:	mov	r7, r0
   23f38:	ldr	r6, [pc, #72]	; 23f88 <_obstack_memory_used@@Base+0x45b4>
   23f3c:	ldr	r5, [pc, #72]	; 23f8c <_obstack_memory_used@@Base+0x45b8>
   23f40:	add	r6, pc, r6
   23f44:	add	r5, pc, r5
   23f48:	sub	r6, r6, r5
   23f4c:	mov	r8, r1
   23f50:	mov	r9, r2
   23f54:	bl	11838 <calloc@plt-0x20>
   23f58:	asrs	r6, r6, #2
   23f5c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   23f60:	mov	r4, #0
   23f64:	add	r4, r4, #1
   23f68:	ldr	r3, [r5], #4
   23f6c:	mov	r2, r9
   23f70:	mov	r1, r8
   23f74:	mov	r0, r7
   23f78:	blx	r3
   23f7c:	cmp	r6, r4
   23f80:	bne	23f64 <_obstack_memory_used@@Base+0x4590>
   23f84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23f88:			; <UNDEFINED> instruction: 0x00014fb8
   23f8c:			; <UNDEFINED> instruction: 0x00014fb0
   23f90:	bx	lr
   23f94:	ldr	r3, [pc, #12]	; 23fa8 <_obstack_memory_used@@Base+0x45d4>
   23f98:	mov	r1, #0
   23f9c:	add	r3, pc, r3
   23fa0:	ldr	r2, [r3]
   23fa4:	b	11bdc <__cxa_atexit@plt>
   23fa8:	andeq	r5, r1, r8, lsr #4

Disassembly of section .fini:

00023fac <.fini>:
   23fac:	push	{r3, lr}
   23fb0:	pop	{r3, pc}
