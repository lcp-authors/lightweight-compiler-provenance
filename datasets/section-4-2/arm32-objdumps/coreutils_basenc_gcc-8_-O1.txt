
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010ca0 <.init>:
   10ca0:	push	{r3, lr}
   10ca4:	bl	10f78 <__assert_fail@plt+0x48>
   10ca8:	pop	{r3, pc}

Disassembly of section .plt:

00010cac <calloc@plt-0x14>:
   10cac:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb0:	ldr	lr, [pc, #4]	; 10cbc <calloc@plt-0x4>
   10cb4:	add	lr, pc, lr
   10cb8:	ldr	pc, [lr, #8]!
   10cbc:	andeq	r9, r1, r4, asr #6

00010cc0 <calloc@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #102400	; 0x19000
   10cc8:	ldr	pc, [ip, #836]!	; 0x344

00010ccc <fputs_unlocked@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #102400	; 0x19000
   10cd4:	ldr	pc, [ip, #828]!	; 0x33c

00010cd8 <raise@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #102400	; 0x19000
   10ce0:	ldr	pc, [ip, #820]!	; 0x334

00010ce4 <strcmp@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #102400	; 0x19000
   10cec:	ldr	pc, [ip, #812]!	; 0x32c

00010cf0 <posix_fadvise64@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #102400	; 0x19000
   10cf8:	ldr	pc, [ip, #804]!	; 0x324

00010cfc <fflush@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #102400	; 0x19000
   10d04:	ldr	pc, [ip, #796]!	; 0x31c

00010d08 <memmove@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #102400	; 0x19000
   10d10:	ldr	pc, [ip, #788]!	; 0x314

00010d14 <free@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #102400	; 0x19000
   10d1c:	ldr	pc, [ip, #780]!	; 0x30c

00010d20 <_exit@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #102400	; 0x19000
   10d28:	ldr	pc, [ip, #772]!	; 0x304

00010d2c <memcpy@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #102400	; 0x19000
   10d34:	ldr	pc, [ip, #764]!	; 0x2fc

00010d38 <mbsinit@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #102400	; 0x19000
   10d40:	ldr	pc, [ip, #756]!	; 0x2f4

00010d44 <fwrite_unlocked@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #102400	; 0x19000
   10d4c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d50 <memcmp@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #102400	; 0x19000
   10d58:	ldr	pc, [ip, #740]!	; 0x2e4

00010d5c <fputc_unlocked@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #102400	; 0x19000
   10d64:	ldr	pc, [ip, #732]!	; 0x2dc

00010d68 <dcgettext@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #102400	; 0x19000
   10d70:	ldr	pc, [ip, #724]!	; 0x2d4

00010d74 <realloc@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #102400	; 0x19000
   10d7c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d80 <textdomain@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #102400	; 0x19000
   10d88:	ldr	pc, [ip, #708]!	; 0x2c4

00010d8c <iswprint@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #102400	; 0x19000
   10d94:	ldr	pc, [ip, #700]!	; 0x2bc

00010d98 <fwrite@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #102400	; 0x19000
   10da0:	ldr	pc, [ip, #692]!	; 0x2b4

00010da4 <lseek64@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #102400	; 0x19000
   10dac:	ldr	pc, [ip, #684]!	; 0x2ac

00010db0 <__ctype_get_mb_cur_max@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #102400	; 0x19000
   10db8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dbc <__fpending@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #102400	; 0x19000
   10dc4:	ldr	pc, [ip, #668]!	; 0x29c

00010dc8 <mbrtowc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #102400	; 0x19000
   10dd0:	ldr	pc, [ip, #660]!	; 0x294

00010dd4 <error@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #102400	; 0x19000
   10ddc:	ldr	pc, [ip, #652]!	; 0x28c

00010de0 <malloc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #102400	; 0x19000
   10de8:	ldr	pc, [ip, #644]!	; 0x284

00010dec <__libc_start_main@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #102400	; 0x19000
   10df4:	ldr	pc, [ip, #636]!	; 0x27c

00010df8 <__freading@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #102400	; 0x19000
   10e00:	ldr	pc, [ip, #628]!	; 0x274

00010e04 <__gmon_start__@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #102400	; 0x19000
   10e0c:	ldr	pc, [ip, #620]!	; 0x26c

00010e10 <getopt_long@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #102400	; 0x19000
   10e18:	ldr	pc, [ip, #612]!	; 0x264

00010e1c <__ctype_b_loc@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #102400	; 0x19000
   10e24:	ldr	pc, [ip, #604]!	; 0x25c

00010e28 <exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #102400	; 0x19000
   10e30:	ldr	pc, [ip, #596]!	; 0x254

00010e34 <strlen@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #102400	; 0x19000
   10e3c:	ldr	pc, [ip, #588]!	; 0x24c

00010e40 <strchr@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #102400	; 0x19000
   10e48:	ldr	pc, [ip, #580]!	; 0x244

00010e4c <__errno_location@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #102400	; 0x19000
   10e54:	ldr	pc, [ip, #572]!	; 0x23c

00010e58 <__cxa_atexit@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #102400	; 0x19000
   10e60:	ldr	pc, [ip, #564]!	; 0x234

00010e64 <memset@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #102400	; 0x19000
   10e6c:	ldr	pc, [ip, #556]!	; 0x22c

00010e70 <__printf_chk@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #102400	; 0x19000
   10e78:	ldr	pc, [ip, #548]!	; 0x224

00010e7c <fileno@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #102400	; 0x19000
   10e84:	ldr	pc, [ip, #540]!	; 0x21c

00010e88 <__fprintf_chk@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #102400	; 0x19000
   10e90:	ldr	pc, [ip, #532]!	; 0x214

00010e94 <memchr@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #102400	; 0x19000
   10e9c:	ldr	pc, [ip, #524]!	; 0x20c

00010ea0 <fclose@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #102400	; 0x19000
   10ea8:	ldr	pc, [ip, #516]!	; 0x204

00010eac <fseeko64@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #102400	; 0x19000
   10eb4:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb8 <__overflow@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #102400	; 0x19000
   10ec0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec4 <setlocale@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #102400	; 0x19000
   10ecc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ed0 <strrchr@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #102400	; 0x19000
   10ed8:	ldr	pc, [ip, #484]!	; 0x1e4

00010edc <nl_langinfo@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #102400	; 0x19000
   10ee4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee8 <__strtoll_internal@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #102400	; 0x19000
   10ef0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef4 <fopen64@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #102400	; 0x19000
   10efc:	ldr	pc, [ip, #460]!	; 0x1cc

00010f00 <bindtextdomain@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #102400	; 0x19000
   10f08:	ldr	pc, [ip, #452]!	; 0x1c4

00010f0c <fread_unlocked@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #102400	; 0x19000
   10f14:	ldr	pc, [ip, #444]!	; 0x1bc

00010f18 <strncmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #102400	; 0x19000
   10f20:	ldr	pc, [ip, #436]!	; 0x1b4

00010f24 <abort@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #102400	; 0x19000
   10f2c:	ldr	pc, [ip, #428]!	; 0x1ac

00010f30 <__assert_fail@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #102400	; 0x19000
   10f38:	ldr	pc, [ip, #420]!	; 0x1a4

Disassembly of section .text:

00010f3c <.text>:
   10f3c:	mov	fp, #0
   10f40:	mov	lr, #0
   10f44:	pop	{r1}		; (ldr r1, [sp], #4)
   10f48:	mov	r2, sp
   10f4c:	push	{r2}		; (str r2, [sp, #-4]!)
   10f50:	push	{r0}		; (str r0, [sp, #-4]!)
   10f54:	ldr	ip, [pc, #16]	; 10f6c <__assert_fail@plt+0x3c>
   10f58:	push	{ip}		; (str ip, [sp, #-4]!)
   10f5c:	ldr	r0, [pc, #12]	; 10f70 <__assert_fail@plt+0x40>
   10f60:	ldr	r3, [pc, #12]	; 10f74 <__assert_fail@plt+0x44>
   10f64:	bl	10dec <__libc_start_main@plt>
   10f68:	bl	10f24 <abort@plt>
   10f6c:	muleq	r1, r0, ip
   10f70:	andeq	r2, r1, r8, lsr r2
   10f74:	andeq	r7, r1, r0, lsr ip
   10f78:	ldr	r3, [pc, #20]	; 10f94 <__assert_fail@plt+0x64>
   10f7c:	ldr	r2, [pc, #20]	; 10f98 <__assert_fail@plt+0x68>
   10f80:	add	r3, pc, r3
   10f84:	ldr	r2, [r3, r2]
   10f88:	cmp	r2, #0
   10f8c:	bxeq	lr
   10f90:	b	10e04 <__gmon_start__@plt>
   10f94:	andeq	r9, r1, r8, ror r0
   10f98:	andeq	r0, r0, r0, ror #1
   10f9c:	ldr	r0, [pc, #24]	; 10fbc <__assert_fail@plt+0x8c>
   10fa0:	ldr	r3, [pc, #24]	; 10fc0 <__assert_fail@plt+0x90>
   10fa4:	cmp	r3, r0
   10fa8:	bxeq	lr
   10fac:	ldr	r3, [pc, #16]	; 10fc4 <__assert_fail@plt+0x94>
   10fb0:	cmp	r3, #0
   10fb4:	bxeq	lr
   10fb8:	bx	r3
   10fbc:	andeq	sl, r2, r4, lsr r1
   10fc0:	andeq	sl, r2, r4, lsr r1
   10fc4:	andeq	r0, r0, r0
   10fc8:	ldr	r0, [pc, #36]	; 10ff4 <__assert_fail@plt+0xc4>
   10fcc:	ldr	r1, [pc, #36]	; 10ff8 <__assert_fail@plt+0xc8>
   10fd0:	sub	r1, r1, r0
   10fd4:	asr	r1, r1, #2
   10fd8:	add	r1, r1, r1, lsr #31
   10fdc:	asrs	r1, r1, #1
   10fe0:	bxeq	lr
   10fe4:	ldr	r3, [pc, #16]	; 10ffc <__assert_fail@plt+0xcc>
   10fe8:	cmp	r3, #0
   10fec:	bxeq	lr
   10ff0:	bx	r3
   10ff4:	andeq	sl, r2, r4, lsr r1
   10ff8:	andeq	sl, r2, r4, lsr r1
   10ffc:	andeq	r0, r0, r0
   11000:	push	{r4, lr}
   11004:	ldr	r4, [pc, #24]	; 11024 <__assert_fail@plt+0xf4>
   11008:	ldrb	r3, [r4]
   1100c:	cmp	r3, #0
   11010:	popne	{r4, pc}
   11014:	bl	10f9c <__assert_fail@plt+0x6c>
   11018:	mov	r3, #1
   1101c:	strb	r3, [r4]
   11020:	pop	{r4, pc}
   11024:	andeq	sl, r2, ip, asr r1
   11028:	b	10fc8 <__assert_fail@plt+0x98>
   1102c:	add	r0, r0, #2
   11030:	movw	r3, #21846	; 0x5556
   11034:	movt	r3, #21845	; 0x5555
   11038:	smull	r2, r3, r3, r0
   1103c:	sub	r0, r3, r0, asr #31
   11040:	lsl	r0, r0, #2
   11044:	bx	lr
   11048:	add	r0, r0, #4
   1104c:	movw	r3, #26215	; 0x6667
   11050:	movt	r3, #26214	; 0x6666
   11054:	smull	r2, r3, r3, r0
   11058:	asr	r0, r0, #31
   1105c:	rsb	r0, r0, r3, asr #1
   11060:	lsl	r0, r0, #3
   11064:	bx	lr
   11068:	sub	r3, r0, #48	; 0x30
   1106c:	uxtb	r3, r3
   11070:	sub	r0, r0, #65	; 0x41
   11074:	uxtb	r0, r0
   11078:	cmp	r0, #21
   1107c:	cmphi	r3, #9
   11080:	movls	r0, #1
   11084:	movhi	r0, #0
   11088:	bx	lr
   1108c:	sub	r3, r0, #48	; 0x30
   11090:	uxtb	r3, r3
   11094:	sub	r0, r0, #65	; 0x41
   11098:	uxtb	r0, r0
   1109c:	cmp	r0, #5
   110a0:	cmphi	r3, #9
   110a4:	movls	r0, #1
   110a8:	movhi	r0, #0
   110ac:	bx	lr
   110b0:	lsl	r0, r0, #1
   110b4:	bx	lr
   110b8:	cmp	r1, #0
   110bc:	bxeq	lr
   110c0:	push	{lr}		; (str lr, [sp, #-4]!)
   110c4:	add	r2, r2, #2
   110c8:	sub	ip, r0, #1
   110cc:	sub	r1, r1, #1
   110d0:	add	r0, r0, r1
   110d4:	movw	r1, #31928	; 0x7cb8
   110d8:	movt	r1, #1
   110dc:	ldrb	r3, [ip, #1]!
   110e0:	ldrb	lr, [r1, r3, lsr #4]
   110e4:	strb	lr, [r2, #-2]
   110e8:	and	r3, r3, #15
   110ec:	ldrb	r3, [r1, r3]
   110f0:	strb	r3, [r2, #-1]
   110f4:	add	r2, r2, #2
   110f8:	cmp	ip, r0
   110fc:	bne	110dc <__assert_fail@plt+0x1ac>
   11100:	pop	{pc}		; (ldr pc, [sp], #4)
   11104:	strd	r4, [sp, #-12]!
   11108:	str	lr, [sp, #8]
   1110c:	ldr	r5, [sp, #12]
   11110:	mov	ip, #0
   11114:	str	ip, [r5]
   11118:	cmp	r2, #0
   1111c:	movne	lr, r1
   11120:	addne	r1, r1, r2
   11124:	bne	11170 <__assert_fail@plt+0x240>
   11128:	ldrb	r0, [r0, #5]
   1112c:	eor	r0, r0, #1
   11130:	b	111a4 <__assert_fail@plt+0x274>
   11134:	ldrb	r4, [r0, #5]
   11138:	cmp	r4, #0
   1113c:	strbeq	ip, [r0, #4]
   11140:	beq	1115c <__assert_fail@plt+0x22c>
   11144:	ldrb	r2, [r0, #4]
   11148:	add	ip, ip, r2, lsl #4
   1114c:	strb	ip, [r3], #1
   11150:	ldr	ip, [r5]
   11154:	add	ip, ip, #1
   11158:	str	ip, [r5]
   1115c:	ldrb	ip, [r0, #5]
   11160:	eor	ip, ip, #1
   11164:	strb	ip, [r0, #5]
   11168:	cmp	r1, lr
   1116c:	beq	111a0 <__assert_fail@plt+0x270>
   11170:	ldrb	ip, [lr], #1
   11174:	cmp	ip, #10
   11178:	beq	11168 <__assert_fail@plt+0x238>
   1117c:	sub	r4, ip, #48	; 0x30
   11180:	cmp	r4, #9
   11184:	movls	ip, r4
   11188:	bls	11134 <__assert_fail@plt+0x204>
   1118c:	sub	r2, ip, #65	; 0x41
   11190:	cmp	r2, #5
   11194:	bhi	111b0 <__assert_fail@plt+0x280>
   11198:	sub	ip, ip, #55	; 0x37
   1119c:	b	11134 <__assert_fail@plt+0x204>
   111a0:	mov	r0, #1
   111a4:	ldrd	r4, [sp]
   111a8:	add	sp, sp, #8
   111ac:	pop	{pc}		; (ldr pc, [sp], #4)
   111b0:	mov	r0, #0
   111b4:	b	111a4 <__assert_fail@plt+0x274>
   111b8:	add	r0, r0, r0, lsl #2
   111bc:	add	r3, r0, #3
   111c0:	cmp	r0, #0
   111c4:	movlt	r0, r3
   111c8:	asr	r0, r0, #2
   111cc:	bx	lr
   111d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   111d4:	strd	r6, [sp, #8]
   111d8:	strd	r8, [sp, #16]
   111dc:	strd	sl, [sp, #24]
   111e0:	str	lr, [sp, #32]
   111e4:	sub	sp, sp, #12
   111e8:	ldr	r7, [sp, #48]	; 0x30
   111ec:	mov	ip, #0
   111f0:	str	ip, [r7]
   111f4:	subs	lr, r2, #0
   111f8:	bne	1132c <__assert_fail@plt+0x3fc>
   111fc:	ldr	r0, [r0, #4]
   11200:	cmp	r0, ip
   11204:	movgt	r0, #0
   11208:	movle	r0, #1
   1120c:	add	sp, sp, #12
   11210:	ldrd	r4, [sp]
   11214:	ldrd	r6, [sp, #8]
   11218:	ldrd	r8, [sp, #16]
   1121c:	ldrd	sl, [sp, #24]
   11220:	add	sp, sp, #32
   11224:	pop	{pc}		; (ldr pc, [sp], #4)
   11228:	strb	lr, [r3]
   1122c:	lsr	lr, r8, #16
   11230:	strb	lr, [r3, #1]
   11234:	lsr	lr, r8, #8
   11238:	strb	lr, [r3, #2]
   1123c:	strb	r8, [r3, #3]
   11240:	ldr	lr, [r7]
   11244:	add	lr, lr, #4
   11248:	str	lr, [r7]
   1124c:	str	r2, [r0, #4]
   11250:	add	r3, r3, #4
   11254:	cmp	r1, ip
   11258:	beq	1130c <__assert_fail@plt+0x3dc>
   1125c:	ldrb	lr, [ip], #1
   11260:	cmp	lr, #10
   11264:	beq	11254 <__assert_fail@plt+0x324>
   11268:	sub	r4, lr, #33	; 0x21
   1126c:	uxtb	r4, r4
   11270:	cmp	r4, #92	; 0x5c
   11274:	bhi	1131c <__assert_fail@plt+0x3ec>
   11278:	add	lr, r6, lr
   1127c:	ldrsb	r4, [lr, #-17]	; 0xffffffef
   11280:	cmp	r4, #0
   11284:	blt	11324 <__assert_fail@plt+0x3f4>
   11288:	ldr	lr, [r0, #4]
   1128c:	add	r5, lr, #1
   11290:	str	r5, [r0, #4]
   11294:	add	lr, r0, lr
   11298:	strb	r4, [lr, #8]
   1129c:	cmp	r5, #5
   112a0:	bne	11254 <__assert_fail@plt+0x324>
   112a4:	ldrb	lr, [r0, #9]
   112a8:	ldrb	r4, [r0, #10]
   112ac:	movw	r5, #7225	; 0x1c39
   112b0:	mul	r4, r5, r4
   112b4:	ldr	r5, [sp]
   112b8:	mla	r4, r5, lr, r4
   112bc:	ldrb	lr, [r0, #11]
   112c0:	mov	r5, #85	; 0x55
   112c4:	mla	lr, r5, lr, r4
   112c8:	ldrb	r4, [r0, #12]
   112cc:	add	lr, lr, r4
   112d0:	ldrb	r4, [r0, #8]
   112d4:	ldr	r8, [sp, #4]
   112d8:	umull	r4, r5, r4, r8
   112dc:	adds	r8, r4, lr
   112e0:	adc	r9, r5, lr, asr #31
   112e4:	mov	r4, r8
   112e8:	lsr	lr, r8, #24
   112ec:	orr	lr, lr, r9, lsl #8
   112f0:	bic	sl, lr, #255	; 0xff
   112f4:	mov	r8, r4
   112f8:	asr	fp, r9, #24
   112fc:	orrs	r4, sl, fp
   11300:	beq	11228 <__assert_fail@plt+0x2f8>
   11304:	mov	r0, #0
   11308:	b	1120c <__assert_fail@plt+0x2dc>
   1130c:	ldr	r3, [r0, #4]
   11310:	str	r3, [r0]
   11314:	mov	r0, #1
   11318:	b	1120c <__assert_fail@plt+0x2dc>
   1131c:	mov	r0, #0
   11320:	b	1120c <__assert_fail@plt+0x2dc>
   11324:	mov	r0, #0
   11328:	b	1120c <__assert_fail@plt+0x2dc>
   1132c:	mov	ip, r1
   11330:	movw	r6, #31928	; 0x7cb8
   11334:	movt	r6, #1
   11338:	movw	r8, #24301	; 0x5eed
   1133c:	movt	r8, #9
   11340:	movw	r9, #33969	; 0x84b1
   11344:	movt	r9, #796	; 0x31c
   11348:	mov	r2, #0
   1134c:	add	r1, r1, lr
   11350:	str	r8, [sp]
   11354:	str	r9, [sp, #4]
   11358:	b	1125c <__assert_fail@plt+0x32c>
   1135c:	sub	r0, r0, #48	; 0x30
   11360:	uxtb	r0, r0
   11364:	cmp	r0, #1
   11368:	movhi	r0, #0
   1136c:	movls	r0, #1
   11370:	bx	lr
   11374:	lsl	r0, r0, #3
   11378:	bx	lr
   1137c:	cmp	r1, #0
   11380:	bxeq	lr
   11384:	push	{lr}		; (str lr, [sp, #-4]!)
   11388:	add	ip, r2, #8
   1138c:	sub	lr, r0, #1
   11390:	sub	r1, r1, #1
   11394:	add	r0, r0, r1
   11398:	b	113a8 <__assert_fail@plt+0x478>
   1139c:	add	ip, ip, #8
   113a0:	cmp	lr, r0
   113a4:	beq	113d8 <__assert_fail@plt+0x4a8>
   113a8:	sub	r2, ip, #8
   113ac:	ldrb	r3, [lr, #1]!
   113b0:	sxtb	r1, r3
   113b4:	cmp	r1, #0
   113b8:	movlt	r1, #49	; 0x31
   113bc:	movge	r1, #48	; 0x30
   113c0:	strb	r1, [r2], #1
   113c4:	lsl	r3, r3, #1
   113c8:	uxtb	r3, r3
   113cc:	cmp	r2, ip
   113d0:	bne	113b0 <__assert_fail@plt+0x480>
   113d4:	b	1139c <__assert_fail@plt+0x46c>
   113d8:	pop	{pc}		; (ldr pc, [sp], #4)
   113dc:	cmp	r1, #0
   113e0:	bxeq	lr
   113e4:	push	{lr}		; (str lr, [sp, #-4]!)
   113e8:	add	ip, r2, #8
   113ec:	sub	lr, r0, #1
   113f0:	sub	r1, r1, #1
   113f4:	add	r0, r0, r1
   113f8:	b	11408 <__assert_fail@plt+0x4d8>
   113fc:	add	ip, ip, #8
   11400:	cmp	lr, r0
   11404:	beq	11434 <__assert_fail@plt+0x504>
   11408:	sub	r2, ip, #8
   1140c:	ldrb	r3, [lr, #1]!
   11410:	and	r1, r3, #1
   11414:	cmp	r1, #0
   11418:	movne	r1, #49	; 0x31
   1141c:	moveq	r1, #48	; 0x30
   11420:	strb	r1, [r2], #1
   11424:	lsr	r3, r3, #1
   11428:	cmp	r2, ip
   1142c:	bne	11410 <__assert_fail@plt+0x4e0>
   11430:	b	113fc <__assert_fail@plt+0x4cc>
   11434:	pop	{pc}		; (ldr pc, [sp], #4)
   11438:	strd	r4, [sp, #-20]!	; 0xffffffec
   1143c:	strd	r6, [sp, #8]
   11440:	str	lr, [sp, #16]
   11444:	ldr	r6, [sp, #20]
   11448:	mov	ip, #0
   1144c:	str	ip, [r6]
   11450:	cmp	r2, #0
   11454:	movne	r5, r1
   11458:	movne	r7, #0
   1145c:	addne	r1, r1, r2
   11460:	bne	1147c <__assert_fail@plt+0x54c>
   11464:	ldr	r0, [r0]
   11468:	clz	r0, r0
   1146c:	lsr	r0, r0, #5
   11470:	b	114e8 <__assert_fail@plt+0x5b8>
   11474:	cmp	r1, r5
   11478:	beq	114e4 <__assert_fail@plt+0x5b4>
   1147c:	ldrb	ip, [r5], #1
   11480:	cmp	ip, #10
   11484:	beq	11474 <__assert_fail@plt+0x544>
   11488:	sub	lr, ip, #48	; 0x30
   1148c:	uxtb	lr, lr
   11490:	cmp	lr, #1
   11494:	bhi	114f8 <__assert_fail@plt+0x5c8>
   11498:	ldr	r4, [r0]
   1149c:	cmp	ip, #49	; 0x31
   114a0:	movne	ip, #0
   114a4:	moveq	ip, #1
   114a8:	ldrb	lr, [r0, #4]
   114ac:	orr	ip, lr, ip, lsl r4
   114b0:	uxtb	ip, ip
   114b4:	strb	ip, [r0, #4]
   114b8:	add	lr, r4, #1
   114bc:	str	lr, [r0]
   114c0:	cmp	lr, #8
   114c4:	bne	11474 <__assert_fail@plt+0x544>
   114c8:	strb	ip, [r3], #1
   114cc:	strb	r7, [r0, #4]
   114d0:	ldr	r2, [r6]
   114d4:	add	r2, r2, #1
   114d8:	str	r2, [r6]
   114dc:	str	r7, [r0]
   114e0:	b	11474 <__assert_fail@plt+0x544>
   114e4:	mov	r0, #1
   114e8:	ldrd	r4, [sp]
   114ec:	ldrd	r6, [sp, #8]
   114f0:	add	sp, sp, #16
   114f4:	pop	{pc}		; (ldr pc, [sp], #4)
   114f8:	mov	r0, #0
   114fc:	b	114e8 <__assert_fail@plt+0x5b8>
   11500:	strd	r4, [sp, #-20]!	; 0xffffffec
   11504:	strd	r6, [sp, #8]
   11508:	str	lr, [sp, #16]
   1150c:	ldr	r5, [sp, #20]
   11510:	mov	ip, #0
   11514:	str	ip, [r5]
   11518:	cmp	r2, #0
   1151c:	beq	11534 <__assert_fail@plt+0x604>
   11520:	mov	r4, r1
   11524:	mov	r6, #0
   11528:	mov	r7, #7
   1152c:	add	r1, r1, r2
   11530:	b	11584 <__assert_fail@plt+0x654>
   11534:	ldr	r0, [r0]
   11538:	clz	r0, r0
   1153c:	lsr	r0, r0, #5
   11540:	b	115d0 <__assert_fail@plt+0x6a0>
   11544:	sub	lr, lr, #1
   11548:	str	lr, [r0]
   1154c:	ldrb	r2, [r0, #4]
   11550:	orr	ip, r2, ip, lsl lr
   11554:	uxtb	ip, ip
   11558:	strb	ip, [r0, #4]
   1155c:	cmp	lr, #0
   11560:	bne	1157c <__assert_fail@plt+0x64c>
   11564:	strb	ip, [r3], #1
   11568:	strb	r6, [r0, #4]
   1156c:	ldr	r2, [r5]
   11570:	add	r2, r2, #1
   11574:	str	r2, [r5]
   11578:	str	r6, [r0]
   1157c:	cmp	r1, r4
   11580:	beq	115cc <__assert_fail@plt+0x69c>
   11584:	ldrb	ip, [r4], #1
   11588:	cmp	ip, #10
   1158c:	beq	1157c <__assert_fail@plt+0x64c>
   11590:	sub	lr, ip, #48	; 0x30
   11594:	uxtb	lr, lr
   11598:	cmp	lr, #1
   1159c:	bhi	115e0 <__assert_fail@plt+0x6b0>
   115a0:	cmp	ip, #49	; 0x31
   115a4:	movne	ip, #0
   115a8:	moveq	ip, #1
   115ac:	ldr	lr, [r0]
   115b0:	cmp	lr, #0
   115b4:	bne	11544 <__assert_fail@plt+0x614>
   115b8:	str	r7, [r0]
   115bc:	ldrb	r2, [r0, #4]
   115c0:	orr	ip, r2, ip, lsl #7
   115c4:	strb	ip, [r0, #4]
   115c8:	b	1157c <__assert_fail@plt+0x64c>
   115cc:	mov	r0, #1
   115d0:	ldrd	r4, [sp]
   115d4:	ldrd	r6, [sp, #8]
   115d8:	add	sp, sp, #16
   115dc:	pop	{pc}		; (ldr pc, [sp], #4)
   115e0:	mov	r0, #0
   115e4:	b	115d0 <__assert_fail@plt+0x6a0>
   115e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   115ec:	strd	r6, [sp, #8]
   115f0:	strd	r8, [sp, #16]
   115f4:	strd	sl, [sp, #24]
   115f8:	str	lr, [sp, #32]
   115fc:	sub	sp, sp, #36	; 0x24
   11600:	str	r2, [sp, #20]
   11604:	cmp	r1, #0
   11608:	beq	11640 <__assert_fail@plt+0x710>
   1160c:	mov	r7, r3
   11610:	add	r5, r0, #1
   11614:	mov	r6, r0
   11618:	ldrb	r3, [r6], r1
   1161c:	strb	r3, [sp, #28]
   11620:	mov	r9, #0
   11624:	mov	r3, #1
   11628:	movw	r8, #31928	; 0x7cb8
   1162c:	movt	r8, #1
   11630:	mov	ip, r8
   11634:	b	11710 <__assert_fail@plt+0x7e0>
   11638:	cmp	r3, #0
   1163c:	bne	1165c <__assert_fail@plt+0x72c>
   11640:	add	sp, sp, #36	; 0x24
   11644:	ldrd	r4, [sp]
   11648:	ldrd	r6, [sp, #8]
   1164c:	ldrd	r8, [sp, #16]
   11650:	ldrd	sl, [sp, #24]
   11654:	add	sp, sp, #32
   11658:	pop	{pc}		; (ldr pc, [sp], #4)
   1165c:	mov	r2, #5
   11660:	movw	r1, #32516	; 0x7f04
   11664:	movt	r1, #1
   11668:	mov	r0, #0
   1166c:	bl	10d68 <dcgettext@plt>
   11670:	mov	r2, r0
   11674:	mov	r1, #0
   11678:	mov	r0, #1
   1167c:	bl	10dd4 <error@plt>
   11680:	sub	r3, r4, #1
   11684:	ldr	r2, [sp, #12]
   11688:	str	r2, [sp, #4]
   1168c:	ldr	r2, [sp, #16]
   11690:	str	r2, [sp, #8]
   11694:	cmp	r4, fp
   11698:	beq	116e8 <__assert_fail@plt+0x7b8>
   1169c:	mov	r4, r3
   116a0:	mov	r2, #85	; 0x55
   116a4:	mov	r3, #0
   116a8:	ldr	r0, [sp, #4]
   116ac:	ldr	r1, [sp, #8]
   116b0:	bl	17a24 <__assert_fail@plt+0x6af4>
   116b4:	str	r0, [sp, #12]
   116b8:	str	r1, [sp, #16]
   116bc:	cmp	r7, r4
   116c0:	ble	11680 <__assert_fail@plt+0x750>
   116c4:	mov	r2, #85	; 0x55
   116c8:	mov	r3, #0
   116cc:	ldr	r0, [sp, #4]
   116d0:	ldr	r1, [sp, #8]
   116d4:	bl	17a24 <__assert_fail@plt+0x6af4>
   116d8:	add	r2, sl, r2
   116dc:	ldrb	r3, [r2, #112]	; 0x70
   116e0:	strb	r3, [r8, r4]
   116e4:	b	11680 <__assert_fail@plt+0x750>
   116e8:	mov	r3, r6
   116ec:	mov	r6, r5
   116f0:	mov	ip, sl
   116f4:	mov	r5, r3
   116f8:	ldr	r3, [sp, #20]
   116fc:	add	r3, r3, #5
   11700:	str	r3, [sp, #20]
   11704:	add	r9, r9, #5
   11708:	mov	r2, #0
   1170c:	mov	r3, r2
   11710:	cmp	r6, r5
   11714:	beq	11638 <__assert_fail@plt+0x708>
   11718:	add	r2, r3, #1
   1171c:	add	r1, sp, #32
   11720:	add	r3, r1, r3
   11724:	ldrb	r1, [r5], #1
   11728:	strb	r1, [r3, #-4]
   1172c:	cmp	r2, #4
   11730:	bne	1170c <__assert_fail@plt+0x7dc>
   11734:	ldrb	r0, [sp, #28]
   11738:	mov	r3, #0
   1173c:	mov	fp, r3
   11740:	lsl	r3, r0, #24
   11744:	mov	sl, r3
   11748:	ldrb	r1, [sp, #29]
   1174c:	lsl	r1, r1, #16
   11750:	adds	r2, sl, r1
   11754:	adc	r3, fp, r1, asr #31
   11758:	ldrb	r1, [sp, #30]
   1175c:	lsl	r1, r1, #8
   11760:	adds	sl, r2, r1
   11764:	adc	fp, r3, r1, asr #31
   11768:	ldrb	r0, [sp, #31]
   1176c:	mov	r1, #0
   11770:	adds	r3, r0, sl
   11774:	str	r3, [sp, #4]
   11778:	adc	r3, r1, fp
   1177c:	str	r3, [sp, #8]
   11780:	add	r4, r9, #4
   11784:	mov	fp, r9
   11788:	ldr	r3, [sp, #20]
   1178c:	sub	r8, r3, r9
   11790:	mov	r3, r5
   11794:	mov	r5, r6
   11798:	mov	sl, ip
   1179c:	mov	r6, r3
   117a0:	b	116a0 <__assert_fail@plt+0x770>
   117a4:	cmp	r0, #95	; 0x5f
   117a8:	cmpne	r0, #45	; 0x2d
   117ac:	beq	117d8 <__assert_fail@plt+0x8a8>
   117b0:	and	r3, r0, #251	; 0xfb
   117b4:	cmp	r3, #43	; 0x2b
   117b8:	beq	117e4 <__assert_fail@plt+0x8b4>
   117bc:	str	r4, [sp, #-8]!
   117c0:	str	lr, [sp, #4]
   117c4:	bl	13a18 <__assert_fail@plt+0x2ae8>
   117c8:	and	r0, r0, #1
   117cc:	ldr	r4, [sp]
   117d0:	add	sp, sp, #4
   117d4:	pop	{pc}		; (ldr pc, [sp], #4)
   117d8:	mov	r0, #1
   117dc:	and	r0, r0, #1
   117e0:	bx	lr
   117e4:	mov	r0, #0
   117e8:	b	117dc <__assert_fail@plt+0x8ac>
   117ec:	strd	r4, [sp, #-16]!
   117f0:	str	r6, [sp, #8]
   117f4:	str	lr, [sp, #12]
   117f8:	mov	r4, r2
   117fc:	mov	r5, r3
   11800:	bl	137a4 <__assert_fail@plt+0x2874>
   11804:	cmp	r5, #0
   11808:	beq	1184c <__assert_fail@plt+0x91c>
   1180c:	sub	r1, r4, #1
   11810:	sub	r2, r5, #1
   11814:	add	r2, r4, r2
   11818:	mov	lr, #95	; 0x5f
   1181c:	mov	ip, #45	; 0x2d
   11820:	b	11834 <__assert_fail@plt+0x904>
   11824:	cmp	r3, #47	; 0x2f
   11828:	strbeq	lr, [r1]
   1182c:	cmp	r1, r2
   11830:	beq	1184c <__assert_fail@plt+0x91c>
   11834:	add	r1, r1, #1
   11838:	ldrb	r3, [r1]
   1183c:	cmp	r3, #43	; 0x2b
   11840:	strbeq	ip, [r1]
   11844:	bne	11824 <__assert_fail@plt+0x8f4>
   11848:	b	1182c <__assert_fail@plt+0x8fc>
   1184c:	ldrd	r4, [sp]
   11850:	ldr	r6, [sp, #8]
   11854:	add	sp, sp, #12
   11858:	pop	{pc}		; (ldr pc, [sp], #4)
   1185c:	str	r4, [sp, #-8]!
   11860:	str	lr, [sp, #4]
   11864:	mov	r4, r0
   11868:	movw	r0, #4200	; 0x1068
   1186c:	str	r0, [r4, #20]
   11870:	bl	16a5c <__assert_fail@plt+0x5b2c>
   11874:	str	r0, [r4, #16]
   11878:	ldr	r4, [sp]
   1187c:	add	sp, sp, #4
   11880:	pop	{pc}		; (ldr pc, [sp], #4)
   11884:	str	r4, [sp, #-8]!
   11888:	str	lr, [sp, #4]
   1188c:	mov	r4, r0
   11890:	bl	1185c <__assert_fail@plt+0x92c>
   11894:	mov	r3, #0
   11898:	str	r3, [r4, #4]
   1189c:	mov	r3, #1
   118a0:	str	r3, [r4]
   118a4:	ldr	r4, [sp]
   118a8:	add	sp, sp, #4
   118ac:	pop	{pc}		; (ldr pc, [sp], #4)
   118b0:	str	r4, [sp, #-8]!
   118b4:	str	lr, [sp, #4]
   118b8:	mov	r4, r0
   118bc:	bl	1185c <__assert_fail@plt+0x92c>
   118c0:	mov	r3, #0
   118c4:	strb	r3, [r4, #4]
   118c8:	str	r3, [r4]
   118cc:	ldr	r4, [sp]
   118d0:	add	sp, sp, #4
   118d4:	pop	{pc}		; (ldr pc, [sp], #4)
   118d8:	str	r4, [sp, #-8]!
   118dc:	str	lr, [sp, #4]
   118e0:	mov	r4, r0
   118e4:	bl	1185c <__assert_fail@plt+0x92c>
   118e8:	mov	r3, #0
   118ec:	strb	r3, [r4, #5]
   118f0:	mov	r3, #1
   118f4:	str	r3, [r4]
   118f8:	ldr	r4, [sp]
   118fc:	add	sp, sp, #4
   11900:	pop	{pc}		; (ldr pc, [sp], #4)
   11904:	cmp	r0, #90	; 0x5a
   11908:	bhi	11958 <__assert_fail@plt+0xa28>
   1190c:	cmp	r0, #65	; 0x41
   11910:	bcs	11970 <__assert_fail@plt+0xa40>
   11914:	sub	r3, r0, #48	; 0x30
   11918:	uxtb	r3, r3
   1191c:	cmp	r3, #9
   11920:	bls	11950 <__assert_fail@plt+0xa20>
   11924:	str	r4, [sp, #-8]!
   11928:	str	lr, [sp, #4]
   1192c:	mov	r1, r0
   11930:	movw	r0, #32572	; 0x7f3c
   11934:	movt	r0, #1
   11938:	bl	10e40 <strchr@plt>
   1193c:	adds	r0, r0, #0
   11940:	movne	r0, #1
   11944:	ldr	r4, [sp]
   11948:	add	sp, sp, #4
   1194c:	pop	{pc}		; (ldr pc, [sp], #4)
   11950:	mov	r0, #1
   11954:	bx	lr
   11958:	sub	r3, r0, #97	; 0x61
   1195c:	uxtb	r3, r3
   11960:	cmp	r3, #25
   11964:	bhi	11924 <__assert_fail@plt+0x9f4>
   11968:	mov	r0, #1
   1196c:	bx	lr
   11970:	mov	r0, #1
   11974:	bx	lr
   11978:	str	r4, [sp, #-8]!
   1197c:	str	lr, [sp, #4]
   11980:	sub	sp, sp, #8
   11984:	mov	r4, r0
   11988:	ldr	r0, [sp, #16]
   1198c:	str	r0, [sp]
   11990:	add	r0, r4, #4
   11994:	bl	1330c <__assert_fail@plt+0x23dc>
   11998:	ldr	r3, [r4, #4]
   1199c:	str	r3, [r4]
   119a0:	add	sp, sp, #8
   119a4:	ldr	r4, [sp]
   119a8:	add	sp, sp, #4
   119ac:	pop	{pc}		; (ldr pc, [sp], #4)
   119b0:	strd	r4, [sp, #-20]!	; 0xffffffec
   119b4:	strd	r6, [sp, #8]
   119b8:	str	lr, [sp, #16]
   119bc:	sub	sp, sp, #12
   119c0:	mov	r4, r0
   119c4:	mov	r7, r1
   119c8:	mov	r5, r2
   119cc:	mov	r6, r3
   119d0:	ldr	r3, [r0, #20]
   119d4:	cmp	r2, r3
   119d8:	bgt	11a60 <__assert_fail@plt+0xb30>
   119dc:	ldr	ip, [r4, #16]
   119e0:	cmp	r5, #0
   119e4:	beq	11a28 <__assert_fail@plt+0xaf8>
   119e8:	sub	r1, r7, #1
   119ec:	add	lr, ip, r5
   119f0:	movw	r7, #31928	; 0x7cb8
   119f4:	movt	r7, #1
   119f8:	ldrb	r3, [r1, #1]!
   119fc:	sub	r0, r3, #48	; 0x30
   11a00:	uxtb	r0, r0
   11a04:	sub	r2, r3, #65	; 0x41
   11a08:	uxtb	r2, r2
   11a0c:	cmp	r2, #21
   11a10:	cmphi	r0, #9
   11a14:	addls	r3, r7, r3
   11a18:	ldrbls	r3, [r3, #152]	; 0x98
   11a1c:	strb	r3, [ip], #1
   11a20:	cmp	ip, lr
   11a24:	bne	119f8 <__assert_fail@plt+0xac8>
   11a28:	ldr	r3, [sp, #32]
   11a2c:	str	r3, [sp]
   11a30:	mov	r3, r6
   11a34:	mov	r2, r5
   11a38:	ldr	r1, [r4, #16]
   11a3c:	add	r0, r4, #4
   11a40:	bl	1330c <__assert_fail@plt+0x23dc>
   11a44:	ldr	r3, [r4, #4]
   11a48:	str	r3, [r4]
   11a4c:	add	sp, sp, #12
   11a50:	ldrd	r4, [sp]
   11a54:	ldrd	r6, [sp, #8]
   11a58:	add	sp, sp, #16
   11a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   11a60:	lsl	r1, r2, #1
   11a64:	str	r1, [r0, #20]
   11a68:	mov	r2, #1
   11a6c:	ldr	r0, [r0, #16]
   11a70:	bl	16aec <__assert_fail@plt+0x5bbc>
   11a74:	str	r0, [r4, #16]
   11a78:	b	119dc <__assert_fail@plt+0xaac>
   11a7c:	str	r4, [sp, #-8]!
   11a80:	str	lr, [sp, #4]
   11a84:	mov	r4, r0
   11a88:	add	r0, r0, #4
   11a8c:	bl	13300 <__assert_fail@plt+0x23d0>
   11a90:	mov	r0, r4
   11a94:	bl	1185c <__assert_fail@plt+0x92c>
   11a98:	ldr	r4, [sp]
   11a9c:	add	sp, sp, #4
   11aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   11aa4:	str	r4, [sp, #-8]!
   11aa8:	str	lr, [sp, #4]
   11aac:	add	r0, r0, #4
   11ab0:	bl	13300 <__assert_fail@plt+0x23d0>
   11ab4:	ldr	r4, [sp]
   11ab8:	add	sp, sp, #4
   11abc:	pop	{pc}		; (ldr pc, [sp], #4)
   11ac0:	strd	r4, [sp, #-16]!
   11ac4:	str	r6, [sp, #8]
   11ac8:	str	lr, [sp, #12]
   11acc:	mov	r4, r2
   11ad0:	mov	r5, r3
   11ad4:	bl	1300c <__assert_fail@plt+0x20dc>
   11ad8:	cmp	r5, #0
   11adc:	beq	11b4c <__assert_fail@plt+0xc1c>
   11ae0:	ldrb	r2, [r4]
   11ae4:	sub	r3, r2, #50	; 0x32
   11ae8:	uxtb	r3, r3
   11aec:	cmp	r3, #40	; 0x28
   11af0:	bhi	11b30 <__assert_fail@plt+0xc00>
   11af4:	mov	r1, r4
   11af8:	sub	r0, r5, #1
   11afc:	add	r0, r4, r0
   11b00:	movw	ip, #31928	; 0x7cb8
   11b04:	movt	ip, #1
   11b08:	add	r2, ip, r2
   11b0c:	ldrb	r3, [r2, #214]	; 0xd6
   11b10:	strb	r3, [r1]
   11b14:	cmp	r1, r0
   11b18:	beq	11b4c <__assert_fail@plt+0xc1c>
   11b1c:	ldrb	r2, [r1, #1]!
   11b20:	sub	r3, r2, #50	; 0x32
   11b24:	uxtb	r3, r3
   11b28:	cmp	r3, #40	; 0x28
   11b2c:	bls	11b08 <__assert_fail@plt+0xbd8>
   11b30:	ldr	r3, [pc, #36]	; 11b5c <__assert_fail@plt+0xc2c>
   11b34:	mov	r2, #452	; 0x1c4
   11b38:	movw	r1, #32596	; 0x7f54
   11b3c:	movt	r1, #1
   11b40:	movw	r0, #32612	; 0x7f64
   11b44:	movt	r0, #1
   11b48:	bl	10f30 <__assert_fail@plt>
   11b4c:	ldrd	r4, [sp]
   11b50:	ldr	r6, [sp, #8]
   11b54:	add	sp, sp, #12
   11b58:	pop	{pc}		; (ldr pc, [sp], #4)
   11b5c:	andeq	r7, r1, ip, lsr #27
   11b60:	str	r4, [sp, #-8]!
   11b64:	str	lr, [sp, #4]
   11b68:	sub	sp, sp, #8
   11b6c:	mov	r4, r0
   11b70:	ldr	r0, [sp, #16]
   11b74:	str	r0, [sp]
   11b78:	add	r0, r4, #4
   11b7c:	bl	13a3c <__assert_fail@plt+0x2b0c>
   11b80:	ldr	r3, [r4, #4]
   11b84:	str	r3, [r4]
   11b88:	add	sp, sp, #8
   11b8c:	ldr	r4, [sp]
   11b90:	add	sp, sp, #4
   11b94:	pop	{pc}		; (ldr pc, [sp], #4)
   11b98:	str	r4, [sp, #-8]!
   11b9c:	str	lr, [sp, #4]
   11ba0:	mov	r4, r0
   11ba4:	add	r0, r0, #4
   11ba8:	bl	13a30 <__assert_fail@plt+0x2b00>
   11bac:	mov	r0, r4
   11bb0:	bl	1185c <__assert_fail@plt+0x92c>
   11bb4:	ldr	r4, [sp]
   11bb8:	add	sp, sp, #4
   11bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   11bc0:	str	r4, [sp, #-8]!
   11bc4:	str	lr, [sp, #4]
   11bc8:	add	r0, r0, #4
   11bcc:	bl	13a30 <__assert_fail@plt+0x2b00>
   11bd0:	ldr	r4, [sp]
   11bd4:	add	sp, sp, #4
   11bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   11bdc:	str	r4, [sp, #-8]!
   11be0:	str	lr, [sp, #4]
   11be4:	mov	r4, r1
   11be8:	bl	13ef8 <__assert_fail@plt+0x2fc8>
   11bec:	cmp	r0, #0
   11bf0:	beq	11c68 <__assert_fail@plt+0xd38>
   11bf4:	movw	r1, #32640	; 0x7f80
   11bf8:	movt	r1, #1
   11bfc:	mov	r0, r4
   11c00:	bl	10ce4 <strcmp@plt>
   11c04:	cmp	r0, #0
   11c08:	bne	11c38 <__assert_fail@plt+0xd08>
   11c0c:	bl	10e4c <__errno_location@plt>
   11c10:	ldr	r4, [r0]
   11c14:	mov	r2, #5
   11c18:	movw	r1, #32644	; 0x7f84
   11c1c:	movt	r1, #1
   11c20:	mov	r0, #0
   11c24:	bl	10d68 <dcgettext@plt>
   11c28:	mov	r2, r0
   11c2c:	mov	r1, r4
   11c30:	mov	r0, #1
   11c34:	bl	10dd4 <error@plt>
   11c38:	bl	10e4c <__errno_location@plt>
   11c3c:	ldr	r5, [r0]
   11c40:	mov	r2, r4
   11c44:	mov	r1, #3
   11c48:	mov	r0, #0
   11c4c:	bl	16274 <__assert_fail@plt+0x5344>
   11c50:	mov	r3, r0
   11c54:	movw	r2, #34512	; 0x86d0
   11c58:	movt	r2, #1
   11c5c:	mov	r1, r5
   11c60:	mov	r0, #1
   11c64:	bl	10dd4 <error@plt>
   11c68:	mov	r0, #0
   11c6c:	bl	10e28 <exit@plt>
   11c70:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11c74:	strd	r6, [sp, #8]
   11c78:	str	r8, [sp, #16]
   11c7c:	str	lr, [sp, #20]
   11c80:	sub	sp, sp, #8
   11c84:	mov	r4, r0
   11c88:	mov	r8, r1
   11c8c:	mov	r5, r2
   11c90:	mov	r7, r3
   11c94:	ldr	r6, [sp, #32]
   11c98:	ldr	r3, [r0, #20]
   11c9c:	cmp	r2, r3
   11ca0:	bgt	11ce8 <__assert_fail@plt+0xdb8>
   11ca4:	mov	r2, r5
   11ca8:	mov	r1, r8
   11cac:	ldr	r0, [r4, #16]
   11cb0:	bl	10d2c <memcpy@plt>
   11cb4:	ldr	r0, [r4, #16]
   11cb8:	cmp	r5, #0
   11cbc:	beq	11d40 <__assert_fail@plt+0xe10>
   11cc0:	ldrb	r3, [r0]
   11cc4:	and	r2, r3, #251	; 0xfb
   11cc8:	cmp	r2, #43	; 0x2b
   11ccc:	beq	11d04 <__assert_fail@plt+0xdd4>
   11cd0:	mov	r2, r0
   11cd4:	sub	r1, r5, #1
   11cd8:	add	r0, r0, r1
   11cdc:	mov	lr, #47	; 0x2f
   11ce0:	mov	ip, #43	; 0x2b
   11ce4:	b	11d30 <__assert_fail@plt+0xe00>
   11ce8:	lsl	r1, r2, #1
   11cec:	str	r1, [r0, #20]
   11cf0:	mov	r2, #1
   11cf4:	ldr	r0, [r0, #16]
   11cf8:	bl	16aec <__assert_fail@plt+0x5bbc>
   11cfc:	str	r0, [r4, #16]
   11d00:	b	11ca4 <__assert_fail@plt+0xd74>
   11d04:	mov	r0, #0
   11d08:	str	r0, [r6]
   11d0c:	b	11d60 <__assert_fail@plt+0xe30>
   11d10:	cmp	r3, #95	; 0x5f
   11d14:	strbeq	lr, [r2]
   11d18:	cmp	r0, r2
   11d1c:	beq	11d40 <__assert_fail@plt+0xe10>
   11d20:	ldrb	r3, [r2, #1]!
   11d24:	and	r1, r3, #251	; 0xfb
   11d28:	cmp	r1, #43	; 0x2b
   11d2c:	beq	11d04 <__assert_fail@plt+0xdd4>
   11d30:	cmp	r3, #45	; 0x2d
   11d34:	strbeq	ip, [r2]
   11d38:	bne	11d10 <__assert_fail@plt+0xde0>
   11d3c:	b	11d18 <__assert_fail@plt+0xde8>
   11d40:	str	r6, [sp]
   11d44:	mov	r3, r7
   11d48:	mov	r2, r5
   11d4c:	ldr	r1, [r4, #16]
   11d50:	add	r0, r4, #4
   11d54:	bl	13a3c <__assert_fail@plt+0x2b0c>
   11d58:	ldr	r3, [r4, #4]
   11d5c:	str	r3, [r4]
   11d60:	add	sp, sp, #8
   11d64:	ldrd	r4, [sp]
   11d68:	ldrd	r6, [sp, #8]
   11d6c:	ldr	r8, [sp, #16]
   11d70:	add	sp, sp, #20
   11d74:	pop	{pc}		; (ldr pc, [sp], #4)
   11d78:	push	{lr}		; (str lr, [sp, #-4]!)
   11d7c:	sub	sp, sp, #60	; 0x3c
   11d80:	subs	r5, r0, #0
   11d84:	beq	11dcc <__assert_fail@plt+0xe9c>
   11d88:	movw	r3, #41288	; 0xa148
   11d8c:	movt	r3, #2
   11d90:	ldr	r4, [r3]
   11d94:	mov	r2, #5
   11d98:	movw	r1, #32676	; 0x7fa4
   11d9c:	movt	r1, #1
   11da0:	mov	r0, #0
   11da4:	bl	10d68 <dcgettext@plt>
   11da8:	movw	r3, #41340	; 0xa17c
   11dac:	movt	r3, #2
   11db0:	ldr	r3, [r3]
   11db4:	mov	r2, r0
   11db8:	mov	r1, #1
   11dbc:	mov	r0, r4
   11dc0:	bl	10e88 <__fprintf_chk@plt>
   11dc4:	mov	r0, r5
   11dc8:	bl	10e28 <exit@plt>
   11dcc:	mov	r2, #5
   11dd0:	movw	r1, #32716	; 0x7fcc
   11dd4:	movt	r1, #1
   11dd8:	mov	r0, #0
   11ddc:	bl	10d68 <dcgettext@plt>
   11de0:	movw	r3, #41340	; 0xa17c
   11de4:	movt	r3, #2
   11de8:	ldr	r2, [r3]
   11dec:	mov	r1, r0
   11df0:	mov	r0, #1
   11df4:	bl	10e70 <__printf_chk@plt>
   11df8:	mov	r2, #5
   11dfc:	movw	r1, #32748	; 0x7fec
   11e00:	movt	r1, #1
   11e04:	mov	r0, #0
   11e08:	bl	10d68 <dcgettext@plt>
   11e0c:	movw	r4, #41300	; 0xa154
   11e10:	movt	r4, #2
   11e14:	ldr	r1, [r4]
   11e18:	bl	10ccc <fputs_unlocked@plt>
   11e1c:	mov	r2, #5
   11e20:	movw	r1, #32820	; 0x8034
   11e24:	movt	r1, #1
   11e28:	mov	r0, #0
   11e2c:	bl	10d68 <dcgettext@plt>
   11e30:	ldr	r1, [r4]
   11e34:	bl	10ccc <fputs_unlocked@plt>
   11e38:	mov	r2, #5
   11e3c:	movw	r1, #32876	; 0x806c
   11e40:	movt	r1, #1
   11e44:	mov	r0, #0
   11e48:	bl	10d68 <dcgettext@plt>
   11e4c:	ldr	r1, [r4]
   11e50:	bl	10ccc <fputs_unlocked@plt>
   11e54:	mov	r2, #5
   11e58:	movw	r1, #32952	; 0x80b8
   11e5c:	movt	r1, #1
   11e60:	mov	r0, #0
   11e64:	bl	10d68 <dcgettext@plt>
   11e68:	ldr	r1, [r4]
   11e6c:	bl	10ccc <fputs_unlocked@plt>
   11e70:	mov	r2, #5
   11e74:	movw	r1, #33024	; 0x8100
   11e78:	movt	r1, #1
   11e7c:	mov	r0, #0
   11e80:	bl	10d68 <dcgettext@plt>
   11e84:	ldr	r1, [r4]
   11e88:	bl	10ccc <fputs_unlocked@plt>
   11e8c:	mov	r2, #5
   11e90:	movw	r1, #33096	; 0x8148
   11e94:	movt	r1, #1
   11e98:	mov	r0, #0
   11e9c:	bl	10d68 <dcgettext@plt>
   11ea0:	ldr	r1, [r4]
   11ea4:	bl	10ccc <fputs_unlocked@plt>
   11ea8:	mov	r2, #5
   11eac:	movw	r1, #33168	; 0x8190
   11eb0:	movt	r1, #1
   11eb4:	mov	r0, #0
   11eb8:	bl	10d68 <dcgettext@plt>
   11ebc:	ldr	r1, [r4]
   11ec0:	bl	10ccc <fputs_unlocked@plt>
   11ec4:	mov	r2, #5
   11ec8:	movw	r1, #33244	; 0x81dc
   11ecc:	movt	r1, #1
   11ed0:	mov	r0, #0
   11ed4:	bl	10d68 <dcgettext@plt>
   11ed8:	ldr	r1, [r4]
   11edc:	bl	10ccc <fputs_unlocked@plt>
   11ee0:	mov	r2, #5
   11ee4:	movw	r1, #33304	; 0x8218
   11ee8:	movt	r1, #1
   11eec:	mov	r0, #0
   11ef0:	bl	10d68 <dcgettext@plt>
   11ef4:	ldr	r1, [r4]
   11ef8:	bl	10ccc <fputs_unlocked@plt>
   11efc:	mov	r2, #5
   11f00:	movw	r1, #33380	; 0x8264
   11f04:	movt	r1, #1
   11f08:	mov	r0, #0
   11f0c:	bl	10d68 <dcgettext@plt>
   11f10:	ldr	r1, [r4]
   11f14:	bl	10ccc <fputs_unlocked@plt>
   11f18:	mov	r2, #5
   11f1c:	movw	r1, #33456	; 0x82b0
   11f20:	movt	r1, #1
   11f24:	mov	r0, #0
   11f28:	bl	10d68 <dcgettext@plt>
   11f2c:	ldr	r1, [r4]
   11f30:	bl	10ccc <fputs_unlocked@plt>
   11f34:	mov	r2, #5
   11f38:	movw	r1, #33700	; 0x83a4
   11f3c:	movt	r1, #1
   11f40:	mov	r0, #0
   11f44:	bl	10d68 <dcgettext@plt>
   11f48:	ldr	r1, [r4]
   11f4c:	bl	10ccc <fputs_unlocked@plt>
   11f50:	mov	r2, #5
   11f54:	movw	r1, #33924	; 0x8484
   11f58:	movt	r1, #1
   11f5c:	mov	r0, #0
   11f60:	bl	10d68 <dcgettext@plt>
   11f64:	ldr	r1, [r4]
   11f68:	bl	10ccc <fputs_unlocked@plt>
   11f6c:	mov	r2, #5
   11f70:	movw	r1, #33972	; 0x84b4
   11f74:	movt	r1, #1
   11f78:	mov	r0, #0
   11f7c:	bl	10d68 <dcgettext@plt>
   11f80:	ldr	r1, [r4]
   11f84:	bl	10ccc <fputs_unlocked@plt>
   11f88:	mov	r2, #5
   11f8c:	movw	r1, #34028	; 0x84ec
   11f90:	movt	r1, #1
   11f94:	mov	r0, #0
   11f98:	bl	10d68 <dcgettext@plt>
   11f9c:	ldr	r1, [r4]
   11fa0:	bl	10ccc <fputs_unlocked@plt>
   11fa4:	ldr	r0, [pc, #648]	; 12234 <__assert_fail@plt+0x1304>
   11fa8:	ldr	r1, [r0]
   11fac:	ldr	r3, [r0, #4]
   11fb0:	str	r1, [sp]
   11fb4:	str	r3, [sp, #4]
   11fb8:	ldrd	r2, [r0, #8]
   11fbc:	strd	r2, [sp, #8]
   11fc0:	ldrd	r2, [r0, #16]
   11fc4:	strd	r2, [sp, #16]
   11fc8:	ldrd	r2, [r0, #24]
   11fcc:	strd	r2, [sp, #24]
   11fd0:	ldrd	r2, [r0, #32]
   11fd4:	strd	r2, [sp, #32]
   11fd8:	ldrd	r2, [r0, #40]	; 0x28
   11fdc:	strd	r2, [sp, #40]	; 0x28
   11fe0:	ldrd	r2, [r0, #48]	; 0x30
   11fe4:	strd	r2, [sp, #48]	; 0x30
   11fe8:	cmp	r1, #0
   11fec:	moveq	r4, sp
   11ff0:	beq	1201c <__assert_fail@plt+0x10ec>
   11ff4:	mov	r4, sp
   11ff8:	movw	r6, #32668	; 0x7f9c
   11ffc:	movt	r6, #1
   12000:	mov	r0, r6
   12004:	bl	10ce4 <strcmp@plt>
   12008:	cmp	r0, #0
   1200c:	beq	1201c <__assert_fail@plt+0x10ec>
   12010:	ldr	r1, [r4, #8]!
   12014:	cmp	r1, #0
   12018:	bne	12000 <__assert_fail@plt+0x10d0>
   1201c:	ldr	r4, [r4, #4]
   12020:	cmp	r4, #0
   12024:	beq	12180 <__assert_fail@plt+0x1250>
   12028:	mov	r2, #5
   1202c:	movw	r1, #34228	; 0x85b4
   12030:	movt	r1, #1
   12034:	mov	r0, #0
   12038:	bl	10d68 <dcgettext@plt>
   1203c:	movw	r3, #34252	; 0x85cc
   12040:	movt	r3, #1
   12044:	movw	r2, #34292	; 0x85f4
   12048:	movt	r2, #1
   1204c:	mov	r1, r0
   12050:	mov	r0, #1
   12054:	bl	10e70 <__printf_chk@plt>
   12058:	mov	r1, #0
   1205c:	mov	r0, #5
   12060:	bl	10ec4 <setlocale@plt>
   12064:	cmp	r0, #0
   12068:	beq	12084 <__assert_fail@plt+0x1154>
   1206c:	mov	r2, #3
   12070:	movw	r1, #34308	; 0x8604
   12074:	movt	r1, #1
   12078:	bl	10f18 <strncmp@plt>
   1207c:	cmp	r0, #0
   12080:	bne	12100 <__assert_fail@plt+0x11d0>
   12084:	mov	r2, #5
   12088:	movw	r1, #34384	; 0x8650
   1208c:	movt	r1, #1
   12090:	mov	r0, #0
   12094:	bl	10d68 <dcgettext@plt>
   12098:	movw	r6, #32668	; 0x7f9c
   1209c:	movt	r6, #1
   120a0:	mov	r3, r6
   120a4:	movw	r2, #34252	; 0x85cc
   120a8:	movt	r2, #1
   120ac:	mov	r1, r0
   120b0:	mov	r0, #1
   120b4:	bl	10e70 <__printf_chk@plt>
   120b8:	mov	r2, #5
   120bc:	movw	r1, #34412	; 0x866c
   120c0:	movt	r1, #1
   120c4:	mov	r0, #0
   120c8:	bl	10d68 <dcgettext@plt>
   120cc:	mov	r1, r0
   120d0:	movw	r2, #34652	; 0x875c
   120d4:	movt	r2, #1
   120d8:	movw	r3, #33968	; 0x84b0
   120dc:	movt	r3, #1
   120e0:	cmp	r4, r6
   120e4:	moveq	r3, r2
   120e8:	mov	r2, r4
   120ec:	mov	r0, #1
   120f0:	bl	10e70 <__printf_chk@plt>
   120f4:	b	11dc4 <__assert_fail@plt+0xe94>
   120f8:	movw	r4, #32668	; 0x7f9c
   120fc:	movt	r4, #1
   12100:	mov	r2, #5
   12104:	movw	r1, #34312	; 0x8608
   12108:	movt	r1, #1
   1210c:	mov	r0, #0
   12110:	bl	10d68 <dcgettext@plt>
   12114:	movw	r3, #41300	; 0xa154
   12118:	movt	r3, #2
   1211c:	ldr	r1, [r3]
   12120:	bl	10ccc <fputs_unlocked@plt>
   12124:	b	12084 <__assert_fail@plt+0x1154>
   12128:	mov	r2, #5
   1212c:	movw	r1, #34384	; 0x8650
   12130:	movt	r1, #1
   12134:	mov	r0, #0
   12138:	bl	10d68 <dcgettext@plt>
   1213c:	movw	r4, #32668	; 0x7f9c
   12140:	movt	r4, #1
   12144:	mov	r3, r4
   12148:	movw	r2, #34252	; 0x85cc
   1214c:	movt	r2, #1
   12150:	mov	r1, r0
   12154:	mov	r0, #1
   12158:	bl	10e70 <__printf_chk@plt>
   1215c:	mov	r2, #5
   12160:	movw	r1, #34412	; 0x866c
   12164:	movt	r1, #1
   12168:	mov	r0, #0
   1216c:	bl	10d68 <dcgettext@plt>
   12170:	mov	r1, r0
   12174:	movw	r3, #34652	; 0x875c
   12178:	movt	r3, #1
   1217c:	b	120e8 <__assert_fail@plt+0x11b8>
   12180:	mov	r2, #5
   12184:	movw	r1, #34228	; 0x85b4
   12188:	movt	r1, #1
   1218c:	mov	r0, #0
   12190:	bl	10d68 <dcgettext@plt>
   12194:	movw	r3, #34252	; 0x85cc
   12198:	movt	r3, #1
   1219c:	movw	r2, #34292	; 0x85f4
   121a0:	movt	r2, #1
   121a4:	mov	r1, r0
   121a8:	mov	r0, #1
   121ac:	bl	10e70 <__printf_chk@plt>
   121b0:	mov	r1, #0
   121b4:	mov	r0, #5
   121b8:	bl	10ec4 <setlocale@plt>
   121bc:	cmp	r0, #0
   121c0:	beq	12128 <__assert_fail@plt+0x11f8>
   121c4:	mov	r2, #3
   121c8:	movw	r1, #34308	; 0x8604
   121cc:	movt	r1, #1
   121d0:	bl	10f18 <strncmp@plt>
   121d4:	cmp	r0, #0
   121d8:	bne	120f8 <__assert_fail@plt+0x11c8>
   121dc:	mov	r2, #5
   121e0:	movw	r1, #34384	; 0x8650
   121e4:	movt	r1, #1
   121e8:	mov	r0, #0
   121ec:	bl	10d68 <dcgettext@plt>
   121f0:	movw	r4, #32668	; 0x7f9c
   121f4:	movt	r4, #1
   121f8:	mov	r3, r4
   121fc:	movw	r2, #34252	; 0x85cc
   12200:	movt	r2, #1
   12204:	mov	r1, r0
   12208:	mov	r0, #1
   1220c:	bl	10e70 <__printf_chk@plt>
   12210:	mov	r2, #5
   12214:	movw	r1, #34412	; 0x866c
   12218:	movt	r1, #1
   1221c:	mov	r0, #0
   12220:	bl	10d68 <dcgettext@plt>
   12224:	mov	r1, r0
   12228:	movw	r3, #34652	; 0x875c
   1222c:	movt	r3, #1
   12230:	b	120e8 <__assert_fail@plt+0x11b8>
   12234:	andeq	r7, r1, ip, ror #27
   12238:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1223c:	strd	r6, [sp, #8]
   12240:	strd	r8, [sp, #16]
   12244:	strd	sl, [sp, #24]
   12248:	str	lr, [sp, #32]
   1224c:	sub	sp, sp, #84	; 0x54
   12250:	mov	r7, r0
   12254:	mov	r6, r1
   12258:	ldr	r0, [r1]
   1225c:	bl	14144 <__assert_fail@plt+0x3214>
   12260:	movw	r1, #33968	; 0x84b0
   12264:	movt	r1, #1
   12268:	mov	r0, #6
   1226c:	bl	10ec4 <setlocale@plt>
   12270:	movw	r4, #34296	; 0x85f8
   12274:	movt	r4, #1
   12278:	movw	r1, #34464	; 0x86a0
   1227c:	movt	r1, #1
   12280:	mov	r0, r4
   12284:	bl	10f00 <bindtextdomain@plt>
   12288:	mov	r0, r4
   1228c:	bl	10d80 <textdomain@plt>
   12290:	movw	r0, #15736	; 0x3d78
   12294:	movt	r0, #1
   12298:	bl	17c94 <__assert_fail@plt+0x6d64>
   1229c:	mov	r4, #0
   122a0:	mov	sl, #76	; 0x4c
   122a4:	str	r4, [sp, #24]
   122a8:	mov	r9, r4
   122ac:	ldr	fp, [pc, #2748]	; 12d70 <__assert_fail@plt+0x1e40>
   122b0:	movw	r5, #34548	; 0x86f4
   122b4:	movt	r5, #1
   122b8:	movw	r8, #41304	; 0xa158
   122bc:	movt	r8, #2
   122c0:	b	122e0 <__assert_fail@plt+0x13b0>
   122c4:	cmp	r0, #119	; 0x77
   122c8:	beq	12330 <__assert_fail@plt+0x1400>
   122cc:	blt	12328 <__assert_fail@plt+0x13f8>
   122d0:	sub	r3, r0, #256	; 0x100
   122d4:	cmp	r3, #7
   122d8:	bhi	12328 <__assert_fail@plt+0x13f8>
   122dc:	mov	r4, r0
   122e0:	mov	r3, #0
   122e4:	str	r3, [sp]
   122e8:	mov	r3, fp
   122ec:	mov	r2, r5
   122f0:	mov	r1, r6
   122f4:	mov	r0, r7
   122f8:	bl	10e10 <getopt_long@plt>
   122fc:	cmn	r0, #1
   12300:	beq	12460 <__assert_fail@plt+0x1530>
   12304:	cmp	r0, #105	; 0x69
   12308:	beq	12444 <__assert_fail@plt+0x1514>
   1230c:	bgt	122c4 <__assert_fail@plt+0x1394>
   12310:	cmn	r0, #2
   12314:	beq	123e8 <__assert_fail@plt+0x14b8>
   12318:	cmp	r0, #100	; 0x64
   1231c:	beq	12454 <__assert_fail@plt+0x1524>
   12320:	cmn	r0, #3
   12324:	beq	123f0 <__assert_fail@plt+0x14c0>
   12328:	mov	r0, #1
   1232c:	bl	11d78 <__assert_fail@plt+0xe48>
   12330:	movw	r3, #33968	; 0x84b0
   12334:	movt	r3, #1
   12338:	str	r3, [sp]
   1233c:	add	r3, sp, #56	; 0x38
   12340:	mov	r2, #10
   12344:	mov	r1, #0
   12348:	ldr	r0, [r8]
   1234c:	bl	17044 <__assert_fail@plt+0x6114>
   12350:	mov	ip, r0
   12354:	cmp	r0, #1
   12358:	bhi	123a4 <__assert_fail@plt+0x1474>
   1235c:	ldrd	r2, [sp, #56]	; 0x38
   12360:	cmp	r2, #0
   12364:	sbcs	r1, r3, #0
   12368:	blt	123a4 <__assert_fail@plt+0x1474>
   1236c:	mvn	r0, #-2147483648	; 0x80000000
   12370:	mov	r1, #0
   12374:	cmp	r0, r2
   12378:	sbcs	r1, r1, r3
   1237c:	movge	r1, #1
   12380:	movlt	r1, #0
   12384:	cmp	ip, #1
   12388:	moveq	r1, #0
   1238c:	andne	r1, r1, #1
   12390:	cmp	r1, #0
   12394:	moveq	r2, #0
   12398:	mov	sl, r2
   1239c:	mov	r0, r4
   123a0:	b	122dc <__assert_fail@plt+0x13ac>
   123a4:	mov	r2, #5
   123a8:	movw	r1, #34488	; 0x86b8
   123ac:	movt	r1, #1
   123b0:	mov	r0, #0
   123b4:	bl	10d68 <dcgettext@plt>
   123b8:	mov	r4, r0
   123bc:	movw	r3, #41304	; 0xa158
   123c0:	movt	r3, #2
   123c4:	ldr	r0, [r3]
   123c8:	bl	16440 <__assert_fail@plt+0x5510>
   123cc:	str	r0, [sp]
   123d0:	mov	r3, r4
   123d4:	movw	r2, #34508	; 0x86cc
   123d8:	movt	r2, #1
   123dc:	mov	r1, #0
   123e0:	mov	r0, #1
   123e4:	bl	10dd4 <error@plt>
   123e8:	mov	r0, #0
   123ec:	bl	11d78 <__assert_fail@plt+0xe48>
   123f0:	movw	r3, #41196	; 0xa0ec
   123f4:	movt	r3, #2
   123f8:	movw	r0, #41300	; 0xa154
   123fc:	movt	r0, #2
   12400:	mov	r4, #0
   12404:	str	r4, [sp, #8]
   12408:	movw	r2, #34516	; 0x86d4
   1240c:	movt	r2, #1
   12410:	str	r2, [sp, #4]
   12414:	movw	r2, #34532	; 0x86e4
   12418:	movt	r2, #1
   1241c:	str	r2, [sp]
   12420:	ldr	r3, [r3]
   12424:	movw	r2, #34292	; 0x85f4
   12428:	movt	r2, #1
   1242c:	movw	r1, #32668	; 0x7f9c
   12430:	movt	r1, #1
   12434:	ldr	r0, [r0]
   12438:	bl	1693c <__assert_fail@plt+0x5a0c>
   1243c:	mov	r0, r4
   12440:	bl	10e28 <exit@plt>
   12444:	mov	r0, r4
   12448:	mov	r3, #1
   1244c:	str	r3, [sp, #24]
   12450:	b	122dc <__assert_fail@plt+0x13ac>
   12454:	mov	r0, r4
   12458:	mov	r9, #1
   1245c:	b	122dc <__assert_fail@plt+0x13ac>
   12460:	sub	r4, r4, #256	; 0x100
   12464:	cmp	r4, #7
   12468:	ldrls	pc, [pc, r4, lsl #2]
   1246c:	b	12754 <__assert_fail@plt+0x1824>
   12470:	muleq	r1, r0, r4
   12474:	andeq	r2, r1, ip, asr r5
   12478:	andeq	r2, r1, r4, lsr #11
   1247c:	andeq	r2, r1, ip, ror #11
   12480:	andeq	r2, r1, r4, lsr r6
   12484:	andeq	r2, r1, ip, ror r6
   12488:	andeq	r2, r1, r4, asr #13
   1248c:	andeq	r2, r1, ip, lsl #14
   12490:	movw	r3, #41312	; 0xa160
   12494:	movt	r3, #2
   12498:	movw	r2, #4140	; 0x102c
   1249c:	movt	r2, #1
   124a0:	str	r2, [r3]
   124a4:	movw	r2, #14872	; 0x3a18
   124a8:	movt	r2, #1
   124ac:	str	r2, [r3, #4]
   124b0:	movw	r2, #14244	; 0x37a4
   124b4:	movt	r2, #1
   124b8:	str	r2, [r3, #8]
   124bc:	movw	r2, #7104	; 0x1bc0
   124c0:	movt	r2, #1
   124c4:	str	r2, [r3, #12]
   124c8:	movw	r2, #7008	; 0x1b60
   124cc:	movt	r2, #1
   124d0:	str	r2, [r3, #16]
   124d4:	movw	r3, #41280	; 0xa140
   124d8:	movt	r3, #2
   124dc:	ldr	r3, [r3]
   124e0:	sub	r2, r7, r3
   124e4:	cmp	r2, #1
   124e8:	bgt	12780 <__assert_fail@plt+0x1850>
   124ec:	cmp	r3, r7
   124f0:	bge	127cc <__assert_fail@plt+0x189c>
   124f4:	ldr	r3, [r6, r3, lsl #2]
   124f8:	str	r3, [sp, #44]	; 0x2c
   124fc:	movw	r1, #32640	; 0x7f80
   12500:	movt	r1, #1
   12504:	mov	r0, r3
   12508:	bl	10ce4 <strcmp@plt>
   1250c:	cmp	r0, #0
   12510:	beq	127d8 <__assert_fail@plt+0x18a8>
   12514:	movw	r1, #34600	; 0x8728
   12518:	movt	r1, #1
   1251c:	ldr	r0, [sp, #44]	; 0x2c
   12520:	bl	10ef4 <fopen64@plt>
   12524:	subs	r8, r0, #0
   12528:	bne	127e4 <__assert_fail@plt+0x18b4>
   1252c:	bl	10e4c <__errno_location@plt>
   12530:	ldr	r4, [r0]
   12534:	ldr	r2, [sp, #44]	; 0x2c
   12538:	mov	r1, #3
   1253c:	mov	r0, #0
   12540:	bl	16274 <__assert_fail@plt+0x5344>
   12544:	mov	r3, r0
   12548:	movw	r2, #34512	; 0x86d0
   1254c:	movt	r2, #1
   12550:	mov	r1, r4
   12554:	mov	r0, #1
   12558:	bl	10dd4 <error@plt>
   1255c:	movw	r3, #41312	; 0xa160
   12560:	movt	r3, #2
   12564:	movw	r2, #4140	; 0x102c
   12568:	movt	r2, #1
   1256c:	str	r2, [r3]
   12570:	movw	r2, #6052	; 0x17a4
   12574:	movt	r2, #1
   12578:	str	r2, [r3, #4]
   1257c:	movw	r2, #6124	; 0x17ec
   12580:	movt	r2, #1
   12584:	str	r2, [r3, #8]
   12588:	movw	r2, #7064	; 0x1b98
   1258c:	movt	r2, #1
   12590:	str	r2, [r3, #12]
   12594:	movw	r2, #7280	; 0x1c70
   12598:	movt	r2, #1
   1259c:	str	r2, [r3, #16]
   125a0:	b	124d4 <__assert_fail@plt+0x15a4>
   125a4:	movw	r3, #41312	; 0xa160
   125a8:	movt	r3, #2
   125ac:	movw	r2, #4168	; 0x1048
   125b0:	movt	r2, #1
   125b4:	str	r2, [r3]
   125b8:	movw	r2, #13032	; 0x32e8
   125bc:	movt	r2, #1
   125c0:	str	r2, [r3, #4]
   125c4:	movw	r2, #12300	; 0x300c
   125c8:	movt	r2, #1
   125cc:	str	r2, [r3, #8]
   125d0:	movw	r2, #6820	; 0x1aa4
   125d4:	movt	r2, #1
   125d8:	str	r2, [r3, #12]
   125dc:	movw	r2, #6520	; 0x1978
   125e0:	movt	r2, #1
   125e4:	str	r2, [r3, #16]
   125e8:	b	124d4 <__assert_fail@plt+0x15a4>
   125ec:	movw	r3, #41312	; 0xa160
   125f0:	movt	r3, #2
   125f4:	movw	r2, #4168	; 0x1048
   125f8:	movt	r2, #1
   125fc:	str	r2, [r3]
   12600:	movw	r2, #4200	; 0x1068
   12604:	movt	r2, #1
   12608:	str	r2, [r3, #4]
   1260c:	movw	r2, #6848	; 0x1ac0
   12610:	movt	r2, #1
   12614:	str	r2, [r3, #8]
   12618:	movw	r2, #6780	; 0x1a7c
   1261c:	movt	r2, #1
   12620:	str	r2, [r3, #12]
   12624:	movw	r2, #6576	; 0x19b0
   12628:	movt	r2, #1
   1262c:	str	r2, [r3, #16]
   12630:	b	124d4 <__assert_fail@plt+0x15a4>
   12634:	movw	r3, #41312	; 0xa160
   12638:	movt	r3, #2
   1263c:	movw	r2, #4272	; 0x10b0
   12640:	movt	r2, #1
   12644:	str	r2, [r3]
   12648:	movw	r2, #4236	; 0x108c
   1264c:	movt	r2, #1
   12650:	str	r2, [r3, #4]
   12654:	movw	r2, #4280	; 0x10b8
   12658:	movt	r2, #1
   1265c:	str	r2, [r3, #8]
   12660:	movw	r2, #6360	; 0x18d8
   12664:	movt	r2, #1
   12668:	str	r2, [r3, #12]
   1266c:	movw	r2, #4356	; 0x1104
   12670:	movt	r2, #1
   12674:	str	r2, [r3, #16]
   12678:	b	124d4 <__assert_fail@plt+0x15a4>
   1267c:	movw	r3, #41312	; 0xa160
   12680:	movt	r3, #2
   12684:	movw	r2, #4980	; 0x1374
   12688:	movt	r2, #1
   1268c:	str	r2, [r3]
   12690:	movw	r2, #4956	; 0x135c
   12694:	movt	r2, #1
   12698:	str	r2, [r3, #4]
   1269c:	movw	r2, #4988	; 0x137c
   126a0:	movt	r2, #1
   126a4:	str	r2, [r3, #8]
   126a8:	movw	r2, #6320	; 0x18b0
   126ac:	movt	r2, #1
   126b0:	str	r2, [r3, #12]
   126b4:	movw	r2, #5376	; 0x1500
   126b8:	movt	r2, #1
   126bc:	str	r2, [r3, #16]
   126c0:	b	124d4 <__assert_fail@plt+0x15a4>
   126c4:	movw	r3, #41312	; 0xa160
   126c8:	movt	r3, #2
   126cc:	movw	r2, #4980	; 0x1374
   126d0:	movt	r2, #1
   126d4:	str	r2, [r3]
   126d8:	movw	r2, #4956	; 0x135c
   126dc:	movt	r2, #1
   126e0:	str	r2, [r3, #4]
   126e4:	movw	r2, #5084	; 0x13dc
   126e8:	movt	r2, #1
   126ec:	str	r2, [r3, #8]
   126f0:	movw	r2, #6320	; 0x18b0
   126f4:	movt	r2, #1
   126f8:	str	r2, [r3, #12]
   126fc:	movw	r2, #5176	; 0x1438
   12700:	movt	r2, #1
   12704:	str	r2, [r3, #16]
   12708:	b	124d4 <__assert_fail@plt+0x15a4>
   1270c:	movw	r3, #41312	; 0xa160
   12710:	movt	r3, #2
   12714:	movw	r2, #4536	; 0x11b8
   12718:	movt	r2, #1
   1271c:	str	r2, [r3]
   12720:	movw	r2, #6404	; 0x1904
   12724:	movt	r2, #1
   12728:	str	r2, [r3, #4]
   1272c:	movw	r2, #5608	; 0x15e8
   12730:	movt	r2, #1
   12734:	str	r2, [r3, #8]
   12738:	movw	r2, #6276	; 0x1884
   1273c:	movt	r2, #1
   12740:	str	r2, [r3, #12]
   12744:	movw	r2, #4560	; 0x11d0
   12748:	movt	r2, #1
   1274c:	str	r2, [r3, #16]
   12750:	b	124d4 <__assert_fail@plt+0x15a4>
   12754:	mov	r2, #5
   12758:	movw	r1, #34556	; 0x86fc
   1275c:	movt	r1, #1
   12760:	mov	r0, #0
   12764:	bl	10d68 <dcgettext@plt>
   12768:	mov	r2, r0
   1276c:	mov	r1, #0
   12770:	mov	r0, r1
   12774:	bl	10dd4 <error@plt>
   12778:	mov	r0, #1
   1277c:	bl	11d78 <__assert_fail@plt+0xe48>
   12780:	mov	r2, #5
   12784:	movw	r1, #34580	; 0x8714
   12788:	movt	r1, #1
   1278c:	mov	r0, #0
   12790:	bl	10d68 <dcgettext@plt>
   12794:	mov	r4, r0
   12798:	movw	r3, #41280	; 0xa140
   1279c:	movt	r3, #2
   127a0:	ldr	r3, [r3]
   127a4:	add	r3, r3, #1
   127a8:	ldr	r0, [r6, r3, lsl #2]
   127ac:	bl	16440 <__assert_fail@plt+0x5510>
   127b0:	mov	r3, r0
   127b4:	mov	r2, r4
   127b8:	mov	r1, #0
   127bc:	mov	r0, r1
   127c0:	bl	10dd4 <error@plt>
   127c4:	mov	r0, #1
   127c8:	bl	11d78 <__assert_fail@plt+0xe48>
   127cc:	movw	r3, #32640	; 0x7f80
   127d0:	movt	r3, #1
   127d4:	str	r3, [sp, #44]	; 0x2c
   127d8:	movw	r3, #41296	; 0xa150
   127dc:	movt	r3, #2
   127e0:	ldr	r8, [r3]
   127e4:	mov	r1, #2
   127e8:	mov	r0, r8
   127ec:	bl	13eb8 <__assert_fail@plt+0x2f88>
   127f0:	cmp	r9, #0
   127f4:	beq	129dc <__assert_fail@plt+0x1aac>
   127f8:	movw	r3, #41300	; 0xa154
   127fc:	movt	r3, #2
   12800:	ldr	r3, [r3]
   12804:	str	r3, [sp, #28]
   12808:	movw	r4, #41312	; 0xa160
   1280c:	movt	r4, #2
   12810:	ldr	r3, [r4]
   12814:	movw	r0, #4200	; 0x1068
   12818:	blx	r3
   1281c:	bl	16a14 <__assert_fail@plt+0x5ae4>
   12820:	mov	r6, r0
   12824:	movw	r0, #4200	; 0x1068
   12828:	bl	16a14 <__assert_fail@plt+0x5ae4>
   1282c:	str	r0, [sp, #16]
   12830:	mov	r3, #0
   12834:	str	r3, [sp, #72]	; 0x48
   12838:	ldr	r3, [r4, #12]
   1283c:	add	r0, sp, #56	; 0x38
   12840:	blx	r3
   12844:	mov	r9, r4
   12848:	movw	fp, #4200	; 0x1068
   1284c:	mov	sl, r6
   12850:	b	12d68 <__assert_fail@plt+0x1e38>
   12854:	add	r5, r5, #1
   12858:	bic	r3, r5, r5, asr #31
   1285c:	cmp	r6, r3
   12860:	ble	128ac <__assert_fail@plt+0x197c>
   12864:	add	r7, r4, r5
   12868:	ldr	r3, [r9, #4]
   1286c:	ldrb	r0, [sl, r7]
   12870:	blx	r3
   12874:	cmp	r0, #0
   12878:	bne	12854 <__assert_fail@plt+0x1924>
   1287c:	ldrb	r3, [sl, r7]
   12880:	cmp	r3, #61	; 0x3d
   12884:	beq	12854 <__assert_fail@plt+0x1924>
   12888:	ldr	r3, [sp, #20]
   1288c:	add	r0, r5, r3
   12890:	sub	r6, r6, #1
   12894:	add	r1, r0, #1
   12898:	sub	r2, r6, r5
   1289c:	add	r1, sl, r1
   128a0:	add	r0, sl, r0
   128a4:	bl	10d08 <memmove@plt>
   128a8:	b	12858 <__assert_fail@plt+0x1928>
   128ac:	add	r4, r4, r6
   128b0:	ldr	r6, [r8]
   128b4:	ands	r6, r6, #32
   128b8:	bne	1291c <__assert_fail@plt+0x19ec>
   128bc:	ldr	r3, [r9]
   128c0:	mov	r0, fp
   128c4:	blx	r3
   128c8:	cmp	r4, r0
   128cc:	bge	129d0 <__assert_fail@plt+0x1aa0>
   128d0:	ldr	r3, [r8]
   128d4:	tst	r3, #16
   128d8:	bne	12948 <__assert_fail@plt+0x1a18>
   128dc:	str	r4, [sp, #20]
   128e0:	add	r5, sl, r4
   128e4:	ldr	r3, [r9]
   128e8:	mov	r0, fp
   128ec:	blx	r3
   128f0:	mov	r3, r8
   128f4:	sub	r2, r0, r4
   128f8:	mov	r1, #1
   128fc:	mov	r0, r5
   12900:	bl	10f0c <fread_unlocked@plt>
   12904:	mov	r6, r0
   12908:	ldr	r3, [sp, #24]
   1290c:	cmp	r3, #0
   12910:	beq	128ac <__assert_fail@plt+0x197c>
   12914:	mov	r5, #0
   12918:	b	12858 <__assert_fail@plt+0x1928>
   1291c:	bl	10e4c <__errno_location@plt>
   12920:	ldr	r4, [r0]
   12924:	mov	r2, #5
   12928:	movw	r1, #34604	; 0x872c
   1292c:	movt	r1, #1
   12930:	mov	r0, #0
   12934:	bl	10d68 <dcgettext@plt>
   12938:	mov	r2, r0
   1293c:	mov	r1, r4
   12940:	mov	r0, #1
   12944:	bl	10dd4 <error@plt>
   12948:	mov	r5, r6
   1294c:	b	129d4 <__assert_fail@plt+0x1aa4>
   12950:	ldr	r2, [sp, #56]	; 0x38
   12954:	cmp	r2, #0
   12958:	beq	129bc <__assert_fail@plt+0x1a8c>
   1295c:	str	fp, [sp, #52]	; 0x34
   12960:	ldr	r7, [r9, #16]
   12964:	ldr	r2, [sp, #20]
   12968:	b	12d0c <__assert_fail@plt+0x1ddc>
   1296c:	bl	10e4c <__errno_location@plt>
   12970:	ldr	r4, [r0]
   12974:	mov	r2, #5
   12978:	movw	r1, #34616	; 0x8738
   1297c:	movt	r1, #1
   12980:	mov	r0, #0
   12984:	bl	10d68 <dcgettext@plt>
   12988:	mov	r2, r0
   1298c:	mov	r1, r4
   12990:	mov	r0, #1
   12994:	bl	10dd4 <error@plt>
   12998:	mov	r2, #5
   1299c:	movw	r1, #34628	; 0x8744
   129a0:	movt	r1, #1
   129a4:	mov	r0, #0
   129a8:	bl	10d68 <dcgettext@plt>
   129ac:	mov	r2, r0
   129b0:	mov	r1, #0
   129b4:	mov	r0, #1
   129b8:	bl	10dd4 <error@plt>
   129bc:	cmp	r3, #0
   129c0:	beq	12d68 <__assert_fail@plt+0x1e38>
   129c4:	ldr	r1, [sp, #44]	; 0x2c
   129c8:	mov	r0, r8
   129cc:	bl	11bdc <__assert_fail@plt+0xcac>
   129d0:	mov	r5, r6
   129d4:	str	r6, [sp, #20]
   129d8:	b	12d54 <__assert_fail@plt+0x1e24>
   129dc:	movw	r3, #41300	; 0xa154
   129e0:	movt	r3, #2
   129e4:	ldr	fp, [r3]
   129e8:	mov	r0, #30720	; 0x7800
   129ec:	bl	16a14 <__assert_fail@plt+0x5ae4>
   129f0:	mov	r4, r0
   129f4:	movw	r3, #41312	; 0xa160
   129f8:	movt	r3, #2
   129fc:	ldr	r3, [r3]
   12a00:	mov	r0, #30720	; 0x7800
   12a04:	blx	r3
   12a08:	bl	16a14 <__assert_fail@plt+0x5ae4>
   12a0c:	str	r0, [sp, #16]
   12a10:	mov	r7, #0
   12a14:	movw	r3, #41312	; 0xa160
   12a18:	movt	r3, #2
   12a1c:	str	r3, [sp, #24]
   12a20:	movw	r3, #41300	; 0xa154
   12a24:	movt	r3, #2
   12a28:	str	r3, [sp, #28]
   12a2c:	str	sl, [sp, #20]
   12a30:	mov	sl, r4
   12a34:	b	12a6c <__assert_fail@plt+0x1b3c>
   12a38:	ldr	r3, [sp, #28]
   12a3c:	ldr	r3, [r3]
   12a40:	mov	r2, r0
   12a44:	mov	r1, #1
   12a48:	ldr	r0, [sp, #16]
   12a4c:	bl	10d44 <fwrite_unlocked@plt>
   12a50:	cmp	r9, r0
   12a54:	bhi	12b18 <__assert_fail@plt+0x1be8>
   12a58:	ldr	r3, [r8]
   12a5c:	and	r3, r3, #48	; 0x30
   12a60:	cmp	r5, #30720	; 0x7800
   12a64:	cmpeq	r3, #0
   12a68:	bne	12c34 <__assert_fail@plt+0x1d04>
   12a6c:	mov	r5, #0
   12a70:	mov	r6, #1
   12a74:	movw	r4, #30719	; 0x77ff
   12a78:	mov	r3, r8
   12a7c:	rsb	r2, r5, #30720	; 0x7800
   12a80:	mov	r1, r6
   12a84:	add	r0, sl, r5
   12a88:	bl	10f0c <fread_unlocked@plt>
   12a8c:	add	r5, r5, r0
   12a90:	ldr	r3, [r8]
   12a94:	and	r3, r3, #48	; 0x30
   12a98:	cmp	r5, r4
   12a9c:	cmple	r3, #0
   12aa0:	beq	12a78 <__assert_fail@plt+0x1b48>
   12aa4:	cmp	r5, #0
   12aa8:	ble	12a58 <__assert_fail@plt+0x1b28>
   12aac:	ldr	r6, [sp, #24]
   12ab0:	ldr	r4, [r6, #8]
   12ab4:	ldr	r3, [r6]
   12ab8:	mov	r0, r5
   12abc:	blx	r3
   12ac0:	mov	r3, r0
   12ac4:	ldr	r2, [sp, #16]
   12ac8:	mov	r1, r5
   12acc:	mov	r0, sl
   12ad0:	blx	r4
   12ad4:	ldr	r3, [r6]
   12ad8:	mov	r0, r5
   12adc:	blx	r3
   12ae0:	mov	r9, r0
   12ae4:	ldr	r3, [sp, #20]
   12ae8:	cmp	r3, #0
   12aec:	beq	12a38 <__assert_fail@plt+0x1b08>
   12af0:	cmp	r0, #0
   12af4:	ble	12a58 <__assert_fail@plt+0x1b28>
   12af8:	mov	r6, #0
   12afc:	str	r8, [sp, #32]
   12b00:	str	sl, [sp, #36]	; 0x24
   12b04:	ldr	r8, [sp, #16]
   12b08:	str	r5, [sp, #40]	; 0x28
   12b0c:	ldr	r5, [sp, #20]
   12b10:	ldr	sl, [sp, #28]
   12b14:	b	12bb8 <__assert_fail@plt+0x1c88>
   12b18:	bl	10e4c <__errno_location@plt>
   12b1c:	ldr	r4, [r0]
   12b20:	mov	r2, #5
   12b24:	movw	r1, #34616	; 0x8738
   12b28:	movt	r1, #1
   12b2c:	mov	r0, #0
   12b30:	bl	10d68 <dcgettext@plt>
   12b34:	mov	r2, r0
   12b38:	mov	r1, r4
   12b3c:	mov	r0, #1
   12b40:	bl	10dd4 <error@plt>
   12b44:	mov	r1, #10
   12b48:	mov	r0, fp
   12b4c:	bl	10eb8 <__overflow@plt>
   12b50:	cmn	r0, #1
   12b54:	beq	12b60 <__assert_fail@plt+0x1c30>
   12b58:	mov	r7, r4
   12b5c:	b	12bb0 <__assert_fail@plt+0x1c80>
   12b60:	bl	10e4c <__errno_location@plt>
   12b64:	ldr	r4, [r0]
   12b68:	mov	r2, #5
   12b6c:	movw	r1, #34616	; 0x8738
   12b70:	movt	r1, #1
   12b74:	mov	r0, #0
   12b78:	bl	10d68 <dcgettext@plt>
   12b7c:	mov	r2, r0
   12b80:	mov	r1, r4
   12b84:	mov	r0, #1
   12b88:	bl	10dd4 <error@plt>
   12b8c:	ldr	r3, [sl]
   12b90:	mov	r2, r4
   12b94:	mov	r1, #1
   12b98:	add	r0, r8, r6
   12b9c:	bl	10d44 <fwrite_unlocked@plt>
   12ba0:	cmp	r4, r0
   12ba4:	bhi	12bf8 <__assert_fail@plt+0x1cc8>
   12ba8:	add	r7, r7, r4
   12bac:	add	r6, r6, r4
   12bb0:	cmp	r6, r9
   12bb4:	bge	12c24 <__assert_fail@plt+0x1cf4>
   12bb8:	sub	r4, r9, r6
   12bbc:	sub	r3, r5, r7
   12bc0:	cmp	r4, r3
   12bc4:	movge	r4, r3
   12bc8:	cmp	r4, #0
   12bcc:	bne	12b8c <__assert_fail@plt+0x1c5c>
   12bd0:	ldr	r3, [fp, #20]
   12bd4:	ldr	r2, [fp, #24]
   12bd8:	cmp	r3, r2
   12bdc:	bcs	12b44 <__assert_fail@plt+0x1c14>
   12be0:	add	r2, r3, #1
   12be4:	str	r2, [fp, #20]
   12be8:	mov	r2, #10
   12bec:	strb	r2, [r3]
   12bf0:	mov	r7, r4
   12bf4:	b	12bb0 <__assert_fail@plt+0x1c80>
   12bf8:	bl	10e4c <__errno_location@plt>
   12bfc:	ldr	r4, [r0]
   12c00:	mov	r2, #5
   12c04:	movw	r1, #34616	; 0x8738
   12c08:	movt	r1, #1
   12c0c:	mov	r0, #0
   12c10:	bl	10d68 <dcgettext@plt>
   12c14:	mov	r2, r0
   12c18:	mov	r1, r4
   12c1c:	mov	r0, #1
   12c20:	bl	10dd4 <error@plt>
   12c24:	ldr	r8, [sp, #32]
   12c28:	ldr	sl, [sp, #36]	; 0x24
   12c2c:	ldr	r5, [sp, #40]	; 0x28
   12c30:	b	12a58 <__assert_fail@plt+0x1b28>
   12c34:	ldr	sl, [sp, #20]
   12c38:	cmp	sl, #0
   12c3c:	cmpne	r7, #0
   12c40:	bgt	12c5c <__assert_fail@plt+0x1d2c>
   12c44:	ldr	r3, [r8]
   12c48:	tst	r3, #32
   12c4c:	bne	12cbc <__assert_fail@plt+0x1d8c>
   12c50:	ldr	r1, [sp, #44]	; 0x2c
   12c54:	mov	r0, r8
   12c58:	bl	11bdc <__assert_fail@plt+0xcac>
   12c5c:	ldr	r3, [fp, #20]
   12c60:	ldr	r2, [fp, #24]
   12c64:	cmp	r3, r2
   12c68:	addcc	r2, r3, #1
   12c6c:	strcc	r2, [fp, #20]
   12c70:	movcc	r2, #10
   12c74:	strbcc	r2, [r3]
   12c78:	bcc	12c44 <__assert_fail@plt+0x1d14>
   12c7c:	mov	r1, #10
   12c80:	mov	r0, fp
   12c84:	bl	10eb8 <__overflow@plt>
   12c88:	cmn	r0, #1
   12c8c:	bne	12c44 <__assert_fail@plt+0x1d14>
   12c90:	bl	10e4c <__errno_location@plt>
   12c94:	ldr	r4, [r0]
   12c98:	mov	r2, #5
   12c9c:	movw	r1, #34616	; 0x8738
   12ca0:	movt	r1, #1
   12ca4:	mov	r0, #0
   12ca8:	bl	10d68 <dcgettext@plt>
   12cac:	mov	r2, r0
   12cb0:	mov	r1, r4
   12cb4:	mov	r0, #1
   12cb8:	bl	10dd4 <error@plt>
   12cbc:	bl	10e4c <__errno_location@plt>
   12cc0:	ldr	r4, [r0]
   12cc4:	mov	r2, #5
   12cc8:	movw	r1, #34604	; 0x872c
   12ccc:	movt	r1, #1
   12cd0:	mov	r0, #0
   12cd4:	bl	10d68 <dcgettext@plt>
   12cd8:	mov	r2, r0
   12cdc:	mov	r1, r4
   12ce0:	mov	r0, #1
   12ce4:	bl	10dd4 <error@plt>
   12ce8:	cmp	r5, #1
   12cec:	bgt	129c4 <__assert_fail@plt+0x1a94>
   12cf0:	cmp	r5, #1
   12cf4:	beq	12950 <__assert_fail@plt+0x1a20>
   12cf8:	str	fp, [sp, #52]	; 0x34
   12cfc:	ldr	r7, [r9, #16]
   12d00:	cmp	r5, #0
   12d04:	movne	r2, r6
   12d08:	moveq	r2, r4
   12d0c:	add	r3, sp, #52	; 0x34
   12d10:	str	r3, [sp]
   12d14:	ldr	r3, [sp, #16]
   12d18:	mov	r1, sl
   12d1c:	add	r0, sp, #56	; 0x38
   12d20:	blx	r7
   12d24:	mov	r7, r0
   12d28:	ldr	r3, [sp, #28]
   12d2c:	ldr	r2, [sp, #52]	; 0x34
   12d30:	mov	r1, #1
   12d34:	ldr	r0, [sp, #16]
   12d38:	bl	10d44 <fwrite_unlocked@plt>
   12d3c:	ldr	r3, [sp, #52]	; 0x34
   12d40:	cmp	r0, r3
   12d44:	bcc	1296c <__assert_fail@plt+0x1a3c>
   12d48:	cmp	r7, #0
   12d4c:	beq	12998 <__assert_fail@plt+0x1a68>
   12d50:	add	r5, r5, #1
   12d54:	ldr	r3, [r8]
   12d58:	ands	r3, r3, #16
   12d5c:	bne	12ce8 <__assert_fail@plt+0x1db8>
   12d60:	cmp	r5, #0
   12d64:	ble	12cf0 <__assert_fail@plt+0x1dc0>
   12d68:	mov	r4, #0
   12d6c:	b	128dc <__assert_fail@plt+0x19ac>
   12d70:	andeq	r7, r1, r4, lsr #28
   12d74:	cmp	r1, #7
   12d78:	ble	12ffc <__assert_fail@plt+0x20cc>
   12d7c:	movw	r1, #34892	; 0x884c
   12d80:	movt	r1, #1
   12d84:	ldrb	ip, [r0]
   12d88:	ldrsb	ip, [r1, ip]
   12d8c:	cmp	ip, #0
   12d90:	blt	13004 <__assert_fail@plt+0x20d4>
   12d94:	strd	r4, [sp, #-12]!
   12d98:	str	lr, [sp, #8]
   12d9c:	movw	r1, #34892	; 0x884c
   12da0:	movt	r1, #1
   12da4:	ldrb	lr, [r0, #1]
   12da8:	ldrsb	r4, [r1, lr]
   12dac:	cmp	r4, #0
   12db0:	movlt	r0, #0
   12db4:	blt	12f90 <__assert_fail@plt+0x2060>
   12db8:	ldr	r1, [r2]
   12dbc:	ldr	lr, [r3]
   12dc0:	cmp	lr, #0
   12dc4:	beq	12de0 <__assert_fail@plt+0x1eb0>
   12dc8:	asr	lr, r4, #2
   12dcc:	orr	ip, lr, ip, lsl #3
   12dd0:	strb	ip, [r1], #1
   12dd4:	ldr	ip, [r3]
   12dd8:	sub	ip, ip, #1
   12ddc:	str	ip, [r3]
   12de0:	ldrb	ip, [r0, #2]
   12de4:	cmp	ip, #61	; 0x3d
   12de8:	beq	12f40 <__assert_fail@plt+0x2010>
   12dec:	movw	lr, #34892	; 0x884c
   12df0:	movt	lr, #1
   12df4:	ldrsb	ip, [lr, ip]
   12df8:	cmp	ip, #0
   12dfc:	blt	12f88 <__assert_fail@plt+0x2058>
   12e00:	movw	lr, #34892	; 0x884c
   12e04:	movt	lr, #1
   12e08:	ldrb	r5, [r0, #3]
   12e0c:	ldrsb	lr, [lr, r5]
   12e10:	cmp	lr, #0
   12e14:	blt	12f88 <__assert_fail@plt+0x2058>
   12e18:	ldr	r5, [r3]
   12e1c:	cmp	r5, #0
   12e20:	beq	12e40 <__assert_fail@plt+0x1f10>
   12e24:	lsl	ip, ip, #1
   12e28:	orr	ip, ip, r4, lsl #6
   12e2c:	orr	ip, ip, lr, asr #4
   12e30:	strb	ip, [r1], #1
   12e34:	ldr	ip, [r3]
   12e38:	sub	ip, ip, #1
   12e3c:	str	ip, [r3]
   12e40:	ldrb	ip, [r0, #4]
   12e44:	cmp	ip, #61	; 0x3d
   12e48:	beq	12f9c <__assert_fail@plt+0x206c>
   12e4c:	movw	r4, #34892	; 0x884c
   12e50:	movt	r4, #1
   12e54:	ldrsb	ip, [r4, ip]
   12e58:	cmp	ip, #0
   12e5c:	strlt	r1, [r2]
   12e60:	movlt	r0, #0
   12e64:	blt	12f90 <__assert_fail@plt+0x2060>
   12e68:	ldr	r4, [r3]
   12e6c:	cmp	r4, #0
   12e70:	beq	12e8c <__assert_fail@plt+0x1f5c>
   12e74:	asr	r4, ip, #1
   12e78:	orr	lr, r4, lr, lsl #4
   12e7c:	strb	lr, [r1], #1
   12e80:	ldr	lr, [r3]
   12e84:	sub	lr, lr, #1
   12e88:	str	lr, [r3]
   12e8c:	ldrb	lr, [r0, #5]
   12e90:	cmp	lr, #61	; 0x3d
   12e94:	beq	12fcc <__assert_fail@plt+0x209c>
   12e98:	movw	r4, #34892	; 0x884c
   12e9c:	movt	r4, #1
   12ea0:	ldrsb	lr, [r4, lr]
   12ea4:	cmp	lr, #0
   12ea8:	blt	12ff0 <__assert_fail@plt+0x20c0>
   12eac:	movw	r4, #34892	; 0x884c
   12eb0:	movt	r4, #1
   12eb4:	ldrb	r5, [r0, #6]
   12eb8:	ldrsb	r4, [r4, r5]
   12ebc:	cmp	r4, #0
   12ec0:	blt	12ff0 <__assert_fail@plt+0x20c0>
   12ec4:	ldr	r5, [r3]
   12ec8:	cmp	r5, #0
   12ecc:	beq	12eec <__assert_fail@plt+0x1fbc>
   12ed0:	lsl	lr, lr, #2
   12ed4:	orr	ip, lr, ip, lsl #7
   12ed8:	orr	ip, ip, r4, asr #3
   12edc:	strb	ip, [r1], #1
   12ee0:	ldr	ip, [r3]
   12ee4:	sub	ip, ip, #1
   12ee8:	str	ip, [r3]
   12eec:	ldrb	r0, [r0, #7]
   12ef0:	cmp	r0, #61	; 0x3d
   12ef4:	beq	12f34 <__assert_fail@plt+0x2004>
   12ef8:	movw	ip, #34892	; 0x884c
   12efc:	movt	ip, #1
   12f00:	ldrsb	r0, [ip, r0]
   12f04:	cmp	r0, #0
   12f08:	strlt	r1, [r2]
   12f0c:	movlt	r0, #0
   12f10:	blt	12f90 <__assert_fail@plt+0x2060>
   12f14:	ldr	ip, [r3]
   12f18:	cmp	ip, #0
   12f1c:	beq	12f34 <__assert_fail@plt+0x2004>
   12f20:	orr	r0, r0, r4, lsl #5
   12f24:	strb	r0, [r1], #1
   12f28:	ldr	r0, [r3]
   12f2c:	sub	r0, r0, #1
   12f30:	str	r0, [r3]
   12f34:	str	r1, [r2]
   12f38:	mov	r0, #1
   12f3c:	b	12f90 <__assert_fail@plt+0x2060>
   12f40:	ldrb	r3, [r0, #3]
   12f44:	cmp	r3, #61	; 0x3d
   12f48:	bne	12f7c <__assert_fail@plt+0x204c>
   12f4c:	ldrb	r3, [r0, #4]
   12f50:	cmp	r3, #61	; 0x3d
   12f54:	bne	12f7c <__assert_fail@plt+0x204c>
   12f58:	ldrb	r3, [r0, #5]
   12f5c:	cmp	r3, #61	; 0x3d
   12f60:	bne	12f7c <__assert_fail@plt+0x204c>
   12f64:	ldrb	r3, [r0, #6]
   12f68:	cmp	r3, #61	; 0x3d
   12f6c:	bne	12f7c <__assert_fail@plt+0x204c>
   12f70:	ldrb	r3, [r0, #7]
   12f74:	cmp	r3, #61	; 0x3d
   12f78:	beq	12f34 <__assert_fail@plt+0x2004>
   12f7c:	str	r1, [r2]
   12f80:	mov	r0, #0
   12f84:	b	12f90 <__assert_fail@plt+0x2060>
   12f88:	str	r1, [r2]
   12f8c:	mov	r0, #0
   12f90:	ldrd	r4, [sp]
   12f94:	add	sp, sp, #8
   12f98:	pop	{pc}		; (ldr pc, [sp], #4)
   12f9c:	ldrb	r3, [r0, #5]
   12fa0:	cmp	r3, #61	; 0x3d
   12fa4:	bne	12fc0 <__assert_fail@plt+0x2090>
   12fa8:	ldrb	r3, [r0, #6]
   12fac:	cmp	r3, #61	; 0x3d
   12fb0:	bne	12fc0 <__assert_fail@plt+0x2090>
   12fb4:	ldrb	r3, [r0, #7]
   12fb8:	cmp	r3, #61	; 0x3d
   12fbc:	beq	12f34 <__assert_fail@plt+0x2004>
   12fc0:	str	r1, [r2]
   12fc4:	mov	r0, #0
   12fc8:	b	12f90 <__assert_fail@plt+0x2060>
   12fcc:	ldrb	r3, [r0, #6]
   12fd0:	cmp	r3, #61	; 0x3d
   12fd4:	bne	12fe4 <__assert_fail@plt+0x20b4>
   12fd8:	ldrb	r3, [r0, #7]
   12fdc:	cmp	r3, #61	; 0x3d
   12fe0:	beq	12f34 <__assert_fail@plt+0x2004>
   12fe4:	str	r1, [r2]
   12fe8:	mov	r0, #0
   12fec:	b	12f90 <__assert_fail@plt+0x2060>
   12ff0:	str	r1, [r2]
   12ff4:	mov	r0, #0
   12ff8:	b	12f90 <__assert_fail@plt+0x2060>
   12ffc:	mov	r0, #0
   13000:	bx	lr
   13004:	mov	r0, #0
   13008:	bx	lr
   1300c:	strd	r4, [sp, #-12]!
   13010:	str	lr, [sp, #8]
   13014:	movw	r4, #34892	; 0x884c
   13018:	movt	r4, #1
   1301c:	mov	r5, #61	; 0x3d
   13020:	b	130e4 <__assert_fail@plt+0x21b4>
   13024:	and	ip, ip, #31
   13028:	add	ip, r4, ip
   1302c:	ldrb	ip, [ip, #256]	; 0x100
   13030:	strb	ip, [r2, #1]
   13034:	cmp	r3, #2
   13038:	beq	13218 <__assert_fail@plt+0x22e8>
   1303c:	cmp	lr, #0
   13040:	bne	13134 <__assert_fail@plt+0x2204>
   13044:	strb	r5, [r2, #2]
   13048:	cmp	r3, #3
   1304c:	beq	13218 <__assert_fail@plt+0x22e8>
   13050:	strb	r5, [r2, #3]
   13054:	cmp	r3, #4
   13058:	beq	13218 <__assert_fail@plt+0x22e8>
   1305c:	mov	r1, r5
   13060:	b	131a4 <__assert_fail@plt+0x2274>
   13064:	strb	r5, [r2, #5]
   13068:	cmp	r3, #6
   1306c:	beq	13218 <__assert_fail@plt+0x22e8>
   13070:	cmp	lr, #0
   13074:	moveq	r1, r5
   13078:	bne	131d4 <__assert_fail@plt+0x22a4>
   1307c:	strb	r1, [r2, #6]
   13080:	cmp	r3, #7
   13084:	beq	13218 <__assert_fail@plt+0x22e8>
   13088:	cmp	lr, #0
   1308c:	beq	130d0 <__assert_fail@plt+0x21a0>
   13090:	add	r2, r2, #8
   13094:	ldrb	r1, [r0, #4]
   13098:	and	r1, r1, #31
   1309c:	add	r1, r4, r1
   130a0:	ldrb	r1, [r1, #256]	; 0x100
   130a4:	strb	r1, [r2, #-1]
   130a8:	subs	r3, r3, #8
   130ac:	beq	13218 <__assert_fail@plt+0x22e8>
   130b0:	subs	lr, lr, #1
   130b4:	addne	r0, r0, #5
   130b8:	b	130e0 <__assert_fail@plt+0x21b0>
   130bc:	cmp	r3, #0
   130c0:	beq	13218 <__assert_fail@plt+0x22e8>
   130c4:	mov	r3, #0
   130c8:	strb	r3, [r2]
   130cc:	b	13218 <__assert_fail@plt+0x22e8>
   130d0:	add	r2, r2, #8
   130d4:	strb	r5, [r2, #-1]
   130d8:	subs	r3, r3, #8
   130dc:	beq	13218 <__assert_fail@plt+0x22e8>
   130e0:	mov	r1, lr
   130e4:	cmp	r1, #0
   130e8:	cmpne	r3, #0
   130ec:	beq	130bc <__assert_fail@plt+0x218c>
   130f0:	ldrb	ip, [r0]
   130f4:	add	lr, r4, ip, lsr #3
   130f8:	ldrb	lr, [lr, #256]	; 0x100
   130fc:	strb	lr, [r2]
   13100:	cmp	r3, #1
   13104:	beq	13218 <__assert_fail@plt+0x22e8>
   13108:	lsl	ip, ip, #2
   1310c:	subs	lr, r1, #1
   13110:	beq	13024 <__assert_fail@plt+0x20f4>
   13114:	ldrb	lr, [r0, #1]
   13118:	add	ip, ip, lr, lsr #6
   1311c:	and	ip, ip, #31
   13120:	add	ip, r4, ip
   13124:	ldrb	ip, [ip, #256]	; 0x100
   13128:	strb	ip, [r2, #1]
   1312c:	cmp	r3, #2
   13130:	beq	13218 <__assert_fail@plt+0x22e8>
   13134:	ldrb	ip, [r0, #1]
   13138:	ubfx	ip, ip, #1, #5
   1313c:	add	ip, r4, ip
   13140:	ldrb	ip, [ip, #256]	; 0x100
   13144:	strb	ip, [r2, #2]
   13148:	cmp	r3, #3
   1314c:	beq	13218 <__assert_fail@plt+0x22e8>
   13150:	ldrb	ip, [r0, #1]
   13154:	lsl	ip, ip, #4
   13158:	cmp	r1, #2
   1315c:	beq	13200 <__assert_fail@plt+0x22d0>
   13160:	ldrb	lr, [r0, #2]
   13164:	add	ip, ip, lr, lsr #4
   13168:	and	ip, ip, #31
   1316c:	add	ip, r4, ip
   13170:	ldrb	ip, [ip, #256]	; 0x100
   13174:	strb	ip, [r2, #3]
   13178:	cmp	r3, #4
   1317c:	beq	13218 <__assert_fail@plt+0x22e8>
   13180:	lsl	ip, lr, #1
   13184:	subs	lr, r1, #3
   13188:	ldrbne	r1, [r0, #3]
   1318c:	lsrne	r1, r1, #7
   13190:	moveq	r1, lr
   13194:	add	ip, ip, r1
   13198:	and	ip, ip, #31
   1319c:	add	ip, r4, ip
   131a0:	ldrb	r1, [ip, #256]	; 0x100
   131a4:	strb	r1, [r2, #4]
   131a8:	cmp	r3, #5
   131ac:	beq	13218 <__assert_fail@plt+0x22e8>
   131b0:	cmp	lr, #0
   131b4:	beq	13064 <__assert_fail@plt+0x2134>
   131b8:	ldrb	r1, [r0, #3]
   131bc:	ubfx	r1, r1, #2, #5
   131c0:	add	r1, r4, r1
   131c4:	ldrb	r1, [r1, #256]	; 0x100
   131c8:	strb	r1, [r2, #5]
   131cc:	cmp	r3, #6
   131d0:	beq	13218 <__assert_fail@plt+0x22e8>
   131d4:	ldrb	r1, [r0, #3]
   131d8:	lsl	r1, r1, #3
   131dc:	subs	lr, lr, #1
   131e0:	ldrbne	ip, [r0, #4]
   131e4:	lsrne	ip, ip, #5
   131e8:	moveq	ip, lr
   131ec:	add	r1, r1, ip
   131f0:	and	r1, r1, #31
   131f4:	add	r1, r4, r1
   131f8:	ldrb	r1, [r1, #256]	; 0x100
   131fc:	b	1307c <__assert_fail@plt+0x214c>
   13200:	and	ip, ip, #31
   13204:	add	ip, r4, ip
   13208:	ldrb	r1, [ip, #256]	; 0x100
   1320c:	strb	r1, [r2, #3]
   13210:	cmp	r3, #4
   13214:	bne	13224 <__assert_fail@plt+0x22f4>
   13218:	ldrd	r4, [sp]
   1321c:	add	sp, sp, #8
   13220:	pop	{pc}		; (ldr pc, [sp], #4)
   13224:	mov	r1, r5
   13228:	mov	lr, #0
   1322c:	b	131a4 <__assert_fail@plt+0x2274>
   13230:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13234:	strd	r6, [sp, #8]
   13238:	str	r8, [sp, #16]
   1323c:	str	lr, [sp, #20]
   13240:	movw	r3, #26215	; 0x6667
   13244:	movt	r3, #26214	; 0x6666
   13248:	smull	r3, ip, r3, r1
   1324c:	asr	r3, r1, #31
   13250:	rsb	r3, r3, ip, asr #1
   13254:	add	ip, r3, r3, lsl #2
   13258:	cmp	r1, ip
   1325c:	addne	r3, r3, #1
   13260:	asr	r5, r3, #31
   13264:	lsl	lr, r5, #3
   13268:	orr	lr, lr, r3, lsr #29
   1326c:	lsl	r3, r3, #3
   13270:	asr	ip, r3, #31
   13274:	subs	ip, ip, lr
   13278:	movne	ip, #1
   1327c:	orrs	ip, ip, r1, lsr #31
   13280:	movne	r6, #0
   13284:	strne	r6, [r2]
   13288:	beq	132a4 <__assert_fail@plt+0x2374>
   1328c:	mov	r0, r6
   13290:	ldrd	r4, [sp]
   13294:	ldrd	r6, [sp, #8]
   13298:	ldr	r8, [sp, #16]
   1329c:	add	sp, sp, #20
   132a0:	pop	{pc}		; (ldr pc, [sp], #4)
   132a4:	mov	r8, r2
   132a8:	mov	r5, r1
   132ac:	mov	r7, r0
   132b0:	mov	r6, r3
   132b4:	add	r4, r3, #1
   132b8:	mov	r0, r4
   132bc:	bl	176f4 <__assert_fail@plt+0x67c4>
   132c0:	str	r0, [r8]
   132c4:	cmp	r0, #0
   132c8:	moveq	r6, r4
   132cc:	beq	1328c <__assert_fail@plt+0x235c>
   132d0:	mov	r3, r4
   132d4:	mov	r2, r0
   132d8:	mov	r1, r5
   132dc:	mov	r0, r7
   132e0:	bl	1300c <__assert_fail@plt+0x20dc>
   132e4:	b	1328c <__assert_fail@plt+0x235c>
   132e8:	movw	r3, #34892	; 0x884c
   132ec:	movt	r3, #1
   132f0:	ldrb	r0, [r3, r0]
   132f4:	mvn	r0, r0
   132f8:	ubfx	r0, r0, #7, #1
   132fc:	bx	lr
   13300:	mov	r3, #0
   13304:	str	r3, [r0]
   13308:	bx	lr
   1330c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13310:	strd	r6, [sp, #8]
   13314:	strd	r8, [sp, #16]
   13318:	strd	sl, [sp, #24]
   1331c:	str	lr, [sp, #32]
   13320:	sub	sp, sp, #20
   13324:	mov	fp, r1
   13328:	mov	r5, r2
   1332c:	str	r3, [sp, #4]
   13330:	ldr	r3, [sp, #56]	; 0x38
   13334:	ldr	r3, [r3]
   13338:	str	r3, [sp, #12]
   1333c:	subs	r6, r0, #0
   13340:	movne	sl, #1
   13344:	moveq	sl, #0
   13348:	beq	13368 <__assert_fail@plt+0x2438>
   1334c:	ldr	r9, [r6]
   13350:	clz	r8, r2
   13354:	lsr	r8, r8, #5
   13358:	eor	r8, r8, #1
   1335c:	and	r3, r8, sl
   13360:	str	r3, [sp]
   13364:	b	1344c <__assert_fail@plt+0x251c>
   13368:	mov	r9, #0
   1336c:	mov	r8, r9
   13370:	b	13358 <__assert_fail@plt+0x2428>
   13374:	mov	r4, fp
   13378:	add	fp, fp, r5
   1337c:	sub	r5, fp, r4
   13380:	ldr	r7, [sp, #12]
   13384:	add	r3, sp, #12
   13388:	add	r2, sp, #4
   1338c:	mov	r1, r5
   13390:	mov	r0, r4
   13394:	bl	12d74 <__assert_fail@plt+0x1e44>
   13398:	cmp	r0, #0
   1339c:	beq	13468 <__assert_fail@plt+0x2538>
   133a0:	add	r4, r4, #8
   133a4:	b	1337c <__assert_fail@plt+0x244c>
   133a8:	mov	r2, #8
   133ac:	mov	r1, #10
   133b0:	mov	r0, r4
   133b4:	bl	10e94 <memchr@plt>
   133b8:	cmp	r0, #0
   133bc:	bne	1356c <__assert_fail@plt+0x263c>
   133c0:	add	fp, r4, #8
   133c4:	mov	r5, #8
   133c8:	b	1342c <__assert_fail@plt+0x24fc>
   133cc:	cmp	r4, r7
   133d0:	beq	13404 <__assert_fail@plt+0x24d4>
   133d4:	ldrb	r1, [r4], #1
   133d8:	cmp	r1, #10
   133dc:	beq	133cc <__assert_fail@plt+0x249c>
   133e0:	ldr	r0, [r6]
   133e4:	add	r2, r0, #1
   133e8:	mov	r3, r6
   133ec:	str	r2, [r3], r0
   133f0:	strb	r1, [r3, #4]
   133f4:	cmp	r2, #8
   133f8:	bne	133cc <__assert_fail@plt+0x249c>
   133fc:	mov	fp, r4
   13400:	b	13408 <__assert_fail@plt+0x24d8>
   13404:	mov	fp, r7
   13408:	mov	r4, r6
   1340c:	ldr	r5, [r4], #4
   13410:	cmp	r5, #0
   13414:	beq	134d4 <__assert_fail@plt+0x25a4>
   13418:	cmp	r5, #7
   1341c:	bgt	1342c <__assert_fail@plt+0x24fc>
   13420:	ldr	r3, [sp]
   13424:	cmp	r3, #0
   13428:	bne	13510 <__assert_fail@plt+0x25e0>
   1342c:	add	r3, sp, #12
   13430:	add	r2, sp, #4
   13434:	mov	r1, r5
   13438:	mov	r0, r4
   1343c:	bl	12d74 <__assert_fail@plt+0x1e44>
   13440:	cmp	r0, #0
   13444:	beq	134d4 <__assert_fail@plt+0x25a4>
   13448:	sub	r5, r7, fp
   1344c:	cmp	r9, #0
   13450:	moveq	r3, r8
   13454:	movne	r3, #0
   13458:	cmp	r3, #0
   1345c:	bne	13374 <__assert_fail@plt+0x2444>
   13460:	ldr	r7, [sp, #12]
   13464:	mov	r4, fp
   13468:	cmp	r5, #0
   1346c:	moveq	r3, r8
   13470:	movne	r3, #0
   13474:	cmp	r3, #0
   13478:	bne	134d0 <__assert_fail@plt+0x25a0>
   1347c:	cmp	r5, #0
   13480:	beq	13518 <__assert_fail@plt+0x25e8>
   13484:	ldrb	r3, [r4]
   13488:	cmp	r3, #10
   1348c:	movne	r3, #0
   13490:	andeq	r3, sl, #1
   13494:	cmp	r3, #0
   13498:	addne	fp, r4, #1
   1349c:	subne	r5, r5, #1
   134a0:	bne	1344c <__assert_fail@plt+0x251c>
   134a4:	ldr	r3, [sp, #12]
   134a8:	sub	r2, r7, r3
   134ac:	ldr	r3, [sp, #4]
   134b0:	sub	r3, r3, r2
   134b4:	str	r3, [sp, #4]
   134b8:	str	r7, [sp, #12]
   134bc:	add	r7, r4, r5
   134c0:	cmp	r6, #0
   134c4:	moveq	fp, r4
   134c8:	beq	13410 <__assert_fail@plt+0x24e0>
   134cc:	b	1353c <__assert_fail@plt+0x260c>
   134d0:	mov	r5, #0
   134d4:	ldr	r3, [sp, #56]	; 0x38
   134d8:	ldr	r3, [r3]
   134dc:	ldr	r2, [sp, #12]
   134e0:	sub	r3, r3, r2
   134e4:	ldr	r2, [sp, #56]	; 0x38
   134e8:	str	r3, [r2]
   134ec:	clz	r0, r5
   134f0:	lsr	r0, r0, #5
   134f4:	add	sp, sp, #20
   134f8:	ldrd	r4, [sp]
   134fc:	ldrd	r6, [sp, #8]
   13500:	ldrd	r8, [sp, #16]
   13504:	ldrd	sl, [sp, #24]
   13508:	add	sp, sp, #32
   1350c:	pop	{pc}		; (ldr pc, [sp], #4)
   13510:	mov	r5, #0
   13514:	b	134d4 <__assert_fail@plt+0x25a4>
   13518:	ldr	r3, [sp, #12]
   1351c:	sub	r2, r7, r3
   13520:	ldr	r3, [sp, #4]
   13524:	sub	r3, r3, r2
   13528:	str	r3, [sp, #4]
   1352c:	str	r7, [sp, #12]
   13530:	add	r7, r4, r5
   13534:	cmp	r6, #0
   13538:	beq	134d4 <__assert_fail@plt+0x25a4>
   1353c:	ldr	r3, [r6]
   13540:	cmp	r3, #8
   13544:	moveq	r3, #0
   13548:	streq	r3, [r6]
   1354c:	ldr	r3, [r6]
   13550:	cmp	r5, #7
   13554:	movle	r5, #0
   13558:	movgt	r5, #1
   1355c:	cmp	r3, #0
   13560:	movne	r5, #0
   13564:	cmp	r5, #0
   13568:	bne	133a8 <__assert_fail@plt+0x2478>
   1356c:	cmp	r7, r4
   13570:	movls	fp, r4
   13574:	bhi	133d4 <__assert_fail@plt+0x24a4>
   13578:	b	13408 <__assert_fail@plt+0x24d8>
   1357c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13580:	strd	r6, [sp, #8]
   13584:	str	lr, [sp, #16]
   13588:	sub	sp, sp, #20
   1358c:	mov	r6, r0
   13590:	mov	r7, r1
   13594:	mov	r4, r2
   13598:	mov	r5, r3
   1359c:	asr	r0, r2, #3
   135a0:	add	r0, r0, #1
   135a4:	add	r0, r0, r0, lsl #2
   135a8:	str	r0, [sp, #12]
   135ac:	bl	176f4 <__assert_fail@plt+0x67c4>
   135b0:	str	r0, [r5]
   135b4:	cmp	r0, #0
   135b8:	moveq	r4, #1
   135bc:	beq	135fc <__assert_fail@plt+0x26cc>
   135c0:	add	r3, sp, #12
   135c4:	str	r3, [sp]
   135c8:	mov	r3, r0
   135cc:	mov	r2, r4
   135d0:	mov	r1, r7
   135d4:	mov	r0, r6
   135d8:	bl	1330c <__assert_fail@plt+0x23dc>
   135dc:	subs	r4, r0, #0
   135e0:	beq	13614 <__assert_fail@plt+0x26e4>
   135e4:	ldr	r3, [sp, #40]	; 0x28
   135e8:	cmp	r3, #0
   135ec:	beq	135fc <__assert_fail@plt+0x26cc>
   135f0:	ldr	r3, [sp, #12]
   135f4:	ldr	r2, [sp, #40]	; 0x28
   135f8:	str	r3, [r2]
   135fc:	mov	r0, r4
   13600:	add	sp, sp, #20
   13604:	ldrd	r4, [sp]
   13608:	ldrd	r6, [sp, #8]
   1360c:	add	sp, sp, #16
   13610:	pop	{pc}		; (ldr pc, [sp], #4)
   13614:	ldr	r0, [r5]
   13618:	bl	14024 <__assert_fail@plt+0x30f4>
   1361c:	mov	r3, #0
   13620:	str	r3, [r5]
   13624:	b	135fc <__assert_fail@plt+0x26cc>
   13628:	cmp	r1, #1
   1362c:	ble	1379c <__assert_fail@plt+0x286c>
   13630:	strd	r4, [sp, #-12]!
   13634:	str	lr, [sp, #8]
   13638:	movw	ip, #35180	; 0x896c
   1363c:	movt	ip, #1
   13640:	ldrb	lr, [r0]
   13644:	ldrsb	lr, [ip, lr]
   13648:	cmp	lr, #0
   1364c:	movlt	r0, #0
   13650:	blt	1377c <__assert_fail@plt+0x284c>
   13654:	movw	ip, #35180	; 0x896c
   13658:	movt	ip, #1
   1365c:	ldrb	r4, [r0, #1]
   13660:	ldrsb	r5, [ip, r4]
   13664:	cmp	r5, #0
   13668:	movlt	r0, #0
   1366c:	blt	1377c <__assert_fail@plt+0x284c>
   13670:	ldr	ip, [r2]
   13674:	ldr	r4, [r3]
   13678:	cmp	r4, #0
   1367c:	beq	13698 <__assert_fail@plt+0x2768>
   13680:	asr	r4, r5, #4
   13684:	orr	lr, r4, lr, lsl #2
   13688:	strb	lr, [ip], #1
   1368c:	ldr	lr, [r3]
   13690:	sub	lr, lr, #1
   13694:	str	lr, [r3]
   13698:	cmp	r1, #2
   1369c:	streq	ip, [r2]
   136a0:	moveq	r0, #0
   136a4:	beq	1377c <__assert_fail@plt+0x284c>
   136a8:	ldrb	lr, [r0, #2]
   136ac:	cmp	lr, #61	; 0x3d
   136b0:	beq	13750 <__assert_fail@plt+0x2820>
   136b4:	movw	r4, #35180	; 0x896c
   136b8:	movt	r4, #1
   136bc:	ldrsb	lr, [r4, lr]
   136c0:	cmp	lr, #0
   136c4:	strlt	ip, [r2]
   136c8:	movlt	r0, #0
   136cc:	blt	1377c <__assert_fail@plt+0x284c>
   136d0:	ldr	r4, [r3]
   136d4:	cmp	r4, #0
   136d8:	beq	136f4 <__assert_fail@plt+0x27c4>
   136dc:	asr	r4, lr, #2
   136e0:	orr	r5, r4, r5, lsl #4
   136e4:	strb	r5, [ip], #1
   136e8:	ldr	r4, [r3]
   136ec:	sub	r4, r4, #1
   136f0:	str	r4, [r3]
   136f4:	cmp	r1, #3
   136f8:	streq	ip, [r2]
   136fc:	moveq	r0, #0
   13700:	beq	1377c <__assert_fail@plt+0x284c>
   13704:	ldrb	r0, [r0, #3]
   13708:	cmp	r0, #61	; 0x3d
   1370c:	beq	13788 <__assert_fail@plt+0x2858>
   13710:	movw	r1, #35180	; 0x896c
   13714:	movt	r1, #1
   13718:	ldrsb	r1, [r1, r0]
   1371c:	cmp	r1, #0
   13720:	strlt	ip, [r2]
   13724:	movlt	r0, #0
   13728:	blt	1377c <__assert_fail@plt+0x284c>
   1372c:	ldr	r0, [r3]
   13730:	cmp	r0, #0
   13734:	beq	13774 <__assert_fail@plt+0x2844>
   13738:	orr	lr, r1, lr, lsl #6
   1373c:	strb	lr, [ip], #1
   13740:	ldr	r1, [r3]
   13744:	sub	r1, r1, #1
   13748:	str	r1, [r3]
   1374c:	b	13774 <__assert_fail@plt+0x2844>
   13750:	cmp	r1, #4
   13754:	strne	ip, [r2]
   13758:	movne	r0, #0
   1375c:	bne	1377c <__assert_fail@plt+0x284c>
   13760:	ldrb	r3, [r0, #3]
   13764:	cmp	r3, #61	; 0x3d
   13768:	strne	ip, [r2]
   1376c:	movne	r0, #0
   13770:	bne	1377c <__assert_fail@plt+0x284c>
   13774:	str	ip, [r2]
   13778:	mov	r0, #1
   1377c:	ldrd	r4, [sp]
   13780:	add	sp, sp, #8
   13784:	pop	{pc}		; (ldr pc, [sp], #4)
   13788:	cmp	r1, #4
   1378c:	strne	ip, [r2]
   13790:	movne	r0, #0
   13794:	bne	1377c <__assert_fail@plt+0x284c>
   13798:	b	13774 <__assert_fail@plt+0x2844>
   1379c:	mov	r0, #0
   137a0:	bx	lr
   137a4:	strd	r4, [sp, #-12]!
   137a8:	str	lr, [sp, #8]
   137ac:	tst	r3, #3
   137b0:	bne	137c4 <__assert_fail@plt+0x2894>
   137b4:	asr	ip, r3, #2
   137b8:	add	ip, ip, ip, lsl #1
   137bc:	cmp	ip, r1
   137c0:	beq	137d4 <__assert_fail@plt+0x28a4>
   137c4:	movw	r4, #35180	; 0x896c
   137c8:	movt	r4, #1
   137cc:	mov	r5, #61	; 0x3d
   137d0:	b	138ec <__assert_fail@plt+0x29bc>
   137d4:	cmp	r1, #0
   137d8:	beq	13870 <__assert_fail@plt+0x2940>
   137dc:	add	r2, r2, #4
   137e0:	add	ip, r0, #3
   137e4:	add	r1, r1, #3
   137e8:	add	lr, r0, r1
   137ec:	movw	r0, #35180	; 0x896c
   137f0:	movt	r0, #1
   137f4:	ldrb	r3, [ip, #-3]
   137f8:	add	r1, r0, r3, lsr #2
   137fc:	ldrb	r1, [r1, #256]	; 0x100
   13800:	strb	r1, [r2, #-4]
   13804:	ldrb	r4, [ip, #-2]
   13808:	lsr	r1, r4, #4
   1380c:	add	r1, r1, r3, lsl #4
   13810:	and	r1, r1, #63	; 0x3f
   13814:	add	r1, r0, r1
   13818:	ldrb	r3, [r1, #256]	; 0x100
   1381c:	strb	r3, [r2, #-3]
   13820:	ldrb	r1, [ip, #-1]
   13824:	lsr	r3, r1, #6
   13828:	add	r3, r3, r4, lsl #2
   1382c:	and	r3, r3, #63	; 0x3f
   13830:	add	r3, r0, r3
   13834:	ldrb	r3, [r3, #256]	; 0x100
   13838:	strb	r3, [r2, #-2]
   1383c:	and	r1, r1, #63	; 0x3f
   13840:	add	r1, r0, r1
   13844:	ldrb	r3, [r1, #256]	; 0x100
   13848:	strb	r3, [r2, #-1]
   1384c:	add	r2, r2, #4
   13850:	add	ip, ip, #3
   13854:	cmp	ip, lr
   13858:	bne	137f4 <__assert_fail@plt+0x28c4>
   1385c:	b	13870 <__assert_fail@plt+0x2940>
   13860:	cmp	r3, #0
   13864:	beq	13870 <__assert_fail@plt+0x2940>
   13868:	mov	r3, #0
   1386c:	strb	r3, [r2]
   13870:	ldrd	r4, [sp]
   13874:	add	sp, sp, #8
   13878:	pop	{pc}		; (ldr pc, [sp], #4)
   1387c:	and	ip, ip, #63	; 0x3f
   13880:	add	ip, r4, ip
   13884:	ldrb	r1, [ip, #256]	; 0x100
   13888:	strb	r1, [r2, #1]
   1388c:	cmp	r3, #2
   13890:	beq	13870 <__assert_fail@plt+0x2940>
   13894:	mov	ip, r5
   13898:	mov	r1, #0
   1389c:	strb	ip, [r2, #2]
   138a0:	cmp	r3, #3
   138a4:	beq	13870 <__assert_fail@plt+0x2940>
   138a8:	cmp	r1, #0
   138ac:	beq	138dc <__assert_fail@plt+0x29ac>
   138b0:	add	r2, r2, #4
   138b4:	ldrb	ip, [r0, #2]
   138b8:	and	ip, ip, #63	; 0x3f
   138bc:	add	ip, r4, ip
   138c0:	ldrb	ip, [ip, #256]	; 0x100
   138c4:	strb	ip, [r2, #-1]
   138c8:	subs	r3, r3, #4
   138cc:	beq	13870 <__assert_fail@plt+0x2940>
   138d0:	subs	r1, r1, #1
   138d4:	addne	r0, r0, #3
   138d8:	b	138ec <__assert_fail@plt+0x29bc>
   138dc:	add	r2, r2, #4
   138e0:	strb	r5, [r2, #-1]
   138e4:	subs	r3, r3, #4
   138e8:	beq	13870 <__assert_fail@plt+0x2940>
   138ec:	cmp	r1, #0
   138f0:	cmpne	r3, #0
   138f4:	beq	13860 <__assert_fail@plt+0x2930>
   138f8:	ldrb	ip, [r0]
   138fc:	add	lr, r4, ip, lsr #2
   13900:	ldrb	lr, [lr, #256]	; 0x100
   13904:	strb	lr, [r2]
   13908:	cmp	r3, #1
   1390c:	beq	13870 <__assert_fail@plt+0x2940>
   13910:	lsl	ip, ip, #4
   13914:	cmp	r1, #1
   13918:	beq	1387c <__assert_fail@plt+0x294c>
   1391c:	ldrb	lr, [r0, #1]
   13920:	add	ip, ip, lr, lsr #4
   13924:	and	ip, ip, #63	; 0x3f
   13928:	add	ip, r4, ip
   1392c:	ldrb	ip, [ip, #256]	; 0x100
   13930:	strb	ip, [r2, #1]
   13934:	cmp	r3, #2
   13938:	beq	13870 <__assert_fail@plt+0x2940>
   1393c:	lsl	lr, lr, #2
   13940:	subs	r1, r1, #2
   13944:	ldrbne	ip, [r0, #2]
   13948:	lsrne	ip, ip, #6
   1394c:	moveq	ip, r1
   13950:	add	lr, lr, ip
   13954:	and	lr, lr, #63	; 0x3f
   13958:	add	lr, r4, lr
   1395c:	ldrb	ip, [lr, #256]	; 0x100
   13960:	b	1389c <__assert_fail@plt+0x296c>
   13964:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13968:	strd	r6, [sp, #8]
   1396c:	str	r8, [sp, #16]
   13970:	str	lr, [sp, #20]
   13974:	movw	r3, #21846	; 0x5556
   13978:	movt	r3, #21845	; 0x5555
   1397c:	smull	ip, r3, r3, r1
   13980:	sub	r3, r3, r1, asr #31
   13984:	add	ip, r3, r3, lsl #1
   13988:	cmp	r1, ip
   1398c:	addne	r3, r3, #1
   13990:	asr	r5, r3, #31
   13994:	lsl	lr, r5, #2
   13998:	orr	lr, lr, r3, lsr #30
   1399c:	lsl	r3, r3, #2
   139a0:	asr	ip, r3, #31
   139a4:	subs	ip, ip, lr
   139a8:	movne	ip, #1
   139ac:	orrs	ip, ip, r1, lsr #31
   139b0:	movne	r6, #0
   139b4:	strne	r6, [r2]
   139b8:	beq	139d4 <__assert_fail@plt+0x2aa4>
   139bc:	mov	r0, r6
   139c0:	ldrd	r4, [sp]
   139c4:	ldrd	r6, [sp, #8]
   139c8:	ldr	r8, [sp, #16]
   139cc:	add	sp, sp, #20
   139d0:	pop	{pc}		; (ldr pc, [sp], #4)
   139d4:	mov	r8, r2
   139d8:	mov	r5, r1
   139dc:	mov	r7, r0
   139e0:	mov	r6, r3
   139e4:	add	r4, r3, #1
   139e8:	mov	r0, r4
   139ec:	bl	176f4 <__assert_fail@plt+0x67c4>
   139f0:	str	r0, [r8]
   139f4:	cmp	r0, #0
   139f8:	moveq	r6, r4
   139fc:	beq	139bc <__assert_fail@plt+0x2a8c>
   13a00:	mov	r3, r4
   13a04:	mov	r2, r0
   13a08:	mov	r1, r5
   13a0c:	mov	r0, r7
   13a10:	bl	137a4 <__assert_fail@plt+0x2874>
   13a14:	b	139bc <__assert_fail@plt+0x2a8c>
   13a18:	movw	r3, #35180	; 0x896c
   13a1c:	movt	r3, #1
   13a20:	ldrb	r0, [r3, r0]
   13a24:	mvn	r0, r0
   13a28:	ubfx	r0, r0, #7, #1
   13a2c:	bx	lr
   13a30:	mov	r3, #0
   13a34:	str	r3, [r0]
   13a38:	bx	lr
   13a3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13a40:	strd	r6, [sp, #8]
   13a44:	strd	r8, [sp, #16]
   13a48:	strd	sl, [sp, #24]
   13a4c:	str	lr, [sp, #32]
   13a50:	sub	sp, sp, #20
   13a54:	mov	fp, r1
   13a58:	mov	r5, r2
   13a5c:	str	r3, [sp, #4]
   13a60:	ldr	r3, [sp, #56]	; 0x38
   13a64:	ldr	r3, [r3]
   13a68:	str	r3, [sp, #12]
   13a6c:	subs	r6, r0, #0
   13a70:	movne	sl, #1
   13a74:	moveq	sl, #0
   13a78:	beq	13a98 <__assert_fail@plt+0x2b68>
   13a7c:	ldr	r9, [r6]
   13a80:	clz	r8, r2
   13a84:	lsr	r8, r8, #5
   13a88:	eor	r8, r8, #1
   13a8c:	and	r3, r8, sl
   13a90:	str	r3, [sp]
   13a94:	b	13b7c <__assert_fail@plt+0x2c4c>
   13a98:	mov	r9, #0
   13a9c:	mov	r8, r9
   13aa0:	b	13a88 <__assert_fail@plt+0x2b58>
   13aa4:	mov	r4, fp
   13aa8:	add	fp, fp, r5
   13aac:	sub	r5, fp, r4
   13ab0:	ldr	r7, [sp, #12]
   13ab4:	add	r3, sp, #12
   13ab8:	add	r2, sp, #4
   13abc:	mov	r1, r5
   13ac0:	mov	r0, r4
   13ac4:	bl	13628 <__assert_fail@plt+0x26f8>
   13ac8:	cmp	r0, #0
   13acc:	beq	13b98 <__assert_fail@plt+0x2c68>
   13ad0:	add	r4, r4, #4
   13ad4:	b	13aac <__assert_fail@plt+0x2b7c>
   13ad8:	mov	r2, #4
   13adc:	mov	r1, #10
   13ae0:	mov	r0, r4
   13ae4:	bl	10e94 <memchr@plt>
   13ae8:	cmp	r0, #0
   13aec:	bne	13c9c <__assert_fail@plt+0x2d6c>
   13af0:	add	fp, r4, #4
   13af4:	mov	r5, #4
   13af8:	b	13b5c <__assert_fail@plt+0x2c2c>
   13afc:	cmp	r4, r7
   13b00:	beq	13b34 <__assert_fail@plt+0x2c04>
   13b04:	ldrb	r1, [r4], #1
   13b08:	cmp	r1, #10
   13b0c:	beq	13afc <__assert_fail@plt+0x2bcc>
   13b10:	ldr	r0, [r6]
   13b14:	add	r2, r0, #1
   13b18:	mov	r3, r6
   13b1c:	str	r2, [r3], r0
   13b20:	strb	r1, [r3, #4]
   13b24:	cmp	r2, #4
   13b28:	bne	13afc <__assert_fail@plt+0x2bcc>
   13b2c:	mov	fp, r4
   13b30:	b	13b38 <__assert_fail@plt+0x2c08>
   13b34:	mov	fp, r7
   13b38:	mov	r4, r6
   13b3c:	ldr	r5, [r4], #4
   13b40:	cmp	r5, #0
   13b44:	beq	13c04 <__assert_fail@plt+0x2cd4>
   13b48:	cmp	r5, #3
   13b4c:	bgt	13b5c <__assert_fail@plt+0x2c2c>
   13b50:	ldr	r3, [sp]
   13b54:	cmp	r3, #0
   13b58:	bne	13c40 <__assert_fail@plt+0x2d10>
   13b5c:	add	r3, sp, #12
   13b60:	add	r2, sp, #4
   13b64:	mov	r1, r5
   13b68:	mov	r0, r4
   13b6c:	bl	13628 <__assert_fail@plt+0x26f8>
   13b70:	cmp	r0, #0
   13b74:	beq	13c04 <__assert_fail@plt+0x2cd4>
   13b78:	sub	r5, r7, fp
   13b7c:	cmp	r9, #0
   13b80:	moveq	r3, r8
   13b84:	movne	r3, #0
   13b88:	cmp	r3, #0
   13b8c:	bne	13aa4 <__assert_fail@plt+0x2b74>
   13b90:	ldr	r7, [sp, #12]
   13b94:	mov	r4, fp
   13b98:	cmp	r5, #0
   13b9c:	moveq	r3, r8
   13ba0:	movne	r3, #0
   13ba4:	cmp	r3, #0
   13ba8:	bne	13c00 <__assert_fail@plt+0x2cd0>
   13bac:	cmp	r5, #0
   13bb0:	beq	13c48 <__assert_fail@plt+0x2d18>
   13bb4:	ldrb	r3, [r4]
   13bb8:	cmp	r3, #10
   13bbc:	movne	r3, #0
   13bc0:	andeq	r3, sl, #1
   13bc4:	cmp	r3, #0
   13bc8:	addne	fp, r4, #1
   13bcc:	subne	r5, r5, #1
   13bd0:	bne	13b7c <__assert_fail@plt+0x2c4c>
   13bd4:	ldr	r3, [sp, #12]
   13bd8:	sub	r2, r7, r3
   13bdc:	ldr	r3, [sp, #4]
   13be0:	sub	r3, r3, r2
   13be4:	str	r3, [sp, #4]
   13be8:	str	r7, [sp, #12]
   13bec:	add	r7, r4, r5
   13bf0:	cmp	r6, #0
   13bf4:	moveq	fp, r4
   13bf8:	beq	13b40 <__assert_fail@plt+0x2c10>
   13bfc:	b	13c6c <__assert_fail@plt+0x2d3c>
   13c00:	mov	r5, #0
   13c04:	ldr	r3, [sp, #56]	; 0x38
   13c08:	ldr	r3, [r3]
   13c0c:	ldr	r2, [sp, #12]
   13c10:	sub	r3, r3, r2
   13c14:	ldr	r2, [sp, #56]	; 0x38
   13c18:	str	r3, [r2]
   13c1c:	clz	r0, r5
   13c20:	lsr	r0, r0, #5
   13c24:	add	sp, sp, #20
   13c28:	ldrd	r4, [sp]
   13c2c:	ldrd	r6, [sp, #8]
   13c30:	ldrd	r8, [sp, #16]
   13c34:	ldrd	sl, [sp, #24]
   13c38:	add	sp, sp, #32
   13c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c40:	mov	r5, #0
   13c44:	b	13c04 <__assert_fail@plt+0x2cd4>
   13c48:	ldr	r3, [sp, #12]
   13c4c:	sub	r2, r7, r3
   13c50:	ldr	r3, [sp, #4]
   13c54:	sub	r3, r3, r2
   13c58:	str	r3, [sp, #4]
   13c5c:	str	r7, [sp, #12]
   13c60:	add	r7, r4, r5
   13c64:	cmp	r6, #0
   13c68:	beq	13c04 <__assert_fail@plt+0x2cd4>
   13c6c:	ldr	r3, [r6]
   13c70:	cmp	r3, #4
   13c74:	moveq	r3, #0
   13c78:	streq	r3, [r6]
   13c7c:	ldr	r3, [r6]
   13c80:	cmp	r5, #3
   13c84:	movle	r5, #0
   13c88:	movgt	r5, #1
   13c8c:	cmp	r3, #0
   13c90:	movne	r5, #0
   13c94:	cmp	r5, #0
   13c98:	bne	13ad8 <__assert_fail@plt+0x2ba8>
   13c9c:	cmp	r7, r4
   13ca0:	movls	fp, r4
   13ca4:	bhi	13b04 <__assert_fail@plt+0x2bd4>
   13ca8:	b	13b38 <__assert_fail@plt+0x2c08>
   13cac:	strd	r4, [sp, #-20]!	; 0xffffffec
   13cb0:	strd	r6, [sp, #8]
   13cb4:	str	lr, [sp, #16]
   13cb8:	sub	sp, sp, #20
   13cbc:	mov	r6, r0
   13cc0:	mov	r7, r1
   13cc4:	mov	r4, r2
   13cc8:	mov	r5, r3
   13ccc:	asr	r0, r2, #2
   13cd0:	add	r0, r0, #1
   13cd4:	add	r0, r0, r0, lsl #1
   13cd8:	str	r0, [sp, #12]
   13cdc:	bl	176f4 <__assert_fail@plt+0x67c4>
   13ce0:	str	r0, [r5]
   13ce4:	cmp	r0, #0
   13ce8:	moveq	r4, #1
   13cec:	beq	13d2c <__assert_fail@plt+0x2dfc>
   13cf0:	add	r3, sp, #12
   13cf4:	str	r3, [sp]
   13cf8:	mov	r3, r0
   13cfc:	mov	r2, r4
   13d00:	mov	r1, r7
   13d04:	mov	r0, r6
   13d08:	bl	13a3c <__assert_fail@plt+0x2b0c>
   13d0c:	subs	r4, r0, #0
   13d10:	beq	13d44 <__assert_fail@plt+0x2e14>
   13d14:	ldr	r3, [sp, #40]	; 0x28
   13d18:	cmp	r3, #0
   13d1c:	beq	13d2c <__assert_fail@plt+0x2dfc>
   13d20:	ldr	r3, [sp, #12]
   13d24:	ldr	r2, [sp, #40]	; 0x28
   13d28:	str	r3, [r2]
   13d2c:	mov	r0, r4
   13d30:	add	sp, sp, #20
   13d34:	ldrd	r4, [sp]
   13d38:	ldrd	r6, [sp, #8]
   13d3c:	add	sp, sp, #16
   13d40:	pop	{pc}		; (ldr pc, [sp], #4)
   13d44:	ldr	r0, [r5]
   13d48:	bl	14024 <__assert_fail@plt+0x30f4>
   13d4c:	mov	r3, #0
   13d50:	str	r3, [r5]
   13d54:	b	13d2c <__assert_fail@plt+0x2dfc>
   13d58:	movw	r3, #41332	; 0xa174
   13d5c:	movt	r3, #2
   13d60:	str	r0, [r3]
   13d64:	bx	lr
   13d68:	movw	r3, #41332	; 0xa174
   13d6c:	movt	r3, #2
   13d70:	strb	r0, [r3, #4]
   13d74:	bx	lr
   13d78:	strd	r4, [sp, #-16]!
   13d7c:	str	r6, [sp, #8]
   13d80:	str	lr, [sp, #12]
   13d84:	sub	sp, sp, #8
   13d88:	movw	r3, #41300	; 0xa154
   13d8c:	movt	r3, #2
   13d90:	ldr	r0, [r3]
   13d94:	bl	1778c <__assert_fail@plt+0x685c>
   13d98:	cmp	r0, #0
   13d9c:	beq	13dc4 <__assert_fail@plt+0x2e94>
   13da0:	movw	r3, #41332	; 0xa174
   13da4:	movt	r3, #2
   13da8:	ldrb	r3, [r3, #4]
   13dac:	cmp	r3, #0
   13db0:	beq	13df0 <__assert_fail@plt+0x2ec0>
   13db4:	bl	10e4c <__errno_location@plt>
   13db8:	ldr	r3, [r0]
   13dbc:	cmp	r3, #32
   13dc0:	bne	13df0 <__assert_fail@plt+0x2ec0>
   13dc4:	movw	r3, #41288	; 0xa148
   13dc8:	movt	r3, #2
   13dcc:	ldr	r0, [r3]
   13dd0:	bl	1778c <__assert_fail@plt+0x685c>
   13dd4:	cmp	r0, #0
   13dd8:	bne	13e78 <__assert_fail@plt+0x2f48>
   13ddc:	add	sp, sp, #8
   13de0:	ldrd	r4, [sp]
   13de4:	ldr	r6, [sp, #8]
   13de8:	add	sp, sp, #12
   13dec:	pop	{pc}		; (ldr pc, [sp], #4)
   13df0:	mov	r2, #5
   13df4:	movw	r1, #34616	; 0x8738
   13df8:	movt	r1, #1
   13dfc:	mov	r0, #0
   13e00:	bl	10d68 <dcgettext@plt>
   13e04:	mov	r4, r0
   13e08:	movw	r3, #41332	; 0xa174
   13e0c:	movt	r3, #2
   13e10:	ldr	r5, [r3]
   13e14:	cmp	r5, #0
   13e18:	beq	13e58 <__assert_fail@plt+0x2f28>
   13e1c:	bl	10e4c <__errno_location@plt>
   13e20:	ldr	r6, [r0]
   13e24:	mov	r0, r5
   13e28:	bl	1623c <__assert_fail@plt+0x530c>
   13e2c:	str	r4, [sp]
   13e30:	mov	r3, r0
   13e34:	movw	r2, #34508	; 0x86cc
   13e38:	movt	r2, #1
   13e3c:	mov	r1, r6
   13e40:	mov	r0, #0
   13e44:	bl	10dd4 <error@plt>
   13e48:	movw	r3, #41200	; 0xa0f0
   13e4c:	movt	r3, #2
   13e50:	ldr	r0, [r3]
   13e54:	bl	10d20 <_exit@plt>
   13e58:	bl	10e4c <__errno_location@plt>
   13e5c:	mov	r3, r4
   13e60:	movw	r2, #34512	; 0x86d0
   13e64:	movt	r2, #1
   13e68:	ldr	r1, [r0]
   13e6c:	mov	r0, #0
   13e70:	bl	10dd4 <error@plt>
   13e74:	b	13e48 <__assert_fail@plt+0x2f18>
   13e78:	movw	r3, #41200	; 0xa0f0
   13e7c:	movt	r3, #2
   13e80:	ldr	r0, [r3]
   13e84:	bl	10d20 <_exit@plt>
   13e88:	strd	r4, [sp, #-12]!
   13e8c:	str	lr, [sp, #8]
   13e90:	sub	sp, sp, #20
   13e94:	ldr	r1, [sp, #40]	; 0x28
   13e98:	str	r1, [sp, #8]
   13e9c:	ldrd	r4, [sp, #32]
   13ea0:	strd	r4, [sp]
   13ea4:	bl	10cf0 <posix_fadvise64@plt>
   13ea8:	add	sp, sp, #20
   13eac:	ldrd	r4, [sp]
   13eb0:	add	sp, sp, #8
   13eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   13eb8:	cmp	r0, #0
   13ebc:	bxeq	lr
   13ec0:	str	r4, [sp, #-8]!
   13ec4:	str	lr, [sp, #4]
   13ec8:	sub	sp, sp, #16
   13ecc:	mov	r4, r1
   13ed0:	bl	10e7c <fileno@plt>
   13ed4:	str	r4, [sp, #8]
   13ed8:	mov	r2, #0
   13edc:	mov	r3, #0
   13ee0:	strd	r2, [sp]
   13ee4:	bl	10cf0 <posix_fadvise64@plt>
   13ee8:	add	sp, sp, #16
   13eec:	ldr	r4, [sp]
   13ef0:	add	sp, sp, #4
   13ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ef8:	strd	r4, [sp, #-16]!
   13efc:	str	r6, [sp, #8]
   13f00:	str	lr, [sp, #12]
   13f04:	sub	sp, sp, #8
   13f08:	mov	r4, r0
   13f0c:	bl	10e7c <fileno@plt>
   13f10:	cmp	r0, #0
   13f14:	blt	13f8c <__assert_fail@plt+0x305c>
   13f18:	mov	r0, r4
   13f1c:	bl	10df8 <__freading@plt>
   13f20:	cmp	r0, #0
   13f24:	beq	13f58 <__assert_fail@plt+0x3028>
   13f28:	mov	r0, r4
   13f2c:	bl	10e7c <fileno@plt>
   13f30:	mov	r3, #1
   13f34:	str	r3, [sp]
   13f38:	mov	r2, #0
   13f3c:	mov	r3, #0
   13f40:	bl	10da4 <lseek64@plt>
   13f44:	mvn	r2, #0
   13f48:	mvn	r3, #0
   13f4c:	cmp	r1, r3
   13f50:	cmpeq	r0, r2
   13f54:	beq	13f98 <__assert_fail@plt+0x3068>
   13f58:	mov	r0, r4
   13f5c:	bl	13fb4 <__assert_fail@plt+0x3084>
   13f60:	cmp	r0, #0
   13f64:	beq	13f98 <__assert_fail@plt+0x3068>
   13f68:	bl	10e4c <__errno_location@plt>
   13f6c:	mov	r5, r0
   13f70:	ldr	r6, [r0]
   13f74:	mov	r0, r4
   13f78:	bl	10ea0 <fclose@plt>
   13f7c:	cmp	r6, #0
   13f80:	strne	r6, [r5]
   13f84:	mvnne	r0, #0
   13f88:	b	13fa0 <__assert_fail@plt+0x3070>
   13f8c:	mov	r0, r4
   13f90:	bl	10ea0 <fclose@plt>
   13f94:	b	13fa0 <__assert_fail@plt+0x3070>
   13f98:	mov	r0, r4
   13f9c:	bl	10ea0 <fclose@plt>
   13fa0:	add	sp, sp, #8
   13fa4:	ldrd	r4, [sp]
   13fa8:	ldr	r6, [sp, #8]
   13fac:	add	sp, sp, #12
   13fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   13fb4:	str	r4, [sp, #-8]!
   13fb8:	str	lr, [sp, #4]
   13fbc:	sub	sp, sp, #8
   13fc0:	subs	r4, r0, #0
   13fc4:	beq	13fd8 <__assert_fail@plt+0x30a8>
   13fc8:	mov	r0, r4
   13fcc:	bl	10df8 <__freading@plt>
   13fd0:	cmp	r0, #0
   13fd4:	bne	13ff0 <__assert_fail@plt+0x30c0>
   13fd8:	mov	r0, r4
   13fdc:	bl	10cfc <fflush@plt>
   13fe0:	add	sp, sp, #8
   13fe4:	ldr	r4, [sp]
   13fe8:	add	sp, sp, #4
   13fec:	pop	{pc}		; (ldr pc, [sp], #4)
   13ff0:	ldr	r3, [r4]
   13ff4:	tst	r3, #256	; 0x100
   13ff8:	bne	14008 <__assert_fail@plt+0x30d8>
   13ffc:	mov	r0, r4
   14000:	bl	10cfc <fflush@plt>
   14004:	b	13fe0 <__assert_fail@plt+0x30b0>
   14008:	mov	r3, #1
   1400c:	str	r3, [sp]
   14010:	mov	r2, #0
   14014:	mov	r3, #0
   14018:	mov	r0, r4
   1401c:	bl	14084 <__assert_fail@plt+0x3154>
   14020:	b	13ffc <__assert_fail@plt+0x30cc>
   14024:	strd	r4, [sp, #-12]!
   14028:	str	lr, [sp, #8]
   1402c:	sub	sp, sp, #12
   14030:	mov	r5, r0
   14034:	bl	10e4c <__errno_location@plt>
   14038:	mov	r4, r0
   1403c:	ldr	r3, [r0]
   14040:	str	r3, [sp]
   14044:	str	r3, [sp, #4]
   14048:	mov	r3, #0
   1404c:	str	r3, [r0]
   14050:	mov	r0, r5
   14054:	bl	10d14 <free@plt>
   14058:	ldr	r3, [r4]
   1405c:	clz	r3, r3
   14060:	lsr	r3, r3, #5
   14064:	add	r2, sp, #8
   14068:	add	r3, r2, r3, lsl #2
   1406c:	ldr	r3, [r3, #-8]
   14070:	str	r3, [r4]
   14074:	add	sp, sp, #12
   14078:	ldrd	r4, [sp]
   1407c:	add	sp, sp, #8
   14080:	pop	{pc}		; (ldr pc, [sp], #4)
   14084:	str	r4, [sp, #-16]!
   14088:	strd	r6, [sp, #4]
   1408c:	str	lr, [sp, #12]
   14090:	sub	sp, sp, #8
   14094:	mov	r4, r0
   14098:	mov	r6, r2
   1409c:	mov	r7, r3
   140a0:	ldr	r2, [r0, #8]
   140a4:	ldr	r3, [r0, #4]
   140a8:	cmp	r2, r3
   140ac:	beq	140dc <__assert_fail@plt+0x31ac>
   140b0:	ldr	r3, [sp, #24]
   140b4:	str	r3, [sp]
   140b8:	mov	r2, r6
   140bc:	mov	r3, r7
   140c0:	mov	r0, r4
   140c4:	bl	10eac <fseeko64@plt>
   140c8:	add	sp, sp, #8
   140cc:	ldr	r4, [sp]
   140d0:	ldrd	r6, [sp, #4]
   140d4:	add	sp, sp, #12
   140d8:	pop	{pc}		; (ldr pc, [sp], #4)
   140dc:	ldr	r2, [r0, #20]
   140e0:	ldr	r3, [r0, #16]
   140e4:	cmp	r2, r3
   140e8:	bne	140b0 <__assert_fail@plt+0x3180>
   140ec:	ldr	r3, [r0, #36]	; 0x24
   140f0:	cmp	r3, #0
   140f4:	bne	140b0 <__assert_fail@plt+0x3180>
   140f8:	bl	10e7c <fileno@plt>
   140fc:	ldr	r3, [sp, #24]
   14100:	str	r3, [sp]
   14104:	mov	r2, r6
   14108:	mov	r3, r7
   1410c:	bl	10da4 <lseek64@plt>
   14110:	mvn	r2, #0
   14114:	mvn	r3, #0
   14118:	cmp	r1, r3
   1411c:	cmpeq	r0, r2
   14120:	beq	1413c <__assert_fail@plt+0x320c>
   14124:	ldr	r3, [r4]
   14128:	bic	r3, r3, #16
   1412c:	str	r3, [r4]
   14130:	strd	r0, [r4, #80]	; 0x50
   14134:	mov	r0, #0
   14138:	b	140c8 <__assert_fail@plt+0x3198>
   1413c:	mvn	r0, #0
   14140:	b	140c8 <__assert_fail@plt+0x3198>
   14144:	strd	r4, [sp, #-16]!
   14148:	str	r6, [sp, #8]
   1414c:	str	lr, [sp, #12]
   14150:	subs	r4, r0, #0
   14154:	beq	141f0 <__assert_fail@plt+0x32c0>
   14158:	mov	r1, #47	; 0x2f
   1415c:	mov	r0, r4
   14160:	bl	10ed0 <strrchr@plt>
   14164:	subs	r5, r0, #0
   14168:	beq	141c8 <__assert_fail@plt+0x3298>
   1416c:	add	r6, r5, #1
   14170:	sub	r3, r6, r4
   14174:	cmp	r3, #6
   14178:	ble	141c8 <__assert_fail@plt+0x3298>
   1417c:	mov	r2, #7
   14180:	movw	r1, #35556	; 0x8ae4
   14184:	movt	r1, #1
   14188:	sub	r0, r5, #6
   1418c:	bl	10f18 <strncmp@plt>
   14190:	cmp	r0, #0
   14194:	bne	141c8 <__assert_fail@plt+0x3298>
   14198:	mov	r2, #3
   1419c:	movw	r1, #35564	; 0x8aec
   141a0:	movt	r1, #1
   141a4:	mov	r0, r6
   141a8:	bl	10f18 <strncmp@plt>
   141ac:	cmp	r0, #0
   141b0:	movne	r4, r6
   141b4:	bne	141c8 <__assert_fail@plt+0x3298>
   141b8:	add	r4, r5, #4
   141bc:	movw	r3, #41272	; 0xa138
   141c0:	movt	r3, #2
   141c4:	str	r4, [r3]
   141c8:	movw	r3, #41340	; 0xa17c
   141cc:	movt	r3, #2
   141d0:	str	r4, [r3]
   141d4:	movw	r3, #41276	; 0xa13c
   141d8:	movt	r3, #2
   141dc:	str	r4, [r3]
   141e0:	ldrd	r4, [sp]
   141e4:	ldr	r6, [sp, #8]
   141e8:	add	sp, sp, #12
   141ec:	pop	{pc}		; (ldr pc, [sp], #4)
   141f0:	movw	r3, #41288	; 0xa148
   141f4:	movt	r3, #2
   141f8:	ldr	r3, [r3]
   141fc:	mov	r2, #55	; 0x37
   14200:	mov	r1, #1
   14204:	movw	r0, #35500	; 0x8aac
   14208:	movt	r0, #1
   1420c:	bl	10d98 <fwrite@plt>
   14210:	bl	10f24 <abort@plt>
   14214:	mov	r2, #0
   14218:	mov	r3, #0
   1421c:	strd	r2, [r0]
   14220:	strd	r2, [r0, #8]
   14224:	strd	r2, [r0, #16]
   14228:	strd	r2, [r0, #24]
   1422c:	strd	r2, [r0, #32]
   14230:	strd	r2, [r0, #40]	; 0x28
   14234:	cmp	r1, #10
   14238:	beq	14244 <__assert_fail@plt+0x3314>
   1423c:	str	r1, [r0]
   14240:	bx	lr
   14244:	str	r4, [sp, #-8]!
   14248:	str	lr, [sp, #4]
   1424c:	bl	10f24 <abort@plt>
   14250:	strd	r4, [sp, #-16]!
   14254:	str	r6, [sp, #8]
   14258:	str	lr, [sp, #12]
   1425c:	mov	r5, r0
   14260:	mov	r6, r1
   14264:	mov	r2, #5
   14268:	mov	r1, r0
   1426c:	mov	r0, #0
   14270:	bl	10d68 <dcgettext@plt>
   14274:	mov	r4, r0
   14278:	cmp	r5, r0
   1427c:	beq	14294 <__assert_fail@plt+0x3364>
   14280:	mov	r0, r4
   14284:	ldrd	r4, [sp]
   14288:	ldr	r6, [sp, #8]
   1428c:	add	sp, sp, #12
   14290:	pop	{pc}		; (ldr pc, [sp], #4)
   14294:	bl	17818 <__assert_fail@plt+0x68e8>
   14298:	ldrb	r3, [r0]
   1429c:	bic	r3, r3, #32
   142a0:	cmp	r3, #85	; 0x55
   142a4:	bne	14328 <__assert_fail@plt+0x33f8>
   142a8:	ldrb	r3, [r0, #1]
   142ac:	bic	r3, r3, #32
   142b0:	cmp	r3, #84	; 0x54
   142b4:	bne	142ec <__assert_fail@plt+0x33bc>
   142b8:	ldrb	r3, [r0, #2]
   142bc:	bic	r3, r3, #32
   142c0:	cmp	r3, #70	; 0x46
   142c4:	bne	142ec <__assert_fail@plt+0x33bc>
   142c8:	ldrb	r3, [r0, #3]
   142cc:	cmp	r3, #45	; 0x2d
   142d0:	bne	142ec <__assert_fail@plt+0x33bc>
   142d4:	ldrb	r3, [r0, #4]
   142d8:	cmp	r3, #56	; 0x38
   142dc:	bne	142ec <__assert_fail@plt+0x33bc>
   142e0:	ldrb	r3, [r0, #5]
   142e4:	cmp	r3, #0
   142e8:	beq	14308 <__assert_fail@plt+0x33d8>
   142ec:	movw	r4, #35652	; 0x8b44
   142f0:	movt	r4, #1
   142f4:	movw	r3, #35672	; 0x8b58
   142f8:	movt	r3, #1
   142fc:	cmp	r6, #9
   14300:	movne	r4, r3
   14304:	b	14280 <__assert_fail@plt+0x3350>
   14308:	ldrb	r2, [r4]
   1430c:	movw	r4, #35668	; 0x8b54
   14310:	movt	r4, #1
   14314:	movw	r3, #35656	; 0x8b48
   14318:	movt	r3, #1
   1431c:	cmp	r2, #96	; 0x60
   14320:	movne	r4, r3
   14324:	b	14280 <__assert_fail@plt+0x3350>
   14328:	cmp	r3, #71	; 0x47
   1432c:	bne	142ec <__assert_fail@plt+0x33bc>
   14330:	ldrb	r3, [r0, #1]
   14334:	bic	r3, r3, #32
   14338:	cmp	r3, #66	; 0x42
   1433c:	bne	142ec <__assert_fail@plt+0x33bc>
   14340:	ldrb	r3, [r0, #2]
   14344:	cmp	r3, #49	; 0x31
   14348:	bne	142ec <__assert_fail@plt+0x33bc>
   1434c:	ldrb	r3, [r0, #3]
   14350:	cmp	r3, #56	; 0x38
   14354:	bne	142ec <__assert_fail@plt+0x33bc>
   14358:	ldrb	r3, [r0, #4]
   1435c:	cmp	r3, #48	; 0x30
   14360:	bne	142ec <__assert_fail@plt+0x33bc>
   14364:	ldrb	r3, [r0, #5]
   14368:	cmp	r3, #51	; 0x33
   1436c:	bne	142ec <__assert_fail@plt+0x33bc>
   14370:	ldrb	r3, [r0, #6]
   14374:	cmp	r3, #48	; 0x30
   14378:	bne	142ec <__assert_fail@plt+0x33bc>
   1437c:	ldrb	r3, [r0, #7]
   14380:	cmp	r3, #0
   14384:	bne	142ec <__assert_fail@plt+0x33bc>
   14388:	ldrb	r2, [r4]
   1438c:	movw	r4, #35664	; 0x8b50
   14390:	movt	r4, #1
   14394:	movw	r3, #35660	; 0x8b4c
   14398:	movt	r3, #1
   1439c:	cmp	r2, #96	; 0x60
   143a0:	movne	r4, r3
   143a4:	b	14280 <__assert_fail@plt+0x3350>
   143a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   143ac:	strd	r6, [sp, #8]
   143b0:	strd	r8, [sp, #16]
   143b4:	strd	sl, [sp, #24]
   143b8:	str	lr, [sp, #32]
   143bc:	sub	sp, sp, #116	; 0x74
   143c0:	str	r0, [sp, #64]	; 0x40
   143c4:	mov	r8, r1
   143c8:	str	r2, [sp, #48]	; 0x30
   143cc:	str	r3, [sp, #24]
   143d0:	ldr	r7, [sp, #152]	; 0x98
   143d4:	bl	10db0 <__ctype_get_mb_cur_max@plt>
   143d8:	str	r0, [sp, #76]	; 0x4c
   143dc:	ldr	r3, [sp, #156]	; 0x9c
   143e0:	ubfx	r3, r3, #1, #1
   143e4:	str	r3, [sp, #32]
   143e8:	mov	r3, #1
   143ec:	str	r3, [sp, #40]	; 0x28
   143f0:	mov	r3, #0
   143f4:	str	r3, [sp, #68]	; 0x44
   143f8:	str	r3, [sp, #36]	; 0x24
   143fc:	str	r3, [sp, #28]
   14400:	str	r3, [sp, #52]	; 0x34
   14404:	str	r3, [sp, #60]	; 0x3c
   14408:	str	r3, [sp, #72]	; 0x48
   1440c:	movw	r3, #35676	; 0x8b5c
   14410:	movt	r3, #1
   14414:	str	r3, [sp, #80]	; 0x50
   14418:	mov	r9, r8
   1441c:	mov	sl, r7
   14420:	cmp	sl, #10
   14424:	ldrls	pc, [pc, sl, lsl #2]
   14428:	b	145ec <__assert_fail@plt+0x36bc>
   1442c:	andeq	r4, r1, ip, lsl #9
   14430:	andeq	r4, r1, r0, ror #8
   14434:	andeq	r4, r1, r4, asr #11
   14438:	andeq	r4, r1, r8, asr r4
   1443c:	andeq	r4, r1, r8, ror r5
   14440:	muleq	r1, ip, r4
   14444:	andeq	r5, r1, r8, ror #16
   14448:	strdeq	r4, [r1], -r0
   1444c:	ldrdeq	r4, [r1], -r8
   14450:	ldrdeq	r4, [r1], -r8
   14454:	ldrdeq	r4, [r1], -r8
   14458:	mov	r3, #1
   1445c:	str	r3, [sp, #28]
   14460:	mov	r3, #1
   14464:	str	r3, [sp, #32]
   14468:	str	r3, [sp, #52]	; 0x34
   1446c:	movw	r3, #35672	; 0x8b58
   14470:	movt	r3, #1
   14474:	str	r3, [sp, #60]	; 0x3c
   14478:	mov	fp, #0
   1447c:	mov	sl, #2
   14480:	mov	r6, #0
   14484:	ldr	r8, [sp, #64]	; 0x40
   14488:	b	14d00 <__assert_fail@plt+0x3dd0>
   1448c:	mov	fp, sl
   14490:	mov	r3, #0
   14494:	str	r3, [sp, #32]
   14498:	b	14480 <__assert_fail@plt+0x3550>
   1449c:	ldr	r3, [sp, #32]
   144a0:	cmp	r3, #0
   144a4:	bne	14604 <__assert_fail@plt+0x36d4>
   144a8:	cmp	r9, #0
   144ac:	beq	14628 <__assert_fail@plt+0x36f8>
   144b0:	mov	r3, #34	; 0x22
   144b4:	ldr	r2, [sp, #64]	; 0x40
   144b8:	strb	r3, [r2]
   144bc:	mov	fp, #1
   144c0:	str	fp, [sp, #28]
   144c4:	str	fp, [sp, #52]	; 0x34
   144c8:	movw	r3, #35652	; 0x8b44
   144cc:	movt	r3, #1
   144d0:	str	r3, [sp, #60]	; 0x3c
   144d4:	b	14480 <__assert_fail@plt+0x3550>
   144d8:	cmp	sl, #10
   144dc:	bne	14510 <__assert_fail@plt+0x35e0>
   144e0:	ldr	r3, [sp, #32]
   144e4:	cmp	r3, #0
   144e8:	movne	fp, #0
   144ec:	beq	14538 <__assert_fail@plt+0x3608>
   144f0:	ldr	r0, [sp, #168]	; 0xa8
   144f4:	bl	10e34 <strlen@plt>
   144f8:	str	r0, [sp, #52]	; 0x34
   144fc:	ldr	r3, [sp, #168]	; 0xa8
   14500:	str	r3, [sp, #60]	; 0x3c
   14504:	mov	r3, #1
   14508:	str	r3, [sp, #28]
   1450c:	b	14480 <__assert_fail@plt+0x3550>
   14510:	mov	r1, sl
   14514:	ldr	r0, [sp, #80]	; 0x50
   14518:	bl	14250 <__assert_fail@plt+0x3320>
   1451c:	str	r0, [sp, #164]	; 0xa4
   14520:	mov	r1, sl
   14524:	movw	r0, #35672	; 0x8b58
   14528:	movt	r0, #1
   1452c:	bl	14250 <__assert_fail@plt+0x3320>
   14530:	str	r0, [sp, #168]	; 0xa8
   14534:	b	144e0 <__assert_fail@plt+0x35b0>
   14538:	ldr	r3, [sp, #164]	; 0xa4
   1453c:	ldrb	r3, [r3]
   14540:	cmp	r3, #0
   14544:	beq	14570 <__assert_fail@plt+0x3640>
   14548:	ldr	r2, [sp, #164]	; 0xa4
   1454c:	mov	fp, #0
   14550:	ldr	r1, [sp, #64]	; 0x40
   14554:	cmp	r9, fp
   14558:	strbhi	r3, [r1, fp]
   1455c:	add	fp, fp, #1
   14560:	ldrb	r3, [r2, #1]!
   14564:	cmp	r3, #0
   14568:	bne	14554 <__assert_fail@plt+0x3624>
   1456c:	b	144f0 <__assert_fail@plt+0x35c0>
   14570:	mov	fp, #0
   14574:	b	144f0 <__assert_fail@plt+0x35c0>
   14578:	ldr	r3, [sp, #32]
   1457c:	cmp	r3, #0
   14580:	bne	14460 <__assert_fail@plt+0x3530>
   14584:	mov	r3, #1
   14588:	str	r3, [sp, #28]
   1458c:	cmp	r9, #0
   14590:	beq	14644 <__assert_fail@plt+0x3714>
   14594:	mov	r3, #39	; 0x27
   14598:	ldr	r2, [sp, #64]	; 0x40
   1459c:	strb	r3, [r2]
   145a0:	mov	r3, #0
   145a4:	str	r3, [sp, #32]
   145a8:	mov	fp, #1
   145ac:	str	fp, [sp, #52]	; 0x34
   145b0:	movw	r3, #35672	; 0x8b58
   145b4:	movt	r3, #1
   145b8:	str	r3, [sp, #60]	; 0x3c
   145bc:	mov	sl, #2
   145c0:	b	14480 <__assert_fail@plt+0x3550>
   145c4:	ldr	r3, [sp, #32]
   145c8:	cmp	r3, #0
   145cc:	beq	1458c <__assert_fail@plt+0x365c>
   145d0:	mov	r3, #1
   145d4:	str	r3, [sp, #52]	; 0x34
   145d8:	movw	r3, #35672	; 0x8b58
   145dc:	movt	r3, #1
   145e0:	str	r3, [sp, #60]	; 0x3c
   145e4:	mov	fp, #0
   145e8:	b	14480 <__assert_fail@plt+0x3550>
   145ec:	bl	10f24 <abort@plt>
   145f0:	mov	fp, #0
   145f4:	str	fp, [sp, #32]
   145f8:	mov	r3, #1
   145fc:	str	r3, [sp, #28]
   14600:	b	14480 <__assert_fail@plt+0x3550>
   14604:	ldr	r3, [sp, #32]
   14608:	str	r3, [sp, #28]
   1460c:	mov	r3, #1
   14610:	str	r3, [sp, #52]	; 0x34
   14614:	movw	r3, #35652	; 0x8b44
   14618:	movt	r3, #1
   1461c:	str	r3, [sp, #60]	; 0x3c
   14620:	mov	fp, #0
   14624:	b	14480 <__assert_fail@plt+0x3550>
   14628:	mov	fp, #1
   1462c:	str	fp, [sp, #28]
   14630:	str	fp, [sp, #52]	; 0x34
   14634:	movw	r3, #35652	; 0x8b44
   14638:	movt	r3, #1
   1463c:	str	r3, [sp, #60]	; 0x3c
   14640:	b	14480 <__assert_fail@plt+0x3550>
   14644:	mov	r3, #0
   14648:	str	r3, [sp, #32]
   1464c:	mov	fp, #1
   14650:	str	fp, [sp, #52]	; 0x34
   14654:	movw	r3, #35672	; 0x8b58
   14658:	movt	r3, #1
   1465c:	str	r3, [sp, #60]	; 0x3c
   14660:	mov	sl, #2
   14664:	b	14480 <__assert_fail@plt+0x3550>
   14668:	mov	r3, r2
   1466c:	add	r4, r6, r2
   14670:	ldr	r2, [sp, #24]
   14674:	cmp	r3, #1
   14678:	movls	r3, #0
   1467c:	movhi	r3, #1
   14680:	cmn	r2, #1
   14684:	movne	r3, #0
   14688:	cmp	r3, #0
   1468c:	beq	1469c <__assert_fail@plt+0x376c>
   14690:	ldr	r0, [sp, #48]	; 0x30
   14694:	bl	10e34 <strlen@plt>
   14698:	str	r0, [sp, #24]
   1469c:	ldr	r3, [sp, #24]
   146a0:	cmp	r4, r3
   146a4:	bhi	15890 <__assert_fail@plt+0x4960>
   146a8:	ldr	r3, [sp, #48]	; 0x30
   146ac:	add	r4, r3, r6
   146b0:	ldr	r2, [sp, #52]	; 0x34
   146b4:	ldr	r1, [sp, #60]	; 0x3c
   146b8:	mov	r0, r4
   146bc:	bl	10d50 <memcmp@plt>
   146c0:	cmp	r0, #0
   146c4:	bne	15890 <__assert_fail@plt+0x4960>
   146c8:	ldr	r3, [sp, #32]
   146cc:	cmp	r3, #0
   146d0:	bne	148e0 <__assert_fail@plt+0x39b0>
   146d4:	ldrb	r4, [r4]
   146d8:	cmp	r4, #126	; 0x7e
   146dc:	ldrls	pc, [pc, r4, lsl #2]
   146e0:	b	15194 <__assert_fail@plt+0x4264>
   146e4:	andeq	r4, r1, r4, lsr #18
   146e8:	muleq	r1, r4, r1
   146ec:	muleq	r1, r4, r1
   146f0:	muleq	r1, r4, r1
   146f4:	muleq	r1, r4, r1
   146f8:	muleq	r1, r4, r1
   146fc:	muleq	r1, r4, r1
   14700:	andeq	r5, r1, ip, lsr r0
   14704:	andeq	r4, r1, r0, asr #23
   14708:	andeq	r4, r1, r4, ror #30
   1470c:	andeq	r5, r1, r0, lsl r0
   14710:	andeq	r4, r1, r8, ror pc
   14714:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14718:	andeq	r4, r1, r8, ror #23
   1471c:	muleq	r1, r4, r1
   14720:	muleq	r1, r4, r1
   14724:	muleq	r1, r4, r1
   14728:	muleq	r1, r4, r1
   1472c:	muleq	r1, r4, r1
   14730:	muleq	r1, r4, r1
   14734:	muleq	r1, r4, r1
   14738:	muleq	r1, r4, r1
   1473c:	muleq	r1, r4, r1
   14740:	muleq	r1, r4, r1
   14744:	muleq	r1, r4, r1
   14748:	muleq	r1, r4, r1
   1474c:	muleq	r1, r4, r1
   14750:	muleq	r1, r4, r1
   14754:	muleq	r1, r4, r1
   14758:	muleq	r1, r4, r1
   1475c:	muleq	r1, r4, r1
   14760:	muleq	r1, r4, r1
   14764:	strheq	r5, [r1], -r0
   14768:	ldrdeq	r5, [r1], -r4
   1476c:	ldrdeq	r5, [r1], -r4
   14770:	andeq	r5, r1, ip, rrx
   14774:	ldrdeq	r5, [r1], -r4
   14778:	strdeq	r5, [r1], -r4
   1477c:	ldrdeq	r5, [r1], -r4
   14780:	strdeq	r5, [r1], -r4
   14784:	ldrdeq	r5, [r1], -r4
   14788:	ldrdeq	r5, [r1], -r4
   1478c:	ldrdeq	r5, [r1], -r4
   14790:	strdeq	r5, [r1], -r4
   14794:	strdeq	r5, [r1], -r4
   14798:	strdeq	r5, [r1], -r4
   1479c:	strdeq	r5, [r1], -r4
   147a0:	strdeq	r5, [r1], -r4
   147a4:	strdeq	r5, [r1], -r4
   147a8:	strdeq	r5, [r1], -r4
   147ac:	strdeq	r5, [r1], -r4
   147b0:	strdeq	r5, [r1], -r4
   147b4:	strdeq	r5, [r1], -r4
   147b8:	strdeq	r5, [r1], -r4
   147bc:	strdeq	r5, [r1], -r4
   147c0:	strdeq	r5, [r1], -r4
   147c4:	strdeq	r5, [r1], -r4
   147c8:	strdeq	r5, [r1], -r4
   147cc:	strdeq	r5, [r1], -r4
   147d0:	ldrdeq	r5, [r1], -r4
   147d4:	ldrdeq	r5, [r1], -r4
   147d8:	ldrdeq	r5, [r1], -r4
   147dc:	ldrdeq	r5, [r1], -r4
   147e0:	andeq	r4, r1, r4, asr sl
   147e4:	muleq	r1, r4, r1
   147e8:	strdeq	r5, [r1], -r4
   147ec:	strdeq	r5, [r1], -r4
   147f0:	strdeq	r5, [r1], -r4
   147f4:	strdeq	r5, [r1], -r4
   147f8:	strdeq	r5, [r1], -r4
   147fc:	strdeq	r5, [r1], -r4
   14800:	strdeq	r5, [r1], -r4
   14804:	strdeq	r5, [r1], -r4
   14808:	strdeq	r5, [r1], -r4
   1480c:	strdeq	r5, [r1], -r4
   14810:	strdeq	r5, [r1], -r4
   14814:	strdeq	r5, [r1], -r4
   14818:	strdeq	r5, [r1], -r4
   1481c:	strdeq	r5, [r1], -r4
   14820:	strdeq	r5, [r1], -r4
   14824:	strdeq	r5, [r1], -r4
   14828:	strdeq	r5, [r1], -r4
   1482c:	strdeq	r5, [r1], -r4
   14830:	strdeq	r5, [r1], -r4
   14834:	strdeq	r5, [r1], -r4
   14838:	strdeq	r5, [r1], -r4
   1483c:	strdeq	r5, [r1], -r4
   14840:	strdeq	r5, [r1], -r4
   14844:	strdeq	r5, [r1], -r4
   14848:	strdeq	r5, [r1], -r4
   1484c:	strdeq	r5, [r1], -r4
   14850:	ldrdeq	r5, [r1], -r4
   14854:	andeq	r4, r1, ip, lsl #31
   14858:	strdeq	r5, [r1], -r4
   1485c:	ldrdeq	r5, [r1], -r4
   14860:	strdeq	r5, [r1], -r4
   14864:	ldrdeq	r5, [r1], -r4
   14868:	strdeq	r5, [r1], -r4
   1486c:	strdeq	r5, [r1], -r4
   14870:	strdeq	r5, [r1], -r4
   14874:	strdeq	r5, [r1], -r4
   14878:	strdeq	r5, [r1], -r4
   1487c:	strdeq	r5, [r1], -r4
   14880:	strdeq	r5, [r1], -r4
   14884:	strdeq	r5, [r1], -r4
   14888:	strdeq	r5, [r1], -r4
   1488c:	strdeq	r5, [r1], -r4
   14890:	strdeq	r5, [r1], -r4
   14894:	strdeq	r5, [r1], -r4
   14898:	strdeq	r5, [r1], -r4
   1489c:	strdeq	r5, [r1], -r4
   148a0:	strdeq	r5, [r1], -r4
   148a4:	strdeq	r5, [r1], -r4
   148a8:	strdeq	r5, [r1], -r4
   148ac:	strdeq	r5, [r1], -r4
   148b0:	strdeq	r5, [r1], -r4
   148b4:	strdeq	r5, [r1], -r4
   148b8:	strdeq	r5, [r1], -r4
   148bc:	strdeq	r5, [r1], -r4
   148c0:	strdeq	r5, [r1], -r4
   148c4:	strdeq	r5, [r1], -r4
   148c8:	strdeq	r5, [r1], -r4
   148cc:	strdeq	r5, [r1], -r4
   148d0:	andeq	r5, r1, ip, asr #32
   148d4:	ldrdeq	r5, [r1], -r4
   148d8:	andeq	r5, r1, ip, asr #32
   148dc:	andeq	r5, r1, ip, rrx
   148e0:	mov	r8, r9
   148e4:	mov	r7, sl
   148e8:	b	157e8 <__assert_fail@plt+0x48b8>
   148ec:	ldr	r3, [sp, #28]
   148f0:	cmp	r3, #0
   148f4:	bne	14914 <__assert_fail@plt+0x39e4>
   148f8:	ldr	r3, [sp, #156]	; 0x9c
   148fc:	tst	r3, #1
   14900:	bne	14cfc <__assert_fail@plt+0x3dcc>
   14904:	ldr	r3, [sp, #28]
   14908:	str	r3, [sp, #44]	; 0x2c
   1490c:	mov	r5, r3
   14910:	b	14c1c <__assert_fail@plt+0x3cec>
   14914:	ldr	r3, [sp, #32]
   14918:	cmp	r3, #0
   1491c:	bne	15798 <__assert_fail@plt+0x4868>
   14920:	str	r3, [sp, #44]	; 0x2c
   14924:	ldr	r3, [sp, #36]	; 0x24
   14928:	eor	r3, r3, #1
   1492c:	cmp	sl, #2
   14930:	movne	r3, #0
   14934:	andeq	r3, r3, #1
   14938:	cmp	r3, #0
   1493c:	beq	14994 <__assert_fail@plt+0x3a64>
   14940:	cmp	r9, fp
   14944:	movhi	r2, #39	; 0x27
   14948:	strbhi	r2, [r8, fp]
   1494c:	add	r2, fp, #1
   14950:	cmp	r9, r2
   14954:	movhi	r1, #36	; 0x24
   14958:	strbhi	r1, [r8, r2]
   1495c:	add	r2, fp, #2
   14960:	cmp	r9, r2
   14964:	movhi	r1, #39	; 0x27
   14968:	strbhi	r1, [r8, r2]
   1496c:	add	r2, fp, #3
   14970:	cmp	r9, r2
   14974:	bls	15854 <__assert_fail@plt+0x4924>
   14978:	mov	r1, #92	; 0x5c
   1497c:	strb	r1, [r8, r2]
   14980:	add	fp, fp, #4
   14984:	str	r3, [sp, #36]	; 0x24
   14988:	mov	r5, #0
   1498c:	mov	r4, #48	; 0x30
   14990:	b	14c68 <__assert_fail@plt+0x3d38>
   14994:	cmp	r9, fp
   14998:	bhi	149c0 <__assert_fail@plt+0x3a90>
   1499c:	add	r1, fp, #1
   149a0:	ldr	r2, [sp, #56]	; 0x38
   149a4:	cmp	r2, #0
   149a8:	bne	149e8 <__assert_fail@plt+0x3ab8>
   149ac:	mov	r3, r5
   149b0:	ldr	r5, [sp, #56]	; 0x38
   149b4:	mov	fp, r1
   149b8:	mov	r4, #48	; 0x30
   149bc:	b	14c1c <__assert_fail@plt+0x3cec>
   149c0:	mov	r2, #92	; 0x5c
   149c4:	strb	r2, [r8, fp]
   149c8:	add	r1, fp, #1
   149cc:	ldr	r2, [sp, #56]	; 0x38
   149d0:	cmp	r2, #0
   149d4:	moveq	r3, r5
   149d8:	moveq	r5, r2
   149dc:	moveq	fp, r1
   149e0:	moveq	r4, #48	; 0x30
   149e4:	beq	14c68 <__assert_fail@plt+0x3d38>
   149e8:	add	r2, r6, #1
   149ec:	ldr	r0, [sp, #24]
   149f0:	cmp	r2, r0
   149f4:	bcs	14a10 <__assert_fail@plt+0x3ae0>
   149f8:	ldr	r0, [sp, #48]	; 0x30
   149fc:	ldrb	r2, [r0, r2]
   14a00:	sub	r2, r2, #48	; 0x30
   14a04:	uxtb	r2, r2
   14a08:	cmp	r2, #9
   14a0c:	bls	14a28 <__assert_fail@plt+0x3af8>
   14a10:	mov	r2, r3
   14a14:	mov	r3, r5
   14a18:	mov	r5, r2
   14a1c:	mov	fp, r1
   14a20:	mov	r4, #48	; 0x30
   14a24:	b	14c40 <__assert_fail@plt+0x3d10>
   14a28:	cmp	r9, r1
   14a2c:	movhi	r2, #48	; 0x30
   14a30:	strbhi	r2, [r8, r1]
   14a34:	add	r2, fp, #2
   14a38:	cmp	r9, r2
   14a3c:	movhi	r1, #48	; 0x30
   14a40:	strbhi	r1, [r8, r2]
   14a44:	add	r1, fp, #3
   14a48:	b	14a10 <__assert_fail@plt+0x3ae0>
   14a4c:	mov	r3, #0
   14a50:	str	r3, [sp, #44]	; 0x2c
   14a54:	cmp	sl, #2
   14a58:	beq	14a74 <__assert_fail@plt+0x3b44>
   14a5c:	cmp	sl, #5
   14a60:	beq	14a8c <__assert_fail@plt+0x3b5c>
   14a64:	mov	r5, #0
   14a68:	mov	r3, r5
   14a6c:	mov	r4, #63	; 0x3f
   14a70:	b	14c1c <__assert_fail@plt+0x3cec>
   14a74:	ldr	r3, [sp, #32]
   14a78:	cmp	r3, #0
   14a7c:	bne	157a4 <__assert_fail@plt+0x4874>
   14a80:	mov	r5, r3
   14a84:	mov	r4, #63	; 0x3f
   14a88:	b	15184 <__assert_fail@plt+0x4254>
   14a8c:	ldr	r3, [sp, #156]	; 0x9c
   14a90:	tst	r3, #4
   14a94:	beq	155bc <__assert_fail@plt+0x468c>
   14a98:	add	r2, r6, #2
   14a9c:	ldr	r3, [sp, #24]
   14aa0:	cmp	r2, r3
   14aa4:	bcs	155cc <__assert_fail@plt+0x469c>
   14aa8:	ldr	r3, [sp, #48]	; 0x30
   14aac:	add	r3, r3, r6
   14ab0:	ldrb	r4, [r3, #1]
   14ab4:	cmp	r4, #63	; 0x3f
   14ab8:	movne	r5, #0
   14abc:	movne	r3, r5
   14ac0:	movne	r4, #63	; 0x3f
   14ac4:	bne	14c1c <__assert_fail@plt+0x3cec>
   14ac8:	ldr	r3, [sp, #48]	; 0x30
   14acc:	ldrb	r1, [r3, r2]
   14ad0:	sub	r3, r1, #33	; 0x21
   14ad4:	cmp	r3, #29
   14ad8:	ldrls	pc, [pc, r3, lsl #2]
   14adc:	b	155dc <__assert_fail@plt+0x46ac>
   14ae0:	andeq	r4, r1, r8, asr fp
   14ae4:	ldrdeq	r5, [r1], -ip
   14ae8:	ldrdeq	r5, [r1], -ip
   14aec:	ldrdeq	r5, [r1], -ip
   14af0:	ldrdeq	r5, [r1], -ip
   14af4:	ldrdeq	r5, [r1], -ip
   14af8:	andeq	r4, r1, r8, asr fp
   14afc:	andeq	r4, r1, r8, asr fp
   14b00:	andeq	r4, r1, r8, asr fp
   14b04:	ldrdeq	r5, [r1], -ip
   14b08:	ldrdeq	r5, [r1], -ip
   14b0c:	ldrdeq	r5, [r1], -ip
   14b10:	andeq	r4, r1, r8, asr fp
   14b14:	ldrdeq	r5, [r1], -ip
   14b18:	andeq	r4, r1, r8, asr fp
   14b1c:	ldrdeq	r5, [r1], -ip
   14b20:	ldrdeq	r5, [r1], -ip
   14b24:	ldrdeq	r5, [r1], -ip
   14b28:	ldrdeq	r5, [r1], -ip
   14b2c:	ldrdeq	r5, [r1], -ip
   14b30:	ldrdeq	r5, [r1], -ip
   14b34:	ldrdeq	r5, [r1], -ip
   14b38:	ldrdeq	r5, [r1], -ip
   14b3c:	ldrdeq	r5, [r1], -ip
   14b40:	ldrdeq	r5, [r1], -ip
   14b44:	ldrdeq	r5, [r1], -ip
   14b48:	ldrdeq	r5, [r1], -ip
   14b4c:	andeq	r4, r1, r8, asr fp
   14b50:	andeq	r4, r1, r8, asr fp
   14b54:	andeq	r4, r1, r8, asr fp
   14b58:	ldr	r3, [sp, #32]
   14b5c:	cmp	r3, #0
   14b60:	bne	15848 <__assert_fail@plt+0x4918>
   14b64:	cmp	r9, fp
   14b68:	movhi	r3, #63	; 0x3f
   14b6c:	strbhi	r3, [r8, fp]
   14b70:	add	r3, fp, #1
   14b74:	cmp	r9, r3
   14b78:	movhi	r0, #34	; 0x22
   14b7c:	strbhi	r0, [r8, r3]
   14b80:	add	r3, fp, #2
   14b84:	cmp	r9, r3
   14b88:	movhi	r0, #34	; 0x22
   14b8c:	strbhi	r0, [r8, r3]
   14b90:	add	r3, fp, #3
   14b94:	cmp	r9, r3
   14b98:	movhi	r0, #63	; 0x3f
   14b9c:	strbhi	r0, [r8, r3]
   14ba0:	add	fp, fp, #4
   14ba4:	ldr	r3, [sp, #32]
   14ba8:	mov	r5, r3
   14bac:	mov	r4, r1
   14bb0:	mov	r6, r2
   14bb4:	b	14c1c <__assert_fail@plt+0x3cec>
   14bb8:	mov	r3, #0
   14bbc:	str	r3, [sp, #44]	; 0x2c
   14bc0:	mov	r4, #8
   14bc4:	mov	r3, #98	; 0x62
   14bc8:	b	14c08 <__assert_fail@plt+0x3cd8>
   14bcc:	mov	r3, #0
   14bd0:	str	r3, [sp, #44]	; 0x2c
   14bd4:	mov	r4, #12
   14bd8:	mov	r3, #102	; 0x66
   14bdc:	b	14c08 <__assert_fail@plt+0x3cd8>
   14be0:	mov	r3, #0
   14be4:	str	r3, [sp, #44]	; 0x2c
   14be8:	mov	r4, #13
   14bec:	mov	r3, #114	; 0x72
   14bf0:	ldr	r2, [sp, #32]
   14bf4:	cmp	sl, #2
   14bf8:	movne	r2, #0
   14bfc:	andeq	r2, r2, #1
   14c00:	cmp	r2, #0
   14c04:	bne	15028 <__assert_fail@plt+0x40f8>
   14c08:	ldr	r2, [sp, #28]
   14c0c:	cmp	r2, #0
   14c10:	bne	15610 <__assert_fail@plt+0x46e0>
   14c14:	mov	r5, r2
   14c18:	mov	r3, r2
   14c1c:	ldr	r2, [sp, #28]
   14c20:	eor	r2, r2, #1
   14c24:	cmp	sl, #2
   14c28:	orreq	r2, r2, #1
   14c2c:	eor	r2, r2, #1
   14c30:	ldr	r1, [sp, #32]
   14c34:	orr	r2, r1, r2
   14c38:	tst	r2, #255	; 0xff
   14c3c:	beq	14c68 <__assert_fail@plt+0x3d38>
   14c40:	ldr	r2, [sp, #160]	; 0xa0
   14c44:	cmp	r2, #0
   14c48:	beq	14c68 <__assert_fail@plt+0x3d38>
   14c4c:	ubfx	r1, r4, #5, #8
   14c50:	and	r2, r4, #31
   14c54:	ldr	r0, [sp, #160]	; 0xa0
   14c58:	ldr	r1, [r0, r1, lsl #2]
   14c5c:	lsr	r2, r1, r2
   14c60:	tst	r2, #1
   14c64:	bne	14c74 <__assert_fail@plt+0x3d44>
   14c68:	ldr	r2, [sp, #44]	; 0x2c
   14c6c:	cmp	r2, #0
   14c70:	beq	14fc8 <__assert_fail@plt+0x4098>
   14c74:	ldr	r3, [sp, #32]
   14c78:	cmp	r3, #0
   14c7c:	bne	157c8 <__assert_fail@plt+0x4898>
   14c80:	ldr	r3, [sp, #36]	; 0x24
   14c84:	eor	r3, r3, #1
   14c88:	cmp	sl, #2
   14c8c:	movne	r3, #0
   14c90:	andeq	r3, r3, #1
   14c94:	cmp	r3, #0
   14c98:	beq	14cd0 <__assert_fail@plt+0x3da0>
   14c9c:	cmp	r9, fp
   14ca0:	movhi	r2, #39	; 0x27
   14ca4:	strbhi	r2, [r8, fp]
   14ca8:	add	r2, fp, #1
   14cac:	cmp	r9, r2
   14cb0:	movhi	r1, #36	; 0x24
   14cb4:	strbhi	r1, [r8, r2]
   14cb8:	add	r2, fp, #2
   14cbc:	cmp	r9, r2
   14cc0:	movhi	r1, #39	; 0x27
   14cc4:	strbhi	r1, [r8, r2]
   14cc8:	add	fp, fp, #3
   14ccc:	str	r3, [sp, #36]	; 0x24
   14cd0:	cmp	r9, fp
   14cd4:	movhi	r3, #92	; 0x5c
   14cd8:	strbhi	r3, [r8, fp]
   14cdc:	add	fp, fp, #1
   14ce0:	cmp	fp, r9
   14ce4:	strbcc	r4, [r8, fp]
   14ce8:	add	fp, fp, #1
   14cec:	cmp	r5, #0
   14cf0:	ldr	r3, [sp, #40]	; 0x28
   14cf4:	moveq	r3, r5
   14cf8:	str	r3, [sp, #40]	; 0x28
   14cfc:	add	r6, r6, #1
   14d00:	ldr	r3, [sp, #24]
   14d04:	cmn	r3, #1
   14d08:	beq	15638 <__assert_fail@plt+0x4708>
   14d0c:	ldr	r3, [sp, #24]
   14d10:	subs	r5, r3, r6
   14d14:	movne	r5, #1
   14d18:	cmp	r5, #0
   14d1c:	beq	1564c <__assert_fail@plt+0x471c>
   14d20:	ldr	r3, [sp, #28]
   14d24:	cmp	sl, #2
   14d28:	moveq	r3, #0
   14d2c:	andne	r3, r3, #1
   14d30:	str	r3, [sp, #56]	; 0x38
   14d34:	ldr	r2, [sp, #52]	; 0x34
   14d38:	adds	r7, r2, #0
   14d3c:	movne	r7, #1
   14d40:	ands	r3, r3, r7
   14d44:	str	r3, [sp, #44]	; 0x2c
   14d48:	bne	14668 <__assert_fail@plt+0x3738>
   14d4c:	ldr	r3, [sp, #48]	; 0x30
   14d50:	ldrb	r4, [r3, r6]
   14d54:	cmp	r4, #126	; 0x7e
   14d58:	ldrls	pc, [pc, r4, lsl #2]
   14d5c:	b	15194 <__assert_fail@plt+0x4264>
   14d60:	andeq	r4, r1, ip, ror #17
   14d64:	muleq	r1, r4, r1
   14d68:	muleq	r1, r4, r1
   14d6c:	muleq	r1, r4, r1
   14d70:	muleq	r1, r4, r1
   14d74:	muleq	r1, r4, r1
   14d78:	muleq	r1, r4, r1
   14d7c:	andeq	r5, r1, r4, lsr r0
   14d80:	andeq	r4, r1, r0, asr #23
   14d84:	andeq	r4, r1, r4, ror #30
   14d88:	andeq	r5, r1, r8
   14d8c:	andeq	r4, r1, r8, ror pc
   14d90:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d94:	andeq	r4, r1, r8, ror #23
   14d98:	muleq	r1, r4, r1
   14d9c:	muleq	r1, r4, r1
   14da0:	muleq	r1, r4, r1
   14da4:	muleq	r1, r4, r1
   14da8:	muleq	r1, r4, r1
   14dac:	muleq	r1, r4, r1
   14db0:	muleq	r1, r4, r1
   14db4:	muleq	r1, r4, r1
   14db8:	muleq	r1, r4, r1
   14dbc:	muleq	r1, r4, r1
   14dc0:	muleq	r1, r4, r1
   14dc4:	muleq	r1, r4, r1
   14dc8:	muleq	r1, r4, r1
   14dcc:	muleq	r1, r4, r1
   14dd0:	muleq	r1, r4, r1
   14dd4:	muleq	r1, r4, r1
   14dd8:	muleq	r1, r4, r1
   14ddc:	muleq	r1, r4, r1
   14de0:	strheq	r5, [r1], -r0
   14de4:	andeq	r5, r1, ip, lsr #1
   14de8:	andeq	r5, r1, ip, lsr #1
   14dec:	andeq	r5, r1, ip, rrx
   14df0:	andeq	r5, r1, ip, lsr #1
   14df4:			; <UNDEFINED> instruction: 0x000155b4
   14df8:	andeq	r5, r1, ip, lsr #1
   14dfc:	strdeq	r5, [r1], -r4
   14e00:	andeq	r5, r1, ip, lsr #1
   14e04:	andeq	r5, r1, ip, lsr #1
   14e08:	andeq	r5, r1, ip, lsr #1
   14e0c:			; <UNDEFINED> instruction: 0x000155b4
   14e10:			; <UNDEFINED> instruction: 0x000155b4
   14e14:			; <UNDEFINED> instruction: 0x000155b4
   14e18:			; <UNDEFINED> instruction: 0x000155b4
   14e1c:			; <UNDEFINED> instruction: 0x000155b4
   14e20:			; <UNDEFINED> instruction: 0x000155b4
   14e24:			; <UNDEFINED> instruction: 0x000155b4
   14e28:			; <UNDEFINED> instruction: 0x000155b4
   14e2c:			; <UNDEFINED> instruction: 0x000155b4
   14e30:			; <UNDEFINED> instruction: 0x000155b4
   14e34:			; <UNDEFINED> instruction: 0x000155b4
   14e38:			; <UNDEFINED> instruction: 0x000155b4
   14e3c:			; <UNDEFINED> instruction: 0x000155b4
   14e40:			; <UNDEFINED> instruction: 0x000155b4
   14e44:			; <UNDEFINED> instruction: 0x000155b4
   14e48:			; <UNDEFINED> instruction: 0x000155b4
   14e4c:	andeq	r5, r1, ip, lsr #1
   14e50:	andeq	r5, r1, ip, lsr #1
   14e54:	andeq	r5, r1, ip, lsr #1
   14e58:	andeq	r5, r1, ip, lsr #1
   14e5c:	andeq	r4, r1, r4, asr sl
   14e60:	muleq	r1, r4, r1
   14e64:			; <UNDEFINED> instruction: 0x000155b4
   14e68:			; <UNDEFINED> instruction: 0x000155b4
   14e6c:			; <UNDEFINED> instruction: 0x000155b4
   14e70:			; <UNDEFINED> instruction: 0x000155b4
   14e74:			; <UNDEFINED> instruction: 0x000155b4
   14e78:			; <UNDEFINED> instruction: 0x000155b4
   14e7c:			; <UNDEFINED> instruction: 0x000155b4
   14e80:			; <UNDEFINED> instruction: 0x000155b4
   14e84:			; <UNDEFINED> instruction: 0x000155b4
   14e88:			; <UNDEFINED> instruction: 0x000155b4
   14e8c:			; <UNDEFINED> instruction: 0x000155b4
   14e90:			; <UNDEFINED> instruction: 0x000155b4
   14e94:			; <UNDEFINED> instruction: 0x000155b4
   14e98:			; <UNDEFINED> instruction: 0x000155b4
   14e9c:			; <UNDEFINED> instruction: 0x000155b4
   14ea0:			; <UNDEFINED> instruction: 0x000155b4
   14ea4:			; <UNDEFINED> instruction: 0x000155b4
   14ea8:			; <UNDEFINED> instruction: 0x000155b4
   14eac:			; <UNDEFINED> instruction: 0x000155b4
   14eb0:			; <UNDEFINED> instruction: 0x000155b4
   14eb4:			; <UNDEFINED> instruction: 0x000155b4
   14eb8:			; <UNDEFINED> instruction: 0x000155b4
   14ebc:			; <UNDEFINED> instruction: 0x000155b4
   14ec0:			; <UNDEFINED> instruction: 0x000155b4
   14ec4:			; <UNDEFINED> instruction: 0x000155b4
   14ec8:			; <UNDEFINED> instruction: 0x000155b4
   14ecc:	andeq	r5, r1, ip, lsr #1
   14ed0:	andeq	r4, r1, ip, lsl #31
   14ed4:			; <UNDEFINED> instruction: 0x000155b4
   14ed8:	andeq	r5, r1, ip, lsr #1
   14edc:			; <UNDEFINED> instruction: 0x000155b4
   14ee0:	andeq	r5, r1, ip, lsr #1
   14ee4:			; <UNDEFINED> instruction: 0x000155b4
   14ee8:			; <UNDEFINED> instruction: 0x000155b4
   14eec:			; <UNDEFINED> instruction: 0x000155b4
   14ef0:			; <UNDEFINED> instruction: 0x000155b4
   14ef4:			; <UNDEFINED> instruction: 0x000155b4
   14ef8:			; <UNDEFINED> instruction: 0x000155b4
   14efc:			; <UNDEFINED> instruction: 0x000155b4
   14f00:			; <UNDEFINED> instruction: 0x000155b4
   14f04:			; <UNDEFINED> instruction: 0x000155b4
   14f08:			; <UNDEFINED> instruction: 0x000155b4
   14f0c:			; <UNDEFINED> instruction: 0x000155b4
   14f10:			; <UNDEFINED> instruction: 0x000155b4
   14f14:			; <UNDEFINED> instruction: 0x000155b4
   14f18:			; <UNDEFINED> instruction: 0x000155b4
   14f1c:			; <UNDEFINED> instruction: 0x000155b4
   14f20:			; <UNDEFINED> instruction: 0x000155b4
   14f24:			; <UNDEFINED> instruction: 0x000155b4
   14f28:			; <UNDEFINED> instruction: 0x000155b4
   14f2c:			; <UNDEFINED> instruction: 0x000155b4
   14f30:			; <UNDEFINED> instruction: 0x000155b4
   14f34:			; <UNDEFINED> instruction: 0x000155b4
   14f38:			; <UNDEFINED> instruction: 0x000155b4
   14f3c:			; <UNDEFINED> instruction: 0x000155b4
   14f40:			; <UNDEFINED> instruction: 0x000155b4
   14f44:			; <UNDEFINED> instruction: 0x000155b4
   14f48:			; <UNDEFINED> instruction: 0x000155b4
   14f4c:	andeq	r5, r1, ip, asr #32
   14f50:	andeq	r5, r1, ip, lsr #1
   14f54:	andeq	r5, r1, ip, asr #32
   14f58:	andeq	r5, r1, ip, rrx
   14f5c:	mov	r3, #0
   14f60:	str	r3, [sp, #44]	; 0x2c
   14f64:	mov	r4, #9
   14f68:	mov	r3, #116	; 0x74
   14f6c:	b	14bf0 <__assert_fail@plt+0x3cc0>
   14f70:	mov	r3, #0
   14f74:	str	r3, [sp, #44]	; 0x2c
   14f78:	mov	r4, #11
   14f7c:	mov	r3, #118	; 0x76
   14f80:	b	14c08 <__assert_fail@plt+0x3cd8>
   14f84:	mov	r3, #0
   14f88:	str	r3, [sp, #44]	; 0x2c
   14f8c:	cmp	sl, #2
   14f90:	beq	14fb4 <__assert_fail@plt+0x4084>
   14f94:	ldr	r3, [sp, #28]
   14f98:	ldr	r2, [sp, #32]
   14f9c:	and	r3, r3, r2
   14fa0:	tst	r7, r3
   14fa4:	bne	15628 <__assert_fail@plt+0x46f8>
   14fa8:	mov	r4, #92	; 0x5c
   14fac:	mov	r3, r4
   14fb0:	b	14c08 <__assert_fail@plt+0x3cd8>
   14fb4:	ldr	r3, [sp, #32]
   14fb8:	cmp	r3, #0
   14fbc:	bne	157b0 <__assert_fail@plt+0x4880>
   14fc0:	mov	r5, r3
   14fc4:	mov	r4, #92	; 0x5c
   14fc8:	eor	r3, r3, #1
   14fcc:	ldr	r2, [sp, #36]	; 0x24
   14fd0:	and	r3, r3, r2
   14fd4:	tst	r3, #255	; 0xff
   14fd8:	beq	14ce0 <__assert_fail@plt+0x3db0>
   14fdc:	cmp	r9, fp
   14fe0:	movhi	r3, #39	; 0x27
   14fe4:	strbhi	r3, [r8, fp]
   14fe8:	add	r3, fp, #1
   14fec:	cmp	r9, r3
   14ff0:	movhi	r2, #39	; 0x27
   14ff4:	strbhi	r2, [r8, r3]
   14ff8:	add	fp, fp, #2
   14ffc:	mov	r3, #0
   15000:	str	r3, [sp, #36]	; 0x24
   15004:	b	14ce0 <__assert_fail@plt+0x3db0>
   15008:	mov	r3, #110	; 0x6e
   1500c:	b	14bf0 <__assert_fail@plt+0x3cc0>
   15010:	mov	r3, #110	; 0x6e
   15014:	b	14bf0 <__assert_fail@plt+0x3cc0>
   15018:	mov	r3, #0
   1501c:	str	r3, [sp, #44]	; 0x2c
   15020:	mov	r3, #110	; 0x6e
   15024:	b	14bf0 <__assert_fail@plt+0x3cc0>
   15028:	mov	r8, r9
   1502c:	mov	r7, #2
   15030:	b	157d0 <__assert_fail@plt+0x48a0>
   15034:	mov	r3, #97	; 0x61
   15038:	b	14c08 <__assert_fail@plt+0x3cd8>
   1503c:	mov	r3, #97	; 0x61
   15040:	b	14c08 <__assert_fail@plt+0x3cd8>
   15044:	mov	r3, #0
   15048:	str	r3, [sp, #44]	; 0x2c
   1504c:	ldr	r3, [sp, #24]
   15050:	cmn	r3, #1
   15054:	beq	15080 <__assert_fail@plt+0x4150>
   15058:	ldr	r3, [sp, #24]
   1505c:	subs	r3, r3, #1
   15060:	movne	r3, #1
   15064:	cmp	r3, #0
   15068:	bne	155e8 <__assert_fail@plt+0x46b8>
   1506c:	cmp	r6, #0
   15070:	beq	150b0 <__assert_fail@plt+0x4180>
   15074:	mov	r5, #0
   15078:	mov	r3, r5
   1507c:	b	14c1c <__assert_fail@plt+0x3cec>
   15080:	ldr	r3, [sp, #48]	; 0x30
   15084:	ldrb	r3, [r3, #1]
   15088:	adds	r3, r3, #0
   1508c:	movne	r3, #1
   15090:	b	15064 <__assert_fail@plt+0x4134>
   15094:	mov	r3, #0
   15098:	str	r3, [sp, #44]	; 0x2c
   1509c:	b	1506c <__assert_fail@plt+0x413c>
   150a0:	mov	r3, #0
   150a4:	str	r3, [sp, #44]	; 0x2c
   150a8:	b	150b0 <__assert_fail@plt+0x4180>
   150ac:	ldr	r5, [sp, #44]	; 0x2c
   150b0:	ldr	r3, [sp, #32]
   150b4:	cmp	sl, #2
   150b8:	movne	r3, #0
   150bc:	andeq	r3, r3, #1
   150c0:	cmp	r3, #0
   150c4:	beq	14c1c <__assert_fail@plt+0x3cec>
   150c8:	mov	r8, r9
   150cc:	mov	r7, #2
   150d0:	b	157d0 <__assert_fail@plt+0x48a0>
   150d4:	ldr	r5, [sp, #32]
   150d8:	b	150b0 <__assert_fail@plt+0x4180>
   150dc:	mov	r3, #0
   150e0:	str	r3, [sp, #44]	; 0x2c
   150e4:	mov	r5, r3
   150e8:	b	150b0 <__assert_fail@plt+0x4180>
   150ec:	mov	r3, #0
   150f0:	str	r3, [sp, #44]	; 0x2c
   150f4:	cmp	sl, #2
   150f8:	strne	r5, [sp, #68]	; 0x44
   150fc:	movne	r3, #0
   15100:	movne	r4, #39	; 0x27
   15104:	bne	14c1c <__assert_fail@plt+0x3cec>
   15108:	ldr	r3, [sp, #32]
   1510c:	cmp	r3, #0
   15110:	bne	157bc <__assert_fail@plt+0x488c>
   15114:	ldr	r3, [sp, #72]	; 0x48
   15118:	clz	r3, r3
   1511c:	lsr	r3, r3, #5
   15120:	cmp	r9, #0
   15124:	moveq	r3, #0
   15128:	cmp	r3, #0
   1512c:	movne	r3, #0
   15130:	bne	15158 <__assert_fail@plt+0x4228>
   15134:	cmp	r9, fp
   15138:	movhi	r3, #39	; 0x27
   1513c:	strbhi	r3, [r8, fp]
   15140:	add	r3, fp, #1
   15144:	cmp	r9, r3
   15148:	movhi	r2, #92	; 0x5c
   1514c:	strbhi	r2, [r8, r3]
   15150:	mov	r3, r9
   15154:	ldr	r9, [sp, #72]	; 0x48
   15158:	add	r2, fp, #2
   1515c:	cmp	r2, r3
   15160:	movcc	r1, #39	; 0x27
   15164:	strbcc	r1, [r8, r2]
   15168:	add	fp, fp, #3
   1516c:	str	r5, [sp, #68]	; 0x44
   15170:	ldr	r2, [sp, #32]
   15174:	str	r2, [sp, #36]	; 0x24
   15178:	str	r9, [sp, #72]	; 0x48
   1517c:	mov	r9, r3
   15180:	mov	r4, #39	; 0x27
   15184:	mov	r3, #0
   15188:	b	14c68 <__assert_fail@plt+0x3d38>
   1518c:	mov	r3, #0
   15190:	str	r3, [sp, #44]	; 0x2c
   15194:	ldr	r7, [sp, #76]	; 0x4c
   15198:	cmp	r7, #1
   1519c:	bne	151d4 <__assert_fail@plt+0x42a4>
   151a0:	bl	10e1c <__ctype_b_loc@plt>
   151a4:	ldr	r2, [r0]
   151a8:	lsl	r3, r4, #1
   151ac:	ldrh	r5, [r2, r3]
   151b0:	ubfx	r5, r5, #14, #1
   151b4:	mov	ip, r7
   151b8:	eor	r3, r5, #1
   151bc:	ldr	r2, [sp, #28]
   151c0:	and	r3, r3, r2
   151c4:	ands	r3, r3, #255	; 0xff
   151c8:	beq	14c1c <__assert_fail@plt+0x3cec>
   151cc:	mov	r5, #0
   151d0:	b	15430 <__assert_fail@plt+0x4500>
   151d4:	mov	r2, #0
   151d8:	mov	r3, #0
   151dc:	strd	r2, [sp, #104]	; 0x68
   151e0:	ldr	r3, [sp, #24]
   151e4:	cmn	r3, #1
   151e8:	beq	1520c <__assert_fail@plt+0x42dc>
   151ec:	mov	r3, #0
   151f0:	str	r4, [sp, #88]	; 0x58
   151f4:	str	fp, [sp, #92]	; 0x5c
   151f8:	str	r8, [sp, #56]	; 0x38
   151fc:	mov	r8, r3
   15200:	str	r9, [sp, #84]	; 0x54
   15204:	ldr	r9, [sp, #48]	; 0x30
   15208:	b	15358 <__assert_fail@plt+0x4428>
   1520c:	ldr	r0, [sp, #48]	; 0x30
   15210:	bl	10e34 <strlen@plt>
   15214:	str	r0, [sp, #24]
   15218:	b	151ec <__assert_fail@plt+0x42bc>
   1521c:	mov	r1, fp
   15220:	ldr	r4, [sp, #88]	; 0x58
   15224:	mov	r2, r8
   15228:	mov	ip, r8
   1522c:	ldr	fp, [sp, #92]	; 0x5c
   15230:	ldr	r8, [sp, #56]	; 0x38
   15234:	ldr	r9, [sp, #84]	; 0x54
   15238:	ldr	r0, [sp, #24]
   1523c:	cmp	r7, r0
   15240:	bcs	153f8 <__assert_fail@plt+0x44c8>
   15244:	ldrb	r3, [r1]
   15248:	cmp	r3, #0
   1524c:	beq	15400 <__assert_fail@plt+0x44d0>
   15250:	mov	r3, r1
   15254:	add	r2, r2, #1
   15258:	add	r1, r6, r2
   1525c:	cmp	r0, r1
   15260:	bls	15408 <__assert_fail@plt+0x44d8>
   15264:	ldrb	r1, [r3, #1]!
   15268:	cmp	r1, #0
   1526c:	bne	15254 <__assert_fail@plt+0x4324>
   15270:	mov	ip, r2
   15274:	mov	r5, #0
   15278:	b	15428 <__assert_fail@plt+0x44f8>
   1527c:	ldr	r3, [sp, #56]	; 0x38
   15280:	str	r3, [sp, #64]	; 0x40
   15284:	ldr	r8, [sp, #84]	; 0x54
   15288:	mov	r7, #2
   1528c:	b	157d0 <__assert_fail@plt+0x48a0>
   15290:	cmp	r2, r7
   15294:	beq	15334 <__assert_fail@plt+0x4404>
   15298:	ldrb	r3, [r2], #1
   1529c:	sub	r3, r3, #91	; 0x5b
   152a0:	cmp	r3, #33	; 0x21
   152a4:	ldrls	pc, [pc, r3, lsl #2]
   152a8:	b	15290 <__assert_fail@plt+0x4360>
   152ac:	andeq	r5, r1, ip, ror r2
   152b0:	andeq	r5, r1, ip, ror r2
   152b4:	muleq	r1, r0, r2
   152b8:	andeq	r5, r1, ip, ror r2
   152bc:	muleq	r1, r0, r2
   152c0:	andeq	r5, r1, ip, ror r2
   152c4:	muleq	r1, r0, r2
   152c8:	muleq	r1, r0, r2
   152cc:	muleq	r1, r0, r2
   152d0:	muleq	r1, r0, r2
   152d4:	muleq	r1, r0, r2
   152d8:	muleq	r1, r0, r2
   152dc:	muleq	r1, r0, r2
   152e0:	muleq	r1, r0, r2
   152e4:	muleq	r1, r0, r2
   152e8:	muleq	r1, r0, r2
   152ec:	muleq	r1, r0, r2
   152f0:	muleq	r1, r0, r2
   152f4:	muleq	r1, r0, r2
   152f8:	muleq	r1, r0, r2
   152fc:	muleq	r1, r0, r2
   15300:	muleq	r1, r0, r2
   15304:	muleq	r1, r0, r2
   15308:	muleq	r1, r0, r2
   1530c:	muleq	r1, r0, r2
   15310:	muleq	r1, r0, r2
   15314:	muleq	r1, r0, r2
   15318:	muleq	r1, r0, r2
   1531c:	muleq	r1, r0, r2
   15320:	muleq	r1, r0, r2
   15324:	muleq	r1, r0, r2
   15328:	muleq	r1, r0, r2
   1532c:	muleq	r1, r0, r2
   15330:	andeq	r5, r1, ip, ror r2
   15334:	ldr	r0, [sp, #100]	; 0x64
   15338:	bl	10d8c <iswprint@plt>
   1533c:	cmp	r0, #0
   15340:	moveq	r5, #0
   15344:	add	r8, r8, r4
   15348:	add	r0, sp, #104	; 0x68
   1534c:	bl	10d38 <mbsinit@plt>
   15350:	cmp	r0, #0
   15354:	bne	153c4 <__assert_fail@plt+0x4494>
   15358:	add	r7, r6, r8
   1535c:	add	fp, r9, r7
   15360:	add	r3, sp, #104	; 0x68
   15364:	ldr	r2, [sp, #24]
   15368:	sub	r2, r2, r7
   1536c:	mov	r1, fp
   15370:	add	r0, sp, #100	; 0x64
   15374:	bl	1785c <__assert_fail@plt+0x692c>
   15378:	subs	r4, r0, #0
   1537c:	beq	15414 <__assert_fail@plt+0x44e4>
   15380:	cmn	r4, #1
   15384:	beq	153dc <__assert_fail@plt+0x44ac>
   15388:	cmn	r4, #2
   1538c:	beq	1521c <__assert_fail@plt+0x42ec>
   15390:	ldr	r3, [sp, #32]
   15394:	cmp	sl, #2
   15398:	movne	r3, #0
   1539c:	andeq	r3, r3, #1
   153a0:	cmp	r3, #0
   153a4:	beq	15334 <__assert_fail@plt+0x4404>
   153a8:	cmp	r4, #1
   153ac:	bls	15334 <__assert_fail@plt+0x4404>
   153b0:	add	r2, r7, #1
   153b4:	add	r2, r9, r2
   153b8:	add	r3, r9, r4
   153bc:	add	r7, r3, r7
   153c0:	b	15298 <__assert_fail@plt+0x4368>
   153c4:	ldr	r4, [sp, #88]	; 0x58
   153c8:	mov	ip, r8
   153cc:	ldr	fp, [sp, #92]	; 0x5c
   153d0:	ldr	r8, [sp, #56]	; 0x38
   153d4:	ldr	r9, [sp, #84]	; 0x54
   153d8:	b	15428 <__assert_fail@plt+0x44f8>
   153dc:	ldr	r4, [sp, #88]	; 0x58
   153e0:	mov	ip, r8
   153e4:	ldr	fp, [sp, #92]	; 0x5c
   153e8:	ldr	r8, [sp, #56]	; 0x38
   153ec:	ldr	r9, [sp, #84]	; 0x54
   153f0:	mov	r5, #0
   153f4:	b	15428 <__assert_fail@plt+0x44f8>
   153f8:	mov	r5, #0
   153fc:	b	15428 <__assert_fail@plt+0x44f8>
   15400:	mov	r5, #0
   15404:	b	15428 <__assert_fail@plt+0x44f8>
   15408:	mov	ip, r2
   1540c:	mov	r5, #0
   15410:	b	15428 <__assert_fail@plt+0x44f8>
   15414:	ldr	r4, [sp, #88]	; 0x58
   15418:	mov	ip, r8
   1541c:	ldr	fp, [sp, #92]	; 0x5c
   15420:	ldr	r8, [sp, #56]	; 0x38
   15424:	ldr	r9, [sp, #84]	; 0x54
   15428:	cmp	ip, #1
   1542c:	bls	151b8 <__assert_fail@plt+0x4288>
   15430:	add	lr, r6, ip
   15434:	ldr	r3, [sp, #48]	; 0x30
   15438:	add	r1, r3, r6
   1543c:	mov	r3, #0
   15440:	eor	r0, r5, #1
   15444:	ldr	r2, [sp, #28]
   15448:	and	r0, r0, r2
   1544c:	uxtb	r0, r0
   15450:	str	r0, [sp, #56]	; 0x38
   15454:	mov	r7, #92	; 0x5c
   15458:	ldr	ip, [sp, #36]	; 0x24
   1545c:	str	r5, [sp, #84]	; 0x54
   15460:	ldr	r2, [sp, #44]	; 0x2c
   15464:	b	154d4 <__assert_fail@plt+0x45a4>
   15468:	cmp	r2, #0
   1546c:	beq	1547c <__assert_fail@plt+0x454c>
   15470:	cmp	r9, fp
   15474:	strbhi	r7, [r8, fp]
   15478:	add	fp, fp, #1
   1547c:	add	r5, r6, #1
   15480:	cmp	r5, lr
   15484:	bcs	15590 <__assert_fail@plt+0x4660>
   15488:	eor	r2, r3, #1
   1548c:	and	r2, r2, ip
   15490:	ands	r2, r2, #255	; 0xff
   15494:	beq	155ac <__assert_fail@plt+0x467c>
   15498:	cmp	r9, fp
   1549c:	movhi	r2, #39	; 0x27
   154a0:	strbhi	r2, [r8, fp]
   154a4:	add	r2, fp, #1
   154a8:	cmp	r9, r2
   154ac:	movhi	ip, #39	; 0x27
   154b0:	strbhi	ip, [r8, r2]
   154b4:	add	fp, fp, #2
   154b8:	ldr	ip, [sp, #56]	; 0x38
   154bc:	mov	r2, ip
   154c0:	mov	r6, r5
   154c4:	cmp	r9, fp
   154c8:	strbhi	r4, [r8, fp]
   154cc:	add	fp, fp, #1
   154d0:	ldrb	r4, [r1, #1]!
   154d4:	cmp	r0, #0
   154d8:	beq	15468 <__assert_fail@plt+0x4538>
   154dc:	ldr	r3, [sp, #32]
   154e0:	cmp	r3, #0
   154e4:	bne	15778 <__assert_fail@plt+0x4848>
   154e8:	eor	r3, ip, #1
   154ec:	cmp	sl, #2
   154f0:	movne	r3, #0
   154f4:	andeq	r3, r3, #1
   154f8:	cmp	r3, #0
   154fc:	beq	15534 <__assert_fail@plt+0x4604>
   15500:	cmp	r9, fp
   15504:	movhi	ip, #39	; 0x27
   15508:	strbhi	ip, [r8, fp]
   1550c:	add	ip, fp, #1
   15510:	cmp	r9, ip
   15514:	movhi	r5, #36	; 0x24
   15518:	strbhi	r5, [r8, ip]
   1551c:	add	ip, fp, #2
   15520:	cmp	r9, ip
   15524:	movhi	r5, #39	; 0x27
   15528:	strbhi	r5, [r8, ip]
   1552c:	add	fp, fp, #3
   15530:	mov	ip, r3
   15534:	cmp	r9, fp
   15538:	strbhi	r7, [r8, fp]
   1553c:	add	r3, fp, #1
   15540:	cmp	r9, r3
   15544:	bls	15554 <__assert_fail@plt+0x4624>
   15548:	lsr	r5, r4, #6
   1554c:	add	r5, r5, #48	; 0x30
   15550:	strb	r5, [r8, r3]
   15554:	add	r3, fp, #2
   15558:	cmp	r9, r3
   1555c:	bls	1556c <__assert_fail@plt+0x463c>
   15560:	ubfx	r5, r4, #3, #3
   15564:	add	r5, r5, #48	; 0x30
   15568:	strb	r5, [r8, r3]
   1556c:	add	fp, fp, #3
   15570:	and	r4, r4, #7
   15574:	add	r4, r4, #48	; 0x30
   15578:	add	r5, r6, #1
   1557c:	cmp	r5, lr
   15580:	bcs	1559c <__assert_fail@plt+0x466c>
   15584:	ldr	r3, [sp, #56]	; 0x38
   15588:	mov	r6, r5
   1558c:	b	154c4 <__assert_fail@plt+0x4594>
   15590:	str	ip, [sp, #36]	; 0x24
   15594:	ldr	r5, [sp, #84]	; 0x54
   15598:	b	14fc8 <__assert_fail@plt+0x4098>
   1559c:	str	ip, [sp, #36]	; 0x24
   155a0:	ldr	r5, [sp, #84]	; 0x54
   155a4:	mov	r3, r0
   155a8:	b	14fc8 <__assert_fail@plt+0x4098>
   155ac:	mov	r6, r5
   155b0:	b	154c4 <__assert_fail@plt+0x4594>
   155b4:	ldr	r3, [sp, #44]	; 0x2c
   155b8:	b	14c1c <__assert_fail@plt+0x3cec>
   155bc:	mov	r5, #0
   155c0:	mov	r3, r5
   155c4:	mov	r4, #63	; 0x3f
   155c8:	b	14c1c <__assert_fail@plt+0x3cec>
   155cc:	mov	r5, #0
   155d0:	mov	r3, r5
   155d4:	mov	r4, #63	; 0x3f
   155d8:	b	14c1c <__assert_fail@plt+0x3cec>
   155dc:	mov	r5, #0
   155e0:	mov	r3, r5
   155e4:	b	14c1c <__assert_fail@plt+0x3cec>
   155e8:	mov	r5, #0
   155ec:	mov	r3, r5
   155f0:	b	14c1c <__assert_fail@plt+0x3cec>
   155f4:	ldr	r5, [sp, #44]	; 0x2c
   155f8:	ldr	r3, [sp, #32]
   155fc:	b	14c1c <__assert_fail@plt+0x3cec>
   15600:	ldr	r5, [sp, #44]	; 0x2c
   15604:	mov	r3, #0
   15608:	str	r3, [sp, #44]	; 0x2c
   1560c:	b	14c1c <__assert_fail@plt+0x3cec>
   15610:	mov	r4, r3
   15614:	mov	r5, #0
   15618:	b	14c74 <__assert_fail@plt+0x3d44>
   1561c:	mov	r5, #0
   15620:	mov	r4, #97	; 0x61
   15624:	b	14c74 <__assert_fail@plt+0x3d44>
   15628:	mov	r5, #0
   1562c:	mov	r3, r5
   15630:	mov	r4, #92	; 0x5c
   15634:	b	14fc8 <__assert_fail@plt+0x4098>
   15638:	ldr	r3, [sp, #48]	; 0x30
   1563c:	ldrb	r5, [r3, r6]
   15640:	adds	r5, r5, #0
   15644:	movne	r5, #1
   15648:	b	14d18 <__assert_fail@plt+0x3de8>
   1564c:	cmp	sl, #2
   15650:	movne	r3, #0
   15654:	moveq	r3, #1
   15658:	ldr	r1, [sp, #32]
   1565c:	cmp	fp, #0
   15660:	andeq	r2, r3, r1
   15664:	movne	r2, #0
   15668:	cmp	r2, #0
   1566c:	bne	1578c <__assert_fail@plt+0x485c>
   15670:	eor	r2, r1, #1
   15674:	uxtb	r2, r2
   15678:	and	r3, r3, r2
   1567c:	ldr	r1, [sp, #68]	; 0x44
   15680:	ands	r3, r1, r3
   15684:	beq	15718 <__assert_fail@plt+0x47e8>
   15688:	ldr	r2, [sp, #40]	; 0x28
   1568c:	cmp	r2, #0
   15690:	bne	156c8 <__assert_fail@plt+0x4798>
   15694:	ldr	r2, [sp, #72]	; 0x48
   15698:	adds	r2, r2, #0
   1569c:	movne	r2, #1
   156a0:	cmp	r9, #0
   156a4:	movne	r2, #0
   156a8:	str	r2, [sp, #68]	; 0x44
   156ac:	mov	sl, #2
   156b0:	ldr	r1, [sp, #40]	; 0x28
   156b4:	str	r1, [sp, #32]
   156b8:	cmp	r2, #0
   156bc:	beq	1570c <__assert_fail@plt+0x47dc>
   156c0:	ldr	r9, [sp, #72]	; 0x48
   156c4:	b	14420 <__assert_fail@plt+0x34f0>
   156c8:	ldr	r3, [sp, #168]	; 0xa8
   156cc:	str	r3, [sp, #16]
   156d0:	ldr	r3, [sp, #164]	; 0xa4
   156d4:	str	r3, [sp, #12]
   156d8:	ldr	r3, [sp, #160]	; 0xa0
   156dc:	str	r3, [sp, #8]
   156e0:	ldr	r3, [sp, #156]	; 0x9c
   156e4:	str	r3, [sp, #4]
   156e8:	mov	r3, #5
   156ec:	str	r3, [sp]
   156f0:	ldr	r3, [sp, #24]
   156f4:	ldr	r2, [sp, #48]	; 0x30
   156f8:	ldr	r1, [sp, #72]	; 0x48
   156fc:	ldr	r0, [sp, #64]	; 0x40
   15700:	bl	143a8 <__assert_fail@plt+0x3478>
   15704:	mov	fp, r0
   15708:	b	15828 <__assert_fail@plt+0x48f8>
   1570c:	mov	r8, r9
   15710:	mov	r2, r3
   15714:	b	1571c <__assert_fail@plt+0x47ec>
   15718:	mov	r8, r9
   1571c:	ldr	r3, [sp, #60]	; 0x3c
   15720:	cmp	r3, #0
   15724:	moveq	r2, #0
   15728:	andne	r2, r2, #1
   1572c:	cmp	r2, #0
   15730:	beq	15760 <__assert_fail@plt+0x4830>
   15734:	mov	r2, r3
   15738:	ldrb	r3, [r3]
   1573c:	cmp	r3, #0
   15740:	beq	15760 <__assert_fail@plt+0x4830>
   15744:	ldr	r1, [sp, #64]	; 0x40
   15748:	cmp	r8, fp
   1574c:	strbhi	r3, [r1, fp]
   15750:	add	fp, fp, #1
   15754:	ldrb	r3, [r2, #1]!
   15758:	cmp	r3, #0
   1575c:	bne	15748 <__assert_fail@plt+0x4818>
   15760:	cmp	r8, fp
   15764:	bls	15828 <__assert_fail@plt+0x48f8>
   15768:	mov	r3, #0
   1576c:	ldr	r2, [sp, #64]	; 0x40
   15770:	strb	r3, [r2, fp]
   15774:	b	15828 <__assert_fail@plt+0x48f8>
   15778:	mov	r8, r9
   1577c:	mov	r7, sl
   15780:	ldr	r3, [sp, #32]
   15784:	str	r3, [sp, #28]
   15788:	b	157d0 <__assert_fail@plt+0x48a0>
   1578c:	mov	r8, r9
   15790:	mov	r7, #2
   15794:	b	157d0 <__assert_fail@plt+0x48a0>
   15798:	mov	r8, r9
   1579c:	mov	r7, sl
   157a0:	b	157d0 <__assert_fail@plt+0x48a0>
   157a4:	mov	r8, r9
   157a8:	mov	r7, sl
   157ac:	b	157d0 <__assert_fail@plt+0x48a0>
   157b0:	mov	r8, r9
   157b4:	mov	r7, sl
   157b8:	b	157d0 <__assert_fail@plt+0x48a0>
   157bc:	mov	r8, r9
   157c0:	mov	r7, sl
   157c4:	b	157d0 <__assert_fail@plt+0x48a0>
   157c8:	mov	r8, r9
   157cc:	mov	r7, sl
   157d0:	ldr	r3, [sp, #28]
   157d4:	cmp	r7, #2
   157d8:	movne	r3, #0
   157dc:	andeq	r3, r3, #1
   157e0:	cmp	r3, #0
   157e4:	movne	r7, #4
   157e8:	ldr	r3, [sp, #168]	; 0xa8
   157ec:	str	r3, [sp, #16]
   157f0:	ldr	r3, [sp, #164]	; 0xa4
   157f4:	str	r3, [sp, #12]
   157f8:	mov	r3, #0
   157fc:	str	r3, [sp, #8]
   15800:	ldr	r3, [sp, #156]	; 0x9c
   15804:	bic	r3, r3, #2
   15808:	str	r3, [sp, #4]
   1580c:	str	r7, [sp]
   15810:	ldr	r3, [sp, #24]
   15814:	ldr	r2, [sp, #48]	; 0x30
   15818:	mov	r1, r8
   1581c:	ldr	r0, [sp, #64]	; 0x40
   15820:	bl	143a8 <__assert_fail@plt+0x3478>
   15824:	mov	fp, r0
   15828:	mov	r0, fp
   1582c:	add	sp, sp, #116	; 0x74
   15830:	ldrd	r4, [sp]
   15834:	ldrd	r6, [sp, #8]
   15838:	ldrd	r8, [sp, #16]
   1583c:	ldrd	sl, [sp, #24]
   15840:	add	sp, sp, #32
   15844:	pop	{pc}		; (ldr pc, [sp], #4)
   15848:	mov	r8, r9
   1584c:	mov	r7, sl
   15850:	b	157e8 <__assert_fail@plt+0x48b8>
   15854:	add	fp, fp, #4
   15858:	str	r3, [sp, #36]	; 0x24
   1585c:	mov	r5, #0
   15860:	mov	r4, #48	; 0x30
   15864:	b	14c1c <__assert_fail@plt+0x3cec>
   15868:	mov	r3, #1
   1586c:	str	r3, [sp, #32]
   15870:	str	r3, [sp, #28]
   15874:	str	r3, [sp, #52]	; 0x34
   15878:	movw	r3, #35652	; 0x8b44
   1587c:	movt	r3, #1
   15880:	str	r3, [sp, #60]	; 0x3c
   15884:	mov	fp, #0
   15888:	mov	sl, #5
   1588c:	b	14480 <__assert_fail@plt+0x3550>
   15890:	ldr	r3, [sp, #48]	; 0x30
   15894:	ldrb	r4, [r3, r6]
   15898:	cmp	r4, #126	; 0x7e
   1589c:	ldrls	pc, [pc, r4, lsl #2]
   158a0:	b	1518c <__assert_fail@plt+0x425c>
   158a4:	andeq	r4, r1, r4, lsl r9
   158a8:	andeq	r5, r1, ip, lsl #3
   158ac:	andeq	r5, r1, ip, lsl #3
   158b0:	andeq	r5, r1, ip, lsl #3
   158b4:	andeq	r5, r1, ip, lsl #3
   158b8:	andeq	r5, r1, ip, lsl #3
   158bc:	andeq	r5, r1, ip, lsl #3
   158c0:	andeq	r5, r1, ip, lsl r6
   158c4:			; <UNDEFINED> instruction: 0x00014bb8
   158c8:	andeq	r4, r1, ip, asr pc
   158cc:	andeq	r5, r1, r8, lsl r0
   158d0:	andeq	r4, r1, r0, ror pc
   158d4:	andeq	r4, r1, ip, asr #23
   158d8:	andeq	r4, r1, r0, ror #23
   158dc:	andeq	r5, r1, ip, lsl #3
   158e0:	andeq	r5, r1, ip, lsl #3
   158e4:	andeq	r5, r1, ip, lsl #3
   158e8:	andeq	r5, r1, ip, lsl #3
   158ec:	andeq	r5, r1, ip, lsl #3
   158f0:	andeq	r5, r1, ip, lsl #3
   158f4:	andeq	r5, r1, ip, lsl #3
   158f8:	andeq	r5, r1, ip, lsl #3
   158fc:	andeq	r5, r1, ip, lsl #3
   15900:	andeq	r5, r1, ip, lsl #3
   15904:	andeq	r5, r1, ip, lsl #3
   15908:	andeq	r5, r1, ip, lsl #3
   1590c:	andeq	r5, r1, ip, lsl #3
   15910:	andeq	r5, r1, ip, lsl #3
   15914:	andeq	r5, r1, ip, lsl #3
   15918:	andeq	r5, r1, ip, lsl #3
   1591c:	andeq	r5, r1, ip, lsl #3
   15920:	andeq	r5, r1, ip, lsl #3
   15924:	andeq	r5, r1, r0, lsr #1
   15928:	ldrdeq	r5, [r1], -ip
   1592c:	ldrdeq	r5, [r1], -ip
   15930:	muleq	r1, r4, r0
   15934:	ldrdeq	r5, [r1], -ip
   15938:	andeq	r5, r1, r0, lsl #12
   1593c:	ldrdeq	r5, [r1], -ip
   15940:	andeq	r5, r1, ip, ror #1
   15944:	ldrdeq	r5, [r1], -ip
   15948:	ldrdeq	r5, [r1], -ip
   1594c:	ldrdeq	r5, [r1], -ip
   15950:	andeq	r5, r1, r0, lsl #12
   15954:	andeq	r5, r1, r0, lsl #12
   15958:	andeq	r5, r1, r0, lsl #12
   1595c:	andeq	r5, r1, r0, lsl #12
   15960:	andeq	r5, r1, r0, lsl #12
   15964:	andeq	r5, r1, r0, lsl #12
   15968:	andeq	r5, r1, r0, lsl #12
   1596c:	andeq	r5, r1, r0, lsl #12
   15970:	andeq	r5, r1, r0, lsl #12
   15974:	andeq	r5, r1, r0, lsl #12
   15978:	andeq	r5, r1, r0, lsl #12
   1597c:	andeq	r5, r1, r0, lsl #12
   15980:	andeq	r5, r1, r0, lsl #12
   15984:	andeq	r5, r1, r0, lsl #12
   15988:	andeq	r5, r1, r0, lsl #12
   1598c:	andeq	r5, r1, r0, lsl #12
   15990:	ldrdeq	r5, [r1], -ip
   15994:	ldrdeq	r5, [r1], -ip
   15998:	ldrdeq	r5, [r1], -ip
   1599c:	ldrdeq	r5, [r1], -ip
   159a0:	andeq	r4, r1, ip, asr #20
   159a4:	andeq	r5, r1, ip, lsl #3
   159a8:	andeq	r5, r1, r0, lsl #12
   159ac:	andeq	r5, r1, r0, lsl #12
   159b0:	andeq	r5, r1, r0, lsl #12
   159b4:	andeq	r5, r1, r0, lsl #12
   159b8:	andeq	r5, r1, r0, lsl #12
   159bc:	andeq	r5, r1, r0, lsl #12
   159c0:	andeq	r5, r1, r0, lsl #12
   159c4:	andeq	r5, r1, r0, lsl #12
   159c8:	andeq	r5, r1, r0, lsl #12
   159cc:	andeq	r5, r1, r0, lsl #12
   159d0:	andeq	r5, r1, r0, lsl #12
   159d4:	andeq	r5, r1, r0, lsl #12
   159d8:	andeq	r5, r1, r0, lsl #12
   159dc:	andeq	r5, r1, r0, lsl #12
   159e0:	andeq	r5, r1, r0, lsl #12
   159e4:	andeq	r5, r1, r0, lsl #12
   159e8:	andeq	r5, r1, r0, lsl #12
   159ec:	andeq	r5, r1, r0, lsl #12
   159f0:	andeq	r5, r1, r0, lsl #12
   159f4:	andeq	r5, r1, r0, lsl #12
   159f8:	andeq	r5, r1, r0, lsl #12
   159fc:	andeq	r5, r1, r0, lsl #12
   15a00:	andeq	r5, r1, r0, lsl #12
   15a04:	andeq	r5, r1, r0, lsl #12
   15a08:	andeq	r5, r1, r0, lsl #12
   15a0c:	andeq	r5, r1, r0, lsl #12
   15a10:	ldrdeq	r5, [r1], -ip
   15a14:	andeq	r4, r1, r4, lsl #31
   15a18:	andeq	r5, r1, r0, lsl #12
   15a1c:	ldrdeq	r5, [r1], -ip
   15a20:	andeq	r5, r1, r0, lsl #12
   15a24:	ldrdeq	r5, [r1], -ip
   15a28:	andeq	r5, r1, r0, lsl #12
   15a2c:	andeq	r5, r1, r0, lsl #12
   15a30:	andeq	r5, r1, r0, lsl #12
   15a34:	andeq	r5, r1, r0, lsl #12
   15a38:	andeq	r5, r1, r0, lsl #12
   15a3c:	andeq	r5, r1, r0, lsl #12
   15a40:	andeq	r5, r1, r0, lsl #12
   15a44:	andeq	r5, r1, r0, lsl #12
   15a48:	andeq	r5, r1, r0, lsl #12
   15a4c:	andeq	r5, r1, r0, lsl #12
   15a50:	andeq	r5, r1, r0, lsl #12
   15a54:	andeq	r5, r1, r0, lsl #12
   15a58:	andeq	r5, r1, r0, lsl #12
   15a5c:	andeq	r5, r1, r0, lsl #12
   15a60:	andeq	r5, r1, r0, lsl #12
   15a64:	andeq	r5, r1, r0, lsl #12
   15a68:	andeq	r5, r1, r0, lsl #12
   15a6c:	andeq	r5, r1, r0, lsl #12
   15a70:	andeq	r5, r1, r0, lsl #12
   15a74:	andeq	r5, r1, r0, lsl #12
   15a78:	andeq	r5, r1, r0, lsl #12
   15a7c:	andeq	r5, r1, r0, lsl #12
   15a80:	andeq	r5, r1, r0, lsl #12
   15a84:	andeq	r5, r1, r0, lsl #12
   15a88:	andeq	r5, r1, r0, lsl #12
   15a8c:	andeq	r5, r1, r0, lsl #12
   15a90:	andeq	r5, r1, r4, asr #32
   15a94:	ldrdeq	r5, [r1], -ip
   15a98:	andeq	r5, r1, r4, asr #32
   15a9c:	muleq	r1, r4, r0
   15aa0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15aa4:	strd	r6, [sp, #8]
   15aa8:	strd	r8, [sp, #16]
   15aac:	strd	sl, [sp, #24]
   15ab0:	str	lr, [sp, #32]
   15ab4:	sub	sp, sp, #52	; 0x34
   15ab8:	mov	r5, r0
   15abc:	str	r1, [sp, #24]
   15ac0:	str	r2, [sp, #28]
   15ac4:	mov	r4, r3
   15ac8:	bl	10e4c <__errno_location@plt>
   15acc:	str	r0, [sp, #32]
   15ad0:	ldr	r3, [r0]
   15ad4:	str	r3, [sp, #36]	; 0x24
   15ad8:	movw	r3, #41204	; 0xa0f4
   15adc:	movt	r3, #2
   15ae0:	ldr	r6, [r3]
   15ae4:	cmn	r5, #-2147483647	; 0x80000001
   15ae8:	movne	r3, #0
   15aec:	moveq	r3, #1
   15af0:	orrs	r3, r3, r5, lsr #31
   15af4:	bne	15c58 <__assert_fail@plt+0x4d28>
   15af8:	movw	r3, #41204	; 0xa0f4
   15afc:	movt	r3, #2
   15b00:	ldr	r2, [r3, #4]
   15b04:	cmp	r2, r5
   15b08:	bgt	15b78 <__assert_fail@plt+0x4c48>
   15b0c:	str	r2, [sp, #44]	; 0x2c
   15b10:	add	r3, r3, #8
   15b14:	cmp	r6, r3
   15b18:	beq	15c5c <__assert_fail@plt+0x4d2c>
   15b1c:	sub	r2, r5, r2
   15b20:	mov	r3, #8
   15b24:	str	r3, [sp]
   15b28:	mvn	r3, #-2147483648	; 0x80000000
   15b2c:	add	r2, r2, #1
   15b30:	add	r1, sp, #44	; 0x2c
   15b34:	mov	r0, r6
   15b38:	bl	16c60 <__assert_fail@plt+0x5d30>
   15b3c:	mov	r6, r0
   15b40:	movw	r3, #41204	; 0xa0f4
   15b44:	movt	r3, #2
   15b48:	str	r0, [r3]
   15b4c:	movw	r7, #41204	; 0xa0f4
   15b50:	movt	r7, #2
   15b54:	ldr	r0, [r7, #4]
   15b58:	ldr	r2, [sp, #44]	; 0x2c
   15b5c:	sub	r2, r2, r0
   15b60:	lsl	r2, r2, #3
   15b64:	mov	r1, #0
   15b68:	add	r0, r6, r0, lsl #3
   15b6c:	bl	10e64 <memset@plt>
   15b70:	ldr	r3, [sp, #44]	; 0x2c
   15b74:	str	r3, [r7, #4]
   15b78:	add	fp, r6, r5, lsl #3
   15b7c:	ldr	r8, [r6, r5, lsl #3]
   15b80:	ldr	r7, [fp, #4]
   15b84:	ldr	r3, [r4, #4]
   15b88:	orr	r9, r3, #1
   15b8c:	add	sl, r4, #8
   15b90:	ldr	r3, [r4, #44]	; 0x2c
   15b94:	str	r3, [sp, #16]
   15b98:	ldr	r3, [r4, #40]	; 0x28
   15b9c:	str	r3, [sp, #12]
   15ba0:	str	sl, [sp, #8]
   15ba4:	str	r9, [sp, #4]
   15ba8:	ldr	r3, [r4]
   15bac:	str	r3, [sp]
   15bb0:	ldr	r3, [sp, #28]
   15bb4:	ldr	r2, [sp, #24]
   15bb8:	mov	r1, r8
   15bbc:	mov	r0, r7
   15bc0:	bl	143a8 <__assert_fail@plt+0x3478>
   15bc4:	cmp	r8, r0
   15bc8:	bhi	15c2c <__assert_fail@plt+0x4cfc>
   15bcc:	add	r8, r0, #1
   15bd0:	str	r8, [r6, r5, lsl #3]
   15bd4:	movw	r3, #41344	; 0xa180
   15bd8:	movt	r3, #2
   15bdc:	cmp	r7, r3
   15be0:	beq	15bec <__assert_fail@plt+0x4cbc>
   15be4:	mov	r0, r7
   15be8:	bl	14024 <__assert_fail@plt+0x30f4>
   15bec:	mov	r0, r8
   15bf0:	bl	16a5c <__assert_fail@plt+0x5b2c>
   15bf4:	mov	r7, r0
   15bf8:	str	r0, [fp, #4]
   15bfc:	ldr	r3, [r4, #44]	; 0x2c
   15c00:	str	r3, [sp, #16]
   15c04:	ldr	r3, [r4, #40]	; 0x28
   15c08:	str	r3, [sp, #12]
   15c0c:	str	sl, [sp, #8]
   15c10:	str	r9, [sp, #4]
   15c14:	ldr	r3, [r4]
   15c18:	str	r3, [sp]
   15c1c:	ldr	r3, [sp, #28]
   15c20:	ldr	r2, [sp, #24]
   15c24:	mov	r1, r8
   15c28:	bl	143a8 <__assert_fail@plt+0x3478>
   15c2c:	ldr	r3, [sp, #32]
   15c30:	ldr	r2, [sp, #36]	; 0x24
   15c34:	str	r2, [r3]
   15c38:	mov	r0, r7
   15c3c:	add	sp, sp, #52	; 0x34
   15c40:	ldrd	r4, [sp]
   15c44:	ldrd	r6, [sp, #8]
   15c48:	ldrd	r8, [sp, #16]
   15c4c:	ldrd	sl, [sp, #24]
   15c50:	add	sp, sp, #32
   15c54:	pop	{pc}		; (ldr pc, [sp], #4)
   15c58:	bl	10f24 <abort@plt>
   15c5c:	sub	r2, r5, r2
   15c60:	mov	r3, #8
   15c64:	str	r3, [sp]
   15c68:	mvn	r3, #-2147483648	; 0x80000000
   15c6c:	add	r2, r2, #1
   15c70:	add	r1, sp, #44	; 0x2c
   15c74:	mov	r0, #0
   15c78:	bl	16c60 <__assert_fail@plt+0x5d30>
   15c7c:	mov	r6, r0
   15c80:	movw	r3, #41204	; 0xa0f4
   15c84:	movt	r3, #2
   15c88:	str	r0, [r3]
   15c8c:	ldrd	r2, [r3, #8]
   15c90:	strd	r2, [r0]
   15c94:	b	15b4c <__assert_fail@plt+0x4c1c>
   15c98:	strd	r4, [sp, #-16]!
   15c9c:	str	r6, [sp, #8]
   15ca0:	str	lr, [sp, #12]
   15ca4:	mov	r4, r0
   15ca8:	bl	10e4c <__errno_location@plt>
   15cac:	mov	r5, r0
   15cb0:	ldr	r6, [r0]
   15cb4:	cmp	r4, #0
   15cb8:	ldr	r3, [pc, #32]	; 15ce0 <__assert_fail@plt+0x4db0>
   15cbc:	moveq	r4, r3
   15cc0:	mov	r1, #48	; 0x30
   15cc4:	mov	r0, r4
   15cc8:	bl	16dd0 <__assert_fail@plt+0x5ea0>
   15ccc:	str	r6, [r5]
   15cd0:	ldrd	r4, [sp]
   15cd4:	ldr	r6, [sp, #8]
   15cd8:	add	sp, sp, #12
   15cdc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ce0:	andeq	sl, r2, r0, lsl #5
   15ce4:	subs	r3, r0, #0
   15ce8:	ldr	r2, [pc, #8]	; 15cf8 <__assert_fail@plt+0x4dc8>
   15cec:	moveq	r3, r2
   15cf0:	ldr	r0, [r3]
   15cf4:	bx	lr
   15cf8:	andeq	sl, r2, r0, lsl #5
   15cfc:	subs	r3, r0, #0
   15d00:	ldr	r2, [pc, #8]	; 15d10 <__assert_fail@plt+0x4de0>
   15d04:	moveq	r3, r2
   15d08:	str	r1, [r3]
   15d0c:	bx	lr
   15d10:	andeq	sl, r2, r0, lsl #5
   15d14:	push	{lr}		; (str lr, [sp, #-4]!)
   15d18:	subs	r3, r0, #0
   15d1c:	ldr	r0, [pc, #44]	; 15d50 <__assert_fail@plt+0x4e20>
   15d20:	moveq	r3, r0
   15d24:	add	r3, r3, #8
   15d28:	lsr	lr, r1, #5
   15d2c:	and	r1, r1, #31
   15d30:	ldr	ip, [r3, lr, lsl #2]
   15d34:	lsr	r0, ip, r1
   15d38:	eor	r2, r2, r0
   15d3c:	and	r2, r2, #1
   15d40:	eor	r1, ip, r2, lsl r1
   15d44:	str	r1, [r3, lr, lsl #2]
   15d48:	and	r0, r0, #1
   15d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d50:	andeq	sl, r2, r0, lsl #5
   15d54:	subs	r3, r0, #0
   15d58:	ldr	r2, [pc, #12]	; 15d6c <__assert_fail@plt+0x4e3c>
   15d5c:	moveq	r3, r2
   15d60:	ldr	r0, [r3, #4]
   15d64:	str	r1, [r3, #4]
   15d68:	bx	lr
   15d6c:	andeq	sl, r2, r0, lsl #5
   15d70:	subs	r3, r0, #0
   15d74:	ldr	r0, [pc, #44]	; 15da8 <__assert_fail@plt+0x4e78>
   15d78:	moveq	r3, r0
   15d7c:	mov	r0, #10
   15d80:	str	r0, [r3]
   15d84:	cmp	r2, #0
   15d88:	cmpne	r1, #0
   15d8c:	beq	15d9c <__assert_fail@plt+0x4e6c>
   15d90:	str	r1, [r3, #40]	; 0x28
   15d94:	str	r2, [r3, #44]	; 0x2c
   15d98:	bx	lr
   15d9c:	str	r4, [sp, #-8]!
   15da0:	str	lr, [sp, #4]
   15da4:	bl	10f24 <abort@plt>
   15da8:	andeq	sl, r2, r0, lsl #5
   15dac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15db0:	strd	r6, [sp, #8]
   15db4:	strd	r8, [sp, #16]
   15db8:	str	sl, [sp, #24]
   15dbc:	str	lr, [sp, #28]
   15dc0:	sub	sp, sp, #24
   15dc4:	mov	r7, r0
   15dc8:	mov	r8, r1
   15dcc:	mov	r9, r2
   15dd0:	mov	sl, r3
   15dd4:	ldr	r4, [sp, #56]	; 0x38
   15dd8:	cmp	r4, #0
   15ddc:	ldr	r3, [pc, #104]	; 15e4c <__assert_fail@plt+0x4f1c>
   15de0:	moveq	r4, r3
   15de4:	bl	10e4c <__errno_location@plt>
   15de8:	mov	r5, r0
   15dec:	ldr	r6, [r0]
   15df0:	ldr	r3, [r4, #44]	; 0x2c
   15df4:	str	r3, [sp, #16]
   15df8:	ldr	r3, [r4, #40]	; 0x28
   15dfc:	str	r3, [sp, #12]
   15e00:	add	r3, r4, #8
   15e04:	str	r3, [sp, #8]
   15e08:	ldr	r3, [r4, #4]
   15e0c:	str	r3, [sp, #4]
   15e10:	ldr	r3, [r4]
   15e14:	str	r3, [sp]
   15e18:	mov	r3, sl
   15e1c:	mov	r2, r9
   15e20:	mov	r1, r8
   15e24:	mov	r0, r7
   15e28:	bl	143a8 <__assert_fail@plt+0x3478>
   15e2c:	str	r6, [r5]
   15e30:	add	sp, sp, #24
   15e34:	ldrd	r4, [sp]
   15e38:	ldrd	r6, [sp, #8]
   15e3c:	ldrd	r8, [sp, #16]
   15e40:	ldr	sl, [sp, #24]
   15e44:	add	sp, sp, #28
   15e48:	pop	{pc}		; (ldr pc, [sp], #4)
   15e4c:	andeq	sl, r2, r0, lsl #5
   15e50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15e54:	strd	r6, [sp, #8]
   15e58:	strd	r8, [sp, #16]
   15e5c:	strd	sl, [sp, #24]
   15e60:	str	lr, [sp, #32]
   15e64:	sub	sp, sp, #44	; 0x2c
   15e68:	mov	r8, r0
   15e6c:	mov	sl, r1
   15e70:	mov	r6, r2
   15e74:	subs	r4, r3, #0
   15e78:	ldr	r3, [pc, #200]	; 15f48 <__assert_fail@plt+0x5018>
   15e7c:	moveq	r4, r3
   15e80:	bl	10e4c <__errno_location@plt>
   15e84:	mov	r7, r0
   15e88:	ldr	fp, [r0]
   15e8c:	ldr	r5, [r4, #4]
   15e90:	cmp	r6, #0
   15e94:	orreq	r5, r5, #1
   15e98:	add	r9, r4, #8
   15e9c:	ldr	r3, [r4, #44]	; 0x2c
   15ea0:	str	r3, [sp, #16]
   15ea4:	ldr	r3, [r4, #40]	; 0x28
   15ea8:	str	r3, [sp, #12]
   15eac:	str	r9, [sp, #8]
   15eb0:	str	r5, [sp, #4]
   15eb4:	ldr	r3, [r4]
   15eb8:	str	r3, [sp]
   15ebc:	str	sl, [sp, #36]	; 0x24
   15ec0:	mov	r3, sl
   15ec4:	str	r8, [sp, #32]
   15ec8:	mov	r2, r8
   15ecc:	mov	r1, #0
   15ed0:	mov	r0, r1
   15ed4:	bl	143a8 <__assert_fail@plt+0x3478>
   15ed8:	mov	sl, r0
   15edc:	add	r8, r0, #1
   15ee0:	mov	r0, r8
   15ee4:	bl	16a5c <__assert_fail@plt+0x5b2c>
   15ee8:	str	r0, [sp, #28]
   15eec:	ldr	r3, [r4, #44]	; 0x2c
   15ef0:	str	r3, [sp, #16]
   15ef4:	ldr	r3, [r4, #40]	; 0x28
   15ef8:	str	r3, [sp, #12]
   15efc:	str	r9, [sp, #8]
   15f00:	str	r5, [sp, #4]
   15f04:	ldr	r3, [r4]
   15f08:	str	r3, [sp]
   15f0c:	ldr	r3, [sp, #36]	; 0x24
   15f10:	ldr	r2, [sp, #32]
   15f14:	mov	r1, r8
   15f18:	bl	143a8 <__assert_fail@plt+0x3478>
   15f1c:	str	fp, [r7]
   15f20:	cmp	r6, #0
   15f24:	strne	sl, [r6]
   15f28:	ldr	r0, [sp, #28]
   15f2c:	add	sp, sp, #44	; 0x2c
   15f30:	ldrd	r4, [sp]
   15f34:	ldrd	r6, [sp, #8]
   15f38:	ldrd	r8, [sp, #16]
   15f3c:	ldrd	sl, [sp, #24]
   15f40:	add	sp, sp, #32
   15f44:	pop	{pc}		; (ldr pc, [sp], #4)
   15f48:	andeq	sl, r2, r0, lsl #5
   15f4c:	str	r4, [sp, #-8]!
   15f50:	str	lr, [sp, #4]
   15f54:	mov	r3, r2
   15f58:	mov	r2, #0
   15f5c:	bl	15e50 <__assert_fail@plt+0x4f20>
   15f60:	ldr	r4, [sp]
   15f64:	add	sp, sp, #4
   15f68:	pop	{pc}		; (ldr pc, [sp], #4)
   15f6c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f70:	strd	r6, [sp, #8]
   15f74:	str	r8, [sp, #16]
   15f78:	str	lr, [sp, #20]
   15f7c:	movw	r3, #41204	; 0xa0f4
   15f80:	movt	r3, #2
   15f84:	ldr	r7, [r3]
   15f88:	ldr	r3, [r3, #4]
   15f8c:	cmp	r3, #1
   15f90:	ble	15fbc <__assert_fail@plt+0x508c>
   15f94:	mov	r4, #1
   15f98:	add	r6, r7, #4
   15f9c:	movw	r5, #41204	; 0xa0f4
   15fa0:	movt	r5, #2
   15fa4:	ldr	r0, [r6, r4, lsl #3]
   15fa8:	bl	14024 <__assert_fail@plt+0x30f4>
   15fac:	add	r4, r4, #1
   15fb0:	ldr	r3, [r5, #4]
   15fb4:	cmp	r3, r4
   15fb8:	bgt	15fa4 <__assert_fail@plt+0x5074>
   15fbc:	ldr	r0, [r7, #4]
   15fc0:	movw	r3, #41344	; 0xa180
   15fc4:	movt	r3, #2
   15fc8:	cmp	r0, r3
   15fcc:	beq	15ff0 <__assert_fail@plt+0x50c0>
   15fd0:	bl	14024 <__assert_fail@plt+0x30f4>
   15fd4:	movw	r3, #41204	; 0xa0f4
   15fd8:	movt	r3, #2
   15fdc:	mov	r2, #256	; 0x100
   15fe0:	str	r2, [r3, #8]
   15fe4:	movw	r2, #41344	; 0xa180
   15fe8:	movt	r2, #2
   15fec:	str	r2, [r3, #12]
   15ff0:	ldr	r3, [pc, #64]	; 16038 <__assert_fail@plt+0x5108>
   15ff4:	cmp	r7, r3
   15ff8:	beq	16014 <__assert_fail@plt+0x50e4>
   15ffc:	mov	r0, r7
   16000:	bl	14024 <__assert_fail@plt+0x30f4>
   16004:	movw	r3, #41204	; 0xa0f4
   16008:	movt	r3, #2
   1600c:	add	r2, r3, #8
   16010:	str	r2, [r3]
   16014:	movw	r3, #41204	; 0xa0f4
   16018:	movt	r3, #2
   1601c:	mov	r2, #1
   16020:	str	r2, [r3, #4]
   16024:	ldrd	r4, [sp]
   16028:	ldrd	r6, [sp, #8]
   1602c:	ldr	r8, [sp, #16]
   16030:	add	sp, sp, #20
   16034:	pop	{pc}		; (ldr pc, [sp], #4)
   16038:	strdeq	sl, [r2], -ip
   1603c:	str	r4, [sp, #-8]!
   16040:	str	lr, [sp, #4]
   16044:	ldr	r3, [pc, #16]	; 1605c <__assert_fail@plt+0x512c>
   16048:	mvn	r2, #0
   1604c:	bl	15aa0 <__assert_fail@plt+0x4b70>
   16050:	ldr	r4, [sp]
   16054:	add	sp, sp, #4
   16058:	pop	{pc}		; (ldr pc, [sp], #4)
   1605c:	andeq	sl, r2, r0, lsl #5
   16060:	str	r4, [sp, #-8]!
   16064:	str	lr, [sp, #4]
   16068:	ldr	r3, [pc, #12]	; 1607c <__assert_fail@plt+0x514c>
   1606c:	bl	15aa0 <__assert_fail@plt+0x4b70>
   16070:	ldr	r4, [sp]
   16074:	add	sp, sp, #4
   16078:	pop	{pc}		; (ldr pc, [sp], #4)
   1607c:	andeq	sl, r2, r0, lsl #5
   16080:	str	r4, [sp, #-8]!
   16084:	str	lr, [sp, #4]
   16088:	mov	r1, r0
   1608c:	mov	r0, #0
   16090:	bl	1603c <__assert_fail@plt+0x510c>
   16094:	ldr	r4, [sp]
   16098:	add	sp, sp, #4
   1609c:	pop	{pc}		; (ldr pc, [sp], #4)
   160a0:	str	r4, [sp, #-8]!
   160a4:	str	lr, [sp, #4]
   160a8:	mov	r2, r1
   160ac:	mov	r1, r0
   160b0:	mov	r0, #0
   160b4:	bl	16060 <__assert_fail@plt+0x5130>
   160b8:	ldr	r4, [sp]
   160bc:	add	sp, sp, #4
   160c0:	pop	{pc}		; (ldr pc, [sp], #4)
   160c4:	strd	r4, [sp, #-12]!
   160c8:	str	lr, [sp, #8]
   160cc:	sub	sp, sp, #52	; 0x34
   160d0:	mov	r4, r0
   160d4:	mov	r5, r2
   160d8:	mov	r0, sp
   160dc:	bl	14214 <__assert_fail@plt+0x32e4>
   160e0:	mov	r3, sp
   160e4:	mvn	r2, #0
   160e8:	mov	r1, r5
   160ec:	mov	r0, r4
   160f0:	bl	15aa0 <__assert_fail@plt+0x4b70>
   160f4:	add	sp, sp, #52	; 0x34
   160f8:	ldrd	r4, [sp]
   160fc:	add	sp, sp, #8
   16100:	pop	{pc}		; (ldr pc, [sp], #4)
   16104:	strd	r4, [sp, #-16]!
   16108:	str	r6, [sp, #8]
   1610c:	str	lr, [sp, #12]
   16110:	sub	sp, sp, #48	; 0x30
   16114:	mov	r4, r0
   16118:	mov	r5, r2
   1611c:	mov	r6, r3
   16120:	mov	r0, sp
   16124:	bl	14214 <__assert_fail@plt+0x32e4>
   16128:	mov	r3, sp
   1612c:	mov	r2, r6
   16130:	mov	r1, r5
   16134:	mov	r0, r4
   16138:	bl	15aa0 <__assert_fail@plt+0x4b70>
   1613c:	add	sp, sp, #48	; 0x30
   16140:	ldrd	r4, [sp]
   16144:	ldr	r6, [sp, #8]
   16148:	add	sp, sp, #12
   1614c:	pop	{pc}		; (ldr pc, [sp], #4)
   16150:	str	r4, [sp, #-8]!
   16154:	str	lr, [sp, #4]
   16158:	mov	r2, r1
   1615c:	mov	r1, r0
   16160:	mov	r0, #0
   16164:	bl	160c4 <__assert_fail@plt+0x5194>
   16168:	ldr	r4, [sp]
   1616c:	add	sp, sp, #4
   16170:	pop	{pc}		; (ldr pc, [sp], #4)
   16174:	str	r4, [sp, #-8]!
   16178:	str	lr, [sp, #4]
   1617c:	mov	r3, r2
   16180:	mov	r2, r1
   16184:	mov	r1, r0
   16188:	mov	r0, #0
   1618c:	bl	16104 <__assert_fail@plt+0x51d4>
   16190:	ldr	r4, [sp]
   16194:	add	sp, sp, #4
   16198:	pop	{pc}		; (ldr pc, [sp], #4)
   1619c:	strd	r4, [sp, #-12]!
   161a0:	str	lr, [sp, #8]
   161a4:	sub	sp, sp, #52	; 0x34
   161a8:	mov	r4, r0
   161ac:	mov	r5, r1
   161b0:	mov	r1, r2
   161b4:	ldr	r0, [pc, #92]	; 16218 <__assert_fail@plt+0x52e8>
   161b8:	ldrd	r2, [r0]
   161bc:	strd	r2, [sp]
   161c0:	ldrd	r2, [r0, #8]
   161c4:	strd	r2, [sp, #8]
   161c8:	ldrd	r2, [r0, #16]
   161cc:	strd	r2, [sp, #16]
   161d0:	ldrd	r2, [r0, #24]
   161d4:	strd	r2, [sp, #24]
   161d8:	ldrd	r2, [r0, #32]
   161dc:	strd	r2, [sp, #32]
   161e0:	ldrd	r2, [r0, #40]	; 0x28
   161e4:	strd	r2, [sp, #40]	; 0x28
   161e8:	mov	r2, #1
   161ec:	mov	r0, sp
   161f0:	bl	15d14 <__assert_fail@plt+0x4de4>
   161f4:	mov	r3, sp
   161f8:	mov	r2, r5
   161fc:	mov	r1, r4
   16200:	mov	r0, #0
   16204:	bl	15aa0 <__assert_fail@plt+0x4b70>
   16208:	add	sp, sp, #52	; 0x34
   1620c:	ldrd	r4, [sp]
   16210:	add	sp, sp, #8
   16214:	pop	{pc}		; (ldr pc, [sp], #4)
   16218:	andeq	sl, r2, r0, lsl #5
   1621c:	str	r4, [sp, #-8]!
   16220:	str	lr, [sp, #4]
   16224:	mov	r2, r1
   16228:	mvn	r1, #0
   1622c:	bl	1619c <__assert_fail@plt+0x526c>
   16230:	ldr	r4, [sp]
   16234:	add	sp, sp, #4
   16238:	pop	{pc}		; (ldr pc, [sp], #4)
   1623c:	str	r4, [sp, #-8]!
   16240:	str	lr, [sp, #4]
   16244:	mov	r1, #58	; 0x3a
   16248:	bl	1621c <__assert_fail@plt+0x52ec>
   1624c:	ldr	r4, [sp]
   16250:	add	sp, sp, #4
   16254:	pop	{pc}		; (ldr pc, [sp], #4)
   16258:	str	r4, [sp, #-8]!
   1625c:	str	lr, [sp, #4]
   16260:	mov	r2, #58	; 0x3a
   16264:	bl	1619c <__assert_fail@plt+0x526c>
   16268:	ldr	r4, [sp]
   1626c:	add	sp, sp, #4
   16270:	pop	{pc}		; (ldr pc, [sp], #4)
   16274:	strd	r4, [sp, #-12]!
   16278:	str	lr, [sp, #8]
   1627c:	sub	sp, sp, #100	; 0x64
   16280:	mov	r4, r0
   16284:	mov	r5, r2
   16288:	mov	r0, sp
   1628c:	bl	14214 <__assert_fail@plt+0x32e4>
   16290:	ldrd	r2, [sp]
   16294:	strd	r2, [sp, #48]	; 0x30
   16298:	ldrd	r2, [sp, #8]
   1629c:	strd	r2, [sp, #56]	; 0x38
   162a0:	ldrd	r2, [sp, #16]
   162a4:	strd	r2, [sp, #64]	; 0x40
   162a8:	ldrd	r2, [sp, #24]
   162ac:	strd	r2, [sp, #72]	; 0x48
   162b0:	ldrd	r2, [sp, #32]
   162b4:	strd	r2, [sp, #80]	; 0x50
   162b8:	ldrd	r2, [sp, #40]	; 0x28
   162bc:	strd	r2, [sp, #88]	; 0x58
   162c0:	mov	r2, #1
   162c4:	mov	r1, #58	; 0x3a
   162c8:	add	r0, sp, #48	; 0x30
   162cc:	bl	15d14 <__assert_fail@plt+0x4de4>
   162d0:	add	r3, sp, #48	; 0x30
   162d4:	mvn	r2, #0
   162d8:	mov	r1, r5
   162dc:	mov	r0, r4
   162e0:	bl	15aa0 <__assert_fail@plt+0x4b70>
   162e4:	add	sp, sp, #100	; 0x64
   162e8:	ldrd	r4, [sp]
   162ec:	add	sp, sp, #8
   162f0:	pop	{pc}		; (ldr pc, [sp], #4)
   162f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   162f8:	strd	r6, [sp, #8]
   162fc:	str	lr, [sp, #16]
   16300:	sub	sp, sp, #52	; 0x34
   16304:	mov	r4, r0
   16308:	mov	r5, r3
   1630c:	ldr	r3, [pc, #92]	; 16370 <__assert_fail@plt+0x5440>
   16310:	ldrd	r6, [r3]
   16314:	strd	r6, [sp]
   16318:	ldrd	r6, [r3, #8]
   1631c:	strd	r6, [sp, #8]
   16320:	ldrd	r6, [r3, #16]
   16324:	strd	r6, [sp, #16]
   16328:	ldrd	r6, [r3, #24]
   1632c:	strd	r6, [sp, #24]
   16330:	ldrd	r6, [r3, #32]
   16334:	strd	r6, [sp, #32]
   16338:	ldrd	r6, [r3, #40]	; 0x28
   1633c:	strd	r6, [sp, #40]	; 0x28
   16340:	mov	r0, sp
   16344:	bl	15d70 <__assert_fail@plt+0x4e40>
   16348:	mov	r3, sp
   1634c:	ldr	r2, [sp, #72]	; 0x48
   16350:	mov	r1, r5
   16354:	mov	r0, r4
   16358:	bl	15aa0 <__assert_fail@plt+0x4b70>
   1635c:	add	sp, sp, #52	; 0x34
   16360:	ldrd	r4, [sp]
   16364:	ldrd	r6, [sp, #8]
   16368:	add	sp, sp, #16
   1636c:	pop	{pc}		; (ldr pc, [sp], #4)
   16370:	andeq	sl, r2, r0, lsl #5
   16374:	push	{lr}		; (str lr, [sp, #-4]!)
   16378:	sub	sp, sp, #12
   1637c:	mvn	ip, #0
   16380:	str	ip, [sp]
   16384:	bl	162f4 <__assert_fail@plt+0x53c4>
   16388:	add	sp, sp, #12
   1638c:	pop	{pc}		; (ldr pc, [sp], #4)
   16390:	str	r4, [sp, #-8]!
   16394:	str	lr, [sp, #4]
   16398:	mov	r3, r2
   1639c:	mov	r2, r1
   163a0:	mov	r1, r0
   163a4:	mov	r0, #0
   163a8:	bl	16374 <__assert_fail@plt+0x5444>
   163ac:	ldr	r4, [sp]
   163b0:	add	sp, sp, #4
   163b4:	pop	{pc}		; (ldr pc, [sp], #4)
   163b8:	push	{lr}		; (str lr, [sp, #-4]!)
   163bc:	sub	sp, sp, #12
   163c0:	str	r3, [sp]
   163c4:	mov	r3, r2
   163c8:	mov	r2, r1
   163cc:	mov	r1, r0
   163d0:	mov	r0, #0
   163d4:	bl	162f4 <__assert_fail@plt+0x53c4>
   163d8:	add	sp, sp, #12
   163dc:	pop	{pc}		; (ldr pc, [sp], #4)
   163e0:	str	r4, [sp, #-8]!
   163e4:	str	lr, [sp, #4]
   163e8:	ldr	r3, [pc, #12]	; 163fc <__assert_fail@plt+0x54cc>
   163ec:	bl	15aa0 <__assert_fail@plt+0x4b70>
   163f0:	ldr	r4, [sp]
   163f4:	add	sp, sp, #4
   163f8:	pop	{pc}		; (ldr pc, [sp], #4)
   163fc:	andeq	sl, r2, r4, lsl #2
   16400:	str	r4, [sp, #-8]!
   16404:	str	lr, [sp, #4]
   16408:	mov	r2, r1
   1640c:	mov	r1, r0
   16410:	mov	r0, #0
   16414:	bl	163e0 <__assert_fail@plt+0x54b0>
   16418:	ldr	r4, [sp]
   1641c:	add	sp, sp, #4
   16420:	pop	{pc}		; (ldr pc, [sp], #4)
   16424:	str	r4, [sp, #-8]!
   16428:	str	lr, [sp, #4]
   1642c:	mvn	r2, #0
   16430:	bl	163e0 <__assert_fail@plt+0x54b0>
   16434:	ldr	r4, [sp]
   16438:	add	sp, sp, #4
   1643c:	pop	{pc}		; (ldr pc, [sp], #4)
   16440:	str	r4, [sp, #-8]!
   16444:	str	lr, [sp, #4]
   16448:	mov	r1, r0
   1644c:	mov	r0, #0
   16450:	bl	16424 <__assert_fail@plt+0x54f4>
   16454:	ldr	r4, [sp]
   16458:	add	sp, sp, #4
   1645c:	pop	{pc}		; (ldr pc, [sp], #4)
   16460:	strd	r4, [sp, #-16]!
   16464:	str	r6, [sp, #8]
   16468:	str	lr, [sp, #12]
   1646c:	sub	sp, sp, #32
   16470:	mov	r4, r0
   16474:	ldr	r5, [sp, #48]	; 0x30
   16478:	ldr	r6, [sp, #52]	; 0x34
   1647c:	cmp	r1, #0
   16480:	beq	1654c <__assert_fail@plt+0x561c>
   16484:	str	r3, [sp, #4]
   16488:	str	r2, [sp]
   1648c:	mov	r3, r1
   16490:	movw	r2, #35780	; 0x8bc4
   16494:	movt	r2, #1
   16498:	mov	r1, #1
   1649c:	bl	10e88 <__fprintf_chk@plt>
   164a0:	mov	r2, #5
   164a4:	movw	r1, #35800	; 0x8bd8
   164a8:	movt	r1, #1
   164ac:	mov	r0, #0
   164b0:	bl	10d68 <dcgettext@plt>
   164b4:	movw	r3, #2022	; 0x7e6
   164b8:	str	r3, [sp]
   164bc:	mov	r3, r0
   164c0:	movw	r2, #36528	; 0x8eb0
   164c4:	movt	r2, #1
   164c8:	mov	r1, #1
   164cc:	mov	r0, r4
   164d0:	bl	10e88 <__fprintf_chk@plt>
   164d4:	mov	r1, r4
   164d8:	mov	r0, #10
   164dc:	bl	10d5c <fputc_unlocked@plt>
   164e0:	mov	r2, #5
   164e4:	movw	r1, #35804	; 0x8bdc
   164e8:	movt	r1, #1
   164ec:	mov	r0, #0
   164f0:	bl	10d68 <dcgettext@plt>
   164f4:	movw	r3, #35976	; 0x8c88
   164f8:	movt	r3, #1
   164fc:	mov	r2, r0
   16500:	mov	r1, #1
   16504:	mov	r0, r4
   16508:	bl	10e88 <__fprintf_chk@plt>
   1650c:	mov	r1, r4
   16510:	mov	r0, #10
   16514:	bl	10d5c <fputc_unlocked@plt>
   16518:	cmp	r6, #9
   1651c:	ldrls	pc, [pc, r6, lsl #2]
   16520:	b	16824 <__assert_fail@plt+0x58f4>
   16524:	muleq	r1, r0, r5
   16528:	andeq	r6, r1, r8, ror #10
   1652c:	andeq	r6, r1, r4, lsr #11
   16530:	ldrdeq	r6, [r1], -r8
   16534:	andeq	r6, r1, r4, lsl r6
   16538:	andeq	r6, r1, r8, asr r6
   1653c:	andeq	r6, r1, r4, lsr #13
   16540:	strdeq	r6, [r1], -r8
   16544:	andeq	r6, r1, r4, asr r7
   16548:			; <UNDEFINED> instruction: 0x000167b8
   1654c:	str	r3, [sp]
   16550:	mov	r3, r2
   16554:	movw	r2, #35792	; 0x8bd0
   16558:	movt	r2, #1
   1655c:	mov	r1, #1
   16560:	bl	10e88 <__fprintf_chk@plt>
   16564:	b	164a0 <__assert_fail@plt+0x5570>
   16568:	mov	r2, #5
   1656c:	movw	r1, #36012	; 0x8cac
   16570:	movt	r1, #1
   16574:	mov	r0, #0
   16578:	bl	10d68 <dcgettext@plt>
   1657c:	ldr	r3, [r5]
   16580:	mov	r2, r0
   16584:	mov	r1, #1
   16588:	mov	r0, r4
   1658c:	bl	10e88 <__fprintf_chk@plt>
   16590:	add	sp, sp, #32
   16594:	ldrd	r4, [sp]
   16598:	ldr	r6, [sp, #8]
   1659c:	add	sp, sp, #12
   165a0:	pop	{pc}		; (ldr pc, [sp], #4)
   165a4:	mov	r2, #5
   165a8:	movw	r1, #36028	; 0x8cbc
   165ac:	movt	r1, #1
   165b0:	mov	r0, #0
   165b4:	bl	10d68 <dcgettext@plt>
   165b8:	ldr	r3, [r5, #4]
   165bc:	str	r3, [sp]
   165c0:	ldr	r3, [r5]
   165c4:	mov	r2, r0
   165c8:	mov	r1, #1
   165cc:	mov	r0, r4
   165d0:	bl	10e88 <__fprintf_chk@plt>
   165d4:	b	16590 <__assert_fail@plt+0x5660>
   165d8:	mov	r2, #5
   165dc:	movw	r1, #36052	; 0x8cd4
   165e0:	movt	r1, #1
   165e4:	mov	r0, #0
   165e8:	bl	10d68 <dcgettext@plt>
   165ec:	ldr	r3, [r5, #8]
   165f0:	str	r3, [sp, #4]
   165f4:	ldr	r3, [r5, #4]
   165f8:	str	r3, [sp]
   165fc:	ldr	r3, [r5]
   16600:	mov	r2, r0
   16604:	mov	r1, #1
   16608:	mov	r0, r4
   1660c:	bl	10e88 <__fprintf_chk@plt>
   16610:	b	16590 <__assert_fail@plt+0x5660>
   16614:	mov	r2, #5
   16618:	movw	r1, #36080	; 0x8cf0
   1661c:	movt	r1, #1
   16620:	mov	r0, #0
   16624:	bl	10d68 <dcgettext@plt>
   16628:	ldr	r3, [r5, #12]
   1662c:	str	r3, [sp, #8]
   16630:	ldr	r3, [r5, #8]
   16634:	str	r3, [sp, #4]
   16638:	ldr	r3, [r5, #4]
   1663c:	str	r3, [sp]
   16640:	ldr	r3, [r5]
   16644:	mov	r2, r0
   16648:	mov	r1, #1
   1664c:	mov	r0, r4
   16650:	bl	10e88 <__fprintf_chk@plt>
   16654:	b	16590 <__assert_fail@plt+0x5660>
   16658:	mov	r2, #5
   1665c:	movw	r1, #36112	; 0x8d10
   16660:	movt	r1, #1
   16664:	mov	r0, #0
   16668:	bl	10d68 <dcgettext@plt>
   1666c:	ldr	r3, [r5, #16]
   16670:	str	r3, [sp, #12]
   16674:	ldr	r3, [r5, #12]
   16678:	str	r3, [sp, #8]
   1667c:	ldr	r3, [r5, #8]
   16680:	str	r3, [sp, #4]
   16684:	ldr	r3, [r5, #4]
   16688:	str	r3, [sp]
   1668c:	ldr	r3, [r5]
   16690:	mov	r2, r0
   16694:	mov	r1, #1
   16698:	mov	r0, r4
   1669c:	bl	10e88 <__fprintf_chk@plt>
   166a0:	b	16590 <__assert_fail@plt+0x5660>
   166a4:	mov	r2, #5
   166a8:	movw	r1, #36148	; 0x8d34
   166ac:	movt	r1, #1
   166b0:	mov	r0, #0
   166b4:	bl	10d68 <dcgettext@plt>
   166b8:	ldr	r3, [r5, #20]
   166bc:	str	r3, [sp, #16]
   166c0:	ldr	r3, [r5, #16]
   166c4:	str	r3, [sp, #12]
   166c8:	ldr	r3, [r5, #12]
   166cc:	str	r3, [sp, #8]
   166d0:	ldr	r3, [r5, #8]
   166d4:	str	r3, [sp, #4]
   166d8:	ldr	r3, [r5, #4]
   166dc:	str	r3, [sp]
   166e0:	ldr	r3, [r5]
   166e4:	mov	r2, r0
   166e8:	mov	r1, #1
   166ec:	mov	r0, r4
   166f0:	bl	10e88 <__fprintf_chk@plt>
   166f4:	b	16590 <__assert_fail@plt+0x5660>
   166f8:	mov	r2, #5
   166fc:	movw	r1, #36188	; 0x8d5c
   16700:	movt	r1, #1
   16704:	mov	r0, #0
   16708:	bl	10d68 <dcgettext@plt>
   1670c:	ldr	r3, [r5, #24]
   16710:	str	r3, [sp, #20]
   16714:	ldr	r3, [r5, #20]
   16718:	str	r3, [sp, #16]
   1671c:	ldr	r3, [r5, #16]
   16720:	str	r3, [sp, #12]
   16724:	ldr	r3, [r5, #12]
   16728:	str	r3, [sp, #8]
   1672c:	ldr	r3, [r5, #8]
   16730:	str	r3, [sp, #4]
   16734:	ldr	r3, [r5, #4]
   16738:	str	r3, [sp]
   1673c:	ldr	r3, [r5]
   16740:	mov	r2, r0
   16744:	mov	r1, #1
   16748:	mov	r0, r4
   1674c:	bl	10e88 <__fprintf_chk@plt>
   16750:	b	16590 <__assert_fail@plt+0x5660>
   16754:	mov	r2, #5
   16758:	movw	r1, #36232	; 0x8d88
   1675c:	movt	r1, #1
   16760:	mov	r0, #0
   16764:	bl	10d68 <dcgettext@plt>
   16768:	ldr	r3, [r5, #28]
   1676c:	str	r3, [sp, #24]
   16770:	ldr	r3, [r5, #24]
   16774:	str	r3, [sp, #20]
   16778:	ldr	r3, [r5, #20]
   1677c:	str	r3, [sp, #16]
   16780:	ldr	r3, [r5, #16]
   16784:	str	r3, [sp, #12]
   16788:	ldr	r3, [r5, #12]
   1678c:	str	r3, [sp, #8]
   16790:	ldr	r3, [r5, #8]
   16794:	str	r3, [sp, #4]
   16798:	ldr	r3, [r5, #4]
   1679c:	str	r3, [sp]
   167a0:	ldr	r3, [r5]
   167a4:	mov	r2, r0
   167a8:	mov	r1, #1
   167ac:	mov	r0, r4
   167b0:	bl	10e88 <__fprintf_chk@plt>
   167b4:	b	16590 <__assert_fail@plt+0x5660>
   167b8:	mov	r2, #5
   167bc:	movw	r1, #36280	; 0x8db8
   167c0:	movt	r1, #1
   167c4:	mov	r0, #0
   167c8:	bl	10d68 <dcgettext@plt>
   167cc:	ldr	r3, [r5, #32]
   167d0:	str	r3, [sp, #28]
   167d4:	ldr	r3, [r5, #28]
   167d8:	str	r3, [sp, #24]
   167dc:	ldr	r3, [r5, #24]
   167e0:	str	r3, [sp, #20]
   167e4:	ldr	r3, [r5, #20]
   167e8:	str	r3, [sp, #16]
   167ec:	ldr	r3, [r5, #16]
   167f0:	str	r3, [sp, #12]
   167f4:	ldr	r3, [r5, #12]
   167f8:	str	r3, [sp, #8]
   167fc:	ldr	r3, [r5, #8]
   16800:	str	r3, [sp, #4]
   16804:	ldr	r3, [r5, #4]
   16808:	str	r3, [sp]
   1680c:	ldr	r3, [r5]
   16810:	mov	r2, r0
   16814:	mov	r1, #1
   16818:	mov	r0, r4
   1681c:	bl	10e88 <__fprintf_chk@plt>
   16820:	b	16590 <__assert_fail@plt+0x5660>
   16824:	mov	r2, #5
   16828:	movw	r1, #36332	; 0x8dec
   1682c:	movt	r1, #1
   16830:	mov	r0, #0
   16834:	bl	10d68 <dcgettext@plt>
   16838:	ldr	r3, [r5, #32]
   1683c:	str	r3, [sp, #28]
   16840:	ldr	r3, [r5, #28]
   16844:	str	r3, [sp, #24]
   16848:	ldr	r3, [r5, #24]
   1684c:	str	r3, [sp, #20]
   16850:	ldr	r3, [r5, #20]
   16854:	str	r3, [sp, #16]
   16858:	ldr	r3, [r5, #16]
   1685c:	str	r3, [sp, #12]
   16860:	ldr	r3, [r5, #12]
   16864:	str	r3, [sp, #8]
   16868:	ldr	r3, [r5, #8]
   1686c:	str	r3, [sp, #4]
   16870:	ldr	r3, [r5, #4]
   16874:	str	r3, [sp]
   16878:	ldr	r3, [r5]
   1687c:	mov	r2, r0
   16880:	mov	r1, #1
   16884:	mov	r0, r4
   16888:	bl	10e88 <__fprintf_chk@plt>
   1688c:	b	16590 <__assert_fail@plt+0x5660>
   16890:	strd	r4, [sp, #-12]!
   16894:	str	lr, [sp, #8]
   16898:	sub	sp, sp, #12
   1689c:	ldr	r5, [sp, #24]
   168a0:	ldr	ip, [r5]
   168a4:	cmp	ip, #0
   168a8:	beq	168e0 <__assert_fail@plt+0x59b0>
   168ac:	mov	lr, r5
   168b0:	mov	ip, #0
   168b4:	add	ip, ip, #1
   168b8:	ldr	r4, [lr, #4]!
   168bc:	cmp	r4, #0
   168c0:	bne	168b4 <__assert_fail@plt+0x5984>
   168c4:	str	ip, [sp, #4]
   168c8:	str	r5, [sp]
   168cc:	bl	16460 <__assert_fail@plt+0x5530>
   168d0:	add	sp, sp, #12
   168d4:	ldrd	r4, [sp]
   168d8:	add	sp, sp, #8
   168dc:	pop	{pc}		; (ldr pc, [sp], #4)
   168e0:	mov	ip, #0
   168e4:	b	168c4 <__assert_fail@plt+0x5994>
   168e8:	strd	r4, [sp, #-12]!
   168ec:	str	lr, [sp, #8]
   168f0:	sub	sp, sp, #52	; 0x34
   168f4:	ldr	r5, [sp, #64]	; 0x40
   168f8:	add	r4, sp, #8
   168fc:	mov	ip, #0
   16900:	ldr	lr, [r5], #4
   16904:	str	lr, [r4], #4
   16908:	cmp	lr, #0
   1690c:	beq	1691c <__assert_fail@plt+0x59ec>
   16910:	add	ip, ip, #1
   16914:	cmp	ip, #10
   16918:	bne	16900 <__assert_fail@plt+0x59d0>
   1691c:	str	ip, [sp, #4]
   16920:	add	ip, sp, #8
   16924:	str	ip, [sp]
   16928:	bl	16460 <__assert_fail@plt+0x5530>
   1692c:	add	sp, sp, #52	; 0x34
   16930:	ldrd	r4, [sp]
   16934:	add	sp, sp, #8
   16938:	pop	{pc}		; (ldr pc, [sp], #4)
   1693c:	push	{r3}		; (str r3, [sp, #-4]!)
   16940:	push	{lr}		; (str lr, [sp, #-4]!)
   16944:	sub	sp, sp, #16
   16948:	add	r3, sp, #24
   1694c:	str	r3, [sp, #12]
   16950:	str	r3, [sp]
   16954:	ldr	r3, [sp, #20]
   16958:	bl	168e8 <__assert_fail@plt+0x59b8>
   1695c:	add	sp, sp, #16
   16960:	pop	{lr}		; (ldr lr, [sp], #4)
   16964:	add	sp, sp, #4
   16968:	bx	lr
   1696c:	str	r4, [sp, #-8]!
   16970:	str	lr, [sp, #4]
   16974:	movw	r3, #41300	; 0xa154
   16978:	movt	r3, #2
   1697c:	ldr	r1, [r3]
   16980:	mov	r0, #10
   16984:	bl	10d5c <fputc_unlocked@plt>
   16988:	mov	r2, #5
   1698c:	movw	r1, #36392	; 0x8e28
   16990:	movt	r1, #1
   16994:	mov	r0, #0
   16998:	bl	10d68 <dcgettext@plt>
   1699c:	movw	r2, #36412	; 0x8e3c
   169a0:	movt	r2, #1
   169a4:	mov	r1, r0
   169a8:	mov	r0, #1
   169ac:	bl	10e70 <__printf_chk@plt>
   169b0:	mov	r2, #5
   169b4:	movw	r1, #36436	; 0x8e54
   169b8:	movt	r1, #1
   169bc:	mov	r0, #0
   169c0:	bl	10d68 <dcgettext@plt>
   169c4:	movw	r3, #34252	; 0x85cc
   169c8:	movt	r3, #1
   169cc:	movw	r2, #34292	; 0x85f4
   169d0:	movt	r2, #1
   169d4:	mov	r1, r0
   169d8:	mov	r0, #1
   169dc:	bl	10e70 <__printf_chk@plt>
   169e0:	mov	r2, #5
   169e4:	movw	r1, #36456	; 0x8e68
   169e8:	movt	r1, #1
   169ec:	mov	r0, #0
   169f0:	bl	10d68 <dcgettext@plt>
   169f4:	movw	r2, #36496	; 0x8e90
   169f8:	movt	r2, #1
   169fc:	mov	r1, r0
   16a00:	mov	r0, #1
   16a04:	bl	10e70 <__printf_chk@plt>
   16a08:	ldr	r4, [sp]
   16a0c:	add	sp, sp, #4
   16a10:	pop	{pc}		; (ldr pc, [sp], #4)
   16a14:	str	r4, [sp, #-8]!
   16a18:	str	lr, [sp, #4]
   16a1c:	bl	176f4 <__assert_fail@plt+0x67c4>
   16a20:	cmp	r0, #0
   16a24:	beq	16a34 <__assert_fail@plt+0x5b04>
   16a28:	ldr	r4, [sp]
   16a2c:	add	sp, sp, #4
   16a30:	pop	{pc}		; (ldr pc, [sp], #4)
   16a34:	bl	16ea8 <__assert_fail@plt+0x5f78>
   16a38:	str	r4, [sp, #-8]!
   16a3c:	str	lr, [sp, #4]
   16a40:	bl	176f4 <__assert_fail@plt+0x67c4>
   16a44:	cmp	r0, #0
   16a48:	beq	16a58 <__assert_fail@plt+0x5b28>
   16a4c:	ldr	r4, [sp]
   16a50:	add	sp, sp, #4
   16a54:	pop	{pc}		; (ldr pc, [sp], #4)
   16a58:	bl	16ea8 <__assert_fail@plt+0x5f78>
   16a5c:	str	r4, [sp, #-8]!
   16a60:	str	lr, [sp, #4]
   16a64:	bl	16a14 <__assert_fail@plt+0x5ae4>
   16a68:	ldr	r4, [sp]
   16a6c:	add	sp, sp, #4
   16a70:	pop	{pc}		; (ldr pc, [sp], #4)
   16a74:	strd	r4, [sp, #-16]!
   16a78:	str	r6, [sp, #8]
   16a7c:	str	lr, [sp, #12]
   16a80:	mov	r5, r0
   16a84:	mov	r4, r1
   16a88:	bl	17730 <__assert_fail@plt+0x6800>
   16a8c:	cmp	r0, #0
   16a90:	beq	16aa4 <__assert_fail@plt+0x5b74>
   16a94:	ldrd	r4, [sp]
   16a98:	ldr	r6, [sp, #8]
   16a9c:	add	sp, sp, #12
   16aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   16aa4:	adds	r4, r4, #0
   16aa8:	movne	r4, #1
   16aac:	cmp	r5, #0
   16ab0:	moveq	r4, #1
   16ab4:	cmp	r4, #0
   16ab8:	beq	16a94 <__assert_fail@plt+0x5b64>
   16abc:	bl	16ea8 <__assert_fail@plt+0x5f78>
   16ac0:	str	r4, [sp, #-8]!
   16ac4:	str	lr, [sp, #4]
   16ac8:	cmp	r1, #0
   16acc:	orreq	r1, r1, #1
   16ad0:	bl	17730 <__assert_fail@plt+0x6800>
   16ad4:	cmp	r0, #0
   16ad8:	beq	16ae8 <__assert_fail@plt+0x5bb8>
   16adc:	ldr	r4, [sp]
   16ae0:	add	sp, sp, #4
   16ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ae8:	bl	16ea8 <__assert_fail@plt+0x5f78>
   16aec:	strd	r4, [sp, #-16]!
   16af0:	str	r6, [sp, #8]
   16af4:	str	lr, [sp, #12]
   16af8:	mov	r4, r0
   16afc:	mov	r6, r1
   16b00:	mov	r5, r2
   16b04:	bl	178cc <__assert_fail@plt+0x699c>
   16b08:	cmp	r0, #0
   16b0c:	beq	16b20 <__assert_fail@plt+0x5bf0>
   16b10:	ldrd	r4, [sp]
   16b14:	ldr	r6, [sp, #8]
   16b18:	add	sp, sp, #12
   16b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b20:	cmp	r4, #0
   16b24:	beq	16b34 <__assert_fail@plt+0x5c04>
   16b28:	cmp	r6, #0
   16b2c:	cmpne	r5, #0
   16b30:	beq	16b10 <__assert_fail@plt+0x5be0>
   16b34:	bl	16ea8 <__assert_fail@plt+0x5f78>
   16b38:	str	r4, [sp, #-8]!
   16b3c:	str	lr, [sp, #4]
   16b40:	bl	16aec <__assert_fail@plt+0x5bbc>
   16b44:	ldr	r4, [sp]
   16b48:	add	sp, sp, #4
   16b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b50:	str	r4, [sp, #-8]!
   16b54:	str	lr, [sp, #4]
   16b58:	mov	ip, r1
   16b5c:	mov	r3, r2
   16b60:	cmp	r2, #0
   16b64:	cmpne	r1, #0
   16b68:	moveq	r3, #1
   16b6c:	moveq	ip, r3
   16b70:	mov	r2, r3
   16b74:	mov	r1, ip
   16b78:	bl	178cc <__assert_fail@plt+0x699c>
   16b7c:	cmp	r0, #0
   16b80:	beq	16b90 <__assert_fail@plt+0x5c60>
   16b84:	ldr	r4, [sp]
   16b88:	add	sp, sp, #4
   16b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b90:	bl	16ea8 <__assert_fail@plt+0x5f78>
   16b94:	str	r4, [sp, #-8]!
   16b98:	str	lr, [sp, #4]
   16b9c:	mov	r2, r1
   16ba0:	mov	r1, r0
   16ba4:	mov	r0, #0
   16ba8:	bl	16aec <__assert_fail@plt+0x5bbc>
   16bac:	ldr	r4, [sp]
   16bb0:	add	sp, sp, #4
   16bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   16bb8:	str	r4, [sp, #-8]!
   16bbc:	str	lr, [sp, #4]
   16bc0:	mov	r2, r1
   16bc4:	mov	r1, r0
   16bc8:	mov	r0, #0
   16bcc:	bl	16b50 <__assert_fail@plt+0x5c20>
   16bd0:	ldr	r4, [sp]
   16bd4:	add	sp, sp, #4
   16bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bdc:	strd	r4, [sp, #-16]!
   16be0:	str	r6, [sp, #8]
   16be4:	str	lr, [sp, #12]
   16be8:	mov	r5, r1
   16bec:	ldr	r4, [r1]
   16bf0:	cmp	r0, #0
   16bf4:	beq	16c24 <__assert_fail@plt+0x5cf4>
   16bf8:	lsr	r3, r4, #1
   16bfc:	add	r3, r3, #1
   16c00:	adds	r4, r4, r3
   16c04:	bcs	16c40 <__assert_fail@plt+0x5d10>
   16c08:	mov	r1, r4
   16c0c:	bl	16aec <__assert_fail@plt+0x5bbc>
   16c10:	str	r4, [r5]
   16c14:	ldrd	r4, [sp]
   16c18:	ldr	r6, [sp, #8]
   16c1c:	add	sp, sp, #12
   16c20:	pop	{pc}		; (ldr pc, [sp], #4)
   16c24:	cmp	r4, #0
   16c28:	bne	16c08 <__assert_fail@plt+0x5cd8>
   16c2c:	mov	r4, #64	; 0x40
   16c30:	udiv	r4, r4, r2
   16c34:	cmp	r2, #64	; 0x40
   16c38:	addhi	r4, r4, #1
   16c3c:	b	16c08 <__assert_fail@plt+0x5cd8>
   16c40:	bl	16ea8 <__assert_fail@plt+0x5f78>
   16c44:	str	r4, [sp, #-8]!
   16c48:	str	lr, [sp, #4]
   16c4c:	mov	r2, #1
   16c50:	bl	16bdc <__assert_fail@plt+0x5cac>
   16c54:	ldr	r4, [sp]
   16c58:	add	sp, sp, #4
   16c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c60:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16c64:	strd	r6, [sp, #8]
   16c68:	str	r8, [sp, #16]
   16c6c:	str	lr, [sp, #20]
   16c70:	mov	r5, r1
   16c74:	ldr	lr, [sp, #24]
   16c78:	ldr	ip, [r1]
   16c7c:	asr	r4, ip, #1
   16c80:	adds	r4, ip, r4
   16c84:	movvs	r1, #1
   16c88:	movvc	r1, #0
   16c8c:	cmp	r1, #0
   16c90:	mvnne	r4, #-2147483648	; 0x80000000
   16c94:	mvn	r8, r3
   16c98:	lsr	r8, r8, #31
   16c9c:	cmp	r3, r4
   16ca0:	movge	r1, #0
   16ca4:	andlt	r1, r8, #1
   16ca8:	cmp	r1, #0
   16cac:	movne	r4, r3
   16cb0:	smull	r6, r7, r4, lr
   16cb4:	asr	r1, r6, #31
   16cb8:	cmp	r1, r7
   16cbc:	bne	16cd4 <__assert_fail@plt+0x5da4>
   16cc0:	mov	r1, r6
   16cc4:	cmp	r6, #63	; 0x3f
   16cc8:	movle	r1, #64	; 0x40
   16ccc:	ble	16cd8 <__assert_fail@plt+0x5da8>
   16cd0:	b	16ce4 <__assert_fail@plt+0x5db4>
   16cd4:	mvn	r1, #-2147483648	; 0x80000000
   16cd8:	sdiv	r4, r1, lr
   16cdc:	mls	r6, lr, r4, r1
   16ce0:	sub	r1, r1, r6
   16ce4:	cmp	r0, #0
   16ce8:	moveq	r6, #0
   16cec:	streq	r6, [r5]
   16cf0:	sub	r6, r4, ip
   16cf4:	cmp	r6, r2
   16cf8:	bge	16d30 <__assert_fail@plt+0x5e00>
   16cfc:	adds	r2, ip, r2
   16d00:	mov	r4, r2
   16d04:	bvs	16d4c <__assert_fail@plt+0x5e1c>
   16d08:	cmp	r2, r3
   16d0c:	movle	r3, #0
   16d10:	andgt	r3, r8, #1
   16d14:	cmp	r3, #0
   16d18:	bne	16d4c <__assert_fail@plt+0x5e1c>
   16d1c:	smull	r2, r3, r2, lr
   16d20:	asr	ip, r2, #31
   16d24:	mov	r1, r2
   16d28:	cmp	ip, r3
   16d2c:	bne	16d4c <__assert_fail@plt+0x5e1c>
   16d30:	bl	16a74 <__assert_fail@plt+0x5b44>
   16d34:	str	r4, [r5]
   16d38:	ldrd	r4, [sp]
   16d3c:	ldrd	r6, [sp, #8]
   16d40:	ldr	r8, [sp, #16]
   16d44:	add	sp, sp, #20
   16d48:	pop	{pc}		; (ldr pc, [sp], #4)
   16d4c:	bl	16ea8 <__assert_fail@plt+0x5f78>
   16d50:	str	r4, [sp, #-8]!
   16d54:	str	lr, [sp, #4]
   16d58:	bl	17680 <__assert_fail@plt+0x6750>
   16d5c:	cmp	r0, #0
   16d60:	beq	16d70 <__assert_fail@plt+0x5e40>
   16d64:	ldr	r4, [sp]
   16d68:	add	sp, sp, #4
   16d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d70:	bl	16ea8 <__assert_fail@plt+0x5f78>
   16d74:	str	r4, [sp, #-8]!
   16d78:	str	lr, [sp, #4]
   16d7c:	mov	r1, #1
   16d80:	bl	16d50 <__assert_fail@plt+0x5e20>
   16d84:	ldr	r4, [sp]
   16d88:	add	sp, sp, #4
   16d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d90:	str	r4, [sp, #-8]!
   16d94:	str	lr, [sp, #4]
   16d98:	bl	17680 <__assert_fail@plt+0x6750>
   16d9c:	cmp	r0, #0
   16da0:	beq	16db0 <__assert_fail@plt+0x5e80>
   16da4:	ldr	r4, [sp]
   16da8:	add	sp, sp, #4
   16dac:	pop	{pc}		; (ldr pc, [sp], #4)
   16db0:	bl	16ea8 <__assert_fail@plt+0x5f78>
   16db4:	str	r4, [sp, #-8]!
   16db8:	str	lr, [sp, #4]
   16dbc:	mov	r1, #1
   16dc0:	bl	16d90 <__assert_fail@plt+0x5e60>
   16dc4:	ldr	r4, [sp]
   16dc8:	add	sp, sp, #4
   16dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   16dd0:	strd	r4, [sp, #-16]!
   16dd4:	str	r6, [sp, #8]
   16dd8:	str	lr, [sp, #12]
   16ddc:	mov	r5, r0
   16de0:	mov	r4, r1
   16de4:	mov	r0, r1
   16de8:	bl	16a14 <__assert_fail@plt+0x5ae4>
   16dec:	mov	r2, r4
   16df0:	mov	r1, r5
   16df4:	bl	10d2c <memcpy@plt>
   16df8:	ldrd	r4, [sp]
   16dfc:	ldr	r6, [sp, #8]
   16e00:	add	sp, sp, #12
   16e04:	pop	{pc}		; (ldr pc, [sp], #4)
   16e08:	strd	r4, [sp, #-16]!
   16e0c:	str	r6, [sp, #8]
   16e10:	str	lr, [sp, #12]
   16e14:	mov	r5, r0
   16e18:	mov	r4, r1
   16e1c:	mov	r0, r1
   16e20:	bl	16a38 <__assert_fail@plt+0x5b08>
   16e24:	mov	r2, r4
   16e28:	mov	r1, r5
   16e2c:	bl	10d2c <memcpy@plt>
   16e30:	ldrd	r4, [sp]
   16e34:	ldr	r6, [sp, #8]
   16e38:	add	sp, sp, #12
   16e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e40:	strd	r4, [sp, #-16]!
   16e44:	str	r6, [sp, #8]
   16e48:	str	lr, [sp, #12]
   16e4c:	mov	r5, r0
   16e50:	mov	r4, r1
   16e54:	add	r0, r1, #1
   16e58:	bl	16a38 <__assert_fail@plt+0x5b08>
   16e5c:	mov	r2, #0
   16e60:	strb	r2, [r0, r4]
   16e64:	mov	r2, r4
   16e68:	mov	r1, r5
   16e6c:	bl	10d2c <memcpy@plt>
   16e70:	ldrd	r4, [sp]
   16e74:	ldr	r6, [sp, #8]
   16e78:	add	sp, sp, #12
   16e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e80:	str	r4, [sp, #-8]!
   16e84:	str	lr, [sp, #4]
   16e88:	mov	r4, r0
   16e8c:	bl	10e34 <strlen@plt>
   16e90:	add	r1, r0, #1
   16e94:	mov	r0, r4
   16e98:	bl	16dd0 <__assert_fail@plt+0x5ea0>
   16e9c:	ldr	r4, [sp]
   16ea0:	add	sp, sp, #4
   16ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ea8:	str	r4, [sp, #-8]!
   16eac:	str	lr, [sp, #4]
   16eb0:	movw	r3, #41200	; 0xa0f0
   16eb4:	movt	r3, #2
   16eb8:	ldr	r4, [r3]
   16ebc:	mov	r2, #5
   16ec0:	movw	r1, #36576	; 0x8ee0
   16ec4:	movt	r1, #1
   16ec8:	mov	r0, #0
   16ecc:	bl	10d68 <dcgettext@plt>
   16ed0:	mov	r3, r0
   16ed4:	movw	r2, #34512	; 0x86d0
   16ed8:	movt	r2, #1
   16edc:	mov	r1, #0
   16ee0:	mov	r0, r4
   16ee4:	bl	10dd4 <error@plt>
   16ee8:	bl	10f24 <abort@plt>
   16eec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16ef0:	strd	r6, [sp, #8]
   16ef4:	strd	r8, [sp, #16]
   16ef8:	strd	sl, [sp, #24]
   16efc:	str	lr, [sp, #32]
   16f00:	sub	sp, sp, #20
   16f04:	cmp	r2, #0
   16f08:	beq	17020 <__assert_fail@plt+0x60f0>
   16f0c:	sub	ip, r2, #1
   16f10:	mov	lr, #0
   16f14:	mov	r2, r1
   16f18:	asr	r3, r1, #31
   16f1c:	strd	r2, [sp, #8]
   16f20:	mov	r8, lr
   16f24:	b	16fc8 <__assert_fail@plt+0x6098>
   16f28:	umull	r4, r5, r2, r1
   16f2c:	umull	r6, r7, r1, r3
   16f30:	strd	r6, [sp]
   16f34:	cmp	r3, #0
   16f38:	bge	16f54 <__assert_fail@plt+0x6024>
   16f3c:	mov	sl, #0
   16f40:	subs	r6, r6, sl
   16f44:	str	r6, [sp]
   16f48:	ldr	r6, [sp, #4]
   16f4c:	sbc	r6, r6, r1
   16f50:	str	r6, [sp, #4]
   16f54:	cmp	r1, #0
   16f58:	bge	16f74 <__assert_fail@plt+0x6044>
   16f5c:	ldr	r6, [sp]
   16f60:	subs	r6, r6, r2
   16f64:	str	r6, [sp]
   16f68:	ldr	r6, [sp, #4]
   16f6c:	sbc	r6, r6, r3
   16f70:	str	r6, [sp, #4]
   16f74:	mov	sl, #0
   16f78:	ldr	r6, [sp]
   16f7c:	adds	r6, r6, r5
   16f80:	ldr	r7, [sp, #4]
   16f84:	adc	sl, r7, sl
   16f88:	cmp	sl, r6, asr #31
   16f8c:	bne	16f98 <__assert_fail@plt+0x6068>
   16f90:	mov	r5, r6
   16f94:	b	16fe4 <__assert_fail@plt+0x60b4>
   16f98:	ldr	r4, [sp, #12]
   16f9c:	mul	r5, r2, r4
   16fa0:	mla	r6, r1, r3, r5
   16fa4:	umull	sl, fp, r2, r1
   16fa8:	add	r5, r6, fp
   16fac:	mov	r4, sl
   16fb0:	mov	r9, #1
   16fb4:	b	16fe4 <__assert_fail@plt+0x60b4>
   16fb8:	orr	lr, lr, r3
   16fbc:	sub	ip, ip, #1
   16fc0:	cmn	ip, #1
   16fc4:	beq	17024 <__assert_fail@plt+0x60f4>
   16fc8:	ldrd	r2, [r0]
   16fcc:	mov	r9, r8
   16fd0:	cmp	r3, r2, asr #31
   16fd4:	bne	16f28 <__assert_fail@plt+0x5ff8>
   16fd8:	smull	r6, r7, r2, r1
   16fdc:	mov	r4, r6
   16fe0:	mov	r5, r7
   16fe4:	cmp	r9, #0
   16fe8:	streq	r4, [r0]
   16fec:	streq	r5, [r0, #4]
   16ff0:	moveq	r3, r8
   16ff4:	beq	16fb8 <__assert_fail@plt+0x6088>
   16ff8:	cmp	r2, #0
   16ffc:	sbcs	r3, r3, #0
   17000:	mvnge	r2, #0
   17004:	mvnge	r3, #-2147483648	; 0x80000000
   17008:	movlt	r2, #0
   1700c:	movlt	r3, #-2147483648	; 0x80000000
   17010:	str	r2, [r0]
   17014:	str	r3, [r0, #4]
   17018:	mov	r3, #1
   1701c:	b	16fb8 <__assert_fail@plt+0x6088>
   17020:	mov	lr, #0
   17024:	mov	r0, lr
   17028:	add	sp, sp, #20
   1702c:	ldrd	r4, [sp]
   17030:	ldrd	r6, [sp, #8]
   17034:	ldrd	r8, [sp, #16]
   17038:	ldrd	sl, [sp, #24]
   1703c:	add	sp, sp, #32
   17040:	pop	{pc}		; (ldr pc, [sp], #4)
   17044:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17048:	strd	r6, [sp, #8]
   1704c:	strd	r8, [sp, #16]
   17050:	strd	sl, [sp, #24]
   17054:	str	lr, [sp, #32]
   17058:	sub	sp, sp, #20
   1705c:	cmp	r2, #36	; 0x24
   17060:	bhi	170cc <__assert_fail@plt+0x619c>
   17064:	mov	r5, r0
   17068:	mov	r4, r1
   1706c:	mov	r6, r2
   17070:	mov	r8, r3
   17074:	cmp	r1, #0
   17078:	addeq	r4, sp, #12
   1707c:	bl	10e4c <__errno_location@plt>
   17080:	mov	r7, r0
   17084:	mov	r3, #0
   17088:	str	r3, [r0]
   1708c:	mov	r2, r6
   17090:	mov	r1, r4
   17094:	mov	r0, r5
   17098:	bl	10ee8 <__strtoll_internal@plt>
   1709c:	strd	r0, [sp]
   170a0:	ldr	r6, [r4]
   170a4:	cmp	r6, r5
   170a8:	beq	170ec <__assert_fail@plt+0x61bc>
   170ac:	ldr	r3, [r7]
   170b0:	cmp	r3, #0
   170b4:	beq	17210 <__assert_fail@plt+0x62e0>
   170b8:	cmp	r3, #34	; 0x22
   170bc:	moveq	r5, #1
   170c0:	beq	17214 <__assert_fail@plt+0x62e4>
   170c4:	mov	r5, #4
   170c8:	b	17238 <__assert_fail@plt+0x6308>
   170cc:	movw	r3, #36596	; 0x8ef4
   170d0:	movt	r3, #1
   170d4:	mov	r2, #85	; 0x55
   170d8:	movw	r1, #36608	; 0x8f00
   170dc:	movt	r1, #1
   170e0:	movw	r0, #36624	; 0x8f10
   170e4:	movt	r0, #1
   170e8:	bl	10f30 <__assert_fail@plt>
   170ec:	ldr	r3, [sp, #56]	; 0x38
   170f0:	cmp	r3, #0
   170f4:	beq	17670 <__assert_fail@plt+0x6740>
   170f8:	ldrb	r1, [r5]
   170fc:	cmp	r1, #0
   17100:	moveq	r5, #4
   17104:	beq	17238 <__assert_fail@plt+0x6308>
   17108:	mov	r0, r3
   1710c:	bl	10e40 <strchr@plt>
   17110:	cmp	r0, #0
   17114:	beq	17678 <__assert_fail@plt+0x6748>
   17118:	mov	r2, #1
   1711c:	mov	r3, #0
   17120:	strd	r2, [sp]
   17124:	ldrb	r7, [r6]
   17128:	mov	r5, #0
   1712c:	mov	r1, r7
   17130:	ldr	r0, [sp, #56]	; 0x38
   17134:	bl	10e40 <strchr@plt>
   17138:	cmp	r0, #0
   1713c:	beq	17258 <__assert_fail@plt+0x6328>
   17140:	sub	r3, r7, #69	; 0x45
   17144:	cmp	r3, #47	; 0x2f
   17148:	ldrls	pc, [pc, r3, lsl #2]
   1714c:	b	173a4 <__assert_fail@plt+0x6474>
   17150:	andeq	r7, r1, r8, ror #4
   17154:	andeq	r7, r1, r4, lsr #7
   17158:	andeq	r7, r1, r8, ror #4
   1715c:	andeq	r7, r1, r4, lsr #7
   17160:	andeq	r7, r1, r4, lsr #7
   17164:	andeq	r7, r1, r4, lsr #7
   17168:	andeq	r7, r1, r8, ror #4
   1716c:	andeq	r7, r1, r4, lsr #7
   17170:	andeq	r7, r1, r8, ror #4
   17174:	andeq	r7, r1, r4, lsr #7
   17178:	andeq	r7, r1, r4, lsr #7
   1717c:	andeq	r7, r1, r8, ror #4
   17180:	andeq	r7, r1, r4, lsr #7
   17184:	andeq	r7, r1, r4, lsr #7
   17188:	andeq	r7, r1, r4, lsr #7
   1718c:	andeq	r7, r1, r8, ror #4
   17190:	andeq	r7, r1, r4, lsr #7
   17194:	andeq	r7, r1, r4, lsr #7
   17198:	andeq	r7, r1, r4, lsr #7
   1719c:	andeq	r7, r1, r4, lsr #7
   171a0:	andeq	r7, r1, r8, ror #4
   171a4:	andeq	r7, r1, r8, ror #4
   171a8:	andeq	r7, r1, r4, lsr #7
   171ac:	andeq	r7, r1, r4, lsr #7
   171b0:	andeq	r7, r1, r4, lsr #7
   171b4:	andeq	r7, r1, r4, lsr #7
   171b8:	andeq	r7, r1, r4, lsr #7
   171bc:	andeq	r7, r1, r4, lsr #7
   171c0:	andeq	r7, r1, r4, lsr #7
   171c4:	andeq	r7, r1, r4, lsr #7
   171c8:	andeq	r7, r1, r4, lsr #7
   171cc:	andeq	r7, r1, r4, lsr #7
   171d0:	andeq	r7, r1, r4, lsr #7
   171d4:	andeq	r7, r1, r4, lsr #7
   171d8:	andeq	r7, r1, r8, ror #4
   171dc:	andeq	r7, r1, r4, lsr #7
   171e0:	andeq	r7, r1, r4, lsr #7
   171e4:	andeq	r7, r1, r4, lsr #7
   171e8:	andeq	r7, r1, r8, ror #4
   171ec:	andeq	r7, r1, r4, lsr #7
   171f0:	andeq	r7, r1, r8, ror #4
   171f4:	andeq	r7, r1, r4, lsr #7
   171f8:	andeq	r7, r1, r4, lsr #7
   171fc:	andeq	r7, r1, r4, lsr #7
   17200:	andeq	r7, r1, r4, lsr #7
   17204:	andeq	r7, r1, r4, lsr #7
   17208:	andeq	r7, r1, r4, lsr #7
   1720c:	andeq	r7, r1, r8, ror #4
   17210:	mov	r5, #0
   17214:	ldr	r3, [sp, #56]	; 0x38
   17218:	cmp	r3, #0
   1721c:	strdeq	r0, [r8]
   17220:	beq	17238 <__assert_fail@plt+0x6308>
   17224:	ldrb	r7, [r6]
   17228:	cmp	r7, #0
   1722c:	bne	1712c <__assert_fail@plt+0x61fc>
   17230:	ldrd	r2, [sp]
   17234:	strd	r2, [r8]
   17238:	mov	r0, r5
   1723c:	add	sp, sp, #20
   17240:	ldrd	r4, [sp]
   17244:	ldrd	r6, [sp, #8]
   17248:	ldrd	r8, [sp, #16]
   1724c:	ldrd	sl, [sp, #24]
   17250:	add	sp, sp, #32
   17254:	pop	{pc}		; (ldr pc, [sp], #4)
   17258:	ldrd	r2, [sp]
   1725c:	strd	r2, [r8]
   17260:	orr	r5, r5, #2
   17264:	b	17238 <__assert_fail@plt+0x6308>
   17268:	mov	r1, #48	; 0x30
   1726c:	ldr	r0, [sp, #56]	; 0x38
   17270:	bl	10e40 <strchr@plt>
   17274:	cmp	r0, #0
   17278:	beq	173b0 <__assert_fail@plt+0x6480>
   1727c:	ldrb	r3, [r6, #1]
   17280:	cmp	r3, #68	; 0x44
   17284:	beq	173bc <__assert_fail@plt+0x648c>
   17288:	cmp	r3, #105	; 0x69
   1728c:	beq	1738c <__assert_fail@plt+0x645c>
   17290:	cmp	r3, #66	; 0x42
   17294:	moveq	r6, #2
   17298:	movne	r6, #1
   1729c:	moveq	r1, #1000	; 0x3e8
   172a0:	movne	r1, #1024	; 0x400
   172a4:	sub	r7, r7, #66	; 0x42
   172a8:	cmp	r7, #53	; 0x35
   172ac:	ldrls	pc, [pc, r7, lsl #2]
   172b0:	b	1763c <__assert_fail@plt+0x670c>
   172b4:	andeq	r7, r1, ip, ror #8
   172b8:	andeq	r7, r1, ip, lsr r6
   172bc:	andeq	r7, r1, ip, lsr r6
   172c0:	andeq	r7, r1, r0, lsl r5
   172c4:	andeq	r7, r1, ip, lsr r6
   172c8:	andeq	r7, r1, r0, lsr #10
   172cc:	andeq	r7, r1, ip, lsr r6
   172d0:	andeq	r7, r1, ip, lsr r6
   172d4:	andeq	r7, r1, ip, lsr r6
   172d8:	andeq	r7, r1, r0, lsr r5
   172dc:	andeq	r7, r1, ip, lsr r6
   172e0:	andeq	r7, r1, r0, asr #10
   172e4:	andeq	r7, r1, ip, lsr r6
   172e8:	andeq	r7, r1, ip, lsr r6
   172ec:	andeq	r7, r1, r0, asr r5
   172f0:	andeq	r7, r1, ip, lsr r6
   172f4:	andeq	r7, r1, ip, lsr r6
   172f8:	andeq	r7, r1, ip, lsr r6
   172fc:	andeq	r7, r1, r0, ror #10
   17300:	andeq	r7, r1, ip, lsr r6
   17304:	andeq	r7, r1, ip, lsr r6
   17308:	andeq	r7, r1, ip, lsr r6
   1730c:	andeq	r7, r1, ip, lsr r6
   17310:	andeq	r7, r1, ip, lsl r6
   17314:	andeq	r7, r1, ip, lsr #12
   17318:	andeq	r7, r1, ip, lsr r6
   1731c:	andeq	r7, r1, ip, lsr r6
   17320:	andeq	r7, r1, ip, lsr r6
   17324:	andeq	r7, r1, ip, lsr r6
   17328:	andeq	r7, r1, ip, lsr r6
   1732c:	andeq	r7, r1, ip, lsr r6
   17330:	andeq	r7, r1, ip, lsr r6
   17334:	andeq	r7, r1, r8, asr #7
   17338:	andeq	r7, r1, ip, asr #12
   1733c:	andeq	r7, r1, ip, lsr r6
   17340:	andeq	r7, r1, ip, lsr r6
   17344:	andeq	r7, r1, ip, lsr r6
   17348:	andeq	r7, r1, r0, lsr #10
   1734c:	andeq	r7, r1, ip, lsr r6
   17350:	andeq	r7, r1, ip, lsr r6
   17354:	andeq	r7, r1, ip, lsr r6
   17358:	andeq	r7, r1, r0, lsr r5
   1735c:	andeq	r7, r1, ip, lsr r6
   17360:	andeq	r7, r1, r0, asr #10
   17364:	andeq	r7, r1, ip, lsr r6
   17368:	andeq	r7, r1, ip, lsr r6
   1736c:	andeq	r7, r1, ip, lsr r6
   17370:	andeq	r7, r1, ip, lsr r6
   17374:	andeq	r7, r1, ip, lsr r6
   17378:	andeq	r7, r1, ip, lsr r6
   1737c:	andeq	r7, r1, r0, ror #10
   17380:	andeq	r7, r1, ip, lsr r6
   17384:	andeq	r7, r1, ip, lsr r6
   17388:	andeq	r7, r1, r0, ror r5
   1738c:	ldrb	r3, [r6, #2]
   17390:	cmp	r3, #66	; 0x42
   17394:	movne	r6, #1
   17398:	moveq	r6, #3
   1739c:	mov	r1, #1024	; 0x400
   173a0:	b	172a4 <__assert_fail@plt+0x6374>
   173a4:	mov	r6, #1
   173a8:	mov	r1, #1024	; 0x400
   173ac:	b	172a4 <__assert_fail@plt+0x6374>
   173b0:	mov	r6, #1
   173b4:	mov	r1, #1024	; 0x400
   173b8:	b	172a4 <__assert_fail@plt+0x6374>
   173bc:	mov	r6, #2
   173c0:	mov	r1, #1000	; 0x3e8
   173c4:	b	172a4 <__assert_fail@plt+0x6374>
   173c8:	ldrd	r2, [sp]
   173cc:	mov	ip, #0
   173d0:	cmp	r3, r2, asr #31
   173d4:	bne	1741c <__assert_fail@plt+0x64ec>
   173d8:	lsl	r1, r3, #9
   173dc:	lsl	r0, r2, #9
   173e0:	orr	r1, r1, r2, lsr #23
   173e4:	cmp	ip, #0
   173e8:	streq	r0, [sp]
   173ec:	streq	r1, [sp, #4]
   173f0:	moveq	r0, #0
   173f4:	beq	17650 <__assert_fail@plt+0x6720>
   173f8:	cmp	r2, #0
   173fc:	sbcs	r3, r3, #0
   17400:	mvnge	r2, #0
   17404:	mvnge	r3, #-2147483648	; 0x80000000
   17408:	movlt	r2, #0
   1740c:	movlt	r3, #-2147483648	; 0x80000000
   17410:	strd	r2, [sp]
   17414:	mov	r0, #1
   17418:	b	17650 <__assert_fail@plt+0x6720>
   1741c:	mov	lr, #512	; 0x200
   17420:	lsr	r7, r2, #23
   17424:	lsl	r0, r2, #9
   17428:	umull	sl, fp, lr, r3
   1742c:	cmp	r3, #0
   17430:	bge	17440 <__assert_fail@plt+0x6510>
   17434:	mov	r1, #0
   17438:	subs	sl, sl, r1
   1743c:	sbc	fp, fp, lr
   17440:	mov	r1, #0
   17444:	mov	lr, r1
   17448:	adds	r1, sl, r7
   1744c:	adc	lr, fp, lr
   17450:	cmp	lr, r1, asr #31
   17454:	beq	173e4 <__assert_fail@plt+0x64b4>
   17458:	lsl	r1, r3, #9
   1745c:	lsl	r0, r2, #9
   17460:	orr	r1, r1, r2, lsr #23
   17464:	mov	ip, #1
   17468:	b	173e4 <__assert_fail@plt+0x64b4>
   1746c:	ldrd	r2, [sp]
   17470:	mov	ip, #0
   17474:	cmp	r3, r2, asr #31
   17478:	bne	174c0 <__assert_fail@plt+0x6590>
   1747c:	lsl	r1, r3, #10
   17480:	lsl	r0, r2, #10
   17484:	orr	r1, r1, r2, lsr #22
   17488:	cmp	ip, #0
   1748c:	streq	r0, [sp]
   17490:	streq	r1, [sp, #4]
   17494:	moveq	r0, #0
   17498:	beq	17650 <__assert_fail@plt+0x6720>
   1749c:	cmp	r2, #0
   174a0:	sbcs	r3, r3, #0
   174a4:	mvnge	r2, #0
   174a8:	mvnge	r3, #-2147483648	; 0x80000000
   174ac:	movlt	r2, #0
   174b0:	movlt	r3, #-2147483648	; 0x80000000
   174b4:	strd	r2, [sp]
   174b8:	mov	r0, #1
   174bc:	b	17650 <__assert_fail@plt+0x6720>
   174c0:	mov	lr, #1024	; 0x400
   174c4:	lsr	r7, r2, #22
   174c8:	lsl	r0, r2, #10
   174cc:	umull	sl, fp, lr, r3
   174d0:	cmp	r3, #0
   174d4:	bge	174e4 <__assert_fail@plt+0x65b4>
   174d8:	mov	r1, #0
   174dc:	subs	sl, sl, r1
   174e0:	sbc	fp, fp, lr
   174e4:	mov	r1, #0
   174e8:	mov	lr, r1
   174ec:	adds	r1, sl, r7
   174f0:	adc	lr, fp, lr
   174f4:	cmp	lr, r1, asr #31
   174f8:	beq	17488 <__assert_fail@plt+0x6558>
   174fc:	lsl	r1, r3, #10
   17500:	lsl	r0, r2, #10
   17504:	orr	r1, r1, r2, lsr #22
   17508:	mov	ip, #1
   1750c:	b	17488 <__assert_fail@plt+0x6558>
   17510:	mov	r2, #6
   17514:	mov	r0, sp
   17518:	bl	16eec <__assert_fail@plt+0x5fbc>
   1751c:	b	17650 <__assert_fail@plt+0x6720>
   17520:	mov	r2, #3
   17524:	mov	r0, sp
   17528:	bl	16eec <__assert_fail@plt+0x5fbc>
   1752c:	b	17650 <__assert_fail@plt+0x6720>
   17530:	mov	r2, #1
   17534:	mov	r0, sp
   17538:	bl	16eec <__assert_fail@plt+0x5fbc>
   1753c:	b	17650 <__assert_fail@plt+0x6720>
   17540:	mov	r2, #2
   17544:	mov	r0, sp
   17548:	bl	16eec <__assert_fail@plt+0x5fbc>
   1754c:	b	17650 <__assert_fail@plt+0x6720>
   17550:	mov	r2, #5
   17554:	mov	r0, sp
   17558:	bl	16eec <__assert_fail@plt+0x5fbc>
   1755c:	b	17650 <__assert_fail@plt+0x6720>
   17560:	mov	r2, #4
   17564:	mov	r0, sp
   17568:	bl	16eec <__assert_fail@plt+0x5fbc>
   1756c:	b	17650 <__assert_fail@plt+0x6720>
   17570:	ldrd	r2, [sp]
   17574:	mov	lr, #0
   17578:	cmp	r3, r2, asr #31
   1757c:	bne	175c0 <__assert_fail@plt+0x6690>
   17580:	adds	r0, r2, r2
   17584:	adc	r1, r3, r3
   17588:	cmp	lr, #0
   1758c:	streq	r0, [sp]
   17590:	streq	r1, [sp, #4]
   17594:	moveq	r0, #0
   17598:	beq	17650 <__assert_fail@plt+0x6720>
   1759c:	cmp	r2, #0
   175a0:	sbcs	r3, r3, #0
   175a4:	mvnge	r2, #0
   175a8:	mvnge	r3, #-2147483648	; 0x80000000
   175ac:	movlt	r2, #0
   175b0:	movlt	r3, #-2147483648	; 0x80000000
   175b4:	strd	r2, [sp]
   175b8:	mov	r0, #1
   175bc:	b	17650 <__assert_fail@plt+0x6720>
   175c0:	mov	ip, #2
   175c4:	mov	r1, #0
   175c8:	adds	r7, r2, r2
   175cc:	adc	sl, r1, r1
   175d0:	umull	r0, r1, ip, r3
   175d4:	cmp	r3, #0
   175d8:	bge	175e8 <__assert_fail@plt+0x66b8>
   175dc:	mov	r9, #0
   175e0:	subs	r0, r0, r9
   175e4:	sbc	r1, r1, ip
   175e8:	mov	ip, #0
   175ec:	mov	r9, ip
   175f0:	adds	ip, r0, sl
   175f4:	adc	r9, r1, r9
   175f8:	cmp	r9, ip, asr #31
   175fc:	bne	1760c <__assert_fail@plt+0x66dc>
   17600:	mov	r0, r7
   17604:	mov	r1, ip
   17608:	b	17588 <__assert_fail@plt+0x6658>
   1760c:	adds	r0, r2, r2
   17610:	adc	r1, r3, r3
   17614:	mov	lr, #1
   17618:	b	17588 <__assert_fail@plt+0x6658>
   1761c:	mov	r2, #8
   17620:	mov	r0, sp
   17624:	bl	16eec <__assert_fail@plt+0x5fbc>
   17628:	b	17650 <__assert_fail@plt+0x6720>
   1762c:	mov	r2, #7
   17630:	mov	r0, sp
   17634:	bl	16eec <__assert_fail@plt+0x5fbc>
   17638:	b	17650 <__assert_fail@plt+0x6720>
   1763c:	ldrd	r2, [sp]
   17640:	strd	r2, [r8]
   17644:	orr	r5, r5, #2
   17648:	b	17238 <__assert_fail@plt+0x6308>
   1764c:	mov	r0, #0
   17650:	orr	r5, r5, r0
   17654:	ldr	r3, [r4]
   17658:	add	r2, r3, r6
   1765c:	str	r2, [r4]
   17660:	ldrb	r3, [r3, r6]
   17664:	cmp	r3, #0
   17668:	orrne	r5, r5, #2
   1766c:	b	17230 <__assert_fail@plt+0x6300>
   17670:	mov	r5, #4
   17674:	b	17238 <__assert_fail@plt+0x6308>
   17678:	mov	r5, #4
   1767c:	b	17238 <__assert_fail@plt+0x6308>
   17680:	strd	r4, [sp, #-16]!
   17684:	str	r6, [sp, #8]
   17688:	str	lr, [sp, #12]
   1768c:	cmp	r1, #0
   17690:	cmpne	r0, #0
   17694:	beq	176d0 <__assert_fail@plt+0x67a0>
   17698:	mov	r2, r0
   1769c:	mov	r3, r1
   176a0:	umull	r4, r5, r0, r1
   176a4:	adds	r1, r5, #0
   176a8:	movne	r1, #1
   176ac:	cmp	r4, #0
   176b0:	movlt	r1, #1
   176b4:	cmp	r1, #0
   176b8:	beq	176d8 <__assert_fail@plt+0x67a8>
   176bc:	bl	10e4c <__errno_location@plt>
   176c0:	mov	r3, #12
   176c4:	str	r3, [r0]
   176c8:	mov	r0, #0
   176cc:	b	176e4 <__assert_fail@plt+0x67b4>
   176d0:	mov	r3, #1
   176d4:	mov	r2, r3
   176d8:	mov	r1, r3
   176dc:	mov	r0, r2
   176e0:	bl	10cc0 <calloc@plt>
   176e4:	ldrd	r4, [sp]
   176e8:	ldr	r6, [sp, #8]
   176ec:	add	sp, sp, #12
   176f0:	pop	{pc}		; (ldr pc, [sp], #4)
   176f4:	str	r4, [sp, #-8]!
   176f8:	str	lr, [sp, #4]
   176fc:	cmp	r0, #0
   17700:	beq	1771c <__assert_fail@plt+0x67ec>
   17704:	bge	17720 <__assert_fail@plt+0x67f0>
   17708:	bl	10e4c <__errno_location@plt>
   1770c:	mov	r3, #12
   17710:	str	r3, [r0]
   17714:	mov	r0, #0
   17718:	b	17724 <__assert_fail@plt+0x67f4>
   1771c:	mov	r0, #1
   17720:	bl	10de0 <malloc@plt>
   17724:	ldr	r4, [sp]
   17728:	add	sp, sp, #4
   1772c:	pop	{pc}		; (ldr pc, [sp], #4)
   17730:	str	r4, [sp, #-8]!
   17734:	str	lr, [sp, #4]
   17738:	cmp	r0, #0
   1773c:	beq	17760 <__assert_fail@plt+0x6830>
   17740:	cmp	r1, #0
   17744:	beq	1776c <__assert_fail@plt+0x683c>
   17748:	cmp	r1, #0
   1774c:	blt	17778 <__assert_fail@plt+0x6848>
   17750:	bl	10d74 <realloc@plt>
   17754:	ldr	r4, [sp]
   17758:	add	sp, sp, #4
   1775c:	pop	{pc}		; (ldr pc, [sp], #4)
   17760:	mov	r0, r1
   17764:	bl	176f4 <__assert_fail@plt+0x67c4>
   17768:	b	17754 <__assert_fail@plt+0x6824>
   1776c:	bl	14024 <__assert_fail@plt+0x30f4>
   17770:	mov	r0, #0
   17774:	b	17754 <__assert_fail@plt+0x6824>
   17778:	bl	10e4c <__errno_location@plt>
   1777c:	mov	r3, #12
   17780:	str	r3, [r0]
   17784:	mov	r0, #0
   17788:	b	17754 <__assert_fail@plt+0x6824>
   1778c:	strd	r4, [sp, #-16]!
   17790:	str	r6, [sp, #8]
   17794:	str	lr, [sp, #12]
   17798:	mov	r5, r0
   1779c:	bl	10dbc <__fpending@plt>
   177a0:	mov	r6, r0
   177a4:	ldr	r4, [r5]
   177a8:	and	r4, r4, #32
   177ac:	mov	r0, r5
   177b0:	bl	13ef8 <__assert_fail@plt+0x2fc8>
   177b4:	cmp	r4, #0
   177b8:	bne	177ec <__assert_fail@plt+0x68bc>
   177bc:	cmp	r0, #0
   177c0:	beq	177dc <__assert_fail@plt+0x68ac>
   177c4:	cmp	r6, #0
   177c8:	bne	17808 <__assert_fail@plt+0x68d8>
   177cc:	bl	10e4c <__errno_location@plt>
   177d0:	ldr	r0, [r0]
   177d4:	subs	r0, r0, #9
   177d8:	mvnne	r0, #0
   177dc:	ldrd	r4, [sp]
   177e0:	ldr	r6, [sp, #8]
   177e4:	add	sp, sp, #12
   177e8:	pop	{pc}		; (ldr pc, [sp], #4)
   177ec:	cmp	r0, #0
   177f0:	bne	17810 <__assert_fail@plt+0x68e0>
   177f4:	bl	10e4c <__errno_location@plt>
   177f8:	mov	r3, #0
   177fc:	str	r3, [r0]
   17800:	mvn	r0, #0
   17804:	b	177dc <__assert_fail@plt+0x68ac>
   17808:	mvn	r0, #0
   1780c:	b	177dc <__assert_fail@plt+0x68ac>
   17810:	mvn	r0, #0
   17814:	b	177dc <__assert_fail@plt+0x68ac>
   17818:	str	r4, [sp, #-8]!
   1781c:	str	lr, [sp, #4]
   17820:	mov	r0, #14
   17824:	bl	10edc <nl_langinfo@plt>
   17828:	cmp	r0, #0
   1782c:	beq	17850 <__assert_fail@plt+0x6920>
   17830:	ldrb	r2, [r0]
   17834:	movw	r3, #36664	; 0x8f38
   17838:	movt	r3, #1
   1783c:	cmp	r2, #0
   17840:	moveq	r0, r3
   17844:	ldr	r4, [sp]
   17848:	add	sp, sp, #4
   1784c:	pop	{pc}		; (ldr pc, [sp], #4)
   17850:	movw	r0, #36664	; 0x8f38
   17854:	movt	r0, #1
   17858:	b	17844 <__assert_fail@plt+0x6914>
   1785c:	strd	r4, [sp, #-20]!	; 0xffffffec
   17860:	strd	r6, [sp, #8]
   17864:	str	lr, [sp, #16]
   17868:	sub	sp, sp, #12
   1786c:	mov	r7, r1
   17870:	mov	r5, r2
   17874:	subs	r6, r0, #0
   17878:	addeq	r6, sp, #4
   1787c:	mov	r0, r6
   17880:	bl	10dc8 <mbrtowc@plt>
   17884:	mov	r4, r0
   17888:	cmp	r5, #0
   1788c:	cmnne	r0, #3
   17890:	bhi	178ac <__assert_fail@plt+0x697c>
   17894:	mov	r0, r4
   17898:	add	sp, sp, #12
   1789c:	ldrd	r4, [sp]
   178a0:	ldrd	r6, [sp, #8]
   178a4:	add	sp, sp, #16
   178a8:	pop	{pc}		; (ldr pc, [sp], #4)
   178ac:	mov	r0, #0
   178b0:	bl	17908 <__assert_fail@plt+0x69d8>
   178b4:	cmp	r0, #0
   178b8:	bne	17894 <__assert_fail@plt+0x6964>
   178bc:	ldrb	r3, [r7]
   178c0:	str	r3, [r6]
   178c4:	mov	r4, #1
   178c8:	b	17894 <__assert_fail@plt+0x6964>
   178cc:	str	r4, [sp, #-8]!
   178d0:	str	lr, [sp, #4]
   178d4:	umull	r2, r3, r1, r2
   178d8:	cmp	r3, #0
   178dc:	bne	178f4 <__assert_fail@plt+0x69c4>
   178e0:	mov	r1, r2
   178e4:	bl	17730 <__assert_fail@plt+0x6800>
   178e8:	ldr	r4, [sp]
   178ec:	add	sp, sp, #4
   178f0:	pop	{pc}		; (ldr pc, [sp], #4)
   178f4:	bl	10e4c <__errno_location@plt>
   178f8:	mov	r3, #12
   178fc:	str	r3, [r0]
   17900:	mov	r0, #0
   17904:	b	178e8 <__assert_fail@plt+0x69b8>
   17908:	push	{lr}		; (str lr, [sp, #-4]!)
   1790c:	sub	sp, sp, #268	; 0x10c
   17910:	movw	r2, #257	; 0x101
   17914:	add	r1, sp, #4
   17918:	bl	17964 <__assert_fail@plt+0x6a34>
   1791c:	cmp	r0, #0
   17920:	movne	r0, #0
   17924:	bne	1795c <__assert_fail@plt+0x6a2c>
   17928:	movw	r1, #36672	; 0x8f40
   1792c:	movt	r1, #1
   17930:	add	r0, sp, #4
   17934:	bl	10ce4 <strcmp@plt>
   17938:	cmp	r0, #0
   1793c:	beq	17958 <__assert_fail@plt+0x6a28>
   17940:	movw	r1, #36676	; 0x8f44
   17944:	movt	r1, #1
   17948:	add	r0, sp, #4
   1794c:	bl	10ce4 <strcmp@plt>
   17950:	adds	r0, r0, #0
   17954:	movne	r0, #1
   17958:	and	r0, r0, #1
   1795c:	add	sp, sp, #268	; 0x10c
   17960:	pop	{pc}		; (ldr pc, [sp], #4)
   17964:	strd	r4, [sp, #-16]!
   17968:	str	r6, [sp, #8]
   1796c:	str	lr, [sp, #12]
   17970:	mov	r6, r1
   17974:	mov	r4, r2
   17978:	mov	r1, #0
   1797c:	bl	10ec4 <setlocale@plt>
   17980:	subs	r5, r0, #0
   17984:	beq	179c8 <__assert_fail@plt+0x6a98>
   17988:	mov	r0, r5
   1798c:	bl	10e34 <strlen@plt>
   17990:	cmp	r4, r0
   17994:	bhi	179e4 <__assert_fail@plt+0x6ab4>
   17998:	cmp	r4, #0
   1799c:	moveq	r0, #34	; 0x22
   179a0:	beq	179f8 <__assert_fail@plt+0x6ac8>
   179a4:	sub	r4, r4, #1
   179a8:	mov	r2, r4
   179ac:	mov	r1, r5
   179b0:	mov	r0, r6
   179b4:	bl	10d2c <memcpy@plt>
   179b8:	mov	r3, #0
   179bc:	strb	r3, [r6, r4]
   179c0:	mov	r0, #34	; 0x22
   179c4:	b	179f8 <__assert_fail@plt+0x6ac8>
   179c8:	cmp	r4, #0
   179cc:	moveq	r0, #22
   179d0:	beq	179f8 <__assert_fail@plt+0x6ac8>
   179d4:	mov	r3, #0
   179d8:	strb	r3, [r6]
   179dc:	mov	r0, #22
   179e0:	b	179f8 <__assert_fail@plt+0x6ac8>
   179e4:	add	r2, r0, #1
   179e8:	mov	r1, r5
   179ec:	mov	r0, r6
   179f0:	bl	10d2c <memcpy@plt>
   179f4:	mov	r0, #0
   179f8:	ldrd	r4, [sp]
   179fc:	ldr	r6, [sp, #8]
   17a00:	add	sp, sp, #12
   17a04:	pop	{pc}		; (ldr pc, [sp], #4)
   17a08:	str	r4, [sp, #-8]!
   17a0c:	str	lr, [sp, #4]
   17a10:	mov	r1, #0
   17a14:	bl	10ec4 <setlocale@plt>
   17a18:	ldr	r4, [sp]
   17a1c:	add	sp, sp, #4
   17a20:	pop	{pc}		; (ldr pc, [sp], #4)
   17a24:	cmp	r3, #0
   17a28:	cmpeq	r2, #0
   17a2c:	bne	17a50 <__assert_fail@plt+0x6b20>
   17a30:	cmp	r1, #0
   17a34:	movlt	r1, #-2147483648	; 0x80000000
   17a38:	movlt	r0, #0
   17a3c:	blt	17a4c <__assert_fail@plt+0x6b1c>
   17a40:	cmpeq	r0, #0
   17a44:	mvnne	r1, #-2147483648	; 0x80000000
   17a48:	mvnne	r0, #0
   17a4c:	b	17af8 <__assert_fail@plt+0x6bc8>
   17a50:	sub	sp, sp, #8
   17a54:	push	{sp, lr}
   17a58:	cmp	r1, #0
   17a5c:	blt	17a7c <__assert_fail@plt+0x6b4c>
   17a60:	cmp	r3, #0
   17a64:	blt	17ab0 <__assert_fail@plt+0x6b80>
   17a68:	bl	17b08 <__assert_fail@plt+0x6bd8>
   17a6c:	ldr	lr, [sp, #4]
   17a70:	add	sp, sp, #8
   17a74:	pop	{r2, r3}
   17a78:	bx	lr
   17a7c:	rsbs	r0, r0, #0
   17a80:	sbc	r1, r1, r1, lsl #1
   17a84:	cmp	r3, #0
   17a88:	blt	17ad4 <__assert_fail@plt+0x6ba4>
   17a8c:	bl	17b08 <__assert_fail@plt+0x6bd8>
   17a90:	ldr	lr, [sp, #4]
   17a94:	add	sp, sp, #8
   17a98:	pop	{r2, r3}
   17a9c:	rsbs	r0, r0, #0
   17aa0:	sbc	r1, r1, r1, lsl #1
   17aa4:	rsbs	r2, r2, #0
   17aa8:	sbc	r3, r3, r3, lsl #1
   17aac:	bx	lr
   17ab0:	rsbs	r2, r2, #0
   17ab4:	sbc	r3, r3, r3, lsl #1
   17ab8:	bl	17b08 <__assert_fail@plt+0x6bd8>
   17abc:	ldr	lr, [sp, #4]
   17ac0:	add	sp, sp, #8
   17ac4:	pop	{r2, r3}
   17ac8:	rsbs	r0, r0, #0
   17acc:	sbc	r1, r1, r1, lsl #1
   17ad0:	bx	lr
   17ad4:	rsbs	r2, r2, #0
   17ad8:	sbc	r3, r3, r3, lsl #1
   17adc:	bl	17b08 <__assert_fail@plt+0x6bd8>
   17ae0:	ldr	lr, [sp, #4]
   17ae4:	add	sp, sp, #8
   17ae8:	pop	{r2, r3}
   17aec:	rsbs	r2, r2, #0
   17af0:	sbc	r3, r3, r3, lsl #1
   17af4:	bx	lr
   17af8:	push	{r1, lr}
   17afc:	mov	r0, #8
   17b00:	bl	10cd8 <raise@plt>
   17b04:	pop	{r1, pc}
   17b08:	cmp	r1, r3
   17b0c:	cmpeq	r0, r2
   17b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b14:	mov	r4, r0
   17b18:	movcc	r0, #0
   17b1c:	mov	r5, r1
   17b20:	ldr	lr, [sp, #36]	; 0x24
   17b24:	movcc	r1, r0
   17b28:	bcc	17c24 <__assert_fail@plt+0x6cf4>
   17b2c:	cmp	r3, #0
   17b30:	clzeq	ip, r2
   17b34:	clzne	ip, r3
   17b38:	addeq	ip, ip, #32
   17b3c:	cmp	r5, #0
   17b40:	clzeq	r1, r4
   17b44:	addeq	r1, r1, #32
   17b48:	clzne	r1, r5
   17b4c:	sub	ip, ip, r1
   17b50:	sub	sl, ip, #32
   17b54:	lsl	r9, r3, ip
   17b58:	rsb	fp, ip, #32
   17b5c:	orr	r9, r9, r2, lsl sl
   17b60:	orr	r9, r9, r2, lsr fp
   17b64:	lsl	r8, r2, ip
   17b68:	cmp	r5, r9
   17b6c:	cmpeq	r4, r8
   17b70:	movcc	r0, #0
   17b74:	movcc	r1, r0
   17b78:	bcc	17b94 <__assert_fail@plt+0x6c64>
   17b7c:	mov	r0, #1
   17b80:	subs	r4, r4, r8
   17b84:	lsl	r1, r0, sl
   17b88:	orr	r1, r1, r0, lsr fp
   17b8c:	lsl	r0, r0, ip
   17b90:	sbc	r5, r5, r9
   17b94:	cmp	ip, #0
   17b98:	beq	17c24 <__assert_fail@plt+0x6cf4>
   17b9c:	lsr	r6, r8, #1
   17ba0:	orr	r6, r6, r9, lsl #31
   17ba4:	lsr	r7, r9, #1
   17ba8:	mov	r2, ip
   17bac:	b	17bd0 <__assert_fail@plt+0x6ca0>
   17bb0:	subs	r3, r4, r6
   17bb4:	sbc	r8, r5, r7
   17bb8:	adds	r3, r3, r3
   17bbc:	adc	r8, r8, r8
   17bc0:	adds	r4, r3, #1
   17bc4:	adc	r5, r8, #0
   17bc8:	subs	r2, r2, #1
   17bcc:	beq	17bec <__assert_fail@plt+0x6cbc>
   17bd0:	cmp	r5, r7
   17bd4:	cmpeq	r4, r6
   17bd8:	bcs	17bb0 <__assert_fail@plt+0x6c80>
   17bdc:	adds	r4, r4, r4
   17be0:	adc	r5, r5, r5
   17be4:	subs	r2, r2, #1
   17be8:	bne	17bd0 <__assert_fail@plt+0x6ca0>
   17bec:	lsr	r3, r4, ip
   17bf0:	orr	r3, r3, r5, lsl fp
   17bf4:	lsr	r2, r5, ip
   17bf8:	orr	r3, r3, r5, lsr sl
   17bfc:	adds	r0, r0, r4
   17c00:	mov	r4, r3
   17c04:	lsl	r3, r2, ip
   17c08:	orr	r3, r3, r4, lsl sl
   17c0c:	lsl	ip, r4, ip
   17c10:	orr	r3, r3, r4, lsr fp
   17c14:	adc	r1, r1, r5
   17c18:	subs	r0, r0, ip
   17c1c:	mov	r5, r2
   17c20:	sbc	r1, r1, r3
   17c24:	cmp	lr, #0
   17c28:	strdne	r4, [lr]
   17c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17c34:	mov	r7, r0
   17c38:	ldr	r6, [pc, #72]	; 17c88 <__assert_fail@plt+0x6d58>
   17c3c:	ldr	r5, [pc, #72]	; 17c8c <__assert_fail@plt+0x6d5c>
   17c40:	add	r6, pc, r6
   17c44:	add	r5, pc, r5
   17c48:	sub	r6, r6, r5
   17c4c:	mov	r8, r1
   17c50:	mov	r9, r2
   17c54:	bl	10ca0 <calloc@plt-0x20>
   17c58:	asrs	r6, r6, #2
   17c5c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c60:	mov	r4, #0
   17c64:	add	r4, r4, #1
   17c68:	ldr	r3, [r5], #4
   17c6c:	mov	r2, r9
   17c70:	mov	r1, r8
   17c74:	mov	r0, r7
   17c78:	blx	r3
   17c7c:	cmp	r6, r4
   17c80:	bne	17c64 <__assert_fail@plt+0x6d34>
   17c84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c88:	andeq	r2, r1, ip, asr #5
   17c8c:	andeq	r2, r1, r4, asr #5
   17c90:	bx	lr
   17c94:	ldr	r3, [pc, #12]	; 17ca8 <__assert_fail@plt+0x6d78>
   17c98:	mov	r1, #0
   17c9c:	add	r3, pc, r3
   17ca0:	ldr	r2, [r3]
   17ca4:	b	10e58 <__cxa_atexit@plt>
   17ca8:	andeq	r2, r1, r4, asr #8

Disassembly of section .fini:

00017cac <.fini>:
   17cac:	push	{r3, lr}
   17cb0:	pop	{r3, pc}
