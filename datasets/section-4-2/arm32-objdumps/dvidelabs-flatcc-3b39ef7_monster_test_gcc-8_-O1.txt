
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test/monster_test:     file format elf32-littlearm


Disassembly of section .init:

00012948 <.init>:
   12948:	push	{r3, lr}
   1294c:	bl	12aac <_start@@Base+0x3c>
   12950:	pop	{r3, pc}

Disassembly of section .plt:

00012954 <strcmp@plt-0x14>:
   12954:	push	{lr}		; (str lr, [sp, #-4]!)
   12958:	ldr	lr, [pc, #4]	; 12964 <strcmp@plt-0x4>
   1295c:	add	lr, pc, lr
   12960:	ldr	pc, [lr, #8]!
   12964:	muleq	r2, ip, r6

00012968 <strcmp@plt>:
   12968:	add	ip, pc, #0, 12
   1296c:	add	ip, ip, #155648	; 0x26000
   12970:	ldr	pc, [ip, #1692]!	; 0x69c

00012974 <printf@plt>:
   12974:	add	ip, pc, #0, 12
   12978:	add	ip, ip, #155648	; 0x26000
   1297c:	ldr	pc, [ip, #1684]!	; 0x694

00012980 <free@plt>:
   12980:	add	ip, pc, #0, 12
   12984:	add	ip, ip, #155648	; 0x26000
   12988:	ldr	pc, [ip, #1676]!	; 0x68c

0001298c <memcpy@plt>:
   1298c:	add	ip, pc, #0, 12
   12990:	add	ip, ip, #155648	; 0x26000
   12994:	ldr	pc, [ip, #1668]!	; 0x684

00012998 <memcmp@plt>:
   12998:	add	ip, pc, #0, 12
   1299c:	add	ip, ip, #155648	; 0x26000
   129a0:	ldr	pc, [ip, #1660]!	; 0x67c

000129a4 <realloc@plt>:
   129a4:	add	ip, pc, #0, 12
   129a8:	add	ip, ip, #155648	; 0x26000
   129ac:	ldr	pc, [ip, #1652]!	; 0x674

000129b0 <fwrite@plt>:
   129b0:	add	ip, pc, #0, 12
   129b4:	add	ip, ip, #155648	; 0x26000
   129b8:	ldr	pc, [ip, #1644]!	; 0x66c

000129bc <gettimeofday@plt>:
   129bc:	add	ip, pc, #0, 12
   129c0:	add	ip, ip, #155648	; 0x26000
   129c4:	ldr	pc, [ip, #1636]!	; 0x664

000129c8 <puts@plt>:
   129c8:	add	ip, pc, #0, 12
   129cc:	add	ip, ip, #155648	; 0x26000
   129d0:	ldr	pc, [ip, #1628]!	; 0x65c

000129d4 <malloc@plt>:
   129d4:	add	ip, pc, #0, 12
   129d8:	add	ip, ip, #155648	; 0x26000
   129dc:	ldr	pc, [ip, #1620]!	; 0x654

000129e0 <__libc_start_main@plt>:
   129e0:	add	ip, pc, #0, 12
   129e4:	add	ip, ip, #155648	; 0x26000
   129e8:	ldr	pc, [ip, #1612]!	; 0x64c

000129ec <__gmon_start__@plt>:
   129ec:	add	ip, pc, #0, 12
   129f0:	add	ip, ip, #155648	; 0x26000
   129f4:	ldr	pc, [ip, #1604]!	; 0x644

000129f8 <strlen@plt>:
   129f8:	add	ip, pc, #0, 12
   129fc:	add	ip, ip, #155648	; 0x26000
   12a00:	ldr	pc, [ip, #1596]!	; 0x63c

00012a04 <fprintf@plt>:
   12a04:	add	ip, pc, #0, 12
   12a08:	add	ip, ip, #155648	; 0x26000
   12a0c:	ldr	pc, [ip, #1588]!	; 0x634

00012a10 <posix_memalign@plt>:
   12a10:	add	ip, pc, #0, 12
   12a14:	add	ip, ip, #155648	; 0x26000
   12a18:	ldr	pc, [ip, #1580]!	; 0x62c

00012a1c <memset@plt>:
   12a1c:	add	ip, pc, #0, 12
   12a20:	add	ip, ip, #155648	; 0x26000
   12a24:	ldr	pc, [ip, #1572]!	; 0x624

00012a28 <strncpy@plt>:
   12a28:	add	ip, pc, #0, 12
   12a2c:	add	ip, ip, #155648	; 0x26000
   12a30:	ldr	pc, [ip, #1564]!	; 0x61c

00012a34 <memchr@plt>:
   12a34:	add	ip, pc, #0, 12
   12a38:	add	ip, ip, #155648	; 0x26000
   12a3c:	ldr	pc, [ip, #1556]!	; 0x614

00012a40 <fputc@plt>:
   12a40:	add	ip, pc, #0, 12
   12a44:	add	ip, ip, #155648	; 0x26000
   12a48:	ldr	pc, [ip, #1548]!	; 0x60c

00012a4c <strncmp@plt>:
   12a4c:	add	ip, pc, #0, 12
   12a50:	add	ip, ip, #155648	; 0x26000
   12a54:	ldr	pc, [ip, #1540]!	; 0x604

00012a58 <abort@plt>:
   12a58:	add	ip, pc, #0, 12
   12a5c:	add	ip, ip, #155648	; 0x26000
   12a60:	ldr	pc, [ip, #1532]!	; 0x5fc

00012a64 <__assert_fail@plt>:
   12a64:	add	ip, pc, #0, 12
   12a68:	add	ip, ip, #155648	; 0x26000
   12a6c:	ldr	pc, [ip, #1524]!	; 0x5f4

Disassembly of section .text:

00012a70 <_start@@Base>:
   12a70:	mov	fp, #0
   12a74:	mov	lr, #0
   12a78:	pop	{r1}		; (ldr r1, [sp], #4)
   12a7c:	mov	r2, sp
   12a80:	push	{r2}		; (str r2, [sp, #-4]!)
   12a84:	push	{r0}		; (str r0, [sp, #-4]!)
   12a88:	ldr	ip, [pc, #16]	; 12aa0 <_start@@Base+0x30>
   12a8c:	push	{ip}		; (str ip, [sp, #-4]!)
   12a90:	ldr	r0, [pc, #12]	; 12aa4 <_start@@Base+0x34>
   12a94:	ldr	r3, [pc, #12]	; 12aa8 <_start@@Base+0x38>
   12a98:	bl	129e0 <__libc_start_main@plt>
   12a9c:	bl	12a58 <abort@plt>
   12aa0:	andeq	r4, r2, r4, lsr #17
   12aa4:	andeq	lr, r1, r0, lsl r2
   12aa8:	andeq	r4, r2, r4, asr #16
   12aac:	ldr	r3, [pc, #20]	; 12ac8 <_start@@Base+0x58>
   12ab0:	ldr	r2, [pc, #20]	; 12acc <_start@@Base+0x5c>
   12ab4:	add	r3, pc, r3
   12ab8:	ldr	r2, [r3, r2]
   12abc:	cmp	r2, #0
   12ac0:	bxeq	lr
   12ac4:	b	129ec <__gmon_start__@plt>
   12ac8:	andeq	r6, r2, r4, asr #10
   12acc:	andeq	r0, r0, r4, rrx
   12ad0:	ldr	r0, [pc, #24]	; 12af0 <_start@@Base+0x80>
   12ad4:	ldr	r3, [pc, #24]	; 12af4 <_start@@Base+0x84>
   12ad8:	cmp	r3, r0
   12adc:	bxeq	lr
   12ae0:	ldr	r3, [pc, #16]	; 12af8 <_start@@Base+0x88>
   12ae4:	cmp	r3, #0
   12ae8:	bxeq	lr
   12aec:	bx	r3
   12af0:	andeq	r9, r3, r0, ror r0
   12af4:	andeq	r9, r3, r0, ror r0
   12af8:	andeq	r0, r0, r0
   12afc:	ldr	r0, [pc, #36]	; 12b28 <_start@@Base+0xb8>
   12b00:	ldr	r1, [pc, #36]	; 12b2c <_start@@Base+0xbc>
   12b04:	sub	r1, r1, r0
   12b08:	asr	r1, r1, #2
   12b0c:	add	r1, r1, r1, lsr #31
   12b10:	asrs	r1, r1, #1
   12b14:	bxeq	lr
   12b18:	ldr	r3, [pc, #16]	; 12b30 <_start@@Base+0xc0>
   12b1c:	cmp	r3, #0
   12b20:	bxeq	lr
   12b24:	bx	r3
   12b28:	andeq	r9, r3, r0, ror r0
   12b2c:	andeq	r9, r3, r0, ror r0
   12b30:	andeq	r0, r0, r0
   12b34:	push	{r4, lr}
   12b38:	ldr	r4, [pc, #24]	; 12b58 <_start@@Base+0xe8>
   12b3c:	ldrb	r3, [r4]
   12b40:	cmp	r3, #0
   12b44:	popne	{r4, pc}
   12b48:	bl	12ad0 <_start@@Base+0x60>
   12b4c:	mov	r3, #1
   12b50:	strb	r3, [r4]
   12b54:	pop	{r4, pc}
   12b58:	andeq	r9, r3, r4, ror r0
   12b5c:	b	12afc <_start@@Base+0x8c>
   12b60:	mov	r0, #0
   12b64:	bx	lr
   12b68:	mov	r0, #0
   12b6c:	bx	lr
   12b70:	strd	r4, [sp, #-12]!
   12b74:	str	lr, [sp, #8]
   12b78:	vpush	{d8-d9}
   12b7c:	sub	sp, sp, #12
   12b80:	str	r1, [sp, #4]
   12b84:	mov	r4, r2
   12b88:	mov	r5, r3
   12b8c:	vsub.f64	d8, d1, d0
   12b90:	mov	r1, r0
   12b94:	movw	r0, #20196	; 0x4ee4
   12b98:	movt	r0, #2
   12b9c:	bl	12974 <printf@plt>
   12ba0:	vmov	r2, r3, d8
   12ba4:	movw	r0, #20212	; 0x4ef4
   12ba8:	movt	r0, #2
   12bac:	bl	12974 <printf@plt>
   12bb0:	mov	r1, r4
   12bb4:	movw	r0, #20236	; 0x4f0c
   12bb8:	movt	r0, #2
   12bbc:	bl	12974 <printf@plt>
   12bc0:	ldr	r1, [sp, #4]
   12bc4:	movw	r0, #20252	; 0x4f1c
   12bc8:	movt	r0, #2
   12bcc:	bl	12974 <printf@plt>
   12bd0:	vmov	s15, r4
   12bd4:	vcvt.f64.s32	d9, s15
   12bd8:	vldr	s15, [sp, #4]
   12bdc:	vcvt.f64.u32	d7, s15
   12be0:	vmul.f64	d7, d7, d9
   12be4:	vldr	d5, [pc, #268]	; 12cf8 <_start@@Base+0x288>
   12be8:	vdiv.f64	d6, d7, d5
   12bec:	vdiv.f64	d7, d6, d8
   12bf0:	vmov	r2, r3, d7
   12bf4:	movw	r0, #20272	; 0x4f30
   12bf8:	movt	r0, #2
   12bfc:	bl	12974 <printf@plt>
   12c00:	vdiv.f64	d7, d9, d8
   12c04:	vmov	r2, r3, d7
   12c08:	movw	r0, #20296	; 0x4f48
   12c0c:	movt	r0, #2
   12c10:	bl	12974 <printf@plt>
   12c14:	cmp	r5, #0
   12c18:	cmpne	r4, #1
   12c1c:	bne	12c78 <_start@@Base+0x208>
   12c20:	vldr	d7, [pc, #216]	; 12d00 <_start@@Base+0x290>
   12c24:	vmul.f64	d8, d8, d7
   12c28:	vdiv.f64	d7, d8, d9
   12c2c:	vldr	d6, [pc, #212]	; 12d08 <_start@@Base+0x298>
   12c30:	vcmpe.f64	d7, d6
   12c34:	vmrs	APSR_nzcv, fpscr
   12c38:	bmi	12c98 <_start@@Base+0x228>
   12c3c:	vldr	d6, [pc, #180]	; 12cf8 <_start@@Base+0x288>
   12c40:	vcmpe.f64	d7, d6
   12c44:	vmrs	APSR_nzcv, fpscr
   12c48:	bmi	12cc0 <_start@@Base+0x250>
   12c4c:	vldr	d6, [pc, #172]	; 12d00 <_start@@Base+0x290>
   12c50:	vcmpe.f64	d7, d6
   12c54:	vmrs	APSR_nzcv, fpscr
   12c58:	bpl	12cdc <_start@@Base+0x26c>
   12c5c:	vldr	d6, [pc, #148]	; 12cf8 <_start@@Base+0x288>
   12c60:	vdiv.f64	d7, d7, d6
   12c64:	vmov	r2, r3, d7
   12c68:	movw	r0, #20416	; 0x4fc0
   12c6c:	movt	r0, #2
   12c70:	bl	12974 <printf@plt>
   12c74:	b	12ca8 <_start@@Base+0x238>
   12c78:	vldr	d7, [pc, #144]	; 12d10 <_start@@Base+0x2a0>
   12c7c:	vdiv.f64	d7, d7, d8
   12c80:	vmov	r2, r3, d7
   12c84:	mov	r1, r5
   12c88:	movw	r0, #20332	; 0x4f6c
   12c8c:	movt	r0, #2
   12c90:	bl	12974 <printf@plt>
   12c94:	b	12c20 <_start@@Base+0x1b0>
   12c98:	vmov	r2, r3, d7
   12c9c:	movw	r0, #20368	; 0x4f90
   12ca0:	movt	r0, #2
   12ca4:	bl	12974 <printf@plt>
   12ca8:	mov	r0, #0
   12cac:	add	sp, sp, #12
   12cb0:	vpop	{d8-d9}
   12cb4:	ldrd	r4, [sp]
   12cb8:	add	sp, sp, #8
   12cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   12cc0:	vldr	d6, [pc, #64]	; 12d08 <_start@@Base+0x298>
   12cc4:	vdiv.f64	d7, d7, d6
   12cc8:	vmov	r2, r3, d7
   12ccc:	movw	r0, #20392	; 0x4fa8
   12cd0:	movt	r0, #2
   12cd4:	bl	12974 <printf@plt>
   12cd8:	b	12ca8 <_start@@Base+0x238>
   12cdc:	vldr	d6, [pc, #28]	; 12d00 <_start@@Base+0x290>
   12ce0:	vdiv.f64	d7, d7, d6
   12ce4:	vmov	r2, r3, d7
   12ce8:	movw	r0, #20440	; 0x4fd8
   12cec:	movt	r0, #2
   12cf0:	bl	12974 <printf@plt>
   12cf4:	b	12ca8 <_start@@Base+0x238>
   12cf8:	andeq	r0, r0, r0
   12cfc:	smlawbmi	lr, r0, r4, r8
   12d00:	andeq	r0, r0, r0
   12d04:	bicmi	ip, sp, r5, ror #26
   12d08:	andeq	r0, r0, r0
   12d0c:	addmi	r4, pc, r0
   12d10:	andeq	r0, r0, r0
   12d14:	svccc	0x00f00000	; IMB
   12d18:	cmp	r0, #0
   12d1c:	beq	12d54 <_start@@Base+0x2e4>
   12d20:	ldr	r3, [r0]
   12d24:	sub	r3, r0, r3
   12d28:	ldrh	r2, [r3]
   12d2c:	cmp	r2, #23
   12d30:	bls	12d7c <_start@@Base+0x30c>
   12d34:	ldrh	r2, [r3, #22]
   12d38:	cmp	r2, #0
   12d3c:	beq	12d84 <_start@@Base+0x314>
   12d40:	add	r3, r0, r2
   12d44:	ldr	r0, [r0, r2]
   12d48:	add	r0, r0, #4
   12d4c:	add	r0, r3, r0
   12d50:	bx	lr
   12d54:	str	r4, [sp, #-8]!
   12d58:	str	lr, [sp, #4]
   12d5c:	movw	r3, #18612	; 0x48b4
   12d60:	movt	r3, #2
   12d64:	movw	r2, #718	; 0x2ce
   12d68:	movw	r1, #20464	; 0x4ff0
   12d6c:	movt	r1, #2
   12d70:	movw	r0, #20564	; 0x5054
   12d74:	movt	r0, #2
   12d78:	bl	12a64 <__assert_fail@plt>
   12d7c:	mov	r0, #0
   12d80:	bx	lr
   12d84:	mov	r0, #0
   12d88:	bx	lr
   12d8c:	add	r2, r0, r1, lsl #2
   12d90:	cmp	r0, #0
   12d94:	beq	12db4 <_start@@Base+0x344>
   12d98:	ldr	r3, [r0, #-4]
   12d9c:	cmp	r1, r3
   12da0:	bcs	12db4 <_start@@Base+0x344>
   12da4:	ldr	r3, [r0, r1, lsl #2]
   12da8:	add	r3, r3, #4
   12dac:	add	r0, r2, r3
   12db0:	bx	lr
   12db4:	str	r4, [sp, #-8]!
   12db8:	str	lr, [sp, #4]
   12dbc:	ldr	r3, [pc, #20]	; 12dd8 <_start@@Base+0x368>
   12dc0:	mov	r2, #108	; 0x6c
   12dc4:	movw	r1, #20604	; 0x507c
   12dc8:	movt	r1, #2
   12dcc:	movw	r0, #20708	; 0x50e4
   12dd0:	movt	r0, #2
   12dd4:	bl	12a64 <__assert_fail@plt>
   12dd8:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   12ddc:	cmp	r0, #0
   12de0:	beq	12e18 <_start@@Base+0x3a8>
   12de4:	ldr	r3, [r0]
   12de8:	sub	r3, r0, r3
   12dec:	ldrh	r2, [r3]
   12df0:	cmp	r2, #27
   12df4:	bls	12e3c <_start@@Base+0x3cc>
   12df8:	ldrh	r2, [r3, #26]
   12dfc:	cmp	r2, #0
   12e00:	beq	12e44 <_start@@Base+0x3d4>
   12e04:	add	r3, r0, r2
   12e08:	ldr	r0, [r0, r2]
   12e0c:	add	r0, r0, #4
   12e10:	add	r0, r3, r0
   12e14:	bx	lr
   12e18:	str	r4, [sp, #-8]!
   12e1c:	str	lr, [sp, #4]
   12e20:	ldr	r3, [pc, #36]	; 12e4c <_start@@Base+0x3dc>
   12e24:	movw	r2, #711	; 0x2c7
   12e28:	movw	r1, #20464	; 0x4ff0
   12e2c:	movt	r1, #2
   12e30:	movw	r0, #20564	; 0x5054
   12e34:	movt	r0, #2
   12e38:	bl	12a64 <__assert_fail@plt>
   12e3c:	mov	r0, #0
   12e40:	bx	lr
   12e44:	mov	r0, #0
   12e48:	bx	lr
   12e4c:	strdeq	r4, [r2], -r0
   12e50:	add	r3, r0, r1, lsl #2
   12e54:	cmp	r0, #0
   12e58:	beq	12e74 <_start@@Base+0x404>
   12e5c:	ldr	r2, [r0, #-4]
   12e60:	cmp	r1, r2
   12e64:	bcs	12e74 <_start@@Base+0x404>
   12e68:	ldr	r0, [r0, r1, lsl #2]
   12e6c:	add	r0, r3, r0
   12e70:	bx	lr
   12e74:	str	r4, [sp, #-8]!
   12e78:	str	lr, [sp, #4]
   12e7c:	ldr	r3, [pc, #20]	; 12e98 <_start@@Base+0x428>
   12e80:	movw	r2, #693	; 0x2b5
   12e84:	movw	r1, #20464	; 0x4ff0
   12e88:	movt	r1, #2
   12e8c:	movw	r0, #20708	; 0x50e4
   12e90:	movt	r0, #2
   12e94:	bl	12a64 <__assert_fail@plt>
   12e98:	andeq	r4, r2, ip, lsl r9
   12e9c:	cmp	r0, #0
   12ea0:	beq	12ecc <_start@@Base+0x45c>
   12ea4:	ldr	r3, [r0]
   12ea8:	sub	r3, r0, r3
   12eac:	ldrh	r2, [r3]
   12eb0:	cmp	r2, #19
   12eb4:	bls	12ef0 <_start@@Base+0x480>
   12eb8:	ldrh	r3, [r3, #18]
   12ebc:	cmp	r3, #0
   12ec0:	beq	12ef8 <_start@@Base+0x488>
   12ec4:	ldrb	r0, [r0, r3]
   12ec8:	bx	lr
   12ecc:	str	r4, [sp, #-8]!
   12ed0:	str	lr, [sp, #4]
   12ed4:	ldr	r3, [pc, #36]	; 12f00 <_start@@Base+0x490>
   12ed8:	movw	r2, #717	; 0x2cd
   12edc:	movw	r1, #20464	; 0x4ff0
   12ee0:	movt	r1, #2
   12ee4:	movw	r0, #20564	; 0x5054
   12ee8:	movt	r0, #2
   12eec:	bl	12a64 <__assert_fail@plt>
   12ef0:	mov	r0, #0
   12ef4:	bx	lr
   12ef8:	mov	r0, #0
   12efc:	bx	lr
   12f00:	andeq	r4, r2, ip, lsr r9
   12f04:	cmp	r0, #0
   12f08:	beq	12f3c <_start@@Base+0x4cc>
   12f0c:	ldr	r3, [r0]
   12f10:	sub	r3, r0, r3
   12f14:	ldrh	r2, [r3]
   12f18:	cmp	r2, #21
   12f1c:	bls	12f60 <_start@@Base+0x4f0>
   12f20:	ldrh	r2, [r3, #20]
   12f24:	cmp	r2, #0
   12f28:	beq	12f68 <_start@@Base+0x4f8>
   12f2c:	add	r3, r0, r2
   12f30:	ldr	r0, [r0, r2]
   12f34:	add	r0, r3, r0
   12f38:	bx	lr
   12f3c:	str	r4, [sp, #-8]!
   12f40:	str	lr, [sp, #4]
   12f44:	ldr	r3, [pc, #36]	; 12f70 <_start@@Base+0x500>
   12f48:	movw	r2, #717	; 0x2cd
   12f4c:	movw	r1, #20464	; 0x4ff0
   12f50:	movt	r1, #2
   12f54:	movw	r0, #20564	; 0x5054
   12f58:	movt	r0, #2
   12f5c:	bl	12a64 <__assert_fail@plt>
   12f60:	mov	r0, #0
   12f64:	bx	lr
   12f68:	mov	r0, #0
   12f6c:	bx	lr
   12f70:	andeq	r4, r2, r0, ror #18
   12f74:	str	r4, [sp, #-8]!
   12f78:	str	lr, [sp, #4]
   12f7c:	cmp	r0, #0
   12f80:	beq	12fc0 <_start@@Base+0x550>
   12f84:	ldr	r3, [r0]
   12f88:	sub	r3, r0, r3
   12f8c:	ldrh	r2, [r3]
   12f90:	cmp	r2, #11
   12f94:	bls	12fdc <_start@@Base+0x56c>
   12f98:	ldrh	r3, [r3, #10]
   12f9c:	cmp	r3, #0
   12fa0:	beq	12fdc <_start@@Base+0x56c>
   12fa4:	add	r2, r0, r3
   12fa8:	ldr	r0, [r0, r3]
   12fac:	add	r0, r0, #4
   12fb0:	add	r0, r2, r0
   12fb4:	ldr	r4, [sp]
   12fb8:	add	sp, sp, #4
   12fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   12fc0:	ldr	r3, [pc, #48]	; 12ff8 <_start@@Base+0x588>
   12fc4:	movw	r2, #699	; 0x2bb
   12fc8:	movw	r1, #20464	; 0x4ff0
   12fcc:	movt	r1, #2
   12fd0:	movw	r0, #20564	; 0x5054
   12fd4:	movt	r0, #2
   12fd8:	bl	12a64 <__assert_fail@plt>
   12fdc:	ldr	r3, [pc, #20]	; 12ff8 <_start@@Base+0x588>
   12fe0:	movw	r2, #699	; 0x2bb
   12fe4:	movw	r1, #20464	; 0x4ff0
   12fe8:	movt	r1, #2
   12fec:	movw	r0, #20764	; 0x511c
   12ff0:	movt	r0, #2
   12ff4:	bl	12a64 <__assert_fail@plt>
   12ff8:	andeq	r4, r2, ip, ror r9
   12ffc:	cmp	r0, #0
   13000:	beq	1302c <_start@@Base+0x5bc>
   13004:	ldr	r3, [r0]
   13008:	sub	r3, r0, r3
   1300c:	ldrh	r2, [r3]
   13010:	cmp	r2, #5
   13014:	bls	13050 <_start@@Base+0x5e0>
   13018:	ldrh	r3, [r3, #4]
   1301c:	cmp	r3, #0
   13020:	beq	13058 <_start@@Base+0x5e8>
   13024:	ldr	r0, [r0, r3]
   13028:	bx	lr
   1302c:	str	r4, [sp, #-8]!
   13030:	str	lr, [sp, #4]
   13034:	ldr	r3, [pc, #36]	; 13060 <_start@@Base+0x5f0>
   13038:	movw	r2, #770	; 0x302
   1303c:	movw	r1, #20464	; 0x4ff0
   13040:	movt	r1, #2
   13044:	movw	r0, #20564	; 0x5054
   13048:	movt	r0, #2
   1304c:	bl	12a64 <__assert_fail@plt>
   13050:	mov	r0, #0
   13054:	bx	lr
   13058:	mov	r0, #0
   1305c:	bx	lr
   13060:	muleq	r2, r8, r9
   13064:	str	r4, [sp, #-8]!
   13068:	str	lr, [sp, #4]
   1306c:	mov	r4, r0
   13070:	mov	r3, #0
   13074:	mov	r2, r3
   13078:	movw	r1, #20800	; 0x5140
   1307c:	movt	r1, #2
   13080:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   13084:	cmp	r0, #0
   13088:	bne	130a4 <_start@@Base+0x634>
   1308c:	mov	r1, #36	; 0x24
   13090:	mov	r0, r4
   13094:	bl	20608 <flatcc_builder_start_table@@Base>
   13098:	ldr	r4, [sp]
   1309c:	add	sp, sp, #4
   130a0:	pop	{pc}		; (ldr pc, [sp], #4)
   130a4:	mvn	r0, #0
   130a8:	b	13098 <_start@@Base+0x628>
   130ac:	str	r4, [sp, #-8]!
   130b0:	str	lr, [sp, #4]
   130b4:	mov	r3, #4
   130b8:	mov	r2, r3
   130bc:	mov	r1, #0
   130c0:	bl	2342c <flatcc_verify_field@@Base>
   130c4:	ldr	r4, [sp]
   130c8:	add	sp, sp, #4
   130cc:	pop	{pc}		; (ldr pc, [sp], #4)
   130d0:	str	r4, [sp, #-8]!
   130d4:	str	lr, [sp, #4]
   130d8:	mov	r4, r0
   130dc:	mov	r3, #8
   130e0:	mov	r2, r3
   130e4:	mov	r1, #0
   130e8:	bl	2342c <flatcc_verify_field@@Base>
   130ec:	cmp	r0, #0
   130f0:	beq	13100 <_start@@Base+0x690>
   130f4:	ldr	r4, [sp]
   130f8:	add	sp, sp, #4
   130fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13100:	mov	r3, #4
   13104:	mov	r2, r3
   13108:	mov	r1, #1
   1310c:	mov	r0, r4
   13110:	bl	2342c <flatcc_verify_field@@Base>
   13114:	b	130f4 <_start@@Base+0x684>
   13118:	str	r4, [sp, #-8]!
   1311c:	str	lr, [sp, #4]
   13120:	mov	r4, r0
   13124:	mov	r3, #8
   13128:	mov	r2, r3
   1312c:	mov	r1, #0
   13130:	bl	2342c <flatcc_verify_field@@Base>
   13134:	cmp	r0, #0
   13138:	beq	13148 <_start@@Base+0x6d8>
   1313c:	ldr	r4, [sp]
   13140:	add	sp, sp, #4
   13144:	pop	{pc}		; (ldr pc, [sp], #4)
   13148:	mov	r3, #4
   1314c:	mov	r2, r3
   13150:	mov	r1, #1
   13154:	mov	r0, r4
   13158:	bl	2342c <flatcc_verify_field@@Base>
   1315c:	b	1313c <_start@@Base+0x6cc>
   13160:	str	r4, [sp, #-8]!
   13164:	str	lr, [sp, #4]
   13168:	mov	r4, r0
   1316c:	mov	r3, #1
   13170:	mov	r2, r3
   13174:	mov	r1, #0
   13178:	bl	2342c <flatcc_verify_field@@Base>
   1317c:	cmp	r0, #0
   13180:	beq	13190 <_start@@Base+0x720>
   13184:	ldr	r4, [sp]
   13188:	add	sp, sp, #4
   1318c:	pop	{pc}		; (ldr pc, [sp], #4)
   13190:	mov	r3, #1
   13194:	mov	r2, r3
   13198:	mov	r1, r3
   1319c:	mov	r0, r4
   131a0:	bl	2342c <flatcc_verify_field@@Base>
   131a4:	cmp	r0, #0
   131a8:	bne	13184 <_start@@Base+0x714>
   131ac:	mov	r3, #1
   131b0:	mov	r2, r3
   131b4:	mov	r1, #2
   131b8:	mov	r0, r4
   131bc:	bl	2342c <flatcc_verify_field@@Base>
   131c0:	cmp	r0, #0
   131c4:	bne	13184 <_start@@Base+0x714>
   131c8:	mov	r3, #1
   131cc:	mov	r2, r3
   131d0:	mov	r1, #3
   131d4:	mov	r0, r4
   131d8:	bl	2342c <flatcc_verify_field@@Base>
   131dc:	b	13184 <_start@@Base+0x714>
   131e0:	str	r4, [sp, #-8]!
   131e4:	str	lr, [sp, #4]
   131e8:	mov	r3, #1
   131ec:	mov	r2, #0
   131f0:	mov	r1, r2
   131f4:	bl	2342c <flatcc_verify_field@@Base>
   131f8:	ldr	r4, [sp]
   131fc:	add	sp, sp, #4
   13200:	pop	{pc}		; (ldr pc, [sp], #4)
   13204:	str	r4, [sp, #-8]!
   13208:	str	lr, [sp, #4]
   1320c:	sub	sp, sp, #8
   13210:	mov	r4, r0
   13214:	mov	r3, #1
   13218:	mov	r2, r3
   1321c:	mov	r1, #0
   13220:	bl	2342c <flatcc_verify_field@@Base>
   13224:	cmp	r0, #0
   13228:	beq	1323c <_start@@Base+0x7cc>
   1322c:	add	sp, sp, #8
   13230:	ldr	r4, [sp]
   13234:	add	sp, sp, #4
   13238:	pop	{pc}		; (ldr pc, [sp], #4)
   1323c:	mov	r3, #1
   13240:	mov	r2, r3
   13244:	mov	r1, r3
   13248:	mov	r0, r4
   1324c:	bl	2342c <flatcc_verify_field@@Base>
   13250:	cmp	r0, #0
   13254:	bne	1322c <_start@@Base+0x7bc>
   13258:	mov	r3, #2
   1325c:	mov	r2, r3
   13260:	mov	r1, r3
   13264:	mov	r0, r4
   13268:	bl	2342c <flatcc_verify_field@@Base>
   1326c:	cmp	r0, #0
   13270:	bne	1322c <_start@@Base+0x7bc>
   13274:	mov	r3, #2
   13278:	mov	r2, r3
   1327c:	mov	r1, #3
   13280:	mov	r0, r4
   13284:	bl	2342c <flatcc_verify_field@@Base>
   13288:	cmp	r0, #0
   1328c:	bne	1322c <_start@@Base+0x7bc>
   13290:	mov	r3, #4
   13294:	mov	r2, r3
   13298:	mov	r1, r3
   1329c:	mov	r0, r4
   132a0:	bl	2342c <flatcc_verify_field@@Base>
   132a4:	cmp	r0, #0
   132a8:	bne	1322c <_start@@Base+0x7bc>
   132ac:	mov	r3, #4
   132b0:	mov	r2, r3
   132b4:	mov	r1, #5
   132b8:	mov	r0, r4
   132bc:	bl	2342c <flatcc_verify_field@@Base>
   132c0:	cmp	r0, #0
   132c4:	bne	1322c <_start@@Base+0x7bc>
   132c8:	mov	r3, #8
   132cc:	mov	r2, r3
   132d0:	mov	r1, #6
   132d4:	mov	r0, r4
   132d8:	bl	2342c <flatcc_verify_field@@Base>
   132dc:	cmp	r0, #0
   132e0:	bne	1322c <_start@@Base+0x7bc>
   132e4:	mov	r3, #8
   132e8:	mov	r2, r3
   132ec:	mov	r1, #7
   132f0:	mov	r0, r4
   132f4:	bl	2342c <flatcc_verify_field@@Base>
   132f8:	cmp	r0, #0
   132fc:	bne	1322c <_start@@Base+0x7bc>
   13300:	mov	r3, #4
   13304:	mov	r2, r3
   13308:	mov	r1, #8
   1330c:	mov	r0, r4
   13310:	bl	2342c <flatcc_verify_field@@Base>
   13314:	cmp	r0, #0
   13318:	bne	1322c <_start@@Base+0x7bc>
   1331c:	mov	r3, #8
   13320:	mov	r2, r3
   13324:	mov	r1, #9
   13328:	mov	r0, r4
   1332c:	bl	2342c <flatcc_verify_field@@Base>
   13330:	cmp	r0, #0
   13334:	bne	1322c <_start@@Base+0x7bc>
   13338:	mvn	r3, #0
   1333c:	str	r3, [sp, #4]
   13340:	mov	r3, #1
   13344:	str	r3, [sp]
   13348:	mov	r2, #0
   1334c:	mov	r1, #10
   13350:	mov	r0, r4
   13354:	bl	23540 <flatcc_verify_vector_field@@Base>
   13358:	cmp	r0, #0
   1335c:	bne	1322c <_start@@Base+0x7bc>
   13360:	mvn	r3, #-536870912	; 0xe0000000
   13364:	str	r3, [sp, #4]
   13368:	mov	r3, #8
   1336c:	str	r3, [sp]
   13370:	mov	r2, #0
   13374:	mov	r1, #11
   13378:	mov	r0, r4
   1337c:	bl	23540 <flatcc_verify_vector_field@@Base>
   13380:	b	1322c <_start@@Base+0x7bc>
   13384:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13388:	strd	r6, [sp, #8]
   1338c:	strd	r8, [sp, #16]
   13390:	strd	sl, [sp, #24]
   13394:	str	lr, [sp, #32]
   13398:	sub	sp, sp, #28
   1339c:	mov	r5, r1
   133a0:	mov	r8, r2
   133a4:	mov	r6, r3
   133a8:	subs	r2, r0, #0
   133ac:	beq	133c0 <_start@@Base+0x950>
   133b0:	movw	r1, #20808	; 0x5148
   133b4:	movt	r1, #2
   133b8:	mov	r0, r3
   133bc:	bl	12a04 <fprintf@plt>
   133c0:	cmp	r8, #0
   133c4:	beq	134b4 <_start@@Base+0xa44>
   133c8:	sub	r5, r5, #1
   133cc:	mov	r4, #0
   133d0:	movw	r9, #20824	; 0x5158
   133d4:	movt	r9, #2
   133d8:	movw	sl, #20816	; 0x5150
   133dc:	movt	sl, #2
   133e0:	movw	r7, #20832	; 0x5160
   133e4:	movt	r7, #2
   133e8:	b	13450 <_start@@Base+0x9e0>
   133ec:	add	r2, sp, #4
   133f0:	mov	r1, sl
   133f4:	mov	r0, r6
   133f8:	bl	12a04 <fprintf@plt>
   133fc:	mov	r2, r4
   13400:	mov	r1, r9
   13404:	mov	r0, r6
   13408:	bl	12a04 <fprintf@plt>
   1340c:	ldrb	r2, [r5, #1]!
   13410:	mov	r1, r7
   13414:	mov	r0, r6
   13418:	bl	12a04 <fprintf@plt>
   1341c:	ldrb	r2, [r5]
   13420:	sub	r3, r2, #32
   13424:	uxtb	r3, r3
   13428:	cmp	r3, #95	; 0x5f
   1342c:	movcs	r2, #46	; 0x2e
   13430:	add	r3, sp, #24
   13434:	add	r3, r3, fp
   13438:	strb	r2, [r3, #-20]	; 0xffffffec
   1343c:	mov	r2, #0
   13440:	strb	r2, [r3, #-19]	; 0xffffffed
   13444:	add	r4, r4, #1
   13448:	cmp	r8, r4
   1344c:	beq	1347c <_start@@Base+0xa0c>
   13450:	ands	fp, r4, #15
   13454:	bne	13464 <_start@@Base+0x9f4>
   13458:	cmp	r4, #0
   1345c:	beq	133fc <_start@@Base+0x98c>
   13460:	b	133ec <_start@@Base+0x97c>
   13464:	tst	r4, #7
   13468:	bne	1340c <_start@@Base+0x99c>
   1346c:	mov	r1, r6
   13470:	mov	r0, #32
   13474:	bl	12a40 <fputc@plt>
   13478:	b	1340c <_start@@Base+0x99c>
   1347c:	tst	r4, #15
   13480:	beq	134b4 <_start@@Base+0xa44>
   13484:	movw	r5, #20840	; 0x5168
   13488:	movt	r5, #2
   1348c:	mov	r8, #3
   13490:	mov	r7, #1
   13494:	mov	r3, r6
   13498:	mov	r2, r8
   1349c:	mov	r1, r7
   134a0:	mov	r0, r5
   134a4:	bl	129b0 <fwrite@plt>
   134a8:	add	r4, r4, #1
   134ac:	tst	r4, #15
   134b0:	bne	13494 <_start@@Base+0xa24>
   134b4:	add	r2, sp, #4
   134b8:	movw	r1, #20816	; 0x5150
   134bc:	movt	r1, #2
   134c0:	mov	r0, r6
   134c4:	bl	12a04 <fprintf@plt>
   134c8:	add	sp, sp, #28
   134cc:	ldrd	r4, [sp]
   134d0:	ldrd	r6, [sp, #8]
   134d4:	ldrd	r8, [sp, #16]
   134d8:	ldrd	sl, [sp, #24]
   134dc:	add	sp, sp, #32
   134e0:	pop	{pc}		; (ldr pc, [sp], #4)
   134e4:	strd	r4, [sp, #-16]!
   134e8:	str	r6, [sp, #8]
   134ec:	str	lr, [sp, #12]
   134f0:	mov	r4, r0
   134f4:	bl	22020 <flatcc_builder_create_string_str@@Base>
   134f8:	subs	r5, r0, #0
   134fc:	beq	1352c <_start@@Base+0xabc>
   13500:	mov	r1, #3
   13504:	mov	r0, r4
   13508:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1350c:	cmp	r0, #0
   13510:	beq	13534 <_start@@Base+0xac4>
   13514:	str	r5, [r0]
   13518:	mov	r0, #0
   1351c:	ldrd	r4, [sp]
   13520:	ldr	r6, [sp, #8]
   13524:	add	sp, sp, #12
   13528:	pop	{pc}		; (ldr pc, [sp], #4)
   1352c:	mvn	r0, #0
   13530:	b	1351c <_start@@Base+0xaac>
   13534:	mvn	r0, #0
   13538:	b	1351c <_start@@Base+0xaac>
   1353c:	str	r4, [sp, #-8]!
   13540:	str	lr, [sp, #4]
   13544:	mov	r4, r0
   13548:	mov	r2, #0
   1354c:	mov	r1, r2
   13550:	bl	234a4 <flatcc_verify_string_field@@Base>
   13554:	cmp	r0, #0
   13558:	beq	13568 <_start@@Base+0xaf8>
   1355c:	ldr	r4, [sp]
   13560:	add	sp, sp, #4
   13564:	pop	{pc}		; (ldr pc, [sp], #4)
   13568:	mov	r3, #8
   1356c:	mov	r2, r3
   13570:	mov	r1, #1
   13574:	mov	r0, r4
   13578:	bl	2342c <flatcc_verify_field@@Base>
   1357c:	cmp	r0, #0
   13580:	bne	1355c <_start@@Base+0xaec>
   13584:	mov	r3, #2
   13588:	mov	r2, r3
   1358c:	mov	r1, r3
   13590:	mov	r0, r4
   13594:	bl	2342c <flatcc_verify_field@@Base>
   13598:	b	1355c <_start@@Base+0xaec>
   1359c:	str	r4, [sp, #-8]!
   135a0:	str	lr, [sp, #4]
   135a4:	mov	r4, r0
   135a8:	mov	r2, #0
   135ac:	mov	r1, r2
   135b0:	bl	234a4 <flatcc_verify_string_field@@Base>
   135b4:	cmp	r0, #0
   135b8:	beq	135c8 <_start@@Base+0xb58>
   135bc:	ldr	r4, [sp]
   135c0:	add	sp, sp, #4
   135c4:	pop	{pc}		; (ldr pc, [sp], #4)
   135c8:	mov	r3, #4
   135cc:	mov	r2, r3
   135d0:	mov	r1, #1
   135d4:	mov	r0, r4
   135d8:	bl	2342c <flatcc_verify_field@@Base>
   135dc:	cmp	r0, #0
   135e0:	bne	135bc <_start@@Base+0xb4c>
   135e4:	mov	r2, #0
   135e8:	mov	r1, #2
   135ec:	mov	r0, r4
   135f0:	bl	234a4 <flatcc_verify_string_field@@Base>
   135f4:	cmp	r0, #0
   135f8:	bne	135bc <_start@@Base+0xb4c>
   135fc:	mov	r3, #8
   13600:	mov	r2, r3
   13604:	mov	r1, #3
   13608:	mov	r0, r4
   1360c:	bl	2342c <flatcc_verify_field@@Base>
   13610:	cmp	r0, #0
   13614:	bne	135bc <_start@@Base+0xb4c>
   13618:	mov	r2, #0
   1361c:	mov	r1, #4
   13620:	mov	r0, r4
   13624:	bl	234a4 <flatcc_verify_string_field@@Base>
   13628:	cmp	r0, #0
   1362c:	bne	135bc <_start@@Base+0xb4c>
   13630:	mov	r3, #8
   13634:	mov	r2, r3
   13638:	mov	r1, #5
   1363c:	mov	r0, r4
   13640:	bl	2342c <flatcc_verify_field@@Base>
   13644:	cmp	r0, #0
   13648:	bne	135bc <_start@@Base+0xb4c>
   1364c:	mov	r3, #4
   13650:	mov	r2, r3
   13654:	mov	r1, #6
   13658:	mov	r0, r4
   1365c:	bl	2342c <flatcc_verify_field@@Base>
   13660:	cmp	r0, #0
   13664:	bne	135bc <_start@@Base+0xb4c>
   13668:	mov	r3, #8
   1366c:	mov	r2, r3
   13670:	mov	r1, #7
   13674:	mov	r0, r4
   13678:	bl	2342c <flatcc_verify_field@@Base>
   1367c:	cmp	r0, #0
   13680:	bne	135bc <_start@@Base+0xb4c>
   13684:	mov	r3, #4
   13688:	mov	r2, r3
   1368c:	mov	r1, #8
   13690:	mov	r0, r4
   13694:	bl	2342c <flatcc_verify_field@@Base>
   13698:	b	135bc <_start@@Base+0xb4c>
   1369c:	str	r4, [sp, #-8]!
   136a0:	str	lr, [sp, #4]
   136a4:	mov	r4, r0
   136a8:	movw	r3, #13724	; 0x359c
   136ac:	movt	r3, #1
   136b0:	mov	r2, #0
   136b4:	mov	r1, r2
   136b8:	bl	237c8 <flatcc_verify_table_field@@Base>
   136bc:	cmp	r0, #0
   136c0:	beq	136d0 <_start@@Base+0xc60>
   136c4:	ldr	r4, [sp]
   136c8:	add	sp, sp, #4
   136cc:	pop	{pc}		; (ldr pc, [sp], #4)
   136d0:	movw	r3, #12568	; 0x3118
   136d4:	movt	r3, #1
   136d8:	mov	r2, #0
   136dc:	mov	r1, #1
   136e0:	mov	r0, r4
   136e4:	bl	237c8 <flatcc_verify_table_field@@Base>
   136e8:	cmp	r0, #0
   136ec:	bne	136c4 <_start@@Base+0xc54>
   136f0:	movw	r3, #12496	; 0x30d0
   136f4:	movt	r3, #1
   136f8:	mov	r2, #0
   136fc:	mov	r1, #2
   13700:	mov	r0, r4
   13704:	bl	237c8 <flatcc_verify_table_field@@Base>
   13708:	b	136c4 <_start@@Base+0xc54>
   1370c:	str	r4, [sp, #-8]!
   13710:	str	lr, [sp, #4]
   13714:	sub	sp, sp, #8
   13718:	mov	r4, r0
   1371c:	mov	r3, #16
   13720:	mov	r2, #32
   13724:	mov	r1, #0
   13728:	bl	2342c <flatcc_verify_field@@Base>
   1372c:	cmp	r0, #0
   13730:	beq	13744 <_start@@Base+0xcd4>
   13734:	add	sp, sp, #8
   13738:	ldr	r4, [sp]
   1373c:	add	sp, sp, #4
   13740:	pop	{pc}		; (ldr pc, [sp], #4)
   13744:	mov	r3, #2
   13748:	mov	r2, r3
   1374c:	mov	r1, r3
   13750:	mov	r0, r4
   13754:	bl	2342c <flatcc_verify_field@@Base>
   13758:	cmp	r0, #0
   1375c:	bne	13734 <_start@@Base+0xcc4>
   13760:	mov	r3, #2
   13764:	mov	r2, r3
   13768:	mov	r1, #1
   1376c:	mov	r0, r4
   13770:	bl	2342c <flatcc_verify_field@@Base>
   13774:	cmp	r0, #0
   13778:	bne	13734 <_start@@Base+0xcc4>
   1377c:	mov	r2, #1
   13780:	mov	r1, #3
   13784:	mov	r0, r4
   13788:	bl	234a4 <flatcc_verify_string_field@@Base>
   1378c:	cmp	r0, #0
   13790:	bne	13734 <_start@@Base+0xcc4>
   13794:	mov	r3, #1
   13798:	mov	r2, r3
   1379c:	mov	r1, #6
   137a0:	mov	r0, r4
   137a4:	bl	2342c <flatcc_verify_field@@Base>
   137a8:	cmp	r0, #0
   137ac:	bne	13734 <_start@@Base+0xcc4>
   137b0:	mvn	r3, #0
   137b4:	str	r3, [sp, #4]
   137b8:	mov	r3, #1
   137bc:	str	r3, [sp]
   137c0:	mov	r2, #0
   137c4:	mov	r1, #5
   137c8:	mov	r0, r4
   137cc:	bl	23540 <flatcc_verify_vector_field@@Base>
   137d0:	cmp	r0, #0
   137d4:	bne	13734 <_start@@Base+0xcc4>
   137d8:	movw	r3, #14092	; 0x370c
   137dc:	movt	r3, #1
   137e0:	mov	r2, #0
   137e4:	mov	r1, #11
   137e8:	mov	r0, r4
   137ec:	bl	238ec <flatcc_verify_table_vector_field@@Base>
   137f0:	cmp	r0, #0
   137f4:	bne	13734 <_start@@Base+0xcc4>
   137f8:	mov	r2, #0
   137fc:	mov	r1, #10
   13800:	mov	r0, r4
   13804:	bl	235f8 <flatcc_verify_string_vector_field@@Base>
   13808:	cmp	r0, #0
   1380c:	bne	13734 <_start@@Base+0xcc4>
   13810:	mov	r2, #0
   13814:	mov	r1, #28
   13818:	mov	r0, r4
   1381c:	bl	235f8 <flatcc_verify_string_vector_field@@Base>
   13820:	cmp	r0, #0
   13824:	bne	13734 <_start@@Base+0xcc4>
   13828:	mvn	r3, #0
   1382c:	str	r3, [sp, #4]
   13830:	mov	r3, #1
   13834:	str	r3, [sp]
   13838:	mov	r2, #0
   1383c:	mov	r1, #24
   13840:	mov	r0, r4
   13844:	bl	23540 <flatcc_verify_vector_field@@Base>
   13848:	cmp	r0, #0
   1384c:	bne	13734 <_start@@Base+0xcc4>
   13850:	mvn	r3, #-536870912	; 0xe0000000
   13854:	str	r3, [sp, #4]
   13858:	mov	r3, #4
   1385c:	str	r3, [sp]
   13860:	mov	r3, #8
   13864:	mov	r2, #0
   13868:	mov	r1, #29
   1386c:	mov	r0, r4
   13870:	bl	23540 <flatcc_verify_vector_field@@Base>
   13874:	cmp	r0, #0
   13878:	bne	13734 <_start@@Base+0xcc4>
   1387c:	movw	r3, #14092	; 0x370c
   13880:	movt	r3, #1
   13884:	mov	r2, #0
   13888:	mov	r1, #12
   1388c:	mov	r0, r4
   13890:	bl	237c8 <flatcc_verify_table_field@@Base>
   13894:	cmp	r0, #0
   13898:	bne	13734 <_start@@Base+0xcc4>
   1389c:	movw	r3, #15360	; 0x3c00
   138a0:	movt	r3, #1
   138a4:	mov	r2, #0
   138a8:	mov	r1, #8
   138ac:	mov	r0, r4
   138b0:	bl	24454 <flatcc_verify_union_field@@Base>
   138b4:	cmp	r0, #0
   138b8:	bne	13734 <_start@@Base+0xcc4>
   138bc:	mvn	r3, #-1073741824	; 0xc0000000
   138c0:	str	r3, [sp, #4]
   138c4:	mov	r3, #2
   138c8:	str	r3, [sp]
   138cc:	mov	r3, #4
   138d0:	mov	r2, #0
   138d4:	mov	r1, #9
   138d8:	mov	r0, r4
   138dc:	bl	23540 <flatcc_verify_vector_field@@Base>
   138e0:	cmp	r0, #0
   138e4:	bne	13734 <_start@@Base+0xcc4>
   138e8:	mvn	r3, #-1073741824	; 0xc0000000
   138ec:	str	r3, [sp, #4]
   138f0:	mov	r3, #2
   138f4:	str	r3, [sp]
   138f8:	mov	r3, #4
   138fc:	mov	r2, #0
   13900:	mov	r1, #31
   13904:	mov	r0, r4
   13908:	bl	23540 <flatcc_verify_vector_field@@Base>
   1390c:	cmp	r0, #0
   13910:	bne	13734 <_start@@Base+0xcc4>
   13914:	movw	r3, #14092	; 0x370c
   13918:	movt	r3, #1
   1391c:	str	r3, [sp, #4]
   13920:	mov	r3, #1
   13924:	str	r3, [sp]
   13928:	mov	r3, #0
   1392c:	mov	r2, r3
   13930:	mov	r1, #13
   13934:	mov	r0, r4
   13938:	bl	2427c <flatcc_verify_table_as_nested_root@@Base>
   1393c:	cmp	r0, #0
   13940:	bne	13734 <_start@@Base+0xcc4>
   13944:	movw	r3, #13628	; 0x353c
   13948:	movt	r3, #1
   1394c:	mov	r2, #0
   13950:	mov	r1, #14
   13954:	mov	r0, r4
   13958:	bl	237c8 <flatcc_verify_table_field@@Base>
   1395c:	cmp	r0, #0
   13960:	bne	13734 <_start@@Base+0xcc4>
   13964:	mov	r3, #1
   13968:	mov	r2, r3
   1396c:	mov	r1, #15
   13970:	mov	r0, r4
   13974:	bl	2342c <flatcc_verify_field@@Base>
   13978:	cmp	r0, #0
   1397c:	bne	13734 <_start@@Base+0xcc4>
   13980:	mov	r3, #4
   13984:	mov	r2, r3
   13988:	mov	r1, #16
   1398c:	mov	r0, r4
   13990:	bl	2342c <flatcc_verify_field@@Base>
   13994:	cmp	r0, #0
   13998:	bne	13734 <_start@@Base+0xcc4>
   1399c:	mov	r3, #4
   139a0:	mov	r2, r3
   139a4:	mov	r1, #17
   139a8:	mov	r0, r4
   139ac:	bl	2342c <flatcc_verify_field@@Base>
   139b0:	cmp	r0, #0
   139b4:	bne	13734 <_start@@Base+0xcc4>
   139b8:	mov	r3, #8
   139bc:	mov	r2, r3
   139c0:	mov	r1, #18
   139c4:	mov	r0, r4
   139c8:	bl	2342c <flatcc_verify_field@@Base>
   139cc:	cmp	r0, #0
   139d0:	bne	13734 <_start@@Base+0xcc4>
   139d4:	mov	r3, #8
   139d8:	mov	r2, r3
   139dc:	mov	r1, #19
   139e0:	mov	r0, r4
   139e4:	bl	2342c <flatcc_verify_field@@Base>
   139e8:	cmp	r0, #0
   139ec:	bne	13734 <_start@@Base+0xcc4>
   139f0:	mov	r3, #4
   139f4:	mov	r2, r3
   139f8:	mov	r1, #20
   139fc:	mov	r0, r4
   13a00:	bl	2342c <flatcc_verify_field@@Base>
   13a04:	cmp	r0, #0
   13a08:	bne	13734 <_start@@Base+0xcc4>
   13a0c:	mov	r3, #4
   13a10:	mov	r2, r3
   13a14:	mov	r1, #21
   13a18:	mov	r0, r4
   13a1c:	bl	2342c <flatcc_verify_field@@Base>
   13a20:	cmp	r0, #0
   13a24:	bne	13734 <_start@@Base+0xcc4>
   13a28:	mov	r3, #8
   13a2c:	mov	r2, r3
   13a30:	mov	r1, #22
   13a34:	mov	r0, r4
   13a38:	bl	2342c <flatcc_verify_field@@Base>
   13a3c:	cmp	r0, #0
   13a40:	bne	13734 <_start@@Base+0xcc4>
   13a44:	mov	r3, #8
   13a48:	mov	r2, r3
   13a4c:	mov	r1, #23
   13a50:	mov	r0, r4
   13a54:	bl	2342c <flatcc_verify_field@@Base>
   13a58:	cmp	r0, #0
   13a5c:	bne	13734 <_start@@Base+0xcc4>
   13a60:	mov	r3, #4
   13a64:	mov	r2, r3
   13a68:	mov	r1, #25
   13a6c:	mov	r0, r4
   13a70:	bl	2342c <flatcc_verify_field@@Base>
   13a74:	cmp	r0, #0
   13a78:	bne	13734 <_start@@Base+0xcc4>
   13a7c:	mov	r3, #4
   13a80:	mov	r2, r3
   13a84:	mov	r1, #26
   13a88:	mov	r0, r4
   13a8c:	bl	2342c <flatcc_verify_field@@Base>
   13a90:	cmp	r0, #0
   13a94:	bne	13734 <_start@@Base+0xcc4>
   13a98:	mov	r3, #4
   13a9c:	mov	r2, r3
   13aa0:	mov	r1, #27
   13aa4:	mov	r0, r4
   13aa8:	bl	2342c <flatcc_verify_field@@Base>
   13aac:	cmp	r0, #0
   13ab0:	bne	13734 <_start@@Base+0xcc4>
   13ab4:	mvn	r3, #0
   13ab8:	str	r3, [sp, #4]
   13abc:	mov	r3, #1
   13ac0:	str	r3, [sp]
   13ac4:	mov	r2, #0
   13ac8:	mov	r1, #30
   13acc:	mov	r0, r4
   13ad0:	bl	23540 <flatcc_verify_vector_field@@Base>
   13ad4:	cmp	r0, #0
   13ad8:	bne	13734 <_start@@Base+0xcc4>
   13adc:	mvn	r3, #-536870912	; 0xe0000000
   13ae0:	str	r3, [sp, #4]
   13ae4:	mov	r3, #8
   13ae8:	str	r3, [sp]
   13aec:	mov	r2, #0
   13af0:	mov	r1, #32
   13af4:	mov	r0, r4
   13af8:	bl	23540 <flatcc_verify_vector_field@@Base>
   13afc:	cmp	r0, #0
   13b00:	bne	13734 <_start@@Base+0xcc4>
   13b04:	mvn	r3, #-536870912	; 0xe0000000
   13b08:	str	r3, [sp, #4]
   13b0c:	mov	r3, #8
   13b10:	str	r3, [sp]
   13b14:	mov	r2, #0
   13b18:	mov	r1, #33	; 0x21
   13b1c:	mov	r0, r4
   13b20:	bl	23540 <flatcc_verify_vector_field@@Base>
   13b24:	cmp	r0, #0
   13b28:	bne	13734 <_start@@Base+0xcc4>
   13b2c:	movw	r3, #11104	; 0x2b60
   13b30:	movt	r3, #1
   13b34:	mov	r2, #0
   13b38:	mov	r1, #34	; 0x22
   13b3c:	mov	r0, r4
   13b40:	bl	237c8 <flatcc_verify_table_field@@Base>
   13b44:	cmp	r0, #0
   13b48:	bne	13734 <_start@@Base+0xcc4>
   13b4c:	movw	r3, #15208	; 0x3b68
   13b50:	movt	r3, #1
   13b54:	mov	r2, #0
   13b58:	mov	r1, #35	; 0x23
   13b5c:	mov	r0, r4
   13b60:	bl	237c8 <flatcc_verify_table_field@@Base>
   13b64:	b	13734 <_start@@Base+0xcc4>
   13b68:	str	r4, [sp, #-8]!
   13b6c:	str	lr, [sp, #4]
   13b70:	sub	sp, sp, #8
   13b74:	mov	r4, r0
   13b78:	mvn	r3, #0
   13b7c:	str	r3, [sp, #4]
   13b80:	mov	r3, #1
   13b84:	str	r3, [sp]
   13b88:	mov	r2, #0
   13b8c:	mov	r1, r2
   13b90:	bl	23540 <flatcc_verify_vector_field@@Base>
   13b94:	cmp	r0, #0
   13b98:	beq	13bac <_start@@Base+0x113c>
   13b9c:	add	sp, sp, #8
   13ba0:	ldr	r4, [sp]
   13ba4:	add	sp, sp, #4
   13ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   13bac:	mvn	r3, #0
   13bb0:	str	r3, [sp, #4]
   13bb4:	mov	r1, #1
   13bb8:	str	r1, [sp]
   13bbc:	mov	r3, r1
   13bc0:	mov	r2, #0
   13bc4:	mov	r0, r4
   13bc8:	bl	23540 <flatcc_verify_vector_field@@Base>
   13bcc:	cmp	r0, #0
   13bd0:	bne	13b9c <_start@@Base+0x112c>
   13bd4:	movw	r3, #14092	; 0x370c
   13bd8:	movt	r3, #1
   13bdc:	str	r3, [sp, #4]
   13be0:	mov	r3, #1
   13be4:	str	r3, [sp]
   13be8:	mov	r3, #0
   13bec:	mov	r2, r3
   13bf0:	mov	r1, #2
   13bf4:	mov	r0, r4
   13bf8:	bl	2427c <flatcc_verify_table_as_nested_root@@Base>
   13bfc:	b	13b9c <_start@@Base+0x112c>
   13c00:	str	r4, [sp, #-8]!
   13c04:	str	lr, [sp, #4]
   13c08:	ldrb	r3, [r0, #12]
   13c0c:	sub	r3, r3, #1
   13c10:	cmp	r3, #3
   13c14:	ldrls	pc, [pc, r3, lsl #2]
   13c18:	b	13c74 <_start@@Base+0x1204>
   13c1c:	andeq	r3, r1, ip, lsr #24
   13c20:	andeq	r3, r1, r4, asr #24
   13c24:	andeq	r3, r1, r4, asr ip
   13c28:	andeq	r3, r1, r4, ror #24
   13c2c:	movw	r1, #14092	; 0x370c
   13c30:	movt	r1, #1
   13c34:	bl	23b90 <flatcc_verify_union_table@@Base>
   13c38:	ldr	r4, [sp]
   13c3c:	add	sp, sp, #4
   13c40:	pop	{pc}		; (ldr pc, [sp], #4)
   13c44:	movw	r1, #12640	; 0x3160
   13c48:	movt	r1, #1
   13c4c:	bl	23b90 <flatcc_verify_union_table@@Base>
   13c50:	b	13c38 <_start@@Base+0x11c8>
   13c54:	movw	r1, #11112	; 0x2b68
   13c58:	movt	r1, #1
   13c5c:	bl	23b90 <flatcc_verify_union_table@@Base>
   13c60:	b	13c38 <_start@@Base+0x11c8>
   13c64:	movw	r1, #15484	; 0x3c7c
   13c68:	movt	r1, #1
   13c6c:	bl	23b90 <flatcc_verify_union_table@@Base>
   13c70:	b	13c38 <_start@@Base+0x11c8>
   13c74:	mov	r0, #0
   13c78:	b	13c38 <_start@@Base+0x11c8>
   13c7c:	str	r4, [sp, #-8]!
   13c80:	str	lr, [sp, #4]
   13c84:	mov	r4, r0
   13c88:	movw	r3, #13980	; 0x369c
   13c8c:	movt	r3, #1
   13c90:	mov	r2, #0
   13c94:	mov	r1, r2
   13c98:	bl	237c8 <flatcc_verify_table_field@@Base>
   13c9c:	cmp	r0, #0
   13ca0:	beq	13cb0 <_start@@Base+0x1240>
   13ca4:	ldr	r4, [sp]
   13ca8:	add	sp, sp, #4
   13cac:	pop	{pc}		; (ldr pc, [sp], #4)
   13cb0:	movw	r3, #15596	; 0x3cec
   13cb4:	movt	r3, #1
   13cb8:	mov	r2, #0
   13cbc:	mov	r1, #1
   13cc0:	mov	r0, r4
   13cc4:	bl	237c8 <flatcc_verify_table_field@@Base>
   13cc8:	cmp	r0, #0
   13ccc:	bne	13ca4 <_start@@Base+0x1234>
   13cd0:	movw	r3, #15360	; 0x3c00
   13cd4:	movt	r3, #1
   13cd8:	mov	r2, #0
   13cdc:	mov	r1, #3
   13ce0:	mov	r0, r4
   13ce4:	bl	245a8 <flatcc_verify_union_vector_field@@Base>
   13ce8:	b	13ca4 <_start@@Base+0x1234>
   13cec:	str	r4, [sp, #-8]!
   13cf0:	str	lr, [sp, #4]
   13cf4:	mov	r4, r0
   13cf8:	movw	r3, #15772	; 0x3d9c
   13cfc:	movt	r3, #1
   13d00:	mov	r2, #0
   13d04:	mov	r1, #1
   13d08:	bl	24454 <flatcc_verify_union_field@@Base>
   13d0c:	cmp	r0, #0
   13d10:	beq	13d20 <_start@@Base+0x12b0>
   13d14:	ldr	r4, [sp]
   13d18:	add	sp, sp, #4
   13d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d20:	movw	r3, #15772	; 0x3d9c
   13d24:	movt	r3, #1
   13d28:	mov	r2, #0
   13d2c:	mov	r1, #3
   13d30:	mov	r0, r4
   13d34:	bl	24454 <flatcc_verify_union_field@@Base>
   13d38:	cmp	r0, #0
   13d3c:	bne	13d14 <_start@@Base+0x12a4>
   13d40:	movw	r3, #15772	; 0x3d9c
   13d44:	movt	r3, #1
   13d48:	mov	r2, #0
   13d4c:	mov	r1, #5
   13d50:	mov	r0, r4
   13d54:	bl	24454 <flatcc_verify_union_field@@Base>
   13d58:	cmp	r0, #0
   13d5c:	bne	13d14 <_start@@Base+0x12a4>
   13d60:	movw	r3, #15772	; 0x3d9c
   13d64:	movt	r3, #1
   13d68:	mov	r2, #0
   13d6c:	mov	r1, #7
   13d70:	mov	r0, r4
   13d74:	bl	24454 <flatcc_verify_union_field@@Base>
   13d78:	cmp	r0, #0
   13d7c:	bne	13d14 <_start@@Base+0x12a4>
   13d80:	movw	r3, #15772	; 0x3d9c
   13d84:	movt	r3, #1
   13d88:	mov	r2, #0
   13d8c:	mov	r1, #9
   13d90:	mov	r0, r4
   13d94:	bl	245a8 <flatcc_verify_union_vector_field@@Base>
   13d98:	b	13d14 <_start@@Base+0x12a4>
   13d9c:	str	r4, [sp, #-8]!
   13da0:	str	lr, [sp, #4]
   13da4:	ldrb	r3, [r0, #12]
   13da8:	cmp	r3, #9
   13dac:	beq	13e10 <_start@@Base+0x13a0>
   13db0:	bls	13dd4 <_start@@Base+0x1364>
   13db4:	cmp	r3, #11
   13db8:	beq	13e30 <_start@@Base+0x13c0>
   13dbc:	bcc	13e20 <_start@@Base+0x13b0>
   13dc0:	cmp	r3, #255	; 0xff
   13dc4:	movne	r0, #0
   13dc8:	bne	13e04 <_start@@Base+0x1394>
   13dcc:	bl	23cf8 <flatcc_verify_union_string@@Base>
   13dd0:	b	13e04 <_start@@Base+0x1394>
   13dd4:	cmp	r3, #2
   13dd8:	beq	13df8 <_start@@Base+0x1388>
   13ddc:	cmp	r3, #8
   13de0:	movne	r0, #0
   13de4:	bne	13e04 <_start@@Base+0x1394>
   13de8:	mov	r2, #2
   13dec:	mov	r1, r2
   13df0:	bl	23c90 <flatcc_verify_union_struct@@Base>
   13df4:	b	13e04 <_start@@Base+0x1394>
   13df8:	movw	r1, #12460	; 0x30ac
   13dfc:	movt	r1, #1
   13e00:	bl	23b90 <flatcc_verify_union_table@@Base>
   13e04:	ldr	r4, [sp]
   13e08:	add	sp, sp, #4
   13e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e10:	mov	r2, #4
   13e14:	mov	r1, r2
   13e18:	bl	23c90 <flatcc_verify_union_struct@@Base>
   13e1c:	b	13e04 <_start@@Base+0x1394>
   13e20:	mov	r2, #4
   13e24:	mov	r1, r2
   13e28:	bl	23c90 <flatcc_verify_union_struct@@Base>
   13e2c:	b	13e04 <_start@@Base+0x1394>
   13e30:	bl	23cf8 <flatcc_verify_union_string@@Base>
   13e34:	b	13e04 <_start@@Base+0x1394>
   13e38:	strd	r4, [sp, #-16]!
   13e3c:	str	r6, [sp, #8]
   13e40:	str	lr, [sp, #12]
   13e44:	mov	r5, r2
   13e48:	cmp	r0, #0
   13e4c:	beq	13e7c <_start@@Base+0x140c>
   13e50:	ldr	r4, [r0, #-4]
   13e54:	cmp	r4, r2
   13e58:	movcc	r2, r4
   13e5c:	movcs	r2, r5
   13e60:	bl	12a4c <strncmp@plt>
   13e64:	cmp	r0, #0
   13e68:	beq	13e80 <_start@@Base+0x1410>
   13e6c:	ldrd	r4, [sp]
   13e70:	ldr	r6, [sp, #8]
   13e74:	add	sp, sp, #12
   13e78:	pop	{pc}		; (ldr pc, [sp], #4)
   13e7c:	mov	r4, #0
   13e80:	cmp	r5, r4
   13e84:	bhi	13e98 <_start@@Base+0x1428>
   13e88:	cmp	r5, r4
   13e8c:	movcs	r0, #0
   13e90:	movcc	r0, #1
   13e94:	b	13e6c <_start@@Base+0x13fc>
   13e98:	mvn	r0, #0
   13e9c:	b	13e6c <_start@@Base+0x13fc>
   13ea0:	push	{lr}		; (str lr, [sp, #-4]!)
   13ea4:	sub	sp, sp, #12
   13ea8:	mov	r1, #0
   13eac:	mov	r0, sp
   13eb0:	bl	129bc <gettimeofday@plt>
   13eb4:	movw	r3, #36984	; 0x9078
   13eb8:	movt	r3, #3
   13ebc:	ldr	r3, [r3]
   13ec0:	cmp	r3, #0
   13ec4:	bne	13ed8 <_start@@Base+0x1468>
   13ec8:	movw	r3, #36984	; 0x9078
   13ecc:	movt	r3, #3
   13ed0:	ldrd	r0, [sp]
   13ed4:	strd	r0, [r3]
   13ed8:	movw	r2, #36984	; 0x9078
   13edc:	movt	r2, #3
   13ee0:	ldr	r1, [r2, #4]
   13ee4:	ldr	r3, [sp, #4]
   13ee8:	sub	r3, r3, r1
   13eec:	vmov	s15, r3
   13ef0:	vcvt.f64.s32	d7, s15
   13ef4:	vldr	d5, [pc, #36]	; 13f20 <_start@@Base+0x14b0>
   13ef8:	vdiv.f64	d6, d7, d5
   13efc:	ldr	r2, [r2]
   13f00:	ldr	r3, [sp]
   13f04:	sub	r3, r3, r2
   13f08:	vmov	s0, r3
   13f0c:	vcvt.f64.s32	d0, s0
   13f10:	vadd.f64	d0, d6, d0
   13f14:	add	sp, sp, #12
   13f18:	pop	{pc}		; (ldr pc, [sp], #4)
   13f1c:	nop	{0}
   13f20:	andeq	r0, r0, r0
   13f24:	smlawbmi	lr, r0, r4, r8
   13f28:	push	{lr}		; (str lr, [sp, #-4]!)
   13f2c:	sub	sp, sp, #12
   13f30:	add	ip, sp, #8
   13f34:	stmdb	ip, {r1, r2}
   13f38:	ldr	r2, [sp]
   13f3c:	cmp	r2, #0
   13f40:	beq	13f70 <_start@@Base+0x1500>
   13f44:	ldr	r1, [r2, #-4]
   13f48:	cmp	r3, r1
   13f4c:	bcs	13f70 <_start@@Base+0x1500>
   13f50:	ldrb	r2, [r2, r3]
   13f54:	cmp	r2, #0
   13f58:	bne	13f8c <_start@@Base+0x151c>
   13f5c:	mov	r3, #0
   13f60:	strb	r3, [r0]
   13f64:	str	r3, [r0, #4]
   13f68:	add	sp, sp, #12
   13f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f70:	ldr	r3, [pc, #96]	; 13fd8 <_start@@Base+0x1568>
   13f74:	movw	r2, #773	; 0x305
   13f78:	movw	r1, #20464	; 0x4ff0
   13f7c:	movt	r1, #2
   13f80:	movw	r0, #20844	; 0x516c
   13f84:	movt	r0, #2
   13f88:	bl	12a64 <__assert_fail@plt>
   13f8c:	ldr	r1, [sp, #4]
   13f90:	add	ip, r1, r3, lsl #2
   13f94:	cmp	r1, #0
   13f98:	beq	13fbc <_start@@Base+0x154c>
   13f9c:	ldr	lr, [r1, #-4]
   13fa0:	cmp	r3, lr
   13fa4:	bcs	13fbc <_start@@Base+0x154c>
   13fa8:	ldr	r3, [r1, r3, lsl #2]
   13fac:	add	ip, ip, r3
   13fb0:	strb	r2, [r0]
   13fb4:	str	ip, [r0, #4]
   13fb8:	b	13f68 <_start@@Base+0x14f8>
   13fbc:	ldr	r3, [pc, #24]	; 13fdc <_start@@Base+0x156c>
   13fc0:	mov	r2, #117	; 0x75
   13fc4:	movw	r1, #20604	; 0x507c
   13fc8:	movt	r1, #2
   13fcc:	movw	r0, #20708	; 0x50e4
   13fd0:	movt	r0, #2
   13fd4:	bl	12a64 <__assert_fail@plt>
   13fd8:	andeq	r4, r2, r0, asr #19
   13fdc:	andeq	r4, r2, r0, ror #19
   13fe0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13fe4:	strd	r6, [sp, #8]
   13fe8:	strd	r8, [sp, #16]
   13fec:	str	sl, [sp, #24]
   13ff0:	str	lr, [sp, #28]
   13ff4:	mov	r6, r0
   13ff8:	mov	r9, r1
   13ffc:	mov	r5, r0
   14000:	mov	r4, #0
   14004:	b	140a4 <_start@@Base+0x1634>
   14008:	ldr	r3, [pc, #456]	; 141d8 <_start@@Base+0x1768>
   1400c:	movw	r2, #699	; 0x2bb
   14010:	movw	r1, #20464	; 0x4ff0
   14014:	movt	r1, #2
   14018:	movw	r0, #20564	; 0x5054
   1401c:	movt	r0, #2
   14020:	bl	12a64 <__assert_fail@plt>
   14024:	ldr	r3, [pc, #428]	; 141d8 <_start@@Base+0x1768>
   14028:	movw	r2, #699	; 0x2bb
   1402c:	movw	r1, #20464	; 0x4ff0
   14030:	movt	r1, #2
   14034:	movw	r0, #20764	; 0x511c
   14038:	movt	r0, #2
   1403c:	bl	12a64 <__assert_fail@plt>
   14040:	ldr	r7, [r6, #-4]
   14044:	cmp	r4, r7
   14048:	bcs	140cc <_start@@Base+0x165c>
   1404c:	mov	r3, r5
   14050:	add	r5, r5, #4
   14054:	ldr	r2, [r3]
   14058:	adds	r1, r3, r2
   1405c:	beq	14008 <_start@@Base+0x1598>
   14060:	ldr	r3, [r3, r2]
   14064:	sub	r3, r1, r3
   14068:	ldrh	r2, [r3]
   1406c:	cmp	r2, #11
   14070:	bls	14024 <_start@@Base+0x15b4>
   14074:	ldrh	r3, [r3, #10]
   14078:	cmp	r3, #0
   1407c:	beq	14024 <_start@@Base+0x15b4>
   14080:	add	r0, r1, r3
   14084:	ldr	r3, [r1, r3]
   14088:	add	r3, r3, #4
   1408c:	mov	r1, r9
   14090:	add	r0, r0, r3
   14094:	bl	12968 <strcmp@plt>
   14098:	cmp	r0, #0
   1409c:	beq	140d4 <_start@@Base+0x1664>
   140a0:	add	r4, r4, #1
   140a4:	cmp	r6, #0
   140a8:	bne	14040 <_start@@Base+0x15d0>
   140ac:	mov	r8, #0
   140b0:	mov	r0, r8
   140b4:	ldrd	r4, [sp]
   140b8:	ldrd	r6, [sp, #8]
   140bc:	ldrd	r8, [sp, #16]
   140c0:	ldr	sl, [sp, #24]
   140c4:	add	sp, sp, #28
   140c8:	pop	{pc}		; (ldr pc, [sp], #4)
   140cc:	mov	r8, #0
   140d0:	b	140b0 <_start@@Base+0x1640>
   140d4:	cmn	r4, #1
   140d8:	beq	141d0 <_start@@Base+0x1760>
   140dc:	mov	r8, #0
   140e0:	b	14108 <_start@@Base+0x1698>
   140e4:	ldr	r3, [pc, #236]	; 141d8 <_start@@Base+0x1768>
   140e8:	movw	r2, #699	; 0x2bb
   140ec:	movw	r1, #20464	; 0x4ff0
   140f0:	movt	r1, #2
   140f4:	movw	r0, #20564	; 0x5054
   140f8:	movt	r0, #2
   140fc:	bl	12a64 <__assert_fail@plt>
   14100:	cmn	r4, #1
   14104:	beq	140b0 <_start@@Base+0x1640>
   14108:	add	r8, r8, #1
   1410c:	add	r4, r4, #1
   14110:	cmp	r4, r7
   14114:	bcs	140b0 <_start@@Base+0x1640>
   14118:	lsl	r5, r4, #2
   1411c:	add	r1, r6, r5
   14120:	ldr	r2, [r6, r4, lsl #2]
   14124:	adds	r3, r1, r2
   14128:	beq	140e4 <_start@@Base+0x1674>
   1412c:	ldr	r2, [r1, r2]
   14130:	sub	r2, r3, r2
   14134:	ldrh	r1, [r2]
   14138:	cmp	r1, #11
   1413c:	bls	141b4 <_start@@Base+0x1744>
   14140:	ldrh	r2, [r2, #10]
   14144:	cmp	r2, #0
   14148:	beq	141b4 <_start@@Base+0x1744>
   1414c:	add	r5, r5, #4
   14150:	add	r5, r6, r5
   14154:	add	r0, r3, r2
   14158:	ldr	r3, [r3, r2]
   1415c:	add	r3, r3, #4
   14160:	mov	r1, r9
   14164:	add	r0, r0, r3
   14168:	bl	12968 <strcmp@plt>
   1416c:	cmp	r0, #0
   14170:	beq	14100 <_start@@Base+0x1690>
   14174:	add	r4, r4, #1
   14178:	cmp	r7, r4
   1417c:	bls	140b0 <_start@@Base+0x1640>
   14180:	mov	r2, r5
   14184:	add	r5, r5, #4
   14188:	ldr	r1, [r2]
   1418c:	adds	r3, r2, r1
   14190:	beq	140e4 <_start@@Base+0x1674>
   14194:	ldr	r2, [r2, r1]
   14198:	sub	r2, r3, r2
   1419c:	ldrh	r1, [r2]
   141a0:	cmp	r1, #11
   141a4:	bls	141b4 <_start@@Base+0x1744>
   141a8:	ldrh	r2, [r2, #10]
   141ac:	cmp	r2, #0
   141b0:	bne	14154 <_start@@Base+0x16e4>
   141b4:	ldr	r3, [pc, #28]	; 141d8 <_start@@Base+0x1768>
   141b8:	movw	r2, #699	; 0x2bb
   141bc:	movw	r1, #20464	; 0x4ff0
   141c0:	movt	r1, #2
   141c4:	movw	r0, #20764	; 0x511c
   141c8:	movt	r0, #2
   141cc:	bl	12a64 <__assert_fail@plt>
   141d0:	mov	r8, #0
   141d4:	b	140b0 <_start@@Base+0x1640>
   141d8:	andeq	r4, r2, ip, ror r9
   141dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   141e0:	strd	r6, [sp, #8]
   141e4:	str	r8, [sp, #16]
   141e8:	str	lr, [sp, #20]
   141ec:	mov	r6, r0
   141f0:	mov	r7, r1
   141f4:	mov	r5, r0
   141f8:	mov	r4, #0
   141fc:	b	1429c <_start@@Base+0x182c>
   14200:	ldr	r3, [pc, #192]	; 142c8 <_start@@Base+0x1858>
   14204:	movw	r2, #699	; 0x2bb
   14208:	movw	r1, #20464	; 0x4ff0
   1420c:	movt	r1, #2
   14210:	movw	r0, #20564	; 0x5054
   14214:	movt	r0, #2
   14218:	bl	12a64 <__assert_fail@plt>
   1421c:	ldr	r3, [pc, #164]	; 142c8 <_start@@Base+0x1858>
   14220:	movw	r2, #699	; 0x2bb
   14224:	movw	r1, #20464	; 0x4ff0
   14228:	movt	r1, #2
   1422c:	movw	r0, #20764	; 0x511c
   14230:	movt	r0, #2
   14234:	bl	12a64 <__assert_fail@plt>
   14238:	ldr	r3, [r6, #-4]
   1423c:	cmp	r4, r3
   14240:	bcs	142c0 <_start@@Base+0x1850>
   14244:	mov	r3, r5
   14248:	add	r5, r5, #4
   1424c:	ldr	r2, [r3]
   14250:	adds	r1, r3, r2
   14254:	beq	14200 <_start@@Base+0x1790>
   14258:	ldr	r3, [r3, r2]
   1425c:	sub	r3, r1, r3
   14260:	ldrh	r2, [r3]
   14264:	cmp	r2, #11
   14268:	bls	1421c <_start@@Base+0x17ac>
   1426c:	ldrh	r3, [r3, #10]
   14270:	cmp	r3, #0
   14274:	beq	1421c <_start@@Base+0x17ac>
   14278:	add	r0, r1, r3
   1427c:	ldr	r3, [r1, r3]
   14280:	add	r3, r3, #4
   14284:	mov	r1, r7
   14288:	add	r0, r0, r3
   1428c:	bl	12968 <strcmp@plt>
   14290:	cmp	r0, #0
   14294:	beq	142a8 <_start@@Base+0x1838>
   14298:	add	r4, r4, #1
   1429c:	cmp	r6, #0
   142a0:	bne	14238 <_start@@Base+0x17c8>
   142a4:	mvn	r4, #0
   142a8:	mov	r0, r4
   142ac:	ldrd	r4, [sp]
   142b0:	ldrd	r6, [sp, #8]
   142b4:	ldr	r8, [sp, #16]
   142b8:	add	sp, sp, #20
   142bc:	pop	{pc}		; (ldr pc, [sp], #4)
   142c0:	mvn	r4, #0
   142c4:	b	142a8 <_start@@Base+0x1838>
   142c8:	andeq	r4, r2, ip, ror r9
   142cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   142d0:	strd	r6, [sp, #8]
   142d4:	str	r8, [sp, #16]
   142d8:	str	lr, [sp, #20]
   142dc:	mov	r7, r1
   142e0:	mov	r8, r3
   142e4:	cmp	r0, #0
   142e8:	ldrne	r6, [r0, #-4]
   142ec:	moveq	r6, #0
   142f0:	cmp	r2, r6
   142f4:	movcs	r2, r6
   142f8:	sub	r4, r2, #-1073741823	; 0xc0000001
   142fc:	add	r4, r0, r4, lsl #2
   14300:	sub	r5, r2, #1
   14304:	cmp	r2, r7
   14308:	bls	143c4 <_start@@Base+0x1954>
   1430c:	mov	r3, r4
   14310:	cmp	r5, r6
   14314:	bcs	14370 <_start@@Base+0x1900>
   14318:	sub	r4, r4, #4
   1431c:	ldr	r2, [r3]
   14320:	adds	r1, r3, r2
   14324:	beq	1438c <_start@@Base+0x191c>
   14328:	ldr	r3, [r3, r2]
   1432c:	sub	r3, r1, r3
   14330:	ldrh	r2, [r3]
   14334:	cmp	r2, #11
   14338:	bls	143a8 <_start@@Base+0x1938>
   1433c:	ldrh	r3, [r3, #10]
   14340:	cmp	r3, #0
   14344:	beq	143a8 <_start@@Base+0x1938>
   14348:	add	r0, r1, r3
   1434c:	ldr	r3, [r1, r3]
   14350:	add	r3, r3, #4
   14354:	mov	r1, r8
   14358:	add	r0, r0, r3
   1435c:	bl	12968 <strcmp@plt>
   14360:	mov	r2, r5
   14364:	cmp	r0, #0
   14368:	bne	14300 <_start@@Base+0x1890>
   1436c:	b	143c8 <_start@@Base+0x1958>
   14370:	ldr	r3, [pc, #104]	; 143e0 <_start@@Base+0x1970>
   14374:	movw	r2, #693	; 0x2b5
   14378:	movw	r1, #20464	; 0x4ff0
   1437c:	movt	r1, #2
   14380:	movw	r0, #20708	; 0x50e4
   14384:	movt	r0, #2
   14388:	bl	12a64 <__assert_fail@plt>
   1438c:	ldr	r3, [pc, #80]	; 143e4 <_start@@Base+0x1974>
   14390:	movw	r2, #699	; 0x2bb
   14394:	movw	r1, #20464	; 0x4ff0
   14398:	movt	r1, #2
   1439c:	movw	r0, #20564	; 0x5054
   143a0:	movt	r0, #2
   143a4:	bl	12a64 <__assert_fail@plt>
   143a8:	ldr	r3, [pc, #52]	; 143e4 <_start@@Base+0x1974>
   143ac:	movw	r2, #699	; 0x2bb
   143b0:	movw	r1, #20464	; 0x4ff0
   143b4:	movt	r1, #2
   143b8:	movw	r0, #20764	; 0x511c
   143bc:	movt	r0, #2
   143c0:	bl	12a64 <__assert_fail@plt>
   143c4:	mvn	r5, #0
   143c8:	mov	r0, r5
   143cc:	ldrd	r4, [sp]
   143d0:	ldrd	r6, [sp, #8]
   143d4:	ldr	r8, [sp, #16]
   143d8:	add	sp, sp, #20
   143dc:	pop	{pc}		; (ldr pc, [sp], #4)
   143e0:	andeq	r4, r2, ip, lsl r9
   143e4:	andeq	r4, r2, ip, ror r9
   143e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   143ec:	strd	r6, [sp, #8]
   143f0:	str	r8, [sp, #16]
   143f4:	str	lr, [sp, #20]
   143f8:	mov	r5, r0
   143fc:	mov	r4, r1
   14400:	mov	r6, r2
   14404:	mov	r7, r3
   14408:	b	144d4 <_start@@Base+0x1a64>
   1440c:	ldr	r3, [pc, #240]	; 14504 <_start@@Base+0x1a94>
   14410:	movw	r2, #693	; 0x2b5
   14414:	movw	r1, #20464	; 0x4ff0
   14418:	movt	r1, #2
   1441c:	movw	r0, #20708	; 0x50e4
   14420:	movt	r0, #2
   14424:	bl	12a64 <__assert_fail@plt>
   14428:	ldr	r3, [pc, #216]	; 14508 <_start@@Base+0x1a98>
   1442c:	movw	r2, #699	; 0x2bb
   14430:	movw	r1, #20464	; 0x4ff0
   14434:	movt	r1, #2
   14438:	movw	r0, #20564	; 0x5054
   1443c:	movt	r0, #2
   14440:	bl	12a64 <__assert_fail@plt>
   14444:	ldr	r3, [pc, #188]	; 14508 <_start@@Base+0x1a98>
   14448:	movw	r2, #699	; 0x2bb
   1444c:	movw	r1, #20464	; 0x4ff0
   14450:	movt	r1, #2
   14454:	movw	r0, #20764	; 0x511c
   14458:	movt	r0, #2
   1445c:	bl	12a64 <__assert_fail@plt>
   14460:	ldr	r3, [r5, #-4]
   14464:	cmp	r3, r6
   14468:	movcc	r2, r3
   1446c:	movcs	r2, r6
   14470:	cmp	r4, r2
   14474:	bcs	144f4 <_start@@Base+0x1a84>
   14478:	add	r2, r5, r4, lsl #2
   1447c:	cmp	r4, r3
   14480:	bcs	1440c <_start@@Base+0x199c>
   14484:	ldr	r3, [r5, r4, lsl #2]
   14488:	adds	r1, r2, r3
   1448c:	beq	14428 <_start@@Base+0x19b8>
   14490:	ldr	r3, [r2, r3]
   14494:	sub	r3, r1, r3
   14498:	ldrh	r2, [r3]
   1449c:	cmp	r2, #11
   144a0:	bls	14444 <_start@@Base+0x19d4>
   144a4:	ldrh	r3, [r3, #10]
   144a8:	cmp	r3, #0
   144ac:	beq	14444 <_start@@Base+0x19d4>
   144b0:	add	r0, r1, r3
   144b4:	ldr	r3, [r1, r3]
   144b8:	add	r3, r3, #4
   144bc:	mov	r1, r7
   144c0:	add	r0, r0, r3
   144c4:	bl	12968 <strcmp@plt>
   144c8:	cmp	r0, #0
   144cc:	beq	144fc <_start@@Base+0x1a8c>
   144d0:	add	r4, r4, #1
   144d4:	cmp	r5, #0
   144d8:	bne	14460 <_start@@Base+0x19f0>
   144dc:	mvn	r0, #0
   144e0:	ldrd	r4, [sp]
   144e4:	ldrd	r6, [sp, #8]
   144e8:	ldr	r8, [sp, #16]
   144ec:	add	sp, sp, #20
   144f0:	pop	{pc}		; (ldr pc, [sp], #4)
   144f4:	mvn	r0, #0
   144f8:	b	144e0 <_start@@Base+0x1a70>
   144fc:	mov	r0, r4
   14500:	b	144e0 <_start@@Base+0x1a70>
   14504:	andeq	r4, r2, ip, lsl r9
   14508:	andeq	r4, r2, ip, ror r9
   1450c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14510:	strd	r6, [sp, #8]
   14514:	strd	r8, [sp, #16]
   14518:	str	sl, [sp, #24]
   1451c:	str	lr, [sp, #28]
   14520:	subs	r6, r0, #0
   14524:	beq	1469c <_start@@Base+0x1c2c>
   14528:	ldr	r8, [r6, #-4]
   1452c:	cmp	r8, #0
   14530:	beq	146a4 <_start@@Base+0x1c34>
   14534:	mov	r7, r1
   14538:	sub	r9, r8, #1
   1453c:	mov	r5, #0
   14540:	cmp	r5, r9
   14544:	bcs	1464c <_start@@Base+0x1bdc>
   14548:	sub	r4, r9, r5
   1454c:	add	r4, r5, r4, lsr #1
   14550:	add	r2, r6, r4, lsl #2
   14554:	cmp	r8, r4
   14558:	bls	145f0 <_start@@Base+0x1b80>
   1455c:	ldr	r3, [r6, r4, lsl #2]
   14560:	adds	r1, r2, r3
   14564:	beq	1460c <_start@@Base+0x1b9c>
   14568:	ldr	r2, [r2, r3]
   1456c:	sub	r2, r1, r2
   14570:	ldrh	r3, [r2]
   14574:	cmp	r3, #11
   14578:	bls	14628 <_start@@Base+0x1bb8>
   1457c:	ldrh	r3, [r2, #10]
   14580:	cmp	r3, #0
   14584:	beq	14628 <_start@@Base+0x1bb8>
   14588:	add	r0, r1, r3
   1458c:	ldr	r3, [r1, r3]
   14590:	add	r3, r3, #4
   14594:	mov	r1, r7
   14598:	add	r0, r0, r3
   1459c:	bl	12968 <strcmp@plt>
   145a0:	cmp	r0, #0
   145a4:	blt	14644 <_start@@Base+0x1bd4>
   145a8:	cmp	r5, r4
   145ac:	bcs	14650 <_start@@Base+0x1be0>
   145b0:	sub	r3, r4, r5
   145b4:	add	r3, r5, r3, lsr #1
   145b8:	add	r2, r6, r3, lsl #2
   145bc:	cmp	r3, r8
   145c0:	bcs	145f0 <_start@@Base+0x1b80>
   145c4:	ldr	r0, [r6, r3, lsl #2]
   145c8:	adds	r1, r2, r0
   145cc:	beq	1460c <_start@@Base+0x1b9c>
   145d0:	ldr	r2, [r2, r0]
   145d4:	sub	r2, r1, r2
   145d8:	mov	r9, r4
   145dc:	ldrh	r0, [r2]
   145e0:	cmp	r0, #11
   145e4:	bls	14628 <_start@@Base+0x1bb8>
   145e8:	mov	r4, r3
   145ec:	b	1457c <_start@@Base+0x1b0c>
   145f0:	ldr	r3, [pc, #180]	; 146ac <_start@@Base+0x1c3c>
   145f4:	movw	r2, #693	; 0x2b5
   145f8:	movw	r1, #20464	; 0x4ff0
   145fc:	movt	r1, #2
   14600:	movw	r0, #20708	; 0x50e4
   14604:	movt	r0, #2
   14608:	bl	12a64 <__assert_fail@plt>
   1460c:	ldr	r3, [pc, #156]	; 146b0 <_start@@Base+0x1c40>
   14610:	movw	r2, #699	; 0x2bb
   14614:	movw	r1, #20464	; 0x4ff0
   14618:	movt	r1, #2
   1461c:	movw	r0, #20564	; 0x5054
   14620:	movt	r0, #2
   14624:	bl	12a64 <__assert_fail@plt>
   14628:	ldr	r3, [pc, #128]	; 146b0 <_start@@Base+0x1c40>
   1462c:	movw	r2, #699	; 0x2bb
   14630:	movw	r1, #20464	; 0x4ff0
   14634:	movt	r1, #2
   14638:	movw	r0, #20764	; 0x511c
   1463c:	movt	r0, #2
   14640:	bl	12a64 <__assert_fail@plt>
   14644:	add	r5, r4, #1
   14648:	b	14540 <_start@@Base+0x1ad0>
   1464c:	mov	r4, r9
   14650:	cmp	r5, r4
   14654:	mvnne	r5, #0
   14658:	beq	14678 <_start@@Base+0x1c08>
   1465c:	mov	r0, r5
   14660:	ldrd	r4, [sp]
   14664:	ldrd	r6, [sp, #8]
   14668:	ldrd	r8, [sp, #16]
   1466c:	ldr	sl, [sp, #24]
   14670:	add	sp, sp, #28
   14674:	pop	{pc}		; (ldr pc, [sp], #4)
   14678:	mov	r1, r5
   1467c:	mov	r0, r6
   14680:	bl	12e50 <_start@@Base+0x3e0>
   14684:	bl	12f74 <_start@@Base+0x504>
   14688:	mov	r1, r7
   1468c:	bl	12968 <strcmp@plt>
   14690:	cmp	r0, #0
   14694:	mvnne	r5, #0
   14698:	b	1465c <_start@@Base+0x1bec>
   1469c:	mvn	r5, #0
   146a0:	b	1465c <_start@@Base+0x1bec>
   146a4:	mvn	r5, #0
   146a8:	b	1465c <_start@@Base+0x1bec>
   146ac:	andeq	r4, r2, ip, lsl r9
   146b0:	andeq	r4, r2, ip, ror r9

000146b4 <verify_empty_monster@@Base>:
   146b4:	str	r4, [sp, #-8]!
   146b8:	str	lr, [sp, #4]
   146bc:	cmp	r0, #0
   146c0:	beq	14774 <verify_empty_monster@@Base+0xc0>
   146c4:	ldr	r2, [r0, #4]
   146c8:	movw	r3, #20301	; 0x4f4d
   146cc:	movt	r3, #21326	; 0x534e
   146d0:	cmp	r2, r3
   146d4:	bne	14828 <verify_empty_monster@@Base+0x174>
   146d8:	ldr	r3, [r0]
   146dc:	add	r3, r0, r3
   146e0:	ldr	r1, [r0]
   146e4:	add	r0, r0, r1
   146e8:	movw	r1, #20301	; 0x4f4d
   146ec:	movt	r1, #21326	; 0x534e
   146f0:	cmp	r2, r1
   146f4:	movne	r1, r0
   146f8:	movne	r2, #0
   146fc:	bne	1484c <verify_empty_monster@@Base+0x198>
   14700:	mov	r1, r0
   14704:	mov	ip, r0
   14708:	mov	r2, #0
   1470c:	cmp	r3, #0
   14710:	beq	14774 <verify_empty_monster@@Base+0xc0>
   14714:	cmp	r2, #0
   14718:	bne	14788 <verify_empty_monster@@Base+0xd4>
   1471c:	cmp	r1, r3
   14720:	bne	1479c <verify_empty_monster@@Base+0xe8>
   14724:	cmp	ip, r3
   14728:	bne	147b0 <verify_empty_monster@@Base+0xfc>
   1472c:	cmp	r0, r3
   14730:	bne	147c4 <verify_empty_monster@@Base+0x110>
   14734:	ldr	r2, [r3]
   14738:	sub	r2, r3, r2
   1473c:	ldrh	r1, [r2]
   14740:	cmp	r1, #9
   14744:	bls	14810 <verify_empty_monster@@Base+0x15c>
   14748:	ldrh	r1, [r2, #8]
   1474c:	cmp	r1, #0
   14750:	beq	147ec <verify_empty_monster@@Base+0x138>
   14754:	ldrsh	r3, [r3, r1]
   14758:	cmp	r3, #100	; 0x64
   1475c:	bne	147d8 <verify_empty_monster@@Base+0x124>
   14760:	movw	r0, #21164	; 0x52ac
   14764:	movt	r0, #2
   14768:	bl	129c8 <puts@plt>
   1476c:	mvn	r0, #0
   14770:	b	1481c <verify_empty_monster@@Base+0x168>
   14774:	movw	r0, #20876	; 0x518c
   14778:	movt	r0, #2
   1477c:	bl	129c8 <puts@plt>
   14780:	mvn	r0, #0
   14784:	b	1481c <verify_empty_monster@@Base+0x168>
   14788:	movw	r0, #20900	; 0x51a4
   1478c:	movt	r0, #2
   14790:	bl	129c8 <puts@plt>
   14794:	mvn	r0, #0
   14798:	b	1481c <verify_empty_monster@@Base+0x168>
   1479c:	movw	r0, #20948	; 0x51d4
   147a0:	movt	r0, #2
   147a4:	bl	129c8 <puts@plt>
   147a8:	mvn	r0, #0
   147ac:	b	1481c <verify_empty_monster@@Base+0x168>
   147b0:	movw	r0, #21004	; 0x520c
   147b4:	movt	r0, #2
   147b8:	bl	12974 <printf@plt>
   147bc:	mvn	r0, #0
   147c0:	b	1481c <verify_empty_monster@@Base+0x168>
   147c4:	movw	r0, #21056	; 0x5240
   147c8:	movt	r0, #2
   147cc:	bl	12974 <printf@plt>
   147d0:	mvn	r0, #0
   147d4:	b	1481c <verify_empty_monster@@Base+0x168>
   147d8:	movw	r0, #21100	; 0x526c
   147dc:	movt	r0, #2
   147e0:	bl	129c8 <puts@plt>
   147e4:	mvn	r0, #0
   147e8:	b	1481c <verify_empty_monster@@Base+0x168>
   147ec:	ldrh	r3, [r2, #4]
   147f0:	cmp	r3, #0
   147f4:	moveq	r0, #0
   147f8:	beq	1481c <verify_empty_monster@@Base+0x168>
   147fc:	movw	r0, #21136	; 0x5290
   14800:	movt	r0, #2
   14804:	bl	129c8 <puts@plt>
   14808:	mvn	r0, #0
   1480c:	b	1481c <verify_empty_monster@@Base+0x168>
   14810:	cmp	r1, #5
   14814:	bhi	147ec <verify_empty_monster@@Base+0x138>
   14818:	mov	r0, #0
   1481c:	ldr	r4, [sp]
   14820:	add	sp, sp, #4
   14824:	pop	{pc}		; (ldr pc, [sp], #4)
   14828:	movw	r3, #12849	; 0x3231
   1482c:	movt	r3, #13363	; 0x3433
   14830:	cmp	r2, r3
   14834:	movne	r3, #0
   14838:	bne	146e0 <verify_empty_monster@@Base+0x2c>
   1483c:	ldr	r2, [r0]
   14840:	add	r2, r0, r2
   14844:	mov	r1, r2
   14848:	mov	r3, #0
   1484c:	mov	ip, #0
   14850:	mov	r0, ip
   14854:	b	1470c <verify_empty_monster@@Base+0x58>

00014858 <test_enums@@Base>:
   14858:	mov	r0, #0
   1485c:	bx	lr

00014860 <test_type_aliases@@Base>:
   14860:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14864:	strd	r6, [sp, #8]
   14868:	str	r8, [sp, #16]
   1486c:	str	lr, [sp, #20]
   14870:	sub	sp, sp, #16
   14874:	mov	r4, r0
   14878:	bl	1ee18 <flatcc_builder_reset@@Base>
   1487c:	mvn	r3, #0
   14880:	str	r3, [sp, #4]
   14884:	mov	r3, #1
   14888:	str	r3, [sp]
   1488c:	mov	r2, #0
   14890:	mov	r1, r2
   14894:	mov	r0, r4
   14898:	bl	212a4 <flatcc_builder_create_vector@@Base>
   1489c:	mov	r6, r0
   148a0:	mvn	r3, #-536870912	; 0xe0000000
   148a4:	str	r3, [sp, #4]
   148a8:	mov	r3, #8
   148ac:	str	r3, [sp]
   148b0:	mov	r2, #0
   148b4:	mov	r1, r2
   148b8:	mov	r0, r4
   148bc:	bl	212a4 <flatcc_builder_create_vector@@Base>
   148c0:	mov	r7, r0
   148c4:	mov	r3, #0
   148c8:	mov	r2, r3
   148cc:	movw	r1, #20800	; 0x5140
   148d0:	movt	r1, #2
   148d4:	mov	r0, r4
   148d8:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   148dc:	subs	r5, r0, #0
   148e0:	beq	14ac0 <test_type_aliases@@Base+0x260>
   148e4:	add	r1, sp, #12
   148e8:	mov	r0, r4
   148ec:	bl	2299c <flatcc_builder_finalize_aligned_buffer@@Base>
   148f0:	mov	r4, r0
   148f4:	movw	r3, #12804	; 0x3204
   148f8:	movt	r3, #1
   148fc:	movw	r2, #20800	; 0x5140
   14900:	movt	r2, #2
   14904:	ldr	r1, [sp, #12]
   14908:	bl	23f7c <flatcc_verify_table_as_root@@Base>
   1490c:	subs	r5, r0, #0
   14910:	bne	14d54 <test_type_aliases@@Base+0x4f4>
   14914:	cmp	r4, #0
   14918:	beq	14d90 <test_type_aliases@@Base+0x530>
   1491c:	movw	r3, #20301	; 0x4f4d
   14920:	movt	r3, #21326	; 0x534e
   14924:	ldr	r2, [r4, #4]
   14928:	cmp	r2, r3
   1492c:	bne	14d90 <test_type_aliases@@Base+0x530>
   14930:	ldr	r2, [r4]
   14934:	adds	r3, r4, r2
   14938:	beq	14d90 <test_type_aliases@@Base+0x530>
   1493c:	ldr	r2, [r4, r2]
   14940:	sub	r2, r3, r2
   14944:	ldrh	ip, [r2]
   14948:	cmp	ip, #5
   1494c:	bls	14dac <test_type_aliases@@Base+0x54c>
   14950:	ldrh	r1, [r2, #4]
   14954:	cmp	r1, #0
   14958:	beq	14dac <test_type_aliases@@Base+0x54c>
   1495c:	ldrsb	r1, [r3, r1]
   14960:	cmn	r1, #128	; 0x80
   14964:	bne	14dac <test_type_aliases@@Base+0x54c>
   14968:	cmp	ip, #9
   1496c:	bls	14dac <test_type_aliases@@Base+0x54c>
   14970:	ldrh	r1, [r2, #8]
   14974:	cmp	r1, #0
   14978:	beq	14dac <test_type_aliases@@Base+0x54c>
   1497c:	ldrsh	r1, [r3, r1]
   14980:	cmn	r1, #32768	; 0x8000
   14984:	bne	14dac <test_type_aliases@@Base+0x54c>
   14988:	cmp	ip, #13
   1498c:	bls	14dac <test_type_aliases@@Base+0x54c>
   14990:	ldrh	r1, [r2, #12]
   14994:	cmp	r1, #0
   14998:	beq	14dac <test_type_aliases@@Base+0x54c>
   1499c:	ldr	r1, [r3, r1]
   149a0:	cmp	r1, #-2147483648	; 0x80000000
   149a4:	bne	14dac <test_type_aliases@@Base+0x54c>
   149a8:	cmp	ip, #17
   149ac:	bls	14dac <test_type_aliases@@Base+0x54c>
   149b0:	ldrh	r1, [r2, #16]
   149b4:	cmp	r1, #0
   149b8:	beq	14dac <test_type_aliases@@Base+0x54c>
   149bc:	ldrd	r0, [r1, r3]
   149c0:	cmp	r1, #-2147483648	; 0x80000000
   149c4:	cmpeq	r0, #0
   149c8:	bne	14dac <test_type_aliases@@Base+0x54c>
   149cc:	ldrh	r1, [r2, #6]
   149d0:	cmp	r1, #0
   149d4:	beq	14dac <test_type_aliases@@Base+0x54c>
   149d8:	ldrb	r1, [r3, r1]
   149dc:	cmp	r1, #255	; 0xff
   149e0:	bne	14dac <test_type_aliases@@Base+0x54c>
   149e4:	ldrh	r1, [r2, #10]
   149e8:	cmp	r1, #0
   149ec:	beq	14dac <test_type_aliases@@Base+0x54c>
   149f0:	ldrh	r0, [r3, r1]
   149f4:	movw	r1, #65535	; 0xffff
   149f8:	cmp	r0, r1
   149fc:	bne	14dac <test_type_aliases@@Base+0x54c>
   14a00:	ldrh	r1, [r2, #14]
   14a04:	cmp	r1, #0
   14a08:	beq	14dac <test_type_aliases@@Base+0x54c>
   14a0c:	ldr	r1, [r3, r1]
   14a10:	cmn	r1, #1
   14a14:	bne	14dac <test_type_aliases@@Base+0x54c>
   14a18:	cmp	ip, #19
   14a1c:	bls	14dac <test_type_aliases@@Base+0x54c>
   14a20:	ldrh	r1, [r2, #18]
   14a24:	cmp	r1, #0
   14a28:	beq	14dac <test_type_aliases@@Base+0x54c>
   14a2c:	ldrd	r6, [r3, r1]
   14a30:	mvn	r0, #0
   14a34:	mvn	r1, #0
   14a38:	cmp	r7, r1
   14a3c:	cmpeq	r6, r0
   14a40:	bne	14dac <test_type_aliases@@Base+0x54c>
   14a44:	cmp	ip, #21
   14a48:	bls	14dac <test_type_aliases@@Base+0x54c>
   14a4c:	ldrh	r1, [r2, #20]
   14a50:	cmp	r1, #0
   14a54:	beq	14dac <test_type_aliases@@Base+0x54c>
   14a58:	add	r1, r3, r1
   14a5c:	vldr	s14, [r1]
   14a60:	vldr	s15, [pc, #864]	; 14dc8 <test_type_aliases@@Base+0x568>
   14a64:	vcmp.f32	s14, s15
   14a68:	vmrs	APSR_nzcv, fpscr
   14a6c:	bne	14dac <test_type_aliases@@Base+0x54c>
   14a70:	cmp	ip, #23
   14a74:	bls	14dac <test_type_aliases@@Base+0x54c>
   14a78:	ldrh	r2, [r2, #22]
   14a7c:	cmp	r2, #0
   14a80:	beq	14dac <test_type_aliases@@Base+0x54c>
   14a84:	add	r3, r3, r2
   14a88:	vldr	d6, [r3]
   14a8c:	vldr	d7, [pc, #812]	; 14dc0 <test_type_aliases@@Base+0x560>
   14a90:	vcmp.f64	d6, d7
   14a94:	vmrs	APSR_nzcv, fpscr
   14a98:	bne	14dac <test_type_aliases@@Base+0x54c>
   14a9c:	mov	r0, r4
   14aa0:	bl	22abc <flatcc_builder_aligned_free@@Base>
   14aa4:	mov	r0, r5
   14aa8:	add	sp, sp, #16
   14aac:	ldrd	r4, [sp]
   14ab0:	ldrd	r6, [sp, #8]
   14ab4:	ldr	r8, [sp, #16]
   14ab8:	add	sp, sp, #20
   14abc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ac0:	mov	r1, #12
   14ac4:	mov	r0, r4
   14ac8:	bl	20608 <flatcc_builder_start_table@@Base>
   14acc:	subs	r8, r0, #0
   14ad0:	bne	14cb8 <test_type_aliases@@Base+0x458>
   14ad4:	mov	r3, #8
   14ad8:	mov	r2, r3
   14adc:	mov	r1, #6
   14ae0:	mov	r0, r4
   14ae4:	bl	221cc <flatcc_builder_table_add@@Base>
   14ae8:	cmp	r0, #0
   14aec:	beq	14ce4 <test_type_aliases@@Base+0x484>
   14af0:	mov	r2, #0
   14af4:	mov	r3, #-2147483648	; 0x80000000
   14af8:	strd	r2, [r0]
   14afc:	mov	r3, #8
   14b00:	mov	r2, r3
   14b04:	mov	r1, #7
   14b08:	mov	r0, r4
   14b0c:	bl	221cc <flatcc_builder_table_add@@Base>
   14b10:	cmp	r0, #0
   14b14:	beq	14cec <test_type_aliases@@Base+0x48c>
   14b18:	mvn	r2, #0
   14b1c:	mvn	r3, #0
   14b20:	strd	r2, [r0]
   14b24:	mov	r3, #8
   14b28:	mov	r2, r3
   14b2c:	mov	r1, #9
   14b30:	mov	r0, r4
   14b34:	bl	221cc <flatcc_builder_table_add@@Base>
   14b38:	cmp	r0, #0
   14b3c:	beq	14cf4 <test_type_aliases@@Base+0x494>
   14b40:	movw	r2, #26214	; 0x6666
   14b44:	movt	r2, #26214	; 0x6666
   14b48:	movw	r3, #26214	; 0x6666
   14b4c:	movt	r3, #16386	; 0x4002
   14b50:	strd	r2, [r0]
   14b54:	mov	r3, #4
   14b58:	mov	r2, r3
   14b5c:	mov	r1, r3
   14b60:	mov	r0, r4
   14b64:	bl	221cc <flatcc_builder_table_add@@Base>
   14b68:	cmp	r0, #0
   14b6c:	beq	14cfc <test_type_aliases@@Base+0x49c>
   14b70:	mov	r3, #-2147483648	; 0x80000000
   14b74:	str	r3, [r0]
   14b78:	mov	r3, #4
   14b7c:	mov	r2, r3
   14b80:	mov	r1, #5
   14b84:	mov	r0, r4
   14b88:	bl	221cc <flatcc_builder_table_add@@Base>
   14b8c:	cmp	r0, #0
   14b90:	beq	14d04 <test_type_aliases@@Base+0x4a4>
   14b94:	mvn	r3, #0
   14b98:	str	r3, [r0]
   14b9c:	mov	r3, #4
   14ba0:	mov	r2, r3
   14ba4:	mov	r1, #8
   14ba8:	mov	r0, r4
   14bac:	bl	221cc <flatcc_builder_table_add@@Base>
   14bb0:	cmp	r0, #0
   14bb4:	beq	14d0c <test_type_aliases@@Base+0x4ac>
   14bb8:	movw	r3, #13107	; 0x3333
   14bbc:	movt	r3, #16403	; 0x4013
   14bc0:	str	r3, [r0]
   14bc4:	cmp	r6, #0
   14bc8:	beq	14d14 <test_type_aliases@@Base+0x4b4>
   14bcc:	mov	r1, #10
   14bd0:	mov	r0, r4
   14bd4:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   14bd8:	cmp	r0, #0
   14bdc:	beq	14d1c <test_type_aliases@@Base+0x4bc>
   14be0:	str	r6, [r0]
   14be4:	cmp	r7, #0
   14be8:	beq	14d24 <test_type_aliases@@Base+0x4c4>
   14bec:	mov	r1, #11
   14bf0:	mov	r0, r4
   14bf4:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   14bf8:	cmp	r0, #0
   14bfc:	beq	14d2c <test_type_aliases@@Base+0x4cc>
   14c00:	str	r7, [r0]
   14c04:	mov	r3, #2
   14c08:	mov	r2, r3
   14c0c:	mov	r1, r3
   14c10:	mov	r0, r4
   14c14:	bl	221cc <flatcc_builder_table_add@@Base>
   14c18:	cmp	r0, #0
   14c1c:	beq	14d34 <test_type_aliases@@Base+0x4d4>
   14c20:	mov	r3, #32768	; 0x8000
   14c24:	strh	r3, [r0]
   14c28:	mov	r3, #2
   14c2c:	mov	r2, r3
   14c30:	mov	r1, #3
   14c34:	mov	r0, r4
   14c38:	bl	221cc <flatcc_builder_table_add@@Base>
   14c3c:	cmp	r0, #0
   14c40:	beq	14d3c <test_type_aliases@@Base+0x4dc>
   14c44:	mvn	r3, #0
   14c48:	strh	r3, [r0]
   14c4c:	mov	r3, #1
   14c50:	mov	r2, r3
   14c54:	mov	r1, #0
   14c58:	mov	r0, r4
   14c5c:	bl	221cc <flatcc_builder_table_add@@Base>
   14c60:	cmp	r0, #0
   14c64:	beq	14d44 <test_type_aliases@@Base+0x4e4>
   14c68:	mvn	r3, #127	; 0x7f
   14c6c:	strb	r3, [r0]
   14c70:	mov	r3, #1
   14c74:	mov	r2, r3
   14c78:	mov	r1, r3
   14c7c:	mov	r0, r4
   14c80:	bl	221cc <flatcc_builder_table_add@@Base>
   14c84:	cmp	r0, #0
   14c88:	beq	14d4c <test_type_aliases@@Base+0x4ec>
   14c8c:	mvn	r3, #0
   14c90:	strb	r3, [r0]
   14c94:	mov	r2, #0
   14c98:	ldr	r1, [pc, #300]	; 14dcc <test_type_aliases@@Base+0x56c>
   14c9c:	mov	r0, r4
   14ca0:	bl	21030 <flatcc_builder_check_required@@Base>
   14ca4:	cmp	r0, #0
   14ca8:	beq	14cc8 <test_type_aliases@@Base+0x468>
   14cac:	mov	r0, r4
   14cb0:	bl	210e0 <flatcc_builder_end_table@@Base>
   14cb4:	mov	r5, r0
   14cb8:	mov	r1, r5
   14cbc:	mov	r0, r4
   14cc0:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   14cc4:	b	148e4 <test_type_aliases@@Base+0x84>
   14cc8:	ldr	r3, [pc, #256]	; 14dd0 <test_type_aliases@@Base+0x570>
   14ccc:	mov	r2, #237	; 0xed
   14cd0:	movw	r1, #21196	; 0x52cc
   14cd4:	movt	r1, #2
   14cd8:	movw	r0, #21296	; 0x5330
   14cdc:	movt	r0, #2
   14ce0:	bl	12a64 <__assert_fail@plt>
   14ce4:	mov	r5, r8
   14ce8:	b	14cb8 <test_type_aliases@@Base+0x458>
   14cec:	mov	r5, r8
   14cf0:	b	14cb8 <test_type_aliases@@Base+0x458>
   14cf4:	mov	r5, r8
   14cf8:	b	14cb8 <test_type_aliases@@Base+0x458>
   14cfc:	mov	r5, r8
   14d00:	b	14cb8 <test_type_aliases@@Base+0x458>
   14d04:	mov	r5, r8
   14d08:	b	14cb8 <test_type_aliases@@Base+0x458>
   14d0c:	mov	r5, r8
   14d10:	b	14cb8 <test_type_aliases@@Base+0x458>
   14d14:	mov	r5, r6
   14d18:	b	14cb8 <test_type_aliases@@Base+0x458>
   14d1c:	mov	r5, r8
   14d20:	b	14cb8 <test_type_aliases@@Base+0x458>
   14d24:	mov	r5, r7
   14d28:	b	14cb8 <test_type_aliases@@Base+0x458>
   14d2c:	mov	r5, r8
   14d30:	b	14cb8 <test_type_aliases@@Base+0x458>
   14d34:	mov	r5, r8
   14d38:	b	14cb8 <test_type_aliases@@Base+0x458>
   14d3c:	mov	r5, r8
   14d40:	b	14cb8 <test_type_aliases@@Base+0x458>
   14d44:	mov	r5, r8
   14d48:	b	14cb8 <test_type_aliases@@Base+0x458>
   14d4c:	mov	r5, r8
   14d50:	b	14cb8 <test_type_aliases@@Base+0x458>
   14d54:	movw	r3, #36976	; 0x9070
   14d58:	movt	r3, #3
   14d5c:	ldr	r3, [r3]
   14d60:	ldr	r2, [sp, #12]
   14d64:	mov	r1, r4
   14d68:	movw	r0, #21472	; 0x53e0
   14d6c:	movt	r0, #2
   14d70:	bl	13384 <_start@@Base+0x914>
   14d74:	mov	r0, r5
   14d78:	bl	231c4 <flatcc_verify_error_string@@Base>
   14d7c:	mov	r1, r0
   14d80:	movw	r0, #21492	; 0x53f4
   14d84:	movt	r0, #2
   14d88:	bl	12974 <printf@plt>
   14d8c:	b	14a9c <test_type_aliases@@Base+0x23c>
   14d90:	ldr	r3, [pc, #60]	; 14dd4 <test_type_aliases@@Base+0x574>
   14d94:	movw	r2, #749	; 0x2ed
   14d98:	movw	r1, #20464	; 0x4ff0
   14d9c:	movt	r1, #2
   14da0:	movw	r0, #20564	; 0x5054
   14da4:	movt	r0, #2
   14da8:	bl	12a64 <__assert_fail@plt>
   14dac:	movw	r0, #21536	; 0x5420
   14db0:	movt	r0, #2
   14db4:	bl	129c8 <puts@plt>
   14db8:	mvn	r5, #0
   14dbc:	b	14a9c <test_type_aliases@@Base+0x23c>
   14dc0:	strbtvs	r6, [r6], -r6, ror #12
   14dc4:	andmi	r6, r2, r6, ror #12
   14dc8:	andsmi	r3, r3, r3, lsr r3
   14dcc:	strdeq	r4, [r2], -ip
   14dd0:	andeq	r4, r2, r0, lsl #20
   14dd4:	andeq	r4, r2, r0, lsr #20

00014dd8 <test_empty_monster@@Base>:
   14dd8:	strd	r4, [sp, #-12]!
   14ddc:	str	lr, [sp, #8]
   14de0:	sub	sp, sp, #12
   14de4:	mov	r4, r0
   14de8:	bl	1ee18 <flatcc_builder_reset@@Base>
   14dec:	mov	r3, #0
   14df0:	mov	r2, r3
   14df4:	movw	r1, #20800	; 0x5140
   14df8:	movt	r1, #2
   14dfc:	mov	r0, r4
   14e00:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   14e04:	mov	r1, #36	; 0x24
   14e08:	mov	r0, r4
   14e0c:	bl	20608 <flatcc_builder_start_table@@Base>
   14e10:	movw	r1, #21584	; 0x5450
   14e14:	movt	r1, #2
   14e18:	mov	r0, r4
   14e1c:	bl	22020 <flatcc_builder_create_string_str@@Base>
   14e20:	subs	r5, r0, #0
   14e24:	beq	14e3c <test_empty_monster@@Base+0x64>
   14e28:	mov	r1, #3
   14e2c:	mov	r0, r4
   14e30:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   14e34:	cmp	r0, #0
   14e38:	strne	r5, [r0]
   14e3c:	mov	r2, #1
   14e40:	ldr	r1, [pc, #280]	; 14f60 <test_empty_monster@@Base+0x188>
   14e44:	mov	r0, r4
   14e48:	bl	21030 <flatcc_builder_check_required@@Base>
   14e4c:	cmp	r0, #0
   14e50:	beq	14ec4 <test_empty_monster@@Base+0xec>
   14e54:	mov	r0, r4
   14e58:	bl	210e0 <flatcc_builder_end_table@@Base>
   14e5c:	mov	r1, r0
   14e60:	mov	r0, r4
   14e64:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   14e68:	add	r1, sp, #4
   14e6c:	mov	r0, r4
   14e70:	bl	2299c <flatcc_builder_finalize_aligned_buffer@@Base>
   14e74:	mov	r4, r0
   14e78:	movw	r3, #36976	; 0x9070
   14e7c:	movt	r3, #3
   14e80:	ldr	r3, [r3]
   14e84:	ldr	r2, [sp, #4]
   14e88:	mov	r1, r0
   14e8c:	movw	r0, #21760	; 0x5500
   14e90:	movt	r0, #2
   14e94:	bl	13384 <_start@@Base+0x914>
   14e98:	mov	r0, r4
   14e9c:	bl	146b4 <verify_empty_monster@@Base>
   14ea0:	subs	r5, r0, #0
   14ea4:	beq	14ee0 <test_empty_monster@@Base+0x108>
   14ea8:	mov	r0, r4
   14eac:	bl	22abc <flatcc_builder_aligned_free@@Base>
   14eb0:	mov	r0, r5
   14eb4:	add	sp, sp, #12
   14eb8:	ldrd	r4, [sp]
   14ebc:	add	sp, sp, #8
   14ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ec4:	ldr	r3, [pc, #152]	; 14f64 <test_empty_monster@@Base+0x18c>
   14ec8:	mov	r2, #235	; 0xeb
   14ecc:	movw	r1, #21196	; 0x52cc
   14ed0:	movt	r1, #2
   14ed4:	movw	r0, #21596	; 0x545c
   14ed8:	movt	r0, #2
   14edc:	bl	12a64 <__assert_fail@plt>
   14ee0:	movw	r3, #14092	; 0x370c
   14ee4:	movt	r3, #1
   14ee8:	movw	r2, #20800	; 0x5140
   14eec:	movt	r2, #2
   14ef0:	ldr	r1, [sp, #4]
   14ef4:	mov	r0, r4
   14ef8:	bl	23f7c <flatcc_verify_table_as_root@@Base>
   14efc:	subs	r5, r0, #0
   14f00:	bne	14f40 <test_empty_monster@@Base+0x168>
   14f04:	movw	r3, #14092	; 0x370c
   14f08:	movt	r3, #1
   14f0c:	movw	r2, #20800	; 0x5140
   14f10:	movt	r2, #2
   14f14:	ldr	r1, [sp, #4]
   14f18:	sub	r1, r1, #1
   14f1c:	mov	r0, r4
   14f20:	bl	23f7c <flatcc_verify_table_as_root@@Base>
   14f24:	cmp	r0, #0
   14f28:	bne	14ea8 <test_empty_monster@@Base+0xd0>
   14f2c:	movw	r0, #21820	; 0x553c
   14f30:	movt	r0, #2
   14f34:	bl	129c8 <puts@plt>
   14f38:	mvn	r5, #0
   14f3c:	b	14eb0 <test_empty_monster@@Base+0xd8>
   14f40:	mov	r0, r5
   14f44:	bl	231c4 <flatcc_verify_error_string@@Base>
   14f48:	mov	r1, r0
   14f4c:	movw	r0, #21780	; 0x5514
   14f50:	movt	r0, #2
   14f54:	bl	12974 <printf@plt>
   14f58:	mvn	r5, #0
   14f5c:	b	14eb0 <test_empty_monster@@Base+0xd8>
   14f60:	andeq	r4, r2, r0, asr #20
   14f64:	andeq	r4, r2, r4, asr #20

00014f68 <test_typed_empty_monster@@Base>:
   14f68:	strd	r4, [sp, #-16]!
   14f6c:	str	r6, [sp, #8]
   14f70:	str	lr, [sp, #12]
   14f74:	sub	sp, sp, #8
   14f78:	mov	r4, r0
   14f7c:	mov	r5, #0
   14f80:	str	r5, [sp]
   14f84:	bl	1ee18 <flatcc_builder_reset@@Base>
   14f88:	mov	r3, r5
   14f8c:	mov	r2, r5
   14f90:	movw	r1, #21892	; 0x5584
   14f94:	movt	r1, #2
   14f98:	mov	r0, r4
   14f9c:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   14fa0:	mov	r1, #36	; 0x24
   14fa4:	mov	r0, r4
   14fa8:	bl	20608 <flatcc_builder_start_table@@Base>
   14fac:	movw	r1, #21584	; 0x5450
   14fb0:	movt	r1, #2
   14fb4:	mov	r0, r4
   14fb8:	bl	134e4 <_start@@Base+0xa74>
   14fbc:	mov	r2, #1
   14fc0:	ldr	r1, [pc, #772]	; 152cc <test_typed_empty_monster@@Base+0x364>
   14fc4:	mov	r0, r4
   14fc8:	bl	21030 <flatcc_builder_check_required@@Base>
   14fcc:	cmp	r0, r5
   14fd0:	beq	151bc <test_typed_empty_monster@@Base+0x254>
   14fd4:	mov	r0, r4
   14fd8:	bl	210e0 <flatcc_builder_end_table@@Base>
   14fdc:	mov	r1, r0
   14fe0:	mov	r0, r4
   14fe4:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   14fe8:	add	r1, sp, #4
   14fec:	mov	r0, r4
   14ff0:	bl	2299c <flatcc_builder_finalize_aligned_buffer@@Base>
   14ff4:	mov	r4, r0
   14ff8:	movw	r3, #36976	; 0x9070
   14ffc:	movt	r3, #3
   15000:	ldr	r3, [r3]
   15004:	ldr	r2, [sp, #4]
   15008:	mov	r1, r0
   1500c:	movw	r0, #21900	; 0x558c
   15010:	movt	r0, #2
   15014:	bl	13384 <_start@@Base+0x914>
   15018:	ldr	r1, [r4, #4]
   1501c:	mov	r2, #77	; 0x4d
   15020:	movw	r3, #40389	; 0x9dc5
   15024:	movt	r3, #33052	; 0x811c
   15028:	movw	r0, #21868	; 0x556c
   1502c:	movt	r0, #2
   15030:	movw	ip, #403	; 0x193
   15034:	movt	ip, #256	; 0x100
   15038:	eor	r3, r3, r2
   1503c:	mul	r3, ip, r3
   15040:	ldrb	r2, [r0, #1]!
   15044:	cmp	r2, #0
   15048:	bne	15038 <test_typed_empty_monster@@Base+0xd0>
   1504c:	cmp	r3, #0
   15050:	beq	1528c <test_typed_empty_monster@@Base+0x324>
   15054:	cmp	r3, r1
   15058:	bne	151d8 <test_typed_empty_monster@@Base+0x270>
   1505c:	movw	r3, #62593	; 0xf481
   15060:	movt	r3, #13070	; 0x330e
   15064:	cmp	r1, r3
   15068:	bne	1529c <test_typed_empty_monster@@Base+0x334>
   1506c:	mov	r0, r4
   15070:	bl	146b4 <verify_empty_monster@@Base>
   15074:	cmp	r0, #0
   15078:	beq	151ec <test_typed_empty_monster@@Base+0x284>
   1507c:	movw	r3, #14092	; 0x370c
   15080:	movt	r3, #1
   15084:	movw	r2, #21892	; 0x5584
   15088:	movt	r2, #2
   1508c:	ldr	r1, [sp, #4]
   15090:	mov	r0, r4
   15094:	bl	23f7c <flatcc_verify_table_as_root@@Base>
   15098:	subs	r5, r0, #0
   1509c:	bne	15200 <test_typed_empty_monster@@Base+0x298>
   150a0:	movw	r3, #14092	; 0x370c
   150a4:	movt	r3, #1
   150a8:	movw	r2, #21892	; 0x5584
   150ac:	movt	r2, #2
   150b0:	ldr	r1, [sp, #4]
   150b4:	mov	r0, r4
   150b8:	bl	23f7c <flatcc_verify_table_as_root@@Base>
   150bc:	subs	r5, r0, #0
   150c0:	bne	1521c <test_typed_empty_monster@@Base+0x2b4>
   150c4:	movw	r3, #14092	; 0x370c
   150c8:	movt	r3, #1
   150cc:	movw	r2, #62593	; 0xf481
   150d0:	movt	r2, #13070	; 0x330e
   150d4:	ldr	r1, [sp, #4]
   150d8:	mov	r0, r4
   150dc:	bl	24094 <flatcc_verify_table_as_typed_root@@Base>
   150e0:	subs	r5, r0, #0
   150e4:	bne	15238 <test_typed_empty_monster@@Base+0x2d0>
   150e8:	ldr	r1, [sp, #4]
   150ec:	movw	r0, #21868	; 0x556c
   150f0:	movt	r0, #2
   150f4:	movw	r2, #40389	; 0x9dc5
   150f8:	movt	r2, #33052	; 0x811c
   150fc:	mov	r3, #77	; 0x4d
   15100:	movw	ip, #403	; 0x193
   15104:	movt	ip, #256	; 0x100
   15108:	eor	r2, r2, r3
   1510c:	mul	r2, ip, r2
   15110:	ldrb	r3, [r0, #1]!
   15114:	cmp	r3, #0
   15118:	bne	15108 <test_typed_empty_monster@@Base+0x1a0>
   1511c:	movw	r0, #40389	; 0x9dc5
   15120:	movt	r0, #33052	; 0x811c
   15124:	movw	r3, #14092	; 0x370c
   15128:	movt	r3, #1
   1512c:	cmp	r2, #0
   15130:	moveq	r2, r0
   15134:	mov	r0, r4
   15138:	bl	24094 <flatcc_verify_table_as_typed_root@@Base>
   1513c:	subs	r5, r0, #0
   15140:	bne	15254 <test_typed_empty_monster@@Base+0x2ec>
   15144:	mvn	r3, #126	; 0x7e
   15148:	strb	r3, [sp]
   1514c:	mvn	r3, #11
   15150:	strb	r3, [sp, #1]
   15154:	mov	r3, #14
   15158:	strb	r3, [sp, #2]
   1515c:	mov	r3, #51	; 0x33
   15160:	strb	r3, [sp, #3]
   15164:	movw	r3, #14092	; 0x370c
   15168:	movt	r3, #1
   1516c:	mov	r2, sp
   15170:	ldr	r1, [sp, #4]
   15174:	mov	r0, r4
   15178:	bl	23f7c <flatcc_verify_table_as_root@@Base>
   1517c:	subs	r5, r0, #0
   15180:	bne	15270 <test_typed_empty_monster@@Base+0x308>
   15184:	movw	r3, #14092	; 0x370c
   15188:	movt	r3, #1
   1518c:	movw	r2, #20800	; 0x5140
   15190:	movt	r2, #2
   15194:	ldr	r1, [sp, #4]
   15198:	mov	r0, r4
   1519c:	bl	23f7c <flatcc_verify_table_as_root@@Base>
   151a0:	subs	r6, r0, #0
   151a4:	bne	152ac <test_typed_empty_monster@@Base+0x344>
   151a8:	movw	r0, #22252	; 0x56ec
   151ac:	movt	r0, #2
   151b0:	bl	129c8 <puts@plt>
   151b4:	mov	r5, r6
   151b8:	b	152ac <test_typed_empty_monster@@Base+0x344>
   151bc:	ldr	r3, [pc, #268]	; 152d0 <test_typed_empty_monster@@Base+0x368>
   151c0:	mov	r2, #235	; 0xeb
   151c4:	movw	r1, #21196	; 0x52cc
   151c8:	movt	r1, #2
   151cc:	movw	r0, #21596	; 0x545c
   151d0:	movt	r0, #2
   151d4:	bl	12a64 <__assert_fail@plt>
   151d8:	movw	r0, #21928	; 0x55a8
   151dc:	movt	r0, #2
   151e0:	bl	12974 <printf@plt>
   151e4:	mvn	r5, #0
   151e8:	b	152ac <test_typed_empty_monster@@Base+0x344>
   151ec:	movw	r0, #22020	; 0x5604
   151f0:	movt	r0, #2
   151f4:	bl	129c8 <puts@plt>
   151f8:	mvn	r5, #0
   151fc:	b	152ac <test_typed_empty_monster@@Base+0x344>
   15200:	mov	r0, r5
   15204:	bl	231c4 <flatcc_verify_error_string@@Base>
   15208:	mov	r1, r0
   1520c:	movw	r0, #22084	; 0x5644
   15210:	movt	r0, #2
   15214:	bl	12974 <printf@plt>
   15218:	b	152ac <test_typed_empty_monster@@Base+0x344>
   1521c:	mov	r0, r5
   15220:	bl	231c4 <flatcc_verify_error_string@@Base>
   15224:	mov	r1, r0
   15228:	movw	r0, #22084	; 0x5644
   1522c:	movt	r0, #2
   15230:	bl	12974 <printf@plt>
   15234:	b	152ac <test_typed_empty_monster@@Base+0x344>
   15238:	mov	r0, r5
   1523c:	bl	231c4 <flatcc_verify_error_string@@Base>
   15240:	mov	r1, r0
   15244:	movw	r0, #22132	; 0x5674
   15248:	movt	r0, #2
   1524c:	bl	12974 <printf@plt>
   15250:	b	152ac <test_typed_empty_monster@@Base+0x344>
   15254:	mov	r0, r5
   15258:	bl	231c4 <flatcc_verify_error_string@@Base>
   1525c:	mov	r1, r0
   15260:	movw	r0, #22188	; 0x56ac
   15264:	movt	r0, #2
   15268:	bl	12974 <printf@plt>
   1526c:	b	152ac <test_typed_empty_monster@@Base+0x344>
   15270:	mov	r0, r5
   15274:	bl	231c4 <flatcc_verify_error_string@@Base>
   15278:	mov	r1, r0
   1527c:	movw	r0, #22084	; 0x5644
   15280:	movt	r0, #2
   15284:	bl	12974 <printf@plt>
   15288:	b	152ac <test_typed_empty_monster@@Base+0x344>
   1528c:	movw	r3, #40389	; 0x9dc5
   15290:	movt	r3, #33052	; 0x811c
   15294:	cmp	r1, r3
   15298:	bne	151d8 <test_typed_empty_monster@@Base+0x270>
   1529c:	movw	r0, #21980	; 0x55dc
   152a0:	movt	r0, #2
   152a4:	bl	129c8 <puts@plt>
   152a8:	mvn	r5, #0
   152ac:	mov	r0, r4
   152b0:	bl	22abc <flatcc_builder_aligned_free@@Base>
   152b4:	mov	r0, r5
   152b8:	add	sp, sp, #8
   152bc:	ldrd	r4, [sp]
   152c0:	ldr	r6, [sp, #8]
   152c4:	add	sp, sp, #12
   152c8:	pop	{pc}		; (ldr pc, [sp], #4)
   152cc:	andeq	r4, r2, r0, asr #20
   152d0:	andeq	r4, r2, r4, asr #20

000152d4 <verify_table_with_emptystruct@@Base>:
   152d4:	str	r4, [sp, #-8]!
   152d8:	str	lr, [sp, #4]
   152dc:	cmp	r0, #0
   152e0:	beq	1533c <verify_table_with_emptystruct@@Base+0x68>
   152e4:	movw	r3, #20301	; 0x4f4d
   152e8:	movt	r3, #21326	; 0x534e
   152ec:	ldr	r2, [r0, #4]
   152f0:	cmp	r2, r3
   152f4:	bne	1533c <verify_table_with_emptystruct@@Base+0x68>
   152f8:	ldr	r3, [r0]
   152fc:	adds	r2, r0, r3
   15300:	beq	1533c <verify_table_with_emptystruct@@Base+0x68>
   15304:	ldr	r3, [r0, r3]
   15308:	sub	r3, r2, r3
   1530c:	ldrh	r1, [r3]
   15310:	cmp	r1, #5
   15314:	bls	15350 <verify_table_with_emptystruct@@Base+0x7c>
   15318:	ldrh	r3, [r3, #4]
   1531c:	cmp	r3, #0
   15320:	beq	15350 <verify_table_with_emptystruct@@Base+0x7c>
   15324:	cmn	r2, r3
   15328:	movne	r0, #0
   1532c:	beq	15350 <verify_table_with_emptystruct@@Base+0x7c>
   15330:	ldr	r4, [sp]
   15334:	add	sp, sp, #4
   15338:	pop	{pc}		; (ldr pc, [sp], #4)
   1533c:	movw	r0, #22328	; 0x5738
   15340:	movt	r0, #2
   15344:	bl	129c8 <puts@plt>
   15348:	mvn	r0, #0
   1534c:	b	15330 <verify_table_with_emptystruct@@Base+0x5c>
   15350:	movw	r0, #22368	; 0x5760
   15354:	movt	r0, #2
   15358:	bl	129c8 <puts@plt>
   1535c:	mvn	r0, #0
   15360:	b	15330 <verify_table_with_emptystruct@@Base+0x5c>

00015364 <test_table_with_emptystruct@@Base>:
   15364:	strd	r4, [sp, #-16]!
   15368:	str	r6, [sp, #8]
   1536c:	str	lr, [sp, #12]
   15370:	sub	sp, sp, #8
   15374:	mov	r4, r0
   15378:	bl	1ee18 <flatcc_builder_reset@@Base>
   1537c:	mov	r3, #0
   15380:	mov	r2, r3
   15384:	movw	r1, #20800	; 0x5140
   15388:	movt	r1, #2
   1538c:	mov	r0, r4
   15390:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   15394:	subs	r5, r0, #0
   15398:	beq	153f8 <test_table_with_emptystruct@@Base+0x94>
   1539c:	add	r1, sp, #4
   153a0:	mov	r0, r4
   153a4:	bl	2299c <flatcc_builder_finalize_aligned_buffer@@Base>
   153a8:	mov	r4, r0
   153ac:	movw	r3, #36976	; 0x9070
   153b0:	movt	r3, #3
   153b4:	ldr	r3, [r3]
   153b8:	ldr	r2, [sp, #4]
   153bc:	mov	r1, r0
   153c0:	movw	r0, #22588	; 0x583c
   153c4:	movt	r0, #2
   153c8:	bl	13384 <_start@@Base+0x914>
   153cc:	mov	r0, r4
   153d0:	bl	152d4 <verify_table_with_emptystruct@@Base>
   153d4:	mov	r5, r0
   153d8:	mov	r0, r4
   153dc:	bl	22abc <flatcc_builder_aligned_free@@Base>
   153e0:	mov	r0, r5
   153e4:	add	sp, sp, #8
   153e8:	ldrd	r4, [sp]
   153ec:	ldr	r6, [sp, #8]
   153f0:	add	sp, sp, #12
   153f4:	pop	{pc}		; (ldr pc, [sp], #4)
   153f8:	mov	r1, #1
   153fc:	mov	r0, r4
   15400:	bl	20608 <flatcc_builder_start_table@@Base>
   15404:	subs	r6, r0, #0
   15408:	beq	1541c <test_table_with_emptystruct@@Base+0xb8>
   1540c:	mov	r1, r5
   15410:	mov	r0, r4
   15414:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   15418:	b	1539c <test_table_with_emptystruct@@Base+0x38>
   1541c:	mov	r3, #1
   15420:	mov	r2, #0
   15424:	mov	r1, r2
   15428:	mov	r0, r4
   1542c:	bl	221cc <flatcc_builder_table_add@@Base>
   15430:	cmp	r0, #0
   15434:	beq	1547c <test_table_with_emptystruct@@Base+0x118>
   15438:	mov	r2, #0
   1543c:	ldr	r1, [pc, #64]	; 15484 <test_table_with_emptystruct@@Base+0x120>
   15440:	mov	r0, r4
   15444:	bl	21030 <flatcc_builder_check_required@@Base>
   15448:	cmp	r0, #0
   1544c:	beq	15460 <test_table_with_emptystruct@@Base+0xfc>
   15450:	mov	r0, r4
   15454:	bl	210e0 <flatcc_builder_end_table@@Base>
   15458:	mov	r5, r0
   1545c:	b	1540c <test_table_with_emptystruct@@Base+0xa8>
   15460:	ldr	r3, [pc, #32]	; 15488 <test_table_with_emptystruct@@Base+0x124>
   15464:	mov	r2, #215	; 0xd7
   15468:	movw	r1, #21196	; 0x52cc
   1546c:	movt	r1, #2
   15470:	movw	r0, #22396	; 0x577c
   15474:	movt	r0, #2
   15478:	bl	12a64 <__assert_fail@plt>
   1547c:	mov	r5, r6
   15480:	b	1540c <test_table_with_emptystruct@@Base+0xa8>
   15484:	andeq	r4, r2, r0, ror #20
   15488:	andeq	r4, r2, r4, ror #20

0001548c <test_typed_table_with_emptystruct@@Base>:
   1548c:	strd	r4, [sp, #-16]!
   15490:	str	r6, [sp, #8]
   15494:	str	lr, [sp, #12]
   15498:	sub	sp, sp, #8
   1549c:	mov	r4, r0
   154a0:	bl	1ee18 <flatcc_builder_reset@@Base>
   154a4:	mov	r3, #0
   154a8:	mov	r2, r3
   154ac:	movw	r1, #22612	; 0x5854
   154b0:	movt	r1, #2
   154b4:	mov	r0, r4
   154b8:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   154bc:	subs	r5, r0, #0
   154c0:	beq	155a0 <test_typed_table_with_emptystruct@@Base+0x114>
   154c4:	add	r1, sp, #4
   154c8:	mov	r0, r4
   154cc:	bl	22840 <flatcc_builder_get_direct_buffer@@Base>
   154d0:	mov	r4, r0
   154d4:	movw	r3, #36976	; 0x9070
   154d8:	movt	r3, #3
   154dc:	ldr	r3, [r3]
   154e0:	ldr	r2, [sp, #4]
   154e4:	mov	r1, r0
   154e8:	movw	r0, #22620	; 0x585c
   154ec:	movt	r0, #2
   154f0:	bl	13384 <_start@@Base+0x914>
   154f4:	movw	r3, #12768	; 0x31e0
   154f8:	movt	r3, #1
   154fc:	movw	r2, #22612	; 0x5854
   15500:	movt	r2, #2
   15504:	ldr	r1, [sp, #4]
   15508:	mov	r0, r4
   1550c:	bl	23f7c <flatcc_verify_table_as_root@@Base>
   15510:	cmp	r0, #0
   15514:	bne	1562c <test_typed_table_with_emptystruct@@Base+0x1a0>
   15518:	movw	r3, #12768	; 0x31e0
   1551c:	movt	r3, #1
   15520:	movw	r2, #22612	; 0x5854
   15524:	movt	r2, #2
   15528:	ldr	r1, [sp, #4]
   1552c:	mov	r0, r4
   15530:	bl	23f7c <flatcc_verify_table_as_root@@Base>
   15534:	cmp	r0, #0
   15538:	bne	15640 <test_typed_table_with_emptystruct@@Base+0x1b4>
   1553c:	movw	r3, #12768	; 0x31e0
   15540:	movt	r3, #1
   15544:	movw	r2, #14262	; 0x37b6
   15548:	movt	r2, #45277	; 0xb0dd
   1554c:	ldr	r1, [sp, #4]
   15550:	mov	r0, r4
   15554:	bl	24094 <flatcc_verify_table_as_typed_root@@Base>
   15558:	cmp	r0, #0
   1555c:	bne	15654 <test_typed_table_with_emptystruct@@Base+0x1c8>
   15560:	cmp	r4, #0
   15564:	beq	15668 <test_typed_table_with_emptystruct@@Base+0x1dc>
   15568:	movw	r3, #14262	; 0x37b6
   1556c:	movt	r3, #45277	; 0xb0dd
   15570:	ldr	r2, [r4, #4]
   15574:	cmp	r2, r3
   15578:	beq	1567c <test_typed_table_with_emptystruct@@Base+0x1f0>
   1557c:	movw	r0, #22776	; 0x58f8
   15580:	movt	r0, #2
   15584:	bl	129c8 <puts@plt>
   15588:	mvn	r0, #0
   1558c:	add	sp, sp, #8
   15590:	ldrd	r4, [sp]
   15594:	ldr	r6, [sp, #8]
   15598:	add	sp, sp, #12
   1559c:	pop	{pc}		; (ldr pc, [sp], #4)
   155a0:	mov	r1, #1
   155a4:	mov	r0, r4
   155a8:	bl	20608 <flatcc_builder_start_table@@Base>
   155ac:	subs	r6, r0, #0
   155b0:	beq	155c4 <test_typed_table_with_emptystruct@@Base+0x138>
   155b4:	mov	r1, r5
   155b8:	mov	r0, r4
   155bc:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   155c0:	b	154c4 <test_typed_table_with_emptystruct@@Base+0x38>
   155c4:	mov	r3, #1
   155c8:	mov	r2, #0
   155cc:	mov	r1, r2
   155d0:	mov	r0, r4
   155d4:	bl	221cc <flatcc_builder_table_add@@Base>
   155d8:	cmp	r0, #0
   155dc:	beq	15624 <test_typed_table_with_emptystruct@@Base+0x198>
   155e0:	mov	r2, #0
   155e4:	ldr	r1, [pc, #176]	; 1569c <test_typed_table_with_emptystruct@@Base+0x210>
   155e8:	mov	r0, r4
   155ec:	bl	21030 <flatcc_builder_check_required@@Base>
   155f0:	cmp	r0, #0
   155f4:	beq	15608 <test_typed_table_with_emptystruct@@Base+0x17c>
   155f8:	mov	r0, r4
   155fc:	bl	210e0 <flatcc_builder_end_table@@Base>
   15600:	mov	r5, r0
   15604:	b	155b4 <test_typed_table_with_emptystruct@@Base+0x128>
   15608:	ldr	r3, [pc, #144]	; 156a0 <test_typed_table_with_emptystruct@@Base+0x214>
   1560c:	mov	r2, #215	; 0xd7
   15610:	movw	r1, #21196	; 0x52cc
   15614:	movt	r1, #2
   15618:	movw	r0, #22396	; 0x577c
   1561c:	movt	r0, #2
   15620:	bl	12a64 <__assert_fail@plt>
   15624:	mov	r5, r6
   15628:	b	155b4 <test_typed_table_with_emptystruct@@Base+0x128>
   1562c:	movw	r0, #22652	; 0x587c
   15630:	movt	r0, #2
   15634:	bl	129c8 <puts@plt>
   15638:	mvn	r0, #0
   1563c:	b	1558c <test_typed_table_with_emptystruct@@Base+0x100>
   15640:	movw	r0, #22684	; 0x589c
   15644:	movt	r0, #2
   15648:	bl	129c8 <puts@plt>
   1564c:	mvn	r0, #0
   15650:	b	1558c <test_typed_table_with_emptystruct@@Base+0x100>
   15654:	movw	r0, #22712	; 0x58b8
   15658:	movt	r0, #2
   1565c:	bl	129c8 <puts@plt>
   15660:	mvn	r0, #0
   15664:	b	1558c <test_typed_table_with_emptystruct@@Base+0x100>
   15668:	movw	r0, #22752	; 0x58e0
   1566c:	movt	r0, #2
   15670:	bl	129c8 <puts@plt>
   15674:	mvn	r0, #0
   15678:	b	1558c <test_typed_table_with_emptystruct@@Base+0x100>
   1567c:	ldr	r3, [r4]
   15680:	cmn	r4, r3
   15684:	bne	1558c <test_typed_table_with_emptystruct@@Base+0x100>
   15688:	movw	r0, #22792	; 0x5908
   1568c:	movt	r0, #2
   15690:	bl	129c8 <puts@plt>
   15694:	mvn	r0, #0
   15698:	b	1558c <test_typed_table_with_emptystruct@@Base+0x100>
   1569c:	andeq	r4, r2, r0, ror #20
   156a0:	andeq	r4, r2, r4, ror #20

000156a4 <verify_monster@@Base>:
   156a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   156a8:	strd	r6, [sp, #8]
   156ac:	str	r8, [sp, #16]
   156b0:	str	lr, [sp, #20]
   156b4:	sub	sp, sp, #80	; 0x50
   156b8:	mov	r5, r0
   156bc:	movw	r3, #18612	; 0x48b4
   156c0:	movt	r3, #2
   156c4:	add	r2, r3, #468	; 0x1d4
   156c8:	ldrd	r0, [r2]
   156cc:	strd	r0, [sp, #60]	; 0x3c
   156d0:	ldrd	r0, [r2, #8]
   156d4:	strd	r0, [sp, #68]	; 0x44
   156d8:	ldr	r2, [r3, #484]	; 0x1e4
   156dc:	str	r2, [sp, #76]	; 0x4c
   156e0:	add	r1, r3, #488	; 0x1e8
   156e4:	ldrd	r2, [r1]
   156e8:	strd	r2, [sp, #44]	; 0x2c
   156ec:	ldrd	r2, [r1, #8]
   156f0:	strd	r2, [sp, #52]	; 0x34
   156f4:	movw	r3, #20301	; 0x4f4d
   156f8:	movt	r3, #21326	; 0x534e
   156fc:	ldr	r2, [r5, #4]
   15700:	cmp	r2, r3
   15704:	beq	15730 <verify_monster@@Base+0x8c>
   15708:	movw	r0, #22848	; 0x5940
   1570c:	movt	r0, #2
   15710:	bl	129c8 <puts@plt>
   15714:	mvn	r0, #0
   15718:	add	sp, sp, #80	; 0x50
   1571c:	ldrd	r4, [sp]
   15720:	ldrd	r6, [sp, #8]
   15724:	ldr	r8, [sp, #16]
   15728:	add	sp, sp, #20
   1572c:	pop	{pc}		; (ldr pc, [sp], #4)
   15730:	add	r4, sp, #15
   15734:	bic	r4, r4, #15
   15738:	ldr	r8, [r5]
   1573c:	adds	r7, r5, r8
   15740:	beq	15918 <verify_monster@@Base+0x274>
   15744:	ldr	r3, [r5, r8]
   15748:	sub	r3, r7, r3
   1574c:	ldrh	r2, [r3]
   15750:	cmp	r2, #9
   15754:	bls	1592c <verify_monster@@Base+0x288>
   15758:	ldrh	r2, [r3, #8]
   1575c:	cmp	r2, #0
   15760:	beq	1592c <verify_monster@@Base+0x288>
   15764:	ldrsh	r2, [r7, r2]
   15768:	cmp	r2, #80	; 0x50
   1576c:	bne	1592c <verify_monster@@Base+0x288>
   15770:	ldrh	r6, [r3, #4]
   15774:	cmp	r6, #0
   15778:	beq	15940 <verify_monster@@Base+0x29c>
   1577c:	adds	r6, r7, r6
   15780:	beq	15940 <verify_monster@@Base+0x29c>
   15784:	tst	r6, #15
   15788:	bne	15954 <verify_monster@@Base+0x2b0>
   1578c:	vldr	s14, [r6, #8]
   15790:	vldr	s15, [pc, #816]	; 15ac8 <verify_monster@@Base+0x424>
   15794:	vcmp.f32	s14, s15
   15798:	vmrs	APSR_nzcv, fpscr
   1579c:	bne	15964 <verify_monster@@Base+0x2c0>
   157a0:	vldr	s14, [r6]
   157a4:	vldr	s15, [pc, #800]	; 15acc <verify_monster@@Base+0x428>
   157a8:	vcmp.f32	s14, s15
   157ac:	vmrs	APSR_nzcv, fpscr
   157b0:	bne	15978 <verify_monster@@Base+0x2d4>
   157b4:	vldr	s14, [r6, #4]
   157b8:	vldr	s15, [pc, #784]	; 15ad0 <verify_monster@@Base+0x42c>
   157bc:	vcmp.f32	s14, s15
   157c0:	vmrs	APSR_nzcv, fpscr
   157c4:	bne	15978 <verify_monster@@Base+0x2d4>
   157c8:	mov	r3, #0
   157cc:	str	r3, [r4, #12]
   157d0:	str	r3, [r4, #24]
   157d4:	str	r3, [r4, #28]
   157d8:	mov	r3, #1065353216	; 0x3f800000
   157dc:	str	r3, [r4]
   157e0:	mov	r3, #1073741824	; 0x40000000
   157e4:	str	r3, [r4, #4]
   157e8:	movw	r3, #52429	; 0xcccd
   157ec:	movt	r3, #49228	; 0xc04c
   157f0:	str	r3, [r4, #8]
   157f4:	vldr	d7, [r6, #16]
   157f8:	vstr	d7, [r4, #16]
   157fc:	ldrb	r3, [r6, #24]
   15800:	strb	r3, [r4, #24]
   15804:	ldrh	r3, [r6, #26]
   15808:	strh	r3, [r4, #26]
   1580c:	ldrb	r3, [r6, #28]
   15810:	strb	r3, [r4, #28]
   15814:	vcmp.f64	d7, #0.0
   15818:	vmrs	APSR_nzcv, fpscr
   1581c:	bne	1598c <verify_monster@@Base+0x2e8>
   15820:	mov	r2, #4
   15824:	ldr	r1, [pc, #680]	; 15ad4 <verify_monster@@Base+0x430>
   15828:	add	r0, r6, #26
   1582c:	bl	12998 <memcmp@plt>
   15830:	cmp	r0, #0
   15834:	bne	1598c <verify_monster@@Base+0x2e8>
   15838:	mov	r0, r7
   1583c:	bl	12f74 <_start@@Base+0x504>
   15840:	subs	r4, r0, #0
   15844:	beq	159a0 <verify_monster@@Base+0x2fc>
   15848:	movw	r1, #21584	; 0x5450
   1584c:	movt	r1, #2
   15850:	mov	r0, r4
   15854:	bl	12968 <strcmp@plt>
   15858:	cmp	r0, #0
   1585c:	bne	159a0 <verify_monster@@Base+0x2fc>
   15860:	ldr	r3, [r4, #-4]
   15864:	cmp	r3, #9
   15868:	bne	159b4 <verify_monster@@Base+0x310>
   1586c:	ldr	r4, [r5, r8]
   15870:	sub	r4, r7, r4
   15874:	ldrh	r5, [r4]
   15878:	cmp	r5, #17
   1587c:	bls	159c8 <verify_monster@@Base+0x324>
   15880:	ldrh	r3, [r4, #16]
   15884:	cmp	r3, #0
   15888:	beq	159c8 <verify_monster@@Base+0x324>
   1588c:	ldrsb	r3, [r7, r3]
   15890:	cmp	r3, #2
   15894:	bne	159c8 <verify_monster@@Base+0x324>
   15898:	ldrh	r3, [r4, #14]
   1589c:	cmp	r3, #0
   158a0:	beq	159dc <verify_monster@@Base+0x338>
   158a4:	add	r1, r7, r3
   158a8:	ldr	r2, [r7, r3]
   158ac:	add	r2, r2, #4
   158b0:	adds	r3, r1, r2
   158b4:	beq	159dc <verify_monster@@Base+0x338>
   158b8:	ldr	r0, [r3, #-4]
   158bc:	cmp	r0, #10
   158c0:	bne	159dc <verify_monster@@Base+0x338>
   158c4:	ldrb	r2, [r1, r2]
   158c8:	cmp	r2, #0
   158cc:	moveq	r1, #1
   158d0:	bne	159f0 <verify_monster@@Base+0x34c>
   158d4:	ldrb	r2, [r3, #1]!
   158d8:	cmp	r2, r1
   158dc:	bne	159f4 <verify_monster@@Base+0x350>
   158e0:	add	r1, r1, #1
   158e4:	cmp	r1, #10
   158e8:	bne	158d4 <verify_monster@@Base+0x230>
   158ec:	ldrh	r3, [r4, #6]
   158f0:	cmp	r3, #0
   158f4:	beq	15a1c <verify_monster@@Base+0x378>
   158f8:	ldrsh	r3, [r7, r3]
   158fc:	cmp	r3, #150	; 0x96
   15900:	bne	15a08 <verify_monster@@Base+0x364>
   15904:	movw	r0, #23208	; 0x5aa8
   15908:	movt	r0, #2
   1590c:	bl	129c8 <puts@plt>
   15910:	mvn	r0, #0
   15914:	b	15718 <verify_monster@@Base+0x74>
   15918:	movw	r0, #20876	; 0x518c
   1591c:	movt	r0, #2
   15920:	bl	129c8 <puts@plt>
   15924:	mvn	r0, #0
   15928:	b	15718 <verify_monster@@Base+0x74>
   1592c:	movw	r0, #21100	; 0x526c
   15930:	movt	r0, #2
   15934:	bl	129c8 <puts@plt>
   15938:	mvn	r0, #0
   1593c:	b	15718 <verify_monster@@Base+0x74>
   15940:	movw	r0, #22892	; 0x596c
   15944:	movt	r0, #2
   15948:	bl	129c8 <puts@plt>
   1594c:	mvn	r0, #0
   15950:	b	15718 <verify_monster@@Base+0x74>
   15954:	movw	r0, #22912	; 0x5980
   15958:	movt	r0, #2
   1595c:	bl	129c8 <puts@plt>
   15960:	b	1578c <verify_monster@@Base+0xe8>
   15964:	movw	r0, #22952	; 0x59a8
   15968:	movt	r0, #2
   1596c:	bl	129c8 <puts@plt>
   15970:	mvn	r0, #0
   15974:	b	15718 <verify_monster@@Base+0x74>
   15978:	movw	r0, #22988	; 0x59cc
   1597c:	movt	r0, #2
   15980:	bl	129c8 <puts@plt>
   15984:	mvn	r0, #0
   15988:	b	15718 <verify_monster@@Base+0x74>
   1598c:	movw	r0, #23012	; 0x59e4
   15990:	movt	r0, #2
   15994:	bl	129c8 <puts@plt>
   15998:	mvn	r0, #0
   1599c:	b	15718 <verify_monster@@Base+0x74>
   159a0:	movw	r0, #23048	; 0x5a08
   159a4:	movt	r0, #2
   159a8:	bl	129c8 <puts@plt>
   159ac:	mvn	r0, #0
   159b0:	b	15718 <verify_monster@@Base+0x74>
   159b4:	movw	r0, #23068	; 0x5a1c
   159b8:	movt	r0, #2
   159bc:	bl	129c8 <puts@plt>
   159c0:	mvn	r0, #0
   159c4:	b	15718 <verify_monster@@Base+0x74>
   159c8:	movw	r0, #23096	; 0x5a38
   159cc:	movt	r0, #2
   159d0:	bl	129c8 <puts@plt>
   159d4:	mvn	r0, #0
   159d8:	b	15718 <verify_monster@@Base+0x74>
   159dc:	movw	r0, #23128	; 0x5a58
   159e0:	movt	r0, #2
   159e4:	bl	129c8 <puts@plt>
   159e8:	mvn	r0, #0
   159ec:	b	15718 <verify_monster@@Base+0x74>
   159f0:	mov	r1, #0
   159f4:	movw	r0, #23156	; 0x5a74
   159f8:	movt	r0, #2
   159fc:	bl	12974 <printf@plt>
   15a00:	mvn	r0, #0
   15a04:	b	15718 <verify_monster@@Base+0x74>
   15a08:	movw	r0, #23188	; 0x5a94
   15a0c:	movt	r0, #2
   15a10:	bl	129c8 <puts@plt>
   15a14:	mvn	r0, #0
   15a18:	b	15718 <verify_monster@@Base+0x74>
   15a1c:	cmp	r3, #0
   15a20:	bne	15904 <verify_monster@@Base+0x260>
   15a24:	ldrh	r3, [r4, #8]
   15a28:	cmp	r3, #0
   15a2c:	beq	15a78 <verify_monster@@Base+0x3d4>
   15a30:	ldrh	r3, [r4, #4]
   15a34:	cmp	r3, #0
   15a38:	beq	15a8c <verify_monster@@Base+0x3e8>
   15a3c:	mov	r0, r7
   15a40:	bl	12d18 <_start@@Base+0x2a8>
   15a44:	cmp	r0, #0
   15a48:	beq	15a64 <verify_monster@@Base+0x3c0>
   15a4c:	ldr	r3, [r0, #-4]
   15a50:	cmp	r3, #5
   15a54:	addeq	r3, sp, #60	; 0x3c
   15a58:	moveq	r1, #0
   15a5c:	moveq	r8, r1
   15a60:	beq	16168 <verify_monster@@Base+0xac4>
   15a64:	movw	r0, #23260	; 0x5adc
   15a68:	movt	r0, #2
   15a6c:	bl	129c8 <puts@plt>
   15a70:	mvn	r0, #0
   15a74:	b	15718 <verify_monster@@Base+0x74>
   15a78:	movw	r0, #23228	; 0x5abc
   15a7c:	movt	r0, #2
   15a80:	bl	129c8 <puts@plt>
   15a84:	mvn	r0, #0
   15a88:	b	15718 <verify_monster@@Base+0x74>
   15a8c:	movw	r0, #21136	; 0x5290
   15a90:	movt	r0, #2
   15a94:	bl	129c8 <puts@plt>
   15a98:	mvn	r0, #0
   15a9c:	b	15718 <verify_monster@@Base+0x74>
   15aa0:	movw	r0, #23300	; 0x5b04
   15aa4:	movt	r0, #2
   15aa8:	bl	12974 <printf@plt>
   15aac:	mvn	r0, #0
   15ab0:	b	15718 <verify_monster@@Base+0x74>
   15ab4:	movw	r0, #23300	; 0x5b04
   15ab8:	movt	r0, #2
   15abc:	bl	12974 <printf@plt>
   15ac0:	mvn	r0, #0
   15ac4:	b	15718 <verify_monster@@Base+0x74>
   15ac8:	subgt	ip, ip, sp, asr #25
   15acc:	svccc	0x00800000
   15ad0:	andmi	r0, r0, r0
   15ad4:	andeq	r4, r2, ip, lsr #21
   15ad8:	andeq	r4, r2, r0, lsr #22
   15adc:	andeq	r4, r2, r0, lsl fp
   15ae0:	andeq	r4, r2, r4, lsr #22
   15ae4:	mov	r0, r7
   15ae8:	bl	12ddc <_start@@Base+0x36c>
   15aec:	subs	r6, r0, #0
   15af0:	beq	15d74 <verify_monster@@Base+0x6d0>
   15af4:	ldr	r3, [r6, #-4]
   15af8:	cmp	r3, #8
   15afc:	bne	15d74 <verify_monster@@Base+0x6d0>
   15b00:	mov	r1, #5
   15b04:	mov	r0, r6
   15b08:	bl	12e50 <_start@@Base+0x3e0>
   15b0c:	subs	r8, r0, #0
   15b10:	beq	15d88 <verify_monster@@Base+0x6e4>
   15b14:	mov	r0, r8
   15b18:	bl	12f74 <_start@@Base+0x504>
   15b1c:	movw	r1, #23480	; 0x5bb8
   15b20:	movt	r1, #2
   15b24:	bl	12968 <strcmp@plt>
   15b28:	cmp	r0, #0
   15b2c:	bne	15da4 <verify_monster@@Base+0x700>
   15b30:	mov	r1, #1
   15b34:	mov	r0, r6
   15b38:	bl	12e50 <_start@@Base+0x3e0>
   15b3c:	cmp	r8, r0
   15b40:	bne	15db8 <verify_monster@@Base+0x714>
   15b44:	bl	12f74 <_start@@Base+0x504>
   15b48:	mov	r8, r0
   15b4c:	movw	r1, #23480	; 0x5bb8
   15b50:	movt	r1, #2
   15b54:	bl	12968 <strcmp@plt>
   15b58:	cmp	r0, #0
   15b5c:	bne	15dcc <verify_monster@@Base+0x728>
   15b60:	mov	r1, #2
   15b64:	mov	r0, r6
   15b68:	bl	12e50 <_start@@Base+0x3e0>
   15b6c:	bl	12f74 <_start@@Base+0x504>
   15b70:	mov	r8, r0
   15b74:	movw	r1, #23580	; 0x5c1c
   15b78:	movt	r1, #2
   15b7c:	bl	12968 <strcmp@plt>
   15b80:	cmp	r0, #0
   15b84:	bne	15de4 <verify_monster@@Base+0x740>
   15b88:	mov	r1, #0
   15b8c:	mov	r0, r6
   15b90:	bl	12e50 <_start@@Base+0x3e0>
   15b94:	bl	12f74 <_start@@Base+0x504>
   15b98:	mov	r8, r0
   15b9c:	movw	r1, #23624	; 0x5c48
   15ba0:	movt	r1, #2
   15ba4:	bl	12968 <strcmp@plt>
   15ba8:	cmp	r0, #0
   15bac:	bne	15dfc <verify_monster@@Base+0x758>
   15bb0:	mov	r1, #3
   15bb4:	mov	r0, r6
   15bb8:	bl	12e50 <_start@@Base+0x3e0>
   15bbc:	bl	12f74 <_start@@Base+0x504>
   15bc0:	mov	r8, r0
   15bc4:	movw	r1, #23480	; 0x5bb8
   15bc8:	movt	r1, #2
   15bcc:	bl	12968 <strcmp@plt>
   15bd0:	cmp	r0, #0
   15bd4:	bne	15e14 <verify_monster@@Base+0x770>
   15bd8:	mov	r1, #4
   15bdc:	mov	r0, r6
   15be0:	bl	12e50 <_start@@Base+0x3e0>
   15be4:	bl	12f74 <_start@@Base+0x504>
   15be8:	mov	r8, r0
   15bec:	movw	r1, #23580	; 0x5c1c
   15bf0:	movt	r1, #2
   15bf4:	bl	12968 <strcmp@plt>
   15bf8:	cmp	r0, #0
   15bfc:	bne	15e2c <verify_monster@@Base+0x788>
   15c00:	mov	r1, #6
   15c04:	mov	r0, r6
   15c08:	bl	12e50 <_start@@Base+0x3e0>
   15c0c:	bl	12f74 <_start@@Base+0x504>
   15c10:	mov	r8, r0
   15c14:	movw	r1, #23624	; 0x5c48
   15c18:	movt	r1, #2
   15c1c:	bl	12968 <strcmp@plt>
   15c20:	cmp	r0, #0
   15c24:	bne	15e44 <verify_monster@@Base+0x7a0>
   15c28:	mov	r1, #7
   15c2c:	mov	r0, r6
   15c30:	bl	12e50 <_start@@Base+0x3e0>
   15c34:	bl	12f74 <_start@@Base+0x504>
   15c38:	mov	r6, r0
   15c3c:	movw	r1, #23580	; 0x5c1c
   15c40:	movt	r1, #2
   15c44:	bl	12968 <strcmp@plt>
   15c48:	cmp	r0, #0
   15c4c:	bne	15e5c <verify_monster@@Base+0x7b8>
   15c50:	cmp	r5, #25
   15c54:	bls	15e74 <verify_monster@@Base+0x7d0>
   15c58:	ldrh	r3, [r4, #24]
   15c5c:	cmp	r3, #0
   15c60:	beq	15e74 <verify_monster@@Base+0x7d0>
   15c64:	add	r6, r7, r3
   15c68:	ldr	r3, [r7, r3]
   15c6c:	add	r3, r3, #4
   15c70:	adds	r6, r6, r3
   15c74:	beq	15e74 <verify_monster@@Base+0x7d0>
   15c78:	ldr	r3, [r6, #-4]
   15c7c:	cmp	r3, #3
   15c80:	bne	15e74 <verify_monster@@Base+0x7d0>
   15c84:	mov	r1, #0
   15c88:	mov	r0, r6
   15c8c:	bl	12d8c <_start@@Base+0x31c>
   15c90:	movw	r1, #23872	; 0x5d40
   15c94:	movt	r1, #2
   15c98:	bl	12968 <strcmp@plt>
   15c9c:	cmp	r0, #0
   15ca0:	bne	15e88 <verify_monster@@Base+0x7e4>
   15ca4:	mov	r1, #1
   15ca8:	mov	r0, r6
   15cac:	bl	12d8c <_start@@Base+0x31c>
   15cb0:	cmp	r0, #0
   15cb4:	beq	15e9c <verify_monster@@Base+0x7f8>
   15cb8:	ldr	r3, [r0, #-4]
   15cbc:	cmp	r3, #2
   15cc0:	bne	15e9c <verify_monster@@Base+0x7f8>
   15cc4:	mov	r2, #2
   15cc8:	ldr	r1, [pc, #-504]	; 15ad8 <verify_monster@@Base+0x434>
   15ccc:	bl	12998 <memcmp@plt>
   15cd0:	cmp	r0, #0
   15cd4:	bne	15eb0 <verify_monster@@Base+0x80c>
   15cd8:	mov	r1, #2
   15cdc:	mov	r0, r6
   15ce0:	bl	12d8c <_start@@Base+0x31c>
   15ce4:	movw	r1, #23964	; 0x5d9c
   15ce8:	movt	r1, #2
   15cec:	bl	12968 <strcmp@plt>
   15cf0:	cmp	r0, #0
   15cf4:	bne	15ec4 <verify_monster@@Base+0x820>
   15cf8:	cmp	r5, #53	; 0x35
   15cfc:	bls	15ed8 <verify_monster@@Base+0x834>
   15d00:	ldrh	r3, [r4, #52]	; 0x34
   15d04:	cmp	r3, #0
   15d08:	beq	15ed8 <verify_monster@@Base+0x834>
   15d0c:	add	r1, r7, r3
   15d10:	ldr	r2, [r7, r3]
   15d14:	add	r2, r2, #4
   15d18:	adds	r3, r1, r2
   15d1c:	beq	15eec <verify_monster@@Base+0x848>
   15d20:	ldr	r0, [r3, #-4]
   15d24:	cmp	r0, #4
   15d28:	bne	15eec <verify_monster@@Base+0x848>
   15d2c:	ldrb	r1, [r1, r2]
   15d30:	ldr	r2, [sp, #44]	; 0x2c
   15d34:	cmp	r1, r2
   15d38:	addeq	r2, sp, #48	; 0x30
   15d3c:	moveq	r1, #0
   15d40:	bne	15f00 <verify_monster@@Base+0x85c>
   15d44:	add	r1, r1, #1
   15d48:	cmp	r1, #4
   15d4c:	beq	15f08 <verify_monster@@Base+0x864>
   15d50:	ldr	r0, [r2], #4
   15d54:	ldrb	ip, [r3, #1]!
   15d58:	cmp	ip, r0
   15d5c:	beq	15d44 <verify_monster@@Base+0x6a0>
   15d60:	movw	r0, #24056	; 0x5df8
   15d64:	movt	r0, #2
   15d68:	bl	12974 <printf@plt>
   15d6c:	mvn	r0, #0
   15d70:	b	15718 <verify_monster@@Base+0x74>
   15d74:	movw	r0, #23340	; 0x5b2c
   15d78:	movt	r0, #2
   15d7c:	bl	129c8 <puts@plt>
   15d80:	mvn	r0, #0
   15d84:	b	15718 <verify_monster@@Base+0x74>
   15d88:	ldr	r3, [pc, #-692]	; 15adc <verify_monster@@Base+0x438>
   15d8c:	movw	r2, #662	; 0x296
   15d90:	movw	r1, #23376	; 0x5b50
   15d94:	movt	r1, #2
   15d98:	movw	r0, #23460	; 0x5ba4
   15d9c:	movt	r0, #2
   15da0:	bl	12a64 <__assert_fail@plt>
   15da4:	movw	r0, #23464	; 0x5ba8
   15da8:	movt	r0, #2
   15dac:	bl	12974 <printf@plt>
   15db0:	mvn	r0, #0
   15db4:	b	15718 <verify_monster@@Base+0x74>
   15db8:	movw	r0, #23488	; 0x5bc0
   15dbc:	movt	r0, #2
   15dc0:	bl	129c8 <puts@plt>
   15dc4:	mvn	r0, #0
   15dc8:	b	15718 <verify_monster@@Base+0x74>
   15dcc:	mov	r1, r8
   15dd0:	movw	r0, #23544	; 0x5bf8
   15dd4:	movt	r0, #2
   15dd8:	bl	12974 <printf@plt>
   15ddc:	mvn	r0, #0
   15de0:	b	15718 <verify_monster@@Base+0x74>
   15de4:	mov	r1, r8
   15de8:	movw	r0, #23588	; 0x5c24
   15dec:	movt	r0, #2
   15df0:	bl	12974 <printf@plt>
   15df4:	mvn	r0, #0
   15df8:	b	15718 <verify_monster@@Base+0x74>
   15dfc:	mov	r1, r8
   15e00:	movw	r0, #23636	; 0x5c54
   15e04:	movt	r0, #2
   15e08:	bl	12974 <printf@plt>
   15e0c:	mvn	r0, #0
   15e10:	b	15718 <verify_monster@@Base+0x74>
   15e14:	mov	r1, r8
   15e18:	movw	r0, #23676	; 0x5c7c
   15e1c:	movt	r0, #2
   15e20:	bl	12974 <printf@plt>
   15e24:	mvn	r0, #0
   15e28:	b	15718 <verify_monster@@Base+0x74>
   15e2c:	mov	r1, r8
   15e30:	movw	r0, #23712	; 0x5ca0
   15e34:	movt	r0, #2
   15e38:	bl	12974 <printf@plt>
   15e3c:	mvn	r0, #0
   15e40:	b	15718 <verify_monster@@Base+0x74>
   15e44:	mov	r1, r8
   15e48:	movw	r0, #23748	; 0x5cc4
   15e4c:	movt	r0, #2
   15e50:	bl	12974 <printf@plt>
   15e54:	mvn	r0, #0
   15e58:	b	15718 <verify_monster@@Base+0x74>
   15e5c:	mov	r1, r6
   15e60:	movw	r0, #23788	; 0x5cec
   15e64:	movt	r0, #2
   15e68:	bl	12974 <printf@plt>
   15e6c:	mvn	r0, #0
   15e70:	b	15718 <verify_monster@@Base+0x74>
   15e74:	movw	r0, #23828	; 0x5d14
   15e78:	movt	r0, #2
   15e7c:	bl	129c8 <puts@plt>
   15e80:	mvn	r0, #0
   15e84:	b	15718 <verify_monster@@Base+0x74>
   15e88:	movw	r0, #23880	; 0x5d48
   15e8c:	movt	r0, #2
   15e90:	bl	129c8 <puts@plt>
   15e94:	mvn	r0, #0
   15e98:	b	15718 <verify_monster@@Base+0x74>
   15e9c:	movw	r0, #23904	; 0x5d60
   15ea0:	movt	r0, #2
   15ea4:	bl	12974 <printf@plt>
   15ea8:	mvn	r0, #0
   15eac:	b	15718 <verify_monster@@Base+0x74>
   15eb0:	movw	r0, #23932	; 0x5d7c
   15eb4:	movt	r0, #2
   15eb8:	bl	129c8 <puts@plt>
   15ebc:	mvn	r0, #0
   15ec0:	b	15718 <verify_monster@@Base+0x74>
   15ec4:	movw	r0, #23972	; 0x5da4
   15ec8:	movt	r0, #2
   15ecc:	bl	129c8 <puts@plt>
   15ed0:	mvn	r0, #0
   15ed4:	b	15718 <verify_monster@@Base+0x74>
   15ed8:	movw	r0, #23996	; 0x5dbc
   15edc:	movt	r0, #2
   15ee0:	bl	129c8 <puts@plt>
   15ee4:	mvn	r0, #0
   15ee8:	b	15718 <verify_monster@@Base+0x74>
   15eec:	movw	r0, #24024	; 0x5dd8
   15ef0:	movt	r0, #2
   15ef4:	bl	129c8 <puts@plt>
   15ef8:	mvn	r0, #0
   15efc:	b	15718 <verify_monster@@Base+0x74>
   15f00:	mov	r1, #0
   15f04:	b	15d60 <verify_monster@@Base+0x6bc>
   15f08:	mov	r0, r7
   15f0c:	bl	12e9c <_start@@Base+0x42c>
   15f10:	cmp	r0, #1
   15f14:	bne	1606c <verify_monster@@Base+0x9c8>
   15f18:	mov	r0, r7
   15f1c:	bl	12f04 <_start@@Base+0x494>
   15f20:	mov	r6, r0
   15f24:	bl	12f74 <_start@@Base+0x504>
   15f28:	movw	r1, #23480	; 0x5bb8
   15f2c:	movt	r1, #2
   15f30:	bl	12968 <strcmp@plt>
   15f34:	cmp	r0, #0
   15f38:	bne	16080 <verify_monster@@Base+0x9dc>
   15f3c:	ldrh	r3, [r4, #28]
   15f40:	cmp	r3, #0
   15f44:	addne	r5, r7, r3
   15f48:	ldrne	r3, [r7, r3]
   15f4c:	addne	r5, r5, r3
   15f50:	moveq	r5, #0
   15f54:	mov	r0, r5
   15f58:	bl	12f74 <_start@@Base+0x504>
   15f5c:	movw	r1, #24164	; 0x5e64
   15f60:	movt	r1, #2
   15f64:	bl	12968 <strcmp@plt>
   15f68:	cmp	r0, #0
   15f6c:	bne	16094 <verify_monster@@Base+0x9f0>
   15f70:	mov	r0, r5
   15f74:	bl	12e9c <_start@@Base+0x42c>
   15f78:	cmp	r0, #0
   15f7c:	bne	160a8 <verify_monster@@Base+0xa04>
   15f80:	mov	r0, r7
   15f84:	bl	12f04 <_start@@Base+0x494>
   15f88:	cmp	r6, r0
   15f8c:	bne	160bc <verify_monster@@Base+0xa18>
   15f90:	mov	r0, r5
   15f94:	bl	12ddc <_start@@Base+0x36c>
   15f98:	cmp	r0, #0
   15f9c:	ldrne	r1, [r0, #-4]
   15fa0:	moveq	r1, #0
   15fa4:	sub	r1, r1, #1
   15fa8:	bl	12e50 <_start@@Base+0x3e0>
   15fac:	mov	r5, r0
   15fb0:	bl	12e9c <_start@@Base+0x42c>
   15fb4:	cmp	r0, #1
   15fb8:	bne	160d0 <verify_monster@@Base+0xa2c>
   15fbc:	mov	r0, r5
   15fc0:	bl	12f04 <_start@@Base+0x494>
   15fc4:	bl	12f74 <_start@@Base+0x504>
   15fc8:	movw	r1, #23480	; 0x5bb8
   15fcc:	movt	r1, #2
   15fd0:	bl	12968 <strcmp@plt>
   15fd4:	cmp	r0, #0
   15fd8:	bne	160e4 <verify_monster@@Base+0xa40>
   15fdc:	ldrh	r3, [r4, #34]	; 0x22
   15fe0:	cmp	r3, #0
   15fe4:	beq	160f8 <verify_monster@@Base+0xa54>
   15fe8:	ldrb	r3, [r7, r3]
   15fec:	cmp	r3, #0
   15ff0:	bne	160f8 <verify_monster@@Base+0xa54>
   15ff4:	ldrh	r3, [r4, #32]
   15ff8:	cmp	r3, #0
   15ffc:	beq	1610c <verify_monster@@Base+0xa68>
   16000:	add	r1, r7, r3
   16004:	ldr	r2, [r7, r3]
   16008:	adds	r3, r1, r2
   1600c:	beq	16120 <verify_monster@@Base+0xa7c>
   16010:	ldr	r2, [r1, r2]
   16014:	sub	r3, r3, r2
   16018:	ldrh	r2, [r3]
   1601c:	cmp	r2, #5
   16020:	bls	16030 <verify_monster@@Base+0x98c>
   16024:	ldrh	r1, [r3, #4]
   16028:	cmp	r1, #0
   1602c:	bne	16058 <verify_monster@@Base+0x9b4>
   16030:	cmp	r2, #7
   16034:	bls	16044 <verify_monster@@Base+0x9a0>
   16038:	ldrh	r1, [r3, #6]
   1603c:	cmp	r1, #0
   16040:	bne	16058 <verify_monster@@Base+0x9b4>
   16044:	cmp	r2, #9
   16048:	bls	15718 <verify_monster@@Base+0x74>
   1604c:	ldrh	r3, [r3, #8]
   16050:	cmp	r3, #0
   16054:	beq	15718 <verify_monster@@Base+0x74>
   16058:	movw	r0, #24456	; 0x5f88
   1605c:	movt	r0, #2
   16060:	bl	129c8 <puts@plt>
   16064:	mvn	r0, #0
   16068:	b	15718 <verify_monster@@Base+0x74>
   1606c:	movw	r0, #24088	; 0x5e18
   16070:	movt	r0, #2
   16074:	bl	129c8 <puts@plt>
   16078:	mvn	r0, #0
   1607c:	b	15718 <verify_monster@@Base+0x74>
   16080:	movw	r0, #24132	; 0x5e44
   16084:	movt	r0, #2
   16088:	bl	129c8 <puts@plt>
   1608c:	mvn	r0, #0
   16090:	b	15718 <verify_monster@@Base+0x74>
   16094:	movw	r0, #24176	; 0x5e70
   16098:	movt	r0, #2
   1609c:	bl	129c8 <puts@plt>
   160a0:	mvn	r0, #0
   160a4:	b	15718 <verify_monster@@Base+0x74>
   160a8:	movw	r0, #24208	; 0x5e90
   160ac:	movt	r0, #2
   160b0:	bl	129c8 <puts@plt>
   160b4:	mvn	r0, #0
   160b8:	b	15718 <verify_monster@@Base+0x74>
   160bc:	movw	r0, #24244	; 0x5eb4
   160c0:	movt	r0, #2
   160c4:	bl	129c8 <puts@plt>
   160c8:	mvn	r0, #0
   160cc:	b	15718 <verify_monster@@Base+0x74>
   160d0:	movw	r0, #24276	; 0x5ed4
   160d4:	movt	r0, #2
   160d8:	bl	129c8 <puts@plt>
   160dc:	mvn	r0, #0
   160e0:	b	15718 <verify_monster@@Base+0x74>
   160e4:	movw	r0, #24344	; 0x5f18
   160e8:	movt	r0, #2
   160ec:	bl	129c8 <puts@plt>
   160f0:	mvn	r0, #0
   160f4:	b	15718 <verify_monster@@Base+0x74>
   160f8:	movw	r0, #24404	; 0x5f54
   160fc:	movt	r0, #2
   16100:	bl	129c8 <puts@plt>
   16104:	mvn	r0, #0
   16108:	b	15718 <verify_monster@@Base+0x74>
   1610c:	movw	r0, #24424	; 0x5f68
   16110:	movt	r0, #2
   16114:	bl	129c8 <puts@plt>
   16118:	mvn	r0, #0
   1611c:	b	15718 <verify_monster@@Base+0x74>
   16120:	ldr	r3, [pc, #-1608]	; 15ae0 <verify_monster@@Base+0x43c>
   16124:	movw	r2, #607	; 0x25f
   16128:	movw	r1, #20464	; 0x4ff0
   1612c:	movt	r1, #2
   16130:	movw	r0, #20564	; 0x5054
   16134:	movt	r0, #2
   16138:	bl	12a64 <__assert_fail@plt>
   1613c:	cmp	r2, #0
   16140:	bne	15aa0 <verify_monster@@Base+0x3fc>
   16144:	ldrsb	ip, [ip, #2]
   16148:	mov	r2, r8
   1614c:	cmp	r2, ip
   16150:	bne	15ab4 <verify_monster@@Base+0x410>
   16154:	add	r1, r1, #1
   16158:	add	r3, r3, #4
   1615c:	add	r0, r0, #4
   16160:	cmp	r1, #5
   16164:	beq	15ae4 <verify_monster@@Base+0x440>
   16168:	mov	ip, r3
   1616c:	ldrsh	r2, [r3]
   16170:	cmp	r0, #0
   16174:	beq	1613c <verify_monster@@Base+0xa98>
   16178:	ldrsh	r6, [r0]
   1617c:	cmp	r6, r2
   16180:	bne	15aa0 <verify_monster@@Base+0x3fc>
   16184:	ldrsb	ip, [r3, #2]
   16188:	ldrsb	r2, [r0, #2]
   1618c:	b	1614c <verify_monster@@Base+0xaa8>

00016190 <gen_monster@@Base>:
   16190:	strd	r4, [sp, #-20]!	; 0xffffffec
   16194:	strd	r6, [sp, #8]
   16198:	str	lr, [sp, #16]
   1619c:	sub	sp, sp, #52	; 0x34
   161a0:	mov	r4, r0
   161a4:	mov	r5, r1
   161a8:	ldr	r3, [pc, #2500]	; 16b74 <gen_monster@@Base+0x9e4>
   161ac:	ldrd	r6, [r3]
   161b0:	strd	r6, [sp, #36]	; 0x24
   161b4:	ldrh	r3, [r3, #8]
   161b8:	strh	r3, [sp, #44]	; 0x2c
   161bc:	mov	r3, #0
   161c0:	strb	r3, [sp, #8]
   161c4:	mov	r2, #1
   161c8:	strb	r2, [sp, #9]
   161cc:	strb	r2, [sp, #10]
   161d0:	strb	r3, [sp, #11]
   161d4:	bl	1ee18 <flatcc_builder_reset@@Base>
   161d8:	cmp	r5, #0
   161dc:	beq	16210 <gen_monster@@Base+0x80>
   161e0:	mov	r3, #2
   161e4:	mov	r2, #0
   161e8:	movw	r1, #20800	; 0x5140
   161ec:	movt	r1, #2
   161f0:	mov	r0, r4
   161f4:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   161f8:	cmp	r0, #0
   161fc:	bne	16218 <gen_monster@@Base+0x88>
   16200:	mov	r1, #36	; 0x24
   16204:	mov	r0, r4
   16208:	bl	20608 <flatcc_builder_start_table@@Base>
   1620c:	b	16218 <gen_monster@@Base+0x88>
   16210:	mov	r0, r4
   16214:	bl	13064 <_start@@Base+0x5f4>
   16218:	mov	r3, #2
   1621c:	mov	r2, r3
   16220:	mov	r1, r3
   16224:	mov	r0, r4
   16228:	bl	221cc <flatcc_builder_table_add@@Base>
   1622c:	cmp	r0, #0
   16230:	movne	r3, #80	; 0x50
   16234:	strhne	r3, [r0]
   16238:	mov	r3, #16
   1623c:	mov	r2, #32
   16240:	mov	r1, #0
   16244:	mov	r0, r4
   16248:	bl	221cc <flatcc_builder_table_add@@Base>
   1624c:	mov	r3, #1065353216	; 0x3f800000
   16250:	str	r3, [r0]
   16254:	mov	r3, #1073741824	; 0x40000000
   16258:	str	r3, [r0, #4]
   1625c:	movw	r3, #52429	; 0xcccd
   16260:	movt	r3, #49228	; 0xc04c
   16264:	str	r3, [r0, #8]
   16268:	movw	r1, #21584	; 0x5450
   1626c:	movt	r1, #2
   16270:	mov	r0, r4
   16274:	bl	134e4 <_start@@Base+0xa74>
   16278:	mov	r3, #1
   1627c:	mov	r2, r3
   16280:	mov	r1, #6
   16284:	mov	r0, r4
   16288:	bl	221cc <flatcc_builder_table_add@@Base>
   1628c:	cmp	r0, #0
   16290:	movne	r3, #2
   16294:	strbne	r3, [r0]
   16298:	mvn	r3, #0
   1629c:	str	r3, [sp, #4]
   162a0:	mov	r3, #1
   162a4:	str	r3, [sp]
   162a8:	mov	r2, #10
   162ac:	add	r1, sp, #36	; 0x24
   162b0:	mov	r0, r4
   162b4:	bl	212a4 <flatcc_builder_create_vector@@Base>
   162b8:	subs	r5, r0, #0
   162bc:	beq	162d4 <gen_monster@@Base+0x144>
   162c0:	mov	r1, #5
   162c4:	mov	r0, r4
   162c8:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   162cc:	cmp	r0, #0
   162d0:	strne	r5, [r0]
   162d4:	mvn	r3, #-1073741824	; 0xc0000000
   162d8:	mov	r2, #2
   162dc:	mov	r1, #4
   162e0:	mov	r0, r4
   162e4:	bl	20310 <flatcc_builder_start_vector@@Base>
   162e8:	mov	r1, #1
   162ec:	mov	r0, r4
   162f0:	bl	1fa04 <flatcc_builder_extend_vector@@Base>
   162f4:	mov	r3, #16
   162f8:	strh	r3, [r0]
   162fc:	mov	r3, #32
   16300:	strb	r3, [r0, #2]
   16304:	mov	r1, #2
   16308:	mov	r0, r4
   1630c:	bl	1fa04 <flatcc_builder_extend_vector@@Base>
   16310:	mov	r3, #48	; 0x30
   16314:	strh	r3, [r0]
   16318:	mov	r3, #64	; 0x40
   1631c:	strb	r3, [r0, #2]
   16320:	mov	r3, #80	; 0x50
   16324:	strh	r3, [r0, #4]
   16328:	mov	r3, #96	; 0x60
   1632c:	strb	r3, [r0, #6]
   16330:	mov	r1, #1
   16334:	mov	r0, r4
   16338:	bl	1fa04 <flatcc_builder_extend_vector@@Base>
   1633c:	cmp	r0, #0
   16340:	beq	16354 <gen_monster@@Base+0x1c4>
   16344:	mov	r3, #112	; 0x70
   16348:	strh	r3, [r0]
   1634c:	mvn	r3, #127	; 0x7f
   16350:	strb	r3, [r0, #2]
   16354:	mov	r3, #400	; 0x190
   16358:	strh	r3, [sp, #32]
   1635c:	mvn	r3, #110	; 0x6e
   16360:	strb	r3, [sp, #34]	; 0x22
   16364:	mov	r1, #1
   16368:	mov	r0, r4
   1636c:	bl	1fa04 <flatcc_builder_extend_vector@@Base>
   16370:	cmp	r0, #0
   16374:	ldrne	r3, [sp, #32]
   16378:	strne	r3, [r0]
   1637c:	mov	r1, #1
   16380:	mov	r0, r4
   16384:	bl	1fa04 <flatcc_builder_extend_vector@@Base>
   16388:	cmp	r0, #0
   1638c:	ldrne	r3, [sp, #32]
   16390:	strne	r3, [r0]
   16394:	mov	r1, #1
   16398:	mov	r0, r4
   1639c:	bl	1fa04 <flatcc_builder_extend_vector@@Base>
   163a0:	cmp	r0, #0
   163a4:	ldrne	r3, [sp, #32]
   163a8:	strne	r3, [r0]
   163ac:	mov	r0, r4
   163b0:	bl	21510 <flatcc_builder_vector_count@@Base>
   163b4:	cmp	r0, #7
   163b8:	bne	169d4 <gen_monster@@Base+0x844>
   163bc:	mov	r1, #2
   163c0:	mov	r0, r4
   163c4:	bl	20138 <flatcc_builder_truncate_vector@@Base>
   163c8:	mov	r0, r4
   163cc:	bl	21510 <flatcc_builder_vector_count@@Base>
   163d0:	cmp	r0, #5
   163d4:	bne	169f0 <gen_monster@@Base+0x860>
   163d8:	mov	r0, r4
   163dc:	bl	2151c <flatcc_builder_vector_edit@@Base>
   163e0:	ldrh	r3, [r0, #16]
   163e4:	add	r3, r3, #1
   163e8:	strh	r3, [r0, #16]
   163ec:	mov	r0, r4
   163f0:	bl	21414 <flatcc_builder_end_vector@@Base>
   163f4:	subs	r5, r0, #0
   163f8:	beq	16410 <gen_monster@@Base+0x280>
   163fc:	mov	r1, #9
   16400:	mov	r0, r4
   16404:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   16408:	cmp	r0, #0
   1640c:	strne	r5, [r0]
   16410:	mov	r1, #36	; 0x24
   16414:	mov	r0, r4
   16418:	bl	20608 <flatcc_builder_start_table@@Base>
   1641c:	mov	r2, #7
   16420:	movw	r1, #23480	; 0x5bb8
   16424:	movt	r1, #2
   16428:	mov	r0, r4
   1642c:	bl	21f04 <flatcc_builder_create_string@@Base>
   16430:	subs	r5, r0, #0
   16434:	beq	1644c <gen_monster@@Base+0x2bc>
   16438:	mov	r1, #3
   1643c:	mov	r0, r4
   16440:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   16444:	cmp	r0, #0
   16448:	strne	r5, [r0]
   1644c:	mov	r2, #1
   16450:	ldr	r1, [pc, #1824]	; 16b78 <gen_monster@@Base+0x9e8>
   16454:	mov	r0, r4
   16458:	bl	21030 <flatcc_builder_check_required@@Base>
   1645c:	cmp	r0, #0
   16460:	beq	16a0c <gen_monster@@Base+0x87c>
   16464:	mov	r0, r4
   16468:	bl	210e0 <flatcc_builder_end_table@@Base>
   1646c:	mov	r5, r0
   16470:	mov	r0, r4
   16474:	bl	203b0 <flatcc_builder_start_offset_vector@@Base>
   16478:	mov	r1, #2
   1647c:	mov	r0, r4
   16480:	bl	1fcb4 <flatcc_builder_extend_offset_vector@@Base>
   16484:	str	r5, [r0]
   16488:	str	r5, [r0, #4]
   1648c:	mov	r1, #36	; 0x24
   16490:	mov	r0, r4
   16494:	bl	20608 <flatcc_builder_start_table@@Base>
   16498:	mov	r2, #30
   1649c:	movw	r1, #23580	; 0x5c1c
   164a0:	movt	r1, #2
   164a4:	mov	r0, r4
   164a8:	bl	2205c <flatcc_builder_create_string_strn@@Base>
   164ac:	subs	r6, r0, #0
   164b0:	beq	164c8 <gen_monster@@Base+0x338>
   164b4:	mov	r1, #3
   164b8:	mov	r0, r4
   164bc:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   164c0:	cmp	r0, #0
   164c4:	strne	r6, [r0]
   164c8:	mov	r2, #1
   164cc:	ldr	r1, [pc, #1700]	; 16b78 <gen_monster@@Base+0x9e8>
   164d0:	mov	r0, r4
   164d4:	bl	21030 <flatcc_builder_check_required@@Base>
   164d8:	cmp	r0, #0
   164dc:	beq	16a28 <gen_monster@@Base+0x898>
   164e0:	mov	r0, r4
   164e4:	bl	210e0 <flatcc_builder_end_table@@Base>
   164e8:	subs	r1, r0, #0
   164ec:	moveq	r0, #0
   164f0:	beq	164fc <gen_monster@@Base+0x36c>
   164f4:	mov	r0, r4
   164f8:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   164fc:	ldr	r6, [r0]
   16500:	mov	r1, #3
   16504:	mov	r0, r4
   16508:	bl	1fcb4 <flatcc_builder_extend_offset_vector@@Base>
   1650c:	str	r5, [r0]
   16510:	str	r6, [r0, #4]
   16514:	mov	r1, #1
   16518:	mov	r0, r4
   1651c:	bl	201d8 <flatcc_builder_truncate_offset_vector@@Base>
   16520:	mov	r0, r4
   16524:	bl	21794 <flatcc_builder_offset_vector_count@@Base>
   16528:	cmp	r0, #5
   1652c:	bne	16a44 <gen_monster@@Base+0x8b4>
   16530:	mov	r1, #36	; 0x24
   16534:	mov	r0, r4
   16538:	bl	20608 <flatcc_builder_start_table@@Base>
   1653c:	mov	r2, #8
   16540:	movw	r1, #24612	; 0x6024
   16544:	movt	r1, #2
   16548:	mov	r0, r4
   1654c:	bl	2205c <flatcc_builder_create_string_strn@@Base>
   16550:	subs	r6, r0, #0
   16554:	beq	1656c <gen_monster@@Base+0x3dc>
   16558:	mov	r1, #3
   1655c:	mov	r0, r4
   16560:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   16564:	cmp	r0, #0
   16568:	strne	r6, [r0]
   1656c:	mov	r2, #1
   16570:	ldr	r1, [pc, #1536]	; 16b78 <gen_monster@@Base+0x9e8>
   16574:	mov	r0, r4
   16578:	bl	21030 <flatcc_builder_check_required@@Base>
   1657c:	cmp	r0, #0
   16580:	beq	16a60 <gen_monster@@Base+0x8d0>
   16584:	mov	r0, r4
   16588:	bl	210e0 <flatcc_builder_end_table@@Base>
   1658c:	subs	r1, r0, #0
   16590:	moveq	r0, #0
   16594:	beq	165a0 <gen_monster@@Base+0x410>
   16598:	mov	r0, r4
   1659c:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   165a0:	ldr	r3, [r0]
   165a4:	str	r3, [sp, #24]
   165a8:	mov	r0, r4
   165ac:	bl	21794 <flatcc_builder_offset_vector_count@@Base>
   165b0:	cmp	r0, #6
   165b4:	bne	16a7c <gen_monster@@Base+0x8ec>
   165b8:	mov	r0, r4
   165bc:	bl	2178c <flatcc_builder_offset_vector_edit@@Base>
   165c0:	ldr	r3, [r0, #20]
   165c4:	ldr	r2, [r0, #8]
   165c8:	str	r2, [sp, #28]
   165cc:	str	r5, [r0, #20]
   165d0:	str	r3, [r0]
   165d4:	mov	r2, #2
   165d8:	add	r1, sp, #24
   165dc:	mov	r0, r4
   165e0:	bl	1fe10 <flatcc_builder_append_offset_vector@@Base>
   165e4:	mov	r0, r4
   165e8:	bl	21540 <flatcc_builder_end_offset_vector@@Base>
   165ec:	subs	r6, r0, #0
   165f0:	beq	16608 <gen_monster@@Base+0x478>
   165f4:	mov	r1, #11
   165f8:	mov	r0, r4
   165fc:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   16600:	cmp	r0, #0
   16604:	strne	r6, [r0]
   16608:	movw	r1, #23872	; 0x5d40
   1660c:	movt	r1, #2
   16610:	mov	r0, r4
   16614:	bl	22020 <flatcc_builder_create_string_str@@Base>
   16618:	str	r0, [sp, #12]
   1661c:	mov	r2, #2
   16620:	ldr	r1, [pc, #1364]	; 16b7c <gen_monster@@Base+0x9ec>
   16624:	mov	r0, r4
   16628:	bl	21f04 <flatcc_builder_create_string@@Base>
   1662c:	str	r0, [sp, #16]
   16630:	movw	r1, #23964	; 0x5d9c
   16634:	movt	r1, #2
   16638:	mov	r0, r4
   1663c:	bl	22020 <flatcc_builder_create_string_str@@Base>
   16640:	str	r0, [sp, #20]
   16644:	mov	r2, #3
   16648:	add	r1, sp, #12
   1664c:	mov	r0, r4
   16650:	bl	21628 <flatcc_builder_create_offset_vector@@Base>
   16654:	subs	r6, r0, #0
   16658:	beq	16670 <gen_monster@@Base+0x4e0>
   1665c:	mov	r1, #10
   16660:	mov	r0, r4
   16664:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   16668:	cmp	r0, #0
   1666c:	strne	r6, [r0]
   16670:	mvn	r3, #0
   16674:	mov	r2, #1
   16678:	mov	r1, r2
   1667c:	mov	r0, r4
   16680:	bl	20310 <flatcc_builder_start_vector@@Base>
   16684:	mov	r2, #1
   16688:	add	r1, sp, #8
   1668c:	mov	r0, r4
   16690:	bl	1fba8 <flatcc_builder_append_vector@@Base>
   16694:	mov	r2, #3
   16698:	add	r1, sp, #9
   1669c:	mov	r0, r4
   166a0:	bl	1fba8 <flatcc_builder_append_vector@@Base>
   166a4:	mov	r0, r4
   166a8:	bl	21414 <flatcc_builder_end_vector@@Base>
   166ac:	subs	r6, r0, #0
   166b0:	beq	166c8 <gen_monster@@Base+0x538>
   166b4:	mov	r1, #24
   166b8:	mov	r0, r4
   166bc:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   166c0:	cmp	r0, #0
   166c4:	strne	r6, [r0]
   166c8:	cmp	r5, #0
   166cc:	beq	16b40 <gen_monster@@Base+0x9b0>
   166d0:	mov	r3, #1
   166d4:	mov	r2, r3
   166d8:	mov	r1, #7
   166dc:	mov	r0, r4
   166e0:	bl	221cc <flatcc_builder_table_add@@Base>
   166e4:	subs	r6, r0, #0
   166e8:	beq	1670c <gen_monster@@Base+0x57c>
   166ec:	mov	r1, #8
   166f0:	mov	r0, r4
   166f4:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   166f8:	cmp	r0, #0
   166fc:	beq	1670c <gen_monster@@Base+0x57c>
   16700:	mov	r3, #1
   16704:	strb	r3, [r6]
   16708:	str	r5, [r0]
   1670c:	mov	r1, #36	; 0x24
   16710:	mov	r0, r4
   16714:	bl	20608 <flatcc_builder_start_table@@Base>
   16718:	movw	r1, #24164	; 0x5e64
   1671c:	movt	r1, #2
   16720:	mov	r0, r4
   16724:	bl	134e4 <_start@@Base+0xa74>
   16728:	mov	r0, r4
   1672c:	bl	203b0 <flatcc_builder_start_offset_vector@@Base>
   16730:	mov	r1, #36	; 0x24
   16734:	mov	r0, r4
   16738:	bl	20608 <flatcc_builder_start_table@@Base>
   1673c:	mov	r3, #1
   16740:	mov	r2, r3
   16744:	mov	r1, #7
   16748:	mov	r0, r4
   1674c:	bl	221cc <flatcc_builder_table_add@@Base>
   16750:	subs	r6, r0, #0
   16754:	beq	16778 <gen_monster@@Base+0x5e8>
   16758:	mov	r1, #8
   1675c:	mov	r0, r4
   16760:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   16764:	cmp	r0, #0
   16768:	beq	16778 <gen_monster@@Base+0x5e8>
   1676c:	mov	r3, #1
   16770:	strb	r3, [r6]
   16774:	str	r5, [r0]
   16778:	movw	r1, #24692	; 0x6074
   1677c:	movt	r1, #2
   16780:	mov	r0, r4
   16784:	bl	134e4 <_start@@Base+0xa74>
   16788:	mov	r2, #1
   1678c:	ldr	r1, [pc, #996]	; 16b78 <gen_monster@@Base+0x9e8>
   16790:	mov	r0, r4
   16794:	bl	21030 <flatcc_builder_check_required@@Base>
   16798:	cmp	r0, #0
   1679c:	beq	16a98 <gen_monster@@Base+0x908>
   167a0:	mov	r0, r4
   167a4:	bl	210e0 <flatcc_builder_end_table@@Base>
   167a8:	subs	r1, r0, #0
   167ac:	beq	167b8 <gen_monster@@Base+0x628>
   167b0:	mov	r0, r4
   167b4:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   167b8:	mov	r1, #36	; 0x24
   167bc:	mov	r0, r4
   167c0:	bl	20608 <flatcc_builder_start_table@@Base>
   167c4:	cmp	r5, #0
   167c8:	beq	16808 <gen_monster@@Base+0x678>
   167cc:	mov	r3, #1
   167d0:	mov	r2, r3
   167d4:	mov	r1, #7
   167d8:	mov	r0, r4
   167dc:	bl	221cc <flatcc_builder_table_add@@Base>
   167e0:	subs	r6, r0, #0
   167e4:	beq	16808 <gen_monster@@Base+0x678>
   167e8:	mov	r1, #8
   167ec:	mov	r0, r4
   167f0:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   167f4:	cmp	r0, #0
   167f8:	beq	16808 <gen_monster@@Base+0x678>
   167fc:	mov	r3, #1
   16800:	strb	r3, [r6]
   16804:	str	r5, [r0]
   16808:	movw	r1, #24692	; 0x6074
   1680c:	movt	r1, #2
   16810:	mov	r0, r4
   16814:	bl	134e4 <_start@@Base+0xa74>
   16818:	mov	r2, #1
   1681c:	ldr	r1, [pc, #852]	; 16b78 <gen_monster@@Base+0x9e8>
   16820:	mov	r0, r4
   16824:	bl	21030 <flatcc_builder_check_required@@Base>
   16828:	cmp	r0, #0
   1682c:	beq	16ab4 <gen_monster@@Base+0x924>
   16830:	mov	r0, r4
   16834:	bl	210e0 <flatcc_builder_end_table@@Base>
   16838:	subs	r1, r0, #0
   1683c:	beq	16848 <gen_monster@@Base+0x6b8>
   16840:	mov	r0, r4
   16844:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   16848:	mov	r1, #36	; 0x24
   1684c:	mov	r0, r4
   16850:	bl	20608 <flatcc_builder_start_table@@Base>
   16854:	mov	r1, #8
   16858:	mov	r0, r4
   1685c:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   16860:	cmp	r0, #0
   16864:	strne	r5, [r0]
   16868:	movw	r1, #24692	; 0x6074
   1686c:	movt	r1, #2
   16870:	mov	r0, r4
   16874:	bl	134e4 <_start@@Base+0xa74>
   16878:	mov	r3, #1
   1687c:	mov	r2, r3
   16880:	mov	r1, #7
   16884:	mov	r0, r4
   16888:	bl	221cc <flatcc_builder_table_add@@Base>
   1688c:	cmp	r0, #0
   16890:	movne	r3, #1
   16894:	strbne	r3, [r0]
   16898:	mov	r2, #1
   1689c:	ldr	r1, [pc, #724]	; 16b78 <gen_monster@@Base+0x9e8>
   168a0:	mov	r0, r4
   168a4:	bl	21030 <flatcc_builder_check_required@@Base>
   168a8:	cmp	r0, #0
   168ac:	beq	16ad0 <gen_monster@@Base+0x940>
   168b0:	mov	r0, r4
   168b4:	bl	210e0 <flatcc_builder_end_table@@Base>
   168b8:	subs	r1, r0, #0
   168bc:	beq	168c8 <gen_monster@@Base+0x738>
   168c0:	mov	r0, r4
   168c4:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   168c8:	mov	r0, r4
   168cc:	bl	21540 <flatcc_builder_end_offset_vector@@Base>
   168d0:	subs	r5, r0, #0
   168d4:	beq	168ec <gen_monster@@Base+0x75c>
   168d8:	mov	r1, #11
   168dc:	mov	r0, r4
   168e0:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   168e4:	cmp	r0, #0
   168e8:	strne	r5, [r0]
   168ec:	mov	r2, #1
   168f0:	ldr	r1, [pc, #640]	; 16b78 <gen_monster@@Base+0x9e8>
   168f4:	mov	r0, r4
   168f8:	bl	21030 <flatcc_builder_check_required@@Base>
   168fc:	cmp	r0, #0
   16900:	beq	16aec <gen_monster@@Base+0x95c>
   16904:	mov	r0, r4
   16908:	bl	210e0 <flatcc_builder_end_table@@Base>
   1690c:	subs	r5, r0, #0
   16910:	beq	16928 <gen_monster@@Base+0x798>
   16914:	mov	r1, #12
   16918:	mov	r0, r4
   1691c:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   16920:	cmp	r0, #0
   16924:	strne	r5, [r0]
   16928:	mov	r3, #1
   1692c:	mov	r2, r3
   16930:	mov	r1, #15
   16934:	mov	r0, r4
   16938:	bl	221cc <flatcc_builder_table_add@@Base>
   1693c:	cmp	r0, #0
   16940:	movne	r3, #0
   16944:	strbne	r3, [r0]
   16948:	mov	r1, #3
   1694c:	mov	r0, r4
   16950:	bl	20608 <flatcc_builder_start_table@@Base>
   16954:	mov	r2, #0
   16958:	ldr	r1, [pc, #544]	; 16b80 <gen_monster@@Base+0x9f0>
   1695c:	mov	r0, r4
   16960:	bl	21030 <flatcc_builder_check_required@@Base>
   16964:	cmp	r0, #0
   16968:	beq	16b08 <gen_monster@@Base+0x978>
   1696c:	mov	r0, r4
   16970:	bl	210e0 <flatcc_builder_end_table@@Base>
   16974:	subs	r5, r0, #0
   16978:	beq	16990 <gen_monster@@Base+0x800>
   1697c:	mov	r1, #14
   16980:	mov	r0, r4
   16984:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   16988:	cmp	r0, #0
   1698c:	strne	r5, [r0]
   16990:	mov	r2, #1
   16994:	ldr	r1, [pc, #476]	; 16b78 <gen_monster@@Base+0x9e8>
   16998:	mov	r0, r4
   1699c:	bl	21030 <flatcc_builder_check_required@@Base>
   169a0:	cmp	r0, #0
   169a4:	beq	16b24 <gen_monster@@Base+0x994>
   169a8:	mov	r0, r4
   169ac:	bl	210e0 <flatcc_builder_end_table@@Base>
   169b0:	mov	r1, r0
   169b4:	mov	r0, r4
   169b8:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   169bc:	mov	r0, #0
   169c0:	add	sp, sp, #52	; 0x34
   169c4:	ldrd	r4, [sp]
   169c8:	ldrd	r6, [sp, #8]
   169cc:	add	sp, sp, #16
   169d0:	pop	{pc}		; (ldr pc, [sp], #4)
   169d4:	ldr	r3, [pc, #424]	; 16b84 <gen_monster@@Base+0x9f4>
   169d8:	movw	r2, #881	; 0x371
   169dc:	movw	r1, #23376	; 0x5b50
   169e0:	movt	r1, #2
   169e4:	movw	r0, #24480	; 0x5fa0
   169e8:	movt	r0, #2
   169ec:	bl	12a64 <__assert_fail@plt>
   169f0:	ldr	r3, [pc, #396]	; 16b84 <gen_monster@@Base+0x9f4>
   169f4:	movw	r2, #883	; 0x373
   169f8:	movw	r1, #23376	; 0x5b50
   169fc:	movt	r1, #2
   16a00:	movw	r0, #24520	; 0x5fc8
   16a04:	movt	r0, #2
   16a08:	bl	12a64 <__assert_fail@plt>
   16a0c:	ldr	r3, [pc, #372]	; 16b88 <gen_monster@@Base+0x9f8>
   16a10:	mov	r2, #235	; 0xeb
   16a14:	movw	r1, #21196	; 0x52cc
   16a18:	movt	r1, #2
   16a1c:	movw	r0, #21596	; 0x545c
   16a20:	movt	r0, #2
   16a24:	bl	12a64 <__assert_fail@plt>
   16a28:	ldr	r3, [pc, #344]	; 16b88 <gen_monster@@Base+0x9f8>
   16a2c:	mov	r2, #235	; 0xeb
   16a30:	movw	r1, #21196	; 0x52cc
   16a34:	movt	r1, #2
   16a38:	movw	r0, #21596	; 0x545c
   16a3c:	movt	r0, #2
   16a40:	bl	12a64 <__assert_fail@plt>
   16a44:	ldr	r3, [pc, #312]	; 16b84 <gen_monster@@Base+0x9f4>
   16a48:	movw	r2, #923	; 0x39b
   16a4c:	movw	r1, #23376	; 0x5b50
   16a50:	movt	r1, #2
   16a54:	movw	r0, #24560	; 0x5ff0
   16a58:	movt	r0, #2
   16a5c:	bl	12a64 <__assert_fail@plt>
   16a60:	ldr	r3, [pc, #288]	; 16b88 <gen_monster@@Base+0x9f8>
   16a64:	mov	r2, #235	; 0xeb
   16a68:	movw	r1, #21196	; 0x52cc
   16a6c:	movt	r1, #2
   16a70:	movw	r0, #21596	; 0x545c
   16a74:	movt	r0, #2
   16a78:	bl	12a64 <__assert_fail@plt>
   16a7c:	ldr	r3, [pc, #256]	; 16b84 <gen_monster@@Base+0x9f4>
   16a80:	movw	r2, #929	; 0x3a1
   16a84:	movw	r1, #23376	; 0x5b50
   16a88:	movt	r1, #2
   16a8c:	movw	r0, #24640	; 0x6040
   16a90:	movt	r0, #2
   16a94:	bl	12a64 <__assert_fail@plt>
   16a98:	ldr	r3, [pc, #232]	; 16b88 <gen_monster@@Base+0x9f8>
   16a9c:	mov	r2, #235	; 0xeb
   16aa0:	movw	r1, #21196	; 0x52cc
   16aa4:	movt	r1, #2
   16aa8:	movw	r0, #21596	; 0x545c
   16aac:	movt	r0, #2
   16ab0:	bl	12a64 <__assert_fail@plt>
   16ab4:	ldr	r3, [pc, #204]	; 16b88 <gen_monster@@Base+0x9f8>
   16ab8:	mov	r2, #235	; 0xeb
   16abc:	movw	r1, #21196	; 0x52cc
   16ac0:	movt	r1, #2
   16ac4:	movw	r0, #21596	; 0x545c
   16ac8:	movt	r0, #2
   16acc:	bl	12a64 <__assert_fail@plt>
   16ad0:	ldr	r3, [pc, #176]	; 16b88 <gen_monster@@Base+0x9f8>
   16ad4:	mov	r2, #235	; 0xeb
   16ad8:	movw	r1, #21196	; 0x52cc
   16adc:	movt	r1, #2
   16ae0:	movw	r0, #21596	; 0x545c
   16ae4:	movt	r0, #2
   16ae8:	bl	12a64 <__assert_fail@plt>
   16aec:	ldr	r3, [pc, #148]	; 16b88 <gen_monster@@Base+0x9f8>
   16af0:	mov	r2, #235	; 0xeb
   16af4:	movw	r1, #21196	; 0x52cc
   16af8:	movt	r1, #2
   16afc:	movw	r0, #21596	; 0x545c
   16b00:	movt	r0, #2
   16b04:	bl	12a64 <__assert_fail@plt>
   16b08:	ldr	r3, [pc, #124]	; 16b8c <gen_monster@@Base+0x9fc>
   16b0c:	mov	r2, #221	; 0xdd
   16b10:	movw	r1, #21196	; 0x52cc
   16b14:	movt	r1, #2
   16b18:	movw	r0, #24704	; 0x6080
   16b1c:	movt	r0, #2
   16b20:	bl	12a64 <__assert_fail@plt>
   16b24:	ldr	r3, [pc, #92]	; 16b88 <gen_monster@@Base+0x9f8>
   16b28:	mov	r2, #235	; 0xeb
   16b2c:	movw	r1, #21196	; 0x52cc
   16b30:	movt	r1, #2
   16b34:	movw	r0, #21596	; 0x545c
   16b38:	movt	r0, #2
   16b3c:	bl	12a64 <__assert_fail@plt>
   16b40:	mov	r1, #36	; 0x24
   16b44:	mov	r0, r4
   16b48:	bl	20608 <flatcc_builder_start_table@@Base>
   16b4c:	movw	r1, #24164	; 0x5e64
   16b50:	movt	r1, #2
   16b54:	mov	r0, r4
   16b58:	bl	134e4 <_start@@Base+0xa74>
   16b5c:	mov	r0, r4
   16b60:	bl	203b0 <flatcc_builder_start_offset_vector@@Base>
   16b64:	mov	r1, #36	; 0x24
   16b68:	mov	r0, r4
   16b6c:	bl	20608 <flatcc_builder_start_table@@Base>
   16b70:	b	16778 <gen_monster@@Base+0x5e8>
   16b74:	andeq	r4, r2, r8, asr #22
   16b78:	andeq	r4, r2, r0, asr #20
   16b7c:	andeq	r4, r2, r0, lsr #22
   16b80:	andeq	r4, r2, r0, ror #22
   16b84:	andeq	r4, r2, r4, asr fp
   16b88:	andeq	r4, r2, r4, asr #20
   16b8c:	andeq	r4, r2, r4, ror #22

00016b90 <test_monster@@Base>:
   16b90:	strd	r4, [sp, #-12]!
   16b94:	str	lr, [sp, #8]
   16b98:	sub	sp, sp, #12
   16b9c:	mov	r4, r0
   16ba0:	mov	r1, #0
   16ba4:	bl	16190 <gen_monster@@Base>
   16ba8:	add	r1, sp, #4
   16bac:	mov	r0, r4
   16bb0:	bl	2299c <flatcc_builder_finalize_aligned_buffer@@Base>
   16bb4:	mov	r4, r0
   16bb8:	movw	r3, #36976	; 0x9070
   16bbc:	movt	r3, #3
   16bc0:	ldr	r3, [r3]
   16bc4:	ldr	r2, [sp, #4]
   16bc8:	mov	r1, r0
   16bcc:	movw	r0, #21912	; 0x5598
   16bd0:	movt	r0, #2
   16bd4:	bl	13384 <_start@@Base+0x914>
   16bd8:	movw	r3, #14092	; 0x370c
   16bdc:	movt	r3, #1
   16be0:	movw	r2, #20800	; 0x5140
   16be4:	movt	r2, #2
   16be8:	ldr	r1, [sp, #4]
   16bec:	mov	r0, r4
   16bf0:	bl	23f7c <flatcc_verify_table_as_root@@Base>
   16bf4:	cmp	r0, #0
   16bf8:	bne	16c24 <test_monster@@Base+0x94>
   16bfc:	mov	r0, r4
   16c00:	bl	156a4 <verify_monster@@Base>
   16c04:	mov	r5, r0
   16c08:	mov	r0, r4
   16c0c:	bl	22abc <flatcc_builder_aligned_free@@Base>
   16c10:	mov	r0, r5
   16c14:	add	sp, sp, #12
   16c18:	ldrd	r4, [sp]
   16c1c:	add	sp, sp, #8
   16c20:	pop	{pc}		; (ldr pc, [sp], #4)
   16c24:	bl	231c4 <flatcc_verify_error_string@@Base>
   16c28:	mov	r1, r0
   16c2c:	movw	r0, #24860	; 0x611c
   16c30:	movt	r0, #2
   16c34:	bl	12974 <printf@plt>
   16c38:	mvn	r5, #0
   16c3c:	b	16c10 <test_monster@@Base+0x80>

00016c40 <test_monster_with_size@@Base>:
   16c40:	strd	r4, [sp, #-12]!
   16c44:	str	lr, [sp, #8]
   16c48:	sub	sp, sp, #12
   16c4c:	mov	r4, r0
   16c50:	mov	r1, #1
   16c54:	bl	16190 <gen_monster@@Base>
   16c58:	add	r1, sp, #4
   16c5c:	mov	r0, r4
   16c60:	bl	2299c <flatcc_builder_finalize_aligned_buffer@@Base>
   16c64:	mov	r4, r0
   16c68:	movw	r3, #36976	; 0x9070
   16c6c:	movt	r3, #3
   16c70:	ldr	r3, [r3]
   16c74:	ldr	r2, [sp, #4]
   16c78:	mov	r1, r0
   16c7c:	movw	r0, #24904	; 0x6148
   16c80:	movt	r0, #2
   16c84:	bl	13384 <_start@@Base+0x914>
   16c88:	tst	r4, #15
   16c8c:	bne	16cf0 <test_monster_with_size@@Base+0xb0>
   16c90:	mov	r5, r4
   16c94:	ldr	r1, [r5], #4
   16c98:	ldr	r2, [sp, #4]
   16c9c:	sub	r2, r2, #4
   16ca0:	cmp	r2, r1
   16ca4:	bne	16d14 <test_monster_with_size@@Base+0xd4>
   16ca8:	movw	r3, #14092	; 0x370c
   16cac:	movt	r3, #1
   16cb0:	movw	r2, #20800	; 0x5140
   16cb4:	movt	r2, #2
   16cb8:	mov	r0, r5
   16cbc:	bl	23f7c <flatcc_verify_table_as_root@@Base>
   16cc0:	cmp	r0, #0
   16cc4:	bne	16d28 <test_monster_with_size@@Base+0xe8>
   16cc8:	mov	r0, r5
   16ccc:	bl	156a4 <verify_monster@@Base>
   16cd0:	mov	r5, r0
   16cd4:	mov	r0, r4
   16cd8:	bl	22abc <flatcc_builder_aligned_free@@Base>
   16cdc:	mov	r0, r5
   16ce0:	add	sp, sp, #12
   16ce4:	ldrd	r4, [sp]
   16ce8:	add	sp, sp, #8
   16cec:	pop	{pc}		; (ldr pc, [sp], #4)
   16cf0:	movw	r0, #24928	; 0x6160
   16cf4:	movt	r0, #2
   16cf8:	bl	12974 <printf@plt>
   16cfc:	mov	r1, r4
   16d00:	movw	r0, #25012	; 0x61b4
   16d04:	movt	r0, #2
   16d08:	bl	12974 <printf@plt>
   16d0c:	mvn	r5, #0
   16d10:	b	16cdc <test_monster_with_size@@Base+0x9c>
   16d14:	movw	r0, #25032	; 0x61c8
   16d18:	movt	r0, #2
   16d1c:	bl	12974 <printf@plt>
   16d20:	mvn	r5, #0
   16d24:	b	16cdc <test_monster_with_size@@Base+0x9c>
   16d28:	bl	231c4 <flatcc_verify_error_string@@Base>
   16d2c:	mov	r1, r0
   16d30:	movw	r0, #25088	; 0x6200
   16d34:	movt	r0, #2
   16d38:	bl	12974 <printf@plt>
   16d3c:	mvn	r5, #0
   16d40:	b	16cdc <test_monster_with_size@@Base+0x9c>

00016d44 <test_string@@Base>:
   16d44:	strd	r4, [sp, #-16]!
   16d48:	str	r6, [sp, #8]
   16d4c:	str	lr, [sp, #12]
   16d50:	mov	r4, r0
   16d54:	bl	1ee18 <flatcc_builder_reset@@Base>
   16d58:	mov	r3, #0
   16d5c:	mov	r2, r3
   16d60:	movw	r1, #20800	; 0x5140
   16d64:	movt	r1, #2
   16d68:	mov	r0, r4
   16d6c:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   16d70:	cmp	r0, #0
   16d74:	bne	16d84 <test_string@@Base+0x40>
   16d78:	mov	r1, #36	; 0x24
   16d7c:	mov	r0, r4
   16d80:	bl	20608 <flatcc_builder_start_table@@Base>
   16d84:	mov	r0, r4
   16d88:	bl	20434 <flatcc_builder_start_string@@Base>
   16d8c:	mov	r1, #3
   16d90:	mov	r0, r4
   16d94:	bl	1ff10 <flatcc_builder_extend_string@@Base>
   16d98:	mov	r3, #49	; 0x31
   16d9c:	strb	r3, [r0]
   16da0:	mov	r3, #50	; 0x32
   16da4:	strb	r3, [r0, #1]
   16da8:	mov	r3, #51	; 0x33
   16dac:	strb	r3, [r0, #2]
   16db0:	movw	r1, #25184	; 0x6260
   16db4:	movt	r1, #2
   16db8:	mov	r0, r4
   16dbc:	bl	200b0 <flatcc_builder_append_string_str@@Base>
   16dc0:	mov	r0, r4
   16dc4:	bl	221c0 <flatcc_builder_string_len@@Base>
   16dc8:	cmp	r0, #4
   16dcc:	bne	16eec <test_string@@Base+0x1a8>
   16dd0:	mov	r2, #30
   16dd4:	movw	r1, #25188	; 0x6264
   16dd8:	movt	r1, #2
   16ddc:	mov	r0, r4
   16de0:	bl	200ec <flatcc_builder_append_string_strn@@Base>
   16de4:	mov	r0, r4
   16de8:	bl	221c0 <flatcc_builder_string_len@@Base>
   16dec:	cmp	r0, #8
   16df0:	bne	16f08 <test_string@@Base+0x1c4>
   16df4:	mov	r2, #2
   16df8:	movw	r1, #25236	; 0x6294
   16dfc:	movt	r1, #2
   16e00:	mov	r0, r4
   16e04:	bl	1ffcc <flatcc_builder_append_string@@Base>
   16e08:	mov	r0, r4
   16e0c:	bl	221c0 <flatcc_builder_string_len@@Base>
   16e10:	cmp	r0, #10
   16e14:	bne	16f24 <test_string@@Base+0x1e0>
   16e18:	mov	r1, #3
   16e1c:	mov	r0, r4
   16e20:	bl	20278 <flatcc_builder_truncate_string@@Base>
   16e24:	mov	r0, r4
   16e28:	bl	221c0 <flatcc_builder_string_len@@Base>
   16e2c:	cmp	r0, #7
   16e30:	bne	16f40 <test_string@@Base+0x1fc>
   16e34:	mov	r0, r4
   16e38:	bl	221b8 <flatcc_builder_string_edit@@Base>
   16e3c:	mov	r3, #46	; 0x2e
   16e40:	strb	r3, [r0, #4]
   16e44:	mov	r0, r4
   16e48:	bl	220a8 <flatcc_builder_end_string@@Base>
   16e4c:	subs	r5, r0, #0
   16e50:	beq	16e68 <test_string@@Base+0x124>
   16e54:	mov	r1, #3
   16e58:	mov	r0, r4
   16e5c:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   16e60:	cmp	r0, #0
   16e64:	strne	r5, [r0]
   16e68:	mov	r2, #1
   16e6c:	ldr	r1, [pc, #308]	; 16fa8 <test_string@@Base+0x264>
   16e70:	mov	r0, r4
   16e74:	bl	21030 <flatcc_builder_check_required@@Base>
   16e78:	cmp	r0, #0
   16e7c:	beq	16f5c <test_string@@Base+0x218>
   16e80:	mov	r0, r4
   16e84:	bl	210e0 <flatcc_builder_end_table@@Base>
   16e88:	mov	r1, r0
   16e8c:	mov	r0, r4
   16e90:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   16e94:	mov	r1, #0
   16e98:	mov	r0, r4
   16e9c:	bl	22840 <flatcc_builder_get_direct_buffer@@Base>
   16ea0:	cmp	r0, #0
   16ea4:	beq	16f78 <test_string@@Base+0x234>
   16ea8:	movw	r3, #20301	; 0x4f4d
   16eac:	movt	r3, #21326	; 0x534e
   16eb0:	ldr	r2, [r0, #4]
   16eb4:	cmp	r2, r3
   16eb8:	ldreq	r3, [r0]
   16ebc:	addeq	r0, r0, r3
   16ec0:	movne	r0, #0
   16ec4:	bl	12f74 <_start@@Base+0x504>
   16ec8:	movw	r1, #25320	; 0x62e8
   16ecc:	movt	r1, #2
   16ed0:	bl	12968 <strcmp@plt>
   16ed4:	cmp	r0, #0
   16ed8:	bne	16f94 <test_string@@Base+0x250>
   16edc:	ldrd	r4, [sp]
   16ee0:	ldr	r6, [sp, #8]
   16ee4:	add	sp, sp, #12
   16ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   16eec:	ldr	r3, [pc, #184]	; 16fac <test_string@@Base+0x268>
   16ef0:	movw	r2, #1080	; 0x438
   16ef4:	movw	r1, #23376	; 0x5b50
   16ef8:	movt	r1, #2
   16efc:	movw	r0, #25148	; 0x623c
   16f00:	movt	r0, #2
   16f04:	bl	12a64 <__assert_fail@plt>
   16f08:	ldr	r3, [pc, #156]	; 16fac <test_string@@Base+0x268>
   16f0c:	movw	r2, #1082	; 0x43a
   16f10:	movw	r1, #23376	; 0x5b50
   16f14:	movt	r1, #2
   16f18:	movw	r0, #25196	; 0x626c
   16f1c:	movt	r0, #2
   16f20:	bl	12a64 <__assert_fail@plt>
   16f24:	ldr	r3, [pc, #128]	; 16fac <test_string@@Base+0x268>
   16f28:	movw	r2, #1084	; 0x43c
   16f2c:	movw	r1, #23376	; 0x5b50
   16f30:	movt	r1, #2
   16f34:	movw	r0, #25240	; 0x6298
   16f38:	movt	r0, #2
   16f3c:	bl	12a64 <__assert_fail@plt>
   16f40:	ldr	r3, [pc, #100]	; 16fac <test_string@@Base+0x268>
   16f44:	movw	r2, #1086	; 0x43e
   16f48:	movw	r1, #23376	; 0x5b50
   16f4c:	movt	r1, #2
   16f50:	movw	r0, #25280	; 0x62c0
   16f54:	movt	r0, #2
   16f58:	bl	12a64 <__assert_fail@plt>
   16f5c:	ldr	r3, [pc, #76]	; 16fb0 <test_string@@Base+0x26c>
   16f60:	mov	r2, #235	; 0xeb
   16f64:	movw	r1, #21196	; 0x52cc
   16f68:	movt	r1, #2
   16f6c:	movw	r0, #21596	; 0x545c
   16f70:	movt	r0, #2
   16f74:	bl	12a64 <__assert_fail@plt>
   16f78:	ldr	r3, [pc, #44]	; 16fac <test_string@@Base+0x268>
   16f7c:	movw	r2, #1093	; 0x445
   16f80:	movw	r1, #23376	; 0x5b50
   16f84:	movt	r1, #2
   16f88:	movw	r0, #21484	; 0x53ec
   16f8c:	movt	r0, #2
   16f90:	bl	12a64 <__assert_fail@plt>
   16f94:	movw	r0, #25328	; 0x62f0
   16f98:	movt	r0, #2
   16f9c:	bl	129c8 <puts@plt>
   16fa0:	mvn	r0, #0
   16fa4:	b	16edc <test_string@@Base+0x198>
   16fa8:	andeq	r4, r2, r0, asr #20
   16fac:	andeq	r4, r2, ip, ror fp
   16fb0:	andeq	r4, r2, r4, asr #20

00016fb4 <test_sort_find@@Base>:
   16fb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16fb8:	strd	r6, [sp, #8]
   16fbc:	strd	r8, [sp, #16]
   16fc0:	strd	sl, [sp, #24]
   16fc4:	str	lr, [sp, #32]
   16fc8:	sub	sp, sp, #52	; 0x34
   16fcc:	mov	r4, r0
   16fd0:	bl	1ee18 <flatcc_builder_reset@@Base>
   16fd4:	mov	r3, #0
   16fd8:	mov	r2, r3
   16fdc:	movw	r1, #20800	; 0x5140
   16fe0:	movt	r1, #2
   16fe4:	mov	r0, r4
   16fe8:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   16fec:	cmp	r0, #0
   16ff0:	bne	17000 <test_sort_find@@Base+0x4c>
   16ff4:	mov	r1, #36	; 0x24
   16ff8:	mov	r0, r4
   16ffc:	bl	20608 <flatcc_builder_start_table@@Base>
   17000:	movw	r1, #21584	; 0x5450
   17004:	movt	r1, #2
   17008:	mov	r0, r4
   1700c:	bl	134e4 <_start@@Base+0xa74>
   17010:	mov	r0, r4
   17014:	bl	203b0 <flatcc_builder_start_offset_vector@@Base>
   17018:	mov	r1, #36	; 0x24
   1701c:	mov	r0, r4
   17020:	bl	20608 <flatcc_builder_start_table@@Base>
   17024:	movw	r1, #23480	; 0x5bb8
   17028:	movt	r1, #2
   1702c:	mov	r0, r4
   17030:	bl	134e4 <_start@@Base+0xa74>
   17034:	mov	r2, #1
   17038:	ldr	r1, [pc, #3980]	; 17fcc <test_sort_find@@Base+0x1018>
   1703c:	mov	r0, r4
   17040:	bl	21030 <flatcc_builder_check_required@@Base>
   17044:	cmp	r0, #0
   17048:	beq	172ac <test_sort_find@@Base+0x2f8>
   1704c:	mov	r0, r4
   17050:	bl	210e0 <flatcc_builder_end_table@@Base>
   17054:	subs	r1, r0, #0
   17058:	beq	17064 <test_sort_find@@Base+0xb0>
   1705c:	mov	r0, r4
   17060:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   17064:	mov	r1, #36	; 0x24
   17068:	mov	r0, r4
   1706c:	bl	20608 <flatcc_builder_start_table@@Base>
   17070:	movw	r1, #23580	; 0x5c1c
   17074:	movt	r1, #2
   17078:	mov	r0, r4
   1707c:	bl	134e4 <_start@@Base+0xa74>
   17080:	mov	r2, #1
   17084:	ldr	r1, [pc, #3904]	; 17fcc <test_sort_find@@Base+0x1018>
   17088:	mov	r0, r4
   1708c:	bl	21030 <flatcc_builder_check_required@@Base>
   17090:	cmp	r0, #0
   17094:	beq	172c8 <test_sort_find@@Base+0x314>
   17098:	mov	r0, r4
   1709c:	bl	210e0 <flatcc_builder_end_table@@Base>
   170a0:	subs	r1, r0, #0
   170a4:	beq	170b0 <test_sort_find@@Base+0xfc>
   170a8:	mov	r0, r4
   170ac:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   170b0:	mov	r1, #36	; 0x24
   170b4:	mov	r0, r4
   170b8:	bl	20608 <flatcc_builder_start_table@@Base>
   170bc:	movw	r1, #23624	; 0x5c48
   170c0:	movt	r1, #2
   170c4:	mov	r0, r4
   170c8:	bl	134e4 <_start@@Base+0xa74>
   170cc:	mov	r2, #1
   170d0:	ldr	r1, [pc, #3828]	; 17fcc <test_sort_find@@Base+0x1018>
   170d4:	mov	r0, r4
   170d8:	bl	21030 <flatcc_builder_check_required@@Base>
   170dc:	cmp	r0, #0
   170e0:	beq	172e4 <test_sort_find@@Base+0x330>
   170e4:	mov	r0, r4
   170e8:	bl	210e0 <flatcc_builder_end_table@@Base>
   170ec:	subs	r1, r0, #0
   170f0:	beq	170fc <test_sort_find@@Base+0x148>
   170f4:	mov	r0, r4
   170f8:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   170fc:	mov	r1, #36	; 0x24
   17100:	mov	r0, r4
   17104:	bl	20608 <flatcc_builder_start_table@@Base>
   17108:	movw	r1, #25348	; 0x6304
   1710c:	movt	r1, #2
   17110:	mov	r0, r4
   17114:	bl	134e4 <_start@@Base+0xa74>
   17118:	mov	r2, #1
   1711c:	ldr	r1, [pc, #3752]	; 17fcc <test_sort_find@@Base+0x1018>
   17120:	mov	r0, r4
   17124:	bl	21030 <flatcc_builder_check_required@@Base>
   17128:	cmp	r0, #0
   1712c:	beq	17300 <test_sort_find@@Base+0x34c>
   17130:	mov	r0, r4
   17134:	bl	210e0 <flatcc_builder_end_table@@Base>
   17138:	subs	r1, r0, #0
   1713c:	beq	17148 <test_sort_find@@Base+0x194>
   17140:	mov	r0, r4
   17144:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   17148:	mov	r1, #36	; 0x24
   1714c:	mov	r0, r4
   17150:	bl	20608 <flatcc_builder_start_table@@Base>
   17154:	movw	r1, #23624	; 0x5c48
   17158:	movt	r1, #2
   1715c:	mov	r0, r4
   17160:	bl	134e4 <_start@@Base+0xa74>
   17164:	mov	r2, #1
   17168:	ldr	r1, [pc, #3676]	; 17fcc <test_sort_find@@Base+0x1018>
   1716c:	mov	r0, r4
   17170:	bl	21030 <flatcc_builder_check_required@@Base>
   17174:	cmp	r0, #0
   17178:	beq	1731c <test_sort_find@@Base+0x368>
   1717c:	mov	r0, r4
   17180:	bl	210e0 <flatcc_builder_end_table@@Base>
   17184:	subs	r1, r0, #0
   17188:	beq	17194 <test_sort_find@@Base+0x1e0>
   1718c:	mov	r0, r4
   17190:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   17194:	mov	r0, r4
   17198:	bl	21540 <flatcc_builder_end_offset_vector@@Base>
   1719c:	subs	r5, r0, #0
   171a0:	beq	171b8 <test_sort_find@@Base+0x204>
   171a4:	mov	r1, #11
   171a8:	mov	r0, r4
   171ac:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   171b0:	cmp	r0, #0
   171b4:	strne	r5, [r0]
   171b8:	mov	r2, #1
   171bc:	ldr	r1, [pc, #3592]	; 17fcc <test_sort_find@@Base+0x1018>
   171c0:	mov	r0, r4
   171c4:	bl	21030 <flatcc_builder_check_required@@Base>
   171c8:	cmp	r0, #0
   171cc:	beq	17338 <test_sort_find@@Base+0x384>
   171d0:	mov	r0, r4
   171d4:	bl	210e0 <flatcc_builder_end_table@@Base>
   171d8:	mov	r1, r0
   171dc:	mov	r0, r4
   171e0:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   171e4:	add	r1, sp, #44	; 0x2c
   171e8:	mov	r0, r4
   171ec:	bl	2299c <flatcc_builder_finalize_aligned_buffer@@Base>
   171f0:	mov	r4, r0
   171f4:	str	r0, [sp, #12]
   171f8:	movw	r3, #36976	; 0x9070
   171fc:	movt	r3, #3
   17200:	ldr	r3, [r3]
   17204:	ldr	r2, [sp, #44]	; 0x2c
   17208:	mov	r1, r0
   1720c:	movw	r0, #25356	; 0x630c
   17210:	movt	r0, #2
   17214:	bl	13384 <_start@@Base+0x914>
   17218:	cmp	r4, #0
   1721c:	beq	17354 <test_sort_find@@Base+0x3a0>
   17220:	movw	r3, #20301	; 0x4f4d
   17224:	movt	r3, #21326	; 0x534e
   17228:	ldr	r2, [r4, #4]
   1722c:	cmp	r2, r3
   17230:	bne	17354 <test_sort_find@@Base+0x3a0>
   17234:	ldr	r3, [r4]
   17238:	adds	r2, r4, r3
   1723c:	beq	17354 <test_sort_find@@Base+0x3a0>
   17240:	ldr	r1, [sp, #12]
   17244:	ldr	r3, [r1, r3]
   17248:	sub	r3, r2, r3
   1724c:	ldrh	r1, [r3]
   17250:	cmp	r1, #27
   17254:	bls	17370 <test_sort_find@@Base+0x3bc>
   17258:	ldrh	r3, [r3, #26]
   1725c:	cmp	r3, #0
   17260:	beq	17370 <test_sort_find@@Base+0x3bc>
   17264:	add	r1, r2, r3
   17268:	str	r1, [sp, #24]
   1726c:	ldr	r3, [r2, r3]
   17270:	add	r3, r3, #4
   17274:	str	r3, [sp, #28]
   17278:	adds	fp, r1, r3
   1727c:	beq	17370 <test_sort_find@@Base+0x3bc>
   17280:	ldr	r3, [fp, #-4]
   17284:	str	r3, [sp, #32]
   17288:	cmp	r3, #0
   1728c:	beq	17af4 <test_sort_find@@Base+0xb40>
   17290:	sub	sl, r3, #1
   17294:	lsr	r3, r3, #1
   17298:	str	r3, [sp, #4]
   1729c:	lsl	r3, r3, #1
   172a0:	str	r3, [sp, #8]
   172a4:	mov	r9, sl
   172a8:	b	175f0 <test_sort_find@@Base+0x63c>
   172ac:	ldr	r3, [pc, #3356]	; 17fd0 <test_sort_find@@Base+0x101c>
   172b0:	mov	r2, #235	; 0xeb
   172b4:	movw	r1, #21196	; 0x52cc
   172b8:	movt	r1, #2
   172bc:	movw	r0, #21596	; 0x545c
   172c0:	movt	r0, #2
   172c4:	bl	12a64 <__assert_fail@plt>
   172c8:	ldr	r3, [pc, #3328]	; 17fd0 <test_sort_find@@Base+0x101c>
   172cc:	mov	r2, #235	; 0xeb
   172d0:	movw	r1, #21196	; 0x52cc
   172d4:	movt	r1, #2
   172d8:	movw	r0, #21596	; 0x545c
   172dc:	movt	r0, #2
   172e0:	bl	12a64 <__assert_fail@plt>
   172e4:	ldr	r3, [pc, #3300]	; 17fd0 <test_sort_find@@Base+0x101c>
   172e8:	mov	r2, #235	; 0xeb
   172ec:	movw	r1, #21196	; 0x52cc
   172f0:	movt	r1, #2
   172f4:	movw	r0, #21596	; 0x545c
   172f8:	movt	r0, #2
   172fc:	bl	12a64 <__assert_fail@plt>
   17300:	ldr	r3, [pc, #3272]	; 17fd0 <test_sort_find@@Base+0x101c>
   17304:	mov	r2, #235	; 0xeb
   17308:	movw	r1, #21196	; 0x52cc
   1730c:	movt	r1, #2
   17310:	movw	r0, #21596	; 0x545c
   17314:	movt	r0, #2
   17318:	bl	12a64 <__assert_fail@plt>
   1731c:	ldr	r3, [pc, #3244]	; 17fd0 <test_sort_find@@Base+0x101c>
   17320:	mov	r2, #235	; 0xeb
   17324:	movw	r1, #21196	; 0x52cc
   17328:	movt	r1, #2
   1732c:	movw	r0, #21596	; 0x545c
   17330:	movt	r0, #2
   17334:	bl	12a64 <__assert_fail@plt>
   17338:	ldr	r3, [pc, #3216]	; 17fd0 <test_sort_find@@Base+0x101c>
   1733c:	mov	r2, #235	; 0xeb
   17340:	movw	r1, #21196	; 0x52cc
   17344:	movt	r1, #2
   17348:	movw	r0, #21596	; 0x545c
   1734c:	movt	r0, #2
   17350:	bl	12a64 <__assert_fail@plt>
   17354:	ldr	r3, [pc, #3192]	; 17fd4 <test_sort_find@@Base+0x1020>
   17358:	movw	r2, #711	; 0x2c7
   1735c:	movw	r1, #20464	; 0x4ff0
   17360:	movt	r1, #2
   17364:	movw	r0, #20564	; 0x5054
   17368:	movt	r0, #2
   1736c:	bl	12a64 <__assert_fail@plt>
   17370:	ldr	r3, [pc, #3168]	; 17fd8 <test_sort_find@@Base+0x1024>
   17374:	movw	r2, #1147	; 0x47b
   17378:	movw	r1, #23376	; 0x5b50
   1737c:	movt	r1, #2
   17380:	movw	r0, #25380	; 0x6324
   17384:	movt	r0, #2
   17388:	bl	12a64 <__assert_fail@plt>
   1738c:	lsl	r3, r4, #2
   17390:	add	r0, fp, r3
   17394:	ldr	ip, [fp, #-4]
   17398:	cmp	ip, r4
   1739c:	bls	17464 <test_sort_find@@Base+0x4b0>
   173a0:	ldr	r2, [fp, r4, lsl #2]
   173a4:	adds	r1, r0, r2
   173a8:	beq	17480 <test_sort_find@@Base+0x4cc>
   173ac:	ldr	r2, [r0, r2]
   173b0:	sub	r2, r1, r2
   173b4:	ldrh	r0, [r2]
   173b8:	cmp	r0, #11
   173bc:	bls	1749c <test_sort_find@@Base+0x4e8>
   173c0:	ldrh	r2, [r2, #10]
   173c4:	cmp	r2, #0
   173c8:	beq	1749c <test_sort_find@@Base+0x4e8>
   173cc:	add	lr, r1, r2
   173d0:	ldr	r0, [r1, r2]
   173d4:	add	r0, r0, #4
   173d8:	add	r0, lr, r0
   173dc:	add	r7, r4, #1
   173e0:	add	r3, r3, #4
   173e4:	add	r1, fp, r3
   173e8:	cmp	r7, ip
   173ec:	bcs	174b8 <test_sort_find@@Base+0x504>
   173f0:	ldr	r3, [fp, r3]
   173f4:	adds	r2, r1, r3
   173f8:	beq	174d4 <test_sort_find@@Base+0x520>
   173fc:	ldr	r3, [r1, r3]
   17400:	sub	r3, r2, r3
   17404:	ldrh	r1, [r3]
   17408:	cmp	r1, #11
   1740c:	bls	174f0 <test_sort_find@@Base+0x53c>
   17410:	ldrh	r3, [r3, #10]
   17414:	cmp	r3, #0
   17418:	beq	174f0 <test_sort_find@@Base+0x53c>
   1741c:	add	r1, r2, r3
   17420:	ldr	r3, [r2, r3]
   17424:	add	r3, r3, #4
   17428:	adds	r1, r1, r3
   1742c:	moveq	r6, #0
   17430:	ldrne	r6, [r1, #-4]
   17434:	cmp	r0, #0
   17438:	beq	1750c <test_sort_find@@Base+0x558>
   1743c:	ldr	r5, [r0, #-4]
   17440:	cmp	r6, r5
   17444:	movcc	r2, r6
   17448:	movcs	r2, r5
   1744c:	bl	12a4c <strncmp@plt>
   17450:	cmp	r0, #0
   17454:	beq	17510 <test_sort_find@@Base+0x55c>
   17458:	cmp	r0, #0
   1745c:	movlt	r4, r7
   17460:	b	17648 <test_sort_find@@Base+0x694>
   17464:	ldr	r3, [pc, #2928]	; 17fdc <test_sort_find@@Base+0x1028>
   17468:	movw	r2, #693	; 0x2b5
   1746c:	movw	r1, #20464	; 0x4ff0
   17470:	movt	r1, #2
   17474:	movw	r0, #20708	; 0x50e4
   17478:	movt	r0, #2
   1747c:	bl	12a64 <__assert_fail@plt>
   17480:	ldr	r3, [pc, #2904]	; 17fe0 <test_sort_find@@Base+0x102c>
   17484:	movw	r2, #699	; 0x2bb
   17488:	movw	r1, #20464	; 0x4ff0
   1748c:	movt	r1, #2
   17490:	movw	r0, #20564	; 0x5054
   17494:	movt	r0, #2
   17498:	bl	12a64 <__assert_fail@plt>
   1749c:	ldr	r3, [pc, #2876]	; 17fe0 <test_sort_find@@Base+0x102c>
   174a0:	movw	r2, #699	; 0x2bb
   174a4:	movw	r1, #20464	; 0x4ff0
   174a8:	movt	r1, #2
   174ac:	movw	r0, #20764	; 0x511c
   174b0:	movt	r0, #2
   174b4:	bl	12a64 <__assert_fail@plt>
   174b8:	ldr	r3, [pc, #2844]	; 17fdc <test_sort_find@@Base+0x1028>
   174bc:	movw	r2, #693	; 0x2b5
   174c0:	movw	r1, #20464	; 0x4ff0
   174c4:	movt	r1, #2
   174c8:	movw	r0, #20708	; 0x50e4
   174cc:	movt	r0, #2
   174d0:	bl	12a64 <__assert_fail@plt>
   174d4:	ldr	r3, [pc, #2820]	; 17fe0 <test_sort_find@@Base+0x102c>
   174d8:	movw	r2, #699	; 0x2bb
   174dc:	movw	r1, #20464	; 0x4ff0
   174e0:	movt	r1, #2
   174e4:	movw	r0, #20564	; 0x5054
   174e8:	movt	r0, #2
   174ec:	bl	12a64 <__assert_fail@plt>
   174f0:	ldr	r3, [pc, #2792]	; 17fe0 <test_sort_find@@Base+0x102c>
   174f4:	movw	r2, #699	; 0x2bb
   174f8:	movw	r1, #20464	; 0x4ff0
   174fc:	movt	r1, #2
   17500:	movw	r0, #20764	; 0x511c
   17504:	movt	r0, #2
   17508:	bl	12a64 <__assert_fail@plt>
   1750c:	mov	r5, #0
   17510:	cmp	r6, r5
   17514:	movhi	r4, r7
   17518:	b	17648 <test_sort_find@@Base+0x694>
   1751c:	ldr	r3, [pc, #2744]	; 17fdc <test_sort_find@@Base+0x1028>
   17520:	movw	r2, #693	; 0x2b5
   17524:	movw	r1, #20464	; 0x4ff0
   17528:	movt	r1, #2
   1752c:	movw	r0, #20708	; 0x50e4
   17530:	movt	r0, #2
   17534:	bl	12a64 <__assert_fail@plt>
   17538:	ldr	r3, [pc, #2720]	; 17fe0 <test_sort_find@@Base+0x102c>
   1753c:	movw	r2, #699	; 0x2bb
   17540:	movw	r1, #20464	; 0x4ff0
   17544:	movt	r1, #2
   17548:	movw	r0, #20564	; 0x5054
   1754c:	movt	r0, #2
   17550:	bl	12a64 <__assert_fail@plt>
   17554:	ldr	r3, [pc, #2692]	; 17fe0 <test_sort_find@@Base+0x102c>
   17558:	movw	r2, #699	; 0x2bb
   1755c:	movw	r1, #20464	; 0x4ff0
   17560:	movt	r1, #2
   17564:	movw	r0, #20764	; 0x511c
   17568:	movt	r0, #2
   1756c:	bl	12a64 <__assert_fail@plt>
   17570:	ldr	r3, [pc, #2660]	; 17fdc <test_sort_find@@Base+0x1028>
   17574:	movw	r2, #693	; 0x2b5
   17578:	movw	r1, #20464	; 0x4ff0
   1757c:	movt	r1, #2
   17580:	movw	r0, #20708	; 0x50e4
   17584:	movt	r0, #2
   17588:	bl	12a64 <__assert_fail@plt>
   1758c:	ldr	r3, [pc, #2636]	; 17fe0 <test_sort_find@@Base+0x102c>
   17590:	movw	r2, #699	; 0x2bb
   17594:	movw	r1, #20464	; 0x4ff0
   17598:	movt	r1, #2
   1759c:	movw	r0, #20564	; 0x5054
   175a0:	movt	r0, #2
   175a4:	bl	12a64 <__assert_fail@plt>
   175a8:	ldr	r3, [pc, #2608]	; 17fe0 <test_sort_find@@Base+0x102c>
   175ac:	movw	r2, #699	; 0x2bb
   175b0:	movw	r1, #20464	; 0x4ff0
   175b4:	movt	r1, #2
   175b8:	movw	r0, #20764	; 0x511c
   175bc:	movt	r0, #2
   175c0:	bl	12a64 <__assert_fail@plt>
   175c4:	mov	r7, #0
   175c8:	cmp	r8, r7
   175cc:	bhi	1760c <test_sort_find@@Base+0x658>
   175d0:	ldr	r3, [sp, #4]
   175d4:	sub	r3, r3, #1
   175d8:	str	r3, [sp, #4]
   175dc:	ldr	r2, [sp, #8]
   175e0:	sub	r2, r2, #2
   175e4:	str	r2, [sp, #8]
   175e8:	cmn	r3, #1
   175ec:	beq	1771c <test_sort_find@@Base+0x768>
   175f0:	ldr	r4, [sp, #8]
   175f4:	cmp	r9, r4
   175f8:	bcc	175d0 <test_sort_find@@Base+0x61c>
   175fc:	ldr	sl, [sp, #4]
   17600:	b	17640 <test_sort_find@@Base+0x68c>
   17604:	cmp	r0, #0
   17608:	bge	175d0 <test_sort_find@@Base+0x61c>
   1760c:	sub	r3, sl, r4
   17610:	lsl	r3, r3, #2
   17614:	sub	r5, r5, r3
   17618:	ldr	r2, [sp, #16]
   1761c:	str	r5, [fp, r2]
   17620:	add	r6, r3, r6
   17624:	ldr	r3, [sp, #20]
   17628:	str	r6, [fp, r3]
   1762c:	lsl	r3, r4, #1
   17630:	mov	sl, r4
   17634:	cmp	r9, r3
   17638:	bcc	175d0 <test_sort_find@@Base+0x61c>
   1763c:	mov	r4, r3
   17640:	cmp	r9, r4
   17644:	bhi	1738c <test_sort_find@@Base+0x3d8>
   17648:	lsl	r3, sl, #2
   1764c:	str	r3, [sp, #16]
   17650:	add	r3, fp, r3
   17654:	ldr	r2, [fp, #-4]
   17658:	cmp	r2, sl
   1765c:	bls	1751c <test_sort_find@@Base+0x568>
   17660:	ldr	r6, [fp, sl, lsl #2]
   17664:	adds	r1, r3, r6
   17668:	beq	17538 <test_sort_find@@Base+0x584>
   1766c:	ldr	r3, [r3, r6]
   17670:	sub	r3, r1, r3
   17674:	ldrh	r0, [r3]
   17678:	cmp	r0, #11
   1767c:	bls	17554 <test_sort_find@@Base+0x5a0>
   17680:	ldrh	r3, [r3, #10]
   17684:	cmp	r3, #0
   17688:	beq	17554 <test_sort_find@@Base+0x5a0>
   1768c:	add	ip, r1, r3
   17690:	ldr	r0, [r1, r3]
   17694:	add	r0, r0, #4
   17698:	add	r0, ip, r0
   1769c:	lsl	r3, r4, #2
   176a0:	str	r3, [sp, #20]
   176a4:	add	r3, fp, r3
   176a8:	cmp	r4, r2
   176ac:	bcs	17570 <test_sort_find@@Base+0x5bc>
   176b0:	ldr	r5, [fp, r4, lsl #2]
   176b4:	adds	r2, r3, r5
   176b8:	beq	1758c <test_sort_find@@Base+0x5d8>
   176bc:	ldr	r3, [r3, r5]
   176c0:	sub	r3, r2, r3
   176c4:	ldrh	r1, [r3]
   176c8:	cmp	r1, #11
   176cc:	bls	175a8 <test_sort_find@@Base+0x5f4>
   176d0:	ldrh	r3, [r3, #10]
   176d4:	cmp	r3, #0
   176d8:	beq	175a8 <test_sort_find@@Base+0x5f4>
   176dc:	add	r1, r2, r3
   176e0:	ldr	r3, [r2, r3]
   176e4:	add	r3, r3, #4
   176e8:	adds	r1, r1, r3
   176ec:	moveq	r8, #0
   176f0:	ldrne	r8, [r1, #-4]
   176f4:	cmp	r0, #0
   176f8:	beq	175c4 <test_sort_find@@Base+0x610>
   176fc:	ldr	r7, [r0, #-4]
   17700:	cmp	r8, r7
   17704:	movcc	r2, r8
   17708:	movcs	r2, r7
   1770c:	bl	12a4c <strncmp@plt>
   17710:	cmp	r0, #0
   17714:	bne	17604 <test_sort_find@@Base+0x650>
   17718:	b	175c8 <test_sort_find@@Base+0x614>
   1771c:	cmp	r9, #0
   17720:	beq	17af4 <test_sort_find@@Base+0xb40>
   17724:	ldr	r3, [sp, #32]
   17728:	add	r3, fp, r3, lsl #2
   1772c:	add	r2, fp, #4
   17730:	str	r2, [sp, #32]
   17734:	mov	r2, #0
   17738:	str	r2, [sp, #4]
   1773c:	b	179a0 <test_sort_find@@Base+0x9ec>
   17740:	lsl	r3, r4, #2
   17744:	add	r0, fp, r3
   17748:	ldr	ip, [fp, #-4]
   1774c:	cmp	ip, r4
   17750:	bls	17818 <test_sort_find@@Base+0x864>
   17754:	ldr	r2, [fp, r4, lsl #2]
   17758:	adds	r1, r0, r2
   1775c:	beq	17834 <test_sort_find@@Base+0x880>
   17760:	ldr	r2, [r0, r2]
   17764:	sub	r2, r1, r2
   17768:	ldrh	r0, [r2]
   1776c:	cmp	r0, #11
   17770:	bls	17850 <test_sort_find@@Base+0x89c>
   17774:	ldrh	r2, [r2, #10]
   17778:	cmp	r2, #0
   1777c:	beq	17850 <test_sort_find@@Base+0x89c>
   17780:	add	lr, r1, r2
   17784:	ldr	r0, [r1, r2]
   17788:	add	r0, r0, #4
   1778c:	add	r0, lr, r0
   17790:	add	r7, r4, #1
   17794:	add	r3, r3, #4
   17798:	add	r1, fp, r3
   1779c:	cmp	r7, ip
   177a0:	bcs	1786c <test_sort_find@@Base+0x8b8>
   177a4:	ldr	r3, [fp, r3]
   177a8:	adds	r2, r1, r3
   177ac:	beq	17888 <test_sort_find@@Base+0x8d4>
   177b0:	ldr	r3, [r1, r3]
   177b4:	sub	r3, r2, r3
   177b8:	ldrh	r1, [r3]
   177bc:	cmp	r1, #11
   177c0:	bls	178ac <test_sort_find@@Base+0x8f8>
   177c4:	ldrh	r3, [r3, #10]
   177c8:	cmp	r3, #0
   177cc:	beq	178ac <test_sort_find@@Base+0x8f8>
   177d0:	add	r1, r2, r3
   177d4:	ldr	r3, [r2, r3]
   177d8:	add	r3, r3, #4
   177dc:	adds	r1, r1, r3
   177e0:	beq	178a4 <test_sort_find@@Base+0x8f0>
   177e4:	ldr	r5, [r1, #-4]
   177e8:	cmp	r0, #0
   177ec:	beq	178c8 <test_sort_find@@Base+0x914>
   177f0:	ldr	r6, [r0, #-4]
   177f4:	cmp	r5, r6
   177f8:	movcc	r2, r5
   177fc:	movcs	r2, r6
   17800:	bl	12a4c <strncmp@plt>
   17804:	cmp	r0, #0
   17808:	beq	178cc <test_sort_find@@Base+0x918>
   1780c:	cmp	r0, #0
   17810:	movlt	r4, r7
   17814:	b	17a20 <test_sort_find@@Base+0xa6c>
   17818:	ldr	r3, [pc, #1980]	; 17fdc <test_sort_find@@Base+0x1028>
   1781c:	movw	r2, #693	; 0x2b5
   17820:	movw	r1, #20464	; 0x4ff0
   17824:	movt	r1, #2
   17828:	movw	r0, #20708	; 0x50e4
   1782c:	movt	r0, #2
   17830:	bl	12a64 <__assert_fail@plt>
   17834:	ldr	r3, [pc, #1956]	; 17fe0 <test_sort_find@@Base+0x102c>
   17838:	movw	r2, #699	; 0x2bb
   1783c:	movw	r1, #20464	; 0x4ff0
   17840:	movt	r1, #2
   17844:	movw	r0, #20564	; 0x5054
   17848:	movt	r0, #2
   1784c:	bl	12a64 <__assert_fail@plt>
   17850:	ldr	r3, [pc, #1928]	; 17fe0 <test_sort_find@@Base+0x102c>
   17854:	movw	r2, #699	; 0x2bb
   17858:	movw	r1, #20464	; 0x4ff0
   1785c:	movt	r1, #2
   17860:	movw	r0, #20764	; 0x511c
   17864:	movt	r0, #2
   17868:	bl	12a64 <__assert_fail@plt>
   1786c:	ldr	r3, [pc, #1896]	; 17fdc <test_sort_find@@Base+0x1028>
   17870:	movw	r2, #693	; 0x2b5
   17874:	movw	r1, #20464	; 0x4ff0
   17878:	movt	r1, #2
   1787c:	movw	r0, #20708	; 0x50e4
   17880:	movt	r0, #2
   17884:	bl	12a64 <__assert_fail@plt>
   17888:	ldr	r3, [pc, #1872]	; 17fe0 <test_sort_find@@Base+0x102c>
   1788c:	movw	r2, #699	; 0x2bb
   17890:	movw	r1, #20464	; 0x4ff0
   17894:	movt	r1, #2
   17898:	movw	r0, #20564	; 0x5054
   1789c:	movt	r0, #2
   178a0:	bl	12a64 <__assert_fail@plt>
   178a4:	ldr	r5, [sp, #4]
   178a8:	b	177e8 <test_sort_find@@Base+0x834>
   178ac:	ldr	r3, [pc, #1836]	; 17fe0 <test_sort_find@@Base+0x102c>
   178b0:	movw	r2, #699	; 0x2bb
   178b4:	movw	r1, #20464	; 0x4ff0
   178b8:	movt	r1, #2
   178bc:	movw	r0, #20764	; 0x511c
   178c0:	movt	r0, #2
   178c4:	bl	12a64 <__assert_fail@plt>
   178c8:	ldr	r6, [sp, #4]
   178cc:	cmp	r6, r5
   178d0:	movcc	r4, r7
   178d4:	b	17a20 <test_sort_find@@Base+0xa6c>
   178d8:	ldr	r3, [pc, #1788]	; 17fdc <test_sort_find@@Base+0x1028>
   178dc:	movw	r2, #693	; 0x2b5
   178e0:	movw	r1, #20464	; 0x4ff0
   178e4:	movt	r1, #2
   178e8:	movw	r0, #20708	; 0x50e4
   178ec:	movt	r0, #2
   178f0:	bl	12a64 <__assert_fail@plt>
   178f4:	ldr	r3, [pc, #1764]	; 17fe0 <test_sort_find@@Base+0x102c>
   178f8:	movw	r2, #699	; 0x2bb
   178fc:	movw	r1, #20464	; 0x4ff0
   17900:	movt	r1, #2
   17904:	movw	r0, #20564	; 0x5054
   17908:	movt	r0, #2
   1790c:	bl	12a64 <__assert_fail@plt>
   17910:	ldr	r3, [pc, #1736]	; 17fe0 <test_sort_find@@Base+0x102c>
   17914:	movw	r2, #699	; 0x2bb
   17918:	movw	r1, #20464	; 0x4ff0
   1791c:	movt	r1, #2
   17920:	movw	r0, #20764	; 0x511c
   17924:	movt	r0, #2
   17928:	bl	12a64 <__assert_fail@plt>
   1792c:	ldr	r3, [pc, #1704]	; 17fdc <test_sort_find@@Base+0x1028>
   17930:	movw	r2, #693	; 0x2b5
   17934:	movw	r1, #20464	; 0x4ff0
   17938:	movt	r1, #2
   1793c:	movw	r0, #20708	; 0x50e4
   17940:	movt	r0, #2
   17944:	bl	12a64 <__assert_fail@plt>
   17948:	ldr	r3, [pc, #1680]	; 17fe0 <test_sort_find@@Base+0x102c>
   1794c:	movw	r2, #699	; 0x2bb
   17950:	movw	r1, #20464	; 0x4ff0
   17954:	movt	r1, #2
   17958:	movw	r0, #20564	; 0x5054
   1795c:	movt	r0, #2
   17960:	bl	12a64 <__assert_fail@plt>
   17964:	ldr	r8, [sp, #4]
   17968:	b	17acc <test_sort_find@@Base+0xb18>
   1796c:	ldr	r3, [pc, #1644]	; 17fe0 <test_sort_find@@Base+0x102c>
   17970:	movw	r2, #699	; 0x2bb
   17974:	movw	r1, #20464	; 0x4ff0
   17978:	movt	r1, #2
   1797c:	movw	r0, #20764	; 0x511c
   17980:	movt	r0, #2
   17984:	bl	12a64 <__assert_fail@plt>
   17988:	ldr	r7, [sp, #4]
   1798c:	cmp	r8, r7
   17990:	bhi	179e4 <test_sort_find@@Base+0xa30>
   17994:	ldr	r3, [sp, #8]
   17998:	cmp	r9, #0
   1799c:	beq	17af4 <test_sort_find@@Base+0xb40>
   179a0:	sub	r2, r3, #4
   179a4:	str	r2, [sp, #8]
   179a8:	ldr	r0, [sp, #32]
   179ac:	sub	r2, r0, r3
   179b0:	ldr	r1, [fp]
   179b4:	add	r2, r2, r1
   179b8:	sub	r0, r3, r0
   179bc:	ldr	r1, [r3, #-4]
   179c0:	add	r1, r1, r0
   179c4:	str	r1, [fp]
   179c8:	str	r2, [r3, #-4]
   179cc:	sub	r9, r9, #1
   179d0:	mov	sl, #0
   179d4:	mov	r4, sl
   179d8:	b	17a18 <test_sort_find@@Base+0xa64>
   179dc:	cmp	r0, #0
   179e0:	bge	17994 <test_sort_find@@Base+0x9e0>
   179e4:	sub	r3, sl, r4
   179e8:	lsl	r3, r3, #2
   179ec:	sub	r5, r5, r3
   179f0:	ldr	r2, [sp, #16]
   179f4:	str	r5, [fp, r2]
   179f8:	add	r6, r3, r6
   179fc:	ldr	r3, [sp, #20]
   17a00:	str	r6, [fp, r3]
   17a04:	lsl	r3, r4, #1
   17a08:	mov	sl, r4
   17a0c:	cmp	r9, r3
   17a10:	bcc	17994 <test_sort_find@@Base+0x9e0>
   17a14:	mov	r4, r3
   17a18:	cmp	r9, r4
   17a1c:	bhi	17740 <test_sort_find@@Base+0x78c>
   17a20:	lsl	r3, sl, #2
   17a24:	str	r3, [sp, #16]
   17a28:	add	r3, fp, r3
   17a2c:	ldr	r2, [fp, #-4]
   17a30:	cmp	r2, sl
   17a34:	bls	178d8 <test_sort_find@@Base+0x924>
   17a38:	ldr	r6, [fp, sl, lsl #2]
   17a3c:	adds	r1, r3, r6
   17a40:	beq	178f4 <test_sort_find@@Base+0x940>
   17a44:	ldr	r3, [r3, r6]
   17a48:	sub	r3, r1, r3
   17a4c:	ldrh	r0, [r3]
   17a50:	cmp	r0, #11
   17a54:	bls	17910 <test_sort_find@@Base+0x95c>
   17a58:	ldrh	r3, [r3, #10]
   17a5c:	cmp	r3, #0
   17a60:	beq	17910 <test_sort_find@@Base+0x95c>
   17a64:	add	ip, r1, r3
   17a68:	ldr	r0, [r1, r3]
   17a6c:	add	r0, r0, #4
   17a70:	add	r0, ip, r0
   17a74:	lsl	r3, r4, #2
   17a78:	str	r3, [sp, #20]
   17a7c:	add	r3, fp, r3
   17a80:	cmp	r4, r2
   17a84:	bcs	1792c <test_sort_find@@Base+0x978>
   17a88:	ldr	r5, [fp, r4, lsl #2]
   17a8c:	adds	r2, r3, r5
   17a90:	beq	17948 <test_sort_find@@Base+0x994>
   17a94:	ldr	r3, [r3, r5]
   17a98:	sub	r3, r2, r3
   17a9c:	ldrh	r1, [r3]
   17aa0:	cmp	r1, #11
   17aa4:	bls	1796c <test_sort_find@@Base+0x9b8>
   17aa8:	ldrh	r3, [r3, #10]
   17aac:	cmp	r3, #0
   17ab0:	beq	1796c <test_sort_find@@Base+0x9b8>
   17ab4:	add	r1, r2, r3
   17ab8:	ldr	r3, [r2, r3]
   17abc:	add	r3, r3, #4
   17ac0:	adds	r1, r1, r3
   17ac4:	beq	17964 <test_sort_find@@Base+0x9b0>
   17ac8:	ldr	r8, [r1, #-4]
   17acc:	cmp	r0, #0
   17ad0:	beq	17988 <test_sort_find@@Base+0x9d4>
   17ad4:	ldr	r7, [r0, #-4]
   17ad8:	cmp	r8, r7
   17adc:	movcc	r2, r8
   17ae0:	movcs	r2, r7
   17ae4:	bl	12a4c <strncmp@plt>
   17ae8:	cmp	r0, #0
   17aec:	bne	179dc <test_sort_find@@Base+0xa28>
   17af0:	b	1798c <test_sort_find@@Base+0x9d8>
   17af4:	movw	r3, #36976	; 0x9070
   17af8:	movt	r3, #3
   17afc:	ldr	r3, [r3]
   17b00:	ldr	r2, [sp, #44]	; 0x2c
   17b04:	ldr	r1, [sp, #12]
   17b08:	movw	r0, #25392	; 0x6330
   17b0c:	movt	r0, #2
   17b10:	bl	13384 <_start@@Base+0x914>
   17b14:	ldr	r3, [fp, #-4]
   17b18:	cmp	r3, #5
   17b1c:	bne	17c60 <test_sort_find@@Base+0xcac>
   17b20:	ldr	r3, [sp, #24]
   17b24:	ldr	r2, [sp, #28]
   17b28:	ldr	r0, [r3, r2]
   17b2c:	add	r0, fp, r0
   17b30:	bl	12f74 <_start@@Base+0x504>
   17b34:	movw	r1, #25348	; 0x6304
   17b38:	movt	r1, #2
   17b3c:	bl	12968 <strcmp@plt>
   17b40:	cmp	r0, #0
   17b44:	bne	17c9c <test_sort_find@@Base+0xce8>
   17b48:	mov	r1, #1
   17b4c:	mov	r0, fp
   17b50:	bl	12e50 <_start@@Base+0x3e0>
   17b54:	mov	r4, r0
   17b58:	bl	12f74 <_start@@Base+0x504>
   17b5c:	movw	r1, #23624	; 0x5c48
   17b60:	movt	r1, #2
   17b64:	bl	12968 <strcmp@plt>
   17b68:	cmp	r0, #0
   17b6c:	bne	17cb4 <test_sort_find@@Base+0xd00>
   17b70:	mov	r1, #2
   17b74:	mov	r0, fp
   17b78:	bl	12e50 <_start@@Base+0x3e0>
   17b7c:	mov	r5, r0
   17b80:	bl	12f74 <_start@@Base+0x504>
   17b84:	movw	r1, #23624	; 0x5c48
   17b88:	movt	r1, #2
   17b8c:	bl	12968 <strcmp@plt>
   17b90:	cmp	r0, #0
   17b94:	bne	17ccc <test_sort_find@@Base+0xd18>
   17b98:	mov	r1, #3
   17b9c:	mov	r0, fp
   17ba0:	bl	12e50 <_start@@Base+0x3e0>
   17ba4:	bl	12f74 <_start@@Base+0x504>
   17ba8:	movw	r1, #23580	; 0x5c1c
   17bac:	movt	r1, #2
   17bb0:	bl	12968 <strcmp@plt>
   17bb4:	cmp	r0, #0
   17bb8:	bne	17ce4 <test_sort_find@@Base+0xd30>
   17bbc:	mov	r1, #4
   17bc0:	mov	r0, fp
   17bc4:	bl	12e50 <_start@@Base+0x3e0>
   17bc8:	bl	12f74 <_start@@Base+0x504>
   17bcc:	movw	r1, #23480	; 0x5bb8
   17bd0:	movt	r1, #2
   17bd4:	bl	12968 <strcmp@plt>
   17bd8:	cmp	r0, #0
   17bdc:	bne	17cfc <test_sort_find@@Base+0xd48>
   17be0:	cmp	r4, r5
   17be4:	beq	17d14 <test_sort_find@@Base+0xd60>
   17be8:	movw	r1, #23580	; 0x5c1c
   17bec:	movt	r1, #2
   17bf0:	mov	r0, fp
   17bf4:	bl	1450c <_start@@Base+0x1a9c>
   17bf8:	cmp	r0, #3
   17bfc:	moveq	r7, #4
   17c00:	moveq	r5, #0
   17c04:	movweq	r6, #25732	; 0x6484
   17c08:	movteq	r6, #2
   17c0c:	bne	17d2c <test_sort_find@@Base+0xd78>
   17c10:	sub	r4, r7, r5
   17c14:	add	r4, r5, r4, lsr #1
   17c18:	add	r3, fp, r4, lsl #2
   17c1c:	cmp	r4, #4
   17c20:	bhi	17d44 <test_sort_find@@Base+0xd90>
   17c24:	ldr	r2, [fp, r4, lsl #2]
   17c28:	adds	r1, r3, r2
   17c2c:	beq	17d60 <test_sort_find@@Base+0xdac>
   17c30:	ldr	r3, [r3, r2]
   17c34:	sub	r3, r1, r3
   17c38:	ldrh	r2, [r3]
   17c3c:	cmp	r2, #11
   17c40:	bhi	17dc8 <test_sort_find@@Base+0xe14>
   17c44:	ldr	r3, [pc, #916]	; 17fe0 <test_sort_find@@Base+0x102c>
   17c48:	movw	r2, #699	; 0x2bb
   17c4c:	movw	r1, #20464	; 0x4ff0
   17c50:	movt	r1, #2
   17c54:	movw	r0, #20764	; 0x511c
   17c58:	movt	r0, #2
   17c5c:	bl	12a64 <__assert_fail@plt>
   17c60:	movw	r0, #25416	; 0x6348
   17c64:	movt	r0, #2
   17c68:	bl	129c8 <puts@plt>
   17c6c:	mvn	r3, #0
   17c70:	str	r3, [sp, #36]	; 0x24
   17c74:	ldr	r0, [sp, #12]
   17c78:	bl	22abc <flatcc_builder_aligned_free@@Base>
   17c7c:	ldr	r0, [sp, #36]	; 0x24
   17c80:	add	sp, sp, #52	; 0x34
   17c84:	ldrd	r4, [sp]
   17c88:	ldrd	r6, [sp, #8]
   17c8c:	ldrd	r8, [sp, #16]
   17c90:	ldrd	sl, [sp, #24]
   17c94:	add	sp, sp, #32
   17c98:	pop	{pc}		; (ldr pc, [sp], #4)
   17c9c:	movw	r0, #25456	; 0x6370
   17ca0:	movt	r0, #2
   17ca4:	bl	129c8 <puts@plt>
   17ca8:	mvn	r3, #0
   17cac:	str	r3, [sp, #36]	; 0x24
   17cb0:	b	17c74 <test_sort_find@@Base+0xcc0>
   17cb4:	movw	r0, #25488	; 0x6390
   17cb8:	movt	r0, #2
   17cbc:	bl	129c8 <puts@plt>
   17cc0:	mvn	r3, #0
   17cc4:	str	r3, [sp, #36]	; 0x24
   17cc8:	b	17c74 <test_sort_find@@Base+0xcc0>
   17ccc:	movw	r0, #25520	; 0x63b0
   17cd0:	movt	r0, #2
   17cd4:	bl	129c8 <puts@plt>
   17cd8:	mvn	r3, #0
   17cdc:	str	r3, [sp, #36]	; 0x24
   17ce0:	b	17c74 <test_sort_find@@Base+0xcc0>
   17ce4:	movw	r0, #25552	; 0x63d0
   17ce8:	movt	r0, #2
   17cec:	bl	129c8 <puts@plt>
   17cf0:	mvn	r3, #0
   17cf4:	str	r3, [sp, #36]	; 0x24
   17cf8:	b	17c74 <test_sort_find@@Base+0xcc0>
   17cfc:	movw	r0, #25584	; 0x63f0
   17d00:	movt	r0, #2
   17d04:	bl	129c8 <puts@plt>
   17d08:	mvn	r3, #0
   17d0c:	str	r3, [sp, #36]	; 0x24
   17d10:	b	17c74 <test_sort_find@@Base+0xcc0>
   17d14:	movw	r0, #25616	; 0x6410
   17d18:	movt	r0, #2
   17d1c:	bl	129c8 <puts@plt>
   17d20:	mvn	r3, #0
   17d24:	str	r3, [sp, #36]	; 0x24
   17d28:	b	17c74 <test_sort_find@@Base+0xcc0>
   17d2c:	movw	r0, #25688	; 0x6458
   17d30:	movt	r0, #2
   17d34:	bl	129c8 <puts@plt>
   17d38:	mvn	r3, #0
   17d3c:	str	r3, [sp, #36]	; 0x24
   17d40:	b	17c74 <test_sort_find@@Base+0xcc0>
   17d44:	ldr	r3, [pc, #656]	; 17fdc <test_sort_find@@Base+0x1028>
   17d48:	movw	r2, #693	; 0x2b5
   17d4c:	movw	r1, #20464	; 0x4ff0
   17d50:	movt	r1, #2
   17d54:	movw	r0, #20708	; 0x50e4
   17d58:	movt	r0, #2
   17d5c:	bl	12a64 <__assert_fail@plt>
   17d60:	ldr	r3, [pc, #632]	; 17fe0 <test_sort_find@@Base+0x102c>
   17d64:	movw	r2, #699	; 0x2bb
   17d68:	movw	r1, #20464	; 0x4ff0
   17d6c:	movt	r1, #2
   17d70:	movw	r0, #20564	; 0x5054
   17d74:	movt	r0, #2
   17d78:	bl	12a64 <__assert_fail@plt>
   17d7c:	cmp	r8, #4
   17d80:	bls	17e10 <test_sort_find@@Base+0xe5c>
   17d84:	cmp	r5, r4
   17d88:	bcs	17e20 <test_sort_find@@Base+0xe6c>
   17d8c:	sub	r2, r4, r5
   17d90:	add	r2, r5, r2, lsr #1
   17d94:	add	r0, fp, r2, lsl #2
   17d98:	cmp	r2, #4
   17d9c:	bhi	17d44 <test_sort_find@@Base+0xd90>
   17da0:	ldr	r3, [fp, r2, lsl #2]
   17da4:	adds	r1, r0, r3
   17da8:	beq	17d60 <test_sort_find@@Base+0xdac>
   17dac:	ldr	r3, [r0, r3]
   17db0:	sub	r3, r1, r3
   17db4:	mov	r7, r4
   17db8:	ldrh	r0, [r3]
   17dbc:	cmp	r0, #11
   17dc0:	bls	17c44 <test_sort_find@@Base+0xc90>
   17dc4:	mov	r4, r2
   17dc8:	ldrh	r3, [r3, #10]
   17dcc:	cmp	r3, #0
   17dd0:	beq	17c44 <test_sort_find@@Base+0xc90>
   17dd4:	add	r0, r1, r3
   17dd8:	ldr	r3, [r1, r3]
   17ddc:	add	r3, r3, #4
   17de0:	adds	r0, r0, r3
   17de4:	beq	17e10 <test_sort_find@@Base+0xe5c>
   17de8:	ldr	r8, [r0, #-4]
   17dec:	cmp	r8, #5
   17df0:	movcc	r2, r8
   17df4:	movcs	r2, #5
   17df8:	mov	r1, r6
   17dfc:	bl	12a4c <strncmp@plt>
   17e00:	cmp	r0, #0
   17e04:	beq	17d7c <test_sort_find@@Base+0xdc8>
   17e08:	cmp	r0, #0
   17e0c:	bge	17d84 <test_sort_find@@Base+0xdd0>
   17e10:	add	r5, r4, #1
   17e14:	cmp	r5, r7
   17e18:	bcc	17c10 <test_sort_find@@Base+0xc5c>
   17e1c:	mov	r4, r7
   17e20:	cmp	r4, r5
   17e24:	beq	17e40 <test_sort_find@@Base+0xe8c>
   17e28:	movw	r0, #25740	; 0x648c
   17e2c:	movt	r0, #2
   17e30:	bl	129c8 <puts@plt>
   17e34:	mvn	r3, #0
   17e38:	str	r3, [sp, #36]	; 0x24
   17e3c:	b	17c74 <test_sort_find@@Base+0xcc0>
   17e40:	mov	r1, r5
   17e44:	mov	r0, fp
   17e48:	bl	12e50 <_start@@Base+0x3e0>
   17e4c:	bl	12f74 <_start@@Base+0x504>
   17e50:	mov	r2, #5
   17e54:	movw	r1, #25732	; 0x6484
   17e58:	movt	r1, #2
   17e5c:	bl	13e38 <_start@@Base+0x13c8>
   17e60:	cmp	r0, #0
   17e64:	bne	17e28 <test_sort_find@@Base+0xe74>
   17e68:	cmp	r5, #3
   17e6c:	moveq	r7, #4
   17e70:	moveq	r5, #0
   17e74:	movweq	r6, #25792	; 0x64c0
   17e78:	movteq	r6, #2
   17e7c:	bne	17e28 <test_sort_find@@Base+0xe74>
   17e80:	sub	r4, r7, r5
   17e84:	add	r4, r5, r4, lsr #1
   17e88:	add	r2, fp, r4, lsl #2
   17e8c:	cmp	r4, #4
   17e90:	bhi	17ed0 <test_sort_find@@Base+0xf1c>
   17e94:	ldr	r3, [fp, r4, lsl #2]
   17e98:	adds	r1, r2, r3
   17e9c:	beq	17eec <test_sort_find@@Base+0xf38>
   17ea0:	ldr	r3, [r2, r3]
   17ea4:	sub	r3, r1, r3
   17ea8:	ldrh	r2, [r3]
   17eac:	cmp	r2, #11
   17eb0:	bhi	17f54 <test_sort_find@@Base+0xfa0>
   17eb4:	ldr	r3, [pc, #292]	; 17fe0 <test_sort_find@@Base+0x102c>
   17eb8:	movw	r2, #699	; 0x2bb
   17ebc:	movw	r1, #20464	; 0x4ff0
   17ec0:	movt	r1, #2
   17ec4:	movw	r0, #20764	; 0x511c
   17ec8:	movt	r0, #2
   17ecc:	bl	12a64 <__assert_fail@plt>
   17ed0:	ldr	r3, [pc, #260]	; 17fdc <test_sort_find@@Base+0x1028>
   17ed4:	movw	r2, #693	; 0x2b5
   17ed8:	movw	r1, #20464	; 0x4ff0
   17edc:	movt	r1, #2
   17ee0:	movw	r0, #20708	; 0x50e4
   17ee4:	movt	r0, #2
   17ee8:	bl	12a64 <__assert_fail@plt>
   17eec:	ldr	r3, [pc, #236]	; 17fe0 <test_sort_find@@Base+0x102c>
   17ef0:	movw	r2, #699	; 0x2bb
   17ef4:	movw	r1, #20464	; 0x4ff0
   17ef8:	movt	r1, #2
   17efc:	movw	r0, #20564	; 0x5054
   17f00:	movt	r0, #2
   17f04:	bl	12a64 <__assert_fail@plt>
   17f08:	cmp	r8, #4
   17f0c:	bls	17f9c <test_sort_find@@Base+0xfe8>
   17f10:	cmp	r5, r4
   17f14:	bcs	17fac <test_sort_find@@Base+0xff8>
   17f18:	sub	r2, r4, r5
   17f1c:	add	r2, r5, r2, lsr #1
   17f20:	add	r0, fp, r2, lsl #2
   17f24:	cmp	r2, #4
   17f28:	bhi	17ed0 <test_sort_find@@Base+0xf1c>
   17f2c:	ldr	r3, [fp, r2, lsl #2]
   17f30:	adds	r1, r0, r3
   17f34:	beq	17eec <test_sort_find@@Base+0xf38>
   17f38:	ldr	r3, [r0, r3]
   17f3c:	sub	r3, r1, r3
   17f40:	mov	r7, r4
   17f44:	ldrh	r0, [r3]
   17f48:	cmp	r0, #11
   17f4c:	bls	17eb4 <test_sort_find@@Base+0xf00>
   17f50:	mov	r4, r2
   17f54:	ldrh	r3, [r3, #10]
   17f58:	cmp	r3, #0
   17f5c:	beq	17eb4 <test_sort_find@@Base+0xf00>
   17f60:	add	r0, r1, r3
   17f64:	ldr	r3, [r1, r3]
   17f68:	add	r3, r3, #4
   17f6c:	adds	r0, r0, r3
   17f70:	beq	17f9c <test_sort_find@@Base+0xfe8>
   17f74:	ldr	r8, [r0, #-4]
   17f78:	cmp	r8, #5
   17f7c:	movcc	r2, r8
   17f80:	movcs	r2, #5
   17f84:	mov	r1, r6
   17f88:	bl	12a4c <strncmp@plt>
   17f8c:	cmp	r0, #0
   17f90:	beq	17f08 <test_sort_find@@Base+0xf54>
   17f94:	cmp	r0, #0
   17f98:	bge	17f10 <test_sort_find@@Base+0xf5c>
   17f9c:	add	r5, r4, #1
   17fa0:	cmp	r5, r7
   17fa4:	bcc	17e80 <test_sort_find@@Base+0xecc>
   17fa8:	mov	r4, r7
   17fac:	cmp	r4, r5
   17fb0:	beq	17fe4 <test_sort_find@@Base+0x1030>
   17fb4:	movw	r0, #25800	; 0x64c8
   17fb8:	movt	r0, #2
   17fbc:	bl	129c8 <puts@plt>
   17fc0:	mvn	r3, #0
   17fc4:	str	r3, [sp, #36]	; 0x24
   17fc8:	b	17c74 <test_sort_find@@Base+0xcc0>
   17fcc:	andeq	r4, r2, r0, asr #20
   17fd0:	andeq	r4, r2, r4, asr #20
   17fd4:	strdeq	r4, [r2], -r0
   17fd8:	andeq	r4, r2, r8, lsl #23
   17fdc:	andeq	r4, r2, ip, lsl r9
   17fe0:	andeq	r4, r2, ip, ror r9
   17fe4:	mov	r1, r5
   17fe8:	mov	r0, fp
   17fec:	bl	12e50 <_start@@Base+0x3e0>
   17ff0:	bl	12f74 <_start@@Base+0x504>
   17ff4:	mov	r2, #5
   17ff8:	movw	r1, #25792	; 0x64c0
   17ffc:	movt	r1, #2
   18000:	bl	13e38 <_start@@Base+0x13c8>
   18004:	subs	r3, r0, #0
   18008:	str	r3, [sp, #36]	; 0x24
   1800c:	bne	17fb4 <test_sort_find@@Base+0x1000>
   18010:	cmp	r5, #3
   18014:	bne	17fb4 <test_sort_find@@Base+0x1000>
   18018:	movw	r1, #25836	; 0x64ec
   1801c:	movt	r1, #2
   18020:	mov	r0, fp
   18024:	bl	1450c <_start@@Base+0x1a9c>
   18028:	cmn	r0, #1
   1802c:	bne	18098 <test_sort_find@@Base+0x10e4>
   18030:	movw	r1, #25348	; 0x6304
   18034:	movt	r1, #2
   18038:	mov	r0, fp
   1803c:	bl	1450c <_start@@Base+0x1a9c>
   18040:	subs	r3, r0, #0
   18044:	str	r3, [sp, #16]
   18048:	bne	180b0 <test_sort_find@@Base+0x10fc>
   1804c:	movw	r1, #23624	; 0x5c48
   18050:	movt	r1, #2
   18054:	mov	r0, fp
   18058:	bl	1450c <_start@@Base+0x1a9c>
   1805c:	mov	r4, r0
   18060:	cmp	r0, #1
   18064:	bne	180c8 <test_sort_find@@Base+0x1114>
   18068:	movw	r1, #23480	; 0x5bb8
   1806c:	movt	r1, #2
   18070:	mov	r0, fp
   18074:	bl	1450c <_start@@Base+0x1a9c>
   18078:	str	r0, [sp, #24]
   1807c:	cmp	r0, #4
   18080:	bne	180f0 <test_sort_find@@Base+0x113c>
   18084:	mov	sl, #2
   18088:	ldr	r3, [sp, #16]
   1808c:	str	r3, [sp, #4]
   18090:	mov	r9, sl
   18094:	b	1837c <test_sort_find@@Base+0x13c8>
   18098:	movw	r0, #25844	; 0x64f4
   1809c:	movt	r0, #2
   180a0:	bl	129c8 <puts@plt>
   180a4:	mvn	r3, #0
   180a8:	str	r3, [sp, #36]	; 0x24
   180ac:	b	17c74 <test_sort_find@@Base+0xcc0>
   180b0:	movw	r0, #25868	; 0x650c
   180b4:	movt	r0, #2
   180b8:	bl	129c8 <puts@plt>
   180bc:	mvn	r3, #0
   180c0:	str	r3, [sp, #36]	; 0x24
   180c4:	b	17c74 <test_sort_find@@Base+0xcc0>
   180c8:	movw	r0, #26164	; 0x6634
   180cc:	movt	r0, #2
   180d0:	bl	129c8 <puts@plt>
   180d4:	mov	r1, r4
   180d8:	movw	r0, #25884	; 0x651c
   180dc:	movt	r0, #2
   180e0:	bl	12974 <printf@plt>
   180e4:	mvn	r3, #0
   180e8:	str	r3, [sp, #36]	; 0x24
   180ec:	b	17c74 <test_sort_find@@Base+0xcc0>
   180f0:	movw	r0, #25892	; 0x6524
   180f4:	movt	r0, #2
   180f8:	bl	129c8 <puts@plt>
   180fc:	ldr	r1, [sp, #24]
   18100:	movw	r0, #25884	; 0x651c
   18104:	movt	r0, #2
   18108:	bl	12974 <printf@plt>
   1810c:	mvn	r3, #0
   18110:	str	r3, [sp, #36]	; 0x24
   18114:	b	17c74 <test_sort_find@@Base+0xcc0>
   18118:	lsl	r3, r4, #2
   1811c:	add	r0, fp, r3
   18120:	ldr	ip, [fp, #-4]
   18124:	cmp	ip, r4
   18128:	bls	181f0 <test_sort_find@@Base+0x123c>
   1812c:	ldr	r2, [fp, r4, lsl #2]
   18130:	adds	r1, r0, r2
   18134:	beq	1820c <test_sort_find@@Base+0x1258>
   18138:	ldr	r2, [r0, r2]
   1813c:	sub	r2, r1, r2
   18140:	ldrh	r0, [r2]
   18144:	cmp	r0, #11
   18148:	bls	18228 <test_sort_find@@Base+0x1274>
   1814c:	ldrh	r2, [r2, #10]
   18150:	cmp	r2, #0
   18154:	beq	18228 <test_sort_find@@Base+0x1274>
   18158:	add	lr, r1, r2
   1815c:	ldr	r0, [r1, r2]
   18160:	add	r0, r0, #4
   18164:	add	r0, lr, r0
   18168:	add	r7, r4, #1
   1816c:	add	r3, r3, #4
   18170:	add	r1, fp, r3
   18174:	cmp	r7, ip
   18178:	bcs	18244 <test_sort_find@@Base+0x1290>
   1817c:	ldr	r3, [fp, r3]
   18180:	adds	r2, r1, r3
   18184:	beq	18260 <test_sort_find@@Base+0x12ac>
   18188:	ldr	r3, [r1, r3]
   1818c:	sub	r3, r2, r3
   18190:	ldrh	r1, [r3]
   18194:	cmp	r1, #11
   18198:	bls	18284 <test_sort_find@@Base+0x12d0>
   1819c:	ldrh	r3, [r3, #10]
   181a0:	cmp	r3, #0
   181a4:	beq	18284 <test_sort_find@@Base+0x12d0>
   181a8:	add	r1, r2, r3
   181ac:	ldr	r3, [r2, r3]
   181b0:	add	r3, r3, #4
   181b4:	adds	r1, r1, r3
   181b8:	beq	1827c <test_sort_find@@Base+0x12c8>
   181bc:	ldr	r5, [r1, #-4]
   181c0:	cmp	r0, #0
   181c4:	beq	182a0 <test_sort_find@@Base+0x12ec>
   181c8:	ldr	r6, [r0, #-4]
   181cc:	cmp	r5, r6
   181d0:	movcc	r2, r5
   181d4:	movcs	r2, r6
   181d8:	bl	12a4c <strncmp@plt>
   181dc:	cmp	r0, #0
   181e0:	beq	182a4 <test_sort_find@@Base+0x12f0>
   181e4:	cmp	r0, #0
   181e8:	movlt	r4, r7
   181ec:	b	183d4 <test_sort_find@@Base+0x1420>
   181f0:	ldr	r3, [pc, #-540]	; 17fdc <test_sort_find@@Base+0x1028>
   181f4:	movw	r2, #693	; 0x2b5
   181f8:	movw	r1, #20464	; 0x4ff0
   181fc:	movt	r1, #2
   18200:	movw	r0, #20708	; 0x50e4
   18204:	movt	r0, #2
   18208:	bl	12a64 <__assert_fail@plt>
   1820c:	ldr	r3, [pc, #-564]	; 17fe0 <test_sort_find@@Base+0x102c>
   18210:	movw	r2, #699	; 0x2bb
   18214:	movw	r1, #20464	; 0x4ff0
   18218:	movt	r1, #2
   1821c:	movw	r0, #20564	; 0x5054
   18220:	movt	r0, #2
   18224:	bl	12a64 <__assert_fail@plt>
   18228:	ldr	r3, [pc, #-592]	; 17fe0 <test_sort_find@@Base+0x102c>
   1822c:	movw	r2, #699	; 0x2bb
   18230:	movw	r1, #20464	; 0x4ff0
   18234:	movt	r1, #2
   18238:	movw	r0, #20764	; 0x511c
   1823c:	movt	r0, #2
   18240:	bl	12a64 <__assert_fail@plt>
   18244:	ldr	r3, [pc, #-624]	; 17fdc <test_sort_find@@Base+0x1028>
   18248:	movw	r2, #693	; 0x2b5
   1824c:	movw	r1, #20464	; 0x4ff0
   18250:	movt	r1, #2
   18254:	movw	r0, #20708	; 0x50e4
   18258:	movt	r0, #2
   1825c:	bl	12a64 <__assert_fail@plt>
   18260:	ldr	r3, [pc, #-648]	; 17fe0 <test_sort_find@@Base+0x102c>
   18264:	movw	r2, #699	; 0x2bb
   18268:	movw	r1, #20464	; 0x4ff0
   1826c:	movt	r1, #2
   18270:	movw	r0, #20564	; 0x5054
   18274:	movt	r0, #2
   18278:	bl	12a64 <__assert_fail@plt>
   1827c:	ldr	r5, [sp, #4]
   18280:	b	181c0 <test_sort_find@@Base+0x120c>
   18284:	ldr	r3, [pc, #-684]	; 17fe0 <test_sort_find@@Base+0x102c>
   18288:	movw	r2, #699	; 0x2bb
   1828c:	movw	r1, #20464	; 0x4ff0
   18290:	movt	r1, #2
   18294:	movw	r0, #20764	; 0x511c
   18298:	movt	r0, #2
   1829c:	bl	12a64 <__assert_fail@plt>
   182a0:	ldr	r6, [sp, #4]
   182a4:	cmp	r6, r5
   182a8:	movcc	r4, r7
   182ac:	b	183d4 <test_sort_find@@Base+0x1420>
   182b0:	ldr	r3, [pc, #-732]	; 17fdc <test_sort_find@@Base+0x1028>
   182b4:	movw	r2, #693	; 0x2b5
   182b8:	movw	r1, #20464	; 0x4ff0
   182bc:	movt	r1, #2
   182c0:	movw	r0, #20708	; 0x50e4
   182c4:	movt	r0, #2
   182c8:	bl	12a64 <__assert_fail@plt>
   182cc:	ldr	r3, [pc, #-756]	; 17fe0 <test_sort_find@@Base+0x102c>
   182d0:	movw	r2, #699	; 0x2bb
   182d4:	movw	r1, #20464	; 0x4ff0
   182d8:	movt	r1, #2
   182dc:	movw	r0, #20564	; 0x5054
   182e0:	movt	r0, #2
   182e4:	bl	12a64 <__assert_fail@plt>
   182e8:	ldr	r3, [pc, #-784]	; 17fe0 <test_sort_find@@Base+0x102c>
   182ec:	movw	r2, #699	; 0x2bb
   182f0:	movw	r1, #20464	; 0x4ff0
   182f4:	movt	r1, #2
   182f8:	movw	r0, #20764	; 0x511c
   182fc:	movt	r0, #2
   18300:	bl	12a64 <__assert_fail@plt>
   18304:	ldr	r3, [pc, #-816]	; 17fdc <test_sort_find@@Base+0x1028>
   18308:	movw	r2, #693	; 0x2b5
   1830c:	movw	r1, #20464	; 0x4ff0
   18310:	movt	r1, #2
   18314:	movw	r0, #20708	; 0x50e4
   18318:	movt	r0, #2
   1831c:	bl	12a64 <__assert_fail@plt>
   18320:	ldr	r3, [pc, #-840]	; 17fe0 <test_sort_find@@Base+0x102c>
   18324:	movw	r2, #699	; 0x2bb
   18328:	movw	r1, #20464	; 0x4ff0
   1832c:	movt	r1, #2
   18330:	movw	r0, #20564	; 0x5054
   18334:	movt	r0, #2
   18338:	bl	12a64 <__assert_fail@plt>
   1833c:	ldr	r8, [sp, #4]
   18340:	b	1847c <test_sort_find@@Base+0x14c8>
   18344:	ldr	r3, [pc, #-876]	; 17fe0 <test_sort_find@@Base+0x102c>
   18348:	movw	r2, #699	; 0x2bb
   1834c:	movw	r1, #20464	; 0x4ff0
   18350:	movt	r1, #2
   18354:	movw	r0, #20764	; 0x511c
   18358:	movt	r0, #2
   1835c:	bl	12a64 <__assert_fail@plt>
   18360:	ldr	r7, [sp, #4]
   18364:	cmp	r8, r7
   18368:	bhi	1839c <test_sort_find@@Base+0x13e8>
   1836c:	ldr	r9, [sp, #8]
   18370:	sub	r9, r9, #1
   18374:	cmn	r9, #1
   18378:	beq	184b4 <test_sort_find@@Base+0x1500>
   1837c:	lsl	r4, r9, #1
   18380:	cmp	r4, #4
   18384:	bhi	18370 <test_sort_find@@Base+0x13bc>
   18388:	mov	sl, r9
   1838c:	str	r9, [sp, #8]
   18390:	b	183cc <test_sort_find@@Base+0x1418>
   18394:	cmp	r0, #0
   18398:	bge	184ac <test_sort_find@@Base+0x14f8>
   1839c:	sub	sl, sl, r4
   183a0:	lsl	sl, sl, #2
   183a4:	sub	r5, r5, sl
   183a8:	ldr	r3, [sp, #20]
   183ac:	str	r5, [fp, r3]
   183b0:	add	sl, sl, r6
   183b4:	str	sl, [fp, r9]
   183b8:	lsl	r3, r4, #1
   183bc:	mov	sl, r4
   183c0:	cmp	r3, #4
   183c4:	bhi	184a4 <test_sort_find@@Base+0x14f0>
   183c8:	mov	r4, r3
   183cc:	cmp	r4, #3
   183d0:	bls	18118 <test_sort_find@@Base+0x1164>
   183d4:	lsl	r3, sl, #2
   183d8:	str	r3, [sp, #20]
   183dc:	add	r3, fp, r3
   183e0:	ldr	r2, [fp, #-4]
   183e4:	cmp	r2, sl
   183e8:	bls	182b0 <test_sort_find@@Base+0x12fc>
   183ec:	ldr	r6, [fp, sl, lsl #2]
   183f0:	adds	r1, r3, r6
   183f4:	beq	182cc <test_sort_find@@Base+0x1318>
   183f8:	ldr	r3, [r3, r6]
   183fc:	sub	r3, r1, r3
   18400:	ldrh	r0, [r3]
   18404:	cmp	r0, #11
   18408:	bls	182e8 <test_sort_find@@Base+0x1334>
   1840c:	ldrh	r3, [r3, #10]
   18410:	cmp	r3, #0
   18414:	beq	182e8 <test_sort_find@@Base+0x1334>
   18418:	add	ip, r1, r3
   1841c:	ldr	r0, [r1, r3]
   18420:	add	r0, r0, #4
   18424:	add	r0, ip, r0
   18428:	lsl	r9, r4, #2
   1842c:	add	r3, fp, r9
   18430:	cmp	r4, r2
   18434:	bcs	18304 <test_sort_find@@Base+0x1350>
   18438:	ldr	r5, [fp, r4, lsl #2]
   1843c:	adds	r2, r3, r5
   18440:	beq	18320 <test_sort_find@@Base+0x136c>
   18444:	ldr	r3, [r3, r5]
   18448:	sub	r3, r2, r3
   1844c:	ldrh	r1, [r3]
   18450:	cmp	r1, #11
   18454:	bls	18344 <test_sort_find@@Base+0x1390>
   18458:	ldrh	r3, [r3, #10]
   1845c:	cmp	r3, #0
   18460:	beq	18344 <test_sort_find@@Base+0x1390>
   18464:	add	r1, r2, r3
   18468:	ldr	r3, [r2, r3]
   1846c:	add	r3, r3, #4
   18470:	adds	r1, r1, r3
   18474:	beq	1833c <test_sort_find@@Base+0x1388>
   18478:	ldr	r8, [r1, #-4]
   1847c:	cmp	r0, #0
   18480:	beq	18360 <test_sort_find@@Base+0x13ac>
   18484:	ldr	r7, [r0, #-4]
   18488:	cmp	r8, r7
   1848c:	movcc	r2, r8
   18490:	movcs	r2, r7
   18494:	bl	12a4c <strncmp@plt>
   18498:	cmp	r0, #0
   1849c:	bne	18394 <test_sort_find@@Base+0x13e0>
   184a0:	b	18364 <test_sort_find@@Base+0x13b0>
   184a4:	ldr	r9, [sp, #8]
   184a8:	b	18370 <test_sort_find@@Base+0x13bc>
   184ac:	ldr	r9, [sp, #8]
   184b0:	b	18370 <test_sort_find@@Base+0x13bc>
   184b4:	add	r3, fp, #16
   184b8:	str	fp, [sp, #8]
   184bc:	ldr	r2, [sp, #16]
   184c0:	str	r2, [sp, #32]
   184c4:	str	r2, [sp, #4]
   184c8:	ldr	r9, [sp, #24]
   184cc:	b	18848 <test_sort_find@@Base+0x1894>
   184d0:	lsl	r3, r4, #2
   184d4:	add	r0, fp, r3
   184d8:	ldr	ip, [fp, #-4]
   184dc:	cmp	r4, ip
   184e0:	bcs	185a8 <test_sort_find@@Base+0x15f4>
   184e4:	ldr	r2, [fp, r4, lsl #2]
   184e8:	adds	r1, r0, r2
   184ec:	beq	185c4 <test_sort_find@@Base+0x1610>
   184f0:	ldr	r2, [r0, r2]
   184f4:	sub	r2, r1, r2
   184f8:	ldrh	r0, [r2]
   184fc:	cmp	r0, #11
   18500:	bls	185e0 <test_sort_find@@Base+0x162c>
   18504:	ldrh	r2, [r2, #10]
   18508:	cmp	r2, #0
   1850c:	beq	185e0 <test_sort_find@@Base+0x162c>
   18510:	add	lr, r1, r2
   18514:	ldr	r0, [r1, r2]
   18518:	add	r0, r0, #4
   1851c:	add	r0, lr, r0
   18520:	add	r7, r4, #1
   18524:	add	r3, r3, #4
   18528:	add	r1, fp, r3
   1852c:	cmp	r7, ip
   18530:	bcs	185fc <test_sort_find@@Base+0x1648>
   18534:	ldr	r3, [fp, r3]
   18538:	adds	r2, r1, r3
   1853c:	beq	18618 <test_sort_find@@Base+0x1664>
   18540:	ldr	r3, [r1, r3]
   18544:	sub	r3, r2, r3
   18548:	ldrh	r1, [r3]
   1854c:	cmp	r1, #11
   18550:	bls	18634 <test_sort_find@@Base+0x1680>
   18554:	ldrh	r3, [r3, #10]
   18558:	cmp	r3, #0
   1855c:	beq	18634 <test_sort_find@@Base+0x1680>
   18560:	add	r1, r2, r3
   18564:	ldr	r3, [r2, r3]
   18568:	add	r3, r3, #4
   1856c:	adds	r1, r1, r3
   18570:	beq	18884 <test_sort_find@@Base+0x18d0>
   18574:	ldr	r5, [r1, #-4]
   18578:	cmp	r0, #0
   1857c:	beq	18650 <test_sort_find@@Base+0x169c>
   18580:	ldr	r6, [r0, #-4]
   18584:	cmp	r5, r6
   18588:	movcc	r2, r5
   1858c:	movcs	r2, r6
   18590:	bl	12a4c <strncmp@plt>
   18594:	cmp	r0, #0
   18598:	beq	18654 <test_sort_find@@Base+0x16a0>
   1859c:	cmp	r0, #0
   185a0:	movlt	r4, r7
   185a4:	b	18774 <test_sort_find@@Base+0x17c0>
   185a8:	ldr	r3, [pc, #-1492]	; 17fdc <test_sort_find@@Base+0x1028>
   185ac:	movw	r2, #693	; 0x2b5
   185b0:	movw	r1, #20464	; 0x4ff0
   185b4:	movt	r1, #2
   185b8:	movw	r0, #20708	; 0x50e4
   185bc:	movt	r0, #2
   185c0:	bl	12a64 <__assert_fail@plt>
   185c4:	ldr	r3, [pc, #-1516]	; 17fe0 <test_sort_find@@Base+0x102c>
   185c8:	movw	r2, #699	; 0x2bb
   185cc:	movw	r1, #20464	; 0x4ff0
   185d0:	movt	r1, #2
   185d4:	movw	r0, #20564	; 0x5054
   185d8:	movt	r0, #2
   185dc:	bl	12a64 <__assert_fail@plt>
   185e0:	ldr	r3, [pc, #-1544]	; 17fe0 <test_sort_find@@Base+0x102c>
   185e4:	movw	r2, #699	; 0x2bb
   185e8:	movw	r1, #20464	; 0x4ff0
   185ec:	movt	r1, #2
   185f0:	movw	r0, #20764	; 0x511c
   185f4:	movt	r0, #2
   185f8:	bl	12a64 <__assert_fail@plt>
   185fc:	ldr	r3, [pc, #-1576]	; 17fdc <test_sort_find@@Base+0x1028>
   18600:	movw	r2, #693	; 0x2b5
   18604:	movw	r1, #20464	; 0x4ff0
   18608:	movt	r1, #2
   1860c:	movw	r0, #20708	; 0x50e4
   18610:	movt	r0, #2
   18614:	bl	12a64 <__assert_fail@plt>
   18618:	ldr	r3, [pc, #-1600]	; 17fe0 <test_sort_find@@Base+0x102c>
   1861c:	movw	r2, #699	; 0x2bb
   18620:	movw	r1, #20464	; 0x4ff0
   18624:	movt	r1, #2
   18628:	movw	r0, #20564	; 0x5054
   1862c:	movt	r0, #2
   18630:	bl	12a64 <__assert_fail@plt>
   18634:	ldr	r3, [pc, #-1628]	; 17fe0 <test_sort_find@@Base+0x102c>
   18638:	movw	r2, #699	; 0x2bb
   1863c:	movw	r1, #20464	; 0x4ff0
   18640:	movt	r1, #2
   18644:	movw	r0, #20764	; 0x511c
   18648:	movt	r0, #2
   1864c:	bl	12a64 <__assert_fail@plt>
   18650:	ldr	r6, [sp, #4]
   18654:	cmp	r6, r5
   18658:	movcc	r4, r7
   1865c:	b	18774 <test_sort_find@@Base+0x17c0>
   18660:	ldr	r3, [pc, #-1676]	; 17fdc <test_sort_find@@Base+0x1028>
   18664:	movw	r2, #693	; 0x2b5
   18668:	movw	r1, #20464	; 0x4ff0
   1866c:	movt	r1, #2
   18670:	movw	r0, #20708	; 0x50e4
   18674:	movt	r0, #2
   18678:	bl	12a64 <__assert_fail@plt>
   1867c:	ldr	r3, [pc, #-1700]	; 17fe0 <test_sort_find@@Base+0x102c>
   18680:	movw	r2, #699	; 0x2bb
   18684:	movw	r1, #20464	; 0x4ff0
   18688:	movt	r1, #2
   1868c:	movw	r0, #20564	; 0x5054
   18690:	movt	r0, #2
   18694:	bl	12a64 <__assert_fail@plt>
   18698:	ldr	r3, [pc, #-1728]	; 17fe0 <test_sort_find@@Base+0x102c>
   1869c:	movw	r2, #699	; 0x2bb
   186a0:	movw	r1, #20464	; 0x4ff0
   186a4:	movt	r1, #2
   186a8:	movw	r0, #20764	; 0x511c
   186ac:	movt	r0, #2
   186b0:	bl	12a64 <__assert_fail@plt>
   186b4:	ldr	r3, [pc, #-1760]	; 17fdc <test_sort_find@@Base+0x1028>
   186b8:	movw	r2, #693	; 0x2b5
   186bc:	movw	r1, #20464	; 0x4ff0
   186c0:	movt	r1, #2
   186c4:	movw	r0, #20708	; 0x50e4
   186c8:	movt	r0, #2
   186cc:	bl	12a64 <__assert_fail@plt>
   186d0:	ldr	r3, [pc, #-1784]	; 17fe0 <test_sort_find@@Base+0x102c>
   186d4:	movw	r2, #699	; 0x2bb
   186d8:	movw	r1, #20464	; 0x4ff0
   186dc:	movt	r1, #2
   186e0:	movw	r0, #20564	; 0x5054
   186e4:	movt	r0, #2
   186e8:	bl	12a64 <__assert_fail@plt>
   186ec:	ldr	r3, [pc, #-1812]	; 17fe0 <test_sort_find@@Base+0x102c>
   186f0:	movw	r2, #699	; 0x2bb
   186f4:	movw	r1, #20464	; 0x4ff0
   186f8:	movt	r1, #2
   186fc:	movw	r0, #20764	; 0x511c
   18700:	movt	r0, #2
   18704:	bl	12a64 <__assert_fail@plt>
   18708:	cmp	r0, #0
   1870c:	beq	18834 <test_sort_find@@Base+0x1880>
   18710:	ldr	r8, [sp, #4]
   18714:	ldr	r7, [r0, #-4]
   18718:	cmp	r8, r7
   1871c:	movcc	r2, r8
   18720:	movcs	r2, r7
   18724:	bl	12a4c <strncmp@plt>
   18728:	cmp	r0, #0
   1872c:	beq	1882c <test_sort_find@@Base+0x1878>
   18730:	cmp	r0, #0
   18734:	bge	18834 <test_sort_find@@Base+0x1880>
   18738:	sub	r3, sl, r4
   1873c:	lsl	r3, r3, #2
   18740:	sub	r5, r5, r3
   18744:	ldr	r2, [sp, #24]
   18748:	str	r5, [fp, r2]
   1874c:	add	r6, r3, r6
   18750:	ldr	r3, [sp, #28]
   18754:	str	r6, [fp, r3]
   18758:	lsl	r3, r4, #1
   1875c:	mov	sl, r4
   18760:	cmp	r9, r3
   18764:	bcc	18834 <test_sort_find@@Base+0x1880>
   18768:	mov	r4, r3
   1876c:	cmp	r9, r4
   18770:	bhi	184d0 <test_sort_find@@Base+0x151c>
   18774:	lsl	r3, sl, #2
   18778:	str	r3, [sp, #24]
   1877c:	add	r3, fp, r3
   18780:	ldr	r2, [fp, #-4]
   18784:	cmp	sl, r2
   18788:	bcs	18660 <test_sort_find@@Base+0x16ac>
   1878c:	ldr	r6, [fp, sl, lsl #2]
   18790:	adds	r1, r3, r6
   18794:	beq	1867c <test_sort_find@@Base+0x16c8>
   18798:	ldr	r3, [r3, r6]
   1879c:	sub	r3, r1, r3
   187a0:	ldrh	r0, [r3]
   187a4:	cmp	r0, #11
   187a8:	bls	18698 <test_sort_find@@Base+0x16e4>
   187ac:	ldrh	r3, [r3, #10]
   187b0:	cmp	r3, #0
   187b4:	beq	18698 <test_sort_find@@Base+0x16e4>
   187b8:	add	ip, r1, r3
   187bc:	ldr	r0, [r1, r3]
   187c0:	add	r0, r0, #4
   187c4:	add	r0, ip, r0
   187c8:	lsl	r3, r4, #2
   187cc:	str	r3, [sp, #28]
   187d0:	add	r3, fp, r3
   187d4:	cmp	r4, r2
   187d8:	bcs	186b4 <test_sort_find@@Base+0x1700>
   187dc:	ldr	r5, [fp, r4, lsl #2]
   187e0:	adds	r2, r3, r5
   187e4:	beq	186d0 <test_sort_find@@Base+0x171c>
   187e8:	ldr	r3, [r3, r5]
   187ec:	sub	r3, r2, r3
   187f0:	ldrh	r1, [r3]
   187f4:	cmp	r1, #11
   187f8:	bls	186ec <test_sort_find@@Base+0x1738>
   187fc:	ldrh	r3, [r3, #10]
   18800:	cmp	r3, #0
   18804:	beq	186ec <test_sort_find@@Base+0x1738>
   18808:	add	r1, r2, r3
   1880c:	ldr	r3, [r2, r3]
   18810:	add	r3, r3, #4
   18814:	adds	r1, r1, r3
   18818:	beq	18708 <test_sort_find@@Base+0x1754>
   1881c:	ldr	r8, [r1, #-4]
   18820:	cmp	r0, #0
   18824:	bne	18714 <test_sort_find@@Base+0x1760>
   18828:	ldr	r7, [sp, #4]
   1882c:	cmp	r8, r7
   18830:	bhi	18738 <test_sort_find@@Base+0x1784>
   18834:	ldr	r2, [sp, #20]
   18838:	mov	r3, r2
   1883c:	ldr	r1, [sp, #8]
   18840:	cmp	r1, r2
   18844:	beq	17c74 <test_sort_find@@Base+0xcc0>
   18848:	mov	ip, r3
   1884c:	ldr	r0, [sp, #8]
   18850:	sub	r2, r0, r3
   18854:	ldr	r1, [fp]
   18858:	add	r2, r2, r1
   1885c:	sub	r1, r3, r0
   18860:	ldr	r3, [r3]
   18864:	add	r3, r1, r3
   18868:	str	r3, [fp]
   1886c:	str	r2, [ip], #-4
   18870:	str	ip, [sp, #20]
   18874:	sub	r9, r9, #1
   18878:	ldr	sl, [sp, #32]
   1887c:	ldr	r4, [sp, #16]
   18880:	b	1876c <test_sort_find@@Base+0x17b8>
   18884:	cmp	r0, #0
   18888:	beq	18774 <test_sort_find@@Base+0x17c0>
   1888c:	ldr	r5, [sp, #4]
   18890:	b	18580 <test_sort_find@@Base+0x15cc>

00018894 <test_scan@@Base>:
   18894:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18898:	strd	r6, [sp, #8]
   1889c:	strd	r8, [sp, #16]
   188a0:	strd	sl, [sp, #24]
   188a4:	str	lr, [sp, #32]
   188a8:	sub	sp, sp, #76	; 0x4c
   188ac:	mov	r4, r0
   188b0:	movw	r3, #18612	; 0x48b4
   188b4:	movt	r3, #2
   188b8:	add	r2, r3, #740	; 0x2e4
   188bc:	ldr	r1, [r3, #740]	; 0x2e4
   188c0:	str	r1, [sp, #60]	; 0x3c
   188c4:	ldrh	r2, [r2, #4]
   188c8:	strh	r2, [sp, #64]	; 0x40
   188cc:	ldrb	r3, [r3, #746]	; 0x2ea
   188d0:	strb	r3, [sp, #66]	; 0x42
   188d4:	bl	1ee18 <flatcc_builder_reset@@Base>
   188d8:	mov	r0, r4
   188dc:	bl	13064 <_start@@Base+0x5f4>
   188e0:	movw	r1, #21584	; 0x5450
   188e4:	movt	r1, #2
   188e8:	mov	r0, r4
   188ec:	bl	134e4 <_start@@Base+0xa74>
   188f0:	mvn	r3, #0
   188f4:	str	r3, [sp, #4]
   188f8:	mov	r3, #1
   188fc:	str	r3, [sp]
   18900:	mov	r2, #7
   18904:	add	r1, sp, #60	; 0x3c
   18908:	mov	r0, r4
   1890c:	bl	212a4 <flatcc_builder_create_vector@@Base>
   18910:	subs	r5, r0, #0
   18914:	beq	1892c <test_scan@@Base+0x98>
   18918:	mov	r1, #5
   1891c:	mov	r0, r4
   18920:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   18924:	cmp	r0, #0
   18928:	strne	r5, [r0]
   1892c:	mov	r0, r4
   18930:	bl	203b0 <flatcc_builder_start_offset_vector@@Base>
   18934:	mov	r0, r4
   18938:	bl	21540 <flatcc_builder_end_offset_vector@@Base>
   1893c:	subs	r5, r0, #0
   18940:	beq	18958 <test_scan@@Base+0xc4>
   18944:	mov	r1, #10
   18948:	mov	r0, r4
   1894c:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   18950:	cmp	r0, #0
   18954:	strne	r5, [r0]
   18958:	mov	r0, r4
   1895c:	bl	203b0 <flatcc_builder_start_offset_vector@@Base>
   18960:	mov	r1, #36	; 0x24
   18964:	mov	r0, r4
   18968:	bl	20608 <flatcc_builder_start_table@@Base>
   1896c:	movw	r1, #23480	; 0x5bb8
   18970:	movt	r1, #2
   18974:	mov	r0, r4
   18978:	bl	134e4 <_start@@Base+0xa74>
   1897c:	mov	r2, #1
   18980:	ldr	r1, [pc, #4084]	; 1997c <test_scan@@Base+0x10e8>
   18984:	mov	r0, r4
   18988:	bl	21030 <flatcc_builder_check_required@@Base>
   1898c:	cmp	r0, #0
   18990:	beq	18cb8 <test_scan@@Base+0x424>
   18994:	mov	r0, r4
   18998:	bl	210e0 <flatcc_builder_end_table@@Base>
   1899c:	subs	r1, r0, #0
   189a0:	beq	189ac <test_scan@@Base+0x118>
   189a4:	mov	r0, r4
   189a8:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   189ac:	mov	r1, #36	; 0x24
   189b0:	mov	r0, r4
   189b4:	bl	20608 <flatcc_builder_start_table@@Base>
   189b8:	movw	r1, #23580	; 0x5c1c
   189bc:	movt	r1, #2
   189c0:	mov	r0, r4
   189c4:	bl	134e4 <_start@@Base+0xa74>
   189c8:	mov	r2, #1
   189cc:	ldr	r1, [pc, #4008]	; 1997c <test_scan@@Base+0x10e8>
   189d0:	mov	r0, r4
   189d4:	bl	21030 <flatcc_builder_check_required@@Base>
   189d8:	cmp	r0, #0
   189dc:	beq	18cd4 <test_scan@@Base+0x440>
   189e0:	mov	r0, r4
   189e4:	bl	210e0 <flatcc_builder_end_table@@Base>
   189e8:	subs	r1, r0, #0
   189ec:	beq	189f8 <test_scan@@Base+0x164>
   189f0:	mov	r0, r4
   189f4:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   189f8:	mov	r1, #36	; 0x24
   189fc:	mov	r0, r4
   18a00:	bl	20608 <flatcc_builder_start_table@@Base>
   18a04:	movw	r1, #23624	; 0x5c48
   18a08:	movt	r1, #2
   18a0c:	mov	r0, r4
   18a10:	bl	134e4 <_start@@Base+0xa74>
   18a14:	mov	r2, #1
   18a18:	ldr	r1, [pc, #3932]	; 1997c <test_scan@@Base+0x10e8>
   18a1c:	mov	r0, r4
   18a20:	bl	21030 <flatcc_builder_check_required@@Base>
   18a24:	cmp	r0, #0
   18a28:	beq	18cf0 <test_scan@@Base+0x45c>
   18a2c:	mov	r0, r4
   18a30:	bl	210e0 <flatcc_builder_end_table@@Base>
   18a34:	subs	r1, r0, #0
   18a38:	beq	18a44 <test_scan@@Base+0x1b0>
   18a3c:	mov	r0, r4
   18a40:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   18a44:	mov	r1, #36	; 0x24
   18a48:	mov	r0, r4
   18a4c:	bl	20608 <flatcc_builder_start_table@@Base>
   18a50:	movw	r1, #25348	; 0x6304
   18a54:	movt	r1, #2
   18a58:	mov	r0, r4
   18a5c:	bl	134e4 <_start@@Base+0xa74>
   18a60:	mov	r2, #1
   18a64:	ldr	r1, [pc, #3856]	; 1997c <test_scan@@Base+0x10e8>
   18a68:	mov	r0, r4
   18a6c:	bl	21030 <flatcc_builder_check_required@@Base>
   18a70:	cmp	r0, #0
   18a74:	beq	18d0c <test_scan@@Base+0x478>
   18a78:	mov	r0, r4
   18a7c:	bl	210e0 <flatcc_builder_end_table@@Base>
   18a80:	subs	r1, r0, #0
   18a84:	beq	18a90 <test_scan@@Base+0x1fc>
   18a88:	mov	r0, r4
   18a8c:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   18a90:	mov	r1, #36	; 0x24
   18a94:	mov	r0, r4
   18a98:	bl	20608 <flatcc_builder_start_table@@Base>
   18a9c:	movw	r1, #23624	; 0x5c48
   18aa0:	movt	r1, #2
   18aa4:	mov	r0, r4
   18aa8:	bl	134e4 <_start@@Base+0xa74>
   18aac:	mov	r2, #1
   18ab0:	ldr	r1, [pc, #3780]	; 1997c <test_scan@@Base+0x10e8>
   18ab4:	mov	r0, r4
   18ab8:	bl	21030 <flatcc_builder_check_required@@Base>
   18abc:	cmp	r0, #0
   18ac0:	beq	18d28 <test_scan@@Base+0x494>
   18ac4:	mov	r0, r4
   18ac8:	bl	210e0 <flatcc_builder_end_table@@Base>
   18acc:	subs	r1, r0, #0
   18ad0:	beq	18adc <test_scan@@Base+0x248>
   18ad4:	mov	r0, r4
   18ad8:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   18adc:	mov	r0, r4
   18ae0:	bl	21540 <flatcc_builder_end_offset_vector@@Base>
   18ae4:	subs	r5, r0, #0
   18ae8:	beq	18b00 <test_scan@@Base+0x26c>
   18aec:	mov	r1, #11
   18af0:	mov	r0, r4
   18af4:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   18af8:	cmp	r0, #0
   18afc:	strne	r5, [r0]
   18b00:	mov	r2, #1
   18b04:	ldr	r1, [pc, #3696]	; 1997c <test_scan@@Base+0x10e8>
   18b08:	mov	r0, r4
   18b0c:	bl	21030 <flatcc_builder_check_required@@Base>
   18b10:	cmp	r0, #0
   18b14:	beq	18d44 <test_scan@@Base+0x4b0>
   18b18:	mov	r0, r4
   18b1c:	bl	210e0 <flatcc_builder_end_table@@Base>
   18b20:	mov	r1, r0
   18b24:	mov	r0, r4
   18b28:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   18b2c:	add	r1, sp, #68	; 0x44
   18b30:	mov	r0, r4
   18b34:	bl	2299c <flatcc_builder_finalize_aligned_buffer@@Base>
   18b38:	subs	r1, r0, #0
   18b3c:	str	r1, [sp, #28]
   18b40:	beq	18d60 <test_scan@@Base+0x4cc>
   18b44:	movw	r3, #20301	; 0x4f4d
   18b48:	movt	r3, #21326	; 0x534e
   18b4c:	ldr	r2, [r1, #4]
   18b50:	cmp	r2, r3
   18b54:	bne	18d60 <test_scan@@Base+0x4cc>
   18b58:	ldr	r2, [r1]
   18b5c:	adds	r3, r1, r2
   18b60:	beq	18d60 <test_scan@@Base+0x4cc>
   18b64:	ldr	r1, [sp, #28]
   18b68:	ldr	r2, [r1, r2]
   18b6c:	sub	r2, r3, r2
   18b70:	ldrh	r1, [r2]
   18b74:	cmp	r1, #27
   18b78:	bls	18d7c <test_scan@@Base+0x4e8>
   18b7c:	ldrh	r1, [r2, #26]
   18b80:	cmp	r1, #0
   18b84:	beq	18d7c <test_scan@@Base+0x4e8>
   18b88:	add	ip, r3, r1
   18b8c:	ldr	r0, [r3, r1]
   18b90:	add	r0, r0, #4
   18b94:	adds	fp, ip, r0
   18b98:	beq	18d7c <test_scan@@Base+0x4e8>
   18b9c:	ldrh	r1, [r2, #14]
   18ba0:	cmp	r1, #0
   18ba4:	beq	18d98 <test_scan@@Base+0x504>
   18ba8:	add	lr, r3, r1
   18bac:	str	lr, [sp, #40]	; 0x28
   18bb0:	ldr	r1, [r3, r1]
   18bb4:	add	r1, r1, #4
   18bb8:	str	r1, [sp, #44]	; 0x2c
   18bbc:	adds	r5, lr, r1
   18bc0:	beq	18d98 <test_scan@@Base+0x504>
   18bc4:	ldrh	r2, [r2, #24]
   18bc8:	cmp	r2, #0
   18bcc:	beq	18db4 <test_scan@@Base+0x520>
   18bd0:	add	r1, r3, r2
   18bd4:	ldr	r7, [r3, r2]
   18bd8:	add	r7, r7, #4
   18bdc:	adds	r3, r1, r7
   18be0:	str	r3, [sp, #24]
   18be4:	beq	18db4 <test_scan@@Base+0x520>
   18be8:	ldr	r4, [fp, #-4]
   18bec:	cmp	r4, #0
   18bf0:	beq	18e84 <test_scan@@Base+0x5f0>
   18bf4:	ldr	r3, [ip, r0]
   18bf8:	adds	sl, fp, r3
   18bfc:	beq	18dd0 <test_scan@@Base+0x53c>
   18c00:	ldr	r3, [fp, r3]
   18c04:	sub	r3, sl, r3
   18c08:	ldrh	r2, [r3]
   18c0c:	cmp	r2, #11
   18c10:	bls	18c9c <test_scan@@Base+0x408>
   18c14:	ldrh	r3, [r3, #10]
   18c18:	cmp	r3, #0
   18c1c:	beq	18c9c <test_scan@@Base+0x408>
   18c20:	add	r2, fp, #4
   18c24:	str	r2, [sp, #36]	; 0x24
   18c28:	mov	r7, r2
   18c2c:	mov	r2, sl
   18c30:	mov	r6, #0
   18c34:	movw	r8, #23580	; 0x5c1c
   18c38:	movt	r8, #2
   18c3c:	add	r0, r2, r3
   18c40:	ldr	r3, [r2, r3]
   18c44:	add	r3, r3, #4
   18c48:	mov	r1, r8
   18c4c:	add	r0, r0, r3
   18c50:	bl	12968 <strcmp@plt>
   18c54:	cmp	r0, #0
   18c58:	beq	18dec <test_scan@@Base+0x558>
   18c5c:	add	r6, r6, #1
   18c60:	cmp	r4, r6
   18c64:	beq	18e84 <test_scan@@Base+0x5f0>
   18c68:	mov	r3, r7
   18c6c:	add	r7, r7, #4
   18c70:	ldr	r1, [r3]
   18c74:	adds	r2, r3, r1
   18c78:	beq	18dd0 <test_scan@@Base+0x53c>
   18c7c:	ldr	r3, [r3, r1]
   18c80:	sub	r3, r2, r3
   18c84:	ldrh	r1, [r3]
   18c88:	cmp	r1, #11
   18c8c:	bls	18c9c <test_scan@@Base+0x408>
   18c90:	ldrh	r3, [r3, #10]
   18c94:	cmp	r3, #0
   18c98:	bne	18c3c <test_scan@@Base+0x3a8>
   18c9c:	ldr	r3, [pc, #3292]	; 19980 <test_scan@@Base+0x10ec>
   18ca0:	movw	r2, #699	; 0x2bb
   18ca4:	movw	r1, #20464	; 0x4ff0
   18ca8:	movt	r1, #2
   18cac:	movw	r0, #20764	; 0x511c
   18cb0:	movt	r0, #2
   18cb4:	bl	12a64 <__assert_fail@plt>
   18cb8:	ldr	r3, [pc, #3268]	; 19984 <test_scan@@Base+0x10f0>
   18cbc:	mov	r2, #235	; 0xeb
   18cc0:	movw	r1, #21196	; 0x52cc
   18cc4:	movt	r1, #2
   18cc8:	movw	r0, #21596	; 0x545c
   18ccc:	movt	r0, #2
   18cd0:	bl	12a64 <__assert_fail@plt>
   18cd4:	ldr	r3, [pc, #3240]	; 19984 <test_scan@@Base+0x10f0>
   18cd8:	mov	r2, #235	; 0xeb
   18cdc:	movw	r1, #21196	; 0x52cc
   18ce0:	movt	r1, #2
   18ce4:	movw	r0, #21596	; 0x545c
   18ce8:	movt	r0, #2
   18cec:	bl	12a64 <__assert_fail@plt>
   18cf0:	ldr	r3, [pc, #3212]	; 19984 <test_scan@@Base+0x10f0>
   18cf4:	mov	r2, #235	; 0xeb
   18cf8:	movw	r1, #21196	; 0x52cc
   18cfc:	movt	r1, #2
   18d00:	movw	r0, #21596	; 0x545c
   18d04:	movt	r0, #2
   18d08:	bl	12a64 <__assert_fail@plt>
   18d0c:	ldr	r3, [pc, #3184]	; 19984 <test_scan@@Base+0x10f0>
   18d10:	mov	r2, #235	; 0xeb
   18d14:	movw	r1, #21196	; 0x52cc
   18d18:	movt	r1, #2
   18d1c:	movw	r0, #21596	; 0x545c
   18d20:	movt	r0, #2
   18d24:	bl	12a64 <__assert_fail@plt>
   18d28:	ldr	r3, [pc, #3156]	; 19984 <test_scan@@Base+0x10f0>
   18d2c:	mov	r2, #235	; 0xeb
   18d30:	movw	r1, #21196	; 0x52cc
   18d34:	movt	r1, #2
   18d38:	movw	r0, #21596	; 0x545c
   18d3c:	movt	r0, #2
   18d40:	bl	12a64 <__assert_fail@plt>
   18d44:	ldr	r3, [pc, #3128]	; 19984 <test_scan@@Base+0x10f0>
   18d48:	mov	r2, #235	; 0xeb
   18d4c:	movw	r1, #21196	; 0x52cc
   18d50:	movt	r1, #2
   18d54:	movw	r0, #21596	; 0x545c
   18d58:	movt	r0, #2
   18d5c:	bl	12a64 <__assert_fail@plt>
   18d60:	ldr	r3, [pc, #3104]	; 19988 <test_scan@@Base+0x10f4>
   18d64:	movw	r2, #711	; 0x2c7
   18d68:	movw	r1, #20464	; 0x4ff0
   18d6c:	movt	r1, #2
   18d70:	movw	r0, #20564	; 0x5054
   18d74:	movt	r0, #2
   18d78:	bl	12a64 <__assert_fail@plt>
   18d7c:	ldr	r3, [pc, #3080]	; 1998c <test_scan@@Base+0x10f8>
   18d80:	movw	r2, #1305	; 0x519
   18d84:	movw	r1, #23376	; 0x5b50
   18d88:	movt	r1, #2
   18d8c:	movw	r0, #25380	; 0x6324
   18d90:	movt	r0, #2
   18d94:	bl	12a64 <__assert_fail@plt>
   18d98:	ldr	r3, [pc, #3052]	; 1998c <test_scan@@Base+0x10f8>
   18d9c:	movw	r2, #1307	; 0x51b
   18da0:	movw	r1, #23376	; 0x5b50
   18da4:	movt	r1, #2
   18da8:	movw	r0, #25912	; 0x6538
   18dac:	movt	r0, #2
   18db0:	bl	12a64 <__assert_fail@plt>
   18db4:	ldr	r3, [pc, #3024]	; 1998c <test_scan@@Base+0x10f8>
   18db8:	movw	r2, #1309	; 0x51d
   18dbc:	movw	r1, #23376	; 0x5b50
   18dc0:	movt	r1, #2
   18dc4:	movw	r0, #25916	; 0x653c
   18dc8:	movt	r0, #2
   18dcc:	bl	12a64 <__assert_fail@plt>
   18dd0:	ldr	r3, [pc, #2984]	; 19980 <test_scan@@Base+0x10ec>
   18dd4:	movw	r2, #699	; 0x2bb
   18dd8:	movw	r1, #20464	; 0x4ff0
   18ddc:	movt	r1, #2
   18de0:	movw	r0, #20564	; 0x5054
   18de4:	movt	r0, #2
   18de8:	bl	12a64 <__assert_fail@plt>
   18dec:	cmp	r6, #1
   18df0:	bne	18e84 <test_scan@@Base+0x5f0>
   18df4:	sub	r6, r4, #1
   18df8:	str	r6, [sp, #12]
   18dfc:	sub	r3, r4, #-1073741823	; 0xc0000001
   18e00:	add	r3, fp, r3, lsl #2
   18e04:	str	r3, [sp, #16]
   18e08:	mov	r7, r3
   18e0c:	movw	r8, #23580	; 0x5c1c
   18e10:	movt	r8, #2
   18e14:	cmn	r6, #1
   18e18:	beq	18f08 <test_scan@@Base+0x674>
   18e1c:	mov	r3, r7
   18e20:	cmp	r6, r4
   18e24:	bcs	18e9c <test_scan@@Base+0x608>
   18e28:	sub	r7, r7, #4
   18e2c:	ldr	r1, [r3]
   18e30:	adds	r2, r3, r1
   18e34:	beq	18eb8 <test_scan@@Base+0x624>
   18e38:	ldr	r3, [r3, r1]
   18e3c:	sub	r3, r2, r3
   18e40:	ldrh	r1, [r3]
   18e44:	cmp	r1, #11
   18e48:	bls	18ed4 <test_scan@@Base+0x640>
   18e4c:	ldrh	r3, [r3, #10]
   18e50:	cmp	r3, #0
   18e54:	beq	18ed4 <test_scan@@Base+0x640>
   18e58:	add	r0, r2, r3
   18e5c:	ldr	r3, [r2, r3]
   18e60:	add	r3, r3, #4
   18e64:	mov	r1, r8
   18e68:	add	r0, r0, r3
   18e6c:	bl	12968 <strcmp@plt>
   18e70:	sub	r3, r6, #1
   18e74:	cmp	r0, #0
   18e78:	beq	18ef0 <test_scan@@Base+0x65c>
   18e7c:	mov	r6, r3
   18e80:	b	18e14 <test_scan@@Base+0x580>
   18e84:	movw	r0, #25924	; 0x6544
   18e88:	movt	r0, #2
   18e8c:	bl	129c8 <puts@plt>
   18e90:	mvn	r3, #0
   18e94:	str	r3, [sp, #32]
   18e98:	b	1a19c <test_scan@@Base+0x1908>
   18e9c:	ldr	r3, [pc, #2804]	; 19998 <test_scan@@Base+0x1104>
   18ea0:	movw	r2, #693	; 0x2b5
   18ea4:	movw	r1, #20464	; 0x4ff0
   18ea8:	movt	r1, #2
   18eac:	movw	r0, #20708	; 0x50e4
   18eb0:	movt	r0, #2
   18eb4:	bl	12a64 <__assert_fail@plt>
   18eb8:	ldr	r3, [pc, #2752]	; 19980 <test_scan@@Base+0x10ec>
   18ebc:	movw	r2, #699	; 0x2bb
   18ec0:	movw	r1, #20464	; 0x4ff0
   18ec4:	movt	r1, #2
   18ec8:	movw	r0, #20564	; 0x5054
   18ecc:	movt	r0, #2
   18ed0:	bl	12a64 <__assert_fail@plt>
   18ed4:	ldr	r3, [pc, #2724]	; 19980 <test_scan@@Base+0x10ec>
   18ed8:	movw	r2, #699	; 0x2bb
   18edc:	movw	r1, #20464	; 0x4ff0
   18ee0:	movt	r1, #2
   18ee4:	movw	r0, #20764	; 0x511c
   18ee8:	movt	r0, #2
   18eec:	bl	12a64 <__assert_fail@plt>
   18ef0:	cmp	r6, #1
   18ef4:	moveq	r8, fp
   18ef8:	moveq	r6, #0
   18efc:	movweq	r9, #25792	; 0x64c0
   18f00:	movteq	r9, #2
   18f04:	beq	18f2c <test_scan@@Base+0x698>
   18f08:	movw	r0, #25956	; 0x6564
   18f0c:	movt	r0, #2
   18f10:	bl	129c8 <puts@plt>
   18f14:	mvn	r3, #0
   18f18:	str	r3, [sp, #32]
   18f1c:	b	1a19c <test_scan@@Base+0x1908>
   18f20:	add	r6, r6, #1
   18f24:	cmp	r4, r6
   18f28:	beq	18f8c <test_scan@@Base+0x6f8>
   18f2c:	mov	r3, r8
   18f30:	add	r8, r8, #4
   18f34:	ldr	r0, [r3]
   18f38:	add	r0, r3, r0
   18f3c:	bl	12f74 <_start@@Base+0x504>
   18f40:	cmp	r0, #0
   18f44:	beq	18f20 <test_scan@@Base+0x68c>
   18f48:	ldr	r7, [r0, #-4]
   18f4c:	cmp	r7, #5
   18f50:	movcc	r2, r7
   18f54:	movcs	r2, #5
   18f58:	mov	r1, r9
   18f5c:	bl	12a4c <strncmp@plt>
   18f60:	cmp	r0, #0
   18f64:	bne	18f20 <test_scan@@Base+0x68c>
   18f68:	cmp	r7, #5
   18f6c:	bne	18f20 <test_scan@@Base+0x68c>
   18f70:	cmp	r6, #1
   18f74:	bne	18f8c <test_scan@@Base+0x6f8>
   18f78:	ldr	r8, [sp, #16]
   18f7c:	ldr	r6, [sp, #12]
   18f80:	movw	r7, #25792	; 0x64c0
   18f84:	movt	r7, #2
   18f88:	b	18fc4 <test_scan@@Base+0x730>
   18f8c:	movw	r0, #25988	; 0x6584
   18f90:	movt	r0, #2
   18f94:	bl	129c8 <puts@plt>
   18f98:	mvn	r3, #0
   18f9c:	str	r3, [sp, #32]
   18fa0:	b	1a19c <test_scan@@Base+0x1908>
   18fa4:	ldr	r3, [pc, #2540]	; 19998 <test_scan@@Base+0x1104>
   18fa8:	movw	r2, #693	; 0x2b5
   18fac:	movw	r1, #20464	; 0x4ff0
   18fb0:	movt	r1, #2
   18fb4:	movw	r0, #20708	; 0x50e4
   18fb8:	movt	r0, #2
   18fbc:	bl	12a64 <__assert_fail@plt>
   18fc0:	sub	r6, r6, #1
   18fc4:	cmn	r6, #1
   18fc8:	beq	190d8 <test_scan@@Base+0x844>
   18fcc:	mov	r3, r8
   18fd0:	cmp	r4, r6
   18fd4:	bls	18fa4 <test_scan@@Base+0x710>
   18fd8:	sub	r8, r8, #4
   18fdc:	ldr	r0, [r3]
   18fe0:	add	r0, r3, r0
   18fe4:	bl	12f74 <_start@@Base+0x504>
   18fe8:	cmp	r0, #0
   18fec:	beq	18fc0 <test_scan@@Base+0x72c>
   18ff0:	ldr	r9, [r0, #-4]
   18ff4:	cmp	r9, #5
   18ff8:	movcc	r2, r9
   18ffc:	movcs	r2, #5
   19000:	mov	r1, r7
   19004:	bl	12a4c <strncmp@plt>
   19008:	cmp	r0, #0
   1900c:	bne	18fc0 <test_scan@@Base+0x72c>
   19010:	cmp	r9, #5
   19014:	bne	18fc0 <test_scan@@Base+0x72c>
   19018:	cmp	r6, #1
   1901c:	bne	190d8 <test_scan@@Base+0x844>
   19020:	movw	r3, #23580	; 0x5c1c
   19024:	movt	r3, #2
   19028:	mvn	r2, #0
   1902c:	mov	r1, #2
   19030:	mov	r0, fp
   19034:	bl	143e8 <_start@@Base+0x1978>
   19038:	cmn	r0, #1
   1903c:	bne	190f0 <test_scan@@Base+0x85c>
   19040:	movw	r1, #25836	; 0x64ec
   19044:	movt	r1, #2
   19048:	mov	r0, fp
   1904c:	bl	141dc <_start@@Base+0x176c>
   19050:	cmn	r0, #1
   19054:	bne	19108 <test_scan@@Base+0x874>
   19058:	movw	r1, #23480	; 0x5bb8
   1905c:	movt	r1, #2
   19060:	mov	r0, fp
   19064:	bl	141dc <_start@@Base+0x176c>
   19068:	cmp	r0, #0
   1906c:	bne	19120 <test_scan@@Base+0x88c>
   19070:	movw	r1, #23624	; 0x5c48
   19074:	movt	r1, #2
   19078:	mov	r0, fp
   1907c:	bl	141dc <_start@@Base+0x176c>
   19080:	cmp	r0, #2
   19084:	bne	19138 <test_scan@@Base+0x8a4>
   19088:	ldr	r7, [sp, #16]
   1908c:	ldr	r6, [sp, #12]
   19090:	movw	r8, #23624	; 0x5c48
   19094:	movt	r8, #2
   19098:	cmn	r6, #1
   1909c:	beq	19188 <test_scan@@Base+0x8f4>
   190a0:	mov	r3, r7
   190a4:	cmp	r6, r4
   190a8:	bcs	19150 <test_scan@@Base+0x8bc>
   190ac:	sub	r7, r7, #4
   190b0:	ldr	r0, [r3]
   190b4:	add	r0, r3, r0
   190b8:	bl	12f74 <_start@@Base+0x504>
   190bc:	mov	r1, r8
   190c0:	bl	12968 <strcmp@plt>
   190c4:	sub	r3, r6, #1
   190c8:	cmp	r0, #0
   190cc:	beq	1916c <test_scan@@Base+0x8d8>
   190d0:	mov	r6, r3
   190d4:	b	19098 <test_scan@@Base+0x804>
   190d8:	movw	r0, #25988	; 0x6584
   190dc:	movt	r0, #2
   190e0:	bl	129c8 <puts@plt>
   190e4:	mvn	r3, #0
   190e8:	str	r3, [sp, #32]
   190ec:	b	1a19c <test_scan@@Base+0x1908>
   190f0:	movw	r0, #26028	; 0x65ac
   190f4:	movt	r0, #2
   190f8:	bl	129c8 <puts@plt>
   190fc:	mvn	r3, #0
   19100:	str	r3, [sp, #32]
   19104:	b	1a19c <test_scan@@Base+0x1908>
   19108:	movw	r0, #25844	; 0x64f4
   1910c:	movt	r0, #2
   19110:	bl	129c8 <puts@plt>
   19114:	mvn	r3, #0
   19118:	str	r3, [sp, #32]
   1911c:	b	1a19c <test_scan@@Base+0x1908>
   19120:	movw	r0, #25892	; 0x6524
   19124:	movt	r0, #2
   19128:	bl	129c8 <puts@plt>
   1912c:	mvn	r3, #0
   19130:	str	r3, [sp, #32]
   19134:	b	1a19c <test_scan@@Base+0x1908>
   19138:	movw	r0, #26164	; 0x6634
   1913c:	movt	r0, #2
   19140:	bl	129c8 <puts@plt>
   19144:	mvn	r3, #0
   19148:	str	r3, [sp, #32]
   1914c:	b	1a19c <test_scan@@Base+0x1908>
   19150:	ldr	r3, [pc, #2112]	; 19998 <test_scan@@Base+0x1104>
   19154:	movw	r2, #693	; 0x2b5
   19158:	movw	r1, #20464	; 0x4ff0
   1915c:	movt	r1, #2
   19160:	movw	r0, #20708	; 0x50e4
   19164:	movt	r0, #2
   19168:	bl	12a64 <__assert_fail@plt>
   1916c:	cmp	r6, #4
   19170:	bne	19188 <test_scan@@Base+0x8f4>
   19174:	ldr	r8, [sp, #16]
   19178:	ldr	r6, [sp, #12]
   1917c:	movw	r9, #26072	; 0x65d8
   19180:	movt	r9, #2
   19184:	b	191c0 <test_scan@@Base+0x92c>
   19188:	movw	r0, #26164	; 0x6634
   1918c:	movt	r0, #2
   19190:	bl	129c8 <puts@plt>
   19194:	mvn	r3, #0
   19198:	str	r3, [sp, #32]
   1919c:	b	1a19c <test_scan@@Base+0x1908>
   191a0:	ldr	r3, [pc, #2032]	; 19998 <test_scan@@Base+0x1104>
   191a4:	movw	r2, #693	; 0x2b5
   191a8:	movw	r1, #20464	; 0x4ff0
   191ac:	movt	r1, #2
   191b0:	movw	r0, #20708	; 0x50e4
   191b4:	movt	r0, #2
   191b8:	bl	12a64 <__assert_fail@plt>
   191bc:	sub	r6, r6, #1
   191c0:	cmn	r6, #1
   191c4:	beq	192e4 <test_scan@@Base+0xa50>
   191c8:	mov	r3, r8
   191cc:	cmp	r4, r6
   191d0:	bls	191a0 <test_scan@@Base+0x90c>
   191d4:	sub	r8, r8, #4
   191d8:	ldr	r0, [r3]
   191dc:	add	r0, r3, r0
   191e0:	bl	12f74 <_start@@Base+0x504>
   191e4:	cmp	r0, #0
   191e8:	beq	191bc <test_scan@@Base+0x928>
   191ec:	ldr	r7, [r0, #-4]
   191f0:	cmp	r7, #8
   191f4:	movcc	r2, r7
   191f8:	movcs	r2, #8
   191fc:	mov	r1, r9
   19200:	bl	12a4c <strncmp@plt>
   19204:	cmp	r0, #0
   19208:	bne	191bc <test_scan@@Base+0x928>
   1920c:	cmp	r7, #8
   19210:	bne	191bc <test_scan@@Base+0x928>
   19214:	cmp	r6, #4
   19218:	bne	192e4 <test_scan@@Base+0xa50>
   1921c:	cmp	r4, #3
   19220:	movcc	r3, r4
   19224:	movcs	r3, #3
   19228:	sub	r6, r3, #-1073741823	; 0xc0000001
   1922c:	add	r6, fp, r6, lsl #2
   19230:	movw	r9, #26072	; 0x65d8
   19234:	movt	r9, #2
   19238:	sub	r7, r3, #1
   1923c:	cmp	r3, #1
   19240:	bls	19318 <test_scan@@Base+0xa84>
   19244:	mov	r3, r6
   19248:	cmp	r4, r7
   1924c:	bls	192fc <test_scan@@Base+0xa68>
   19250:	sub	r6, r6, #4
   19254:	ldr	r0, [r3]
   19258:	add	r0, r3, r0
   1925c:	bl	12f74 <_start@@Base+0x504>
   19260:	mov	r3, r7
   19264:	cmp	r0, #0
   19268:	beq	19238 <test_scan@@Base+0x9a4>
   1926c:	ldr	r8, [r0, #-4]
   19270:	cmp	r8, #8
   19274:	movcc	r2, r8
   19278:	movcs	r2, #8
   1927c:	mov	r1, r9
   19280:	bl	12a4c <strncmp@plt>
   19284:	mov	r3, r7
   19288:	cmp	r0, #0
   1928c:	bne	19238 <test_scan@@Base+0x9a4>
   19290:	cmp	r8, #8
   19294:	bne	19238 <test_scan@@Base+0x9a4>
   19298:	cmp	r7, #2
   1929c:	bne	19318 <test_scan@@Base+0xa84>
   192a0:	movw	r3, #23624	; 0x5c48
   192a4:	movt	r3, #2
   192a8:	mvn	r2, #0
   192ac:	mov	r1, #2
   192b0:	mov	r0, fp
   192b4:	bl	143e8 <_start@@Base+0x1978>
   192b8:	mov	r6, r0
   192bc:	cmp	r0, #2
   192c0:	bne	19330 <test_scan@@Base+0xa9c>
   192c4:	cmp	r4, #2
   192c8:	bls	1973c <test_scan@@Base+0xea8>
   192cc:	add	r3, fp, #8
   192d0:	str	r3, [sp, #48]	; 0x30
   192d4:	mov	r8, r3
   192d8:	movw	r9, #26072	; 0x65d8
   192dc:	movt	r9, #2
   192e0:	b	19354 <test_scan@@Base+0xac0>
   192e4:	movw	r0, #26084	; 0x65e4
   192e8:	movt	r0, #2
   192ec:	bl	129c8 <puts@plt>
   192f0:	mvn	r3, #0
   192f4:	str	r3, [sp, #32]
   192f8:	b	1a19c <test_scan@@Base+0x1908>
   192fc:	ldr	r3, [pc, #1684]	; 19998 <test_scan@@Base+0x1104>
   19300:	movw	r2, #693	; 0x2b5
   19304:	movw	r1, #20464	; 0x4ff0
   19308:	movt	r1, #2
   1930c:	movw	r0, #20708	; 0x50e4
   19310:	movt	r0, #2
   19314:	bl	12a64 <__assert_fail@plt>
   19318:	movw	r0, #26084	; 0x65e4
   1931c:	movt	r0, #2
   19320:	bl	129c8 <puts@plt>
   19324:	mvn	r3, #0
   19328:	str	r3, [sp, #32]
   1932c:	b	1a19c <test_scan@@Base+0x1908>
   19330:	movw	r0, #26112	; 0x6600
   19334:	movt	r0, #2
   19338:	bl	129c8 <puts@plt>
   1933c:	mvn	r3, #0
   19340:	str	r3, [sp, #32]
   19344:	b	1a19c <test_scan@@Base+0x1908>
   19348:	add	r6, r6, #1
   1934c:	cmp	r4, r6
   19350:	beq	1973c <test_scan@@Base+0xea8>
   19354:	mov	r3, r8
   19358:	add	r8, r8, #4
   1935c:	ldr	r0, [r3]
   19360:	add	r0, r3, r0
   19364:	bl	12f74 <_start@@Base+0x504>
   19368:	cmp	r0, #0
   1936c:	beq	19348 <test_scan@@Base+0xab4>
   19370:	ldr	r7, [r0, #-4]
   19374:	cmp	r7, #8
   19378:	movcc	r2, r7
   1937c:	movcs	r2, #8
   19380:	mov	r1, r9
   19384:	bl	12a4c <strncmp@plt>
   19388:	cmp	r0, #0
   1938c:	bne	19348 <test_scan@@Base+0xab4>
   19390:	cmp	r7, #8
   19394:	bne	19348 <test_scan@@Base+0xab4>
   19398:	str	r0, [sp, #32]
   1939c:	cmp	r6, #2
   193a0:	bne	1973c <test_scan@@Base+0xea8>
   193a4:	movw	r3, #23624	; 0x5c48
   193a8:	movt	r3, #2
   193ac:	mvn	r2, #0
   193b0:	mov	r1, #3
   193b4:	mov	r0, fp
   193b8:	bl	143e8 <_start@@Base+0x1978>
   193bc:	cmp	r0, #4
   193c0:	bne	19754 <test_scan@@Base+0xec0>
   193c4:	movw	r3, #25836	; 0x64ec
   193c8:	movt	r3, #2
   193cc:	mov	r2, #3
   193d0:	mov	r1, #1
   193d4:	mov	r0, fp
   193d8:	bl	143e8 <_start@@Base+0x1978>
   193dc:	cmn	r0, #1
   193e0:	bne	1976c <test_scan@@Base+0xed8>
   193e4:	movw	r3, #23480	; 0x5bb8
   193e8:	movt	r3, #2
   193ec:	mov	r2, #3
   193f0:	mov	r1, #1
   193f4:	mov	r0, fp
   193f8:	bl	143e8 <_start@@Base+0x1978>
   193fc:	cmn	r0, #1
   19400:	bne	19784 <test_scan@@Base+0xef0>
   19404:	movw	r3, #23580	; 0x5c1c
   19408:	movt	r3, #2
   1940c:	mov	r2, #3
   19410:	mov	r1, #1
   19414:	mov	r0, fp
   19418:	bl	143e8 <_start@@Base+0x1978>
   1941c:	cmp	r0, #1
   19420:	bne	1979c <test_scan@@Base+0xf08>
   19424:	movw	r3, #23624	; 0x5c48
   19428:	movt	r3, #2
   1942c:	mov	r2, #3
   19430:	mov	r1, #1
   19434:	mov	r0, fp
   19438:	bl	143e8 <_start@@Base+0x1978>
   1943c:	cmp	r0, #2
   19440:	bne	197b4 <test_scan@@Base+0xf20>
   19444:	movw	r3, #25348	; 0x6304
   19448:	movt	r3, #2
   1944c:	mov	r2, #3
   19450:	mov	r1, #1
   19454:	mov	r0, fp
   19458:	bl	143e8 <_start@@Base+0x1978>
   1945c:	cmn	r0, #1
   19460:	bne	197cc <test_scan@@Base+0xf38>
   19464:	movw	r3, #25836	; 0x64ec
   19468:	movt	r3, #2
   1946c:	mov	r2, #3
   19470:	mov	r1, #1
   19474:	mov	r0, fp
   19478:	bl	142cc <_start@@Base+0x185c>
   1947c:	cmn	r0, #1
   19480:	bne	197e4 <test_scan@@Base+0xf50>
   19484:	movw	r3, #23480	; 0x5bb8
   19488:	movt	r3, #2
   1948c:	mov	r2, #3
   19490:	mov	r1, #1
   19494:	mov	r0, fp
   19498:	bl	142cc <_start@@Base+0x185c>
   1949c:	cmn	r0, #1
   194a0:	bne	197fc <test_scan@@Base+0xf68>
   194a4:	movw	r3, #23580	; 0x5c1c
   194a8:	movt	r3, #2
   194ac:	mov	r2, #3
   194b0:	mov	r1, #1
   194b4:	mov	r0, fp
   194b8:	bl	142cc <_start@@Base+0x185c>
   194bc:	cmp	r0, #1
   194c0:	bne	19814 <test_scan@@Base+0xf80>
   194c4:	movw	r3, #23624	; 0x5c48
   194c8:	movt	r3, #2
   194cc:	mov	r2, #3
   194d0:	mov	r1, #1
   194d4:	mov	r0, fp
   194d8:	bl	142cc <_start@@Base+0x185c>
   194dc:	cmp	r0, #2
   194e0:	bne	1982c <test_scan@@Base+0xf98>
   194e4:	movw	r3, #25348	; 0x6304
   194e8:	movt	r3, #2
   194ec:	mov	r2, #3
   194f0:	mov	r1, #1
   194f4:	mov	r0, fp
   194f8:	bl	142cc <_start@@Base+0x185c>
   194fc:	cmn	r0, #1
   19500:	bne	19844 <test_scan@@Base+0xfb0>
   19504:	movw	r3, #23480	; 0x5bb8
   19508:	movt	r3, #2
   1950c:	mov	r2, #0
   19510:	mov	r1, r2
   19514:	mov	r0, fp
   19518:	bl	143e8 <_start@@Base+0x1978>
   1951c:	cmn	r0, #1
   19520:	bne	1985c <test_scan@@Base+0xfc8>
   19524:	movw	r3, #23580	; 0x5c1c
   19528:	movt	r3, #2
   1952c:	mov	r2, #0
   19530:	mov	r1, r2
   19534:	mov	r0, fp
   19538:	bl	143e8 <_start@@Base+0x1978>
   1953c:	cmn	r0, #1
   19540:	bne	19874 <test_scan@@Base+0xfe0>
   19544:	movw	r3, #23580	; 0x5c1c
   19548:	movt	r3, #2
   1954c:	mov	r2, #1
   19550:	mov	r1, r2
   19554:	mov	r0, fp
   19558:	bl	143e8 <_start@@Base+0x1978>
   1955c:	cmn	r0, #1
   19560:	bne	1988c <test_scan@@Base+0xff8>
   19564:	movw	r3, #23480	; 0x5bb8
   19568:	movt	r3, #2
   1956c:	mvn	r2, #0
   19570:	mov	r1, r4
   19574:	mov	r0, fp
   19578:	bl	143e8 <_start@@Base+0x1978>
   1957c:	cmn	r0, #1
   19580:	bne	198a4 <test_scan@@Base+0x1010>
   19584:	movw	r3, #23480	; 0x5bb8
   19588:	movt	r3, #2
   1958c:	mov	r2, #0
   19590:	mov	r1, r2
   19594:	mov	r0, fp
   19598:	bl	142cc <_start@@Base+0x185c>
   1959c:	cmn	r0, #1
   195a0:	bne	198bc <test_scan@@Base+0x1028>
   195a4:	movw	r3, #23580	; 0x5c1c
   195a8:	movt	r3, #2
   195ac:	mov	r2, #0
   195b0:	mov	r1, r2
   195b4:	mov	r0, fp
   195b8:	bl	142cc <_start@@Base+0x185c>
   195bc:	cmn	r0, #1
   195c0:	bne	198d4 <test_scan@@Base+0x1040>
   195c4:	movw	r3, #23580	; 0x5c1c
   195c8:	movt	r3, #2
   195cc:	mov	r2, #1
   195d0:	mov	r1, r2
   195d4:	mov	r0, fp
   195d8:	bl	142cc <_start@@Base+0x185c>
   195dc:	cmn	r0, #1
   195e0:	bne	198ec <test_scan@@Base+0x1058>
   195e4:	movw	r3, #23480	; 0x5bb8
   195e8:	movt	r3, #2
   195ec:	mvn	r2, #0
   195f0:	mov	r1, r4
   195f4:	mov	r0, fp
   195f8:	bl	142cc <_start@@Base+0x185c>
   195fc:	cmn	r0, #1
   19600:	bne	19904 <test_scan@@Base+0x1070>
   19604:	movw	r1, #23580	; 0x5c1c
   19608:	movt	r1, #2
   1960c:	mov	r0, fp
   19610:	bl	13fe0 <_start@@Base+0x1570>
   19614:	cmp	r0, #1
   19618:	bne	1991c <test_scan@@Base+0x1088>
   1961c:	movw	r1, #25836	; 0x64ec
   19620:	movt	r1, #2
   19624:	mov	r0, fp
   19628:	bl	13fe0 <_start@@Base+0x1570>
   1962c:	subs	r3, r0, #0
   19630:	str	r3, [sp, #20]
   19634:	bne	19934 <test_scan@@Base+0x10a0>
   19638:	movw	r1, #23480	; 0x5bb8
   1963c:	movt	r1, #2
   19640:	mov	r0, fp
   19644:	bl	13fe0 <_start@@Base+0x1570>
   19648:	str	r0, [sp, #52]	; 0x34
   1964c:	cmp	r0, #1
   19650:	bne	1994c <test_scan@@Base+0x10b8>
   19654:	movw	r1, #23624	; 0x5c48
   19658:	movt	r1, #2
   1965c:	mov	r0, fp
   19660:	bl	13fe0 <_start@@Base+0x1570>
   19664:	cmp	r0, #2
   19668:	bne	19964 <test_scan@@Base+0x10d0>
   1966c:	ldr	r2, [r5, #-4]
   19670:	cmp	r2, #0
   19674:	beq	199a0 <test_scan@@Base+0x110c>
   19678:	ldr	r3, [sp, #40]	; 0x28
   1967c:	ldr	r1, [sp, #44]	; 0x2c
   19680:	ldrb	ip, [r3, r1]
   19684:	cmp	ip, #6
   19688:	beq	196bc <test_scan@@Base+0xe28>
   1968c:	add	r1, r5, r2
   19690:	sub	r1, r1, #1
   19694:	mov	r3, r5
   19698:	rsb	lr, r5, #1
   1969c:	add	r6, lr, r3
   196a0:	cmp	r3, r1
   196a4:	beq	199a0 <test_scan@@Base+0x110c>
   196a8:	ldrb	r0, [r3, #1]!
   196ac:	cmp	r0, #6
   196b0:	bne	1969c <test_scan@@Base+0xe08>
   196b4:	cmp	r6, #0
   196b8:	bne	199a0 <test_scan@@Base+0x110c>
   196bc:	cmp	ip, #1
   196c0:	beq	199b8 <test_scan@@Base+0x1124>
   196c4:	mov	lr, r5
   196c8:	add	r3, r5, r2
   196cc:	sub	r3, r3, #1
   196d0:	mov	r0, r5
   196d4:	rsb	r1, r5, #1
   196d8:	add	r7, r1, r0
   196dc:	cmp	r3, r0
   196e0:	beq	199b8 <test_scan@@Base+0x1124>
   196e4:	ldrb	r6, [r0, #1]!
   196e8:	cmp	r6, #1
   196ec:	bne	196d8 <test_scan@@Base+0xe44>
   196f0:	cmp	r7, #2
   196f4:	bne	199b8 <test_scan@@Base+0x1124>
   196f8:	cmp	r2, #3
   196fc:	bls	199d0 <test_scan@@Base+0x113c>
   19700:	ldrb	r0, [r5, #3]
   19704:	cmp	r0, #1
   19708:	beq	19724 <test_scan@@Base+0xe90>
   1970c:	add	r0, r5, #3
   19710:	cmp	r3, r0
   19714:	beq	199d0 <test_scan@@Base+0x113c>
   19718:	ldrb	r6, [r0, #1]!
   1971c:	cmp	r6, #1
   19720:	bne	19710 <test_scan@@Base+0xe7c>
   19724:	movw	r0, #27272	; 0x6a88
   19728:	movt	r0, #2
   1972c:	bl	129c8 <puts@plt>
   19730:	mvn	r3, #0
   19734:	str	r3, [sp, #32]
   19738:	b	1a19c <test_scan@@Base+0x1908>
   1973c:	movw	r0, #26112	; 0x6600
   19740:	movt	r0, #2
   19744:	bl	129c8 <puts@plt>
   19748:	mvn	r3, #0
   1974c:	str	r3, [sp, #32]
   19750:	b	1a19c <test_scan@@Base+0x1908>
   19754:	movw	r0, #26156	; 0x662c
   19758:	movt	r0, #2
   1975c:	bl	129c8 <puts@plt>
   19760:	mvn	r3, #0
   19764:	str	r3, [sp, #32]
   19768:	b	1a19c <test_scan@@Base+0x1908>
   1976c:	movw	r0, #26184	; 0x6648
   19770:	movt	r0, #2
   19774:	bl	129c8 <puts@plt>
   19778:	mvn	r3, #0
   1977c:	str	r3, [sp, #32]
   19780:	b	1a19c <test_scan@@Base+0x1908>
   19784:	movw	r0, #26220	; 0x666c
   19788:	movt	r0, #2
   1978c:	bl	129c8 <puts@plt>
   19790:	mvn	r3, #0
   19794:	str	r3, [sp, #32]
   19798:	b	1a19c <test_scan@@Base+0x1908>
   1979c:	movw	r0, #26256	; 0x6690
   197a0:	movt	r0, #2
   197a4:	bl	129c8 <puts@plt>
   197a8:	mvn	r3, #0
   197ac:	str	r3, [sp, #32]
   197b0:	b	1a19c <test_scan@@Base+0x1908>
   197b4:	movw	r0, #26292	; 0x66b4
   197b8:	movt	r0, #2
   197bc:	bl	129c8 <puts@plt>
   197c0:	mvn	r3, #0
   197c4:	str	r3, [sp, #32]
   197c8:	b	1a19c <test_scan@@Base+0x1908>
   197cc:	movw	r0, #26332	; 0x66dc
   197d0:	movt	r0, #2
   197d4:	bl	129c8 <puts@plt>
   197d8:	mvn	r3, #0
   197dc:	str	r3, [sp, #32]
   197e0:	b	1a19c <test_scan@@Base+0x1908>
   197e4:	movw	r0, #26376	; 0x6708
   197e8:	movt	r0, #2
   197ec:	bl	129c8 <puts@plt>
   197f0:	mvn	r3, #0
   197f4:	str	r3, [sp, #32]
   197f8:	b	1a19c <test_scan@@Base+0x1908>
   197fc:	movw	r0, #26424	; 0x6738
   19800:	movt	r0, #2
   19804:	bl	129c8 <puts@plt>
   19808:	mvn	r3, #0
   1980c:	str	r3, [sp, #32]
   19810:	b	1a19c <test_scan@@Base+0x1908>
   19814:	movw	r0, #26468	; 0x6764
   19818:	movt	r0, #2
   1981c:	bl	129c8 <puts@plt>
   19820:	mvn	r3, #0
   19824:	str	r3, [sp, #32]
   19828:	b	1a19c <test_scan@@Base+0x1908>
   1982c:	movw	r0, #26508	; 0x678c
   19830:	movt	r0, #2
   19834:	bl	129c8 <puts@plt>
   19838:	mvn	r3, #0
   1983c:	str	r3, [sp, #32]
   19840:	b	1a19c <test_scan@@Base+0x1908>
   19844:	movw	r0, #26548	; 0x67b4
   19848:	movt	r0, #2
   1984c:	bl	129c8 <puts@plt>
   19850:	mvn	r3, #0
   19854:	str	r3, [sp, #32]
   19858:	b	1a19c <test_scan@@Base+0x1908>
   1985c:	movw	r0, #26592	; 0x67e0
   19860:	movt	r0, #2
   19864:	bl	129c8 <puts@plt>
   19868:	mvn	r3, #0
   1986c:	str	r3, [sp, #32]
   19870:	b	1a19c <test_scan@@Base+0x1908>
   19874:	movw	r0, #26624	; 0x6800
   19878:	movt	r0, #2
   1987c:	bl	129c8 <puts@plt>
   19880:	mvn	r3, #0
   19884:	str	r3, [sp, #32]
   19888:	b	1a19c <test_scan@@Base+0x1908>
   1988c:	movw	r0, #26656	; 0x6820
   19890:	movt	r0, #2
   19894:	bl	129c8 <puts@plt>
   19898:	mvn	r3, #0
   1989c:	str	r3, [sp, #32]
   198a0:	b	1a19c <test_scan@@Base+0x1908>
   198a4:	movw	r0, #26696	; 0x6848
   198a8:	movt	r0, #2
   198ac:	bl	129c8 <puts@plt>
   198b0:	mvn	r3, #0
   198b4:	str	r3, [sp, #32]
   198b8:	b	1a19c <test_scan@@Base+0x1908>
   198bc:	movw	r0, #26592	; 0x67e0
   198c0:	movt	r0, #2
   198c4:	bl	129c8 <puts@plt>
   198c8:	mvn	r3, #0
   198cc:	str	r3, [sp, #32]
   198d0:	b	1a19c <test_scan@@Base+0x1908>
   198d4:	movw	r0, #26624	; 0x6800
   198d8:	movt	r0, #2
   198dc:	bl	129c8 <puts@plt>
   198e0:	mvn	r3, #0
   198e4:	str	r3, [sp, #32]
   198e8:	b	1a19c <test_scan@@Base+0x1908>
   198ec:	movw	r0, #26656	; 0x6820
   198f0:	movt	r0, #2
   198f4:	bl	129c8 <puts@plt>
   198f8:	mvn	r3, #0
   198fc:	str	r3, [sp, #32]
   19900:	b	1a19c <test_scan@@Base+0x1908>
   19904:	movw	r0, #26696	; 0x6848
   19908:	movt	r0, #2
   1990c:	bl	129c8 <puts@plt>
   19910:	mvn	r3, #0
   19914:	str	r3, [sp, #32]
   19918:	b	1a19c <test_scan@@Base+0x1908>
   1991c:	movw	r0, #26740	; 0x6874
   19920:	movt	r0, #2
   19924:	bl	129c8 <puts@plt>
   19928:	mvn	r3, #0
   1992c:	str	r3, [sp, #32]
   19930:	b	1a19c <test_scan@@Base+0x1908>
   19934:	movw	r0, #26768	; 0x6890
   19938:	movt	r0, #2
   1993c:	bl	129c8 <puts@plt>
   19940:	mvn	r3, #0
   19944:	str	r3, [sp, #32]
   19948:	b	1a19c <test_scan@@Base+0x1908>
   1994c:	movw	r0, #26796	; 0x68ac
   19950:	movt	r0, #2
   19954:	bl	129c8 <puts@plt>
   19958:	mvn	r3, #0
   1995c:	str	r3, [sp, #32]
   19960:	b	1a19c <test_scan@@Base+0x1908>
   19964:	movw	r0, #26824	; 0x68c8
   19968:	movt	r0, #2
   1996c:	bl	129c8 <puts@plt>
   19970:	mvn	r3, #0
   19974:	str	r3, [sp, #32]
   19978:	b	1a19c <test_scan@@Base+0x1908>
   1997c:	andeq	r4, r2, r0, asr #20
   19980:	andeq	r4, r2, ip, ror r9
   19984:	andeq	r4, r2, r4, asr #20
   19988:	strdeq	r4, [r2], -r0
   1998c:	andeq	r4, r2, r0, lsr #23
   19990:	andeq	r4, r2, ip, lsr #23
   19994:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   19998:	andeq	r4, r2, ip, lsl r9
   1999c:	andeq	r4, r2, r8, asr #23
   199a0:	movw	r0, #26856	; 0x68e8
   199a4:	movt	r0, #2
   199a8:	bl	129c8 <puts@plt>
   199ac:	mvn	r3, #0
   199b0:	str	r3, [sp, #32]
   199b4:	b	1a19c <test_scan@@Base+0x1908>
   199b8:	movw	r0, #26900	; 0x6914
   199bc:	movt	r0, #2
   199c0:	bl	129c8 <puts@plt>
   199c4:	mvn	r3, #0
   199c8:	str	r3, [sp, #32]
   199cc:	b	1a19c <test_scan@@Base+0x1908>
   199d0:	cmp	ip, #5
   199d4:	beq	19b90 <test_scan@@Base+0x12fc>
   199d8:	mov	r0, r5
   199dc:	add	r7, r1, r0
   199e0:	cmp	r3, r0
   199e4:	beq	199fc <test_scan@@Base+0x1168>
   199e8:	ldrb	r6, [r0, #1]!
   199ec:	cmp	r6, #5
   199f0:	bne	199dc <test_scan@@Base+0x1148>
   199f4:	cmn	r7, #1
   199f8:	bne	19b90 <test_scan@@Base+0x12fc>
   199fc:	cmp	ip, #2
   19a00:	beq	19ba8 <test_scan@@Base+0x1314>
   19a04:	mov	r0, r5
   19a08:	add	r7, r0, r1
   19a0c:	cmp	r3, r0
   19a10:	beq	19ba8 <test_scan@@Base+0x1314>
   19a14:	ldrb	r6, [r0, #1]!
   19a18:	cmp	r6, #2
   19a1c:	bne	19a08 <test_scan@@Base+0x1174>
   19a20:	cmp	r7, #6
   19a24:	bne	19ba8 <test_scan@@Base+0x1314>
   19a28:	cmp	ip, #3
   19a2c:	beq	19bc0 <test_scan@@Base+0x132c>
   19a30:	mov	r0, r5
   19a34:	add	r6, r1, r0
   19a38:	cmp	r3, r0
   19a3c:	beq	19bc0 <test_scan@@Base+0x132c>
   19a40:	ldrb	ip, [r0, #1]!
   19a44:	cmp	ip, #3
   19a48:	bne	19a34 <test_scan@@Base+0x11a0>
   19a4c:	cmp	r6, #3
   19a50:	bne	19bc0 <test_scan@@Base+0x132c>
   19a54:	cmp	r2, #3
   19a58:	bls	19bd8 <test_scan@@Base+0x1344>
   19a5c:	ldrb	r0, [r5, #3]
   19a60:	cmp	r0, #3
   19a64:	beq	19a8c <test_scan@@Base+0x11f8>
   19a68:	add	r0, r5, #3
   19a6c:	add	r6, r1, r0
   19a70:	cmp	r3, r0
   19a74:	beq	19bd8 <test_scan@@Base+0x1344>
   19a78:	ldrb	ip, [r0, #1]!
   19a7c:	cmp	ip, #3
   19a80:	bne	19a6c <test_scan@@Base+0x11d8>
   19a84:	cmp	r6, #3
   19a88:	bne	19bd8 <test_scan@@Base+0x1344>
   19a8c:	cmp	r2, #4
   19a90:	bls	19bf0 <test_scan@@Base+0x135c>
   19a94:	ldrb	r0, [r5, #4]
   19a98:	cmp	r0, #3
   19a9c:	beq	19bf0 <test_scan@@Base+0x135c>
   19aa0:	add	r0, r5, #4
   19aa4:	add	r6, r1, r0
   19aa8:	cmp	r3, r0
   19aac:	beq	19bf0 <test_scan@@Base+0x135c>
   19ab0:	ldrb	ip, [r0, #1]!
   19ab4:	cmp	ip, #3
   19ab8:	bne	19aa4 <test_scan@@Base+0x1210>
   19abc:	cmp	r6, #5
   19ac0:	bne	19bf0 <test_scan@@Base+0x135c>
   19ac4:	add	r1, r5, r2
   19ac8:	mov	r3, r2
   19acc:	sub	r3, r3, #1
   19ad0:	cmp	lr, r1
   19ad4:	beq	19c24 <test_scan@@Base+0x1390>
   19ad8:	cmp	r3, r2
   19adc:	bcs	19c08 <test_scan@@Base+0x1374>
   19ae0:	ldrb	r0, [r1, #-1]!
   19ae4:	cmp	r0, #3
   19ae8:	bne	19acc <test_scan@@Base+0x1238>
   19aec:	cmp	r3, #5
   19af0:	bne	19c24 <test_scan@@Base+0x1390>
   19af4:	cmp	r2, #4
   19af8:	movcc	r3, r2
   19afc:	movcs	r3, #4
   19b00:	add	r5, r5, r3
   19b04:	sub	r1, r3, #1
   19b08:	cmp	r3, #1
   19b0c:	bls	19c58 <test_scan@@Base+0x13c4>
   19b10:	cmp	r1, r2
   19b14:	bcs	19c3c <test_scan@@Base+0x13a8>
   19b18:	mov	r3, r1
   19b1c:	ldrb	r0, [r5, #-1]!
   19b20:	cmp	r0, #3
   19b24:	bne	19b04 <test_scan@@Base+0x1270>
   19b28:	cmp	r1, #3
   19b2c:	bne	19c58 <test_scan@@Base+0x13c4>
   19b30:	ldr	r3, [sp, #24]
   19b34:	ldr	r5, [r3, #-4]
   19b38:	cmp	r5, #0
   19b3c:	beq	19dd4 <test_scan@@Base+0x1540>
   19b40:	ldr	r8, [sp, #24]
   19b44:	mov	r7, r8
   19b48:	ldr	r6, [sp, #20]
   19b4c:	movw	r9, #23872	; 0x5d40
   19b50:	movt	r9, #2
   19b54:	mov	r0, r8
   19b58:	add	r8, r8, #4
   19b5c:	ldr	r3, [r0]
   19b60:	add	r3, r3, #4
   19b64:	mov	r1, r9
   19b68:	add	r0, r0, r3
   19b6c:	bl	12968 <strcmp@plt>
   19b70:	cmp	r0, #0
   19b74:	beq	19c70 <test_scan@@Base+0x13dc>
   19b78:	add	r6, r6, #1
   19b7c:	cmp	r5, r6
   19b80:	bne	19b54 <test_scan@@Base+0x12c0>
   19b84:	ldr	r8, [sp, #24]
   19b88:	ldr	r6, [sp, #20]
   19b8c:	b	19c78 <test_scan@@Base+0x13e4>
   19b90:	movw	r0, #26948	; 0x6944
   19b94:	movt	r0, #2
   19b98:	bl	129c8 <puts@plt>
   19b9c:	mvn	r3, #0
   19ba0:	str	r3, [sp, #32]
   19ba4:	b	1a19c <test_scan@@Base+0x1908>
   19ba8:	movw	r0, #27000	; 0x6978
   19bac:	movt	r0, #2
   19bb0:	bl	129c8 <puts@plt>
   19bb4:	mvn	r3, #0
   19bb8:	str	r3, [sp, #32]
   19bbc:	b	1a19c <test_scan@@Base+0x1908>
   19bc0:	movw	r0, #26948	; 0x6944
   19bc4:	movt	r0, #2
   19bc8:	bl	129c8 <puts@plt>
   19bcc:	mvn	r3, #0
   19bd0:	str	r3, [sp, #32]
   19bd4:	b	1a19c <test_scan@@Base+0x1908>
   19bd8:	movw	r0, #27044	; 0x69a4
   19bdc:	movt	r0, #2
   19be0:	bl	129c8 <puts@plt>
   19be4:	mvn	r3, #0
   19be8:	str	r3, [sp, #32]
   19bec:	b	1a19c <test_scan@@Base+0x1908>
   19bf0:	movw	r0, #27104	; 0x69e0
   19bf4:	movt	r0, #2
   19bf8:	bl	129c8 <puts@plt>
   19bfc:	mvn	r3, #0
   19c00:	str	r3, [sp, #32]
   19c04:	b	1a19c <test_scan@@Base+0x1908>
   19c08:	ldr	r3, [pc, #-640]	; 19990 <test_scan@@Base+0x10fc>
   19c0c:	movw	r2, #395	; 0x18b
   19c10:	movw	r1, #20604	; 0x507c
   19c14:	movt	r1, #2
   19c18:	movw	r0, #20708	; 0x50e4
   19c1c:	movt	r0, #2
   19c20:	bl	12a64 <__assert_fail@plt>
   19c24:	movw	r0, #27164	; 0x6a1c
   19c28:	movt	r0, #2
   19c2c:	bl	129c8 <puts@plt>
   19c30:	mvn	r3, #0
   19c34:	str	r3, [sp, #32]
   19c38:	b	1a19c <test_scan@@Base+0x1908>
   19c3c:	ldr	r3, [pc, #-692]	; 19990 <test_scan@@Base+0x10fc>
   19c40:	movw	r2, #395	; 0x18b
   19c44:	movw	r1, #20604	; 0x507c
   19c48:	movt	r1, #2
   19c4c:	movw	r0, #20708	; 0x50e4
   19c50:	movt	r0, #2
   19c54:	bl	12a64 <__assert_fail@plt>
   19c58:	movw	r0, #27216	; 0x6a50
   19c5c:	movt	r0, #2
   19c60:	bl	129c8 <puts@plt>
   19c64:	mvn	r3, #0
   19c68:	str	r3, [sp, #32]
   19c6c:	b	1a19c <test_scan@@Base+0x1908>
   19c70:	ldr	r8, [sp, #24]
   19c74:	ldr	r6, [sp, #20]
   19c78:	movw	r9, #23872	; 0x5d40
   19c7c:	movt	r9, #2
   19c80:	mov	r0, r8
   19c84:	add	r8, r8, #4
   19c88:	ldr	r3, [r0]
   19c8c:	add	r3, r3, #4
   19c90:	mov	r1, r9
   19c94:	add	r0, r0, r3
   19c98:	bl	12968 <strcmp@plt>
   19c9c:	cmp	r0, #0
   19ca0:	beq	19cbc <test_scan@@Base+0x1428>
   19ca4:	add	r6, r6, #1
   19ca8:	cmp	r5, r6
   19cac:	bne	19c80 <test_scan@@Base+0x13ec>
   19cb0:	ldr	r8, [sp, #24]
   19cb4:	ldr	r9, [sp, #20]
   19cb8:	b	19cc4 <test_scan@@Base+0x1430>
   19cbc:	ldr	r8, [sp, #24]
   19cc0:	ldr	r9, [sp, #20]
   19cc4:	movw	r3, #23872	; 0x5d40
   19cc8:	movt	r3, #2
   19ccc:	str	r3, [sp, #40]	; 0x28
   19cd0:	b	19ce0 <test_scan@@Base+0x144c>
   19cd4:	add	r9, r9, #1
   19cd8:	cmp	r5, r9
   19cdc:	beq	19d30 <test_scan@@Base+0x149c>
   19ce0:	mov	r0, r8
   19ce4:	add	r8, r8, #4
   19ce8:	ldr	r3, [r0]
   19cec:	add	r3, r3, #4
   19cf0:	adds	r0, r0, r3
   19cf4:	beq	19cd4 <test_scan@@Base+0x1440>
   19cf8:	ldr	r6, [r0, #-4]
   19cfc:	cmp	r6, #4
   19d00:	movcc	r2, r6
   19d04:	movcs	r2, #4
   19d08:	ldr	r1, [sp, #40]	; 0x28
   19d0c:	bl	12a4c <strncmp@plt>
   19d10:	cmp	r0, #0
   19d14:	bne	19cd4 <test_scan@@Base+0x1440>
   19d18:	cmp	r6, #4
   19d1c:	bne	19cd4 <test_scan@@Base+0x1440>
   19d20:	ldr	r6, [sp, #20]
   19d24:	movw	r8, #23872	; 0x5d40
   19d28:	movt	r8, #2
   19d2c:	b	19d44 <test_scan@@Base+0x14b0>
   19d30:	ldr	r6, [sp, #20]
   19d34:	b	19d24 <test_scan@@Base+0x1490>
   19d38:	add	r6, r6, #1
   19d3c:	cmp	r5, r6
   19d40:	beq	19d84 <test_scan@@Base+0x14f0>
   19d44:	mov	r0, r7
   19d48:	add	r7, r7, #4
   19d4c:	ldr	r3, [r0]
   19d50:	add	r3, r3, #4
   19d54:	adds	r0, r0, r3
   19d58:	beq	19d38 <test_scan@@Base+0x14a4>
   19d5c:	ldr	r9, [r0, #-4]
   19d60:	cmp	r9, #4
   19d64:	movcc	r2, r9
   19d68:	movcs	r2, #4
   19d6c:	mov	r1, r8
   19d70:	bl	12a4c <strncmp@plt>
   19d74:	cmp	r0, #0
   19d78:	bne	19d38 <test_scan@@Base+0x14a4>
   19d7c:	cmp	r9, #4
   19d80:	bne	19d38 <test_scan@@Base+0x14a4>
   19d84:	sub	r6, r5, #1
   19d88:	sub	r7, r5, #-1073741823	; 0xc0000001
   19d8c:	ldr	r3, [sp, #24]
   19d90:	add	r7, r3, r7, lsl #2
   19d94:	movw	r8, #23872	; 0x5d40
   19d98:	movt	r8, #2
   19d9c:	mov	r0, r7
   19da0:	cmp	r5, r6
   19da4:	bls	19e3c <test_scan@@Base+0x15a8>
   19da8:	sub	r7, r7, #4
   19dac:	ldr	r3, [r0]
   19db0:	add	r3, r3, #4
   19db4:	mov	r1, r8
   19db8:	add	r0, r0, r3
   19dbc:	bl	12968 <strcmp@plt>
   19dc0:	sub	r6, r6, #1
   19dc4:	cmp	r0, #0
   19dc8:	beq	19dd4 <test_scan@@Base+0x1540>
   19dcc:	cmn	r6, #1
   19dd0:	bne	19d9c <test_scan@@Base+0x1508>
   19dd4:	sub	r6, r5, #1
   19dd8:	sub	r7, r5, #-1073741823	; 0xc0000001
   19ddc:	ldr	r3, [sp, #24]
   19de0:	add	r7, r3, r7, lsl #2
   19de4:	mov	r9, r7
   19de8:	mov	r8, r6
   19dec:	movw	r3, #23872	; 0x5d40
   19df0:	movt	r3, #2
   19df4:	str	r3, [sp, #24]
   19df8:	cmn	r8, #1
   19dfc:	beq	19e74 <test_scan@@Base+0x15e0>
   19e00:	mov	r0, r9
   19e04:	cmp	r8, r5
   19e08:	bcs	19e58 <test_scan@@Base+0x15c4>
   19e0c:	sub	r9, r9, #4
   19e10:	ldr	r3, [r0]
   19e14:	add	r3, r3, #4
   19e18:	ldr	r1, [sp, #24]
   19e1c:	add	r0, r0, r3
   19e20:	bl	12968 <strcmp@plt>
   19e24:	sub	r8, r8, #1
   19e28:	cmp	r0, #0
   19e2c:	bne	19df8 <test_scan@@Base+0x1564>
   19e30:	mov	r2, r7
   19e34:	mov	r8, r6
   19e38:	b	19e7c <test_scan@@Base+0x15e8>
   19e3c:	ldr	r3, [pc, #-1200]	; 19994 <test_scan@@Base+0x1100>
   19e40:	mov	r2, #108	; 0x6c
   19e44:	movw	r1, #20604	; 0x507c
   19e48:	movt	r1, #2
   19e4c:	movw	r0, #20708	; 0x50e4
   19e50:	movt	r0, #2
   19e54:	bl	12a64 <__assert_fail@plt>
   19e58:	ldr	r3, [pc, #-1228]	; 19994 <test_scan@@Base+0x1100>
   19e5c:	mov	r2, #108	; 0x6c
   19e60:	movw	r1, #20604	; 0x507c
   19e64:	movt	r1, #2
   19e68:	movw	r0, #20708	; 0x50e4
   19e6c:	movt	r0, #2
   19e70:	bl	12a64 <__assert_fail@plt>
   19e74:	mov	r2, r7
   19e78:	mov	r8, r6
   19e7c:	movw	r3, #23872	; 0x5d40
   19e80:	movt	r3, #2
   19e84:	str	r3, [sp, #40]	; 0x28
   19e88:	str	r4, [sp, #24]
   19e8c:	mov	r4, r2
   19e90:	b	19eb4 <test_scan@@Base+0x1620>
   19e94:	ldr	r3, [pc, #-1288]	; 19994 <test_scan@@Base+0x1100>
   19e98:	mov	r2, #108	; 0x6c
   19e9c:	movw	r1, #20604	; 0x507c
   19ea0:	movt	r1, #2
   19ea4:	movw	r0, #20708	; 0x50e4
   19ea8:	movt	r0, #2
   19eac:	bl	12a64 <__assert_fail@plt>
   19eb0:	sub	r8, r8, #1
   19eb4:	cmn	r8, #1
   19eb8:	beq	19f14 <test_scan@@Base+0x1680>
   19ebc:	mov	r0, r4
   19ec0:	cmp	r8, r5
   19ec4:	bcs	19e94 <test_scan@@Base+0x1600>
   19ec8:	sub	r4, r4, #4
   19ecc:	ldr	r3, [r0]
   19ed0:	add	r3, r3, #4
   19ed4:	adds	r0, r0, r3
   19ed8:	beq	19eb0 <test_scan@@Base+0x161c>
   19edc:	ldr	r9, [r0, #-4]
   19ee0:	cmp	r9, #4
   19ee4:	movcc	r2, r9
   19ee8:	movcs	r2, #4
   19eec:	ldr	r1, [sp, #40]	; 0x28
   19ef0:	bl	12a4c <strncmp@plt>
   19ef4:	cmp	r0, #0
   19ef8:	bne	19eb0 <test_scan@@Base+0x161c>
   19efc:	cmp	r9, #4
   19f00:	bne	19eb0 <test_scan@@Base+0x161c>
   19f04:	ldr	r4, [sp, #24]
   19f08:	movw	r8, #23872	; 0x5d40
   19f0c:	movt	r8, #2
   19f10:	b	19f3c <test_scan@@Base+0x16a8>
   19f14:	ldr	r4, [sp, #24]
   19f18:	b	19f08 <test_scan@@Base+0x1674>
   19f1c:	ldr	r3, [pc, #-1424]	; 19994 <test_scan@@Base+0x1100>
   19f20:	mov	r2, #108	; 0x6c
   19f24:	movw	r1, #20604	; 0x507c
   19f28:	movt	r1, #2
   19f2c:	movw	r0, #20708	; 0x50e4
   19f30:	movt	r0, #2
   19f34:	bl	12a64 <__assert_fail@plt>
   19f38:	sub	r6, r6, #1
   19f3c:	cmn	r6, #1
   19f40:	beq	19f98 <test_scan@@Base+0x1704>
   19f44:	mov	r0, r7
   19f48:	cmp	r6, r5
   19f4c:	bcs	19f1c <test_scan@@Base+0x1688>
   19f50:	sub	r7, r7, #4
   19f54:	ldr	r3, [r0]
   19f58:	add	r3, r3, #4
   19f5c:	adds	r0, r0, r3
   19f60:	beq	19f38 <test_scan@@Base+0x16a4>
   19f64:	ldr	r9, [r0, #-4]
   19f68:	cmp	r9, #4
   19f6c:	movcc	r2, r9
   19f70:	movcs	r2, #4
   19f74:	mov	r1, r8
   19f78:	bl	12a4c <strncmp@plt>
   19f7c:	cmp	r0, #0
   19f80:	bne	19f38 <test_scan@@Base+0x16a4>
   19f84:	cmp	r9, #4
   19f88:	bne	19f38 <test_scan@@Base+0x16a4>
   19f8c:	ldr	r2, [sp, #20]
   19f90:	ldr	r1, [sp, #36]	; 0x24
   19f94:	b	19fe0 <test_scan@@Base+0x174c>
   19f98:	ldr	r2, [sp, #20]
   19f9c:	ldr	r1, [sp, #36]	; 0x24
   19fa0:	b	19fe0 <test_scan@@Base+0x174c>
   19fa4:	ldr	r3, [pc, #-1552]	; 1999c <test_scan@@Base+0x1108>
   19fa8:	movw	r2, #697	; 0x2b9
   19fac:	movw	r1, #20464	; 0x4ff0
   19fb0:	movt	r1, #2
   19fb4:	movw	r0, #20564	; 0x5054
   19fb8:	movt	r0, #2
   19fbc:	bl	12a64 <__assert_fail@plt>
   19fc0:	add	r2, r2, #1
   19fc4:	cmp	r4, r2
   19fc8:	beq	1a00c <test_scan@@Base+0x1778>
   19fcc:	mov	sl, r1
   19fd0:	add	r1, r1, #4
   19fd4:	ldr	r3, [sl]
   19fd8:	adds	sl, sl, r3
   19fdc:	beq	19fa4 <test_scan@@Base+0x1710>
   19fe0:	ldr	r3, [sl]
   19fe4:	sub	r3, sl, r3
   19fe8:	ldrh	r0, [r3]
   19fec:	cmp	r0, #9
   19ff0:	bls	19fc0 <test_scan@@Base+0x172c>
   19ff4:	ldrh	r3, [r3, #8]
   19ff8:	cmp	r3, #0
   19ffc:	beq	19fc0 <test_scan@@Base+0x172c>
   1a000:	ldrsh	r3, [sl, r3]
   1a004:	cmp	r3, #13
   1a008:	bne	19fc0 <test_scan@@Base+0x172c>
   1a00c:	ldr	r3, [fp, #4]
   1a010:	add	r3, r3, #4
   1a014:	adds	r3, fp, r3
   1a018:	beq	1a028 <test_scan@@Base+0x1794>
   1a01c:	ldr	r1, [sp, #52]	; 0x34
   1a020:	ldr	r0, [sp, #48]	; 0x30
   1a024:	b	1a064 <test_scan@@Base+0x17d0>
   1a028:	ldr	r3, [pc, #-1684]	; 1999c <test_scan@@Base+0x1108>
   1a02c:	movw	r2, #697	; 0x2b9
   1a030:	movw	r1, #20464	; 0x4ff0
   1a034:	movt	r1, #2
   1a038:	movw	r0, #20564	; 0x5054
   1a03c:	movt	r0, #2
   1a040:	bl	12a64 <__assert_fail@plt>
   1a044:	add	r1, r1, #1
   1a048:	cmp	r4, r1
   1a04c:	beq	1a09c <test_scan@@Base+0x1808>
   1a050:	mov	r3, r0
   1a054:	add	r0, r0, #4
   1a058:	ldr	r2, [r3]
   1a05c:	adds	r3, r3, r2
   1a060:	beq	1a028 <test_scan@@Base+0x1794>
   1a064:	ldr	r2, [r3]
   1a068:	sub	r2, r3, r2
   1a06c:	ldrh	ip, [r2]
   1a070:	cmp	ip, #9
   1a074:	bls	1a044 <test_scan@@Base+0x17b0>
   1a078:	ldrh	r2, [r2, #8]
   1a07c:	cmp	r2, #0
   1a080:	beq	1a044 <test_scan@@Base+0x17b0>
   1a084:	ldrsh	r3, [r3, r2]
   1a088:	cmp	r3, #42	; 0x2a
   1a08c:	bne	1a044 <test_scan@@Base+0x17b0>
   1a090:	ldr	r2, [sp, #12]
   1a094:	ldr	r0, [sp, #16]
   1a098:	b	1a0ec <test_scan@@Base+0x1858>
   1a09c:	ldr	r2, [sp, #12]
   1a0a0:	ldr	r0, [sp, #16]
   1a0a4:	b	1a0ec <test_scan@@Base+0x1858>
   1a0a8:	ldr	r3, [pc, #-1816]	; 19998 <test_scan@@Base+0x1104>
   1a0ac:	movw	r2, #693	; 0x2b5
   1a0b0:	movw	r1, #20464	; 0x4ff0
   1a0b4:	movt	r1, #2
   1a0b8:	movw	r0, #20708	; 0x50e4
   1a0bc:	movt	r0, #2
   1a0c0:	bl	12a64 <__assert_fail@plt>
   1a0c4:	ldr	r3, [pc, #-1840]	; 1999c <test_scan@@Base+0x1108>
   1a0c8:	movw	r2, #697	; 0x2b9
   1a0cc:	movw	r1, #20464	; 0x4ff0
   1a0d0:	movt	r1, #2
   1a0d4:	movw	r0, #20564	; 0x5054
   1a0d8:	movt	r0, #2
   1a0dc:	bl	12a64 <__assert_fail@plt>
   1a0e0:	sub	r2, r2, #1
   1a0e4:	cmn	r2, #1
   1a0e8:	beq	1a134 <test_scan@@Base+0x18a0>
   1a0ec:	mov	r3, r0
   1a0f0:	cmp	r4, r2
   1a0f4:	bls	1a0a8 <test_scan@@Base+0x1814>
   1a0f8:	sub	r0, r0, #4
   1a0fc:	ldr	r1, [r3]
   1a100:	adds	ip, r3, r1
   1a104:	beq	1a0c4 <test_scan@@Base+0x1830>
   1a108:	ldr	r3, [r3, r1]
   1a10c:	sub	r3, ip, r3
   1a110:	ldrh	r1, [r3]
   1a114:	cmp	r1, #9
   1a118:	bls	1a0e0 <test_scan@@Base+0x184c>
   1a11c:	ldrh	r3, [r3, #8]
   1a120:	cmp	r3, #0
   1a124:	beq	1a0e0 <test_scan@@Base+0x184c>
   1a128:	ldrsh	r3, [ip, r3]
   1a12c:	cmp	r3, #1
   1a130:	bne	1a0e0 <test_scan@@Base+0x184c>
   1a134:	cmp	r4, #2
   1a138:	movcc	r2, r4
   1a13c:	movcs	r2, #2
   1a140:	sub	r1, r2, #-1073741823	; 0xc0000001
   1a144:	add	r1, fp, r1, lsl #2
   1a148:	sub	r2, r2, #1
   1a14c:	cmn	r2, #1
   1a150:	beq	1a19c <test_scan@@Base+0x1908>
   1a154:	mov	r3, r1
   1a158:	cmp	r4, r2
   1a15c:	bls	1a1c4 <test_scan@@Base+0x1930>
   1a160:	sub	r1, r1, #4
   1a164:	ldr	r0, [r3]
   1a168:	adds	ip, r3, r0
   1a16c:	beq	1a1e0 <test_scan@@Base+0x194c>
   1a170:	ldr	r3, [r3, r0]
   1a174:	sub	r3, ip, r3
   1a178:	ldrh	r0, [r3]
   1a17c:	cmp	r0, #9
   1a180:	bls	1a148 <test_scan@@Base+0x18b4>
   1a184:	ldrh	r3, [r3, #8]
   1a188:	cmp	r3, #0
   1a18c:	beq	1a148 <test_scan@@Base+0x18b4>
   1a190:	ldrsh	r3, [ip, r3]
   1a194:	cmp	r3, #42	; 0x2a
   1a198:	bne	1a148 <test_scan@@Base+0x18b4>
   1a19c:	ldr	r0, [sp, #28]
   1a1a0:	bl	22abc <flatcc_builder_aligned_free@@Base>
   1a1a4:	ldr	r0, [sp, #32]
   1a1a8:	add	sp, sp, #76	; 0x4c
   1a1ac:	ldrd	r4, [sp]
   1a1b0:	ldrd	r6, [sp, #8]
   1a1b4:	ldrd	r8, [sp, #16]
   1a1b8:	ldrd	sl, [sp, #24]
   1a1bc:	add	sp, sp, #32
   1a1c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1c4:	ldr	r3, [pc, #-2100]	; 19998 <test_scan@@Base+0x1104>
   1a1c8:	movw	r2, #693	; 0x2b5
   1a1cc:	movw	r1, #20464	; 0x4ff0
   1a1d0:	movt	r1, #2
   1a1d4:	movw	r0, #20708	; 0x50e4
   1a1d8:	movt	r0, #2
   1a1dc:	bl	12a64 <__assert_fail@plt>
   1a1e0:	ldr	r3, [pc, #-2124]	; 1999c <test_scan@@Base+0x1108>
   1a1e4:	movw	r2, #697	; 0x2b9
   1a1e8:	movw	r1, #20464	; 0x4ff0
   1a1ec:	movt	r1, #2
   1a1f0:	movw	r0, #20564	; 0x5054
   1a1f4:	movt	r0, #2
   1a1f8:	bl	12a64 <__assert_fail@plt>

0001a1fc <test_basic_sort@@Base>:
   1a1fc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a200:	strd	r6, [sp, #8]
   1a204:	strd	r8, [sp, #16]
   1a208:	str	sl, [sp, #24]
   1a20c:	str	lr, [sp, #28]
   1a210:	sub	sp, sp, #32
   1a214:	mov	r4, r0
   1a218:	mov	r1, #6
   1a21c:	strb	r1, [sp, #20]
   1a220:	mov	r2, #7
   1a224:	strb	r2, [sp, #21]
   1a228:	mov	r5, #1
   1a22c:	strb	r5, [sp, #22]
   1a230:	mov	r3, #3
   1a234:	strb	r3, [sp, #23]
   1a238:	mov	ip, #4
   1a23c:	strb	ip, [sp, #24]
   1a240:	strb	r3, [sp, #25]
   1a244:	mov	lr, #2
   1a248:	strb	lr, [sp, #26]
   1a24c:	strb	r5, [sp, #12]
   1a250:	strb	lr, [sp, #13]
   1a254:	strb	r3, [sp, #14]
   1a258:	strb	r3, [sp, #15]
   1a25c:	strb	ip, [sp, #16]
   1a260:	strb	r1, [sp, #17]
   1a264:	strb	r2, [sp, #18]
   1a268:	bl	1ee18 <flatcc_builder_reset@@Base>
   1a26c:	mov	r3, #0
   1a270:	mov	r2, r3
   1a274:	movw	r1, #20800	; 0x5140
   1a278:	movt	r1, #2
   1a27c:	mov	r0, r4
   1a280:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   1a284:	cmp	r0, #0
   1a288:	bne	1a298 <test_basic_sort@@Base+0x9c>
   1a28c:	mov	r1, #36	; 0x24
   1a290:	mov	r0, r4
   1a294:	bl	20608 <flatcc_builder_start_table@@Base>
   1a298:	movw	r1, #21584	; 0x5450
   1a29c:	movt	r1, #2
   1a2a0:	mov	r0, r4
   1a2a4:	bl	22020 <flatcc_builder_create_string_str@@Base>
   1a2a8:	subs	r5, r0, #0
   1a2ac:	beq	1a2c4 <test_basic_sort@@Base+0xc8>
   1a2b0:	mov	r1, #3
   1a2b4:	mov	r0, r4
   1a2b8:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1a2bc:	cmp	r0, #0
   1a2c0:	strne	r5, [r0]
   1a2c4:	mvn	r3, #0
   1a2c8:	str	r3, [sp, #4]
   1a2cc:	mov	r3, #1
   1a2d0:	str	r3, [sp]
   1a2d4:	mov	r2, #7
   1a2d8:	add	r1, sp, #20
   1a2dc:	mov	r0, r4
   1a2e0:	bl	212a4 <flatcc_builder_create_vector@@Base>
   1a2e4:	subs	r5, r0, #0
   1a2e8:	beq	1a300 <test_basic_sort@@Base+0x104>
   1a2ec:	mov	r1, #5
   1a2f0:	mov	r0, r4
   1a2f4:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1a2f8:	cmp	r0, #0
   1a2fc:	strne	r5, [r0]
   1a300:	mov	r2, #1
   1a304:	ldr	r1, [pc, #1272]	; 1a804 <test_basic_sort@@Base+0x608>
   1a308:	mov	r0, r4
   1a30c:	bl	21030 <flatcc_builder_check_required@@Base>
   1a310:	cmp	r0, #0
   1a314:	beq	1a3b0 <test_basic_sort@@Base+0x1b4>
   1a318:	mov	r0, r4
   1a31c:	bl	210e0 <flatcc_builder_end_table@@Base>
   1a320:	mov	r1, r0
   1a324:	mov	r0, r4
   1a328:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   1a32c:	add	r1, sp, #28
   1a330:	mov	r0, r4
   1a334:	bl	22840 <flatcc_builder_get_direct_buffer@@Base>
   1a338:	cmp	r0, #0
   1a33c:	beq	1a3cc <test_basic_sort@@Base+0x1d0>
   1a340:	movw	r3, #20301	; 0x4f4d
   1a344:	movt	r3, #21326	; 0x534e
   1a348:	ldr	r2, [r0, #4]
   1a34c:	cmp	r2, r3
   1a350:	bne	1a3cc <test_basic_sort@@Base+0x1d0>
   1a354:	ldr	r3, [r0]
   1a358:	adds	r2, r0, r3
   1a35c:	beq	1a3cc <test_basic_sort@@Base+0x1d0>
   1a360:	ldr	r3, [r0, r3]
   1a364:	sub	r3, r2, r3
   1a368:	ldrh	r1, [r3]
   1a36c:	cmp	r1, #15
   1a370:	bls	1a63c <test_basic_sort@@Base+0x440>
   1a374:	ldrh	r3, [r3, #14]
   1a378:	cmp	r3, #0
   1a37c:	beq	1a63c <test_basic_sort@@Base+0x440>
   1a380:	add	r5, r2, r3
   1a384:	ldr	r4, [r2, r3]
   1a388:	add	r4, r4, #4
   1a38c:	adds	r3, r5, r4
   1a390:	beq	1a63c <test_basic_sort@@Base+0x440>
   1a394:	ldr	r6, [r3, #-4]
   1a398:	cmp	r6, #0
   1a39c:	beq	1a63c <test_basic_sort@@Base+0x440>
   1a3a0:	sub	r0, r6, #1
   1a3a4:	lsr	r7, r6, #1
   1a3a8:	lsl	r8, r7, #1
   1a3ac:	b	1a4f0 <test_basic_sort@@Base+0x2f4>
   1a3b0:	ldr	r3, [pc, #1104]	; 1a808 <test_basic_sort@@Base+0x60c>
   1a3b4:	mov	r2, #235	; 0xeb
   1a3b8:	movw	r1, #21196	; 0x52cc
   1a3bc:	movt	r1, #2
   1a3c0:	movw	r0, #21596	; 0x545c
   1a3c4:	movt	r0, #2
   1a3c8:	bl	12a64 <__assert_fail@plt>
   1a3cc:	ldr	r3, [pc, #1080]	; 1a80c <test_basic_sort@@Base+0x610>
   1a3d0:	movw	r2, #706	; 0x2c2
   1a3d4:	movw	r1, #20464	; 0x4ff0
   1a3d8:	movt	r1, #2
   1a3dc:	movw	r0, #20564	; 0x5054
   1a3e0:	movt	r0, #2
   1a3e4:	bl	12a64 <__assert_fail@plt>
   1a3e8:	ldr	ip, [r3, #-4]
   1a3ec:	cmp	ip, r2
   1a3f0:	bls	1a48c <test_basic_sort@@Base+0x290>
   1a3f4:	ldrb	r9, [r3, r2]
   1a3f8:	add	lr, r2, #1
   1a3fc:	cmp	lr, ip
   1a400:	bcs	1a4a8 <test_basic_sort@@Base+0x2ac>
   1a404:	ldrb	sl, [r3, lr]
   1a408:	cmp	sl, r9
   1a40c:	bhi	1a7ec <test_basic_sort@@Base+0x5f0>
   1a410:	ldr	ip, [r3, #-4]
   1a414:	cmp	r1, ip
   1a418:	bcs	1a4c4 <test_basic_sort@@Base+0x2c8>
   1a41c:	add	ip, r3, r1
   1a420:	ldrb	r1, [r3, r1]
   1a424:	ldrb	lr, [r3, r2]
   1a428:	cmp	lr, r1
   1a42c:	bls	1a4e0 <test_basic_sort@@Base+0x2e4>
   1a430:	strb	r1, [r3, r2]
   1a434:	strb	lr, [ip]
   1a438:	lsl	ip, r2, #1
   1a43c:	mov	r1, r2
   1a440:	cmp	r0, ip
   1a444:	bcc	1a4e0 <test_basic_sort@@Base+0x2e4>
   1a448:	mov	r2, ip
   1a44c:	cmp	r0, r2
   1a450:	bhi	1a3e8 <test_basic_sort@@Base+0x1ec>
   1a454:	ldr	lr, [r3, #-4]
   1a458:	cmp	lr, r1
   1a45c:	bls	1a4c4 <test_basic_sort@@Base+0x2c8>
   1a460:	add	ip, r3, r1
   1a464:	ldrb	r1, [r3, r1]
   1a468:	cmp	lr, r2
   1a46c:	bhi	1a424 <test_basic_sort@@Base+0x228>
   1a470:	ldr	r3, [pc, #920]	; 1a810 <test_basic_sort@@Base+0x614>
   1a474:	movw	r2, #395	; 0x18b
   1a478:	movw	r1, #20604	; 0x507c
   1a47c:	movt	r1, #2
   1a480:	movw	r0, #20708	; 0x50e4
   1a484:	movt	r0, #2
   1a488:	bl	12a64 <__assert_fail@plt>
   1a48c:	ldr	r3, [pc, #892]	; 1a810 <test_basic_sort@@Base+0x614>
   1a490:	movw	r2, #395	; 0x18b
   1a494:	movw	r1, #20604	; 0x507c
   1a498:	movt	r1, #2
   1a49c:	movw	r0, #20708	; 0x50e4
   1a4a0:	movt	r0, #2
   1a4a4:	bl	12a64 <__assert_fail@plt>
   1a4a8:	ldr	r3, [pc, #864]	; 1a810 <test_basic_sort@@Base+0x614>
   1a4ac:	movw	r2, #395	; 0x18b
   1a4b0:	movw	r1, #20604	; 0x507c
   1a4b4:	movt	r1, #2
   1a4b8:	movw	r0, #20708	; 0x50e4
   1a4bc:	movt	r0, #2
   1a4c0:	bl	12a64 <__assert_fail@plt>
   1a4c4:	ldr	r3, [pc, #836]	; 1a810 <test_basic_sort@@Base+0x614>
   1a4c8:	movw	r2, #395	; 0x18b
   1a4cc:	movw	r1, #20604	; 0x507c
   1a4d0:	movt	r1, #2
   1a4d4:	movw	r0, #20708	; 0x50e4
   1a4d8:	movt	r0, #2
   1a4dc:	bl	12a64 <__assert_fail@plt>
   1a4e0:	sub	r7, r7, #1
   1a4e4:	sub	r8, r8, #2
   1a4e8:	cmn	r7, #1
   1a4ec:	beq	1a504 <test_basic_sort@@Base+0x308>
   1a4f0:	cmp	r8, r0
   1a4f4:	bhi	1a4e0 <test_basic_sort@@Base+0x2e4>
   1a4f8:	mov	r1, r7
   1a4fc:	mov	r2, r8
   1a500:	b	1a44c <test_basic_sort@@Base+0x250>
   1a504:	cmp	r0, #0
   1a508:	beq	1a7a0 <test_basic_sort@@Base+0x5a4>
   1a50c:	add	r6, r3, r6
   1a510:	mov	r7, #0
   1a514:	mov	r8, r7
   1a518:	b	1a61c <test_basic_sort@@Base+0x420>
   1a51c:	ldr	ip, [r3, #-4]
   1a520:	cmp	ip, r2
   1a524:	bls	1a5c0 <test_basic_sort@@Base+0x3c4>
   1a528:	ldrb	r9, [r3, r2]
   1a52c:	add	lr, r2, #1
   1a530:	cmp	lr, ip
   1a534:	bcs	1a5dc <test_basic_sort@@Base+0x3e0>
   1a538:	ldrb	sl, [r3, lr]
   1a53c:	cmp	sl, r9
   1a540:	bhi	1a7d4 <test_basic_sort@@Base+0x5d8>
   1a544:	ldr	ip, [r3, #-4]
   1a548:	cmp	ip, r1
   1a54c:	bls	1a5f8 <test_basic_sort@@Base+0x3fc>
   1a550:	add	ip, r3, r1
   1a554:	ldrb	r1, [r3, r1]
   1a558:	ldrb	lr, [r3, r2]
   1a55c:	cmp	r1, lr
   1a560:	bcs	1a614 <test_basic_sort@@Base+0x418>
   1a564:	strb	r1, [r3, r2]
   1a568:	strb	lr, [ip]
   1a56c:	lsl	ip, r2, #1
   1a570:	mov	r1, r2
   1a574:	cmp	r0, ip
   1a578:	bcc	1a614 <test_basic_sort@@Base+0x418>
   1a57c:	mov	r2, ip
   1a580:	cmp	r0, r2
   1a584:	bhi	1a51c <test_basic_sort@@Base+0x320>
   1a588:	ldr	lr, [r3, #-4]
   1a58c:	cmp	lr, r1
   1a590:	bls	1a5f8 <test_basic_sort@@Base+0x3fc>
   1a594:	add	ip, r3, r1
   1a598:	ldrb	r1, [r3, r1]
   1a59c:	cmp	lr, r2
   1a5a0:	bhi	1a558 <test_basic_sort@@Base+0x35c>
   1a5a4:	ldr	r3, [pc, #612]	; 1a810 <test_basic_sort@@Base+0x614>
   1a5a8:	movw	r2, #395	; 0x18b
   1a5ac:	movw	r1, #20604	; 0x507c
   1a5b0:	movt	r1, #2
   1a5b4:	movw	r0, #20708	; 0x50e4
   1a5b8:	movt	r0, #2
   1a5bc:	bl	12a64 <__assert_fail@plt>
   1a5c0:	ldr	r3, [pc, #584]	; 1a810 <test_basic_sort@@Base+0x614>
   1a5c4:	movw	r2, #395	; 0x18b
   1a5c8:	movw	r1, #20604	; 0x507c
   1a5cc:	movt	r1, #2
   1a5d0:	movw	r0, #20708	; 0x50e4
   1a5d4:	movt	r0, #2
   1a5d8:	bl	12a64 <__assert_fail@plt>
   1a5dc:	ldr	r3, [pc, #556]	; 1a810 <test_basic_sort@@Base+0x614>
   1a5e0:	movw	r2, #395	; 0x18b
   1a5e4:	movw	r1, #20604	; 0x507c
   1a5e8:	movt	r1, #2
   1a5ec:	movw	r0, #20708	; 0x50e4
   1a5f0:	movt	r0, #2
   1a5f4:	bl	12a64 <__assert_fail@plt>
   1a5f8:	ldr	r3, [pc, #528]	; 1a810 <test_basic_sort@@Base+0x614>
   1a5fc:	movw	r2, #395	; 0x18b
   1a600:	movw	r1, #20604	; 0x507c
   1a604:	movt	r1, #2
   1a608:	movw	r0, #20708	; 0x50e4
   1a60c:	movt	r0, #2
   1a610:	bl	12a64 <__assert_fail@plt>
   1a614:	cmp	r0, #0
   1a618:	beq	1a7a0 <test_basic_sort@@Base+0x5a4>
   1a61c:	ldrb	r2, [r6, #-1]!
   1a620:	ldrb	r1, [r3]
   1a624:	strb	r1, [r6]
   1a628:	strb	r2, [r3]
   1a62c:	sub	r0, r0, #1
   1a630:	mov	r1, r7
   1a634:	mov	r2, r8
   1a638:	b	1a580 <test_basic_sort@@Base+0x384>
   1a63c:	ldr	r3, [pc, #464]	; 1a814 <test_basic_sort@@Base+0x618>
   1a640:	mov	r2, #1552	; 0x610
   1a644:	movw	r1, #23376	; 0x5b50
   1a648:	movt	r1, #2
   1a64c:	movw	r0, #27328	; 0x6ac0
   1a650:	movt	r0, #2
   1a654:	bl	12a64 <__assert_fail@plt>
   1a658:	movw	r0, #27376	; 0x6af0
   1a65c:	movt	r0, #2
   1a660:	bl	129c8 <puts@plt>
   1a664:	mvn	r0, #0
   1a668:	add	sp, sp, #32
   1a66c:	ldrd	r4, [sp]
   1a670:	ldrd	r6, [sp, #8]
   1a674:	ldrd	r8, [sp, #16]
   1a678:	ldr	sl, [sp, #24]
   1a67c:	add	sp, sp, #28
   1a680:	pop	{pc}		; (ldr pc, [sp], #4)
   1a684:	ldr	r3, [pc, #388]	; 1a810 <test_basic_sort@@Base+0x614>
   1a688:	movw	r2, #395	; 0x18b
   1a68c:	movw	r1, #20604	; 0x507c
   1a690:	movt	r1, #2
   1a694:	movw	r0, #20708	; 0x50e4
   1a698:	movt	r0, #2
   1a69c:	bl	12a64 <__assert_fail@plt>
   1a6a0:	mov	r5, r2
   1a6a4:	add	r1, r0, #1
   1a6a8:	cmp	r1, r5
   1a6ac:	bcc	1a728 <test_basic_sort@@Base+0x52c>
   1a6b0:	mov	r2, r5
   1a6b4:	cmp	r1, r2
   1a6b8:	beq	1a6d8 <test_basic_sort@@Base+0x4dc>
   1a6bc:	movw	r0, #27400	; 0x6b08
   1a6c0:	movt	r0, #2
   1a6c4:	bl	129c8 <puts@plt>
   1a6c8:	mvn	r0, #0
   1a6cc:	b	1a668 <test_basic_sort@@Base+0x46c>
   1a6d0:	mov	r0, r2
   1a6d4:	b	1a6a4 <test_basic_sort@@Base+0x4a8>
   1a6d8:	cmp	r1, #6
   1a6dc:	bhi	1a770 <test_basic_sort@@Base+0x574>
   1a6e0:	ldrb	r2, [r3, r1]
   1a6e4:	cmp	r2, ip
   1a6e8:	bne	1a6bc <test_basic_sort@@Base+0x4c0>
   1a6ec:	uxtb	r2, lr
   1a6f0:	cmp	r2, #3
   1a6f4:	beq	1a794 <test_basic_sort@@Base+0x598>
   1a6f8:	cmp	r1, lr
   1a6fc:	bne	1a6bc <test_basic_sort@@Base+0x4c0>
   1a700:	cmp	r4, #6
   1a704:	bhi	1a78c <test_basic_sort@@Base+0x590>
   1a708:	ldrb	ip, [r7, #1]!
   1a70c:	ldrb	r2, [r6], #1
   1a710:	add	lr, lr, #1
   1a714:	add	r4, r4, #1
   1a718:	cmp	r2, ip
   1a71c:	bne	1a658 <test_basic_sort@@Base+0x45c>
   1a720:	mov	r5, r9
   1a724:	mov	r1, r8
   1a728:	sub	r2, r5, r1
   1a72c:	add	r2, r1, r2, lsr #1
   1a730:	cmp	r2, #6
   1a734:	bhi	1a684 <test_basic_sort@@Base+0x488>
   1a738:	ldrb	r0, [r3, r2]
   1a73c:	cmp	r0, ip
   1a740:	bcc	1a6d0 <test_basic_sort@@Base+0x4d4>
   1a744:	cmp	r2, r1
   1a748:	bls	1a6b4 <test_basic_sort@@Base+0x4b8>
   1a74c:	sub	r0, r2, r1
   1a750:	add	r0, r1, r0, lsr #1
   1a754:	cmp	r0, #6
   1a758:	bhi	1a684 <test_basic_sort@@Base+0x488>
   1a75c:	ldrb	r5, [r3, r0]
   1a760:	cmp	r5, ip
   1a764:	bcc	1a6a0 <test_basic_sort@@Base+0x4a4>
   1a768:	mov	r2, r0
   1a76c:	b	1a744 <test_basic_sort@@Base+0x548>
   1a770:	ldr	r3, [pc, #152]	; 1a810 <test_basic_sort@@Base+0x614>
   1a774:	movw	r2, #395	; 0x18b
   1a778:	movw	r1, #20604	; 0x507c
   1a77c:	movt	r1, #2
   1a780:	movw	r0, #20708	; 0x50e4
   1a784:	movt	r0, #2
   1a788:	bl	12a64 <__assert_fail@plt>
   1a78c:	mov	r0, #0
   1a790:	b	1a668 <test_basic_sort@@Base+0x46c>
   1a794:	cmp	r1, #2
   1a798:	beq	1a708 <test_basic_sort@@Base+0x50c>
   1a79c:	b	1a6bc <test_basic_sort@@Base+0x4c0>
   1a7a0:	ldr	r2, [r3, #-4]
   1a7a4:	cmp	r2, #7
   1a7a8:	bne	1a63c <test_basic_sort@@Base+0x440>
   1a7ac:	ldrb	ip, [r5, r4]
   1a7b0:	cmp	ip, #1
   1a7b4:	bne	1a658 <test_basic_sort@@Base+0x45c>
   1a7b8:	mov	r7, r3
   1a7bc:	add	r6, sp, #13
   1a7c0:	mov	r4, #1
   1a7c4:	mov	lr, #0
   1a7c8:	mov	r9, #6
   1a7cc:	mov	r8, lr
   1a7d0:	b	1a720 <test_basic_sort@@Base+0x524>
   1a7d4:	cmp	ip, r1
   1a7d8:	bls	1a5f8 <test_basic_sort@@Base+0x3fc>
   1a7dc:	add	ip, r3, r1
   1a7e0:	ldrb	r1, [r3, r1]
   1a7e4:	mov	r2, lr
   1a7e8:	b	1a558 <test_basic_sort@@Base+0x35c>
   1a7ec:	cmp	ip, r1
   1a7f0:	bls	1a4c4 <test_basic_sort@@Base+0x2c8>
   1a7f4:	add	ip, r3, r1
   1a7f8:	ldrb	r1, [r3, r1]
   1a7fc:	mov	r2, lr
   1a800:	b	1a424 <test_basic_sort@@Base+0x228>
   1a804:	andeq	r4, r2, r0, asr #20
   1a808:	andeq	r4, r2, r4, asr #20
   1a80c:	andeq	r4, r2, r4, ror #23
   1a810:	andeq	r4, r2, ip, lsr #23
   1a814:	andeq	r4, r2, r8, lsl #24

0001a818 <test_clone_slice@@Base>:
   1a818:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a81c:	strd	r6, [sp, #8]
   1a820:	strd	r8, [sp, #16]
   1a824:	str	sl, [sp, #24]
   1a828:	str	lr, [sp, #28]
   1a82c:	sub	sp, sp, #24
   1a830:	mov	r4, r0
   1a834:	mov	r5, #0
   1a838:	strb	r5, [sp, #12]
   1a83c:	mov	r3, #1
   1a840:	strb	r3, [sp, #13]
   1a844:	strb	r5, [sp, #14]
   1a848:	strb	r5, [sp, #15]
   1a84c:	strb	r3, [sp, #16]
   1a850:	strb	r5, [sp, #17]
   1a854:	strb	r5, [sp, #18]
   1a858:	bl	1ee18 <flatcc_builder_reset@@Base>
   1a85c:	mov	r3, r5
   1a860:	mov	r2, r5
   1a864:	movw	r1, #20800	; 0x5140
   1a868:	movt	r1, #2
   1a86c:	mov	r0, r4
   1a870:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   1a874:	cmp	r0, r5
   1a878:	bne	1a888 <test_clone_slice@@Base+0x70>
   1a87c:	mov	r1, #36	; 0x24
   1a880:	mov	r0, r4
   1a884:	bl	20608 <flatcc_builder_start_table@@Base>
   1a888:	movw	r1, #27432	; 0x6b28
   1a88c:	movt	r1, #2
   1a890:	mov	r0, r4
   1a894:	bl	134e4 <_start@@Base+0xa74>
   1a898:	mvn	r3, #0
   1a89c:	str	r3, [sp, #4]
   1a8a0:	mov	r3, #1
   1a8a4:	str	r3, [sp]
   1a8a8:	mov	r2, #7
   1a8ac:	add	r1, sp, #12
   1a8b0:	mov	r0, r4
   1a8b4:	bl	212a4 <flatcc_builder_create_vector@@Base>
   1a8b8:	subs	r5, r0, #0
   1a8bc:	beq	1a8d4 <test_clone_slice@@Base+0xbc>
   1a8c0:	mov	r1, #24
   1a8c4:	mov	r0, r4
   1a8c8:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1a8cc:	cmp	r0, #0
   1a8d0:	strne	r5, [r0]
   1a8d4:	mvn	r3, #-1073741824	; 0xc0000000
   1a8d8:	mov	r2, #2
   1a8dc:	mov	r1, #4
   1a8e0:	mov	r0, r4
   1a8e4:	bl	20310 <flatcc_builder_start_vector@@Base>
   1a8e8:	mov	r1, #2
   1a8ec:	mov	r0, r4
   1a8f0:	bl	1fa04 <flatcc_builder_extend_vector@@Base>
   1a8f4:	mov	r3, #22
   1a8f8:	strh	r3, [r0]
   1a8fc:	mov	r3, #44	; 0x2c
   1a900:	strh	r3, [r0, #4]
   1a904:	mov	r0, r4
   1a908:	bl	21414 <flatcc_builder_end_vector@@Base>
   1a90c:	subs	r5, r0, #0
   1a910:	beq	1a928 <test_clone_slice@@Base+0x110>
   1a914:	mov	r1, #9
   1a918:	mov	r0, r4
   1a91c:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1a920:	cmp	r0, #0
   1a924:	strne	r5, [r0]
   1a928:	mov	r3, #16
   1a92c:	mov	r2, #32
   1a930:	mov	r1, #0
   1a934:	mov	r0, r4
   1a938:	bl	221cc <flatcc_builder_table_add@@Base>
   1a93c:	movw	r3, #13107	; 0x3333
   1a940:	movt	r3, #49705	; 0xc229
   1a944:	str	r3, [r0]
   1a948:	mov	r2, #1
   1a94c:	ldr	r1, [pc, #2508]	; 1b320 <test_clone_slice@@Base+0xb08>
   1a950:	mov	r0, r4
   1a954:	bl	21030 <flatcc_builder_check_required@@Base>
   1a958:	cmp	r0, #0
   1a95c:	beq	1b04c <test_clone_slice@@Base+0x834>
   1a960:	mov	r0, r4
   1a964:	bl	210e0 <flatcc_builder_end_table@@Base>
   1a968:	mov	r1, r0
   1a96c:	mov	r0, r4
   1a970:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   1a974:	add	r1, sp, #20
   1a978:	mov	r0, r4
   1a97c:	bl	2299c <flatcc_builder_finalize_aligned_buffer@@Base>
   1a980:	mov	r8, r0
   1a984:	movw	r3, #36976	; 0x9070
   1a988:	movt	r3, #3
   1a98c:	ldr	r3, [r3]
   1a990:	ldr	r2, [sp, #20]
   1a994:	mov	r1, r0
   1a998:	movw	r0, #27444	; 0x6b34
   1a99c:	movt	r0, #2
   1a9a0:	bl	13384 <_start@@Base+0x914>
   1a9a4:	cmp	r8, #0
   1a9a8:	moveq	r5, r8
   1a9ac:	beq	1a9cc <test_clone_slice@@Base+0x1b4>
   1a9b0:	movw	r3, #20301	; 0x4f4d
   1a9b4:	movt	r3, #21326	; 0x534e
   1a9b8:	ldr	r2, [r8, #4]
   1a9bc:	cmp	r2, r3
   1a9c0:	ldreq	r5, [r8]
   1a9c4:	addeq	r5, r8, r5
   1a9c8:	movne	r5, #0
   1a9cc:	mov	r0, r4
   1a9d0:	bl	1ee18 <flatcc_builder_reset@@Base>
   1a9d4:	mov	r3, #0
   1a9d8:	mov	r2, r3
   1a9dc:	movw	r1, #20800	; 0x5140
   1a9e0:	movt	r1, #2
   1a9e4:	mov	r0, r4
   1a9e8:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   1a9ec:	cmp	r0, #0
   1a9f0:	bne	1aa00 <test_clone_slice@@Base+0x1e8>
   1a9f4:	mov	r1, #36	; 0x24
   1a9f8:	mov	r0, r4
   1a9fc:	bl	20608 <flatcc_builder_start_table@@Base>
   1aa00:	mov	r0, r5
   1aa04:	bl	12f74 <_start@@Base+0x504>
   1aa08:	subs	r6, r0, #0
   1aa0c:	beq	1b068 <test_clone_slice@@Base+0x850>
   1aa10:	cmp	r5, #0
   1aa14:	beq	1b084 <test_clone_slice@@Base+0x86c>
   1aa18:	ldr	r3, [r5]
   1aa1c:	sub	r3, r5, r3
   1aa20:	ldrh	r2, [r3]
   1aa24:	cmp	r2, #53	; 0x35
   1aa28:	bls	1b0a0 <test_clone_slice@@Base+0x888>
   1aa2c:	ldrh	r2, [r3, #52]	; 0x34
   1aa30:	cmp	r2, #0
   1aa34:	beq	1b0a0 <test_clone_slice@@Base+0x888>
   1aa38:	add	r9, r5, r2
   1aa3c:	ldr	r2, [r5, r2]
   1aa40:	add	r2, r2, #4
   1aa44:	adds	r9, r9, r2
   1aa48:	beq	1b0a0 <test_clone_slice@@Base+0x888>
   1aa4c:	ldrh	r3, [r3, #22]
   1aa50:	cmp	r3, #0
   1aa54:	beq	1b0bc <test_clone_slice@@Base+0x8a4>
   1aa58:	add	r7, r5, r3
   1aa5c:	ldr	r3, [r5, r3]
   1aa60:	add	r3, r3, #4
   1aa64:	adds	r7, r7, r3
   1aa68:	beq	1b0bc <test_clone_slice@@Base+0x8a4>
   1aa6c:	ldr	r2, [r6, #-4]
   1aa70:	mov	r1, r6
   1aa74:	mov	r0, r4
   1aa78:	bl	21f04 <flatcc_builder_create_string@@Base>
   1aa7c:	subs	sl, r0, #0
   1aa80:	beq	1aa98 <test_clone_slice@@Base+0x280>
   1aa84:	mov	r1, #3
   1aa88:	mov	r0, r4
   1aa8c:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1aa90:	cmp	r0, #0
   1aa94:	strne	sl, [r0]
   1aa98:	mov	r0, r4
   1aa9c:	bl	203b0 <flatcc_builder_start_offset_vector@@Base>
   1aaa0:	ldr	r2, [r6, #-4]
   1aaa4:	mov	r1, r6
   1aaa8:	mov	r0, r4
   1aaac:	bl	21f04 <flatcc_builder_create_string@@Base>
   1aab0:	subs	r1, r0, #0
   1aab4:	beq	1aac0 <test_clone_slice@@Base+0x2a8>
   1aab8:	mov	r0, r4
   1aabc:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   1aac0:	ldr	r2, [r6, #-4]
   1aac4:	cmp	r2, #4
   1aac8:	movcc	r1, r2
   1aacc:	movcs	r1, #4
   1aad0:	sub	r2, r2, r1
   1aad4:	cmp	r2, #20
   1aad8:	movcs	r2, #20
   1aadc:	add	r1, r6, r1
   1aae0:	mov	r0, r4
   1aae4:	bl	21f04 <flatcc_builder_create_string@@Base>
   1aae8:	subs	r1, r0, #0
   1aaec:	beq	1aaf8 <test_clone_slice@@Base+0x2e0>
   1aaf0:	mov	r0, r4
   1aaf4:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   1aaf8:	ldr	r2, [r6, #-4]
   1aafc:	cmp	r2, #3
   1ab00:	movcs	r2, #3
   1ab04:	mov	r1, r6
   1ab08:	mov	r0, r4
   1ab0c:	bl	21f04 <flatcc_builder_create_string@@Base>
   1ab10:	subs	r1, r0, #0
   1ab14:	beq	1ab20 <test_clone_slice@@Base+0x308>
   1ab18:	mov	r0, r4
   1ab1c:	bl	1fd60 <flatcc_builder_offset_vector_push@@Base>
   1ab20:	mov	r0, r4
   1ab24:	bl	21540 <flatcc_builder_end_offset_vector@@Base>
   1ab28:	subs	sl, r0, #0
   1ab2c:	beq	1ab44 <test_clone_slice@@Base+0x32c>
   1ab30:	mov	r1, #10
   1ab34:	mov	r0, r4
   1ab38:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1ab3c:	cmp	r0, #0
   1ab40:	strne	sl, [r0]
   1ab44:	mov	r1, #36	; 0x24
   1ab48:	mov	r0, r4
   1ab4c:	bl	20608 <flatcc_builder_start_table@@Base>
   1ab50:	ldr	r2, [r6, #-4]
   1ab54:	cmp	r2, #2
   1ab58:	movcc	r1, r2
   1ab5c:	movcs	r1, #2
   1ab60:	sub	r2, r2, r1
   1ab64:	cmp	r2, #20
   1ab68:	movcs	r2, #20
   1ab6c:	add	r1, r6, r1
   1ab70:	mov	r0, r4
   1ab74:	bl	21f04 <flatcc_builder_create_string@@Base>
   1ab78:	subs	r6, r0, #0
   1ab7c:	beq	1ab94 <test_clone_slice@@Base+0x37c>
   1ab80:	mov	r1, #3
   1ab84:	mov	r0, r4
   1ab88:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1ab8c:	cmp	r0, #0
   1ab90:	strne	r6, [r0]
   1ab94:	ldr	r2, [r9, #-4]
   1ab98:	mvn	r3, #0
   1ab9c:	str	r3, [sp, #4]
   1aba0:	mov	r3, #1
   1aba4:	str	r3, [sp]
   1aba8:	mov	r1, r9
   1abac:	mov	r0, r4
   1abb0:	bl	212a4 <flatcc_builder_create_vector@@Base>
   1abb4:	subs	r6, r0, #0
   1abb8:	beq	1abd0 <test_clone_slice@@Base+0x3b8>
   1abbc:	mov	r1, #24
   1abc0:	mov	r0, r4
   1abc4:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1abc8:	cmp	r0, #0
   1abcc:	strne	r6, [r0]
   1abd0:	ldr	r2, [r7, #-4]
   1abd4:	cmp	r2, #1
   1abd8:	movcc	r1, r2
   1abdc:	movcs	r1, #1
   1abe0:	sub	r2, r2, r1
   1abe4:	mvn	r3, #-1073741824	; 0xc0000000
   1abe8:	str	r3, [sp, #4]
   1abec:	mov	r3, #2
   1abf0:	str	r3, [sp]
   1abf4:	mov	r3, #4
   1abf8:	cmp	r2, #2
   1abfc:	movcs	r2, #2
   1ac00:	add	r1, r7, r1, lsl #2
   1ac04:	mov	r0, r4
   1ac08:	bl	212a4 <flatcc_builder_create_vector@@Base>
   1ac0c:	subs	r6, r0, #0
   1ac10:	beq	1ac28 <test_clone_slice@@Base+0x410>
   1ac14:	mov	r1, #9
   1ac18:	mov	r0, r4
   1ac1c:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1ac20:	cmp	r0, #0
   1ac24:	strne	r6, [r0]
   1ac28:	mov	r2, #1
   1ac2c:	ldr	r1, [pc, #1772]	; 1b320 <test_clone_slice@@Base+0xb08>
   1ac30:	mov	r0, r4
   1ac34:	bl	21030 <flatcc_builder_check_required@@Base>
   1ac38:	cmp	r0, #0
   1ac3c:	beq	1b0d8 <test_clone_slice@@Base+0x8c0>
   1ac40:	mov	r0, r4
   1ac44:	bl	210e0 <flatcc_builder_end_table@@Base>
   1ac48:	subs	r6, r0, #0
   1ac4c:	beq	1ac8c <test_clone_slice@@Base+0x474>
   1ac50:	mov	r3, #1
   1ac54:	mov	r2, r3
   1ac58:	mov	r1, #7
   1ac5c:	mov	r0, r4
   1ac60:	bl	221cc <flatcc_builder_table_add@@Base>
   1ac64:	subs	sl, r0, #0
   1ac68:	beq	1ac8c <test_clone_slice@@Base+0x474>
   1ac6c:	mov	r1, #8
   1ac70:	mov	r0, r4
   1ac74:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1ac78:	cmp	r0, #0
   1ac7c:	beq	1ac8c <test_clone_slice@@Base+0x474>
   1ac80:	mov	r3, #1
   1ac84:	strb	r3, [sl]
   1ac88:	str	r6, [r0]
   1ac8c:	ldr	r2, [r9, #-4]
   1ac90:	cmp	r2, #3
   1ac94:	movcc	r1, r2
   1ac98:	movcs	r1, #3
   1ac9c:	mvn	r3, #0
   1aca0:	str	r3, [sp, #4]
   1aca4:	mov	r3, #1
   1aca8:	str	r3, [sp]
   1acac:	sub	r2, r2, r1
   1acb0:	add	r1, r9, r1
   1acb4:	mov	r0, r4
   1acb8:	bl	212a4 <flatcc_builder_create_vector@@Base>
   1acbc:	subs	r6, r0, #0
   1acc0:	beq	1acd8 <test_clone_slice@@Base+0x4c0>
   1acc4:	mov	r1, #24
   1acc8:	mov	r0, r4
   1accc:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1acd0:	cmp	r0, #0
   1acd4:	strne	r6, [r0]
   1acd8:	ldr	r3, [r5]
   1acdc:	sub	r3, r5, r3
   1ace0:	ldrh	r2, [r3]
   1ace4:	cmp	r2, #5
   1ace8:	movls	r2, #0
   1acec:	bls	1ad00 <test_clone_slice@@Base+0x4e8>
   1acf0:	ldrh	r2, [r3, #4]
   1acf4:	cmp	r2, #0
   1acf8:	addne	r2, r5, r2
   1acfc:	moveq	r2, #0
   1ad00:	mov	r3, #16
   1ad04:	str	r3, [sp]
   1ad08:	mov	r3, #32
   1ad0c:	mov	r1, #0
   1ad10:	mov	r0, r4
   1ad14:	bl	22370 <flatcc_builder_table_add_copy@@Base>
   1ad18:	ldr	r2, [r7, #-4]
   1ad1c:	mvn	r3, #-1073741824	; 0xc0000000
   1ad20:	str	r3, [sp, #4]
   1ad24:	mov	r3, #2
   1ad28:	str	r3, [sp]
   1ad2c:	mov	r3, #4
   1ad30:	mov	r1, r7
   1ad34:	mov	r0, r4
   1ad38:	bl	212a4 <flatcc_builder_create_vector@@Base>
   1ad3c:	subs	r5, r0, #0
   1ad40:	beq	1ad58 <test_clone_slice@@Base+0x540>
   1ad44:	mov	r1, #9
   1ad48:	mov	r0, r4
   1ad4c:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1ad50:	cmp	r0, #0
   1ad54:	strne	r5, [r0]
   1ad58:	mov	r2, #1
   1ad5c:	ldr	r1, [pc, #1468]	; 1b320 <test_clone_slice@@Base+0xb08>
   1ad60:	mov	r0, r4
   1ad64:	bl	21030 <flatcc_builder_check_required@@Base>
   1ad68:	cmp	r0, #0
   1ad6c:	beq	1b0f4 <test_clone_slice@@Base+0x8dc>
   1ad70:	mov	r0, r4
   1ad74:	bl	210e0 <flatcc_builder_end_table@@Base>
   1ad78:	mov	r1, r0
   1ad7c:	mov	r0, r4
   1ad80:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   1ad84:	add	r1, sp, #20
   1ad88:	mov	r0, r4
   1ad8c:	bl	22840 <flatcc_builder_get_direct_buffer@@Base>
   1ad90:	mov	r4, r0
   1ad94:	movw	r3, #36976	; 0x9070
   1ad98:	movt	r3, #3
   1ad9c:	ldr	r3, [r3]
   1ada0:	ldr	r2, [sp, #20]
   1ada4:	mov	r1, r0
   1ada8:	movw	r0, #27488	; 0x6b60
   1adac:	movt	r0, #2
   1adb0:	bl	13384 <_start@@Base+0x914>
   1adb4:	cmp	r4, #0
   1adb8:	beq	1b2ec <test_clone_slice@@Base+0xad4>
   1adbc:	movw	r3, #20301	; 0x4f4d
   1adc0:	movt	r3, #21326	; 0x534e
   1adc4:	ldr	r2, [r4, #4]
   1adc8:	cmp	r2, r3
   1adcc:	bne	1b2ec <test_clone_slice@@Base+0xad4>
   1add0:	ldr	r6, [r4]
   1add4:	add	r5, r4, r6
   1add8:	mov	r0, r5
   1addc:	bl	12f74 <_start@@Base+0x504>
   1ade0:	movw	r1, #27432	; 0x6b28
   1ade4:	movt	r1, #2
   1ade8:	bl	12968 <strcmp@plt>
   1adec:	cmp	r0, #0
   1adf0:	bne	1b308 <test_clone_slice@@Base+0xaf0>
   1adf4:	cmp	r5, #0
   1adf8:	beq	1b110 <test_clone_slice@@Base+0x8f8>
   1adfc:	ldr	r6, [r4, r6]
   1ae00:	sub	r6, r5, r6
   1ae04:	ldrh	r7, [r6]
   1ae08:	cmp	r7, #25
   1ae0c:	bls	1b12c <test_clone_slice@@Base+0x914>
   1ae10:	ldrh	r3, [r6, #24]
   1ae14:	cmp	r3, #0
   1ae18:	beq	1b12c <test_clone_slice@@Base+0x914>
   1ae1c:	add	r2, r5, r3
   1ae20:	ldr	r3, [r5, r3]
   1ae24:	add	r3, r3, #4
   1ae28:	adds	r4, r2, r3
   1ae2c:	beq	1b12c <test_clone_slice@@Base+0x914>
   1ae30:	ldr	r9, [r4, #-4]
   1ae34:	cmp	r9, #0
   1ae38:	beq	1b12c <test_clone_slice@@Base+0x914>
   1ae3c:	ldr	r0, [r2, r3]
   1ae40:	add	r0, r0, #4
   1ae44:	movw	r1, #27432	; 0x6b28
   1ae48:	movt	r1, #2
   1ae4c:	add	r0, r4, r0
   1ae50:	bl	12968 <strcmp@plt>
   1ae54:	cmp	r0, #0
   1ae58:	bne	1b148 <test_clone_slice@@Base+0x930>
   1ae5c:	cmp	r9, #1
   1ae60:	bls	1b15c <test_clone_slice@@Base+0x944>
   1ae64:	ldr	r0, [r4, #4]
   1ae68:	add	r0, r0, #8
   1ae6c:	adds	r0, r4, r0
   1ae70:	beq	1b178 <test_clone_slice@@Base+0x960>
   1ae74:	ldr	r3, [r0, #-4]
   1ae78:	cmp	r3, #6
   1ae7c:	bne	1b178 <test_clone_slice@@Base+0x960>
   1ae80:	movw	r1, #27436	; 0x6b2c
   1ae84:	movt	r1, #2
   1ae88:	bl	12968 <strcmp@plt>
   1ae8c:	cmp	r0, #0
   1ae90:	bne	1b1b0 <test_clone_slice@@Base+0x998>
   1ae94:	cmp	r9, #2
   1ae98:	bls	1b1c4 <test_clone_slice@@Base+0x9ac>
   1ae9c:	ldr	r0, [r4, #8]
   1aea0:	add	r0, r0, #12
   1aea4:	adds	r0, r4, r0
   1aea8:	beq	1b1e0 <test_clone_slice@@Base+0x9c8>
   1aeac:	ldr	r3, [r0, #-4]
   1aeb0:	cmp	r3, #3
   1aeb4:	bne	1b1e0 <test_clone_slice@@Base+0x9c8>
   1aeb8:	movw	r1, #27668	; 0x6c14
   1aebc:	movt	r1, #2
   1aec0:	bl	12968 <strcmp@plt>
   1aec4:	cmp	r0, #0
   1aec8:	bne	1b1f4 <test_clone_slice@@Base+0x9dc>
   1aecc:	ldrh	r3, [r6, #20]
   1aed0:	cmp	r3, #0
   1aed4:	beq	1b208 <test_clone_slice@@Base+0x9f0>
   1aed8:	add	sl, r5, r3
   1aedc:	ldr	r4, [r5, r3]
   1aee0:	adds	r9, sl, r4
   1aee4:	beq	1b208 <test_clone_slice@@Base+0x9f0>
   1aee8:	mov	r0, r9
   1aeec:	bl	12f74 <_start@@Base+0x504>
   1aef0:	movw	r1, #27560	; 0x6ba8
   1aef4:	movt	r1, #2
   1aef8:	bl	12968 <strcmp@plt>
   1aefc:	cmp	r0, #0
   1af00:	bne	1b224 <test_clone_slice@@Base+0xa0c>
   1af04:	ldr	r3, [sl, r4]
   1af08:	sub	r3, r9, r3
   1af0c:	ldrh	r2, [r3]
   1af10:	cmp	r2, #53	; 0x35
   1af14:	bls	1b238 <test_clone_slice@@Base+0xa20>
   1af18:	ldrh	r3, [r3, #52]	; 0x34
   1af1c:	cmp	r3, #0
   1af20:	beq	1b238 <test_clone_slice@@Base+0xa20>
   1af24:	add	r0, r9, r3
   1af28:	ldr	r3, [r9, r3]
   1af2c:	add	r3, r3, #4
   1af30:	adds	r0, r0, r3
   1af34:	beq	1b238 <test_clone_slice@@Base+0xa20>
   1af38:	ldr	r3, [r0, #-4]
   1af3c:	cmp	r3, #7
   1af40:	bne	1b238 <test_clone_slice@@Base+0xa20>
   1af44:	mov	r2, #7
   1af48:	add	r1, sp, #12
   1af4c:	bl	12998 <memcmp@plt>
   1af50:	cmp	r0, #0
   1af54:	bne	1b24c <test_clone_slice@@Base+0xa34>
   1af58:	cmp	r7, #53	; 0x35
   1af5c:	bls	1b260 <test_clone_slice@@Base+0xa48>
   1af60:	ldrh	r3, [r6, #52]	; 0x34
   1af64:	cmp	r3, #0
   1af68:	beq	1b260 <test_clone_slice@@Base+0xa48>
   1af6c:	add	r0, r5, r3
   1af70:	ldr	r3, [r5, r3]
   1af74:	add	r3, r3, #4
   1af78:	adds	r0, r0, r3
   1af7c:	beq	1b260 <test_clone_slice@@Base+0xa48>
   1af80:	ldr	r3, [r0, #-4]
   1af84:	cmp	r3, #4
   1af88:	bne	1b260 <test_clone_slice@@Base+0xa48>
   1af8c:	mov	r2, #4
   1af90:	add	r1, sp, #15
   1af94:	bl	12998 <memcmp@plt>
   1af98:	subs	r4, r0, #0
   1af9c:	bne	1b274 <test_clone_slice@@Base+0xa5c>
   1afa0:	ldrh	r3, [r6, #4]
   1afa4:	cmp	r3, #0
   1afa8:	addne	r3, r5, r3
   1afac:	moveq	r3, #0
   1afb0:	vldr	s14, [r3]
   1afb4:	vldr	s15, [pc, #864]	; 1b31c <test_clone_slice@@Base+0xb04>
   1afb8:	vcmp.f32	s14, s15
   1afbc:	vmrs	APSR_nzcv, fpscr
   1afc0:	bne	1b288 <test_clone_slice@@Base+0xa70>
   1afc4:	ldrh	r3, [r6, #22]
   1afc8:	cmp	r3, #0
   1afcc:	beq	1b29c <test_clone_slice@@Base+0xa84>
   1afd0:	add	r2, r5, r3
   1afd4:	ldr	r3, [r5, r3]
   1afd8:	add	r3, r3, #4
   1afdc:	adds	r1, r2, r3
   1afe0:	beq	1b29c <test_clone_slice@@Base+0xa84>
   1afe4:	ldr	r0, [r1, #-4]
   1afe8:	cmp	r0, #2
   1afec:	bne	1b29c <test_clone_slice@@Base+0xa84>
   1aff0:	ldrsh	r3, [r2, r3]
   1aff4:	cmp	r3, #22
   1aff8:	bne	1b2b0 <test_clone_slice@@Base+0xa98>
   1affc:	cmn	r1, #4
   1b000:	beq	1b2c4 <test_clone_slice@@Base+0xaac>
   1b004:	ldrsh	r3, [r1, #4]
   1b008:	cmp	r3, #44	; 0x2c
   1b00c:	bne	1b2c4 <test_clone_slice@@Base+0xaac>
   1b010:	mov	r0, r9
   1b014:	bl	12d18 <_start@@Base+0x2a8>
   1b018:	cmp	r0, #0
   1b01c:	beq	1b2d8 <test_clone_slice@@Base+0xac0>
   1b020:	ldr	r3, [r0, #-4]
   1b024:	cmp	r3, #1
   1b028:	bne	1b2d8 <test_clone_slice@@Base+0xac0>
   1b02c:	ldrsh	r3, [r0]
   1b030:	cmp	r3, #44	; 0x2c
   1b034:	beq	1b188 <test_clone_slice@@Base+0x970>
   1b038:	movw	r0, #28032	; 0x6d80
   1b03c:	movt	r0, #2
   1b040:	bl	129c8 <puts@plt>
   1b044:	mvn	r4, #0
   1b048:	b	1b188 <test_clone_slice@@Base+0x970>
   1b04c:	ldr	r3, [pc, #720]	; 1b324 <test_clone_slice@@Base+0xb0c>
   1b050:	mov	r2, #235	; 0xeb
   1b054:	movw	r1, #21196	; 0x52cc
   1b058:	movt	r1, #2
   1b05c:	movw	r0, #21596	; 0x545c
   1b060:	movt	r0, #2
   1b064:	bl	12a64 <__assert_fail@plt>
   1b068:	ldr	r3, [pc, #696]	; 1b328 <test_clone_slice@@Base+0xb10>
   1b06c:	movw	r2, #1604	; 0x644
   1b070:	movw	r1, #23376	; 0x5b50
   1b074:	movt	r1, #2
   1b078:	movw	r0, #24696	; 0x6078
   1b07c:	movt	r0, #2
   1b080:	bl	12a64 <__assert_fail@plt>
   1b084:	ldr	r3, [pc, #672]	; 1b32c <test_clone_slice@@Base+0xb14>
   1b088:	movw	r2, #714	; 0x2ca
   1b08c:	movw	r1, #20464	; 0x4ff0
   1b090:	movt	r1, #2
   1b094:	movw	r0, #20564	; 0x5054
   1b098:	movt	r0, #2
   1b09c:	bl	12a64 <__assert_fail@plt>
   1b0a0:	ldr	r3, [pc, #640]	; 1b328 <test_clone_slice@@Base+0xb10>
   1b0a4:	movw	r2, #1606	; 0x646
   1b0a8:	movw	r1, #23376	; 0x5b50
   1b0ac:	movt	r1, #2
   1b0b0:	movw	r0, #27472	; 0x6b50
   1b0b4:	movt	r0, #2
   1b0b8:	bl	12a64 <__assert_fail@plt>
   1b0bc:	ldr	r3, [pc, #612]	; 1b328 <test_clone_slice@@Base+0xb10>
   1b0c0:	movw	r2, #1608	; 0x648
   1b0c4:	movw	r1, #23376	; 0x5b50
   1b0c8:	movt	r1, #2
   1b0cc:	movw	r0, #27480	; 0x6b58
   1b0d0:	movt	r0, #2
   1b0d4:	bl	12a64 <__assert_fail@plt>
   1b0d8:	ldr	r3, [pc, #580]	; 1b324 <test_clone_slice@@Base+0xb0c>
   1b0dc:	mov	r2, #235	; 0xeb
   1b0e0:	movw	r1, #21196	; 0x52cc
   1b0e4:	movt	r1, #2
   1b0e8:	movw	r0, #21596	; 0x545c
   1b0ec:	movt	r0, #2
   1b0f0:	bl	12a64 <__assert_fail@plt>
   1b0f4:	ldr	r3, [pc, #552]	; 1b324 <test_clone_slice@@Base+0xb0c>
   1b0f8:	mov	r2, #235	; 0xeb
   1b0fc:	movw	r1, #21196	; 0x52cc
   1b100:	movt	r1, #2
   1b104:	movw	r0, #21596	; 0x545c
   1b108:	movt	r0, #2
   1b10c:	bl	12a64 <__assert_fail@plt>
   1b110:	ldr	r3, [pc, #536]	; 1b330 <test_clone_slice@@Base+0xb18>
   1b114:	mov	r2, #712	; 0x2c8
   1b118:	movw	r1, #20464	; 0x4ff0
   1b11c:	movt	r1, #2
   1b120:	movw	r0, #20564	; 0x5054
   1b124:	movt	r0, #2
   1b128:	bl	12a64 <__assert_fail@plt>
   1b12c:	ldr	r3, [pc, #512]	; 1b334 <test_clone_slice@@Base+0xb1c>
   1b130:	mov	r2, #108	; 0x6c
   1b134:	movw	r1, #20604	; 0x507c
   1b138:	movt	r1, #2
   1b13c:	movw	r0, #20708	; 0x50e4
   1b140:	movt	r0, #2
   1b144:	bl	12a64 <__assert_fail@plt>
   1b148:	movw	r0, #27540	; 0x6b94
   1b14c:	movt	r0, #2
   1b150:	bl	129c8 <puts@plt>
   1b154:	mvn	r4, #0
   1b158:	b	1b188 <test_clone_slice@@Base+0x970>
   1b15c:	ldr	r3, [pc, #464]	; 1b334 <test_clone_slice@@Base+0xb1c>
   1b160:	mov	r2, #108	; 0x6c
   1b164:	movw	r1, #20604	; 0x507c
   1b168:	movt	r1, #2
   1b16c:	movw	r0, #20708	; 0x50e4
   1b170:	movt	r0, #2
   1b174:	bl	12a64 <__assert_fail@plt>
   1b178:	movw	r0, #27572	; 0x6bb4
   1b17c:	movt	r0, #2
   1b180:	bl	129c8 <puts@plt>
   1b184:	mvn	r4, #0
   1b188:	mov	r0, r8
   1b18c:	bl	22abc <flatcc_builder_aligned_free@@Base>
   1b190:	mov	r0, r4
   1b194:	add	sp, sp, #24
   1b198:	ldrd	r4, [sp]
   1b19c:	ldrd	r6, [sp, #8]
   1b1a0:	ldrd	r8, [sp, #16]
   1b1a4:	ldr	sl, [sp, #24]
   1b1a8:	add	sp, sp, #28
   1b1ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1b0:	movw	r0, #27608	; 0x6bd8
   1b1b4:	movt	r0, #2
   1b1b8:	bl	129c8 <puts@plt>
   1b1bc:	mvn	r4, #0
   1b1c0:	b	1b188 <test_clone_slice@@Base+0x970>
   1b1c4:	ldr	r3, [pc, #360]	; 1b334 <test_clone_slice@@Base+0xb1c>
   1b1c8:	mov	r2, #108	; 0x6c
   1b1cc:	movw	r1, #20604	; 0x507c
   1b1d0:	movt	r1, #2
   1b1d4:	movw	r0, #20708	; 0x50e4
   1b1d8:	movt	r0, #2
   1b1dc:	bl	12a64 <__assert_fail@plt>
   1b1e0:	movw	r0, #27636	; 0x6bf4
   1b1e4:	movt	r0, #2
   1b1e8:	bl	129c8 <puts@plt>
   1b1ec:	mvn	r4, #0
   1b1f0:	b	1b188 <test_clone_slice@@Base+0x970>
   1b1f4:	movw	r0, #27672	; 0x6c18
   1b1f8:	movt	r0, #2
   1b1fc:	bl	129c8 <puts@plt>
   1b200:	mvn	r4, #0
   1b204:	b	1b188 <test_clone_slice@@Base+0x970>
   1b208:	ldr	r3, [pc, #280]	; 1b328 <test_clone_slice@@Base+0xb10>
   1b20c:	mov	r2, #1664	; 0x680
   1b210:	movw	r1, #23376	; 0x5b50
   1b214:	movt	r1, #2
   1b218:	movw	r0, #23460	; 0x5ba4
   1b21c:	movt	r0, #2
   1b220:	bl	12a64 <__assert_fail@plt>
   1b224:	movw	r0, #27696	; 0x6c30
   1b228:	movt	r0, #2
   1b22c:	bl	12974 <printf@plt>
   1b230:	mvn	r4, #0
   1b234:	b	1b188 <test_clone_slice@@Base+0x970>
   1b238:	movw	r0, #27744	; 0x6c60
   1b23c:	movt	r0, #2
   1b240:	bl	129c8 <puts@plt>
   1b244:	mvn	r4, #0
   1b248:	b	1b188 <test_clone_slice@@Base+0x970>
   1b24c:	movw	r0, #27772	; 0x6c7c
   1b250:	movt	r0, #2
   1b254:	bl	129c8 <puts@plt>
   1b258:	mvn	r4, #0
   1b25c:	b	1b188 <test_clone_slice@@Base+0x970>
   1b260:	movw	r0, #27804	; 0x6c9c
   1b264:	movt	r0, #2
   1b268:	bl	129c8 <puts@plt>
   1b26c:	mvn	r4, #0
   1b270:	b	1b188 <test_clone_slice@@Base+0x970>
   1b274:	movw	r0, #27832	; 0x6cb8
   1b278:	movt	r0, #2
   1b27c:	bl	129c8 <puts@plt>
   1b280:	mvn	r4, #0
   1b284:	b	1b188 <test_clone_slice@@Base+0x970>
   1b288:	movw	r0, #27864	; 0x6cd8
   1b28c:	movt	r0, #2
   1b290:	bl	129c8 <puts@plt>
   1b294:	mvn	r4, #0
   1b298:	b	1b188 <test_clone_slice@@Base+0x970>
   1b29c:	movw	r0, #27892	; 0x6cf4
   1b2a0:	movt	r0, #2
   1b2a4:	bl	129c8 <puts@plt>
   1b2a8:	mvn	r4, #0
   1b2ac:	b	1b188 <test_clone_slice@@Base+0x970>
   1b2b0:	movw	r0, #27944	; 0x6d28
   1b2b4:	movt	r0, #2
   1b2b8:	bl	129c8 <puts@plt>
   1b2bc:	mvn	r4, #0
   1b2c0:	b	1b188 <test_clone_slice@@Base+0x970>
   1b2c4:	movw	r0, #27972	; 0x6d44
   1b2c8:	movt	r0, #2
   1b2cc:	bl	129c8 <puts@plt>
   1b2d0:	mvn	r4, #0
   1b2d4:	b	1b188 <test_clone_slice@@Base+0x970>
   1b2d8:	movw	r0, #28000	; 0x6d60
   1b2dc:	movt	r0, #2
   1b2e0:	bl	129c8 <puts@plt>
   1b2e4:	mvn	r4, #0
   1b2e8:	b	1b188 <test_clone_slice@@Base+0x970>
   1b2ec:	mov	r0, #0
   1b2f0:	bl	12f74 <_start@@Base+0x504>
   1b2f4:	movw	r1, #27432	; 0x6b28
   1b2f8:	movt	r1, #2
   1b2fc:	bl	12968 <strcmp@plt>
   1b300:	cmp	r0, #0
   1b304:	beq	1b110 <test_clone_slice@@Base+0x8f8>
   1b308:	movw	r0, #27512	; 0x6b78
   1b30c:	movt	r0, #2
   1b310:	bl	129c8 <puts@plt>
   1b314:	mvn	r4, #0
   1b318:	b	1b188 <test_clone_slice@@Base+0x970>
   1b31c:	eorgt	r3, r9, #-872415232	; 0xcc000000
   1b320:	andeq	r4, r2, r0, asr #20
   1b324:	andeq	r4, r2, r4, asr #20
   1b328:	andeq	r4, r2, r8, lsl ip
   1b32c:	andeq	r4, r2, ip, lsr #24
   1b330:	andeq	r4, r2, r4, asr ip
   1b334:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>

0001b338 <test_create_add_field@@Base>:
   1b338:	strd	r4, [sp, #-12]!
   1b33c:	str	lr, [sp, #8]
   1b340:	sub	sp, sp, #12
   1b344:	mov	r4, r0
   1b348:	bl	1ee18 <flatcc_builder_reset@@Base>
   1b34c:	mov	r3, #0
   1b350:	mov	r2, r3
   1b354:	movw	r1, #20800	; 0x5140
   1b358:	movt	r1, #2
   1b35c:	mov	r0, r4
   1b360:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   1b364:	cmp	r0, #0
   1b368:	bne	1b378 <test_create_add_field@@Base+0x40>
   1b36c:	mov	r1, #36	; 0x24
   1b370:	mov	r0, r4
   1b374:	bl	20608 <flatcc_builder_start_table@@Base>
   1b378:	movw	r1, #21584	; 0x5450
   1b37c:	movt	r1, #2
   1b380:	mov	r0, r4
   1b384:	bl	22020 <flatcc_builder_create_string_str@@Base>
   1b388:	subs	r5, r0, #0
   1b38c:	beq	1b3a4 <test_create_add_field@@Base+0x6c>
   1b390:	mov	r1, #3
   1b394:	mov	r0, r4
   1b398:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1b39c:	cmp	r0, #0
   1b3a0:	strne	r5, [r0]
   1b3a4:	movw	r1, #28068	; 0x6da4
   1b3a8:	movt	r1, #2
   1b3ac:	mov	r0, r4
   1b3b0:	bl	22020 <flatcc_builder_create_string_str@@Base>
   1b3b4:	mov	r5, r0
   1b3b8:	mov	r1, #3
   1b3bc:	mov	r0, r4
   1b3c0:	bl	20608 <flatcc_builder_start_table@@Base>
   1b3c4:	cmp	r0, #0
   1b3c8:	bne	1b474 <test_create_add_field@@Base+0x13c>
   1b3cc:	mov	r3, #8
   1b3d0:	mov	r2, r3
   1b3d4:	mov	r1, #1
   1b3d8:	mov	r0, r4
   1b3dc:	bl	221cc <flatcc_builder_table_add@@Base>
   1b3e0:	cmp	r0, #0
   1b3e4:	beq	1b474 <test_create_add_field@@Base+0x13c>
   1b3e8:	mvn	r2, #99	; 0x63
   1b3ec:	mvn	r3, #0
   1b3f0:	strd	r2, [r0]
   1b3f4:	cmp	r5, #0
   1b3f8:	beq	1b474 <test_create_add_field@@Base+0x13c>
   1b3fc:	mov	r1, #0
   1b400:	mov	r0, r4
   1b404:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1b408:	cmp	r0, #0
   1b40c:	beq	1b474 <test_create_add_field@@Base+0x13c>
   1b410:	str	r5, [r0]
   1b414:	mov	r3, #2
   1b418:	mov	r2, r3
   1b41c:	mov	r1, r3
   1b420:	mov	r0, r4
   1b424:	bl	221cc <flatcc_builder_table_add@@Base>
   1b428:	cmp	r0, #0
   1b42c:	beq	1b474 <test_create_add_field@@Base+0x13c>
   1b430:	mov	r3, #2
   1b434:	strh	r3, [r0]
   1b438:	mov	r2, #0
   1b43c:	ldr	r1, [pc, #452]	; 1b608 <test_create_add_field@@Base+0x2d0>
   1b440:	mov	r0, r4
   1b444:	bl	21030 <flatcc_builder_check_required@@Base>
   1b448:	cmp	r0, #0
   1b44c:	beq	1b570 <test_create_add_field@@Base+0x238>
   1b450:	mov	r0, r4
   1b454:	bl	210e0 <flatcc_builder_end_table@@Base>
   1b458:	subs	r5, r0, #0
   1b45c:	beq	1b474 <test_create_add_field@@Base+0x13c>
   1b460:	mov	r1, #14
   1b464:	mov	r0, r4
   1b468:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1b46c:	cmp	r0, #0
   1b470:	strne	r5, [r0]
   1b474:	mov	r2, #1
   1b478:	ldr	r1, [pc, #396]	; 1b60c <test_create_add_field@@Base+0x2d4>
   1b47c:	mov	r0, r4
   1b480:	bl	21030 <flatcc_builder_check_required@@Base>
   1b484:	cmp	r0, #0
   1b488:	beq	1b58c <test_create_add_field@@Base+0x254>
   1b48c:	mov	r0, r4
   1b490:	bl	210e0 <flatcc_builder_end_table@@Base>
   1b494:	mov	r1, r0
   1b498:	mov	r0, r4
   1b49c:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   1b4a0:	add	r1, sp, #4
   1b4a4:	mov	r0, r4
   1b4a8:	bl	2299c <flatcc_builder_finalize_aligned_buffer@@Base>
   1b4ac:	subs	r4, r0, #0
   1b4b0:	beq	1b5a8 <test_create_add_field@@Base+0x270>
   1b4b4:	movw	r3, #20301	; 0x4f4d
   1b4b8:	movt	r3, #21326	; 0x534e
   1b4bc:	ldr	r2, [r4, #4]
   1b4c0:	cmp	r2, r3
   1b4c4:	bne	1b5a8 <test_create_add_field@@Base+0x270>
   1b4c8:	ldr	r3, [r4]
   1b4cc:	adds	r2, r4, r3
   1b4d0:	beq	1b5a8 <test_create_add_field@@Base+0x270>
   1b4d4:	ldr	r3, [r4, r3]
   1b4d8:	sub	r3, r2, r3
   1b4dc:	ldrh	r1, [r3]
   1b4e0:	cmp	r1, #29
   1b4e4:	bls	1b4f4 <test_create_add_field@@Base+0x1bc>
   1b4e8:	ldrh	r0, [r3, #28]
   1b4ec:	cmp	r0, #0
   1b4f0:	bne	1b5c4 <test_create_add_field@@Base+0x28c>
   1b4f4:	cmp	r1, #33	; 0x21
   1b4f8:	bls	1b5d8 <test_create_add_field@@Base+0x2a0>
   1b4fc:	ldrh	r3, [r3, #32]
   1b500:	cmp	r3, #0
   1b504:	beq	1b5d8 <test_create_add_field@@Base+0x2a0>
   1b508:	add	r1, r2, r3
   1b50c:	ldr	r3, [r2, r3]
   1b510:	adds	r2, r1, r3
   1b514:	beq	1b5d8 <test_create_add_field@@Base+0x2a0>
   1b518:	ldr	r3, [r1, r3]
   1b51c:	sub	r3, r2, r3
   1b520:	ldrh	r1, [r3]
   1b524:	cmp	r1, #7
   1b528:	bls	1b5f4 <test_create_add_field@@Base+0x2bc>
   1b52c:	ldrh	r3, [r3, #6]
   1b530:	cmp	r3, #0
   1b534:	beq	1b5f4 <test_create_add_field@@Base+0x2bc>
   1b538:	ldrd	r0, [r2, r3]
   1b53c:	mvn	r2, #99	; 0x63
   1b540:	mvn	r3, #0
   1b544:	cmp	r1, r3
   1b548:	cmpeq	r0, r2
   1b54c:	moveq	r5, #0
   1b550:	bne	1b5f4 <test_create_add_field@@Base+0x2bc>
   1b554:	mov	r0, r4
   1b558:	bl	22abc <flatcc_builder_aligned_free@@Base>
   1b55c:	mov	r0, r5
   1b560:	add	sp, sp, #12
   1b564:	ldrd	r4, [sp]
   1b568:	add	sp, sp, #8
   1b56c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b570:	ldr	r3, [pc, #152]	; 1b610 <test_create_add_field@@Base+0x2d8>
   1b574:	mov	r2, #221	; 0xdd
   1b578:	movw	r1, #21196	; 0x52cc
   1b57c:	movt	r1, #2
   1b580:	movw	r0, #24704	; 0x6080
   1b584:	movt	r0, #2
   1b588:	bl	12a64 <__assert_fail@plt>
   1b58c:	ldr	r3, [pc, #128]	; 1b614 <test_create_add_field@@Base+0x2dc>
   1b590:	mov	r2, #235	; 0xeb
   1b594:	movw	r1, #21196	; 0x52cc
   1b598:	movt	r1, #2
   1b59c:	movw	r0, #21596	; 0x545c
   1b5a0:	movt	r0, #2
   1b5a4:	bl	12a64 <__assert_fail@plt>
   1b5a8:	ldr	r3, [pc, #104]	; 1b618 <test_create_add_field@@Base+0x2e0>
   1b5ac:	mov	r2, #716	; 0x2cc
   1b5b0:	movw	r1, #20464	; 0x4ff0
   1b5b4:	movt	r1, #2
   1b5b8:	movw	r0, #20564	; 0x5054
   1b5bc:	movt	r0, #2
   1b5c0:	bl	12a64 <__assert_fail@plt>
   1b5c4:	movw	r0, #28076	; 0x6dac
   1b5c8:	movt	r0, #2
   1b5cc:	bl	129c8 <puts@plt>
   1b5d0:	mvn	r5, #0
   1b5d4:	b	1b554 <test_create_add_field@@Base+0x21c>
   1b5d8:	ldr	r3, [pc, #60]	; 1b61c <test_create_add_field@@Base+0x2e4>
   1b5dc:	mov	r2, #608	; 0x260
   1b5e0:	movw	r1, #20464	; 0x4ff0
   1b5e4:	movt	r1, #2
   1b5e8:	movw	r0, #20564	; 0x5054
   1b5ec:	movt	r0, #2
   1b5f0:	bl	12a64 <__assert_fail@plt>
   1b5f4:	movw	r0, #28124	; 0x6ddc
   1b5f8:	movt	r0, #2
   1b5fc:	bl	129c8 <puts@plt>
   1b600:	mvn	r5, #0
   1b604:	b	1b554 <test_create_add_field@@Base+0x21c>
   1b608:	andeq	r4, r2, r0, ror #22
   1b60c:	andeq	r4, r2, r0, asr #20
   1b610:	andeq	r4, r2, r4, ror #22
   1b614:	andeq	r4, r2, r4, asr #20
   1b618:	andeq	r4, r2, r0, lsl #25
   1b61c:	andeq	r4, r2, r8, lsr #25

0001b620 <test_union_vector@@Base>:
   1b620:	strd	r4, [sp, #-16]!
   1b624:	str	r6, [sp, #8]
   1b628:	str	lr, [sp, #12]
   1b62c:	sub	sp, sp, #24
   1b630:	mov	r4, r0
   1b634:	bl	1ee18 <flatcc_builder_reset@@Base>
   1b638:	mov	r3, #0
   1b63c:	mov	r2, r3
   1b640:	movw	r1, #20800	; 0x5140
   1b644:	movt	r1, #2
   1b648:	mov	r0, r4
   1b64c:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   1b650:	cmp	r0, #0
   1b654:	bne	1b664 <test_union_vector@@Base+0x44>
   1b658:	mov	r1, #36	; 0x24
   1b65c:	mov	r0, r4
   1b660:	bl	20608 <flatcc_builder_start_table@@Base>
   1b664:	movw	r1, #28144	; 0x6df0
   1b668:	movt	r1, #2
   1b66c:	mov	r0, r4
   1b670:	bl	134e4 <_start@@Base+0xa74>
   1b674:	mov	r1, #4
   1b678:	mov	r0, r4
   1b67c:	bl	20608 <flatcc_builder_start_table@@Base>
   1b680:	cmp	r0, #0
   1b684:	bne	1b880 <test_union_vector@@Base+0x260>
   1b688:	mov	r2, #0
   1b68c:	ldr	r1, [pc, #1368]	; 1bbec <test_union_vector@@Base+0x5cc>
   1b690:	mov	r0, r4
   1b694:	bl	21030 <flatcc_builder_check_required@@Base>
   1b698:	cmp	r0, #0
   1b69c:	beq	1b864 <test_union_vector@@Base+0x244>
   1b6a0:	mov	r0, r4
   1b6a4:	bl	210e0 <flatcc_builder_end_table@@Base>
   1b6a8:	mov	r5, r0
   1b6ac:	mov	r0, r4
   1b6b0:	bl	219d0 <flatcc_builder_start_union_vector@@Base>
   1b6b4:	mov	r3, #2
   1b6b8:	strb	r3, [sp, #4]
   1b6bc:	str	r5, [sp, #8]
   1b6c0:	add	r3, sp, #4
   1b6c4:	ldm	r3, {r1, r2}
   1b6c8:	mov	r0, r4
   1b6cc:	bl	21d44 <flatcc_builder_union_vector_push@@Base>
   1b6d0:	mov	r1, r4
   1b6d4:	add	r0, sp, #12
   1b6d8:	bl	21a54 <flatcc_builder_end_union_vector@@Base>
   1b6dc:	mov	r1, #4
   1b6e0:	mov	r0, r4
   1b6e4:	bl	20608 <flatcc_builder_start_table@@Base>
   1b6e8:	ldr	r5, [sp, #12]
   1b6ec:	ldr	r6, [sp, #16]
   1b6f0:	cmp	r6, #0
   1b6f4:	cmpne	r5, #0
   1b6f8:	bne	1b888 <test_union_vector@@Base+0x268>
   1b6fc:	mov	r2, #0
   1b700:	ldr	r1, [pc, #1256]	; 1bbf0 <test_union_vector@@Base+0x5d0>
   1b704:	mov	r0, r4
   1b708:	bl	21030 <flatcc_builder_check_required@@Base>
   1b70c:	cmp	r0, #0
   1b710:	beq	1b8b8 <test_union_vector@@Base+0x298>
   1b714:	mov	r0, r4
   1b718:	bl	210e0 <flatcc_builder_end_table@@Base>
   1b71c:	subs	r5, r0, #0
   1b720:	beq	1b760 <test_union_vector@@Base+0x140>
   1b724:	mov	r3, #1
   1b728:	mov	r2, r3
   1b72c:	mov	r1, #7
   1b730:	mov	r0, r4
   1b734:	bl	221cc <flatcc_builder_table_add@@Base>
   1b738:	subs	r6, r0, #0
   1b73c:	beq	1b760 <test_union_vector@@Base+0x140>
   1b740:	mov	r1, #8
   1b744:	mov	r0, r4
   1b748:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1b74c:	cmp	r0, #0
   1b750:	beq	1b760 <test_union_vector@@Base+0x140>
   1b754:	mov	r3, #4
   1b758:	strb	r3, [r6]
   1b75c:	str	r5, [r0]
   1b760:	mov	r2, #1
   1b764:	ldr	r1, [pc, #1160]	; 1bbf4 <test_union_vector@@Base+0x5d4>
   1b768:	mov	r0, r4
   1b76c:	bl	21030 <flatcc_builder_check_required@@Base>
   1b770:	cmp	r0, #0
   1b774:	beq	1b8d4 <test_union_vector@@Base+0x2b4>
   1b778:	mov	r0, r4
   1b77c:	bl	210e0 <flatcc_builder_end_table@@Base>
   1b780:	mov	r1, r0
   1b784:	mov	r0, r4
   1b788:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   1b78c:	add	r1, sp, #20
   1b790:	mov	r0, r4
   1b794:	bl	2299c <flatcc_builder_finalize_aligned_buffer@@Base>
   1b798:	mov	r4, r0
   1b79c:	movw	r3, #14092	; 0x370c
   1b7a0:	movt	r3, #1
   1b7a4:	movw	r2, #20800	; 0x5140
   1b7a8:	movt	r2, #2
   1b7ac:	ldr	r1, [sp, #20]
   1b7b0:	bl	23f7c <flatcc_verify_table_as_root@@Base>
   1b7b4:	subs	r5, r0, #0
   1b7b8:	bne	1b8f0 <test_union_vector@@Base+0x2d0>
   1b7bc:	cmp	r4, #0
   1b7c0:	beq	1b910 <test_union_vector@@Base+0x2f0>
   1b7c4:	movw	r3, #20301	; 0x4f4d
   1b7c8:	movt	r3, #21326	; 0x534e
   1b7cc:	ldr	r2, [r4, #4]
   1b7d0:	cmp	r2, r3
   1b7d4:	bne	1b910 <test_union_vector@@Base+0x2f0>
   1b7d8:	ldr	r3, [r4]
   1b7dc:	adds	r2, r4, r3
   1b7e0:	beq	1b910 <test_union_vector@@Base+0x2f0>
   1b7e4:	ldr	r3, [r4, r3]
   1b7e8:	sub	r3, r2, r3
   1b7ec:	ldrh	r1, [r3]
   1b7f0:	cmp	r1, #19
   1b7f4:	bls	1b92c <test_union_vector@@Base+0x30c>
   1b7f8:	ldrh	r0, [r3, #18]
   1b7fc:	cmp	r0, #0
   1b800:	beq	1b92c <test_union_vector@@Base+0x30c>
   1b804:	ldrb	r0, [r2, r0]
   1b808:	cmp	r0, #4
   1b80c:	bne	1b92c <test_union_vector@@Base+0x30c>
   1b810:	cmp	r1, #21
   1b814:	bls	1b854 <test_union_vector@@Base+0x234>
   1b818:	ldrh	r3, [r3, #20]
   1b81c:	cmp	r3, #0
   1b820:	beq	1b854 <test_union_vector@@Base+0x234>
   1b824:	add	r1, r2, r3
   1b828:	ldr	r3, [r2, r3]
   1b82c:	adds	r2, r1, r3
   1b830:	beq	1b854 <test_union_vector@@Base+0x234>
   1b834:	ldr	r3, [r1, r3]
   1b838:	sub	r3, r2, r3
   1b83c:	ldrh	r0, [r3]
   1b840:	cmp	r0, #11
   1b844:	bls	1bb28 <test_union_vector@@Base+0x508>
   1b848:	ldrh	r1, [r3, #10]
   1b84c:	cmp	r1, #0
   1b850:	beq	1bba8 <test_union_vector@@Base+0x588>
   1b854:	movw	r0, #28612	; 0x6fc4
   1b858:	movt	r0, #2
   1b85c:	bl	129c8 <puts@plt>
   1b860:	b	1b938 <test_union_vector@@Base+0x318>
   1b864:	ldr	r3, [pc, #908]	; 1bbf8 <test_union_vector@@Base+0x5d8>
   1b868:	mov	r2, #217	; 0xd9
   1b86c:	movw	r1, #21196	; 0x52cc
   1b870:	movt	r1, #2
   1b874:	movw	r0, #28152	; 0x6df8
   1b878:	movt	r0, #2
   1b87c:	bl	12a64 <__assert_fail@plt>
   1b880:	mov	r5, #0
   1b884:	b	1b6ac <test_union_vector@@Base+0x8c>
   1b888:	mov	r1, #2
   1b88c:	mov	r0, r4
   1b890:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1b894:	cmp	r0, #0
   1b898:	beq	1b6fc <test_union_vector@@Base+0xdc>
   1b89c:	str	r5, [r0]
   1b8a0:	mov	r1, #3
   1b8a4:	mov	r0, r4
   1b8a8:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1b8ac:	cmp	r0, #0
   1b8b0:	strne	r6, [r0]
   1b8b4:	b	1b6fc <test_union_vector@@Base+0xdc>
   1b8b8:	ldr	r3, [pc, #828]	; 1bbfc <test_union_vector@@Base+0x5dc>
   1b8bc:	mov	r2, #223	; 0xdf
   1b8c0:	movw	r1, #21196	; 0x52cc
   1b8c4:	movt	r1, #2
   1b8c8:	movw	r0, #28364	; 0x6ecc
   1b8cc:	movt	r0, #2
   1b8d0:	bl	12a64 <__assert_fail@plt>
   1b8d4:	ldr	r3, [pc, #804]	; 1bc00 <test_union_vector@@Base+0x5e0>
   1b8d8:	mov	r2, #235	; 0xeb
   1b8dc:	movw	r1, #21196	; 0x52cc
   1b8e0:	movt	r1, #2
   1b8e4:	movw	r0, #21596	; 0x545c
   1b8e8:	movt	r0, #2
   1b8ec:	bl	12a64 <__assert_fail@plt>
   1b8f0:	mov	r0, r5
   1b8f4:	bl	231c4 <flatcc_verify_error_string@@Base>
   1b8f8:	mov	r1, r0
   1b8fc:	movw	r0, #28516	; 0x6f64
   1b900:	movt	r0, #2
   1b904:	bl	12974 <printf@plt>
   1b908:	mvn	r5, #0
   1b90c:	b	1b940 <test_union_vector@@Base+0x320>
   1b910:	ldr	r3, [pc, #748]	; 1bc04 <test_union_vector@@Base+0x5e4>
   1b914:	movw	r2, #717	; 0x2cd
   1b918:	movw	r1, #20464	; 0x4ff0
   1b91c:	movt	r1, #2
   1b920:	movw	r0, #20564	; 0x5054
   1b924:	movt	r0, #2
   1b928:	bl	12a64 <__assert_fail@plt>
   1b92c:	movw	r0, #28576	; 0x6fa0
   1b930:	movt	r0, #2
   1b934:	bl	12974 <printf@plt>
   1b938:	mov	r0, r4
   1b93c:	bl	22abc <flatcc_builder_aligned_free@@Base>
   1b940:	mov	r0, r5
   1b944:	add	sp, sp, #24
   1b948:	ldrd	r4, [sp]
   1b94c:	ldr	r6, [sp, #8]
   1b950:	add	sp, sp, #12
   1b954:	pop	{pc}		; (ldr pc, [sp], #4)
   1b958:	ldrb	r1, [r1]
   1b95c:	cmp	r1, #2
   1b960:	beq	1b974 <test_union_vector@@Base+0x354>
   1b964:	movw	r0, #28692	; 0x7014
   1b968:	movt	r0, #2
   1b96c:	bl	129c8 <puts@plt>
   1b970:	b	1b938 <test_union_vector@@Base+0x318>
   1b974:	cmp	ip, #0
   1b978:	beq	1b9d0 <test_union_vector@@Base+0x3b0>
   1b97c:	ldr	r1, [ip, #-4]
   1b980:	cmp	r1, #0
   1b984:	beq	1b9d0 <test_union_vector@@Base+0x3b0>
   1b988:	ldr	r1, [ip]
   1b98c:	adds	lr, ip, r1
   1b990:	beq	1b9ec <test_union_vector@@Base+0x3cc>
   1b994:	ldr	r1, [ip, r1]
   1b998:	sub	r1, lr, r1
   1b99c:	ldrh	ip, [r1]
   1b9a0:	cmp	ip, #5
   1b9a4:	bls	1b9fc <test_union_vector@@Base+0x3dc>
   1b9a8:	ldrh	r1, [r1, #4]
   1b9ac:	cmp	r1, #0
   1b9b0:	beq	1b9fc <test_union_vector@@Base+0x3dc>
   1b9b4:	ldrsb	r1, [lr, r1]
   1b9b8:	cmp	r1, #2
   1b9bc:	beq	1b9fc <test_union_vector@@Base+0x3dc>
   1b9c0:	movw	r0, #28756	; 0x7054
   1b9c4:	movt	r0, #2
   1b9c8:	bl	12974 <printf@plt>
   1b9cc:	b	1b938 <test_union_vector@@Base+0x318>
   1b9d0:	ldr	r3, [pc, #560]	; 1bc08 <test_union_vector@@Base+0x5e8>
   1b9d4:	mov	r2, #117	; 0x75
   1b9d8:	movw	r1, #20604	; 0x507c
   1b9dc:	movt	r1, #2
   1b9e0:	movw	r0, #20708	; 0x50e4
   1b9e4:	movt	r0, #2
   1b9e8:	bl	12a64 <__assert_fail@plt>
   1b9ec:	movw	r0, #28740	; 0x7044
   1b9f0:	movt	r0, #2
   1b9f4:	bl	129c8 <puts@plt>
   1b9f8:	b	1b938 <test_union_vector@@Base+0x318>
   1b9fc:	cmp	r0, #9
   1ba00:	movls	r1, #0
   1ba04:	bls	1ba28 <test_union_vector@@Base+0x408>
   1ba08:	ldrh	ip, [r3, #8]
   1ba0c:	cmp	ip, #0
   1ba10:	moveq	r1, #0
   1ba14:	beq	1ba28 <test_union_vector@@Base+0x408>
   1ba18:	add	r6, r2, ip
   1ba1c:	ldr	r1, [r2, ip]
   1ba20:	add	r1, r1, #4
   1ba24:	add	r1, r6, r1
   1ba28:	cmp	r0, #11
   1ba2c:	bls	1bb98 <test_union_vector@@Base+0x578>
   1ba30:	ldrh	r0, [r3, #10]
   1ba34:	cmp	r0, #0
   1ba38:	moveq	r3, #0
   1ba3c:	beq	1ba50 <test_union_vector@@Base+0x430>
   1ba40:	add	r3, r2, r0
   1ba44:	ldr	r2, [r2, r0]
   1ba48:	add	r2, r2, #4
   1ba4c:	add	r3, r3, r2
   1ba50:	cmp	r1, #0
   1ba54:	beq	1bb18 <test_union_vector@@Base+0x4f8>
   1ba58:	ldr	r2, [r1, #-4]
   1ba5c:	cmp	r3, #0
   1ba60:	beq	1bb88 <test_union_vector@@Base+0x568>
   1ba64:	ldr	r0, [r3, #-4]
   1ba68:	cmp	r2, r0
   1ba6c:	bne	1ba94 <test_union_vector@@Base+0x474>
   1ba70:	cmp	r1, #0
   1ba74:	beq	1ba84 <test_union_vector@@Base+0x464>
   1ba78:	ldr	r2, [r1, #-4]
   1ba7c:	cmp	r2, #1
   1ba80:	beq	1bab0 <test_union_vector@@Base+0x490>
   1ba84:	movw	r0, #28892	; 0x70dc
   1ba88:	movt	r0, #2
   1ba8c:	bl	129c8 <puts@plt>
   1ba90:	b	1b938 <test_union_vector@@Base+0x318>
   1ba94:	ldr	r3, [pc, #368]	; 1bc0c <test_union_vector@@Base+0x5ec>
   1ba98:	movw	r2, #621	; 0x26d
   1ba9c:	movw	r1, #20464	; 0x4ff0
   1baa0:	movt	r1, #2
   1baa4:	movw	r0, #28788	; 0x7074
   1baa8:	movt	r0, #2
   1baac:	bl	12a64 <__assert_fail@plt>
   1bab0:	ldrb	r2, [r1]
   1bab4:	cmp	r2, #0
   1bab8:	bne	1bacc <test_union_vector@@Base+0x4ac>
   1babc:	movw	r0, #28960	; 0x7120
   1bac0:	movt	r0, #2
   1bac4:	bl	129c8 <puts@plt>
   1bac8:	b	1b938 <test_union_vector@@Base+0x318>
   1bacc:	cmp	r0, #0
   1bad0:	beq	1bafc <test_union_vector@@Base+0x4dc>
   1bad4:	ldr	r1, [r3]
   1bad8:	add	r3, r3, r1
   1badc:	cmp	r2, #2
   1bae0:	bne	1babc <test_union_vector@@Base+0x49c>
   1bae4:	cmp	lr, r3
   1bae8:	beq	1b938 <test_union_vector@@Base+0x318>
   1baec:	movw	r0, #28988	; 0x713c
   1baf0:	movt	r0, #2
   1baf4:	bl	129c8 <puts@plt>
   1baf8:	b	1b938 <test_union_vector@@Base+0x318>
   1bafc:	ldr	r3, [pc, #260]	; 1bc08 <test_union_vector@@Base+0x5e8>
   1bb00:	mov	r2, #117	; 0x75
   1bb04:	movw	r1, #20604	; 0x507c
   1bb08:	movt	r1, #2
   1bb0c:	movw	r0, #20708	; 0x50e4
   1bb10:	movt	r0, #2
   1bb14:	bl	12a64 <__assert_fail@plt>
   1bb18:	cmp	r3, #0
   1bb1c:	movne	r2, #0
   1bb20:	bne	1ba64 <test_union_vector@@Base+0x444>
   1bb24:	b	1ba84 <test_union_vector@@Base+0x464>
   1bb28:	cmp	r0, #9
   1bb2c:	bls	1bb78 <test_union_vector@@Base+0x558>
   1bb30:	ldrh	ip, [r3, #8]
   1bb34:	cmp	ip, #0
   1bb38:	bne	1bbd4 <test_union_vector@@Base+0x5b4>
   1bb3c:	cmp	r0, #11
   1bb40:	bls	1bb78 <test_union_vector@@Base+0x558>
   1bb44:	ldrh	ip, [r3, #10]
   1bb48:	cmp	ip, #0
   1bb4c:	movne	r1, #0
   1bb50:	beq	1bb78 <test_union_vector@@Base+0x558>
   1bb54:	add	lr, r2, ip
   1bb58:	ldr	ip, [r2, ip]
   1bb5c:	add	ip, ip, #4
   1bb60:	add	ip, lr, ip
   1bb64:	cmp	r1, #0
   1bb68:	beq	1bb78 <test_union_vector@@Base+0x558>
   1bb6c:	ldr	lr, [r1, #-4]
   1bb70:	cmp	lr, #1
   1bb74:	beq	1b958 <test_union_vector@@Base+0x338>
   1bb78:	movw	r0, #28652	; 0x6fec
   1bb7c:	movt	r0, #2
   1bb80:	bl	129c8 <puts@plt>
   1bb84:	b	1b938 <test_union_vector@@Base+0x318>
   1bb88:	cmp	r2, #0
   1bb8c:	bne	1ba94 <test_union_vector@@Base+0x474>
   1bb90:	mov	r0, r2
   1bb94:	b	1ba78 <test_union_vector@@Base+0x458>
   1bb98:	cmp	r1, #0
   1bb9c:	movne	r3, #0
   1bba0:	bne	1ba58 <test_union_vector@@Base+0x438>
   1bba4:	b	1ba84 <test_union_vector@@Base+0x464>
   1bba8:	ldrh	ip, [r3, #8]
   1bbac:	cmp	ip, #0
   1bbb0:	beq	1bb3c <test_union_vector@@Base+0x51c>
   1bbb4:	add	r1, r2, ip
   1bbb8:	ldr	ip, [r2, ip]
   1bbbc:	add	ip, ip, #4
   1bbc0:	add	r1, r1, ip
   1bbc4:	ldrh	ip, [r3, #10]
   1bbc8:	cmp	ip, #0
   1bbcc:	beq	1bb64 <test_union_vector@@Base+0x544>
   1bbd0:	b	1bb54 <test_union_vector@@Base+0x534>
   1bbd4:	add	r1, r2, ip
   1bbd8:	ldr	ip, [r2, ip]
   1bbdc:	add	ip, ip, #4
   1bbe0:	add	r1, r1, ip
   1bbe4:	mov	ip, #0
   1bbe8:	b	1bb64 <test_union_vector@@Base+0x544>
   1bbec:	andeq	r4, r2, r0, asr #25
   1bbf0:	strdeq	r4, [r2], -r0
   1bbf4:	andeq	r4, r2, r0, asr #20
   1bbf8:	andeq	r4, r2, r4, asr #25
   1bbfc:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   1bc00:	andeq	r4, r2, r4, asr #20
   1bc04:	andeq	r4, r2, ip, lsr r9
   1bc08:	andeq	r4, r2, r0, ror #19
   1bc0c:	andeq	r4, r2, ip, lsl #26

0001bc10 <test_mixed_type_union@@Base>:
   1bc10:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1bc14:	strd	r6, [sp, #8]
   1bc18:	strd	r8, [sp, #16]
   1bc1c:	str	lr, [sp, #24]
   1bc20:	sub	sp, sp, #44	; 0x2c
   1bc24:	mov	r4, r0
   1bc28:	bl	1ee18 <flatcc_builder_reset@@Base>
   1bc2c:	mov	r3, #0
   1bc30:	mov	r2, r3
   1bc34:	movw	r1, #20800	; 0x5140
   1bc38:	movt	r1, #2
   1bc3c:	mov	r0, r4
   1bc40:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   1bc44:	cmp	r0, #0
   1bc48:	bne	1bc58 <test_mixed_type_union@@Base+0x48>
   1bc4c:	mov	r1, #10
   1bc50:	mov	r0, r4
   1bc54:	bl	20608 <flatcc_builder_start_table@@Base>
   1bc58:	mov	r2, #4
   1bc5c:	mov	r1, r2
   1bc60:	mov	r0, r4
   1bc64:	bl	1f860 <flatcc_builder_start_struct@@Base>
   1bc68:	cmp	r0, #0
   1bc6c:	moveq	r7, #0
   1bc70:	beq	1bc88 <test_mixed_type_union@@Base+0x78>
   1bc74:	mov	r3, #10
   1bc78:	str	r3, [r0]
   1bc7c:	mov	r0, r4
   1bc80:	bl	1f918 <flatcc_builder_end_struct@@Base>
   1bc84:	mov	r7, r0
   1bc88:	mov	r2, #2
   1bc8c:	mov	r1, r2
   1bc90:	mov	r0, r4
   1bc94:	bl	1f860 <flatcc_builder_start_struct@@Base>
   1bc98:	cmp	r0, #0
   1bc9c:	beq	1c8a0 <test_mixed_type_union@@Base+0xc90>
   1bca0:	mov	r3, #22
   1bca4:	strh	r3, [r0]
   1bca8:	mov	r0, r4
   1bcac:	bl	1f918 <flatcc_builder_end_struct@@Base>
   1bcb0:	mov	r5, r0
   1bcb4:	mov	r2, #2
   1bcb8:	mov	r1, r2
   1bcbc:	mov	r0, r4
   1bcc0:	bl	1f860 <flatcc_builder_start_struct@@Base>
   1bcc4:	cmp	r0, #0
   1bcc8:	beq	1bd20 <test_mixed_type_union@@Base+0x110>
   1bccc:	mov	r3, #19
   1bcd0:	strh	r3, [r0]
   1bcd4:	mov	r0, r4
   1bcd8:	bl	1f918 <flatcc_builder_end_struct@@Base>
   1bcdc:	subs	r6, r0, #0
   1bce0:	beq	1bd20 <test_mixed_type_union@@Base+0x110>
   1bce4:	mov	r3, #1
   1bce8:	mov	r2, r3
   1bcec:	mov	r1, #0
   1bcf0:	mov	r0, r4
   1bcf4:	bl	221cc <flatcc_builder_table_add@@Base>
   1bcf8:	subs	r8, r0, #0
   1bcfc:	beq	1bd20 <test_mixed_type_union@@Base+0x110>
   1bd00:	mov	r1, #1
   1bd04:	mov	r0, r4
   1bd08:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1bd0c:	cmp	r0, #0
   1bd10:	beq	1bd20 <test_mixed_type_union@@Base+0x110>
   1bd14:	mov	r3, #8
   1bd18:	strb	r3, [r8]
   1bd1c:	str	r6, [r0]
   1bd20:	cmp	r5, #0
   1bd24:	beq	1bd64 <test_mixed_type_union@@Base+0x154>
   1bd28:	mov	r3, #1
   1bd2c:	mov	r2, r3
   1bd30:	mov	r1, #6
   1bd34:	mov	r0, r4
   1bd38:	bl	221cc <flatcc_builder_table_add@@Base>
   1bd3c:	subs	r6, r0, #0
   1bd40:	beq	1bd64 <test_mixed_type_union@@Base+0x154>
   1bd44:	mov	r1, #7
   1bd48:	mov	r0, r4
   1bd4c:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1bd50:	cmp	r0, #0
   1bd54:	beq	1bd64 <test_mixed_type_union@@Base+0x154>
   1bd58:	mov	r3, #8
   1bd5c:	strb	r3, [r6]
   1bd60:	str	r5, [r0]
   1bd64:	mov	r1, #1
   1bd68:	mov	r0, r4
   1bd6c:	bl	20608 <flatcc_builder_start_table@@Base>
   1bd70:	cmp	r0, #0
   1bd74:	bne	1c898 <test_mixed_type_union@@Base+0xc88>
   1bd78:	mov	r3, #4
   1bd7c:	mov	r2, r3
   1bd80:	mov	r1, #0
   1bd84:	mov	r0, r4
   1bd88:	bl	221cc <flatcc_builder_table_add@@Base>
   1bd8c:	cmp	r0, #0
   1bd90:	beq	1c898 <test_mixed_type_union@@Base+0xc88>
   1bd94:	mov	r3, #42	; 0x2a
   1bd98:	str	r3, [r0]
   1bd9c:	mov	r2, #0
   1bda0:	ldr	r1, [pc, #2840]	; 1c8c0 <test_mixed_type_union@@Base+0xcb0>
   1bda4:	mov	r0, r4
   1bda8:	bl	21030 <flatcc_builder_check_required@@Base>
   1bdac:	cmp	r0, #0
   1bdb0:	beq	1c1b8 <test_mixed_type_union@@Base+0x5a8>
   1bdb4:	mov	r0, r4
   1bdb8:	bl	210e0 <flatcc_builder_end_table@@Base>
   1bdbc:	subs	r6, r0, #0
   1bdc0:	beq	1be00 <test_mixed_type_union@@Base+0x1f0>
   1bdc4:	mov	r3, #1
   1bdc8:	mov	r2, r3
   1bdcc:	mov	r1, #2
   1bdd0:	mov	r0, r4
   1bdd4:	bl	221cc <flatcc_builder_table_add@@Base>
   1bdd8:	subs	r8, r0, #0
   1bddc:	beq	1be00 <test_mixed_type_union@@Base+0x1f0>
   1bde0:	mov	r1, #3
   1bde4:	mov	r0, r4
   1bde8:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1bdec:	cmp	r0, #0
   1bdf0:	beq	1be00 <test_mixed_type_union@@Base+0x1f0>
   1bdf4:	mov	r3, #2
   1bdf8:	strb	r3, [r8]
   1bdfc:	str	r6, [r0]
   1be00:	movw	r1, #29156	; 0x71e4
   1be04:	movt	r1, #2
   1be08:	mov	r0, r4
   1be0c:	bl	22020 <flatcc_builder_create_string_str@@Base>
   1be10:	subs	r8, r0, #0
   1be14:	beq	1be54 <test_mixed_type_union@@Base+0x244>
   1be18:	mov	r3, #1
   1be1c:	mov	r2, r3
   1be20:	mov	r1, #4
   1be24:	mov	r0, r4
   1be28:	bl	221cc <flatcc_builder_table_add@@Base>
   1be2c:	subs	r9, r0, #0
   1be30:	beq	1be54 <test_mixed_type_union@@Base+0x244>
   1be34:	mov	r1, #5
   1be38:	mov	r0, r4
   1be3c:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1be40:	cmp	r0, #0
   1be44:	beq	1be54 <test_mixed_type_union@@Base+0x244>
   1be48:	mov	r3, #11
   1be4c:	strb	r3, [r9]
   1be50:	str	r8, [r0]
   1be54:	mov	r0, r4
   1be58:	bl	219d0 <flatcc_builder_start_union_vector@@Base>
   1be5c:	mov	r3, #8
   1be60:	strb	r3, [sp, #4]
   1be64:	str	r5, [sp, #8]
   1be68:	add	r5, sp, #4
   1be6c:	ldm	r5, {r1, r2}
   1be70:	mov	r0, r4
   1be74:	bl	21d44 <flatcc_builder_union_vector_push@@Base>
   1be78:	mov	r3, #2
   1be7c:	strb	r3, [sp, #4]
   1be80:	str	r6, [sp, #8]
   1be84:	ldm	r5, {r1, r2}
   1be88:	mov	r0, r4
   1be8c:	bl	21d44 <flatcc_builder_union_vector_push@@Base>
   1be90:	mov	r1, #1
   1be94:	mov	r0, r4
   1be98:	bl	20608 <flatcc_builder_start_table@@Base>
   1be9c:	subs	r5, r0, #0
   1bea0:	bne	1c1f0 <test_mixed_type_union@@Base+0x5e0>
   1bea4:	mov	r3, #4
   1bea8:	mov	r2, r3
   1beac:	mov	r1, #0
   1beb0:	mov	r0, r4
   1beb4:	bl	221cc <flatcc_builder_table_add@@Base>
   1beb8:	cmp	r0, #0
   1bebc:	beq	1beec <test_mixed_type_union@@Base+0x2dc>
   1bec0:	mov	r3, #1
   1bec4:	str	r3, [r0]
   1bec8:	mov	r2, #0
   1becc:	ldr	r1, [pc, #2540]	; 1c8c0 <test_mixed_type_union@@Base+0xcb0>
   1bed0:	mov	r0, r4
   1bed4:	bl	21030 <flatcc_builder_check_required@@Base>
   1bed8:	cmp	r0, #0
   1bedc:	beq	1c1d4 <test_mixed_type_union@@Base+0x5c4>
   1bee0:	mov	r0, r4
   1bee4:	bl	210e0 <flatcc_builder_end_table@@Base>
   1bee8:	mov	r5, r0
   1beec:	mov	r3, #2
   1bef0:	strb	r3, [sp, #4]
   1bef4:	str	r5, [sp, #8]
   1bef8:	add	r5, sp, #4
   1befc:	ldm	r5, {r1, r2}
   1bf00:	mov	r0, r4
   1bf04:	bl	21d44 <flatcc_builder_union_vector_push@@Base>
   1bf08:	movw	r1, #29164	; 0x71ec
   1bf0c:	movt	r1, #2
   1bf10:	mov	r0, r4
   1bf14:	bl	22020 <flatcc_builder_create_string_str@@Base>
   1bf18:	mov	r3, #11
   1bf1c:	strb	r3, [sp, #4]
   1bf20:	str	r0, [sp, #8]
   1bf24:	ldm	r5, {r1, r2}
   1bf28:	mov	r0, r4
   1bf2c:	bl	21d44 <flatcc_builder_union_vector_push@@Base>
   1bf30:	mov	r6, #9
   1bf34:	strb	r6, [sp, #4]
   1bf38:	str	r7, [sp, #8]
   1bf3c:	ldm	r5, {r1, r2}
   1bf40:	mov	r0, r4
   1bf44:	bl	21d44 <flatcc_builder_union_vector_push@@Base>
   1bf48:	mov	r2, #4
   1bf4c:	mov	r1, r2
   1bf50:	mov	r0, r4
   1bf54:	bl	1f860 <flatcc_builder_start_struct@@Base>
   1bf58:	mov	r3, #3
   1bf5c:	str	r3, [r0]
   1bf60:	mov	r0, r4
   1bf64:	bl	1f918 <flatcc_builder_end_struct@@Base>
   1bf68:	strb	r6, [sp, #4]
   1bf6c:	str	r0, [sp, #8]
   1bf70:	ldm	r5, {r1, r2}
   1bf74:	mov	r0, r4
   1bf78:	bl	21d44 <flatcc_builder_union_vector_push@@Base>
   1bf7c:	mov	r2, #4
   1bf80:	mov	r1, r2
   1bf84:	mov	r0, r4
   1bf88:	bl	1f860 <flatcc_builder_start_struct@@Base>
   1bf8c:	cmp	r0, #0
   1bf90:	moveq	r0, #0
   1bf94:	beq	1bfa8 <test_mixed_type_union@@Base+0x398>
   1bf98:	mov	r3, #1
   1bf9c:	str	r3, [r0]
   1bfa0:	mov	r0, r4
   1bfa4:	bl	1f918 <flatcc_builder_end_struct@@Base>
   1bfa8:	mov	r3, #9
   1bfac:	strb	r3, [sp, #4]
   1bfb0:	str	r0, [sp, #8]
   1bfb4:	add	r3, sp, #4
   1bfb8:	ldm	r3, {r1, r2}
   1bfbc:	mov	r0, r4
   1bfc0:	bl	21d44 <flatcc_builder_union_vector_push@@Base>
   1bfc4:	mov	r2, #4
   1bfc8:	mov	r1, r2
   1bfcc:	mov	r0, r4
   1bfd0:	bl	1f860 <flatcc_builder_start_struct@@Base>
   1bfd4:	cmp	r0, #0
   1bfd8:	moveq	r0, #0
   1bfdc:	beq	1bff0 <test_mixed_type_union@@Base+0x3e0>
   1bfe0:	mov	r3, #2
   1bfe4:	str	r3, [r0]
   1bfe8:	mov	r0, r4
   1bfec:	bl	1f918 <flatcc_builder_end_struct@@Base>
   1bff0:	mov	r3, #9
   1bff4:	strb	r3, [sp, #4]
   1bff8:	str	r0, [sp, #8]
   1bffc:	add	r5, sp, #4
   1c000:	ldm	r5, {r1, r2}
   1c004:	mov	r0, r4
   1c008:	bl	21d44 <flatcc_builder_union_vector_push@@Base>
   1c00c:	movw	r1, #29176	; 0x71f8
   1c010:	movt	r1, #2
   1c014:	mov	r0, r4
   1c018:	bl	22020 <flatcc_builder_create_string_str@@Base>
   1c01c:	mov	r6, #11
   1c020:	strb	r6, [sp, #4]
   1c024:	str	r0, [sp, #8]
   1c028:	ldm	r5, {r1, r2}
   1c02c:	mov	r0, r4
   1c030:	bl	21d44 <flatcc_builder_union_vector_push@@Base>
   1c034:	movw	r1, #29172	; 0x71f4
   1c038:	movt	r1, #2
   1c03c:	mov	r0, r4
   1c040:	bl	22020 <flatcc_builder_create_string_str@@Base>
   1c044:	strb	r6, [sp, #4]
   1c048:	str	r0, [sp, #8]
   1c04c:	ldm	r5, {r1, r2}
   1c050:	mov	r0, r4
   1c054:	bl	21d44 <flatcc_builder_union_vector_push@@Base>
   1c058:	mov	r1, r4
   1c05c:	add	r0, sp, #32
   1c060:	bl	21a54 <flatcc_builder_end_union_vector@@Base>
   1c064:	ldr	r5, [sp, #32]
   1c068:	ldr	r6, [sp, #36]	; 0x24
   1c06c:	cmp	r6, #0
   1c070:	cmpne	r5, #0
   1c074:	bne	1c1f8 <test_mixed_type_union@@Base+0x5e8>
   1c078:	mov	r2, #0
   1c07c:	ldr	r1, [pc, #2112]	; 1c8c4 <test_mixed_type_union@@Base+0xcb4>
   1c080:	mov	r0, r4
   1c084:	bl	21030 <flatcc_builder_check_required@@Base>
   1c088:	cmp	r0, #0
   1c08c:	beq	1c228 <test_mixed_type_union@@Base+0x618>
   1c090:	mov	r0, r4
   1c094:	bl	210e0 <flatcc_builder_end_table@@Base>
   1c098:	mov	r1, r0
   1c09c:	mov	r0, r4
   1c0a0:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   1c0a4:	add	r1, sp, #28
   1c0a8:	mov	r0, r4
   1c0ac:	bl	2299c <flatcc_builder_finalize_aligned_buffer@@Base>
   1c0b0:	mov	r4, r0
   1c0b4:	movw	r3, #36976	; 0x9070
   1c0b8:	movt	r3, #3
   1c0bc:	ldr	r3, [r3]
   1c0c0:	ldr	r2, [sp, #28]
   1c0c4:	mov	r1, r0
   1c0c8:	movw	r0, #29320	; 0x7288
   1c0cc:	movt	r0, #2
   1c0d0:	bl	13384 <_start@@Base+0x914>
   1c0d4:	movw	r3, #15596	; 0x3cec
   1c0d8:	movt	r3, #1
   1c0dc:	movw	r2, #20800	; 0x5140
   1c0e0:	movt	r2, #2
   1c0e4:	ldr	r1, [sp, #28]
   1c0e8:	mov	r0, r4
   1c0ec:	bl	23f7c <flatcc_verify_table_as_root@@Base>
   1c0f0:	cmp	r0, #0
   1c0f4:	bne	1c244 <test_mixed_type_union@@Base+0x634>
   1c0f8:	cmp	r4, #0
   1c0fc:	beq	1c260 <test_mixed_type_union@@Base+0x650>
   1c100:	movw	r3, #20301	; 0x4f4d
   1c104:	movt	r3, #21326	; 0x534e
   1c108:	ldr	r2, [r4, #4]
   1c10c:	cmp	r2, r3
   1c110:	bne	1c260 <test_mixed_type_union@@Base+0x650>
   1c114:	ldr	r6, [r4]
   1c118:	adds	r7, r4, r6
   1c11c:	beq	1c260 <test_mixed_type_union@@Base+0x650>
   1c120:	ldr	r5, [r4, r6]
   1c124:	sub	r5, r7, r5
   1c128:	ldrh	r3, [r5]
   1c12c:	cmp	r3, #7
   1c130:	bls	1c27c <test_mixed_type_union@@Base+0x66c>
   1c134:	ldrh	r2, [r5, #6]
   1c138:	cmp	r2, #0
   1c13c:	beq	1c27c <test_mixed_type_union@@Base+0x66c>
   1c140:	cmp	r3, #23
   1c144:	bls	1c2b0 <test_mixed_type_union@@Base+0x6a0>
   1c148:	ldrh	r8, [r5, #22]
   1c14c:	cmp	r8, #0
   1c150:	beq	1c2b0 <test_mixed_type_union@@Base+0x6a0>
   1c154:	ldrh	r3, [r5, #4]
   1c158:	cmp	r3, #0
   1c15c:	beq	1c2c4 <test_mixed_type_union@@Base+0x6b4>
   1c160:	ldrb	r0, [r7, r3]
   1c164:	cmp	r0, #0
   1c168:	beq	1c2c4 <test_mixed_type_union@@Base+0x6b4>
   1c16c:	add	r1, r7, r2
   1c170:	ldr	r3, [r7, r2]
   1c174:	add	r2, r1, r3
   1c178:	cmp	r0, #8
   1c17c:	bne	1c2c4 <test_mixed_type_union@@Base+0x6b4>
   1c180:	cmp	r2, #0
   1c184:	beq	1c2d8 <test_mixed_type_union@@Base+0x6c8>
   1c188:	ldrh	r3, [r1, r3]
   1c18c:	cmp	r3, #19
   1c190:	bhi	1c2e8 <test_mixed_type_union@@Base+0x6d8>
   1c194:	cmp	r3, #18
   1c198:	bhi	1c2fc <test_mixed_type_union@@Base+0x6ec>
   1c19c:	movw	r0, #29596	; 0x739c
   1c1a0:	movt	r0, #2
   1c1a4:	bl	129c8 <puts@plt>
   1c1a8:	mvn	r5, #0
   1c1ac:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c1b0:	mov	r5, #0
   1c1b4:	b	1bd64 <test_mixed_type_union@@Base+0x154>
   1c1b8:	ldr	r3, [pc, #1800]	; 1c8c8 <test_mixed_type_union@@Base+0xcb8>
   1c1bc:	mov	r2, #239	; 0xef
   1c1c0:	movw	r1, #21196	; 0x52cc
   1c1c4:	movt	r1, #2
   1c1c8:	movw	r0, #29012	; 0x7154
   1c1cc:	movt	r0, #2
   1c1d0:	bl	12a64 <__assert_fail@plt>
   1c1d4:	ldr	r3, [pc, #1772]	; 1c8c8 <test_mixed_type_union@@Base+0xcb8>
   1c1d8:	mov	r2, #239	; 0xef
   1c1dc:	movw	r1, #21196	; 0x52cc
   1c1e0:	movt	r1, #2
   1c1e4:	movw	r0, #29012	; 0x7154
   1c1e8:	movt	r0, #2
   1c1ec:	bl	12a64 <__assert_fail@plt>
   1c1f0:	mov	r5, #0
   1c1f4:	b	1beec <test_mixed_type_union@@Base+0x2dc>
   1c1f8:	mov	r1, #8
   1c1fc:	mov	r0, r4
   1c200:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1c204:	cmp	r0, #0
   1c208:	beq	1c078 <test_mixed_type_union@@Base+0x468>
   1c20c:	str	r5, [r0]
   1c210:	mov	r1, #9
   1c214:	mov	r0, r4
   1c218:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1c21c:	cmp	r0, #0
   1c220:	strne	r6, [r0]
   1c224:	b	1c078 <test_mixed_type_union@@Base+0x468>
   1c228:	ldr	r3, [pc, #1692]	; 1c8cc <test_mixed_type_union@@Base+0xcbc>
   1c22c:	mov	r2, #241	; 0xf1
   1c230:	movw	r1, #21196	; 0x52cc
   1c234:	movt	r1, #2
   1c238:	movw	r0, #29184	; 0x7200
   1c23c:	movt	r0, #2
   1c240:	bl	12a64 <__assert_fail@plt>
   1c244:	bl	231c4 <flatcc_verify_error_string@@Base>
   1c248:	mov	r1, r0
   1c24c:	movw	r0, #29336	; 0x7298
   1c250:	movt	r0, #2
   1c254:	bl	12974 <printf@plt>
   1c258:	mvn	r5, #0
   1c25c:	b	1c294 <test_mixed_type_union@@Base+0x684>
   1c260:	ldr	r3, [pc, #1640]	; 1c8d0 <test_mixed_type_union@@Base+0xcc0>
   1c264:	movw	r2, #819	; 0x333
   1c268:	movw	r1, #20464	; 0x4ff0
   1c26c:	movt	r1, #2
   1c270:	movw	r0, #20564	; 0x5054
   1c274:	movt	r0, #2
   1c278:	bl	12a64 <__assert_fail@plt>
   1c27c:	movw	r0, #29416	; 0x72e8
   1c280:	movt	r0, #2
   1c284:	bl	129c8 <puts@plt>
   1c288:	mvn	r5, #0
   1c28c:	mov	r0, r4
   1c290:	bl	22abc <flatcc_builder_aligned_free@@Base>
   1c294:	mov	r0, r5
   1c298:	add	sp, sp, #44	; 0x2c
   1c29c:	ldrd	r4, [sp]
   1c2a0:	ldrd	r6, [sp, #8]
   1c2a4:	ldrd	r8, [sp, #16]
   1c2a8:	add	sp, sp, #24
   1c2ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2b0:	movw	r0, #29460	; 0x7314
   1c2b4:	movt	r0, #2
   1c2b8:	bl	129c8 <puts@plt>
   1c2bc:	mvn	r5, #0
   1c2c0:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c2c4:	movw	r0, #29504	; 0x7340
   1c2c8:	movt	r0, #2
   1c2cc:	bl	129c8 <puts@plt>
   1c2d0:	mvn	r5, #0
   1c2d4:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c2d8:	movw	r0, #29532	; 0x735c
   1c2dc:	movt	r0, #2
   1c2e0:	bl	129c8 <puts@plt>
   1c2e4:	b	1c19c <test_mixed_type_union@@Base+0x58c>
   1c2e8:	movw	r0, #29556	; 0x7374
   1c2ec:	movt	r0, #2
   1c2f0:	bl	129c8 <puts@plt>
   1c2f4:	mvn	r5, #0
   1c2f8:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c2fc:	ldrh	r3, [r5, #16]
   1c300:	cmp	r3, #0
   1c304:	beq	1c350 <test_mixed_type_union@@Base+0x740>
   1c308:	ldrb	r3, [r7, r3]
   1c30c:	cmp	r3, #8
   1c310:	bne	1c350 <test_mixed_type_union@@Base+0x740>
   1c314:	ldrh	r3, [r5, #18]
   1c318:	cmp	r3, #0
   1c31c:	beq	1c364 <test_mixed_type_union@@Base+0x754>
   1c320:	add	r2, r7, r3
   1c324:	ldr	r3, [r7, r3]
   1c328:	cmn	r2, r3
   1c32c:	beq	1c364 <test_mixed_type_union@@Base+0x754>
   1c330:	ldrh	r3, [r2, r3]
   1c334:	cmp	r3, #22
   1c338:	beq	1c378 <test_mixed_type_union@@Base+0x768>
   1c33c:	movw	r0, #29744	; 0x7430
   1c340:	movt	r0, #2
   1c344:	bl	129c8 <puts@plt>
   1c348:	mvn	r5, #0
   1c34c:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c350:	movw	r0, #29644	; 0x73cc
   1c354:	movt	r0, #2
   1c358:	bl	129c8 <puts@plt>
   1c35c:	mvn	r5, #0
   1c360:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c364:	movw	r0, #29696	; 0x7400
   1c368:	movt	r0, #2
   1c36c:	bl	129c8 <puts@plt>
   1c370:	mvn	r5, #0
   1c374:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c378:	ldrh	r3, [r5, #8]
   1c37c:	cmp	r3, #0
   1c380:	beq	1c3cc <test_mixed_type_union@@Base+0x7bc>
   1c384:	ldrb	r3, [r7, r3]
   1c388:	cmp	r3, #2
   1c38c:	bne	1c3cc <test_mixed_type_union@@Base+0x7bc>
   1c390:	ldrh	r2, [r5, #10]
   1c394:	cmp	r2, #0
   1c398:	beq	1c3b8 <test_mixed_type_union@@Base+0x7a8>
   1c39c:	add	r3, r7, r2
   1c3a0:	ldr	r0, [r7, r2]
   1c3a4:	adds	r0, r3, r0
   1c3a8:	beq	1c3b8 <test_mixed_type_union@@Base+0x7a8>
   1c3ac:	bl	12ffc <_start@@Base+0x58c>
   1c3b0:	cmp	r0, #42	; 0x2a
   1c3b4:	beq	1c3e0 <test_mixed_type_union@@Base+0x7d0>
   1c3b8:	movw	r0, #29816	; 0x7478
   1c3bc:	movt	r0, #2
   1c3c0:	bl	129c8 <puts@plt>
   1c3c4:	mvn	r5, #0
   1c3c8:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c3cc:	movw	r0, #29792	; 0x7460
   1c3d0:	movt	r0, #2
   1c3d4:	bl	129c8 <puts@plt>
   1c3d8:	mvn	r5, #0
   1c3dc:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c3e0:	ldrh	r3, [r5, #12]
   1c3e4:	cmp	r3, #0
   1c3e8:	beq	1c4c0 <test_mixed_type_union@@Base+0x8b0>
   1c3ec:	ldrb	r3, [r7, r3]
   1c3f0:	cmp	r3, #11
   1c3f4:	bne	1c4c0 <test_mixed_type_union@@Base+0x8b0>
   1c3f8:	ldrh	r3, [r5, #14]
   1c3fc:	cmp	r3, #0
   1c400:	beq	1c4d4 <test_mixed_type_union@@Base+0x8c4>
   1c404:	add	r9, r7, r3
   1c408:	ldr	r3, [r7, r3]
   1c40c:	adds	r9, r9, r3
   1c410:	beq	1c4d4 <test_mixed_type_union@@Base+0x8c4>
   1c414:	adds	r9, r9, #4
   1c418:	beq	1c4d4 <test_mixed_type_union@@Base+0x8c4>
   1c41c:	movw	r1, #29156	; 0x71e4
   1c420:	movt	r1, #2
   1c424:	mov	r0, r9
   1c428:	bl	12968 <strcmp@plt>
   1c42c:	cmp	r0, #0
   1c430:	bne	1c4e8 <test_mixed_type_union@@Base+0x8d8>
   1c434:	ldrh	r3, [r5, #20]
   1c438:	cmp	r3, #0
   1c43c:	moveq	r9, #0
   1c440:	beq	1c454 <test_mixed_type_union@@Base+0x844>
   1c444:	add	r9, r7, r3
   1c448:	ldr	r3, [r7, r3]
   1c44c:	add	r3, r3, #4
   1c450:	add	r9, r9, r3
   1c454:	add	r5, r7, r8
   1c458:	ldr	r3, [r7, r8]
   1c45c:	add	r3, r3, #4
   1c460:	add	r5, r5, r3
   1c464:	cmp	r9, #0
   1c468:	beq	1c888 <test_mixed_type_union@@Base+0xc78>
   1c46c:	ldr	r2, [r9, #-4]
   1c470:	cmp	r5, #0
   1c474:	beq	1c500 <test_mixed_type_union@@Base+0x8f0>
   1c478:	ldr	r3, [r5, #-4]
   1c47c:	cmp	r2, r3
   1c480:	bne	1c508 <test_mixed_type_union@@Base+0x8f8>
   1c484:	str	r9, [sp, #20]
   1c488:	str	r5, [sp, #24]
   1c48c:	mov	r3, #0
   1c490:	add	r2, sp, #20
   1c494:	ldm	r2, {r1, r2}
   1c498:	add	r0, sp, #12
   1c49c:	bl	13f28 <_start@@Base+0x14b8>
   1c4a0:	ldrb	r3, [sp, #12]
   1c4a4:	cmp	r3, #8
   1c4a8:	beq	1c524 <test_mixed_type_union@@Base+0x914>
   1c4ac:	movw	r0, #29940	; 0x74f4
   1c4b0:	movt	r0, #2
   1c4b4:	bl	12974 <printf@plt>
   1c4b8:	mvn	r5, #0
   1c4bc:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c4c0:	movw	r0, #29852	; 0x749c
   1c4c4:	movt	r0, #2
   1c4c8:	bl	129c8 <puts@plt>
   1c4cc:	mvn	r5, #0
   1c4d0:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c4d4:	movw	r0, #29876	; 0x74b4
   1c4d8:	movt	r0, #2
   1c4dc:	bl	129c8 <puts@plt>
   1c4e0:	mvn	r5, #0
   1c4e4:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c4e8:	mov	r1, r9
   1c4ec:	movw	r0, #29904	; 0x74d0
   1c4f0:	movt	r0, #2
   1c4f4:	bl	12974 <printf@plt>
   1c4f8:	mvn	r5, #0
   1c4fc:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c500:	mov	r3, #0
   1c504:	b	1c47c <test_mixed_type_union@@Base+0x86c>
   1c508:	ldr	r3, [pc, #964]	; 1c8d4 <test_mixed_type_union@@Base+0xcc4>
   1c50c:	movw	r2, #823	; 0x337
   1c510:	movw	r1, #20464	; 0x4ff0
   1c514:	movt	r1, #2
   1c518:	movw	r0, #28788	; 0x7074
   1c51c:	movt	r0, #2
   1c520:	bl	12a64 <__assert_fail@plt>
   1c524:	mov	r3, #1
   1c528:	add	r2, sp, #20
   1c52c:	ldm	r2, {r1, r2}
   1c530:	add	r0, sp, #12
   1c534:	bl	13f28 <_start@@Base+0x14b8>
   1c538:	ldrb	r3, [sp, #12]
   1c53c:	cmp	r3, #2
   1c540:	beq	1c558 <test_mixed_type_union@@Base+0x948>
   1c544:	movw	r0, #29980	; 0x751c
   1c548:	movt	r0, #2
   1c54c:	bl	12974 <printf@plt>
   1c550:	mvn	r5, #0
   1c554:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c558:	ldr	r0, [sp, #16]
   1c55c:	bl	12ffc <_start@@Base+0x58c>
   1c560:	cmp	r0, #42	; 0x2a
   1c564:	beq	1c57c <test_mixed_type_union@@Base+0x96c>
   1c568:	movw	r0, #30016	; 0x7540
   1c56c:	movt	r0, #2
   1c570:	bl	12974 <printf@plt>
   1c574:	mvn	r5, #0
   1c578:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c57c:	mov	r3, #2
   1c580:	add	r2, sp, #20
   1c584:	ldm	r2, {r1, r2}
   1c588:	add	r0, sp, #12
   1c58c:	bl	13f28 <_start@@Base+0x14b8>
   1c590:	ldrb	r3, [sp, #12]
   1c594:	cmp	r3, #2
   1c598:	beq	1c5b0 <test_mixed_type_union@@Base+0x9a0>
   1c59c:	movw	r0, #30068	; 0x7574
   1c5a0:	movt	r0, #2
   1c5a4:	bl	12974 <printf@plt>
   1c5a8:	mvn	r5, #0
   1c5ac:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c5b0:	ldr	r0, [sp, #16]
   1c5b4:	bl	12ffc <_start@@Base+0x58c>
   1c5b8:	cmp	r0, #1
   1c5bc:	beq	1c5d4 <test_mixed_type_union@@Base+0x9c4>
   1c5c0:	movw	r0, #30104	; 0x7598
   1c5c4:	movt	r0, #2
   1c5c8:	bl	12974 <printf@plt>
   1c5cc:	mvn	r5, #0
   1c5d0:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c5d4:	ldr	r3, [r4, r6]
   1c5d8:	sub	r3, r7, r3
   1c5dc:	ldrh	r2, [r3]
   1c5e0:	cmp	r2, #21
   1c5e4:	bls	1c634 <test_mixed_type_union@@Base+0xa24>
   1c5e8:	ldrh	r2, [r3, #20]
   1c5ec:	cmp	r2, #0
   1c5f0:	beq	1c634 <test_mixed_type_union@@Base+0xa24>
   1c5f4:	add	r3, r7, r2
   1c5f8:	ldr	r2, [r7, r2]
   1c5fc:	add	r2, r2, #4
   1c600:	adds	r3, r3, r2
   1c604:	beq	1c634 <test_mixed_type_union@@Base+0xa24>
   1c608:	ldr	r2, [r3, #-4]
   1c60c:	cmp	r2, #3
   1c610:	bls	1c634 <test_mixed_type_union@@Base+0xa24>
   1c614:	ldrb	r3, [r3, #3]
   1c618:	cmp	r3, #11
   1c61c:	beq	1c650 <test_mixed_type_union@@Base+0xa40>
   1c620:	movw	r0, #30156	; 0x75cc
   1c624:	movt	r0, #2
   1c628:	bl	129c8 <puts@plt>
   1c62c:	mvn	r5, #0
   1c630:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c634:	ldr	r3, [pc, #668]	; 1c8d8 <test_mixed_type_union@@Base+0xcc8>
   1c638:	movw	r2, #405	; 0x195
   1c63c:	movw	r1, #20604	; 0x507c
   1c640:	movt	r1, #2
   1c644:	movw	r0, #20708	; 0x50e4
   1c648:	movt	r0, #2
   1c64c:	bl	12a64 <__assert_fail@plt>
   1c650:	cmp	r5, #0
   1c654:	beq	1c69c <test_mixed_type_union@@Base+0xa8c>
   1c658:	ldr	r3, [r5, #-4]
   1c65c:	cmp	r3, #3
   1c660:	bls	1c69c <test_mixed_type_union@@Base+0xa8c>
   1c664:	ldr	r3, [r5, #12]
   1c668:	add	r3, r3, #16
   1c66c:	adds	r0, r5, r3
   1c670:	beq	1c688 <test_mixed_type_union@@Base+0xa78>
   1c674:	movw	r1, #29164	; 0x71ec
   1c678:	movt	r1, #2
   1c67c:	bl	12968 <strcmp@plt>
   1c680:	cmp	r0, #0
   1c684:	beq	1c6b8 <test_mixed_type_union@@Base+0xaa8>
   1c688:	movw	r0, #30204	; 0x75fc
   1c68c:	movt	r0, #2
   1c690:	bl	129c8 <puts@plt>
   1c694:	mvn	r5, #0
   1c698:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c69c:	ldr	r3, [pc, #568]	; 1c8dc <test_mixed_type_union@@Base+0xccc>
   1c6a0:	mov	r2, #119	; 0x77
   1c6a4:	movw	r1, #20604	; 0x507c
   1c6a8:	movt	r1, #2
   1c6ac:	movw	r0, #20708	; 0x50e4
   1c6b0:	movt	r0, #2
   1c6b4:	bl	12a64 <__assert_fail@plt>
   1c6b8:	mov	r3, #3
   1c6bc:	add	r2, sp, #20
   1c6c0:	ldm	r2, {r1, r2}
   1c6c4:	add	r0, sp, #12
   1c6c8:	bl	13f28 <_start@@Base+0x14b8>
   1c6cc:	ldrb	r3, [sp, #12]
   1c6d0:	cmp	r3, #11
   1c6d4:	bne	1c714 <test_mixed_type_union@@Base+0xb04>
   1c6d8:	ldr	r3, [sp, #16]
   1c6dc:	cmp	r3, #0
   1c6e0:	beq	1c700 <test_mixed_type_union@@Base+0xaf0>
   1c6e4:	adds	r0, r3, #4
   1c6e8:	beq	1c700 <test_mixed_type_union@@Base+0xaf0>
   1c6ec:	movw	r1, #29164	; 0x71ec
   1c6f0:	movt	r1, #2
   1c6f4:	bl	12968 <strcmp@plt>
   1c6f8:	subs	r5, r0, #0
   1c6fc:	beq	1c728 <test_mixed_type_union@@Base+0xb18>
   1c700:	movw	r0, #30312	; 0x7668
   1c704:	movt	r0, #2
   1c708:	bl	129c8 <puts@plt>
   1c70c:	mvn	r5, #0
   1c710:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c714:	movw	r0, #30256	; 0x7630
   1c718:	movt	r0, #2
   1c71c:	bl	12974 <printf@plt>
   1c720:	mvn	r5, #0
   1c724:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c728:	mov	r3, #4
   1c72c:	add	r2, sp, #20
   1c730:	ldm	r2, {r1, r2}
   1c734:	add	r0, sp, #12
   1c738:	bl	13f28 <_start@@Base+0x14b8>
   1c73c:	ldrb	r3, [sp, #12]
   1c740:	cmp	r3, #9
   1c744:	beq	1c75c <test_mixed_type_union@@Base+0xb4c>
   1c748:	movw	r0, #30376	; 0x76a8
   1c74c:	movt	r0, #2
   1c750:	bl	12974 <printf@plt>
   1c754:	mvn	r5, #0
   1c758:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c75c:	mov	r3, #5
   1c760:	add	r2, sp, #20
   1c764:	ldm	r2, {r1, r2}
   1c768:	add	r0, sp, #12
   1c76c:	bl	13f28 <_start@@Base+0x14b8>
   1c770:	ldrb	r3, [sp, #12]
   1c774:	cmp	r3, #9
   1c778:	beq	1c790 <test_mixed_type_union@@Base+0xb80>
   1c77c:	movw	r0, #30412	; 0x76cc
   1c780:	movt	r0, #2
   1c784:	bl	12974 <printf@plt>
   1c788:	mvn	r5, #0
   1c78c:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c790:	mov	r3, #6
   1c794:	add	r2, sp, #20
   1c798:	ldm	r2, {r1, r2}
   1c79c:	add	r0, sp, #12
   1c7a0:	bl	13f28 <_start@@Base+0x14b8>
   1c7a4:	ldrb	r3, [sp, #12]
   1c7a8:	cmp	r3, #9
   1c7ac:	beq	1c7c4 <test_mixed_type_union@@Base+0xbb4>
   1c7b0:	movw	r0, #30448	; 0x76f0
   1c7b4:	movt	r0, #2
   1c7b8:	bl	12974 <printf@plt>
   1c7bc:	mvn	r5, #0
   1c7c0:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c7c4:	mov	r3, #7
   1c7c8:	add	r2, sp, #20
   1c7cc:	ldm	r2, {r1, r2}
   1c7d0:	add	r0, sp, #12
   1c7d4:	bl	13f28 <_start@@Base+0x14b8>
   1c7d8:	ldrb	r3, [sp, #12]
   1c7dc:	cmp	r3, #9
   1c7e0:	beq	1c7f8 <test_mixed_type_union@@Base+0xbe8>
   1c7e4:	movw	r0, #30484	; 0x7714
   1c7e8:	movt	r0, #2
   1c7ec:	bl	12974 <printf@plt>
   1c7f0:	mvn	r5, #0
   1c7f4:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c7f8:	mov	r3, #8
   1c7fc:	add	r2, sp, #20
   1c800:	ldm	r2, {r1, r2}
   1c804:	add	r0, sp, #12
   1c808:	bl	13f28 <_start@@Base+0x14b8>
   1c80c:	ldrb	r3, [sp, #12]
   1c810:	cmp	r3, #11
   1c814:	beq	1c82c <test_mixed_type_union@@Base+0xc1c>
   1c818:	movw	r0, #30520	; 0x7738
   1c81c:	movt	r0, #2
   1c820:	bl	12974 <printf@plt>
   1c824:	mvn	r5, #0
   1c828:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c82c:	mov	r3, #9
   1c830:	add	r2, sp, #20
   1c834:	ldm	r2, {r1, r2}
   1c838:	add	r0, sp, #12
   1c83c:	bl	13f28 <_start@@Base+0x14b8>
   1c840:	ldrb	r3, [sp, #12]
   1c844:	cmp	r3, #11
   1c848:	bne	1c874 <test_mixed_type_union@@Base+0xc64>
   1c84c:	cmp	r9, #0
   1c850:	beq	1c860 <test_mixed_type_union@@Base+0xc50>
   1c854:	ldr	r3, [r9, #-4]
   1c858:	cmp	r3, #10
   1c85c:	beq	1c28c <test_mixed_type_union@@Base+0x67c>
   1c860:	movw	r0, #30564	; 0x7764
   1c864:	movt	r0, #2
   1c868:	bl	12974 <printf@plt>
   1c86c:	mvn	r5, #0
   1c870:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c874:	movw	r0, #30520	; 0x7738
   1c878:	movt	r0, #2
   1c87c:	bl	12974 <printf@plt>
   1c880:	mvn	r5, #0
   1c884:	b	1c28c <test_mixed_type_union@@Base+0x67c>
   1c888:	cmp	r5, #0
   1c88c:	movne	r2, #0
   1c890:	bne	1c478 <test_mixed_type_union@@Base+0x868>
   1c894:	b	1c484 <test_mixed_type_union@@Base+0x874>
   1c898:	mov	r6, #0
   1c89c:	b	1be00 <test_mixed_type_union@@Base+0x1f0>
   1c8a0:	mov	r2, #2
   1c8a4:	mov	r1, r2
   1c8a8:	mov	r0, r4
   1c8ac:	bl	1f860 <flatcc_builder_start_struct@@Base>
   1c8b0:	cmp	r0, #0
   1c8b4:	beq	1c1b0 <test_mixed_type_union@@Base+0x5a0>
   1c8b8:	mov	r5, #0
   1c8bc:	b	1bccc <test_mixed_type_union@@Base+0xbc>
   1c8c0:	andeq	r4, r2, r0, lsr sp
   1c8c4:	andeq	r4, r2, ip, asr #26
   1c8c8:	andeq	r4, r2, r4, lsr sp
   1c8cc:	andeq	r4, r2, r0, asr sp
   1c8d0:	andeq	r4, r2, r4, ror #26
   1c8d4:	andeq	r4, r2, ip, lsl #27
   1c8d8:	andeq	r4, r2, ip, lsr #27
   1c8dc:	andeq	r4, r2, ip, asr #27

0001c8e0 <test_add_set_defaults@@Base>:
   1c8e0:	strd	r4, [sp, #-12]!
   1c8e4:	str	lr, [sp, #8]
   1c8e8:	sub	sp, sp, #12
   1c8ec:	mov	r4, r0
   1c8f0:	bl	1ee18 <flatcc_builder_reset@@Base>
   1c8f4:	mov	r3, #0
   1c8f8:	mov	r2, r3
   1c8fc:	movw	r1, #20800	; 0x5140
   1c900:	movt	r1, #2
   1c904:	mov	r0, r4
   1c908:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   1c90c:	cmp	r0, #0
   1c910:	bne	1c920 <test_add_set_defaults@@Base+0x40>
   1c914:	mov	r1, #36	; 0x24
   1c918:	mov	r0, r4
   1c91c:	bl	20608 <flatcc_builder_start_table@@Base>
   1c920:	movw	r1, #21584	; 0x5450
   1c924:	movt	r1, #2
   1c928:	mov	r0, r4
   1c92c:	bl	22020 <flatcc_builder_create_string_str@@Base>
   1c930:	subs	r5, r0, #0
   1c934:	beq	1c94c <test_add_set_defaults@@Base+0x6c>
   1c938:	mov	r1, #3
   1c93c:	mov	r0, r4
   1c940:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1c944:	cmp	r0, #0
   1c948:	strne	r5, [r0]
   1c94c:	mov	r3, #2
   1c950:	mov	r2, r3
   1c954:	mov	r1, #1
   1c958:	mov	r0, r4
   1c95c:	bl	221cc <flatcc_builder_table_add@@Base>
   1c960:	cmp	r0, #0
   1c964:	movne	r3, #100	; 0x64
   1c968:	strhne	r3, [r0]
   1c96c:	mov	r2, #1
   1c970:	ldr	r1, [pc, #776]	; 1cc80 <test_add_set_defaults@@Base+0x3a0>
   1c974:	mov	r0, r4
   1c978:	bl	21030 <flatcc_builder_check_required@@Base>
   1c97c:	cmp	r0, #0
   1c980:	beq	1cb80 <test_add_set_defaults@@Base+0x2a0>
   1c984:	mov	r0, r4
   1c988:	bl	210e0 <flatcc_builder_end_table@@Base>
   1c98c:	mov	r1, r0
   1c990:	mov	r0, r4
   1c994:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   1c998:	add	r1, sp, #4
   1c99c:	mov	r0, r4
   1c9a0:	bl	22840 <flatcc_builder_get_direct_buffer@@Base>
   1c9a4:	cmp	r0, #0
   1c9a8:	beq	1cb9c <test_add_set_defaults@@Base+0x2bc>
   1c9ac:	movw	r3, #20301	; 0x4f4d
   1c9b0:	movt	r3, #21326	; 0x534e
   1c9b4:	ldr	r2, [r0, #4]
   1c9b8:	cmp	r2, r3
   1c9bc:	bne	1cb9c <test_add_set_defaults@@Base+0x2bc>
   1c9c0:	ldr	r2, [r0]
   1c9c4:	adds	r3, r0, r2
   1c9c8:	beq	1cb9c <test_add_set_defaults@@Base+0x2bc>
   1c9cc:	ldr	r2, [r0, r2]
   1c9d0:	sub	r3, r3, r2
   1c9d4:	ldrh	r2, [r3]
   1c9d8:	cmp	r2, #9
   1c9dc:	bls	1cc54 <test_add_set_defaults@@Base+0x374>
   1c9e0:	ldrh	r1, [r3, #8]
   1c9e4:	cmp	r1, #0
   1c9e8:	bne	1cbb8 <test_add_set_defaults@@Base+0x2d8>
   1c9ec:	ldrh	r1, [r3, #6]
   1c9f0:	cmp	r1, #0
   1c9f4:	beq	1cc5c <test_add_set_defaults@@Base+0x37c>
   1c9f8:	cmp	r2, #17
   1c9fc:	bls	1ca0c <test_add_set_defaults@@Base+0x12c>
   1ca00:	ldrh	r3, [r3, #16]
   1ca04:	cmp	r3, #0
   1ca08:	bne	1cbcc <test_add_set_defaults@@Base+0x2ec>
   1ca0c:	mov	r0, r4
   1ca10:	bl	1ee18 <flatcc_builder_reset@@Base>
   1ca14:	mov	r3, #0
   1ca18:	mov	r2, r3
   1ca1c:	movw	r1, #20800	; 0x5140
   1ca20:	movt	r1, #2
   1ca24:	mov	r0, r4
   1ca28:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   1ca2c:	cmp	r0, #0
   1ca30:	bne	1ca40 <test_add_set_defaults@@Base+0x160>
   1ca34:	mov	r1, #36	; 0x24
   1ca38:	mov	r0, r4
   1ca3c:	bl	20608 <flatcc_builder_start_table@@Base>
   1ca40:	movw	r1, #21584	; 0x5450
   1ca44:	movt	r1, #2
   1ca48:	mov	r0, r4
   1ca4c:	bl	22020 <flatcc_builder_create_string_str@@Base>
   1ca50:	subs	r5, r0, #0
   1ca54:	beq	1ca6c <test_add_set_defaults@@Base+0x18c>
   1ca58:	mov	r1, #3
   1ca5c:	mov	r0, r4
   1ca60:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1ca64:	cmp	r0, #0
   1ca68:	strne	r5, [r0]
   1ca6c:	mov	r3, #2
   1ca70:	mov	r2, r3
   1ca74:	mov	r1, r3
   1ca78:	mov	r0, r4
   1ca7c:	bl	221cc <flatcc_builder_table_add@@Base>
   1ca80:	cmp	r0, #0
   1ca84:	movne	r3, #100	; 0x64
   1ca88:	strhne	r3, [r0]
   1ca8c:	mov	r3, #2
   1ca90:	mov	r2, r3
   1ca94:	mov	r1, #1
   1ca98:	mov	r0, r4
   1ca9c:	bl	221cc <flatcc_builder_table_add@@Base>
   1caa0:	cmp	r0, #0
   1caa4:	movne	r3, #100	; 0x64
   1caa8:	strhne	r3, [r0]
   1caac:	mov	r3, #1
   1cab0:	mov	r2, r3
   1cab4:	mov	r1, #6
   1cab8:	mov	r0, r4
   1cabc:	bl	221cc <flatcc_builder_table_add@@Base>
   1cac0:	cmp	r0, #0
   1cac4:	movne	r3, #8
   1cac8:	strbne	r3, [r0]
   1cacc:	mov	r2, #1
   1cad0:	ldr	r1, [pc, #424]	; 1cc80 <test_add_set_defaults@@Base+0x3a0>
   1cad4:	mov	r0, r4
   1cad8:	bl	21030 <flatcc_builder_check_required@@Base>
   1cadc:	cmp	r0, #0
   1cae0:	beq	1cbe0 <test_add_set_defaults@@Base+0x300>
   1cae4:	mov	r0, r4
   1cae8:	bl	210e0 <flatcc_builder_end_table@@Base>
   1caec:	mov	r1, r0
   1caf0:	mov	r0, r4
   1caf4:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   1caf8:	add	r1, sp, #4
   1cafc:	mov	r0, r4
   1cb00:	bl	22840 <flatcc_builder_get_direct_buffer@@Base>
   1cb04:	cmp	r0, #0
   1cb08:	beq	1cbfc <test_add_set_defaults@@Base+0x31c>
   1cb0c:	movw	r3, #20301	; 0x4f4d
   1cb10:	movt	r3, #21326	; 0x534e
   1cb14:	ldr	r2, [r0, #4]
   1cb18:	cmp	r2, r3
   1cb1c:	bne	1cbfc <test_add_set_defaults@@Base+0x31c>
   1cb20:	ldr	r2, [r0]
   1cb24:	adds	r3, r0, r2
   1cb28:	beq	1cbfc <test_add_set_defaults@@Base+0x31c>
   1cb2c:	ldr	r2, [r0, r2]
   1cb30:	sub	r3, r3, r2
   1cb34:	ldrh	r2, [r3]
   1cb38:	cmp	r2, #9
   1cb3c:	bls	1cc18 <test_add_set_defaults@@Base+0x338>
   1cb40:	ldrh	r1, [r3, #8]
   1cb44:	cmp	r1, #0
   1cb48:	beq	1cc18 <test_add_set_defaults@@Base+0x338>
   1cb4c:	ldrh	r1, [r3, #6]
   1cb50:	cmp	r1, #0
   1cb54:	beq	1cc2c <test_add_set_defaults@@Base+0x34c>
   1cb58:	cmp	r2, #17
   1cb5c:	bls	1cc40 <test_add_set_defaults@@Base+0x360>
   1cb60:	ldrh	r3, [r3, #16]
   1cb64:	cmp	r3, #0
   1cb68:	movne	r0, #0
   1cb6c:	beq	1cc40 <test_add_set_defaults@@Base+0x360>
   1cb70:	add	sp, sp, #12
   1cb74:	ldrd	r4, [sp]
   1cb78:	add	sp, sp, #8
   1cb7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb80:	ldr	r3, [pc, #252]	; 1cc84 <test_add_set_defaults@@Base+0x3a4>
   1cb84:	mov	r2, #235	; 0xeb
   1cb88:	movw	r1, #21196	; 0x52cc
   1cb8c:	movt	r1, #2
   1cb90:	movw	r0, #21596	; 0x545c
   1cb94:	movt	r0, #2
   1cb98:	bl	12a64 <__assert_fail@plt>
   1cb9c:	ldr	r3, [pc, #228]	; 1cc88 <test_add_set_defaults@@Base+0x3a8>
   1cba0:	movw	r2, #697	; 0x2b9
   1cba4:	movw	r1, #20464	; 0x4ff0
   1cba8:	movt	r1, #2
   1cbac:	movw	r0, #20564	; 0x5054
   1cbb0:	movt	r0, #2
   1cbb4:	bl	12a64 <__assert_fail@plt>
   1cbb8:	movw	r0, #30604	; 0x778c
   1cbbc:	movt	r0, #2
   1cbc0:	bl	129c8 <puts@plt>
   1cbc4:	mvn	r0, #0
   1cbc8:	b	1cb70 <test_add_set_defaults@@Base+0x290>
   1cbcc:	movw	r0, #30696	; 0x77e8
   1cbd0:	movt	r0, #2
   1cbd4:	bl	129c8 <puts@plt>
   1cbd8:	mvn	r0, #0
   1cbdc:	b	1cb70 <test_add_set_defaults@@Base+0x290>
   1cbe0:	ldr	r3, [pc, #156]	; 1cc84 <test_add_set_defaults@@Base+0x3a4>
   1cbe4:	mov	r2, #235	; 0xeb
   1cbe8:	movw	r1, #21196	; 0x52cc
   1cbec:	movt	r1, #2
   1cbf0:	movw	r0, #21596	; 0x545c
   1cbf4:	movt	r0, #2
   1cbf8:	bl	12a64 <__assert_fail@plt>
   1cbfc:	ldr	r3, [pc, #132]	; 1cc88 <test_add_set_defaults@@Base+0x3a8>
   1cc00:	movw	r2, #697	; 0x2b9
   1cc04:	movw	r1, #20464	; 0x4ff0
   1cc08:	movt	r1, #2
   1cc0c:	movw	r0, #20564	; 0x5054
   1cc10:	movt	r0, #2
   1cc14:	bl	12a64 <__assert_fail@plt>
   1cc18:	movw	r0, #30744	; 0x7818
   1cc1c:	movt	r0, #2
   1cc20:	bl	129c8 <puts@plt>
   1cc24:	mvn	r0, #0
   1cc28:	b	1cb70 <test_add_set_defaults@@Base+0x290>
   1cc2c:	movw	r0, #30796	; 0x784c
   1cc30:	movt	r0, #2
   1cc34:	bl	129c8 <puts@plt>
   1cc38:	mvn	r0, #0
   1cc3c:	b	1cb70 <test_add_set_defaults@@Base+0x290>
   1cc40:	movw	r0, #30860	; 0x788c
   1cc44:	movt	r0, #2
   1cc48:	bl	129c8 <puts@plt>
   1cc4c:	mvn	r0, #0
   1cc50:	b	1cb70 <test_add_set_defaults@@Base+0x290>
   1cc54:	cmp	r2, #7
   1cc58:	bhi	1cc70 <test_add_set_defaults@@Base+0x390>
   1cc5c:	movw	r0, #30648	; 0x77b8
   1cc60:	movt	r0, #2
   1cc64:	bl	129c8 <puts@plt>
   1cc68:	mvn	r0, #0
   1cc6c:	b	1cb70 <test_add_set_defaults@@Base+0x290>
   1cc70:	ldrh	r3, [r3, #6]
   1cc74:	cmp	r3, #0
   1cc78:	bne	1ca0c <test_add_set_defaults@@Base+0x12c>
   1cc7c:	b	1cc5c <test_add_set_defaults@@Base+0x37c>
   1cc80:	andeq	r4, r2, r0, asr #20
   1cc84:	andeq	r4, r2, r4, asr #20
   1cc88:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>

0001cc8c <test_nested_buffer@@Base>:
   1cc8c:	strd	r4, [sp, #-16]!
   1cc90:	str	r6, [sp, #8]
   1cc94:	str	lr, [sp, #12]
   1cc98:	sub	sp, sp, #8
   1cc9c:	mov	r4, r0
   1cca0:	bl	1ee18 <flatcc_builder_reset@@Base>
   1cca4:	mov	r3, #0
   1cca8:	mov	r2, r3
   1ccac:	movw	r1, #20800	; 0x5140
   1ccb0:	movt	r1, #2
   1ccb4:	mov	r0, r4
   1ccb8:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   1ccbc:	cmp	r0, #0
   1ccc0:	bne	1ccd0 <test_nested_buffer@@Base+0x44>
   1ccc4:	mov	r1, #36	; 0x24
   1ccc8:	mov	r0, r4
   1cccc:	bl	20608 <flatcc_builder_start_table@@Base>
   1ccd0:	movw	r1, #21584	; 0x5450
   1ccd4:	movt	r1, #2
   1ccd8:	mov	r0, r4
   1ccdc:	bl	22020 <flatcc_builder_create_string_str@@Base>
   1cce0:	subs	r5, r0, #0
   1cce4:	beq	1ccfc <test_nested_buffer@@Base+0x70>
   1cce8:	mov	r1, #3
   1ccec:	mov	r0, r4
   1ccf0:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1ccf4:	cmp	r0, #0
   1ccf8:	strne	r5, [r0]
   1ccfc:	mov	r3, #0
   1cd00:	mov	r2, r3
   1cd04:	movw	r1, #20800	; 0x5140
   1cd08:	movt	r1, #2
   1cd0c:	mov	r0, r4
   1cd10:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   1cd14:	cmp	r0, #0
   1cd18:	bne	1cd28 <test_nested_buffer@@Base+0x9c>
   1cd1c:	mov	r1, #36	; 0x24
   1cd20:	mov	r0, r4
   1cd24:	bl	20608 <flatcc_builder_start_table@@Base>
   1cd28:	movw	r1, #30916	; 0x78c4
   1cd2c:	movt	r1, #2
   1cd30:	mov	r0, r4
   1cd34:	bl	22020 <flatcc_builder_create_string_str@@Base>
   1cd38:	subs	r5, r0, #0
   1cd3c:	beq	1cd54 <test_nested_buffer@@Base+0xc8>
   1cd40:	mov	r1, #3
   1cd44:	mov	r0, r4
   1cd48:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1cd4c:	cmp	r0, #0
   1cd50:	strne	r5, [r0]
   1cd54:	mov	r2, #1
   1cd58:	ldr	r1, [pc, #636]	; 1cfdc <test_nested_buffer@@Base+0x350>
   1cd5c:	mov	r0, r4
   1cd60:	bl	21030 <flatcc_builder_check_required@@Base>
   1cd64:	cmp	r0, #0
   1cd68:	beq	1cf04 <test_nested_buffer@@Base+0x278>
   1cd6c:	mov	r0, r4
   1cd70:	bl	210e0 <flatcc_builder_end_table@@Base>
   1cd74:	mov	r1, r0
   1cd78:	mov	r0, r4
   1cd7c:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   1cd80:	subs	r5, r0, #0
   1cd84:	beq	1cd9c <test_nested_buffer@@Base+0x110>
   1cd88:	mov	r1, #13
   1cd8c:	mov	r0, r4
   1cd90:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1cd94:	cmp	r0, #0
   1cd98:	strne	r5, [r0]
   1cd9c:	mov	r3, #2
   1cda0:	mov	r2, r3
   1cda4:	mov	r1, r3
   1cda8:	mov	r0, r4
   1cdac:	bl	221cc <flatcc_builder_table_add@@Base>
   1cdb0:	cmp	r0, #0
   1cdb4:	movne	r3, #10
   1cdb8:	strhne	r3, [r0]
   1cdbc:	mov	r2, #1
   1cdc0:	ldr	r1, [pc, #532]	; 1cfdc <test_nested_buffer@@Base+0x350>
   1cdc4:	mov	r0, r4
   1cdc8:	bl	21030 <flatcc_builder_check_required@@Base>
   1cdcc:	cmp	r0, #0
   1cdd0:	beq	1cf20 <test_nested_buffer@@Base+0x294>
   1cdd4:	mov	r0, r4
   1cdd8:	bl	210e0 <flatcc_builder_end_table@@Base>
   1cddc:	mov	r1, r0
   1cde0:	mov	r0, r4
   1cde4:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   1cde8:	add	r1, sp, #4
   1cdec:	mov	r0, r4
   1cdf0:	bl	22840 <flatcc_builder_get_direct_buffer@@Base>
   1cdf4:	mov	r4, r0
   1cdf8:	movw	r3, #36976	; 0x9070
   1cdfc:	movt	r3, #3
   1ce00:	ldr	r3, [r3]
   1ce04:	ldr	r2, [sp, #4]
   1ce08:	mov	r1, r0
   1ce0c:	movw	r0, #30932	; 0x78d4
   1ce10:	movt	r0, #2
   1ce14:	bl	13384 <_start@@Base+0x914>
   1ce18:	cmp	r4, #0
   1ce1c:	beq	1cfac <test_nested_buffer@@Base+0x320>
   1ce20:	movw	r3, #20301	; 0x4f4d
   1ce24:	movt	r3, #21326	; 0x534e
   1ce28:	ldr	r2, [r4, #4]
   1ce2c:	cmp	r2, r3
   1ce30:	bne	1cfac <test_nested_buffer@@Base+0x320>
   1ce34:	ldr	r6, [r4]
   1ce38:	add	r5, r4, r6
   1ce3c:	mov	r0, r5
   1ce40:	bl	12f74 <_start@@Base+0x504>
   1ce44:	movw	r1, #21584	; 0x5450
   1ce48:	movt	r1, #2
   1ce4c:	bl	12968 <strcmp@plt>
   1ce50:	cmp	r0, #0
   1ce54:	bne	1cfc8 <test_nested_buffer@@Base+0x33c>
   1ce58:	cmp	r5, #0
   1ce5c:	beq	1cf3c <test_nested_buffer@@Base+0x2b0>
   1ce60:	ldr	r3, [r4, r6]
   1ce64:	sub	r3, r5, r3
   1ce68:	ldrh	r2, [r3]
   1ce6c:	cmp	r2, #31
   1ce70:	bls	1cf58 <test_nested_buffer@@Base+0x2cc>
   1ce74:	ldrh	r2, [r3, #30]
   1ce78:	cmp	r2, #0
   1ce7c:	moveq	r0, #0
   1ce80:	beq	1ceb8 <test_nested_buffer@@Base+0x22c>
   1ce84:	add	r1, r5, r2
   1ce88:	ldr	r2, [r5, r2]
   1ce8c:	add	r2, r2, #4
   1ce90:	adds	r0, r1, r2
   1ce94:	beq	1ceb8 <test_nested_buffer@@Base+0x22c>
   1ce98:	movw	ip, #20301	; 0x4f4d
   1ce9c:	movt	ip, #21326	; 0x534e
   1cea0:	ldr	lr, [r0, #4]
   1cea4:	cmp	lr, ip
   1cea8:	movne	r0, #0
   1ceac:	bne	1ceb8 <test_nested_buffer@@Base+0x22c>
   1ceb0:	ldr	r2, [r1, r2]
   1ceb4:	add	r0, r0, r2
   1ceb8:	ldrh	r3, [r3, #8]
   1cebc:	cmp	r3, #0
   1cec0:	beq	1cf60 <test_nested_buffer@@Base+0x2d4>
   1cec4:	ldrsh	r3, [r5, r3]
   1cec8:	cmp	r3, #10
   1cecc:	bne	1cf60 <test_nested_buffer@@Base+0x2d4>
   1ced0:	bl	12f74 <_start@@Base+0x504>
   1ced4:	cmp	r0, #0
   1ced8:	beq	1cf7c <test_nested_buffer@@Base+0x2f0>
   1cedc:	movw	r1, #30916	; 0x78c4
   1cee0:	movt	r1, #2
   1cee4:	bl	12968 <strcmp@plt>
   1cee8:	cmp	r0, #0
   1ceec:	bne	1cf98 <test_nested_buffer@@Base+0x30c>
   1cef0:	add	sp, sp, #8
   1cef4:	ldrd	r4, [sp]
   1cef8:	ldr	r6, [sp, #8]
   1cefc:	add	sp, sp, #12
   1cf00:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf04:	ldr	r3, [pc, #212]	; 1cfe0 <test_nested_buffer@@Base+0x354>
   1cf08:	mov	r2, #235	; 0xeb
   1cf0c:	movw	r1, #21196	; 0x52cc
   1cf10:	movt	r1, #2
   1cf14:	movw	r0, #21596	; 0x545c
   1cf18:	movt	r0, #2
   1cf1c:	bl	12a64 <__assert_fail@plt>
   1cf20:	ldr	r3, [pc, #184]	; 1cfe0 <test_nested_buffer@@Base+0x354>
   1cf24:	mov	r2, #235	; 0xeb
   1cf28:	movw	r1, #21196	; 0x52cc
   1cf2c:	movt	r1, #2
   1cf30:	movw	r0, #21596	; 0x545c
   1cf34:	movt	r0, #2
   1cf38:	bl	12a64 <__assert_fail@plt>
   1cf3c:	ldr	r3, [pc, #160]	; 1cfe4 <test_nested_buffer@@Base+0x358>
   1cf40:	mov	r2, #720	; 0x2d0
   1cf44:	movw	r1, #20464	; 0x4ff0
   1cf48:	movt	r1, #2
   1cf4c:	movw	r0, #20564	; 0x5054
   1cf50:	movt	r0, #2
   1cf54:	bl	12a64 <__assert_fail@plt>
   1cf58:	cmp	r2, #9
   1cf5c:	bhi	1cf74 <test_nested_buffer@@Base+0x2e8>
   1cf60:	movw	r0, #30980	; 0x7904
   1cf64:	movt	r0, #2
   1cf68:	bl	129c8 <puts@plt>
   1cf6c:	mvn	r0, #0
   1cf70:	b	1cef0 <test_nested_buffer@@Base+0x264>
   1cf74:	mov	r0, #0
   1cf78:	b	1ceb8 <test_nested_buffer@@Base+0x22c>
   1cf7c:	ldr	r3, [pc, #100]	; 1cfe8 <test_nested_buffer@@Base+0x35c>
   1cf80:	movw	r2, #2188	; 0x88c
   1cf84:	movw	r1, #23376	; 0x5b50
   1cf88:	movt	r1, #2
   1cf8c:	movw	r0, #31016	; 0x7928
   1cf90:	movt	r0, #2
   1cf94:	bl	12a64 <__assert_fail@plt>
   1cf98:	movw	r0, #31044	; 0x7944
   1cf9c:	movt	r0, #2
   1cfa0:	bl	129c8 <puts@plt>
   1cfa4:	mvn	r0, #0
   1cfa8:	b	1cef0 <test_nested_buffer@@Base+0x264>
   1cfac:	mov	r0, #0
   1cfb0:	bl	12f74 <_start@@Base+0x504>
   1cfb4:	movw	r1, #21584	; 0x5450
   1cfb8:	movt	r1, #2
   1cfbc:	bl	12968 <strcmp@plt>
   1cfc0:	cmp	r0, #0
   1cfc4:	beq	1cf3c <test_nested_buffer@@Base+0x2b0>
   1cfc8:	movw	r0, #30952	; 0x78e8
   1cfcc:	movt	r0, #2
   1cfd0:	bl	129c8 <puts@plt>
   1cfd4:	mvn	r0, #0
   1cfd8:	b	1cef0 <test_nested_buffer@@Base+0x264>
   1cfdc:	andeq	r4, r2, r0, asr #20
   1cfe0:	andeq	r4, r2, r4, asr #20
   1cfe4:	andeq	r4, r2, ip, lsl lr
   1cfe8:	andeq	r4, r2, r8, asr #28

0001cfec <test_nested_buffer_first@@Base>:
   1cfec:	strd	r4, [sp, #-16]!
   1cff0:	str	r6, [sp, #8]
   1cff4:	str	lr, [sp, #12]
   1cff8:	sub	sp, sp, #8
   1cffc:	mov	r4, r0
   1d000:	bl	1ee18 <flatcc_builder_reset@@Base>
   1d004:	mov	r3, #0
   1d008:	mov	r2, r3
   1d00c:	movw	r1, #20800	; 0x5140
   1d010:	movt	r1, #2
   1d014:	mov	r0, r4
   1d018:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   1d01c:	cmp	r0, #0
   1d020:	bne	1d030 <test_nested_buffer_first@@Base+0x44>
   1d024:	mov	r1, #36	; 0x24
   1d028:	mov	r0, r4
   1d02c:	bl	20608 <flatcc_builder_start_table@@Base>
   1d030:	mov	r3, #0
   1d034:	mov	r2, r3
   1d038:	movw	r1, #20800	; 0x5140
   1d03c:	movt	r1, #2
   1d040:	mov	r0, r4
   1d044:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   1d048:	cmp	r0, #0
   1d04c:	bne	1d05c <test_nested_buffer_first@@Base+0x70>
   1d050:	mov	r1, #36	; 0x24
   1d054:	mov	r0, r4
   1d058:	bl	20608 <flatcc_builder_start_table@@Base>
   1d05c:	movw	r1, #30916	; 0x78c4
   1d060:	movt	r1, #2
   1d064:	mov	r0, r4
   1d068:	bl	22020 <flatcc_builder_create_string_str@@Base>
   1d06c:	subs	r5, r0, #0
   1d070:	beq	1d088 <test_nested_buffer_first@@Base+0x9c>
   1d074:	mov	r1, #3
   1d078:	mov	r0, r4
   1d07c:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1d080:	cmp	r0, #0
   1d084:	strne	r5, [r0]
   1d088:	mov	r2, #1
   1d08c:	ldr	r1, [pc, #680]	; 1d33c <test_nested_buffer_first@@Base+0x350>
   1d090:	mov	r0, r4
   1d094:	bl	21030 <flatcc_builder_check_required@@Base>
   1d098:	cmp	r0, #0
   1d09c:	beq	1d264 <test_nested_buffer_first@@Base+0x278>
   1d0a0:	mov	r0, r4
   1d0a4:	bl	210e0 <flatcc_builder_end_table@@Base>
   1d0a8:	mov	r1, r0
   1d0ac:	mov	r0, r4
   1d0b0:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   1d0b4:	subs	r5, r0, #0
   1d0b8:	beq	1d0d0 <test_nested_buffer_first@@Base+0xe4>
   1d0bc:	mov	r1, #13
   1d0c0:	mov	r0, r4
   1d0c4:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1d0c8:	cmp	r0, #0
   1d0cc:	strne	r5, [r0]
   1d0d0:	mov	r3, #2
   1d0d4:	mov	r2, r3
   1d0d8:	mov	r1, r3
   1d0dc:	mov	r0, r4
   1d0e0:	bl	221cc <flatcc_builder_table_add@@Base>
   1d0e4:	cmp	r0, #0
   1d0e8:	movne	r3, #10
   1d0ec:	strhne	r3, [r0]
   1d0f0:	movw	r1, #21584	; 0x5450
   1d0f4:	movt	r1, #2
   1d0f8:	mov	r0, r4
   1d0fc:	bl	22020 <flatcc_builder_create_string_str@@Base>
   1d100:	subs	r5, r0, #0
   1d104:	beq	1d11c <test_nested_buffer_first@@Base+0x130>
   1d108:	mov	r1, #3
   1d10c:	mov	r0, r4
   1d110:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1d114:	cmp	r0, #0
   1d118:	strne	r5, [r0]
   1d11c:	mov	r2, #1
   1d120:	ldr	r1, [pc, #532]	; 1d33c <test_nested_buffer_first@@Base+0x350>
   1d124:	mov	r0, r4
   1d128:	bl	21030 <flatcc_builder_check_required@@Base>
   1d12c:	cmp	r0, #0
   1d130:	beq	1d280 <test_nested_buffer_first@@Base+0x294>
   1d134:	mov	r0, r4
   1d138:	bl	210e0 <flatcc_builder_end_table@@Base>
   1d13c:	mov	r1, r0
   1d140:	mov	r0, r4
   1d144:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   1d148:	add	r1, sp, #4
   1d14c:	mov	r0, r4
   1d150:	bl	22840 <flatcc_builder_get_direct_buffer@@Base>
   1d154:	mov	r4, r0
   1d158:	movw	r3, #36976	; 0x9070
   1d15c:	movt	r3, #3
   1d160:	ldr	r3, [r3]
   1d164:	ldr	r2, [sp, #4]
   1d168:	mov	r1, r0
   1d16c:	movw	r0, #30932	; 0x78d4
   1d170:	movt	r0, #2
   1d174:	bl	13384 <_start@@Base+0x914>
   1d178:	cmp	r4, #0
   1d17c:	beq	1d30c <test_nested_buffer_first@@Base+0x320>
   1d180:	movw	r3, #20301	; 0x4f4d
   1d184:	movt	r3, #21326	; 0x534e
   1d188:	ldr	r2, [r4, #4]
   1d18c:	cmp	r2, r3
   1d190:	bne	1d30c <test_nested_buffer_first@@Base+0x320>
   1d194:	ldr	r6, [r4]
   1d198:	add	r5, r4, r6
   1d19c:	mov	r0, r5
   1d1a0:	bl	12f74 <_start@@Base+0x504>
   1d1a4:	movw	r1, #21584	; 0x5450
   1d1a8:	movt	r1, #2
   1d1ac:	bl	12968 <strcmp@plt>
   1d1b0:	cmp	r0, #0
   1d1b4:	bne	1d328 <test_nested_buffer_first@@Base+0x33c>
   1d1b8:	cmp	r5, #0
   1d1bc:	beq	1d29c <test_nested_buffer_first@@Base+0x2b0>
   1d1c0:	ldr	r3, [r4, r6]
   1d1c4:	sub	r3, r5, r3
   1d1c8:	ldrh	r2, [r3]
   1d1cc:	cmp	r2, #31
   1d1d0:	bls	1d2b8 <test_nested_buffer_first@@Base+0x2cc>
   1d1d4:	ldrh	r2, [r3, #30]
   1d1d8:	cmp	r2, #0
   1d1dc:	moveq	r0, #0
   1d1e0:	beq	1d218 <test_nested_buffer_first@@Base+0x22c>
   1d1e4:	add	r1, r5, r2
   1d1e8:	ldr	r2, [r5, r2]
   1d1ec:	add	r2, r2, #4
   1d1f0:	adds	r0, r1, r2
   1d1f4:	beq	1d218 <test_nested_buffer_first@@Base+0x22c>
   1d1f8:	movw	ip, #20301	; 0x4f4d
   1d1fc:	movt	ip, #21326	; 0x534e
   1d200:	ldr	lr, [r0, #4]
   1d204:	cmp	lr, ip
   1d208:	movne	r0, #0
   1d20c:	bne	1d218 <test_nested_buffer_first@@Base+0x22c>
   1d210:	ldr	r2, [r1, r2]
   1d214:	add	r0, r0, r2
   1d218:	ldrh	r3, [r3, #8]
   1d21c:	cmp	r3, #0
   1d220:	beq	1d2c0 <test_nested_buffer_first@@Base+0x2d4>
   1d224:	ldrsh	r3, [r5, r3]
   1d228:	cmp	r3, #10
   1d22c:	bne	1d2c0 <test_nested_buffer_first@@Base+0x2d4>
   1d230:	bl	12f74 <_start@@Base+0x504>
   1d234:	cmp	r0, #0
   1d238:	beq	1d2dc <test_nested_buffer_first@@Base+0x2f0>
   1d23c:	movw	r1, #30916	; 0x78c4
   1d240:	movt	r1, #2
   1d244:	bl	12968 <strcmp@plt>
   1d248:	cmp	r0, #0
   1d24c:	bne	1d2f8 <test_nested_buffer_first@@Base+0x30c>
   1d250:	add	sp, sp, #8
   1d254:	ldrd	r4, [sp]
   1d258:	ldr	r6, [sp, #8]
   1d25c:	add	sp, sp, #12
   1d260:	pop	{pc}		; (ldr pc, [sp], #4)
   1d264:	ldr	r3, [pc, #212]	; 1d340 <test_nested_buffer_first@@Base+0x354>
   1d268:	mov	r2, #235	; 0xeb
   1d26c:	movw	r1, #21196	; 0x52cc
   1d270:	movt	r1, #2
   1d274:	movw	r0, #21596	; 0x545c
   1d278:	movt	r0, #2
   1d27c:	bl	12a64 <__assert_fail@plt>
   1d280:	ldr	r3, [pc, #184]	; 1d340 <test_nested_buffer_first@@Base+0x354>
   1d284:	mov	r2, #235	; 0xeb
   1d288:	movw	r1, #21196	; 0x52cc
   1d28c:	movt	r1, #2
   1d290:	movw	r0, #21596	; 0x545c
   1d294:	movt	r0, #2
   1d298:	bl	12a64 <__assert_fail@plt>
   1d29c:	ldr	r3, [pc, #160]	; 1d344 <test_nested_buffer_first@@Base+0x358>
   1d2a0:	mov	r2, #720	; 0x2d0
   1d2a4:	movw	r1, #20464	; 0x4ff0
   1d2a8:	movt	r1, #2
   1d2ac:	movw	r0, #20564	; 0x5054
   1d2b0:	movt	r0, #2
   1d2b4:	bl	12a64 <__assert_fail@plt>
   1d2b8:	cmp	r2, #9
   1d2bc:	bhi	1d2d4 <test_nested_buffer_first@@Base+0x2e8>
   1d2c0:	movw	r0, #30980	; 0x7904
   1d2c4:	movt	r0, #2
   1d2c8:	bl	129c8 <puts@plt>
   1d2cc:	mvn	r0, #0
   1d2d0:	b	1d250 <test_nested_buffer_first@@Base+0x264>
   1d2d4:	mov	r0, #0
   1d2d8:	b	1d218 <test_nested_buffer_first@@Base+0x22c>
   1d2dc:	ldr	r3, [pc, #100]	; 1d348 <test_nested_buffer_first@@Base+0x35c>
   1d2e0:	movw	r2, #2241	; 0x8c1
   1d2e4:	movw	r1, #23376	; 0x5b50
   1d2e8:	movt	r1, #2
   1d2ec:	movw	r0, #31016	; 0x7928
   1d2f0:	movt	r0, #2
   1d2f4:	bl	12a64 <__assert_fail@plt>
   1d2f8:	movw	r0, #31044	; 0x7944
   1d2fc:	movt	r0, #2
   1d300:	bl	129c8 <puts@plt>
   1d304:	mvn	r0, #0
   1d308:	b	1d250 <test_nested_buffer_first@@Base+0x264>
   1d30c:	mov	r0, #0
   1d310:	bl	12f74 <_start@@Base+0x504>
   1d314:	movw	r1, #21584	; 0x5450
   1d318:	movt	r1, #2
   1d31c:	bl	12968 <strcmp@plt>
   1d320:	cmp	r0, #0
   1d324:	beq	1d29c <test_nested_buffer_first@@Base+0x2b0>
   1d328:	movw	r0, #30952	; 0x78e8
   1d32c:	movt	r0, #2
   1d330:	bl	129c8 <puts@plt>
   1d334:	mvn	r0, #0
   1d338:	b	1d250 <test_nested_buffer_first@@Base+0x264>
   1d33c:	andeq	r4, r2, r0, asr #20
   1d340:	andeq	r4, r2, r4, asr #20
   1d344:	andeq	r4, r2, ip, lsl lr
   1d348:	andeq	r4, r2, ip, asr lr

0001d34c <test_nested_buffer_using_nest@@Base>:
   1d34c:	strd	r4, [sp, #-16]!
   1d350:	str	r6, [sp, #8]
   1d354:	str	lr, [sp, #12]
   1d358:	sub	sp, sp, #1040	; 0x410
   1d35c:	mov	r4, r0
   1d360:	bl	1ee18 <flatcc_builder_reset@@Base>
   1d364:	mov	r3, #0
   1d368:	mov	r2, r3
   1d36c:	movw	r1, #20800	; 0x5140
   1d370:	movt	r1, #2
   1d374:	mov	r0, r4
   1d378:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   1d37c:	cmp	r0, #0
   1d380:	bne	1d390 <test_nested_buffer_using_nest@@Base+0x44>
   1d384:	mov	r1, #36	; 0x24
   1d388:	mov	r0, r4
   1d38c:	bl	20608 <flatcc_builder_start_table@@Base>
   1d390:	movw	r1, #30916	; 0x78c4
   1d394:	movt	r1, #2
   1d398:	mov	r0, r4
   1d39c:	bl	22020 <flatcc_builder_create_string_str@@Base>
   1d3a0:	subs	r5, r0, #0
   1d3a4:	beq	1d3bc <test_nested_buffer_using_nest@@Base+0x70>
   1d3a8:	mov	r1, #3
   1d3ac:	mov	r0, r4
   1d3b0:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1d3b4:	cmp	r0, #0
   1d3b8:	strne	r5, [r0]
   1d3bc:	mov	r3, #2
   1d3c0:	mov	r2, r3
   1d3c4:	mov	r1, #1
   1d3c8:	mov	r0, r4
   1d3cc:	bl	221cc <flatcc_builder_table_add@@Base>
   1d3d0:	cmp	r0, #0
   1d3d4:	movne	r3, #42	; 0x2a
   1d3d8:	strhne	r3, [r0]
   1d3dc:	mov	r2, #1
   1d3e0:	ldr	r1, [pc, #928]	; 1d788 <test_nested_buffer_using_nest@@Base+0x43c>
   1d3e4:	mov	r0, r4
   1d3e8:	bl	21030 <flatcc_builder_check_required@@Base>
   1d3ec:	cmp	r0, #0
   1d3f0:	beq	1d66c <test_nested_buffer_using_nest@@Base+0x320>
   1d3f4:	mov	r0, r4
   1d3f8:	bl	210e0 <flatcc_builder_end_table@@Base>
   1d3fc:	mov	r1, r0
   1d400:	mov	r0, r4
   1d404:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   1d408:	mov	r0, r4
   1d40c:	bl	227ac <flatcc_builder_get_buffer_size@@Base>
   1d410:	mov	r5, r0
   1d414:	mov	r2, #1024	; 0x400
   1d418:	add	r1, sp, #16
   1d41c:	mov	r0, r4
   1d420:	bl	228a8 <flatcc_builder_copy_buffer@@Base>
   1d424:	cmp	r0, #0
   1d428:	beq	1d688 <test_nested_buffer_using_nest@@Base+0x33c>
   1d42c:	mov	r0, r4
   1d430:	bl	1ee18 <flatcc_builder_reset@@Base>
   1d434:	mov	r3, #0
   1d438:	mov	r2, r3
   1d43c:	movw	r1, #20800	; 0x5140
   1d440:	movt	r1, #2
   1d444:	mov	r0, r4
   1d448:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   1d44c:	cmp	r0, #0
   1d450:	bne	1d460 <test_nested_buffer_using_nest@@Base+0x114>
   1d454:	mov	r1, #36	; 0x24
   1d458:	mov	r0, r4
   1d45c:	bl	20608 <flatcc_builder_start_table@@Base>
   1d460:	mvn	r3, #0
   1d464:	str	r3, [sp, #4]
   1d468:	mov	r3, #8
   1d46c:	str	r3, [sp]
   1d470:	mov	r3, #1
   1d474:	mov	r2, r5
   1d478:	add	r1, sp, #16
   1d47c:	mov	r0, r4
   1d480:	bl	212a4 <flatcc_builder_create_vector@@Base>
   1d484:	subs	r5, r0, #0
   1d488:	beq	1d4a0 <test_nested_buffer_using_nest@@Base+0x154>
   1d48c:	mov	r1, #13
   1d490:	mov	r0, r4
   1d494:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1d498:	cmp	r0, #0
   1d49c:	strne	r5, [r0]
   1d4a0:	mov	r3, #2
   1d4a4:	mov	r2, r3
   1d4a8:	mov	r1, r3
   1d4ac:	mov	r0, r4
   1d4b0:	bl	221cc <flatcc_builder_table_add@@Base>
   1d4b4:	cmp	r0, #0
   1d4b8:	movne	r3, #10
   1d4bc:	strhne	r3, [r0]
   1d4c0:	movw	r1, #21584	; 0x5450
   1d4c4:	movt	r1, #2
   1d4c8:	mov	r0, r4
   1d4cc:	bl	22020 <flatcc_builder_create_string_str@@Base>
   1d4d0:	subs	r5, r0, #0
   1d4d4:	beq	1d4ec <test_nested_buffer_using_nest@@Base+0x1a0>
   1d4d8:	mov	r1, #3
   1d4dc:	mov	r0, r4
   1d4e0:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1d4e4:	cmp	r0, #0
   1d4e8:	strne	r5, [r0]
   1d4ec:	mov	r2, #1
   1d4f0:	ldr	r1, [pc, #656]	; 1d788 <test_nested_buffer_using_nest@@Base+0x43c>
   1d4f4:	mov	r0, r4
   1d4f8:	bl	21030 <flatcc_builder_check_required@@Base>
   1d4fc:	cmp	r0, #0
   1d500:	beq	1d69c <test_nested_buffer_using_nest@@Base+0x350>
   1d504:	mov	r0, r4
   1d508:	bl	210e0 <flatcc_builder_end_table@@Base>
   1d50c:	mov	r1, r0
   1d510:	mov	r0, r4
   1d514:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   1d518:	add	r1, sp, #12
   1d51c:	mov	r0, r4
   1d520:	bl	22840 <flatcc_builder_get_direct_buffer@@Base>
   1d524:	mov	r4, r0
   1d528:	movw	r3, #36976	; 0x9070
   1d52c:	movt	r3, #3
   1d530:	ldr	r3, [r3]
   1d534:	ldr	r2, [sp, #12]
   1d538:	mov	r1, r0
   1d53c:	movw	r0, #31104	; 0x7980
   1d540:	movt	r0, #2
   1d544:	bl	13384 <_start@@Base+0x914>
   1d548:	cmp	r4, #0
   1d54c:	beq	1d758 <test_nested_buffer_using_nest@@Base+0x40c>
   1d550:	movw	r3, #20301	; 0x4f4d
   1d554:	movt	r3, #21326	; 0x534e
   1d558:	ldr	r2, [r4, #4]
   1d55c:	cmp	r2, r3
   1d560:	bne	1d758 <test_nested_buffer_using_nest@@Base+0x40c>
   1d564:	ldr	r6, [r4]
   1d568:	add	r5, r4, r6
   1d56c:	mov	r0, r5
   1d570:	bl	12f74 <_start@@Base+0x504>
   1d574:	movw	r1, #21584	; 0x5450
   1d578:	movt	r1, #2
   1d57c:	bl	12968 <strcmp@plt>
   1d580:	cmp	r0, #0
   1d584:	bne	1d774 <test_nested_buffer_using_nest@@Base+0x428>
   1d588:	cmp	r5, #0
   1d58c:	beq	1d6b8 <test_nested_buffer_using_nest@@Base+0x36c>
   1d590:	ldr	r3, [r4, r6]
   1d594:	sub	r3, r5, r3
   1d598:	ldrh	r2, [r3]
   1d59c:	cmp	r2, #31
   1d5a0:	bls	1d6d4 <test_nested_buffer_using_nest@@Base+0x388>
   1d5a4:	ldrh	r2, [r3, #30]
   1d5a8:	cmp	r2, #0
   1d5ac:	moveq	r4, #0
   1d5b0:	beq	1d5e8 <test_nested_buffer_using_nest@@Base+0x29c>
   1d5b4:	add	r1, r5, r2
   1d5b8:	ldr	r2, [r5, r2]
   1d5bc:	add	r2, r2, #4
   1d5c0:	adds	r4, r1, r2
   1d5c4:	beq	1d5e8 <test_nested_buffer_using_nest@@Base+0x29c>
   1d5c8:	movw	r0, #20301	; 0x4f4d
   1d5cc:	movt	r0, #21326	; 0x534e
   1d5d0:	ldr	ip, [r4, #4]
   1d5d4:	cmp	ip, r0
   1d5d8:	movne	r4, #0
   1d5dc:	bne	1d5e8 <test_nested_buffer_using_nest@@Base+0x29c>
   1d5e0:	ldr	r2, [r1, r2]
   1d5e4:	add	r4, r4, r2
   1d5e8:	ldrh	r3, [r3, #8]
   1d5ec:	cmp	r3, #0
   1d5f0:	beq	1d6dc <test_nested_buffer_using_nest@@Base+0x390>
   1d5f4:	ldrsh	r3, [r5, r3]
   1d5f8:	cmp	r3, #10
   1d5fc:	bne	1d6dc <test_nested_buffer_using_nest@@Base+0x390>
   1d600:	mov	r0, r4
   1d604:	bl	12f74 <_start@@Base+0x504>
   1d608:	cmp	r0, #0
   1d60c:	beq	1d6f8 <test_nested_buffer_using_nest@@Base+0x3ac>
   1d610:	movw	r1, #30916	; 0x78c4
   1d614:	movt	r1, #2
   1d618:	bl	12968 <strcmp@plt>
   1d61c:	cmp	r0, #0
   1d620:	bne	1d714 <test_nested_buffer_using_nest@@Base+0x3c8>
   1d624:	cmp	r4, #0
   1d628:	beq	1d728 <test_nested_buffer_using_nest@@Base+0x3dc>
   1d62c:	ldr	r3, [r4]
   1d630:	sub	r3, r4, r3
   1d634:	ldrh	r2, [r3]
   1d638:	cmp	r2, #7
   1d63c:	bls	1d744 <test_nested_buffer_using_nest@@Base+0x3f8>
   1d640:	ldrh	r3, [r3, #6]
   1d644:	cmp	r3, #0
   1d648:	beq	1d744 <test_nested_buffer_using_nest@@Base+0x3f8>
   1d64c:	ldrsh	r3, [r4, r3]
   1d650:	cmp	r3, #42	; 0x2a
   1d654:	bne	1d744 <test_nested_buffer_using_nest@@Base+0x3f8>
   1d658:	add	sp, sp, #1040	; 0x410
   1d65c:	ldrd	r4, [sp]
   1d660:	ldr	r6, [sp, #8]
   1d664:	add	sp, sp, #12
   1d668:	pop	{pc}		; (ldr pc, [sp], #4)
   1d66c:	ldr	r3, [pc, #280]	; 1d78c <test_nested_buffer_using_nest@@Base+0x440>
   1d670:	mov	r2, #235	; 0xeb
   1d674:	movw	r1, #21196	; 0x52cc
   1d678:	movt	r1, #2
   1d67c:	movw	r0, #21596	; 0x545c
   1d680:	movt	r0, #2
   1d684:	bl	12a64 <__assert_fail@plt>
   1d688:	movw	r0, #31076	; 0x7964
   1d68c:	movt	r0, #2
   1d690:	bl	129c8 <puts@plt>
   1d694:	mvn	r0, #0
   1d698:	b	1d658 <test_nested_buffer_using_nest@@Base+0x30c>
   1d69c:	ldr	r3, [pc, #232]	; 1d78c <test_nested_buffer_using_nest@@Base+0x440>
   1d6a0:	mov	r2, #235	; 0xeb
   1d6a4:	movw	r1, #21196	; 0x52cc
   1d6a8:	movt	r1, #2
   1d6ac:	movw	r0, #21596	; 0x545c
   1d6b0:	movt	r0, #2
   1d6b4:	bl	12a64 <__assert_fail@plt>
   1d6b8:	ldr	r3, [pc, #208]	; 1d790 <test_nested_buffer_using_nest@@Base+0x444>
   1d6bc:	mov	r2, #720	; 0x2d0
   1d6c0:	movw	r1, #20464	; 0x4ff0
   1d6c4:	movt	r1, #2
   1d6c8:	movw	r0, #20564	; 0x5054
   1d6cc:	movt	r0, #2
   1d6d0:	bl	12a64 <__assert_fail@plt>
   1d6d4:	cmp	r2, #9
   1d6d8:	bhi	1d6f0 <test_nested_buffer_using_nest@@Base+0x3a4>
   1d6dc:	movw	r0, #30980	; 0x7904
   1d6e0:	movt	r0, #2
   1d6e4:	bl	129c8 <puts@plt>
   1d6e8:	mvn	r0, #0
   1d6ec:	b	1d658 <test_nested_buffer_using_nest@@Base+0x30c>
   1d6f0:	mov	r4, #0
   1d6f4:	b	1d5e8 <test_nested_buffer_using_nest@@Base+0x29c>
   1d6f8:	ldr	r3, [pc, #148]	; 1d794 <test_nested_buffer_using_nest@@Base+0x448>
   1d6fc:	movw	r2, #2298	; 0x8fa
   1d700:	movw	r1, #23376	; 0x5b50
   1d704:	movt	r1, #2
   1d708:	movw	r0, #31016	; 0x7928
   1d70c:	movt	r0, #2
   1d710:	bl	12a64 <__assert_fail@plt>
   1d714:	movw	r0, #31044	; 0x7944
   1d718:	movt	r0, #2
   1d71c:	bl	129c8 <puts@plt>
   1d720:	mvn	r0, #0
   1d724:	b	1d658 <test_nested_buffer_using_nest@@Base+0x30c>
   1d728:	ldr	r3, [pc, #104]	; 1d798 <test_nested_buffer_using_nest@@Base+0x44c>
   1d72c:	movw	r2, #698	; 0x2ba
   1d730:	movw	r1, #20464	; 0x4ff0
   1d734:	movt	r1, #2
   1d738:	movw	r0, #20564	; 0x5054
   1d73c:	movt	r0, #2
   1d740:	bl	12a64 <__assert_fail@plt>
   1d744:	movw	r0, #31140	; 0x79a4
   1d748:	movt	r0, #2
   1d74c:	bl	129c8 <puts@plt>
   1d750:	mvn	r0, #0
   1d754:	b	1d658 <test_nested_buffer_using_nest@@Base+0x30c>
   1d758:	mov	r0, #0
   1d75c:	bl	12f74 <_start@@Base+0x504>
   1d760:	movw	r1, #21584	; 0x5450
   1d764:	movt	r1, #2
   1d768:	bl	12968 <strcmp@plt>
   1d76c:	cmp	r0, #0
   1d770:	beq	1d6b8 <test_nested_buffer_using_nest@@Base+0x36c>
   1d774:	movw	r0, #30952	; 0x78e8
   1d778:	movt	r0, #2
   1d77c:	bl	129c8 <puts@plt>
   1d780:	mvn	r0, #0
   1d784:	b	1d658 <test_nested_buffer_using_nest@@Base+0x30c>
   1d788:	andeq	r4, r2, r0, asr #20
   1d78c:	andeq	r4, r2, r4, asr #20
   1d790:	andeq	r4, r2, ip, lsl lr
   1d794:	andeq	r4, r2, r8, ror lr
   1d798:	muleq	r2, r8, lr

0001d79c <verify_include@@Base>:
   1d79c:	mov	r0, #0
   1d7a0:	bx	lr

0001d7a4 <test_struct_buffer@@Base>:
   1d7a4:	str	r4, [sp, #-8]!
   1d7a8:	str	lr, [sp, #4]
   1d7ac:	sub	sp, sp, #112	; 0x70
   1d7b0:	mov	r4, r0
   1d7b4:	bl	1ee18 <flatcc_builder_reset@@Base>
   1d7b8:	mov	r2, #16
   1d7bc:	mov	r1, #32
   1d7c0:	mov	r0, r4
   1d7c4:	bl	1f860 <flatcc_builder_start_struct@@Base>
   1d7c8:	cmp	r0, #0
   1d7cc:	moveq	r3, #0
   1d7d0:	beq	1d828 <test_struct_buffer@@Base+0x84>
   1d7d4:	mov	r3, #1065353216	; 0x3f800000
   1d7d8:	str	r3, [r0]
   1d7dc:	mov	r3, #1073741824	; 0x40000000
   1d7e0:	str	r3, [r0, #4]
   1d7e4:	mov	r3, #0
   1d7e8:	movt	r3, #16448	; 0x4040
   1d7ec:	str	r3, [r0, #8]
   1d7f0:	movw	r2, #52429	; 0xcccd
   1d7f4:	movt	r2, #52428	; 0xcccc
   1d7f8:	movw	r3, #52428	; 0xcccc
   1d7fc:	movt	r3, #16400	; 0x4010
   1d800:	strd	r2, [r0, #16]
   1d804:	mov	r3, #8
   1d808:	strb	r3, [r0, #24]
   1d80c:	movw	r3, #2730	; 0xaaa
   1d810:	strh	r3, [r0, #26]
   1d814:	mvn	r3, #16
   1d818:	strb	r3, [r0, #28]
   1d81c:	mov	r0, r4
   1d820:	bl	1f918 <flatcc_builder_end_struct@@Base>
   1d824:	mov	r3, r0
   1d828:	mov	r2, #0
   1d82c:	str	r2, [sp, #4]
   1d830:	mov	r1, #16
   1d834:	str	r1, [sp]
   1d838:	movw	r1, #20800	; 0x5140
   1d83c:	movt	r1, #2
   1d840:	mov	r0, r4
   1d844:	bl	1f2ac <flatcc_builder_create_buffer@@Base>
   1d848:	mov	r0, r4
   1d84c:	bl	227ac <flatcc_builder_get_buffer_size@@Base>
   1d850:	cmp	r0, #48	; 0x30
   1d854:	bne	1d8e8 <test_struct_buffer@@Base+0x144>
   1d858:	mov	r1, #48	; 0x30
   1d85c:	movw	r0, #31188	; 0x79d4
   1d860:	movt	r0, #2
   1d864:	bl	12974 <printf@plt>
   1d868:	mov	r0, r4
   1d86c:	bl	22ad4 <flatcc_builder_get_emit_context@@Base>
   1d870:	ldr	r3, [r0, #24]
   1d874:	cmp	r3, #48	; 0x30
   1d878:	bne	1d904 <test_struct_buffer@@Base+0x160>
   1d87c:	mov	r2, #100	; 0x64
   1d880:	add	r1, sp, #12
   1d884:	mov	r0, r4
   1d888:	bl	228a8 <flatcc_builder_copy_buffer@@Base>
   1d88c:	cmp	r0, #0
   1d890:	beq	1d920 <test_struct_buffer@@Base+0x17c>
   1d894:	movw	r3, #36976	; 0x9070
   1d898:	movt	r3, #3
   1d89c:	ldr	r3, [r3]
   1d8a0:	mov	r2, #48	; 0x30
   1d8a4:	add	r1, sp, #12
   1d8a8:	movw	r0, #31308	; 0x7a4c
   1d8ac:	movt	r0, #2
   1d8b0:	bl	13384 <_start@@Base+0x914>
   1d8b4:	movw	r3, #20301	; 0x4f4d
   1d8b8:	movt	r3, #21326	; 0x534e
   1d8bc:	ldr	r2, [sp, #16]
   1d8c0:	cmp	r2, r3
   1d8c4:	beq	1d934 <test_struct_buffer@@Base+0x190>
   1d8c8:	movw	r0, #31328	; 0x7a60
   1d8cc:	movt	r0, #2
   1d8d0:	bl	129c8 <puts@plt>
   1d8d4:	mvn	r0, #0
   1d8d8:	add	sp, sp, #112	; 0x70
   1d8dc:	ldr	r4, [sp]
   1d8e0:	add	sp, sp, #4
   1d8e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d8e8:	ldr	r3, [pc, #244]	; 1d9e4 <test_struct_buffer@@Base+0x240>
   1d8ec:	movw	r2, #2339	; 0x923
   1d8f0:	movw	r1, #23376	; 0x5b50
   1d8f4:	movt	r1, #2
   1d8f8:	movw	r0, #31176	; 0x79c8
   1d8fc:	movt	r0, #2
   1d900:	bl	12a64 <__assert_fail@plt>
   1d904:	ldr	r3, [pc, #216]	; 1d9e4 <test_struct_buffer@@Base+0x240>
   1d908:	movw	r2, #2341	; 0x925
   1d90c:	movw	r1, #23376	; 0x5b50
   1d910:	movt	r1, #2
   1d914:	movw	r0, #31220	; 0x79f4
   1d918:	movt	r0, #2
   1d91c:	bl	12a64 <__assert_fail@plt>
   1d920:	movw	r0, #31296	; 0x7a40
   1d924:	movt	r0, #2
   1d928:	bl	129c8 <puts@plt>
   1d92c:	mvn	r0, #0
   1d930:	b	1d8d8 <test_struct_buffer@@Base+0x134>
   1d934:	ldr	r3, [sp, #12]
   1d938:	add	r2, sp, #12
   1d93c:	add	r3, r2, r3
   1d940:	vldr	s14, [r3]
   1d944:	vldr	s15, [pc, #140]	; 1d9d8 <test_struct_buffer@@Base+0x234>
   1d948:	vcmp.f32	s14, s15
   1d94c:	vmrs	APSR_nzcv, fpscr
   1d950:	bne	1d9b8 <test_struct_buffer@@Base+0x214>
   1d954:	vldr	s14, [r3, #4]
   1d958:	vldr	s15, [pc, #124]	; 1d9dc <test_struct_buffer@@Base+0x238>
   1d95c:	vcmp.f32	s14, s15
   1d960:	vmrs	APSR_nzcv, fpscr
   1d964:	bne	1d9b8 <test_struct_buffer@@Base+0x214>
   1d968:	vldr	s14, [r3, #8]
   1d96c:	vldr	s15, [pc, #108]	; 1d9e0 <test_struct_buffer@@Base+0x23c>
   1d970:	vcmp.f32	s14, s15
   1d974:	vmrs	APSR_nzcv, fpscr
   1d978:	bne	1d9b8 <test_struct_buffer@@Base+0x214>
   1d97c:	vldr	d6, [r3, #16]
   1d980:	vldr	d7, [pc, #72]	; 1d9d0 <test_struct_buffer@@Base+0x22c>
   1d984:	vcmp.f64	d6, d7
   1d988:	vmrs	APSR_nzcv, fpscr
   1d98c:	bne	1d9b8 <test_struct_buffer@@Base+0x214>
   1d990:	ldr	r2, [r3, #24]
   1d994:	bic	r2, r2, #65280	; 0xff00
   1d998:	mov	r1, #8
   1d99c:	movt	r1, #2730	; 0xaaa
   1d9a0:	cmp	r2, r1
   1d9a4:	bne	1d9b8 <test_struct_buffer@@Base+0x214>
   1d9a8:	ldrsb	r3, [r3, #28]
   1d9ac:	cmn	r3, #17
   1d9b0:	moveq	r0, #0
   1d9b4:	beq	1d8d8 <test_struct_buffer@@Base+0x134>
   1d9b8:	movw	r0, #31364	; 0x7a84
   1d9bc:	movt	r0, #2
   1d9c0:	bl	129c8 <puts@plt>
   1d9c4:	mvn	r0, #0
   1d9c8:	b	1d8d8 <test_struct_buffer@@Base+0x134>
   1d9cc:	nop	{0}
   1d9d0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1d9d4:	andsmi	ip, r0, ip, asr #25
   1d9d8:	svccc	0x00800000
   1d9dc:	andmi	r0, r0, r0
   1d9e0:	submi	r0, r0, r0
   1d9e4:			; <UNDEFINED> instruction: 0x00024eb4

0001d9e8 <test_typed_struct_buffer@@Base>:
   1d9e8:	str	r4, [sp, #-8]!
   1d9ec:	str	lr, [sp, #4]
   1d9f0:	sub	sp, sp, #112	; 0x70
   1d9f4:	mov	r4, r0
   1d9f8:	bl	1ee18 <flatcc_builder_reset@@Base>
   1d9fc:	mov	r2, #16
   1da00:	mov	r1, #32
   1da04:	mov	r0, r4
   1da08:	bl	1f860 <flatcc_builder_start_struct@@Base>
   1da0c:	cmp	r0, #0
   1da10:	moveq	r3, #0
   1da14:	beq	1da6c <test_typed_struct_buffer@@Base+0x84>
   1da18:	mov	r3, #1065353216	; 0x3f800000
   1da1c:	str	r3, [r0]
   1da20:	mov	r3, #1073741824	; 0x40000000
   1da24:	str	r3, [r0, #4]
   1da28:	mov	r3, #0
   1da2c:	movt	r3, #16448	; 0x4040
   1da30:	str	r3, [r0, #8]
   1da34:	movw	r2, #52429	; 0xcccd
   1da38:	movt	r2, #52428	; 0xcccc
   1da3c:	movw	r3, #52428	; 0xcccc
   1da40:	movt	r3, #16400	; 0x4010
   1da44:	strd	r2, [r0, #16]
   1da48:	mov	r3, #8
   1da4c:	strb	r3, [r0, #24]
   1da50:	movw	r3, #2730	; 0xaaa
   1da54:	strh	r3, [r0, #26]
   1da58:	mvn	r3, #16
   1da5c:	strb	r3, [r0, #28]
   1da60:	mov	r0, r4
   1da64:	bl	1f918 <flatcc_builder_end_struct@@Base>
   1da68:	mov	r3, r0
   1da6c:	mov	r2, #0
   1da70:	str	r2, [sp, #4]
   1da74:	mov	r1, #16
   1da78:	str	r1, [sp]
   1da7c:	movw	r1, #31388	; 0x7a9c
   1da80:	movt	r1, #2
   1da84:	mov	r0, r4
   1da88:	bl	1f2ac <flatcc_builder_create_buffer@@Base>
   1da8c:	mov	r0, r4
   1da90:	bl	227ac <flatcc_builder_get_buffer_size@@Base>
   1da94:	cmp	r0, #48	; 0x30
   1da98:	bne	1db2c <test_typed_struct_buffer@@Base+0x144>
   1da9c:	mov	r1, #48	; 0x30
   1daa0:	movw	r0, #31188	; 0x79d4
   1daa4:	movt	r0, #2
   1daa8:	bl	12974 <printf@plt>
   1daac:	mov	r0, r4
   1dab0:	bl	22ad4 <flatcc_builder_get_emit_context@@Base>
   1dab4:	ldr	r3, [r0, #24]
   1dab8:	cmp	r3, #48	; 0x30
   1dabc:	bne	1db48 <test_typed_struct_buffer@@Base+0x160>
   1dac0:	mov	r2, #100	; 0x64
   1dac4:	add	r1, sp, #12
   1dac8:	mov	r0, r4
   1dacc:	bl	228a8 <flatcc_builder_copy_buffer@@Base>
   1dad0:	cmp	r0, #0
   1dad4:	beq	1db64 <test_typed_struct_buffer@@Base+0x17c>
   1dad8:	movw	r3, #36976	; 0x9070
   1dadc:	movt	r3, #3
   1dae0:	ldr	r3, [r3]
   1dae4:	mov	r2, #48	; 0x30
   1dae8:	add	r1, sp, #12
   1daec:	movw	r0, #31396	; 0x7aa4
   1daf0:	movt	r0, #2
   1daf4:	bl	13384 <_start@@Base+0x914>
   1daf8:	movw	r3, #16082	; 0x3ed2
   1dafc:	movt	r3, #43253	; 0xa8f5
   1db00:	ldr	r2, [sp, #16]
   1db04:	cmp	r2, r3
   1db08:	beq	1db78 <test_typed_struct_buffer@@Base+0x190>
   1db0c:	movw	r0, #31328	; 0x7a60
   1db10:	movt	r0, #2
   1db14:	bl	129c8 <puts@plt>
   1db18:	mvn	r0, #0
   1db1c:	add	sp, sp, #112	; 0x70
   1db20:	ldr	r4, [sp]
   1db24:	add	sp, sp, #4
   1db28:	pop	{pc}		; (ldr pc, [sp], #4)
   1db2c:	ldr	r3, [pc, #440]	; 1dcec <test_typed_struct_buffer@@Base+0x304>
   1db30:	movw	r2, #2388	; 0x954
   1db34:	movw	r1, #23376	; 0x5b50
   1db38:	movt	r1, #2
   1db3c:	movw	r0, #31176	; 0x79c8
   1db40:	movt	r0, #2
   1db44:	bl	12a64 <__assert_fail@plt>
   1db48:	ldr	r3, [pc, #412]	; 1dcec <test_typed_struct_buffer@@Base+0x304>
   1db4c:	movw	r2, #2390	; 0x956
   1db50:	movw	r1, #23376	; 0x5b50
   1db54:	movt	r1, #2
   1db58:	movw	r0, #31220	; 0x79f4
   1db5c:	movt	r0, #2
   1db60:	bl	12a64 <__assert_fail@plt>
   1db64:	movw	r0, #31296	; 0x7a40
   1db68:	movt	r0, #2
   1db6c:	bl	129c8 <puts@plt>
   1db70:	mvn	r0, #0
   1db74:	b	1db1c <test_typed_struct_buffer@@Base+0x134>
   1db78:	add	r3, sp, #12
   1db7c:	ldr	r2, [sp, #12]
   1db80:	cmn	r3, r2
   1db84:	beq	1dbd8 <test_typed_struct_buffer@@Base+0x1f0>
   1db88:	mov	r3, #16
   1db8c:	str	r3, [sp]
   1db90:	mov	r3, #32
   1db94:	movw	r2, #16082	; 0x3ed2
   1db98:	movt	r2, #43253	; 0xa8f5
   1db9c:	mov	r1, #48	; 0x30
   1dba0:	add	r0, sp, #12
   1dba4:	bl	23efc <flatcc_verify_struct_as_typed_root@@Base>
   1dba8:	cmp	r0, #0
   1dbac:	bne	1dbec <test_typed_struct_buffer@@Base+0x204>
   1dbb0:	movw	r3, #16082	; 0x3ed2
   1dbb4:	movt	r3, #43253	; 0xa8f5
   1dbb8:	ldr	r2, [sp, #16]
   1dbbc:	cmp	r2, r3
   1dbc0:	beq	1dc00 <test_typed_struct_buffer@@Base+0x218>
   1dbc4:	movw	r0, #31500	; 0x7b0c
   1dbc8:	movt	r0, #2
   1dbcc:	bl	129c8 <puts@plt>
   1dbd0:	mvn	r0, #0
   1dbd4:	b	1db1c <test_typed_struct_buffer@@Base+0x134>
   1dbd8:	movw	r0, #31424	; 0x7ac0
   1dbdc:	movt	r0, #2
   1dbe0:	bl	129c8 <puts@plt>
   1dbe4:	mvn	r0, #0
   1dbe8:	b	1db1c <test_typed_struct_buffer@@Base+0x134>
   1dbec:	movw	r0, #31464	; 0x7ae8
   1dbf0:	movt	r0, #2
   1dbf4:	bl	129c8 <puts@plt>
   1dbf8:	mvn	r0, #0
   1dbfc:	b	1db1c <test_typed_struct_buffer@@Base+0x134>
   1dc00:	add	r4, sp, #12
   1dc04:	ldr	r3, [sp, #12]
   1dc08:	adds	r4, r4, r3
   1dc0c:	beq	1dbc4 <test_typed_struct_buffer@@Base+0x1dc>
   1dc10:	mov	r3, #16
   1dc14:	str	r3, [sp]
   1dc18:	mov	r3, #32
   1dc1c:	movw	r2, #16082	; 0x3ed2
   1dc20:	movt	r2, #43253	; 0xa8f5
   1dc24:	mov	r1, #48	; 0x30
   1dc28:	add	r0, sp, #12
   1dc2c:	bl	23efc <flatcc_verify_struct_as_typed_root@@Base>
   1dc30:	cmp	r0, #0
   1dc34:	bne	1dcc0 <test_typed_struct_buffer@@Base+0x2d8>
   1dc38:	vldr	s14, [r4]
   1dc3c:	vldr	s15, [pc, #156]	; 1dce0 <test_typed_struct_buffer@@Base+0x2f8>
   1dc40:	vcmp.f32	s14, s15
   1dc44:	vmrs	APSR_nzcv, fpscr
   1dc48:	bne	1dcac <test_typed_struct_buffer@@Base+0x2c4>
   1dc4c:	vldr	s14, [r4, #4]
   1dc50:	vldr	s15, [pc, #140]	; 1dce4 <test_typed_struct_buffer@@Base+0x2fc>
   1dc54:	vcmp.f32	s14, s15
   1dc58:	vmrs	APSR_nzcv, fpscr
   1dc5c:	bne	1dcac <test_typed_struct_buffer@@Base+0x2c4>
   1dc60:	vldr	s14, [r4, #8]
   1dc64:	vldr	s15, [pc, #124]	; 1dce8 <test_typed_struct_buffer@@Base+0x300>
   1dc68:	vcmp.f32	s14, s15
   1dc6c:	vmrs	APSR_nzcv, fpscr
   1dc70:	bne	1dcac <test_typed_struct_buffer@@Base+0x2c4>
   1dc74:	vldr	d6, [r4, #16]
   1dc78:	vldr	d7, [pc, #88]	; 1dcd8 <test_typed_struct_buffer@@Base+0x2f0>
   1dc7c:	vcmp.f64	d6, d7
   1dc80:	vmrs	APSR_nzcv, fpscr
   1dc84:	bne	1dcac <test_typed_struct_buffer@@Base+0x2c4>
   1dc88:	ldr	r3, [r4, #24]
   1dc8c:	bic	r3, r3, #65280	; 0xff00
   1dc90:	mov	r2, #8
   1dc94:	movt	r2, #2730	; 0xaaa
   1dc98:	cmp	r3, r2
   1dc9c:	bne	1dcac <test_typed_struct_buffer@@Base+0x2c4>
   1dca0:	ldrsb	r3, [r4, #28]
   1dca4:	cmn	r3, #17
   1dca8:	beq	1db1c <test_typed_struct_buffer@@Base+0x134>
   1dcac:	movw	r0, #31364	; 0x7a84
   1dcb0:	movt	r0, #2
   1dcb4:	bl	129c8 <puts@plt>
   1dcb8:	mvn	r0, #0
   1dcbc:	b	1db1c <test_typed_struct_buffer@@Base+0x134>
   1dcc0:	movw	r0, #31532	; 0x7b2c
   1dcc4:	movt	r0, #2
   1dcc8:	bl	129c8 <puts@plt>
   1dccc:	mvn	r0, #0
   1dcd0:	b	1db1c <test_typed_struct_buffer@@Base+0x134>
   1dcd4:	nop	{0}
   1dcd8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1dcdc:	andsmi	ip, r0, ip, asr #25
   1dce0:	svccc	0x00800000
   1dce4:	andmi	r0, r0, r0
   1dce8:	submi	r0, r0, r0
   1dcec:	andeq	r4, r2, r8, asr #29

0001dcf0 <gen_monster_benchmark@@Base>:
   1dcf0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1dcf4:	strd	r6, [sp, #8]
   1dcf8:	str	lr, [sp, #16]
   1dcfc:	sub	sp, sp, #28
   1dd00:	mov	r4, r0
   1dd04:	ldr	r3, [pc, #544]	; 1df2c <gen_monster_benchmark@@Base+0x23c>
   1dd08:	ldrd	r6, [r3]
   1dd0c:	strd	r6, [sp, #12]
   1dd10:	ldrh	r3, [r3, #8]
   1dd14:	strh	r3, [sp, #20]
   1dd18:	bl	1ee18 <flatcc_builder_reset@@Base>
   1dd1c:	mov	r3, #0
   1dd20:	mov	r2, r3
   1dd24:	movw	r1, #20800	; 0x5140
   1dd28:	movt	r1, #2
   1dd2c:	mov	r0, r4
   1dd30:	bl	1f648 <flatcc_builder_start_buffer@@Base>
   1dd34:	cmp	r0, #0
   1dd38:	bne	1dd48 <gen_monster_benchmark@@Base+0x58>
   1dd3c:	mov	r1, #36	; 0x24
   1dd40:	mov	r0, r4
   1dd44:	bl	20608 <flatcc_builder_start_table@@Base>
   1dd48:	mov	r3, #2
   1dd4c:	mov	r2, r3
   1dd50:	mov	r1, r3
   1dd54:	mov	r0, r4
   1dd58:	bl	221cc <flatcc_builder_table_add@@Base>
   1dd5c:	cmp	r0, #0
   1dd60:	movne	r3, #80	; 0x50
   1dd64:	strhne	r3, [r0]
   1dd68:	mov	r3, #16
   1dd6c:	mov	r2, #32
   1dd70:	mov	r1, #0
   1dd74:	mov	r0, r4
   1dd78:	bl	221cc <flatcc_builder_table_add@@Base>
   1dd7c:	mov	r3, #1065353216	; 0x3f800000
   1dd80:	str	r3, [r0]
   1dd84:	mov	r3, #1073741824	; 0x40000000
   1dd88:	str	r3, [r0, #4]
   1dd8c:	movw	r3, #52429	; 0xcccd
   1dd90:	movt	r3, #49228	; 0xc04c
   1dd94:	str	r3, [r0, #8]
   1dd98:	movw	r1, #21584	; 0x5450
   1dd9c:	movt	r1, #2
   1dda0:	mov	r0, r4
   1dda4:	bl	22020 <flatcc_builder_create_string_str@@Base>
   1dda8:	subs	r5, r0, #0
   1ddac:	beq	1ddc4 <gen_monster_benchmark@@Base+0xd4>
   1ddb0:	mov	r1, #3
   1ddb4:	mov	r0, r4
   1ddb8:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1ddbc:	cmp	r0, #0
   1ddc0:	strne	r5, [r0]
   1ddc4:	mvn	r3, #0
   1ddc8:	str	r3, [sp, #4]
   1ddcc:	mov	r3, #1
   1ddd0:	str	r3, [sp]
   1ddd4:	mov	r2, #10
   1ddd8:	add	r1, sp, #12
   1dddc:	mov	r0, r4
   1dde0:	bl	212a4 <flatcc_builder_create_vector@@Base>
   1dde4:	subs	r5, r0, #0
   1dde8:	beq	1de00 <gen_monster_benchmark@@Base+0x110>
   1ddec:	mov	r1, #5
   1ddf0:	mov	r0, r4
   1ddf4:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1ddf8:	cmp	r0, #0
   1ddfc:	strne	r5, [r0]
   1de00:	mvn	r3, #-1073741824	; 0xc0000000
   1de04:	mov	r2, #2
   1de08:	mov	r1, #4
   1de0c:	mov	r0, r4
   1de10:	bl	20310 <flatcc_builder_start_vector@@Base>
   1de14:	mov	r1, #1
   1de18:	mov	r0, r4
   1de1c:	bl	1fa04 <flatcc_builder_extend_vector@@Base>
   1de20:	mov	r3, #16
   1de24:	strh	r3, [r0]
   1de28:	mov	r3, #32
   1de2c:	strb	r3, [r0, #2]
   1de30:	mov	r1, #2
   1de34:	mov	r0, r4
   1de38:	bl	1fa04 <flatcc_builder_extend_vector@@Base>
   1de3c:	mov	r3, #48	; 0x30
   1de40:	strh	r3, [r0]
   1de44:	mov	r3, #64	; 0x40
   1de48:	strb	r3, [r0, #2]
   1de4c:	mov	r3, #80	; 0x50
   1de50:	strh	r3, [r0, #4]
   1de54:	mov	r3, #96	; 0x60
   1de58:	strb	r3, [r0, #6]
   1de5c:	mov	r1, #1
   1de60:	mov	r0, r4
   1de64:	bl	1fa04 <flatcc_builder_extend_vector@@Base>
   1de68:	cmp	r0, #0
   1de6c:	beq	1de80 <gen_monster_benchmark@@Base+0x190>
   1de70:	mov	r3, #112	; 0x70
   1de74:	strh	r3, [r0]
   1de78:	mvn	r3, #127	; 0x7f
   1de7c:	strb	r3, [r0, #2]
   1de80:	movw	r3, #401	; 0x191
   1de84:	strh	r3, [sp, #8]
   1de88:	mvn	r3, #110	; 0x6e
   1de8c:	strb	r3, [sp, #10]
   1de90:	mov	r1, #1
   1de94:	mov	r0, r4
   1de98:	bl	1fa04 <flatcc_builder_extend_vector@@Base>
   1de9c:	cmp	r0, #0
   1dea0:	ldrne	r3, [sp, #8]
   1dea4:	strne	r3, [r0]
   1dea8:	mov	r0, r4
   1deac:	bl	21414 <flatcc_builder_end_vector@@Base>
   1deb0:	subs	r5, r0, #0
   1deb4:	beq	1decc <gen_monster_benchmark@@Base+0x1dc>
   1deb8:	mov	r1, #9
   1debc:	mov	r0, r4
   1dec0:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   1dec4:	cmp	r0, #0
   1dec8:	strne	r5, [r0]
   1decc:	mov	r2, #1
   1ded0:	ldr	r1, [pc, #88]	; 1df30 <gen_monster_benchmark@@Base+0x240>
   1ded4:	mov	r0, r4
   1ded8:	bl	21030 <flatcc_builder_check_required@@Base>
   1dedc:	cmp	r0, #0
   1dee0:	beq	1df10 <gen_monster_benchmark@@Base+0x220>
   1dee4:	mov	r0, r4
   1dee8:	bl	210e0 <flatcc_builder_end_table@@Base>
   1deec:	mov	r1, r0
   1def0:	mov	r0, r4
   1def4:	bl	1f71c <flatcc_builder_end_buffer@@Base>
   1def8:	mov	r0, #0
   1defc:	add	sp, sp, #28
   1df00:	ldrd	r4, [sp]
   1df04:	ldrd	r6, [sp, #8]
   1df08:	add	sp, sp, #16
   1df0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1df10:	ldr	r3, [pc, #28]	; 1df34 <gen_monster_benchmark@@Base+0x244>
   1df14:	mov	r2, #235	; 0xeb
   1df18:	movw	r1, #21196	; 0x52cc
   1df1c:	movt	r1, #2
   1df20:	movw	r0, #21596	; 0x545c
   1df24:	movt	r0, #2
   1df28:	bl	12a64 <__assert_fail@plt>
   1df2c:	andeq	r4, r2, r8, asr #22
   1df30:	andeq	r4, r2, r0, asr #20
   1df34:	andeq	r4, r2, r4, asr #20

0001df38 <time_monster@@Base>:
   1df38:	strd	r4, [sp, #-16]!
   1df3c:	str	r6, [sp, #8]
   1df40:	str	lr, [sp, #12]
   1df44:	vpush	{d8}
   1df48:	mov	r5, r0
   1df4c:	movw	r0, #31572	; 0x7b54
   1df50:	movt	r0, #2
   1df54:	bl	129c8 <puts@plt>
   1df58:	bl	13ea0 <_start@@Base+0x1430>
   1df5c:	vmov.f64	d8, d0
   1df60:	movw	r4, #16960	; 0x4240
   1df64:	movt	r4, #15
   1df68:	mov	r0, r5
   1df6c:	bl	1dcf0 <gen_monster_benchmark@@Base>
   1df70:	subs	r4, r4, #1
   1df74:	bne	1df68 <time_monster@@Base+0x30>
   1df78:	mov	r0, r5
   1df7c:	bl	227ac <flatcc_builder_get_buffer_size@@Base>
   1df80:	mov	r4, r0
   1df84:	bl	13ea0 <_start@@Base+0x1430>
   1df88:	movw	r3, #31592	; 0x7b68
   1df8c:	movt	r3, #2
   1df90:	movw	r2, #16960	; 0x4240
   1df94:	movt	r2, #15
   1df98:	mov	r1, r4
   1df9c:	vmov.f64	d1, d0
   1dfa0:	vmov.f64	d0, d8
   1dfa4:	movw	r0, #31600	; 0x7b70
   1dfa8:	movt	r0, #2
   1dfac:	bl	12b70 <_start@@Base+0x100>
   1dfb0:	mov	r0, #0
   1dfb4:	vpop	{d8}
   1dfb8:	ldrd	r4, [sp]
   1dfbc:	ldr	r6, [sp, #8]
   1dfc0:	add	sp, sp, #12
   1dfc4:	pop	{pc}		; (ldr pc, [sp], #4)

0001dfc8 <gen_struct_buffer_benchmark@@Base>:
   1dfc8:	strd	r4, [sp, #-12]!
   1dfcc:	str	lr, [sp, #8]
   1dfd0:	sub	sp, sp, #12
   1dfd4:	mov	r4, r0
   1dfd8:	bl	1ee18 <flatcc_builder_reset@@Base>
   1dfdc:	mov	r2, #16
   1dfe0:	mov	r1, #32
   1dfe4:	mov	r0, r4
   1dfe8:	bl	1f860 <flatcc_builder_start_struct@@Base>
   1dfec:	cmp	r0, #0
   1dff0:	moveq	r3, #0
   1dff4:	beq	1e04c <gen_struct_buffer_benchmark@@Base+0x84>
   1dff8:	mov	r3, #1065353216	; 0x3f800000
   1dffc:	str	r3, [r0]
   1e000:	mov	r3, #1073741824	; 0x40000000
   1e004:	str	r3, [r0, #4]
   1e008:	mov	r3, #0
   1e00c:	movt	r3, #16448	; 0x4040
   1e010:	str	r3, [r0, #8]
   1e014:	movw	r2, #52429	; 0xcccd
   1e018:	movt	r2, #52428	; 0xcccc
   1e01c:	movw	r3, #52428	; 0xcccc
   1e020:	movt	r3, #16400	; 0x4010
   1e024:	strd	r2, [r0, #16]
   1e028:	mov	r3, #8
   1e02c:	strb	r3, [r0, #24]
   1e030:	movw	r3, #2730	; 0xaaa
   1e034:	strh	r3, [r0, #26]
   1e038:	mvn	r3, #16
   1e03c:	strb	r3, [r0, #28]
   1e040:	mov	r0, r4
   1e044:	bl	1f918 <flatcc_builder_end_struct@@Base>
   1e048:	mov	r3, r0
   1e04c:	mov	r5, #0
   1e050:	str	r5, [sp, #4]
   1e054:	mov	r2, #16
   1e058:	str	r2, [sp]
   1e05c:	mov	r2, r5
   1e060:	movw	r1, #20800	; 0x5140
   1e064:	movt	r1, #2
   1e068:	mov	r0, r4
   1e06c:	bl	1f2ac <flatcc_builder_create_buffer@@Base>
   1e070:	mov	r1, r5
   1e074:	mov	r0, r4
   1e078:	bl	22840 <flatcc_builder_get_direct_buffer@@Base>
   1e07c:	cmp	r0, #0
   1e080:	beq	1e114 <gen_struct_buffer_benchmark@@Base+0x14c>
   1e084:	ldr	r3, [r0]
   1e088:	add	r0, r0, r3
   1e08c:	vldr	s14, [r0]
   1e090:	vldr	s15, [pc, #184]	; 1e150 <gen_struct_buffer_benchmark@@Base+0x188>
   1e094:	vcmp.f32	s14, s15
   1e098:	vmrs	APSR_nzcv, fpscr
   1e09c:	bne	1e11c <gen_struct_buffer_benchmark@@Base+0x154>
   1e0a0:	vldr	s14, [r0, #4]
   1e0a4:	vldr	s15, [pc, #168]	; 1e154 <gen_struct_buffer_benchmark@@Base+0x18c>
   1e0a8:	vcmp.f32	s14, s15
   1e0ac:	vmrs	APSR_nzcv, fpscr
   1e0b0:	bne	1e124 <gen_struct_buffer_benchmark@@Base+0x15c>
   1e0b4:	vldr	s14, [r0, #8]
   1e0b8:	vldr	s15, [pc, #152]	; 1e158 <gen_struct_buffer_benchmark@@Base+0x190>
   1e0bc:	vcmp.f32	s14, s15
   1e0c0:	vmrs	APSR_nzcv, fpscr
   1e0c4:	bne	1e12c <gen_struct_buffer_benchmark@@Base+0x164>
   1e0c8:	vldr	d6, [r0, #16]
   1e0cc:	vldr	d7, [pc, #116]	; 1e148 <gen_struct_buffer_benchmark@@Base+0x180>
   1e0d0:	vcmp.f64	d6, d7
   1e0d4:	vmrs	APSR_nzcv, fpscr
   1e0d8:	bne	1e134 <gen_struct_buffer_benchmark@@Base+0x16c>
   1e0dc:	ldr	r3, [r0, #24]
   1e0e0:	bic	r3, r3, #65280	; 0xff00
   1e0e4:	mov	r2, #8
   1e0e8:	movt	r2, #2730	; 0xaaa
   1e0ec:	cmp	r3, r2
   1e0f0:	bne	1e13c <gen_struct_buffer_benchmark@@Base+0x174>
   1e0f4:	ldrsb	r0, [r0, #28]
   1e0f8:	adds	r0, r0, #17
   1e0fc:	movne	r0, #1
   1e100:	rsb	r0, r0, #0
   1e104:	add	sp, sp, #12
   1e108:	ldrd	r4, [sp]
   1e10c:	add	sp, sp, #8
   1e110:	pop	{pc}		; (ldr pc, [sp], #4)
   1e114:	mvn	r0, #0
   1e118:	b	1e104 <gen_struct_buffer_benchmark@@Base+0x13c>
   1e11c:	mvn	r0, #0
   1e120:	b	1e104 <gen_struct_buffer_benchmark@@Base+0x13c>
   1e124:	mvn	r0, #0
   1e128:	b	1e104 <gen_struct_buffer_benchmark@@Base+0x13c>
   1e12c:	mvn	r0, #0
   1e130:	b	1e104 <gen_struct_buffer_benchmark@@Base+0x13c>
   1e134:	mvn	r0, #0
   1e138:	b	1e104 <gen_struct_buffer_benchmark@@Base+0x13c>
   1e13c:	mvn	r0, #0
   1e140:	b	1e104 <gen_struct_buffer_benchmark@@Base+0x13c>
   1e144:	nop	{0}
   1e148:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1e14c:	andsmi	ip, r0, ip, asr #25
   1e150:	svccc	0x00800000
   1e154:	andmi	r0, r0, r0
   1e158:	submi	r0, r0, r0

0001e15c <time_struct_buffer@@Base>:
   1e15c:	strd	r4, [sp, #-16]!
   1e160:	str	r6, [sp, #8]
   1e164:	str	lr, [sp, #12]
   1e168:	vpush	{d8-d9}
   1e16c:	mov	r6, r0
   1e170:	movw	r0, #31572	; 0x7b54
   1e174:	movt	r0, #2
   1e178:	bl	129c8 <puts@plt>
   1e17c:	bl	13ea0 <_start@@Base+0x1430>
   1e180:	vmov.f64	d8, d0
   1e184:	movw	r4, #16960	; 0x4240
   1e188:	movt	r4, #15
   1e18c:	mov	r5, #0
   1e190:	mov	r0, r6
   1e194:	bl	1dfc8 <gen_struct_buffer_benchmark@@Base>
   1e198:	orr	r5, r5, r0
   1e19c:	subs	r4, r4, #1
   1e1a0:	bne	1e190 <time_struct_buffer@@Base+0x34>
   1e1a4:	bl	13ea0 <_start@@Base+0x1430>
   1e1a8:	vmov.f64	d9, d0
   1e1ac:	mov	r0, r6
   1e1b0:	bl	227ac <flatcc_builder_get_buffer_size@@Base>
   1e1b4:	mov	r4, r0
   1e1b8:	cmp	r5, #0
   1e1bc:	bne	1e200 <time_struct_buffer@@Base+0xa4>
   1e1c0:	movw	r3, #31592	; 0x7b68
   1e1c4:	movt	r3, #2
   1e1c8:	movw	r2, #16960	; 0x4240
   1e1cc:	movt	r2, #15
   1e1d0:	mov	r1, r4
   1e1d4:	vmov.f64	d1, d9
   1e1d8:	vmov.f64	d0, d8
   1e1dc:	movw	r0, #31644	; 0x7b9c
   1e1e0:	movt	r0, #2
   1e1e4:	bl	12b70 <_start@@Base+0x100>
   1e1e8:	mov	r0, r5
   1e1ec:	vpop	{d8-d9}
   1e1f0:	ldrd	r4, [sp]
   1e1f4:	ldr	r6, [sp, #8]
   1e1f8:	add	sp, sp, #12
   1e1fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e200:	movw	r0, #31624	; 0x7b88
   1e204:	movt	r0, #2
   1e208:	bl	129c8 <puts@plt>
   1e20c:	b	1e1c0 <time_struct_buffer@@Base+0x64>

0001e210 <main@@Base>:
   1e210:	str	r4, [sp, #-8]!
   1e214:	str	lr, [sp, #4]
   1e218:	sub	sp, sp, #232	; 0xe8
   1e21c:	mov	r0, sp
   1e220:	bl	1ec54 <flatcc_builder_init@@Base>
   1e224:	movw	r0, #31692	; 0x7bcc
   1e228:	movt	r0, #2
   1e22c:	bl	129c8 <puts@plt>
   1e230:	mov	r0, sp
   1e234:	bl	15364 <test_table_with_emptystruct@@Base>
   1e238:	cmp	r0, #0
   1e23c:	bne	1e39c <main@@Base+0x18c>
   1e240:	mov	r0, sp
   1e244:	bl	14dd8 <test_empty_monster@@Base>
   1e248:	cmp	r0, #0
   1e24c:	bne	1e3b0 <main@@Base+0x1a0>
   1e250:	mov	r0, sp
   1e254:	bl	16b90 <test_monster@@Base>
   1e258:	cmp	r0, #0
   1e25c:	bne	1e3c4 <main@@Base+0x1b4>
   1e260:	mov	r0, sp
   1e264:	bl	16c40 <test_monster_with_size@@Base>
   1e268:	cmp	r0, #0
   1e26c:	bne	1e3d8 <main@@Base+0x1c8>
   1e270:	mov	r0, sp
   1e274:	bl	16d44 <test_string@@Base>
   1e278:	cmp	r0, #0
   1e27c:	bne	1e3ec <main@@Base+0x1dc>
   1e280:	mov	r0, sp
   1e284:	bl	1d7a4 <test_struct_buffer@@Base>
   1e288:	cmp	r0, #0
   1e28c:	bne	1e400 <main@@Base+0x1f0>
   1e290:	mov	r0, sp
   1e294:	bl	14f68 <test_typed_empty_monster@@Base>
   1e298:	cmp	r0, #0
   1e29c:	bne	1e414 <main@@Base+0x204>
   1e2a0:	mov	r0, sp
   1e2a4:	bl	1548c <test_typed_table_with_emptystruct@@Base>
   1e2a8:	cmp	r0, #0
   1e2ac:	bne	1e428 <main@@Base+0x218>
   1e2b0:	mov	r0, sp
   1e2b4:	bl	1d9e8 <test_typed_struct_buffer@@Base>
   1e2b8:	cmp	r0, #0
   1e2bc:	bne	1e43c <main@@Base+0x22c>
   1e2c0:	mov	r0, sp
   1e2c4:	bl	1a818 <test_clone_slice@@Base>
   1e2c8:	cmp	r0, #0
   1e2cc:	bne	1e450 <main@@Base+0x240>
   1e2d0:	mov	r0, sp
   1e2d4:	bl	1c8e0 <test_add_set_defaults@@Base>
   1e2d8:	cmp	r0, #0
   1e2dc:	bne	1e464 <main@@Base+0x254>
   1e2e0:	mov	r0, sp
   1e2e4:	bl	1b338 <test_create_add_field@@Base>
   1e2e8:	cmp	r0, #0
   1e2ec:	bne	1e478 <main@@Base+0x268>
   1e2f0:	mov	r0, sp
   1e2f4:	bl	1b620 <test_union_vector@@Base>
   1e2f8:	cmp	r0, #0
   1e2fc:	bne	1e48c <main@@Base+0x27c>
   1e300:	mov	r0, sp
   1e304:	bl	1a1fc <test_basic_sort@@Base>
   1e308:	cmp	r0, #0
   1e30c:	bne	1e4a0 <main@@Base+0x290>
   1e310:	mov	r0, sp
   1e314:	bl	16fb4 <test_sort_find@@Base>
   1e318:	cmp	r0, #0
   1e31c:	bne	1e4b4 <main@@Base+0x2a4>
   1e320:	mov	r0, sp
   1e324:	bl	18894 <test_scan@@Base>
   1e328:	cmp	r0, #0
   1e32c:	bne	1e4c8 <main@@Base+0x2b8>
   1e330:	mov	r0, sp
   1e334:	bl	1cc8c <test_nested_buffer@@Base>
   1e338:	cmp	r0, #0
   1e33c:	bne	1e4dc <main@@Base+0x2cc>
   1e340:	mov	r0, sp
   1e344:	bl	1cfec <test_nested_buffer_first@@Base>
   1e348:	cmp	r0, #0
   1e34c:	bne	1e4f0 <main@@Base+0x2e0>
   1e350:	mov	r0, sp
   1e354:	bl	1d34c <test_nested_buffer_using_nest@@Base>
   1e358:	cmp	r0, #0
   1e35c:	bne	1e504 <main@@Base+0x2f4>
   1e360:	mov	r0, sp
   1e364:	bl	14860 <test_type_aliases@@Base>
   1e368:	cmp	r0, #0
   1e36c:	bne	1e518 <main@@Base+0x308>
   1e370:	mov	r0, sp
   1e374:	bl	1bc10 <test_mixed_type_union@@Base>
   1e378:	subs	r4, r0, #0
   1e37c:	bne	1e52c <main@@Base+0x31c>
   1e380:	mov	r0, sp
   1e384:	bl	1ee38 <flatcc_builder_clear@@Base>
   1e388:	mov	r0, r4
   1e38c:	add	sp, sp, #232	; 0xe8
   1e390:	ldr	r4, [sp]
   1e394:	add	sp, sp, #4
   1e398:	pop	{pc}		; (ldr pc, [sp], #4)
   1e39c:	movw	r0, #31720	; 0x7be8
   1e3a0:	movt	r0, #2
   1e3a4:	bl	129c8 <puts@plt>
   1e3a8:	mvn	r4, #0
   1e3ac:	b	1e388 <main@@Base+0x178>
   1e3b0:	movw	r0, #31720	; 0x7be8
   1e3b4:	movt	r0, #2
   1e3b8:	bl	129c8 <puts@plt>
   1e3bc:	mvn	r4, #0
   1e3c0:	b	1e388 <main@@Base+0x178>
   1e3c4:	movw	r0, #31720	; 0x7be8
   1e3c8:	movt	r0, #2
   1e3cc:	bl	129c8 <puts@plt>
   1e3d0:	mvn	r4, #0
   1e3d4:	b	1e388 <main@@Base+0x178>
   1e3d8:	movw	r0, #31720	; 0x7be8
   1e3dc:	movt	r0, #2
   1e3e0:	bl	129c8 <puts@plt>
   1e3e4:	mvn	r4, #0
   1e3e8:	b	1e388 <main@@Base+0x178>
   1e3ec:	movw	r0, #31720	; 0x7be8
   1e3f0:	movt	r0, #2
   1e3f4:	bl	129c8 <puts@plt>
   1e3f8:	mvn	r4, #0
   1e3fc:	b	1e388 <main@@Base+0x178>
   1e400:	movw	r0, #31720	; 0x7be8
   1e404:	movt	r0, #2
   1e408:	bl	129c8 <puts@plt>
   1e40c:	mvn	r4, #0
   1e410:	b	1e388 <main@@Base+0x178>
   1e414:	movw	r0, #31720	; 0x7be8
   1e418:	movt	r0, #2
   1e41c:	bl	129c8 <puts@plt>
   1e420:	mvn	r4, #0
   1e424:	b	1e388 <main@@Base+0x178>
   1e428:	movw	r0, #31720	; 0x7be8
   1e42c:	movt	r0, #2
   1e430:	bl	129c8 <puts@plt>
   1e434:	mvn	r4, #0
   1e438:	b	1e388 <main@@Base+0x178>
   1e43c:	movw	r0, #31720	; 0x7be8
   1e440:	movt	r0, #2
   1e444:	bl	129c8 <puts@plt>
   1e448:	mvn	r4, #0
   1e44c:	b	1e388 <main@@Base+0x178>
   1e450:	movw	r0, #31720	; 0x7be8
   1e454:	movt	r0, #2
   1e458:	bl	129c8 <puts@plt>
   1e45c:	mvn	r4, #0
   1e460:	b	1e388 <main@@Base+0x178>
   1e464:	movw	r0, #31720	; 0x7be8
   1e468:	movt	r0, #2
   1e46c:	bl	129c8 <puts@plt>
   1e470:	mvn	r4, #0
   1e474:	b	1e388 <main@@Base+0x178>
   1e478:	movw	r0, #31720	; 0x7be8
   1e47c:	movt	r0, #2
   1e480:	bl	129c8 <puts@plt>
   1e484:	mvn	r4, #0
   1e488:	b	1e388 <main@@Base+0x178>
   1e48c:	movw	r0, #31720	; 0x7be8
   1e490:	movt	r0, #2
   1e494:	bl	129c8 <puts@plt>
   1e498:	mvn	r4, #0
   1e49c:	b	1e388 <main@@Base+0x178>
   1e4a0:	movw	r0, #31720	; 0x7be8
   1e4a4:	movt	r0, #2
   1e4a8:	bl	129c8 <puts@plt>
   1e4ac:	mvn	r4, #0
   1e4b0:	b	1e388 <main@@Base+0x178>
   1e4b4:	movw	r0, #31720	; 0x7be8
   1e4b8:	movt	r0, #2
   1e4bc:	bl	129c8 <puts@plt>
   1e4c0:	mvn	r4, #0
   1e4c4:	b	1e388 <main@@Base+0x178>
   1e4c8:	movw	r0, #31720	; 0x7be8
   1e4cc:	movt	r0, #2
   1e4d0:	bl	129c8 <puts@plt>
   1e4d4:	mvn	r4, #0
   1e4d8:	b	1e388 <main@@Base+0x178>
   1e4dc:	movw	r0, #31720	; 0x7be8
   1e4e0:	movt	r0, #2
   1e4e4:	bl	129c8 <puts@plt>
   1e4e8:	mvn	r4, #0
   1e4ec:	b	1e388 <main@@Base+0x178>
   1e4f0:	movw	r0, #31720	; 0x7be8
   1e4f4:	movt	r0, #2
   1e4f8:	bl	129c8 <puts@plt>
   1e4fc:	mvn	r4, #0
   1e500:	b	1e388 <main@@Base+0x178>
   1e504:	movw	r0, #31720	; 0x7be8
   1e508:	movt	r0, #2
   1e50c:	bl	129c8 <puts@plt>
   1e510:	mvn	r4, #0
   1e514:	b	1e388 <main@@Base+0x178>
   1e518:	movw	r0, #31720	; 0x7be8
   1e51c:	movt	r0, #2
   1e520:	bl	129c8 <puts@plt>
   1e524:	mvn	r4, #0
   1e528:	b	1e388 <main@@Base+0x178>
   1e52c:	movw	r0, #31720	; 0x7be8
   1e530:	movt	r0, #2
   1e534:	bl	129c8 <puts@plt>
   1e538:	mvn	r4, #0
   1e53c:	b	1e388 <main@@Base+0x178>
   1e540:	strd	r4, [sp, #-16]!
   1e544:	str	r6, [sp, #8]
   1e548:	str	lr, [sp, #12]
   1e54c:	sub	sp, sp, #8
   1e550:	mov	r4, r0
   1e554:	mov	r5, r2
   1e558:	ldr	r2, [r0, #28]
   1e55c:	mov	r3, #1
   1e560:	str	r3, [sp]
   1e564:	ldr	r6, [r0, #48]	; 0x30
   1e568:	add	r2, r1, r2
   1e56c:	add	r1, r0, #60	; 0x3c
   1e570:	ldr	r0, [r0, #40]	; 0x28
   1e574:	blx	r6
   1e578:	cmp	r0, #0
   1e57c:	bne	1e5c0 <main@@Base+0x3b0>
   1e580:	ldr	r1, [r4, #28]
   1e584:	ldr	r2, [r4, #60]	; 0x3c
   1e588:	add	r2, r2, r1
   1e58c:	str	r2, [r4, #16]
   1e590:	ldr	r3, [r4, #64]	; 0x40
   1e594:	sub	r3, r3, r1
   1e598:	cmp	r3, r5
   1e59c:	movcs	r3, r5
   1e5a0:	str	r3, [r4, #24]
   1e5a4:	ldr	r3, [r4, #32]
   1e5a8:	str	r5, [r3, #4]
   1e5ac:	add	sp, sp, #8
   1e5b0:	ldrd	r4, [sp]
   1e5b4:	ldr	r6, [sp, #8]
   1e5b8:	add	sp, sp, #12
   1e5bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e5c0:	mvn	r0, #0
   1e5c4:	b	1e5ac <main@@Base+0x39c>

0001e5c8 <flatcc_builder_default_alloc@@Base>:
   1e5c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1e5cc:	strd	r6, [sp, #8]
   1e5d0:	str	r8, [sp, #16]
   1e5d4:	str	lr, [sp, #20]
   1e5d8:	mov	r5, r1
   1e5dc:	cmp	r2, #0
   1e5e0:	beq	1e618 <flatcc_builder_default_alloc@@Base+0x50>
   1e5e4:	mov	r6, r3
   1e5e8:	ldr	r3, [sp, #24]
   1e5ec:	sub	r3, r3, #1
   1e5f0:	cmp	r3, #6
   1e5f4:	ldrls	pc, [pc, r3, lsl #2]
   1e5f8:	b	1e6c4 <flatcc_builder_default_alloc@@Base+0xfc>
   1e5fc:	andeq	lr, r1, r4, asr #12
   1e600:	andeq	lr, r1, r4, asr #13
   1e604:	andeq	lr, r1, r4, asr #13
   1e608:	andeq	lr, r1, ip, lsr r6
   1e60c:	andeq	lr, r1, ip, asr #13
   1e610:	andeq	lr, r1, r4, asr #13
   1e614:			; <UNDEFINED> instruction: 0x0001e6bc
   1e618:	ldr	r0, [r1]
   1e61c:	cmp	r0, #0
   1e620:	moveq	r0, #0
   1e624:	beq	1e6a8 <flatcc_builder_default_alloc@@Base+0xe0>
   1e628:	bl	12980 <free@plt>
   1e62c:	mov	r0, #0
   1e630:	str	r0, [r5]
   1e634:	str	r0, [r5, #4]
   1e638:	b	1e6a8 <flatcc_builder_default_alloc@@Base+0xe0>
   1e63c:	mov	r4, #288	; 0x120
   1e640:	b	1e648 <flatcc_builder_default_alloc@@Base+0x80>
   1e644:	mov	r4, #256	; 0x100
   1e648:	cmp	r4, r2
   1e64c:	bcs	1e65c <flatcc_builder_default_alloc@@Base+0x94>
   1e650:	lsl	r4, r4, #1
   1e654:	cmp	r2, r4
   1e658:	bhi	1e650 <flatcc_builder_default_alloc@@Base+0x88>
   1e65c:	ldr	r3, [r5, #4]
   1e660:	cmp	r3, r2
   1e664:	bcc	1e674 <flatcc_builder_default_alloc@@Base+0xac>
   1e668:	cmp	r4, r3, lsr #1
   1e66c:	movls	r0, #0
   1e670:	bls	1e6a8 <flatcc_builder_default_alloc@@Base+0xe0>
   1e674:	mov	r1, r4
   1e678:	ldr	r0, [r5]
   1e67c:	bl	129a4 <realloc@plt>
   1e680:	subs	r7, r0, #0
   1e684:	beq	1e6e8 <flatcc_builder_default_alloc@@Base+0x120>
   1e688:	cmp	r6, #0
   1e68c:	beq	1e69c <flatcc_builder_default_alloc@@Base+0xd4>
   1e690:	ldr	r0, [r5, #4]
   1e694:	cmp	r0, r4
   1e698:	bcc	1e6d4 <flatcc_builder_default_alloc@@Base+0x10c>
   1e69c:	str	r7, [r5]
   1e6a0:	str	r4, [r5, #4]
   1e6a4:	mov	r0, #0
   1e6a8:	ldrd	r4, [sp]
   1e6ac:	ldrd	r6, [sp, #8]
   1e6b0:	ldr	r8, [sp, #16]
   1e6b4:	add	sp, sp, #20
   1e6b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e6bc:	mov	r4, #64	; 0x40
   1e6c0:	b	1e648 <flatcc_builder_default_alloc@@Base+0x80>
   1e6c4:	mov	r4, #32
   1e6c8:	b	1e648 <flatcc_builder_default_alloc@@Base+0x80>
   1e6cc:	mov	r4, r2
   1e6d0:	b	1e65c <flatcc_builder_default_alloc@@Base+0x94>
   1e6d4:	sub	r2, r4, r0
   1e6d8:	mov	r1, #0
   1e6dc:	add	r0, r7, r0
   1e6e0:	bl	12a1c <memset@plt>
   1e6e4:	b	1e69c <flatcc_builder_default_alloc@@Base+0xd4>
   1e6e8:	mvn	r0, #0
   1e6ec:	b	1e6a8 <flatcc_builder_default_alloc@@Base+0xe0>
   1e6f0:	cmp	r2, #0
   1e6f4:	bne	1e704 <flatcc_builder_default_alloc@@Base+0x13c>
   1e6f8:	ldrh	r2, [r0, #132]	; 0x84
   1e6fc:	cmp	r2, #0
   1e700:	moveq	r2, #1
   1e704:	ldrh	ip, [r1]
   1e708:	cmp	ip, #3
   1e70c:	movls	ip, #4
   1e710:	strhls	ip, [r1]
   1e714:	ldrh	ip, [r1]
   1e718:	cmp	ip, r2
   1e71c:	strhcc	r2, [r1]
   1e720:	cmp	r3, #0
   1e724:	bne	1e804 <flatcc_builder_default_alloc@@Base+0x23c>
   1e728:	strd	r4, [sp, #-12]!
   1e72c:	str	lr, [sp, #8]
   1e730:	sub	sp, sp, #84	; 0x54
   1e734:	ldr	r4, [r0, #140]	; 0x8c
   1e738:	sub	r2, r2, #1
   1e73c:	ands	r2, r2, r4
   1e740:	bne	1e758 <flatcc_builder_default_alloc@@Base+0x190>
   1e744:	mov	r0, #0
   1e748:	add	sp, sp, #84	; 0x54
   1e74c:	ldrd	r4, [sp]
   1e750:	add	sp, sp, #8
   1e754:	pop	{pc}		; (ldr pc, [sp], #4)
   1e758:	str	r2, [sp, #8]
   1e75c:	movw	r3, #31732	; 0x7bf4
   1e760:	movt	r3, #2
   1e764:	str	r3, [sp, #16]
   1e768:	str	r2, [sp, #20]
   1e76c:	mov	r3, #1
   1e770:	str	r3, [sp, #12]
   1e774:	add	r3, r4, r2
   1e778:	str	r3, [r0, #140]	; 0x8c
   1e77c:	cmp	r4, r3
   1e780:	bgt	1e7cc <flatcc_builder_default_alloc@@Base+0x204>
   1e784:	str	r2, [sp]
   1e788:	ldr	r5, [r0, #44]	; 0x2c
   1e78c:	mov	r3, r4
   1e790:	mov	r2, #1
   1e794:	add	r1, sp, #16
   1e798:	ldr	r0, [r0, #36]	; 0x24
   1e79c:	blx	r5
   1e7a0:	cmp	r0, #0
   1e7a4:	bne	1e7e8 <flatcc_builder_default_alloc@@Base+0x220>
   1e7a8:	cmn	r4, #1
   1e7ac:	bne	1e744 <flatcc_builder_default_alloc@@Base+0x17c>
   1e7b0:	ldr	r3, [pc, #84]	; 1e80c <flatcc_builder_default_alloc@@Base+0x244>
   1e7b4:	movw	r2, #702	; 0x2be
   1e7b8:	movw	r1, #33604	; 0x8344
   1e7bc:	movt	r1, #2
   1e7c0:	movw	r0, #33688	; 0x8398
   1e7c4:	movt	r0, #2
   1e7c8:	bl	12a64 <__assert_fail@plt>
   1e7cc:	ldr	r3, [pc, #60]	; 1e810 <flatcc_builder_default_alloc@@Base+0x248>
   1e7d0:	movw	r2, #673	; 0x2a1
   1e7d4:	movw	r1, #33604	; 0x8344
   1e7d8:	movt	r1, #2
   1e7dc:	movw	r0, #33688	; 0x8398
   1e7e0:	movt	r0, #2
   1e7e4:	bl	12a64 <__assert_fail@plt>
   1e7e8:	ldr	r3, [pc, #32]	; 1e810 <flatcc_builder_default_alloc@@Base+0x248>
   1e7ec:	movw	r2, #677	; 0x2a5
   1e7f0:	movw	r1, #33604	; 0x8344
   1e7f4:	movt	r1, #2
   1e7f8:	movw	r0, #33688	; 0x8398
   1e7fc:	movt	r0, #2
   1e800:	bl	12a64 <__assert_fail@plt>
   1e804:	mov	r0, #0
   1e808:	bx	lr
   1e80c:	andeq	r7, r2, r0, lsl #28
   1e810:	strdeq	r7, [r2], -r4
   1e814:	strd	r4, [sp, #-20]!	; 0xffffffec
   1e818:	strd	r6, [sp, #8]
   1e81c:	str	lr, [sp, #16]
   1e820:	sub	sp, sp, #12
   1e824:	mov	r4, r0
   1e828:	mov	r6, r1
   1e82c:	ldr	r3, [r0, #156]	; 0x9c
   1e830:	add	r2, r3, #1
   1e834:	str	r2, [r0, #156]	; 0x9c
   1e838:	ldr	r1, [r0, #160]	; 0xa0
   1e83c:	cmp	r2, r1
   1e840:	ble	1e8f8 <flatcc_builder_default_alloc@@Base+0x330>
   1e844:	ldr	r1, [r0, #176]	; 0xb0
   1e848:	cmp	r2, r1
   1e84c:	cmpgt	r1, #0
   1e850:	bgt	1e96c <flatcc_builder_default_alloc@@Base+0x3a4>
   1e854:	add	r3, r3, r3, lsl #3
   1e858:	lsl	r5, r3, #2
   1e85c:	add	r2, r5, #36	; 0x24
   1e860:	ldr	r3, [r0, #88]	; 0x58
   1e864:	cmp	r2, r3
   1e868:	bls	1e890 <flatcc_builder_default_alloc@@Base+0x2c8>
   1e86c:	mov	r3, #4
   1e870:	str	r3, [sp]
   1e874:	ldr	r7, [r0, #48]	; 0x30
   1e878:	mov	r3, #0
   1e87c:	add	r1, r0, #84	; 0x54
   1e880:	ldr	r0, [r0, #40]	; 0x28
   1e884:	blx	r7
   1e888:	cmp	r0, #0
   1e88c:	bne	1e8dc <flatcc_builder_default_alloc@@Base+0x314>
   1e890:	ldr	r3, [r4, #84]	; 0x54
   1e894:	add	r5, r3, r5
   1e898:	str	r5, [r4, #32]
   1e89c:	cmp	r5, #0
   1e8a0:	beq	1e974 <flatcc_builder_default_alloc@@Base+0x3ac>
   1e8a4:	ldr	r3, [r4, #88]	; 0x58
   1e8a8:	movw	r2, #36409	; 0x8e39
   1e8ac:	movt	r2, #14563	; 0x38e3
   1e8b0:	umull	r2, r3, r2, r3
   1e8b4:	lsr	r3, r3, #3
   1e8b8:	ldr	r2, [r4, #176]	; 0xb0
   1e8bc:	cmp	r2, #0
   1e8c0:	cmpgt	r3, r2
   1e8c4:	movgt	r1, #1
   1e8c8:	movle	r1, #0
   1e8cc:	cmp	r1, #0
   1e8d0:	movne	r3, r2
   1e8d4:	str	r3, [r4, #160]	; 0xa0
   1e8d8:	b	1e904 <flatcc_builder_default_alloc@@Base+0x33c>
   1e8dc:	ldr	r3, [pc, #152]	; 1e97c <flatcc_builder_default_alloc@@Base+0x3b4>
   1e8e0:	mov	r2, #308	; 0x134
   1e8e4:	movw	r1, #33604	; 0x8344
   1e8e8:	movt	r1, #2
   1e8ec:	movw	r0, #33688	; 0x8398
   1e8f0:	movt	r0, #2
   1e8f4:	bl	12a64 <__assert_fail@plt>
   1e8f8:	ldr	r3, [r0, #32]
   1e8fc:	add	r3, r3, #36	; 0x24
   1e900:	str	r3, [r0, #32]
   1e904:	ldr	r3, [r4, #32]
   1e908:	ldr	r2, [r4, #20]
   1e90c:	str	r2, [r3, #8]
   1e910:	ldr	r3, [r4, #32]
   1e914:	ldrh	r2, [r4, #130]	; 0x82
   1e918:	strh	r2, [r3, #12]
   1e91c:	strh	r6, [r4, #130]	; 0x82
   1e920:	ldr	r3, [r4, #32]
   1e924:	ldr	r2, [r4, #28]
   1e928:	str	r2, [r3]
   1e92c:	ldr	r3, [r4, #32]
   1e930:	mvn	r2, #3
   1e934:	str	r2, [r3, #4]
   1e938:	ldr	r3, [r4, #28]
   1e93c:	ldr	r2, [r4, #20]
   1e940:	add	r3, r3, r2
   1e944:	add	r3, r3, #7
   1e948:	bic	r3, r3, #7
   1e94c:	str	r3, [r4, #28]
   1e950:	mov	r0, #0
   1e954:	str	r0, [r4, #20]
   1e958:	add	sp, sp, #12
   1e95c:	ldrd	r4, [sp]
   1e960:	ldrd	r6, [sp, #8]
   1e964:	add	sp, sp, #16
   1e968:	pop	{pc}		; (ldr pc, [sp], #4)
   1e96c:	mvn	r0, #0
   1e970:	b	1e958 <flatcc_builder_default_alloc@@Base+0x390>
   1e974:	mvn	r0, #0
   1e978:	b	1e958 <flatcc_builder_default_alloc@@Base+0x390>
   1e97c:	andeq	r7, r2, r0, lsl lr
   1e980:	strd	r4, [sp, #-16]!
   1e984:	str	r6, [sp, #8]
   1e988:	str	lr, [sp, #12]
   1e98c:	sub	sp, sp, #88	; 0x58
   1e990:	cmn	r2, #-1073741823	; 0xc0000001
   1e994:	bhi	1eb78 <flatcc_builder_default_alloc@@Base+0x5b0>
   1e998:	ldrh	ip, [r0, #128]	; 0x80
   1e99c:	cmp	ip, #3
   1e9a0:	movls	ip, #4
   1e9a4:	strhls	ip, [r0, #128]	; 0x80
   1e9a8:	str	r2, [sp, #84]	; 0x54
   1e9ac:	ldr	lr, [r0, #136]	; 0x88
   1e9b0:	and	ip, lr, #3
   1e9b4:	mov	r4, #4
   1e9b8:	str	r4, [sp, #12]
   1e9bc:	add	r5, sp, #84	; 0x54
   1e9c0:	str	r5, [sp, #20]
   1e9c4:	str	r4, [sp, #24]
   1e9c8:	mov	r4, #1
   1e9cc:	str	r4, [sp, #16]
   1e9d0:	lsls	r4, r2, #2
   1e9d4:	beq	1e9f0 <flatcc_builder_default_alloc@@Base+0x428>
   1e9d8:	add	r5, r4, #4
   1e9dc:	str	r5, [sp, #12]
   1e9e0:	str	r1, [sp, #28]
   1e9e4:	str	r4, [sp, #32]
   1e9e8:	mov	r4, #2
   1e9ec:	str	r4, [sp, #16]
   1e9f0:	cmp	ip, #0
   1e9f4:	beq	1ea28 <flatcc_builder_default_alloc@@Base+0x460>
   1e9f8:	ldr	r4, [sp, #12]
   1e9fc:	add	r4, r4, ip
   1ea00:	str	r4, [sp, #12]
   1ea04:	ldr	r4, [sp, #16]
   1ea08:	add	r4, r4, #1
   1ea0c:	add	r5, sp, #88	; 0x58
   1ea10:	add	r6, r5, r4, lsl #3
   1ea14:	movw	r5, #31732	; 0x7bf4
   1ea18:	movt	r5, #2
   1ea1c:	str	r5, [r6, #-76]	; 0xffffffb4
   1ea20:	str	ip, [r6, #-72]	; 0xffffffb8
   1ea24:	str	r4, [sp, #16]
   1ea28:	mov	r5, r0
   1ea2c:	ldr	r6, [sp, #12]
   1ea30:	cmp	r2, #0
   1ea34:	beq	1eaf0 <flatcc_builder_default_alloc@@Base+0x528>
   1ea38:	mov	ip, r3
   1ea3c:	add	r4, r2, r3
   1ea40:	mov	r2, r1
   1ea44:	add	r1, r1, r6
   1ea48:	sub	r0, r1, lr
   1ea4c:	b	1ea70 <flatcc_builder_default_alloc@@Base+0x4a8>
   1ea50:	cmp	r3, #0
   1ea54:	beq	1ead4 <flatcc_builder_default_alloc@@Base+0x50c>
   1ea58:	ldrb	r1, [ip]
   1ea5c:	cmp	r1, #0
   1ea60:	bne	1eab8 <flatcc_builder_default_alloc@@Base+0x4f0>
   1ea64:	add	ip, ip, #1
   1ea68:	cmp	ip, r4
   1ea6c:	beq	1eaf0 <flatcc_builder_default_alloc@@Base+0x528>
   1ea70:	ldr	r1, [r2], #4
   1ea74:	cmp	r1, #0
   1ea78:	beq	1ea50 <flatcc_builder_default_alloc@@Base+0x488>
   1ea7c:	sub	lr, r0, r2
   1ea80:	add	r1, lr, r1
   1ea84:	str	r1, [r2, #-4]
   1ea88:	cmp	r3, #0
   1ea8c:	beq	1ea64 <flatcc_builder_default_alloc@@Base+0x49c>
   1ea90:	ldrb	r1, [ip]
   1ea94:	cmp	r1, #0
   1ea98:	bne	1ea64 <flatcc_builder_default_alloc@@Base+0x49c>
   1ea9c:	ldr	r3, [pc, #220]	; 1eb80 <flatcc_builder_default_alloc@@Base+0x5b8>
   1eaa0:	movw	r2, #1457	; 0x5b1
   1eaa4:	movw	r1, #33604	; 0x8344
   1eaa8:	movt	r1, #2
   1eaac:	movw	r0, #33676	; 0x838c
   1eab0:	movt	r0, #2
   1eab4:	bl	12a64 <__assert_fail@plt>
   1eab8:	ldr	r3, [pc, #192]	; 1eb80 <flatcc_builder_default_alloc@@Base+0x5b8>
   1eabc:	movw	r2, #1461	; 0x5b5
   1eac0:	movw	r1, #33604	; 0x8344
   1eac4:	movt	r1, #2
   1eac8:	movw	r0, #33692	; 0x839c
   1eacc:	movt	r0, #2
   1ead0:	bl	12a64 <__assert_fail@plt>
   1ead4:	ldr	r3, [pc, #164]	; 1eb80 <flatcc_builder_default_alloc@@Base+0x5b8>
   1ead8:	movw	r2, #1463	; 0x5b7
   1eadc:	movw	r1, #33604	; 0x8344
   1eae0:	movt	r1, #2
   1eae4:	movw	r0, #33688	; 0x8398
   1eae8:	movt	r0, #2
   1eaec:	bl	12a64 <__assert_fail@plt>
   1eaf0:	ldr	r3, [r5, #136]	; 0x88
   1eaf4:	sub	r4, r3, r6
   1eaf8:	cmp	r3, r4
   1eafc:	ble	1eb40 <flatcc_builder_default_alloc@@Base+0x578>
   1eb00:	str	r6, [sp]
   1eb04:	ldr	r6, [r5, #44]	; 0x2c
   1eb08:	mov	r3, r4
   1eb0c:	ldr	r2, [sp, #16]
   1eb10:	add	r1, sp, #20
   1eb14:	ldr	r0, [r5, #36]	; 0x24
   1eb18:	blx	r6
   1eb1c:	cmp	r0, #0
   1eb20:	streq	r4, [r5, #136]	; 0x88
   1eb24:	bne	1eb5c <flatcc_builder_default_alloc@@Base+0x594>
   1eb28:	mov	r0, r4
   1eb2c:	add	sp, sp, #88	; 0x58
   1eb30:	ldrd	r4, [sp]
   1eb34:	ldr	r6, [sp, #8]
   1eb38:	add	sp, sp, #12
   1eb3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1eb40:	ldr	r3, [pc, #60]	; 1eb84 <flatcc_builder_default_alloc@@Base+0x5bc>
   1eb44:	movw	r2, #647	; 0x287
   1eb48:	movw	r1, #33604	; 0x8344
   1eb4c:	movt	r1, #2
   1eb50:	movw	r0, #33688	; 0x8398
   1eb54:	movt	r0, #2
   1eb58:	bl	12a64 <__assert_fail@plt>
   1eb5c:	ldr	r3, [pc, #32]	; 1eb84 <flatcc_builder_default_alloc@@Base+0x5bc>
   1eb60:	movw	r2, #651	; 0x28b
   1eb64:	movw	r1, #33604	; 0x8344
   1eb68:	movt	r1, #2
   1eb6c:	movw	r0, #33688	; 0x8398
   1eb70:	movt	r0, #2
   1eb74:	bl	12a64 <__assert_fail@plt>
   1eb78:	mov	r4, #0
   1eb7c:	b	1eb28 <flatcc_builder_default_alloc@@Base+0x560>
   1eb80:	andeq	r7, r2, r0, lsr #28
   1eb84:	andeq	r7, r2, r0, asr #28

0001eb88 <flatcc_builder_flush_vtable_cache@@Base>:
   1eb88:	ldr	r3, [r0, #116]	; 0x74
   1eb8c:	cmp	r3, #0
   1eb90:	bxeq	lr
   1eb94:	str	r4, [sp, #-8]!
   1eb98:	str	lr, [sp, #4]
   1eb9c:	mov	r4, r0
   1eba0:	ldr	r2, [r0, #96]	; 0x60
   1eba4:	mov	r1, #0
   1eba8:	ldr	r0, [r0, #92]	; 0x5c
   1ebac:	bl	12a1c <memset@plt>
   1ebb0:	mov	r3, #16
   1ebb4:	str	r3, [r4, #124]	; 0x7c
   1ebb8:	mov	r3, #0
   1ebbc:	str	r3, [r4, #120]	; 0x78
   1ebc0:	ldr	r4, [sp]
   1ebc4:	add	sp, sp, #4
   1ebc8:	pop	{pc}		; (ldr pc, [sp], #4)

0001ebcc <flatcc_builder_custom_init@@Base>:
   1ebcc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ebd0:	strd	r6, [sp, #8]
   1ebd4:	str	r8, [sp, #16]
   1ebd8:	str	lr, [sp, #20]
   1ebdc:	mov	r4, r0
   1ebe0:	mov	r6, r1
   1ebe4:	mov	r7, r2
   1ebe8:	mov	r5, r3
   1ebec:	mov	r2, #232	; 0xe8
   1ebf0:	mov	r1, #0
   1ebf4:	bl	12a1c <memset@plt>
   1ebf8:	cmp	r6, #0
   1ebfc:	beq	1ec3c <flatcc_builder_custom_init@@Base+0x70>
   1ec00:	movw	r3, #58824	; 0xe5c8
   1ec04:	movt	r3, #1
   1ec08:	cmp	r5, #0
   1ec0c:	moveq	r5, r3
   1ec10:	ldr	r3, [sp, #24]
   1ec14:	str	r3, [r4, #40]	; 0x28
   1ec18:	str	r5, [r4, #48]	; 0x30
   1ec1c:	str	r7, [r4, #36]	; 0x24
   1ec20:	str	r6, [r4, #44]	; 0x2c
   1ec24:	mov	r0, #0
   1ec28:	ldrd	r4, [sp]
   1ec2c:	ldrd	r6, [sp, #8]
   1ec30:	ldr	r8, [sp, #16]
   1ec34:	add	sp, sp, #20
   1ec38:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec3c:	mov	r3, #1
   1ec40:	str	r3, [r4, #184]	; 0xb8
   1ec44:	add	r7, r4, #188	; 0xbc
   1ec48:	movw	r6, #11416	; 0x2c98
   1ec4c:	movt	r6, #2
   1ec50:	b	1ec00 <flatcc_builder_custom_init@@Base+0x34>

0001ec54 <flatcc_builder_init@@Base>:
   1ec54:	str	r4, [sp, #-8]!
   1ec58:	str	lr, [sp, #4]
   1ec5c:	mov	r4, r0
   1ec60:	mov	r2, #232	; 0xe8
   1ec64:	mov	r1, #0
   1ec68:	bl	12a1c <memset@plt>
   1ec6c:	mov	r3, #1
   1ec70:	str	r3, [r4, #184]	; 0xb8
   1ec74:	movw	r3, #58824	; 0xe5c8
   1ec78:	movt	r3, #1
   1ec7c:	str	r3, [r4, #48]	; 0x30
   1ec80:	add	r3, r4, #188	; 0xbc
   1ec84:	str	r3, [r4, #36]	; 0x24
   1ec88:	movw	r3, #11416	; 0x2c98
   1ec8c:	movt	r3, #2
   1ec90:	str	r3, [r4, #44]	; 0x2c
   1ec94:	mov	r0, #0
   1ec98:	ldr	r4, [sp]
   1ec9c:	add	sp, sp, #4
   1eca0:	pop	{pc}		; (ldr pc, [sp], #4)

0001eca4 <flatcc_builder_custom_reset@@Base>:
   1eca4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1eca8:	strd	r6, [sp, #8]
   1ecac:	strd	r8, [sp, #16]
   1ecb0:	strd	sl, [sp, #24]
   1ecb4:	str	lr, [sp, #32]
   1ecb8:	sub	sp, sp, #12
   1ecbc:	mov	r6, r0
   1ecc0:	mov	fp, r1
   1ecc4:	mov	r9, r2
   1ecc8:	mov	r4, r0
   1eccc:	mov	r5, #0
   1ecd0:	mov	sl, r5
   1ecd4:	mov	r8, #1
   1ecd8:	b	1ecfc <flatcc_builder_custom_reset@@Base+0x58>
   1ecdc:	ldr	r2, [r7, #56]	; 0x38
   1ece0:	mov	r1, sl
   1ece4:	ldr	r0, [r7, #52]	; 0x34
   1ece8:	bl	12a1c <memset@plt>
   1ecec:	add	r5, r5, #1
   1ecf0:	add	r4, r4, #8
   1ecf4:	cmp	r5, #8
   1ecf8:	beq	1ed6c <flatcc_builder_custom_reset@@Base+0xc8>
   1ecfc:	add	r1, r4, #52	; 0x34
   1ed00:	mov	r7, r4
   1ed04:	ldr	r3, [r4, #52]	; 0x34
   1ed08:	cmp	r3, #0
   1ed0c:	beq	1ed44 <flatcc_builder_custom_reset@@Base+0xa0>
   1ed10:	cmp	r5, #5
   1ed14:	cmpne	r9, #0
   1ed18:	beq	1ecdc <flatcc_builder_custom_reset@@Base+0x38>
   1ed1c:	str	r5, [sp]
   1ed20:	mov	r3, r8
   1ed24:	mov	r2, r8
   1ed28:	ldr	r0, [r6, #40]	; 0x28
   1ed2c:	ldr	ip, [r6, #48]	; 0x30
   1ed30:	blx	ip
   1ed34:	cmp	r0, #0
   1ed38:	beq	1ecdc <flatcc_builder_custom_reset@@Base+0x38>
   1ed3c:	mvn	r0, #0
   1ed40:	b	1ede8 <flatcc_builder_custom_reset@@Base+0x144>
   1ed44:	ldr	r3, [r4, #56]	; 0x38
   1ed48:	cmp	r3, #0
   1ed4c:	beq	1ecec <flatcc_builder_custom_reset@@Base+0x48>
   1ed50:	ldr	r3, [pc, #188]	; 1ee14 <flatcc_builder_custom_reset@@Base+0x170>
   1ed54:	movw	r2, #434	; 0x1b2
   1ed58:	movw	r1, #33604	; 0x8344
   1ed5c:	movt	r1, #2
   1ed60:	movw	r0, #33708	; 0x83ac
   1ed64:	movt	r0, #2
   1ed68:	bl	12a64 <__assert_fail@plt>
   1ed6c:	mov	r3, #0
   1ed70:	str	r3, [r6, #120]	; 0x78
   1ed74:	ldr	r3, [r6, #124]	; 0x7c
   1ed78:	cmp	r3, #0
   1ed7c:	movne	r3, #16
   1ed80:	strne	r3, [r6, #124]	; 0x7c
   1ed84:	mov	r3, #0
   1ed88:	strh	r3, [r6, #128]	; 0x80
   1ed8c:	str	r3, [r6, #136]	; 0x88
   1ed90:	str	r3, [r6, #140]	; 0x8c
   1ed94:	str	r3, [r6, #156]	; 0x9c
   1ed98:	str	r3, [r6, #160]	; 0xa0
   1ed9c:	str	r3, [r6, #20]
   1eda0:	str	r3, [r6, #24]
   1eda4:	str	r3, [r6, #148]	; 0x94
   1eda8:	str	r3, [r6, #152]	; 0x98
   1edac:	ldr	r2, [r6, #60]	; 0x3c
   1edb0:	str	r2, [r6, #16]
   1edb4:	ldr	r2, [r6, #76]	; 0x4c
   1edb8:	str	r2, [r6]
   1edbc:	ldr	r2, [r6, #52]	; 0x34
   1edc0:	str	r2, [r6, #4]
   1edc4:	str	r3, [r6, #32]
   1edc8:	cmp	fp, r3
   1edcc:	beq	1eddc <flatcc_builder_custom_reset@@Base+0x138>
   1edd0:	str	r3, [r6, #172]	; 0xac
   1edd4:	str	r3, [r6, #176]	; 0xb0
   1edd8:	str	r3, [r6, #180]	; 0xb4
   1eddc:	ldr	r0, [r6, #184]	; 0xb8
   1ede0:	cmp	r0, #0
   1ede4:	bne	1ee04 <flatcc_builder_custom_reset@@Base+0x160>
   1ede8:	add	sp, sp, #12
   1edec:	ldrd	r4, [sp]
   1edf0:	ldrd	r6, [sp, #8]
   1edf4:	ldrd	r8, [sp, #16]
   1edf8:	ldrd	sl, [sp, #24]
   1edfc:	add	sp, sp, #32
   1ee00:	pop	{pc}		; (ldr pc, [sp], #4)
   1ee04:	add	r0, r6, #188	; 0xbc
   1ee08:	bl	22b40 <flatcc_emitter_reset@@Base>
   1ee0c:	mov	r0, #0
   1ee10:	b	1ede8 <flatcc_builder_custom_reset@@Base+0x144>
   1ee14:	andeq	r7, r2, ip, asr #28

0001ee18 <flatcc_builder_reset@@Base>:
   1ee18:	str	r4, [sp, #-8]!
   1ee1c:	str	lr, [sp, #4]
   1ee20:	mov	r2, #0
   1ee24:	mov	r1, r2
   1ee28:	bl	1eca4 <flatcc_builder_custom_reset@@Base>
   1ee2c:	ldr	r4, [sp]
   1ee30:	add	sp, sp, #4
   1ee34:	pop	{pc}		; (ldr pc, [sp], #4)

0001ee38 <flatcc_builder_clear@@Base>:
   1ee38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ee3c:	strd	r6, [sp, #8]
   1ee40:	str	r8, [sp, #16]
   1ee44:	str	lr, [sp, #20]
   1ee48:	sub	sp, sp, #8
   1ee4c:	mov	r6, r0
   1ee50:	add	r5, r0, #52	; 0x34
   1ee54:	mov	r4, #0
   1ee58:	mov	r8, r4
   1ee5c:	str	r4, [sp]
   1ee60:	ldr	r7, [r6, #48]	; 0x30
   1ee64:	mov	r3, r8
   1ee68:	mov	r2, r8
   1ee6c:	mov	r1, r5
   1ee70:	ldr	r0, [r6, #40]	; 0x28
   1ee74:	blx	r7
   1ee78:	add	r4, r4, #1
   1ee7c:	add	r5, r5, #8
   1ee80:	cmp	r4, #8
   1ee84:	bne	1ee5c <flatcc_builder_clear@@Base+0x24>
   1ee88:	ldr	r3, [r6, #184]	; 0xb8
   1ee8c:	cmp	r3, #0
   1ee90:	bne	1eebc <flatcc_builder_clear@@Base+0x84>
   1ee94:	mov	r2, #232	; 0xe8
   1ee98:	mov	r1, #0
   1ee9c:	mov	r0, r6
   1eea0:	bl	12a1c <memset@plt>
   1eea4:	add	sp, sp, #8
   1eea8:	ldrd	r4, [sp]
   1eeac:	ldrd	r6, [sp, #8]
   1eeb0:	ldr	r8, [sp, #16]
   1eeb4:	add	sp, sp, #20
   1eeb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1eebc:	add	r0, r6, #188	; 0xbc
   1eec0:	bl	22c1c <flatcc_emitter_clear@@Base>
   1eec4:	b	1ee94 <flatcc_builder_clear@@Base+0x5c>

0001eec8 <flatcc_builder_enter_user_frame_ptr@@Base>:
   1eec8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1eecc:	strd	r6, [sp, #8]
   1eed0:	str	r8, [sp, #16]
   1eed4:	str	lr, [sp, #20]
   1eed8:	sub	sp, sp, #8
   1eedc:	mov	r4, r0
   1eee0:	add	r5, r1, #3
   1eee4:	bic	r5, r5, #3
   1eee8:	add	r5, r5, #4
   1eeec:	ldr	r6, [r0, #228]	; 0xe4
   1eef0:	add	r2, r6, r5
   1eef4:	ldr	r3, [r0, #112]	; 0x70
   1eef8:	cmp	r2, r3
   1eefc:	bls	1ef24 <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   1ef00:	mov	r3, #7
   1ef04:	str	r3, [sp]
   1ef08:	ldr	r7, [r0, #48]	; 0x30
   1ef0c:	mov	r3, #0
   1ef10:	add	r1, r0, #108	; 0x6c
   1ef14:	ldr	r0, [r0, #40]	; 0x28
   1ef18:	blx	r7
   1ef1c:	cmp	r0, #0
   1ef20:	bne	1ef7c <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   1ef24:	ldr	r8, [r4, #108]	; 0x6c
   1ef28:	adds	r7, r8, r6
   1ef2c:	moveq	r0, #0
   1ef30:	beq	1ef64 <flatcc_builder_enter_user_frame_ptr@@Base+0x9c>
   1ef34:	mov	r2, r5
   1ef38:	mov	r1, #0
   1ef3c:	mov	r0, r7
   1ef40:	bl	12a1c <memset@plt>
   1ef44:	add	r0, r7, #4
   1ef48:	ldr	r3, [r4, #224]	; 0xe0
   1ef4c:	str	r3, [r8, r6]
   1ef50:	ldr	r1, [r4, #228]	; 0xe4
   1ef54:	add	r3, r1, #4
   1ef58:	str	r3, [r4, #224]	; 0xe0
   1ef5c:	add	r5, r1, r5
   1ef60:	str	r5, [r4, #228]	; 0xe4
   1ef64:	add	sp, sp, #8
   1ef68:	ldrd	r4, [sp]
   1ef6c:	ldrd	r6, [sp, #8]
   1ef70:	ldr	r8, [sp, #16]
   1ef74:	add	sp, sp, #20
   1ef78:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef7c:	ldr	r3, [pc, #20]	; 1ef98 <flatcc_builder_enter_user_frame_ptr@@Base+0xd0>
   1ef80:	mov	r2, #308	; 0x134
   1ef84:	movw	r1, #33604	; 0x8344
   1ef88:	movt	r1, #2
   1ef8c:	movw	r0, #33688	; 0x8398
   1ef90:	movt	r0, #2
   1ef94:	bl	12a64 <__assert_fail@plt>
   1ef98:	andeq	r7, r2, r0, lsl lr

0001ef9c <flatcc_builder_enter_user_frame@@Base>:
   1ef9c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1efa0:	strd	r6, [sp, #8]
   1efa4:	str	lr, [sp, #16]
   1efa8:	sub	sp, sp, #12
   1efac:	mov	r4, r0
   1efb0:	add	r5, r1, #3
   1efb4:	bic	r5, r5, #3
   1efb8:	add	r5, r5, #4
   1efbc:	ldr	r6, [r0, #228]	; 0xe4
   1efc0:	add	r2, r6, r5
   1efc4:	ldr	r3, [r0, #112]	; 0x70
   1efc8:	cmp	r2, r3
   1efcc:	bls	1eff4 <flatcc_builder_enter_user_frame@@Base+0x58>
   1efd0:	mov	r3, #7
   1efd4:	str	r3, [sp]
   1efd8:	ldr	r7, [r0, #48]	; 0x30
   1efdc:	mov	r3, #0
   1efe0:	add	r1, r0, #108	; 0x6c
   1efe4:	ldr	r0, [r0, #40]	; 0x28
   1efe8:	blx	r7
   1efec:	cmp	r0, #0
   1eff0:	bne	1f03c <flatcc_builder_enter_user_frame@@Base+0xa0>
   1eff4:	ldr	r7, [r4, #108]	; 0x6c
   1eff8:	adds	r0, r7, r6
   1effc:	beq	1f028 <flatcc_builder_enter_user_frame@@Base+0x8c>
   1f000:	mov	r2, r5
   1f004:	mov	r1, #0
   1f008:	bl	12a1c <memset@plt>
   1f00c:	ldr	r3, [r4, #224]	; 0xe0
   1f010:	str	r3, [r7, r6]
   1f014:	ldr	r1, [r4, #228]	; 0xe4
   1f018:	add	r0, r1, #4
   1f01c:	str	r0, [r4, #224]	; 0xe0
   1f020:	add	r5, r1, r5
   1f024:	str	r5, [r4, #228]	; 0xe4
   1f028:	add	sp, sp, #12
   1f02c:	ldrd	r4, [sp]
   1f030:	ldrd	r6, [sp, #8]
   1f034:	add	sp, sp, #16
   1f038:	pop	{pc}		; (ldr pc, [sp], #4)
   1f03c:	ldr	r3, [pc, #20]	; 1f058 <flatcc_builder_enter_user_frame@@Base+0xbc>
   1f040:	mov	r2, #308	; 0x134
   1f044:	movw	r1, #33604	; 0x8344
   1f048:	movt	r1, #2
   1f04c:	movw	r0, #33688	; 0x8398
   1f050:	movt	r0, #2
   1f054:	bl	12a64 <__assert_fail@plt>
   1f058:	andeq	r7, r2, r0, lsl lr

0001f05c <flatcc_builder_exit_user_frame@@Base>:
   1f05c:	ldr	r3, [r0, #224]	; 0xe0
   1f060:	cmp	r3, #0
   1f064:	beq	1f088 <flatcc_builder_exit_user_frame@@Base+0x2c>
   1f068:	ldr	r2, [r0, #108]	; 0x6c
   1f06c:	add	r2, r2, r3
   1f070:	sub	r3, r3, #4
   1f074:	str	r3, [r0, #228]	; 0xe4
   1f078:	ldr	r3, [r2, #-4]
   1f07c:	str	r3, [r0, #224]	; 0xe0
   1f080:	mov	r0, r3
   1f084:	bx	lr
   1f088:	str	r4, [sp, #-8]!
   1f08c:	str	lr, [sp, #4]
   1f090:	ldr	r3, [pc, #20]	; 1f0ac <flatcc_builder_exit_user_frame@@Base+0x50>
   1f094:	movw	r2, #542	; 0x21e
   1f098:	movw	r1, #33604	; 0x8344
   1f09c:	movt	r1, #2
   1f0a0:	movw	r0, #33728	; 0x83c0
   1f0a4:	movt	r0, #2
   1f0a8:	bl	12a64 <__assert_fail@plt>
   1f0ac:	andeq	r7, r2, r8, ror #28

0001f0b0 <flatcc_builder_exit_user_frame_at@@Base>:
   1f0b0:	str	r4, [sp, #-8]!
   1f0b4:	str	lr, [sp, #4]
   1f0b8:	ldr	r3, [r0, #224]	; 0xe0
   1f0bc:	cmp	r3, r1
   1f0c0:	bcc	1f0d8 <flatcc_builder_exit_user_frame_at@@Base+0x28>
   1f0c4:	str	r1, [r0, #224]	; 0xe0
   1f0c8:	bl	1f05c <flatcc_builder_exit_user_frame@@Base>
   1f0cc:	ldr	r4, [sp]
   1f0d0:	add	sp, sp, #4
   1f0d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f0d8:	ldr	r3, [pc, #20]	; 1f0f4 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   1f0dc:	movw	r2, #551	; 0x227
   1f0e0:	movw	r1, #33604	; 0x8344
   1f0e4:	movt	r1, #2
   1f0e8:	movw	r0, #33756	; 0x83dc
   1f0ec:	movt	r0, #2
   1f0f0:	bl	12a64 <__assert_fail@plt>
   1f0f4:	andeq	r7, r2, r8, lsl #29

0001f0f8 <flatcc_builder_get_current_user_frame@@Base>:
   1f0f8:	ldr	r0, [r0, #224]	; 0xe0
   1f0fc:	bx	lr

0001f100 <flatcc_builder_get_user_frame_ptr@@Base>:
   1f100:	ldr	r0, [r0, #108]	; 0x6c
   1f104:	add	r0, r0, r1
   1f108:	bx	lr

0001f10c <flatcc_builder_embed_buffer@@Base>:
   1f10c:	strd	r4, [sp, #-16]!
   1f110:	str	r6, [sp, #8]
   1f114:	str	lr, [sp, #12]
   1f118:	sub	sp, sp, #88	; 0x58
   1f11c:	mov	r4, r0
   1f120:	mov	r6, r2
   1f124:	mov	r5, r3
   1f128:	ldr	r3, [r0, #152]	; 0x98
   1f12c:	adds	r3, r3, #0
   1f130:	movne	r3, #1
   1f134:	mov	r2, r1
   1f138:	add	r1, sp, #104	; 0x68
   1f13c:	bl	1e6f0 <flatcc_builder_default_alloc@@Base+0x128>
   1f140:	cmp	r0, #0
   1f144:	bne	1f2a0 <flatcc_builder_embed_buffer@@Base+0x194>
   1f148:	ldr	r3, [sp, #108]	; 0x6c
   1f14c:	and	r3, r3, #2
   1f150:	cmp	r3, #0
   1f154:	movne	r2, #4
   1f158:	moveq	r2, #0
   1f15c:	ldr	r1, [r4, #136]	; 0x88
   1f160:	sub	r3, r1, r5
   1f164:	sub	r2, r3, r2
   1f168:	ldrh	r3, [sp, #104]	; 0x68
   1f16c:	sub	r3, r3, #1
   1f170:	and	r3, r3, r2
   1f174:	add	r2, r5, r3
   1f178:	str	r2, [sp, #84]	; 0x54
   1f17c:	mov	r2, #0
   1f180:	str	r2, [sp, #12]
   1f184:	str	r2, [sp, #16]
   1f188:	ldr	r2, [r4, #152]	; 0x98
   1f18c:	cmp	r2, #0
   1f190:	beq	1f1b0 <flatcc_builder_embed_buffer@@Base+0xa4>
   1f194:	mov	r2, #4
   1f198:	str	r2, [sp, #12]
   1f19c:	add	r0, sp, #84	; 0x54
   1f1a0:	str	r0, [sp, #20]
   1f1a4:	str	r2, [sp, #24]
   1f1a8:	mov	r2, #1
   1f1ac:	str	r2, [sp, #16]
   1f1b0:	cmp	r5, #0
   1f1b4:	beq	1f1e0 <flatcc_builder_embed_buffer@@Base+0xd4>
   1f1b8:	ldr	r2, [sp, #12]
   1f1bc:	add	r2, r2, r5
   1f1c0:	str	r2, [sp, #12]
   1f1c4:	ldr	r2, [sp, #16]
   1f1c8:	add	r2, r2, #1
   1f1cc:	add	r0, sp, #88	; 0x58
   1f1d0:	add	r0, r0, r2, lsl #3
   1f1d4:	str	r6, [r0, #-76]	; 0xffffffb4
   1f1d8:	str	r5, [r0, #-72]	; 0xffffffb8
   1f1dc:	str	r2, [sp, #16]
   1f1e0:	cmp	r3, #0
   1f1e4:	beq	1f218 <flatcc_builder_embed_buffer@@Base+0x10c>
   1f1e8:	ldr	r2, [sp, #12]
   1f1ec:	add	r2, r2, r3
   1f1f0:	str	r2, [sp, #12]
   1f1f4:	ldr	r2, [sp, #16]
   1f1f8:	add	r2, r2, #1
   1f1fc:	add	r0, sp, #88	; 0x58
   1f200:	add	ip, r0, r2, lsl #3
   1f204:	movw	r0, #31732	; 0x7bf4
   1f208:	movt	r0, #2
   1f20c:	str	r0, [ip, #-76]	; 0xffffffb4
   1f210:	str	r3, [ip, #-72]	; 0xffffffb8
   1f214:	str	r2, [sp, #16]
   1f218:	ldr	r3, [sp, #12]
   1f21c:	sub	r5, r1, r3
   1f220:	cmp	r1, r5
   1f224:	ble	1f268 <flatcc_builder_embed_buffer@@Base+0x15c>
   1f228:	str	r3, [sp]
   1f22c:	ldr	r6, [r4, #44]	; 0x2c
   1f230:	mov	r3, r5
   1f234:	ldr	r2, [sp, #16]
   1f238:	add	r1, sp, #20
   1f23c:	ldr	r0, [r4, #36]	; 0x24
   1f240:	blx	r6
   1f244:	cmp	r0, #0
   1f248:	streq	r5, [r4, #136]	; 0x88
   1f24c:	bne	1f284 <flatcc_builder_embed_buffer@@Base+0x178>
   1f250:	mov	r0, r5
   1f254:	add	sp, sp, #88	; 0x58
   1f258:	ldrd	r4, [sp]
   1f25c:	ldr	r6, [sp, #8]
   1f260:	add	sp, sp, #12
   1f264:	pop	{pc}		; (ldr pc, [sp], #4)
   1f268:	ldr	r3, [pc, #56]	; 1f2a8 <flatcc_builder_embed_buffer@@Base+0x19c>
   1f26c:	movw	r2, #647	; 0x287
   1f270:	movw	r1, #33604	; 0x8344
   1f274:	movt	r1, #2
   1f278:	movw	r0, #33688	; 0x8398
   1f27c:	movt	r0, #2
   1f280:	bl	12a64 <__assert_fail@plt>
   1f284:	ldr	r3, [pc, #28]	; 1f2a8 <flatcc_builder_embed_buffer@@Base+0x19c>
   1f288:	movw	r2, #651	; 0x28b
   1f28c:	movw	r1, #33604	; 0x8344
   1f290:	movt	r1, #2
   1f294:	movw	r0, #33688	; 0x8398
   1f298:	movt	r0, #2
   1f29c:	bl	12a64 <__assert_fail@plt>
   1f2a0:	mov	r5, #0
   1f2a4:	b	1f250 <flatcc_builder_embed_buffer@@Base+0x144>
   1f2a8:	andeq	r7, r2, r0, asr #28

0001f2ac <flatcc_builder_create_buffer@@Base>:
   1f2ac:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1f2b0:	strd	r6, [sp, #8]
   1f2b4:	strd	r8, [sp, #16]
   1f2b8:	str	lr, [sp, #24]
   1f2bc:	sub	sp, sp, #100	; 0x64
   1f2c0:	mov	r5, r0
   1f2c4:	mov	r8, r1
   1f2c8:	mov	r4, r3
   1f2cc:	ldr	r7, [sp, #132]	; 0x84
   1f2d0:	mov	r3, #0
   1f2d4:	str	r3, [sp, #12]
   1f2d8:	and	r6, r7, #1
   1f2dc:	mov	r3, r6
   1f2e0:	add	r1, sp, #128	; 0x80
   1f2e4:	bl	1e6f0 <flatcc_builder_default_alloc@@Base+0x128>
   1f2e8:	cmp	r0, #0
   1f2ec:	bne	1f4e8 <flatcc_builder_create_buffer@@Base+0x23c>
   1f2f0:	ldrh	r2, [sp, #128]	; 0x80
   1f2f4:	ldrh	r3, [r5, #128]	; 0x80
   1f2f8:	cmp	r3, r2
   1f2fc:	strhcc	r2, [r5, #128]	; 0x80
   1f300:	cmp	r8, #0
   1f304:	ldrne	r3, [r8]
   1f308:	strne	r3, [sp, #12]
   1f30c:	ldr	r1, [sp, #12]
   1f310:	cmp	r1, #0
   1f314:	movne	r1, #4
   1f318:	and	r3, r7, #2
   1f31c:	cmp	r3, #0
   1f320:	movne	ip, #4
   1f324:	moveq	ip, #0
   1f328:	ldr	r0, [r5, #136]	; 0x88
   1f32c:	sub	r3, r0, #4
   1f330:	sub	r3, r3, r1
   1f334:	sub	r3, r3, ip
   1f338:	sub	r2, r2, #1
   1f33c:	and	r3, r3, r2
   1f340:	mov	r2, #0
   1f344:	str	r2, [sp, #16]
   1f348:	str	r2, [sp, #20]
   1f34c:	ands	r7, r7, #3
   1f350:	beq	1f370 <flatcc_builder_create_buffer@@Base+0xc4>
   1f354:	mov	r2, #4
   1f358:	str	r2, [sp, #16]
   1f35c:	add	ip, sp, #88	; 0x58
   1f360:	str	ip, [sp, #24]
   1f364:	str	r2, [sp, #28]
   1f368:	mov	r2, #1
   1f36c:	str	r2, [sp, #20]
   1f370:	ldr	ip, [sp, #16]
   1f374:	add	ip, ip, #4
   1f378:	str	ip, [sp, #16]
   1f37c:	ldr	lr, [sp, #20]
   1f380:	add	r2, lr, #1
   1f384:	add	r8, sp, #96	; 0x60
   1f388:	add	r8, r8, r2, lsl #3
   1f38c:	add	r9, sp, #92	; 0x5c
   1f390:	str	r9, [r8, #-80]	; 0xffffffb0
   1f394:	mov	r9, #4
   1f398:	str	r9, [r8, #-76]	; 0xffffffb4
   1f39c:	str	r2, [sp, #20]
   1f3a0:	cmp	r1, #0
   1f3a4:	beq	1f3d0 <flatcc_builder_create_buffer@@Base+0x124>
   1f3a8:	add	ip, ip, r1
   1f3ac:	str	ip, [sp, #16]
   1f3b0:	add	r2, lr, #2
   1f3b4:	add	ip, sp, #96	; 0x60
   1f3b8:	add	r2, ip, r2, lsl #3
   1f3bc:	add	ip, sp, #12
   1f3c0:	str	ip, [r2, #-80]	; 0xffffffb0
   1f3c4:	str	r1, [r2, #-76]	; 0xffffffb4
   1f3c8:	add	lr, lr, #2
   1f3cc:	str	lr, [sp, #20]
   1f3d0:	cmp	r3, #0
   1f3d4:	beq	1f408 <flatcc_builder_create_buffer@@Base+0x15c>
   1f3d8:	ldr	r2, [sp, #16]
   1f3dc:	add	r2, r2, r3
   1f3e0:	str	r2, [sp, #16]
   1f3e4:	ldr	r2, [sp, #20]
   1f3e8:	add	r2, r2, #1
   1f3ec:	add	r1, sp, #96	; 0x60
   1f3f0:	add	ip, r1, r2, lsl #3
   1f3f4:	movw	r1, #31732	; 0x7bf4
   1f3f8:	movt	r1, #2
   1f3fc:	str	r1, [ip, #-80]	; 0xffffffb0
   1f400:	str	r3, [ip, #-76]	; 0xffffffb4
   1f404:	str	r2, [sp, #20]
   1f408:	ldr	r1, [sp, #16]
   1f40c:	sub	r3, r0, r1
   1f410:	cmp	r7, #0
   1f414:	movne	r2, #4
   1f418:	moveq	r2, #0
   1f41c:	add	r3, r3, r2
   1f420:	cmp	r6, #0
   1f424:	ldrne	r2, [r5, #144]	; 0x90
   1f428:	ldreq	r2, [r5, #140]	; 0x8c
   1f42c:	sub	r2, r2, r3
   1f430:	str	r2, [sp, #88]	; 0x58
   1f434:	sub	r4, r4, r3
   1f438:	str	r4, [sp, #92]	; 0x5c
   1f43c:	sub	r4, r0, r1
   1f440:	cmp	r0, r4
   1f444:	ble	1f494 <flatcc_builder_create_buffer@@Base+0x1e8>
   1f448:	str	r1, [sp]
   1f44c:	ldr	r6, [r5, #44]	; 0x2c
   1f450:	mov	r3, r4
   1f454:	ldr	r2, [sp, #20]
   1f458:	add	r1, sp, #24
   1f45c:	ldr	r0, [r5, #36]	; 0x24
   1f460:	blx	r6
   1f464:	cmp	r0, #0
   1f468:	bne	1f4b0 <flatcc_builder_create_buffer@@Base+0x204>
   1f46c:	str	r4, [r5, #136]	; 0x88
   1f470:	cmp	r4, #0
   1f474:	beq	1f4cc <flatcc_builder_create_buffer@@Base+0x220>
   1f478:	mov	r0, r4
   1f47c:	add	sp, sp, #100	; 0x64
   1f480:	ldrd	r4, [sp]
   1f484:	ldrd	r6, [sp, #8]
   1f488:	ldrd	r8, [sp, #16]
   1f48c:	add	sp, sp, #24
   1f490:	pop	{pc}		; (ldr pc, [sp], #4)
   1f494:	ldr	r3, [pc, #84]	; 1f4f0 <flatcc_builder_create_buffer@@Base+0x244>
   1f498:	movw	r2, #647	; 0x287
   1f49c:	movw	r1, #33604	; 0x8344
   1f4a0:	movt	r1, #2
   1f4a4:	movw	r0, #33688	; 0x8398
   1f4a8:	movt	r0, #2
   1f4ac:	bl	12a64 <__assert_fail@plt>
   1f4b0:	ldr	r3, [pc, #56]	; 1f4f0 <flatcc_builder_create_buffer@@Base+0x244>
   1f4b4:	movw	r2, #651	; 0x28b
   1f4b8:	movw	r1, #33604	; 0x8344
   1f4bc:	movt	r1, #2
   1f4c0:	movw	r0, #33688	; 0x8398
   1f4c4:	movt	r0, #2
   1f4c8:	bl	12a64 <__assert_fail@plt>
   1f4cc:	ldr	r3, [pc, #32]	; 1f4f4 <flatcc_builder_create_buffer@@Base+0x248>
   1f4d0:	mov	r2, #772	; 0x304
   1f4d4:	movw	r1, #33604	; 0x8344
   1f4d8:	movt	r1, #2
   1f4dc:	movw	r0, #33688	; 0x8398
   1f4e0:	movt	r0, #2
   1f4e4:	bl	12a64 <__assert_fail@plt>
   1f4e8:	mov	r4, #0
   1f4ec:	b	1f478 <flatcc_builder_create_buffer@@Base+0x1cc>
   1f4f0:	andeq	r7, r2, r0, asr #28
   1f4f4:	andeq	r7, r2, ip, lsr #29

0001f4f8 <flatcc_builder_create_struct@@Base>:
   1f4f8:	strd	r4, [sp, #-16]!
   1f4fc:	str	r6, [sp, #8]
   1f500:	str	lr, [sp, #12]
   1f504:	sub	sp, sp, #80	; 0x50
   1f508:	cmp	r3, #0
   1f50c:	beq	1f564 <flatcc_builder_create_struct@@Base+0x6c>
   1f510:	mov	r4, r0
   1f514:	ldrh	r0, [r0, #128]	; 0x80
   1f518:	cmp	r0, r3
   1f51c:	strhcc	r3, [r4, #128]	; 0x80
   1f520:	ldr	ip, [r4, #136]	; 0x88
   1f524:	sub	r0, ip, r2
   1f528:	sub	r3, r3, #1
   1f52c:	and	r3, r3, r0
   1f530:	mov	r0, #0
   1f534:	str	r0, [sp, #8]
   1f538:	str	r0, [sp, #12]
   1f53c:	cmp	r2, r0
   1f540:	beq	1f5b8 <flatcc_builder_create_struct@@Base+0xc0>
   1f544:	str	r2, [sp, #8]
   1f548:	str	r1, [sp, #16]
   1f54c:	str	r2, [sp, #20]
   1f550:	mov	r2, #1
   1f554:	str	r2, [sp, #12]
   1f558:	cmp	r3, r0
   1f55c:	beq	1f5f0 <flatcc_builder_create_struct@@Base+0xf8>
   1f560:	b	1f5c0 <flatcc_builder_create_struct@@Base+0xc8>
   1f564:	ldr	r3, [pc, #212]	; 1f640 <flatcc_builder_create_struct@@Base+0x148>
   1f568:	movw	r2, #783	; 0x30f
   1f56c:	movw	r1, #33604	; 0x8344
   1f570:	movt	r1, #2
   1f574:	movw	r0, #33788	; 0x83fc
   1f578:	movt	r0, #2
   1f57c:	bl	12a64 <__assert_fail@plt>
   1f580:	ldr	r3, [pc, #188]	; 1f644 <flatcc_builder_create_struct@@Base+0x14c>
   1f584:	movw	r2, #647	; 0x287
   1f588:	movw	r1, #33604	; 0x8344
   1f58c:	movt	r1, #2
   1f590:	movw	r0, #33688	; 0x8398
   1f594:	movt	r0, #2
   1f598:	bl	12a64 <__assert_fail@plt>
   1f59c:	ldr	r3, [pc, #160]	; 1f644 <flatcc_builder_create_struct@@Base+0x14c>
   1f5a0:	movw	r2, #651	; 0x28b
   1f5a4:	movw	r1, #33604	; 0x8344
   1f5a8:	movt	r1, #2
   1f5ac:	movw	r0, #33688	; 0x8398
   1f5b0:	movt	r0, #2
   1f5b4:	bl	12a64 <__assert_fail@plt>
   1f5b8:	cmp	r3, #0
   1f5bc:	beq	1f580 <flatcc_builder_create_struct@@Base+0x88>
   1f5c0:	ldr	r2, [sp, #8]
   1f5c4:	add	r2, r2, r3
   1f5c8:	str	r2, [sp, #8]
   1f5cc:	ldr	r2, [sp, #12]
   1f5d0:	add	r2, r2, #1
   1f5d4:	add	r1, sp, #80	; 0x50
   1f5d8:	add	r0, r1, r2, lsl #3
   1f5dc:	movw	r1, #31732	; 0x7bf4
   1f5e0:	movt	r1, #2
   1f5e4:	str	r1, [r0, #-72]	; 0xffffffb8
   1f5e8:	str	r3, [r0, #-68]	; 0xffffffbc
   1f5ec:	str	r2, [sp, #12]
   1f5f0:	ldr	r3, [sp, #8]
   1f5f4:	sub	r5, ip, r3
   1f5f8:	cmp	ip, r5
   1f5fc:	ble	1f580 <flatcc_builder_create_struct@@Base+0x88>
   1f600:	str	r3, [sp]
   1f604:	ldr	r6, [r4, #44]	; 0x2c
   1f608:	mov	r3, r5
   1f60c:	ldr	r2, [sp, #12]
   1f610:	add	r1, sp, #16
   1f614:	ldr	r0, [r4, #36]	; 0x24
   1f618:	blx	r6
   1f61c:	cmp	r0, #0
   1f620:	bne	1f59c <flatcc_builder_create_struct@@Base+0xa4>
   1f624:	str	r5, [r4, #136]	; 0x88
   1f628:	mov	r0, r5
   1f62c:	add	sp, sp, #80	; 0x50
   1f630:	ldrd	r4, [sp]
   1f634:	ldr	r6, [sp, #8]
   1f638:	add	sp, sp, #12
   1f63c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f640:	andeq	r7, r2, ip, asr #29
   1f644:	andeq	r7, r2, r0, asr #28

0001f648 <flatcc_builder_start_buffer@@Base>:
   1f648:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f64c:	strd	r6, [sp, #8]
   1f650:	str	r8, [sp, #16]
   1f654:	str	lr, [sp, #20]
   1f658:	mov	r4, r0
   1f65c:	mov	r5, r1
   1f660:	mov	r7, r2
   1f664:	mov	r6, r3
   1f668:	ldrh	r1, [r0, #128]	; 0x80
   1f66c:	bl	1e814 <flatcc_builder_default_alloc@@Base+0x24c>
   1f670:	cmp	r0, #0
   1f674:	bne	1f714 <flatcc_builder_start_buffer@@Base+0xcc>
   1f678:	mov	r3, #1
   1f67c:	strh	r3, [r4, #128]	; 0x80
   1f680:	ldr	r3, [r4, #32]
   1f684:	ldrh	r2, [r4, #132]	; 0x84
   1f688:	strh	r2, [r3, #34]	; 0x22
   1f68c:	strh	r7, [r4, #132]	; 0x84
   1f690:	ldr	r3, [r4, #32]
   1f694:	ldrh	r2, [r4, #164]	; 0xa4
   1f698:	strh	r2, [r3, #32]
   1f69c:	strh	r6, [r4, #164]	; 0xa4
   1f6a0:	ldr	r3, [r4, #32]
   1f6a4:	ldr	r2, [r4, #144]	; 0x90
   1f6a8:	str	r2, [r3, #20]
   1f6ac:	ldr	r3, [r4, #32]
   1f6b0:	ldr	r2, [r4, #152]	; 0x98
   1f6b4:	str	r2, [r3, #28]
   1f6b8:	ldr	r3, [r4, #136]	; 0x88
   1f6bc:	str	r3, [r4, #144]	; 0x90
   1f6c0:	ldr	r3, [r4, #148]	; 0x94
   1f6c4:	add	r2, r3, #1
   1f6c8:	str	r2, [r4, #148]	; 0x94
   1f6cc:	str	r3, [r4, #152]	; 0x98
   1f6d0:	ldr	r3, [r4, #32]
   1f6d4:	ldr	r2, [r4, #168]	; 0xa8
   1f6d8:	str	r2, [r3, #16]
   1f6dc:	movw	r3, #31732	; 0x7bf4
   1f6e0:	movt	r3, #2
   1f6e4:	cmp	r5, #0
   1f6e8:	moveq	r5, r3
   1f6ec:	ldr	r3, [r5]
   1f6f0:	str	r3, [r4, #168]	; 0xa8
   1f6f4:	ldr	r3, [r4, #32]
   1f6f8:	mov	r2, #1
   1f6fc:	strh	r2, [r3, #14]
   1f700:	ldrd	r4, [sp]
   1f704:	ldrd	r6, [sp, #8]
   1f708:	ldr	r8, [sp, #16]
   1f70c:	add	sp, sp, #20
   1f710:	pop	{pc}		; (ldr pc, [sp], #4)
   1f714:	mvn	r0, #0
   1f718:	b	1f700 <flatcc_builder_start_buffer@@Base+0xb8>

0001f71c <flatcc_builder_end_buffer@@Base>:
   1f71c:	strd	r4, [sp, #-12]!
   1f720:	str	lr, [sp, #8]
   1f724:	sub	sp, sp, #12
   1f728:	mov	r4, r0
   1f72c:	ldrh	r2, [r0, #164]	; 0xa4
   1f730:	and	r2, r2, #2
   1f734:	ldr	r0, [r0, #152]	; 0x98
   1f738:	cmp	r0, #0
   1f73c:	moveq	r0, r2
   1f740:	orrne	r0, r2, #1
   1f744:	ldr	r2, [r4, #32]
   1f748:	ldrh	r2, [r2, #14]
   1f74c:	cmp	r2, #1
   1f750:	bne	1f79c <flatcc_builder_end_buffer@@Base+0x80>
   1f754:	ldrh	r2, [r4, #132]	; 0x84
   1f758:	ldrh	r3, [r4, #128]	; 0x80
   1f75c:	cmp	r3, r2
   1f760:	strhcc	r2, [r4, #128]	; 0x80
   1f764:	str	r0, [sp, #4]
   1f768:	ldrh	r3, [r4, #128]	; 0x80
   1f76c:	str	r3, [sp]
   1f770:	mov	r3, r1
   1f774:	add	r1, r4, #168	; 0xa8
   1f778:	mov	r0, r4
   1f77c:	bl	1f2ac <flatcc_builder_create_buffer@@Base>
   1f780:	subs	r5, r0, #0
   1f784:	bne	1f7b8 <flatcc_builder_end_buffer@@Base+0x9c>
   1f788:	mov	r0, r5
   1f78c:	add	sp, sp, #12
   1f790:	ldrd	r4, [sp]
   1f794:	add	sp, sp, #8
   1f798:	pop	{pc}		; (ldr pc, [sp], #4)
   1f79c:	ldr	r3, [pc, #184]	; 1f85c <flatcc_builder_end_buffer@@Base+0x140>
   1f7a0:	movw	r2, #838	; 0x346
   1f7a4:	movw	r1, #33604	; 0x8344
   1f7a8:	movt	r1, #2
   1f7ac:	movw	r0, #33800	; 0x8408
   1f7b0:	movt	r0, #2
   1f7b4:	bl	12a64 <__assert_fail@plt>
   1f7b8:	ldr	r3, [r4, #32]
   1f7bc:	ldr	r2, [r3, #20]
   1f7c0:	str	r2, [r4, #144]	; 0x90
   1f7c4:	ldr	r2, [r3, #28]
   1f7c8:	str	r2, [r4, #152]	; 0x98
   1f7cc:	ldr	r2, [r3, #16]
   1f7d0:	str	r2, [r4, #168]	; 0xa8
   1f7d4:	ldrh	r3, [r3, #32]
   1f7d8:	strh	r3, [r4, #164]	; 0xa4
   1f7dc:	ldr	r2, [r4, #20]
   1f7e0:	mov	r1, #0
   1f7e4:	ldr	r0, [r4, #16]
   1f7e8:	bl	12a1c <memset@plt>
   1f7ec:	ldr	r2, [r4, #32]
   1f7f0:	ldr	r3, [r2, #8]
   1f7f4:	str	r3, [r4, #20]
   1f7f8:	ldr	r0, [r2]
   1f7fc:	str	r0, [r4, #28]
   1f800:	ldr	r1, [r2, #4]
   1f804:	ldr	r3, [r4, #60]	; 0x3c
   1f808:	add	r3, r3, r0
   1f80c:	str	r3, [r4, #16]
   1f810:	ldr	r3, [r4, #64]	; 0x40
   1f814:	sub	r3, r3, r0
   1f818:	cmp	r3, r1
   1f81c:	movcs	r3, r1
   1f820:	str	r3, [r4, #24]
   1f824:	str	r1, [r2, #4]
   1f828:	ldrh	r3, [r4, #130]	; 0x82
   1f82c:	ldrh	r2, [r4, #128]	; 0x80
   1f830:	cmp	r2, r3
   1f834:	strhcc	r3, [r4, #128]	; 0x80
   1f838:	ldr	r3, [r4, #32]
   1f83c:	ldrh	r2, [r3, #12]
   1f840:	strh	r2, [r4, #130]	; 0x82
   1f844:	sub	r3, r3, #36	; 0x24
   1f848:	str	r3, [r4, #32]
   1f84c:	ldr	r3, [r4, #156]	; 0x9c
   1f850:	sub	r3, r3, #1
   1f854:	str	r3, [r4, #156]	; 0x9c
   1f858:	b	1f788 <flatcc_builder_end_buffer@@Base+0x6c>
   1f85c:	andeq	r7, r2, ip, ror #29

0001f860 <flatcc_builder_start_struct@@Base>:
   1f860:	strd	r4, [sp, #-16]!
   1f864:	str	r6, [sp, #8]
   1f868:	str	lr, [sp, #12]
   1f86c:	mov	r4, r0
   1f870:	mov	r5, r1
   1f874:	mov	r1, r2
   1f878:	bl	1e814 <flatcc_builder_default_alloc@@Base+0x24c>
   1f87c:	cmp	r0, #0
   1f880:	movne	r0, #0
   1f884:	bne	1f8e4 <flatcc_builder_start_struct@@Base+0x84>
   1f888:	ldr	r3, [r4, #32]
   1f88c:	mov	r2, #2
   1f890:	strh	r2, [r3, #14]
   1f894:	ldr	r1, [r4, #28]
   1f898:	ldr	r2, [r4, #60]	; 0x3c
   1f89c:	add	r2, r2, r1
   1f8a0:	str	r2, [r4, #16]
   1f8a4:	ldr	r3, [r4, #64]	; 0x40
   1f8a8:	sub	r3, r3, r1
   1f8ac:	cmn	r3, #4
   1f8b0:	mvnhi	r3, #3
   1f8b4:	str	r3, [r4, #24]
   1f8b8:	ldr	r3, [r4, #32]
   1f8bc:	mvn	r2, #3
   1f8c0:	str	r2, [r3, #4]
   1f8c4:	ldr	r6, [r4, #20]
   1f8c8:	add	r5, r5, r6
   1f8cc:	str	r5, [r4, #20]
   1f8d0:	ldr	r3, [r4, #24]
   1f8d4:	cmp	r5, r3
   1f8d8:	bcs	1f8f4 <flatcc_builder_start_struct@@Base+0x94>
   1f8dc:	ldr	r0, [r4, #16]
   1f8e0:	add	r0, r0, r6
   1f8e4:	ldrd	r4, [sp]
   1f8e8:	ldr	r6, [sp, #8]
   1f8ec:	add	sp, sp, #12
   1f8f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f8f4:	add	r1, r5, #1
   1f8f8:	mov	r0, r4
   1f8fc:	bl	1e540 <main@@Base+0x330>
   1f900:	cmp	r0, #0
   1f904:	movne	r0, #0
   1f908:	beq	1f8dc <flatcc_builder_start_struct@@Base+0x7c>
   1f90c:	b	1f8e4 <flatcc_builder_start_struct@@Base+0x84>

0001f910 <flatcc_builder_struct_edit@@Base>:
   1f910:	ldr	r0, [r0, #16]
   1f914:	bx	lr

0001f918 <flatcc_builder_end_struct@@Base>:
   1f918:	strd	r4, [sp, #-16]!
   1f91c:	str	r6, [sp, #8]
   1f920:	str	lr, [sp, #12]
   1f924:	ldr	r3, [r0, #32]
   1f928:	ldrh	r3, [r3, #14]
   1f92c:	cmp	r3, #2
   1f930:	bne	1f964 <flatcc_builder_end_struct@@Base+0x4c>
   1f934:	mov	r4, r0
   1f938:	ldrh	r3, [r0, #130]	; 0x82
   1f93c:	ldr	r2, [r0, #20]
   1f940:	ldr	r1, [r0, #16]
   1f944:	bl	1f4f8 <flatcc_builder_create_struct@@Base>
   1f948:	subs	r5, r0, #0
   1f94c:	bne	1f980 <flatcc_builder_end_struct@@Base+0x68>
   1f950:	mov	r0, r5
   1f954:	ldrd	r4, [sp]
   1f958:	ldr	r6, [sp, #8]
   1f95c:	add	sp, sp, #12
   1f960:	pop	{pc}		; (ldr pc, [sp], #4)
   1f964:	ldr	r3, [pc, #148]	; 1fa00 <flatcc_builder_end_struct@@Base+0xe8>
   1f968:	mov	r2, #872	; 0x368
   1f96c:	movw	r1, #33604	; 0x8344
   1f970:	movt	r1, #2
   1f974:	movw	r0, #33844	; 0x8434
   1f978:	movt	r0, #2
   1f97c:	bl	12a64 <__assert_fail@plt>
   1f980:	ldr	r2, [r4, #20]
   1f984:	mov	r1, #0
   1f988:	ldr	r0, [r4, #16]
   1f98c:	bl	12a1c <memset@plt>
   1f990:	ldr	r2, [r4, #32]
   1f994:	ldr	r3, [r2, #8]
   1f998:	str	r3, [r4, #20]
   1f99c:	ldr	r0, [r2]
   1f9a0:	str	r0, [r4, #28]
   1f9a4:	ldr	r1, [r2, #4]
   1f9a8:	ldr	r3, [r4, #60]	; 0x3c
   1f9ac:	add	r3, r3, r0
   1f9b0:	str	r3, [r4, #16]
   1f9b4:	ldr	r3, [r4, #64]	; 0x40
   1f9b8:	sub	r3, r3, r0
   1f9bc:	cmp	r3, r1
   1f9c0:	movcs	r3, r1
   1f9c4:	str	r3, [r4, #24]
   1f9c8:	str	r1, [r2, #4]
   1f9cc:	ldrh	r3, [r4, #130]	; 0x82
   1f9d0:	ldrh	r2, [r4, #128]	; 0x80
   1f9d4:	cmp	r2, r3
   1f9d8:	strhcc	r3, [r4, #128]	; 0x80
   1f9dc:	ldr	r3, [r4, #32]
   1f9e0:	ldrh	r2, [r3, #12]
   1f9e4:	strh	r2, [r4, #130]	; 0x82
   1f9e8:	sub	r3, r3, #36	; 0x24
   1f9ec:	str	r3, [r4, #32]
   1f9f0:	ldr	r3, [r4, #156]	; 0x9c
   1f9f4:	sub	r3, r3, #1
   1f9f8:	str	r3, [r4, #156]	; 0x9c
   1f9fc:	b	1f950 <flatcc_builder_end_struct@@Base+0x38>
   1fa00:	andeq	r7, r2, r8, lsl #30

0001fa04 <flatcc_builder_extend_vector@@Base>:
   1fa04:	strd	r4, [sp, #-16]!
   1fa08:	str	r6, [sp, #8]
   1fa0c:	str	lr, [sp, #12]
   1fa10:	mov	r4, r0
   1fa14:	ldr	r2, [r0, #32]
   1fa18:	ldr	r3, [r2, #20]
   1fa1c:	add	r0, r1, r3
   1fa20:	ldr	ip, [r2, #24]
   1fa24:	cmp	r3, r0
   1fa28:	movls	r3, #0
   1fa2c:	movhi	r3, #1
   1fa30:	cmp	ip, r0
   1fa34:	orrcc	r3, r3, #1
   1fa38:	cmp	r3, #0
   1fa3c:	bne	1fa7c <flatcc_builder_extend_vector@@Base+0x78>
   1fa40:	str	r0, [r2, #20]
   1fa44:	ldr	r5, [r4, #20]
   1fa48:	ldr	r3, [r4, #32]
   1fa4c:	ldr	r3, [r3, #16]
   1fa50:	mla	r1, r3, r1, r5
   1fa54:	str	r1, [r4, #20]
   1fa58:	ldr	r3, [r4, #24]
   1fa5c:	cmp	r1, r3
   1fa60:	bcs	1fa98 <flatcc_builder_extend_vector@@Base+0x94>
   1fa64:	ldr	r0, [r4, #16]
   1fa68:	add	r0, r0, r5
   1fa6c:	ldrd	r4, [sp]
   1fa70:	ldr	r6, [sp, #8]
   1fa74:	add	sp, sp, #12
   1fa78:	pop	{pc}		; (ldr pc, [sp], #4)
   1fa7c:	ldr	r3, [pc, #52]	; 1fab8 <flatcc_builder_extend_vector@@Base+0xb4>
   1fa80:	mov	r2, #892	; 0x37c
   1fa84:	movw	r1, #33604	; 0x8344
   1fa88:	movt	r1, #2
   1fa8c:	movw	r0, #33888	; 0x8460
   1fa90:	movt	r0, #2
   1fa94:	bl	12a64 <__assert_fail@plt>
   1fa98:	mvn	r2, #3
   1fa9c:	add	r1, r1, #1
   1faa0:	mov	r0, r4
   1faa4:	bl	1e540 <main@@Base+0x330>
   1faa8:	cmp	r0, #0
   1faac:	movne	r0, #0
   1fab0:	beq	1fa64 <flatcc_builder_extend_vector@@Base+0x60>
   1fab4:	b	1fa6c <flatcc_builder_extend_vector@@Base+0x68>
   1fab8:	andeq	r7, r2, r4, lsr #30

0001fabc <flatcc_builder_vector_push@@Base>:
   1fabc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1fac0:	strd	r6, [sp, #8]
   1fac4:	str	r8, [sp, #16]
   1fac8:	str	lr, [sp, #20]
   1facc:	ldr	r3, [r0, #32]
   1fad0:	ldrh	r2, [r3, #14]
   1fad4:	cmp	r2, #4
   1fad8:	bne	1fb50 <flatcc_builder_vector_push@@Base+0x94>
   1fadc:	mov	r4, r0
   1fae0:	mov	r6, r1
   1fae4:	ldr	r2, [r3, #20]
   1fae8:	ldr	r1, [r3, #24]
   1faec:	cmp	r2, r1
   1faf0:	bhi	1fb6c <flatcc_builder_vector_push@@Base+0xb0>
   1faf4:	add	r2, r2, #1
   1faf8:	str	r2, [r3, #20]
   1fafc:	ldr	r3, [r0, #32]
   1fb00:	ldr	r7, [r3, #16]
   1fb04:	ldr	r5, [r0, #20]
   1fb08:	add	r1, r7, r5
   1fb0c:	str	r1, [r0, #20]
   1fb10:	ldr	r3, [r0, #24]
   1fb14:	cmp	r1, r3
   1fb18:	bcs	1fb88 <flatcc_builder_vector_push@@Base+0xcc>
   1fb1c:	ldr	r4, [r4, #16]
   1fb20:	adds	r4, r4, r5
   1fb24:	beq	1fb38 <flatcc_builder_vector_push@@Base+0x7c>
   1fb28:	mov	r2, r7
   1fb2c:	mov	r1, r6
   1fb30:	mov	r0, r4
   1fb34:	bl	1298c <memcpy@plt>
   1fb38:	mov	r0, r4
   1fb3c:	ldrd	r4, [sp]
   1fb40:	ldrd	r6, [sp, #8]
   1fb44:	ldr	r8, [sp, #16]
   1fb48:	add	sp, sp, #20
   1fb4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb50:	ldr	r3, [pc, #76]	; 1fba4 <flatcc_builder_vector_push@@Base+0xe8>
   1fb54:	movw	r2, #907	; 0x38b
   1fb58:	movw	r1, #33604	; 0x8344
   1fb5c:	movt	r1, #2
   1fb60:	movw	r0, #33916	; 0x847c
   1fb64:	movt	r0, #2
   1fb68:	bl	12a64 <__assert_fail@plt>
   1fb6c:	ldr	r3, [pc, #48]	; 1fba4 <flatcc_builder_vector_push@@Base+0xe8>
   1fb70:	mov	r2, #908	; 0x38c
   1fb74:	movw	r1, #33604	; 0x8344
   1fb78:	movt	r1, #2
   1fb7c:	movw	r0, #33960	; 0x84a8
   1fb80:	movt	r0, #2
   1fb84:	bl	12a64 <__assert_fail@plt>
   1fb88:	mvn	r2, #3
   1fb8c:	add	r1, r1, #1
   1fb90:	bl	1e540 <main@@Base+0x330>
   1fb94:	cmp	r0, #0
   1fb98:	movne	r4, #0
   1fb9c:	beq	1fb1c <flatcc_builder_vector_push@@Base+0x60>
   1fba0:	b	1fb38 <flatcc_builder_vector_push@@Base+0x7c>
   1fba4:	andeq	r7, r2, r8, lsr pc

0001fba8 <flatcc_builder_append_vector@@Base>:
   1fba8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1fbac:	strd	r6, [sp, #8]
   1fbb0:	str	r8, [sp, #16]
   1fbb4:	str	lr, [sp, #20]
   1fbb8:	mov	r6, r1
   1fbbc:	ldr	r1, [r0, #32]
   1fbc0:	ldrh	r3, [r1, #14]
   1fbc4:	cmp	r3, #4
   1fbc8:	bne	1fc54 <flatcc_builder_append_vector@@Base+0xac>
   1fbcc:	mov	r4, r0
   1fbd0:	ldr	r3, [r1, #20]
   1fbd4:	add	r0, r2, r3
   1fbd8:	ldr	ip, [r1, #24]
   1fbdc:	cmp	r3, r0
   1fbe0:	movls	r3, #0
   1fbe4:	movhi	r3, #1
   1fbe8:	cmp	ip, r0
   1fbec:	orrcc	r3, r3, #1
   1fbf0:	cmp	r3, #0
   1fbf4:	bne	1fc70 <flatcc_builder_append_vector@@Base+0xc8>
   1fbf8:	str	r0, [r1, #20]
   1fbfc:	ldr	r3, [r4, #32]
   1fc00:	ldr	r5, [r3, #16]
   1fc04:	mul	r5, r5, r2
   1fc08:	ldr	r7, [r4, #20]
   1fc0c:	add	r1, r5, r7
   1fc10:	str	r1, [r4, #20]
   1fc14:	ldr	r3, [r4, #24]
   1fc18:	cmp	r1, r3
   1fc1c:	bcs	1fc8c <flatcc_builder_append_vector@@Base+0xe4>
   1fc20:	ldr	r4, [r4, #16]
   1fc24:	adds	r4, r4, r7
   1fc28:	beq	1fc3c <flatcc_builder_append_vector@@Base+0x94>
   1fc2c:	mov	r2, r5
   1fc30:	mov	r1, r6
   1fc34:	mov	r0, r4
   1fc38:	bl	1298c <memcpy@plt>
   1fc3c:	mov	r0, r4
   1fc40:	ldrd	r4, [sp]
   1fc44:	ldrd	r6, [sp, #8]
   1fc48:	ldr	r8, [sp, #16]
   1fc4c:	add	sp, sp, #20
   1fc50:	pop	{pc}		; (ldr pc, [sp], #4)
   1fc54:	ldr	r3, [pc, #80]	; 1fcac <flatcc_builder_append_vector@@Base+0x104>
   1fc58:	movw	r2, #915	; 0x393
   1fc5c:	movw	r1, #33604	; 0x8344
   1fc60:	movt	r1, #2
   1fc64:	movw	r0, #33916	; 0x847c
   1fc68:	movt	r0, #2
   1fc6c:	bl	12a64 <__assert_fail@plt>
   1fc70:	ldr	r3, [pc, #56]	; 1fcb0 <flatcc_builder_append_vector@@Base+0x108>
   1fc74:	mov	r2, #892	; 0x37c
   1fc78:	movw	r1, #33604	; 0x8344
   1fc7c:	movt	r1, #2
   1fc80:	movw	r0, #33888	; 0x8460
   1fc84:	movt	r0, #2
   1fc88:	bl	12a64 <__assert_fail@plt>
   1fc8c:	mvn	r2, #3
   1fc90:	add	r1, r1, #1
   1fc94:	mov	r0, r4
   1fc98:	bl	1e540 <main@@Base+0x330>
   1fc9c:	cmp	r0, #0
   1fca0:	movne	r4, #0
   1fca4:	beq	1fc20 <flatcc_builder_append_vector@@Base+0x78>
   1fca8:	b	1fc3c <flatcc_builder_append_vector@@Base+0x94>
   1fcac:	andeq	r7, r2, r4, asr pc
   1fcb0:	andeq	r7, r2, r4, lsr #30

0001fcb4 <flatcc_builder_extend_offset_vector@@Base>:
   1fcb4:	strd	r4, [sp, #-16]!
   1fcb8:	str	r6, [sp, #8]
   1fcbc:	str	lr, [sp, #12]
   1fcc0:	mov	r4, r0
   1fcc4:	ldr	r2, [r0, #32]
   1fcc8:	ldr	r3, [r2, #20]
   1fccc:	adds	r3, r1, r3
   1fcd0:	movcs	ip, #1
   1fcd4:	movcc	ip, #0
   1fcd8:	cmn	r3, #-1073741823	; 0xc0000001
   1fcdc:	movls	r0, #0
   1fce0:	movhi	r0, #1
   1fce4:	orrs	r0, ip, r0
   1fce8:	bne	1fd20 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   1fcec:	str	r3, [r2, #20]
   1fcf0:	ldr	r5, [r4, #20]
   1fcf4:	add	r1, r5, r1, lsl #2
   1fcf8:	str	r1, [r4, #20]
   1fcfc:	ldr	r3, [r4, #24]
   1fd00:	cmp	r1, r3
   1fd04:	bcs	1fd3c <flatcc_builder_extend_offset_vector@@Base+0x88>
   1fd08:	ldr	r0, [r4, #16]
   1fd0c:	add	r0, r0, r5
   1fd10:	ldrd	r4, [sp]
   1fd14:	ldr	r6, [sp, #8]
   1fd18:	add	sp, sp, #12
   1fd1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fd20:	ldr	r3, [pc, #52]	; 1fd5c <flatcc_builder_extend_offset_vector@@Base+0xa8>
   1fd24:	mov	r2, #892	; 0x37c
   1fd28:	movw	r1, #33604	; 0x8344
   1fd2c:	movt	r1, #2
   1fd30:	movw	r0, #33888	; 0x8460
   1fd34:	movt	r0, #2
   1fd38:	bl	12a64 <__assert_fail@plt>
   1fd3c:	mvn	r2, #3
   1fd40:	add	r1, r1, #1
   1fd44:	mov	r0, r4
   1fd48:	bl	1e540 <main@@Base+0x330>
   1fd4c:	cmp	r0, #0
   1fd50:	movne	r0, #0
   1fd54:	beq	1fd08 <flatcc_builder_extend_offset_vector@@Base+0x54>
   1fd58:	b	1fd10 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   1fd5c:	andeq	r7, r2, r4, lsr #30

0001fd60 <flatcc_builder_offset_vector_push@@Base>:
   1fd60:	strd	r4, [sp, #-16]!
   1fd64:	str	r6, [sp, #8]
   1fd68:	str	lr, [sp, #12]
   1fd6c:	ldr	r2, [r0, #32]
   1fd70:	ldrh	r3, [r2, #14]
   1fd74:	cmp	r3, #5
   1fd78:	bne	1fdd0 <flatcc_builder_offset_vector_push@@Base+0x70>
   1fd7c:	mov	r4, r0
   1fd80:	mov	r6, r1
   1fd84:	ldr	r3, [r2, #20]
   1fd88:	cmn	r3, #-1073741823	; 0xc0000001
   1fd8c:	moveq	r0, #0
   1fd90:	beq	1fdc0 <flatcc_builder_offset_vector_push@@Base+0x60>
   1fd94:	add	r3, r3, #1
   1fd98:	str	r3, [r2, #20]
   1fd9c:	ldr	r5, [r4, #20]
   1fda0:	add	r3, r5, #4
   1fda4:	str	r3, [r4, #20]
   1fda8:	ldr	r2, [r4, #24]
   1fdac:	cmp	r3, r2
   1fdb0:	bcs	1fdec <flatcc_builder_offset_vector_push@@Base+0x8c>
   1fdb4:	ldr	r3, [r4, #16]
   1fdb8:	adds	r0, r3, r5
   1fdbc:	strne	r6, [r3, r5]
   1fdc0:	ldrd	r4, [sp]
   1fdc4:	ldr	r6, [sp, #8]
   1fdc8:	add	sp, sp, #12
   1fdcc:	pop	{pc}		; (ldr pc, [sp], #4)
   1fdd0:	ldr	r3, [pc, #52]	; 1fe0c <flatcc_builder_offset_vector_push@@Base+0xac>
   1fdd4:	movw	r2, #934	; 0x3a6
   1fdd8:	movw	r1, #33604	; 0x8344
   1fddc:	movt	r1, #2
   1fde0:	movw	r0, #34024	; 0x84e8
   1fde4:	movt	r0, #2
   1fde8:	bl	12a64 <__assert_fail@plt>
   1fdec:	mvn	r2, #3
   1fdf0:	add	r1, r5, #5
   1fdf4:	mov	r0, r4
   1fdf8:	bl	1e540 <main@@Base+0x330>
   1fdfc:	cmp	r0, #0
   1fe00:	movne	r0, #0
   1fe04:	beq	1fdb4 <flatcc_builder_offset_vector_push@@Base+0x54>
   1fe08:	b	1fdc0 <flatcc_builder_offset_vector_push@@Base+0x60>
   1fe0c:	andeq	r7, r2, r4, ror pc

0001fe10 <flatcc_builder_append_offset_vector@@Base>:
   1fe10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1fe14:	strd	r6, [sp, #8]
   1fe18:	str	r8, [sp, #16]
   1fe1c:	str	lr, [sp, #20]
   1fe20:	mov	r6, r1
   1fe24:	ldr	r1, [r0, #32]
   1fe28:	ldrh	r3, [r1, #14]
   1fe2c:	cmp	r3, #5
   1fe30:	bne	1feb0 <flatcc_builder_append_offset_vector@@Base+0xa0>
   1fe34:	mov	r5, r0
   1fe38:	ldr	r3, [r1, #20]
   1fe3c:	adds	r3, r2, r3
   1fe40:	movcs	ip, #1
   1fe44:	movcc	ip, #0
   1fe48:	cmn	r3, #-1073741823	; 0xc0000001
   1fe4c:	movls	r0, #0
   1fe50:	movhi	r0, #1
   1fe54:	orrs	r0, ip, r0
   1fe58:	bne	1fecc <flatcc_builder_append_offset_vector@@Base+0xbc>
   1fe5c:	str	r3, [r1, #20]
   1fe60:	lsl	r4, r2, #2
   1fe64:	ldr	r7, [r5, #20]
   1fe68:	add	r1, r4, r7
   1fe6c:	str	r1, [r5, #20]
   1fe70:	ldr	r3, [r5, #24]
   1fe74:	cmp	r1, r3
   1fe78:	bcs	1fee8 <flatcc_builder_append_offset_vector@@Base+0xd8>
   1fe7c:	ldr	r5, [r5, #16]
   1fe80:	adds	r5, r5, r7
   1fe84:	beq	1fe98 <flatcc_builder_append_offset_vector@@Base+0x88>
   1fe88:	mov	r2, r4
   1fe8c:	mov	r1, r6
   1fe90:	mov	r0, r5
   1fe94:	bl	1298c <memcpy@plt>
   1fe98:	mov	r0, r5
   1fe9c:	ldrd	r4, [sp]
   1fea0:	ldrd	r6, [sp, #8]
   1fea4:	ldr	r8, [sp, #16]
   1fea8:	add	sp, sp, #20
   1feac:	pop	{pc}		; (ldr pc, [sp], #4)
   1feb0:	ldr	r3, [pc, #80]	; 1ff08 <flatcc_builder_append_offset_vector@@Base+0xf8>
   1feb4:	mov	r2, #948	; 0x3b4
   1feb8:	movw	r1, #33604	; 0x8344
   1febc:	movt	r1, #2
   1fec0:	movw	r0, #34024	; 0x84e8
   1fec4:	movt	r0, #2
   1fec8:	bl	12a64 <__assert_fail@plt>
   1fecc:	ldr	r3, [pc, #56]	; 1ff0c <flatcc_builder_append_offset_vector@@Base+0xfc>
   1fed0:	mov	r2, #892	; 0x37c
   1fed4:	movw	r1, #33604	; 0x8344
   1fed8:	movt	r1, #2
   1fedc:	movw	r0, #33888	; 0x8460
   1fee0:	movt	r0, #2
   1fee4:	bl	12a64 <__assert_fail@plt>
   1fee8:	mvn	r2, #3
   1feec:	add	r1, r1, #1
   1fef0:	mov	r0, r5
   1fef4:	bl	1e540 <main@@Base+0x330>
   1fef8:	cmp	r0, #0
   1fefc:	movne	r5, #0
   1ff00:	beq	1fe7c <flatcc_builder_append_offset_vector@@Base+0x6c>
   1ff04:	b	1fe98 <flatcc_builder_append_offset_vector@@Base+0x88>
   1ff08:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   1ff0c:	andeq	r7, r2, r4, lsr #30

0001ff10 <flatcc_builder_extend_string@@Base>:
   1ff10:	strd	r4, [sp, #-16]!
   1ff14:	str	r6, [sp, #8]
   1ff18:	str	lr, [sp, #12]
   1ff1c:	ldr	r2, [r0, #32]
   1ff20:	ldrh	r3, [r2, #14]
   1ff24:	cmp	r3, #6
   1ff28:	bne	1ff70 <flatcc_builder_extend_string@@Base+0x60>
   1ff2c:	mov	r4, r0
   1ff30:	ldr	r3, [r2, #20]
   1ff34:	adds	r3, r1, r3
   1ff38:	bcs	1ff8c <flatcc_builder_extend_string@@Base+0x7c>
   1ff3c:	str	r3, [r2, #20]
   1ff40:	ldr	r5, [r0, #20]
   1ff44:	add	r1, r1, r5
   1ff48:	str	r1, [r0, #20]
   1ff4c:	ldr	r3, [r0, #24]
   1ff50:	cmp	r1, r3
   1ff54:	bcs	1ffa8 <flatcc_builder_extend_string@@Base+0x98>
   1ff58:	ldr	r0, [r4, #16]
   1ff5c:	add	r0, r0, r5
   1ff60:	ldrd	r4, [sp]
   1ff64:	ldr	r6, [sp, #8]
   1ff68:	add	sp, sp, #12
   1ff6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff70:	ldr	r3, [pc, #76]	; 1ffc4 <flatcc_builder_extend_string@@Base+0xb4>
   1ff74:	movw	r2, #957	; 0x3bd
   1ff78:	movw	r1, #33604	; 0x8344
   1ff7c:	movt	r1, #2
   1ff80:	movw	r0, #34076	; 0x851c
   1ff84:	movt	r0, #2
   1ff88:	bl	12a64 <__assert_fail@plt>
   1ff8c:	ldr	r3, [pc, #52]	; 1ffc8 <flatcc_builder_extend_string@@Base+0xb8>
   1ff90:	mov	r2, #892	; 0x37c
   1ff94:	movw	r1, #33604	; 0x8344
   1ff98:	movt	r1, #2
   1ff9c:	movw	r0, #33888	; 0x8460
   1ffa0:	movt	r0, #2
   1ffa4:	bl	12a64 <__assert_fail@plt>
   1ffa8:	mvn	r2, #3
   1ffac:	add	r1, r1, #1
   1ffb0:	bl	1e540 <main@@Base+0x330>
   1ffb4:	cmp	r0, #0
   1ffb8:	movne	r0, #0
   1ffbc:	beq	1ff58 <flatcc_builder_extend_string@@Base+0x48>
   1ffc0:	b	1ff60 <flatcc_builder_extend_string@@Base+0x50>
   1ffc4:			; <UNDEFINED> instruction: 0x00027fbc
   1ffc8:	andeq	r7, r2, r4, lsr #30

0001ffcc <flatcc_builder_append_string@@Base>:
   1ffcc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ffd0:	strd	r6, [sp, #8]
   1ffd4:	str	r8, [sp, #16]
   1ffd8:	str	lr, [sp, #20]
   1ffdc:	mov	r5, r2
   1ffe0:	ldr	r2, [r0, #32]
   1ffe4:	ldrh	r3, [r2, #14]
   1ffe8:	cmp	r3, #6
   1ffec:	bne	20054 <flatcc_builder_append_string@@Base+0x88>
   1fff0:	mov	r4, r0
   1fff4:	mov	r6, r1
   1fff8:	ldr	r3, [r2, #20]
   1fffc:	adds	r3, r5, r3
   20000:	bcs	20070 <flatcc_builder_append_string@@Base+0xa4>
   20004:	str	r3, [r2, #20]
   20008:	ldr	r7, [r0, #20]
   2000c:	add	r1, r5, r7
   20010:	str	r1, [r0, #20]
   20014:	ldr	r3, [r0, #24]
   20018:	cmp	r1, r3
   2001c:	bcs	2008c <flatcc_builder_append_string@@Base+0xc0>
   20020:	ldr	r4, [r4, #16]
   20024:	adds	r4, r4, r7
   20028:	beq	2003c <flatcc_builder_append_string@@Base+0x70>
   2002c:	mov	r2, r5
   20030:	mov	r1, r6
   20034:	mov	r0, r4
   20038:	bl	1298c <memcpy@plt>
   2003c:	mov	r0, r4
   20040:	ldrd	r4, [sp]
   20044:	ldrd	r6, [sp, #8]
   20048:	ldr	r8, [sp, #16]
   2004c:	add	sp, sp, #20
   20050:	pop	{pc}		; (ldr pc, [sp], #4)
   20054:	ldr	r3, [pc, #76]	; 200a8 <flatcc_builder_append_string@@Base+0xdc>
   20058:	movw	r2, #966	; 0x3c6
   2005c:	movw	r1, #33604	; 0x8344
   20060:	movt	r1, #2
   20064:	movw	r0, #34076	; 0x851c
   20068:	movt	r0, #2
   2006c:	bl	12a64 <__assert_fail@plt>
   20070:	ldr	r3, [pc, #52]	; 200ac <flatcc_builder_append_string@@Base+0xe0>
   20074:	mov	r2, #892	; 0x37c
   20078:	movw	r1, #33604	; 0x8344
   2007c:	movt	r1, #2
   20080:	movw	r0, #33888	; 0x8460
   20084:	movt	r0, #2
   20088:	bl	12a64 <__assert_fail@plt>
   2008c:	mvn	r2, #3
   20090:	add	r1, r1, #1
   20094:	bl	1e540 <main@@Base+0x330>
   20098:	cmp	r0, #0
   2009c:	movne	r4, #0
   200a0:	beq	20020 <flatcc_builder_append_string@@Base+0x54>
   200a4:	b	2003c <flatcc_builder_append_string@@Base+0x70>
   200a8:	ldrdeq	r7, [r2], -ip
   200ac:	andeq	r7, r2, r4, lsr #30

000200b0 <flatcc_builder_append_string_str@@Base>:
   200b0:	strd	r4, [sp, #-16]!
   200b4:	str	r6, [sp, #8]
   200b8:	str	lr, [sp, #12]
   200bc:	mov	r5, r0
   200c0:	mov	r4, r1
   200c4:	mov	r0, r1
   200c8:	bl	129f8 <strlen@plt>
   200cc:	mov	r2, r0
   200d0:	mov	r1, r4
   200d4:	mov	r0, r5
   200d8:	bl	1ffcc <flatcc_builder_append_string@@Base>
   200dc:	ldrd	r4, [sp]
   200e0:	ldr	r6, [sp, #8]
   200e4:	add	sp, sp, #12
   200e8:	pop	{pc}		; (ldr pc, [sp], #4)

000200ec <flatcc_builder_append_string_strn@@Base>:
   200ec:	strd	r4, [sp, #-16]!
   200f0:	str	r6, [sp, #8]
   200f4:	str	lr, [sp, #12]
   200f8:	mov	r6, r0
   200fc:	mov	r4, r1
   20100:	mov	r5, r2
   20104:	mov	r1, #0
   20108:	mov	r0, r4
   2010c:	bl	12a34 <memchr@plt>
   20110:	cmp	r0, #0
   20114:	subne	r5, r0, r4
   20118:	mov	r2, r5
   2011c:	mov	r1, r4
   20120:	mov	r0, r6
   20124:	bl	1ffcc <flatcc_builder_append_string@@Base>
   20128:	ldrd	r4, [sp]
   2012c:	ldr	r6, [sp, #8]
   20130:	add	sp, sp, #12
   20134:	pop	{pc}		; (ldr pc, [sp], #4)

00020138 <flatcc_builder_truncate_vector@@Base>:
   20138:	str	r4, [sp, #-8]!
   2013c:	str	lr, [sp, #4]
   20140:	ldr	ip, [r0, #32]
   20144:	ldrh	r3, [ip, #14]
   20148:	cmp	r3, #4
   2014c:	bne	2019c <flatcc_builder_truncate_vector@@Base+0x64>
   20150:	ldr	r3, [ip, #20]
   20154:	cmp	r3, r1
   20158:	bcc	201b8 <flatcc_builder_truncate_vector@@Base+0x80>
   2015c:	sub	r3, r3, r1
   20160:	str	r3, [ip, #20]
   20164:	ldr	r3, [r0, #32]
   20168:	ldr	r2, [r3, #16]
   2016c:	mul	r2, r2, r1
   20170:	ldr	r3, [r0, #20]
   20174:	sub	r3, r3, r2
   20178:	str	r3, [r0, #20]
   2017c:	ldr	r0, [r0, #16]
   20180:	mov	r1, #0
   20184:	add	r0, r0, r3
   20188:	bl	12a1c <memset@plt>
   2018c:	mov	r0, #0
   20190:	ldr	r4, [sp]
   20194:	add	sp, sp, #4
   20198:	pop	{pc}		; (ldr pc, [sp], #4)
   2019c:	ldr	r3, [pc, #48]	; 201d4 <flatcc_builder_truncate_vector@@Base+0x9c>
   201a0:	movw	r2, #985	; 0x3d9
   201a4:	movw	r1, #33604	; 0x8344
   201a8:	movt	r1, #2
   201ac:	movw	r0, #33916	; 0x847c
   201b0:	movt	r0, #2
   201b4:	bl	12a64 <__assert_fail@plt>
   201b8:	ldr	r3, [pc, #20]	; 201d4 <flatcc_builder_truncate_vector@@Base+0x9c>
   201bc:	movw	r2, #986	; 0x3da
   201c0:	movw	r1, #33604	; 0x8344
   201c4:	movt	r1, #2
   201c8:	movw	r0, #34120	; 0x8548
   201cc:	movt	r0, #2
   201d0:	bl	12a64 <__assert_fail@plt>
   201d4:	strdeq	r7, [r2], -ip

000201d8 <flatcc_builder_truncate_offset_vector@@Base>:
   201d8:	str	r4, [sp, #-8]!
   201dc:	str	lr, [sp, #4]
   201e0:	ldr	ip, [r0, #32]
   201e4:	ldrh	r3, [ip, #14]
   201e8:	cmp	r3, #5
   201ec:	bne	2023c <flatcc_builder_truncate_offset_vector@@Base+0x64>
   201f0:	ldr	r3, [ip, #20]
   201f4:	cmp	r3, r1
   201f8:	bcc	20258 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   201fc:	sub	r3, r3, r1
   20200:	str	r3, [ip, #20]
   20204:	ldr	r3, [r0, #32]
   20208:	ldr	r2, [r3, #16]
   2020c:	mul	r2, r2, r1
   20210:	ldr	r3, [r0, #20]
   20214:	sub	r3, r3, r2
   20218:	str	r3, [r0, #20]
   2021c:	ldr	r0, [r0, #16]
   20220:	mov	r1, #0
   20224:	add	r0, r0, r3
   20228:	bl	12a1c <memset@plt>
   2022c:	mov	r0, #0
   20230:	ldr	r4, [sp]
   20234:	add	sp, sp, #4
   20238:	pop	{pc}		; (ldr pc, [sp], #4)
   2023c:	ldr	r3, [pc, #48]	; 20274 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   20240:	movw	r2, #994	; 0x3e2
   20244:	movw	r1, #33604	; 0x8344
   20248:	movt	r1, #2
   2024c:	movw	r0, #34024	; 0x84e8
   20250:	movt	r0, #2
   20254:	bl	12a64 <__assert_fail@plt>
   20258:	ldr	r3, [pc, #20]	; 20274 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   2025c:	movw	r2, #995	; 0x3e3
   20260:	movw	r1, #33604	; 0x8344
   20264:	movt	r1, #2
   20268:	movw	r0, #34156	; 0x856c
   2026c:	movt	r0, #2
   20270:	bl	12a64 <__assert_fail@plt>
   20274:	andeq	r8, r2, ip, lsl r0

00020278 <flatcc_builder_truncate_string@@Base>:
   20278:	str	r4, [sp, #-8]!
   2027c:	str	lr, [sp, #4]
   20280:	ldr	r2, [r0, #32]
   20284:	ldrh	r3, [r2, #14]
   20288:	cmp	r3, #6
   2028c:	bne	202d4 <flatcc_builder_truncate_string@@Base+0x5c>
   20290:	ldr	r3, [r2, #20]
   20294:	cmp	r3, r1
   20298:	bcc	202f0 <flatcc_builder_truncate_string@@Base+0x78>
   2029c:	sub	r3, r3, r1
   202a0:	str	r3, [r2, #20]
   202a4:	ldr	r3, [r0, #20]
   202a8:	sub	r3, r3, r1
   202ac:	str	r3, [r0, #20]
   202b0:	ldr	r0, [r0, #16]
   202b4:	mov	r2, r1
   202b8:	mov	r1, #0
   202bc:	add	r0, r0, r3
   202c0:	bl	12a1c <memset@plt>
   202c4:	mov	r0, #0
   202c8:	ldr	r4, [sp]
   202cc:	add	sp, sp, #4
   202d0:	pop	{pc}		; (ldr pc, [sp], #4)
   202d4:	ldr	r3, [pc, #48]	; 2030c <flatcc_builder_truncate_string@@Base+0x94>
   202d8:	movw	r2, #1003	; 0x3eb
   202dc:	movw	r1, #33604	; 0x8344
   202e0:	movt	r1, #2
   202e4:	movw	r0, #34076	; 0x851c
   202e8:	movt	r0, #2
   202ec:	bl	12a64 <__assert_fail@plt>
   202f0:	ldr	r3, [pc, #20]	; 2030c <flatcc_builder_truncate_string@@Base+0x94>
   202f4:	mov	r2, #1004	; 0x3ec
   202f8:	movw	r1, #33604	; 0x8344
   202fc:	movt	r1, #2
   20300:	movw	r0, #34216	; 0x85a8
   20304:	movt	r0, #2
   20308:	bl	12a64 <__assert_fail@plt>
   2030c:	andeq	r8, r2, r4, asr #32

00020310 <flatcc_builder_start_vector@@Base>:
   20310:	strd	r4, [sp, #-16]!
   20314:	str	r6, [sp, #8]
   20318:	str	lr, [sp, #12]
   2031c:	mov	r4, r0
   20320:	mov	r6, r1
   20324:	mov	r5, r3
   20328:	cmp	r2, #4
   2032c:	movcs	r1, r2
   20330:	movcc	r1, #4
   20334:	bl	1e814 <flatcc_builder_default_alloc@@Base+0x24c>
   20338:	cmp	r0, #0
   2033c:	bne	203a8 <flatcc_builder_start_vector@@Base+0x98>
   20340:	ldr	r3, [r4, #32]
   20344:	str	r6, [r3, #16]
   20348:	ldr	r3, [r4, #32]
   2034c:	mov	r2, #0
   20350:	str	r2, [r3, #20]
   20354:	ldr	r3, [r4, #32]
   20358:	str	r5, [r3, #24]
   2035c:	ldr	r3, [r4, #32]
   20360:	mov	r2, #4
   20364:	strh	r2, [r3, #14]
   20368:	ldr	r1, [r4, #28]
   2036c:	ldr	r2, [r4, #60]	; 0x3c
   20370:	add	r2, r2, r1
   20374:	str	r2, [r4, #16]
   20378:	ldr	r3, [r4, #64]	; 0x40
   2037c:	sub	r3, r3, r1
   20380:	cmn	r3, #4
   20384:	mvnhi	r3, #3
   20388:	str	r3, [r4, #24]
   2038c:	ldr	r3, [r4, #32]
   20390:	mvn	r2, #3
   20394:	str	r2, [r3, #4]
   20398:	ldrd	r4, [sp]
   2039c:	ldr	r6, [sp, #8]
   203a0:	add	sp, sp, #12
   203a4:	pop	{pc}		; (ldr pc, [sp], #4)
   203a8:	mvn	r0, #0
   203ac:	b	20398 <flatcc_builder_start_vector@@Base+0x88>

000203b0 <flatcc_builder_start_offset_vector@@Base>:
   203b0:	str	r4, [sp, #-8]!
   203b4:	str	lr, [sp, #4]
   203b8:	mov	r4, r0
   203bc:	mov	r1, #4
   203c0:	bl	1e814 <flatcc_builder_default_alloc@@Base+0x24c>
   203c4:	cmp	r0, #0
   203c8:	bne	2042c <flatcc_builder_start_offset_vector@@Base+0x7c>
   203cc:	ldr	r3, [r4, #32]
   203d0:	mov	r2, #4
   203d4:	str	r2, [r3, #16]
   203d8:	ldr	r3, [r4, #32]
   203dc:	mov	r2, #0
   203e0:	str	r2, [r3, #20]
   203e4:	ldr	r3, [r4, #32]
   203e8:	mov	r2, #5
   203ec:	strh	r2, [r3, #14]
   203f0:	ldr	r1, [r4, #28]
   203f4:	ldr	r2, [r4, #60]	; 0x3c
   203f8:	add	r2, r2, r1
   203fc:	str	r2, [r4, #16]
   20400:	ldr	r3, [r4, #64]	; 0x40
   20404:	sub	r3, r3, r1
   20408:	cmn	r3, #4
   2040c:	mvnhi	r3, #3
   20410:	str	r3, [r4, #24]
   20414:	ldr	r3, [r4, #32]
   20418:	mvn	r2, #3
   2041c:	str	r2, [r3, #4]
   20420:	ldr	r4, [sp]
   20424:	add	sp, sp, #4
   20428:	pop	{pc}		; (ldr pc, [sp], #4)
   2042c:	mvn	r0, #0
   20430:	b	20420 <flatcc_builder_start_offset_vector@@Base+0x70>

00020434 <flatcc_builder_start_string@@Base>:
   20434:	str	r4, [sp, #-8]!
   20438:	str	lr, [sp, #4]
   2043c:	mov	r4, r0
   20440:	mov	r1, #1
   20444:	bl	1e814 <flatcc_builder_default_alloc@@Base+0x24c>
   20448:	cmp	r0, #0
   2044c:	bne	204b0 <flatcc_builder_start_string@@Base+0x7c>
   20450:	ldr	r3, [r4, #32]
   20454:	mov	r2, #1
   20458:	str	r2, [r3, #16]
   2045c:	ldr	r3, [r4, #32]
   20460:	mov	r2, #0
   20464:	str	r2, [r3, #20]
   20468:	ldr	r3, [r4, #32]
   2046c:	mov	r2, #6
   20470:	strh	r2, [r3, #14]
   20474:	ldr	r1, [r4, #28]
   20478:	ldr	r2, [r4, #60]	; 0x3c
   2047c:	add	r2, r2, r1
   20480:	str	r2, [r4, #16]
   20484:	ldr	r3, [r4, #64]	; 0x40
   20488:	sub	r3, r3, r1
   2048c:	cmn	r3, #4
   20490:	mvnhi	r3, #3
   20494:	str	r3, [r4, #24]
   20498:	ldr	r3, [r4, #32]
   2049c:	mvn	r2, #3
   204a0:	str	r2, [r3, #4]
   204a4:	ldr	r4, [sp]
   204a8:	add	sp, sp, #4
   204ac:	pop	{pc}		; (ldr pc, [sp], #4)
   204b0:	mvn	r0, #0
   204b4:	b	204a4 <flatcc_builder_start_string@@Base+0x70>

000204b8 <flatcc_builder_reserve_table@@Base>:
   204b8:	strd	r4, [sp, #-20]!	; 0xffffffec
   204bc:	strd	r6, [sp, #8]
   204c0:	str	lr, [sp, #16]
   204c4:	sub	sp, sp, #12
   204c8:	cmp	r1, #0
   204cc:	blt	205ac <flatcc_builder_reserve_table@@Base+0xf4>
   204d0:	mov	r4, r0
   204d4:	ldr	r2, [r0, #32]
   204d8:	ldrh	r6, [r2, #28]
   204dc:	ldr	r3, [r2, #16]
   204e0:	add	r6, r3, r6, lsl #1
   204e4:	add	r1, r1, #2
   204e8:	lsl	r5, r1, #1
   204ec:	add	r2, r6, r5
   204f0:	ldr	r3, [r0, #56]	; 0x38
   204f4:	cmp	r2, r3
   204f8:	bls	20520 <flatcc_builder_reserve_table@@Base+0x68>
   204fc:	mov	r3, #0
   20500:	str	r3, [sp]
   20504:	ldr	r7, [r0, #48]	; 0x30
   20508:	mov	r3, #1
   2050c:	add	r1, r0, #52	; 0x34
   20510:	ldr	r0, [r0, #40]	; 0x28
   20514:	blx	r7
   20518:	cmp	r0, #0
   2051c:	bne	205c8 <flatcc_builder_reserve_table@@Base+0x110>
   20520:	ldr	r3, [r4, #52]	; 0x34
   20524:	adds	r3, r3, r6
   20528:	moveq	r3, #0
   2052c:	streq	r3, [r4, #4]
   20530:	mvneq	r0, #0
   20534:	beq	20598 <flatcc_builder_reserve_table@@Base+0xe0>
   20538:	add	r3, r3, #4
   2053c:	str	r3, [r4, #4]
   20540:	ldr	r3, [r4, #32]
   20544:	ldr	r6, [r3, #20]
   20548:	add	r2, r5, r6
   2054c:	sub	r2, r2, #3
   20550:	ldr	r3, [r4, #80]	; 0x50
   20554:	cmp	r2, r3
   20558:	bls	20580 <flatcc_builder_reserve_table@@Base+0xc8>
   2055c:	mov	r3, #3
   20560:	str	r3, [sp]
   20564:	ldr	r5, [r4, #48]	; 0x30
   20568:	mov	r3, #0
   2056c:	add	r1, r4, #76	; 0x4c
   20570:	ldr	r0, [r4, #40]	; 0x28
   20574:	blx	r5
   20578:	cmp	r0, #0
   2057c:	bne	205e4 <flatcc_builder_reserve_table@@Base+0x12c>
   20580:	ldr	r0, [r4, #76]	; 0x4c
   20584:	add	r0, r0, r6
   20588:	str	r0, [r4]
   2058c:	clz	r0, r0
   20590:	lsr	r0, r0, #5
   20594:	rsb	r0, r0, #0
   20598:	add	sp, sp, #12
   2059c:	ldrd	r4, [sp]
   205a0:	ldrd	r6, [sp, #8]
   205a4:	add	sp, sp, #16
   205a8:	pop	{pc}		; (ldr pc, [sp], #4)
   205ac:	ldr	r3, [pc, #76]	; 20600 <flatcc_builder_reserve_table@@Base+0x148>
   205b0:	movw	r2, #1065	; 0x429
   205b4:	movw	r1, #33604	; 0x8344
   205b8:	movt	r1, #2
   205bc:	movw	r0, #34252	; 0x85cc
   205c0:	movt	r0, #2
   205c4:	bl	12a64 <__assert_fail@plt>
   205c8:	ldr	r3, [pc, #52]	; 20604 <flatcc_builder_reserve_table@@Base+0x14c>
   205cc:	mov	r2, #308	; 0x134
   205d0:	movw	r1, #33604	; 0x8344
   205d4:	movt	r1, #2
   205d8:	movw	r0, #33688	; 0x8398
   205dc:	movt	r0, #2
   205e0:	bl	12a64 <__assert_fail@plt>
   205e4:	ldr	r3, [pc, #24]	; 20604 <flatcc_builder_reserve_table@@Base+0x14c>
   205e8:	mov	r2, #308	; 0x134
   205ec:	movw	r1, #33604	; 0x8344
   205f0:	movt	r1, #2
   205f4:	movw	r0, #33688	; 0x8398
   205f8:	movt	r0, #2
   205fc:	bl	12a64 <__assert_fail@plt>
   20600:	andeq	r8, r2, r4, rrx
   20604:	andeq	r7, r2, r0, lsl lr

00020608 <flatcc_builder_start_table@@Base>:
   20608:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2060c:	strd	r6, [sp, #8]
   20610:	str	r8, [sp, #16]
   20614:	str	lr, [sp, #20]
   20618:	sub	sp, sp, #8
   2061c:	mov	r4, r0
   20620:	mov	r5, r1
   20624:	mov	r1, #4
   20628:	bl	1e814 <flatcc_builder_default_alloc@@Base+0x24c>
   2062c:	subs	r6, r0, #0
   20630:	bne	207dc <flatcc_builder_start_table@@Base+0x1d4>
   20634:	ldr	r2, [r4, #32]
   20638:	ldr	r3, [r4, #4]
   2063c:	ldr	r1, [r4, #52]	; 0x34
   20640:	sub	r3, r3, r1
   20644:	str	r3, [r2, #16]
   20648:	ldr	r2, [r4, #32]
   2064c:	ldr	r3, [r4]
   20650:	ldr	r1, [r4, #76]	; 0x4c
   20654:	sub	r3, r3, r1
   20658:	str	r3, [r2, #20]
   2065c:	ldr	r3, [r4, #32]
   20660:	ldr	r2, [r4, #12]
   20664:	str	r2, [r3, #24]
   20668:	ldr	r3, [r4, #32]
   2066c:	ldrh	r2, [r4, #8]
   20670:	strh	r2, [r3, #28]
   20674:	movw	r3, #15186	; 0x3b52
   20678:	movt	r3, #12137	; 0x2f69
   2067c:	str	r3, [r4, #12]
   20680:	mov	r3, #0
   20684:	strh	r3, [r4, #8]
   20688:	ldr	r3, [r4, #32]
   2068c:	mov	r2, #3
   20690:	strh	r2, [r3, #14]
   20694:	ldr	r2, [r4, #32]
   20698:	ldrh	r7, [r2, #28]
   2069c:	ldr	r3, [r2, #16]
   206a0:	add	r7, r3, r7, lsl #1
   206a4:	add	r5, r5, #2
   206a8:	lsl	r5, r5, #1
   206ac:	add	r2, r7, r5
   206b0:	ldr	r3, [r4, #56]	; 0x38
   206b4:	cmp	r2, r3
   206b8:	bls	206e0 <flatcc_builder_start_table@@Base+0xd8>
   206bc:	mov	r3, #0
   206c0:	str	r3, [sp]
   206c4:	ldr	r8, [r4, #48]	; 0x30
   206c8:	mov	r3, #1
   206cc:	add	r1, r4, #52	; 0x34
   206d0:	ldr	r0, [r4, #40]	; 0x28
   206d4:	blx	r8
   206d8:	cmp	r0, #0
   206dc:	bne	207a4 <flatcc_builder_start_table@@Base+0x19c>
   206e0:	ldr	r3, [r4, #52]	; 0x34
   206e4:	adds	r3, r3, r7
   206e8:	moveq	r3, #0
   206ec:	streq	r3, [r4, #4]
   206f0:	mvneq	r6, #0
   206f4:	beq	20788 <flatcc_builder_start_table@@Base+0x180>
   206f8:	add	r3, r3, #4
   206fc:	str	r3, [r4, #4]
   20700:	ldr	r3, [r4, #32]
   20704:	ldr	r7, [r3, #20]
   20708:	sub	r2, r5, #3
   2070c:	add	r2, r2, r7
   20710:	ldr	r3, [r4, #80]	; 0x50
   20714:	cmp	r2, r3
   20718:	bls	20740 <flatcc_builder_start_table@@Base+0x138>
   2071c:	mov	r3, #3
   20720:	str	r3, [sp]
   20724:	ldr	r5, [r4, #48]	; 0x30
   20728:	mov	r3, #0
   2072c:	add	r1, r4, #76	; 0x4c
   20730:	ldr	r0, [r4, #40]	; 0x28
   20734:	blx	r5
   20738:	cmp	r0, #0
   2073c:	bne	207c0 <flatcc_builder_start_table@@Base+0x1b8>
   20740:	ldr	r3, [r4, #76]	; 0x4c
   20744:	add	r3, r3, r7
   20748:	str	r3, [r4]
   2074c:	cmp	r3, #0
   20750:	beq	207e4 <flatcc_builder_start_table@@Base+0x1dc>
   20754:	ldr	r1, [r4, #28]
   20758:	ldr	r2, [r4, #60]	; 0x3c
   2075c:	add	r2, r2, r1
   20760:	str	r2, [r4, #16]
   20764:	ldr	r3, [r4, #64]	; 0x40
   20768:	sub	r3, r3, r1
   2076c:	movw	r2, #65532	; 0xfffc
   20770:	cmp	r3, r2
   20774:	movwhi	r3, #65532	; 0xfffc
   20778:	str	r3, [r4, #24]
   2077c:	ldr	r3, [r4, #32]
   20780:	movw	r2, #65532	; 0xfffc
   20784:	str	r2, [r3, #4]
   20788:	mov	r0, r6
   2078c:	add	sp, sp, #8
   20790:	ldrd	r4, [sp]
   20794:	ldrd	r6, [sp, #8]
   20798:	ldr	r8, [sp, #16]
   2079c:	add	sp, sp, #20
   207a0:	pop	{pc}		; (ldr pc, [sp], #4)
   207a4:	ldr	r3, [pc, #64]	; 207ec <flatcc_builder_start_table@@Base+0x1e4>
   207a8:	mov	r2, #308	; 0x134
   207ac:	movw	r1, #33604	; 0x8344
   207b0:	movt	r1, #2
   207b4:	movw	r0, #33688	; 0x8398
   207b8:	movt	r0, #2
   207bc:	bl	12a64 <__assert_fail@plt>
   207c0:	ldr	r3, [pc, #36]	; 207ec <flatcc_builder_start_table@@Base+0x1e4>
   207c4:	mov	r2, #308	; 0x134
   207c8:	movw	r1, #33604	; 0x8344
   207cc:	movt	r1, #2
   207d0:	movw	r0, #33688	; 0x8398
   207d4:	movt	r0, #2
   207d8:	bl	12a64 <__assert_fail@plt>
   207dc:	mvn	r6, #0
   207e0:	b	20788 <flatcc_builder_start_table@@Base+0x180>
   207e4:	mvn	r6, #0
   207e8:	b	20788 <flatcc_builder_start_table@@Base+0x180>
   207ec:	andeq	r7, r2, r0, lsl lr

000207f0 <flatcc_builder_create_vtable@@Base>:
   207f0:	strd	r4, [sp, #-16]!
   207f4:	str	r6, [sp, #8]
   207f8:	str	lr, [sp, #12]
   207fc:	sub	sp, sp, #80	; 0x50
   20800:	mov	r5, r0
   20804:	mov	r3, #0
   20808:	str	r3, [sp, #8]
   2080c:	str	r3, [sp, #12]
   20810:	cmp	r2, #0
   20814:	beq	208b0 <flatcc_builder_create_vtable@@Base+0xc0>
   20818:	str	r2, [sp, #8]
   2081c:	str	r1, [sp, #16]
   20820:	str	r2, [sp, #20]
   20824:	mov	r3, #1
   20828:	str	r3, [sp, #12]
   2082c:	ldr	r3, [r0, #152]	; 0x98
   20830:	cmp	r3, #0
   20834:	bne	208c8 <flatcc_builder_create_vtable@@Base+0xd8>
   20838:	ldr	r3, [r0, #180]	; 0xb4
   2083c:	cmp	r3, #0
   20840:	bne	208c8 <flatcc_builder_create_vtable@@Base+0xd8>
   20844:	ldr	r4, [r0, #140]	; 0x8c
   20848:	mov	r3, r2
   2084c:	add	r2, r2, r4
   20850:	str	r2, [r0, #140]	; 0x8c
   20854:	cmp	r4, r2
   20858:	ble	20934 <flatcc_builder_create_vtable@@Base+0x144>
   2085c:	ldr	r3, [pc, #276]	; 20978 <flatcc_builder_create_vtable@@Base+0x188>
   20860:	movw	r2, #673	; 0x2a1
   20864:	movw	r1, #33604	; 0x8344
   20868:	movt	r1, #2
   2086c:	movw	r0, #33688	; 0x8398
   20870:	movt	r0, #2
   20874:	bl	12a64 <__assert_fail@plt>
   20878:	ldr	r3, [pc, #252]	; 2097c <flatcc_builder_create_vtable@@Base+0x18c>
   2087c:	movw	r2, #647	; 0x287
   20880:	movw	r1, #33604	; 0x8344
   20884:	movt	r1, #2
   20888:	movw	r0, #33688	; 0x8398
   2088c:	movt	r0, #2
   20890:	bl	12a64 <__assert_fail@plt>
   20894:	ldr	r3, [pc, #224]	; 2097c <flatcc_builder_create_vtable@@Base+0x18c>
   20898:	movw	r2, #651	; 0x28b
   2089c:	movw	r1, #33604	; 0x8344
   208a0:	movt	r1, #2
   208a4:	movw	r0, #33688	; 0x8398
   208a8:	movt	r0, #2
   208ac:	bl	12a64 <__assert_fail@plt>
   208b0:	ldr	r3, [r0, #152]	; 0x98
   208b4:	cmp	r3, #0
   208b8:	bne	20878 <flatcc_builder_create_vtable@@Base+0x88>
   208bc:	ldr	r3, [r0, #180]	; 0xb4
   208c0:	cmp	r3, #0
   208c4:	beq	20924 <flatcc_builder_create_vtable@@Base+0x134>
   208c8:	ldr	r2, [r5, #136]	; 0x88
   208cc:	ldr	r3, [sp, #8]
   208d0:	sub	r4, r2, r3
   208d4:	cmp	r2, r4
   208d8:	ble	20878 <flatcc_builder_create_vtable@@Base+0x88>
   208dc:	str	r3, [sp]
   208e0:	ldr	r6, [r5, #44]	; 0x2c
   208e4:	mov	r3, r4
   208e8:	ldr	r2, [sp, #12]
   208ec:	add	r1, sp, #16
   208f0:	ldr	r0, [r5, #36]	; 0x24
   208f4:	blx	r6
   208f8:	cmp	r0, #0
   208fc:	bne	20894 <flatcc_builder_create_vtable@@Base+0xa4>
   20900:	str	r4, [r5, #136]	; 0x88
   20904:	cmp	r4, #0
   20908:	addne	r4, r4, #1
   2090c:	mov	r0, r4
   20910:	add	sp, sp, #80	; 0x50
   20914:	ldrd	r4, [sp]
   20918:	ldr	r6, [sp, #8]
   2091c:	add	sp, sp, #12
   20920:	pop	{pc}		; (ldr pc, [sp], #4)
   20924:	ldr	r4, [r5, #140]	; 0x8c
   20928:	ldr	r3, [sp, #8]
   2092c:	add	r2, r3, r4
   20930:	str	r2, [r5, #140]	; 0x8c
   20934:	str	r3, [sp]
   20938:	ldr	r6, [r5, #44]	; 0x2c
   2093c:	mov	r3, r4
   20940:	ldr	r2, [sp, #12]
   20944:	add	r1, sp, #16
   20948:	ldr	r0, [r5, #36]	; 0x24
   2094c:	blx	r6
   20950:	cmp	r0, #0
   20954:	addeq	r4, r4, #1
   20958:	beq	2090c <flatcc_builder_create_vtable@@Base+0x11c>
   2095c:	ldr	r3, [pc, #20]	; 20978 <flatcc_builder_create_vtable@@Base+0x188>
   20960:	movw	r2, #677	; 0x2a5
   20964:	movw	r1, #33604	; 0x8344
   20968:	movt	r1, #2
   2096c:	movw	r0, #33688	; 0x8398
   20970:	movt	r0, #2
   20974:	bl	12a64 <__assert_fail@plt>
   20978:	strdeq	r7, [r2], -r4
   2097c:	andeq	r7, r2, r0, asr #28

00020980 <flatcc_builder_create_cached_vtable@@Base>:
   20980:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20984:	strd	r6, [sp, #8]
   20988:	strd	r8, [sp, #16]
   2098c:	strd	sl, [sp, #24]
   20990:	str	lr, [sp, #32]
   20994:	sub	sp, sp, #36	; 0x24
   20998:	mov	r5, r0
   2099c:	str	r1, [sp, #12]
   209a0:	str	r2, [sp, #16]
   209a4:	mov	r6, r3
   209a8:	ldr	r3, [r0, #116]	; 0x74
   209ac:	cmp	r3, #0
   209b0:	beq	209f8 <flatcc_builder_create_cached_vtable@@Base+0x78>
   209b4:	ldr	r8, [r5, #116]	; 0x74
   209b8:	rsb	r3, r8, #32
   209bc:	lsr	r8, r6, r3
   209c0:	ldr	sl, [r5, #92]	; 0x5c
   209c4:	adds	r9, sl, r8, lsl #2
   209c8:	str	r9, [sp, #20]
   209cc:	beq	20d08 <flatcc_builder_create_cached_vtable@@Base+0x388>
   209d0:	ldr	r6, [sl, r8, lsl #2]
   209d4:	cmp	r6, #0
   209d8:	beq	20c30 <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   209dc:	ldr	fp, [r5, #100]	; 0x64
   209e0:	ldr	r7, [r5, #68]	; 0x44
   209e4:	mov	r3, #0
   209e8:	str	r3, [sp, #28]
   209ec:	str	r8, [sp, #24]
   209f0:	ldr	r8, [sp, #16]
   209f4:	b	20b00 <flatcc_builder_create_cached_vtable@@Base+0x180>
   209f8:	add	r8, r0, #92	; 0x5c
   209fc:	ldr	r4, [r0, #124]	; 0x7c
   20a00:	cmp	r4, #0
   20a04:	bne	20a84 <flatcc_builder_create_cached_vtable@@Base+0x104>
   20a08:	ldr	r3, [r0, #104]	; 0x68
   20a0c:	cmp	r3, #15
   20a10:	bhi	20a3c <flatcc_builder_create_cached_vtable@@Base+0xbc>
   20a14:	mov	r3, #6
   20a18:	str	r3, [sp]
   20a1c:	ldr	r7, [r0, #48]	; 0x30
   20a20:	mov	r3, #0
   20a24:	mov	r2, #16
   20a28:	add	r1, r0, #100	; 0x64
   20a2c:	ldr	r0, [r0, #40]	; 0x28
   20a30:	blx	r7
   20a34:	cmp	r0, #0
   20a38:	bne	20aa0 <flatcc_builder_create_cached_vtable@@Base+0x120>
   20a3c:	ldr	r3, [r5, #100]	; 0x64
   20a40:	cmp	r3, #0
   20a44:	beq	20d20 <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   20a48:	mov	r3, #16
   20a4c:	str	r3, [r5, #124]	; 0x7c
   20a50:	mov	r3, #5
   20a54:	str	r3, [sp]
   20a58:	ldr	r7, [r5, #48]	; 0x30
   20a5c:	mov	r3, #1
   20a60:	mov	r2, #256	; 0x100
   20a64:	mov	r1, r8
   20a68:	ldr	r0, [r5, #40]	; 0x28
   20a6c:	blx	r7
   20a70:	cmp	r0, #0
   20a74:	bne	20d20 <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   20a78:	ldr	r1, [r5, #96]	; 0x60
   20a7c:	mov	r2, #256	; 0x100
   20a80:	b	20ac0 <flatcc_builder_create_cached_vtable@@Base+0x140>
   20a84:	ldr	r3, [pc, #668]	; 20d28 <flatcc_builder_create_cached_vtable@@Base+0x3a8>
   20a88:	movw	r2, #342	; 0x156
   20a8c:	movw	r1, #33604	; 0x8344
   20a90:	movt	r1, #2
   20a94:	movw	r0, #34264	; 0x85d8
   20a98:	movt	r0, #2
   20a9c:	bl	12a64 <__assert_fail@plt>
   20aa0:	ldr	r3, [pc, #644]	; 20d2c <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   20aa4:	mov	r2, #308	; 0x134
   20aa8:	movw	r1, #33604	; 0x8344
   20aac:	movt	r1, #2
   20ab0:	movw	r0, #33688	; 0x8398
   20ab4:	movt	r0, #2
   20ab8:	bl	12a64 <__assert_fail@plt>
   20abc:	mov	r2, r3
   20ac0:	lsl	r3, r2, #1
   20ac4:	cmp	r3, r1
   20ac8:	bls	20abc <flatcc_builder_create_cached_vtable@@Base+0x13c>
   20acc:	lsr	r3, r2, #2
   20ad0:	cmp	r2, #7
   20ad4:	bls	20ae8 <flatcc_builder_create_cached_vtable@@Base+0x168>
   20ad8:	mov	r2, #1
   20adc:	add	r4, r4, #1
   20ae0:	cmp	r3, r2, lsl r4
   20ae4:	bhi	20adc <flatcc_builder_create_cached_vtable@@Base+0x15c>
   20ae8:	str	r4, [r5, #116]	; 0x74
   20aec:	b	209b4 <flatcc_builder_create_cached_vtable@@Base+0x34>
   20af0:	add	r9, r4, #12
   20af4:	ldr	r6, [r4, #12]
   20af8:	cmp	r6, #0
   20afc:	beq	20b90 <flatcc_builder_create_cached_vtable@@Base+0x210>
   20b00:	add	r4, fp, r6
   20b04:	ldr	r3, [r4, #8]
   20b08:	add	r1, r7, r3
   20b0c:	ldrh	r3, [r7, r3]
   20b10:	cmp	r3, r8
   20b14:	bne	20af0 <flatcc_builder_create_cached_vtable@@Base+0x170>
   20b18:	mov	r2, r8
   20b1c:	ldr	r0, [sp, #12]
   20b20:	bl	12998 <memcmp@plt>
   20b24:	cmp	r0, #0
   20b28:	bne	20af0 <flatcc_builder_create_cached_vtable@@Base+0x170>
   20b2c:	ldr	r2, [r4, #4]
   20b30:	ldr	r3, [r5, #152]	; 0x98
   20b34:	cmp	r2, r3
   20b38:	bne	20b80 <flatcc_builder_create_cached_vtable@@Base+0x200>
   20b3c:	ldr	r8, [sp, #24]
   20b40:	ldr	r3, [sp, #20]
   20b44:	cmp	r3, r9
   20b48:	beq	20b60 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   20b4c:	ldr	r3, [r4, #12]
   20b50:	str	r3, [r9]
   20b54:	ldr	r3, [sl, r8, lsl #2]
   20b58:	str	r3, [r4, #12]
   20b5c:	str	r6, [sl, r8, lsl #2]
   20b60:	ldr	r0, [r4]
   20b64:	add	sp, sp, #36	; 0x24
   20b68:	ldrd	r4, [sp]
   20b6c:	ldrd	r6, [sp, #8]
   20b70:	ldrd	r8, [sp, #16]
   20b74:	ldrd	sl, [sp, #24]
   20b78:	add	sp, sp, #32
   20b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   20b80:	add	r9, r4, #12
   20b84:	ldr	r6, [r4, #12]
   20b88:	str	r4, [sp, #28]
   20b8c:	b	20af8 <flatcc_builder_create_cached_vtable@@Base+0x178>
   20b90:	ldr	r8, [sp, #24]
   20b94:	ldr	r4, [r5, #124]	; 0x7c
   20b98:	add	r2, r4, #16
   20b9c:	ldr	r3, [r5, #104]	; 0x68
   20ba0:	cmp	r2, r3
   20ba4:	bls	20bcc <flatcc_builder_create_cached_vtable@@Base+0x24c>
   20ba8:	mov	r3, #6
   20bac:	str	r3, [sp]
   20bb0:	ldr	r6, [r5, #48]	; 0x30
   20bb4:	mov	r3, #0
   20bb8:	add	r1, r5, #100	; 0x64
   20bbc:	ldr	r0, [r5, #40]	; 0x28
   20bc0:	blx	r6
   20bc4:	cmp	r0, #0
   20bc8:	bne	20c3c <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   20bcc:	ldr	r6, [r5, #100]	; 0x64
   20bd0:	adds	r7, r6, r4
   20bd4:	beq	20d10 <flatcc_builder_create_cached_vtable@@Base+0x390>
   20bd8:	ldr	r3, [r5, #124]	; 0x7c
   20bdc:	add	r2, r3, #16
   20be0:	str	r2, [r5, #124]	; 0x7c
   20be4:	ldr	r2, [r5, #152]	; 0x98
   20be8:	str	r2, [r7, #4]
   20bec:	ldr	r2, [sl, r8, lsl #2]
   20bf0:	str	r2, [r7, #12]
   20bf4:	str	r3, [sl, r8, lsl #2]
   20bf8:	ldr	r2, [sp, #16]
   20bfc:	ldr	r1, [sp, #12]
   20c00:	mov	r0, r5
   20c04:	bl	207f0 <flatcc_builder_create_vtable@@Base>
   20c08:	str	r0, [r6, r4]
   20c0c:	cmp	r0, #0
   20c10:	beq	20b64 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   20c14:	ldr	r3, [sp, #28]
   20c18:	cmp	r3, #0
   20c1c:	beq	20c58 <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   20c20:	ldr	r3, [r3, #8]
   20c24:	str	r3, [r7, #8]
   20c28:	ldr	r0, [r6, r4]
   20c2c:	b	20b64 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   20c30:	mov	r3, #0
   20c34:	str	r3, [sp, #28]
   20c38:	b	20b94 <flatcc_builder_create_cached_vtable@@Base+0x214>
   20c3c:	ldr	r3, [pc, #232]	; 20d2c <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   20c40:	mov	r2, #308	; 0x134
   20c44:	movw	r1, #33604	; 0x8344
   20c48:	movt	r1, #2
   20c4c:	movw	r0, #33688	; 0x8398
   20c50:	movt	r0, #2
   20c54:	bl	12a64 <__assert_fail@plt>
   20c58:	ldr	r2, [r5, #172]	; 0xac
   20c5c:	cmp	r2, #0
   20c60:	beq	20c78 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   20c64:	ldr	r3, [r5, #120]	; 0x78
   20c68:	ldr	r1, [sp, #16]
   20c6c:	add	r3, r1, r3
   20c70:	cmp	r2, r3
   20c74:	bcc	20ce0 <flatcc_builder_create_cached_vtable@@Base+0x360>
   20c78:	ldr	r8, [r5, #120]	; 0x78
   20c7c:	ldr	r3, [sp, #16]
   20c80:	add	r2, r8, r3
   20c84:	ldr	r3, [r5, #72]	; 0x48
   20c88:	cmp	r2, r3
   20c8c:	bls	20cb4 <flatcc_builder_create_cached_vtable@@Base+0x334>
   20c90:	mov	r3, #2
   20c94:	str	r3, [sp]
   20c98:	ldr	sl, [r5, #48]	; 0x30
   20c9c:	mov	r3, #0
   20ca0:	add	r1, r5, #68	; 0x44
   20ca4:	ldr	r0, [r5, #40]	; 0x28
   20ca8:	blx	sl
   20cac:	cmp	r0, #0
   20cb0:	bne	20cec <flatcc_builder_create_cached_vtable@@Base+0x36c>
   20cb4:	ldr	r3, [r5, #68]	; 0x44
   20cb8:	adds	r0, r3, r8
   20cbc:	beq	20d18 <flatcc_builder_create_cached_vtable@@Base+0x398>
   20cc0:	ldr	r3, [r5, #120]	; 0x78
   20cc4:	str	r3, [r7, #8]
   20cc8:	ldr	r2, [sp, #16]
   20ccc:	add	r3, r2, r3
   20cd0:	str	r3, [r5, #120]	; 0x78
   20cd4:	ldr	r1, [sp, #12]
   20cd8:	bl	1298c <memcpy@plt>
   20cdc:	b	20c28 <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   20ce0:	mov	r0, r5
   20ce4:	bl	1eb88 <flatcc_builder_flush_vtable_cache@@Base>
   20ce8:	b	20c28 <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   20cec:	ldr	r3, [pc, #56]	; 20d2c <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   20cf0:	mov	r2, #308	; 0x134
   20cf4:	movw	r1, #33604	; 0x8344
   20cf8:	movt	r1, #2
   20cfc:	movw	r0, #33688	; 0x8398
   20d00:	movt	r0, #2
   20d04:	bl	12a64 <__assert_fail@plt>
   20d08:	mov	r0, #0
   20d0c:	b	20b64 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   20d10:	mov	r0, #0
   20d14:	b	20b64 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   20d18:	mvn	r0, #0
   20d1c:	b	20b64 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   20d20:	mov	r0, #0
   20d24:	b	20b64 <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   20d28:	andeq	r8, r2, r4, lsl #1
   20d2c:	andeq	r7, r2, r0, lsl lr

00020d30 <flatcc_builder_create_table@@Base>:
   20d30:	strd	r4, [sp, #-20]!	; 0xffffffec
   20d34:	strd	r6, [sp, #8]
   20d38:	str	lr, [sp, #16]
   20d3c:	sub	sp, sp, #92	; 0x5c
   20d40:	ldr	r7, [sp, #116]	; 0x74
   20d44:	ldr	ip, [sp, #120]	; 0x78
   20d48:	cmp	r7, #0
   20d4c:	blt	20e94 <flatcc_builder_create_table@@Base+0x164>
   20d50:	mov	r4, r0
   20d54:	tst	ip, #1
   20d58:	beq	20eb0 <flatcc_builder_create_table@@Base+0x180>
   20d5c:	cmp	r3, #4
   20d60:	movcc	r3, #4
   20d64:	ldrh	r0, [r0, #128]	; 0x80
   20d68:	cmp	r0, r3
   20d6c:	strhcc	r3, [r4, #128]	; 0x80
   20d70:	ldr	r0, [r4, #136]	; 0x88
   20d74:	sub	r6, r0, r2
   20d78:	sub	r3, r3, #1
   20d7c:	and	r6, r6, r3
   20d80:	sub	r0, r0, r2
   20d84:	sub	r0, r0, #4
   20d88:	sub	ip, ip, #1
   20d8c:	sub	ip, r0, ip
   20d90:	sub	ip, ip, r6
   20d94:	str	ip, [sp, #84]	; 0x54
   20d98:	cmp	r7, #0
   20d9c:	ble	20dcc <flatcc_builder_create_table@@Base+0x9c>
   20da0:	ldr	ip, [sp, #112]	; 0x70
   20da4:	add	r7, ip, r7, lsl #1
   20da8:	sub	r0, r6, r0
   20dac:	sub	lr, r0, #4
   20db0:	ldrh	r3, [ip], #2
   20db4:	sub	r5, lr, r3
   20db8:	ldr	r0, [r1, r3]
   20dbc:	add	r0, r0, r5
   20dc0:	str	r0, [r1, r3]
   20dc4:	cmp	r7, ip
   20dc8:	bne	20db0 <flatcc_builder_create_table@@Base+0x80>
   20dcc:	mov	r3, #4
   20dd0:	str	r3, [sp, #12]
   20dd4:	add	r0, sp, #84	; 0x54
   20dd8:	str	r0, [sp, #20]
   20ddc:	str	r3, [sp, #24]
   20de0:	mov	r3, #1
   20de4:	str	r3, [sp, #16]
   20de8:	cmp	r2, #0
   20dec:	beq	20e08 <flatcc_builder_create_table@@Base+0xd8>
   20df0:	add	r3, r2, #4
   20df4:	str	r3, [sp, #12]
   20df8:	str	r1, [sp, #28]
   20dfc:	str	r2, [sp, #32]
   20e00:	mov	r3, #2
   20e04:	str	r3, [sp, #16]
   20e08:	cmp	r6, #0
   20e0c:	beq	20e40 <flatcc_builder_create_table@@Base+0x110>
   20e10:	ldr	r3, [sp, #12]
   20e14:	add	r3, r3, r6
   20e18:	str	r3, [sp, #12]
   20e1c:	ldr	r3, [sp, #16]
   20e20:	add	r3, r3, #1
   20e24:	add	r2, sp, #88	; 0x58
   20e28:	add	r1, r2, r3, lsl #3
   20e2c:	movw	r2, #31732	; 0x7bf4
   20e30:	movt	r2, #2
   20e34:	str	r2, [r1, #-76]	; 0xffffffb4
   20e38:	str	r6, [r1, #-72]	; 0xffffffb8
   20e3c:	str	r3, [sp, #16]
   20e40:	ldr	r2, [r4, #136]	; 0x88
   20e44:	ldr	r3, [sp, #12]
   20e48:	sub	r5, r2, r3
   20e4c:	cmp	r2, r5
   20e50:	ble	20ecc <flatcc_builder_create_table@@Base+0x19c>
   20e54:	str	r3, [sp]
   20e58:	ldr	r6, [r4, #44]	; 0x2c
   20e5c:	mov	r3, r5
   20e60:	ldr	r2, [sp, #16]
   20e64:	add	r1, sp, #20
   20e68:	ldr	r0, [r4, #36]	; 0x24
   20e6c:	blx	r6
   20e70:	cmp	r0, #0
   20e74:	bne	20ee8 <flatcc_builder_create_table@@Base+0x1b8>
   20e78:	str	r5, [r4, #136]	; 0x88
   20e7c:	mov	r0, r5
   20e80:	add	sp, sp, #92	; 0x5c
   20e84:	ldrd	r4, [sp]
   20e88:	ldrd	r6, [sp, #8]
   20e8c:	add	sp, sp, #16
   20e90:	pop	{pc}		; (ldr pc, [sp], #4)
   20e94:	ldr	r3, [pc, #104]	; 20f04 <flatcc_builder_create_table@@Base+0x1d4>
   20e98:	movw	r2, #1237	; 0x4d5
   20e9c:	movw	r1, #33604	; 0x8344
   20ea0:	movt	r1, #2
   20ea4:	movw	r0, #34280	; 0x85e8
   20ea8:	movt	r0, #2
   20eac:	bl	12a64 <__assert_fail@plt>
   20eb0:	ldr	r3, [pc, #76]	; 20f04 <flatcc_builder_create_table@@Base+0x1d4>
   20eb4:	movw	r2, #1243	; 0x4db
   20eb8:	movw	r1, #33604	; 0x8344
   20ebc:	movt	r1, #2
   20ec0:	movw	r0, #34300	; 0x85fc
   20ec4:	movt	r0, #2
   20ec8:	bl	12a64 <__assert_fail@plt>
   20ecc:	ldr	r3, [pc, #52]	; 20f08 <flatcc_builder_create_table@@Base+0x1d8>
   20ed0:	movw	r2, #647	; 0x287
   20ed4:	movw	r1, #33604	; 0x8344
   20ed8:	movt	r1, #2
   20edc:	movw	r0, #33688	; 0x8398
   20ee0:	movt	r0, #2
   20ee4:	bl	12a64 <__assert_fail@plt>
   20ee8:	ldr	r3, [pc, #24]	; 20f08 <flatcc_builder_create_table@@Base+0x1d8>
   20eec:	movw	r2, #651	; 0x28b
   20ef0:	movw	r1, #33604	; 0x8344
   20ef4:	movt	r1, #2
   20ef8:	movw	r0, #33688	; 0x8398
   20efc:	movt	r0, #2
   20f00:	bl	12a64 <__assert_fail@plt>
   20f04:	muleq	r2, r0, r0
   20f08:	andeq	r7, r2, r0, asr #28

00020f0c <flatcc_builder_check_required_field@@Base>:
   20f0c:	ldr	r3, [r0, #32]
   20f10:	ldrh	r3, [r3, #14]
   20f14:	cmp	r3, #3
   20f18:	bne	20f40 <flatcc_builder_check_required_field@@Base+0x34>
   20f1c:	ldrh	r3, [r0, #8]
   20f20:	cmp	r3, r1
   20f24:	bls	20f64 <flatcc_builder_check_required_field@@Base+0x58>
   20f28:	ldr	r3, [r0, #4]
   20f2c:	lsl	r1, r1, #1
   20f30:	ldrh	r0, [r3, r1]
   20f34:	adds	r0, r0, #0
   20f38:	movne	r0, #1
   20f3c:	bx	lr
   20f40:	str	r4, [sp, #-8]!
   20f44:	str	lr, [sp, #4]
   20f48:	ldr	r3, [pc, #28]	; 20f6c <flatcc_builder_check_required_field@@Base+0x60>
   20f4c:	movw	r2, #1272	; 0x4f8
   20f50:	movw	r1, #33604	; 0x8344
   20f54:	movt	r1, #2
   20f58:	movw	r0, #34312	; 0x8608
   20f5c:	movt	r0, #2
   20f60:	bl	12a64 <__assert_fail@plt>
   20f64:	mov	r0, #0
   20f68:	bx	lr
   20f6c:	andeq	r8, r2, ip, lsr #1

00020f70 <flatcc_builder_check_union_field@@Base>:
   20f70:	ldr	r3, [r0, #32]
   20f74:	ldrh	r3, [r3, #14]
   20f78:	cmp	r3, #3
   20f7c:	bne	20fd0 <flatcc_builder_check_union_field@@Base+0x60>
   20f80:	cmp	r1, #0
   20f84:	beq	2101c <flatcc_builder_check_union_field@@Base+0xac>
   20f88:	ldrh	r3, [r0, #8]
   20f8c:	cmp	r3, r1
   20f90:	bls	21024 <flatcc_builder_check_union_field@@Base+0xb4>
   20f94:	ldr	r3, [r0, #4]
   20f98:	sub	r1, r1, #-2147483647	; 0x80000001
   20f9c:	lsl	r1, r1, #1
   20fa0:	ldrh	r2, [r3, r1]
   20fa4:	cmp	r2, #0
   20fa8:	beq	20ff4 <flatcc_builder_check_union_field@@Base+0x84>
   20fac:	ldr	r0, [r0, #16]
   20fb0:	ldrb	r2, [r0, r2]
   20fb4:	cmp	r2, #0
   20fb8:	bne	21008 <flatcc_builder_check_union_field@@Base+0x98>
   20fbc:	add	r1, r3, r1
   20fc0:	ldrh	r0, [r1, #2]
   20fc4:	clz	r0, r0
   20fc8:	lsr	r0, r0, #5
   20fcc:	bx	lr
   20fd0:	str	r4, [sp, #-8]!
   20fd4:	str	lr, [sp, #4]
   20fd8:	ldr	r3, [pc, #76]	; 2102c <flatcc_builder_check_union_field@@Base+0xbc>
   20fdc:	movw	r2, #1279	; 0x4ff
   20fe0:	movw	r1, #33604	; 0x8344
   20fe4:	movt	r1, #2
   20fe8:	movw	r0, #34312	; 0x8608
   20fec:	movt	r0, #2
   20ff0:	bl	12a64 <__assert_fail@plt>
   20ff4:	add	r1, r3, r1
   20ff8:	ldrh	r0, [r1, #2]
   20ffc:	clz	r0, r0
   21000:	lsr	r0, r0, #5
   21004:	bx	lr
   21008:	add	r1, r3, r1
   2100c:	ldrh	r0, [r1, #2]
   21010:	adds	r0, r0, #0
   21014:	movne	r0, #1
   21018:	bx	lr
   2101c:	mov	r0, #0
   21020:	bx	lr
   21024:	mov	r0, #0
   21028:	bx	lr
   2102c:	ldrdeq	r8, [r2], -r0

00021030 <flatcc_builder_check_required@@Base>:
   21030:	ldr	r3, [r0, #32]
   21034:	ldrh	r3, [r3, #14]
   21038:	cmp	r3, #3
   2103c:	bne	21098 <flatcc_builder_check_required@@Base+0x68>
   21040:	ldrh	r3, [r0, #8]
   21044:	cmp	r3, r2
   21048:	blt	210c4 <flatcc_builder_check_required@@Base+0x94>
   2104c:	cmp	r2, #0
   21050:	ble	210cc <flatcc_builder_check_required@@Base+0x9c>
   21054:	ldr	ip, [r0, #4]
   21058:	ldrh	r3, [r1]
   2105c:	lsl	r3, r3, #1
   21060:	ldrh	r3, [ip, r3]
   21064:	cmp	r3, #0
   21068:	beq	210d4 <flatcc_builder_check_required@@Base+0xa4>
   2106c:	add	r0, r1, #2
   21070:	add	r2, r1, r2, lsl #1
   21074:	cmp	r0, r2
   21078:	beq	210bc <flatcc_builder_check_required@@Base+0x8c>
   2107c:	ldrh	r3, [r0], #2
   21080:	lsl	r3, r3, #1
   21084:	ldrh	r3, [ip, r3]
   21088:	cmp	r3, #0
   2108c:	bne	21074 <flatcc_builder_check_required@@Base+0x44>
   21090:	mov	r0, #0
   21094:	bx	lr
   21098:	str	r4, [sp, #-8]!
   2109c:	str	lr, [sp, #4]
   210a0:	ldr	r3, [pc, #52]	; 210dc <flatcc_builder_check_required@@Base+0xac>
   210a4:	movw	r2, #1297	; 0x511
   210a8:	movw	r1, #33604	; 0x8344
   210ac:	movt	r1, #2
   210b0:	movw	r0, #34312	; 0x8608
   210b4:	movt	r0, #2
   210b8:	bl	12a64 <__assert_fail@plt>
   210bc:	mov	r0, #1
   210c0:	bx	lr
   210c4:	mov	r0, #0
   210c8:	bx	lr
   210cc:	mov	r0, #1
   210d0:	bx	lr
   210d4:	mov	r0, #0
   210d8:	bx	lr
   210dc:	strdeq	r8, [r2], -r4

000210e0 <flatcc_builder_end_table@@Base>:
   210e0:	strd	r4, [sp, #-20]!	; 0xffffffec
   210e4:	strd	r6, [sp, #8]
   210e8:	str	lr, [sp, #16]
   210ec:	sub	sp, sp, #20
   210f0:	ldr	r3, [r0, #32]
   210f4:	ldrh	r3, [r3, #14]
   210f8:	cmp	r3, #3
   210fc:	bne	2117c <flatcc_builder_end_table@@Base+0x9c>
   21100:	mov	r4, r0
   21104:	ldr	r2, [r0, #4]
   21108:	sub	r6, r2, #4
   2110c:	ldrh	r5, [r0, #8]
   21110:	add	r5, r5, #2
   21114:	lsl	r5, r5, #1
   21118:	uxth	r5, r5
   2111c:	strh	r5, [r2, #-4]
   21120:	ldr	r3, [r0, #20]
   21124:	add	r3, r3, #4
   21128:	uxth	r1, r3
   2112c:	strh	r1, [r2, #-2]
   21130:	ldr	r3, [r0, #12]
   21134:	eor	r3, r3, r5
   21138:	movw	r2, #31153	; 0x79b1
   2113c:	movt	r2, #40503	; 0x9e37
   21140:	mul	r3, r2, r3
   21144:	eor	r3, r3, r1
   21148:	mul	r3, r2, r3
   2114c:	str	r3, [r0, #12]
   21150:	mov	r2, r5
   21154:	mov	r1, r6
   21158:	bl	20980 <flatcc_builder_create_cached_vtable@@Base>
   2115c:	subs	r7, r0, #0
   21160:	bne	21198 <flatcc_builder_end_table@@Base+0xb8>
   21164:	mov	r0, r7
   21168:	add	sp, sp, #20
   2116c:	ldrd	r4, [sp]
   21170:	ldrd	r6, [sp, #8]
   21174:	add	sp, sp, #16
   21178:	pop	{pc}		; (ldr pc, [sp], #4)
   2117c:	ldr	r3, [pc, #284]	; 212a0 <flatcc_builder_end_table@@Base+0x1c0>
   21180:	movw	r2, #1317	; 0x525
   21184:	movw	r1, #33604	; 0x8344
   21188:	movt	r1, #2
   2118c:	movw	r0, #34312	; 0x8608
   21190:	movt	r0, #2
   21194:	bl	12a64 <__assert_fail@plt>
   21198:	mov	r2, r5
   2119c:	mov	r1, #0
   211a0:	mov	r0, r6
   211a4:	bl	12a1c <memset@plt>
   211a8:	ldr	r3, [r4, #32]
   211ac:	ldr	r2, [r4, #76]	; 0x4c
   211b0:	ldr	r3, [r3, #20]
   211b4:	add	r2, r2, r3
   211b8:	str	r7, [sp, #8]
   211bc:	ldr	r3, [r4]
   211c0:	sub	r3, r3, r2
   211c4:	asr	r3, r3, #1
   211c8:	str	r3, [sp, #4]
   211cc:	str	r2, [sp]
   211d0:	ldrh	r3, [r4, #130]	; 0x82
   211d4:	ldr	r2, [r4, #20]
   211d8:	ldr	r1, [r4, #16]
   211dc:	mov	r0, r4
   211e0:	bl	20d30 <flatcc_builder_create_table@@Base>
   211e4:	subs	r7, r0, #0
   211e8:	beq	21164 <flatcc_builder_end_table@@Base+0x84>
   211ec:	ldr	r3, [r4, #32]
   211f0:	ldr	r2, [r3, #24]
   211f4:	str	r2, [r4, #12]
   211f8:	ldrh	r2, [r3, #28]
   211fc:	strh	r2, [r4, #8]
   21200:	ldr	r2, [r4, #52]	; 0x34
   21204:	ldr	r1, [r3, #16]
   21208:	add	r2, r2, r1
   2120c:	str	r2, [r4, #4]
   21210:	ldr	r2, [r4, #76]	; 0x4c
   21214:	ldr	r3, [r3, #20]
   21218:	add	r3, r2, r3
   2121c:	str	r3, [r4]
   21220:	ldr	r2, [r4, #20]
   21224:	mov	r1, #0
   21228:	ldr	r0, [r4, #16]
   2122c:	bl	12a1c <memset@plt>
   21230:	ldr	r2, [r4, #32]
   21234:	ldr	r3, [r2, #8]
   21238:	str	r3, [r4, #20]
   2123c:	ldr	r0, [r2]
   21240:	str	r0, [r4, #28]
   21244:	ldr	r1, [r2, #4]
   21248:	ldr	r3, [r4, #60]	; 0x3c
   2124c:	add	r3, r3, r0
   21250:	str	r3, [r4, #16]
   21254:	ldr	r3, [r4, #64]	; 0x40
   21258:	sub	r3, r3, r0
   2125c:	cmp	r3, r1
   21260:	movcs	r3, r1
   21264:	str	r3, [r4, #24]
   21268:	str	r1, [r2, #4]
   2126c:	ldrh	r3, [r4, #130]	; 0x82
   21270:	ldrh	r2, [r4, #128]	; 0x80
   21274:	cmp	r2, r3
   21278:	strhcc	r3, [r4, #128]	; 0x80
   2127c:	ldr	r3, [r4, #32]
   21280:	ldrh	r2, [r3, #12]
   21284:	strh	r2, [r4, #130]	; 0x82
   21288:	sub	r3, r3, #36	; 0x24
   2128c:	str	r3, [r4, #32]
   21290:	ldr	r3, [r4, #156]	; 0x9c
   21294:	sub	r3, r3, #1
   21298:	str	r3, [r4, #156]	; 0x9c
   2129c:	b	21164 <flatcc_builder_end_table@@Base+0x84>
   212a0:	andeq	r8, r2, r4, lsl r1

000212a4 <flatcc_builder_create_vector@@Base>:
   212a4:	strd	r4, [sp, #-16]!
   212a8:	str	r6, [sp, #8]
   212ac:	str	lr, [sp, #12]
   212b0:	sub	sp, sp, #88	; 0x58
   212b4:	mov	r4, r0
   212b8:	ldrh	r0, [sp, #104]	; 0x68
   212bc:	ldr	ip, [sp, #108]	; 0x6c
   212c0:	cmp	r2, ip
   212c4:	bhi	213b8 <flatcc_builder_create_vector@@Base+0x114>
   212c8:	cmp	r0, #4
   212cc:	movcc	r0, #4
   212d0:	ldrh	ip, [r4, #128]	; 0x80
   212d4:	cmp	ip, r0
   212d8:	strhcc	r0, [r4, #128]	; 0x80
   212dc:	mul	r3, r3, r2
   212e0:	str	r2, [sp, #84]	; 0x54
   212e4:	ldr	r2, [r4, #136]	; 0x88
   212e8:	sub	ip, r2, r3
   212ec:	sub	r0, r0, #1
   212f0:	and	r0, r0, ip
   212f4:	mov	ip, #4
   212f8:	str	ip, [sp, #12]
   212fc:	add	lr, sp, #84	; 0x54
   21300:	str	lr, [sp, #20]
   21304:	str	ip, [sp, #24]
   21308:	mov	ip, #1
   2130c:	str	ip, [sp, #16]
   21310:	cmp	r3, #0
   21314:	beq	21330 <flatcc_builder_create_vector@@Base+0x8c>
   21318:	add	ip, r3, #4
   2131c:	str	ip, [sp, #12]
   21320:	str	r1, [sp, #28]
   21324:	str	r3, [sp, #32]
   21328:	mov	r3, #2
   2132c:	str	r3, [sp, #16]
   21330:	cmp	r0, #0
   21334:	beq	21368 <flatcc_builder_create_vector@@Base+0xc4>
   21338:	ldr	r3, [sp, #12]
   2133c:	add	r3, r3, r0
   21340:	str	r3, [sp, #12]
   21344:	ldr	r3, [sp, #16]
   21348:	add	r3, r3, #1
   2134c:	add	r1, sp, #88	; 0x58
   21350:	add	ip, r1, r3, lsl #3
   21354:	movw	r1, #31732	; 0x7bf4
   21358:	movt	r1, #2
   2135c:	str	r1, [ip, #-76]	; 0xffffffb4
   21360:	str	r0, [ip, #-72]	; 0xffffffb8
   21364:	str	r3, [sp, #16]
   21368:	ldr	r3, [sp, #12]
   2136c:	sub	r5, r2, r3
   21370:	cmp	r2, r5
   21374:	ble	213d4 <flatcc_builder_create_vector@@Base+0x130>
   21378:	str	r3, [sp]
   2137c:	ldr	r6, [r4, #44]	; 0x2c
   21380:	mov	r3, r5
   21384:	ldr	r2, [sp, #16]
   21388:	add	r1, sp, #20
   2138c:	ldr	r0, [r4, #36]	; 0x24
   21390:	blx	r6
   21394:	cmp	r0, #0
   21398:	bne	213f0 <flatcc_builder_create_vector@@Base+0x14c>
   2139c:	str	r5, [r4, #136]	; 0x88
   213a0:	mov	r0, r5
   213a4:	add	sp, sp, #88	; 0x58
   213a8:	ldrd	r4, [sp]
   213ac:	ldr	r6, [sp, #8]
   213b0:	add	sp, sp, #12
   213b4:	pop	{pc}		; (ldr pc, [sp], #4)
   213b8:	ldr	r3, [pc, #76]	; 2140c <flatcc_builder_create_vector@@Base+0x168>
   213bc:	movw	r2, #1365	; 0x555
   213c0:	movw	r1, #33604	; 0x8344
   213c4:	movt	r1, #2
   213c8:	movw	r0, #34356	; 0x8634
   213cc:	movt	r0, #2
   213d0:	bl	12a64 <__assert_fail@plt>
   213d4:	ldr	r3, [pc, #52]	; 21410 <flatcc_builder_create_vector@@Base+0x16c>
   213d8:	movw	r2, #647	; 0x287
   213dc:	movw	r1, #33604	; 0x8344
   213e0:	movt	r1, #2
   213e4:	movw	r0, #33688	; 0x8398
   213e8:	movt	r0, #2
   213ec:	bl	12a64 <__assert_fail@plt>
   213f0:	ldr	r3, [pc, #24]	; 21410 <flatcc_builder_create_vector@@Base+0x16c>
   213f4:	movw	r2, #651	; 0x28b
   213f8:	movw	r1, #33604	; 0x8344
   213fc:	movt	r1, #2
   21400:	movw	r0, #33688	; 0x8398
   21404:	movt	r0, #2
   21408:	bl	12a64 <__assert_fail@plt>
   2140c:	andeq	r8, r2, r0, lsr r1
   21410:	andeq	r7, r2, r0, asr #28

00021414 <flatcc_builder_end_vector@@Base>:
   21414:	strd	r4, [sp, #-12]!
   21418:	str	lr, [sp, #8]
   2141c:	sub	sp, sp, #12
   21420:	ldr	r1, [r0, #32]
   21424:	ldrh	r3, [r1, #14]
   21428:	cmp	r3, #4
   2142c:	bne	21470 <flatcc_builder_end_vector@@Base+0x5c>
   21430:	mov	r4, r0
   21434:	ldr	r3, [r1, #16]
   21438:	ldr	r2, [r1, #20]
   2143c:	ldr	r1, [r1, #24]
   21440:	str	r1, [sp, #4]
   21444:	ldrh	r1, [r0, #130]	; 0x82
   21448:	str	r1, [sp]
   2144c:	ldr	r1, [r0, #16]
   21450:	bl	212a4 <flatcc_builder_create_vector@@Base>
   21454:	subs	r5, r0, #0
   21458:	bne	2148c <flatcc_builder_end_vector@@Base+0x78>
   2145c:	mov	r0, r5
   21460:	add	sp, sp, #12
   21464:	ldrd	r4, [sp]
   21468:	add	sp, sp, #8
   2146c:	pop	{pc}		; (ldr pc, [sp], #4)
   21470:	ldr	r3, [pc, #148]	; 2150c <flatcc_builder_end_vector@@Base+0xf8>
   21474:	movw	r2, #1400	; 0x578
   21478:	movw	r1, #33604	; 0x8344
   2147c:	movt	r1, #2
   21480:	movw	r0, #33916	; 0x847c
   21484:	movt	r0, #2
   21488:	bl	12a64 <__assert_fail@plt>
   2148c:	ldr	r2, [r4, #20]
   21490:	mov	r1, #0
   21494:	ldr	r0, [r4, #16]
   21498:	bl	12a1c <memset@plt>
   2149c:	ldr	r2, [r4, #32]
   214a0:	ldr	r3, [r2, #8]
   214a4:	str	r3, [r4, #20]
   214a8:	ldr	r0, [r2]
   214ac:	str	r0, [r4, #28]
   214b0:	ldr	r1, [r2, #4]
   214b4:	ldr	r3, [r4, #60]	; 0x3c
   214b8:	add	r3, r3, r0
   214bc:	str	r3, [r4, #16]
   214c0:	ldr	r3, [r4, #64]	; 0x40
   214c4:	sub	r3, r3, r0
   214c8:	cmp	r3, r1
   214cc:	movcs	r3, r1
   214d0:	str	r3, [r4, #24]
   214d4:	str	r1, [r2, #4]
   214d8:	ldrh	r3, [r4, #130]	; 0x82
   214dc:	ldrh	r2, [r4, #128]	; 0x80
   214e0:	cmp	r2, r3
   214e4:	strhcc	r3, [r4, #128]	; 0x80
   214e8:	ldr	r3, [r4, #32]
   214ec:	ldrh	r2, [r3, #12]
   214f0:	strh	r2, [r4, #130]	; 0x82
   214f4:	sub	r3, r3, #36	; 0x24
   214f8:	str	r3, [r4, #32]
   214fc:	ldr	r3, [r4, #156]	; 0x9c
   21500:	sub	r3, r3, #1
   21504:	str	r3, [r4, #156]	; 0x9c
   21508:	b	2145c <flatcc_builder_end_vector@@Base+0x48>
   2150c:	andeq	r8, r2, r0, asr r1

00021510 <flatcc_builder_vector_count@@Base>:
   21510:	ldr	r3, [r0, #32]
   21514:	ldr	r0, [r3, #20]
   21518:	bx	lr

0002151c <flatcc_builder_vector_edit@@Base>:
   2151c:	ldr	r0, [r0, #16]
   21520:	bx	lr

00021524 <flatcc_builder_create_offset_vector_direct@@Base>:
   21524:	str	r4, [sp, #-8]!
   21528:	str	lr, [sp, #4]
   2152c:	mov	r3, #0
   21530:	bl	1e980 <flatcc_builder_default_alloc@@Base+0x3b8>
   21534:	ldr	r4, [sp]
   21538:	add	sp, sp, #4
   2153c:	pop	{pc}		; (ldr pc, [sp], #4)

00021540 <flatcc_builder_end_offset_vector@@Base>:
   21540:	strd	r4, [sp, #-16]!
   21544:	str	r6, [sp, #8]
   21548:	str	lr, [sp, #12]
   2154c:	ldr	r3, [r0, #32]
   21550:	ldrh	r2, [r3, #14]
   21554:	cmp	r2, #5
   21558:	bne	21588 <flatcc_builder_end_offset_vector@@Base+0x48>
   2155c:	mov	r4, r0
   21560:	ldr	r2, [r3, #20]
   21564:	ldr	r1, [r0, #16]
   21568:	bl	21524 <flatcc_builder_create_offset_vector_direct@@Base>
   2156c:	subs	r5, r0, #0
   21570:	bne	215a4 <flatcc_builder_end_offset_vector@@Base+0x64>
   21574:	mov	r0, r5
   21578:	ldrd	r4, [sp]
   2157c:	ldr	r6, [sp, #8]
   21580:	add	sp, sp, #12
   21584:	pop	{pc}		; (ldr pc, [sp], #4)
   21588:	ldr	r3, [pc, #148]	; 21624 <flatcc_builder_end_offset_vector@@Base+0xe4>
   2158c:	movw	r2, #1480	; 0x5c8
   21590:	movw	r1, #33604	; 0x8344
   21594:	movt	r1, #2
   21598:	movw	r0, #34024	; 0x84e8
   2159c:	movt	r0, #2
   215a0:	bl	12a64 <__assert_fail@plt>
   215a4:	ldr	r2, [r4, #20]
   215a8:	mov	r1, #0
   215ac:	ldr	r0, [r4, #16]
   215b0:	bl	12a1c <memset@plt>
   215b4:	ldr	r2, [r4, #32]
   215b8:	ldr	r3, [r2, #8]
   215bc:	str	r3, [r4, #20]
   215c0:	ldr	r0, [r2]
   215c4:	str	r0, [r4, #28]
   215c8:	ldr	r1, [r2, #4]
   215cc:	ldr	r3, [r4, #60]	; 0x3c
   215d0:	add	r3, r3, r0
   215d4:	str	r3, [r4, #16]
   215d8:	ldr	r3, [r4, #64]	; 0x40
   215dc:	sub	r3, r3, r0
   215e0:	cmp	r3, r1
   215e4:	movcs	r3, r1
   215e8:	str	r3, [r4, #24]
   215ec:	str	r1, [r2, #4]
   215f0:	ldrh	r3, [r4, #130]	; 0x82
   215f4:	ldrh	r2, [r4, #128]	; 0x80
   215f8:	cmp	r2, r3
   215fc:	strhcc	r3, [r4, #128]	; 0x80
   21600:	ldr	r3, [r4, #32]
   21604:	ldrh	r2, [r3, #12]
   21608:	strh	r2, [r4, #130]	; 0x82
   2160c:	sub	r3, r3, #36	; 0x24
   21610:	str	r3, [r4, #32]
   21614:	ldr	r3, [r4, #156]	; 0x9c
   21618:	sub	r3, r3, #1
   2161c:	str	r3, [r4, #156]	; 0x9c
   21620:	b	21574 <flatcc_builder_end_offset_vector@@Base+0x34>
   21624:	andeq	r8, r2, ip, ror #2

00021628 <flatcc_builder_create_offset_vector@@Base>:
   21628:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2162c:	strd	r6, [sp, #8]
   21630:	str	r8, [sp, #16]
   21634:	str	lr, [sp, #20]
   21638:	mov	r5, r0
   2163c:	mov	r7, r1
   21640:	mov	r6, r2
   21644:	bl	203b0 <flatcc_builder_start_offset_vector@@Base>
   21648:	subs	r4, r0, #0
   2164c:	movne	r4, #0
   21650:	beq	2166c <flatcc_builder_create_offset_vector@@Base+0x44>
   21654:	mov	r0, r4
   21658:	ldrd	r4, [sp]
   2165c:	ldrd	r6, [sp, #8]
   21660:	ldr	r8, [sp, #16]
   21664:	add	sp, sp, #20
   21668:	pop	{pc}		; (ldr pc, [sp], #4)
   2166c:	mov	r1, r6
   21670:	mov	r0, r5
   21674:	bl	1fcb4 <flatcc_builder_extend_offset_vector@@Base>
   21678:	cmp	r0, #0
   2167c:	beq	21654 <flatcc_builder_create_offset_vector@@Base+0x2c>
   21680:	lsl	r2, r6, #2
   21684:	mov	r1, r7
   21688:	bl	1298c <memcpy@plt>
   2168c:	mov	r0, r5
   21690:	bl	21540 <flatcc_builder_end_offset_vector@@Base>
   21694:	mov	r4, r0
   21698:	b	21654 <flatcc_builder_create_offset_vector@@Base+0x2c>

0002169c <flatcc_builder_end_offset_vector_for_unions@@Base>:
   2169c:	strd	r4, [sp, #-16]!
   216a0:	str	r6, [sp, #8]
   216a4:	str	lr, [sp, #12]
   216a8:	mov	r4, r0
   216ac:	ldr	r2, [r0, #32]
   216b0:	ldrh	r0, [r2, #14]
   216b4:	cmp	r0, #5
   216b8:	bne	216ec <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   216bc:	mov	r3, r1
   216c0:	ldr	r2, [r2, #20]
   216c4:	ldr	r1, [r4, #16]
   216c8:	mov	r0, r4
   216cc:	bl	1e980 <flatcc_builder_default_alloc@@Base+0x3b8>
   216d0:	subs	r5, r0, #0
   216d4:	bne	21708 <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   216d8:	mov	r0, r5
   216dc:	ldrd	r4, [sp]
   216e0:	ldr	r6, [sp, #8]
   216e4:	add	sp, sp, #12
   216e8:	pop	{pc}		; (ldr pc, [sp], #4)
   216ec:	ldr	r3, [pc, #148]	; 21788 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   216f0:	movw	r2, #1493	; 0x5d5
   216f4:	movw	r1, #33604	; 0x8344
   216f8:	movt	r1, #2
   216fc:	movw	r0, #34024	; 0x84e8
   21700:	movt	r0, #2
   21704:	bl	12a64 <__assert_fail@plt>
   21708:	ldr	r2, [r4, #20]
   2170c:	mov	r1, #0
   21710:	ldr	r0, [r4, #16]
   21714:	bl	12a1c <memset@plt>
   21718:	ldr	r2, [r4, #32]
   2171c:	ldr	r3, [r2, #8]
   21720:	str	r3, [r4, #20]
   21724:	ldr	r0, [r2]
   21728:	str	r0, [r4, #28]
   2172c:	ldr	r1, [r2, #4]
   21730:	ldr	r3, [r4, #60]	; 0x3c
   21734:	add	r3, r3, r0
   21738:	str	r3, [r4, #16]
   2173c:	ldr	r3, [r4, #64]	; 0x40
   21740:	sub	r3, r3, r0
   21744:	cmp	r3, r1
   21748:	movcs	r3, r1
   2174c:	str	r3, [r4, #24]
   21750:	str	r1, [r2, #4]
   21754:	ldrh	r3, [r4, #130]	; 0x82
   21758:	ldrh	r2, [r4, #128]	; 0x80
   2175c:	cmp	r2, r3
   21760:	strhcc	r3, [r4, #128]	; 0x80
   21764:	ldr	r3, [r4, #32]
   21768:	ldrh	r2, [r3, #12]
   2176c:	strh	r2, [r4, #130]	; 0x82
   21770:	sub	r3, r3, #36	; 0x24
   21774:	str	r3, [r4, #32]
   21778:	ldr	r3, [r4, #156]	; 0x9c
   2177c:	sub	r3, r3, #1
   21780:	str	r3, [r4, #156]	; 0x9c
   21784:	b	216d8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   21788:	muleq	r2, r0, r1

0002178c <flatcc_builder_offset_vector_edit@@Base>:
   2178c:	ldr	r0, [r0, #16]
   21790:	bx	lr

00021794 <flatcc_builder_offset_vector_count@@Base>:
   21794:	ldr	r3, [r0, #32]
   21798:	ldr	r0, [r3, #20]
   2179c:	bx	lr

000217a0 <flatcc_builder_create_union_vector_direct@@Base>:
   217a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   217a4:	strd	r6, [sp, #8]
   217a8:	str	lr, [sp, #16]
   217ac:	sub	sp, sp, #12
   217b0:	mov	r4, r0
   217b4:	mov	r5, r1
   217b8:	mov	r6, r2
   217bc:	mov	r1, r3
   217c0:	mov	r3, r2
   217c4:	ldr	r2, [sp, #32]
   217c8:	mov	r0, r5
   217cc:	bl	1e980 <flatcc_builder_default_alloc@@Base+0x3b8>
   217d0:	subs	r7, r0, #0
   217d4:	bne	217fc <flatcc_builder_create_union_vector_direct@@Base+0x5c>
   217d8:	mov	r3, #0
   217dc:	str	r3, [r4]
   217e0:	str	r3, [r4, #4]
   217e4:	mov	r0, r4
   217e8:	add	sp, sp, #12
   217ec:	ldrd	r4, [sp]
   217f0:	ldrd	r6, [sp, #8]
   217f4:	add	sp, sp, #16
   217f8:	pop	{pc}		; (ldr pc, [sp], #4)
   217fc:	mvn	r3, #0
   21800:	str	r3, [sp, #4]
   21804:	mov	r3, #1
   21808:	str	r3, [sp]
   2180c:	ldr	r2, [sp, #32]
   21810:	mov	r1, r6
   21814:	mov	r0, r5
   21818:	bl	212a4 <flatcc_builder_create_vector@@Base>
   2181c:	cmp	r0, #0
   21820:	moveq	r3, #0
   21824:	streq	r3, [r4]
   21828:	strne	r0, [r4]
   2182c:	str	r7, [r4, #4]
   21830:	b	217e4 <flatcc_builder_create_union_vector_direct@@Base+0x44>

00021834 <flatcc_builder_create_union_vector@@Base>:
   21834:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21838:	strd	r6, [sp, #8]
   2183c:	str	r8, [sp, #16]
   21840:	str	lr, [sp, #20]
   21844:	sub	sp, sp, #16
   21848:	mov	r5, r0
   2184c:	mov	r4, r1
   21850:	mov	r7, r2
   21854:	mov	r6, r3
   21858:	mov	r0, r1
   2185c:	bl	203b0 <flatcc_builder_start_offset_vector@@Base>
   21860:	cmp	r0, #0
   21864:	beq	21890 <flatcc_builder_create_union_vector@@Base+0x5c>
   21868:	mov	r3, #0
   2186c:	str	r3, [r5]
   21870:	str	r3, [r5, #4]
   21874:	mov	r0, r5
   21878:	add	sp, sp, #16
   2187c:	ldrd	r4, [sp]
   21880:	ldrd	r6, [sp, #8]
   21884:	ldr	r8, [sp, #16]
   21888:	add	sp, sp, #20
   2188c:	pop	{pc}		; (ldr pc, [sp], #4)
   21890:	mov	r1, r6
   21894:	mov	r0, r4
   21898:	bl	1fcb4 <flatcc_builder_extend_offset_vector@@Base>
   2189c:	cmp	r0, #0
   218a0:	moveq	r3, #0
   218a4:	streq	r3, [r5]
   218a8:	streq	r3, [r5, #4]
   218ac:	beq	21874 <flatcc_builder_create_union_vector@@Base+0x40>
   218b0:	ldr	r8, [r4, #20]
   218b4:	add	r1, r6, r8
   218b8:	str	r1, [r4, #20]
   218bc:	ldr	r3, [r4, #24]
   218c0:	cmp	r1, r3
   218c4:	bcs	219a8 <flatcc_builder_create_union_vector@@Base+0x174>
   218c8:	ldr	r3, [r4, #16]
   218cc:	adds	r2, r3, r8
   218d0:	beq	219c0 <flatcc_builder_create_union_vector@@Base+0x18c>
   218d4:	cmp	r6, #0
   218d8:	beq	21908 <flatcc_builder_create_union_vector@@Base+0xd4>
   218dc:	mov	r1, r7
   218e0:	sub	ip, r2, #1
   218e4:	sub	r0, r3, #4
   218e8:	add	r7, r7, r6, lsl #3
   218ec:	ldrb	lr, [r1]
   218f0:	strb	lr, [ip, #1]!
   218f4:	ldr	lr, [r1, #4]
   218f8:	str	lr, [r0, #4]!
   218fc:	add	r1, r1, #8
   21900:	cmp	r1, r7
   21904:	bne	218ec <flatcc_builder_create_union_vector@@Base+0xb8>
   21908:	str	r6, [sp]
   2190c:	mov	r1, r4
   21910:	add	r0, sp, #8
   21914:	bl	217a0 <flatcc_builder_create_union_vector_direct@@Base>
   21918:	ldr	r7, [sp, #8]
   2191c:	ldr	r6, [sp, #12]
   21920:	ldr	r2, [r4, #20]
   21924:	mov	r1, #0
   21928:	ldr	r0, [r4, #16]
   2192c:	bl	12a1c <memset@plt>
   21930:	ldr	r2, [r4, #32]
   21934:	ldr	r3, [r2, #8]
   21938:	str	r3, [r4, #20]
   2193c:	ldr	r0, [r2]
   21940:	str	r0, [r4, #28]
   21944:	ldr	r1, [r2, #4]
   21948:	ldr	r3, [r4, #60]	; 0x3c
   2194c:	add	r3, r3, r0
   21950:	str	r3, [r4, #16]
   21954:	ldr	r3, [r4, #64]	; 0x40
   21958:	sub	r3, r3, r0
   2195c:	cmp	r3, r1
   21960:	movcs	r3, r1
   21964:	str	r3, [r4, #24]
   21968:	str	r1, [r2, #4]
   2196c:	ldrh	r3, [r4, #130]	; 0x82
   21970:	ldrh	r2, [r4, #128]	; 0x80
   21974:	cmp	r2, r3
   21978:	strhcc	r3, [r4, #128]	; 0x80
   2197c:	ldr	r3, [r4, #32]
   21980:	ldrh	r2, [r3, #12]
   21984:	strh	r2, [r4, #130]	; 0x82
   21988:	sub	r3, r3, #36	; 0x24
   2198c:	str	r3, [r4, #32]
   21990:	ldr	r3, [r4, #156]	; 0x9c
   21994:	sub	r3, r3, #1
   21998:	str	r3, [r4, #156]	; 0x9c
   2199c:	str	r7, [r5]
   219a0:	str	r6, [r5, #4]
   219a4:	b	21874 <flatcc_builder_create_union_vector@@Base+0x40>
   219a8:	mvn	r2, #3
   219ac:	add	r1, r1, #1
   219b0:	mov	r0, r4
   219b4:	bl	1e540 <main@@Base+0x330>
   219b8:	cmp	r0, #0
   219bc:	beq	218c8 <flatcc_builder_create_union_vector@@Base+0x94>
   219c0:	mov	r3, #0
   219c4:	str	r3, [r5]
   219c8:	str	r3, [r5, #4]
   219cc:	b	21874 <flatcc_builder_create_union_vector@@Base+0x40>

000219d0 <flatcc_builder_start_union_vector@@Base>:
   219d0:	str	r4, [sp, #-8]!
   219d4:	str	lr, [sp, #4]
   219d8:	mov	r4, r0
   219dc:	mov	r1, #4
   219e0:	bl	1e814 <flatcc_builder_default_alloc@@Base+0x24c>
   219e4:	cmp	r0, #0
   219e8:	bne	21a4c <flatcc_builder_start_union_vector@@Base+0x7c>
   219ec:	ldr	r3, [r4, #32]
   219f0:	mov	r2, #8
   219f4:	str	r2, [r3, #16]
   219f8:	ldr	r3, [r4, #32]
   219fc:	mov	r2, #0
   21a00:	str	r2, [r3, #20]
   21a04:	ldr	r3, [r4, #32]
   21a08:	mov	r2, #7
   21a0c:	strh	r2, [r3, #14]
   21a10:	ldr	r1, [r4, #28]
   21a14:	ldr	r2, [r4, #60]	; 0x3c
   21a18:	add	r2, r2, r1
   21a1c:	str	r2, [r4, #16]
   21a20:	ldr	r3, [r4, #64]	; 0x40
   21a24:	sub	r3, r3, r1
   21a28:	cmn	r3, #4
   21a2c:	mvnhi	r3, #3
   21a30:	str	r3, [r4, #24]
   21a34:	ldr	r3, [r4, #32]
   21a38:	mvn	r2, #3
   21a3c:	str	r2, [r3, #4]
   21a40:	ldr	r4, [sp]
   21a44:	add	sp, sp, #4
   21a48:	pop	{pc}		; (ldr pc, [sp], #4)
   21a4c:	mvn	r0, #0
   21a50:	b	21a40 <flatcc_builder_start_union_vector@@Base+0x70>

00021a54 <flatcc_builder_end_union_vector@@Base>:
   21a54:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21a58:	strd	r6, [sp, #8]
   21a5c:	str	r8, [sp, #16]
   21a60:	str	lr, [sp, #20]
   21a64:	sub	sp, sp, #16
   21a68:	ldr	r3, [r1, #32]
   21a6c:	ldrh	r2, [r3, #14]
   21a70:	cmp	r2, #7
   21a74:	bne	21b9c <flatcc_builder_end_union_vector@@Base+0x148>
   21a78:	mov	r6, r0
   21a7c:	mov	r4, r1
   21a80:	ldr	r5, [r3, #20]
   21a84:	ldr	r8, [r1, #20]
   21a88:	add	r1, r5, r5, lsl #2
   21a8c:	add	r1, r1, r8
   21a90:	str	r1, [r4, #20]
   21a94:	ldr	r3, [r4, #24]
   21a98:	cmp	r1, r3
   21a9c:	bcs	21bb8 <flatcc_builder_end_union_vector@@Base+0x164>
   21aa0:	ldr	r7, [r4, #16]
   21aa4:	adds	r3, r7, r8
   21aa8:	beq	21bd0 <flatcc_builder_end_union_vector@@Base+0x17c>
   21aac:	add	r2, r3, r5, lsl #2
   21ab0:	cmp	r5, #0
   21ab4:	beq	21ae4 <flatcc_builder_end_union_vector@@Base+0x90>
   21ab8:	mov	r1, r7
   21abc:	sub	ip, r2, #1
   21ac0:	sub	r0, r3, #4
   21ac4:	add	r7, r7, r5, lsl #3
   21ac8:	ldrb	lr, [r1]
   21acc:	strb	lr, [ip, #1]!
   21ad0:	ldr	lr, [r1, #4]
   21ad4:	str	lr, [r0, #4]!
   21ad8:	add	r1, r1, #8
   21adc:	cmp	r1, r7
   21ae0:	bne	21ac8 <flatcc_builder_end_union_vector@@Base+0x74>
   21ae4:	str	r5, [sp]
   21ae8:	mov	r1, r4
   21aec:	add	r0, sp, #8
   21af0:	bl	217a0 <flatcc_builder_create_union_vector_direct@@Base>
   21af4:	ldr	r7, [sp, #8]
   21af8:	ldr	r5, [sp, #12]
   21afc:	ldr	r2, [r4, #20]
   21b00:	mov	r1, #0
   21b04:	ldr	r0, [r4, #16]
   21b08:	bl	12a1c <memset@plt>
   21b0c:	ldr	r2, [r4, #32]
   21b10:	ldr	r3, [r2, #8]
   21b14:	str	r3, [r4, #20]
   21b18:	ldr	r0, [r2]
   21b1c:	str	r0, [r4, #28]
   21b20:	ldr	r1, [r2, #4]
   21b24:	ldr	r3, [r4, #60]	; 0x3c
   21b28:	add	r3, r3, r0
   21b2c:	str	r3, [r4, #16]
   21b30:	ldr	r3, [r4, #64]	; 0x40
   21b34:	sub	r3, r3, r0
   21b38:	cmp	r3, r1
   21b3c:	movcs	r3, r1
   21b40:	str	r3, [r4, #24]
   21b44:	str	r1, [r2, #4]
   21b48:	ldrh	r3, [r4, #130]	; 0x82
   21b4c:	ldrh	r2, [r4, #128]	; 0x80
   21b50:	cmp	r2, r3
   21b54:	strhcc	r3, [r4, #128]	; 0x80
   21b58:	ldr	r3, [r4, #32]
   21b5c:	ldrh	r2, [r3, #12]
   21b60:	strh	r2, [r4, #130]	; 0x82
   21b64:	sub	r3, r3, #36	; 0x24
   21b68:	str	r3, [r4, #32]
   21b6c:	ldr	r3, [r4, #156]	; 0x9c
   21b70:	sub	r3, r3, #1
   21b74:	str	r3, [r4, #156]	; 0x9c
   21b78:	str	r7, [r6]
   21b7c:	str	r5, [r6, #4]
   21b80:	mov	r0, r6
   21b84:	add	sp, sp, #16
   21b88:	ldrd	r4, [sp]
   21b8c:	ldrd	r6, [sp, #8]
   21b90:	ldr	r8, [sp, #16]
   21b94:	add	sp, sp, #20
   21b98:	pop	{pc}		; (ldr pc, [sp], #4)
   21b9c:	ldr	r3, [pc, #60]	; 21be0 <flatcc_builder_end_union_vector@@Base+0x18c>
   21ba0:	movw	r2, #1617	; 0x651
   21ba4:	movw	r1, #33604	; 0x8344
   21ba8:	movt	r1, #2
   21bac:	movw	r0, #34376	; 0x8648
   21bb0:	movt	r0, #2
   21bb4:	bl	12a64 <__assert_fail@plt>
   21bb8:	mvn	r2, #3
   21bbc:	add	r1, r1, #1
   21bc0:	mov	r0, r4
   21bc4:	bl	1e540 <main@@Base+0x330>
   21bc8:	cmp	r0, #0
   21bcc:	beq	21aa0 <flatcc_builder_end_union_vector@@Base+0x4c>
   21bd0:	mov	r3, #0
   21bd4:	str	r3, [r6]
   21bd8:	str	r3, [r6, #4]
   21bdc:	b	21b80 <flatcc_builder_end_union_vector@@Base+0x12c>
   21be0:			; <UNDEFINED> instruction: 0x000281bc

00021be4 <flatcc_builder_union_vector_edit@@Base>:
   21be4:	ldr	r0, [r0, #16]
   21be8:	bx	lr

00021bec <flatcc_builder_union_vector_count@@Base>:
   21bec:	ldr	r3, [r0, #32]
   21bf0:	ldr	r0, [r3, #20]
   21bf4:	bx	lr

00021bf8 <flatcc_builder_extend_union_vector@@Base>:
   21bf8:	strd	r4, [sp, #-16]!
   21bfc:	str	r6, [sp, #8]
   21c00:	str	lr, [sp, #12]
   21c04:	mov	r4, r0
   21c08:	ldr	r2, [r0, #32]
   21c0c:	ldr	r3, [r2, #20]
   21c10:	adds	r3, r1, r3
   21c14:	movcs	ip, #1
   21c18:	movcc	ip, #0
   21c1c:	cmn	r3, #-536870911	; 0xe0000001
   21c20:	movls	r0, #0
   21c24:	movhi	r0, #1
   21c28:	orrs	r0, ip, r0
   21c2c:	bne	21c64 <flatcc_builder_extend_union_vector@@Base+0x6c>
   21c30:	str	r3, [r2, #20]
   21c34:	ldr	r5, [r4, #20]
   21c38:	add	r1, r5, r1, lsl #3
   21c3c:	str	r1, [r4, #20]
   21c40:	ldr	r3, [r4, #24]
   21c44:	cmp	r1, r3
   21c48:	bcs	21c80 <flatcc_builder_extend_union_vector@@Base+0x88>
   21c4c:	ldr	r0, [r4, #16]
   21c50:	add	r0, r0, r5
   21c54:	ldrd	r4, [sp]
   21c58:	ldr	r6, [sp, #8]
   21c5c:	add	sp, sp, #12
   21c60:	pop	{pc}		; (ldr pc, [sp], #4)
   21c64:	ldr	r3, [pc, #52]	; 21ca0 <flatcc_builder_extend_union_vector@@Base+0xa8>
   21c68:	mov	r2, #892	; 0x37c
   21c6c:	movw	r1, #33604	; 0x8344
   21c70:	movt	r1, #2
   21c74:	movw	r0, #33888	; 0x8460
   21c78:	movt	r0, #2
   21c7c:	bl	12a64 <__assert_fail@plt>
   21c80:	mvn	r2, #3
   21c84:	add	r1, r1, #1
   21c88:	mov	r0, r4
   21c8c:	bl	1e540 <main@@Base+0x330>
   21c90:	cmp	r0, #0
   21c94:	movne	r0, #0
   21c98:	beq	21c4c <flatcc_builder_extend_union_vector@@Base+0x54>
   21c9c:	b	21c54 <flatcc_builder_extend_union_vector@@Base+0x5c>
   21ca0:	andeq	r7, r2, r4, lsr #30

00021ca4 <flatcc_builder_truncate_union_vector@@Base>:
   21ca4:	str	r4, [sp, #-8]!
   21ca8:	str	lr, [sp, #4]
   21cac:	ldr	ip, [r0, #32]
   21cb0:	ldrh	r3, [ip, #14]
   21cb4:	cmp	r3, #7
   21cb8:	bne	21d08 <flatcc_builder_truncate_union_vector@@Base+0x64>
   21cbc:	ldr	r3, [ip, #20]
   21cc0:	cmp	r3, r1
   21cc4:	bcc	21d24 <flatcc_builder_truncate_union_vector@@Base+0x80>
   21cc8:	sub	r3, r3, r1
   21ccc:	str	r3, [ip, #20]
   21cd0:	ldr	r3, [r0, #32]
   21cd4:	ldr	r2, [r3, #16]
   21cd8:	mul	r2, r2, r1
   21cdc:	ldr	r3, [r0, #20]
   21ce0:	sub	r3, r3, r2
   21ce4:	str	r3, [r0, #20]
   21ce8:	ldr	r0, [r0, #16]
   21cec:	mov	r1, #0
   21cf0:	add	r0, r0, r3
   21cf4:	bl	12a1c <memset@plt>
   21cf8:	mov	r0, #0
   21cfc:	ldr	r4, [sp]
   21d00:	add	sp, sp, #4
   21d04:	pop	{pc}		; (ldr pc, [sp], #4)
   21d08:	ldr	r3, [pc, #48]	; 21d40 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   21d0c:	movw	r2, #1665	; 0x681
   21d10:	movw	r1, #33604	; 0x8344
   21d14:	movt	r1, #2
   21d18:	movw	r0, #34376	; 0x8648
   21d1c:	movt	r0, #2
   21d20:	bl	12a64 <__assert_fail@plt>
   21d24:	ldr	r3, [pc, #20]	; 21d40 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   21d28:	movw	r2, #1666	; 0x682
   21d2c:	movw	r1, #33604	; 0x8344
   21d30:	movt	r1, #2
   21d34:	movw	r0, #34156	; 0x856c
   21d38:	movt	r0, #2
   21d3c:	bl	12a64 <__assert_fail@plt>
   21d40:	ldrdeq	r8, [r2], -ip

00021d44 <flatcc_builder_union_vector_push@@Base>:
   21d44:	strd	r4, [sp, #-20]!	; 0xffffffec
   21d48:	strd	r6, [sp, #8]
   21d4c:	str	lr, [sp, #16]
   21d50:	sub	sp, sp, #12
   21d54:	add	r3, sp, #8
   21d58:	stmdb	r3, {r1, r2}
   21d5c:	ldr	r2, [r0, #32]
   21d60:	ldrh	r3, [r2, #14]
   21d64:	cmp	r3, #7
   21d68:	bne	21dc4 <flatcc_builder_union_vector_push@@Base+0x80>
   21d6c:	mov	r4, r0
   21d70:	ldr	r3, [r2, #20]
   21d74:	cmn	r3, #-536870911	; 0xe0000001
   21d78:	moveq	r0, #0
   21d7c:	beq	21db0 <flatcc_builder_union_vector_push@@Base+0x6c>
   21d80:	add	r3, r3, #1
   21d84:	str	r3, [r2, #20]
   21d88:	ldr	r5, [r4, #20]
   21d8c:	add	r3, r5, #8
   21d90:	str	r3, [r4, #20]
   21d94:	ldr	r2, [r4, #24]
   21d98:	cmp	r3, r2
   21d9c:	bcs	21de0 <flatcc_builder_union_vector_push@@Base+0x9c>
   21da0:	ldr	r3, [r4, #16]
   21da4:	adds	r0, r3, r5
   21da8:	ldrdne	r6, [sp]
   21dac:	strdne	r6, [r3, r5]
   21db0:	add	sp, sp, #12
   21db4:	ldrd	r4, [sp]
   21db8:	ldrd	r6, [sp, #8]
   21dbc:	add	sp, sp, #16
   21dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   21dc4:	ldr	r3, [pc, #52]	; 21e00 <flatcc_builder_union_vector_push@@Base+0xbc>
   21dc8:	movw	r2, #1677	; 0x68d
   21dcc:	movw	r1, #33604	; 0x8344
   21dd0:	movt	r1, #2
   21dd4:	movw	r0, #34376	; 0x8648
   21dd8:	movt	r0, #2
   21ddc:	bl	12a64 <__assert_fail@plt>
   21de0:	mvn	r2, #3
   21de4:	add	r1, r5, #9
   21de8:	mov	r0, r4
   21dec:	bl	1e540 <main@@Base+0x330>
   21df0:	cmp	r0, #0
   21df4:	movne	r0, #0
   21df8:	beq	21da0 <flatcc_builder_union_vector_push@@Base+0x5c>
   21dfc:	b	21db0 <flatcc_builder_union_vector_push@@Base+0x6c>
   21e00:	andeq	r8, r2, r4, lsl #4

00021e04 <flatcc_builder_append_union_vector@@Base>:
   21e04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21e08:	strd	r6, [sp, #8]
   21e0c:	str	r8, [sp, #16]
   21e10:	str	lr, [sp, #20]
   21e14:	mov	r6, r1
   21e18:	ldr	r1, [r0, #32]
   21e1c:	ldrh	r3, [r1, #14]
   21e20:	cmp	r3, #7
   21e24:	bne	21ea4 <flatcc_builder_append_union_vector@@Base+0xa0>
   21e28:	mov	r5, r0
   21e2c:	ldr	r3, [r1, #20]
   21e30:	adds	r3, r2, r3
   21e34:	movcs	ip, #1
   21e38:	movcc	ip, #0
   21e3c:	cmn	r3, #-536870911	; 0xe0000001
   21e40:	movls	r0, #0
   21e44:	movhi	r0, #1
   21e48:	orrs	r0, ip, r0
   21e4c:	bne	21ec0 <flatcc_builder_append_union_vector@@Base+0xbc>
   21e50:	str	r3, [r1, #20]
   21e54:	lsl	r4, r2, #3
   21e58:	ldr	r7, [r5, #20]
   21e5c:	add	r1, r4, r7
   21e60:	str	r1, [r5, #20]
   21e64:	ldr	r3, [r5, #24]
   21e68:	cmp	r1, r3
   21e6c:	bcs	21edc <flatcc_builder_append_union_vector@@Base+0xd8>
   21e70:	ldr	r5, [r5, #16]
   21e74:	adds	r5, r5, r7
   21e78:	beq	21e8c <flatcc_builder_append_union_vector@@Base+0x88>
   21e7c:	mov	r2, r4
   21e80:	mov	r1, r6
   21e84:	mov	r0, r5
   21e88:	bl	1298c <memcpy@plt>
   21e8c:	mov	r0, r5
   21e90:	ldrd	r4, [sp]
   21e94:	ldrd	r6, [sp, #8]
   21e98:	ldr	r8, [sp, #16]
   21e9c:	add	sp, sp, #20
   21ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   21ea4:	ldr	r3, [pc, #80]	; 21efc <flatcc_builder_append_union_vector@@Base+0xf8>
   21ea8:	movw	r2, #1692	; 0x69c
   21eac:	movw	r1, #33604	; 0x8344
   21eb0:	movt	r1, #2
   21eb4:	movw	r0, #34376	; 0x8648
   21eb8:	movt	r0, #2
   21ebc:	bl	12a64 <__assert_fail@plt>
   21ec0:	ldr	r3, [pc, #56]	; 21f00 <flatcc_builder_append_union_vector@@Base+0xfc>
   21ec4:	mov	r2, #892	; 0x37c
   21ec8:	movw	r1, #33604	; 0x8344
   21ecc:	movt	r1, #2
   21ed0:	movw	r0, #33888	; 0x8460
   21ed4:	movt	r0, #2
   21ed8:	bl	12a64 <__assert_fail@plt>
   21edc:	mvn	r2, #3
   21ee0:	add	r1, r1, #1
   21ee4:	mov	r0, r5
   21ee8:	bl	1e540 <main@@Base+0x330>
   21eec:	cmp	r0, #0
   21ef0:	movne	r5, #0
   21ef4:	beq	21e70 <flatcc_builder_append_union_vector@@Base+0x6c>
   21ef8:	b	21e8c <flatcc_builder_append_union_vector@@Base+0x88>
   21efc:	andeq	r8, r2, r8, lsr #4
   21f00:	andeq	r7, r2, r4, lsr #30

00021f04 <flatcc_builder_create_string@@Base>:
   21f04:	strd	r4, [sp, #-16]!
   21f08:	str	r6, [sp, #8]
   21f0c:	str	lr, [sp, #12]
   21f10:	sub	sp, sp, #88	; 0x58
   21f14:	mov	r4, r0
   21f18:	str	r2, [sp, #84]	; 0x54
   21f1c:	ldr	r0, [r0, #136]	; 0x88
   21f20:	sub	r3, r0, r2
   21f24:	sub	r3, r3, #1
   21f28:	and	r3, r3, #3
   21f2c:	add	r3, r3, #1
   21f30:	mov	ip, #4
   21f34:	str	ip, [sp, #12]
   21f38:	add	lr, sp, #84	; 0x54
   21f3c:	str	lr, [sp, #20]
   21f40:	str	ip, [sp, #24]
   21f44:	mov	ip, #1
   21f48:	str	ip, [sp, #16]
   21f4c:	cmp	r2, #0
   21f50:	beq	21f6c <flatcc_builder_create_string@@Base+0x68>
   21f54:	add	ip, r2, #4
   21f58:	str	ip, [sp, #12]
   21f5c:	str	r1, [sp, #28]
   21f60:	str	r2, [sp, #32]
   21f64:	mov	r2, #2
   21f68:	str	r2, [sp, #16]
   21f6c:	ldr	r1, [sp, #12]
   21f70:	add	r1, r3, r1
   21f74:	str	r1, [sp, #12]
   21f78:	ldr	r2, [sp, #16]
   21f7c:	add	r2, r2, #1
   21f80:	add	ip, sp, #88	; 0x58
   21f84:	add	lr, ip, r2, lsl #3
   21f88:	movw	ip, #31732	; 0x7bf4
   21f8c:	movt	ip, #2
   21f90:	str	ip, [lr, #-76]	; 0xffffffb4
   21f94:	str	r3, [lr, #-72]	; 0xffffffb8
   21f98:	str	r2, [sp, #16]
   21f9c:	sub	r5, r0, r1
   21fa0:	cmp	r0, r5
   21fa4:	ble	21fe4 <flatcc_builder_create_string@@Base+0xe0>
   21fa8:	str	r1, [sp]
   21fac:	ldr	r6, [r4, #44]	; 0x2c
   21fb0:	mov	r3, r5
   21fb4:	add	r1, sp, #20
   21fb8:	ldr	r0, [r4, #36]	; 0x24
   21fbc:	blx	r6
   21fc0:	cmp	r0, #0
   21fc4:	bne	22000 <flatcc_builder_create_string@@Base+0xfc>
   21fc8:	str	r5, [r4, #136]	; 0x88
   21fcc:	mov	r0, r5
   21fd0:	add	sp, sp, #88	; 0x58
   21fd4:	ldrd	r4, [sp]
   21fd8:	ldr	r6, [sp, #8]
   21fdc:	add	sp, sp, #12
   21fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   21fe4:	add	r3, ip, #588	; 0x24c
   21fe8:	movw	r2, #647	; 0x287
   21fec:	movw	r1, #33604	; 0x8344
   21ff0:	movt	r1, #2
   21ff4:	movw	r0, #33688	; 0x8398
   21ff8:	movt	r0, #2
   21ffc:	bl	12a64 <__assert_fail@plt>
   22000:	ldr	r3, [pc, #20]	; 2201c <flatcc_builder_create_string@@Base+0x118>
   22004:	movw	r2, #651	; 0x28b
   22008:	movw	r1, #33604	; 0x8344
   2200c:	movt	r1, #2
   22010:	movw	r0, #33688	; 0x8398
   22014:	movt	r0, #2
   22018:	bl	12a64 <__assert_fail@plt>
   2201c:	andeq	r7, r2, r0, asr #28

00022020 <flatcc_builder_create_string_str@@Base>:
   22020:	strd	r4, [sp, #-16]!
   22024:	str	r6, [sp, #8]
   22028:	str	lr, [sp, #12]
   2202c:	mov	r5, r0
   22030:	mov	r4, r1
   22034:	mov	r0, r1
   22038:	bl	129f8 <strlen@plt>
   2203c:	mov	r2, r0
   22040:	mov	r1, r4
   22044:	mov	r0, r5
   22048:	bl	21f04 <flatcc_builder_create_string@@Base>
   2204c:	ldrd	r4, [sp]
   22050:	ldr	r6, [sp, #8]
   22054:	add	sp, sp, #12
   22058:	pop	{pc}		; (ldr pc, [sp], #4)

0002205c <flatcc_builder_create_string_strn@@Base>:
   2205c:	strd	r4, [sp, #-16]!
   22060:	str	r6, [sp, #8]
   22064:	str	lr, [sp, #12]
   22068:	mov	r6, r0
   2206c:	mov	r4, r1
   22070:	mov	r5, r2
   22074:	mov	r1, #0
   22078:	mov	r0, r4
   2207c:	bl	12a34 <memchr@plt>
   22080:	cmp	r0, #0
   22084:	subne	r5, r0, r4
   22088:	mov	r2, r5
   2208c:	mov	r1, r4
   22090:	mov	r0, r6
   22094:	bl	21f04 <flatcc_builder_create_string@@Base>
   22098:	ldrd	r4, [sp]
   2209c:	ldr	r6, [sp, #8]
   220a0:	add	sp, sp, #12
   220a4:	pop	{pc}		; (ldr pc, [sp], #4)

000220a8 <flatcc_builder_end_string@@Base>:
   220a8:	strd	r4, [sp, #-16]!
   220ac:	str	r6, [sp, #8]
   220b0:	str	lr, [sp, #12]
   220b4:	ldr	r3, [r0, #32]
   220b8:	ldrh	r2, [r3, #14]
   220bc:	cmp	r2, #6
   220c0:	bne	220fc <flatcc_builder_end_string@@Base+0x54>
   220c4:	mov	r4, r0
   220c8:	ldr	r2, [r0, #20]
   220cc:	ldr	r3, [r3, #20]
   220d0:	cmp	r3, r2
   220d4:	bne	22118 <flatcc_builder_end_string@@Base+0x70>
   220d8:	ldr	r1, [r0, #16]
   220dc:	bl	21f04 <flatcc_builder_create_string@@Base>
   220e0:	subs	r5, r0, #0
   220e4:	bne	22134 <flatcc_builder_end_string@@Base+0x8c>
   220e8:	mov	r0, r5
   220ec:	ldrd	r4, [sp]
   220f0:	ldr	r6, [sp, #8]
   220f4:	add	sp, sp, #12
   220f8:	pop	{pc}		; (ldr pc, [sp], #4)
   220fc:	ldr	r3, [pc, #176]	; 221b4 <flatcc_builder_end_string@@Base+0x10c>
   22100:	movw	r2, #1732	; 0x6c4
   22104:	movw	r1, #33604	; 0x8344
   22108:	movt	r1, #2
   2210c:	movw	r0, #34076	; 0x851c
   22110:	movt	r0, #2
   22114:	bl	12a64 <__assert_fail@plt>
   22118:	ldr	r3, [pc, #148]	; 221b4 <flatcc_builder_end_string@@Base+0x10c>
   2211c:	movw	r2, #1733	; 0x6c5
   22120:	movw	r1, #33604	; 0x8344
   22124:	movt	r1, #2
   22128:	movw	r0, #34428	; 0x867c
   2212c:	movt	r0, #2
   22130:	bl	12a64 <__assert_fail@plt>
   22134:	ldr	r2, [r4, #20]
   22138:	mov	r1, #0
   2213c:	ldr	r0, [r4, #16]
   22140:	bl	12a1c <memset@plt>
   22144:	ldr	r2, [r4, #32]
   22148:	ldr	r3, [r2, #8]
   2214c:	str	r3, [r4, #20]
   22150:	ldr	r0, [r2]
   22154:	str	r0, [r4, #28]
   22158:	ldr	r1, [r2, #4]
   2215c:	ldr	r3, [r4, #60]	; 0x3c
   22160:	add	r3, r3, r0
   22164:	str	r3, [r4, #16]
   22168:	ldr	r3, [r4, #64]	; 0x40
   2216c:	sub	r3, r3, r0
   22170:	cmp	r3, r1
   22174:	movcs	r3, r1
   22178:	str	r3, [r4, #24]
   2217c:	str	r1, [r2, #4]
   22180:	ldrh	r3, [r4, #130]	; 0x82
   22184:	ldrh	r2, [r4, #128]	; 0x80
   22188:	cmp	r2, r3
   2218c:	strhcc	r3, [r4, #128]	; 0x80
   22190:	ldr	r3, [r4, #32]
   22194:	ldrh	r2, [r3, #12]
   22198:	strh	r2, [r4, #130]	; 0x82
   2219c:	sub	r3, r3, #36	; 0x24
   221a0:	str	r3, [r4, #32]
   221a4:	ldr	r3, [r4, #156]	; 0x9c
   221a8:	sub	r3, r3, #1
   221ac:	str	r3, [r4, #156]	; 0x9c
   221b0:	b	220e8 <flatcc_builder_end_string@@Base+0x40>
   221b4:	andeq	r8, r2, ip, asr #4

000221b8 <flatcc_builder_string_edit@@Base>:
   221b8:	ldr	r0, [r0, #16]
   221bc:	bx	lr

000221c0 <flatcc_builder_string_len@@Base>:
   221c0:	ldr	r3, [r0, #32]
   221c4:	ldr	r0, [r3, #20]
   221c8:	bx	lr

000221cc <flatcc_builder_table_add@@Base>:
   221cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   221d0:	strd	r6, [sp, #8]
   221d4:	str	r8, [sp, #16]
   221d8:	str	lr, [sp, #20]
   221dc:	mov	r5, r1
   221e0:	ldr	r1, [r0, #32]
   221e4:	ldrh	r1, [r1, #14]
   221e8:	cmp	r1, #3
   221ec:	bne	222ac <flatcc_builder_table_add@@Base+0xe0>
   221f0:	mov	r4, r0
   221f4:	movw	r1, #32764	; 0x7ffc
   221f8:	cmp	r5, r1
   221fc:	bhi	222c8 <flatcc_builder_table_add@@Base+0xfc>
   22200:	ldrh	r1, [r0, #130]	; 0x82
   22204:	cmp	r1, r3
   22208:	strhcc	r3, [r0, #130]	; 0x82
   2220c:	ldr	r0, [r0, #4]
   22210:	lsl	r1, r5, #1
   22214:	ldrh	r1, [r0, r1]
   22218:	cmp	r1, #0
   2221c:	bne	222e4 <flatcc_builder_table_add@@Base+0x118>
   22220:	ldr	r0, [r4, #12]
   22224:	eor	r0, r0, r5
   22228:	movw	r1, #31153	; 0x79b1
   2222c:	movt	r1, #40503	; 0x9e37
   22230:	mul	r0, r1, r0
   22234:	eor	r0, r0, r2
   22238:	mul	r0, r1, r0
   2223c:	str	r0, [r4, #12]
   22240:	uxth	r7, r5
   22244:	sub	r6, r3, #1
   22248:	ldr	r0, [r4, #20]
   2224c:	add	r6, r6, r0
   22250:	rsb	r3, r3, #0
   22254:	and	r6, r6, r3
   22258:	add	r1, r2, r6
   2225c:	str	r1, [r4, #20]
   22260:	ldr	r3, [r4, #24]
   22264:	cmp	r1, r3
   22268:	bcs	22300 <flatcc_builder_table_add@@Base+0x134>
   2226c:	uxth	r5, r5
   22270:	ldr	r3, [r4, #4]
   22274:	lsl	r5, r5, #1
   22278:	add	r2, r6, #4
   2227c:	strh	r2, [r3, r5]
   22280:	ldrh	r3, [r4, #8]
   22284:	cmp	r3, r7
   22288:	addls	r7, r7, #1
   2228c:	strhls	r7, [r4, #8]
   22290:	ldr	r0, [r4, #16]
   22294:	add	r0, r0, r6
   22298:	ldrd	r4, [sp]
   2229c:	ldrd	r6, [sp, #8]
   222a0:	ldr	r8, [sp, #16]
   222a4:	add	sp, sp, #20
   222a8:	pop	{pc}		; (ldr pc, [sp], #4)
   222ac:	ldr	r3, [pc, #108]	; 22320 <flatcc_builder_table_add@@Base+0x154>
   222b0:	movw	r2, #1773	; 0x6ed
   222b4:	movw	r1, #33604	; 0x8344
   222b8:	movt	r1, #2
   222bc:	movw	r0, #34312	; 0x8608
   222c0:	movt	r0, #2
   222c4:	bl	12a64 <__assert_fail@plt>
   222c8:	ldr	r3, [pc, #80]	; 22320 <flatcc_builder_table_add@@Base+0x154>
   222cc:	movw	r2, #1774	; 0x6ee
   222d0:	movw	r1, #33604	; 0x8344
   222d4:	movt	r1, #2
   222d8:	movw	r0, #34464	; 0x86a0
   222dc:	movt	r0, #2
   222e0:	bl	12a64 <__assert_fail@plt>
   222e4:	ldr	r3, [pc, #52]	; 22320 <flatcc_builder_table_add@@Base+0x154>
   222e8:	movw	r2, #1784	; 0x6f8
   222ec:	movw	r1, #33604	; 0x8344
   222f0:	movt	r1, #2
   222f4:	movw	r0, #33688	; 0x8398
   222f8:	movt	r0, #2
   222fc:	bl	12a64 <__assert_fail@plt>
   22300:	movw	r2, #65532	; 0xfffc
   22304:	add	r1, r1, #1
   22308:	mov	r0, r4
   2230c:	bl	1e540 <main@@Base+0x330>
   22310:	cmp	r0, #0
   22314:	movne	r0, #0
   22318:	beq	2226c <flatcc_builder_table_add@@Base+0xa0>
   2231c:	b	22298 <flatcc_builder_table_add@@Base+0xcc>
   22320:	andeq	r8, r2, r8, ror #4

00022324 <flatcc_builder_table_edit@@Base>:
   22324:	ldr	r2, [r0, #32]
   22328:	ldrh	r2, [r2, #14]
   2232c:	cmp	r2, #3
   22330:	bne	22348 <flatcc_builder_table_edit@@Base+0x24>
   22334:	ldr	r3, [r0, #20]
   22338:	sub	r3, r3, r1
   2233c:	ldr	r0, [r0, #16]
   22340:	add	r0, r0, r3
   22344:	bx	lr
   22348:	str	r4, [sp, #-8]!
   2234c:	str	lr, [sp, #4]
   22350:	ldr	r3, [pc, #20]	; 2236c <flatcc_builder_table_edit@@Base+0x48>
   22354:	movw	r2, #1794	; 0x702
   22358:	movw	r1, #33604	; 0x8344
   2235c:	movt	r1, #2
   22360:	movw	r0, #34312	; 0x8608
   22364:	movt	r0, #2
   22368:	bl	12a64 <__assert_fail@plt>
   2236c:	andeq	r8, r2, r4, lsl #5

00022370 <flatcc_builder_table_add_copy@@Base>:
   22370:	strd	r4, [sp, #-16]!
   22374:	str	r6, [sp, #8]
   22378:	str	lr, [sp, #12]
   2237c:	mov	r6, r2
   22380:	mov	r5, r3
   22384:	ldrh	r3, [sp, #16]
   22388:	mov	r2, r5
   2238c:	bl	221cc <flatcc_builder_table_add@@Base>
   22390:	subs	r4, r0, #0
   22394:	beq	223a8 <flatcc_builder_table_add_copy@@Base+0x38>
   22398:	mov	r2, r5
   2239c:	mov	r1, r6
   223a0:	mov	r0, r4
   223a4:	bl	1298c <memcpy@plt>
   223a8:	mov	r0, r4
   223ac:	ldrd	r4, [sp]
   223b0:	ldr	r6, [sp, #8]
   223b4:	add	sp, sp, #12
   223b8:	pop	{pc}		; (ldr pc, [sp], #4)

000223bc <flatcc_builder_table_add_offset@@Base>:
   223bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   223c0:	strd	r6, [sp, #8]
   223c4:	str	r8, [sp, #16]
   223c8:	str	lr, [sp, #20]
   223cc:	ldr	r3, [r0, #32]
   223d0:	ldrh	r3, [r3, #14]
   223d4:	cmp	r3, #3
   223d8:	bne	2249c <flatcc_builder_table_add_offset@@Base+0xe0>
   223dc:	mov	r4, r0
   223e0:	mov	r5, r1
   223e4:	movw	r3, #32764	; 0x7ffc
   223e8:	cmp	r1, r3
   223ec:	bhi	224b8 <flatcc_builder_table_add_offset@@Base+0xfc>
   223f0:	ldr	r2, [r0, #4]
   223f4:	lsl	r3, r1, #1
   223f8:	ldrh	r3, [r2, r3]
   223fc:	cmp	r3, #0
   22400:	bne	224d4 <flatcc_builder_table_add_offset@@Base+0x118>
   22404:	ldr	r3, [r0, #12]
   22408:	eor	r3, r3, r1
   2240c:	movw	r2, #31153	; 0x79b1
   22410:	movt	r2, #40503	; 0x9e37
   22414:	mul	r3, r2, r3
   22418:	eor	r3, r3, #4
   2241c:	mul	r3, r2, r3
   22420:	str	r3, [r0, #12]
   22424:	uxth	r7, r1
   22428:	ldr	r6, [r0, #20]
   2242c:	add	r6, r6, #3
   22430:	bic	r6, r6, #3
   22434:	add	r1, r6, #4
   22438:	str	r1, [r0, #20]
   2243c:	ldr	r3, [r0, #24]
   22440:	cmp	r1, r3
   22444:	bhi	224f0 <flatcc_builder_table_add_offset@@Base+0x134>
   22448:	uxth	r2, r6
   2244c:	uxth	r5, r5
   22450:	ldr	r3, [r4, #4]
   22454:	lsl	r5, r5, #1
   22458:	add	r1, r2, #4
   2245c:	strh	r1, [r3, r5]
   22460:	ldrh	r3, [r4, #8]
   22464:	cmp	r3, r7
   22468:	addls	r7, r7, #1
   2246c:	strhls	r7, [r4, #8]
   22470:	ldr	r3, [r4]
   22474:	add	r1, r3, #2
   22478:	str	r1, [r4]
   2247c:	strh	r2, [r3]
   22480:	ldr	r0, [r4, #16]
   22484:	add	r0, r0, r6
   22488:	ldrd	r4, [sp]
   2248c:	ldrd	r6, [sp, #8]
   22490:	ldr	r8, [sp, #16]
   22494:	add	sp, sp, #20
   22498:	pop	{pc}		; (ldr pc, [sp], #4)
   2249c:	ldr	r3, [pc, #100]	; 22508 <flatcc_builder_table_add_offset@@Base+0x14c>
   224a0:	movw	r2, #1811	; 0x713
   224a4:	movw	r1, #33604	; 0x8344
   224a8:	movt	r1, #2
   224ac:	movw	r0, #34312	; 0x8608
   224b0:	movt	r0, #2
   224b4:	bl	12a64 <__assert_fail@plt>
   224b8:	ldr	r3, [pc, #72]	; 22508 <flatcc_builder_table_add_offset@@Base+0x14c>
   224bc:	movw	r2, #1812	; 0x714
   224c0:	movw	r1, #33604	; 0x8344
   224c4:	movt	r1, #2
   224c8:	movw	r0, #34464	; 0x86a0
   224cc:	movt	r0, #2
   224d0:	bl	12a64 <__assert_fail@plt>
   224d4:	ldr	r3, [pc, #44]	; 22508 <flatcc_builder_table_add_offset@@Base+0x14c>
   224d8:	movw	r2, #1819	; 0x71b
   224dc:	movw	r1, #33604	; 0x8344
   224e0:	movt	r1, #2
   224e4:	movw	r0, #33688	; 0x8398
   224e8:	movt	r0, #2
   224ec:	bl	12a64 <__assert_fail@plt>
   224f0:	movw	r2, #65532	; 0xfffc
   224f4:	bl	1e540 <main@@Base+0x330>
   224f8:	cmp	r0, #0
   224fc:	movne	r0, #0
   22500:	beq	22448 <flatcc_builder_table_add_offset@@Base+0x8c>
   22504:	b	22488 <flatcc_builder_table_add_offset@@Base+0xcc>
   22508:	andeq	r8, r2, r0, lsr #5

0002250c <flatcc_builder_table_add_union@@Base>:
   2250c:	strd	r4, [sp, #-20]!	; 0xffffffec
   22510:	strd	r6, [sp, #8]
   22514:	str	lr, [sp, #16]
   22518:	sub	sp, sp, #12
   2251c:	mov	r7, r1
   22520:	add	r1, sp, #8
   22524:	stmdb	r1, {r2, r3}
   22528:	ldrb	r6, [sp]
   2252c:	ldr	r5, [sp, #4]
   22530:	ldr	r3, [r0, #32]
   22534:	ldrh	r3, [r3, #14]
   22538:	cmp	r3, #3
   2253c:	bne	225b0 <flatcc_builder_table_add_union@@Base+0xa4>
   22540:	mov	r4, r0
   22544:	clz	r3, r6
   22548:	lsr	r3, r3, #5
   2254c:	cmp	r5, #0
   22550:	moveq	r3, #0
   22554:	cmp	r3, #0
   22558:	bne	225cc <flatcc_builder_table_add_union@@Base+0xc0>
   2255c:	cmp	r5, #0
   22560:	beq	22578 <flatcc_builder_table_add_union@@Base+0x6c>
   22564:	mov	r1, r7
   22568:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   2256c:	cmp	r0, #0
   22570:	strne	r5, [r0]
   22574:	beq	225e8 <flatcc_builder_table_add_union@@Base+0xdc>
   22578:	mov	r3, #1
   2257c:	mov	r2, r3
   22580:	sub	r1, r7, #1
   22584:	mov	r0, r4
   22588:	bl	221cc <flatcc_builder_table_add@@Base>
   2258c:	cmp	r0, #0
   22590:	beq	22604 <flatcc_builder_table_add_union@@Base+0xf8>
   22594:	strb	r6, [r0]
   22598:	mov	r0, #0
   2259c:	add	sp, sp, #12
   225a0:	ldrd	r4, [sp]
   225a4:	ldrd	r6, [sp, #8]
   225a8:	add	sp, sp, #16
   225ac:	pop	{pc}		; (ldr pc, [sp], #4)
   225b0:	ldr	r3, [pc, #104]	; 22620 <flatcc_builder_table_add_union@@Base+0x114>
   225b4:	movw	r2, #1518	; 0x5ee
   225b8:	movw	r1, #33604	; 0x8344
   225bc:	movt	r1, #2
   225c0:	movw	r0, #34312	; 0x8608
   225c4:	movt	r0, #2
   225c8:	bl	12a64 <__assert_fail@plt>
   225cc:	ldr	r3, [pc, #76]	; 22620 <flatcc_builder_table_add_union@@Base+0x114>
   225d0:	movw	r2, #1519	; 0x5ef
   225d4:	movw	r1, #33604	; 0x8344
   225d8:	movt	r1, #2
   225dc:	movw	r0, #34532	; 0x86e4
   225e0:	movt	r0, #2
   225e4:	bl	12a64 <__assert_fail@plt>
   225e8:	ldr	r3, [pc, #48]	; 22620 <flatcc_builder_table_add_union@@Base+0x114>
   225ec:	movw	r2, #1522	; 0x5f2
   225f0:	movw	r1, #33604	; 0x8344
   225f4:	movt	r1, #2
   225f8:	movw	r0, #34568	; 0x8708
   225fc:	movt	r0, #2
   22600:	bl	12a64 <__assert_fail@plt>
   22604:	ldr	r3, [pc, #20]	; 22620 <flatcc_builder_table_add_union@@Base+0x114>
   22608:	movw	r2, #1526	; 0x5f6
   2260c:	movw	r1, #33604	; 0x8344
   22610:	movt	r1, #2
   22614:	movw	r0, #34580	; 0x8714
   22618:	movt	r0, #2
   2261c:	bl	12a64 <__assert_fail@plt>
   22620:	andeq	r8, r2, r0, asr #5

00022624 <flatcc_builder_table_add_union_vector@@Base>:
   22624:	strd	r4, [sp, #-20]!	; 0xffffffec
   22628:	strd	r6, [sp, #8]
   2262c:	str	lr, [sp, #16]
   22630:	sub	sp, sp, #12
   22634:	mov	r7, r1
   22638:	add	r1, sp, #8
   2263c:	stmdb	r1, {r2, r3}
   22640:	ldr	r4, [sp]
   22644:	ldr	r6, [sp, #4]
   22648:	ldr	r3, [r0, #32]
   2264c:	ldrh	r3, [r3, #14]
   22650:	cmp	r3, #3
   22654:	bne	226a0 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   22658:	mov	r5, r0
   2265c:	clz	r3, r6
   22660:	lsr	r3, r3, #5
   22664:	clz	r2, r4
   22668:	lsr	r2, r2, #5
   2266c:	cmp	r2, r3
   22670:	beq	226d8 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   22674:	adds	r4, r4, #0
   22678:	movne	r4, #1
   2267c:	cmp	r4, r3
   22680:	mvnne	r4, #0
   22684:	beq	226bc <flatcc_builder_table_add_union_vector@@Base+0x98>
   22688:	mov	r0, r4
   2268c:	add	sp, sp, #12
   22690:	ldrd	r4, [sp]
   22694:	ldrd	r6, [sp, #8]
   22698:	add	sp, sp, #16
   2269c:	pop	{pc}		; (ldr pc, [sp], #4)
   226a0:	ldr	r3, [pc, #160]	; 22748 <flatcc_builder_table_add_union_vector@@Base+0x124>
   226a4:	mov	r2, #1536	; 0x600
   226a8:	movw	r1, #33604	; 0x8344
   226ac:	movt	r1, #2
   226b0:	movw	r0, #34312	; 0x8608
   226b4:	movt	r0, #2
   226b8:	bl	12a64 <__assert_fail@plt>
   226bc:	ldr	r3, [pc, #132]	; 22748 <flatcc_builder_table_add_union_vector@@Base+0x124>
   226c0:	movw	r2, #1537	; 0x601
   226c4:	movw	r1, #33604	; 0x8344
   226c8:	movt	r1, #2
   226cc:	movw	r0, #34592	; 0x8720
   226d0:	movt	r0, #2
   226d4:	bl	12a64 <__assert_fail@plt>
   226d8:	cmp	r4, #0
   226dc:	beq	22688 <flatcc_builder_table_add_union_vector@@Base+0x64>
   226e0:	sub	r1, r7, #1
   226e4:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   226e8:	cmp	r0, #0
   226ec:	beq	2272c <flatcc_builder_table_add_union_vector@@Base+0x108>
   226f0:	str	r4, [r0]
   226f4:	mov	r1, r7
   226f8:	mov	r0, r5
   226fc:	bl	223bc <flatcc_builder_table_add_offset@@Base>
   22700:	cmp	r0, #0
   22704:	strne	r6, [r0]
   22708:	movne	r4, #0
   2270c:	bne	22688 <flatcc_builder_table_add_union_vector@@Base+0x64>
   22710:	ldr	r3, [pc, #48]	; 22748 <flatcc_builder_table_add_union_vector@@Base+0x124>
   22714:	movw	r2, #1544	; 0x608
   22718:	movw	r1, #33604	; 0x8344
   2271c:	movt	r1, #2
   22720:	movw	r0, #34568	; 0x8708
   22724:	movt	r0, #2
   22728:	bl	12a64 <__assert_fail@plt>
   2272c:	ldr	r3, [pc, #20]	; 22748 <flatcc_builder_table_add_union_vector@@Base+0x124>
   22730:	movw	r2, #1540	; 0x604
   22734:	movw	r1, #33604	; 0x8344
   22738:	movt	r1, #2
   2273c:	movw	r0, #34568	; 0x8708
   22740:	movt	r0, #2
   22744:	bl	12a64 <__assert_fail@plt>
   22748:	andeq	r8, r2, r0, ror #5

0002274c <flatcc_builder_push_buffer_alignment@@Base>:
   2274c:	mov	r3, r0
   22750:	ldrh	r0, [r0, #128]	; 0x80
   22754:	mov	r2, #4
   22758:	strh	r2, [r3, #128]	; 0x80
   2275c:	bx	lr

00022760 <flatcc_builder_pop_buffer_alignment@@Base>:
   22760:	ldrh	r3, [r0, #128]	; 0x80
   22764:	cmp	r3, r1
   22768:	strhcc	r1, [r0, #128]	; 0x80
   2276c:	bx	lr

00022770 <flatcc_builder_get_buffer_alignment@@Base>:
   22770:	ldrh	r0, [r0, #128]	; 0x80
   22774:	bx	lr

00022778 <flatcc_builder_set_vtable_clustering@@Base>:
   22778:	clz	r1, r1
   2277c:	lsr	r1, r1, #5
   22780:	str	r1, [r0, #180]	; 0xb4
   22784:	bx	lr

00022788 <flatcc_builder_set_block_align@@Base>:
   22788:	strh	r1, [r0, #132]	; 0x84
   2278c:	bx	lr

00022790 <flatcc_builder_get_level@@Base>:
   22790:	ldr	r0, [r0, #156]	; 0x9c
   22794:	bx	lr

00022798 <flatcc_builder_set_max_level@@Base>:
   22798:	str	r1, [r0, #176]	; 0xb0
   2279c:	ldr	r3, [r0, #160]	; 0xa0
   227a0:	cmp	r3, r1
   227a4:	strlt	r1, [r0, #160]	; 0xa0
   227a8:	bx	lr

000227ac <flatcc_builder_get_buffer_size@@Base>:
   227ac:	ldr	r2, [r0, #140]	; 0x8c
   227b0:	ldr	r0, [r0, #136]	; 0x88
   227b4:	sub	r0, r2, r0
   227b8:	bx	lr

000227bc <flatcc_builder_get_buffer_start@@Base>:
   227bc:	ldr	r0, [r0, #136]	; 0x88
   227c0:	bx	lr

000227c4 <flatcc_builder_get_buffer_end@@Base>:
   227c4:	ldr	r0, [r0, #140]	; 0x8c
   227c8:	bx	lr

000227cc <flatcc_builder_set_vtable_cache_limit@@Base>:
   227cc:	str	r1, [r0, #172]	; 0xac
   227d0:	bx	lr

000227d4 <flatcc_builder_set_identifier@@Base>:
   227d4:	movw	r3, #31732	; 0x7bf4
   227d8:	movt	r3, #2
   227dc:	cmp	r1, #0
   227e0:	moveq	r1, r3
   227e4:	ldr	r3, [r1]
   227e8:	str	r3, [r0, #168]	; 0xa8
   227ec:	bx	lr

000227f0 <flatcc_builder_get_type@@Base>:
   227f0:	ldr	r3, [r0, #32]
   227f4:	cmp	r3, #0
   227f8:	ldrhne	r0, [r3, #14]
   227fc:	moveq	r0, #0
   22800:	bx	lr

00022804 <flatcc_builder_get_type_at@@Base>:
   22804:	cmp	r1, #0
   22808:	ble	22830 <flatcc_builder_get_type_at@@Base+0x2c>
   2280c:	ldr	r3, [r0, #156]	; 0x9c
   22810:	cmp	r3, r1
   22814:	blt	22838 <flatcc_builder_get_type_at@@Base+0x34>
   22818:	sub	r1, r1, r3
   2281c:	ldr	r3, [r0, #32]
   22820:	add	r1, r1, r1, lsl #3
   22824:	add	r1, r3, r1, lsl #2
   22828:	ldrh	r0, [r1, #14]
   2282c:	bx	lr
   22830:	mov	r0, #0
   22834:	bx	lr
   22838:	mov	r0, #0
   2283c:	bx	lr

00022840 <flatcc_builder_get_direct_buffer@@Base>:
   22840:	ldr	r3, [r0, #184]	; 0xb8
   22844:	cmp	r3, #0
   22848:	bne	22860 <flatcc_builder_get_direct_buffer@@Base+0x20>
   2284c:	cmp	r1, #0
   22850:	beq	228a0 <flatcc_builder_get_direct_buffer@@Base+0x60>
   22854:	mov	r0, #0
   22858:	str	r0, [r1]
   2285c:	bx	lr
   22860:	ldr	r2, [r0, #188]	; 0xbc
   22864:	ldr	r3, [r0, #192]	; 0xc0
   22868:	cmp	r2, r3
   2286c:	beq	22884 <flatcc_builder_get_direct_buffer@@Base+0x44>
   22870:	cmp	r1, #0
   22874:	beq	22898 <flatcc_builder_get_direct_buffer@@Base+0x58>
   22878:	mov	r0, #0
   2287c:	str	r0, [r1]
   22880:	bx	lr
   22884:	cmp	r1, #0
   22888:	ldrne	r3, [r0, #212]	; 0xd4
   2288c:	strne	r3, [r1]
   22890:	ldr	r0, [r0, #196]	; 0xc4
   22894:	bx	lr
   22898:	mov	r0, r1
   2289c:	bx	lr
   228a0:	mov	r0, r1
   228a4:	bx	lr

000228a8 <flatcc_builder_copy_buffer@@Base>:
   228a8:	ldr	r3, [r0, #184]	; 0xb8
   228ac:	cmp	r3, #0
   228b0:	beq	228f4 <flatcc_builder_copy_buffer@@Base+0x4c>
   228b4:	str	r4, [sp, #-8]!
   228b8:	str	lr, [sp, #4]
   228bc:	add	r0, r0, #188	; 0xbc
   228c0:	bl	23064 <flatcc_emitter_copy_buffer@@Base>
   228c4:	cmp	r0, #0
   228c8:	beq	228d8 <flatcc_builder_copy_buffer@@Base+0x30>
   228cc:	ldr	r4, [sp]
   228d0:	add	sp, sp, #4
   228d4:	pop	{pc}		; (ldr pc, [sp], #4)
   228d8:	ldr	r3, [pc, #28]	; 228fc <flatcc_builder_copy_buffer@@Base+0x54>
   228dc:	movw	r2, #1926	; 0x786
   228e0:	movw	r1, #33604	; 0x8344
   228e4:	movt	r1, #2
   228e8:	movw	r0, #21484	; 0x53ec
   228ec:	movt	r0, #2
   228f0:	bl	12a64 <__assert_fail@plt>
   228f4:	mov	r0, #0
   228f8:	bx	lr
   228fc:	andeq	r8, r2, r8, lsl #6

00022900 <flatcc_builder_finalize_buffer@@Base>:
   22900:	strd	r4, [sp, #-16]!
   22904:	str	r6, [sp, #8]
   22908:	str	lr, [sp, #12]
   2290c:	mov	r5, r0
   22910:	ldr	r4, [r0, #140]	; 0x8c
   22914:	ldr	r3, [r0, #136]	; 0x88
   22918:	sub	r4, r4, r3
   2291c:	cmp	r1, #0
   22920:	strne	r4, [r1]
   22924:	mov	r0, r4
   22928:	bl	129d4 <malloc@plt>
   2292c:	subs	r6, r0, #0
   22930:	beq	22960 <flatcc_builder_finalize_buffer@@Base+0x60>
   22934:	mov	r2, r4
   22938:	mov	r1, r6
   2293c:	mov	r0, r5
   22940:	bl	228a8 <flatcc_builder_copy_buffer@@Base>
   22944:	cmp	r0, #0
   22948:	beq	2297c <flatcc_builder_finalize_buffer@@Base+0x7c>
   2294c:	mov	r0, r6
   22950:	ldrd	r4, [sp]
   22954:	ldr	r6, [sp, #8]
   22958:	add	sp, sp, #12
   2295c:	pop	{pc}		; (ldr pc, [sp], #4)
   22960:	ldr	r3, [pc, #48]	; 22998 <flatcc_builder_finalize_buffer@@Base+0x98>
   22964:	movw	r2, #1944	; 0x798
   22968:	movw	r1, #33604	; 0x8344
   2296c:	movt	r1, #2
   22970:	movw	r0, #33688	; 0x8398
   22974:	movt	r0, #2
   22978:	bl	12a64 <__assert_fail@plt>
   2297c:	ldr	r3, [pc, #20]	; 22998 <flatcc_builder_finalize_buffer@@Base+0x98>
   22980:	movw	r2, #1948	; 0x79c
   22984:	movw	r1, #33604	; 0x8344
   22988:	movt	r1, #2
   2298c:	movw	r0, #33688	; 0x8398
   22990:	movt	r0, #2
   22994:	bl	12a64 <__assert_fail@plt>
   22998:	andeq	r8, r2, r4, lsr #6

0002299c <flatcc_builder_finalize_aligned_buffer@@Base>:
   2299c:	strd	r4, [sp, #-20]!	; 0xffffffec
   229a0:	strd	r6, [sp, #8]
   229a4:	str	lr, [sp, #16]
   229a8:	sub	sp, sp, #12
   229ac:	mov	r7, r0
   229b0:	ldr	r4, [r0, #140]	; 0x8c
   229b4:	ldr	r3, [r0, #136]	; 0x88
   229b8:	sub	r3, r4, r3
   229bc:	subs	r6, r1, #0
   229c0:	strne	r3, [r6]
   229c4:	ldrh	r1, [r0, #128]	; 0x80
   229c8:	sub	r4, r1, #1
   229cc:	add	r4, r4, r3
   229d0:	rsb	r3, r1, #0
   229d4:	and	r4, r4, r3
   229d8:	mov	r3, #0
   229dc:	str	r3, [sp, #4]
   229e0:	mov	r2, r4
   229e4:	cmp	r1, #4
   229e8:	movcc	r1, #4
   229ec:	add	r0, sp, #4
   229f0:	bl	12a10 <posix_memalign@plt>
   229f4:	cmp	r0, #0
   229f8:	beq	22a20 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   229fc:	ldr	r0, [sp, #4]
   22a00:	cmp	r0, #0
   22a04:	beq	22a0c <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   22a08:	bl	12980 <free@plt>
   22a0c:	cmp	r6, #0
   22a10:	movne	r5, #0
   22a14:	strne	r5, [r6]
   22a18:	moveq	r5, r6
   22a1c:	b	22a44 <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   22a20:	ldr	r5, [sp, #4]
   22a24:	cmp	r5, #0
   22a28:	beq	22a0c <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   22a2c:	mov	r2, r4
   22a30:	mov	r1, r5
   22a34:	mov	r0, r7
   22a38:	bl	228a8 <flatcc_builder_copy_buffer@@Base>
   22a3c:	cmp	r0, #0
   22a40:	beq	22a5c <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   22a44:	mov	r0, r5
   22a48:	add	sp, sp, #12
   22a4c:	ldrd	r4, [sp]
   22a50:	ldrd	r6, [sp, #8]
   22a54:	add	sp, sp, #16
   22a58:	pop	{pc}		; (ldr pc, [sp], #4)
   22a5c:	mov	r0, r5
   22a60:	bl	12980 <free@plt>
   22a64:	b	22a0c <flatcc_builder_finalize_aligned_buffer@@Base+0x70>

00022a68 <flatcc_builder_aligned_alloc@@Base>:
   22a68:	push	{lr}		; (str lr, [sp, #-4]!)
   22a6c:	sub	sp, sp, #12
   22a70:	mov	r3, #0
   22a74:	str	r3, [sp, #4]
   22a78:	mov	r2, r1
   22a7c:	cmp	r0, #4
   22a80:	movcs	r1, r0
   22a84:	movcc	r1, #4
   22a88:	add	r0, sp, #4
   22a8c:	bl	12a10 <posix_memalign@plt>
   22a90:	cmp	r0, #0
   22a94:	beq	22ab0 <flatcc_builder_aligned_alloc@@Base+0x48>
   22a98:	ldr	r0, [sp, #4]
   22a9c:	cmp	r0, #0
   22aa0:	beq	22ab0 <flatcc_builder_aligned_alloc@@Base+0x48>
   22aa4:	bl	12980 <free@plt>
   22aa8:	mov	r3, #0
   22aac:	str	r3, [sp, #4]
   22ab0:	ldr	r0, [sp, #4]
   22ab4:	add	sp, sp, #12
   22ab8:	pop	{pc}		; (ldr pc, [sp], #4)

00022abc <flatcc_builder_aligned_free@@Base>:
   22abc:	str	r4, [sp, #-8]!
   22ac0:	str	lr, [sp, #4]
   22ac4:	bl	12980 <free@plt>
   22ac8:	ldr	r4, [sp]
   22acc:	add	sp, sp, #4
   22ad0:	pop	{pc}		; (ldr pc, [sp], #4)

00022ad4 <flatcc_builder_get_emit_context@@Base>:
   22ad4:	ldr	r0, [r0, #36]	; 0x24
   22ad8:	bx	lr

00022adc <flatcc_emitter_recycle_page@@Base>:
   22adc:	ldr	r3, [r0]
   22ae0:	cmp	r3, r1
   22ae4:	beq	22b30 <flatcc_emitter_recycle_page@@Base+0x54>
   22ae8:	ldr	r3, [r0, #4]
   22aec:	cmp	r3, r1
   22af0:	beq	22b38 <flatcc_emitter_recycle_page@@Base+0x5c>
   22af4:	ldr	r2, [r1, #2944]	; 0xb80
   22af8:	ldr	r3, [r1, #2948]	; 0xb84
   22afc:	str	r3, [r2, #2948]	; 0xb84
   22b00:	ldr	r2, [r1, #2944]	; 0xb80
   22b04:	str	r2, [r3, #2944]	; 0xb80
   22b08:	ldr	r3, [r0]
   22b0c:	ldr	r3, [r3, #2948]	; 0xb84
   22b10:	str	r3, [r1, #2948]	; 0xb84
   22b14:	ldr	r2, [r0]
   22b18:	str	r2, [r1, #2944]	; 0xb80
   22b1c:	str	r1, [r3, #2944]	; 0xb80
   22b20:	ldr	r3, [r1, #2944]	; 0xb80
   22b24:	str	r1, [r3, #2948]	; 0xb84
   22b28:	mov	r0, #0
   22b2c:	bx	lr
   22b30:	mvn	r0, #0
   22b34:	bx	lr
   22b38:	mvn	r0, #0
   22b3c:	bx	lr

00022b40 <flatcc_emitter_reset@@Base>:
   22b40:	ldr	r3, [r0]
   22b44:	cmp	r3, #0
   22b48:	bxeq	lr
   22b4c:	str	r3, [r0, #4]
   22b50:	add	r2, r3, #1472	; 0x5c0
   22b54:	str	r2, [r0, #8]
   22b58:	str	r2, [r0, #16]
   22b5c:	mov	r2, #1472	; 0x5c0
   22b60:	str	r2, [r0, #12]
   22b64:	str	r2, [r0, #20]
   22b68:	movw	r2, #64064	; 0xfa40
   22b6c:	movt	r2, #65535	; 0xffff
   22b70:	str	r2, [r3, #2952]	; 0xb88
   22b74:	ldr	r3, [r0, #32]
   22b78:	cmp	r3, #0
   22b7c:	ldreq	r3, [r0, #24]
   22b80:	streq	r3, [r0, #32]
   22b84:	ldr	r3, [r0, #32]
   22b88:	add	r2, r3, r3, lsl #1
   22b8c:	ldr	r3, [r0, #24]
   22b90:	lsr	r3, r3, #2
   22b94:	add	r3, r3, r2, lsr #2
   22b98:	str	r3, [r0, #32]
   22b9c:	mov	r2, #0
   22ba0:	str	r2, [r0, #24]
   22ba4:	ldr	r2, [r0, #28]
   22ba8:	cmp	r2, r3, lsl #1
   22bac:	bxls	lr
   22bb0:	str	r4, [sp, #-8]!
   22bb4:	str	lr, [sp, #4]
   22bb8:	mov	r4, r0
   22bbc:	ldr	r3, [r0, #4]
   22bc0:	ldr	r0, [r3, #2944]	; 0xb80
   22bc4:	ldr	r2, [r4]
   22bc8:	cmp	r0, r2
   22bcc:	beq	22c10 <flatcc_emitter_reset@@Base+0xd0>
   22bd0:	ldr	r2, [r0, #2944]	; 0xb80
   22bd4:	str	r2, [r3, #2944]	; 0xb80
   22bd8:	ldr	r3, [r4, #4]
   22bdc:	str	r3, [r2, #2948]	; 0xb84
   22be0:	bl	12980 <free@plt>
   22be4:	ldr	r3, [r4, #28]
   22be8:	sub	r3, r3, #2944	; 0xb80
   22bec:	str	r3, [r4, #28]
   22bf0:	ldr	r2, [r4, #32]
   22bf4:	cmp	r3, r2, lsl #1
   22bf8:	bls	22c10 <flatcc_emitter_reset@@Base+0xd0>
   22bfc:	ldr	r3, [r4, #4]
   22c00:	ldr	r0, [r3, #2944]	; 0xb80
   22c04:	ldr	r2, [r4]
   22c08:	cmp	r0, r2
   22c0c:	bne	22bd0 <flatcc_emitter_reset@@Base+0x90>
   22c10:	ldr	r4, [sp]
   22c14:	add	sp, sp, #4
   22c18:	pop	{pc}		; (ldr pc, [sp], #4)

00022c1c <flatcc_emitter_clear@@Base>:
   22c1c:	ldr	r3, [r0]
   22c20:	cmp	r3, #0
   22c24:	bxeq	lr
   22c28:	strd	r4, [sp, #-16]!
   22c2c:	str	r6, [sp, #8]
   22c30:	str	lr, [sp, #12]
   22c34:	mov	r5, r0
   22c38:	ldr	r2, [r3, #2948]	; 0xb84
   22c3c:	mov	r1, #0
   22c40:	str	r1, [r2, #2944]	; 0xb80
   22c44:	ldr	r4, [r3, #2944]	; 0xb80
   22c48:	cmp	r4, r1
   22c4c:	bne	22c5c <flatcc_emitter_clear@@Base+0x40>
   22c50:	mov	r4, r3
   22c54:	b	22c70 <flatcc_emitter_clear@@Base+0x54>
   22c58:	mov	r4, r3
   22c5c:	ldr	r0, [r4, #2948]	; 0xb84
   22c60:	bl	12980 <free@plt>
   22c64:	ldr	r3, [r4, #2944]	; 0xb80
   22c68:	cmp	r3, #0
   22c6c:	bne	22c58 <flatcc_emitter_clear@@Base+0x3c>
   22c70:	mov	r0, r4
   22c74:	bl	12980 <free@plt>
   22c78:	mov	r2, #36	; 0x24
   22c7c:	mov	r1, #0
   22c80:	mov	r0, r5
   22c84:	bl	12a1c <memset@plt>
   22c88:	ldrd	r4, [sp]
   22c8c:	ldr	r6, [sp, #8]
   22c90:	add	sp, sp, #12
   22c94:	pop	{pc}		; (ldr pc, [sp], #4)

00022c98 <flatcc_emitter@@Base>:
   22c98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22c9c:	strd	r6, [sp, #8]
   22ca0:	strd	r8, [sp, #16]
   22ca4:	strd	sl, [sp, #24]
   22ca8:	str	lr, [sp, #32]
   22cac:	sub	sp, sp, #4
   22cb0:	mov	r4, r0
   22cb4:	ldr	ip, [sp, #40]	; 0x28
   22cb8:	ldr	r0, [r0, #24]
   22cbc:	add	r0, r0, ip
   22cc0:	str	r0, [r4, #24]
   22cc4:	cmp	r3, #0
   22cc8:	blt	22cf8 <flatcc_emitter@@Base+0x60>
   22ccc:	ldr	r3, [r4, #20]
   22cd0:	cmp	r3, ip
   22cd4:	bcs	22de0 <flatcc_emitter@@Base+0x148>
   22cd8:	cmp	r2, #0
   22cdc:	moveq	r0, r2
   22ce0:	beq	22ee0 <flatcc_emitter@@Base+0x248>
   22ce4:	add	r5, r1, #8
   22ce8:	mov	r8, r2
   22cec:	movw	fp, #64064	; 0xfa40
   22cf0:	movt	fp, #65535	; 0xffff
   22cf4:	b	22f3c <flatcc_emitter@@Base+0x2a4>
   22cf8:	ldr	r3, [r4, #12]
   22cfc:	cmp	r3, ip
   22d00:	bcs	22d18 <flatcc_emitter@@Base+0x80>
   22d04:	add	r5, r1, r2, lsl #3
   22d08:	sub	r8, r2, #1
   22d0c:	movw	fp, #64064	; 0xfa40
   22d10:	movt	fp, #65535	; 0xffff
   22d14:	b	22f0c <flatcc_emitter@@Base+0x274>
   22d18:	ldr	r6, [r4, #8]
   22d1c:	sub	r6, r6, ip
   22d20:	str	r6, [r4, #8]
   22d24:	sub	ip, r3, ip
   22d28:	str	ip, [r4, #12]
   22d2c:	b	22df4 <flatcc_emitter@@Base+0x15c>
   22d30:	mov	r2, r6
   22d34:	rsb	r1, r2, #0
   22d38:	ldr	r0, [r4, #8]
   22d3c:	add	r0, r0, r1
   22d40:	str	r0, [r4, #8]
   22d44:	sub	r3, r3, r2
   22d48:	str	r3, [r4, #12]
   22d4c:	add	r9, r9, r1
   22d50:	sub	r6, r6, r2
   22d54:	mov	r1, r9
   22d58:	bl	1298c <memcpy@plt>
   22d5c:	cmp	r6, #0
   22d60:	beq	22f04 <flatcc_emitter@@Base+0x26c>
   22d64:	ldr	r3, [r4, #12]
   22d68:	cmp	r3, r6
   22d6c:	bcs	22d30 <flatcc_emitter@@Base+0x98>
   22d70:	cmp	r3, #0
   22d74:	movne	r2, r3
   22d78:	bne	22d34 <flatcc_emitter@@Base+0x9c>
   22d7c:	ldr	r7, [r4]
   22d80:	cmp	r7, #0
   22d84:	beq	22f98 <flatcc_emitter@@Base+0x300>
   22d88:	ldr	r2, [r7, #2948]	; 0xb84
   22d8c:	ldr	r3, [r4, #4]
   22d90:	cmp	r2, r3
   22d94:	beq	22f5c <flatcc_emitter@@Base+0x2c4>
   22d98:	ldr	r3, [r7, #2952]	; 0xb88
   22d9c:	sub	r3, r3, #2944	; 0xb80
   22da0:	str	r3, [r2, #2952]	; 0xb88
   22da4:	ldr	r3, [r4]
   22da8:	ldr	r3, [r3, #2948]	; 0xb84
   22dac:	str	r3, [r4]
   22db0:	ldr	r3, [r4]
   22db4:	add	r2, r3, #2944	; 0xb80
   22db8:	str	r2, [r4, #8]
   22dbc:	mov	r2, #2944	; 0xb80
   22dc0:	str	r2, [r4, #12]
   22dc4:	ldr	r2, [r3, #2944]	; 0xb80
   22dc8:	ldr	r2, [r2, #2952]	; 0xb88
   22dcc:	sub	r2, r2, #2944	; 0xb80
   22dd0:	str	r2, [r3, #2952]	; 0xb88
   22dd4:	b	22d5c <flatcc_emitter@@Base+0xc4>
   22dd8:	mov	r0, #0
   22ddc:	b	22ee0 <flatcc_emitter@@Base+0x248>
   22de0:	ldr	r6, [r4, #16]
   22de4:	add	r0, r6, ip
   22de8:	str	r0, [r4, #16]
   22dec:	sub	ip, r3, ip
   22df0:	str	ip, [r4, #20]
   22df4:	sub	r4, r2, #1
   22df8:	cmp	r2, #0
   22dfc:	moveq	r0, r2
   22e00:	beq	22ee0 <flatcc_emitter@@Base+0x248>
   22e04:	add	r5, r1, #8
   22e08:	ldr	r2, [r5, #-4]
   22e0c:	ldr	r1, [r5, #-8]
   22e10:	mov	r0, r6
   22e14:	bl	1298c <memcpy@plt>
   22e18:	ldr	r3, [r5, #-4]
   22e1c:	add	r6, r6, r3
   22e20:	sub	r4, r4, #1
   22e24:	add	r5, r5, #8
   22e28:	cmn	r4, #1
   22e2c:	bne	22e08 <flatcc_emitter@@Base+0x170>
   22e30:	mov	r0, #0
   22e34:	b	22ee0 <flatcc_emitter@@Base+0x248>
   22e38:	mov	r6, r7
   22e3c:	mov	r2, r6
   22e40:	mov	r1, r9
   22e44:	ldr	r0, [r4, #16]
   22e48:	bl	1298c <memcpy@plt>
   22e4c:	sub	r7, r7, r6
   22e50:	add	r9, r9, r6
   22e54:	ldr	r3, [r4, #16]
   22e58:	add	r3, r3, r6
   22e5c:	str	r3, [r4, #16]
   22e60:	ldr	r3, [r4, #20]
   22e64:	sub	r6, r3, r6
   22e68:	str	r6, [r4, #20]
   22e6c:	cmp	r7, #0
   22e70:	beq	22f30 <flatcc_emitter@@Base+0x298>
   22e74:	ldr	r6, [r4, #20]
   22e78:	cmp	r6, r7
   22e7c:	bcs	22e38 <flatcc_emitter@@Base+0x1a0>
   22e80:	cmp	r6, #0
   22e84:	bne	22e3c <flatcc_emitter@@Base+0x1a4>
   22e88:	ldr	r6, [r4, #4]
   22e8c:	cmp	r6, #0
   22e90:	beq	2301c <flatcc_emitter@@Base+0x384>
   22e94:	ldr	r3, [r6, #2944]	; 0xb80
   22e98:	ldr	r2, [r4]
   22e9c:	cmp	r3, r2
   22ea0:	beq	22fe0 <flatcc_emitter@@Base+0x348>
   22ea4:	str	r3, [r4, #4]
   22ea8:	ldr	r3, [r4, #4]
   22eac:	str	r3, [r4, #16]
   22eb0:	mov	r2, #2944	; 0xb80
   22eb4:	str	r2, [r4, #20]
   22eb8:	ldr	r2, [r3, #2948]	; 0xb84
   22ebc:	ldr	r2, [r2, #2952]	; 0xb88
   22ec0:	add	r2, r2, #2944	; 0xb80
   22ec4:	str	r2, [r3, #2952]	; 0xb88
   22ec8:	b	22e6c <flatcc_emitter@@Base+0x1d4>
   22ecc:	mvn	r0, #0
   22ed0:	b	22ee0 <flatcc_emitter@@Base+0x248>
   22ed4:	mvn	r0, #0
   22ed8:	b	22ee0 <flatcc_emitter@@Base+0x248>
   22edc:	mvn	r0, #0
   22ee0:	add	sp, sp, #4
   22ee4:	ldrd	r4, [sp]
   22ee8:	ldrd	r6, [sp, #8]
   22eec:	ldrd	r8, [sp, #16]
   22ef0:	ldrd	sl, [sp, #24]
   22ef4:	add	sp, sp, #32
   22ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   22efc:	mvn	r0, #0
   22f00:	b	22ee0 <flatcc_emitter@@Base+0x248>
   22f04:	sub	r5, r5, #8
   22f08:	sub	r8, r8, #1
   22f0c:	cmn	r8, #1
   22f10:	beq	22dd8 <flatcc_emitter@@Base+0x140>
   22f14:	ldr	r6, [r5, #-4]
   22f18:	ldr	r9, [r5, #-8]
   22f1c:	add	r9, r9, r6
   22f20:	cmp	r6, #0
   22f24:	beq	22f04 <flatcc_emitter@@Base+0x26c>
   22f28:	mov	sl, #1472	; 0x5c0
   22f2c:	b	22d64 <flatcc_emitter@@Base+0xcc>
   22f30:	add	r5, r5, #8
   22f34:	subs	r8, r8, #1
   22f38:	beq	22f54 <flatcc_emitter@@Base+0x2bc>
   22f3c:	ldr	r9, [r5, #-8]
   22f40:	ldr	r7, [r5, #-4]
   22f44:	cmp	r7, #0
   22f48:	beq	22f30 <flatcc_emitter@@Base+0x298>
   22f4c:	mov	sl, #1472	; 0x5c0
   22f50:	b	22e74 <flatcc_emitter@@Base+0x1dc>
   22f54:	mov	r0, #0
   22f58:	b	22ee0 <flatcc_emitter@@Base+0x248>
   22f5c:	movw	r0, #2956	; 0xb8c
   22f60:	bl	129d4 <malloc@plt>
   22f64:	cmp	r0, #0
   22f68:	beq	22ecc <flatcc_emitter@@Base+0x234>
   22f6c:	ldr	r3, [r4, #28]
   22f70:	add	r3, r3, #2944	; 0xb80
   22f74:	str	r3, [r4, #28]
   22f78:	ldr	r3, [r4, #4]
   22f7c:	str	r3, [r0, #2948]	; 0xb84
   22f80:	str	r7, [r0, #2944]	; 0xb80
   22f84:	str	r0, [r7, #2948]	; 0xb84
   22f88:	ldr	r3, [r4, #4]
   22f8c:	str	r0, [r3, #2944]	; 0xb80
   22f90:	str	r0, [r4]
   22f94:	b	22db0 <flatcc_emitter@@Base+0x118>
   22f98:	movw	r0, #2956	; 0xb8c
   22f9c:	bl	129d4 <malloc@plt>
   22fa0:	cmp	r0, #0
   22fa4:	beq	22ed4 <flatcc_emitter@@Base+0x23c>
   22fa8:	ldr	r3, [r4, #28]
   22fac:	add	r3, r3, #2944	; 0xb80
   22fb0:	str	r3, [r4, #28]
   22fb4:	str	r0, [r4]
   22fb8:	str	r0, [r4, #4]
   22fbc:	str	r0, [r0, #2944]	; 0xb80
   22fc0:	str	r0, [r0, #2948]	; 0xb84
   22fc4:	add	r3, r0, #1472	; 0x5c0
   22fc8:	str	r3, [r4, #8]
   22fcc:	str	r3, [r4, #16]
   22fd0:	str	sl, [r4, #12]
   22fd4:	str	sl, [r4, #20]
   22fd8:	str	fp, [r0, #2952]	; 0xb88
   22fdc:	b	22d5c <flatcc_emitter@@Base+0xc4>
   22fe0:	movw	r0, #2956	; 0xb8c
   22fe4:	bl	129d4 <malloc@plt>
   22fe8:	cmp	r0, #0
   22fec:	beq	22edc <flatcc_emitter@@Base+0x244>
   22ff0:	ldr	r3, [r4, #28]
   22ff4:	add	r3, r3, #2944	; 0xb80
   22ff8:	str	r3, [r4, #28]
   22ffc:	str	r6, [r0, #2948]	; 0xb84
   23000:	ldr	r3, [r4]
   23004:	str	r3, [r0, #2944]	; 0xb80
   23008:	str	r0, [r3, #2948]	; 0xb84
   2300c:	ldr	r3, [r4, #4]
   23010:	str	r0, [r3, #2944]	; 0xb80
   23014:	str	r0, [r4, #4]
   23018:	b	22ea8 <flatcc_emitter@@Base+0x210>
   2301c:	movw	r0, #2956	; 0xb8c
   23020:	bl	129d4 <malloc@plt>
   23024:	cmp	r0, #0
   23028:	beq	22efc <flatcc_emitter@@Base+0x264>
   2302c:	ldr	r3, [r4, #28]
   23030:	add	r3, r3, #2944	; 0xb80
   23034:	str	r3, [r4, #28]
   23038:	str	r0, [r4]
   2303c:	str	r0, [r4, #4]
   23040:	str	r0, [r0, #2944]	; 0xb80
   23044:	str	r0, [r0, #2948]	; 0xb84
   23048:	add	r3, r0, #1472	; 0x5c0
   2304c:	str	r3, [r4, #8]
   23050:	str	r3, [r4, #16]
   23054:	str	sl, [r4, #12]
   23058:	str	sl, [r4, #20]
   2305c:	str	fp, [r0, #2952]	; 0xb88
   23060:	b	22e6c <flatcc_emitter@@Base+0x1d4>

00023064 <flatcc_emitter_copy_buffer@@Base>:
   23064:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23068:	strd	r6, [sp, #8]
   2306c:	str	r8, [sp, #16]
   23070:	str	lr, [sp, #20]
   23074:	ldr	r3, [r0, #24]
   23078:	cmp	r3, r2
   2307c:	movhi	r4, #0
   23080:	bhi	23110 <flatcc_emitter_copy_buffer@@Base+0xac>
   23084:	ldr	r4, [r0]
   23088:	cmp	r4, #0
   2308c:	beq	23110 <flatcc_emitter_copy_buffer@@Base+0xac>
   23090:	mov	r5, r1
   23094:	mov	r7, r0
   23098:	ldr	r2, [r0, #4]
   2309c:	cmp	r4, r2
   230a0:	beq	23128 <flatcc_emitter_copy_buffer@@Base+0xc4>
   230a4:	ldr	r4, [r0, #12]
   230a8:	rsb	r4, r4, #2944	; 0xb80
   230ac:	mov	r2, r4
   230b0:	ldr	r1, [r0, #8]
   230b4:	mov	r0, r5
   230b8:	bl	1298c <memcpy@plt>
   230bc:	add	r4, r5, r4
   230c0:	ldr	r3, [r7]
   230c4:	ldr	r5, [r3, #2944]	; 0xb80
   230c8:	ldr	r3, [r7, #4]
   230cc:	cmp	r5, r3
   230d0:	beq	23140 <flatcc_emitter_copy_buffer@@Base+0xdc>
   230d4:	mov	r6, #2944	; 0xb80
   230d8:	mov	r2, r6
   230dc:	mov	r1, r5
   230e0:	mov	r0, r4
   230e4:	bl	1298c <memcpy@plt>
   230e8:	add	r4, r4, #2944	; 0xb80
   230ec:	ldr	r5, [r5, #2944]	; 0xb80
   230f0:	ldr	r3, [r7, #4]
   230f4:	cmp	r3, r5
   230f8:	bne	230d8 <flatcc_emitter_copy_buffer@@Base+0x74>
   230fc:	ldr	r2, [r7, #20]
   23100:	rsb	r2, r2, #2944	; 0xb80
   23104:	mov	r1, r5
   23108:	mov	r0, r4
   2310c:	bl	1298c <memcpy@plt>
   23110:	mov	r0, r4
   23114:	ldrd	r4, [sp]
   23118:	ldrd	r6, [sp, #8]
   2311c:	ldr	r8, [sp, #16]
   23120:	add	sp, sp, #20
   23124:	pop	{pc}		; (ldr pc, [sp], #4)
   23128:	mov	r2, r3
   2312c:	ldr	r1, [r0, #8]
   23130:	mov	r0, r5
   23134:	bl	1298c <memcpy@plt>
   23138:	mov	r4, r5
   2313c:	b	23110 <flatcc_emitter_copy_buffer@@Base+0xac>
   23140:	mov	r5, r3
   23144:	b	230fc <flatcc_emitter_copy_buffer@@Base+0x98>
   23148:	add	r1, r1, #2
   2314c:	lsl	r1, r1, #1
   23150:	uxth	r1, r1
   23154:	ldrh	ip, [r0, #22]
   23158:	cmp	ip, r1
   2315c:	bls	2319c <flatcc_emitter_copy_buffer@@Base+0x138>
   23160:	ldr	ip, [r0, #12]
   23164:	ldrh	r1, [ip, r1]
   23168:	cmp	r1, #0
   2316c:	beq	2319c <flatcc_emitter_copy_buffer@@Base+0x138>
   23170:	ldrh	ip, [r0, #20]
   23174:	add	r2, r1, #4
   23178:	cmp	ip, r2
   2317c:	bcc	231b4 <flatcc_emitter_copy_buffer@@Base+0x150>
   23180:	ldr	r2, [r0, #16]
   23184:	add	r1, r1, r2
   23188:	tst	r1, #3
   2318c:	bne	231bc <flatcc_emitter_copy_buffer@@Base+0x158>
   23190:	str	r1, [r3]
   23194:	mov	r0, #0
   23198:	bx	lr
   2319c:	mov	r1, #0
   231a0:	str	r1, [r3]
   231a4:	cmp	r2, r1
   231a8:	moveq	r0, r2
   231ac:	movne	r0, #4
   231b0:	bx	lr
   231b4:	mov	r0, #13
   231b8:	bx	lr
   231bc:	mov	r0, #12
   231c0:	bx	lr

000231c4 <flatcc_verify_error_string@@Base>:
   231c4:	cmp	r0, #36	; 0x24
   231c8:	ldrls	pc, [pc, r0, lsl #2]
   231cc:	b	23414 <flatcc_verify_error_string@@Base+0x250>
   231d0:	andeq	r3, r2, r0, lsr #8
   231d4:	andeq	r3, r2, r4, ror #4
   231d8:	andeq	r3, r2, r0, ror r2
   231dc:	andeq	r3, r2, ip, ror r2
   231e0:	andeq	r3, r2, r8, lsl #5
   231e4:	muleq	r2, r4, r2
   231e8:	andeq	r3, r2, r0, lsr #5
   231ec:	andeq	r3, r2, ip, lsr #5
   231f0:			; <UNDEFINED> instruction: 0x000232b8
   231f4:	andeq	r3, r2, r4, asr #5
   231f8:	ldrdeq	r3, [r2], -r0
   231fc:	ldrdeq	r3, [r2], -ip
   23200:	andeq	r3, r2, r8, ror #5
   23204:	strdeq	r3, [r2], -r4
   23208:	andeq	r3, r2, r0, lsl #6
   2320c:	andeq	r3, r2, ip, lsl #6
   23210:	andeq	r3, r2, r8, lsl r3
   23214:	andeq	r3, r2, r4, lsr #6
   23218:	andeq	r3, r2, r0, lsr r3
   2321c:	andeq	r3, r2, ip, lsr r3
   23220:	andeq	r3, r2, r8, asr #6
   23224:	andeq	r3, r2, r4, asr r3
   23228:	andeq	r3, r2, r0, ror #6
   2322c:	andeq	r3, r2, ip, ror #6
   23230:	andeq	r3, r2, r8, ror r3
   23234:	andeq	r3, r2, r4, lsl #7
   23238:	muleq	r2, r0, r3
   2323c:	muleq	r2, ip, r3
   23240:	andeq	r3, r2, r8, lsr #7
   23244:			; <UNDEFINED> instruction: 0x000233b4
   23248:	andeq	r3, r2, r0, asr #7
   2324c:	andeq	r3, r2, ip, asr #7
   23250:	ldrdeq	r3, [r2], -r8
   23254:	andeq	r3, r2, r4, ror #7
   23258:	strdeq	r3, [r2], -r0
   2325c:	strdeq	r3, [r2], -ip
   23260:	andeq	r3, r2, r8, lsl #8
   23264:	movw	r0, #35776	; 0x8bc0
   23268:	movt	r0, #2
   2326c:	bx	lr
   23270:	movw	r0, #34644	; 0x8754
   23274:	movt	r0, #2
   23278:	bx	lr
   2327c:	movw	r0, #34664	; 0x8768
   23280:	movt	r0, #2
   23284:	bx	lr
   23288:	movw	r0, #34692	; 0x8784
   2328c:	movt	r0, #2
   23290:	bx	lr
   23294:	movw	r0, #34716	; 0x879c
   23298:	movt	r0, #2
   2329c:	bx	lr
   232a0:	movw	r0, #34752	; 0x87c0
   232a4:	movt	r0, #2
   232a8:	bx	lr
   232ac:	movw	r0, #34784	; 0x87e0
   232b0:	movt	r0, #2
   232b4:	bx	lr
   232b8:	movw	r0, #34812	; 0x87fc
   232bc:	movt	r0, #2
   232c0:	bx	lr
   232c4:	movw	r0, #34832	; 0x8810
   232c8:	movt	r0, #2
   232cc:	bx	lr
   232d0:	movw	r0, #34852	; 0x8824
   232d4:	movt	r0, #2
   232d8:	bx	lr
   232dc:	movw	r0, #34876	; 0x883c
   232e0:	movt	r0, #2
   232e4:	bx	lr
   232e8:	movw	r0, #34896	; 0x8850
   232ec:	movt	r0, #2
   232f0:	bx	lr
   232f4:	movw	r0, #34920	; 0x8868
   232f8:	movt	r0, #2
   232fc:	bx	lr
   23300:	movw	r0, #34948	; 0x8884
   23304:	movt	r0, #2
   23308:	bx	lr
   2330c:	movw	r0, #34976	; 0x88a0
   23310:	movt	r0, #2
   23314:	bx	lr
   23318:	movw	r0, #35016	; 0x88c8
   2331c:	movt	r0, #2
   23320:	bx	lr
   23324:	movw	r0, #35056	; 0x88f0
   23328:	movt	r0, #2
   2332c:	bx	lr
   23330:	movw	r0, #35096	; 0x8918
   23334:	movt	r0, #2
   23338:	bx	lr
   2333c:	movw	r0, #35116	; 0x892c
   23340:	movt	r0, #2
   23344:	bx	lr
   23348:	movw	r0, #35156	; 0x8954
   2334c:	movt	r0, #2
   23350:	bx	lr
   23354:	movw	r0, #35180	; 0x896c
   23358:	movt	r0, #2
   2335c:	bx	lr
   23360:	movw	r0, #35224	; 0x8998
   23364:	movt	r0, #2
   23368:	bx	lr
   2336c:	movw	r0, #35276	; 0x89cc
   23370:	movt	r0, #2
   23374:	bx	lr
   23378:	movw	r0, #35320	; 0x89f8
   2337c:	movt	r0, #2
   23380:	bx	lr
   23384:	movw	r0, #35364	; 0x8a24
   23388:	movt	r0, #2
   2338c:	bx	lr
   23390:	movw	r0, #35412	; 0x8a54
   23394:	movt	r0, #2
   23398:	bx	lr
   2339c:	movw	r0, #35432	; 0x8a68
   233a0:	movt	r0, #2
   233a4:	bx	lr
   233a8:	movw	r0, #35460	; 0x8a84
   233ac:	movt	r0, #2
   233b0:	bx	lr
   233b4:	movw	r0, #35484	; 0x8a9c
   233b8:	movt	r0, #2
   233bc:	bx	lr
   233c0:	movw	r0, #35524	; 0x8ac4
   233c4:	movt	r0, #2
   233c8:	bx	lr
   233cc:	movw	r0, #35564	; 0x8aec
   233d0:	movt	r0, #2
   233d4:	bx	lr
   233d8:	movw	r0, #35588	; 0x8b04
   233dc:	movt	r0, #2
   233e0:	bx	lr
   233e4:	movw	r0, #35628	; 0x8b2c
   233e8:	movt	r0, #2
   233ec:	bx	lr
   233f0:	movw	r0, #35668	; 0x8b54
   233f4:	movt	r0, #2
   233f8:	bx	lr
   233fc:	movw	r0, #35720	; 0x8b88
   23400:	movt	r0, #2
   23404:	bx	lr
   23408:	movw	r0, #35760	; 0x8bb0
   2340c:	movt	r0, #2
   23410:	bx	lr
   23414:	movw	r0, #34632	; 0x8748
   23418:	movt	r0, #2
   2341c:	bx	lr
   23420:	movw	r0, #34640	; 0x8750
   23424:	movt	r0, #2
   23428:	bx	lr

0002342c <flatcc_verify_field@@Base>:
   2342c:	add	r1, r1, #2
   23430:	lsl	r1, r1, #1
   23434:	uxth	r1, r1
   23438:	ldrh	ip, [r0, #22]
   2343c:	cmp	ip, r1
   23440:	bls	2348c <flatcc_verify_field@@Base+0x60>
   23444:	ldr	ip, [r0, #12]
   23448:	ldrh	r1, [ip, r1]
   2344c:	cmp	r1, #0
   23450:	beq	23494 <flatcc_verify_field@@Base+0x68>
   23454:	add	r2, r2, r1
   23458:	ldrh	ip, [r0, #20]
   2345c:	cmp	r2, ip
   23460:	bhi	2349c <flatcc_verify_field@@Base+0x70>
   23464:	ldr	r2, [r0]
   23468:	ldr	r0, [r0, #16]
   2346c:	add	r2, r2, r0
   23470:	add	r2, r2, r1
   23474:	sub	r3, r3, #1
   23478:	and	r2, r2, r3
   2347c:	cmp	r2, #0
   23480:	moveq	r0, #0
   23484:	movne	r0, #12
   23488:	bx	lr
   2348c:	mov	r0, #0
   23490:	bx	lr
   23494:	mov	r0, #0
   23498:	bx	lr
   2349c:	mov	r0, #13
   234a0:	bx	lr

000234a4 <flatcc_verify_string_field@@Base>:
   234a4:	str	r4, [sp, #-8]!
   234a8:	str	lr, [sp, #4]
   234ac:	sub	sp, sp, #8
   234b0:	mov	r4, r0
   234b4:	add	r3, sp, #4
   234b8:	bl	23148 <flatcc_emitter_copy_buffer@@Base+0xe4>
   234bc:	cmp	r0, #0
   234c0:	bne	23530 <flatcc_verify_string_field@@Base+0x8c>
   234c4:	ldr	r3, [sp, #4]
   234c8:	cmp	r3, #0
   234cc:	beq	23530 <flatcc_verify_string_field@@Base+0x8c>
   234d0:	ldr	r1, [r4]
   234d4:	ldr	r2, [r1, r3]
   234d8:	add	r2, r3, r2
   234dc:	cmp	r3, r2
   234e0:	movcs	r0, #17
   234e4:	bcs	23530 <flatcc_verify_string_field@@Base+0x8c>
   234e8:	ldr	r3, [r4, #4]
   234ec:	add	ip, r2, #4
   234f0:	cmp	r3, ip
   234f4:	movcc	r0, #17
   234f8:	bcc	23530 <flatcc_verify_string_field@@Base+0x8c>
   234fc:	tst	r2, #3
   23500:	movne	r0, #17
   23504:	bne	23530 <flatcc_verify_string_field@@Base+0x8c>
   23508:	ldr	r2, [r1, r2]
   2350c:	sub	r3, r3, ip
   23510:	add	lr, r2, #1
   23514:	cmp	r3, lr
   23518:	movcc	r0, #8
   2351c:	bcc	23530 <flatcc_verify_string_field@@Base+0x8c>
   23520:	add	r1, r1, ip
   23524:	ldrb	r3, [r1, r2]
   23528:	cmp	r3, #0
   2352c:	movne	r0, #7
   23530:	add	sp, sp, #8
   23534:	ldr	r4, [sp]
   23538:	add	sp, sp, #4
   2353c:	pop	{pc}		; (ldr pc, [sp], #4)

00023540 <flatcc_verify_vector_field@@Base>:
   23540:	strd	r4, [sp, #-16]!
   23544:	str	r6, [sp, #8]
   23548:	str	lr, [sp, #12]
   2354c:	sub	sp, sp, #8
   23550:	mov	r6, r0
   23554:	mov	r5, r3
   23558:	ldrh	r4, [sp, #24]
   2355c:	add	r3, sp, #4
   23560:	bl	23148 <flatcc_emitter_copy_buffer@@Base+0xe4>
   23564:	cmp	r0, #0
   23568:	bne	235e4 <flatcc_verify_vector_field@@Base+0xa4>
   2356c:	ldr	r3, [sp, #4]
   23570:	cmp	r3, #0
   23574:	beq	235e4 <flatcc_verify_vector_field@@Base+0xa4>
   23578:	ldr	r1, [r6]
   2357c:	ldr	r2, [r1, r3]
   23580:	add	r2, r3, r2
   23584:	cmp	r3, r2
   23588:	movcs	r0, #16
   2358c:	bcs	235e4 <flatcc_verify_vector_field@@Base+0xa4>
   23590:	ldr	ip, [r6, #4]
   23594:	add	r3, r2, #4
   23598:	cmp	ip, r3
   2359c:	movcc	r0, #16
   235a0:	bcc	235e4 <flatcc_verify_vector_field@@Base+0xa4>
   235a4:	cmp	r4, #4
   235a8:	movcc	r4, #4
   235ac:	sub	r4, r4, #1
   235b0:	orr	r4, r4, #3
   235b4:	tst	r4, r3
   235b8:	movne	r0, #16
   235bc:	bne	235e4 <flatcc_verify_vector_field@@Base+0xa4>
   235c0:	ldr	r2, [r1, r2]
   235c4:	ldr	r1, [sp, #28]
   235c8:	cmp	r1, r2
   235cc:	movcc	r0, #25
   235d0:	bcc	235e4 <flatcc_verify_vector_field@@Base+0xa4>
   235d4:	sub	r3, ip, r3
   235d8:	mul	r5, r2, r5
   235dc:	cmp	r3, r5
   235e0:	movcc	r0, #26
   235e4:	add	sp, sp, #8
   235e8:	ldrd	r4, [sp]
   235ec:	ldr	r6, [sp, #8]
   235f0:	add	sp, sp, #12
   235f4:	pop	{pc}		; (ldr pc, [sp], #4)

000235f8 <flatcc_verify_string_vector_field@@Base>:
   235f8:	strd	r4, [sp, #-20]!	; 0xffffffec
   235fc:	strd	r6, [sp, #8]
   23600:	str	lr, [sp, #16]
   23604:	sub	sp, sp, #12
   23608:	mov	r4, r0
   2360c:	add	r3, sp, #4
   23610:	bl	23148 <flatcc_emitter_copy_buffer@@Base+0xe4>
   23614:	cmp	r0, #0
   23618:	bne	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   2361c:	ldr	r3, [sp, #4]
   23620:	cmp	r3, #0
   23624:	beq	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   23628:	ldr	r1, [r4]
   2362c:	ldr	r2, [r1, r3]
   23630:	add	r2, r3, r2
   23634:	cmp	r3, r2
   23638:	movcs	r0, #16
   2363c:	bcs	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   23640:	ldr	r4, [r4, #4]
   23644:	add	r3, r2, #4
   23648:	cmp	r4, r3
   2364c:	movcc	r0, #16
   23650:	bcc	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   23654:	tst	r3, #3
   23658:	bne	23788 <flatcc_verify_string_vector_field@@Base+0x190>
   2365c:	ldr	ip, [r1, r2]
   23660:	cmn	ip, #-1073741823	; 0xc0000001
   23664:	bhi	23788 <flatcc_verify_string_vector_field@@Base+0x190>
   23668:	lsl	r5, ip, #2
   2366c:	sub	lr, r4, r3
   23670:	cmp	lr, r5
   23674:	bcc	23788 <flatcc_verify_string_vector_field@@Base+0x190>
   23678:	cmp	ip, #0
   2367c:	beq	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   23680:	ldr	r2, [r1, r3]
   23684:	add	r2, r3, r2
   23688:	cmp	r2, r3
   2368c:	movls	r0, #17
   23690:	bls	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   23694:	add	lr, r2, #4
   23698:	cmp	r4, lr
   2369c:	movcc	r0, #17
   236a0:	bcc	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   236a4:	tst	r2, #3
   236a8:	bne	23718 <flatcc_verify_string_vector_field@@Base+0x120>
   236ac:	ldr	r7, [r1, r2]
   236b0:	sub	ip, r4, lr
   236b4:	add	r6, r7, #1
   236b8:	cmp	ip, r6
   236bc:	addcs	ip, r3, r5
   236c0:	bcc	23718 <flatcc_verify_string_vector_field@@Base+0x120>
   236c4:	add	lr, r1, lr
   236c8:	ldrb	lr, [lr, r7]
   236cc:	cmp	lr, #0
   236d0:	bne	23754 <flatcc_verify_string_vector_field@@Base+0x15c>
   236d4:	add	r3, r3, #4
   236d8:	cmp	r3, ip
   236dc:	beq	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   236e0:	ldr	r2, [r1, r3]
   236e4:	add	r2, r3, r2
   236e8:	cmp	r2, r3
   236ec:	bls	23770 <flatcc_verify_string_vector_field@@Base+0x178>
   236f0:	add	lr, r2, #4
   236f4:	cmp	r4, lr
   236f8:	bcc	23778 <flatcc_verify_string_vector_field@@Base+0x180>
   236fc:	tst	r2, #3
   23700:	bne	23718 <flatcc_verify_string_vector_field@@Base+0x120>
   23704:	ldr	r7, [r1, r2]
   23708:	sub	r5, r4, lr
   2370c:	add	r6, r7, #1
   23710:	cmp	r5, r6
   23714:	bcs	236c4 <flatcc_verify_string_vector_field@@Base+0xcc>
   23718:	add	ip, r2, #4
   2371c:	tst	r2, #3
   23720:	movne	r0, #17
   23724:	bne	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   23728:	ldr	r2, [r1, r2]
   2372c:	sub	r3, r4, ip
   23730:	add	lr, r2, #1
   23734:	cmp	r3, lr
   23738:	movcc	r0, #8
   2373c:	bcc	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   23740:	add	r1, r1, ip
   23744:	ldrb	r3, [r1, r2]
   23748:	cmp	r3, #0
   2374c:	movne	r0, #7
   23750:	b	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   23754:	cmp	r3, r2
   23758:	bcs	23780 <flatcc_verify_string_vector_field@@Base+0x188>
   2375c:	add	ip, r2, #4
   23760:	cmp	r4, ip
   23764:	bcs	2371c <flatcc_verify_string_vector_field@@Base+0x124>
   23768:	mov	r0, #17
   2376c:	b	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   23770:	mov	r0, #17
   23774:	b	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   23778:	mov	r0, #17
   2377c:	b	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   23780:	mov	r0, #17
   23784:	b	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   23788:	tst	r3, #3
   2378c:	movne	r0, #16
   23790:	bne	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   23794:	ldr	r2, [r1, r2]
   23798:	cmn	r2, #-1073741823	; 0xc0000001
   2379c:	movhi	r0, #25
   237a0:	bhi	237b4 <flatcc_verify_string_vector_field@@Base+0x1bc>
   237a4:	sub	r3, r4, r3
   237a8:	lsl	r2, r2, #2
   237ac:	cmp	r3, r2
   237b0:	movcc	r0, #26
   237b4:	add	sp, sp, #12
   237b8:	ldrd	r4, [sp]
   237bc:	ldrd	r6, [sp, #8]
   237c0:	add	sp, sp, #16
   237c4:	pop	{pc}		; (ldr pc, [sp], #4)

000237c8 <flatcc_verify_table_field@@Base>:
   237c8:	strd	r4, [sp, #-12]!
   237cc:	str	lr, [sp, #8]
   237d0:	sub	sp, sp, #36	; 0x24
   237d4:	mov	r4, r0
   237d8:	mov	r5, r3
   237dc:	add	r3, sp, #28
   237e0:	bl	23148 <flatcc_emitter_copy_buffer@@Base+0xe4>
   237e4:	cmp	r0, #0
   237e8:	bne	237f8 <flatcc_verify_table_field@@Base+0x30>
   237ec:	ldr	r3, [sp, #28]
   237f0:	cmp	r3, #0
   237f4:	bne	23808 <flatcc_verify_table_field@@Base+0x40>
   237f8:	add	sp, sp, #36	; 0x24
   237fc:	ldrd	r4, [sp]
   23800:	add	sp, sp, #8
   23804:	pop	{pc}		; (ldr pc, [sp], #4)
   23808:	ldr	r0, [r4]
   2380c:	ldr	ip, [r4, #4]
   23810:	ldr	r1, [r0, r3]
   23814:	ldr	r2, [r4, #8]
   23818:	sub	r2, r2, #1
   2381c:	str	r2, [sp, #12]
   23820:	cmp	r2, #0
   23824:	moveq	r0, #3
   23828:	beq	237f8 <flatcc_verify_table_field@@Base+0x30>
   2382c:	add	r2, r3, r1
   23830:	cmp	r3, r2
   23834:	movcs	r0, #15
   23838:	bcs	237f8 <flatcc_verify_table_field@@Base+0x30>
   2383c:	add	r3, r2, #4
   23840:	cmp	ip, r3
   23844:	movcc	r0, #15
   23848:	bcc	237f8 <flatcc_verify_table_field@@Base+0x30>
   2384c:	tst	r2, #3
   23850:	movne	r0, #15
   23854:	bne	237f8 <flatcc_verify_table_field@@Base+0x30>
   23858:	str	r2, [sp, #20]
   2385c:	ldr	r3, [r0, r2]
   23860:	subs	r3, r2, r3
   23864:	movmi	r0, #29
   23868:	bmi	237f8 <flatcc_verify_table_field@@Base+0x30>
   2386c:	tst	r3, #1
   23870:	movne	r0, #29
   23874:	bne	237f8 <flatcc_verify_table_field@@Base+0x30>
   23878:	add	lr, r3, #2
   2387c:	cmp	ip, lr
   23880:	movcc	r0, #27
   23884:	bcc	237f8 <flatcc_verify_table_field@@Base+0x30>
   23888:	add	r4, r0, r3
   2388c:	ldrh	r1, [r0, r3]
   23890:	strh	r1, [sp, #26]
   23894:	add	r3, r1, r3
   23898:	cmp	ip, r3
   2389c:	movcc	r0, #30
   238a0:	bcc	237f8 <flatcc_verify_table_field@@Base+0x30>
   238a4:	tst	r1, #1
   238a8:	movne	r0, #30
   238ac:	bne	237f8 <flatcc_verify_table_field@@Base+0x30>
   238b0:	cmp	r1, #3
   238b4:	movls	r0, #28
   238b8:	bls	237f8 <flatcc_verify_table_field@@Base+0x30>
   238bc:	ldrh	r3, [r0, lr]
   238c0:	strh	r3, [sp, #24]
   238c4:	sub	r2, ip, r2
   238c8:	cmp	r2, r3
   238cc:	movcc	r0, #20
   238d0:	bcc	237f8 <flatcc_verify_table_field@@Base+0x30>
   238d4:	str	r4, [sp, #16]
   238d8:	str	r0, [sp, #4]
   238dc:	str	ip, [sp, #8]
   238e0:	add	r0, sp, #4
   238e4:	blx	r5
   238e8:	b	237f8 <flatcc_verify_table_field@@Base+0x30>

000238ec <flatcc_verify_table_vector_field@@Base>:
   238ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   238f0:	strd	r6, [sp, #8]
   238f4:	strd	r8, [sp, #16]
   238f8:	strd	sl, [sp, #24]
   238fc:	str	lr, [sp, #32]
   23900:	sub	sp, sp, #36	; 0x24
   23904:	mov	r4, r0
   23908:	mov	r5, r3
   2390c:	add	r3, sp, #28
   23910:	bl	23148 <flatcc_emitter_copy_buffer@@Base+0xe4>
   23914:	cmp	r0, #0
   23918:	bne	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   2391c:	ldr	r3, [sp, #28]
   23920:	cmp	r3, #0
   23924:	bne	23944 <flatcc_verify_table_vector_field@@Base+0x58>
   23928:	add	sp, sp, #36	; 0x24
   2392c:	ldrd	r4, [sp]
   23930:	ldrd	r6, [sp, #8]
   23934:	ldrd	r8, [sp, #16]
   23938:	ldrd	sl, [sp, #24]
   2393c:	add	sp, sp, #32
   23940:	pop	{pc}		; (ldr pc, [sp], #4)
   23944:	ldr	r7, [r4]
   23948:	ldr	r2, [r7, r3]
   2394c:	ldr	r6, [r4, #8]
   23950:	cmp	r6, #0
   23954:	movle	r0, #3
   23958:	ble	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   2395c:	add	r2, r3, r2
   23960:	cmp	r3, r2
   23964:	movcs	r0, #16
   23968:	bcs	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   2396c:	ldr	r8, [r4, #4]
   23970:	add	r4, r2, #4
   23974:	cmp	r8, r4
   23978:	movcc	r0, #16
   2397c:	bcc	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   23980:	tst	r4, #3
   23984:	bne	23b80 <flatcc_verify_table_vector_field@@Base+0x294>
   23988:	ldr	r3, [r7, r2]
   2398c:	cmn	r3, #-1073741823	; 0xc0000001
   23990:	bhi	23b80 <flatcc_verify_table_vector_field@@Base+0x294>
   23994:	lsl	sl, r3, #2
   23998:	sub	r1, r8, r4
   2399c:	cmp	r1, sl
   239a0:	bcc	23b80 <flatcc_verify_table_vector_field@@Base+0x294>
   239a4:	cmp	r3, #0
   239a8:	addne	r9, r7, r4
   239ac:	addne	sl, r4, sl
   239b0:	subne	r6, r6, #2
   239b4:	bne	23a08 <flatcc_verify_table_vector_field@@Base+0x11c>
   239b8:	b	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   239bc:	ldr	r3, [r7, r2]
   239c0:	cmn	r3, #-1073741823	; 0xc0000001
   239c4:	movhi	r0, #25
   239c8:	bhi	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   239cc:	sub	r4, r8, r4
   239d0:	lsl	r3, r3, #2
   239d4:	cmp	r4, r3
   239d8:	movcc	r0, #26
   239dc:	b	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   239e0:	str	r2, [sp, #16]
   239e4:	str	r7, [sp, #4]
   239e8:	str	r8, [sp, #8]
   239ec:	add	r0, sp, #4
   239f0:	blx	r5
   239f4:	cmp	r0, #0
   239f8:	bne	23b6c <flatcc_verify_table_vector_field@@Base+0x280>
   239fc:	add	r4, r4, #4
   23a00:	cmp	r4, sl
   23a04:	beq	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   23a08:	mov	fp, r9
   23a0c:	ldr	r3, [r9], #4
   23a10:	str	r6, [sp, #12]
   23a14:	cmp	r6, #0
   23a18:	beq	23a9c <flatcc_verify_table_vector_field@@Base+0x1b0>
   23a1c:	add	r3, r3, r4
   23a20:	cmp	r4, r3
   23a24:	bcs	23a9c <flatcc_verify_table_vector_field@@Base+0x1b0>
   23a28:	add	r2, r3, #4
   23a2c:	cmp	r8, r2
   23a30:	bcc	23a9c <flatcc_verify_table_vector_field@@Base+0x1b0>
   23a34:	tst	r3, #3
   23a38:	bne	23a9c <flatcc_verify_table_vector_field@@Base+0x1b0>
   23a3c:	str	r3, [sp, #20]
   23a40:	ldr	r1, [r7, r3]
   23a44:	subs	r1, r3, r1
   23a48:	bmi	23a9c <flatcc_verify_table_vector_field@@Base+0x1b0>
   23a4c:	tst	r1, #1
   23a50:	bne	23a9c <flatcc_verify_table_vector_field@@Base+0x1b0>
   23a54:	add	ip, r1, #2
   23a58:	cmp	r8, ip
   23a5c:	bcc	23a9c <flatcc_verify_table_vector_field@@Base+0x1b0>
   23a60:	add	r2, r7, r1
   23a64:	ldrh	r0, [r7, r1]
   23a68:	strh	r0, [sp, #26]
   23a6c:	add	r1, r0, r1
   23a70:	cmp	r8, r1
   23a74:	bcc	23a9c <flatcc_verify_table_vector_field@@Base+0x1b0>
   23a78:	tst	r0, #1
   23a7c:	bne	23a9c <flatcc_verify_table_vector_field@@Base+0x1b0>
   23a80:	cmp	r0, #3
   23a84:	bls	23a9c <flatcc_verify_table_vector_field@@Base+0x1b0>
   23a88:	ldrh	r1, [r7, ip]
   23a8c:	strh	r1, [sp, #24]
   23a90:	sub	r3, r8, r3
   23a94:	cmp	r3, r1
   23a98:	bcs	239e0 <flatcc_verify_table_vector_field@@Base+0xf4>
   23a9c:	ldr	r3, [fp]
   23aa0:	str	r6, [sp, #12]
   23aa4:	cmp	r6, #0
   23aa8:	beq	23b78 <flatcc_verify_table_vector_field@@Base+0x28c>
   23aac:	add	r3, r4, r3
   23ab0:	cmp	r4, r3
   23ab4:	movcs	r0, #15
   23ab8:	bcs	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   23abc:	add	r2, r3, #4
   23ac0:	cmp	r8, r2
   23ac4:	movcc	r0, #15
   23ac8:	bcc	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   23acc:	tst	r3, #3
   23ad0:	movne	r0, #15
   23ad4:	bne	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   23ad8:	str	r3, [sp, #20]
   23adc:	ldr	r2, [r7, r3]
   23ae0:	subs	r2, r3, r2
   23ae4:	movmi	r0, #29
   23ae8:	bmi	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   23aec:	tst	r2, #1
   23af0:	movne	r0, #29
   23af4:	bne	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   23af8:	add	r0, r2, #2
   23afc:	cmp	r8, r0
   23b00:	movcc	r0, #27
   23b04:	bcc	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   23b08:	add	ip, r7, r2
   23b0c:	ldrh	r1, [r7, r2]
   23b10:	strh	r1, [sp, #26]
   23b14:	add	r2, r1, r2
   23b18:	cmp	r8, r2
   23b1c:	movcc	r0, #30
   23b20:	bcc	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   23b24:	tst	r1, #1
   23b28:	movne	r0, #30
   23b2c:	bne	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   23b30:	cmp	r1, #3
   23b34:	movls	r0, #28
   23b38:	bls	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   23b3c:	ldrh	r2, [r7, r0]
   23b40:	strh	r2, [sp, #24]
   23b44:	sub	r3, r8, r3
   23b48:	cmp	r3, r2
   23b4c:	movcc	r0, #20
   23b50:	bcc	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   23b54:	str	ip, [sp, #16]
   23b58:	str	r7, [sp, #4]
   23b5c:	str	r8, [sp, #8]
   23b60:	add	r0, sp, #4
   23b64:	blx	r5
   23b68:	b	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   23b6c:	ldr	r3, [fp]
   23b70:	str	r6, [sp, #12]
   23b74:	b	23aac <flatcc_verify_table_vector_field@@Base+0x1c0>
   23b78:	mov	r0, #3
   23b7c:	b	23928 <flatcc_verify_table_vector_field@@Base+0x3c>
   23b80:	tst	r4, #3
   23b84:	beq	239bc <flatcc_verify_table_vector_field@@Base+0xd0>
   23b88:	mov	r0, #16
   23b8c:	b	23928 <flatcc_verify_table_vector_field@@Base+0x3c>

00023b90 <flatcc_verify_union_table@@Base>:
   23b90:	strd	r4, [sp, #-12]!
   23b94:	str	lr, [sp, #8]
   23b98:	sub	sp, sp, #28
   23b9c:	ldr	r4, [r0]
   23ba0:	ldr	lr, [r0, #4]
   23ba4:	ldr	ip, [r0, #16]
   23ba8:	ldr	r2, [r0, #20]
   23bac:	ldr	r3, [r0, #8]
   23bb0:	sub	r3, r3, #1
   23bb4:	str	r3, [sp, #8]
   23bb8:	cmp	r3, #0
   23bbc:	moveq	r0, #3
   23bc0:	beq	23c80 <flatcc_verify_union_table@@Base+0xf0>
   23bc4:	add	r3, ip, r2
   23bc8:	cmp	ip, r3
   23bcc:	movcs	r0, #15
   23bd0:	bcs	23c80 <flatcc_verify_union_table@@Base+0xf0>
   23bd4:	add	r2, r3, #4
   23bd8:	cmp	lr, r2
   23bdc:	movcc	r0, #15
   23be0:	bcc	23c80 <flatcc_verify_union_table@@Base+0xf0>
   23be4:	tst	r3, #3
   23be8:	movne	r0, #15
   23bec:	bne	23c80 <flatcc_verify_union_table@@Base+0xf0>
   23bf0:	str	r3, [sp, #16]
   23bf4:	ldr	r2, [r4, r3]
   23bf8:	subs	r2, r3, r2
   23bfc:	movmi	r0, #29
   23c00:	bmi	23c80 <flatcc_verify_union_table@@Base+0xf0>
   23c04:	tst	r2, #1
   23c08:	movne	r0, #29
   23c0c:	bne	23c80 <flatcc_verify_union_table@@Base+0xf0>
   23c10:	add	ip, r2, #2
   23c14:	cmp	lr, ip
   23c18:	movcc	r0, #27
   23c1c:	bcc	23c80 <flatcc_verify_union_table@@Base+0xf0>
   23c20:	add	r5, r4, r2
   23c24:	ldrh	r0, [r4, r2]
   23c28:	strh	r0, [sp, #22]
   23c2c:	add	r2, r0, r2
   23c30:	cmp	lr, r2
   23c34:	movcc	r0, #30
   23c38:	bcc	23c80 <flatcc_verify_union_table@@Base+0xf0>
   23c3c:	tst	r0, #1
   23c40:	movne	r0, #30
   23c44:	bne	23c80 <flatcc_verify_union_table@@Base+0xf0>
   23c48:	cmp	r0, #3
   23c4c:	movls	r0, #28
   23c50:	bls	23c80 <flatcc_verify_union_table@@Base+0xf0>
   23c54:	ldrh	r2, [r4, ip]
   23c58:	strh	r2, [sp, #20]
   23c5c:	sub	r3, lr, r3
   23c60:	cmp	r3, r2
   23c64:	movcc	r0, #20
   23c68:	bcc	23c80 <flatcc_verify_union_table@@Base+0xf0>
   23c6c:	str	r5, [sp, #12]
   23c70:	str	r4, [sp]
   23c74:	str	lr, [sp, #4]
   23c78:	mov	r0, sp
   23c7c:	blx	r1
   23c80:	add	sp, sp, #28
   23c84:	ldrd	r4, [sp]
   23c88:	add	sp, sp, #8
   23c8c:	pop	{pc}		; (ldr pc, [sp], #4)

00023c90 <flatcc_verify_union_struct@@Base>:
   23c90:	ldr	ip, [r0, #4]
   23c94:	ldr	r3, [r0, #16]
   23c98:	ldr	r0, [r0, #20]
   23c9c:	cmp	r0, #0
   23ca0:	beq	23cd8 <flatcc_verify_union_struct@@Base+0x48>
   23ca4:	add	r3, r3, r0
   23ca8:	cmp	ip, r3
   23cac:	bcc	23ce0 <flatcc_verify_union_struct@@Base+0x50>
   23cb0:	adds	r1, r1, r3
   23cb4:	bcs	23ce8 <flatcc_verify_union_struct@@Base+0x58>
   23cb8:	cmp	ip, r1
   23cbc:	bcc	23cf0 <flatcc_verify_union_struct@@Base+0x60>
   23cc0:	sub	r2, r2, #1
   23cc4:	and	r3, r3, r2
   23cc8:	cmp	r3, #0
   23ccc:	moveq	r0, #0
   23cd0:	movne	r0, #11
   23cd4:	bx	lr
   23cd8:	mov	r0, #18
   23cdc:	bx	lr
   23ce0:	mov	r0, #18
   23ce4:	bx	lr
   23ce8:	mov	r0, #10
   23cec:	bx	lr
   23cf0:	mov	r0, #9
   23cf4:	bx	lr

00023cf8 <flatcc_verify_union_string@@Base>:
   23cf8:	ldr	r2, [r0, #16]
   23cfc:	ldr	r3, [r0, #20]
   23d00:	add	r3, r2, r3
   23d04:	cmp	r2, r3
   23d08:	bcs	23d54 <flatcc_verify_union_string@@Base+0x5c>
   23d0c:	ldr	r2, [r0, #4]
   23d10:	add	r1, r3, #4
   23d14:	cmp	r2, r1
   23d18:	bcc	23d5c <flatcc_verify_union_string@@Base+0x64>
   23d1c:	tst	r3, #3
   23d20:	bne	23d64 <flatcc_verify_union_string@@Base+0x6c>
   23d24:	ldr	r0, [r0]
   23d28:	ldr	r3, [r0, r3]
   23d2c:	sub	r2, r2, r1
   23d30:	add	ip, r3, #1
   23d34:	cmp	r2, ip
   23d38:	bcc	23d6c <flatcc_verify_union_string@@Base+0x74>
   23d3c:	add	r1, r0, r1
   23d40:	ldrb	r3, [r1, r3]
   23d44:	cmp	r3, #0
   23d48:	moveq	r0, #0
   23d4c:	movne	r0, #7
   23d50:	bx	lr
   23d54:	mov	r0, #17
   23d58:	bx	lr
   23d5c:	mov	r0, #17
   23d60:	bx	lr
   23d64:	mov	r0, #17
   23d68:	bx	lr
   23d6c:	mov	r0, #8
   23d70:	bx	lr

00023d74 <flatcc_verify_buffer_header@@Base>:
   23d74:	tst	r0, #3
   23d78:	bne	23de8 <flatcc_verify_buffer_header@@Base+0x74>
   23d7c:	cmn	r1, #9
   23d80:	bhi	23df0 <flatcc_verify_buffer_header@@Base+0x7c>
   23d84:	cmp	r1, #7
   23d88:	bls	23df8 <flatcc_verify_buffer_header@@Base+0x84>
   23d8c:	cmp	r2, #0
   23d90:	beq	23e00 <flatcc_verify_buffer_header@@Base+0x8c>
   23d94:	str	r4, [sp, #-8]!
   23d98:	str	lr, [sp, #4]
   23d9c:	sub	sp, sp, #8
   23da0:	mov	r1, r2
   23da4:	mov	r4, r0
   23da8:	mov	r2, #4
   23dac:	add	r0, sp, r2
   23db0:	bl	12a28 <strncpy@plt>
   23db4:	ldr	r3, [sp, #4]
   23db8:	ldr	r2, [r4, #4]
   23dbc:	cmp	r3, #0
   23dc0:	cmpne	r2, r3
   23dc4:	moveq	r3, #1
   23dc8:	movne	r3, #0
   23dcc:	cmp	r3, #0
   23dd0:	movne	r0, #0
   23dd4:	moveq	r0, #2
   23dd8:	add	sp, sp, #8
   23ddc:	ldr	r4, [sp]
   23de0:	add	sp, sp, #4
   23de4:	pop	{pc}		; (ldr pc, [sp], #4)
   23de8:	mov	r0, #5
   23dec:	bx	lr
   23df0:	mov	r0, #6
   23df4:	bx	lr
   23df8:	mov	r0, #1
   23dfc:	bx	lr
   23e00:	mov	r0, #0
   23e04:	bx	lr

00023e08 <flatcc_verify_typed_buffer_header@@Base>:
   23e08:	tst	r0, #3
   23e0c:	bne	23e3c <flatcc_verify_typed_buffer_header@@Base+0x34>
   23e10:	cmn	r1, #9
   23e14:	bhi	23e44 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   23e18:	cmp	r1, #7
   23e1c:	bls	23e4c <flatcc_verify_typed_buffer_header@@Base+0x44>
   23e20:	cmp	r2, #0
   23e24:	beq	23e54 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   23e28:	ldr	r0, [r0, #4]
   23e2c:	cmp	r2, r0
   23e30:	movne	r0, #2
   23e34:	moveq	r0, #0
   23e38:	bx	lr
   23e3c:	mov	r0, #5
   23e40:	bx	lr
   23e44:	mov	r0, #6
   23e48:	bx	lr
   23e4c:	mov	r0, #1
   23e50:	bx	lr
   23e54:	mov	r0, #0
   23e58:	bx	lr

00023e5c <flatcc_verify_struct_as_root@@Base>:
   23e5c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23e60:	strd	r6, [sp, #8]
   23e64:	str	r8, [sp, #16]
   23e68:	str	lr, [sp, #20]
   23e6c:	mov	r6, r0
   23e70:	mov	r5, r1
   23e74:	mov	r7, r2
   23e78:	mov	r4, r3
   23e7c:	bl	23d74 <flatcc_verify_buffer_header@@Base>
   23e80:	cmp	r0, #0
   23e84:	bne	23ee8 <flatcc_verify_struct_as_root@@Base+0x8c>
   23e88:	ldr	r2, [r6]
   23e8c:	clz	r3, r2
   23e90:	lsr	r3, r3, #5
   23e94:	cmp	r5, r2
   23e98:	orrcc	r3, r3, #1
   23e9c:	cmp	r3, #0
   23ea0:	movne	r0, #18
   23ea4:	bne	23ed4 <flatcc_verify_struct_as_root@@Base+0x78>
   23ea8:	adds	r4, r4, r2
   23eac:	movcs	r0, #10
   23eb0:	bcs	23ed4 <flatcc_verify_struct_as_root@@Base+0x78>
   23eb4:	cmp	r5, r4
   23eb8:	movcc	r0, #9
   23ebc:	bcc	23ed4 <flatcc_verify_struct_as_root@@Base+0x78>
   23ec0:	ldrh	r3, [sp, #24]
   23ec4:	sub	r3, r3, #1
   23ec8:	and	r2, r2, r3
   23ecc:	cmp	r2, #0
   23ed0:	movne	r0, #11
   23ed4:	ldrd	r4, [sp]
   23ed8:	ldrd	r6, [sp, #8]
   23edc:	ldr	r8, [sp, #16]
   23ee0:	add	sp, sp, #20
   23ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   23ee8:	mov	r2, r7
   23eec:	mov	r1, r5
   23ef0:	mov	r0, r6
   23ef4:	bl	23d74 <flatcc_verify_buffer_header@@Base>
   23ef8:	b	23ed4 <flatcc_verify_struct_as_root@@Base+0x78>

00023efc <flatcc_verify_struct_as_typed_root@@Base>:
   23efc:	strd	r4, [sp, #-16]!
   23f00:	str	r6, [sp, #8]
   23f04:	str	lr, [sp, #12]
   23f08:	mov	r6, r0
   23f0c:	mov	r5, r1
   23f10:	mov	r4, r3
   23f14:	bl	23e08 <flatcc_verify_typed_buffer_header@@Base>
   23f18:	cmp	r0, #0
   23f1c:	bne	23f6c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   23f20:	ldr	r2, [r6]
   23f24:	clz	r3, r2
   23f28:	lsr	r3, r3, #5
   23f2c:	cmp	r5, r2
   23f30:	orrcc	r3, r3, #1
   23f34:	cmp	r3, #0
   23f38:	movne	r0, #18
   23f3c:	bne	23f6c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   23f40:	adds	r4, r4, r2
   23f44:	movcs	r0, #10
   23f48:	bcs	23f6c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   23f4c:	cmp	r5, r4
   23f50:	movcc	r0, #9
   23f54:	bcc	23f6c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   23f58:	ldrh	r3, [sp, #16]
   23f5c:	sub	r3, r3, #1
   23f60:	and	r2, r2, r3
   23f64:	cmp	r2, #0
   23f68:	movne	r0, #11
   23f6c:	ldrd	r4, [sp]
   23f70:	ldr	r6, [sp, #8]
   23f74:	add	sp, sp, #12
   23f78:	pop	{pc}		; (ldr pc, [sp], #4)

00023f7c <flatcc_verify_table_as_root@@Base>:
   23f7c:	strd	r4, [sp, #-20]!	; 0xffffffec
   23f80:	strd	r6, [sp, #8]
   23f84:	str	lr, [sp, #16]
   23f88:	sub	sp, sp, #28
   23f8c:	mov	r4, r0
   23f90:	mov	r5, r1
   23f94:	mov	r6, r2
   23f98:	mov	r7, r3
   23f9c:	bl	23d74 <flatcc_verify_buffer_header@@Base>
   23fa0:	cmp	r0, #0
   23fa4:	bne	24070 <flatcc_verify_table_as_root@@Base+0xf4>
   23fa8:	ldr	r3, [r4]
   23fac:	mov	r2, #99	; 0x63
   23fb0:	str	r2, [sp, #8]
   23fb4:	cmp	r3, #0
   23fb8:	moveq	r0, #15
   23fbc:	beq	24080 <flatcc_verify_table_as_root@@Base+0x104>
   23fc0:	add	r2, r3, #4
   23fc4:	cmp	r5, r2
   23fc8:	movcc	r0, #15
   23fcc:	bcc	24080 <flatcc_verify_table_as_root@@Base+0x104>
   23fd0:	tst	r3, #3
   23fd4:	movne	r0, #15
   23fd8:	bne	24080 <flatcc_verify_table_as_root@@Base+0x104>
   23fdc:	str	r3, [sp, #16]
   23fe0:	ldr	r2, [r4, r3]
   23fe4:	subs	r2, r3, r2
   23fe8:	movmi	r0, #29
   23fec:	bmi	24080 <flatcc_verify_table_as_root@@Base+0x104>
   23ff0:	tst	r2, #1
   23ff4:	movne	r0, #29
   23ff8:	bne	24080 <flatcc_verify_table_as_root@@Base+0x104>
   23ffc:	add	r0, r2, #2
   24000:	cmp	r5, r0
   24004:	movcc	r0, #27
   24008:	bcc	24080 <flatcc_verify_table_as_root@@Base+0x104>
   2400c:	add	ip, r4, r2
   24010:	ldrh	r1, [r4, r2]
   24014:	strh	r1, [sp, #22]
   24018:	add	r2, r1, r2
   2401c:	cmp	r5, r2
   24020:	movcc	r0, #30
   24024:	bcc	24080 <flatcc_verify_table_as_root@@Base+0x104>
   24028:	tst	r1, #1
   2402c:	movne	r0, #30
   24030:	bne	24080 <flatcc_verify_table_as_root@@Base+0x104>
   24034:	cmp	r1, #3
   24038:	movls	r0, #28
   2403c:	bls	24080 <flatcc_verify_table_as_root@@Base+0x104>
   24040:	ldrh	r2, [r4, r0]
   24044:	strh	r2, [sp, #20]
   24048:	sub	r3, r5, r3
   2404c:	cmp	r3, r2
   24050:	movcc	r0, #20
   24054:	bcc	24080 <flatcc_verify_table_as_root@@Base+0x104>
   24058:	str	ip, [sp, #12]
   2405c:	str	r4, [sp]
   24060:	str	r5, [sp, #4]
   24064:	mov	r0, sp
   24068:	blx	r7
   2406c:	b	24080 <flatcc_verify_table_as_root@@Base+0x104>
   24070:	mov	r2, r6
   24074:	mov	r1, r5
   24078:	mov	r0, r4
   2407c:	bl	23d74 <flatcc_verify_buffer_header@@Base>
   24080:	add	sp, sp, #28
   24084:	ldrd	r4, [sp]
   24088:	ldrd	r6, [sp, #8]
   2408c:	add	sp, sp, #16
   24090:	pop	{pc}		; (ldr pc, [sp], #4)

00024094 <flatcc_verify_table_as_typed_root@@Base>:
   24094:	strd	r4, [sp, #-16]!
   24098:	str	r6, [sp, #8]
   2409c:	str	lr, [sp, #12]
   240a0:	sub	sp, sp, #24
   240a4:	mov	r4, r0
   240a8:	mov	r5, r1
   240ac:	mov	r6, r3
   240b0:	bl	23e08 <flatcc_verify_typed_buffer_header@@Base>
   240b4:	cmp	r0, #0
   240b8:	beq	240d0 <flatcc_verify_table_as_typed_root@@Base+0x3c>
   240bc:	add	sp, sp, #24
   240c0:	ldrd	r4, [sp]
   240c4:	ldr	r6, [sp, #8]
   240c8:	add	sp, sp, #12
   240cc:	pop	{pc}		; (ldr pc, [sp], #4)
   240d0:	ldr	r3, [r4]
   240d4:	mov	r2, #99	; 0x63
   240d8:	str	r2, [sp, #8]
   240dc:	cmp	r3, #0
   240e0:	moveq	r0, #15
   240e4:	beq	240bc <flatcc_verify_table_as_typed_root@@Base+0x28>
   240e8:	add	r2, r3, #4
   240ec:	cmp	r5, r2
   240f0:	movcc	r0, #15
   240f4:	bcc	240bc <flatcc_verify_table_as_typed_root@@Base+0x28>
   240f8:	tst	r3, #3
   240fc:	movne	r0, #15
   24100:	bne	240bc <flatcc_verify_table_as_typed_root@@Base+0x28>
   24104:	str	r3, [sp, #16]
   24108:	ldr	r2, [r4, r3]
   2410c:	subs	r2, r3, r2
   24110:	movmi	r0, #29
   24114:	bmi	240bc <flatcc_verify_table_as_typed_root@@Base+0x28>
   24118:	tst	r2, #1
   2411c:	movne	r0, #29
   24120:	bne	240bc <flatcc_verify_table_as_typed_root@@Base+0x28>
   24124:	add	r0, r2, #2
   24128:	cmp	r5, r0
   2412c:	movcc	r0, #27
   24130:	bcc	240bc <flatcc_verify_table_as_typed_root@@Base+0x28>
   24134:	add	ip, r4, r2
   24138:	ldrh	r1, [r4, r2]
   2413c:	strh	r1, [sp, #22]
   24140:	add	r2, r1, r2
   24144:	cmp	r5, r2
   24148:	movcc	r0, #30
   2414c:	bcc	240bc <flatcc_verify_table_as_typed_root@@Base+0x28>
   24150:	tst	r1, #1
   24154:	movne	r0, #30
   24158:	bne	240bc <flatcc_verify_table_as_typed_root@@Base+0x28>
   2415c:	cmp	r1, #3
   24160:	movls	r0, #28
   24164:	bls	240bc <flatcc_verify_table_as_typed_root@@Base+0x28>
   24168:	ldrh	r2, [r4, r0]
   2416c:	strh	r2, [sp, #20]
   24170:	sub	r3, r5, r3
   24174:	cmp	r3, r2
   24178:	movcc	r0, #20
   2417c:	bcc	240bc <flatcc_verify_table_as_typed_root@@Base+0x28>
   24180:	str	ip, [sp, #12]
   24184:	str	r4, [sp]
   24188:	str	r5, [sp, #4]
   2418c:	mov	r0, sp
   24190:	blx	r6
   24194:	b	240bc <flatcc_verify_table_as_typed_root@@Base+0x28>

00024198 <flatcc_verify_struct_as_nested_root@@Base>:
   24198:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2419c:	strd	r6, [sp, #8]
   241a0:	str	r8, [sp, #16]
   241a4:	str	lr, [sp, #20]
   241a8:	sub	sp, sp, #8
   241ac:	mov	r5, r0
   241b0:	mov	r4, r1
   241b4:	mov	r8, r2
   241b8:	mov	r7, r3
   241bc:	ldrh	r6, [sp, #36]	; 0x24
   241c0:	mvn	r3, #0
   241c4:	str	r3, [sp, #4]
   241c8:	mov	r3, #1
   241cc:	str	r3, [sp]
   241d0:	mov	r3, r6
   241d4:	bl	23540 <flatcc_verify_vector_field@@Base>
   241d8:	cmp	r0, #0
   241dc:	bne	24254 <flatcc_verify_struct_as_nested_root@@Base+0xbc>
   241e0:	add	r1, r4, #2
   241e4:	lsl	r1, r1, #1
   241e8:	uxth	r1, r1
   241ec:	ldrh	r3, [r5, #22]
   241f0:	cmp	r3, r1
   241f4:	bls	2423c <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   241f8:	ldr	r3, [r5, #12]
   241fc:	ldrh	r3, [r3, r1]
   24200:	cmp	r3, #0
   24204:	beq	2423c <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   24208:	ldr	r2, [r5, #16]
   2420c:	add	r3, r3, r2
   24210:	ldr	r2, [r5]
   24214:	adds	r1, r2, r3
   24218:	beq	2423c <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   2421c:	ldr	r3, [r2, r3]
   24220:	add	r0, r1, r3
   24224:	ldr	r1, [r1, r3]
   24228:	str	r6, [sp]
   2422c:	ldr	r3, [sp, #32]
   24230:	mov	r2, r7
   24234:	add	r0, r0, #4
   24238:	bl	23e5c <flatcc_verify_struct_as_root@@Base>
   2423c:	add	sp, sp, #8
   24240:	ldrd	r4, [sp]
   24244:	ldrd	r6, [sp, #8]
   24248:	ldr	r8, [sp, #16]
   2424c:	add	sp, sp, #20
   24250:	pop	{pc}		; (ldr pc, [sp], #4)
   24254:	mvn	r3, #0
   24258:	str	r3, [sp, #4]
   2425c:	mov	r3, #1
   24260:	str	r3, [sp]
   24264:	mov	r3, r6
   24268:	mov	r2, r8
   2426c:	mov	r1, r4
   24270:	mov	r0, r5
   24274:	bl	23540 <flatcc_verify_vector_field@@Base>
   24278:	b	2423c <flatcc_verify_struct_as_nested_root@@Base+0xa4>

0002427c <flatcc_verify_table_as_nested_root@@Base>:
   2427c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24280:	strd	r6, [sp, #8]
   24284:	str	r8, [sp, #16]
   24288:	str	lr, [sp, #20]
   2428c:	sub	sp, sp, #32
   24290:	mov	r5, r0
   24294:	mov	r4, r1
   24298:	mov	r8, r2
   2429c:	mov	r6, r3
   242a0:	ldrh	r7, [sp, #56]	; 0x38
   242a4:	mvn	r3, #0
   242a8:	str	r3, [sp, #4]
   242ac:	mov	r3, #1
   242b0:	str	r3, [sp]
   242b4:	mov	r3, r7
   242b8:	bl	23540 <flatcc_verify_vector_field@@Base>
   242bc:	cmp	r0, #0
   242c0:	bne	24404 <flatcc_verify_table_as_nested_root@@Base+0x188>
   242c4:	add	r1, r4, #2
   242c8:	lsl	r1, r1, #1
   242cc:	uxth	r1, r1
   242d0:	ldrh	r3, [r5, #22]
   242d4:	cmp	r3, r1
   242d8:	bls	24428 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   242dc:	ldr	r3, [r5, #12]
   242e0:	ldrh	r3, [r3, r1]
   242e4:	cmp	r3, #0
   242e8:	beq	24428 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   242ec:	ldr	r2, [r5, #16]
   242f0:	add	r3, r3, r2
   242f4:	ldr	r2, [r5]
   242f8:	adds	r1, r2, r3
   242fc:	beq	24428 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   24300:	ldr	r3, [r2, r3]
   24304:	add	r7, r1, r3
   24308:	ldr	r4, [r1, r3]
   2430c:	add	r8, r7, #4
   24310:	mov	r2, r6
   24314:	mov	r1, r4
   24318:	mov	r0, r8
   2431c:	bl	23d74 <flatcc_verify_buffer_header@@Base>
   24320:	cmp	r0, #0
   24324:	bne	24440 <flatcc_verify_table_as_nested_root@@Base+0x1c4>
   24328:	ldr	r2, [r7, #4]
   2432c:	ldr	r3, [r5, #8]
   24330:	sub	r3, r3, #1
   24334:	str	r3, [sp, #16]
   24338:	cmp	r3, #0
   2433c:	moveq	r0, #3
   24340:	beq	24428 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   24344:	cmp	r2, #0
   24348:	moveq	r0, #15
   2434c:	beq	24428 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   24350:	add	r3, r2, #4
   24354:	cmp	r4, r3
   24358:	movcc	r0, #15
   2435c:	bcc	24428 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   24360:	tst	r2, #3
   24364:	movne	r0, #15
   24368:	bne	24428 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2436c:	str	r2, [sp, #24]
   24370:	ldr	r3, [r8, r2]
   24374:	subs	r3, r2, r3
   24378:	movmi	r0, #29
   2437c:	bmi	24428 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   24380:	tst	r3, #1
   24384:	movne	r0, #29
   24388:	bne	24428 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2438c:	add	r0, r3, #2
   24390:	cmp	r4, r0
   24394:	movcc	r0, #27
   24398:	bcc	24428 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   2439c:	add	ip, r8, r3
   243a0:	ldrh	r1, [r8, r3]
   243a4:	strh	r1, [sp, #30]
   243a8:	add	r3, r1, r3
   243ac:	cmp	r4, r3
   243b0:	movcc	r0, #30
   243b4:	bcc	24428 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   243b8:	tst	r1, #1
   243bc:	movne	r0, #30
   243c0:	bne	24428 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   243c4:	cmp	r1, #3
   243c8:	movls	r0, #28
   243cc:	bls	24428 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   243d0:	ldrh	r3, [r8, r0]
   243d4:	strh	r3, [sp, #28]
   243d8:	sub	r2, r4, r2
   243dc:	cmp	r2, r3
   243e0:	movcc	r0, #20
   243e4:	bcc	24428 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   243e8:	str	ip, [sp, #20]
   243ec:	str	r8, [sp, #8]
   243f0:	str	r4, [sp, #12]
   243f4:	add	r0, sp, #8
   243f8:	ldr	r3, [sp, #60]	; 0x3c
   243fc:	blx	r3
   24400:	b	24428 <flatcc_verify_table_as_nested_root@@Base+0x1ac>
   24404:	mvn	r3, #0
   24408:	str	r3, [sp, #4]
   2440c:	mov	r3, #1
   24410:	str	r3, [sp]
   24414:	mov	r3, r7
   24418:	mov	r2, r8
   2441c:	mov	r1, r4
   24420:	mov	r0, r5
   24424:	bl	23540 <flatcc_verify_vector_field@@Base>
   24428:	add	sp, sp, #32
   2442c:	ldrd	r4, [sp]
   24430:	ldrd	r6, [sp, #8]
   24434:	ldr	r8, [sp, #16]
   24438:	add	sp, sp, #20
   2443c:	pop	{pc}		; (ldr pc, [sp], #4)
   24440:	mov	r2, r6
   24444:	mov	r1, r4
   24448:	mov	r0, r8
   2444c:	bl	23d74 <flatcc_verify_buffer_header@@Base>
   24450:	b	24428 <flatcc_verify_table_as_nested_root@@Base+0x1ac>

00024454 <flatcc_verify_union_field@@Base>:
   24454:	strd	r4, [sp, #-20]!	; 0xffffffec
   24458:	strd	r6, [sp, #8]
   2445c:	str	lr, [sp, #16]
   24460:	sub	sp, sp, #36	; 0x24
   24464:	add	ip, r1, #1
   24468:	lsl	ip, ip, #1
   2446c:	uxth	ip, ip
   24470:	ldrh	lr, [r0, #22]
   24474:	cmp	lr, ip
   24478:	bls	24548 <flatcc_verify_union_field@@Base+0xf4>
   2447c:	ldr	r6, [r0, #12]
   24480:	ldrh	r4, [r6, ip]
   24484:	cmp	r4, #0
   24488:	beq	24548 <flatcc_verify_union_field@@Base+0xf4>
   2448c:	add	r5, r4, #1
   24490:	ldrh	r7, [r0, #20]
   24494:	cmp	r5, r7
   24498:	bhi	2458c <flatcc_verify_union_field@@Base+0x138>
   2449c:	ldr	r7, [r0]
   244a0:	add	ip, ip, #2
   244a4:	uxth	ip, ip
   244a8:	cmp	lr, ip
   244ac:	bls	24594 <flatcc_verify_union_field@@Base+0x140>
   244b0:	ldr	lr, [r0, #16]
   244b4:	add	r4, r4, lr
   244b8:	add	r5, r7, r4
   244bc:	ldrb	lr, [r7, r4]
   244c0:	ldrh	r4, [r6, ip]
   244c4:	adds	ip, lr, #0
   244c8:	movne	ip, #1
   244cc:	cmp	r4, #0
   244d0:	moveq	ip, #1
   244d4:	cmp	ip, #0
   244d8:	moveq	r0, #24
   244dc:	beq	24578 <flatcc_verify_union_field@@Base+0x124>
   244e0:	cmp	lr, #0
   244e4:	moveq	r0, #0
   244e8:	beq	24578 <flatcc_verify_union_field@@Base+0x124>
   244ec:	mov	r6, r3
   244f0:	mov	r4, r0
   244f4:	add	r3, sp, #28
   244f8:	bl	23148 <flatcc_emitter_copy_buffer@@Base+0xe4>
   244fc:	cmp	r0, #0
   24500:	bne	24578 <flatcc_verify_union_field@@Base+0x124>
   24504:	ldr	r3, [sp, #28]
   24508:	cmp	r3, #0
   2450c:	beq	24578 <flatcc_verify_union_field@@Base+0x124>
   24510:	ldr	r2, [r4]
   24514:	str	r2, [sp, #4]
   24518:	ldr	r1, [r4, #4]
   2451c:	str	r1, [sp, #8]
   24520:	ldr	r1, [r4, #8]
   24524:	str	r1, [sp, #12]
   24528:	str	r3, [sp, #20]
   2452c:	ldr	r3, [r2, r3]
   24530:	str	r3, [sp, #24]
   24534:	ldrb	r3, [r5]
   24538:	strb	r3, [sp, #16]
   2453c:	add	r0, sp, #4
   24540:	blx	r6
   24544:	b	24578 <flatcc_verify_union_field@@Base+0x124>
   24548:	add	ip, ip, #2
   2454c:	uxth	ip, ip
   24550:	cmp	lr, ip
   24554:	bls	2456c <flatcc_verify_union_field@@Base+0x118>
   24558:	ldr	r3, [r0, #12]
   2455c:	ldrh	r3, [r3, ip]
   24560:	cmp	r3, #0
   24564:	movne	r0, #23
   24568:	bne	24578 <flatcc_verify_union_field@@Base+0x124>
   2456c:	cmp	r2, #0
   24570:	moveq	r0, r2
   24574:	movne	r0, #21
   24578:	add	sp, sp, #36	; 0x24
   2457c:	ldrd	r4, [sp]
   24580:	ldrd	r6, [sp, #8]
   24584:	add	sp, sp, #16
   24588:	pop	{pc}		; (ldr pc, [sp], #4)
   2458c:	mov	r0, #13
   24590:	b	24578 <flatcc_verify_union_field@@Base+0x124>
   24594:	ldr	ip, [r0, #16]
   24598:	add	r4, r4, ip
   2459c:	add	r5, r7, r4
   245a0:	ldrb	lr, [r7, r4]
   245a4:	b	244e0 <flatcc_verify_union_field@@Base+0x8c>

000245a8 <flatcc_verify_union_vector_field@@Base>:
   245a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   245ac:	strd	r6, [sp, #8]
   245b0:	strd	r8, [sp, #16]
   245b4:	str	sl, [sp, #24]
   245b8:	str	lr, [sp, #28]
   245bc:	sub	sp, sp, #40	; 0x28
   245c0:	sub	r7, r1, #1
   245c4:	uxth	r7, r7
   245c8:	add	r5, r1, #1
   245cc:	lsl	r5, r5, #1
   245d0:	uxth	r5, r5
   245d4:	ldrh	lr, [r0, #22]
   245d8:	cmp	lr, r5
   245dc:	bls	245f0 <flatcc_verify_union_vector_field@@Base+0x48>
   245e0:	ldr	ip, [r0, #12]
   245e4:	ldrh	ip, [ip, r5]
   245e8:	cmp	ip, #0
   245ec:	bne	24624 <flatcc_verify_union_vector_field@@Base+0x7c>
   245f0:	add	ip, r5, #2
   245f4:	uxth	ip, ip
   245f8:	cmp	lr, ip
   245fc:	ldrhi	lr, [r0, #12]
   24600:	ldrhhi	ip, [lr, ip]
   24604:	movls	ip, #0
   24608:	uxth	lr, ip
   2460c:	adds	ip, r2, #0
   24610:	movne	ip, #1
   24614:	cmp	lr, #0
   24618:	movne	ip, #0
   2461c:	cmp	ip, #0
   24620:	bne	2482c <flatcc_verify_union_vector_field@@Base+0x284>
   24624:	mov	r9, r3
   24628:	mov	r8, r2
   2462c:	mov	r6, r1
   24630:	mov	r4, r0
   24634:	mvn	r3, #0
   24638:	str	r3, [sp, #4]
   2463c:	mov	r3, #1
   24640:	str	r3, [sp]
   24644:	mov	r1, r7
   24648:	bl	23540 <flatcc_verify_vector_field@@Base>
   2464c:	subs	sl, r0, #0
   24650:	bne	2474c <flatcc_verify_union_vector_field@@Base+0x1a4>
   24654:	ldrh	r3, [r4, #22]
   24658:	cmp	r3, r5
   2465c:	bls	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   24660:	ldr	r3, [r4, #12]
   24664:	ldrh	r3, [r3, r5]
   24668:	cmp	r3, #0
   2466c:	beq	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   24670:	ldr	r2, [r4, #16]
   24674:	add	r3, r3, r2
   24678:	ldr	r2, [r4]
   2467c:	adds	r1, r2, r3
   24680:	beq	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   24684:	ldr	r3, [r2, r3]
   24688:	add	r5, r1, r3
   2468c:	ldr	r7, [r1, r3]
   24690:	add	r3, sp, #36	; 0x24
   24694:	mov	r2, r8
   24698:	mov	r1, r6
   2469c:	mov	r0, r4
   246a0:	bl	23148 <flatcc_emitter_copy_buffer@@Base+0xe4>
   246a4:	subs	sl, r0, #0
   246a8:	bne	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   246ac:	ldr	r3, [sp, #36]	; 0x24
   246b0:	cmp	r3, #0
   246b4:	beq	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   246b8:	ldr	r1, [r4]
   246bc:	ldr	r2, [r1, r3]
   246c0:	ldr	r0, [r4, #8]
   246c4:	cmp	r0, #0
   246c8:	movle	sl, #3
   246cc:	ble	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   246d0:	add	r2, r3, r2
   246d4:	cmp	r3, r2
   246d8:	movcs	sl, #16
   246dc:	bcs	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   246e0:	ldr	ip, [r4, #4]
   246e4:	add	r3, r2, #4
   246e8:	cmp	ip, r3
   246ec:	movcc	sl, #16
   246f0:	bcc	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   246f4:	tst	r3, #3
   246f8:	bne	24834 <flatcc_verify_union_vector_field@@Base+0x28c>
   246fc:	add	r6, r1, r2
   24700:	ldr	lr, [r1, r2]
   24704:	cmn	lr, #-1073741823	; 0xc0000001
   24708:	bhi	24834 <flatcc_verify_union_vector_field@@Base+0x28c>
   2470c:	sub	r4, ip, r3
   24710:	cmp	r4, lr, lsl #2
   24714:	bcc	24834 <flatcc_verify_union_vector_field@@Base+0x28c>
   24718:	cmp	r7, lr
   2471c:	bne	2481c <flatcc_verify_union_vector_field@@Base+0x274>
   24720:	str	r1, [sp, #12]
   24724:	str	ip, [sp, #16]
   24728:	sub	r0, r0, #1
   2472c:	str	r0, [sp, #20]
   24730:	cmp	lr, #0
   24734:	beq	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   24738:	add	r4, r5, #4
   2473c:	add	lr, lr, #4
   24740:	add	r5, lr, r5
   24744:	rsb	r7, r1, #4
   24748:	b	247e8 <flatcc_verify_union_vector_field@@Base+0x240>
   2474c:	mvn	r3, #0
   24750:	str	r3, [sp, #4]
   24754:	mov	r3, #1
   24758:	str	r3, [sp]
   2475c:	mov	r2, r8
   24760:	mov	r1, r7
   24764:	mov	r0, r4
   24768:	bl	23540 <flatcc_verify_vector_field@@Base>
   2476c:	mov	sl, r0
   24770:	mov	r0, sl
   24774:	add	sp, sp, #40	; 0x28
   24778:	ldrd	r4, [sp]
   2477c:	ldrd	r6, [sp, #8]
   24780:	ldrd	r8, [sp, #16]
   24784:	ldr	sl, [sp, #24]
   24788:	add	sp, sp, #28
   2478c:	pop	{pc}		; (ldr pc, [sp], #4)
   24790:	ldr	r2, [r1, r2]
   24794:	cmn	r2, #-1073741823	; 0xc0000001
   24798:	movhi	sl, #25
   2479c:	bhi	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   247a0:	sub	r3, ip, r3
   247a4:	lsl	r2, r2, #2
   247a8:	cmp	r3, r2
   247ac:	movcc	sl, #26
   247b0:	b	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   247b4:	ldrb	r1, [r4]
   247b8:	cmp	r1, #0
   247bc:	beq	24824 <flatcc_verify_union_vector_field@@Base+0x27c>
   247c0:	strb	r1, [sp, #24]
   247c4:	str	r2, [sp, #28]
   247c8:	str	r3, [sp, #32]
   247cc:	add	r0, sp, #12
   247d0:	blx	r9
   247d4:	cmp	r0, #0
   247d8:	bne	2480c <flatcc_verify_union_vector_field@@Base+0x264>
   247dc:	add	r4, r4, #1
   247e0:	cmp	r5, r4
   247e4:	beq	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   247e8:	add	r2, r7, r6
   247ec:	ldr	r3, [r6, #4]!
   247f0:	cmp	r3, #0
   247f4:	bne	247b4 <flatcc_verify_union_vector_field@@Base+0x20c>
   247f8:	ldrb	r3, [r4]
   247fc:	cmp	r3, #0
   24800:	beq	247dc <flatcc_verify_union_vector_field@@Base+0x234>
   24804:	mov	sl, #32
   24808:	b	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   2480c:	add	r0, sp, #12
   24810:	blx	r9
   24814:	mov	sl, r0
   24818:	b	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   2481c:	mov	sl, #34	; 0x22
   24820:	b	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   24824:	mov	sl, #33	; 0x21
   24828:	b	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   2482c:	mov	sl, #22
   24830:	b	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>
   24834:	tst	r3, #3
   24838:	beq	24790 <flatcc_verify_union_vector_field@@Base+0x1e8>
   2483c:	mov	sl, #16
   24840:	b	24770 <flatcc_verify_union_vector_field@@Base+0x1c8>

00024844 <__libc_csu_init@@Base>:
   24844:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24848:	mov	r7, r0
   2484c:	ldr	r6, [pc, #72]	; 2489c <__libc_csu_init@@Base+0x58>
   24850:	ldr	r5, [pc, #72]	; 248a0 <__libc_csu_init@@Base+0x5c>
   24854:	add	r6, pc, r6
   24858:	add	r5, pc, r5
   2485c:	sub	r6, r6, r5
   24860:	mov	r8, r1
   24864:	mov	r9, r2
   24868:	bl	12948 <strcmp@plt-0x20>
   2486c:	asrs	r6, r6, #2
   24870:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   24874:	mov	r4, #0
   24878:	add	r4, r4, #1
   2487c:	ldr	r3, [r5], #4
   24880:	mov	r2, r9
   24884:	mov	r1, r8
   24888:	mov	r0, r7
   2488c:	blx	r3
   24890:	cmp	r6, r4
   24894:	bne	24878 <__libc_csu_init@@Base+0x34>
   24898:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2489c:			; <UNDEFINED> instruction: 0x000146b8
   248a0:			; <UNDEFINED> instruction: 0x000146b0

000248a4 <__libc_csu_fini@@Base>:
   248a4:	bx	lr

Disassembly of section .fini:

000248a8 <.fini>:
   248a8:	push	{r3, lr}
   248ac:	pop	{r3, pc}
