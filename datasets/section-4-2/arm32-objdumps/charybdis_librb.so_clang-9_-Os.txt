
../repos/charybdis/librb/src/.libs/librb.so:     file format elf32-littlearm


Disassembly of section .init:

00004c7c <_init>:
    4c7c:	push	{r3, lr}
    4c80:	bl	5620 <call_weak_fn>
    4c84:	pop	{r3, pc}

Disassembly of section .plt:

00004c88 <.plt>:
    4c88:	push	{lr}		; (str lr, [sp, #-4]!)
    4c8c:	ldr	lr, [pc, #4]	; 4c98 <.plt+0x10>
    4c90:	add	lr, pc, lr
    4c94:	ldr	pc, [lr, #8]!
    4c98:	.word	0x00023368

00004c9c <rb_helper_run@plt>:
    4c9c:	add	ip, pc, #0, 12
    4ca0:	add	ip, ip, #143360	; 0x23000
    4ca4:	ldr	pc, [ip, #872]!	; 0x368

00004ca8 <TLS_method@plt>:
    4ca8:	add	ip, pc, #0, 12
    4cac:	add	ip, ip, #143360	; 0x23000
    4cb0:	ldr	pc, [ip, #864]!	; 0x360

00004cb4 <open@plt>:
    4cb4:	add	ip, pc, #0, 12
    4cb8:	add	ip, ip, #143360	; 0x23000
    4cbc:	ldr	pc, [ip, #856]!	; 0x358

00004cc0 <rb_init_netio@plt>:
    4cc0:	add	ip, pc, #0, 12
    4cc4:	add	ip, ip, #143360	; 0x23000
    4cc8:	ldr	pc, [ip, #848]!	; 0x350

00004ccc <sigemptyset@plt>:
    4ccc:	add	ip, pc, #0, 12
    4cd0:	add	ip, ip, #143360	; 0x23000
    4cd4:	ldr	pc, [ip, #840]!	; 0x348

00004cd8 <strerror@plt>:
    4cd8:	add	ip, pc, #0, 12
    4cdc:	add	ip, ip, #143360	; 0x23000
    4ce0:	ldr	pc, [ip, #832]!	; 0x340

00004ce4 <rb_radixtree_elem_delete@plt>:
    4ce4:	add	ip, pc, #0, 12
    4ce8:	add	ip, ip, #143360	; 0x23000
    4cec:	ldr	pc, [ip, #824]!	; 0x338

00004cf0 <getdtablesize@plt>:
    4cf0:	add	ip, pc, #0, 12
    4cf4:	add	ip, ip, #143360	; 0x23000
    4cf8:	ldr	pc, [ip, #816]!	; 0x330

00004cfc <abort@plt>:
    4cfc:	add	ip, pc, #0, 12
    4d00:	add	ip, ip, #143360	; 0x23000
    4d04:	ldr	pc, [ip, #808]!	; 0x328

00004d08 <connect@plt>:
    4d08:	add	ip, pc, #0, 12
    4d0c:	add	ip, ip, #143360	; 0x23000
    4d10:	ldr	pc, [ip, #800]!	; 0x320

00004d14 <rb_ignore_errno@plt>:
    4d14:	add	ip, pc, #0, 12
    4d18:	add	ip, ip, #143360	; 0x23000
    4d1c:	ldr	pc, [ip, #792]!	; 0x318

00004d20 <rb_settimeout@plt>:
    4d20:	add	ip, pc, #0, 12
    4d24:	add	ip, ip, #143360	; 0x23000
    4d28:	ldr	pc, [ip, #784]!	; 0x310

00004d2c <SSL_CTX_set_cipher_list@plt>:
    4d2c:	add	ip, pc, #0, 12
    4d30:	add	ip, ip, #143360	; 0x23000
    4d34:	ldr	pc, [ip, #776]!	; 0x308

00004d38 <ERR_get_error@plt>:
    4d38:	add	ip, pc, #0, 12
    4d3c:	add	ip, ip, #143360	; 0x23000
    4d40:	ldr	pc, [ip, #768]!	; 0x300

00004d44 <rb_radixtree_foreach_start@plt>:
    4d44:	add	ip, pc, #0, 12
    4d48:	add	ip, ip, #143360	; 0x23000
    4d4c:	ldr	pc, [ip, #760]!	; 0x2f8

00004d50 <strcasestr@plt>:
    4d50:	add	ip, pc, #0, 12
    4d54:	add	ip, ip, #143360	; 0x23000
    4d58:	ldr	pc, [ip, #752]!	; 0x2f0

00004d5c <rb_connect_tcp@plt>:
    4d5c:	add	ip, pc, #0, 12
    4d60:	add	ip, ip, #143360	; 0x23000
    4d64:	ldr	pc, [ip, #744]!	; 0x2e8

00004d68 <RAND_load_file@plt>:
    4d68:	add	ip, pc, #0, 12
    4d6c:	add	ip, ip, #143360	; 0x23000
    4d70:	ldr	pc, [ip, #736]!	; 0x2e0

00004d74 <signalfd@plt>:
    4d74:	add	ip, pc, #0, 12
    4d78:	add	ip, ip, #143360	; 0x23000
    4d7c:	ldr	pc, [ip, #728]!	; 0x2d8

00004d80 <rb_radixtree_foreach_next@plt>:
    4d80:	add	ip, pc, #0, 12
    4d84:	add	ip, ip, #143360	; 0x23000
    4d88:	ldr	pc, [ip, #720]!	; 0x2d0

00004d8c <SSL_CTX_free@plt>:
    4d8c:	add	ip, pc, #0, 12
    4d90:	add	ip, ip, #143360	; 0x23000
    4d94:	ldr	pc, [ip, #712]!	; 0x2c8

00004d98 <rb_getmaxconnect@plt>:
    4d98:	add	ip, pc, #0, 12
    4d9c:	add	ip, ip, #143360	; 0x23000
    4da0:	ldr	pc, [ip, #704]!	; 0x2c0

00004da4 <sigwaitinfo@plt>:
    4da4:	add	ip, pc, #0, 12
    4da8:	add	ip, ip, #143360	; 0x23000
    4dac:	ldr	pc, [ip, #696]!	; 0x2b8

00004db0 <__libc_current_sigrtmin@plt>:
    4db0:	add	ip, pc, #0, 12
    4db4:	add	ip, ip, #143360	; 0x23000
    4db8:	ldr	pc, [ip, #688]!	; 0x2b0

00004dbc <__xstat@plt>:
    4dbc:	add	ip, pc, #0, 12
    4dc0:	add	ip, ip, #143360	; 0x23000
    4dc4:	ldr	pc, [ip, #680]!	; 0x2a8

00004dc8 <rb_event_delete@plt>:
    4dc8:	add	ip, pc, #0, 12
    4dcc:	add	ip, ip, #143360	; 0x23000
    4dd0:	ldr	pc, [ip, #672]!	; 0x2a0

00004dd4 <rb_setselect@plt>:
    4dd4:	add	ip, pc, #0, 12
    4dd8:	add	ip, ip, #143360	; 0x23000
    4ddc:	ldr	pc, [ip, #664]!	; 0x298

00004de0 <rb_fd_ssl@plt>:
    4de0:	add	ip, pc, #0, 12
    4de4:	add	ip, ip, #143360	; 0x23000
    4de8:	ldr	pc, [ip, #656]!	; 0x290

00004dec <sigtimedwait@plt>:
    4dec:	add	ip, pc, #0, 12
    4df0:	add	ip, ip, #143360	; 0x23000
    4df4:	ldr	pc, [ip, #648]!	; 0x288

00004df8 <rb_setenv@plt>:
    4df8:	add	ip, pc, #0, 12
    4dfc:	add	ip, ip, #143360	; 0x23000
    4e00:	ldr	pc, [ip, #640]!	; 0x280

00004e04 <signal@plt>:
    4e04:	add	ip, pc, #0, 12
    4e08:	add	ip, ip, #143360	; 0x23000
    4e0c:	ldr	pc, [ip, #632]!	; 0x278

00004e10 <rb_get_fd@plt>:
    4e10:	add	ip, pc, #0, 12
    4e14:	add	ip, ip, #143360	; 0x23000
    4e18:	ldr	pc, [ip, #624]!	; 0x270

00004e1c <epoll_create@plt>:
    4e1c:	add	ip, pc, #0, 12
    4e20:	add	ip, ip, #143360	; 0x23000
    4e24:	ldr	pc, [ip, #616]!	; 0x268

00004e28 <rb_clear_patricia@plt>:
    4e28:	add	ip, pc, #0, 12
    4e2c:	add	ip, ip, #143360	; 0x23000
    4e30:	ldr	pc, [ip, #608]!	; 0x260

00004e34 <__gmon_start__@plt>:
    4e34:	add	ip, pc, #0, 12
    4e38:	add	ip, ip, #143360	; 0x23000
    4e3c:	ldr	pc, [ip, #600]!	; 0x258

00004e40 <SSL_CTX_clear_options@plt>:
    4e40:	add	ip, pc, #0, 12
    4e44:	add	ip, ip, #143360	; 0x23000
    4e48:	ldr	pc, [ip, #592]!	; 0x250

00004e4c <SSL_get_current_cipher@plt>:
    4e4c:	add	ip, pc, #0, 12
    4e50:	add	ip, ip, #143360	; 0x23000
    4e54:	ldr	pc, [ip, #584]!	; 0x248

00004e58 <timer_create@plt>:
    4e58:	add	ip, pc, #0, 12
    4e5c:	add	ip, ip, #143360	; 0x23000
    4e60:	ldr	pc, [ip, #576]!	; 0x240

00004e64 <X509_get_X509_PUBKEY@plt>:
    4e64:	add	ip, pc, #0, 12
    4e68:	add	ip, ip, #143360	; 0x23000
    4e6c:	ldr	pc, [ip, #568]!	; 0x238

00004e70 <rb_select@plt>:
    4e70:	add	ip, pc, #0, 12
    4e74:	add	ip, ip, #143360	; 0x23000
    4e78:	ldr	pc, [ip, #560]!	; 0x230

00004e7c <vsnprintf@plt>:
    4e7c:	add	ip, pc, #0, 12
    4e80:	add	ip, ip, #143360	; 0x23000
    4e84:	ldr	pc, [ip, #552]!	; 0x228

00004e88 <socketpair@plt>:
    4e88:	add	ip, pc, #0, 12
    4e8c:	add	ip, ip, #143360	; 0x23000
    4e90:	ldr	pc, [ip, #544]!	; 0x220

00004e94 <strncpy@plt>:
    4e94:	add	ip, pc, #0, 12
    4e98:	add	ip, ip, #143360	; 0x23000
    4e9c:	ldr	pc, [ip, #536]!	; 0x218

00004ea0 <fclose@plt>:
    4ea0:	add	ip, pc, #0, 12
    4ea4:	add	ip, ip, #143360	; 0x23000
    4ea8:	ldr	pc, [ip, #528]!	; 0x210

00004eac <recv@plt>:
    4eac:	add	ip, pc, #0, 12
    4eb0:	add	ip, ip, #143360	; 0x23000
    4eb4:	ldr	pc, [ip, #520]!	; 0x208

00004eb8 <getenv@plt>:
    4eb8:	add	ip, pc, #0, 12
    4ebc:	add	ip, ip, #143360	; 0x23000
    4ec0:	ldr	pc, [ip, #512]!	; 0x200

00004ec4 <ERR_error_string_n@plt>:
    4ec4:	add	ip, pc, #0, 12
    4ec8:	add	ip, ip, #143360	; 0x23000
    4ecc:	ldr	pc, [ip, #504]!	; 0x1f8

00004ed0 <strchr@plt>:
    4ed0:	add	ip, pc, #0, 12
    4ed4:	add	ip, ip, #143360	; 0x23000
    4ed8:	ldr	pc, [ip, #496]!	; 0x1f0

00004edc <rb_gettimeofday@plt>:
    4edc:	add	ip, pc, #0, 12
    4ee0:	add	ip, ip, #143360	; 0x23000
    4ee4:	ldr	pc, [ip, #488]!	; 0x1e8

00004ee8 <strcasecmp@plt>:
    4ee8:	add	ip, pc, #0, 12
    4eec:	add	ip, ip, #143360	; 0x23000
    4ef0:	ldr	pc, [ip, #480]!	; 0x1e0

00004ef4 <listen@plt>:
    4ef4:	add	ip, pc, #0, 12
    4ef8:	add	ip, ip, #143360	; 0x23000
    4efc:	ldr	pc, [ip, #472]!	; 0x1d8

00004f00 <calloc@plt>:
    4f00:	add	ip, pc, #0, 12
    4f04:	add	ip, ip, #143360	; 0x23000
    4f08:	ldr	pc, [ip, #464]!	; 0x1d0

00004f0c <SSL_write@plt>:
    4f0c:	add	ip, pc, #0, 12
    4f10:	add	ip, ip, #143360	; 0x23000
    4f14:	ldr	pc, [ip, #456]!	; 0x1c8

00004f18 <rb_event_init@plt>:
    4f18:	add	ip, pc, #0, 12
    4f1c:	add	ip, ip, #143360	; 0x23000
    4f20:	ldr	pc, [ip, #448]!	; 0x1c0

00004f24 <fopen@plt>:
    4f24:	add	ip, pc, #0, 12
    4f28:	add	ip, ip, #143360	; 0x23000
    4f2c:	ldr	pc, [ip, #440]!	; 0x1b8

00004f30 <rb_set_nb@plt>:
    4f30:	add	ip, pc, #0, 12
    4f34:	add	ip, ip, #143360	; 0x23000
    4f38:	ldr	pc, [ip, #432]!	; 0x1b0

00004f3c <memset@plt>:
    4f3c:	add	ip, pc, #0, 12
    4f40:	add	ip, ip, #143360	; 0x23000
    4f44:	ldr	pc, [ip, #424]!	; 0x1a8

00004f48 <rb_inet_pton@plt>:
    4f48:	add	ip, pc, #0, 12
    4f4c:	add	ip, ip, #143360	; 0x23000
    4f50:	ldr	pc, [ip, #416]!	; 0x1a0

00004f54 <rb_radixtree_stats@plt>:
    4f54:	add	ip, pc, #0, 12
    4f58:	add	ip, ip, #143360	; 0x23000
    4f5c:	ldr	pc, [ip, #408]!	; 0x198

00004f60 <strrchr@plt>:
    4f60:	add	ip, pc, #0, 12
    4f64:	add	ip, ip, #143360	; 0x23000
    4f68:	ldr	pc, [ip, #400]!	; 0x190

00004f6c <rb_write@plt>:
    4f6c:	add	ip, pc, #0, 12
    4f70:	add	ip, ip, #143360	; 0x23000
    4f74:	ldr	pc, [ip, #392]!	; 0x188

00004f78 <SSL_set_fd@plt>:
    4f78:	add	ip, pc, #0, 12
    4f7c:	add	ip, ip, #143360	; 0x23000
    4f80:	ldr	pc, [ip, #384]!	; 0x180

00004f84 <SSL_CTX_ctrl@plt>:
    4f84:	add	ip, pc, #0, 12
    4f88:	add	ip, ip, #143360	; 0x23000
    4f8c:	ldr	pc, [ip, #376]!	; 0x178

00004f90 <rb_linebuf_parse@plt>:
    4f90:	add	ip, pc, #0, 12
    4f94:	add	ip, ip, #143360	; 0x23000
    4f98:	ldr	pc, [ip, #368]!	; 0x170

00004f9c <writev@plt>:
    4f9c:	add	ip, pc, #0, 12
    4fa0:	add	ip, ip, #143360	; 0x23000
    4fa4:	ldr	pc, [ip, #360]!	; 0x168

00004fa8 <rb_fsnprint@plt>:
    4fa8:	add	ip, pc, #0, 12
    4fac:	add	ip, ip, #143360	; 0x23000
    4fb0:	ldr	pc, [ip, #352]!	; 0x160

00004fb4 <rb_strlcpy@plt>:
    4fb4:	add	ip, pc, #0, 12
    4fb8:	add	ip, ip, #143360	; 0x23000
    4fbc:	ldr	pc, [ip, #344]!	; 0x158

00004fc0 <rb_patricia_search_best2@plt>:
    4fc0:	add	ip, pc, #0, 12
    4fc4:	add	ip, ip, #143360	; 0x23000
    4fc8:	ldr	pc, [ip, #336]!	; 0x150

00004fcc <SSL_CIPHER_get_name@plt>:
    4fcc:	add	ip, pc, #0, 12
    4fd0:	add	ip, ip, #143360	; 0x23000
    4fd4:	ldr	pc, [ip, #328]!	; 0x148

00004fd8 <posix_spawnattr_init@plt>:
    4fd8:	add	ip, pc, #0, 12
    4fdc:	add	ip, ip, #143360	; 0x23000
    4fe0:	ldr	pc, [ip, #320]!	; 0x140

00004fe4 <OpenSSL_version_num@plt>:
    4fe4:	add	ip, pc, #0, 12
    4fe8:	add	ip, ip, #143360	; 0x23000
    4fec:	ldr	pc, [ip, #312]!	; 0x138

00004ff0 <rb_kill@plt>:
    4ff0:	add	ip, pc, #0, 12
    4ff4:	add	ip, ip, #143360	; 0x23000
    4ff8:	ldr	pc, [ip, #304]!	; 0x130

00004ffc <free@plt>:
    4ffc:	add	ip, pc, #0, 12
    5000:	add	ip, ip, #143360	; 0x23000
    5004:	ldr	pc, [ip, #296]!	; 0x128

00005008 <sendmsg@plt>:
    5008:	add	ip, pc, #0, 12
    500c:	add	ip, ip, #143360	; 0x23000
    5010:	ldr	pc, [ip, #288]!	; 0x120

00005014 <read@plt>:
    5014:	add	ip, pc, #0, 12
    5018:	add	ip, ip, #143360	; 0x23000
    501c:	ldr	pc, [ip, #280]!	; 0x118

00005020 <rb_radixtree_elem_add@plt>:
    5020:	add	ip, pc, #0, 12
    5024:	add	ip, ip, #143360	; 0x23000
    5028:	ldr	pc, [ip, #272]!	; 0x110

0000502c <write@plt>:
    502c:	add	ip, pc, #0, 12
    5030:	add	ip, ip, #143360	; 0x23000
    5034:	ldr	pc, [ip, #264]!	; 0x108

00005038 <SSL_new@plt>:
    5038:	add	ip, pc, #0, 12
    503c:	add	ip, ip, #143360	; 0x23000
    5040:	ldr	pc, [ip, #256]!	; 0x100

00005044 <access@plt>:
    5044:	add	ip, pc, #0, 12
    5048:	add	ip, ip, #143360	; 0x23000
    504c:	ldr	pc, [ip, #248]!	; 0xf8

00005050 <rb_lib_loop@plt>:
    5050:	add	ip, pc, #0, 12
    5054:	add	ip, ip, #143360	; 0x23000
    5058:	ldr	pc, [ip, #240]!	; 0xf0

0000505c <timer_settime@plt>:
    505c:	add	ip, pc, #0, 12
    5060:	add	ip, ip, #143360	; 0x23000
    5064:	ldr	pc, [ip, #232]!	; 0xe8

00005068 <gettimeofday@plt>:
    5068:	add	ip, pc, #0, 12
    506c:	add	ip, ip, #143360	; 0x23000
    5070:	ldr	pc, [ip, #224]!	; 0xe0

00005074 <accept@plt>:
    5074:	add	ip, pc, #0, 12
    5078:	add	ip, ip, #143360	; 0x23000
    507c:	ldr	pc, [ip, #216]!	; 0xd8

00005080 <SSL_read@plt>:
    5080:	add	ip, pc, #0, 12
    5084:	add	ip, ip, #143360	; 0x23000
    5088:	ldr	pc, [ip, #208]!	; 0xd0

0000508c <rb_read@plt>:
    508c:	add	ip, pc, #0, 12
    5090:	add	ip, ip, #143360	; 0x23000
    5094:	ldr	pc, [ip, #200]!	; 0xc8

00005098 <socket@plt>:
    5098:	add	ip, pc, #0, 12
    509c:	add	ip, ip, #143360	; 0x23000
    50a0:	ldr	pc, [ip, #192]!	; 0xc0

000050a4 <rb_linebuf_get@plt>:
    50a4:	add	ip, pc, #0, 12
    50a8:	add	ip, ip, #143360	; 0x23000
    50ac:	ldr	pc, [ip, #184]!	; 0xb8

000050b0 <epoll_wait@plt>:
    50b0:	add	ip, pc, #0, 12
    50b4:	add	ip, ip, #143360	; 0x23000
    50b8:	ldr	pc, [ip, #176]!	; 0xb0

000050bc <SSL_do_handshake@plt>:
    50bc:	add	ip, pc, #0, 12
    50c0:	add	ip, ip, #143360	; 0x23000
    50c4:	ldr	pc, [ip, #168]!	; 0xa8

000050c8 <rb_linebuf_flush@plt>:
    50c8:	add	ip, pc, #0, 12
    50cc:	add	ip, ip, #143360	; 0x23000
    50d0:	ldr	pc, [ip, #160]!	; 0xa0

000050d4 <posix_spawn@plt>:
    50d4:	add	ip, pc, #0, 12
    50d8:	add	ip, ip, #143360	; 0x23000
    50dc:	ldr	pc, [ip, #152]!	; 0x98

000050e0 <strlen@plt>:
    50e0:	add	ip, pc, #0, 12
    50e4:	add	ip, ip, #143360	; 0x23000
    50e8:	ldr	pc, [ip, #144]!	; 0x90

000050ec <rb_current_time@plt>:
    50ec:	add	ip, pc, #0, 12
    50f0:	add	ip, ip, #143360	; 0x23000
    50f4:	ldr	pc, [ip, #136]!	; 0x88

000050f8 <strtoul@plt>:
    50f8:	add	ip, pc, #0, 12
    50fc:	add	ip, ip, #143360	; 0x23000
    5100:	ldr	pc, [ip, #128]!	; 0x80

00005104 <memcpy@plt>:
    5104:	add	ip, pc, #0, 12
    5108:	add	ip, ip, #143360	; 0x23000
    510c:	ldr	pc, [ip, #120]!	; 0x78

00005110 <PEM_read_X509@plt>:
    5110:	add	ip, pc, #0, 12
    5114:	add	ip, ip, #143360	; 0x23000
    5118:	ldr	pc, [ip, #112]!	; 0x70

0000511c <posix_spawnattr_setflags@plt>:
    511c:	add	ip, pc, #0, 12
    5120:	add	ip, ip, #143360	; 0x23000
    5124:	ldr	pc, [ip, #104]!	; 0x68

00005128 <__ctype_tolower_loc@plt>:
    5128:	add	ip, pc, #0, 12
    512c:	add	ip, ip, #143360	; 0x23000
    5130:	ldr	pc, [ip, #96]!	; 0x60

00005134 <SSL_CTX_use_certificate_chain_file@plt>:
    5134:	add	ip, pc, #0, 12
    5138:	add	ip, ip, #143360	; 0x23000
    513c:	ldr	pc, [ip, #88]!	; 0x58

00005140 <rb_free_rb_dlink_node@plt>:
    5140:	add	ip, pc, #0, 12
    5144:	add	ip, ip, #143360	; 0x23000
    5148:	ldr	pc, [ip, #80]!	; 0x50

0000514c <SSL_CTX_set_options@plt>:
    514c:	add	ip, pc, #0, 12
    5150:	add	ip, ip, #143360	; 0x23000
    5154:	ldr	pc, [ip, #72]!	; 0x48

00005158 <posix_spawnattr_destroy@plt>:
    5158:	add	ip, pc, #0, 12
    515c:	add	ip, ip, #143360	; 0x23000
    5160:	ldr	pc, [ip, #64]!	; 0x40

00005164 <bcmp@plt>:
    5164:	add	ip, pc, #0, 12
    5168:	add	ip, ip, #143360	; 0x23000
    516c:	ldr	pc, [ip, #56]!	; 0x38

00005170 <rb_close@plt>:
    5170:	add	ip, pc, #0, 12
    5174:	add	ip, ip, #143360	; 0x23000
    5178:	ldr	pc, [ip, #48]!	; 0x30

0000517c <strtol@plt>:
    517c:	add	ip, pc, #0, 12
    5180:	add	ip, ip, #143360	; 0x23000
    5184:	ldr	pc, [ip, #40]!	; 0x28

00005188 <sigaddset@plt>:
    5188:	add	ip, pc, #0, 12
    518c:	add	ip, ip, #143360	; 0x23000
    5190:	ldr	pc, [ip, #32]!

00005194 <strcpy@plt>:
    5194:	add	ip, pc, #0, 12
    5198:	add	ip, ip, #143360	; 0x23000
    519c:	ldr	pc, [ip, #24]!

000051a0 <waitpid@plt>:
    51a0:	add	ip, pc, #0, 12
    51a4:	add	ip, ip, #143360	; 0x23000
    51a8:	ldr	pc, [ip, #16]!

000051ac <rb_run_one_event@plt>:
    51ac:	add	ip, pc, #0, 12
    51b0:	add	ip, ip, #143360	; 0x23000
    51b4:	ldr	pc, [ip, #8]!

000051b8 <rb_patricia_search_exact@plt>:
    51b8:	add	ip, pc, #0, 12
    51bc:	add	ip, ip, #143360	; 0x23000
    51c0:	ldr	pc, [ip, #0]!

000051c4 <strncat@plt>:
    51c4:	add	ip, pc, #0, 12
    51c8:	add	ip, ip, #139264	; 0x22000
    51cc:	ldr	pc, [ip, #4088]!	; 0xff8

000051d0 <atol@plt>:
    51d0:	add	ip, pc, #0, 12
    51d4:	add	ip, ip, #139264	; 0x22000
    51d8:	ldr	pc, [ip, #4080]!	; 0xff0

000051dc <rb_bh_free@plt>:
    51dc:	add	ip, pc, #0, 12
    51e0:	add	ip, ip, #139264	; 0x22000
    51e4:	ldr	pc, [ip, #4072]!	; 0xfe8

000051e8 <rb_init_rb_dlink_nodes@plt>:
    51e8:	add	ip, pc, #0, 12
    51ec:	add	ip, ip, #139264	; 0x22000
    51f0:	ldr	pc, [ip, #4064]!	; 0xfe0

000051f4 <EVP_sha1@plt>:
    51f4:	add	ip, pc, #0, 12
    51f8:	add	ip, ip, #139264	; 0x22000
    51fc:	ldr	pc, [ip, #4056]!	; 0xfd8

00005200 <rb_patricia_lookup@plt>:
    5200:	add	ip, pc, #0, 12
    5204:	add	ip, ip, #139264	; 0x22000
    5208:	ldr	pc, [ip, #4048]!	; 0xfd0

0000520c <shutdown@plt>:
    520c:	add	ip, pc, #0, 12
    5210:	add	ip, ip, #139264	; 0x22000
    5214:	ldr	pc, [ip, #4040]!	; 0xfc8

00005218 <bind@plt>:
    5218:	add	ip, pc, #0, 12
    521c:	add	ip, ip, #139264	; 0x22000
    5220:	ldr	pc, [ip, #4032]!	; 0xfc0

00005224 <rb_lib_log@plt>:
    5224:	add	ip, pc, #0, 12
    5228:	add	ip, ip, #139264	; 0x22000
    522c:	ldr	pc, [ip, #4024]!	; 0xfb8

00005230 <SSL_CTX_use_PrivateKey_file@plt>:
    5230:	add	ip, pc, #0, 12
    5234:	add	ip, ip, #139264	; 0x22000
    5238:	ldr	pc, [ip, #4016]!	; 0xfb0

0000523c <select@plt>:
    523c:	add	ip, pc, #0, 12
    5240:	add	ip, ip, #139264	; 0x22000
    5244:	ldr	pc, [ip, #4008]!	; 0xfa8

00005248 <close@plt>:
    5248:	add	ip, pc, #0, 12
    524c:	add	ip, ip, #139264	; 0x22000
    5250:	ldr	pc, [ip, #4000]!	; 0xfa0

00005254 <rb_bh_alloc@plt>:
    5254:	add	ip, pc, #0, 12
    5258:	add	ip, ip, #139264	; 0x22000
    525c:	ldr	pc, [ip, #3992]!	; 0xf98

00005260 <SSL_free@plt>:
    5260:	add	ip, pc, #0, 12
    5264:	add	ip, ip, #139264	; 0x22000
    5268:	ldr	pc, [ip, #3984]!	; 0xf90

0000526c <rb_pipe@plt>:
    526c:	add	ip, pc, #0, 12
    5270:	add	ip, ip, #139264	; 0x22000
    5274:	ldr	pc, [ip, #3976]!	; 0xf88

00005278 <strncasecmp@plt>:
    5278:	add	ip, pc, #0, 12
    527c:	add	ip, ip, #139264	; 0x22000
    5280:	ldr	pc, [ip, #3968]!	; 0xf80

00005284 <rb_outofmemory@plt>:
    5284:	add	ip, pc, #0, 12
    5288:	add	ip, ip, #139264	; 0x22000
    528c:	ldr	pc, [ip, #3960]!	; 0xf78

00005290 <rb_set_time@plt>:
    5290:	add	ip, pc, #0, 12
    5294:	add	ip, ip, #139264	; 0x22000
    5298:	ldr	pc, [ip, #3952]!	; 0xf70

0000529c <rb_dictionary_stats@plt>:
    529c:	add	ip, pc, #0, 12
    52a0:	add	ip, ip, #139264	; 0x22000
    52a4:	ldr	pc, [ip, #3944]!	; 0xf68

000052a8 <malloc@plt>:
    52a8:	add	ip, pc, #0, 12
    52ac:	add	ip, ip, #139264	; 0x22000
    52b0:	ldr	pc, [ip, #3936]!	; 0xf60

000052b4 <sigprocmask@plt>:
    52b4:	add	ip, pc, #0, 12
    52b8:	add	ip, ip, #139264	; 0x22000
    52bc:	ldr	pc, [ip, #3928]!	; 0xf58

000052c0 <rb_event_run@plt>:
    52c0:	add	ip, pc, #0, 12
    52c4:	add	ip, ip, #139264	; 0x22000
    52c8:	ldr	pc, [ip, #3920]!	; 0xf50

000052cc <SSL_set_accept_state@plt>:
    52cc:	add	ip, pc, #0, 12
    52d0:	add	ip, ip, #139264	; 0x22000
    52d4:	ldr	pc, [ip, #3912]!	; 0xf48

000052d8 <rb_init_bh@plt>:
    52d8:	add	ip, pc, #0, 12
    52dc:	add	ip, ip, #139264	; 0x22000
    52e0:	ldr	pc, [ip, #3904]!	; 0xf40

000052e4 <PEM_read_DHparams@plt>:
    52e4:	add	ip, pc, #0, 12
    52e8:	add	ip, ip, #139264	; 0x22000
    52ec:	ldr	pc, [ip, #3896]!	; 0xf38

000052f0 <gmtime_r@plt>:
    52f0:	add	ip, pc, #0, 12
    52f4:	add	ip, ip, #139264	; 0x22000
    52f8:	ldr	pc, [ip, #3888]!	; 0xf30

000052fc <poll@plt>:
    52fc:	add	ip, pc, #0, 12
    5300:	add	ip, ip, #139264	; 0x22000
    5304:	ldr	pc, [ip, #3880]!	; 0xf28

00005308 <ASN1_item_digest@plt>:
    5308:	add	ip, pc, #0, 12
    530c:	add	ip, ip, #139264	; 0x22000
    5310:	ldr	pc, [ip, #3872]!	; 0xf20

00005314 <strnlen@plt>:
    5314:	add	ip, pc, #0, 12
    5318:	add	ip, ip, #139264	; 0x22000
    531c:	ldr	pc, [ip, #3864]!	; 0xf18

00005320 <SSL_get_peer_certificate@plt>:
    5320:	add	ip, pc, #0, 12
    5324:	add	ip, ip, #139264	; 0x22000
    5328:	ldr	pc, [ip, #3856]!	; 0xf10

0000532c <rb_dictionary_find@plt>:
    532c:	add	ip, pc, #0, 12
    5330:	add	ip, ip, #139264	; 0x22000
    5334:	ldr	pc, [ip, #3848]!	; 0xf08

00005338 <rb_lib_init@plt>:
    5338:	add	ip, pc, #0, 12
    533c:	add	ip, ip, #139264	; 0x22000
    5340:	ldr	pc, [ip, #3840]!	; 0xf00

00005344 <SSL_get_verify_result@plt>:
    5344:	add	ip, pc, #0, 12
    5348:	add	ip, ip, #139264	; 0x22000
    534c:	ldr	pc, [ip, #3832]!	; 0xef8

00005350 <strtok_r@plt>:
    5350:	add	ip, pc, #0, 12
    5354:	add	ip, ip, #139264	; 0x22000
    5358:	ldr	pc, [ip, #3824]!	; 0xef0

0000535c <rb_lib_restart@plt>:
    535c:	add	ip, pc, #0, 12
    5360:	add	ip, ip, #139264	; 0x22000
    5364:	ldr	pc, [ip, #3816]!	; 0xee8

00005368 <DH_free@plt>:
    5368:	add	ip, pc, #0, 12
    536c:	add	ip, ip, #139264	; 0x22000
    5370:	ldr	pc, [ip, #3808]!	; 0xee0

00005374 <timer_delete@plt>:
    5374:	add	ip, pc, #0, 12
    5378:	add	ip, ip, #139264	; 0x22000
    537c:	ldr	pc, [ip, #3800]!	; 0xed8

00005380 <rb_open@plt>:
    5380:	add	ip, pc, #0, 12
    5384:	add	ip, ip, #139264	; 0x22000
    5388:	ldr	pc, [ip, #3792]!	; 0xed0

0000538c <rb_get_sockerr@plt>:
    538c:	add	ip, pc, #0, 12
    5390:	add	ip, ip, #139264	; 0x22000
    5394:	ldr	pc, [ip, #3784]!	; 0xec8

00005398 <send@plt>:
    5398:	add	ip, pc, #0, 12
    539c:	add	ip, ip, #139264	; 0x22000
    53a0:	ldr	pc, [ip, #3776]!	; 0xec0

000053a4 <SSL_shutdown@plt>:
    53a4:	add	ip, pc, #0, 12
    53a8:	add	ip, ip, #139264	; 0x22000
    53ac:	ldr	pc, [ip, #3768]!	; 0xeb8

000053b0 <rb_bh_create@plt>:
    53b0:	add	ip, pc, #0, 12
    53b4:	add	ip, ip, #139264	; 0x22000
    53b8:	ldr	pc, [ip, #3760]!	; 0xeb0

000053bc <dup2@plt>:
    53bc:	add	ip, pc, #0, 12
    53c0:	add	ip, ip, #139264	; 0x22000
    53c4:	ldr	pc, [ip, #3752]!	; 0xea8

000053c8 <getpid@plt>:
    53c8:	add	ip, pc, #0, 12
    53cc:	add	ip, ip, #139264	; 0x22000
    53d0:	ldr	pc, [ip, #3744]!	; 0xea0

000053d4 <rb_writev@plt>:
    53d4:	add	ip, pc, #0, 12
    53d8:	add	ip, ip, #139264	; 0x22000
    53dc:	ldr	pc, [ip, #3736]!	; 0xe98

000053e0 <RAND_bytes@plt>:
    53e0:	add	ip, pc, #0, 12
    53e4:	add	ip, ip, #139264	; 0x22000
    53e8:	ldr	pc, [ip, #3728]!	; 0xe90

000053ec <rb_linebuf_newbuf@plt>:
    53ec:	add	ip, pc, #0, 12
    53f0:	add	ip, ip, #139264	; 0x22000
    53f4:	ldr	pc, [ip, #3720]!	; 0xe88

000053f8 <rb_fdlist_init@plt>:
    53f8:	add	ip, pc, #0, 12
    53fc:	add	ip, ip, #139264	; 0x22000
    5400:	ldr	pc, [ip, #3712]!	; 0xe80

00005404 <rb_event_add@plt>:
    5404:	add	ip, pc, #0, 12
    5408:	add	ip, ip, #139264	; 0x22000
    540c:	ldr	pc, [ip, #3704]!	; 0xe78

00005410 <readlink@plt>:
    5410:	add	ip, pc, #0, 12
    5414:	add	ip, ip, #139264	; 0x22000
    5418:	ldr	pc, [ip, #3696]!	; 0xe70

0000541c <SSL_CTX_new@plt>:
    541c:	add	ip, pc, #0, 12
    5420:	add	ip, ip, #139264	; 0x22000
    5424:	ldr	pc, [ip, #3688]!	; 0xe68

00005428 <recvmsg@plt>:
    5428:	add	ip, pc, #0, 12
    542c:	add	ip, ip, #139264	; 0x22000
    5430:	ldr	pc, [ip, #3680]!	; 0xe60

00005434 <rand@plt>:
    5434:	add	ip, pc, #0, 12
    5438:	add	ip, ip, #139264	; 0x22000
    543c:	ldr	pc, [ip, #3672]!	; 0xe58

00005440 <rb_linebuf_init@plt>:
    5440:	add	ip, pc, #0, 12
    5444:	add	ip, ip, #139264	; 0x22000
    5448:	ldr	pc, [ip, #3664]!	; 0xe50

0000544c <__fxstat@plt>:
    544c:	add	ip, pc, #0, 12
    5450:	add	ip, ip, #139264	; 0x22000
    5454:	ldr	pc, [ip, #3656]!	; 0xe48

00005458 <SSL_set_connect_state@plt>:
    5458:	add	ip, pc, #0, 12
    545c:	add	ip, ip, #139264	; 0x22000
    5460:	ldr	pc, [ip, #3648]!	; 0xe40

00005464 <rb_radixtree_elem_find@plt>:
    5464:	add	ip, pc, #0, 12
    5468:	add	ip, ip, #139264	; 0x22000
    546c:	ldr	pc, [ip, #3640]!	; 0xe38

00005470 <rb_make_rb_dlink_node@plt>:
    5470:	add	ip, pc, #0, 12
    5474:	add	ip, ip, #139264	; 0x22000
    5478:	ldr	pc, [ip, #3632]!	; 0xe30

0000547c <rb_strlcat@plt>:
    547c:	add	ip, pc, #0, 12
    5480:	add	ip, ip, #139264	; 0x22000
    5484:	ldr	pc, [ip, #3624]!	; 0xe28

00005488 <rb_spawn_process@plt>:
    5488:	add	ip, pc, #0, 12
    548c:	add	ip, ip, #139264	; 0x22000
    5490:	ldr	pc, [ip, #3616]!	; 0xe20

00005494 <EVP_sha512@plt>:
    5494:	add	ip, pc, #0, 12
    5498:	add	ip, ip, #139264	; 0x22000
    549c:	ldr	pc, [ip, #3608]!	; 0xe18

000054a0 <snprintf@plt>:
    54a0:	add	ip, pc, #0, 12
    54a4:	add	ip, ip, #139264	; 0x22000
    54a8:	ldr	pc, [ip, #3600]!	; 0xe10

000054ac <RAND_status@plt>:
    54ac:	add	ip, pc, #0, 12
    54b0:	add	ip, ip, #139264	; 0x22000
    54b4:	ldr	pc, [ip, #3592]!	; 0xe08

000054b8 <timerfd_create@plt>:
    54b8:	add	ip, pc, #0, 12
    54bc:	add	ip, ip, #139264	; 0x22000
    54c0:	ldr	pc, [ip, #3584]!	; 0xe00

000054c4 <EVP_sha256@plt>:
    54c4:	add	ip, pc, #0, 12
    54c8:	add	ip, ip, #139264	; 0x22000
    54cc:	ldr	pc, [ip, #3576]!	; 0xdf8

000054d0 <strcspn@plt>:
    54d0:	add	ip, pc, #0, 12
    54d4:	add	ip, ip, #139264	; 0x22000
    54d8:	ldr	pc, [ip, #3568]!	; 0xdf0

000054dc <rb_linebuf_put@plt>:
    54dc:	add	ip, pc, #0, 12
    54e0:	add	ip, ip, #139264	; 0x22000
    54e4:	ldr	pc, [ip, #3560]!	; 0xde8

000054e8 <rb_listen@plt>:
    54e8:	add	ip, pc, #0, 12
    54ec:	add	ip, ip, #139264	; 0x22000
    54f0:	ldr	pc, [ip, #3552]!	; 0xde0

000054f4 <fcntl@plt>:
    54f4:	add	ip, pc, #0, 12
    54f8:	add	ip, ip, #139264	; 0x22000
    54fc:	ldr	pc, [ip, #3544]!	; 0xdd8

00005500 <strncmp@plt>:
    5500:	add	ip, pc, #0, 12
    5504:	add	ip, ip, #139264	; 0x22000
    5508:	ldr	pc, [ip, #3536]!	; 0xdd0

0000550c <kill@plt>:
    550c:	add	ip, pc, #0, 12
    5510:	add	ip, ip, #139264	; 0x22000
    5514:	ldr	pc, [ip, #3528]!	; 0xdc8

00005518 <nanosleep@plt>:
    5518:	add	ip, pc, #0, 12
    551c:	add	ip, ip, #139264	; 0x22000
    5520:	ldr	pc, [ip, #3520]!	; 0xdc0

00005524 <rb_event_next@plt>:
    5524:	add	ip, pc, #0, 12
    5528:	add	ip, ip, #139264	; 0x22000
    552c:	ldr	pc, [ip, #3512]!	; 0xdb8

00005530 <realloc@plt>:
    5530:	add	ip, pc, #0, 12
    5534:	add	ip, ip, #139264	; 0x22000
    5538:	ldr	pc, [ip, #3504]!	; 0xdb0

0000553c <timerfd_settime@plt>:
    553c:	add	ip, pc, #0, 12
    5540:	add	ip, ip, #139264	; 0x22000
    5544:	ldr	pc, [ip, #3496]!	; 0xda8

00005548 <epoll_ctl@plt>:
    5548:	add	ip, pc, #0, 12
    554c:	add	ip, ip, #139264	; 0x22000
    5550:	ldr	pc, [ip, #3488]!	; 0xda0

00005554 <X509_free@plt>:
    5554:	add	ip, pc, #0, 12
    5558:	add	ip, ip, #139264	; 0x22000
    555c:	ldr	pc, [ip, #3480]!	; 0xd98

00005560 <readv@plt>:
    5560:	add	ip, pc, #0, 12
    5564:	add	ip, ip, #139264	; 0x22000
    5568:	ldr	pc, [ip, #3472]!	; 0xd90

0000556c <getsockopt@plt>:
    556c:	add	ip, pc, #0, 12
    5570:	add	ip, ip, #139264	; 0x22000
    5574:	ldr	pc, [ip, #3464]!	; 0xd88

00005578 <pipe@plt>:
    5578:	add	ip, pc, #0, 12
    557c:	add	ip, ip, #139264	; 0x22000
    5580:	ldr	pc, [ip, #3456]!	; 0xd80

00005584 <OpenSSL_version@plt>:
    5584:	add	ip, pc, #0, 12
    5588:	add	ip, ip, #139264	; 0x22000
    558c:	ldr	pc, [ip, #3448]!	; 0xd78

00005590 <setsockopt@plt>:
    5590:	add	ip, pc, #0, 12
    5594:	add	ip, ip, #139264	; 0x22000
    5598:	ldr	pc, [ip, #3440]!	; 0xd70

0000559c <SSL_get_error@plt>:
    559c:	add	ip, pc, #0, 12
    55a0:	add	ip, ip, #139264	; 0x22000
    55a4:	ldr	pc, [ip, #3432]!	; 0xd68

000055a8 <SSL_get_version@plt>:
    55a8:	add	ip, pc, #0, 12
    55ac:	add	ip, ip, #139264	; 0x22000
    55b0:	ldr	pc, [ip, #3424]!	; 0xd60

000055b4 <rb_radixtree_delete@plt>:
    55b4:	add	ip, pc, #0, 12
    55b8:	add	ip, ip, #139264	; 0x22000
    55bc:	ldr	pc, [ip, #3416]!	; 0xd58

000055c0 <memchr@plt>:
    55c0:	add	ip, pc, #0, 12
    55c4:	add	ip, ip, #139264	; 0x22000
    55c8:	ldr	pc, [ip, #3408]!	; 0xd50

000055cc <setenv@plt>:
    55cc:	add	ip, pc, #0, 12
    55d0:	add	ip, ip, #139264	; 0x22000
    55d4:	ldr	pc, [ip, #3400]!	; 0xd48

000055d8 <strcmp@plt>:
    55d8:	add	ip, pc, #0, 12
    55dc:	add	ip, ip, #139264	; 0x22000
    55e0:	ldr	pc, [ip, #3392]!	; 0xd40

000055e4 <__errno_location@plt>:
    55e4:	add	ip, pc, #0, 12
    55e8:	add	ip, ip, #139264	; 0x22000
    55ec:	ldr	pc, [ip, #3384]!	; 0xd38

000055f0 <__cxa_finalize@plt>:
    55f0:	add	ip, pc, #0, 12
    55f4:	add	ip, ip, #139264	; 0x22000
    55f8:	ldr	pc, [ip, #3376]!	; 0xd30

000055fc <sprintf@plt>:
    55fc:	add	ip, pc, #0, 12
    5600:	add	ip, ip, #139264	; 0x22000
    5604:	ldr	pc, [ip, #3368]!	; 0xd28

00005608 <rb_bh_usage@plt>:
    5608:	add	ip, pc, #0, 12
    560c:	add	ip, ip, #139264	; 0x22000
    5610:	ldr	pc, [ip, #3360]!	; 0xd20

00005614 <SSL_CTX_set_verify@plt>:
    5614:	add	ip, pc, #0, 12
    5618:	add	ip, ip, #139264	; 0x22000
    561c:	ldr	pc, [ip, #3352]!	; 0xd18

Disassembly of section .text:

00005620 <call_weak_fn>:
    5620:	ldr	r3, [pc, #20]	; 563c <call_weak_fn+0x1c>
    5624:	ldr	r2, [pc, #20]	; 5640 <call_weak_fn+0x20>
    5628:	add	r3, pc, r3
    562c:	ldr	r2, [r3, r2]
    5630:	cmp	r2, #0
    5634:	bxeq	lr
    5638:	b	4e34 <__gmon_start__@plt>
    563c:	.word	0x000229d0
    5640:	.word	0x00000348

00005644 <deregister_tm_clones>:
    5644:	ldr	r0, [pc, #44]	; 5678 <deregister_tm_clones+0x34>
    5648:	ldr	r3, [pc, #44]	; 567c <deregister_tm_clones+0x38>
    564c:	add	r0, pc, r0
    5650:	add	r3, pc, r3
    5654:	cmp	r3, r0
    5658:	ldr	r3, [pc, #32]	; 5680 <deregister_tm_clones+0x3c>
    565c:	add	r3, pc, r3
    5660:	bxeq	lr
    5664:	ldr	r2, [pc, #24]	; 5684 <deregister_tm_clones+0x40>
    5668:	ldr	r3, [r3, r2]
    566c:	cmp	r3, #0
    5670:	bxeq	lr
    5674:	bx	r3
    5678:	.word	0x00022e64
    567c:	.word	0x00022e60
    5680:	.word	0x0002299c
    5684:	.word	0x00000364

00005688 <register_tm_clones>:
    5688:	ldr	r0, [pc, #56]	; 56c8 <register_tm_clones+0x40>
    568c:	ldr	r3, [pc, #56]	; 56cc <register_tm_clones+0x44>
    5690:	add	r0, pc, r0
    5694:	add	r3, pc, r3
    5698:	sub	r1, r3, r0
    569c:	ldr	r3, [pc, #44]	; 56d0 <register_tm_clones+0x48>
    56a0:	asr	r1, r1, #2
    56a4:	add	r3, pc, r3
    56a8:	add	r1, r1, r1, lsr #31
    56ac:	asrs	r1, r1, #1
    56b0:	bxeq	lr
    56b4:	ldr	r2, [pc, #24]	; 56d4 <register_tm_clones+0x4c>
    56b8:	ldr	r3, [r3, r2]
    56bc:	cmp	r3, #0
    56c0:	bxeq	lr
    56c4:	bx	r3
    56c8:	.word	0x00022e20
    56cc:	.word	0x00022e1c
    56d0:	.word	0x00022954
    56d4:	.word	0x00000374

000056d8 <__do_global_dtors_aux>:
    56d8:	ldr	r3, [pc, #76]	; 572c <__do_global_dtors_aux+0x54>
    56dc:	ldr	r2, [pc, #76]	; 5730 <__do_global_dtors_aux+0x58>
    56e0:	add	r3, pc, r3
    56e4:	add	r2, pc, r2
    56e8:	ldrb	r3, [r3]
    56ec:	cmp	r3, #0
    56f0:	bxne	lr
    56f4:	ldr	r3, [pc, #56]	; 5734 <__do_global_dtors_aux+0x5c>
    56f8:	push	{r4, lr}
    56fc:	ldr	r3, [r2, r3]
    5700:	cmp	r3, #0
    5704:	beq	5714 <__do_global_dtors_aux+0x3c>
    5708:	ldr	r3, [pc, #40]	; 5738 <__do_global_dtors_aux+0x60>
    570c:	ldr	r0, [pc, r3]
    5710:	bl	55f0 <__cxa_finalize@plt>
    5714:	bl	5644 <deregister_tm_clones>
    5718:	ldr	r3, [pc, #28]	; 573c <__do_global_dtors_aux+0x64>
    571c:	mov	r2, #1
    5720:	add	r3, pc, r3
    5724:	strb	r2, [r3]
    5728:	pop	{r4, pc}
    572c:	.word	0x00022dd0
    5730:	.word	0x00022914
    5734:	.word	0x00000404
    5738:	.word	0x00022cf8
    573c:	.word	0x00022d90

00005740 <frame_dummy>:
    5740:	b	5688 <register_tm_clones>

00005744 <rb_spawn_process>:
    5744:	push	{r4, r5, r6, sl, fp, lr}
    5748:	add	fp, sp, #16
    574c:	sub	sp, sp, #352	; 0x160
    5750:	add	r6, sp, #12
    5754:	mov	r5, r0
    5758:	mov	r4, r1
    575c:	mov	r0, r6
    5760:	bl	4fd8 <posix_spawnattr_init@plt>
    5764:	mov	r0, r6
    5768:	mov	r1, #64	; 0x40
    576c:	bl	511c <posix_spawnattr_setflags@plt>
    5770:	ldr	r0, [pc, #84]	; 57cc <rb_spawn_process+0x88>
    5774:	mov	r1, r5
    5778:	mov	r2, #0
    577c:	mov	r3, r6
    5780:	ldr	r0, [pc, r0]
    5784:	str	r4, [sp]
    5788:	ldr	r0, [r0]
    578c:	str	r0, [sp, #4]
    5790:	sub	r0, fp, #20
    5794:	bl	50d4 <posix_spawn@plt>
    5798:	mov	r4, r0
    579c:	mov	r0, r6
    57a0:	bl	5158 <posix_spawnattr_destroy@plt>
    57a4:	cmp	r4, #0
    57a8:	beq	57c0 <rb_spawn_process+0x7c>
    57ac:	bl	55e4 <__errno_location@plt>
    57b0:	str	r4, [r0]
    57b4:	mvn	r0, #0
    57b8:	str	r0, [fp, #-20]	; 0xffffffec
    57bc:	b	57c4 <rb_spawn_process+0x80>
    57c0:	ldr	r0, [fp, #-20]	; 0xffffffec
    57c4:	sub	sp, fp, #16
    57c8:	pop	{r4, r5, r6, sl, fp, pc}
    57cc:	.word	0x00022c04

000057d0 <rb_gettimeofday>:
    57d0:	b	5068 <gettimeofday@plt>

000057d4 <rb_sleep>:
    57d4:	push	{fp, lr}
    57d8:	mov	fp, sp
    57dc:	sub	sp, sp, #8
    57e0:	str	r0, [sp]
    57e4:	mov	r0, #1000	; 0x3e8
    57e8:	mul	r0, r1, r0
    57ec:	mov	r1, #0
    57f0:	str	r0, [sp, #4]
    57f4:	mov	r0, sp
    57f8:	bl	5518 <nanosleep@plt>
    57fc:	mov	sp, fp
    5800:	pop	{fp, pc}

00005804 <rb_strerror>:
    5804:	b	4cd8 <strerror@plt>

00005808 <rb_kill>:
    5808:	b	550c <kill@plt>

0000580c <rb_setenv>:
    580c:	b	55cc <setenv@plt>

00005810 <rb_waitpid>:
    5810:	b	51a0 <waitpid@plt>

00005814 <rb_getpid>:
    5814:	b	53c8 <getpid@plt>

00005818 <rb_path_to_self>:
    5818:	push	{r4, sl, fp, lr}
    581c:	add	fp, sp, #8
    5820:	ldr	r0, [pc, #36]	; 584c <rb_path_to_self+0x34>
    5824:	ldr	r4, [pc, #36]	; 5850 <rb_path_to_self+0x38>
    5828:	mov	r2, #4096	; 0x1000
    582c:	add	r4, pc, r4
    5830:	add	r0, pc, r0
    5834:	mov	r1, r4
    5838:	bl	5410 <readlink@plt>
    583c:	mvn	r1, #0
    5840:	subs	r0, r0, r1
    5844:	movne	r0, r4
    5848:	pop	{r4, sl, fp, pc}
    584c:	.word	0x0000f8f8
    5850:	.word	0x00022c85

00005854 <rb_init_netio_win32>:
    5854:	push	{fp, lr}
    5858:	mov	fp, sp
    585c:	bl	55e4 <__errno_location@plt>
    5860:	mov	r1, #38	; 0x26
    5864:	str	r1, [r0]
    5868:	mvn	r0, #0
    586c:	pop	{fp, pc}

00005870 <rb_setselect_win32>:
    5870:	push	{fp, lr}
    5874:	mov	fp, sp
    5878:	bl	55e4 <__errno_location@plt>
    587c:	mov	r1, #38	; 0x26
    5880:	str	r1, [r0]
    5884:	pop	{fp, pc}

00005888 <rb_select_win32>:
    5888:	push	{fp, lr}
    588c:	mov	fp, sp
    5890:	bl	55e4 <__errno_location@plt>
    5894:	mov	r1, #38	; 0x26
    5898:	str	r1, [r0]
    589c:	mvn	r0, #0
    58a0:	pop	{fp, pc}

000058a4 <rb_setup_fd_win32>:
    58a4:	push	{fp, lr}
    58a8:	mov	fp, sp
    58ac:	bl	55e4 <__errno_location@plt>
    58b0:	mov	r1, #38	; 0x26
    58b4:	str	r1, [r0]
    58b8:	mvn	r0, #0
    58bc:	pop	{fp, pc}

000058c0 <rb_crypt>:
    58c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58c4:	add	fp, sp, #28
    58c8:	sub	sp, sp, #4
    58cc:	vpush	{d8-d9}
    58d0:	sub	sp, sp, #224	; 0xe0
    58d4:	mov	r5, r0
    58d8:	ldrb	r0, [r1]
    58dc:	mov	r6, r1
    58e0:	cmp	r0, #36	; 0x24
    58e4:	bne	5964 <rb_crypt+0xa4>
    58e8:	ldrb	r0, [r6, #2]
    58ec:	cmp	r0, #36	; 0x24
    58f0:	beq	5900 <rb_crypt+0x40>
    58f4:	ldrb	r0, [r6, #3]
    58f8:	cmp	r0, #36	; 0x24
    58fc:	bne	5964 <rb_crypt+0xa4>
    5900:	ldrb	r0, [r6, #1]
    5904:	mov	r4, #0
    5908:	cmp	r0, #54	; 0x36
    590c:	beq	5c64 <rb_crypt+0x3a4>
    5910:	cmp	r0, #53	; 0x35
    5914:	beq	5cc0 <rb_crypt+0x400>
    5918:	cmp	r0, #49	; 0x31
    591c:	bne	662c <rb_crypt+0xd6c>
    5920:	ldr	r4, [pc, #3352]	; 6640 <rb_crypt+0xd80>
    5924:	mov	r0, r6
    5928:	mov	r2, #3
    592c:	add	r4, pc, r4
    5930:	str	r6, [r4]
    5934:	ldr	r1, [pc, #3336]	; 6644 <rb_crypt+0xd84>
    5938:	add	r1, pc, r1
    593c:	bl	5500 <strncmp@plt>
    5940:	cmp	r0, #0
    5944:	mov	r1, #0
    5948:	addeq	r6, r6, #3
    594c:	streq	r6, [r4]
    5950:	mov	r7, r6
    5954:	ldr	r0, [pc, #3308]	; 6648 <rb_crypt+0xd88>
    5958:	add	r0, pc, r0
    595c:	str	r6, [r0]
    5960:	b	5d20 <rb_crypt+0x460>
    5964:	str	r6, [sp, #8]
    5968:	bl	66fc <rb_des_init>
    596c:	add	r0, sp, #132	; 0x84
    5970:	mov	r2, #255	; 0xff
    5974:	orr	r1, r0, #1
    5978:	mov	r3, r5
    597c:	ldrb	r7, [r3], #1
    5980:	tst	r2, r7, lsl #1
    5984:	lsl	r6, r7, #1
    5988:	strb	r6, [r1, #-1]
    598c:	movne	r5, r3
    5990:	sub	r3, r1, r0
    5994:	add	r1, r1, #1
    5998:	cmp	r3, #8
    599c:	bne	5978 <rb_crypt+0xb8>
    59a0:	bl	66fc <rb_des_init>
    59a4:	ldr	r0, [sp, #132]	; 0x84
    59a8:	ldr	r2, [sp, #136]	; 0x88
    59ac:	rev	r1, r0
    59b0:	rev	r0, r2
    59b4:	ldr	r2, [pc, #3280]	; 668c <rb_crypt+0xdcc>
    59b8:	ldr	r2, [pc, r2]
    59bc:	cmp	r0, r2
    59c0:	bne	59dc <rb_crypt+0x11c>
    59c4:	ldr	r2, [pc, #3268]	; 6690 <rb_crypt+0xdd0>
    59c8:	ldr	r2, [pc, r2]
    59cc:	cmp	r1, r2
    59d0:	bne	59dc <rb_crypt+0x11c>
    59d4:	orrs	r2, r0, r1
    59d8:	bne	5c20 <rb_crypt+0x360>
    59dc:	ldr	r2, [pc, #3248]	; 6694 <rb_crypt+0xdd4>
    59e0:	lsr	lr, r1, #25
    59e4:	and	sl, r1, #254	; 0xfe
    59e8:	add	r2, pc, r2
    59ec:	str	r0, [r2]
    59f0:	ldr	r2, [pc, #3232]	; 6698 <rb_crypt+0xdd8>
    59f4:	add	r2, pc, r2
    59f8:	str	r1, [r2]
    59fc:	ldr	r2, [pc, #3224]	; 669c <rb_crypt+0xddc>
    5a00:	add	r2, pc, r2
    5a04:	ldr	r7, [r2, lr, lsl #2]
    5a08:	ubfx	ip, r1, #17, #7
    5a0c:	add	r5, r2, ip, lsl #2
    5a10:	ldr	r5, [r5, #512]	; 0x200
    5a14:	ubfx	r9, r1, #9, #7
    5a18:	add	r4, r2, r9, lsl #2
    5a1c:	ldr	r4, [r4, #1024]	; 0x400
    5a20:	orr	r7, r5, r7
    5a24:	orr	r7, r7, r4
    5a28:	add	r4, r2, sl, lsl #1
    5a2c:	ldr	r4, [r4, #1536]	; 0x600
    5a30:	orr	r7, r7, r4
    5a34:	lsr	r4, r0, #25
    5a38:	add	r3, r2, r4, lsl #2
    5a3c:	ldr	r3, [r3, #2048]	; 0x800
    5a40:	orr	r3, r7, r3
    5a44:	ubfx	r7, r0, #17, #7
    5a48:	add	r6, r2, r7, lsl #2
    5a4c:	ldr	r6, [r6, #2560]	; 0xa00
    5a50:	orr	r3, r3, r6
    5a54:	ubfx	r6, r0, #9, #7
    5a58:	and	r0, r0, #254	; 0xfe
    5a5c:	add	r5, r2, r6, lsl #2
    5a60:	add	r2, r2, r0, lsl #1
    5a64:	ldr	r5, [r5, #3072]	; 0xc00
    5a68:	ldr	r2, [r2, #3584]	; 0xe00
    5a6c:	orr	r3, r3, r5
    5a70:	orr	r1, r3, r2
    5a74:	str	r1, [sp, #16]
    5a78:	ldr	r3, [pc, #3104]	; 66a0 <rb_crypt+0xde0>
    5a7c:	add	r3, pc, r3
    5a80:	add	r1, r3, ip, lsl #2
    5a84:	ldr	r5, [r3, lr, lsl #2]
    5a88:	add	r7, r3, r7, lsl #2
    5a8c:	add	r0, r3, r0, lsl #1
    5a90:	ldr	r1, [r1, #512]	; 0x200
    5a94:	ldr	r7, [r7, #2560]	; 0xa00
    5a98:	ldr	r0, [r0, #3584]	; 0xe00
    5a9c:	orr	r1, r1, r5
    5aa0:	add	r5, r3, r9, lsl #2
    5aa4:	ldr	r5, [r5, #1024]	; 0x400
    5aa8:	orr	r1, r1, r5
    5aac:	add	r5, r3, sl, lsl #1
    5ab0:	ldr	r5, [r5, #1536]	; 0x600
    5ab4:	orr	r1, r1, r5
    5ab8:	add	r5, r3, r4, lsl #2
    5abc:	ldr	r5, [r5, #2048]	; 0x800
    5ac0:	orr	r1, r1, r5
    5ac4:	orr	r1, r1, r7
    5ac8:	add	r7, r3, r6, lsl #2
    5acc:	ldr	r7, [r7, #3072]	; 0xc00
    5ad0:	orr	r1, r1, r7
    5ad4:	mov	r7, #0
    5ad8:	orr	r0, r1, r0
    5adc:	mov	r1, #0
    5ae0:	str	r0, [sp, #12]
    5ae4:	ldr	ip, [pc, #3000]	; 66a4 <rb_crypt+0xde4>
    5ae8:	add	ip, pc, ip
    5aec:	ldr	r0, [pc, #2996]	; 66a8 <rb_crypt+0xde8>
    5af0:	add	r0, pc, r0
    5af4:	ldrb	r3, [r0, r7]
    5af8:	ldr	r0, [sp, #12]
    5afc:	add	r1, r1, r3
    5b00:	rsb	r2, r1, #28
    5b04:	lsr	r3, r0, r2
    5b08:	orr	r0, r3, r0, lsl r1
    5b0c:	ubfx	r6, r0, #14, #7
    5b10:	and	sl, r0, #127	; 0x7f
    5b14:	add	r3, ip, r6, lsl #2
    5b18:	str	r6, [sp, #20]
    5b1c:	ldr	r3, [r3, #512]	; 0x200
    5b20:	ubfx	lr, r0, #21, #7
    5b24:	ldr	r8, [ip, lr, lsl #2]
    5b28:	orr	r5, r3, r8
    5b2c:	ubfx	r8, r0, #7, #7
    5b30:	ldr	r0, [sp, #16]
    5b34:	add	r6, ip, r8, lsl #2
    5b38:	ldr	r6, [r6, #1024]	; 0x400
    5b3c:	lsr	r2, r0, r2
    5b40:	orr	r2, r2, r0, lsl r1
    5b44:	orr	r5, r5, r6
    5b48:	add	r6, ip, sl, lsl #2
    5b4c:	ldr	r6, [r6, #1536]	; 0x600
    5b50:	orr	r5, r5, r6
    5b54:	ubfx	r6, r2, #21, #7
    5b58:	add	r3, ip, r6, lsl #2
    5b5c:	ldr	r3, [r3, #2048]	; 0x800
    5b60:	orr	r3, r5, r3
    5b64:	ubfx	r5, r2, #14, #7
    5b68:	add	r9, ip, r5, lsl #2
    5b6c:	ldr	r0, [r9, #2560]	; 0xa00
    5b70:	and	r9, r2, #127	; 0x7f
    5b74:	orr	r0, r3, r0
    5b78:	ubfx	r3, r2, #7, #7
    5b7c:	add	r4, ip, r3, lsl #2
    5b80:	ldr	r4, [r4, #3072]	; 0xc00
    5b84:	orr	r0, r0, r4
    5b88:	add	r4, ip, r9, lsl #2
    5b8c:	ldr	r4, [r4, #3584]	; 0xe00
    5b90:	orr	r0, r0, r4
    5b94:	ldr	r4, [pc, #2832]	; 66ac <rb_crypt+0xdec>
    5b98:	add	r4, pc, r4
    5b9c:	str	r0, [r4, r7, lsl #2]
    5ba0:	ldr	r0, [pc, #2824]	; 66b0 <rb_crypt+0xdf0>
    5ba4:	ldr	r4, [sp, #20]
    5ba8:	add	r0, pc, r0
    5bac:	mov	r2, r0
    5bb0:	ldr	r0, [r0, lr, lsl #2]
    5bb4:	add	r4, r2, r4, lsl #2
    5bb8:	add	r6, r2, r6, lsl #2
    5bbc:	add	r3, r2, r3, lsl #2
    5bc0:	ldr	r4, [r4, #512]	; 0x200
    5bc4:	ldr	r6, [r6, #2048]	; 0x800
    5bc8:	ldr	r3, [r3, #3072]	; 0xc00
    5bcc:	orr	r0, r4, r0
    5bd0:	add	r4, r2, r8, lsl #2
    5bd4:	ldr	r4, [r4, #1024]	; 0x400
    5bd8:	orr	r0, r0, r4
    5bdc:	add	r4, r2, sl, lsl #2
    5be0:	ldr	r4, [r4, #1536]	; 0x600
    5be4:	orr	r0, r0, r4
    5be8:	orr	r0, r0, r6
    5bec:	add	r6, r2, r5, lsl #2
    5bf0:	add	r2, r2, r9, lsl #2
    5bf4:	ldr	r6, [r6, #2560]	; 0xa00
    5bf8:	ldr	r2, [r2, #3584]	; 0xe00
    5bfc:	orr	r0, r0, r6
    5c00:	orr	r0, r0, r3
    5c04:	orr	r0, r0, r2
    5c08:	ldr	r2, [pc, #2724]	; 66b4 <rb_crypt+0xdf4>
    5c0c:	add	r2, pc, r2
    5c10:	str	r0, [r2, r7, lsl #2]
    5c14:	add	r7, r7, #1
    5c18:	cmp	r7, #16
    5c1c:	bne	5aec <rb_crypt+0x22c>
    5c20:	ldr	r7, [sp, #8]
    5c24:	mov	r1, #0
    5c28:	mov	r2, #0
    5c2c:	ldrb	r0, [r7, #1]
    5c30:	cmp	r0, #122	; 0x7a
    5c34:	bhi	61cc <rb_crypt+0x90c>
    5c38:	cmp	r0, #97	; 0x61
    5c3c:	bcc	5c48 <rb_crypt+0x388>
    5c40:	sub	r2, r0, #59	; 0x3b
    5c44:	b	61cc <rb_crypt+0x90c>
    5c48:	cmp	r0, #90	; 0x5a
    5c4c:	mov	r2, #0
    5c50:	bhi	61cc <rb_crypt+0x90c>
    5c54:	cmp	r0, #65	; 0x41
    5c58:	bcc	61bc <rb_crypt+0x8fc>
    5c5c:	sub	r2, r0, #53	; 0x35
    5c60:	b	61cc <rb_crypt+0x90c>
    5c64:	mov	r0, r6
    5c68:	bl	50e0 <strlen@plt>
    5c6c:	ldr	r2, [pc, #2568]	; 667c <rb_crypt+0xdbc>
    5c70:	add	r7, r0, #109	; 0x6d
    5c74:	ldr	r2, [pc, r2]
    5c78:	ldr	r0, [pc, #2560]	; 6680 <rb_crypt+0xdc0>
    5c7c:	ldr	r0, [pc, r0]
    5c80:	cmp	r0, r7
    5c84:	bge	6198 <rb_crypt+0x8d8>
    5c88:	mov	r0, r2
    5c8c:	mov	r1, r7
    5c90:	bl	5530 <realloc@plt>
    5c94:	cmp	r0, #0
    5c98:	mov	r4, #0
    5c9c:	beq	662c <rb_crypt+0xd6c>
    5ca0:	mov	r2, r0
    5ca4:	ldr	r0, [pc, #2520]	; 6684 <rb_crypt+0xdc4>
    5ca8:	add	r0, pc, r0
    5cac:	str	r7, [r0]
    5cb0:	ldr	r0, [pc, #2512]	; 6688 <rb_crypt+0xdc8>
    5cb4:	add	r0, pc, r0
    5cb8:	str	r2, [r0]
    5cbc:	b	619c <rb_crypt+0x8dc>
    5cc0:	mov	r0, r6
    5cc4:	bl	50e0 <strlen@plt>
    5cc8:	add	r7, r0, #66	; 0x42
    5ccc:	mov	r0, r7
    5cd0:	bl	52a8 <malloc@plt>
    5cd4:	mov	r4, #0
    5cd8:	cmp	r0, #0
    5cdc:	beq	662c <rb_crypt+0xd6c>
    5ce0:	mov	r2, r0
    5ce4:	ldr	r0, [pc, #2444]	; 6678 <rb_crypt+0xdb8>
    5ce8:	mov	r1, r6
    5cec:	mov	r3, r7
    5cf0:	add	r0, pc, r0
    5cf4:	str	r2, [r0]
    5cf8:	mov	r0, r5
    5cfc:	sub	sp, fp, #48	; 0x30
    5d00:	vpop	{d8-d9}
    5d04:	add	sp, sp, #4
    5d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d0c:	b	7798 <rb_sha256_crypt_r>
    5d10:	add	r2, r6, r1
    5d14:	add	r1, r1, #1
    5d18:	add	r7, r2, #1
    5d1c:	str	r7, [r0]
    5d20:	ldrb	r2, [r6, r1]
    5d24:	cmp	r2, #0
    5d28:	beq	5d38 <rb_crypt+0x478>
    5d2c:	cmp	r2, #36	; 0x24
    5d30:	cmpne	r1, #8
    5d34:	bne	5d10 <rb_crypt+0x450>
    5d38:	add	r0, pc, #632	; 0x278
    5d3c:	add	r4, sp, #132	; 0x84
    5d40:	mov	r8, #0
    5d44:	vld1.64	{d8-d9}, [r0]
    5d48:	mov	r0, r4
    5d4c:	vst1.32	{d8-d9}, [r0]!
    5d50:	str	r8, [r0]
    5d54:	str	r8, [r0, #4]
    5d58:	mov	r0, r5
    5d5c:	bl	50e0 <strlen@plt>
    5d60:	mov	r2, r0
    5d64:	mov	r0, r4
    5d68:	mov	r1, r5
    5d6c:	bl	6c3c <MD5Update>
    5d70:	ldr	r1, [pc, #2260]	; 664c <rb_crypt+0xd8c>
    5d74:	mov	r0, r4
    5d78:	mov	r2, #3
    5d7c:	add	r1, pc, r1
    5d80:	bl	6c3c <MD5Update>
    5d84:	ldr	r1, [pc, #2244]	; 6650 <rb_crypt+0xd90>
    5d88:	sub	r6, r7, r6
    5d8c:	mov	r0, r4
    5d90:	mov	r2, r6
    5d94:	ldr	r1, [pc, r1]
    5d98:	bl	6c3c <MD5Update>
    5d9c:	add	r7, sp, #44	; 0x2c
    5da0:	mov	r0, r7
    5da4:	vst1.32	{d8-d9}, [r0]!
    5da8:	str	r8, [r0]
    5dac:	str	r8, [r0, #4]
    5db0:	mov	r0, r5
    5db4:	bl	50e0 <strlen@plt>
    5db8:	mov	r2, r0
    5dbc:	mov	r0, r7
    5dc0:	mov	r1, r5
    5dc4:	bl	6c3c <MD5Update>
    5dc8:	ldr	r1, [pc, #2180]	; 6654 <rb_crypt+0xd94>
    5dcc:	mov	r0, r7
    5dd0:	mov	r2, r6
    5dd4:	ldr	r1, [pc, r1]
    5dd8:	str	r6, [sp, #20]
    5ddc:	bl	6c3c <MD5Update>
    5de0:	mov	r0, r5
    5de4:	bl	50e0 <strlen@plt>
    5de8:	mov	r2, r0
    5dec:	mov	r0, r7
    5df0:	mov	r1, r5
    5df4:	bl	6c3c <MD5Update>
    5df8:	add	r9, sp, #24
    5dfc:	mov	r1, r7
    5e00:	mov	r0, r9
    5e04:	bl	6cf8 <MD5Final>
    5e08:	mov	r0, r5
    5e0c:	bl	50e0 <strlen@plt>
    5e10:	cmp	r0, #1
    5e14:	blt	5e48 <rb_crypt+0x588>
    5e18:	mov	r6, r0
    5e1c:	add	sl, sp, #132	; 0x84
    5e20:	add	r4, sp, #24
    5e24:	cmp	r6, #16
    5e28:	mov	r2, r6
    5e2c:	mov	r0, sl
    5e30:	mov	r1, r4
    5e34:	movge	r2, #16
    5e38:	bl	6c3c <MD5Update>
    5e3c:	sub	r6, r6, #16
    5e40:	cmp	r6, #0
    5e44:	bgt	5e24 <rb_crypt+0x564>
    5e48:	vmov.i32	q8, #0	; 0x00000000
    5e4c:	mov	r0, r5
    5e50:	vst1.64	{d16-d17}, [r9]
    5e54:	bl	50e0 <strlen@plt>
    5e58:	cmp	r0, #0
    5e5c:	beq	5e98 <rb_crypt+0x5d8>
    5e60:	mov	r4, r0
    5e64:	add	r8, sp, #132	; 0x84
    5e68:	mov	r6, #0
    5e6c:	add	r9, sp, #24
    5e70:	tst	r4, #1
    5e74:	mov	r0, r8
    5e78:	mov	r2, #1
    5e7c:	moveq	r1, r5
    5e80:	movne	r1, r9
    5e84:	bl	6c3c <MD5Update>
    5e88:	lsr	r0, r4, #1
    5e8c:	cmp	r6, r4, lsr #1
    5e90:	mov	r4, r0
    5e94:	bne	5e70 <rb_crypt+0x5b0>
    5e98:	ldr	r4, [pc, #1976]	; 6658 <rb_crypt+0xd98>
    5e9c:	ldr	r1, [pc, #1976]	; 665c <rb_crypt+0xd9c>
    5ea0:	mov	r2, #120	; 0x78
    5ea4:	add	r4, pc, r4
    5ea8:	add	r1, pc, r1
    5eac:	mov	r0, r4
    5eb0:	bl	4fb4 <rb_strlcpy@plt>
    5eb4:	ldr	r1, [pc, #1956]	; 6660 <rb_crypt+0xda0>
    5eb8:	mov	r0, r4
    5ebc:	ldr	r1, [pc, r1]
    5ec0:	ldr	r2, [sp, #20]
    5ec4:	bl	51c4 <strncat@plt>
    5ec8:	ldr	r1, [pc, #1940]	; 6664 <rb_crypt+0xda4>
    5ecc:	mov	r2, #120	; 0x78
    5ed0:	add	r1, pc, r1
    5ed4:	bl	547c <rb_strlcat@plt>
    5ed8:	add	r9, sp, #24
    5edc:	add	r1, sp, #132	; 0x84
    5ee0:	mov	r0, r9
    5ee4:	bl	6cf8 <MD5Final>
    5ee8:	mov	r4, #0
    5eec:	mov	sl, #0
    5ef0:	add	r0, pc, #192	; 0xc0
    5ef4:	ands	r6, sl, #1
    5ef8:	str	r4, [sp, #64]	; 0x40
    5efc:	vld1.64	{d16-d17}, [r0]
    5f00:	mov	r0, r7
    5f04:	vst1.32	{d16-d17}, [r0]!
    5f08:	str	r4, [r0]
    5f0c:	beq	5f28 <rb_crypt+0x668>
    5f10:	mov	r0, r5
    5f14:	bl	50e0 <strlen@plt>
    5f18:	mov	r2, r0
    5f1c:	mov	r0, r7
    5f20:	mov	r1, r5
    5f24:	b	5f34 <rb_crypt+0x674>
    5f28:	mov	r0, r7
    5f2c:	mov	r1, r9
    5f30:	mov	r2, #16
    5f34:	bl	6c3c <MD5Update>
    5f38:	movw	r0, #43691	; 0xaaab
    5f3c:	uxth	r8, sl
    5f40:	movw	r1, #21846	; 0x5556
    5f44:	movt	r0, #43690	; 0xaaaa
    5f48:	movt	r1, #21845	; 0x5555
    5f4c:	mul	r0, r8, r0
    5f50:	cmp	r0, r1
    5f54:	bcc	5f6c <rb_crypt+0x6ac>
    5f58:	ldr	r1, [pc, #1800]	; 6668 <rb_crypt+0xda8>
    5f5c:	mov	r0, r7
    5f60:	ldr	r1, [pc, r1]
    5f64:	ldr	r2, [sp, #20]
    5f68:	bl	6c3c <MD5Update>
    5f6c:	movw	r0, #28087	; 0x6db7
    5f70:	movw	r1, #18725	; 0x4925
    5f74:	movt	r0, #46811	; 0xb6db
    5f78:	movt	r1, #9362	; 0x2492
    5f7c:	mul	r0, r8, r0
    5f80:	cmp	r0, r1
    5f84:	bcc	5fa0 <rb_crypt+0x6e0>
    5f88:	mov	r0, r5
    5f8c:	bl	50e0 <strlen@plt>
    5f90:	mov	r2, r0
    5f94:	mov	r0, r7
    5f98:	mov	r1, r5
    5f9c:	bl	6c3c <MD5Update>
    5fa0:	cmp	r6, #0
    5fa4:	beq	5fc8 <rb_crypt+0x708>
    5fa8:	mov	r0, r7
    5fac:	mov	r1, r9
    5fb0:	mov	r2, #16
    5fb4:	b	5fdc <rb_crypt+0x71c>
    5fb8:	.word	0x67452301
    5fbc:	.word	0xefcdab89
    5fc0:	.word	0x98badcfe
    5fc4:	.word	0x10325476
    5fc8:	mov	r0, r5
    5fcc:	bl	50e0 <strlen@plt>
    5fd0:	mov	r2, r0
    5fd4:	mov	r0, r7
    5fd8:	mov	r1, r5
    5fdc:	bl	6c3c <MD5Update>
    5fe0:	mov	r0, r9
    5fe4:	mov	r1, r7
    5fe8:	bl	6cf8 <MD5Final>
    5fec:	add	sl, sl, #1
    5ff0:	cmp	sl, #1000	; 0x3e8
    5ff4:	bne	5ef0 <rb_crypt+0x630>
    5ff8:	ldr	r4, [pc, #1644]	; 666c <rb_crypt+0xdac>
    5ffc:	add	r4, pc, r4
    6000:	mov	r0, r4
    6004:	bl	50e0 <strlen@plt>
    6008:	ldr	r1, [pc, #1632]	; 6670 <rb_crypt+0xdb0>
    600c:	ldrb	r3, [sp, #30]
    6010:	ldrb	r2, [sp, #24]
    6014:	ldrb	r7, [sp, #36]	; 0x24
    6018:	add	r0, r4, r0
    601c:	lsl	r3, r3, #8
    6020:	add	r1, pc, r1
    6024:	orr	r2, r3, r2, lsl #16
    6028:	str	r0, [r1]
    602c:	orr	r3, r2, r7
    6030:	ldr	r2, [pc, #1596]	; 6674 <rb_crypt+0xdb4>
    6034:	mov	r7, #0
    6038:	add	r2, pc, r2
    603c:	and	r6, r3, #63	; 0x3f
    6040:	lsr	r3, r3, #6
    6044:	ldrb	r6, [r2, r6]
    6048:	strb	r6, [r0, r7]
    604c:	add	r7, r7, #1
    6050:	cmp	r7, #4
    6054:	bne	603c <rb_crypt+0x77c>
    6058:	ldrb	r6, [sp, #31]
    605c:	ldrb	r7, [sp, #25]
    6060:	ldrb	r5, [sp, #37]	; 0x25
    6064:	add	r3, r0, #4
    6068:	str	r3, [r1]
    606c:	lsl	r6, r6, #8
    6070:	orr	r7, r6, r7, lsl #16
    6074:	mov	r6, #0
    6078:	orr	r7, r7, r5
    607c:	and	r5, r7, #63	; 0x3f
    6080:	lsr	r7, r7, #6
    6084:	ldrb	r5, [r2, r5]
    6088:	strb	r5, [r3, r6]
    608c:	add	r6, r6, #1
    6090:	cmp	r6, #4
    6094:	bne	607c <rb_crypt+0x7bc>
    6098:	ldrb	r6, [sp, #32]
    609c:	ldrb	r7, [sp, #26]
    60a0:	ldrb	r5, [sp, #38]	; 0x26
    60a4:	add	r3, r0, #8
    60a8:	str	r3, [r1]
    60ac:	lsl	r6, r6, #8
    60b0:	orr	r7, r6, r7, lsl #16
    60b4:	mov	r6, #0
    60b8:	orr	r7, r7, r5
    60bc:	and	r5, r7, #63	; 0x3f
    60c0:	lsr	r7, r7, #6
    60c4:	ldrb	r5, [r2, r5]
    60c8:	strb	r5, [r3, r6]
    60cc:	add	r6, r6, #1
    60d0:	cmp	r6, #4
    60d4:	bne	60bc <rb_crypt+0x7fc>
    60d8:	ldrb	r6, [sp, #33]	; 0x21
    60dc:	ldrb	r7, [sp, #27]
    60e0:	ldrb	r5, [sp, #39]	; 0x27
    60e4:	add	r3, r0, #12
    60e8:	str	r3, [r1]
    60ec:	lsl	r6, r6, #8
    60f0:	orr	r7, r6, r7, lsl #16
    60f4:	mov	r6, #0
    60f8:	orr	r7, r7, r5
    60fc:	and	r5, r7, #63	; 0x3f
    6100:	lsr	r7, r7, #6
    6104:	ldrb	r5, [r2, r5]
    6108:	strb	r5, [r3, r6]
    610c:	add	r6, r6, #1
    6110:	cmp	r6, #4
    6114:	bne	60fc <rb_crypt+0x83c>
    6118:	ldrb	r5, [sp, #34]	; 0x22
    611c:	ldrb	r7, [sp, #28]
    6120:	ldrb	r6, [sp, #29]
    6124:	add	r3, r0, #16
    6128:	str	r3, [r1]
    612c:	lsl	r5, r5, #8
    6130:	orr	r7, r5, r7, lsl #16
    6134:	orr	r7, r7, r6
    6138:	mov	r6, #0
    613c:	and	r5, r7, #63	; 0x3f
    6140:	lsr	r7, r7, #6
    6144:	ldrb	r5, [r2, r5]
    6148:	strb	r5, [r3, r6]
    614c:	add	r6, r6, #1
    6150:	cmp	r6, #4
    6154:	bne	613c <rb_crypt+0x87c>
    6158:	ldrb	r6, [sp, #35]	; 0x23
    615c:	add	r3, r0, #20
    6160:	mov	r7, #0
    6164:	str	r3, [r1]
    6168:	and	r5, r6, #63	; 0x3f
    616c:	lsr	r6, r6, #6
    6170:	ldrb	r5, [r2, r5]
    6174:	strb	r5, [r3, r7]
    6178:	add	r7, r7, #1
    617c:	cmp	r7, #2
    6180:	bne	6168 <rb_crypt+0x8a8>
    6184:	add	r2, r0, #22
    6188:	str	r2, [r1]
    618c:	mov	r1, #0
    6190:	strb	r1, [r0, #22]
    6194:	b	662c <rb_crypt+0xd6c>
    6198:	mov	r7, r0
    619c:	mov	r0, r5
    61a0:	mov	r1, r6
    61a4:	mov	r3, r7
    61a8:	sub	sp, fp, #48	; 0x30
    61ac:	vpop	{d8-d9}
    61b0:	add	sp, sp, #4
    61b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61b8:	b	8840 <rb_sha512_crypt_r>
    61bc:	sub	r2, r0, #46	; 0x2e
    61c0:	uxtb	r3, r2
    61c4:	cmp	r3, #12
    61c8:	movcs	r2, #0
    61cc:	ldrb	r3, [r7]
    61d0:	lsl	r2, r2, #6
    61d4:	cmp	r3, #122	; 0x7a
    61d8:	bhi	6214 <rb_crypt+0x954>
    61dc:	cmp	r3, #97	; 0x61
    61e0:	bcc	61ec <rb_crypt+0x92c>
    61e4:	sub	r1, r3, #59	; 0x3b
    61e8:	b	6214 <rb_crypt+0x954>
    61ec:	cmp	r3, #90	; 0x5a
    61f0:	bhi	6214 <rb_crypt+0x954>
    61f4:	cmp	r3, #65	; 0x41
    61f8:	bcc	6204 <rb_crypt+0x944>
    61fc:	sub	r1, r3, #53	; 0x35
    6200:	b	6214 <rb_crypt+0x954>
    6204:	sub	r1, r3, #46	; 0x2e
    6208:	uxtb	r7, r1
    620c:	cmp	r7, #12
    6210:	movcs	r1, #0
    6214:	ldr	r7, [pc, #1180]	; 66b8 <rb_crypt+0xdf8>
    6218:	cmp	r0, #0
    621c:	add	r7, pc, r7
    6220:	strb	r3, [r7]
    6224:	movne	r3, r0
    6228:	orr	r0, r1, r2
    622c:	strb	r3, [r7, #1]
    6230:	ldr	r1, [pc, #1156]	; 66bc <rb_crypt+0xdfc>
    6234:	ldr	r1, [pc, r1]
    6238:	cmp	r1, r0
    623c:	bne	624c <rb_crypt+0x98c>
    6240:	ldr	r2, [pc, #1144]	; 66c0 <rb_crypt+0xe00>
    6244:	ldr	r2, [pc, r2]
    6248:	b	6290 <rb_crypt+0x9d0>
    624c:	ldr	r1, [pc, #1136]	; 66c4 <rb_crypt+0xe04>
    6250:	mov	r2, #0
    6254:	mov	r7, #1
    6258:	mov	r6, #24
    625c:	add	r1, pc, r1
    6260:	str	r2, [r1]
    6264:	ldr	r3, [pc, #1116]	; 66c8 <rb_crypt+0xe08>
    6268:	add	r3, pc, r3
    626c:	str	r0, [r3]
    6270:	mov	r3, #8388608	; 0x800000
    6274:	tst	r7, r0
    6278:	lsl	r7, r7, #1
    627c:	orrne	r2, r3, r2
    6280:	lsr	r3, r3, #1
    6284:	strne	r2, [r1]
    6288:	subs	r6, r6, #1
    628c:	bne	6274 <rb_crypt+0x9b4>
    6290:	str	r2, [sp, #16]
    6294:	mov	r2, #4096	; 0x1000
    6298:	mov	ip, #5120	; 0x1400
    629c:	mov	r6, #6144	; 0x1800
    62a0:	mov	r5, #7168	; 0x1c00
    62a4:	mov	r9, #24
    62a8:	ldr	r0, [pc, #1052]	; 66cc <rb_crypt+0xe0c>
    62ac:	add	r0, pc, r0
    62b0:	ldr	r1, [r0, r2]
    62b4:	ldr	r3, [r0, #1024]	; 0x400
    62b8:	ldr	r7, [pc, #1040]	; 66d0 <rb_crypt+0xe10>
    62bc:	ldr	r7, [pc, r7]
    62c0:	orr	r3, r3, r7
    62c4:	ldr	r7, [r0, #2048]	; 0x800
    62c8:	orr	r3, r3, r7
    62cc:	ldr	r7, [r0, #3072]	; 0xc00
    62d0:	orr	r3, r3, r7
    62d4:	ldr	r7, [r0, ip]
    62d8:	orr	r1, r3, r1
    62dc:	orr	r1, r1, r7
    62e0:	ldr	r7, [r0, r6]
    62e4:	ldr	r0, [r0, r5]
    62e8:	orr	r1, r1, r7
    62ec:	orr	r7, r1, r0
    62f0:	ldr	r0, [pc, #988]	; 66d4 <rb_crypt+0xe14>
    62f4:	add	r0, pc, r0
    62f8:	ldr	r1, [r0, r2]
    62fc:	ldr	r4, [r0, #1024]	; 0x400
    6300:	ldr	r3, [pc, #976]	; 66d8 <rb_crypt+0xe18>
    6304:	ldr	r3, [pc, r3]
    6308:	orr	r3, r4, r3
    630c:	ldr	r4, [r0, #2048]	; 0x800
    6310:	orr	r3, r3, r4
    6314:	ldr	r4, [r0, #3072]	; 0xc00
    6318:	orr	r3, r3, r4
    631c:	orr	r1, r3, r1
    6320:	ldr	r3, [r0, ip]
    6324:	orr	r1, r1, r3
    6328:	ldr	r3, [r0, r6]
    632c:	ldr	r0, [r0, r5]
    6330:	mov	r6, #4032	; 0xfc0
    6334:	orr	r1, r1, r3
    6338:	mov	r3, #258048	; 0x3f000
    633c:	orr	ip, r1, r0
    6340:	ldr	r0, [pc, #916]	; 66dc <rb_crypt+0xe1c>
    6344:	ldr	r1, [pc, #916]	; 66e0 <rb_crypt+0xe20>
    6348:	ldr	sl, [pc, #916]	; 66e4 <rb_crypt+0xe24>
    634c:	ldr	r8, [sp, #16]
    6350:	add	r0, pc, r0
    6354:	add	r1, pc, r1
    6358:	add	sl, pc, sl
    635c:	mov	lr, ip
    6360:	str	r9, [sp, #20]
    6364:	mov	r9, #0
    6368:	mov	ip, r7
    636c:	mov	r2, #4096	; 0x1000
    6370:	and	r5, r3, ip, lsr #11
    6374:	mov	r3, #16515072	; 0xfc0000
    6378:	mov	r7, ip
    637c:	and	r4, r3, ip, ror #9
    6380:	orr	r5, r4, r5
    6384:	and	r4, r6, ip, lsr #13
    6388:	and	r6, ip, #129024	; 0x1f800
    638c:	orr	r5, r5, r4
    6390:	ubfx	r4, ip, #15, #6
    6394:	ldr	r3, [pc, #844]	; 66e8 <rb_crypt+0xe28>
    6398:	orr	r5, r5, r4
    639c:	add	r3, pc, r3
    63a0:	ldr	r4, [r3, r9, lsl #2]
    63a4:	and	r3, ip, #8064	; 0x1f80
    63a8:	lsl	r3, r3, #5
    63ac:	orr	r3, r3, ip, lsr #31
    63b0:	orr	r3, r3, r6, lsl #7
    63b4:	and	r6, ip, #504	; 0x1f8
    63b8:	eor	r4, r5, r4
    63bc:	orr	r3, r3, r6, lsl #3
    63c0:	and	r6, ip, #31
    63c4:	orr	r3, r3, r6, lsl #1
    63c8:	eor	r6, r5, r3
    63cc:	and	r6, r6, r8
    63d0:	eor	r5, r4, r6
    63d4:	ldrb	r4, [r0, r5, lsr #12]
    63d8:	bfc	r5, #12, #20
    63dc:	add	r5, r0, r5
    63e0:	ldrb	r5, [r5, r2]
    63e4:	ldr	r4, [r1, r4, lsl #2]
    63e8:	add	r5, r1, r5, lsl #2
    63ec:	ldr	r5, [r5, #1024]	; 0x400
    63f0:	orr	r5, r5, r4
    63f4:	ldr	r4, [sl, r9, lsl #2]
    63f8:	add	r9, r9, #1
    63fc:	cmp	r9, #16
    6400:	eor	r3, r3, r4
    6404:	mov	r4, #8192	; 0x2000
    6408:	eor	r3, r3, r6
    640c:	add	r6, r0, r3, lsr #12
    6410:	bfc	r3, #12, #20
    6414:	ldrb	r6, [r6, r4]
    6418:	mov	r4, #12288	; 0x3000
    641c:	add	r3, r0, r3
    6420:	ldrb	r3, [r3, r4]
    6424:	add	r6, r1, r6, lsl #2
    6428:	add	r3, r1, r3, lsl #2
    642c:	ldr	r6, [r6, #2048]	; 0x800
    6430:	ldr	r3, [r3, #3072]	; 0xc00
    6434:	orr	r6, r5, r6
    6438:	orr	r3, r6, r3
    643c:	mov	r6, #4032	; 0xfc0
    6440:	eor	ip, r3, lr
    6444:	mov	r3, #258048	; 0x3f000
    6448:	mov	lr, r7
    644c:	bne	6370 <rb_crypt+0xab0>
    6450:	ldr	r2, [sp, #20]
    6454:	sub	r9, r2, #1
    6458:	cmp	r2, #0
    645c:	bne	635c <rb_crypt+0xa9c>
    6460:	ldr	r0, [pc, #644]	; 66ec <rb_crypt+0xe2c>
    6464:	uxtb	r6, r7
    6468:	mov	r8, #7168	; 0x1c00
    646c:	uxtb	lr, ip
    6470:	add	r0, pc, r0
    6474:	add	r1, r0, r6, lsl #2
    6478:	ldr	r1, [r1, r8]
    647c:	str	r1, [sp, #20]
    6480:	ubfx	r5, r7, #8, #8
    6484:	mov	r1, #6144	; 0x1800
    6488:	add	r3, r0, r5, lsl #2
    648c:	ldr	r1, [r3, r1]
    6490:	str	r1, [sp, #16]
    6494:	ubfx	r4, r7, #16, #8
    6498:	mov	r1, #5120	; 0x1400
    649c:	lsr	r7, r7, #24
    64a0:	add	r3, r0, r4, lsl #2
    64a4:	ldr	r1, [r3, r1]
    64a8:	add	r3, r0, r7, lsl #2
    64ac:	str	r1, [sp, #12]
    64b0:	mov	r1, #4096	; 0x1000
    64b4:	ldr	r1, [r3, r1]
    64b8:	add	r3, r0, lr, lsl #2
    64bc:	str	r1, [sp, #8]
    64c0:	ldr	r1, [r3, #3072]	; 0xc00
    64c4:	str	r1, [sp, #4]
    64c8:	ubfx	r1, ip, #8, #8
    64cc:	add	r3, r0, r1, lsl #2
    64d0:	ldr	r2, [r3, #2048]	; 0x800
    64d4:	mov	r3, #6144	; 0x1800
    64d8:	str	r2, [sp]
    64dc:	ubfx	r2, ip, #16, #8
    64e0:	lsr	ip, ip, #24
    64e4:	ldr	sl, [r0, ip, lsl #2]
    64e8:	add	r0, r0, r2, lsl #2
    64ec:	ldr	r9, [r0, #1024]	; 0x400
    64f0:	ldr	r0, [pc, #504]	; 66f0 <rb_crypt+0xe30>
    64f4:	add	r0, pc, r0
    64f8:	add	r6, r0, r6, lsl #2
    64fc:	add	r5, r0, r5, lsl #2
    6500:	add	r4, r0, r4, lsl #2
    6504:	add	r7, r0, r7, lsl #2
    6508:	add	r1, r0, r1, lsl #2
    650c:	ldr	r8, [r6, r8]
    6510:	ldr	r6, [r5, r3]
    6514:	mov	r3, #5120	; 0x1400
    6518:	ldr	r1, [r1, #2048]	; 0x800
    651c:	ldr	r5, [r4, r3]
    6520:	mov	r3, #4096	; 0x1000
    6524:	ldr	r7, [r7, r3]
    6528:	add	r3, r0, lr, lsl #2
    652c:	ldr	lr, [r3, #3072]	; 0xc00
    6530:	ldr	r3, [r0, ip, lsl #2]
    6534:	add	r0, r0, r2, lsl #2
    6538:	mov	r2, #0
    653c:	ldr	r0, [r0, #1024]	; 0x400
    6540:	ldr	r4, [pc, #428]	; 66f4 <rb_crypt+0xe34>
    6544:	orr	r0, r0, r3
    6548:	add	r4, pc, r4
    654c:	orr	r0, r0, r1
    6550:	strb	r2, [r4, #13]
    6554:	orr	r0, r0, lr
    6558:	orr	r0, r0, r7
    655c:	ldr	r7, [pc, #404]	; 66f8 <rb_crypt+0xe38>
    6560:	ldr	r1, [sp]
    6564:	orr	r0, r0, r5
    6568:	orr	r0, r0, r6
    656c:	orr	r5, r0, r8
    6570:	add	r7, pc, r7
    6574:	ldrb	r0, [r7, r5, lsr #26]
    6578:	strb	r0, [r4, #2]
    657c:	orr	r0, r9, sl
    6580:	orr	r0, r0, r1
    6584:	ldr	r1, [sp, #4]
    6588:	orr	r0, r0, r1
    658c:	ldr	r1, [sp, #8]
    6590:	orr	r0, r0, r1
    6594:	ldr	r1, [sp, #12]
    6598:	orr	r0, r0, r1
    659c:	ldr	r1, [sp, #16]
    65a0:	orr	r0, r0, r1
    65a4:	ldr	r1, [sp, #20]
    65a8:	orr	r0, r0, r1
    65ac:	and	r1, r0, #15
    65b0:	ldrb	r1, [r7, r1, lsl #2]
    65b4:	strb	r1, [r4, #12]
    65b8:	ubfx	r1, r0, #4, #6
    65bc:	ldrb	r1, [r7, r1]
    65c0:	strb	r1, [r4, #11]
    65c4:	ubfx	r1, r0, #10, #6
    65c8:	ldrb	r1, [r7, r1]
    65cc:	strb	r1, [r4, #10]
    65d0:	ubfx	r1, r0, #16, #6
    65d4:	ldrb	r1, [r7, r1]
    65d8:	strb	r1, [r4, #9]
    65dc:	ubfx	r1, r0, #22, #6
    65e0:	lsr	r0, r0, #16
    65e4:	ldrb	r1, [r7, r1]
    65e8:	orr	r0, r0, r5, lsl #16
    65ec:	strb	r1, [r4, #8]
    65f0:	ubfx	r1, r5, #2, #6
    65f4:	ldrb	r1, [r7, r1]
    65f8:	strb	r1, [r4, #6]
    65fc:	ubfx	r1, r5, #8, #6
    6600:	ldrb	r1, [r7, r1]
    6604:	strb	r1, [r4, #5]
    6608:	ubfx	r1, r5, #14, #6
    660c:	ldrb	r1, [r7, r1]
    6610:	strb	r1, [r4, #4]
    6614:	ubfx	r1, r5, #20, #6
    6618:	ldrb	r1, [r7, r1]
    661c:	strb	r1, [r4, #3]
    6620:	ubfx	r0, r0, #12, #6
    6624:	ldrb	r0, [r7, r0]
    6628:	strb	r0, [r4, #7]
    662c:	mov	r0, r4
    6630:	sub	sp, fp, #48	; 0x30
    6634:	vpop	{d8-d9}
    6638:	add	sp, sp, #4
    663c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6640:	.word	0x00034f54
    6644:	.word	0x0000f840
    6648:	.word	0x00034f2c
    664c:	.word	0x0000f3fc
    6650:	.word	0x00034aec
    6654:	.word	0x00034aac
    6658:	.word	0x000349e4
    665c:	.word	0x0000f2d0
    6660:	.word	0x000349c4
    6664:	.word	0x0000f2aa
    6668:	.word	0x00034920
    666c:	.word	0x0003488c
    6670:	.word	0x000348e0
    6674:	.word	0x0000f0ff
    6678:	.word	0x00034c14
    667c:	.word	0x00034c94
    6680:	.word	0x00034c90
    6684:	.word	0x00034c64
    6688:	.word	0x00034c54
    668c:	.word	0x00023b1c
    6690:	.word	0x00023b10
    6694:	.word	0x00023aec
    6698:	.word	0x00023ae4
    669c:	.word	0x00030de0
    66a0:	.word	0x0002fd64
    66a4:	.word	0x00031cf8
    66a8:	.word	0x0000fe48
    66ac:	.word	0x00034c68
    66b0:	.word	0x00032c38
    66b4:	.word	0x00034c34
    66b8:	.word	0x0002329c
    66bc:	.word	0x000232ac
    66c0:	.word	0x00023298
    66c4:	.word	0x00023280
    66c8:	.word	0x00023278
    66cc:	.word	0x00029534
    66d0:	.word	0x00029524
    66d4:	.word	0x000274ec
    66d8:	.word	0x000274dc
    66dc:	.word	0x00023394
    66e0:	.word	0x000334ac
    66e4:	.word	0x000344e8
    66e8:	.word	0x00034464
    66ec:	.word	0x0002d370
    66f0:	.word	0x0002b2ec
    66f4:	.word	0x00022f70
    66f8:	.word	0x0000ebc7

000066fc <rb_des_init>:
    66fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6700:	add	fp, sp, #28
    6704:	sub	sp, sp, #28
    6708:	ldr	r0, [pc, #1204]	; 6bc4 <rb_des_init+0x4c8>
    670c:	add	r0, pc, r0
    6710:	ldrb	r0, [r0]
    6714:	cmp	r0, #0
    6718:	bne	6bbc <rb_des_init+0x4c0>
    671c:	ldr	r1, [pc, #1188]	; 6bc8 <rb_des_init+0x4cc>
    6720:	mov	r0, #0
    6724:	add	r1, pc, r1
    6728:	str	r0, [r1]
    672c:	ldr	r1, [pc, #1176]	; 6bcc <rb_des_init+0x4d0>
    6730:	add	r1, pc, r1
    6734:	str	r0, [r1]
    6738:	ldr	r1, [pc, #1168]	; 6bd0 <rb_des_init+0x4d4>
    673c:	add	r1, pc, r1
    6740:	str	r0, [r1]
    6744:	ldr	r1, [pc, #1160]	; 6bd4 <rb_des_init+0x4d8>
    6748:	add	r1, pc, r1
    674c:	str	r0, [r1]
    6750:	ldr	r1, [pc, #1152]	; 6bd8 <rb_des_init+0x4dc>
    6754:	ldr	r2, [pc, #1152]	; 6bdc <rb_des_init+0x4e0>
    6758:	add	r1, pc, r1
    675c:	add	r2, pc, r2
    6760:	mov	r3, #0
    6764:	mov	r7, #0
    6768:	and	r4, r3, #16
    676c:	and	r5, r7, #32
    6770:	add	r6, r2, r0, lsl #6
    6774:	add	r3, r3, #16
    6778:	orr	r5, r4, r5
    677c:	ubfx	r4, r7, #1, #4
    6780:	orr	r5, r5, r4
    6784:	ldrb	r6, [r6, r5]
    6788:	strb	r6, [r1, r7]
    678c:	add	r7, r7, #1
    6790:	cmp	r7, #64	; 0x40
    6794:	bne	6768 <rb_des_init+0x6c>
    6798:	add	r0, r0, #1
    679c:	add	r1, r1, #64	; 0x40
    67a0:	cmp	r0, #8
    67a4:	bne	6760 <rb_des_init+0x64>
    67a8:	ldr	ip, [pc, #1072]	; 6be0 <rb_des_init+0x4e4>
    67ac:	ldr	r9, [pc, #1072]	; 6be4 <rb_des_init+0x4e8>
    67b0:	mov	r2, #0
    67b4:	add	ip, pc, ip
    67b8:	add	r9, pc, r9
    67bc:	add	r1, ip, #64	; 0x40
    67c0:	lsl	lr, r2, #1
    67c4:	mov	r8, #0
    67c8:	add	r0, ip, lr, lsl #6
    67cc:	lsl	r4, r8, #6
    67d0:	ldrb	r0, [r0, r8]
    67d4:	lsl	r5, r0, #4
    67d8:	mov	r0, #0
    67dc:	ldrb	r3, [r1, r0]
    67e0:	orr	r7, r0, r4
    67e4:	add	r0, r0, #1
    67e8:	add	r6, r9, r2, lsl #12
    67ec:	cmp	r0, #64	; 0x40
    67f0:	orr	r3, r5, r3
    67f4:	strb	r3, [r6, r7]
    67f8:	bne	67dc <rb_des_init+0xe0>
    67fc:	add	r8, r8, #1
    6800:	cmp	r8, #64	; 0x40
    6804:	bne	67c8 <rb_des_init+0xcc>
    6808:	add	r2, r2, #1
    680c:	add	r1, r1, #128	; 0x80
    6810:	cmp	r2, #4
    6814:	bne	67c0 <rb_des_init+0xc4>
    6818:	ldr	r8, [pc, #968]	; 6be8 <rb_des_init+0x4ec>
    681c:	mov	r1, #255	; 0xff
    6820:	mov	r2, #64	; 0x40
    6824:	add	r8, pc, r8
    6828:	mov	r0, r8
    682c:	bl	4f3c <memset@plt>
    6830:	ldr	r1, [pc, #948]	; 6bec <rb_des_init+0x4f0>
    6834:	ldr	r4, [pc, #948]	; 6bf0 <rb_des_init+0x4f4>
    6838:	ldr	r5, [pc, #948]	; 6bf4 <rb_des_init+0x4f8>
    683c:	mov	r0, #0
    6840:	add	r1, pc, r1
    6844:	add	r4, pc, r4
    6848:	add	r5, pc, r5
    684c:	ldrb	r2, [r1, r0]
    6850:	sub	r2, r2, #1
    6854:	strb	r2, [r4, r0]
    6858:	uxtb	r2, r2
    685c:	strb	r0, [r5, r2]
    6860:	add	r0, r0, #1
    6864:	cmp	r0, #64	; 0x40
    6868:	bne	684c <rb_des_init+0x150>
    686c:	ldr	r9, [pc, #900]	; 6bf8 <rb_des_init+0x4fc>
    6870:	mov	r1, #255	; 0xff
    6874:	mov	r2, #56	; 0x38
    6878:	add	r9, pc, r9
    687c:	mov	r0, r9
    6880:	bl	4f3c <memset@plt>
    6884:	ldr	r1, [pc, #880]	; 6bfc <rb_des_init+0x500>
    6888:	mov	r0, #0
    688c:	add	r1, pc, r1
    6890:	ldrb	r2, [r1, r0]
    6894:	add	r2, r2, r8
    6898:	strb	r0, [r2, #-1]
    689c:	add	r0, r0, #1
    68a0:	cmp	r0, #56	; 0x38
    68a4:	bne	6890 <rb_des_init+0x194>
    68a8:	ldr	r1, [pc, #848]	; 6c00 <rb_des_init+0x504>
    68ac:	mov	r0, #0
    68b0:	add	r1, pc, r1
    68b4:	ldrb	r2, [r1, r0]
    68b8:	add	r2, r2, r9
    68bc:	strb	r0, [r2, #-1]
    68c0:	add	r0, r0, #1
    68c4:	cmp	r0, #48	; 0x30
    68c8:	bne	68b4 <rb_des_init+0x1b8>
    68cc:	ldr	r0, [pc, #816]	; 6c04 <rb_des_init+0x508>
    68d0:	ldr	r1, [pc, #816]	; 6c08 <rb_des_init+0x50c>
    68d4:	mov	lr, #0
    68d8:	add	r0, pc, r0
    68dc:	add	r1, pc, r1
    68e0:	mov	r3, #0
    68e4:	str	r9, [sp, #4]
    68e8:	str	r5, [sp, #20]
    68ec:	str	r4, [sp, #24]
    68f0:	str	r8, [sp, #8]
    68f4:	str	lr, [sp, #12]
    68f8:	ldr	r2, [pc, #780]	; 6c0c <rb_des_init+0x510>
    68fc:	mov	r4, #0
    6900:	mov	ip, #0
    6904:	mov	r9, #0
    6908:	add	r2, pc, r2
    690c:	add	r2, r2, lr, lsl #10
    6910:	str	r4, [r2, r3, lsl #2]!
    6914:	str	r2, [sp, #16]
    6918:	ldr	r2, [pc, #752]	; 6c10 <rb_des_init+0x514>
    691c:	add	r2, pc, r2
    6920:	add	sl, r2, lr, lsl #10
    6924:	str	r4, [sl, r3, lsl #2]!
    6928:	ldr	r2, [pc, #740]	; 6c14 <rb_des_init+0x518>
    692c:	add	r2, pc, r2
    6930:	add	r6, r2, lr, lsl #10
    6934:	str	r4, [r6, r3, lsl #2]!
    6938:	ldr	r2, [pc, #728]	; 6c18 <rb_des_init+0x51c>
    693c:	add	r2, pc, r2
    6940:	add	r5, r2, lr, lsl #10
    6944:	mov	r2, #0
    6948:	mov	lr, #0
    694c:	str	r4, [r5, r3, lsl #2]!
    6950:	ldrb	r7, [r0, r9]
    6954:	tst	r3, r7
    6958:	beq	69c0 <rb_des_init+0x2c4>
    695c:	ldr	r7, [sp, #20]
    6960:	ldrb	r8, [r7, r9]
    6964:	cmp	r8, #31
    6968:	bhi	6980 <rb_des_init+0x284>
    696c:	ldr	r7, [r1, r8, lsl #2]
    6970:	orr	lr, lr, r7
    6974:	ldr	r7, [sp, #16]
    6978:	str	lr, [r7]
    697c:	b	6990 <rb_des_init+0x294>
    6980:	add	r7, r1, r8, lsl #2
    6984:	ldr	r7, [r7, #-128]	; 0xffffff80
    6988:	orr	ip, ip, r7
    698c:	str	ip, [sl]
    6990:	ldr	r7, [sp, #24]
    6994:	ldrb	r7, [r7, r9]
    6998:	cmp	r7, #31
    699c:	bhi	69b0 <rb_des_init+0x2b4>
    69a0:	ldr	r7, [r1, r7, lsl #2]
    69a4:	orr	r4, r4, r7
    69a8:	str	r4, [r6]
    69ac:	b	69c0 <rb_des_init+0x2c4>
    69b0:	add	r7, r1, r7, lsl #2
    69b4:	ldr	r7, [r7, #-128]	; 0xffffff80
    69b8:	orr	r2, r2, r7
    69bc:	str	r2, [r5]
    69c0:	add	r9, r9, #1
    69c4:	cmp	r9, #8
    69c8:	bne	6950 <rb_des_init+0x254>
    69cc:	ldr	lr, [sp, #12]
    69d0:	add	r3, r3, #1
    69d4:	cmp	r3, #256	; 0x100
    69d8:	bne	68f8 <rb_des_init+0x1fc>
    69dc:	ldr	r8, [sp, #8]
    69e0:	ldr	r9, [sp, #4]
    69e4:	mov	ip, #0
    69e8:	mov	sl, #0
    69ec:	ldr	r2, [pc, #552]	; 6c1c <rb_des_init+0x520>
    69f0:	mov	r6, #0
    69f4:	mov	r5, #0
    69f8:	mov	r4, #0
    69fc:	add	r2, pc, r2
    6a00:	add	r3, r2, lr, lsl #9
    6a04:	str	ip, [r3, sl, lsl #2]!
    6a08:	ldr	r2, [pc, #528]	; 6c20 <rb_des_init+0x524>
    6a0c:	add	r2, pc, r2
    6a10:	add	r7, r2, lr, lsl #9
    6a14:	str	ip, [r7, sl, lsl #2]!
    6a18:	sub	r2, r0, r6
    6a1c:	ldrb	r2, [r2, #1]
    6a20:	tst	sl, r2
    6a24:	beq	6a60 <rb_des_init+0x364>
    6a28:	ldrb	r2, [r8, -r6]
    6a2c:	cmp	r2, #255	; 0xff
    6a30:	beq	6a60 <rb_des_init+0x364>
    6a34:	cmp	r2, #27
    6a38:	bhi	6a50 <rb_des_init+0x354>
    6a3c:	add	r2, r1, r2, lsl #2
    6a40:	ldr	r2, [r2, #16]
    6a44:	orr	r5, r5, r2
    6a48:	str	r5, [r3]
    6a4c:	b	6a60 <rb_des_init+0x364>
    6a50:	add	r2, r1, r2, lsl #2
    6a54:	ldr	r2, [r2, #-96]	; 0xffffffa0
    6a58:	orr	r4, r4, r2
    6a5c:	str	r4, [r7]
    6a60:	sub	r6, r6, #1
    6a64:	cmn	r6, #7
    6a68:	bne	6a18 <rb_des_init+0x31c>
    6a6c:	ldr	r2, [pc, #432]	; 6c24 <rb_des_init+0x528>
    6a70:	mov	r7, #0
    6a74:	mov	r5, #0
    6a78:	mov	r4, #0
    6a7c:	add	r2, pc, r2
    6a80:	add	r3, r2, lr, lsl #9
    6a84:	str	r7, [r3, sl, lsl #2]!
    6a88:	ldr	r2, [pc, #408]	; 6c28 <rb_des_init+0x52c>
    6a8c:	add	r2, pc, r2
    6a90:	add	r6, r2, lr, lsl #9
    6a94:	str	r7, [r6, sl, lsl #2]!
    6a98:	sub	r2, r0, r7
    6a9c:	ldrb	r2, [r2, #1]
    6aa0:	tst	sl, r2
    6aa4:	beq	6ae0 <rb_des_init+0x3e4>
    6aa8:	ldrb	r2, [r9, -r7]
    6aac:	cmp	r2, #255	; 0xff
    6ab0:	beq	6ae0 <rb_des_init+0x3e4>
    6ab4:	cmp	r2, #23
    6ab8:	bhi	6ad0 <rb_des_init+0x3d4>
    6abc:	add	r2, r1, r2, lsl #2
    6ac0:	ldr	r2, [r2, #32]
    6ac4:	orr	r5, r5, r2
    6ac8:	str	r5, [r3]
    6acc:	b	6ae0 <rb_des_init+0x3e4>
    6ad0:	add	r2, r1, r2, lsl #2
    6ad4:	ldr	r2, [r2, #-64]	; 0xffffffc0
    6ad8:	orr	r4, r4, r2
    6adc:	str	r4, [r6]
    6ae0:	sub	r7, r7, #1
    6ae4:	cmn	r7, #7
    6ae8:	bne	6a98 <rb_des_init+0x39c>
    6aec:	add	sl, sl, #1
    6af0:	cmp	sl, #128	; 0x80
    6af4:	bne	69ec <rb_des_init+0x2f0>
    6af8:	ldr	r5, [sp, #20]
    6afc:	ldr	r4, [sp, #24]
    6b00:	add	lr, lr, #1
    6b04:	add	r9, r9, #7
    6b08:	add	r8, r8, #8
    6b0c:	cmp	lr, #8
    6b10:	add	r5, r5, #8
    6b14:	add	r4, r4, #8
    6b18:	bne	68e0 <rb_des_init+0x1e4>
    6b1c:	ldr	r7, [pc, #264]	; 6c2c <rb_des_init+0x530>
    6b20:	ldr	r2, [pc, #264]	; 6c30 <rb_des_init+0x534>
    6b24:	mov	r3, #0
    6b28:	add	r7, pc, r7
    6b2c:	add	r2, pc, r2
    6b30:	ldrb	r6, [r7, r3]
    6b34:	add	r6, r6, r2
    6b38:	strb	r3, [r6, #-1]
    6b3c:	add	r3, r3, #1
    6b40:	cmp	r3, #32
    6b44:	bne	6b30 <rb_des_init+0x434>
    6b48:	ldr	ip, [pc, #228]	; 6c34 <rb_des_init+0x538>
    6b4c:	mov	lr, #0
    6b50:	add	ip, pc, ip
    6b54:	mov	r6, #0
    6b58:	add	r5, ip, lr, lsl #10
    6b5c:	mov	r4, #0
    6b60:	mov	r7, #0
    6b64:	str	r4, [r5, r6, lsl #2]!
    6b68:	ldrb	r3, [r0, r7]
    6b6c:	tst	r6, r3
    6b70:	beq	6b84 <rb_des_init+0x488>
    6b74:	ldrb	r3, [r2, r7]
    6b78:	ldr	r3, [r1, r3, lsl #2]
    6b7c:	orr	r4, r4, r3
    6b80:	str	r4, [r5]
    6b84:	add	r7, r7, #1
    6b88:	cmp	r7, #8
    6b8c:	bne	6b68 <rb_des_init+0x46c>
    6b90:	add	r6, r6, #1
    6b94:	cmp	r6, #256	; 0x100
    6b98:	bne	6b58 <rb_des_init+0x45c>
    6b9c:	add	lr, lr, #1
    6ba0:	add	r2, r2, #8
    6ba4:	cmp	lr, #4
    6ba8:	bne	6b54 <rb_des_init+0x458>
    6bac:	ldr	r1, [pc, #132]	; 6c38 <rb_des_init+0x53c>
    6bb0:	mov	r0, #1
    6bb4:	add	r1, pc, r1
    6bb8:	strb	r0, [r1]
    6bbc:	sub	sp, fp, #28
    6bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6bc4:	.word	0x00022dc4
    6bc8:	.word	0x00022db4
    6bcc:	.word	0x00022da4
    6bd0:	.word	0x00022da0
    6bd4:	.word	0x00022d98
    6bd8:	.word	0x00022d8c
    6bdc:	.word	0x0000eaac
    6be0:	.word	0x00022d30
    6be4:	.word	0x00022f2c
    6be8:	.word	0x00026f44
    6bec:	.word	0x0000ebc8
    6bf0:	.word	0x00026ee0
    6bf4:	.word	0x00026e9c
    6bf8:	.word	0x00026f30
    6bfc:	.word	0x0000ebbc
    6c00:	.word	0x0000ebd0
    6c04:	.word	0x0000f038
    6c08:	.word	0x0000e8ac
    6c0c:	.word	0x00026ed8
    6c10:	.word	0x00028ec4
    6c14:	.word	0x0002aeb4
    6c18:	.word	0x0002cea4
    6c1c:	.word	0x0002ede4
    6c20:	.word	0x0002fdd4
    6c24:	.word	0x00030d64
    6c28:	.word	0x00031d54
    6c2c:	.word	0x0000edf0
    6c30:	.word	0x00032cb4
    6c34:	.word	0x00032cb0
    6c38:	.word	0x0002291c

00006c3c <MD5Update>:
    6c3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    6c40:	add	fp, sp, #24
    6c44:	mov	r6, r1
    6c48:	ldr	r1, [r0, #16]
    6c4c:	mov	r5, r0
    6c50:	ldr	r0, [r0, #20]
    6c54:	mov	r4, r2
    6c58:	add	r2, r1, r2, lsl #3
    6c5c:	cmp	r2, r1
    6c60:	str	r2, [r5, #16]
    6c64:	ubfx	r9, r1, #3, #6
    6c68:	addcc	r0, r0, #1
    6c6c:	rsb	r7, r9, #64	; 0x40
    6c70:	strcc	r0, [r5, #20]
    6c74:	add	r0, r0, r4, lsr #29
    6c78:	cmp	r7, r4
    6c7c:	str	r0, [r5, #20]
    6c80:	bls	6c8c <MD5Update+0x50>
    6c84:	mov	r7, #0
    6c88:	b	6ce0 <MD5Update+0xa4>
    6c8c:	add	r8, r5, #24
    6c90:	mov	r1, r6
    6c94:	mov	r2, r7
    6c98:	add	r0, r8, r9
    6c9c:	bl	5104 <memcpy@plt>
    6ca0:	mov	r0, r5
    6ca4:	mov	r1, r8
    6ca8:	bl	6d70 <MD5Transform>
    6cac:	eor	r0, r9, #127	; 0x7f
    6cb0:	mov	r9, #0
    6cb4:	cmp	r0, r4
    6cb8:	bcs	6ce0 <MD5Update+0xa4>
    6cbc:	add	r1, r6, r7
    6cc0:	mov	r0, r5
    6cc4:	bl	6d70 <MD5Transform>
    6cc8:	add	r1, r7, #127	; 0x7f
    6ccc:	add	r0, r7, #64	; 0x40
    6cd0:	cmp	r1, r4
    6cd4:	mov	r7, r0
    6cd8:	bcc	6cbc <MD5Update+0x80>
    6cdc:	mov	r7, r0
    6ce0:	add	r0, r5, r9
    6ce4:	add	r1, r6, r7
    6ce8:	sub	r2, r4, r7
    6cec:	add	r0, r0, #24
    6cf0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    6cf4:	b	5104 <memcpy@plt>

00006cf8 <MD5Final>:
    6cf8:	push	{r4, r5, fp, lr}
    6cfc:	add	fp, sp, #8
    6d00:	sub	sp, sp, #8
    6d04:	mov	r5, r0
    6d08:	ldr	r0, [r1, #16]
    6d0c:	mov	r4, r1
    6d10:	ldr	r1, [r1, #20]
    6d14:	stm	sp, {r0, r1}
    6d18:	ubfx	r0, r0, #3, #6
    6d1c:	mov	r1, #120	; 0x78
    6d20:	cmp	r0, #56	; 0x38
    6d24:	movwcc	r1, #56	; 0x38
    6d28:	sub	r2, r1, r0
    6d2c:	ldr	r1, [pc, #56]	; 6d6c <MD5Final+0x74>
    6d30:	mov	r0, r4
    6d34:	add	r1, pc, r1
    6d38:	bl	6c3c <MD5Update>
    6d3c:	mov	r1, sp
    6d40:	mov	r0, r4
    6d44:	mov	r2, #8
    6d48:	bl	6c3c <MD5Update>
    6d4c:	vld1.8	{d16-d17}, [r4]
    6d50:	mov	r0, r4
    6d54:	mov	r1, #0
    6d58:	mov	r2, #88	; 0x58
    6d5c:	vst1.8	{d16-d17}, [r5]
    6d60:	sub	sp, fp, #8
    6d64:	pop	{r4, r5, fp, lr}
    6d68:	b	4f3c <memset@plt>
    6d6c:	.word	0x000216d4

00006d70 <MD5Transform>:
    6d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d74:	add	fp, sp, #28
    6d78:	sub	sp, sp, #84	; 0x54
    6d7c:	mov	ip, r1
    6d80:	ldr	r4, [r0, #4]
    6d84:	ldr	r2, [r0, #12]
    6d88:	ldr	r1, [r0, #8]
    6d8c:	ldr	r5, [r0]
    6d90:	str	r0, [sp, #16]
    6d94:	ldr	r9, [ip, #4]
    6d98:	ldr	lr, [ip, #8]
    6d9c:	ldr	r8, [ip, #12]
    6da0:	and	r0, r1, r4
    6da4:	bic	r3, r2, r4
    6da8:	str	r5, [sp, #24]
    6dac:	str	r1, [sp, #32]
    6db0:	str	r4, [sp, #20]
    6db4:	str	r2, [sp, #28]
    6db8:	orr	r0, r3, r0
    6dbc:	ldr	r3, [ip]
    6dc0:	str	r8, [fp, #-44]	; 0xffffffd4
    6dc4:	str	lr, [fp, #-52]	; 0xffffffcc
    6dc8:	str	r9, [fp, #-48]	; 0xffffffd0
    6dcc:	str	r3, [fp, #-36]	; 0xffffffdc
    6dd0:	add	r3, r5, r3
    6dd4:	add	r0, r3, r0
    6dd8:	movw	r3, #42104	; 0xa478
    6ddc:	movt	r3, #55146	; 0xd76a
    6de0:	add	r0, r0, r3
    6de4:	add	r0, r4, r0, ror #25
    6de8:	bic	r3, r1, r0
    6dec:	and	r7, r0, r4
    6df0:	orr	r3, r7, r3
    6df4:	add	r7, r2, r9
    6df8:	add	r3, r7, r3
    6dfc:	movw	r7, #46934	; 0xb756
    6e00:	movt	r7, #59591	; 0xe8c7
    6e04:	add	r3, r3, r7
    6e08:	add	r3, r0, r3, ror #20
    6e0c:	bic	r7, r4, r3
    6e10:	and	r6, r3, r0
    6e14:	orr	r7, r6, r7
    6e18:	add	r6, r1, lr
    6e1c:	ldr	r1, [ip, #16]
    6e20:	ldr	lr, [ip, #44]	; 0x2c
    6e24:	add	r7, r6, r7
    6e28:	movw	r6, #28891	; 0x70db
    6e2c:	movt	r6, #9248	; 0x2420
    6e30:	add	r7, r7, r6
    6e34:	str	r1, [sp, #48]	; 0x30
    6e38:	str	lr, [fp, #-40]	; 0xffffffd8
    6e3c:	add	r7, r3, r7, ror #15
    6e40:	bic	r6, r0, r7
    6e44:	and	r5, r7, r3
    6e48:	add	r0, r1, r0
    6e4c:	ldr	r1, [ip, #20]
    6e50:	orr	r6, r5, r6
    6e54:	add	r5, r4, r8
    6e58:	ldr	r8, [ip, #24]
    6e5c:	add	r6, r5, r6
    6e60:	movw	r5, #52974	; 0xceee
    6e64:	movt	r5, #49597	; 0xc1bd
    6e68:	str	r1, [sp, #36]	; 0x24
    6e6c:	add	r6, r6, r5
    6e70:	str	r8, [sp, #12]
    6e74:	add	r4, r7, r6, ror #10
    6e78:	bic	r6, r3, r4
    6e7c:	and	r5, r4, r7
    6e80:	add	r3, r1, r3
    6e84:	ldr	r1, [ip, #28]
    6e88:	orr	r6, r5, r6
    6e8c:	add	r0, r0, r6
    6e90:	movw	r6, #4015	; 0xfaf
    6e94:	movt	r6, #62844	; 0xf57c
    6e98:	str	r1, [sp, #52]	; 0x34
    6e9c:	add	r0, r0, r6
    6ea0:	add	r0, r4, r0, ror #25
    6ea4:	bic	r6, r7, r0
    6ea8:	and	r5, r0, r4
    6eac:	add	r7, r8, r7
    6eb0:	orr	r5, r5, r6
    6eb4:	add	r3, r3, r5
    6eb8:	movw	r5, #50730	; 0xc62a
    6ebc:	movt	r5, #18311	; 0x4787
    6ec0:	add	r3, r3, r5
    6ec4:	add	r3, r0, r3, ror #20
    6ec8:	bic	r5, r4, r3
    6ecc:	and	r6, r3, r0
    6ed0:	add	r4, r1, r4
    6ed4:	ldr	r1, [ip, #32]
    6ed8:	orr	r5, r6, r5
    6edc:	add	r7, r7, r5
    6ee0:	movw	r5, #17939	; 0x4613
    6ee4:	movt	r5, #43056	; 0xa830
    6ee8:	str	r1, [sp, #44]	; 0x2c
    6eec:	add	r7, r7, r5
    6ef0:	add	r5, r3, r7, ror #15
    6ef4:	bic	r7, r0, r5
    6ef8:	and	r6, r5, r3
    6efc:	add	r0, r1, r0
    6f00:	ldr	r1, [ip, #36]	; 0x24
    6f04:	orr	r6, r6, r7
    6f08:	add	r4, r4, r6
    6f0c:	movw	r6, #38145	; 0x9501
    6f10:	movt	r6, #64838	; 0xfd46
    6f14:	str	r1, [fp, #-32]	; 0xffffffe0
    6f18:	add	r4, r4, r6
    6f1c:	add	r6, r5, r4, ror #10
    6f20:	bic	r4, r3, r6
    6f24:	and	r7, r6, r5
    6f28:	add	r3, r1, r3
    6f2c:	ldr	r1, [ip, #40]	; 0x28
    6f30:	orr	r4, r7, r4
    6f34:	add	r0, r0, r4
    6f38:	movw	r4, #39128	; 0x98d8
    6f3c:	movt	r4, #27008	; 0x6980
    6f40:	str	r1, [sp, #56]	; 0x38
    6f44:	add	r0, r0, r4
    6f48:	add	r0, r6, r0, ror #25
    6f4c:	bic	r4, r5, r0
    6f50:	and	r7, r0, r6
    6f54:	add	r5, r1, r5
    6f58:	orr	r4, r7, r4
    6f5c:	add	r3, r3, r4
    6f60:	movw	r4, #63407	; 0xf7af
    6f64:	movt	r4, #35652	; 0x8b44
    6f68:	add	r3, r3, r4
    6f6c:	add	r3, r0, r3, ror #20
    6f70:	bic	r4, r6, r3
    6f74:	and	r7, r3, r0
    6f78:	add	r6, lr, r6
    6f7c:	orr	r7, r7, r4
    6f80:	ldr	r4, [ip, #48]	; 0x30
    6f84:	add	r5, r5, r7
    6f88:	movw	r7, #42063	; 0xa44f
    6f8c:	sub	r5, r5, r7
    6f90:	add	r1, r3, r5, ror #15
    6f94:	str	r4, [sp, #4]
    6f98:	bic	r5, r0, r1
    6f9c:	and	r7, r1, r3
    6fa0:	add	r0, r4, r0
    6fa4:	ldr	r4, [ip, #52]	; 0x34
    6fa8:	orr	r5, r7, r5
    6fac:	add	r5, r6, r5
    6fb0:	movw	r6, #55230	; 0xd7be
    6fb4:	movt	r6, #35164	; 0x895c
    6fb8:	str	r4, [sp, #40]	; 0x28
    6fbc:	add	r5, r5, r6
    6fc0:	add	r2, r1, r5, ror #10
    6fc4:	bic	r5, r3, r2
    6fc8:	and	r6, r2, r1
    6fcc:	add	r3, r4, r3
    6fd0:	ldr	r4, [ip, #56]	; 0x38
    6fd4:	orr	r5, r6, r5
    6fd8:	add	r0, r0, r5
    6fdc:	movw	r5, #4386	; 0x1122
    6fe0:	movt	r5, #27536	; 0x6b90
    6fe4:	add	r0, r0, r5
    6fe8:	add	r0, r2, r0, ror #25
    6fec:	bic	r5, r1, r0
    6ff0:	and	r7, r0, r2
    6ff4:	add	r1, r4, r1
    6ff8:	orr	r7, r7, r5
    6ffc:	add	r3, r3, r7
    7000:	movw	r7, #29075	; 0x7193
    7004:	movt	r7, #64920	; 0xfd98
    7008:	add	r3, r3, r7
    700c:	add	r7, r0, r3, ror #20
    7010:	bic	r3, r2, r7
    7014:	and	sl, r7, r0
    7018:	orr	r3, sl, r3
    701c:	mov	sl, r4
    7020:	add	r1, r1, r3
    7024:	movw	r3, #17294	; 0x438e
    7028:	str	sl, [sp]
    702c:	movt	r3, #42617	; 0xa679
    7030:	add	r1, r1, r3
    7034:	add	r3, r7, r1, ror #15
    7038:	bic	r1, r0, r3
    703c:	and	r5, r3, r7
    7040:	bic	r4, r3, r7
    7044:	add	r0, r9, r0
    7048:	ldr	r9, [sp, #36]	; 0x24
    704c:	orr	r5, r5, r1
    7050:	ldr	r1, [ip, #60]	; 0x3c
    7054:	ldr	ip, [sp, #48]	; 0x30
    7058:	add	r2, r1, r2
    705c:	mov	r6, r1
    7060:	str	r1, [sp, #8]
    7064:	ldr	r1, [fp, #-36]	; 0xffffffdc
    7068:	add	r2, r2, r5
    706c:	movw	r5, #2081	; 0x821
    7070:	movt	r5, #18868	; 0x49b4
    7074:	add	r2, r2, r5
    7078:	add	r2, r3, r2, ror #10
    707c:	and	r5, r2, r7
    7080:	add	r7, r8, r7
    7084:	ldr	r8, [sp, #44]	; 0x2c
    7088:	orr	r5, r5, r4
    708c:	bic	r4, r2, r3
    7090:	add	r0, r0, r5
    7094:	movw	r5, #9570	; 0x2562
    7098:	movt	r5, #63006	; 0xf61e
    709c:	add	r0, r0, r5
    70a0:	add	r0, r2, r0, ror #27
    70a4:	and	r5, r0, r3
    70a8:	add	r3, lr, r3
    70ac:	mov	lr, sl
    70b0:	orr	r5, r5, r4
    70b4:	bic	r4, r0, r2
    70b8:	add	r7, r7, r5
    70bc:	movw	r5, #45888	; 0xb340
    70c0:	movt	r5, #49216	; 0xc040
    70c4:	add	r7, r7, r5
    70c8:	add	r7, r0, r7, ror #23
    70cc:	and	r5, r7, r2
    70d0:	add	r2, r1, r2
    70d4:	ldr	r1, [sp, #56]	; 0x38
    70d8:	orr	r5, r5, r4
    70dc:	bic	r4, r7, r0
    70e0:	add	r3, r3, r5
    70e4:	movw	r5, #23121	; 0x5a51
    70e8:	movt	r5, #9822	; 0x265e
    70ec:	add	r3, r3, r5
    70f0:	add	r3, r7, r3, ror #18
    70f4:	and	r5, r3, r0
    70f8:	add	r0, r9, r0
    70fc:	orr	r5, r5, r4
    7100:	bic	r4, r3, r7
    7104:	add	r2, r2, r5
    7108:	movw	r5, #51114	; 0xc7aa
    710c:	movt	r5, #59830	; 0xe9b6
    7110:	add	r2, r2, r5
    7114:	add	r2, r3, r2, ror #12
    7118:	and	r5, r2, r7
    711c:	add	r7, r1, r7
    7120:	ldr	r1, [fp, #-32]	; 0xffffffe0
    7124:	orr	r5, r5, r4
    7128:	bic	r4, r2, r3
    712c:	add	r0, r0, r5
    7130:	movw	r5, #4189	; 0x105d
    7134:	movt	r5, #54831	; 0xd62f
    7138:	add	r0, r0, r5
    713c:	add	r0, r2, r0, ror #27
    7140:	and	r5, r0, r3
    7144:	add	r3, r6, r3
    7148:	ldr	r6, [sp, #4]
    714c:	orr	r5, r5, r4
    7150:	bic	r4, r0, r2
    7154:	add	r7, r7, r5
    7158:	movw	r5, #5203	; 0x1453
    715c:	movt	r5, #580	; 0x244
    7160:	add	r7, r7, r5
    7164:	add	r7, r0, r7, ror #23
    7168:	and	r5, r7, r2
    716c:	add	r2, ip, r2
    7170:	orr	r5, r5, r4
    7174:	bic	r4, r7, r0
    7178:	add	r3, r3, r5
    717c:	movw	r5, #59009	; 0xe681
    7180:	movt	r5, #55457	; 0xd8a1
    7184:	add	r3, r3, r5
    7188:	add	r3, r7, r3, ror #18
    718c:	and	r5, r3, r0
    7190:	add	r0, r1, r0
    7194:	ldr	r1, [fp, #-44]	; 0xffffffd4
    7198:	orr	r5, r5, r4
    719c:	bic	r4, r3, r7
    71a0:	add	r2, r2, r5
    71a4:	movw	r5, #64456	; 0xfbc8
    71a8:	movt	r5, #59347	; 0xe7d3
    71ac:	add	r2, r2, r5
    71b0:	add	r2, r3, r2, ror #12
    71b4:	and	r5, r2, r7
    71b8:	add	r7, sl, r7
    71bc:	ldr	sl, [sp, #40]	; 0x28
    71c0:	orr	r5, r5, r4
    71c4:	bic	r4, r2, r3
    71c8:	add	r0, r0, r5
    71cc:	movw	r5, #52710	; 0xcde6
    71d0:	movt	r5, #8673	; 0x21e1
    71d4:	add	r0, r0, r5
    71d8:	add	r0, r2, r0, ror #27
    71dc:	and	r5, r0, r3
    71e0:	add	r3, r1, r3
    71e4:	ldr	r1, [fp, #-52]	; 0xffffffcc
    71e8:	orr	r5, r5, r4
    71ec:	bic	r4, r0, r2
    71f0:	add	r7, r7, r5
    71f4:	movw	r5, #2006	; 0x7d6
    71f8:	movt	r5, #49975	; 0xc337
    71fc:	add	r7, r7, r5
    7200:	add	r7, r0, r7, ror #23
    7204:	and	r5, r7, r2
    7208:	add	r2, r8, r2
    720c:	orr	r5, r5, r4
    7210:	bic	r4, r7, r0
    7214:	add	r3, r3, r5
    7218:	movw	r5, #3463	; 0xd87
    721c:	movt	r5, #62677	; 0xf4d5
    7220:	add	r3, r3, r5
    7224:	add	r3, r7, r3, ror #18
    7228:	and	r5, r3, r0
    722c:	add	r0, sl, r0
    7230:	orr	r5, r5, r4
    7234:	bic	r4, r3, r7
    7238:	add	r2, r2, r5
    723c:	movw	r5, #5357	; 0x14ed
    7240:	movt	r5, #17754	; 0x455a
    7244:	add	r2, r2, r5
    7248:	add	r2, r3, r2, ror #12
    724c:	and	r5, r2, r7
    7250:	add	r7, r1, r7
    7254:	ldr	r1, [sp, #52]	; 0x34
    7258:	orr	r5, r5, r4
    725c:	bic	r4, r2, r3
    7260:	add	r0, r0, r5
    7264:	movw	r5, #59653	; 0xe905
    7268:	movt	r5, #43491	; 0xa9e3
    726c:	add	r0, r0, r5
    7270:	add	r0, r2, r0, ror #27
    7274:	and	r5, r0, r3
    7278:	add	r3, r1, r3
    727c:	orr	r5, r5, r4
    7280:	bic	r4, r0, r2
    7284:	add	r7, r7, r5
    7288:	movw	r5, #41976	; 0xa3f8
    728c:	movt	r5, #64751	; 0xfcef
    7290:	add	r7, r7, r5
    7294:	add	r7, r0, r7, ror #23
    7298:	and	r5, r7, r2
    729c:	add	r2, r6, r2
    72a0:	orr	r5, r5, r4
    72a4:	bic	r4, r7, r0
    72a8:	add	r3, r3, r5
    72ac:	movw	r5, #729	; 0x2d9
    72b0:	movt	r5, #26479	; 0x676f
    72b4:	add	r3, r3, r5
    72b8:	add	r3, r7, r3, ror #18
    72bc:	and	r5, r3, r0
    72c0:	add	r0, r9, r0
    72c4:	ldr	r9, [sp, #12]
    72c8:	orr	r5, r5, r4
    72cc:	add	r2, r2, r5
    72d0:	movw	r5, #19594	; 0x4c8a
    72d4:	movt	r5, #36138	; 0x8d2a
    72d8:	add	r2, r2, r5
    72dc:	add	r2, r3, r2, ror #12
    72e0:	eor	r5, r2, r3
    72e4:	eor	r4, r5, r7
    72e8:	add	r7, r8, r7
    72ec:	ldr	r8, [sp, #56]	; 0x38
    72f0:	add	r0, r0, r4
    72f4:	movw	r4, #14658	; 0x3942
    72f8:	movt	r4, #65530	; 0xfffa
    72fc:	add	r0, r0, r4
    7300:	ldr	r4, [fp, #-40]	; 0xffffffd8
    7304:	add	r0, r2, r0, ror #28
    7308:	eor	r5, r5, r0
    730c:	add	r7, r7, r5
    7310:	movw	r5, #63105	; 0xf681
    7314:	add	r3, r4, r3
    7318:	ldr	r4, [fp, #-48]	; 0xffffffd0
    731c:	movt	r5, #34673	; 0x8771
    7320:	add	r7, r7, r5
    7324:	eor	r5, r0, r2
    7328:	add	r2, lr, r2
    732c:	ldr	lr, [sp, #8]
    7330:	add	r7, r0, r7, ror #21
    7334:	eor	r5, r5, r7
    7338:	add	r3, r3, r5
    733c:	movw	r5, #24866	; 0x6122
    7340:	movt	r5, #28061	; 0x6d9d
    7344:	add	r3, r3, r5
    7348:	eor	r5, r7, r0
    734c:	add	r0, r4, r0
    7350:	ldr	r4, [fp, #-36]	; 0xffffffdc
    7354:	add	r3, r7, r3, ror #16
    7358:	eor	r5, r5, r3
    735c:	add	r2, r2, r5
    7360:	movw	r5, #14348	; 0x380c
    7364:	movt	r5, #64997	; 0xfde5
    7368:	add	r2, r2, r5
    736c:	eor	r5, r3, r7
    7370:	add	r7, ip, r7
    7374:	ldr	ip, [fp, #-44]	; 0xffffffd4
    7378:	add	r2, r3, r2, ror #9
    737c:	eor	r5, r5, r2
    7380:	add	r0, r0, r5
    7384:	movw	r5, #59972	; 0xea44
    7388:	movt	r5, #42174	; 0xa4be
    738c:	add	r0, r0, r5
    7390:	eor	r5, r2, r3
    7394:	add	r3, r1, r3
    7398:	ldr	r1, [fp, #-32]	; 0xffffffe0
    739c:	add	r0, r2, r0, ror #28
    73a0:	eor	r5, r5, r0
    73a4:	add	r7, r7, r5
    73a8:	movw	r5, #53161	; 0xcfa9
    73ac:	movt	r5, #19422	; 0x4bde
    73b0:	add	r7, r7, r5
    73b4:	eor	r5, r0, r2
    73b8:	add	r2, r8, r2
    73bc:	add	r7, r0, r7, ror #21
    73c0:	eor	r5, r5, r7
    73c4:	add	r3, r3, r5
    73c8:	movw	r5, #19296	; 0x4b60
    73cc:	movt	r5, #63163	; 0xf6bb
    73d0:	add	r3, r3, r5
    73d4:	eor	r5, r7, r0
    73d8:	add	r0, sl, r0
    73dc:	ldr	sl, [fp, #-52]	; 0xffffffcc
    73e0:	add	r3, r7, r3, ror #16
    73e4:	eor	r5, r5, r3
    73e8:	add	r2, r2, r5
    73ec:	movw	r5, #48240	; 0xbc70
    73f0:	movt	r5, #48831	; 0xbebf
    73f4:	add	r2, r2, r5
    73f8:	eor	r5, r3, r7
    73fc:	add	r7, r4, r7
    7400:	add	r2, r3, r2, ror #9
    7404:	eor	r5, r5, r2
    7408:	add	r0, r0, r5
    740c:	movw	r5, #32454	; 0x7ec6
    7410:	movt	r5, #10395	; 0x289b
    7414:	add	r0, r0, r5
    7418:	eor	r5, r2, r3
    741c:	add	r3, ip, r3
    7420:	add	r0, r2, r0, ror #28
    7424:	eor	r5, r5, r0
    7428:	add	r7, r7, r5
    742c:	movw	r5, #10234	; 0x27fa
    7430:	movt	r5, #60065	; 0xeaa1
    7434:	add	r7, r7, r5
    7438:	eor	r5, r0, r2
    743c:	add	r2, r9, r2
    7440:	add	r7, r0, r7, ror #21
    7444:	eor	r5, r5, r7
    7448:	add	r3, r3, r5
    744c:	movw	r5, #12421	; 0x3085
    7450:	movt	r5, #54511	; 0xd4ef
    7454:	add	r3, r3, r5
    7458:	eor	r5, r7, r0
    745c:	add	r0, r1, r0
    7460:	ldr	r1, [sp, #52]	; 0x34
    7464:	add	r3, r7, r3, ror #16
    7468:	eor	r5, r5, r3
    746c:	add	r2, r2, r5
    7470:	movw	r5, #7429	; 0x1d05
    7474:	movt	r5, #1160	; 0x488
    7478:	add	r2, r2, r5
    747c:	eor	r5, r3, r7
    7480:	add	r7, r6, r7
    7484:	add	r2, r3, r2, ror #9
    7488:	eor	r5, r5, r2
    748c:	add	r0, r0, r5
    7490:	movw	r5, #53305	; 0xd039
    7494:	movt	r5, #55764	; 0xd9d4
    7498:	add	r0, r0, r5
    749c:	eor	r5, r2, r3
    74a0:	add	r3, lr, r3
    74a4:	add	r0, r2, r0, ror #28
    74a8:	eor	r5, r5, r0
    74ac:	add	r7, r7, r5
    74b0:	movw	r5, #39397	; 0x99e5
    74b4:	movt	r5, #59099	; 0xe6db
    74b8:	add	r7, r7, r5
    74bc:	eor	r5, r0, r2
    74c0:	add	r2, sl, r2
    74c4:	add	r7, r0, r7, ror #21
    74c8:	eor	r5, r5, r7
    74cc:	add	r3, r3, r5
    74d0:	movw	r5, #31992	; 0x7cf8
    74d4:	movt	r5, #8098	; 0x1fa2
    74d8:	add	r3, r3, r5
    74dc:	eor	r5, r7, r0
    74e0:	add	r0, r4, r0
    74e4:	add	r3, r7, r3, ror #16
    74e8:	eor	r5, r5, r3
    74ec:	add	r2, r2, r5
    74f0:	movw	r5, #22117	; 0x5665
    74f4:	movt	r5, #50348	; 0xc4ac
    74f8:	add	r2, r2, r5
    74fc:	mvn	r5, r7
    7500:	add	r7, r1, r7
    7504:	ldr	r1, [sp]
    7508:	add	r2, r3, r2, ror #9
    750c:	orr	r5, r2, r5
    7510:	eor	r5, r5, r3
    7514:	add	r0, r0, r5
    7518:	movw	r5, #8772	; 0x2244
    751c:	movt	r5, #62505	; 0xf429
    7520:	add	r0, r0, r5
    7524:	mvn	r5, r3
    7528:	add	r3, r1, r3
    752c:	ldr	r1, [sp, #36]	; 0x24
    7530:	add	r0, r2, r0, ror #26
    7534:	orr	r5, r0, r5
    7538:	eor	r5, r5, r2
    753c:	add	r7, r7, r5
    7540:	movw	r5, #65431	; 0xff97
    7544:	movt	r5, #17194	; 0x432a
    7548:	add	r7, r7, r5
    754c:	mvn	r5, r2
    7550:	add	r2, r1, r2
    7554:	ldr	r1, [fp, #-48]	; 0xffffffd0
    7558:	add	r7, r0, r7, ror #22
    755c:	orr	r5, r7, r5
    7560:	eor	r5, r5, r0
    7564:	add	r3, r3, r5
    7568:	movw	r5, #9127	; 0x23a7
    756c:	movt	r5, #43924	; 0xab94
    7570:	add	r3, r3, r5
    7574:	mvn	r5, r0
    7578:	add	r0, r6, r0
    757c:	movw	r6, #22979	; 0x59c3
    7580:	add	r3, r7, r3, ror #17
    7584:	movt	r6, #25947	; 0x655b
    7588:	orr	r5, r3, r5
    758c:	eor	r5, r5, r7
    7590:	add	r2, r2, r5
    7594:	movw	r5, #41017	; 0xa039
    7598:	movt	r5, #64659	; 0xfc93
    759c:	add	r2, r2, r5
    75a0:	mvn	r5, r7
    75a4:	add	r7, ip, r7
    75a8:	add	r2, r3, r2, ror #11
    75ac:	orr	r5, r2, r5
    75b0:	eor	r5, r5, r3
    75b4:	add	r0, r0, r5
    75b8:	ldr	r5, [fp, #-40]	; 0xffffffd8
    75bc:	add	r0, r0, r6
    75c0:	mvn	r6, r3
    75c4:	add	r3, r8, r3
    75c8:	add	r0, r2, r0, ror #26
    75cc:	orr	r6, r0, r6
    75d0:	eor	r6, r6, r2
    75d4:	add	r7, r7, r6
    75d8:	movw	r6, #52370	; 0xcc92
    75dc:	movt	r6, #36620	; 0x8f0c
    75e0:	add	r7, r7, r6
    75e4:	mvn	r6, r2
    75e8:	add	r2, r1, r2
    75ec:	ldr	r1, [sp, #44]	; 0x2c
    75f0:	add	r7, r0, r7, ror #22
    75f4:	orr	r6, r7, r6
    75f8:	eor	r6, r6, r0
    75fc:	add	r3, r3, r6
    7600:	movw	r6, #62589	; 0xf47d
    7604:	movt	r6, #65519	; 0xffef
    7608:	add	r3, r3, r6
    760c:	mvn	r6, r0
    7610:	add	r0, r1, r0
    7614:	add	r1, lr, r7
    7618:	add	r3, r7, r3, ror #17
    761c:	orr	r6, r3, r6
    7620:	eor	r6, r6, r7
    7624:	add	r2, r2, r6
    7628:	movw	r6, #24017	; 0x5dd1
    762c:	movt	r6, #34180	; 0x8584
    7630:	add	r2, r2, r6
    7634:	mvn	r6, r7
    7638:	ldr	r7, [sp, #40]	; 0x28
    763c:	add	r2, r3, r2, ror #11
    7640:	orr	r6, r2, r6
    7644:	eor	r6, r6, r3
    7648:	add	r0, r0, r6
    764c:	movw	r6, #32335	; 0x7e4f
    7650:	movt	r6, #28584	; 0x6fa8
    7654:	add	r0, r0, r6
    7658:	add	r6, r2, r0, ror #26
    765c:	mvn	r0, r3
    7660:	add	r3, r9, r3
    7664:	orr	r0, r6, r0
    7668:	eor	r0, r0, r2
    766c:	add	r0, r1, r0
    7670:	movw	r1, #59104	; 0xe6e0
    7674:	movt	r1, #65068	; 0xfe2c
    7678:	add	r0, r0, r1
    767c:	add	r1, r6, r0, ror #22
    7680:	mvn	r0, r2
    7684:	add	r2, r7, r2
    7688:	ldr	r7, [sp, #48]	; 0x30
    768c:	orr	r0, r1, r0
    7690:	eor	r0, r0, r6
    7694:	add	r0, r3, r0
    7698:	movw	r3, #17172	; 0x4314
    769c:	add	r7, r7, r6
    76a0:	movt	r3, #41729	; 0xa301
    76a4:	add	r0, r0, r3
    76a8:	add	r3, r1, r0, ror #17
    76ac:	mvn	r0, r6
    76b0:	ldr	r6, [sp, #16]
    76b4:	orr	r0, r3, r0
    76b8:	eor	r0, r0, r1
    76bc:	add	r0, r2, r0
    76c0:	movw	r2, #4513	; 0x11a1
    76c4:	movt	r2, #19976	; 0x4e08
    76c8:	add	r0, r0, r2
    76cc:	mvn	r2, r1
    76d0:	add	r1, r5, r1
    76d4:	add	r0, r3, r0, ror #11
    76d8:	orr	r2, r0, r2
    76dc:	eor	r2, r2, r3
    76e0:	add	r2, r7, r2
    76e4:	movw	r7, #32386	; 0x7e82
    76e8:	movt	r7, #63315	; 0xf753
    76ec:	add	r2, r2, r7
    76f0:	ldr	r7, [sp, #24]
    76f4:	add	r2, r0, r2, ror #26
    76f8:	add	r7, r2, r7
    76fc:	str	r7, [r6]
    7700:	mvn	r7, r3
    7704:	add	r3, sl, r3
    7708:	orr	r7, r2, r7
    770c:	eor	r7, r7, r0
    7710:	add	r1, r1, r7
    7714:	movw	r7, #62005	; 0xf235
    7718:	movt	r7, #48442	; 0xbd3a
    771c:	add	r1, r1, r7
    7720:	ldr	r7, [sp, #28]
    7724:	add	r1, r2, r1, ror #22
    7728:	add	r7, r1, r7
    772c:	str	r7, [r6, #12]
    7730:	mvn	r7, r0
    7734:	orr	r7, r1, r7
    7738:	eor	r7, r7, r2
    773c:	mvn	r2, r2
    7740:	add	r3, r3, r7
    7744:	movw	r7, #53947	; 0xd2bb
    7748:	movt	r7, #10967	; 0x2ad7
    774c:	add	r3, r3, r7
    7750:	ldr	r7, [sp, #32]
    7754:	add	r3, r1, r3, ror #17
    7758:	orr	r2, r3, r2
    775c:	eor	r1, r2, r1
    7760:	ldr	r2, [fp, #-32]	; 0xffffffe0
    7764:	add	r7, r3, r7
    7768:	str	r7, [r6, #8]
    776c:	ldr	r7, [sp, #20]
    7770:	add	r0, r2, r0
    7774:	add	r0, r0, r1
    7778:	movw	r1, #54161	; 0xd391
    777c:	add	r7, r3, r7
    7780:	movt	r1, #60294	; 0xeb86
    7784:	add	r0, r0, r1
    7788:	add	r0, r7, r0, ror #11
    778c:	str	r0, [r6, #4]
    7790:	sub	sp, fp, #28
    7794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007798 <rb_sha256_crypt_r>:
    7798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    779c:	add	fp, sp, #28
    77a0:	sub	sp, sp, #4
    77a4:	vpush	{d8-d11}
    77a8:	sub	sp, sp, #472	; 0x1d8
    77ac:	mov	r9, r0
    77b0:	ldr	r0, [pc, #3028]	; 838c <rb_sha256_crypt_r+0xbf4>
    77b4:	mov	r5, r2
    77b8:	mov	r2, #3
    77bc:	mov	r6, r3
    77c0:	mov	r7, r1
    77c4:	add	r0, pc, r0
    77c8:	bl	5500 <strncmp@plt>
    77cc:	ldr	r1, [pc, #3004]	; 8390 <rb_sha256_crypt_r+0xbf8>
    77d0:	cmp	r0, #0
    77d4:	mov	r2, #7
    77d8:	addeq	r7, r7, #3
    77dc:	mov	r0, r7
    77e0:	add	r1, pc, r1
    77e4:	bl	5500 <strncmp@plt>
    77e8:	movw	r1, #5000	; 0x1388
    77ec:	mov	r4, #0
    77f0:	cmp	r0, #0
    77f4:	str	r6, [fp, #-524]	; 0xfffffdf4
    77f8:	str	r1, [fp, #-500]	; 0xfffffe0c
    77fc:	beq	7828 <rb_sha256_crypt_r+0x90>
    7800:	mov	r0, #0
    7804:	b	786c <rb_sha256_crypt_r+0xd4>
    7808:	.word	0x510e527f
    780c:	.word	0x9b05688c
    7810:	.word	0x1f83d9ab
    7814:	.word	0x5be0cd19
    7818:	.word	0x6a09e667
    781c:	.word	0xbb67ae85
    7820:	.word	0x3c6ef372
    7824:	.word	0xa54ff53a
    7828:	add	r0, r7, #7
    782c:	sub	r1, fp, #312	; 0x138
    7830:	mov	r2, #10
    7834:	bl	50f8 <strtoul@plt>
    7838:	ldr	r1, [fp, #-312]	; 0xfffffec8
    783c:	ldrb	r2, [r1]
    7840:	cmp	r2, #36	; 0x24
    7844:	bne	8378 <rb_sha256_crypt_r+0xbe0>
    7848:	movw	r2, #51711	; 0xc9ff
    784c:	add	r7, r1, #1
    7850:	movt	r2, #15258	; 0x3b9a
    7854:	cmp	r0, r2
    7858:	movcc	r2, r0
    785c:	mov	r0, #1
    7860:	cmp	r2, #1000	; 0x3e8
    7864:	movls	r2, #1000	; 0x3e8
    7868:	str	r2, [fp, #-500]	; 0xfffffe0c
    786c:	str	r0, [fp, #-528]	; 0xfffffdf0
    7870:	ldr	r1, [pc, #2844]	; 8394 <rb_sha256_crypt_r+0xbfc>
    7874:	mov	r0, r7
    7878:	add	r1, pc, r1
    787c:	bl	54d0 <strcspn@plt>
    7880:	cmp	r0, #16
    7884:	movcs	r0, #16
    7888:	str	r0, [fp, #-504]	; 0xfffffe08
    788c:	mov	r0, r9
    7890:	bl	50e0 <strlen@plt>
    7894:	mov	sl, r0
    7898:	tst	r9, #3
    789c:	beq	78c8 <rb_sha256_crypt_r+0x130>
    78a0:	add	r0, sl, #11
    78a4:	bic	r0, r0, #7
    78a8:	sub	r0, sp, r0
    78ac:	add	r4, r0, #4
    78b0:	mov	sp, r0
    78b4:	mov	r0, r4
    78b8:	mov	r1, r9
    78bc:	mov	r2, sl
    78c0:	bl	5104 <memcpy@plt>
    78c4:	mov	r9, r4
    78c8:	mov	r6, #0
    78cc:	tst	r7, #3
    78d0:	str	r4, [fp, #-516]	; 0xfffffdfc
    78d4:	str	r5, [fp, #-520]	; 0xfffffdf8
    78d8:	beq	790c <rb_sha256_crypt_r+0x174>
    78dc:	mov	r1, r7
    78e0:	ldr	r7, [fp, #-504]	; 0xfffffe08
    78e4:	add	r0, r7, #11
    78e8:	bic	r0, r0, #7
    78ec:	sub	r0, sp, r0
    78f0:	add	r4, r0, #4
    78f4:	mov	sp, r0
    78f8:	mov	r0, r4
    78fc:	mov	r2, r7
    7900:	bl	5104 <memcpy@plt>
    7904:	str	r4, [fp, #-532]	; 0xfffffdec
    7908:	b	791c <rb_sha256_crypt_r+0x184>
    790c:	mov	r4, r7
    7910:	ldr	r7, [fp, #-504]	; 0xfffffe08
    7914:	mov	r0, #0
    7918:	str	r0, [fp, #-532]	; 0xfffffdec
    791c:	sub	r0, pc, #284	; 0x11c
    7920:	sub	r5, fp, #312	; 0x138
    7924:	mov	r1, #36	; 0x24
    7928:	vld1.64	{d8-d9}, [r0]
    792c:	sub	r0, pc, #284	; 0x11c
    7930:	mov	r2, r5
    7934:	vld1.64	{d10-d11}, [r0]
    7938:	add	r0, r5, #16
    793c:	str	r0, [fp, #-496]	; 0xfffffe10
    7940:	vst1.64	{d8-d9}, [r0]
    7944:	mov	r0, r5
    7948:	vst1.32	{d10-d11}, [r0], r1
    794c:	mov	r1, sl
    7950:	str	r6, [r0]
    7954:	mov	r0, r9
    7958:	str	r6, [fp, #-272]	; 0xfffffef0
    795c:	str	r6, [fp, #-280]	; 0xfffffee8
    7960:	bl	83a8 <rb_sha256_process_bytes>
    7964:	mov	r0, r4
    7968:	mov	r1, r7
    796c:	mov	r2, r5
    7970:	bl	83a8 <rb_sha256_process_bytes>
    7974:	sub	r8, fp, #488	; 0x1e8
    7978:	mov	r1, #36	; 0x24
    797c:	mov	r0, r8
    7980:	mov	r2, r8
    7984:	vst1.32	{d10-d11}, [r0], r1
    7988:	mov	r1, sl
    798c:	str	r6, [r0]
    7990:	add	r0, r8, #16
    7994:	vst1.64	{d8-d9}, [r0]
    7998:	str	r0, [fp, #-508]	; 0xfffffe04
    799c:	mov	r0, r9
    79a0:	str	r6, [fp, #-448]	; 0xfffffe40
    79a4:	str	r6, [fp, #-456]	; 0xfffffe38
    79a8:	bl	83a8 <rb_sha256_process_bytes>
    79ac:	mov	r0, r4
    79b0:	mov	r1, r7
    79b4:	mov	r2, r8
    79b8:	str	r4, [fp, #-512]	; 0xfffffe00
    79bc:	bl	83a8 <rb_sha256_process_bytes>
    79c0:	mov	r0, r9
    79c4:	mov	r1, sl
    79c8:	mov	r2, r8
    79cc:	bl	83a8 <rb_sha256_process_bytes>
    79d0:	sub	r1, fp, #100	; 0x64
    79d4:	mov	r0, r8
    79d8:	bl	851c <rb_sha256_finish_ctx>
    79dc:	cmp	sl, #33	; 0x21
    79e0:	mov	r1, sl
    79e4:	bcc	7a20 <rb_sha256_crypt_r+0x288>
    79e8:	sub	r0, sl, #33	; 0x21
    79ec:	sub	r4, fp, #100	; 0x64
    79f0:	sub	r6, fp, #312	; 0x138
    79f4:	mov	r7, sl
    79f8:	bic	r5, r0, #31
    79fc:	mov	r0, r4
    7a00:	mov	r1, #32
    7a04:	mov	r2, r6
    7a08:	bl	83a8 <rb_sha256_process_bytes>
    7a0c:	sub	r7, r7, #32
    7a10:	cmp	r7, #32
    7a14:	bhi	79fc <rb_sha256_crypt_r+0x264>
    7a18:	sub	r0, sl, r5
    7a1c:	sub	r1, r0, #32
    7a20:	sub	r0, fp, #100	; 0x64
    7a24:	sub	r2, fp, #312	; 0x138
    7a28:	bl	83a8 <rb_sha256_process_bytes>
    7a2c:	cmp	sl, #0
    7a30:	beq	7b44 <rb_sha256_crypt_r+0x3ac>
    7a34:	sub	r6, fp, #312	; 0x138
    7a38:	mov	r4, #0
    7a3c:	sub	r7, fp, #100	; 0x64
    7a40:	mov	r5, sl
    7a44:	tst	r5, #1
    7a48:	mov	r2, r6
    7a4c:	moveq	r0, r9
    7a50:	moveq	r1, sl
    7a54:	movne	r0, r7
    7a58:	movne	r1, #32
    7a5c:	bl	83a8 <rb_sha256_process_bytes>
    7a60:	lsr	r0, r5, #1
    7a64:	cmp	r4, r5, lsr #1
    7a68:	mov	r5, r0
    7a6c:	bne	7a44 <rb_sha256_crypt_r+0x2ac>
    7a70:	sub	r0, fp, #312	; 0x138
    7a74:	sub	r1, fp, #100	; 0x64
    7a78:	bl	851c <rb_sha256_finish_ctx>
    7a7c:	sub	r0, pc, #620	; 0x26c
    7a80:	sub	r1, pc, #640	; 0x280
    7a84:	ldr	r4, [fp, #-508]	; 0xfffffe04
    7a88:	ldr	r7, [fp, #-512]	; 0xfffffe00
    7a8c:	cmp	sl, #0
    7a90:	vld1.64	{d16-d17}, [r0]
    7a94:	vld1.64	{d18-d19}, [r1]
    7a98:	mov	r0, #40	; 0x28
    7a9c:	mov	r1, r8
    7aa0:	vst1.32	{d16-d17}, [r1], r0
    7aa4:	mov	r0, #0
    7aa8:	vst1.32	{d18-d19}, [r4]
    7aac:	str	r0, [r1]
    7ab0:	str	r0, [fp, #-456]	; 0xfffffe38
    7ab4:	str	r0, [fp, #-452]	; 0xfffffe3c
    7ab8:	beq	7b88 <rb_sha256_crypt_r+0x3f0>
    7abc:	sub	r6, fp, #488	; 0x1e8
    7ac0:	mov	r4, sl
    7ac4:	mov	r0, r9
    7ac8:	mov	r1, sl
    7acc:	mov	r2, r6
    7ad0:	bl	83a8 <rb_sha256_process_bytes>
    7ad4:	subs	r4, r4, #1
    7ad8:	bne	7ac4 <rb_sha256_crypt_r+0x32c>
    7adc:	sub	r6, fp, #136	; 0x88
    7ae0:	sub	r0, fp, #488	; 0x1e8
    7ae4:	mov	r1, r6
    7ae8:	bl	851c <rb_sha256_finish_ctx>
    7aec:	add	r0, sl, #7
    7af0:	bic	r0, r0, #7
    7af4:	sub	r2, sp, r0
    7af8:	mov	sp, r2
    7afc:	ldr	r5, [fp, #-504]	; 0xfffffe08
    7b00:	cmp	sl, #32
    7b04:	str	r2, [fp, #-492]	; 0xfffffe14
    7b08:	bcc	7bb4 <rb_sha256_crypt_r+0x41c>
    7b0c:	mov	r0, #0
    7b10:	mov	r1, r6
    7b14:	vld1.64	{d16-d17}, [r1]!
    7b18:	vld1.64	{d18-d19}, [r1]
    7b1c:	sub	r1, r2, r0
    7b20:	sub	r0, r0, #32
    7b24:	vst1.64	{d16-d17}, [r1]!
    7b28:	vst1.64	{d18-d19}, [r1]
    7b2c:	add	r1, sl, r0
    7b30:	cmp	r1, #31
    7b34:	bhi	7b10 <rb_sha256_crypt_r+0x378>
    7b38:	sub	r0, r2, r0
    7b3c:	and	r2, sl, #31
    7b40:	b	7bbc <rb_sha256_crypt_r+0x424>
    7b44:	sub	r0, fp, #312	; 0x138
    7b48:	sub	r1, fp, #100	; 0x64
    7b4c:	bl	851c <rb_sha256_finish_ctx>
    7b50:	sub	r0, pc, #832	; 0x340
    7b54:	sub	r1, pc, #852	; 0x354
    7b58:	ldr	r4, [fp, #-508]	; 0xfffffe04
    7b5c:	ldr	r7, [fp, #-512]	; 0xfffffe00
    7b60:	vld1.64	{d16-d17}, [r0]
    7b64:	vld1.64	{d18-d19}, [r1]
    7b68:	mov	r0, #40	; 0x28
    7b6c:	mov	r1, r8
    7b70:	vst1.32	{d16-d17}, [r1], r0
    7b74:	mov	r0, #0
    7b78:	vst1.32	{d18-d19}, [r4]
    7b7c:	str	r0, [r1]
    7b80:	str	r0, [fp, #-456]	; 0xfffffe38
    7b84:	str	r0, [fp, #-452]	; 0xfffffe3c
    7b88:	sub	r0, fp, #488	; 0x1e8
    7b8c:	sub	r1, fp, #136	; 0x88
    7b90:	bl	851c <rb_sha256_finish_ctx>
    7b94:	add	r0, sl, #7
    7b98:	bic	r0, r0, #7
    7b9c:	sub	r0, sp, r0
    7ba0:	mov	sp, r0
    7ba4:	ldr	r5, [fp, #-504]	; 0xfffffe08
    7ba8:	mov	r2, #0
    7bac:	str	r0, [fp, #-492]	; 0xfffffe14
    7bb0:	b	7bc0 <rb_sha256_crypt_r+0x428>
    7bb4:	mov	r0, r2
    7bb8:	mov	r2, sl
    7bbc:	ldr	r4, [fp, #-508]	; 0xfffffe04
    7bc0:	sub	r6, fp, #312	; 0x138
    7bc4:	sub	r1, fp, #136	; 0x88
    7bc8:	bl	5104 <memcpy@plt>
    7bcc:	sub	r0, pc, #956	; 0x3bc
    7bd0:	sub	r1, pc, #976	; 0x3d0
    7bd4:	vld1.64	{d16-d17}, [r0]
    7bd8:	vld1.64	{d18-d19}, [r1]
    7bdc:	mov	r0, #40	; 0x28
    7be0:	mov	r1, r8
    7be4:	vst1.32	{d16-d17}, [r1], r0
    7be8:	vst1.32	{d18-d19}, [r4]
    7bec:	mov	r4, #0
    7bf0:	str	r4, [r1]
    7bf4:	str	r4, [fp, #-456]	; 0xfffffe38
    7bf8:	str	r4, [fp, #-452]	; 0xfffffe3c
    7bfc:	mov	r0, r7
    7c00:	mov	r1, r5
    7c04:	mov	r2, r8
    7c08:	bl	83a8 <rb_sha256_process_bytes>
    7c0c:	ldrb	r0, [fp, #-100]	; 0xffffff9c
    7c10:	add	r4, r4, #1
    7c14:	add	r0, r0, #16
    7c18:	cmp	r4, r0
    7c1c:	bcc	7bfc <rb_sha256_crypt_r+0x464>
    7c20:	sub	r4, fp, #136	; 0x88
    7c24:	sub	r0, fp, #488	; 0x1e8
    7c28:	mov	r1, r4
    7c2c:	bl	851c <rb_sha256_finish_ctx>
    7c30:	add	r0, r5, #7
    7c34:	bic	r0, r0, #7
    7c38:	sub	r0, sp, r0
    7c3c:	mov	sp, r0
    7c40:	mov	r1, r4
    7c44:	mov	r2, r5
    7c48:	str	r0, [fp, #-508]	; 0xfffffe04
    7c4c:	bl	5104 <memcpy@plt>
    7c50:	mov	r9, #0
    7c54:	add	r0, pc, #732	; 0x2dc
    7c58:	mov	r1, #40	; 0x28
    7c5c:	mov	r7, sl
    7c60:	ands	r4, r9, #1
    7c64:	vld1.64	{d16-d17}, [r0]
    7c68:	add	r0, pc, #728	; 0x2d8
    7c6c:	vld1.64	{d18-d19}, [r0]
    7c70:	mov	r0, r6
    7c74:	vst1.32	{d16-d17}, [r0], r1
    7c78:	ldr	r1, [fp, #-496]	; 0xfffffe10
    7c7c:	vst1.32	{d18-d19}, [r1]
    7c80:	mov	r1, #0
    7c84:	str	r1, [r0]
    7c88:	movw	r0, #18725	; 0x4925
    7c8c:	str	r1, [fp, #-280]	; 0xfffffee8
    7c90:	str	r1, [fp, #-276]	; 0xfffffeec
    7c94:	movt	r0, #9362	; 0x2492
    7c98:	umull	r0, r1, r9, r0
    7c9c:	sub	r0, r9, r1
    7ca0:	add	r8, r1, r0, lsr #1
    7ca4:	lsr	r0, r8, #2
    7ca8:	lsl	sl, r0, #3
    7cac:	movw	r0, #43691	; 0xaaab
    7cb0:	movt	r0, #43690	; 0xaaaa
    7cb4:	umull	r0, r1, r9, r0
    7cb8:	lsr	r0, r1, #1
    7cbc:	add	r5, r0, r0, lsl #1
    7cc0:	beq	7cd0 <rb_sha256_crypt_r+0x538>
    7cc4:	ldr	r0, [fp, #-492]	; 0xfffffe14
    7cc8:	mov	r1, r7
    7ccc:	b	7cd8 <rb_sha256_crypt_r+0x540>
    7cd0:	sub	r0, fp, #100	; 0x64
    7cd4:	mov	r1, #32
    7cd8:	mov	r2, r6
    7cdc:	bl	83a8 <rb_sha256_process_bytes>
    7ce0:	sub	r6, sl, r8, lsr #2
    7ce4:	cmp	r5, r9
    7ce8:	beq	7cfc <rb_sha256_crypt_r+0x564>
    7cec:	ldr	r0, [fp, #-508]	; 0xfffffe04
    7cf0:	ldr	r1, [fp, #-504]	; 0xfffffe08
    7cf4:	sub	r2, fp, #312	; 0x138
    7cf8:	bl	83a8 <rb_sha256_process_bytes>
    7cfc:	cmp	r6, r9
    7d00:	mov	sl, r7
    7d04:	sub	r6, fp, #312	; 0x138
    7d08:	beq	7d1c <rb_sha256_crypt_r+0x584>
    7d0c:	ldr	r0, [fp, #-492]	; 0xfffffe14
    7d10:	mov	r1, sl
    7d14:	mov	r2, r6
    7d18:	bl	83a8 <rb_sha256_process_bytes>
    7d1c:	cmp	r4, #0
    7d20:	beq	7d3c <rb_sha256_crypt_r+0x5a4>
    7d24:	sub	r4, fp, #100	; 0x64
    7d28:	mov	r1, #32
    7d2c:	mov	r2, r6
    7d30:	mov	r0, r4
    7d34:	bl	83a8 <rb_sha256_process_bytes>
    7d38:	b	7d50 <rb_sha256_crypt_r+0x5b8>
    7d3c:	ldr	r0, [fp, #-492]	; 0xfffffe14
    7d40:	mov	r1, sl
    7d44:	mov	r2, r6
    7d48:	bl	83a8 <rb_sha256_process_bytes>
    7d4c:	sub	r4, fp, #100	; 0x64
    7d50:	mov	r0, r6
    7d54:	mov	r1, r4
    7d58:	bl	851c <rb_sha256_finish_ctx>
    7d5c:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    7d60:	add	r9, r9, #1
    7d64:	cmp	r0, r9
    7d68:	bne	7c54 <rb_sha256_crypt_r+0x4bc>
    7d6c:	ldr	r4, [fp, #-524]	; 0xfffffdf4
    7d70:	ldr	r8, [fp, #-520]	; 0xfffffdf8
    7d74:	mov	r1, #0
    7d78:	bic	r7, r4, r4, asr #31
    7d7c:	mov	r0, r8
    7d80:	mov	r2, r7
    7d84:	bl	4f3c <memset@plt>
    7d88:	ldr	r1, [pc, #1544]	; 8398 <rb_sha256_crypt_r+0xc00>
    7d8c:	mov	r0, r8
    7d90:	mov	r2, r7
    7d94:	add	r1, pc, r1
    7d98:	bl	4e94 <strncpy@plt>
    7d9c:	bl	50e0 <strlen@plt>
    7da0:	adds	r6, r8, r0
    7da4:	ldr	r0, [fp, #-528]	; 0xfffffdf0
    7da8:	sub	r5, r4, #3
    7dac:	addeq	r6, r8, r7
    7db0:	cmp	r0, #0
    7db4:	beq	7dec <rb_sha256_crypt_r+0x654>
    7db8:	sub	sp, sp, #8
    7dbc:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    7dc0:	bic	r1, r5, r5, asr #31
    7dc4:	str	r0, [sp]
    7dc8:	mov	r0, r6
    7dcc:	ldr	r2, [pc, #1480]	; 839c <rb_sha256_crypt_r+0xc04>
    7dd0:	ldr	r3, [pc, #1480]	; 83a0 <rb_sha256_crypt_r+0xc08>
    7dd4:	add	r2, pc, r2
    7dd8:	add	r3, pc, r3
    7ddc:	bl	54a0 <snprintf@plt>
    7de0:	add	sp, sp, #8
    7de4:	sub	r5, r5, r0
    7de8:	add	r6, r6, r0
    7dec:	ldr	r9, [fp, #-504]	; 0xfffffe08
    7df0:	mov	r0, r6
    7df4:	mov	r1, #0
    7df8:	mov	r2, r9
    7dfc:	bl	4f3c <memset@plt>
    7e00:	bic	r7, r5, r5, asr #31
    7e04:	ldr	r1, [fp, #-512]	; 0xfffffe00
    7e08:	mov	r0, r6
    7e0c:	cmp	r7, r9
    7e10:	movcs	r7, r9
    7e14:	mov	r2, r7
    7e18:	bl	4e94 <strncpy@plt>
    7e1c:	mov	r0, r8
    7e20:	sub	r5, r5, r7
    7e24:	bl	50e0 <strlen@plt>
    7e28:	adds	r1, r8, r0
    7e2c:	moveq	r1, r9
    7e30:	cmp	r5, #1
    7e34:	movge	r0, #36	; 0x24
    7e38:	strbge	r0, [r1]
    7e3c:	subge	r0, r5, #1
    7e40:	cmpge	r0, #1
    7e44:	bge	7f58 <rb_sha256_crypt_r+0x7c0>
    7e48:	bl	55e4 <__errno_location@plt>
    7e4c:	mov	r1, #34	; 0x22
    7e50:	mov	r8, #0
    7e54:	str	r1, [r0]
    7e58:	add	r0, pc, #216	; 0xd8
    7e5c:	add	r1, pc, #228	; 0xe4
    7e60:	sub	r4, fp, #312	; 0x138
    7e64:	vld1.64	{d16-d17}, [r0]
    7e68:	vld1.64	{d18-d19}, [r1]
    7e6c:	mov	r0, #40	; 0x28
    7e70:	mov	r1, r4
    7e74:	vst1.32	{d16-d17}, [r1], r0
    7e78:	ldr	r0, [fp, #-496]	; 0xfffffe10
    7e7c:	vst1.32	{d18-d19}, [r0]
    7e80:	mov	r0, #0
    7e84:	str	r0, [r1]
    7e88:	str	r0, [fp, #-280]	; 0xfffffee8
    7e8c:	str	r0, [fp, #-276]	; 0xfffffeec
    7e90:	sub	r1, fp, #100	; 0x64
    7e94:	mov	r0, r4
    7e98:	bl	851c <rb_sha256_finish_ctx>
    7e9c:	vmov.i32	q8, #0	; 0x00000000
    7ea0:	sub	r0, fp, #136	; 0x88
    7ea4:	mov	r1, #0
    7ea8:	mov	r2, sl
    7eac:	vst1.64	{d16-d17}, [r0]!
    7eb0:	vst1.64	{d16-d17}, [r0]
    7eb4:	ldr	r0, [fp, #-492]	; 0xfffffe14
    7eb8:	bl	4f3c <memset@plt>
    7ebc:	ldr	r0, [fp, #-508]	; 0xfffffe04
    7ec0:	mov	r1, #0
    7ec4:	mov	r2, r9
    7ec8:	bl	4f3c <memset@plt>
    7ecc:	mov	r0, r4
    7ed0:	mov	r1, #0
    7ed4:	mov	r2, #172	; 0xac
    7ed8:	bl	4f3c <memset@plt>
    7edc:	sub	r0, fp, #488	; 0x1e8
    7ee0:	mov	r1, #0
    7ee4:	mov	r2, #172	; 0xac
    7ee8:	bl	4f3c <memset@plt>
    7eec:	ldr	r0, [fp, #-516]	; 0xfffffdfc
    7ef0:	ldr	r4, [fp, #-532]	; 0xfffffdec
    7ef4:	cmp	r0, #0
    7ef8:	beq	7f08 <rb_sha256_crypt_r+0x770>
    7efc:	mov	r1, #0
    7f00:	mov	r2, sl
    7f04:	bl	4f3c <memset@plt>
    7f08:	cmp	r4, #0
    7f0c:	beq	7f20 <rb_sha256_crypt_r+0x788>
    7f10:	mov	r0, r4
    7f14:	mov	r1, #0
    7f18:	mov	r2, r9
    7f1c:	bl	4f3c <memset@plt>
    7f20:	mov	r0, r8
    7f24:	sub	sp, fp, #64	; 0x40
    7f28:	vpop	{d8-d11}
    7f2c:	add	sp, sp, #4
    7f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7f34:	nop	{0}
    7f38:	.word	0x6a09e667
    7f3c:	.word	0xbb67ae85
    7f40:	.word	0x3c6ef372
    7f44:	.word	0xa54ff53a
    7f48:	.word	0x510e527f
    7f4c:	.word	0x9b05688c
    7f50:	.word	0x1f83d9ab
    7f54:	.word	0x5be0cd19
    7f58:	ldrb	r2, [fp, #-90]	; 0xffffffa6
    7f5c:	ldrb	r0, [fp, #-100]	; 0xffffff9c
    7f60:	ldrb	r3, [fp, #-80]	; 0xffffffb0
    7f64:	ldr	ip, [pc, #1080]	; 83a4 <rb_sha256_crypt_r+0xc0c>
    7f68:	lsl	r2, r2, #8
    7f6c:	add	ip, pc, ip
    7f70:	orr	r0, r2, r0, lsl #16
    7f74:	add	r2, r1, #1
    7f78:	orr	r7, r0, r3
    7f7c:	mov	r3, #0
    7f80:	and	r0, r7, #63	; 0x3f
    7f84:	ldrb	r0, [ip, r0]
    7f88:	strb	r0, [r2, -r3]
    7f8c:	add	r0, r5, r3
    7f90:	sub	r6, r0, #2
    7f94:	sub	r0, r3, #1
    7f98:	cmp	r6, #1
    7f9c:	blt	7fb0 <rb_sha256_crypt_r+0x818>
    7fa0:	cmn	r3, #3
    7fa4:	lsr	r7, r7, #6
    7fa8:	mov	r3, r0
    7fac:	bne	7f80 <rb_sha256_crypt_r+0x7e8>
    7fb0:	add	r3, r5, r0
    7fb4:	sub	r3, r3, #1
    7fb8:	cmp	r3, #1
    7fbc:	blt	7e48 <rb_sha256_crypt_r+0x6b0>
    7fc0:	ldrb	r3, [fp, #-99]	; 0xffffff9d
    7fc4:	ldrb	r6, [fp, #-79]	; 0xffffffb1
    7fc8:	ldrb	r7, [fp, #-89]	; 0xffffffa7
    7fcc:	mvn	r4, #2
    7fd0:	lsl	r3, r3, #8
    7fd4:	orr	r3, r3, r6, lsl #16
    7fd8:	sub	r6, r5, #2
    7fdc:	orr	r7, r3, r7
    7fe0:	and	r3, r7, #63	; 0x3f
    7fe4:	ldrb	r3, [ip, r3]
    7fe8:	strb	r3, [r2, -r0]
    7fec:	add	r3, r6, r0
    7ff0:	sub	r0, r0, #1
    7ff4:	cmp	r3, #1
    7ff8:	blt	8010 <rb_sha256_crypt_r+0x878>
    7ffc:	add	r3, r4, #1
    8000:	cmp	r4, #0
    8004:	lsr	r7, r7, #6
    8008:	mov	r4, r3
    800c:	bne	7fe0 <rb_sha256_crypt_r+0x848>
    8010:	add	r3, r5, r0
    8014:	sub	r7, r3, #1
    8018:	cmp	r7, #1
    801c:	blt	7e48 <rb_sha256_crypt_r+0x6b0>
    8020:	ldrb	r6, [fp, #-78]	; 0xffffffb2
    8024:	ldrb	r3, [fp, #-88]	; 0xffffffa8
    8028:	sub	r2, r2, r0
    802c:	sub	r0, r1, r0
    8030:	add	r1, r0, #1
    8034:	ldrb	r0, [fp, #-98]	; 0xffffff9e
    8038:	lsl	r6, r6, #8
    803c:	orr	r3, r6, r3, lsl #16
    8040:	mvn	r6, #2
    8044:	orr	r3, r3, r0
    8048:	and	r0, r3, #63	; 0x3f
    804c:	sub	r7, r7, #1
    8050:	add	r1, r1, #1
    8054:	ldrb	r0, [ip, r0]
    8058:	cmp	r7, #1
    805c:	strb	r0, [r2], #1
    8060:	blt	8078 <rb_sha256_crypt_r+0x8e0>
    8064:	add	r0, r6, #1
    8068:	cmp	r6, #0
    806c:	lsr	r3, r3, #6
    8070:	mov	r6, r0
    8074:	bne	8048 <rb_sha256_crypt_r+0x8b0>
    8078:	cmp	r7, #1
    807c:	blt	7e48 <rb_sha256_crypt_r+0x6b0>
    8080:	ldrb	r3, [fp, #-87]	; 0xffffffa9
    8084:	ldrb	r0, [fp, #-97]	; 0xffffff9f
    8088:	add	r6, r7, #1
    808c:	ldrb	r7, [fp, #-77]	; 0xffffffb3
    8090:	mvn	r5, #2
    8094:	lsl	r3, r3, #8
    8098:	orr	r0, r3, r0, lsl #16
    809c:	orr	r7, r0, r7
    80a0:	and	r0, r7, #63	; 0x3f
    80a4:	sub	r3, r6, #1
    80a8:	add	r1, r1, #1
    80ac:	ldrb	r0, [ip, r0]
    80b0:	strb	r0, [r2], #1
    80b4:	sub	r0, r6, #2
    80b8:	cmp	r0, #1
    80bc:	blt	80d8 <rb_sha256_crypt_r+0x940>
    80c0:	add	r0, r5, #1
    80c4:	cmp	r5, #0
    80c8:	lsr	r7, r7, #6
    80cc:	mov	r6, r3
    80d0:	mov	r5, r0
    80d4:	bne	80a0 <rb_sha256_crypt_r+0x908>
    80d8:	sub	r0, r3, #1
    80dc:	cmp	r0, #1
    80e0:	blt	7e48 <rb_sha256_crypt_r+0x6b0>
    80e4:	ldrb	r0, [fp, #-96]	; 0xffffffa0
    80e8:	ldrb	r6, [fp, #-76]	; 0xffffffb4
    80ec:	ldrb	r7, [fp, #-86]	; 0xffffffaa
    80f0:	mvn	r5, #2
    80f4:	lsl	r0, r0, #8
    80f8:	orr	r0, r0, r6, lsl #16
    80fc:	orr	r6, r0, r7
    8100:	and	r0, r6, #63	; 0x3f
    8104:	sub	r7, r3, #1
    8108:	add	r1, r1, #1
    810c:	ldrb	r0, [ip, r0]
    8110:	strb	r0, [r2], #1
    8114:	sub	r0, r3, #2
    8118:	cmp	r0, #1
    811c:	blt	8138 <rb_sha256_crypt_r+0x9a0>
    8120:	add	r0, r5, #1
    8124:	cmp	r5, #0
    8128:	lsr	r6, r6, #6
    812c:	mov	r3, r7
    8130:	mov	r5, r0
    8134:	bne	8100 <rb_sha256_crypt_r+0x968>
    8138:	sub	r0, r7, #1
    813c:	cmp	r0, #1
    8140:	blt	7e48 <rb_sha256_crypt_r+0x6b0>
    8144:	ldrb	r3, [fp, #-75]	; 0xffffffb5
    8148:	ldrb	r2, [fp, #-85]	; 0xffffffab
    814c:	ldrb	r0, [fp, #-95]	; 0xffffffa1
    8150:	rsb	r1, r1, #0
    8154:	mvn	r5, #2
    8158:	mov	r6, #0
    815c:	lsl	r3, r3, #8
    8160:	orr	r2, r3, r2, lsl #16
    8164:	orr	r3, r2, r0
    8168:	and	r0, r3, #63	; 0x3f
    816c:	sub	r2, r7, #1
    8170:	ldrb	r0, [ip, r0]
    8174:	strb	r0, [r6, -r1]
    8178:	sub	r0, r7, #2
    817c:	sub	r1, r1, #1
    8180:	cmp	r0, #1
    8184:	blt	81a0 <rb_sha256_crypt_r+0xa08>
    8188:	add	r0, r5, #1
    818c:	cmp	r5, #0
    8190:	lsr	r3, r3, #6
    8194:	mov	r7, r2
    8198:	mov	r5, r0
    819c:	bne	8168 <rb_sha256_crypt_r+0x9d0>
    81a0:	sub	r0, r2, #1
    81a4:	cmp	r0, #1
    81a8:	blt	7e48 <rb_sha256_crypt_r+0x6b0>
    81ac:	ldrb	r3, [fp, #-84]	; 0xffffffac
    81b0:	ldrb	r0, [fp, #-94]	; 0xffffffa2
    81b4:	ldrb	r7, [fp, #-74]	; 0xffffffb6
    81b8:	rsb	r1, r1, #0
    81bc:	mvn	r6, #2
    81c0:	lsl	r3, r3, #8
    81c4:	orr	r0, r3, r0, lsl #16
    81c8:	orr	r7, r0, r7
    81cc:	and	r0, r7, #63	; 0x3f
    81d0:	sub	r3, r2, #1
    81d4:	ldrb	r0, [ip, r0]
    81d8:	strb	r0, [r1], #1
    81dc:	sub	r0, r2, #2
    81e0:	cmp	r0, #1
    81e4:	blt	8200 <rb_sha256_crypt_r+0xa68>
    81e8:	add	r0, r6, #1
    81ec:	cmp	r6, #0
    81f0:	lsr	r7, r7, #6
    81f4:	mov	r2, r3
    81f8:	mov	r6, r0
    81fc:	bne	81cc <rb_sha256_crypt_r+0xa34>
    8200:	sub	r0, r3, #1
    8204:	cmp	r0, #1
    8208:	blt	7e48 <rb_sha256_crypt_r+0x6b0>
    820c:	ldrb	r0, [fp, #-93]	; 0xffffffa3
    8210:	ldrb	r7, [fp, #-73]	; 0xffffffb7
    8214:	ldrb	r2, [fp, #-83]	; 0xffffffad
    8218:	mvn	r6, #2
    821c:	lsl	r0, r0, #8
    8220:	orr	r0, r0, r7, lsl #16
    8224:	orr	r7, r0, r2
    8228:	and	r0, r7, #63	; 0x3f
    822c:	sub	r2, r3, #1
    8230:	ldrb	r0, [ip, r0]
    8234:	strb	r0, [r1], #1
    8238:	sub	r0, r3, #2
    823c:	cmp	r0, #1
    8240:	blt	825c <rb_sha256_crypt_r+0xac4>
    8244:	add	r0, r6, #1
    8248:	cmp	r6, #0
    824c:	lsr	r7, r7, #6
    8250:	mov	r3, r2
    8254:	mov	r6, r0
    8258:	bne	8228 <rb_sha256_crypt_r+0xa90>
    825c:	sub	r0, r2, #1
    8260:	cmp	r0, #1
    8264:	blt	7e48 <rb_sha256_crypt_r+0x6b0>
    8268:	ldrb	r7, [fp, #-72]	; 0xffffffb8
    826c:	ldrb	r3, [fp, #-82]	; 0xffffffae
    8270:	ldrb	r0, [fp, #-92]	; 0xffffffa4
    8274:	mvn	r6, #2
    8278:	lsl	r7, r7, #8
    827c:	orr	r3, r7, r3, lsl #16
    8280:	orr	r7, r3, r0
    8284:	and	r0, r7, #63	; 0x3f
    8288:	sub	r3, r2, #1
    828c:	ldrb	r0, [ip, r0]
    8290:	strb	r0, [r1], #1
    8294:	sub	r0, r2, #2
    8298:	cmp	r0, #1
    829c:	blt	82b8 <rb_sha256_crypt_r+0xb20>
    82a0:	add	r0, r6, #1
    82a4:	cmp	r6, #0
    82a8:	lsr	r7, r7, #6
    82ac:	mov	r2, r3
    82b0:	mov	r6, r0
    82b4:	bne	8284 <rb_sha256_crypt_r+0xaec>
    82b8:	sub	r0, r3, #1
    82bc:	cmp	r0, #1
    82c0:	blt	7e48 <rb_sha256_crypt_r+0x6b0>
    82c4:	ldrb	r2, [fp, #-81]	; 0xffffffaf
    82c8:	ldrb	r0, [fp, #-91]	; 0xffffffa5
    82cc:	ldrb	r7, [fp, #-71]	; 0xffffffb9
    82d0:	mvn	r6, #2
    82d4:	lsl	r2, r2, #8
    82d8:	orr	r0, r2, r0, lsl #16
    82dc:	orr	r7, r0, r7
    82e0:	and	r0, r7, #63	; 0x3f
    82e4:	sub	r2, r3, #1
    82e8:	ldrb	r0, [ip, r0]
    82ec:	strb	r0, [r1], #1
    82f0:	sub	r0, r3, #2
    82f4:	cmp	r0, #1
    82f8:	blt	8314 <rb_sha256_crypt_r+0xb7c>
    82fc:	add	r0, r6, #1
    8300:	cmp	r6, #0
    8304:	lsr	r7, r7, #6
    8308:	mov	r3, r2
    830c:	mov	r6, r0
    8310:	bne	82e0 <rb_sha256_crypt_r+0xb48>
    8314:	sub	r0, r2, #1
    8318:	cmp	r0, #1
    831c:	blt	7e48 <rb_sha256_crypt_r+0x6b0>
    8320:	ldrb	r0, [fp, #-70]	; 0xffffffba
    8324:	ldrb	r3, [fp, #-69]	; 0xffffffbb
    8328:	mvn	r7, #1
    832c:	orr	r3, r0, r3, lsl #8
    8330:	and	r0, r3, #63	; 0x3f
    8334:	ldrb	r0, [ip, r0]
    8338:	strb	r0, [r1], #1
    833c:	sub	r0, r2, #1
    8340:	sub	r2, r2, #2
    8344:	cmp	r2, #1
    8348:	blt	8364 <rb_sha256_crypt_r+0xbcc>
    834c:	add	r6, r7, #1
    8350:	cmp	r7, #0
    8354:	lsr	r3, r3, #6
    8358:	mov	r2, r0
    835c:	mov	r7, r6
    8360:	bne	8330 <rb_sha256_crypt_r+0xb98>
    8364:	cmp	r0, #1
    8368:	ble	7e48 <rb_sha256_crypt_r+0x6b0>
    836c:	mov	r0, #0
    8370:	strb	r0, [r1]
    8374:	b	7e58 <rb_sha256_crypt_r+0x6c0>
    8378:	mov	r0, #0
    837c:	str	r0, [fp, #-528]	; 0xfffffdf0
    8380:	movw	r0, #5000	; 0x1388
    8384:	str	r0, [fp, #-500]	; 0xfffffe0c
    8388:	b	7870 <rb_sha256_crypt_r+0xd8>
    838c:	.word	0x0000dcec
    8390:	.word	0x0000dcd4
    8394:	.word	0x0000d902
    8398:	.word	0x0000d71c
    839c:	.word	0x0000d3a8
    83a0:	.word	0x0000d6dc
    83a4:	.word	0x0000d1cb

000083a8 <rb_sha256_process_bytes>:
    83a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    83ac:	add	fp, sp, #24
    83b0:	ldr	r5, [r2, #40]	; 0x28
    83b4:	mov	r4, r2
    83b8:	mov	r9, r1
    83bc:	mov	r6, r0
    83c0:	cmp	r5, #0
    83c4:	beq	8438 <rb_sha256_process_bytes+0x90>
    83c8:	rsb	r7, r5, #128	; 0x80
    83cc:	add	r0, r4, r5
    83d0:	mov	r1, r6
    83d4:	cmp	r7, r9
    83d8:	add	r0, r0, #44	; 0x2c
    83dc:	movhi	r7, r9
    83e0:	mov	r2, r7
    83e4:	bl	5104 <memcpy@plt>
    83e8:	ldr	r0, [r4, #40]	; 0x28
    83ec:	add	r0, r0, r7
    83f0:	cmp	r0, #65	; 0x41
    83f4:	str	r0, [r4, #40]	; 0x28
    83f8:	bcc	8430 <rb_sha256_process_bytes+0x88>
    83fc:	add	r8, r4, #44	; 0x2c
    8400:	bic	r1, r0, #63	; 0x3f
    8404:	mov	r2, r4
    8408:	mov	r0, r8
    840c:	bl	85fc <rb_sha256_process_block>
    8410:	ldr	r0, [r4, #40]	; 0x28
    8414:	and	r2, r0, #63	; 0x3f
    8418:	add	r0, r7, r5
    841c:	bic	r0, r0, #63	; 0x3f
    8420:	str	r2, [r4, #40]	; 0x28
    8424:	add	r1, r8, r0
    8428:	mov	r0, r8
    842c:	bl	5104 <memcpy@plt>
    8430:	sub	r9, r9, r7
    8434:	add	r6, r6, r7
    8438:	cmp	r9, #64	; 0x40
    843c:	bcc	84b8 <rb_sha256_process_bytes+0x110>
    8440:	tst	r6, #3
    8444:	beq	849c <rb_sha256_process_bytes+0xf4>
    8448:	cmp	r9, #65	; 0x41
    844c:	bcc	84c4 <rb_sha256_process_bytes+0x11c>
    8450:	sub	r0, r9, #65	; 0x41
    8454:	add	r7, r4, #44	; 0x2c
    8458:	mov	r5, r9
    845c:	bic	r8, r0, #63	; 0x3f
    8460:	mov	r0, r7
    8464:	mov	r1, r6
    8468:	mov	r2, #64	; 0x40
    846c:	bl	5104 <memcpy@plt>
    8470:	mov	r0, r7
    8474:	mov	r1, #64	; 0x40
    8478:	mov	r2, r4
    847c:	bl	85fc <rb_sha256_process_block>
    8480:	sub	r5, r5, #64	; 0x40
    8484:	add	r6, r6, #64	; 0x40
    8488:	cmp	r5, #64	; 0x40
    848c:	bhi	8460 <rb_sha256_process_bytes+0xb8>
    8490:	sub	r0, r9, r8
    8494:	sub	r9, r0, #64	; 0x40
    8498:	b	84c8 <rb_sha256_process_bytes+0x120>
    849c:	bic	r7, r9, #63	; 0x3f
    84a0:	mov	r0, r6
    84a4:	mov	r2, r4
    84a8:	mov	r1, r7
    84ac:	bl	85fc <rb_sha256_process_block>
    84b0:	add	r6, r6, r7
    84b4:	and	r9, r9, #63	; 0x3f
    84b8:	cmp	r9, #0
    84bc:	bne	84c8 <rb_sha256_process_bytes+0x120>
    84c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    84c4:	mov	r9, #64	; 0x40
    84c8:	ldr	r5, [r4, #40]	; 0x28
    84cc:	mov	r1, r6
    84d0:	mov	r2, r9
    84d4:	add	r0, r4, r5
    84d8:	add	r0, r0, #44	; 0x2c
    84dc:	bl	5104 <memcpy@plt>
    84e0:	add	r5, r5, r9
    84e4:	cmp	r5, #64	; 0x40
    84e8:	bcc	8514 <rb_sha256_process_bytes+0x16c>
    84ec:	add	r6, r4, #44	; 0x2c
    84f0:	mov	r1, #64	; 0x40
    84f4:	mov	r2, r4
    84f8:	mov	r0, r6
    84fc:	bl	85fc <rb_sha256_process_block>
    8500:	sub	r5, r5, #64	; 0x40
    8504:	add	r1, r4, #108	; 0x6c
    8508:	mov	r0, r6
    850c:	mov	r2, r5
    8510:	bl	5104 <memcpy@plt>
    8514:	str	r5, [r4, #40]	; 0x28
    8518:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000851c <rb_sha256_finish_ctx>:
    851c:	push	{r4, r5, r6, r7, fp, lr}
    8520:	add	fp, sp, #16
    8524:	mov	r5, r0
    8528:	mov	r4, r1
    852c:	ldr	r0, [r0, #32]
    8530:	ldr	r1, [r5, #40]	; 0x28
    8534:	adds	r0, r0, r1
    8538:	str	r0, [r5, #32]
    853c:	bcc	854c <rb_sha256_finish_ctx+0x30>
    8540:	ldr	r0, [r5, #36]	; 0x24
    8544:	add	r0, r0, #1
    8548:	str	r0, [r5, #36]	; 0x24
    854c:	cmp	r1, #55	; 0x37
    8550:	mov	r7, #56	; 0x38
    8554:	add	r6, r5, #44	; 0x2c
    8558:	movwhi	r7, #120	; 0x78
    855c:	add	r0, r6, r1
    8560:	sub	r2, r7, r1
    8564:	ldr	r1, [pc, #140]	; 85f8 <rb_sha256_finish_ctx+0xdc>
    8568:	add	r1, pc, r1
    856c:	bl	5104 <memcpy@plt>
    8570:	ldr	r0, [r5, #32]
    8574:	mov	r1, #65280	; 0xff00
    8578:	lsl	r3, r0, #11
    857c:	and	r2, r1, r0, lsr #5
    8580:	uxtb16	r3, r3
    8584:	orr	r3, r3, r0, lsl #27
    8588:	orr	r2, r3, r2
    858c:	ubfx	r3, r0, #21, #8
    8590:	orr	r2, r2, r3
    8594:	orr	r3, r7, #4
    8598:	str	r2, [r6, r3]
    859c:	movw	r3, #8160	; 0x1fe0
    85a0:	ldr	r2, [r5, #36]	; 0x24
    85a4:	and	r1, r1, r2, lsr #5
    85a8:	and	r3, r2, r3
    85ac:	orr	r1, r1, r3, lsl #11
    85b0:	ubfx	r3, r2, #21, #8
    85b4:	lsl	r2, r2, #3
    85b8:	orr	r0, r2, r0, lsr #29
    85bc:	mov	r2, r5
    85c0:	orr	r1, r1, r3
    85c4:	orr	r0, r1, r0, lsl #24
    85c8:	add	r1, r7, #8
    85cc:	str	r0, [r6, r7]
    85d0:	mov	r0, r6
    85d4:	bl	85fc <rb_sha256_process_block>
    85d8:	mov	r0, #0
    85dc:	ldr	r1, [r5, r0, lsl #2]
    85e0:	rev	r1, r1
    85e4:	str	r1, [r4, r0, lsl #2]
    85e8:	add	r0, r0, #1
    85ec:	cmp	r0, #8
    85f0:	bne	85dc <rb_sha256_finish_ctx+0xc0>
    85f4:	pop	{r4, r5, r6, r7, fp, pc}
    85f8:	.word	0x0000d058

000085fc <rb_sha256_process_block>:
    85fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8600:	add	fp, sp, #28
    8604:	sub	sp, sp, #304	; 0x130
    8608:	mov	r4, r0
    860c:	ldr	r0, [r2, #32]
    8610:	lsr	r3, r1, #2
    8614:	adds	r0, r0, r1
    8618:	str	r0, [r2, #32]
    861c:	ldr	r0, [r2, #4]
    8620:	ldr	r8, [r2]
    8624:	ldr	lr, [r2, #8]
    8628:	ldr	r9, [r2, #16]
    862c:	ldr	ip, [r2, #20]
    8630:	ldr	sl, [r2, #28]
    8634:	str	r0, [sp, #32]
    8638:	ldr	r0, [r2, #12]
    863c:	str	r0, [sp, #36]	; 0x24
    8640:	ldr	r0, [r2, #24]
    8644:	str	r0, [sp, #40]	; 0x28
    8648:	bcc	8658 <rb_sha256_process_block+0x5c>
    864c:	ldr	r1, [r2, #36]	; 0x24
    8650:	add	r1, r1, #1
    8654:	str	r1, [r2, #36]	; 0x24
    8658:	cmp	r3, #0
    865c:	str	r2, [sp]
    8660:	beq	8808 <rb_sha256_process_block+0x20c>
    8664:	add	r0, sp, #44	; 0x2c
    8668:	mov	r2, #0
    866c:	str	r3, [sp, #4]
    8670:	ldr	r3, [r4, -r2]
    8674:	rev	r3, r3
    8678:	str	r3, [r0, -r2]
    867c:	sub	r2, r2, #4
    8680:	cmn	r2, #64	; 0x40
    8684:	bne	8670 <rb_sha256_process_block+0x74>
    8688:	ldr	r6, [sp, #44]	; 0x2c
    868c:	sub	r4, r4, r2
    8690:	mov	r2, #0
    8694:	str	r4, [sp, #8]
    8698:	add	r0, sp, #44	; 0x2c
    869c:	add	r7, r0, r2
    86a0:	add	r2, r2, #4
    86a4:	ldr	r4, [r7, #56]	; 0x38
    86a8:	ldr	r3, [r7, #4]
    86ac:	ldr	r5, [r7, #36]	; 0x24
    86b0:	cmp	r2, #192	; 0xc0
    86b4:	ror	r0, r4, #19
    86b8:	ror	r1, r3, #18
    86bc:	add	r6, r6, r5
    86c0:	eor	r0, r0, r4, lsr #10
    86c4:	eor	r1, r1, r3, lsr #3
    86c8:	eor	r0, r0, r4, ror #17
    86cc:	eor	r1, r1, r3, ror #7
    86d0:	add	r0, r6, r0
    86d4:	mov	r6, r3
    86d8:	add	r0, r0, r1
    86dc:	str	r0, [r7, #64]	; 0x40
    86e0:	bne	8698 <rb_sha256_process_block+0x9c>
    86e4:	ldr	r6, [sp, #32]
    86e8:	ldr	r7, [sp, #36]	; 0x24
    86ec:	ldr	r3, [sp, #40]	; 0x28
    86f0:	mov	r2, #0
    86f4:	str	r8, [sp, #12]
    86f8:	str	lr, [sp, #16]
    86fc:	str	r9, [sp, #20]
    8700:	str	ip, [sp, #24]
    8704:	str	sl, [sp, #28]
    8708:	mov	r5, lr
    870c:	mov	lr, r6
    8710:	mov	r4, r3
    8714:	mov	r3, ip
    8718:	mov	r6, r8
    871c:	mov	ip, r9
    8720:	eor	r1, lr, r5
    8724:	and	r0, lr, r5
    8728:	and	r1, r8, r1
    872c:	eor	r0, r1, r0
    8730:	ror	r1, r8, #2
    8734:	eor	r1, r1, r8, ror #13
    8738:	eor	r1, r1, r8, ror #22
    873c:	add	r8, r1, r0
    8740:	bic	r1, r4, r9
    8744:	and	r0, r9, r3
    8748:	orr	r0, r0, r1
    874c:	ror	r1, r9, #6
    8750:	eor	r1, r1, r9, ror #11
    8754:	add	r0, r0, sl
    8758:	mov	sl, r4
    875c:	eor	r1, r1, r9, ror #25
    8760:	add	r0, r0, r1
    8764:	ldr	r1, [pc, #204]	; 8838 <rb_sha256_process_block+0x23c>
    8768:	add	r1, pc, r1
    876c:	ldr	r1, [r1, r2, lsl #2]
    8770:	add	r0, r0, r1
    8774:	add	r1, sp, #44	; 0x2c
    8778:	ldr	r1, [r1, r2, lsl #2]
    877c:	add	r2, r2, #1
    8780:	cmp	r2, #64	; 0x40
    8784:	add	r0, r0, r1
    8788:	add	r9, r0, r7
    878c:	add	r8, r8, r0
    8790:	mov	r7, r5
    8794:	bne	8708 <rb_sha256_process_block+0x10c>
    8798:	ldr	r0, [sp, #40]	; 0x28
    879c:	ldr	sl, [sp, #28]
    87a0:	add	r0, r3, r0
    87a4:	ldr	r3, [sp, #4]
    87a8:	add	sl, r4, sl
    87ac:	ldr	r4, [sp, #8]
    87b0:	str	r0, [sp, #40]	; 0x28
    87b4:	ldr	r0, [sp, #24]
    87b8:	subs	r3, r3, #16
    87bc:	add	r0, ip, r0
    87c0:	mov	ip, r0
    87c4:	ldr	r0, [sp, #20]
    87c8:	add	r0, r9, r0
    87cc:	mov	r9, r0
    87d0:	ldr	r0, [sp, #36]	; 0x24
    87d4:	add	r0, r5, r0
    87d8:	str	r0, [sp, #36]	; 0x24
    87dc:	ldr	r0, [sp, #16]
    87e0:	add	r0, lr, r0
    87e4:	mov	lr, r0
    87e8:	ldr	r0, [sp, #32]
    87ec:	add	r0, r6, r0
    87f0:	str	r0, [sp, #32]
    87f4:	ldr	r0, [sp, #12]
    87f8:	add	r0, r8, r0
    87fc:	mov	r8, r0
    8800:	add	r0, sp, #44	; 0x2c
    8804:	bne	8668 <rb_sha256_process_block+0x6c>
    8808:	ldr	r0, [sp]
    880c:	ldr	r1, [sp, #32]
    8810:	str	r8, [r0]
    8814:	stmib	r0, {r1, lr}
    8818:	add	r2, r0, #12
    881c:	ldr	r1, [sp, #36]	; 0x24
    8820:	stm	r2, {r1, r9, ip}
    8824:	ldr	r1, [sp, #40]	; 0x28
    8828:	str	r1, [r0, #24]
    882c:	str	sl, [r0, #28]
    8830:	sub	sp, fp, #28
    8834:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8838:	.word	0x0000cd54
    883c:	.word	0xe320f000

00008840 <rb_sha512_crypt_r>:
    8840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8844:	add	fp, sp, #28
    8848:	sub	sp, sp, #4
    884c:	vpush	{d8-d15}
    8850:	sub	sp, sp, #896	; 0x380
    8854:	str	r3, [fp, #-988]	; 0xfffffc24
    8858:	mov	sl, r0
    885c:	mov	r4, r2
    8860:	mov	r2, #3
    8864:	mov	r8, r1
    8868:	ldr	r0, [pc, #2180]	; 90f4 <rb_sha512_crypt_r+0x8b4>
    886c:	add	r0, pc, r0
    8870:	bl	5500 <strncmp@plt>
    8874:	ldr	r1, [pc, #2172]	; 90f8 <rb_sha512_crypt_r+0x8b8>
    8878:	cmp	r0, #0
    887c:	mov	r2, #7
    8880:	addeq	r8, r8, #3
    8884:	mov	r0, r8
    8888:	add	r1, pc, r1
    888c:	bl	5500 <strncmp@plt>
    8890:	movw	r1, #5000	; 0x1388
    8894:	cmp	r0, #0
    8898:	str	r4, [fp, #-980]	; 0xfffffc2c
    889c:	str	r1, [fp, #-948]	; 0xfffffc4c
    88a0:	beq	88ac <rb_sha512_crypt_r+0x6c>
    88a4:	mov	r0, #0
    88a8:	b	88f0 <rb_sha512_crypt_r+0xb0>
    88ac:	add	r0, r8, #7
    88b0:	sub	r1, fp, #168	; 0xa8
    88b4:	mov	r2, #10
    88b8:	bl	50f8 <strtoul@plt>
    88bc:	ldr	r1, [fp, #-168]	; 0xffffff58
    88c0:	ldrb	r2, [r1]
    88c4:	cmp	r2, #36	; 0x24
    88c8:	bne	9930 <rb_sha512_crypt_r+0x10f0>
    88cc:	movw	r2, #51711	; 0xc9ff
    88d0:	add	r8, r1, #1
    88d4:	movt	r2, #15258	; 0x3b9a
    88d8:	cmp	r0, r2
    88dc:	movcc	r2, r0
    88e0:	mov	r0, #1
    88e4:	cmp	r2, #1000	; 0x3e8
    88e8:	movls	r2, #1000	; 0x3e8
    88ec:	str	r2, [fp, #-948]	; 0xfffffc4c
    88f0:	str	r0, [fp, #-992]	; 0xfffffc20
    88f4:	ldr	r1, [pc, #2048]	; 90fc <rb_sha512_crypt_r+0x8bc>
    88f8:	mov	r0, r8
    88fc:	sub	r9, fp, #920	; 0x398
    8900:	sub	r4, fp, #576	; 0x240
    8904:	add	r1, pc, r1
    8908:	bl	54d0 <strcspn@plt>
    890c:	mov	r5, r0
    8910:	cmp	r0, #16
    8914:	mov	r0, sl
    8918:	movcs	r5, #16
    891c:	bl	50e0 <strlen@plt>
    8920:	mov	r6, r0
    8924:	tst	sl, #7
    8928:	str	r5, [fp, #-952]	; 0xfffffc48
    892c:	beq	8964 <rb_sha512_crypt_r+0x124>
    8930:	add	r0, r6, #15
    8934:	bic	r0, r0, #7
    8938:	sub	r0, sp, r0
    893c:	add	r5, r0, #8
    8940:	mov	sp, r0
    8944:	mov	r0, r5
    8948:	mov	r1, sl
    894c:	mov	r2, r6
    8950:	bl	5104 <memcpy@plt>
    8954:	str	r5, [fp, #-976]	; 0xfffffc30
    8958:	mov	sl, r5
    895c:	ldr	r5, [fp, #-952]	; 0xfffffc48
    8960:	b	896c <rb_sha512_crypt_r+0x12c>
    8964:	mov	r0, #0
    8968:	str	r0, [fp, #-976]	; 0xfffffc30
    896c:	add	r0, r9, #16
    8970:	tst	r8, #7
    8974:	str	r0, [fp, #-964]	; 0xfffffc3c
    8978:	add	r0, r9, #32
    897c:	str	r0, [fp, #-960]	; 0xfffffc40
    8980:	add	r0, r9, #48	; 0x30
    8984:	str	r0, [fp, #-956]	; 0xfffffc44
    8988:	add	r0, r4, #16
    898c:	str	r0, [fp, #-940]	; 0xfffffc54
    8990:	add	r0, r4, #32
    8994:	str	r0, [fp, #-936]	; 0xfffffc58
    8998:	add	r0, r4, #48	; 0x30
    899c:	str	r0, [fp, #-932]	; 0xfffffc5c
    89a0:	beq	89d4 <rb_sha512_crypt_r+0x194>
    89a4:	add	r0, r5, #15
    89a8:	bic	r0, r0, #7
    89ac:	sub	r0, sp, r0
    89b0:	add	r7, r0, #8
    89b4:	mov	sp, r0
    89b8:	mov	r0, r7
    89bc:	mov	r1, r8
    89c0:	mov	r2, r5
    89c4:	bl	5104 <memcpy@plt>
    89c8:	mov	r8, r7
    89cc:	str	r7, [fp, #-984]	; 0xfffffc28
    89d0:	b	89dc <rb_sha512_crypt_r+0x19c>
    89d4:	mov	r0, #0
    89d8:	str	r0, [fp, #-984]	; 0xfffffc28
    89dc:	add	r0, pc, #724	; 0x2d4
    89e0:	mov	r2, #80	; 0x50
    89e4:	vmov.i32	q8, #0	; 0x00000000
    89e8:	mov	r7, #0
    89ec:	vld1.64	{d8-d9}, [r0]
    89f0:	add	r0, pc, #720	; 0x2d0
    89f4:	add	r1, pc, #732	; 0x2dc
    89f8:	vld1.64	{d12-d13}, [r0]
    89fc:	mov	r0, r4
    8a00:	vld1.64	{d10-d11}, [r1]
    8a04:	vst1.64	{d8-d9}, [r0], r2
    8a08:	add	r1, pc, #728	; 0x2d8
    8a0c:	mov	r2, r4
    8a10:	vld1.64	{d14-d15}, [r1]
    8a14:	ldr	r1, [fp, #-940]	; 0xfffffc54
    8a18:	vst1.64	{d10-d11}, [r1]
    8a1c:	ldr	r1, [fp, #-936]	; 0xfffffc58
    8a20:	vst1.64	{d12-d13}, [r1]
    8a24:	ldr	r1, [fp, #-932]	; 0xfffffc5c
    8a28:	vst1.64	{d14-d15}, [r1]
    8a2c:	str	r7, [r0]
    8a30:	add	r0, r4, #64	; 0x40
    8a34:	mov	r1, r6
    8a38:	str	r7, [fp, #-492]	; 0xfffffe14
    8a3c:	str	r0, [fp, #-944]	; 0xfffffc50
    8a40:	vst1.64	{d16-d17}, [r0]
    8a44:	mov	r0, sl
    8a48:	bl	9954 <rb_sha512_process_bytes>
    8a4c:	mov	r0, r8
    8a50:	mov	r1, r5
    8a54:	mov	r2, r4
    8a58:	bl	9954 <rb_sha512_process_bytes>
    8a5c:	mov	r0, r9
    8a60:	mov	r1, #80	; 0x50
    8a64:	vmov.i32	q8, #0	; 0x00000000
    8a68:	mov	r2, r9
    8a6c:	vst1.64	{d8-d9}, [r0], r1
    8a70:	ldr	r1, [fp, #-964]	; 0xfffffc3c
    8a74:	vst1.64	{d10-d11}, [r1]
    8a78:	ldr	r1, [fp, #-960]	; 0xfffffc40
    8a7c:	vst1.64	{d12-d13}, [r1]
    8a80:	ldr	r1, [fp, #-956]	; 0xfffffc44
    8a84:	vst1.64	{d14-d15}, [r1]
    8a88:	str	r7, [r0]
    8a8c:	add	r0, r9, #64	; 0x40
    8a90:	mov	r1, r6
    8a94:	str	r7, [fp, #-836]	; 0xfffffcbc
    8a98:	str	r0, [fp, #-972]	; 0xfffffc34
    8a9c:	vst1.64	{d16-d17}, [r0]
    8aa0:	mov	r0, sl
    8aa4:	bl	9954 <rb_sha512_process_bytes>
    8aa8:	mov	r0, r8
    8aac:	mov	r1, r5
    8ab0:	mov	r2, r9
    8ab4:	bl	9954 <rb_sha512_process_bytes>
    8ab8:	mov	r0, sl
    8abc:	mov	r1, r6
    8ac0:	mov	r2, r9
    8ac4:	bl	9954 <rb_sha512_process_bytes>
    8ac8:	sub	r1, fp, #168	; 0xa8
    8acc:	mov	r0, r9
    8ad0:	bl	9af0 <rb_sha512_finish_ctx>
    8ad4:	cmp	r6, #65	; 0x41
    8ad8:	mov	r1, r6
    8adc:	str	r6, [fp, #-924]	; 0xfffffc64
    8ae0:	bcc	8b20 <rb_sha512_crypt_r+0x2e0>
    8ae4:	sub	r0, r6, #65	; 0x41
    8ae8:	sub	r4, fp, #168	; 0xa8
    8aec:	sub	r7, fp, #576	; 0x240
    8af0:	bic	r5, r0, #63	; 0x3f
    8af4:	mov	r0, r4
    8af8:	mov	r1, #64	; 0x40
    8afc:	mov	r2, r7
    8b00:	bl	9954 <rb_sha512_process_bytes>
    8b04:	sub	r6, r6, #64	; 0x40
    8b08:	cmp	r6, #64	; 0x40
    8b0c:	bhi	8af4 <rb_sha512_crypt_r+0x2b4>
    8b10:	ldr	r6, [fp, #-924]	; 0xfffffc64
    8b14:	sub	r0, r6, r5
    8b18:	ldr	r5, [fp, #-952]	; 0xfffffc48
    8b1c:	sub	r1, r0, #64	; 0x40
    8b20:	sub	r0, fp, #168	; 0xa8
    8b24:	sub	r2, fp, #576	; 0x240
    8b28:	str	r8, [fp, #-968]	; 0xfffffc38
    8b2c:	bl	9954 <rb_sha512_process_bytes>
    8b30:	cmp	r6, #0
    8b34:	beq	8b8c <rb_sha512_crypt_r+0x34c>
    8b38:	clz	r0, r6
    8b3c:	sub	r4, fp, #576	; 0x240
    8b40:	mov	r5, #0
    8b44:	sub	r7, fp, #168	; 0xa8
    8b48:	lsr	r8, r0, #5
    8b4c:	tst	r6, #1
    8b50:	bne	8b60 <rb_sha512_crypt_r+0x320>
    8b54:	ldr	r1, [fp, #-924]	; 0xfffffc64
    8b58:	mov	r0, sl
    8b5c:	b	8b68 <rb_sha512_crypt_r+0x328>
    8b60:	mov	r0, r7
    8b64:	mov	r1, #64	; 0x40
    8b68:	mov	r2, r4
    8b6c:	bl	9954 <rb_sha512_process_bytes>
    8b70:	lsr	r0, r6, #1
    8b74:	cmp	r5, r6, lsr #1
    8b78:	mov	r6, r0
    8b7c:	bne	8b4c <rb_sha512_crypt_r+0x30c>
    8b80:	ldr	r5, [fp, #-952]	; 0xfffffc48
    8b84:	ldr	r6, [fp, #-924]	; 0xfffffc64
    8b88:	b	8b90 <rb_sha512_crypt_r+0x350>
    8b8c:	mov	r8, #1
    8b90:	sub	r0, fp, #576	; 0x240
    8b94:	sub	r1, fp, #168	; 0xa8
    8b98:	bl	9af0 <rb_sha512_finish_ctx>
    8b9c:	add	r0, pc, #276	; 0x114
    8ba0:	mov	r7, #0
    8ba4:	cmp	r8, #0
    8ba8:	vld1.64	{d16-d17}, [r0]
    8bac:	add	r0, pc, #276	; 0x114
    8bb0:	add	r1, pc, #288	; 0x120
    8bb4:	vld1.64	{d18-d19}, [r1]
    8bb8:	vld1.64	{d20-d21}, [r0]
    8bbc:	vst1.64	{d16-d17}, [r9]
    8bc0:	add	r0, pc, #288	; 0x120
    8bc4:	ldr	r1, [fp, #-972]	; 0xfffffc34
    8bc8:	vld1.64	{d16-d17}, [r0]
    8bcc:	ldr	r0, [fp, #-964]	; 0xfffffc3c
    8bd0:	vst1.64	{d18-d19}, [r0]
    8bd4:	ldr	r0, [fp, #-960]	; 0xfffffc40
    8bd8:	vst1.64	{d20-d21}, [r0]
    8bdc:	ldr	r0, [fp, #-956]	; 0xfffffc44
    8be0:	vst1.64	{d16-d17}, [r0]
    8be4:	vmov.i32	q8, #0	; 0x00000000
    8be8:	mov	r0, #20
    8bec:	str	r7, [r1, #16]
    8bf0:	vst1.64	{d16-d17}, [r1], r0
    8bf4:	str	r7, [r1]
    8bf8:	beq	8c20 <rb_sha512_crypt_r+0x3e0>
    8bfc:	sub	r0, fp, #920	; 0x398
    8c00:	sub	r1, fp, #232	; 0xe8
    8c04:	bl	9af0 <rb_sha512_finish_ctx>
    8c08:	add	r0, r6, #7
    8c0c:	bic	r0, r0, #7
    8c10:	sub	r0, sp, r0
    8c14:	mov	sp, r0
    8c18:	str	r0, [fp, #-928]	; 0xfffffc60
    8c1c:	b	8d00 <rb_sha512_crypt_r+0x4c0>
    8c20:	sub	r7, fp, #920	; 0x398
    8c24:	mov	r4, r6
    8c28:	mov	r0, sl
    8c2c:	mov	r1, r6
    8c30:	mov	r2, r7
    8c34:	bl	9954 <rb_sha512_process_bytes>
    8c38:	subs	r4, r4, #1
    8c3c:	bne	8c28 <rb_sha512_crypt_r+0x3e8>
    8c40:	sub	r8, fp, #232	; 0xe8
    8c44:	sub	r0, fp, #920	; 0x398
    8c48:	mov	r1, r8
    8c4c:	bl	9af0 <rb_sha512_finish_ctx>
    8c50:	add	r0, r6, #7
    8c54:	bic	r0, r0, #7
    8c58:	sub	lr, sp, r0
    8c5c:	mov	sp, lr
    8c60:	cmp	r6, #64	; 0x40
    8c64:	str	lr, [fp, #-928]	; 0xfffffc60
    8c68:	bcc	8cf8 <rb_sha512_crypt_r+0x4b8>
    8c6c:	mov	ip, #0
    8c70:	mov	r2, r8
    8c74:	sub	r1, lr, ip
    8c78:	sub	ip, ip, #64	; 0x40
    8c7c:	ldm	r2!, {r3, r4, r5, r6, r7}
    8c80:	stmia	r1!, {r3, r4, r5, r6, r7}
    8c84:	ldm	r2!, {r3, r4, r5, r6, r7}
    8c88:	stmia	r1!, {r3, r4, r5, r6, r7}
    8c8c:	ldm	r2, {r0, r3, r4, r5, r6, r7}
    8c90:	stm	r1, {r0, r3, r4, r5, r6, r7}
    8c94:	ldr	r1, [fp, #-924]	; 0xfffffc64
    8c98:	add	r0, r1, ip
    8c9c:	cmp	r0, #63	; 0x3f
    8ca0:	bhi	8c70 <rb_sha512_crypt_r+0x430>
    8ca4:	ldr	r5, [fp, #-952]	; 0xfffffc48
    8ca8:	sub	r0, lr, ip
    8cac:	and	r7, r1, #63	; 0x3f
    8cb0:	b	8d00 <rb_sha512_crypt_r+0x4c0>
    8cb4:	nop	{0}
    8cb8:	.word	0xf3bcc908
    8cbc:	.word	0x6a09e667
    8cc0:	.word	0x84caa73b
    8cc4:	.word	0xbb67ae85
    8cc8:	.word	0xade682d1
    8ccc:	.word	0x510e527f
    8cd0:	.word	0x2b3e6c1f
    8cd4:	.word	0x9b05688c
    8cd8:	.word	0xfe94f82b
    8cdc:	.word	0x3c6ef372
    8ce0:	.word	0x5f1d36f1
    8ce4:	.word	0xa54ff53a
    8ce8:	.word	0xfb41bd6b
    8cec:	.word	0x1f83d9ab
    8cf0:	.word	0x137e2179
    8cf4:	.word	0x5be0cd19
    8cf8:	mov	r0, lr
    8cfc:	mov	r7, r6
    8d00:	sub	r1, fp, #232	; 0xe8
    8d04:	mov	r2, r7
    8d08:	bl	5104 <memcpy@plt>
    8d0c:	sub	r0, pc, #92	; 0x5c
    8d10:	mov	r4, #0
    8d14:	sub	r7, fp, #576	; 0x240
    8d18:	vld1.64	{d16-d17}, [r0]
    8d1c:	sub	r0, pc, #76	; 0x4c
    8d20:	vld1.64	{d18-d19}, [r0]
    8d24:	vst1.64	{d16-d17}, [r9]
    8d28:	sub	r0, pc, #104	; 0x68
    8d2c:	vld1.64	{d16-d17}, [r0]
    8d30:	ldr	r0, [fp, #-964]	; 0xfffffc3c
    8d34:	vst1.64	{d18-d19}, [r0]
    8d38:	sub	r0, pc, #88	; 0x58
    8d3c:	ldr	r1, [fp, #-972]	; 0xfffffc34
    8d40:	ldr	r6, [fp, #-968]	; 0xfffffc38
    8d44:	vld1.64	{d18-d19}, [r0]
    8d48:	ldr	r0, [fp, #-960]	; 0xfffffc40
    8d4c:	vst1.64	{d16-d17}, [r0]
    8d50:	ldr	r0, [fp, #-956]	; 0xfffffc44
    8d54:	vmov.i32	q8, #0	; 0x00000000
    8d58:	vst1.64	{d18-d19}, [r0]
    8d5c:	mov	r0, #20
    8d60:	str	r4, [r1, #16]
    8d64:	vst1.64	{d16-d17}, [r1], r0
    8d68:	str	r4, [r1]
    8d6c:	mov	r0, r6
    8d70:	mov	r1, r5
    8d74:	mov	r2, r9
    8d78:	bl	9954 <rb_sha512_process_bytes>
    8d7c:	ldrb	r0, [fp, #-168]	; 0xffffff58
    8d80:	add	r4, r4, #1
    8d84:	add	r0, r0, #16
    8d88:	cmp	r4, r0
    8d8c:	bcc	8d6c <rb_sha512_crypt_r+0x52c>
    8d90:	sub	r4, fp, #232	; 0xe8
    8d94:	sub	r0, fp, #920	; 0x398
    8d98:	mov	r1, r4
    8d9c:	bl	9af0 <rb_sha512_finish_ctx>
    8da0:	add	r0, r5, #7
    8da4:	bic	r0, r0, #7
    8da8:	sub	r0, sp, r0
    8dac:	mov	sp, r0
    8db0:	mov	r1, r4
    8db4:	mov	r2, r5
    8db8:	str	r0, [fp, #-956]	; 0xfffffc44
    8dbc:	bl	5104 <memcpy@plt>
    8dc0:	vmov.i32	q4, #0	; 0x00000000
    8dc4:	sub	r5, fp, #168	; 0xa8
    8dc8:	mov	r9, #0
    8dcc:	sub	r0, pc, #284	; 0x11c
    8dd0:	mov	r2, #20
    8dd4:	ands	sl, r9, #1
    8dd8:	vld1.64	{d16-d17}, [r0]
    8ddc:	sub	r0, pc, #284	; 0x11c
    8de0:	sub	r1, pc, #272	; 0x110
    8de4:	vld1.64	{d18-d19}, [r1]
    8de8:	vld1.64	{d20-d21}, [r0]
    8dec:	mov	r1, #0
    8df0:	vst1.64	{d16-d17}, [r7]
    8df4:	sub	r0, pc, #276	; 0x114
    8df8:	vld1.64	{d16-d17}, [r0]
    8dfc:	ldr	r0, [fp, #-940]	; 0xfffffc54
    8e00:	vst1.64	{d18-d19}, [r0]
    8e04:	ldr	r0, [fp, #-936]	; 0xfffffc58
    8e08:	vst1.64	{d20-d21}, [r0]
    8e0c:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    8e10:	vst1.64	{d16-d17}, [r0]
    8e14:	ldr	r0, [fp, #-944]	; 0xfffffc50
    8e18:	str	r1, [r0, #16]
    8e1c:	vst1.64	{d8-d9}, [r0], r2
    8e20:	str	r1, [r0]
    8e24:	movw	r0, #18725	; 0x4925
    8e28:	movt	r0, #9362	; 0x2492
    8e2c:	umull	r0, r1, r9, r0
    8e30:	sub	r0, r9, r1
    8e34:	add	r6, r1, r0, lsr #1
    8e38:	lsr	r0, r6, #2
    8e3c:	lsl	r8, r0, #3
    8e40:	movw	r0, #43691	; 0xaaab
    8e44:	movt	r0, #43690	; 0xaaaa
    8e48:	umull	r0, r1, r9, r0
    8e4c:	lsr	r0, r1, #1
    8e50:	add	r4, r0, r0, lsl #1
    8e54:	beq	8e64 <rb_sha512_crypt_r+0x624>
    8e58:	ldr	r0, [fp, #-928]	; 0xfffffc60
    8e5c:	ldr	r1, [fp, #-924]	; 0xfffffc64
    8e60:	b	8e6c <rb_sha512_crypt_r+0x62c>
    8e64:	mov	r0, r5
    8e68:	mov	r1, #64	; 0x40
    8e6c:	mov	r2, r7
    8e70:	bl	9954 <rb_sha512_process_bytes>
    8e74:	sub	r6, r8, r6, lsr #2
    8e78:	cmp	r4, r9
    8e7c:	sub	r7, fp, #576	; 0x240
    8e80:	beq	8e94 <rb_sha512_crypt_r+0x654>
    8e84:	ldr	r0, [fp, #-956]	; 0xfffffc44
    8e88:	ldr	r1, [fp, #-952]	; 0xfffffc48
    8e8c:	mov	r2, r7
    8e90:	bl	9954 <rb_sha512_process_bytes>
    8e94:	ldr	r4, [fp, #-924]	; 0xfffffc64
    8e98:	cmp	r6, r9
    8e9c:	beq	8eb0 <rb_sha512_crypt_r+0x670>
    8ea0:	ldr	r0, [fp, #-928]	; 0xfffffc60
    8ea4:	mov	r1, r4
    8ea8:	mov	r2, r7
    8eac:	bl	9954 <rb_sha512_process_bytes>
    8eb0:	cmp	sl, #0
    8eb4:	beq	8ec4 <rb_sha512_crypt_r+0x684>
    8eb8:	mov	r0, r5
    8ebc:	mov	r1, #64	; 0x40
    8ec0:	b	8ecc <rb_sha512_crypt_r+0x68c>
    8ec4:	ldr	r0, [fp, #-928]	; 0xfffffc60
    8ec8:	mov	r1, r4
    8ecc:	mov	r2, r7
    8ed0:	bl	9954 <rb_sha512_process_bytes>
    8ed4:	mov	r0, r7
    8ed8:	mov	r1, r5
    8edc:	bl	9af0 <rb_sha512_finish_ctx>
    8ee0:	ldr	r0, [fp, #-948]	; 0xfffffc4c
    8ee4:	add	r9, r9, #1
    8ee8:	cmp	r0, r9
    8eec:	bne	8dcc <rb_sha512_crypt_r+0x58c>
    8ef0:	ldr	r4, [fp, #-988]	; 0xfffffc24
    8ef4:	ldr	r8, [fp, #-980]	; 0xfffffc2c
    8ef8:	mov	r1, #0
    8efc:	bic	r7, r4, r4, asr #31
    8f00:	mov	r0, r8
    8f04:	mov	r2, r7
    8f08:	bl	4f3c <memset@plt>
    8f0c:	ldr	r1, [pc, #2608]	; 9944 <rb_sha512_crypt_r+0x1104>
    8f10:	mov	r0, r8
    8f14:	mov	r2, r7
    8f18:	add	r1, pc, r1
    8f1c:	bl	4e94 <strncpy@plt>
    8f20:	bl	50e0 <strlen@plt>
    8f24:	adds	r5, r8, r0
    8f28:	ldr	r0, [fp, #-992]	; 0xfffffc20
    8f2c:	sub	r4, r4, #3
    8f30:	addeq	r5, r8, r7
    8f34:	cmp	r0, #0
    8f38:	beq	8f70 <rb_sha512_crypt_r+0x730>
    8f3c:	sub	sp, sp, #8
    8f40:	ldr	r0, [fp, #-948]	; 0xfffffc4c
    8f44:	bic	r1, r4, r4, asr #31
    8f48:	str	r0, [sp]
    8f4c:	mov	r0, r5
    8f50:	ldr	r2, [pc, #2544]	; 9948 <rb_sha512_crypt_r+0x1108>
    8f54:	ldr	r3, [pc, #2544]	; 994c <rb_sha512_crypt_r+0x110c>
    8f58:	add	r2, pc, r2
    8f5c:	add	r3, pc, r3
    8f60:	bl	54a0 <snprintf@plt>
    8f64:	add	sp, sp, #8
    8f68:	sub	r4, r4, r0
    8f6c:	add	r5, r5, r0
    8f70:	ldr	r6, [fp, #-952]	; 0xfffffc48
    8f74:	bic	r7, r4, r4, asr #31
    8f78:	mov	r0, r5
    8f7c:	mov	r1, #0
    8f80:	mov	r9, #0
    8f84:	cmp	r7, r6
    8f88:	movcs	r7, r6
    8f8c:	mov	r2, r7
    8f90:	bl	4f3c <memset@plt>
    8f94:	ldr	r1, [fp, #-968]	; 0xfffffc38
    8f98:	mov	r0, r5
    8f9c:	mov	r2, r7
    8fa0:	mov	r5, r6
    8fa4:	bl	4e94 <strncpy@plt>
    8fa8:	mov	r0, r8
    8fac:	bl	50e0 <strlen@plt>
    8fb0:	adds	r1, r8, r0
    8fb4:	sub	r2, r4, r7
    8fb8:	addeq	r1, r8, r6
    8fbc:	cmp	r2, #1
    8fc0:	movge	r0, #36	; 0x24
    8fc4:	strbge	r0, [r1]
    8fc8:	subge	r0, r2, #1
    8fcc:	cmpge	r0, #1
    8fd0:	bge	9100 <rb_sha512_crypt_r+0x8c0>
    8fd4:	bl	55e4 <__errno_location@plt>
    8fd8:	mov	r1, #34	; 0x22
    8fdc:	str	r1, [r0]
    8fe0:	sub	r0, pc, #816	; 0x330
    8fe4:	sub	r6, fp, #576	; 0x240
    8fe8:	vmov.i32	q4, #0	; 0x00000000
    8fec:	vld1.64	{d16-d17}, [r0]
    8ff0:	sub	r0, pc, #816	; 0x330
    8ff4:	sub	r1, pc, #804	; 0x324
    8ff8:	vld1.64	{d18-d19}, [r1]
    8ffc:	vld1.64	{d20-d21}, [r0]
    9000:	mov	r1, #20
    9004:	vst1.64	{d16-d17}, [r6]
    9008:	sub	r0, pc, #808	; 0x328
    900c:	ldr	r2, [fp, #-944]	; 0xfffffc50
    9010:	vld1.64	{d16-d17}, [r0]
    9014:	ldr	r0, [fp, #-940]	; 0xfffffc54
    9018:	vst1.64	{d18-d19}, [r0]
    901c:	ldr	r0, [fp, #-936]	; 0xfffffc58
    9020:	vst1.64	{d20-d21}, [r0]
    9024:	ldr	r0, [fp, #-932]	; 0xfffffc5c
    9028:	vst1.64	{d16-d17}, [r0]
    902c:	mov	r0, #0
    9030:	str	r0, [r2, #16]
    9034:	vst1.64	{d8-d9}, [r2], r1
    9038:	sub	r1, fp, #168	; 0xa8
    903c:	str	r0, [r2]
    9040:	mov	r0, r6
    9044:	bl	9af0 <rb_sha512_finish_ctx>
    9048:	sub	r0, fp, #232	; 0xe8
    904c:	ldr	r4, [fp, #-924]	; 0xfffffc64
    9050:	mov	r1, r0
    9054:	add	r0, r0, #32
    9058:	vst1.64	{d8-d9}, [r0]
    905c:	add	r0, r1, #16
    9060:	vst1.64	{d8-d9}, [r0]
    9064:	mov	r0, #48	; 0x30
    9068:	vst1.64	{d8-d9}, [r1], r0
    906c:	ldr	r0, [fp, #-928]	; 0xfffffc60
    9070:	mov	r2, r4
    9074:	vst1.64	{d8-d9}, [r1]
    9078:	mov	r1, #0
    907c:	bl	4f3c <memset@plt>
    9080:	ldr	r0, [fp, #-956]	; 0xfffffc44
    9084:	mov	r1, #0
    9088:	mov	r2, r5
    908c:	bl	4f3c <memset@plt>
    9090:	mov	r0, r6
    9094:	mov	r1, #0
    9098:	mov	r2, #344	; 0x158
    909c:	bl	4f3c <memset@plt>
    90a0:	sub	r0, fp, #920	; 0x398
    90a4:	mov	r1, #0
    90a8:	mov	r2, #344	; 0x158
    90ac:	bl	4f3c <memset@plt>
    90b0:	ldr	r0, [fp, #-976]	; 0xfffffc30
    90b4:	cmp	r0, #0
    90b8:	beq	90c8 <rb_sha512_crypt_r+0x888>
    90bc:	mov	r1, #0
    90c0:	mov	r2, r4
    90c4:	bl	4f3c <memset@plt>
    90c8:	ldr	r0, [fp, #-984]	; 0xfffffc28
    90cc:	cmp	r0, #0
    90d0:	beq	90e0 <rb_sha512_crypt_r+0x8a0>
    90d4:	mov	r1, #0
    90d8:	mov	r2, r5
    90dc:	bl	4f3c <memset@plt>
    90e0:	mov	r0, r9
    90e4:	sub	sp, fp, #96	; 0x60
    90e8:	vpop	{d8-d15}
    90ec:	add	sp, sp, #4
    90f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90f4:	.word	0x0000cd94
    90f8:	.word	0x0000cd7c
    90fc:	.word	0x0000c876
    9100:	ldrb	r3, [fp, #-147]	; 0xffffff6d
    9104:	ldrb	r0, [fp, #-168]	; 0xffffff58
    9108:	ldrb	r7, [fp, #-126]	; 0xffffff82
    910c:	ldr	ip, [pc, #2108]	; 9950 <rb_sha512_crypt_r+0x1110>
    9110:	lsl	r3, r3, #8
    9114:	add	ip, pc, ip
    9118:	orr	r0, r3, r0, lsl #16
    911c:	add	r3, r1, #1
    9120:	orr	r6, r0, r7
    9124:	mov	r7, #0
    9128:	and	r0, r6, #63	; 0x3f
    912c:	ldrb	r0, [ip, r0]
    9130:	strb	r0, [r3, -r7]
    9134:	add	r0, r2, r7
    9138:	sub	r5, r0, #2
    913c:	sub	r0, r7, #1
    9140:	cmp	r5, #1
    9144:	blt	9158 <rb_sha512_crypt_r+0x918>
    9148:	cmn	r7, #3
    914c:	lsr	r6, r6, #6
    9150:	mov	r7, r0
    9154:	bne	9128 <rb_sha512_crypt_r+0x8e8>
    9158:	ldr	r5, [fp, #-952]	; 0xfffffc48
    915c:	add	r7, r2, r0
    9160:	sub	r7, r7, #1
    9164:	cmp	r7, #1
    9168:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    916c:	ldrb	r5, [fp, #-125]	; 0xffffff83
    9170:	ldrb	r6, [fp, #-146]	; 0xffffff6e
    9174:	ldrb	r7, [fp, #-167]	; 0xffffff59
    9178:	mvn	r4, #2
    917c:	lsl	r5, r5, #8
    9180:	orr	r6, r5, r6, lsl #16
    9184:	sub	r5, r2, #2
    9188:	orr	r6, r6, r7
    918c:	and	r7, r6, #63	; 0x3f
    9190:	ldrb	r7, [ip, r7]
    9194:	strb	r7, [r3, -r0]
    9198:	add	r7, r5, r0
    919c:	sub	r0, r0, #1
    91a0:	cmp	r7, #1
    91a4:	blt	91bc <rb_sha512_crypt_r+0x97c>
    91a8:	add	r7, r4, #1
    91ac:	cmp	r4, #0
    91b0:	lsr	r6, r6, #6
    91b4:	mov	r4, r7
    91b8:	bne	918c <rb_sha512_crypt_r+0x94c>
    91bc:	ldr	r5, [fp, #-952]	; 0xfffffc48
    91c0:	add	r2, r2, r0
    91c4:	sub	r6, r2, #1
    91c8:	cmp	r6, #1
    91cc:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    91d0:	sub	r2, r3, r0
    91d4:	sub	r0, r1, r0
    91d8:	ldrb	r7, [fp, #-124]	; 0xffffff84
    91dc:	ldrb	r3, [fp, #-145]	; 0xffffff6f
    91e0:	add	r1, r0, #1
    91e4:	ldrb	r0, [fp, #-166]	; 0xffffff5a
    91e8:	lsl	r0, r0, #8
    91ec:	orr	r0, r0, r7, lsl #16
    91f0:	mvn	r7, #2
    91f4:	orr	r3, r0, r3
    91f8:	and	r0, r3, #63	; 0x3f
    91fc:	sub	r6, r6, #1
    9200:	add	r1, r1, #1
    9204:	ldrb	r0, [ip, r0]
    9208:	cmp	r6, #1
    920c:	strb	r0, [r2], #1
    9210:	blt	9228 <rb_sha512_crypt_r+0x9e8>
    9214:	add	r0, r7, #1
    9218:	cmp	r7, #0
    921c:	lsr	r3, r3, #6
    9220:	mov	r7, r0
    9224:	bne	91f8 <rb_sha512_crypt_r+0x9b8>
    9228:	cmp	r6, #1
    922c:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    9230:	ldrb	r3, [fp, #-144]	; 0xffffff70
    9234:	ldrb	r0, [fp, #-165]	; 0xffffff5b
    9238:	ldrb	r7, [fp, #-123]	; 0xffffff85
    923c:	add	r6, r6, #1
    9240:	mvn	r5, #2
    9244:	lsl	r3, r3, #8
    9248:	orr	r0, r3, r0, lsl #16
    924c:	orr	r7, r0, r7
    9250:	and	r0, r7, #63	; 0x3f
    9254:	sub	r3, r6, #1
    9258:	add	r1, r1, #1
    925c:	ldrb	r0, [ip, r0]
    9260:	strb	r0, [r2], #1
    9264:	sub	r0, r6, #2
    9268:	cmp	r0, #1
    926c:	blt	9288 <rb_sha512_crypt_r+0xa48>
    9270:	add	r0, r5, #1
    9274:	cmp	r5, #0
    9278:	lsr	r7, r7, #6
    927c:	mov	r6, r3
    9280:	mov	r5, r0
    9284:	bne	9250 <rb_sha512_crypt_r+0xa10>
    9288:	ldr	r5, [fp, #-952]	; 0xfffffc48
    928c:	sub	r0, r3, #1
    9290:	cmp	r0, #1
    9294:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    9298:	ldrb	r6, [fp, #-122]	; 0xffffff86
    929c:	ldrb	r7, [fp, #-143]	; 0xffffff71
    92a0:	ldrb	r0, [fp, #-164]	; 0xffffff5c
    92a4:	mvn	r5, #2
    92a8:	lsl	r6, r6, #8
    92ac:	orr	r7, r6, r7, lsl #16
    92b0:	orr	r6, r7, r0
    92b4:	and	r0, r6, #63	; 0x3f
    92b8:	sub	r7, r3, #1
    92bc:	add	r1, r1, #1
    92c0:	ldrb	r0, [ip, r0]
    92c4:	strb	r0, [r2], #1
    92c8:	sub	r0, r3, #2
    92cc:	cmp	r0, #1
    92d0:	blt	92ec <rb_sha512_crypt_r+0xaac>
    92d4:	add	r0, r5, #1
    92d8:	cmp	r5, #0
    92dc:	lsr	r6, r6, #6
    92e0:	mov	r3, r7
    92e4:	mov	r5, r0
    92e8:	bne	92b4 <rb_sha512_crypt_r+0xa74>
    92ec:	ldr	r5, [fp, #-952]	; 0xfffffc48
    92f0:	sub	r0, r7, #1
    92f4:	cmp	r0, #1
    92f8:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    92fc:	ldrb	r0, [fp, #-163]	; 0xffffff5d
    9300:	ldrb	r3, [fp, #-121]	; 0xffffff87
    9304:	ldrb	r2, [fp, #-142]	; 0xffffff72
    9308:	rsb	r1, r1, #0
    930c:	mvn	r5, #2
    9310:	mov	r6, #0
    9314:	lsl	r0, r0, #8
    9318:	orr	r0, r0, r3, lsl #16
    931c:	orr	r3, r0, r2
    9320:	and	r0, r3, #63	; 0x3f
    9324:	sub	r2, r7, #1
    9328:	ldrb	r0, [ip, r0]
    932c:	strb	r0, [r6, -r1]
    9330:	sub	r0, r7, #2
    9334:	sub	r1, r1, #1
    9338:	cmp	r0, #1
    933c:	blt	9358 <rb_sha512_crypt_r+0xb18>
    9340:	add	r0, r5, #1
    9344:	cmp	r5, #0
    9348:	lsr	r3, r3, #6
    934c:	mov	r7, r2
    9350:	mov	r5, r0
    9354:	bne	9320 <rb_sha512_crypt_r+0xae0>
    9358:	ldr	r5, [fp, #-952]	; 0xfffffc48
    935c:	sub	r0, r2, #1
    9360:	cmp	r0, #1
    9364:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    9368:	ldrb	r3, [fp, #-141]	; 0xffffff73
    936c:	ldrb	r0, [fp, #-162]	; 0xffffff5e
    9370:	ldrb	r7, [fp, #-120]	; 0xffffff88
    9374:	rsb	r1, r1, #0
    9378:	mvn	r6, #2
    937c:	lsl	r3, r3, #8
    9380:	orr	r0, r3, r0, lsl #16
    9384:	orr	r7, r0, r7
    9388:	and	r0, r7, #63	; 0x3f
    938c:	sub	r3, r2, #1
    9390:	ldrb	r0, [ip, r0]
    9394:	strb	r0, [r1], #1
    9398:	sub	r0, r2, #2
    939c:	cmp	r0, #1
    93a0:	blt	93bc <rb_sha512_crypt_r+0xb7c>
    93a4:	add	r0, r6, #1
    93a8:	cmp	r6, #0
    93ac:	lsr	r7, r7, #6
    93b0:	mov	r2, r3
    93b4:	mov	r6, r0
    93b8:	bne	9388 <rb_sha512_crypt_r+0xb48>
    93bc:	sub	r0, r3, #1
    93c0:	cmp	r0, #1
    93c4:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    93c8:	ldrb	r7, [fp, #-119]	; 0xffffff89
    93cc:	ldrb	r2, [fp, #-140]	; 0xffffff74
    93d0:	ldrb	r0, [fp, #-161]	; 0xffffff5f
    93d4:	mvn	r6, #2
    93d8:	lsl	r7, r7, #8
    93dc:	orr	r2, r7, r2, lsl #16
    93e0:	orr	r7, r2, r0
    93e4:	and	r0, r7, #63	; 0x3f
    93e8:	sub	r2, r3, #1
    93ec:	ldrb	r0, [ip, r0]
    93f0:	strb	r0, [r1], #1
    93f4:	sub	r0, r3, #2
    93f8:	cmp	r0, #1
    93fc:	blt	9418 <rb_sha512_crypt_r+0xbd8>
    9400:	add	r0, r6, #1
    9404:	cmp	r6, #0
    9408:	lsr	r7, r7, #6
    940c:	mov	r3, r2
    9410:	mov	r6, r0
    9414:	bne	93e4 <rb_sha512_crypt_r+0xba4>
    9418:	sub	r0, r2, #1
    941c:	cmp	r0, #1
    9420:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    9424:	ldrb	r0, [fp, #-160]	; 0xffffff60
    9428:	ldrb	r7, [fp, #-118]	; 0xffffff8a
    942c:	ldrb	r3, [fp, #-139]	; 0xffffff75
    9430:	mvn	r6, #2
    9434:	lsl	r0, r0, #8
    9438:	orr	r0, r0, r7, lsl #16
    943c:	orr	r7, r0, r3
    9440:	and	r0, r7, #63	; 0x3f
    9444:	sub	r3, r2, #1
    9448:	ldrb	r0, [ip, r0]
    944c:	strb	r0, [r1], #1
    9450:	sub	r0, r2, #2
    9454:	cmp	r0, #1
    9458:	blt	9474 <rb_sha512_crypt_r+0xc34>
    945c:	add	r0, r6, #1
    9460:	cmp	r6, #0
    9464:	lsr	r7, r7, #6
    9468:	mov	r2, r3
    946c:	mov	r6, r0
    9470:	bne	9440 <rb_sha512_crypt_r+0xc00>
    9474:	sub	r0, r3, #1
    9478:	cmp	r0, #1
    947c:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    9480:	ldrb	r2, [fp, #-138]	; 0xffffff76
    9484:	ldrb	r0, [fp, #-159]	; 0xffffff61
    9488:	ldrb	r7, [fp, #-117]	; 0xffffff8b
    948c:	mvn	r6, #2
    9490:	lsl	r2, r2, #8
    9494:	orr	r0, r2, r0, lsl #16
    9498:	orr	r7, r0, r7
    949c:	and	r0, r7, #63	; 0x3f
    94a0:	sub	r2, r3, #1
    94a4:	ldrb	r0, [ip, r0]
    94a8:	strb	r0, [r1], #1
    94ac:	sub	r0, r3, #2
    94b0:	cmp	r0, #1
    94b4:	blt	94d0 <rb_sha512_crypt_r+0xc90>
    94b8:	add	r0, r6, #1
    94bc:	cmp	r6, #0
    94c0:	lsr	r7, r7, #6
    94c4:	mov	r3, r2
    94c8:	mov	r6, r0
    94cc:	bne	949c <rb_sha512_crypt_r+0xc5c>
    94d0:	sub	r0, r2, #1
    94d4:	cmp	r0, #1
    94d8:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    94dc:	ldrb	r7, [fp, #-116]	; 0xffffff8c
    94e0:	ldrb	r3, [fp, #-137]	; 0xffffff77
    94e4:	ldrb	r0, [fp, #-158]	; 0xffffff62
    94e8:	mvn	r6, #2
    94ec:	lsl	r7, r7, #8
    94f0:	orr	r3, r7, r3, lsl #16
    94f4:	orr	r7, r3, r0
    94f8:	and	r0, r7, #63	; 0x3f
    94fc:	sub	r3, r2, #1
    9500:	ldrb	r0, [ip, r0]
    9504:	strb	r0, [r1], #1
    9508:	sub	r0, r2, #2
    950c:	cmp	r0, #1
    9510:	blt	952c <rb_sha512_crypt_r+0xcec>
    9514:	add	r0, r6, #1
    9518:	cmp	r6, #0
    951c:	lsr	r7, r7, #6
    9520:	mov	r2, r3
    9524:	mov	r6, r0
    9528:	bne	94f8 <rb_sha512_crypt_r+0xcb8>
    952c:	sub	r0, r3, #1
    9530:	cmp	r0, #1
    9534:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    9538:	ldrb	r0, [fp, #-157]	; 0xffffff63
    953c:	ldrb	r7, [fp, #-115]	; 0xffffff8d
    9540:	ldrb	r2, [fp, #-136]	; 0xffffff78
    9544:	mvn	r6, #2
    9548:	lsl	r0, r0, #8
    954c:	orr	r0, r0, r7, lsl #16
    9550:	orr	r7, r0, r2
    9554:	and	r0, r7, #63	; 0x3f
    9558:	sub	r2, r3, #1
    955c:	ldrb	r0, [ip, r0]
    9560:	strb	r0, [r1], #1
    9564:	sub	r0, r3, #2
    9568:	cmp	r0, #1
    956c:	blt	9588 <rb_sha512_crypt_r+0xd48>
    9570:	add	r0, r6, #1
    9574:	cmp	r6, #0
    9578:	lsr	r7, r7, #6
    957c:	mov	r3, r2
    9580:	mov	r6, r0
    9584:	bne	9554 <rb_sha512_crypt_r+0xd14>
    9588:	sub	r0, r2, #1
    958c:	cmp	r0, #1
    9590:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    9594:	ldrb	r3, [fp, #-135]	; 0xffffff79
    9598:	ldrb	r0, [fp, #-156]	; 0xffffff64
    959c:	ldrb	r7, [fp, #-114]	; 0xffffff8e
    95a0:	mvn	r6, #2
    95a4:	lsl	r3, r3, #8
    95a8:	orr	r0, r3, r0, lsl #16
    95ac:	orr	r7, r0, r7
    95b0:	and	r0, r7, #63	; 0x3f
    95b4:	sub	r3, r2, #1
    95b8:	ldrb	r0, [ip, r0]
    95bc:	strb	r0, [r1], #1
    95c0:	sub	r0, r2, #2
    95c4:	cmp	r0, #1
    95c8:	blt	95e4 <rb_sha512_crypt_r+0xda4>
    95cc:	add	r0, r6, #1
    95d0:	cmp	r6, #0
    95d4:	lsr	r7, r7, #6
    95d8:	mov	r2, r3
    95dc:	mov	r6, r0
    95e0:	bne	95b0 <rb_sha512_crypt_r+0xd70>
    95e4:	sub	r0, r3, #1
    95e8:	cmp	r0, #1
    95ec:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    95f0:	ldrb	r7, [fp, #-113]	; 0xffffff8f
    95f4:	ldrb	r2, [fp, #-134]	; 0xffffff7a
    95f8:	ldrb	r0, [fp, #-155]	; 0xffffff65
    95fc:	mvn	r6, #2
    9600:	lsl	r7, r7, #8
    9604:	orr	r2, r7, r2, lsl #16
    9608:	orr	r7, r2, r0
    960c:	and	r0, r7, #63	; 0x3f
    9610:	sub	r2, r3, #1
    9614:	ldrb	r0, [ip, r0]
    9618:	strb	r0, [r1], #1
    961c:	sub	r0, r3, #2
    9620:	cmp	r0, #1
    9624:	blt	9640 <rb_sha512_crypt_r+0xe00>
    9628:	add	r0, r6, #1
    962c:	cmp	r6, #0
    9630:	lsr	r7, r7, #6
    9634:	mov	r3, r2
    9638:	mov	r6, r0
    963c:	bne	960c <rb_sha512_crypt_r+0xdcc>
    9640:	sub	r0, r2, #1
    9644:	cmp	r0, #1
    9648:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    964c:	ldrb	r0, [fp, #-154]	; 0xffffff66
    9650:	ldrb	r7, [fp, #-112]	; 0xffffff90
    9654:	ldrb	r3, [fp, #-133]	; 0xffffff7b
    9658:	mvn	r6, #2
    965c:	lsl	r0, r0, #8
    9660:	orr	r0, r0, r7, lsl #16
    9664:	orr	r7, r0, r3
    9668:	and	r0, r7, #63	; 0x3f
    966c:	sub	r3, r2, #1
    9670:	ldrb	r0, [ip, r0]
    9674:	strb	r0, [r1], #1
    9678:	sub	r0, r2, #2
    967c:	cmp	r0, #1
    9680:	blt	969c <rb_sha512_crypt_r+0xe5c>
    9684:	add	r0, r6, #1
    9688:	cmp	r6, #0
    968c:	lsr	r7, r7, #6
    9690:	mov	r2, r3
    9694:	mov	r6, r0
    9698:	bne	9668 <rb_sha512_crypt_r+0xe28>
    969c:	sub	r0, r3, #1
    96a0:	cmp	r0, #1
    96a4:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    96a8:	ldrb	r2, [fp, #-132]	; 0xffffff7c
    96ac:	ldrb	r0, [fp, #-153]	; 0xffffff67
    96b0:	ldrb	r7, [fp, #-111]	; 0xffffff91
    96b4:	mvn	r6, #2
    96b8:	lsl	r2, r2, #8
    96bc:	orr	r0, r2, r0, lsl #16
    96c0:	orr	r7, r0, r7
    96c4:	and	r0, r7, #63	; 0x3f
    96c8:	sub	r2, r3, #1
    96cc:	ldrb	r0, [ip, r0]
    96d0:	strb	r0, [r1], #1
    96d4:	sub	r0, r3, #2
    96d8:	cmp	r0, #1
    96dc:	blt	96f8 <rb_sha512_crypt_r+0xeb8>
    96e0:	add	r0, r6, #1
    96e4:	cmp	r6, #0
    96e8:	lsr	r7, r7, #6
    96ec:	mov	r3, r2
    96f0:	mov	r6, r0
    96f4:	bne	96c4 <rb_sha512_crypt_r+0xe84>
    96f8:	sub	r0, r2, #1
    96fc:	cmp	r0, #1
    9700:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    9704:	ldrb	r7, [fp, #-110]	; 0xffffff92
    9708:	ldrb	r3, [fp, #-131]	; 0xffffff7d
    970c:	ldrb	r0, [fp, #-152]	; 0xffffff68
    9710:	mvn	r6, #2
    9714:	lsl	r7, r7, #8
    9718:	orr	r3, r7, r3, lsl #16
    971c:	orr	r7, r3, r0
    9720:	and	r0, r7, #63	; 0x3f
    9724:	sub	r3, r2, #1
    9728:	ldrb	r0, [ip, r0]
    972c:	strb	r0, [r1], #1
    9730:	sub	r0, r2, #2
    9734:	cmp	r0, #1
    9738:	blt	9754 <rb_sha512_crypt_r+0xf14>
    973c:	add	r0, r6, #1
    9740:	cmp	r6, #0
    9744:	lsr	r7, r7, #6
    9748:	mov	r2, r3
    974c:	mov	r6, r0
    9750:	bne	9720 <rb_sha512_crypt_r+0xee0>
    9754:	sub	r0, r3, #1
    9758:	cmp	r0, #1
    975c:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    9760:	ldrb	r0, [fp, #-151]	; 0xffffff69
    9764:	ldrb	r7, [fp, #-109]	; 0xffffff93
    9768:	ldrb	r2, [fp, #-130]	; 0xffffff7e
    976c:	mvn	r6, #2
    9770:	lsl	r0, r0, #8
    9774:	orr	r0, r0, r7, lsl #16
    9778:	orr	r7, r0, r2
    977c:	and	r0, r7, #63	; 0x3f
    9780:	sub	r2, r3, #1
    9784:	ldrb	r0, [ip, r0]
    9788:	strb	r0, [r1], #1
    978c:	sub	r0, r3, #2
    9790:	cmp	r0, #1
    9794:	blt	97b0 <rb_sha512_crypt_r+0xf70>
    9798:	add	r0, r6, #1
    979c:	cmp	r6, #0
    97a0:	lsr	r7, r7, #6
    97a4:	mov	r3, r2
    97a8:	mov	r6, r0
    97ac:	bne	977c <rb_sha512_crypt_r+0xf3c>
    97b0:	sub	r0, r2, #1
    97b4:	cmp	r0, #1
    97b8:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    97bc:	ldrb	r3, [fp, #-129]	; 0xffffff7f
    97c0:	ldrb	r0, [fp, #-150]	; 0xffffff6a
    97c4:	ldrb	r7, [fp, #-108]	; 0xffffff94
    97c8:	mvn	r6, #2
    97cc:	lsl	r3, r3, #8
    97d0:	orr	r0, r3, r0, lsl #16
    97d4:	orr	r7, r0, r7
    97d8:	and	r0, r7, #63	; 0x3f
    97dc:	sub	r3, r2, #1
    97e0:	ldrb	r0, [ip, r0]
    97e4:	strb	r0, [r1], #1
    97e8:	sub	r0, r2, #2
    97ec:	cmp	r0, #1
    97f0:	blt	980c <rb_sha512_crypt_r+0xfcc>
    97f4:	add	r0, r6, #1
    97f8:	cmp	r6, #0
    97fc:	lsr	r7, r7, #6
    9800:	mov	r2, r3
    9804:	mov	r6, r0
    9808:	bne	97d8 <rb_sha512_crypt_r+0xf98>
    980c:	sub	r0, r3, #1
    9810:	cmp	r0, #1
    9814:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    9818:	ldrb	r7, [fp, #-107]	; 0xffffff95
    981c:	ldrb	r2, [fp, #-128]	; 0xffffff80
    9820:	ldrb	r0, [fp, #-149]	; 0xffffff6b
    9824:	mvn	r6, #2
    9828:	lsl	r7, r7, #8
    982c:	orr	r2, r7, r2, lsl #16
    9830:	orr	r7, r2, r0
    9834:	and	r0, r7, #63	; 0x3f
    9838:	sub	r2, r3, #1
    983c:	ldrb	r0, [ip, r0]
    9840:	strb	r0, [r1], #1
    9844:	sub	r0, r3, #2
    9848:	cmp	r0, #1
    984c:	blt	9868 <rb_sha512_crypt_r+0x1028>
    9850:	add	r0, r6, #1
    9854:	cmp	r6, #0
    9858:	lsr	r7, r7, #6
    985c:	mov	r3, r2
    9860:	mov	r6, r0
    9864:	bne	9834 <rb_sha512_crypt_r+0xff4>
    9868:	ldr	r5, [fp, #-952]	; 0xfffffc48
    986c:	sub	r0, r2, #1
    9870:	cmp	r0, #1
    9874:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    9878:	ldrb	r0, [fp, #-148]	; 0xffffff6c
    987c:	ldrb	r7, [fp, #-106]	; 0xffffff96
    9880:	ldrb	r3, [fp, #-127]	; 0xffffff81
    9884:	mvn	r6, #2
    9888:	lsl	r0, r0, #8
    988c:	orr	r0, r0, r7, lsl #16
    9890:	orr	r7, r0, r3
    9894:	and	r0, r7, #63	; 0x3f
    9898:	sub	r3, r2, #1
    989c:	ldrb	r0, [ip, r0]
    98a0:	strb	r0, [r1], #1
    98a4:	sub	r0, r2, #2
    98a8:	cmp	r0, #1
    98ac:	blt	98c8 <rb_sha512_crypt_r+0x1088>
    98b0:	add	r0, r6, #1
    98b4:	cmp	r6, #0
    98b8:	lsr	r7, r7, #6
    98bc:	mov	r2, r3
    98c0:	mov	r6, r0
    98c4:	bne	9894 <rb_sha512_crypt_r+0x1054>
    98c8:	ldr	r5, [fp, #-952]	; 0xfffffc48
    98cc:	sub	r0, r3, #1
    98d0:	cmp	r0, #1
    98d4:	blt	8fd4 <rb_sha512_crypt_r+0x794>
    98d8:	ldrb	r2, [fp, #-105]	; 0xffffff97
    98dc:	mvn	r7, #0
    98e0:	and	r0, r2, #63	; 0x3f
    98e4:	ldrb	r0, [ip, r0]
    98e8:	strb	r0, [r1], #1
    98ec:	sub	r0, r3, #1
    98f0:	sub	r3, r3, #2
    98f4:	cmp	r3, #1
    98f8:	blt	9914 <rb_sha512_crypt_r+0x10d4>
    98fc:	add	r6, r7, #1
    9900:	cmp	r7, #0
    9904:	lsr	r2, r2, #6
    9908:	mov	r3, r0
    990c:	mov	r7, r6
    9910:	bne	98e0 <rb_sha512_crypt_r+0x10a0>
    9914:	ldr	r5, [fp, #-952]	; 0xfffffc48
    9918:	cmp	r0, #1
    991c:	ble	8fd4 <rb_sha512_crypt_r+0x794>
    9920:	mov	r0, #0
    9924:	mov	r9, r8
    9928:	strb	r0, [r1]
    992c:	b	8fe0 <rb_sha512_crypt_r+0x7a0>
    9930:	mov	r0, #0
    9934:	str	r0, [fp, #-992]	; 0xfffffc20
    9938:	movw	r0, #5000	; 0x1388
    993c:	str	r0, [fp, #-948]	; 0xfffffc4c
    9940:	b	88f4 <rb_sha512_crypt_r+0xb4>
    9944:	.word	0x0000c6e8
    9948:	.word	0x0000c224
    994c:	.word	0x0000c6a8
    9950:	.word	0x0000c023

00009954 <rb_sha512_process_bytes>:
    9954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9958:	add	fp, sp, #28
    995c:	sub	sp, sp, #4
    9960:	mov	r9, r2
    9964:	mov	r6, r0
    9968:	mov	r4, r2
    996c:	mov	sl, r1
    9970:	ldr	r5, [r9, #80]!	; 0x50
    9974:	ldr	r0, [r9, #4]
    9978:	orrs	r0, r5, r0
    997c:	beq	9a00 <rb_sha512_process_bytes+0xac>
    9980:	rsb	r7, r5, #256	; 0x100
    9984:	add	r0, r4, r5
    9988:	mov	r1, r6
    998c:	cmp	r7, sl
    9990:	add	r0, r0, #88	; 0x58
    9994:	movhi	r7, sl
    9998:	mov	r2, r7
    999c:	bl	5104 <memcpy@plt>
    99a0:	ldrd	r0, [r9]
    99a4:	adds	r0, r0, r7
    99a8:	adc	r1, r1, #0
    99ac:	subs	r2, r0, #129	; 0x81
    99b0:	strd	r0, [r9]
    99b4:	sbcs	r1, r1, #0
    99b8:	bcc	99f8 <rb_sha512_process_bytes+0xa4>
    99bc:	add	r8, r4, #88	; 0x58
    99c0:	bic	r1, r0, #127	; 0x7f
    99c4:	mov	r2, r4
    99c8:	mov	r0, r8
    99cc:	bl	9dd4 <rb_sha512_process_block>
    99d0:	mov	r0, #0
    99d4:	str	r0, [r9, #4]
    99d8:	ldr	r0, [r9]
    99dc:	and	r2, r0, #127	; 0x7f
    99e0:	add	r0, r7, r5
    99e4:	bic	r0, r0, #127	; 0x7f
    99e8:	str	r2, [r9]
    99ec:	add	r1, r8, r0
    99f0:	mov	r0, r8
    99f4:	bl	5104 <memcpy@plt>
    99f8:	sub	sl, sl, r7
    99fc:	add	r6, r6, r7
    9a00:	cmp	sl, #128	; 0x80
    9a04:	bcc	9a80 <rb_sha512_process_bytes+0x12c>
    9a08:	tst	r6, #7
    9a0c:	beq	9a64 <rb_sha512_process_bytes+0x110>
    9a10:	cmp	sl, #129	; 0x81
    9a14:	bcc	9a8c <rb_sha512_process_bytes+0x138>
    9a18:	sub	r0, sl, #129	; 0x81
    9a1c:	add	r7, r4, #88	; 0x58
    9a20:	mov	r5, sl
    9a24:	bic	r8, r0, #127	; 0x7f
    9a28:	mov	r0, r7
    9a2c:	mov	r1, r6
    9a30:	mov	r2, #128	; 0x80
    9a34:	bl	5104 <memcpy@plt>
    9a38:	mov	r0, r7
    9a3c:	mov	r1, #128	; 0x80
    9a40:	mov	r2, r4
    9a44:	bl	9dd4 <rb_sha512_process_block>
    9a48:	sub	r5, r5, #128	; 0x80
    9a4c:	add	r6, r6, #128	; 0x80
    9a50:	cmp	r5, #128	; 0x80
    9a54:	bhi	9a28 <rb_sha512_process_bytes+0xd4>
    9a58:	sub	r0, sl, r8
    9a5c:	sub	sl, r0, #128	; 0x80
    9a60:	b	9a90 <rb_sha512_process_bytes+0x13c>
    9a64:	bic	r7, sl, #127	; 0x7f
    9a68:	mov	r0, r6
    9a6c:	mov	r2, r4
    9a70:	mov	r1, r7
    9a74:	bl	9dd4 <rb_sha512_process_block>
    9a78:	add	r6, r6, r7
    9a7c:	and	sl, sl, #127	; 0x7f
    9a80:	cmp	sl, #0
    9a84:	bne	9a90 <rb_sha512_process_bytes+0x13c>
    9a88:	b	9ae4 <rb_sha512_process_bytes+0x190>
    9a8c:	mov	sl, #128	; 0x80
    9a90:	ldr	r5, [r9]
    9a94:	mov	r1, r6
    9a98:	mov	r2, sl
    9a9c:	add	r0, r4, r5
    9aa0:	add	r0, r0, #88	; 0x58
    9aa4:	bl	5104 <memcpy@plt>
    9aa8:	add	r6, sl, r5
    9aac:	cmp	r6, #128	; 0x80
    9ab0:	bcc	9adc <rb_sha512_process_bytes+0x188>
    9ab4:	add	r5, r4, #88	; 0x58
    9ab8:	mov	r1, #128	; 0x80
    9abc:	mov	r2, r4
    9ac0:	mov	r0, r5
    9ac4:	bl	9dd4 <rb_sha512_process_block>
    9ac8:	sub	r6, r6, #128	; 0x80
    9acc:	add	r1, r4, #216	; 0xd8
    9ad0:	mov	r0, r5
    9ad4:	mov	r2, r6
    9ad8:	bl	5104 <memcpy@plt>
    9adc:	mov	r7, #0
    9ae0:	strd	r6, [r9]
    9ae4:	sub	sp, fp, #28
    9ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9aec:	nop	{0}

00009af0 <rb_sha512_finish_ctx>:
    9af0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    9af4:	add	fp, sp, #24
    9af8:	vpush	{d8-d9}
    9afc:	mov	r6, r0
    9b00:	mov	r5, r0
    9b04:	mov	r4, r1
    9b08:	mov	r7, #0
    9b0c:	ldr	r0, [r6, #64]!	; 0x40
    9b10:	ldrd	r2, [r6, #16]
    9b14:	ldr	r1, [r6, #4]
    9b18:	adds	r0, r0, r2
    9b1c:	adcs	r1, r1, r3
    9b20:	strd	r0, [r6]
    9b24:	adc	r0, r7, #0
    9b28:	cmp	r0, #1
    9b2c:	bne	9b40 <rb_sha512_finish_ctx+0x50>
    9b30:	ldrd	r0, [r5, #72]	; 0x48
    9b34:	adds	r0, r0, #1
    9b38:	adc	r1, r1, #0
    9b3c:	strd	r0, [r5, #72]	; 0x48
    9b40:	rsbs	r1, r2, #111	; 0x6f
    9b44:	add	r8, r5, #88	; 0x58
    9b48:	mov	r9, #112	; 0x70
    9b4c:	rscs	r1, r3, #0
    9b50:	mov	r1, #0
    9b54:	add	r0, r8, r2
    9b58:	movwcc	r1, #1
    9b5c:	cmp	r1, #0
    9b60:	ldr	r1, [pc, #616]	; 9dd0 <rb_sha512_finish_ctx+0x2e0>
    9b64:	movwne	r9, #240	; 0xf0
    9b68:	sub	r2, r9, r2
    9b6c:	add	r1, pc, r1
    9b70:	bl	5104 <memcpy@plt>
    9b74:	vld1.64	{d1-d2}, [r6]
    9b78:	add	r2, pc, #392	; 0x188
    9b7c:	vmov.i32	q8, #0	; 0x00000000
    9b80:	vmov.i64	q11, #0x00ff000000000000
    9b84:	vld1.64	{d20-d21}, [r2]
    9b88:	add	r2, pc, #392	; 0x188
    9b8c:	vld1.64	{d18-d19}, [r2]
    9b90:	add	r2, pc, #400	; 0x190
    9b94:	vmov.32	r0, d2[0]
    9b98:	vldr	s0, [pc, #552]	; 9dc8 <rb_sha512_finish_ctx+0x2d8>
    9b9c:	vsub.i64	q13, q8, q10
    9ba0:	lsl	r1, r0, #11
    9ba4:	vmov	s1, r1
    9ba8:	vmov.32	r1, d1[1]
    9bac:	vorr	d3, d1, d1
    9bb0:	vshl.s64	q12, q0, #59	; 0x3b
    9bb4:	vand	q11, q0, q11
    9bb8:	vshl.u64	q14, q1, q9
    9bbc:	vshl.u64	q9, q1, q13
    9bc0:	vld1.64	{d26-d27}, [r2]
    9bc4:	vorr	d23, d25, d25
    9bc8:	vshl.u64	q10, q1, q10
    9bcc:	lsr	r1, r1, #29
    9bd0:	vmov	s8, r1
    9bd4:	add	r1, pc, #348	; 0x15c
    9bd8:	add	r2, pc, #360	; 0x168
    9bdc:	vmov.f32	s9, s0
    9be0:	vorr	d5, d1, d1
    9be4:	vorr	d19, d21, d21
    9be8:	vld1.64	{d30-d31}, [r2]
    9bec:	vmov.32	r2, d2[1]
    9bf0:	vld1.64	{d6-d7}, [r1]
    9bf4:	vshl.u64	q13, q1, q13
    9bf8:	vand	q14, q14, q15
    9bfc:	vsub.i64	q15, q8, q3
    9c00:	vldr	s14, [pc, #452]	; 9dcc <rb_sha512_finish_ctx+0x2dc>
    9c04:	lsl	r1, r2, #3
    9c08:	add	r2, pc, #328	; 0x148
    9c0c:	orr	r1, r1, r0, lsr #29
    9c10:	vld1.64	{d8-d9}, [r2]
    9c14:	lsl	r0, r0, #3
    9c18:	vmov	s12, r0
    9c1c:	add	r0, pc, #324	; 0x144
    9c20:	vorr	q11, q14, q11
    9c24:	vshl.u64	q15, q1, q15
    9c28:	vmov	s13, r1
    9c2c:	vmov.f32	s15, s0
    9c30:	vand	q12, q13, q4
    9c34:	vsub.i64	q13, q8, q3
    9c38:	vorr	q14, q2, q3
    9c3c:	vld1.64	{d6-d7}, [r0]
    9c40:	add	r0, pc, #304	; 0x130
    9c44:	vshl.u64	q13, q2, q13
    9c48:	vorr	q11, q11, q12
    9c4c:	vsub.i64	q2, q8, q3
    9c50:	vld1.64	{d6-d7}, [r0]
    9c54:	add	r0, pc, #300	; 0x12c
    9c58:	vld1.64	{d20-d21}, [r0]
    9c5c:	add	r0, pc, #308	; 0x134
    9c60:	add	r1, pc, #320	; 0x140
    9c64:	add	r2, pc, #332	; 0x14c
    9c68:	vld1.64	{d24-d25}, [r2]
    9c6c:	vorr	d29, d27, d27
    9c70:	mov	r2, r5
    9c74:	vshl.u64	q2, q1, q2
    9c78:	vand	q9, q9, q3
    9c7c:	vsub.i64	q8, q8, q10
    9c80:	vld1.64	{d20-d21}, [r1]
    9c84:	add	r1, r9, #16
    9c88:	vand	q12, q15, q12
    9c8c:	vld1.64	{d30-d31}, [r0]
    9c90:	add	r0, r8, r9
    9c94:	vorr	q9, q11, q9
    9c98:	vmov.i64	q11, #0x00000000000000ff
    9c9c:	vshl.u64	q8, q1, q8
    9ca0:	vorr	q9, q9, q12
    9ca4:	vand	q10, q2, q10
    9ca8:	vand	q11, q14, q11
    9cac:	vshl.s64	q12, q14, #56	; 0x38
    9cb0:	vand	q8, q8, q15
    9cb4:	vorr	q9, q9, q10
    9cb8:	vorr	d25, d23, d23
    9cbc:	vorr	q8, q9, q8
    9cc0:	vorr	q8, q8, q12
    9cc4:	vst1.64	{d16-d17}, [r0]
    9cc8:	mov	r0, r8
    9ccc:	bl	9dd4 <rb_sha512_process_block>
    9cd0:	mov	r0, r5
    9cd4:	mov	r2, r4
    9cd8:	ldr	r1, [r0, r7]!
    9cdc:	ldr	r0, [r0, #4]
    9ce0:	rev	r0, r0
    9ce4:	str	r0, [r2, r7]!
    9ce8:	add	r7, r7, #8
    9cec:	rev	r0, r1
    9cf0:	cmp	r7, #64	; 0x40
    9cf4:	str	r0, [r2, #4]
    9cf8:	bne	9cd0 <rb_sha512_finish_ctx+0x1e0>
    9cfc:	vpop	{d8-d9}
    9d00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    9d04:	nop	{0}
    9d08:	.word	0x00000005
    9d0c:	.word	0x00000000
    9d10:	.word	0x0000000b
    9d14:	.word	0x00000000
    9d18:	.word	0x0000001b
    9d1c:	.word	0x00000000
    9d20:	.word	0x0000002b
    9d24:	.word	0x00000000
    9d28:	.word	0x0000000b
    9d2c:	.word	0x00000000
    9d30:	.word	0x0000001b
    9d34:	.word	0x00000000
    9d38:	.word	0x00000015
    9d3c:	.word	0x00000000
    9d40:	.word	0x00000005
	...
    9d4c:	.word	0x0000ff00
    9d50:	.word	0x00000000
    9d54:	.word	0x00ff0000
    9d58:	.word	0x00000000
    9d5c:	.word	0x000000ff
    9d60:	.word	0x00000000
    9d64:	.word	0x0000ff00
    9d68:	.word	0x00000025
    9d6c:	.word	0x00000000
    9d70:	.word	0x00000015
    9d74:	.word	0x00000000
    9d78:	.word	0xff000000
	...
    9d84:	.word	0x000000ff
    9d88:	.word	0x00000035
    9d8c:	.word	0x00000000
    9d90:	.word	0x00000025
    9d94:	.word	0x00000000
    9d98:	.word	0x000000ff
    9d9c:	.word	0x00000000
    9da0:	.word	0x0000ff00
    9da4:	.word	0x00000000
    9da8:	.word	0x0000ff00
    9dac:	.word	0x00000000
    9db0:	.word	0x00ff0000
    9db4:	.word	0x00000000
    9db8:	.word	0x00ff0000
    9dbc:	.word	0x00000000
    9dc0:	.word	0xff000000
	...
    9dcc:	.word	0x00000035
    9dd0:	.word	0x0000bd24

00009dd4 <rb_sha512_process_block>:
    9dd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9dd8:	add	fp, sp, #28
    9ddc:	sub	sp, sp, #804	; 0x324
    9de0:	ldr	r3, [r2, #64]	; 0x40
    9de4:	lsr	r6, r1, #3
    9de8:	adds	r3, r3, r1
    9dec:	str	r3, [r2, #64]	; 0x40
    9df0:	ldr	r3, [r2, #68]	; 0x44
    9df4:	adcs	r3, r3, #0
    9df8:	str	r3, [r2, #68]	; 0x44
    9dfc:	mov	r3, #0
    9e00:	ldr	r1, [r2, #60]	; 0x3c
    9e04:	adc	r7, r3, #0
    9e08:	ldr	r9, [r2, #36]	; 0x24
    9e0c:	ldr	sl, [r2, #28]
    9e10:	cmp	r7, #1
    9e14:	str	r1, [sp, #104]	; 0x68
    9e18:	mov	r1, r2
    9e1c:	ldr	r3, [r1, #56]!	; 0x38
    9e20:	str	r1, [sp, #28]
    9e24:	ldr	r1, [r2, #52]	; 0x34
    9e28:	str	r3, [sp, #100]	; 0x64
    9e2c:	str	r1, [sp, #96]	; 0x60
    9e30:	mov	r1, r2
    9e34:	ldr	r3, [r1, #48]!	; 0x30
    9e38:	str	r1, [sp, #24]
    9e3c:	ldr	r1, [r2, #44]	; 0x2c
    9e40:	str	r3, [sp, #92]	; 0x5c
    9e44:	str	r1, [sp, #88]	; 0x58
    9e48:	mov	r1, r2
    9e4c:	ldr	r3, [r1, #40]!	; 0x28
    9e50:	str	r1, [sp, #20]
    9e54:	mov	r1, r2
    9e58:	ldr	ip, [r1, #32]!
    9e5c:	str	r1, [sp, #16]
    9e60:	mov	r1, r2
    9e64:	str	r3, [sp, #84]	; 0x54
    9e68:	ldr	r3, [r1, #24]!
    9e6c:	str	r1, [sp, #12]
    9e70:	str	r3, [sp, #80]	; 0x50
    9e74:	ldm	r2, {r1, r3}
    9e78:	str	r3, [sp, #64]	; 0x40
    9e7c:	str	r1, [sp, #68]	; 0x44
    9e80:	ldr	r1, [r2, #12]
    9e84:	str	r1, [sp, #72]	; 0x48
    9e88:	ldr	r1, [r2, #20]
    9e8c:	str	r1, [sp, #76]	; 0x4c
    9e90:	mov	r1, r2
    9e94:	ldr	r3, [r1, #16]!
    9e98:	str	r1, [sp, #8]
    9e9c:	mov	r1, r2
    9ea0:	str	r3, [sp, #60]	; 0x3c
    9ea4:	ldr	r3, [r1, #8]!
    9ea8:	str	r1, [sp, #4]
    9eac:	str	r3, [sp, #56]	; 0x38
    9eb0:	bne	9ecc <rb_sha512_process_block+0xf8>
    9eb4:	ldr	r4, [r2, #72]	; 0x48
    9eb8:	ldr	r1, [r2, #76]	; 0x4c
    9ebc:	adds	r4, r4, #1
    9ec0:	adc	r1, r1, #0
    9ec4:	str	r4, [r2, #72]	; 0x48
    9ec8:	str	r1, [r2, #76]	; 0x4c
    9ecc:	cmp	r6, #0
    9ed0:	str	r2, [sp, #32]
    9ed4:	beq	a2f4 <rb_sha512_process_block+0x520>
    9ed8:	add	r7, sp, #160	; 0xa0
    9edc:	mov	r3, #0
    9ee0:	mov	r1, r0
    9ee4:	ldr	r2, [r1, -r3]!
    9ee8:	ldr	r1, [r1, #4]
    9eec:	rev	r2, r2
    9ef0:	rev	r1, r1
    9ef4:	str	r1, [r7, -r3]
    9ef8:	sub	r1, r7, r3
    9efc:	sub	r3, r3, #8
    9f00:	cmn	r3, #128	; 0x80
    9f04:	str	r2, [r1, #4]
    9f08:	bne	9ee0 <rb_sha512_process_block+0x10c>
    9f0c:	sub	r0, r0, r3
    9f10:	ldr	lr, [sp, #160]	; 0xa0
    9f14:	ldr	r3, [sp, #164]	; 0xa4
    9f18:	mov	r8, ip
    9f1c:	str	r6, [sp, #36]	; 0x24
    9f20:	str	r0, [sp, #40]	; 0x28
    9f24:	movw	r0, #65024	; 0xfe00
    9f28:	movt	r0, #65535	; 0xffff
    9f2c:	add	r1, sp, #160	; 0xa0
    9f30:	add	r1, r1, r0
    9f34:	ldr	r6, [r1, #628]	; 0x274
    9f38:	ldr	r7, [r1, #624]	; 0x270
    9f3c:	ldr	r2, [r1, #520]	; 0x208
    9f40:	lsl	r4, r6, #3
    9f44:	lsr	r5, r6, #19
    9f48:	orr	r4, r4, r7, lsr #29
    9f4c:	orr	r5, r5, r7, lsl #13
    9f50:	eor	r4, r4, r6, lsr #6
    9f54:	eor	ip, r4, r5
    9f58:	lsr	r4, r7, #6
    9f5c:	lsr	r5, r6, #29
    9f60:	orr	r5, r5, r7, lsl #3
    9f64:	lsr	r7, r7, #19
    9f68:	orr	r4, r4, r6, lsl #26
    9f6c:	orr	r7, r7, r6, lsl #13
    9f70:	ldr	r6, [r1, #588]	; 0x24c
    9f74:	eor	r5, r5, r4
    9f78:	ldr	r4, [r1, #524]	; 0x20c
    9f7c:	eor	r7, r5, r7
    9f80:	ldr	r5, [r1, #584]	; 0x248
    9f84:	adds	r5, lr, r5
    9f88:	mov	lr, r2
    9f8c:	adc	r3, r3, r6
    9f90:	adds	r7, r5, r7
    9f94:	lsr	r6, r2, #7
    9f98:	lsr	r5, r2, #8
    9f9c:	orr	r6, r6, r4, lsl #25
    9fa0:	orr	r5, r5, r4, lsl #24
    9fa4:	adc	ip, r3, ip
    9fa8:	eor	r6, r5, r6
    9fac:	lsrs	r5, r4, #1
    9fb0:	rrx	r3, r2
    9fb4:	eor	r3, r6, r3
    9fb8:	orr	r6, r5, r2, lsl #31
    9fbc:	lsr	r5, r4, #8
    9fc0:	adds	r3, r7, r3
    9fc4:	orr	r5, r5, r2, lsl #24
    9fc8:	str	r3, [r1, #640]	; 0x280
    9fcc:	mov	r3, r4
    9fd0:	eor	r5, r5, r4, lsr #7
    9fd4:	eor	r7, r5, r6
    9fd8:	adc	r7, ip, r7
    9fdc:	adds	r0, r0, #8
    9fe0:	str	r7, [r1, #644]	; 0x284
    9fe4:	bne	9f2c <rb_sha512_process_block+0x158>
    9fe8:	ldr	r0, [sp, #68]	; 0x44
    9fec:	ldr	r7, [sp, #60]	; 0x3c
    9ff0:	ldr	r6, [sp, #96]	; 0x60
    9ff4:	ldr	r2, [sp, #56]	; 0x38
    9ff8:	ldr	r3, [sp, #72]	; 0x48
    9ffc:	ldr	r5, [sp, #84]	; 0x54
    a000:	ldr	lr, [sp, #100]	; 0x64
    a004:	ldr	r4, [sp, #104]	; 0x68
    a008:	mov	ip, #0
    a00c:	str	r8, [sp, #48]	; 0x30
    a010:	str	r8, [sp, #132]	; 0x84
    a014:	mov	r8, r9
    a018:	str	sl, [sp, #44]	; 0x2c
    a01c:	str	sl, [sp, #124]	; 0x7c
    a020:	str	r9, [sp, #52]	; 0x34
    a024:	str	r0, [sp, #140]	; 0x8c
    a028:	ldr	r0, [sp, #64]	; 0x40
    a02c:	str	r7, [sp, #152]	; 0x98
    a030:	ldr	r7, [sp, #76]	; 0x4c
    a034:	str	r6, [sp, #144]	; 0x90
    a038:	str	r0, [sp, #136]	; 0x88
    a03c:	ldr	r0, [sp, #80]	; 0x50
    a040:	str	r7, [sp, #148]	; 0x94
    a044:	ldr	r7, [sp, #88]	; 0x58
    a048:	str	r0, [sp, #128]	; 0x80
    a04c:	ldr	r0, [sp, #92]	; 0x5c
    a050:	str	r0, [sp, #156]	; 0x9c
    a054:	ldr	r1, [sp, #148]	; 0x94
    a058:	ldr	r9, [sp, #156]	; 0x9c
    a05c:	ldr	r0, [sp, #144]	; 0x90
    a060:	mov	r6, r7
    a064:	str	r5, [sp, #156]	; 0x9c
    a068:	mov	r7, r8
    a06c:	ldr	r5, [sp, #132]	; 0x84
    a070:	mov	r8, r3
    a074:	mov	sl, r2
    a078:	ldr	r3, [sp, #136]	; 0x88
    a07c:	ldr	r2, [sp, #140]	; 0x8c
    a080:	str	r6, [sp, #144]	; 0x90
    a084:	str	r1, [sp, #108]	; 0x6c
    a088:	ldr	r1, [sp, #152]	; 0x98
    a08c:	str	r0, [sp, #116]	; 0x74
    a090:	bic	r0, r0, r7
    a094:	str	r9, [sp, #112]	; 0x70
    a098:	str	r1, [sp, #120]	; 0x78
    a09c:	and	r1, r7, r6
    a0a0:	ldr	r6, [sp, #156]	; 0x9c
    a0a4:	orr	r0, r1, r0
    a0a8:	bic	r1, r9, r5
    a0ac:	and	r6, r5, r6
    a0b0:	orr	r1, r6, r1
    a0b4:	lsr	r6, r7, #18
    a0b8:	adds	r1, r1, lr
    a0bc:	orr	r6, r6, r5, lsl #14
    a0c0:	adc	lr, r0, r4
    a0c4:	lsr	r4, r7, #14
    a0c8:	lsr	r0, r5, #14
    a0cc:	orr	r4, r4, r5, lsl #18
    a0d0:	orr	r0, r0, r7, lsl #18
    a0d4:	eor	r6, r4, r6
    a0d8:	lsl	r4, r7, #23
    a0dc:	orr	r4, r4, r5, lsr #9
    a0e0:	eor	r6, r6, r4
    a0e4:	lsr	r4, r5, #18
    a0e8:	orr	r4, r4, r7, lsl #14
    a0ec:	eor	r0, r0, r4
    a0f0:	lsr	r4, r7, #9
    a0f4:	orr	r4, r4, r5, lsl #23
    a0f8:	eor	r0, r0, r4
    a0fc:	adds	r0, r1, r0
    a100:	adc	r1, lr, r6
    a104:	ldr	r6, [pc, #636]	; a388 <rb_sha512_process_block+0x5b4>
    a108:	ldr	lr, [sp, #108]	; 0x6c
    a10c:	str	r8, [sp, #148]	; 0x94
    a110:	str	sl, [sp, #152]	; 0x98
    a114:	add	r6, pc, r6
    a118:	ldr	r4, [r6, ip]!
    a11c:	ldr	r6, [r6, #4]
    a120:	adds	r0, r0, r4
    a124:	adc	r1, r1, r6
    a128:	add	r6, sp, #160	; 0xa0
    a12c:	mov	r4, r6
    a130:	add	r6, r6, ip
    a134:	ldr	r4, [r4, ip]
    a138:	ldr	r6, [r6, #4]
    a13c:	add	ip, ip, #8
    a140:	adds	r9, r0, r4
    a144:	and	r0, r8, lr
    a148:	ldr	r4, [sp, #120]	; 0x78
    a14c:	adc	r6, r1, r6
    a150:	eor	r1, r8, lr
    a154:	and	r1, r3, r1
    a158:	eor	r0, r1, r0
    a15c:	lsl	r1, r3, #30
    a160:	str	r0, [sp, #140]	; 0x8c
    a164:	lsr	r0, r3, #28
    a168:	orr	r1, r1, r2, lsr #2
    a16c:	orr	r0, r0, r2, lsl #4
    a170:	eor	r0, r0, r1
    a174:	lsl	r1, r3, #25
    a178:	orr	r1, r1, r2, lsr #7
    a17c:	eor	r8, r0, r1
    a180:	eor	r0, sl, r4
    a184:	and	r1, sl, r4
    a188:	mov	sl, r4
    a18c:	lsr	r4, r3, #2
    a190:	and	r0, r2, r0
    a194:	orr	r4, r4, r2, lsl #30
    a198:	eor	r0, r0, r1
    a19c:	lsr	r1, r2, #28
    a1a0:	orr	r1, r1, r3, lsl #4
    a1a4:	eor	r1, r1, r4
    a1a8:	lsr	r4, r3, #7
    a1ac:	orr	r4, r4, r2, lsl #25
    a1b0:	eor	r1, r1, r4
    a1b4:	ldr	r4, [sp, #116]	; 0x74
    a1b8:	adds	r0, r1, r0
    a1bc:	ldr	r1, [sp, #140]	; 0x8c
    a1c0:	adc	r1, r8, r1
    a1c4:	adds	r0, r0, r9
    a1c8:	str	r0, [sp, #140]	; 0x8c
    a1cc:	adc	r0, r1, r6
    a1d0:	str	r0, [sp, #136]	; 0x88
    a1d4:	ldr	r0, [sp, #128]	; 0x80
    a1d8:	str	sl, [sp, #128]	; 0x80
    a1dc:	adds	r0, r9, r0
    a1e0:	str	r0, [sp, #132]	; 0x84
    a1e4:	ldr	r0, [sp, #124]	; 0x7c
    a1e8:	str	lr, [sp, #124]	; 0x7c
    a1ec:	adc	r8, r6, r0
    a1f0:	mov	r0, lr
    a1f4:	ldr	lr, [sp, #112]	; 0x70
    a1f8:	cmp	ip, #640	; 0x280
    a1fc:	bne	a054 <rb_sha512_process_block+0x280>
    a200:	ldr	r6, [sp, #100]	; 0x64
    a204:	mov	r1, r4
    a208:	ldr	r1, [sp, #156]	; 0x9c
    a20c:	ldr	r9, [sp, #52]	; 0x34
    a210:	mov	sl, lr
    a214:	ldr	sl, [sp, #44]	; 0x2c
    a218:	adds	r6, lr, r6
    a21c:	str	r6, [sp, #100]	; 0x64
    a220:	ldr	r6, [sp, #104]	; 0x68
    a224:	adc	r6, r4, r6
    a228:	ldr	r4, [sp, #144]	; 0x90
    a22c:	str	r6, [sp, #104]	; 0x68
    a230:	ldr	r6, [sp, #92]	; 0x5c
    a234:	adds	r6, r1, r6
    a238:	ldr	r1, [sp, #132]	; 0x84
    a23c:	str	r6, [sp, #92]	; 0x5c
    a240:	ldr	r6, [sp, #96]	; 0x60
    a244:	adc	r6, r4, r6
    a248:	str	r6, [sp, #96]	; 0x60
    a24c:	ldr	r6, [sp, #84]	; 0x54
    a250:	adds	r6, r5, r6
    a254:	str	r6, [sp, #84]	; 0x54
    a258:	ldr	r6, [sp, #88]	; 0x58
    a25c:	adc	r6, r7, r6
    a260:	ldr	r7, [sp, #48]	; 0x30
    a264:	str	r6, [sp, #88]	; 0x58
    a268:	ldr	r6, [sp, #152]	; 0x98
    a26c:	adds	r7, r1, r7
    a270:	ldr	r1, [sp, #120]	; 0x78
    a274:	mov	ip, r7
    a278:	ldr	r7, [sp, #80]	; 0x50
    a27c:	adc	r9, r8, r9
    a280:	adds	r7, r1, r7
    a284:	ldr	r1, [sp, #136]	; 0x88
    a288:	str	r7, [sp, #80]	; 0x50
    a28c:	ldr	r7, [sp, #60]	; 0x3c
    a290:	adc	sl, r0, sl
    a294:	ldr	r0, [sp, #140]	; 0x8c
    a298:	adds	r7, r6, r7
    a29c:	ldr	r6, [sp, #148]	; 0x94
    a2a0:	str	r7, [sp, #60]	; 0x3c
    a2a4:	ldr	r7, [sp, #76]	; 0x4c
    a2a8:	adc	r7, r6, r7
    a2ac:	ldr	r6, [sp, #36]	; 0x24
    a2b0:	str	r7, [sp, #76]	; 0x4c
    a2b4:	ldr	r7, [sp, #56]	; 0x38
    a2b8:	adds	r7, r2, r7
    a2bc:	ldr	r2, [sp, #72]	; 0x48
    a2c0:	str	r7, [sp, #56]	; 0x38
    a2c4:	add	r7, sp, #160	; 0xa0
    a2c8:	adc	r2, r3, r2
    a2cc:	str	r2, [sp, #72]	; 0x48
    a2d0:	ldr	r2, [sp, #68]	; 0x44
    a2d4:	adds	r2, r0, r2
    a2d8:	ldr	r0, [sp, #64]	; 0x40
    a2dc:	str	r2, [sp, #68]	; 0x44
    a2e0:	adc	r0, r1, r0
    a2e4:	subs	r6, r6, #16
    a2e8:	str	r0, [sp, #64]	; 0x40
    a2ec:	ldr	r0, [sp, #40]	; 0x28
    a2f0:	bne	9edc <rb_sha512_process_block+0x108>
    a2f4:	ldr	r0, [sp, #32]
    a2f8:	ldr	r1, [sp, #68]	; 0x44
    a2fc:	ldr	r2, [sp, #64]	; 0x40
    a300:	stm	r0, {r1, r2}
    a304:	ldr	r0, [sp, #72]	; 0x48
    a308:	ldr	r1, [sp, #4]
    a30c:	ldr	r2, [sp, #56]	; 0x38
    a310:	str	r2, [r1]
    a314:	str	r0, [r1, #4]
    a318:	ldr	r0, [sp, #76]	; 0x4c
    a31c:	ldr	r1, [sp, #8]
    a320:	ldr	r2, [sp, #60]	; 0x3c
    a324:	str	r2, [r1]
    a328:	str	r0, [r1, #4]
    a32c:	ldr	r0, [sp, #12]
    a330:	ldr	r1, [sp, #80]	; 0x50
    a334:	stm	r0, {r1, sl}
    a338:	ldr	r0, [sp, #16]
    a33c:	str	ip, [r0]
    a340:	str	r9, [r0, #4]
    a344:	ldr	r0, [sp, #88]	; 0x58
    a348:	ldr	r1, [sp, #20]
    a34c:	ldr	r2, [sp, #84]	; 0x54
    a350:	str	r2, [r1]
    a354:	str	r0, [r1, #4]
    a358:	ldr	r0, [sp, #96]	; 0x60
    a35c:	ldr	r1, [sp, #24]
    a360:	ldr	r2, [sp, #92]	; 0x5c
    a364:	str	r2, [r1]
    a368:	str	r0, [r1, #4]
    a36c:	ldr	r0, [sp, #104]	; 0x68
    a370:	ldr	r1, [sp, #28]
    a374:	ldr	r2, [sp, #100]	; 0x64
    a378:	str	r2, [r1]
    a37c:	str	r0, [r1, #4]
    a380:	sub	sp, fp, #28
    a384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a388:	.word	0x0000b4fc

0000a38c <rb_init_bh>:
    a38c:	push	{fp, lr}
    a390:	mov	fp, sp
    a394:	mov	r0, #1
    a398:	mov	r1, #12
    a39c:	bl	4f00 <calloc@plt>
    a3a0:	cmp	r0, #0
    a3a4:	ldrne	r1, [pc, #12]	; a3b8 <rb_init_bh+0x2c>
    a3a8:	addne	r1, pc, r1
    a3ac:	strne	r0, [r1]
    a3b0:	popne	{fp, pc}
    a3b4:	bl	5284 <rb_outofmemory@plt>
    a3b8:	.word	0x00030568

0000a3bc <rb_bh_create>:
    a3bc:	push	{r4, r5, r6, r7, fp, lr}
    a3c0:	add	fp, sp, #16
    a3c4:	cmp	r0, #0
    a3c8:	beq	a48c <rb_bh_create+0xd0>
    a3cc:	mov	r6, r1
    a3d0:	cmp	r1, #0
    a3d4:	ble	a48c <rb_bh_create+0xd0>
    a3d8:	mov	r7, r0
    a3dc:	cmp	r0, #11
    a3e0:	bls	a4a0 <rb_bh_create+0xe4>
    a3e4:	mov	r0, #1
    a3e8:	mov	r1, #48	; 0x30
    a3ec:	mov	r5, r2
    a3f0:	bl	4f00 <calloc@plt>
    a3f4:	cmp	r0, #0
    a3f8:	beq	a49c <rb_bh_create+0xe0>
    a3fc:	mov	r4, r0
    a400:	cmp	r5, #0
    a404:	str	r7, [r0, #12]
    a408:	str	r6, [r0, #16]
    a40c:	beq	a434 <rb_bh_create+0x78>
    a410:	mov	r0, r5
    a414:	bl	50e0 <strlen@plt>
    a418:	add	r0, r0, #1
    a41c:	bl	52a8 <malloc@plt>
    a420:	cmp	r0, #0
    a424:	beq	a49c <rb_bh_create+0xe0>
    a428:	mov	r1, r5
    a42c:	bl	5194 <strcpy@plt>
    a430:	str	r0, [r4, #44]	; 0x2c
    a434:	ldr	r0, [pc, #116]	; a4b0 <rb_bh_create+0xf4>
    a438:	mov	r1, #0
    a43c:	ldr	r0, [pc, r0]
    a440:	str	r1, [r4, #4]
    a444:	str	r4, [r4]
    a448:	ldr	r1, [r0]
    a44c:	cmp	r1, #0
    a450:	str	r1, [r4, #8]
    a454:	beq	a464 <rb_bh_create+0xa8>
    a458:	add	r1, r1, #4
    a45c:	str	r4, [r1]
    a460:	b	a474 <rb_bh_create+0xb8>
    a464:	mov	r1, r0
    a468:	ldr	r2, [r1, #4]!
    a46c:	cmp	r2, #0
    a470:	streq	r4, [r1]
    a474:	str	r4, [r0]
    a478:	ldr	r1, [r0, #8]
    a47c:	add	r1, r1, #1
    a480:	str	r1, [r0, #8]
    a484:	mov	r0, r4
    a488:	pop	{r4, r5, r6, r7, fp, pc}
    a48c:	ldr	r0, [pc, #32]	; a4b4 <rb_bh_create+0xf8>
    a490:	mov	r1, #147	; 0x93
    a494:	add	r0, pc, r0
    a498:	bl	a4bc <_rb_bh_fail>
    a49c:	bl	5284 <rb_outofmemory@plt>
    a4a0:	ldr	r0, [pc, #16]	; a4b8 <rb_bh_create+0xfc>
    a4a4:	mov	r1, #151	; 0x97
    a4a8:	add	r0, pc, r0
    a4ac:	bl	a4bc <_rb_bh_fail>
    a4b0:	.word	0x000304d4
    a4b4:	.word	0x0000b4b4
    a4b8:	.word	0x0000b4d2

0000a4bc <_rb_bh_fail>:
    a4bc:	push	{fp, lr}
    a4c0:	mov	fp, sp
    a4c4:	mov	r3, r1
    a4c8:	mov	r1, r0
    a4cc:	ldr	r0, [pc, #16]	; a4e4 <_rb_bh_fail+0x28>
    a4d0:	ldr	r2, [pc, #16]	; a4e8 <_rb_bh_fail+0x2c>
    a4d4:	add	r0, pc, r0
    a4d8:	add	r2, pc, r2
    a4dc:	bl	5224 <rb_lib_log@plt>
    a4e0:	bl	4cfc <abort@plt>
    a4e4:	.word	0x0000b55a
    a4e8:	.word	0x0000b499

0000a4ec <rb_bh_alloc>:
    a4ec:	push	{fp, lr}
    a4f0:	mov	fp, sp
    a4f4:	cmp	r0, #0
    a4f8:	beq	a514 <rb_bh_alloc+0x28>
    a4fc:	ldr	r1, [r0, #12]
    a500:	mov	r0, #1
    a504:	bl	4f00 <calloc@plt>
    a508:	cmp	r0, #0
    a50c:	popne	{fp, pc}
    a510:	bl	5284 <rb_outofmemory@plt>
    a514:	ldr	r0, [pc, #8]	; a524 <rb_bh_alloc+0x38>
    a518:	mov	r1, #186	; 0xba
    a51c:	add	r0, pc, r0
    a520:	bl	a4bc <_rb_bh_fail>
    a524:	.word	0x0000b499

0000a528 <rb_bh_free>:
    a528:	push	{fp, lr}
    a52c:	mov	fp, sp
    a530:	cmp	r0, #0
    a534:	beq	a550 <rb_bh_free+0x28>
    a538:	cmp	r1, #0
    a53c:	beq	a55c <rb_bh_free+0x34>
    a540:	mov	r0, r1
    a544:	bl	4ffc <free@plt>
    a548:	mov	r0, #0
    a54c:	pop	{fp, pc}
    a550:	ldr	r0, [pc, #24]	; a570 <rb_bh_free+0x48>
    a554:	add	r0, pc, r0
    a558:	b	a564 <rb_bh_free+0x3c>
    a55c:	ldr	r0, [pc, #16]	; a574 <rb_bh_free+0x4c>
    a560:	add	r0, pc, r0
    a564:	bl	5224 <rb_lib_log@plt>
    a568:	mov	r0, #1
    a56c:	pop	{fp, pc}
    a570:	.word	0x0000b47f
    a574:	.word	0x0000b493

0000a578 <rb_bh_destroy>:
    a578:	push	{r4, r5, fp, lr}
    a57c:	add	fp, sp, #8
    a580:	cmp	r0, #0
    a584:	beq	a5b0 <rb_bh_destroy+0x38>
    a588:	ldr	r1, [r0, #8]
    a58c:	mov	r4, r0
    a590:	ldr	r2, [r0, #4]
    a594:	ldr	r0, [pc, #104]	; a604 <rb_bh_destroy+0x8c>
    a598:	ldr	r0, [pc, r0]
    a59c:	cmp	r1, #0
    a5a0:	beq	a5b8 <rb_bh_destroy+0x40>
    a5a4:	str	r2, [r1, #4]
    a5a8:	ldr	r2, [r4, #4]
    a5ac:	b	a5bc <rb_bh_destroy+0x44>
    a5b0:	mov	r5, #1
    a5b4:	b	a5fc <rb_bh_destroy+0x84>
    a5b8:	str	r2, [r0, #4]
    a5bc:	cmp	r2, #0
    a5c0:	mov	r3, r0
    a5c4:	mov	r5, #0
    a5c8:	addne	r3, r2, #8
    a5cc:	str	r1, [r3]
    a5d0:	str	r5, [r4, #4]
    a5d4:	str	r5, [r4, #8]
    a5d8:	ldr	r1, [r0, #8]
    a5dc:	sub	r1, r1, #1
    a5e0:	str	r1, [r0, #8]
    a5e4:	ldr	r0, [r4, #44]	; 0x2c
    a5e8:	cmp	r0, #0
    a5ec:	beq	a5f4 <rb_bh_destroy+0x7c>
    a5f0:	bl	4ffc <free@plt>
    a5f4:	mov	r0, r4
    a5f8:	bl	4ffc <free@plt>
    a5fc:	mov	r0, r5
    a600:	pop	{r4, r5, fp, pc}
    a604:	.word	0x00030378

0000a608 <rb_bh_usage>:
    a608:	cmp	r1, #0
    a60c:	movne	r0, #0
    a610:	strne	r0, [r1]
    a614:	cmp	r2, #0
    a618:	movne	r0, #0
    a61c:	strne	r0, [r2]
    a620:	ldr	r0, [sp]
    a624:	cmp	r3, #0
    a628:	movne	r1, #0
    a62c:	strne	r1, [r3]
    a630:	cmp	r0, #0
    a634:	ldrne	r1, [pc, #8]	; a644 <rb_bh_usage+0x3c>
    a638:	addne	r1, pc, r1
    a63c:	strne	r1, [r0]
    a640:	bx	lr
    a644:	.word	0x0000b3da

0000a648 <rb_bh_usage_all>:
    a648:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    a64c:	add	fp, sp, #24
    a650:	sub	sp, sp, #8
    a654:	cmp	r0, #0
    a658:	beq	a6c4 <rb_bh_usage_all+0x7c>
    a65c:	mov	r5, r0
    a660:	ldr	r0, [pc, #100]	; a6cc <rb_bh_usage_all+0x84>
    a664:	ldr	r0, [pc, r0]
    a668:	ldr	r6, [r0]
    a66c:	cmp	r6, #0
    a670:	beq	a6c4 <rb_bh_usage_all+0x7c>
    a674:	ldr	r7, [pc, #84]	; a6d0 <rb_bh_usage_all+0x88>
    a678:	mov	r8, r1
    a67c:	add	r7, pc, r7
    a680:	ldr	r0, [r6]
    a684:	ldr	r2, [r0, #12]
    a688:	ldr	r3, [r0, #16]
    a68c:	ldr	r4, [r0, #28]
    a690:	ldr	r1, [r0, #40]	; 0x28
    a694:	ldr	r0, [r0, #44]	; 0x2c
    a698:	cmp	r0, #0
    a69c:	movne	r7, r0
    a6a0:	mul	r0, r3, r4
    a6a4:	stm	sp, {r7, r8}
    a6a8:	mul	r3, r0, r2
    a6ac:	sub	r0, r0, r1
    a6b0:	mul	r2, r0, r2
    a6b4:	blx	r5
    a6b8:	ldr	r6, [r6, #8]
    a6bc:	cmp	r6, #0
    a6c0:	bne	a680 <rb_bh_usage_all+0x38>
    a6c4:	sub	sp, fp, #24
    a6c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    a6cc:	.word	0x000302ac
    a6d0:	.word	0x0000b3a3

0000a6d4 <rb_bh_total_usage>:
    a6d4:	push	{r4, r5, r6, sl, fp, lr}
    a6d8:	add	fp, sp, #16
    a6dc:	ldr	r2, [pc, #100]	; a748 <rb_bh_total_usage+0x74>
    a6e0:	ldr	r2, [pc, r2]
    a6e4:	ldr	r2, [r2]
    a6e8:	cmp	r2, #0
    a6ec:	beq	a72c <rb_bh_total_usage+0x58>
    a6f0:	mov	lr, #0
    a6f4:	mov	ip, #0
    a6f8:	ldr	r3, [r2]
    a6fc:	ldr	r2, [r2, #8]
    a700:	ldr	r5, [r3, #16]
    a704:	ldr	r6, [r3, #28]
    a708:	ldr	r4, [r3, #12]
    a70c:	ldr	r3, [r3, #40]	; 0x28
    a710:	cmp	r2, #0
    a714:	mul	r5, r5, r6
    a718:	sub	r3, r5, r3
    a71c:	mla	lr, r5, r4, lr
    a720:	mla	ip, r3, r4, ip
    a724:	bne	a6f8 <rb_bh_total_usage+0x24>
    a728:	b	a734 <rb_bh_total_usage+0x60>
    a72c:	mov	ip, #0
    a730:	mov	lr, #0
    a734:	cmp	r0, #0
    a738:	strne	lr, [r0]
    a73c:	cmp	r1, #0
    a740:	strne	ip, [r1]
    a744:	pop	{r4, r5, r6, sl, fp, pc}
    a748:	.word	0x00030230

0000a74c <rb_get_sockerr>:
    a74c:	push	{r4, r5, r6, r7, fp, lr}
    a750:	add	fp, sp, #16
    a754:	sub	sp, sp, #16
    a758:	mov	r5, r0
    a75c:	mov	r0, #0
    a760:	str	r0, [sp, #12]
    a764:	mov	r0, #4
    a768:	str	r0, [sp, #8]
    a76c:	ldrb	r7, [r5, #17]
    a770:	bl	55e4 <__errno_location@plt>
    a774:	ldr	r6, [r0]
    a778:	tst	r7, #4
    a77c:	bne	a788 <rb_get_sockerr+0x3c>
    a780:	mov	r0, r6
    a784:	b	a7c4 <rb_get_sockerr+0x78>
    a788:	mov	r4, r0
    a78c:	ldr	r0, [r5, #12]
    a790:	add	r1, sp, #8
    a794:	add	r3, sp, #12
    a798:	mov	r2, #4
    a79c:	str	r1, [sp]
    a7a0:	mov	r1, #1
    a7a4:	bl	556c <getsockopt@plt>
    a7a8:	mov	r1, r0
    a7ac:	ldr	r0, [sp, #12]
    a7b0:	cmp	r0, #0
    a7b4:	moveq	r0, r6
    a7b8:	cmp	r1, #0
    a7bc:	movne	r0, r6
    a7c0:	str	r0, [r4]
    a7c4:	sub	sp, fp, #16
    a7c8:	pop	{r4, r5, r6, r7, fp, pc}

0000a7cc <rb_get_fd>:
    a7cc:	cmp	r0, #0
    a7d0:	ldrne	r0, [r0, #12]
    a7d4:	mvneq	r0, #0
    a7d8:	bx	lr

0000a7dc <rb_getmaxconnect>:
    a7dc:	ldr	r0, [pc, #8]	; a7ec <rb_getmaxconnect+0x10>
    a7e0:	ldr	r0, [pc, r0]
    a7e4:	ldr	r0, [r0]
    a7e8:	bx	lr
    a7ec:	.word	0x0001dba0

0000a7f0 <rb_set_buffers>:
    a7f0:	push	{r4, r5, fp, lr}
    a7f4:	add	fp, sp, #8
    a7f8:	sub	sp, sp, #8
    a7fc:	cmp	r0, #0
    a800:	str	r1, [sp, #4]
    a804:	beq	a830 <rb_set_buffers+0x40>
    a808:	mov	r4, r0
    a80c:	ldr	r0, [r0, #12]
    a810:	mov	r5, #4
    a814:	add	r3, sp, #4
    a818:	mov	r1, #1
    a81c:	mov	r2, #8
    a820:	str	r5, [sp]
    a824:	bl	5590 <setsockopt@plt>
    a828:	cmp	r0, #0
    a82c:	beq	a838 <rb_set_buffers+0x48>
    a830:	mov	r0, #0
    a834:	b	a858 <rb_set_buffers+0x68>
    a838:	ldr	r0, [r4, #12]
    a83c:	add	r3, sp, #4
    a840:	mov	r1, #1
    a844:	mov	r2, #7
    a848:	str	r5, [sp]
    a84c:	bl	5590 <setsockopt@plt>
    a850:	clz	r0, r0
    a854:	lsr	r0, r0, #5
    a858:	sub	sp, fp, #8
    a85c:	pop	{r4, r5, fp, pc}

0000a860 <rb_set_nb>:
    a860:	push	{r4, r5, fp, lr}
    a864:	add	fp, sp, #8
    a868:	cmp	r0, #0
    a86c:	beq	a8c8 <rb_set_nb+0x68>
    a870:	ldr	r4, [r0, #12]
    a874:	ldr	r1, [pc, #88]	; a8d4 <rb_set_nb+0x74>
    a878:	ldr	r1, [pc, r1]
    a87c:	blx	r1
    a880:	mov	r5, r0
    a884:	cmp	r0, #0
    a888:	bne	a8cc <rb_set_nb+0x6c>
    a88c:	mov	r0, r4
    a890:	mov	r1, #3
    a894:	mov	r2, #0
    a898:	mov	r5, #0
    a89c:	bl	54f4 <fcntl@plt>
    a8a0:	cmn	r0, #1
    a8a4:	beq	a8cc <rb_set_nb+0x6c>
    a8a8:	orr	r2, r0, #2048	; 0x800
    a8ac:	mov	r0, r4
    a8b0:	mov	r1, #4
    a8b4:	bl	54f4 <fcntl@plt>
    a8b8:	mvn	r1, #0
    a8bc:	subs	r0, r0, r1
    a8c0:	movwne	r0, #1
    a8c4:	pop	{r4, r5, fp, pc}
    a8c8:	mov	r5, #0
    a8cc:	mov	r0, r5
    a8d0:	pop	{r4, r5, fp, pc}
    a8d4:	.word	0x000300f0

0000a8d8 <rb_setup_fd>:
    a8d8:	ldr	r1, [pc, #4]	; a8e4 <rb_setup_fd+0xc>
    a8dc:	ldr	r1, [pc, r1]
    a8e0:	bx	r1
    a8e4:	.word	0x0003008c

0000a8e8 <rb_settimeout>:
    a8e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    a8ec:	add	fp, sp, #24
    a8f0:	cmp	r0, #0
    a8f4:	beq	aa00 <rb_settimeout+0x118>
    a8f8:	ldr	r5, [r0, #44]	; 0x2c
    a8fc:	mov	r7, r2
    a900:	mov	r4, r0
    a904:	cmp	r2, #0
    a908:	beq	a984 <rb_settimeout+0x9c>
    a90c:	mov	r8, r3
    a910:	mov	r6, r1
    a914:	cmp	r5, #0
    a918:	bne	a938 <rb_settimeout+0x50>
    a91c:	mov	r0, #1
    a920:	mov	r1, #28
    a924:	bl	4f00 <calloc@plt>
    a928:	cmp	r0, #0
    a92c:	beq	aa74 <rb_settimeout+0x18c>
    a930:	mov	r5, r0
    a934:	str	r0, [r4, #44]	; 0x2c
    a938:	str	r4, [r5]
    a93c:	bl	50ec <rb_current_time@plt>
    a940:	ldr	r2, [pc, #320]	; aa88 <rb_settimeout+0x1a0>
    a944:	mov	r1, #0
    a948:	add	r0, r0, r6
    a94c:	ldr	r2, [pc, r2]
    a950:	str	r5, [r5, #4]
    a954:	str	r1, [r5, #8]
    a958:	add	r1, r5, #16
    a95c:	str	r2, [r5, #12]
    a960:	stm	r1, {r0, r7, r8}
    a964:	add	r1, r5, #4
    a968:	cmp	r2, #0
    a96c:	ldr	r0, [pc, #280]	; aa8c <rb_settimeout+0x1a4>
    a970:	add	r0, pc, r0
    a974:	beq	a9a8 <rb_settimeout+0xc0>
    a978:	add	r2, r2, #4
    a97c:	str	r1, [r2]
    a980:	b	a9b8 <rb_settimeout+0xd0>
    a984:	cmp	r5, #0
    a988:	beq	aa00 <rb_settimeout+0x118>
    a98c:	ldr	r0, [r5, #12]
    a990:	ldr	r1, [r5, #8]
    a994:	cmp	r0, #0
    a998:	beq	aa04 <rb_settimeout+0x11c>
    a99c:	str	r1, [r0, #4]
    a9a0:	ldr	r1, [r5, #8]
    a9a4:	b	aa10 <rb_settimeout+0x128>
    a9a8:	mov	r2, r0
    a9ac:	ldr	r3, [r2, #4]!
    a9b0:	cmp	r3, #0
    a9b4:	streq	r1, [r2]
    a9b8:	str	r1, [r0]
    a9bc:	ldr	r1, [r0, #8]
    a9c0:	add	r1, r1, #1
    a9c4:	str	r1, [r0, #8]
    a9c8:	ldr	r0, [pc, #192]	; aa90 <rb_settimeout+0x1a8>
    a9cc:	ldr	r0, [pc, r0]
    a9d0:	cmp	r0, #0
    a9d4:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
    a9d8:	ldr	r1, [pc, #180]	; aa94 <rb_settimeout+0x1ac>
    a9dc:	mov	r2, #0
    a9e0:	mov	r3, #5
    a9e4:	ldr	r1, [pc, r1]
    a9e8:	ldr	r0, [pc, #168]	; aa98 <rb_settimeout+0x1b0>
    a9ec:	add	r0, pc, r0
    a9f0:	bl	5404 <rb_event_add@plt>
    a9f4:	ldr	r1, [pc, #160]	; aa9c <rb_settimeout+0x1b4>
    a9f8:	add	r1, pc, r1
    a9fc:	str	r0, [r1]
    aa00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    aa04:	ldr	r2, [pc, #108]	; aa78 <rb_settimeout+0x190>
    aa08:	add	r2, pc, r2
    aa0c:	str	r1, [r2, #4]
    aa10:	ldr	r7, [pc, #100]	; aa7c <rb_settimeout+0x194>
    aa14:	cmp	r1, #0
    aa18:	mov	r6, #0
    aa1c:	add	r7, pc, r7
    aa20:	mov	r2, r7
    aa24:	addne	r2, r1, #8
    aa28:	str	r0, [r2]
    aa2c:	str	r6, [r5, #8]
    aa30:	str	r6, [r5, #12]
    aa34:	ldr	r0, [r7, #8]
    aa38:	sub	r0, r0, #1
    aa3c:	str	r0, [r7, #8]
    aa40:	mov	r0, r5
    aa44:	bl	4ffc <free@plt>
    aa48:	str	r6, [r4, #44]	; 0x2c
    aa4c:	ldr	r0, [r7, #8]
    aa50:	cmp	r0, #0
    aa54:	bne	aa00 <rb_settimeout+0x118>
    aa58:	ldr	r0, [pc, #32]	; aa80 <rb_settimeout+0x198>
    aa5c:	ldr	r0, [pc, r0]
    aa60:	bl	4dc8 <rb_event_delete@plt>
    aa64:	ldr	r0, [pc, #24]	; aa84 <rb_settimeout+0x19c>
    aa68:	add	r0, pc, r0
    aa6c:	str	r6, [r0]
    aa70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    aa74:	bl	5284 <rb_outofmemory@plt>
    aa78:	.word	0x0002ff10
    aa7c:	.word	0x0002fefc
    aa80:	.word	0x0002fec8
    aa84:	.word	0x0002febc
    aa88:	.word	0x0002ffcc
    aa8c:	.word	0x0002ffa8
    aa90:	.word	0x0002ff58
    aa94:	.word	0x0001d94c
    aa98:	.word	0x0000b068
    aa9c:	.word	0x0002ff2c

0000aaa0 <rb_checktimeouts>:
    aaa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aaa4:	add	fp, sp, #28
    aaa8:	sub	sp, sp, #4
    aaac:	ldr	r7, [pc, #184]	; ab6c <rb_checktimeouts+0xcc>
    aab0:	ldr	r7, [pc, r7]
    aab4:	cmp	r7, #0
    aab8:	beq	ab64 <rb_checktimeouts+0xc4>
    aabc:	ldr	r8, [pc, #172]	; ab70 <rb_checktimeouts+0xd0>
    aac0:	mov	r9, #0
    aac4:	add	r8, pc, r8
    aac8:	ldr	r5, [r7]
    aacc:	ldr	r7, [r7, #8]
    aad0:	ldr	r4, [r5]
    aad4:	cmp	r4, #0
    aad8:	beq	ab5c <rb_checktimeouts+0xbc>
    aadc:	ldrb	r0, [r4, #16]
    aae0:	tst	r0, #1
    aae4:	beq	ab5c <rb_checktimeouts+0xbc>
    aae8:	ldr	r6, [r5, #16]
    aaec:	bl	50ec <rb_current_time@plt>
    aaf0:	cmp	r6, r0
    aaf4:	bge	ab5c <rb_checktimeouts+0xbc>
    aaf8:	ldr	r0, [r5, #12]
    aafc:	ldr	r1, [r5, #8]
    ab00:	ldr	sl, [r5, #20]
    ab04:	ldr	r6, [r5, #24]
    ab08:	cmp	r0, #0
    ab0c:	beq	ab1c <rb_checktimeouts+0x7c>
    ab10:	str	r1, [r0, #4]
    ab14:	ldr	r1, [r5, #8]
    ab18:	b	ab20 <rb_checktimeouts+0x80>
    ab1c:	str	r1, [r8, #4]
    ab20:	cmp	r1, #0
    ab24:	mov	r2, r8
    ab28:	addne	r2, r1, #8
    ab2c:	str	r0, [r2]
    ab30:	str	r9, [r5, #8]
    ab34:	str	r9, [r5, #12]
    ab38:	ldr	r0, [r8, #8]
    ab3c:	sub	r0, r0, #1
    ab40:	str	r0, [r8, #8]
    ab44:	mov	r0, r5
    ab48:	str	r9, [r4, #44]	; 0x2c
    ab4c:	bl	4ffc <free@plt>
    ab50:	mov	r0, r4
    ab54:	mov	r1, r6
    ab58:	blx	sl
    ab5c:	cmp	r7, #0
    ab60:	bne	aac8 <rb_checktimeouts+0x28>
    ab64:	sub	sp, fp, #28
    ab68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab6c:	.word	0x0002fe68
    ab70:	.word	0x0002fe54

0000ab74 <rb_bind>:
    ab74:	push	{r4, r5, r6, sl, fp, lr}
    ab78:	add	fp, sp, #16
    ab7c:	sub	sp, sp, #8
    ab80:	mov	r5, r0
    ab84:	mov	r0, #1
    ab88:	mov	r6, r1
    ab8c:	mov	r1, #4
    ab90:	add	r3, sp, #4
    ab94:	mov	r2, #2
    ab98:	str	r0, [sp, #4]
    ab9c:	ldr	r0, [r5, #12]
    aba0:	str	r1, [sp]
    aba4:	mov	r1, #1
    aba8:	bl	5590 <setsockopt@plt>
    abac:	cmp	r0, #0
    abb0:	beq	abe0 <rb_bind+0x6c>
    abb4:	ldr	r6, [r5, #12]
    abb8:	mov	r4, r0
    abbc:	mov	r0, r5
    abc0:	bl	538c <rb_get_sockerr@plt>
    abc4:	bl	4cd8 <strerror@plt>
    abc8:	mov	r2, r0
    abcc:	ldr	r0, [pc, #56]	; ac0c <rb_bind+0x98>
    abd0:	mov	r1, r6
    abd4:	add	r0, pc, r0
    abd8:	bl	5224 <rb_lib_log@plt>
    abdc:	b	ac00 <rb_bind+0x8c>
    abe0:	ldrh	r0, [r6]
    abe4:	mov	r2, #28
    abe8:	mov	r1, r6
    abec:	cmp	r0, #2
    abf0:	ldr	r0, [r5, #12]
    abf4:	movweq	r2, #16
    abf8:	bl	5218 <bind@plt>
    abfc:	mov	r4, r0
    ac00:	mov	r0, r4
    ac04:	sub	sp, fp, #16
    ac08:	pop	{r4, r5, r6, sl, fp, pc}
    ac0c:	.word	0x0000b047

0000ac10 <rb_sctp_bindx>:
    ac10:	mvn	r0, #0
    ac14:	bx	lr

0000ac18 <rb_inet_get_proto>:
    ac18:	mov	r0, #6
    ac1c:	bx	lr

0000ac20 <rb_accept_tcp>:
    ac20:	push	{r4, r5, r6, r7, fp, lr}
    ac24:	add	fp, sp, #16
    ac28:	cmp	r0, #0
    ac2c:	beq	ac74 <rb_accept_tcp+0x54>
    ac30:	mov	r6, r1
    ac34:	mov	r5, r0
    ac38:	mov	r0, #1
    ac3c:	mov	r1, #144	; 0x90
    ac40:	mov	r4, r3
    ac44:	mov	r7, r2
    ac48:	bl	4f00 <calloc@plt>
    ac4c:	cmp	r0, #0
    ac50:	beq	ac78 <rb_accept_tcp+0x58>
    ac54:	str	r0, [r5, #52]	; 0x34
    ac58:	str	r7, [r0, #132]	; 0x84
    ac5c:	str	r6, [r0, #136]	; 0x88
    ac60:	str	r4, [r0, #140]	; 0x8c
    ac64:	mov	r0, r5
    ac68:	mov	r1, #0
    ac6c:	pop	{r4, r5, r6, r7, fp, lr}
    ac70:	b	ac7c <rb_accept_tryaccept>
    ac74:	pop	{r4, r5, r6, r7, fp, pc}
    ac78:	bl	5284 <rb_outofmemory@plt>

0000ac7c <rb_accept_tryaccept>:
    ac7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac80:	add	fp, sp, #28
    ac84:	sub	sp, sp, #140	; 0x8c
    ac88:	add	r5, sp, #8
    ac8c:	mov	r4, r0
    ac90:	mov	r1, #0
    ac94:	mov	r2, #128	; 0x80
    ac98:	mov	r6, #128	; 0x80
    ac9c:	mov	r0, r5
    aca0:	bl	4f3c <memset@plt>
    aca4:	str	r6, [sp, #4]
    aca8:	add	r2, sp, #4
    acac:	mov	r1, r5
    acb0:	ldr	r0, [r4, #12]
    acb4:	bl	5074 <accept@plt>
    acb8:	cmp	r0, #0
    acbc:	bmi	ae24 <rb_accept_tryaccept+0x1a8>
    acc0:	mov	r9, r0
    acc4:	add	r8, r5, #8
    acc8:	add	sl, sp, #4
    accc:	ldrb	r0, [r4, #17]
    acd0:	ldr	r2, [pc, #372]	; ae4c <rb_accept_tryaccept+0x1d0>
    acd4:	and	r0, r0, #128	; 0x80
    acd8:	add	r2, pc, r2
    acdc:	orr	r1, r0, #4
    ace0:	mov	r0, r9
    ace4:	bl	5380 <rb_open@plt>
    ace8:	cmp	r0, #0
    acec:	beq	ada0 <rb_accept_tryaccept+0x124>
    acf0:	mov	r6, r0
    acf4:	bl	4f30 <rb_set_nb@plt>
    acf8:	cmp	r0, #0
    acfc:	beq	ae08 <rb_accept_tryaccept+0x18c>
    ad00:	ldr	r0, [sp, #16]
    ad04:	ldr	r1, [sp, #20]
    ad08:	orrs	r0, r0, r1
    ad0c:	bne	ad40 <rb_accept_tryaccept+0xc4>
    ad10:	ldrh	r0, [sp, #8]
    ad14:	cmp	r0, #10
    ad18:	ldreq	r0, [sp, #24]
    ad1c:	cmneq	r0, #65536	; 0x10000
    ad20:	bne	ad40 <rb_accept_tryaccept+0xc4>
    ad24:	mov	r0, #2
    ad28:	strh	r0, [sp, #8]
    ad2c:	ldr	r0, [sp, #28]
    ad30:	str	r0, [sp, #12]
    ad34:	mov	r0, #0
    ad38:	str	r0, [r8, #4]
    ad3c:	str	r0, [r8]
    ad40:	ldr	r0, [r4, #52]	; 0x34
    ad44:	ldr	r7, [r0, #136]	; 0x88
    ad48:	cmp	r7, #0
    ad4c:	beq	ad6c <rb_accept_tryaccept+0xf0>
    ad50:	ldr	r3, [r0, #140]	; 0x8c
    ad54:	ldr	r2, [sp, #4]
    ad58:	mov	r0, r6
    ad5c:	mov	r1, r5
    ad60:	blx	r7
    ad64:	cmp	r0, #0
    ad68:	beq	add0 <rb_accept_tryaccept+0x154>
    ad6c:	ldrb	r0, [r4, #17]
    ad70:	tst	r0, #32
    ad74:	bne	adbc <rb_accept_tryaccept+0x140>
    ad78:	ldr	r0, [r4, #52]	; 0x34
    ad7c:	ldr	r3, [sp, #4]
    ad80:	mov	r1, #0
    ad84:	mov	r2, r5
    ad88:	ldr	r7, [r0, #132]	; 0x84
    ad8c:	ldr	r0, [r0, #140]	; 0x8c
    ad90:	str	r0, [sp]
    ad94:	mov	r0, r6
    ad98:	blx	r7
    ad9c:	b	add0 <rb_accept_tryaccept+0x154>
    ada0:	ldr	r0, [pc, #168]	; ae50 <rb_accept_tryaccept+0x1d4>
    ada4:	mov	r1, r9
    ada8:	add	r0, pc, r0
    adac:	bl	5224 <rb_lib_log@plt>
    adb0:	mov	r0, r9
    adb4:	bl	5248 <close@plt>
    adb8:	b	add0 <rb_accept_tryaccept+0x154>
    adbc:	ldr	r3, [sp, #4]
    adc0:	mov	r0, r4
    adc4:	mov	r1, r6
    adc8:	mov	r2, r5
    adcc:	bl	e1ac <rb_ssl_accept_setup>
    add0:	mov	r0, r5
    add4:	mov	r1, #0
    add8:	mov	r2, #128	; 0x80
    addc:	bl	4f3c <memset@plt>
    ade0:	mov	r0, #128	; 0x80
    ade4:	mov	r1, r5
    ade8:	mov	r2, sl
    adec:	str	r0, [sp, #4]
    adf0:	ldr	r0, [r4, #12]
    adf4:	bl	5074 <accept@plt>
    adf8:	mov	r9, r0
    adfc:	cmp	r0, #0
    ae00:	bpl	accc <rb_accept_tryaccept+0x50>
    ae04:	b	ae24 <rb_accept_tryaccept+0x1a8>
    ae08:	ldr	r1, [r6, #12]
    ae0c:	ldr	r0, [pc, #72]	; ae5c <rb_accept_tryaccept+0x1e0>
    ae10:	add	r0, pc, r0
    ae14:	bl	5224 <rb_lib_log@plt>
    ae18:	mov	r0, r6
    ae1c:	bl	5170 <rb_close@plt>
    ae20:	b	ad00 <rb_accept_tryaccept+0x84>
    ae24:	ldr	r7, [pc, #40]	; ae54 <rb_accept_tryaccept+0x1d8>
    ae28:	mov	r0, r4
    ae2c:	mov	r1, #1
    ae30:	mov	r3, #0
    ae34:	ldr	r7, [pc, r7]
    ae38:	ldr	r2, [pc, #24]	; ae58 <rb_accept_tryaccept+0x1dc>
    ae3c:	add	r2, pc, r2
    ae40:	blx	r7
    ae44:	sub	sp, fp, #28
    ae48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae4c:	.word	0x0000af82
    ae50:	.word	0x0000aec6
    ae54:	.word	0x0002fb2c
    ae58:	.word	0xfffffe38
    ae5c:	.word	0x0000aea4

0000ae60 <rb_connect_tcp>:
    ae60:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    ae64:	add	fp, sp, #24
    ae68:	cmp	r0, #0
    ae6c:	beq	af2c <rb_connect_tcp+0xcc>
    ae70:	ldr	r8, [fp, #12]
    ae74:	ldr	r9, [fp, #8]
    ae78:	mov	r7, r1
    ae7c:	mov	r4, r0
    ae80:	mov	r0, #1
    ae84:	mov	r1, #268	; 0x10c
    ae88:	mov	r5, r3
    ae8c:	mov	r6, r2
    ae90:	bl	4f00 <calloc@plt>
    ae94:	cmp	r0, #0
    ae98:	beq	afac <rb_connect_tcp+0x14c>
    ae9c:	str	r0, [r4, #48]	; 0x30
    aea0:	str	r5, [r0, #260]	; 0x104
    aea4:	str	r9, [r0, #264]	; 0x108
    aea8:	add	r0, r0, #128	; 0x80
    aeac:	mov	r1, r7
    aeb0:	mov	r2, #128	; 0x80
    aeb4:	bl	5104 <memcpy@plt>
    aeb8:	cmp	r6, #0
    aebc:	beq	aee4 <rb_connect_tcp+0x84>
    aec0:	ldrh	r0, [r6]
    aec4:	mov	r2, #28
    aec8:	mov	r1, r6
    aecc:	cmp	r0, #2
    aed0:	ldr	r0, [r4, #12]
    aed4:	movweq	r2, #16
    aed8:	bl	5218 <bind@plt>
    aedc:	cmn	r0, #1
    aee0:	ble	af58 <rb_connect_tcp+0xf8>
    aee4:	ldr	r2, [pc, #196]	; afb0 <rb_connect_tcp+0x150>
    aee8:	mov	r0, r4
    aeec:	mov	r1, r8
    aef0:	mov	r3, #0
    aef4:	add	r2, pc, r2
    aef8:	bl	4d20 <rb_settimeout@plt>
    aefc:	ldr	r1, [r4, #48]	; 0x30
    af00:	ldr	r0, [r4, #12]
    af04:	mov	r2, #28
    af08:	ldrh	r3, [r1, #128]!	; 0x80
    af0c:	cmp	r3, #2
    af10:	movweq	r2, #16
    af14:	bl	4d08 <connect@plt>
    af18:	cmn	r0, #1
    af1c:	ble	af30 <rb_connect_tcp+0xd0>
    af20:	mov	r0, r4
    af24:	mov	r1, #0
    af28:	b	af60 <rb_connect_tcp+0x100>
    af2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    af30:	bl	55e4 <__errno_location@plt>
    af34:	ldr	r0, [r0]
    af38:	cmp	r0, #104	; 0x68
    af3c:	bgt	af68 <rb_connect_tcp+0x108>
    af40:	cmp	r0, #4
    af44:	cmpne	r0, #11
    af48:	beq	af74 <rb_connect_tcp+0x114>
    af4c:	cmp	r0, #85	; 0x55
    af50:	beq	af74 <rb_connect_tcp+0x114>
    af54:	b	afa0 <rb_connect_tcp+0x140>
    af58:	mov	r0, r4
    af5c:	mov	r1, #1
    af60:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    af64:	b	afbc <rb_connect_callback>
    af68:	cmp	r0, #105	; 0x69
    af6c:	cmpne	r0, #115	; 0x73
    af70:	bne	af98 <rb_connect_tcp+0x138>
    af74:	ldr	ip, [pc, #56]	; afb4 <rb_connect_tcp+0x154>
    af78:	mov	r0, r4
    af7c:	mov	r1, #2
    af80:	mov	r3, #0
    af84:	ldr	ip, [pc, ip]
    af88:	ldr	r2, [pc, #40]	; afb8 <rb_connect_tcp+0x158>
    af8c:	add	r2, pc, r2
    af90:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    af94:	bx	ip
    af98:	cmp	r0, #106	; 0x6a
    af9c:	beq	af20 <rb_connect_tcp+0xc0>
    afa0:	mov	r0, r4
    afa4:	mov	r1, #4
    afa8:	b	af60 <rb_connect_tcp+0x100>
    afac:	bl	5284 <rb_outofmemory@plt>
    afb0:	.word	0x00000140
    afb4:	.word	0x0002f9dc
    afb8:	.word	0x00000100

0000afbc <rb_connect_callback>:
    afbc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    afc0:	add	fp, sp, #24
    afc4:	mov	r4, r1
    afc8:	mov	r5, r0
    afcc:	bl	55e4 <__errno_location@plt>
    afd0:	cmp	r5, #0
    afd4:	beq	b038 <rb_connect_callback+0x7c>
    afd8:	mov	r6, r0
    afdc:	ldr	r0, [r5, #48]	; 0x30
    afe0:	cmp	r0, #0
    afe4:	beq	b038 <rb_connect_callback+0x7c>
    afe8:	ldr	r1, [r0, #260]	; 0x104
    afec:	cmp	r1, #0
    aff0:	beq	b038 <rb_connect_callback+0x7c>
    aff4:	mov	r9, r1
    aff8:	mov	r1, #0
    affc:	ldr	r8, [r6]
    b000:	mov	r2, #0
    b004:	mov	r3, #0
    b008:	str	r1, [r0, #260]	; 0x104
    b00c:	mov	r1, #0
    b010:	ldr	r7, [r0, #264]	; 0x108
    b014:	mov	r0, r5
    b018:	bl	4d20 <rb_settimeout@plt>
    b01c:	str	r8, [r6]
    b020:	mov	r0, r5
    b024:	mov	r1, r4
    b028:	mov	r2, r7
    b02c:	mov	r3, r9
    b030:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    b034:	bx	r3
    b038:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000b03c <rb_connect_timeout>:
    b03c:	mov	r1, #3
    b040:	b	afbc <rb_connect_callback>

0000b044 <rb_ignore_errno>:
    b044:	sub	r2, r0, #85	; 0x55
    b048:	mov	r1, r0
    b04c:	mov	r0, #1
    b050:	cmp	r2, #30
    b054:	bhi	b06c <rb_ignore_errno+0x28>
    b058:	movw	r3, #1
    b05c:	mov	ip, #1
    b060:	movt	r3, #16400	; 0x4010
    b064:	tst	r3, ip, lsl r2
    b068:	bxne	lr
    b06c:	cmp	r1, #4
    b070:	cmpne	r1, #11
    b074:	bne	b07c <rb_ignore_errno+0x38>
    b078:	bx	lr
    b07c:	mov	r0, #0
    b080:	bx	lr

0000b084 <rb_setselect>:
    b084:	ldr	ip, [pc, #4]	; b090 <rb_setselect+0xc>
    b088:	ldr	ip, [pc, ip]
    b08c:	bx	ip
    b090:	.word	0x0002f8d8

0000b094 <rb_connect_outcome>:
    b094:	push	{r4, r5, fp, lr}
    b098:	add	fp, sp, #8
    b09c:	sub	sp, sp, #16
    b0a0:	mov	r4, r0
    b0a4:	mov	r0, #0
    b0a8:	str	r0, [sp, #12]
    b0ac:	mov	r0, #4
    b0b0:	cmp	r4, #0
    b0b4:	str	r0, [sp, #8]
    b0b8:	beq	b130 <rb_connect_outcome+0x9c>
    b0bc:	ldr	r0, [r4, #48]	; 0x30
    b0c0:	cmp	r0, #0
    b0c4:	beq	b130 <rb_connect_outcome+0x9c>
    b0c8:	ldr	r0, [r0, #260]	; 0x104
    b0cc:	cmp	r0, #0
    b0d0:	beq	b130 <rb_connect_outcome+0x9c>
    b0d4:	ldr	r0, [r4, #12]
    b0d8:	add	r1, sp, #8
    b0dc:	add	r3, sp, #12
    b0e0:	mov	r2, #4
    b0e4:	str	r1, [sp]
    b0e8:	mov	r1, #1
    b0ec:	bl	556c <getsockopt@plt>
    b0f0:	cmp	r0, #0
    b0f4:	bmi	b110 <rb_connect_outcome+0x7c>
    b0f8:	ldr	r5, [sp, #12]
    b0fc:	cmp	r5, #0
    b100:	beq	b110 <rb_connect_outcome+0x7c>
    b104:	bl	55e4 <__errno_location@plt>
    b108:	str	r5, [r0]
    b10c:	b	b124 <rb_connect_outcome+0x90>
    b110:	cmn	r0, #1
    b114:	ble	b124 <rb_connect_outcome+0x90>
    b118:	mov	r0, r4
    b11c:	mov	r1, #0
    b120:	b	b12c <rb_connect_outcome+0x98>
    b124:	mov	r0, r4
    b128:	mov	r1, #4
    b12c:	bl	afbc <rb_connect_callback>
    b130:	sub	sp, fp, #8
    b134:	pop	{r4, r5, fp, pc}

0000b138 <rb_connect_sctp>:
    b138:	mov	r1, #4
    b13c:	b	afbc <rb_connect_callback>

0000b140 <rb_connect_sockaddr>:
    b140:	cmp	r0, #0
    b144:	moveq	r0, #0
    b148:	bxeq	lr
    b14c:	push	{fp, lr}
    b150:	mov	fp, sp
    b154:	ldr	r0, [r0, #48]	; 0x30
    b158:	add	r3, r0, #128	; 0x80
    b15c:	mov	r0, r1
    b160:	mov	r1, r3
    b164:	bl	5104 <memcpy@plt>
    b168:	mov	r0, #1
    b16c:	pop	{fp, pc}

0000b170 <rb_errstr>:
    b170:	cmp	r0, #6
    b174:	bls	b184 <rb_errstr+0x14>
    b178:	ldr	r0, [pc, #20]	; b194 <rb_errstr+0x24>
    b17c:	add	r0, pc, r0
    b180:	bx	lr
    b184:	ldr	r1, [pc, #12]	; b198 <rb_errstr+0x28>
    b188:	add	r1, pc, r1
    b18c:	ldr	r0, [r1, r0, lsl #2]
    b190:	bx	lr
    b194:	.word	0x0000a8e9
    b198:	.word	0x0001c8ac

0000b19c <rb_socketpair>:
    b19c:	push	{r4, r5, r6, r7, fp, lr}
    b1a0:	add	fp, sp, #16
    b1a4:	sub	sp, sp, #8
    b1a8:	mov	r4, r3
    b1ac:	ldr	r3, [pc, #256]	; b2b4 <rb_socketpair+0x118>
    b1b0:	ldr	r3, [pc, r3]
    b1b4:	ldr	r3, [r3]
    b1b8:	ldr	r7, [pc, #248]	; b2b8 <rb_socketpair+0x11c>
    b1bc:	ldr	r7, [pc, r7]
    b1c0:	cmp	r7, r3
    b1c4:	bge	b24c <rb_socketpair+0xb0>
    b1c8:	mov	r3, sp
    b1cc:	bl	4e88 <socketpair@plt>
    b1d0:	mvn	r5, #0
    b1d4:	cmp	r0, #0
    b1d8:	bne	b25c <rb_socketpair+0xc0>
    b1dc:	ldr	r6, [fp, #12]
    b1e0:	ldr	r0, [sp]
    b1e4:	ldr	r7, [fp, #8]
    b1e8:	mov	r1, #4
    b1ec:	mov	r2, r6
    b1f0:	bl	5380 <rb_open@plt>
    b1f4:	str	r0, [r4]
    b1f8:	mov	r1, #4
    b1fc:	mov	r2, r6
    b200:	ldr	r0, [sp, #4]
    b204:	bl	5380 <rb_open@plt>
    b208:	str	r0, [r7]
    b20c:	ldr	r1, [r4]
    b210:	cmp	r1, #0
    b214:	beq	b268 <rb_socketpair+0xcc>
    b218:	cmp	r0, #0
    b21c:	beq	b274 <rb_socketpair+0xd8>
    b220:	mov	r0, r1
    b224:	bl	4f30 <rb_set_nb@plt>
    b228:	cmp	r0, #0
    b22c:	beq	b280 <rb_socketpair+0xe4>
    b230:	ldr	r0, [r7]
    b234:	bl	4f30 <rb_set_nb@plt>
    b238:	mov	r5, #0
    b23c:	cmp	r0, #0
    b240:	bne	b25c <rb_socketpair+0xc0>
    b244:	ldr	r5, [sp, #4]
    b248:	b	b284 <rb_socketpair+0xe8>
    b24c:	bl	55e4 <__errno_location@plt>
    b250:	mov	r1, #23
    b254:	str	r1, [r0]
    b258:	mvn	r5, #0
    b25c:	mov	r0, r5
    b260:	sub	sp, fp, #16
    b264:	pop	{r4, r5, r6, r7, fp, pc}
    b268:	cmp	r0, #0
    b26c:	bne	b278 <rb_socketpair+0xdc>
    b270:	b	b25c <rb_socketpair+0xc0>
    b274:	mov	r0, r1
    b278:	bl	5170 <rb_close@plt>
    b27c:	b	b258 <rb_socketpair+0xbc>
    b280:	ldr	r5, [sp]
    b284:	bl	55e4 <__errno_location@plt>
    b288:	ldr	r0, [r0]
    b28c:	bl	4cd8 <strerror@plt>
    b290:	mov	r2, r0
    b294:	ldr	r0, [pc, #32]	; b2bc <rb_socketpair+0x120>
    b298:	mov	r1, r5
    b29c:	add	r0, pc, r0
    b2a0:	bl	5224 <rb_lib_log@plt>
    b2a4:	ldr	r0, [r4]
    b2a8:	bl	5170 <rb_close@plt>
    b2ac:	ldr	r0, [r7]
    b2b0:	b	b278 <rb_socketpair+0xdc>
    b2b4:	.word	0x0001d1d0
    b2b8:	.word	0x0002f76c
    b2bc:	.word	0x0000a7df

0000b2c0 <rb_open>:
    b2c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    b2c4:	add	fp, sp, #24
    b2c8:	eor	r7, r0, r0, lsr #12
    b2cc:	mov	r4, r2
    b2d0:	mov	r8, r1
    b2d4:	mov	r5, r0
    b2d8:	cmn	r0, #1
    b2dc:	ble	b328 <rb_open+0x68>
    b2e0:	ldr	r1, [pc, #348]	; b444 <rb_open+0x184>
    b2e4:	mov	r0, r7
    b2e8:	bfc	r0, #12, #20
    b2ec:	eor	r0, r0, r5, lsr #24
    b2f0:	ldr	r1, [pc, r1]
    b2f4:	add	r0, r0, r0, lsl #1
    b2f8:	ldr	r1, [r1]
    b2fc:	ldr	r0, [r1, r0, lsl #2]
    b300:	cmp	r0, #0
    b304:	beq	b328 <rb_open+0x68>
    b308:	ldr	r6, [r0]
    b30c:	ldr	r1, [r6, #12]
    b310:	cmp	r1, r5
    b314:	beq	b320 <rb_open+0x60>
    b318:	ldr	r0, [r0, #8]
    b31c:	b	b300 <rb_open+0x40>
    b320:	cmp	r6, #0
    b324:	bne	b3a4 <rb_open+0xe4>
    b328:	ldr	r0, [pc, #280]	; b448 <rb_open+0x188>
    b32c:	ldr	r0, [pc, r0]
    b330:	bl	5254 <rb_bh_alloc@plt>
    b334:	str	r5, [r0, #12]
    b338:	mov	r6, r0
    b33c:	mov	r1, #0
    b340:	ldr	r0, [pc, #260]	; b44c <rb_open+0x18c>
    b344:	ldr	r0, [pc, r0]
    b348:	ldr	r0, [r0]
    b34c:	str	r1, [r6, #4]
    b350:	eor	r1, r7, r5, asr #24
    b354:	str	r6, [r6]
    b358:	bfc	r1, #12, #20
    b35c:	add	r1, r1, r1, lsl #1
    b360:	mov	r2, r0
    b364:	ldr	r3, [r2, r1, lsl #2]!
    b368:	cmp	r3, #0
    b36c:	str	r3, [r6, #8]
    b370:	beq	b380 <rb_open+0xc0>
    b374:	add	r3, r3, #4
    b378:	str	r6, [r3]
    b37c:	b	b390 <rb_open+0xd0>
    b380:	add	r3, r0, r1, lsl #2
    b384:	ldr	r7, [r3, #4]!
    b388:	cmp	r7, #0
    b38c:	streq	r6, [r3]
    b390:	add	r0, r0, r1, lsl #2
    b394:	str	r6, [r2]
    b398:	ldr	r1, [r0, #8]
    b39c:	add	r1, r1, #1
    b3a0:	str	r1, [r0, #8]
    b3a4:	ldrb	r0, [r6, #16]
    b3a8:	tst	r0, #1
    b3ac:	bne	b40c <rb_open+0x14c>
    b3b0:	cmp	r4, #0
    b3b4:	orr	r0, r0, #1
    b3b8:	strb	r8, [r6, #17]
    b3bc:	str	r5, [r6, #12]
    b3c0:	strb	r0, [r6, #16]
    b3c4:	beq	b3ec <rb_open+0x12c>
    b3c8:	mov	r0, #128	; 0x80
    b3cc:	bl	52a8 <malloc@plt>
    b3d0:	cmp	r0, #0
    b3d4:	beq	b440 <rb_open+0x180>
    b3d8:	mov	r1, r4
    b3dc:	mov	r2, #128	; 0x80
    b3e0:	mov	r5, r0
    b3e4:	bl	4fb4 <rb_strlcpy@plt>
    b3e8:	str	r5, [r6, #24]
    b3ec:	ldr	r0, [pc, #100]	; b458 <rb_open+0x198>
    b3f0:	ldr	r0, [pc, r0]
    b3f4:	ldr	r1, [pc, #96]	; b45c <rb_open+0x19c>
    b3f8:	add	r0, r0, #1
    b3fc:	add	r1, pc, r1
    b400:	str	r0, [r1]
    b404:	mov	r0, r6
    b408:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    b40c:	cmp	r6, #0
    b410:	beq	b420 <rb_open+0x160>
    b414:	ldr	r2, [r6, #24]
    b418:	cmp	r2, #0
    b41c:	bne	b428 <rb_open+0x168>
    b420:	ldr	r2, [pc, #40]	; b450 <rb_open+0x190>
    b424:	add	r2, pc, r2
    b428:	ldr	r0, [pc, #36]	; b454 <rb_open+0x194>
    b42c:	mov	r1, r5
    b430:	add	r0, pc, r0
    b434:	bl	5224 <rb_lib_log@plt>
    b438:	mov	r6, #0
    b43c:	b	b404 <rb_open+0x144>
    b440:	bl	5284 <rb_outofmemory@plt>
    b444:	.word	0x0001d0b0
    b448:	.word	0x0002f604
    b44c:	.word	0x0001d05c
    b450:	.word	0x0000a5ca
    b454:	.word	0x0000a6fe
    b458:	.word	0x0002f538
    b45c:	.word	0x0002f52c

0000b460 <rb_close>:
    b460:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    b464:	add	fp, sp, #24
    b468:	cmp	r0, #0
    b46c:	beq	b5d8 <rb_close+0x178>
    b470:	ldrb	r7, [r0, #17]
    b474:	ldr	r8, [r0, #12]
    b478:	mov	r5, r0
    b47c:	ands	r6, r7, #16
    b480:	beq	b490 <rb_close+0x30>
    b484:	mov	r0, r8
    b488:	mov	r1, #0
    b48c:	bl	4ef4 <listen@plt>
    b490:	ldr	r4, [pc, #324]	; b5dc <rb_close+0x17c>
    b494:	mov	r0, r5
    b498:	mov	r1, #3
    b49c:	mov	r2, #0
    b4a0:	mov	r3, #0
    b4a4:	ldr	r4, [pc, r4]
    b4a8:	blx	r4
    b4ac:	mov	r0, r5
    b4b0:	mov	r1, #0
    b4b4:	mov	r2, #0
    b4b8:	mov	r3, #0
    b4bc:	bl	4d20 <rb_settimeout@plt>
    b4c0:	ldr	r0, [r5, #52]	; 0x34
    b4c4:	cmp	r0, #0
    b4c8:	beq	b4d0 <rb_close+0x70>
    b4cc:	bl	4ffc <free@plt>
    b4d0:	ldr	r0, [r5, #48]	; 0x30
    b4d4:	cmp	r0, #0
    b4d8:	beq	b4e0 <rb_close+0x80>
    b4dc:	bl	4ffc <free@plt>
    b4e0:	ldr	r0, [r5, #24]
    b4e4:	cmp	r0, #0
    b4e8:	beq	b4f0 <rb_close+0x90>
    b4ec:	bl	4ffc <free@plt>
    b4f0:	tst	r7, #32
    b4f4:	beq	b500 <rb_close+0xa0>
    b4f8:	mov	r0, r5
    b4fc:	bl	d374 <rb_ssl_shutdown>
    b500:	ldrb	r0, [r5, #16]
    b504:	tst	r0, #1
    b508:	beq	b5c0 <rb_close+0x160>
    b50c:	ldr	r1, [r5, #12]
    b510:	ldr	r2, [r5, #8]
    b514:	ldr	r3, [r5, #4]
    b518:	eor	r7, r1, r1, lsr #12
    b51c:	cmp	r2, #0
    b520:	eor	r1, r7, r1, asr #24
    b524:	ldr	r7, [pc, #180]	; b5e0 <rb_close+0x180>
    b528:	bfc	r1, #12, #20
    b52c:	ldr	r7, [pc, r7]
    b530:	add	r1, r1, r1, lsl #1
    b534:	ldr	r7, [r7]
    b538:	add	r7, r7, r1, lsl #2
    b53c:	beq	b54c <rb_close+0xec>
    b540:	str	r3, [r2, #4]
    b544:	ldr	r3, [r5, #4]
    b548:	b	b550 <rb_close+0xf0>
    b54c:	str	r3, [r7, #4]
    b550:	cmp	r3, #0
    b554:	mov	r1, r7
    b558:	addne	r1, r3, #8
    b55c:	str	r2, [r1]
    b560:	mov	r1, #0
    b564:	ldr	r3, [pc, #120]	; b5e4 <rb_close+0x184>
    b568:	ldr	r3, [pc, r3]
    b56c:	stmib	r5, {r1, r3}
    b570:	ldr	r2, [pc, #112]	; b5e8 <rb_close+0x188>
    b574:	cmp	r3, #0
    b578:	add	r2, pc, r2
    b57c:	beq	b58c <rb_close+0x12c>
    b580:	add	r3, r3, #4
    b584:	str	r5, [r3]
    b588:	b	b59c <rb_close+0x13c>
    b58c:	mov	r3, r2
    b590:	ldr	r1, [r3, #4]!
    b594:	cmp	r1, #0
    b598:	streq	r5, [r3]
    b59c:	str	r5, [r2]
    b5a0:	and	r0, r0, #254	; 0xfe
    b5a4:	ldr	r1, [r7, #8]
    b5a8:	sub	r1, r1, #1
    b5ac:	str	r1, [r7, #8]
    b5b0:	ldr	r1, [r2, #8]
    b5b4:	add	r1, r1, #1
    b5b8:	str	r1, [r2, #8]
    b5bc:	strb	r0, [r5, #16]
    b5c0:	cmp	r6, #0
    b5c4:	beq	b5d8 <rb_close+0x178>
    b5c8:	mov	r0, r8
    b5cc:	mov	r1, #2
    b5d0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    b5d4:	b	520c <shutdown@plt>
    b5d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    b5dc:	.word	0x0002f4bc
    b5e0:	.word	0x0001ce74
    b5e4:	.word	0x0002f404
    b5e8:	.word	0x0002f3f4

0000b5ec <rb_pipe>:
    b5ec:	push	{r4, r5, r6, sl, fp, lr}
    b5f0:	add	fp, sp, #16
    b5f4:	sub	sp, sp, #8
    b5f8:	mov	r5, r0
    b5fc:	ldr	r0, [pc, #220]	; b6e0 <rb_pipe+0xf4>
    b600:	mov	r4, r1
    b604:	ldr	r0, [pc, r0]
    b608:	ldr	r0, [r0]
    b60c:	ldr	r1, [pc, #208]	; b6e4 <rb_pipe+0xf8>
    b610:	ldr	r1, [pc, r1]
    b614:	cmp	r1, r0
    b618:	bge	b690 <rb_pipe+0xa4>
    b61c:	mov	r0, sp
    b620:	mov	r6, r2
    b624:	bl	5578 <pipe@plt>
    b628:	mov	r1, r0
    b62c:	mvn	r0, #0
    b630:	cmn	r1, #1
    b634:	beq	b6a0 <rb_pipe+0xb4>
    b638:	ldr	r0, [sp]
    b63c:	mov	r1, #8
    b640:	mov	r2, r6
    b644:	bl	5380 <rb_open@plt>
    b648:	str	r0, [r5]
    b64c:	mov	r1, #8
    b650:	mov	r2, r6
    b654:	ldr	r0, [sp, #4]
    b658:	bl	5380 <rb_open@plt>
    b65c:	str	r0, [r4]
    b660:	ldr	r0, [r5]
    b664:	bl	4f30 <rb_set_nb@plt>
    b668:	cmp	r0, #0
    b66c:	beq	b6a8 <rb_pipe+0xbc>
    b670:	ldr	r0, [r4]
    b674:	bl	4f30 <rb_set_nb@plt>
    b678:	mov	r1, r0
    b67c:	mov	r0, #0
    b680:	cmp	r1, #0
    b684:	bne	b6a0 <rb_pipe+0xb4>
    b688:	ldr	r6, [sp, #4]
    b68c:	b	b6ac <rb_pipe+0xc0>
    b690:	bl	55e4 <__errno_location@plt>
    b694:	mov	r1, #23
    b698:	str	r1, [r0]
    b69c:	mvn	r0, #0
    b6a0:	sub	sp, fp, #16
    b6a4:	pop	{r4, r5, r6, sl, fp, pc}
    b6a8:	ldr	r6, [sp]
    b6ac:	bl	55e4 <__errno_location@plt>
    b6b0:	ldr	r0, [r0]
    b6b4:	bl	4cd8 <strerror@plt>
    b6b8:	mov	r2, r0
    b6bc:	ldr	r0, [pc, #36]	; b6e8 <rb_pipe+0xfc>
    b6c0:	mov	r1, r6
    b6c4:	add	r0, pc, r0
    b6c8:	bl	5224 <rb_lib_log@plt>
    b6cc:	ldr	r0, [r5]
    b6d0:	bl	5170 <rb_close@plt>
    b6d4:	ldr	r0, [r4]
    b6d8:	bl	5170 <rb_close@plt>
    b6dc:	b	b69c <rb_pipe+0xb0>
    b6e0:	.word	0x0001cd7c
    b6e4:	.word	0x0002f318
    b6e8:	.word	0x0000a3b7

0000b6ec <rb_socket>:
    b6ec:	push	{r4, r5, r6, r7, fp, lr}
    b6f0:	add	fp, sp, #16
    b6f4:	sub	sp, sp, #8
    b6f8:	mov	r7, r0
    b6fc:	ldr	r0, [pc, #308]	; b838 <rb_socket+0x14c>
    b700:	mov	r6, r3
    b704:	ldr	r0, [pc, r0]
    b708:	ldr	r0, [r0]
    b70c:	ldr	r3, [pc, #296]	; b83c <rb_socket+0x150>
    b710:	ldr	r3, [pc, r3]
    b714:	cmp	r3, r0
    b718:	bge	b7f8 <rb_socket+0x10c>
    b71c:	mov	r0, r7
    b720:	bl	5098 <socket@plt>
    b724:	mov	r4, #0
    b728:	cmp	r0, #0
    b72c:	bmi	b7ec <rb_socket+0x100>
    b730:	mov	r5, r0
    b734:	cmp	r7, #10
    b738:	bne	b768 <rb_socket+0x7c>
    b73c:	mov	r0, #1
    b740:	add	r3, sp, #4
    b744:	mov	r1, #41	; 0x29
    b748:	mov	r2, #26
    b74c:	str	r0, [sp, #4]
    b750:	mov	r0, #4
    b754:	str	r0, [sp]
    b758:	mov	r0, r5
    b75c:	bl	5590 <setsockopt@plt>
    b760:	cmn	r0, #1
    b764:	beq	b7bc <rb_socket+0xd0>
    b768:	mov	r0, r5
    b76c:	mov	r1, #4
    b770:	mov	r2, r6
    b774:	bl	5380 <rb_open@plt>
    b778:	cmp	r0, #0
    b77c:	beq	b798 <rb_socket+0xac>
    b780:	mov	r6, r0
    b784:	bl	4f30 <rb_set_nb@plt>
    b788:	cmp	r0, #0
    b78c:	beq	b80c <rb_socket+0x120>
    b790:	mov	r4, r6
    b794:	b	b7ec <rb_socket+0x100>
    b798:	bl	55e4 <__errno_location@plt>
    b79c:	ldr	r0, [r0]
    b7a0:	bl	4cd8 <strerror@plt>
    b7a4:	mov	r2, r0
    b7a8:	ldr	r0, [pc, #148]	; b844 <rb_socket+0x158>
    b7ac:	mov	r1, r5
    b7b0:	add	r0, pc, r0
    b7b4:	bl	5224 <rb_lib_log@plt>
    b7b8:	b	b7e4 <rb_socket+0xf8>
    b7bc:	ldr	r6, [sp, #4]
    b7c0:	bl	55e4 <__errno_location@plt>
    b7c4:	ldr	r0, [r0]
    b7c8:	bl	4cd8 <strerror@plt>
    b7cc:	mov	r3, r0
    b7d0:	ldr	r0, [pc, #104]	; b840 <rb_socket+0x154>
    b7d4:	mov	r1, r6
    b7d8:	mov	r2, r5
    b7dc:	add	r0, pc, r0
    b7e0:	bl	5224 <rb_lib_log@plt>
    b7e4:	mov	r0, r5
    b7e8:	bl	5248 <close@plt>
    b7ec:	mov	r0, r4
    b7f0:	sub	sp, fp, #16
    b7f4:	pop	{r4, r5, r6, r7, fp, pc}
    b7f8:	bl	55e4 <__errno_location@plt>
    b7fc:	mov	r1, #23
    b800:	mov	r4, #0
    b804:	str	r1, [r0]
    b808:	b	b7ec <rb_socket+0x100>
    b80c:	bl	55e4 <__errno_location@plt>
    b810:	ldr	r0, [r0]
    b814:	bl	4cd8 <strerror@plt>
    b818:	mov	r2, r0
    b81c:	ldr	r0, [pc, #36]	; b848 <rb_socket+0x15c>
    b820:	mov	r1, r5
    b824:	add	r0, pc, r0
    b828:	bl	5224 <rb_lib_log@plt>
    b82c:	mov	r0, r6
    b830:	bl	5170 <rb_close@plt>
    b834:	b	b7ec <rb_socket+0x100>
    b838:	.word	0x0001cc7c
    b83c:	.word	0x0002f218
    b840:	.word	0x0000a2cc
    b844:	.word	0x0000a337
    b848:	.word	0x0000a257

0000b84c <rb_listen>:
    b84c:	push	{r4, r5, r6, sl, fp, lr}
    b850:	add	fp, sp, #16
    b854:	sub	sp, sp, #8
    b858:	str	r1, [sp, #4]
    b85c:	mov	r5, r0
    b860:	mov	r6, r2
    b864:	ldrb	r0, [r0, #17]
    b868:	and	r0, r0, #128	; 0x80
    b86c:	orr	r0, r0, #20
    b870:	strb	r0, [r5, #17]
    b874:	ldr	r0, [r5, #12]
    b878:	bl	4ef4 <listen@plt>
    b87c:	mov	r4, r0
    b880:	cmp	r6, #0
    b884:	beq	b8ac <rb_listen+0x60>
    b888:	cmp	r4, #0
    b88c:	bne	b8ac <rb_listen+0x60>
    b890:	ldr	r0, [r5, #12]
    b894:	mov	r1, #4
    b898:	add	r3, sp, #4
    b89c:	mov	r2, #9
    b8a0:	str	r1, [sp]
    b8a4:	mov	r1, #6
    b8a8:	bl	5590 <setsockopt@plt>
    b8ac:	mov	r0, r4
    b8b0:	sub	sp, fp, #16
    b8b4:	pop	{r4, r5, r6, sl, fp, pc}

0000b8b8 <rb_fdlist_init>:
    b8b8:	push	{r4, r5, r6, r7, fp, lr}
    b8bc:	add	fp, sp, #16
    b8c0:	ldr	r6, [pc, #116]	; b93c <rb_fdlist_init+0x84>
    b8c4:	mov	r4, r2
    b8c8:	add	r6, pc, r6
    b8cc:	ldrb	r2, [r6]
    b8d0:	cmp	r2, #0
    b8d4:	bne	b918 <rb_fdlist_init+0x60>
    b8d8:	ldr	r7, [pc, #96]	; b940 <rb_fdlist_init+0x88>
    b8dc:	cmp	r0, #0
    b8e0:	ldr	r7, [pc, r7]
    b8e4:	str	r1, [r7]
    b8e8:	beq	b910 <rb_fdlist_init+0x58>
    b8ec:	cmp	r1, #4
    b8f0:	blt	b910 <rb_fdlist_init+0x58>
    b8f4:	mov	r5, #3
    b8f8:	mov	r0, r5
    b8fc:	bl	5248 <close@plt>
    b900:	ldr	r0, [r7]
    b904:	add	r5, r5, #1
    b908:	cmp	r5, r0
    b90c:	blt	b8f8 <rb_fdlist_init+0x40>
    b910:	mov	r0, #1
    b914:	strb	r0, [r6]
    b918:	ldr	r2, [pc, #36]	; b944 <rb_fdlist_init+0x8c>
    b91c:	mov	r0, #68	; 0x44
    b920:	mov	r1, r4
    b924:	add	r2, pc, r2
    b928:	bl	53b0 <rb_bh_create@plt>
    b92c:	ldr	r1, [pc, #20]	; b948 <rb_fdlist_init+0x90>
    b930:	add	r1, pc, r1
    b934:	str	r0, [r1]
    b938:	pop	{r4, r5, r6, r7, fp, pc}
    b93c:	.word	0x0002f064
    b940:	.word	0x0001caa0
    b944:	.word	0x0000a1fc
    b948:	.word	0x0002f000

0000b94c <rb_dump_fd>:
    b94c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    b950:	add	fp, sp, #24
    b954:	ldr	r8, [pc, #128]	; b9dc <rb_dump_fd+0x90>
    b958:	mov	r4, r1
    b95c:	mov	r5, r0
    b960:	mov	r6, #0
    b964:	ldr	r8, [pc, r8]
    b968:	ldr	r9, [pc, #112]	; b9e0 <rb_dump_fd+0x94>
    b96c:	add	r9, pc, r9
    b970:	ldr	r0, [r8]
    b974:	add	r1, r6, r6, lsl #1
    b978:	add	r2, r0, r1, lsl #2
    b97c:	ldr	r2, [r2, #8]
    b980:	cmp	r2, #0
    b984:	beq	b9cc <rb_dump_fd+0x80>
    b988:	ldr	r7, [r0, r1, lsl #2]
    b98c:	cmp	r7, #0
    b990:	beq	b9cc <rb_dump_fd+0x80>
    b994:	ldr	r1, [r7]
    b998:	cmp	r1, #0
    b99c:	beq	b9c4 <rb_dump_fd+0x78>
    b9a0:	ldrb	r0, [r1, #16]
    b9a4:	tst	r0, #1
    b9a8:	beq	b9c4 <rb_dump_fd+0x78>
    b9ac:	ldr	r0, [r1, #12]
    b9b0:	ldr	r1, [r1, #24]
    b9b4:	mov	r2, r4
    b9b8:	cmp	r1, #0
    b9bc:	moveq	r1, r9
    b9c0:	blx	r5
    b9c4:	ldr	r7, [r7, #8]
    b9c8:	b	b98c <rb_dump_fd+0x40>
    b9cc:	add	r6, r6, #1
    b9d0:	cmp	r6, #4096	; 0x1000
    b9d4:	bne	b970 <rb_dump_fd+0x24>
    b9d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    b9dc:	.word	0x0001ca3c
    b9e0:	.word	0x0000a2ae

0000b9e4 <rb_note>:
    b9e4:	push	{r4, r5, r6, sl, fp, lr}
    b9e8:	add	fp, sp, #16
    b9ec:	cmp	r0, #0
    b9f0:	beq	ba30 <rb_note+0x4c>
    b9f4:	mov	r4, r0
    b9f8:	ldr	r0, [r0, #24]
    b9fc:	mov	r5, r1
    ba00:	cmp	r0, #0
    ba04:	beq	ba0c <rb_note+0x28>
    ba08:	bl	4ffc <free@plt>
    ba0c:	mov	r0, #128	; 0x80
    ba10:	bl	52a8 <malloc@plt>
    ba14:	cmp	r0, #0
    ba18:	beq	ba34 <rb_note+0x50>
    ba1c:	mov	r1, r5
    ba20:	mov	r2, #128	; 0x80
    ba24:	mov	r6, r0
    ba28:	bl	4fb4 <rb_strlcpy@plt>
    ba2c:	str	r6, [r4, #24]
    ba30:	pop	{r4, r5, r6, sl, fp, pc}
    ba34:	bl	5284 <rb_outofmemory@plt>

0000ba38 <rb_set_type>:
    ba38:	strb	r1, [r0, #17]
    ba3c:	bx	lr

0000ba40 <rb_get_type>:
    ba40:	ldrb	r0, [r0, #17]
    ba44:	bx	lr

0000ba48 <rb_fd_ssl>:
    ba48:	cmp	r0, #0
    ba4c:	moveq	r0, #0
    ba50:	ldrbne	r0, [r0, #17]
    ba54:	ubfxne	r0, r0, #5, #1
    ba58:	bx	lr

0000ba5c <rb_get_fde>:
    ba5c:	cmp	r0, #0
    ba60:	bmi	baa4 <rb_get_fde+0x48>
    ba64:	ldr	r2, [pc, #68]	; bab0 <rb_get_fde+0x54>
    ba68:	eor	r1, r0, r0, lsr #12
    ba6c:	bfc	r1, #12, #20
    ba70:	ldr	r2, [pc, r2]
    ba74:	eor	r1, r1, r0, lsr #24
    ba78:	add	r1, r1, r1, lsl #1
    ba7c:	ldr	r2, [r2]
    ba80:	ldr	r2, [r2, r1, lsl #2]
    ba84:	cmp	r2, #0
    ba88:	beq	baa4 <rb_get_fde+0x48>
    ba8c:	ldr	r1, [r2]
    ba90:	ldr	r3, [r1, #12]
    ba94:	cmp	r3, r0
    ba98:	beq	baa8 <rb_get_fde+0x4c>
    ba9c:	ldr	r2, [r2, #8]
    baa0:	b	ba84 <rb_get_fde+0x28>
    baa4:	mov	r1, #0
    baa8:	mov	r0, r1
    baac:	bx	lr
    bab0:	.word	0x0001c930

0000bab4 <rb_read>:
    bab4:	cmp	r0, #0
    bab8:	moveq	r0, #0
    babc:	bxeq	lr
    bac0:	ldrb	r3, [r0, #17]
    bac4:	tst	r3, #32
    bac8:	bne	badc <rb_read+0x28>
    bacc:	ldr	r0, [r0, #12]
    bad0:	tst	r3, #4
    bad4:	bne	bae0 <rb_read+0x2c>
    bad8:	b	5014 <read@plt>
    badc:	b	dd34 <rb_ssl_read>
    bae0:	mov	r3, #0
    bae4:	b	4eac <recv@plt>

0000bae8 <rb_write>:
    bae8:	cmp	r0, #0
    baec:	moveq	r0, #0
    baf0:	bxeq	lr
    baf4:	ldrb	r3, [r0, #17]
    baf8:	tst	r3, #32
    bafc:	bne	bb10 <rb_write+0x28>
    bb00:	ldr	r0, [r0, #12]
    bb04:	tst	r3, #4
    bb08:	bne	bb14 <rb_write+0x2c>
    bb0c:	b	502c <write@plt>
    bb10:	b	de90 <rb_ssl_write>
    bb14:	mov	r3, #16384	; 0x4000
    bb18:	b	5398 <send@plt>

0000bb1c <rb_writev>:
    bb1c:	push	{r4, r5, r6, r7, fp, lr}
    bb20:	add	fp, sp, #16
    bb24:	sub	sp, sp, #32
    bb28:	cmp	r0, #0
    bb2c:	beq	bb68 <rb_writev+0x4c>
    bb30:	mov	r6, r0
    bb34:	ldrb	r0, [r0, #17]
    bb38:	mov	r4, r2
    bb3c:	mov	r5, r1
    bb40:	tst	r0, #32
    bb44:	bne	bb7c <rb_writev+0x60>
    bb48:	tst	r0, #4
    bb4c:	bne	bbb0 <rb_writev+0x94>
    bb50:	ldr	r0, [r6, #12]
    bb54:	mov	r1, r5
    bb58:	mov	r2, r4
    bb5c:	sub	sp, fp, #16
    bb60:	pop	{r4, r5, r6, r7, fp, lr}
    bb64:	b	4f9c <writev@plt>
    bb68:	bl	55e4 <__errno_location@plt>
    bb6c:	mov	r1, #9
    bb70:	mvn	r7, #0
    bb74:	str	r1, [r0]
    bb78:	b	bbf0 <rb_writev+0xd4>
    bb7c:	mov	r7, #0
    bb80:	cmp	r4, #0
    bb84:	beq	bbf0 <rb_writev+0xd4>
    bb88:	ldm	r5, {r1, r2}
    bb8c:	mov	r0, r6
    bb90:	bl	4f6c <rb_write@plt>
    bb94:	cmp	r0, #0
    bb98:	ble	bbe8 <rb_writev+0xcc>
    bb9c:	subs	r4, r4, #1
    bba0:	add	r7, r0, r7
    bba4:	add	r5, r5, #8
    bba8:	bne	bb88 <rb_writev+0x6c>
    bbac:	b	bbf0 <rb_writev+0xd4>
    bbb0:	vmov.i32	q8, #0	; 0x00000000
    bbb4:	mov	r1, sp
    bbb8:	add	r0, r1, #12
    bbbc:	mov	r2, r1
    bbc0:	vst1.32	{d16-d17}, [r0]
    bbc4:	mov	r0, #8
    bbc8:	vst1.64	{d16-d17}, [r2], r0
    bbcc:	str	r5, [r2]
    bbd0:	str	r4, [sp, #12]
    bbd4:	mov	r2, #16384	; 0x4000
    bbd8:	ldr	r0, [r6, #12]
    bbdc:	bl	5008 <sendmsg@plt>
    bbe0:	mov	r7, r0
    bbe4:	b	bbf0 <rb_writev+0xd4>
    bbe8:	cmp	r7, #0
    bbec:	movle	r7, r0
    bbf0:	mov	r0, r7
    bbf4:	sub	sp, fp, #16
    bbf8:	pop	{r4, r5, r6, r7, fp, pc}

0000bbfc <rb_inet_pton_sock>:
    bbfc:	push	{r4, r5, r6, r7, fp, lr}
    bc00:	add	fp, sp, #16
    bc04:	mov	r6, r0
    bc08:	mov	r5, r1
    bc0c:	mov	r0, r1
    bc10:	mov	r1, #0
    bc14:	mov	r2, #128	; 0x80
    bc18:	mov	r4, #0
    bc1c:	bl	4f3c <memset@plt>
    bc20:	add	r1, r5, #4
    bc24:	mov	r0, r6
    bc28:	bl	c138 <inet_pton4>
    bc2c:	mov	r7, #2
    bc30:	cmp	r0, #0
    bc34:	bne	bc54 <rb_inet_pton_sock+0x58>
    bc38:	add	r2, r5, #8
    bc3c:	mov	r0, #10
    bc40:	mov	r1, r6
    bc44:	mov	r7, #10
    bc48:	bl	4f48 <rb_inet_pton@plt>
    bc4c:	cmp	r0, #0
    bc50:	beq	bc60 <rb_inet_pton_sock+0x64>
    bc54:	strh	r4, [r5, #2]
    bc58:	mov	r4, #1
    bc5c:	strh	r7, [r5]
    bc60:	mov	r0, r4
    bc64:	pop	{r4, r5, r6, r7, fp, pc}

0000bc68 <rb_inet_pton>:
    bc68:	push	{r4, r5, r6, sl, fp, lr}
    bc6c:	add	fp, sp, #16
    bc70:	sub	sp, sp, #56	; 0x38
    bc74:	mov	r4, r2
    bc78:	mov	r5, r1
    bc7c:	cmp	r0, #10
    bc80:	beq	bca8 <rb_inet_pton+0x40>
    bc84:	mov	r1, r0
    bc88:	mvn	r0, #0
    bc8c:	cmp	r1, #2
    bc90:	bne	bce0 <rb_inet_pton+0x78>
    bc94:	mov	r0, r5
    bc98:	mov	r1, r4
    bc9c:	sub	sp, fp, #16
    bca0:	pop	{r4, r5, r6, sl, fp, lr}
    bca4:	b	c138 <inet_pton4>
    bca8:	mov	r0, r5
    bcac:	mov	r1, r4
    bcb0:	bl	c138 <inet_pton4>
    bcb4:	cmp	r0, #0
    bcb8:	beq	bce8 <rb_inet_pton+0x80>
    bcbc:	ldr	r1, [pc, #56]	; bcfc <rb_inet_pton+0x94>
    bcc0:	add	r6, sp, #3
    bcc4:	mov	r2, r5
    bcc8:	mov	r0, r6
    bccc:	add	r1, pc, r1
    bcd0:	bl	55fc <sprintf@plt>
    bcd4:	mov	r0, r6
    bcd8:	mov	r1, r4
    bcdc:	bl	c218 <inet_pton6>
    bce0:	sub	sp, fp, #16
    bce4:	pop	{r4, r5, r6, sl, fp, pc}
    bce8:	mov	r0, r5
    bcec:	mov	r1, r4
    bcf0:	sub	sp, fp, #16
    bcf4:	pop	{r4, r5, r6, sl, fp, lr}
    bcf8:	b	c218 <inet_pton6>
    bcfc:	.word	0x00009e94

0000bd00 <rb_inet_ntop_sock>:
    bd00:	mov	r3, r2
    bd04:	mov	r2, r1
    bd08:	ldrh	r1, [r0]
    bd0c:	cmp	r1, #10
    bd10:	beq	bd30 <rb_inet_ntop_sock+0x30>
    bd14:	cmp	r1, #2
    bd18:	movne	r0, #0
    bd1c:	bxne	lr
    bd20:	mov	r1, r2
    bd24:	add	r0, r0, #4
    bd28:	mov	r2, r3
    bd2c:	b	c010 <inet_ntop4>
    bd30:	add	r1, r0, #8
    bd34:	mov	r0, #10
    bd38:	b	bd3c <rb_inet_ntop>

0000bd3c <rb_inet_ntop>:
    bd3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd40:	add	fp, sp, #28
    bd44:	sub	sp, sp, #92	; 0x5c
    bd48:	mov	ip, r1
    bd4c:	cmp	r0, #10
    bd50:	beq	bd7c <rb_inet_ntop+0x40>
    bd54:	mov	r1, r0
    bd58:	mov	r0, #0
    bd5c:	cmp	r1, #2
    bd60:	bne	bfc8 <rb_inet_ntop+0x28c>
    bd64:	mov	r0, ip
    bd68:	mov	r1, r2
    bd6c:	mov	r2, r3
    bd70:	sub	sp, fp, #28
    bd74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd78:	b	c010 <inet_ntop4>
    bd7c:	ldr	r0, [ip]
    bd80:	cmp	r0, #0
    bd84:	bne	bd94 <rb_inet_ntop+0x58>
    bd88:	ldr	r1, [ip, #4]
    bd8c:	cmp	r1, #0
    bd90:	beq	bfd0 <rb_inet_ntop+0x294>
    bd94:	vmov.i32	q8, #0	; 0x00000000
    bd98:	add	r5, sp, #8
    bd9c:	str	r2, [sp]
    bda0:	mov	r1, r5
    bda4:	vst1.64	{d16-d17}, [r1]!
    bda8:	vst1.64	{d16-d17}, [r1]
    bdac:	ldrb	r1, [ip, #1]
    bdb0:	bfi	r1, r0, #8, #8
    bdb4:	orr	r0, r5, #4
    bdb8:	str	r1, [sp, #8]
    bdbc:	mov	r1, #0
    bdc0:	add	r2, ip, r1
    bdc4:	ldrb	r7, [r2, #2]
    bdc8:	ldrb	r2, [r2, #3]
    bdcc:	orr	r2, r2, r7, lsl #8
    bdd0:	str	r2, [r0, r1, lsl #1]
    bdd4:	add	r2, r1, #2
    bdd8:	add	r1, r1, #4
    bddc:	cmp	r1, #16
    bde0:	mov	r1, r2
    bde4:	bcc	bdc0 <rb_inet_ntop+0x84>
    bde8:	mvn	r4, #0
    bdec:	mov	r2, #0
    bdf0:	mov	r0, #0
    bdf4:	mvn	r1, #0
    bdf8:	mov	r8, #0
    bdfc:	ldr	r7, [r5, r2, lsl #2]
    be00:	cmp	r7, #0
    be04:	beq	be44 <rb_inet_ntop+0x108>
    be08:	cmn	r4, #1
    be0c:	beq	be3c <rb_inet_ntop+0x100>
    be10:	add	r7, r1, #1
    be14:	cmp	r0, r8
    be18:	mov	r6, r5
    be1c:	mov	r5, #0
    be20:	clz	r7, r7
    be24:	movwgt	r5, #1
    be28:	lsr	r7, r7, #5
    be2c:	orrs	r7, r7, r5
    be30:	mov	r5, r6
    be34:	movne	r1, r4
    be38:	movne	r8, r0
    be3c:	mvn	r4, #0
    be40:	b	be54 <rb_inet_ntop+0x118>
    be44:	cmn	r4, #1
    be48:	add	r0, r0, #1
    be4c:	moveq	r4, r2
    be50:	movweq	r0, #1
    be54:	add	r2, r2, #1
    be58:	cmp	r2, #8
    be5c:	bne	bdfc <rb_inet_ntop+0xc0>
    be60:	cmn	r4, #1
    be64:	mov	r6, ip
    be68:	str	r3, [sp, #4]
    be6c:	beq	be98 <rb_inet_ntop+0x15c>
    be70:	add	r3, r1, #1
    be74:	cmp	r0, r8
    be78:	mov	r2, #0
    be7c:	clz	r3, r3
    be80:	movwgt	r2, #1
    be84:	lsr	r3, r3, #5
    be88:	orrs	r2, r3, r2
    be8c:	moveq	r4, r1
    be90:	movne	r8, r0
    be94:	b	be9c <rb_inet_ntop+0x160>
    be98:	mov	r4, r1
    be9c:	cmn	r4, #1
    bea0:	mov	sl, #0
    bea4:	add	r7, sp, #40	; 0x28
    bea8:	movne	r4, r4
    beac:	cmp	r8, #2
    beb0:	mvnlt	r4, #0
    beb4:	add	r9, r4, r8
    beb8:	cmp	sl, r9
    bebc:	bge	bef0 <rb_inet_ntop+0x1b4>
    bec0:	cmn	r4, #1
    bec4:	beq	bef0 <rb_inet_ntop+0x1b4>
    bec8:	cmp	sl, r4
    becc:	blt	bef0 <rb_inet_ntop+0x1b4>
    bed0:	cmp	r4, sl
    bed4:	bne	bf24 <rb_inet_ntop+0x1e8>
    bed8:	cmp	r4, #0
    bedc:	moveq	r0, #48	; 0x30
    bee0:	strbeq	r0, [r7], #1
    bee4:	mov	r0, #58	; 0x3a
    bee8:	strb	r0, [r7], #1
    beec:	b	bf24 <rb_inet_ntop+0x1e8>
    bef0:	cmp	sl, #0
    bef4:	beq	bf0c <rb_inet_ntop+0x1d0>
    bef8:	cmp	r4, #0
    befc:	mov	r0, #58	; 0x3a
    bf00:	strb	r0, [r7], #1
    bf04:	cmpeq	sl, #6
    bf08:	beq	bf34 <rb_inet_ntop+0x1f8>
    bf0c:	ldr	r2, [r5, sl, lsl #2]
    bf10:	ldr	r1, [pc, #244]	; c00c <rb_inet_ntop+0x2d0>
    bf14:	mov	r0, r7
    bf18:	add	r1, pc, r1
    bf1c:	bl	55fc <sprintf@plt>
    bf20:	add	r7, r7, r0
    bf24:	add	sl, sl, #1
    bf28:	cmp	sl, #8
    bf2c:	bne	beb8 <rb_inet_ntop+0x17c>
    bf30:	b	bf84 <rb_inet_ntop+0x248>
    bf34:	cmp	r8, #5
    bf38:	beq	bf48 <rb_inet_ntop+0x20c>
    bf3c:	cmp	r8, #6
    bf40:	bne	bf0c <rb_inet_ntop+0x1d0>
    bf44:	b	bf58 <rb_inet_ntop+0x21c>
    bf48:	ldr	r0, [sp, #28]
    bf4c:	movw	r1, #65535	; 0xffff
    bf50:	cmp	r0, r1
    bf54:	bne	bf0c <rb_inet_ntop+0x1d0>
    bf58:	add	r0, sp, #40	; 0x28
    bf5c:	mov	r1, r7
    bf60:	sub	r0, r0, r7
    bf64:	add	r2, r0, #46	; 0x2e
    bf68:	add	r0, r6, #12
    bf6c:	bl	c010 <inet_ntop4>
    bf70:	cmp	r0, #0
    bf74:	beq	c004 <rb_inet_ntop+0x2c8>
    bf78:	mov	r0, r7
    bf7c:	bl	50e0 <strlen@plt>
    bf80:	add	r7, r7, r0
    bf84:	cmn	r4, #1
    bf88:	beq	bf98 <rb_inet_ntop+0x25c>
    bf8c:	cmp	r9, #8
    bf90:	moveq	r0, #58	; 0x3a
    bf94:	strbeq	r0, [r7], #1
    bf98:	ldr	r3, [sp, #4]
    bf9c:	add	r1, sp, #40	; 0x28
    bfa0:	mov	r0, #0
    bfa4:	strb	r0, [r7], -r1
    bfa8:	add	r2, r7, #1
    bfac:	cmp	r2, r3
    bfb0:	bhi	bfc8 <rb_inet_ntop+0x28c>
    bfb4:	ldr	r4, [sp]
    bfb8:	add	r1, sp, #40	; 0x28
    bfbc:	mov	r0, r4
    bfc0:	bl	5104 <memcpy@plt>
    bfc4:	mov	r0, r4
    bfc8:	sub	sp, fp, #28
    bfcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bfd0:	ldr	r1, [ip, #8]
    bfd4:	cmn	r1, #65536	; 0x10000
    bfd8:	bne	bfe4 <rb_inet_ntop+0x2a8>
    bfdc:	add	r0, ip, #12
    bfe0:	b	bd68 <rb_inet_ntop+0x2c>
    bfe4:	ldr	r1, [ip, #8]
    bfe8:	cmp	r1, #0
    bfec:	bne	bd94 <rb_inet_ntop+0x58>
    bff0:	ldr	r1, [ip, #12]
    bff4:	rev	r1, r1
    bff8:	cmp	r1, #2
    bffc:	bcc	bd94 <rb_inet_ntop+0x58>
    c000:	b	bfdc <rb_inet_ntop+0x2a0>
    c004:	mov	r0, #0
    c008:	b	bfc8 <rb_inet_ntop+0x28c>
    c00c:	.word	0x0000a0ad

0000c010 <inet_ntop4>:
    c010:	push	{r4, r5, r6, sl, fp, lr}
    c014:	add	fp, sp, #16
    c018:	mov	r6, r1
    c01c:	mov	r1, #0
    c020:	cmp	r2, #16
    c024:	bcc	c120 <inet_ntop4+0x110>
    c028:	ldrb	r1, [r0]
    c02c:	ldr	ip, [pc, #244]	; c128 <inet_ntop4+0x118>
    c030:	add	ip, pc, ip
    c034:	ldr	r1, [ip, r1, lsl #2]
    c038:	ldrb	r2, [r1]
    c03c:	cmp	r2, #0
    c040:	beq	c064 <inet_ntop4+0x54>
    c044:	add	r3, r1, #1
    c048:	ldr	r1, [pc, #224]	; c130 <inet_ntop4+0x120>
    c04c:	add	r1, pc, r1
    c050:	strb	r2, [r1], #1
    c054:	ldrb	r2, [r3], #1
    c058:	cmp	r2, #0
    c05c:	bne	c050 <inet_ntop4+0x40>
    c060:	b	c06c <inet_ntop4+0x5c>
    c064:	ldr	r1, [pc, #192]	; c12c <inet_ntop4+0x11c>
    c068:	add	r1, pc, r1
    c06c:	mov	r3, #46	; 0x2e
    c070:	mov	r2, r1
    c074:	strb	r3, [r2], #1
    c078:	ldrb	r5, [r0, #1]
    c07c:	ldr	r5, [ip, r5, lsl #2]
    c080:	ldrb	r4, [r5]
    c084:	cmp	r4, #0
    c088:	beq	c0a4 <inet_ntop4+0x94>
    c08c:	add	r1, r5, #1
    c090:	strb	r4, [r2], #1
    c094:	ldrb	r4, [r1], #1
    c098:	cmp	r4, #0
    c09c:	bne	c090 <inet_ntop4+0x80>
    c0a0:	sub	r1, r2, #1
    c0a4:	strb	r3, [r2]
    c0a8:	ldrb	r2, [r0, #2]
    c0ac:	ldr	r4, [ip, r2, lsl #2]
    c0b0:	add	r2, r1, #2
    c0b4:	ldrb	r3, [r4]
    c0b8:	cmp	r3, #0
    c0bc:	beq	c0d4 <inet_ntop4+0xc4>
    c0c0:	add	r1, r4, #1
    c0c4:	strb	r3, [r2], #1
    c0c8:	ldrb	r3, [r1], #1
    c0cc:	cmp	r3, #0
    c0d0:	bne	c0c4 <inet_ntop4+0xb4>
    c0d4:	mov	r1, #46	; 0x2e
    c0d8:	strb	r1, [r2], #1
    c0dc:	ldrb	r0, [r0, #3]
    c0e0:	ldr	r1, [ip, r0, lsl #2]
    c0e4:	ldrb	r0, [r1]
    c0e8:	cmp	r0, #0
    c0ec:	beq	c104 <inet_ntop4+0xf4>
    c0f0:	add	r1, r1, #1
    c0f4:	strb	r0, [r2], #1
    c0f8:	ldrb	r0, [r1], #1
    c0fc:	cmp	r0, #0
    c100:	bne	c0f4 <inet_ntop4+0xe4>
    c104:	mov	r0, #0
    c108:	strb	r0, [r2]
    c10c:	mov	r0, r6
    c110:	ldr	r1, [pc, #28]	; c134 <inet_ntop4+0x124>
    c114:	add	r1, pc, r1
    c118:	bl	5194 <strcpy@plt>
    c11c:	mov	r1, r6
    c120:	mov	r0, r1
    c124:	pop	{r4, r5, r6, sl, fp, pc}
    c128:	.word	0x0001ba20
    c12c:	.word	0x0002e910
    c130:	.word	0x0002e92c
    c134:	.word	0x0002e864

0000c138 <inet_pton4>:
    c138:	push	{r4, r5, fp, lr}
    c13c:	add	fp, sp, #8
    c140:	sub	sp, sp, #4
    c144:	mov	r2, r0
    c148:	mov	r0, #0
    c14c:	strb	r0, [sp]
    c150:	ldrb	r5, [r2]
    c154:	cmp	r5, #0
    c158:	beq	c210 <inet_pton4+0xd8>
    c15c:	add	r2, r2, #1
    c160:	mov	r3, #0
    c164:	mov	lr, sp
    c168:	mov	ip, #0
    c16c:	mov	r4, #0
    c170:	sub	r0, r5, #48	; 0x30
    c174:	uxtb	r0, r0
    c178:	cmp	r0, #9
    c17c:	bhi	c1c4 <inet_pton4+0x8c>
    c180:	uxtb	r0, r3
    c184:	lsl	r0, r0, #2
    c188:	uxtab	r0, r0, r3
    c18c:	lsl	r0, r0, #1
    c190:	uxtab	r0, r0, r5
    c194:	sub	r3, r0, #48	; 0x30
    c198:	mov	r0, #0
    c19c:	cmp	r3, #255	; 0xff
    c1a0:	bhi	c210 <inet_pton4+0xd8>
    c1a4:	cmp	r4, #0
    c1a8:	strb	r3, [lr]
    c1ac:	bne	c1ec <inet_pton4+0xb4>
    c1b0:	cmp	ip, #3
    c1b4:	bgt	c210 <inet_pton4+0xd8>
    c1b8:	add	ip, ip, #1
    c1bc:	mov	r4, #1
    c1c0:	b	c1ec <inet_pton4+0xb4>
    c1c4:	cmp	ip, #4
    c1c8:	mov	r0, #0
    c1cc:	cmpne	r4, #0
    c1d0:	beq	c210 <inet_pton4+0xd8>
    c1d4:	uxtb	r3, r5
    c1d8:	cmp	r3, #46	; 0x2e
    c1dc:	bne	c210 <inet_pton4+0xd8>
    c1e0:	mov	r3, #0
    c1e4:	mov	r4, #0
    c1e8:	strb	r3, [lr, #1]!
    c1ec:	ldrb	r5, [r2], #1
    c1f0:	cmp	r5, #0
    c1f4:	bne	c170 <inet_pton4+0x38>
    c1f8:	mov	r0, #0
    c1fc:	cmp	ip, #4
    c200:	blt	c210 <inet_pton4+0xd8>
    c204:	ldr	r0, [sp]
    c208:	str	r0, [r1]
    c20c:	mov	r0, #1
    c210:	sub	sp, fp, #8
    c214:	pop	{r4, r5, fp, pc}

0000c218 <inet_pton6>:
    c218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c21c:	add	fp, sp, #28
    c220:	sub	sp, sp, #44	; 0x2c
    c224:	vmov.i32	q8, #0	; 0x00000000
    c228:	add	r2, sp, #24
    c22c:	mov	r8, r0
    c230:	str	r1, [sp, #4]
    c234:	mov	r0, r2
    c238:	str	r2, [sp, #20]
    c23c:	vst1.64	{d16-d17}, [r0]!
    c240:	ldrb	r4, [r8]
    c244:	str	r0, [sp, #16]
    c248:	cmp	r4, #58	; 0x3a
    c24c:	bne	c260 <inet_pton6+0x48>
    c250:	ldrb	r0, [r8, #1]!
    c254:	mov	r7, #0
    c258:	cmp	r0, #58	; 0x3a
    c25c:	bne	c450 <inet_pton6+0x238>
    c260:	bl	5128 <__ctype_tolower_loc@plt>
    c264:	ldr	sl, [r0]
    c268:	str	r0, [sp, #8]
    c26c:	ldr	r7, [sl, r4, lsl #2]
    c270:	cmp	r7, #0
    c274:	beq	c3f8 <inet_pton6+0x1e0>
    c278:	mov	r0, #0
    c27c:	add	r6, r8, #1
    c280:	mov	r9, #0
    c284:	mov	r5, #0
    c288:	str	r0, [sp, #12]
    c28c:	ldr	r4, [pc, #456]	; c45c <inet_pton6+0x244>
    c290:	add	r4, pc, r4
    c294:	mov	r0, r4
    c298:	mov	r1, r7
    c29c:	mov	r2, #17
    c2a0:	bl	55c0 <memchr@plt>
    c2a4:	cmp	r0, #0
    c2a8:	beq	c2d8 <inet_pton6+0xc0>
    c2ac:	sub	r0, r0, r4
    c2b0:	mov	r7, #0
    c2b4:	mov	r5, #1
    c2b8:	orr	r9, r0, r9, lsl #4
    c2bc:	cmp	r7, r9, lsr #16
    c2c0:	bne	c450 <inet_pton6+0x238>
    c2c4:	ldrb	r0, [r6], #1
    c2c8:	ldr	r7, [sl, r0, lsl #2]
    c2cc:	cmp	r7, #0
    c2d0:	bne	c294 <inet_pton6+0x7c>
    c2d4:	b	c370 <inet_pton6+0x158>
    c2d8:	cmp	r7, #58	; 0x3a
    c2dc:	bne	c334 <inet_pton6+0x11c>
    c2e0:	cmp	r5, #0
    c2e4:	beq	c34c <inet_pton6+0x134>
    c2e8:	ldr	r0, [sp, #20]
    c2ec:	ldr	r1, [sp, #16]
    c2f0:	mov	r7, #0
    c2f4:	add	r0, r0, #2
    c2f8:	cmp	r0, r1
    c2fc:	bhi	c450 <inet_pton6+0x238>
    c300:	ldrb	r1, [r6]
    c304:	cmp	r1, #0
    c308:	beq	c450 <inet_pton6+0x238>
    c30c:	ldr	r2, [sp, #20]
    c310:	rev16	r1, r9
    c314:	mov	r5, #0
    c318:	mov	r8, r6
    c31c:	mov	r9, #0
    c320:	str	r0, [sp, #20]
    c324:	strh	r1, [r2]
    c328:	ldr	r1, [sp, #8]
    c32c:	ldr	sl, [r1]
    c330:	b	c2c4 <inet_pton6+0xac>
    c334:	cmp	r7, #46	; 0x2e
    c338:	bne	c2c4 <inet_pton6+0xac>
    c33c:	ldrb	r0, [r6]
    c340:	cmp	r0, #0
    c344:	beq	c2c4 <inet_pton6+0xac>
    c348:	b	c428 <inet_pton6+0x210>
    c34c:	ldr	r0, [sp, #12]
    c350:	mov	r5, #0
    c354:	mov	r8, r6
    c358:	mov	r7, #0
    c35c:	cmp	r0, #0
    c360:	ldr	r0, [sp, #20]
    c364:	str	r0, [sp, #12]
    c368:	beq	c2c4 <inet_pton6+0xac>
    c36c:	b	c450 <inet_pton6+0x238>
    c370:	cmp	r5, #0
    c374:	beq	c3a0 <inet_pton6+0x188>
    c378:	ldr	r0, [sp, #20]
    c37c:	mov	r7, #0
    c380:	add	r4, r0, #2
    c384:	ldr	r0, [sp, #16]
    c388:	cmp	r4, r0
    c38c:	bhi	c450 <inet_pton6+0x238>
    c390:	ldr	r1, [sp, #20]
    c394:	rev16	r0, r9
    c398:	strh	r0, [r1]
    c39c:	b	c3a4 <inet_pton6+0x18c>
    c3a0:	ldr	r4, [sp, #20]
    c3a4:	ldr	r0, [sp, #12]
    c3a8:	cmp	r0, #0
    c3ac:	beq	c400 <inet_pton6+0x1e8>
    c3b0:	ldr	r0, [sp, #16]
    c3b4:	cmp	r4, r0
    c3b8:	beq	c3f8 <inet_pton6+0x1e0>
    c3bc:	ldr	r0, [sp, #12]
    c3c0:	sub	r0, r4, r0
    c3c4:	cmp	r0, #1
    c3c8:	blt	c410 <inet_pton6+0x1f8>
    c3cc:	ldr	r1, [sp, #12]
    c3d0:	add	r2, sp, #24
    c3d4:	mov	r3, #0
    c3d8:	add	r2, r2, #15
    c3dc:	sub	r1, r1, #1
    c3e0:	ldrb	r7, [r1, r0]
    c3e4:	strb	r7, [r2], #-1
    c3e8:	strb	r3, [r1, r0]
    c3ec:	subs	r0, r0, #1
    c3f0:	bne	c3e0 <inet_pton6+0x1c8>
    c3f4:	b	c410 <inet_pton6+0x1f8>
    c3f8:	mov	r7, #0
    c3fc:	b	c450 <inet_pton6+0x238>
    c400:	ldr	r0, [sp, #16]
    c404:	mov	r7, #0
    c408:	cmp	r4, r0
    c40c:	bne	c450 <inet_pton6+0x238>
    c410:	add	r0, sp, #24
    c414:	mov	r7, #1
    c418:	vld1.64	{d16-d17}, [r0]
    c41c:	ldr	r0, [sp, #4]
    c420:	vst1.8	{d16-d17}, [r0]
    c424:	b	c450 <inet_pton6+0x238>
    c428:	ldr	r1, [sp, #20]
    c42c:	ldr	r0, [sp, #16]
    c430:	mov	r7, #0
    c434:	add	r4, r1, #4
    c438:	cmp	r4, r0
    c43c:	bhi	c450 <inet_pton6+0x238>
    c440:	mov	r0, r8
    c444:	bl	c138 <inet_pton4>
    c448:	cmp	r0, #0
    c44c:	bgt	c3a4 <inet_pton6+0x18c>
    c450:	mov	r0, r7
    c454:	sub	sp, fp, #28
    c458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c45c:	.word	0x00009d3d

0000c460 <rb_get_iotype>:
    c460:	ldr	r0, [pc, #4]	; c46c <rb_get_iotype+0xc>
    c464:	add	r0, pc, r0
    c468:	bx	lr
    c46c:	.word	0x0002e4d0

0000c470 <rb_io_sched_event>:
    c470:	push	{r4, r5, fp, lr}
    c474:	add	fp, sp, #8
    c478:	cmp	r0, #0
    c47c:	beq	c4a4 <rb_io_sched_event+0x34>
    c480:	mov	r5, r0
    c484:	ldr	r0, [pc, #68]	; c4d0 <rb_io_sched_event+0x60>
    c488:	ldr	r0, [pc, r0]
    c48c:	cmp	r0, #0
    c490:	movne	r4, r1
    c494:	ldrne	r1, [pc, #56]	; c4d4 <rb_io_sched_event+0x64>
    c498:	ldrne	r1, [pc, r1]
    c49c:	cmpne	r1, #0
    c4a0:	bne	c4ac <rb_io_sched_event+0x3c>
    c4a4:	mov	r0, #0
    c4a8:	pop	{r4, r5, fp, pc}
    c4ac:	blx	r0
    c4b0:	cmp	r0, #0
    c4b4:	beq	c4a4 <rb_io_sched_event+0x34>
    c4b8:	ldr	r2, [pc, #24]	; c4d8 <rb_io_sched_event+0x68>
    c4bc:	mov	r0, r5
    c4c0:	mov	r1, r4
    c4c4:	ldr	r2, [pc, r2]
    c4c8:	pop	{r4, r5, fp, lr}
    c4cc:	bx	r2
    c4d0:	.word	0x0002e4c8
    c4d4:	.word	0x0002e4bc
    c4d8:	.word	0x0002e490

0000c4dc <rb_io_unsched_event>:
    c4dc:	push	{r4, sl, fp, lr}
    c4e0:	add	fp, sp, #8
    c4e4:	cmp	r0, #0
    c4e8:	beq	c50c <rb_io_unsched_event+0x30>
    c4ec:	mov	r4, r0
    c4f0:	ldr	r0, [pc, #56]	; c530 <rb_io_unsched_event+0x54>
    c4f4:	ldr	r0, [pc, r0]
    c4f8:	cmp	r0, #0
    c4fc:	ldrne	r1, [pc, #48]	; c534 <rb_io_unsched_event+0x58>
    c500:	ldrne	r1, [pc, r1]
    c504:	cmpne	r1, #0
    c508:	bne	c510 <rb_io_unsched_event+0x34>
    c50c:	pop	{r4, sl, fp, pc}
    c510:	blx	r0
    c514:	cmp	r0, #0
    c518:	popeq	{r4, sl, fp, pc}
    c51c:	ldr	r1, [pc, #20]	; c538 <rb_io_unsched_event+0x5c>
    c520:	mov	r0, r4
    c524:	ldr	r1, [pc, r1]
    c528:	pop	{r4, sl, fp, lr}
    c52c:	bx	r1
    c530:	.word	0x0002e45c
    c534:	.word	0x0002e458
    c538:	.word	0x0002e434

0000c53c <rb_io_supports_event>:
    c53c:	ldr	r0, [pc, #16]	; c554 <rb_io_supports_event+0x18>
    c540:	ldr	r0, [pc, r0]
    c544:	cmp	r0, #0
    c548:	moveq	r0, #0
    c54c:	bxeq	lr
    c550:	bx	r0
    c554:	.word	0x0002e410

0000c558 <rb_io_init_event>:
    c558:	push	{fp, lr}
    c55c:	mov	fp, sp
    c560:	ldr	r0, [pc, #12]	; c574 <rb_io_init_event+0x1c>
    c564:	ldr	r0, [pc, r0]
    c568:	blx	r0
    c56c:	pop	{fp, lr}
    c570:	b	eaac <rb_event_io_register_all>
    c574:	.word	0x0002e3f8

0000c578 <rb_init_netio>:
    c578:	push	{r4, sl, fp, lr}
    c57c:	add	fp, sp, #8
    c580:	ldr	r0, [pc, #436]	; c73c <rb_init_netio+0x1c4>
    c584:	add	r0, pc, r0
    c588:	bl	4eb8 <getenv@plt>
    c58c:	mov	r4, r0
    c590:	mov	r0, #1
    c594:	mov	r1, #49152	; 0xc000
    c598:	bl	4f00 <calloc@plt>
    c59c:	cmp	r0, #0
    c5a0:	beq	c728 <rb_init_netio+0x1b0>
    c5a4:	ldr	r1, [pc, #404]	; c740 <rb_init_netio+0x1c8>
    c5a8:	ldr	r1, [pc, r1]
    c5ac:	str	r0, [r1]
    c5b0:	bl	d3f4 <rb_init_ssl>
    c5b4:	cmp	r4, #0
    c5b8:	beq	c6c4 <rb_init_netio+0x14c>
    c5bc:	ldr	r0, [pc, #384]	; c744 <rb_init_netio+0x1cc>
    c5c0:	mov	r1, r4
    c5c4:	add	r0, pc, r0
    c5c8:	bl	55d8 <strcmp@plt>
    c5cc:	cmp	r0, #0
    c5d0:	beq	c66c <rb_init_netio+0xf4>
    c5d4:	ldr	r0, [pc, #364]	; c748 <rb_init_netio+0x1d0>
    c5d8:	mov	r1, r4
    c5dc:	add	r0, pc, r0
    c5e0:	bl	55d8 <strcmp@plt>
    c5e4:	cmp	r0, #0
    c5e8:	beq	c674 <rb_init_netio+0xfc>
    c5ec:	ldr	r0, [pc, #344]	; c74c <rb_init_netio+0x1d4>
    c5f0:	mov	r1, r4
    c5f4:	add	r0, pc, r0
    c5f8:	bl	55d8 <strcmp@plt>
    c5fc:	cmp	r0, #0
    c600:	beq	c67c <rb_init_netio+0x104>
    c604:	ldr	r0, [pc, #324]	; c750 <rb_init_netio+0x1d8>
    c608:	mov	r1, r4
    c60c:	add	r0, pc, r0
    c610:	bl	55d8 <strcmp@plt>
    c614:	cmp	r0, #0
    c618:	beq	c684 <rb_init_netio+0x10c>
    c61c:	ldr	r0, [pc, #304]	; c754 <rb_init_netio+0x1dc>
    c620:	mov	r1, r4
    c624:	add	r0, pc, r0
    c628:	bl	55d8 <strcmp@plt>
    c62c:	cmp	r0, #0
    c630:	beq	c68c <rb_init_netio+0x114>
    c634:	ldr	r0, [pc, #284]	; c758 <rb_init_netio+0x1e0>
    c638:	mov	r1, r4
    c63c:	add	r0, pc, r0
    c640:	bl	55d8 <strcmp@plt>
    c644:	cmp	r0, #0
    c648:	beq	c694 <rb_init_netio+0x11c>
    c64c:	ldr	r0, [pc, #264]	; c75c <rb_init_netio+0x1e4>
    c650:	mov	r1, r4
    c654:	add	r0, pc, r0
    c658:	bl	55d8 <strcmp@plt>
    c65c:	cmp	r0, #0
    c660:	bne	c6a0 <rb_init_netio+0x128>
    c664:	bl	cd50 <try_select>
    c668:	b	c698 <rb_init_netio+0x120>
    c66c:	bl	c768 <try_epoll>
    c670:	b	c698 <rb_init_netio+0x120>
    c674:	bl	c870 <try_kqueue>
    c678:	b	c698 <rb_init_netio+0x120>
    c67c:	bl	c978 <try_ports>
    c680:	b	c698 <rb_init_netio+0x120>
    c684:	bl	ca80 <try_poll>
    c688:	b	c698 <rb_init_netio+0x120>
    c68c:	bl	cb64 <try_devpoll>
    c690:	b	c698 <rb_init_netio+0x120>
    c694:	bl	cc48 <try_sigio>
    c698:	cmp	r0, #0
    c69c:	beq	c724 <rb_init_netio+0x1ac>
    c6a0:	ldr	r0, [pc, #184]	; c760 <rb_init_netio+0x1e8>
    c6a4:	mov	r1, r4
    c6a8:	add	r0, pc, r0
    c6ac:	bl	55d8 <strcmp@plt>
    c6b0:	cmp	r0, #0
    c6b4:	bne	c6c4 <rb_init_netio+0x14c>
    c6b8:	bl	ce34 <try_win32>
    c6bc:	cmp	r0, #0
    c6c0:	beq	c724 <rb_init_netio+0x1ac>
    c6c4:	bl	c870 <try_kqueue>
    c6c8:	cmp	r0, #0
    c6cc:	beq	c724 <rb_init_netio+0x1ac>
    c6d0:	bl	c768 <try_epoll>
    c6d4:	cmp	r0, #0
    c6d8:	beq	c724 <rb_init_netio+0x1ac>
    c6dc:	bl	c978 <try_ports>
    c6e0:	cmp	r0, #0
    c6e4:	beq	c724 <rb_init_netio+0x1ac>
    c6e8:	bl	cb64 <try_devpoll>
    c6ec:	cmp	r0, #0
    c6f0:	beq	c724 <rb_init_netio+0x1ac>
    c6f4:	bl	cc48 <try_sigio>
    c6f8:	cmp	r0, #0
    c6fc:	beq	c724 <rb_init_netio+0x1ac>
    c700:	bl	ca80 <try_poll>
    c704:	cmp	r0, #0
    c708:	beq	c724 <rb_init_netio+0x1ac>
    c70c:	bl	ce34 <try_win32>
    c710:	cmp	r0, #0
    c714:	popeq	{r4, sl, fp, pc}
    c718:	bl	cd50 <try_select>
    c71c:	cmp	r0, #0
    c720:	bne	c72c <rb_init_netio+0x1b4>
    c724:	pop	{r4, sl, fp, pc}
    c728:	bl	5284 <rb_outofmemory@plt>
    c72c:	ldr	r0, [pc, #48]	; c764 <rb_init_netio+0x1ec>
    c730:	add	r0, pc, r0
    c734:	bl	5224 <rb_lib_log@plt>
    c738:	bl	4cfc <abort@plt>
    c73c:	.word	0x000095e6
    c740:	.word	0x0001bdf8
    c744:	.word	0x000095b7
    c748:	.word	0x000095a5
    c74c:	.word	0x00009594
    c750:	.word	0x00009570
    c754:	.word	0x0000956a
    c758:	.word	0x0000955a
    c75c:	.word	0x00009548
    c760:	.word	0x000094fb
    c764:	.word	0x00009479

0000c768 <try_epoll>:
    c768:	push	{fp, lr}
    c76c:	mov	fp, sp
    c770:	bl	10ba0 <rb_init_netio_epoll>
    c774:	mov	r1, r0
    c778:	mvn	r0, #0
    c77c:	cmp	r1, #0
    c780:	popne	{fp, pc}
    c784:	ldr	r0, [pc, #164]	; c830 <try_epoll+0xc8>
    c788:	mov	r2, #25
    c78c:	ldr	r0, [pc, r0]
    c790:	ldr	r1, [pc, #156]	; c834 <try_epoll+0xcc>
    c794:	add	r1, pc, r1
    c798:	str	r0, [r1]
    c79c:	ldr	r0, [pc, #148]	; c838 <try_epoll+0xd0>
    c7a0:	ldr	r0, [pc, r0]
    c7a4:	ldr	r1, [pc, #144]	; c83c <try_epoll+0xd4>
    c7a8:	add	r1, pc, r1
    c7ac:	str	r0, [r1]
    c7b0:	ldr	r0, [pc, #136]	; c840 <try_epoll+0xd8>
    c7b4:	ldr	r0, [pc, r0]
    c7b8:	ldr	r1, [pc, #132]	; c844 <try_epoll+0xdc>
    c7bc:	add	r1, pc, r1
    c7c0:	str	r0, [r1]
    c7c4:	ldr	r0, [pc, #124]	; c848 <try_epoll+0xe0>
    c7c8:	ldr	r0, [pc, r0]
    c7cc:	ldr	r1, [pc, #120]	; c84c <try_epoll+0xe4>
    c7d0:	add	r1, pc, r1
    c7d4:	str	r0, [r1]
    c7d8:	ldr	r0, [pc, #112]	; c850 <try_epoll+0xe8>
    c7dc:	ldr	r0, [pc, r0]
    c7e0:	ldr	r1, [pc, #108]	; c854 <try_epoll+0xec>
    c7e4:	add	r1, pc, r1
    c7e8:	str	r0, [r1]
    c7ec:	ldr	r0, [pc, #100]	; c858 <try_epoll+0xf0>
    c7f0:	ldr	r0, [pc, r0]
    c7f4:	ldr	r1, [pc, #96]	; c85c <try_epoll+0xf4>
    c7f8:	add	r1, pc, r1
    c7fc:	str	r0, [r1]
    c800:	ldr	r0, [pc, #88]	; c860 <try_epoll+0xf8>
    c804:	ldr	r0, [pc, r0]
    c808:	ldr	r1, [pc, #84]	; c864 <try_epoll+0xfc>
    c80c:	add	r1, pc, r1
    c810:	str	r0, [r1]
    c814:	ldr	r0, [pc, #76]	; c868 <try_epoll+0x100>
    c818:	ldr	r1, [pc, #76]	; c86c <try_epoll+0x104>
    c81c:	add	r0, pc, r0
    c820:	add	r1, pc, r1
    c824:	bl	4fb4 <rb_strlcpy@plt>
    c828:	mov	r0, #0
    c82c:	pop	{fp, pc}
    c830:	.word	0x0001bc1c
    c834:	.word	0x0002e1d0
    c838:	.word	0x0001bba8
    c83c:	.word	0x0002e1b8
    c840:	.word	0x0001bc30
    c844:	.word	0x0002e1ac
    c848:	.word	0x0001bb9c
    c84c:	.word	0x0002e184
    c850:	.word	0x0001bbc8
    c854:	.word	0x0002e174
    c858:	.word	0x0001bb48
    c85c:	.word	0x0002e158
    c860:	.word	0x0001bbf4
    c864:	.word	0x0002e150
    c868:	.word	0x0002e118
    c86c:	.word	0x0000935b

0000c870 <try_kqueue>:
    c870:	push	{fp, lr}
    c874:	mov	fp, sp
    c878:	bl	127ac <rb_init_netio_kqueue>
    c87c:	mov	r1, r0
    c880:	mvn	r0, #0
    c884:	cmp	r1, #0
    c888:	popne	{fp, pc}
    c88c:	ldr	r0, [pc, #164]	; c938 <try_kqueue+0xc8>
    c890:	mov	r2, #25
    c894:	ldr	r0, [pc, r0]
    c898:	ldr	r1, [pc, #156]	; c93c <try_kqueue+0xcc>
    c89c:	add	r1, pc, r1
    c8a0:	str	r0, [r1]
    c8a4:	ldr	r0, [pc, #148]	; c940 <try_kqueue+0xd0>
    c8a8:	ldr	r0, [pc, r0]
    c8ac:	ldr	r1, [pc, #144]	; c944 <try_kqueue+0xd4>
    c8b0:	add	r1, pc, r1
    c8b4:	str	r0, [r1]
    c8b8:	ldr	r0, [pc, #136]	; c948 <try_kqueue+0xd8>
    c8bc:	ldr	r0, [pc, r0]
    c8c0:	ldr	r1, [pc, #132]	; c94c <try_kqueue+0xdc>
    c8c4:	add	r1, pc, r1
    c8c8:	str	r0, [r1]
    c8cc:	ldr	r0, [pc, #124]	; c950 <try_kqueue+0xe0>
    c8d0:	ldr	r0, [pc, r0]
    c8d4:	ldr	r1, [pc, #120]	; c954 <try_kqueue+0xe4>
    c8d8:	add	r1, pc, r1
    c8dc:	str	r0, [r1]
    c8e0:	ldr	r0, [pc, #112]	; c958 <try_kqueue+0xe8>
    c8e4:	ldr	r0, [pc, r0]
    c8e8:	ldr	r1, [pc, #108]	; c95c <try_kqueue+0xec>
    c8ec:	add	r1, pc, r1
    c8f0:	str	r0, [r1]
    c8f4:	ldr	r0, [pc, #100]	; c960 <try_kqueue+0xf0>
    c8f8:	ldr	r0, [pc, r0]
    c8fc:	ldr	r1, [pc, #96]	; c964 <try_kqueue+0xf4>
    c900:	add	r1, pc, r1
    c904:	str	r0, [r1]
    c908:	ldr	r0, [pc, #88]	; c968 <try_kqueue+0xf8>
    c90c:	ldr	r0, [pc, r0]
    c910:	ldr	r1, [pc, #84]	; c96c <try_kqueue+0xfc>
    c914:	add	r1, pc, r1
    c918:	str	r0, [r1]
    c91c:	ldr	r0, [pc, #76]	; c970 <try_kqueue+0x100>
    c920:	ldr	r1, [pc, #76]	; c974 <try_kqueue+0x104>
    c924:	add	r0, pc, r0
    c928:	add	r1, pc, r1
    c92c:	bl	4fb4 <rb_strlcpy@plt>
    c930:	mov	r0, #0
    c934:	pop	{fp, pc}
    c938:	.word	0x0001bac4
    c93c:	.word	0x0002e0c8
    c940:	.word	0x0001baf4
    c944:	.word	0x0002e0b0
    c948:	.word	0x0001babc
    c94c:	.word	0x0002e0a4
    c950:	.word	0x0001baa0
    c954:	.word	0x0002e07c
    c958:	.word	0x0001bad0
    c95c:	.word	0x0002e06c
    c960:	.word	0x0001ba7c
    c964:	.word	0x0002e05c
    c968:	.word	0x0001bab8
    c96c:	.word	0x0002e03c
    c970:	.word	0x0002e010
    c974:	.word	0x00009259

0000c978 <try_ports>:
    c978:	push	{fp, lr}
    c97c:	mov	fp, sp
    c980:	bl	11a08 <rb_init_netio_ports>
    c984:	mov	r1, r0
    c988:	mvn	r0, #0
    c98c:	cmp	r1, #0
    c990:	popne	{fp, pc}
    c994:	ldr	r0, [pc, #164]	; ca40 <try_ports+0xc8>
    c998:	mov	r2, #25
    c99c:	ldr	r0, [pc, r0]
    c9a0:	ldr	r1, [pc, #156]	; ca44 <try_ports+0xcc>
    c9a4:	add	r1, pc, r1
    c9a8:	str	r0, [r1]
    c9ac:	ldr	r0, [pc, #148]	; ca48 <try_ports+0xd0>
    c9b0:	ldr	r0, [pc, r0]
    c9b4:	ldr	r1, [pc, #144]	; ca4c <try_ports+0xd4>
    c9b8:	add	r1, pc, r1
    c9bc:	str	r0, [r1]
    c9c0:	ldr	r0, [pc, #136]	; ca50 <try_ports+0xd8>
    c9c4:	ldr	r0, [pc, r0]
    c9c8:	ldr	r1, [pc, #132]	; ca54 <try_ports+0xdc>
    c9cc:	add	r1, pc, r1
    c9d0:	str	r0, [r1]
    c9d4:	ldr	r0, [pc, #124]	; ca58 <try_ports+0xe0>
    c9d8:	ldr	r0, [pc, r0]
    c9dc:	ldr	r1, [pc, #120]	; ca5c <try_ports+0xe4>
    c9e0:	add	r1, pc, r1
    c9e4:	str	r0, [r1]
    c9e8:	ldr	r0, [pc, #112]	; ca60 <try_ports+0xe8>
    c9ec:	ldr	r0, [pc, r0]
    c9f0:	ldr	r1, [pc, #108]	; ca64 <try_ports+0xec>
    c9f4:	add	r1, pc, r1
    c9f8:	str	r0, [r1]
    c9fc:	ldr	r0, [pc, #100]	; ca68 <try_ports+0xf0>
    ca00:	ldr	r0, [pc, r0]
    ca04:	ldr	r1, [pc, #96]	; ca6c <try_ports+0xf4>
    ca08:	add	r1, pc, r1
    ca0c:	str	r0, [r1]
    ca10:	ldr	r0, [pc, #88]	; ca70 <try_ports+0xf8>
    ca14:	ldr	r0, [pc, r0]
    ca18:	ldr	r1, [pc, #84]	; ca74 <try_ports+0xfc>
    ca1c:	add	r1, pc, r1
    ca20:	str	r0, [r1]
    ca24:	ldr	r0, [pc, #76]	; ca78 <try_ports+0x100>
    ca28:	ldr	r1, [pc, #76]	; ca7c <try_ports+0x104>
    ca2c:	add	r0, pc, r0
    ca30:	add	r1, pc, r1
    ca34:	bl	4fb4 <rb_strlcpy@plt>
    ca38:	mov	r0, #0
    ca3c:	pop	{fp, pc}
    ca40:	.word	0x0001b9cc
    ca44:	.word	0x0002dfc0
    ca48:	.word	0x0001ba18
    ca4c:	.word	0x0002dfa8
    ca50:	.word	0x0001ba2c
    ca54:	.word	0x0002df9c
    ca58:	.word	0x0001b95c
    ca5c:	.word	0x0002df74
    ca60:	.word	0x0001ba00
    ca64:	.word	0x0002df64
    ca68:	.word	0x0001b944
    ca6c:	.word	0x0002df54
    ca70:	.word	0x0001b9ac
    ca74:	.word	0x0002df34
    ca78:	.word	0x0002df08
    ca7c:	.word	0x00009158

0000ca80 <try_poll>:
    ca80:	push	{r4, sl, fp, lr}
    ca84:	add	fp, sp, #8
    ca88:	bl	115b4 <rb_init_netio_poll>
    ca8c:	mvn	r4, #0
    ca90:	cmp	r0, #0
    ca94:	bne	cb28 <try_poll+0xa8>
    ca98:	ldr	r0, [pc, #144]	; cb30 <try_poll+0xb0>
    ca9c:	mov	r4, #0
    caa0:	mov	r2, #25
    caa4:	add	r0, pc, r0
    caa8:	str	r4, [r0]
    caac:	ldr	r0, [pc, #128]	; cb34 <try_poll+0xb4>
    cab0:	add	r0, pc, r0
    cab4:	str	r4, [r0]
    cab8:	ldr	r0, [pc, #120]	; cb38 <try_poll+0xb8>
    cabc:	add	r0, pc, r0
    cac0:	str	r4, [r0]
    cac4:	ldr	r0, [pc, #112]	; cb3c <try_poll+0xbc>
    cac8:	ldr	r1, [pc, #112]	; cb40 <try_poll+0xc0>
    cacc:	add	r0, pc, r0
    cad0:	add	r1, pc, r1
    cad4:	str	r1, [r0]
    cad8:	ldr	r0, [pc, #100]	; cb44 <try_poll+0xc4>
    cadc:	ldr	r0, [pc, r0]
    cae0:	ldr	r1, [pc, #96]	; cb48 <try_poll+0xc8>
    cae4:	add	r1, pc, r1
    cae8:	str	r0, [r1]
    caec:	ldr	r0, [pc, #88]	; cb4c <try_poll+0xcc>
    caf0:	ldr	r0, [pc, r0]
    caf4:	ldr	r1, [pc, #84]	; cb50 <try_poll+0xd0>
    caf8:	add	r1, pc, r1
    cafc:	str	r0, [r1]
    cb00:	ldr	r0, [pc, #76]	; cb54 <try_poll+0xd4>
    cb04:	ldr	r0, [pc, r0]
    cb08:	ldr	r1, [pc, #72]	; cb58 <try_poll+0xd8>
    cb0c:	add	r1, pc, r1
    cb10:	str	r0, [r1]
    cb14:	ldr	r0, [pc, #64]	; cb5c <try_poll+0xdc>
    cb18:	ldr	r1, [pc, #64]	; cb60 <try_poll+0xe0>
    cb1c:	add	r0, pc, r0
    cb20:	add	r1, pc, r1
    cb24:	bl	4fb4 <rb_strlcpy@plt>
    cb28:	mov	r0, r4
    cb2c:	pop	{r4, sl, fp, pc}
    cb30:	.word	0x0002deb0
    cb34:	.word	0x0002dea8
    cb38:	.word	0x0002dea0
    cb3c:	.word	0x0002de84
    cb40:	.word	0x00000894
    cb44:	.word	0x0001b900
    cb48:	.word	0x0002de80
    cb4c:	.word	0x0001b8dc
    cb50:	.word	0x0002de68
    cb54:	.word	0x0001b85c
    cb58:	.word	0x0002de5c
    cb5c:	.word	0x0002de18
    cb60:	.word	0x0000905c

0000cb64 <try_devpoll>:
    cb64:	push	{r4, sl, fp, lr}
    cb68:	add	fp, sp, #8
    cb6c:	bl	10b44 <rb_init_netio_devpoll>
    cb70:	mvn	r4, #0
    cb74:	cmp	r0, #0
    cb78:	bne	cc0c <try_devpoll+0xa8>
    cb7c:	ldr	r0, [pc, #144]	; cc14 <try_devpoll+0xb0>
    cb80:	mov	r4, #0
    cb84:	mov	r2, #25
    cb88:	add	r0, pc, r0
    cb8c:	str	r4, [r0]
    cb90:	ldr	r0, [pc, #128]	; cc18 <try_devpoll+0xb4>
    cb94:	add	r0, pc, r0
    cb98:	str	r4, [r0]
    cb9c:	ldr	r0, [pc, #120]	; cc1c <try_devpoll+0xb8>
    cba0:	add	r0, pc, r0
    cba4:	str	r4, [r0]
    cba8:	ldr	r0, [pc, #112]	; cc20 <try_devpoll+0xbc>
    cbac:	ldr	r1, [pc, #112]	; cc24 <try_devpoll+0xc0>
    cbb0:	add	r0, pc, r0
    cbb4:	add	r1, pc, r1
    cbb8:	str	r1, [r0]
    cbbc:	ldr	r0, [pc, #100]	; cc28 <try_devpoll+0xc4>
    cbc0:	ldr	r0, [pc, r0]
    cbc4:	ldr	r1, [pc, #96]	; cc2c <try_devpoll+0xc8>
    cbc8:	add	r1, pc, r1
    cbcc:	str	r0, [r1]
    cbd0:	ldr	r0, [pc, #88]	; cc30 <try_devpoll+0xcc>
    cbd4:	ldr	r0, [pc, r0]
    cbd8:	ldr	r1, [pc, #84]	; cc34 <try_devpoll+0xd0>
    cbdc:	add	r1, pc, r1
    cbe0:	str	r0, [r1]
    cbe4:	ldr	r0, [pc, #76]	; cc38 <try_devpoll+0xd4>
    cbe8:	ldr	r0, [pc, r0]
    cbec:	ldr	r1, [pc, #72]	; cc3c <try_devpoll+0xd8>
    cbf0:	add	r1, pc, r1
    cbf4:	str	r0, [r1]
    cbf8:	ldr	r0, [pc, #64]	; cc40 <try_devpoll+0xdc>
    cbfc:	ldr	r1, [pc, #64]	; cc44 <try_devpoll+0xe0>
    cc00:	add	r0, pc, r0
    cc04:	add	r1, pc, r1
    cc08:	bl	4fb4 <rb_strlcpy@plt>
    cc0c:	mov	r0, r4
    cc10:	pop	{r4, sl, fp, pc}
    cc14:	.word	0x0002ddcc
    cc18:	.word	0x0002ddc4
    cc1c:	.word	0x0002ddbc
    cc20:	.word	0x0002dda0
    cc24:	.word	0x000007b0
    cc28:	.word	0x0001b810
    cc2c:	.word	0x0002dd9c
    cc30:	.word	0x0001b7bc
    cc34:	.word	0x0002dd84
    cc38:	.word	0x0001b7ac
    cc3c:	.word	0x0002dd78
    cc40:	.word	0x0002dd34
    cc44:	.word	0x00008f8a

0000cc48 <try_sigio>:
    cc48:	push	{fp, lr}
    cc4c:	mov	fp, sp
    cc50:	bl	11a60 <rb_init_netio_sigio>
    cc54:	mov	r1, r0
    cc58:	mvn	r0, #0
    cc5c:	cmp	r1, #0
    cc60:	popne	{fp, pc}
    cc64:	ldr	r0, [pc, #164]	; cd10 <try_sigio+0xc8>
    cc68:	mov	r2, #25
    cc6c:	ldr	r0, [pc, r0]
    cc70:	ldr	r1, [pc, #156]	; cd14 <try_sigio+0xcc>
    cc74:	add	r1, pc, r1
    cc78:	str	r0, [r1]
    cc7c:	ldr	r0, [pc, #148]	; cd18 <try_sigio+0xd0>
    cc80:	ldr	r0, [pc, r0]
    cc84:	ldr	r1, [pc, #144]	; cd1c <try_sigio+0xd4>
    cc88:	add	r1, pc, r1
    cc8c:	str	r0, [r1]
    cc90:	ldr	r0, [pc, #136]	; cd20 <try_sigio+0xd8>
    cc94:	ldr	r0, [pc, r0]
    cc98:	ldr	r1, [pc, #132]	; cd24 <try_sigio+0xdc>
    cc9c:	add	r1, pc, r1
    cca0:	str	r0, [r1]
    cca4:	ldr	r0, [pc, #124]	; cd28 <try_sigio+0xe0>
    cca8:	ldr	r0, [pc, r0]
    ccac:	ldr	r1, [pc, #120]	; cd2c <try_sigio+0xe4>
    ccb0:	add	r1, pc, r1
    ccb4:	str	r0, [r1]
    ccb8:	ldr	r0, [pc, #112]	; cd30 <try_sigio+0xe8>
    ccbc:	ldr	r0, [pc, r0]
    ccc0:	ldr	r1, [pc, #108]	; cd34 <try_sigio+0xec>
    ccc4:	add	r1, pc, r1
    ccc8:	str	r0, [r1]
    cccc:	ldr	r0, [pc, #100]	; cd38 <try_sigio+0xf0>
    ccd0:	ldr	r0, [pc, r0]
    ccd4:	ldr	r1, [pc, #96]	; cd3c <try_sigio+0xf4>
    ccd8:	add	r1, pc, r1
    ccdc:	str	r0, [r1]
    cce0:	ldr	r0, [pc, #88]	; cd40 <try_sigio+0xf8>
    cce4:	ldr	r0, [pc, r0]
    cce8:	ldr	r1, [pc, #84]	; cd44 <try_sigio+0xfc>
    ccec:	add	r1, pc, r1
    ccf0:	str	r0, [r1]
    ccf4:	ldr	r0, [pc, #76]	; cd48 <try_sigio+0x100>
    ccf8:	ldr	r1, [pc, #76]	; cd4c <try_sigio+0x104>
    ccfc:	add	r0, pc, r0
    cd00:	add	r1, pc, r1
    cd04:	bl	4fb4 <rb_strlcpy@plt>
    cd08:	mov	r0, #0
    cd0c:	pop	{fp, pc}
    cd10:	.word	0x0001b6e0
    cd14:	.word	0x0002dcf0
    cd18:	.word	0x0001b72c
    cd1c:	.word	0x0002dcd8
    cd20:	.word	0x0001b728
    cd24:	.word	0x0002dccc
    cd28:	.word	0x0001b6ac
    cd2c:	.word	0x0002dca4
    cd30:	.word	0x0001b680
    cd34:	.word	0x0002dc94
    cd38:	.word	0x0001b6e8
    cd3c:	.word	0x0002dc78
    cd40:	.word	0x0001b6f4
    cd44:	.word	0x0002dc70
    cd48:	.word	0x0002dc38
    cd4c:	.word	0x00008e96

0000cd50 <try_select>:
    cd50:	push	{r4, sl, fp, lr}
    cd54:	add	fp, sp, #8
    cd58:	bl	12350 <rb_init_netio_select>
    cd5c:	mvn	r4, #0
    cd60:	cmp	r0, #0
    cd64:	bne	cdf8 <try_select+0xa8>
    cd68:	ldr	r0, [pc, #144]	; ce00 <try_select+0xb0>
    cd6c:	mov	r4, #0
    cd70:	mov	r2, #25
    cd74:	add	r0, pc, r0
    cd78:	str	r4, [r0]
    cd7c:	ldr	r0, [pc, #128]	; ce04 <try_select+0xb4>
    cd80:	add	r0, pc, r0
    cd84:	str	r4, [r0]
    cd88:	ldr	r0, [pc, #120]	; ce08 <try_select+0xb8>
    cd8c:	add	r0, pc, r0
    cd90:	str	r4, [r0]
    cd94:	ldr	r0, [pc, #112]	; ce0c <try_select+0xbc>
    cd98:	ldr	r1, [pc, #112]	; ce10 <try_select+0xc0>
    cd9c:	add	r0, pc, r0
    cda0:	add	r1, pc, r1
    cda4:	str	r1, [r0]
    cda8:	ldr	r0, [pc, #100]	; ce14 <try_select+0xc4>
    cdac:	ldr	r0, [pc, r0]
    cdb0:	ldr	r1, [pc, #96]	; ce18 <try_select+0xc8>
    cdb4:	add	r1, pc, r1
    cdb8:	str	r0, [r1]
    cdbc:	ldr	r0, [pc, #88]	; ce1c <try_select+0xcc>
    cdc0:	ldr	r0, [pc, r0]
    cdc4:	ldr	r1, [pc, #84]	; ce20 <try_select+0xd0>
    cdc8:	add	r1, pc, r1
    cdcc:	str	r0, [r1]
    cdd0:	ldr	r0, [pc, #76]	; ce24 <try_select+0xd4>
    cdd4:	ldr	r0, [pc, r0]
    cdd8:	ldr	r1, [pc, #72]	; ce28 <try_select+0xd8>
    cddc:	add	r1, pc, r1
    cde0:	str	r0, [r1]
    cde4:	ldr	r0, [pc, #64]	; ce2c <try_select+0xdc>
    cde8:	ldr	r1, [pc, #64]	; ce30 <try_select+0xe0>
    cdec:	add	r0, pc, r0
    cdf0:	add	r1, pc, r1
    cdf4:	bl	4fb4 <rb_strlcpy@plt>
    cdf8:	mov	r0, r4
    cdfc:	pop	{r4, sl, fp, pc}
    ce00:	.word	0x0002dbe0
    ce04:	.word	0x0002dbd8
    ce08:	.word	0x0002dbd0
    ce0c:	.word	0x0002dbb4
    ce10:	.word	0x000005c4
    ce14:	.word	0x0001b5ec
    ce18:	.word	0x0002dbb0
    ce1c:	.word	0x0001b640
    ce20:	.word	0x0002db98
    ce24:	.word	0x0001b60c
    ce28:	.word	0x0002db8c
    ce2c:	.word	0x0002db48
    ce30:	.word	0x00008dac

0000ce34 <try_win32>:
    ce34:	push	{r4, sl, fp, lr}
    ce38:	add	fp, sp, #8
    ce3c:	bl	5854 <rb_init_netio_win32>
    ce40:	mvn	r4, #0
    ce44:	cmp	r0, #0
    ce48:	bne	cedc <try_win32+0xa8>
    ce4c:	ldr	r0, [pc, #144]	; cee4 <try_win32+0xb0>
    ce50:	mov	r4, #0
    ce54:	mov	r2, #25
    ce58:	add	r0, pc, r0
    ce5c:	str	r4, [r0]
    ce60:	ldr	r0, [pc, #128]	; cee8 <try_win32+0xb4>
    ce64:	add	r0, pc, r0
    ce68:	str	r4, [r0]
    ce6c:	ldr	r0, [pc, #120]	; ceec <try_win32+0xb8>
    ce70:	add	r0, pc, r0
    ce74:	str	r4, [r0]
    ce78:	ldr	r0, [pc, #112]	; cef0 <try_win32+0xbc>
    ce7c:	ldr	r1, [pc, #112]	; cef4 <try_win32+0xc0>
    ce80:	add	r0, pc, r0
    ce84:	add	r1, pc, r1
    ce88:	str	r1, [r0]
    ce8c:	ldr	r0, [pc, #100]	; cef8 <try_win32+0xc4>
    ce90:	ldr	r0, [pc, r0]
    ce94:	ldr	r1, [pc, #96]	; cefc <try_win32+0xc8>
    ce98:	add	r1, pc, r1
    ce9c:	str	r0, [r1]
    cea0:	ldr	r0, [pc, #88]	; cf00 <try_win32+0xcc>
    cea4:	ldr	r0, [pc, r0]
    cea8:	ldr	r1, [pc, #84]	; cf04 <try_win32+0xd0>
    ceac:	add	r1, pc, r1
    ceb0:	str	r0, [r1]
    ceb4:	ldr	r0, [pc, #76]	; cf08 <try_win32+0xd4>
    ceb8:	ldr	r0, [pc, r0]
    cebc:	ldr	r1, [pc, #72]	; cf0c <try_win32+0xd8>
    cec0:	add	r1, pc, r1
    cec4:	str	r0, [r1]
    cec8:	ldr	r0, [pc, #64]	; cf10 <try_win32+0xdc>
    cecc:	ldr	r1, [pc, #64]	; cf14 <try_win32+0xe0>
    ced0:	add	r0, pc, r0
    ced4:	add	r1, pc, r1
    ced8:	bl	4fb4 <rb_strlcpy@plt>
    cedc:	mov	r0, r4
    cee0:	pop	{r4, sl, fp, pc}
    cee4:	.word	0x0002dafc
    cee8:	.word	0x0002daf4
    ceec:	.word	0x0002daec
    cef0:	.word	0x0002dad0
    cef4:	.word	0x000004e0
    cef8:	.word	0x0001b4f8
    cefc:	.word	0x0002dacc
    cf00:	.word	0x0001b4d8
    cf04:	.word	0x0002dab4
    cf08:	.word	0x0001b498
    cf0c:	.word	0x0002daa8
    cf10:	.word	0x0002da64
    cf14:	.word	0x00008ccf

0000cf18 <rb_select>:
    cf18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf1c:	add	fp, sp, #28
    cf20:	sub	sp, sp, #4
    cf24:	ldr	r1, [pc, #184]	; cfe4 <rb_select+0xcc>
    cf28:	ldr	r1, [pc, r1]
    cf2c:	blx	r1
    cf30:	ldr	r6, [pc, #176]	; cfe8 <rb_select+0xd0>
    cf34:	mov	r8, r0
    cf38:	ldr	r6, [pc, r6]
    cf3c:	cmp	r6, #0
    cf40:	beq	cfd8 <rb_select+0xc0>
    cf44:	ldr	r9, [pc, #160]	; cfec <rb_select+0xd4>
    cf48:	ldr	r7, [pc, #160]	; cff0 <rb_select+0xd8>
    cf4c:	mov	sl, #0
    cf50:	add	r9, pc, r9
    cf54:	add	r7, pc, r7
    cf58:	ldr	r5, [r6]
    cf5c:	ldr	r4, [r6, #8]
    cf60:	ldr	r0, [pc, #140]	; cff4 <rb_select+0xdc>
    cf64:	ldr	r0, [pc, r0]
    cf68:	sub	r0, r0, #1
    cf6c:	str	r0, [r9]
    cf70:	ldr	r0, [r5, #12]
    cf74:	bl	5248 <close@plt>
    cf78:	ldr	r0, [r6, #8]
    cf7c:	ldr	r1, [r6, #4]
    cf80:	cmp	r0, #0
    cf84:	beq	cf94 <rb_select+0x7c>
    cf88:	str	r1, [r0, #4]
    cf8c:	ldr	r1, [r6, #4]
    cf90:	b	cf98 <rb_select+0x80>
    cf94:	str	r1, [r7, #4]
    cf98:	cmp	r1, #0
    cf9c:	mov	r2, r7
    cfa0:	addne	r2, r1, #8
    cfa4:	mov	r1, r5
    cfa8:	str	r0, [r2]
    cfac:	str	sl, [r6, #4]
    cfb0:	str	sl, [r6, #8]
    cfb4:	ldr	r0, [r7, #8]
    cfb8:	sub	r0, r0, #1
    cfbc:	str	r0, [r7, #8]
    cfc0:	ldr	r0, [pc, #48]	; cff8 <rb_select+0xe0>
    cfc4:	ldr	r0, [pc, r0]
    cfc8:	bl	51dc <rb_bh_free@plt>
    cfcc:	cmp	r4, #0
    cfd0:	mov	r6, r4
    cfd4:	bne	cf58 <rb_select+0x40>
    cfd8:	mov	r0, r8
    cfdc:	sub	sp, fp, #28
    cfe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfe4:	.word	0x0002da3c
    cfe8:	.word	0x0002da34
    cfec:	.word	0x0002d9d8
    cff0:	.word	0x0002da18
    cff4:	.word	0x0002d9c4
    cff8:	.word	0x0002d96c

0000cffc <rb_recv_fd_buf>:
    cffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d000:	add	fp, sp, #28
    d004:	sub	sp, sp, #132	; 0x84
    d008:	ldr	r9, [fp, #8]
    d00c:	mov	sl, r3
    d010:	mov	r3, #0
    d014:	mov	r7, #1
    d018:	sub	ip, fp, #68	; 0x44
    d01c:	str	r3, [fp, #-36]	; 0xffffffdc
    d020:	str	r7, [fp, #-48]	; 0xffffffd0
    d024:	sub	r7, fp, #68	; 0x44
    d028:	str	r7, [fp, #-52]	; 0xffffffcc
    d02c:	str	r3, [fp, #-56]	; 0xffffffc8
    d030:	stm	ip, {r1, r2, r3}
    d034:	mov	r1, #19
    d038:	mov	r2, #12
    d03c:	add	r1, r1, r9, lsl #2
    d040:	add	r2, r2, r9, lsl #2
    d044:	bic	r1, r1, #7
    d048:	sub	r1, sp, r1
    d04c:	mov	sp, r1
    d050:	cmp	r0, #0
    d054:	str	r2, [fp, #-40]	; 0xffffffd8
    d058:	str	r1, [fp, #-44]	; 0xffffffd4
    d05c:	beq	d068 <rb_recv_fd_buf+0x6c>
    d060:	ldr	r0, [r0, #12]
    d064:	b	d06c <rb_recv_fd_buf+0x70>
    d068:	mvn	r0, #0
    d06c:	sub	r1, fp, #60	; 0x3c
    d070:	mov	r2, #0
    d074:	bl	5428 <recvmsg@plt>
    d078:	mov	r5, r0
    d07c:	cmp	r0, #1
    d080:	blt	d170 <rb_recv_fd_buf+0x174>
    d084:	ldr	r1, [fp, #-40]	; 0xffffffd8
    d088:	cmp	r1, #0
    d08c:	beq	d168 <rb_recv_fd_buf+0x16c>
    d090:	ldr	r0, [fp, #-44]	; 0xffffffd4
    d094:	cmp	r0, #0
    d098:	beq	d168 <rb_recv_fd_buf+0x16c>
    d09c:	cmp	r1, #11
    d0a0:	movls	r0, #0
    d0a4:	cmp	r1, #12
    d0a8:	bcc	d168 <rb_recv_fd_buf+0x16c>
    d0ac:	cmp	r9, #1
    d0b0:	blt	d170 <rb_recv_fd_buf+0x174>
    d0b4:	ldr	r1, [r0]
    d0b8:	sub	r1, r1, #12
    d0bc:	lsr	r6, r1, #2
    d0c0:	cmp	r6, #0
    d0c4:	beq	d170 <rb_recv_fd_buf+0x174>
    d0c8:	add	r4, r0, #12
    d0cc:	mov	r8, #0
    d0d0:	ldr	r7, [r4, r8, lsl #2]
    d0d4:	sub	r1, fp, #160	; 0xa0
    d0d8:	mov	r0, r7
    d0dc:	bl	15118 <__fstat>
    d0e0:	mov	r1, #64	; 0x40
    d0e4:	cmp	r0, #0
    d0e8:	beq	d118 <rb_recv_fd_buf+0x11c>
    d0ec:	ldr	r2, [pc, #148]	; d188 <rb_recv_fd_buf+0x18c>
    d0f0:	add	r2, pc, r2
    d0f4:	mov	r0, r7
    d0f8:	bl	5380 <rb_open@plt>
    d0fc:	str	r0, [sl, r8, lsl #2]
    d100:	add	r8, r8, #1
    d104:	cmp	r8, r9
    d108:	bge	d170 <rb_recv_fd_buf+0x174>
    d10c:	cmp	r8, r6
    d110:	bcc	d0d0 <rb_recv_fd_buf+0xd4>
    d114:	b	d170 <rb_recv_fd_buf+0x174>
    d118:	ldr	r0, [fp, #-144]	; 0xffffff70
    d11c:	and	r0, r0, #61440	; 0xf000
    d120:	cmp	r0, #49152	; 0xc000
    d124:	beq	d148 <rb_recv_fd_buf+0x14c>
    d128:	cmp	r0, #32768	; 0x8000
    d12c:	beq	d158 <rb_recv_fd_buf+0x15c>
    d130:	cmp	r0, #4096	; 0x1000
    d134:	bne	d0ec <rb_recv_fd_buf+0xf0>
    d138:	ldr	r2, [pc, #64]	; d180 <rb_recv_fd_buf+0x184>
    d13c:	mov	r1, #8
    d140:	add	r2, pc, r2
    d144:	b	d0f4 <rb_recv_fd_buf+0xf8>
    d148:	ldr	r2, [pc, #44]	; d17c <rb_recv_fd_buf+0x180>
    d14c:	mov	r1, #4
    d150:	add	r2, pc, r2
    d154:	b	d0f4 <rb_recv_fd_buf+0xf8>
    d158:	ldr	r2, [pc, #36]	; d184 <rb_recv_fd_buf+0x188>
    d15c:	mov	r1, #2
    d160:	add	r2, pc, r2
    d164:	b	d0f4 <rb_recv_fd_buf+0xf8>
    d168:	mov	r0, #0
    d16c:	str	r0, [sl]
    d170:	mov	r0, r5
    d174:	sub	sp, fp, #28
    d178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d17c:	.word	0x00008aa2
    d180:	.word	0x00008ac0
    d184:	.word	0x00008aac
    d188:	.word	0x00008af3

0000d18c <rb_send_fd_buf>:
    d18c:	push	{r4, r5, r6, sl, fp, lr}
    d190:	add	fp, sp, #16
    d194:	sub	sp, sp, #48	; 0x30
    d198:	vmov.i32	q8, #0	; 0x00000000
    d19c:	sub	r5, fp, #48	; 0x30
    d1a0:	mov	ip, #0
    d1a4:	add	r4, r5, #12
    d1a8:	vst1.32	{d16-d17}, [r4]
    d1ac:	mov	r4, #48	; 0x30
    d1b0:	strb	r4, [fp, #-57]	; 0xffffffc7
    d1b4:	mov	r4, #20
    d1b8:	vst1.64	{d16-d17}, [r5], r4
    d1bc:	mov	r4, #1
    d1c0:	str	ip, [r5]
    d1c4:	sub	r5, fp, #56	; 0x38
    d1c8:	str	r5, [fp, #-40]	; 0xffffffd8
    d1cc:	ldr	r5, [fp, #8]
    d1d0:	str	ip, [fp, #-48]	; 0xffffffd0
    d1d4:	str	ip, [fp, #-44]	; 0xffffffd4
    d1d8:	str	ip, [fp, #-32]	; 0xffffffe0
    d1dc:	str	ip, [fp, #-24]	; 0xffffffe8
    d1e0:	str	r4, [fp, #-36]	; 0xffffffdc
    d1e4:	cmp	r5, #0
    d1e8:	movweq	r5, #1
    d1ec:	str	r5, [fp, #-52]	; 0xffffffcc
    d1f0:	sub	r5, fp, #57	; 0x39
    d1f4:	movne	r5, r3
    d1f8:	cmp	r2, #1
    d1fc:	str	r5, [fp, #-56]	; 0xffffffc8
    d200:	blt	d284 <rb_send_fd_buf+0xf8>
    d204:	mov	r3, #19
    d208:	mov	r5, #12
    d20c:	mov	r6, sp
    d210:	add	r3, r3, r2, lsl #2
    d214:	add	r5, r5, r2, lsl #2
    d218:	bic	r3, r3, #7
    d21c:	sub	r3, sp, r3
    d220:	mov	sp, r3
    d224:	cmp	r5, #11
    d228:	str	r5, [fp, #-28]	; 0xffffffe4
    d22c:	str	r3, [fp, #-32]	; 0xffffffe0
    d230:	movhi	ip, r3
    d234:	add	r3, ip, #12
    d238:	str	r5, [ip]
    d23c:	str	r4, [ip, #4]
    d240:	str	r4, [ip, #8]
    d244:	ldr	r4, [r1]
    d248:	cmp	r4, #0
    d24c:	beq	d258 <rb_send_fd_buf+0xcc>
    d250:	ldr	r4, [r4, #12]
    d254:	b	d25c <rb_send_fd_buf+0xd0>
    d258:	mvn	r4, #0
    d25c:	str	r4, [r3], #4
    d260:	add	r1, r1, #4
    d264:	subs	r2, r2, #1
    d268:	bne	d244 <rb_send_fd_buf+0xb8>
    d26c:	ldr	r1, [ip]
    d270:	cmp	r0, #0
    d274:	str	r1, [fp, #-28]	; 0xffffffe4
    d278:	beq	d294 <rb_send_fd_buf+0x108>
    d27c:	ldr	r0, [r0, #12]
    d280:	b	d298 <rb_send_fd_buf+0x10c>
    d284:	cmp	r0, #0
    d288:	beq	d2ac <rb_send_fd_buf+0x120>
    d28c:	ldr	r0, [r0, #12]
    d290:	b	d2b0 <rb_send_fd_buf+0x124>
    d294:	mvn	r0, #0
    d298:	sub	r1, fp, #48	; 0x30
    d29c:	mov	r2, #16384	; 0x4000
    d2a0:	bl	5008 <sendmsg@plt>
    d2a4:	mov	sp, r6
    d2a8:	b	d2bc <rb_send_fd_buf+0x130>
    d2ac:	mvn	r0, #0
    d2b0:	sub	r1, fp, #48	; 0x30
    d2b4:	mov	r2, #16384	; 0x4000
    d2b8:	bl	5008 <sendmsg@plt>
    d2bc:	sub	sp, fp, #16
    d2c0:	pop	{r4, r5, r6, sl, fp, pc}

0000d2c4 <rb_ipv4_from_ipv6>:
    d2c4:	push	{r4, r5, r6, sl, fp, lr}
    d2c8:	add	fp, sp, #16
    d2cc:	sub	sp, sp, #8
    d2d0:	mov	r4, r1
    d2d4:	ldr	r1, [pc, #136]	; d364 <rb_ipv4_from_ipv6+0xa0>
    d2d8:	add	r6, r0, #8
    d2dc:	mov	r5, r0
    d2e0:	mov	r2, #2
    d2e4:	mov	r0, r6
    d2e8:	add	r1, pc, r1
    d2ec:	bl	5164 <bcmp@plt>
    d2f0:	cmp	r0, #0
    d2f4:	beq	d348 <rb_ipv4_from_ipv6+0x84>
    d2f8:	ldr	r1, [pc, #104]	; d368 <rb_ipv4_from_ipv6+0xa4>
    d2fc:	mov	r0, r6
    d300:	mov	r2, #4
    d304:	add	r1, pc, r1
    d308:	bl	5164 <bcmp@plt>
    d30c:	mov	r1, r0
    d310:	mov	r0, #0
    d314:	cmp	r1, #0
    d318:	bne	d35c <rb_ipv4_from_ipv6+0x98>
    d31c:	ldr	r0, [r5, #20]
    d320:	vmov.i16	d18, #255	; 0x00ff
    d324:	str	r0, [sp, #4]
    d328:	add	r0, sp, #4
    d32c:	vld1.32	{d16[0]}, [r0 :32]
    d330:	add	r0, r4, #4
    d334:	vmovl.u8	q8, d16
    d338:	veor	d16, d16, d18
    d33c:	vuzp.8	d16, d17
    d340:	vst1.32	{d16[0]}, [r0]
    d344:	b	d350 <rb_ipv4_from_ipv6+0x8c>
    d348:	ldr	r0, [r6, #2]
    d34c:	str	r0, [r4, #4]
    d350:	mov	r0, #2
    d354:	str	r0, [r4]
    d358:	mov	r0, #1
    d35c:	sub	sp, fp, #16
    d360:	pop	{r4, r5, r6, sl, fp, pc}
    d364:	.word	0x00008930
    d368:	.word	0x00008cc4

0000d36c <rb_unsupported_event>:
    d36c:	mov	r0, #0
    d370:	bx	lr

0000d374 <rb_ssl_shutdown>:
    d374:	push	{r4, r5, r6, sl, fp, lr}
    d378:	add	fp, sp, #16
    d37c:	cmp	r0, #0
    d380:	beq	d3f0 <rb_ssl_shutdown+0x7c>
    d384:	mov	r4, r0
    d388:	ldr	r0, [r0, #56]	; 0x38
    d38c:	cmp	r0, #0
    d390:	beq	d3f0 <rb_ssl_shutdown+0x7c>
    d394:	bl	4d38 <ERR_get_error@plt>
    d398:	cmp	r0, #0
    d39c:	bne	d394 <rb_ssl_shutdown+0x20>
    d3a0:	mov	r6, #1
    d3a4:	ldr	r0, [r4, #56]	; 0x38
    d3a8:	bl	53a4 <SSL_shutdown@plt>
    d3ac:	mov	r5, r0
    d3b0:	ldr	r0, [r4, #56]	; 0x38
    d3b4:	mov	r1, r5
    d3b8:	bl	559c <SSL_get_error@plt>
    d3bc:	cmn	r5, #1
    d3c0:	bgt	d3e0 <rb_ssl_shutdown+0x6c>
    d3c4:	orr	r0, r0, #1
    d3c8:	cmp	r0, #3
    d3cc:	bne	d3e0 <rb_ssl_shutdown+0x6c>
    d3d0:	add	r0, r6, #1
    d3d4:	cmp	r6, #4
    d3d8:	mov	r6, r0
    d3dc:	bcc	d3a4 <rb_ssl_shutdown+0x30>
    d3e0:	ldr	r0, [r4, #56]	; 0x38
    d3e4:	bl	5260 <SSL_free@plt>
    d3e8:	mov	r0, #0
    d3ec:	str	r0, [r4, #56]	; 0x38
    d3f0:	pop	{r4, r5, r6, sl, fp, pc}

0000d3f4 <rb_init_ssl>:
    d3f4:	push	{fp, lr}
    d3f8:	mov	fp, sp
    d3fc:	ldr	r0, [pc, #20]	; d418 <rb_init_ssl+0x24>
    d400:	ldr	r1, [pc, #20]	; d41c <rb_init_ssl+0x28>
    d404:	add	r0, pc, r0
    d408:	add	r1, pc, r1
    d40c:	bl	5224 <rb_lib_log@plt>
    d410:	mov	r0, #1
    d414:	pop	{fp, pc}
    d418:	.word	0x00008bda
    d41c:	.word	0x00008bf6

0000d420 <rb_setup_ssl_server>:
    d420:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    d424:	add	fp, sp, #24
    d428:	sub	sp, sp, #8
    d42c:	cmp	r0, #0
    d430:	beq	d564 <rb_setup_ssl_server+0x144>
    d434:	mov	r4, r3
    d438:	mov	r8, r2
    d43c:	mov	r7, r1
    d440:	mov	r6, r0
    d444:	bl	4d38 <ERR_get_error@plt>
    d448:	cmp	r0, #0
    d44c:	bne	d444 <rb_setup_ssl_server+0x24>
    d450:	ldr	r5, [pc, #840]	; d7a0 <rb_setup_ssl_server+0x380>
    d454:	cmp	r4, #0
    d458:	add	r5, pc, r5
    d45c:	movne	r5, r4
    d460:	cmp	r7, #0
    d464:	moveq	r7, r6
    d468:	bl	4ca8 <TLS_method@plt>
    d46c:	bl	541c <SSL_CTX_new@plt>
    d470:	cmp	r0, #0
    d474:	beq	d57c <rb_setup_ssl_server+0x15c>
    d478:	mov	r1, r6
    d47c:	mov	r4, r0
    d480:	bl	5134 <SSL_CTX_use_certificate_chain_file@plt>
    d484:	cmp	r0, #1
    d488:	bne	d5c4 <rb_setup_ssl_server+0x1a4>
    d48c:	mov	r0, r4
    d490:	mov	r1, r7
    d494:	mov	r2, #1
    d498:	bl	5230 <SSL_CTX_use_PrivateKey_file@plt>
    d49c:	cmp	r0, #1
    d4a0:	bne	d60c <rb_setup_ssl_server+0x1ec>
    d4a4:	cmp	r8, #0
    d4a8:	beq	d668 <rb_setup_ssl_server+0x248>
    d4ac:	ldr	r1, [pc, #796]	; d7d0 <rb_setup_ssl_server+0x3b0>
    d4b0:	mov	r0, r8
    d4b4:	add	r1, pc, r1
    d4b8:	bl	4f24 <fopen@plt>
    d4bc:	mov	r9, r0
    d4c0:	mov	r0, #0
    d4c4:	cmp	r9, #0
    d4c8:	str	r0, [sp, #4]
    d4cc:	beq	d680 <rb_setup_ssl_server+0x260>
    d4d0:	add	r1, sp, #4
    d4d4:	mov	r0, r9
    d4d8:	mov	r2, #0
    d4dc:	mov	r3, #0
    d4e0:	mov	r7, #0
    d4e4:	bl	52e4 <PEM_read_DHparams@plt>
    d4e8:	cmp	r0, #0
    d4ec:	beq	d510 <rb_setup_ssl_server+0xf0>
    d4f0:	ldr	r3, [sp, #4]
    d4f4:	mov	r0, r4
    d4f8:	mov	r1, #3
    d4fc:	mov	r2, #0
    d500:	bl	4f84 <SSL_CTX_ctrl@plt>
    d504:	ldr	r0, [sp, #4]
    d508:	bl	5368 <DH_free@plt>
    d50c:	b	d558 <rb_setup_ssl_server+0x138>
    d510:	mov	r6, r7
    d514:	bl	4d38 <ERR_get_error@plt>
    d518:	mov	r7, r0
    d51c:	cmp	r0, #0
    d520:	bne	d510 <rb_setup_ssl_server+0xf0>
    d524:	ldr	r7, [pc, #688]	; d7dc <rb_setup_ssl_server+0x3bc>
    d528:	mov	r0, r6
    d52c:	mov	r2, #512	; 0x200
    d530:	add	r7, pc, r7
    d534:	mov	r1, r7
    d538:	bl	4ec4 <ERR_error_string_n@plt>
    d53c:	ldr	r0, [pc, #668]	; d7e0 <rb_setup_ssl_server+0x3c0>
    d540:	ldr	r1, [pc, #668]	; d7e4 <rb_setup_ssl_server+0x3c4>
    d544:	mov	r2, r8
    d548:	mov	r3, r7
    d54c:	add	r0, pc, r0
    d550:	add	r1, pc, r1
    d554:	bl	5224 <rb_lib_log@plt>
    d558:	mov	r0, r9
    d55c:	bl	4ea0 <fclose@plt>
    d560:	b	d6a8 <rb_setup_ssl_server+0x288>
    d564:	ldr	r0, [pc, #556]	; d798 <rb_setup_ssl_server+0x378>
    d568:	ldr	r1, [pc, #556]	; d79c <rb_setup_ssl_server+0x37c>
    d56c:	add	r0, pc, r0
    d570:	add	r1, pc, r1
    d574:	bl	5224 <rb_lib_log@plt>
    d578:	b	d65c <rb_setup_ssl_server+0x23c>
    d57c:	mov	r0, #0
    d580:	mov	r4, r0
    d584:	bl	4d38 <ERR_get_error@plt>
    d588:	cmp	r0, #0
    d58c:	bne	d580 <rb_setup_ssl_server+0x160>
    d590:	ldr	r5, [pc, #524]	; d7a4 <rb_setup_ssl_server+0x384>
    d594:	mov	r0, r4
    d598:	mov	r2, #512	; 0x200
    d59c:	add	r5, pc, r5
    d5a0:	mov	r1, r5
    d5a4:	bl	4ec4 <ERR_error_string_n@plt>
    d5a8:	ldr	r0, [pc, #504]	; d7a8 <rb_setup_ssl_server+0x388>
    d5ac:	ldr	r1, [pc, #504]	; d7ac <rb_setup_ssl_server+0x38c>
    d5b0:	mov	r2, r5
    d5b4:	add	r0, pc, r0
    d5b8:	add	r1, pc, r1
    d5bc:	bl	5224 <rb_lib_log@plt>
    d5c0:	b	d65c <rb_setup_ssl_server+0x23c>
    d5c4:	mov	r0, #0
    d5c8:	mov	r5, r0
    d5cc:	bl	4d38 <ERR_get_error@plt>
    d5d0:	cmp	r0, #0
    d5d4:	bne	d5c8 <rb_setup_ssl_server+0x1a8>
    d5d8:	ldr	r7, [pc, #464]	; d7b0 <rb_setup_ssl_server+0x390>
    d5dc:	mov	r0, r5
    d5e0:	mov	r2, #512	; 0x200
    d5e4:	add	r7, pc, r7
    d5e8:	mov	r1, r7
    d5ec:	bl	4ec4 <ERR_error_string_n@plt>
    d5f0:	ldr	r0, [pc, #444]	; d7b4 <rb_setup_ssl_server+0x394>
    d5f4:	ldr	r1, [pc, #444]	; d7b8 <rb_setup_ssl_server+0x398>
    d5f8:	mov	r2, r6
    d5fc:	mov	r3, r7
    d600:	add	r0, pc, r0
    d604:	add	r1, pc, r1
    d608:	b	d650 <rb_setup_ssl_server+0x230>
    d60c:	mov	r0, #0
    d610:	mov	r5, r0
    d614:	bl	4d38 <ERR_get_error@plt>
    d618:	cmp	r0, #0
    d61c:	bne	d610 <rb_setup_ssl_server+0x1f0>
    d620:	ldr	r6, [pc, #404]	; d7bc <rb_setup_ssl_server+0x39c>
    d624:	mov	r0, r5
    d628:	mov	r2, #512	; 0x200
    d62c:	add	r6, pc, r6
    d630:	mov	r1, r6
    d634:	bl	4ec4 <ERR_error_string_n@plt>
    d638:	ldr	r0, [pc, #384]	; d7c0 <rb_setup_ssl_server+0x3a0>
    d63c:	ldr	r1, [pc, #384]	; d7c4 <rb_setup_ssl_server+0x3a4>
    d640:	mov	r2, r7
    d644:	mov	r3, r6
    d648:	add	r0, pc, r0
    d64c:	add	r1, pc, r1
    d650:	bl	5224 <rb_lib_log@plt>
    d654:	mov	r0, r4
    d658:	bl	4d8c <SSL_CTX_free@plt>
    d65c:	mov	r0, #0
    d660:	sub	sp, fp, #24
    d664:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    d668:	ldr	r0, [pc, #344]	; d7c8 <rb_setup_ssl_server+0x3a8>
    d66c:	ldr	r1, [pc, #344]	; d7cc <rb_setup_ssl_server+0x3ac>
    d670:	add	r0, pc, r0
    d674:	add	r1, pc, r1
    d678:	bl	5224 <rb_lib_log@plt>
    d67c:	b	d6a8 <rb_setup_ssl_server+0x288>
    d680:	bl	55e4 <__errno_location@plt>
    d684:	ldr	r0, [r0]
    d688:	bl	4cd8 <strerror@plt>
    d68c:	mov	r3, r0
    d690:	ldr	r0, [pc, #316]	; d7d4 <rb_setup_ssl_server+0x3b4>
    d694:	ldr	r1, [pc, #316]	; d7d8 <rb_setup_ssl_server+0x3b8>
    d698:	mov	r2, r8
    d69c:	add	r0, pc, r0
    d6a0:	add	r1, pc, r1
    d6a4:	bl	5224 <rb_lib_log@plt>
    d6a8:	mov	r0, r4
    d6ac:	mov	r1, r5
    d6b0:	bl	4d2c <SSL_CTX_set_cipher_list@plt>
    d6b4:	cmp	r0, #1
    d6b8:	bne	d780 <rb_setup_ssl_server+0x360>
    d6bc:	mov	r0, r4
    d6c0:	mov	r1, #44	; 0x2c
    d6c4:	mov	r2, #0
    d6c8:	mov	r3, #0
    d6cc:	bl	4f84 <SSL_CTX_ctrl@plt>
    d6d0:	ldr	r2, [pc, #280]	; d7f0 <rb_setup_ssl_server+0x3d0>
    d6d4:	mov	r0, r4
    d6d8:	mov	r1, #5
    d6dc:	add	r2, pc, r2
    d6e0:	bl	5614 <SSL_CTX_set_verify@plt>
    d6e4:	mov	r0, r4
    d6e8:	mov	r1, #2048	; 0x800
    d6ec:	bl	4e40 <SSL_CTX_clear_options@plt>
    d6f0:	mov	r0, r4
    d6f4:	mov	r1, #67108864	; 0x4000000
    d6f8:	bl	514c <SSL_CTX_set_options@plt>
    d6fc:	mov	r0, r4
    d700:	mov	r1, #16384	; 0x4000
    d704:	bl	514c <SSL_CTX_set_options@plt>
    d708:	mov	r0, r4
    d70c:	mov	r1, #4194304	; 0x400000
    d710:	bl	514c <SSL_CTX_set_options@plt>
    d714:	mov	r0, r4
    d718:	mov	r1, #0
    d71c:	bl	514c <SSL_CTX_set_options@plt>
    d720:	mov	r0, r4
    d724:	mov	r1, #0
    d728:	bl	514c <SSL_CTX_set_options@plt>
    d72c:	ldr	r3, [pc, #192]	; d7f4 <rb_setup_ssl_server+0x3d4>
    d730:	mov	r0, r4
    d734:	mov	r1, #92	; 0x5c
    d738:	mov	r2, #0
    d73c:	add	r3, pc, r3
    d740:	bl	4f84 <SSL_CTX_ctrl@plt>
    d744:	ldr	r0, [pc, #172]	; d7f8 <rb_setup_ssl_server+0x3d8>
    d748:	ldr	r0, [pc, r0]
    d74c:	cmp	r0, #0
    d750:	beq	d758 <rb_setup_ssl_server+0x338>
    d754:	bl	4d8c <SSL_CTX_free@plt>
    d758:	ldr	r0, [pc, #156]	; d7fc <rb_setup_ssl_server+0x3dc>
    d75c:	add	r0, pc, r0
    d760:	str	r4, [r0]
    d764:	ldr	r0, [pc, #148]	; d800 <rb_setup_ssl_server+0x3e0>
    d768:	ldr	r1, [pc, #148]	; d804 <rb_setup_ssl_server+0x3e4>
    d76c:	add	r0, pc, r0
    d770:	add	r1, pc, r1
    d774:	bl	5224 <rb_lib_log@plt>
    d778:	mov	r0, #1
    d77c:	b	d660 <rb_setup_ssl_server+0x240>
    d780:	ldr	r0, [pc, #96]	; d7e8 <rb_setup_ssl_server+0x3c8>
    d784:	ldr	r1, [pc, #96]	; d7ec <rb_setup_ssl_server+0x3cc>
    d788:	add	r0, pc, r0
    d78c:	add	r1, pc, r1
    d790:	bl	5224 <rb_lib_log@plt>
    d794:	b	d654 <rb_setup_ssl_server+0x234>
    d798:	.word	0x00008a9e
    d79c:	.word	0x00008abc
    d7a0:	.word	0x00008e3d
    d7a4:	.word	0x0002d5f0
    d7a8:	.word	0x00008a8c
    d7ac:	.word	0x00008a74
    d7b0:	.word	0x0002d5a8
    d7b4:	.word	0x00008a54
    d7b8:	.word	0x00008a28
    d7bc:	.word	0x0002d560
    d7c0:	.word	0x00008a3e
    d7c4:	.word	0x000089e0
    d7c8:	.word	0x00008a41
    d7cc:	.word	0x000089b8
    d7d0:	.word	0x00009140
    d7d4:	.word	0x00008a39
    d7d8:	.word	0x0000898c
    d7dc:	.word	0x0002d65c
    d7e0:	.word	0x00008b9e
    d7e4:	.word	0x00008adc
    d7e8:	.word	0x00008983
    d7ec:	.word	0x000088a0
    d7f0:	.word	0x00000124
    d7f4:	.word	0x0001ad0c
    d7f8:	.word	0x0002d240
    d7fc:	.word	0x0002d22c
    d800:	.word	0x000089dc
    d804:	.word	0x000088bc

0000d808 <verify_accept_all_cb>:
    d808:	mov	r0, #1
    d80c:	bx	lr

0000d810 <rb_init_prng>:
    d810:	push	{r4, r5, fp, lr}
    d814:	add	fp, sp, #8
    d818:	mov	r5, r1
    d81c:	mov	r4, r0
    d820:	bl	4d38 <ERR_get_error@plt>
    d824:	cmp	r0, #0
    d828:	bne	d820 <rb_init_prng+0x10>
    d82c:	cmp	r5, #0
    d830:	bne	d88c <rb_init_prng+0x7c>
    d834:	mov	r0, r4
    d838:	mvn	r1, #0
    d83c:	bl	4d68 <RAND_load_file@plt>
    d840:	cmn	r0, #1
    d844:	bgt	d88c <rb_init_prng+0x7c>
    d848:	mov	r0, #0
    d84c:	mov	r4, r0
    d850:	bl	4d38 <ERR_get_error@plt>
    d854:	cmp	r0, #0
    d858:	bne	d84c <rb_init_prng+0x3c>
    d85c:	ldr	r5, [pc, #156]	; d900 <rb_init_prng+0xf0>
    d860:	mov	r0, r4
    d864:	mov	r2, #512	; 0x200
    d868:	add	r5, pc, r5
    d86c:	mov	r1, r5
    d870:	bl	4ec4 <ERR_error_string_n@plt>
    d874:	ldr	r0, [pc, #136]	; d904 <rb_init_prng+0xf4>
    d878:	ldr	r1, [pc, #136]	; d908 <rb_init_prng+0xf8>
    d87c:	mov	r2, r5
    d880:	add	r0, pc, r0
    d884:	add	r1, pc, r1
    d888:	bl	5224 <rb_lib_log@plt>
    d88c:	bl	54ac <RAND_status@plt>
    d890:	cmp	r0, #1
    d894:	bne	d8b4 <rb_init_prng+0xa4>
    d898:	ldr	r0, [pc, #120]	; d918 <rb_init_prng+0x108>
    d89c:	ldr	r1, [pc, #120]	; d91c <rb_init_prng+0x10c>
    d8a0:	add	r0, pc, r0
    d8a4:	add	r1, pc, r1
    d8a8:	bl	5224 <rb_lib_log@plt>
    d8ac:	mov	r0, #1
    d8b0:	pop	{r4, r5, fp, pc}
    d8b4:	mov	r0, #0
    d8b8:	mov	r4, r0
    d8bc:	bl	4d38 <ERR_get_error@plt>
    d8c0:	cmp	r0, #0
    d8c4:	bne	d8b8 <rb_init_prng+0xa8>
    d8c8:	ldr	r5, [pc, #60]	; d90c <rb_init_prng+0xfc>
    d8cc:	mov	r0, r4
    d8d0:	mov	r2, #512	; 0x200
    d8d4:	add	r5, pc, r5
    d8d8:	mov	r1, r5
    d8dc:	bl	4ec4 <ERR_error_string_n@plt>
    d8e0:	ldr	r0, [pc, #40]	; d910 <rb_init_prng+0x100>
    d8e4:	ldr	r1, [pc, #40]	; d914 <rb_init_prng+0x104>
    d8e8:	mov	r2, r5
    d8ec:	add	r0, pc, r0
    d8f0:	add	r1, pc, r1
    d8f4:	bl	5224 <rb_lib_log@plt>
    d8f8:	mov	r0, #0
    d8fc:	pop	{r4, r5, fp, pc}
    d900:	.word	0x0002d324
    d904:	.word	0x000088e9
    d908:	.word	0x000088fc
    d90c:	.word	0x0002d2b8
    d910:	.word	0x000088a1
    d914:	.word	0x00008890
    d918:	.word	0x00008901
    d91c:	.word	0x000088dc

0000d920 <rb_get_random>:
    d920:	push	{r4, r5, fp, lr}
    d924:	add	fp, sp, #8
    d928:	mov	r4, r1
    d92c:	mov	r5, r0
    d930:	bl	4d38 <ERR_get_error@plt>
    d934:	cmp	r0, #0
    d938:	bne	d930 <rb_get_random+0x10>
    d93c:	mov	r0, r5
    d940:	mov	r1, r4
    d944:	bl	53e0 <RAND_bytes@plt>
    d948:	mov	r1, r0
    d94c:	mov	r0, #1
    d950:	cmp	r1, #1
    d954:	popeq	{r4, r5, fp, pc}
    d958:	mov	r0, #0
    d95c:	mov	r4, r0
    d960:	bl	4d38 <ERR_get_error@plt>
    d964:	cmp	r0, #0
    d968:	bne	d95c <rb_get_random+0x3c>
    d96c:	ldr	r5, [pc, #48]	; d9a4 <rb_get_random+0x84>
    d970:	mov	r0, r4
    d974:	mov	r2, #512	; 0x200
    d978:	add	r5, pc, r5
    d97c:	mov	r1, r5
    d980:	bl	4ec4 <ERR_error_string_n@plt>
    d984:	ldr	r0, [pc, #28]	; d9a8 <rb_get_random+0x88>
    d988:	ldr	r1, [pc, #28]	; d9ac <rb_get_random+0x8c>
    d98c:	mov	r2, r5
    d990:	add	r0, pc, r0
    d994:	add	r1, pc, r1
    d998:	bl	5224 <rb_lib_log@plt>
    d99c:	mov	r0, #0
    d9a0:	pop	{r4, r5, fp, pc}
    d9a4:	.word	0x0002d214
    d9a8:	.word	0x00008826
    d9ac:	.word	0x00008835

0000d9b0 <rb_get_ssl_strerror>:
    d9b0:	push	{r4, sl, fp, lr}
    d9b4:	add	fp, sp, #8
    d9b8:	ldr	r0, [r0, #64]	; 0x40
    d9bc:	ldr	r4, [pc, #20]	; d9d8 <rb_get_ssl_strerror+0x28>
    d9c0:	mov	r2, #512	; 0x200
    d9c4:	add	r4, pc, r4
    d9c8:	mov	r1, r4
    d9cc:	bl	4ec4 <ERR_error_string_n@plt>
    d9d0:	mov	r0, r4
    d9d4:	pop	{r4, sl, fp, pc}
    d9d8:	.word	0x0002d1c8

0000d9dc <rb_get_ssl_certfp>:
    d9dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    d9e0:	add	fp, sp, #24
    d9e4:	mov	r4, #0
    d9e8:	cmp	r0, #0
    d9ec:	beq	da5c <rb_get_ssl_certfp+0x80>
    d9f0:	mov	r5, r0
    d9f4:	ldr	r0, [r0, #56]	; 0x38
    d9f8:	cmp	r0, #0
    d9fc:	beq	da5c <rb_get_ssl_certfp+0x80>
    da00:	mov	r8, r2
    da04:	mov	r6, r1
    da08:	bl	5320 <SSL_get_peer_certificate@plt>
    da0c:	cmp	r0, #0
    da10:	beq	da5c <rb_get_ssl_certfp+0x80>
    da14:	mov	r7, r0
    da18:	ldr	r0, [r5, #56]	; 0x38
    da1c:	bl	5344 <SSL_get_verify_result@plt>
    da20:	mov	r4, #0
    da24:	cmp	r0, #27
    da28:	bhi	da54 <rb_get_ssl_certfp+0x78>
    da2c:	movw	r2, #1
    da30:	mov	r1, #1
    da34:	movt	r2, #2108	; 0x83c
    da38:	tst	r2, r1, lsl r0
    da3c:	beq	da54 <rb_get_ssl_certfp+0x78>
    da40:	mov	r0, r7
    da44:	mov	r1, r6
    da48:	mov	r2, r8
    da4c:	bl	da64 <make_certfp>
    da50:	mov	r4, r0
    da54:	mov	r0, r7
    da58:	bl	5554 <X509_free@plt>
    da5c:	mov	r0, r4
    da60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000da64 <make_certfp>:
    da64:	push	{r4, r5, r6, sl, fp, lr}
    da68:	add	fp, sp, #16
    da6c:	sub	sp, sp, #8
    da70:	mov	r5, r0
    da74:	mov	r0, #0
    da78:	mov	r4, r1
    da7c:	cmp	r2, #1
    da80:	str	r0, [sp, #4]
    da84:	ble	dab8 <make_certfp+0x54>
    da88:	cmp	r2, #2
    da8c:	beq	dad8 <make_certfp+0x74>
    da90:	movw	r1, #4097	; 0x1001
    da94:	cmp	r2, r1
    da98:	beq	dae8 <make_certfp+0x84>
    da9c:	movw	r1, #4098	; 0x1002
    daa0:	cmp	r2, r1
    daa4:	bne	db98 <make_certfp+0x134>
    daa8:	mov	r0, #64	; 0x40
    daac:	str	r0, [sp, #4]
    dab0:	bl	5494 <EVP_sha512@plt>
    dab4:	b	daf4 <make_certfp+0x90>
    dab8:	cmp	r2, #0
    dabc:	beq	db10 <make_certfp+0xac>
    dac0:	cmp	r2, #1
    dac4:	bne	db98 <make_certfp+0x134>
    dac8:	mov	r0, #32
    dacc:	str	r0, [sp, #4]
    dad0:	bl	54c4 <EVP_sha256@plt>
    dad4:	b	db1c <make_certfp+0xb8>
    dad8:	mov	r0, #64	; 0x40
    dadc:	str	r0, [sp, #4]
    dae0:	bl	5494 <EVP_sha512@plt>
    dae4:	b	db1c <make_certfp+0xb8>
    dae8:	mov	r0, #32
    daec:	str	r0, [sp, #4]
    daf0:	bl	54c4 <EVP_sha256@plt>
    daf4:	mov	r6, r0
    daf8:	mov	r0, r5
    dafc:	bl	4e64 <X509_get_X509_PUBKEY@plt>
    db00:	mov	r5, r0
    db04:	ldr	r0, [pc, #152]	; dba4 <make_certfp+0x140>
    db08:	ldr	r0, [pc, r0]
    db0c:	b	db28 <make_certfp+0xc4>
    db10:	mov	r0, #20
    db14:	str	r0, [sp, #4]
    db18:	bl	51f4 <EVP_sha1@plt>
    db1c:	mov	r6, r0
    db20:	ldr	r0, [pc, #120]	; dba0 <make_certfp+0x13c>
    db24:	ldr	r0, [pc, r0]
    db28:	add	r1, sp, #4
    db2c:	mov	r2, r5
    db30:	mov	r3, r4
    db34:	str	r1, [sp]
    db38:	mov	r1, r6
    db3c:	bl	5308 <ASN1_item_digest@plt>
    db40:	cmp	r0, #1
    db44:	bne	db50 <make_certfp+0xec>
    db48:	ldr	r0, [sp, #4]
    db4c:	b	db98 <make_certfp+0x134>
    db50:	mov	r0, #0
    db54:	mov	r4, r0
    db58:	bl	4d38 <ERR_get_error@plt>
    db5c:	cmp	r0, #0
    db60:	bne	db54 <make_certfp+0xf0>
    db64:	ldr	r5, [pc, #60]	; dba8 <make_certfp+0x144>
    db68:	mov	r0, r4
    db6c:	mov	r2, #512	; 0x200
    db70:	add	r5, pc, r5
    db74:	mov	r1, r5
    db78:	bl	4ec4 <ERR_error_string_n@plt>
    db7c:	ldr	r0, [pc, #40]	; dbac <make_certfp+0x148>
    db80:	ldr	r1, [pc, #40]	; dbb0 <make_certfp+0x14c>
    db84:	mov	r2, r5
    db88:	add	r0, pc, r0
    db8c:	add	r1, pc, r1
    db90:	bl	5224 <rb_lib_log@plt>
    db94:	mov	r0, #0
    db98:	sub	sp, fp, #16
    db9c:	pop	{r4, r5, r6, sl, fp, pc}
    dba0:	.word	0x0001a8c4
    dba4:	.word	0x0001a8ec
    dba8:	.word	0x0002d01c
    dbac:	.word	0x000086c9
    dbb0:	.word	0x000086de

0000dbb4 <rb_get_ssl_certfp_file>:
    dbb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    dbb8:	add	fp, sp, #24
    dbbc:	mov	r7, r1
    dbc0:	ldr	r1, [pc, #100]	; dc2c <rb_get_ssl_certfp_file+0x78>
    dbc4:	mov	r8, r2
    dbc8:	add	r1, pc, r1
    dbcc:	bl	4f24 <fopen@plt>
    dbd0:	cmp	r0, #0
    dbd4:	beq	dc20 <rb_get_ssl_certfp_file+0x6c>
    dbd8:	mov	r1, #0
    dbdc:	mov	r2, #0
    dbe0:	mov	r3, #0
    dbe4:	mov	r4, r0
    dbe8:	mov	r6, #0
    dbec:	bl	5110 <PEM_read_X509@plt>
    dbf0:	cmp	r0, #0
    dbf4:	beq	dc14 <rb_get_ssl_certfp_file+0x60>
    dbf8:	mov	r1, r7
    dbfc:	mov	r2, r8
    dc00:	mov	r5, r0
    dc04:	bl	da64 <make_certfp>
    dc08:	mov	r6, r0
    dc0c:	mov	r0, r5
    dc10:	bl	5554 <X509_free@plt>
    dc14:	mov	r0, r4
    dc18:	bl	4ea0 <fclose@plt>
    dc1c:	b	dc24 <rb_get_ssl_certfp_file+0x70>
    dc20:	mvn	r6, #0
    dc24:	mov	r0, r6
    dc28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    dc2c:	.word	0x00008a2c

0000dc30 <rb_get_ssl_info>:
    dc30:	push	{r4, r5, r6, r7, fp, lr}
    dc34:	add	fp, sp, #16
    dc38:	sub	sp, sp, #16
    dc3c:	movw	r4, #4175	; 0x104f
    dc40:	mov	r5, r1
    dc44:	mov	r6, r0
    dc48:	movt	r4, #4112	; 0x1010
    dc4c:	bl	4fe4 <OpenSSL_version_num@plt>
    dc50:	cmp	r0, r4
    dc54:	bne	dc70 <rb_get_ssl_info+0x40>
    dc58:	ldr	r0, [pc, #80]	; dcb0 <rb_get_ssl_info+0x80>
    dc5c:	add	r0, pc, r0
    dc60:	str	r0, [sp]
    dc64:	ldr	r2, [pc, #72]	; dcb4 <rb_get_ssl_info+0x84>
    dc68:	add	r2, pc, r2
    dc6c:	b	dc98 <rb_get_ssl_info+0x68>
    dc70:	bl	4fe4 <OpenSSL_version_num@plt>
    dc74:	mov	r7, r0
    dc78:	mov	r0, #0
    dc7c:	bl	5584 <OpenSSL_version@plt>
    dc80:	ldr	r1, [pc, #48]	; dcb8 <rb_get_ssl_info+0x88>
    dc84:	add	r1, pc, r1
    dc88:	stm	sp, {r1, r7}
    dc8c:	str	r0, [sp, #8]
    dc90:	ldr	r2, [pc, #36]	; dcbc <rb_get_ssl_info+0x8c>
    dc94:	add	r2, pc, r2
    dc98:	mov	r0, r6
    dc9c:	mov	r1, r5
    dca0:	mov	r3, r4
    dca4:	bl	54a0 <snprintf@plt>
    dca8:	sub	sp, fp, #16
    dcac:	pop	{r4, r5, r6, r7, fp, pc}
    dcb0:	.word	0x0000859f
    dcb4:	.word	0x0000856f
    dcb8:	.word	0x00008577
    dcbc:	.word	0x00008583

0000dcc0 <rb_ssl_get_cipher>:
    dcc0:	push	{r4, r5, r6, sl, fp, lr}
    dcc4:	add	fp, sp, #16
    dcc8:	sub	sp, sp, #8
    dccc:	mov	r4, #0
    dcd0:	cmp	r0, #0
    dcd4:	beq	dd20 <rb_ssl_get_cipher+0x60>
    dcd8:	mov	r5, r0
    dcdc:	ldr	r0, [r0, #56]	; 0x38
    dce0:	cmp	r0, #0
    dce4:	beq	dd20 <rb_ssl_get_cipher+0x60>
    dce8:	bl	55a8 <SSL_get_version@plt>
    dcec:	mov	r6, r0
    dcf0:	ldr	r0, [r5, #56]	; 0x38
    dcf4:	bl	4e4c <SSL_get_current_cipher@plt>
    dcf8:	bl	4fcc <SSL_CIPHER_get_name@plt>
    dcfc:	str	r0, [sp]
    dd00:	mov	r1, #512	; 0x200
    dd04:	mov	r3, r6
    dd08:	ldr	r4, [pc, #28]	; dd2c <rb_ssl_get_cipher+0x6c>
    dd0c:	ldr	r2, [pc, #28]	; dd30 <rb_ssl_get_cipher+0x70>
    dd10:	add	r4, pc, r4
    dd14:	add	r2, pc, r2
    dd18:	mov	r0, r4
    dd1c:	bl	54a0 <snprintf@plt>
    dd20:	mov	r0, r4
    dd24:	sub	sp, fp, #16
    dd28:	pop	{r4, r5, r6, sl, fp, pc}
    dd2c:	.word	0x0002cc7c
    dd30:	.word	0x00008536

0000dd34 <rb_ssl_read>:
    dd34:	push	{fp, lr}
    dd38:	mov	fp, sp
    dd3c:	sub	sp, sp, #8
    dd40:	mov	r3, r1
    dd44:	mov	r1, r0
    dd48:	str	r2, [sp]
    dd4c:	mov	r0, #0
    dd50:	mov	r2, r3
    dd54:	mov	r3, #0
    dd58:	bl	dd64 <rb_ssl_read_or_write>
    dd5c:	mov	sp, fp
    dd60:	pop	{fp, pc}

0000dd64 <rb_ssl_read_or_write>:
    dd64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    dd68:	add	fp, sp, #24
    dd6c:	ldr	r5, [fp, #8]
    dd70:	mov	r6, r3
    dd74:	mov	r7, r2
    dd78:	mov	r8, r1
    dd7c:	mov	r4, r0
    dd80:	bl	4d38 <ERR_get_error@plt>
    dd84:	cmp	r0, #0
    dd88:	bne	dd80 <rb_ssl_read_or_write+0x1c>
    dd8c:	ldr	r0, [r8, #56]	; 0x38
    dd90:	cmp	r4, #0
    dd94:	beq	dda8 <rb_ssl_read_or_write+0x44>
    dd98:	mov	r1, r6
    dd9c:	mov	r2, r5
    dda0:	bl	4f0c <SSL_write@plt>
    dda4:	b	ddb4 <rb_ssl_read_or_write+0x50>
    dda8:	mov	r1, r7
    ddac:	mov	r2, r5
    ddb0:	bl	5080 <SSL_read@plt>
    ddb4:	mov	r1, r0
    ddb8:	cmn	r0, #1
    ddbc:	ble	ddc8 <rb_ssl_read_or_write+0x64>
    ddc0:	mov	r0, r1
    ddc4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    ddc8:	ldr	r0, [r8, #56]	; 0x38
    ddcc:	bl	559c <SSL_get_error@plt>
    ddd0:	sub	r0, r0, #2
    ddd4:	cmp	r0, #4
    ddd8:	bhi	de28 <rb_ssl_read_or_write+0xc4>
    dddc:	add	r2, pc, #8
    dde0:	mov	r1, #0
    dde4:	ldr	r0, [r2, r0, lsl #2]
    dde8:	add	pc, r2, r0
    ddec:	.word	0x00000014
    ddf0:	.word	0x00000028
    ddf4:	.word	0x0000003c
    ddf8:	.word	0x00000060
    ddfc:	.word	0xffffffd4
    de00:	bl	55e4 <__errno_location@plt>
    de04:	mov	r1, #11
    de08:	str	r1, [r0]
    de0c:	mvn	r1, #2
    de10:	b	ddc0 <rb_ssl_read_or_write+0x5c>
    de14:	bl	55e4 <__errno_location@plt>
    de18:	mov	r1, #11
    de1c:	str	r1, [r0]
    de20:	mvn	r1, #3
    de24:	b	ddc0 <rb_ssl_read_or_write+0x5c>
    de28:	mov	r0, #0
    de2c:	mov	r4, r0
    de30:	bl	4d38 <ERR_get_error@plt>
    de34:	cmp	r0, #0
    de38:	bne	de2c <rb_ssl_read_or_write+0xc8>
    de3c:	cmp	r4, #0
    de40:	str	r4, [r8, #64]	; 0x40
    de44:	bne	de6c <rb_ssl_read_or_write+0x108>
    de48:	b	de88 <rb_ssl_read_or_write+0x124>
    de4c:	mov	r0, #0
    de50:	mov	r4, r0
    de54:	bl	4d38 <ERR_get_error@plt>
    de58:	cmp	r0, #0
    de5c:	bne	de50 <rb_ssl_read_or_write+0xec>
    de60:	cmp	r4, #0
    de64:	beq	de80 <rb_ssl_read_or_write+0x11c>
    de68:	str	r4, [r8, #64]	; 0x40
    de6c:	bl	55e4 <__errno_location@plt>
    de70:	mov	r1, #5
    de74:	str	r1, [r0]
    de78:	mvn	r1, #1
    de7c:	b	ddc0 <rb_ssl_read_or_write+0x5c>
    de80:	mov	r0, #0
    de84:	str	r0, [r8, #64]	; 0x40
    de88:	mvn	r1, #0
    de8c:	b	ddc0 <rb_ssl_read_or_write+0x5c>

0000de90 <rb_ssl_write>:
    de90:	push	{fp, lr}
    de94:	mov	fp, sp
    de98:	sub	sp, sp, #8
    de9c:	mov	r3, r1
    dea0:	mov	r1, r0
    dea4:	str	r2, [sp]
    dea8:	mov	r0, #1
    deac:	mov	r2, #0
    deb0:	bl	dd64 <rb_ssl_read_or_write>
    deb4:	mov	sp, fp
    deb8:	pop	{fp, pc}

0000debc <rb_supports_ssl>:
    debc:	mov	r0, #1
    dec0:	bx	lr

0000dec4 <rb_ssl_handshake_count>:
    dec4:	ldr	r0, [r0, #60]	; 0x3c
    dec8:	bx	lr

0000decc <rb_ssl_clear_handshake_count>:
    decc:	mov	r1, #0
    ded0:	str	r1, [r0, #60]	; 0x3c
    ded4:	bx	lr

0000ded8 <rb_ssl_start_accepted>:
    ded8:	push	{r4, r5, r6, r7, fp, lr}
    dedc:	add	fp, sp, #16
    dee0:	mov	r4, r0
    dee4:	ldrb	r0, [r0, #17]
    dee8:	mov	r6, r1
    deec:	mov	r1, #144	; 0x90
    def0:	mov	r5, r3
    def4:	mov	r7, r2
    def8:	orr	r0, r0, #32
    defc:	strb	r0, [r4, #17]
    df00:	mov	r0, #1
    df04:	bl	4f00 <calloc@plt>
    df08:	cmp	r0, #0
    df0c:	beq	df5c <rb_ssl_start_accepted+0x84>
    df10:	mov	r1, #0
    df14:	mov	r2, #132	; 0x84
    df18:	str	r0, [r4, #52]	; 0x34
    df1c:	str	r7, [r0, #140]	; 0x8c
    df20:	str	r6, [r0, #132]	; 0x84
    df24:	bl	4f3c <memset@plt>
    df28:	ldr	r2, [pc, #48]	; df60 <rb_ssl_start_accepted+0x88>
    df2c:	mov	r0, r4
    df30:	mov	r1, r5
    df34:	mov	r3, #0
    df38:	add	r2, pc, r2
    df3c:	bl	4d20 <rb_settimeout@plt>
    df40:	mov	r0, r4
    df44:	mov	r1, #0
    df48:	bl	df98 <rb_ssl_init_fd>
    df4c:	mov	r0, r4
    df50:	mov	r1, #0
    df54:	pop	{r4, r5, r6, r7, fp, lr}
    df58:	b	e064 <rb_ssl_accept_common>
    df5c:	bl	5284 <rb_outofmemory@plt>
    df60:	.word	0x00000024

0000df64 <rb_ssl_timeout_cb>:
    df64:	push	{fp, lr}
    df68:	mov	fp, sp
    df6c:	sub	sp, sp, #8
    df70:	ldr	r1, [r0, #52]	; 0x34
    df74:	mov	r2, #0
    df78:	mov	r3, #0
    df7c:	ldr	ip, [r1, #132]	; 0x84
    df80:	ldr	r1, [r1, #140]	; 0x8c
    df84:	str	r1, [sp]
    df88:	mov	r1, #3
    df8c:	blx	ip
    df90:	mov	sp, fp
    df94:	pop	{fp, pc}

0000df98 <rb_ssl_init_fd>:
    df98:	push	{r4, r5, r6, sl, fp, lr}
    df9c:	add	fp, sp, #16
    dfa0:	mov	r5, r1
    dfa4:	mov	r4, r0
    dfa8:	bl	4d38 <ERR_get_error@plt>
    dfac:	cmp	r0, #0
    dfb0:	bne	dfa8 <rb_ssl_init_fd+0x10>
    dfb4:	ldr	r0, [pc, #152]	; e054 <rb_ssl_init_fd+0xbc>
    dfb8:	ldr	r0, [pc, r0]
    dfbc:	bl	5038 <SSL_new@plt>
    dfc0:	cmp	r0, #0
    dfc4:	str	r0, [r4, #56]	; 0x38
    dfc8:	beq	dfe4 <rb_ssl_init_fd+0x4c>
    dfcc:	cmp	r5, #1
    dfd0:	beq	e034 <rb_ssl_init_fd+0x9c>
    dfd4:	cmp	r5, #0
    dfd8:	bne	e038 <rb_ssl_init_fd+0xa0>
    dfdc:	bl	52cc <SSL_set_accept_state@plt>
    dfe0:	b	e038 <rb_ssl_init_fd+0xa0>
    dfe4:	mov	r0, #0
    dfe8:	mov	r5, r0
    dfec:	bl	4d38 <ERR_get_error@plt>
    dff0:	cmp	r0, #0
    dff4:	bne	dfe8 <rb_ssl_init_fd+0x50>
    dff8:	ldr	r6, [pc, #88]	; e058 <rb_ssl_init_fd+0xc0>
    dffc:	mov	r0, r5
    e000:	mov	r2, #512	; 0x200
    e004:	add	r6, pc, r6
    e008:	mov	r1, r6
    e00c:	bl	4ec4 <ERR_error_string_n@plt>
    e010:	ldr	r0, [pc, #68]	; e05c <rb_ssl_init_fd+0xc4>
    e014:	ldr	r1, [pc, #68]	; e060 <rb_ssl_init_fd+0xc8>
    e018:	mov	r2, r6
    e01c:	add	r0, pc, r0
    e020:	add	r1, pc, r1
    e024:	bl	5224 <rb_lib_log@plt>
    e028:	mov	r0, r4
    e02c:	pop	{r4, r5, r6, sl, fp, lr}
    e030:	b	5170 <rb_close@plt>
    e034:	bl	5458 <SSL_set_connect_state@plt>
    e038:	ldr	r5, [r4, #56]	; 0x38
    e03c:	mov	r0, r4
    e040:	bl	4e10 <rb_get_fd@plt>
    e044:	mov	r1, r0
    e048:	mov	r0, r5
    e04c:	pop	{r4, r5, r6, sl, fp, lr}
    e050:	b	4f78 <SSL_set_fd@plt>
    e054:	.word	0x0002c9d0
    e058:	.word	0x0002cb88
    e05c:	.word	0x0000825a
    e060:	.word	0x00008266

0000e064 <rb_ssl_accept_common>:
    e064:	push	{r4, r5, r6, sl, fp, lr}
    e068:	add	fp, sp, #16
    e06c:	sub	sp, sp, #8
    e070:	mov	r4, r0
    e074:	bl	4d38 <ERR_get_error@plt>
    e078:	cmp	r0, #0
    e07c:	bne	e074 <rb_ssl_accept_common+0x10>
    e080:	ldr	r0, [r4, #56]	; 0x38
    e084:	bl	50bc <SSL_do_handshake@plt>
    e088:	mov	r6, r0
    e08c:	ldr	r0, [r4, #56]	; 0x38
    e090:	mov	r1, r6
    e094:	bl	559c <SSL_get_error@plt>
    e098:	cmp	r6, #1
    e09c:	bne	e118 <rb_ssl_accept_common+0xb4>
    e0a0:	ldr	r0, [r4, #60]	; 0x3c
    e0a4:	mov	r1, #0
    e0a8:	mov	r2, #0
    e0ac:	mov	r3, #0
    e0b0:	mov	r6, #0
    e0b4:	add	r0, r0, #1
    e0b8:	str	r0, [r4, #60]	; 0x3c
    e0bc:	mov	r0, r4
    e0c0:	bl	4d20 <rb_settimeout@plt>
    e0c4:	mov	r0, r4
    e0c8:	mov	r1, #3
    e0cc:	mov	r2, #0
    e0d0:	mov	r3, #0
    e0d4:	bl	4dd4 <rb_setselect@plt>
    e0d8:	ldr	r5, [r4, #52]	; 0x34
    e0dc:	str	r6, [r4, #52]	; 0x34
    e0e0:	mov	r1, #0
    e0e4:	ldr	r0, [r5, #140]	; 0x8c
    e0e8:	ldr	r3, [r5, #128]	; 0x80
    e0ec:	ldr	r6, [r5, #132]	; 0x84
    e0f0:	mov	r2, r5
    e0f4:	str	r0, [sp]
    e0f8:	mov	r0, r4
    e0fc:	blx	r6
    e100:	cmp	r5, #0
    e104:	beq	e168 <rb_ssl_accept_common+0x104>
    e108:	mov	r0, r5
    e10c:	sub	sp, fp, #16
    e110:	pop	{r4, r5, r6, sl, fp, lr}
    e114:	b	4ffc <free@plt>
    e118:	mov	r5, r0
    e11c:	cmn	r6, #1
    e120:	cmpeq	r5, #2
    e124:	beq	e170 <rb_ssl_accept_common+0x10c>
    e128:	cmn	r6, #1
    e12c:	cmpeq	r5, #3
    e130:	beq	e184 <rb_ssl_accept_common+0x120>
    e134:	bl	55e4 <__errno_location@plt>
    e138:	mov	r1, #5
    e13c:	mov	r2, #0
    e140:	mov	r3, #0
    e144:	str	r1, [r0]
    e148:	str	r5, [r4, #64]	; 0x40
    e14c:	mov	r1, #6
    e150:	ldr	r0, [r4, #52]	; 0x34
    e154:	ldr	r6, [r0, #132]	; 0x84
    e158:	ldr	r0, [r0, #140]	; 0x8c
    e15c:	str	r0, [sp]
    e160:	mov	r0, r4
    e164:	blx	r6
    e168:	sub	sp, fp, #16
    e16c:	pop	{r4, r5, r6, sl, fp, pc}
    e170:	ldr	r2, [pc, #44]	; e1a4 <rb_ssl_accept_common+0x140>
    e174:	mov	r0, r4
    e178:	mov	r1, #1
    e17c:	add	r2, pc, r2
    e180:	b	e194 <rb_ssl_accept_common+0x130>
    e184:	ldr	r2, [pc, #28]	; e1a8 <rb_ssl_accept_common+0x144>
    e188:	mov	r0, r4
    e18c:	mov	r1, #2
    e190:	add	r2, pc, r2
    e194:	mov	r3, #0
    e198:	sub	sp, fp, #16
    e19c:	pop	{r4, r5, r6, sl, fp, lr}
    e1a0:	b	4dd4 <rb_setselect@plt>
    e1a4:	.word	0xfffffee0
    e1a8:	.word	0xfffffecc

0000e1ac <rb_ssl_accept_setup>:
    e1ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    e1b0:	add	fp, sp, #24
    e1b4:	mov	r6, r0
    e1b8:	ldrb	r0, [r1, #17]
    e1bc:	mov	r4, r1
    e1c0:	mov	r5, r3
    e1c4:	mov	r8, r2
    e1c8:	orr	r0, r0, #32
    e1cc:	strb	r0, [r1, #17]
    e1d0:	mov	r0, #1
    e1d4:	mov	r1, #144	; 0x90
    e1d8:	bl	4f00 <calloc@plt>
    e1dc:	cmp	r0, #0
    e1e0:	beq	e260 <rb_ssl_accept_setup+0xb4>
    e1e4:	str	r0, [r4, #52]	; 0x34
    e1e8:	mov	r7, r0
    e1ec:	cmp	r5, #127	; 0x7f
    e1f0:	rsb	r2, r5, #128	; 0x80
    e1f4:	ldr	r0, [r6, #52]	; 0x34
    e1f8:	movwhi	r2, #0
    e1fc:	ldr	r1, [r0, #132]	; 0x84
    e200:	str	r1, [r7, #132]	; 0x84
    e204:	mov	r1, #0
    e208:	ldr	r0, [r0, #140]	; 0x8c
    e20c:	str	r5, [r7, #128]	; 0x80
    e210:	str	r0, [r7, #140]	; 0x8c
    e214:	add	r0, r7, r5
    e218:	bl	4f3c <memset@plt>
    e21c:	mov	r0, r7
    e220:	mov	r1, r8
    e224:	mov	r2, r5
    e228:	bl	5104 <memcpy@plt>
    e22c:	ldr	r2, [pc, #48]	; e264 <rb_ssl_accept_setup+0xb8>
    e230:	mov	r0, r4
    e234:	mov	r1, #10
    e238:	mov	r3, #0
    e23c:	add	r2, pc, r2
    e240:	bl	4d20 <rb_settimeout@plt>
    e244:	mov	r0, r4
    e248:	mov	r1, #0
    e24c:	bl	df98 <rb_ssl_init_fd>
    e250:	mov	r0, r4
    e254:	mov	r1, #0
    e258:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    e25c:	b	e064 <rb_ssl_accept_common>
    e260:	bl	5284 <rb_outofmemory@plt>
    e264:	.word	0xfffffd20

0000e268 <rb_ssl_listen>:
    e268:	push	{r4, sl, fp, lr}
    e26c:	add	fp, sp, #8
    e270:	mov	r4, r0
    e274:	bl	54e8 <rb_listen@plt>
    e278:	mov	r1, #52	; 0x34
    e27c:	strb	r1, [r4, #17]
    e280:	pop	{r4, sl, fp, pc}

0000e284 <rb_connect_tcp_ssl>:
    e284:	push	{r4, r5, r6, r7, fp, lr}
    e288:	add	fp, sp, #16
    e28c:	sub	sp, sp, #8
    e290:	cmp	r0, #0
    e294:	beq	e2ec <rb_connect_tcp_ssl+0x68>
    e298:	mov	r5, r1
    e29c:	mov	r6, r0
    e2a0:	mov	r0, #1
    e2a4:	mov	r1, #12
    e2a8:	mov	r7, r3
    e2ac:	mov	r4, r2
    e2b0:	bl	4f00 <calloc@plt>
    e2b4:	cmp	r0, #0
    e2b8:	beq	e2f4 <rb_connect_tcp_ssl+0x70>
    e2bc:	ldr	r1, [fp, #12]
    e2c0:	ldr	r2, [fp, #8]
    e2c4:	str	r7, [r0]
    e2c8:	stm	sp, {r0, r1}
    e2cc:	str	r2, [r0, #4]
    e2d0:	str	r1, [r0, #8]
    e2d4:	mov	r0, r6
    e2d8:	mov	r1, r5
    e2dc:	mov	r2, r4
    e2e0:	ldr	r3, [pc, #16]	; e2f8 <rb_connect_tcp_ssl+0x74>
    e2e4:	add	r3, pc, r3
    e2e8:	bl	4d5c <rb_connect_tcp@plt>
    e2ec:	sub	sp, fp, #16
    e2f0:	pop	{r4, r5, r6, r7, fp, pc}
    e2f4:	bl	5284 <rb_outofmemory@plt>
    e2f8:	.word	0x00000010

0000e2fc <rb_ssl_tryconn>:
    e2fc:	push	{r4, r5, fp, lr}
    e300:	add	fp, sp, #8
    e304:	mov	r4, r2
    e308:	mov	r5, r0
    e30c:	cmp	r1, #0
    e310:	beq	e324 <rb_ssl_tryconn+0x28>
    e314:	mov	r0, r5
    e318:	mov	r2, r4
    e31c:	pop	{r4, r5, fp, lr}
    e320:	b	e510 <rb_ssl_connect_realcb>
    e324:	ldrb	r0, [r5, #17]
    e328:	mov	r3, r4
    e32c:	orr	r0, r0, #32
    e330:	strb	r0, [r5, #17]
    e334:	mov	r0, r5
    e338:	ldr	r1, [r4, #8]
    e33c:	ldr	r2, [pc, #32]	; e364 <rb_ssl_tryconn+0x68>
    e340:	add	r2, pc, r2
    e344:	bl	4d20 <rb_settimeout@plt>
    e348:	mov	r0, r5
    e34c:	mov	r1, #1
    e350:	bl	df98 <rb_ssl_init_fd>
    e354:	mov	r0, r5
    e358:	mov	r1, r4
    e35c:	pop	{r4, r5, fp, lr}
    e360:	b	e41c <rb_ssl_connect_common>
    e364:	.word	0x000000c8

0000e368 <rb_ssl_start_connected>:
    e368:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    e36c:	add	fp, sp, #24
    e370:	cmp	r0, #0
    e374:	beq	e404 <rb_ssl_start_connected+0x9c>
    e378:	mov	r5, r1
    e37c:	mov	r4, r0
    e380:	mov	r0, #1
    e384:	mov	r1, #12
    e388:	mov	r8, r3
    e38c:	mov	r7, r2
    e390:	bl	4f00 <calloc@plt>
    e394:	cmp	r0, #0
    e398:	beq	e408 <rb_ssl_start_connected+0xa0>
    e39c:	mov	r6, r0
    e3a0:	stm	r0, {r5, r7, r8}
    e3a4:	mov	r0, #1
    e3a8:	mov	r1, #268	; 0x10c
    e3ac:	bl	4f00 <calloc@plt>
    e3b0:	cmp	r0, #0
    e3b4:	beq	e408 <rb_ssl_start_connected+0xa0>
    e3b8:	str	r0, [r4, #48]	; 0x30
    e3bc:	str	r5, [r0, #260]	; 0x104
    e3c0:	str	r7, [r0, #264]	; 0x108
    e3c4:	mov	r1, r8
    e3c8:	mov	r3, r6
    e3cc:	ldrb	r0, [r4, #17]
    e3d0:	orr	r0, r0, #32
    e3d4:	strb	r0, [r4, #17]
    e3d8:	mov	r0, r4
    e3dc:	ldr	r2, [pc, #40]	; e40c <rb_ssl_start_connected+0xa4>
    e3e0:	add	r2, pc, r2
    e3e4:	bl	4d20 <rb_settimeout@plt>
    e3e8:	mov	r0, r4
    e3ec:	mov	r1, #1
    e3f0:	bl	df98 <rb_ssl_init_fd>
    e3f4:	mov	r0, r4
    e3f8:	mov	r1, r6
    e3fc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    e400:	b	e41c <rb_ssl_connect_common>
    e404:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    e408:	bl	5284 <rb_outofmemory@plt>
    e40c:	.word	0x00000028

0000e410 <rb_ssl_tryconn_timeout_cb>:
    e410:	mov	r2, r1
    e414:	mov	r1, #3
    e418:	b	e510 <rb_ssl_connect_realcb>

0000e41c <rb_ssl_connect_common>:
    e41c:	push	{r4, r5, r6, r7, fp, lr}
    e420:	add	fp, sp, #16
    e424:	mov	r4, r1
    e428:	mov	r5, r0
    e42c:	bl	4d38 <ERR_get_error@plt>
    e430:	cmp	r0, #0
    e434:	bne	e42c <rb_ssl_connect_common+0x10>
    e438:	ldr	r0, [r5, #56]	; 0x38
    e43c:	bl	50bc <SSL_do_handshake@plt>
    e440:	mov	r7, r0
    e444:	ldr	r0, [r5, #56]	; 0x38
    e448:	mov	r1, r7
    e44c:	bl	559c <SSL_get_error@plt>
    e450:	cmp	r7, #1
    e454:	bne	e498 <rb_ssl_connect_common+0x7c>
    e458:	ldr	r0, [r5, #60]	; 0x3c
    e45c:	mov	r1, #0
    e460:	mov	r2, #0
    e464:	mov	r3, #0
    e468:	add	r0, r0, #1
    e46c:	str	r0, [r5, #60]	; 0x3c
    e470:	mov	r0, r5
    e474:	bl	4d20 <rb_settimeout@plt>
    e478:	mov	r0, r5
    e47c:	mov	r1, #3
    e480:	mov	r2, #0
    e484:	mov	r3, #0
    e488:	bl	4dd4 <rb_setselect@plt>
    e48c:	mov	r0, r5
    e490:	mov	r1, #0
    e494:	b	e4cc <rb_ssl_connect_common+0xb0>
    e498:	mov	r6, r0
    e49c:	cmn	r7, #1
    e4a0:	cmpeq	r6, #2
    e4a4:	beq	e4d8 <rb_ssl_connect_common+0xbc>
    e4a8:	cmn	r7, #1
    e4ac:	cmpeq	r6, #3
    e4b0:	beq	e4ec <rb_ssl_connect_common+0xd0>
    e4b4:	bl	55e4 <__errno_location@plt>
    e4b8:	mov	r1, #5
    e4bc:	str	r1, [r0]
    e4c0:	mov	r0, r5
    e4c4:	mov	r1, #6
    e4c8:	str	r6, [r5, #64]	; 0x40
    e4cc:	mov	r2, r4
    e4d0:	pop	{r4, r5, r6, r7, fp, lr}
    e4d4:	b	e510 <rb_ssl_connect_realcb>
    e4d8:	ldr	r2, [pc, #40]	; e508 <rb_ssl_connect_common+0xec>
    e4dc:	mov	r0, r5
    e4e0:	mov	r1, #1
    e4e4:	add	r2, pc, r2
    e4e8:	b	e4fc <rb_ssl_connect_common+0xe0>
    e4ec:	ldr	r2, [pc, #24]	; e50c <rb_ssl_connect_common+0xf0>
    e4f0:	mov	r0, r5
    e4f4:	mov	r1, #2
    e4f8:	add	r2, pc, r2
    e4fc:	mov	r3, r4
    e500:	pop	{r4, r5, r6, r7, fp, lr}
    e504:	b	4dd4 <rb_setselect@plt>
    e508:	.word	0xffffff30
    e50c:	.word	0xffffff1c

0000e510 <rb_ssl_connect_realcb>:
    e510:	push	{r4, sl, fp, lr}
    e514:	add	fp, sp, #8
    e518:	mov	r4, r2
    e51c:	ldr	r2, [r0, #48]	; 0x30
    e520:	ldr	r3, [r4]
    e524:	str	r3, [r2, #260]	; 0x104
    e528:	ldr	r3, [r4, #4]
    e52c:	str	r3, [r2, #264]	; 0x108
    e530:	bl	afbc <rb_connect_callback>
    e534:	cmp	r4, #0
    e538:	beq	e548 <rb_ssl_connect_realcb+0x38>
    e53c:	mov	r0, r4
    e540:	pop	{r4, sl, fp, lr}
    e544:	b	4ffc <free@plt>
    e548:	pop	{r4, sl, fp, pc}

0000e54c <rb_event_add>:
    e54c:	push	{r4, r5, r6, sl, fp, lr}
    e550:	add	fp, sp, #16
    e554:	sub	sp, sp, #8
    e558:	mov	r4, r2
    e55c:	mov	r5, r1
    e560:	mov	r6, r0
    e564:	cmp	r3, #0
    e568:	ble	e588 <rb_event_add+0x3c>
    e56c:	mov	r0, r6
    e570:	mov	r1, r5
    e574:	mov	r2, r4
    e578:	str	r3, [sp]
    e57c:	bl	e5a8 <rb_event_add_common>
    e580:	sub	sp, fp, #16
    e584:	pop	{r4, r5, r6, sl, fp, pc}
    e588:	ldr	r0, [pc, #20]	; e5a4 <rb_event_add+0x58>
    e58c:	mov	r1, r6
    e590:	mov	r2, r3
    e594:	add	r0, pc, r0
    e598:	bl	5224 <rb_lib_log@plt>
    e59c:	mov	r3, #1
    e5a0:	b	e56c <rb_event_add+0x20>
    e5a4:	.word	0x00007e91

0000e5a8 <rb_event_add_common>:
    e5a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    e5ac:	add	fp, sp, #24
    e5b0:	mov	r6, r1
    e5b4:	mov	r7, r0
    e5b8:	mov	r0, #1
    e5bc:	mov	r1, #48	; 0x30
    e5c0:	mov	r4, r3
    e5c4:	mov	r8, r2
    e5c8:	bl	4f00 <calloc@plt>
    e5cc:	cmp	r0, #0
    e5d0:	beq	e6ac <rb_event_add_common+0x104>
    e5d4:	mov	r5, r0
    e5d8:	str	r6, [r0, #12]
    e5dc:	mov	r0, #33	; 0x21
    e5e0:	bl	52a8 <malloc@plt>
    e5e4:	cmp	r0, #0
    e5e8:	beq	e6ac <rb_event_add_common+0x104>
    e5ec:	ldr	r9, [fp, #8]
    e5f0:	mov	r1, r7
    e5f4:	mov	r2, #33	; 0x21
    e5f8:	mov	r6, r0
    e5fc:	bl	4fb4 <rb_strlcpy@plt>
    e600:	str	r8, [r5, #16]
    e604:	str	r6, [r5, #20]
    e608:	bl	50ec <rb_current_time@plt>
    e60c:	mov	r1, #0
    e610:	add	r0, r0, r4
    e614:	str	r1, [r5, #44]	; 0x2c
    e618:	str	r9, [r5, #24]
    e61c:	str	r0, [r5, #28]
    e620:	str	r4, [r5, #32]
    e624:	ldr	r1, [pc, #132]	; e6b0 <rb_event_add_common+0x108>
    e628:	ldr	r1, [pc, r1]
    e62c:	cmp	r0, r1
    e630:	blt	e63c <rb_event_add_common+0x94>
    e634:	cmn	r1, #1
    e638:	bne	e648 <rb_event_add_common+0xa0>
    e63c:	ldr	r1, [pc, #112]	; e6b4 <rb_event_add_common+0x10c>
    e640:	add	r1, pc, r1
    e644:	str	r0, [r1]
    e648:	ldr	r1, [pc, #104]	; e6b8 <rb_event_add_common+0x110>
    e64c:	mov	r0, #0
    e650:	ldr	r1, [pc, r1]
    e654:	str	r5, [r5]
    e658:	stmib	r5, {r0, r1}
    e65c:	ldr	r0, [pc, #88]	; e6bc <rb_event_add_common+0x114>
    e660:	cmp	r1, #0
    e664:	add	r0, pc, r0
    e668:	beq	e678 <rb_event_add_common+0xd0>
    e66c:	add	r1, r1, #4
    e670:	str	r5, [r1]
    e674:	b	e688 <rb_event_add_common+0xe0>
    e678:	mov	r1, r0
    e67c:	ldr	r2, [r1, #4]!
    e680:	cmp	r2, #0
    e684:	streq	r5, [r1]
    e688:	str	r5, [r0]
    e68c:	ldr	r1, [r0, #8]
    e690:	add	r1, r1, #1
    e694:	str	r1, [r0, #8]
    e698:	mov	r0, r5
    e69c:	mov	r1, r4
    e6a0:	bl	c470 <rb_io_sched_event>
    e6a4:	mov	r0, r5
    e6a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    e6ac:	bl	5284 <rb_outofmemory@plt>
    e6b0:	.word	0x00019e3c
    e6b4:	.word	0x00019e24
    e6b8:	.word	0x0002c760
    e6bc:	.word	0x0002c74c

0000e6c0 <rb_event_addonce>:
    e6c0:	push	{r4, r5, r6, sl, fp, lr}
    e6c4:	add	fp, sp, #16
    e6c8:	sub	sp, sp, #8
    e6cc:	mov	r4, r2
    e6d0:	mov	r5, r1
    e6d4:	mov	r6, r0
    e6d8:	cmp	r3, #0
    e6dc:	ble	e700 <rb_event_addonce+0x40>
    e6e0:	mov	r0, #0
    e6e4:	mov	r1, r5
    e6e8:	mov	r2, r4
    e6ec:	str	r0, [sp]
    e6f0:	mov	r0, r6
    e6f4:	bl	e5a8 <rb_event_add_common>
    e6f8:	sub	sp, fp, #16
    e6fc:	pop	{r4, r5, r6, sl, fp, pc}
    e700:	ldr	r0, [pc, #20]	; e71c <rb_event_addonce+0x5c>
    e704:	mov	r1, r6
    e708:	mov	r2, r3
    e70c:	add	r0, pc, r0
    e710:	bl	5224 <rb_lib_log@plt>
    e714:	mov	r3, #1
    e718:	b	e6e0 <rb_event_addonce+0x20>
    e71c:	.word	0x00007d5d

0000e720 <rb_event_delete>:
    e720:	cmp	r0, #0
    e724:	bxeq	lr
    e728:	mov	r1, #1
    e72c:	str	r1, [r0, #44]	; 0x2c
    e730:	b	c4dc <rb_io_unsched_event>

0000e734 <rb_event_find_delete>:
    e734:	ldr	r3, [pc, #60]	; e778 <rb_event_find_delete+0x44>
    e738:	ldr	r3, [pc, r3]
    e73c:	cmp	r3, #0
    e740:	bxeq	lr
    e744:	ldr	ip, [r3]
    e748:	ldr	r2, [ip, #12]
    e74c:	cmp	r2, r0
    e750:	bne	e760 <rb_event_find_delete+0x2c>
    e754:	ldr	r2, [ip, #16]
    e758:	cmp	r2, r1
    e75c:	beq	e768 <rb_event_find_delete+0x34>
    e760:	ldr	r3, [r3, #8]
    e764:	b	e73c <rb_event_find_delete+0x8>
    e768:	mov	r0, #1
    e76c:	str	r0, [ip, #44]	; 0x2c
    e770:	mov	r0, ip
    e774:	b	c4dc <rb_io_unsched_event>
    e778:	.word	0x0002c678

0000e77c <rb_event_addish>:
    e77c:	push	{r4, r5, r6, r7, fp, lr}
    e780:	add	fp, sp, #16
    e784:	sub	sp, sp, #8
    e788:	mov	r6, r3
    e78c:	cmp	r3, #0
    e790:	mov	r4, r2
    e794:	mov	r5, r1
    e798:	mov	r7, r0
    e79c:	rsbmi	r6, r6, #0
    e7a0:	cmp	r6, #2
    e7a4:	rsbgt	r6, r6, #0
    e7a8:	cmn	r6, #1
    e7ac:	mov	r3, r6
    e7b0:	bgt	e800 <rb_event_addish+0x84>
    e7b4:	bl	5434 <rand@plt>
    e7b8:	movw	r1, #19923	; 0x4dd3
    e7bc:	movt	r1, #4194	; 0x1062
    e7c0:	smmul	r2, r0, r1
    e7c4:	asr	r3, r2, #6
    e7c8:	add	r2, r3, r2, lsr #31
    e7cc:	mov	r3, #1000	; 0x3e8
    e7d0:	mls	r0, r2, r3, r0
    e7d4:	mov	r2, #0
    e7d8:	movw	r3, #21846	; 0x5556
    e7dc:	sub	r2, r2, r6, lsl #1
    e7e0:	movt	r3, #21845	; 0x5555
    e7e4:	smmul	r2, r2, r3
    e7e8:	add	r2, r2, r2, lsr #31
    e7ec:	mul	r0, r0, r2
    e7f0:	smmul	r0, r0, r1
    e7f4:	asr	r1, r0, #6
    e7f8:	add	r0, r1, r0, lsr #31
    e7fc:	add	r3, r0, r2
    e800:	mov	r0, r7
    e804:	mov	r1, r5
    e808:	mov	r2, r4
    e80c:	str	r6, [sp]
    e810:	bl	e5a8 <rb_event_add_common>
    e814:	sub	sp, fp, #16
    e818:	pop	{r4, r5, r6, r7, fp, pc}

0000e81c <rb_run_one_event>:
    e81c:	push	{r4, r5, r6, sl, fp, lr}
    e820:	add	fp, sp, #16
    e824:	mov	r4, r0
    e828:	ldr	r1, [r0, #20]
    e82c:	ldr	r0, [pc, #196]	; e8f8 <rb_run_one_event+0xdc>
    e830:	mov	r2, #33	; 0x21
    e834:	add	r0, pc, r0
    e838:	bl	4fb4 <rb_strlcpy@plt>
    e83c:	ldr	r1, [r4, #12]
    e840:	ldr	r0, [r4, #16]
    e844:	blx	r1
    e848:	ldr	r0, [r4, #24]
    e84c:	cmp	r0, #0
    e850:	beq	e8e4 <rb_run_one_event+0xc8>
    e854:	bl	50ec <rb_current_time@plt>
    e858:	ldr	r6, [r4, #24]
    e85c:	mov	r5, r0
    e860:	cmn	r6, #1
    e864:	bgt	e8b4 <rb_run_one_event+0x98>
    e868:	bl	5434 <rand@plt>
    e86c:	movw	r1, #19923	; 0x4dd3
    e870:	movt	r1, #4194	; 0x1062
    e874:	smmul	r2, r0, r1
    e878:	asr	r3, r2, #6
    e87c:	add	r2, r3, r2, lsr #31
    e880:	mov	r3, #1000	; 0x3e8
    e884:	mls	r0, r2, r3, r0
    e888:	mov	r2, #0
    e88c:	movw	r3, #21846	; 0x5556
    e890:	sub	r2, r2, r6, lsl #1
    e894:	movt	r3, #21845	; 0x5555
    e898:	smmul	r2, r2, r3
    e89c:	add	r2, r2, r2, lsr #31
    e8a0:	mul	r0, r0, r2
    e8a4:	smmul	r0, r0, r1
    e8a8:	asr	r1, r0, #6
    e8ac:	add	r0, r1, r0, lsr #31
    e8b0:	add	r6, r0, r2
    e8b4:	add	r0, r6, r5
    e8b8:	str	r0, [r4, #28]
    e8bc:	ldr	r1, [pc, #56]	; e8fc <rb_run_one_event+0xe0>
    e8c0:	ldr	r1, [pc, r1]
    e8c4:	cmp	r0, r1
    e8c8:	blt	e8d4 <rb_run_one_event+0xb8>
    e8cc:	cmn	r1, #1
    e8d0:	popne	{r4, r5, r6, sl, fp, pc}
    e8d4:	ldr	r1, [pc, #36]	; e900 <rb_run_one_event+0xe4>
    e8d8:	add	r1, pc, r1
    e8dc:	str	r0, [r1]
    e8e0:	pop	{r4, r5, r6, sl, fp, pc}
    e8e4:	mov	r0, #1
    e8e8:	str	r0, [r4, #44]	; 0x2c
    e8ec:	mov	r0, r4
    e8f0:	pop	{r4, r5, r6, sl, fp, lr}
    e8f4:	b	c4dc <rb_io_unsched_event>
    e8f8:	.word	0x0002c558
    e8fc:	.word	0x00019ba4
    e900:	.word	0x00019b8c

0000e904 <rb_event_run>:
    e904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e908:	add	fp, sp, #28
    e90c:	sub	sp, sp, #4
    e910:	bl	c53c <rb_io_supports_event>
    e914:	cmp	r0, #0
    e918:	bne	ea90 <rb_event_run+0x18c>
    e91c:	ldr	r9, [pc, #372]	; ea98 <rb_event_run+0x194>
    e920:	mvn	r0, #0
    e924:	add	r9, pc, r9
    e928:	str	r0, [r9]
    e92c:	ldr	r4, [pc, #360]	; ea9c <rb_event_run+0x198>
    e930:	ldr	r4, [pc, r4]
    e934:	cmp	r4, #0
    e938:	beq	ea90 <rb_event_run+0x18c>
    e93c:	ldr	r7, [pc, #348]	; eaa0 <rb_event_run+0x19c>
    e940:	mov	sl, #0
    e944:	add	r7, pc, r7
    e948:	ldr	r5, [r4]
    e94c:	ldr	r4, [r4, #8]
    e950:	ldr	r0, [r5, #44]	; 0x2c
    e954:	cmp	r0, #0
    e958:	beq	e978 <rb_event_run+0x74>
    e95c:	ldr	r0, [r5, #8]
    e960:	ldr	r1, [r5, #4]
    e964:	cmp	r0, #0
    e968:	beq	e990 <rb_event_run+0x8c>
    e96c:	str	r1, [r0, #4]
    e970:	ldr	r1, [r5, #4]
    e974:	b	e994 <rb_event_run+0x90>
    e978:	ldr	r6, [r5, #28]
    e97c:	bl	50ec <rb_current_time@plt>
    e980:	cmp	r6, r0
    e984:	ble	e9d4 <rb_event_run+0xd0>
    e988:	ldr	r0, [r5, #28]
    e98c:	b	ea68 <rb_event_run+0x164>
    e990:	str	r1, [r7, #4]
    e994:	cmp	r1, #0
    e998:	mov	r2, r7
    e99c:	addne	r2, r1, #8
    e9a0:	str	r0, [r2]
    e9a4:	str	sl, [r5, #4]
    e9a8:	str	sl, [r5, #8]
    e9ac:	ldr	r0, [r7, #8]
    e9b0:	sub	r0, r0, #1
    e9b4:	str	r0, [r7, #8]
    e9b8:	ldr	r0, [r5, #20]
    e9bc:	cmp	r0, #0
    e9c0:	beq	e9c8 <rb_event_run+0xc4>
    e9c4:	bl	4ffc <free@plt>
    e9c8:	mov	r0, r5
    e9cc:	bl	4ffc <free@plt>
    e9d0:	b	ea88 <rb_event_run+0x184>
    e9d4:	ldr	r1, [r5, #20]
    e9d8:	ldr	r0, [pc, #196]	; eaa4 <rb_event_run+0x1a0>
    e9dc:	mov	r2, #33	; 0x21
    e9e0:	add	r0, pc, r0
    e9e4:	bl	4fb4 <rb_strlcpy@plt>
    e9e8:	ldr	r1, [r5, #12]
    e9ec:	ldr	r0, [r5, #16]
    e9f0:	blx	r1
    e9f4:	ldr	r0, [r5, #24]
    e9f8:	cmp	r0, #0
    e9fc:	beq	e95c <rb_event_run+0x58>
    ea00:	bl	50ec <rb_current_time@plt>
    ea04:	ldr	r8, [r5, #24]
    ea08:	mov	r6, r0
    ea0c:	cmn	r8, #1
    ea10:	bgt	ea60 <rb_event_run+0x15c>
    ea14:	bl	5434 <rand@plt>
    ea18:	movw	r1, #19923	; 0x4dd3
    ea1c:	movt	r1, #4194	; 0x1062
    ea20:	mov	r3, r1
    ea24:	smmul	r1, r0, r1
    ea28:	asr	r2, r1, #6
    ea2c:	add	r1, r2, r1, lsr #31
    ea30:	mov	r2, #1000	; 0x3e8
    ea34:	mls	r0, r1, r2, r0
    ea38:	movw	r2, #21846	; 0x5556
    ea3c:	sub	r1, sl, r8, lsl #1
    ea40:	movt	r2, #21845	; 0x5555
    ea44:	smmul	r1, r1, r2
    ea48:	add	r1, r1, r1, lsr #31
    ea4c:	mul	r0, r0, r1
    ea50:	smmul	r0, r0, r3
    ea54:	asr	r2, r0, #6
    ea58:	add	r0, r2, r0, lsr #31
    ea5c:	add	r8, r0, r1
    ea60:	add	r0, r8, r6
    ea64:	str	r0, [r5, #28]
    ea68:	ldr	r1, [pc, #56]	; eaa8 <rb_event_run+0x1a4>
    ea6c:	ldr	r1, [pc, r1]
    ea70:	cmp	r0, r1
    ea74:	blt	ea84 <rb_event_run+0x180>
    ea78:	cmn	r1, #1
    ea7c:	streq	r0, [r9]
    ea80:	b	ea88 <rb_event_run+0x184>
    ea84:	str	r0, [r9]
    ea88:	cmp	r4, #0
    ea8c:	bne	e948 <rb_event_run+0x44>
    ea90:	sub	sp, fp, #28
    ea94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea98:	.word	0x00019b40
    ea9c:	.word	0x0002c480
    eaa0:	.word	0x0002c46c
    eaa4:	.word	0x0002c3ac
    eaa8:	.word	0x000199f8

0000eaac <rb_event_io_register_all>:
    eaac:	push	{r4, sl, fp, lr}
    eab0:	add	fp, sp, #8
    eab4:	bl	c53c <rb_io_supports_event>
    eab8:	cmp	r0, #0
    eabc:	popeq	{r4, sl, fp, pc}
    eac0:	ldr	r4, [pc, #32]	; eae8 <rb_event_io_register_all+0x3c>
    eac4:	ldr	r4, [pc, r4]
    eac8:	cmp	r4, #0
    eacc:	beq	eae4 <rb_event_io_register_all+0x38>
    ead0:	ldr	r0, [r4]
    ead4:	ldr	r1, [r0, #32]
    ead8:	bl	c470 <rb_io_sched_event>
    eadc:	ldr	r4, [r4, #8]
    eae0:	b	eac8 <rb_event_io_register_all+0x1c>
    eae4:	pop	{r4, sl, fp, pc}
    eae8:	.word	0x0002c2ec

0000eaec <rb_event_init>:
    eaec:	ldr	r0, [pc, #16]	; eb04 <rb_event_init+0x18>
    eaf0:	ldr	r1, [pc, #16]	; eb08 <rb_event_init+0x1c>
    eaf4:	mov	r2, #33	; 0x21
    eaf8:	add	r0, pc, r0
    eafc:	add	r1, pc, r1
    eb00:	b	4fb4 <rb_strlcpy@plt>
    eb04:	.word	0x0002c294
    eb08:	.word	0x000079af

0000eb0c <rb_dump_events>:
    eb0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb10:	add	fp, sp, #28
    eb14:	sub	sp, sp, #524	; 0x20c
    eb18:	ldr	r2, [pc, #180]	; ebd4 <rb_dump_events+0xc8>
    eb1c:	ldr	r3, [pc, #180]	; ebd8 <rb_dump_events+0xcc>
    eb20:	add	r6, sp, #8
    eb24:	mov	r9, r1
    eb28:	mov	sl, r0
    eb2c:	mov	r1, #512	; 0x200
    eb30:	mov	r0, r6
    eb34:	add	r2, pc, r2
    eb38:	add	r3, pc, r3
    eb3c:	bl	54a0 <snprintf@plt>
    eb40:	mov	r0, r6
    eb44:	mov	r1, r9
    eb48:	blx	sl
    eb4c:	ldr	r1, [pc, #136]	; ebdc <rb_dump_events+0xd0>
    eb50:	mov	r0, r6
    eb54:	mov	r2, #512	; 0x200
    eb58:	add	r1, pc, r1
    eb5c:	bl	4fb4 <rb_strlcpy@plt>
    eb60:	mov	r0, r6
    eb64:	mov	r1, r9
    eb68:	blx	sl
    eb6c:	ldr	r4, [pc, #108]	; ebe0 <rb_dump_events+0xd4>
    eb70:	ldr	r4, [pc, r4]
    eb74:	cmp	r4, #0
    eb78:	beq	ebcc <rb_dump_events+0xc0>
    eb7c:	add	r6, sp, #8
    eb80:	ldr	r5, [r4]
    eb84:	ldr	r7, [r5, #20]
    eb88:	ldr	r8, [r5, #28]
    eb8c:	bl	50ec <rb_current_time@plt>
    eb90:	sub	r0, r8, r0
    eb94:	ldr	r1, [r5, #24]
    eb98:	mov	r3, r7
    eb9c:	stm	sp, {r0, r1}
    eba0:	mov	r0, r6
    eba4:	mov	r1, #512	; 0x200
    eba8:	ldr	r2, [pc, #52]	; ebe4 <rb_dump_events+0xd8>
    ebac:	add	r2, pc, r2
    ebb0:	bl	54a0 <snprintf@plt>
    ebb4:	mov	r0, r6
    ebb8:	mov	r1, r9
    ebbc:	blx	sl
    ebc0:	ldr	r4, [r4, #8]
    ebc4:	cmp	r4, #0
    ebc8:	bne	eb80 <rb_dump_events+0x74>
    ebcc:	sub	sp, fp, #28
    ebd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ebd4:	.word	0x0000797c
    ebd8:	.word	0x0002c254
    ebdc:	.word	0x0000796e
    ebe0:	.word	0x0002c240
    ebe4:	.word	0x00007946

0000ebe8 <rb_set_back_events>:
    ebe8:	ldr	r1, [pc, #36]	; ec14 <rb_set_back_events+0x2c>
    ebec:	ldr	r1, [pc, r1]
    ebf0:	cmp	r1, #0
    ebf4:	bxeq	lr
    ebf8:	ldr	r2, [r1]
    ebfc:	ldr	r3, [r2, #28]
    ec00:	subs	r3, r3, r0
    ec04:	movle	r3, #0
    ec08:	str	r3, [r2, #28]
    ec0c:	ldr	r1, [r1, #8]
    ec10:	b	ebf0 <rb_set_back_events+0x8>
    ec14:	.word	0x0002c1c4

0000ec18 <rb_event_update>:
    ec18:	push	{r4, r5, fp, lr}
    ec1c:	add	fp, sp, #8
    ec20:	cmp	r0, #0
    ec24:	beq	eca8 <rb_event_update+0x90>
    ec28:	mov	r5, r1
    ec2c:	mov	r4, r0
    ec30:	cmn	r1, #1
    ec34:	str	r1, [r0, #24]
    ec38:	bgt	ec88 <rb_event_update+0x70>
    ec3c:	bl	5434 <rand@plt>
    ec40:	movw	r1, #19923	; 0x4dd3
    ec44:	movt	r1, #4194	; 0x1062
    ec48:	smmul	r2, r0, r1
    ec4c:	asr	r3, r2, #6
    ec50:	add	r2, r3, r2, lsr #31
    ec54:	mov	r3, #1000	; 0x3e8
    ec58:	mls	r0, r2, r3, r0
    ec5c:	mov	r2, #0
    ec60:	movw	r3, #21846	; 0x5556
    ec64:	sub	r2, r2, r5, lsl #1
    ec68:	movt	r3, #21845	; 0x5555
    ec6c:	smmul	r2, r2, r3
    ec70:	add	r2, r2, r2, lsr #31
    ec74:	mul	r0, r0, r2
    ec78:	smmul	r0, r0, r1
    ec7c:	asr	r1, r0, #6
    ec80:	add	r0, r1, r0, lsr #31
    ec84:	add	r5, r0, r2
    ec88:	bl	50ec <rb_current_time@plt>
    ec8c:	ldr	r1, [r4, #28]
    ec90:	add	r0, r0, r5
    ec94:	cmp	r0, r1
    ec98:	popge	{r4, r5, fp, pc}
    ec9c:	bl	50ec <rb_current_time@plt>
    eca0:	add	r0, r0, r5
    eca4:	str	r0, [r4, #28]
    eca8:	pop	{r4, r5, fp, pc}

0000ecac <rb_event_next>:
    ecac:	ldr	r0, [pc, #4]	; ecb8 <rb_event_next+0xc>
    ecb0:	ldr	r0, [pc, r0]
    ecb4:	bx	lr
    ecb8:	.word	0x000197b4

0000ecbc <rb_ctime>:
    ecbc:	push	{r4, r5, r6, r7, fp, lr}
    ecc0:	add	fp, sp, #16
    ecc4:	sub	sp, sp, #72	; 0x48
    ecc8:	mov	r6, r1
    eccc:	str	r0, [fp, #-20]	; 0xffffffec
    ecd0:	sub	r0, fp, #20
    ecd4:	add	r1, sp, #24
    ecd8:	mov	r7, r2
    ecdc:	bl	52f0 <gmtime_r@plt>
    ece0:	ldr	r5, [pc, #144]	; ed78 <rb_ctime+0xbc>
    ece4:	cmp	r6, #0
    ece8:	movweq	r7, #128	; 0x80
    ecec:	add	r5, pc, r5
    ecf0:	movne	r5, r6
    ecf4:	cmp	r0, #0
    ecf8:	beq	ed60 <rb_ctime+0xa4>
    ecfc:	ldm	r0, {r1, r2, r3, r6, ip}
    ed00:	ldr	r4, [r0, #20]
    ed04:	ldr	r0, [r0, #24]
    ed08:	str	r2, [sp, #12]
    ed0c:	str	r3, [sp, #8]
    ed10:	str	r6, [sp, #4]
    ed14:	str	r1, [sp, #16]
    ed18:	movw	r1, #1900	; 0x76c
    ed1c:	add	r1, r4, r1
    ed20:	str	r1, [sp, #20]
    ed24:	ldr	r1, [pc, #84]	; ed80 <rb_ctime+0xc4>
    ed28:	add	r1, pc, r1
    ed2c:	ldr	r1, [r1, ip, lsl #2]
    ed30:	str	r1, [sp]
    ed34:	ldr	r1, [pc, #72]	; ed84 <rb_ctime+0xc8>
    ed38:	ldr	r2, [pc, #72]	; ed88 <rb_ctime+0xcc>
    ed3c:	add	r1, pc, r1
    ed40:	add	r2, pc, r2
    ed44:	ldr	r3, [r1, r0, lsl #2]
    ed48:	mov	r0, r5
    ed4c:	mov	r1, r7
    ed50:	bl	54a0 <snprintf@plt>
    ed54:	mov	r0, r5
    ed58:	sub	sp, fp, #16
    ed5c:	pop	{r4, r5, r6, r7, fp, pc}
    ed60:	ldr	r1, [pc, #20]	; ed7c <rb_ctime+0xc0>
    ed64:	mov	r0, r5
    ed68:	mov	r2, r7
    ed6c:	add	r1, pc, r1
    ed70:	bl	4fb4 <rb_strlcpy@plt>
    ed74:	b	ed54 <rb_ctime+0x98>
    ed78:	.word	0x0002c0d4
    ed7c:	.word	0x00006eae
    ed80:	.word	0x00019144
    ed84:	.word	0x00019114
    ed88:	.word	0x000077d5

0000ed8c <rb_date>:
    ed8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    ed90:	add	fp, sp, #24
    ed94:	sub	sp, sp, #72	; 0x48
    ed98:	mov	r4, r1
    ed9c:	str	r0, [fp, #-28]	; 0xffffffe4
    eda0:	sub	r0, fp, #28
    eda4:	add	r1, sp, #24
    eda8:	mov	r8, r2
    edac:	bl	52f0 <gmtime_r@plt>
    edb0:	cmp	r0, #0
    edb4:	beq	ee18 <rb_date+0x8c>
    edb8:	ldm	r0, {r1, r2, r3, r5, r6, r7}
    edbc:	ldr	r0, [r0, #24]
    edc0:	str	r2, [sp, #16]
    edc4:	str	r3, [sp, #12]
    edc8:	str	r5, [sp, #4]
    edcc:	str	r1, [sp, #20]
    edd0:	movw	r1, #1900	; 0x76c
    edd4:	add	r1, r7, r1
    edd8:	str	r1, [sp, #8]
    eddc:	ldr	r1, [pc, #80]	; ee34 <rb_date+0xa8>
    ede0:	add	r1, pc, r1
    ede4:	ldr	r1, [r1, r6, lsl #2]
    ede8:	str	r1, [sp]
    edec:	ldr	r1, [pc, #68]	; ee38 <rb_date+0xac>
    edf0:	ldr	r2, [pc, #68]	; ee3c <rb_date+0xb0>
    edf4:	add	r1, pc, r1
    edf8:	add	r2, pc, r2
    edfc:	ldr	r3, [r1, r0, lsl #2]
    ee00:	mov	r0, r4
    ee04:	mov	r1, r8
    ee08:	bl	54a0 <snprintf@plt>
    ee0c:	mov	r0, r4
    ee10:	sub	sp, fp, #24
    ee14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    ee18:	ldr	r1, [pc, #16]	; ee30 <rb_date+0xa4>
    ee1c:	mov	r0, r4
    ee20:	mov	r2, r8
    ee24:	add	r1, pc, r1
    ee28:	bl	4fb4 <rb_strlcpy@plt>
    ee2c:	b	ee0c <rb_date+0x80>
    ee30:	.word	0x00006df6
    ee34:	.word	0x000190d8
    ee38:	.word	0x000190a8
    ee3c:	.word	0x00007738

0000ee40 <rb_current_time>:
    ee40:	ldr	r0, [pc, #4]	; ee4c <rb_current_time+0xc>
    ee44:	ldr	r0, [pc, r0]
    ee48:	bx	lr
    ee4c:	.word	0x0002bffc

0000ee50 <rb_current_time_tv>:
    ee50:	ldr	r0, [pc, #4]	; ee5c <rb_current_time_tv+0xc>
    ee54:	add	r0, pc, r0
    ee58:	bx	lr
    ee5c:	.word	0x0002bfec

0000ee60 <rb_lib_log>:
    ee60:	sub	sp, sp, #12
    ee64:	push	{r4, sl, fp, lr}
    ee68:	add	fp, sp, #8
    ee6c:	sub	sp, sp, #4
    ee70:	mov	ip, r0
    ee74:	add	r0, fp, #8
    ee78:	stm	r0, {r1, r2, r3}
    ee7c:	ldr	r0, [pc, #72]	; eecc <rb_lib_log+0x6c>
    ee80:	ldr	r0, [pc, r0]
    ee84:	cmp	r0, #0
    ee88:	beq	eebc <rb_lib_log+0x5c>
    ee8c:	add	r3, fp, #8
    ee90:	mov	r1, #512	; 0x200
    ee94:	mov	r2, ip
    ee98:	str	r3, [sp]
    ee9c:	ldr	r4, [pc, #44]	; eed0 <rb_lib_log+0x70>
    eea0:	add	r4, pc, r4
    eea4:	mov	r0, r4
    eea8:	bl	4e7c <vsnprintf@plt>
    eeac:	ldr	r1, [pc, #32]	; eed4 <rb_lib_log+0x74>
    eeb0:	mov	r0, r4
    eeb4:	ldr	r1, [pc, r1]
    eeb8:	blx	r1
    eebc:	sub	sp, fp, #8
    eec0:	pop	{r4, sl, fp, lr}
    eec4:	add	sp, sp, #12
    eec8:	bx	lr
    eecc:	.word	0x0002bfc8
    eed0:	.word	0x0002bfac
    eed4:	.word	0x0002bf94

0000eed8 <rb_lib_die>:
    eed8:	sub	sp, sp, #12
    eedc:	push	{r4, sl, fp, lr}
    eee0:	add	fp, sp, #8
    eee4:	sub	sp, sp, #4
    eee8:	mov	ip, r0
    eeec:	add	r0, fp, #8
    eef0:	stm	r0, {r1, r2, r3}
    eef4:	ldr	r0, [pc, #76]	; ef48 <rb_lib_die+0x70>
    eef8:	ldr	r0, [pc, r0]
    eefc:	cmp	r0, #0
    ef00:	beq	ef44 <rb_lib_die+0x6c>
    ef04:	add	r3, fp, #8
    ef08:	mov	r1, #512	; 0x200
    ef0c:	mov	r2, ip
    ef10:	str	r3, [sp]
    ef14:	ldr	r4, [pc, #48]	; ef4c <rb_lib_die+0x74>
    ef18:	add	r4, pc, r4
    ef1c:	mov	r0, r4
    ef20:	bl	4e7c <vsnprintf@plt>
    ef24:	ldr	r1, [pc, #36]	; ef50 <rb_lib_die+0x78>
    ef28:	mov	r0, r4
    ef2c:	ldr	r1, [pc, r1]
    ef30:	blx	r1
    ef34:	sub	sp, fp, #8
    ef38:	pop	{r4, sl, fp, lr}
    ef3c:	add	sp, sp, #12
    ef40:	bx	lr
    ef44:	bl	4cfc <abort@plt>
    ef48:	.word	0x0002c154
    ef4c:	.word	0x0002bf34
    ef50:	.word	0x0002c120

0000ef54 <rb_lib_restart>:
    ef54:	sub	sp, sp, #12
    ef58:	push	{fp, lr}
    ef5c:	mov	fp, sp
    ef60:	sub	sp, sp, #4
    ef64:	mov	ip, r0
    ef68:	add	r0, fp, #8
    ef6c:	stm	r0, {r1, r2, r3}
    ef70:	ldr	r0, [pc, #64]	; efb8 <rb_lib_restart+0x64>
    ef74:	ldr	r0, [pc, r0]
    ef78:	cmp	r0, #0
    ef7c:	bne	ef84 <rb_lib_restart+0x30>
    ef80:	bl	4cfc <abort@plt>
    ef84:	add	r3, fp, #8
    ef88:	mov	r1, #512	; 0x200
    ef8c:	mov	r2, ip
    ef90:	str	r3, [sp]
    ef94:	ldr	r4, [pc, #32]	; efbc <rb_lib_restart+0x68>
    ef98:	add	r4, pc, r4
    ef9c:	mov	r0, r4
    efa0:	bl	4e7c <vsnprintf@plt>
    efa4:	ldr	r1, [pc, #20]	; efc0 <rb_lib_restart+0x6c>
    efa8:	mov	r0, r4
    efac:	ldr	r1, [pc, r1]
    efb0:	blx	r1
    efb4:	bl	4cfc <abort@plt>
    efb8:	.word	0x0002c0dc
    efbc:	.word	0x0002beb4
    efc0:	.word	0x0002c0a4

0000efc4 <rb_set_time>:
    efc4:	push	{fp, lr}
    efc8:	mov	fp, sp
    efcc:	sub	sp, sp, #8
    efd0:	mov	r0, sp
    efd4:	mov	r1, #0
    efd8:	bl	4edc <rb_gettimeofday@plt>
    efdc:	cmn	r0, #1
    efe0:	beq	f018 <rb_set_time+0x54>
    efe4:	ldr	r0, [pc, #84]	; f040 <rb_set_time+0x7c>
    efe8:	ldr	r0, [pc, r0]
    efec:	ldr	r1, [sp]
    eff0:	cmp	r0, r1
    eff4:	ble	f000 <rb_set_time+0x3c>
    eff8:	sub	r0, r0, r1
    effc:	bl	ebe8 <rb_set_back_events>
    f000:	ldm	sp, {r0, r1}
    f004:	ldr	r2, [pc, #56]	; f044 <rb_set_time+0x80>
    f008:	add	r2, pc, r2
    f00c:	strd	r0, [r2]
    f010:	mov	sp, fp
    f014:	pop	{fp, pc}
    f018:	bl	55e4 <__errno_location@plt>
    f01c:	ldr	r0, [r0]
    f020:	bl	4cd8 <strerror@plt>
    f024:	mov	r1, r0
    f028:	ldr	r0, [pc, #24]	; f048 <rb_set_time+0x84>
    f02c:	add	r0, pc, r0
    f030:	bl	5224 <rb_lib_log@plt>
    f034:	ldr	r0, [pc, #16]	; f04c <rb_set_time+0x88>
    f038:	add	r0, pc, r0
    f03c:	bl	535c <rb_lib_restart@plt>
    f040:	.word	0x0002be58
    f044:	.word	0x0002be38
    f048:	.word	0x00007529
    f04c:	.word	0x00007530

0000f050 <rb_lib_version>:
    f050:	push	{r4, sl, fp, lr}
    f054:	add	fp, sp, #8
    f058:	sub	sp, sp, #520	; 0x208
    f05c:	add	r4, sp, #8
    f060:	mov	r1, #512	; 0x200
    f064:	mov	r0, r4
    f068:	bl	dc30 <rb_get_ssl_info>
    f06c:	ldr	r0, [pc, #48]	; f0a4 <rb_lib_version+0x54>
    f070:	mov	r1, #640	; 0x280
    f074:	ldr	r0, [pc, r0]
    f078:	str	r4, [sp]
    f07c:	ldr	r3, [r0]
    f080:	ldr	r4, [pc, #32]	; f0a8 <rb_lib_version+0x58>
    f084:	ldr	r2, [pc, #32]	; f0ac <rb_lib_version+0x5c>
    f088:	add	r4, pc, r4
    f08c:	add	r2, pc, r2
    f090:	mov	r0, r4
    f094:	bl	54a0 <snprintf@plt>
    f098:	mov	r0, r4
    f09c:	sub	sp, fp, #8
    f0a0:	pop	{r4, sl, fp, pc}
    f0a4:	.word	0x00019318
    f0a8:	.word	0x0002bfcc
    f0ac:	.word	0x000074ea

0000f0b0 <rb_lib_init>:
    f0b0:	push	{r4, r5, r6, r7, fp, lr}
    f0b4:	add	fp, sp, #16
    f0b8:	mov	r4, r3
    f0bc:	mov	r5, r2
    f0c0:	mov	r6, r1
    f0c4:	mov	r7, r0
    f0c8:	bl	5290 <rb_set_time@plt>
    f0cc:	ldr	r0, [pc, #88]	; f12c <rb_lib_init+0x7c>
    f0d0:	add	r0, pc, r0
    f0d4:	str	r6, [r0]
    f0d8:	ldr	r0, [pc, #80]	; f130 <rb_lib_init+0x80>
    f0dc:	add	r0, pc, r0
    f0e0:	str	r7, [r0]
    f0e4:	ldr	r0, [pc, #72]	; f134 <rb_lib_init+0x84>
    f0e8:	add	r0, pc, r0
    f0ec:	str	r5, [r0]
    f0f0:	bl	4f18 <rb_event_init@plt>
    f0f4:	bl	52d8 <rb_init_bh@plt>
    f0f8:	ldr	r1, [fp, #8]
    f0fc:	ldr	r2, [fp, #16]
    f100:	mov	r0, r4
    f104:	bl	53f8 <rb_fdlist_init@plt>
    f108:	bl	4cc0 <rb_init_netio@plt>
    f10c:	ldr	r0, [fp, #12]
    f110:	bl	51e8 <rb_init_rb_dlink_nodes@plt>
    f114:	bl	c53c <rb_io_supports_event>
    f118:	cmp	r0, #0
    f11c:	beq	f128 <rb_lib_init+0x78>
    f120:	pop	{r4, r5, r6, r7, fp, lr}
    f124:	b	c558 <rb_io_init_event>
    f128:	pop	{r4, r5, r6, r7, fp, pc}
    f12c:	.word	0x0002bf80
    f130:	.word	0x0002bd6c
    f134:	.word	0x0002bf64

0000f138 <rb_lib_loop>:
    f138:	push	{fp, lr}
    f13c:	mov	fp, sp
    f140:	mov	r4, r0
    f144:	bl	5290 <rb_set_time@plt>
    f148:	bl	c53c <rb_io_supports_event>
    f14c:	cmp	r0, #0
    f150:	beq	f160 <rb_lib_loop+0x28>
    f154:	mvn	r0, #0
    f158:	bl	4e70 <rb_select@plt>
    f15c:	b	f154 <rb_lib_loop+0x1c>
    f160:	mov	r5, #1000	; 0x3e8
    f164:	cmp	r4, #0
    f168:	mov	r0, r4
    f16c:	bne	f19c <rb_lib_loop+0x64>
    f170:	bl	5524 <rb_event_next@plt>
    f174:	cmp	r0, #1
    f178:	blt	f198 <rb_lib_loop+0x60>
    f17c:	ldr	r1, [pc, #36]	; f1a8 <rb_lib_loop+0x70>
    f180:	ldr	r1, [pc, r1]
    f184:	sub	r1, r0, r1
    f188:	cmp	r1, #1
    f18c:	mul	r0, r1, r5
    f190:	movwlt	r0, #1000	; 0x3e8
    f194:	b	f19c <rb_lib_loop+0x64>
    f198:	mvn	r0, #0
    f19c:	bl	4e70 <rb_select@plt>
    f1a0:	bl	52c0 <rb_event_run@plt>
    f1a4:	b	f164 <rb_lib_loop+0x2c>
    f1a8:	.word	0x0002bcc0

0000f1ac <rb_strtok_r>:
    f1ac:	b	5350 <strtok_r@plt>

0000f1b0 <rb_base64_encode>:
    f1b0:	push	{r4, r5, r6, sl, fp, lr}
    f1b4:	add	fp, sp, #16
    f1b8:	mov	r4, r0
    f1bc:	adds	r0, r1, #2
    f1c0:	bmi	f260 <rb_base64_encode+0xb0>
    f1c4:	mov	r6, r1
    f1c8:	movw	r1, #43691	; 0xaaab
    f1cc:	movt	r1, #43690	; 0xaaaa
    f1d0:	umull	r0, r1, r0, r1
    f1d4:	lsr	r0, r1, #1
    f1d8:	add	r1, r0, r0, lsl #2
    f1dc:	mov	r0, #1
    f1e0:	bl	4f00 <calloc@plt>
    f1e4:	cmp	r0, #0
    f1e8:	beq	f2d8 <rb_base64_encode+0x128>
    f1ec:	cmp	r6, #3
    f1f0:	blt	f268 <rb_base64_encode+0xb8>
    f1f4:	ldr	ip, [pc, #224]	; f2dc <rb_base64_encode+0x12c>
    f1f8:	mov	r1, r0
    f1fc:	add	ip, pc, ip
    f200:	ldrb	r3, [r4]
    f204:	sub	r6, r6, #3
    f208:	cmp	r6, #2
    f20c:	ldrb	r2, [ip, r3, lsr #2]
    f210:	strb	r2, [r1]
    f214:	and	r2, r3, #3
    f218:	ldrb	r3, [r4, #1]
    f21c:	lsr	r5, r3, #4
    f220:	and	r3, r3, #15
    f224:	orr	r2, r5, r2, lsl #4
    f228:	ldrb	r2, [ip, r2]
    f22c:	strb	r2, [r1, #1]
    f230:	ldrb	r2, [r4, #2]
    f234:	add	r4, r4, #3
    f238:	and	r5, r2, #63	; 0x3f
    f23c:	lsr	r2, r2, #6
    f240:	orr	r2, r2, r3, lsl #2
    f244:	ldrb	r5, [ip, r5]
    f248:	ldrb	r2, [ip, r2]
    f24c:	strb	r5, [r1, #3]
    f250:	strb	r2, [r1, #2]
    f254:	add	r1, r1, #4
    f258:	bgt	f200 <rb_base64_encode+0x50>
    f25c:	b	f26c <rb_base64_encode+0xbc>
    f260:	mov	r0, #0
    f264:	pop	{r4, r5, r6, sl, fp, pc}
    f268:	mov	r1, r0
    f26c:	cmp	r6, #0
    f270:	beq	f2cc <rb_base64_encode+0x11c>
    f274:	ldrb	r3, [r4]
    f278:	ldr	r2, [pc, #96]	; f2e0 <rb_base64_encode+0x130>
    f27c:	cmp	r6, #2
    f280:	add	r2, pc, r2
    f284:	ldrb	r5, [r2, r3, lsr #2]
    f288:	strb	r5, [r1]
    f28c:	mov	r5, #48	; 0x30
    f290:	and	r3, r5, r3, lsl #4
    f294:	blt	f2b0 <rb_base64_encode+0x100>
    f298:	ldrb	r6, [r4, #1]
    f29c:	and	r5, r6, #15
    f2a0:	orr	r3, r3, r6, lsr #4
    f2a4:	ldrb	r5, [r2, r5, lsl #2]
    f2a8:	strb	r5, [r1, #2]
    f2ac:	b	f2b8 <rb_base64_encode+0x108>
    f2b0:	mov	r6, #61	; 0x3d
    f2b4:	strb	r6, [r1, #2]
    f2b8:	ldrb	r2, [r2, r3]
    f2bc:	strb	r2, [r1, #1]
    f2c0:	mov	r2, #61	; 0x3d
    f2c4:	strb	r2, [r1, #3]
    f2c8:	add	r1, r1, #4
    f2cc:	mov	r2, #0
    f2d0:	strb	r2, [r1]
    f2d4:	pop	{r4, r5, r6, sl, fp, pc}
    f2d8:	bl	5284 <rb_outofmemory@plt>
    f2dc:	.word	0x00007391
    f2e0:	.word	0x0000730d

0000f2e4 <rb_base64_decode>:
    f2e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    f2e8:	add	fp, sp, #24
    f2ec:	mov	r5, r1
    f2f0:	mov	r6, r0
    f2f4:	add	r1, r1, #1
    f2f8:	mov	r0, #1
    f2fc:	mov	r8, r2
    f300:	bl	4f00 <calloc@plt>
    f304:	cmp	r0, #0
    f308:	beq	f418 <rb_base64_decode+0x134>
    f30c:	ldr	r3, [pc, #264]	; f41c <rb_base64_decode+0x138>
    f310:	mov	r1, #0
    f314:	mov	ip, #0
    f318:	add	r3, pc, r3
    f31c:	ldrb	r4, [r6], #1
    f320:	cmp	r4, #0
    f324:	beq	f408 <rb_base64_decode+0x124>
    f328:	subs	r5, r5, #1
    f32c:	blt	f3c4 <rb_base64_decode+0xe0>
    f330:	cmp	r4, #61	; 0x3d
    f334:	beq	f3c4 <rb_base64_decode+0xe0>
    f338:	add	r7, r3, r4, lsl #1
    f33c:	ldrsh	r4, [r7]
    f340:	cmp	r4, #0
    f344:	bmi	f31c <rb_base64_decode+0x38>
    f348:	and	r7, ip, #3
    f34c:	add	r2, pc, #4
    f350:	ldr	r7, [r2, r7, lsl #2]
    f354:	add	pc, r2, r7
    f358:	.word	0x00000010
    f35c:	.word	0x00000048
    f360:	.word	0x0000001c
    f364:	.word	0x00000034
    f368:	lsl	r2, r4, #2
    f36c:	strb	r2, [r0, r1]
    f370:	b	f3bc <rb_base64_decode+0xd8>
    f374:	add	r2, r1, #1
    f378:	lsl	r7, r4, #6
    f37c:	strb	r7, [r0, r2]
    f380:	ldrb	r7, [r0, r1]
    f384:	orr	r7, r7, r4, lsr #2
    f388:	b	f3b4 <rb_base64_decode+0xd0>
    f38c:	ldrb	r2, [r0, r1]
    f390:	orr	r2, r2, r4
    f394:	strb	r2, [r0, r1]
    f398:	add	r1, r1, #1
    f39c:	b	f3bc <rb_base64_decode+0xd8>
    f3a0:	add	r2, r1, #1
    f3a4:	lsl	r7, r4, #4
    f3a8:	strb	r7, [r0, r2]
    f3ac:	ldrb	r7, [r0, r1]
    f3b0:	orr	r7, r7, r4, lsr #4
    f3b4:	strb	r7, [r0, r1]
    f3b8:	mov	r1, r2
    f3bc:	add	ip, ip, #1
    f3c0:	b	f31c <rb_base64_decode+0x38>
    f3c4:	cmp	r4, #61	; 0x3d
    f3c8:	bne	f408 <rb_base64_decode+0x124>
    f3cc:	and	r2, ip, #3
    f3d0:	cmp	r2, #3
    f3d4:	beq	f3f4 <rb_base64_decode+0x110>
    f3d8:	cmp	r2, #2
    f3dc:	beq	f3fc <rb_base64_decode+0x118>
    f3e0:	cmp	r2, #1
    f3e4:	bne	f408 <rb_base64_decode+0x124>
    f3e8:	bl	4ffc <free@plt>
    f3ec:	mov	r0, #0
    f3f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    f3f4:	mov	r2, r1
    f3f8:	b	f400 <rb_base64_decode+0x11c>
    f3fc:	add	r2, r1, #1
    f400:	mov	r3, #0
    f404:	strb	r3, [r0, r2]
    f408:	mov	r2, #0
    f40c:	strb	r2, [r0, r1]
    f410:	str	r1, [r8]
    f414:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    f418:	bl	5284 <rb_outofmemory@plt>
    f41c:	.word	0x0000738e

0000f420 <rb_outofmemory>:
    f420:	push	{fp, lr}
    f424:	mov	fp, sp
    f428:	ldr	r0, [pc, #48]	; f460 <rb_outofmemory+0x40>
    f42c:	add	r0, pc, r0
    f430:	ldrb	r1, [r0]
    f434:	cmp	r1, #1
    f438:	bne	f440 <rb_outofmemory+0x20>
    f43c:	bl	4cfc <abort@plt>
    f440:	mov	r1, #1
    f444:	strb	r1, [r0]
    f448:	ldr	r0, [pc, #20]	; f464 <rb_outofmemory+0x44>
    f44c:	add	r0, pc, r0
    f450:	bl	5224 <rb_lib_log@plt>
    f454:	ldr	r0, [pc, #12]	; f468 <rb_outofmemory+0x48>
    f458:	add	r0, pc, r0
    f45c:	bl	535c <rb_lib_restart@plt>
    f460:	.word	0x0002bea8
    f464:	.word	0x0000745a
    f468:	.word	0x00007472

0000f46c <rb_linebuf_init>:
    f46c:	push	{fp, lr}
    f470:	mov	fp, sp
    f474:	ldr	r2, [pc, #28]	; f498 <rb_linebuf_init+0x2c>
    f478:	mov	r1, r0
    f47c:	movw	r0, #1036	; 0x40c
    f480:	add	r2, pc, r2
    f484:	bl	53b0 <rb_bh_create@plt>
    f488:	ldr	r1, [pc, #12]	; f49c <rb_linebuf_init+0x30>
    f48c:	add	r1, pc, r1
    f490:	str	r0, [r1]
    f494:	pop	{fp, pc}
    f498:	.word	0x00007458
    f49c:	.word	0x0002be4c

0000f4a0 <rb_linebuf_newbuf>:
    f4a0:	vmov.i32	q8, #0	; 0x00000000
    f4a4:	mov	r1, #12
    f4a8:	vst1.32	{d16-d17}, [r0], r1
    f4ac:	vst1.32	{d16-d17}, [r0]
    f4b0:	bx	lr

0000f4b4 <rb_linebuf_donebuf>:
    f4b4:	push	{r4, sl, fp, lr}
    f4b8:	add	fp, sp, #8
    f4bc:	ldr	r2, [r0]
    f4c0:	cmp	r2, #0
    f4c4:	popeq	{r4, sl, fp, pc}
    f4c8:	mov	r4, r0
    f4cc:	ldr	r1, [r2]
    f4d0:	mov	r0, r4
    f4d4:	bl	f4e8 <rb_linebuf_done_line>
    f4d8:	ldr	r2, [r4]
    f4dc:	cmp	r2, #0
    f4e0:	bne	f4cc <rb_linebuf_donebuf+0x18>
    f4e4:	pop	{r4, sl, fp, pc}

0000f4e8 <rb_linebuf_done_line>:
    f4e8:	push	{r4, r5, fp, lr}
    f4ec:	add	fp, sp, #8
    f4f0:	mov	r5, r0
    f4f4:	ldr	r0, [r2, #8]
    f4f8:	mov	r4, r1
    f4fc:	ldr	r1, [r2, #4]
    f500:	cmp	r0, #0
    f504:	beq	f514 <rb_linebuf_done_line+0x2c>
    f508:	str	r1, [r0, #4]
    f50c:	ldr	r1, [r2, #4]
    f510:	b	f518 <rb_linebuf_done_line+0x30>
    f514:	str	r1, [r5, #4]
    f518:	cmp	r1, #0
    f51c:	mov	r3, r5
    f520:	addne	r3, r1, #8
    f524:	str	r0, [r3]
    f528:	mov	r0, #0
    f52c:	str	r0, [r2, #4]
    f530:	str	r0, [r2, #8]
    f534:	ldr	r0, [r5, #8]
    f538:	sub	r0, r0, #1
    f53c:	str	r0, [r5, #8]
    f540:	mov	r0, r2
    f544:	bl	5140 <rb_free_rb_dlink_node@plt>
    f548:	ldr	r1, [r5, #16]
    f54c:	ldr	r2, [r5, #24]
    f550:	ldr	r0, [r5, #12]
    f554:	sub	r1, r1, #1
    f558:	sub	r2, r2, #1
    f55c:	str	r1, [r5, #16]
    f560:	ldr	r1, [r4, #1028]	; 0x404
    f564:	str	r2, [r5, #24]
    f568:	sub	r0, r0, r1
    f56c:	str	r0, [r5, #12]
    f570:	ldr	r0, [r4, #1032]	; 0x408
    f574:	subs	r0, r0, #1
    f578:	str	r0, [r4, #1032]	; 0x408
    f57c:	popne	{r4, r5, fp, pc}
    f580:	ldr	r0, [pc, #36]	; f5ac <rb_linebuf_done_line+0xc4>
    f584:	ldr	r0, [pc, r0]
    f588:	ldr	r1, [pc, #32]	; f5b0 <rb_linebuf_done_line+0xc8>
    f58c:	sub	r0, r0, #1
    f590:	add	r1, pc, r1
    f594:	str	r0, [r1]
    f598:	mov	r1, r4
    f59c:	ldr	r0, [pc, #16]	; f5b4 <rb_linebuf_done_line+0xcc>
    f5a0:	ldr	r0, [pc, r0]
    f5a4:	pop	{r4, r5, fp, lr}
    f5a8:	b	51dc <rb_bh_free@plt>
    f5ac:	.word	0x0002dd5c
    f5b0:	.word	0x0002dd50
    f5b4:	.word	0x0002bd38

0000f5b8 <rb_linebuf_parse>:
    f5b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    f5bc:	add	fp, sp, #24
    f5c0:	mov	r7, r0
    f5c4:	ldr	r0, [r0, #4]
    f5c8:	mov	r8, r3
    f5cc:	mov	r5, r2
    f5d0:	mov	r6, r1
    f5d4:	cmp	r0, #0
    f5d8:	beq	f5fc <rb_linebuf_parse+0x44>
    f5dc:	ldr	r1, [r0]
    f5e0:	mov	r0, r7
    f5e4:	mov	r2, r6
    f5e8:	mov	r3, r5
    f5ec:	cmp	r8, #0
    f5f0:	beq	f604 <rb_linebuf_parse+0x4c>
    f5f4:	bl	f868 <rb_linebuf_copy_raw>
    f5f8:	b	f608 <rb_linebuf_parse+0x50>
    f5fc:	mov	r4, #0
    f600:	b	f628 <rb_linebuf_parse+0x70>
    f604:	bl	f688 <rb_linebuf_copy_line>
    f608:	cmn	r0, #1
    f60c:	beq	f67c <rb_linebuf_parse+0xc4>
    f610:	mov	r4, #1
    f614:	cmp	r0, r5
    f618:	beq	f680 <rb_linebuf_parse+0xc8>
    f61c:	add	r6, r6, r0
    f620:	sub	r5, r5, r0
    f624:	mov	r4, #1
    f628:	cmp	r5, #1
    f62c:	blt	f680 <rb_linebuf_parse+0xc8>
    f630:	mov	r0, r7
    f634:	bl	f9c8 <rb_linebuf_new_line>
    f638:	mov	r1, r0
    f63c:	mov	r0, r7
    f640:	mov	r2, r6
    f644:	mov	r3, r5
    f648:	cmp	r8, #0
    f64c:	beq	f658 <rb_linebuf_parse+0xa0>
    f650:	bl	f868 <rb_linebuf_copy_raw>
    f654:	b	f65c <rb_linebuf_parse+0xa4>
    f658:	bl	f688 <rb_linebuf_copy_line>
    f65c:	cmn	r0, #1
    f660:	beq	f67c <rb_linebuf_parse+0xc4>
    f664:	sub	r5, r5, r0
    f668:	add	r6, r6, r0
    f66c:	add	r4, r4, #1
    f670:	cmp	r5, #0
    f674:	bgt	f630 <rb_linebuf_parse+0x78>
    f678:	b	f680 <rb_linebuf_parse+0xc8>
    f67c:	mvn	r4, #0
    f680:	mov	r0, r4
    f684:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000f688 <rb_linebuf_copy_line>:
    f688:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    f68c:	add	fp, sp, #24
    f690:	mov	r7, #0
    f694:	mov	r8, r0
    f698:	strb	r7, [r1, #1026]	; 0x402
    f69c:	ldrb	r0, [r1, #1025]	; 0x401
    f6a0:	cmp	r0, #1
    f6a4:	beq	f860 <rb_linebuf_copy_line+0x1d8>
    f6a8:	ldr	r9, [r1, #1028]	; 0x404
    f6ac:	mov	r4, r1
    f6b0:	mov	r7, #0
    f6b4:	cmp	r3, #0
    f6b8:	beq	f71c <rb_linebuf_copy_line+0x94>
    f6bc:	rsb	r0, r3, #0
    f6c0:	add	r1, r2, #1
    f6c4:	ldrb	r5, [r1, #-1]
    f6c8:	cmp	r5, #13
    f6cc:	cmpne	r5, #10
    f6d0:	beq	f6e4 <rb_linebuf_copy_line+0x5c>
    f6d4:	adds	r0, r0, #1
    f6d8:	add	r1, r1, #1
    f6dc:	bcc	f6c4 <rb_linebuf_copy_line+0x3c>
    f6e0:	b	f71c <rb_linebuf_copy_line+0x94>
    f6e4:	add	r6, r0, #1
    f6e8:	mov	r7, #0
    f6ec:	uxtb	r5, r5
    f6f0:	cmp	r5, #13
    f6f4:	cmpne	r5, #10
    f6f8:	bne	f710 <rb_linebuf_copy_line+0x88>
    f6fc:	cmp	r6, r7
    f700:	beq	f718 <rb_linebuf_copy_line+0x90>
    f704:	ldrb	r5, [r1, -r7]
    f708:	sub	r7, r7, #1
    f70c:	b	f6ec <rb_linebuf_copy_line+0x64>
    f710:	sub	r7, r7, r0
    f714:	b	f71c <rb_linebuf_copy_line+0x94>
    f718:	mov	r7, #0
    f71c:	sub	r7, r3, r7
    f720:	cmn	r7, #1
    f724:	beq	f7a8 <rb_linebuf_copy_line+0x120>
    f728:	movw	r0, #1022	; 0x3fe
    f72c:	add	r6, r4, r9
    f730:	sub	r5, r0, r9
    f734:	cmp	r7, r5
    f738:	ble	f7b0 <rb_linebuf_copy_line+0x128>
    f73c:	mov	r1, r2
    f740:	mov	r0, r6
    f744:	mov	r2, r5
    f748:	bl	5104 <memcpy@plt>
    f74c:	mov	r0, #0
    f750:	cmp	r5, #0
    f754:	strb	r0, [r4, #1022]	; 0x3fe
    f758:	beq	f788 <rb_linebuf_copy_line+0x100>
    f75c:	movw	r1, #1022	; 0x3fe
    f760:	movw	r2, #1021	; 0x3fd
    f764:	sub	r1, r9, r1
    f768:	add	r2, r4, r2
    f76c:	ldrb	r3, [r2]
    f770:	cmp	r3, #13
    f774:	cmpne	r3, #10
    f778:	bne	f788 <rb_linebuf_copy_line+0x100>
    f77c:	strb	r0, [r2], #-1
    f780:	adds	r1, r1, #1
    f784:	bcc	f76c <rb_linebuf_copy_line+0xe4>
    f788:	movw	r0, #1022	; 0x3fe
    f78c:	mov	r1, #1
    f790:	str	r0, [r4, #1028]	; 0x404
    f794:	strb	r1, [r4, #1025]	; 0x401
    f798:	ldr	r1, [r8, #12]
    f79c:	add	r0, r1, r0
    f7a0:	str	r0, [r8, #12]
    f7a4:	b	f860 <rb_linebuf_copy_line+0x1d8>
    f7a8:	mvn	r7, #0
    f7ac:	b	f860 <rb_linebuf_copy_line+0x1d8>
    f7b0:	mov	r1, r2
    f7b4:	mov	r0, r6
    f7b8:	mov	r2, r7
    f7bc:	bl	5104 <memcpy@plt>
    f7c0:	mov	r0, #0
    f7c4:	mov	r1, r6
    f7c8:	strb	r0, [r1, r7]!
    f7cc:	ldrb	r2, [r1, #-1]
    f7d0:	cmp	r2, #10
    f7d4:	cmpne	r2, #13
    f7d8:	bne	f81c <rb_linebuf_copy_line+0x194>
    f7dc:	cmp	r7, #0
    f7e0:	beq	f840 <rb_linebuf_copy_line+0x1b8>
    f7e4:	sub	r1, r6, #2
    f7e8:	mov	r6, r7
    f7ec:	uxtb	r0, r2
    f7f0:	cmp	r0, #13
    f7f4:	cmpne	r0, #10
    f7f8:	bne	f83c <rb_linebuf_copy_line+0x1b4>
    f7fc:	add	r2, r1, r6
    f800:	mov	r0, #0
    f804:	subs	r3, r6, #1
    f808:	strb	r0, [r2, #1]
    f80c:	beq	f840 <rb_linebuf_copy_line+0x1b8>
    f810:	ldrb	r2, [r1, r6]
    f814:	mov	r6, r3
    f818:	b	f7ec <rb_linebuf_copy_line+0x164>
    f81c:	ldr	r0, [r8, #12]
    f820:	add	r0, r0, r7
    f824:	str	r0, [r8, #12]
    f828:	mov	r0, #0
    f82c:	strb	r0, [r4, #1025]	; 0x401
    f830:	ldr	r0, [r4, #1028]	; 0x404
    f834:	add	r0, r0, r7
    f838:	b	f85c <rb_linebuf_copy_line+0x1d4>
    f83c:	mov	r0, r6
    f840:	mov	r1, #1
    f844:	strb	r1, [r4, #1025]	; 0x401
    f848:	ldr	r1, [r8, #12]
    f84c:	add	r1, r1, r0
    f850:	str	r1, [r8, #12]
    f854:	ldr	r1, [r4, #1028]	; 0x404
    f858:	add	r0, r1, r0
    f85c:	str	r0, [r4, #1028]	; 0x404
    f860:	mov	r0, r7
    f864:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000f868 <rb_linebuf_copy_raw>:
    f868:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    f86c:	add	fp, sp, #24
    f870:	mov	r8, r0
    f874:	mov	r0, #1
    f878:	mov	r6, #0
    f87c:	strb	r0, [r1, #1026]	; 0x402
    f880:	ldrb	r0, [r1, #1025]	; 0x401
    f884:	cmp	r0, #1
    f888:	beq	f9c0 <rb_linebuf_copy_raw+0x158>
    f88c:	ldr	ip, [r1, #1028]	; 0x404
    f890:	mov	r4, r1
    f894:	mov	r6, #0
    f898:	cmp	r3, #0
    f89c:	beq	f900 <rb_linebuf_copy_raw+0x98>
    f8a0:	rsb	r1, r3, #0
    f8a4:	add	r7, r2, #1
    f8a8:	ldrb	r0, [r7, #-1]
    f8ac:	cmp	r0, #13
    f8b0:	cmpne	r0, #10
    f8b4:	beq	f8c8 <rb_linebuf_copy_raw+0x60>
    f8b8:	adds	r1, r1, #1
    f8bc:	add	r7, r7, #1
    f8c0:	bcc	f8a8 <rb_linebuf_copy_raw+0x40>
    f8c4:	b	f900 <rb_linebuf_copy_raw+0x98>
    f8c8:	add	r5, r1, #1
    f8cc:	mov	r6, #0
    f8d0:	uxtb	r0, r0
    f8d4:	cmp	r0, #13
    f8d8:	cmpne	r0, #10
    f8dc:	bne	f8f4 <rb_linebuf_copy_raw+0x8c>
    f8e0:	cmp	r5, r6
    f8e4:	beq	f8fc <rb_linebuf_copy_raw+0x94>
    f8e8:	ldrb	r0, [r7, -r6]
    f8ec:	sub	r6, r6, #1
    f8f0:	b	f8d0 <rb_linebuf_copy_raw+0x68>
    f8f4:	sub	r6, r6, r1
    f8f8:	b	f900 <rb_linebuf_copy_raw+0x98>
    f8fc:	mov	r6, #0
    f900:	sub	r6, r3, r6
    f904:	cmn	r6, #1
    f908:	beq	f958 <rb_linebuf_copy_raw+0xf0>
    f90c:	movw	r9, #1022	; 0x3fe
    f910:	add	r5, r4, ip
    f914:	sub	r7, r9, ip
    f918:	cmp	r6, r7
    f91c:	ble	f960 <rb_linebuf_copy_raw+0xf8>
    f920:	mov	r1, r2
    f924:	mov	r0, r5
    f928:	mov	r2, r7
    f92c:	bl	5104 <memcpy@plt>
    f930:	mov	r0, #1
    f934:	str	r9, [r4, #1028]	; 0x404
    f938:	mov	r6, r7
    f93c:	strb	r0, [r4, #1025]	; 0x401
    f940:	mov	r0, #0
    f944:	strb	r0, [r4, #1022]	; 0x3fe
    f948:	ldr	r0, [r8, #12]
    f94c:	add	r0, r0, r9
    f950:	str	r0, [r8, #12]
    f954:	b	f9c0 <rb_linebuf_copy_raw+0x158>
    f958:	mvn	r6, #0
    f95c:	b	f9c0 <rb_linebuf_copy_raw+0x158>
    f960:	mov	r1, r2
    f964:	mov	r0, r5
    f968:	mov	r2, r6
    f96c:	bl	5104 <memcpy@plt>
    f970:	mov	r0, #0
    f974:	strb	r0, [r5, r6]!
    f978:	ldrb	r0, [r5, #-1]
    f97c:	cmp	r0, #10
    f980:	cmpne	r0, #13
    f984:	bne	f9a0 <rb_linebuf_copy_raw+0x138>
    f988:	mov	r0, #1
    f98c:	strb	r0, [r4, #1025]	; 0x401
    f990:	ldr	r0, [r8, #12]
    f994:	add	r0, r0, r6
    f998:	str	r0, [r8, #12]
    f99c:	b	f9b4 <rb_linebuf_copy_raw+0x14c>
    f9a0:	ldr	r0, [r8, #12]
    f9a4:	add	r0, r0, r6
    f9a8:	str	r0, [r8, #12]
    f9ac:	mov	r0, #0
    f9b0:	strb	r0, [r4, #1025]	; 0x401
    f9b4:	ldr	r0, [r4, #1028]	; 0x404
    f9b8:	add	r0, r0, r6
    f9bc:	str	r0, [r4, #1028]	; 0x404
    f9c0:	mov	r0, r6
    f9c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0000f9c8 <rb_linebuf_new_line>:
    f9c8:	push	{r4, r5, fp, lr}
    f9cc:	add	fp, sp, #8
    f9d0:	mov	r4, r0
    f9d4:	ldr	r0, [pc, #164]	; fa80 <rb_linebuf_new_line+0xb8>
    f9d8:	ldr	r0, [pc, r0]
    f9dc:	bl	5254 <rb_bh_alloc@plt>
    f9e0:	mov	r5, r0
    f9e4:	cmp	r0, #0
    f9e8:	beq	fa70 <rb_linebuf_new_line+0xa8>
    f9ec:	ldr	r0, [pc, #144]	; fa84 <rb_linebuf_new_line+0xbc>
    f9f0:	ldr	r0, [pc, r0]
    f9f4:	ldr	r1, [pc, #140]	; fa88 <rb_linebuf_new_line+0xc0>
    f9f8:	add	r0, r0, #1
    f9fc:	add	r1, pc, r1
    fa00:	str	r0, [r1]
    fa04:	bl	5470 <rb_make_rb_dlink_node@plt>
    fa08:	mov	r1, #0
    fa0c:	str	r1, [r0, #8]
    fa10:	str	r5, [r0]
    fa14:	ldr	r1, [r4, #4]
    fa18:	cmp	r1, #0
    fa1c:	str	r1, [r0, #4]
    fa20:	beq	fa30 <rb_linebuf_new_line+0x68>
    fa24:	add	r1, r1, #8
    fa28:	str	r0, [r1]
    fa2c:	b	fa3c <rb_linebuf_new_line+0x74>
    fa30:	ldr	r1, [r4]
    fa34:	cmp	r1, #0
    fa38:	beq	fa78 <rb_linebuf_new_line+0xb0>
    fa3c:	str	r0, [r4, #4]
    fa40:	ldr	r0, [r4, #8]
    fa44:	add	r0, r0, #1
    fa48:	str	r0, [r4, #8]
    fa4c:	ldr	r0, [r5, #1032]	; 0x408
    fa50:	add	r0, r0, #1
    fa54:	str	r0, [r5, #1032]	; 0x408
    fa58:	ldr	r0, [r4, #16]
    fa5c:	ldr	r1, [r4, #24]
    fa60:	add	r0, r0, #1
    fa64:	str	r0, [r4, #16]
    fa68:	add	r0, r1, #1
    fa6c:	str	r0, [r4, #24]
    fa70:	mov	r0, r5
    fa74:	pop	{r4, r5, fp, pc}
    fa78:	mov	r1, r4
    fa7c:	b	fa28 <rb_linebuf_new_line+0x60>
    fa80:	.word	0x0002b900
    fa84:	.word	0x0002d8f0
    fa88:	.word	0x0002d8e4

0000fa8c <rb_linebuf_get>:
    fa8c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    fa90:	add	fp, sp, #24
    fa94:	mov	r4, r0
    fa98:	ldr	r0, [r0]
    fa9c:	mov	r7, #0
    faa0:	cmp	r0, #0
    faa4:	beq	fb4c <rb_linebuf_get+0xc0>
    faa8:	ldr	r6, [r0]
    faac:	mov	r9, r1
    fab0:	cmp	r3, #0
    fab4:	bne	fac4 <rb_linebuf_get+0x38>
    fab8:	ldrb	r0, [r6, #1025]	; 0x401
    fabc:	cmp	r0, #0
    fac0:	beq	fb4c <rb_linebuf_get+0xc0>
    fac4:	ldr	r3, [r6, #1028]	; 0x404
    fac8:	ldr	r8, [fp, #8]
    facc:	cmp	r3, r2
    fad0:	subgt	r3, r2, #1
    fad4:	cmp	r8, #0
    fad8:	bne	fb1c <rb_linebuf_get+0x90>
    fadc:	ldrb	r0, [r6, #1026]	; 0x402
    fae0:	cmp	r0, #0
    fae4:	beq	fb1c <rb_linebuf_get+0x90>
    fae8:	mov	r7, #0
    faec:	cmp	r3, #0
    faf0:	beq	fb20 <rb_linebuf_get+0x94>
    faf4:	rsb	r0, r3, #0
    faf8:	mov	r1, r6
    fafc:	ldrb	r2, [r1]
    fb00:	cmp	r2, #13
    fb04:	cmpne	r2, #10
    fb08:	bne	fb54 <rb_linebuf_get+0xc8>
    fb0c:	adds	r0, r0, #1
    fb10:	add	r1, r1, #1
    fb14:	bcc	fafc <rb_linebuf_get+0x70>
    fb18:	b	fb24 <rb_linebuf_get+0x98>
    fb1c:	mov	r7, r3
    fb20:	mov	r1, r6
    fb24:	mov	r0, r9
    fb28:	mov	r2, r7
    fb2c:	bl	5104 <memcpy@plt>
    fb30:	cmp	r8, #0
    fb34:	mov	r1, r6
    fb38:	moveq	r0, #0
    fb3c:	strbeq	r0, [r9, r7]
    fb40:	mov	r0, r4
    fb44:	ldr	r2, [r4]
    fb48:	bl	f4e8 <rb_linebuf_done_line>
    fb4c:	mov	r0, r7
    fb50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    fb54:	add	r2, r3, r6
    fb58:	add	r3, r0, #1
    fb5c:	mov	r7, #0
    fb60:	sub	r2, r2, #1
    fb64:	ldrb	r5, [r2, r7]
    fb68:	cmp	r5, #13
    fb6c:	cmpne	r5, #10
    fb70:	bne	fb8c <rb_linebuf_get+0x100>
    fb74:	sub	r5, r7, #1
    fb78:	cmp	r3, r7
    fb7c:	mov	r7, r5
    fb80:	bne	fb64 <rb_linebuf_get+0xd8>
    fb84:	mov	r7, #0
    fb88:	b	fb24 <rb_linebuf_get+0x98>
    fb8c:	sub	r7, r7, r0
    fb90:	b	fb24 <rb_linebuf_get+0x98>

0000fb94 <rb_linebuf_attach>:
    fb94:	push	{r4, r5, r6, r7, fp, lr}
    fb98:	add	fp, sp, #16
    fb9c:	ldr	r5, [r1]
    fba0:	cmp	r5, #0
    fba4:	beq	fc40 <rb_linebuf_attach+0xac>
    fba8:	mov	r4, r0
    fbac:	mov	r6, #0
    fbb0:	ldr	r7, [r5]
    fbb4:	bl	5470 <rb_make_rb_dlink_node@plt>
    fbb8:	str	r6, [r0, #8]
    fbbc:	str	r7, [r0]
    fbc0:	ldr	r1, [r4, #4]
    fbc4:	cmp	r1, #0
    fbc8:	str	r1, [r0, #4]
    fbcc:	beq	fbdc <rb_linebuf_attach+0x48>
    fbd0:	add	r1, r1, #8
    fbd4:	str	r0, [r1]
    fbd8:	b	fbe8 <rb_linebuf_attach+0x54>
    fbdc:	ldr	r1, [r4]
    fbe0:	cmp	r1, #0
    fbe4:	beq	fc38 <rb_linebuf_attach+0xa4>
    fbe8:	str	r0, [r4, #4]
    fbec:	add	r2, r4, #8
    fbf0:	ldm	r2, {r0, r1, r2}
    fbf4:	ldr	r3, [r4, #24]
    fbf8:	add	r0, r0, #1
    fbfc:	str	r0, [r4, #8]
    fc00:	add	r0, r2, #1
    fc04:	add	r2, r3, #1
    fc08:	str	r0, [r4, #16]
    fc0c:	ldr	r0, [r7, #1028]	; 0x404
    fc10:	str	r2, [r4, #24]
    fc14:	add	r0, r1, r0
    fc18:	str	r0, [r4, #12]
    fc1c:	ldr	r0, [r7, #1032]	; 0x408
    fc20:	add	r0, r0, #1
    fc24:	str	r0, [r7, #1032]	; 0x408
    fc28:	ldr	r5, [r5, #8]
    fc2c:	cmp	r5, #0
    fc30:	bne	fbb0 <rb_linebuf_attach+0x1c>
    fc34:	b	fc40 <rb_linebuf_attach+0xac>
    fc38:	mov	r1, r4
    fc3c:	b	fbd4 <rb_linebuf_attach+0x40>
    fc40:	pop	{r4, r5, r6, r7, fp, pc}

0000fc44 <rb_linebuf_put>:
    fc44:	push	{r4, r5, r6, sl, fp, lr}
    fc48:	add	fp, sp, #16
    fc4c:	mov	r4, r1
    fc50:	mov	r5, r0
    fc54:	bl	f9c8 <rb_linebuf_new_line>
    fc58:	movw	r1, #1023	; 0x3ff
    fc5c:	mov	r2, r4
    fc60:	mov	r6, r0
    fc64:	bl	4fa8 <rb_fsnprint@plt>
    fc68:	bic	r0, r0, r0, asr #31
    fc6c:	movw	r1, #1022	; 0x3fe
    fc70:	mov	r2, #0
    fc74:	cmp	r0, r1
    fc78:	movcc	r1, r0
    fc7c:	add	r0, r1, #2
    fc80:	add	r1, r6, r1
    fc84:	strb	r2, [r6, r0]
    fc88:	movw	r2, #2573	; 0xa0d
    fc8c:	strh	r2, [r1]
    fc90:	mov	r1, #1
    fc94:	strb	r1, [r6, #1025]	; 0x401
    fc98:	str	r0, [r6, #1028]	; 0x404
    fc9c:	ldr	r1, [r5, #12]
    fca0:	add	r0, r1, r0
    fca4:	str	r0, [r5, #12]
    fca8:	pop	{r4, r5, r6, sl, fp, pc}

0000fcac <rb_linebuf_flush>:
    fcac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    fcb0:	add	fp, sp, #24
    fcb4:	mov	r9, r1
    fcb8:	mov	r5, r0
    fcbc:	bl	4de0 <rb_fd_ssl@plt>
    fcc0:	cmp	r0, #0
    fcc4:	beq	fd3c <rb_linebuf_flush+0x90>
    fcc8:	ldr	r0, [r9]
    fccc:	cmp	r0, #0
    fcd0:	beq	fe30 <rb_linebuf_flush+0x184>
    fcd4:	ldr	r6, [r0]
    fcd8:	ldrb	r0, [r6, #1025]	; 0x401
    fcdc:	cmp	r0, #0
    fce0:	beq	fe30 <rb_linebuf_flush+0x184>
    fce4:	ldr	r0, [r9, #20]
    fce8:	ldr	r2, [r6, #1028]	; 0x404
    fcec:	add	r1, r6, r0
    fcf0:	sub	r2, r2, r0
    fcf4:	mov	r0, r5
    fcf8:	bl	4f6c <rb_write@plt>
    fcfc:	mov	r8, r0
    fd00:	cmp	r0, #1
    fd04:	blt	fe40 <rb_linebuf_flush+0x194>
    fd08:	ldr	r0, [r9, #20]
    fd0c:	add	r0, r0, r8
    fd10:	str	r0, [r9, #20]
    fd14:	ldr	r1, [r6, #1028]	; 0x404
    fd18:	cmp	r0, r1
    fd1c:	bne	fe40 <rb_linebuf_flush+0x194>
    fd20:	mov	r0, #0
    fd24:	mov	r1, r6
    fd28:	str	r0, [r9, #20]
    fd2c:	mov	r0, r9
    fd30:	ldr	r2, [r9]
    fd34:	bl	f4e8 <rb_linebuf_done_line>
    fd38:	b	fe40 <rb_linebuf_flush+0x194>
    fd3c:	ldr	r6, [pc, #272]	; fe54 <rb_linebuf_flush+0x1a8>
    fd40:	mov	r1, #0
    fd44:	mov	r2, #8192	; 0x2000
    fd48:	add	r6, pc, r6
    fd4c:	mov	r0, r6
    fd50:	bl	4f3c <memset@plt>
    fd54:	ldr	r0, [r9]
    fd58:	cmp	r0, #0
    fd5c:	beq	fe30 <rb_linebuf_flush+0x184>
    fd60:	ldr	r1, [r0]
    fd64:	ldrb	r2, [r1, #1025]	; 0x401
    fd68:	cmp	r2, #0
    fd6c:	beq	fe30 <rb_linebuf_flush+0x184>
    fd70:	ldr	r2, [r9, #20]
    fd74:	add	r4, r1, r2
    fd78:	ldr	r1, [r1, #1028]	; 0x404
    fd7c:	str	r4, [r6]
    fd80:	sub	r1, r1, r2
    fd84:	str	r1, [r6, #4]
    fd88:	add	r1, r6, #8
    fd8c:	mov	r6, #1
    fd90:	ldr	r0, [r0, #8]
    fd94:	cmp	r0, #0
    fd98:	ldrne	r2, [r0]
    fd9c:	ldrbne	r3, [r2, #1025]	; 0x401
    fda0:	cmpne	r3, #0
    fda4:	beq	fdc8 <rb_linebuf_flush+0x11c>
    fda8:	str	r2, [r1]
    fdac:	add	r6, r6, #1
    fdb0:	ldr	r2, [r2, #1028]	; 0x404
    fdb4:	cmp	r6, #1024	; 0x400
    fdb8:	str	r2, [r1, #4]
    fdbc:	add	r1, r1, #8
    fdc0:	bne	fd90 <rb_linebuf_flush+0xe4>
    fdc4:	mov	r6, #1024	; 0x400
    fdc8:	ldr	r1, [pc, #136]	; fe58 <rb_linebuf_flush+0x1ac>
    fdcc:	mov	r0, r5
    fdd0:	mov	r2, r6
    fdd4:	add	r1, pc, r1
    fdd8:	bl	53d4 <rb_writev@plt>
    fddc:	mov	r8, r0
    fde0:	cmp	r0, #1
    fde4:	blt	fe40 <rb_linebuf_flush+0x194>
    fde8:	ldr	r7, [r9]
    fdec:	ldr	r0, [r9, #20]
    fdf0:	mov	r5, r8
    fdf4:	ldr	r1, [r7]
    fdf8:	ldr	r2, [r1, #1028]	; 0x404
    fdfc:	sub	r4, r2, r0
    fe00:	cmp	r5, r4
    fe04:	blt	fe48 <rb_linebuf_flush+0x19c>
    fe08:	ldr	r2, [r9]
    fe0c:	ldr	r7, [r7, #8]
    fe10:	mov	r0, r9
    fe14:	bl	f4e8 <rb_linebuf_done_line>
    fe18:	mov	r0, #0
    fe1c:	sub	r5, r5, r4
    fe20:	subs	r6, r6, #1
    fe24:	str	r0, [r9, #20]
    fe28:	bne	fdf4 <rb_linebuf_flush+0x148>
    fe2c:	b	fe40 <rb_linebuf_flush+0x194>
    fe30:	bl	55e4 <__errno_location@plt>
    fe34:	mov	r1, #11
    fe38:	mvn	r8, #0
    fe3c:	str	r1, [r0]
    fe40:	mov	r0, r8
    fe44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    fe48:	add	r0, r0, r5
    fe4c:	str	r0, [r9, #20]
    fe50:	b	fe40 <rb_linebuf_flush+0x194>
    fe54:	.word	0x0002b598
    fe58:	.word	0x0002b50c

0000fe5c <rb_count_rb_linebuf_memory>:
    fe5c:	push	{fp, lr}
    fe60:	mov	fp, sp
    fe64:	sub	sp, sp, #8
    fe68:	mov	r3, r1
    fe6c:	mov	r1, r0
    fe70:	ldr	r0, [pc, #24]	; fe90 <rb_count_rb_linebuf_memory+0x34>
    fe74:	mov	r2, #0
    fe78:	ldr	r0, [pc, r0]
    fe7c:	str	r2, [sp]
    fe80:	mov	r2, #0
    fe84:	bl	5608 <rb_bh_usage@plt>
    fe88:	mov	sp, fp
    fe8c:	pop	{fp, pc}
    fe90:	.word	0x0002b460

0000fe94 <rb_init_rb_dlink_nodes>:
    fe94:	push	{fp, lr}
    fe98:	mov	fp, sp
    fe9c:	ldr	r2, [pc, #36]	; fec8 <rb_init_rb_dlink_nodes+0x34>
    fea0:	mov	r1, r0
    fea4:	mov	r0, #12
    fea8:	add	r2, pc, r2
    feac:	bl	53b0 <rb_bh_create@plt>
    feb0:	ldr	r1, [pc, #20]	; fecc <rb_init_rb_dlink_nodes+0x38>
    feb4:	cmp	r0, #0
    feb8:	add	r1, pc, r1
    febc:	str	r0, [r1]
    fec0:	popne	{fp, pc}
    fec4:	bl	5284 <rb_outofmemory@plt>
    fec8:	.word	0x00006a43
    fecc:	.word	0x0002d42c

0000fed0 <rb_make_rb_dlink_node>:
    fed0:	ldr	r0, [pc, #4]	; fedc <rb_make_rb_dlink_node+0xc>
    fed4:	ldr	r0, [pc, r0]
    fed8:	b	5254 <rb_bh_alloc@plt>
    fedc:	.word	0x0002d410

0000fee0 <rb_free_rb_dlink_node>:
    fee0:	mov	r1, r0
    fee4:	ldr	r0, [pc, #4]	; fef0 <rb_free_rb_dlink_node+0x10>
    fee8:	ldr	r0, [pc, r0]
    feec:	b	51dc <rb_bh_free@plt>
    fef0:	.word	0x0002d3fc

0000fef4 <rb_string_to_array>:
    fef4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    fef8:	add	fp, sp, #24
    fefc:	mov	r4, r1
    ff00:	mov	r1, r0
    ff04:	mov	r0, #0
    ff08:	cmp	r1, #0
    ff0c:	beq	ffb8 <rb_string_to_array+0xc4>
    ff10:	ldrb	r3, [r1]
    ff14:	cmp	r3, #0
    ff18:	beq	ffb8 <rb_string_to_array+0xc4>
    ff1c:	uxtb	r7, r3
    ff20:	cmp	r7, #32
    ff24:	bne	ff30 <rb_string_to_array+0x3c>
    ff28:	ldrb	r3, [r1, #1]!
    ff2c:	b	ff1c <rb_string_to_array+0x28>
    ff30:	cmp	r7, #0
    ff34:	beq	ffb8 <rb_string_to_array+0xc4>
    ff38:	sub	r6, r2, #1
    ff3c:	mov	r8, #0
    ff40:	mov	r0, #0
    ff44:	mov	r5, r0
    ff48:	uxtb	r0, r3
    ff4c:	cmp	r0, #58	; 0x3a
    ff50:	beq	ffbc <rb_string_to_array+0xc8>
    ff54:	str	r1, [r4, r5, lsl #2]
    ff58:	mov	r0, r1
    ff5c:	mov	r1, #32
    ff60:	bl	4ed0 <strchr@plt>
    ff64:	mov	r2, r0
    ff68:	add	r0, r5, #1
    ff6c:	cmp	r2, #0
    ff70:	beq	ffb8 <rb_string_to_array+0xc4>
    ff74:	mov	r7, r2
    ff78:	strb	r8, [r7], #1
    ff7c:	mov	r1, r7
    ff80:	ldrb	r3, [r1]
    ff84:	cmp	r3, #32
    ff88:	bne	ff94 <rb_string_to_array+0xa0>
    ff8c:	add	r1, r1, #1
    ff90:	b	ff80 <rb_string_to_array+0x8c>
    ff94:	cmp	r3, #0
    ff98:	beq	ffb8 <rb_string_to_array+0xc4>
    ff9c:	cmp	r0, r6
    ffa0:	blt	ff44 <rb_string_to_array+0x50>
    ffa4:	ldrb	r1, [r2, #1]
    ffa8:	cmp	r1, #58	; 0x3a
    ffac:	addeq	r7, r2, #2
    ffb0:	str	r7, [r4, r0, lsl #2]
    ffb4:	add	r0, r5, #2
    ffb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    ffbc:	add	r0, r1, #1
    ffc0:	str	r0, [r4, r5, lsl #2]
    ffc4:	add	r0, r5, #1
    ffc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000ffcc <rb_strcasecmp>:
    ffcc:	b	4ee8 <strcasecmp@plt>

0000ffd0 <rb_strncasecmp>:
    ffd0:	b	5278 <strncasecmp@plt>

0000ffd4 <rb_strcasestr>:
    ffd4:	b	4d50 <strcasestr@plt>

0000ffd8 <rb_strlcat>:
    ffd8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    ffdc:	add	fp, sp, #24
    ffe0:	mov	r4, r2
    ffe4:	mov	r8, r1
    ffe8:	mov	r9, r0
    ffec:	bl	50e0 <strlen@plt>
    fff0:	mov	r7, r0
    fff4:	sub	r6, r4, r0
    fff8:	mov	r0, r8
    fffc:	bl	50e0 <strlen@plt>
   10000:	cmp	r0, r6
   10004:	mov	r4, r0
   10008:	mov	r5, r0
   1000c:	mov	r1, r8
   10010:	subcs	r4, r6, #1
   10014:	add	r6, r9, r7
   10018:	mov	r0, r6
   1001c:	mov	r2, r4
   10020:	bl	5104 <memcpy@plt>
   10024:	mov	r0, #0
   10028:	strb	r0, [r6, r4]
   1002c:	add	r0, r5, r7
   10030:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00010034 <rb_strlcpy>:
   10034:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   10038:	add	fp, sp, #24
   1003c:	mov	r8, r0
   10040:	mov	r0, r1
   10044:	mov	r7, r2
   10048:	mov	r6, r1
   1004c:	bl	50e0 <strlen@plt>
   10050:	mov	r4, r0
   10054:	cmp	r7, #0
   10058:	beq	10080 <rb_strlcpy+0x4c>
   1005c:	cmp	r4, r7
   10060:	mov	r5, r4
   10064:	mov	r0, r8
   10068:	mov	r1, r6
   1006c:	subcs	r5, r7, #1
   10070:	mov	r2, r5
   10074:	bl	5104 <memcpy@plt>
   10078:	mov	r0, #0
   1007c:	strb	r0, [r8, r5]
   10080:	mov	r0, r4
   10084:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00010088 <rb_strnlen>:
   10088:	b	5314 <strnlen@plt>

0001008c <rb_snprintf_append>:
   1008c:	sub	sp, sp, #4
   10090:	push	{r4, r5, r6, r7, fp, lr}
   10094:	add	fp, sp, #16
   10098:	sub	sp, sp, #4
   1009c:	cmp	r1, #0
   100a0:	str	r3, [fp, #8]
   100a4:	beq	100d0 <rb_snprintf_append+0x44>
   100a8:	mov	r4, r2
   100ac:	mov	r6, r1
   100b0:	mov	r5, r0
   100b4:	bl	50e0 <strlen@plt>
   100b8:	cmp	r0, r6
   100bc:	ble	100d8 <rb_snprintf_append+0x4c>
   100c0:	sub	r0, r6, #1
   100c4:	mov	r1, #0
   100c8:	strb	r1, [r5, r0]
   100cc:	b	100fc <rb_snprintf_append+0x70>
   100d0:	mvn	r0, #0
   100d4:	b	100fc <rb_snprintf_append+0x70>
   100d8:	mov	r7, r0
   100dc:	add	r3, fp, #8
   100e0:	add	r0, r5, r0
   100e4:	mov	r2, r4
   100e8:	sub	r1, r6, r7
   100ec:	str	r3, [sp]
   100f0:	bl	4e7c <vsnprintf@plt>
   100f4:	cmp	r0, #0
   100f8:	addpl	r0, r0, r7
   100fc:	sub	sp, fp, #16
   10100:	pop	{r4, r5, r6, r7, fp, lr}
   10104:	add	sp, sp, #4
   10108:	bx	lr

0001010c <rb_snprintf_try_append>:
   1010c:	sub	sp, sp, #4
   10110:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10114:	add	fp, sp, #24
   10118:	sub	sp, sp, #4
   1011c:	mvn	r4, #0
   10120:	cmp	r1, #0
   10124:	str	r3, [fp, #8]
   10128:	beq	10198 <rb_snprintf_try_append+0x8c>
   1012c:	mov	r9, r2
   10130:	mov	r5, r1
   10134:	mov	r6, r0
   10138:	bl	50e0 <strlen@plt>
   1013c:	cmp	r0, r5
   10140:	ble	10154 <rb_snprintf_try_append+0x48>
   10144:	add	r0, r5, r6
   10148:	mov	r1, #0
   1014c:	strb	r1, [r0, #-1]
   10150:	b	10198 <rb_snprintf_try_append+0x8c>
   10154:	add	r8, r6, r0
   10158:	add	r3, fp, #8
   1015c:	mov	r7, r0
   10160:	sub	r1, r5, r0
   10164:	mov	r2, r9
   10168:	mov	r0, r8
   1016c:	str	r3, [sp]
   10170:	bl	4e7c <vsnprintf@plt>
   10174:	mov	r4, r0
   10178:	cmp	r0, #0
   1017c:	bmi	10198 <rb_snprintf_try_append+0x8c>
   10180:	add	r4, r4, r7
   10184:	sub	r0, r5, #1
   10188:	cmp	r4, r0
   1018c:	movgt	r0, #0
   10190:	mvngt	r4, #0
   10194:	strbgt	r0, [r8]
   10198:	mov	r0, r4
   1019c:	sub	sp, fp, #24
   101a0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   101a4:	add	sp, sp, #4
   101a8:	bx	lr

000101ac <rb_basename>:
   101ac:	push	{r4, sl, fp, lr}
   101b0:	add	fp, sp, #8
   101b4:	mov	r1, #47	; 0x2f
   101b8:	mov	r4, r0
   101bc:	bl	4f60 <strrchr@plt>
   101c0:	cmp	r0, #0
   101c4:	addne	r4, r0, #1
   101c8:	mov	r0, r4
   101cc:	bl	50e0 <strlen@plt>
   101d0:	add	r0, r0, #1
   101d4:	bl	52a8 <malloc@plt>
   101d8:	cmp	r0, #0
   101dc:	beq	101ec <rb_basename+0x40>
   101e0:	mov	r1, r4
   101e4:	pop	{r4, sl, fp, lr}
   101e8:	b	5194 <strcpy@plt>
   101ec:	bl	5284 <rb_outofmemory@plt>

000101f0 <rb_dirname>:
   101f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   101f4:	add	fp, sp, #24
   101f8:	mov	r1, #47	; 0x2f
   101fc:	mov	r4, r0
   10200:	bl	4f60 <strrchr@plt>
   10204:	cmp	r0, #0
   10208:	beq	1027c <rb_dirname+0x8c>
   1020c:	cmp	r0, r4
   10210:	bls	10228 <rb_dirname+0x38>
   10214:	ldrb	r1, [r0]
   10218:	cmp	r1, #47	; 0x2f
   1021c:	bne	10228 <rb_dirname+0x38>
   10220:	sub	r0, r0, #1
   10224:	b	1020c <rb_dirname+0x1c>
   10228:	sub	r8, r0, r4
   1022c:	add	r6, r8, #2
   10230:	mov	r0, r6
   10234:	bl	52a8 <malloc@plt>
   10238:	cmp	r0, #0
   1023c:	beq	102a0 <rb_dirname+0xb0>
   10240:	mov	r5, r0
   10244:	mov	r0, r4
   10248:	bl	50e0 <strlen@plt>
   1024c:	cmp	r6, #0
   10250:	beq	10298 <rb_dirname+0xa8>
   10254:	cmp	r0, r6
   10258:	mov	r7, r0
   1025c:	mov	r0, r5
   10260:	mov	r1, r4
   10264:	addcs	r7, r8, #1
   10268:	mov	r2, r7
   1026c:	bl	5104 <memcpy@plt>
   10270:	mov	r0, #0
   10274:	strb	r0, [r5, r7]
   10278:	b	10298 <rb_dirname+0xa8>
   1027c:	mov	r0, #2
   10280:	bl	52a8 <malloc@plt>
   10284:	cmp	r0, #0
   10288:	beq	102a0 <rb_dirname+0xb0>
   1028c:	mov	r5, r0
   10290:	mov	r0, #46	; 0x2e
   10294:	strh	r0, [r5]
   10298:	mov	r0, r5
   1029c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   102a0:	bl	5284 <rb_outofmemory@plt>

000102a4 <rb_fsnprint>:
   102a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102a8:	add	fp, sp, #28
   102ac:	sub	sp, sp, #12
   102b0:	cmp	r2, #0
   102b4:	str	r0, [sp, #4]
   102b8:	beq	103d4 <rb_fsnprint+0x130>
   102bc:	sub	r0, r1, #1
   102c0:	mov	r4, r2
   102c4:	mov	r8, r1
   102c8:	mov	r9, #0
   102cc:	str	r1, [sp]
   102d0:	str	r0, [sp, #8]
   102d4:	mov	r0, r1
   102d8:	ldr	r7, [r4]
   102dc:	cmp	r7, #0
   102e0:	beq	102f0 <rb_fsnprint+0x4c>
   102e4:	sub	r0, r8, r9
   102e8:	cmp	r7, r0
   102ec:	bls	102fc <rb_fsnprint+0x58>
   102f0:	cmp	r0, #0
   102f4:	mov	r7, r0
   102f8:	beq	103e4 <rb_fsnprint+0x140>
   102fc:	ldr	r6, [r4, #4]
   10300:	cmp	r6, #0
   10304:	beq	10334 <rb_fsnprint+0x90>
   10308:	ldr	r0, [sp, #4]
   1030c:	add	sl, r0, r9
   10310:	ldr	r0, [r4, #12]
   10314:	cmp	r0, #0
   10318:	beq	1035c <rb_fsnprint+0xb8>
   1031c:	ldr	r3, [r0]
   10320:	mov	r0, sl
   10324:	mov	r1, r7
   10328:	mov	r2, r6
   1032c:	bl	4e7c <vsnprintf@plt>
   10330:	b	10354 <rb_fsnprint+0xb0>
   10334:	ldr	r3, [r4, #8]
   10338:	cmp	r3, #0
   1033c:	beq	103cc <rb_fsnprint+0x128>
   10340:	ldr	r0, [sp, #4]
   10344:	ldr	r2, [r4, #12]
   10348:	mov	r1, r7
   1034c:	add	r0, r0, r9
   10350:	blx	r3
   10354:	mov	r5, r0
   10358:	b	10390 <rb_fsnprint+0xec>
   1035c:	mov	r0, r6
   10360:	bl	50e0 <strlen@plt>
   10364:	cmp	r0, r7
   10368:	mov	r8, r0
   1036c:	mov	r5, r0
   10370:	mov	r0, sl
   10374:	mov	r1, r6
   10378:	subcs	r8, r7, #1
   1037c:	mov	r2, r8
   10380:	bl	5104 <memcpy@plt>
   10384:	mov	r0, #0
   10388:	strb	r0, [sl, r8]
   1038c:	ldr	r8, [sp]
   10390:	cmp	r5, #0
   10394:	bmi	103e8 <rb_fsnprint+0x144>
   10398:	sub	r0, r7, #1
   1039c:	cmp	r5, r0
   103a0:	movls	r0, r5
   103a4:	add	r9, r0, r9
   103a8:	ldr	r0, [sp, #8]
   103ac:	cmp	r9, r0
   103b0:	bcs	103dc <rb_fsnprint+0x138>
   103b4:	ldr	r4, [r4, #16]
   103b8:	sub	r0, r7, r5
   103bc:	mov	r5, r9
   103c0:	cmp	r4, #0
   103c4:	bne	102d8 <rb_fsnprint+0x34>
   103c8:	b	103e8 <rb_fsnprint+0x144>
   103cc:	mov	r5, #0
   103d0:	b	10398 <rb_fsnprint+0xf4>
   103d4:	mov	r5, #0
   103d8:	b	103e8 <rb_fsnprint+0x144>
   103dc:	ldr	r5, [sp, #8]
   103e0:	b	103e8 <rb_fsnprint+0x144>
   103e4:	mov	r5, r9
   103e8:	mov	r0, r5
   103ec:	sub	sp, fp, #28
   103f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000103f4 <rb_fsnprintf>:
   103f4:	push	{fp, lr}
   103f8:	mov	fp, sp
   103fc:	sub	sp, sp, #24
   10400:	str	r2, [sp, #16]
   10404:	sub	r2, fp, #4
   10408:	add	ip, fp, #8
   1040c:	str	r2, [sp, #12]
   10410:	mov	r2, #0
   10414:	str	ip, [fp, #-4]
   10418:	str	r2, [sp, #8]
   1041c:	stm	sp, {r2, r3}
   10420:	mov	r2, sp
   10424:	bl	4fa8 <rb_fsnprint@plt>
   10428:	mov	sp, fp
   1042c:	pop	{fp, pc}

00010430 <rb_helper_child>:
   10430:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10434:	add	fp, sp, #28
   10438:	sub	sp, sp, #28
   1043c:	str	r2, [sp, #24]
   10440:	mov	r4, r0
   10444:	mov	r8, r3
   10448:	mov	r9, r1
   1044c:	ldr	r0, [pc, #480]	; 10634 <rb_helper_child+0x204>
   10450:	add	r0, pc, r0
   10454:	bl	4eb8 <getenv@plt>
   10458:	mov	r7, r0
   1045c:	ldr	r0, [pc, #468]	; 10638 <rb_helper_child+0x208>
   10460:	add	r0, pc, r0
   10464:	bl	4eb8 <getenv@plt>
   10468:	mov	r5, r0
   1046c:	ldr	r0, [pc, #456]	; 1063c <rb_helper_child+0x20c>
   10470:	add	r0, pc, r0
   10474:	bl	4eb8 <getenv@plt>
   10478:	mov	sl, #0
   1047c:	cmp	r7, #0
   10480:	beq	10624 <rb_helper_child+0x1f4>
   10484:	cmp	r5, #0
   10488:	movne	r6, r0
   1048c:	cmpne	r0, #0
   10490:	beq	10624 <rb_helper_child+0x1f4>
   10494:	mov	r0, #1
   10498:	mov	r1, #84	; 0x54
   1049c:	str	r8, [sp, #12]
   104a0:	str	r4, [sp, #16]
   104a4:	bl	4f00 <calloc@plt>
   104a8:	cmp	r0, #0
   104ac:	beq	10630 <rb_helper_child+0x200>
   104b0:	mov	sl, r0
   104b4:	mov	r0, r7
   104b8:	mov	r1, #0
   104bc:	mov	r2, #10
   104c0:	mov	r4, #0
   104c4:	bl	517c <strtol@plt>
   104c8:	mov	r7, r0
   104cc:	mov	r0, r5
   104d0:	mov	r1, #0
   104d4:	mov	r2, #10
   104d8:	bl	517c <strtol@plt>
   104dc:	mov	r5, r0
   104e0:	mov	r0, r6
   104e4:	mov	r1, #0
   104e8:	mov	r2, #10
   104ec:	bl	517c <strtol@plt>
   104f0:	mov	r8, r0
   104f4:	cmp	r0, #1
   104f8:	blt	1051c <rb_helper_child+0xec>
   104fc:	cmp	r7, r4
   10500:	cmpne	r5, r4
   10504:	beq	10510 <rb_helper_child+0xe0>
   10508:	mov	r0, r4
   1050c:	bl	5248 <close@plt>
   10510:	add	r4, r4, #1
   10514:	cmp	r8, r4
   10518:	bne	104fc <rb_helper_child+0xcc>
   1051c:	str	r9, [sp, #20]
   10520:	mov	r1, #2
   10524:	ldr	r0, [pc, #276]	; 10640 <rb_helper_child+0x210>
   10528:	add	r0, pc, r0
   1052c:	bl	4cb4 <open@plt>
   10530:	cmp	r7, #0
   10534:	mov	r9, r0
   10538:	cmpne	r5, #0
   1053c:	beq	1054c <rb_helper_child+0x11c>
   10540:	mov	r0, r9
   10544:	mov	r1, #0
   10548:	bl	53bc <dup2@plt>
   1054c:	cmp	r7, #1
   10550:	cmpne	r5, #1
   10554:	beq	10564 <rb_helper_child+0x134>
   10558:	mov	r0, r9
   1055c:	mov	r1, #1
   10560:	bl	53bc <dup2@plt>
   10564:	cmp	r7, #2
   10568:	cmpne	r5, #2
   1056c:	beq	1057c <rb_helper_child+0x14c>
   10570:	mov	r0, r9
   10574:	mov	r1, #2
   10578:	bl	53bc <dup2@plt>
   1057c:	ldr	r4, [fp, #20]
   10580:	ldr	r6, [fp, #16]
   10584:	ldr	r2, [fp, #8]
   10588:	cmp	r9, #3
   1058c:	blt	105a0 <rb_helper_child+0x170>
   10590:	mov	r0, r9
   10594:	mov	r9, r2
   10598:	bl	5248 <close@plt>
   1059c:	mov	r2, r9
   105a0:	ldr	r0, [sp, #24]
   105a4:	ldr	r1, [sp, #12]
   105a8:	mov	r3, #0
   105ac:	str	r8, [sp]
   105b0:	str	r6, [sp, #4]
   105b4:	str	r4, [sp, #8]
   105b8:	bl	5338 <rb_lib_init@plt>
   105bc:	ldr	r0, [fp, #12]
   105c0:	bl	5440 <rb_linebuf_init@plt>
   105c4:	add	r0, sl, #4
   105c8:	bl	53ec <rb_linebuf_newbuf@plt>
   105cc:	add	r0, sl, #32
   105d0:	bl	53ec <rb_linebuf_newbuf@plt>
   105d4:	ldr	r2, [pc, #104]	; 10644 <rb_helper_child+0x214>
   105d8:	mov	r0, r7
   105dc:	mov	r1, #8
   105e0:	add	r2, pc, r2
   105e4:	bl	5380 <rb_open@plt>
   105e8:	str	r0, [sl, #60]	; 0x3c
   105ec:	mov	r0, r5
   105f0:	mov	r1, #8
   105f4:	ldr	r2, [pc, #76]	; 10648 <rb_helper_child+0x218>
   105f8:	add	r2, pc, r2
   105fc:	bl	5380 <rb_open@plt>
   10600:	str	r0, [sl, #64]	; 0x40
   10604:	ldr	r0, [sl, #60]	; 0x3c
   10608:	bl	4f30 <rb_set_nb@plt>
   1060c:	ldr	r0, [sl, #64]	; 0x40
   10610:	bl	4f30 <rb_set_nb@plt>
   10614:	ldr	r0, [sp, #16]
   10618:	str	r0, [sl, #76]	; 0x4c
   1061c:	ldr	r0, [sp, #20]
   10620:	str	r0, [sl, #80]	; 0x50
   10624:	mov	r0, sl
   10628:	sub	sp, fp, #28
   1062c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10630:	bl	5284 <rb_outofmemory@plt>
   10634:	.word	0x000064ac
   10638:	.word	0x000064a0
   1063c:	.word	0x00006494
   10640:	.word	0x000063e2
   10644:	.word	0x00006334
   10648:	.word	0x00006330

0001064c <rb_helper_start>:
   1064c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10650:	add	fp, sp, #28
   10654:	sub	sp, sp, #196	; 0xc4
   10658:	mov	r9, r0
   1065c:	mov	r8, r1
   10660:	mov	r0, r1
   10664:	mov	r1, #1
   10668:	mov	r5, r3
   1066c:	mov	r6, r2
   10670:	bl	5044 <access@plt>
   10674:	mov	r4, #0
   10678:	cmn	r0, #1
   1067c:	beq	10860 <rb_helper_start+0x214>
   10680:	mov	r0, #1
   10684:	mov	r1, #84	; 0x54
   10688:	bl	4f00 <calloc@plt>
   1068c:	cmp	r0, #0
   10690:	beq	1086c <rb_helper_start+0x220>
   10694:	ldr	r2, [pc, #468]	; 10870 <rb_helper_start+0x224>
   10698:	add	r7, sp, #60	; 0x3c
   1069c:	mov	sl, r0
   106a0:	mov	r1, #128	; 0x80
   106a4:	mov	r3, r9
   106a8:	mov	r0, r7
   106ac:	add	r2, pc, r2
   106b0:	bl	54a0 <snprintf@plt>
   106b4:	add	r0, sp, #20
   106b8:	mov	r2, r7
   106bc:	add	r1, r0, #4
   106c0:	bl	526c <rb_pipe@plt>
   106c4:	cmn	r0, #1
   106c8:	ble	10858 <rb_helper_start+0x20c>
   106cc:	str	r5, [sp, #8]
   106d0:	str	r6, [sp, #4]
   106d4:	add	r5, sp, #60	; 0x3c
   106d8:	mov	r1, #128	; 0x80
   106dc:	mov	r3, r9
   106e0:	ldr	r2, [pc, #396]	; 10874 <rb_helper_start+0x228>
   106e4:	mov	r0, r5
   106e8:	add	r2, pc, r2
   106ec:	bl	54a0 <snprintf@plt>
   106f0:	add	r0, sp, #12
   106f4:	mov	r2, r5
   106f8:	add	r1, r0, #4
   106fc:	bl	526c <rb_pipe@plt>
   10700:	cmn	r0, #1
   10704:	ble	10858 <rb_helper_start+0x20c>
   10708:	ldr	r0, [sp, #24]
   1070c:	bl	4e10 <rb_get_fd@plt>
   10710:	ldr	r7, [pc, #352]	; 10878 <rb_helper_start+0x22c>
   10714:	add	r6, sp, #44	; 0x2c
   10718:	mov	r3, r0
   1071c:	mov	r1, #16
   10720:	mov	r0, r6
   10724:	add	r7, pc, r7
   10728:	mov	r2, r7
   1072c:	bl	54a0 <snprintf@plt>
   10730:	ldr	r0, [sp, #12]
   10734:	bl	4e10 <rb_get_fd@plt>
   10738:	add	r4, sp, #28
   1073c:	mov	r3, r0
   10740:	mov	r1, #16
   10744:	mov	r2, r7
   10748:	mov	r0, r4
   1074c:	bl	54a0 <snprintf@plt>
   10750:	ldr	r0, [sp, #20]
   10754:	bl	4f30 <rb_set_nb@plt>
   10758:	ldr	r0, [sp, #24]
   1075c:	bl	4f30 <rb_set_nb@plt>
   10760:	ldr	r0, [sp, #12]
   10764:	bl	4f30 <rb_set_nb@plt>
   10768:	ldr	r0, [sp, #16]
   1076c:	bl	4f30 <rb_set_nb@plt>
   10770:	ldr	r0, [pc, #260]	; 1087c <rb_helper_start+0x230>
   10774:	mov	r1, r4
   10778:	mov	r2, #1
   1077c:	add	r0, pc, r0
   10780:	bl	4df8 <rb_setenv@plt>
   10784:	ldr	r0, [pc, #244]	; 10880 <rb_helper_start+0x234>
   10788:	mov	r1, r6
   1078c:	mov	r2, #1
   10790:	add	r0, pc, r0
   10794:	bl	4df8 <rb_setenv@plt>
   10798:	ldr	r0, [pc, #228]	; 10884 <rb_helper_start+0x238>
   1079c:	ldr	r1, [pc, #228]	; 10888 <rb_helper_start+0x23c>
   107a0:	mov	r2, #1
   107a4:	add	r0, pc, r0
   107a8:	add	r1, pc, r1
   107ac:	bl	4df8 <rb_setenv@plt>
   107b0:	ldr	r2, [pc, #212]	; 1088c <rb_helper_start+0x240>
   107b4:	mov	r0, r5
   107b8:	mov	r1, #128	; 0x80
   107bc:	mov	r3, r9
   107c0:	add	r2, pc, r2
   107c4:	bl	54a0 <snprintf@plt>
   107c8:	mov	r4, #0
   107cc:	sub	r1, fp, #36	; 0x24
   107d0:	mov	r0, r8
   107d4:	str	r4, [fp, #-32]	; 0xffffffe0
   107d8:	str	r5, [fp, #-36]	; 0xffffffdc
   107dc:	bl	5488 <rb_spawn_process@plt>
   107e0:	cmn	r0, #1
   107e4:	beq	10838 <rb_helper_start+0x1ec>
   107e8:	mov	r5, r0
   107ec:	ldr	r0, [sp, #24]
   107f0:	bl	5170 <rb_close@plt>
   107f4:	ldr	r0, [sp, #12]
   107f8:	bl	5170 <rb_close@plt>
   107fc:	add	r0, sl, #4
   10800:	bl	53ec <rb_linebuf_newbuf@plt>
   10804:	add	r0, sl, #32
   10808:	bl	53ec <rb_linebuf_newbuf@plt>
   1080c:	ldr	r0, [sp, #20]
   10810:	add	r2, sl, #60	; 0x3c
   10814:	ldr	r1, [sp, #16]
   10818:	stm	r2, {r0, r1, r5}
   1081c:	ldr	r0, [sp, #4]
   10820:	str	r4, [sl, #72]	; 0x48
   10824:	mov	r4, sl
   10828:	str	r0, [sl, #76]	; 0x4c
   1082c:	ldr	r0, [sp, #8]
   10830:	str	r0, [sl, #80]	; 0x50
   10834:	b	10860 <rb_helper_start+0x214>
   10838:	ldr	r0, [sp, #20]
   1083c:	bl	5170 <rb_close@plt>
   10840:	ldr	r0, [sp, #24]
   10844:	bl	5170 <rb_close@plt>
   10848:	ldr	r0, [sp, #12]
   1084c:	bl	5170 <rb_close@plt>
   10850:	ldr	r0, [sp, #16]
   10854:	bl	5170 <rb_close@plt>
   10858:	mov	r0, sl
   1085c:	bl	4ffc <free@plt>
   10860:	mov	r0, r4
   10864:	sub	sp, fp, #28
   10868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1086c:	bl	5284 <rb_outofmemory@plt>
   10870:	.word	0x00006290
   10874:	.word	0x00006265
   10878:	.word	0x0000558d
   1087c:	.word	0x00006180
   10880:	.word	0x00006170
   10884:	.word	0x00006160
   10888:	.word	0x000061b7
   1088c:	.word	0x000061a3

00010890 <rb_helper_restart>:
   10890:	ldr	r1, [r0, #80]	; 0x50
   10894:	bx	r1

00010898 <rb_helper_write_queue>:
   10898:	sub	sp, sp, #8
   1089c:	push	{fp, lr}
   108a0:	mov	fp, sp
   108a4:	sub	sp, sp, #24
   108a8:	str	r2, [fp, #8]
   108ac:	add	r2, fp, #8
   108b0:	str	r3, [fp, #12]
   108b4:	sub	r3, fp, #4
   108b8:	add	r0, r0, #4
   108bc:	str	r2, [fp, #-4]
   108c0:	mov	r2, #0
   108c4:	str	r2, [sp, #16]
   108c8:	stmib	sp, {r1, r2, r3}
   108cc:	mov	r1, sp
   108d0:	str	r2, [sp]
   108d4:	bl	54dc <rb_linebuf_put@plt>
   108d8:	mov	sp, fp
   108dc:	pop	{fp, lr}
   108e0:	add	sp, sp, #8
   108e4:	bx	lr

000108e8 <rb_helper_write_flush>:
   108e8:	mov	r1, r0
   108ec:	ldr	r0, [r0, #64]	; 0x40
   108f0:	b	108f4 <rb_helper_write_sendq>

000108f4 <rb_helper_write_sendq>:
   108f4:	push	{r4, r5, r6, sl, fp, lr}
   108f8:	add	fp, sp, #16
   108fc:	mov	r5, r0
   10900:	ldr	r0, [r1, #16]
   10904:	cmp	r0, #1
   10908:	blt	10968 <rb_helper_write_sendq+0x74>
   1090c:	mov	r4, r1
   10910:	add	r6, r1, #4
   10914:	mov	r0, r5
   10918:	mov	r1, r6
   1091c:	bl	50c8 <rb_linebuf_flush@plt>
   10920:	cmp	r0, #0
   10924:	bgt	10914 <rb_helper_write_sendq+0x20>
   10928:	beq	1096c <rb_helper_write_sendq+0x78>
   1092c:	bl	55e4 <__errno_location@plt>
   10930:	ldr	r0, [r0]
   10934:	bl	4d14 <rb_ignore_errno@plt>
   10938:	cmp	r0, #0
   1093c:	beq	1096c <rb_helper_write_sendq+0x78>
   10940:	ldr	r0, [r4, #16]
   10944:	cmp	r0, #1
   10948:	blt	10968 <rb_helper_write_sendq+0x74>
   1094c:	ldr	r0, [r4, #64]	; 0x40
   10950:	ldr	r2, [pc, #36]	; 1097c <rb_helper_write_sendq+0x88>
   10954:	mov	r1, #2
   10958:	mov	r3, r4
   1095c:	add	r2, pc, r2
   10960:	pop	{r4, r5, r6, sl, fp, lr}
   10964:	b	4dd4 <rb_setselect@plt>
   10968:	pop	{r4, r5, r6, sl, fp, pc}
   1096c:	ldr	r1, [r4, #80]	; 0x50
   10970:	mov	r0, r4
   10974:	pop	{r4, r5, r6, sl, fp, lr}
   10978:	bx	r1
   1097c:	.word	0xffffff90

00010980 <rb_helper_write>:
   10980:	sub	sp, sp, #8
   10984:	push	{r4, sl, fp, lr}
   10988:	add	fp, sp, #8
   1098c:	sub	sp, sp, #24
   10990:	mov	r4, r0
   10994:	add	r0, fp, #8
   10998:	str	r2, [fp, #8]
   1099c:	sub	r2, fp, #12
   109a0:	str	r3, [fp, #12]
   109a4:	str	r0, [fp, #-12]
   109a8:	mov	r0, #0
   109ac:	str	r0, [sp, #16]
   109b0:	str	r2, [sp, #12]
   109b4:	str	r0, [sp, #8]
   109b8:	stm	sp, {r0, r1}
   109bc:	add	r0, r4, #4
   109c0:	mov	r1, sp
   109c4:	bl	54dc <rb_linebuf_put@plt>
   109c8:	ldr	r0, [r4, #64]	; 0x40
   109cc:	mov	r1, r4
   109d0:	bl	108f4 <rb_helper_write_sendq>
   109d4:	sub	sp, fp, #8
   109d8:	pop	{r4, sl, fp, lr}
   109dc:	add	sp, sp, #8
   109e0:	bx	lr

000109e4 <rb_helper_run>:
   109e4:	cmp	r0, #0
   109e8:	bxeq	lr
   109ec:	mov	r1, r0
   109f0:	ldr	r0, [r0, #60]	; 0x3c
   109f4:	b	109f8 <rb_helper_read_cb>

000109f8 <rb_helper_read_cb>:
   109f8:	push	{r4, r5, r6, sl, fp, lr}
   109fc:	add	fp, sp, #16
   10a00:	cmp	r1, #0
   10a04:	beq	10aa8 <rb_helper_read_cb+0xb0>
   10a08:	mov	r4, r1
   10a0c:	ldr	r0, [r1, #60]	; 0x3c
   10a10:	ldr	r1, [pc, #164]	; 10abc <rb_helper_read_cb+0xc4>
   10a14:	mov	r2, #32768	; 0x8000
   10a18:	add	r1, pc, r1
   10a1c:	bl	508c <rb_read@plt>
   10a20:	mov	r2, r0
   10a24:	cmp	r0, #1
   10a28:	blt	10a70 <rb_helper_read_cb+0x78>
   10a2c:	ldr	r6, [pc, #140]	; 10ac0 <rb_helper_read_cb+0xc8>
   10a30:	add	r5, r4, #32
   10a34:	add	r6, pc, r6
   10a38:	mov	r0, r5
   10a3c:	mov	r1, r6
   10a40:	mov	r3, #0
   10a44:	bl	4f90 <rb_linebuf_parse@plt>
   10a48:	ldr	r1, [r4, #76]	; 0x4c
   10a4c:	mov	r0, r4
   10a50:	blx	r1
   10a54:	ldr	r0, [r4, #60]	; 0x3c
   10a58:	mov	r1, r6
   10a5c:	mov	r2, #32768	; 0x8000
   10a60:	bl	508c <rb_read@plt>
   10a64:	mov	r2, r0
   10a68:	cmp	r0, #0
   10a6c:	bgt	10a38 <rb_helper_read_cb+0x40>
   10a70:	cmp	r2, #0
   10a74:	beq	10aac <rb_helper_read_cb+0xb4>
   10a78:	bl	55e4 <__errno_location@plt>
   10a7c:	ldr	r0, [r0]
   10a80:	bl	4d14 <rb_ignore_errno@plt>
   10a84:	cmp	r0, #0
   10a88:	beq	10aac <rb_helper_read_cb+0xb4>
   10a8c:	ldr	r0, [r4, #60]	; 0x3c
   10a90:	ldr	r2, [pc, #44]	; 10ac4 <rb_helper_read_cb+0xcc>
   10a94:	mov	r1, #1
   10a98:	mov	r3, r4
   10a9c:	add	r2, pc, r2
   10aa0:	pop	{r4, r5, r6, sl, fp, lr}
   10aa4:	b	4dd4 <rb_setselect@plt>
   10aa8:	pop	{r4, r5, r6, sl, fp, pc}
   10aac:	ldr	r1, [r4, #80]	; 0x50
   10ab0:	mov	r0, r4
   10ab4:	pop	{r4, r5, r6, sl, fp, lr}
   10ab8:	bx	r1
   10abc:	.word	0x0002c8d0
   10ac0:	.word	0x0002c8b4
   10ac4:	.word	0xffffff54

00010ac8 <rb_helper_close>:
   10ac8:	cmp	r0, #0
   10acc:	bxeq	lr
   10ad0:	push	{r4, sl, fp, lr}
   10ad4:	add	fp, sp, #8
   10ad8:	mov	r4, r0
   10adc:	ldr	r0, [r0, #68]	; 0x44
   10ae0:	mov	r1, #9
   10ae4:	bl	4ff0 <rb_kill@plt>
   10ae8:	ldr	r0, [r4, #60]	; 0x3c
   10aec:	bl	5170 <rb_close@plt>
   10af0:	ldr	r0, [r4, #64]	; 0x40
   10af4:	bl	5170 <rb_close@plt>
   10af8:	mov	r0, r4
   10afc:	pop	{r4, sl, fp, lr}
   10b00:	b	4ffc <free@plt>

00010b04 <rb_helper_read>:
   10b04:	push	{fp, lr}
   10b08:	mov	fp, sp
   10b0c:	sub	sp, sp, #8
   10b10:	mov	r3, #0
   10b14:	add	r0, r0, #32
   10b18:	str	r3, [sp]
   10b1c:	mov	r3, #0
   10b20:	bl	50a4 <rb_linebuf_get@plt>
   10b24:	mov	sp, fp
   10b28:	pop	{fp, pc}

00010b2c <rb_helper_loop>:
   10b2c:	push	{fp, lr}
   10b30:	mov	fp, sp
   10b34:	mov	r4, r1
   10b38:	bl	4c9c <rb_helper_run@plt>
   10b3c:	mov	r0, r4
   10b40:	bl	5050 <rb_lib_loop@plt>

00010b44 <rb_init_netio_devpoll>:
   10b44:	mov	r0, #38	; 0x26
   10b48:	bx	lr

00010b4c <rb_setselect_devpoll>:
   10b4c:	push	{fp, lr}
   10b50:	mov	fp, sp
   10b54:	bl	55e4 <__errno_location@plt>
   10b58:	mov	r1, #38	; 0x26
   10b5c:	str	r1, [r0]
   10b60:	pop	{fp, pc}

00010b64 <rb_select_devpoll>:
   10b64:	push	{fp, lr}
   10b68:	mov	fp, sp
   10b6c:	bl	55e4 <__errno_location@plt>
   10b70:	mov	r1, #38	; 0x26
   10b74:	str	r1, [r0]
   10b78:	mvn	r0, #0
   10b7c:	pop	{fp, pc}

00010b80 <rb_setup_fd_devpoll>:
   10b80:	push	{fp, lr}
   10b84:	mov	fp, sp
   10b88:	bl	55e4 <__errno_location@plt>
   10b8c:	mov	r1, #38	; 0x26
   10b90:	str	r1, [r0]
   10b94:	mvn	r0, #0
   10b98:	pop	{fp, pc}
   10b9c:	andeq	r0, r0, r0

00010ba0 <rb_init_netio_epoll>:
   10ba0:	push	{r4, sl, fp, lr}
   10ba4:	add	fp, sp, #8
   10ba8:	ldr	r0, [pc, #160]	; 10c50 <rb_init_netio_epoll+0xb0>
   10bac:	mov	r1, #0
   10bb0:	add	r0, pc, r0
   10bb4:	strb	r1, [r0]
   10bb8:	ldr	r0, [pc, #148]	; 10c54 <rb_init_netio_epoll+0xb4>
   10bbc:	add	r0, pc, r0
   10bc0:	str	r1, [r0]
   10bc4:	mov	r0, #1
   10bc8:	mov	r1, #12
   10bcc:	bl	4f00 <calloc@plt>
   10bd0:	cmp	r0, #0
   10bd4:	beq	10c44 <rb_init_netio_epoll+0xa4>
   10bd8:	ldr	r1, [pc, #120]	; 10c58 <rb_init_netio_epoll+0xb8>
   10bdc:	add	r1, pc, r1
   10be0:	str	r0, [r1]
   10be4:	bl	4cf0 <getdtablesize@plt>
   10be8:	ldr	r1, [pc, #108]	; 10c5c <rb_init_netio_epoll+0xbc>
   10bec:	ldr	r1, [pc, r1]
   10bf0:	str	r0, [r1, #8]
   10bf4:	bl	4e1c <epoll_create@plt>
   10bf8:	ldr	r1, [pc, #96]	; 10c60 <rb_init_netio_epoll+0xc0>
   10bfc:	cmp	r0, #0
   10c00:	ldr	r1, [pc, r1]
   10c04:	str	r0, [r1]
   10c08:	bmi	10c48 <rb_init_netio_epoll+0xa8>
   10c0c:	ldr	r2, [pc, #80]	; 10c64 <rb_init_netio_epoll+0xc4>
   10c10:	mov	r1, #64	; 0x40
   10c14:	add	r2, pc, r2
   10c18:	bl	5380 <rb_open@plt>
   10c1c:	ldr	r4, [pc, #68]	; 10c68 <rb_init_netio_epoll+0xc8>
   10c20:	ldr	r4, [pc, r4]
   10c24:	ldr	r0, [r4, #8]
   10c28:	lsl	r1, r0, #4
   10c2c:	mov	r0, #1
   10c30:	bl	4f00 <calloc@plt>
   10c34:	cmp	r0, #0
   10c38:	strne	r0, [r4, #4]
   10c3c:	movne	r0, #0
   10c40:	popne	{r4, sl, fp, pc}
   10c44:	bl	5284 <rb_outofmemory@plt>
   10c48:	mvn	r0, #0
   10c4c:	pop	{r4, sl, fp, pc}
   10c50:	.word	0x0003473c
   10c54:	.word	0x0003472c
   10c58:	.word	0x00034714
   10c5c:	.word	0x00034704
   10c60:	.word	0x000346f0
   10c64:	.word	0x00005d5f
   10c68:	.word	0x000346d0

00010c6c <rb_setup_fd_epoll>:
   10c6c:	mov	r0, #0
   10c70:	bx	lr

00010c74 <rb_setselect_epoll>:
   10c74:	push	{fp, lr}
   10c78:	mov	fp, sp
   10c7c:	sub	sp, sp, #16
   10c80:	ldr	ip, [r0, #20]
   10c84:	tst	r1, #1
   10c88:	mov	lr, ip
   10c8c:	beq	10ca8 <rb_setselect_epoll+0x34>
   10c90:	cmp	r2, #0
   10c94:	orr	lr, ip, #1
   10c98:	str	r2, [r0, #28]
   10c9c:	str	r3, [r0, #32]
   10ca0:	biceq	lr, ip, #1
   10ca4:	str	lr, [r0, #20]
   10ca8:	tst	r1, #2
   10cac:	bne	10cb8 <rb_setselect_epoll+0x44>
   10cb0:	mov	r3, lr
   10cb4:	b	10cd0 <rb_setselect_epoll+0x5c>
   10cb8:	cmp	r2, #0
   10cbc:	str	r2, [r0, #36]	; 0x24
   10cc0:	str	r3, [r0, #40]	; 0x28
   10cc4:	orr	r3, lr, #4
   10cc8:	biceq	r3, lr, #4
   10ccc:	str	r3, [r0, #20]
   10cd0:	orrs	r1, r3, ip
   10cd4:	beq	10d38 <rb_setselect_epoll+0xc4>
   10cd8:	cmp	r3, #1
   10cdc:	blt	10cf8 <rb_setselect_epoll+0x84>
   10ce0:	cmp	ip, #0
   10ce4:	beq	10d08 <rb_setselect_epoll+0x94>
   10ce8:	mov	r1, #3
   10cec:	cmp	r3, ip
   10cf0:	bne	10d0c <rb_setselect_epoll+0x98>
   10cf4:	b	10d38 <rb_setselect_epoll+0xc4>
   10cf8:	str	r0, [sp, #8]
   10cfc:	str	r3, [sp]
   10d00:	mov	r1, #2
   10d04:	b	10d18 <rb_setselect_epoll+0xa4>
   10d08:	mov	r1, #1
   10d0c:	orr	r2, r3, #-2147483648	; 0x80000000
   10d10:	str	r0, [sp, #8]
   10d14:	str	r2, [sp]
   10d18:	ldr	r2, [r0, #12]
   10d1c:	ldr	r0, [pc, #60]	; 10d60 <rb_setselect_epoll+0xec>
   10d20:	mov	r3, sp
   10d24:	ldr	r0, [pc, r0]
   10d28:	ldr	r0, [r0]
   10d2c:	bl	5548 <epoll_ctl@plt>
   10d30:	cmp	r0, #0
   10d34:	bne	10d40 <rb_setselect_epoll+0xcc>
   10d38:	mov	sp, fp
   10d3c:	pop	{fp, pc}
   10d40:	bl	55e4 <__errno_location@plt>
   10d44:	ldr	r0, [r0]
   10d48:	bl	4cd8 <strerror@plt>
   10d4c:	mov	r1, r0
   10d50:	ldr	r0, [pc, #12]	; 10d64 <rb_setselect_epoll+0xf0>
   10d54:	add	r0, pc, r0
   10d58:	bl	5224 <rb_lib_log@plt>
   10d5c:	bl	4cfc <abort@plt>
   10d60:	.word	0x000345cc
   10d64:	.word	0x00005c35

00010d68 <rb_select_epoll>:
   10d68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d6c:	add	fp, sp, #28
   10d70:	sub	sp, sp, #20
   10d74:	ldr	r2, [pc, #380]	; 10ef8 <rb_select_epoll+0x190>
   10d78:	mov	r3, r0
   10d7c:	ldr	r2, [pc, r2]
   10d80:	ldm	r2, {r0, r1, r2}
   10d84:	bl	50b0 <epoll_wait@plt>
   10d88:	mov	r4, r0
   10d8c:	bl	55e4 <__errno_location@plt>
   10d90:	ldr	r6, [r0]
   10d94:	mov	sl, r0
   10d98:	bl	5290 <rb_set_time@plt>
   10d9c:	cmn	r4, #1
   10da0:	str	r6, [sl]
   10da4:	ble	10ed8 <rb_select_epoll+0x170>
   10da8:	cmp	r4, #0
   10dac:	beq	10ed0 <rb_select_epoll+0x168>
   10db0:	mov	r6, #0
   10db4:	mov	r9, sp
   10db8:	mov	r5, #0
   10dbc:	ldr	r0, [pc, #312]	; 10efc <rb_select_epoll+0x194>
   10dc0:	ldr	r0, [pc, r0]
   10dc4:	ldr	r0, [r0, #4]
   10dc8:	ldrb	r1, [r0, r5, lsl #4]!
   10dcc:	ldr	r7, [r0, #8]
   10dd0:	tst	r1, #25
   10dd4:	ldr	r8, [r7, #20]
   10dd8:	beq	10dfc <rb_select_epoll+0x94>
   10ddc:	ldr	r2, [r7, #28]
   10de0:	ldr	r1, [r7, #32]
   10de4:	str	r6, [r7, #28]
   10de8:	str	r6, [r7, #32]
   10dec:	cmp	r2, #0
   10df0:	beq	10dfc <rb_select_epoll+0x94>
   10df4:	mov	r0, r7
   10df8:	blx	r2
   10dfc:	ldrb	r0, [r7, #16]
   10e00:	tst	r0, #1
   10e04:	beq	10ec4 <rb_select_epoll+0x15c>
   10e08:	ldr	r0, [pc, #240]	; 10f00 <rb_select_epoll+0x198>
   10e0c:	ldr	r0, [pc, r0]
   10e10:	ldr	r0, [r0, #4]
   10e14:	ldrb	r0, [r0, r5, lsl #4]
   10e18:	tst	r0, #28
   10e1c:	beq	10e4c <rb_select_epoll+0xe4>
   10e20:	ldr	r2, [r7, #36]	; 0x24
   10e24:	ldr	r1, [r7, #40]	; 0x28
   10e28:	str	r6, [r7, #36]	; 0x24
   10e2c:	str	r6, [r7, #40]	; 0x28
   10e30:	cmp	r2, #0
   10e34:	beq	10e4c <rb_select_epoll+0xe4>
   10e38:	mov	r0, r7
   10e3c:	blx	r2
   10e40:	ldrb	r0, [r7, #16]
   10e44:	tst	r0, #1
   10e48:	beq	10ec4 <rb_select_epoll+0x15c>
   10e4c:	ldr	r0, [r7, #28]
   10e50:	ldr	r1, [r7, #36]	; 0x24
   10e54:	cmp	r0, #0
   10e58:	movwne	r0, #1
   10e5c:	cmp	r1, #0
   10e60:	orrne	r0, r0, #4
   10e64:	cmp	r8, r0
   10e68:	beq	10ec4 <rb_select_epoll+0x15c>
   10e6c:	cmp	r0, #0
   10e70:	str	r0, [sp]
   10e74:	str	r0, [r7, #20]
   10e78:	str	r7, [sp, #8]
   10e7c:	mov	r1, #3
   10e80:	mov	r3, r9
   10e84:	orrne	r0, r0, #-2147483648	; 0x80000000
   10e88:	movweq	r1, #2
   10e8c:	strne	r0, [sp]
   10e90:	ldr	r2, [r7, #12]
   10e94:	ldr	r0, [pc, #104]	; 10f04 <rb_select_epoll+0x19c>
   10e98:	ldr	r0, [pc, r0]
   10e9c:	ldr	r0, [r0]
   10ea0:	bl	5548 <epoll_ctl@plt>
   10ea4:	cmp	r0, #0
   10ea8:	beq	10ec4 <rb_select_epoll+0x15c>
   10eac:	ldr	r0, [sl]
   10eb0:	bl	4cd8 <strerror@plt>
   10eb4:	mov	r1, r0
   10eb8:	ldr	r0, [pc, #72]	; 10f08 <rb_select_epoll+0x1a0>
   10ebc:	add	r0, pc, r0
   10ec0:	bl	5224 <rb_lib_log@plt>
   10ec4:	add	r5, r5, #1
   10ec8:	cmp	r4, r5
   10ecc:	bne	10dbc <rb_select_epoll+0x54>
   10ed0:	mov	r0, #0
   10ed4:	b	10ef0 <rb_select_epoll+0x188>
   10ed8:	mov	r0, r6
   10edc:	bl	4d14 <rb_ignore_errno@plt>
   10ee0:	mov	r1, r0
   10ee4:	mov	r0, #0
   10ee8:	cmp	r1, #0
   10eec:	movweq	r0, #5
   10ef0:	sub	sp, fp, #28
   10ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ef8:	.word	0x00034574
   10efc:	.word	0x00034530
   10f00:	.word	0x000344e4
   10f04:	.word	0x00034458
   10f08:	.word	0x00005af8

00010f0c <rb_epoll_supports_event>:
   10f0c:	push	{r4, r5, r6, sl, fp, lr}
   10f10:	add	fp, sp, #16
   10f14:	sub	sp, sp, #288	; 0x120
   10f18:	ldr	r4, [pc, #260]	; 11024 <rb_epoll_supports_event+0x118>
   10f1c:	ldr	r4, [pc, r4]
   10f20:	cmp	r4, #1
   10f24:	beq	10fbc <rb_epoll_supports_event+0xb0>
   10f28:	cmn	r4, #1
   10f2c:	beq	10fb8 <rb_epoll_supports_event+0xac>
   10f30:	ldr	r0, [pc, #240]	; 11028 <rb_epoll_supports_event+0x11c>
   10f34:	add	r1, sp, #128	; 0x80
   10f38:	add	r0, pc, r0
   10f3c:	bl	15108 <__stat>
   10f40:	cmp	r0, #0
   10f44:	beq	10fa8 <rb_epoll_supports_event+0x9c>
   10f48:	mov	r0, #0
   10f4c:	mov	r1, #0
   10f50:	mov	r4, #0
   10f54:	bl	54b8 <timerfd_create@plt>
   10f58:	cmp	r0, #0
   10f5c:	bmi	10f84 <rb_epoll_supports_event+0x78>
   10f60:	bl	5248 <close@plt>
   10f64:	ldr	r0, [pc, #196]	; 11030 <rb_epoll_supports_event+0x124>
   10f68:	mov	r4, #1
   10f6c:	add	r0, pc, r0
   10f70:	str	r4, [r0]
   10f74:	ldr	r0, [pc, #184]	; 11034 <rb_epoll_supports_event+0x128>
   10f78:	add	r0, pc, r0
   10f7c:	strb	r4, [r0]
   10f80:	b	10fbc <rb_epoll_supports_event+0xb0>
   10f84:	mov	r0, #26
   10f88:	str	r4, [fp, #-76]	; 0xffffffb4
   10f8c:	sub	r1, fp, #84	; 0x54
   10f90:	sub	r2, fp, #20
   10f94:	str	r0, [fp, #-80]	; 0xffffffb0
   10f98:	mov	r0, #0
   10f9c:	bl	4e58 <timer_create@plt>
   10fa0:	cmp	r0, #0
   10fa4:	beq	10fc8 <rb_epoll_supports_event+0xbc>
   10fa8:	ldr	r0, [pc, #124]	; 1102c <rb_epoll_supports_event+0x120>
   10fac:	mvn	r1, #0
   10fb0:	add	r0, pc, r0
   10fb4:	str	r1, [r0]
   10fb8:	mov	r4, #0
   10fbc:	mov	r0, r4
   10fc0:	sub	sp, fp, #16
   10fc4:	pop	{r4, r5, r6, sl, fp, pc}
   10fc8:	ldr	r0, [fp, #-20]	; 0xffffffec
   10fcc:	bl	5374 <timer_delete@plt>
   10fd0:	mov	r5, sp
   10fd4:	mov	r0, r5
   10fd8:	bl	4ccc <sigemptyset@plt>
   10fdc:	mvn	r0, #0
   10fe0:	mov	r1, r5
   10fe4:	mov	r2, #0
   10fe8:	mvn	r6, #0
   10fec:	mov	r4, #0
   10ff0:	bl	4d74 <signalfd@plt>
   10ff4:	cmn	r0, #1
   10ff8:	ble	11014 <rb_epoll_supports_event+0x108>
   10ffc:	bl	5248 <close@plt>
   11000:	ldr	r0, [pc, #52]	; 1103c <rb_epoll_supports_event+0x130>
   11004:	mov	r4, #1
   11008:	add	r0, pc, r0
   1100c:	str	r4, [r0]
   11010:	b	10fbc <rb_epoll_supports_event+0xb0>
   11014:	ldr	r0, [pc, #28]	; 11038 <rb_epoll_supports_event+0x12c>
   11018:	add	r0, pc, r0
   1101c:	str	r6, [r0]
   11020:	b	10fbc <rb_epoll_supports_event+0xb0>
   11024:	.word	0x000343cc
   11028:	.word	0x00005aa4
   1102c:	.word	0x00034338
   11030:	.word	0x0003437c
   11034:	.word	0x00034374
   11038:	.word	0x000342d0
   1103c:	.word	0x000342e0

00011040 <rb_epoll_init_event>:
   11040:	push	{r4, r5, fp, lr}
   11044:	add	fp, sp, #8
   11048:	sub	sp, sp, #128	; 0x80
   1104c:	bl	10f0c <rb_epoll_supports_event>
   11050:	ldr	r0, [pc, #168]	; 11100 <rb_epoll_init_event+0xc0>
   11054:	add	r0, pc, r0
   11058:	ldrb	r0, [r0]
   1105c:	cmp	r0, #0
   11060:	bne	110f8 <rb_epoll_init_event+0xb8>
   11064:	mov	r4, sp
   11068:	mov	r0, r4
   1106c:	bl	4ccc <sigemptyset@plt>
   11070:	bl	4db0 <__libc_current_sigrtmin@plt>
   11074:	mov	r1, r0
   11078:	mov	r0, r4
   1107c:	bl	5188 <sigaddset@plt>
   11080:	mov	r0, #0
   11084:	mov	r1, r4
   11088:	mov	r2, #0
   1108c:	bl	52b4 <sigprocmask@plt>
   11090:	mov	r0, r4
   11094:	bl	4ccc <sigemptyset@plt>
   11098:	bl	4db0 <__libc_current_sigrtmin@plt>
   1109c:	mov	r1, r0
   110a0:	mov	r0, r4
   110a4:	bl	5188 <sigaddset@plt>
   110a8:	mvn	r0, #0
   110ac:	mov	r1, r4
   110b0:	mov	r2, #0
   110b4:	mvn	r5, #0
   110b8:	bl	4d74 <signalfd@plt>
   110bc:	cmn	r0, #1
   110c0:	beq	110ec <rb_epoll_init_event+0xac>
   110c4:	ldr	r2, [pc, #60]	; 11108 <rb_epoll_init_event+0xc8>
   110c8:	mov	r1, #64	; 0x40
   110cc:	add	r2, pc, r2
   110d0:	bl	5380 <rb_open@plt>
   110d4:	mov	r4, r0
   110d8:	bl	4f30 <rb_set_nb@plt>
   110dc:	mov	r0, r4
   110e0:	mov	r1, #0
   110e4:	bl	11110 <signalfd_handler>
   110e8:	b	110f8 <rb_epoll_init_event+0xb8>
   110ec:	ldr	r0, [pc, #16]	; 11104 <rb_epoll_init_event+0xc4>
   110f0:	add	r0, pc, r0
   110f4:	str	r5, [r0]
   110f8:	sub	sp, fp, #8
   110fc:	pop	{r4, r5, fp, pc}
   11100:	.word	0x00034298
   11104:	.word	0x000341f8
   11108:	.word	0x00005928
   1110c:	.word	0xe320f000

00011110 <signalfd_handler>:
   11110:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11114:	add	fp, sp, #24
   11118:	add	r1, pc, #264	; 0x108
   1111c:	ldr	r5, [pc, #276]	; 11238 <signalfd_handler+0x128>
   11120:	vmov.i32	q11, #128	; 0x00000080
   11124:	vmov.i32	q12, #4	; 0x00000004
   11128:	mov	r4, r0
   1112c:	mov	r0, #0
   11130:	vld1.64	{d16-d17}, [r1]
   11134:	ldr	r1, [pc, #256]	; 1123c <signalfd_handler+0x12c>
   11138:	add	r5, pc, r5
   1113c:	vdup.32	q9, r5
   11140:	add	r1, pc, r1
   11144:	vshl.s32	q13, q8, #7
   11148:	vadd.i32	q8, q8, q12
   1114c:	add	r2, r1, r0
   11150:	add	r0, r0, #32
   11154:	cmp	r0, #128	; 0x80
   11158:	vadd.i32	q10, q9, q13
   1115c:	vst2.32	{d20-d23}, [r2]
   11160:	bne	11144 <signalfd_handler+0x34>
   11164:	mov	r0, r4
   11168:	bl	4e10 <rb_get_fd@plt>
   1116c:	ldr	r1, [pc, #204]	; 11240 <signalfd_handler+0x130>
   11170:	mov	r2, #16
   11174:	add	r1, pc, r1
   11178:	bl	5560 <readv@plt>
   1117c:	cmp	r0, #0
   11180:	beq	11214 <signalfd_handler+0x104>
   11184:	ldr	r8, [pc, #184]	; 11244 <signalfd_handler+0x134>
   11188:	add	r5, r5, #48	; 0x30
   1118c:	add	r8, pc, r8
   11190:	cmp	r0, #0
   11194:	bmi	111e4 <signalfd_handler+0xd4>
   11198:	cmp	r0, #128	; 0x80
   1119c:	blt	111c4 <signalfd_handler+0xb4>
   111a0:	lsr	r7, r0, #7
   111a4:	mov	r6, r5
   111a8:	ldr	r0, [r6]
   111ac:	cmp	r0, #0
   111b0:	beq	111b8 <signalfd_handler+0xa8>
   111b4:	bl	51ac <rb_run_one_event@plt>
   111b8:	add	r6, r6, #128	; 0x80
   111bc:	subs	r7, r7, #1
   111c0:	bne	111a8 <signalfd_handler+0x98>
   111c4:	mov	r0, r4
   111c8:	bl	4e10 <rb_get_fd@plt>
   111cc:	mov	r1, r8
   111d0:	mov	r2, #16
   111d4:	bl	5560 <readv@plt>
   111d8:	cmp	r0, #0
   111dc:	bne	11190 <signalfd_handler+0x80>
   111e0:	b	11214 <signalfd_handler+0x104>
   111e4:	bl	55e4 <__errno_location@plt>
   111e8:	ldr	r0, [r0]
   111ec:	bl	4d14 <rb_ignore_errno@plt>
   111f0:	cmp	r0, #0
   111f4:	beq	11214 <signalfd_handler+0x104>
   111f8:	ldr	r2, [pc, #72]	; 11248 <signalfd_handler+0x138>
   111fc:	mov	r0, r4
   11200:	mov	r1, #1
   11204:	mov	r3, #0
   11208:	add	r2, pc, r2
   1120c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11210:	b	4dd4 <rb_setselect@plt>
   11214:	mov	r0, r4
   11218:	bl	5170 <rb_close@plt>
   1121c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11220:	b	11040 <rb_epoll_init_event>
   11224:	nop	{0}
   11228:	.word	0x00000000
   1122c:	.word	0x00000001
   11230:	.word	0x00000002
   11234:	.word	0x00000003
   11238:	.word	0x000341c0
   1123c:	.word	0x000349b8
   11240:	.word	0x00034984
   11244:	.word	0x0003496c
   11248:	.word	0xffffff00

0001124c <rb_epoll_sched_event>:
   1124c:	push	{r4, r5, r6, r7, fp, lr}
   11250:	add	fp, sp, #16
   11254:	sub	sp, sp, #80	; 0x50
   11258:	mov	r4, r0
   1125c:	ldr	r0, [pc, #536]	; 1147c <rb_epoll_sched_event+0x230>
   11260:	mov	r6, r1
   11264:	add	r0, pc, r0
   11268:	ldrb	r0, [r0]
   1126c:	cmp	r0, #1
   11270:	bne	1133c <rb_epoll_sched_event+0xf0>
   11274:	mov	r0, #0
   11278:	mov	r1, #0
   1127c:	mov	r5, #0
   11280:	bl	54b8 <timerfd_create@plt>
   11284:	cmn	r0, #1
   11288:	ble	11400 <rb_epoll_sched_event+0x1b4>
   1128c:	str	r5, [sp, #20]
   11290:	str	r5, [sp, #16]
   11294:	str	r5, [sp, #28]
   11298:	str	r6, [sp, #24]
   1129c:	mov	r7, r0
   112a0:	ldr	r0, [r4, #24]
   112a4:	cmp	r0, #0
   112a8:	beq	112c0 <rb_epoll_sched_event+0x74>
   112ac:	add	r0, sp, #16
   112b0:	add	r0, r0, #8
   112b4:	ldrd	r0, [r0]
   112b8:	str	r1, [sp, #20]
   112bc:	str	r0, [sp, #16]
   112c0:	add	r2, sp, #16
   112c4:	mov	r0, r7
   112c8:	mov	r1, #0
   112cc:	mov	r3, #0
   112d0:	mov	r5, #0
   112d4:	bl	553c <timerfd_settime@plt>
   112d8:	cmn	r0, #1
   112dc:	ble	11448 <rb_epoll_sched_event+0x1fc>
   112e0:	ldr	r3, [r4, #20]
   112e4:	ldr	r5, [pc, #412]	; 11488 <rb_epoll_sched_event+0x23c>
   112e8:	ldr	r2, [pc, #412]	; 1148c <rb_epoll_sched_event+0x240>
   112ec:	mov	r1, #136	; 0x88
   112f0:	add	r5, pc, r5
   112f4:	add	r2, pc, r2
   112f8:	mov	r0, r5
   112fc:	bl	54a0 <snprintf@plt>
   11300:	mov	r0, r7
   11304:	mov	r1, #64	; 0x40
   11308:	mov	r2, r5
   1130c:	bl	5380 <rb_open@plt>
   11310:	mov	r6, r0
   11314:	bl	4f30 <rb_set_nb@plt>
   11318:	str	r6, [r4, #40]	; 0x28
   1131c:	mov	r0, r6
   11320:	mov	r1, #1
   11324:	mov	r3, r4
   11328:	mov	r5, #1
   1132c:	ldr	r2, [pc, #348]	; 11490 <rb_epoll_sched_event+0x244>
   11330:	add	r2, pc, r2
   11334:	bl	4dd4 <rb_setselect@plt>
   11338:	b	1146c <rb_epoll_sched_event+0x220>
   1133c:	vmov.i32	q8, #0	; 0x00000000
   11340:	add	r0, sp, #16
   11344:	add	r1, r0, #16
   11348:	vst1.64	{d16-d17}, [r1]
   1134c:	add	r1, r0, #32
   11350:	vst1.64	{d16-d17}, [r1]
   11354:	mov	r1, #48	; 0x30
   11358:	vst1.64	{d16-d17}, [r0], r1
   1135c:	mov	r1, #4
   11360:	vst1.64	{d16-d17}, [r0]
   11364:	mov	r0, #1
   11368:	bl	4f00 <calloc@plt>
   1136c:	cmp	r0, #0
   11370:	beq	11478 <rb_epoll_sched_event+0x22c>
   11374:	mov	r7, #0
   11378:	str	r0, [r4, #40]	; 0x28
   1137c:	mov	r5, r0
   11380:	str	r7, [sp, #24]
   11384:	bl	4db0 <__libc_current_sigrtmin@plt>
   11388:	str	r0, [sp, #20]
   1138c:	add	r1, sp, #16
   11390:	mov	r0, #0
   11394:	mov	r2, r5
   11398:	str	r4, [sp, #16]
   1139c:	bl	4e58 <timer_create@plt>
   113a0:	cmp	r0, #0
   113a4:	bmi	11420 <rb_epoll_sched_event+0x1d4>
   113a8:	str	r7, [sp, #4]
   113ac:	str	r7, [sp]
   113b0:	str	r7, [sp, #12]
   113b4:	str	r6, [sp, #8]
   113b8:	ldr	r0, [r4, #24]
   113bc:	cmp	r0, #0
   113c0:	beq	113d4 <rb_epoll_sched_event+0x188>
   113c4:	mov	r0, sp
   113c8:	add	r0, r0, #8
   113cc:	ldrd	r0, [r0]
   113d0:	stm	sp, {r0, r1}
   113d4:	ldr	r0, [r5]
   113d8:	mov	r2, sp
   113dc:	mov	r1, #0
   113e0:	mov	r3, #0
   113e4:	bl	505c <timer_settime@plt>
   113e8:	mov	r5, #1
   113ec:	cmn	r0, #1
   113f0:	bgt	1146c <rb_epoll_sched_event+0x220>
   113f4:	ldr	r4, [pc, #156]	; 11498 <rb_epoll_sched_event+0x24c>
   113f8:	add	r4, pc, r4
   113fc:	b	11428 <rb_epoll_sched_event+0x1dc>
   11400:	bl	55e4 <__errno_location@plt>
   11404:	ldr	r0, [r0]
   11408:	bl	4cd8 <strerror@plt>
   1140c:	mov	r1, r0
   11410:	ldr	r0, [pc, #104]	; 11480 <rb_epoll_sched_event+0x234>
   11414:	add	r0, pc, r0
   11418:	bl	5224 <rb_lib_log@plt>
   1141c:	b	1146c <rb_epoll_sched_event+0x220>
   11420:	ldr	r4, [pc, #108]	; 11494 <rb_epoll_sched_event+0x248>
   11424:	add	r4, pc, r4
   11428:	bl	55e4 <__errno_location@plt>
   1142c:	ldr	r0, [r0]
   11430:	bl	4cd8 <strerror@plt>
   11434:	mov	r1, r0
   11438:	mov	r0, r4
   1143c:	bl	5224 <rb_lib_log@plt>
   11440:	mov	r5, #0
   11444:	b	1146c <rb_epoll_sched_event+0x220>
   11448:	bl	55e4 <__errno_location@plt>
   1144c:	ldr	r0, [r0]
   11450:	bl	4cd8 <strerror@plt>
   11454:	mov	r1, r0
   11458:	ldr	r0, [pc, #36]	; 11484 <rb_epoll_sched_event+0x238>
   1145c:	add	r0, pc, r0
   11460:	bl	5224 <rb_lib_log@plt>
   11464:	mov	r0, r7
   11468:	bl	5248 <close@plt>
   1146c:	mov	r0, r5
   11470:	sub	sp, fp, #16
   11474:	pop	{r4, r5, r6, r7, fp, pc}
   11478:	bl	5284 <rb_outofmemory@plt>
   1147c:	.word	0x00034088
   11480:	.word	0x000055e9
   11484:	.word	0x000055b5
   11488:	.word	0x00034888
   1148c:	.word	0x00005732
   11490:	.word	0x000001b8
   11494:	.word	0x0000563f
   11498:	.word	0x0000567d

0001149c <rb_epoll_unsched_event>:
   1149c:	push	{r4, sl, fp, lr}
   114a0:	add	fp, sp, #8
   114a4:	mov	r4, r0
   114a8:	ldr	r0, [r0, #40]	; 0x28
   114ac:	ldr	r1, [pc, #56]	; 114ec <rb_epoll_unsched_event+0x50>
   114b0:	add	r1, pc, r1
   114b4:	ldrb	r1, [r1]
   114b8:	cmp	r1, #1
   114bc:	bne	114c8 <rb_epoll_unsched_event+0x2c>
   114c0:	bl	5170 <rb_close@plt>
   114c4:	b	114e0 <rb_epoll_unsched_event+0x44>
   114c8:	ldr	r0, [r0]
   114cc:	bl	5374 <timer_delete@plt>
   114d0:	ldr	r0, [r4, #40]	; 0x28
   114d4:	cmp	r0, #0
   114d8:	beq	114e0 <rb_epoll_unsched_event+0x44>
   114dc:	bl	4ffc <free@plt>
   114e0:	mov	r0, #0
   114e4:	str	r0, [r4, #40]	; 0x28
   114e8:	pop	{r4, sl, fp, pc}
   114ec:	.word	0x00033e3c

000114f0 <rb_read_timerfd>:
   114f0:	push	{r4, r5, fp, lr}
   114f4:	add	fp, sp, #8
   114f8:	sub	sp, sp, #8
   114fc:	mov	r5, r0
   11500:	cmp	r1, #0
   11504:	beq	11564 <rb_read_timerfd+0x74>
   11508:	mov	r4, r1
   1150c:	mov	r1, sp
   11510:	mov	r0, r5
   11514:	mov	r2, #8
   11518:	bl	508c <rb_read@plt>
   1151c:	cmp	r0, #0
   11520:	beq	11570 <rb_read_timerfd+0x80>
   11524:	cmn	r0, #1
   11528:	bgt	11540 <rb_read_timerfd+0x50>
   1152c:	bl	55e4 <__errno_location@plt>
   11530:	ldr	r0, [r0]
   11534:	bl	4d14 <rb_ignore_errno@plt>
   11538:	cmp	r0, #0
   1153c:	beq	11570 <rb_read_timerfd+0x80>
   11540:	ldr	r2, [pc, #96]	; 115a8 <rb_read_timerfd+0xb8>
   11544:	mov	r0, r5
   11548:	mov	r1, #1
   1154c:	mov	r3, r4
   11550:	add	r2, pc, r2
   11554:	bl	4dd4 <rb_setselect@plt>
   11558:	mov	r0, r4
   1155c:	bl	51ac <rb_run_one_event@plt>
   11560:	b	1159c <rb_read_timerfd+0xac>
   11564:	mov	r0, r5
   11568:	bl	5170 <rb_close@plt>
   1156c:	b	1159c <rb_read_timerfd+0xac>
   11570:	mov	r0, r5
   11574:	bl	5170 <rb_close@plt>
   11578:	ldr	r4, [r4, #20]
   1157c:	bl	55e4 <__errno_location@plt>
   11580:	ldr	r0, [r0]
   11584:	bl	4cd8 <strerror@plt>
   11588:	mov	r2, r0
   1158c:	ldr	r0, [pc, #16]	; 115a4 <rb_read_timerfd+0xb4>
   11590:	mov	r1, r4
   11594:	add	r0, pc, r0
   11598:	bl	5224 <rb_lib_log@plt>
   1159c:	sub	sp, fp, #8
   115a0:	pop	{r4, r5, fp, pc}
   115a4:	.word	0x0000549e
   115a8:	.word	0xffffff98

000115ac <rb_setup_fd_poll>:
   115ac:	mov	r0, #0
   115b0:	bx	lr

000115b4 <rb_init_netio_poll>:
   115b4:	push	{r4, r5, fp, lr}
   115b8:	add	fp, sp, #8
   115bc:	bl	4d98 <rb_getmaxconnect@plt>
   115c0:	lsl	r1, r0, #3
   115c4:	mov	r0, #1
   115c8:	bl	4f00 <calloc@plt>
   115cc:	cmp	r0, #0
   115d0:	beq	11638 <rb_init_netio_poll+0x84>
   115d4:	ldr	r1, [pc, #96]	; 1163c <rb_init_netio_poll+0x88>
   115d8:	add	r1, pc, r1
   115dc:	str	r0, [r1]
   115e0:	bl	4d98 <rb_getmaxconnect@plt>
   115e4:	ldr	r1, [pc, #84]	; 11640 <rb_init_netio_poll+0x8c>
   115e8:	add	r1, pc, r1
   115ec:	str	r0, [r1]
   115f0:	bl	4d98 <rb_getmaxconnect@plt>
   115f4:	cmp	r0, #1
   115f8:	blt	11620 <rb_init_netio_poll+0x6c>
   115fc:	mov	r4, #0
   11600:	mvn	r5, #0
   11604:	ldr	r0, [pc, #56]	; 11644 <rb_init_netio_poll+0x90>
   11608:	ldr	r0, [pc, r0]
   1160c:	str	r5, [r0, r4, lsl #3]
   11610:	add	r4, r4, #1
   11614:	bl	4d98 <rb_getmaxconnect@plt>
   11618:	cmp	r4, r0
   1161c:	blt	11604 <rb_init_netio_poll+0x50>
   11620:	ldr	r0, [pc, #32]	; 11648 <rb_init_netio_poll+0x94>
   11624:	mov	r1, #0
   11628:	add	r0, pc, r0
   1162c:	str	r1, [r0]
   11630:	mov	r0, #0
   11634:	pop	{r4, r5, fp, pc}
   11638:	bl	5284 <rb_outofmemory@plt>
   1163c:	.word	0x00034628
   11640:	.word	0x00034620
   11644:	.word	0x000345f8
   11648:	.word	0x000345dc

0001164c <rb_setselect_poll>:
   1164c:	push	{r4, r5, r6, r7, fp, lr}
   11650:	add	fp, sp, #16
   11654:	cmp	r0, #0
   11658:	beq	116f8 <rb_setselect_poll+0xac>
   1165c:	mov	r4, r0
   11660:	tst	r1, #1
   11664:	beq	11684 <rb_setselect_poll+0x38>
   11668:	str	r2, [r4, #28]
   1166c:	str	r3, [r4, #32]
   11670:	cmp	r2, #0
   11674:	ldr	r0, [r4, #20]
   11678:	orr	r6, r0, #64	; 0x40
   1167c:	biceq	r6, r0, #64	; 0x40
   11680:	str	r6, [r4, #20]
   11684:	tst	r1, #2
   11688:	beq	116a8 <rb_setselect_poll+0x5c>
   1168c:	str	r2, [r4, #36]	; 0x24
   11690:	str	r3, [r4, #40]	; 0x28
   11694:	cmp	r2, #0
   11698:	ldr	r0, [r4, #20]
   1169c:	orr	r1, r0, #256	; 0x100
   116a0:	biceq	r1, r0, #256	; 0x100
   116a4:	str	r1, [r4, #20]
   116a8:	ldr	r0, [r4, #12]
   116ac:	ldr	r6, [pc, #312]	; 117ec <rb_setselect_poll+0x1a0>
   116b0:	ldr	r6, [pc, r6]
   116b4:	cmp	r6, r0
   116b8:	ble	11768 <rb_setselect_poll+0x11c>
   116bc:	ldr	r1, [r4, #20]
   116c0:	cmp	r1, #0
   116c4:	ble	116fc <rb_setselect_poll+0xb0>
   116c8:	ldr	r0, [r4, #12]
   116cc:	ldr	r2, [pc, #312]	; 1180c <rb_setselect_poll+0x1c0>
   116d0:	ldr	r2, [pc, r2]
   116d4:	str	r0, [r2, r0, lsl #3]!
   116d8:	strh	r1, [r2, #4]
   116dc:	ldr	r1, [pc, #300]	; 11810 <rb_setselect_poll+0x1c4>
   116e0:	ldr	r1, [pc, r1]
   116e4:	cmp	r0, r1
   116e8:	pople	{r4, r5, r6, r7, fp, pc}
   116ec:	ldr	r1, [pc, #288]	; 11814 <rb_setselect_poll+0x1c8>
   116f0:	add	r1, pc, r1
   116f4:	str	r0, [r1]
   116f8:	pop	{r4, r5, r6, r7, fp, pc}
   116fc:	ldr	r1, [r4, #12]
   11700:	ldr	r0, [pc, #248]	; 11800 <rb_setselect_poll+0x1b4>
   11704:	mvn	r2, #0
   11708:	ldr	r0, [pc, r0]
   1170c:	mov	r3, r0
   11710:	str	r2, [r3, r1, lsl #3]!
   11714:	mov	r2, #0
   11718:	strh	r2, [r3, #4]
   1171c:	ldr	r2, [pc, #224]	; 11804 <rb_setselect_poll+0x1b8>
   11720:	ldr	r2, [pc, r2]
   11724:	cmp	r1, r2
   11728:	bne	116f8 <rb_setselect_poll+0xac>
   1172c:	cmp	r2, #0
   11730:	bmi	116f8 <rb_setselect_poll+0xac>
   11734:	sub	r2, r1, #1
   11738:	mov	r1, r2
   1173c:	add	r2, r2, #1
   11740:	cmp	r2, #1
   11744:	blt	11758 <rb_setselect_poll+0x10c>
   11748:	ldr	r3, [r0, r1, lsl #3]
   1174c:	sub	r2, r1, #1
   11750:	cmn	r3, #1
   11754:	beq	11738 <rb_setselect_poll+0xec>
   11758:	ldr	r0, [pc, #168]	; 11808 <rb_setselect_poll+0x1bc>
   1175c:	add	r0, pc, r0
   11760:	str	r1, [r0]
   11764:	pop	{r4, r5, r6, r7, fp, pc}
   11768:	ldr	r0, [pc, #128]	; 117f0 <rb_setselect_poll+0x1a4>
   1176c:	add	r1, r6, #1024	; 0x400
   11770:	add	r0, pc, r0
   11774:	str	r1, [r0]
   11778:	lsl	r1, r1, #3
   1177c:	ldr	r0, [pc, #112]	; 117f4 <rb_setselect_poll+0x1a8>
   11780:	ldr	r0, [pc, r0]
   11784:	bl	5530 <realloc@plt>
   11788:	cmp	r0, #0
   1178c:	beq	117e8 <rb_setselect_poll+0x19c>
   11790:	mov	r5, r0
   11794:	ldr	r0, [pc, #92]	; 117f8 <rb_setselect_poll+0x1ac>
   11798:	add	r7, r6, #1
   1179c:	mov	r1, #0
   117a0:	mov	r2, #8192	; 0x2000
   117a4:	add	r0, pc, r0
   117a8:	str	r5, [r0]
   117ac:	add	r0, r5, r7, lsl #3
   117b0:	bl	4f3c <memset@plt>
   117b4:	ldr	r0, [pc, #64]	; 117fc <rb_setselect_poll+0x1b0>
   117b8:	ldr	r0, [pc, r0]
   117bc:	cmp	r7, r0
   117c0:	bge	116bc <rb_setselect_poll+0x70>
   117c4:	mvn	r1, r6
   117c8:	mvn	r2, #0
   117cc:	add	r0, r1, r0
   117d0:	add	r1, r5, r6, lsl #3
   117d4:	add	r1, r1, #8
   117d8:	str	r2, [r1], #8
   117dc:	subs	r0, r0, #1
   117e0:	bne	117d8 <rb_setselect_poll+0x18c>
   117e4:	b	116bc <rb_setselect_poll+0x70>
   117e8:	bl	5284 <rb_outofmemory@plt>
   117ec:	.word	0x00034558
   117f0:	.word	0x00034498
   117f4:	.word	0x00034480
   117f8:	.word	0x0003445c
   117fc:	.word	0x00034450
   11800:	.word	0x000344f8
   11804:	.word	0x000344e4
   11808:	.word	0x000344a8
   1180c:	.word	0x00034530
   11810:	.word	0x00034524
   11814:	.word	0x00034514

00011818 <rb_select_poll>:
   11818:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1181c:	add	fp, sp, #24
   11820:	mov	r2, r0
   11824:	ldr	r0, [pc, #388]	; 119b0 <rb_select_poll+0x198>
   11828:	ldr	r0, [pc, r0]
   1182c:	ldr	r1, [pc, #384]	; 119b4 <rb_select_poll+0x19c>
   11830:	ldr	r1, [pc, r1]
   11834:	add	r1, r1, #1
   11838:	bl	52fc <poll@plt>
   1183c:	mov	r4, r0
   11840:	bl	5290 <rb_set_time@plt>
   11844:	cmn	r4, #1
   11848:	ble	11990 <rb_select_poll+0x178>
   1184c:	mov	r0, #0
   11850:	cmp	r4, #0
   11854:	beq	119ac <rb_select_poll+0x194>
   11858:	ldr	r1, [pc, #344]	; 119b8 <rb_select_poll+0x1a0>
   1185c:	ldr	r1, [pc, r1]
   11860:	cmp	r1, #0
   11864:	bmi	119ac <rb_select_poll+0x194>
   11868:	ldr	r6, [pc, #332]	; 119bc <rb_select_poll+0x1a4>
   1186c:	mov	r8, #0
   11870:	mov	r0, #0
   11874:	ldr	r6, [pc, r6]
   11878:	ldr	r1, [pc, #320]	; 119c0 <rb_select_poll+0x1a8>
   1187c:	mov	r7, r0
   11880:	ldr	r1, [pc, r1]
   11884:	ldr	r0, [r1, r0, lsl #3]!
   11888:	ldrsh	r5, [r1, #6]
   1188c:	cmp	r5, #0
   11890:	beq	11954 <rb_select_poll+0x13c>
   11894:	cmp	r0, #0
   11898:	bmi	11954 <rb_select_poll+0x13c>
   1189c:	eor	r1, r0, r0, lsr #12
   118a0:	ldr	r2, [r6]
   118a4:	bfc	r1, #12, #20
   118a8:	eor	r1, r1, r0, lsr #24
   118ac:	add	r1, r1, r1, lsl #1
   118b0:	ldr	r1, [r2, r1, lsl #2]
   118b4:	cmp	r1, #0
   118b8:	beq	11954 <rb_select_poll+0x13c>
   118bc:	ldr	r4, [r1]
   118c0:	ldr	r2, [r4, #12]
   118c4:	cmp	r2, r0
   118c8:	beq	118d4 <rb_select_poll+0xbc>
   118cc:	ldr	r1, [r1, #8]
   118d0:	b	118b4 <rb_select_poll+0x9c>
   118d4:	cmp	r4, #0
   118d8:	beq	11954 <rb_select_poll+0x13c>
   118dc:	tst	r5, #89	; 0x59
   118e0:	beq	11904 <rb_select_poll+0xec>
   118e4:	ldr	r2, [r4, #28]
   118e8:	ldr	r1, [r4, #32]
   118ec:	str	r8, [r4, #28]
   118f0:	str	r8, [r4, #32]
   118f4:	cmp	r2, #0
   118f8:	beq	11904 <rb_select_poll+0xec>
   118fc:	mov	r0, r4
   11900:	blx	r2
   11904:	tst	r5, #284	; 0x11c
   11908:	ldrbne	r0, [r4, #16]
   1190c:	andsne	r0, r0, #1
   11910:	bne	1196c <rb_select_poll+0x154>
   11914:	ldr	r0, [r4, #28]
   11918:	cmp	r0, #0
   1191c:	bne	11934 <rb_select_poll+0x11c>
   11920:	mov	r0, r4
   11924:	mov	r1, #1
   11928:	mov	r2, #0
   1192c:	mov	r3, #0
   11930:	bl	1164c <rb_setselect_poll>
   11934:	ldr	r0, [r4, #36]	; 0x24
   11938:	cmp	r0, #0
   1193c:	bne	11954 <rb_select_poll+0x13c>
   11940:	mov	r0, r4
   11944:	mov	r1, #2
   11948:	mov	r2, #0
   1194c:	mov	r3, #0
   11950:	bl	1164c <rb_setselect_poll>
   11954:	ldr	r1, [pc, #104]	; 119c4 <rb_select_poll+0x1ac>
   11958:	add	r0, r7, #1
   1195c:	ldr	r1, [pc, r1]
   11960:	cmp	r7, r1
   11964:	blt	11878 <rb_select_poll+0x60>
   11968:	b	119a8 <rb_select_poll+0x190>
   1196c:	ldr	r2, [r4, #36]	; 0x24
   11970:	ldr	r1, [r4, #40]	; 0x28
   11974:	str	r8, [r4, #36]	; 0x24
   11978:	str	r8, [r4, #40]	; 0x28
   1197c:	cmp	r2, #0
   11980:	beq	11914 <rb_select_poll+0xfc>
   11984:	mov	r0, r4
   11988:	blx	r2
   1198c:	b	11914 <rb_select_poll+0xfc>
   11990:	bl	55e4 <__errno_location@plt>
   11994:	ldr	r0, [r0]
   11998:	bl	4d14 <rb_ignore_errno@plt>
   1199c:	cmp	r0, #0
   119a0:	movwne	r0, #5
   119a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   119a8:	mov	r0, #0
   119ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   119b0:	.word	0x000343d8
   119b4:	.word	0x000343d4
   119b8:	.word	0x000343a8
   119bc:	.word	0x00016b2c
   119c0:	.word	0x00034380
   119c4:	.word	0x000342a8

000119c8 <rb_ports_supports_event>:
   119c8:	push	{fp, lr}
   119cc:	mov	fp, sp
   119d0:	bl	55e4 <__errno_location@plt>
   119d4:	mov	r1, #38	; 0x26
   119d8:	str	r1, [r0]
   119dc:	mov	r0, #0
   119e0:	pop	{fp, pc}

000119e4 <rb_ports_init_event>:
   119e4:	bx	lr

000119e8 <rb_ports_sched_event>:
   119e8:	push	{fp, lr}
   119ec:	mov	fp, sp
   119f0:	bl	55e4 <__errno_location@plt>
   119f4:	mov	r1, #38	; 0x26
   119f8:	str	r1, [r0]
   119fc:	mvn	r0, #0
   11a00:	pop	{fp, pc}

00011a04 <rb_ports_unsched_event>:
   11a04:	bx	lr

00011a08 <rb_init_netio_ports>:
   11a08:	mov	r0, #38	; 0x26
   11a0c:	bx	lr

00011a10 <rb_setselect_ports>:
   11a10:	push	{fp, lr}
   11a14:	mov	fp, sp
   11a18:	bl	55e4 <__errno_location@plt>
   11a1c:	mov	r1, #38	; 0x26
   11a20:	str	r1, [r0]
   11a24:	pop	{fp, pc}

00011a28 <rb_select_ports>:
   11a28:	push	{fp, lr}
   11a2c:	mov	fp, sp
   11a30:	bl	55e4 <__errno_location@plt>
   11a34:	mov	r1, #38	; 0x26
   11a38:	str	r1, [r0]
   11a3c:	mvn	r0, #0
   11a40:	pop	{fp, pc}

00011a44 <rb_setup_fd_ports>:
   11a44:	push	{fp, lr}
   11a48:	mov	fp, sp
   11a4c:	bl	55e4 <__errno_location@plt>
   11a50:	mov	r1, #38	; 0x26
   11a54:	str	r1, [r0]
   11a58:	mvn	r0, #0
   11a5c:	pop	{fp, pc}

00011a60 <rb_init_netio_sigio>:
   11a60:	push	{r4, r5, r6, sl, fp, lr}
   11a64:	add	fp, sp, #16
   11a68:	bl	4d98 <rb_getmaxconnect@plt>
   11a6c:	lsl	r1, r0, #3
   11a70:	mov	r0, #1
   11a74:	bl	4f00 <calloc@plt>
   11a78:	cmp	r0, #0
   11a7c:	beq	11b2c <rb_init_netio_sigio+0xcc>
   11a80:	ldr	r4, [pc, #168]	; 11b30 <rb_init_netio_sigio+0xd0>
   11a84:	ldr	r4, [pc, r4]
   11a88:	str	r0, [r4]
   11a8c:	bl	4d98 <rb_getmaxconnect@plt>
   11a90:	str	r0, [r4, #8]
   11a94:	bl	4d98 <rb_getmaxconnect@plt>
   11a98:	cmp	r0, #1
   11a9c:	blt	11ac0 <rb_init_netio_sigio+0x60>
   11aa0:	mov	r5, #0
   11aa4:	mvn	r6, #0
   11aa8:	ldr	r0, [r4]
   11aac:	str	r6, [r0, r5, lsl #3]
   11ab0:	add	r5, r5, #1
   11ab4:	bl	4d98 <rb_getmaxconnect@plt>
   11ab8:	cmp	r5, r0
   11abc:	blt	11aa8 <rb_init_netio_sigio+0x48>
   11ac0:	ldr	r0, [pc, #108]	; 11b34 <rb_init_netio_sigio+0xd4>
   11ac4:	mov	r1, #1
   11ac8:	add	r0, pc, r0
   11acc:	strb	r1, [r0]
   11ad0:	mov	r0, #0
   11ad4:	str	r0, [r4, #4]
   11ad8:	ldr	r4, [pc, #88]	; 11b38 <rb_init_netio_sigio+0xd8>
   11adc:	add	r4, pc, r4
   11ae0:	mov	r0, r4
   11ae4:	bl	4ccc <sigemptyset@plt>
   11ae8:	bl	4db0 <__libc_current_sigrtmin@plt>
   11aec:	mov	r1, r0
   11af0:	mov	r0, r4
   11af4:	bl	5188 <sigaddset@plt>
   11af8:	mov	r0, r4
   11afc:	mov	r1, #29
   11b00:	bl	5188 <sigaddset@plt>
   11b04:	bl	4db0 <__libc_current_sigrtmin@plt>
   11b08:	add	r1, r0, #1
   11b0c:	mov	r0, r4
   11b10:	bl	5188 <sigaddset@plt>
   11b14:	mov	r0, #0
   11b18:	mov	r1, r4
   11b1c:	mov	r2, #0
   11b20:	bl	52b4 <sigprocmask@plt>
   11b24:	mov	r0, #0
   11b28:	pop	{r4, r5, r6, sl, fp, pc}
   11b2c:	bl	5284 <rb_outofmemory@plt>
   11b30:	.word	0x0001692c
   11b34:	.word	0x00034144
   11b38:	.word	0x00034134

00011b3c <rb_setup_fd_sigio>:
   11b3c:	push	{r4, r5, r6, sl, fp, lr}
   11b40:	add	fp, sp, #16
   11b44:	ldr	r5, [r0, #12]
   11b48:	mov	r1, #3
   11b4c:	mov	r2, #0
   11b50:	mov	r4, #0
   11b54:	mov	r0, r5
   11b58:	bl	54f4 <fcntl@plt>
   11b5c:	cmn	r0, #1
   11b60:	beq	11bd8 <rb_setup_fd_sigio+0x9c>
   11b64:	mov	r6, r0
   11b68:	tst	r0, #8192	; 0x2000
   11b6c:	beq	11b84 <rb_setup_fd_sigio+0x48>
   11b70:	bic	r6, r6, #8192	; 0x2000
   11b74:	mov	r0, r5
   11b78:	mov	r1, #4
   11b7c:	mov	r2, r6
   11b80:	bl	54f4 <fcntl@plt>
   11b84:	orr	r2, r6, #10240	; 0x2800
   11b88:	mov	r0, r5
   11b8c:	mov	r1, #4
   11b90:	bl	54f4 <fcntl@plt>
   11b94:	cmn	r0, #1
   11b98:	beq	11bd8 <rb_setup_fd_sigio+0x9c>
   11b9c:	bl	4db0 <__libc_current_sigrtmin@plt>
   11ba0:	mov	r2, r0
   11ba4:	mov	r0, r5
   11ba8:	mov	r1, #10
   11bac:	bl	54f4 <fcntl@plt>
   11bb0:	cmn	r0, #1
   11bb4:	beq	11bd8 <rb_setup_fd_sigio+0x9c>
   11bb8:	bl	53c8 <getpid@plt>
   11bbc:	mov	r2, r0
   11bc0:	mov	r0, r5
   11bc4:	mov	r1, #8
   11bc8:	bl	54f4 <fcntl@plt>
   11bcc:	mvn	r1, #0
   11bd0:	subs	r4, r0, r1
   11bd4:	movwne	r4, #1
   11bd8:	mov	r0, r4
   11bdc:	pop	{r4, r5, r6, sl, fp, pc}

00011be0 <rb_setselect_sigio>:
   11be0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11be4:	add	fp, sp, #24
   11be8:	cmp	r0, #0
   11bec:	beq	11c7c <rb_setselect_sigio+0x9c>
   11bf0:	mov	r4, r0
   11bf4:	tst	r1, #1
   11bf8:	beq	11c18 <rb_setselect_sigio+0x38>
   11bfc:	str	r2, [r4, #28]
   11c00:	str	r3, [r4, #32]
   11c04:	cmp	r2, #0
   11c08:	ldr	r0, [r4, #20]
   11c0c:	orr	r7, r0, #64	; 0x40
   11c10:	biceq	r7, r0, #64	; 0x40
   11c14:	str	r7, [r4, #20]
   11c18:	tst	r1, #2
   11c1c:	beq	11c3c <rb_setselect_sigio+0x5c>
   11c20:	str	r2, [r4, #36]	; 0x24
   11c24:	str	r3, [r4, #40]	; 0x28
   11c28:	cmp	r2, #0
   11c2c:	ldr	r0, [r4, #20]
   11c30:	orr	r1, r0, #256	; 0x100
   11c34:	biceq	r1, r0, #256	; 0x100
   11c38:	str	r1, [r4, #20]
   11c3c:	ldr	r0, [r4, #12]
   11c40:	ldr	r6, [pc, #256]	; 11d48 <rb_setselect_sigio+0x168>
   11c44:	ldr	r6, [pc, r6]
   11c48:	ldr	r7, [r6, #8]
   11c4c:	cmp	r7, r0
   11c50:	ble	11cdc <rb_setselect_sigio+0xfc>
   11c54:	ldr	r1, [r4, #20]
   11c58:	cmp	r1, #0
   11c5c:	ble	11c80 <rb_setselect_sigio+0xa0>
   11c60:	ldr	r0, [r4, #12]
   11c64:	ldr	r2, [r6]
   11c68:	str	r0, [r2, r0, lsl #3]!
   11c6c:	strh	r1, [r2, #4]
   11c70:	ldr	r1, [r6, #4]
   11c74:	cmp	r0, r1
   11c78:	strgt	r0, [r6, #4]
   11c7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11c80:	ldr	r0, [r6]
   11c84:	ldr	r1, [r4, #12]
   11c88:	mvn	r2, #0
   11c8c:	mov	r3, r0
   11c90:	str	r2, [r3, r1, lsl #3]!
   11c94:	mov	r2, #0
   11c98:	strh	r2, [r3, #4]
   11c9c:	ldr	r2, [r6, #4]
   11ca0:	cmp	r1, r2
   11ca4:	bne	11c7c <rb_setselect_sigio+0x9c>
   11ca8:	cmp	r2, #0
   11cac:	bmi	11c7c <rb_setselect_sigio+0x9c>
   11cb0:	sub	r2, r1, #1
   11cb4:	mov	r1, r2
   11cb8:	add	r2, r2, #1
   11cbc:	cmp	r2, #1
   11cc0:	blt	11cd4 <rb_setselect_sigio+0xf4>
   11cc4:	ldr	r3, [r0, r1, lsl #3]
   11cc8:	sub	r2, r1, #1
   11ccc:	cmn	r3, #1
   11cd0:	beq	11cb4 <rb_setselect_sigio+0xd4>
   11cd4:	str	r1, [r6, #4]
   11cd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11cdc:	add	r1, r7, #1024	; 0x400
   11ce0:	str	r1, [r6, #8]
   11ce4:	lsl	r1, r1, #3
   11ce8:	ldr	r0, [r6]
   11cec:	bl	5530 <realloc@plt>
   11cf0:	cmp	r0, #0
   11cf4:	beq	11d44 <rb_setselect_sigio+0x164>
   11cf8:	add	r8, r7, #1
   11cfc:	mov	r5, r0
   11d00:	str	r0, [r6]
   11d04:	mov	r1, #0
   11d08:	mov	r2, #8192	; 0x2000
   11d0c:	add	r0, r0, r8, lsl #3
   11d10:	bl	4f3c <memset@plt>
   11d14:	ldr	r0, [r6, #8]
   11d18:	cmp	r8, r0
   11d1c:	bge	11c54 <rb_setselect_sigio+0x74>
   11d20:	mvn	r1, r7
   11d24:	mvn	r2, #0
   11d28:	add	r0, r1, r0
   11d2c:	add	r1, r5, r7, lsl #3
   11d30:	add	r1, r1, #8
   11d34:	str	r2, [r1], #8
   11d38:	subs	r0, r0, #1
   11d3c:	bne	11d34 <rb_setselect_sigio+0x154>
   11d40:	b	11c54 <rb_setselect_sigio+0x74>
   11d44:	bl	5284 <rb_outofmemory@plt>
   11d48:	.word	0x0001676c

00011d4c <rb_select_sigio>:
   11d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d50:	add	fp, sp, #28
   11d54:	sub	sp, sp, #140	; 0x8c
   11d58:	mov	r4, r0
   11d5c:	bl	12124 <rb_sigio_supports_event>
   11d60:	cmn	r4, #1
   11d64:	bgt	11d70 <rb_select_sigio+0x24>
   11d68:	cmp	r0, #0
   11d6c:	beq	11da0 <rb_select_sigio+0x54>
   11d70:	movw	r0, #19923	; 0x4dd3
   11d74:	movt	r0, #4194	; 0x1062
   11d78:	smmul	r0, r4, r0
   11d7c:	asr	r1, r0, #6
   11d80:	add	r0, r1, r0, lsr #31
   11d84:	mov	r1, #1000	; 0x3e8
   11d88:	str	r0, [sp, #4]
   11d8c:	mls	r0, r0, r1, r4
   11d90:	movw	r1, #16960	; 0x4240
   11d94:	movt	r1, #15
   11d98:	mul	r0, r0, r1
   11d9c:	str	r0, [sp, #8]
   11da0:	ldr	r6, [pc, #856]	; 12100 <rb_select_sigio+0x3b4>
   11da4:	add	r6, pc, r6
   11da8:	ldrb	r0, [r6]
   11dac:	cmp	r0, #0
   11db0:	bne	11f54 <rb_select_sigio+0x208>
   11db4:	ldr	r9, [pc, #840]	; 12104 <rb_select_sigio+0x3b8>
   11db8:	add	r5, sp, #12
   11dbc:	add	r8, sp, #4
   11dc0:	add	r9, pc, r9
   11dc4:	cmp	r4, #0
   11dc8:	bmi	11df0 <rb_select_sigio+0xa4>
   11dcc:	ldr	r0, [pc, #820]	; 12108 <rb_select_sigio+0x3bc>
   11dd0:	ldr	r0, [pc, r0]
   11dd4:	cmp	r0, #0
   11dd8:	bne	11df0 <rb_select_sigio+0xa4>
   11ddc:	mov	r0, r9
   11de0:	mov	r1, r5
   11de4:	mov	r2, r8
   11de8:	bl	4dec <sigtimedwait@plt>
   11dec:	b	11dfc <rb_select_sigio+0xb0>
   11df0:	mov	r0, r9
   11df4:	mov	r1, r5
   11df8:	bl	4da4 <sigwaitinfo@plt>
   11dfc:	mov	r7, r0
   11e00:	cmp	r0, #1
   11e04:	blt	11f2c <rb_select_sigio+0x1e0>
   11e08:	cmp	r7, #29
   11e0c:	beq	11f40 <rb_select_sigio+0x1f4>
   11e10:	bl	4db0 <__libc_current_sigrtmin@plt>
   11e14:	add	r0, r0, #1
   11e18:	cmp	r7, r0
   11e1c:	bne	11e44 <rb_select_sigio+0xf8>
   11e20:	ldr	r0, [pc, #744]	; 12110 <rb_select_sigio+0x3c4>
   11e24:	ldr	r0, [pc, r0]
   11e28:	cmp	r0, #0
   11e2c:	beq	11e44 <rb_select_sigio+0xf8>
   11e30:	ldr	r0, [sp, #32]
   11e34:	cmp	r0, #0
   11e38:	beq	11f1c <rb_select_sigio+0x1d0>
   11e3c:	bl	51ac <rb_run_one_event@plt>
   11e40:	b	11f1c <rb_select_sigio+0x1d0>
   11e44:	ldr	r0, [pc, #716]	; 12118 <rb_select_sigio+0x3cc>
   11e48:	ldr	r0, [pc, r0]
   11e4c:	ldrh	r3, [sp, #24]
   11e50:	ldr	r1, [r0]
   11e54:	ldr	r0, [sp, #28]
   11e58:	add	r1, r1, r0, lsl #3
   11e5c:	cmp	r0, #0
   11e60:	ldrh	r2, [r1, #6]
   11e64:	orr	r2, r2, r3
   11e68:	strh	r2, [r1, #6]
   11e6c:	bmi	11f1c <rb_select_sigio+0x1d0>
   11e70:	ldr	r3, [pc, #676]	; 1211c <rb_select_sigio+0x3d0>
   11e74:	eor	r1, r0, r0, lsr #12
   11e78:	bfc	r1, #12, #20
   11e7c:	ldr	r3, [pc, r3]
   11e80:	eor	r1, r1, r0, lsr #24
   11e84:	add	r1, r1, r1, lsl #1
   11e88:	ldr	r3, [r3]
   11e8c:	ldr	r1, [r3, r1, lsl #2]
   11e90:	cmp	r1, #0
   11e94:	beq	11f1c <rb_select_sigio+0x1d0>
   11e98:	sxth	sl, r2
   11e9c:	ldr	r7, [r1]
   11ea0:	ldr	r2, [r7, #12]
   11ea4:	cmp	r2, r0
   11ea8:	beq	11ebc <rb_select_sigio+0x170>
   11eac:	ldr	r1, [r1, #8]
   11eb0:	cmp	r1, #0
   11eb4:	bne	11e9c <rb_select_sigio+0x150>
   11eb8:	b	11f1c <rb_select_sigio+0x1d0>
   11ebc:	cmp	r7, #0
   11ec0:	beq	11f1c <rb_select_sigio+0x1d0>
   11ec4:	tst	sl, #89	; 0x59
   11ec8:	beq	11ef0 <rb_select_sigio+0x1a4>
   11ecc:	ldr	r2, [r7, #28]
   11ed0:	ldr	r1, [r7, #32]
   11ed4:	mov	r0, #0
   11ed8:	str	r0, [r7, #28]
   11edc:	str	r0, [r7, #32]
   11ee0:	cmp	r2, #0
   11ee4:	beq	11ef0 <rb_select_sigio+0x1a4>
   11ee8:	mov	r0, r7
   11eec:	blx	r2
   11ef0:	tst	sl, #284	; 0x11c
   11ef4:	beq	11f1c <rb_select_sigio+0x1d0>
   11ef8:	ldr	r2, [r7, #36]	; 0x24
   11efc:	ldr	r1, [r7, #40]	; 0x28
   11f00:	mov	r0, #0
   11f04:	str	r0, [r7, #36]	; 0x24
   11f08:	str	r0, [r7, #40]	; 0x28
   11f0c:	cmp	r2, #0
   11f10:	beq	11f1c <rb_select_sigio+0x1d0>
   11f14:	mov	r0, r7
   11f18:	blx	r2
   11f1c:	ldrb	r0, [r6]
   11f20:	cmp	r0, #0
   11f24:	beq	11dc4 <rb_select_sigio+0x78>
   11f28:	b	11f54 <rb_select_sigio+0x208>
   11f2c:	ldrb	r0, [r6]
   11f30:	cmp	r0, #0
   11f34:	bne	11f54 <rb_select_sigio+0x208>
   11f38:	bl	5290 <rb_set_time@plt>
   11f3c:	b	120d4 <rb_select_sigio+0x388>
   11f40:	ldr	r0, [pc, #452]	; 1210c <rb_select_sigio+0x3c0>
   11f44:	add	r0, pc, r0
   11f48:	bl	5224 <rb_lib_log@plt>
   11f4c:	mov	r0, #1
   11f50:	strb	r0, [r6]
   11f54:	bl	4db0 <__libc_current_sigrtmin@plt>
   11f58:	mov	r1, #1
   11f5c:	bl	4e04 <signal@plt>
   11f60:	bl	4db0 <__libc_current_sigrtmin@plt>
   11f64:	mov	r1, #0
   11f68:	mov	r5, #0
   11f6c:	bl	4e04 <signal@plt>
   11f70:	strb	r5, [r6]
   11f74:	mov	r2, r4
   11f78:	ldr	r6, [pc, #404]	; 12114 <rb_select_sigio+0x3c8>
   11f7c:	ldr	r6, [pc, r6]
   11f80:	ldm	r6, {r0, r1}
   11f84:	add	r1, r1, #1
   11f88:	bl	52fc <poll@plt>
   11f8c:	mov	r4, r0
   11f90:	bl	5290 <rb_set_time@plt>
   11f94:	cmn	r4, #1
   11f98:	ble	120dc <rb_select_sigio+0x390>
   11f9c:	cmp	r4, #0
   11fa0:	beq	120f4 <rb_select_sigio+0x3a8>
   11fa4:	ldr	r0, [r6, #4]
   11fa8:	cmp	r0, #0
   11fac:	bmi	120f4 <rb_select_sigio+0x3a8>
   11fb0:	ldr	r9, [pc, #360]	; 12120 <rb_select_sigio+0x3d4>
   11fb4:	mov	r8, #0
   11fb8:	mov	r0, #0
   11fbc:	ldr	r9, [pc, r9]
   11fc0:	mov	r5, r0
   11fc4:	ldr	r0, [r6]
   11fc8:	add	r1, r0, r5, lsl #3
   11fcc:	ldrsh	r7, [r1, #6]
   11fd0:	cmp	r7, #0
   11fd4:	beq	1209c <rb_select_sigio+0x350>
   11fd8:	ldr	r0, [r0, r5, lsl #3]
   11fdc:	cmp	r0, #0
   11fe0:	bmi	1209c <rb_select_sigio+0x350>
   11fe4:	eor	r1, r0, r0, lsr #12
   11fe8:	ldr	r2, [r9]
   11fec:	bfc	r1, #12, #20
   11ff0:	eor	r1, r1, r0, lsr #24
   11ff4:	add	r1, r1, r1, lsl #1
   11ff8:	ldr	r1, [r2, r1, lsl #2]
   11ffc:	cmp	r1, #0
   12000:	beq	1209c <rb_select_sigio+0x350>
   12004:	ldr	r4, [r1]
   12008:	ldr	r2, [r4, #12]
   1200c:	cmp	r2, r0
   12010:	beq	1201c <rb_select_sigio+0x2d0>
   12014:	ldr	r1, [r1, #8]
   12018:	b	11ffc <rb_select_sigio+0x2b0>
   1201c:	cmp	r4, #0
   12020:	beq	1209c <rb_select_sigio+0x350>
   12024:	tst	r7, #89	; 0x59
   12028:	beq	1204c <rb_select_sigio+0x300>
   1202c:	ldr	r2, [r4, #28]
   12030:	ldr	r1, [r4, #32]
   12034:	str	r8, [r4, #28]
   12038:	str	r8, [r4, #32]
   1203c:	cmp	r2, #0
   12040:	beq	1204c <rb_select_sigio+0x300>
   12044:	mov	r0, r4
   12048:	blx	r2
   1204c:	tst	r7, #284	; 0x11c
   12050:	ldrbne	r0, [r4, #16]
   12054:	andsne	r0, r0, #1
   12058:	bne	120b0 <rb_select_sigio+0x364>
   1205c:	ldr	r0, [r4, #28]
   12060:	cmp	r0, #0
   12064:	bne	1207c <rb_select_sigio+0x330>
   12068:	mov	r0, r4
   1206c:	mov	r1, #1
   12070:	mov	r2, #0
   12074:	mov	r3, #0
   12078:	bl	11be0 <rb_setselect_sigio>
   1207c:	ldr	r0, [r4, #36]	; 0x24
   12080:	cmp	r0, #0
   12084:	bne	1209c <rb_select_sigio+0x350>
   12088:	mov	r0, r4
   1208c:	mov	r1, #2
   12090:	mov	r2, #0
   12094:	mov	r3, #0
   12098:	bl	11be0 <rb_setselect_sigio>
   1209c:	ldr	r1, [r6, #4]
   120a0:	add	r0, r5, #1
   120a4:	cmp	r5, r1
   120a8:	blt	11fc0 <rb_select_sigio+0x274>
   120ac:	b	120d4 <rb_select_sigio+0x388>
   120b0:	ldr	r2, [r4, #36]	; 0x24
   120b4:	ldr	r1, [r4, #40]	; 0x28
   120b8:	str	r8, [r4, #36]	; 0x24
   120bc:	str	r8, [r4, #40]	; 0x28
   120c0:	cmp	r2, #0
   120c4:	beq	1205c <rb_select_sigio+0x310>
   120c8:	mov	r0, r4
   120cc:	blx	r2
   120d0:	b	1205c <rb_select_sigio+0x310>
   120d4:	mov	r5, #0
   120d8:	b	120f4 <rb_select_sigio+0x3a8>
   120dc:	bl	55e4 <__errno_location@plt>
   120e0:	ldr	r0, [r0]
   120e4:	bl	4d14 <rb_ignore_errno@plt>
   120e8:	cmp	r0, #0
   120ec:	mov	r5, r0
   120f0:	movwne	r5, #5
   120f4:	mov	r0, r5
   120f8:	sub	sp, fp, #28
   120fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12100:	.word	0x00033e68
   12104:	.word	0x00033e50
   12108:	.word	0x00033ec0
   1210c:	.word	0x00004b44
   12110:	.word	0x00033e6c
   12114:	.word	0x00016434
   12118:	.word	0x00016568
   1211c:	.word	0x00016524
   12120:	.word	0x000163e4

00012124 <rb_sigio_supports_event>:
   12124:	push	{r4, sl, fp, lr}
   12128:	add	fp, sp, #8
   1212c:	sub	sp, sp, #72	; 0x48
   12130:	ldr	r4, [pc, #120]	; 121b0 <rb_sigio_supports_event+0x8c>
   12134:	ldr	r4, [pc, r4]
   12138:	cmp	r4, #1
   1213c:	beq	121a4 <rb_sigio_supports_event+0x80>
   12140:	cmn	r4, #1
   12144:	bne	12150 <rb_sigio_supports_event+0x2c>
   12148:	mov	r4, #0
   1214c:	b	121a4 <rb_sigio_supports_event+0x80>
   12150:	mov	r4, #0
   12154:	mov	r0, #26
   12158:	add	r1, sp, #4
   1215c:	sub	r2, fp, #12
   12160:	str	r4, [sp, #12]
   12164:	str	r0, [sp, #8]
   12168:	mov	r0, #0
   1216c:	bl	4e58 <timer_create@plt>
   12170:	cmp	r0, #0
   12174:	beq	1218c <rb_sigio_supports_event+0x68>
   12178:	ldr	r0, [pc, #52]	; 121b4 <rb_sigio_supports_event+0x90>
   1217c:	mvn	r1, #0
   12180:	add	r0, pc, r0
   12184:	str	r1, [r0]
   12188:	b	121a4 <rb_sigio_supports_event+0x80>
   1218c:	ldr	r0, [fp, #-12]
   12190:	bl	5374 <timer_delete@plt>
   12194:	ldr	r0, [pc, #28]	; 121b8 <rb_sigio_supports_event+0x94>
   12198:	mov	r4, #1
   1219c:	add	r0, pc, r0
   121a0:	str	r4, [r0]
   121a4:	mov	r0, r4
   121a8:	sub	sp, fp, #8
   121ac:	pop	{r4, sl, fp, pc}
   121b0:	.word	0x00033b5c
   121b4:	.word	0x00033b10
   121b8:	.word	0x00033af4

000121bc <rb_sigio_init_event>:
   121bc:	b	12124 <rb_sigio_supports_event>

000121c0 <rb_sigio_sched_event>:
   121c0:	push	{r4, r5, r6, r7, fp, lr}
   121c4:	add	fp, sp, #16
   121c8:	sub	sp, sp, #80	; 0x50
   121cc:	mov	r4, r0
   121d0:	ldr	r0, [pc, #284]	; 122f4 <rb_sigio_sched_event+0x134>
   121d4:	ldr	r0, [pc, r0]
   121d8:	cmp	r0, #1
   121dc:	blt	122c0 <rb_sigio_sched_event+0x100>
   121e0:	vmov.i32	q8, #0	; 0x00000000
   121e4:	mov	r5, r1
   121e8:	add	r1, sp, #16
   121ec:	mov	r0, #48	; 0x30
   121f0:	mov	r2, r1
   121f4:	vst1.64	{d16-d17}, [r2], r0
   121f8:	add	r0, r1, #32
   121fc:	vst1.64	{d16-d17}, [r0]
   12200:	add	r0, r1, #16
   12204:	mov	r1, #4
   12208:	vst1.64	{d16-d17}, [r2]
   1220c:	vst1.64	{d16-d17}, [r0]
   12210:	mov	r0, #1
   12214:	bl	4f00 <calloc@plt>
   12218:	cmp	r0, #0
   1221c:	beq	122f0 <rb_sigio_sched_event+0x130>
   12220:	mov	r6, #0
   12224:	str	r0, [r4, #40]	; 0x28
   12228:	mov	r7, r0
   1222c:	str	r6, [sp, #24]
   12230:	bl	4db0 <__libc_current_sigrtmin@plt>
   12234:	add	r0, r0, #1
   12238:	str	r4, [sp, #16]
   1223c:	add	r1, sp, #16
   12240:	mov	r2, r7
   12244:	str	r0, [sp, #20]
   12248:	mov	r0, #0
   1224c:	bl	4e58 <timer_create@plt>
   12250:	cmn	r0, #1
   12254:	ble	122c8 <rb_sigio_sched_event+0x108>
   12258:	str	r6, [sp, #4]
   1225c:	str	r6, [sp]
   12260:	str	r6, [sp, #12]
   12264:	str	r5, [sp, #8]
   12268:	ldr	r0, [r4, #24]
   1226c:	cmp	r0, #0
   12270:	beq	12284 <rb_sigio_sched_event+0xc4>
   12274:	mov	r0, sp
   12278:	add	r0, r0, #8
   1227c:	ldrd	r0, [r0]
   12280:	stm	sp, {r0, r1}
   12284:	ldr	r0, [r7]
   12288:	mov	r2, sp
   1228c:	mov	r1, #0
   12290:	mov	r3, #0
   12294:	bl	505c <timer_settime@plt>
   12298:	mov	r6, #1
   1229c:	cmn	r0, #1
   122a0:	bgt	122e4 <rb_sigio_sched_event+0x124>
   122a4:	bl	55e4 <__errno_location@plt>
   122a8:	ldr	r0, [r0]
   122ac:	bl	4cd8 <strerror@plt>
   122b0:	mov	r1, r0
   122b4:	ldr	r0, [pc, #64]	; 122fc <rb_sigio_sched_event+0x13c>
   122b8:	add	r0, pc, r0
   122bc:	bl	5224 <rb_lib_log@plt>
   122c0:	mov	r6, #0
   122c4:	b	122e4 <rb_sigio_sched_event+0x124>
   122c8:	bl	55e4 <__errno_location@plt>
   122cc:	ldr	r0, [r0]
   122d0:	bl	4cd8 <strerror@plt>
   122d4:	mov	r1, r0
   122d8:	ldr	r0, [pc, #24]	; 122f8 <rb_sigio_sched_event+0x138>
   122dc:	add	r0, pc, r0
   122e0:	bl	5224 <rb_lib_log@plt>
   122e4:	mov	r0, r6
   122e8:	sub	sp, fp, #16
   122ec:	pop	{r4, r5, r6, r7, fp, pc}
   122f0:	bl	5284 <rb_outofmemory@plt>
   122f4:	.word	0x00033abc
   122f8:	.word	0x00004787
   122fc:	.word	0x000047bd

00012300 <rb_sigio_unsched_event>:
   12300:	push	{r4, sl, fp, lr}
   12304:	add	fp, sp, #8
   12308:	mov	r4, r0
   1230c:	ldr	r0, [pc, #48]	; 12344 <rb_sigio_unsched_event+0x44>
   12310:	ldr	r0, [pc, r0]
   12314:	cmp	r0, #1
   12318:	poplt	{r4, sl, fp, pc}
   1231c:	ldr	r0, [r4, #40]	; 0x28
   12320:	ldr	r0, [r0]
   12324:	bl	5374 <timer_delete@plt>
   12328:	ldr	r0, [r4, #40]	; 0x28
   1232c:	cmp	r0, #0
   12330:	beq	12338 <rb_sigio_unsched_event+0x38>
   12334:	bl	4ffc <free@plt>
   12338:	mov	r0, #0
   1233c:	str	r0, [r4, #40]	; 0x28
   12340:	pop	{r4, sl, fp, pc}
   12344:	.word	0x00033980

00012348 <rb_setup_fd_select>:
   12348:	mov	r0, #0
   1234c:	bx	lr

00012350 <rb_init_netio_select>:
   12350:	push	{fp, lr}
   12354:	mov	fp, sp
   12358:	ldr	r0, [pc, #64]	; 123a0 <rb_init_netio_select+0x50>
   1235c:	mov	r2, #128	; 0x80
   12360:	ldr	r0, [pc, r0]
   12364:	ldr	r1, [r0]
   12368:	cmp	r1, #1024	; 0x400
   1236c:	movgt	r1, #1024	; 0x400
   12370:	strgt	r1, [r0]
   12374:	mov	r1, #0
   12378:	ldr	r0, [pc, #36]	; 123a4 <rb_init_netio_select+0x54>
   1237c:	add	r0, pc, r0
   12380:	bl	4f3c <memset@plt>
   12384:	ldr	r0, [pc, #28]	; 123a8 <rb_init_netio_select+0x58>
   12388:	mov	r1, #0
   1238c:	mov	r2, #128	; 0x80
   12390:	add	r0, pc, r0
   12394:	bl	4f3c <memset@plt>
   12398:	mov	r0, #0
   1239c:	pop	{fp, pc}
   123a0:	.word	0x00016020
   123a4:	.word	0x0003391c
   123a8:	.word	0x00033988

000123ac <rb_setselect_select>:
   123ac:	push	{r4, r5, r6, r7, fp, lr}
   123b0:	add	fp, sp, #16
   123b4:	mov	r5, r3
   123b8:	mov	r4, r2
   123bc:	mov	r7, r1
   123c0:	mov	r6, r0
   123c4:	tst	r1, #1
   123c8:	beq	123e4 <rb_setselect_select+0x38>
   123cc:	mov	r0, r6
   123d0:	mov	r1, #1
   123d4:	mov	r2, r4
   123d8:	str	r4, [r6, #28]
   123dc:	str	r5, [r6, #32]
   123e0:	bl	12408 <select_update_selectfds>
   123e4:	tst	r7, #2
   123e8:	popeq	{r4, r5, r6, r7, fp, pc}
   123ec:	str	r4, [r6, #36]	; 0x24
   123f0:	str	r5, [r6, #40]	; 0x28
   123f4:	mov	r0, r6
   123f8:	mov	r1, #2
   123fc:	mov	r2, r4
   12400:	pop	{r4, r5, r6, r7, fp, lr}
   12404:	b	12408 <select_update_selectfds>

00012408 <select_update_selectfds>:
   12408:	push	{r4, r5, fp, lr}
   1240c:	add	fp, sp, #8
   12410:	tst	r1, #1
   12414:	beq	12474 <select_update_selectfds+0x6c>
   12418:	ldr	r3, [r0, #12]
   1241c:	ldr	lr, [pc, #352]	; 12584 <select_update_selectfds+0x17c>
   12420:	mov	r4, #1
   12424:	cmp	r2, #0
   12428:	and	ip, r3, #31
   1242c:	add	lr, pc, lr
   12430:	lsl	ip, r4, ip
   12434:	asr	r4, r3, #31
   12438:	add	r3, r3, r4, lsr #27
   1243c:	asr	r3, r3, #5
   12440:	beq	1245c <select_update_selectfds+0x54>
   12444:	ldr	r4, [lr, r3, lsl #2]
   12448:	orr	r4, r4, ip
   1244c:	str	r4, [lr, r3, lsl #2]
   12450:	ldr	r3, [r0, #20]
   12454:	orr	r3, r3, #1
   12458:	b	12470 <select_update_selectfds+0x68>
   1245c:	ldr	r4, [lr, r3, lsl #2]
   12460:	bic	r4, r4, ip
   12464:	str	r4, [lr, r3, lsl #2]
   12468:	ldr	r3, [r0, #20]
   1246c:	bic	r3, r3, #1
   12470:	str	r3, [r0, #20]
   12474:	tst	r1, #2
   12478:	bne	12488 <select_update_selectfds+0x80>
   1247c:	ldr	r1, [r0, #12]
   12480:	ldr	r2, [r0, #20]
   12484:	b	124f8 <select_update_selectfds+0xf0>
   12488:	ldr	r1, [r0, #12]
   1248c:	mov	r4, #1
   12490:	cmp	r2, #0
   12494:	and	r3, r1, #31
   12498:	lsl	r3, r4, r3
   1249c:	beq	124cc <select_update_selectfds+0xc4>
   124a0:	ldr	ip, [pc, #224]	; 12588 <select_update_selectfds+0x180>
   124a4:	asr	r2, r1, #31
   124a8:	add	r2, r1, r2, lsr #27
   124ac:	asr	r2, r2, #5
   124b0:	add	ip, pc, ip
   124b4:	ldr	r4, [ip, r2, lsl #2]
   124b8:	orr	r3, r4, r3
   124bc:	str	r3, [ip, r2, lsl #2]
   124c0:	ldr	r2, [r0, #20]
   124c4:	orr	r2, r2, #2
   124c8:	b	124f4 <select_update_selectfds+0xec>
   124cc:	ldr	ip, [pc, #184]	; 1258c <select_update_selectfds+0x184>
   124d0:	asr	r2, r1, #31
   124d4:	add	r2, r1, r2, lsr #27
   124d8:	asr	r2, r2, #5
   124dc:	add	ip, pc, ip
   124e0:	ldr	r4, [ip, r2, lsl #2]
   124e4:	bic	r3, r4, r3
   124e8:	str	r3, [ip, r2, lsl #2]
   124ec:	ldr	r2, [r0, #20]
   124f0:	bic	r2, r2, #2
   124f4:	str	r2, [r0, #20]
   124f8:	ldr	r0, [pc, #144]	; 12590 <select_update_selectfds+0x188>
   124fc:	tst	r2, #3
   12500:	ldr	r0, [pc, r0]
   12504:	beq	12520 <select_update_selectfds+0x118>
   12508:	cmp	r1, r0
   1250c:	pople	{r4, r5, fp, pc}
   12510:	ldr	r0, [pc, #124]	; 12594 <select_update_selectfds+0x18c>
   12514:	add	r0, pc, r0
   12518:	str	r1, [r0]
   1251c:	pop	{r4, r5, fp, pc}
   12520:	cmp	r0, #0
   12524:	bmi	12580 <select_update_selectfds+0x178>
   12528:	cmp	r1, r0
   1252c:	bgt	12580 <select_update_selectfds+0x178>
   12530:	ldr	r2, [pc, #96]	; 12598 <select_update_selectfds+0x190>
   12534:	ldr	lr, [pc, #96]	; 1259c <select_update_selectfds+0x194>
   12538:	ldr	ip, [pc, #96]	; 125a0 <select_update_selectfds+0x198>
   1253c:	mov	r1, #1
   12540:	add	r2, pc, r2
   12544:	add	lr, pc, lr
   12548:	add	ip, pc, ip
   1254c:	lsr	r3, r0, #5
   12550:	and	r4, r0, #31
   12554:	ldr	r5, [r2, r3, lsl #2]
   12558:	tst	r5, r1, lsl r4
   1255c:	ldreq	r3, [lr, r3, lsl #2]
   12560:	lsleq	r4, r1, r4
   12564:	tsteq	r3, r4
   12568:	bne	12580 <select_update_selectfds+0x178>
   1256c:	sub	r3, r0, #1
   12570:	cmp	r0, #0
   12574:	mov	r0, r3
   12578:	str	r3, [ip]
   1257c:	bgt	1254c <select_update_selectfds+0x144>
   12580:	pop	{r4, r5, fp, pc}
   12584:	.word	0x0003386c
   12588:	.word	0x00033868
   1258c:	.word	0x0003383c
   12590:	.word	0x00015f68
   12594:	.word	0x00015f54
   12598:	.word	0x00033758
   1259c:	.word	0x000337d4
   125a0:	.word	0x00015f20

000125a4 <rb_select_select>:
   125a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125a8:	add	fp, sp, #28
   125ac:	sub	sp, sp, #12
   125b0:	ldr	r8, [pc, #468]	; 1278c <rb_select_select+0x1e8>
   125b4:	ldr	r1, [pc, #468]	; 12790 <rb_select_select+0x1ec>
   125b8:	mov	r6, r0
   125bc:	mov	r2, #128	; 0x80
   125c0:	add	r8, pc, r8
   125c4:	add	r1, pc, r1
   125c8:	mov	r0, r8
   125cc:	bl	5104 <memcpy@plt>
   125d0:	ldr	r9, [pc, #444]	; 12794 <rb_select_select+0x1f0>
   125d4:	ldr	r1, [pc, #444]	; 12798 <rb_select_select+0x1f4>
   125d8:	mov	r2, #128	; 0x80
   125dc:	add	r9, pc, r9
   125e0:	add	r1, pc, r1
   125e4:	mov	r0, r9
   125e8:	bl	5104 <memcpy@plt>
   125ec:	mov	r0, #1000	; 0x3e8
   125f0:	mov	r4, #0
   125f4:	add	r5, sp, #4
   125f8:	mul	r7, r6, r0
   125fc:	stmib	sp, {r4, r7}
   12600:	mov	r1, r8
   12604:	mov	r2, r9
   12608:	mov	r3, #0
   1260c:	ldr	r0, [pc, #392]	; 1279c <rb_select_select+0x1f8>
   12610:	ldr	r0, [pc, r0]
   12614:	str	r5, [sp]
   12618:	add	r0, r0, #1
   1261c:	bl	523c <select@plt>
   12620:	cmn	r0, #1
   12624:	bgt	12648 <rb_select_select+0xa4>
   12628:	bl	55e4 <__errno_location@plt>
   1262c:	ldr	r0, [r0]
   12630:	bl	4d14 <rb_ignore_errno@plt>
   12634:	cmp	r0, #0
   12638:	bne	125fc <rb_select_select+0x58>
   1263c:	bl	5290 <rb_set_time@plt>
   12640:	mvn	r0, #0
   12644:	b	12784 <rb_select_select+0x1e0>
   12648:	mov	r6, r0
   1264c:	bl	5290 <rb_set_time@plt>
   12650:	mov	r0, #0
   12654:	cmp	r6, #0
   12658:	beq	12784 <rb_select_select+0x1e0>
   1265c:	ldr	r1, [pc, #316]	; 127a0 <rb_select_select+0x1fc>
   12660:	ldr	r1, [pc, r1]
   12664:	cmp	r1, #0
   12668:	bmi	12784 <rb_select_select+0x1e0>
   1266c:	ldr	sl, [pc, #304]	; 127a4 <rb_select_select+0x200>
   12670:	mov	r0, #0
   12674:	ldr	sl, [pc, sl]
   12678:	mov	r7, r0
   1267c:	eor	r0, r0, r0, lsr #12
   12680:	ldr	r1, [sl]
   12684:	bfc	r0, #12, #20
   12688:	eor	r0, r0, r7, lsr #24
   1268c:	add	r0, r0, r0, lsl #1
   12690:	ldr	r0, [r1, r0, lsl #2]
   12694:	cmp	r0, #0
   12698:	beq	1276c <rb_select_select+0x1c8>
   1269c:	ldr	r6, [r0]
   126a0:	ldr	r1, [r6, #12]
   126a4:	cmp	r1, r7
   126a8:	beq	126b4 <rb_select_select+0x110>
   126ac:	ldr	r0, [r0, #8]
   126b0:	b	12694 <rb_select_select+0xf0>
   126b4:	cmp	r6, #0
   126b8:	beq	1276c <rb_select_select+0x1c8>
   126bc:	lsr	r4, r7, #5
   126c0:	and	r5, r7, #31
   126c4:	mov	r1, #1
   126c8:	ldr	r0, [r8, r4, lsl #2]
   126cc:	tst	r0, r1, lsl r5
   126d0:	beq	126f4 <rb_select_select+0x150>
   126d4:	ldr	r2, [r6, #28]
   126d8:	mov	r0, #0
   126dc:	str	r0, [r6, #28]
   126e0:	cmp	r2, #0
   126e4:	beq	126f4 <rb_select_select+0x150>
   126e8:	ldr	r1, [r6, #32]
   126ec:	mov	r0, r6
   126f0:	blx	r2
   126f4:	ldrb	r0, [r6, #16]
   126f8:	tst	r0, #1
   126fc:	beq	1276c <rb_select_select+0x1c8>
   12700:	ldr	r1, [r9, r4, lsl #2]
   12704:	mov	r0, #1
   12708:	lsl	r0, r0, r5
   1270c:	tst	r1, r0
   12710:	beq	12734 <rb_select_select+0x190>
   12714:	ldr	r2, [r6, #36]	; 0x24
   12718:	mov	r0, #0
   1271c:	str	r0, [r6, #36]	; 0x24
   12720:	cmp	r2, #0
   12724:	beq	12734 <rb_select_select+0x190>
   12728:	ldr	r1, [r6, #40]	; 0x28
   1272c:	mov	r0, r6
   12730:	blx	r2
   12734:	ldr	r0, [r6, #28]
   12738:	cmp	r0, #0
   1273c:	bne	12750 <rb_select_select+0x1ac>
   12740:	mov	r0, r6
   12744:	mov	r1, #1
   12748:	mov	r2, #0
   1274c:	bl	12408 <select_update_selectfds>
   12750:	ldr	r0, [r6, #36]	; 0x24
   12754:	cmp	r0, #0
   12758:	bne	1276c <rb_select_select+0x1c8>
   1275c:	mov	r0, r6
   12760:	mov	r1, #2
   12764:	mov	r2, #0
   12768:	bl	12408 <select_update_selectfds>
   1276c:	ldr	r1, [pc, #52]	; 127a8 <rb_select_select+0x204>
   12770:	add	r0, r7, #1
   12774:	ldr	r1, [pc, r1]
   12778:	cmp	r7, r1
   1277c:	blt	12678 <rb_select_select+0xd4>
   12780:	mov	r0, #0
   12784:	sub	sp, fp, #28
   12788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1278c:	.word	0x000337d8
   12790:	.word	0x000336d4
   12794:	.word	0x0003383c
   12798:	.word	0x00033738
   1279c:	.word	0x00015e58
   127a0:	.word	0x00015e08
   127a4:	.word	0x00015d2c
   127a8:	.word	0x00015cf4

000127ac <rb_init_netio_kqueue>:
   127ac:	push	{fp, lr}
   127b0:	mov	fp, sp
   127b4:	bl	55e4 <__errno_location@plt>
   127b8:	mov	r1, #38	; 0x26
   127bc:	str	r1, [r0]
   127c0:	mvn	r0, #0
   127c4:	pop	{fp, pc}

000127c8 <rb_setselect_kqueue>:
   127c8:	push	{fp, lr}
   127cc:	mov	fp, sp
   127d0:	bl	55e4 <__errno_location@plt>
   127d4:	mov	r1, #38	; 0x26
   127d8:	str	r1, [r0]
   127dc:	pop	{fp, pc}

000127e0 <rb_select_kqueue>:
   127e0:	push	{fp, lr}
   127e4:	mov	fp, sp
   127e8:	bl	55e4 <__errno_location@plt>
   127ec:	mov	r1, #38	; 0x26
   127f0:	str	r1, [r0]
   127f4:	mvn	r0, #0
   127f8:	pop	{fp, pc}

000127fc <rb_setup_fd_kqueue>:
   127fc:	push	{fp, lr}
   12800:	mov	fp, sp
   12804:	bl	55e4 <__errno_location@plt>
   12808:	mov	r1, #38	; 0x26
   1280c:	str	r1, [r0]
   12810:	mvn	r0, #0
   12814:	pop	{fp, pc}

00012818 <rb_kqueue_init_event>:
   12818:	bx	lr

0001281c <rb_kqueue_sched_event>:
   1281c:	push	{fp, lr}
   12820:	mov	fp, sp
   12824:	bl	55e4 <__errno_location@plt>
   12828:	mov	r1, #38	; 0x26
   1282c:	str	r1, [r0]
   12830:	mvn	r0, #0
   12834:	pop	{fp, pc}

00012838 <rb_kqueue_unsched_event>:
   12838:	bx	lr

0001283c <rb_kqueue_supports_event>:
   1283c:	push	{fp, lr}
   12840:	mov	fp, sp
   12844:	bl	55e4 <__errno_location@plt>
   12848:	mov	r1, #38	; 0x26
   1284c:	str	r1, [r0]
   12850:	mov	r0, #0
   12854:	pop	{fp, pc}

00012858 <rb_rawbuf_flush>:
   12858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1285c:	add	fp, sp, #28
   12860:	sub	sp, sp, #4
   12864:	sub	sp, sp, #8192	; 0x2000
   12868:	mov	r4, r0
   1286c:	ldr	r0, [r0]
   12870:	cmp	r0, #0
   12874:	beq	12a2c <rb_rawbuf_flush+0x1d4>
   12878:	mov	r0, r1
   1287c:	mov	r8, r1
   12880:	bl	4de0 <rb_fd_ssl@plt>
   12884:	cmp	r0, #0
   12888:	beq	128a8 <rb_rawbuf_flush+0x50>
   1288c:	ldr	r0, [r4]
   12890:	ldr	r6, [r0]
   12894:	ldrb	r0, [r6, #1040]	; 0x410
   12898:	cmp	r0, #0
   1289c:	beq	12a40 <rb_rawbuf_flush+0x1e8>
   128a0:	ldr	r0, [r4, #16]
   128a4:	b	12a50 <rb_rawbuf_flush+0x1f8>
   128a8:	mov	r7, sp
   128ac:	mov	r1, #0
   128b0:	mov	r2, #8192	; 0x2000
   128b4:	mov	r6, #0
   128b8:	mov	r0, r7
   128bc:	bl	4f3c <memset@plt>
   128c0:	ldr	r0, [r4]
   128c4:	cmp	r0, #0
   128c8:	beq	12a2c <rb_rawbuf_flush+0x1d4>
   128cc:	movw	r1, #1022	; 0x3fe
   128d0:	ldr	r3, [r0]
   128d4:	ldrb	r2, [r3, #1040]	; 0x410
   128d8:	cmp	r2, #0
   128dc:	beq	128f4 <rb_rawbuf_flush+0x9c>
   128e0:	ldr	r5, [r4, #16]
   128e4:	ldr	r2, [r3, #1036]	; 0x40c
   128e8:	add	r3, r3, r5
   128ec:	sub	r2, r2, r5
   128f0:	b	128f8 <rb_rawbuf_flush+0xa0>
   128f4:	ldr	r2, [r3, #1036]	; 0x40c
   128f8:	add	r5, r3, #12
   128fc:	add	r3, r7, r6, lsl #3
   12900:	add	r9, r6, #1
   12904:	cmp	r6, r1
   12908:	str	r5, [r7, r6, lsl #3]
   1290c:	str	r2, [r3, #4]
   12910:	bhi	12924 <rb_rawbuf_flush+0xcc>
   12914:	ldr	r0, [r0, #8]
   12918:	mov	r6, r9
   1291c:	cmp	r0, #0
   12920:	bne	128d0 <rb_rawbuf_flush+0x78>
   12924:	mov	r1, sp
   12928:	mov	r0, r8
   1292c:	mov	r2, r9
   12930:	bl	53d4 <rb_writev@plt>
   12934:	mov	r8, r0
   12938:	cmp	r0, #1
   1293c:	blt	12af8 <rb_rawbuf_flush+0x2a0>
   12940:	ldr	sl, [r4]
   12944:	cmp	sl, #0
   12948:	beq	12af8 <rb_rawbuf_flush+0x2a0>
   1294c:	mov	r6, #0
   12950:	mov	r5, r8
   12954:	ldr	r1, [sl]
   12958:	ldr	sl, [sl, #8]
   1295c:	ldrb	r0, [r1, #1040]	; 0x410
   12960:	ldr	r3, [r1, #1036]	; 0x40c
   12964:	cmp	r0, #0
   12968:	beq	1297c <rb_rawbuf_flush+0x124>
   1296c:	ldr	r0, [r4, #16]
   12970:	sub	r7, r3, r0
   12974:	cmp	r5, r7
   12978:	bge	129ac <rb_rawbuf_flush+0x154>
   1297c:	cmp	r5, r3
   12980:	blt	12b04 <rb_rawbuf_flush+0x2ac>
   12984:	ldr	r0, [r4, #12]
   12988:	sub	r0, r0, r3
   1298c:	str	r0, [r4, #12]
   12990:	ldr	r0, [r1, #8]
   12994:	ldr	r2, [r1, #4]
   12998:	cmp	r0, #0
   1299c:	beq	129d4 <rb_rawbuf_flush+0x17c>
   129a0:	str	r2, [r0, #4]
   129a4:	mov	r7, r3
   129a8:	b	129cc <rb_rawbuf_flush+0x174>
   129ac:	ldr	r0, [r4, #12]
   129b0:	sub	r0, r0, r7
   129b4:	str	r0, [r4, #12]
   129b8:	ldr	r0, [r1, #8]
   129bc:	ldr	r2, [r1, #4]
   129c0:	cmp	r0, #0
   129c4:	beq	129e0 <rb_rawbuf_flush+0x188>
   129c8:	str	r2, [r0, #4]
   129cc:	ldr	r2, [r1, #4]
   129d0:	b	129e4 <rb_rawbuf_flush+0x18c>
   129d4:	str	r2, [r4, #4]
   129d8:	mov	r7, r3
   129dc:	b	129e4 <rb_rawbuf_flush+0x18c>
   129e0:	str	r2, [r4, #4]
   129e4:	cmp	r2, #0
   129e8:	mov	r3, r4
   129ec:	addne	r3, r2, #8
   129f0:	str	r0, [r3]
   129f4:	str	r6, [r1, #4]
   129f8:	str	r6, [r1, #8]
   129fc:	ldr	r0, [r4, #8]
   12a00:	sub	r0, r0, #1
   12a04:	str	r0, [r4, #8]
   12a08:	ldr	r0, [pc, #268]	; 12b1c <rb_rawbuf_flush+0x2c4>
   12a0c:	ldr	r0, [pc, r0]
   12a10:	bl	51dc <rb_bh_free@plt>
   12a14:	cmp	sl, #0
   12a18:	beq	12af8 <rb_rawbuf_flush+0x2a0>
   12a1c:	sub	r5, r5, r7
   12a20:	subs	r9, r9, #1
   12a24:	bne	12954 <rb_rawbuf_flush+0xfc>
   12a28:	b	12af8 <rb_rawbuf_flush+0x2a0>
   12a2c:	bl	55e4 <__errno_location@plt>
   12a30:	mov	r1, #11
   12a34:	mvn	r8, #0
   12a38:	str	r1, [r0]
   12a3c:	b	12af8 <rb_rawbuf_flush+0x2a0>
   12a40:	mov	r0, #1
   12a44:	strb	r0, [r6, #1040]	; 0x410
   12a48:	mov	r0, #0
   12a4c:	str	r0, [r4, #16]
   12a50:	ldr	r1, [r6, #1036]	; 0x40c
   12a54:	sub	r2, r1, r0
   12a58:	add	r0, r6, r0
   12a5c:	add	r1, r0, #12
   12a60:	mov	r0, r8
   12a64:	bl	4f6c <rb_write@plt>
   12a68:	mov	r8, r0
   12a6c:	cmp	r0, #1
   12a70:	blt	12af8 <rb_rawbuf_flush+0x2a0>
   12a74:	ldr	r0, [r4, #16]
   12a78:	add	r0, r0, r8
   12a7c:	str	r0, [r4, #16]
   12a80:	ldr	r1, [r6, #1036]	; 0x40c
   12a84:	cmp	r0, r1
   12a88:	bne	12aec <rb_rawbuf_flush+0x294>
   12a8c:	mov	r0, #0
   12a90:	str	r0, [r4, #16]
   12a94:	ldr	r0, [r6, #8]
   12a98:	ldr	r1, [r6, #4]
   12a9c:	cmp	r0, #0
   12aa0:	beq	12ab0 <rb_rawbuf_flush+0x258>
   12aa4:	str	r1, [r0, #4]
   12aa8:	ldr	r1, [r6, #4]
   12aac:	b	12ab4 <rb_rawbuf_flush+0x25c>
   12ab0:	str	r1, [r4, #4]
   12ab4:	cmp	r1, #0
   12ab8:	mov	r2, r4
   12abc:	addne	r2, r1, #8
   12ac0:	mov	r1, r6
   12ac4:	str	r0, [r2]
   12ac8:	mov	r0, #0
   12acc:	str	r0, [r6, #4]
   12ad0:	str	r0, [r6, #8]
   12ad4:	ldr	r0, [r4, #8]
   12ad8:	sub	r0, r0, #1
   12adc:	str	r0, [r4, #8]
   12ae0:	ldr	r0, [pc, #56]	; 12b20 <rb_rawbuf_flush+0x2c8>
   12ae4:	ldr	r0, [pc, r0]
   12ae8:	bl	51dc <rb_bh_free@plt>
   12aec:	ldr	r0, [r4, #12]
   12af0:	sub	r0, r0, r8
   12af4:	str	r0, [r4, #12]
   12af8:	mov	r0, r8
   12afc:	sub	sp, fp, #28
   12b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b04:	mov	r0, #1
   12b08:	strb	r0, [r1, #1040]	; 0x410
   12b0c:	str	r5, [r4, #16]
   12b10:	ldr	r0, [r4, #12]
   12b14:	sub	r0, r0, r5
   12b18:	b	12af4 <rb_rawbuf_flush+0x29c>
   12b1c:	.word	0x0003348c
   12b20:	.word	0x000333b4

00012b24 <rb_rawbuf_append>:
   12b24:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12b28:	add	fp, sp, #24
   12b2c:	mov	r8, r0
   12b30:	ldr	r0, [r0, #4]
   12b34:	mov	r6, r2
   12b38:	mov	r5, r1
   12b3c:	cmp	r0, #0
   12b40:	beq	12bac <rb_rawbuf_append+0x88>
   12b44:	ldr	r4, [r0]
   12b48:	cmp	r4, #0
   12b4c:	beq	12bac <rb_rawbuf_append+0x88>
   12b50:	ldr	r0, [r4, #1036]	; 0x40c
   12b54:	cmp	r0, #1024	; 0x400
   12b58:	bge	12bac <rb_rawbuf_append+0x88>
   12b5c:	ldrb	r1, [r4, #1040]	; 0x410
   12b60:	cmp	r1, #0
   12b64:	bne	12bac <rb_rawbuf_append+0x88>
   12b68:	rsb	r7, r0, #1024	; 0x400
   12b6c:	add	r0, r4, r0
   12b70:	mov	r1, r5
   12b74:	cmp	r7, r6
   12b78:	add	r0, r0, #12
   12b7c:	movgt	r7, r6
   12b80:	mov	r2, r7
   12b84:	bl	5104 <memcpy@plt>
   12b88:	ldr	r0, [r4, #1036]	; 0x40c
   12b8c:	subs	r6, r6, r7
   12b90:	add	r0, r7, r0
   12b94:	str	r0, [r4, #1036]	; 0x40c
   12b98:	ldr	r0, [r8, #12]
   12b9c:	add	r0, r0, r7
   12ba0:	str	r0, [r8, #12]
   12ba4:	beq	12c58 <rb_rawbuf_append+0x134>
   12ba8:	add	r5, r5, r7
   12bac:	cmp	r6, #1
   12bb0:	blt	12c58 <rb_rawbuf_append+0x134>
   12bb4:	mov	r9, #0
   12bb8:	ldr	r0, [pc, #156]	; 12c5c <rb_rawbuf_append+0x138>
   12bbc:	ldr	r0, [pc, r0]
   12bc0:	bl	5254 <rb_bh_alloc@plt>
   12bc4:	str	r9, [r0, #8]
   12bc8:	str	r0, [r0]
   12bcc:	mov	r7, r0
   12bd0:	ldr	r0, [r8, #4]
   12bd4:	cmp	r0, #0
   12bd8:	str	r0, [r7, #4]
   12bdc:	beq	12bec <rb_rawbuf_append+0xc8>
   12be0:	add	r0, r0, #8
   12be4:	str	r7, [r0]
   12be8:	b	12bf8 <rb_rawbuf_append+0xd4>
   12bec:	ldr	r0, [r8]
   12bf0:	cmp	r0, #0
   12bf4:	beq	12c50 <rb_rawbuf_append+0x12c>
   12bf8:	str	r7, [r8, #4]
   12bfc:	cmp	r6, #1024	; 0x400
   12c00:	mov	r4, r6
   12c04:	mov	r1, r5
   12c08:	ldr	r0, [r8, #8]
   12c0c:	movge	r4, #1024	; 0x400
   12c10:	mov	r2, r4
   12c14:	add	r0, r0, #1
   12c18:	str	r0, [r8, #8]
   12c1c:	add	r0, r7, #12
   12c20:	bl	5104 <memcpy@plt>
   12c24:	ldr	r0, [r7, #1036]	; 0x40c
   12c28:	sub	r6, r6, r4
   12c2c:	add	r5, r5, r4
   12c30:	cmp	r6, #0
   12c34:	add	r0, r0, r4
   12c38:	str	r0, [r7, #1036]	; 0x40c
   12c3c:	ldr	r0, [r8, #12]
   12c40:	add	r0, r0, r4
   12c44:	str	r0, [r8, #12]
   12c48:	bgt	12bb8 <rb_rawbuf_append+0x94>
   12c4c:	b	12c58 <rb_rawbuf_append+0x134>
   12c50:	mov	r0, r8
   12c54:	b	12be4 <rb_rawbuf_append+0xc0>
   12c58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12c5c:	.word	0x000332dc

00012c60 <rb_rawbuf_get>:
   12c60:	push	{r4, r5, r6, r7, fp, lr}
   12c64:	add	fp, sp, #16
   12c68:	mov	r4, r0
   12c6c:	ldr	r0, [r0]
   12c70:	cmp	r0, #0
   12c74:	beq	12c9c <rb_rawbuf_get+0x3c>
   12c78:	ldr	r7, [r0]
   12c7c:	mov	r5, r2
   12c80:	ldrb	r0, [r7, #1040]	; 0x410
   12c84:	cmp	r0, #0
   12c88:	beq	12ca4 <rb_rawbuf_get+0x44>
   12c8c:	ldr	r0, [r4, #16]
   12c90:	add	r0, r7, r0
   12c94:	add	r2, r0, #12
   12c98:	b	12ca8 <rb_rawbuf_get+0x48>
   12c9c:	mov	r6, #0
   12ca0:	b	12d68 <rb_rawbuf_get+0x108>
   12ca4:	add	r2, r7, #12
   12ca8:	ldr	r6, [r7, #1036]	; 0x40c
   12cac:	mov	r0, r1
   12cb0:	mov	r1, r2
   12cb4:	cmp	r6, r5
   12cb8:	movge	r6, r5
   12cbc:	mov	r2, r6
   12cc0:	bl	5104 <memcpy@plt>
   12cc4:	ldr	r0, [r7, #1036]	; 0x40c
   12cc8:	cmp	r0, r6
   12ccc:	bne	12cf4 <rb_rawbuf_get+0x94>
   12cd0:	mov	r0, #0
   12cd4:	str	r0, [r4, #16]
   12cd8:	ldr	r0, [r7, #8]
   12cdc:	ldr	r1, [r7, #4]
   12ce0:	cmp	r0, #0
   12ce4:	beq	12d20 <rb_rawbuf_get+0xc0>
   12ce8:	str	r1, [r0, #4]
   12cec:	ldr	r1, [r7, #4]
   12cf0:	b	12d24 <rb_rawbuf_get+0xc4>
   12cf4:	mov	r1, #1
   12cf8:	sub	r0, r0, r6
   12cfc:	strb	r1, [r7, #1040]	; 0x410
   12d00:	str	r0, [r7, #1036]	; 0x40c
   12d04:	ldr	r0, [r4, #12]
   12d08:	ldr	r1, [r4, #16]
   12d0c:	sub	r0, r0, r6
   12d10:	add	r1, r1, r6
   12d14:	str	r0, [r4, #12]
   12d18:	str	r1, [r4, #16]
   12d1c:	b	12d68 <rb_rawbuf_get+0x108>
   12d20:	str	r1, [r4, #4]
   12d24:	cmp	r1, #0
   12d28:	mov	r2, r4
   12d2c:	addne	r2, r1, #8
   12d30:	mov	r1, r7
   12d34:	str	r0, [r2]
   12d38:	mov	r0, #0
   12d3c:	str	r0, [r7, #4]
   12d40:	str	r0, [r7, #8]
   12d44:	ldr	r0, [r4, #8]
   12d48:	sub	r0, r0, #1
   12d4c:	str	r0, [r4, #8]
   12d50:	ldr	r0, [pc, #24]	; 12d70 <rb_rawbuf_get+0x110>
   12d54:	ldr	r0, [pc, r0]
   12d58:	bl	51dc <rb_bh_free@plt>
   12d5c:	ldr	r0, [r4, #12]
   12d60:	sub	r0, r0, r5
   12d64:	str	r0, [r4, #12]
   12d68:	mov	r0, r6
   12d6c:	pop	{r4, r5, r6, r7, fp, pc}
   12d70:	.word	0x00033144

00012d74 <rb_rawbuf_length>:
   12d74:	ldr	r0, [r0, #12]
   12d78:	bx	lr

00012d7c <rb_new_rawbuffer>:
   12d7c:	push	{fp, lr}
   12d80:	mov	fp, sp
   12d84:	mov	r0, #1
   12d88:	mov	r1, #20
   12d8c:	bl	4f00 <calloc@plt>
   12d90:	cmp	r0, #0
   12d94:	popne	{fp, pc}
   12d98:	bl	5284 <rb_outofmemory@plt>

00012d9c <rb_free_rawbuffer>:
   12d9c:	push	{r4, r5, r6, sl, fp, lr}
   12da0:	add	fp, sp, #16
   12da4:	ldr	r5, [r0]
   12da8:	mov	r4, r0
   12dac:	cmp	r5, #0
   12db0:	beq	12e18 <rb_free_rawbuffer+0x7c>
   12db4:	mov	r6, #0
   12db8:	ldr	r1, [r5]
   12dbc:	ldr	r5, [r5, #8]
   12dc0:	ldr	r0, [r1, #8]
   12dc4:	ldr	r2, [r1, #4]
   12dc8:	cmp	r0, #0
   12dcc:	beq	12ddc <rb_free_rawbuffer+0x40>
   12dd0:	str	r2, [r0, #4]
   12dd4:	ldr	r2, [r1, #4]
   12dd8:	b	12de0 <rb_free_rawbuffer+0x44>
   12ddc:	str	r2, [r4, #4]
   12de0:	cmp	r2, #0
   12de4:	mov	r3, r4
   12de8:	addne	r3, r2, #8
   12dec:	str	r0, [r3]
   12df0:	str	r6, [r1, #4]
   12df4:	str	r6, [r1, #8]
   12df8:	ldr	r0, [r4, #8]
   12dfc:	sub	r0, r0, #1
   12e00:	str	r0, [r4, #8]
   12e04:	ldr	r0, [pc, #24]	; 12e24 <rb_free_rawbuffer+0x88>
   12e08:	ldr	r0, [pc, r0]
   12e0c:	bl	51dc <rb_bh_free@plt>
   12e10:	cmp	r5, #0
   12e14:	bne	12db8 <rb_free_rawbuffer+0x1c>
   12e18:	mov	r0, r4
   12e1c:	pop	{r4, r5, r6, sl, fp, lr}
   12e20:	b	4ffc <free@plt>
   12e24:	.word	0x00033090

00012e28 <rb_init_rawbuffers>:
   12e28:	push	{fp, lr}
   12e2c:	mov	fp, sp
   12e30:	mov	r1, r0
   12e34:	ldr	r0, [pc, #40]	; 12e64 <rb_init_rawbuffers+0x3c>
   12e38:	ldr	r0, [pc, r0]
   12e3c:	cmp	r0, #0
   12e40:	popne	{fp, pc}
   12e44:	ldr	r2, [pc, #28]	; 12e68 <rb_init_rawbuffers+0x40>
   12e48:	movw	r0, #1044	; 0x414
   12e4c:	add	r2, pc, r2
   12e50:	bl	53b0 <rb_bh_create@plt>
   12e54:	ldr	r1, [pc, #16]	; 12e6c <rb_init_rawbuffers+0x44>
   12e58:	add	r1, pc, r1
   12e5c:	str	r0, [r1]
   12e60:	pop	{fp, pc}
   12e64:	.word	0x00033060
   12e68:	.word	0x00003cad
   12e6c:	.word	0x00033040

00012e70 <rb_init_patricia>:
   12e70:	bx	lr

00012e74 <rb_new_patricia>:
   12e74:	push	{r4, sl, fp, lr}
   12e78:	add	fp, sp, #8
   12e7c:	mov	r4, r0
   12e80:	mov	r0, #1
   12e84:	mov	r1, #12
   12e88:	bl	4f00 <calloc@plt>
   12e8c:	cmp	r0, #0
   12e90:	strne	r4, [r0, #4]
   12e94:	ldrne	r1, [pc, #24]	; 12eb4 <rb_new_patricia+0x40>
   12e98:	ldrne	r1, [pc, r1]
   12e9c:	ldrne	r2, [pc, #20]	; 12eb8 <rb_new_patricia+0x44>
   12ea0:	addne	r1, r1, #1
   12ea4:	addne	r2, pc, r2
   12ea8:	strne	r1, [r2]
   12eac:	popne	{r4, sl, fp, pc}
   12eb0:	bl	5284 <rb_outofmemory@plt>
   12eb4:	.word	0x00033004
   12eb8:	.word	0x00032ff8

00012ebc <rb_clear_patricia>:
   12ebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ec0:	add	fp, sp, #28
   12ec4:	sub	sp, sp, #524	; 0x20c
   12ec8:	ldr	r6, [r0]
   12ecc:	mov	r4, r0
   12ed0:	cmp	r6, #0
   12ed4:	beq	12f78 <rb_clear_patricia+0xbc>
   12ed8:	mov	r9, r1
   12edc:	mov	sl, #0
   12ee0:	add	r8, sp, #4
   12ee4:	ldmib	r6, {r0, r5, r7}
   12ee8:	cmp	r0, #0
   12eec:	beq	12f18 <rb_clear_patricia+0x5c>
   12ef0:	ldr	r1, [r0, #4]
   12ef4:	subs	r1, r1, #1
   12ef8:	str	r1, [r0, #4]
   12efc:	bgt	12f04 <rb_clear_patricia+0x48>
   12f00:	bl	4ffc <free@plt>
   12f04:	cmp	r9, #0
   12f08:	ldrne	r0, [r6, #20]
   12f0c:	cmpne	r0, #0
   12f10:	beq	12f18 <rb_clear_patricia+0x5c>
   12f14:	blx	r9
   12f18:	mov	r0, r6
   12f1c:	bl	4ffc <free@plt>
   12f20:	ldr	r0, [r4, #8]
   12f24:	cmp	r5, #0
   12f28:	sub	r0, r0, #1
   12f2c:	str	r0, [r4, #8]
   12f30:	beq	12f48 <rb_clear_patricia+0x8c>
   12f34:	cmp	r7, #0
   12f38:	mov	r6, r5
   12f3c:	strne	r7, [r8, sl, lsl #2]
   12f40:	addne	sl, sl, #1
   12f44:	b	12f68 <rb_clear_patricia+0xac>
   12f48:	cmp	r7, #0
   12f4c:	beq	12f58 <rb_clear_patricia+0x9c>
   12f50:	mov	r6, r7
   12f54:	b	12f68 <rb_clear_patricia+0xac>
   12f58:	cmp	sl, #0
   12f5c:	beq	12f78 <rb_clear_patricia+0xbc>
   12f60:	sub	sl, sl, #1
   12f64:	ldr	r6, [r8, sl, lsl #2]
   12f68:	cmp	r6, #0
   12f6c:	bne	12ee4 <rb_clear_patricia+0x28>
   12f70:	cmp	r4, #0
   12f74:	beq	12f88 <rb_clear_patricia+0xcc>
   12f78:	mov	r0, r4
   12f7c:	sub	sp, fp, #28
   12f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f84:	b	4ffc <free@plt>
   12f88:	sub	sp, fp, #28
   12f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012f90 <rb_destroy_patricia>:
   12f90:	push	{fp, lr}
   12f94:	mov	fp, sp
   12f98:	bl	4e28 <rb_clear_patricia@plt>
   12f9c:	ldr	r0, [pc, #20]	; 12fb8 <rb_destroy_patricia+0x28>
   12fa0:	ldr	r0, [pc, r0]
   12fa4:	ldr	r1, [pc, #16]	; 12fbc <rb_destroy_patricia+0x2c>
   12fa8:	sub	r0, r0, #1
   12fac:	add	r1, pc, r1
   12fb0:	str	r0, [r1]
   12fb4:	pop	{fp, pc}
   12fb8:	.word	0x00032efc
   12fbc:	.word	0x00032ef0

00012fc0 <rb_patricia_process>:
   12fc0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12fc4:	add	fp, sp, #24
   12fc8:	sub	sp, sp, #520	; 0x208
   12fcc:	ldr	r7, [r0]
   12fd0:	cmp	r7, #0
   12fd4:	beq	1303c <rb_patricia_process+0x7c>
   12fd8:	mov	r4, r1
   12fdc:	mov	r5, #0
   12fe0:	add	r6, sp, #4
   12fe4:	ldr	r0, [r7, #4]
   12fe8:	cmp	r0, #0
   12fec:	beq	12ff8 <rb_patricia_process+0x38>
   12ff0:	ldr	r1, [r7, #20]
   12ff4:	blx	r4
   12ff8:	ldr	r0, [r7, #8]
   12ffc:	ldr	r7, [r7, #12]
   13000:	cmp	r0, #0
   13004:	beq	1301c <rb_patricia_process+0x5c>
   13008:	cmp	r7, #0
   1300c:	strne	r7, [r6, r5, lsl #2]
   13010:	addne	r5, r5, #1
   13014:	mov	r7, r0
   13018:	b	13034 <rb_patricia_process+0x74>
   1301c:	cmp	r7, #0
   13020:	bne	13034 <rb_patricia_process+0x74>
   13024:	cmp	r5, #0
   13028:	beq	1303c <rb_patricia_process+0x7c>
   1302c:	sub	r5, r5, #1
   13030:	ldr	r7, [r6, r5, lsl #2]
   13034:	cmp	r7, #0
   13038:	bne	12fe4 <rb_patricia_process+0x24>
   1303c:	sub	sp, fp, #24
   13040:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00013044 <rb_patricia_search_exact>:
   13044:	push	{r4, sl, fp, lr}
   13048:	add	fp, sp, #8
   1304c:	ldr	r4, [r0]
   13050:	mov	r0, #0
   13054:	cmp	r4, #0
   13058:	beq	130c0 <rb_patricia_search_exact+0x7c>
   1305c:	mov	r2, r1
   13060:	add	r1, r1, #8
   13064:	mov	ip, #128	; 0x80
   13068:	ldrh	r2, [r2, #2]
   1306c:	ldr	r3, [r4]
   13070:	cmp	r3, r2
   13074:	bcs	1309c <rb_patricia_search_exact+0x58>
   13078:	ldrb	lr, [r1, r3, lsr #3]
   1307c:	and	r3, r3, #7
   13080:	tst	lr, ip, lsr r3
   13084:	mov	r3, #12
   13088:	movweq	r3, #8
   1308c:	ldr	r4, [r4, r3]
   13090:	cmp	r4, #0
   13094:	bne	1306c <rb_patricia_search_exact+0x28>
   13098:	b	130c0 <rb_patricia_search_exact+0x7c>
   1309c:	pophi	{r4, sl, fp, pc}
   130a0:	ldr	r3, [r4, #4]
   130a4:	cmp	r3, #0
   130a8:	beq	130c0 <rb_patricia_search_exact+0x7c>
   130ac:	add	r0, r3, #8
   130b0:	bl	130c4 <comp_with_mask>
   130b4:	cmp	r0, #0
   130b8:	moveq	r4, r0
   130bc:	mov	r0, r4
   130c0:	pop	{r4, sl, fp, pc}

000130c4 <comp_with_mask>:
   130c4:	push	{r4, r5, r6, r7, fp, lr}
   130c8:	add	fp, sp, #16
   130cc:	lsr	r6, r2, #3
   130d0:	mov	r7, r2
   130d4:	mov	r4, r1
   130d8:	mov	r5, r0
   130dc:	mov	r2, r6
   130e0:	bl	5164 <bcmp@plt>
   130e4:	mov	r1, r0
   130e8:	mov	r0, #0
   130ec:	cmp	r1, #0
   130f0:	popne	{r4, r5, r6, r7, fp, pc}
   130f4:	ands	r0, r7, #7
   130f8:	beq	13120 <comp_with_mask+0x5c>
   130fc:	ldrb	r1, [r5, r6]
   13100:	ldrb	r2, [r4, r6]
   13104:	rsb	r0, r0, #8
   13108:	eor	r1, r2, r1
   1310c:	mov	r2, #255	; 0xff
   13110:	and	r0, r1, r2, lsl r0
   13114:	clz	r0, r0
   13118:	lsr	r0, r0, #5
   1311c:	pop	{r4, r5, r6, r7, fp, pc}
   13120:	mov	r0, #1
   13124:	pop	{r4, r5, r6, r7, fp, pc}

00013128 <rb_patricia_search_best2>:
   13128:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1312c:	add	fp, sp, #24
   13130:	sub	sp, sp, #520	; 0x208
   13134:	ldr	r5, [r0]
   13138:	cmp	r5, #0
   1313c:	beq	131f4 <rb_patricia_search_best2+0xcc>
   13140:	ldrh	r3, [r1, #2]
   13144:	add	r4, r1, #8
   13148:	mov	r0, #0
   1314c:	mov	lr, #128	; 0x80
   13150:	add	ip, sp, #4
   13154:	ldr	r6, [r5]
   13158:	cmp	r6, r3
   1315c:	bcs	13194 <rb_patricia_search_best2+0x6c>
   13160:	ldr	r7, [r5, #4]
   13164:	cmp	r7, #0
   13168:	strne	r5, [ip, r0, lsl #2]
   1316c:	addne	r0, r0, #1
   13170:	ldrb	r7, [r4, r6, lsr #3]
   13174:	and	r6, r6, #7
   13178:	tst	r7, lr, lsr r6
   1317c:	mov	r6, #12
   13180:	movweq	r6, #8
   13184:	ldr	r5, [r5, r6]
   13188:	cmp	r5, #0
   1318c:	bne	13154 <rb_patricia_search_best2+0x2c>
   13190:	b	131ac <rb_patricia_search_best2+0x84>
   13194:	cmp	r2, #0
   13198:	beq	131ac <rb_patricia_search_best2+0x84>
   1319c:	ldr	r2, [r5, #4]
   131a0:	cmp	r2, #0
   131a4:	strne	r5, [ip, r0, lsl #2]
   131a8:	addne	r0, r0, #1
   131ac:	cmp	r0, #1
   131b0:	blt	131f4 <rb_patricia_search_best2+0xcc>
   131b4:	cmp	r1, #0
   131b8:	sub	r6, ip, #4
   131bc:	moveq	r4, r1
   131c0:	subs	r7, r0, #1
   131c4:	blt	131f4 <rb_patricia_search_best2+0xcc>
   131c8:	ldr	r5, [r6, r0, lsl #2]
   131cc:	mov	r1, r4
   131d0:	ldr	r0, [r5, #4]
   131d4:	ldrh	r2, [r0, #2]
   131d8:	cmp	r0, #0
   131dc:	addne	r0, r0, #8
   131e0:	bl	130c4 <comp_with_mask>
   131e4:	cmp	r0, #0
   131e8:	mov	r0, r7
   131ec:	beq	131c0 <rb_patricia_search_best2+0x98>
   131f0:	b	131f8 <rb_patricia_search_best2+0xd0>
   131f4:	mov	r5, #0
   131f8:	mov	r0, r5
   131fc:	sub	sp, fp, #24
   13200:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00013204 <rb_patricia_search_best>:
   13204:	mov	r2, #1
   13208:	b	13128 <rb_patricia_search_best2>

0001320c <rb_patricia_lookup>:
   1320c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13210:	add	fp, sp, #28
   13214:	sub	sp, sp, #12
   13218:	ldr	r3, [r0]
   1321c:	mov	r5, r1
   13220:	mov	r9, r0
   13224:	cmp	r3, #0
   13228:	beq	13290 <rb_patricia_lookup+0x84>
   1322c:	ldrh	r8, [r5, #2]
   13230:	add	ip, r5, #8
   13234:	mov	r2, #128	; 0x80
   13238:	ldr	r1, [r3]
   1323c:	mov	r0, r3
   13240:	cmp	r1, r8
   13244:	bcc	13254 <rb_patricia_lookup+0x48>
   13248:	ldr	r3, [r0, #4]
   1324c:	cmp	r3, #0
   13250:	bne	132dc <rb_patricia_lookup+0xd0>
   13254:	ldr	r3, [r9, #4]
   13258:	cmp	r1, r3
   1325c:	bcs	13278 <rb_patricia_lookup+0x6c>
   13260:	ldrb	r3, [ip, r1, lsr #3]
   13264:	and	r7, r1, #7
   13268:	tst	r3, r2, lsr r7
   1326c:	beq	13278 <rb_patricia_lookup+0x6c>
   13270:	ldr	r3, [r0, #12]
   13274:	b	1327c <rb_patricia_lookup+0x70>
   13278:	ldr	r3, [r0, #8]
   1327c:	cmp	r3, #0
   13280:	bne	13238 <rb_patricia_lookup+0x2c>
   13284:	cmp	r1, r8
   13288:	movcs	r1, r8
   1328c:	b	132e0 <rb_patricia_lookup+0xd4>
   13290:	mov	r0, #1
   13294:	mov	r1, #24
   13298:	bl	4f00 <calloc@plt>
   1329c:	cmp	r0, #0
   132a0:	beq	13540 <rb_patricia_lookup+0x334>
   132a4:	mov	r4, r0
   132a8:	ldrh	r0, [r5, #2]
   132ac:	str	r0, [r4]
   132b0:	mov	r0, r5
   132b4:	bl	13544 <Ref_Prefix>
   132b8:	vmov.i32	q8, #0	; 0x00000000
   132bc:	add	r1, r4, #8
   132c0:	vst1.32	{d16-d17}, [r1]
   132c4:	str	r0, [r4, #4]
   132c8:	str	r4, [r9]
   132cc:	ldr	r0, [r9, #8]
   132d0:	add	r0, r0, #1
   132d4:	str	r0, [r9, #8]
   132d8:	b	13534 <rb_patricia_lookup+0x328>
   132dc:	mov	r1, r8
   132e0:	ldr	r7, [r0, #4]
   132e4:	cmp	r1, #0
   132e8:	str	r5, [sp, #8]
   132ec:	add	lr, r7, #8
   132f0:	beq	1336c <rb_patricia_lookup+0x160>
   132f4:	ldrb	r2, [ip]
   132f8:	ldrb	r3, [lr]
   132fc:	eor	r4, r3, r2
   13300:	mov	r2, #0
   13304:	mov	r3, #0
   13308:	tst	r4, #255	; 0xff
   1330c:	bne	13344 <rb_patricia_lookup+0x138>
   13310:	ldr	r3, [sp, #8]
   13314:	add	r7, r7, #9
   13318:	add	r6, r3, #9
   1331c:	mov	r3, #0
   13320:	add	sl, r3, #8
   13324:	cmp	sl, r1
   13328:	bcs	13370 <rb_patricia_lookup+0x164>
   1332c:	ldrb	r4, [r6], #1
   13330:	ldrb	r5, [r7], #1
   13334:	add	r3, r3, #8
   13338:	eor	r4, r5, r4
   1333c:	tst	r4, #255	; 0xff
   13340:	beq	13320 <rb_patricia_lookup+0x114>
   13344:	uxtb	r7, r4
   13348:	mov	r6, #128	; 0x80
   1334c:	tst	r7, r6, lsr r2
   13350:	bne	13364 <rb_patricia_lookup+0x158>
   13354:	add	r2, r2, #1
   13358:	cmp	r2, #8
   1335c:	bne	1334c <rb_patricia_lookup+0x140>
   13360:	mov	r2, #8
   13364:	add	sl, r2, r3
   13368:	b	13370 <rb_patricia_lookup+0x164>
   1336c:	mov	sl, #0
   13370:	cmp	sl, r1
   13374:	movhi	sl, r1
   13378:	mov	r6, r0
   1337c:	ldr	r0, [r0, #16]
   13380:	cmp	r0, #0
   13384:	beq	13394 <rb_patricia_lookup+0x188>
   13388:	ldr	r1, [r0]
   1338c:	cmp	r1, sl
   13390:	bcs	13378 <rb_patricia_lookup+0x16c>
   13394:	cmp	sl, r8
   13398:	bne	133c8 <rb_patricia_lookup+0x1bc>
   1339c:	ldr	r0, [r6]
   133a0:	cmp	r0, r8
   133a4:	bne	133c8 <rb_patricia_lookup+0x1bc>
   133a8:	ldr	r0, [r6, #4]
   133ac:	cmp	r0, #0
   133b0:	bne	133c0 <rb_patricia_lookup+0x1b4>
   133b4:	ldr	r0, [sp, #8]
   133b8:	bl	13544 <Ref_Prefix>
   133bc:	str	r0, [r6, #4]
   133c0:	mov	r4, r6
   133c4:	b	13534 <rb_patricia_lookup+0x328>
   133c8:	mov	r0, #1
   133cc:	mov	r1, #24
   133d0:	str	lr, [sp, #4]
   133d4:	mov	r5, ip
   133d8:	bl	4f00 <calloc@plt>
   133dc:	cmp	r0, #0
   133e0:	beq	13540 <rb_patricia_lookup+0x334>
   133e4:	mov	r4, r0
   133e8:	str	r8, [r0]
   133ec:	ldr	r0, [sp, #8]
   133f0:	bl	13544 <Ref_Prefix>
   133f4:	vmov.i32	q8, #0	; 0x00000000
   133f8:	add	r1, r4, #8
   133fc:	vst1.32	{d16-d17}, [r1]
   13400:	str	r0, [r4, #4]
   13404:	ldr	r7, [r9, #8]
   13408:	add	r0, r7, #1
   1340c:	str	r0, [r9, #8]
   13410:	ldr	r0, [r6]
   13414:	cmp	r0, sl
   13418:	bne	13448 <rb_patricia_lookup+0x23c>
   1341c:	str	r6, [r4, #16]
   13420:	ldr	r0, [r9, #4]
   13424:	cmp	sl, r0
   13428:	bcs	134a8 <rb_patricia_lookup+0x29c>
   1342c:	ldrb	r0, [r5, sl, lsr #3]
   13430:	and	r1, sl, #7
   13434:	mov	r2, #128	; 0x80
   13438:	tst	r0, r2, lsr r1
   1343c:	beq	134a8 <rb_patricia_lookup+0x29c>
   13440:	str	r4, [r6, #12]
   13444:	b	13534 <rb_patricia_lookup+0x328>
   13448:	cmp	sl, r8
   1344c:	bne	134b0 <rb_patricia_lookup+0x2a4>
   13450:	ldr	r0, [r9, #4]
   13454:	cmp	r0, r8
   13458:	bls	13474 <rb_patricia_lookup+0x268>
   1345c:	ldr	r0, [sp, #4]
   13460:	and	r2, r8, #7
   13464:	mov	r3, #128	; 0x80
   13468:	ldrb	r0, [r0, r8, lsr #3]
   1346c:	tst	r0, r3, lsr r2
   13470:	addne	r1, r4, #12
   13474:	str	r6, [r1]
   13478:	ldr	r0, [r6, #16]
   1347c:	str	r0, [r4, #16]
   13480:	ldr	r0, [r6, #16]
   13484:	cmp	r0, #0
   13488:	beq	1349c <rb_patricia_lookup+0x290>
   1348c:	mov	r9, r0
   13490:	ldr	r1, [r9, #12]!
   13494:	cmp	r1, r6
   13498:	addne	r9, r0, #8
   1349c:	str	r4, [r9]
   134a0:	str	r4, [r6, #16]
   134a4:	b	13534 <rb_patricia_lookup+0x328>
   134a8:	str	r4, [r6, #8]
   134ac:	b	13534 <rb_patricia_lookup+0x328>
   134b0:	mov	r0, #1
   134b4:	mov	r1, #24
   134b8:	bl	4f00 <calloc@plt>
   134bc:	cmp	r0, #0
   134c0:	beq	13540 <rb_patricia_lookup+0x334>
   134c4:	str	sl, [r0]
   134c8:	ldr	r1, [r6, #16]
   134cc:	str	r1, [r0, #16]
   134d0:	add	r1, r7, #2
   134d4:	str	r1, [r9, #8]
   134d8:	ldr	r1, [r9, #4]
   134dc:	cmp	sl, r1
   134e0:	bcs	13504 <rb_patricia_lookup+0x2f8>
   134e4:	ldrb	r1, [r5, sl, lsr #3]
   134e8:	and	r2, sl, #7
   134ec:	mov	r3, #128	; 0x80
   134f0:	tst	r1, r3, lsr r2
   134f4:	beq	13504 <rb_patricia_lookup+0x2f8>
   134f8:	str	r6, [r0, #8]
   134fc:	str	r4, [r0, #12]
   13500:	b	1350c <rb_patricia_lookup+0x300>
   13504:	str	r4, [r0, #8]
   13508:	str	r6, [r0, #12]
   1350c:	str	r0, [r4, #16]
   13510:	ldr	r1, [r6, #16]
   13514:	cmp	r1, #0
   13518:	beq	1352c <rb_patricia_lookup+0x320>
   1351c:	mov	r9, r1
   13520:	ldr	r2, [r9, #12]!
   13524:	cmp	r2, r6
   13528:	addne	r9, r1, #8
   1352c:	str	r0, [r9]
   13530:	str	r0, [r6, #16]
   13534:	mov	r0, r4
   13538:	sub	sp, fp, #28
   1353c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13540:	bl	5284 <rb_outofmemory@plt>

00013544 <Ref_Prefix>:
   13544:	cmp	r0, #0
   13548:	moveq	r0, #0
   1354c:	bxeq	lr
   13550:	ldr	r1, [r0, #4]
   13554:	cmp	r1, #0
   13558:	addne	r1, r1, #1
   1355c:	strne	r1, [r0, #4]
   13560:	bxne	lr
   13564:	ldrh	r3, [r0]
   13568:	ldrh	r2, [r0, #2]
   1356c:	add	r1, r0, #8
   13570:	mov	r0, r3
   13574:	b	13acc <New_Prefix2>

00013578 <rb_patricia_remove>:
   13578:	push	{r4, r5, r6, r7, fp, lr}
   1357c:	add	fp, sp, #16
   13580:	ldr	r6, [r1, #12]
   13584:	mov	r4, r0
   13588:	ldr	r0, [r1, #8]
   1358c:	mov	r5, r1
   13590:	cmp	r6, #0
   13594:	beq	135d0 <rb_patricia_remove+0x58>
   13598:	cmp	r0, #0
   1359c:	beq	135dc <rb_patricia_remove+0x64>
   135a0:	ldr	r0, [r5, #4]
   135a4:	cmp	r0, #0
   135a8:	beq	135c0 <rb_patricia_remove+0x48>
   135ac:	ldr	r1, [r0, #4]
   135b0:	subs	r1, r1, #1
   135b4:	str	r1, [r0, #4]
   135b8:	bgt	135c0 <rb_patricia_remove+0x48>
   135bc:	bl	4ffc <free@plt>
   135c0:	mov	r0, #0
   135c4:	str	r0, [r5, #20]
   135c8:	str	r0, [r5, #4]
   135cc:	pop	{r4, r5, r6, r7, fp, pc}
   135d0:	cmp	r0, #0
   135d4:	mov	r6, r0
   135d8:	beq	1363c <rb_patricia_remove+0xc4>
   135dc:	ldr	r7, [r5, #16]
   135e0:	str	r7, [r6, #16]
   135e4:	ldr	r0, [r5, #4]
   135e8:	cmp	r0, #0
   135ec:	beq	13604 <rb_patricia_remove+0x8c>
   135f0:	ldr	r1, [r0, #4]
   135f4:	subs	r1, r1, #1
   135f8:	str	r1, [r0, #4]
   135fc:	bgt	13604 <rb_patricia_remove+0x8c>
   13600:	bl	4ffc <free@plt>
   13604:	mov	r0, r5
   13608:	bl	4ffc <free@plt>
   1360c:	ldr	r0, [r4, #8]
   13610:	cmp	r7, #0
   13614:	sub	r0, r0, #1
   13618:	str	r0, [r4, #8]
   1361c:	beq	13634 <rb_patricia_remove+0xbc>
   13620:	ldr	r0, [r7, #12]
   13624:	cmp	r0, r5
   13628:	beq	13694 <rb_patricia_remove+0x11c>
   1362c:	str	r6, [r7, #8]
   13630:	pop	{r4, r5, r6, r7, fp, pc}
   13634:	str	r6, [r4]
   13638:	pop	{r4, r5, r6, r7, fp, pc}
   1363c:	ldr	r0, [r5, #4]
   13640:	ldr	r6, [r5, #16]
   13644:	cmp	r0, #0
   13648:	beq	13660 <rb_patricia_remove+0xe8>
   1364c:	ldr	r1, [r0, #4]
   13650:	subs	r1, r1, #1
   13654:	str	r1, [r0, #4]
   13658:	bgt	13660 <rb_patricia_remove+0xe8>
   1365c:	bl	4ffc <free@plt>
   13660:	mov	r0, r5
   13664:	bl	4ffc <free@plt>
   13668:	ldr	r0, [r4, #8]
   1366c:	cmp	r6, #0
   13670:	sub	r0, r0, #1
   13674:	str	r0, [r4, #8]
   13678:	beq	1369c <rb_patricia_remove+0x124>
   1367c:	ldr	r0, [r6, #12]
   13680:	cmp	r0, r5
   13684:	beq	136a8 <rb_patricia_remove+0x130>
   13688:	mov	r1, #0
   1368c:	str	r1, [r6, #8]
   13690:	b	136b4 <rb_patricia_remove+0x13c>
   13694:	str	r6, [r7, #12]
   13698:	pop	{r4, r5, r6, r7, fp, pc}
   1369c:	mov	r0, #0
   136a0:	str	r0, [r4]
   136a4:	pop	{r4, r5, r6, r7, fp, pc}
   136a8:	mov	r0, #0
   136ac:	str	r0, [r6, #12]
   136b0:	ldr	r0, [r6, #8]
   136b4:	ldr	r1, [r6, #4]
   136b8:	cmp	r1, #0
   136bc:	popne	{r4, r5, r6, r7, fp, pc}
   136c0:	ldr	r1, [r6, #16]
   136c4:	cmp	r1, #0
   136c8:	beq	136e0 <rb_patricia_remove+0x168>
   136cc:	mov	r2, r1
   136d0:	ldr	r3, [r2, #12]!
   136d4:	cmp	r3, r6
   136d8:	subne	r2, r2, #4
   136dc:	b	136e4 <rb_patricia_remove+0x16c>
   136e0:	mov	r2, r4
   136e4:	str	r0, [r2]
   136e8:	str	r1, [r0, #16]
   136ec:	mov	r0, r6
   136f0:	bl	4ffc <free@plt>
   136f4:	ldr	r0, [r4, #8]
   136f8:	sub	r0, r0, #1
   136fc:	str	r0, [r4, #8]
   13700:	pop	{r4, r5, r6, r7, fp, pc}

00013704 <make_and_lookup_ip>:
   13704:	push	{r4, r5, fp, lr}
   13708:	add	fp, sp, #8
   1370c:	mov	r3, r1
   13710:	mov	r4, r0
   13714:	ldrh	r0, [r3], #8
   13718:	cmp	r0, #10
   1371c:	addne	r3, r1, #4
   13720:	mov	r1, r3
   13724:	bl	13acc <New_Prefix2>
   13728:	cmp	r0, #0
   1372c:	beq	13760 <make_and_lookup_ip+0x5c>
   13730:	mov	r5, r0
   13734:	mov	r0, r4
   13738:	mov	r1, r5
   1373c:	bl	5200 <rb_patricia_lookup@plt>
   13740:	mov	r4, r0
   13744:	ldr	r0, [r5, #4]
   13748:	subs	r0, r0, #1
   1374c:	str	r0, [r5, #4]
   13750:	bgt	13764 <make_and_lookup_ip+0x60>
   13754:	mov	r0, r5
   13758:	bl	4ffc <free@plt>
   1375c:	b	13764 <make_and_lookup_ip+0x60>
   13760:	mov	r4, #0
   13764:	mov	r0, r4
   13768:	pop	{r4, r5, fp, pc}

0001376c <make_and_lookup>:
   1376c:	push	{r4, r5, r6, sl, fp, lr}
   13770:	add	fp, sp, #16
   13774:	mov	r4, r0
   13778:	mov	r0, #2
   1377c:	mov	r6, r1
   13780:	bl	137e0 <ascii2prefix>
   13784:	mov	r5, r0
   13788:	cmp	r0, #0
   1378c:	bne	137a8 <make_and_lookup+0x3c>
   13790:	mov	r0, #10
   13794:	mov	r1, r6
   13798:	bl	137e0 <ascii2prefix>
   1379c:	mov	r5, r0
   137a0:	cmp	r0, #0
   137a4:	beq	137d4 <make_and_lookup+0x68>
   137a8:	mov	r0, r4
   137ac:	mov	r1, r5
   137b0:	bl	5200 <rb_patricia_lookup@plt>
   137b4:	mov	r4, r0
   137b8:	ldr	r0, [r5, #4]
   137bc:	subs	r0, r0, #1
   137c0:	str	r0, [r5, #4]
   137c4:	bgt	137d8 <make_and_lookup+0x6c>
   137c8:	mov	r0, r5
   137cc:	bl	4ffc <free@plt>
   137d0:	b	137d8 <make_and_lookup+0x6c>
   137d4:	mov	r4, #0
   137d8:	mov	r0, r4
   137dc:	pop	{r4, r5, r6, sl, fp, pc}

000137e0 <ascii2prefix>:
   137e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137e4:	add	fp, sp, #28
   137e8:	sub	sp, sp, #20
   137ec:	sub	sp, sp, #1024	; 0x400
   137f0:	mov	r8, #0
   137f4:	cmp	r1, #0
   137f8:	beq	138e0 <ascii2prefix+0x100>
   137fc:	mov	sl, r0
   13800:	sub	r0, r0, #10
   13804:	mov	r5, r1
   13808:	clz	r0, r0
   1380c:	cmp	sl, #2
   13810:	lsr	r0, r0, #5
   13814:	lsl	r6, r0, #7
   13818:	mov	r0, r1
   1381c:	mov	r1, #47	; 0x2f
   13820:	movweq	r6, #32
   13824:	bl	4ed0 <strchr@plt>
   13828:	cmp	r0, #0
   1382c:	beq	13878 <ascii2prefix+0x98>
   13830:	mov	r7, r0
   13834:	add	r0, r0, #1
   13838:	bl	51d0 <atol@plt>
   1383c:	sub	r7, r7, r5
   13840:	mov	r9, sp
   13844:	mov	r4, r0
   13848:	mov	r1, r5
   1384c:	mov	r0, r9
   13850:	mov	r2, r7
   13854:	bl	5104 <memcpy@plt>
   13858:	cmp	r4, r6
   1385c:	mov	r5, r4
   13860:	mov	r0, #0
   13864:	movgt	r5, r6
   13868:	cmp	r4, #1
   1386c:	strb	r0, [r9, r7]
   13870:	movlt	r5, r6
   13874:	b	13880 <ascii2prefix+0xa0>
   13878:	mov	r9, r5
   1387c:	mov	r5, r6
   13880:	cmp	sl, #2
   13884:	bne	138ac <ascii2prefix+0xcc>
   13888:	sub	r2, fp, #48	; 0x30
   1388c:	mov	r0, #2
   13890:	mov	r1, r9
   13894:	bl	4f48 <rb_inet_pton@plt>
   13898:	cmp	r0, #1
   1389c:	blt	138e0 <ascii2prefix+0x100>
   138a0:	sub	r1, fp, #48	; 0x30
   138a4:	mov	r0, #2
   138a8:	b	138d4 <ascii2prefix+0xf4>
   138ac:	cmp	sl, #10
   138b0:	bne	138e0 <ascii2prefix+0x100>
   138b4:	sub	r2, fp, #48	; 0x30
   138b8:	mov	r0, #10
   138bc:	mov	r1, r9
   138c0:	bl	4f48 <rb_inet_pton@plt>
   138c4:	cmp	r0, #1
   138c8:	blt	138e0 <ascii2prefix+0x100>
   138cc:	sub	r1, fp, #48	; 0x30
   138d0:	mov	r0, #10
   138d4:	mov	r2, r5
   138d8:	bl	13acc <New_Prefix2>
   138dc:	mov	r8, r0
   138e0:	mov	r0, r8
   138e4:	sub	sp, fp, #28
   138e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000138ec <rb_match_ip>:
   138ec:	push	{r4, r5, fp, lr}
   138f0:	add	fp, sp, #8
   138f4:	mov	r3, r1
   138f8:	mov	r4, r0
   138fc:	mov	r2, #32
   13900:	ldrh	r0, [r3], #8
   13904:	cmp	r0, #10
   13908:	addne	r3, r1, #4
   1390c:	movweq	r2, #128	; 0x80
   13910:	movwne	r0, #2
   13914:	mov	r1, r3
   13918:	bl	13acc <New_Prefix2>
   1391c:	cmp	r0, #0
   13920:	beq	13958 <rb_match_ip+0x6c>
   13924:	mov	r5, r0
   13928:	mov	r0, r4
   1392c:	mov	r2, #1
   13930:	mov	r1, r5
   13934:	bl	4fc0 <rb_patricia_search_best2@plt>
   13938:	mov	r4, r0
   1393c:	ldr	r0, [r5, #4]
   13940:	subs	r0, r0, #1
   13944:	str	r0, [r5, #4]
   13948:	bgt	1395c <rb_match_ip+0x70>
   1394c:	mov	r0, r5
   13950:	bl	4ffc <free@plt>
   13954:	b	1395c <rb_match_ip+0x70>
   13958:	mov	r4, #0
   1395c:	mov	r0, r4
   13960:	pop	{r4, r5, fp, pc}

00013964 <rb_match_ip_exact>:
   13964:	push	{r4, r5, fp, lr}
   13968:	add	fp, sp, #8
   1396c:	mov	r3, r1
   13970:	mov	r4, r0
   13974:	cmp	r2, #128	; 0x80
   13978:	mov	r5, r2
   1397c:	ldrh	r0, [r3], #8
   13980:	movcs	r5, #128	; 0x80
   13984:	cmp	r2, #32
   13988:	movcs	r2, #32
   1398c:	cmp	r0, #10
   13990:	addne	r3, r1, #4
   13994:	moveq	r2, r5
   13998:	movwne	r0, #2
   1399c:	mov	r1, r3
   139a0:	bl	13acc <New_Prefix2>
   139a4:	cmp	r0, #0
   139a8:	beq	139dc <rb_match_ip_exact+0x78>
   139ac:	mov	r5, r0
   139b0:	mov	r0, r4
   139b4:	mov	r1, r5
   139b8:	bl	51b8 <rb_patricia_search_exact@plt>
   139bc:	mov	r4, r0
   139c0:	ldr	r0, [r5, #4]
   139c4:	subs	r0, r0, #1
   139c8:	str	r0, [r5, #4]
   139cc:	bgt	139e0 <rb_match_ip_exact+0x7c>
   139d0:	mov	r0, r5
   139d4:	bl	4ffc <free@plt>
   139d8:	b	139e0 <rb_match_ip_exact+0x7c>
   139dc:	mov	r4, #0
   139e0:	mov	r0, r4
   139e4:	pop	{r4, r5, fp, pc}

000139e8 <rb_match_string>:
   139e8:	push	{r4, r5, r6, sl, fp, lr}
   139ec:	add	fp, sp, #16
   139f0:	mov	r4, r0
   139f4:	mov	r0, #2
   139f8:	mov	r6, r1
   139fc:	bl	137e0 <ascii2prefix>
   13a00:	cmp	r0, #0
   13a04:	bne	13a1c <rb_match_string+0x34>
   13a08:	mov	r0, #10
   13a0c:	mov	r1, r6
   13a10:	bl	137e0 <ascii2prefix>
   13a14:	cmp	r0, #0
   13a18:	beq	13a50 <rb_match_string+0x68>
   13a1c:	mov	r5, r0
   13a20:	mov	r0, r4
   13a24:	mov	r2, #1
   13a28:	mov	r1, r5
   13a2c:	bl	4fc0 <rb_patricia_search_best2@plt>
   13a30:	mov	r4, r0
   13a34:	ldr	r0, [r5, #4]
   13a38:	subs	r0, r0, #1
   13a3c:	str	r0, [r5, #4]
   13a40:	bgt	13a54 <rb_match_string+0x6c>
   13a44:	mov	r0, r5
   13a48:	bl	4ffc <free@plt>
   13a4c:	b	13a54 <rb_match_string+0x6c>
   13a50:	mov	r4, #0
   13a54:	mov	r0, r4
   13a58:	pop	{r4, r5, r6, sl, fp, pc}

00013a5c <rb_match_exact_string>:
   13a5c:	push	{r4, r5, r6, sl, fp, lr}
   13a60:	add	fp, sp, #16
   13a64:	mov	r4, r0
   13a68:	mov	r0, #2
   13a6c:	mov	r6, r1
   13a70:	bl	137e0 <ascii2prefix>
   13a74:	cmp	r0, #0
   13a78:	bne	13a90 <rb_match_exact_string+0x34>
   13a7c:	mov	r0, #10
   13a80:	mov	r1, r6
   13a84:	bl	137e0 <ascii2prefix>
   13a88:	cmp	r0, #0
   13a8c:	beq	13ac0 <rb_match_exact_string+0x64>
   13a90:	mov	r5, r0
   13a94:	mov	r0, r4
   13a98:	mov	r1, r5
   13a9c:	bl	51b8 <rb_patricia_search_exact@plt>
   13aa0:	mov	r4, r0
   13aa4:	ldr	r0, [r5, #4]
   13aa8:	subs	r0, r0, #1
   13aac:	str	r0, [r5, #4]
   13ab0:	bgt	13ac4 <rb_match_exact_string+0x68>
   13ab4:	mov	r0, r5
   13ab8:	bl	4ffc <free@plt>
   13abc:	b	13ac4 <rb_match_exact_string+0x68>
   13ac0:	mov	r4, #0
   13ac4:	mov	r0, r4
   13ac8:	pop	{r4, r5, r6, sl, fp, pc}

00013acc <New_Prefix2>:
   13acc:	push	{r4, r5, r6, sl, fp, lr}
   13ad0:	add	fp, sp, #16
   13ad4:	mov	r4, r2
   13ad8:	mov	r6, r1
   13adc:	mov	r5, r0
   13ae0:	cmp	r0, #2
   13ae4:	beq	13b18 <New_Prefix2+0x4c>
   13ae8:	mov	r0, #0
   13aec:	cmp	r5, #10
   13af0:	bne	13b4c <New_Prefix2+0x80>
   13af4:	mov	r0, #1
   13af8:	mov	r1, #24
   13afc:	bl	4f00 <calloc@plt>
   13b00:	cmp	r0, #0
   13b04:	beq	13b50 <New_Prefix2+0x84>
   13b08:	vld1.8	{d16-d17}, [r6]
   13b0c:	add	r1, r0, #8
   13b10:	vst1.8	{d16-d17}, [r1]
   13b14:	b	13b34 <New_Prefix2+0x68>
   13b18:	mov	r0, #1
   13b1c:	mov	r1, #24
   13b20:	bl	4f00 <calloc@plt>
   13b24:	cmp	r0, #0
   13b28:	beq	13b50 <New_Prefix2+0x84>
   13b2c:	ldr	r1, [r6]
   13b30:	str	r1, [r0, #8]
   13b34:	cmn	r4, #1
   13b38:	mov	r1, #1
   13b3c:	movle	r4, #128	; 0x80
   13b40:	str	r1, [r0, #4]
   13b44:	strh	r5, [r0]
   13b48:	strh	r4, [r0, #2]
   13b4c:	pop	{r4, r5, r6, sl, fp, pc}
   13b50:	bl	5284 <rb_outofmemory@plt>

00013b54 <rb_dictionary_create>:
   13b54:	push	{r4, r5, r6, sl, fp, lr}
   13b58:	add	fp, sp, #16
   13b5c:	mov	r6, r1
   13b60:	mov	r5, r0
   13b64:	mov	r0, #1
   13b68:	mov	r1, #40	; 0x28
   13b6c:	bl	4f00 <calloc@plt>
   13b70:	cmp	r0, #0
   13b74:	beq	13c04 <rb_dictionary_create+0xb0>
   13b78:	mov	r4, r0
   13b7c:	str	r6, [r0]
   13b80:	mov	r0, r5
   13b84:	bl	50e0 <strlen@plt>
   13b88:	add	r0, r0, #1
   13b8c:	bl	52a8 <malloc@plt>
   13b90:	cmp	r0, #0
   13b94:	beq	13c04 <rb_dictionary_create+0xb0>
   13b98:	mov	r1, r5
   13b9c:	bl	5194 <strcpy@plt>
   13ba0:	str	r0, [r4, #20]
   13ba4:	mov	r1, #0
   13ba8:	ldr	r2, [pc, #88]	; 13c08 <rb_dictionary_create+0xb4>
   13bac:	ldr	r2, [pc, r2]
   13bb0:	str	r4, [r4, #28]
   13bb4:	str	r1, [r4, #32]
   13bb8:	add	r1, r4, #28
   13bbc:	str	r2, [r4, #36]	; 0x24
   13bc0:	cmp	r2, #0
   13bc4:	ldr	r0, [pc, #64]	; 13c0c <rb_dictionary_create+0xb8>
   13bc8:	add	r0, pc, r0
   13bcc:	beq	13bdc <rb_dictionary_create+0x88>
   13bd0:	add	r2, r2, #4
   13bd4:	str	r1, [r2]
   13bd8:	b	13bec <rb_dictionary_create+0x98>
   13bdc:	mov	r2, r0
   13be0:	ldr	r3, [r2, #4]!
   13be4:	cmp	r3, #0
   13be8:	streq	r1, [r2]
   13bec:	str	r1, [r0]
   13bf0:	ldr	r1, [r0, #8]
   13bf4:	add	r1, r1, #1
   13bf8:	str	r1, [r0, #8]
   13bfc:	mov	r0, r4
   13c00:	pop	{r4, r5, r6, sl, fp, pc}
   13c04:	bl	5284 <rb_outofmemory@plt>
   13c08:	.word	0x000322f4
   13c0c:	.word	0x000322d8

00013c10 <rb_dictionary_set_comparator_func>:
   13c10:	str	r1, [r0]
   13c14:	bx	lr

00013c18 <rb_dictionary_get_comparator_func>:
   13c18:	ldr	r0, [r0]
   13c1c:	bx	lr

00013c20 <rb_dictionary_get_linear_index>:
   13c20:	push	{r4, sl, fp, lr}
   13c24:	add	fp, sp, #8
   13c28:	mov	r4, r0
   13c2c:	bl	532c <rb_dictionary_find@plt>
   13c30:	cmp	r0, #0
   13c34:	beq	13c7c <rb_dictionary_get_linear_index+0x5c>
   13c38:	ldrb	r2, [r4, #24]
   13c3c:	tst	r2, #1
   13c40:	beq	13c74 <rb_dictionary_get_linear_index+0x54>
   13c44:	ldr	r1, [r4, #8]
   13c48:	cmp	r1, #0
   13c4c:	beq	13c6c <rb_dictionary_get_linear_index+0x4c>
   13c50:	mov	r2, #0
   13c54:	str	r2, [r1, #24]
   13c58:	add	r2, r2, #1
   13c5c:	ldr	r1, [r1, #12]
   13c60:	cmp	r1, #0
   13c64:	bne	13c54 <rb_dictionary_get_linear_index+0x34>
   13c68:	ldrb	r2, [r4, #24]
   13c6c:	and	r1, r2, #254	; 0xfe
   13c70:	strb	r1, [r4, #24]
   13c74:	ldr	r0, [r0, #24]
   13c78:	pop	{r4, sl, fp, pc}
   13c7c:	mvn	r0, #0
   13c80:	pop	{r4, sl, fp, pc}

00013c84 <rb_dictionary_find>:
   13c84:	push	{r4, r5, r6, sl, fp, lr}
   13c88:	add	fp, sp, #16
   13c8c:	mov	r6, r1
   13c90:	mov	r4, r0
   13c94:	bl	13e84 <rb_dictionary_retune>
   13c98:	ldr	r0, [r4, #4]
   13c9c:	mov	r5, #0
   13ca0:	cmp	r0, #0
   13ca4:	beq	13cc0 <rb_dictionary_find+0x3c>
   13ca8:	ldr	r1, [r0, #20]
   13cac:	ldr	r2, [r4]
   13cb0:	mov	r0, r6
   13cb4:	blx	r2
   13cb8:	cmp	r0, #0
   13cbc:	ldreq	r5, [r4, #4]
   13cc0:	mov	r0, r5
   13cc4:	pop	{r4, r5, r6, sl, fp, pc}

00013cc8 <rb_dictionary_destroy>:
   13cc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ccc:	add	fp, sp, #24
   13cd0:	ldr	r7, [r0, #8]
   13cd4:	mov	r8, r0
   13cd8:	cmp	r7, #0
   13cdc:	beq	13d14 <rb_dictionary_destroy+0x4c>
   13ce0:	mov	r5, r2
   13ce4:	mov	r6, r1
   13ce8:	ldr	r4, [r7, #12]
   13cec:	cmp	r6, #0
   13cf0:	beq	13d00 <rb_dictionary_destroy+0x38>
   13cf4:	mov	r0, r7
   13cf8:	mov	r1, r5
   13cfc:	blx	r6
   13d00:	mov	r0, r7
   13d04:	bl	4ffc <free@plt>
   13d08:	cmp	r4, #0
   13d0c:	mov	r7, r4
   13d10:	bne	13ce8 <rb_dictionary_destroy+0x20>
   13d14:	ldr	r1, [r8, #36]	; 0x24
   13d18:	ldr	r2, [r8, #32]
   13d1c:	ldr	r0, [pc, #92]	; 13d80 <rb_dictionary_destroy+0xb8>
   13d20:	cmp	r1, #0
   13d24:	add	r0, pc, r0
   13d28:	beq	13d38 <rb_dictionary_destroy+0x70>
   13d2c:	str	r2, [r1, #4]
   13d30:	ldr	r2, [r8, #32]
   13d34:	b	13d3c <rb_dictionary_destroy+0x74>
   13d38:	str	r2, [r0, #4]
   13d3c:	cmp	r2, #0
   13d40:	mov	r3, r0
   13d44:	addne	r3, r2, #8
   13d48:	str	r1, [r3]
   13d4c:	mov	r1, #0
   13d50:	str	r1, [r8, #32]
   13d54:	str	r1, [r8, #36]	; 0x24
   13d58:	ldr	r1, [r0, #8]
   13d5c:	sub	r1, r1, #1
   13d60:	str	r1, [r0, #8]
   13d64:	ldr	r0, [r8, #20]
   13d68:	cmp	r0, #0
   13d6c:	beq	13d74 <rb_dictionary_destroy+0xac>
   13d70:	bl	4ffc <free@plt>
   13d74:	mov	r0, r8
   13d78:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d7c:	b	4ffc <free@plt>
   13d80:	.word	0x0003217c

00013d84 <rb_dictionary_foreach>:
   13d84:	push	{r4, r5, r6, sl, fp, lr}
   13d88:	add	fp, sp, #16
   13d8c:	ldr	r0, [r0, #8]
   13d90:	cmp	r0, #0
   13d94:	beq	13dc0 <rb_dictionary_foreach+0x3c>
   13d98:	mov	r4, r2
   13d9c:	mov	r5, r1
   13da0:	ldr	r6, [r0, #12]
   13da4:	cmp	r5, #0
   13da8:	beq	13db4 <rb_dictionary_foreach+0x30>
   13dac:	mov	r1, r4
   13db0:	blx	r5
   13db4:	cmp	r6, #0
   13db8:	mov	r0, r6
   13dbc:	bne	13da0 <rb_dictionary_foreach+0x1c>
   13dc0:	pop	{r4, r5, r6, sl, fp, pc}

00013dc4 <rb_dictionary_search>:
   13dc4:	push	{r4, r5, r6, sl, fp, lr}
   13dc8:	add	fp, sp, #16
   13dcc:	ldr	r0, [r0, #8]
   13dd0:	cmp	r0, #0
   13dd4:	beq	13e08 <rb_dictionary_search+0x44>
   13dd8:	mov	r4, r2
   13ddc:	mov	r5, r1
   13de0:	ldr	r6, [r0, #12]
   13de4:	cmp	r5, #0
   13de8:	beq	13dfc <rb_dictionary_search+0x38>
   13dec:	mov	r1, r4
   13df0:	blx	r5
   13df4:	cmp	r0, #0
   13df8:	bne	13e0c <rb_dictionary_search+0x48>
   13dfc:	cmp	r6, #0
   13e00:	mov	r0, r6
   13e04:	bne	13de0 <rb_dictionary_search+0x1c>
   13e08:	mov	r0, #0
   13e0c:	pop	{r4, r5, r6, sl, fp, pc}

00013e10 <rb_dictionary_foreach_start>:
   13e10:	mov	r2, #0
   13e14:	str	r2, [r1, #4]
   13e18:	ldr	r0, [r0, #8]
   13e1c:	cmp	r0, #0
   13e20:	str	r0, [r1]
   13e24:	strne	r0, [r1]
   13e28:	ldrne	r0, [r0, #12]
   13e2c:	strne	r0, [r1, #4]
   13e30:	bx	lr

00013e34 <rb_dictionary_foreach_next>:
   13e34:	mov	r2, r0
   13e38:	ldr	r0, [r1]
   13e3c:	cmp	r0, #0
   13e40:	beq	13e5c <rb_dictionary_foreach_next+0x28>
   13e44:	ldr	r0, [r1, #4]
   13e48:	str	r0, [r1]
   13e4c:	cmp	r0, #0
   13e50:	ldrne	r0, [r0, #12]
   13e54:	strne	r0, [r1, #4]
   13e58:	bx	lr
   13e5c:	ldr	r0, [pc, #8]	; 13e6c <rb_dictionary_foreach_next+0x38>
   13e60:	mov	r1, r2
   13e64:	add	r0, pc, r0
   13e68:	b	5224 <rb_lib_log@plt>
   13e6c:	.word	0x00002ca7

00013e70 <rb_dictionary_foreach_cur>:
   13e70:	ldr	r0, [r1]
   13e74:	cmp	r0, #0
   13e78:	ldrne	r0, [r0, #16]
   13e7c:	moveq	r0, #0
   13e80:	bx	lr

00013e84 <rb_dictionary_retune>:
   13e84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e88:	add	fp, sp, #24
   13e8c:	sub	sp, sp, #32
   13e90:	ldr	r6, [r0, #4]
   13e94:	cmp	r6, #0
   13e98:	beq	13fdc <rb_dictionary_retune+0x158>
   13e9c:	mov	r4, r0
   13ea0:	mov	r0, #0
   13ea4:	mov	r5, r1
   13ea8:	str	r0, [sp, #4]
   13eac:	str	r0, [sp, #8]
   13eb0:	mov	r0, r5
   13eb4:	ldr	r1, [r6, #20]
   13eb8:	ldr	r2, [r4]
   13ebc:	blx	r2
   13ec0:	cmp	r0, #0
   13ec4:	beq	13fa0 <rb_dictionary_retune+0x11c>
   13ec8:	add	r8, sp, #4
   13ecc:	mov	r7, r8
   13ed0:	cmn	r0, #1
   13ed4:	ble	13f1c <rb_dictionary_retune+0x98>
   13ed8:	ldr	r0, [r6, #4]
   13edc:	cmp	r0, #0
   13ee0:	beq	13fb8 <rb_dictionary_retune+0x134>
   13ee4:	ldr	r1, [r0, #20]
   13ee8:	ldr	r2, [r4]
   13eec:	mov	r0, r5
   13ef0:	blx	r2
   13ef4:	cmp	r0, #1
   13ef8:	blt	13f48 <rb_dictionary_retune+0xc4>
   13efc:	ldr	r1, [r6, #4]
   13f00:	ldr	r0, [r1]
   13f04:	str	r0, [r6, #4]
   13f08:	str	r6, [r1]
   13f0c:	ldr	r0, [r1, #4]
   13f10:	cmp	r0, #0
   13f14:	bne	13f4c <rb_dictionary_retune+0xc8>
   13f18:	b	13fac <rb_dictionary_retune+0x128>
   13f1c:	ldr	r0, [r6]
   13f20:	cmp	r0, #0
   13f24:	beq	13fb8 <rb_dictionary_retune+0x134>
   13f28:	ldr	r1, [r0, #20]
   13f2c:	ldr	r2, [r4]
   13f30:	mov	r0, r5
   13f34:	blx	r2
   13f38:	cmn	r0, #1
   13f3c:	ble	13f5c <rb_dictionary_retune+0xd8>
   13f40:	mov	r0, r6
   13f44:	b	13f78 <rb_dictionary_retune+0xf4>
   13f48:	mov	r1, r6
   13f4c:	str	r1, [r7, #4]
   13f50:	add	r0, r1, #4
   13f54:	mov	r7, r1
   13f58:	b	13f80 <rb_dictionary_retune+0xfc>
   13f5c:	ldr	r0, [r6]
   13f60:	ldr	r1, [r0, #4]
   13f64:	str	r1, [r6]
   13f68:	str	r6, [r0, #4]
   13f6c:	ldr	r1, [r0]
   13f70:	cmp	r1, #0
   13f74:	beq	13fb4 <rb_dictionary_retune+0x130>
   13f78:	str	r0, [r8]
   13f7c:	mov	r8, r0
   13f80:	ldr	r6, [r0]
   13f84:	ldr	r2, [r4]
   13f88:	mov	r0, r5
   13f8c:	ldr	r1, [r6, #20]
   13f90:	blx	r2
   13f94:	cmp	r0, #0
   13f98:	bne	13ed0 <rb_dictionary_retune+0x4c>
   13f9c:	b	13fb8 <rb_dictionary_retune+0x134>
   13fa0:	add	r7, sp, #4
   13fa4:	mov	r8, r7
   13fa8:	b	13fb8 <rb_dictionary_retune+0x134>
   13fac:	mov	r6, r1
   13fb0:	b	13fb8 <rb_dictionary_retune+0x134>
   13fb4:	mov	r6, r0
   13fb8:	ldr	r0, [r6]
   13fbc:	str	r0, [r7, #4]
   13fc0:	ldr	r0, [r6, #4]
   13fc4:	str	r0, [r8]
   13fc8:	ldr	r0, [sp, #8]
   13fcc:	str	r0, [r6]
   13fd0:	ldr	r0, [sp, #4]
   13fd4:	str	r0, [r6, #4]
   13fd8:	str	r6, [r4, #4]
   13fdc:	sub	sp, fp, #24
   13fe0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00013fe4 <rb_dictionary_add>:
   13fe4:	push	{r4, r5, r6, r7, fp, lr}
   13fe8:	add	fp, sp, #16
   13fec:	mov	r6, r1
   13ff0:	mov	r5, r0
   13ff4:	mov	r0, #1
   13ff8:	mov	r1, #28
   13ffc:	mov	r7, r2
   14000:	bl	4f00 <calloc@plt>
   14004:	cmp	r0, #0
   14008:	beq	14130 <rb_dictionary_add+0x14c>
   1400c:	str	r7, [r0, #16]
   14010:	str	r6, [r0, #20]
   14014:	mov	r4, r0
   14018:	ldrb	r0, [r5, #24]
   1401c:	orr	r0, r0, #1
   14020:	strb	r0, [r5, #24]
   14024:	ldr	r1, [r5, #16]
   14028:	ldr	r0, [r5, #4]
   1402c:	add	r1, r1, #1
   14030:	cmp	r0, #0
   14034:	str	r1, [r5, #16]
   14038:	beq	140a4 <rb_dictionary_add+0xc0>
   1403c:	mov	r0, r5
   14040:	mov	r1, r6
   14044:	bl	13e84 <rb_dictionary_retune>
   14048:	ldr	r1, [r5, #4]
   1404c:	ldr	r0, [r4, #20]
   14050:	ldr	r2, [r5]
   14054:	ldr	r1, [r1, #20]
   14058:	blx	r2
   1405c:	cmn	r0, #1
   14060:	ble	140bc <rb_dictionary_add+0xd8>
   14064:	cmp	r0, #0
   14068:	beq	140fc <rb_dictionary_add+0x118>
   1406c:	ldr	r0, [r5, #4]
   14070:	ldr	r1, [r0, #4]
   14074:	stm	r4, {r0, r1}
   14078:	mov	r1, #0
   1407c:	str	r1, [r0, #4]
   14080:	ldr	r1, [r0, #12]
   14084:	cmp	r1, #0
   14088:	add	r2, r1, #8
   1408c:	addeq	r2, r5, #12
   14090:	str	r4, [r2]
   14094:	str	r0, [r4, #8]
   14098:	str	r1, [r4, #12]
   1409c:	str	r4, [r0, #12]
   140a0:	b	140f4 <rb_dictionary_add+0x110>
   140a4:	vmov.i32	q8, #0	; 0x00000000
   140a8:	vst1.32	{d16-d17}, [r4]
   140ac:	str	r4, [r5, #4]
   140b0:	str	r4, [r5, #8]
   140b4:	str	r4, [r5, #12]
   140b8:	b	14128 <rb_dictionary_add+0x144>
   140bc:	ldr	r0, [r5, #4]
   140c0:	ldr	r1, [r0]
   140c4:	str	r0, [r4, #4]
   140c8:	str	r1, [r4]
   140cc:	mov	r1, #0
   140d0:	str	r1, [r0]
   140d4:	ldr	r1, [r0, #8]
   140d8:	cmp	r1, #0
   140dc:	add	r2, r1, #12
   140e0:	addeq	r2, r5, #8
   140e4:	str	r4, [r2]
   140e8:	str	r0, [r4, #12]
   140ec:	str	r1, [r4, #8]
   140f0:	str	r4, [r0, #8]
   140f4:	str	r4, [r5, #4]
   140f8:	b	14128 <rb_dictionary_add+0x144>
   140fc:	ldr	r0, [r5, #4]
   14100:	ldr	r1, [r4, #20]
   14104:	str	r1, [r0, #20]
   14108:	ldr	r1, [r4, #16]
   1410c:	str	r1, [r0, #16]
   14110:	ldr	r0, [r5, #16]
   14114:	sub	r0, r0, #1
   14118:	str	r0, [r5, #16]
   1411c:	mov	r0, r4
   14120:	bl	4ffc <free@plt>
   14124:	ldr	r4, [r5, #4]
   14128:	mov	r0, r4
   1412c:	pop	{r4, r5, r6, r7, fp, pc}
   14130:	bl	5284 <rb_outofmemory@plt>

00014134 <rb_dictionary_delete>:
   14134:	push	{r4, r5, r6, r7, fp, lr}
   14138:	add	fp, sp, #16
   1413c:	mov	r5, r0
   14140:	bl	532c <rb_dictionary_find@plt>
   14144:	cmp	r0, #0
   14148:	beq	141c0 <rb_dictionary_delete+0x8c>
   1414c:	ldrb	r1, [r5, #24]
   14150:	ldr	r7, [r0, #16]
   14154:	orr	r1, r1, #1
   14158:	strb	r1, [r5, #24]
   1415c:	ldr	r1, [r5, #4]
   14160:	cmp	r1, #0
   14164:	beq	14228 <rb_dictionary_delete+0xf4>
   14168:	ldr	r4, [r1]
   1416c:	ldr	r2, [r1, #4]
   14170:	cmp	r4, #0
   14174:	beq	141c8 <rb_dictionary_delete+0x94>
   14178:	cmp	r2, #0
   1417c:	beq	141d0 <rb_dictionary_delete+0x9c>
   14180:	ldr	r3, [r1, #12]
   14184:	cmp	r3, r2
   14188:	beq	141d8 <rb_dictionary_delete+0xa4>
   1418c:	mov	r4, r2
   14190:	mov	r6, r4
   14194:	ldr	r4, [r4]
   14198:	cmp	r4, #0
   1419c:	cmpne	r4, r3
   141a0:	bne	14190 <rb_dictionary_delete+0x5c>
   141a4:	ldr	r4, [r3, #4]
   141a8:	str	r4, [r6]
   141ac:	str	r3, [r5, #4]
   141b0:	ldr	r6, [r1]
   141b4:	str	r6, [r3]
   141b8:	str	r2, [r3, #4]
   141bc:	b	141e0 <rb_dictionary_delete+0xac>
   141c0:	mov	r7, #0
   141c4:	b	1422c <rb_dictionary_delete+0xf8>
   141c8:	str	r2, [r5, #4]
   141cc:	b	141e0 <rb_dictionary_delete+0xac>
   141d0:	str	r4, [r5, #4]
   141d4:	b	141e0 <rb_dictionary_delete+0xac>
   141d8:	str	r2, [r5, #4]
   141dc:	str	r4, [r2]
   141e0:	ldr	r2, [r1, #8]
   141e4:	cmp	r2, #0
   141e8:	ldrne	r3, [r1, #12]
   141ec:	strne	r3, [r2, #12]
   141f0:	ldr	r3, [r5, #8]
   141f4:	cmp	r3, r1
   141f8:	ldr	r3, [r1, #12]
   141fc:	streq	r3, [r5, #8]
   14200:	cmp	r3, #0
   14204:	strne	r2, [r3, #8]
   14208:	ldr	r2, [r5, #12]
   1420c:	cmp	r2, r1
   14210:	bne	1421c <rb_dictionary_delete+0xe8>
   14214:	ldr	r1, [r1, #8]
   14218:	str	r1, [r5, #12]
   1421c:	ldr	r1, [r5, #16]
   14220:	sub	r1, r1, #1
   14224:	str	r1, [r5, #16]
   14228:	bl	4ffc <free@plt>
   1422c:	mov	r0, r7
   14230:	pop	{r4, r5, r6, r7, fp, pc}

00014234 <rb_dictionary_retrieve>:
   14234:	push	{fp, lr}
   14238:	mov	fp, sp
   1423c:	bl	532c <rb_dictionary_find@plt>
   14240:	cmp	r0, #0
   14244:	ldrne	r0, [r0, #16]
   14248:	moveq	r0, #0
   1424c:	pop	{fp, pc}

00014250 <rb_dictionary_size>:
   14250:	ldr	r0, [r0, #16]
   14254:	bx	lr

00014258 <rb_dictionary_stats>:
   14258:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1425c:	add	fp, sp, #24
   14260:	sub	sp, sp, #280	; 0x118
   14264:	mov	r6, r0
   14268:	ldr	r0, [r0, #16]
   1426c:	mov	r5, r2
   14270:	mov	r7, r1
   14274:	cmp	r0, #0
   14278:	beq	142d0 <rb_dictionary_stats+0x78>
   1427c:	mov	r0, #0
   14280:	add	r2, sp, #20
   14284:	mov	r1, #0
   14288:	str	r0, [sp, #20]
   1428c:	ldr	r0, [r6, #4]
   14290:	bl	14334 <stats_recurse>
   14294:	ldr	r1, [r6, #16]
   14298:	ldr	r3, [r6, #20]
   1429c:	ldr	r2, [sp, #20]
   142a0:	ldr	r6, [pc, #120]	; 14320 <rb_dictionary_stats+0xc8>
   142a4:	str	r0, [sp, #8]
   142a8:	udiv	r4, r0, r1
   142ac:	add	r6, pc, r6
   142b0:	str	r1, [sp, #4]
   142b4:	str	r2, [sp, #16]
   142b8:	add	r0, sp, #24
   142bc:	str	r6, [sp]
   142c0:	str	r4, [sp, #12]
   142c4:	ldr	r2, [pc, #88]	; 14324 <rb_dictionary_stats+0xcc>
   142c8:	add	r2, pc, r2
   142cc:	b	14304 <rb_dictionary_stats+0xac>
   142d0:	ldr	r3, [r6, #20]
   142d4:	ldr	r0, [pc, #76]	; 14328 <rb_dictionary_stats+0xd0>
   142d8:	ldr	r1, [pc, #76]	; 1432c <rb_dictionary_stats+0xd4>
   142dc:	add	r0, pc, r0
   142e0:	add	r1, pc, r1
   142e4:	str	r1, [sp]
   142e8:	str	r0, [sp, #4]
   142ec:	str	r0, [sp, #8]
   142f0:	str	r0, [sp, #12]
   142f4:	str	r0, [sp, #16]
   142f8:	add	r0, sp, #24
   142fc:	ldr	r2, [pc, #44]	; 14330 <rb_dictionary_stats+0xd8>
   14300:	add	r2, pc, r2
   14304:	mov	r1, #256	; 0x100
   14308:	bl	54a0 <snprintf@plt>
   1430c:	add	r0, sp, #24
   14310:	mov	r1, r5
   14314:	blx	r7
   14318:	sub	sp, fp, #24
   1431c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14320:	.word	0x000028d4
   14324:	.word	0x00002894
   14328:	.word	0x00001a7b
   1432c:	.word	0x000028a0
   14330:	.word	0x00002885

00014334 <stats_recurse>:
   14334:	push	{r4, r5, r6, r7, fp, lr}
   14338:	add	fp, sp, #16
   1433c:	mov	r6, r0
   14340:	ldr	r0, [r2]
   14344:	mov	r5, r2
   14348:	mov	r4, r1
   1434c:	cmp	r0, r1
   14350:	strlt	r4, [r5]
   14354:	cmp	r6, #0
   14358:	beq	143a0 <stats_recurse+0x6c>
   1435c:	ldr	r0, [r6]
   14360:	mov	r7, r4
   14364:	cmp	r0, #0
   14368:	beq	1437c <stats_recurse+0x48>
   1436c:	add	r1, r4, #1
   14370:	mov	r2, r5
   14374:	bl	14334 <stats_recurse>
   14378:	add	r7, r0, r4
   1437c:	ldr	r0, [r6, #4]
   14380:	cmp	r0, #0
   14384:	beq	1439c <stats_recurse+0x68>
   14388:	add	r1, r4, #1
   1438c:	mov	r2, r5
   14390:	bl	14334 <stats_recurse>
   14394:	add	r0, r0, r7
   14398:	pop	{r4, r5, r6, r7, fp, pc}
   1439c:	mov	r4, r7
   143a0:	mov	r0, r4
   143a4:	pop	{r4, r5, r6, r7, fp, pc}

000143a8 <rb_dictionary_stats_walk>:
   143a8:	push	{r4, r5, r6, sl, fp, lr}
   143ac:	add	fp, sp, #16
   143b0:	ldr	r6, [pc, #48]	; 143e8 <rb_dictionary_stats_walk+0x40>
   143b4:	ldr	r6, [pc, r6]
   143b8:	cmp	r6, #0
   143bc:	beq	143e4 <rb_dictionary_stats_walk+0x3c>
   143c0:	mov	r4, r1
   143c4:	mov	r5, r0
   143c8:	ldr	r0, [r6]
   143cc:	mov	r1, r5
   143d0:	mov	r2, r4
   143d4:	bl	529c <rb_dictionary_stats@plt>
   143d8:	ldr	r6, [r6, #8]
   143dc:	cmp	r6, #0
   143e0:	bne	143c8 <rb_dictionary_stats_walk+0x20>
   143e4:	pop	{r4, r5, r6, sl, fp, pc}
   143e8:	.word	0x00031aec

000143ec <rb_radixtree_create>:
   143ec:	push	{r4, r5, r6, sl, fp, lr}
   143f0:	add	fp, sp, #16
   143f4:	mov	r6, r1
   143f8:	mov	r5, r0
   143fc:	mov	r0, #1
   14400:	mov	r1, #28
   14404:	bl	4f00 <calloc@plt>
   14408:	cmp	r0, #0
   1440c:	beq	1449c <rb_radixtree_create+0xb0>
   14410:	mov	r4, r0
   14414:	str	r6, [r0]
   14418:	mov	r0, r5
   1441c:	bl	50e0 <strlen@plt>
   14420:	add	r0, r0, #1
   14424:	bl	52a8 <malloc@plt>
   14428:	cmp	r0, #0
   1442c:	beq	1449c <rb_radixtree_create+0xb0>
   14430:	mov	r1, r5
   14434:	bl	5194 <strcpy@plt>
   14438:	mov	r3, #0
   1443c:	str	r3, [r4, #4]
   14440:	ldr	r1, [pc, #88]	; 144a0 <rb_radixtree_create+0xb4>
   14444:	ldr	r1, [pc, r1]
   14448:	str	r0, [r4, #12]
   1444c:	add	r0, r4, #16
   14450:	str	r4, [r4, #16]
   14454:	str	r3, [r4, #20]
   14458:	ldr	r2, [r1]
   1445c:	cmp	r2, #0
   14460:	str	r2, [r4, #24]
   14464:	beq	14474 <rb_radixtree_create+0x88>
   14468:	add	r2, r2, #4
   1446c:	str	r0, [r2]
   14470:	b	14484 <rb_radixtree_create+0x98>
   14474:	mov	r2, r1
   14478:	ldr	r3, [r2, #4]!
   1447c:	cmp	r3, #0
   14480:	streq	r0, [r2]
   14484:	str	r0, [r1]
   14488:	ldr	r0, [r1, #8]
   1448c:	add	r0, r0, #1
   14490:	str	r0, [r1, #8]
   14494:	mov	r0, r4
   14498:	pop	{r4, r5, r6, sl, fp, pc}
   1449c:	bl	5284 <rb_outofmemory@plt>
   144a0:	.word	0x00013f90

000144a4 <rb_radixtree_destroy>:
   144a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   144a8:	add	fp, sp, #24
   144ac:	sub	sp, sp, #40	; 0x28
   144b0:	mov	r6, r1
   144b4:	mov	r1, sp
   144b8:	mov	r5, r2
   144bc:	mov	r4, r0
   144c0:	bl	4d44 <rb_radixtree_foreach_start@plt>
   144c4:	cmp	r4, #0
   144c8:	beq	14520 <rb_radixtree_destroy+0x7c>
   144cc:	ldr	r7, [sp, #8]
   144d0:	cmp	r7, #0
   144d4:	beq	14520 <rb_radixtree_destroy+0x7c>
   144d8:	mov	r8, sp
   144dc:	ldr	r1, [r7, #4]
   144e0:	cmp	r1, #0
   144e4:	beq	14520 <rb_radixtree_destroy+0x7c>
   144e8:	cmp	r6, #0
   144ec:	beq	144fc <rb_radixtree_destroy+0x58>
   144f0:	ldr	r0, [r7, #8]
   144f4:	mov	r2, r5
   144f8:	blx	r6
   144fc:	ldr	r1, [r7, #8]
   14500:	mov	r0, r4
   14504:	bl	55b4 <rb_radixtree_delete@plt>
   14508:	mov	r0, r4
   1450c:	mov	r1, r8
   14510:	bl	4d80 <rb_radixtree_foreach_next@plt>
   14514:	ldr	r7, [sp, #8]
   14518:	cmp	r7, #0
   1451c:	bne	144dc <rb_radixtree_destroy+0x38>
   14520:	ldr	r0, [r4, #24]
   14524:	ldr	r1, [r4, #20]
   14528:	cmp	r0, #0
   1452c:	beq	1453c <rb_radixtree_destroy+0x98>
   14530:	str	r1, [r0, #4]
   14534:	ldr	r1, [r4, #20]
   14538:	b	14548 <rb_radixtree_destroy+0xa4>
   1453c:	ldr	r2, [pc, #84]	; 14598 <rb_radixtree_destroy+0xf4>
   14540:	ldr	r2, [pc, r2]
   14544:	str	r1, [r2, #4]
   14548:	ldr	r2, [pc, #76]	; 1459c <rb_radixtree_destroy+0xf8>
   1454c:	cmp	r1, #0
   14550:	ldr	r2, [pc, r2]
   14554:	mov	r3, r2
   14558:	addne	r3, r1, #8
   1455c:	str	r0, [r3]
   14560:	mov	r0, #0
   14564:	str	r0, [r4, #20]
   14568:	str	r0, [r4, #24]
   1456c:	ldr	r0, [r2, #8]
   14570:	sub	r0, r0, #1
   14574:	str	r0, [r2, #8]
   14578:	ldr	r0, [r4, #12]
   1457c:	cmp	r0, #0
   14580:	beq	14588 <rb_radixtree_destroy+0xe4>
   14584:	bl	4ffc <free@plt>
   14588:	mov	r0, r4
   1458c:	sub	sp, fp, #24
   14590:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14594:	b	4ffc <free@plt>
   14598:	.word	0x00013e94
   1459c:	.word	0x00013e84

000145a0 <rb_radixtree_foreach_start>:
   145a0:	cmp	r0, #0
   145a4:	beq	14608 <rb_radixtree_foreach_start+0x68>
   145a8:	ldr	r2, [r0, #4]
   145ac:	cmp	r2, #0
   145b0:	beq	145fc <rb_radixtree_foreach_start+0x5c>
   145b4:	ldr	r3, [r2]
   145b8:	cmn	r3, #1
   145bc:	beq	145e8 <rb_radixtree_foreach_start+0x48>
   145c0:	mov	ip, r2
   145c4:	mov	r3, #1
   145c8:	ldr	r2, [ip, r3, lsl #2]
   145cc:	cmp	r2, #0
   145d0:	bne	145b4 <rb_radixtree_foreach_start+0x14>
   145d4:	add	r3, r3, #1
   145d8:	cmp	r3, #17
   145dc:	bne	145c8 <rb_radixtree_foreach_start+0x28>
   145e0:	mov	r2, ip
   145e4:	b	145b4 <rb_radixtree_foreach_start+0x14>
   145e8:	cmp	r2, #0
   145ec:	str	r2, [r1, #8]
   145f0:	str	r2, [r1, #12]
   145f4:	bxeq	lr
   145f8:	b	14664 <rb_radixtree_foreach_next>
   145fc:	mov	r0, #0
   14600:	str	r0, [r1, #8]
   14604:	str	r0, [r1, #12]
   14608:	bx	lr

0001460c <rb_radixtree_foreach_cur>:
   1460c:	mov	r2, r0
   14610:	mov	r0, #0
   14614:	cmp	r2, #0
   14618:	bxeq	lr
   1461c:	ldr	r1, [r1, #8]
   14620:	cmp	r1, #0
   14624:	ldrne	r0, [r1, #4]
   14628:	bx	lr

0001462c <rb_radixtree_delete>:
   1462c:	push	{r4, r5, fp, lr}
   14630:	add	fp, sp, #8
   14634:	mov	r2, #0
   14638:	mov	r5, r0
   1463c:	mov	r4, #0
   14640:	bl	5464 <rb_radixtree_elem_find@plt>
   14644:	cmp	r0, #0
   14648:	beq	1465c <rb_radixtree_delete+0x30>
   1464c:	ldr	r4, [r0, #4]
   14650:	mov	r1, r0
   14654:	mov	r0, r5
   14658:	bl	4ce4 <rb_radixtree_elem_delete@plt>
   1465c:	mov	r0, r4
   14660:	pop	{r4, r5, fp, pc}

00014664 <rb_radixtree_foreach_next>:
   14664:	push	{r4, r5, fp, lr}
   14668:	add	fp, sp, #8
   1466c:	cmp	r0, #0
   14670:	beq	14744 <rb_radixtree_foreach_next+0xe0>
   14674:	ldr	r0, [r1, #8]
   14678:	mov	r4, r1
   1467c:	cmp	r0, #0
   14680:	beq	14744 <rb_radixtree_foreach_next+0xe0>
   14684:	ldr	r0, [r4, #12]
   14688:	cmp	r0, #0
   1468c:	str	r0, [r4, #8]
   14690:	popeq	{r4, r5, fp, pc}
   14694:	ldr	r1, [r0, #12]
   14698:	cmp	r1, #0
   1469c:	beq	1473c <rb_radixtree_foreach_next+0xd8>
   146a0:	ldrb	r2, [r0, #16]
   146a4:	add	r2, r2, #1
   146a8:	ldr	r5, [r1, r2, lsl #2]
   146ac:	add	r3, r2, #1
   146b0:	cmp	r5, #0
   146b4:	bne	146c4 <rb_radixtree_foreach_next+0x60>
   146b8:	cmp	r2, #16
   146bc:	mov	r2, r3
   146c0:	blt	146a8 <rb_radixtree_foreach_next+0x44>
   146c4:	cmp	r5, #0
   146c8:	beq	146e0 <rb_radixtree_foreach_next+0x7c>
   146cc:	ldr	r2, [r5]
   146d0:	cmn	r2, #1
   146d4:	bne	14718 <rb_radixtree_foreach_next+0xb4>
   146d8:	cmp	r5, r0
   146dc:	bne	14724 <rb_radixtree_foreach_next+0xc0>
   146e0:	sub	r2, r3, #1
   146e4:	sub	r3, r3, #2
   146e8:	cmp	r3, #15
   146ec:	blt	146a4 <rb_radixtree_foreach_next+0x40>
   146f0:	ldr	r3, [r1, #68]	; 0x44
   146f4:	cmp	r3, #0
   146f8:	beq	1473c <rb_radixtree_foreach_next+0xd8>
   146fc:	ldrb	r2, [r1, #72]	; 0x48
   14700:	mov	r1, r3
   14704:	cmp	r2, #14
   14708:	bhi	146f0 <rb_radixtree_foreach_next+0x8c>
   1470c:	add	r2, r2, #1
   14710:	mov	r1, r3
   14714:	b	146a4 <rb_radixtree_foreach_next+0x40>
   14718:	mov	r2, #0
   1471c:	mov	r1, r5
   14720:	b	146a4 <rb_radixtree_foreach_next+0x40>
   14724:	ldr	r1, [r0, #8]
   14728:	ldr	r0, [r5, #8]
   1472c:	bl	55d8 <strcmp@plt>
   14730:	cmn	r0, #1
   14734:	strgt	r5, [r4, #12]
   14738:	popgt	{r4, r5, fp, pc}
   1473c:	mov	r0, #0
   14740:	str	r0, [r4, #12]
   14744:	pop	{r4, r5, fp, pc}

00014748 <rb_radixtree_foreach>:
   14748:	push	{r4, r5, r6, r7, fp, lr}
   1474c:	add	fp, sp, #16
   14750:	ldr	r0, [r0, #4]
   14754:	cmp	r0, #0
   14758:	beq	14834 <rb_radixtree_foreach+0xec>
   1475c:	mov	r3, r1
   14760:	ldr	r1, [r0]
   14764:	mov	r4, r2
   14768:	cmn	r1, #1
   1476c:	beq	14818 <rb_radixtree_foreach+0xd0>
   14770:	mov	r1, #0
   14774:	mov	r5, r0
   14778:	add	r0, r1, #1
   1477c:	ldr	r2, [r5, r0, lsl #2]
   14780:	add	r1, r0, #1
   14784:	cmp	r2, #0
   14788:	bne	14798 <rb_radixtree_foreach+0x50>
   1478c:	cmp	r0, #16
   14790:	mov	r0, r1
   14794:	blt	1477c <rb_radixtree_foreach+0x34>
   14798:	sub	r6, r1, #1
   1479c:	cmp	r2, #0
   147a0:	beq	147e0 <rb_radixtree_foreach+0x98>
   147a4:	ldr	r0, [r2]
   147a8:	mov	r1, r6
   147ac:	cmn	r0, #1
   147b0:	mov	r0, r5
   147b4:	movne	r0, r2
   147b8:	movwne	r1, #0
   147bc:	bne	147e8 <rb_radixtree_foreach+0xa0>
   147c0:	cmp	r3, #0
   147c4:	beq	147e8 <rb_radixtree_foreach+0xa0>
   147c8:	ldr	r1, [r2, #4]
   147cc:	ldr	r0, [r2, #8]
   147d0:	mov	r2, r4
   147d4:	mov	r7, r3
   147d8:	blx	r3
   147dc:	mov	r3, r7
   147e0:	mov	r0, r5
   147e4:	mov	r1, r6
   147e8:	cmp	r1, #16
   147ec:	blt	14774 <rb_radixtree_foreach+0x2c>
   147f0:	mov	r1, r0
   147f4:	ldr	r0, [r1, #68]	; 0x44
   147f8:	cmp	r0, #0
   147fc:	beq	14834 <rb_radixtree_foreach+0xec>
   14800:	ldrb	r2, [r1, #72]	; 0x48
   14804:	mov	r1, r0
   14808:	cmp	r2, #14
   1480c:	bhi	147f4 <rb_radixtree_foreach+0xac>
   14810:	add	r1, r2, #1
   14814:	b	14774 <rb_radixtree_foreach+0x2c>
   14818:	cmp	r3, #0
   1481c:	beq	14834 <rb_radixtree_foreach+0xec>
   14820:	ldr	r1, [r0, #4]
   14824:	ldr	r0, [r0, #8]
   14828:	mov	r2, r4
   1482c:	pop	{r4, r5, r6, r7, fp, lr}
   14830:	bx	r3
   14834:	pop	{r4, r5, r6, r7, fp, pc}

00014838 <rb_radixtree_search>:
   14838:	push	{r4, r5, r6, r7, fp, lr}
   1483c:	add	fp, sp, #16
   14840:	mov	r4, r2
   14844:	ldr	r2, [r0, #4]
   14848:	mov	r0, #0
   1484c:	cmp	r2, #0
   14850:	beq	14944 <rb_radixtree_search+0x10c>
   14854:	mov	r3, r1
   14858:	ldr	r1, [r2]
   1485c:	cmn	r1, #1
   14860:	beq	14928 <rb_radixtree_search+0xf0>
   14864:	mov	r1, #0
   14868:	mov	r5, r2
   1486c:	add	r1, r1, #1
   14870:	ldr	r0, [r5, r1, lsl #2]
   14874:	add	r2, r1, #1
   14878:	cmp	r0, #0
   1487c:	bne	1488c <rb_radixtree_search+0x54>
   14880:	cmp	r1, #16
   14884:	mov	r1, r2
   14888:	blt	14870 <rb_radixtree_search+0x38>
   1488c:	sub	r6, r2, #1
   14890:	cmp	r0, #0
   14894:	beq	148e8 <rb_radixtree_search+0xb0>
   14898:	ldr	r1, [r0]
   1489c:	mov	r2, r5
   148a0:	cmn	r1, #1
   148a4:	mov	r1, r6
   148a8:	movne	r2, r0
   148ac:	movwne	r1, #0
   148b0:	bne	148f0 <rb_radixtree_search+0xb8>
   148b4:	cmp	r3, #0
   148b8:	beq	148f0 <rb_radixtree_search+0xb8>
   148bc:	ldr	r1, [r0, #4]
   148c0:	ldr	r0, [r0, #8]
   148c4:	mov	r2, r4
   148c8:	mov	r7, r3
   148cc:	blx	r3
   148d0:	mov	r3, r7
   148d4:	cmp	r0, #0
   148d8:	mov	r2, r5
   148dc:	mov	r1, r6
   148e0:	beq	148f0 <rb_radixtree_search+0xb8>
   148e4:	b	14944 <rb_radixtree_search+0x10c>
   148e8:	mov	r2, r5
   148ec:	mov	r1, r6
   148f0:	cmp	r1, #16
   148f4:	blt	14868 <rb_radixtree_search+0x30>
   148f8:	ldr	r0, [r2, #68]	; 0x44
   148fc:	ldrb	r1, [r2, #72]	; 0x48
   14900:	cmp	r0, #0
   14904:	beq	14920 <rb_radixtree_search+0xe8>
   14908:	cmp	r1, #14
   1490c:	mov	r2, r0
   14910:	bhi	148f8 <rb_radixtree_search+0xc0>
   14914:	add	r1, r1, #1
   14918:	mov	r2, r0
   1491c:	b	14868 <rb_radixtree_search+0x30>
   14920:	mov	r2, #0
   14924:	b	14868 <rb_radixtree_search+0x30>
   14928:	cmp	r3, #0
   1492c:	beq	14944 <rb_radixtree_search+0x10c>
   14930:	ldr	r1, [r2, #4]
   14934:	ldr	r0, [r2, #8]
   14938:	mov	r2, r4
   1493c:	pop	{r4, r5, r6, r7, fp, lr}
   14940:	bx	r3
   14944:	pop	{r4, r5, r6, r7, fp, pc}

00014948 <rb_radixtree_elem_find>:
   14948:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1494c:	add	fp, sp, #28
   14950:	sub	sp, sp, #260	; 0x104
   14954:	mov	sl, r0
   14958:	mov	r0, r1
   1495c:	mov	r8, r2
   14960:	mov	r4, r1
   14964:	bl	50e0 <strlen@plt>
   14968:	mov	r5, r0
   1496c:	ldr	r0, [sl]
   14970:	mov	r6, #0
   14974:	cmp	r0, #0
   14978:	beq	149b0 <rb_radixtree_elem_find+0x68>
   1497c:	cmp	r5, #256	; 0x100
   14980:	blt	149b8 <rb_radixtree_elem_find+0x70>
   14984:	add	r0, r5, #1
   14988:	bl	52a8 <malloc@plt>
   1498c:	cmp	r0, #0
   14990:	beq	14a70 <rb_radixtree_elem_find+0x128>
   14994:	mov	r1, r4
   14998:	mov	r7, r0
   1499c:	bl	5194 <strcpy@plt>
   149a0:	ldr	r1, [sl]
   149a4:	blx	r1
   149a8:	mov	r9, r7
   149ac:	b	149dc <rb_radixtree_elem_find+0x94>
   149b0:	mov	r7, r4
   149b4:	b	149d8 <rb_radixtree_elem_find+0x90>
   149b8:	mov	r7, sp
   149bc:	mov	r1, r4
   149c0:	mov	r2, #256	; 0x100
   149c4:	mov	r0, r7
   149c8:	bl	4fb4 <rb_strlcpy@plt>
   149cc:	ldr	r1, [sl]
   149d0:	mov	r0, r7
   149d4:	blx	r1
   149d8:	mov	r9, #0
   149dc:	ldr	r4, [sl, #4]
   149e0:	cmp	r4, #0
   149e4:	beq	14a54 <rb_radixtree_elem_find+0x10c>
   149e8:	mov	ip, #4
   149ec:	mov	r1, #15
   149f0:	mov	r6, #0
   149f4:	ldr	r2, [r4]
   149f8:	cmn	r2, #1
   149fc:	beq	14a34 <rb_radixtree_elem_find+0xec>
   14a00:	add	r3, r2, r2, lsr #31
   14a04:	mov	r0, #0
   14a08:	cmp	r5, r3, asr #1
   14a0c:	ble	14a20 <rb_radixtree_elem_find+0xd8>
   14a10:	asr	r0, r3, #1
   14a14:	bic	r2, ip, r2, lsl #2
   14a18:	ldrb	r0, [r7, r0]
   14a1c:	and	r0, r1, r0, lsr r2
   14a20:	add	r0, r4, r0, lsl #2
   14a24:	ldr	r4, [r0, #4]
   14a28:	cmp	r4, #0
   14a2c:	bne	149f4 <rb_radixtree_elem_find+0xac>
   14a30:	b	14a54 <rb_radixtree_elem_find+0x10c>
   14a34:	cmp	r8, #0
   14a38:	bne	14a50 <rb_radixtree_elem_find+0x108>
   14a3c:	ldr	r0, [r4, #8]
   14a40:	mov	r1, r7
   14a44:	bl	55d8 <strcmp@plt>
   14a48:	cmp	r0, #0
   14a4c:	movne	r4, #0
   14a50:	mov	r6, r4
   14a54:	cmp	r9, #0
   14a58:	beq	14a64 <rb_radixtree_elem_find+0x11c>
   14a5c:	mov	r0, r9
   14a60:	bl	4ffc <free@plt>
   14a64:	mov	r0, r6
   14a68:	sub	sp, fp, #28
   14a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a70:	bl	5284 <rb_outofmemory@plt>

00014a74 <rb_radixtree_foreach_start_from>:
   14a74:	push	{r4, r5, fp, lr}
   14a78:	add	fp, sp, #8
   14a7c:	mov	r4, r1
   14a80:	mov	r5, r0
   14a84:	cmp	r2, #0
   14a88:	beq	14ab8 <rb_radixtree_foreach_start_from+0x44>
   14a8c:	mov	r0, #0
   14a90:	mov	r1, r2
   14a94:	mov	r2, #1
   14a98:	str	r0, [r4, #8]
   14a9c:	mov	r0, r5
   14aa0:	bl	5464 <rb_radixtree_elem_find@plt>
   14aa4:	str	r0, [r4, #12]
   14aa8:	mov	r0, r5
   14aac:	mov	r1, r4
   14ab0:	pop	{r4, r5, fp, lr}
   14ab4:	b	14664 <rb_radixtree_foreach_next>
   14ab8:	mov	r0, r5
   14abc:	mov	r1, r4
   14ac0:	pop	{r4, r5, fp, lr}
   14ac4:	b	145a0 <rb_radixtree_foreach_start>

00014ac8 <rb_radixtree_elem_add>:
   14ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14acc:	add	fp, sp, #28
   14ad0:	sub	sp, sp, #28
   14ad4:	mov	r7, r0
   14ad8:	mov	r0, r1
   14adc:	mov	r8, r2
   14ae0:	mov	r5, r1
   14ae4:	bl	50e0 <strlen@plt>
   14ae8:	mov	r6, r0
   14aec:	add	r0, r0, #1
   14af0:	bl	52a8 <malloc@plt>
   14af4:	cmp	r0, #0
   14af8:	beq	14e34 <rb_radixtree_elem_add+0x36c>
   14afc:	mov	r1, r5
   14b00:	mov	r9, r0
   14b04:	bl	5194 <strcpy@plt>
   14b08:	ldr	r1, [r7]
   14b0c:	cmp	r1, #0
   14b10:	beq	14b1c <rb_radixtree_elem_add+0x54>
   14b14:	mov	r0, r9
   14b18:	blx	r1
   14b1c:	mov	r5, r7
   14b20:	ldr	r4, [r5, #4]!
   14b24:	cmp	r4, #0
   14b28:	beq	14b94 <rb_radixtree_elem_add+0xcc>
   14b2c:	ldr	r2, [r4]
   14b30:	str	r7, [sp, #24]
   14b34:	str	r8, [sp, #20]
   14b38:	str	r4, [sp, #16]
   14b3c:	cmn	r2, #1
   14b40:	beq	14bcc <rb_radixtree_elem_add+0x104>
   14b44:	mov	r0, #4
   14b48:	mov	r1, #15
   14b4c:	mov	r7, r4
   14b50:	add	r3, r2, r2, lsr #31
   14b54:	mov	r8, r7
   14b58:	mov	sl, #0
   14b5c:	cmp	r6, r3, asr #1
   14b60:	ble	14b74 <rb_radixtree_elem_add+0xac>
   14b64:	asr	r3, r3, #1
   14b68:	bic	r2, r0, r2, lsl #2
   14b6c:	ldrb	r3, [r9, r3]
   14b70:	and	sl, r1, r3, lsr r2
   14b74:	add	r2, r8, sl, lsl #2
   14b78:	ldr	r7, [r2, #4]
   14b7c:	cmp	r7, #0
   14b80:	beq	14bfc <rb_radixtree_elem_add+0x134>
   14b84:	ldr	r2, [r7]
   14b88:	cmn	r2, #1
   14b8c:	bne	14b50 <rb_radixtree_elem_add+0x88>
   14b90:	b	14bd8 <rb_radixtree_elem_add+0x110>
   14b94:	mov	r0, #1
   14b98:	mov	r1, #20
   14b9c:	bl	4f00 <calloc@plt>
   14ba0:	cmp	r0, #0
   14ba4:	beq	14e34 <rb_radixtree_elem_add+0x36c>
   14ba8:	mov	r1, #18
   14bac:	str	r0, [r7, #4]
   14bb0:	strb	r1, [r0, #16]
   14bb4:	mvn	r1, #0
   14bb8:	stm	r0, {r1, r8, r9}
   14bbc:	ldr	r1, [r7, #8]
   14bc0:	add	r1, r1, #1
   14bc4:	str	r1, [r7, #8]
   14bc8:	b	14e2c <rb_radixtree_elem_add+0x364>
   14bcc:	mov	r8, #0
   14bd0:	mov	sl, #18
   14bd4:	mov	r7, r4
   14bd8:	ldr	r0, [r7, #8]
   14bdc:	mov	r1, r9
   14be0:	bl	55d8 <strcmp@plt>
   14be4:	cmp	r0, #0
   14be8:	bne	14c38 <rb_radixtree_elem_add+0x170>
   14bec:	mov	r0, r9
   14bf0:	bl	4ffc <free@plt>
   14bf4:	mov	r0, #0
   14bf8:	b	14e2c <rb_radixtree_elem_add+0x364>
   14bfc:	ldr	r0, [r8]
   14c00:	mov	r7, r8
   14c04:	cmn	r0, #1
   14c08:	beq	14c38 <rb_radixtree_elem_add+0x170>
   14c0c:	mov	r0, r7
   14c10:	mov	r1, #1
   14c14:	ldr	r7, [r0, r1, lsl #2]
   14c18:	cmp	r7, #0
   14c1c:	bne	14c30 <rb_radixtree_elem_add+0x168>
   14c20:	add	r1, r1, #1
   14c24:	cmp	r1, #17
   14c28:	bne	14c14 <rb_radixtree_elem_add+0x14c>
   14c2c:	mov	r7, r0
   14c30:	ldr	r0, [r7]
   14c34:	b	14c04 <rb_radixtree_elem_add+0x13c>
   14c38:	ldr	r0, [r7, #8]
   14c3c:	str	r5, [sp, #4]
   14c40:	mvn	r5, #0
   14c44:	mov	r1, #0
   14c48:	mov	r2, #4
   14c4c:	mov	r3, #15
   14c50:	add	r5, r5, #1
   14c54:	ldrb	r6, [r9, r5, lsr #1]
   14c58:	ldrb	r4, [r0, r5, lsr #1]
   14c5c:	eor	r4, r4, r6
   14c60:	bic	r6, r2, r1
   14c64:	add	r1, r1, #4
   14c68:	tst	r4, r3, lsl r6
   14c6c:	beq	14c50 <rb_radixtree_elem_add+0x188>
   14c70:	lsr	ip, r5, #1
   14c74:	mov	r2, #1
   14c78:	cmp	r8, #0
   14c7c:	beq	14cc4 <rb_radixtree_elem_add+0x1fc>
   14c80:	ldr	r0, [r8]
   14c84:	cmp	r0, r5
   14c88:	ble	14cac <rb_radixtree_elem_add+0x1e4>
   14c8c:	mov	r1, r8
   14c90:	ldr	r8, [r8, #68]	; 0x44
   14c94:	cmp	r8, #0
   14c98:	beq	14cc0 <rb_radixtree_elem_add+0x1f8>
   14c9c:	ldr	r0, [r8]
   14ca0:	cmp	r0, r5
   14ca4:	bgt	14c8c <rb_radixtree_elem_add+0x1c4>
   14ca8:	ldrb	sl, [r1, #72]	; 0x48
   14cac:	mov	r2, #0
   14cb0:	cmp	r0, r5
   14cb4:	mov	r4, r8
   14cb8:	blt	14cc8 <rb_radixtree_elem_add+0x200>
   14cbc:	b	14dc4 <rb_radixtree_elem_add+0x2fc>
   14cc0:	ldrb	sl, [r1, #72]	; 0x48
   14cc4:	mov	r8, #0
   14cc8:	mov	r0, #1
   14ccc:	mov	r1, #76	; 0x4c
   14cd0:	str	r2, [sp, #8]
   14cd4:	str	ip, [sp, #12]
   14cd8:	bl	4f00 <calloc@plt>
   14cdc:	cmp	r0, #0
   14ce0:	beq	14e34 <rb_radixtree_elem_add+0x36c>
   14ce4:	vmov.i32	q8, #0	; 0x00000000
   14ce8:	mov	r4, r0
   14cec:	strb	sl, [r0, #72]	; 0x48
   14cf0:	str	r8, [r0, #68]	; 0x44
   14cf4:	str	r5, [r0], #4
   14cf8:	ldr	r3, [sp, #16]
   14cfc:	ldr	ip, [sp, #12]
   14d00:	add	r1, r4, #20
   14d04:	vst1.32	{d16-d17}, [r1]
   14d08:	add	r1, r4, #36	; 0x24
   14d0c:	vst1.32	{d16-d17}, [r0]
   14d10:	vst1.32	{d16-d17}, [r1]
   14d14:	add	r1, r4, #52	; 0x34
   14d18:	vst1.32	{d16-d17}, [r1]
   14d1c:	ldr	r1, [sp, #8]
   14d20:	cmp	r1, #0
   14d24:	beq	14d54 <rb_radixtree_elem_add+0x28c>
   14d28:	ldr	r1, [r7, #8]
   14d2c:	ldrb	r2, [r1, ip]
   14d30:	mov	r1, #15
   14d34:	and	r2, r1, r2, lsr r6
   14d38:	str	r3, [r0, r2, lsl #2]
   14d3c:	ldr	r0, [r3]
   14d40:	cmn	r0, #1
   14d44:	beq	14d9c <rb_radixtree_elem_add+0x2d4>
   14d48:	str	r4, [r3, #68]	; 0x44
   14d4c:	ldr	r5, [sp, #4]
   14d50:	b	14d84 <rb_radixtree_elem_add+0x2bc>
   14d54:	ldr	r1, [r7, #8]
   14d58:	add	r5, r8, sl, lsl #2
   14d5c:	ldr	r3, [r5, #4]!
   14d60:	ldrb	r2, [r1, ip]
   14d64:	mov	r1, #15
   14d68:	and	r2, r1, r2, lsr r6
   14d6c:	str	r3, [r0, r2, lsl #2]
   14d70:	ldr	r0, [r5]
   14d74:	ldr	r2, [r0]
   14d78:	cmn	r2, #1
   14d7c:	beq	14da8 <rb_radixtree_elem_add+0x2e0>
   14d80:	str	r4, [r0, #68]	; 0x44
   14d84:	ldr	r0, [r7, #8]
   14d88:	ldrb	r0, [r0, ip]
   14d8c:	and	r0, r1, r0, lsr r6
   14d90:	ldr	r1, [r5]
   14d94:	strb	r0, [r1, #72]	; 0x48
   14d98:	b	14dc0 <rb_radixtree_elem_add+0x2f8>
   14d9c:	str	r4, [r3, #12]
   14da0:	ldr	r5, [sp, #4]
   14da4:	b	14dac <rb_radixtree_elem_add+0x2e4>
   14da8:	str	r4, [r0, #12]
   14dac:	ldr	r0, [r7, #8]
   14db0:	ldrb	r0, [r0, ip]
   14db4:	and	r0, r1, r0, lsr r6
   14db8:	ldr	r1, [r5]
   14dbc:	strb	r0, [r1, #16]
   14dc0:	str	r4, [r5]
   14dc4:	ldrb	r5, [r9, ip]
   14dc8:	mov	r0, #1
   14dcc:	mov	r1, #20
   14dd0:	bl	4f00 <calloc@plt>
   14dd4:	cmp	r0, #0
   14dd8:	beq	14e34 <rb_radixtree_elem_add+0x36c>
   14ddc:	mov	r1, #15
   14de0:	mvn	r3, #0
   14de4:	and	r1, r1, r5, lsr r6
   14de8:	add	r2, r4, r1, lsl #2
   14dec:	str	r0, [r2, #4]!
   14df0:	str	r3, [r0]
   14df4:	ldr	r3, [sp, #20]
   14df8:	ldr	r0, [r2]
   14dfc:	str	r3, [r0, #4]
   14e00:	ldr	r0, [r2]
   14e04:	str	r9, [r0, #8]
   14e08:	ldr	r0, [r2]
   14e0c:	str	r4, [r0, #12]
   14e10:	ldr	r0, [r2]
   14e14:	strb	r1, [r0, #16]
   14e18:	ldr	r1, [sp, #24]
   14e1c:	ldr	r0, [r1, #8]
   14e20:	add	r0, r0, #1
   14e24:	str	r0, [r1, #8]
   14e28:	ldr	r0, [r2]
   14e2c:	sub	sp, fp, #28
   14e30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e34:	bl	5284 <rb_outofmemory@plt>

00014e38 <rb_radixtree_add>:
   14e38:	push	{fp, lr}
   14e3c:	mov	fp, sp
   14e40:	bl	5020 <rb_radixtree_elem_add@plt>
   14e44:	cmp	r0, #0
   14e48:	movwne	r0, #1
   14e4c:	pop	{fp, pc}

00014e50 <rb_radixtree_elem_delete>:
   14e50:	push	{r4, r5, r6, r7, fp, lr}
   14e54:	add	fp, sp, #16
   14e58:	mov	r4, r0
   14e5c:	ldr	r0, [r1, #8]
   14e60:	ldr	r5, [r1, #12]
   14e64:	ldrb	r7, [r1, #16]
   14e68:	mov	r6, r1
   14e6c:	cmp	r0, #0
   14e70:	beq	14e78 <rb_radixtree_elem_delete+0x28>
   14e74:	bl	4ffc <free@plt>
   14e78:	mov	r0, r6
   14e7c:	bl	4ffc <free@plt>
   14e80:	cmp	r5, #0
   14e84:	beq	14f00 <rb_radixtree_elem_delete+0xb0>
   14e88:	add	r1, r5, #4
   14e8c:	mov	r2, #0
   14e90:	mvn	r0, #0
   14e94:	str	r2, [r1, r7, lsl #2]
   14e98:	ldr	r7, [r1, r2, lsl #2]
   14e9c:	cmn	r0, #1
   14ea0:	mov	r3, r2
   14ea4:	add	r2, r2, #1
   14ea8:	mvnne	r3, #1
   14eac:	cmp	r7, #0
   14eb0:	movne	r0, r3
   14eb4:	cmp	r2, #16
   14eb8:	bne	14e98 <rb_radixtree_elem_delete+0x48>
   14ebc:	cmp	r0, #0
   14ec0:	bmi	14f20 <rb_radixtree_elem_delete+0xd0>
   14ec4:	ldr	r2, [r5, #68]	; 0x44
   14ec8:	ldrb	r1, [r5, #72]	; 0x48
   14ecc:	add	r0, r5, r0, lsl #2
   14ed0:	ldr	r0, [r0, #4]
   14ed4:	add	r3, r2, r1, lsl #2
   14ed8:	cmp	r2, #0
   14edc:	add	r3, r3, #4
   14ee0:	addeq	r3, r4, #4
   14ee4:	str	r0, [r3]
   14ee8:	ldr	r3, [r0]
   14eec:	cmn	r3, #1
   14ef0:	beq	14f0c <rb_radixtree_elem_delete+0xbc>
   14ef4:	str	r2, [r0, #68]	; 0x44
   14ef8:	add	r0, r0, #72	; 0x48
   14efc:	b	14f14 <rb_radixtree_elem_delete+0xc4>
   14f00:	mov	r0, #0
   14f04:	str	r0, [r4, #4]
   14f08:	b	14f20 <rb_radixtree_elem_delete+0xd0>
   14f0c:	str	r2, [r0, #12]
   14f10:	add	r0, r0, #16
   14f14:	strb	r1, [r0]
   14f18:	mov	r0, r5
   14f1c:	bl	4ffc <free@plt>
   14f20:	ldr	r0, [r4, #8]
   14f24:	subs	r0, r0, #1
   14f28:	str	r0, [r4, #8]
   14f2c:	moveq	r0, #0
   14f30:	streq	r0, [r4, #4]
   14f34:	pop	{r4, r5, r6, r7, fp, pc}

00014f38 <rb_radixtree_retrieve>:
   14f38:	push	{r4, sl, fp, lr}
   14f3c:	add	fp, sp, #8
   14f40:	mov	r2, #0
   14f44:	mov	r4, #0
   14f48:	bl	5464 <rb_radixtree_elem_find@plt>
   14f4c:	cmp	r0, #0
   14f50:	ldrne	r4, [r0, #4]
   14f54:	mov	r0, r4
   14f58:	pop	{r4, sl, fp, pc}

00014f5c <rb_radixtree_elem_get_key>:
   14f5c:	ldr	r0, [r0, #8]
   14f60:	bx	lr

00014f64 <rb_radixtree_elem_set_data>:
   14f64:	str	r1, [r0, #4]
   14f68:	bx	lr

00014f6c <rb_radixtree_elem_get_data>:
   14f6c:	ldr	r0, [r0, #4]
   14f70:	bx	lr

00014f74 <rb_radixtree_size>:
   14f74:	ldr	r0, [r0, #8]
   14f78:	bx	lr

00014f7c <rb_radixtree_stats>:
   14f7c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14f80:	add	fp, sp, #24
   14f84:	sub	sp, sp, #280	; 0x118
   14f88:	mov	r6, r0
   14f8c:	mov	r0, #0
   14f90:	mov	r5, r2
   14f94:	mov	r7, r1
   14f98:	str	r0, [sp, #20]
   14f9c:	ldr	r0, [r6, #8]
   14fa0:	cmp	r0, #0
   14fa4:	beq	14ff4 <rb_radixtree_stats+0x78>
   14fa8:	ldr	r0, [r6, #4]
   14fac:	add	r2, sp, #20
   14fb0:	mov	r1, #0
   14fb4:	bl	15058 <stats_recurse>
   14fb8:	ldr	r1, [r6, #8]
   14fbc:	ldr	r3, [r6, #12]
   14fc0:	ldr	r2, [sp, #20]
   14fc4:	ldr	r6, [pc, #120]	; 15044 <rb_radixtree_stats+0xc8>
   14fc8:	str	r0, [sp, #8]
   14fcc:	udiv	r4, r0, r1
   14fd0:	add	r6, pc, r6
   14fd4:	str	r1, [sp, #4]
   14fd8:	str	r2, [sp, #16]
   14fdc:	add	r0, sp, #24
   14fe0:	str	r6, [sp]
   14fe4:	str	r4, [sp, #12]
   14fe8:	ldr	r2, [pc, #88]	; 15048 <rb_radixtree_stats+0xcc>
   14fec:	add	r2, pc, r2
   14ff0:	b	15028 <rb_radixtree_stats+0xac>
   14ff4:	ldr	r3, [r6, #12]
   14ff8:	ldr	r0, [pc, #76]	; 1504c <rb_radixtree_stats+0xd0>
   14ffc:	ldr	r1, [pc, #76]	; 15050 <rb_radixtree_stats+0xd4>
   15000:	add	r0, pc, r0
   15004:	add	r1, pc, r1
   15008:	str	r1, [sp]
   1500c:	str	r0, [sp, #4]
   15010:	str	r0, [sp, #8]
   15014:	str	r0, [sp, #12]
   15018:	str	r0, [sp, #16]
   1501c:	add	r0, sp, #24
   15020:	ldr	r2, [pc, #44]	; 15054 <rb_radixtree_stats+0xd8>
   15024:	add	r2, pc, r2
   15028:	mov	r1, #256	; 0x100
   1502c:	bl	54a0 <snprintf@plt>
   15030:	add	r0, sp, #24
   15034:	mov	r1, r5
   15038:	blx	r7
   1503c:	sub	sp, fp, #24
   15040:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15044:	.word	0x00001bd9
   15048:	.word	0x00001b70
   1504c:	.word	0x00000d57
   15050:	.word	0x00001ba5
   15054:	.word	0x00001b61

00015058 <stats_recurse>:
   15058:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1505c:	add	fp, sp, #24
   15060:	mov	r4, r1
   15064:	ldr	r1, [r2]
   15068:	mov	r8, r2
   1506c:	cmp	r1, r4
   15070:	strlt	r4, [r8]
   15074:	ldr	r1, [r0]
   15078:	cmn	r1, #1
   1507c:	beq	150b8 <stats_recurse+0x60>
   15080:	add	r6, r4, #1
   15084:	add	r7, r0, #4
   15088:	mov	r5, #0
   1508c:	mov	r4, #0
   15090:	ldr	r0, [r7, r5, lsl #2]
   15094:	cmp	r0, #0
   15098:	beq	150ac <stats_recurse+0x54>
   1509c:	mov	r1, r6
   150a0:	mov	r2, r8
   150a4:	bl	15058 <stats_recurse>
   150a8:	add	r4, r0, r4
   150ac:	add	r5, r5, #1
   150b0:	cmp	r5, #16
   150b4:	bne	15090 <stats_recurse+0x38>
   150b8:	mov	r0, r4
   150bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000150c0 <rb_radixtree_stats_walk>:
   150c0:	push	{r4, r5, r6, sl, fp, lr}
   150c4:	add	fp, sp, #16
   150c8:	mov	r5, r0
   150cc:	ldr	r0, [pc, #48]	; 15104 <rb_radixtree_stats_walk+0x44>
   150d0:	ldr	r0, [pc, r0]
   150d4:	ldr	r6, [r0]
   150d8:	cmp	r6, #0
   150dc:	beq	15100 <rb_radixtree_stats_walk+0x40>
   150e0:	mov	r4, r1
   150e4:	ldr	r0, [r6]
   150e8:	mov	r1, r5
   150ec:	mov	r2, r4
   150f0:	bl	4f54 <rb_radixtree_stats@plt>
   150f4:	ldr	r6, [r6, #8]
   150f8:	cmp	r6, #0
   150fc:	bne	150e4 <rb_radixtree_stats_walk+0x24>
   15100:	pop	{r4, r5, r6, sl, fp, pc}
   15104:	.word	0x00013304

00015108 <__stat>:
   15108:	mov	r2, r1
   1510c:	mov	r1, r0
   15110:	mov	r0, #3
   15114:	b	4dbc <__xstat@plt>

00015118 <__fstat>:
   15118:	mov	r2, r1
   1511c:	mov	r1, r0
   15120:	mov	r0, #3
   15124:	b	544c <__fxstat@plt>

Disassembly of section .fini:

00015128 <_fini>:
   15128:	push	{r3, lr}
   1512c:	pop	{r3, pc}
