
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

000112bc <.init>:
   112bc:	push	{r3, lr}
   112c0:	bl	11684 <__assert_fail@plt+0x48>
   112c4:	pop	{r3, pc}

Disassembly of section .plt:

000112c8 <fdopen@plt-0x14>:
   112c8:	push	{lr}		; (str lr, [sp, #-4]!)
   112cc:	ldr	lr, [pc, #4]	; 112d8 <fdopen@plt-0x4>
   112d0:	add	lr, pc, lr
   112d4:	ldr	pc, [lr, #8]!
   112d8:	andeq	ip, r1, r8, lsr #26

000112dc <fdopen@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #28, 20	; 0x1c000
   112e4:	ldr	pc, [ip, #3368]!	; 0xd28

000112e8 <calloc@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #28, 20	; 0x1c000
   112f0:	ldr	pc, [ip, #3360]!	; 0xd20

000112f4 <fputs_unlocked@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #28, 20	; 0x1c000
   112fc:	ldr	pc, [ip, #3352]!	; 0xd18

00011300 <raise@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #28, 20	; 0x1c000
   11308:	ldr	pc, [ip, #3344]!	; 0xd10

0001130c <gmtime_r@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #28, 20	; 0x1c000
   11314:	ldr	pc, [ip, #3336]!	; 0xd08

00011318 <strcmp@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #28, 20	; 0x1c000
   11320:	ldr	pc, [ip, #3328]!	; 0xd00

00011324 <strtol@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #28, 20	; 0x1c000
   1132c:	ldr	pc, [ip, #3320]!	; 0xcf8

00011330 <posix_fadvise64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #28, 20	; 0x1c000
   11338:	ldr	pc, [ip, #3312]!	; 0xcf0

0001133c <mktime@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #28, 20	; 0x1c000
   11344:	ldr	pc, [ip, #3304]!	; 0xce8

00011348 <fflush@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #28, 20	; 0x1c000
   11350:	ldr	pc, [ip, #3296]!	; 0xce0

00011354 <wcwidth@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #28, 20	; 0x1c000
   1135c:	ldr	pc, [ip, #3288]!	; 0xcd8

00011360 <free@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #28, 20	; 0x1c000
   11368:	ldr	pc, [ip, #3280]!	; 0xcd0

0001136c <clock_gettime@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #28, 20	; 0x1c000
   11374:	ldr	pc, [ip, #3272]!	; 0xcc8

00011378 <_exit@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #28, 20	; 0x1c000
   11380:	ldr	pc, [ip, #3264]!	; 0xcc0

00011384 <memcpy@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #28, 20	; 0x1c000
   1138c:	ldr	pc, [ip, #3256]!	; 0xcb8

00011390 <mbsinit@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #28, 20	; 0x1c000
   11398:	ldr	pc, [ip, #3248]!	; 0xcb0

0001139c <memcmp@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #28, 20	; 0x1c000
   113a4:	ldr	pc, [ip, #3240]!	; 0xca8

000113a8 <getc_unlocked@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #28, 20	; 0x1c000
   113b0:	ldr	pc, [ip, #3232]!	; 0xca0

000113b4 <dcgettext@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #28, 20	; 0x1c000
   113bc:	ldr	pc, [ip, #3224]!	; 0xc98

000113c0 <realloc@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #28, 20	; 0x1c000
   113c8:	ldr	pc, [ip, #3216]!	; 0xc90

000113cc <localtime_r@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #28, 20	; 0x1c000
   113d4:	ldr	pc, [ip, #3208]!	; 0xc88

000113d8 <textdomain@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #28, 20	; 0x1c000
   113e0:	ldr	pc, [ip, #3200]!	; 0xc80

000113e4 <iswcntrl@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #28, 20	; 0x1c000
   113ec:	ldr	pc, [ip, #3192]!	; 0xc78

000113f0 <iswprint@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #28, 20	; 0x1c000
   113f8:	ldr	pc, [ip, #3184]!	; 0xc70

000113fc <tzset@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #28, 20	; 0x1c000
   11404:	ldr	pc, [ip, #3176]!	; 0xc68

00011408 <__fxstat64@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #28, 20	; 0x1c000
   11410:	ldr	pc, [ip, #3168]!	; 0xc60

00011414 <fwrite@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #28, 20	; 0x1c000
   1141c:	ldr	pc, [ip, #3160]!	; 0xc58

00011420 <lseek64@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #28, 20	; 0x1c000
   11428:	ldr	pc, [ip, #3152]!	; 0xc50

0001142c <__ctype_get_mb_cur_max@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #28, 20	; 0x1c000
   11434:	ldr	pc, [ip, #3144]!	; 0xc48

00011438 <__fpending@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #28, 20	; 0x1c000
   11440:	ldr	pc, [ip, #3136]!	; 0xc40

00011444 <ferror_unlocked@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #28, 20	; 0x1c000
   1144c:	ldr	pc, [ip, #3128]!	; 0xc38

00011450 <mbrtowc@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #28, 20	; 0x1c000
   11458:	ldr	pc, [ip, #3120]!	; 0xc30

0001145c <error@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #28, 20	; 0x1c000
   11464:	ldr	pc, [ip, #3112]!	; 0xc28

00011468 <getenv@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #28, 20	; 0x1c000
   11470:	ldr	pc, [ip, #3104]!	; 0xc20

00011474 <malloc@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #28, 20	; 0x1c000
   1147c:	ldr	pc, [ip, #3096]!	; 0xc18

00011480 <__libc_start_main@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #28, 20	; 0x1c000
   11488:	ldr	pc, [ip, #3088]!	; 0xc10

0001148c <strftime@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #28, 20	; 0x1c000
   11494:	ldr	pc, [ip, #3080]!	; 0xc08

00011498 <__freading@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #28, 20	; 0x1c000
   114a0:	ldr	pc, [ip, #3072]!	; 0xc00

000114a4 <__ctype_tolower_loc@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #28, 20	; 0x1c000
   114ac:	ldr	pc, [ip, #3064]!	; 0xbf8

000114b0 <__ctype_toupper_loc@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #28, 20	; 0x1c000
   114b8:	ldr	pc, [ip, #3056]!	; 0xbf0

000114bc <__gmon_start__@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #28, 20	; 0x1c000
   114c4:	ldr	pc, [ip, #3048]!	; 0xbe8

000114c8 <getopt_long@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #28, 20	; 0x1c000
   114d0:	ldr	pc, [ip, #3040]!	; 0xbe0

000114d4 <__ctype_b_loc@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #28, 20	; 0x1c000
   114dc:	ldr	pc, [ip, #3032]!	; 0xbd8

000114e0 <exit@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #28, 20	; 0x1c000
   114e8:	ldr	pc, [ip, #3024]!	; 0xbd0

000114ec <strlen@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #28, 20	; 0x1c000
   114f4:	ldr	pc, [ip, #3016]!	; 0xbc8

000114f8 <strchr@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #28, 20	; 0x1c000
   11500:	ldr	pc, [ip, #3008]!	; 0xbc0

00011504 <setenv@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #28, 20	; 0x1c000
   1150c:	ldr	pc, [ip, #3000]!	; 0xbb8

00011510 <ungetc@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #28, 20	; 0x1c000
   11518:	ldr	pc, [ip, #2992]!	; 0xbb0

0001151c <__errno_location@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #28, 20	; 0x1c000
   11524:	ldr	pc, [ip, #2984]!	; 0xba8

00011528 <__sprintf_chk@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #28, 20	; 0x1c000
   11530:	ldr	pc, [ip, #2976]!	; 0xba0

00011534 <__cxa_atexit@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #28, 20	; 0x1c000
   1153c:	ldr	pc, [ip, #2968]!	; 0xb98

00011540 <memset@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #28, 20	; 0x1c000
   11548:	ldr	pc, [ip, #2960]!	; 0xb90

0001154c <__printf_chk@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #28, 20	; 0x1c000
   11554:	ldr	pc, [ip, #2952]!	; 0xb88

00011558 <fileno@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #28, 20	; 0x1c000
   11560:	ldr	pc, [ip, #2944]!	; 0xb80

00011564 <strtoumax@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #28, 20	; 0x1c000
   1156c:	ldr	pc, [ip, #2936]!	; 0xb78

00011570 <__fprintf_chk@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #28, 20	; 0x1c000
   11578:	ldr	pc, [ip, #2928]!	; 0xb70

0001157c <strtoimax@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #28, 20	; 0x1c000
   11584:	ldr	pc, [ip, #2920]!	; 0xb68

00011588 <fclose@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #28, 20	; 0x1c000
   11590:	ldr	pc, [ip, #2912]!	; 0xb60

00011594 <fseeko64@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #28, 20	; 0x1c000
   1159c:	ldr	pc, [ip, #2904]!	; 0xb58

000115a0 <fcntl64@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #28, 20	; 0x1c000
   115a8:	ldr	pc, [ip, #2896]!	; 0xb50

000115ac <setlocale@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #28, 20	; 0x1c000
   115b4:	ldr	pc, [ip, #2888]!	; 0xb48

000115b8 <strrchr@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #28, 20	; 0x1c000
   115c0:	ldr	pc, [ip, #2880]!	; 0xb40

000115c4 <nl_langinfo@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #28, 20	; 0x1c000
   115cc:	ldr	pc, [ip, #2872]!	; 0xb38

000115d0 <timegm@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #28, 20	; 0x1c000
   115d8:	ldr	pc, [ip, #2864]!	; 0xb30

000115dc <clearerr_unlocked@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #28, 20	; 0x1c000
   115e4:	ldr	pc, [ip, #2856]!	; 0xb28

000115e8 <fopen64@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #28, 20	; 0x1c000
   115f0:	ldr	pc, [ip, #2848]!	; 0xb20

000115f4 <bindtextdomain@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #28, 20	; 0x1c000
   115fc:	ldr	pc, [ip, #2840]!	; 0xb18

00011600 <unsetenv@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #28, 20	; 0x1c000
   11608:	ldr	pc, [ip, #2832]!	; 0xb10

0001160c <strncmp@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #28, 20	; 0x1c000
   11614:	ldr	pc, [ip, #2824]!	; 0xb08

00011618 <abort@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #28, 20	; 0x1c000
   11620:	ldr	pc, [ip, #2816]!	; 0xb00

00011624 <close@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #28, 20	; 0x1c000
   1162c:	ldr	pc, [ip, #2808]!	; 0xaf8

00011630 <putchar_unlocked@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #28, 20	; 0x1c000
   11638:	ldr	pc, [ip, #2800]!	; 0xaf0

0001163c <__assert_fail@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #28, 20	; 0x1c000
   11644:	ldr	pc, [ip, #2792]!	; 0xae8

Disassembly of section .text:

00011648 <.text>:
   11648:	mov	fp, #0
   1164c:	mov	lr, #0
   11650:	pop	{r1}		; (ldr r1, [sp], #4)
   11654:	mov	r2, sp
   11658:	push	{r2}		; (str r2, [sp, #-4]!)
   1165c:	push	{r0}		; (str r0, [sp, #-4]!)
   11660:	ldr	ip, [pc, #16]	; 11678 <__assert_fail@plt+0x3c>
   11664:	push	{ip}		; (str ip, [sp, #-4]!)
   11668:	ldr	r0, [pc, #12]	; 1167c <__assert_fail@plt+0x40>
   1166c:	ldr	r3, [pc, #12]	; 11680 <__assert_fail@plt+0x44>
   11670:	bl	11480 <__libc_start_main@plt>
   11674:	bl	11618 <abort@plt>
   11678:	andeq	fp, r1, r0, lsl #28
   1167c:	andeq	r1, r1, r8, lsr r7
   11680:	andeq	fp, r1, r0, lsr #27
   11684:	ldr	r3, [pc, #20]	; 116a0 <__assert_fail@plt+0x64>
   11688:	ldr	r2, [pc, #20]	; 116a4 <__assert_fail@plt+0x68>
   1168c:	add	r3, pc, r3
   11690:	ldr	r2, [r3, r2]
   11694:	cmp	r2, #0
   11698:	bxeq	lr
   1169c:	b	114bc <__gmon_start__@plt>
   116a0:	andeq	ip, r1, ip, ror #18
   116a4:	andeq	r0, r0, r0, lsr r1
   116a8:	ldr	r0, [pc, #24]	; 116c8 <__assert_fail@plt+0x8c>
   116ac:	ldr	r3, [pc, #24]	; 116cc <__assert_fail@plt+0x90>
   116b0:	cmp	r3, r0
   116b4:	bxeq	lr
   116b8:	ldr	r3, [pc, #16]	; 116d0 <__assert_fail@plt+0x94>
   116bc:	cmp	r3, #0
   116c0:	bxeq	lr
   116c4:	bx	r3
   116c8:	andeq	lr, r2, r0, asr #3
   116cc:	andeq	lr, r2, r0, asr #3
   116d0:	andeq	r0, r0, r0
   116d4:	ldr	r0, [pc, #36]	; 11700 <__assert_fail@plt+0xc4>
   116d8:	ldr	r1, [pc, #36]	; 11704 <__assert_fail@plt+0xc8>
   116dc:	sub	r1, r1, r0
   116e0:	asr	r1, r1, #2
   116e4:	add	r1, r1, r1, lsr #31
   116e8:	asrs	r1, r1, #1
   116ec:	bxeq	lr
   116f0:	ldr	r3, [pc, #16]	; 11708 <__assert_fail@plt+0xcc>
   116f4:	cmp	r3, #0
   116f8:	bxeq	lr
   116fc:	bx	r3
   11700:	andeq	lr, r2, r0, asr #3
   11704:	andeq	lr, r2, r0, asr #3
   11708:	andeq	r0, r0, r0
   1170c:	push	{r4, lr}
   11710:	ldr	r4, [pc, #24]	; 11730 <__assert_fail@plt+0xf4>
   11714:	ldrb	r3, [r4]
   11718:	cmp	r3, #0
   1171c:	popne	{r4, pc}
   11720:	bl	116a8 <__assert_fail@plt+0x6c>
   11724:	mov	r3, #1
   11728:	strb	r3, [r4]
   1172c:	pop	{r4, pc}
   11730:	andeq	lr, r2, r4, ror #3
   11734:	b	116d4 <__assert_fail@plt+0x98>
   11738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1173c:	add	fp, sp, #28
   11740:	sub	sp, sp, #44	; 0x2c
   11744:	mov	r8, r1
   11748:	mov	r5, r0
   1174c:	mov	r4, #0
   11750:	str	r4, [fp, #-32]	; 0xffffffe0
   11754:	ldr	r0, [r1]
   11758:	bl	17770 <__assert_fail@plt+0x6134>
   1175c:	movw	r1, #53508	; 0xd104
   11760:	movt	r1, #1
   11764:	mov	r0, #6
   11768:	bl	115ac <setlocale@plt>
   1176c:	movw	r7, #49007	; 0xbf6f
   11770:	movt	r7, #1
   11774:	movw	r1, #48700	; 0xbe3c
   11778:	movt	r1, #1
   1177c:	mov	r0, r7
   11780:	bl	115f4 <bindtextdomain@plt>
   11784:	mov	r0, r7
   11788:	bl	113d8 <textdomain@plt>
   1178c:	movw	r0, #22036	; 0x5614
   11790:	movt	r0, #1
   11794:	bl	1be04 <__assert_fail@plt+0xa7c8>
   11798:	cmp	r5, #2
   1179c:	blt	117b0 <__assert_fail@plt+0x174>
   117a0:	sub	r0, r5, #1
   117a4:	mov	r1, #4
   117a8:	bl	19eb8 <__assert_fail@plt+0x887c>
   117ac:	mov	r4, r0
   117b0:	mvn	r0, #0
   117b4:	str	r0, [sp, #36]	; 0x24
   117b8:	add	r0, sp, #36	; 0x24
   117bc:	str	r0, [sp]
   117c0:	movw	r2, #54072	; 0xd338
   117c4:	movt	r2, #1
   117c8:	movw	r3, #54128	; 0xd370
   117cc:	movt	r3, #1
   117d0:	mov	r0, r5
   117d4:	mov	r1, r8
   117d8:	bl	114c8 <getopt_long@plt>
   117dc:	cmn	r0, #1
   117e0:	str	r8, [sp, #24]
   117e4:	str	r5, [sp, #28]
   117e8:	beq	11818 <__assert_fail@plt+0x1dc>
   117ec:	mov	sl, r0
   117f0:	mov	r6, #0
   117f4:	mov	r9, #0
   117f8:	mov	r7, #0
   117fc:	mov	r0, #0
   11800:	str	r0, [sp, #12]
   11804:	mov	r0, #0
   11808:	str	r0, [sp, #16]
   1180c:	mov	r0, #0
   11810:	str	r0, [sp, #20]
   11814:	b	11840 <__assert_fail@plt+0x204>
   11818:	mov	r7, #0
   1181c:	mov	r9, #0
   11820:	mov	r5, #0
   11824:	mov	r6, #0
   11828:	b	121a4 <__assert_fail@plt+0xb68>
   1182c:	mov	r0, #1
   11830:	str	r0, [sp, #20]
   11834:	mov	r0, #1
   11838:	str	r0, [sp, #12]
   1183c:	b	12148 <__assert_fail@plt+0xb0c>
   11840:	sub	r0, sl, #48	; 0x30
   11844:	cmp	r0, #9
   11848:	bhi	11888 <__assert_fail@plt+0x24c>
   1184c:	add	r8, r6, #1
   11850:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11854:	cmp	r8, r0
   11858:	bcc	1186c <__assert_fail@plt+0x230>
   1185c:	mov	r0, r9
   11860:	sub	r1, fp, #32
   11864:	bl	19ee4 <__assert_fail@plt+0x88a8>
   11868:	mov	r9, r0
   1186c:	strb	sl, [r9, r6]
   11870:	mov	r0, #0
   11874:	strb	r0, [r9, r8]
   11878:	mov	r6, r8
   1187c:	ldr	r8, [sp, #24]
   11880:	ldr	r5, [sp, #28]
   11884:	b	12148 <__assert_fail@plt+0xb0c>
   11888:	add	r0, sl, #3
   1188c:	cmp	r0, #260	; 0x104
   11890:	bhi	12414 <__assert_fail@plt+0xdd8>
   11894:	add	r1, pc, #0
   11898:	ldr	pc, [r1, r0, lsl #2]
   1189c:	andeq	r2, r1, ip, lsl r4
   118a0:	andeq	r2, r1, r0, ror r4
   118a4:	andeq	r2, r1, r4, lsl r4
   118a8:	andeq	r2, r1, r4, lsl r4
   118ac:	andeq	r2, r1, ip
   118b0:	andeq	r2, r1, r4, lsl r4
   118b4:	andeq	r2, r1, r4, lsl r4
   118b8:	andeq	r2, r1, r4, lsl r4
   118bc:	andeq	r2, r1, r4, lsl r4
   118c0:	andeq	r2, r1, r4, lsl r4
   118c4:	andeq	r2, r1, r4, lsl r4
   118c8:	andeq	r2, r1, r4, lsl r4
   118cc:	andeq	r2, r1, r4, lsl r4
   118d0:	andeq	r2, r1, r4, lsl r4
   118d4:	andeq	r2, r1, r4, lsl r4
   118d8:	andeq	r2, r1, r4, lsl r4
   118dc:	andeq	r2, r1, r4, lsl r4
   118e0:	andeq	r2, r1, r4, lsl r4
   118e4:	andeq	r2, r1, r4, lsl r4
   118e8:	andeq	r2, r1, r4, lsl r4
   118ec:	andeq	r2, r1, r4, lsl r4
   118f0:	andeq	r2, r1, r4, lsl r4
   118f4:	andeq	r2, r1, r4, lsl r4
   118f8:	andeq	r2, r1, r4, lsl r4
   118fc:	andeq	r2, r1, r4, lsl r4
   11900:	andeq	r2, r1, r4, lsl r4
   11904:	andeq	r2, r1, r4, lsl r4
   11908:	andeq	r2, r1, r4, lsl r4
   1190c:	andeq	r2, r1, r4, lsl r4
   11910:	andeq	r2, r1, r4, lsl r4
   11914:	andeq	r2, r1, r4, lsl r4
   11918:	andeq	r2, r1, r4, lsl r4
   1191c:	andeq	r2, r1, r4, lsl r4
   11920:	andeq	r2, r1, r4, lsl r4
   11924:	andeq	r2, r1, r4, lsl r4
   11928:	andeq	r2, r1, r4, lsl r4
   1192c:	andeq	r2, r1, r4, lsl r4
   11930:	andeq	r2, r1, r4, lsl r4
   11934:	andeq	r2, r1, r4, lsl r4
   11938:	andeq	r2, r1, r4, lsl r4
   1193c:	andeq	r2, r1, r4, lsl r4
   11940:	andeq	r2, r1, r4, lsl r4
   11944:	andeq	r2, r1, r4, lsl r4
   11948:	andeq	r2, r1, r4, lsl r4
   1194c:	andeq	r2, r1, r4, lsl r4
   11950:	andeq	r2, r1, r4, lsl r4
   11954:	andeq	r2, r1, r4, lsl r4
   11958:	andeq	r2, r1, r4, lsl r4
   1195c:	andeq	r2, r1, r4, lsl r4
   11960:	andeq	r2, r1, r4, lsl r4
   11964:	andeq	r2, r1, r4, lsl r4
   11968:	andeq	r2, r1, r4, lsl r4
   1196c:	andeq	r2, r1, r4, lsl r4
   11970:	andeq	r2, r1, r4, lsl r4
   11974:	andeq	r2, r1, r4, lsl r4
   11978:	andeq	r2, r1, r4, lsl r4
   1197c:	andeq	r2, r1, r4, lsl r4
   11980:	andeq	r2, r1, r4, lsl r4
   11984:	andeq	r2, r1, r4, lsl r4
   11988:	andeq	r2, r1, r4, lsl r4
   1198c:	andeq	r2, r1, r4, lsl r4
   11990:	andeq	r2, r1, r4, lsl r4
   11994:	andeq	r2, r1, r4, lsl r4
   11998:	andeq	r2, r1, r4, lsl r4
   1199c:	andeq	r2, r1, r4, lsl r4
   119a0:	andeq	r2, r1, r4, lsl r4
   119a4:	andeq	r2, r1, r4, lsl r4
   119a8:	andeq	r2, r1, r4, lsl r4
   119ac:	andeq	r2, r1, r4, lsl r4
   119b0:	andeq	r2, r1, r4, lsl r4
   119b4:	andeq	r2, r1, r4, lsl r4
   119b8:	andeq	r1, r1, r0, ror pc
   119bc:	andeq	r2, r1, r4, lsl r4
   119c0:			; <UNDEFINED> instruction: 0x00011cb0
   119c4:	andeq	r2, r1, r4, lsl r4
   119c8:	andeq	r2, r1, r4, lsl r4
   119cc:	andeq	r2, r1, r4, lsl r4
   119d0:	andeq	r2, r1, ip, rrx
   119d4:	andeq	r2, r1, r4, lsl r4
   119d8:	andeq	r2, r1, r4, lsl r4
   119dc:	andeq	r2, r1, r4, lsl r4
   119e0:	andeq	r1, r1, ip, lsr #29
   119e4:	andeq	r2, r1, r4, lsl r4
   119e8:	andeq	r2, r1, r4, lsl r4
   119ec:	andeq	r2, r1, r4, lsl r4
   119f0:	andeq	r2, r1, r4, lsl r4
   119f4:	andeq	r1, r1, r4, asr lr
   119f8:	strdeq	r1, [r1], -ip
   119fc:	andeq	r2, r1, r4, lsl r4
   11a00:	andeq	r2, r1, r4, lsl r4
   11a04:	andeq	r1, r1, r8, ror #26
   11a08:	andeq	r2, r1, r4, lsl r4
   11a0c:	andeq	r2, r1, r4, lsl r4
   11a10:	andeq	r2, r1, r4, lsl r4
   11a14:	andeq	r2, r1, r4, lsl r4
   11a18:	andeq	r2, r1, r4, lsl r4
   11a1c:	andeq	r2, r1, r4, lsl r4
   11a20:	andeq	r2, r1, r4, lsl r4
   11a24:	andeq	r2, r1, r4, lsl r4
   11a28:	andeq	r2, r1, r4, lsl r4
   11a2c:	andeq	r2, r1, r4, lsl #1
   11a30:	andeq	r1, r1, r4, ror #30
   11a34:	andeq	r1, r1, r8, asr #28
   11a38:	andeq	r1, r1, r8, asr pc
   11a3c:	ldrdeq	r2, [r1], -r0
   11a40:			; <UNDEFINED> instruction: 0x00011cb0
   11a44:	andeq	r2, r1, r4, lsl r4
   11a48:	andeq	r1, r1, r0, lsr #30
   11a4c:	andeq	r2, r1, r8, lsl #2
   11a50:	andeq	r2, r1, r4, lsl r4
   11a54:	andeq	r2, r1, r4, lsl r4
   11a58:	andeq	r1, r1, ip, asr #31
   11a5c:	andeq	r1, r1, ip, asr #26
   11a60:	andeq	r1, r1, r4, lsl #28
   11a64:	andeq	r1, r1, ip, lsl #31
   11a68:	andeq	r2, r1, r4, lsl r4
   11a6c:	andeq	r2, r1, r4, lsl r4
   11a70:			; <UNDEFINED> instruction: 0x00011dbc
   11a74:	andeq	r1, r1, r8, asr #27
   11a78:	andeq	r1, r1, ip, lsr pc
   11a7c:	andeq	r2, r1, r4, lsl r4
   11a80:	andeq	r2, r1, r8, ror r0
   11a84:	andeq	r1, r1, r0, ror #25
   11a88:	andeq	r2, r1, r4, lsl r4
   11a8c:	andeq	r2, r1, r4, lsl r4
   11a90:	andeq	r2, r1, r4, lsl r4
   11a94:	andeq	r2, r1, r4, lsl r4
   11a98:	andeq	r2, r1, r4, lsl r4
   11a9c:	andeq	r2, r1, r4, lsl r4
   11aa0:	andeq	r2, r1, r4, lsl r4
   11aa4:	andeq	r2, r1, r4, lsl r4
   11aa8:	andeq	r2, r1, r4, lsl r4
   11aac:	andeq	r2, r1, r4, lsl r4
   11ab0:	andeq	r2, r1, r4, lsl r4
   11ab4:	andeq	r2, r1, r4, lsl r4
   11ab8:	andeq	r2, r1, r4, lsl r4
   11abc:	andeq	r2, r1, r4, lsl r4
   11ac0:	andeq	r2, r1, r4, lsl r4
   11ac4:	andeq	r2, r1, r4, lsl r4
   11ac8:	andeq	r2, r1, r4, lsl r4
   11acc:	andeq	r2, r1, r4, lsl r4
   11ad0:	andeq	r2, r1, r4, lsl r4
   11ad4:	andeq	r2, r1, r4, lsl r4
   11ad8:	andeq	r2, r1, r4, lsl r4
   11adc:	andeq	r2, r1, r4, lsl r4
   11ae0:	andeq	r2, r1, r4, lsl r4
   11ae4:	andeq	r2, r1, r4, lsl r4
   11ae8:	andeq	r2, r1, r4, lsl r4
   11aec:	andeq	r2, r1, r4, lsl r4
   11af0:	andeq	r2, r1, r4, lsl r4
   11af4:	andeq	r2, r1, r4, lsl r4
   11af8:	andeq	r2, r1, r4, lsl r4
   11afc:	andeq	r2, r1, r4, lsl r4
   11b00:	andeq	r2, r1, r4, lsl r4
   11b04:	andeq	r2, r1, r4, lsl r4
   11b08:	andeq	r2, r1, r4, lsl r4
   11b0c:	andeq	r2, r1, r4, lsl r4
   11b10:	andeq	r2, r1, r4, lsl r4
   11b14:	andeq	r2, r1, r4, lsl r4
   11b18:	andeq	r2, r1, r4, lsl r4
   11b1c:	andeq	r2, r1, r4, lsl r4
   11b20:	andeq	r2, r1, r4, lsl r4
   11b24:	andeq	r2, r1, r4, lsl r4
   11b28:	andeq	r2, r1, r4, lsl r4
   11b2c:	andeq	r2, r1, r4, lsl r4
   11b30:	andeq	r2, r1, r4, lsl r4
   11b34:	andeq	r2, r1, r4, lsl r4
   11b38:	andeq	r2, r1, r4, lsl r4
   11b3c:	andeq	r2, r1, r4, lsl r4
   11b40:	andeq	r2, r1, r4, lsl r4
   11b44:	andeq	r2, r1, r4, lsl r4
   11b48:	andeq	r2, r1, r4, lsl r4
   11b4c:	andeq	r2, r1, r4, lsl r4
   11b50:	andeq	r2, r1, r4, lsl r4
   11b54:	andeq	r2, r1, r4, lsl r4
   11b58:	andeq	r2, r1, r4, lsl r4
   11b5c:	andeq	r2, r1, r4, lsl r4
   11b60:	andeq	r2, r1, r4, lsl r4
   11b64:	andeq	r2, r1, r4, lsl r4
   11b68:	andeq	r2, r1, r4, lsl r4
   11b6c:	andeq	r2, r1, r4, lsl r4
   11b70:	andeq	r2, r1, r4, lsl r4
   11b74:	andeq	r2, r1, r4, lsl r4
   11b78:	andeq	r2, r1, r4, lsl r4
   11b7c:	andeq	r2, r1, r4, lsl r4
   11b80:	andeq	r2, r1, r4, lsl r4
   11b84:	andeq	r2, r1, r4, lsl r4
   11b88:	andeq	r2, r1, r4, lsl r4
   11b8c:	andeq	r2, r1, r4, lsl r4
   11b90:	andeq	r2, r1, r4, lsl r4
   11b94:	andeq	r2, r1, r4, lsl r4
   11b98:	andeq	r2, r1, r4, lsl r4
   11b9c:	andeq	r2, r1, r4, lsl r4
   11ba0:	andeq	r2, r1, r4, lsl r4
   11ba4:	andeq	r2, r1, r4, lsl r4
   11ba8:	andeq	r2, r1, r4, lsl r4
   11bac:	andeq	r2, r1, r4, lsl r4
   11bb0:	andeq	r2, r1, r4, lsl r4
   11bb4:	andeq	r2, r1, r4, lsl r4
   11bb8:	andeq	r2, r1, r4, lsl r4
   11bbc:	andeq	r2, r1, r4, lsl r4
   11bc0:	andeq	r2, r1, r4, lsl r4
   11bc4:	andeq	r2, r1, r4, lsl r4
   11bc8:	andeq	r2, r1, r4, lsl r4
   11bcc:	andeq	r2, r1, r4, lsl r4
   11bd0:	andeq	r2, r1, r4, lsl r4
   11bd4:	andeq	r2, r1, r4, lsl r4
   11bd8:	andeq	r2, r1, r4, lsl r4
   11bdc:	andeq	r2, r1, r4, lsl r4
   11be0:	andeq	r2, r1, r4, lsl r4
   11be4:	andeq	r2, r1, r4, lsl r4
   11be8:	andeq	r2, r1, r4, lsl r4
   11bec:	andeq	r2, r1, r4, lsl r4
   11bf0:	andeq	r2, r1, r4, lsl r4
   11bf4:	andeq	r2, r1, r4, lsl r4
   11bf8:	andeq	r2, r1, r4, lsl r4
   11bfc:	andeq	r2, r1, r4, lsl r4
   11c00:	andeq	r2, r1, r4, lsl r4
   11c04:	andeq	r2, r1, r4, lsl r4
   11c08:	andeq	r2, r1, r4, lsl r4
   11c0c:	andeq	r2, r1, r4, lsl r4
   11c10:	andeq	r2, r1, r4, lsl r4
   11c14:	andeq	r2, r1, r4, lsl r4
   11c18:	andeq	r2, r1, r4, lsl r4
   11c1c:	andeq	r2, r1, r4, lsl r4
   11c20:	andeq	r2, r1, r4, lsl r4
   11c24:	andeq	r2, r1, r4, lsl r4
   11c28:	andeq	r2, r1, r4, lsl r4
   11c2c:	andeq	r2, r1, r4, lsl r4
   11c30:	andeq	r2, r1, r4, lsl r4
   11c34:	andeq	r2, r1, r4, lsl r4
   11c38:	andeq	r2, r1, r4, lsl r4
   11c3c:	andeq	r2, r1, r4, lsl r4
   11c40:	andeq	r2, r1, r4, lsl r4
   11c44:	andeq	r2, r1, r4, lsl r4
   11c48:	andeq	r2, r1, r4, lsl r4
   11c4c:	andeq	r2, r1, r4, lsl r4
   11c50:	andeq	r2, r1, r4, lsl r4
   11c54:	andeq	r2, r1, r4, lsl r4
   11c58:	andeq	r2, r1, r4, lsl r4
   11c5c:	andeq	r2, r1, r4, lsl r4
   11c60:	andeq	r2, r1, r4, lsl r4
   11c64:	andeq	r2, r1, r4, lsl r4
   11c68:	andeq	r2, r1, r4, lsl r4
   11c6c:	andeq	r2, r1, r4, lsl r4
   11c70:	andeq	r2, r1, r4, lsl r4
   11c74:	andeq	r2, r1, r4, lsl r4
   11c78:	andeq	r2, r1, r4, lsl r4
   11c7c:	andeq	r2, r1, r4, lsl r4
   11c80:	andeq	r2, r1, r4, lsl r4
   11c84:	andeq	r2, r1, r4, lsl r4
   11c88:	andeq	r2, r1, r4, lsl r4
   11c8c:	andeq	r2, r1, r4, lsl r4
   11c90:	andeq	r2, r1, r4, lsl r4
   11c94:	andeq	r2, r1, r4, lsl r4
   11c98:	andeq	r2, r1, r4, lsl r4
   11c9c:	andeq	r2, r1, r4, lsl r4
   11ca0:	andeq	r2, r1, r4, lsl r4
   11ca4:	andeq	r2, r1, r4, lsl r4
   11ca8:			; <UNDEFINED> instruction: 0x00011cbc
   11cac:	andeq	r2, r1, r0, lsr #1
   11cb0:	movw	r0, #57853	; 0xe1fd
   11cb4:	movt	r0, #2
   11cb8:	b	1213c <__assert_fail@plt+0xb00>
   11cbc:	movw	r0, #57824	; 0xe1e0
   11cc0:	movt	r0, #2
   11cc4:	ldr	r0, [r0]
   11cc8:	bl	1263c <__assert_fail@plt+0x1000>
   11ccc:	mov	r0, r9
   11cd0:	bl	158f8 <__assert_fail@plt+0x42bc>
   11cd4:	mov	r9, #0
   11cd8:	str	r9, [fp, #-32]	; 0xffffffe0
   11cdc:	b	12144 <__assert_fail@plt+0xb08>
   11ce0:	movw	r0, #57824	; 0xe1e0
   11ce4:	movt	r0, #2
   11ce8:	ldr	sl, [r0]
   11cec:	mov	r6, #0
   11cf0:	movw	r1, #48910	; 0xbf0e
   11cf4:	movt	r1, #1
   11cf8:	mov	r0, #0
   11cfc:	mov	r2, #5
   11d00:	bl	113b4 <dcgettext@plt>
   11d04:	mov	r3, r0
   11d08:	mov	r0, #1
   11d0c:	str	r0, [sp, #20]
   11d10:	add	r2, sp, #32
   11d14:	mov	r0, sl
   11d18:	mov	r1, #1
   11d1c:	bl	12744 <__assert_fail@plt+0x1108>
   11d20:	movw	r0, #57883	; 0xe21b
   11d24:	movt	r0, #2
   11d28:	ldrb	r0, [r0]
   11d2c:	cmp	r0, #0
   11d30:	ldreq	r0, [sp, #32]
   11d34:	movweq	r1, #57700	; 0xe164
   11d38:	movteq	r1, #2
   11d3c:	streq	r0, [r1]
   11d40:	mov	r0, #1
   11d44:	str	r0, [sp, #16]
   11d48:	b	12148 <__assert_fail@plt+0xb0c>
   11d4c:	movw	r0, #57841	; 0xe1f1
   11d50:	movt	r0, #2
   11d54:	mov	r1, #1
   11d58:	strb	r1, [r0]
   11d5c:	movw	r0, #57862	; 0xe206
   11d60:	movt	r0, #2
   11d64:	b	12140 <__assert_fail@plt+0xb04>
   11d68:	movw	r0, #57883	; 0xe21b
   11d6c:	movt	r0, #2
   11d70:	mov	r1, #1
   11d74:	strb	r1, [r0]
   11d78:	movw	r0, #57824	; 0xe1e0
   11d7c:	movt	r0, #2
   11d80:	ldr	sl, [r0]
   11d84:	mov	r0, #0
   11d88:	str	r0, [sp, #16]
   11d8c:	movw	r1, #48955	; 0xbf3b
   11d90:	movt	r1, #1
   11d94:	mov	r0, #0
   11d98:	mov	r2, #5
   11d9c:	bl	113b4 <dcgettext@plt>
   11da0:	mov	r3, r0
   11da4:	movw	r2, #57700	; 0xe164
   11da8:	movt	r2, #2
   11dac:	mov	r0, sl
   11db0:	mov	r1, #1
   11db4:	bl	12744 <__assert_fail@plt+0x1108>
   11db8:	b	12144 <__assert_fail@plt+0xb08>
   11dbc:	movw	r0, #57872	; 0xe210
   11dc0:	movt	r0, #2
   11dc4:	b	1213c <__assert_fail@plt+0xb00>
   11dc8:	movw	r0, #57824	; 0xe1e0
   11dcc:	movt	r0, #2
   11dd0:	ldr	r0, [r0]
   11dd4:	mov	r6, #0
   11dd8:	cmp	r0, #0
   11ddc:	beq	1182c <__assert_fail@plt+0x1f0>
   11de0:	mov	r1, #1
   11de4:	str	r1, [sp, #20]
   11de8:	movw	r1, #57873	; 0xe211
   11dec:	movt	r1, #2
   11df0:	ldrb	r1, [r1]
   11df4:	cmp	r1, #0
   11df8:	bne	11834 <__assert_fail@plt+0x1f8>
   11dfc:	bl	1278c <__assert_fail@plt+0x1150>
   11e00:	b	11834 <__assert_fail@plt+0x1f8>
   11e04:	movw	r0, #57863	; 0xe207
   11e08:	movt	r0, #2
   11e0c:	mov	r1, #1
   11e10:	strb	r1, [r0]
   11e14:	movw	r0, #57824	; 0xe1e0
   11e18:	movt	r0, #2
   11e1c:	ldr	r0, [r0]
   11e20:	mov	r6, #0
   11e24:	cmp	r0, #0
   11e28:	beq	12148 <__assert_fail@plt+0xb0c>
   11e2c:	movw	r2, #57684	; 0xe154
   11e30:	movt	r2, #2
   11e34:	movw	r3, #57688	; 0xe158
   11e38:	movt	r3, #2
   11e3c:	mov	r1, #110	; 0x6e
   11e40:	bl	12688 <__assert_fail@plt+0x104c>
   11e44:	b	12148 <__assert_fail@plt+0xb0c>
   11e48:	movw	r0, #57843	; 0xe1f3
   11e4c:	movt	r0, #2
   11e50:	b	1213c <__assert_fail@plt+0xb00>
   11e54:	movw	r0, #57876	; 0xe214
   11e58:	movt	r0, #2
   11e5c:	mov	r1, #0
   11e60:	str	r1, [r0]
   11e64:	movw	r0, #57696	; 0xe160
   11e68:	movt	r0, #2
   11e6c:	movw	r1, #53508	; 0xd104
   11e70:	movt	r1, #1
   11e74:	str	r1, [r0]
   11e78:	movw	r0, #57873	; 0xe211
   11e7c:	movt	r0, #2
   11e80:	mov	r1, #1
   11e84:	strb	r1, [r0]
   11e88:	movw	r0, #57824	; 0xe1e0
   11e8c:	movt	r0, #2
   11e90:	ldr	r0, [r0]
   11e94:	cmp	r0, #0
   11e98:	beq	11ea0 <__assert_fail@plt+0x864>
   11e9c:	bl	1278c <__assert_fail@plt+0x1150>
   11ea0:	mov	r0, #0
   11ea4:	str	r0, [sp, #12]
   11ea8:	b	12144 <__assert_fail@plt+0xb08>
   11eac:	movw	r0, #57864	; 0xe208
   11eb0:	movt	r0, #2
   11eb4:	mov	r1, #1
   11eb8:	strb	r1, [r0]
   11ebc:	movw	r0, #57824	; 0xe1e0
   11ec0:	movt	r0, #2
   11ec4:	ldr	sl, [r0]
   11ec8:	mov	r6, #0
   11ecc:	movw	r1, #48837	; 0xbec5
   11ed0:	movt	r1, #1
   11ed4:	mov	r0, #0
   11ed8:	mov	r2, #5
   11edc:	bl	113b4 <dcgettext@plt>
   11ee0:	mov	r3, r0
   11ee4:	movw	r2, #57692	; 0xe15c
   11ee8:	movt	r2, #2
   11eec:	mov	r0, sl
   11ef0:	mov	r1, #-2147483648	; 0x80000000
   11ef4:	bl	12744 <__assert_fail@plt+0x1108>
   11ef8:	b	12148 <__assert_fail@plt+0xb0c>
   11efc:	movw	r0, #57881	; 0xe219
   11f00:	movt	r0, #2
   11f04:	mov	r6, #0
   11f08:	strb	r6, [r0]
   11f0c:	movw	r0, #57880	; 0xe218
   11f10:	movt	r0, #2
   11f14:	mov	r1, #1
   11f18:	strb	r1, [r0]
   11f1c:	b	12148 <__assert_fail@plt+0xb0c>
   11f20:	movw	r0, #57824	; 0xe1e0
   11f24:	movt	r0, #2
   11f28:	ldr	r0, [r0]
   11f2c:	movw	r1, #57856	; 0xe200
   11f30:	movt	r1, #2
   11f34:	str	r0, [r1]
   11f38:	b	12144 <__assert_fail@plt+0xb08>
   11f3c:	movw	r0, #57881	; 0xe219
   11f40:	movt	r0, #2
   11f44:	mov	r1, #1
   11f48:	strb	r1, [r0]
   11f4c:	movw	r0, #57880	; 0xe218
   11f50:	movt	r0, #2
   11f54:	b	12140 <__assert_fail@plt+0xb04>
   11f58:	movw	r0, #57844	; 0xe1f4
   11f5c:	movt	r0, #2
   11f60:	b	1213c <__assert_fail@plt+0xb00>
   11f64:	movw	r0, #57842	; 0xe1f2
   11f68:	movt	r0, #2
   11f6c:	b	1213c <__assert_fail@plt+0xb00>
   11f70:	movw	r0, #57824	; 0xe1e0
   11f74:	movt	r0, #2
   11f78:	ldr	r0, [r0]
   11f7c:	movw	r1, #57848	; 0xe1f8
   11f80:	movt	r1, #2
   11f84:	str	r0, [r1]
   11f88:	b	12144 <__assert_fail@plt+0xb08>
   11f8c:	movw	r0, #57824	; 0xe1e0
   11f90:	movt	r0, #2
   11f94:	ldr	sl, [r0]
   11f98:	mov	r6, #0
   11f9c:	movw	r1, #48878	; 0xbeee
   11fa0:	movt	r1, #1
   11fa4:	mov	r0, #0
   11fa8:	mov	r2, #5
   11fac:	bl	113b4 <dcgettext@plt>
   11fb0:	mov	r3, r0
   11fb4:	movw	r2, #57868	; 0xe20c
   11fb8:	movt	r2, #2
   11fbc:	mov	r0, sl
   11fc0:	mov	r1, #0
   11fc4:	bl	12744 <__assert_fail@plt+0x1108>
   11fc8:	b	12148 <__assert_fail@plt+0xb0c>
   11fcc:	movw	r0, #57824	; 0xe1e0
   11fd0:	movt	r0, #2
   11fd4:	ldr	sl, [r0]
   11fd8:	mov	r6, #0
   11fdc:	movw	r1, #48796	; 0xbe9c
   11fe0:	movt	r1, #1
   11fe4:	mov	r0, #0
   11fe8:	mov	r2, #5
   11fec:	bl	113b4 <dcgettext@plt>
   11ff0:	mov	r3, r0
   11ff4:	movw	r2, #57680	; 0xe150
   11ff8:	movt	r2, #2
   11ffc:	mov	r0, sl
   12000:	mov	r1, #1
   12004:	bl	12744 <__assert_fail@plt+0x1108>
   12008:	b	12148 <__assert_fail@plt+0xb0c>
   1200c:	movw	r0, #57832	; 0xe1e8
   12010:	movt	r0, #2
   12014:	ldrd	r0, [r0]
   12018:	orrs	r0, r0, r1
   1201c:	bne	12054 <__assert_fail@plt+0xa18>
   12020:	movw	r0, #57824	; 0xe1e0
   12024:	movt	r0, #2
   12028:	ldr	r0, [r0]
   1202c:	ldrb	r1, [r0]
   12030:	cmp	r1, #43	; 0x2b
   12034:	bne	12054 <__assert_fail@plt+0xa18>
   12038:	add	r2, r0, #1
   1203c:	mvn	r0, #1
   12040:	mov	r1, #43	; 0x2b
   12044:	bl	12514 <__assert_fail@plt+0xed8>
   12048:	mov	r6, #0
   1204c:	cmp	r0, #0
   12050:	bne	12148 <__assert_fail@plt+0xb0c>
   12054:	movw	r0, #57824	; 0xe1e0
   12058:	movt	r0, #2
   1205c:	ldr	r0, [r0]
   12060:	str	r0, [r4, r7, lsl #2]
   12064:	add	r7, r7, #1
   12068:	b	12144 <__assert_fail@plt+0xb08>
   1206c:	movw	r0, #57861	; 0xe205
   12070:	movt	r0, #2
   12074:	b	1213c <__assert_fail@plt+0xb00>
   12078:	movw	r0, #57882	; 0xe21a
   1207c:	movt	r0, #2
   12080:	b	1213c <__assert_fail@plt+0xb00>
   12084:	movw	r0, #57841	; 0xe1f1
   12088:	movt	r0, #2
   1208c:	mov	r1, #1
   12090:	strb	r1, [r0]
   12094:	movw	r0, #57840	; 0xe1f0
   12098:	movt	r0, #2
   1209c:	b	12140 <__assert_fail@plt+0xb04>
   120a0:	movw	sl, #57824	; 0xe1e0
   120a4:	movt	sl, #2
   120a8:	ldr	r2, [sl]
   120ac:	cmp	r2, #0
   120b0:	beq	12478 <__assert_fail@plt+0xe3c>
   120b4:	ldr	r0, [sp, #36]	; 0x24
   120b8:	mov	r6, #0
   120bc:	mov	r1, #0
   120c0:	bl	12514 <__assert_fail@plt+0xed8>
   120c4:	cmp	r0, #0
   120c8:	bne	12148 <__assert_fail@plt+0xb0c>
   120cc:	b	12484 <__assert_fail@plt+0xe48>
   120d0:	movw	r0, #57824	; 0xe1e0
   120d4:	movt	r0, #2
   120d8:	ldr	r0, [r0]
   120dc:	cmp	r0, #0
   120e0:	beq	120fc <__assert_fail@plt+0xac0>
   120e4:	movw	r2, #57664	; 0xe140
   120e8:	movt	r2, #2
   120ec:	movw	r3, #57668	; 0xe144
   120f0:	movt	r3, #2
   120f4:	mov	r1, #101	; 0x65
   120f8:	bl	12688 <__assert_fail@plt+0x104c>
   120fc:	movw	r0, #57852	; 0xe1fc
   12100:	movt	r0, #2
   12104:	b	1213c <__assert_fail@plt+0xb00>
   12108:	movw	r0, #57824	; 0xe1e0
   1210c:	movt	r0, #2
   12110:	ldr	r0, [r0]
   12114:	cmp	r0, #0
   12118:	beq	12134 <__assert_fail@plt+0xaf8>
   1211c:	movw	r2, #57672	; 0xe148
   12120:	movt	r2, #2
   12124:	movw	r3, #57676	; 0xe14c
   12128:	movt	r3, #2
   1212c:	mov	r1, #105	; 0x69
   12130:	bl	12688 <__assert_fail@plt+0x104c>
   12134:	movw	r0, #57860	; 0xe204
   12138:	movt	r0, #2
   1213c:	mov	r1, #1
   12140:	strb	r1, [r0]
   12144:	mov	r6, #0
   12148:	mvn	r0, #0
   1214c:	str	r0, [sp, #36]	; 0x24
   12150:	add	r0, sp, #36	; 0x24
   12154:	str	r0, [sp]
   12158:	mov	r0, r5
   1215c:	mov	r1, r8
   12160:	movw	r2, #54072	; 0xd338
   12164:	movt	r2, #1
   12168:	movw	r3, #54128	; 0xd370
   1216c:	movt	r3, #1
   12170:	bl	114c8 <getopt_long@plt>
   12174:	mov	sl, r0
   12178:	cmn	r0, #1
   1217c:	bne	11840 <__assert_fail@plt+0x204>
   12180:	cmp	r9, #0
   12184:	beq	12198 <__assert_fail@plt+0xb5c>
   12188:	mov	r0, r9
   1218c:	bl	1263c <__assert_fail@plt+0x1000>
   12190:	mov	r0, r9
   12194:	bl	158f8 <__assert_fail@plt+0x42bc>
   12198:	ldr	r9, [sp, #12]
   1219c:	ldr	r6, [sp, #20]
   121a0:	ldr	r5, [sp, #16]
   121a4:	movw	r8, #57848	; 0xe1f8
   121a8:	movt	r8, #2
   121ac:	ldr	r0, [r8]
   121b0:	cmp	r0, #0
   121b4:	bne	121fc <__assert_fail@plt+0xbc0>
   121b8:	movw	r0, #49045	; 0xbf95
   121bc:	movt	r0, #1
   121c0:	bl	11468 <getenv@plt>
   121c4:	cmp	r0, #0
   121c8:	beq	121f0 <__assert_fail@plt+0xbb4>
   121cc:	mov	r0, #2
   121d0:	bl	159e0 <__assert_fail@plt+0x43a4>
   121d4:	movw	r2, #49076	; 0xbfb4
   121d8:	movt	r2, #1
   121dc:	movw	r1, #49061	; 0xbfa5
   121e0:	movt	r1, #1
   121e4:	cmp	r0, #0
   121e8:	movne	r1, r2
   121ec:	b	121f8 <__assert_fail@plt+0xbbc>
   121f0:	movw	r1, #49076	; 0xbfb4
   121f4:	movt	r1, #1
   121f8:	str	r1, [r8]
   121fc:	movw	r0, #49091	; 0xbfc3
   12200:	movt	r0, #1
   12204:	bl	11468 <getenv@plt>
   12208:	bl	194bc <__assert_fail@plt+0x7e80>
   1220c:	movw	r1, #57884	; 0xe21c
   12210:	movt	r1, #2
   12214:	str	r0, [r1]
   12218:	movw	r0, #57832	; 0xe1e8
   1221c:	movt	r0, #2
   12220:	ldrd	r2, [r0]
   12224:	orrs	r1, r2, r3
   12228:	bne	1223c <__assert_fail@plt+0xc00>
   1222c:	mov	r1, #0
   12230:	mov	r2, #1
   12234:	str	r2, [r0]
   12238:	str	r1, [r0, #4]
   1223c:	movw	r0, #57862	; 0xe206
   12240:	movt	r0, #2
   12244:	ldrb	r8, [r0]
   12248:	cmp	r8, #1
   1224c:	bne	12278 <__assert_fail@plt+0xc3c>
   12250:	movw	r0, #57888	; 0xe220
   12254:	movt	r0, #2
   12258:	ldrb	r0, [r0]
   1225c:	cmp	r0, #1
   12260:	beq	124b8 <__assert_fail@plt+0xe7c>
   12264:	movw	r0, #57840	; 0xe1f0
   12268:	movt	r0, #2
   1226c:	ldrb	r0, [r0]
   12270:	cmp	r0, #1
   12274:	beq	124c4 <__assert_fail@plt+0xe88>
   12278:	ldr	r3, [sp, #28]
   1227c:	tst	r6, #1
   12280:	beq	12350 <__assert_fail@plt+0xd14>
   12284:	tst	r5, #1
   12288:	beq	122cc <__assert_fail@plt+0xc90>
   1228c:	cmp	r8, #0
   12290:	bne	122a8 <__assert_fail@plt+0xc6c>
   12294:	movw	r0, #57888	; 0xe220
   12298:	movt	r0, #2
   1229c:	ldrb	r0, [r0]
   122a0:	cmp	r0, #1
   122a4:	bne	12340 <__assert_fail@plt+0xd04>
   122a8:	movw	r1, #57883	; 0xe21b
   122ac:	movt	r1, #2
   122b0:	mov	r0, #1
   122b4:	strb	r0, [r1]
   122b8:	tst	r9, #1
   122bc:	movwne	r1, #57873	; 0xe211
   122c0:	movtne	r1, #2
   122c4:	strbne	r0, [r1]
   122c8:	b	12350 <__assert_fail@plt+0xd14>
   122cc:	movw	r0, #57873	; 0xe211
   122d0:	movt	r0, #2
   122d4:	ldrb	r1, [r0]
   122d8:	cmp	r1, #0
   122dc:	eoreq	r1, r9, #1
   122e0:	tsteq	r1, #1
   122e4:	bne	12350 <__assert_fail@plt+0xd14>
   122e8:	cmp	r8, #0
   122ec:	bne	12304 <__assert_fail@plt+0xcc8>
   122f0:	movw	r1, #57888	; 0xe220
   122f4:	movt	r1, #2
   122f8:	ldrb	r1, [r1]
   122fc:	cmp	r1, #1
   12300:	bne	12350 <__assert_fail@plt+0xd14>
   12304:	movw	r1, #57883	; 0xe21b
   12308:	movt	r1, #2
   1230c:	ldrb	r1, [r1]
   12310:	cmp	r1, #0
   12314:	bne	12348 <__assert_fail@plt+0xd0c>
   12318:	movw	r2, #57861	; 0xe205
   1231c:	movt	r2, #2
   12320:	mov	r1, #1
   12324:	strb	r1, [r2]
   12328:	movw	r2, #57876	; 0xe214
   1232c:	movt	r2, #2
   12330:	ldr	r2, [r2]
   12334:	cmp	r2, #1
   12338:	strbge	r1, [r0]
   1233c:	b	12350 <__assert_fail@plt+0xd14>
   12340:	movw	r0, #57861	; 0xe205
   12344:	movt	r0, #2
   12348:	mov	r1, #1
   1234c:	strb	r1, [r0]
   12350:	movw	r9, #57800	; 0xe1c8
   12354:	movt	r9, #2
   12358:	ldr	r6, [r9]
   1235c:	cmp	r6, r3
   12360:	bge	1238c <__assert_fail@plt+0xd50>
   12364:	mov	r5, r3
   12368:	add	r0, r4, r7, lsl #2
   1236c:	ldr	r1, [sp, #24]
   12370:	add	r1, r1, r6, lsl #2
   12374:	sub	r2, r3, r6
   12378:	lsl	r2, r2, #2
   1237c:	bl	11384 <memcpy@plt>
   12380:	str	r5, [r9]
   12384:	add	r0, r7, r5
   12388:	sub	r7, r0, r6
   1238c:	cmp	r7, #0
   12390:	beq	123c4 <__assert_fail@plt+0xd88>
   12394:	cmp	r8, #0
   12398:	beq	123a8 <__assert_fail@plt+0xd6c>
   1239c:	mov	r0, r7
   123a0:	mov	r1, r4
   123a4:	b	123cc <__assert_fail@plt+0xd90>
   123a8:	mov	r0, #1
   123ac:	mov	r1, r4
   123b0:	bl	12a20 <__assert_fail@plt+0x13e4>
   123b4:	subs	r7, r7, #1
   123b8:	add	r4, r4, #4
   123bc:	bne	123a8 <__assert_fail@plt+0xd6c>
   123c0:	b	123d0 <__assert_fail@plt+0xd94>
   123c4:	mov	r0, #0
   123c8:	mov	r1, #0
   123cc:	bl	12a20 <__assert_fail@plt+0x13e4>
   123d0:	bl	12ac8 <__assert_fail@plt+0x148c>
   123d4:	movw	r0, #57889	; 0xe221
   123d8:	movt	r0, #2
   123dc:	ldrb	r0, [r0]
   123e0:	cmp	r0, #1
   123e4:	bne	12400 <__assert_fail@plt+0xdc4>
   123e8:	movw	r0, #57816	; 0xe1d8
   123ec:	movt	r0, #2
   123f0:	ldr	r0, [r0]
   123f4:	bl	1573c <__assert_fail@plt+0x4100>
   123f8:	cmn	r0, #1
   123fc:	beq	124e8 <__assert_fail@plt+0xeac>
   12400:	movw	r0, #57890	; 0xe222
   12404:	movt	r0, #2
   12408:	ldrb	r0, [r0]
   1240c:	sub	sp, fp, #28
   12410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12414:	mov	r0, #1
   12418:	bl	127c0 <__assert_fail@plt+0x1184>
   1241c:	movw	r0, #57720	; 0xe178
   12420:	movt	r0, #2
   12424:	ldr	r3, [r0]
   12428:	movw	r0, #57820	; 0xe1dc
   1242c:	movt	r0, #2
   12430:	ldr	r0, [r0]
   12434:	mov	r1, #0
   12438:	movw	r2, #49030	; 0xbf86
   1243c:	movt	r2, #1
   12440:	movw	r7, #49017	; 0xbf79
   12444:	movt	r7, #1
   12448:	str	r7, [sp]
   1244c:	str	r2, [sp, #4]
   12450:	str	r1, [sp, #8]
   12454:	movw	r1, #49000	; 0xbf68
   12458:	movt	r1, #1
   1245c:	movw	r2, #49003	; 0xbf6b
   12460:	movt	r2, #1
   12464:	bl	19d14 <__assert_fail@plt+0x86d8>
   12468:	mov	r0, #0
   1246c:	bl	114e0 <exit@plt>
   12470:	mov	r0, #0
   12474:	bl	127c0 <__assert_fail@plt+0x1184>
   12478:	movw	r1, #48724	; 0xbe54
   1247c:	movt	r1, #1
   12480:	b	124cc <__assert_fail@plt+0xe90>
   12484:	movw	r1, #48774	; 0xbe86
   12488:	movt	r1, #1
   1248c:	mov	r0, #0
   12490:	mov	r2, #5
   12494:	bl	113b4 <dcgettext@plt>
   12498:	mov	r4, r0
   1249c:	ldr	r0, [sl]
   124a0:	bl	18fa8 <__assert_fail@plt+0x796c>
   124a4:	mov	r3, r0
   124a8:	mov	r0, #1
   124ac:	mov	r1, #0
   124b0:	mov	r2, r4
   124b4:	bl	1145c <error@plt>
   124b8:	movw	r1, #49094	; 0xbfc6
   124bc:	movt	r1, #1
   124c0:	b	124cc <__assert_fail@plt+0xe90>
   124c4:	movw	r1, #49153	; 0xc001
   124c8:	movt	r1, #1
   124cc:	mov	r0, #0
   124d0:	mov	r2, #5
   124d4:	bl	113b4 <dcgettext@plt>
   124d8:	mov	r2, r0
   124dc:	mov	r0, #1
   124e0:	mov	r1, #0
   124e4:	bl	1145c <error@plt>
   124e8:	bl	1151c <__errno_location@plt>
   124ec:	ldr	r4, [r0]
   124f0:	movw	r1, #49214	; 0xc03e
   124f4:	movt	r1, #1
   124f8:	mov	r0, #0
   124fc:	mov	r2, #5
   12500:	bl	113b4 <dcgettext@plt>
   12504:	mov	r2, r0
   12508:	mov	r0, #1
   1250c:	mov	r1, r4
   12510:	bl	1145c <error@plt>
   12514:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12518:	add	fp, sp, #24
   1251c:	sub	sp, sp, #32
   12520:	mov	r7, r2
   12524:	mov	r8, r1
   12528:	mov	r5, r0
   1252c:	mvn	r0, #0
   12530:	str	r0, [sp, #12]
   12534:	str	r0, [sp, #8]
   12538:	movw	r4, #53508	; 0xd104
   1253c:	movt	r4, #1
   12540:	str	r4, [sp]
   12544:	add	r1, sp, #28
   12548:	add	r3, sp, #16
   1254c:	mov	r0, r2
   12550:	mov	r2, #10
   12554:	bl	1ae98 <__assert_fail@plt+0x985c>
   12558:	orr	r1, r0, #2
   1255c:	cmp	r1, #2
   12560:	bne	12624 <__assert_fail@plt+0xfe8>
   12564:	mov	r6, #0
   12568:	ldr	r0, [sp, #28]
   1256c:	cmp	r0, r7
   12570:	ldrne	r1, [sp, #16]
   12574:	ldrne	r2, [sp, #20]
   12578:	orrsne	r1, r1, r2
   1257c:	bne	1258c <__assert_fail@plt+0xf50>
   12580:	mov	r0, r6
   12584:	sub	sp, fp, #24
   12588:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1258c:	ldrb	r1, [r0]
   12590:	cmp	r1, #58	; 0x3a
   12594:	bne	125e4 <__assert_fail@plt+0xfa8>
   12598:	str	r4, [sp]
   1259c:	add	r4, r0, #1
   125a0:	add	r1, sp, #28
   125a4:	add	r3, sp, #8
   125a8:	mov	r0, r4
   125ac:	mov	r2, #10
   125b0:	bl	1ae98 <__assert_fail@plt+0x985c>
   125b4:	cmp	r0, #0
   125b8:	bne	12624 <__assert_fail@plt+0xfe8>
   125bc:	ldr	r0, [sp, #28]
   125c0:	cmp	r4, r0
   125c4:	beq	12580 <__assert_fail@plt+0xf44>
   125c8:	ldr	r0, [sp, #16]
   125cc:	ldr	r1, [sp, #20]
   125d0:	ldr	r2, [sp, #8]
   125d4:	ldr	r3, [sp, #12]
   125d8:	subs	r0, r2, r0
   125dc:	sbcs	r0, r3, r1
   125e0:	bcc	12580 <__assert_fail@plt+0xf44>
   125e4:	ldr	r0, [sp, #28]
   125e8:	ldrb	r0, [r0]
   125ec:	cmp	r0, #0
   125f0:	bne	12580 <__assert_fail@plt+0xf44>
   125f4:	ldr	r0, [sp, #16]
   125f8:	ldr	r1, [sp, #20]
   125fc:	movw	r2, #57832	; 0xe1e8
   12600:	movt	r2, #2
   12604:	strd	r0, [r2]
   12608:	ldr	r0, [sp, #8]
   1260c:	ldr	r1, [sp, #12]
   12610:	movw	r2, #57704	; 0xe168
   12614:	movt	r2, #2
   12618:	strd	r0, [r2]
   1261c:	mov	r6, #1
   12620:	b	12580 <__assert_fail@plt+0xf44>
   12624:	str	r7, [sp]
   12628:	movw	r3, #54128	; 0xd370
   1262c:	movt	r3, #1
   12630:	mov	r1, r5
   12634:	mov	r2, r8
   12638:	bl	1add4 <__assert_fail@plt+0x9798>
   1263c:	push	{r4, r5, fp, lr}
   12640:	add	fp, sp, #8
   12644:	mov	r4, r0
   12648:	movw	r1, #53381	; 0xd085
   1264c:	movt	r1, #1
   12650:	mov	r0, #0
   12654:	mov	r2, #5
   12658:	bl	113b4 <dcgettext@plt>
   1265c:	mov	r3, r0
   12660:	mov	r5, #1
   12664:	movw	r2, #57712	; 0xe170
   12668:	movt	r2, #2
   1266c:	mov	r0, r4
   12670:	mov	r1, #1
   12674:	bl	12744 <__assert_fail@plt+0x1108>
   12678:	movw	r0, #57888	; 0xe220
   1267c:	movt	r0, #2
   12680:	strb	r5, [r0]
   12684:	pop	{r4, r5, fp, pc}
   12688:	push	{r4, r5, r6, r7, fp, lr}
   1268c:	add	fp, sp, #16
   12690:	sub	sp, sp, #8
   12694:	mov	r6, r3
   12698:	mov	r4, r1
   1269c:	mov	r5, r0
   126a0:	ldrb	r0, [r0]
   126a4:	sub	r1, r0, #48	; 0x30
   126a8:	cmp	r1, #10
   126ac:	strbcs	r0, [r2]
   126b0:	ldrbcs	r0, [r5, #1]!
   126b4:	cmp	r0, #0
   126b8:	beq	126f4 <__assert_fail@plt+0x10b8>
   126bc:	movw	r0, #53508	; 0xd104
   126c0:	movt	r0, #1
   126c4:	str	r0, [sp]
   126c8:	add	r3, sp, #4
   126cc:	mov	r0, r5
   126d0:	mov	r1, #0
   126d4:	mov	r2, #10
   126d8:	bl	1a8ac <__assert_fail@plt+0x9270>
   126dc:	cmp	r0, #0
   126e0:	bne	126fc <__assert_fail@plt+0x10c0>
   126e4:	ldr	r0, [sp, #4]
   126e8:	cmp	r0, #0
   126ec:	ble	126fc <__assert_fail@plt+0x10c0>
   126f0:	str	r0, [r6]
   126f4:	sub	sp, fp, #16
   126f8:	pop	{r4, r5, r6, r7, fp, pc}
   126fc:	bl	1151c <__errno_location@plt>
   12700:	ldr	r6, [r0]
   12704:	movw	r1, #53424	; 0xd0b0
   12708:	movt	r1, #1
   1270c:	mov	r0, #0
   12710:	mov	r2, #5
   12714:	bl	113b4 <dcgettext@plt>
   12718:	mov	r7, r0
   1271c:	mov	r0, r5
   12720:	bl	18fa8 <__assert_fail@plt+0x796c>
   12724:	str	r0, [sp]
   12728:	mov	r0, #0
   1272c:	mov	r1, r6
   12730:	mov	r2, r7
   12734:	mov	r3, r4
   12738:	bl	1145c <error@plt>
   1273c:	mov	r0, #1
   12740:	bl	127c0 <__assert_fail@plt+0x1184>
   12744:	push	{r4, r5, fp, lr}
   12748:	add	fp, sp, #8
   1274c:	sub	sp, sp, #24
   12750:	mov	r5, r2
   12754:	mov	r2, #0
   12758:	movw	ip, #53508	; 0xd104
   1275c:	movt	ip, #1
   12760:	mvn	r4, #-2147483648	; 0x80000000
   12764:	str	r4, [sp]
   12768:	stmib	sp, {r2, ip}
   1276c:	str	r3, [sp, #12]
   12770:	str	r2, [sp, #16]
   12774:	asr	r3, r1, #31
   12778:	mov	r2, r1
   1277c:	bl	1a314 <__assert_fail@plt+0x8cd8>
   12780:	str	r0, [r5]
   12784:	sub	sp, fp, #8
   12788:	pop	{r4, r5, fp, pc}
   1278c:	push	{r4, sl, fp, lr}
   12790:	add	fp, sp, #8
   12794:	mov	r4, r0
   12798:	bl	114ec <strlen@plt>
   1279c:	cmn	r0, #1
   127a0:	movwgt	r1, #57696	; 0xe160
   127a4:	movtgt	r1, #2
   127a8:	strgt	r4, [r1]
   127ac:	movwgt	r1, #57876	; 0xe214
   127b0:	movtgt	r1, #2
   127b4:	strgt	r0, [r1]
   127b8:	popgt	{r4, sl, fp, pc}
   127bc:	bl	12d18 <__assert_fail@plt+0x16dc>
   127c0:	push	{fp, lr}
   127c4:	mov	fp, sp
   127c8:	mov	r4, r0
   127cc:	cmp	r0, #0
   127d0:	bne	129dc <__assert_fail@plt+0x13a0>
   127d4:	movw	r1, #49268	; 0xc074
   127d8:	movt	r1, #1
   127dc:	mov	r0, #0
   127e0:	mov	r2, #5
   127e4:	bl	113b4 <dcgettext@plt>
   127e8:	mov	r1, r0
   127ec:	movw	r0, #58024	; 0xe2a8
   127f0:	movt	r0, #2
   127f4:	ldr	r2, [r0]
   127f8:	mov	r0, #1
   127fc:	bl	1154c <__printf_chk@plt>
   12800:	movw	r1, #49301	; 0xc095
   12804:	movt	r1, #1
   12808:	mov	r0, #0
   1280c:	mov	r2, #5
   12810:	bl	113b4 <dcgettext@plt>
   12814:	movw	r5, #57820	; 0xe1dc
   12818:	movt	r5, #2
   1281c:	ldr	r1, [r5]
   12820:	bl	112f4 <fputs_unlocked@plt>
   12824:	bl	12b34 <__assert_fail@plt+0x14f8>
   12828:	bl	12b64 <__assert_fail@plt+0x1528>
   1282c:	movw	r1, #49346	; 0xc0c2
   12830:	movt	r1, #1
   12834:	mov	r0, #0
   12838:	mov	r2, #5
   1283c:	bl	113b4 <dcgettext@plt>
   12840:	ldr	r1, [r5]
   12844:	bl	112f4 <fputs_unlocked@plt>
   12848:	movw	r1, #49680	; 0xc210
   1284c:	movt	r1, #1
   12850:	mov	r0, #0
   12854:	mov	r2, #5
   12858:	bl	113b4 <dcgettext@plt>
   1285c:	ldr	r1, [r5]
   12860:	bl	112f4 <fputs_unlocked@plt>
   12864:	movw	r1, #49950	; 0xc31e
   12868:	movt	r1, #1
   1286c:	mov	r0, #0
   12870:	mov	r2, #5
   12874:	bl	113b4 <dcgettext@plt>
   12878:	ldr	r1, [r5]
   1287c:	bl	112f4 <fputs_unlocked@plt>
   12880:	movw	r1, #50350	; 0xc4ae
   12884:	movt	r1, #1
   12888:	mov	r0, #0
   1288c:	mov	r2, #5
   12890:	bl	113b4 <dcgettext@plt>
   12894:	ldr	r1, [r5]
   12898:	bl	112f4 <fputs_unlocked@plt>
   1289c:	movw	r1, #50777	; 0xc659
   128a0:	movt	r1, #1
   128a4:	mov	r0, #0
   128a8:	mov	r2, #5
   128ac:	bl	113b4 <dcgettext@plt>
   128b0:	ldr	r1, [r5]
   128b4:	bl	112f4 <fputs_unlocked@plt>
   128b8:	movw	r1, #50997	; 0xc735
   128bc:	movt	r1, #1
   128c0:	mov	r0, #0
   128c4:	mov	r2, #5
   128c8:	bl	113b4 <dcgettext@plt>
   128cc:	ldr	r1, [r5]
   128d0:	bl	112f4 <fputs_unlocked@plt>
   128d4:	movw	r1, #51141	; 0xc7c5
   128d8:	movt	r1, #1
   128dc:	mov	r0, #0
   128e0:	mov	r2, #5
   128e4:	bl	113b4 <dcgettext@plt>
   128e8:	ldr	r1, [r5]
   128ec:	bl	112f4 <fputs_unlocked@plt>
   128f0:	movw	r1, #51487	; 0xc91f
   128f4:	movt	r1, #1
   128f8:	mov	r0, #0
   128fc:	mov	r2, #5
   12900:	bl	113b4 <dcgettext@plt>
   12904:	ldr	r1, [r5]
   12908:	bl	112f4 <fputs_unlocked@plt>
   1290c:	movw	r1, #51740	; 0xca1c
   12910:	movt	r1, #1
   12914:	mov	r0, #0
   12918:	mov	r2, #5
   1291c:	bl	113b4 <dcgettext@plt>
   12920:	ldr	r1, [r5]
   12924:	bl	112f4 <fputs_unlocked@plt>
   12928:	movw	r1, #52066	; 0xcb62
   1292c:	movt	r1, #1
   12930:	mov	r0, #0
   12934:	mov	r2, #5
   12938:	bl	113b4 <dcgettext@plt>
   1293c:	ldr	r1, [r5]
   12940:	bl	112f4 <fputs_unlocked@plt>
   12944:	movw	r1, #52302	; 0xcc4e
   12948:	movt	r1, #1
   1294c:	mov	r0, #0
   12950:	mov	r2, #5
   12954:	bl	113b4 <dcgettext@plt>
   12958:	ldr	r1, [r5]
   1295c:	bl	112f4 <fputs_unlocked@plt>
   12960:	movw	r1, #52406	; 0xccb6
   12964:	movt	r1, #1
   12968:	mov	r0, #0
   1296c:	mov	r2, #5
   12970:	bl	113b4 <dcgettext@plt>
   12974:	ldr	r1, [r5]
   12978:	bl	112f4 <fputs_unlocked@plt>
   1297c:	movw	r1, #52807	; 0xce47
   12980:	movt	r1, #1
   12984:	mov	r0, #0
   12988:	mov	r2, #5
   1298c:	bl	113b4 <dcgettext@plt>
   12990:	ldr	r1, [r5]
   12994:	bl	112f4 <fputs_unlocked@plt>
   12998:	movw	r1, #53022	; 0xcf1e
   1299c:	movt	r1, #1
   129a0:	mov	r0, #0
   129a4:	mov	r2, #5
   129a8:	bl	113b4 <dcgettext@plt>
   129ac:	ldr	r1, [r5]
   129b0:	bl	112f4 <fputs_unlocked@plt>
   129b4:	movw	r1, #53067	; 0xcf4b
   129b8:	movt	r1, #1
   129bc:	mov	r0, #0
   129c0:	mov	r2, #5
   129c4:	bl	113b4 <dcgettext@plt>
   129c8:	ldr	r1, [r5]
   129cc:	bl	112f4 <fputs_unlocked@plt>
   129d0:	bl	12b94 <__assert_fail@plt+0x1558>
   129d4:	mov	r0, r4
   129d8:	bl	114e0 <exit@plt>
   129dc:	movw	r0, #57808	; 0xe1d0
   129e0:	movt	r0, #2
   129e4:	ldr	r5, [r0]
   129e8:	movw	r1, #49229	; 0xc04d
   129ec:	movt	r1, #1
   129f0:	mov	r0, #0
   129f4:	mov	r2, #5
   129f8:	bl	113b4 <dcgettext@plt>
   129fc:	mov	r2, r0
   12a00:	movw	r0, #58024	; 0xe2a8
   12a04:	movt	r0, #2
   12a08:	ldr	r3, [r0]
   12a0c:	mov	r0, r5
   12a10:	mov	r1, #1
   12a14:	bl	11570 <__fprintf_chk@plt>
   12a18:	mov	r0, r4
   12a1c:	bl	114e0 <exit@plt>
   12a20:	push	{r4, r5, fp, lr}
   12a24:	add	fp, sp, #8
   12a28:	mov	r4, r1
   12a2c:	mov	r5, r0
   12a30:	bl	12d44 <__assert_fail@plt+0x1708>
   12a34:	mov	r0, r5
   12a38:	mov	r1, r4
   12a3c:	bl	13128 <__assert_fail@plt+0x1aec>
   12a40:	cmp	r0, #0
   12a44:	beq	12ac4 <__assert_fail@plt+0x1488>
   12a48:	movw	r0, #57841	; 0xe1f1
   12a4c:	movt	r0, #2
   12a50:	ldrb	r0, [r0]
   12a54:	cmp	r0, #0
   12a58:	bleq	132cc <__assert_fail@plt+0x1c90>
   12a5c:	movw	r4, #57832	; 0xe1e8
   12a60:	movt	r4, #2
   12a64:	ldrd	r0, [r4]
   12a68:	subs	r2, r0, #2
   12a6c:	sbcs	r2, r1, #0
   12a70:	bcc	12a88 <__assert_fail@plt+0x144c>
   12a74:	bl	134b0 <__assert_fail@plt+0x1e74>
   12a78:	cmp	r0, #0
   12a7c:	popeq	{r4, r5, fp, pc}
   12a80:	ldrd	r0, [r4]
   12a84:	b	12a90 <__assert_fail@plt+0x1454>
   12a88:	mov	r1, #0
   12a8c:	mov	r0, #1
   12a90:	movw	r2, #57896	; 0xe228
   12a94:	movt	r2, #2
   12a98:	strd	r0, [r2]
   12a9c:	bl	13684 <__assert_fail@plt+0x2048>
   12aa0:	movw	r0, #57716	; 0xe174
   12aa4:	movt	r0, #2
   12aa8:	ldr	r0, [r0]
   12aac:	movw	r1, #57904	; 0xe230
   12ab0:	movt	r1, #2
   12ab4:	str	r0, [r1]
   12ab8:	bl	138d0 <__assert_fail@plt+0x2294>
   12abc:	cmp	r0, #0
   12ac0:	bne	12ab8 <__assert_fail@plt+0x147c>
   12ac4:	pop	{r4, r5, fp, pc}
   12ac8:	push	{fp, lr}
   12acc:	mov	fp, sp
   12ad0:	movw	r0, #57920	; 0xe240
   12ad4:	movt	r0, #2
   12ad8:	ldr	r0, [r0]
   12adc:	bl	158f8 <__assert_fail@plt+0x42bc>
   12ae0:	movw	r0, #57924	; 0xe244
   12ae4:	movt	r0, #2
   12ae8:	ldr	r0, [r0]
   12aec:	bl	158f8 <__assert_fail@plt+0x42bc>
   12af0:	movw	r0, #57932	; 0xe24c
   12af4:	movt	r0, #2
   12af8:	ldr	r0, [r0]
   12afc:	bl	158f8 <__assert_fail@plt+0x42bc>
   12b00:	movw	r0, #57964	; 0xe26c
   12b04:	movt	r0, #2
   12b08:	ldr	r0, [r0]
   12b0c:	bl	158f8 <__assert_fail@plt+0x42bc>
   12b10:	movw	r0, #57968	; 0xe270
   12b14:	movt	r0, #2
   12b18:	ldr	r0, [r0]
   12b1c:	bl	158f8 <__assert_fail@plt+0x42bc>
   12b20:	movw	r0, #57972	; 0xe274
   12b24:	movt	r0, #2
   12b28:	ldr	r0, [r0]
   12b2c:	pop	{fp, lr}
   12b30:	b	158f8 <__assert_fail@plt+0x42bc>
   12b34:	push	{fp, lr}
   12b38:	mov	fp, sp
   12b3c:	movw	r1, #53630	; 0xd17e
   12b40:	movt	r1, #1
   12b44:	mov	r0, #0
   12b48:	mov	r2, #5
   12b4c:	bl	113b4 <dcgettext@plt>
   12b50:	movw	r1, #57820	; 0xe1dc
   12b54:	movt	r1, #2
   12b58:	ldr	r1, [r1]
   12b5c:	pop	{fp, lr}
   12b60:	b	112f4 <fputs_unlocked@plt>
   12b64:	push	{fp, lr}
   12b68:	mov	fp, sp
   12b6c:	movw	r1, #53686	; 0xd1b6
   12b70:	movt	r1, #1
   12b74:	mov	r0, #0
   12b78:	mov	r2, #5
   12b7c:	bl	113b4 <dcgettext@plt>
   12b80:	movw	r1, #57820	; 0xe1dc
   12b84:	movt	r1, #2
   12b88:	ldr	r1, [r1]
   12b8c:	pop	{fp, lr}
   12b90:	b	112f4 <fputs_unlocked@plt>
   12b94:	push	{r4, r5, fp, lr}
   12b98:	add	fp, sp, #8
   12b9c:	sub	sp, sp, #56	; 0x38
   12ba0:	movw	r0, #54560	; 0xd520
   12ba4:	movt	r0, #1
   12ba8:	add	r1, r0, #32
   12bac:	mov	r5, sp
   12bb0:	mov	r2, #48	; 0x30
   12bb4:	vld1.64	{d16-d17}, [r1]
   12bb8:	add	r1, r5, #32
   12bbc:	add	r3, r0, #16
   12bc0:	vld1.64	{d18-d19}, [r0], r2
   12bc4:	vld1.64	{d20-d21}, [r3]
   12bc8:	vldr	d22, [r0]
   12bcc:	vst1.64	{d16-d17}, [r1]
   12bd0:	add	r0, r5, #16
   12bd4:	vst1.64	{d20-d21}, [r0]
   12bd8:	mov	r0, r5
   12bdc:	vst1.64	{d18-d19}, [r0], r2
   12be0:	vstr	d22, [r0]
   12be4:	ldr	r1, [sp]
   12be8:	cmp	r1, #0
   12bec:	beq	12c14 <__assert_fail@plt+0x15d8>
   12bf0:	mov	r5, sp
   12bf4:	movw	r4, #49000	; 0xbf68
   12bf8:	movt	r4, #1
   12bfc:	mov	r0, r4
   12c00:	bl	11318 <strcmp@plt>
   12c04:	cmp	r0, #0
   12c08:	ldrne	r1, [r5, #8]!
   12c0c:	cmpne	r1, #0
   12c10:	bne	12bfc <__assert_fail@plt+0x15c0>
   12c14:	ldr	r4, [r5, #4]
   12c18:	movw	r1, #53856	; 0xd260
   12c1c:	movt	r1, #1
   12c20:	mov	r0, #0
   12c24:	mov	r2, #5
   12c28:	bl	113b4 <dcgettext@plt>
   12c2c:	mov	r1, r0
   12c30:	movw	r2, #49003	; 0xbf6b
   12c34:	movt	r2, #1
   12c38:	movw	r3, #53879	; 0xd277
   12c3c:	movt	r3, #1
   12c40:	mov	r0, #1
   12c44:	bl	1154c <__printf_chk@plt>
   12c48:	movw	r5, #49000	; 0xbf68
   12c4c:	movt	r5, #1
   12c50:	cmp	r4, #0
   12c54:	moveq	r4, r5
   12c58:	mov	r0, #5
   12c5c:	mov	r1, #0
   12c60:	bl	115ac <setlocale@plt>
   12c64:	cmp	r0, #0
   12c68:	beq	12ca8 <__assert_fail@plt+0x166c>
   12c6c:	movw	r1, #53919	; 0xd29f
   12c70:	movt	r1, #1
   12c74:	mov	r2, #3
   12c78:	bl	1160c <strncmp@plt>
   12c7c:	cmp	r0, #0
   12c80:	beq	12ca8 <__assert_fail@plt+0x166c>
   12c84:	movw	r1, #53923	; 0xd2a3
   12c88:	movt	r1, #1
   12c8c:	mov	r0, #0
   12c90:	mov	r2, #5
   12c94:	bl	113b4 <dcgettext@plt>
   12c98:	movw	r1, #57820	; 0xe1dc
   12c9c:	movt	r1, #2
   12ca0:	ldr	r1, [r1]
   12ca4:	bl	112f4 <fputs_unlocked@plt>
   12ca8:	movw	r1, #53994	; 0xd2ea
   12cac:	movt	r1, #1
   12cb0:	mov	r0, #0
   12cb4:	mov	r2, #5
   12cb8:	bl	113b4 <dcgettext@plt>
   12cbc:	mov	r1, r0
   12cc0:	movw	r2, #53879	; 0xd277
   12cc4:	movt	r2, #1
   12cc8:	mov	r0, #1
   12ccc:	mov	r3, r5
   12cd0:	bl	1154c <__printf_chk@plt>
   12cd4:	movw	r1, #54021	; 0xd305
   12cd8:	movt	r1, #1
   12cdc:	mov	r0, #0
   12ce0:	mov	r2, #5
   12ce4:	bl	113b4 <dcgettext@plt>
   12ce8:	mov	r1, r0
   12cec:	movw	r0, #53789	; 0xd21d
   12cf0:	movt	r0, #1
   12cf4:	movw	r3, #53508	; 0xd104
   12cf8:	movt	r3, #1
   12cfc:	cmp	r4, r5
   12d00:	moveq	r3, r0
   12d04:	mov	r0, #1
   12d08:	mov	r2, r4
   12d0c:	bl	1154c <__printf_chk@plt>
   12d10:	sub	sp, fp, #8
   12d14:	pop	{r4, r5, fp, pc}
   12d18:	push	{fp, lr}
   12d1c:	mov	fp, sp
   12d20:	movw	r1, #53407	; 0xd09f
   12d24:	movt	r1, #1
   12d28:	mov	r0, #0
   12d2c:	mov	r2, #5
   12d30:	bl	113b4 <dcgettext@plt>
   12d34:	mov	r2, r0
   12d38:	mov	r0, #1
   12d3c:	mov	r1, #0
   12d40:	bl	1145c <error@plt>
   12d44:	push	{r4, sl, fp, lr}
   12d48:	add	fp, sp, #8
   12d4c:	movw	r1, #57680	; 0xe150
   12d50:	movt	r1, #2
   12d54:	ldr	r2, [r1]
   12d58:	subs	r3, r2, #10
   12d5c:	movw	r1, #57908	; 0xe234
   12d60:	movt	r1, #2
   12d64:	str	r3, [r1]
   12d68:	bgt	12d90 <__assert_fail@plt+0x1754>
   12d6c:	movw	ip, #57881	; 0xe219
   12d70:	movt	ip, #2
   12d74:	mov	lr, #1
   12d78:	strb	lr, [ip]
   12d7c:	movw	r3, #57880	; 0xe218
   12d80:	movt	r3, #2
   12d84:	strb	lr, [r3]
   12d88:	str	r2, [r1]
   12d8c:	b	12da4 <__assert_fail@plt+0x1768>
   12d90:	movw	r3, #57880	; 0xe218
   12d94:	movt	r3, #2
   12d98:	ldrb	r3, [r3]
   12d9c:	cmp	r3, #1
   12da0:	streq	r2, [r1]
   12da4:	movw	r2, #57844	; 0xe1f4
   12da8:	movt	r2, #2
   12dac:	ldrb	r2, [r2]
   12db0:	cmp	r2, #1
   12db4:	ldreq	r2, [r1]
   12db8:	addeq	r2, r2, r2, lsr #31
   12dbc:	asreq	r2, r2, #1
   12dc0:	streq	r2, [r1]
   12dc4:	cmp	r0, #0
   12dc8:	beq	12df4 <__assert_fail@plt+0x17b8>
   12dcc:	movw	r1, #57862	; 0xe206
   12dd0:	movt	r1, #2
   12dd4:	ldrb	r2, [r1]
   12dd8:	mov	r1, #0
   12ddc:	cmp	r2, #1
   12de0:	movweq	r1, #57712	; 0xe170
   12de4:	movteq	r1, #2
   12de8:	streq	r0, [r1]
   12dec:	moveq	r1, #1
   12df0:	b	12e04 <__assert_fail@plt+0x17c8>
   12df4:	movw	r0, #57862	; 0xe206
   12df8:	movt	r0, #2
   12dfc:	mov	r1, #0
   12e00:	strb	r1, [r0]
   12e04:	movw	r2, #57841	; 0xe1f1
   12e08:	movt	r2, #2
   12e0c:	ldrb	r0, [r2]
   12e10:	cmp	r0, #0
   12e14:	movweq	r0, #57842	; 0xe1f2
   12e18:	movteq	r0, #2
   12e1c:	moveq	r3, #1
   12e20:	strbeq	r3, [r0]
   12e24:	movw	r0, #57712	; 0xe170
   12e28:	movt	r0, #2
   12e2c:	ldr	r0, [r0]
   12e30:	cmp	r0, #2
   12e34:	blt	12f28 <__assert_fail@plt+0x18ec>
   12e38:	movw	r2, #57861	; 0xe205
   12e3c:	movt	r2, #2
   12e40:	ldrb	r2, [r2]
   12e44:	movw	ip, #57873	; 0xe211
   12e48:	movt	ip, #2
   12e4c:	ldrb	r3, [ip]
   12e50:	cmp	r3, #0
   12e54:	beq	12eb4 <__assert_fail@plt+0x1878>
   12e58:	movw	ip, #57876	; 0xe214
   12e5c:	movt	ip, #2
   12e60:	ldr	r3, [ip]
   12e64:	cmp	r3, #1
   12e68:	bne	12e98 <__assert_fail@plt+0x185c>
   12e6c:	eors	r2, r2, #1
   12e70:	beq	12e98 <__assert_fail@plt+0x185c>
   12e74:	movw	r2, #57696	; 0xe160
   12e78:	movt	r2, #2
   12e7c:	ldr	r3, [r2]
   12e80:	ldrb	r3, [r3]
   12e84:	cmp	r3, #9
   12e88:	movweq	r3, #53509	; 0xd105
   12e8c:	movteq	r3, #1
   12e90:	streq	r3, [r2]
   12e94:	ldr	r3, [ip]
   12e98:	movw	r2, #57883	; 0xe21b
   12e9c:	movt	r2, #2
   12ea0:	mov	r4, #1
   12ea4:	strb	r4, [r2]
   12ea8:	cmp	r3, #1
   12eac:	beq	12ef8 <__assert_fail@plt+0x18bc>
   12eb0:	b	12f10 <__assert_fail@plt+0x18d4>
   12eb4:	movw	lr, #57876	; 0xe214
   12eb8:	movt	lr, #2
   12ebc:	mov	r4, #1
   12ec0:	str	r4, [lr]
   12ec4:	strb	r4, [ip]
   12ec8:	movw	r3, #57883	; 0xe21b
   12ecc:	movt	r3, #2
   12ed0:	strb	r4, [r3]
   12ed4:	movw	r3, #53507	; 0xd103
   12ed8:	movt	r3, #1
   12edc:	movw	r4, #53509	; 0xd105
   12ee0:	movt	r4, #1
   12ee4:	cmp	r2, #0
   12ee8:	movne	r4, r3
   12eec:	movw	r2, #57696	; 0xe160
   12ef0:	movt	r2, #2
   12ef4:	str	r4, [r2]
   12ef8:	movw	r2, #57696	; 0xe160
   12efc:	movt	r2, #2
   12f00:	ldr	r2, [r2]
   12f04:	ldrb	r2, [r2]
   12f08:	cmp	r2, #9
   12f0c:	beq	12f20 <__assert_fail@plt+0x18e4>
   12f10:	movw	r2, #57852	; 0xe1fc
   12f14:	movt	r2, #2
   12f18:	mov	r3, #1
   12f1c:	strb	r3, [r2]
   12f20:	movw	r2, #57860	; 0xe204
   12f24:	movt	r2, #2
   12f28:	mov	r3, #1
   12f2c:	strb	r3, [r2]
   12f30:	movw	r2, #57861	; 0xe205
   12f34:	movt	r2, #2
   12f38:	ldrb	r2, [r2]
   12f3c:	cmp	r2, #1
   12f40:	movweq	r2, #57883	; 0xe21b
   12f44:	movteq	r2, #2
   12f48:	moveq	r3, #0
   12f4c:	strbeq	r3, [r2]
   12f50:	movw	r2, #57863	; 0xe207
   12f54:	movt	r2, #2
   12f58:	ldrb	ip, [r2]
   12f5c:	mov	r3, #0
   12f60:	cmp	ip, #1
   12f64:	bne	12fd0 <__assert_fail@plt+0x1994>
   12f68:	movw	r2, #57692	; 0xe15c
   12f6c:	movt	r2, #2
   12f70:	ldr	r2, [r2]
   12f74:	movw	r3, #57716	; 0xe174
   12f78:	movt	r3, #2
   12f7c:	str	r2, [r3]
   12f80:	movw	r2, #57688	; 0xe158
   12f84:	movt	r2, #2
   12f88:	ldr	r2, [r2]
   12f8c:	movw	r3, #57684	; 0xe154
   12f90:	movt	r3, #2
   12f94:	ldrb	r3, [r3]
   12f98:	cmp	r3, #9
   12f9c:	bne	12fb4 <__assert_fail@plt+0x1978>
   12fa0:	asr	r3, r2, #31
   12fa4:	add	r2, r2, r3, lsr #29
   12fa8:	bic	r2, r2, #7
   12fac:	add	r2, r2, #8
   12fb0:	b	12fb8 <__assert_fail@plt+0x197c>
   12fb4:	add	r2, r2, #1
   12fb8:	movw	r3, #57912	; 0xe238
   12fbc:	movt	r3, #2
   12fc0:	str	r2, [r3]
   12fc4:	cmp	r1, #0
   12fc8:	movne	r1, r2
   12fcc:	mov	r3, r1
   12fd0:	movw	r1, #57876	; 0xe214
   12fd4:	movt	r1, #2
   12fd8:	ldr	r1, [r1]
   12fdc:	cmn	r1, #1
   12fe0:	ble	1300c <__assert_fail@plt+0x19d0>
   12fe4:	cmp	r1, #0
   12fe8:	beq	13064 <__assert_fail@plt+0x1a28>
   12fec:	sub	lr, r0, #1
   12ff0:	cmp	r0, #0
   12ff4:	ble	13038 <__assert_fail@plt+0x19fc>
   12ff8:	mvn	r2, #-2147483648	; 0x80000000
   12ffc:	udiv	r4, r2, r1
   13000:	cmp	r4, lr
   13004:	bge	13064 <__assert_fail@plt+0x1a28>
   13008:	b	1306c <__assert_fail@plt+0x1a30>
   1300c:	cmp	r0, #0
   13010:	ble	13054 <__assert_fail@plt+0x1a18>
   13014:	cmn	r1, #1
   13018:	beq	13064 <__assert_fail@plt+0x1a28>
   1301c:	sub	lr, r0, #1
   13020:	mov	r2, #-2147483648	; 0x80000000
   13024:	sdiv	r4, r2, r1
   13028:	mvn	r2, #-2147483648	; 0x80000000
   1302c:	cmp	r4, lr
   13030:	bge	13064 <__assert_fail@plt+0x1a28>
   13034:	b	1306c <__assert_fail@plt+0x1a30>
   13038:	beq	13064 <__assert_fail@plt+0x1a28>
   1303c:	mov	r2, #-2147483648	; 0x80000000
   13040:	sdiv	r4, r2, lr
   13044:	mvn	r2, #-2147483648	; 0x80000000
   13048:	cmp	r4, r1
   1304c:	bge	13064 <__assert_fail@plt+0x1a28>
   13050:	b	1306c <__assert_fail@plt+0x1a30>
   13054:	mvn	r2, #-2147483648	; 0x80000000
   13058:	sdiv	r4, r2, r1
   1305c:	cmp	r0, r4
   13060:	ble	1306c <__assert_fail@plt+0x1a30>
   13064:	sub	r2, r0, #1
   13068:	mul	r2, r1, r2
   1306c:	movw	r1, #57700	; 0xe164
   13070:	movt	r1, #2
   13074:	ldr	r1, [r1]
   13078:	sub	r1, r1, r3
   1307c:	subs	r1, r1, r2
   13080:	movvs	r1, #0
   13084:	sdiv	r0, r1, r0
   13088:	movw	r1, #57916	; 0xe23c
   1308c:	movt	r1, #2
   13090:	str	r0, [r1]
   13094:	cmp	r0, #0
   13098:	ble	13104 <__assert_fail@plt+0x1ac8>
   1309c:	cmp	ip, #0
   130a0:	beq	130d4 <__assert_fail@plt+0x1a98>
   130a4:	movw	r4, #57920	; 0xe240
   130a8:	movt	r4, #2
   130ac:	ldr	r0, [r4]
   130b0:	bl	158f8 <__assert_fail@plt+0x42bc>
   130b4:	movw	r0, #57688	; 0xe158
   130b8:	movt	r0, #2
   130bc:	ldr	r0, [r0]
   130c0:	cmp	r0, #11
   130c4:	movls	r0, #11
   130c8:	add	r0, r0, #1
   130cc:	bl	19e1c <__assert_fail@plt+0x87e0>
   130d0:	str	r0, [r4]
   130d4:	movw	r4, #57924	; 0xe244
   130d8:	movt	r4, #2
   130dc:	ldr	r0, [r4]
   130e0:	bl	158f8 <__assert_fail@plt+0x42bc>
   130e4:	movw	r0, #57668	; 0xe144
   130e8:	movt	r0, #2
   130ec:	ldr	r0, [r0]
   130f0:	cmp	r0, #8
   130f4:	movle	r0, #8
   130f8:	bl	19e1c <__assert_fail@plt+0x87e0>
   130fc:	str	r0, [r4]
   13100:	pop	{r4, sl, fp, pc}
   13104:	movw	r1, #53485	; 0xd0ed
   13108:	movt	r1, #1
   1310c:	mov	r0, #0
   13110:	mov	r2, #5
   13114:	bl	113b4 <dcgettext@plt>
   13118:	mov	r2, r0
   1311c:	mov	r0, #1
   13120:	mov	r1, #0
   13124:	bl	1145c <error@plt>
   13128:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1312c:	add	fp, sp, #24
   13130:	mov	r5, r1
   13134:	mov	r6, r0
   13138:	movw	r8, #57928	; 0xe248
   1313c:	movt	r8, #2
   13140:	mov	r0, #0
   13144:	str	r0, [r8]
   13148:	movw	r9, #57932	; 0xe24c
   1314c:	movt	r9, #2
   13150:	ldr	r0, [r9]
   13154:	bl	158f8 <__assert_fail@plt+0x42bc>
   13158:	movw	r7, #57712	; 0xe170
   1315c:	movt	r7, #2
   13160:	ldr	r0, [r7]
   13164:	mov	r1, #40	; 0x28
   13168:	bl	19eb8 <__assert_fail@plt+0x887c>
   1316c:	mov	r4, r0
   13170:	str	r0, [r9]
   13174:	movw	r0, #57862	; 0xe206
   13178:	movt	r0, #2
   1317c:	ldrb	r0, [r0]
   13180:	cmp	r0, #1
   13184:	beq	131f0 <__assert_fail@plt+0x1bb4>
   13188:	cmp	r6, #1
   1318c:	blt	1321c <__assert_fail@plt+0x1be0>
   13190:	ldr	r0, [r5]
   13194:	mov	r1, r4
   13198:	bl	13cac <__assert_fail@plt+0x2670>
   1319c:	mov	r1, r0
   131a0:	mov	r0, #0
   131a4:	cmp	r1, #0
   131a8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   131ac:	ldr	r5, [r5]
   131b0:	ldr	r0, [r4]
   131b4:	bl	11558 <fileno@plt>
   131b8:	mov	r1, r0
   131bc:	mov	r0, r5
   131c0:	b	13274 <__assert_fail@plt+0x1c38>
   131c4:	ldr	r0, [r5]
   131c8:	mov	r1, r4
   131cc:	bl	13cac <__assert_fail@plt+0x2670>
   131d0:	sub	r6, r6, #1
   131d4:	cmp	r0, #0
   131d8:	ldreq	r0, [r7]
   131dc:	subeq	r0, r0, #1
   131e0:	streq	r0, [r7]
   131e4:	subeq	r4, r4, #40	; 0x28
   131e8:	add	r5, r5, #4
   131ec:	add	r4, r4, #40	; 0x28
   131f0:	cmp	r6, #0
   131f4:	bne	131c4 <__assert_fail@plt+0x1b88>
   131f8:	ldr	r0, [r7]
   131fc:	cmp	r0, #0
   13200:	moveq	r0, #0
   13204:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   13208:	movw	r0, #53508	; 0xd104
   1320c:	movt	r0, #1
   13210:	mvn	r1, #0
   13214:	bl	13dd0 <__assert_fail@plt+0x2794>
   13218:	b	132b4 <__assert_fail@plt+0x1c78>
   1321c:	mov	r5, #0
   13220:	movw	r1, #49214	; 0xc03e
   13224:	movt	r1, #1
   13228:	mov	r0, #0
   1322c:	mov	r2, #5
   13230:	bl	113b4 <dcgettext@plt>
   13234:	movw	r1, #57816	; 0xe1d8
   13238:	movt	r1, #2
   1323c:	ldr	r1, [r1]
   13240:	movw	r2, #57889	; 0xe221
   13244:	movt	r2, #2
   13248:	mov	r3, #1
   1324c:	strb	r3, [r2]
   13250:	strb	r5, [r4, #37]	; 0x25
   13254:	str	r1, [r4]
   13258:	stmib	r4, {r0, r5}
   1325c:	ldr	r0, [r8]
   13260:	add	r0, r0, #1
   13264:	str	r0, [r8]
   13268:	movw	r0, #53508	; 0xd104
   1326c:	movt	r0, #1
   13270:	mvn	r1, #0
   13274:	bl	13dd0 <__assert_fail@plt+0x2794>
   13278:	mov	r0, #0
   1327c:	str	r0, [r4, #24]
   13280:	ldr	r3, [r7]
   13284:	cmp	r3, #1
   13288:	beq	132b4 <__assert_fail@plt+0x1c78>
   1328c:	ldm	r4, {r1, r2}
   13290:	rsb	r3, r3, #1
   13294:	add	r7, r4, #40	; 0x28
   13298:	stm	r7, {r1, r2}
   1329c:	str	r0, [r7, #8]
   132a0:	strb	r0, [r7, #37]	; 0x25
   132a4:	str	r0, [r7, #24]
   132a8:	adds	r3, r3, #1
   132ac:	add	r7, r7, #40	; 0x28
   132b0:	bne	13298 <__assert_fail@plt+0x1c5c>
   132b4:	ldr	r0, [r8]
   132b8:	movw	r1, #57936	; 0xe250
   132bc:	movt	r1, #2
   132c0:	str	r0, [r1]
   132c4:	mov	r0, #1
   132c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   132cc:	push	{r4, r5, r6, r7, fp, lr}
   132d0:	add	fp, sp, #16
   132d4:	movw	r0, #57712	; 0xe170
   132d8:	movt	r0, #2
   132dc:	ldr	r0, [r0]
   132e0:	cmn	r0, #1
   132e4:	ble	13318 <__assert_fail@plt+0x1cdc>
   132e8:	cmp	r0, #0
   132ec:	beq	13370 <__assert_fail@plt+0x1d34>
   132f0:	movw	r1, #57908	; 0xe234
   132f4:	movt	r1, #2
   132f8:	ldr	r1, [r1]
   132fc:	cmn	r1, #1
   13300:	ble	13348 <__assert_fail@plt+0x1d0c>
   13304:	mvn	r2, #-2147483648	; 0x80000000
   13308:	udiv	r2, r2, r0
   1330c:	cmp	r2, r1
   13310:	bge	13370 <__assert_fail@plt+0x1d34>
   13314:	b	13398 <__assert_fail@plt+0x1d5c>
   13318:	movw	r1, #57908	; 0xe234
   1331c:	movt	r1, #2
   13320:	ldr	r1, [r1]
   13324:	cmn	r1, #1
   13328:	ble	13360 <__assert_fail@plt+0x1d24>
   1332c:	cmn	r0, #1
   13330:	beq	13370 <__assert_fail@plt+0x1d34>
   13334:	mov	r2, #-2147483648	; 0x80000000
   13338:	sdiv	r2, r2, r0
   1333c:	cmp	r2, r1
   13340:	bge	13370 <__assert_fail@plt+0x1d34>
   13344:	b	13398 <__assert_fail@plt+0x1d5c>
   13348:	beq	13370 <__assert_fail@plt+0x1d34>
   1334c:	mov	r2, #-2147483648	; 0x80000000
   13350:	sdiv	r1, r2, r1
   13354:	cmp	r1, r0
   13358:	bge	13370 <__assert_fail@plt+0x1d34>
   1335c:	b	13398 <__assert_fail@plt+0x1d5c>
   13360:	mvn	r2, #-2147483648	; 0x80000000
   13364:	sdiv	r2, r2, r0
   13368:	cmp	r1, r2
   1336c:	blt	13398 <__assert_fail@plt+0x1d5c>
   13370:	movw	r1, #57908	; 0xe234
   13374:	movt	r1, #2
   13378:	ldr	r1, [r1]
   1337c:	mul	r4, r1, r0
   13380:	adds	r5, r4, #1
   13384:	movwvc	r0, #57916	; 0xe23c
   13388:	movtvc	r0, #2
   1338c:	ldrvc	r0, [r0]
   13390:	addsvc	r6, r0, #1
   13394:	bvc	1339c <__assert_fail@plt+0x1d60>
   13398:	bl	12d18 <__assert_fail@plt+0x16dc>
   1339c:	cmn	r6, #1
   133a0:	ble	133c8 <__assert_fail@plt+0x1d8c>
   133a4:	cmp	r6, #0
   133a8:	beq	13414 <__assert_fail@plt+0x1dd8>
   133ac:	cmn	r4, #1
   133b0:	ble	133ec <__assert_fail@plt+0x1db0>
   133b4:	mvn	r0, #-2147483648	; 0x80000000
   133b8:	udiv	r0, r0, r6
   133bc:	cmp	r0, r4
   133c0:	bge	13414 <__assert_fail@plt+0x1dd8>
   133c4:	b	13398 <__assert_fail@plt+0x1d5c>
   133c8:	cmn	r4, #1
   133cc:	ble	13404 <__assert_fail@plt+0x1dc8>
   133d0:	cmn	r6, #1
   133d4:	beq	13414 <__assert_fail@plt+0x1dd8>
   133d8:	mov	r0, #-2147483648	; 0x80000000
   133dc:	sdiv	r0, r0, r6
   133e0:	cmp	r0, r4
   133e4:	bge	13414 <__assert_fail@plt+0x1dd8>
   133e8:	b	13398 <__assert_fail@plt+0x1d5c>
   133ec:	beq	13414 <__assert_fail@plt+0x1dd8>
   133f0:	mov	r0, #-2147483648	; 0x80000000
   133f4:	sdiv	r0, r0, r4
   133f8:	cmp	r0, r6
   133fc:	bge	13414 <__assert_fail@plt+0x1dd8>
   13400:	b	13398 <__assert_fail@plt+0x1d5c>
   13404:	mvn	r0, #-2147483648	; 0x80000000
   13408:	sdiv	r0, r0, r6
   1340c:	cmp	r4, r0
   13410:	blt	13398 <__assert_fail@plt+0x1d5c>
   13414:	movw	r7, #57964	; 0xe26c
   13418:	movt	r7, #2
   1341c:	ldr	r0, [r7]
   13420:	bl	158f8 <__assert_fail@plt+0x42bc>
   13424:	mov	r0, r5
   13428:	mov	r1, #4
   1342c:	bl	19eb8 <__assert_fail@plt+0x887c>
   13430:	str	r0, [r7]
   13434:	movw	r5, #57968	; 0xe270
   13438:	movt	r5, #2
   1343c:	ldr	r0, [r5]
   13440:	bl	158f8 <__assert_fail@plt+0x42bc>
   13444:	mov	r0, r4
   13448:	mov	r1, #4
   1344c:	bl	19eb8 <__assert_fail@plt+0x887c>
   13450:	str	r0, [r5]
   13454:	movw	r5, #57972	; 0xe274
   13458:	movt	r5, #2
   1345c:	ldr	r0, [r5]
   13460:	bl	158f8 <__assert_fail@plt+0x42bc>
   13464:	mul	r4, r6, r4
   13468:	movw	r6, #57873	; 0xe211
   1346c:	movt	r6, #2
   13470:	ldrb	r0, [r6]
   13474:	mov	r7, #1
   13478:	cmp	r0, #0
   1347c:	mov	r1, #1
   13480:	movwne	r1, #2
   13484:	mov	r0, r4
   13488:	bl	19eb8 <__assert_fail@plt+0x887c>
   1348c:	str	r0, [r5]
   13490:	ldrb	r0, [r6]
   13494:	cmp	r0, #0
   13498:	movwne	r7, #2
   1349c:	mul	r0, r7, r4
   134a0:	movw	r1, #57976	; 0xe278
   134a4:	movt	r1, #2
   134a8:	str	r0, [r1]
   134ac:	pop	{r4, r5, r6, r7, fp, pc}
   134b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134b4:	add	fp, sp, #28
   134b8:	sub	sp, sp, #28
   134bc:	str	r0, [sp, #20]
   134c0:	subs	r0, r0, #2
   134c4:	str	r1, [sp, #24]
   134c8:	sbcs	r0, r1, #0
   134cc:	bcc	13664 <__assert_fail@plt+0x2028>
   134d0:	movw	sl, #57908	; 0xe234
   134d4:	movt	sl, #2
   134d8:	movw	r8, #57712	; 0xe170
   134dc:	movt	r8, #2
   134e0:	mov	r4, #1
   134e4:	mov	r5, #0
   134e8:	ldr	r0, [sl]
   134ec:	cmp	r0, #2
   134f0:	blt	13550 <__assert_fail@plt+0x1f14>
   134f4:	mov	r9, #1
   134f8:	ldr	r0, [r8]
   134fc:	cmp	r0, #1
   13500:	blt	13540 <__assert_fail@plt+0x1f04>
   13504:	movw	r0, #57932	; 0xe24c
   13508:	movt	r0, #2
   1350c:	ldr	r6, [r0]
   13510:	mov	r7, #0
   13514:	ldr	r0, [r6, #8]
   13518:	add	r7, r7, #1
   1351c:	cmp	r0, #0
   13520:	bne	13530 <__assert_fail@plt+0x1ef4>
   13524:	mov	r0, r6
   13528:	mov	r1, r7
   1352c:	bl	13fa0 <__assert_fail@plt+0x2964>
   13530:	add	r6, r6, #40	; 0x28
   13534:	ldr	r0, [r8]
   13538:	cmp	r7, r0
   1353c:	blt	13514 <__assert_fail@plt+0x1ed8>
   13540:	ldr	r0, [sl]
   13544:	add	r9, r9, #1
   13548:	cmp	r9, r0
   1354c:	blt	134f8 <__assert_fail@plt+0x1ebc>
   13550:	mov	r0, #1
   13554:	movw	r9, #57980	; 0xe27c
   13558:	movt	r9, #2
   1355c:	strb	r0, [r9]
   13560:	ldr	r0, [r8]
   13564:	cmp	r0, #1
   13568:	blt	135a8 <__assert_fail@plt+0x1f6c>
   1356c:	movw	r0, #57932	; 0xe24c
   13570:	movt	r0, #2
   13574:	ldr	r6, [r0]
   13578:	mov	r7, #0
   1357c:	ldr	r0, [r6, #8]
   13580:	add	r7, r7, #1
   13584:	cmp	r0, #0
   13588:	bne	13598 <__assert_fail@plt+0x1f5c>
   1358c:	mov	r0, r6
   13590:	mov	r1, r7
   13594:	bl	13fa0 <__assert_fail@plt+0x2964>
   13598:	add	r6, r6, #40	; 0x28
   1359c:	ldr	r0, [r8]
   135a0:	cmp	r7, r0
   135a4:	blt	1357c <__assert_fail@plt+0x1f40>
   135a8:	movw	r1, #57841	; 0xe1f1
   135ac:	movt	r1, #2
   135b0:	ldrb	r1, [r1]
   135b4:	cmp	r1, #0
   135b8:	mov	r3, #2
   135bc:	bne	135f0 <__assert_fail@plt+0x1fb4>
   135c0:	cmp	r0, #1
   135c4:	blt	135f0 <__assert_fail@plt+0x1fb4>
   135c8:	movw	r1, #57932	; 0xe24c
   135cc:	movt	r1, #2
   135d0:	ldr	r1, [r1]
   135d4:	add	r1, r1, #8
   135d8:	ldr	r2, [r1]
   135dc:	cmp	r2, #3
   135e0:	strne	r3, [r1]
   135e4:	add	r1, r1, #40	; 0x28
   135e8:	subs	r0, r0, #1
   135ec:	bne	135d8 <__assert_fail@plt+0x1f9c>
   135f0:	bl	14114 <__assert_fail@plt+0x2ad8>
   135f4:	mov	r0, #0
   135f8:	strb	r0, [r9]
   135fc:	movw	r0, #57936	; 0xe250
   13600:	movt	r0, #2
   13604:	ldr	r0, [r0]
   13608:	cmp	r0, #0
   1360c:	ble	13630 <__assert_fail@plt+0x1ff4>
   13610:	adds	r4, r4, #1
   13614:	adc	r5, r5, #0
   13618:	ldr	r0, [sp, #20]
   1361c:	subs	r0, r4, r0
   13620:	ldr	r0, [sp, #24]
   13624:	sbcs	r0, r5, r0
   13628:	bcc	134e8 <__assert_fail@plt+0x1eac>
   1362c:	b	13664 <__assert_fail@plt+0x2028>
   13630:	movw	r1, #53519	; 0xd10f
   13634:	movt	r1, #1
   13638:	mov	r0, #0
   1363c:	mov	r2, #5
   13640:	bl	113b4 <dcgettext@plt>
   13644:	mov	r2, r0
   13648:	ldr	r0, [sp, #20]
   1364c:	str	r0, [sp]
   13650:	ldr	r0, [sp, #24]
   13654:	stmib	sp, {r0, r4, r5}
   13658:	mov	r0, #0
   1365c:	mov	r1, #0
   13660:	bl	1145c <error@plt>
   13664:	movw	r0, #57936	; 0xe250
   13668:	movt	r0, #2
   1366c:	ldr	r1, [r0]
   13670:	mov	r0, #0
   13674:	cmp	r1, #0
   13678:	movwgt	r0, #1
   1367c:	sub	sp, fp, #28
   13680:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13684:	movw	r0, #57883	; 0xe21b
   13688:	movt	r0, #2
   1368c:	ldrb	ip, [r0]
   13690:	movw	r0, #57868	; 0xe20c
   13694:	movt	r0, #2
   13698:	ldr	r0, [r0]
   1369c:	mov	r2, #0
   136a0:	cmp	ip, #1
   136a4:	bne	13704 <__assert_fail@plt+0x20c8>
   136a8:	movw	r1, #57862	; 0xe206
   136ac:	movt	r1, #2
   136b0:	ldrb	r1, [r1]
   136b4:	cmp	r1, #1
   136b8:	bne	136f4 <__assert_fail@plt+0x20b8>
   136bc:	movw	r1, #57863	; 0xe207
   136c0:	movt	r1, #2
   136c4:	ldrb	r1, [r1]
   136c8:	cmp	r1, #1
   136cc:	bne	136f4 <__assert_fail@plt+0x20b8>
   136d0:	movw	r1, #57916	; 0xe23c
   136d4:	movt	r1, #2
   136d8:	ldr	r1, [r1]
   136dc:	add	r1, r1, r0
   136e0:	movw	r2, #57912	; 0xe238
   136e4:	movt	r2, #2
   136e8:	ldr	r2, [r2]
   136ec:	add	r2, r1, r2
   136f0:	b	13704 <__assert_fail@plt+0x20c8>
   136f4:	movw	r1, #57916	; 0xe23c
   136f8:	movt	r1, #2
   136fc:	ldr	r1, [r1]
   13700:	add	r2, r1, r0
   13704:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13708:	add	fp, sp, #28
   1370c:	sub	sp, sp, #8
   13710:	movw	r1, #57876	; 0xe214
   13714:	movt	r1, #2
   13718:	ldr	r6, [r1]
   1371c:	add	r1, r6, r0
   13720:	movw	lr, #57841	; 0xe1f1
   13724:	movt	lr, #2
   13728:	ldrb	r4, [lr]
   1372c:	movw	r0, #57932	; 0xe24c
   13730:	movt	r0, #2
   13734:	ldr	r0, [r0]
   13738:	movw	r5, #57712	; 0xe170
   1373c:	movt	r5, #2
   13740:	ldr	r7, [r5]
   13744:	mov	r3, #1
   13748:	cmp	r7, #2
   1374c:	blt	13838 <__assert_fail@plt+0x21fc>
   13750:	ldrb	r7, [lr]
   13754:	ldr	r3, [r5]
   13758:	str	r3, [sp, #4]
   1375c:	movw	r3, #57916	; 0xe23c
   13760:	movt	r3, #2
   13764:	ldr	lr, [r3]
   13768:	movw	r3, #57863	; 0xe207
   1376c:	movt	r3, #2
   13770:	ldrb	r9, [r3]
   13774:	movw	r3, #57862	; 0xe206
   13778:	movt	r3, #2
   1377c:	ldrb	r3, [r3]
   13780:	eor	r3, r3, #1
   13784:	str	r3, [sp]
   13788:	mov	r3, #1
   1378c:	movw	r5, #17904	; 0x45f0
   13790:	movt	r5, #1
   13794:	movw	sl, #17744	; 0x4550
   13798:	movt	sl, #1
   1379c:	ands	r4, r4, #1
   137a0:	movw	r4, #17332	; 0x43b4
   137a4:	movt	r4, #1
   137a8:	movne	r4, r5
   137ac:	movw	r8, #17228	; 0x434c
   137b0:	movt	r8, #1
   137b4:	movne	r8, sl
   137b8:	str	r4, [r0, #12]
   137bc:	str	r8, [r0, #16]
   137c0:	mov	r4, #0
   137c4:	cmp	r9, #0
   137c8:	beq	137f8 <__assert_fail@plt+0x21bc>
   137cc:	sub	r4, r3, #1
   137d0:	clz	r4, r4
   137d4:	lsr	r4, r4, #5
   137d8:	mov	r8, r7
   137dc:	mov	r7, r6
   137e0:	mov	r6, r5
   137e4:	ldr	r5, [sp]
   137e8:	orr	r4, r4, r5
   137ec:	mov	r5, r6
   137f0:	mov	r6, r7
   137f4:	mov	r7, r8
   137f8:	str	r1, [r0, #32]
   137fc:	and	r1, r4, #1
   13800:	strb	r1, [r0, #36]	; 0x24
   13804:	add	r4, r2, r6
   13808:	cmp	ip, #0
   1380c:	mov	r1, ip
   13810:	movne	r1, r4
   13814:	mov	r2, ip
   13818:	addne	r2, lr, r4
   1381c:	add	r3, r3, #1
   13820:	add	r0, r0, #40	; 0x28
   13824:	ldr	r4, [sp, #4]
   13828:	cmp	r3, r4
   1382c:	mov	r4, r7
   13830:	blt	1379c <__assert_fail@plt+0x2160>
   13834:	mov	r4, r7
   13838:	cmp	r4, #0
   1383c:	bne	13868 <__assert_fail@plt+0x222c>
   13840:	movw	r2, #57842	; 0xe1f2
   13844:	movt	r2, #2
   13848:	ldrb	r2, [r2]
   1384c:	cmp	r2, #0
   13850:	beq	13868 <__assert_fail@plt+0x222c>
   13854:	movw	r2, #17332	; 0x43b4
   13858:	movt	r2, #1
   1385c:	movw	r7, #17228	; 0x434c
   13860:	movt	r7, #1
   13864:	b	13878 <__assert_fail@plt+0x223c>
   13868:	movw	r2, #17904	; 0x45f0
   1386c:	movt	r2, #1
   13870:	movw	r7, #17744	; 0x4550
   13874:	movt	r7, #1
   13878:	str	r2, [r0, #12]
   1387c:	str	r7, [r0, #16]
   13880:	movw	r2, #57863	; 0xe207
   13884:	movt	r2, #2
   13888:	ldrb	r7, [r2]
   1388c:	mov	r2, #0
   13890:	cmp	r7, #1
   13894:	sub	sp, fp, #28
   13898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1389c:	bne	138c4 <__assert_fail@plt+0x2288>
   138a0:	sub	r2, r3, #1
   138a4:	clz	r2, r2
   138a8:	lsr	r2, r2, #5
   138ac:	movw	r3, #57862	; 0xe206
   138b0:	movt	r3, #2
   138b4:	ldrb	r3, [r3]
   138b8:	mvn	r3, r3
   138bc:	orr	r2, r2, r3
   138c0:	and	r2, r2, #1
   138c4:	str	r1, [r0, #32]
   138c8:	strb	r2, [r0, #36]	; 0x24
   138cc:	bx	lr
   138d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138d4:	add	fp, sp, #28
   138d8:	sub	sp, sp, #4
   138dc:	bl	1514c <__assert_fail@plt+0x3b10>
   138e0:	bl	15250 <__assert_fail@plt+0x3c14>
   138e4:	cmp	r0, #0
   138e8:	moveq	r0, #0
   138ec:	subeq	sp, fp, #28
   138f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138f4:	movw	r0, #57880	; 0xe218
   138f8:	movt	r0, #2
   138fc:	ldrb	r0, [r0]
   13900:	cmp	r0, #0
   13904:	movweq	r0, #57989	; 0xe285
   13908:	movteq	r0, #2
   1390c:	moveq	r1, #1
   13910:	strbeq	r1, [r0]
   13914:	movw	r0, #57988	; 0xe284
   13918:	movt	r0, #2
   1391c:	mov	r5, #0
   13920:	strb	r5, [r0]
   13924:	movw	r0, #57844	; 0xe1f4
   13928:	movt	r0, #2
   1392c:	ldrb	r0, [r0]
   13930:	movw	r1, #57908	; 0xe234
   13934:	movt	r1, #2
   13938:	ldr	r1, [r1]
   1393c:	lsl	r4, r1, r0
   13940:	cmp	r4, #1
   13944:	blt	13ba8 <__assert_fail@plt+0x256c>
   13948:	mov	r6, #0
   1394c:	movw	r8, #58004	; 0xe294
   13950:	movt	r8, #2
   13954:	movw	sl, #57712	; 0xe170
   13958:	movt	sl, #2
   1395c:	movw	r7, #57873	; 0xe211
   13960:	movt	r7, #2
   13964:	mov	r5, #0
   13968:	bl	15250 <__assert_fail@plt+0x3c14>
   1396c:	cmp	r0, #0
   13970:	beq	13bfc <__assert_fail@plt+0x25c0>
   13974:	movw	r0, #57996	; 0xe28c
   13978:	movt	r0, #2
   1397c:	str	r6, [r0]
   13980:	movw	r0, #58000	; 0xe290
   13984:	movt	r0, #2
   13988:	str	r6, [r0]
   1398c:	str	r6, [r8]
   13990:	movw	r0, #57988	; 0xe284
   13994:	movt	r0, #2
   13998:	strb	r6, [r0]
   1399c:	movw	r0, #58014	; 0xe29e
   139a0:	movt	r0, #2
   139a4:	strb	r6, [r0]
   139a8:	movw	r0, #58015	; 0xe29f
   139ac:	movt	r0, #2
   139b0:	mov	r1, #1
   139b4:	strb	r1, [r0]
   139b8:	ldr	r0, [sl]
   139bc:	cmp	r0, #1
   139c0:	blt	13b5c <__assert_fail@plt+0x2520>
   139c4:	str	r4, [sp]
   139c8:	movw	r0, #57932	; 0xe24c
   139cc:	movt	r0, #2
   139d0:	ldr	r4, [r0]
   139d4:	mov	r9, #0
   139d8:	movw	r0, #58008	; 0xe298
   139dc:	movt	r0, #2
   139e0:	str	r6, [r0]
   139e4:	ldr	r0, [r4, #28]
   139e8:	cmp	r0, #0
   139ec:	bgt	139fc <__assert_fail@plt+0x23c0>
   139f0:	ldr	r0, [r4, #8]
   139f4:	cmp	r0, #1
   139f8:	bne	13ac4 <__assert_fail@plt+0x2488>
   139fc:	movw	r0, #58012	; 0xe29c
   13a00:	movt	r0, #2
   13a04:	strb	r6, [r0]
   13a08:	ldr	r0, [r4, #32]
   13a0c:	movw	r1, #57992	; 0xe288
   13a10:	movt	r1, #2
   13a14:	str	r0, [r1]
   13a18:	ldr	r1, [r4, #12]
   13a1c:	mov	r0, r4
   13a20:	blx	r1
   13a24:	cmp	r0, #0
   13a28:	moveq	r0, r4
   13a2c:	bleq	152e0 <__assert_fail@plt+0x3ca4>
   13a30:	movw	r0, #57988	; 0xe284
   13a34:	movt	r0, #2
   13a38:	ldrb	r0, [r0]
   13a3c:	ldr	r1, [r4, #28]
   13a40:	sub	r2, r1, #1
   13a44:	str	r2, [r4, #28]
   13a48:	and	r2, r5, #1
   13a4c:	orrs	r5, r0, r2
   13a50:	movwne	r5, #1
   13a54:	cmp	r1, #1
   13a58:	bgt	13a68 <__assert_fail@plt+0x242c>
   13a5c:	bl	15250 <__assert_fail@plt+0x3c14>
   13a60:	cmp	r0, #0
   13a64:	beq	13b30 <__assert_fail@plt+0x24f4>
   13a68:	movw	r0, #57862	; 0xe206
   13a6c:	movt	r0, #2
   13a70:	ldrb	r0, [r0]
   13a74:	cmp	r0, #1
   13a78:	bne	13b08 <__assert_fail@plt+0x24cc>
   13a7c:	ldr	r0, [r4, #8]
   13a80:	cmp	r0, #0
   13a84:	beq	13b08 <__assert_fail@plt+0x24cc>
   13a88:	movw	r1, #58015	; 0xe29f
   13a8c:	movt	r1, #2
   13a90:	ldrb	r1, [r1]
   13a94:	cmp	r1, #1
   13a98:	beq	13aec <__assert_fail@plt+0x24b0>
   13a9c:	cmp	r0, #3
   13aa0:	beq	13b00 <__assert_fail@plt+0x24c4>
   13aa4:	cmp	r0, #2
   13aa8:	bne	13b08 <__assert_fail@plt+0x24cc>
   13aac:	movw	r0, #58012	; 0xe29c
   13ab0:	movt	r0, #2
   13ab4:	ldrb	r0, [r0]
   13ab8:	cmp	r0, #1
   13abc:	beq	13b00 <__assert_fail@plt+0x24c4>
   13ac0:	b	13b08 <__assert_fail@plt+0x24cc>
   13ac4:	movw	r0, #57862	; 0xe206
   13ac8:	movt	r0, #2
   13acc:	ldrb	r0, [r0]
   13ad0:	cmp	r0, #1
   13ad4:	bne	13b08 <__assert_fail@plt+0x24cc>
   13ad8:	movw	r0, #58015	; 0xe29f
   13adc:	movt	r0, #2
   13ae0:	ldrb	r0, [r0]
   13ae4:	cmp	r0, #1
   13ae8:	bne	13b00 <__assert_fail@plt+0x24c4>
   13aec:	movw	r0, #58014	; 0xe29e
   13af0:	movt	r0, #2
   13af4:	mov	r1, #1
   13af8:	strb	r1, [r0]
   13afc:	b	13b08 <__assert_fail@plt+0x24cc>
   13b00:	mov	r0, r4
   13b04:	bl	14f18 <__assert_fail@plt+0x38dc>
   13b08:	ldrb	r0, [r7]
   13b0c:	cmp	r0, #1
   13b10:	ldreq	r0, [r8]
   13b14:	addeq	r0, r0, #1
   13b18:	streq	r0, [r8]
   13b1c:	add	r9, r9, #1
   13b20:	add	r4, r4, #40	; 0x28
   13b24:	ldr	r0, [sl]
   13b28:	cmp	r9, r0
   13b2c:	blt	139d8 <__assert_fail@plt+0x239c>
   13b30:	movw	r0, #57988	; 0xe284
   13b34:	movt	r0, #2
   13b38:	ldrb	r0, [r0]
   13b3c:	cmp	r0, #0
   13b40:	beq	13b58 <__assert_fail@plt+0x251c>
   13b44:	mov	r0, #10
   13b48:	bl	11630 <putchar_unlocked@plt>
   13b4c:	ldr	r4, [sp]
   13b50:	sub	r4, r4, #1
   13b54:	b	13b5c <__assert_fail@plt+0x2520>
   13b58:	ldr	r4, [sp]
   13b5c:	bl	15250 <__assert_fail@plt+0x3c14>
   13b60:	cmp	r0, #0
   13b64:	bne	13b7c <__assert_fail@plt+0x2540>
   13b68:	movw	r0, #57880	; 0xe218
   13b6c:	movt	r0, #2
   13b70:	ldrb	r0, [r0]
   13b74:	cmp	r0, #0
   13b78:	bne	13ba8 <__assert_fail@plt+0x256c>
   13b7c:	movw	r0, #57844	; 0xe1f4
   13b80:	movt	r0, #2
   13b84:	ldrb	r0, [r0]
   13b88:	and	r0, r5, r0
   13b8c:	tst	r0, #1
   13b90:	beq	13ba0 <__assert_fail@plt+0x2564>
   13b94:	mov	r0, #10
   13b98:	bl	11630 <putchar_unlocked@plt>
   13b9c:	sub	r4, r4, #1
   13ba0:	cmp	r4, #0
   13ba4:	bgt	13968 <__assert_fail@plt+0x232c>
   13ba8:	cmp	r4, #0
   13bac:	bne	13bfc <__assert_fail@plt+0x25c0>
   13bb0:	movw	r0, #57712	; 0xe170
   13bb4:	movt	r0, #2
   13bb8:	ldr	r1, [r0]
   13bbc:	cmp	r1, #1
   13bc0:	blt	13bfc <__assert_fail@plt+0x25c0>
   13bc4:	ldr	r0, [r0]
   13bc8:	movw	r1, #57932	; 0xe24c
   13bcc:	movt	r1, #2
   13bd0:	ldr	r1, [r1]
   13bd4:	add	r1, r1, #37	; 0x25
   13bd8:	mov	r2, #0
   13bdc:	mov	r3, #1
   13be0:	ldr	r7, [r1, #-29]	; 0xffffffe3
   13be4:	cmp	r7, #0
   13be8:	strbeq	r3, [r1]
   13bec:	add	r2, r2, #1
   13bf0:	add	r1, r1, #40	; 0x28
   13bf4:	cmp	r2, r0
   13bf8:	blt	13be0 <__assert_fail@plt+0x25a4>
   13bfc:	ands	r0, r5, #1
   13c00:	movw	r1, #57988	; 0xe284
   13c04:	movt	r1, #2
   13c08:	strb	r0, [r1]
   13c0c:	beq	13c24 <__assert_fail@plt+0x25e8>
   13c10:	movw	r0, #57880	; 0xe218
   13c14:	movt	r0, #2
   13c18:	ldrb	r0, [r0]
   13c1c:	cmp	r0, #0
   13c20:	beq	13c60 <__assert_fail@plt+0x2624>
   13c24:	movw	r0, #57881	; 0xe219
   13c28:	movt	r0, #2
   13c2c:	ldrb	r0, [r0]
   13c30:	cmp	r0, #1
   13c34:	bne	13c68 <__assert_fail@plt+0x262c>
   13c38:	movw	r4, #58013	; 0xe29d
   13c3c:	movt	r4, #2
   13c40:	ldrb	r0, [r4]
   13c44:	cmp	r0, #1
   13c48:	bne	13c68 <__assert_fail@plt+0x262c>
   13c4c:	mov	r0, #12
   13c50:	bl	11630 <putchar_unlocked@plt>
   13c54:	mov	r0, #0
   13c58:	strb	r0, [r4]
   13c5c:	b	13c68 <__assert_fail@plt+0x262c>
   13c60:	add	r0, r4, #5
   13c64:	bl	15360 <__assert_fail@plt+0x3d24>
   13c68:	movw	r0, #57896	; 0xe228
   13c6c:	movt	r0, #2
   13c70:	ldrd	r2, [r0]
   13c74:	adds	r2, r2, #1
   13c78:	adc	r3, r3, #0
   13c7c:	strd	r2, [r0]
   13c80:	movw	r0, #57704	; 0xe168
   13c84:	movt	r0, #2
   13c88:	ldrd	r4, [r0]
   13c8c:	mov	r0, #0
   13c90:	subs	r1, r4, r2
   13c94:	sbcs	r1, r5, r3
   13c98:	bcc	13ca4 <__assert_fail@plt+0x2668>
   13c9c:	bl	14114 <__assert_fail@plt+0x2ad8>
   13ca0:	mov	r0, #1
   13ca4:	sub	sp, fp, #28
   13ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cac:	push	{r4, r5, r6, sl, fp, lr}
   13cb0:	add	fp, sp, #16
   13cb4:	mov	r5, r1
   13cb8:	mov	r4, r0
   13cbc:	movw	r1, #55937	; 0xda81
   13cc0:	movt	r1, #1
   13cc4:	bl	11318 <strcmp@plt>
   13cc8:	cmp	r0, #0
   13ccc:	beq	13cec <__assert_fail@plt+0x26b0>
   13cd0:	str	r4, [r5, #4]
   13cd4:	movw	r1, #48876	; 0xbeec
   13cd8:	movt	r1, #1
   13cdc:	mov	r0, r4
   13ce0:	bl	15844 <__assert_fail@plt+0x4208>
   13ce4:	str	r0, [r5]
   13ce8:	b	13d24 <__assert_fail@plt+0x26e8>
   13cec:	movw	r1, #49214	; 0xc03e
   13cf0:	movt	r1, #1
   13cf4:	mov	r0, #0
   13cf8:	mov	r2, #5
   13cfc:	bl	113b4 <dcgettext@plt>
   13d00:	str	r0, [r5, #4]
   13d04:	movw	r0, #57816	; 0xe1d8
   13d08:	movt	r0, #2
   13d0c:	ldr	r0, [r0]
   13d10:	str	r0, [r5]
   13d14:	movw	r0, #57889	; 0xe221
   13d18:	movt	r0, #2
   13d1c:	mov	r1, #1
   13d20:	strb	r1, [r0]
   13d24:	ldr	r0, [r5]
   13d28:	cmp	r0, #0
   13d2c:	beq	13d64 <__assert_fail@plt+0x2728>
   13d30:	mov	r1, #2
   13d34:	bl	15700 <__assert_fail@plt+0x40c4>
   13d38:	mov	r0, #0
   13d3c:	strb	r0, [r5, #37]	; 0x25
   13d40:	str	r0, [r5, #8]
   13d44:	movw	r0, #57928	; 0xe248
   13d48:	movt	r0, #2
   13d4c:	ldr	r1, [r0]
   13d50:	add	r1, r1, #1
   13d54:	str	r1, [r0]
   13d58:	mov	r5, #1
   13d5c:	mov	r0, r5
   13d60:	pop	{r4, r5, r6, sl, fp, pc}
   13d64:	movw	r0, #57890	; 0xe222
   13d68:	movt	r0, #2
   13d6c:	mov	r1, #1
   13d70:	strb	r1, [r0]
   13d74:	movw	r0, #57872	; 0xe210
   13d78:	movt	r0, #2
   13d7c:	ldrb	r0, [r0]
   13d80:	mov	r5, #0
   13d84:	cmp	r0, #0
   13d88:	beq	13d94 <__assert_fail@plt+0x2758>
   13d8c:	mov	r0, r5
   13d90:	pop	{r4, r5, r6, sl, fp, pc}
   13d94:	bl	1151c <__errno_location@plt>
   13d98:	ldr	r6, [r0]
   13d9c:	mov	r5, #0
   13da0:	mov	r0, #0
   13da4:	mov	r1, #3
   13da8:	mov	r2, r4
   13dac:	bl	18e68 <__assert_fail@plt+0x782c>
   13db0:	mov	r3, r0
   13db4:	movw	r2, #54647	; 0xd577
   13db8:	movt	r2, #1
   13dbc:	mov	r0, #0
   13dc0:	mov	r1, r6
   13dc4:	bl	1145c <error@plt>
   13dc8:	mov	r0, r5
   13dcc:	pop	{r4, r5, r6, sl, fp, pc}
   13dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dd4:	add	fp, sp, #28
   13dd8:	sub	sp, sp, #196	; 0xc4
   13ddc:	mov	r5, r1
   13de0:	mov	r4, r0
   13de4:	movw	r1, #55937	; 0xda81
   13de8:	movt	r1, #1
   13dec:	bl	11318 <strcmp@plt>
   13df0:	cmp	r0, #0
   13df4:	mvneq	r5, #0
   13df8:	cmp	r5, #0
   13dfc:	blt	13e14 <__assert_fail@plt+0x27d8>
   13e00:	add	r1, sp, #88	; 0x58
   13e04:	mov	r0, r5
   13e08:	bl	1be1c <__assert_fail@plt+0xa7e0>
   13e0c:	cmp	r0, #0
   13e10:	beq	13e3c <__assert_fail@plt+0x2800>
   13e14:	movw	r6, #57944	; 0xe258
   13e18:	movt	r6, #2
   13e1c:	ldr	r0, [r6]
   13e20:	cmp	r0, #0
   13e24:	bne	13e34 <__assert_fail@plt+0x27f8>
   13e28:	movw	r0, #57944	; 0xe258
   13e2c:	movt	r0, #2
   13e30:	bl	159c4 <__assert_fail@plt+0x4388>
   13e34:	ldrd	r0, [r6]
   13e38:	b	13e50 <__assert_fail@plt+0x2814>
   13e3c:	add	r0, sp, #32
   13e40:	add	r1, sp, #88	; 0x58
   13e44:	bl	1949c <__assert_fail@plt+0x7e60>
   13e48:	ldr	r0, [sp, #32]
   13e4c:	ldr	r1, [sp, #36]	; 0x24
   13e50:	str	r1, [sp, #84]	; 0x54
   13e54:	str	r0, [sp, #80]	; 0x50
   13e58:	movw	sl, #57884	; 0xe21c
   13e5c:	movt	sl, #2
   13e60:	ldr	r0, [sl]
   13e64:	ldr	r9, [sp, #84]	; 0x54
   13e68:	add	r1, sp, #80	; 0x50
   13e6c:	add	r2, sp, #32
   13e70:	bl	19588 <__assert_fail@plt+0x7f4c>
   13e74:	cmp	r0, #0
   13e78:	beq	13edc <__assert_fail@plt+0x28a0>
   13e7c:	movw	r0, #57848	; 0xe1f8
   13e80:	movt	r0, #2
   13e84:	ldr	r2, [r0]
   13e88:	ldr	r0, [sl]
   13e8c:	stm	sp, {r0, r9}
   13e90:	add	r8, sp, #32
   13e94:	mov	r0, #0
   13e98:	mvn	r1, #0
   13e9c:	mov	r3, r8
   13ea0:	bl	15ec0 <__assert_fail@plt+0x4884>
   13ea4:	add	r7, r0, #1
   13ea8:	mov	r0, r7
   13eac:	bl	19e1c <__assert_fail@plt+0x87e0>
   13eb0:	mov	r6, r0
   13eb4:	movw	r0, #57848	; 0xe1f8
   13eb8:	movt	r0, #2
   13ebc:	ldr	r2, [r0]
   13ec0:	ldr	r0, [sl]
   13ec4:	stm	sp, {r0, r9}
   13ec8:	mov	r0, r6
   13ecc:	mov	r1, r7
   13ed0:	mov	r3, r8
   13ed4:	bl	15ec0 <__assert_fail@plt+0x4884>
   13ed8:	b	13f10 <__assert_fail@plt+0x28d4>
   13edc:	mov	r0, #33	; 0x21
   13ee0:	bl	19e1c <__assert_fail@plt+0x87e0>
   13ee4:	mov	r6, r0
   13ee8:	ldr	r0, [sp, #80]	; 0x50
   13eec:	add	r1, sp, #11
   13ef0:	bl	13f94 <__assert_fail@plt+0x2958>
   13ef4:	stm	sp, {r0, r9}
   13ef8:	movw	r3, #53511	; 0xd107
   13efc:	movt	r3, #1
   13f00:	mov	r0, r6
   13f04:	mov	r1, #1
   13f08:	mov	r2, #33	; 0x21
   13f0c:	bl	11528 <__sprintf_chk@plt>
   13f10:	movw	r7, #57952	; 0xe260
   13f14:	movt	r7, #2
   13f18:	ldr	r0, [r7]
   13f1c:	bl	158f8 <__assert_fail@plt+0x42bc>
   13f20:	str	r6, [r7]
   13f24:	movw	r0, #53508	; 0xd104
   13f28:	movt	r0, #1
   13f2c:	cmp	r5, #0
   13f30:	movlt	r4, r0
   13f34:	movw	r0, #57856	; 0xe200
   13f38:	movt	r0, #2
   13f3c:	ldr	r0, [r0]
   13f40:	cmp	r0, #0
   13f44:	movne	r4, r0
   13f48:	movw	r5, #57956	; 0xe264
   13f4c:	movt	r5, #2
   13f50:	str	r4, [r5]
   13f54:	movw	r0, #57700	; 0xe164
   13f58:	movt	r0, #2
   13f5c:	ldr	r4, [r0]
   13f60:	mov	r0, r6
   13f64:	mov	r1, #0
   13f68:	bl	15b04 <__assert_fail@plt+0x44c8>
   13f6c:	sub	r4, r4, r0
   13f70:	ldr	r0, [r5]
   13f74:	mov	r1, #0
   13f78:	bl	15b04 <__assert_fail@plt+0x44c8>
   13f7c:	sub	r0, r4, r0
   13f80:	movw	r1, #57960	; 0xe268
   13f84:	movt	r1, #2
   13f88:	str	r0, [r1]
   13f8c:	sub	sp, fp, #28
   13f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f94:	mov	r2, r1
   13f98:	asr	r1, r0, #31
   13f9c:	b	15a44 <__assert_fail@plt+0x4408>
   13fa0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13fa4:	add	fp, sp, #24
   13fa8:	mov	r8, r1
   13fac:	mov	r5, r0
   13fb0:	ldr	r7, [r0]
   13fb4:	mov	r0, r7
   13fb8:	bl	113a8 <getc_unlocked@plt>
   13fbc:	mov	r6, r0
   13fc0:	cmp	r0, #12
   13fc4:	bne	13ffc <__assert_fail@plt+0x29c0>
   13fc8:	ldrb	r0, [r5, #37]	; 0x25
   13fcc:	cmp	r0, #0
   13fd0:	beq	13ff8 <__assert_fail@plt+0x29bc>
   13fd4:	mov	r0, r7
   13fd8:	bl	113a8 <getc_unlocked@plt>
   13fdc:	mov	r6, r0
   13fe0:	cmp	r0, #10
   13fe4:	bne	13ffc <__assert_fail@plt+0x29c0>
   13fe8:	mov	r0, r7
   13fec:	bl	113a8 <getc_unlocked@plt>
   13ff0:	mov	r6, r0
   13ff4:	b	13ffc <__assert_fail@plt+0x29c0>
   13ff8:	mov	r6, #12
   13ffc:	movw	r4, #57980	; 0xe27c
   14000:	movt	r4, #2
   14004:	ldrb	r0, [r4]
   14008:	strb	r0, [r5, #37]	; 0x25
   1400c:	mov	r0, r6
   14010:	cmn	r0, #1
   14014:	bne	1402c <__assert_fail@plt+0x29f0>
   14018:	b	14068 <__assert_fail@plt+0x2a2c>
   1401c:	mov	r0, r7
   14020:	bl	113a8 <getc_unlocked@plt>
   14024:	cmn	r0, #1
   14028:	beq	14068 <__assert_fail@plt+0x2a2c>
   1402c:	cmp	r0, #10
   14030:	beq	140c8 <__assert_fail@plt+0x2a8c>
   14034:	cmp	r0, #12
   14038:	bne	1401c <__assert_fail@plt+0x29e0>
   1403c:	ldrb	r0, [r4]
   14040:	cmp	r0, #1
   14044:	bne	140a8 <__assert_fail@plt+0x2a6c>
   14048:	movw	r0, #57862	; 0xe206
   1404c:	movt	r0, #2
   14050:	ldrb	r0, [r0]
   14054:	cmp	r0, #0
   14058:	beq	14074 <__assert_fail@plt+0x2a38>
   1405c:	mov	r0, #0
   14060:	strb	r0, [r5, #37]	; 0x25
   14064:	b	140a8 <__assert_fail@plt+0x2a6c>
   14068:	mov	r0, r5
   1406c:	bl	14228 <__assert_fail@plt+0x2bec>
   14070:	b	140c8 <__assert_fail@plt+0x2a8c>
   14074:	movw	r0, #57712	; 0xe170
   14078:	movt	r0, #2
   1407c:	ldr	r0, [r0]
   14080:	cmp	r0, #0
   14084:	beq	140a8 <__assert_fail@plt+0x2a6c>
   14088:	movw	r1, #57932	; 0xe24c
   1408c:	movt	r1, #2
   14090:	ldr	r1, [r1]
   14094:	add	r1, r1, #37	; 0x25
   14098:	mov	r2, #0
   1409c:	strb	r2, [r1], #40	; 0x28
   140a0:	subs	r0, r0, #1
   140a4:	bne	1409c <__assert_fail@plt+0x2a60>
   140a8:	mov	r0, r7
   140ac:	bl	113a8 <getc_unlocked@plt>
   140b0:	cmp	r0, #10
   140b4:	beq	140c0 <__assert_fail@plt+0x2a84>
   140b8:	mov	r1, r7
   140bc:	bl	11510 <ungetc@plt>
   140c0:	mov	r0, r5
   140c4:	bl	141a0 <__assert_fail@plt+0x2b64>
   140c8:	movw	r0, #57864	; 0xe208
   140cc:	movt	r0, #2
   140d0:	ldrb	r0, [r0]
   140d4:	cmp	r0, #0
   140d8:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   140dc:	subs	r0, r8, #1
   140e0:	movwne	r0, #1
   140e4:	cmp	r6, #12
   140e8:	beq	14110 <__assert_fail@plt+0x2ad4>
   140ec:	movw	r1, #57862	; 0xe206
   140f0:	movt	r1, #2
   140f4:	ldrb	r1, [r1]
   140f8:	ands	r0, r0, r1
   140fc:	movweq	r0, #57716	; 0xe174
   14100:	movteq	r0, #2
   14104:	ldreq	r1, [r0]
   14108:	addeq	r1, r1, #1
   1410c:	streq	r1, [r0]
   14110:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14114:	push	{fp, lr}
   14118:	mov	fp, sp
   1411c:	movw	r0, #57932	; 0xe24c
   14120:	movt	r0, #2
   14124:	ldr	ip, [r0]
   14128:	movw	r0, #57712	; 0xe170
   1412c:	movt	r0, #2
   14130:	ldr	r1, [r0]
   14134:	cmp	r1, #0
   14138:	beq	14170 <__assert_fail@plt+0x2b34>
   1413c:	add	r2, ip, #8
   14140:	mov	lr, #0
   14144:	movw	r0, #57936	; 0xe250
   14148:	movt	r0, #2
   1414c:	ldr	r3, [r2]
   14150:	cmp	r3, #2
   14154:	streq	lr, [r2]
   14158:	ldreq	r3, [r0]
   1415c:	addeq	r3, r3, #1
   14160:	streq	r3, [r0]
   14164:	add	r2, r2, #40	; 0x28
   14168:	subs	r1, r1, #1
   1416c:	bne	1414c <__assert_fail@plt+0x2b10>
   14170:	movw	r0, #57841	; 0xe1f1
   14174:	movt	r0, #2
   14178:	ldrb	r0, [r0]
   1417c:	cmp	r0, #0
   14180:	popne	{fp, pc}
   14184:	ldr	r0, [ip, #8]
   14188:	subs	r0, r0, #3
   1418c:	movwne	r0, #1
   14190:	movw	r1, #57936	; 0xe250
   14194:	movt	r1, #2
   14198:	str	r0, [r1]
   1419c:	pop	{fp, pc}
   141a0:	movw	r1, #57862	; 0xe206
   141a4:	movt	r1, #2
   141a8:	ldrb	r1, [r1]
   141ac:	cmp	r1, #0
   141b0:	beq	141c0 <__assert_fail@plt+0x2b84>
   141b4:	mov	r1, #2
   141b8:	str	r1, [r0, #8]
   141bc:	b	14208 <__assert_fail@plt+0x2bcc>
   141c0:	movw	r1, #57712	; 0xe170
   141c4:	movt	r1, #2
   141c8:	ldr	r1, [r1]
   141cc:	cmp	r1, #0
   141d0:	beq	14208 <__assert_fail@plt+0x2bcc>
   141d4:	movw	r2, #57841	; 0xe1f1
   141d8:	movt	r2, #2
   141dc:	ldrb	r3, [r2]
   141e0:	mov	r2, #1
   141e4:	cmp	r3, #0
   141e8:	movwne	r2, #2
   141ec:	movw	r3, #57932	; 0xe24c
   141f0:	movt	r3, #2
   141f4:	ldr	r3, [r3]
   141f8:	add	r3, r3, #8
   141fc:	str	r2, [r3], #40	; 0x28
   14200:	subs	r1, r1, #1
   14204:	bne	141fc <__assert_fail@plt+0x2bc0>
   14208:	mov	r1, #0
   1420c:	str	r1, [r0, #28]
   14210:	movw	r0, #57936	; 0xe250
   14214:	movt	r0, #2
   14218:	ldr	r1, [r0]
   1421c:	sub	r1, r1, #1
   14220:	str	r1, [r0]
   14224:	bx	lr
   14228:	push	{r4, r5, r6, sl, fp, lr}
   1422c:	add	fp, sp, #16
   14230:	mov	r4, r0
   14234:	ldr	r0, [r0, #8]
   14238:	cmp	r0, #3
   1423c:	popeq	{r4, r5, r6, sl, fp, pc}
   14240:	bl	1151c <__errno_location@plt>
   14244:	mov	r6, r0
   14248:	ldr	r5, [r0]
   1424c:	ldr	r0, [r4]
   14250:	bl	11444 <ferror_unlocked@plt>
   14254:	cmp	r0, #0
   14258:	moveq	r5, r0
   1425c:	ldr	r0, [r4]
   14260:	bl	11558 <fileno@plt>
   14264:	mov	r1, r0
   14268:	ldr	r0, [r4]
   1426c:	cmp	r1, #0
   14270:	beq	14318 <__assert_fail@plt+0x2cdc>
   14274:	bl	1573c <__assert_fail@plt+0x4100>
   14278:	cmp	r5, #0
   1427c:	bne	14288 <__assert_fail@plt+0x2c4c>
   14280:	cmp	r0, #0
   14284:	ldrne	r5, [r6]
   14288:	cmp	r5, #0
   1428c:	bne	14324 <__assert_fail@plt+0x2ce8>
   14290:	movw	r0, #57862	; 0xe206
   14294:	movt	r0, #2
   14298:	ldrb	r0, [r0]
   1429c:	cmp	r0, #0
   142a0:	beq	142b8 <__assert_fail@plt+0x2c7c>
   142a4:	mov	r0, #0
   142a8:	str	r0, [r4, #28]
   142ac:	mov	r0, #3
   142b0:	str	r0, [r4, #8]
   142b4:	b	14300 <__assert_fail@plt+0x2cc4>
   142b8:	movw	r0, #57712	; 0xe170
   142bc:	movt	r0, #2
   142c0:	ldr	r0, [r0]
   142c4:	cmp	r0, #0
   142c8:	beq	14300 <__assert_fail@plt+0x2cc4>
   142cc:	movw	r1, #57932	; 0xe24c
   142d0:	movt	r1, #2
   142d4:	ldr	r1, [r1]
   142d8:	add	r1, r1, #24
   142dc:	mov	r2, #3
   142e0:	mov	r3, #0
   142e4:	str	r2, [r1, #-16]
   142e8:	ldr	r6, [r1]
   142ec:	cmp	r6, #0
   142f0:	streq	r3, [r1, #4]
   142f4:	add	r1, r1, #40	; 0x28
   142f8:	subs	r0, r0, #1
   142fc:	bne	142e4 <__assert_fail@plt+0x2ca8>
   14300:	movw	r0, #57936	; 0xe250
   14304:	movt	r0, #2
   14308:	ldr	r1, [r0]
   1430c:	sub	r1, r1, #1
   14310:	str	r1, [r0]
   14314:	pop	{r4, r5, r6, sl, fp, pc}
   14318:	bl	115dc <clearerr_unlocked@plt>
   1431c:	cmp	r5, #0
   14320:	beq	14290 <__assert_fail@plt+0x2c54>
   14324:	ldr	r2, [r4, #4]
   14328:	mov	r0, #0
   1432c:	mov	r1, #3
   14330:	bl	18e68 <__assert_fail@plt+0x782c>
   14334:	mov	r3, r0
   14338:	movw	r2, #54647	; 0xd577
   1433c:	movt	r2, #1
   14340:	mov	r0, #1
   14344:	mov	r1, r5
   14348:	bl	1145c <error@plt>
   1434c:	push	{r4, r5, r6, sl, fp, lr}
   14350:	add	fp, sp, #16
   14354:	mov	r4, r0
   14358:	movw	r0, #57976	; 0xe278
   1435c:	movt	r0, #2
   14360:	ldr	r0, [r0]
   14364:	movw	r5, #57984	; 0xe280
   14368:	movt	r5, #2
   1436c:	ldr	r1, [r5]
   14370:	cmp	r1, r0
   14374:	bcc	14394 <__assert_fail@plt+0x2d58>
   14378:	movw	r6, #57972	; 0xe274
   1437c:	movt	r6, #2
   14380:	ldr	r0, [r6]
   14384:	movw	r1, #57976	; 0xe278
   14388:	movt	r1, #2
   1438c:	bl	19ee4 <__assert_fail@plt+0x88a8>
   14390:	str	r0, [r6]
   14394:	ldr	r0, [r5]
   14398:	add	r1, r0, #1
   1439c:	str	r1, [r5]
   143a0:	movw	r1, #57972	; 0xe274
   143a4:	movt	r1, #2
   143a8:	ldr	r1, [r1]
   143ac:	strb	r4, [r1, r0]
   143b0:	pop	{r4, r5, r6, sl, fp, pc}
   143b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143b8:	add	fp, sp, #28
   143bc:	sub	sp, sp, #4
   143c0:	mov	r4, r0
   143c4:	ldr	r5, [r0, #20]
   143c8:	add	r0, r5, #1
   143cc:	str	r0, [r4, #20]
   143d0:	movw	r1, #57964	; 0xe26c
   143d4:	movt	r1, #2
   143d8:	ldr	r1, [r1]
   143dc:	ldr	sl, [r1, r0, lsl #2]
   143e0:	ldr	r7, [r1, r5, lsl #2]
   143e4:	movw	r9, #57988	; 0xe284
   143e8:	movt	r9, #2
   143ec:	mov	r0, #1
   143f0:	strb	r0, [r9]
   143f4:	movw	r0, #57972	; 0xe274
   143f8:	movt	r0, #2
   143fc:	ldr	r8, [r0]
   14400:	movw	r0, #57989	; 0xe285
   14404:	movt	r0, #2
   14408:	ldrb	r0, [r0]
   1440c:	cmp	r0, #1
   14410:	bleq	149b4 <__assert_fail@plt+0x3378>
   14414:	ldr	r0, [r4, #8]
   14418:	cmp	r0, #1
   1441c:	bne	1446c <__assert_fail@plt+0x2e30>
   14420:	movw	r0, #57932	; 0xe24c
   14424:	movt	r0, #2
   14428:	ldr	r0, [r0]
   1442c:	movw	r2, #57712	; 0xe170
   14430:	movt	r2, #2
   14434:	ldr	r1, [r2]
   14438:	cmp	r1, #1
   1443c:	blt	14460 <__assert_fail@plt+0x2e24>
   14440:	add	r1, r0, #8
   14444:	ldr	r2, [r2]
   14448:	mov	r3, #0
   1444c:	mov	r6, #2
   14450:	str	r6, [r1], #40	; 0x28
   14454:	add	r3, r3, #1
   14458:	cmp	r3, r2
   1445c:	blt	14450 <__assert_fail@plt+0x2e14>
   14460:	ldr	r0, [r0, #28]
   14464:	cmp	r0, #0
   14468:	ble	1452c <__assert_fail@plt+0x2ef0>
   1446c:	movw	r6, #57992	; 0xe288
   14470:	movt	r6, #2
   14474:	ldr	r0, [r6]
   14478:	movw	r9, #57876	; 0xe214
   1447c:	movt	r9, #2
   14480:	ldr	r1, [r9]
   14484:	cmp	r0, r1
   14488:	ble	1449c <__assert_fail@plt+0x2e60>
   1448c:	sub	r0, r0, r1
   14490:	bl	14ae4 <__assert_fail@plt+0x34a8>
   14494:	mov	r0, #0
   14498:	str	r0, [r6]
   1449c:	movw	r0, #57873	; 0xe211
   144a0:	movt	r0, #2
   144a4:	ldrb	r0, [r0]
   144a8:	cmp	r0, #1
   144ac:	bleq	14b48 <__assert_fail@plt+0x350c>
   144b0:	cmp	r7, sl
   144b4:	beq	144d0 <__assert_fail@plt+0x2e94>
   144b8:	add	r6, r8, r7
   144bc:	sub	r7, sl, r7
   144c0:	ldrb	r0, [r6], #1
   144c4:	bl	14550 <__assert_fail@plt+0x2f14>
   144c8:	subs	r7, r7, #1
   144cc:	bne	144c0 <__assert_fail@plt+0x2e84>
   144d0:	movw	r0, #57996	; 0xe28c
   144d4:	movt	r0, #2
   144d8:	ldr	r0, [r0]
   144dc:	cmp	r0, #0
   144e0:	bne	14544 <__assert_fail@plt+0x2f08>
   144e4:	movw	r0, #57968	; 0xe270
   144e8:	movt	r0, #2
   144ec:	ldr	r0, [r0]
   144f0:	ldr	r0, [r0, r5, lsl #2]
   144f4:	ldr	r3, [r4, #32]
   144f8:	add	r0, r0, r3
   144fc:	movw	r1, #58000	; 0xe290
   14500:	movt	r1, #2
   14504:	str	r0, [r1]
   14508:	ldr	r2, [r9]
   1450c:	sub	r3, r3, r2
   14510:	movw	r7, #57868	; 0xe20c
   14514:	movt	r7, #2
   14518:	ldr	r7, [r7]
   1451c:	cmp	r3, r7
   14520:	subeq	r0, r0, r2
   14524:	streq	r0, [r1]
   14528:	b	14544 <__assert_fail@plt+0x2f08>
   1452c:	movw	r0, #57880	; 0xe218
   14530:	movt	r0, #2
   14534:	ldrb	r0, [r0]
   14538:	cmp	r0, #1
   1453c:	moveq	r0, #0
   14540:	strbeq	r0, [r9]
   14544:	mov	r0, #1
   14548:	sub	sp, fp, #28
   1454c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14550:	push	{r4, r5, fp, lr}
   14554:	add	fp, sp, #8
   14558:	mov	r4, r0
   1455c:	movw	r0, #57860	; 0xe204
   14560:	movt	r0, #2
   14564:	ldrb	r0, [r0]
   14568:	cmp	r0, #1
   1456c:	bne	145e4 <__assert_fail@plt+0x2fa8>
   14570:	movw	r0, #57996	; 0xe28c
   14574:	movt	r0, #2
   14578:	ldr	r1, [r0]
   1457c:	cmp	r4, #32
   14580:	addeq	r1, r1, #1
   14584:	streq	r1, [r0]
   14588:	popeq	{r4, r5, fp, pc}
   1458c:	cmp	r1, #1
   14590:	blge	14c3c <__assert_fail@plt+0x3600>
   14594:	bl	114d4 <__ctype_b_loc@plt>
   14598:	ldr	r5, [r0]
   1459c:	mov	r0, r4
   145a0:	bl	14cdc <__assert_fail@plt+0x36a0>
   145a4:	add	r0, r5, r4, lsl #1
   145a8:	ldrb	r0, [r0, #1]
   145ac:	tst	r0, #64	; 0x40
   145b0:	bne	145d0 <__assert_fail@plt+0x2f94>
   145b4:	cmp	r4, #8
   145b8:	bne	145e4 <__assert_fail@plt+0x2fa8>
   145bc:	movw	r0, #58000	; 0xe290
   145c0:	movt	r0, #2
   145c4:	ldr	r1, [r0]
   145c8:	sub	r1, r1, #1
   145cc:	b	145e0 <__assert_fail@plt+0x2fa4>
   145d0:	movw	r0, #58000	; 0xe290
   145d4:	movt	r0, #2
   145d8:	ldr	r1, [r0]
   145dc:	add	r1, r1, #1
   145e0:	str	r1, [r0]
   145e4:	mov	r0, r4
   145e8:	pop	{r4, r5, fp, lr}
   145ec:	b	11630 <putchar_unlocked@plt>
   145f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145f4:	add	fp, sp, #28
   145f8:	sub	sp, sp, #4
   145fc:	mov	r4, r0
   14600:	ldr	r0, [r0]
   14604:	bl	113a8 <getc_unlocked@plt>
   14608:	mov	r5, r0
   1460c:	movw	r9, #58008	; 0xe298
   14610:	movt	r9, #2
   14614:	ldr	r6, [r9]
   14618:	cmp	r0, #12
   1461c:	bne	1464c <__assert_fail@plt+0x3010>
   14620:	ldrb	r0, [r4, #37]	; 0x25
   14624:	cmp	r0, #0
   14628:	beq	148bc <__assert_fail@plt+0x3280>
   1462c:	ldr	r0, [r4]
   14630:	bl	113a8 <getc_unlocked@plt>
   14634:	mov	r5, r0
   14638:	cmp	r0, #10
   1463c:	bne	1464c <__assert_fail@plt+0x3010>
   14640:	ldr	r0, [r4]
   14644:	bl	113a8 <getc_unlocked@plt>
   14648:	mov	r5, r0
   1464c:	mov	r0, #0
   14650:	strb	r0, [r4, #37]	; 0x25
   14654:	cmn	r5, #1
   14658:	beq	1467c <__assert_fail@plt+0x3040>
   1465c:	cmp	r5, #10
   14660:	beq	14688 <__assert_fail@plt+0x304c>
   14664:	cmp	r5, #12
   14668:	beq	148c4 <__assert_fail@plt+0x3288>
   1466c:	uxtb	r0, r5
   14670:	bl	14ce0 <__assert_fail@plt+0x36a4>
   14674:	mov	r8, r0
   14678:	b	14688 <__assert_fail@plt+0x304c>
   1467c:	mov	r0, r4
   14680:	bl	14228 <__assert_fail@plt+0x2bec>
   14684:	b	14954 <__assert_fail@plt+0x3318>
   14688:	movw	r7, #57883	; 0xe21b
   1468c:	movt	r7, #2
   14690:	ldrb	r0, [r7]
   14694:	cmp	r0, #1
   14698:	bne	146b4 <__assert_fail@plt+0x3078>
   1469c:	movw	r0, #57916	; 0xe23c
   146a0:	movt	r0, #2
   146a4:	ldr	r0, [r0]
   146a8:	ldr	r1, [r9]
   146ac:	cmp	r1, r0
   146b0:	bgt	148b0 <__assert_fail@plt+0x3274>
   146b4:	ldr	r0, [r4, #16]
   146b8:	movw	r1, #17228	; 0x434c
   146bc:	movt	r1, #1
   146c0:	cmp	r0, r1
   146c4:	beq	14808 <__assert_fail@plt+0x31cc>
   146c8:	movw	r0, #57988	; 0xe284
   146cc:	movt	r0, #2
   146d0:	mov	r1, #1
   146d4:	strb	r1, [r0]
   146d8:	movw	r0, #57989	; 0xe285
   146dc:	movt	r0, #2
   146e0:	ldrb	r0, [r0]
   146e4:	cmp	r0, #1
   146e8:	bne	14700 <__assert_fail@plt+0x30c4>
   146ec:	movw	r0, #57841	; 0xe1f1
   146f0:	movt	r0, #2
   146f4:	ldrb	r0, [r0]
   146f8:	cmp	r0, #1
   146fc:	bleq	149b4 <__assert_fail@plt+0x3378>
   14700:	movw	r0, #57862	; 0xe206
   14704:	movt	r0, #2
   14708:	ldrb	r0, [r0]
   1470c:	cmp	r0, #1
   14710:	bne	147c4 <__assert_fail@plt+0x3188>
   14714:	movw	r0, #58014	; 0xe29e
   14718:	movt	r0, #2
   1471c:	ldrb	r0, [r0]
   14720:	cmp	r0, #1
   14724:	bne	147c4 <__assert_fail@plt+0x3188>
   14728:	mov	r6, r8
   1472c:	movw	sl, #58004	; 0xe294
   14730:	movt	sl, #2
   14734:	ldr	r8, [sl]
   14738:	mov	r0, #0
   1473c:	str	r0, [sl]
   14740:	cmp	r8, #1
   14744:	blt	14774 <__assert_fail@plt+0x3138>
   14748:	movw	r0, #57932	; 0xe24c
   1474c:	movt	r0, #2
   14750:	ldr	r7, [r0]
   14754:	mov	r0, r7
   14758:	bl	14f18 <__assert_fail@plt+0x38dc>
   1475c:	ldr	r0, [sl]
   14760:	add	r0, r0, #1
   14764:	str	r0, [sl]
   14768:	subs	r8, r8, #1
   1476c:	add	r7, r7, #40	; 0x28
   14770:	bne	14754 <__assert_fail@plt+0x3118>
   14774:	ldr	r0, [r4, #32]
   14778:	movw	r1, #58014	; 0xe29e
   1477c:	movt	r1, #2
   14780:	mov	r2, #0
   14784:	strb	r2, [r1]
   14788:	movw	r1, #57992	; 0xe288
   1478c:	movt	r1, #2
   14790:	str	r0, [r1]
   14794:	movw	r0, #57916	; 0xe23c
   14798:	movt	r0, #2
   1479c:	ldr	r0, [r0]
   147a0:	movw	r7, #57883	; 0xe21b
   147a4:	movt	r7, #2
   147a8:	ldrb	r1, [r7]
   147ac:	cmp	r1, #0
   147b0:	moveq	r0, r1
   147b4:	movw	r1, #57996	; 0xe28c
   147b8:	movt	r1, #2
   147bc:	str	r0, [r1]
   147c0:	mov	r8, r6
   147c4:	movw	r6, #57992	; 0xe288
   147c8:	movt	r6, #2
   147cc:	ldr	r0, [r6]
   147d0:	movw	r1, #57876	; 0xe214
   147d4:	movt	r1, #2
   147d8:	ldr	r1, [r1]
   147dc:	cmp	r0, r1
   147e0:	ble	147f4 <__assert_fail@plt+0x31b8>
   147e4:	sub	r0, r0, r1
   147e8:	bl	14ae4 <__assert_fail@plt+0x34a8>
   147ec:	mov	r0, #0
   147f0:	str	r0, [r6]
   147f4:	movw	r0, #57873	; 0xe211
   147f8:	movt	r0, #2
   147fc:	ldrb	r0, [r0]
   14800:	cmp	r0, #1
   14804:	bleq	14b48 <__assert_fail@plt+0x350c>
   14808:	ldrb	r0, [r4, #36]	; 0x24
   1480c:	cmp	r0, #0
   14810:	movne	r0, r4
   14814:	blne	14f84 <__assert_fail@plt+0x3948>
   14818:	movw	r0, #58015	; 0xe29f
   1481c:	movt	r0, #2
   14820:	mov	r1, #0
   14824:	strb	r1, [r0]
   14828:	mov	sl, #1
   1482c:	cmp	r5, #10
   14830:	beq	14958 <__assert_fail@plt+0x331c>
   14834:	movw	r5, #57924	; 0xe244
   14838:	movt	r5, #2
   1483c:	ldr	r2, [r5]
   14840:	mov	r0, r4
   14844:	mov	r1, r8
   14848:	bl	15118 <__assert_fail@plt+0x3adc>
   1484c:	movw	r8, #57916	; 0xe23c
   14850:	movt	r8, #2
   14854:	b	14864 <__assert_fail@plt+0x3228>
   14858:	ldr	r2, [r5]
   1485c:	mov	r0, r4
   14860:	bl	15118 <__assert_fail@plt+0x3adc>
   14864:	ldr	r0, [r4]
   14868:	bl	113a8 <getc_unlocked@plt>
   1486c:	cmn	r0, #1
   14870:	beq	14964 <__assert_fail@plt+0x3328>
   14874:	cmp	r0, #10
   14878:	beq	14958 <__assert_fail@plt+0x331c>
   1487c:	cmp	r0, #12
   14880:	beq	14970 <__assert_fail@plt+0x3334>
   14884:	ldr	r6, [r9]
   14888:	uxtb	r0, r0
   1488c:	bl	14ce0 <__assert_fail@plt+0x36a4>
   14890:	mov	r1, r0
   14894:	ldrb	r0, [r7]
   14898:	cmp	r0, #1
   1489c:	bne	14858 <__assert_fail@plt+0x321c>
   148a0:	ldr	r0, [r8]
   148a4:	ldr	r2, [r9]
   148a8:	cmp	r2, r0
   148ac:	ble	14858 <__assert_fail@plt+0x321c>
   148b0:	str	r6, [r9]
   148b4:	mov	sl, #0
   148b8:	b	14958 <__assert_fail@plt+0x331c>
   148bc:	mov	r0, #0
   148c0:	strb	r0, [r4, #37]	; 0x25
   148c4:	ldr	r0, [r4]
   148c8:	bl	113a8 <getc_unlocked@plt>
   148cc:	cmp	r0, #10
   148d0:	beq	148dc <__assert_fail@plt+0x32a0>
   148d4:	ldr	r1, [r4]
   148d8:	bl	11510 <ungetc@plt>
   148dc:	movw	r0, #58012	; 0xe29c
   148e0:	movt	r0, #2
   148e4:	mov	r1, #1
   148e8:	strb	r1, [r0]
   148ec:	movw	r0, #57989	; 0xe285
   148f0:	movt	r0, #2
   148f4:	ldrb	r0, [r0]
   148f8:	cmp	r0, #1
   148fc:	bne	1492c <__assert_fail@plt+0x32f0>
   14900:	movw	r0, #57841	; 0xe1f1
   14904:	movt	r0, #2
   14908:	ldrb	r0, [r0]
   1490c:	cmp	r0, #1
   14910:	bne	1492c <__assert_fail@plt+0x32f0>
   14914:	movw	r0, #57988	; 0xe284
   14918:	movt	r0, #2
   1491c:	mov	r1, #1
   14920:	strb	r1, [r0]
   14924:	bl	149b4 <__assert_fail@plt+0x3378>
   14928:	b	1494c <__assert_fail@plt+0x3310>
   1492c:	movw	r0, #57881	; 0xe219
   14930:	movt	r0, #2
   14934:	ldrb	r0, [r0]
   14938:	cmp	r0, #1
   1493c:	movweq	r0, #58013	; 0xe29d
   14940:	movteq	r0, #2
   14944:	moveq	r1, #1
   14948:	strbeq	r1, [r0]
   1494c:	mov	r0, r4
   14950:	bl	141a0 <__assert_fail@plt+0x2b64>
   14954:	mov	sl, #1
   14958:	mov	r0, sl
   1495c:	sub	sp, fp, #28
   14960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14964:	mov	r0, r4
   14968:	bl	14228 <__assert_fail@plt+0x2bec>
   1496c:	b	14958 <__assert_fail@plt+0x331c>
   14970:	ldr	r0, [r4]
   14974:	bl	113a8 <getc_unlocked@plt>
   14978:	cmp	r0, #10
   1497c:	beq	14988 <__assert_fail@plt+0x334c>
   14980:	ldr	r1, [r4]
   14984:	bl	11510 <ungetc@plt>
   14988:	movw	r0, #57881	; 0xe219
   1498c:	movt	r0, #2
   14990:	ldrb	r0, [r0]
   14994:	cmp	r0, #1
   14998:	movweq	r0, #58013	; 0xe29d
   1499c:	movteq	r0, #2
   149a0:	moveq	r1, #1
   149a4:	strbeq	r1, [r0]
   149a8:	mov	r0, r4
   149ac:	bl	141a0 <__assert_fail@plt+0x2b64>
   149b0:	b	14958 <__assert_fail@plt+0x331c>
   149b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149b8:	add	fp, sp, #24
   149bc:	sub	sp, sp, #304	; 0x130
   149c0:	movw	r8, #58000	; 0xe290
   149c4:	movt	r8, #2
   149c8:	mov	r6, #0
   149cc:	str	r6, [r8]
   149d0:	movw	r7, #57868	; 0xe20c
   149d4:	movt	r7, #2
   149d8:	ldr	r0, [r7]
   149dc:	bl	14ae4 <__assert_fail@plt+0x34a8>
   149e0:	bl	14c3c <__assert_fail@plt+0x3600>
   149e4:	movw	r4, #57896	; 0xe228
   149e8:	movt	r4, #2
   149ec:	ldrd	r0, [r4]
   149f0:	orrs	r0, r0, r1
   149f4:	beq	14ac0 <__assert_fail@plt+0x3484>
   149f8:	movw	r1, #53590	; 0xd156
   149fc:	movt	r1, #1
   14a00:	mov	r0, #0
   14a04:	mov	r2, #5
   14a08:	bl	113b4 <dcgettext@plt>
   14a0c:	mov	r3, r0
   14a10:	ldrd	r0, [r4]
   14a14:	stm	sp, {r0, r1}
   14a18:	add	r4, sp, #28
   14a1c:	mov	r0, r4
   14a20:	mov	r1, #1
   14a24:	mov	r2, #276	; 0x114
   14a28:	bl	11528 <__sprintf_chk@plt>
   14a2c:	movw	r0, #57960	; 0xe268
   14a30:	movt	r0, #2
   14a34:	ldr	r5, [r0]
   14a38:	mov	r0, r4
   14a3c:	mov	r1, #0
   14a40:	bl	15b04 <__assert_fail@plt+0x44c8>
   14a44:	ldr	r2, [r7]
   14a48:	movw	r1, #57952	; 0xe260
   14a4c:	movt	r1, #2
   14a50:	ldr	r1, [r1]
   14a54:	movw	r3, #57956	; 0xe264
   14a58:	movt	r3, #2
   14a5c:	ldr	r3, [r3]
   14a60:	sub	r0, r5, r0
   14a64:	bic	r0, r0, r0, asr #31
   14a68:	sub	r7, r0, r0, lsr #1
   14a6c:	movw	r5, #53509	; 0xd105
   14a70:	movt	r5, #1
   14a74:	lsr	r0, r0, #1
   14a78:	str	r1, [sp]
   14a7c:	stmib	sp, {r0, r5}
   14a80:	str	r3, [sp, #12]
   14a84:	str	r7, [sp, #16]
   14a88:	str	r5, [sp, #20]
   14a8c:	str	r4, [sp, #24]
   14a90:	movw	r1, #53600	; 0xd160
   14a94:	movt	r1, #1
   14a98:	movw	r3, #53508	; 0xd104
   14a9c:	movt	r3, #1
   14aa0:	mov	r0, #1
   14aa4:	bl	1154c <__printf_chk@plt>
   14aa8:	movw	r0, #57989	; 0xe285
   14aac:	movt	r0, #2
   14ab0:	strb	r6, [r0]
   14ab4:	str	r6, [r8]
   14ab8:	sub	sp, fp, #24
   14abc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ac0:	movw	r1, #53569	; 0xd141
   14ac4:	movt	r1, #1
   14ac8:	mov	r0, #0
   14acc:	mov	r2, #5
   14ad0:	bl	113b4 <dcgettext@plt>
   14ad4:	mov	r2, r0
   14ad8:	mov	r0, #1
   14adc:	mov	r1, #0
   14ae0:	bl	1145c <error@plt>
   14ae4:	push	{r4, r5, r6, sl, fp, lr}
   14ae8:	add	fp, sp, #16
   14aec:	mov	r4, r0
   14af0:	movw	r5, #58000	; 0xe290
   14af4:	movt	r5, #2
   14af8:	ldr	r0, [r5]
   14afc:	movw	r1, #57860	; 0xe204
   14b00:	movt	r1, #2
   14b04:	ldrb	r1, [r1]
   14b08:	cmp	r1, #0
   14b0c:	beq	14b24 <__assert_fail@plt+0x34e8>
   14b10:	sub	r0, r4, r0
   14b14:	movw	r1, #57996	; 0xe28c
   14b18:	movt	r1, #2
   14b1c:	str	r0, [r1]
   14b20:	pop	{r4, r5, r6, sl, fp, pc}
   14b24:	cmp	r0, r4
   14b28:	bge	14b40 <__assert_fail@plt+0x3504>
   14b2c:	sub	r6, r4, r0
   14b30:	mov	r0, #32
   14b34:	bl	11630 <putchar_unlocked@plt>
   14b38:	subs	r6, r6, #1
   14b3c:	bne	14b30 <__assert_fail@plt+0x34f4>
   14b40:	str	r4, [r5]
   14b44:	pop	{r4, r5, r6, sl, fp, pc}
   14b48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b4c:	add	fp, sp, #28
   14b50:	sub	sp, sp, #4
   14b54:	movw	r8, #58004	; 0xe294
   14b58:	movt	r8, #2
   14b5c:	ldr	r0, [r8]
   14b60:	cmp	r0, #1
   14b64:	blt	14c1c <__assert_fail@plt+0x35e0>
   14b68:	movw	r0, #57696	; 0xe160
   14b6c:	movt	r0, #2
   14b70:	ldr	r9, [r0]
   14b74:	movw	r0, #57876	; 0xe214
   14b78:	movt	r0, #2
   14b7c:	ldr	sl, [r0]
   14b80:	movw	r6, #57996	; 0xe28c
   14b84:	movt	r6, #2
   14b88:	movw	r7, #58000	; 0xe290
   14b8c:	movt	r7, #2
   14b90:	subs	r0, sl, #1
   14b94:	blt	14bf4 <__assert_fail@plt+0x35b8>
   14b98:	mov	r4, sl
   14b9c:	mov	r5, r9
   14ba0:	ldr	r0, [r6]
   14ba4:	ldrb	r1, [r5]
   14ba8:	cmp	r1, #32
   14bac:	bne	14bb8 <__assert_fail@plt+0x357c>
   14bb0:	mov	r1, r6
   14bb4:	b	14bd0 <__assert_fail@plt+0x3594>
   14bb8:	cmp	r0, #1
   14bbc:	blge	14c3c <__assert_fail@plt+0x3600>
   14bc0:	ldrb	r0, [r5]
   14bc4:	bl	11630 <putchar_unlocked@plt>
   14bc8:	ldr	r0, [r7]
   14bcc:	mov	r1, r7
   14bd0:	add	r0, r0, #1
   14bd4:	str	r0, [r1]
   14bd8:	sub	r4, r4, #1
   14bdc:	add	r5, r5, #1
   14be0:	cmp	r4, #0
   14be4:	bgt	14ba0 <__assert_fail@plt+0x3564>
   14be8:	add	r9, r9, sl
   14bec:	mvn	sl, #0
   14bf0:	b	14bf8 <__assert_fail@plt+0x35bc>
   14bf4:	mov	sl, r0
   14bf8:	ldr	r0, [r6]
   14bfc:	cmp	r0, #1
   14c00:	blge	14c3c <__assert_fail@plt+0x3600>
   14c04:	ldr	r0, [r8]
   14c08:	subs	r0, r0, #1
   14c0c:	str	r0, [r8]
   14c10:	bgt	14b90 <__assert_fail@plt+0x3554>
   14c14:	sub	sp, fp, #28
   14c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c1c:	movw	r0, #57996	; 0xe28c
   14c20:	movt	r0, #2
   14c24:	ldr	r0, [r0]
   14c28:	cmp	r0, #1
   14c2c:	blt	14c14 <__assert_fail@plt+0x35d8>
   14c30:	sub	sp, fp, #28
   14c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c38:	b	14c3c <__assert_fail@plt+0x3600>
   14c3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14c40:	add	fp, sp, #24
   14c44:	movw	r8, #58000	; 0xe290
   14c48:	movt	r8, #2
   14c4c:	ldr	r0, [r8]
   14c50:	movw	r9, #57996	; 0xe28c
   14c54:	movt	r9, #2
   14c58:	ldr	r1, [r9]
   14c5c:	add	r6, r1, r0
   14c60:	cmp	r1, #2
   14c64:	blt	14cb0 <__assert_fail@plt+0x3674>
   14c68:	movw	r7, #57676	; 0xe14c
   14c6c:	movt	r7, #2
   14c70:	movw	r4, #57672	; 0xe148
   14c74:	movt	r4, #2
   14c78:	ldr	r1, [r7]
   14c7c:	sdiv	r2, r0, r1
   14c80:	mul	r2, r2, r1
   14c84:	sub	r2, r2, r0
   14c88:	add	r1, r1, r2
   14c8c:	add	r5, r1, r0
   14c90:	cmp	r6, r5
   14c94:	blt	14cb0 <__assert_fail@plt+0x3674>
   14c98:	ldrb	r0, [r4]
   14c9c:	bl	11630 <putchar_unlocked@plt>
   14ca0:	sub	r0, r6, r5
   14ca4:	cmp	r0, #1
   14ca8:	mov	r0, r5
   14cac:	bgt	14c78 <__assert_fail@plt+0x363c>
   14cb0:	cmp	r0, r6
   14cb4:	bge	14ccc <__assert_fail@plt+0x3690>
   14cb8:	sub	r4, r6, r0
   14cbc:	mov	r0, #32
   14cc0:	bl	11630 <putchar_unlocked@plt>
   14cc4:	subs	r4, r4, #1
   14cc8:	bne	14cbc <__assert_fail@plt+0x3680>
   14ccc:	mov	r0, #0
   14cd0:	str	r0, [r9]
   14cd4:	str	r6, [r8]
   14cd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14cdc:	bx	lr
   14ce0:	push	{r4, r5, r6, sl, fp, lr}
   14ce4:	add	fp, sp, #16
   14ce8:	sub	sp, sp, #8
   14cec:	mov	r5, r0
   14cf0:	movw	r0, #57924	; 0xe244
   14cf4:	movt	r0, #2
   14cf8:	ldr	r4, [r0]
   14cfc:	movw	r0, #57664	; 0xe140
   14d00:	movt	r0, #2
   14d04:	ldrb	r1, [r0]
   14d08:	movw	r0, #57668	; 0xe144
   14d0c:	movt	r0, #2
   14d10:	ldr	r0, [r0]
   14d14:	cmp	r1, r5
   14d18:	movne	r0, #8
   14d1c:	cmp	r5, #9
   14d20:	cmpne	r1, r5
   14d24:	bne	14d74 <__assert_fail@plt+0x3738>
   14d28:	movw	r1, #58008	; 0xe298
   14d2c:	movt	r1, #2
   14d30:	ldr	r2, [r1]
   14d34:	sdiv	r3, r2, r0
   14d38:	mls	r2, r3, r0, r2
   14d3c:	sub	r6, r0, r2
   14d40:	movw	r3, #57852	; 0xe1fc
   14d44:	movt	r3, #2
   14d48:	ldrb	r3, [r3]
   14d4c:	cmp	r3, #1
   14d50:	bne	14de8 <__assert_fail@plt+0x37ac>
   14d54:	cmp	r6, #0
   14d58:	beq	14e74 <__assert_fail@plt+0x3838>
   14d5c:	sub	r2, r0, r2
   14d60:	mov	r0, r4
   14d64:	mov	r1, #32
   14d68:	bl	11540 <memset@plt>
   14d6c:	mov	r2, r6
   14d70:	b	14df0 <__assert_fail@plt+0x37b4>
   14d74:	bl	114d4 <__ctype_b_loc@plt>
   14d78:	ldr	r0, [r0]
   14d7c:	add	r0, r0, r5, lsl #1
   14d80:	ldrb	r0, [r0, #1]
   14d84:	tst	r0, #64	; 0x40
   14d88:	bne	14e1c <__assert_fail@plt+0x37e0>
   14d8c:	movw	r0, #57882	; 0xe21a
   14d90:	movt	r0, #2
   14d94:	ldrb	r0, [r0]
   14d98:	cmp	r0, #1
   14d9c:	bne	14e3c <__assert_fail@plt+0x3800>
   14da0:	mov	r0, #92	; 0x5c
   14da4:	strb	r0, [r4], #1
   14da8:	str	r5, [sp]
   14dac:	add	r5, sp, #4
   14db0:	mov	r6, #4
   14db4:	movw	r3, #53621	; 0xd175
   14db8:	movt	r3, #1
   14dbc:	mov	r0, r5
   14dc0:	mov	r1, #1
   14dc4:	mov	r2, #4
   14dc8:	bl	11528 <__sprintf_chk@plt>
   14dcc:	mov	r0, #0
   14dd0:	ldrb	r1, [r5, r0]
   14dd4:	strb	r1, [r4, r0]
   14dd8:	add	r0, r0, #1
   14ddc:	cmp	r0, #3
   14de0:	bne	14dd0 <__assert_fail@plt+0x3794>
   14de4:	b	14e24 <__assert_fail@plt+0x37e8>
   14de8:	strb	r5, [r4]
   14dec:	mov	r2, #1
   14df0:	lsr	r3, r6, #31
   14df4:	movw	r0, #58008	; 0xe298
   14df8:	movt	r0, #2
   14dfc:	ldr	r1, [r0]
   14e00:	cmn	r6, #1
   14e04:	bgt	14e84 <__assert_fail@plt+0x3848>
   14e08:	mov	r5, #0
   14e0c:	cmp	r1, #0
   14e10:	mov	r0, #0
   14e14:	beq	14ea0 <__assert_fail@plt+0x3864>
   14e18:	b	14e84 <__assert_fail@plt+0x3848>
   14e1c:	strb	r5, [r4]
   14e20:	mov	r6, #1
   14e24:	movw	r0, #58008	; 0xe298
   14e28:	movt	r0, #2
   14e2c:	ldr	r1, [r0]
   14e30:	mov	r0, r6
   14e34:	add	r5, r1, r6
   14e38:	b	14ea0 <__assert_fail@plt+0x3864>
   14e3c:	movw	r0, #57843	; 0xe1f3
   14e40:	movt	r0, #2
   14e44:	ldrb	r0, [r0]
   14e48:	cmp	r0, #1
   14e4c:	bne	14ebc <__assert_fail@plt+0x3880>
   14e50:	sxtb	r0, r5
   14e54:	cmp	r0, #0
   14e58:	blt	14ed0 <__assert_fail@plt+0x3894>
   14e5c:	mov	r0, #94	; 0x5e
   14e60:	strb	r0, [r4]
   14e64:	eor	r0, r5, #64	; 0x40
   14e68:	strb	r0, [r4, #1]
   14e6c:	mov	r6, #2
   14e70:	b	14e24 <__assert_fail@plt+0x37e8>
   14e74:	ldr	r1, [r1]
   14e78:	mov	r3, #0
   14e7c:	mov	r2, #0
   14e80:	mov	r6, #0
   14e84:	rsb	r0, r6, #0
   14e88:	cmp	r1, r0
   14e8c:	bgt	14eb4 <__assert_fail@plt+0x3878>
   14e90:	mov	r5, #0
   14e94:	cmp	r3, #0
   14e98:	mov	r0, r2
   14e9c:	addeq	r5, r1, r6
   14ea0:	movw	r1, #58008	; 0xe298
   14ea4:	movt	r1, #2
   14ea8:	str	r5, [r1]
   14eac:	sub	sp, fp, #16
   14eb0:	pop	{r4, r5, r6, sl, fp, pc}
   14eb4:	mov	r0, r2
   14eb8:	b	14e34 <__assert_fail@plt+0x37f8>
   14ebc:	strb	r5, [r4]
   14ec0:	mov	r6, #0
   14ec4:	cmp	r5, #8
   14ec8:	mvneq	r6, #0
   14ecc:	b	14dec <__assert_fail@plt+0x37b0>
   14ed0:	mov	r0, #92	; 0x5c
   14ed4:	strb	r0, [r4], #1
   14ed8:	str	r5, [sp]
   14edc:	add	r5, sp, #4
   14ee0:	mov	r6, #4
   14ee4:	movw	r3, #53621	; 0xd175
   14ee8:	movt	r3, #1
   14eec:	mov	r0, r5
   14ef0:	mov	r1, #1
   14ef4:	mov	r2, #4
   14ef8:	bl	11528 <__sprintf_chk@plt>
   14efc:	mov	r0, #0
   14f00:	ldrb	r1, [r5, r0]
   14f04:	strb	r1, [r4, r0]
   14f08:	add	r0, r0, #1
   14f0c:	cmp	r0, #3
   14f10:	bne	14f00 <__assert_fail@plt+0x38c4>
   14f14:	b	14e24 <__assert_fail@plt+0x37e8>
   14f18:	push	{r4, r5, fp, lr}
   14f1c:	add	fp, sp, #8
   14f20:	mov	r4, r0
   14f24:	ldr	r0, [r0, #32]
   14f28:	movw	r5, #57992	; 0xe288
   14f2c:	movt	r5, #2
   14f30:	str	r0, [r5]
   14f34:	movw	r1, #57876	; 0xe214
   14f38:	movt	r1, #2
   14f3c:	ldr	r1, [r1]
   14f40:	cmp	r0, r1
   14f44:	ble	14f58 <__assert_fail@plt+0x391c>
   14f48:	sub	r0, r0, r1
   14f4c:	bl	14ae4 <__assert_fail@plt+0x34a8>
   14f50:	mov	r0, #0
   14f54:	str	r0, [r5]
   14f58:	movw	r0, #57873	; 0xe211
   14f5c:	movt	r0, #2
   14f60:	ldrb	r0, [r0]
   14f64:	cmp	r0, #1
   14f68:	bleq	14b48 <__assert_fail@plt+0x350c>
   14f6c:	ldrb	r0, [r4, #36]	; 0x24
   14f70:	cmp	r0, #0
   14f74:	popeq	{r4, r5, fp, pc}
   14f78:	mov	r0, r4
   14f7c:	pop	{r4, r5, fp, lr}
   14f80:	b	14f84 <__assert_fail@plt+0x3948>
   14f84:	push	{r4, r5, r6, r7, fp, lr}
   14f88:	add	fp, sp, #16
   14f8c:	sub	sp, sp, #8
   14f90:	mov	r4, r0
   14f94:	movw	r6, #57920	; 0xe240
   14f98:	movt	r6, #2
   14f9c:	ldr	r0, [r6]
   14fa0:	movw	r5, #57688	; 0xe158
   14fa4:	movt	r5, #2
   14fa8:	ldr	r1, [r5]
   14fac:	movw	r7, #57904	; 0xe230
   14fb0:	movt	r7, #2
   14fb4:	ldr	r2, [r7]
   14fb8:	stm	sp, {r1, r2}
   14fbc:	movw	r3, #53626	; 0xd17a
   14fc0:	movt	r3, #1
   14fc4:	mov	r1, #1
   14fc8:	mvn	r2, #0
   14fcc:	bl	11528 <__sprintf_chk@plt>
   14fd0:	ldr	r1, [r7]
   14fd4:	add	r1, r1, #1
   14fd8:	str	r1, [r7]
   14fdc:	ldr	r7, [r5]
   14fe0:	cmp	r7, #1
   14fe4:	blt	15004 <__assert_fail@plt+0x39c8>
   14fe8:	ldr	r1, [r6]
   14fec:	add	r6, r1, r0
   14ff0:	ldrb	r0, [r6, -r7]
   14ff4:	ldr	r1, [r4, #16]
   14ff8:	blx	r1
   14ffc:	subs	r7, r7, #1
   15000:	bgt	14ff0 <__assert_fail@plt+0x39b4>
   15004:	movw	r0, #57712	; 0xe170
   15008:	movt	r0, #2
   1500c:	ldr	r0, [r0]
   15010:	cmp	r0, #2
   15014:	blt	1506c <__assert_fail@plt+0x3a30>
   15018:	movw	r0, #57684	; 0xe154
   1501c:	movt	r0, #2
   15020:	ldrb	r0, [r0]
   15024:	cmp	r0, #9
   15028:	bne	150c0 <__assert_fail@plt+0x3a84>
   1502c:	ldr	r0, [r5]
   15030:	movw	r1, #57912	; 0xe238
   15034:	movt	r1, #2
   15038:	ldr	r1, [r1]
   1503c:	sub	r2, r1, r0
   15040:	cmp	r2, #1
   15044:	blt	150c8 <__assert_fail@plt+0x3a8c>
   15048:	add	r1, r1, #1
   1504c:	sub	r5, r1, r0
   15050:	ldr	r1, [r4, #16]
   15054:	mov	r0, #32
   15058:	blx	r1
   1505c:	sub	r5, r5, #1
   15060:	cmp	r5, #1
   15064:	bgt	15050 <__assert_fail@plt+0x3a14>
   15068:	b	150c8 <__assert_fail@plt+0x3a8c>
   1506c:	movw	r5, #57684	; 0xe154
   15070:	movt	r5, #2
   15074:	ldrb	r0, [r5]
   15078:	ldr	r1, [r4, #16]
   1507c:	blx	r1
   15080:	ldrb	r0, [r5]
   15084:	cmp	r0, #9
   15088:	bne	150c8 <__assert_fail@plt+0x3a8c>
   1508c:	movw	r0, #58000	; 0xe290
   15090:	movt	r0, #2
   15094:	ldr	r1, [r0]
   15098:	movw	r2, #57676	; 0xe14c
   1509c:	movt	r2, #2
   150a0:	ldr	r2, [r2]
   150a4:	add	r3, r2, r1
   150a8:	sdiv	r7, r1, r2
   150ac:	mul	r2, r7, r2
   150b0:	sub	r1, r2, r1
   150b4:	add	r1, r3, r1
   150b8:	str	r1, [r0]
   150bc:	b	150c8 <__assert_fail@plt+0x3a8c>
   150c0:	ldr	r1, [r4, #16]
   150c4:	blx	r1
   150c8:	movw	r0, #57883	; 0xe21b
   150cc:	movt	r0, #2
   150d0:	ldrb	r0, [r0]
   150d4:	cmp	r0, #1
   150d8:	bne	15110 <__assert_fail@plt+0x3ad4>
   150dc:	movw	r0, #57862	; 0xe206
   150e0:	movt	r0, #2
   150e4:	ldrb	r0, [r0]
   150e8:	cmp	r0, #0
   150ec:	bne	15110 <__assert_fail@plt+0x3ad4>
   150f0:	movw	r0, #57912	; 0xe238
   150f4:	movt	r0, #2
   150f8:	ldr	r0, [r0]
   150fc:	movw	r1, #58008	; 0xe298
   15100:	movt	r1, #2
   15104:	ldr	r2, [r1]
   15108:	add	r0, r2, r0
   1510c:	str	r0, [r1]
   15110:	sub	sp, fp, #16
   15114:	pop	{r4, r5, r6, r7, fp, pc}
   15118:	push	{r4, r5, r6, sl, fp, lr}
   1511c:	add	fp, sp, #16
   15120:	cmp	r1, #0
   15124:	popeq	{r4, r5, r6, sl, fp, pc}
   15128:	mov	r4, r2
   1512c:	mov	r5, r1
   15130:	mov	r6, r0
   15134:	ldrb	r0, [r4], #1
   15138:	ldr	r1, [r6, #16]
   1513c:	blx	r1
   15140:	subs	r5, r5, #1
   15144:	bne	15134 <__assert_fail@plt+0x3af8>
   15148:	pop	{r4, r5, r6, sl, fp, pc}
   1514c:	movw	r0, #57841	; 0xe1f1
   15150:	movt	r0, #2
   15154:	ldrb	r0, [r0]
   15158:	cmp	r0, #0
   1515c:	beq	151b4 <__assert_fail@plt+0x3b78>
   15160:	movw	r0, #57712	; 0xe170
   15164:	movt	r0, #2
   15168:	ldr	r0, [r0]
   1516c:	cmp	r0, #0
   15170:	bxeq	lr
   15174:	movw	r1, #57908	; 0xe234
   15178:	movt	r1, #2
   1517c:	ldr	r1, [r1]
   15180:	movw	r2, #57932	; 0xe24c
   15184:	movt	r2, #2
   15188:	ldr	r2, [r2]
   1518c:	add	r2, r2, #28
   15190:	ldr	r3, [r2, #-20]	; 0xffffffec
   15194:	cmp	r3, #0
   15198:	mov	r3, r1
   1519c:	movne	r3, #0
   151a0:	str	r3, [r2]
   151a4:	add	r2, r2, #40	; 0x28
   151a8:	subs	r0, r0, #1
   151ac:	bne	15190 <__assert_fail@plt+0x3b54>
   151b0:	bx	lr
   151b4:	push	{fp, lr}
   151b8:	mov	fp, sp
   151bc:	bl	153a8 <__assert_fail@plt+0x3d6c>
   151c0:	movw	r0, #57932	; 0xe24c
   151c4:	movt	r0, #2
   151c8:	ldr	r0, [r0]
   151cc:	movw	r1, #57712	; 0xe170
   151d0:	movt	r1, #2
   151d4:	ldr	r2, [r1]
   151d8:	cmp	r2, #1
   151dc:	pop	{fp, lr}
   151e0:	beq	1520c <__assert_fail@plt+0x3bd0>
   151e4:	add	r1, r0, #24
   151e8:	rsb	r3, r2, #1
   151ec:	sub	ip, r2, #1
   151f0:	ldr	r2, [r1]
   151f4:	str	r2, [r1, #4]
   151f8:	add	r1, r1, #40	; 0x28
   151fc:	adds	r3, r3, #1
   15200:	bne	151f0 <__assert_fail@plt+0x3bb4>
   15204:	add	r1, ip, ip, lsl #2
   15208:	add	r0, r0, r1, lsl #3
   1520c:	movw	r1, #57842	; 0xe1f2
   15210:	movt	r1, #2
   15214:	ldrb	r1, [r1]
   15218:	cmp	r1, #1
   1521c:	ldreq	r1, [r0, #24]
   15220:	streq	r1, [r0, #28]
   15224:	bxeq	lr
   15228:	ldr	r1, [r0, #8]
   1522c:	cmp	r1, #0
   15230:	movne	r1, #0
   15234:	strne	r1, [r0, #28]
   15238:	bxne	lr
   1523c:	movw	r1, #57908	; 0xe234
   15240:	movt	r1, #2
   15244:	ldr	r1, [r1]
   15248:	str	r1, [r0, #28]
   1524c:	bx	lr
   15250:	push	{fp, lr}
   15254:	mov	fp, sp
   15258:	movw	r0, #57712	; 0xe170
   1525c:	movt	r0, #2
   15260:	ldr	r1, [r0]
   15264:	cmp	r1, #0
   15268:	moveq	r0, #0
   1526c:	popeq	{fp, pc}
   15270:	movw	r1, #57841	; 0xe1f1
   15274:	movt	r1, #2
   15278:	ldrb	ip, [r1]
   1527c:	ldr	lr, [r0]
   15280:	movw	r0, #57932	; 0xe24c
   15284:	movt	r0, #2
   15288:	ldr	r0, [r0]
   1528c:	add	r3, r0, #28
   15290:	mov	r0, #0
   15294:	mov	r1, #0
   15298:	b	152ac <__assert_fail@plt+0x3c70>
   1529c:	add	r3, r3, #40	; 0x28
   152a0:	add	r1, r1, #1
   152a4:	cmp	r1, lr
   152a8:	popcs	{fp, pc}
   152ac:	ldr	r2, [r3, #-20]	; 0xffffffec
   152b0:	cmp	r2, #2
   152b4:	bcs	152c0 <__assert_fail@plt+0x3c84>
   152b8:	add	r0, r0, #1
   152bc:	b	1529c <__assert_fail@plt+0x3c60>
   152c0:	cmp	ip, #0
   152c4:	bne	1529c <__assert_fail@plt+0x3c60>
   152c8:	ldr	r2, [r3, #-4]
   152cc:	cmp	r2, #1
   152d0:	ldrge	r2, [r3]
   152d4:	cmpge	r2, #1
   152d8:	blt	1529c <__assert_fail@plt+0x3c60>
   152dc:	b	152b8 <__assert_fail@plt+0x3c7c>
   152e0:	push	{r4, r5, fp, lr}
   152e4:	add	fp, sp, #8
   152e8:	mov	r4, r0
   152ec:	ldr	r5, [r0]
   152f0:	mov	r0, r5
   152f4:	bl	113a8 <getc_unlocked@plt>
   152f8:	cmn	r0, #1
   152fc:	beq	15354 <__assert_fail@plt+0x3d18>
   15300:	cmp	r0, #10
   15304:	popeq	{r4, r5, fp, pc}
   15308:	cmp	r0, #12
   1530c:	bne	152f0 <__assert_fail@plt+0x3cb4>
   15310:	mov	r0, r5
   15314:	bl	113a8 <getc_unlocked@plt>
   15318:	cmp	r0, #10
   1531c:	beq	15328 <__assert_fail@plt+0x3cec>
   15320:	mov	r1, r5
   15324:	bl	11510 <ungetc@plt>
   15328:	movw	r0, #57881	; 0xe219
   1532c:	movt	r0, #2
   15330:	ldrb	r0, [r0]
   15334:	cmp	r0, #1
   15338:	movweq	r0, #58013	; 0xe29d
   1533c:	movteq	r0, #2
   15340:	moveq	r1, #1
   15344:	strbeq	r1, [r0]
   15348:	mov	r0, r4
   1534c:	pop	{r4, r5, fp, lr}
   15350:	b	141a0 <__assert_fail@plt+0x2b64>
   15354:	mov	r0, r4
   15358:	pop	{r4, r5, fp, lr}
   1535c:	b	14228 <__assert_fail@plt+0x2bec>
   15360:	push	{r4, sl, fp, lr}
   15364:	add	fp, sp, #8
   15368:	mov	r4, r0
   1536c:	movw	r0, #57853	; 0xe1fd
   15370:	movt	r0, #2
   15374:	ldrb	r0, [r0]
   15378:	cmp	r0, #0
   1537c:	beq	1538c <__assert_fail@plt+0x3d50>
   15380:	mov	r0, #12
   15384:	pop	{r4, sl, fp, lr}
   15388:	b	11630 <putchar_unlocked@plt>
   1538c:	cmp	r4, #0
   15390:	popeq	{r4, sl, fp, pc}
   15394:	mov	r0, #10
   15398:	bl	11630 <putchar_unlocked@plt>
   1539c:	subs	r4, r4, #1
   153a0:	bne	15394 <__assert_fail@plt+0x3d58>
   153a4:	pop	{r4, sl, fp, pc}
   153a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153ac:	add	fp, sp, #28
   153b0:	sub	sp, sp, #4
   153b4:	movw	r0, #57984	; 0xe280
   153b8:	movt	r0, #2
   153bc:	mov	r4, #0
   153c0:	str	r4, [r0]
   153c4:	movw	r0, #57712	; 0xe170
   153c8:	movt	r0, #2
   153cc:	ldr	r1, [r0]
   153d0:	movw	r0, #57842	; 0xe1f2
   153d4:	movt	r0, #2
   153d8:	ldrb	r0, [r0]
   153dc:	eor	r2, r0, #1
   153e0:	sub	r0, r1, r2
   153e4:	str	r0, [sp]
   153e8:	cmp	r0, #1
   153ec:	mov	r0, #0
   153f0:	blt	15554 <__assert_fail@plt+0x3f18>
   153f4:	movw	r0, #57932	; 0xe24c
   153f8:	movt	r0, #2
   153fc:	ldr	r5, [r0]
   15400:	rsb	r0, r2, #0
   15404:	add	r0, r1, r0
   15408:	add	r1, r5, #24
   1540c:	mov	r2, #0
   15410:	str	r2, [r1], #40	; 0x28
   15414:	subs	r0, r0, #1
   15418:	bne	15410 <__assert_fail@plt+0x3dd4>
   1541c:	mov	r4, #0
   15420:	ldr	r0, [sp]
   15424:	cmp	r0, #1
   15428:	blt	15550 <__assert_fail@plt+0x3f14>
   1542c:	movw	r6, #57936	; 0xe250
   15430:	movt	r6, #2
   15434:	ldr	r0, [r6]
   15438:	cmp	r0, #0
   1543c:	mov	r0, #0
   15440:	beq	15554 <__assert_fail@plt+0x3f18>
   15444:	mov	r7, #1
   15448:	movw	r9, #58008	; 0xe298
   1544c:	movt	r9, #2
   15450:	mov	r0, #0
   15454:	mov	r4, #0
   15458:	str	r4, [r5, #20]
   1545c:	movw	r1, #57908	; 0xe234
   15460:	movt	r1, #2
   15464:	ldr	r1, [r1]
   15468:	cmp	r1, #0
   1546c:	ldrne	r2, [r6]
   15470:	cmpne	r2, #0
   15474:	bne	1549c <__assert_fail@plt+0x3e60>
   15478:	ldr	r1, [sp]
   1547c:	cmp	r7, r1
   15480:	bge	15554 <__assert_fail@plt+0x3f18>
   15484:	add	r5, r5, #40	; 0x28
   15488:	add	r7, r7, #1
   1548c:	ldr	r1, [r6]
   15490:	cmp	r1, #0
   15494:	bne	15458 <__assert_fail@plt+0x3e1c>
   15498:	b	15554 <__assert_fail@plt+0x3f18>
   1549c:	rsb	sl, r1, #1
   154a0:	mov	r8, r0
   154a4:	ldr	r0, [r5, #8]
   154a8:	cmp	r0, #0
   154ac:	bne	154ec <__assert_fail@plt+0x3eb0>
   154b0:	mov	r0, #0
   154b4:	str	r0, [r9]
   154b8:	mov	r0, r5
   154bc:	bl	145f0 <__assert_fail@plt+0x2fb4>
   154c0:	cmp	r0, #0
   154c4:	moveq	r0, r5
   154c8:	bleq	152e0 <__assert_fail@plt+0x3ca4>
   154cc:	movw	r0, #57984	; 0xe280
   154d0:	movt	r0, #2
   154d4:	ldr	r0, [r0]
   154d8:	ldr	r1, [r5, #8]
   154dc:	cmp	r1, #0
   154e0:	beq	15510 <__assert_fail@plt+0x3ed4>
   154e4:	cmp	r8, r0
   154e8:	bne	15510 <__assert_fail@plt+0x3ed4>
   154ec:	mov	r0, r8
   154f0:	cmp	sl, #0
   154f4:	beq	15478 <__assert_fail@plt+0x3e3c>
   154f8:	add	sl, sl, #1
   154fc:	ldr	r1, [r6]
   15500:	cmp	r1, #0
   15504:	mov	r8, r0
   15508:	bne	154a4 <__assert_fail@plt+0x3e68>
   1550c:	b	15478 <__assert_fail@plt+0x3e3c>
   15510:	ldr	r1, [r5, #24]
   15514:	add	r1, r1, #1
   15518:	str	r1, [r5, #24]
   1551c:	movw	r1, #57964	; 0xe26c
   15520:	movt	r1, #2
   15524:	ldr	r1, [r1]
   15528:	str	r8, [r1, r4, lsl #2]
   1552c:	movw	r1, #57968	; 0xe270
   15530:	movt	r1, #2
   15534:	ldr	r1, [r1]
   15538:	ldr	r2, [r9]
   1553c:	str	r2, [r1, r4, lsl #2]
   15540:	add	r4, r4, #1
   15544:	cmp	sl, #0
   15548:	bne	154f8 <__assert_fail@plt+0x3ebc>
   1554c:	b	15478 <__assert_fail@plt+0x3e3c>
   15550:	mov	r0, #0
   15554:	movw	r1, #57964	; 0xe26c
   15558:	movt	r1, #2
   1555c:	ldr	r1, [r1]
   15560:	str	r0, [r1, r4, lsl #2]
   15564:	movw	r0, #57842	; 0xe1f2
   15568:	movt	r0, #2
   1556c:	ldrb	r0, [r0]
   15570:	cmp	r0, #1
   15574:	subne	sp, fp, #28
   15578:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1557c:	mov	r0, r4
   15580:	sub	sp, fp, #28
   15584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15588:	b	1558c <__assert_fail@plt+0x3f50>
   1558c:	push	{r4, sl, fp, lr}
   15590:	add	fp, sp, #8
   15594:	movw	r1, #57712	; 0xe170
   15598:	movt	r1, #2
   1559c:	ldr	lr, [r1]
   155a0:	cmp	lr, #1
   155a4:	poplt	{r4, sl, fp, pc}
   155a8:	ldr	ip, [r1]
   155ac:	movw	r1, #57932	; 0xe24c
   155b0:	movt	r1, #2
   155b4:	ldr	r1, [r1]
   155b8:	add	r2, r1, #24
   155bc:	mov	r3, #0
   155c0:	mov	r1, #0
   155c4:	sdiv	r4, r0, lr
   155c8:	mls	lr, r4, lr, r0
   155cc:	add	r3, r3, #1
   155d0:	cmp	r3, lr
   155d4:	addle	r4, r4, #1
   155d8:	stmda	r2, {r1, r4}
   155dc:	add	r1, r4, r1
   155e0:	add	r2, r2, #40	; 0x28
   155e4:	cmp	r3, ip
   155e8:	mov	lr, ip
   155ec:	blt	155c4 <__assert_fail@plt+0x3f88>
   155f0:	pop	{r4, sl, fp, pc}
   155f4:	movw	r1, #58016	; 0xe2a0
   155f8:	movt	r1, #2
   155fc:	str	r0, [r1]
   15600:	bx	lr
   15604:	movw	r1, #58020	; 0xe2a4
   15608:	movt	r1, #2
   1560c:	strb	r0, [r1]
   15610:	bx	lr
   15614:	push	{r4, r5, r6, sl, fp, lr}
   15618:	add	fp, sp, #16
   1561c:	sub	sp, sp, #8
   15620:	movw	r0, #57820	; 0xe1dc
   15624:	movt	r0, #2
   15628:	ldr	r0, [r0]
   1562c:	bl	1b7c8 <__assert_fail@plt+0xa18c>
   15630:	cmp	r0, #0
   15634:	beq	1565c <__assert_fail@plt+0x4020>
   15638:	movw	r0, #58020	; 0xe2a4
   1563c:	movt	r0, #2
   15640:	ldrb	r0, [r0]
   15644:	cmp	r0, #0
   15648:	beq	1567c <__assert_fail@plt+0x4040>
   1564c:	bl	1151c <__errno_location@plt>
   15650:	ldr	r0, [r0]
   15654:	cmp	r0, #32
   15658:	bne	1567c <__assert_fail@plt+0x4040>
   1565c:	movw	r0, #57808	; 0xe1d0
   15660:	movt	r0, #2
   15664:	ldr	r0, [r0]
   15668:	bl	1b7c8 <__assert_fail@plt+0xa18c>
   1566c:	cmp	r0, #0
   15670:	subeq	sp, fp, #16
   15674:	popeq	{r4, r5, r6, sl, fp, pc}
   15678:	b	156ec <__assert_fail@plt+0x40b0>
   1567c:	movw	r1, #54631	; 0xd567
   15680:	movt	r1, #1
   15684:	mov	r0, #0
   15688:	mov	r2, #5
   1568c:	bl	113b4 <dcgettext@plt>
   15690:	mov	r4, r0
   15694:	movw	r0, #58016	; 0xe2a0
   15698:	movt	r0, #2
   1569c:	ldr	r6, [r0]
   156a0:	bl	1151c <__errno_location@plt>
   156a4:	ldr	r5, [r0]
   156a8:	cmp	r6, #0
   156ac:	bne	156c8 <__assert_fail@plt+0x408c>
   156b0:	movw	r2, #54647	; 0xd577
   156b4:	movt	r2, #1
   156b8:	mov	r0, #0
   156bc:	mov	r1, r5
   156c0:	mov	r3, r4
   156c4:	b	156e8 <__assert_fail@plt+0x40ac>
   156c8:	mov	r0, r6
   156cc:	bl	18e58 <__assert_fail@plt+0x781c>
   156d0:	mov	r3, r0
   156d4:	str	r4, [sp]
   156d8:	movw	r2, #54643	; 0xd573
   156dc:	movt	r2, #1
   156e0:	mov	r0, #0
   156e4:	mov	r1, r5
   156e8:	bl	1145c <error@plt>
   156ec:	movw	r0, #57724	; 0xe17c
   156f0:	movt	r0, #2
   156f4:	ldr	r0, [r0]
   156f8:	bl	11378 <_exit@plt>
   156fc:	b	11330 <posix_fadvise64@plt>
   15700:	cmp	r0, #0
   15704:	bxeq	lr
   15708:	push	{r4, sl, fp, lr}
   1570c:	add	fp, sp, #8
   15710:	sub	sp, sp, #16
   15714:	mov	r4, r1
   15718:	bl	11558 <fileno@plt>
   1571c:	mov	r1, #0
   15720:	str	r1, [sp]
   15724:	stmib	sp, {r1, r4}
   15728:	mov	r2, #0
   1572c:	mov	r3, #0
   15730:	bl	156fc <__assert_fail@plt+0x40c0>
   15734:	sub	sp, fp, #8
   15738:	pop	{r4, sl, fp, pc}
   1573c:	push	{r4, r5, fp, lr}
   15740:	add	fp, sp, #8
   15744:	sub	sp, sp, #8
   15748:	mov	r4, r0
   1574c:	bl	11558 <fileno@plt>
   15750:	cmn	r0, #1
   15754:	ble	157cc <__assert_fail@plt+0x4190>
   15758:	mov	r0, r4
   1575c:	bl	11498 <__freading@plt>
   15760:	cmp	r0, #0
   15764:	beq	15790 <__assert_fail@plt+0x4154>
   15768:	mov	r0, r4
   1576c:	bl	11558 <fileno@plt>
   15770:	mov	r1, #1
   15774:	str	r1, [sp]
   15778:	mov	r2, #0
   1577c:	mov	r3, #0
   15780:	bl	11420 <lseek64@plt>
   15784:	and	r0, r0, r1
   15788:	cmn	r0, #1
   1578c:	beq	157cc <__assert_fail@plt+0x4190>
   15790:	mov	r0, r4
   15794:	bl	157dc <__assert_fail@plt+0x41a0>
   15798:	cmp	r0, #0
   1579c:	beq	157cc <__assert_fail@plt+0x4190>
   157a0:	bl	1151c <__errno_location@plt>
   157a4:	ldr	r5, [r0]
   157a8:	mov	r0, r4
   157ac:	bl	11588 <fclose@plt>
   157b0:	cmp	r5, #0
   157b4:	beq	157c4 <__assert_fail@plt+0x4188>
   157b8:	bl	1151c <__errno_location@plt>
   157bc:	str	r5, [r0]
   157c0:	mvn	r0, #0
   157c4:	sub	sp, fp, #8
   157c8:	pop	{r4, r5, fp, pc}
   157cc:	mov	r0, r4
   157d0:	sub	sp, fp, #8
   157d4:	pop	{r4, r5, fp, lr}
   157d8:	b	11588 <fclose@plt>
   157dc:	push	{r4, sl, fp, lr}
   157e0:	add	fp, sp, #8
   157e4:	mov	r4, r0
   157e8:	cmp	r0, #0
   157ec:	beq	15804 <__assert_fail@plt+0x41c8>
   157f0:	mov	r0, r4
   157f4:	bl	11498 <__freading@plt>
   157f8:	cmp	r0, #0
   157fc:	movne	r0, r4
   15800:	blne	15810 <__assert_fail@plt+0x41d4>
   15804:	mov	r0, r4
   15808:	pop	{r4, sl, fp, lr}
   1580c:	b	11348 <fflush@plt>
   15810:	ldrb	r1, [r0, #1]
   15814:	tst	r1, #1
   15818:	bxeq	lr
   1581c:	push	{fp, lr}
   15820:	mov	fp, sp
   15824:	sub	sp, sp, #8
   15828:	mov	r1, #1
   1582c:	str	r1, [sp]
   15830:	mov	r2, #0
   15834:	mov	r3, #0
   15838:	bl	15920 <__assert_fail@plt+0x42e4>
   1583c:	mov	sp, fp
   15840:	pop	{fp, pc}
   15844:	push	{r4, r5, r6, r7, fp, lr}
   15848:	add	fp, sp, #16
   1584c:	mov	r5, r1
   15850:	bl	115e8 <fopen64@plt>
   15854:	mov	r4, #0
   15858:	cmp	r0, #0
   1585c:	beq	158ac <__assert_fail@plt+0x4270>
   15860:	mov	r6, r0
   15864:	bl	11558 <fileno@plt>
   15868:	cmp	r0, #2
   1586c:	movhi	r0, r6
   15870:	pophi	{r4, r5, r6, r7, fp, pc}
   15874:	bl	1994c <__assert_fail@plt+0x8310>
   15878:	cmn	r0, #1
   1587c:	ble	158d8 <__assert_fail@plt+0x429c>
   15880:	mov	r7, r0
   15884:	mov	r0, r6
   15888:	bl	1573c <__assert_fail@plt+0x4100>
   1588c:	cmp	r0, #0
   15890:	bne	158b4 <__assert_fail@plt+0x4278>
   15894:	mov	r0, r7
   15898:	mov	r1, r5
   1589c:	bl	112dc <fdopen@plt>
   158a0:	mov	r4, r0
   158a4:	cmp	r0, #0
   158a8:	beq	158b4 <__assert_fail@plt+0x4278>
   158ac:	mov	r0, r4
   158b0:	pop	{r4, r5, r6, r7, fp, pc}
   158b4:	bl	1151c <__errno_location@plt>
   158b8:	mov	r4, r0
   158bc:	ldr	r5, [r0]
   158c0:	mov	r0, r7
   158c4:	bl	11624 <close@plt>
   158c8:	str	r5, [r4]
   158cc:	mov	r4, #0
   158d0:	mov	r0, r4
   158d4:	pop	{r4, r5, r6, r7, fp, pc}
   158d8:	bl	1151c <__errno_location@plt>
   158dc:	mov	r5, r0
   158e0:	ldr	r7, [r0]
   158e4:	mov	r0, r6
   158e8:	bl	1573c <__assert_fail@plt+0x4100>
   158ec:	str	r7, [r5]
   158f0:	mov	r0, r4
   158f4:	pop	{r4, r5, r6, r7, fp, pc}
   158f8:	push	{r4, r5, r6, sl, fp, lr}
   158fc:	add	fp, sp, #16
   15900:	mov	r4, r0
   15904:	bl	1151c <__errno_location@plt>
   15908:	mov	r5, r0
   1590c:	ldr	r6, [r0]
   15910:	mov	r0, r4
   15914:	bl	11360 <free@plt>
   15918:	str	r6, [r5]
   1591c:	pop	{r4, r5, r6, sl, fp, pc}
   15920:	push	{r4, r5, r6, r7, fp, lr}
   15924:	add	fp, sp, #16
   15928:	sub	sp, sp, #8
   1592c:	mov	r5, r3
   15930:	mov	r6, r2
   15934:	mov	r4, r0
   15938:	ldr	r0, [r0, #4]
   1593c:	ldr	r1, [r4, #8]
   15940:	cmp	r1, r0
   15944:	bne	15960 <__assert_fail@plt+0x4324>
   15948:	ldrd	r0, [r4, #16]
   1594c:	cmp	r1, r0
   15950:	bne	15960 <__assert_fail@plt+0x4324>
   15954:	ldr	r0, [r4, #36]	; 0x24
   15958:	cmp	r0, #0
   1595c:	beq	15978 <__assert_fail@plt+0x433c>
   15960:	mov	r0, r4
   15964:	mov	r2, r6
   15968:	mov	r3, r5
   1596c:	sub	sp, fp, #16
   15970:	pop	{r4, r5, r6, r7, fp, lr}
   15974:	b	11594 <fseeko64@plt>
   15978:	ldr	r7, [fp, #8]
   1597c:	mov	r0, r4
   15980:	bl	11558 <fileno@plt>
   15984:	str	r7, [sp]
   15988:	mov	r2, r6
   1598c:	mov	r3, r5
   15990:	bl	11420 <lseek64@plt>
   15994:	and	r2, r0, r1
   15998:	cmn	r2, #1
   1599c:	mvneq	r0, #0
   159a0:	subeq	sp, fp, #16
   159a4:	popeq	{r4, r5, r6, r7, fp, pc}
   159a8:	strd	r0, [r4, #80]	; 0x50
   159ac:	ldr	r0, [r4]
   159b0:	bic	r0, r0, #16
   159b4:	str	r0, [r4]
   159b8:	mov	r0, #0
   159bc:	sub	sp, fp, #16
   159c0:	pop	{r4, r5, r6, r7, fp, pc}
   159c4:	mov	r1, r0
   159c8:	mov	r0, #0
   159cc:	b	1136c <clock_gettime@plt>
   159d0:	push	{fp, lr}
   159d4:	mov	fp, sp
   159d8:	bl	159c4 <__assert_fail@plt+0x4388>
   159dc:	pop	{fp, pc}
   159e0:	push	{r4, sl, fp, lr}
   159e4:	add	fp, sp, #8
   159e8:	sub	sp, sp, #264	; 0x108
   159ec:	add	r1, sp, #7
   159f0:	movw	r2, #257	; 0x101
   159f4:	bl	193bc <__assert_fail@plt+0x7d80>
   159f8:	mov	r4, #0
   159fc:	cmp	r0, #0
   15a00:	bne	15a38 <__assert_fail@plt+0x43fc>
   15a04:	add	r0, sp, #7
   15a08:	movw	r1, #54650	; 0xd57a
   15a0c:	movt	r1, #1
   15a10:	bl	11318 <strcmp@plt>
   15a14:	cmp	r0, #0
   15a18:	beq	15a38 <__assert_fail@plt+0x43fc>
   15a1c:	add	r0, sp, #7
   15a20:	movw	r1, #54652	; 0xd57c
   15a24:	movt	r1, #1
   15a28:	bl	11318 <strcmp@plt>
   15a2c:	mov	r4, r0
   15a30:	cmp	r0, #0
   15a34:	movwne	r4, #1
   15a38:	mov	r0, r4
   15a3c:	sub	sp, fp, #8
   15a40:	pop	{r4, sl, fp, pc}
   15a44:	push	{r4, r5, r6, sl, fp, lr}
   15a48:	add	fp, sp, #16
   15a4c:	mov	r4, r1
   15a50:	mov	r5, r0
   15a54:	mov	r0, #0
   15a58:	strb	r0, [r2, #20]
   15a5c:	add	r6, r2, #19
   15a60:	cmp	r1, #0
   15a64:	blt	15ab4 <__assert_fail@plt+0x4478>
   15a68:	mov	r0, r5
   15a6c:	mov	r1, r4
   15a70:	mov	r2, #10
   15a74:	mov	r3, #0
   15a78:	bl	1bb58 <__assert_fail@plt+0xa51c>
   15a7c:	add	r2, r0, r0, lsl #2
   15a80:	sub	r2, r5, r2, lsl #1
   15a84:	add	r2, r2, #48	; 0x30
   15a88:	strb	r2, [r6], #-1
   15a8c:	adds	r2, r5, #9
   15a90:	adc	r3, r4, #0
   15a94:	rsbs	r2, r2, #18
   15a98:	rscs	r2, r3, #0
   15a9c:	mov	r5, r0
   15aa0:	mov	r4, r1
   15aa4:	bcc	15a68 <__assert_fail@plt+0x442c>
   15aa8:	add	r6, r6, #1
   15aac:	mov	r0, r6
   15ab0:	pop	{r4, r5, r6, sl, fp, pc}
   15ab4:	mov	r0, r5
   15ab8:	mov	r1, r4
   15abc:	mov	r2, #10
   15ac0:	mov	r3, #0
   15ac4:	bl	1bb58 <__assert_fail@plt+0xa51c>
   15ac8:	add	r2, r0, r0, lsl #2
   15acc:	rsb	r2, r5, r2, lsl #1
   15ad0:	add	r2, r2, #48	; 0x30
   15ad4:	strb	r2, [r6], #-1
   15ad8:	adds	r2, r5, #9
   15adc:	adc	r3, r4, #0
   15ae0:	rsbs	r2, r2, #18
   15ae4:	rscs	r2, r3, #0
   15ae8:	mov	r5, r0
   15aec:	mov	r4, r1
   15af0:	bcc	15ab4 <__assert_fail@plt+0x4478>
   15af4:	mov	r0, #45	; 0x2d
   15af8:	strb	r0, [r6]
   15afc:	mov	r0, r6
   15b00:	pop	{r4, r5, r6, sl, fp, pc}
   15b04:	push	{r4, r5, fp, lr}
   15b08:	add	fp, sp, #8
   15b0c:	mov	r4, r1
   15b10:	mov	r5, r0
   15b14:	bl	114ec <strlen@plt>
   15b18:	mov	r1, r0
   15b1c:	mov	r0, r5
   15b20:	mov	r2, r4
   15b24:	pop	{r4, r5, fp, lr}
   15b28:	b	15b2c <__assert_fail@plt+0x44f0>
   15b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b30:	add	fp, sp, #28
   15b34:	sub	sp, sp, #28
   15b38:	mov	r4, r2
   15b3c:	mov	r5, r1
   15b40:	mov	r7, r0
   15b44:	add	r6, r0, r1
   15b48:	bl	1142c <__ctype_get_mb_cur_max@plt>
   15b4c:	cmp	r0, #1
   15b50:	bls	15e40 <__assert_fail@plt+0x4804>
   15b54:	cmp	r5, #1
   15b58:	blt	15ea8 <__assert_fail@plt+0x486c>
   15b5c:	and	sl, r4, #2
   15b60:	and	r2, r4, #1
   15b64:	eor	r3, r2, #1
   15b68:	mov	r5, #0
   15b6c:	add	r8, sp, #12
   15b70:	add	r9, sp, #16
   15b74:	mov	r4, #0
   15b78:	ldrb	r0, [r7]
   15b7c:	sub	r0, r0, #32
   15b80:	cmp	r0, #94	; 0x5e
   15b84:	bhi	15d20 <__assert_fail@plt+0x46e4>
   15b88:	add	r1, pc, #0
   15b8c:	ldr	pc, [r1, r0, lsl #2]
   15b90:	andeq	r5, r1, ip, lsl #26
   15b94:	andeq	r5, r1, ip, lsl #26
   15b98:	andeq	r5, r1, ip, lsl #26
   15b9c:	andeq	r5, r1, ip, lsl #26
   15ba0:	andeq	r5, r1, r0, lsr #26
   15ba4:	andeq	r5, r1, ip, lsl #26
   15ba8:	andeq	r5, r1, ip, lsl #26
   15bac:	andeq	r5, r1, ip, lsl #26
   15bb0:	andeq	r5, r1, ip, lsl #26
   15bb4:	andeq	r5, r1, ip, lsl #26
   15bb8:	andeq	r5, r1, ip, lsl #26
   15bbc:	andeq	r5, r1, ip, lsl #26
   15bc0:	andeq	r5, r1, ip, lsl #26
   15bc4:	andeq	r5, r1, ip, lsl #26
   15bc8:	andeq	r5, r1, ip, lsl #26
   15bcc:	andeq	r5, r1, ip, lsl #26
   15bd0:	andeq	r5, r1, ip, lsl #26
   15bd4:	andeq	r5, r1, ip, lsl #26
   15bd8:	andeq	r5, r1, ip, lsl #26
   15bdc:	andeq	r5, r1, ip, lsl #26
   15be0:	andeq	r5, r1, ip, lsl #26
   15be4:	andeq	r5, r1, ip, lsl #26
   15be8:	andeq	r5, r1, ip, lsl #26
   15bec:	andeq	r5, r1, ip, lsl #26
   15bf0:	andeq	r5, r1, ip, lsl #26
   15bf4:	andeq	r5, r1, ip, lsl #26
   15bf8:	andeq	r5, r1, ip, lsl #26
   15bfc:	andeq	r5, r1, ip, lsl #26
   15c00:	andeq	r5, r1, ip, lsl #26
   15c04:	andeq	r5, r1, ip, lsl #26
   15c08:	andeq	r5, r1, ip, lsl #26
   15c0c:	andeq	r5, r1, ip, lsl #26
   15c10:	andeq	r5, r1, r0, lsr #26
   15c14:	andeq	r5, r1, ip, lsl #26
   15c18:	andeq	r5, r1, ip, lsl #26
   15c1c:	andeq	r5, r1, ip, lsl #26
   15c20:	andeq	r5, r1, ip, lsl #26
   15c24:	andeq	r5, r1, ip, lsl #26
   15c28:	andeq	r5, r1, ip, lsl #26
   15c2c:	andeq	r5, r1, ip, lsl #26
   15c30:	andeq	r5, r1, ip, lsl #26
   15c34:	andeq	r5, r1, ip, lsl #26
   15c38:	andeq	r5, r1, ip, lsl #26
   15c3c:	andeq	r5, r1, ip, lsl #26
   15c40:	andeq	r5, r1, ip, lsl #26
   15c44:	andeq	r5, r1, ip, lsl #26
   15c48:	andeq	r5, r1, ip, lsl #26
   15c4c:	andeq	r5, r1, ip, lsl #26
   15c50:	andeq	r5, r1, ip, lsl #26
   15c54:	andeq	r5, r1, ip, lsl #26
   15c58:	andeq	r5, r1, ip, lsl #26
   15c5c:	andeq	r5, r1, ip, lsl #26
   15c60:	andeq	r5, r1, ip, lsl #26
   15c64:	andeq	r5, r1, ip, lsl #26
   15c68:	andeq	r5, r1, ip, lsl #26
   15c6c:	andeq	r5, r1, ip, lsl #26
   15c70:	andeq	r5, r1, ip, lsl #26
   15c74:	andeq	r5, r1, ip, lsl #26
   15c78:	andeq	r5, r1, ip, lsl #26
   15c7c:	andeq	r5, r1, ip, lsl #26
   15c80:	andeq	r5, r1, ip, lsl #26
   15c84:	andeq	r5, r1, ip, lsl #26
   15c88:	andeq	r5, r1, ip, lsl #26
   15c8c:	andeq	r5, r1, ip, lsl #26
   15c90:	andeq	r5, r1, r0, lsr #26
   15c94:	andeq	r5, r1, ip, lsl #26
   15c98:	andeq	r5, r1, ip, lsl #26
   15c9c:	andeq	r5, r1, ip, lsl #26
   15ca0:	andeq	r5, r1, ip, lsl #26
   15ca4:	andeq	r5, r1, ip, lsl #26
   15ca8:	andeq	r5, r1, ip, lsl #26
   15cac:	andeq	r5, r1, ip, lsl #26
   15cb0:	andeq	r5, r1, ip, lsl #26
   15cb4:	andeq	r5, r1, ip, lsl #26
   15cb8:	andeq	r5, r1, ip, lsl #26
   15cbc:	andeq	r5, r1, ip, lsl #26
   15cc0:	andeq	r5, r1, ip, lsl #26
   15cc4:	andeq	r5, r1, ip, lsl #26
   15cc8:	andeq	r5, r1, ip, lsl #26
   15ccc:	andeq	r5, r1, ip, lsl #26
   15cd0:	andeq	r5, r1, ip, lsl #26
   15cd4:	andeq	r5, r1, ip, lsl #26
   15cd8:	andeq	r5, r1, ip, lsl #26
   15cdc:	andeq	r5, r1, ip, lsl #26
   15ce0:	andeq	r5, r1, ip, lsl #26
   15ce4:	andeq	r5, r1, ip, lsl #26
   15ce8:	andeq	r5, r1, ip, lsl #26
   15cec:	andeq	r5, r1, ip, lsl #26
   15cf0:	andeq	r5, r1, ip, lsl #26
   15cf4:	andeq	r5, r1, ip, lsl #26
   15cf8:	andeq	r5, r1, ip, lsl #26
   15cfc:	andeq	r5, r1, ip, lsl #26
   15d00:	andeq	r5, r1, ip, lsl #26
   15d04:	andeq	r5, r1, ip, lsl #26
   15d08:	andeq	r5, r1, ip, lsl #26
   15d0c:	add	r4, r4, #1
   15d10:	add	r7, r7, #1
   15d14:	cmp	r7, r6
   15d18:	bcc	15b78 <__assert_fail@plt+0x453c>
   15d1c:	b	15eb4 <__assert_fail@plt+0x4878>
   15d20:	str	r3, [sp, #4]
   15d24:	str	r2, [sp, #8]
   15d28:	str	r5, [sp, #20]
   15d2c:	str	r5, [sp, #16]
   15d30:	mov	r5, r7
   15d34:	sub	r2, r6, r7
   15d38:	mov	r0, r8
   15d3c:	mov	r1, r7
   15d40:	mov	r3, r9
   15d44:	bl	1babc <__assert_fail@plt+0xa480>
   15d48:	cmp	r0, #0
   15d4c:	beq	15d68 <__assert_fail@plt+0x472c>
   15d50:	mov	r7, r0
   15d54:	cmn	r0, #2
   15d58:	beq	15dd8 <__assert_fail@plt+0x479c>
   15d5c:	cmn	r7, #1
   15d60:	bne	15d6c <__assert_fail@plt+0x4730>
   15d64:	b	15df8 <__assert_fail@plt+0x47bc>
   15d68:	mov	r7, #1
   15d6c:	ldr	r0, [sp, #12]
   15d70:	bl	11354 <wcwidth@plt>
   15d74:	cmp	r0, #0
   15d78:	blt	15d94 <__assert_fail@plt+0x4758>
   15d7c:	mvn	r1, #-2147483648	; 0x80000000
   15d80:	sub	r1, r1, r4
   15d84:	cmp	r0, r1
   15d88:	bgt	15dd0 <__assert_fail@plt+0x4794>
   15d8c:	add	r4, r0, r4
   15d90:	b	15db8 <__assert_fail@plt+0x477c>
   15d94:	cmp	sl, #0
   15d98:	bne	15e20 <__assert_fail@plt+0x47e4>
   15d9c:	ldr	r0, [sp, #12]
   15da0:	bl	113e4 <iswcntrl@plt>
   15da4:	cmp	r0, #0
   15da8:	bne	15db8 <__assert_fail@plt+0x477c>
   15dac:	cmn	r4, #-2147483647	; 0x80000001
   15db0:	beq	15dd0 <__assert_fail@plt+0x4794>
   15db4:	add	r4, r4, #1
   15db8:	add	r7, r5, r7
   15dbc:	mov	r0, r9
   15dc0:	bl	11390 <mbsinit@plt>
   15dc4:	cmp	r0, #0
   15dc8:	beq	15d30 <__assert_fail@plt+0x46f4>
   15dcc:	b	15e10 <__assert_fail@plt+0x47d4>
   15dd0:	mov	r0, #7
   15dd4:	b	15e24 <__assert_fail@plt+0x47e8>
   15dd8:	ldr	r0, [sp, #4]
   15ddc:	add	r4, r4, r0
   15de0:	mov	r0, #1
   15de4:	ldr	r1, [sp, #8]
   15de8:	cmp	r1, #0
   15dec:	mov	r7, r6
   15df0:	beq	15e10 <__assert_fail@plt+0x47d4>
   15df4:	b	15e24 <__assert_fail@plt+0x47e8>
   15df8:	mov	r0, #1
   15dfc:	ldr	r1, [sp, #8]
   15e00:	cmp	r1, #0
   15e04:	bne	15e24 <__assert_fail@plt+0x47e8>
   15e08:	add	r4, r4, #1
   15e0c:	add	r7, r5, #1
   15e10:	ldr	r2, [sp, #8]
   15e14:	ldr	r3, [sp, #4]
   15e18:	mov	r5, #0
   15e1c:	b	15d14 <__assert_fail@plt+0x46d8>
   15e20:	mov	r0, #1
   15e24:	cmp	r0, #0
   15e28:	mov	r7, r5
   15e2c:	ldr	r2, [sp, #8]
   15e30:	ldr	r3, [sp, #4]
   15e34:	mov	r5, #0
   15e38:	beq	15d14 <__assert_fail@plt+0x46d8>
   15e3c:	b	15e98 <__assert_fail@plt+0x485c>
   15e40:	and	r8, r4, #2
   15e44:	mov	r4, #0
   15e48:	cmp	r7, r6
   15e4c:	bcs	15eb4 <__assert_fail@plt+0x4878>
   15e50:	ldrb	r5, [r7], #1
   15e54:	bl	114d4 <__ctype_b_loc@plt>
   15e58:	ldr	r0, [r0]
   15e5c:	add	r0, r0, r5, lsl #1
   15e60:	ldrh	r1, [r0]
   15e64:	tst	r1, #16384	; 0x4000
   15e68:	bne	15e80 <__assert_fail@plt+0x4844>
   15e6c:	cmp	r8, #0
   15e70:	bne	15eb0 <__assert_fail@plt+0x4874>
   15e74:	mov	r0, #0
   15e78:	tst	r1, #2
   15e7c:	bne	15e90 <__assert_fail@plt+0x4854>
   15e80:	cmn	r4, #-2147483647	; 0x80000001
   15e84:	mov	r0, #0
   15e88:	mvneq	r0, #0
   15e8c:	addne	r4, r4, #1
   15e90:	ands	r0, r0, #7
   15e94:	beq	15e48 <__assert_fail@plt+0x480c>
   15e98:	mvn	r4, #0
   15e9c:	cmp	r0, #7
   15ea0:	mvneq	r4, #-2147483648	; 0x80000000
   15ea4:	b	15eb4 <__assert_fail@plt+0x4878>
   15ea8:	mov	r4, #0
   15eac:	b	15eb4 <__assert_fail@plt+0x4878>
   15eb0:	mvn	r4, #0
   15eb4:	mov	r0, r4
   15eb8:	sub	sp, fp, #28
   15ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ec0:	push	{fp, lr}
   15ec4:	mov	fp, sp
   15ec8:	sub	sp, sp, #24
   15ecc:	mvn	ip, #0
   15ed0:	str	ip, [sp, #8]
   15ed4:	mov	ip, #0
   15ed8:	str	ip, [sp, #4]
   15edc:	str	ip, [sp]
   15ee0:	ldr	ip, [fp, #12]
   15ee4:	str	ip, [sp, #16]
   15ee8:	ldr	ip, [fp, #8]
   15eec:	str	ip, [sp, #12]
   15ef0:	bl	15efc <__assert_fail@plt+0x48c0>
   15ef4:	mov	sp, fp
   15ef8:	pop	{fp, pc}
   15efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f00:	add	fp, sp, #28
   15f04:	sub	sp, sp, #124	; 0x7c
   15f08:	sub	sp, sp, #1024	; 0x400
   15f0c:	mov	r4, r3
   15f10:	mov	r7, r2
   15f14:	str	r1, [sp, #88]	; 0x58
   15f18:	mov	r5, r0
   15f1c:	bl	1151c <__errno_location@plt>
   15f20:	mov	r2, r4
   15f24:	ldr	r1, [r2, #8]!
   15f28:	cmp	r1, #0
   15f2c:	mov	r3, r1
   15f30:	movweq	r3, #12
   15f34:	cmp	r1, #12
   15f38:	subgt	r3, r1, #12
   15f3c:	ldr	r1, [r2, #32]
   15f40:	movw	r6, #53508	; 0xd104
   15f44:	movt	r6, #1
   15f48:	cmp	r1, #0
   15f4c:	movne	r6, r1
   15f50:	str	r0, [sp, #60]	; 0x3c
   15f54:	ldr	r1, [r0]
   15f58:	ldrb	r0, [r7]
   15f5c:	cmp	r0, #0
   15f60:	str	r1, [sp, #56]	; 0x38
   15f64:	beq	15fd0 <__assert_fail@plt+0x4994>
   15f68:	str	r6, [sp, #44]	; 0x2c
   15f6c:	str	r3, [sp, #36]	; 0x24
   15f70:	str	r2, [sp, #40]	; 0x28
   15f74:	ldr	r6, [fp, #16]
   15f78:	sub	r0, fp, #48	; 0x30
   15f7c:	add	r1, r0, #13
   15f80:	str	r1, [sp, #28]
   15f84:	add	r1, sp, #96	; 0x60
   15f88:	add	r1, r1, #1
   15f8c:	str	r1, [sp, #48]	; 0x30
   15f90:	str	r4, [sp, #76]	; 0x4c
   15f94:	add	r1, r4, #12
   15f98:	str	r1, [sp, #32]
   15f9c:	add	r0, r0, #14
   15fa0:	str	r0, [sp, #64]	; 0x40
   15fa4:	sub	r0, fp, #53	; 0x35
   15fa8:	add	r1, r0, #3
   15fac:	str	r1, [sp, #52]	; 0x34
   15fb0:	add	r0, r0, #2
   15fb4:	str	r0, [sp, #68]	; 0x44
   15fb8:	mov	ip, #0
   15fbc:	mov	r8, #-2147483648	; 0x80000000
   15fc0:	movw	r3, #52428	; 0xcccc
   15fc4:	movt	r3, #3276	; 0xccc
   15fc8:	mov	lr, r5
   15fcc:	b	15fe4 <__assert_fail@plt+0x49a8>
   15fd0:	mov	ip, #0
   15fd4:	mov	lr, r5
   15fd8:	b	1767c <__assert_fail@plt+0x6040>
   15fdc:	mov	r4, #3
   15fe0:	b	16fb4 <__assert_fail@plt+0x5978>
   15fe4:	ldrb	r0, [r7]
   15fe8:	cmp	r0, #37	; 0x25
   15fec:	bne	1608c <__assert_fail@plt+0x4a50>
   15ff0:	mov	r2, #0
   15ff4:	ldr	r0, [fp, #8]
   15ff8:	mov	r4, r0
   15ffc:	mov	sl, #0
   16000:	mov	r9, r7
   16004:	add	r9, r7, #1
   16008:	b	16014 <__assert_fail@plt+0x49d8>
   1600c:	add	r9, r9, #1
   16010:	mov	sl, r5
   16014:	ldrb	r5, [r9]
   16018:	sub	r0, r5, #35	; 0x23
   1601c:	cmp	r0, #13
   16020:	bhi	16070 <__assert_fail@plt+0x4a34>
   16024:	add	r1, pc, #0
   16028:	ldr	pc, [r1, r0, lsl #2]
   1602c:	andeq	r6, r1, r4, rrx
   16030:	strdeq	r6, [r1], -ip
   16034:	strdeq	r6, [r1], -ip
   16038:	strdeq	r6, [r1], -ip
   1603c:	strdeq	r6, [r1], -ip
   16040:	strdeq	r6, [r1], -ip
   16044:	strdeq	r6, [r1], -ip
   16048:	strdeq	r6, [r1], -ip
   1604c:	andeq	r6, r1, ip
   16050:	strdeq	r6, [r1], -ip
   16054:	andeq	r6, r1, ip
   16058:	strdeq	r6, [r1], -ip
   1605c:	strdeq	r6, [r1], -ip
   16060:	andeq	r6, r1, ip
   16064:	mov	r2, #1
   16068:	add	r9, r9, #1
   1606c:	b	16014 <__assert_fail@plt+0x49d8>
   16070:	cmp	r5, #95	; 0x5f
   16074:	beq	1600c <__assert_fail@plt+0x49d0>
   16078:	cmp	r5, #94	; 0x5e
   1607c:	bne	160fc <__assert_fail@plt+0x4ac0>
   16080:	mov	r4, #1
   16084:	add	r9, r9, #1
   16088:	b	16014 <__assert_fail@plt+0x49d8>
   1608c:	bic	r0, r6, r6, asr #31
   16090:	cmp	r0, #1
   16094:	mov	r5, r0
   16098:	movls	r5, #1
   1609c:	ldr	r1, [sp, #88]	; 0x58
   160a0:	sub	r1, r1, ip
   160a4:	cmp	r5, r1
   160a8:	bcs	176a0 <__assert_fail@plt+0x6064>
   160ac:	cmp	lr, #0
   160b0:	beq	16174 <__assert_fail@plt+0x4b38>
   160b4:	cmp	r0, #2
   160b8:	bcc	160f0 <__assert_fail@plt+0x4ab4>
   160bc:	sub	r4, r0, #1
   160c0:	mov	r0, lr
   160c4:	mov	r1, #32
   160c8:	mov	r2, r4
   160cc:	mov	r8, ip
   160d0:	mov	r6, lr
   160d4:	bl	11540 <memset@plt>
   160d8:	mov	lr, r6
   160dc:	mov	ip, r8
   160e0:	add	lr, r6, r4
   160e4:	movw	r3, #52428	; 0xcccc
   160e8:	movt	r3, #3276	; 0xccc
   160ec:	mov	r8, #-2147483648	; 0x80000000
   160f0:	ldrb	r0, [r7]
   160f4:	strb	r0, [lr], #1
   160f8:	b	16178 <__assert_fail@plt+0x4b3c>
   160fc:	sub	r0, r5, #48	; 0x30
   16100:	cmp	r0, #9
   16104:	bhi	16160 <__assert_fail@plt+0x4b24>
   16108:	mov	r6, #0
   1610c:	cmn	r6, #1
   16110:	ble	16120 <__assert_fail@plt+0x4ae4>
   16114:	cmp	r6, r3
   16118:	bgt	16130 <__assert_fail@plt+0x4af4>
   1611c:	b	16138 <__assert_fail@plt+0x4afc>
   16120:	beq	16138 <__assert_fail@plt+0x4afc>
   16124:	sdiv	r0, r8, r6
   16128:	cmp	r0, #10
   1612c:	bge	16138 <__assert_fail@plt+0x4afc>
   16130:	mvn	r6, #-2147483648	; 0x80000000
   16134:	b	16150 <__assert_fail@plt+0x4b14>
   16138:	ldrb	r0, [r9]
   1613c:	add	r1, r6, r6, lsl #2
   16140:	add	r0, r0, r1, lsl #1
   16144:	sub	r6, r0, #48	; 0x30
   16148:	cmp	r6, r1, lsl #1
   1614c:	mvnvs	r6, #-2147483648	; 0x80000000
   16150:	ldrb	r5, [r9, #1]!
   16154:	sub	r0, r5, #48	; 0x30
   16158:	cmp	r0, #10
   1615c:	bcc	1610c <__assert_fail@plt+0x4ad0>
   16160:	cmp	r5, #79	; 0x4f
   16164:	cmpne	r5, #69	; 0x45
   16168:	bne	16180 <__assert_fail@plt+0x4b44>
   1616c:	add	r9, r9, #1
   16170:	b	16184 <__assert_fail@plt+0x4b48>
   16174:	mov	lr, #0
   16178:	add	ip, r5, ip
   1617c:	b	1766c <__assert_fail@plt+0x6030>
   16180:	mov	r5, #0
   16184:	str	r4, [sp, #92]	; 0x5c
   16188:	str	r7, [sp, #84]	; 0x54
   1618c:	ldrb	r3, [r9]
   16190:	cmp	r3, #122	; 0x7a
   16194:	bhi	16be0 <__assert_fail@plt+0x55a4>
   16198:	mov	r7, r2
   1619c:	mov	r8, #0
   161a0:	mvn	r1, #0
   161a4:	add	r0, pc, #8
   161a8:	movw	r4, #49085	; 0xbfbd
   161ac:	movt	r4, #1
   161b0:	ldr	pc, [r0, r3, lsl #2]
   161b4:	andeq	r6, r1, r8, lsl #9
   161b8:	andeq	r6, r1, r0, ror #23
   161bc:	andeq	r6, r1, r0, ror #23
   161c0:	andeq	r6, r1, r0, ror #23
   161c4:	andeq	r6, r1, r0, ror #23
   161c8:	andeq	r6, r1, r0, ror #23
   161cc:	andeq	r6, r1, r0, ror #23
   161d0:	andeq	r6, r1, r0, ror #23
   161d4:	andeq	r6, r1, r0, ror #23
   161d8:	andeq	r6, r1, r0, ror #23
   161dc:	andeq	r6, r1, r0, ror #23
   161e0:	andeq	r6, r1, r0, ror #23
   161e4:	andeq	r6, r1, r0, ror #23
   161e8:	andeq	r6, r1, r0, ror #23
   161ec:	andeq	r6, r1, r0, ror #23
   161f0:	andeq	r6, r1, r0, ror #23
   161f4:	andeq	r6, r1, r0, ror #23
   161f8:	andeq	r6, r1, r0, ror #23
   161fc:	andeq	r6, r1, r0, ror #23
   16200:	andeq	r6, r1, r0, ror #23
   16204:	andeq	r6, r1, r0, ror #23
   16208:	andeq	r6, r1, r0, ror #23
   1620c:	andeq	r6, r1, r0, ror #23
   16210:	andeq	r6, r1, r0, ror #23
   16214:	andeq	r6, r1, r0, ror #23
   16218:	andeq	r6, r1, r0, ror #23
   1621c:	andeq	r6, r1, r0, ror #23
   16220:	andeq	r6, r1, r0, ror #23
   16224:	andeq	r6, r1, r0, ror #23
   16228:	andeq	r6, r1, r0, ror #23
   1622c:	andeq	r6, r1, r0, ror #23
   16230:	andeq	r6, r1, r0, ror #23
   16234:	andeq	r6, r1, r0, ror #23
   16238:	andeq	r6, r1, r0, ror #23
   1623c:	andeq	r6, r1, r0, ror #23
   16240:	andeq	r6, r1, r0, ror #23
   16244:	andeq	r6, r1, r0, ror #23
   16248:	andeq	r6, r1, r8, ror r4
   1624c:	andeq	r6, r1, r0, ror #23
   16250:	andeq	r6, r1, r0, ror #23
   16254:	andeq	r6, r1, r0, ror #23
   16258:	andeq	r6, r1, r0, ror #23
   1625c:	andeq	r6, r1, r0, ror #23
   16260:	andeq	r6, r1, r0, ror #23
   16264:	andeq	r6, r1, r0, ror #23
   16268:	andeq	r6, r1, r0, ror #23
   1626c:	andeq	r6, r1, r0, ror #23
   16270:	andeq	r6, r1, r0, ror #23
   16274:	andeq	r6, r1, r0, ror #23
   16278:	andeq	r6, r1, r0, ror #23
   1627c:	andeq	r6, r1, r0, ror #23
   16280:	andeq	r6, r1, r0, ror #23
   16284:	andeq	r6, r1, r0, ror #23
   16288:	andeq	r6, r1, r0, ror #23
   1628c:	andeq	r6, r1, r0, ror #23
   16290:	andeq	r6, r1, r0, ror #23
   16294:	andeq	r6, r1, r0, ror #23
   16298:	andeq	r6, r1, r0, ror #23
   1629c:	muleq	r1, r0, r4
   162a0:	andeq	r6, r1, r0, ror #23
   162a4:	andeq	r6, r1, r0, ror #23
   162a8:	andeq	r6, r1, r0, ror #23
   162ac:	andeq	r6, r1, r0, ror #23
   162b0:	andeq	r6, r1, r0, ror #23
   162b4:	andeq	r6, r1, r0, ror #23
   162b8:	andeq	r6, r1, r0, lsl #10
   162bc:	andeq	r6, r1, r0, lsr #10
   162c0:	andeq	r6, r1, r0, asr #10
   162c4:	andeq	r6, r1, r4, asr r5
   162c8:	andeq	r6, r1, r0, ror #23
   162cc:	andeq	r6, r1, r8, ror #10
   162d0:	andeq	r6, r1, r0, lsr #7
   162d4:	muleq	r1, r4, r5
   162d8:	andeq	r6, r1, r4, lsr #11
   162dc:	andeq	r6, r1, r0, ror #23
   162e0:	andeq	r6, r1, r0, ror #23
   162e4:	andeq	r6, r1, r0, ror #23
   162e8:			; <UNDEFINED> instruction: 0x000165b8
   162ec:	andeq	r6, r1, ip, asr #11
   162f0:	andeq	r6, r1, r0, ror #23
   162f4:	ldrdeq	r6, [r1], -r4
   162f8:	andeq	r6, r1, r0, ror #23
   162fc:	andeq	r6, r1, r0, lsl r7
   16300:	strdeq	r6, [r1], -r4
   16304:	andeq	r6, r1, r8, lsl #14
   16308:			; <UNDEFINED> instruction: 0x000167b8
   1630c:	andeq	r6, r1, r0, lsr #7
   16310:	andeq	r6, r1, ip, ror #15
   16314:	andeq	r6, r1, r4, asr #16
   16318:	andeq	r6, r1, r8, asr r8
   1631c:	andeq	r6, r1, r8, lsl #17
   16320:	andeq	r6, r1, r0, ror #23
   16324:	andeq	r6, r1, r0, ror #23
   16328:	andeq	r6, r1, r0, ror #23
   1632c:	andeq	r6, r1, r0, ror #23
   16330:	andeq	r6, r1, r0, ror #23
   16334:	andeq	r6, r1, r0, ror #23
   16338:	strdeq	r6, [r1], -r0
   1633c:	andeq	r6, r1, ip, asr r4
   16340:	andeq	r6, r1, r0, lsl r9
   16344:	andeq	r6, r1, r4, lsr #18
   16348:	andeq	r6, r1, r8, lsr r9
   1634c:	andeq	r6, r1, r0, ror #23
   16350:	andeq	r6, r1, r0, lsr #7
   16354:	andeq	r6, r1, ip, asr r4
   16358:	andeq	r6, r1, r0, ror #23
   1635c:	andeq	r6, r1, r8, asr #18
   16360:	andeq	r6, r1, r4, ror r9
   16364:	andeq	r6, r1, ip, lsl #19
   16368:			; <UNDEFINED> instruction: 0x000169b4
   1636c:	andeq	r6, r1, r0, ror #19
   16370:	andeq	r6, r1, r0, ror #23
   16374:	ldrdeq	r6, [r1], -r8
   16378:	andeq	r6, r1, r0, asr #20
   1637c:	ldrdeq	r7, [r1], -r8
   16380:	andeq	r6, r1, r4, ror #20
   16384:	andeq	r6, r1, r0, lsr fp
   16388:	muleq	r1, r0, fp
   1638c:	andeq	r6, r1, r0, ror #23
   16390:	andeq	r6, r1, r0, asr #23
   16394:	ldrdeq	r6, [r1], -r8
   16398:			; <UNDEFINED> instruction: 0x00016cbc
   1639c:			; <UNDEFINED> instruction: 0x000164b4
   163a0:	cmp	r5, #69	; 0x45
   163a4:	beq	16be0 <__assert_fail@plt+0x55a4>
   163a8:	str	r3, [sp, #84]	; 0x54
   163ac:	str	lr, [sp, #72]	; 0x48
   163b0:	str	ip, [sp, #80]	; 0x50
   163b4:	ldr	r0, [sp, #76]	; 0x4c
   163b8:	ldr	r2, [r0, #20]
   163bc:	ldr	r1, [r0, #24]
   163c0:	ldr	r7, [r0, #28]
   163c4:	mvn	r0, #99	; 0x63
   163c8:	cmp	r2, #0
   163cc:	movwlt	r0, #300	; 0x12c
   163d0:	str	r2, [sp, #24]
   163d4:	add	r8, r0, r2
   163d8:	mov	r0, r7
   163dc:	str	r1, [sp, #20]
   163e0:	bl	1773c <__assert_fail@plt+0x6100>
   163e4:	cmn	r0, #1
   163e8:	ble	16ce4 <__assert_fail@plt+0x56a8>
   163ec:	mov	r4, r0
   163f0:	movw	r0, #365	; 0x16d
   163f4:	tst	r8, #3
   163f8:	bne	1643c <__assert_fail@plt+0x4e00>
   163fc:	movw	r0, #34079	; 0x851f
   16400:	movt	r0, #20971	; 0x51eb
   16404:	smmul	r0, r8, r0
   16408:	asr	r1, r0, #5
   1640c:	add	r1, r1, r0, lsr #31
   16410:	mov	r2, #100	; 0x64
   16414:	mls	r1, r1, r2, r8
   16418:	asr	r2, r0, #7
   1641c:	add	r0, r2, r0, lsr #31
   16420:	mov	r2, #400	; 0x190
   16424:	mls	r2, r0, r2, r8
   16428:	movw	r0, #365	; 0x16d
   1642c:	cmp	r2, #0
   16430:	movweq	r0, #366	; 0x16e
   16434:	cmp	r1, #0
   16438:	movwne	r0, #366	; 0x16e
   1643c:	sub	r0, r7, r0
   16440:	ldr	r1, [sp, #20]
   16444:	bl	1773c <__assert_fail@plt+0x6100>
   16448:	cmn	r0, #1
   1644c:	movgt	r4, r0
   16450:	mov	r1, #1
   16454:	eor	r0, r1, r0, lsr #31
   16458:	b	16d48 <__assert_fail@plt+0x570c>
   1645c:	ldr	r0, [sp, #92]	; 0x5c
   16460:	orr	r0, r7, r0
   16464:	str	r0, [sp, #92]	; 0x5c
   16468:	mov	r8, #0
   1646c:	cmp	r5, #69	; 0x45
   16470:	beq	16be0 <__assert_fail@plt+0x55a4>
   16474:	b	172d8 <__assert_fail@plt+0x5c9c>
   16478:	sub	r0, r9, #1
   1647c:	ldr	r1, [sp, #84]	; 0x54
   16480:	cmp	r0, r1
   16484:	beq	16ecc <__assert_fail@plt+0x5890>
   16488:	sub	r9, r9, #1
   1648c:	b	16be0 <__assert_fail@plt+0x55a4>
   16490:	mov	r8, #1
   16494:	b	1649c <__assert_fail@plt+0x4e60>
   16498:	add	r8, r8, #1
   1649c:	ldrb	r0, [r9, r8]
   164a0:	cmp	r0, #58	; 0x3a
   164a4:	beq	16498 <__assert_fail@plt+0x4e5c>
   164a8:	cmp	r0, #122	; 0x7a
   164ac:	bne	16be0 <__assert_fail@plt+0x55a4>
   164b0:	add	r9, r9, r8
   164b4:	ldr	r1, [sp, #76]	; 0x4c
   164b8:	ldr	r0, [r1, #32]
   164bc:	cmp	r0, #0
   164c0:	blt	16db4 <__assert_fail@plt+0x5778>
   164c4:	ldr	r2, [r1, #36]	; 0x24
   164c8:	cmp	r2, #0
   164cc:	blt	16f3c <__assert_fail@plt+0x5900>
   164d0:	mov	r1, #0
   164d4:	bne	16f40 <__assert_fail@plt+0x5904>
   164d8:	ldr	r0, [sp, #44]	; 0x2c
   164dc:	ldrb	r0, [r0]
   164e0:	sub	r0, r0, #45	; 0x2d
   164e4:	clz	r0, r0
   164e8:	lsr	r1, r0, #5
   164ec:	cmp	r8, #3
   164f0:	bls	16f48 <__assert_fail@plt+0x590c>
   164f4:	ldr	r8, [sp, #92]	; 0x5c
   164f8:	ldr	r2, [sp, #84]	; 0x54
   164fc:	b	16be8 <__assert_fail@plt+0x55ac>
   16500:	cmp	r5, #0
   16504:	bne	16be0 <__assert_fail@plt+0x55a4>
   16508:	ldr	r0, [sp, #92]	; 0x5c
   1650c:	orr	r0, r7, r0
   16510:	str	r0, [sp, #92]	; 0x5c
   16514:	mov	r8, #0
   16518:	mov	r3, #65	; 0x41
   1651c:	b	172d8 <__assert_fail@plt+0x5c9c>
   16520:	cmp	r5, #69	; 0x45
   16524:	beq	16be0 <__assert_fail@plt+0x55a4>
   16528:	ldr	r0, [sp, #92]	; 0x5c
   1652c:	orr	r0, r7, r0
   16530:	str	r0, [sp, #92]	; 0x5c
   16534:	mov	r8, #0
   16538:	mov	r3, #66	; 0x42
   1653c:	b	172d8 <__assert_fail@plt+0x5c9c>
   16540:	cmp	r5, #69	; 0x45
   16544:	bne	16dbc <__assert_fail@plt+0x5780>
   16548:	mov	r8, #0
   1654c:	mov	r3, #67	; 0x43
   16550:	b	172d8 <__assert_fail@plt+0x5c9c>
   16554:	cmp	r5, #0
   16558:	bne	16be0 <__assert_fail@plt+0x55a4>
   1655c:	movw	r4, #54658	; 0xd582
   16560:	movt	r4, #1
   16564:	b	16710 <__assert_fail@plt+0x50d4>
   16568:	cmp	r5, #0
   1656c:	bne	16be0 <__assert_fail@plt+0x55a4>
   16570:	movw	r4, #54667	; 0xd58b
   16574:	movt	r4, #1
   16578:	cmp	sl, #0
   1657c:	bne	17048 <__assert_fail@plt+0x5a0c>
   16580:	cmp	r6, #0
   16584:	bge	17048 <__assert_fail@plt+0x5a0c>
   16588:	mov	sl, #43	; 0x2b
   1658c:	mov	r1, #4
   16590:	b	16710 <__assert_fail@plt+0x50d4>
   16594:	cmp	r5, #69	; 0x45
   16598:	beq	16be0 <__assert_fail@plt+0x55a4>
   1659c:	ldr	r0, [sp, #40]	; 0x28
   165a0:	b	16700 <__assert_fail@plt+0x50c4>
   165a4:	mov	r4, #2
   165a8:	cmp	r5, #69	; 0x45
   165ac:	beq	16be0 <__assert_fail@plt+0x55a4>
   165b0:	ldr	r0, [sp, #36]	; 0x24
   165b4:	b	16ea4 <__assert_fail@plt+0x5868>
   165b8:	cmp	r5, #69	; 0x45
   165bc:	beq	16be0 <__assert_fail@plt+0x55a4>
   165c0:	ldr	r0, [sp, #76]	; 0x4c
   165c4:	ldr	r0, [r0, #4]
   165c8:	b	16ea0 <__assert_fail@plt+0x5864>
   165cc:	cmp	r5, #69	; 0x45
   165d0:	beq	16be0 <__assert_fail@plt+0x55a4>
   165d4:	cmp	r6, #1
   165d8:	movwlt	r6, #9
   165dc:	mov	r4, #9
   165e0:	mov	r0, #8
   165e4:	ldr	r1, [fp, #24]
   165e8:	ldr	r5, [sp, #92]	; 0x5c
   165ec:	cmp	r6, r4
   165f0:	bge	16618 <__assert_fail@plt+0x4fdc>
   165f4:	movw	r2, #26215	; 0x6667
   165f8:	movt	r2, #26214	; 0x6666
   165fc:	smmul	r1, r1, r2
   16600:	asr	r2, r1, #2
   16604:	add	r1, r2, r1, lsr #31
   16608:	sub	r0, r0, #1
   1660c:	sub	r4, r4, #1
   16610:	cmp	r6, r4
   16614:	blt	165f4 <__assert_fail@plt+0x4fb8>
   16618:	movw	r2, #26215	; 0x6667
   1661c:	movt	r2, #26214	; 0x6666
   16620:	cmp	r4, #2
   16624:	blt	16644 <__assert_fail@plt+0x5008>
   16628:	smmul	r3, r1, r2
   1662c:	asr	r7, r3, #2
   16630:	add	r3, r7, r3, lsr #31
   16634:	add	r3, r3, r3, lsl #2
   16638:	sub	r3, r1, r3, lsl #1
   1663c:	cmp	r3, #0
   16640:	beq	165f4 <__assert_fail@plt+0x4fb8>
   16644:	cmp	r4, #1
   16648:	sub	r5, fp, #48	; 0x30
   1664c:	blt	16684 <__assert_fail@plt+0x5048>
   16650:	smmul	r3, r1, r2
   16654:	asr	r7, r3, #2
   16658:	add	r3, r7, r3, lsr #31
   1665c:	add	r7, r3, r3, lsl #2
   16660:	sub	r1, r1, r7, lsl #1
   16664:	add	r1, r1, #48	; 0x30
   16668:	strb	r1, [r5, r0]
   1666c:	sub	r1, r0, #1
   16670:	add	r0, r0, #1
   16674:	cmp	r0, #1
   16678:	mov	r0, r1
   1667c:	mov	r1, r3
   16680:	bgt	16650 <__assert_fail@plt+0x5014>
   16684:	ldr	r0, [sp, #88]	; 0x58
   16688:	sub	r5, r0, ip
   1668c:	cmp	sl, #0
   16690:	movweq	sl, #48	; 0x30
   16694:	cmp	r4, r5
   16698:	bcs	176a0 <__assert_fail@plt+0x6064>
   1669c:	mov	r8, #0
   166a0:	cmp	lr, #0
   166a4:	mov	r7, #0
   166a8:	beq	17140 <__assert_fail@plt+0x5b04>
   166ac:	str	ip, [sp, #80]	; 0x50
   166b0:	ldr	r0, [sp, #92]	; 0x5c
   166b4:	sub	r1, fp, #48	; 0x30
   166b8:	tst	r0, #1
   166bc:	beq	17128 <__assert_fail@plt+0x5aec>
   166c0:	mov	r0, lr
   166c4:	mov	r2, r4
   166c8:	mov	r7, lr
   166cc:	bl	17700 <__assert_fail@plt+0x60c4>
   166d0:	b	17138 <__assert_fail@plt+0x5afc>
   166d4:	mov	r8, #1
   166d8:	orr	r8, r7, r8
   166dc:	eor	r0, r7, #1
   166e0:	ldr	r1, [sp, #92]	; 0x5c
   166e4:	and	r1, r1, r0
   166e8:	str	r1, [sp, #92]	; 0x5c
   166ec:	mov	r3, #112	; 0x70
   166f0:	b	172d8 <__assert_fail@plt+0x5c9c>
   166f4:	cmp	r5, #69	; 0x45
   166f8:	beq	16be0 <__assert_fail@plt+0x55a4>
   166fc:	ldr	r0, [sp, #76]	; 0x4c
   16700:	ldr	r0, [r0]
   16704:	b	16ea0 <__assert_fail@plt+0x5864>
   16708:	movw	r4, #54676	; 0xd594
   1670c:	movt	r4, #1
   16710:	str	lr, [sp, #72]	; 0x48
   16714:	ldr	r0, [sp, #92]	; 0x5c
   16718:	and	r5, r0, #1
   1671c:	stm	sp, {r5, sl}
   16720:	str	r1, [sp, #92]	; 0x5c
   16724:	str	r1, [sp, #8]
   16728:	ldr	r0, [fp, #20]
   1672c:	str	r0, [sp, #12]
   16730:	ldr	r0, [fp, #24]
   16734:	str	r0, [sp, #16]
   16738:	mov	r0, #0
   1673c:	mvn	r1, #0
   16740:	mov	r2, r4
   16744:	ldr	r3, [sp, #76]	; 0x4c
   16748:	str	ip, [sp, #80]	; 0x50
   1674c:	bl	15efc <__assert_fail@plt+0x48c0>
   16750:	ldr	ip, [sp, #80]	; 0x50
   16754:	mov	r8, r0
   16758:	subs	r0, sl, #45	; 0x2d
   1675c:	movne	r0, r6
   16760:	cmp	r6, #0
   16764:	movwlt	r0, #0
   16768:	cmp	r0, r8
   1676c:	mov	r7, r8
   16770:	movhi	r7, r0
   16774:	ldr	r1, [sp, #88]	; 0x58
   16778:	sub	r6, r1, ip
   1677c:	cmp	r7, r6
   16780:	bcs	176a0 <__assert_fail@plt+0x6064>
   16784:	str	r5, [sp, #84]	; 0x54
   16788:	ldr	r5, [sp, #72]	; 0x48
   1678c:	cmp	r5, #0
   16790:	beq	16cd0 <__assert_fail@plt+0x5694>
   16794:	cmp	r0, r8
   16798:	bls	16cd8 <__assert_fail@plt+0x569c>
   1679c:	sub	r2, r0, r8
   167a0:	cmp	sl, #48	; 0x30
   167a4:	cmpne	sl, #43	; 0x2b
   167a8:	bne	16fd8 <__assert_fail@plt+0x599c>
   167ac:	mov	r0, r5
   167b0:	mov	r1, #48	; 0x30
   167b4:	b	16fe0 <__assert_fail@plt+0x59a4>
   167b8:	cmp	r5, #69	; 0x45
   167bc:	beq	16be0 <__assert_fail@plt+0x55a4>
   167c0:	ldr	r1, [sp, #76]	; 0x4c
   167c4:	ldr	r0, [r1, #24]
   167c8:	ldr	r1, [r1, #28]
   167cc:	add	r1, r1, #7
   167d0:	sub	r0, r1, r0
   167d4:	movw	r1, #9363	; 0x2493
   167d8:	movt	r1, #37449	; 0x9249
   167dc:	smmla	r0, r0, r1, r0
   167e0:	asr	r1, r0, #2
   167e4:	add	r0, r1, r0, lsr #31
   167e8:	b	16ea0 <__assert_fail@plt+0x5864>
   167ec:	cmp	r5, #69	; 0x45
   167f0:	beq	16be0 <__assert_fail@plt+0x55a4>
   167f4:	ldr	r1, [sp, #76]	; 0x4c
   167f8:	ldr	r0, [r1, #24]
   167fc:	ldr	r1, [r1, #28]
   16800:	add	r0, r0, #6
   16804:	movw	r2, #9363	; 0x2493
   16808:	movt	r2, #37449	; 0x9249
   1680c:	mov	r4, r3
   16810:	smmla	r3, r0, r2, r0
   16814:	asr	r7, r3, #2
   16818:	add	r3, r7, r3, lsr #31
   1681c:	ldr	r8, [sp, #92]	; 0x5c
   16820:	rsb	r3, r3, r3, lsl #3
   16824:	sub	r0, r3, r0
   16828:	mov	r3, r4
   1682c:	add	r0, r1, r0
   16830:	add	r0, r0, #7
   16834:	smmla	r0, r0, r2, r0
   16838:	asr	r1, r0, #2
   1683c:	add	r0, r1, r0, lsr #31
   16840:	b	169ac <__assert_fail@plt+0x5370>
   16844:	cmp	r5, #79	; 0x4f
   16848:	beq	16be0 <__assert_fail@plt+0x55a4>
   1684c:	mov	r8, #0
   16850:	mov	r3, #88	; 0x58
   16854:	b	172d8 <__assert_fail@plt+0x5c9c>
   16858:	cmp	r5, #69	; 0x45
   1685c:	beq	16fc4 <__assert_fail@plt+0x5988>
   16860:	cmp	r5, #79	; 0x4f
   16864:	beq	16be0 <__assert_fail@plt+0x55a4>
   16868:	ldr	r0, [sp, #76]	; 0x4c
   1686c:	ldr	r0, [r0, #20]
   16870:	movw	r2, #63636	; 0xf894
   16874:	movt	r2, #65535	; 0xffff
   16878:	mov	r1, #0
   1687c:	cmp	r0, r2
   16880:	movwlt	r1, #1
   16884:	b	16e78 <__assert_fail@plt+0x583c>
   16888:	str	lr, [sp, #72]	; 0x48
   1688c:	subs	r8, sl, #45	; 0x2d
   16890:	bicne	r8, r6, r6, asr #31
   16894:	ldr	r0, [sp, #44]	; 0x2c
   16898:	mov	r6, ip
   1689c:	bl	114ec <strlen@plt>
   168a0:	mov	r4, r0
   168a4:	cmp	r8, r0
   168a8:	mov	r5, r0
   168ac:	movhi	r5, r8
   168b0:	ldr	r0, [sp, #88]	; 0x58
   168b4:	sub	r0, r0, r6
   168b8:	cmp	r5, r0
   168bc:	bcs	176a0 <__assert_fail@plt+0x6064>
   168c0:	ldr	r0, [sp, #72]	; 0x48
   168c4:	cmp	r0, #0
   168c8:	beq	16f34 <__assert_fail@plt+0x58f8>
   168cc:	cmp	r8, r4
   168d0:	bls	16fd0 <__assert_fail@plt+0x5994>
   168d4:	sub	r8, r8, r4
   168d8:	uxtb	r1, sl
   168dc:	cmp	r1, #48	; 0x30
   168e0:	cmpne	r1, #43	; 0x2b
   168e4:	bne	1718c <__assert_fail@plt+0x5b50>
   168e8:	mov	r1, #48	; 0x30
   168ec:	b	17190 <__assert_fail@plt+0x5b54>
   168f0:	cmp	r5, #0
   168f4:	bne	16be0 <__assert_fail@plt+0x55a4>
   168f8:	ldr	r0, [sp, #92]	; 0x5c
   168fc:	orr	r0, r7, r0
   16900:	str	r0, [sp, #92]	; 0x5c
   16904:	mov	r8, #0
   16908:	mov	r3, #97	; 0x61
   1690c:	b	172d8 <__assert_fail@plt+0x5c9c>
   16910:	cmp	r5, #79	; 0x4f
   16914:	beq	16be0 <__assert_fail@plt+0x55a4>
   16918:	mov	r8, #0
   1691c:	mov	r3, #99	; 0x63
   16920:	b	172d8 <__assert_fail@plt+0x5c9c>
   16924:	cmp	r5, #69	; 0x45
   16928:	beq	16be0 <__assert_fail@plt+0x55a4>
   1692c:	ldr	r0, [sp, #76]	; 0x4c
   16930:	ldr	r0, [r0, #12]
   16934:	b	16ea0 <__assert_fail@plt+0x5864>
   16938:	cmp	r5, #69	; 0x45
   1693c:	ldr	r0, [sp, #32]
   16940:	bne	16980 <__assert_fail@plt+0x5344>
   16944:	b	16be0 <__assert_fail@plt+0x55a4>
   16948:	cmp	r5, #69	; 0x45
   1694c:	beq	16be0 <__assert_fail@plt+0x55a4>
   16950:	ldr	r0, [sp, #76]	; 0x4c
   16954:	ldr	r0, [r0, #28]
   16958:	mov	r1, #0
   1695c:	cmn	r0, #1
   16960:	movwlt	r1, #1
   16964:	add	r0, r0, #1
   16968:	mov	r4, #3
   1696c:	ldr	r8, [sp, #92]	; 0x5c
   16970:	b	16eac <__assert_fail@plt+0x5870>
   16974:	cmp	r5, #69	; 0x45
   16978:	ldr	r0, [sp, #40]	; 0x28
   1697c:	beq	16be0 <__assert_fail@plt+0x55a4>
   16980:	ldr	r0, [r0]
   16984:	ldr	r8, [sp, #92]	; 0x5c
   16988:	b	169a4 <__assert_fail@plt+0x5368>
   1698c:	cmp	r5, #69	; 0x45
   16990:	ldr	r0, [sp, #36]	; 0x24
   16994:	ldr	r8, [sp, #92]	; 0x5c
   16998:	bne	169a4 <__assert_fail@plt+0x5368>
   1699c:	ldr	r2, [sp, #84]	; 0x54
   169a0:	b	16be8 <__assert_fail@plt+0x55ac>
   169a4:	cmp	sl, #0
   169a8:	movweq	sl, #95	; 0x5f
   169ac:	mov	r4, #2
   169b0:	b	16ea8 <__assert_fail@plt+0x586c>
   169b4:	cmp	r5, #69	; 0x45
   169b8:	beq	16be0 <__assert_fail@plt+0x55a4>
   169bc:	ldr	r0, [sp, #76]	; 0x4c
   169c0:	ldr	r0, [r0, #16]
   169c4:	mov	r1, #0
   169c8:	cmn	r0, #1
   169cc:	movwlt	r1, #1
   169d0:	add	r0, r0, #1
   169d4:	mov	r4, #2
   169d8:	ldr	r8, [sp, #92]	; 0x5c
   169dc:	b	16eac <__assert_fail@plt+0x5870>
   169e0:	subs	r0, sl, #45	; 0x2d
   169e4:	bicne	r0, r6, r6, asr #31
   169e8:	cmp	r0, #1
   169ec:	mov	r5, r0
   169f0:	movls	r5, #1
   169f4:	ldr	r1, [sp, #88]	; 0x58
   169f8:	sub	r1, r1, ip
   169fc:	cmp	r5, r1
   16a00:	bcs	176a0 <__assert_fail@plt+0x6064>
   16a04:	cmp	lr, #0
   16a08:	mov	r8, #-2147483648	; 0x80000000
   16a0c:	movw	r3, #52428	; 0xcccc
   16a10:	movt	r3, #3276	; 0xccc
   16a14:	beq	16f2c <__assert_fail@plt+0x58f0>
   16a18:	cmp	r0, #2
   16a1c:	bcc	1722c <__assert_fail@plt+0x5bf0>
   16a20:	uxtb	r1, sl
   16a24:	sub	r4, r0, #1
   16a28:	cmp	r1, #48	; 0x30
   16a2c:	cmpne	r1, #43	; 0x2b
   16a30:	bne	171fc <__assert_fail@plt+0x5bc0>
   16a34:	mov	r0, lr
   16a38:	mov	r1, #48	; 0x30
   16a3c:	b	17204 <__assert_fail@plt+0x5bc8>
   16a40:	ldr	r0, [sp, #76]	; 0x4c
   16a44:	ldr	r0, [r0, #16]
   16a48:	mov	r1, #11
   16a4c:	mul	r0, r0, r1
   16a50:	mov	r4, #1
   16a54:	add	r0, r4, r0, asr #5
   16a58:	mov	r1, #0
   16a5c:	ldr	r8, [sp, #92]	; 0x5c
   16a60:	b	16eac <__assert_fail@plt+0x5870>
   16a64:	str	lr, [sp, #72]	; 0x48
   16a68:	str	ip, [sp, #80]	; 0x50
   16a6c:	mov	r0, #28
   16a70:	ldr	r2, [sp, #76]	; 0x4c
   16a74:	mov	r3, r2
   16a78:	vld1.32	{d16-d17}, [r3], r0
   16a7c:	add	r2, r2, #16
   16a80:	vld1.32	{d18-d19}, [r2]
   16a84:	add	r1, sp, #96	; 0x60
   16a88:	add	r2, r1, #16
   16a8c:	vld1.32	{d20-d21}, [r3]
   16a90:	vst1.64	{d18-d19}, [r2]
   16a94:	mov	r4, r1
   16a98:	vst1.64	{d16-d17}, [r4], r0
   16a9c:	vst1.32	{d20-d21}, [r4]
   16aa0:	mvn	r0, #0
   16aa4:	str	r0, [r4]
   16aa8:	ldr	r0, [fp, #20]
   16aac:	bl	19808 <__assert_fail@plt+0x81cc>
   16ab0:	ldr	r1, [r4]
   16ab4:	cmp	r1, #0
   16ab8:	blt	176bc <__assert_fail@plt+0x6080>
   16abc:	lsr	r1, r0, #31
   16ac0:	ldr	r2, [sp, #28]
   16ac4:	mov	r3, r0
   16ac8:	movw	r7, #26215	; 0x6667
   16acc:	movt	r7, #26214	; 0x6666
   16ad0:	smmul	r7, r3, r7
   16ad4:	asr	r5, r7, #2
   16ad8:	add	r7, r5, r7, lsr #31
   16adc:	add	r5, r7, r7, lsl #2
   16ae0:	sub	r5, r3, r5, lsl #1
   16ae4:	cmp	r0, #0
   16ae8:	rsblt	r5, r5, #0
   16aec:	add	r5, r5, #48	; 0x30
   16af0:	strb	r5, [r2], #-1
   16af4:	add	r3, r3, #9
   16af8:	cmp	r3, #18
   16afc:	mov	r3, r7
   16b00:	bhi	16ac8 <__assert_fail@plt+0x548c>
   16b04:	add	r8, r2, #1
   16b08:	cmp	r6, #0
   16b0c:	movwlt	r6, #1
   16b10:	cmp	sl, #0
   16b14:	movweq	sl, #48	; 0x30
   16b18:	mov	r2, #0
   16b1c:	mov	r4, r6
   16b20:	str	r9, [sp, #84]	; 0x54
   16b24:	ldr	ip, [sp, #80]	; 0x50
   16b28:	ldr	lr, [sp, #72]	; 0x48
   16b2c:	b	17428 <__assert_fail@plt+0x5dec>
   16b30:	subs	r0, sl, #45	; 0x2d
   16b34:	bicne	r0, r6, r6, asr #31
   16b38:	cmp	r0, #1
   16b3c:	mov	r5, r0
   16b40:	movls	r5, #1
   16b44:	ldr	r1, [sp, #88]	; 0x58
   16b48:	sub	r1, r1, ip
   16b4c:	cmp	r5, r1
   16b50:	bcs	176a0 <__assert_fail@plt+0x6064>
   16b54:	cmp	lr, #0
   16b58:	mov	r8, #-2147483648	; 0x80000000
   16b5c:	movw	r3, #52428	; 0xcccc
   16b60:	movt	r3, #3276	; 0xccc
   16b64:	beq	16f2c <__assert_fail@plt+0x58f0>
   16b68:	cmp	r0, #2
   16b6c:	bcc	17264 <__assert_fail@plt+0x5c28>
   16b70:	uxtb	r1, sl
   16b74:	sub	r4, r0, #1
   16b78:	cmp	r1, #48	; 0x30
   16b7c:	cmpne	r1, #43	; 0x2b
   16b80:	bne	17234 <__assert_fail@plt+0x5bf8>
   16b84:	mov	r0, lr
   16b88:	mov	r1, #48	; 0x30
   16b8c:	b	1723c <__assert_fail@plt+0x5c00>
   16b90:	ldr	r0, [sp, #76]	; 0x4c
   16b94:	ldr	r0, [r0, #24]
   16b98:	add	r0, r0, #6
   16b9c:	movw	r1, #9363	; 0x2493
   16ba0:	movt	r1, #37449	; 0x9249
   16ba4:	smmla	r1, r0, r1, r0
   16ba8:	asr	r2, r1, #2
   16bac:	add	r1, r2, r1, lsr #31
   16bb0:	rsb	r1, r1, r1, lsl #3
   16bb4:	sub	r0, r0, r1
   16bb8:	add	r0, r0, #1
   16bbc:	b	16bd0 <__assert_fail@plt+0x5594>
   16bc0:	cmp	r5, #69	; 0x45
   16bc4:	beq	16be0 <__assert_fail@plt+0x55a4>
   16bc8:	ldr	r0, [sp, #76]	; 0x4c
   16bcc:	ldr	r0, [r0, #24]
   16bd0:	mov	r4, #1
   16bd4:	b	16ea4 <__assert_fail@plt+0x5868>
   16bd8:	cmp	r5, #79	; 0x4f
   16bdc:	bne	16e14 <__assert_fail@plt+0x57d8>
   16be0:	ldr	r2, [sp, #84]	; 0x54
   16be4:	ldr	r8, [sp, #92]	; 0x5c
   16be8:	subs	r0, sl, #45	; 0x2d
   16bec:	bicne	r0, r6, r6, asr #31
   16bf0:	sub	r1, r9, r2
   16bf4:	add	r4, r1, #1
   16bf8:	cmp	r0, r4
   16bfc:	mov	r5, r4
   16c00:	movhi	r5, r0
   16c04:	ldr	r1, [sp, #88]	; 0x58
   16c08:	sub	r1, r1, ip
   16c0c:	cmp	r5, r1
   16c10:	bcs	176a0 <__assert_fail@plt+0x6064>
   16c14:	cmp	lr, #0
   16c18:	beq	16c4c <__assert_fail@plt+0x5610>
   16c1c:	cmp	r0, r4
   16c20:	bls	16c7c <__assert_fail@plt+0x5640>
   16c24:	mov	r7, r8
   16c28:	str	ip, [sp, #80]	; 0x50
   16c2c:	sub	r8, r0, r4
   16c30:	uxtb	r0, sl
   16c34:	cmp	r0, #48	; 0x30
   16c38:	cmpne	r0, #43	; 0x2b
   16c3c:	bne	16c54 <__assert_fail@plt+0x5618>
   16c40:	mov	r0, lr
   16c44:	mov	r1, #48	; 0x30
   16c48:	b	16c5c <__assert_fail@plt+0x5620>
   16c4c:	mov	lr, #0
   16c50:	b	16cb0 <__assert_fail@plt+0x5674>
   16c54:	mov	r0, lr
   16c58:	mov	r1, #32
   16c5c:	mov	r2, r8
   16c60:	mov	r6, lr
   16c64:	bl	11540 <memset@plt>
   16c68:	add	r6, r6, r8
   16c6c:	ldr	ip, [sp, #80]	; 0x50
   16c70:	mov	lr, r6
   16c74:	ldr	r2, [sp, #84]	; 0x54
   16c78:	mov	r8, r7
   16c7c:	mov	r0, lr
   16c80:	mov	r1, r2
   16c84:	mov	r2, r4
   16c88:	mov	r6, ip
   16c8c:	mov	r7, lr
   16c90:	tst	r8, #1
   16c94:	beq	16ca0 <__assert_fail@plt+0x5664>
   16c98:	bl	17700 <__assert_fail@plt+0x60c4>
   16c9c:	b	16ca4 <__assert_fail@plt+0x5668>
   16ca0:	bl	11384 <memcpy@plt>
   16ca4:	mov	lr, r7
   16ca8:	mov	ip, r6
   16cac:	add	lr, r7, r4
   16cb0:	add	ip, r5, ip
   16cb4:	mov	r7, r9
   16cb8:	b	1761c <__assert_fail@plt+0x5fe0>
   16cbc:	cmp	r5, #69	; 0x45
   16cc0:	bne	16e20 <__assert_fail@plt+0x57e4>
   16cc4:	mov	r8, #0
   16cc8:	mov	r3, #121	; 0x79
   16ccc:	b	172d8 <__assert_fail@plt+0x5c9c>
   16cd0:	mov	lr, #0
   16cd4:	b	17034 <__assert_fail@plt+0x59f8>
   16cd8:	ldr	r3, [sp, #76]	; 0x4c
   16cdc:	ldr	r0, [sp, #92]	; 0x5c
   16ce0:	b	16ffc <__assert_fail@plt+0x59c0>
   16ce4:	sub	r0, r8, #1
   16ce8:	movw	r1, #365	; 0x16d
   16cec:	tst	r0, #3
   16cf0:	bne	16d34 <__assert_fail@plt+0x56f8>
   16cf4:	movw	r1, #34079	; 0x851f
   16cf8:	movt	r1, #20971	; 0x51eb
   16cfc:	smmul	r1, r0, r1
   16d00:	asr	r2, r1, #5
   16d04:	add	r2, r2, r1, lsr #31
   16d08:	mov	r3, #100	; 0x64
   16d0c:	mls	r2, r2, r3, r0
   16d10:	asr	r3, r1, #7
   16d14:	add	r1, r3, r1, lsr #31
   16d18:	mov	r3, #400	; 0x190
   16d1c:	mls	r0, r1, r3, r0
   16d20:	movw	r1, #365	; 0x16d
   16d24:	cmp	r0, #0
   16d28:	movweq	r1, #366	; 0x16e
   16d2c:	cmp	r2, #0
   16d30:	movwne	r1, #366	; 0x16e
   16d34:	add	r0, r1, r7
   16d38:	ldr	r1, [sp, #20]
   16d3c:	bl	1773c <__assert_fail@plt+0x6100>
   16d40:	mov	r4, r0
   16d44:	mvn	r0, #0
   16d48:	ldr	ip, [sp, #80]	; 0x50
   16d4c:	ldr	lr, [sp, #72]	; 0x48
   16d50:	ldr	r3, [sp, #84]	; 0x54
   16d54:	ldr	r8, [sp, #24]
   16d58:	cmp	r3, #71	; 0x47
   16d5c:	beq	16e5c <__assert_fail@plt+0x5820>
   16d60:	cmp	r3, #103	; 0x67
   16d64:	bne	16e88 <__assert_fail@plt+0x584c>
   16d68:	movw	r1, #34079	; 0x851f
   16d6c:	movt	r1, #20971	; 0x51eb
   16d70:	smmul	r2, r8, r1
   16d74:	asr	r3, r2, #5
   16d78:	add	r2, r3, r2, lsr #31
   16d7c:	mov	r3, #100	; 0x64
   16d80:	mls	r2, r2, r3, r8
   16d84:	add	r2, r0, r2
   16d88:	smmul	r1, r2, r1
   16d8c:	asr	r7, r1, #5
   16d90:	add	r1, r7, r1, lsr #31
   16d94:	mls	r2, r1, r3, r2
   16d98:	mov	r4, #2
   16d9c:	mov	r1, #0
   16da0:	cmn	r2, #1
   16da4:	ble	17054 <__assert_fail@plt+0x5a18>
   16da8:	mov	r0, r2
   16dac:	ldr	r3, [sp, #84]	; 0x54
   16db0:	b	17090 <__assert_fail@plt+0x5a54>
   16db4:	mov	r7, r9
   16db8:	b	1761c <__assert_fail@plt+0x5fe0>
   16dbc:	ldr	r0, [sp, #76]	; 0x4c
   16dc0:	ldr	r2, [r0, #20]
   16dc4:	mov	r4, r3
   16dc8:	movw	r3, #63636	; 0xf894
   16dcc:	movt	r3, #65535	; 0xffff
   16dd0:	mov	r1, #0
   16dd4:	cmp	r2, r3
   16dd8:	mov	r0, #0
   16ddc:	movwge	r0, #1
   16de0:	and	r0, r0, r2, lsr #31
   16de4:	mvn	r7, #98	; 0x62
   16de8:	smlabb	r0, r0, r7, r2
   16dec:	movw	r7, #34079	; 0x851f
   16df0:	movt	r7, #20971	; 0x51eb
   16df4:	smmul	r0, r0, r7
   16df8:	asr	r7, r0, #5
   16dfc:	add	r0, r7, r0, lsr #31
   16e00:	add	r0, r0, #19
   16e04:	cmp	r2, r3
   16e08:	mov	r3, r4
   16e0c:	movwlt	r1, #1
   16e10:	b	1708c <__assert_fail@plt+0x5a50>
   16e14:	mov	r8, #0
   16e18:	mov	r3, #120	; 0x78
   16e1c:	b	172d8 <__assert_fail@plt+0x5c9c>
   16e20:	mov	r4, r3
   16e24:	ldr	r0, [sp, #76]	; 0x4c
   16e28:	ldr	r2, [r0, #20]
   16e2c:	movw	r0, #34079	; 0x851f
   16e30:	movt	r0, #20971	; 0x51eb
   16e34:	smmul	r0, r2, r0
   16e38:	asr	r1, r0, #5
   16e3c:	add	r0, r1, r0, lsr #31
   16e40:	mov	r1, #100	; 0x64
   16e44:	mls	r3, r0, r1, r2
   16e48:	mov	r1, #0
   16e4c:	cmn	r3, #1
   16e50:	ble	17074 <__assert_fail@plt+0x5a38>
   16e54:	mov	r0, r3
   16e58:	b	17088 <__assert_fail@plt+0x5a4c>
   16e5c:	movw	r1, #63636	; 0xf894
   16e60:	movt	r1, #65535	; 0xffff
   16e64:	sub	r2, r1, r0
   16e68:	mov	r1, #0
   16e6c:	cmp	r8, r2
   16e70:	movwlt	r1, #1
   16e74:	add	r0, r8, r0
   16e78:	movw	r2, #1900	; 0x76c
   16e7c:	add	r0, r0, r2
   16e80:	mov	r4, #4
   16e84:	b	17090 <__assert_fail@plt+0x5a54>
   16e88:	movw	r0, #9363	; 0x2493
   16e8c:	movt	r0, #37449	; 0x9249
   16e90:	smmla	r0, r4, r0, r4
   16e94:	asr	r1, r0, #2
   16e98:	add	r0, r1, r0, lsr #31
   16e9c:	add	r0, r0, #1
   16ea0:	mov	r4, #2
   16ea4:	ldr	r8, [sp, #92]	; 0x5c
   16ea8:	lsr	r1, r0, #31
   16eac:	cmp	r1, #0
   16eb0:	movwne	r1, #1
   16eb4:	mov	r2, #0
   16eb8:	mov	r7, #0
   16ebc:	str	r7, [sp, #72]	; 0x48
   16ec0:	cmp	r5, #79	; 0x4f
   16ec4:	beq	172c8 <__assert_fail@plt+0x5c8c>
   16ec8:	b	173b0 <__assert_fail@plt+0x5d74>
   16ecc:	subs	r0, sl, #45	; 0x2d
   16ed0:	bicne	r0, r6, r6, asr #31
   16ed4:	cmp	r0, #1
   16ed8:	mov	r5, r0
   16edc:	movls	r5, #1
   16ee0:	ldr	r1, [sp, #88]	; 0x58
   16ee4:	sub	r1, r1, ip
   16ee8:	cmp	r5, r1
   16eec:	bcs	176a0 <__assert_fail@plt+0x6064>
   16ef0:	cmp	lr, #0
   16ef4:	mov	r8, #-2147483648	; 0x80000000
   16ef8:	movw	r3, #52428	; 0xcccc
   16efc:	movt	r3, #3276	; 0xccc
   16f00:	beq	16f2c <__assert_fail@plt+0x58f0>
   16f04:	cmp	r0, #2
   16f08:	bcc	1765c <__assert_fail@plt+0x6020>
   16f0c:	uxtb	r1, sl
   16f10:	sub	r4, r0, #1
   16f14:	cmp	r1, #48	; 0x30
   16f18:	cmpne	r1, #43	; 0x2b
   16f1c:	bne	1762c <__assert_fail@plt+0x5ff0>
   16f20:	mov	r0, lr
   16f24:	mov	r1, #48	; 0x30
   16f28:	b	17634 <__assert_fail@plt+0x5ff8>
   16f2c:	mov	lr, #0
   16f30:	b	17664 <__assert_fail@plt+0x6028>
   16f34:	mov	ip, r6
   16f38:	b	17398 <__assert_fail@plt+0x5d5c>
   16f3c:	mov	r1, #1
   16f40:	cmp	r8, #3
   16f44:	bhi	164f4 <__assert_fail@plt+0x4eb8>
   16f48:	str	r3, [sp, #84]	; 0x54
   16f4c:	movw	r0, #34953	; 0x8889
   16f50:	movt	r0, #34952	; 0x8888
   16f54:	smmla	r3, r2, r0, r2
   16f58:	asr	r7, r3, #5
   16f5c:	add	r7, r7, r3, lsr #31
   16f60:	smmla	r0, r7, r0, r7
   16f64:	asr	r3, r0, #5
   16f68:	add	r0, r3, r0, lsr #31
   16f6c:	rsb	r0, r0, r0, lsl #4
   16f70:	sub	r3, r7, r0, lsl #2
   16f74:	movw	r0, #46021	; 0xb3c5
   16f78:	movt	r0, #37282	; 0x91a2
   16f7c:	smmla	r0, r2, r0, r2
   16f80:	asr	r4, r0, #11
   16f84:	add	r0, r4, r0, lsr #31
   16f88:	rsb	r7, r7, r7, lsl #4
   16f8c:	sub	r2, r2, r7, lsl #2
   16f90:	add	r7, pc, #0
   16f94:	ldr	pc, [r7, r8, lsl #2]
   16f98:	andeq	r6, r1, r8, lsr #31
   16f9c:	andeq	r7, r1, r0, lsr #5
   16fa0:	andeq	r7, r1, r4, lsl #2
   16fa4:	strdeq	r7, [r1], -ip
   16fa8:	mov	r2, #100	; 0x64
   16fac:	mla	r0, r0, r2, r3
   16fb0:	mov	r4, #5
   16fb4:	mov	r2, #1
   16fb8:	str	r2, [sp, #72]	; 0x48
   16fbc:	mov	r2, #0
   16fc0:	b	172b8 <__assert_fail@plt+0x5c7c>
   16fc4:	mov	r8, #0
   16fc8:	mov	r3, #89	; 0x59
   16fcc:	b	172d8 <__assert_fail@plt+0x5c9c>
   16fd0:	ldr	r1, [sp, #44]	; 0x2c
   16fd4:	b	171a4 <__assert_fail@plt+0x5b68>
   16fd8:	mov	r0, r5
   16fdc:	mov	r1, #32
   16fe0:	mov	r5, r2
   16fe4:	bl	11540 <memset@plt>
   16fe8:	mov	r1, r5
   16fec:	ldr	r5, [sp, #72]	; 0x48
   16ff0:	ldr	r3, [sp, #76]	; 0x4c
   16ff4:	ldr	r0, [sp, #92]	; 0x5c
   16ff8:	add	r5, r5, r1
   16ffc:	ldr	r1, [sp, #84]	; 0x54
   17000:	stm	sp, {r1, sl}
   17004:	str	r0, [sp, #8]
   17008:	ldr	r0, [fp, #20]
   1700c:	str	r0, [sp, #12]
   17010:	ldr	r0, [fp, #24]
   17014:	str	r0, [sp, #16]
   17018:	mov	r0, r5
   1701c:	mov	r1, r6
   17020:	mov	r2, r4
   17024:	bl	15efc <__assert_fail@plt+0x48c0>
   17028:	mov	lr, r5
   1702c:	add	lr, r5, r8
   17030:	ldr	ip, [sp, #80]	; 0x50
   17034:	mov	r8, #-2147483648	; 0x80000000
   17038:	movw	r3, #52428	; 0xcccc
   1703c:	movt	r3, #3276	; 0xccc
   17040:	add	ip, r7, ip
   17044:	b	17668 <__assert_fail@plt+0x602c>
   17048:	sub	r0, r6, #6
   1704c:	bic	r1, r0, r0, asr #31
   17050:	b	16710 <__assert_fail@plt+0x50d4>
   17054:	movw	r3, #63636	; 0xf894
   17058:	movt	r3, #65535	; 0xffff
   1705c:	sub	r3, r3, r0
   17060:	add	r0, r2, #100	; 0x64
   17064:	cmp	r8, r3
   17068:	rsblt	r0, r2, #0
   1706c:	ldr	r3, [sp, #84]	; 0x54
   17070:	b	17090 <__assert_fail@plt+0x5a54>
   17074:	add	r0, r3, #100	; 0x64
   17078:	movw	r7, #63636	; 0xf894
   1707c:	movt	r7, #65535	; 0xffff
   17080:	cmp	r2, r7
   17084:	rsblt	r0, r3, #0
   17088:	mov	r3, r4
   1708c:	mov	r4, #2
   17090:	cmp	sl, #0
   17094:	ldr	r2, [fp, #12]
   17098:	moveq	sl, r2
   1709c:	mov	r2, #0
   170a0:	cmp	sl, #43	; 0x2b
   170a4:	mov	r7, #0
   170a8:	str	r7, [sp, #72]	; 0x48
   170ac:	bne	170ec <__assert_fail@plt+0x5ab0>
   170b0:	str	r3, [sp, #84]	; 0x54
   170b4:	mov	r3, #0
   170b8:	cmp	r4, r6
   170bc:	mov	r7, #0
   170c0:	movwlt	r7, #1
   170c4:	mov	r8, r4
   170c8:	movw	r4, #9999	; 0x270f
   170cc:	cmp	r8, #2
   170d0:	movweq	r4, #99	; 0x63
   170d4:	cmp	r4, r0
   170d8:	mov	r4, r8
   170dc:	movwcc	r3, #1
   170e0:	orr	r3, r7, r3
   170e4:	str	r3, [sp, #72]	; 0x48
   170e8:	ldr	r3, [sp, #84]	; 0x54
   170ec:	ldr	r8, [sp, #92]	; 0x5c
   170f0:	cmp	r5, #79	; 0x4f
   170f4:	beq	172c8 <__assert_fail@plt+0x5c8c>
   170f8:	b	173b0 <__assert_fail@plt+0x5d74>
   170fc:	cmp	r2, #0
   17100:	beq	17298 <__assert_fail@plt+0x5c5c>
   17104:	movw	r7, #10000	; 0x2710
   17108:	mla	r0, r0, r7, r2
   1710c:	mov	r2, #100	; 0x64
   17110:	mla	r0, r3, r2, r0
   17114:	mov	r4, #9
   17118:	mov	r2, #1
   1711c:	str	r2, [sp, #72]	; 0x48
   17120:	mov	r2, #20
   17124:	b	172b8 <__assert_fail@plt+0x5c7c>
   17128:	mov	r0, lr
   1712c:	mov	r2, r4
   17130:	mov	r7, lr
   17134:	bl	11384 <memcpy@plt>
   17138:	add	r7, r7, r4
   1713c:	ldr	ip, [sp, #80]	; 0x50
   17140:	cmp	sl, #45	; 0x2d
   17144:	subne	r0, r6, r4
   17148:	bicne	r8, r0, r0, asr #31
   1714c:	sub	r0, r5, r4
   17150:	cmp	r8, r0
   17154:	bcs	176a0 <__assert_fail@plt+0x6064>
   17158:	cmp	r7, #0
   1715c:	beq	17184 <__assert_fail@plt+0x5b48>
   17160:	cmp	r8, #0
   17164:	beq	17184 <__assert_fail@plt+0x5b48>
   17168:	uxtb	r0, sl
   1716c:	cmp	r0, #48	; 0x30
   17170:	cmpne	r0, #43	; 0x2b
   17174:	bne	1726c <__assert_fail@plt+0x5c30>
   17178:	mov	r0, r7
   1717c:	mov	r1, #48	; 0x30
   17180:	b	17274 <__assert_fail@plt+0x5c38>
   17184:	mov	lr, r7
   17188:	b	17288 <__assert_fail@plt+0x5c4c>
   1718c:	mov	r1, #32
   17190:	mov	r2, r8
   17194:	bl	11540 <memset@plt>
   17198:	ldr	r0, [sp, #72]	; 0x48
   1719c:	ldr	r1, [sp, #44]	; 0x2c
   171a0:	add	r0, r0, r8
   171a4:	ldr	r3, [sp, #92]	; 0x5c
   171a8:	tst	r7, #1
   171ac:	beq	171c0 <__assert_fail@plt+0x5b84>
   171b0:	mov	r2, r4
   171b4:	mov	r7, r0
   171b8:	bl	176c4 <__assert_fail@plt+0x6088>
   171bc:	b	171ec <__assert_fail@plt+0x5bb0>
   171c0:	eor	r2, r7, #1
   171c4:	and	r2, r3, r2
   171c8:	tst	r2, #1
   171cc:	beq	171e0 <__assert_fail@plt+0x5ba4>
   171d0:	mov	r2, r4
   171d4:	mov	r7, r0
   171d8:	bl	17700 <__assert_fail@plt+0x60c4>
   171dc:	b	171ec <__assert_fail@plt+0x5bb0>
   171e0:	mov	r2, r4
   171e4:	mov	r7, r0
   171e8:	bl	11384 <memcpy@plt>
   171ec:	mov	lr, r7
   171f0:	mov	ip, r6
   171f4:	add	lr, r7, r4
   171f8:	b	1739c <__assert_fail@plt+0x5d60>
   171fc:	mov	r0, lr
   17200:	mov	r1, #32
   17204:	mov	r2, r4
   17208:	mov	r6, ip
   1720c:	mov	r7, lr
   17210:	bl	11540 <memset@plt>
   17214:	mov	lr, r7
   17218:	mov	ip, r6
   1721c:	add	lr, r7, r4
   17220:	mov	r8, #-2147483648	; 0x80000000
   17224:	movw	r3, #52428	; 0xcccc
   17228:	movt	r3, #3276	; 0xccc
   1722c:	mov	r0, #10
   17230:	b	17660 <__assert_fail@plt+0x6024>
   17234:	mov	r0, lr
   17238:	mov	r1, #32
   1723c:	mov	r2, r4
   17240:	mov	r6, ip
   17244:	mov	r7, lr
   17248:	bl	11540 <memset@plt>
   1724c:	mov	lr, r7
   17250:	mov	ip, r6
   17254:	add	lr, r7, r4
   17258:	mov	r8, #-2147483648	; 0x80000000
   1725c:	movw	r3, #52428	; 0xcccc
   17260:	movt	r3, #3276	; 0xccc
   17264:	mov	r0, #9
   17268:	b	17660 <__assert_fail@plt+0x6024>
   1726c:	mov	r0, r7
   17270:	mov	r1, #32
   17274:	mov	r2, r8
   17278:	mov	r5, ip
   1727c:	bl	11540 <memset@plt>
   17280:	mov	ip, r5
   17284:	add	lr, r7, r8
   17288:	add	r0, r8, ip
   1728c:	add	ip, r0, r4
   17290:	mov	r7, r9
   17294:	b	1761c <__assert_fail@plt+0x5fe0>
   17298:	cmp	r3, #0
   1729c:	beq	15fdc <__assert_fail@plt+0x49a0>
   172a0:	mov	r2, #100	; 0x64
   172a4:	mla	r0, r0, r2, r3
   172a8:	mov	r4, #6
   172ac:	mov	r2, #1
   172b0:	str	r2, [sp, #72]	; 0x48
   172b4:	mov	r2, #4
   172b8:	ldr	r8, [sp, #92]	; 0x5c
   172bc:	ldr	r3, [sp, #84]	; 0x54
   172c0:	cmp	r5, #79	; 0x4f
   172c4:	bne	173b0 <__assert_fail@plt+0x5d74>
   172c8:	str	r8, [sp, #92]	; 0x5c
   172cc:	mov	r8, #0
   172d0:	cmp	r1, #0
   172d4:	bne	173ac <__assert_fail@plt+0x5d70>
   172d8:	str	ip, [sp, #80]	; 0x50
   172dc:	mov	r7, lr
   172e0:	movw	r0, #9504	; 0x2520
   172e4:	strh	r0, [fp, #-53]	; 0xffffffcb
   172e8:	cmp	r5, #0
   172ec:	ldr	r0, [sp, #68]	; 0x44
   172f0:	strbne	r5, [fp, #-51]	; 0xffffffcd
   172f4:	ldrne	r0, [sp, #52]	; 0x34
   172f8:	mov	r1, #0
   172fc:	strb	r1, [r0, #1]
   17300:	strb	r3, [r0]
   17304:	add	r0, sp, #96	; 0x60
   17308:	sub	r2, fp, #53	; 0x35
   1730c:	mov	r1, #1024	; 0x400
   17310:	ldr	r3, [sp, #76]	; 0x4c
   17314:	bl	1148c <strftime@plt>
   17318:	cmp	r0, #0
   1731c:	beq	17380 <__assert_fail@plt+0x5d44>
   17320:	subs	r1, sl, #45	; 0x2d
   17324:	movne	r1, r6
   17328:	cmp	r6, #0
   1732c:	movwlt	r1, #0
   17330:	sub	r4, r0, #1
   17334:	cmp	r1, r4
   17338:	mov	r5, r4
   1733c:	movhi	r5, r1
   17340:	ldr	ip, [sp, #80]	; 0x50
   17344:	ldr	r0, [sp, #88]	; 0x58
   17348:	sub	r0, r0, ip
   1734c:	cmp	r5, r0
   17350:	bcs	176a0 <__assert_fail@plt+0x6064>
   17354:	cmp	r7, #0
   17358:	beq	17398 <__assert_fail@plt+0x5d5c>
   1735c:	cmp	r1, r4
   17360:	bls	174cc <__assert_fail@plt+0x5e90>
   17364:	sub	r6, r1, r4
   17368:	cmp	sl, #48	; 0x30
   1736c:	cmpne	sl, #43	; 0x2b
   17370:	bne	174b8 <__assert_fail@plt+0x5e7c>
   17374:	mov	r0, r7
   17378:	mov	r1, #48	; 0x30
   1737c:	b	174c0 <__assert_fail@plt+0x5e84>
   17380:	ldr	ip, [sp, #80]	; 0x50
   17384:	mov	r8, #-2147483648	; 0x80000000
   17388:	movw	r3, #52428	; 0xcccc
   1738c:	movt	r3, #3276	; 0xccc
   17390:	mov	lr, r7
   17394:	b	17668 <__assert_fail@plt+0x602c>
   17398:	mov	lr, #0
   1739c:	mov	r8, #-2147483648	; 0x80000000
   173a0:	movw	r3, #52428	; 0xcccc
   173a4:	movt	r3, #3276	; 0xccc
   173a8:	b	17664 <__assert_fail@plt+0x6028>
   173ac:	ldr	r8, [sp, #92]	; 0x5c
   173b0:	str	r8, [sp, #92]	; 0x5c
   173b4:	cmp	r1, #0
   173b8:	rsbne	r0, r0, #0
   173bc:	ldr	r8, [sp, #64]	; 0x40
   173c0:	tst	r2, #1
   173c4:	movne	r3, #58	; 0x3a
   173c8:	strbne	r3, [r8, #-1]!
   173cc:	movw	r3, #52429	; 0xcccd
   173d0:	movt	r3, #52428	; 0xcccc
   173d4:	umull	r3, r7, r0, r3
   173d8:	lsr	r3, r7, #3
   173dc:	add	r7, r3, r3, lsl #2
   173e0:	sub	r7, r0, r7, lsl #1
   173e4:	orr	r7, r7, #48	; 0x30
   173e8:	strb	r7, [r8, #-1]!
   173ec:	asr	r2, r2, #1
   173f0:	cmp	r0, #9
   173f4:	mov	r0, r3
   173f8:	bhi	173c0 <__assert_fail@plt+0x5d84>
   173fc:	cmp	r2, #0
   17400:	mov	r0, r3
   17404:	bne	173c0 <__assert_fail@plt+0x5d84>
   17408:	cmp	r6, #0
   1740c:	movge	r4, r6
   17410:	ldr	r2, [sp, #72]	; 0x48
   17414:	cmp	r2, #0
   17418:	movwne	r2, #43	; 0x2b
   1741c:	cmp	sl, #0
   17420:	movweq	sl, #48	; 0x30
   17424:	str	r9, [sp, #84]	; 0x54
   17428:	cmp	r1, #0
   1742c:	movwne	r2, #45	; 0x2d
   17430:	cmp	r2, #0
   17434:	mov	r0, r4
   17438:	subne	r0, r0, #1
   1743c:	ldr	r1, [sp, #64]	; 0x40
   17440:	sub	r9, r1, r8
   17444:	sub	r6, r0, r9
   17448:	cmp	r6, #1
   1744c:	movwlt	r6, #0
   17450:	subs	r5, sl, #45	; 0x2d
   17454:	moveq	r6, r5
   17458:	cmp	r2, #0
   1745c:	beq	174a8 <__assert_fail@plt+0x5e6c>
   17460:	cmp	sl, #95	; 0x5f
   17464:	bne	174b0 <__assert_fail@plt+0x5e74>
   17468:	cmp	lr, #0
   1746c:	beq	1752c <__assert_fail@plt+0x5ef0>
   17470:	mov	r0, lr
   17474:	mov	r1, #32
   17478:	str	r2, [sp, #72]	; 0x48
   1747c:	mov	r2, r6
   17480:	str	r4, [sp, #24]
   17484:	mov	r4, ip
   17488:	mov	r7, lr
   1748c:	bl	11540 <memset@plt>
   17490:	ldr	r2, [sp, #72]	; 0x48
   17494:	mov	lr, r7
   17498:	mov	ip, r4
   1749c:	ldr	r4, [sp, #24]
   174a0:	add	lr, r7, r6
   174a4:	b	17530 <__assert_fail@plt+0x5ef4>
   174a8:	ldr	r7, [sp, #92]	; 0x5c
   174ac:	b	17560 <__assert_fail@plt+0x5f24>
   174b0:	ldr	r7, [sp, #92]	; 0x5c
   174b4:	b	1753c <__assert_fail@plt+0x5f00>
   174b8:	mov	r0, r7
   174bc:	mov	r1, #32
   174c0:	mov	r2, r6
   174c4:	bl	11540 <memset@plt>
   174c8:	add	r7, r7, r6
   174cc:	ldr	r1, [sp, #92]	; 0x5c
   174d0:	mov	r0, r7
   174d4:	tst	r8, #1
   174d8:	beq	174ec <__assert_fail@plt+0x5eb0>
   174dc:	ldr	r1, [sp, #48]	; 0x30
   174e0:	mov	r2, r4
   174e4:	bl	176c4 <__assert_fail@plt+0x6088>
   174e8:	b	17510 <__assert_fail@plt+0x5ed4>
   174ec:	tst	r1, #1
   174f0:	beq	17504 <__assert_fail@plt+0x5ec8>
   174f4:	ldr	r1, [sp, #48]	; 0x30
   174f8:	mov	r2, r4
   174fc:	bl	17700 <__assert_fail@plt+0x60c4>
   17500:	b	17510 <__assert_fail@plt+0x5ed4>
   17504:	ldr	r1, [sp, #48]	; 0x30
   17508:	mov	r2, r4
   1750c:	bl	11384 <memcpy@plt>
   17510:	add	r7, r7, r4
   17514:	ldr	ip, [sp, #80]	; 0x50
   17518:	mov	r8, #-2147483648	; 0x80000000
   1751c:	movw	r3, #52428	; 0xcccc
   17520:	movt	r3, #3276	; 0xccc
   17524:	mov	lr, r7
   17528:	b	17664 <__assert_fail@plt+0x6028>
   1752c:	mov	lr, #0
   17530:	ldr	r7, [sp, #92]	; 0x5c
   17534:	sub	r4, r4, r6
   17538:	add	ip, r6, ip
   1753c:	ldr	r0, [sp, #88]	; 0x58
   17540:	sub	r0, r0, ip
   17544:	cmp	r0, #2
   17548:	bcc	176a0 <__assert_fail@plt+0x6064>
   1754c:	cmp	lr, #0
   17550:	strbne	r2, [lr], #1
   17554:	moveq	lr, #0
   17558:	sub	r4, r4, #1
   1755c:	add	ip, ip, #1
   17560:	cmp	sl, #45	; 0x2d
   17564:	bicne	r5, r4, r4, asr #31
   17568:	cmp	r5, r9
   1756c:	mov	r4, r9
   17570:	movhi	r4, r5
   17574:	ldr	r0, [sp, #88]	; 0x58
   17578:	sub	r0, r0, ip
   1757c:	cmp	r4, r0
   17580:	bcs	176a0 <__assert_fail@plt+0x6064>
   17584:	cmp	lr, #0
   17588:	beq	175b4 <__assert_fail@plt+0x5f78>
   1758c:	cmp	r5, r9
   17590:	bls	175e0 <__assert_fail@plt+0x5fa4>
   17594:	str	ip, [sp, #80]	; 0x50
   17598:	sub	r6, r5, r9
   1759c:	cmp	sl, #48	; 0x30
   175a0:	cmpne	sl, #43	; 0x2b
   175a4:	bne	175c0 <__assert_fail@plt+0x5f84>
   175a8:	mov	r0, lr
   175ac:	mov	r1, #48	; 0x30
   175b0:	b	175c8 <__assert_fail@plt+0x5f8c>
   175b4:	mov	lr, #0
   175b8:	ldr	r7, [sp, #84]	; 0x54
   175bc:	b	17618 <__assert_fail@plt+0x5fdc>
   175c0:	mov	r0, lr
   175c4:	mov	r1, #32
   175c8:	mov	r2, r6
   175cc:	mov	r5, lr
   175d0:	bl	11540 <memset@plt>
   175d4:	add	r5, r5, r6
   175d8:	ldr	ip, [sp, #80]	; 0x50
   175dc:	mov	lr, r5
   175e0:	mov	r0, lr
   175e4:	mov	r1, r8
   175e8:	mov	r2, r9
   175ec:	mov	r5, ip
   175f0:	mov	r6, lr
   175f4:	tst	r7, #1
   175f8:	beq	17604 <__assert_fail@plt+0x5fc8>
   175fc:	bl	17700 <__assert_fail@plt+0x60c4>
   17600:	b	17608 <__assert_fail@plt+0x5fcc>
   17604:	bl	11384 <memcpy@plt>
   17608:	mov	lr, r6
   1760c:	mov	ip, r5
   17610:	ldr	r7, [sp, #84]	; 0x54
   17614:	add	lr, r6, r9
   17618:	add	ip, r4, ip
   1761c:	mov	r8, #-2147483648	; 0x80000000
   17620:	movw	r3, #52428	; 0xcccc
   17624:	movt	r3, #3276	; 0xccc
   17628:	b	1766c <__assert_fail@plt+0x6030>
   1762c:	mov	r0, lr
   17630:	mov	r1, #32
   17634:	mov	r2, r4
   17638:	mov	r6, ip
   1763c:	mov	r7, lr
   17640:	bl	11540 <memset@plt>
   17644:	mov	lr, r7
   17648:	mov	ip, r6
   1764c:	add	lr, r7, r4
   17650:	mov	r8, #-2147483648	; 0x80000000
   17654:	movw	r3, #52428	; 0xcccc
   17658:	movt	r3, #3276	; 0xccc
   1765c:	ldrb	r0, [r9]
   17660:	strb	r0, [lr], #1
   17664:	add	ip, r5, ip
   17668:	mov	r7, r9
   1766c:	ldrb	r0, [r7, #1]!
   17670:	mvn	r6, #0
   17674:	cmp	r0, #0
   17678:	bne	15fe4 <__assert_fail@plt+0x49a8>
   1767c:	ldr	r0, [sp, #88]	; 0x58
   17680:	cmp	r0, #0
   17684:	cmpne	lr, #0
   17688:	movne	r0, #0
   1768c:	strbne	r0, [lr]
   17690:	ldr	r0, [sp, #60]	; 0x3c
   17694:	ldr	r1, [sp, #56]	; 0x38
   17698:	str	r1, [r0]
   1769c:	b	176b0 <__assert_fail@plt+0x6074>
   176a0:	mov	r0, #34	; 0x22
   176a4:	ldr	r1, [sp, #60]	; 0x3c
   176a8:	str	r0, [r1]
   176ac:	mov	ip, #0
   176b0:	mov	r0, ip
   176b4:	sub	sp, fp, #28
   176b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176bc:	mov	r0, #75	; 0x4b
   176c0:	b	176a4 <__assert_fail@plt+0x6068>
   176c4:	push	{r4, r5, r6, sl, fp, lr}
   176c8:	add	fp, sp, #16
   176cc:	cmp	r2, #0
   176d0:	popeq	{r4, r5, r6, sl, fp, pc}
   176d4:	mov	r4, r2
   176d8:	sub	r5, r1, #1
   176dc:	sub	r6, r0, #1
   176e0:	bl	114a4 <__ctype_tolower_loc@plt>
   176e4:	ldrb	r1, [r5, r4]
   176e8:	ldr	r2, [r0]
   176ec:	ldr	r1, [r2, r1, lsl #2]
   176f0:	strb	r1, [r6, r4]
   176f4:	subs	r4, r4, #1
   176f8:	bne	176e4 <__assert_fail@plt+0x60a8>
   176fc:	pop	{r4, r5, r6, sl, fp, pc}
   17700:	push	{r4, r5, r6, sl, fp, lr}
   17704:	add	fp, sp, #16
   17708:	cmp	r2, #0
   1770c:	popeq	{r4, r5, r6, sl, fp, pc}
   17710:	mov	r4, r2
   17714:	sub	r5, r1, #1
   17718:	sub	r6, r0, #1
   1771c:	bl	114b0 <__ctype_toupper_loc@plt>
   17720:	ldrb	r1, [r5, r4]
   17724:	ldr	r2, [r0]
   17728:	ldr	r1, [r2, r1, lsl #2]
   1772c:	strb	r1, [r6, r4]
   17730:	subs	r4, r4, #1
   17734:	bne	17720 <__assert_fail@plt+0x60e4>
   17738:	pop	{r4, r5, r6, sl, fp, pc}
   1773c:	movw	r2, #382	; 0x17e
   17740:	add	r2, r0, r2
   17744:	sub	r1, r2, r1
   17748:	movw	r2, #9363	; 0x2493
   1774c:	movt	r2, #37449	; 0x9249
   17750:	smmla	r2, r1, r2, r1
   17754:	asr	r3, r2, #2
   17758:	add	r2, r3, r2, lsr #31
   1775c:	rsb	r2, r2, r2, lsl #3
   17760:	sub	r1, r2, r1
   17764:	add	r0, r0, r1
   17768:	add	r0, r0, #3
   1776c:	bx	lr
   17770:	push	{r4, r5, fp, lr}
   17774:	add	fp, sp, #8
   17778:	cmp	r0, #0
   1777c:	beq	17810 <__assert_fail@plt+0x61d4>
   17780:	mov	r4, r0
   17784:	mov	r1, #47	; 0x2f
   17788:	bl	115b8 <strrchr@plt>
   1778c:	cmp	r0, #0
   17790:	mov	r5, r4
   17794:	addne	r5, r0, #1
   17798:	sub	r0, r5, r4
   1779c:	cmp	r0, #7
   177a0:	blt	177f4 <__assert_fail@plt+0x61b8>
   177a4:	sub	r0, r5, #7
   177a8:	movw	r1, #54741	; 0xd5d5
   177ac:	movt	r1, #1
   177b0:	mov	r2, #7
   177b4:	bl	1160c <strncmp@plt>
   177b8:	cmp	r0, #0
   177bc:	bne	177f4 <__assert_fail@plt+0x61b8>
   177c0:	movw	r1, #54749	; 0xd5dd
   177c4:	movt	r1, #1
   177c8:	mov	r0, r5
   177cc:	mov	r2, #3
   177d0:	bl	1160c <strncmp@plt>
   177d4:	cmp	r0, #0
   177d8:	beq	177e4 <__assert_fail@plt+0x61a8>
   177dc:	mov	r4, r5
   177e0:	b	177f4 <__assert_fail@plt+0x61b8>
   177e4:	add	r4, r5, #3
   177e8:	movw	r0, #57792	; 0xe1c0
   177ec:	movt	r0, #2
   177f0:	str	r4, [r0]
   177f4:	movw	r0, #57796	; 0xe1c4
   177f8:	movt	r0, #2
   177fc:	str	r4, [r0]
   17800:	movw	r0, #58024	; 0xe2a8
   17804:	movt	r0, #2
   17808:	str	r4, [r0]
   1780c:	pop	{r4, r5, fp, pc}
   17810:	movw	r0, #57808	; 0xe1d0
   17814:	movt	r0, #2
   17818:	ldr	r3, [r0]
   1781c:	movw	r0, #54685	; 0xd59d
   17820:	movt	r0, #1
   17824:	mov	r1, #55	; 0x37
   17828:	mov	r2, #1
   1782c:	bl	11414 <fwrite@plt>
   17830:	bl	11618 <abort@plt>
   17834:	push	{r4, r5, r6, sl, fp, lr}
   17838:	add	fp, sp, #16
   1783c:	mov	r4, r0
   17840:	movw	r0, #58032	; 0xe2b0
   17844:	movt	r0, #2
   17848:	cmp	r4, #0
   1784c:	moveq	r4, r0
   17850:	bl	1151c <__errno_location@plt>
   17854:	mov	r5, r0
   17858:	ldr	r6, [r0]
   1785c:	mov	r0, r4
   17860:	mov	r1, #48	; 0x30
   17864:	bl	1a110 <__assert_fail@plt+0x8ad4>
   17868:	str	r6, [r5]
   1786c:	pop	{r4, r5, r6, sl, fp, pc}
   17870:	movw	r1, #58032	; 0xe2b0
   17874:	movt	r1, #2
   17878:	cmp	r0, #0
   1787c:	movne	r1, r0
   17880:	ldr	r0, [r1]
   17884:	bx	lr
   17888:	movw	r2, #58032	; 0xe2b0
   1788c:	movt	r2, #2
   17890:	cmp	r0, #0
   17894:	movne	r2, r0
   17898:	str	r1, [r2]
   1789c:	bx	lr
   178a0:	movw	r3, #58032	; 0xe2b0
   178a4:	movt	r3, #2
   178a8:	cmp	r0, #0
   178ac:	movne	r3, r0
   178b0:	ubfx	r0, r1, #5, #3
   178b4:	add	r0, r3, r0, lsl #2
   178b8:	ldr	r3, [r0, #8]
   178bc:	and	r1, r1, #31
   178c0:	eor	r2, r2, r3, lsr r1
   178c4:	and	r2, r2, #1
   178c8:	eor	r2, r3, r2, lsl r1
   178cc:	str	r2, [r0, #8]
   178d0:	mov	r0, #1
   178d4:	and	r0, r0, r3, lsr r1
   178d8:	bx	lr
   178dc:	movw	r2, #58032	; 0xe2b0
   178e0:	movt	r2, #2
   178e4:	cmp	r0, #0
   178e8:	movne	r2, r0
   178ec:	ldr	r0, [r2, #4]
   178f0:	str	r1, [r2, #4]
   178f4:	bx	lr
   178f8:	movw	r3, #58032	; 0xe2b0
   178fc:	movt	r3, #2
   17900:	cmp	r0, #0
   17904:	movne	r3, r0
   17908:	mov	r0, #10
   1790c:	str	r0, [r3]
   17910:	cmp	r1, #0
   17914:	cmpne	r2, #0
   17918:	bne	17928 <__assert_fail@plt+0x62ec>
   1791c:	push	{fp, lr}
   17920:	mov	fp, sp
   17924:	bl	11618 <abort@plt>
   17928:	str	r1, [r3, #40]	; 0x28
   1792c:	str	r2, [r3, #44]	; 0x2c
   17930:	bx	lr
   17934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17938:	add	fp, sp, #28
   1793c:	sub	sp, sp, #20
   17940:	mov	r8, r3
   17944:	mov	r9, r2
   17948:	mov	sl, r1
   1794c:	mov	r7, r0
   17950:	ldr	r0, [fp, #8]
   17954:	movw	r5, #58032	; 0xe2b0
   17958:	movt	r5, #2
   1795c:	cmp	r0, #0
   17960:	movne	r5, r0
   17964:	bl	1151c <__errno_location@plt>
   17968:	mov	r4, r0
   1796c:	ldm	r5, {r0, r1}
   17970:	ldr	r2, [r5, #40]	; 0x28
   17974:	ldr	r3, [r5, #44]	; 0x2c
   17978:	ldr	r6, [r4]
   1797c:	add	r5, r5, #8
   17980:	stm	sp, {r0, r1, r5}
   17984:	str	r2, [sp, #12]
   17988:	str	r3, [sp, #16]
   1798c:	mov	r0, r7
   17990:	mov	r1, sl
   17994:	mov	r2, r9
   17998:	mov	r3, r8
   1799c:	bl	179ac <__assert_fail@plt+0x6370>
   179a0:	str	r6, [r4]
   179a4:	sub	sp, fp, #28
   179a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179b0:	add	fp, sp, #28
   179b4:	sub	sp, sp, #156	; 0x9c
   179b8:	mov	r9, r3
   179bc:	str	r2, [fp, #-84]	; 0xffffffac
   179c0:	mov	r6, r1
   179c4:	mov	r7, r0
   179c8:	ldr	r0, [fp, #12]
   179cc:	and	r1, r0, #4
   179d0:	str	r1, [sp, #32]
   179d4:	and	r1, r0, #1
   179d8:	str	r1, [sp, #36]	; 0x24
   179dc:	ubfx	sl, r0, #1, #1
   179e0:	bl	1142c <__ctype_get_mb_cur_max@plt>
   179e4:	str	r0, [sp, #40]	; 0x28
   179e8:	ldr	r0, [fp, #24]
   179ec:	str	r0, [sp, #76]	; 0x4c
   179f0:	ldr	r0, [fp, #20]
   179f4:	str	r0, [sp, #68]	; 0x44
   179f8:	ldr	r0, [fp, #8]
   179fc:	str	r0, [fp, #-60]	; 0xffffffc4
   17a00:	mov	r0, #0
   17a04:	str	r0, [sp, #72]	; 0x48
   17a08:	mov	r0, #0
   17a0c:	str	r0, [sp, #92]	; 0x5c
   17a10:	mov	r0, #0
   17a14:	str	r0, [fp, #-72]	; 0xffffffb8
   17a18:	mov	r0, #0
   17a1c:	mov	r1, #0
   17a20:	str	r1, [fp, #-56]	; 0xffffffc8
   17a24:	mov	r1, #0
   17a28:	str	r1, [sp, #56]	; 0x38
   17a2c:	mov	r5, #1
   17a30:	str	r7, [sp, #80]	; 0x50
   17a34:	mov	r4, r6
   17a38:	ldr	r6, [fp, #-60]	; 0xffffffc4
   17a3c:	cmp	r6, #10
   17a40:	bhi	189a8 <__assert_fail@plt+0x736c>
   17a44:	add	r1, pc, #20
   17a48:	mov	r8, #0
   17a4c:	mov	r2, #1
   17a50:	mov	r3, #0
   17a54:	ldr	ip, [fp, #-84]	; 0xffffffac
   17a58:	mov	lr, r9
   17a5c:	ldr	pc, [r1, r6, lsl #2]
   17a60:	andeq	r7, r1, r8, lsr fp
   17a64:	andeq	r7, r1, r8, ror #22
   17a68:	andeq	r7, r1, r8, lsr #22
   17a6c:	andeq	r7, r1, r0, lsr #22
   17a70:	andeq	r7, r1, ip, asr fp
   17a74:			; <UNDEFINED> instruction: 0x00017bbc
   17a78:	andeq	r7, r1, r8, asr #22
   17a7c:	andeq	r7, r1, r8, lsl ip
   17a80:	andeq	r7, r1, ip, lsl #21
   17a84:	andeq	r7, r1, ip, lsl #21
   17a88:			; <UNDEFINED> instruction: 0x00017ab4
   17a8c:	movw	r0, #54831	; 0xd62f
   17a90:	movt	r0, #1
   17a94:	mov	r1, r6
   17a98:	bl	18fb4 <__assert_fail@plt+0x7978>
   17a9c:	str	r0, [sp, #68]	; 0x44
   17aa0:	movw	r0, #55964	; 0xda9c
   17aa4:	movt	r0, #1
   17aa8:	mov	r1, r6
   17aac:	bl	18fb4 <__assert_fail@plt+0x7978>
   17ab0:	str	r0, [sp, #76]	; 0x4c
   17ab4:	mov	r8, #0
   17ab8:	tst	sl, #1
   17abc:	bne	17af4 <__assert_fail@plt+0x64b8>
   17ac0:	ldr	r0, [sp, #68]	; 0x44
   17ac4:	ldrb	r0, [r0]
   17ac8:	cmp	r0, #0
   17acc:	beq	17af4 <__assert_fail@plt+0x64b8>
   17ad0:	ldr	r1, [sp, #68]	; 0x44
   17ad4:	add	r1, r1, #1
   17ad8:	mov	r8, #0
   17adc:	cmp	r8, r4
   17ae0:	strbcc	r0, [r7, r8]
   17ae4:	ldrb	r0, [r1, r8]
   17ae8:	add	r8, r8, #1
   17aec:	cmp	r0, #0
   17af0:	bne	17adc <__assert_fail@plt+0x64a0>
   17af4:	ldr	r6, [sp, #76]	; 0x4c
   17af8:	mov	r0, r6
   17afc:	bl	114ec <strlen@plt>
   17b00:	str	r0, [fp, #-72]	; 0xffffffb8
   17b04:	str	r6, [sp, #92]	; 0x5c
   17b08:	mov	r2, #1
   17b0c:	mov	r3, sl
   17b10:	ldr	ip, [fp, #-84]	; 0xffffffac
   17b14:	mov	lr, r9
   17b18:	ldr	r6, [fp, #-60]	; 0xffffffc4
   17b1c:	b	17c18 <__assert_fail@plt+0x65dc>
   17b20:	mov	r0, #1
   17b24:	b	17b68 <__assert_fail@plt+0x652c>
   17b28:	tst	sl, #1
   17b2c:	bne	17b68 <__assert_fail@plt+0x652c>
   17b30:	mov	r2, r0
   17b34:	b	17b90 <__assert_fail@plt+0x6554>
   17b38:	mov	r6, #0
   17b3c:	mov	r8, #0
   17b40:	mov	r2, r0
   17b44:	b	17c14 <__assert_fail@plt+0x65d8>
   17b48:	mov	r0, #1
   17b4c:	str	r0, [fp, #-72]	; 0xffffffb8
   17b50:	mov	r8, #0
   17b54:	mov	r6, #5
   17b58:	b	17bd4 <__assert_fail@plt+0x6598>
   17b5c:	mov	r2, #1
   17b60:	tst	sl, #1
   17b64:	beq	17b90 <__assert_fail@plt+0x6554>
   17b68:	mov	r1, #1
   17b6c:	str	r1, [fp, #-72]	; 0xffffffb8
   17b70:	mov	r8, #0
   17b74:	mov	r6, #2
   17b78:	movw	r1, #55964	; 0xda9c
   17b7c:	movt	r1, #1
   17b80:	str	r1, [sp, #92]	; 0x5c
   17b84:	mov	r2, r0
   17b88:	mov	r3, #1
   17b8c:	b	17c18 <__assert_fail@plt+0x65dc>
   17b90:	mov	r8, #1
   17b94:	mov	r6, #2
   17b98:	cmp	r4, #0
   17b9c:	movne	r0, #39	; 0x27
   17ba0:	strbne	r0, [r7]
   17ba4:	movw	r0, #55964	; 0xda9c
   17ba8:	movt	r0, #1
   17bac:	str	r0, [sp, #92]	; 0x5c
   17bb0:	mov	r0, #1
   17bb4:	str	r0, [fp, #-72]	; 0xffffffb8
   17bb8:	b	17c14 <__assert_fail@plt+0x65d8>
   17bbc:	mov	r6, #5
   17bc0:	tst	sl, #1
   17bc4:	beq	17bec <__assert_fail@plt+0x65b0>
   17bc8:	mov	r0, #1
   17bcc:	str	r0, [fp, #-72]	; 0xffffffb8
   17bd0:	mov	r8, #0
   17bd4:	movw	r0, #54829	; 0xd62d
   17bd8:	movt	r0, #1
   17bdc:	str	r0, [sp, #92]	; 0x5c
   17be0:	mov	r2, #1
   17be4:	mov	r3, #1
   17be8:	b	17c18 <__assert_fail@plt+0x65dc>
   17bec:	cmp	r4, #0
   17bf0:	movne	r0, #34	; 0x22
   17bf4:	strbne	r0, [r7]
   17bf8:	mov	r8, #1
   17bfc:	movw	r0, #54829	; 0xd62d
   17c00:	movt	r0, #1
   17c04:	str	r0, [sp, #92]	; 0x5c
   17c08:	mov	r0, #1
   17c0c:	str	r0, [fp, #-72]	; 0xffffffb8
   17c10:	mov	r2, #1
   17c14:	mov	r3, #0
   17c18:	ldr	r0, [fp, #16]
   17c1c:	cmp	r0, #0
   17c20:	movwne	r0, #1
   17c24:	and	r0, r0, r3
   17c28:	str	r0, [fp, #-88]	; 0xffffffa8
   17c2c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17c30:	cmp	r0, #0
   17c34:	movwne	r0, #1
   17c38:	and	r1, r0, r3
   17c3c:	and	r1, r2, r1
   17c40:	str	r1, [sp, #48]	; 0x30
   17c44:	str	r6, [fp, #-60]	; 0xffffffc4
   17c48:	subs	r6, r6, #2
   17c4c:	clz	r1, r6
   17c50:	lsr	r1, r1, #5
   17c54:	and	r1, r1, r3
   17c58:	str	r1, [sp, #60]	; 0x3c
   17c5c:	str	r6, [fp, #-80]	; 0xffffffb0
   17c60:	mov	r1, r6
   17c64:	movwne	r1, #1
   17c68:	str	r3, [fp, #-76]	; 0xffffffb4
   17c6c:	eor	r3, r3, #1
   17c70:	str	r3, [sp, #88]	; 0x58
   17c74:	orr	r3, r1, r3
   17c78:	str	r3, [sp, #64]	; 0x40
   17c7c:	and	r1, r1, r2
   17c80:	str	r1, [fp, #-68]	; 0xffffffbc
   17c84:	and	r0, r0, r1
   17c88:	str	r0, [fp, #-64]	; 0xffffffc0
   17c8c:	str	r2, [sp, #84]	; 0x54
   17c90:	eor	r0, r2, #1
   17c94:	str	r0, [sp, #52]	; 0x34
   17c98:	mov	r6, #0
   17c9c:	cmn	lr, #1
   17ca0:	beq	17cb0 <__assert_fail@plt+0x6674>
   17ca4:	cmp	r6, lr
   17ca8:	bne	17cbc <__assert_fail@plt+0x6680>
   17cac:	b	18828 <__assert_fail@plt+0x71ec>
   17cb0:	ldrb	r0, [ip, r6]
   17cb4:	cmp	r0, #0
   17cb8:	beq	18828 <__assert_fail@plt+0x71ec>
   17cbc:	str	r5, [fp, #-48]	; 0xffffffd0
   17cc0:	mov	sl, #0
   17cc4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17cc8:	cmp	r0, #0
   17ccc:	beq	17d00 <__assert_fail@plt+0x66c4>
   17cd0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17cd4:	add	r5, r6, r0
   17cd8:	cmp	r0, #2
   17cdc:	bcc	17cf8 <__assert_fail@plt+0x66bc>
   17ce0:	cmn	lr, #1
   17ce4:	bne	17cf8 <__assert_fail@plt+0x66bc>
   17ce8:	mov	r0, ip
   17cec:	bl	114ec <strlen@plt>
   17cf0:	ldr	ip, [fp, #-84]	; 0xffffffac
   17cf4:	mov	lr, r0
   17cf8:	cmp	r5, lr
   17cfc:	bls	17d0c <__assert_fail@plt+0x66d0>
   17d00:	mov	r0, #0
   17d04:	str	r0, [fp, #-52]	; 0xffffffcc
   17d08:	b	17d58 <__assert_fail@plt+0x671c>
   17d0c:	mov	r5, r4
   17d10:	mov	r4, lr
   17d14:	add	r0, ip, r6
   17d18:	ldr	r1, [sp, #92]	; 0x5c
   17d1c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17d20:	bl	1139c <memcmp@plt>
   17d24:	cmp	r0, #0
   17d28:	mov	r1, r0
   17d2c:	movwne	r1, #1
   17d30:	ldr	r2, [sp, #88]	; 0x58
   17d34:	orr	r1, r1, r2
   17d38:	tst	r1, #1
   17d3c:	beq	188ec <__assert_fail@plt+0x72b0>
   17d40:	clz	r0, r0
   17d44:	lsr	r0, r0, #5
   17d48:	str	r0, [fp, #-52]	; 0xffffffcc
   17d4c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17d50:	mov	lr, r4
   17d54:	mov	r4, r5
   17d58:	ldrb	r5, [ip, r6]
   17d5c:	cmp	r5, #126	; 0x7e
   17d60:	bhi	1811c <__assert_fail@plt+0x6ae0>
   17d64:	mov	r9, #1
   17d68:	mov	r2, #110	; 0x6e
   17d6c:	mov	r0, #97	; 0x61
   17d70:	add	r3, pc, #4
   17d74:	mov	r1, #0
   17d78:	ldr	pc, [r3, r5, lsl #2]
   17d7c:	andeq	r8, r1, r4, lsl r0
   17d80:	andeq	r8, r1, ip, lsl r1
   17d84:	andeq	r8, r1, ip, lsl r1
   17d88:	andeq	r8, r1, ip, lsl r1
   17d8c:	andeq	r8, r1, ip, lsl r1
   17d90:	andeq	r8, r1, ip, lsl r1
   17d94:	andeq	r8, r1, ip, lsl r1
   17d98:	andeq	r8, r1, r0, ror #3
   17d9c:	strdeq	r7, [r1], -r4
   17da0:	andeq	r7, r1, ip, ror #31
   17da4:	andeq	r8, r1, r0
   17da8:	andeq	r8, r1, r4, lsl #1
   17dac:	andeq	r7, r1, r4, ror #31
   17db0:	strdeq	r7, [r1], -ip
   17db4:	andeq	r8, r1, ip, lsl r1
   17db8:	andeq	r8, r1, ip, lsl r1
   17dbc:	andeq	r8, r1, ip, lsl r1
   17dc0:	andeq	r8, r1, ip, lsl r1
   17dc4:	andeq	r8, r1, ip, lsl r1
   17dc8:	andeq	r8, r1, ip, lsl r1
   17dcc:	andeq	r8, r1, ip, lsl r1
   17dd0:	andeq	r8, r1, ip, lsl r1
   17dd4:	andeq	r8, r1, ip, lsl r1
   17dd8:	andeq	r8, r1, ip, lsl r1
   17ddc:	andeq	r8, r1, ip, lsl r1
   17de0:	andeq	r8, r1, ip, lsl r1
   17de4:	andeq	r8, r1, ip, lsl r1
   17de8:	andeq	r8, r1, ip, lsl r1
   17dec:	andeq	r8, r1, ip, lsl r1
   17df0:	andeq	r8, r1, ip, lsl r1
   17df4:	andeq	r8, r1, ip, lsl r1
   17df8:	andeq	r8, r1, ip, lsl r1
   17dfc:	muleq	r1, r0, r1
   17e00:	muleq	r1, r4, r1
   17e04:	muleq	r1, r4, r1
   17e08:	andeq	r7, r1, ip, lsl #31
   17e0c:	muleq	r1, r4, r1
   17e10:	andeq	r7, r1, r8, ror pc
   17e14:	muleq	r1, r4, r1
   17e18:	andeq	r8, r1, ip, lsl #1
   17e1c:	muleq	r1, r4, r1
   17e20:	muleq	r1, r4, r1
   17e24:	muleq	r1, r4, r1
   17e28:	andeq	r7, r1, r8, ror pc
   17e2c:	andeq	r7, r1, r8, ror pc
   17e30:	andeq	r7, r1, r8, ror pc
   17e34:	andeq	r7, r1, r8, ror pc
   17e38:	andeq	r7, r1, r8, ror pc
   17e3c:	andeq	r7, r1, r8, ror pc
   17e40:	andeq	r7, r1, r8, ror pc
   17e44:	andeq	r7, r1, r8, ror pc
   17e48:	andeq	r7, r1, r8, ror pc
   17e4c:	andeq	r7, r1, r8, ror pc
   17e50:	andeq	r7, r1, r8, ror pc
   17e54:	andeq	r7, r1, r8, ror pc
   17e58:	andeq	r7, r1, r8, ror pc
   17e5c:	andeq	r7, r1, r8, ror pc
   17e60:	andeq	r7, r1, r8, ror pc
   17e64:	andeq	r7, r1, r8, ror pc
   17e68:	muleq	r1, r4, r1
   17e6c:	muleq	r1, r4, r1
   17e70:	muleq	r1, r4, r1
   17e74:	muleq	r1, r4, r1
   17e78:	andeq	r8, r1, r4, asr r0
   17e7c:	andeq	r8, r1, ip, lsl r1
   17e80:	andeq	r7, r1, r8, ror pc
   17e84:	andeq	r7, r1, r8, ror pc
   17e88:	andeq	r7, r1, r8, ror pc
   17e8c:	andeq	r7, r1, r8, ror pc
   17e90:	andeq	r7, r1, r8, ror pc
   17e94:	andeq	r7, r1, r8, ror pc
   17e98:	andeq	r7, r1, r8, ror pc
   17e9c:	andeq	r7, r1, r8, ror pc
   17ea0:	andeq	r7, r1, r8, ror pc
   17ea4:	andeq	r7, r1, r8, ror pc
   17ea8:	andeq	r7, r1, r8, ror pc
   17eac:	andeq	r7, r1, r8, ror pc
   17eb0:	andeq	r7, r1, r8, ror pc
   17eb4:	andeq	r7, r1, r8, ror pc
   17eb8:	andeq	r7, r1, r8, ror pc
   17ebc:	andeq	r7, r1, r8, ror pc
   17ec0:	andeq	r7, r1, r8, ror pc
   17ec4:	andeq	r7, r1, r8, ror pc
   17ec8:	andeq	r7, r1, r8, ror pc
   17ecc:	andeq	r7, r1, r8, ror pc
   17ed0:	andeq	r7, r1, r8, ror pc
   17ed4:	andeq	r7, r1, r8, ror pc
   17ed8:	andeq	r7, r1, r8, ror pc
   17edc:	andeq	r7, r1, r8, ror pc
   17ee0:	andeq	r7, r1, r8, ror pc
   17ee4:	andeq	r7, r1, r8, ror pc
   17ee8:	muleq	r1, r4, r1
   17eec:	andeq	r7, r1, r0, asr #31
   17ef0:	andeq	r7, r1, r8, ror pc
   17ef4:	muleq	r1, r4, r1
   17ef8:	andeq	r7, r1, r8, ror pc
   17efc:	muleq	r1, r4, r1
   17f00:	andeq	r7, r1, r8, ror pc
   17f04:	andeq	r7, r1, r8, ror pc
   17f08:	andeq	r7, r1, r8, ror pc
   17f0c:	andeq	r7, r1, r8, ror pc
   17f10:	andeq	r7, r1, r8, ror pc
   17f14:	andeq	r7, r1, r8, ror pc
   17f18:	andeq	r7, r1, r8, ror pc
   17f1c:	andeq	r7, r1, r8, ror pc
   17f20:	andeq	r7, r1, r8, ror pc
   17f24:	andeq	r7, r1, r8, ror pc
   17f28:	andeq	r7, r1, r8, ror pc
   17f2c:	andeq	r7, r1, r8, ror pc
   17f30:	andeq	r7, r1, r8, ror pc
   17f34:	andeq	r7, r1, r8, ror pc
   17f38:	andeq	r7, r1, r8, ror pc
   17f3c:	andeq	r7, r1, r8, ror pc
   17f40:	andeq	r7, r1, r8, ror pc
   17f44:	andeq	r7, r1, r8, ror pc
   17f48:	andeq	r7, r1, r8, ror pc
   17f4c:	andeq	r7, r1, r8, ror pc
   17f50:	andeq	r7, r1, r8, ror pc
   17f54:	andeq	r7, r1, r8, ror pc
   17f58:	andeq	r7, r1, r8, ror pc
   17f5c:	andeq	r7, r1, r8, ror pc
   17f60:	andeq	r7, r1, r8, ror pc
   17f64:	andeq	r7, r1, r8, ror pc
   17f68:	andeq	r7, r1, r0, lsr #31
   17f6c:	muleq	r1, r4, r1
   17f70:	andeq	r7, r1, r0, lsr #31
   17f74:	andeq	r7, r1, ip, lsl #31
   17f78:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17f7c:	cmp	r0, #0
   17f80:	beq	181f4 <__assert_fail@plt+0x6bb8>
   17f84:	ldr	r0, [fp, #16]
   17f88:	b	181f8 <__assert_fail@plt+0x6bbc>
   17f8c:	mov	r9, #0
   17f90:	cmp	r6, #0
   17f94:	beq	18190 <__assert_fail@plt+0x6b54>
   17f98:	mov	sl, #0
   17f9c:	b	17f78 <__assert_fail@plt+0x693c>
   17fa0:	mov	r9, #0
   17fa4:	cmn	lr, #1
   17fa8:	beq	18174 <__assert_fail@plt+0x6b38>
   17fac:	cmp	r6, #0
   17fb0:	bne	17f98 <__assert_fail@plt+0x695c>
   17fb4:	cmp	lr, #1
   17fb8:	beq	18190 <__assert_fail@plt+0x6b54>
   17fbc:	b	17f98 <__assert_fail@plt+0x695c>
   17fc0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17fc4:	cmp	r0, #2
   17fc8:	bne	181bc <__assert_fail@plt+0x6b80>
   17fcc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17fd0:	tst	r0, #1
   17fd4:	bne	18904 <__assert_fail@plt+0x72c8>
   17fd8:	mov	sl, #0
   17fdc:	mov	r0, #92	; 0x5c
   17fe0:	b	181d0 <__assert_fail@plt+0x6b94>
   17fe4:	mov	r0, #102	; 0x66
   17fe8:	b	181e0 <__assert_fail@plt+0x6ba4>
   17fec:	mov	r2, #116	; 0x74
   17ff0:	b	18000 <__assert_fail@plt+0x69c4>
   17ff4:	mov	r0, #98	; 0x62
   17ff8:	b	181e0 <__assert_fail@plt+0x6ba4>
   17ffc:	mov	r2, #114	; 0x72
   18000:	ldr	r0, [sp, #64]	; 0x40
   18004:	tst	r0, #1
   18008:	mov	r0, r2
   1800c:	bne	181e0 <__assert_fail@plt+0x6ba4>
   18010:	b	18904 <__assert_fail@plt+0x72c8>
   18014:	ldr	r0, [sp, #84]	; 0x54
   18018:	tst	r0, #1
   1801c:	beq	182d0 <__assert_fail@plt+0x6c94>
   18020:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18024:	tst	r0, #1
   18028:	bne	18904 <__assert_fail@plt+0x72c8>
   1802c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18030:	cmp	r0, #2
   18034:	ldr	r0, [fp, #-80]	; 0xffffffb0
   18038:	movwne	r0, #1
   1803c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18040:	orr	r0, r0, r2
   18044:	tst	r0, #1
   18048:	beq	186c4 <__assert_fail@plt+0x7088>
   1804c:	mov	r0, r8
   18050:	b	186f8 <__assert_fail@plt+0x70bc>
   18054:	mov	sl, #0
   18058:	mov	r5, #63	; 0x3f
   1805c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18060:	cmp	r0, #5
   18064:	beq	18484 <__assert_fail@plt+0x6e48>
   18068:	cmp	r0, #2
   1806c:	bne	18524 <__assert_fail@plt+0x6ee8>
   18070:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18074:	tst	r0, #1
   18078:	mov	r9, #0
   1807c:	beq	17f78 <__assert_fail@plt+0x693c>
   18080:	b	18904 <__assert_fail@plt+0x72c8>
   18084:	mov	r0, #118	; 0x76
   18088:	b	181e0 <__assert_fail@plt+0x6ba4>
   1808c:	mov	r5, #39	; 0x27
   18090:	mov	r0, #1
   18094:	str	r0, [sp, #56]	; 0x38
   18098:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1809c:	cmp	r0, #2
   180a0:	bne	182f0 <__assert_fail@plt+0x6cb4>
   180a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   180a8:	tst	r0, #1
   180ac:	bne	18904 <__assert_fail@plt+0x72c8>
   180b0:	ldr	r2, [sp, #72]	; 0x48
   180b4:	cmp	r2, #0
   180b8:	mov	r0, r2
   180bc:	movwne	r0, #1
   180c0:	clz	r1, r4
   180c4:	lsr	r1, r1, #5
   180c8:	orrs	r0, r0, r1
   180cc:	moveq	r2, r4
   180d0:	str	r2, [sp, #72]	; 0x48
   180d4:	moveq	r4, r0
   180d8:	cmp	r8, r4
   180dc:	movcc	r0, #39	; 0x27
   180e0:	strbcc	r0, [r7, r8]
   180e4:	add	r0, r8, #1
   180e8:	cmp	r0, r4
   180ec:	movcc	r1, #92	; 0x5c
   180f0:	strbcc	r1, [r7, r0]
   180f4:	add	r0, r8, #2
   180f8:	cmp	r0, r4
   180fc:	movcc	r1, #39	; 0x27
   18100:	strbcc	r1, [r7, r0]
   18104:	add	r8, r8, #3
   18108:	mov	r0, #0
   1810c:	str	r0, [fp, #-56]	; 0xffffffc8
   18110:	mov	sl, #0
   18114:	mov	r9, #1
   18118:	b	17f78 <__assert_fail@plt+0x693c>
   1811c:	str	r4, [sp, #24]
   18120:	ldr	r0, [sp, #40]	; 0x28
   18124:	cmp	r0, #1
   18128:	bne	182f8 <__assert_fail@plt+0x6cbc>
   1812c:	str	lr, [sp, #28]
   18130:	bl	114d4 <__ctype_b_loc@plt>
   18134:	ldr	ip, [fp, #-84]	; 0xffffffac
   18138:	ldr	r0, [r0]
   1813c:	add	r0, r0, r5, lsl #1
   18140:	ldrb	r0, [r0, #1]
   18144:	ubfx	r9, r0, #6, #1
   18148:	mov	r1, #1
   1814c:	ldr	r4, [sp, #24]
   18150:	ldr	r0, [sp, #52]	; 0x34
   18154:	orr	r0, r9, r0
   18158:	mov	r2, r1
   1815c:	cmp	r1, #1
   18160:	bhi	1852c <__assert_fail@plt+0x6ef0>
   18164:	tst	r0, #1
   18168:	beq	1852c <__assert_fail@plt+0x6ef0>
   1816c:	ldr	lr, [sp, #28]
   18170:	b	17f78 <__assert_fail@plt+0x693c>
   18174:	cmp	r6, #0
   18178:	ldrbeq	r0, [ip, #1]
   1817c:	cmpeq	r0, #0
   18180:	beq	18190 <__assert_fail@plt+0x6b54>
   18184:	mvn	lr, #0
   18188:	mov	sl, #0
   1818c:	b	17f78 <__assert_fail@plt+0x693c>
   18190:	mov	r1, #1
   18194:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18198:	cmp	r0, #2
   1819c:	bne	181b4 <__assert_fail@plt+0x6b78>
   181a0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   181a4:	tst	r0, #1
   181a8:	mov	r9, r1
   181ac:	beq	17f78 <__assert_fail@plt+0x693c>
   181b0:	b	18904 <__assert_fail@plt+0x72c8>
   181b4:	mov	r9, r1
   181b8:	b	17f78 <__assert_fail@plt+0x693c>
   181bc:	mov	sl, #0
   181c0:	mov	r0, #92	; 0x5c
   181c4:	ldr	r1, [sp, #48]	; 0x30
   181c8:	cmp	r1, #0
   181cc:	beq	181e0 <__assert_fail@plt+0x6ba4>
   181d0:	mov	r9, #0
   181d4:	cmp	sl, #0
   181d8:	beq	18790 <__assert_fail@plt+0x7154>
   181dc:	b	187cc <__assert_fail@plt+0x7190>
   181e0:	mov	r9, #0
   181e4:	ldr	r1, [sp, #84]	; 0x54
   181e8:	tst	r1, #1
   181ec:	mov	sl, #0
   181f0:	bne	18230 <__assert_fail@plt+0x6bf4>
   181f4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   181f8:	cmp	r0, #0
   181fc:	mov	r0, r5
   18200:	beq	18224 <__assert_fail@plt+0x6be8>
   18204:	ubfx	r0, r5, #5, #3
   18208:	ldr	r1, [fp, #16]
   1820c:	ldr	r0, [r1, r0, lsl #2]
   18210:	and	r1, r5, #31
   18214:	mov	r2, #1
   18218:	tst	r0, r2, lsl r1
   1821c:	mov	r0, r5
   18220:	bne	18230 <__assert_fail@plt+0x6bf4>
   18224:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18228:	cmp	r1, #0
   1822c:	beq	18788 <__assert_fail@plt+0x714c>
   18230:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18234:	tst	r1, #1
   18238:	bne	18904 <__assert_fail@plt+0x72c8>
   1823c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18240:	cmp	r1, #2
   18244:	ldr	r1, [fp, #-80]	; 0xffffffb0
   18248:	movwne	r1, #1
   1824c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18250:	orr	r1, r1, r2
   18254:	tst	r1, #1
   18258:	beq	18264 <__assert_fail@plt+0x6c28>
   1825c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18260:	b	182a0 <__assert_fail@plt+0x6c64>
   18264:	cmp	r8, r4
   18268:	movcc	r1, #39	; 0x27
   1826c:	strbcc	r1, [r7, r8]
   18270:	add	r1, r8, #1
   18274:	cmp	r1, r4
   18278:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1827c:	movcc	r2, #36	; 0x24
   18280:	strbcc	r2, [r7, r1]
   18284:	add	r1, r8, #2
   18288:	cmp	r1, r4
   1828c:	movcc	r2, #39	; 0x27
   18290:	strbcc	r2, [r7, r1]
   18294:	add	r8, r8, #3
   18298:	mov	r1, #1
   1829c:	str	r1, [fp, #-56]	; 0xffffffc8
   182a0:	cmp	r8, r4
   182a4:	movcc	r1, #92	; 0x5c
   182a8:	strbcc	r1, [r7, r8]
   182ac:	add	r8, r8, #1
   182b0:	cmp	r8, r4
   182b4:	strbcc	r0, [r7, r8]
   182b8:	and	r5, r5, r9
   182bc:	add	r8, r8, #1
   182c0:	add	r6, r6, #1
   182c4:	cmn	lr, #1
   182c8:	bne	17ca4 <__assert_fail@plt+0x6668>
   182cc:	b	17cb0 <__assert_fail@plt+0x6674>
   182d0:	mov	r9, #0
   182d4:	ldr	r0, [sp, #36]	; 0x24
   182d8:	cmp	r0, #0
   182dc:	mov	sl, #0
   182e0:	mov	r5, #0
   182e4:	beq	181f4 <__assert_fail@plt+0x6bb8>
   182e8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   182ec:	b	182c0 <__assert_fail@plt+0x6c84>
   182f0:	mov	r9, #1
   182f4:	b	17f78 <__assert_fail@plt+0x693c>
   182f8:	mov	r0, #0
   182fc:	str	r0, [fp, #-36]	; 0xffffffdc
   18300:	str	r0, [fp, #-40]	; 0xffffffd8
   18304:	cmn	lr, #1
   18308:	bne	1831c <__assert_fail@plt+0x6ce0>
   1830c:	mov	r0, ip
   18310:	bl	114ec <strlen@plt>
   18314:	ldr	ip, [fp, #-84]	; 0xffffffac
   18318:	mov	lr, r0
   1831c:	add	r0, ip, r6
   18320:	str	r0, [sp, #20]
   18324:	mov	r9, #1
   18328:	mov	r7, #0
   1832c:	sub	r4, fp, #40	; 0x28
   18330:	str	lr, [sp, #28]
   18334:	str	r7, [sp, #44]	; 0x2c
   18338:	add	r7, r7, r6
   1833c:	add	r1, ip, r7
   18340:	sub	r2, lr, r7
   18344:	sub	r0, fp, #44	; 0x2c
   18348:	mov	r3, r4
   1834c:	bl	1babc <__assert_fail@plt+0xa480>
   18350:	cmp	r0, #0
   18354:	beq	18814 <__assert_fail@plt+0x71d8>
   18358:	cmn	r0, #1
   1835c:	beq	187d4 <__assert_fail@plt+0x7198>
   18360:	cmn	r0, #2
   18364:	ldr	lr, [sp, #28]
   18368:	beq	187dc <__assert_fail@plt+0x71a0>
   1836c:	cmp	r0, #2
   18370:	mov	r1, #0
   18374:	movwcc	r1, #1
   18378:	ldr	r2, [sp, #60]	; 0x3c
   1837c:	eor	r2, r2, #1
   18380:	orrs	r1, r2, r1
   18384:	ldr	r4, [sp, #24]
   18388:	bne	18448 <__assert_fail@plt+0x6e0c>
   1838c:	ldr	r1, [sp, #44]	; 0x2c
   18390:	ldr	r2, [sp, #20]
   18394:	add	r1, r2, r1
   18398:	mov	r2, #1
   1839c:	ldrb	r3, [r1, r2]
   183a0:	sub	r3, r3, #91	; 0x5b
   183a4:	cmp	r3, #33	; 0x21
   183a8:	bhi	1843c <__assert_fail@plt+0x6e00>
   183ac:	add	r7, pc, #0
   183b0:	ldr	pc, [r7, r3, lsl #2]
   183b4:	strdeq	r8, [r1], -ip
   183b8:	strdeq	r8, [r1], -ip
   183bc:	andeq	r8, r1, ip, lsr r4
   183c0:	strdeq	r8, [r1], -ip
   183c4:	andeq	r8, r1, ip, lsr r4
   183c8:	strdeq	r8, [r1], -ip
   183cc:	andeq	r8, r1, ip, lsr r4
   183d0:	andeq	r8, r1, ip, lsr r4
   183d4:	andeq	r8, r1, ip, lsr r4
   183d8:	andeq	r8, r1, ip, lsr r4
   183dc:	andeq	r8, r1, ip, lsr r4
   183e0:	andeq	r8, r1, ip, lsr r4
   183e4:	andeq	r8, r1, ip, lsr r4
   183e8:	andeq	r8, r1, ip, lsr r4
   183ec:	andeq	r8, r1, ip, lsr r4
   183f0:	andeq	r8, r1, ip, lsr r4
   183f4:	andeq	r8, r1, ip, lsr r4
   183f8:	andeq	r8, r1, ip, lsr r4
   183fc:	andeq	r8, r1, ip, lsr r4
   18400:	andeq	r8, r1, ip, lsr r4
   18404:	andeq	r8, r1, ip, lsr r4
   18408:	andeq	r8, r1, ip, lsr r4
   1840c:	andeq	r8, r1, ip, lsr r4
   18410:	andeq	r8, r1, ip, lsr r4
   18414:	andeq	r8, r1, ip, lsr r4
   18418:	andeq	r8, r1, ip, lsr r4
   1841c:	andeq	r8, r1, ip, lsr r4
   18420:	andeq	r8, r1, ip, lsr r4
   18424:	andeq	r8, r1, ip, lsr r4
   18428:	andeq	r8, r1, ip, lsr r4
   1842c:	andeq	r8, r1, ip, lsr r4
   18430:	andeq	r8, r1, ip, lsr r4
   18434:	andeq	r8, r1, ip, lsr r4
   18438:	strdeq	r8, [r1], -ip
   1843c:	add	r2, r2, #1
   18440:	cmp	r2, r0
   18444:	bcc	1839c <__assert_fail@plt+0x6d60>
   18448:	ldr	r7, [sp, #44]	; 0x2c
   1844c:	add	r7, r0, r7
   18450:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18454:	bl	113f0 <iswprint@plt>
   18458:	cmp	r0, #0
   1845c:	movwne	r0, #1
   18460:	and	r9, r9, r0
   18464:	sub	r4, fp, #40	; 0x28
   18468:	mov	r0, r4
   1846c:	bl	11390 <mbsinit@plt>
   18470:	ldr	lr, [sp, #28]
   18474:	cmp	r0, #0
   18478:	ldr	ip, [fp, #-84]	; 0xffffffac
   1847c:	beq	18334 <__assert_fail@plt+0x6cf8>
   18480:	b	1881c <__assert_fail@plt+0x71e0>
   18484:	ldr	r0, [sp, #32]
   18488:	cmp	r0, #0
   1848c:	beq	18524 <__assert_fail@plt+0x6ee8>
   18490:	add	r0, r6, #2
   18494:	cmp	r0, lr
   18498:	bcs	18524 <__assert_fail@plt+0x6ee8>
   1849c:	add	r1, ip, r6
   184a0:	ldrb	r1, [r1, #1]
   184a4:	cmp	r1, #63	; 0x3f
   184a8:	bne	18524 <__assert_fail@plt+0x6ee8>
   184ac:	ldrb	r9, [ip, r0]
   184b0:	sub	r2, r9, #33	; 0x21
   184b4:	cmp	r2, #29
   184b8:	bhi	18524 <__assert_fail@plt+0x6ee8>
   184bc:	mov	r3, #1
   184c0:	movw	r1, #20929	; 0x51c1
   184c4:	movt	r1, #14336	; 0x3800
   184c8:	tst	r1, r3, lsl r2
   184cc:	beq	18524 <__assert_fail@plt+0x6ee8>
   184d0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   184d4:	tst	r1, #1
   184d8:	bne	18904 <__assert_fail@plt+0x72c8>
   184dc:	cmp	r8, r4
   184e0:	movcc	r1, #63	; 0x3f
   184e4:	strbcc	r1, [r7, r8]
   184e8:	add	r2, r8, #1
   184ec:	cmp	r2, r4
   184f0:	movcc	r1, #34	; 0x22
   184f4:	strbcc	r1, [r7, r2]
   184f8:	add	r2, r8, #2
   184fc:	cmp	r2, r4
   18500:	movcc	r1, #34	; 0x22
   18504:	strbcc	r1, [r7, r2]
   18508:	add	r2, r8, #3
   1850c:	cmp	r2, r4
   18510:	movcc	r1, #63	; 0x3f
   18514:	strbcc	r1, [r7, r2]
   18518:	add	r8, r8, #4
   1851c:	mov	r6, r0
   18520:	mov	r5, r9
   18524:	mov	r9, #0
   18528:	b	17f78 <__assert_fail@plt+0x693c>
   1852c:	add	r1, r2, r6
   18530:	str	r1, [sp, #44]	; 0x2c
   18534:	add	r1, r6, #1
   18538:	mov	r3, #0
   1853c:	ldr	lr, [sp, #28]
   18540:	ldr	r6, [fp, #-60]	; 0xffffffc4
   18544:	tst	r0, #1
   18548:	bne	1863c <__assert_fail@plt+0x7000>
   1854c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18550:	tst	r2, #1
   18554:	bne	18904 <__assert_fail@plt+0x72c8>
   18558:	cmp	r6, #2
   1855c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   18560:	movwne	r3, #1
   18564:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18568:	orr	r3, r3, r2
   1856c:	tst	r3, #1
   18570:	bne	185ac <__assert_fail@plt+0x6f70>
   18574:	cmp	r8, r4
   18578:	movcc	r2, #39	; 0x27
   1857c:	strbcc	r2, [r7, r8]
   18580:	add	r3, r8, #1
   18584:	cmp	r3, r4
   18588:	movcc	r2, #36	; 0x24
   1858c:	strbcc	r2, [r7, r3]
   18590:	add	r3, r8, #2
   18594:	cmp	r3, r4
   18598:	movcc	r2, #39	; 0x27
   1859c:	strbcc	r2, [r7, r3]
   185a0:	add	r8, r8, #3
   185a4:	mov	r2, #1
   185a8:	str	r2, [fp, #-56]	; 0xffffffc8
   185ac:	cmp	r8, r4
   185b0:	movcc	r2, #92	; 0x5c
   185b4:	strbcc	r2, [r7, r8]
   185b8:	add	r3, r8, #1
   185bc:	cmp	r3, r4
   185c0:	bcs	185e0 <__assert_fail@plt+0x6fa4>
   185c4:	and	r7, r5, #192	; 0xc0
   185c8:	mov	r2, #48	; 0x30
   185cc:	orr	r7, r2, r7, lsr #6
   185d0:	ldr	r6, [sp, #80]	; 0x50
   185d4:	strb	r7, [r6, r3]
   185d8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   185dc:	ldr	r7, [sp, #80]	; 0x50
   185e0:	add	r3, r8, #2
   185e4:	cmp	r3, r4
   185e8:	bcs	18608 <__assert_fail@plt+0x6fcc>
   185ec:	lsr	r7, r5, #3
   185f0:	mov	r2, #6
   185f4:	bfi	r7, r2, #3, #29
   185f8:	ldr	r6, [sp, #80]	; 0x50
   185fc:	strb	r7, [r6, r3]
   18600:	ldr	r6, [fp, #-60]	; 0xffffffc4
   18604:	ldr	r7, [sp, #80]	; 0x50
   18608:	mov	r2, #6
   1860c:	bfi	r5, r2, #3, #29
   18610:	add	r8, r8, #3
   18614:	mov	r3, #1
   18618:	b	18660 <__assert_fail@plt+0x7024>
   1861c:	ldr	r7, [sp, #80]	; 0x50
   18620:	cmp	r8, r4
   18624:	strbcc	r5, [r7, r8]
   18628:	ldrb	r5, [ip, r1]
   1862c:	add	r1, r1, #1
   18630:	add	r8, r8, #1
   18634:	tst	r0, #1
   18638:	beq	1854c <__assert_fail@plt+0x6f10>
   1863c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   18640:	tst	r2, #1
   18644:	beq	18658 <__assert_fail@plt+0x701c>
   18648:	cmp	r8, r4
   1864c:	movcc	r2, #92	; 0x5c
   18650:	strbcc	r2, [r7, r8]
   18654:	add	r8, r8, #1
   18658:	mov	r2, #0
   1865c:	str	r2, [fp, #-52]	; 0xffffffcc
   18660:	and	sl, r3, #1
   18664:	ldr	r2, [sp, #44]	; 0x2c
   18668:	cmp	r2, r1
   1866c:	bls	18778 <__assert_fail@plt+0x713c>
   18670:	cmp	sl, #0
   18674:	movwne	sl, #1
   18678:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1867c:	mvn	r7, r2
   18680:	orr	r7, r7, sl
   18684:	tst	r7, #1
   18688:	bne	1861c <__assert_fail@plt+0x6fe0>
   1868c:	cmp	r8, r4
   18690:	ldrcc	r7, [sp, #80]	; 0x50
   18694:	movcc	r2, #39	; 0x27
   18698:	strbcc	r2, [r7, r8]
   1869c:	add	r7, r8, #1
   186a0:	cmp	r7, r4
   186a4:	ldrcc	r6, [sp, #80]	; 0x50
   186a8:	movcc	r2, #39	; 0x27
   186ac:	strbcc	r2, [r6, r7]
   186b0:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   186b4:	add	r8, r8, #2
   186b8:	mov	r2, #0
   186bc:	str	r2, [fp, #-56]	; 0xffffffc8
   186c0:	b	1861c <__assert_fail@plt+0x6fe0>
   186c4:	cmp	r8, r4
   186c8:	movcc	r0, #39	; 0x27
   186cc:	strbcc	r0, [r7, r8]
   186d0:	add	r0, r8, #1
   186d4:	cmp	r0, r4
   186d8:	movcc	r1, #36	; 0x24
   186dc:	strbcc	r1, [r7, r0]
   186e0:	add	r0, r8, #2
   186e4:	cmp	r0, r4
   186e8:	movcc	r1, #39	; 0x27
   186ec:	strbcc	r1, [r7, r0]
   186f0:	add	r0, r8, #3
   186f4:	mov	r2, #1
   186f8:	cmp	r0, r4
   186fc:	movcc	r1, #92	; 0x5c
   18700:	strbcc	r1, [r7, r0]
   18704:	str	r2, [fp, #-56]	; 0xffffffc8
   18708:	add	r8, r0, #1
   1870c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18710:	cmp	r1, #2
   18714:	beq	18768 <__assert_fail@plt+0x712c>
   18718:	add	r1, r6, #1
   1871c:	mov	r9, #0
   18720:	mov	sl, #1
   18724:	mov	r5, #48	; 0x30
   18728:	cmp	r1, lr
   1872c:	bcs	17f78 <__assert_fail@plt+0x693c>
   18730:	ldrb	r1, [ip, r1]
   18734:	sub	r1, r1, #48	; 0x30
   18738:	uxtb	r1, r1
   1873c:	cmp	r1, #9
   18740:	bhi	17f78 <__assert_fail@plt+0x693c>
   18744:	cmp	r8, r4
   18748:	movcc	r1, #48	; 0x30
   1874c:	strbcc	r1, [r7, r8]
   18750:	add	r1, r0, #2
   18754:	cmp	r1, r4
   18758:	movcc	r2, #48	; 0x30
   1875c:	strbcc	r2, [r7, r1]
   18760:	add	r8, r0, #3
   18764:	b	17f78 <__assert_fail@plt+0x693c>
   18768:	mov	r0, #48	; 0x30
   1876c:	mov	sl, #1
   18770:	mov	r9, #0
   18774:	b	18224 <__assert_fail@plt+0x6be8>
   18778:	sub	r6, r1, #1
   1877c:	cmp	sl, #0
   18780:	movwne	sl, #1
   18784:	mov	r0, r5
   18788:	cmp	sl, #0
   1878c:	bne	187cc <__assert_fail@plt+0x7190>
   18790:	ldr	r1, [fp, #-56]	; 0xffffffc8
   18794:	tst	r1, #1
   18798:	beq	187cc <__assert_fail@plt+0x7190>
   1879c:	cmp	r8, r4
   187a0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   187a4:	movcc	r1, #39	; 0x27
   187a8:	strbcc	r1, [r7, r8]
   187ac:	add	r1, r8, #1
   187b0:	cmp	r1, r4
   187b4:	movcc	r2, #39	; 0x27
   187b8:	strbcc	r2, [r7, r1]
   187bc:	add	r8, r8, #2
   187c0:	mov	r1, #0
   187c4:	str	r1, [fp, #-56]	; 0xffffffc8
   187c8:	b	182b0 <__assert_fail@plt+0x6c74>
   187cc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   187d0:	b	182b0 <__assert_fail@plt+0x6c74>
   187d4:	mov	r9, #0
   187d8:	b	18814 <__assert_fail@plt+0x71d8>
   187dc:	mov	r9, #0
   187e0:	cmp	r7, lr
   187e4:	bcs	18814 <__assert_fail@plt+0x71d8>
   187e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   187ec:	ldr	r7, [sp, #44]	; 0x2c
   187f0:	ldr	r0, [sp, #20]
   187f4:	ldrb	r0, [r0, r7]
   187f8:	cmp	r0, #0
   187fc:	beq	1881c <__assert_fail@plt+0x71e0>
   18800:	add	r7, r7, #1
   18804:	add	r0, r6, r7
   18808:	cmp	r0, lr
   1880c:	bcc	187f0 <__assert_fail@plt+0x71b4>
   18810:	b	1881c <__assert_fail@plt+0x71e0>
   18814:	ldr	ip, [fp, #-84]	; 0xffffffac
   18818:	ldr	r7, [sp, #44]	; 0x2c
   1881c:	mov	r1, r7
   18820:	ldr	r7, [sp, #80]	; 0x50
   18824:	b	1814c <__assert_fail@plt+0x6b10>
   18828:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1882c:	eor	r0, r1, #2
   18830:	orr	r0, r0, r8
   18834:	clz	r0, r0
   18838:	lsr	r0, r0, #5
   1883c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18840:	tst	r2, r0
   18844:	bne	18904 <__assert_fail@plt+0x72c8>
   18848:	cmp	r1, #2
   1884c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   18850:	movwne	r0, #1
   18854:	orr	r0, r2, r0
   18858:	tst	r0, #1
   1885c:	ldreq	r0, [sp, #56]	; 0x38
   18860:	eoreq	r0, r0, #1
   18864:	tsteq	r0, #1
   18868:	bne	1889c <__assert_fail@plt+0x7260>
   1886c:	mov	r9, lr
   18870:	tst	r5, #1
   18874:	bne	1896c <__assert_fail@plt+0x7330>
   18878:	ldr	r0, [sp, #72]	; 0x48
   1887c:	cmp	r0, #0
   18880:	beq	1889c <__assert_fail@plt+0x7260>
   18884:	mov	r5, #0
   18888:	cmp	r4, #0
   1888c:	ldr	r0, [sp, #84]	; 0x54
   18890:	mov	sl, r2
   18894:	ldr	r6, [sp, #72]	; 0x48
   18898:	beq	17a34 <__assert_fail@plt+0x63f8>
   1889c:	ldr	r1, [sp, #92]	; 0x5c
   188a0:	clz	r0, r1
   188a4:	lsr	r0, r0, #5
   188a8:	orr	r0, r0, r2
   188ac:	tst	r0, #1
   188b0:	bne	188dc <__assert_fail@plt+0x72a0>
   188b4:	ldrb	r0, [r1]
   188b8:	cmp	r0, #0
   188bc:	beq	188dc <__assert_fail@plt+0x72a0>
   188c0:	add	r1, r1, #1
   188c4:	cmp	r8, r4
   188c8:	strbcc	r0, [r7, r8]
   188cc:	add	r8, r8, #1
   188d0:	ldrb	r0, [r1], #1
   188d4:	cmp	r0, #0
   188d8:	bne	188c4 <__assert_fail@plt+0x7288>
   188dc:	cmp	r8, r4
   188e0:	movcc	r0, #0
   188e4:	strbcc	r0, [r7, r8]
   188e8:	b	18960 <__assert_fail@plt+0x7324>
   188ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   188f0:	mov	lr, r4
   188f4:	mov	r4, r5
   188f8:	b	18904 <__assert_fail@plt+0x72c8>
   188fc:	ldr	r7, [sp, #80]	; 0x50
   18900:	ldr	ip, [fp, #-84]	; 0xffffffac
   18904:	mov	r0, #0
   18908:	ldr	r1, [fp, #12]
   1890c:	bic	r1, r1, #2
   18910:	ldr	r2, [sp, #84]	; 0x54
   18914:	tst	r2, #1
   18918:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1891c:	mov	r2, r3
   18920:	movwne	r2, #4
   18924:	cmp	r3, #2
   18928:	movne	r2, r3
   1892c:	str	r2, [sp]
   18930:	str	r1, [sp, #4]
   18934:	str	r0, [sp, #8]
   18938:	ldr	r0, [sp, #68]	; 0x44
   1893c:	str	r0, [sp, #12]
   18940:	ldr	r0, [sp, #76]	; 0x4c
   18944:	str	r0, [sp, #16]
   18948:	mov	r0, r7
   1894c:	mov	r1, r4
   18950:	mov	r2, ip
   18954:	mov	r3, lr
   18958:	bl	179ac <__assert_fail@plt+0x6370>
   1895c:	mov	r8, r0
   18960:	mov	r0, r8
   18964:	sub	sp, fp, #28
   18968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1896c:	mov	r0, #5
   18970:	str	r0, [sp]
   18974:	ldr	r0, [fp, #12]
   18978:	str	r0, [sp, #4]
   1897c:	ldr	r0, [fp, #16]
   18980:	str	r0, [sp, #8]
   18984:	ldr	r0, [sp, #68]	; 0x44
   18988:	str	r0, [sp, #12]
   1898c:	ldr	r0, [sp, #76]	; 0x4c
   18990:	str	r0, [sp, #16]
   18994:	mov	r0, r7
   18998:	ldr	r1, [sp, #72]	; 0x48
   1899c:	ldr	r2, [fp, #-84]	; 0xffffffac
   189a0:	mov	r3, r9
   189a4:	b	18958 <__assert_fail@plt+0x731c>
   189a8:	bl	11618 <abort@plt>
   189ac:	mov	r3, r2
   189b0:	mov	r2, #0
   189b4:	b	189b8 <__assert_fail@plt+0x737c>
   189b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189bc:	add	fp, sp, #28
   189c0:	sub	sp, sp, #36	; 0x24
   189c4:	mov	r4, r2
   189c8:	str	r2, [sp, #24]
   189cc:	mov	r5, r1
   189d0:	mov	r6, r0
   189d4:	str	r0, [sp, #20]
   189d8:	movw	r8, #58032	; 0xe2b0
   189dc:	movt	r8, #2
   189e0:	cmp	r3, #0
   189e4:	movne	r8, r3
   189e8:	bl	1151c <__errno_location@plt>
   189ec:	str	r0, [sp, #28]
   189f0:	ldm	r8, {r3, r9}
   189f4:	ldr	r1, [r8, #40]	; 0x28
   189f8:	ldr	r2, [r8, #44]	; 0x2c
   189fc:	ldr	r7, [r0]
   18a00:	str	r7, [sp, #32]
   18a04:	add	sl, r8, #8
   18a08:	cmp	r4, #0
   18a0c:	orreq	r9, r9, #1
   18a10:	stm	sp, {r3, r9, sl}
   18a14:	str	r1, [sp, #12]
   18a18:	str	r2, [sp, #16]
   18a1c:	mov	r0, #0
   18a20:	mov	r1, #0
   18a24:	mov	r2, r6
   18a28:	mov	r3, r5
   18a2c:	mov	r7, r5
   18a30:	bl	179ac <__assert_fail@plt+0x6370>
   18a34:	mov	r5, r0
   18a38:	add	r4, r0, #1
   18a3c:	mov	r0, r4
   18a40:	bl	19e58 <__assert_fail@plt+0x881c>
   18a44:	mov	r6, r0
   18a48:	ldr	r0, [r8]
   18a4c:	ldr	r1, [r8, #40]	; 0x28
   18a50:	ldr	r2, [r8, #44]	; 0x2c
   18a54:	stm	sp, {r0, r9, sl}
   18a58:	str	r1, [sp, #12]
   18a5c:	str	r2, [sp, #16]
   18a60:	mov	r0, r6
   18a64:	mov	r1, r4
   18a68:	ldr	r2, [sp, #20]
   18a6c:	mov	r3, r7
   18a70:	bl	179ac <__assert_fail@plt+0x6370>
   18a74:	ldr	r0, [sp, #24]
   18a78:	ldr	r1, [sp, #32]
   18a7c:	ldr	r2, [sp, #28]
   18a80:	str	r1, [r2]
   18a84:	cmp	r0, #0
   18a88:	strne	r5, [r0]
   18a8c:	mov	r0, r6
   18a90:	sub	sp, fp, #28
   18a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18a9c:	add	fp, sp, #24
   18aa0:	movw	r8, #57728	; 0xe180
   18aa4:	movt	r8, #2
   18aa8:	ldr	r4, [r8]
   18aac:	movw	r5, #57732	; 0xe184
   18ab0:	movt	r5, #2
   18ab4:	ldr	r0, [r5]
   18ab8:	cmp	r0, #2
   18abc:	blt	18ae8 <__assert_fail@plt+0x74ac>
   18ac0:	add	r7, r4, #12
   18ac4:	mov	r6, #0
   18ac8:	ldr	r0, [r7, r6, lsl #3]
   18acc:	bl	158f8 <__assert_fail@plt+0x42bc>
   18ad0:	add	r0, r6, #1
   18ad4:	ldr	r1, [r5]
   18ad8:	add	r2, r6, #2
   18adc:	cmp	r2, r1
   18ae0:	mov	r6, r0
   18ae4:	blt	18ac8 <__assert_fail@plt+0x748c>
   18ae8:	ldr	r0, [r4, #4]
   18aec:	movw	r7, #58080	; 0xe2e0
   18af0:	movt	r7, #2
   18af4:	cmp	r0, r7
   18af8:	beq	18b10 <__assert_fail@plt+0x74d4>
   18afc:	bl	158f8 <__assert_fail@plt+0x42bc>
   18b00:	movw	r0, #57736	; 0xe188
   18b04:	movt	r0, #2
   18b08:	mov	r6, #256	; 0x100
   18b0c:	strd	r6, [r0]
   18b10:	movw	r6, #57736	; 0xe188
   18b14:	movt	r6, #2
   18b18:	cmp	r4, r6
   18b1c:	beq	18b2c <__assert_fail@plt+0x74f0>
   18b20:	mov	r0, r4
   18b24:	bl	158f8 <__assert_fail@plt+0x42bc>
   18b28:	str	r6, [r8]
   18b2c:	mov	r0, #1
   18b30:	str	r0, [r5]
   18b34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b38:	movw	r3, #58032	; 0xe2b0
   18b3c:	movt	r3, #2
   18b40:	mvn	r2, #0
   18b44:	b	18b48 <__assert_fail@plt+0x750c>
   18b48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b4c:	add	fp, sp, #28
   18b50:	sub	sp, sp, #44	; 0x2c
   18b54:	mov	r7, r3
   18b58:	str	r2, [sp, #36]	; 0x24
   18b5c:	str	r1, [sp, #32]
   18b60:	mov	r5, r0
   18b64:	bl	1151c <__errno_location@plt>
   18b68:	cmp	r5, #0
   18b6c:	blt	18cd8 <__assert_fail@plt+0x769c>
   18b70:	cmn	r5, #-2147483647	; 0x80000001
   18b74:	beq	18cd8 <__assert_fail@plt+0x769c>
   18b78:	movw	r4, #57728	; 0xe180
   18b7c:	movt	r4, #2
   18b80:	ldr	r6, [r4]
   18b84:	str	r0, [sp, #28]
   18b88:	ldr	r0, [r0]
   18b8c:	str	r0, [sp, #24]
   18b90:	movw	r8, #57732	; 0xe184
   18b94:	movt	r8, #2
   18b98:	ldr	r1, [r8]
   18b9c:	cmp	r1, r5
   18ba0:	ble	18bac <__assert_fail@plt+0x7570>
   18ba4:	mov	sl, r6
   18ba8:	b	18c14 <__assert_fail@plt+0x75d8>
   18bac:	str	r1, [fp, #-32]	; 0xffffffe0
   18bb0:	mov	r0, #8
   18bb4:	str	r0, [sp]
   18bb8:	movw	r9, #57736	; 0xe188
   18bbc:	movt	r9, #2
   18bc0:	subs	r0, r6, r9
   18bc4:	movne	r0, r6
   18bc8:	add	r2, r5, #1
   18bcc:	sub	r2, r2, r1
   18bd0:	sub	r1, fp, #32
   18bd4:	mvn	r3, #-2147483648	; 0x80000000
   18bd8:	bl	19f40 <__assert_fail@plt+0x8904>
   18bdc:	mov	sl, r0
   18be0:	str	r0, [r4]
   18be4:	cmp	r6, r9
   18be8:	ldrdeq	r0, [r9]
   18bec:	stmeq	sl, {r0, r1}
   18bf0:	ldr	r1, [r8]
   18bf4:	add	r0, sl, r1, lsl #3
   18bf8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18bfc:	sub	r1, r2, r1
   18c00:	lsl	r2, r1, #3
   18c04:	mov	r1, #0
   18c08:	bl	11540 <memset@plt>
   18c0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18c10:	str	r0, [r8]
   18c14:	mov	r9, sl
   18c18:	ldr	r6, [r9, r5, lsl #3]!
   18c1c:	ldr	r4, [r9, #4]!
   18c20:	ldm	r7, {r0, r1}
   18c24:	ldr	r2, [r7, #40]	; 0x28
   18c28:	ldr	r3, [r7, #44]	; 0x2c
   18c2c:	orr	r8, r1, #1
   18c30:	add	r1, r7, #8
   18c34:	stm	sp, {r0, r8}
   18c38:	str	r1, [sp, #20]
   18c3c:	add	r0, sp, #8
   18c40:	stm	r0, {r1, r2, r3}
   18c44:	mov	r0, r4
   18c48:	mov	r1, r6
   18c4c:	ldr	r2, [sp, #32]
   18c50:	ldr	r3, [sp, #36]	; 0x24
   18c54:	bl	179ac <__assert_fail@plt+0x6370>
   18c58:	cmp	r6, r0
   18c5c:	bhi	18cc0 <__assert_fail@plt+0x7684>
   18c60:	add	r6, r0, #1
   18c64:	str	r6, [sl, r5, lsl #3]
   18c68:	movw	r0, #58080	; 0xe2e0
   18c6c:	movt	r0, #2
   18c70:	cmp	r4, r0
   18c74:	beq	18c80 <__assert_fail@plt+0x7644>
   18c78:	mov	r0, r4
   18c7c:	bl	158f8 <__assert_fail@plt+0x42bc>
   18c80:	mov	r0, r6
   18c84:	bl	19e58 <__assert_fail@plt+0x881c>
   18c88:	mov	r4, r0
   18c8c:	str	r0, [r9]
   18c90:	ldr	r0, [r7]
   18c94:	ldr	r1, [r7, #40]	; 0x28
   18c98:	ldr	r2, [r7, #44]	; 0x2c
   18c9c:	stm	sp, {r0, r8}
   18ca0:	ldr	r0, [sp, #20]
   18ca4:	add	r3, sp, #8
   18ca8:	stm	r3, {r0, r1, r2}
   18cac:	mov	r0, r4
   18cb0:	mov	r1, r6
   18cb4:	ldr	r2, [sp, #32]
   18cb8:	ldr	r3, [sp, #36]	; 0x24
   18cbc:	bl	179ac <__assert_fail@plt+0x6370>
   18cc0:	ldr	r0, [sp, #28]
   18cc4:	ldr	r1, [sp, #24]
   18cc8:	str	r1, [r0]
   18ccc:	mov	r0, r4
   18cd0:	sub	sp, fp, #28
   18cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cd8:	bl	11618 <abort@plt>
   18cdc:	movw	r3, #58032	; 0xe2b0
   18ce0:	movt	r3, #2
   18ce4:	b	18b48 <__assert_fail@plt+0x750c>
   18ce8:	mov	r1, r0
   18cec:	mov	r0, #0
   18cf0:	b	18b38 <__assert_fail@plt+0x74fc>
   18cf4:	mov	r2, r1
   18cf8:	mov	r1, r0
   18cfc:	mov	r0, #0
   18d00:	b	18cdc <__assert_fail@plt+0x76a0>
   18d04:	push	{r4, r5, r6, sl, fp, lr}
   18d08:	add	fp, sp, #16
   18d0c:	sub	sp, sp, #48	; 0x30
   18d10:	mov	r4, r2
   18d14:	mov	r5, r0
   18d18:	mov	r6, sp
   18d1c:	mov	r0, r6
   18d20:	bl	18d40 <__assert_fail@plt+0x7704>
   18d24:	mov	r0, r5
   18d28:	mov	r1, r4
   18d2c:	mvn	r2, #0
   18d30:	mov	r3, r6
   18d34:	bl	18b48 <__assert_fail@plt+0x750c>
   18d38:	sub	sp, fp, #16
   18d3c:	pop	{r4, r5, r6, sl, fp, pc}
   18d40:	vmov.i32	q8, #0	; 0x00000000
   18d44:	mov	r2, #32
   18d48:	mov	r3, r0
   18d4c:	vst1.32	{d16-d17}, [r3], r2
   18d50:	vst1.32	{d16-d17}, [r3]
   18d54:	add	r2, r0, #16
   18d58:	vst1.32	{d16-d17}, [r2]
   18d5c:	cmp	r1, #10
   18d60:	strne	r1, [r0]
   18d64:	bxne	lr
   18d68:	push	{fp, lr}
   18d6c:	mov	fp, sp
   18d70:	bl	11618 <abort@plt>
   18d74:	push	{r4, r5, r6, r7, fp, lr}
   18d78:	add	fp, sp, #16
   18d7c:	sub	sp, sp, #48	; 0x30
   18d80:	mov	r4, r3
   18d84:	mov	r5, r2
   18d88:	mov	r6, r0
   18d8c:	mov	r7, sp
   18d90:	mov	r0, r7
   18d94:	bl	18d40 <__assert_fail@plt+0x7704>
   18d98:	mov	r0, r6
   18d9c:	mov	r1, r5
   18da0:	mov	r2, r4
   18da4:	mov	r3, r7
   18da8:	bl	18b48 <__assert_fail@plt+0x750c>
   18dac:	sub	sp, fp, #16
   18db0:	pop	{r4, r5, r6, r7, fp, pc}
   18db4:	mov	r2, r1
   18db8:	mov	r1, r0
   18dbc:	mov	r0, #0
   18dc0:	b	18d04 <__assert_fail@plt+0x76c8>
   18dc4:	mov	r3, r2
   18dc8:	mov	r2, r1
   18dcc:	mov	r1, r0
   18dd0:	mov	r0, #0
   18dd4:	b	18d74 <__assert_fail@plt+0x7738>
   18dd8:	push	{r4, r5, r6, sl, fp, lr}
   18ddc:	add	fp, sp, #16
   18de0:	sub	sp, sp, #48	; 0x30
   18de4:	mov	r4, r1
   18de8:	mov	r5, r0
   18dec:	mov	r0, #32
   18df0:	movw	r1, #58032	; 0xe2b0
   18df4:	movt	r1, #2
   18df8:	add	r3, r1, #16
   18dfc:	vld1.64	{d16-d17}, [r1], r0
   18e00:	mov	r6, sp
   18e04:	vld1.64	{d18-d19}, [r3]
   18e08:	add	r3, r6, #16
   18e0c:	vld1.64	{d20-d21}, [r1]
   18e10:	vst1.64	{d18-d19}, [r3]
   18e14:	mov	r1, r6
   18e18:	vst1.64	{d16-d17}, [r1], r0
   18e1c:	vst1.64	{d20-d21}, [r1]
   18e20:	mov	r0, r6
   18e24:	mov	r1, r2
   18e28:	mov	r2, #1
   18e2c:	bl	178a0 <__assert_fail@plt+0x6264>
   18e30:	mov	r0, #0
   18e34:	mov	r1, r5
   18e38:	mov	r2, r4
   18e3c:	mov	r3, r6
   18e40:	bl	18b48 <__assert_fail@plt+0x750c>
   18e44:	sub	sp, fp, #16
   18e48:	pop	{r4, r5, r6, sl, fp, pc}
   18e4c:	mov	r2, r1
   18e50:	mvn	r1, #0
   18e54:	b	18dd8 <__assert_fail@plt+0x779c>
   18e58:	mov	r1, #58	; 0x3a
   18e5c:	b	18e4c <__assert_fail@plt+0x7810>
   18e60:	mov	r2, #58	; 0x3a
   18e64:	b	18dd8 <__assert_fail@plt+0x779c>
   18e68:	push	{r4, r5, r6, sl, fp, lr}
   18e6c:	add	fp, sp, #16
   18e70:	sub	sp, sp, #48	; 0x30
   18e74:	mov	r4, r2
   18e78:	mov	r5, r0
   18e7c:	mov	r6, sp
   18e80:	mov	r0, r6
   18e84:	bl	18d40 <__assert_fail@plt+0x7704>
   18e88:	mov	r0, r6
   18e8c:	mov	r1, #58	; 0x3a
   18e90:	mov	r2, #1
   18e94:	bl	178a0 <__assert_fail@plt+0x6264>
   18e98:	mov	r0, r5
   18e9c:	mov	r1, r4
   18ea0:	mvn	r2, #0
   18ea4:	mov	r3, r6
   18ea8:	bl	18b48 <__assert_fail@plt+0x750c>
   18eac:	sub	sp, fp, #16
   18eb0:	pop	{r4, r5, r6, sl, fp, pc}
   18eb4:	push	{fp, lr}
   18eb8:	mov	fp, sp
   18ebc:	sub	sp, sp, #8
   18ec0:	mvn	ip, #0
   18ec4:	str	ip, [sp]
   18ec8:	bl	18ed4 <__assert_fail@plt+0x7898>
   18ecc:	mov	sp, fp
   18ed0:	pop	{fp, pc}
   18ed4:	push	{r4, r5, r6, r7, fp, lr}
   18ed8:	add	fp, sp, #16
   18edc:	sub	sp, sp, #48	; 0x30
   18ee0:	mov	r7, r3
   18ee4:	mov	r5, r0
   18ee8:	mov	r0, #32
   18eec:	movw	r3, #58032	; 0xe2b0
   18ef0:	movt	r3, #2
   18ef4:	add	r4, r3, #16
   18ef8:	vld1.64	{d16-d17}, [r3], r0
   18efc:	mov	r6, sp
   18f00:	vld1.64	{d18-d19}, [r4]
   18f04:	add	r4, r6, #16
   18f08:	vld1.64	{d20-d21}, [r3]
   18f0c:	vst1.64	{d18-d19}, [r4]
   18f10:	mov	r3, r6
   18f14:	vst1.64	{d16-d17}, [r3], r0
   18f18:	vst1.64	{d20-d21}, [r3]
   18f1c:	mov	r0, r6
   18f20:	bl	178f8 <__assert_fail@plt+0x62bc>
   18f24:	ldr	r2, [fp, #8]
   18f28:	mov	r0, r5
   18f2c:	mov	r1, r7
   18f30:	mov	r3, r6
   18f34:	bl	18b48 <__assert_fail@plt+0x750c>
   18f38:	sub	sp, fp, #16
   18f3c:	pop	{r4, r5, r6, r7, fp, pc}
   18f40:	mov	r3, r2
   18f44:	mov	r2, r1
   18f48:	mov	r1, r0
   18f4c:	mov	r0, #0
   18f50:	b	18eb4 <__assert_fail@plt+0x7878>
   18f54:	push	{fp, lr}
   18f58:	mov	fp, sp
   18f5c:	sub	sp, sp, #8
   18f60:	mov	ip, r2
   18f64:	mov	r2, r1
   18f68:	mov	r1, r0
   18f6c:	str	r3, [sp]
   18f70:	mov	r0, #0
   18f74:	mov	r3, ip
   18f78:	bl	18ed4 <__assert_fail@plt+0x7898>
   18f7c:	mov	sp, fp
   18f80:	pop	{fp, pc}
   18f84:	movw	r3, #57744	; 0xe190
   18f88:	movt	r3, #2
   18f8c:	b	18b48 <__assert_fail@plt+0x750c>
   18f90:	mov	r2, r1
   18f94:	mov	r1, r0
   18f98:	mov	r0, #0
   18f9c:	b	18f84 <__assert_fail@plt+0x7948>
   18fa0:	mvn	r2, #0
   18fa4:	b	18f84 <__assert_fail@plt+0x7948>
   18fa8:	mov	r1, r0
   18fac:	mov	r0, #0
   18fb0:	b	18fa0 <__assert_fail@plt+0x7964>
   18fb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18fb8:	add	fp, sp, #24
   18fbc:	sub	sp, sp, #16
   18fc0:	mov	r4, r1
   18fc4:	mov	r5, r0
   18fc8:	mov	r7, #0
   18fcc:	mov	r0, #0
   18fd0:	mov	r1, r5
   18fd4:	mov	r2, #5
   18fd8:	bl	113b4 <dcgettext@plt>
   18fdc:	cmp	r0, r5
   18fe0:	beq	18fec <__assert_fail@plt+0x79b0>
   18fe4:	sub	sp, fp, #24
   18fe8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18fec:	bl	1ba84 <__assert_fail@plt+0xa448>
   18ff0:	mov	r6, r0
   18ff4:	mov	r8, #56	; 0x38
   18ff8:	mov	r0, #45	; 0x2d
   18ffc:	stm	sp, {r0, r8}
   19000:	str	r7, [sp, #8]
   19004:	str	r7, [sp, #12]
   19008:	mov	r0, r6
   1900c:	mov	r1, #85	; 0x55
   19010:	mov	r2, #84	; 0x54
   19014:	mov	r3, #70	; 0x46
   19018:	bl	190b0 <__assert_fail@plt+0x7a74>
   1901c:	cmp	r0, #0
   19020:	beq	1903c <__assert_fail@plt+0x7a00>
   19024:	ldrb	r1, [r5]
   19028:	movw	r2, #54833	; 0xd631
   1902c:	movt	r2, #1
   19030:	movw	r0, #54837	; 0xd635
   19034:	movt	r0, #1
   19038:	b	19080 <__assert_fail@plt+0x7a44>
   1903c:	mov	r0, #48	; 0x30
   19040:	mov	r1, #51	; 0x33
   19044:	str	r8, [sp]
   19048:	stmib	sp, {r0, r1}
   1904c:	str	r0, [sp, #12]
   19050:	mov	r0, r6
   19054:	mov	r1, #71	; 0x47
   19058:	mov	r2, #66	; 0x42
   1905c:	mov	r3, #49	; 0x31
   19060:	bl	190b0 <__assert_fail@plt+0x7a74>
   19064:	cmp	r0, #0
   19068:	beq	19090 <__assert_fail@plt+0x7a54>
   1906c:	ldrb	r1, [r5]
   19070:	movw	r2, #54841	; 0xd639
   19074:	movt	r2, #1
   19078:	movw	r0, #54845	; 0xd63d
   1907c:	movt	r0, #1
   19080:	cmp	r1, #96	; 0x60
   19084:	moveq	r0, r2
   19088:	sub	sp, fp, #24
   1908c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19090:	movw	r1, #54829	; 0xd62d
   19094:	movt	r1, #1
   19098:	movw	r0, #55964	; 0xda9c
   1909c:	movt	r0, #1
   190a0:	cmp	r4, #9
   190a4:	moveq	r0, r1
   190a8:	sub	sp, fp, #24
   190ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   190b0:	push	{r4, r5, r6, r7, fp, lr}
   190b4:	add	fp, sp, #16
   190b8:	sub	sp, sp, #16
   190bc:	mov	r4, r3
   190c0:	mov	r5, r2
   190c4:	mov	r7, r1
   190c8:	mov	r6, r0
   190cc:	mov	r0, r1
   190d0:	bl	1b758 <__assert_fail@plt+0xa11c>
   190d4:	ldrb	r1, [r6]
   190d8:	cmp	r0, #0
   190dc:	andne	r1, r1, #223	; 0xdf
   190e0:	mov	r0, #0
   190e4:	cmp	r1, r7
   190e8:	bne	19128 <__assert_fail@plt+0x7aec>
   190ec:	cmp	r7, #0
   190f0:	moveq	r0, #1
   190f4:	subeq	sp, fp, #16
   190f8:	popeq	{r4, r5, r6, r7, fp, pc}
   190fc:	ldr	r0, [fp, #20]
   19100:	ldr	r1, [fp, #16]
   19104:	ldr	r2, [fp, #12]
   19108:	ldr	r3, [fp, #8]
   1910c:	str	r2, [sp]
   19110:	str	r1, [sp, #4]
   19114:	str	r0, [sp, #8]
   19118:	mov	r0, r6
   1911c:	mov	r1, r5
   19120:	mov	r2, r4
   19124:	bl	19130 <__assert_fail@plt+0x7af4>
   19128:	sub	sp, fp, #16
   1912c:	pop	{r4, r5, r6, r7, fp, pc}
   19130:	push	{r4, r5, r6, r7, fp, lr}
   19134:	add	fp, sp, #16
   19138:	sub	sp, sp, #8
   1913c:	mov	r4, r3
   19140:	mov	r5, r2
   19144:	mov	r7, r1
   19148:	mov	r6, r0
   1914c:	mov	r0, r1
   19150:	bl	1b758 <__assert_fail@plt+0xa11c>
   19154:	ldrb	r1, [r6, #1]
   19158:	cmp	r0, #0
   1915c:	andne	r1, r1, #223	; 0xdf
   19160:	mov	r0, #0
   19164:	cmp	r1, r7
   19168:	bne	191a0 <__assert_fail@plt+0x7b64>
   1916c:	cmp	r7, #0
   19170:	moveq	r0, #1
   19174:	subeq	sp, fp, #16
   19178:	popeq	{r4, r5, r6, r7, fp, pc}
   1917c:	ldr	r0, [fp, #16]
   19180:	ldr	r1, [fp, #12]
   19184:	ldr	r3, [fp, #8]
   19188:	str	r1, [sp]
   1918c:	str	r0, [sp, #4]
   19190:	mov	r0, r6
   19194:	mov	r1, r5
   19198:	mov	r2, r4
   1919c:	bl	191a8 <__assert_fail@plt+0x7b6c>
   191a0:	sub	sp, fp, #16
   191a4:	pop	{r4, r5, r6, r7, fp, pc}
   191a8:	push	{r4, r5, r6, r7, fp, lr}
   191ac:	add	fp, sp, #16
   191b0:	sub	sp, sp, #8
   191b4:	mov	r4, r3
   191b8:	mov	r5, r2
   191bc:	mov	r7, r1
   191c0:	mov	r6, r0
   191c4:	mov	r0, r1
   191c8:	bl	1b758 <__assert_fail@plt+0xa11c>
   191cc:	ldrb	r1, [r6, #2]
   191d0:	cmp	r0, #0
   191d4:	andne	r1, r1, #223	; 0xdf
   191d8:	mov	r0, #0
   191dc:	cmp	r1, r7
   191e0:	bne	19210 <__assert_fail@plt+0x7bd4>
   191e4:	cmp	r7, #0
   191e8:	moveq	r0, #1
   191ec:	subeq	sp, fp, #16
   191f0:	popeq	{r4, r5, r6, r7, fp, pc}
   191f4:	ldr	r0, [fp, #12]
   191f8:	ldr	r3, [fp, #8]
   191fc:	str	r0, [sp]
   19200:	mov	r0, r6
   19204:	mov	r1, r5
   19208:	mov	r2, r4
   1920c:	bl	19218 <__assert_fail@plt+0x7bdc>
   19210:	sub	sp, fp, #16
   19214:	pop	{r4, r5, r6, r7, fp, pc}
   19218:	push	{r4, r5, r6, r7, fp, lr}
   1921c:	add	fp, sp, #16
   19220:	mov	r4, r3
   19224:	mov	r5, r2
   19228:	mov	r7, r1
   1922c:	mov	r6, r0
   19230:	mov	r0, r1
   19234:	bl	1b758 <__assert_fail@plt+0xa11c>
   19238:	ldrb	r1, [r6, #3]
   1923c:	ldr	r3, [fp, #8]
   19240:	cmp	r0, #0
   19244:	andne	r1, r1, #223	; 0xdf
   19248:	mov	r0, #0
   1924c:	cmp	r1, r7
   19250:	popne	{r4, r5, r6, r7, fp, pc}
   19254:	cmp	r7, #0
   19258:	beq	19270 <__assert_fail@plt+0x7c34>
   1925c:	mov	r0, r6
   19260:	mov	r1, r5
   19264:	mov	r2, r4
   19268:	pop	{r4, r5, r6, r7, fp, lr}
   1926c:	b	19278 <__assert_fail@plt+0x7c3c>
   19270:	mov	r0, #1
   19274:	pop	{r4, r5, r6, r7, fp, pc}
   19278:	push	{r4, r5, r6, r7, fp, lr}
   1927c:	add	fp, sp, #16
   19280:	mov	r4, r3
   19284:	mov	r5, r2
   19288:	mov	r7, r1
   1928c:	mov	r6, r0
   19290:	mov	r0, r1
   19294:	bl	1b758 <__assert_fail@plt+0xa11c>
   19298:	ldrb	r1, [r6, #4]
   1929c:	cmp	r0, #0
   192a0:	andne	r1, r1, #223	; 0xdf
   192a4:	mov	r0, #0
   192a8:	cmp	r1, r7
   192ac:	popne	{r4, r5, r6, r7, fp, pc}
   192b0:	cmp	r7, #0
   192b4:	beq	192cc <__assert_fail@plt+0x7c90>
   192b8:	mov	r0, r6
   192bc:	mov	r1, r5
   192c0:	mov	r2, r4
   192c4:	pop	{r4, r5, r6, r7, fp, lr}
   192c8:	b	192d4 <__assert_fail@plt+0x7c98>
   192cc:	mov	r0, #1
   192d0:	pop	{r4, r5, r6, r7, fp, pc}
   192d4:	push	{r4, r5, r6, sl, fp, lr}
   192d8:	add	fp, sp, #16
   192dc:	mov	r4, r2
   192e0:	mov	r6, r1
   192e4:	mov	r5, r0
   192e8:	mov	r0, r1
   192ec:	bl	1b758 <__assert_fail@plt+0xa11c>
   192f0:	ldrb	r1, [r5, #5]
   192f4:	cmp	r0, #0
   192f8:	andne	r1, r1, #223	; 0xdf
   192fc:	mov	r0, #0
   19300:	cmp	r1, r6
   19304:	popne	{r4, r5, r6, sl, fp, pc}
   19308:	cmp	r6, #0
   1930c:	beq	19320 <__assert_fail@plt+0x7ce4>
   19310:	mov	r0, r5
   19314:	mov	r1, r4
   19318:	pop	{r4, r5, r6, sl, fp, lr}
   1931c:	b	19328 <__assert_fail@plt+0x7cec>
   19320:	mov	r0, #1
   19324:	pop	{r4, r5, r6, sl, fp, pc}
   19328:	push	{r4, r5, fp, lr}
   1932c:	add	fp, sp, #8
   19330:	mov	r5, r1
   19334:	mov	r4, r0
   19338:	mov	r0, r1
   1933c:	bl	1b758 <__assert_fail@plt+0xa11c>
   19340:	ldrb	r1, [r4, #6]
   19344:	cmp	r0, #0
   19348:	andne	r1, r1, #223	; 0xdf
   1934c:	mov	r0, #0
   19350:	cmp	r1, r5
   19354:	popne	{r4, r5, fp, pc}
   19358:	cmp	r5, #0
   1935c:	beq	1936c <__assert_fail@plt+0x7d30>
   19360:	mov	r0, r4
   19364:	pop	{r4, r5, fp, lr}
   19368:	b	19374 <__assert_fail@plt+0x7d38>
   1936c:	mov	r0, #1
   19370:	pop	{r4, r5, fp, pc}
   19374:	push	{r4, sl, fp, lr}
   19378:	add	fp, sp, #8
   1937c:	mov	r4, r0
   19380:	mov	r0, #0
   19384:	bl	1b758 <__assert_fail@plt+0xa11c>
   19388:	ldrb	r1, [r4, #7]
   1938c:	cmp	r0, #0
   19390:	beq	193a8 <__assert_fail@plt+0x7d6c>
   19394:	tst	r1, #223	; 0xdf
   19398:	moveq	r0, #1
   1939c:	popeq	{r4, sl, fp, pc}
   193a0:	mov	r0, #0
   193a4:	pop	{r4, sl, fp, pc}
   193a8:	cmp	r1, #0
   193ac:	moveq	r0, #1
   193b0:	popeq	{r4, sl, fp, pc}
   193b4:	mov	r0, #0
   193b8:	pop	{r4, sl, fp, pc}
   193bc:	b	193c0 <__assert_fail@plt+0x7d84>
   193c0:	push	{r4, r5, r6, r7, fp, lr}
   193c4:	add	fp, sp, #16
   193c8:	mov	r6, r2
   193cc:	mov	r4, r1
   193d0:	bl	1945c <__assert_fail@plt+0x7e20>
   193d4:	cmp	r0, #0
   193d8:	beq	19408 <__assert_fail@plt+0x7dcc>
   193dc:	mov	r7, r0
   193e0:	bl	114ec <strlen@plt>
   193e4:	cmp	r0, r6
   193e8:	bcs	19428 <__assert_fail@plt+0x7dec>
   193ec:	add	r2, r0, #1
   193f0:	mov	r0, r4
   193f4:	mov	r1, r7
   193f8:	bl	11384 <memcpy@plt>
   193fc:	mov	r5, #0
   19400:	mov	r0, r5
   19404:	pop	{r4, r5, r6, r7, fp, pc}
   19408:	mov	r5, #22
   1940c:	cmp	r6, #0
   19410:	movne	r0, #0
   19414:	strbne	r0, [r4]
   19418:	movne	r0, r5
   1941c:	popne	{r4, r5, r6, r7, fp, pc}
   19420:	mov	r0, r5
   19424:	pop	{r4, r5, r6, r7, fp, pc}
   19428:	mov	r5, #34	; 0x22
   1942c:	cmp	r6, #0
   19430:	beq	19450 <__assert_fail@plt+0x7e14>
   19434:	sub	r6, r6, #1
   19438:	mov	r0, r4
   1943c:	mov	r1, r7
   19440:	mov	r2, r6
   19444:	bl	11384 <memcpy@plt>
   19448:	mov	r0, #0
   1944c:	strb	r0, [r4, r6]
   19450:	mov	r0, r5
   19454:	pop	{r4, r5, r6, r7, fp, pc}
   19458:	b	1945c <__assert_fail@plt+0x7e20>
   1945c:	mov	r1, #0
   19460:	b	115ac <setlocale@plt>
   19464:	ldr	r0, [r0, #76]	; 0x4c
   19468:	bx	lr
   1946c:	ldr	r0, [r0, #92]	; 0x5c
   19470:	bx	lr
   19474:	ldr	r0, [r0, #84]	; 0x54
   19478:	bx	lr
   1947c:	mov	r0, #0
   19480:	bx	lr
   19484:	ldrd	r2, [r1, #72]	; 0x48
   19488:	stm	r0, {r2, r3}
   1948c:	bx	lr
   19490:	ldrd	r2, [r1, #88]	; 0x58
   19494:	stm	r0, {r2, r3}
   19498:	bx	lr
   1949c:	ldrd	r2, [r1, #80]	; 0x50
   194a0:	stm	r0, {r2, r3}
   194a4:	bx	lr
   194a8:	mvn	r1, #0
   194ac:	str	r1, [r0]
   194b0:	str	r1, [r0, #4]
   194b4:	bx	lr
   194b8:	bx	lr
   194bc:	push	{r4, r5, r6, sl, fp, lr}
   194c0:	add	fp, sp, #16
   194c4:	mov	r4, r0
   194c8:	cmp	r0, #0
   194cc:	beq	194f0 <__assert_fail@plt+0x7eb4>
   194d0:	mov	r0, r4
   194d4:	bl	114ec <strlen@plt>
   194d8:	add	r5, r0, #1
   194dc:	cmp	r5, #58	; 0x3a
   194e0:	bls	194f4 <__assert_fail@plt+0x7eb8>
   194e4:	add	r0, r0, #10
   194e8:	bic	r0, r0, #3
   194ec:	b	194f8 <__assert_fail@plt+0x7ebc>
   194f0:	mov	r5, #0
   194f4:	mov	r0, #64	; 0x40
   194f8:	bl	1b420 <__assert_fail@plt+0x9de4>
   194fc:	mov	r6, r0
   19500:	cmp	r0, #0
   19504:	beq	19538 <__assert_fail@plt+0x7efc>
   19508:	mov	r1, #0
   1950c:	str	r1, [r6]
   19510:	cmp	r4, #0
   19514:	mov	r0, r4
   19518:	movwne	r0, #1
   1951c:	strb	r0, [r6, #4]
   19520:	mov	r0, r6
   19524:	strb	r1, [r0, #5]!
   19528:	beq	19538 <__assert_fail@plt+0x7efc>
   1952c:	mov	r1, r4
   19530:	mov	r2, r5
   19534:	bl	19540 <__assert_fail@plt+0x7f04>
   19538:	mov	r0, r6
   1953c:	pop	{r4, r5, r6, sl, fp, pc}
   19540:	push	{r4, r5, fp, lr}
   19544:	add	fp, sp, #8
   19548:	mov	r4, r2
   1954c:	mov	r5, r0
   19550:	bl	11384 <memcpy@plt>
   19554:	mov	r0, #0
   19558:	strb	r0, [r5, r4]
   1955c:	pop	{r4, r5, fp, pc}
   19560:	push	{r4, sl, fp, lr}
   19564:	add	fp, sp, #8
   19568:	cmp	r0, #2
   1956c:	popcc	{r4, sl, fp, pc}
   19570:	ldr	r4, [r0]
   19574:	bl	158f8 <__assert_fail@plt+0x42bc>
   19578:	cmp	r4, #0
   1957c:	mov	r0, r4
   19580:	bne	19570 <__assert_fail@plt+0x7f34>
   19584:	pop	{r4, sl, fp, pc}
   19588:	push	{r4, r5, r6, r7, fp, lr}
   1958c:	add	fp, sp, #16
   19590:	mov	r4, r2
   19594:	mov	r7, r1
   19598:	cmp	r0, #0
   1959c:	beq	195e0 <__assert_fail@plt+0x7fa4>
   195a0:	mov	r6, r0
   195a4:	bl	19610 <__assert_fail@plt+0x7fd4>
   195a8:	cmp	r0, #0
   195ac:	moveq	r0, #0
   195b0:	popeq	{r4, r5, r6, r7, fp, pc}
   195b4:	mov	r5, r0
   195b8:	mov	r0, r7
   195bc:	mov	r1, r4
   195c0:	bl	113cc <localtime_r@plt>
   195c4:	cmp	r0, #0
   195c8:	beq	195f0 <__assert_fail@plt+0x7fb4>
   195cc:	mov	r0, r6
   195d0:	mov	r1, r4
   195d4:	bl	196a0 <__assert_fail@plt+0x8064>
   195d8:	eor	r6, r0, #1
   195dc:	b	195f4 <__assert_fail@plt+0x7fb8>
   195e0:	mov	r0, r7
   195e4:	mov	r1, r4
   195e8:	pop	{r4, r5, r6, r7, fp, lr}
   195ec:	b	1130c <gmtime_r@plt>
   195f0:	mov	r6, #1
   195f4:	mov	r0, r5
   195f8:	bl	197b8 <__assert_fail@plt+0x817c>
   195fc:	cmp	r0, #0
   19600:	movne	r0, r4
   19604:	cmp	r6, #0
   19608:	movwne	r0, #0
   1960c:	pop	{r4, r5, r6, r7, fp, pc}
   19610:	push	{r4, r5, r6, r7, fp, lr}
   19614:	add	fp, sp, #16
   19618:	mov	r4, r0
   1961c:	bl	198e0 <__assert_fail@plt+0x82a4>
   19620:	mov	r5, r0
   19624:	ldrb	r0, [r4, #4]
   19628:	cmp	r5, #0
   1962c:	beq	19644 <__assert_fail@plt+0x8008>
   19630:	cmp	r0, #0
   19634:	beq	19654 <__assert_fail@plt+0x8018>
   19638:	add	r0, r4, #5
   1963c:	mov	r1, r5
   19640:	bl	11318 <strcmp@plt>
   19644:	cmp	r0, #0
   19648:	moveq	r5, #1
   1964c:	moveq	r0, r5
   19650:	popeq	{r4, r5, r6, r7, fp, pc}
   19654:	mov	r0, r5
   19658:	bl	194bc <__assert_fail@plt+0x7e80>
   1965c:	mov	r5, #0
   19660:	cmp	r0, #0
   19664:	beq	19698 <__assert_fail@plt+0x805c>
   19668:	mov	r6, r0
   1966c:	mov	r0, r4
   19670:	bl	198ec <__assert_fail@plt+0x82b0>
   19674:	cmp	r0, #0
   19678:	movne	r0, r6
   1967c:	popne	{r4, r5, r6, r7, fp, pc}
   19680:	bl	1151c <__errno_location@plt>
   19684:	mov	r4, r0
   19688:	ldr	r7, [r0]
   1968c:	mov	r0, r6
   19690:	bl	19560 <__assert_fail@plt+0x7f24>
   19694:	str	r7, [r4]
   19698:	mov	r0, r5
   1969c:	pop	{r4, r5, r6, r7, fp, pc}
   196a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   196a4:	add	fp, sp, #24
   196a8:	ldr	r7, [r1, #40]	; 0x28
   196ac:	mov	r8, #1
   196b0:	cmp	r7, #0
   196b4:	beq	19758 <__assert_fail@plt+0x811c>
   196b8:	mov	r5, r1
   196bc:	mov	r6, r0
   196c0:	cmp	r7, r1
   196c4:	bcc	196d4 <__assert_fail@plt+0x8098>
   196c8:	add	r0, r5, #44	; 0x2c
   196cc:	cmp	r7, r0
   196d0:	bcc	19758 <__assert_fail@plt+0x811c>
   196d4:	ldrb	r0, [r7]
   196d8:	cmp	r0, #0
   196dc:	beq	1974c <__assert_fail@plt+0x8110>
   196e0:	add	r4, r6, #5
   196e4:	b	196f8 <__assert_fail@plt+0x80bc>
   196e8:	ldr	r0, [r6]
   196ec:	cmp	r0, #0
   196f0:	addne	r4, r0, #5
   196f4:	movne	r6, r0
   196f8:	mov	r0, r4
   196fc:	mov	r1, r7
   19700:	bl	11318 <strcmp@plt>
   19704:	cmp	r0, #0
   19708:	beq	19754 <__assert_fail@plt+0x8118>
   1970c:	ldrb	r0, [r4]
   19710:	cmp	r0, #0
   19714:	bne	19730 <__assert_fail@plt+0x80f4>
   19718:	add	r0, r6, #5
   1971c:	cmp	r4, r0
   19720:	bne	19760 <__assert_fail@plt+0x8124>
   19724:	ldrb	r0, [r6, #4]
   19728:	cmp	r0, #0
   1972c:	beq	19760 <__assert_fail@plt+0x8124>
   19730:	mov	r0, r4
   19734:	bl	114ec <strlen@plt>
   19738:	add	r4, r4, r0
   1973c:	ldrb	r0, [r4, #1]!
   19740:	cmp	r0, #0
   19744:	bne	196f8 <__assert_fail@plt+0x80bc>
   19748:	b	196e8 <__assert_fail@plt+0x80ac>
   1974c:	movw	r4, #53508	; 0xd104
   19750:	movt	r4, #1
   19754:	str	r4, [r5, #40]	; 0x28
   19758:	mov	r0, r8
   1975c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19760:	add	r0, r6, #64	; 0x40
   19764:	sub	r9, r0, r4
   19768:	mov	r0, r7
   1976c:	bl	114ec <strlen@plt>
   19770:	add	r2, r0, #1
   19774:	cmp	r2, r9
   19778:	bge	1978c <__assert_fail@plt+0x8150>
   1977c:	mov	r0, r4
   19780:	mov	r1, r7
   19784:	bl	19540 <__assert_fail@plt+0x7f04>
   19788:	b	19754 <__assert_fail@plt+0x8118>
   1978c:	mov	r0, r7
   19790:	bl	194bc <__assert_fail@plt+0x7e80>
   19794:	str	r0, [r6]
   19798:	cmp	r0, #0
   1979c:	moveq	r8, #0
   197a0:	moveq	r0, r8
   197a4:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   197a8:	mov	r1, #0
   197ac:	strb	r1, [r0, #4]
   197b0:	add	r4, r0, #5
   197b4:	b	19754 <__assert_fail@plt+0x8118>
   197b8:	push	{r4, r5, r6, r7, fp, lr}
   197bc:	add	fp, sp, #16
   197c0:	cmp	r0, #1
   197c4:	moveq	r5, #1
   197c8:	moveq	r0, r5
   197cc:	popeq	{r4, r5, r6, r7, fp, pc}
   197d0:	mov	r4, r0
   197d4:	bl	1151c <__errno_location@plt>
   197d8:	mov	r6, r0
   197dc:	ldr	r7, [r0]
   197e0:	mov	r0, r4
   197e4:	bl	198ec <__assert_fail@plt+0x82b0>
   197e8:	mov	r5, r0
   197ec:	cmp	r0, #0
   197f0:	ldreq	r7, [r6]
   197f4:	mov	r0, r4
   197f8:	bl	19560 <__assert_fail@plt+0x7f24>
   197fc:	str	r7, [r6]
   19800:	mov	r0, r5
   19804:	pop	{r4, r5, r6, r7, fp, pc}
   19808:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1980c:	add	fp, sp, #24
   19810:	sub	sp, sp, #48	; 0x30
   19814:	mov	r4, r1
   19818:	cmp	r0, #0
   1981c:	beq	198b8 <__assert_fail@plt+0x827c>
   19820:	mov	r6, r0
   19824:	bl	19610 <__assert_fail@plt+0x7fd4>
   19828:	cmp	r0, #0
   1982c:	beq	198d0 <__assert_fail@plt+0x8294>
   19830:	mov	r7, r0
   19834:	ldm	r4, {r0, r1, r2, r3, r5, ip}
   19838:	stm	sp, {r0, r1, r2, r3, r5}
   1983c:	mvn	r0, #0
   19840:	str	r0, [sp, #28]
   19844:	str	ip, [sp, #20]
   19848:	ldr	r0, [r4, #32]
   1984c:	str	r0, [sp, #32]
   19850:	mov	r0, sp
   19854:	bl	1133c <mktime@plt>
   19858:	mov	r5, r0
   1985c:	ldr	r0, [sp, #28]
   19860:	cmn	r0, #1
   19864:	ble	198c8 <__assert_fail@plt+0x828c>
   19868:	mov	r8, sp
   1986c:	mov	r0, r6
   19870:	mov	r1, r8
   19874:	bl	196a0 <__assert_fail@plt+0x8064>
   19878:	mov	r6, r0
   1987c:	mov	r0, r7
   19880:	bl	197b8 <__assert_fail@plt+0x817c>
   19884:	cmp	r6, #0
   19888:	cmpne	r0, #0
   1988c:	beq	198d0 <__assert_fail@plt+0x8294>
   19890:	mov	r0, #28
   19894:	add	r1, r8, #16
   19898:	vld1.32	{d16-d17}, [r8], r0
   1989c:	vld1.64	{d18-d19}, [r1]
   198a0:	add	r1, r4, #16
   198a4:	vld1.32	{d20-d21}, [r8]
   198a8:	vst1.32	{d18-d19}, [r1]
   198ac:	vst1.32	{d16-d17}, [r4], r0
   198b0:	vst1.32	{d20-d21}, [r4]
   198b4:	b	198d4 <__assert_fail@plt+0x8298>
   198b8:	mov	r0, r4
   198bc:	sub	sp, fp, #24
   198c0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   198c4:	b	115d0 <timegm@plt>
   198c8:	mov	r0, r7
   198cc:	bl	197b8 <__assert_fail@plt+0x817c>
   198d0:	mvn	r5, #0
   198d4:	mov	r0, r5
   198d8:	sub	sp, fp, #24
   198dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   198e0:	movw	r0, #49091	; 0xbfc3
   198e4:	movt	r0, #1
   198e8:	b	11468 <getenv@plt>
   198ec:	push	{fp, lr}
   198f0:	mov	fp, sp
   198f4:	ldrb	r1, [r0, #4]
   198f8:	cmp	r1, #0
   198fc:	addne	r1, r0, #5
   19900:	mov	r0, r1
   19904:	bl	19924 <__assert_fail@plt+0x82e8>
   19908:	mov	r1, r0
   1990c:	mov	r0, #0
   19910:	cmp	r1, #0
   19914:	popne	{fp, pc}
   19918:	bl	113fc <tzset@plt>
   1991c:	mov	r0, #1
   19920:	pop	{fp, pc}
   19924:	cmp	r0, #0
   19928:	beq	19940 <__assert_fail@plt+0x8304>
   1992c:	mov	r1, r0
   19930:	movw	r0, #49091	; 0xbfc3
   19934:	movt	r0, #1
   19938:	mov	r2, #1
   1993c:	b	11504 <setenv@plt>
   19940:	movw	r0, #49091	; 0xbfc3
   19944:	movt	r0, #1
   19948:	b	11600 <unsetenv@plt>
   1994c:	mov	r1, #0
   19950:	mov	r2, #3
   19954:	b	1b850 <__assert_fail@plt+0xa214>
   19958:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1995c:	add	fp, sp, #24
   19960:	sub	sp, sp, #32
   19964:	mov	r4, r2
   19968:	mov	r8, r0
   1996c:	ldr	r6, [fp, #12]
   19970:	ldr	r7, [fp, #8]
   19974:	cmp	r1, #0
   19978:	beq	199a0 <__assert_fail@plt+0x8364>
   1997c:	mov	r5, r1
   19980:	str	r4, [sp]
   19984:	str	r3, [sp, #4]
   19988:	movw	r2, #54932	; 0xd694
   1998c:	movt	r2, #1
   19990:	mov	r0, r8
   19994:	mov	r1, #1
   19998:	mov	r3, r5
   1999c:	b	199b8 <__assert_fail@plt+0x837c>
   199a0:	str	r3, [sp]
   199a4:	movw	r2, #54944	; 0xd6a0
   199a8:	movt	r2, #1
   199ac:	mov	r0, r8
   199b0:	mov	r1, #1
   199b4:	mov	r3, r4
   199b8:	bl	11570 <__fprintf_chk@plt>
   199bc:	movw	r1, #54951	; 0xd6a7
   199c0:	movt	r1, #1
   199c4:	mov	r0, #0
   199c8:	mov	r2, #5
   199cc:	bl	113b4 <dcgettext@plt>
   199d0:	mov	r3, r0
   199d4:	movw	r0, #2022	; 0x7e6
   199d8:	str	r0, [sp]
   199dc:	movw	r2, #55669	; 0xd975
   199e0:	movt	r2, #1
   199e4:	mov	r0, r8
   199e8:	mov	r1, #1
   199ec:	bl	11570 <__fprintf_chk@plt>
   199f0:	movw	r4, #53619	; 0xd173
   199f4:	movt	r4, #1
   199f8:	mov	r0, r4
   199fc:	mov	r1, r8
   19a00:	bl	112f4 <fputs_unlocked@plt>
   19a04:	movw	r1, #54955	; 0xd6ab
   19a08:	movt	r1, #1
   19a0c:	mov	r0, #0
   19a10:	mov	r2, #5
   19a14:	bl	113b4 <dcgettext@plt>
   19a18:	mov	r2, r0
   19a1c:	movw	r3, #55126	; 0xd756
   19a20:	movt	r3, #1
   19a24:	mov	r0, r8
   19a28:	mov	r1, #1
   19a2c:	bl	11570 <__fprintf_chk@plt>
   19a30:	mov	r0, r4
   19a34:	mov	r1, r8
   19a38:	bl	112f4 <fputs_unlocked@plt>
   19a3c:	cmp	r6, #9
   19a40:	bhi	19a7c <__assert_fail@plt+0x8440>
   19a44:	add	r0, pc, #0
   19a48:	ldr	pc, [r0, r6, lsl #2]
   19a4c:	andeq	r9, r1, r4, ror sl
   19a50:	andeq	r9, r1, r8, lsl #21
   19a54:			; <UNDEFINED> instruction: 0x00019ab8
   19a58:	andeq	r9, r1, r0, ror #21
   19a5c:	andeq	r9, r1, r8, lsl #22
   19a60:	andeq	r9, r1, r0, lsr fp
   19a64:	andeq	r9, r1, r8, asr fp
   19a68:	muleq	r1, r0, fp
   19a6c:	andeq	r9, r1, r0, lsr ip
   19a70:	ldrdeq	r9, [r1], -r8
   19a74:	sub	sp, fp, #24
   19a78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19a7c:	movw	r1, #55479	; 0xd8b7
   19a80:	movt	r1, #1
   19a84:	b	19be0 <__assert_fail@plt+0x85a4>
   19a88:	movw	r1, #55160	; 0xd778
   19a8c:	movt	r1, #1
   19a90:	mov	r0, #0
   19a94:	mov	r2, #5
   19a98:	bl	113b4 <dcgettext@plt>
   19a9c:	mov	r2, r0
   19aa0:	ldr	r3, [r7]
   19aa4:	mov	r0, r8
   19aa8:	mov	r1, #1
   19aac:	sub	sp, fp, #24
   19ab0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19ab4:	b	11570 <__fprintf_chk@plt>
   19ab8:	movw	r1, #55176	; 0xd788
   19abc:	movt	r1, #1
   19ac0:	mov	r0, #0
   19ac4:	mov	r2, #5
   19ac8:	bl	113b4 <dcgettext@plt>
   19acc:	mov	r2, r0
   19ad0:	ldr	r3, [r7]
   19ad4:	ldr	r0, [r7, #4]
   19ad8:	str	r0, [sp]
   19adc:	b	19bcc <__assert_fail@plt+0x8590>
   19ae0:	movw	r1, #55199	; 0xd79f
   19ae4:	movt	r1, #1
   19ae8:	mov	r0, #0
   19aec:	mov	r2, #5
   19af0:	bl	113b4 <dcgettext@plt>
   19af4:	mov	r2, r0
   19af8:	ldr	r3, [r7]
   19afc:	ldmib	r7, {r0, r1}
   19b00:	stm	sp, {r0, r1}
   19b04:	b	19bcc <__assert_fail@plt+0x8590>
   19b08:	movw	r1, #55227	; 0xd7bb
   19b0c:	movt	r1, #1
   19b10:	mov	r0, #0
   19b14:	mov	r2, #5
   19b18:	bl	113b4 <dcgettext@plt>
   19b1c:	mov	r2, r0
   19b20:	ldr	r3, [r7]
   19b24:	ldmib	r7, {r0, r1, r7}
   19b28:	stm	sp, {r0, r1, r7}
   19b2c:	b	19bcc <__assert_fail@plt+0x8590>
   19b30:	movw	r1, #55259	; 0xd7db
   19b34:	movt	r1, #1
   19b38:	mov	r0, #0
   19b3c:	mov	r2, #5
   19b40:	bl	113b4 <dcgettext@plt>
   19b44:	mov	r2, r0
   19b48:	ldr	r3, [r7]
   19b4c:	ldmib	r7, {r0, r1, r6, r7}
   19b50:	stm	sp, {r0, r1, r6, r7}
   19b54:	b	19bcc <__assert_fail@plt+0x8590>
   19b58:	movw	r1, #55295	; 0xd7ff
   19b5c:	movt	r1, #1
   19b60:	mov	r0, #0
   19b64:	mov	r2, #5
   19b68:	bl	113b4 <dcgettext@plt>
   19b6c:	mov	r2, r0
   19b70:	ldr	r3, [r7]
   19b74:	ldmib	r7, {r0, r1, r6}
   19b78:	ldr	r5, [r7, #16]
   19b7c:	ldr	r7, [r7, #20]
   19b80:	stm	sp, {r0, r1, r6}
   19b84:	str	r5, [sp, #12]
   19b88:	str	r7, [sp, #16]
   19b8c:	b	19bcc <__assert_fail@plt+0x8590>
   19b90:	movw	r1, #55335	; 0xd827
   19b94:	movt	r1, #1
   19b98:	mov	r0, #0
   19b9c:	mov	r2, #5
   19ba0:	bl	113b4 <dcgettext@plt>
   19ba4:	mov	r2, r0
   19ba8:	ldr	r3, [r7]
   19bac:	ldmib	r7, {r0, r1, r6}
   19bb0:	ldr	r5, [r7, #16]
   19bb4:	ldr	r4, [r7, #20]
   19bb8:	ldr	r7, [r7, #24]
   19bbc:	stm	sp, {r0, r1, r6}
   19bc0:	str	r5, [sp, #12]
   19bc4:	str	r4, [sp, #16]
   19bc8:	str	r7, [sp, #20]
   19bcc:	mov	r0, r8
   19bd0:	mov	r1, #1
   19bd4:	b	19c80 <__assert_fail@plt+0x8644>
   19bd8:	movw	r1, #55427	; 0xd883
   19bdc:	movt	r1, #1
   19be0:	mov	r0, #0
   19be4:	mov	r2, #5
   19be8:	bl	113b4 <dcgettext@plt>
   19bec:	mov	ip, r0
   19bf0:	ldr	r3, [r7]
   19bf4:	ldr	r0, [r7, #4]
   19bf8:	ldr	r1, [r7, #8]
   19bfc:	ldr	r6, [r7, #12]
   19c00:	ldr	r5, [r7, #16]
   19c04:	ldr	r4, [r7, #20]
   19c08:	ldr	r2, [r7, #24]
   19c0c:	ldr	lr, [r7, #28]
   19c10:	ldr	r7, [r7, #32]
   19c14:	stm	sp, {r0, r1, r6}
   19c18:	str	r5, [sp, #12]
   19c1c:	str	r4, [sp, #16]
   19c20:	str	r2, [sp, #20]
   19c24:	str	lr, [sp, #24]
   19c28:	str	r7, [sp, #28]
   19c2c:	b	19c74 <__assert_fail@plt+0x8638>
   19c30:	movw	r1, #55379	; 0xd853
   19c34:	movt	r1, #1
   19c38:	mov	r0, #0
   19c3c:	mov	r2, #5
   19c40:	bl	113b4 <dcgettext@plt>
   19c44:	mov	ip, r0
   19c48:	ldr	r3, [r7]
   19c4c:	ldmib	r7, {r0, r1, r6}
   19c50:	ldr	r5, [r7, #16]
   19c54:	ldr	r4, [r7, #20]
   19c58:	ldr	r2, [r7, #24]
   19c5c:	ldr	r7, [r7, #28]
   19c60:	stm	sp, {r0, r1, r6}
   19c64:	str	r5, [sp, #12]
   19c68:	str	r4, [sp, #16]
   19c6c:	str	r2, [sp, #20]
   19c70:	str	r7, [sp, #24]
   19c74:	mov	r0, r8
   19c78:	mov	r1, #1
   19c7c:	mov	r2, ip
   19c80:	bl	11570 <__fprintf_chk@plt>
   19c84:	sub	sp, fp, #24
   19c88:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19c8c:	push	{r4, sl, fp, lr}
   19c90:	add	fp, sp, #8
   19c94:	sub	sp, sp, #8
   19c98:	mov	lr, #0
   19c9c:	ldr	ip, [fp, #8]
   19ca0:	ldr	r4, [ip, lr, lsl #2]
   19ca4:	add	lr, lr, #1
   19ca8:	cmp	r4, #0
   19cac:	bne	19ca0 <__assert_fail@plt+0x8664>
   19cb0:	sub	r4, lr, #1
   19cb4:	str	ip, [sp]
   19cb8:	str	r4, [sp, #4]
   19cbc:	bl	19958 <__assert_fail@plt+0x831c>
   19cc0:	sub	sp, fp, #8
   19cc4:	pop	{r4, sl, fp, pc}
   19cc8:	push	{r4, r5, fp, lr}
   19ccc:	add	fp, sp, #8
   19cd0:	sub	sp, sp, #48	; 0x30
   19cd4:	mov	ip, #0
   19cd8:	ldr	r4, [fp, #8]
   19cdc:	add	lr, sp, #8
   19ce0:	ldr	r5, [r4]
   19ce4:	str	r5, [lr, ip, lsl #2]
   19ce8:	cmp	r5, #0
   19cec:	beq	19d00 <__assert_fail@plt+0x86c4>
   19cf0:	add	ip, ip, #1
   19cf4:	add	r4, r4, #4
   19cf8:	cmp	ip, #10
   19cfc:	bcc	19ce0 <__assert_fail@plt+0x86a4>
   19d00:	str	lr, [sp]
   19d04:	str	ip, [sp, #4]
   19d08:	bl	19958 <__assert_fail@plt+0x831c>
   19d0c:	sub	sp, fp, #8
   19d10:	pop	{r4, r5, fp, pc}
   19d14:	push	{fp, lr}
   19d18:	mov	fp, sp
   19d1c:	sub	sp, sp, #8
   19d20:	add	ip, fp, #8
   19d24:	str	ip, [sp, #4]
   19d28:	str	ip, [sp]
   19d2c:	bl	19cc8 <__assert_fail@plt+0x868c>
   19d30:	mov	sp, fp
   19d34:	pop	{fp, pc}
   19d38:	push	{fp, lr}
   19d3c:	mov	fp, sp
   19d40:	movw	r0, #57820	; 0xe1dc
   19d44:	movt	r0, #2
   19d48:	ldr	r1, [r0]
   19d4c:	movw	r0, #53619	; 0xd173
   19d50:	movt	r0, #1
   19d54:	bl	112f4 <fputs_unlocked@plt>
   19d58:	movw	r1, #55539	; 0xd8f3
   19d5c:	movt	r1, #1
   19d60:	mov	r0, #0
   19d64:	mov	r2, #5
   19d68:	bl	113b4 <dcgettext@plt>
   19d6c:	mov	r1, r0
   19d70:	movw	r2, #55559	; 0xd907
   19d74:	movt	r2, #1
   19d78:	mov	r0, #1
   19d7c:	bl	1154c <__printf_chk@plt>
   19d80:	movw	r1, #55581	; 0xd91d
   19d84:	movt	r1, #1
   19d88:	mov	r0, #0
   19d8c:	mov	r2, #5
   19d90:	bl	113b4 <dcgettext@plt>
   19d94:	mov	r1, r0
   19d98:	movw	r2, #49003	; 0xbf6b
   19d9c:	movt	r2, #1
   19da0:	movw	r3, #53879	; 0xd277
   19da4:	movt	r3, #1
   19da8:	mov	r0, #1
   19dac:	bl	1154c <__printf_chk@plt>
   19db0:	movw	r1, #55601	; 0xd931
   19db4:	movt	r1, #1
   19db8:	mov	r0, #0
   19dbc:	mov	r2, #5
   19dc0:	bl	113b4 <dcgettext@plt>
   19dc4:	mov	r1, r0
   19dc8:	movw	r2, #55640	; 0xd958
   19dcc:	movt	r2, #1
   19dd0:	mov	r0, #1
   19dd4:	pop	{fp, lr}
   19dd8:	b	1154c <__printf_chk@plt>
   19ddc:	b	19de0 <__assert_fail@plt+0x87a4>
   19de0:	push	{r4, r5, r6, sl, fp, lr}
   19de4:	add	fp, sp, #16
   19de8:	mov	r4, r2
   19dec:	mov	r5, r1
   19df0:	mov	r6, r0
   19df4:	bl	1bb1c <__assert_fail@plt+0xa4e0>
   19df8:	cmp	r0, #0
   19dfc:	popne	{r4, r5, r6, sl, fp, pc}
   19e00:	cmp	r6, #0
   19e04:	beq	19e18 <__assert_fail@plt+0x87dc>
   19e08:	cmp	r5, #0
   19e0c:	cmpne	r4, #0
   19e10:	bne	19e18 <__assert_fail@plt+0x87dc>
   19e14:	pop	{r4, r5, r6, sl, fp, pc}
   19e18:	bl	1a1cc <__assert_fail@plt+0x8b90>
   19e1c:	push	{fp, lr}
   19e20:	mov	fp, sp
   19e24:	bl	1b420 <__assert_fail@plt+0x9de4>
   19e28:	bl	19e30 <__assert_fail@plt+0x87f4>
   19e2c:	pop	{fp, pc}
   19e30:	cmp	r0, #0
   19e34:	bxne	lr
   19e38:	push	{fp, lr}
   19e3c:	mov	fp, sp
   19e40:	bl	1a1cc <__assert_fail@plt+0x8b90>
   19e44:	push	{fp, lr}
   19e48:	mov	fp, sp
   19e4c:	bl	1ba50 <__assert_fail@plt+0xa414>
   19e50:	bl	19e30 <__assert_fail@plt+0x87f4>
   19e54:	pop	{fp, pc}
   19e58:	b	19e1c <__assert_fail@plt+0x87e0>
   19e5c:	push	{r4, r5, fp, lr}
   19e60:	add	fp, sp, #8
   19e64:	mov	r4, r1
   19e68:	mov	r5, r0
   19e6c:	bl	1b450 <__assert_fail@plt+0x9e14>
   19e70:	cmp	r0, #0
   19e74:	popne	{r4, r5, fp, pc}
   19e78:	cmp	r5, #0
   19e7c:	beq	19e8c <__assert_fail@plt+0x8850>
   19e80:	cmp	r4, #0
   19e84:	bne	19e8c <__assert_fail@plt+0x8850>
   19e88:	pop	{r4, r5, fp, pc}
   19e8c:	bl	1a1cc <__assert_fail@plt+0x8b90>
   19e90:	push	{fp, lr}
   19e94:	mov	fp, sp
   19e98:	bl	1ba54 <__assert_fail@plt+0xa418>
   19e9c:	bl	19e30 <__assert_fail@plt+0x87f4>
   19ea0:	pop	{fp, pc}
   19ea4:	push	{fp, lr}
   19ea8:	mov	fp, sp
   19eac:	bl	1ba64 <__assert_fail@plt+0xa428>
   19eb0:	bl	19e30 <__assert_fail@plt+0x87f4>
   19eb4:	pop	{fp, pc}
   19eb8:	push	{fp, lr}
   19ebc:	mov	fp, sp
   19ec0:	mov	r2, r1
   19ec4:	mov	r1, r0
   19ec8:	mov	r0, #0
   19ecc:	bl	19de0 <__assert_fail@plt+0x87a4>
   19ed0:	pop	{fp, pc}
   19ed4:	mov	r2, r1
   19ed8:	mov	r1, r0
   19edc:	mov	r0, #0
   19ee0:	b	19ea4 <__assert_fail@plt+0x8868>
   19ee4:	mov	r2, #1
   19ee8:	b	19eec <__assert_fail@plt+0x88b0>
   19eec:	push	{r4, r5, fp, lr}
   19ef0:	add	fp, sp, #8
   19ef4:	mov	r4, r1
   19ef8:	ldr	r5, [r1]
   19efc:	cmp	r0, #0
   19f00:	beq	19f18 <__assert_fail@plt+0x88dc>
   19f04:	mov	r1, #1
   19f08:	add	r1, r1, r5, lsr #1
   19f0c:	adds	r5, r5, r1
   19f10:	bcc	19f30 <__assert_fail@plt+0x88f4>
   19f14:	bl	1a1cc <__assert_fail@plt+0x8b90>
   19f18:	cmp	r5, #0
   19f1c:	bne	19f30 <__assert_fail@plt+0x88f4>
   19f20:	mov	r1, #64	; 0x40
   19f24:	udiv	r5, r1, r2
   19f28:	cmp	r2, #64	; 0x40
   19f2c:	addhi	r5, r5, #1
   19f30:	mov	r1, r5
   19f34:	bl	19de0 <__assert_fail@plt+0x87a4>
   19f38:	str	r5, [r4]
   19f3c:	pop	{r4, r5, fp, pc}
   19f40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19f44:	add	fp, sp, #24
   19f48:	mov	r8, r1
   19f4c:	ldr	r6, [r1]
   19f50:	add	r1, r6, r6, asr #1
   19f54:	cmp	r1, r6
   19f58:	mvnvs	r1, #-2147483648	; 0x80000000
   19f5c:	cmp	r1, r3
   19f60:	mov	r5, r1
   19f64:	movgt	r5, r3
   19f68:	cmn	r3, #1
   19f6c:	movle	r5, r1
   19f70:	ldr	r4, [fp, #8]
   19f74:	cmn	r4, #1
   19f78:	ble	19fa0 <__assert_fail@plt+0x8964>
   19f7c:	cmp	r4, #0
   19f80:	beq	19ff4 <__assert_fail@plt+0x89b8>
   19f84:	cmn	r5, #1
   19f88:	ble	19fc8 <__assert_fail@plt+0x898c>
   19f8c:	mvn	r7, #-2147483648	; 0x80000000
   19f90:	udiv	r1, r7, r4
   19f94:	cmp	r1, r5
   19f98:	bge	19ff4 <__assert_fail@plt+0x89b8>
   19f9c:	b	1a004 <__assert_fail@plt+0x89c8>
   19fa0:	cmn	r5, #1
   19fa4:	ble	19fe4 <__assert_fail@plt+0x89a8>
   19fa8:	cmn	r4, #1
   19fac:	beq	19ff4 <__assert_fail@plt+0x89b8>
   19fb0:	mov	r1, #-2147483648	; 0x80000000
   19fb4:	sdiv	r1, r1, r4
   19fb8:	mvn	r7, #-2147483648	; 0x80000000
   19fbc:	cmp	r1, r5
   19fc0:	bge	19ff4 <__assert_fail@plt+0x89b8>
   19fc4:	b	1a004 <__assert_fail@plt+0x89c8>
   19fc8:	beq	19ff4 <__assert_fail@plt+0x89b8>
   19fcc:	mov	r1, #-2147483648	; 0x80000000
   19fd0:	sdiv	r1, r1, r5
   19fd4:	mvn	r7, #-2147483648	; 0x80000000
   19fd8:	cmp	r1, r4
   19fdc:	bge	19ff4 <__assert_fail@plt+0x89b8>
   19fe0:	b	1a004 <__assert_fail@plt+0x89c8>
   19fe4:	mvn	r7, #-2147483648	; 0x80000000
   19fe8:	sdiv	r1, r7, r4
   19fec:	cmp	r5, r1
   19ff0:	blt	1a004 <__assert_fail@plt+0x89c8>
   19ff4:	mul	r1, r5, r4
   19ff8:	mov	r7, #64	; 0x40
   19ffc:	cmp	r1, #63	; 0x3f
   1a000:	bgt	1a00c <__assert_fail@plt+0x89d0>
   1a004:	sdiv	r5, r7, r4
   1a008:	mul	r1, r5, r4
   1a00c:	cmp	r0, #0
   1a010:	moveq	r7, #0
   1a014:	streq	r7, [r8]
   1a018:	sub	r7, r5, r6
   1a01c:	cmp	r7, r2
   1a020:	bge	1a0cc <__assert_fail@plt+0x8a90>
   1a024:	add	r5, r6, r2
   1a028:	mov	r1, #0
   1a02c:	cmp	r5, r3
   1a030:	mov	r2, #0
   1a034:	movwgt	r2, #1
   1a038:	cmn	r3, #1
   1a03c:	movwgt	r1, #1
   1a040:	cmp	r5, r6
   1a044:	bvs	1a0b4 <__assert_fail@plt+0x8a78>
   1a048:	ands	r1, r1, r2
   1a04c:	bne	1a0b4 <__assert_fail@plt+0x8a78>
   1a050:	cmn	r4, #1
   1a054:	ble	1a07c <__assert_fail@plt+0x8a40>
   1a058:	cmp	r4, #0
   1a05c:	beq	1a0c8 <__assert_fail@plt+0x8a8c>
   1a060:	cmn	r5, #1
   1a064:	ble	1a0a0 <__assert_fail@plt+0x8a64>
   1a068:	mvn	r1, #-2147483648	; 0x80000000
   1a06c:	udiv	r1, r1, r4
   1a070:	cmp	r1, r5
   1a074:	bge	1a0c8 <__assert_fail@plt+0x8a8c>
   1a078:	b	1a0b4 <__assert_fail@plt+0x8a78>
   1a07c:	cmn	r5, #1
   1a080:	ble	1a0b8 <__assert_fail@plt+0x8a7c>
   1a084:	cmn	r4, #1
   1a088:	beq	1a0c8 <__assert_fail@plt+0x8a8c>
   1a08c:	mov	r1, #-2147483648	; 0x80000000
   1a090:	sdiv	r1, r1, r4
   1a094:	cmp	r1, r5
   1a098:	bge	1a0c8 <__assert_fail@plt+0x8a8c>
   1a09c:	b	1a0b4 <__assert_fail@plt+0x8a78>
   1a0a0:	beq	1a0c8 <__assert_fail@plt+0x8a8c>
   1a0a4:	mov	r1, #-2147483648	; 0x80000000
   1a0a8:	sdiv	r1, r1, r5
   1a0ac:	cmp	r1, r4
   1a0b0:	bge	1a0c8 <__assert_fail@plt+0x8a8c>
   1a0b4:	bl	1a1cc <__assert_fail@plt+0x8b90>
   1a0b8:	mvn	r1, #-2147483648	; 0x80000000
   1a0bc:	sdiv	r1, r1, r4
   1a0c0:	cmp	r5, r1
   1a0c4:	blt	1a0b4 <__assert_fail@plt+0x8a78>
   1a0c8:	mul	r1, r5, r4
   1a0cc:	bl	19e5c <__assert_fail@plt+0x8820>
   1a0d0:	str	r5, [r8]
   1a0d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a0d8:	mov	r1, #1
   1a0dc:	b	1a0e0 <__assert_fail@plt+0x8aa4>
   1a0e0:	push	{fp, lr}
   1a0e4:	mov	fp, sp
   1a0e8:	bl	1b3cc <__assert_fail@plt+0x9d90>
   1a0ec:	bl	19e30 <__assert_fail@plt+0x87f4>
   1a0f0:	pop	{fp, pc}
   1a0f4:	mov	r1, #1
   1a0f8:	b	1a0fc <__assert_fail@plt+0x8ac0>
   1a0fc:	push	{fp, lr}
   1a100:	mov	fp, sp
   1a104:	bl	1ba60 <__assert_fail@plt+0xa424>
   1a108:	bl	19e30 <__assert_fail@plt+0x87f4>
   1a10c:	pop	{fp, pc}
   1a110:	push	{r4, r5, r6, sl, fp, lr}
   1a114:	add	fp, sp, #16
   1a118:	mov	r4, r1
   1a11c:	mov	r5, r0
   1a120:	mov	r0, r1
   1a124:	bl	19e1c <__assert_fail@plt+0x87e0>
   1a128:	mov	r6, r0
   1a12c:	mov	r1, r5
   1a130:	mov	r2, r4
   1a134:	bl	11384 <memcpy@plt>
   1a138:	mov	r0, r6
   1a13c:	pop	{r4, r5, r6, sl, fp, pc}
   1a140:	push	{r4, r5, r6, sl, fp, lr}
   1a144:	add	fp, sp, #16
   1a148:	mov	r4, r1
   1a14c:	mov	r5, r0
   1a150:	mov	r0, r1
   1a154:	bl	19e44 <__assert_fail@plt+0x8808>
   1a158:	mov	r6, r0
   1a15c:	mov	r1, r5
   1a160:	mov	r2, r4
   1a164:	bl	11384 <memcpy@plt>
   1a168:	mov	r0, r6
   1a16c:	pop	{r4, r5, r6, sl, fp, pc}
   1a170:	push	{r4, r5, r6, sl, fp, lr}
   1a174:	add	fp, sp, #16
   1a178:	mov	r4, r1
   1a17c:	mov	r5, r0
   1a180:	add	r0, r1, #1
   1a184:	bl	19e44 <__assert_fail@plt+0x8808>
   1a188:	mov	r6, r0
   1a18c:	mov	r0, #0
   1a190:	strb	r0, [r6, r4]
   1a194:	mov	r0, r6
   1a198:	mov	r1, r5
   1a19c:	mov	r2, r4
   1a1a0:	bl	11384 <memcpy@plt>
   1a1a4:	mov	r0, r6
   1a1a8:	pop	{r4, r5, r6, sl, fp, pc}
   1a1ac:	push	{r4, sl, fp, lr}
   1a1b0:	add	fp, sp, #8
   1a1b4:	mov	r4, r0
   1a1b8:	bl	114ec <strlen@plt>
   1a1bc:	add	r1, r0, #1
   1a1c0:	mov	r0, r4
   1a1c4:	pop	{r4, sl, fp, lr}
   1a1c8:	b	1a110 <__assert_fail@plt+0x8ad4>
   1a1cc:	push	{fp, lr}
   1a1d0:	mov	fp, sp
   1a1d4:	movw	r0, #57724	; 0xe17c
   1a1d8:	movt	r0, #2
   1a1dc:	ldr	r4, [r0]
   1a1e0:	movw	r1, #55716	; 0xd9a4
   1a1e4:	movt	r1, #1
   1a1e8:	mov	r0, #0
   1a1ec:	mov	r2, #5
   1a1f0:	bl	113b4 <dcgettext@plt>
   1a1f4:	mov	r3, r0
   1a1f8:	movw	r2, #54647	; 0xd577
   1a1fc:	movt	r2, #1
   1a200:	mov	r0, r4
   1a204:	mov	r1, #0
   1a208:	bl	1145c <error@plt>
   1a20c:	bl	11618 <abort@plt>
   1a210:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a214:	add	fp, sp, #24
   1a218:	sub	sp, sp, #16
   1a21c:	mov	r5, r3
   1a220:	mov	r6, r2
   1a224:	mov	r2, r1
   1a228:	mov	r8, r0
   1a22c:	ldr	r0, [fp, #16]
   1a230:	str	r0, [sp]
   1a234:	add	r3, sp, #8
   1a238:	mov	r0, r8
   1a23c:	mov	r1, #0
   1a240:	bl	1a31c <__assert_fail@plt+0x8ce0>
   1a244:	cmp	r0, #0
   1a248:	bne	1a2f8 <__assert_fail@plt+0x8cbc>
   1a24c:	ldr	r7, [sp, #8]
   1a250:	ldr	r4, [sp, #12]
   1a254:	subs	r0, r7, r6
   1a258:	sbcs	r0, r4, r5
   1a25c:	blt	1a280 <__assert_fail@plt+0x8c44>
   1a260:	ldr	r0, [fp, #12]
   1a264:	ldr	r1, [fp, #8]
   1a268:	subs	r1, r1, r7
   1a26c:	sbcs	r0, r0, r4
   1a270:	ldrge	r0, [sp, #8]
   1a274:	ldrge	r1, [sp, #12]
   1a278:	subge	sp, fp, #24
   1a27c:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a280:	subs	r0, r7, #1073741824	; 0x40000000
   1a284:	sbcs	r0, r4, #0
   1a288:	blt	1a298 <__assert_fail@plt+0x8c5c>
   1a28c:	bl	1151c <__errno_location@plt>
   1a290:	mov	r1, #75	; 0x4b
   1a294:	b	1a2b4 <__assert_fail@plt+0x8c78>
   1a298:	bl	1151c <__errno_location@plt>
   1a29c:	mvn	r1, #0
   1a2a0:	mvn	r2, #1073741824	; 0x40000000
   1a2a4:	subs	r2, r2, r7
   1a2a8:	sbcs	r1, r1, r4
   1a2ac:	movlt	r1, #34	; 0x22
   1a2b0:	movge	r1, #75	; 0x4b
   1a2b4:	str	r1, [r0]
   1a2b8:	ldr	r5, [fp, #24]
   1a2bc:	ldr	r6, [fp, #20]
   1a2c0:	bl	1151c <__errno_location@plt>
   1a2c4:	ldr	r4, [r0]
   1a2c8:	mov	r0, r8
   1a2cc:	bl	18fa8 <__assert_fail@plt+0x796c>
   1a2d0:	str	r0, [sp]
   1a2d4:	subs	r1, r4, #22
   1a2d8:	movne	r1, r4
   1a2dc:	cmp	r5, #0
   1a2e0:	movweq	r5, #1
   1a2e4:	movw	r2, #54643	; 0xd573
   1a2e8:	movt	r2, #1
   1a2ec:	mov	r0, r5
   1a2f0:	mov	r3, r6
   1a2f4:	bl	1145c <error@plt>
   1a2f8:	cmp	r0, #1
   1a2fc:	beq	1a28c <__assert_fail@plt+0x8c50>
   1a300:	cmp	r0, #3
   1a304:	bne	1a2b8 <__assert_fail@plt+0x8c7c>
   1a308:	bl	1151c <__errno_location@plt>
   1a30c:	mov	r1, #0
   1a310:	b	1a2b4 <__assert_fail@plt+0x8c78>
   1a314:	mov	r1, #10
   1a318:	b	1a210 <__assert_fail@plt+0x8bd4>
   1a31c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a320:	add	fp, sp, #28
   1a324:	sub	sp, sp, #20
   1a328:	cmp	r2, #37	; 0x25
   1a32c:	bcs	1a740 <__assert_fail@plt+0x9104>
   1a330:	mov	r9, r3
   1a334:	mov	r7, r2
   1a338:	mov	r6, r1
   1a33c:	mov	r4, r0
   1a340:	ldr	sl, [fp, #8]
   1a344:	bl	1151c <__errno_location@plt>
   1a348:	mov	r5, r0
   1a34c:	mov	r0, #0
   1a350:	str	r0, [r5]
   1a354:	add	r8, sp, #16
   1a358:	cmp	r6, #0
   1a35c:	movne	r8, r6
   1a360:	mov	r0, r4
   1a364:	mov	r1, r8
   1a368:	mov	r2, r7
   1a36c:	bl	1157c <strtoimax@plt>
   1a370:	str	r1, [sp, #12]
   1a374:	str	r0, [sp, #8]
   1a378:	ldr	r7, [r8]
   1a37c:	cmp	r7, r4
   1a380:	beq	1a3ac <__assert_fail@plt+0x8d70>
   1a384:	ldr	r0, [r5]
   1a388:	cmp	r0, #0
   1a38c:	beq	1a3e4 <__assert_fail@plt+0x8da8>
   1a390:	mov	r5, #4
   1a394:	cmp	r0, #34	; 0x22
   1a398:	bne	1a734 <__assert_fail@plt+0x90f8>
   1a39c:	mov	r5, #1
   1a3a0:	cmp	sl, #0
   1a3a4:	bne	1a3f0 <__assert_fail@plt+0x8db4>
   1a3a8:	b	1a728 <__assert_fail@plt+0x90ec>
   1a3ac:	mov	r5, #4
   1a3b0:	cmp	sl, #0
   1a3b4:	ldrbne	r1, [r7]
   1a3b8:	cmpne	r1, #0
   1a3bc:	beq	1a734 <__assert_fail@plt+0x90f8>
   1a3c0:	mov	r0, sl
   1a3c4:	bl	114f8 <strchr@plt>
   1a3c8:	cmp	r0, #0
   1a3cc:	beq	1a734 <__assert_fail@plt+0x90f8>
   1a3d0:	mov	r5, #0
   1a3d4:	str	r5, [sp, #12]
   1a3d8:	mov	r0, #1
   1a3dc:	str	r0, [sp, #8]
   1a3e0:	b	1a3f0 <__assert_fail@plt+0x8db4>
   1a3e4:	mov	r5, r0
   1a3e8:	cmp	sl, #0
   1a3ec:	beq	1a728 <__assert_fail@plt+0x90ec>
   1a3f0:	ldrb	r4, [r7]
   1a3f4:	cmp	r4, #0
   1a3f8:	beq	1a728 <__assert_fail@plt+0x90ec>
   1a3fc:	mov	r0, sl
   1a400:	mov	r1, r4
   1a404:	bl	114f8 <strchr@plt>
   1a408:	cmp	r0, #0
   1a40c:	beq	1a624 <__assert_fail@plt+0x8fe8>
   1a410:	sub	r0, r4, #69	; 0x45
   1a414:	mov	r1, #1
   1a418:	str	r1, [sp, #4]
   1a41c:	mov	r6, #1024	; 0x400
   1a420:	cmp	r0, #47	; 0x2f
   1a424:	bhi	1a520 <__assert_fail@plt+0x8ee4>
   1a428:	add	r1, pc, #0
   1a42c:	ldr	pc, [r1, r0, lsl #2]
   1a430:	strdeq	sl, [r1], -r0
   1a434:	andeq	sl, r1, r0, lsr #10
   1a438:	strdeq	sl, [r1], -r0
   1a43c:	andeq	sl, r1, r0, lsr #10
   1a440:	andeq	sl, r1, r0, lsr #10
   1a444:	andeq	sl, r1, r0, lsr #10
   1a448:	strdeq	sl, [r1], -r0
   1a44c:	andeq	sl, r1, r0, lsr #10
   1a450:	strdeq	sl, [r1], -r0
   1a454:	andeq	sl, r1, r0, lsr #10
   1a458:	andeq	sl, r1, r0, lsr #10
   1a45c:	strdeq	sl, [r1], -r0
   1a460:	andeq	sl, r1, r0, lsr #10
   1a464:	andeq	sl, r1, r0, lsr #10
   1a468:	andeq	sl, r1, r0, lsr #10
   1a46c:	strdeq	sl, [r1], -r0
   1a470:	andeq	sl, r1, r0, lsr #10
   1a474:	andeq	sl, r1, r0, lsr #10
   1a478:	andeq	sl, r1, r0, lsr #10
   1a47c:	andeq	sl, r1, r0, lsr #10
   1a480:	strdeq	sl, [r1], -r0
   1a484:	strdeq	sl, [r1], -r0
   1a488:	andeq	sl, r1, r0, lsr #10
   1a48c:	andeq	sl, r1, r0, lsr #10
   1a490:	andeq	sl, r1, r0, lsr #10
   1a494:	andeq	sl, r1, r0, lsr #10
   1a498:	andeq	sl, r1, r0, lsr #10
   1a49c:	andeq	sl, r1, r0, lsr #10
   1a4a0:	andeq	sl, r1, r0, lsr #10
   1a4a4:	andeq	sl, r1, r0, lsr #10
   1a4a8:	andeq	sl, r1, r0, lsr #10
   1a4ac:	andeq	sl, r1, r0, lsr #10
   1a4b0:	andeq	sl, r1, r0, lsr #10
   1a4b4:	andeq	sl, r1, r0, lsr #10
   1a4b8:	strdeq	sl, [r1], -r0
   1a4bc:	andeq	sl, r1, r0, lsr #10
   1a4c0:	andeq	sl, r1, r0, lsr #10
   1a4c4:	andeq	sl, r1, r0, lsr #10
   1a4c8:	strdeq	sl, [r1], -r0
   1a4cc:	andeq	sl, r1, r0, lsr #10
   1a4d0:	strdeq	sl, [r1], -r0
   1a4d4:	andeq	sl, r1, r0, lsr #10
   1a4d8:	andeq	sl, r1, r0, lsr #10
   1a4dc:	andeq	sl, r1, r0, lsr #10
   1a4e0:	andeq	sl, r1, r0, lsr #10
   1a4e4:	andeq	sl, r1, r0, lsr #10
   1a4e8:	andeq	sl, r1, r0, lsr #10
   1a4ec:	strdeq	sl, [r1], -r0
   1a4f0:	mov	r0, sl
   1a4f4:	mov	r1, #48	; 0x30
   1a4f8:	bl	114f8 <strchr@plt>
   1a4fc:	cmp	r0, #0
   1a500:	beq	1a520 <__assert_fail@plt+0x8ee4>
   1a504:	ldrb	r0, [r7, #1]
   1a508:	cmp	r0, #66	; 0x42
   1a50c:	cmpne	r0, #68	; 0x44
   1a510:	bne	1a638 <__assert_fail@plt+0x8ffc>
   1a514:	mov	r0, #2
   1a518:	str	r0, [sp, #4]
   1a51c:	mov	r6, #1000	; 0x3e8
   1a520:	sub	r1, r4, #66	; 0x42
   1a524:	cmp	r1, #53	; 0x35
   1a528:	bhi	1a624 <__assert_fail@plt+0x8fe8>
   1a52c:	mov	r0, #0
   1a530:	add	r2, pc, #0
   1a534:	ldr	pc, [r2, r1, lsl #2]
   1a538:	andeq	sl, r1, r8, lsr #13
   1a53c:	andeq	sl, r1, r4, lsr #12
   1a540:	andeq	sl, r1, r4, lsr #12
   1a544:			; <UNDEFINED> instruction: 0x0001a6b4
   1a548:	andeq	sl, r1, r4, lsr #12
   1a54c:	andeq	sl, r1, r0, lsl r6
   1a550:	andeq	sl, r1, r4, lsr #12
   1a554:	andeq	sl, r1, r4, lsr #12
   1a558:	andeq	sl, r1, r4, lsr #12
   1a55c:	andeq	sl, r1, r8, asr r6
   1a560:	andeq	sl, r1, r4, lsr #12
   1a564:	andeq	sl, r1, ip, ror #12
   1a568:	andeq	sl, r1, r4, lsr #12
   1a56c:	andeq	sl, r1, r4, lsr #12
   1a570:	andeq	sl, r1, r8, asr #13
   1a574:	andeq	sl, r1, r4, lsr #12
   1a578:	andeq	sl, r1, r4, lsr #12
   1a57c:	andeq	sl, r1, r4, lsr #12
   1a580:	andeq	sl, r1, r0, lsl #13
   1a584:	andeq	sl, r1, r4, lsr #12
   1a588:	andeq	sl, r1, r4, lsr #12
   1a58c:	andeq	sl, r1, r4, lsr #12
   1a590:	andeq	sl, r1, r4, lsr #12
   1a594:	ldrdeq	sl, [r1], -ip
   1a598:	muleq	r1, r4, r6
   1a59c:	andeq	sl, r1, r4, lsr #12
   1a5a0:	andeq	sl, r1, r4, lsr #12
   1a5a4:	andeq	sl, r1, r4, lsr #12
   1a5a8:	andeq	sl, r1, r4, lsr #12
   1a5ac:	andeq	sl, r1, r4, lsr #12
   1a5b0:	andeq	sl, r1, r4, lsr #12
   1a5b4:	andeq	sl, r1, r4, lsr #12
   1a5b8:	strdeq	sl, [r1], -r0
   1a5bc:	andeq	sl, r1, r8, lsl #14
   1a5c0:	andeq	sl, r1, r4, lsr #12
   1a5c4:	andeq	sl, r1, r4, lsr #12
   1a5c8:	andeq	sl, r1, r4, lsr #12
   1a5cc:	andeq	sl, r1, r0, lsl r6
   1a5d0:	andeq	sl, r1, r4, lsr #12
   1a5d4:	andeq	sl, r1, r4, lsr #12
   1a5d8:	andeq	sl, r1, r4, lsr #12
   1a5dc:	andeq	sl, r1, r8, asr r6
   1a5e0:	andeq	sl, r1, r4, lsr #12
   1a5e4:	andeq	sl, r1, ip, ror #12
   1a5e8:	andeq	sl, r1, r4, lsr #12
   1a5ec:	andeq	sl, r1, r4, lsr #12
   1a5f0:	andeq	sl, r1, r4, lsr #12
   1a5f4:	andeq	sl, r1, r4, lsr #12
   1a5f8:	andeq	sl, r1, r4, lsr #12
   1a5fc:	andeq	sl, r1, r4, lsr #12
   1a600:	andeq	sl, r1, r0, lsl #13
   1a604:	andeq	sl, r1, r4, lsr #12
   1a608:	andeq	sl, r1, r4, lsr #12
   1a60c:	strdeq	sl, [r1], -ip
   1a610:	add	r0, sp, #8
   1a614:	mov	r1, r6
   1a618:	mov	r2, #3
   1a61c:	bl	1a864 <__assert_fail@plt+0x9228>
   1a620:	b	1a708 <__assert_fail@plt+0x90cc>
   1a624:	ldr	r0, [sp, #8]
   1a628:	ldr	r1, [sp, #12]
   1a62c:	strd	r0, [r9]
   1a630:	orr	r5, r5, #2
   1a634:	b	1a734 <__assert_fail@plt+0x90f8>
   1a638:	cmp	r0, #105	; 0x69
   1a63c:	bne	1a520 <__assert_fail@plt+0x8ee4>
   1a640:	ldrb	r0, [r7, #2]
   1a644:	mov	r1, #1
   1a648:	cmp	r0, #66	; 0x42
   1a64c:	movweq	r1, #3
   1a650:	str	r1, [sp, #4]
   1a654:	b	1a520 <__assert_fail@plt+0x8ee4>
   1a658:	add	r0, sp, #8
   1a65c:	mov	r1, r6
   1a660:	mov	r2, #1
   1a664:	bl	1a864 <__assert_fail@plt+0x9228>
   1a668:	b	1a708 <__assert_fail@plt+0x90cc>
   1a66c:	add	r0, sp, #8
   1a670:	mov	r1, r6
   1a674:	mov	r2, #2
   1a678:	bl	1a864 <__assert_fail@plt+0x9228>
   1a67c:	b	1a708 <__assert_fail@plt+0x90cc>
   1a680:	add	r0, sp, #8
   1a684:	mov	r1, r6
   1a688:	mov	r2, #4
   1a68c:	bl	1a864 <__assert_fail@plt+0x9228>
   1a690:	b	1a708 <__assert_fail@plt+0x90cc>
   1a694:	add	r0, sp, #8
   1a698:	mov	r1, r6
   1a69c:	mov	r2, #7
   1a6a0:	bl	1a864 <__assert_fail@plt+0x9228>
   1a6a4:	b	1a708 <__assert_fail@plt+0x90cc>
   1a6a8:	add	r0, sp, #8
   1a6ac:	mov	r1, #1024	; 0x400
   1a6b0:	b	1a704 <__assert_fail@plt+0x90c8>
   1a6b4:	add	r0, sp, #8
   1a6b8:	mov	r1, r6
   1a6bc:	mov	r2, #6
   1a6c0:	bl	1a864 <__assert_fail@plt+0x9228>
   1a6c4:	b	1a708 <__assert_fail@plt+0x90cc>
   1a6c8:	add	r0, sp, #8
   1a6cc:	mov	r1, r6
   1a6d0:	mov	r2, #5
   1a6d4:	bl	1a864 <__assert_fail@plt+0x9228>
   1a6d8:	b	1a708 <__assert_fail@plt+0x90cc>
   1a6dc:	add	r0, sp, #8
   1a6e0:	mov	r1, r6
   1a6e4:	mov	r2, #8
   1a6e8:	bl	1a864 <__assert_fail@plt+0x9228>
   1a6ec:	b	1a708 <__assert_fail@plt+0x90cc>
   1a6f0:	add	r0, sp, #8
   1a6f4:	mov	r1, #512	; 0x200
   1a6f8:	b	1a704 <__assert_fail@plt+0x90c8>
   1a6fc:	add	r0, sp, #8
   1a700:	mov	r1, #2
   1a704:	bl	1a760 <__assert_fail@plt+0x9124>
   1a708:	ldr	r1, [r8]
   1a70c:	ldr	r3, [sp, #4]
   1a710:	add	r2, r1, r3
   1a714:	str	r2, [r8]
   1a718:	ldrb	r1, [r1, r3]
   1a71c:	orr	r5, r0, r5
   1a720:	cmp	r1, #0
   1a724:	orrne	r5, r5, #2
   1a728:	ldr	r0, [sp, #8]
   1a72c:	ldr	r1, [sp, #12]
   1a730:	strd	r0, [r9]
   1a734:	mov	r0, r5
   1a738:	sub	sp, fp, #28
   1a73c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a740:	movw	r0, #55733	; 0xd9b5
   1a744:	movt	r0, #1
   1a748:	movw	r1, #55771	; 0xd9db
   1a74c:	movt	r1, #1
   1a750:	movw	r3, #55787	; 0xd9eb
   1a754:	movt	r3, #1
   1a758:	mov	r2, #85	; 0x55
   1a75c:	bl	1163c <__assert_fail@plt>
   1a760:	push	{r4, r5, r6, r7, fp, lr}
   1a764:	add	fp, sp, #16
   1a768:	mov	r5, r1
   1a76c:	mov	r4, r0
   1a770:	cmn	r1, #1
   1a774:	ble	1a79c <__assert_fail@plt+0x9160>
   1a778:	cmp	r5, #0
   1a77c:	beq	1a800 <__assert_fail@plt+0x91c4>
   1a780:	ldrd	r6, [r4]
   1a784:	cmn	r7, #1
   1a788:	ble	1a7d4 <__assert_fail@plt+0x9198>
   1a78c:	asr	r3, r5, #31
   1a790:	mvn	r0, #0
   1a794:	mvn	r1, #-2147483648	; 0x80000000
   1a798:	b	1a7bc <__assert_fail@plt+0x9180>
   1a79c:	ldrd	r6, [r4]
   1a7a0:	cmn	r7, #1
   1a7a4:	ble	1a81c <__assert_fail@plt+0x91e0>
   1a7a8:	cmn	r5, #1
   1a7ac:	beq	1a800 <__assert_fail@plt+0x91c4>
   1a7b0:	asr	r3, r5, #31
   1a7b4:	mov	r0, #0
   1a7b8:	mov	r1, #-2147483648	; 0x80000000
   1a7bc:	mov	r2, r5
   1a7c0:	bl	1bb58 <__assert_fail@plt+0xa51c>
   1a7c4:	subs	r0, r0, r6
   1a7c8:	sbcs	r0, r1, r7
   1a7cc:	bge	1a800 <__assert_fail@plt+0x91c4>
   1a7d0:	b	1a83c <__assert_fail@plt+0x9200>
   1a7d4:	and	r0, r6, r7
   1a7d8:	cmn	r0, #1
   1a7dc:	beq	1a800 <__assert_fail@plt+0x91c4>
   1a7e0:	mov	r0, #0
   1a7e4:	mov	r1, #-2147483648	; 0x80000000
   1a7e8:	mov	r2, r6
   1a7ec:	mov	r3, r7
   1a7f0:	bl	1bb58 <__assert_fail@plt+0xa51c>
   1a7f4:	subs	r0, r0, r5
   1a7f8:	sbcs	r0, r1, r5, asr #31
   1a7fc:	blt	1a83c <__assert_fail@plt+0x9200>
   1a800:	ldrd	r0, [r4]
   1a804:	umull	r2, r3, r0, r5
   1a808:	asr	r7, r5, #31
   1a80c:	mla	r0, r0, r7, r3
   1a810:	mla	r1, r1, r5, r0
   1a814:	mov	r0, #0
   1a818:	b	1a858 <__assert_fail@plt+0x921c>
   1a81c:	asr	r3, r5, #31
   1a820:	mvn	r0, #0
   1a824:	mvn	r1, #-2147483648	; 0x80000000
   1a828:	mov	r2, r5
   1a82c:	bl	1bb58 <__assert_fail@plt+0xa51c>
   1a830:	subs	r0, r6, r0
   1a834:	sbcs	r0, r7, r1
   1a838:	bge	1a800 <__assert_fail@plt+0x91c4>
   1a83c:	ldr	r0, [r4, #4]
   1a840:	mvn	r1, #-2147483648	; 0x80000000
   1a844:	cmp	r0, #0
   1a848:	movlt	r1, #-2147483648	; 0x80000000
   1a84c:	mvn	r2, #0
   1a850:	movwlt	r2, #0
   1a854:	mov	r0, #1
   1a858:	str	r2, [r4]
   1a85c:	str	r1, [r4, #4]
   1a860:	pop	{r4, r5, r6, r7, fp, pc}
   1a864:	push	{r4, r5, r6, r7, fp, lr}
   1a868:	add	fp, sp, #16
   1a86c:	cmp	r2, #0
   1a870:	moveq	r6, #0
   1a874:	moveq	r0, r6
   1a878:	popeq	{r4, r5, r6, r7, fp, pc}
   1a87c:	mov	r4, r2
   1a880:	mov	r5, r1
   1a884:	mov	r7, r0
   1a888:	mov	r6, #0
   1a88c:	mov	r0, r7
   1a890:	mov	r1, r5
   1a894:	bl	1a760 <__assert_fail@plt+0x9124>
   1a898:	orr	r6, r0, r6
   1a89c:	subs	r4, r4, #1
   1a8a0:	bne	1a88c <__assert_fail@plt+0x9250>
   1a8a4:	mov	r0, r6
   1a8a8:	pop	{r4, r5, r6, r7, fp, pc}
   1a8ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a8b0:	add	fp, sp, #28
   1a8b4:	sub	sp, sp, #12
   1a8b8:	cmp	r2, #37	; 0x25
   1a8bc:	bcs	1acc0 <__assert_fail@plt+0x9684>
   1a8c0:	mov	r9, r3
   1a8c4:	mov	r5, r2
   1a8c8:	mov	r6, r1
   1a8cc:	mov	r4, r0
   1a8d0:	ldr	sl, [fp, #8]
   1a8d4:	bl	1151c <__errno_location@plt>
   1a8d8:	mov	r7, r0
   1a8dc:	mov	r0, #0
   1a8e0:	str	r0, [r7]
   1a8e4:	add	r8, sp, #8
   1a8e8:	cmp	r6, #0
   1a8ec:	movne	r8, r6
   1a8f0:	mov	r0, r4
   1a8f4:	mov	r1, r8
   1a8f8:	mov	r2, r5
   1a8fc:	bl	11324 <strtol@plt>
   1a900:	str	r0, [sp, #4]
   1a904:	ldr	r6, [r8]
   1a908:	cmp	r6, r4
   1a90c:	beq	1a938 <__assert_fail@plt+0x92fc>
   1a910:	ldr	r0, [r7]
   1a914:	cmp	r0, #0
   1a918:	beq	1a96c <__assert_fail@plt+0x9330>
   1a91c:	mov	r5, #4
   1a920:	cmp	r0, #34	; 0x22
   1a924:	bne	1acb4 <__assert_fail@plt+0x9678>
   1a928:	mov	r5, #1
   1a92c:	cmp	sl, #0
   1a930:	bne	1a978 <__assert_fail@plt+0x933c>
   1a934:	b	1acac <__assert_fail@plt+0x9670>
   1a938:	mov	r5, #4
   1a93c:	cmp	sl, #0
   1a940:	ldrbne	r1, [r6]
   1a944:	cmpne	r1, #0
   1a948:	beq	1acb4 <__assert_fail@plt+0x9678>
   1a94c:	mov	r0, sl
   1a950:	bl	114f8 <strchr@plt>
   1a954:	cmp	r0, #0
   1a958:	beq	1acb4 <__assert_fail@plt+0x9678>
   1a95c:	mov	r0, #1
   1a960:	str	r0, [sp, #4]
   1a964:	mov	r5, #0
   1a968:	b	1a978 <__assert_fail@plt+0x933c>
   1a96c:	mov	r5, r0
   1a970:	cmp	sl, #0
   1a974:	beq	1acac <__assert_fail@plt+0x9670>
   1a978:	ldrb	r4, [r6]
   1a97c:	cmp	r4, #0
   1a980:	beq	1acac <__assert_fail@plt+0x9670>
   1a984:	mov	r0, sl
   1a988:	mov	r1, r4
   1a98c:	bl	114f8 <strchr@plt>
   1a990:	cmp	r0, #0
   1a994:	beq	1abac <__assert_fail@plt+0x9570>
   1a998:	sub	r0, r4, #69	; 0x45
   1a99c:	mov	r1, #1
   1a9a0:	str	r1, [sp]
   1a9a4:	mov	r7, #1024	; 0x400
   1a9a8:	cmp	r0, #47	; 0x2f
   1a9ac:	bhi	1aaa8 <__assert_fail@plt+0x946c>
   1a9b0:	add	r1, pc, #0
   1a9b4:	ldr	pc, [r1, r0, lsl #2]
   1a9b8:	andeq	sl, r1, r8, ror sl
   1a9bc:	andeq	sl, r1, r8, lsr #21
   1a9c0:	andeq	sl, r1, r8, ror sl
   1a9c4:	andeq	sl, r1, r8, lsr #21
   1a9c8:	andeq	sl, r1, r8, lsr #21
   1a9cc:	andeq	sl, r1, r8, lsr #21
   1a9d0:	andeq	sl, r1, r8, ror sl
   1a9d4:	andeq	sl, r1, r8, lsr #21
   1a9d8:	andeq	sl, r1, r8, ror sl
   1a9dc:	andeq	sl, r1, r8, lsr #21
   1a9e0:	andeq	sl, r1, r8, lsr #21
   1a9e4:	andeq	sl, r1, r8, ror sl
   1a9e8:	andeq	sl, r1, r8, lsr #21
   1a9ec:	andeq	sl, r1, r8, lsr #21
   1a9f0:	andeq	sl, r1, r8, lsr #21
   1a9f4:	andeq	sl, r1, r8, ror sl
   1a9f8:	andeq	sl, r1, r8, lsr #21
   1a9fc:	andeq	sl, r1, r8, lsr #21
   1aa00:	andeq	sl, r1, r8, lsr #21
   1aa04:	andeq	sl, r1, r8, lsr #21
   1aa08:	andeq	sl, r1, r8, ror sl
   1aa0c:	andeq	sl, r1, r8, ror sl
   1aa10:	andeq	sl, r1, r8, lsr #21
   1aa14:	andeq	sl, r1, r8, lsr #21
   1aa18:	andeq	sl, r1, r8, lsr #21
   1aa1c:	andeq	sl, r1, r8, lsr #21
   1aa20:	andeq	sl, r1, r8, lsr #21
   1aa24:	andeq	sl, r1, r8, lsr #21
   1aa28:	andeq	sl, r1, r8, lsr #21
   1aa2c:	andeq	sl, r1, r8, lsr #21
   1aa30:	andeq	sl, r1, r8, lsr #21
   1aa34:	andeq	sl, r1, r8, lsr #21
   1aa38:	andeq	sl, r1, r8, lsr #21
   1aa3c:	andeq	sl, r1, r8, lsr #21
   1aa40:	andeq	sl, r1, r8, ror sl
   1aa44:	andeq	sl, r1, r8, lsr #21
   1aa48:	andeq	sl, r1, r8, lsr #21
   1aa4c:	andeq	sl, r1, r8, lsr #21
   1aa50:	andeq	sl, r1, r8, ror sl
   1aa54:	andeq	sl, r1, r8, lsr #21
   1aa58:	andeq	sl, r1, r8, ror sl
   1aa5c:	andeq	sl, r1, r8, lsr #21
   1aa60:	andeq	sl, r1, r8, lsr #21
   1aa64:	andeq	sl, r1, r8, lsr #21
   1aa68:	andeq	sl, r1, r8, lsr #21
   1aa6c:	andeq	sl, r1, r8, lsr #21
   1aa70:	andeq	sl, r1, r8, lsr #21
   1aa74:	andeq	sl, r1, r8, ror sl
   1aa78:	mov	r0, sl
   1aa7c:	mov	r1, #48	; 0x30
   1aa80:	bl	114f8 <strchr@plt>
   1aa84:	cmp	r0, #0
   1aa88:	beq	1aaa8 <__assert_fail@plt+0x946c>
   1aa8c:	ldrb	r0, [r6, #1]
   1aa90:	cmp	r0, #66	; 0x42
   1aa94:	cmpne	r0, #68	; 0x44
   1aa98:	bne	1abbc <__assert_fail@plt+0x9580>
   1aa9c:	mov	r0, #2
   1aaa0:	str	r0, [sp]
   1aaa4:	mov	r7, #1000	; 0x3e8
   1aaa8:	sub	r1, r4, #66	; 0x42
   1aaac:	cmp	r1, #53	; 0x35
   1aab0:	bhi	1abac <__assert_fail@plt+0x9570>
   1aab4:	mov	r0, #0
   1aab8:	add	r2, pc, #0
   1aabc:	ldr	pc, [r2, r1, lsl #2]
   1aac0:	andeq	sl, r1, ip, lsr #24
   1aac4:	andeq	sl, r1, ip, lsr #23
   1aac8:	andeq	sl, r1, ip, lsr #23
   1aacc:	andeq	sl, r1, r8, lsr ip
   1aad0:	andeq	sl, r1, ip, lsr #23
   1aad4:	muleq	r1, r8, fp
   1aad8:	andeq	sl, r1, ip, lsr #23
   1aadc:	andeq	sl, r1, ip, lsr #23
   1aae0:	andeq	sl, r1, ip, lsr #23
   1aae4:	ldrdeq	sl, [r1], -ip
   1aae8:	andeq	sl, r1, ip, lsr #23
   1aaec:	strdeq	sl, [r1], -r0
   1aaf0:	andeq	sl, r1, ip, lsr #23
   1aaf4:	andeq	sl, r1, ip, lsr #23
   1aaf8:	andeq	sl, r1, ip, asr #24
   1aafc:	andeq	sl, r1, ip, lsr #23
   1ab00:	andeq	sl, r1, ip, lsr #23
   1ab04:	andeq	sl, r1, ip, lsr #23
   1ab08:	andeq	sl, r1, r4, lsl #24
   1ab0c:	andeq	sl, r1, ip, lsr #23
   1ab10:	andeq	sl, r1, ip, lsr #23
   1ab14:	andeq	sl, r1, ip, lsr #23
   1ab18:	andeq	sl, r1, ip, lsr #23
   1ab1c:	andeq	sl, r1, r0, ror #24
   1ab20:	andeq	sl, r1, r8, lsl ip
   1ab24:	andeq	sl, r1, ip, lsr #23
   1ab28:	andeq	sl, r1, ip, lsr #23
   1ab2c:	andeq	sl, r1, ip, lsr #23
   1ab30:	andeq	sl, r1, ip, lsr #23
   1ab34:	andeq	sl, r1, ip, lsr #23
   1ab38:	andeq	sl, r1, ip, lsr #23
   1ab3c:	andeq	sl, r1, ip, lsr #23
   1ab40:	andeq	sl, r1, r4, ror ip
   1ab44:	andeq	sl, r1, ip, lsl #25
   1ab48:	andeq	sl, r1, ip, lsr #23
   1ab4c:	andeq	sl, r1, ip, lsr #23
   1ab50:	andeq	sl, r1, ip, lsr #23
   1ab54:	muleq	r1, r8, fp
   1ab58:	andeq	sl, r1, ip, lsr #23
   1ab5c:	andeq	sl, r1, ip, lsr #23
   1ab60:	andeq	sl, r1, ip, lsr #23
   1ab64:	ldrdeq	sl, [r1], -ip
   1ab68:	andeq	sl, r1, ip, lsr #23
   1ab6c:	strdeq	sl, [r1], -r0
   1ab70:	andeq	sl, r1, ip, lsr #23
   1ab74:	andeq	sl, r1, ip, lsr #23
   1ab78:	andeq	sl, r1, ip, lsr #23
   1ab7c:	andeq	sl, r1, ip, lsr #23
   1ab80:	andeq	sl, r1, ip, lsr #23
   1ab84:	andeq	sl, r1, ip, lsr #23
   1ab88:	andeq	sl, r1, r4, lsl #24
   1ab8c:	andeq	sl, r1, ip, lsr #23
   1ab90:	andeq	sl, r1, ip, lsr #23
   1ab94:	andeq	sl, r1, r0, lsl #25
   1ab98:	add	r0, sp, #4
   1ab9c:	mov	r1, r7
   1aba0:	mov	r2, #3
   1aba4:	bl	1ad8c <__assert_fail@plt+0x9750>
   1aba8:	b	1ac8c <__assert_fail@plt+0x9650>
   1abac:	ldr	r0, [sp, #4]
   1abb0:	str	r0, [r9]
   1abb4:	orr	r5, r5, #2
   1abb8:	b	1acb4 <__assert_fail@plt+0x9678>
   1abbc:	cmp	r0, #105	; 0x69
   1abc0:	bne	1aaa8 <__assert_fail@plt+0x946c>
   1abc4:	ldrb	r0, [r6, #2]
   1abc8:	mov	r1, #1
   1abcc:	cmp	r0, #66	; 0x42
   1abd0:	movweq	r1, #3
   1abd4:	str	r1, [sp]
   1abd8:	b	1aaa8 <__assert_fail@plt+0x946c>
   1abdc:	add	r0, sp, #4
   1abe0:	mov	r1, r7
   1abe4:	mov	r2, #1
   1abe8:	bl	1ad8c <__assert_fail@plt+0x9750>
   1abec:	b	1ac8c <__assert_fail@plt+0x9650>
   1abf0:	add	r0, sp, #4
   1abf4:	mov	r1, r7
   1abf8:	mov	r2, #2
   1abfc:	bl	1ad8c <__assert_fail@plt+0x9750>
   1ac00:	b	1ac8c <__assert_fail@plt+0x9650>
   1ac04:	add	r0, sp, #4
   1ac08:	mov	r1, r7
   1ac0c:	mov	r2, #4
   1ac10:	bl	1ad8c <__assert_fail@plt+0x9750>
   1ac14:	b	1ac8c <__assert_fail@plt+0x9650>
   1ac18:	add	r0, sp, #4
   1ac1c:	mov	r1, r7
   1ac20:	mov	r2, #7
   1ac24:	bl	1ad8c <__assert_fail@plt+0x9750>
   1ac28:	b	1ac8c <__assert_fail@plt+0x9650>
   1ac2c:	add	r0, sp, #4
   1ac30:	mov	r1, #1024	; 0x400
   1ac34:	b	1ac88 <__assert_fail@plt+0x964c>
   1ac38:	add	r0, sp, #4
   1ac3c:	mov	r1, r7
   1ac40:	mov	r2, #6
   1ac44:	bl	1ad8c <__assert_fail@plt+0x9750>
   1ac48:	b	1ac8c <__assert_fail@plt+0x9650>
   1ac4c:	add	r0, sp, #4
   1ac50:	mov	r1, r7
   1ac54:	mov	r2, #5
   1ac58:	bl	1ad8c <__assert_fail@plt+0x9750>
   1ac5c:	b	1ac8c <__assert_fail@plt+0x9650>
   1ac60:	add	r0, sp, #4
   1ac64:	mov	r1, r7
   1ac68:	mov	r2, #8
   1ac6c:	bl	1ad8c <__assert_fail@plt+0x9750>
   1ac70:	b	1ac8c <__assert_fail@plt+0x9650>
   1ac74:	add	r0, sp, #4
   1ac78:	mov	r1, #512	; 0x200
   1ac7c:	b	1ac88 <__assert_fail@plt+0x964c>
   1ac80:	add	r0, sp, #4
   1ac84:	mov	r1, #2
   1ac88:	bl	1ace0 <__assert_fail@plt+0x96a4>
   1ac8c:	ldr	r1, [r8]
   1ac90:	ldr	r3, [sp]
   1ac94:	add	r2, r1, r3
   1ac98:	str	r2, [r8]
   1ac9c:	ldrb	r1, [r1, r3]
   1aca0:	orr	r5, r0, r5
   1aca4:	cmp	r1, #0
   1aca8:	orrne	r5, r5, #2
   1acac:	ldr	r0, [sp, #4]
   1acb0:	str	r0, [r9]
   1acb4:	mov	r0, r5
   1acb8:	sub	sp, fp, #28
   1acbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1acc0:	movw	r0, #55733	; 0xd9b5
   1acc4:	movt	r0, #1
   1acc8:	movw	r1, #55773	; 0xd9dd
   1accc:	movt	r1, #1
   1acd0:	movw	r3, #55865	; 0xda39
   1acd4:	movt	r3, #1
   1acd8:	mov	r2, #85	; 0x55
   1acdc:	bl	1163c <__assert_fail@plt>
   1ace0:	cmn	r1, #1
   1ace4:	ble	1ad10 <__assert_fail@plt+0x96d4>
   1ace8:	cmp	r1, #0
   1acec:	beq	1ad4c <__assert_fail@plt+0x9710>
   1acf0:	ldr	r2, [r0]
   1acf4:	cmn	r2, #1
   1acf8:	ble	1ad38 <__assert_fail@plt+0x96fc>
   1acfc:	mvn	r3, #-2147483648	; 0x80000000
   1ad00:	udiv	r3, r3, r1
   1ad04:	cmp	r3, r2
   1ad08:	bge	1ad4c <__assert_fail@plt+0x9710>
   1ad0c:	b	1ad6c <__assert_fail@plt+0x9730>
   1ad10:	ldr	r2, [r0]
   1ad14:	cmn	r2, #1
   1ad18:	ble	1ad5c <__assert_fail@plt+0x9720>
   1ad1c:	cmn	r1, #1
   1ad20:	beq	1ad4c <__assert_fail@plt+0x9710>
   1ad24:	mov	r3, #-2147483648	; 0x80000000
   1ad28:	sdiv	r3, r3, r1
   1ad2c:	cmp	r3, r2
   1ad30:	bge	1ad4c <__assert_fail@plt+0x9710>
   1ad34:	b	1ad6c <__assert_fail@plt+0x9730>
   1ad38:	beq	1ad4c <__assert_fail@plt+0x9710>
   1ad3c:	mov	r3, #-2147483648	; 0x80000000
   1ad40:	sdiv	r2, r3, r2
   1ad44:	cmp	r2, r1
   1ad48:	blt	1ad6c <__assert_fail@plt+0x9730>
   1ad4c:	ldr	r2, [r0]
   1ad50:	mul	r2, r2, r1
   1ad54:	mov	r1, #0
   1ad58:	b	1ad80 <__assert_fail@plt+0x9744>
   1ad5c:	mvn	r3, #-2147483648	; 0x80000000
   1ad60:	sdiv	r3, r3, r1
   1ad64:	cmp	r2, r3
   1ad68:	bge	1ad4c <__assert_fail@plt+0x9710>
   1ad6c:	ldr	r1, [r0]
   1ad70:	mvn	r2, #-2147483648	; 0x80000000
   1ad74:	cmp	r1, #0
   1ad78:	movlt	r2, #-2147483648	; 0x80000000
   1ad7c:	mov	r1, #1
   1ad80:	str	r2, [r0]
   1ad84:	mov	r0, r1
   1ad88:	bx	lr
   1ad8c:	push	{r4, r5, r6, r7, fp, lr}
   1ad90:	add	fp, sp, #16
   1ad94:	cmp	r2, #0
   1ad98:	moveq	r6, #0
   1ad9c:	moveq	r0, r6
   1ada0:	popeq	{r4, r5, r6, r7, fp, pc}
   1ada4:	mov	r4, r2
   1ada8:	mov	r5, r1
   1adac:	mov	r7, r0
   1adb0:	mov	r6, #0
   1adb4:	mov	r0, r7
   1adb8:	mov	r1, r5
   1adbc:	bl	1ace0 <__assert_fail@plt+0x96a4>
   1adc0:	orr	r6, r0, r6
   1adc4:	subs	r4, r4, #1
   1adc8:	bne	1adb4 <__assert_fail@plt+0x9778>
   1adcc:	mov	r0, r6
   1add0:	pop	{r4, r5, r6, r7, fp, pc}
   1add4:	push	{fp, lr}
   1add8:	mov	fp, sp
   1addc:	sub	sp, sp, #8
   1ade0:	movw	ip, #57724	; 0xe17c
   1ade4:	movt	ip, #2
   1ade8:	ldr	ip, [ip]
   1adec:	str	ip, [sp, #4]
   1adf0:	ldr	ip, [fp, #8]
   1adf4:	str	ip, [sp]
   1adf8:	bl	1ae00 <__assert_fail@plt+0x97c4>
   1adfc:	bl	11618 <abort@plt>
   1ae00:	push	{r4, r5, r6, r7, fp, lr}
   1ae04:	add	fp, sp, #16
   1ae08:	sub	sp, sp, #16
   1ae0c:	sub	r0, r0, #1
   1ae10:	cmp	r0, #4
   1ae14:	bcs	1ae94 <__assert_fail@plt+0x9858>
   1ae18:	mov	r5, r1
   1ae1c:	ldr	r4, [fp, #12]
   1ae20:	ldr	r6, [fp, #8]
   1ae24:	movw	r1, #56032	; 0xdae0
   1ae28:	movt	r1, #1
   1ae2c:	ldr	r1, [r1, r0, lsl #2]
   1ae30:	cmn	r5, #1
   1ae34:	ble	1ae48 <__assert_fail@plt+0x980c>
   1ae38:	ldr	r7, [r3, r5, lsl #4]
   1ae3c:	movw	r5, #55936	; 0xda80
   1ae40:	movt	r5, #1
   1ae44:	b	1ae64 <__assert_fail@plt+0x9828>
   1ae48:	mov	r0, #0
   1ae4c:	strb	r0, [sp, #15]
   1ae50:	strb	r2, [sp, #14]
   1ae54:	movw	r0, #55936	; 0xda80
   1ae58:	movt	r0, #1
   1ae5c:	sub	r5, r0, r5
   1ae60:	add	r7, sp, #14
   1ae64:	mov	r0, #0
   1ae68:	mov	r2, #5
   1ae6c:	bl	113b4 <dcgettext@plt>
   1ae70:	mov	r2, r0
   1ae74:	str	r7, [sp]
   1ae78:	str	r6, [sp, #4]
   1ae7c:	mov	r0, r4
   1ae80:	mov	r1, #0
   1ae84:	mov	r3, r5
   1ae88:	bl	1145c <error@plt>
   1ae8c:	sub	sp, fp, #16
   1ae90:	pop	{r4, r5, r6, r7, fp, pc}
   1ae94:	bl	11618 <abort@plt>
   1ae98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae9c:	add	fp, sp, #28
   1aea0:	sub	sp, sp, #20
   1aea4:	cmp	r2, #37	; 0x25
   1aea8:	bcs	1b2d8 <__assert_fail@plt+0x9c9c>
   1aeac:	mov	r5, r2
   1aeb0:	mov	r6, r1
   1aeb4:	mov	r4, r0
   1aeb8:	str	r3, [sp, #4]
   1aebc:	ldr	sl, [fp, #8]
   1aec0:	bl	1151c <__errno_location@plt>
   1aec4:	mov	r7, r0
   1aec8:	mov	r0, #0
   1aecc:	str	r0, [r7]
   1aed0:	bl	114d4 <__ctype_b_loc@plt>
   1aed4:	ldr	r1, [r0]
   1aed8:	mov	r2, r4
   1aedc:	ldrb	r0, [r2], #1
   1aee0:	add	r3, r1, r0, lsl #1
   1aee4:	ldrb	r3, [r3, #1]
   1aee8:	tst	r3, #32
   1aeec:	bne	1aedc <__assert_fail@plt+0x98a0>
   1aef0:	add	r9, sp, #16
   1aef4:	cmp	r6, #0
   1aef8:	movne	r9, r6
   1aefc:	mov	r8, #4
   1af00:	cmp	r0, #45	; 0x2d
   1af04:	beq	1b2cc <__assert_fail@plt+0x9c90>
   1af08:	mov	r0, r4
   1af0c:	mov	r1, r9
   1af10:	mov	r2, r5
   1af14:	bl	11564 <strtoumax@plt>
   1af18:	str	r1, [sp, #12]
   1af1c:	str	r0, [sp, #8]
   1af20:	ldr	r6, [r9]
   1af24:	cmp	r6, r4
   1af28:	beq	1af50 <__assert_fail@plt+0x9914>
   1af2c:	ldr	r0, [r7]
   1af30:	cmp	r0, #0
   1af34:	beq	1af84 <__assert_fail@plt+0x9948>
   1af38:	cmp	r0, #34	; 0x22
   1af3c:	bne	1b2cc <__assert_fail@plt+0x9c90>
   1af40:	mov	r8, #1
   1af44:	cmp	sl, #0
   1af48:	bne	1af90 <__assert_fail@plt+0x9954>
   1af4c:	b	1b2bc <__assert_fail@plt+0x9c80>
   1af50:	cmp	sl, #0
   1af54:	ldrbne	r1, [r6]
   1af58:	cmpne	r1, #0
   1af5c:	beq	1b2cc <__assert_fail@plt+0x9c90>
   1af60:	mov	r0, sl
   1af64:	bl	114f8 <strchr@plt>
   1af68:	cmp	r0, #0
   1af6c:	beq	1b2cc <__assert_fail@plt+0x9c90>
   1af70:	mov	r8, #0
   1af74:	str	r8, [sp, #12]
   1af78:	mov	r0, #1
   1af7c:	str	r0, [sp, #8]
   1af80:	b	1af90 <__assert_fail@plt+0x9954>
   1af84:	mov	r8, r0
   1af88:	cmp	sl, #0
   1af8c:	beq	1b2bc <__assert_fail@plt+0x9c80>
   1af90:	ldrb	r4, [r6]
   1af94:	cmp	r4, #0
   1af98:	beq	1b2bc <__assert_fail@plt+0x9c80>
   1af9c:	mov	r0, sl
   1afa0:	mov	r1, r4
   1afa4:	bl	114f8 <strchr@plt>
   1afa8:	cmp	r0, #0
   1afac:	beq	1b1bc <__assert_fail@plt+0x9b80>
   1afb0:	sub	r0, r4, #69	; 0x45
   1afb4:	mov	r7, #1
   1afb8:	mov	r5, #1024	; 0x400
   1afbc:	cmp	r0, #47	; 0x2f
   1afc0:	bhi	1b0b8 <__assert_fail@plt+0x9a7c>
   1afc4:	add	r1, pc, #0
   1afc8:	ldr	pc, [r1, r0, lsl #2]
   1afcc:	andeq	fp, r1, ip, lsl #1
   1afd0:	strheq	fp, [r1], -r8
   1afd4:	andeq	fp, r1, ip, lsl #1
   1afd8:	strheq	fp, [r1], -r8
   1afdc:	strheq	fp, [r1], -r8
   1afe0:	strheq	fp, [r1], -r8
   1afe4:	andeq	fp, r1, ip, lsl #1
   1afe8:	strheq	fp, [r1], -r8
   1afec:	andeq	fp, r1, ip, lsl #1
   1aff0:	strheq	fp, [r1], -r8
   1aff4:	strheq	fp, [r1], -r8
   1aff8:	andeq	fp, r1, ip, lsl #1
   1affc:	strheq	fp, [r1], -r8
   1b000:	strheq	fp, [r1], -r8
   1b004:	strheq	fp, [r1], -r8
   1b008:	andeq	fp, r1, ip, lsl #1
   1b00c:	strheq	fp, [r1], -r8
   1b010:	strheq	fp, [r1], -r8
   1b014:	strheq	fp, [r1], -r8
   1b018:	strheq	fp, [r1], -r8
   1b01c:	andeq	fp, r1, ip, lsl #1
   1b020:	andeq	fp, r1, ip, lsl #1
   1b024:	strheq	fp, [r1], -r8
   1b028:	strheq	fp, [r1], -r8
   1b02c:	strheq	fp, [r1], -r8
   1b030:	strheq	fp, [r1], -r8
   1b034:	strheq	fp, [r1], -r8
   1b038:	strheq	fp, [r1], -r8
   1b03c:	strheq	fp, [r1], -r8
   1b040:	strheq	fp, [r1], -r8
   1b044:	strheq	fp, [r1], -r8
   1b048:	strheq	fp, [r1], -r8
   1b04c:	strheq	fp, [r1], -r8
   1b050:	strheq	fp, [r1], -r8
   1b054:	andeq	fp, r1, ip, lsl #1
   1b058:	strheq	fp, [r1], -r8
   1b05c:	strheq	fp, [r1], -r8
   1b060:	strheq	fp, [r1], -r8
   1b064:	andeq	fp, r1, ip, lsl #1
   1b068:	strheq	fp, [r1], -r8
   1b06c:	andeq	fp, r1, ip, lsl #1
   1b070:	strheq	fp, [r1], -r8
   1b074:	strheq	fp, [r1], -r8
   1b078:	strheq	fp, [r1], -r8
   1b07c:	strheq	fp, [r1], -r8
   1b080:	strheq	fp, [r1], -r8
   1b084:	strheq	fp, [r1], -r8
   1b088:	andeq	fp, r1, ip, lsl #1
   1b08c:	mov	r0, sl
   1b090:	mov	r1, #48	; 0x30
   1b094:	bl	114f8 <strchr@plt>
   1b098:	cmp	r0, #0
   1b09c:	beq	1b0b8 <__assert_fail@plt+0x9a7c>
   1b0a0:	ldrb	r0, [r6, #1]
   1b0a4:	cmp	r0, #66	; 0x42
   1b0a8:	cmpne	r0, #68	; 0x44
   1b0ac:	bne	1b1d4 <__assert_fail@plt+0x9b98>
   1b0b0:	mov	r7, #2
   1b0b4:	mov	r5, #1000	; 0x3e8
   1b0b8:	sub	r1, r4, #66	; 0x42
   1b0bc:	cmp	r1, #53	; 0x35
   1b0c0:	bhi	1b1bc <__assert_fail@plt+0x9b80>
   1b0c4:	mov	r0, #0
   1b0c8:	add	r2, pc, #0
   1b0cc:	ldr	pc, [r2, r1, lsl #2]
   1b0d0:	andeq	fp, r1, r0, asr #4
   1b0d4:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0d8:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0dc:	andeq	fp, r1, ip, asr #4
   1b0e0:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0e4:	andeq	fp, r1, r8, lsr #3
   1b0e8:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0ec:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0f0:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0f4:	strdeq	fp, [r1], -r0
   1b0f8:			; <UNDEFINED> instruction: 0x0001b1bc
   1b0fc:	andeq	fp, r1, r4, lsl #4
   1b100:			; <UNDEFINED> instruction: 0x0001b1bc
   1b104:			; <UNDEFINED> instruction: 0x0001b1bc
   1b108:	andeq	fp, r1, r0, ror #4
   1b10c:			; <UNDEFINED> instruction: 0x0001b1bc
   1b110:			; <UNDEFINED> instruction: 0x0001b1bc
   1b114:			; <UNDEFINED> instruction: 0x0001b1bc
   1b118:	andeq	fp, r1, r8, lsl r2
   1b11c:			; <UNDEFINED> instruction: 0x0001b1bc
   1b120:			; <UNDEFINED> instruction: 0x0001b1bc
   1b124:			; <UNDEFINED> instruction: 0x0001b1bc
   1b128:			; <UNDEFINED> instruction: 0x0001b1bc
   1b12c:	andeq	fp, r1, r4, ror r2
   1b130:	andeq	fp, r1, ip, lsr #4
   1b134:			; <UNDEFINED> instruction: 0x0001b1bc
   1b138:			; <UNDEFINED> instruction: 0x0001b1bc
   1b13c:			; <UNDEFINED> instruction: 0x0001b1bc
   1b140:			; <UNDEFINED> instruction: 0x0001b1bc
   1b144:			; <UNDEFINED> instruction: 0x0001b1bc
   1b148:			; <UNDEFINED> instruction: 0x0001b1bc
   1b14c:			; <UNDEFINED> instruction: 0x0001b1bc
   1b150:	andeq	fp, r1, r8, lsl #5
   1b154:	andeq	fp, r1, r0, lsr #5
   1b158:			; <UNDEFINED> instruction: 0x0001b1bc
   1b15c:			; <UNDEFINED> instruction: 0x0001b1bc
   1b160:			; <UNDEFINED> instruction: 0x0001b1bc
   1b164:	andeq	fp, r1, r8, lsr #3
   1b168:			; <UNDEFINED> instruction: 0x0001b1bc
   1b16c:			; <UNDEFINED> instruction: 0x0001b1bc
   1b170:			; <UNDEFINED> instruction: 0x0001b1bc
   1b174:	strdeq	fp, [r1], -r0
   1b178:			; <UNDEFINED> instruction: 0x0001b1bc
   1b17c:	andeq	fp, r1, r4, lsl #4
   1b180:			; <UNDEFINED> instruction: 0x0001b1bc
   1b184:			; <UNDEFINED> instruction: 0x0001b1bc
   1b188:			; <UNDEFINED> instruction: 0x0001b1bc
   1b18c:			; <UNDEFINED> instruction: 0x0001b1bc
   1b190:			; <UNDEFINED> instruction: 0x0001b1bc
   1b194:			; <UNDEFINED> instruction: 0x0001b1bc
   1b198:	andeq	fp, r1, r8, lsl r2
   1b19c:			; <UNDEFINED> instruction: 0x0001b1bc
   1b1a0:			; <UNDEFINED> instruction: 0x0001b1bc
   1b1a4:	muleq	r1, r4, r2
   1b1a8:	add	r0, sp, #8
   1b1ac:	mov	r1, r5
   1b1b0:	mov	r2, #3
   1b1b4:	bl	1b384 <__assert_fail@plt+0x9d48>
   1b1b8:	b	1b2a0 <__assert_fail@plt+0x9c64>
   1b1bc:	ldr	r0, [sp, #8]
   1b1c0:	ldr	r1, [sp, #12]
   1b1c4:	ldr	r2, [sp, #4]
   1b1c8:	strd	r0, [r2]
   1b1cc:	orr	r8, r8, #2
   1b1d0:	b	1b2cc <__assert_fail@plt+0x9c90>
   1b1d4:	cmp	r0, #105	; 0x69
   1b1d8:	bne	1b0b8 <__assert_fail@plt+0x9a7c>
   1b1dc:	ldrb	r0, [r6, #2]
   1b1e0:	mov	r7, #1
   1b1e4:	cmp	r0, #66	; 0x42
   1b1e8:	movweq	r7, #3
   1b1ec:	b	1b0b8 <__assert_fail@plt+0x9a7c>
   1b1f0:	add	r0, sp, #8
   1b1f4:	mov	r1, r5
   1b1f8:	mov	r2, #1
   1b1fc:	bl	1b384 <__assert_fail@plt+0x9d48>
   1b200:	b	1b2a0 <__assert_fail@plt+0x9c64>
   1b204:	add	r0, sp, #8
   1b208:	mov	r1, r5
   1b20c:	mov	r2, #2
   1b210:	bl	1b384 <__assert_fail@plt+0x9d48>
   1b214:	b	1b2a0 <__assert_fail@plt+0x9c64>
   1b218:	add	r0, sp, #8
   1b21c:	mov	r1, r5
   1b220:	mov	r2, #4
   1b224:	bl	1b384 <__assert_fail@plt+0x9d48>
   1b228:	b	1b2a0 <__assert_fail@plt+0x9c64>
   1b22c:	add	r0, sp, #8
   1b230:	mov	r1, r5
   1b234:	mov	r2, #7
   1b238:	bl	1b384 <__assert_fail@plt+0x9d48>
   1b23c:	b	1b2a0 <__assert_fail@plt+0x9c64>
   1b240:	add	r0, sp, #8
   1b244:	mov	r1, #1024	; 0x400
   1b248:	b	1b29c <__assert_fail@plt+0x9c60>
   1b24c:	add	r0, sp, #8
   1b250:	mov	r1, r5
   1b254:	mov	r2, #6
   1b258:	bl	1b384 <__assert_fail@plt+0x9d48>
   1b25c:	b	1b2a0 <__assert_fail@plt+0x9c64>
   1b260:	add	r0, sp, #8
   1b264:	mov	r1, r5
   1b268:	mov	r2, #5
   1b26c:	bl	1b384 <__assert_fail@plt+0x9d48>
   1b270:	b	1b2a0 <__assert_fail@plt+0x9c64>
   1b274:	add	r0, sp, #8
   1b278:	mov	r1, r5
   1b27c:	mov	r2, #8
   1b280:	bl	1b384 <__assert_fail@plt+0x9d48>
   1b284:	b	1b2a0 <__assert_fail@plt+0x9c64>
   1b288:	add	r0, sp, #8
   1b28c:	mov	r1, #512	; 0x200
   1b290:	b	1b29c <__assert_fail@plt+0x9c60>
   1b294:	add	r0, sp, #8
   1b298:	mov	r1, #2
   1b29c:	bl	1b2f8 <__assert_fail@plt+0x9cbc>
   1b2a0:	ldr	r1, [r9]
   1b2a4:	add	r2, r1, r7
   1b2a8:	str	r2, [r9]
   1b2ac:	ldrb	r1, [r1, r7]
   1b2b0:	orr	r8, r0, r8
   1b2b4:	cmp	r1, #0
   1b2b8:	orrne	r8, r8, #2
   1b2bc:	ldr	r0, [sp, #8]
   1b2c0:	ldr	r1, [sp, #12]
   1b2c4:	ldr	r2, [sp, #4]
   1b2c8:	strd	r0, [r2]
   1b2cc:	mov	r0, r8
   1b2d0:	sub	sp, fp, #28
   1b2d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2d8:	movw	r0, #55733	; 0xd9b5
   1b2dc:	movt	r0, #1
   1b2e0:	movw	r1, #55771	; 0xd9db
   1b2e4:	movt	r1, #1
   1b2e8:	movw	r3, #56048	; 0xdaf0
   1b2ec:	movt	r3, #1
   1b2f0:	mov	r2, #85	; 0x55
   1b2f4:	bl	1163c <__assert_fail@plt>
   1b2f8:	push	{r4, r5, r6, r7, fp, lr}
   1b2fc:	add	fp, sp, #16
   1b300:	mov	r5, r1
   1b304:	mov	r4, r0
   1b308:	cmn	r1, #1
   1b30c:	ble	1b344 <__assert_fail@plt+0x9d08>
   1b310:	cmp	r5, #0
   1b314:	beq	1b364 <__assert_fail@plt+0x9d28>
   1b318:	asr	r3, r5, #31
   1b31c:	mvn	r6, #0
   1b320:	mvn	r0, #0
   1b324:	mvn	r1, #0
   1b328:	mov	r2, r5
   1b32c:	bl	1bc2c <__assert_fail@plt+0xa5f0>
   1b330:	ldrd	r2, [r4]
   1b334:	subs	r0, r0, r2
   1b338:	sbcs	r0, r1, r3
   1b33c:	bcc	1b354 <__assert_fail@plt+0x9d18>
   1b340:	b	1b364 <__assert_fail@plt+0x9d28>
   1b344:	ldrd	r0, [r4]
   1b348:	orrs	r0, r0, r1
   1b34c:	beq	1b364 <__assert_fail@plt+0x9d28>
   1b350:	mvn	r6, #0
   1b354:	mov	r0, #1
   1b358:	mvn	r7, #0
   1b35c:	strd	r6, [r4]
   1b360:	pop	{r4, r5, r6, r7, fp, pc}
   1b364:	ldrd	r0, [r4]
   1b368:	umull	r6, r2, r0, r5
   1b36c:	asr	r3, r5, #31
   1b370:	mla	r0, r0, r3, r2
   1b374:	mla	r7, r1, r5, r0
   1b378:	mov	r0, #0
   1b37c:	strd	r6, [r4]
   1b380:	pop	{r4, r5, r6, r7, fp, pc}
   1b384:	push	{r4, r5, r6, r7, fp, lr}
   1b388:	add	fp, sp, #16
   1b38c:	cmp	r2, #0
   1b390:	moveq	r6, #0
   1b394:	moveq	r0, r6
   1b398:	popeq	{r4, r5, r6, r7, fp, pc}
   1b39c:	mov	r4, r2
   1b3a0:	mov	r5, r1
   1b3a4:	mov	r7, r0
   1b3a8:	mov	r6, #0
   1b3ac:	mov	r0, r7
   1b3b0:	mov	r1, r5
   1b3b4:	bl	1b2f8 <__assert_fail@plt+0x9cbc>
   1b3b8:	orr	r6, r0, r6
   1b3bc:	subs	r4, r4, #1
   1b3c0:	bne	1b3ac <__assert_fail@plt+0x9d70>
   1b3c4:	mov	r0, r6
   1b3c8:	pop	{r4, r5, r6, r7, fp, pc}
   1b3cc:	clz	r2, r1
   1b3d0:	lsr	r2, r2, #5
   1b3d4:	clz	r3, r0
   1b3d8:	lsr	r3, r3, #5
   1b3dc:	orrs	r2, r3, r2
   1b3e0:	movwne	r1, #1
   1b3e4:	movwne	r0, #1
   1b3e8:	cmp	r1, #0
   1b3ec:	beq	1b41c <__assert_fail@plt+0x9de0>
   1b3f0:	mvn	r2, #-2147483648	; 0x80000000
   1b3f4:	udiv	r2, r2, r1
   1b3f8:	cmp	r2, r0
   1b3fc:	bcs	1b41c <__assert_fail@plt+0x9de0>
   1b400:	push	{fp, lr}
   1b404:	mov	fp, sp
   1b408:	bl	1151c <__errno_location@plt>
   1b40c:	mov	r1, #12
   1b410:	str	r1, [r0]
   1b414:	mov	r0, #0
   1b418:	pop	{fp, pc}
   1b41c:	b	112e8 <calloc@plt>
   1b420:	cmp	r0, #0
   1b424:	movweq	r0, #1
   1b428:	cmn	r0, #1
   1b42c:	ble	1b434 <__assert_fail@plt+0x9df8>
   1b430:	b	11474 <malloc@plt>
   1b434:	push	{fp, lr}
   1b438:	mov	fp, sp
   1b43c:	bl	1151c <__errno_location@plt>
   1b440:	mov	r1, #12
   1b444:	str	r1, [r0]
   1b448:	mov	r0, #0
   1b44c:	pop	{fp, pc}
   1b450:	push	{fp, lr}
   1b454:	mov	fp, sp
   1b458:	cmp	r0, #0
   1b45c:	beq	1b478 <__assert_fail@plt+0x9e3c>
   1b460:	cmp	r1, #0
   1b464:	beq	1b484 <__assert_fail@plt+0x9e48>
   1b468:	cmn	r1, #1
   1b46c:	ble	1b490 <__assert_fail@plt+0x9e54>
   1b470:	pop	{fp, lr}
   1b474:	b	113c0 <realloc@plt>
   1b478:	mov	r0, r1
   1b47c:	pop	{fp, lr}
   1b480:	b	1b420 <__assert_fail@plt+0x9de4>
   1b484:	bl	158f8 <__assert_fail@plt+0x42bc>
   1b488:	mov	r0, #0
   1b48c:	pop	{fp, pc}
   1b490:	bl	1151c <__errno_location@plt>
   1b494:	mov	r1, #12
   1b498:	str	r1, [r0]
   1b49c:	mov	r0, #0
   1b4a0:	pop	{fp, pc}
   1b4a4:	mov	r1, r0
   1b4a8:	sub	r2, r0, #65	; 0x41
   1b4ac:	mov	r0, #1
   1b4b0:	cmp	r2, #26
   1b4b4:	subcs	r2, r1, #97	; 0x61
   1b4b8:	cmpcs	r2, #26
   1b4bc:	bcs	1b4c4 <__assert_fail@plt+0x9e88>
   1b4c0:	bx	lr
   1b4c4:	sub	r1, r1, #48	; 0x30
   1b4c8:	cmp	r1, #10
   1b4cc:	movcs	r0, #0
   1b4d0:	bx	lr
   1b4d4:	mov	r1, r0
   1b4d8:	sub	r2, r0, #65	; 0x41
   1b4dc:	mov	r0, #1
   1b4e0:	cmp	r2, #26
   1b4e4:	subcs	r1, r1, #97	; 0x61
   1b4e8:	cmpcs	r1, #26
   1b4ec:	movcs	r0, #0
   1b4f0:	bx	lr
   1b4f4:	mov	r1, #0
   1b4f8:	cmp	r0, #128	; 0x80
   1b4fc:	movwcc	r1, #1
   1b500:	mov	r0, r1
   1b504:	bx	lr
   1b508:	sub	r1, r0, #9
   1b50c:	clz	r1, r1
   1b510:	lsr	r1, r1, #5
   1b514:	sub	r0, r0, #32
   1b518:	clz	r0, r0
   1b51c:	lsr	r0, r0, #5
   1b520:	orr	r0, r0, r1
   1b524:	bx	lr
   1b528:	mov	r1, r0
   1b52c:	mov	r0, #1
   1b530:	cmp	r1, #32
   1b534:	bxcc	lr
   1b538:	cmp	r1, #127	; 0x7f
   1b53c:	movne	r0, #0
   1b540:	bx	lr
   1b544:	sub	r1, r0, #48	; 0x30
   1b548:	mov	r0, #0
   1b54c:	cmp	r1, #10
   1b550:	movwcc	r0, #1
   1b554:	bx	lr
   1b558:	sub	r1, r0, #33	; 0x21
   1b55c:	mov	r0, #0
   1b560:	cmp	r1, #94	; 0x5e
   1b564:	movwcc	r0, #1
   1b568:	bx	lr
   1b56c:	sub	r1, r0, #97	; 0x61
   1b570:	mov	r0, #0
   1b574:	cmp	r1, #26
   1b578:	movwcc	r0, #1
   1b57c:	bx	lr
   1b580:	sub	r1, r0, #32
   1b584:	mov	r0, #0
   1b588:	cmp	r1, #95	; 0x5f
   1b58c:	movwcc	r0, #1
   1b590:	bx	lr
   1b594:	sub	r1, r0, #33	; 0x21
   1b598:	cmp	r1, #93	; 0x5d
   1b59c:	bhi	1b728 <__assert_fail@plt+0xa0ec>
   1b5a0:	mov	r0, #1
   1b5a4:	add	r2, pc, #0
   1b5a8:	ldr	pc, [r2, r1, lsl #2]
   1b5ac:	andeq	fp, r1, r4, lsr #14
   1b5b0:	andeq	fp, r1, r4, lsr #14
   1b5b4:	andeq	fp, r1, r4, lsr #14
   1b5b8:	andeq	fp, r1, r4, lsr #14
   1b5bc:	andeq	fp, r1, r4, lsr #14
   1b5c0:	andeq	fp, r1, r4, lsr #14
   1b5c4:	andeq	fp, r1, r4, lsr #14
   1b5c8:	andeq	fp, r1, r4, lsr #14
   1b5cc:	andeq	fp, r1, r4, lsr #14
   1b5d0:	andeq	fp, r1, r4, lsr #14
   1b5d4:	andeq	fp, r1, r4, lsr #14
   1b5d8:	andeq	fp, r1, r4, lsr #14
   1b5dc:	andeq	fp, r1, r4, lsr #14
   1b5e0:	andeq	fp, r1, r4, lsr #14
   1b5e4:	andeq	fp, r1, r4, lsr #14
   1b5e8:	andeq	fp, r1, r8, lsr #14
   1b5ec:	andeq	fp, r1, r8, lsr #14
   1b5f0:	andeq	fp, r1, r8, lsr #14
   1b5f4:	andeq	fp, r1, r8, lsr #14
   1b5f8:	andeq	fp, r1, r8, lsr #14
   1b5fc:	andeq	fp, r1, r8, lsr #14
   1b600:	andeq	fp, r1, r8, lsr #14
   1b604:	andeq	fp, r1, r8, lsr #14
   1b608:	andeq	fp, r1, r8, lsr #14
   1b60c:	andeq	fp, r1, r8, lsr #14
   1b610:	andeq	fp, r1, r4, lsr #14
   1b614:	andeq	fp, r1, r4, lsr #14
   1b618:	andeq	fp, r1, r4, lsr #14
   1b61c:	andeq	fp, r1, r4, lsr #14
   1b620:	andeq	fp, r1, r4, lsr #14
   1b624:	andeq	fp, r1, r4, lsr #14
   1b628:	andeq	fp, r1, r4, lsr #14
   1b62c:	andeq	fp, r1, r8, lsr #14
   1b630:	andeq	fp, r1, r8, lsr #14
   1b634:	andeq	fp, r1, r8, lsr #14
   1b638:	andeq	fp, r1, r8, lsr #14
   1b63c:	andeq	fp, r1, r8, lsr #14
   1b640:	andeq	fp, r1, r8, lsr #14
   1b644:	andeq	fp, r1, r8, lsr #14
   1b648:	andeq	fp, r1, r8, lsr #14
   1b64c:	andeq	fp, r1, r8, lsr #14
   1b650:	andeq	fp, r1, r8, lsr #14
   1b654:	andeq	fp, r1, r8, lsr #14
   1b658:	andeq	fp, r1, r8, lsr #14
   1b65c:	andeq	fp, r1, r8, lsr #14
   1b660:	andeq	fp, r1, r8, lsr #14
   1b664:	andeq	fp, r1, r8, lsr #14
   1b668:	andeq	fp, r1, r8, lsr #14
   1b66c:	andeq	fp, r1, r8, lsr #14
   1b670:	andeq	fp, r1, r8, lsr #14
   1b674:	andeq	fp, r1, r8, lsr #14
   1b678:	andeq	fp, r1, r8, lsr #14
   1b67c:	andeq	fp, r1, r8, lsr #14
   1b680:	andeq	fp, r1, r8, lsr #14
   1b684:	andeq	fp, r1, r8, lsr #14
   1b688:	andeq	fp, r1, r8, lsr #14
   1b68c:	andeq	fp, r1, r8, lsr #14
   1b690:	andeq	fp, r1, r8, lsr #14
   1b694:	andeq	fp, r1, r4, lsr #14
   1b698:	andeq	fp, r1, r4, lsr #14
   1b69c:	andeq	fp, r1, r4, lsr #14
   1b6a0:	andeq	fp, r1, r4, lsr #14
   1b6a4:	andeq	fp, r1, r4, lsr #14
   1b6a8:	andeq	fp, r1, r4, lsr #14
   1b6ac:	andeq	fp, r1, r8, lsr #14
   1b6b0:	andeq	fp, r1, r8, lsr #14
   1b6b4:	andeq	fp, r1, r8, lsr #14
   1b6b8:	andeq	fp, r1, r8, lsr #14
   1b6bc:	andeq	fp, r1, r8, lsr #14
   1b6c0:	andeq	fp, r1, r8, lsr #14
   1b6c4:	andeq	fp, r1, r8, lsr #14
   1b6c8:	andeq	fp, r1, r8, lsr #14
   1b6cc:	andeq	fp, r1, r8, lsr #14
   1b6d0:	andeq	fp, r1, r8, lsr #14
   1b6d4:	andeq	fp, r1, r8, lsr #14
   1b6d8:	andeq	fp, r1, r8, lsr #14
   1b6dc:	andeq	fp, r1, r8, lsr #14
   1b6e0:	andeq	fp, r1, r8, lsr #14
   1b6e4:	andeq	fp, r1, r8, lsr #14
   1b6e8:	andeq	fp, r1, r8, lsr #14
   1b6ec:	andeq	fp, r1, r8, lsr #14
   1b6f0:	andeq	fp, r1, r8, lsr #14
   1b6f4:	andeq	fp, r1, r8, lsr #14
   1b6f8:	andeq	fp, r1, r8, lsr #14
   1b6fc:	andeq	fp, r1, r8, lsr #14
   1b700:	andeq	fp, r1, r8, lsr #14
   1b704:	andeq	fp, r1, r8, lsr #14
   1b708:	andeq	fp, r1, r8, lsr #14
   1b70c:	andeq	fp, r1, r8, lsr #14
   1b710:	andeq	fp, r1, r8, lsr #14
   1b714:	andeq	fp, r1, r4, lsr #14
   1b718:	andeq	fp, r1, r4, lsr #14
   1b71c:	andeq	fp, r1, r4, lsr #14
   1b720:	andeq	fp, r1, r4, lsr #14
   1b724:	bx	lr
   1b728:	mov	r0, #0
   1b72c:	bx	lr
   1b730:	sub	r0, r0, #9
   1b734:	cmp	r0, #23
   1b738:	movhi	r0, #0
   1b73c:	bxhi	lr
   1b740:	bic	r0, r0, #-16777216	; 0xff000000
   1b744:	movw	r1, #31
   1b748:	movt	r1, #128	; 0x80
   1b74c:	mov	r2, #1
   1b750:	and	r0, r2, r1, lsr r0
   1b754:	bx	lr
   1b758:	sub	r1, r0, #65	; 0x41
   1b75c:	mov	r0, #0
   1b760:	cmp	r1, #26
   1b764:	movwcc	r0, #1
   1b768:	bx	lr
   1b76c:	mov	r1, r0
   1b770:	sub	r2, r0, #48	; 0x30
   1b774:	mov	r0, #1
   1b778:	cmp	r2, #22
   1b77c:	bhi	1b794 <__assert_fail@plt+0xa158>
   1b780:	mov	ip, #1
   1b784:	movw	r3, #1023	; 0x3ff
   1b788:	movt	r3, #126	; 0x7e
   1b78c:	tst	r3, ip, lsl r2
   1b790:	bxne	lr
   1b794:	sub	r1, r1, #97	; 0x61
   1b798:	cmp	r1, #6
   1b79c:	movcs	r0, #0
   1b7a0:	bxcs	lr
   1b7a4:	bx	lr
   1b7a8:	sub	r1, r0, #65	; 0x41
   1b7ac:	cmp	r1, #26
   1b7b0:	addcc	r0, r0, #32
   1b7b4:	bx	lr
   1b7b8:	sub	r1, r0, #97	; 0x61
   1b7bc:	cmp	r1, #26
   1b7c0:	subcc	r0, r0, #32
   1b7c4:	bx	lr
   1b7c8:	push	{r4, r5, r6, sl, fp, lr}
   1b7cc:	add	fp, sp, #16
   1b7d0:	mov	r4, r0
   1b7d4:	bl	11438 <__fpending@plt>
   1b7d8:	mov	r5, r0
   1b7dc:	mov	r0, r4
   1b7e0:	bl	11444 <ferror_unlocked@plt>
   1b7e4:	mov	r6, r0
   1b7e8:	mov	r0, r4
   1b7ec:	bl	1573c <__assert_fail@plt+0x4100>
   1b7f0:	cmp	r6, #0
   1b7f4:	beq	1b814 <__assert_fail@plt+0xa1d8>
   1b7f8:	mvn	r4, #0
   1b7fc:	cmp	r0, #0
   1b800:	bne	1b848 <__assert_fail@plt+0xa20c>
   1b804:	bl	1151c <__errno_location@plt>
   1b808:	mov	r1, #0
   1b80c:	str	r1, [r0]
   1b810:	b	1b848 <__assert_fail@plt+0xa20c>
   1b814:	cmp	r0, #0
   1b818:	mov	r4, r0
   1b81c:	mvnne	r4, #0
   1b820:	cmp	r5, #0
   1b824:	bne	1b848 <__assert_fail@plt+0xa20c>
   1b828:	cmp	r0, #0
   1b82c:	beq	1b848 <__assert_fail@plt+0xa20c>
   1b830:	bl	1151c <__errno_location@plt>
   1b834:	ldr	r0, [r0]
   1b838:	subs	r4, r0, #9
   1b83c:	mvnne	r4, #0
   1b840:	mov	r0, r4
   1b844:	pop	{r4, r5, r6, sl, fp, pc}
   1b848:	mov	r0, r4
   1b84c:	pop	{r4, r5, r6, sl, fp, pc}
   1b850:	sub	sp, sp, #8
   1b854:	push	{fp, lr}
   1b858:	mov	fp, sp
   1b85c:	sub	sp, sp, #8
   1b860:	str	r3, [fp, #12]
   1b864:	str	r2, [fp, #8]
   1b868:	add	r2, fp, #8
   1b86c:	str	r2, [sp, #4]
   1b870:	cmp	r1, #11
   1b874:	bhi	1b8b4 <__assert_fail@plt+0xa278>
   1b878:	mov	r2, #1
   1b87c:	movw	r3, #1300	; 0x514
   1b880:	tst	r3, r2, lsl r1
   1b884:	bne	1b904 <__assert_fail@plt+0xa2c8>
   1b888:	movw	r3, #2570	; 0xa0a
   1b88c:	tst	r3, r2, lsl r1
   1b890:	bne	1b8dc <__assert_fail@plt+0xa2a0>
   1b894:	cmp	r1, #0
   1b898:	bne	1b8b4 <__assert_fail@plt+0xa278>
   1b89c:	ldr	r1, [sp, #4]
   1b8a0:	add	r2, r1, #4
   1b8a4:	str	r2, [sp, #4]
   1b8a8:	ldr	r1, [r1]
   1b8ac:	bl	1b928 <__assert_fail@plt+0xa2ec>
   1b8b0:	b	1b918 <__assert_fail@plt+0xa2dc>
   1b8b4:	sub	r2, r1, #1024	; 0x400
   1b8b8:	cmp	r2, #10
   1b8bc:	bhi	1b904 <__assert_fail@plt+0xa2c8>
   1b8c0:	mov	ip, #1
   1b8c4:	movw	r3, #645	; 0x285
   1b8c8:	tst	r3, ip, lsl r2
   1b8cc:	bne	1b904 <__assert_fail@plt+0xa2c8>
   1b8d0:	movw	r3, #1282	; 0x502
   1b8d4:	tst	r3, ip, lsl r2
   1b8d8:	beq	1b8e4 <__assert_fail@plt+0xa2a8>
   1b8dc:	bl	115a0 <fcntl64@plt>
   1b8e0:	b	1b918 <__assert_fail@plt+0xa2dc>
   1b8e4:	cmp	r2, #6
   1b8e8:	bne	1b904 <__assert_fail@plt+0xa2c8>
   1b8ec:	ldr	r1, [sp, #4]
   1b8f0:	add	r2, r1, #4
   1b8f4:	str	r2, [sp, #4]
   1b8f8:	ldr	r1, [r1]
   1b8fc:	bl	1b934 <__assert_fail@plt+0xa2f8>
   1b900:	b	1b918 <__assert_fail@plt+0xa2dc>
   1b904:	ldr	r2, [sp, #4]
   1b908:	add	r3, r2, #4
   1b90c:	str	r3, [sp, #4]
   1b910:	ldr	r2, [r2]
   1b914:	bl	115a0 <fcntl64@plt>
   1b918:	mov	sp, fp
   1b91c:	pop	{fp, lr}
   1b920:	add	sp, sp, #8
   1b924:	bx	lr
   1b928:	mov	r2, r1
   1b92c:	mov	r1, #0
   1b930:	b	115a0 <fcntl64@plt>
   1b934:	push	{r4, r5, r6, r7, fp, lr}
   1b938:	add	fp, sp, #16
   1b93c:	mov	r5, r1
   1b940:	mov	r6, r0
   1b944:	movw	r7, #58336	; 0xe3e0
   1b948:	movt	r7, #2
   1b94c:	ldr	r0, [r7]
   1b950:	cmp	r0, #0
   1b954:	blt	1b9b8 <__assert_fail@plt+0xa37c>
   1b958:	mov	r0, r6
   1b95c:	movw	r1, #1030	; 0x406
   1b960:	mov	r2, r5
   1b964:	bl	115a0 <fcntl64@plt>
   1b968:	mov	r4, r0
   1b96c:	cmn	r0, #1
   1b970:	bgt	1b9a4 <__assert_fail@plt+0xa368>
   1b974:	bl	1151c <__errno_location@plt>
   1b978:	ldr	r0, [r0]
   1b97c:	cmp	r0, #22
   1b980:	bne	1b9a4 <__assert_fail@plt+0xa368>
   1b984:	mov	r0, r6
   1b988:	mov	r1, r5
   1b98c:	bl	1b928 <__assert_fail@plt+0xa2ec>
   1b990:	mov	r4, r0
   1b994:	cmp	r0, #0
   1b998:	blt	1ba08 <__assert_fail@plt+0xa3cc>
   1b99c:	mvn	r0, #0
   1b9a0:	b	1b9a8 <__assert_fail@plt+0xa36c>
   1b9a4:	mov	r0, #1
   1b9a8:	str	r0, [r7]
   1b9ac:	cmp	r4, #0
   1b9b0:	bge	1b9d0 <__assert_fail@plt+0xa394>
   1b9b4:	b	1ba08 <__assert_fail@plt+0xa3cc>
   1b9b8:	mov	r0, r6
   1b9bc:	mov	r1, r5
   1b9c0:	bl	1b928 <__assert_fail@plt+0xa2ec>
   1b9c4:	mov	r4, r0
   1b9c8:	cmp	r4, #0
   1b9cc:	blt	1ba08 <__assert_fail@plt+0xa3cc>
   1b9d0:	ldr	r0, [r7]
   1b9d4:	cmn	r0, #1
   1b9d8:	bne	1ba08 <__assert_fail@plt+0xa3cc>
   1b9dc:	mov	r0, r4
   1b9e0:	mov	r1, #1
   1b9e4:	bl	115a0 <fcntl64@plt>
   1b9e8:	cmp	r0, #0
   1b9ec:	blt	1ba10 <__assert_fail@plt+0xa3d4>
   1b9f0:	orr	r2, r0, #1
   1b9f4:	mov	r0, r4
   1b9f8:	mov	r1, #2
   1b9fc:	bl	115a0 <fcntl64@plt>
   1ba00:	cmn	r0, #1
   1ba04:	beq	1ba10 <__assert_fail@plt+0xa3d4>
   1ba08:	mov	r0, r4
   1ba0c:	pop	{r4, r5, r6, r7, fp, pc}
   1ba10:	bl	1151c <__errno_location@plt>
   1ba14:	mov	r5, r0
   1ba18:	ldr	r6, [r0]
   1ba1c:	mov	r0, r4
   1ba20:	bl	11624 <close@plt>
   1ba24:	str	r6, [r5]
   1ba28:	mvn	r4, #0
   1ba2c:	mov	r0, r4
   1ba30:	pop	{r4, r5, r6, r7, fp, pc}
   1ba34:	push	{fp, lr}
   1ba38:	mov	fp, sp
   1ba3c:	bl	1151c <__errno_location@plt>
   1ba40:	mov	r1, #12
   1ba44:	str	r1, [r0]
   1ba48:	mov	r0, #0
   1ba4c:	pop	{fp, pc}
   1ba50:	b	1b420 <__assert_fail@plt+0x9de4>
   1ba54:	cmp	r1, #0
   1ba58:	orreq	r1, r1, #1
   1ba5c:	b	1b450 <__assert_fail@plt+0x9e14>
   1ba60:	b	1b3cc <__assert_fail@plt+0x9d90>
   1ba64:	clz	r3, r2
   1ba68:	lsr	ip, r3, #5
   1ba6c:	clz	r3, r1
   1ba70:	lsr	r3, r3, #5
   1ba74:	orrs	r3, r3, ip
   1ba78:	movwne	r1, #1
   1ba7c:	movwne	r2, #1
   1ba80:	b	1bb1c <__assert_fail@plt+0xa4e0>
   1ba84:	push	{fp, lr}
   1ba88:	mov	fp, sp
   1ba8c:	mov	r0, #14
   1ba90:	bl	115c4 <nl_langinfo@plt>
   1ba94:	movw	r1, #53508	; 0xd104
   1ba98:	movt	r1, #1
   1ba9c:	cmp	r0, #0
   1baa0:	movne	r1, r0
   1baa4:	ldrb	r2, [r1]
   1baa8:	movw	r0, #56127	; 0xdb3f
   1baac:	movt	r0, #1
   1bab0:	cmp	r2, #0
   1bab4:	movne	r0, r1
   1bab8:	pop	{fp, pc}
   1babc:	push	{r4, r5, r6, r7, fp, lr}
   1bac0:	add	fp, sp, #16
   1bac4:	sub	sp, sp, #8
   1bac8:	mov	r7, r2
   1bacc:	mov	r4, r1
   1bad0:	add	r5, sp, #4
   1bad4:	cmp	r0, #0
   1bad8:	movne	r5, r0
   1badc:	mov	r0, r5
   1bae0:	bl	11450 <mbrtowc@plt>
   1bae4:	mov	r6, r0
   1bae8:	cmp	r7, #0
   1baec:	beq	1bb10 <__assert_fail@plt+0xa4d4>
   1baf0:	cmn	r6, #2
   1baf4:	bcc	1bb10 <__assert_fail@plt+0xa4d4>
   1baf8:	mov	r0, #0
   1bafc:	bl	159e0 <__assert_fail@plt+0x43a4>
   1bb00:	cmp	r0, #0
   1bb04:	ldrbeq	r0, [r4]
   1bb08:	streq	r0, [r5]
   1bb0c:	moveq	r6, #1
   1bb10:	mov	r0, r6
   1bb14:	sub	sp, fp, #16
   1bb18:	pop	{r4, r5, r6, r7, fp, pc}
   1bb1c:	cmp	r2, #0
   1bb20:	beq	1bb50 <__assert_fail@plt+0xa514>
   1bb24:	mvn	r3, #0
   1bb28:	udiv	r3, r3, r2
   1bb2c:	cmp	r3, r1
   1bb30:	bcs	1bb50 <__assert_fail@plt+0xa514>
   1bb34:	push	{fp, lr}
   1bb38:	mov	fp, sp
   1bb3c:	bl	1151c <__errno_location@plt>
   1bb40:	mov	r1, #12
   1bb44:	str	r1, [r0]
   1bb48:	mov	r0, #0
   1bb4c:	pop	{fp, pc}
   1bb50:	mul	r1, r2, r1
   1bb54:	b	1b450 <__assert_fail@plt+0x9e14>
   1bb58:	cmp	r3, #0
   1bb5c:	cmpeq	r2, #0
   1bb60:	bne	1bb84 <__assert_fail@plt+0xa548>
   1bb64:	cmp	r1, #0
   1bb68:	movlt	r1, #-2147483648	; 0x80000000
   1bb6c:	movlt	r0, #0
   1bb70:	blt	1bb80 <__assert_fail@plt+0xa544>
   1bb74:	cmpeq	r0, #0
   1bb78:	mvnne	r1, #-2147483648	; 0x80000000
   1bb7c:	mvnne	r0, #0
   1bb80:	b	1bc68 <__assert_fail@plt+0xa62c>
   1bb84:	sub	sp, sp, #8
   1bb88:	push	{sp, lr}
   1bb8c:	cmp	r1, #0
   1bb90:	blt	1bbb0 <__assert_fail@plt+0xa574>
   1bb94:	cmp	r3, #0
   1bb98:	blt	1bbe4 <__assert_fail@plt+0xa5a8>
   1bb9c:	bl	1bc78 <__assert_fail@plt+0xa63c>
   1bba0:	ldr	lr, [sp, #4]
   1bba4:	add	sp, sp, #8
   1bba8:	pop	{r2, r3}
   1bbac:	bx	lr
   1bbb0:	rsbs	r0, r0, #0
   1bbb4:	sbc	r1, r1, r1, lsl #1
   1bbb8:	cmp	r3, #0
   1bbbc:	blt	1bc08 <__assert_fail@plt+0xa5cc>
   1bbc0:	bl	1bc78 <__assert_fail@plt+0xa63c>
   1bbc4:	ldr	lr, [sp, #4]
   1bbc8:	add	sp, sp, #8
   1bbcc:	pop	{r2, r3}
   1bbd0:	rsbs	r0, r0, #0
   1bbd4:	sbc	r1, r1, r1, lsl #1
   1bbd8:	rsbs	r2, r2, #0
   1bbdc:	sbc	r3, r3, r3, lsl #1
   1bbe0:	bx	lr
   1bbe4:	rsbs	r2, r2, #0
   1bbe8:	sbc	r3, r3, r3, lsl #1
   1bbec:	bl	1bc78 <__assert_fail@plt+0xa63c>
   1bbf0:	ldr	lr, [sp, #4]
   1bbf4:	add	sp, sp, #8
   1bbf8:	pop	{r2, r3}
   1bbfc:	rsbs	r0, r0, #0
   1bc00:	sbc	r1, r1, r1, lsl #1
   1bc04:	bx	lr
   1bc08:	rsbs	r2, r2, #0
   1bc0c:	sbc	r3, r3, r3, lsl #1
   1bc10:	bl	1bc78 <__assert_fail@plt+0xa63c>
   1bc14:	ldr	lr, [sp, #4]
   1bc18:	add	sp, sp, #8
   1bc1c:	pop	{r2, r3}
   1bc20:	rsbs	r2, r2, #0
   1bc24:	sbc	r3, r3, r3, lsl #1
   1bc28:	bx	lr
   1bc2c:	cmp	r3, #0
   1bc30:	cmpeq	r2, #0
   1bc34:	bne	1bc4c <__assert_fail@plt+0xa610>
   1bc38:	cmp	r1, #0
   1bc3c:	cmpeq	r0, #0
   1bc40:	mvnne	r1, #0
   1bc44:	mvnne	r0, #0
   1bc48:	b	1bc68 <__assert_fail@plt+0xa62c>
   1bc4c:	sub	sp, sp, #8
   1bc50:	push	{sp, lr}
   1bc54:	bl	1bc78 <__assert_fail@plt+0xa63c>
   1bc58:	ldr	lr, [sp, #4]
   1bc5c:	add	sp, sp, #8
   1bc60:	pop	{r2, r3}
   1bc64:	bx	lr
   1bc68:	push	{r1, lr}
   1bc6c:	mov	r0, #8
   1bc70:	bl	11300 <raise@plt>
   1bc74:	pop	{r1, pc}
   1bc78:	cmp	r1, r3
   1bc7c:	cmpeq	r0, r2
   1bc80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc84:	mov	r4, r0
   1bc88:	movcc	r0, #0
   1bc8c:	mov	r5, r1
   1bc90:	ldr	lr, [sp, #36]	; 0x24
   1bc94:	movcc	r1, r0
   1bc98:	bcc	1bd94 <__assert_fail@plt+0xa758>
   1bc9c:	cmp	r3, #0
   1bca0:	clzeq	ip, r2
   1bca4:	clzne	ip, r3
   1bca8:	addeq	ip, ip, #32
   1bcac:	cmp	r5, #0
   1bcb0:	clzeq	r1, r4
   1bcb4:	addeq	r1, r1, #32
   1bcb8:	clzne	r1, r5
   1bcbc:	sub	ip, ip, r1
   1bcc0:	sub	sl, ip, #32
   1bcc4:	lsl	r9, r3, ip
   1bcc8:	rsb	fp, ip, #32
   1bccc:	orr	r9, r9, r2, lsl sl
   1bcd0:	orr	r9, r9, r2, lsr fp
   1bcd4:	lsl	r8, r2, ip
   1bcd8:	cmp	r5, r9
   1bcdc:	cmpeq	r4, r8
   1bce0:	movcc	r0, #0
   1bce4:	movcc	r1, r0
   1bce8:	bcc	1bd04 <__assert_fail@plt+0xa6c8>
   1bcec:	mov	r0, #1
   1bcf0:	subs	r4, r4, r8
   1bcf4:	lsl	r1, r0, sl
   1bcf8:	orr	r1, r1, r0, lsr fp
   1bcfc:	lsl	r0, r0, ip
   1bd00:	sbc	r5, r5, r9
   1bd04:	cmp	ip, #0
   1bd08:	beq	1bd94 <__assert_fail@plt+0xa758>
   1bd0c:	lsr	r6, r8, #1
   1bd10:	orr	r6, r6, r9, lsl #31
   1bd14:	lsr	r7, r9, #1
   1bd18:	mov	r2, ip
   1bd1c:	b	1bd40 <__assert_fail@plt+0xa704>
   1bd20:	subs	r3, r4, r6
   1bd24:	sbc	r8, r5, r7
   1bd28:	adds	r3, r3, r3
   1bd2c:	adc	r8, r8, r8
   1bd30:	adds	r4, r3, #1
   1bd34:	adc	r5, r8, #0
   1bd38:	subs	r2, r2, #1
   1bd3c:	beq	1bd5c <__assert_fail@plt+0xa720>
   1bd40:	cmp	r5, r7
   1bd44:	cmpeq	r4, r6
   1bd48:	bcs	1bd20 <__assert_fail@plt+0xa6e4>
   1bd4c:	adds	r4, r4, r4
   1bd50:	adc	r5, r5, r5
   1bd54:	subs	r2, r2, #1
   1bd58:	bne	1bd40 <__assert_fail@plt+0xa704>
   1bd5c:	lsr	r3, r4, ip
   1bd60:	orr	r3, r3, r5, lsl fp
   1bd64:	lsr	r2, r5, ip
   1bd68:	orr	r3, r3, r5, lsr sl
   1bd6c:	adds	r0, r0, r4
   1bd70:	mov	r4, r3
   1bd74:	lsl	r3, r2, ip
   1bd78:	orr	r3, r3, r4, lsl sl
   1bd7c:	lsl	ip, r4, ip
   1bd80:	orr	r3, r3, r4, lsr fp
   1bd84:	adc	r1, r1, r5
   1bd88:	subs	r0, r0, ip
   1bd8c:	mov	r5, r2
   1bd90:	sbc	r1, r1, r3
   1bd94:	cmp	lr, #0
   1bd98:	strdne	r4, [lr]
   1bd9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bda0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bda4:	mov	r7, r0
   1bda8:	ldr	r6, [pc, #72]	; 1bdf8 <__assert_fail@plt+0xa7bc>
   1bdac:	ldr	r5, [pc, #72]	; 1bdfc <__assert_fail@plt+0xa7c0>
   1bdb0:	add	r6, pc, r6
   1bdb4:	add	r5, pc, r5
   1bdb8:	sub	r6, r6, r5
   1bdbc:	mov	r8, r1
   1bdc0:	mov	r9, r2
   1bdc4:	bl	112bc <fdopen@plt-0x20>
   1bdc8:	asrs	r6, r6, #2
   1bdcc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bdd0:	mov	r4, #0
   1bdd4:	add	r4, r4, #1
   1bdd8:	ldr	r3, [r5], #4
   1bddc:	mov	r2, r9
   1bde0:	mov	r1, r8
   1bde4:	mov	r0, r7
   1bde8:	blx	r3
   1bdec:	cmp	r6, r4
   1bdf0:	bne	1bdd4 <__assert_fail@plt+0xa798>
   1bdf4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bdf8:	andeq	r2, r1, r4, asr r1
   1bdfc:	andeq	r2, r1, ip, asr #2
   1be00:	bx	lr
   1be04:	ldr	r3, [pc, #12]	; 1be18 <__assert_fail@plt+0xa7dc>
   1be08:	mov	r1, #0
   1be0c:	add	r3, pc, r3
   1be10:	ldr	r2, [r3]
   1be14:	b	11534 <__cxa_atexit@plt>
   1be18:	andeq	r2, r1, r8, lsr #6
   1be1c:	mov	r2, r1
   1be20:	mov	r1, r0
   1be24:	mov	r0, #3
   1be28:	b	11408 <__fxstat64@plt>

Disassembly of section .fini:

0001be2c <.fini>:
   1be2c:	push	{r3, lr}
   1be30:	pop	{r3, pc}
