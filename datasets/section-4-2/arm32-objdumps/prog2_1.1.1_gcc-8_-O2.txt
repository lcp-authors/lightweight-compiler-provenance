
../repos/prog2/1.1.1:     file format elf32-littlearm


Disassembly of section .init:

00010624 <.init>:
   10624:	push	{r3, lr}
   10628:	bl	10984 <_start@@Base+0x3c>
   1062c:	pop	{r3, pc}

Disassembly of section .plt:

00010630 <printf@plt-0x14>:
   10630:	push	{lr}		; (str lr, [sp, #-4]!)
   10634:	ldr	lr, [pc, #4]	; 10640 <printf@plt-0x4>
   10638:	add	lr, pc, lr
   1063c:	ldr	pc, [lr, #8]!
   10640:	andeq	r0, r1, r0, asr #19

00010644 <printf@plt>:
   10644:	add	ip, pc, #0, 12
   10648:	add	ip, ip, #16, 20	; 0x10000
   1064c:	ldr	pc, [ip, #2496]!	; 0x9c0

00010650 <fopen@plt>:
   10650:	add	ip, pc, #0, 12
   10654:	add	ip, ip, #16, 20	; 0x10000
   10658:	ldr	pc, [ip, #2488]!	; 0x9b8

0001065c <puts@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2480]!	; 0x9b0

00010668 <__libc_start_main@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2472]!	; 0x9a8

00010674 <__ctype_tolower_loc@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2464]!	; 0x9a0

00010680 <__gmon_start__@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2456]!	; 0x998

0001068c <memset@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2448]!	; 0x990

00010698 <fclose@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2440]!	; 0x988

000106a4 <abort@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2432]!	; 0x980

000106b0 <getc@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2424]!	; 0x978

Disassembly of section .text:

000106bc <main@@Base>:
   106bc:	ldr	ip, [pc, #620]	; 10930 <main@@Base+0x274>
   106c0:	mov	r1, #237	; 0xed
   106c4:	mov	r2, #218	; 0xda
   106c8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   106cc:	mov	r3, #205	; 0xcd
   106d0:	strd	r6, [sp, #8]
   106d4:	mov	r7, #199	; 0xc7
   106d8:	strd	r8, [sp, #16]
   106dc:	mov	r8, #250	; 0xfa
   106e0:	str	lr, [sp, #24]
   106e4:	mov	lr, #231	; 0xe7
   106e8:	vpush	{d8}
   106ec:	sub	sp, sp, #204	; 0xcc
   106f0:	add	ip, pc, ip
   106f4:	add	r6, sp, #40	; 0x28
   106f8:	add	r4, sp, #64	; 0x40
   106fc:	str	r3, [sp]
   10700:	add	r5, sp, #24
   10704:	stmib	sp, {r1, r2, r8}
   10708:	ldrd	r8, [ip]
   1070c:	str	r7, [sp, #16]
   10710:	mov	r7, #0
   10714:	ldrd	r0, [ip, #56]	; 0x38
   10718:	str	lr, [sp, #20]
   1071c:	ldrd	r2, [ip, #64]	; 0x40
   10720:	strd	r8, [sp, #64]	; 0x40
   10724:	ldrd	r8, [ip, #24]
   10728:	strd	r0, [r6, #8]
   1072c:	ldrd	r0, [ip, #8]
   10730:	strd	r2, [r6, #16]
   10734:	ldrd	r2, [ip, #16]
   10738:	strd	r0, [r4, #8]
   1073c:	ldrd	r0, [ip, #32]
   10740:	strd	r2, [r4, #16]
   10744:	strd	r8, [r4, #24]
   10748:	ldrd	r2, [ip, #40]	; 0x28
   1074c:	strd	r0, [sp, #24]
   10750:	ldr	r1, [pc, #476]	; 10934 <main@@Base+0x278>
   10754:	ldr	r0, [pc, #476]	; 10938 <main@@Base+0x27c>
   10758:	strd	r2, [r5, #8]
   1075c:	ldrd	r8, [ip, #48]	; 0x30
   10760:	add	r1, pc, r1
   10764:	add	r0, pc, r0
   10768:	strd	r8, [sp, #40]	; 0x28
   1076c:	bl	10650 <fopen@plt>
   10770:	mov	r9, r0
   10774:	mov	r2, #104	; 0x68
   10778:	mov	r1, r7
   1077c:	add	r0, sp, #96	; 0x60
   10780:	bl	1068c <memset@plt>
   10784:	b	107a0 <main@@Base+0xe4>
   10788:	bl	10674 <__ctype_tolower_loc@plt>
   1078c:	ldr	r3, [r0]
   10790:	ldr	r8, [r3, r8]
   10794:	sub	r8, r8, #97	; 0x61
   10798:	cmp	r8, #25
   1079c:	bls	108a4 <main@@Base+0x1e8>
   107a0:	mov	r0, r9
   107a4:	bl	106b0 <getc@plt>
   107a8:	cmn	r0, #1
   107ac:	mov	r8, r0
   107b0:	beq	1080c <main@@Base+0x150>
   107b4:	mov	r2, #8
   107b8:	mov	r1, r4
   107bc:	bl	10a38 <in_array@@Base>
   107c0:	cmp	r0, #0
   107c4:	movne	r8, #388	; 0x184
   107c8:	bne	10788 <main@@Base+0xcc>
   107cc:	mov	r0, r8
   107d0:	mov	r2, #4
   107d4:	mov	r1, r5
   107d8:	bl	10a38 <in_array@@Base>
   107dc:	cmp	r0, #0
   107e0:	movne	r8, #404	; 0x194
   107e4:	bne	10788 <main@@Base+0xcc>
   107e8:	mov	r2, #2
   107ec:	mov	r1, sp
   107f0:	mov	r0, r8
   107f4:	bl	10a38 <in_array@@Base>
   107f8:	cmp	r0, #0
   107fc:	movne	r3, #105	; 0x69
   10800:	beq	108c0 <main@@Base+0x204>
   10804:	lsl	r8, r3, #2
   10808:	b	10788 <main@@Base+0xcc>
   1080c:	mov	r0, r9
   10810:	ldr	r6, [pc, #292]	; 1093c <main@@Base+0x280>
   10814:	add	r5, sp, #92	; 0x5c
   10818:	bl	10698 <fclose@plt>
   1081c:	ldr	r0, [pc, #284]	; 10940 <main@@Base+0x284>
   10820:	add	r8, sp, #196	; 0xc4
   10824:	mov	r4, #97	; 0x61
   10828:	vldr	s17, [pc, #252]	; 1092c <main@@Base+0x270>
   1082c:	add	r6, pc, r6
   10830:	add	r0, pc, r0
   10834:	bl	1065c <puts@plt>
   10838:	ldr	r0, [pc, #260]	; 10944 <main@@Base+0x288>
   1083c:	mov	r1, r7
   10840:	add	r0, pc, r0
   10844:	bl	10644 <printf@plt>
   10848:	vmov	s15, r7
   1084c:	vcvt.f32.s32	s16, s15
   10850:	ldr	r3, [r5, #4]!
   10854:	mov	r1, r4
   10858:	mov	r0, r6
   1085c:	add	r4, r4, #1
   10860:	vmov	s14, r3
   10864:	vcvt.f32.s32	s14, s14
   10868:	vdiv.f32	s15, s14, s16
   1086c:	vmul.f32	s15, s15, s17
   10870:	vcvt.f64.f32	d7, s15
   10874:	vmov	r2, r3, d7
   10878:	bl	10644 <printf@plt>
   1087c:	cmp	r8, r5
   10880:	bne	10850 <main@@Base+0x194>
   10884:	mov	r0, #0
   10888:	add	sp, sp, #204	; 0xcc
   1088c:	vpop	{d8}
   10890:	ldrd	r4, [sp]
   10894:	ldrd	r6, [sp, #8]
   10898:	ldrd	r8, [sp, #16]
   1089c:	add	sp, sp, #24
   108a0:	pop	{pc}		; (ldr pc, [sp], #4)
   108a4:	add	r3, sp, #200	; 0xc8
   108a8:	add	r7, r7, #1
   108ac:	add	r8, r3, r8, lsl #2
   108b0:	ldr	r3, [r8, #-104]	; 0xffffff98
   108b4:	add	r3, r3, #1
   108b8:	str	r3, [r8, #-104]	; 0xffffff98
   108bc:	b	107a0 <main@@Base+0xe4>
   108c0:	mov	r2, #6
   108c4:	mov	r1, r6
   108c8:	mov	r0, r8
   108cc:	bl	10a38 <in_array@@Base>
   108d0:	cmp	r0, #0
   108d4:	movne	r3, #111	; 0x6f
   108d8:	bne	10804 <main@@Base+0x148>
   108dc:	mov	r2, #2
   108e0:	add	r1, sp, #8
   108e4:	mov	r0, r8
   108e8:	bl	10a38 <in_array@@Base>
   108ec:	cmp	r0, #0
   108f0:	movne	r3, #117	; 0x75
   108f4:	bne	10804 <main@@Base+0x148>
   108f8:	mov	r2, #2
   108fc:	add	r1, sp, #16
   10900:	mov	r0, r8
   10904:	bl	10a38 <in_array@@Base>
   10908:	cmp	r0, #0
   1090c:	beq	10918 <main@@Base+0x25c>
   10910:	mov	r3, #99	; 0x63
   10914:	b	10804 <main@@Base+0x148>
   10918:	add	r2, r8, #128	; 0x80
   1091c:	mov	r3, r8
   10920:	cmp	r2, #384	; 0x180
   10924:	bcs	10794 <main@@Base+0xd8>
   10928:	b	10804 <main@@Base+0x148>
   1092c:	sbcmi	r0, r8, #0
   10930:	strdeq	r0, [r0], -r4
   10934:	andeq	r0, r0, ip, asr #7
   10938:	andeq	r0, r0, ip, asr #7
   1093c:	andeq	r0, r0, ip, lsr r3
   10940:	andeq	r0, r0, ip, asr #6
   10944:	andeq	r0, r0, r8, lsl #6

00010948 <_start@@Base>:
   10948:	mov	fp, #0
   1094c:	mov	lr, #0
   10950:	pop	{r1}		; (ldr r1, [sp], #4)
   10954:	mov	r2, sp
   10958:	push	{r2}		; (str r2, [sp, #-4]!)
   1095c:	push	{r0}		; (str r0, [sp, #-4]!)
   10960:	ldr	ip, [pc, #16]	; 10978 <_start@@Base+0x30>
   10964:	push	{ip}		; (str ip, [sp, #-4]!)
   10968:	ldr	r0, [pc, #12]	; 1097c <_start@@Base+0x34>
   1096c:	ldr	r3, [pc, #12]	; 10980 <_start@@Base+0x38>
   10970:	bl	10668 <__libc_start_main@plt>
   10974:	bl	106a4 <abort@plt>
   10978:	ldrdeq	r0, [r1], -ip
   1097c:			; <UNDEFINED> instruction: 0x000106bc
   10980:	andeq	r0, r1, ip, ror sl
   10984:	ldr	r3, [pc, #20]	; 109a0 <_start@@Base+0x58>
   10988:	ldr	r2, [pc, #20]	; 109a4 <_start@@Base+0x5c>
   1098c:	add	r3, pc, r3
   10990:	ldr	r2, [r3, r2]
   10994:	cmp	r2, #0
   10998:	bxeq	lr
   1099c:	b	10680 <__gmon_start__@plt>
   109a0:	andeq	r0, r1, ip, ror #12
   109a4:	andeq	r0, r0, r4, lsr r0
   109a8:	ldr	r0, [pc, #24]	; 109c8 <_start@@Base+0x80>
   109ac:	ldr	r3, [pc, #24]	; 109cc <_start@@Base+0x84>
   109b0:	cmp	r3, r0
   109b4:	bxeq	lr
   109b8:	ldr	r3, [pc, #16]	; 109d0 <_start@@Base+0x88>
   109bc:	cmp	r3, #0
   109c0:	bxeq	lr
   109c4:	bx	r3
   109c8:	andeq	r1, r2, r0, asr #32
   109cc:	andeq	r1, r2, r0, asr #32
   109d0:	andeq	r0, r0, r0
   109d4:	ldr	r0, [pc, #36]	; 10a00 <_start@@Base+0xb8>
   109d8:	ldr	r1, [pc, #36]	; 10a04 <_start@@Base+0xbc>
   109dc:	sub	r1, r1, r0
   109e0:	asr	r1, r1, #2
   109e4:	add	r1, r1, r1, lsr #31
   109e8:	asrs	r1, r1, #1
   109ec:	bxeq	lr
   109f0:	ldr	r3, [pc, #16]	; 10a08 <_start@@Base+0xc0>
   109f4:	cmp	r3, #0
   109f8:	bxeq	lr
   109fc:	bx	r3
   10a00:	andeq	r1, r2, r0, asr #32
   10a04:	andeq	r1, r2, r0, asr #32
   10a08:	andeq	r0, r0, r0
   10a0c:	push	{r4, lr}
   10a10:	ldr	r4, [pc, #24]	; 10a30 <_start@@Base+0xe8>
   10a14:	ldrb	r3, [r4]
   10a18:	cmp	r3, #0
   10a1c:	popne	{r4, pc}
   10a20:	bl	109a8 <_start@@Base+0x60>
   10a24:	mov	r3, #1
   10a28:	strb	r3, [r4]
   10a2c:	pop	{r4, pc}
   10a30:	andeq	r1, r2, r0, asr #32
   10a34:	b	109d4 <_start@@Base+0x8c>

00010a38 <in_array@@Base>:
   10a38:	cmp	r2, #0
   10a3c:	blt	10a6c <in_array@@Base+0x34>
   10a40:	ldr	r3, [r1]
   10a44:	cmp	r0, r3
   10a48:	beq	10a74 <in_array@@Base+0x3c>
   10a4c:	mov	r3, #0
   10a50:	b	10a60 <in_array@@Base+0x28>
   10a54:	ldr	ip, [r1, #4]!
   10a58:	cmp	ip, r0
   10a5c:	beq	10a74 <in_array@@Base+0x3c>
   10a60:	add	r3, r3, #1
   10a64:	cmp	r2, r3
   10a68:	bge	10a54 <in_array@@Base+0x1c>
   10a6c:	mov	r0, #0
   10a70:	bx	lr
   10a74:	mov	r0, #1
   10a78:	bx	lr

00010a7c <__libc_csu_init@@Base>:
   10a7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a80:	mov	r7, r0
   10a84:	ldr	r6, [pc, #72]	; 10ad4 <__libc_csu_init@@Base+0x58>
   10a88:	ldr	r5, [pc, #72]	; 10ad8 <__libc_csu_init@@Base+0x5c>
   10a8c:	add	r6, pc, r6
   10a90:	add	r5, pc, r5
   10a94:	sub	r6, r6, r5
   10a98:	mov	r8, r1
   10a9c:	mov	r9, r2
   10aa0:	bl	10624 <printf@plt-0x20>
   10aa4:	asrs	r6, r6, #2
   10aa8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10aac:	mov	r4, #0
   10ab0:	add	r4, r4, #1
   10ab4:	ldr	r3, [r5], #4
   10ab8:	mov	r2, r9
   10abc:	mov	r1, r8
   10ac0:	mov	r0, r7
   10ac4:	blx	r3
   10ac8:	cmp	r6, r4
   10acc:	bne	10ab0 <__libc_csu_init@@Base+0x34>
   10ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ad4:	andeq	r0, r1, r0, lsl #9
   10ad8:	andeq	r0, r1, r8, ror r4

00010adc <__libc_csu_fini@@Base>:
   10adc:	bx	lr

Disassembly of section .fini:

00010ae0 <.fini>:
   10ae0:	push	{r3, lr}
   10ae4:	pop	{r3, pc}
