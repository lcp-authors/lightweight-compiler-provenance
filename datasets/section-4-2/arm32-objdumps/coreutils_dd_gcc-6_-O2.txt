
../repos/coreutils/src/dd:     file format elf32-littlearm


Disassembly of section .init:

0001112c <.init>:
   1112c:	push	{r3, lr}
   11130:	bl	13698 <__assert_fail@plt+0x21bc>
   11134:	pop	{r3, pc}

Disassembly of section .plt:

00011138 <calloc@plt-0x14>:
   11138:	push	{lr}		; (str lr, [sp, #-4]!)
   1113c:	ldr	lr, [pc, #4]	; 11148 <calloc@plt-0x4>
   11140:	add	lr, pc, lr
   11144:	ldr	pc, [lr, #8]!
   11148:			; <UNDEFINED> instruction: 0x0001ceb8

0001114c <calloc@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #28, 20	; 0x1c000
   11154:	ldr	pc, [ip, #3768]!	; 0xeb8

00011158 <fputs_unlocked@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #28, 20	; 0x1c000
   11160:	ldr	pc, [ip, #3760]!	; 0xeb0

00011164 <raise@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #28, 20	; 0x1c000
   1116c:	ldr	pc, [ip, #3752]!	; 0xea8

00011170 <fsync@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #28, 20	; 0x1c000
   11178:	ldr	pc, [ip, #3744]!	; 0xea0

0001117c <strcmp@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #28, 20	; 0x1c000
   11184:	ldr	pc, [ip, #3736]!	; 0xe98

00011188 <posix_fadvise64@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #28, 20	; 0x1c000
   11190:	ldr	pc, [ip, #3728]!	; 0xe90

00011194 <read@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #28, 20	; 0x1c000
   1119c:	ldr	pc, [ip, #3720]!	; 0xe88

000111a0 <fflush@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #28, 20	; 0x1c000
   111a8:	ldr	pc, [ip, #3712]!	; 0xe80

000111ac <sigprocmask@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #28, 20	; 0x1c000
   111b4:	ldr	pc, [ip, #3704]!	; 0xe78

000111b8 <memmove@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #28, 20	; 0x1c000
   111c0:	ldr	pc, [ip, #3696]!	; 0xe70

000111c4 <free@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #28, 20	; 0x1c000
   111cc:	ldr	pc, [ip, #3688]!	; 0xe68

000111d0 <clock_gettime@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #28, 20	; 0x1c000
   111d8:	ldr	pc, [ip, #3680]!	; 0xe60

000111dc <_exit@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #28, 20	; 0x1c000
   111e4:	ldr	pc, [ip, #3672]!	; 0xe58

000111e8 <memcpy@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #28, 20	; 0x1c000
   111f0:	ldr	pc, [ip, #3664]!	; 0xe50

000111f4 <__strtoull_internal@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #28, 20	; 0x1c000
   111fc:	ldr	pc, [ip, #3656]!	; 0xe48

00011200 <mbsinit@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #28, 20	; 0x1c000
   11208:	ldr	pc, [ip, #3648]!	; 0xe40

0001120c <ftruncate64@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #28, 20	; 0x1c000
   11214:	ldr	pc, [ip, #3640]!	; 0xe38

00011218 <memcmp@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #28, 20	; 0x1c000
   11220:	ldr	pc, [ip, #3632]!	; 0xe30

00011224 <fputc_unlocked@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #28, 20	; 0x1c000
   1122c:	ldr	pc, [ip, #3624]!	; 0xe28

00011230 <dcgettext@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #28, 20	; 0x1c000
   11238:	ldr	pc, [ip, #3616]!	; 0xe20

0001123c <dup2@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #28, 20	; 0x1c000
   11244:	ldr	pc, [ip, #3608]!	; 0xe18

00011248 <realloc@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #28, 20	; 0x1c000
   11250:	ldr	pc, [ip, #3600]!	; 0xe10

00011254 <sigismember@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #28, 20	; 0x1c000
   1125c:	ldr	pc, [ip, #3592]!	; 0xe08

00011260 <textdomain@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #28, 20	; 0x1c000
   11268:	ldr	pc, [ip, #3584]!	; 0xe00

0001126c <iswprint@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #28, 20	; 0x1c000
   11274:	ldr	pc, [ip, #3576]!	; 0xdf8

00011278 <__fxstat64@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #28, 20	; 0x1c000
   11280:	ldr	pc, [ip, #3568]!	; 0xdf0

00011284 <sigaction@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #28, 20	; 0x1c000
   1128c:	ldr	pc, [ip, #3560]!	; 0xde8

00011290 <__memcpy_chk@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #28, 20	; 0x1c000
   11298:	ldr	pc, [ip, #3552]!	; 0xde0

0001129c <fwrite@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #28, 20	; 0x1c000
   112a4:	ldr	pc, [ip, #3544]!	; 0xdd8

000112a8 <lseek64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #28, 20	; 0x1c000
   112b0:	ldr	pc, [ip, #3536]!	; 0xdd0

000112b4 <__ctype_get_mb_cur_max@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #28, 20	; 0x1c000
   112bc:	ldr	pc, [ip, #3528]!	; 0xdc8

000112c0 <__fpending@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #28, 20	; 0x1c000
   112c8:	ldr	pc, [ip, #3520]!	; 0xdc0

000112cc <mbrtowc@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #28, 20	; 0x1c000
   112d4:	ldr	pc, [ip, #3512]!	; 0xdb8

000112d8 <error@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #28, 20	; 0x1c000
   112e0:	ldr	pc, [ip, #3504]!	; 0xdb0

000112e4 <open64@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #28, 20	; 0x1c000
   112ec:	ldr	pc, [ip, #3496]!	; 0xda8

000112f0 <getenv@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #28, 20	; 0x1c000
   112f8:	ldr	pc, [ip, #3488]!	; 0xda0

000112fc <malloc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #28, 20	; 0x1c000
   11304:	ldr	pc, [ip, #3480]!	; 0xd98

00011308 <error_at_line@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #28, 20	; 0x1c000
   11310:	ldr	pc, [ip, #3472]!	; 0xd90

00011314 <sigaddset@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #28, 20	; 0x1c000
   1131c:	ldr	pc, [ip, #3464]!	; 0xd88

00011320 <__libc_start_main@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #28, 20	; 0x1c000
   11328:	ldr	pc, [ip, #3456]!	; 0xd80

0001132c <__freading@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #28, 20	; 0x1c000
   11334:	ldr	pc, [ip, #3448]!	; 0xd78

00011338 <__ctype_tolower_loc@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #28, 20	; 0x1c000
   11340:	ldr	pc, [ip, #3440]!	; 0xd70

00011344 <__ctype_toupper_loc@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #28, 20	; 0x1c000
   1134c:	ldr	pc, [ip, #3432]!	; 0xd68

00011350 <__gmon_start__@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #28, 20	; 0x1c000
   11358:	ldr	pc, [ip, #3424]!	; 0xd60

0001135c <getopt_long@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #28, 20	; 0x1c000
   11364:	ldr	pc, [ip, #3416]!	; 0xd58

00011368 <__ctype_b_loc@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #28, 20	; 0x1c000
   11370:	ldr	pc, [ip, #3408]!	; 0xd50

00011374 <exit@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #28, 20	; 0x1c000
   1137c:	ldr	pc, [ip, #3400]!	; 0xd48

00011380 <strlen@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #28, 20	; 0x1c000
   11388:	ldr	pc, [ip, #3392]!	; 0xd40

0001138c <strchr@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #28, 20	; 0x1c000
   11394:	ldr	pc, [ip, #3384]!	; 0xd38

00011398 <getpagesize@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #28, 20	; 0x1c000
   113a0:	ldr	pc, [ip, #3376]!	; 0xd30

000113a4 <__errno_location@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #28, 20	; 0x1c000
   113ac:	ldr	pc, [ip, #3368]!	; 0xd28

000113b0 <__sprintf_chk@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #28, 20	; 0x1c000
   113b8:	ldr	pc, [ip, #3360]!	; 0xd20

000113bc <__cxa_atexit@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #28, 20	; 0x1c000
   113c4:	ldr	pc, [ip, #3352]!	; 0xd18

000113c8 <__vasprintf_chk@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #28, 20	; 0x1c000
   113d0:	ldr	pc, [ip, #3344]!	; 0xd10

000113d4 <memset@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #28, 20	; 0x1c000
   113dc:	ldr	pc, [ip, #3336]!	; 0xd08

000113e0 <__printf_chk@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #28, 20	; 0x1c000
   113e8:	ldr	pc, [ip, #3328]!	; 0xd00

000113ec <write@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #28, 20	; 0x1c000
   113f4:	ldr	pc, [ip, #3320]!	; 0xcf8

000113f8 <fileno@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #28, 20	; 0x1c000
   11400:	ldr	pc, [ip, #3312]!	; 0xcf0

00011404 <__fprintf_chk@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #28, 20	; 0x1c000
   1140c:	ldr	pc, [ip, #3304]!	; 0xce8

00011410 <fclose@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #28, 20	; 0x1c000
   11418:	ldr	pc, [ip, #3296]!	; 0xce0

0001141c <fseeko64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #28, 20	; 0x1c000
   11424:	ldr	pc, [ip, #3288]!	; 0xcd8

00011428 <fcntl64@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #28, 20	; 0x1c000
   11430:	ldr	pc, [ip, #3280]!	; 0xcd0

00011434 <__overflow@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #28, 20	; 0x1c000
   1143c:	ldr	pc, [ip, #3272]!	; 0xcc8

00011440 <setlocale@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #28, 20	; 0x1c000
   11448:	ldr	pc, [ip, #3264]!	; 0xcc0

0001144c <sigemptyset@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #28, 20	; 0x1c000
   11454:	ldr	pc, [ip, #3256]!	; 0xcb8

00011458 <strrchr@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #28, 20	; 0x1c000
   11460:	ldr	pc, [ip, #3248]!	; 0xcb0

00011464 <nl_langinfo@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #28, 20	; 0x1c000
   1146c:	ldr	pc, [ip, #3240]!	; 0xca8

00011470 <localeconv@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #28, 20	; 0x1c000
   11478:	ldr	pc, [ip, #3232]!	; 0xca0

0001147c <bindtextdomain@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #28, 20	; 0x1c000
   11484:	ldr	pc, [ip, #3224]!	; 0xc98

00011488 <aligned_alloc@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #28, 20	; 0x1c000
   11490:	ldr	pc, [ip, #3216]!	; 0xc90

00011494 <strncmp@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #28, 20	; 0x1c000
   1149c:	ldr	pc, [ip, #3208]!	; 0xc88

000114a0 <fdatasync@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #28, 20	; 0x1c000
   114a8:	ldr	pc, [ip, #3200]!	; 0xc80

000114ac <abort@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #28, 20	; 0x1c000
   114b4:	ldr	pc, [ip, #3192]!	; 0xc78

000114b8 <close@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #28, 20	; 0x1c000
   114c0:	ldr	pc, [ip, #3184]!	; 0xc70

000114c4 <dcngettext@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #28, 20	; 0x1c000
   114cc:	ldr	pc, [ip, #3176]!	; 0xc68

000114d0 <__snprintf_chk@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #28, 20	; 0x1c000
   114d8:	ldr	pc, [ip, #3168]!	; 0xc60

000114dc <__assert_fail@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #28, 20	; 0x1c000
   114e4:	ldr	pc, [ip, #3160]!	; 0xc58

Disassembly of section .text:

000114e8 <.text>:
   114e8:	push	{r7, lr}
   114ec:	mov	r2, #5
   114f0:	sub	sp, sp, #672	; 0x2a0
   114f4:	ldr	r1, [pc, #76]	; 11548 <__assert_fail@plt+0x6c>
   114f8:	mov	r0, #0
   114fc:	bl	11230 <dcgettext@plt>
   11500:	ldr	r2, [pc, #68]	; 1154c <__assert_fail@plt+0x70>
   11504:	mov	r6, #1
   11508:	mov	r7, #0
   1150c:	ldr	r4, [r2, #104]	; 0x68
   11510:	ldr	r3, [pc, #56]	; 11550 <__assert_fail@plt+0x74>
   11514:	add	r2, sp, #20
   11518:	asr	r1, r4, #31
   1151c:	strd	r6, [sp, #8]
   11520:	strd	r6, [sp]
   11524:	mov	r5, r0
   11528:	mov	r0, r4
   1152c:	bl	15fa8 <__assert_fail@plt+0x4acc>
   11530:	mov	r3, r4
   11534:	mov	r2, r5
   11538:	mov	r1, #0
   1153c:	str	r0, [sp]
   11540:	mov	r0, #1
   11544:	bl	13d54 <__assert_fail@plt+0x2878>
   11548:	andeq	fp, r1, r8, lsr #15
   1154c:	andeq	lr, r2, r8, ror #3
   11550:	strdeq	r0, [r0], -r1
   11554:	push	{r7, lr}
   11558:	mov	r2, #5
   1155c:	sub	sp, sp, #672	; 0x2a0
   11560:	ldr	r1, [pc, #76]	; 115b4 <__assert_fail@plt+0xd8>
   11564:	mov	r0, #0
   11568:	bl	11230 <dcgettext@plt>
   1156c:	ldr	r2, [pc, #68]	; 115b8 <__assert_fail@plt+0xdc>
   11570:	mov	r6, #1
   11574:	mov	r7, #0
   11578:	ldr	r4, [r2, #116]	; 0x74
   1157c:	ldr	r3, [pc, #56]	; 115bc <__assert_fail@plt+0xe0>
   11580:	add	r2, sp, #20
   11584:	asr	r1, r4, #31
   11588:	strd	r6, [sp, #8]
   1158c:	strd	r6, [sp]
   11590:	mov	r5, r0
   11594:	mov	r0, r4
   11598:	bl	15fa8 <__assert_fail@plt+0x4acc>
   1159c:	mov	r3, r4
   115a0:	mov	r2, r5
   115a4:	mov	r1, #0
   115a8:	str	r0, [sp]
   115ac:	mov	r0, #1
   115b0:	bl	13d54 <__assert_fail@plt+0x2878>
   115b4:	andeq	fp, r1, r0, ror #15
   115b8:	andeq	lr, r2, r8, ror #3
   115bc:	strdeq	r0, [r0], -r1
   115c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115c4:	mov	r8, r0
   115c8:	sub	sp, sp, #228	; 0xe4
   115cc:	ldr	r0, [pc, #2572]	; 11fe0 <__assert_fail@plt+0xb04>
   115d0:	mov	r6, r1
   115d4:	bl	112f0 <getenv@plt>
   115d8:	mov	r4, r0
   115dc:	ldr	r0, [pc, #2560]	; 11fe4 <__assert_fail@plt+0xb08>
   115e0:	bl	1144c <sigemptyset@plt>
   115e4:	cmp	r4, #0
   115e8:	beq	13428 <__assert_fail@plt+0x1f4c>
   115ec:	add	r2, sp, #80	; 0x50
   115f0:	mov	r1, #0
   115f4:	mov	r0, #2
   115f8:	bl	11284 <sigaction@plt>
   115fc:	ldr	r3, [sp, #80]	; 0x50
   11600:	cmp	r3, #1
   11604:	beq	11614 <__assert_fail@plt+0x138>
   11608:	mov	r1, #2
   1160c:	ldr	r0, [pc, #2512]	; 11fe4 <__assert_fail@plt+0xb08>
   11610:	bl	11314 <sigaddset@plt>
   11614:	mov	r2, #128	; 0x80
   11618:	ldr	r1, [pc, #2500]	; 11fe4 <__assert_fail@plt+0xb08>
   1161c:	add	r0, sp, #84	; 0x54
   11620:	bl	111e8 <memcpy@plt>
   11624:	mov	r1, #10
   11628:	ldr	r0, [pc, #2484]	; 11fe4 <__assert_fail@plt+0xb08>
   1162c:	bl	11254 <sigismember@plt>
   11630:	cmp	r0, #0
   11634:	bne	12d74 <__assert_fail@plt+0x1898>
   11638:	mov	r1, #2
   1163c:	ldr	r0, [pc, #2464]	; 11fe4 <__assert_fail@plt+0xb08>
   11640:	bl	11254 <sigismember@plt>
   11644:	cmp	r0, #0
   11648:	beq	1166c <__assert_fail@plt+0x190>
   1164c:	ldr	ip, [pc, #2452]	; 11fe8 <__assert_fail@plt+0xb0c>
   11650:	mov	r3, #-1073741824	; 0xc0000000
   11654:	mov	r2, #0
   11658:	add	r1, sp, #80	; 0x50
   1165c:	mov	r0, #2
   11660:	str	ip, [sp, #80]	; 0x50
   11664:	str	r3, [sp, #212]	; 0xd4
   11668:	bl	11284 <sigaction@plt>
   1166c:	ldr	r0, [r6]
   11670:	bl	16d38 <__assert_fail@plt+0x585c>
   11674:	ldr	r1, [pc, #2416]	; 11fec <__assert_fail@plt+0xb10>
   11678:	mov	r0, #6
   1167c:	bl	11440 <setlocale@plt>
   11680:	ldr	r1, [pc, #2408]	; 11ff0 <__assert_fail@plt+0xb14>
   11684:	ldr	r0, [pc, #2408]	; 11ff4 <__assert_fail@plt+0xb18>
   11688:	bl	1147c <bindtextdomain@plt>
   1168c:	ldr	r0, [pc, #2400]	; 11ff4 <__assert_fail@plt+0xb18>
   11690:	bl	11260 <textdomain@plt>
   11694:	ldr	r0, [pc, #2396]	; 11ff8 <__assert_fail@plt+0xb1c>
   11698:	bl	1b0cc <__assert_fail@plt+0x9bf0>
   1169c:	bl	11398 <getpagesize@plt>
   116a0:	ldr	r3, [pc, #2388]	; 11ffc <__assert_fail@plt+0xb20>
   116a4:	ldr	sl, [pc, #2388]	; 12000 <__assert_fail@plt+0xb24>
   116a8:	ldr	ip, [pc, #2388]	; 12004 <__assert_fail@plt+0xb28>
   116ac:	ldr	r3, [r3]
   116b0:	ldr	lr, [pc, #2384]	; 12008 <__assert_fail@plt+0xb2c>
   116b4:	ldr	r1, [pc, #2384]	; 1200c <__assert_fail@plt+0xb30>
   116b8:	ldr	r2, [pc, #2384]	; 12010 <__assert_fail@plt+0xb34>
   116bc:	mov	r5, #0
   116c0:	str	r3, [sp]
   116c4:	str	ip, [sp, #16]
   116c8:	mov	r3, #1
   116cc:	add	ip, sl, #300	; 0x12c
   116d0:	str	r1, [sp, #12]
   116d4:	str	r2, [sp, #8]
   116d8:	str	r3, [sp, #4]
   116dc:	ldr	r2, [pc, #2352]	; 12014 <__assert_fail@plt+0xb38>
   116e0:	ldr	r3, [pc, #2316]	; 11ff4 <__assert_fail@plt+0xb18>
   116e4:	sub	r4, ip, #1
   116e8:	str	lr, [sp, #20]
   116ec:	str	r5, [sp, #24]
   116f0:	mov	r1, r6
   116f4:	ldr	fp, [pc, #2332]	; 12018 <__assert_fail@plt+0xb3c>
   116f8:	str	r0, [sl, #100]	; 0x64
   116fc:	mov	r0, r8
   11700:	bl	16c60 <__assert_fail@plt+0x5784>
   11704:	mov	r2, r4
   11708:	mov	r3, r5
   1170c:	strb	r5, [fp, #24]
   11710:	strb	r3, [r2, #1]!
   11714:	add	r3, r3, #1
   11718:	cmp	r3, #256	; 0x100
   1171c:	bne	11710 <__assert_fail@plt+0x234>
   11720:	ldr	r3, [pc, #2292]	; 1201c <__assert_fail@plt+0xb40>
   11724:	mov	r2, #0
   11728:	str	r2, [sp, #76]	; 0x4c
   1172c:	ldr	r5, [r3]
   11730:	mov	r2, #0
   11734:	mov	r3, #0
   11738:	cmp	r8, r5
   1173c:	strd	r2, [sp, #48]	; 0x30
   11740:	ble	13574 <__assert_fail@plt+0x2098>
   11744:	strd	r2, [sp, #40]	; 0x28
   11748:	add	r6, r6, r5, lsl #2
   1174c:	mvn	r2, #0
   11750:	mvn	r3, #-2147483648	; 0x80000000
   11754:	strd	r2, [sp, #32]
   11758:	ldr	r9, [r6], #4
   1175c:	mov	r1, #61	; 0x3d
   11760:	mov	r0, r9
   11764:	bl	1138c <strchr@plt>
   11768:	subs	r7, r0, #0
   1176c:	beq	13540 <__assert_fail@plt+0x2064>
   11770:	ldr	r1, [pc, #2216]	; 12020 <__assert_fail@plt+0xb44>
   11774:	add	r7, r7, #1
   11778:	mov	r2, r9
   1177c:	mov	r3, #105	; 0x69
   11780:	ldrb	r0, [r2], #1
   11784:	cmp	r0, r3
   11788:	bne	11ca8 <__assert_fail@plt+0x7cc>
   1178c:	ldrb	r3, [r1, #1]!
   11790:	cmp	r3, #0
   11794:	bne	11780 <__assert_fail@plt+0x2a4>
   11798:	ldrb	r3, [r2]
   1179c:	cmp	r3, #61	; 0x3d
   117a0:	cmpne	r3, #0
   117a4:	bne	11ca8 <__assert_fail@plt+0x7cc>
   117a8:	str	r7, [sl, #124]	; 0x7c
   117ac:	add	r5, r5, #1
   117b0:	cmp	r8, r5
   117b4:	bne	11758 <__assert_fail@plt+0x27c>
   117b8:	ldr	r3, [sp, #76]	; 0x4c
   117bc:	cmp	r3, #0
   117c0:	strne	r3, [sl, #116]	; 0x74
   117c4:	strne	r3, [sl, #104]	; 0x68
   117c8:	bne	117f8 <__assert_fail@plt+0x31c>
   117cc:	ldr	r3, [sl, #112]	; 0x70
   117d0:	ldr	r2, [sl, #104]	; 0x68
   117d4:	orr	r3, r3, #2048	; 0x800
   117d8:	cmp	r2, #0
   117dc:	str	r3, [sl, #112]	; 0x70
   117e0:	moveq	r3, #512	; 0x200
   117e4:	streq	r3, [sl, #104]	; 0x68
   117e8:	ldr	r3, [sl, #116]	; 0x74
   117ec:	cmp	r3, #0
   117f0:	moveq	r3, #512	; 0x200
   117f4:	streq	r3, [sl, #116]	; 0x74
   117f8:	ldr	r3, [sl, #288]	; 0x120
   117fc:	ldr	r2, [pc, #2080]	; 12024 <__assert_fail@plt+0xb48>
   11800:	cmp	r3, #0
   11804:	ldr	r6, [sl, #272]	; 0x110
   11808:	ldreq	r3, [sl, #112]	; 0x70
   1180c:	biceq	r3, r3, #24
   11810:	streq	r3, [sl, #112]	; 0x70
   11814:	ldr	r3, [sl, #264]	; 0x108
   11818:	tst	r3, r2
   1181c:	orrne	r3, r3, r2
   11820:	strne	r3, [sl, #264]	; 0x108
   11824:	ands	r8, r6, #1
   11828:	bne	134e4 <__assert_fail@plt+0x2008>
   1182c:	ldr	r5, [sl, #264]	; 0x108
   11830:	ands	r7, r5, #16
   11834:	bne	135cc <__assert_fail@plt+0x20f0>
   11838:	tst	r6, #12
   1183c:	bne	13588 <__assert_fail@plt+0x20ac>
   11840:	tst	r5, #8
   11844:	beq	121c8 <__assert_fail@plt+0xcec>
   11848:	ldrd	r2, [sp, #40]	; 0x28
   1184c:	orrs	r1, r2, r3
   11850:	bne	122b4 <__assert_fail@plt+0xdd8>
   11854:	tst	r5, #4
   11858:	mvn	r2, #0
   1185c:	mvn	r3, #-2147483648	; 0x80000000
   11860:	ldrd	r0, [sp, #32]
   11864:	beq	121f4 <__assert_fail@plt+0xd18>
   11868:	cmp	r1, r3
   1186c:	cmpeq	r0, r2
   11870:	beq	118a0 <__assert_fail@plt+0x3c4>
   11874:	ldr	r8, [sl, #104]	; 0x68
   11878:	mov	r2, r8
   1187c:	asr	r9, r8, #31
   11880:	mov	r3, r9
   11884:	bl	1add8 <__assert_fail@plt+0x98fc>
   11888:	mov	r2, r8
   1188c:	mov	r3, r9
   11890:	strd	r0, [fp, #32]
   11894:	ldrd	r0, [sp, #32]
   11898:	bl	1add8 <__assert_fail@plt+0x98fc>
   1189c:	str	r2, [sl, #572]	; 0x23c
   118a0:	tst	r6, #16
   118a4:	ldrd	r2, [sp, #48]	; 0x30
   118a8:	beq	121e4 <__assert_fail@plt+0xd08>
   118ac:	orrs	r1, r2, r3
   118b0:	bne	12278 <__assert_fail@plt+0xd9c>
   118b4:	ldr	r7, [sl, #112]	; 0x70
   118b8:	ands	r3, r7, #2048	; 0x800
   118bc:	beq	12148 <__assert_fail@plt+0xc6c>
   118c0:	ldr	r2, [pc, #2012]	; 120a4 <__assert_fail@plt+0xbc8>
   118c4:	tst	r5, #1
   118c8:	ldr	r3, [pc, #2016]	; 120b0 <__assert_fail@plt+0xbd4>
   118cc:	movne	r3, r2
   118d0:	mov	r2, #0
   118d4:	strb	r2, [sl, #268]	; 0x10c
   118d8:	and	r2, r7, #7
   118dc:	sub	r8, r2, #1
   118e0:	ands	r8, r8, r2
   118e4:	bic	r2, r5, #1
   118e8:	str	r3, [sl, #296]	; 0x128
   118ec:	str	r2, [sl, #264]	; 0x108
   118f0:	bne	135c0 <__assert_fail@plt+0x20e4>
   118f4:	and	r3, r7, #24
   118f8:	sub	r9, r3, #1
   118fc:	ands	r9, r9, r3
   11900:	movne	r2, #5
   11904:	ldrne	r1, [pc, #1820]	; 12028 <__assert_fail@plt+0xb4c>
   11908:	bne	13528 <__assert_fail@plt+0x204c>
   1190c:	and	r3, r7, #96	; 0x60
   11910:	sub	r8, r3, #1
   11914:	ands	r8, r8, r3
   11918:	movne	r2, #5
   1191c:	ldrne	r1, [pc, #1800]	; 1202c <__assert_fail@plt+0xb50>
   11920:	bne	13528 <__assert_fail@plt+0x204c>
   11924:	and	r3, r7, #12288	; 0x3000
   11928:	sub	r2, r3, #1
   1192c:	tst	r2, r3
   11930:	movne	r2, #5
   11934:	ldrne	r1, [pc, #1780]	; 12030 <__assert_fail@plt+0xb54>
   11938:	bne	13528 <__assert_fail@plt+0x204c>
   1193c:	ldr	r3, [pc, #1776]	; 12034 <__assert_fail@plt+0xb58>
   11940:	and	r2, r5, r3
   11944:	sub	r1, r2, #1
   11948:	tst	r1, r2
   1194c:	bne	13520 <__assert_fail@plt+0x2044>
   11950:	and	r3, r3, r6
   11954:	sub	r2, r3, #1
   11958:	ands	r3, r2, r3
   1195c:	str	r3, [sp, #40]	; 0x28
   11960:	bne	13520 <__assert_fail@plt+0x2044>
   11964:	tst	r5, #2
   11968:	beq	11998 <__assert_fail@plt+0x4bc>
   1196c:	ldrd	r2, [fp, #32]
   11970:	mov	r1, #1
   11974:	bic	r5, r5, #3
   11978:	orrs	r3, r2, r3
   1197c:	strb	r1, [sl, #592]	; 0x250
   11980:	ldreq	r3, [sl, #572]	; 0x23c
   11984:	ldrne	r3, [sp, #40]	; 0x28
   11988:	clzeq	r3, r3
   1198c:	lsreq	r3, r3, #5
   11990:	str	r5, [sl, #264]	; 0x108
   11994:	strb	r3, [sl, #96]	; 0x60
   11998:	tst	r6, #2
   1199c:	beq	119cc <__assert_fail@plt+0x4f0>
   119a0:	ldrd	r2, [fp, #32]
   119a4:	mov	r1, #1
   119a8:	bic	r6, r6, #2
   119ac:	orrs	r3, r2, r3
   119b0:	movne	r3, #0
   119b4:	ldreq	r3, [sl, #572]	; 0x23c
   119b8:	clzeq	r3, r3
   119bc:	strb	r1, [sl, #277]	; 0x115
   119c0:	lsreq	r3, r3, #5
   119c4:	str	r6, [sl, #272]	; 0x110
   119c8:	strb	r3, [sl, #97]	; 0x61
   119cc:	tst	r7, #1
   119d0:	beq	11a04 <__assert_fail@plt+0x528>
   119d4:	ldr	r3, [pc, #1728]	; 1209c <__assert_fail@plt+0xbc0>
   119d8:	ldr	r1, [pc, #1728]	; 120a0 <__assert_fail@plt+0xbc4>
   119dc:	add	r0, r3, #255	; 0xff
   119e0:	mov	r3, r4
   119e4:	ldrb	r2, [r3, #1]
   119e8:	add	r2, r1, r2
   119ec:	ldrb	r2, [r2, #696]	; 0x2b8
   119f0:	strb	r2, [r3, #1]!
   119f4:	cmp	r3, r0
   119f8:	bne	119e4 <__assert_fail@plt+0x508>
   119fc:	mov	r3, #1
   11a00:	strb	r3, [sl, #593]	; 0x251
   11a04:	tst	r7, #64	; 0x40
   11a08:	beq	12114 <__assert_fail@plt+0xc38>
   11a0c:	bl	11344 <__ctype_toupper_loc@plt>
   11a10:	ldr	r3, [pc, #1668]	; 1209c <__assert_fail@plt+0xbc0>
   11a14:	add	ip, r3, #255	; 0xff
   11a18:	mov	r3, r4
   11a1c:	ldr	r1, [r0]
   11a20:	ldrb	r2, [r3, #1]
   11a24:	ldrb	r2, [r1, r2, lsl #2]
   11a28:	strb	r2, [r3, #1]!
   11a2c:	cmp	r3, ip
   11a30:	bne	11a20 <__assert_fail@plt+0x544>
   11a34:	mov	r3, #1
   11a38:	strb	r3, [sl, #593]	; 0x251
   11a3c:	tst	r7, #2
   11a40:	beq	12198 <__assert_fail@plt+0xcbc>
   11a44:	ldr	r3, [pc, #1616]	; 1209c <__assert_fail@plt+0xbc0>
   11a48:	ldr	r1, [pc, #1616]	; 120a0 <__assert_fail@plt+0xbc4>
   11a4c:	add	r2, r3, #255	; 0xff
   11a50:	ldrb	r3, [r4, #1]
   11a54:	add	r3, r1, r3
   11a58:	ldrb	r3, [r3, #952]	; 0x3b8
   11a5c:	strb	r3, [r4, #1]!
   11a60:	cmp	r2, r4
   11a64:	bne	11a50 <__assert_fail@plt+0x574>
   11a68:	mov	r1, #1
   11a6c:	mov	r2, #37	; 0x25
   11a70:	mov	r3, #64	; 0x40
   11a74:	strb	r1, [sl, #593]	; 0x251
   11a78:	strb	r2, [fp, #25]
   11a7c:	strb	r3, [fp, #26]
   11a80:	ldr	r4, [sl, #124]	; 0x7c
   11a84:	cmp	r4, #0
   11a88:	beq	13064 <__assert_fail@plt+0x1b88>
   11a8c:	mov	r3, #0
   11a90:	mov	r1, r4
   11a94:	mov	r0, r3
   11a98:	ldr	r2, [sl, #264]	; 0x108
   11a9c:	bl	14d68 <__assert_fail@plt+0x388c>
   11aa0:	cmp	r0, #0
   11aa4:	blt	13138 <__assert_fail@plt+0x1c5c>
   11aa8:	mov	r3, #1
   11aac:	str	r3, [sp]
   11ab0:	mov	r2, #0
   11ab4:	mov	r3, #0
   11ab8:	mov	r0, #0
   11abc:	bl	112a8 <lseek64@plt>
   11ac0:	mov	r2, r0
   11ac4:	mov	r3, r1
   11ac8:	cmp	r2, #0
   11acc:	sbcs	r0, r3, #0
   11ad0:	mvn	r1, r1
   11ad4:	movlt	r2, #0
   11ad8:	movlt	r3, #0
   11adc:	lsr	r1, r1, #31
   11ae0:	strd	r2, [sl, #8]
   11ae4:	strb	r1, [sl, #98]	; 0x62
   11ae8:	bl	113a4 <__errno_location@plt>
   11aec:	ldr	r3, [sl, #128]	; 0x80
   11af0:	mov	r2, r3
   11af4:	str	r3, [sp, #60]	; 0x3c
   11af8:	cmp	r2, #0
   11afc:	ldr	r3, [r0]
   11b00:	str	r0, [sp, #32]
   11b04:	str	r3, [sl, #596]	; 0x254
   11b08:	beq	133b8 <__assert_fail@plt+0x1edc>
   11b0c:	ldr	r3, [pc, #1428]	; 120a8 <__assert_fail@plt+0xbcc>
   11b10:	ldr	r9, [sl, #112]	; 0x70
   11b14:	str	r3, [sp, #56]	; 0x38
   11b18:	ldrd	r2, [r3]
   11b1c:	ldr	r8, [sl, #272]	; 0x110
   11b20:	tst	r9, #4096	; 0x1000
   11b24:	mov	r1, r3
   11b28:	ldr	r3, [sp, #40]	; 0x28
   11b2c:	moveq	r3, #64	; 0x40
   11b30:	mov	r0, r2
   11b34:	orr	r3, r3, r8
   11b38:	ands	r8, r9, #8192	; 0x2000
   11b3c:	movne	r8, #128	; 0x80
   11b40:	orrs	r2, r0, r1
   11b44:	strd	r0, [sp, #48]	; 0x30
   11b48:	ldr	r4, [sl, #116]	; 0x74
   11b4c:	orr	r8, r8, r3
   11b50:	beq	12204 <__assert_fail@plt+0xd28>
   11b54:	cmp	r4, #0
   11b58:	blt	130f8 <__assert_fail@plt+0x1c1c>
   11b5c:	bne	12f60 <__assert_fail@plt+0x1a84>
   11b60:	mov	r2, #0
   11b64:	mov	r3, #0
   11b68:	mov	r4, r2
   11b6c:	mov	r5, r3
   11b70:	ldr	r7, [pc, #1356]	; 120c4 <__assert_fail@plt+0xbe8>
   11b74:	ldrd	r0, [r7, #-8]
   11b78:	cmp	r0, #0
   11b7c:	strd	r0, [sp, #64]	; 0x40
   11b80:	sbcs	r1, r1, #0
   11b84:	blt	12f18 <__assert_fail@plt+0x1a3c>
   11b88:	mvn	r0, #0
   11b8c:	subs	r0, r0, r2
   11b90:	mvn	r1, #-2147483648	; 0x80000000
   11b94:	sbc	r1, r1, r3
   11b98:	mov	r2, r0
   11b9c:	mov	r3, r1
   11ba0:	ldrd	r0, [sp, #64]	; 0x40
   11ba4:	cmp	r2, r0
   11ba8:	sbcs	r3, r3, r1
   11bac:	movlt	r3, #1
   11bb0:	movge	r3, #0
   11bb4:	cmp	r3, #0
   11bb8:	beq	12f18 <__assert_fail@plt+0x1a3c>
   11bbc:	ldrd	r2, [r7, #-8]
   11bc0:	adds	r4, r4, r2
   11bc4:	adc	r5, r5, r3
   11bc8:	ands	r9, r9, #512	; 0x200
   11bcc:	beq	12ee8 <__assert_fail@plt+0x1a0c>
   11bd0:	ldrd	r2, [sp, #48]	; 0x30
   11bd4:	orrs	r3, r2, r3
   11bd8:	beq	12314 <__assert_fail@plt+0xe38>
   11bdc:	ldr	r1, [sp, #60]	; 0x3c
   11be0:	ldr	r3, [pc, #1228]	; 120b4 <__assert_fail@plt+0xbd8>
   11be4:	orr	r2, r8, #2
   11be8:	mov	r0, #1
   11bec:	bl	14d68 <__assert_fail@plt+0x388c>
   11bf0:	cmp	r0, #0
   11bf4:	blt	12314 <__assert_fail@plt+0xe38>
   11bf8:	ldr	r3, [sp, #56]	; 0x38
   11bfc:	ldrd	r2, [r3]
   11c00:	orrs	r3, r2, r3
   11c04:	beq	11c14 <__assert_fail@plt+0x738>
   11c08:	ldr	r3, [sl, #112]	; 0x70
   11c0c:	tst	r3, #512	; 0x200
   11c10:	beq	13208 <__assert_fail@plt+0x1d2c>
   11c14:	bl	15f28 <__assert_fail@plt+0x4a4c>
   11c18:	ldr	ip, [pc, #1164]	; 120ac <__assert_fail@plt+0xbd0>
   11c1c:	add	r3, pc, #948	; 0x3b4
   11c20:	ldrd	r2, [r3]
   11c24:	ldrd	r4, [ip]
   11c28:	adds	r2, r2, r0
   11c2c:	adc	r3, r3, r1
   11c30:	strd	r0, [sl, #24]
   11c34:	orrs	r1, r4, r5
   11c38:	strd	r2, [ip, #40]	; 0x28
   11c3c:	beq	1236c <__assert_fail@plt+0xe90>
   11c40:	ldr	r7, [sl, #104]	; 0x68
   11c44:	cmp	r7, #0
   11c48:	blt	131bc <__assert_fail@plt+0x1ce0>
   11c4c:	beq	12fbc <__assert_fail@plt+0x1ae0>
   11c50:	cmp	r4, #0
   11c54:	sbcs	r3, r5, #0
   11c58:	blt	13370 <__assert_fail@plt+0x1e94>
   11c5c:	mov	r2, r7
   11c60:	asr	r3, r7, #31
   11c64:	mvn	r0, #0
   11c68:	mvn	r1, #-2147483648	; 0x80000000
   11c6c:	strd	r2, [sp, #48]	; 0x30
   11c70:	bl	1add8 <__assert_fail@plt+0x98fc>
   11c74:	cmp	r0, r4
   11c78:	sbcs	r3, r1, r5
   11c7c:	movlt	r3, #1
   11c80:	movge	r3, #0
   11c84:	cmp	r3, #0
   11c88:	beq	13474 <__assert_fail@plt+0x1f98>
   11c8c:	mul	r3, r7, r5
   11c90:	ldr	r2, [sp, #52]	; 0x34
   11c94:	umull	r8, r9, r7, r4
   11c98:	mla	r3, r4, r2, r3
   11c9c:	mov	r6, #1
   11ca0:	add	r9, r3, r9
   11ca4:	b	123e0 <__assert_fail@plt+0xf04>
   11ca8:	ldr	r1, [pc, #904]	; 12038 <__assert_fail@plt+0xb5c>
   11cac:	mov	r2, r9
   11cb0:	mov	r3, #111	; 0x6f
   11cb4:	ldrb	r0, [r2], #1
   11cb8:	cmp	r0, r3
   11cbc:	bne	11ce0 <__assert_fail@plt+0x804>
   11cc0:	ldrb	r3, [r1, #1]!
   11cc4:	cmp	r3, #0
   11cc8:	bne	11cb4 <__assert_fail@plt+0x7d8>
   11ccc:	ldrb	r3, [r2]
   11cd0:	cmp	r3, #0
   11cd4:	cmpne	r3, #61	; 0x3d
   11cd8:	streq	r7, [sl, #128]	; 0x80
   11cdc:	beq	117ac <__assert_fail@plt+0x2d0>
   11ce0:	ldr	r1, [pc, #852]	; 1203c <__assert_fail@plt+0xb60>
   11ce4:	mov	r3, r9
   11ce8:	mov	r2, #99	; 0x63
   11cec:	ldrb	r0, [r3], #1
   11cf0:	cmp	r0, r2
   11cf4:	bne	11d34 <__assert_fail@plt+0x858>
   11cf8:	ldrb	r2, [r1, #1]!
   11cfc:	cmp	r2, #0
   11d00:	bne	11cec <__assert_fail@plt+0x810>
   11d04:	ldrb	r3, [r3]
   11d08:	cmp	r3, #61	; 0x3d
   11d0c:	cmpne	r3, #0
   11d10:	bne	11d34 <__assert_fail@plt+0x858>
   11d14:	ldr	r3, [pc, #804]	; 12040 <__assert_fail@plt+0xb64>
   11d18:	mov	r0, r7
   11d1c:	ldr	r1, [pc, #800]	; 12044 <__assert_fail@plt+0xb68>
   11d20:	bl	1494c <__assert_fail@plt+0x3470>
   11d24:	ldr	r3, [sl, #112]	; 0x70
   11d28:	orr	r3, r3, r0
   11d2c:	str	r3, [sl, #112]	; 0x70
   11d30:	b	117ac <__assert_fail@plt+0x2d0>
   11d34:	ldr	r0, [pc, #780]	; 12048 <__assert_fail@plt+0xb6c>
   11d38:	mov	r3, r9
   11d3c:	mov	r2, #105	; 0x69
   11d40:	ldrb	r1, [r3], #1
   11d44:	cmp	r1, r2
   11d48:	bne	11d88 <__assert_fail@plt+0x8ac>
   11d4c:	ldrb	r2, [r0, #1]!
   11d50:	cmp	r2, #0
   11d54:	bne	11d40 <__assert_fail@plt+0x864>
   11d58:	ldrb	r3, [r3]
   11d5c:	cmp	r3, #0
   11d60:	cmpne	r3, #61	; 0x3d
   11d64:	bne	11d88 <__assert_fail@plt+0x8ac>
   11d68:	ldr	r3, [pc, #732]	; 1204c <__assert_fail@plt+0xb70>
   11d6c:	mov	r0, r7
   11d70:	ldr	r1, [pc, #728]	; 12050 <__assert_fail@plt+0xb74>
   11d74:	bl	1494c <__assert_fail@plt+0x3470>
   11d78:	ldr	r3, [sl, #264]	; 0x108
   11d7c:	orr	r3, r3, r0
   11d80:	str	r3, [sl, #264]	; 0x108
   11d84:	b	117ac <__assert_fail@plt+0x2d0>
   11d88:	ldr	r0, [pc, #708]	; 12054 <__assert_fail@plt+0xb78>
   11d8c:	mov	r3, r9
   11d90:	mov	r2, #111	; 0x6f
   11d94:	ldrb	r1, [r3], #1
   11d98:	cmp	r1, r2
   11d9c:	bne	11ddc <__assert_fail@plt+0x900>
   11da0:	ldrb	r2, [r0, #1]!
   11da4:	cmp	r2, #0
   11da8:	bne	11d94 <__assert_fail@plt+0x8b8>
   11dac:	ldrb	r3, [r3]
   11db0:	cmp	r3, #0
   11db4:	cmpne	r3, #61	; 0x3d
   11db8:	bne	11ddc <__assert_fail@plt+0x900>
   11dbc:	ldr	r3, [pc, #660]	; 12058 <__assert_fail@plt+0xb7c>
   11dc0:	mov	r0, r7
   11dc4:	ldr	r1, [pc, #644]	; 12050 <__assert_fail@plt+0xb74>
   11dc8:	bl	1494c <__assert_fail@plt+0x3470>
   11dcc:	ldr	r3, [sl, #272]	; 0x110
   11dd0:	orr	r3, r3, r0
   11dd4:	str	r3, [sl, #272]	; 0x110
   11dd8:	b	117ac <__assert_fail@plt+0x2d0>
   11ddc:	ldr	r0, [pc, #632]	; 1205c <__assert_fail@plt+0xb80>
   11de0:	mov	r2, r9
   11de4:	mov	r3, #115	; 0x73
   11de8:	ldrb	r1, [r2], #1
   11dec:	cmp	r1, r3
   11df0:	bne	11e2c <__assert_fail@plt+0x950>
   11df4:	ldrb	r3, [r0, #1]!
   11df8:	cmp	r3, #0
   11dfc:	bne	11de8 <__assert_fail@plt+0x90c>
   11e00:	ldrb	r3, [r2]
   11e04:	cmp	r3, #0
   11e08:	cmpne	r3, #61	; 0x3d
   11e0c:	bne	11e2c <__assert_fail@plt+0x950>
   11e10:	mov	r0, r7
   11e14:	ldr	r3, [pc, #580]	; 12060 <__assert_fail@plt+0xb84>
   11e18:	mov	r2, #1
   11e1c:	ldr	r1, [pc, #576]	; 12064 <__assert_fail@plt+0xb88>
   11e20:	bl	1494c <__assert_fail@plt+0x3470>
   11e24:	str	r0, [fp, #8]
   11e28:	b	117ac <__assert_fail@plt+0x2d0>
   11e2c:	mov	r3, #0
   11e30:	add	r1, sp, #80	; 0x50
   11e34:	mov	r0, r7
   11e38:	str	r3, [sp, #80]	; 0x50
   11e3c:	bl	14250 <__assert_fail@plt+0x2d74>
   11e40:	ldr	lr, [pc, #544]	; 12068 <__assert_fail@plt+0xb8c>
   11e44:	mov	r2, r9
   11e48:	mov	r3, #105	; 0x69
   11e4c:	ldrb	ip, [r2], #1
   11e50:	cmp	ip, r3
   11e54:	bne	11ee8 <__assert_fail@plt+0xa0c>
   11e58:	ldrb	r3, [lr, #1]!
   11e5c:	cmp	r3, #0
   11e60:	bne	11e4c <__assert_fail@plt+0x970>
   11e64:	ldrb	r3, [r2]
   11e68:	cmp	r3, #0
   11e6c:	cmpne	r3, #61	; 0x3d
   11e70:	bne	11ee8 <__assert_fail@plt+0xa0c>
   11e74:	ldr	ip, [pc, #496]	; 1206c <__assert_fail@plt+0xb90>
   11e78:	mvn	r2, #-2147483647	; 0x80000001
   11e7c:	mov	r3, #0
   11e80:	cmp	r0, #1
   11e84:	sbcs	lr, r1, #0
   11e88:	blt	11ed8 <__assert_fail@plt+0x9fc>
   11e8c:	cmp	r2, r0
   11e90:	sbcs	r3, r3, r1
   11e94:	bge	12300 <__assert_fail@plt+0xe24>
   11e98:	mov	r4, #75	; 0x4b
   11e9c:	mov	r3, #1
   11ea0:	str	r3, [sp, #80]	; 0x50
   11ea4:	mov	r2, #5
   11ea8:	ldr	r1, [pc, #448]	; 12070 <__assert_fail@plt+0xb94>
   11eac:	mov	r0, #0
   11eb0:	bl	11230 <dcgettext@plt>
   11eb4:	mov	r5, r0
   11eb8:	mov	r0, r7
   11ebc:	bl	18bf8 <__assert_fail@plt+0x771c>
   11ec0:	mov	r3, r5
   11ec4:	mov	r1, r4
   11ec8:	ldr	r2, [pc, #420]	; 12074 <__assert_fail@plt+0xb98>
   11ecc:	str	r0, [sp]
   11ed0:	mov	r0, #1
   11ed4:	bl	13d54 <__assert_fail@plt+0x2878>
   11ed8:	mov	r3, #4
   11edc:	str	r3, [sp, #80]	; 0x50
   11ee0:	mov	r4, #0
   11ee4:	b	11ea4 <__assert_fail@plt+0x9c8>
   11ee8:	ldr	lr, [pc, #392]	; 12078 <__assert_fail@plt+0xb9c>
   11eec:	mov	r2, r9
   11ef0:	mov	r3, #111	; 0x6f
   11ef4:	b	11f04 <__assert_fail@plt+0xa28>
   11ef8:	ldrb	r3, [lr, #1]!
   11efc:	cmp	r3, #0
   11f00:	beq	120f4 <__assert_fail@plt+0xc18>
   11f04:	ldrb	ip, [r2], #1
   11f08:	cmp	ip, r3
   11f0c:	beq	11ef8 <__assert_fail@plt+0xa1c>
   11f10:	ldr	ip, [pc, #356]	; 1207c <__assert_fail@plt+0xba0>
   11f14:	mov	r2, r9
   11f18:	mov	r3, #98	; 0x62
   11f1c:	b	11f2c <__assert_fail@plt+0xa50>
   11f20:	ldrb	r3, [ip, #1]!
   11f24:	cmp	r3, #0
   11f28:	beq	12e44 <__assert_fail@plt+0x1968>
   11f2c:	ldrb	lr, [r2], #1
   11f30:	cmp	lr, r3
   11f34:	beq	11f20 <__assert_fail@plt+0xa44>
   11f38:	ldr	ip, [pc, #320]	; 12080 <__assert_fail@plt+0xba4>
   11f3c:	mov	r2, r9
   11f40:	mov	r3, #99	; 0x63
   11f44:	ldrb	lr, [r2], #1
   11f48:	cmp	lr, r3
   11f4c:	bne	11f78 <__assert_fail@plt+0xa9c>
   11f50:	ldrb	r3, [ip, #1]!
   11f54:	cmp	r3, #0
   11f58:	bne	11f44 <__assert_fail@plt+0xa68>
   11f5c:	ldrb	r3, [r2]
   11f60:	cmp	r3, #0
   11f64:	cmpne	r3, #61	; 0x3d
   11f68:	mvneq	r2, #-2147483648	; 0x80000000
   11f6c:	moveq	r3, #0
   11f70:	ldreq	ip, [pc, #268]	; 12084 <__assert_fail@plt+0xba8>
   11f74:	beq	11e80 <__assert_fail@plt+0x9a4>
   11f78:	ldr	ip, [pc, #264]	; 12088 <__assert_fail@plt+0xbac>
   11f7c:	mov	r2, r9
   11f80:	mov	r3, #115	; 0x73
   11f84:	b	11f94 <__assert_fail@plt+0xab8>
   11f88:	ldrb	r3, [ip, #1]!
   11f8c:	cmp	r3, #0
   11f90:	beq	13438 <__assert_fail@plt+0x1f5c>
   11f94:	ldrb	lr, [r2], #1
   11f98:	cmp	lr, r3
   11f9c:	beq	11f88 <__assert_fail@plt+0xaac>
   11fa0:	ldr	ip, [pc, #228]	; 1208c <__assert_fail@plt+0xbb0>
   11fa4:	mov	r3, r9
   11fa8:	mov	r2, #115	; 0x73
   11fac:	b	11fbc <__assert_fail@plt+0xae0>
   11fb0:	ldrb	r2, [ip, #1]!
   11fb4:	cmp	r2, #0
   11fb8:	beq	13450 <__assert_fail@plt+0x1f74>
   11fbc:	ldrb	lr, [r3], #1
   11fc0:	cmp	lr, r2
   11fc4:	beq	11fb0 <__assert_fail@plt+0xad4>
   11fc8:	ldr	ip, [pc, #192]	; 12090 <__assert_fail@plt+0xbb4>
   11fcc:	mov	r3, r9
   11fd0:	mov	r2, #99	; 0x63
   11fd4:	b	120d8 <__assert_fail@plt+0xbfc>
   11fd8:	blcc	fe6c47e0 <opterr@@GLIBC_2.4+0xfe696600>
   11fdc:	andeq	r0, r0, r0
   11fe0:	andeq	ip, r1, r8, ror #15
   11fe4:	andeq	lr, r2, ip, ror #4
   11fe8:	andeq	r3, r1, r8, lsl #15
   11fec:	andeq	ip, r1, r8, lsl #8
   11ff0:	strdeq	ip, [r1], -r8
   11ff4:	andeq	ip, r1, r0, asr #11
   11ff8:	andeq	r4, r1, r8, lsr r1
   11ffc:	andeq	lr, r2, r8, ror r1
   12000:	andeq	lr, r2, r8, ror #3
   12004:	andeq	ip, r1, ip, lsl r8
   12008:	andeq	ip, r1, r0, lsl r8
   1200c:	andeq	ip, r1, ip, lsr #16
   12010:	andeq	r4, r1, r0, ror #8
   12014:	andeq	fp, r1, r4, ror r8
   12018:	andeq	lr, r2, r0, asr r1
   1201c:	ldrdeq	lr, [r2], -r0
   12020:	andeq	ip, r1, r0, asr r8
   12024:	andseq	r1, r0, r0
   12028:	andeq	ip, r1, r0, asr #18
   1202c:	andeq	ip, r1, r4, ror #18
   12030:	andeq	ip, r1, r4, lsl #19
   12034:	andeq	r0, r1, r2
   12038:	andeq	ip, r1, r4, asr r8
   1203c:	andeq	ip, r1, r8, asr r8
   12040:	andeq	ip, r1, r0, ror #16
   12044:	andeq	fp, r1, r8, lsr #2
   12048:	andeq	ip, r1, r4, ror r8
   1204c:	andeq	ip, r1, ip, ror r8
   12050:	andeq	fp, r1, r8, lsr r2
   12054:	muleq	r1, r0, r8
   12058:	muleq	r1, r8, r8
   1205c:	andeq	ip, r1, ip, lsr #17
   12060:			; <UNDEFINED> instruction: 0x0001c8b4
   12064:	andeq	fp, r1, r8, ror #6
   12068:	andeq	ip, r1, ip, asr #17
   1206c:	andeq	lr, r2, r0, asr r2
   12070:	strdeq	ip, [r1], -r4
   12074:	andeq	ip, r1, r8, ror #12
   12078:	ldrdeq	ip, [r1], -r0
   1207c:	ldrdeq	ip, [r1], -r4
   12080:	ldrdeq	ip, [r1], -r8
   12084:	andeq	lr, r2, r8, lsl #6
   12088:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1208c:	andeq	ip, r1, r4, ror #17
   12090:	andeq	ip, r1, ip, ror #17
   12094:	andeq	ip, r1, r8, lsr r8
   12098:	andeq	lr, r2, ip, asr r2
   1209c:	andeq	lr, r2, r4, lsl r3
   120a0:	strdeq	fp, [r1], -r0
   120a4:	andeq	r4, r1, ip, lsl #26
   120a8:	andeq	lr, r2, r8, lsr #8
   120ac:	andeq	lr, r2, r8, lsl r4
   120b0:			; <UNDEFINED> instruction: 0x00014bbc
   120b4:			; <UNDEFINED> instruction: 0x000001b6
   120b8:	ldrdeq	ip, [r1], -r8
   120bc:	andeq	lr, r2, r0, lsr #8
   120c0:	andeq	ip, r1, r0, lsl #21
   120c4:	andeq	lr, r2, r8, lsr r4
   120c8:	andeq	lr, r2, r8, asr #8
   120cc:	ldrb	r2, [ip, #1]!
   120d0:	cmp	r2, #0
   120d4:	beq	133ec <__assert_fail@plt+0x1f10>
   120d8:	ldrb	lr, [r3], #1
   120dc:	cmp	lr, r2
   120e0:	beq	120cc <__assert_fail@plt+0xbf0>
   120e4:	mov	r2, #5
   120e8:	ldr	r1, [pc, #-92]	; 12094 <__assert_fail@plt+0xbb8>
   120ec:	mov	r0, #0
   120f0:	b	13548 <__assert_fail@plt+0x206c>
   120f4:	ldrb	r3, [r2]
   120f8:	cmp	r3, #0
   120fc:	cmpne	r3, #61	; 0x3d
   12100:	mvneq	r2, #-2147483647	; 0x80000001
   12104:	moveq	r3, #0
   12108:	ldreq	ip, [pc, #-120]	; 12098 <__assert_fail@plt+0xbbc>
   1210c:	beq	11e80 <__assert_fail@plt+0x9a4>
   12110:	b	11f10 <__assert_fail@plt+0xa34>
   12114:	tst	r7, #32
   12118:	beq	11a3c <__assert_fail@plt+0x560>
   1211c:	bl	11338 <__ctype_tolower_loc@plt>
   12120:	ldr	r3, [pc, #-140]	; 1209c <__assert_fail@plt+0xbc0>
   12124:	add	ip, r3, #255	; 0xff
   12128:	mov	r3, r4
   1212c:	ldr	r1, [r0]
   12130:	ldrb	r2, [r3, #1]
   12134:	ldrb	r2, [r1, r2, lsl #2]
   12138:	strb	r2, [r3, #1]!
   1213c:	cmp	r3, ip
   12140:	bne	12130 <__assert_fail@plt+0xc54>
   12144:	b	11a34 <__assert_fail@plt+0x558>
   12148:	tst	r5, #1
   1214c:	bne	1226c <__assert_fail@plt+0xd90>
   12150:	ldr	r3, [pc, #-172]	; 120ac <__assert_fail@plt+0xbd0>
   12154:	ldrd	r2, [r3]
   12158:	orrs	r3, r2, r3
   1215c:	bne	122f0 <__assert_fail@plt+0xe14>
   12160:	ldrd	r2, [fp, #32]
   12164:	mvn	r1, #-2147483648	; 0x80000000
   12168:	mvn	r0, #2
   1216c:	subs	r2, r2, #1
   12170:	sbc	r3, r3, #0
   12174:	cmp	r3, r1
   12178:	cmpeq	r2, r0
   1217c:	bls	122f0 <__assert_fail@plt+0xe14>
   12180:	orr	r3, r6, r5
   12184:	ands	r3, r3, #65536	; 0x10000
   12188:	bne	122f0 <__assert_fail@plt+0xe14>
   1218c:	strb	r3, [sl, #268]	; 0x10c
   12190:	ldr	r3, [pc, #-232]	; 120b0 <__assert_fail@plt+0xbd4>
   12194:	b	118d8 <__assert_fail@plt+0x3fc>
   12198:	tst	r7, #4
   1219c:	beq	11a80 <__assert_fail@plt+0x5a4>
   121a0:	ldr	r3, [pc, #-268]	; 1209c <__assert_fail@plt+0xbc0>
   121a4:	ldr	r1, [pc, #-268]	; 120a0 <__assert_fail@plt+0xbc4>
   121a8:	add	r2, r3, #255	; 0xff
   121ac:	ldrb	r3, [r4, #1]
   121b0:	add	r3, r1, r3
   121b4:	ldrb	r3, [r3, #1208]	; 0x4b8
   121b8:	strb	r3, [r4, #1]!
   121bc:	cmp	r4, r2
   121c0:	bne	121ac <__assert_fail@plt+0xcd0>
   121c4:	b	11a68 <__assert_fail@plt+0x58c>
   121c8:	ldrd	r0, [sp, #40]	; 0x28
   121cc:	mov	r2, r0
   121d0:	mov	r3, r1
   121d4:	orrs	r3, r2, r3
   121d8:	ldrne	r3, [pc, #-308]	; 120ac <__assert_fail@plt+0xbd0>
   121dc:	strdne	r0, [r3]
   121e0:	b	11854 <__assert_fail@plt+0x378>
   121e4:	orrs	r1, r2, r3
   121e8:	ldrne	r1, [pc, #-328]	; 120a8 <__assert_fail@plt+0xbcc>
   121ec:	strdne	r2, [r1]
   121f0:	b	118b4 <__assert_fail@plt+0x3d8>
   121f4:	cmp	r1, r3
   121f8:	cmpeq	r0, r2
   121fc:	strdne	r0, [fp, #32]
   12200:	b	118a0 <__assert_fail@plt+0x3c4>
   12204:	tst	r9, #512	; 0x200
   12208:	movne	r3, #0
   1220c:	moveq	r3, #512	; 0x200
   12210:	cmp	r4, #0
   12214:	orr	r8, r8, r3
   12218:	blt	130d4 <__assert_fail@plt+0x1bf8>
   1221c:	beq	11b60 <__assert_fail@plt+0x684>
   12220:	asr	r7, r4, #31
   12224:	mov	r2, r4
   12228:	mov	r3, r7
   1222c:	mvn	r0, #0
   12230:	mvn	r1, #-2147483648	; 0x80000000
   12234:	bl	1add8 <__assert_fail@plt+0x98fc>
   12238:	ldrd	r2, [sp, #48]	; 0x30
   1223c:	cmp	r0, r2
   12240:	sbcs	r3, r1, r3
   12244:	movlt	r3, #1
   12248:	movge	r3, #0
   1224c:	cmp	r3, #0
   12250:	beq	13168 <__assert_fail@plt+0x1c8c>
   12254:	ldrd	r0, [sp, #48]	; 0x30
   12258:	mul	r3, r4, r1
   1225c:	umull	r4, r5, r4, r0
   12260:	mla	r3, r0, r7, r3
   12264:	add	r5, r3, r5
   12268:	b	11bc8 <__assert_fail@plt+0x6ec>
   1226c:	strb	r3, [sl, #268]	; 0x10c
   12270:	ldr	r3, [pc, #-468]	; 120a4 <__assert_fail@plt+0xbc8>
   12274:	b	118d8 <__assert_fail@plt+0x3fc>
   12278:	ldr	r8, [sl, #116]	; 0x74
   1227c:	mov	r0, r2
   12280:	mov	r1, r3
   12284:	asr	r9, r8, #31
   12288:	mov	r2, r8
   1228c:	mov	r3, r9
   12290:	bl	1add8 <__assert_fail@plt+0x98fc>
   12294:	ldr	r7, [pc, #-500]	; 120a8 <__assert_fail@plt+0xbcc>
   12298:	mov	r2, r8
   1229c:	mov	r3, r9
   122a0:	strd	r0, [r7], #16
   122a4:	ldrd	r0, [sp, #48]	; 0x30
   122a8:	bl	1add8 <__assert_fail@plt+0x98fc>
   122ac:	strd	r2, [r7, #-8]
   122b0:	b	118b4 <__assert_fail@plt+0x3d8>
   122b4:	ldr	r8, [sl, #104]	; 0x68
   122b8:	mov	r0, r2
   122bc:	mov	r1, r3
   122c0:	asr	r9, r8, #31
   122c4:	mov	r2, r8
   122c8:	mov	r3, r9
   122cc:	bl	1add8 <__assert_fail@plt+0x98fc>
   122d0:	ldr	ip, [pc, #-556]	; 120ac <__assert_fail@plt+0xbd0>
   122d4:	mov	r2, r8
   122d8:	mov	r3, r9
   122dc:	strd	r0, [ip]
   122e0:	ldrd	r0, [sp, #40]	; 0x28
   122e4:	bl	1add8 <__assert_fail@plt+0x98fc>
   122e8:	str	r2, [sl, #568]	; 0x238
   122ec:	b	11854 <__assert_fail@plt+0x378>
   122f0:	mov	r3, #1
   122f4:	strb	r3, [sl, #268]	; 0x10c
   122f8:	ldr	r3, [pc, #-592]	; 120b0 <__assert_fail@plt+0xbd4>
   122fc:	b	118d8 <__assert_fail@plt+0x3fc>
   12300:	ldr	r3, [sp, #80]	; 0x50
   12304:	cmp	r3, #0
   12308:	bne	13418 <__assert_fail@plt+0x1f3c>
   1230c:	str	r0, [ip]
   12310:	b	117ac <__assert_fail@plt+0x2d0>
   12314:	orr	r2, r8, #1
   12318:	ldr	r3, [pc, #-620]	; 120b4 <__assert_fail@plt+0xbd8>
   1231c:	ldr	r1, [sl, #128]	; 0x80
   12320:	mov	r0, #1
   12324:	bl	14d68 <__assert_fail@plt+0x388c>
   12328:	cmp	r0, #0
   1232c:	bge	11bf8 <__assert_fail@plt+0x71c>
   12330:	ldr	r3, [sp, #32]
   12334:	ldr	r1, [pc, #-644]	; 120b8 <__assert_fail@plt+0xbdc>
   12338:	mov	r2, #5
   1233c:	mov	r0, #0
   12340:	ldr	r4, [r3]
   12344:	bl	11230 <dcgettext@plt>
   12348:	ldr	r1, [sl, #128]	; 0x80
   1234c:	mov	r5, r0
   12350:	mov	r0, #4
   12354:	bl	189b8 <__assert_fail@plt+0x74dc>
   12358:	mov	r2, r5
   1235c:	mov	r1, r4
   12360:	mov	r3, r0
   12364:	mov	r0, #1
   12368:	bl	13d54 <__assert_fail@plt+0x2878>
   1236c:	ldr	r3, [sl, #568]	; 0x238
   12370:	cmp	r3, #0
   12374:	beq	1247c <__assert_fail@plt+0xfa0>
   12378:	ldr	r7, [sl, #104]	; 0x68
   1237c:	cmp	r7, #0
   12380:	blt	12fd0 <__assert_fail@plt+0x1af4>
   12384:	bne	11c5c <__assert_fail@plt+0x780>
   12388:	mov	r2, r4
   1238c:	mov	r3, r5
   12390:	mov	r8, r4
   12394:	mov	r9, r5
   12398:	ldr	ip, [sl, #568]	; 0x238
   1239c:	cmp	ip, #0
   123a0:	blt	131f4 <__assert_fail@plt+0x1d18>
   123a4:	mvn	r0, #0
   123a8:	subs	r0, r0, r2
   123ac:	mvn	r1, #-2147483648	; 0x80000000
   123b0:	sbc	r1, r1, r3
   123b4:	asr	r3, ip, #31
   123b8:	cmp	r0, ip
   123bc:	sbcs	r3, r1, r3
   123c0:	movlt	r3, #1
   123c4:	movge	r3, #0
   123c8:	cmp	r3, #0
   123cc:	beq	131f4 <__assert_fail@plt+0x1d18>
   123d0:	ldr	r3, [sl, #568]	; 0x238
   123d4:	mov	r6, #1
   123d8:	adds	r8, r8, r3
   123dc:	adc	r9, r9, r3, asr #31
   123e0:	ldr	r1, [pc, #-812]	; 120bc <__assert_fail@plt+0xbe0>
   123e4:	mov	r3, r5
   123e8:	mov	r2, r4
   123ec:	str	r1, [sp, #4]
   123f0:	str	r7, [sp]
   123f4:	ldr	r1, [sl, #124]	; 0x7c
   123f8:	mov	r0, #0
   123fc:	ldrd	r4, [sl, #8]
   12400:	bl	15500 <__assert_fail@plt+0x4024>
   12404:	orrs	r3, r0, r1
   12408:	bne	12438 <__assert_fail@plt+0xf5c>
   1240c:	ldrd	r2, [sl, #8]
   12410:	cmp	r2, #0
   12414:	sbcs	r1, r3, #0
   12418:	blt	1247c <__assert_fail@plt+0xfa0>
   1241c:	cmp	r6, #0
   12420:	bne	12438 <__assert_fail@plt+0xf5c>
   12424:	subs	r2, r2, r4
   12428:	sbc	r3, r3, r5
   1242c:	cmp	r3, r9
   12430:	cmpeq	r2, r8
   12434:	beq	1247c <__assert_fail@plt+0xfa0>
   12438:	ldr	r3, [fp, #8]
   1243c:	cmp	r3, #1
   12440:	beq	1247c <__assert_fail@plt+0xfa0>
   12444:	mov	r2, #5
   12448:	ldr	r1, [pc, #-912]	; 120c0 <__assert_fail@plt+0xbe4>
   1244c:	mov	r0, #0
   12450:	bl	11230 <dcgettext@plt>
   12454:	ldr	r2, [sl, #124]	; 0x7c
   12458:	mov	r1, #3
   1245c:	mov	r4, r0
   12460:	mov	r0, #0
   12464:	bl	18a74 <__assert_fail@plt+0x7598>
   12468:	mov	r1, #0
   1246c:	mov	r2, r4
   12470:	mov	r3, r0
   12474:	mov	r0, r1
   12478:	bl	13d54 <__assert_fail@plt+0x2878>
   1247c:	ldr	r3, [sp, #56]	; 0x38
   12480:	ldr	r7, [pc, #-964]	; 120c4 <__assert_fail@plt+0xbe8>
   12484:	ldrd	r2, [r3]
   12488:	orrs	r1, r2, r3
   1248c:	bne	1249c <__assert_fail@plt+0xfc0>
   12490:	ldrd	r0, [r7, #-8]
   12494:	orrs	r1, r0, r1
   12498:	beq	124dc <__assert_fail@plt+0x1000>
   1249c:	ldr	r1, [sl, #116]	; 0x74
   124a0:	ldr	ip, [r7, #-8]
   124a4:	add	r0, sp, #80	; 0x50
   124a8:	str	r0, [sp, #4]
   124ac:	str	r1, [sp]
   124b0:	mov	r0, #1
   124b4:	ldr	r1, [sl, #128]	; 0x80
   124b8:	str	ip, [sp, #80]	; 0x50
   124bc:	bl	15500 <__assert_fail@plt+0x4024>
   124c0:	mov	r4, r0
   124c4:	mov	r5, r1
   124c8:	orrs	r3, r4, r5
   124cc:	bne	12d98 <__assert_fail@plt+0x18bc>
   124d0:	ldr	r2, [sp, #80]	; 0x50
   124d4:	cmp	r2, #0
   124d8:	bne	12fb4 <__assert_fail@plt+0x1ad8>
   124dc:	ldrd	r2, [fp, #32]
   124e0:	orrs	r3, r2, r3
   124e4:	bne	124fc <__assert_fail@plt+0x1020>
   124e8:	ldr	r3, [sl, #572]	; 0x23c
   124ec:	cmp	r3, #0
   124f0:	ldreq	r3, [sp, #40]	; 0x28
   124f4:	streq	r3, [sp, #48]	; 0x30
   124f8:	beq	12b18 <__assert_fail@plt+0x163c>
   124fc:	bl	141c0 <__assert_fail@plt+0x2ce4>
   12500:	bl	14200 <__assert_fail@plt+0x2d24>
   12504:	mvn	r3, #0
   12508:	str	r3, [sp, #56]	; 0x38
   1250c:	ldr	r3, [sp, #40]	; 0x28
   12510:	mov	r9, r3
   12514:	str	r3, [sp, #48]	; 0x30
   12518:	ldr	r3, [fp, #8]
   1251c:	cmp	r3, #4
   12520:	beq	1268c <__assert_fail@plt+0x11b0>
   12524:	ldr	r8, [sl, #572]	; 0x23c
   12528:	ldrd	r4, [fp, #32]
   1252c:	ldrd	r6, [sl, #56]	; 0x38
   12530:	ldrd	r0, [sl, #64]	; 0x40
   12534:	adds	ip, r8, #0
   12538:	movne	ip, #1
   1253c:	adds	r2, r4, ip
   12540:	adc	r3, r5, #0
   12544:	adds	r6, r6, r0
   12548:	adc	r7, r7, r1
   1254c:	cmp	r6, r2
   12550:	sbcs	r3, r7, r3
   12554:	bge	12c50 <__assert_fail@plt+0x1774>
   12558:	ldr	r2, [sl, #112]	; 0x70
   1255c:	and	r3, r2, #1280	; 0x500
   12560:	cmp	r3, #1280	; 0x500
   12564:	ldr	r3, [sl, #108]	; 0x6c
   12568:	beq	1291c <__assert_fail@plt+0x1440>
   1256c:	cmp	r6, r4
   12570:	sbcs	r2, r7, r5
   12574:	movge	r1, r3
   12578:	movlt	r1, r3
   1257c:	movge	r2, r8
   12580:	ldrge	r3, [sl, #296]	; 0x128
   12584:	ldrlt	r3, [sl, #296]	; 0x128
   12588:	ldrlt	r2, [sl, #104]	; 0x68
   1258c:	mov	r0, #0
   12590:	blx	r3
   12594:	cmp	r0, #0
   12598:	mov	r5, r0
   1259c:	ble	12728 <__assert_fail@plt+0x124c>
   125a0:	asr	r7, r0, #31
   125a4:	mov	r1, r7
   125a8:	bl	137b0 <__assert_fail@plt+0x22d4>
   125ac:	ldrb	r3, [sl, #592]	; 0x250
   125b0:	cmp	r3, #0
   125b4:	bne	12948 <__assert_fail@plt+0x146c>
   125b8:	ldr	r2, [sl, #104]	; 0x68
   125bc:	cmp	r5, r2
   125c0:	bge	12840 <__assert_fail@plt+0x1364>
   125c4:	ldrd	r0, [sl, #56]	; 0x38
   125c8:	ldr	r3, [sl, #112]	; 0x70
   125cc:	adds	r0, r0, #1
   125d0:	adc	r1, r1, #0
   125d4:	tst	r3, #1024	; 0x400
   125d8:	strd	r0, [sl, #56]	; 0x38
   125dc:	moveq	r9, r5
   125e0:	beq	12610 <__assert_fail@plt+0x1134>
   125e4:	tst	r3, #256	; 0x100
   125e8:	bne	12608 <__assert_fail@plt+0x112c>
   125ec:	ldr	r0, [sl, #108]	; 0x6c
   125f0:	ands	r3, r3, #24
   125f4:	moveq	r1, r3
   125f8:	movne	r1, #32
   125fc:	sub	r2, r2, r5
   12600:	add	r0, r0, r5
   12604:	bl	113d4 <memset@plt>
   12608:	mov	r9, r5
   1260c:	ldr	r5, [sl, #104]	; 0x68
   12610:	ldr	r0, [sl, #108]	; 0x6c
   12614:	ldr	r1, [sl, #120]	; 0x78
   12618:	cmp	r0, r1
   1261c:	beq	12864 <__assert_fail@plt+0x1388>
   12620:	ldrb	r3, [sl, #593]	; 0x251
   12624:	cmp	r3, #0
   12628:	beq	128a4 <__assert_fail@plt+0x13c8>
   1262c:	cmp	r5, #0
   12630:	beq	128a4 <__assert_fail@plt+0x13c8>
   12634:	add	ip, r0, r5
   12638:	mov	r3, r0
   1263c:	ldrb	r2, [r3]
   12640:	add	r2, sl, r2
   12644:	ldrb	r2, [r2, #300]	; 0x12c
   12648:	strb	r2, [r3], #1
   1264c:	cmp	r3, ip
   12650:	bne	1263c <__assert_fail@plt+0x1160>
   12654:	ldr	r2, [sl, #112]	; 0x70
   12658:	tst	r2, #128	; 0x80
   1265c:	bne	128b8 <__assert_fail@plt+0x13dc>
   12660:	tst	r2, #8
   12664:	bne	1293c <__assert_fail@plt+0x1460>
   12668:	tst	r2, #16
   1266c:	moveq	r7, r0
   12670:	moveq	r0, r1
   12674:	beq	126e4 <__assert_fail@plt+0x1208>
   12678:	mov	r1, r5
   1267c:	bl	153d4 <__assert_fail@plt+0x3ef8>
   12680:	ldr	r3, [fp, #8]
   12684:	cmp	r3, #4
   12688:	bne	12524 <__assert_fail@plt+0x1048>
   1268c:	bl	15f28 <__assert_fail@plt+0x4a4c>
   12690:	ldr	r3, [pc, #-1488]	; 120c8 <__assert_fail@plt+0xbec>
   12694:	ldrd	r2, [r3, #-8]
   12698:	cmp	r0, r2
   1269c:	sbcs	r3, r1, r3
   126a0:	blt	12524 <__assert_fail@plt+0x1048>
   126a4:	bl	13814 <__assert_fail@plt+0x2338>
   126a8:	ldr	r3, [pc, #-1512]	; 120c8 <__assert_fail@plt+0xbec>
   126ac:	add	r1, pc, #932	; 0x3a4
   126b0:	ldrd	r0, [r1]
   126b4:	ldrd	r2, [r3, #-8]
   126b8:	adds	r0, r0, r2
   126bc:	adc	r1, r1, r3
   126c0:	mov	r3, r1
   126c4:	ldr	r1, [pc, #916]	; 12a60 <__assert_fail@plt+0x1584>
   126c8:	mov	r2, r0
   126cc:	strd	r2, [r1, #-8]
   126d0:	b	12524 <__assert_fail@plt+0x1048>
   126d4:	bl	1522c <__assert_fail@plt+0x3d50>
   126d8:	cmp	r5, #0
   126dc:	beq	12518 <__assert_fail@plt+0x103c>
   126e0:	ldr	r0, [sl, #120]	; 0x78
   126e4:	ldr	r6, [sl, #280]	; 0x118
   126e8:	ldr	r4, [sl, #116]	; 0x74
   126ec:	add	r0, r0, r6
   126f0:	sub	r4, r4, r6
   126f4:	cmp	r4, r5
   126f8:	movge	r4, r5
   126fc:	mov	r1, r7
   12700:	mov	r2, r4
   12704:	bl	111e8 <memcpy@plt>
   12708:	ldr	r3, [sl, #116]	; 0x74
   1270c:	add	r6, r6, r4
   12710:	cmp	r6, r3
   12714:	sub	r5, r5, r4
   12718:	str	r6, [sl, #280]	; 0x118
   1271c:	add	r7, r7, r4
   12720:	blt	126d8 <__assert_fail@plt+0x11fc>
   12724:	b	126d4 <__assert_fail@plt+0x11f8>
   12728:	beq	12c18 <__assert_fail@plt+0x173c>
   1272c:	ldr	r3, [sl, #112]	; 0x70
   12730:	tst	r3, #256	; 0x100
   12734:	beq	12744 <__assert_fail@plt+0x1268>
   12738:	ldr	r3, [fp, #8]
   1273c:	cmp	r3, #1
   12740:	beq	1278c <__assert_fail@plt+0x12b0>
   12744:	ldr	r3, [sp, #32]
   12748:	mov	r2, #5
   1274c:	ldr	r1, [pc, #784]	; 12a64 <__assert_fail@plt+0x1588>
   12750:	mov	r0, #0
   12754:	ldr	r4, [r3]
   12758:	bl	11230 <dcgettext@plt>
   1275c:	ldr	r1, [sl, #124]	; 0x7c
   12760:	mov	r5, r0
   12764:	mov	r0, #4
   12768:	bl	189b8 <__assert_fail@plt+0x74dc>
   1276c:	mov	r2, r5
   12770:	mov	r1, r4
   12774:	mov	r3, r0
   12778:	mov	r0, #0
   1277c:	bl	13d54 <__assert_fail@plt+0x2878>
   12780:	ldr	r3, [sl, #112]	; 0x70
   12784:	tst	r3, #256	; 0x100
   12788:	beq	1315c <__assert_fail@plt+0x1c80>
   1278c:	bl	13bf8 <__assert_fail@plt+0x271c>
   12790:	ldr	r4, [sl, #104]	; 0x68
   12794:	mov	r0, #0
   12798:	sub	r4, r4, r9
   1279c:	mov	r2, r4
   127a0:	asr	r5, r4, #31
   127a4:	mov	r3, r5
   127a8:	bl	13de8 <__assert_fail@plt+0x290c>
   127ac:	ldrb	r3, [sl, #98]	; 0x62
   127b0:	cmp	r3, #0
   127b4:	bne	1295c <__assert_fail@plt+0x1480>
   127b8:	ldr	r4, [sl, #596]	; 0x254
   127bc:	cmp	r4, #29
   127c0:	beq	1281c <__assert_fail@plt+0x1340>
   127c4:	ldr	r3, [sp, #32]
   127c8:	str	r4, [r3]
   127cc:	mov	r2, #5
   127d0:	ldr	r1, [pc, #656]	; 12a68 <__assert_fail@plt+0x158c>
   127d4:	mov	r0, #0
   127d8:	bl	11230 <dcgettext@plt>
   127dc:	ldr	r2, [sl, #124]	; 0x7c
   127e0:	mov	r1, #3
   127e4:	mov	r5, r0
   127e8:	mov	r0, #0
   127ec:	bl	18a74 <__assert_fail@plt+0x7598>
   127f0:	mov	r2, r5
   127f4:	mov	r1, r4
   127f8:	mov	r3, r0
   127fc:	mov	r0, #0
   12800:	bl	13d54 <__assert_fail@plt+0x2878>
   12804:	mov	r3, #29
   12808:	mov	r2, #0
   1280c:	str	r3, [sl, #596]	; 0x254
   12810:	mov	r3, #1
   12814:	strb	r2, [sl, #98]	; 0x62
   12818:	str	r3, [sp, #48]	; 0x30
   1281c:	ldr	r2, [sl, #112]	; 0x70
   12820:	clz	r3, r9
   12824:	lsr	r3, r3, #5
   12828:	ands	r3, r3, r2, lsr #10
   1282c:	beq	12518 <__assert_fail@plt+0x103c>
   12830:	ldr	r5, [sp, #40]	; 0x28
   12834:	ldr	r2, [sl, #104]	; 0x68
   12838:	cmp	r5, r2
   1283c:	blt	125c4 <__assert_fail@plt+0x10e8>
   12840:	ldrd	r2, [sl, #64]	; 0x40
   12844:	ldr	r0, [sl, #108]	; 0x6c
   12848:	ldr	r1, [sl, #120]	; 0x78
   1284c:	adds	r2, r2, #1
   12850:	adc	r3, r3, #0
   12854:	cmp	r0, r1
   12858:	ldr	r9, [sp, #40]	; 0x28
   1285c:	strd	r2, [sl, #64]	; 0x40
   12860:	bne	12620 <__assert_fail@plt+0x1144>
   12864:	mov	r1, r5
   12868:	bl	14ee0 <__assert_fail@plt+0x3a04>
   1286c:	ldrd	r2, [sl, #16]
   12870:	adds	r2, r2, r0
   12874:	adc	r3, r3, r0, asr #31
   12878:	cmp	r0, r5
   1287c:	strd	r2, [sl, #16]
   12880:	bne	12ea0 <__assert_fail@plt+0x19c4>
   12884:	ldr	r3, [sl, #104]	; 0x68
   12888:	cmp	r3, r5
   1288c:	beq	12ff0 <__assert_fail@plt+0x1b14>
   12890:	ldrd	r2, [sl, #40]	; 0x28
   12894:	adds	r2, r2, #1
   12898:	adc	r3, r3, #0
   1289c:	strd	r2, [sl, #40]	; 0x28
   128a0:	b	12518 <__assert_fail@plt+0x103c>
   128a4:	ldr	r2, [sl, #112]	; 0x70
   128a8:	tst	r2, #128	; 0x80
   128ac:	beq	12660 <__assert_fail@plt+0x1184>
   128b0:	cmp	r5, #0
   128b4:	beq	12660 <__assert_fail@plt+0x1184>
   128b8:	ldr	r3, [sp, #56]	; 0x38
   128bc:	mvn	ip, r3
   128c0:	and	r3, r5, #1
   128c4:	lsr	ip, ip, #31
   128c8:	cmp	ip, r3
   128cc:	subne	r5, r5, #1
   128d0:	mvneq	lr, #0
   128d4:	ldrbne	lr, [r0, r5]
   128d8:	cmp	r5, #1
   128dc:	movgt	r3, r5
   128e0:	ble	128fc <__assert_fail@plt+0x1420>
   128e4:	add	ip, r0, r3
   128e8:	ldrb	ip, [ip, #-2]
   128ec:	strb	ip, [r0, r3]
   128f0:	sub	r3, r3, #2
   128f4:	cmp	r3, #1
   128f8:	bgt	128e4 <__assert_fail@plt+0x1408>
   128fc:	ldr	r3, [sp, #56]	; 0x38
   12900:	cmn	r3, #1
   12904:	beq	130c8 <__assert_fail@plt+0x1bec>
   12908:	ldrb	r3, [sp, #56]	; 0x38
   1290c:	add	r5, r5, #1
   12910:	str	lr, [sp, #56]	; 0x38
   12914:	strb	r3, [r0, #1]
   12918:	b	12660 <__assert_fail@plt+0x1184>
   1291c:	ands	r2, r2, #24
   12920:	moveq	r1, r2
   12924:	mov	r0, r3
   12928:	movne	r1, #32
   1292c:	ldr	r2, [sl, #104]	; 0x68
   12930:	bl	113d4 <memset@plt>
   12934:	mov	r3, r0
   12938:	b	1256c <__assert_fail@plt+0x1090>
   1293c:	mov	r1, r5
   12940:	bl	152dc <__assert_fail@plt+0x3e00>
   12944:	b	12518 <__assert_fail@plt+0x103c>
   12948:	mov	r2, r0
   1294c:	mov	r3, r7
   12950:	mov	r0, #0
   12954:	bl	13de8 <__assert_fail@plt+0x290c>
   12958:	b	125b8 <__assert_fail@plt+0x10dc>
   1295c:	mov	r0, r4
   12960:	mov	r1, r5
   12964:	bl	137b0 <__assert_fail@plt+0x22d4>
   12968:	ldrd	r6, [sl, #8]
   1296c:	cmp	r6, #0
   12970:	sbcs	r3, r7, #0
   12974:	blt	12f28 <__assert_fail@plt+0x1a4c>
   12978:	mov	r3, #1
   1297c:	str	r3, [sp]
   12980:	mov	r2, #0
   12984:	mov	r3, #0
   12988:	mov	r0, #0
   1298c:	bl	112a8 <lseek64@plt>
   12990:	cmp	r0, #0
   12994:	sbcs	r3, r1, #0
   12998:	blt	12a48 <__assert_fail@plt+0x156c>
   1299c:	cmp	r7, r1
   129a0:	cmpeq	r6, r0
   129a4:	beq	1281c <__assert_fail@plt+0x1340>
   129a8:	subs	r6, r6, r0
   129ac:	sbc	r7, r7, r1
   129b0:	cmp	r4, r6
   129b4:	sbcs	r3, r5, r7
   129b8:	movlt	r3, #1
   129bc:	movge	r3, #0
   129c0:	orrs	r3, r3, r7, lsr #31
   129c4:	beq	129f4 <__assert_fail@plt+0x1518>
   129c8:	ldr	r3, [fp, #8]
   129cc:	cmp	r3, #1
   129d0:	beq	129f4 <__assert_fail@plt+0x1518>
   129d4:	mov	r2, #5
   129d8:	ldr	r1, [pc, #140]	; 12a6c <__assert_fail@plt+0x1590>
   129dc:	mov	r0, #0
   129e0:	bl	11230 <dcgettext@plt>
   129e4:	mov	r1, #0
   129e8:	mov	r2, r0
   129ec:	mov	r0, r1
   129f0:	bl	13d54 <__assert_fail@plt+0x2878>
   129f4:	mov	r1, #1
   129f8:	mov	r3, r7
   129fc:	mov	r2, r6
   12a00:	str	r1, [sp]
   12a04:	mov	r0, #0
   12a08:	bl	112a8 <lseek64@plt>
   12a0c:	cmp	r0, #0
   12a10:	sbcs	r3, r1, #0
   12a14:	bge	1281c <__assert_fail@plt+0x1340>
   12a18:	ldr	r3, [sp, #32]
   12a1c:	ldr	r4, [r3]
   12a20:	cmp	r4, #0
   12a24:	bne	127cc <__assert_fail@plt+0x12f0>
   12a28:	mov	r2, #5
   12a2c:	ldr	r1, [pc, #60]	; 12a70 <__assert_fail@plt+0x1594>
   12a30:	mov	r0, r4
   12a34:	bl	11230 <dcgettext@plt>
   12a38:	mov	r1, r4
   12a3c:	mov	r2, r0
   12a40:	mov	r0, r4
   12a44:	bl	13d54 <__assert_fail@plt+0x2878>
   12a48:	ldr	r3, [sp, #32]
   12a4c:	ldr	r4, [r3]
   12a50:	b	127cc <__assert_fail@plt+0x12f0>
   12a54:	nop			; (mov r0, r0)
   12a58:	blcc	fe6c5260 <opterr@@GLIBC_2.4+0xfe697080>
   12a5c:	andeq	r0, r0, r0
   12a60:	andeq	lr, r2, r8, asr #8
   12a64:			; <UNDEFINED> instruction: 0x0001c7bc
   12a68:	andeq	ip, r1, ip, lsr #15
   12a6c:	andeq	ip, r1, ip, asr #21
   12a70:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12a74:	muleq	r1, r8, r7
   12a78:	andeq	ip, r1, ip, ror r7
   12a7c:	andeq	ip, r1, r4, lsr #22
   12a80:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12a84:	andeq	ip, r1, r4, lsr #21
   12a88:	andeq	ip, r1, r8, lsr fp
   12a8c:	andeq	ip, r1, r8, asr #19
   12a90:	ldrdeq	ip, [r1], -r8
   12a94:	andeq	lr, r2, r8, lsr r4
   12a98:	andeq	ip, r1, ip, asr #20
   12a9c:	andeq	ip, r1, ip, ror #19
   12aa0:	andeq	lr, r2, r8, lsr #8
   12aa4:	andeq	lr, r2, ip, ror #4
   12aa8:	andeq	ip, r1, ip, lsl #14
   12aac:	andeq	ip, r1, r4, lsr #19
   12ab0:	andeq	ip, r1, r8, lsr r8
   12ab4:	muleq	r1, r8, r8
   12ab8:	ldrdeq	ip, [r1], -r0
   12abc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12ac0:	andeq	ip, r1, r0, lsl r9
   12ac4:	andeq	ip, r1, ip, ror r8
   12ac8:	andeq	ip, r1, r4, lsl #18
   12acc:	andeq	ip, r1, r8, ror #12
   12ad0:	andeq	ip, r1, ip, lsl #15
   12ad4:	ldr	r3, [sp, #32]
   12ad8:	mov	r2, #5
   12adc:	ldr	r1, [pc, #-20]	; 12ad0 <__assert_fail@plt+0x15f4>
   12ae0:	mov	r0, #0
   12ae4:	ldr	r4, [r3]
   12ae8:	bl	11230 <dcgettext@plt>
   12aec:	ldr	r1, [sl, #128]	; 0x80
   12af0:	mov	r5, r0
   12af4:	mov	r0, #4
   12af8:	bl	189b8 <__assert_fail@plt+0x74dc>
   12afc:	mov	r2, r5
   12b00:	mov	r1, r4
   12b04:	mov	r3, r0
   12b08:	mov	r0, #0
   12b0c:	bl	13d54 <__assert_fail@plt+0x2878>
   12b10:	mov	r3, #1
   12b14:	str	r3, [sp, #48]	; 0x30
   12b18:	bl	150dc <__assert_fail@plt+0x3c00>
   12b1c:	ldrd	r2, [fp, #32]
   12b20:	ldr	r5, [sp, #48]	; 0x30
   12b24:	cmp	r0, #0
   12b28:	movne	r5, r0
   12b2c:	orrs	r1, r2, r3
   12b30:	bne	12bb4 <__assert_fail@plt+0x16d8>
   12b34:	ldr	r0, [sl, #572]	; 0x23c
   12b38:	cmp	r0, #0
   12b3c:	bne	12bb4 <__assert_fail@plt+0x16d8>
   12b40:	ldrb	r1, [sl, #592]	; 0x250
   12b44:	cmp	r1, #0
   12b48:	bne	13004 <__assert_fail@plt+0x1b28>
   12b4c:	ldrb	r3, [sl, #277]	; 0x115
   12b50:	cmp	r3, #0
   12b54:	beq	12c04 <__assert_fail@plt+0x1728>
   12b58:	mov	r2, #0
   12b5c:	mov	r3, #0
   12b60:	mov	r0, #1
   12b64:	bl	13de8 <__assert_fail@plt+0x290c>
   12b68:	subs	r4, r0, #0
   12b6c:	bne	12c04 <__assert_fail@plt+0x1728>
   12b70:	ldr	r3, [sp, #32]
   12b74:	mov	r2, #5
   12b78:	ldr	r1, [pc, #-248]	; 12a88 <__assert_fail@plt+0x15ac>
   12b7c:	ldr	r5, [r3]
   12b80:	bl	11230 <dcgettext@plt>
   12b84:	ldr	r2, [sl, #128]	; 0x80
   12b88:	mov	r1, #3
   12b8c:	mov	r6, r0
   12b90:	mov	r0, r4
   12b94:	bl	18a74 <__assert_fail@plt+0x7598>
   12b98:	mov	r1, r5
   12b9c:	mov	r2, r6
   12ba0:	mov	r5, #1
   12ba4:	mov	r3, r0
   12ba8:	mov	r0, r4
   12bac:	bl	13d54 <__assert_fail@plt+0x2878>
   12bb0:	b	12c04 <__assert_fail@plt+0x1728>
   12bb4:	ldrb	r3, [sl, #592]	; 0x250
   12bb8:	cmp	r3, #0
   12bbc:	bne	12bcc <__assert_fail@plt+0x16f0>
   12bc0:	ldrb	r3, [sl, #96]	; 0x60
   12bc4:	cmp	r3, #0
   12bc8:	beq	12bdc <__assert_fail@plt+0x1700>
   12bcc:	mov	r2, #0
   12bd0:	mov	r3, #0
   12bd4:	mov	r0, #0
   12bd8:	bl	13de8 <__assert_fail@plt+0x290c>
   12bdc:	ldrb	r3, [sl, #277]	; 0x115
   12be0:	cmp	r3, #0
   12be4:	bne	12bf4 <__assert_fail@plt+0x1718>
   12be8:	ldrb	r3, [sl, #97]	; 0x61
   12bec:	cmp	r3, #0
   12bf0:	beq	12c04 <__assert_fail@plt+0x1728>
   12bf4:	mov	r2, #0
   12bf8:	mov	r3, #0
   12bfc:	mov	r0, #1
   12c00:	bl	13de8 <__assert_fail@plt+0x290c>
   12c04:	bl	14b28 <__assert_fail@plt+0x364c>
   12c08:	bl	14a58 <__assert_fail@plt+0x357c>
   12c0c:	bl	13bf8 <__assert_fail@plt+0x271c>
   12c10:	mov	r0, r5
   12c14:	bl	11374 <exit@plt>
   12c18:	ldrb	r3, [sl, #277]	; 0x115
   12c1c:	ldrb	r2, [sl, #96]	; 0x60
   12c20:	ldrb	r1, [sl, #592]	; 0x250
   12c24:	cmp	r3, #0
   12c28:	ldrne	r3, [sl, #112]	; 0x70
   12c2c:	orr	r2, r2, r1
   12c30:	strb	r2, [sl, #96]	; 0x60
   12c34:	lsrne	r3, r3, #9
   12c38:	ldrb	r2, [sl, #97]	; 0x61
   12c3c:	eorne	r3, r3, #1
   12c40:	andne	r3, r3, #1
   12c44:	orr	r3, r3, r2
   12c48:	and	r3, r3, #1
   12c4c:	strb	r3, [sl, #97]	; 0x61
   12c50:	ldr	r3, [sp, #56]	; 0x38
   12c54:	cmn	r3, #1
   12c58:	beq	12c9c <__assert_fail@plt+0x17c0>
   12c5c:	ldr	r2, [sl, #112]	; 0x70
   12c60:	uxtb	r3, r3
   12c64:	tst	r2, #8
   12c68:	strb	r3, [sp, #80]	; 0x50
   12c6c:	bne	134c8 <__assert_fail@plt+0x1fec>
   12c70:	tst	r2, #16
   12c74:	bne	13054 <__assert_fail@plt+0x1b78>
   12c78:	ldr	r1, [sl, #280]	; 0x118
   12c7c:	ldr	r0, [sl, #120]	; 0x78
   12c80:	add	r2, r1, #1
   12c84:	str	r2, [sl, #280]	; 0x118
   12c88:	strb	r3, [r0, r1]
   12c8c:	ldr	r3, [sl, #116]	; 0x74
   12c90:	cmp	r2, r3
   12c94:	blt	12c9c <__assert_fail@plt+0x17c0>
   12c98:	bl	1522c <__assert_fail@plt+0x3d50>
   12c9c:	ldr	r3, [sl, #112]	; 0x70
   12ca0:	tst	r3, #8
   12ca4:	beq	12d08 <__assert_fail@plt+0x182c>
   12ca8:	ldr	r4, [sl, #284]	; 0x11c
   12cac:	cmp	r4, #0
   12cb0:	ble	12d08 <__assert_fail@plt+0x182c>
   12cb4:	ldr	r3, [sl, #288]	; 0x120
   12cb8:	cmp	r4, r3
   12cbc:	ldrlt	r3, [sl, #280]	; 0x118
   12cc0:	blt	12cd8 <__assert_fail@plt+0x17fc>
   12cc4:	b	13090 <__assert_fail@plt+0x1bb4>
   12cc8:	ldr	r2, [sl, #288]	; 0x120
   12ccc:	add	r4, r4, #1
   12cd0:	cmp	r4, r2
   12cd4:	bge	12d08 <__assert_fail@plt+0x182c>
   12cd8:	ldr	r1, [sl, #120]	; 0x78
   12cdc:	ldrb	r0, [fp, #26]
   12ce0:	add	r2, r3, #1
   12ce4:	str	r2, [sl, #280]	; 0x118
   12ce8:	strb	r0, [r1, r3]
   12cec:	ldr	r3, [sl, #116]	; 0x74
   12cf0:	cmp	r2, r3
   12cf4:	movlt	r3, r2
   12cf8:	blt	12cc8 <__assert_fail@plt+0x17ec>
   12cfc:	bl	1522c <__assert_fail@plt+0x3d50>
   12d00:	ldr	r3, [sl, #280]	; 0x118
   12d04:	b	12cc8 <__assert_fail@plt+0x17ec>
   12d08:	ldr	r3, [sl, #284]	; 0x11c
   12d0c:	cmp	r3, #0
   12d10:	bne	13090 <__assert_fail@plt+0x1bb4>
   12d14:	ldr	r1, [sl, #280]	; 0x118
   12d18:	cmp	r1, #0
   12d1c:	bne	12e64 <__assert_fail@plt+0x1988>
   12d20:	ldrb	r3, [sl, #276]	; 0x114
   12d24:	cmp	r3, #0
   12d28:	bne	132a8 <__assert_fail@plt+0x1dcc>
   12d2c:	ldr	r3, [sl, #112]	; 0x70
   12d30:	tst	r3, #49152	; 0xc000
   12d34:	beq	12b18 <__assert_fail@plt+0x163c>
   12d38:	ldr	r3, [fp, #8]
   12d3c:	cmp	r3, #4
   12d40:	bne	12b18 <__assert_fail@plt+0x163c>
   12d44:	ldrd	r0, [fp]
   12d48:	cmp	r0, #0
   12d4c:	sbcs	r3, r1, #0
   12d50:	blt	12b18 <__assert_fail@plt+0x163c>
   12d54:	ldrd	r2, [sl, #16]
   12d58:	cmp	r0, r2
   12d5c:	sbcs	r3, r1, r3
   12d60:	bge	12b18 <__assert_fail@plt+0x163c>
   12d64:	mov	r0, #0
   12d68:	mov	r1, #0
   12d6c:	bl	13814 <__assert_fail@plt+0x2338>
   12d70:	b	12b18 <__assert_fail@plt+0x163c>
   12d74:	mov	r3, #0
   12d78:	ldr	ip, [pc, #-780]	; 12a74 <__assert_fail@plt+0x1598>
   12d7c:	mov	r2, r3
   12d80:	add	r1, sp, #80	; 0x50
   12d84:	mov	r0, #10
   12d88:	str	ip, [sp, #80]	; 0x50
   12d8c:	str	r3, [sp, #212]	; 0xd4
   12d90:	bl	11284 <sigaction@plt>
   12d94:	b	11638 <__assert_fail@plt+0x15c>
   12d98:	ldr	r0, [sl, #120]	; 0x78
   12d9c:	ldr	r2, [sl, #116]	; 0x74
   12da0:	mov	r1, #0
   12da4:	bl	113d4 <memset@plt>
   12da8:	orrs	r3, r4, r5
   12dac:	ldreq	r4, [sp, #80]	; 0x50
   12db0:	bne	12dcc <__assert_fail@plt+0x18f0>
   12db4:	mov	r1, r4
   12db8:	ldr	r0, [sl, #120]	; 0x78
   12dbc:	bl	14ee0 <__assert_fail@plt+0x3a04>
   12dc0:	cmp	r4, r0
   12dc4:	beq	124dc <__assert_fail@plt+0x1000>
   12dc8:	b	12de4 <__assert_fail@plt+0x1908>
   12dcc:	ldr	r6, [sl, #116]	; 0x74
   12dd0:	ldr	r0, [sl, #120]	; 0x78
   12dd4:	mov	r1, r6
   12dd8:	bl	14ee0 <__assert_fail@plt+0x3a04>
   12ddc:	cmp	r6, r0
   12de0:	beq	12e24 <__assert_fail@plt+0x1948>
   12de4:	ldr	r3, [sp, #32]
   12de8:	mov	r2, #5
   12dec:	ldr	r1, [pc, #-892]	; 12a78 <__assert_fail@plt+0x159c>
   12df0:	mov	r0, #0
   12df4:	ldr	r4, [r3]
   12df8:	bl	11230 <dcgettext@plt>
   12dfc:	ldr	r1, [sl, #128]	; 0x80
   12e00:	mov	r5, r0
   12e04:	mov	r0, #4
   12e08:	bl	189b8 <__assert_fail@plt+0x74dc>
   12e0c:	mov	r2, r5
   12e10:	mov	r1, r4
   12e14:	mov	r3, r0
   12e18:	mov	r0, #0
   12e1c:	bl	13d54 <__assert_fail@plt+0x2878>
   12e20:	bl	15214 <__assert_fail@plt+0x3d38>
   12e24:	subs	r4, r4, #1
   12e28:	sbc	r5, r5, #0
   12e2c:	orrs	r3, r4, r5
   12e30:	bne	12dcc <__assert_fail@plt+0x18f0>
   12e34:	ldr	r4, [sp, #80]	; 0x50
   12e38:	cmp	r4, #0
   12e3c:	bne	12db4 <__assert_fail@plt+0x18d8>
   12e40:	b	124dc <__assert_fail@plt+0x1000>
   12e44:	ldrb	r3, [r2]
   12e48:	cmp	r3, #0
   12e4c:	cmpne	r3, #61	; 0x3d
   12e50:	mvneq	r2, #-2147483647	; 0x80000001
   12e54:	moveq	r3, #0
   12e58:	addeq	ip, sp, #76	; 0x4c
   12e5c:	beq	11e80 <__assert_fail@plt+0x9a4>
   12e60:	b	11f38 <__assert_fail@plt+0xa5c>
   12e64:	ldr	r0, [sl, #120]	; 0x78
   12e68:	bl	14ee0 <__assert_fail@plt+0x3a04>
   12e6c:	ldrd	r2, [sl, #16]
   12e70:	adds	r2, r2, r0
   12e74:	adc	r3, r3, r0, asr #31
   12e78:	cmp	r0, #0
   12e7c:	strd	r2, [sl, #16]
   12e80:	beq	12e94 <__assert_fail@plt+0x19b8>
   12e84:	ldrd	r2, [sl, #40]	; 0x28
   12e88:	adds	r2, r2, #1
   12e8c:	adc	r3, r3, #0
   12e90:	strd	r2, [sl, #40]	; 0x28
   12e94:	ldr	r3, [sl, #280]	; 0x118
   12e98:	cmp	r0, r3
   12e9c:	beq	12d20 <__assert_fail@plt+0x1844>
   12ea0:	ldr	r3, [sp, #32]
   12ea4:	mov	r2, #5
   12ea8:	ldr	r1, [pc, #-1076]	; 12a7c <__assert_fail@plt+0x15a0>
   12eac:	mov	r0, #0
   12eb0:	ldr	r4, [r3]
   12eb4:	bl	11230 <dcgettext@plt>
   12eb8:	ldr	r1, [sl, #128]	; 0x80
   12ebc:	mov	r5, r0
   12ec0:	mov	r0, #4
   12ec4:	bl	189b8 <__assert_fail@plt+0x74dc>
   12ec8:	mov	r2, r5
   12ecc:	mov	r1, r4
   12ed0:	mov	r3, r0
   12ed4:	mov	r0, #0
   12ed8:	bl	13d54 <__assert_fail@plt+0x2878>
   12edc:	mov	r3, #1
   12ee0:	str	r3, [sp, #48]	; 0x30
   12ee4:	b	12b18 <__assert_fail@plt+0x163c>
   12ee8:	mov	r2, #5
   12eec:	ldr	r1, [pc, #-1140]	; 12a80 <__assert_fail@plt+0x15a4>
   12ef0:	mov	r0, r9
   12ef4:	bl	11230 <dcgettext@plt>
   12ef8:	ldrd	r4, [sp, #48]	; 0x30
   12efc:	ldr	r3, [sl, #116]	; 0x74
   12f00:	mov	r1, r9
   12f04:	strd	r4, [sp]
   12f08:	str	r3, [sp, #8]
   12f0c:	mov	r2, r0
   12f10:	mov	r0, #1
   12f14:	bl	13d54 <__assert_fail@plt+0x2878>
   12f18:	ldrd	r2, [r7, #-8]
   12f1c:	adds	r4, r4, r2
   12f20:	adc	r5, r5, r3
   12f24:	b	11bd0 <__assert_fail@plt+0x6f4>
   12f28:	mov	r2, #5
   12f2c:	ldr	r1, [pc, #-1200]	; 12a84 <__assert_fail@plt+0x15a8>
   12f30:	mov	r0, #0
   12f34:	bl	11230 <dcgettext@plt>
   12f38:	ldr	r1, [sl, #124]	; 0x7c
   12f3c:	mov	r4, r0
   12f40:	mov	r0, #4
   12f44:	bl	189b8 <__assert_fail@plt+0x74dc>
   12f48:	mov	r1, #0
   12f4c:	mov	r2, r4
   12f50:	mov	r3, r0
   12f54:	mov	r0, r1
   12f58:	bl	13d54 <__assert_fail@plt+0x2878>
   12f5c:	b	12804 <__assert_fail@plt+0x1328>
   12f60:	ldrd	r0, [sp, #48]	; 0x30
   12f64:	mov	r3, r1
   12f68:	cmp	r0, #0
   12f6c:	sbcs	r3, r3, #0
   12f70:	bge	12220 <__assert_fail@plt+0xd44>
   12f74:	mvn	r3, #0
   12f78:	mvn	r2, #0
   12f7c:	cmp	r1, r3
   12f80:	cmpeq	r0, r2
   12f84:	beq	134d8 <__assert_fail@plt+0x1ffc>
   12f88:	mov	r3, r1
   12f8c:	mov	r2, r0
   12f90:	mov	r1, #-2147483648	; 0x80000000
   12f94:	mov	r0, #0
   12f98:	bl	1add8 <__assert_fail@plt+0x98fc>
   12f9c:	asr	r7, r4, #31
   12fa0:	cmp	r0, r4
   12fa4:	sbcs	r3, r1, r7
   12fa8:	movlt	r3, #1
   12fac:	movge	r3, #0
   12fb0:	b	1224c <__assert_fail@plt+0xd70>
   12fb4:	ldr	r0, [sl, #120]	; 0x78
   12fb8:	b	12da0 <__assert_fail@plt+0x18c4>
   12fbc:	mov	r2, #0
   12fc0:	mov	r3, #0
   12fc4:	mov	r8, r2
   12fc8:	mov	r9, r3
   12fcc:	b	12398 <__assert_fail@plt+0xebc>
   12fd0:	cmn	r7, #1
   12fd4:	beq	13468 <__assert_fail@plt+0x1f8c>
   12fd8:	mov	r2, r7
   12fdc:	asr	r3, r7, #31
   12fe0:	mov	r0, #0
   12fe4:	strd	r2, [sp, #48]	; 0x30
   12fe8:	mov	r1, #-2147483648	; 0x80000000
   12fec:	b	11c70 <__assert_fail@plt+0x794>
   12ff0:	ldrd	r2, [sl, #48]	; 0x30
   12ff4:	adds	r2, r2, #1
   12ff8:	adc	r3, r3, #0
   12ffc:	strd	r2, [sl, #48]	; 0x30
   13000:	b	12518 <__assert_fail@plt+0x103c>
   13004:	bl	13de8 <__assert_fail@plt+0x290c>
   13008:	subs	r4, r0, #0
   1300c:	bne	12b4c <__assert_fail@plt+0x1670>
   13010:	ldr	r3, [sp, #32]
   13014:	mov	r2, #5
   13018:	ldr	r1, [pc, #-1432]	; 12a88 <__assert_fail@plt+0x15ac>
   1301c:	ldr	r5, [r3]
   13020:	bl	11230 <dcgettext@plt>
   13024:	ldr	r2, [sl, #124]	; 0x7c
   13028:	mov	r1, #3
   1302c:	mov	r6, r0
   13030:	mov	r0, r4
   13034:	bl	18a74 <__assert_fail@plt+0x7598>
   13038:	mov	r1, r5
   1303c:	mov	r2, r6
   13040:	mov	r5, #1
   13044:	mov	r3, r0
   13048:	mov	r0, r4
   1304c:	bl	13d54 <__assert_fail@plt+0x2878>
   13050:	b	12b4c <__assert_fail@plt+0x1670>
   13054:	mov	r1, #1
   13058:	add	r0, sp, #80	; 0x50
   1305c:	bl	153d4 <__assert_fail@plt+0x3ef8>
   13060:	b	12c9c <__assert_fail@plt+0x17c0>
   13064:	mov	r2, #5
   13068:	ldr	r1, [pc, #-1508]	; 12a8c <__assert_fail@plt+0x15b0>
   1306c:	mov	r0, r4
   13070:	bl	11230 <dcgettext@plt>
   13074:	ldr	r1, [sl, #264]	; 0x108
   13078:	mov	r3, r0
   1307c:	mov	r2, r0
   13080:	mov	r0, r4
   13084:	str	r3, [sl, #124]	; 0x7c
   13088:	bl	14e00 <__assert_fail@plt+0x3924>
   1308c:	b	11aa8 <__assert_fail@plt+0x5cc>
   13090:	ldr	r3, [sl, #112]	; 0x70
   13094:	tst	r3, #16
   13098:	beq	12d14 <__assert_fail@plt+0x1838>
   1309c:	ldr	r2, [sl, #280]	; 0x118
   130a0:	ldr	r1, [sl, #120]	; 0x78
   130a4:	ldrb	r0, [fp, #25]
   130a8:	add	r3, r2, #1
   130ac:	str	r3, [sl, #280]	; 0x118
   130b0:	strb	r0, [r1, r2]
   130b4:	ldr	r2, [sl, #116]	; 0x74
   130b8:	cmp	r3, r2
   130bc:	blt	12d14 <__assert_fail@plt+0x1838>
   130c0:	bl	1522c <__assert_fail@plt+0x3d50>
   130c4:	b	12d14 <__assert_fail@plt+0x1838>
   130c8:	add	r0, r0, #1
   130cc:	str	lr, [sp, #56]	; 0x38
   130d0:	b	12660 <__assert_fail@plt+0x1184>
   130d4:	cmn	r4, #1
   130d8:	mvneq	r7, #0
   130dc:	beq	13168 <__assert_fail@plt+0x1c8c>
   130e0:	asr	r7, r4, #31
   130e4:	mov	r2, r4
   130e8:	mov	r3, r7
   130ec:	mov	r0, #0
   130f0:	mov	r1, #-2147483648	; 0x80000000
   130f4:	b	12234 <__assert_fail@plt+0xd58>
   130f8:	ldrd	r2, [sp, #48]	; 0x30
   130fc:	cmp	r2, #0
   13100:	sbcs	r3, r3, #0
   13104:	bge	130d4 <__assert_fail@plt+0x1bf8>
   13108:	asr	r7, r4, #31
   1310c:	mov	r2, r4
   13110:	mov	r3, r7
   13114:	mvn	r0, #0
   13118:	mvn	r1, #-2147483648	; 0x80000000
   1311c:	bl	1add8 <__assert_fail@plt+0x98fc>
   13120:	ldrd	r2, [sp, #48]	; 0x30
   13124:	cmp	r2, r0
   13128:	sbcs	r3, r3, r1
   1312c:	movlt	r3, #1
   13130:	movge	r3, #0
   13134:	b	1224c <__assert_fail@plt+0xd70>
   13138:	bl	113a4 <__errno_location@plt>
   1313c:	ldr	r1, [pc, #-1716]	; 12a90 <__assert_fail@plt+0x15b4>
   13140:	mov	r2, #5
   13144:	ldr	r4, [r0]
   13148:	mov	r0, #0
   1314c:	bl	11230 <dcgettext@plt>
   13150:	ldr	r1, [sl, #124]	; 0x7c
   13154:	mov	r5, r0
   13158:	b	12350 <__assert_fail@plt+0xe74>
   1315c:	mov	r3, #1
   13160:	str	r3, [sp, #48]	; 0x30
   13164:	b	12c50 <__assert_fail@plt+0x1774>
   13168:	ldrd	r0, [sp, #48]	; 0x30
   1316c:	mul	r3, r4, r1
   13170:	umull	r4, r5, r4, r0
   13174:	mla	r3, r0, r7, r3
   13178:	cmp	r4, #0
   1317c:	add	r5, r3, r5
   13180:	sbcs	r3, r5, #0
   13184:	mov	r2, r4
   13188:	mov	r3, r5
   1318c:	bge	11b70 <__assert_fail@plt+0x694>
   13190:	ldr	r7, [pc, #-1796]	; 12a94 <__assert_fail@plt+0x15b8>
   13194:	mov	r0, #0
   13198:	subs	r0, r0, r4
   1319c:	ldrd	r2, [r7, #-8]
   131a0:	mov	r1, #-2147483648	; 0x80000000
   131a4:	sbc	r1, r1, r5
   131a8:	cmp	r2, r0
   131ac:	sbcs	r3, r3, r1
   131b0:	movlt	r3, #1
   131b4:	movge	r3, #0
   131b8:	b	11bb4 <__assert_fail@plt+0x6d8>
   131bc:	cmp	r4, #0
   131c0:	sbcs	r3, r5, #0
   131c4:	bge	12fd0 <__assert_fail@plt+0x1af4>
   131c8:	asr	r3, r7, #31
   131cc:	mov	r2, r7
   131d0:	mvn	r0, #0
   131d4:	mvn	r1, #-2147483648	; 0x80000000
   131d8:	strd	r2, [sp, #48]	; 0x30
   131dc:	bl	1add8 <__assert_fail@plt+0x98fc>
   131e0:	cmp	r4, r0
   131e4:	sbcs	r3, r5, r1
   131e8:	movlt	r3, #1
   131ec:	movge	r3, #0
   131f0:	b	11c84 <__assert_fail@plt+0x7a8>
   131f4:	ldr	r3, [sl, #568]	; 0x238
   131f8:	ldr	r6, [sp, #40]	; 0x28
   131fc:	adds	r8, r8, r3
   13200:	adc	r9, r9, r3, asr #31
   13204:	b	123e0 <__assert_fail@plt+0xf04>
   13208:	mov	r6, #1
   1320c:	b	13220 <__assert_fail@plt+0x1d44>
   13210:	ldr	r3, [sp, #32]
   13214:	ldr	r7, [r3]
   13218:	cmp	r7, #4
   1321c:	bne	13248 <__assert_fail@plt+0x1d6c>
   13220:	bl	14b28 <__assert_fail@plt+0x364c>
   13224:	mov	r2, r4
   13228:	mov	r3, r5
   1322c:	mov	r0, r6
   13230:	bl	1120c <ftruncate64@plt>
   13234:	cmp	r0, #0
   13238:	blt	13210 <__assert_fail@plt+0x1d34>
   1323c:	beq	11c14 <__assert_fail@plt+0x738>
   13240:	ldr	r3, [sp, #32]
   13244:	ldr	r7, [r3]
   13248:	add	r1, sp, #80	; 0x50
   1324c:	mov	r0, #1
   13250:	bl	14db8 <__assert_fail@plt+0x38dc>
   13254:	cmp	r0, #0
   13258:	bne	135f8 <__assert_fail@plt+0x211c>
   1325c:	ldr	r3, [sp, #96]	; 0x60
   13260:	and	r3, r3, #61440	; 0xf000
   13264:	sub	r3, r3, #16384	; 0x4000
   13268:	bics	r6, r3, #16384	; 0x4000
   1326c:	bne	11c14 <__assert_fail@plt+0x738>
   13270:	mov	r2, #5
   13274:	ldr	r1, [pc, #-2020]	; 12a98 <__assert_fail@plt+0x15bc>
   13278:	bl	11230 <dcgettext@plt>
   1327c:	ldr	r1, [sl, #128]	; 0x80
   13280:	mov	r8, r0
   13284:	mov	r0, #4
   13288:	bl	189b8 <__assert_fail@plt+0x74dc>
   1328c:	mov	r2, r8
   13290:	strd	r4, [sp]
   13294:	mov	r1, r7
   13298:	str	r0, [sp, #8]
   1329c:	mov	r0, r6
   132a0:	bl	13d54 <__assert_fail@plt+0x2878>
   132a4:	b	11c14 <__assert_fail@plt+0x738>
   132a8:	add	r1, sp, #80	; 0x50
   132ac:	mov	r0, #1
   132b0:	bl	14db8 <__assert_fail@plt+0x38dc>
   132b4:	cmp	r0, #0
   132b8:	bne	12ad4 <__assert_fail@plt+0x15f8>
   132bc:	ldr	r3, [sp, #96]	; 0x60
   132c0:	and	r3, r3, #61440	; 0xf000
   132c4:	cmp	r3, #32768	; 0x8000
   132c8:	bne	12d2c <__assert_fail@plt+0x1850>
   132cc:	mov	r6, #1
   132d0:	mov	r3, #0
   132d4:	str	r6, [sp]
   132d8:	mov	r0, r6
   132dc:	mov	r2, #0
   132e0:	bl	112a8 <lseek64@plt>
   132e4:	cmp	r0, #0
   132e8:	sbcs	r3, r1, #0
   132ec:	mov	r4, r0
   132f0:	mov	r5, r1
   132f4:	blt	12d2c <__assert_fail@plt+0x1850>
   132f8:	ldrd	r2, [sp, #128]	; 0x80
   132fc:	cmp	r2, r0
   13300:	sbcs	r3, r3, r1
   13304:	bge	12d2c <__assert_fail@plt+0x1850>
   13308:	bl	14b28 <__assert_fail@plt+0x364c>
   1330c:	mov	r2, r4
   13310:	mov	r3, r5
   13314:	mov	r0, r6
   13318:	bl	1120c <ftruncate64@plt>
   1331c:	cmp	r0, #0
   13320:	bge	1364c <__assert_fail@plt+0x2170>
   13324:	ldr	r3, [sp, #32]
   13328:	ldr	r7, [r3]
   1332c:	cmp	r7, #4
   13330:	beq	13308 <__assert_fail@plt+0x1e2c>
   13334:	mov	r2, #5
   13338:	ldr	r1, [pc, #-2216]	; 12a98 <__assert_fail@plt+0x15bc>
   1333c:	mov	r0, #0
   13340:	bl	11230 <dcgettext@plt>
   13344:	ldr	r1, [sl, #128]	; 0x80
   13348:	mov	r6, r0
   1334c:	mov	r0, #4
   13350:	bl	189b8 <__assert_fail@plt+0x74dc>
   13354:	mov	r2, r6
   13358:	strd	r4, [sp]
   1335c:	mov	r1, r7
   13360:	str	r0, [sp, #8]
   13364:	mov	r0, #0
   13368:	bl	13d54 <__assert_fail@plt+0x2878>
   1336c:	b	12b10 <__assert_fail@plt+0x1634>
   13370:	mvn	r3, #0
   13374:	mvn	r2, #0
   13378:	cmp	r5, r3
   1337c:	cmpeq	r4, r2
   13380:	beq	13638 <__assert_fail@plt+0x215c>
   13384:	mov	r2, r4
   13388:	mov	r3, r5
   1338c:	mov	r0, #0
   13390:	mov	r1, #-2147483648	; 0x80000000
   13394:	bl	1add8 <__assert_fail@plt+0x98fc>
   13398:	asr	r3, r7, #31
   1339c:	mov	r2, r7
   133a0:	strd	r2, [sp, #48]	; 0x30
   133a4:	cmp	r0, r7
   133a8:	sbcs	r3, r1, r3
   133ac:	movlt	r3, #1
   133b0:	movge	r3, #0
   133b4:	b	11c84 <__assert_fail@plt+0x7a8>
   133b8:	mov	r0, r2
   133bc:	ldr	r1, [pc, #-2344]	; 12a9c <__assert_fail@plt+0x15c0>
   133c0:	mov	r2, #5
   133c4:	bl	11230 <dcgettext@plt>
   133c8:	ldr	r1, [sl, #272]	; 0x110
   133cc:	mov	r3, r0
   133d0:	mov	r2, r0
   133d4:	mov	r0, #1
   133d8:	str	r3, [sl, #128]	; 0x80
   133dc:	bl	14e00 <__assert_fail@plt+0x3924>
   133e0:	ldr	r3, [pc, #-2376]	; 12aa0 <__assert_fail@plt+0x15c4>
   133e4:	str	r3, [sp, #56]	; 0x38
   133e8:	b	11c14 <__assert_fail@plt+0x738>
   133ec:	ldrb	r3, [r3]
   133f0:	cmp	r3, #0
   133f4:	cmpne	r3, #61	; 0x3d
   133f8:	bne	120e4 <__assert_fail@plt+0xc08>
   133fc:	strd	r0, [sp, #32]
   13400:	cmp	r0, #0
   13404:	sbcs	r3, r1, #0
   13408:	blt	11ed8 <__assert_fail@plt+0x9fc>
   1340c:	ldr	r3, [sp, #80]	; 0x50
   13410:	cmp	r3, #0
   13414:	beq	117ac <__assert_fail@plt+0x2d0>
   13418:	cmp	r3, #1
   1341c:	moveq	r4, #75	; 0x4b
   13420:	movne	r4, #0
   13424:	b	11ea4 <__assert_fail@plt+0x9c8>
   13428:	mov	r1, #10
   1342c:	ldr	r0, [pc, #-2448]	; 12aa4 <__assert_fail@plt+0x15c8>
   13430:	bl	11314 <sigaddset@plt>
   13434:	b	115ec <__assert_fail@plt+0x110>
   13438:	ldrb	r3, [r2]
   1343c:	cmp	r3, #0
   13440:	cmpne	r3, #61	; 0x3d
   13444:	bne	11fa0 <__assert_fail@plt+0xac4>
   13448:	strd	r0, [sp, #40]	; 0x28
   1344c:	b	13400 <__assert_fail@plt+0x1f24>
   13450:	ldrb	r3, [r3]
   13454:	cmp	r3, #0
   13458:	cmpne	r3, #61	; 0x3d
   1345c:	bne	11fc8 <__assert_fail@plt+0xaec>
   13460:	strd	r0, [sp, #48]	; 0x30
   13464:	b	13400 <__assert_fail@plt+0x1f24>
   13468:	mvn	r2, #0
   1346c:	mvn	r3, #0
   13470:	strd	r2, [sp, #48]	; 0x30
   13474:	ldr	r2, [sp, #52]	; 0x34
   13478:	mul	r3, r7, r5
   1347c:	umull	r8, r9, r7, r4
   13480:	mla	r3, r4, r2, r3
   13484:	cmp	r8, #0
   13488:	add	r9, r3, r9
   1348c:	sbcs	r3, r9, #0
   13490:	mov	r2, r8
   13494:	mov	r3, r9
   13498:	bge	12398 <__assert_fail@plt+0xebc>
   1349c:	ldr	r0, [sl, #568]	; 0x238
   134a0:	mov	r2, #0
   134a4:	subs	r2, r2, r8
   134a8:	mov	r3, #-2147483648	; 0x80000000
   134ac:	sbc	r3, r3, r9
   134b0:	asr	r1, r0, #31
   134b4:	cmp	r0, r2
   134b8:	sbcs	r3, r1, r3
   134bc:	movlt	r3, #1
   134c0:	movge	r3, #0
   134c4:	b	123c8 <__assert_fail@plt+0xeec>
   134c8:	mov	r1, #1
   134cc:	add	r0, sp, #80	; 0x50
   134d0:	bl	152dc <__assert_fail@plt+0x3e00>
   134d4:	b	12c9c <__assert_fail@plt+0x17c0>
   134d8:	mov	r3, #0
   134dc:	asr	r7, r4, #31
   134e0:	b	1224c <__assert_fail@plt+0xd70>
   134e4:	mov	r2, #5
   134e8:	ldr	r1, [pc, #-2620]	; 12ab4 <__assert_fail@plt+0x15d8>
   134ec:	mov	r0, #0
   134f0:	bl	11230 <dcgettext@plt>
   134f4:	mov	r4, r0
   134f8:	ldr	r0, [pc, #-2648]	; 12aa8 <__assert_fail@plt+0x15cc>
   134fc:	bl	18bf8 <__assert_fail@plt+0x771c>
   13500:	ldr	r2, [pc, #-2620]	; 12acc <__assert_fail@plt+0x15f0>
   13504:	mov	r1, #0
   13508:	mov	r3, r4
   1350c:	str	r0, [sp]
   13510:	mov	r0, r1
   13514:	bl	13d54 <__assert_fail@plt+0x2878>
   13518:	mov	r0, #1
   1351c:	bl	14460 <__assert_fail@plt+0x2f84>
   13520:	ldr	r1, [pc, #-2684]	; 12aac <__assert_fail@plt+0x15d0>
   13524:	mov	r2, #5
   13528:	mov	r0, #0
   1352c:	bl	11230 <dcgettext@plt>
   13530:	mov	r1, #0
   13534:	mov	r2, r0
   13538:	mov	r0, #1
   1353c:	bl	13d54 <__assert_fail@plt+0x2878>
   13540:	ldr	r1, [pc, #-2712]	; 12ab0 <__assert_fail@plt+0x15d4>
   13544:	mov	r2, #5
   13548:	bl	11230 <dcgettext@plt>
   1354c:	mov	r4, r0
   13550:	mov	r0, r9
   13554:	bl	18bf8 <__assert_fail@plt+0x771c>
   13558:	mov	r1, #0
   1355c:	mov	r2, r4
   13560:	mov	r3, r0
   13564:	mov	r0, r1
   13568:	bl	13d54 <__assert_fail@plt+0x2878>
   1356c:	mov	r0, #1
   13570:	bl	14460 <__assert_fail@plt+0x2f84>
   13574:	strd	r2, [sp, #40]	; 0x28
   13578:	mvn	r2, #0
   1357c:	mvn	r3, #-2147483648	; 0x80000000
   13580:	strd	r2, [sp, #32]
   13584:	b	117cc <__assert_fail@plt+0x2f0>
   13588:	mov	r2, #5
   1358c:	ldr	r1, [pc, #-2784]	; 12ab4 <__assert_fail@plt+0x15d8>
   13590:	mov	r0, r7
   13594:	bl	11230 <dcgettext@plt>
   13598:	ldr	r3, [pc, #-2792]	; 12ab8 <__assert_fail@plt+0x15dc>
   1359c:	tst	r6, #4
   135a0:	mov	r4, r0
   135a4:	ldr	r0, [pc, #-2800]	; 12abc <__assert_fail@plt+0x15e0>
   135a8:	movne	r0, r3
   135ac:	bl	18bf8 <__assert_fail@plt+0x771c>
   135b0:	mov	r3, r4
   135b4:	ldr	r2, [pc, #-2800]	; 12acc <__assert_fail@plt+0x15f0>
   135b8:	mov	r1, r7
   135bc:	b	1350c <__assert_fail@plt+0x2030>
   135c0:	mov	r2, #5
   135c4:	ldr	r1, [pc, #-2828]	; 12ac0 <__assert_fail@plt+0x15e4>
   135c8:	b	13528 <__assert_fail@plt+0x204c>
   135cc:	mov	r2, #5
   135d0:	ldr	r1, [pc, #-2836]	; 12ac4 <__assert_fail@plt+0x15e8>
   135d4:	mov	r0, r8
   135d8:	bl	11230 <dcgettext@plt>
   135dc:	mov	r4, r0
   135e0:	ldr	r0, [pc, #-2848]	; 12ac8 <__assert_fail@plt+0x15ec>
   135e4:	bl	18bf8 <__assert_fail@plt+0x771c>
   135e8:	mov	r3, r4
   135ec:	ldr	r2, [pc, #-2856]	; 12acc <__assert_fail@plt+0x15f0>
   135f0:	mov	r1, r8
   135f4:	b	1350c <__assert_fail@plt+0x2030>
   135f8:	ldr	r3, [sp, #32]
   135fc:	mov	r2, #5
   13600:	ldr	r1, [pc, #-2872]	; 12ad0 <__assert_fail@plt+0x15f4>
   13604:	mov	r0, #0
   13608:	ldr	r4, [r3]
   1360c:	bl	11230 <dcgettext@plt>
   13610:	ldr	r1, [sl, #128]	; 0x80
   13614:	mov	r5, r0
   13618:	mov	r0, #4
   1361c:	bl	189b8 <__assert_fail@plt+0x74dc>
   13620:	mov	r2, r5
   13624:	mov	r1, r4
   13628:	mov	r3, r0
   1362c:	mov	r0, #0
   13630:	bl	13d54 <__assert_fail@plt+0x2878>
   13634:	b	11c14 <__assert_fail@plt+0x738>
   13638:	mov	r0, r7
   1363c:	asr	r1, r7, #31
   13640:	mov	r3, #0
   13644:	strd	r0, [sp, #48]	; 0x30
   13648:	b	11c84 <__assert_fail@plt+0x7a8>
   1364c:	beq	12d2c <__assert_fail@plt+0x1850>
   13650:	ldr	r3, [sp, #32]
   13654:	ldr	r7, [r3]
   13658:	b	13334 <__assert_fail@plt+0x1e58>
   1365c:	mov	fp, #0
   13660:	mov	lr, #0
   13664:	pop	{r1}		; (ldr r1, [sp], #4)
   13668:	mov	r2, sp
   1366c:	push	{r2}		; (str r2, [sp, #-4]!)
   13670:	push	{r0}		; (str r0, [sp, #-4]!)
   13674:	ldr	ip, [pc, #16]	; 1368c <__assert_fail@plt+0x21b0>
   13678:	push	{ip}		; (str ip, [sp, #-4]!)
   1367c:	ldr	r0, [pc, #12]	; 13690 <__assert_fail@plt+0x21b4>
   13680:	ldr	r3, [pc, #12]	; 13694 <__assert_fail@plt+0x21b8>
   13684:	bl	11320 <__libc_start_main@plt>
   13688:	bl	114ac <abort@plt>
   1368c:	andeq	fp, r1, r8, asr #1
   13690:	andeq	r1, r1, r0, asr #11
   13694:	andeq	fp, r1, r8, rrx
   13698:	ldr	r3, [pc, #20]	; 136b4 <__assert_fail@plt+0x21d8>
   1369c:	ldr	r2, [pc, #20]	; 136b8 <__assert_fail@plt+0x21dc>
   136a0:	add	r3, pc, r3
   136a4:	ldr	r2, [r3, r2]
   136a8:	cmp	r2, #0
   136ac:	bxeq	lr
   136b0:	b	11350 <__gmon_start__@plt>
   136b4:	andeq	sl, r1, r8, asr r9
   136b8:	andeq	r0, r0, r0, asr #2
   136bc:	ldr	r3, [pc, #28]	; 136e0 <__assert_fail@plt+0x2204>
   136c0:	ldr	r0, [pc, #28]	; 136e4 <__assert_fail@plt+0x2208>
   136c4:	sub	r3, r3, r0
   136c8:	cmp	r3, #6
   136cc:	bxls	lr
   136d0:	ldr	r3, [pc, #16]	; 136e8 <__assert_fail@plt+0x220c>
   136d4:	cmp	r3, #0
   136d8:	bxeq	lr
   136dc:	bx	r3
   136e0:	andeq	lr, r2, r7, asr #3
   136e4:	andeq	lr, r2, r4, asr #3
   136e8:	andeq	r0, r0, r0
   136ec:	ldr	r1, [pc, #36]	; 13718 <__assert_fail@plt+0x223c>
   136f0:	ldr	r0, [pc, #36]	; 1371c <__assert_fail@plt+0x2240>
   136f4:	sub	r1, r1, r0
   136f8:	asr	r1, r1, #2
   136fc:	add	r1, r1, r1, lsr #31
   13700:	asrs	r1, r1, #1
   13704:	bxeq	lr
   13708:	ldr	r3, [pc, #16]	; 13720 <__assert_fail@plt+0x2244>
   1370c:	cmp	r3, #0
   13710:	bxeq	lr
   13714:	bx	r3
   13718:	andeq	lr, r2, r4, asr #3
   1371c:	andeq	lr, r2, r4, asr #3
   13720:	andeq	r0, r0, r0
   13724:	push	{r4, lr}
   13728:	ldr	r4, [pc, #24]	; 13748 <__assert_fail@plt+0x226c>
   1372c:	ldrb	r3, [r4]
   13730:	cmp	r3, #0
   13734:	popne	{r4, pc}
   13738:	bl	136bc <__assert_fail@plt+0x21e0>
   1373c:	mov	r3, #1
   13740:	strb	r3, [r4]
   13744:	pop	{r4, pc}
   13748:	andeq	lr, r2, r4, ror #3
   1374c:	ldr	r0, [pc, #40]	; 1377c <__assert_fail@plt+0x22a0>
   13750:	ldr	r3, [r0]
   13754:	cmp	r3, #0
   13758:	bne	13760 <__assert_fail@plt+0x2284>
   1375c:	b	136ec <__assert_fail@plt+0x2210>
   13760:	ldr	r3, [pc, #24]	; 13780 <__assert_fail@plt+0x22a4>
   13764:	cmp	r3, #0
   13768:	beq	1375c <__assert_fail@plt+0x2280>
   1376c:	push	{r4, lr}
   13770:	blx	r3
   13774:	pop	{r4, lr}
   13778:	b	136ec <__assert_fail@plt+0x2210>
   1377c:	andeq	sp, r2, r4, lsl pc
	...
   13788:	ldr	r3, [pc, #4]	; 13794 <__assert_fail@plt+0x22b8>
   1378c:	str	r0, [r3]
   13790:	bx	lr
   13794:	andeq	lr, r2, r8, ror #3
   13798:	ldr	r2, [pc, #12]	; 137ac <__assert_fail@plt+0x22d0>
   1379c:	ldr	r3, [r2, #4]
   137a0:	add	r3, r3, #1
   137a4:	str	r3, [r2, #4]
   137a8:	bx	lr
   137ac:	andeq	lr, r2, r8, ror #3
   137b0:	ldr	ip, [pc, #88]	; 13810 <__assert_fail@plt+0x2334>
   137b4:	push	{r4, r5, lr}
   137b8:	ldrd	r2, [ip, #8]
   137bc:	cmp	r2, #0
   137c0:	sbcs	lr, r3, #0
   137c4:	poplt	{r4, r5, pc}
   137c8:	cmp	r0, #0
   137cc:	sbcs	lr, r1, #0
   137d0:	blt	13800 <__assert_fail@plt+0x2324>
   137d4:	mvn	r4, #0
   137d8:	subs	r4, r4, r0
   137dc:	mvn	r5, #-2147483648	; 0x80000000
   137e0:	sbc	r5, r5, r1
   137e4:	cmp	r4, r2
   137e8:	sbcs	lr, r5, r3
   137ec:	bge	13800 <__assert_fail@plt+0x2324>
   137f0:	mvn	r2, #0
   137f4:	mvn	r3, #0
   137f8:	strd	r2, [ip, #8]
   137fc:	pop	{r4, r5, pc}
   13800:	adds	r2, r2, r0
   13804:	adc	r3, r3, r1
   13808:	strd	r2, [ip, #8]
   1380c:	pop	{r4, r5, pc}
   13810:	andeq	lr, r2, r8, ror #3
   13814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13818:	vpush	{d8}
   1381c:	mov	r6, r0
   13820:	mov	r7, r1
   13824:	orrs	r3, r6, r7
   13828:	sub	sp, sp, #2016	; 0x7e0
   1382c:	sub	sp, sp, #12
   13830:	movne	r8, r0
   13834:	movne	r9, r1
   13838:	beq	13a94 <__assert_fail@plt+0x25b8>
   1383c:	ldr	sl, [pc, #876]	; 13bb0 <__assert_fail@plt+0x26d4>
   13840:	mov	r4, #1
   13844:	mov	r5, #0
   13848:	add	r3, sp, #60	; 0x3c
   1384c:	mov	r2, r3
   13850:	ldrd	r0, [sl, #16]
   13854:	str	r3, [sp, #28]
   13858:	strd	r4, [sp, #8]
   1385c:	strd	r4, [sp]
   13860:	ldr	r3, [pc, #844]	; 13bb4 <__assert_fail@plt+0x26d8>
   13864:	bl	15fa8 <__assert_fail@plt+0x4acc>
   13868:	add	r3, sp, #712	; 0x2c8
   1386c:	strd	r4, [sp, #8]
   13870:	strd	r4, [sp]
   13874:	add	r2, r3, #2
   13878:	ldr	r3, [pc, #824]	; 13bb8 <__assert_fail@plt+0x26dc>
   1387c:	mov	fp, r0
   13880:	ldrd	r0, [sl, #16]
   13884:	bl	15fa8 <__assert_fail@plt+0x4acc>
   13888:	mov	r4, r0
   1388c:	ldrd	r0, [sl, #24]
   13890:	cmp	r0, r8
   13894:	sbcs	r3, r1, r9
   13898:	bge	1393c <__assert_fail@plt+0x2460>
   1389c:	subs	r8, r8, r0
   138a0:	sbc	r9, r9, r1
   138a4:	mov	r0, r8
   138a8:	mov	r1, r9
   138ac:	bl	1ad78 <__assert_fail@plt+0x989c>
   138b0:	vldr	d7, [pc, #736]	; 13b98 <__assert_fail@plt+0x26bc>
   138b4:	ldr	r3, [sp, #28]
   138b8:	strd	r8, [sp, #8]
   138bc:	add	r9, pc, #732	; 0x2dc
   138c0:	ldrd	r8, [r9]
   138c4:	add	r2, r3, #1296	; 0x510
   138c8:	add	r2, r2, #12
   138cc:	ldr	r3, [pc, #736]	; 13bb4 <__assert_fail@plt+0x26d8>
   138d0:	strd	r8, [sp]
   138d4:	vmov	d6, r0, r1
   138d8:	ldrd	r0, [sl, #16]
   138dc:	vdiv.f64	d8, d6, d7
   138e0:	bl	15fa8 <__assert_fail@plt+0x4acc>
   138e4:	mov	r8, r0
   138e8:	bl	11380 <strlen@plt>
   138ec:	ldr	r3, [pc, #712]	; 13bbc <__assert_fail@plt+0x26e0>
   138f0:	ldrh	r1, [r3]
   138f4:	ldrb	r3, [r3, #2]
   138f8:	add	r2, r8, r0
   138fc:	strh	r1, [r8, r0]
   13900:	strb	r3, [r2, #2]
   13904:	orrs	r3, r6, r7
   13908:	beq	13988 <__assert_fail@plt+0x24ac>
   1390c:	ldr	r5, [pc, #684]	; 13bc0 <__assert_fail@plt+0x26e4>
   13910:	ldr	r0, [r5]
   13914:	ldr	r3, [r0, #20]
   13918:	ldr	r2, [r0, #24]
   1391c:	cmp	r3, r2
   13920:	bcs	13b84 <__assert_fail@plt+0x26a8>
   13924:	add	r2, r3, #1
   13928:	mov	r1, #13
   1392c:	str	r2, [r0, #20]
   13930:	ldr	r2, [pc, #652]	; 13bc4 <__assert_fail@plt+0x26e8>
   13934:	strb	r1, [r3]
   13938:	b	13990 <__assert_fail@plt+0x24b4>
   1393c:	mov	r2, #5
   13940:	ldr	r1, [pc, #640]	; 13bc8 <__assert_fail@plt+0x26ec>
   13944:	mov	r0, #0
   13948:	bl	11230 <dcgettext@plt>
   1394c:	ldr	r3, [sp, #28]
   13950:	ldr	r2, [pc, #628]	; 13bcc <__assert_fail@plt+0x26f0>
   13954:	add	ip, r3, #1296	; 0x510
   13958:	ldr	r3, [pc, #624]	; 13bd0 <__assert_fail@plt+0x26f4>
   1395c:	add	ip, ip, #12
   13960:	str	r2, [sp]
   13964:	mov	r1, r3
   13968:	mov	r2, #1
   1396c:	mov	r8, ip
   13970:	vldr	d8, [pc, #560]	; 13ba8 <__assert_fail@plt+0x26cc>
   13974:	str	r0, [sp, #4]
   13978:	mov	r0, ip
   1397c:	bl	114d0 <__snprintf_chk@plt>
   13980:	orrs	r3, r6, r7
   13984:	bne	1390c <__assert_fail@plt+0x2430>
   13988:	ldr	r2, [pc, #580]	; 13bd4 <__assert_fail@plt+0x26f8>
   1398c:	ldr	r5, [pc, #556]	; 13bc0 <__assert_fail@plt+0x26e4>
   13990:	add	r3, sp, #36	; 0x24
   13994:	str	r3, [sp, #28]
   13998:	mov	r3, #24
   1399c:	mov	r1, r3
   139a0:	str	r2, [sp]
   139a4:	vstr	d8, [sp, #8]
   139a8:	mov	r2, #1
   139ac:	ldr	r0, [sp, #28]
   139b0:	bl	114d0 <__snprintf_chk@plt>
   139b4:	mov	r0, fp
   139b8:	bl	11380 <strlen@plt>
   139bc:	add	r0, fp, r0
   139c0:	ldrb	r3, [r0, #-2]
   139c4:	cmp	r3, #32
   139c8:	beq	13aa4 <__assert_fail@plt+0x25c8>
   139cc:	mov	r0, r4
   139d0:	bl	11380 <strlen@plt>
   139d4:	mov	r2, #5
   139d8:	add	r0, r4, r0
   139dc:	ldrb	r3, [r0, #-2]
   139e0:	cmp	r3, #32
   139e4:	beq	13b24 <__assert_fail@plt+0x2648>
   139e8:	ldr	r1, [pc, #488]	; 13bd8 <__assert_fail@plt+0x26fc>
   139ec:	mov	r0, #0
   139f0:	ldr	r9, [r5]
   139f4:	bl	11230 <dcgettext@plt>
   139f8:	ldrd	r2, [sl, #16]
   139fc:	ldr	r1, [sp, #28]
   13a00:	str	r4, [sp, #12]
   13a04:	str	r1, [sp, #16]
   13a08:	strd	r2, [sp]
   13a0c:	str	r8, [sp, #20]
   13a10:	str	fp, [sp, #8]
   13a14:	mov	r1, #1
   13a18:	mov	r2, r0
   13a1c:	mov	r0, r9
   13a20:	bl	11404 <__fprintf_chk@plt>
   13a24:	mov	r4, r0
   13a28:	orrs	r3, r6, r7
   13a2c:	beq	13a64 <__assert_fail@plt+0x2588>
   13a30:	cmp	r4, #0
   13a34:	blt	13a44 <__assert_fail@plt+0x2568>
   13a38:	ldr	r3, [sl, #32]
   13a3c:	cmp	r4, r3
   13a40:	blt	13b64 <__assert_fail@plt+0x2688>
   13a44:	str	r4, [sl, #32]
   13a48:	ldr	r3, [pc, #396]	; 13bdc <__assert_fail@plt+0x2700>
   13a4c:	ldrd	r0, [sl, #16]
   13a50:	strd	r0, [r3]
   13a54:	add	sp, sp, #2016	; 0x7e0
   13a58:	add	sp, sp, #12
   13a5c:	vpop	{d8}
   13a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a64:	ldr	r0, [r5]
   13a68:	ldr	r3, [r0, #20]
   13a6c:	ldr	r2, [r0, #24]
   13a70:	cmp	r3, r2
   13a74:	addcc	r1, r3, #1
   13a78:	movcc	r2, #10
   13a7c:	strcc	r1, [r0, #20]
   13a80:	strbcc	r2, [r3]
   13a84:	bcc	13a48 <__assert_fail@plt+0x256c>
   13a88:	mov	r1, #10
   13a8c:	bl	11434 <__overflow@plt>
   13a90:	b	13a48 <__assert_fail@plt+0x256c>
   13a94:	bl	15f28 <__assert_fail@plt+0x4a4c>
   13a98:	mov	r8, r0
   13a9c:	mov	r9, r1
   13aa0:	b	1383c <__assert_fail@plt+0x2360>
   13aa4:	ldr	r9, [sl, #20]
   13aa8:	ldr	r4, [sl, #16]
   13aac:	mov	r3, #0
   13ab0:	cmp	r9, r3
   13ab4:	mvn	r2, #0
   13ab8:	cmpeq	r4, r2
   13abc:	mov	r0, r4
   13ac0:	mov	r1, r9
   13ac4:	ldr	fp, [r5]
   13ac8:	movls	r3, r4
   13acc:	bls	13ae4 <__assert_fail@plt+0x2608>
   13ad0:	ldr	r2, [pc, #264]	; 13be0 <__assert_fail@plt+0x2704>
   13ad4:	mov	r3, #0
   13ad8:	bl	1aeac <__assert_fail@plt+0x99d0>
   13adc:	add	r3, r2, #999424	; 0xf4000
   13ae0:	add	r3, r3, #576	; 0x240
   13ae4:	mov	r2, #5
   13ae8:	str	r2, [sp]
   13aec:	ldr	r1, [pc, #240]	; 13be4 <__assert_fail@plt+0x2708>
   13af0:	ldr	r2, [pc, #240]	; 13be8 <__assert_fail@plt+0x270c>
   13af4:	mov	r0, #0
   13af8:	bl	114c4 <dcngettext@plt>
   13afc:	ldr	r3, [sp, #28]
   13b00:	stm	sp, {r4, r9}
   13b04:	str	r8, [sp, #12]
   13b08:	str	r3, [sp, #8]
   13b0c:	mov	r1, #1
   13b10:	mov	r2, r0
   13b14:	mov	r0, fp
   13b18:	bl	11404 <__fprintf_chk@plt>
   13b1c:	mov	r4, r0
   13b20:	b	13a28 <__assert_fail@plt+0x254c>
   13b24:	ldr	r1, [pc, #192]	; 13bec <__assert_fail@plt+0x2710>
   13b28:	mov	r0, #0
   13b2c:	ldr	r4, [r5]
   13b30:	bl	11230 <dcgettext@plt>
   13b34:	ldrd	r2, [sl, #16]
   13b38:	ldr	r1, [sp, #28]
   13b3c:	str	r8, [sp, #16]
   13b40:	str	r1, [sp, #12]
   13b44:	strd	r2, [sp]
   13b48:	str	fp, [sp, #8]
   13b4c:	mov	r1, #1
   13b50:	mov	r2, r0
   13b54:	mov	r0, r4
   13b58:	bl	11404 <__fprintf_chk@plt>
   13b5c:	mov	r4, r0
   13b60:	b	13a28 <__assert_fail@plt+0x254c>
   13b64:	ldr	r2, [pc, #132]	; 13bf0 <__assert_fail@plt+0x2714>
   13b68:	ldr	r0, [r5]
   13b6c:	sub	r3, r3, r4
   13b70:	str	r2, [sp]
   13b74:	mov	r1, #1
   13b78:	ldr	r2, [pc, #116]	; 13bf4 <__assert_fail@plt+0x2718>
   13b7c:	bl	11404 <__fprintf_chk@plt>
   13b80:	b	13a44 <__assert_fail@plt+0x2568>
   13b84:	mov	r1, #13
   13b88:	bl	11434 <__overflow@plt>
   13b8c:	ldr	r2, [pc, #48]	; 13bc4 <__assert_fail@plt+0x26e8>
   13b90:	b	13990 <__assert_fail@plt+0x24b4>
   13b94:	nop			; (mov r0, r0)
   13b98:	andeq	r0, r0, r0
   13b9c:	bicmi	ip, sp, r5, ror #26
   13ba0:	blcc	fe6c63a8 <opterr@@GLIBC_2.4+0xfe6981c8>
	...
   13bb0:	andeq	lr, r2, r8, ror #3
   13bb4:	ldrdeq	r0, [r0], -r1
   13bb8:	strdeq	r0, [r0], -r1
   13bbc:	andeq	fp, r1, r8, asr #13
   13bc0:	ldrdeq	lr, [r2], -r8
   13bc4:	andeq	fp, r1, r8, lsr #13
   13bc8:			; <UNDEFINED> instruction: 0x0001b6b8
   13bcc:	andeq	fp, r1, r4, asr #13
   13bd0:	andeq	r0, r0, lr, lsl #5
   13bd4:			; <UNDEFINED> instruction: 0x0001b6b0
   13bd8:	andeq	fp, r1, r4, lsr #14
   13bdc:	andeq	lr, r2, r0, asr r1
   13be0:	andeq	r4, pc, r0, asr #4
   13be4:	andeq	fp, r1, r8, ror #13
   13be8:	andeq	fp, r1, ip, asr #13
   13bec:	andeq	fp, r1, r4, lsl #14
   13bf0:	andeq	ip, r1, r8, lsl #8
   13bf4:	andeq	fp, r1, r8, asr #14
   13bf8:	push	{r4, r5, r6, r7, r8, r9, lr}
   13bfc:	sub	sp, sp, #36	; 0x24
   13c00:	ldr	r7, [pc, #304]	; 13d38 <__assert_fail@plt+0x285c>
   13c04:	ldr	r3, [r7, #8]
   13c08:	cmp	r3, #1
   13c0c:	beq	13d24 <__assert_fail@plt+0x2848>
   13c10:	ldr	r6, [pc, #292]	; 13d3c <__assert_fail@plt+0x2860>
   13c14:	ldr	r8, [pc, #292]	; 13d40 <__assert_fail@plt+0x2864>
   13c18:	ldr	r3, [r6, #32]
   13c1c:	cmp	r3, #0
   13c20:	ble	13c50 <__assert_fail@plt+0x2774>
   13c24:	ldr	r0, [r8]
   13c28:	ldr	r3, [r0, #20]
   13c2c:	ldr	r2, [r0, #24]
   13c30:	cmp	r3, r2
   13c34:	addcc	r1, r3, #1
   13c38:	movcc	r2, #10
   13c3c:	strcc	r1, [r0, #20]
   13c40:	strbcc	r2, [r3]
   13c44:	bcs	13d2c <__assert_fail@plt+0x2850>
   13c48:	mov	r3, #0
   13c4c:	str	r3, [r6, #32]
   13c50:	mov	r2, #5
   13c54:	ldr	r1, [pc, #232]	; 13d44 <__assert_fail@plt+0x2868>
   13c58:	mov	r0, #0
   13c5c:	ldr	r9, [r8]
   13c60:	bl	11230 <dcgettext@plt>
   13c64:	ldrd	r4, [r6, #40]	; 0x28
   13c68:	ldrd	r2, [r6, #48]	; 0x30
   13c6c:	mov	r1, #1
   13c70:	strd	r4, [sp, #24]
   13c74:	ldrd	r4, [r6, #56]	; 0x38
   13c78:	strd	r2, [sp, #16]
   13c7c:	ldrd	r2, [r6, #64]	; 0x40
   13c80:	strd	r4, [sp, #8]
   13c84:	strd	r2, [sp]
   13c88:	mov	r2, r0
   13c8c:	mov	r0, r9
   13c90:	bl	11404 <__fprintf_chk@plt>
   13c94:	ldrd	r4, [r6, #72]	; 0x48
   13c98:	orrs	r3, r4, r5
   13c9c:	beq	13d04 <__assert_fail@plt+0x2828>
   13ca0:	mov	r3, #0
   13ca4:	cmp	r5, r3
   13ca8:	mvn	r2, #0
   13cac:	cmpeq	r4, r2
   13cb0:	ldr	r6, [r8]
   13cb4:	movls	r3, r4
   13cb8:	bls	13cd8 <__assert_fail@plt+0x27fc>
   13cbc:	ldr	r2, [pc, #132]	; 13d48 <__assert_fail@plt+0x286c>
   13cc0:	mov	r3, #0
   13cc4:	mov	r0, r4
   13cc8:	mov	r1, r5
   13ccc:	bl	1aeac <__assert_fail@plt+0x99d0>
   13cd0:	add	r3, r2, #999424	; 0xf4000
   13cd4:	add	r3, r3, #576	; 0x240
   13cd8:	mov	r2, #5
   13cdc:	str	r2, [sp]
   13ce0:	ldr	r1, [pc, #100]	; 13d4c <__assert_fail@plt+0x2870>
   13ce4:	ldr	r2, [pc, #100]	; 13d50 <__assert_fail@plt+0x2874>
   13ce8:	mov	r0, #0
   13cec:	bl	114c4 <dcngettext@plt>
   13cf0:	strd	r4, [sp]
   13cf4:	mov	r1, #1
   13cf8:	mov	r2, r0
   13cfc:	mov	r0, r6
   13d00:	bl	11404 <__fprintf_chk@plt>
   13d04:	ldr	r3, [r7, #8]
   13d08:	cmp	r3, #2
   13d0c:	beq	13d24 <__assert_fail@plt+0x2848>
   13d10:	mov	r0, #0
   13d14:	mov	r1, #0
   13d18:	add	sp, sp, #36	; 0x24
   13d1c:	pop	{r4, r5, r6, r7, r8, r9, lr}
   13d20:	b	13814 <__assert_fail@plt+0x2338>
   13d24:	add	sp, sp, #36	; 0x24
   13d28:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13d2c:	mov	r1, #10
   13d30:	bl	11434 <__overflow@plt>
   13d34:	b	13c48 <__assert_fail@plt+0x276c>
   13d38:	andeq	lr, r2, r0, asr r1
   13d3c:	andeq	lr, r2, r8, ror #3
   13d40:	ldrdeq	lr, [r2], -r8
   13d44:	andeq	fp, r1, ip, asr #14
   13d48:	andeq	r4, pc, r0, asr #4
   13d4c:	muleq	r1, r0, r7
   13d50:	andeq	fp, r1, r8, ror r7
   13d54:	push	{r2, r3}
   13d58:	push	{r4, r5, r6, lr}
   13d5c:	mov	r5, r0
   13d60:	ldr	r4, [pc, #120]	; 13de0 <__assert_fail@plt+0x2904>
   13d64:	sub	sp, sp, #8
   13d68:	mov	r6, r1
   13d6c:	ldr	r3, [r4, #32]
   13d70:	cmp	r3, #0
   13d74:	ble	13da8 <__assert_fail@plt+0x28cc>
   13d78:	ldr	r3, [pc, #100]	; 13de4 <__assert_fail@plt+0x2908>
   13d7c:	ldr	r0, [r3]
   13d80:	ldr	r3, [r0, #20]
   13d84:	ldr	r2, [r0, #24]
   13d88:	cmp	r3, r2
   13d8c:	addcc	r1, r3, #1
   13d90:	movcc	r2, #10
   13d94:	strcc	r1, [r0, #20]
   13d98:	strbcc	r2, [r3]
   13d9c:	bcs	13dd4 <__assert_fail@plt+0x28f8>
   13da0:	mov	r3, #0
   13da4:	str	r3, [r4, #32]
   13da8:	add	ip, sp, #28
   13dac:	mov	r1, r6
   13db0:	mov	r0, r5
   13db4:	mov	r3, ip
   13db8:	ldr	r2, [sp, #24]
   13dbc:	str	ip, [sp, #4]
   13dc0:	bl	18ccc <__assert_fail@plt+0x77f0>
   13dc4:	add	sp, sp, #8
   13dc8:	pop	{r4, r5, r6, lr}
   13dcc:	add	sp, sp, #8
   13dd0:	bx	lr
   13dd4:	mov	r1, #10
   13dd8:	bl	11434 <__overflow@plt>
   13ddc:	b	13da0 <__assert_fail@plt+0x28c4>
   13de0:	andeq	lr, r2, r8, ror #3
   13de4:	ldrdeq	lr, [r2], -r8
   13de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dec:	subs	r5, r0, #0
   13df0:	ldr	r4, [pc, #816]	; 14128 <__assert_fail@plt+0x2c4c>
   13df4:	mov	fp, r3
   13df8:	sub	sp, sp, #36	; 0x24
   13dfc:	ldrbeq	r3, [r4, #96]	; 0x60
   13e00:	ldrbne	r3, [r4, #97]	; 0x61
   13e04:	mov	sl, r2
   13e08:	addeq	ip, r4, #80	; 0x50
   13e0c:	addne	ip, r4, #88	; 0x58
   13e10:	str	r3, [sp, #16]
   13e14:	orrs	r3, sl, fp
   13e18:	beq	13e9c <__assert_fail@plt+0x29c0>
   13e1c:	cmp	r2, #0
   13e20:	sbcs	r3, fp, #0
   13e24:	ldrd	r0, [ip]
   13e28:	blt	14028 <__assert_fail@plt+0x2b4c>
   13e2c:	cmp	r0, #0
   13e30:	sbcs	r3, r1, #0
   13e34:	blt	13fc8 <__assert_fail@plt+0x2aec>
   13e38:	mvn	r2, #0
   13e3c:	subs	r2, r2, sl
   13e40:	mvn	r3, #-2147483648	; 0x80000000
   13e44:	sbc	r3, r3, fp
   13e48:	cmp	r2, r0
   13e4c:	sbcs	r3, r3, r1
   13e50:	movlt	r3, #1
   13e54:	movge	r3, #0
   13e58:	cmp	r3, #0
   13e5c:	beq	13fc8 <__assert_fail@plt+0x2aec>
   13e60:	ldr	r2, [pc, #708]	; 1412c <__assert_fail@plt+0x2c50>
   13e64:	ldr	r8, [pc, #708]	; 14130 <__assert_fail@plt+0x2c54>
   13e68:	mov	r3, #0
   13e6c:	mvn	r9, #-2147483648	; 0x80000000
   13e70:	strd	r2, [ip]
   13e74:	cmp	r5, #0
   13e78:	bne	1404c <__assert_fail@plt+0x2b70>
   13e7c:	ldrd	r2, [r4, #80]	; 0x50
   13e80:	str	r5, [sp, #20]
   13e84:	strd	r2, [sp, #24]
   13e88:	ldrb	r6, [r4, #98]	; 0x62
   13e8c:	cmp	r6, #0
   13e90:	beq	14064 <__assert_fail@plt+0x2b88>
   13e94:	ldrd	r0, [r4, #8]
   13e98:	b	13f2c <__assert_fail@plt+0x2a50>
   13e9c:	ldrd	r8, [ip]
   13ea0:	mov	ip, #0
   13ea4:	orrs	r3, r8, r9
   13ea8:	moveq	r3, #1
   13eac:	movne	r3, #0
   13eb0:	str	r3, [sp, #20]
   13eb4:	orrs	r3, r8, r9
   13eb8:	bne	13ed0 <__assert_fail@plt+0x29f4>
   13ebc:	ldr	r3, [sp, #16]
   13ec0:	cmp	r3, #0
   13ec4:	movne	r8, #0
   13ec8:	movne	r9, #0
   13ecc:	beq	14018 <__assert_fail@plt+0x2b3c>
   13ed0:	mov	r2, #0
   13ed4:	mov	r3, #0
   13ed8:	cmp	r5, #0
   13edc:	strd	r2, [sp, #24]
   13ee0:	beq	13e88 <__assert_fail@plt+0x29ac>
   13ee4:	ldr	r7, [pc, #584]	; 14134 <__assert_fail@plt+0x2c58>
   13ee8:	mvn	r3, #0
   13eec:	mvn	r2, #0
   13ef0:	ldrd	r0, [r7, #16]
   13ef4:	cmp	r1, r3
   13ef8:	cmpeq	r0, r2
   13efc:	beq	1407c <__assert_fail@plt+0x2ba0>
   13f00:	cmp	r0, #0
   13f04:	sbcs	r3, r1, #0
   13f08:	blt	140d0 <__assert_fail@plt+0x2bf4>
   13f0c:	cmp	ip, #0
   13f10:	beq	13f38 <__assert_fail@plt+0x2a5c>
   13f14:	ldrd	r2, [sp, #24]
   13f18:	adds	r2, r2, r8
   13f1c:	adc	r3, r3, r9
   13f20:	adds	r0, r0, r2
   13f24:	adc	r1, r1, r3
   13f28:	strd	r0, [r7, #16]
   13f2c:	cmp	r0, #0
   13f30:	sbcs	r3, r1, #0
   13f34:	blt	1407c <__assert_fail@plt+0x2ba0>
   13f38:	orrs	r3, sl, fp
   13f3c:	moveq	r3, #1
   13f40:	movne	r3, #0
   13f44:	orrs	r2, r8, r9
   13f48:	moveq	r3, #0
   13f4c:	andne	r3, r3, #1
   13f50:	cmp	r3, #0
   13f54:	beq	14084 <__assert_fail@plt+0x2ba8>
   13f58:	ldr	r3, [sp, #16]
   13f5c:	cmp	r3, #0
   13f60:	beq	140b0 <__assert_fail@plt+0x2bd4>
   13f64:	subs	r0, r0, r8
   13f68:	sbc	r1, r1, r9
   13f6c:	mov	r6, r0
   13f70:	mov	r7, r1
   13f74:	mov	r8, #0
   13f78:	mov	r9, #0
   13f7c:	ldr	r2, [r4, #100]	; 0x64
   13f80:	mov	r0, r6
   13f84:	mov	r1, r7
   13f88:	asr	r3, r2, #31
   13f8c:	bl	1add8 <__assert_fail@plt+0x98fc>
   13f90:	subs	r6, r6, r2
   13f94:	sbc	r7, r7, r3
   13f98:	mov	r1, #4
   13f9c:	mov	r2, r6
   13fa0:	strd	r8, [sp]
   13fa4:	mov	r3, r7
   13fa8:	mov	r0, r5
   13fac:	str	r1, [sp, #8]
   13fb0:	bl	11188 <posix_fadvise64@plt>
   13fb4:	adds	r6, r0, #1
   13fb8:	movne	r6, #1
   13fbc:	mov	r0, r6
   13fc0:	add	sp, sp, #36	; 0x24
   13fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fc8:	adds	r0, r0, sl
   13fcc:	adc	r1, r1, fp
   13fd0:	ldr	r8, [pc, #340]	; 1412c <__assert_fail@plt+0x2c50>
   13fd4:	asr	r6, r1, #31
   13fd8:	eor	r2, r0, r6
   13fdc:	asr	r7, r6, #31
   13fe0:	subs	r2, r2, r6
   13fe4:	eor	r3, r1, r7
   13fe8:	sbc	r3, r3, r7
   13fec:	mov	r9, #0
   13ff0:	and	r2, r2, r8
   13ff4:	and	r3, r3, r9
   13ff8:	eor	r2, r2, r6
   13ffc:	subs	r2, r2, r6
   14000:	eor	r3, r3, r7
   14004:	sbc	r3, r3, r7
   14008:	cmp	r2, r0
   1400c:	sbcs	lr, r3, r1
   14010:	strd	r2, [ip]
   14014:	blt	140f0 <__assert_fail@plt+0x2c14>
   14018:	mov	r6, #1
   1401c:	mov	r0, r6
   14020:	add	sp, sp, #36	; 0x24
   14024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14028:	mov	r2, #0
   1402c:	subs	r2, r2, sl
   14030:	mov	r3, #-2147483648	; 0x80000000
   14034:	sbc	r3, r3, fp
   14038:	cmp	r0, r2
   1403c:	sbcs	r3, r1, r3
   14040:	movlt	r3, #1
   14044:	movge	r3, #0
   14048:	b	13e58 <__assert_fail@plt+0x297c>
   1404c:	ldrd	r2, [r4, #88]	; 0x58
   14050:	mov	ip, #1
   14054:	strd	r2, [sp, #24]
   14058:	mov	r3, #0
   1405c:	str	r3, [sp, #20]
   14060:	b	13ee4 <__assert_fail@plt+0x2a08>
   14064:	bl	113a4 <__errno_location@plt>
   14068:	mov	r3, #29
   1406c:	str	r3, [r0]
   14070:	mov	r0, r6
   14074:	add	sp, sp, #36	; 0x24
   14078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1407c:	mov	r6, #0
   14080:	b	1401c <__assert_fail@plt+0x2b40>
   14084:	ldrd	r2, [sp, #24]
   14088:	subs	r0, r0, r8
   1408c:	sbc	r1, r1, r9
   14090:	subs	r2, r0, r2
   14094:	sbc	r3, r1, r3
   14098:	mov	r7, r3
   1409c:	ldr	r3, [sp, #20]
   140a0:	mov	r6, r2
   140a4:	cmp	r3, #0
   140a8:	beq	13f98 <__assert_fail@plt+0x2abc>
   140ac:	b	13f7c <__assert_fail@plt+0x2aa0>
   140b0:	ldrd	r2, [sp, #24]
   140b4:	subs	r0, r0, r8
   140b8:	sbc	r1, r1, r9
   140bc:	subs	r2, r0, r2
   140c0:	sbc	r3, r1, r3
   140c4:	mov	r6, r2
   140c8:	mov	r7, r3
   140cc:	b	13f98 <__assert_fail@plt+0x2abc>
   140d0:	mov	r3, #1
   140d4:	str	r3, [sp]
   140d8:	mov	r2, #0
   140dc:	mov	r3, #0
   140e0:	mov	r0, r5
   140e4:	bl	112a8 <lseek64@plt>
   140e8:	strd	r0, [r7, #16]
   140ec:	b	13f2c <__assert_fail@plt+0x2a50>
   140f0:	subs	r0, r0, r2
   140f4:	sbc	r1, r1, r3
   140f8:	mov	r8, r0
   140fc:	mov	r9, r1
   14100:	orrs	r3, r8, r9
   14104:	beq	14018 <__assert_fail@plt+0x2b3c>
   14108:	orr	r2, r0, sl
   1410c:	orr	r3, r1, fp
   14110:	orrs	r3, r2, r3
   14114:	bne	13e74 <__assert_fail@plt+0x2998>
   14118:	mov	r3, #0
   1411c:	mov	ip, #1
   14120:	str	r3, [sp, #20]
   14124:	b	13ebc <__assert_fail@plt+0x29e0>
   14128:	andeq	lr, r2, r8, ror #3
   1412c:	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
   14130:			; <UNDEFINED> instruction: 0xfffe0000
   14134:	andeq	lr, r2, r0, asr r1
   14138:	ldr	r3, [pc, #44]	; 1416c <__assert_fail@plt+0x2c90>
   1413c:	ldrb	r3, [r3, #24]
   14140:	cmp	r3, #0
   14144:	bne	14168 <__assert_fail@plt+0x2c8c>
   14148:	ldr	r3, [pc, #32]	; 14170 <__assert_fail@plt+0x2c94>
   1414c:	push	{r4, lr}
   14150:	ldr	r0, [r3]
   14154:	bl	159d0 <__assert_fail@plt+0x44f4>
   14158:	cmp	r0, #0
   1415c:	popeq	{r4, pc}
   14160:	mov	r0, #1
   14164:	bl	111dc <_exit@plt>
   14168:	b	15a6c <__assert_fail@plt+0x4590>
   1416c:	andeq	lr, r2, r0, asr r1
   14170:	ldrdeq	lr, [r2], -r8
   14174:	push	{r4, r5, r6, lr}
   14178:	mov	r5, r0
   1417c:	bl	113a4 <__errno_location@plt>
   14180:	mov	r4, r0
   14184:	ldr	r3, [r0]
   14188:	b	141a4 <__assert_fail@plt+0x2cc8>
   1418c:	bl	114b8 <close@plt>
   14190:	cmp	r0, #0
   14194:	popeq	{r4, r5, r6, pc}
   14198:	ldr	r3, [r4]
   1419c:	cmp	r3, #9
   141a0:	beq	141b8 <__assert_fail@plt+0x2cdc>
   141a4:	cmp	r3, #4
   141a8:	mov	r0, r5
   141ac:	beq	1418c <__assert_fail@plt+0x2cb0>
   141b0:	mvn	r0, #0
   141b4:	pop	{r4, r5, r6, pc}
   141b8:	mov	r0, #0
   141bc:	pop	{r4, r5, r6, pc}
   141c0:	push	{r4, lr}
   141c4:	ldr	r4, [pc, #48]	; 141fc <__assert_fail@plt+0x2d20>
   141c8:	ldr	r3, [r4, #108]	; 0x6c
   141cc:	cmp	r3, #0
   141d0:	popne	{r4, pc}
   141d4:	ldr	r3, [r4, #112]	; 0x70
   141d8:	ldr	r1, [r4, #104]	; 0x68
   141dc:	ldr	r0, [r4, #100]	; 0x64
   141e0:	lsl	r3, r3, #24
   141e4:	add	r1, r1, r3, lsr #31
   141e8:	bl	11488 <aligned_alloc@plt>
   141ec:	cmp	r0, #0
   141f0:	str	r0, [r4, #108]	; 0x6c
   141f4:	popne	{r4, pc}
   141f8:	bl	114e8 <__assert_fail@plt+0xc>
   141fc:	andeq	lr, r2, r8, ror #3
   14200:	push	{r4, lr}
   14204:	ldr	r4, [pc, #64]	; 1424c <__assert_fail@plt+0x2d70>
   14208:	ldr	r3, [r4, #120]	; 0x78
   1420c:	cmp	r3, #0
   14210:	popne	{r4, pc}
   14214:	ldr	r3, [r4, #112]	; 0x70
   14218:	tst	r3, #2048	; 0x800
   1421c:	beq	1423c <__assert_fail@plt+0x2d60>
   14220:	ldr	r1, [r4, #116]	; 0x74
   14224:	ldr	r0, [r4, #100]	; 0x64
   14228:	bl	11488 <aligned_alloc@plt>
   1422c:	cmp	r0, #0
   14230:	str	r0, [r4, #120]	; 0x78
   14234:	popne	{r4, pc}
   14238:	bl	11554 <__assert_fail@plt+0x78>
   1423c:	bl	141c0 <__assert_fail@plt+0x2ce4>
   14240:	ldr	r3, [r4, #108]	; 0x6c
   14244:	str	r3, [r4, #120]	; 0x78
   14248:	pop	{r4, pc}
   1424c:	andeq	lr, r2, r8, ror #3
   14250:	push	{r4, r5, r6, r7, r8, r9, lr}
   14254:	sub	sp, sp, #28
   14258:	add	r3, sp, #24
   1425c:	ldr	r2, [pc, #492]	; 14450 <__assert_fail@plt+0x2f74>
   14260:	mov	r4, #0
   14264:	mov	r5, #0
   14268:	mov	r7, r1
   1426c:	strd	r4, [r3, #-8]!
   14270:	add	r1, sp, #8
   14274:	str	r2, [sp]
   14278:	mov	r2, #10
   1427c:	mov	r8, r0
   14280:	bl	19830 <__assert_fail@plt+0x8354>
   14284:	bic	r3, r0, #1
   14288:	cmp	r3, #2
   1428c:	mov	r6, r0
   14290:	beq	142dc <__assert_fail@plt+0x2e00>
   14294:	ldrd	r4, [sp, #16]
   14298:	cmp	r4, #0
   1429c:	sbcs	r3, r5, #0
   142a0:	blt	142bc <__assert_fail@plt+0x2de0>
   142a4:	cmp	r6, #0
   142a8:	strne	r6, [r7]
   142ac:	mov	r0, r4
   142b0:	mov	r1, r5
   142b4:	add	sp, sp, #28
   142b8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   142bc:	orr	r6, r6, #1
   142c0:	mvn	r4, #0
   142c4:	mvn	r5, #-2147483648	; 0x80000000
   142c8:	mov	r0, r4
   142cc:	mov	r1, r5
   142d0:	str	r6, [r7]
   142d4:	add	sp, sp, #28
   142d8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   142dc:	ldr	r0, [sp, #8]
   142e0:	ldrb	r3, [r0]
   142e4:	cmp	r3, #120	; 0x78
   142e8:	bne	14294 <__assert_fail@plt+0x2db8>
   142ec:	add	r1, sp, #24
   142f0:	mov	r3, #0
   142f4:	str	r3, [r1, #-12]!
   142f8:	add	r0, r0, #1
   142fc:	bl	14250 <__assert_fail@plt+0x2d74>
   14300:	ldr	r9, [sp, #12]
   14304:	bics	r3, r9, #1
   14308:	strne	r9, [r7]
   1430c:	mov	r4, r0
   14310:	mov	r5, r1
   14314:	bne	142ac <__assert_fail@plt+0x2dd0>
   14318:	cmp	r0, #0
   1431c:	sbcs	r3, r1, #0
   14320:	blt	143d0 <__assert_fail@plt+0x2ef4>
   14324:	orrs	r3, r4, r5
   14328:	beq	14350 <__assert_fail@plt+0x2e74>
   1432c:	mov	r2, r0
   14330:	mov	r3, r1
   14334:	mvn	r0, #0
   14338:	mvn	r1, #-2147483648	; 0x80000000
   1433c:	bl	1add8 <__assert_fail@plt+0x98fc>
   14340:	ldrd	r2, [sp, #16]
   14344:	cmp	r1, r3
   14348:	cmpeq	r0, r2
   1434c:	bcc	14414 <__assert_fail@plt+0x2f38>
   14350:	ldr	r3, [sp, #20]
   14354:	ldr	r2, [sp, #16]
   14358:	mul	r3, r4, r3
   1435c:	mla	r3, r2, r5, r3
   14360:	umull	r4, r5, r2, r4
   14364:	add	r5, r3, r5
   14368:	orrs	r3, r4, r5
   1436c:	bne	14428 <__assert_fail@plt+0x2f4c>
   14370:	mov	r0, r8
   14374:	mov	r2, #2
   14378:	ldr	r1, [pc, #212]	; 14454 <__assert_fail@plt+0x2f78>
   1437c:	bl	11494 <strncmp@plt>
   14380:	subs	r6, r0, #0
   14384:	bne	142ac <__assert_fail@plt+0x2dd0>
   14388:	mov	r2, #5
   1438c:	ldr	r1, [pc, #196]	; 14458 <__assert_fail@plt+0x2f7c>
   14390:	bl	11230 <dcgettext@plt>
   14394:	ldr	r1, [pc, #184]	; 14454 <__assert_fail@plt+0x2f78>
   14398:	mov	r7, r0
   1439c:	mov	r0, r6
   143a0:	bl	18be8 <__assert_fail@plt+0x770c>
   143a4:	ldr	r1, [pc, #176]	; 1445c <__assert_fail@plt+0x2f80>
   143a8:	mov	r8, r0
   143ac:	mov	r0, #1
   143b0:	bl	18be8 <__assert_fail@plt+0x770c>
   143b4:	mov	r3, r8
   143b8:	mov	r2, r7
   143bc:	mov	r1, r6
   143c0:	str	r0, [sp]
   143c4:	mov	r0, r6
   143c8:	bl	13d54 <__assert_fail@plt+0x2878>
   143cc:	b	142ac <__assert_fail@plt+0x2dd0>
   143d0:	mvn	r3, #0
   143d4:	mvn	r2, #0
   143d8:	cmp	r1, r3
   143dc:	cmpeq	r0, r2
   143e0:	beq	14438 <__assert_fail@plt+0x2f5c>
   143e4:	mov	r2, r0
   143e8:	mov	r3, r1
   143ec:	mov	r0, #0
   143f0:	mov	r1, #-2147483648	; 0x80000000
   143f4:	bl	1add8 <__assert_fail@plt+0x98fc>
   143f8:	ldrd	r2, [sp, #16]
   143fc:	cmp	r1, r3
   14400:	cmpeq	r0, r2
   14404:	movcc	r3, #1
   14408:	movcs	r3, #0
   1440c:	cmp	r3, #0
   14410:	beq	14350 <__assert_fail@plt+0x2e74>
   14414:	mov	r3, #1
   14418:	str	r3, [r7]
   1441c:	mvn	r4, #0
   14420:	mvn	r5, #-2147483648	; 0x80000000
   14424:	b	142ac <__assert_fail@plt+0x2dd0>
   14428:	orr	r6, r6, r9
   1442c:	tst	r6, #1
   14430:	bne	14414 <__assert_fail@plt+0x2f38>
   14434:	b	142ac <__assert_fail@plt+0x2dd0>
   14438:	ldrd	r2, [sp, #16]
   1443c:	cmp	r3, #-2147483648	; 0x80000000
   14440:	cmpeq	r2, #0
   14444:	movhi	r3, #1
   14448:	movls	r3, #0
   1444c:	b	1440c <__assert_fail@plt+0x2f30>
   14450:	andeq	fp, r1, ip, lsl r8
   14454:	andeq	fp, r1, ip, lsr #16
   14458:	andeq	fp, r1, r0, lsr r8
   1445c:	andeq	fp, r1, r0, ror r8
   14460:	subs	r4, r0, #0
   14464:	push	{r7, lr}
   14468:	sub	sp, sp, #56	; 0x38
   1446c:	beq	144a8 <__assert_fail@plt+0x2fcc>
   14470:	ldr	r3, [pc, #1080]	; 148b0 <__assert_fail@plt+0x33d4>
   14474:	mov	r2, #5
   14478:	ldr	r1, [pc, #1076]	; 148b4 <__assert_fail@plt+0x33d8>
   1447c:	mov	r0, #0
   14480:	ldr	r5, [r3]
   14484:	bl	11230 <dcgettext@plt>
   14488:	ldr	r3, [pc, #1064]	; 148b8 <__assert_fail@plt+0x33dc>
   1448c:	mov	r1, #1
   14490:	ldr	r3, [r3]
   14494:	mov	r2, r0
   14498:	mov	r0, r5
   1449c:	bl	11404 <__fprintf_chk@plt>
   144a0:	mov	r0, r4
   144a4:	bl	11374 <exit@plt>
   144a8:	mov	r2, #5
   144ac:	ldr	r1, [pc, #1032]	; 148bc <__assert_fail@plt+0x33e0>
   144b0:	bl	11230 <dcgettext@plt>
   144b4:	ldr	r3, [pc, #1020]	; 148b8 <__assert_fail@plt+0x33dc>
   144b8:	ldr	r6, [pc, #1024]	; 148c0 <__assert_fail@plt+0x33e4>
   144bc:	ldr	r5, [pc, #1024]	; 148c4 <__assert_fail@plt+0x33e8>
   144c0:	ldr	r3, [r3]
   144c4:	mov	r2, r3
   144c8:	mov	r1, r0
   144cc:	mov	r0, #1
   144d0:	bl	113e0 <__printf_chk@plt>
   144d4:	mov	r2, #5
   144d8:	ldr	r1, [pc, #1000]	; 148c8 <__assert_fail@plt+0x33ec>
   144dc:	mov	r0, r4
   144e0:	bl	11230 <dcgettext@plt>
   144e4:	ldr	r1, [r6]
   144e8:	bl	11158 <fputs_unlocked@plt>
   144ec:	mov	r2, #5
   144f0:	ldr	r1, [pc, #980]	; 148cc <__assert_fail@plt+0x33f0>
   144f4:	mov	r0, r4
   144f8:	bl	11230 <dcgettext@plt>
   144fc:	ldr	r1, [r6]
   14500:	bl	11158 <fputs_unlocked@plt>
   14504:	mov	r2, #5
   14508:	ldr	r1, [pc, #960]	; 148d0 <__assert_fail@plt+0x33f4>
   1450c:	mov	r0, r4
   14510:	bl	11230 <dcgettext@plt>
   14514:	ldr	r1, [r6]
   14518:	bl	11158 <fputs_unlocked@plt>
   1451c:	mov	r2, #5
   14520:	ldr	r1, [pc, #940]	; 148d4 <__assert_fail@plt+0x33f8>
   14524:	mov	r0, r4
   14528:	bl	11230 <dcgettext@plt>
   1452c:	ldr	r1, [r6]
   14530:	bl	11158 <fputs_unlocked@plt>
   14534:	mov	r2, #5
   14538:	ldr	r1, [pc, #920]	; 148d8 <__assert_fail@plt+0x33fc>
   1453c:	mov	r0, r4
   14540:	bl	11230 <dcgettext@plt>
   14544:	ldr	r1, [r6]
   14548:	bl	11158 <fputs_unlocked@plt>
   1454c:	mov	r2, #5
   14550:	ldr	r1, [pc, #900]	; 148dc <__assert_fail@plt+0x3400>
   14554:	mov	r0, r4
   14558:	bl	11230 <dcgettext@plt>
   1455c:	ldr	r1, [r6]
   14560:	bl	11158 <fputs_unlocked@plt>
   14564:	mov	r2, #5
   14568:	ldr	r1, [pc, #880]	; 148e0 <__assert_fail@plt+0x3404>
   1456c:	mov	r0, r4
   14570:	bl	11230 <dcgettext@plt>
   14574:	ldr	r1, [r6]
   14578:	bl	11158 <fputs_unlocked@plt>
   1457c:	mov	r2, #5
   14580:	ldr	r1, [pc, #860]	; 148e4 <__assert_fail@plt+0x3408>
   14584:	mov	r0, r4
   14588:	bl	11230 <dcgettext@plt>
   1458c:	ldr	r1, [r6]
   14590:	bl	11158 <fputs_unlocked@plt>
   14594:	mov	r2, #5
   14598:	ldr	r1, [pc, #840]	; 148e8 <__assert_fail@plt+0x340c>
   1459c:	mov	r0, r4
   145a0:	bl	11230 <dcgettext@plt>
   145a4:	ldr	r1, [r6]
   145a8:	bl	11158 <fputs_unlocked@plt>
   145ac:	mov	r2, #5
   145b0:	ldr	r1, [pc, #820]	; 148ec <__assert_fail@plt+0x3410>
   145b4:	mov	r0, r4
   145b8:	bl	11230 <dcgettext@plt>
   145bc:	ldr	r1, [r6]
   145c0:	bl	11158 <fputs_unlocked@plt>
   145c4:	mov	r2, #5
   145c8:	ldr	r1, [pc, #800]	; 148f0 <__assert_fail@plt+0x3414>
   145cc:	mov	r0, r4
   145d0:	bl	11230 <dcgettext@plt>
   145d4:	ldr	r1, [r6]
   145d8:	bl	11158 <fputs_unlocked@plt>
   145dc:	mov	r2, #5
   145e0:	ldr	r1, [pc, #780]	; 148f4 <__assert_fail@plt+0x3418>
   145e4:	mov	r0, r4
   145e8:	bl	11230 <dcgettext@plt>
   145ec:	ldr	r1, [r6]
   145f0:	bl	11158 <fputs_unlocked@plt>
   145f4:	mov	r2, #5
   145f8:	ldr	r1, [pc, #760]	; 148f8 <__assert_fail@plt+0x341c>
   145fc:	mov	r0, r4
   14600:	bl	11230 <dcgettext@plt>
   14604:	ldr	r1, [r6]
   14608:	bl	11158 <fputs_unlocked@plt>
   1460c:	mov	r2, #5
   14610:	ldr	r1, [pc, #740]	; 148fc <__assert_fail@plt+0x3420>
   14614:	mov	r0, r4
   14618:	bl	11230 <dcgettext@plt>
   1461c:	ldr	r1, [r6]
   14620:	bl	11158 <fputs_unlocked@plt>
   14624:	mov	r2, #5
   14628:	ldr	r1, [pc, #720]	; 14900 <__assert_fail@plt+0x3424>
   1462c:	mov	r0, r4
   14630:	bl	11230 <dcgettext@plt>
   14634:	ldr	r1, [r6]
   14638:	bl	11158 <fputs_unlocked@plt>
   1463c:	mov	r2, #5
   14640:	ldr	r1, [pc, #700]	; 14904 <__assert_fail@plt+0x3428>
   14644:	mov	r0, r4
   14648:	bl	11230 <dcgettext@plt>
   1464c:	ldr	r1, [r6]
   14650:	bl	11158 <fputs_unlocked@plt>
   14654:	mov	r2, #5
   14658:	ldr	r1, [pc, #680]	; 14908 <__assert_fail@plt+0x342c>
   1465c:	mov	r0, r4
   14660:	bl	11230 <dcgettext@plt>
   14664:	ldr	r1, [r6]
   14668:	bl	11158 <fputs_unlocked@plt>
   1466c:	mov	r2, #5
   14670:	ldr	r1, [pc, #660]	; 1490c <__assert_fail@plt+0x3430>
   14674:	mov	r0, r4
   14678:	bl	11230 <dcgettext@plt>
   1467c:	ldr	r1, [r6]
   14680:	bl	11158 <fputs_unlocked@plt>
   14684:	mov	r2, #5
   14688:	ldr	r1, [pc, #640]	; 14910 <__assert_fail@plt+0x3434>
   1468c:	mov	r0, r4
   14690:	bl	11230 <dcgettext@plt>
   14694:	ldr	r1, [r6]
   14698:	bl	11158 <fputs_unlocked@plt>
   1469c:	mov	r2, #5
   146a0:	ldr	r1, [pc, #620]	; 14914 <__assert_fail@plt+0x3438>
   146a4:	mov	r0, r4
   146a8:	bl	11230 <dcgettext@plt>
   146ac:	ldr	r2, [pc, #612]	; 14918 <__assert_fail@plt+0x343c>
   146b0:	mov	r1, r0
   146b4:	mov	r0, #1
   146b8:	bl	113e0 <__printf_chk@plt>
   146bc:	mov	r2, #5
   146c0:	ldr	r1, [pc, #596]	; 1491c <__assert_fail@plt+0x3440>
   146c4:	mov	r0, r4
   146c8:	bl	11230 <dcgettext@plt>
   146cc:	ldr	r1, [r6]
   146d0:	bl	11158 <fputs_unlocked@plt>
   146d4:	mov	r2, #5
   146d8:	ldr	r1, [pc, #576]	; 14920 <__assert_fail@plt+0x3444>
   146dc:	mov	r0, r4
   146e0:	bl	11230 <dcgettext@plt>
   146e4:	ldr	r1, [r6]
   146e8:	bl	11158 <fputs_unlocked@plt>
   146ec:	ldm	r5!, {r0, r1, r2, r3}
   146f0:	mov	lr, sp
   146f4:	stmia	lr!, {r0, r1, r2, r3}
   146f8:	ldm	r5!, {r0, r1, r2, r3}
   146fc:	ldr	ip, [sp]
   14700:	stmia	lr!, {r0, r1, r2, r3}
   14704:	cmp	ip, #0
   14708:	ldm	r5!, {r0, r1, r2, r3}
   1470c:	stmia	lr!, {r0, r1, r2, r3}
   14710:	ldm	r5, {r0, r1}
   14714:	moveq	r5, sp
   14718:	stm	lr, {r0, r1}
   1471c:	beq	1474c <__assert_fail@plt+0x3270>
   14720:	ldr	r7, [pc, #508]	; 14924 <__assert_fail@plt+0x3448>
   14724:	mov	r5, sp
   14728:	b	14738 <__assert_fail@plt+0x325c>
   1472c:	ldr	ip, [r5, #8]!
   14730:	cmp	ip, #0
   14734:	beq	1474c <__assert_fail@plt+0x3270>
   14738:	mov	r1, ip
   1473c:	mov	r0, r7
   14740:	bl	1117c <strcmp@plt>
   14744:	cmp	r0, #0
   14748:	bne	1472c <__assert_fail@plt+0x3250>
   1474c:	ldr	r5, [r5, #4]
   14750:	mov	r2, #5
   14754:	cmp	r5, #0
   14758:	ldr	r1, [pc, #456]	; 14928 <__assert_fail@plt+0x344c>
   1475c:	beq	14804 <__assert_fail@plt+0x3328>
   14760:	mov	r0, #0
   14764:	bl	11230 <dcgettext@plt>
   14768:	ldr	r3, [pc, #444]	; 1492c <__assert_fail@plt+0x3450>
   1476c:	ldr	r2, [pc, #444]	; 14930 <__assert_fail@plt+0x3454>
   14770:	mov	r1, r0
   14774:	mov	r0, #1
   14778:	bl	113e0 <__printf_chk@plt>
   1477c:	mov	r1, #0
   14780:	mov	r0, #5
   14784:	bl	11440 <setlocale@plt>
   14788:	cmp	r0, #0
   1478c:	ldreq	r7, [pc, #400]	; 14924 <__assert_fail@plt+0x3448>
   14790:	beq	147ac <__assert_fail@plt+0x32d0>
   14794:	mov	r2, #3
   14798:	ldr	r1, [pc, #404]	; 14934 <__assert_fail@plt+0x3458>
   1479c:	bl	11494 <strncmp@plt>
   147a0:	ldr	r7, [pc, #380]	; 14924 <__assert_fail@plt+0x3448>
   147a4:	cmp	r0, #0
   147a8:	bne	14894 <__assert_fail@plt+0x33b8>
   147ac:	mov	r2, #5
   147b0:	ldr	r1, [pc, #384]	; 14938 <__assert_fail@plt+0x345c>
   147b4:	mov	r0, #0
   147b8:	bl	11230 <dcgettext@plt>
   147bc:	ldr	r3, [pc, #352]	; 14924 <__assert_fail@plt+0x3448>
   147c0:	ldr	r2, [pc, #356]	; 1492c <__assert_fail@plt+0x3450>
   147c4:	mov	r1, r0
   147c8:	mov	r0, #1
   147cc:	bl	113e0 <__printf_chk@plt>
   147d0:	mov	r2, #5
   147d4:	ldr	r1, [pc, #352]	; 1493c <__assert_fail@plt+0x3460>
   147d8:	mov	r0, #0
   147dc:	bl	11230 <dcgettext@plt>
   147e0:	ldr	r2, [pc, #344]	; 14940 <__assert_fail@plt+0x3464>
   147e4:	cmp	r5, r7
   147e8:	ldr	r3, [pc, #340]	; 14944 <__assert_fail@plt+0x3468>
   147ec:	movne	r3, r2
   147f0:	mov	r1, r0
   147f4:	mov	r2, r5
   147f8:	mov	r0, #1
   147fc:	bl	113e0 <__printf_chk@plt>
   14800:	b	144a0 <__assert_fail@plt+0x2fc4>
   14804:	mov	r0, r5
   14808:	bl	11230 <dcgettext@plt>
   1480c:	ldr	r3, [pc, #280]	; 1492c <__assert_fail@plt+0x3450>
   14810:	ldr	r2, [pc, #280]	; 14930 <__assert_fail@plt+0x3454>
   14814:	mov	r1, r0
   14818:	mov	r0, #1
   1481c:	bl	113e0 <__printf_chk@plt>
   14820:	mov	r1, r5
   14824:	mov	r0, #5
   14828:	bl	11440 <setlocale@plt>
   1482c:	cmp	r0, #0
   14830:	beq	14848 <__assert_fail@plt+0x336c>
   14834:	mov	r2, #3
   14838:	ldr	r1, [pc, #244]	; 14934 <__assert_fail@plt+0x3458>
   1483c:	bl	11494 <strncmp@plt>
   14840:	cmp	r0, #0
   14844:	bne	1488c <__assert_fail@plt+0x33b0>
   14848:	mov	r2, #5
   1484c:	ldr	r1, [pc, #228]	; 14938 <__assert_fail@plt+0x345c>
   14850:	mov	r0, #0
   14854:	bl	11230 <dcgettext@plt>
   14858:	ldr	r3, [pc, #196]	; 14924 <__assert_fail@plt+0x3448>
   1485c:	ldr	r2, [pc, #200]	; 1492c <__assert_fail@plt+0x3450>
   14860:	mov	r5, r3
   14864:	mov	r1, r0
   14868:	mov	r0, #1
   1486c:	bl	113e0 <__printf_chk@plt>
   14870:	ldr	r1, [pc, #196]	; 1493c <__assert_fail@plt+0x3460>
   14874:	mov	r2, #5
   14878:	mov	r0, #0
   1487c:	bl	11230 <dcgettext@plt>
   14880:	ldr	r3, [pc, #188]	; 14944 <__assert_fail@plt+0x3468>
   14884:	mov	r1, r0
   14888:	b	147f4 <__assert_fail@plt+0x3318>
   1488c:	ldr	r7, [pc, #144]	; 14924 <__assert_fail@plt+0x3448>
   14890:	mov	r5, r7
   14894:	mov	r2, #5
   14898:	ldr	r1, [pc, #168]	; 14948 <__assert_fail@plt+0x346c>
   1489c:	mov	r0, #0
   148a0:	bl	11230 <dcgettext@plt>
   148a4:	ldr	r1, [r6]
   148a8:	bl	11158 <fputs_unlocked@plt>
   148ac:	b	147ac <__assert_fail@plt+0x32d0>
   148b0:	ldrdeq	lr, [r2], -r8
   148b4:	andeq	fp, r1, r8, ror r8
   148b8:	andeq	lr, r2, r4, asr r4
   148bc:	andeq	fp, r1, r0, lsr #17
   148c0:	ldrdeq	lr, [r2], -ip
   148c4:	strdeq	fp, [r1], -r0
   148c8:	andeq	fp, r1, ip, asr #17
   148cc:	andeq	fp, r1, ip, ror #20
   148d0:	andeq	fp, r1, ip, lsl #26
   148d4:	andeq	fp, r1, r0, lsr lr
   148d8:	andeq	ip, r1, r0, ror r0
   148dc:	muleq	r1, r0, r1
   148e0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   148e4:	andeq	ip, r1, r4, lsr #4
   148e8:	andeq	ip, r1, ip, asr #4
   148ec:	andeq	ip, r1, r8, ror r2
   148f0:	andeq	ip, r1, r8, lsr #5
   148f4:	andeq	ip, r1, r4, ror #5
   148f8:	andeq	ip, r1, r8, lsl #6
   148fc:	andeq	ip, r1, r0, lsr r3
   14900:	andeq	ip, r1, ip, ror #6
   14904:	andeq	ip, r1, r8, lsr #7
   14908:	andeq	ip, r1, ip, asr #7
   1490c:	andeq	ip, r1, ip, lsl #8
   14910:	andeq	ip, r1, r8, asr #8
   14914:	andeq	ip, r1, r4, lsl #9
   14918:	andeq	ip, r1, ip, lsl #10
   1491c:	andeq	ip, r1, r4, lsl r5
   14920:	andeq	ip, r1, r4, asr #10
   14924:	andeq	fp, r1, r4, ror r8
   14928:	andeq	ip, r1, ip, ror r5
   1492c:	muleq	r1, r4, r5
   14930:			; <UNDEFINED> instruction: 0x0001c5bc
   14934:	andeq	ip, r1, ip, asr #11
   14938:	andeq	ip, r1, r8, lsl r6
   1493c:	andeq	ip, r1, r4, lsr r6
   14940:	andeq	ip, r1, r8, lsl #8
   14944:	andeq	ip, r1, r0, ror #22
   14948:	ldrdeq	ip, [r1], -r0
   1494c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14950:	mov	r4, r0
   14954:	sub	sp, sp, #12
   14958:	mov	r8, r2
   1495c:	mov	r9, r3
   14960:	sub	r7, r1, #1
   14964:	mov	r6, #0
   14968:	mov	r5, #44	; 0x2c
   1496c:	mov	r1, r5
   14970:	mov	r0, r4
   14974:	bl	1138c <strchr@plt>
   14978:	mov	lr, r7
   1497c:	mov	r2, lr
   14980:	mov	r1, r4
   14984:	b	14994 <__assert_fail@plt+0x34b8>
   14988:	ldrb	ip, [r1], #1
   1498c:	cmp	ip, r3
   14990:	bne	149bc <__assert_fail@plt+0x34e0>
   14994:	ldrb	r3, [r2, #1]!
   14998:	cmp	r3, #0
   1499c:	bne	14988 <__assert_fail@plt+0x34ac>
   149a0:	ldrb	r3, [r1]
   149a4:	cmp	r3, #0
   149a8:	cmpne	r3, #44	; 0x2c
   149ac:	bne	149bc <__assert_fail@plt+0x34e0>
   149b0:	ldr	r3, [lr, #13]
   149b4:	cmp	r3, #0
   149b8:	bne	14a20 <__assert_fail@plt+0x3544>
   149bc:	add	lr, lr, #16
   149c0:	ldrb	r3, [lr, #-15]
   149c4:	cmp	r3, #0
   149c8:	bne	1497c <__assert_fail@plt+0x34a0>
   149cc:	cmp	r0, #0
   149d0:	beq	14a44 <__assert_fail@plt+0x3568>
   149d4:	sub	r5, r0, r4
   149d8:	mov	r1, r9
   149dc:	mov	r2, #5
   149e0:	mov	r0, #0
   149e4:	bl	11230 <dcgettext@plt>
   149e8:	mov	r3, r5
   149ec:	mov	r2, r4
   149f0:	mov	r1, #8
   149f4:	mov	r6, r0
   149f8:	mov	r0, #0
   149fc:	bl	18980 <__assert_fail@plt+0x74a4>
   14a00:	mov	r1, #0
   14a04:	mov	r3, r6
   14a08:	ldr	r2, [pc, #68]	; 14a54 <__assert_fail@plt+0x3578>
   14a0c:	str	r0, [sp]
   14a10:	mov	r0, r1
   14a14:	bl	13d54 <__assert_fail@plt+0x2878>
   14a18:	mov	r0, #1
   14a1c:	bl	14460 <__assert_fail@plt+0x2f84>
   14a20:	cmp	r8, #0
   14a24:	orreq	r3, r3, r6
   14a28:	cmp	r0, #0
   14a2c:	addne	r4, r0, #1
   14a30:	movne	r6, r3
   14a34:	bne	1496c <__assert_fail@plt+0x3490>
   14a38:	mov	r0, r3
   14a3c:	add	sp, sp, #12
   14a40:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14a44:	mov	r0, r4
   14a48:	bl	11380 <strlen@plt>
   14a4c:	mov	r5, r0
   14a50:	b	149d8 <__assert_fail@plt+0x34fc>
   14a54:	andeq	ip, r1, r8, ror #12
   14a58:	push	{r4, r5, r6, lr}
   14a5c:	ldr	r4, [pc, #184]	; 14b1c <__assert_fail@plt+0x3640>
   14a60:	ldr	r3, [r4]
   14a64:	cmp	r3, #0
   14a68:	bne	14a78 <__assert_fail@plt+0x359c>
   14a6c:	bl	150dc <__assert_fail@plt+0x3c00>
   14a70:	cmp	r0, #0
   14a74:	bne	14af4 <__assert_fail@plt+0x3618>
   14a78:	mov	r0, #0
   14a7c:	bl	114b8 <close@plt>
   14a80:	cmp	r0, #0
   14a84:	beq	14a98 <__assert_fail@plt+0x35bc>
   14a88:	mov	r0, #0
   14a8c:	bl	14174 <__assert_fail@plt+0x2c98>
   14a90:	cmp	r0, #0
   14a94:	bne	14af8 <__assert_fail@plt+0x361c>
   14a98:	mov	r0, #1
   14a9c:	bl	114b8 <close@plt>
   14aa0:	cmp	r0, #0
   14aa4:	popeq	{r4, r5, r6, pc}
   14aa8:	mov	r0, #1
   14aac:	bl	14174 <__assert_fail@plt+0x2c98>
   14ab0:	cmp	r0, #0
   14ab4:	popeq	{r4, r5, r6, pc}
   14ab8:	bl	113a4 <__errno_location@plt>
   14abc:	ldr	r1, [pc, #92]	; 14b20 <__assert_fail@plt+0x3644>
   14ac0:	mov	r2, #5
   14ac4:	ldr	r5, [r0]
   14ac8:	mov	r0, #0
   14acc:	bl	11230 <dcgettext@plt>
   14ad0:	ldr	r1, [r4, #128]	; 0x80
   14ad4:	mov	r6, r0
   14ad8:	mov	r0, #4
   14adc:	bl	189b8 <__assert_fail@plt+0x74dc>
   14ae0:	mov	r2, r6
   14ae4:	mov	r1, r5
   14ae8:	mov	r3, r0
   14aec:	mov	r0, #1
   14af0:	bl	13d54 <__assert_fail@plt+0x2878>
   14af4:	bl	11374 <exit@plt>
   14af8:	bl	113a4 <__errno_location@plt>
   14afc:	ldr	r1, [pc, #32]	; 14b24 <__assert_fail@plt+0x3648>
   14b00:	mov	r2, #5
   14b04:	ldr	r5, [r0]
   14b08:	mov	r0, #0
   14b0c:	bl	11230 <dcgettext@plt>
   14b10:	ldr	r1, [r4, #124]	; 0x7c
   14b14:	mov	r6, r0
   14b18:	b	14ad8 <__assert_fail@plt+0x35fc>
   14b1c:	andeq	lr, r2, r8, ror #3
   14b20:	andeq	ip, r1, r8, lsl #13
   14b24:	andeq	ip, r1, r0, ror r6
   14b28:	push	{r4, r5, r6, r7, r8, lr}
   14b2c:	mov	r6, #0
   14b30:	ldr	r4, [pc, #128]	; 14bb8 <__assert_fail@plt+0x36dc>
   14b34:	sub	sp, sp, #128	; 0x80
   14b38:	add	r7, r4, #132	; 0x84
   14b3c:	mov	r8, #2
   14b40:	ldr	r3, [r4]
   14b44:	mov	r2, sp
   14b48:	cmp	r3, #0
   14b4c:	mov	r1, r7
   14b50:	mov	r0, r6
   14b54:	bne	14b64 <__assert_fail@plt+0x3688>
   14b58:	ldr	r3, [r4, #4]
   14b5c:	cmp	r3, #0
   14b60:	beq	14bb0 <__assert_fail@plt+0x36d4>
   14b64:	bl	111ac <sigprocmask@plt>
   14b68:	ldr	r5, [r4]
   14b6c:	ldr	r3, [r4, #4]
   14b70:	mov	r2, r6
   14b74:	cmp	r3, #0
   14b78:	mov	r1, sp
   14b7c:	sub	r3, r3, #1
   14b80:	mov	r0, r8
   14b84:	strne	r3, [r4, #4]
   14b88:	bl	111ac <sigprocmask@plt>
   14b8c:	cmp	r5, #0
   14b90:	bne	14b9c <__assert_fail@plt+0x36c0>
   14b94:	bl	13bf8 <__assert_fail@plt+0x271c>
   14b98:	b	14b40 <__assert_fail@plt+0x3664>
   14b9c:	bl	14a58 <__assert_fail@plt+0x357c>
   14ba0:	bl	13bf8 <__assert_fail@plt+0x271c>
   14ba4:	mov	r0, r5
   14ba8:	bl	11164 <raise@plt>
   14bac:	b	14b40 <__assert_fail@plt+0x3664>
   14bb0:	add	sp, sp, #128	; 0x80
   14bb4:	pop	{r4, r5, r6, r7, r8, pc}
   14bb8:	andeq	lr, r2, r8, ror #3
   14bbc:	push	{r4, r5, r6, r7, lr}
   14bc0:	mov	r7, r0
   14bc4:	sub	sp, sp, #12
   14bc8:	mov	r6, r1
   14bcc:	mov	r5, r2
   14bd0:	b	14bec <__assert_fail@plt+0x3710>
   14bd4:	cmp	r0, #0
   14bd8:	bge	14c40 <__assert_fail@plt+0x3764>
   14bdc:	bl	113a4 <__errno_location@plt>
   14be0:	ldr	r3, [r0]
   14be4:	cmp	r3, #4
   14be8:	bne	14cf4 <__assert_fail@plt+0x3818>
   14bec:	bl	14b28 <__assert_fail@plt+0x364c>
   14bf0:	mov	r2, r5
   14bf4:	mov	r1, r6
   14bf8:	mov	r0, r7
   14bfc:	bl	11194 <read@plt>
   14c00:	cmn	r0, #1
   14c04:	mov	r4, r0
   14c08:	bne	14bd4 <__assert_fail@plt+0x36f8>
   14c0c:	bl	113a4 <__errno_location@plt>
   14c10:	ldr	r3, [r0]
   14c14:	cmp	r3, #22
   14c18:	bne	14be4 <__assert_fail@plt+0x3708>
   14c1c:	ldr	r6, [pc, #216]	; 14cfc <__assert_fail@plt+0x3820>
   14c20:	ldr	r3, [r6, #260]	; 0x104
   14c24:	cmp	r5, r3
   14c28:	cmpgt	r3, #0
   14c2c:	bgt	14cd8 <__assert_fail@plt+0x37fc>
   14c30:	mov	r0, r4
   14c34:	str	r4, [r6, #260]	; 0x104
   14c38:	add	sp, sp, #12
   14c3c:	pop	{r4, r5, r6, r7, pc}
   14c40:	movgt	r3, #1
   14c44:	movle	r3, #0
   14c48:	cmp	r5, r0
   14c4c:	movle	r3, #0
   14c50:	andgt	r3, r3, #1
   14c54:	cmp	r3, #0
   14c58:	beq	14cec <__assert_fail@plt+0x3810>
   14c5c:	bl	14b28 <__assert_fail@plt+0x364c>
   14c60:	ldr	r6, [pc, #148]	; 14cfc <__assert_fail@plt+0x3820>
   14c64:	ldrb	r3, [r6, #268]	; 0x10c
   14c68:	cmp	r3, #0
   14c6c:	beq	14c30 <__assert_fail@plt+0x3754>
   14c70:	ldr	r7, [r6, #260]	; 0x104
   14c74:	cmp	r5, r7
   14c78:	cmpgt	r7, #0
   14c7c:	ble	14c30 <__assert_fail@plt+0x3754>
   14c80:	ldr	r3, [pc, #120]	; 14d00 <__assert_fail@plt+0x3824>
   14c84:	ldr	r3, [r3, #8]
   14c88:	cmp	r3, #1
   14c8c:	beq	14cc0 <__assert_fail@plt+0x37e4>
   14c90:	mov	r3, #5
   14c94:	str	r3, [sp]
   14c98:	ldr	r2, [pc, #100]	; 14d04 <__assert_fail@plt+0x3828>
   14c9c:	mov	r3, r7
   14ca0:	ldr	r1, [pc, #96]	; 14d08 <__assert_fail@plt+0x382c>
   14ca4:	mov	r0, #0
   14ca8:	bl	114c4 <dcngettext@plt>
   14cac:	mov	r1, #0
   14cb0:	mov	r3, r7
   14cb4:	mov	r2, r0
   14cb8:	mov	r0, r1
   14cbc:	bl	13d54 <__assert_fail@plt+0x2878>
   14cc0:	mov	r3, #0
   14cc4:	mov	r0, r4
   14cc8:	strb	r3, [r6, #268]	; 0x10c
   14ccc:	str	r4, [r6, #260]	; 0x104
   14cd0:	add	sp, sp, #12
   14cd4:	pop	{r4, r5, r6, r7, pc}
   14cd8:	ldr	r3, [r6, #264]	; 0x108
   14cdc:	tst	r3, #65536	; 0x10000
   14ce0:	movne	r4, #0
   14ce4:	strne	r4, [r0]
   14ce8:	b	14c30 <__assert_fail@plt+0x3754>
   14cec:	cmp	r0, #0
   14cf0:	bgt	14c60 <__assert_fail@plt+0x3784>
   14cf4:	ldr	r6, [pc]	; 14cfc <__assert_fail@plt+0x3820>
   14cf8:	b	14c30 <__assert_fail@plt+0x3754>
   14cfc:	andeq	lr, r2, r8, ror #3
   14d00:	andeq	lr, r2, r0, asr r1
   14d04:	andeq	ip, r1, r0, lsr #13
   14d08:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   14d0c:	push	{r4, r5, r6, r7, r8, lr}
   14d10:	subs	r4, r2, #0
   14d14:	ble	14d60 <__assert_fail@plt+0x3884>
   14d18:	mov	r7, r0
   14d1c:	mov	r5, r1
   14d20:	mov	r6, #0
   14d24:	b	14d38 <__assert_fail@plt+0x385c>
   14d28:	cmp	r4, #0
   14d2c:	add	r6, r6, r0
   14d30:	add	r5, r5, r0
   14d34:	ble	14d58 <__assert_fail@plt+0x387c>
   14d38:	mov	r2, r4
   14d3c:	mov	r1, r5
   14d40:	mov	r0, r7
   14d44:	bl	14bbc <__assert_fail@plt+0x36e0>
   14d48:	cmp	r0, #0
   14d4c:	sub	r4, r4, r0
   14d50:	poplt	{r4, r5, r6, r7, r8, pc}
   14d54:	bne	14d28 <__assert_fail@plt+0x384c>
   14d58:	mov	r0, r6
   14d5c:	pop	{r4, r5, r6, r7, r8, pc}
   14d60:	mov	r0, #0
   14d64:	pop	{r4, r5, r6, r7, r8, pc}
   14d68:	push	{r4, r5, r6, r7, r8, lr}
   14d6c:	mov	r8, r0
   14d70:	mov	r7, r1
   14d74:	mov	r6, r2
   14d78:	mov	r5, r3
   14d7c:	b	14d90 <__assert_fail@plt+0x38b4>
   14d80:	bl	113a4 <__errno_location@plt>
   14d84:	ldr	r3, [r0]
   14d88:	cmp	r3, #4
   14d8c:	bne	14db0 <__assert_fail@plt+0x38d4>
   14d90:	bl	14b28 <__assert_fail@plt+0x364c>
   14d94:	mov	r3, r5
   14d98:	mov	r2, r6
   14d9c:	mov	r1, r7
   14da0:	mov	r0, r8
   14da4:	bl	15dc4 <__assert_fail@plt+0x48e8>
   14da8:	subs	r4, r0, #0
   14dac:	blt	14d80 <__assert_fail@plt+0x38a4>
   14db0:	mov	r0, r4
   14db4:	pop	{r4, r5, r6, r7, r8, pc}
   14db8:	push	{r4, r5, r6, r7, r8, lr}
   14dbc:	mov	r7, r0
   14dc0:	mov	r6, r1
   14dc4:	mov	r5, #3
   14dc8:	b	14ddc <__assert_fail@plt+0x3900>
   14dcc:	bl	113a4 <__errno_location@plt>
   14dd0:	ldr	r3, [r0]
   14dd4:	cmp	r3, #4
   14dd8:	bne	14df8 <__assert_fail@plt+0x391c>
   14ddc:	bl	14b28 <__assert_fail@plt+0x364c>
   14de0:	mov	r2, r6
   14de4:	mov	r1, r7
   14de8:	mov	r0, r5
   14dec:	bl	11278 <__fxstat64@plt>
   14df0:	subs	r4, r0, #0
   14df4:	blt	14dcc <__assert_fail@plt+0x38f0>
   14df8:	mov	r0, r4
   14dfc:	pop	{r4, r5, r6, r7, r8, pc}
   14e00:	push	{r4, r5, r6, r7, lr}
   14e04:	bics	r4, r1, #33024	; 0x8100
   14e08:	sub	sp, sp, #108	; 0x6c
   14e0c:	bne	14e18 <__assert_fail@plt+0x393c>
   14e10:	add	sp, sp, #108	; 0x6c
   14e14:	pop	{r4, r5, r6, r7, pc}
   14e18:	mov	r1, #3
   14e1c:	mov	r5, r0
   14e20:	mov	r6, r2
   14e24:	bl	15bf0 <__assert_fail@plt+0x4714>
   14e28:	subs	r7, r0, #0
   14e2c:	blt	14e90 <__assert_fail@plt+0x39b4>
   14e30:	orr	r4, r4, r7
   14e34:	cmp	r7, r4
   14e38:	beq	14e10 <__assert_fail@plt+0x3934>
   14e3c:	tst	r4, #16384	; 0x4000
   14e40:	bne	14e60 <__assert_fail@plt+0x3984>
   14e44:	mov	r2, r4
   14e48:	mov	r0, r5
   14e4c:	mov	r1, #4
   14e50:	bl	15bf0 <__assert_fail@plt+0x4714>
   14e54:	cmn	r0, #1
   14e58:	bne	14e10 <__assert_fail@plt+0x3934>
   14e5c:	b	14e90 <__assert_fail@plt+0x39b4>
   14e60:	mov	r1, sp
   14e64:	mov	r0, r5
   14e68:	bl	14db8 <__assert_fail@plt+0x38dc>
   14e6c:	cmp	r0, #0
   14e70:	bne	14e90 <__assert_fail@plt+0x39b4>
   14e74:	ldr	r3, [sp, #16]
   14e78:	and	r3, r3, #61440	; 0xf000
   14e7c:	cmp	r3, #16384	; 0x4000
   14e80:	beq	14ecc <__assert_fail@plt+0x39f0>
   14e84:	bl	113a4 <__errno_location@plt>
   14e88:	mov	r3, #20
   14e8c:	str	r3, [r0]
   14e90:	bl	113a4 <__errno_location@plt>
   14e94:	mov	r2, #5
   14e98:	ldr	r1, [pc, #60]	; 14edc <__assert_fail@plt+0x3a00>
   14e9c:	ldr	r4, [r0]
   14ea0:	mov	r0, #0
   14ea4:	bl	11230 <dcgettext@plt>
   14ea8:	mov	r1, r6
   14eac:	mov	r5, r0
   14eb0:	mov	r0, #4
   14eb4:	bl	189b8 <__assert_fail@plt+0x74dc>
   14eb8:	mov	r2, r5
   14ebc:	mov	r1, r4
   14ec0:	mov	r3, r0
   14ec4:	mov	r0, #1
   14ec8:	bl	13d54 <__assert_fail@plt+0x2878>
   14ecc:	bic	r4, r4, #16384	; 0x4000
   14ed0:	cmp	r7, r4
   14ed4:	beq	14e10 <__assert_fail@plt+0x3934>
   14ed8:	b	14e44 <__assert_fail@plt+0x3968>
   14edc:	andeq	ip, r1, r8, lsl r7
   14ee0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14ee4:	mov	r9, r0
   14ee8:	ldr	r5, [pc, #480]	; 150d0 <__assert_fail@plt+0x3bf4>
   14eec:	sub	sp, sp, #16
   14ef0:	mov	r6, r1
   14ef4:	ldr	r3, [r5, #272]	; 0x110
   14ef8:	tst	r3, #65536	; 0x10000
   14efc:	beq	14f0c <__assert_fail@plt+0x3a30>
   14f00:	ldr	r3, [r5, #116]	; 0x74
   14f04:	cmp	r3, r1
   14f08:	bgt	15034 <__assert_fail@plt+0x3b58>
   14f0c:	cmp	r6, #0
   14f10:	mov	r4, #0
   14f14:	ble	14ff8 <__assert_fail@plt+0x3b1c>
   14f18:	mov	r2, r6
   14f1c:	asr	r3, r6, #31
   14f20:	mov	sl, r4
   14f24:	mov	r8, #1
   14f28:	strd	r2, [sp, #8]
   14f2c:	b	14f60 <__assert_fail@plt+0x3a84>
   14f30:	sub	r2, r6, r4
   14f34:	add	r1, r9, r4
   14f38:	mov	r0, r8
   14f3c:	bl	113ec <write@plt>
   14f40:	cmp	r0, #0
   14f44:	bge	15020 <__assert_fail@plt+0x3b44>
   14f48:	bl	113a4 <__errno_location@plt>
   14f4c:	ldr	r3, [r0]
   14f50:	cmp	r3, #4
   14f54:	bne	14fe0 <__assert_fail@plt+0x3b04>
   14f58:	cmp	r6, r4
   14f5c:	ble	14fe0 <__assert_fail@plt+0x3b04>
   14f60:	bl	14b28 <__assert_fail@plt+0x364c>
   14f64:	ldr	r7, [r5, #112]	; 0x70
   14f68:	strb	sl, [r5, #276]	; 0x114
   14f6c:	tst	r7, #65536	; 0x10000
   14f70:	beq	14f30 <__assert_fail@plt+0x3a54>
   14f74:	mov	r2, r6
   14f78:	mov	r1, r9
   14f7c:	ldrb	r3, [r1], #1
   14f80:	cmp	r3, #0
   14f84:	bne	14f30 <__assert_fail@plt+0x3a54>
   14f88:	subs	r2, r2, #1
   14f8c:	beq	14fa8 <__assert_fail@plt+0x3acc>
   14f90:	tst	r2, #15
   14f94:	bne	14f7c <__assert_fail@plt+0x3aa0>
   14f98:	mov	r0, r9
   14f9c:	bl	11218 <memcmp@plt>
   14fa0:	cmp	r0, #0
   14fa4:	bne	14f30 <__assert_fail@plt+0x3a54>
   14fa8:	ldrd	r2, [sp, #8]
   14fac:	str	r8, [sp]
   14fb0:	mov	r0, #1
   14fb4:	bl	112a8 <lseek64@plt>
   14fb8:	cmp	r0, #0
   14fbc:	sbcs	r3, r1, #0
   14fc0:	biclt	r7, r7, #65536	; 0x10000
   14fc4:	strlt	r7, [r5, #112]	; 0x70
   14fc8:	blt	14f30 <__assert_fail@plt+0x3a54>
   14fcc:	mov	r0, r6
   14fd0:	strb	r8, [r5, #276]	; 0x114
   14fd4:	add	r4, r4, r0
   14fd8:	cmp	r6, r4
   14fdc:	bgt	14f60 <__assert_fail@plt+0x3a84>
   14fe0:	ldrb	r3, [r5, #277]	; 0x115
   14fe4:	cmp	r4, #0
   14fe8:	moveq	r3, #0
   14fec:	andne	r3, r3, #1
   14ff0:	cmp	r3, #0
   14ff4:	bne	15004 <__assert_fail@plt+0x3b28>
   14ff8:	mov	r0, r4
   14ffc:	add	sp, sp, #16
   15000:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15004:	mov	r2, r4
   15008:	asr	r3, r4, #31
   1500c:	mov	r0, #1
   15010:	bl	13de8 <__assert_fail@plt+0x290c>
   15014:	mov	r0, r4
   15018:	add	sp, sp, #16
   1501c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15020:	bne	14fd4 <__assert_fail@plt+0x3af8>
   15024:	bl	113a4 <__errno_location@plt>
   15028:	mov	r3, #28
   1502c:	str	r3, [r0]
   15030:	b	14fe0 <__assert_fail@plt+0x3b04>
   15034:	mov	r1, #3
   15038:	mov	r0, #1
   1503c:	bl	15bf0 <__assert_fail@plt+0x4714>
   15040:	mov	r1, #4
   15044:	bic	r2, r0, #65536	; 0x10000
   15048:	mov	r0, #1
   1504c:	bl	15bf0 <__assert_fail@plt+0x4714>
   15050:	cmp	r0, #0
   15054:	beq	150a8 <__assert_fail@plt+0x3bcc>
   15058:	ldr	r3, [pc, #116]	; 150d4 <__assert_fail@plt+0x3bf8>
   1505c:	ldr	r3, [r3, #8]
   15060:	cmp	r3, #1
   15064:	beq	150a8 <__assert_fail@plt+0x3bcc>
   15068:	bl	113a4 <__errno_location@plt>
   1506c:	mov	r2, #5
   15070:	ldr	r1, [pc, #96]	; 150d8 <__assert_fail@plt+0x3bfc>
   15074:	ldr	r4, [r0]
   15078:	mov	r0, #0
   1507c:	bl	11230 <dcgettext@plt>
   15080:	ldr	r2, [r5, #128]	; 0x80
   15084:	mov	r1, #3
   15088:	mov	r7, r0
   1508c:	mov	r0, #0
   15090:	bl	18a74 <__assert_fail@plt+0x7598>
   15094:	mov	r2, r7
   15098:	mov	r1, r4
   1509c:	mov	r3, r0
   150a0:	mov	r0, #0
   150a4:	bl	13d54 <__assert_fail@plt+0x2878>
   150a8:	mov	r1, #1
   150ac:	mov	r3, #0
   150b0:	mov	r0, r1
   150b4:	mov	r2, #0
   150b8:	strb	r1, [r5, #97]	; 0x61
   150bc:	bl	13de8 <__assert_fail@plt+0x290c>
   150c0:	ldr	r3, [r5, #112]	; 0x70
   150c4:	orr	r3, r3, #32768	; 0x8000
   150c8:	str	r3, [r5, #112]	; 0x70
   150cc:	b	14f0c <__assert_fail@plt+0x3a30>
   150d0:	andeq	lr, r2, r8, ror #3
   150d4:	andeq	lr, r2, r0, asr r1
   150d8:	andeq	ip, r1, r0, lsr r7
   150dc:	push	{r4, r5, r6, r7, r8, lr}
   150e0:	ldr	r7, [pc, #288]	; 15208 <__assert_fail@plt+0x3d2c>
   150e4:	ldr	r6, [r7, #112]	; 0x70
   150e8:	bic	r3, r6, #49152	; 0xc000
   150ec:	ands	r5, r6, #16384	; 0x4000
   150f0:	str	r3, [r7, #112]	; 0x70
   150f4:	bne	15180 <__assert_fail@plt+0x3ca4>
   150f8:	tst	r6, #32768	; 0x8000
   150fc:	bne	15108 <__assert_fail@plt+0x3c2c>
   15100:	mov	r0, r5
   15104:	pop	{r4, r5, r6, r7, r8, pc}
   15108:	mov	r6, #1
   1510c:	b	15120 <__assert_fail@plt+0x3c44>
   15110:	bl	113a4 <__errno_location@plt>
   15114:	ldr	r4, [r0]
   15118:	cmp	r4, #4
   1511c:	bne	15140 <__assert_fail@plt+0x3c64>
   15120:	bl	14b28 <__assert_fail@plt+0x364c>
   15124:	mov	r0, r6
   15128:	bl	11170 <fsync@plt>
   1512c:	cmp	r0, #0
   15130:	blt	15110 <__assert_fail@plt+0x3c34>
   15134:	beq	15100 <__assert_fail@plt+0x3c24>
   15138:	bl	113a4 <__errno_location@plt>
   1513c:	ldr	r4, [r0]
   15140:	mov	r2, #5
   15144:	ldr	r1, [pc, #192]	; 1520c <__assert_fail@plt+0x3d30>
   15148:	mov	r0, #0
   1514c:	bl	11230 <dcgettext@plt>
   15150:	ldr	r1, [r7, #128]	; 0x80
   15154:	mov	r5, r0
   15158:	mov	r0, #4
   1515c:	bl	189b8 <__assert_fail@plt+0x74dc>
   15160:	mov	r2, r5
   15164:	mov	r1, r4
   15168:	mov	r5, #1
   1516c:	mov	r3, r0
   15170:	mov	r0, #0
   15174:	bl	13d54 <__assert_fail@plt+0x2878>
   15178:	mov	r0, r5
   1517c:	pop	{r4, r5, r6, r7, r8, pc}
   15180:	mov	r8, #1
   15184:	b	15198 <__assert_fail@plt+0x3cbc>
   15188:	bl	113a4 <__errno_location@plt>
   1518c:	ldr	r4, [r0]
   15190:	cmp	r4, #4
   15194:	bne	151b8 <__assert_fail@plt+0x3cdc>
   15198:	bl	14b28 <__assert_fail@plt+0x364c>
   1519c:	mov	r0, r8
   151a0:	bl	114a0 <fdatasync@plt>
   151a4:	subs	r5, r0, #0
   151a8:	blt	15188 <__assert_fail@plt+0x3cac>
   151ac:	beq	150f8 <__assert_fail@plt+0x3c1c>
   151b0:	bl	113a4 <__errno_location@plt>
   151b4:	ldr	r4, [r0]
   151b8:	sub	r5, r4, #22
   151bc:	bics	r5, r5, #16
   151c0:	bne	151cc <__assert_fail@plt+0x3cf0>
   151c4:	orr	r6, r6, #32768	; 0x8000
   151c8:	b	150f8 <__assert_fail@plt+0x3c1c>
   151cc:	mov	r2, #5
   151d0:	ldr	r1, [pc, #56]	; 15210 <__assert_fail@plt+0x3d34>
   151d4:	mov	r0, #0
   151d8:	bl	11230 <dcgettext@plt>
   151dc:	ldr	r1, [r7, #128]	; 0x80
   151e0:	mov	r5, r0
   151e4:	mov	r0, #4
   151e8:	bl	189b8 <__assert_fail@plt+0x74dc>
   151ec:	mov	r2, r5
   151f0:	mov	r1, r4
   151f4:	mov	r5, #1
   151f8:	mov	r3, r0
   151fc:	mov	r0, #0
   15200:	bl	13d54 <__assert_fail@plt+0x2878>
   15204:	b	151c4 <__assert_fail@plt+0x3ce8>
   15208:	andeq	lr, r2, r8, ror #3
   1520c:	andeq	ip, r1, r8, ror #14
   15210:	andeq	ip, r1, r0, asr r7
   15214:	push	{r4, lr}
   15218:	bl	14b28 <__assert_fail@plt+0x364c>
   1521c:	bl	14a58 <__assert_fail@plt+0x357c>
   15220:	bl	13bf8 <__assert_fail@plt+0x271c>
   15224:	mov	r0, #1
   15228:	bl	11374 <exit@plt>
   1522c:	push	{r4, r5, r6, r7, r8, lr}
   15230:	ldr	r4, [pc, #156]	; 152d4 <__assert_fail@plt+0x3df8>
   15234:	ldr	r1, [r4, #116]	; 0x74
   15238:	ldr	r0, [r4, #120]	; 0x78
   1523c:	bl	14ee0 <__assert_fail@plt+0x3a04>
   15240:	ldrd	r2, [r4, #16]
   15244:	ldr	r1, [r4, #116]	; 0x74
   15248:	adds	r2, r2, r0
   1524c:	adc	r3, r3, r0, asr #31
   15250:	cmp	r0, r1
   15254:	strd	r2, [r4, #16]
   15258:	bne	15278 <__assert_fail@plt+0x3d9c>
   1525c:	ldrd	r2, [r4, #48]	; 0x30
   15260:	mov	r1, #0
   15264:	str	r1, [r4, #280]	; 0x118
   15268:	adds	r2, r2, #1
   1526c:	adc	r3, r3, #0
   15270:	strd	r2, [r4, #48]	; 0x30
   15274:	pop	{r4, r5, r6, r7, r8, pc}
   15278:	mov	r5, r0
   1527c:	bl	113a4 <__errno_location@plt>
   15280:	mov	r2, #5
   15284:	ldr	r1, [pc, #76]	; 152d8 <__assert_fail@plt+0x3dfc>
   15288:	ldr	r6, [r0]
   1528c:	mov	r0, #0
   15290:	bl	11230 <dcgettext@plt>
   15294:	ldr	r1, [r4, #128]	; 0x80
   15298:	mov	r7, r0
   1529c:	mov	r0, #4
   152a0:	bl	189b8 <__assert_fail@plt+0x74dc>
   152a4:	mov	r2, r7
   152a8:	mov	r1, r6
   152ac:	mov	r3, r0
   152b0:	mov	r0, #0
   152b4:	bl	13d54 <__assert_fail@plt+0x2878>
   152b8:	cmp	r5, #0
   152bc:	beq	152d0 <__assert_fail@plt+0x3df4>
   152c0:	ldrd	r2, [r4, #40]	; 0x28
   152c4:	adds	r2, r2, #1
   152c8:	adc	r3, r3, #0
   152cc:	strd	r2, [r4, #40]	; 0x28
   152d0:	bl	15214 <__assert_fail@plt+0x3d38>
   152d4:	andeq	lr, r2, r8, ror #3
   152d8:	andeq	ip, r1, ip, ror r7
   152dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   152e0:	subs	r6, r1, #0
   152e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   152e8:	ldr	r8, [pc, #220]	; 153cc <__assert_fail@plt+0x3ef0>
   152ec:	ldr	r4, [pc, #220]	; 153d0 <__assert_fail@plt+0x3ef4>
   152f0:	sub	r9, r0, #1
   152f4:	mov	r7, #0
   152f8:	b	15340 <__assert_fail@plt+0x3e64>
   152fc:	ldr	r1, [r4, #284]	; 0x11c
   15300:	ldr	r2, [r4, #288]	; 0x120
   15304:	cmp	r1, r2
   15308:	beq	153ac <__assert_fail@plt+0x3ed0>
   1530c:	bge	15330 <__assert_fail@plt+0x3e54>
   15310:	ldr	r0, [r4, #280]	; 0x118
   15314:	ldr	ip, [r4, #120]	; 0x78
   15318:	add	r2, r0, #1
   1531c:	str	r2, [r4, #280]	; 0x118
   15320:	strb	r3, [ip, r0]
   15324:	ldr	r3, [r4, #116]	; 0x74
   15328:	cmp	r2, r3
   1532c:	bge	153c0 <__assert_fail@plt+0x3ee4>
   15330:	add	r1, r1, #1
   15334:	subs	r6, r6, #1
   15338:	str	r1, [r4, #284]	; 0x11c
   1533c:	beq	1536c <__assert_fail@plt+0x3e90>
   15340:	ldrb	r3, [r9, #1]!
   15344:	ldrb	r2, [r8, #25]
   15348:	cmp	r2, r3
   1534c:	bne	152fc <__assert_fail@plt+0x3e20>
   15350:	ldr	r5, [r4, #284]	; 0x11c
   15354:	ldr	r3, [r4, #288]	; 0x120
   15358:	cmp	r5, r3
   1535c:	blt	15380 <__assert_fail@plt+0x3ea4>
   15360:	subs	r6, r6, #1
   15364:	str	r7, [r4, #284]	; 0x11c
   15368:	bne	15340 <__assert_fail@plt+0x3e64>
   1536c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15370:	bl	1522c <__assert_fail@plt+0x3d50>
   15374:	ldr	r3, [r4, #288]	; 0x120
   15378:	cmp	r3, r5
   1537c:	ble	15360 <__assert_fail@plt+0x3e84>
   15380:	ldr	r2, [r4, #280]	; 0x118
   15384:	ldr	r1, [r4, #120]	; 0x78
   15388:	ldrb	r0, [r8, #26]
   1538c:	add	r3, r2, #1
   15390:	add	r5, r5, #1
   15394:	strb	r0, [r1, r2]
   15398:	ldr	r2, [r4, #116]	; 0x74
   1539c:	str	r3, [r4, #280]	; 0x118
   153a0:	cmp	r3, r2
   153a4:	blt	15374 <__assert_fail@plt+0x3e98>
   153a8:	b	15370 <__assert_fail@plt+0x3e94>
   153ac:	ldrd	r2, [r4, #72]	; 0x48
   153b0:	adds	r2, r2, #1
   153b4:	adc	r3, r3, #0
   153b8:	strd	r2, [r4, #72]	; 0x48
   153bc:	b	15330 <__assert_fail@plt+0x3e54>
   153c0:	bl	1522c <__assert_fail@plt+0x3d50>
   153c4:	ldr	r1, [r4, #284]	; 0x11c
   153c8:	b	15330 <__assert_fail@plt+0x3e54>
   153cc:	andeq	lr, r2, r0, asr r1
   153d0:	andeq	lr, r2, r8, ror #3
   153d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   153d8:	subs	r5, r1, #0
   153dc:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   153e0:	mov	r9, #0
   153e4:	mov	r6, r0
   153e8:	ldr	r4, [pc, #264]	; 154f8 <__assert_fail@plt+0x401c>
   153ec:	ldr	sl, [pc, #264]	; 154fc <__assert_fail@plt+0x4020>
   153f0:	mov	r7, r9
   153f4:	b	15434 <__assert_fail@plt+0x3f58>
   153f8:	ldr	r2, [r4, #280]	; 0x118
   153fc:	ldr	r1, [r4, #120]	; 0x78
   15400:	ldrb	r0, [sl, #25]
   15404:	add	r3, r2, #1
   15408:	str	r7, [r4, #292]	; 0x124
   1540c:	strb	r0, [r1, r2]
   15410:	ldr	r2, [r4, #116]	; 0x74
   15414:	str	r7, [r4, #284]	; 0x11c
   15418:	cmp	r3, r2
   1541c:	sub	r9, r9, #1
   15420:	str	r3, [r4, #280]	; 0x118
   15424:	bge	154d4 <__assert_fail@plt+0x3ff8>
   15428:	add	r9, r9, #1
   1542c:	cmp	r5, r9
   15430:	ble	154e4 <__assert_fail@plt+0x4008>
   15434:	ldr	r3, [r4, #284]	; 0x11c
   15438:	ldr	r1, [r4, #288]	; 0x120
   1543c:	add	r2, r3, #1
   15440:	cmp	r3, r1
   15444:	str	r2, [r4, #284]	; 0x11c
   15448:	ldrb	r8, [r6, r9]
   1544c:	bge	153f8 <__assert_fail@plt+0x3f1c>
   15450:	ldrb	r3, [sl, #26]
   15454:	cmp	r8, r3
   15458:	beq	154e8 <__assert_fail@plt+0x400c>
   1545c:	ldr	r2, [r4, #292]	; 0x124
   15460:	ldr	r0, [r4, #120]	; 0x78
   15464:	cmp	r2, #0
   15468:	ldreq	r2, [r4, #280]	; 0x118
   1546c:	beq	154bc <__assert_fail@plt+0x3fe0>
   15470:	ldr	r1, [r4, #280]	; 0x118
   15474:	b	15494 <__assert_fail@plt+0x3fb8>
   15478:	ldr	r3, [r4, #292]	; 0x124
   1547c:	mov	r1, r2
   15480:	sub	r3, r3, #1
   15484:	cmp	r3, #0
   15488:	str	r3, [r4, #292]	; 0x124
   1548c:	beq	154bc <__assert_fail@plt+0x3fe0>
   15490:	ldrb	r3, [sl, #26]
   15494:	strb	r3, [r0, r1]
   15498:	ldr	r3, [r4, #116]	; 0x74
   1549c:	add	r2, r1, #1
   154a0:	cmp	r2, r3
   154a4:	str	r2, [r4, #280]	; 0x118
   154a8:	blt	15478 <__assert_fail@plt+0x3f9c>
   154ac:	bl	1522c <__assert_fail@plt+0x3d50>
   154b0:	ldr	r0, [r4, #120]	; 0x78
   154b4:	ldr	r2, [r4, #280]	; 0x118
   154b8:	b	15478 <__assert_fail@plt+0x3f9c>
   154bc:	strb	r8, [r0, r2]
   154c0:	ldr	r3, [r4, #116]	; 0x74
   154c4:	add	r2, r2, #1
   154c8:	cmp	r2, r3
   154cc:	str	r2, [r4, #280]	; 0x118
   154d0:	blt	15428 <__assert_fail@plt+0x3f4c>
   154d4:	add	r9, r9, #1
   154d8:	bl	1522c <__assert_fail@plt+0x3d50>
   154dc:	cmp	r5, r9
   154e0:	bgt	15434 <__assert_fail@plt+0x3f58>
   154e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154e8:	ldr	r3, [r4, #292]	; 0x124
   154ec:	add	r3, r3, #1
   154f0:	str	r3, [r4, #292]	; 0x124
   154f4:	b	15428 <__assert_fail@plt+0x3f4c>
   154f8:	andeq	lr, r2, r8, ror #3
   154fc:	andeq	lr, r2, r0, asr r1
   15500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15504:	sub	sp, sp, #148	; 0x94
   15508:	mov	r5, r3
   1550c:	mov	r6, r0
   15510:	str	r1, [sp, #28]
   15514:	mov	r4, r2
   15518:	bl	113a4 <__errno_location@plt>
   1551c:	ldr	sl, [sp, #184]	; 0xb8
   15520:	mov	r3, #0
   15524:	cmp	sl, r3
   15528:	ldr	r8, [sp, #188]	; 0xbc
   1552c:	mov	fp, r0
   15530:	str	r3, [r0]
   15534:	blt	157d0 <__assert_fail@plt+0x42f4>
   15538:	bne	15660 <__assert_fail@plt+0x4184>
   1553c:	ldr	r1, [r8]
   15540:	mov	r2, #0
   15544:	mov	r3, #0
   15548:	cmp	r1, #0
   1554c:	strd	r2, [sp, #16]
   15550:	strd	r2, [sp, #8]
   15554:	blt	158a8 <__assert_fail@plt+0x43cc>
   15558:	mov	r2, r1
   1555c:	asr	r3, r1, #31
   15560:	mvn	r0, #0
   15564:	strd	r2, [sp, #32]
   15568:	mvn	r1, #-2147483648	; 0x80000000
   1556c:	subs	r2, r0, r2
   15570:	sbc	r3, r1, r3
   15574:	mov	r1, r3
   15578:	mov	r0, r2
   1557c:	ldrd	r2, [sp, #16]
   15580:	cmp	r0, r2
   15584:	sbcs	r3, r1, r3
   15588:	movlt	r1, #1
   1558c:	movge	r1, #0
   15590:	cmp	r1, #0
   15594:	beq	156e4 <__assert_fail@plt+0x4208>
   15598:	mov	r3, #2
   1559c:	str	r3, [sp]
   155a0:	mov	r2, #0
   155a4:	mov	r3, #0
   155a8:	mov	r0, r6
   155ac:	bl	112a8 <lseek64@plt>
   155b0:	cmp	r0, #0
   155b4:	sbcs	r3, r1, #0
   155b8:	bge	15858 <__assert_fail@plt+0x437c>
   155bc:	mov	r3, #0
   155c0:	str	r3, [sp, #8]
   155c4:	cmp	r6, #0
   155c8:	ldr	r7, [pc, #1004]	; 159bc <__assert_fail@plt+0x44e0>
   155cc:	bne	157c4 <__assert_fail@plt+0x42e8>
   155d0:	bl	141c0 <__assert_fail@plt+0x2ce4>
   155d4:	ldr	r9, [r7, #108]	; 0x6c
   155d8:	orrs	r3, r4, r5
   155dc:	movne	r2, sl
   155e0:	ldr	r3, [r7, #296]	; 0x128
   155e4:	bne	15618 <__assert_fail@plt+0x413c>
   155e8:	ldr	r2, [r8]
   155ec:	b	15610 <__assert_fail@plt+0x4134>
   155f0:	subs	r4, r4, #1
   155f4:	sbc	r5, r5, #0
   155f8:	orrs	r3, r4, r5
   155fc:	bne	155d8 <__assert_fail@plt+0x40fc>
   15600:	ldr	r2, [r8]
   15604:	cmp	r2, #0
   15608:	beq	157b8 <__assert_fail@plt+0x42dc>
   1560c:	ldr	r3, [r7, #296]	; 0x128
   15610:	mov	r4, #0
   15614:	mov	r5, #0
   15618:	mov	r1, r9
   1561c:	mov	r0, r6
   15620:	blx	r3
   15624:	cmp	r0, #0
   15628:	blt	15930 <__assert_fail@plt+0x4454>
   1562c:	beq	157b8 <__assert_fail@plt+0x42dc>
   15630:	cmp	r6, #0
   15634:	beq	157ac <__assert_fail@plt+0x42d0>
   15638:	orrs	r3, r4, r5
   1563c:	bne	155f0 <__assert_fail@plt+0x4114>
   15640:	mov	r3, #0
   15644:	mov	r6, r3
   15648:	mov	r4, r3
   1564c:	str	r3, [r8]
   15650:	mov	r0, r6
   15654:	mov	r1, r4
   15658:	add	sp, sp, #148	; 0x94
   1565c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15660:	cmp	r4, #0
   15664:	sbcs	r2, r5, #0
   15668:	blt	158e4 <__assert_fail@plt+0x4408>
   1566c:	mov	r2, sl
   15670:	asr	r3, sl, #31
   15674:	mvn	r0, #0
   15678:	mvn	r1, #-2147483648	; 0x80000000
   1567c:	bl	1add8 <__assert_fail@plt+0x98fc>
   15680:	cmp	r0, r4
   15684:	sbcs	r3, r1, r5
   15688:	movlt	r3, #1
   1568c:	movge	r3, #0
   15690:	cmp	r3, #0
   15694:	bne	15598 <__assert_fail@plt+0x40bc>
   15698:	mul	ip, sl, r5
   1569c:	umull	r2, r3, sl, r4
   156a0:	asr	r1, sl, #31
   156a4:	strd	r2, [sp, #8]
   156a8:	mla	r0, r4, r1, ip
   156ac:	ldr	r1, [r8]
   156b0:	add	r3, r0, r3
   156b4:	str	r3, [sp, #12]
   156b8:	ldrd	r2, [sp, #8]
   156bc:	cmp	r1, #0
   156c0:	strd	r2, [sp, #16]
   156c4:	blt	158a8 <__assert_fail@plt+0x43cc>
   156c8:	ldrd	r2, [sp, #8]
   156cc:	cmp	r2, #0
   156d0:	sbcs	r3, r3, #0
   156d4:	bge	15558 <__assert_fail@plt+0x407c>
   156d8:	mov	r2, r1
   156dc:	asr	r3, r1, #31
   156e0:	strd	r2, [sp, #32]
   156e4:	ldrd	r2, [sp, #32]
   156e8:	ldrd	r0, [sp, #8]
   156ec:	mov	r7, #1
   156f0:	str	r7, [sp]
   156f4:	adds	r0, r0, r2
   156f8:	adc	r1, r1, r3
   156fc:	mov	r2, r0
   15700:	mov	r3, r1
   15704:	mov	r0, r6
   15708:	strd	r2, [sp, #8]
   1570c:	bl	112a8 <lseek64@plt>
   15710:	cmp	r0, #0
   15714:	sbcs	r3, r1, #0
   15718:	blt	15820 <__assert_fail@plt+0x4344>
   1571c:	cmp	r6, #0
   15720:	bne	15640 <__assert_fail@plt+0x4164>
   15724:	add	r1, sp, #40	; 0x28
   15728:	mov	r0, r6
   1572c:	bl	14db8 <__assert_fail@plt+0x38dc>
   15730:	cmp	r0, #0
   15734:	bne	15984 <__assert_fail@plt+0x44a8>
   15738:	ldr	r3, [sp, #56]	; 0x38
   1573c:	and	r3, r3, #53248	; 0xd000
   15740:	cmp	r3, #32768	; 0x8000
   15744:	bne	15924 <__assert_fail@plt+0x4448>
   15748:	ldr	r3, [pc, #620]	; 159bc <__assert_fail@plt+0x44e0>
   1574c:	ldrd	r4, [r3, #8]
   15750:	cmp	r4, #0
   15754:	sbcs	r3, r5, #0
   15758:	blt	15924 <__assert_fail@plt+0x4448>
   1575c:	ldrd	r0, [sp, #88]	; 0x58
   15760:	ldrd	r2, [sp, #8]
   15764:	subs	r4, r0, r4
   15768:	sbc	r5, r1, r5
   1576c:	cmp	r4, r2
   15770:	sbcs	ip, r5, r3
   15774:	bge	15924 <__assert_fail@plt+0x4448>
   15778:	subs	r2, r2, r0
   1577c:	sbc	r3, r3, r1
   15780:	mov	r0, r2
   15784:	mov	r1, r3
   15788:	mov	r2, sl
   1578c:	asr	r3, sl, #31
   15790:	strd	r4, [sp, #8]
   15794:	bl	1add8 <__assert_fail@plt+0x98fc>
   15798:	mov	r6, r0
   1579c:	mov	r4, r1
   157a0:	ldrd	r0, [sp, #8]
   157a4:	bl	137b0 <__assert_fail@plt+0x22d4>
   157a8:	b	15650 <__assert_fail@plt+0x4174>
   157ac:	asr	r1, r0, #31
   157b0:	bl	137b0 <__assert_fail@plt+0x22d4>
   157b4:	b	15638 <__assert_fail@plt+0x415c>
   157b8:	mov	r6, r4
   157bc:	mov	r4, r5
   157c0:	b	15650 <__assert_fail@plt+0x4174>
   157c4:	bl	14200 <__assert_fail@plt+0x2d24>
   157c8:	ldr	r9, [r7, #120]	; 0x78
   157cc:	b	155d8 <__assert_fail@plt+0x40fc>
   157d0:	cmp	r4, #0
   157d4:	sbcs	r3, r5, #0
   157d8:	blt	157f8 <__assert_fail@plt+0x431c>
   157dc:	cmn	sl, #1
   157e0:	beq	15698 <__assert_fail@plt+0x41bc>
   157e4:	mov	r2, sl
   157e8:	asr	r3, sl, #31
   157ec:	mov	r0, #0
   157f0:	mov	r1, #-2147483648	; 0x80000000
   157f4:	b	1567c <__assert_fail@plt+0x41a0>
   157f8:	asr	r3, sl, #31
   157fc:	mov	r2, sl
   15800:	mvn	r0, #0
   15804:	mvn	r1, #-2147483648	; 0x80000000
   15808:	bl	1add8 <__assert_fail@plt+0x98fc>
   1580c:	cmp	r4, r0
   15810:	sbcs	r3, r5, r1
   15814:	movlt	r3, #1
   15818:	movge	r3, #0
   1581c:	b	15690 <__assert_fail@plt+0x41b4>
   15820:	ldr	r3, [fp]
   15824:	mov	r1, #2
   15828:	str	r3, [sp, #8]
   1582c:	mov	r2, #0
   15830:	mov	r3, #0
   15834:	str	r1, [sp]
   15838:	mov	r0, r6
   1583c:	bl	112a8 <lseek64@plt>
   15840:	cmp	r0, #0
   15844:	sbcs	r3, r1, #0
   15848:	blt	155c4 <__assert_fail@plt+0x40e8>
   1584c:	ldr	r3, [sp, #8]
   15850:	cmp	r3, #0
   15854:	bne	15860 <__assert_fail@plt+0x4384>
   15858:	mov	r3, #75	; 0x4b
   1585c:	str	r3, [sp, #8]
   15860:	cmp	r6, #0
   15864:	mov	r2, #5
   15868:	ldreq	r1, [pc, #336]	; 159c0 <__assert_fail@plt+0x44e4>
   1586c:	beq	15874 <__assert_fail@plt+0x4398>
   15870:	ldr	r1, [pc, #332]	; 159c4 <__assert_fail@plt+0x44e8>
   15874:	mov	r0, #0
   15878:	bl	11230 <dcgettext@plt>
   1587c:	ldr	r2, [sp, #28]
   15880:	mov	r1, #3
   15884:	mov	r4, r0
   15888:	mov	r0, #0
   1588c:	bl	18a74 <__assert_fail@plt+0x7598>
   15890:	mov	r2, r4
   15894:	ldr	r1, [sp, #8]
   15898:	mov	r3, r0
   1589c:	mov	r0, #0
   158a0:	bl	13d54 <__assert_fail@plt+0x2878>
   158a4:	b	15980 <__assert_fail@plt+0x44a4>
   158a8:	mov	r2, r1
   158ac:	asr	r3, r1, #31
   158b0:	mov	r0, #0
   158b4:	strd	r2, [sp, #32]
   158b8:	mov	r1, #-2147483648	; 0x80000000
   158bc:	subs	r2, r0, r2
   158c0:	sbc	r3, r1, r3
   158c4:	mov	r1, r3
   158c8:	mov	r0, r2
   158cc:	ldrd	r2, [sp, #16]
   158d0:	cmp	r2, r0
   158d4:	sbcs	r3, r3, r1
   158d8:	movlt	r1, #1
   158dc:	movge	r1, #0
   158e0:	b	15590 <__assert_fail@plt+0x40b4>
   158e4:	mvn	r1, #0
   158e8:	mvn	r0, #0
   158ec:	cmp	r5, r1
   158f0:	cmpeq	r4, r0
   158f4:	beq	15690 <__assert_fail@plt+0x41b4>
   158f8:	mov	r3, r5
   158fc:	mov	r2, r4
   15900:	mov	r0, #0
   15904:	mov	r1, #-2147483648	; 0x80000000
   15908:	bl	1add8 <__assert_fail@plt+0x98fc>
   1590c:	asr	r3, sl, #31
   15910:	cmp	r0, sl
   15914:	sbcs	r3, r1, r3
   15918:	movlt	r3, #1
   1591c:	movge	r3, #0
   15920:	b	15690 <__assert_fail@plt+0x41b4>
   15924:	mov	r6, #0
   15928:	mov	r4, r6
   1592c:	b	157a0 <__assert_fail@plt+0x42c4>
   15930:	cmp	r6, #0
   15934:	mov	r2, #5
   15938:	bne	15870 <__assert_fail@plt+0x4394>
   1593c:	ldr	r1, [pc, #132]	; 159c8 <__assert_fail@plt+0x44ec>
   15940:	mov	r0, r6
   15944:	ldr	r4, [fp]
   15948:	bl	11230 <dcgettext@plt>
   1594c:	ldr	r1, [sp, #28]
   15950:	mov	r5, r0
   15954:	mov	r0, #4
   15958:	bl	189b8 <__assert_fail@plt+0x74dc>
   1595c:	mov	r2, r5
   15960:	mov	r1, r4
   15964:	mov	r3, r0
   15968:	mov	r0, r6
   1596c:	bl	13d54 <__assert_fail@plt+0x2878>
   15970:	ldr	r3, [r7, #112]	; 0x70
   15974:	tst	r3, #256	; 0x100
   15978:	beq	15980 <__assert_fail@plt+0x44a4>
   1597c:	bl	13bf8 <__assert_fail@plt+0x271c>
   15980:	bl	15214 <__assert_fail@plt+0x3d38>
   15984:	mov	r2, #5
   15988:	ldr	r1, [pc, #60]	; 159cc <__assert_fail@plt+0x44f0>
   1598c:	mov	r0, r6
   15990:	ldr	r4, [fp]
   15994:	bl	11230 <dcgettext@plt>
   15998:	ldr	r1, [sp, #28]
   1599c:	mov	r5, r0
   159a0:	mov	r0, #4
   159a4:	bl	189b8 <__assert_fail@plt+0x74dc>
   159a8:	mov	r2, r5
   159ac:	mov	r1, r4
   159b0:	mov	r3, r0
   159b4:	mov	r0, r7
   159b8:	bl	13d54 <__assert_fail@plt+0x2878>
   159bc:	andeq	lr, r2, r8, ror #3
   159c0:	muleq	r1, ip, r7
   159c4:	andeq	ip, r1, ip, lsr #15
   159c8:			; <UNDEFINED> instruction: 0x0001c7bc
   159cc:	andeq	ip, r1, ip, lsl #15
   159d0:	push	{r4, r5, r6, lr}
   159d4:	mov	r4, r0
   159d8:	bl	112c0 <__fpending@plt>
   159dc:	ldr	r5, [r4]
   159e0:	and	r5, r5, #32
   159e4:	mov	r6, r0
   159e8:	mov	r0, r4
   159ec:	bl	15b50 <__assert_fail@plt+0x4674>
   159f0:	cmp	r5, #0
   159f4:	mov	r4, r0
   159f8:	bne	15a18 <__assert_fail@plt+0x453c>
   159fc:	cmp	r0, #0
   15a00:	beq	15a10 <__assert_fail@plt+0x4534>
   15a04:	cmp	r6, #0
   15a08:	beq	15a34 <__assert_fail@plt+0x4558>
   15a0c:	mvn	r4, #0
   15a10:	mov	r0, r4
   15a14:	pop	{r4, r5, r6, pc}
   15a18:	cmp	r0, #0
   15a1c:	bne	15a0c <__assert_fail@plt+0x4530>
   15a20:	bl	113a4 <__errno_location@plt>
   15a24:	str	r4, [r0]
   15a28:	mvn	r4, #0
   15a2c:	mov	r0, r4
   15a30:	pop	{r4, r5, r6, pc}
   15a34:	bl	113a4 <__errno_location@plt>
   15a38:	ldr	r4, [r0]
   15a3c:	subs	r4, r4, #9
   15a40:	mvnne	r4, #0
   15a44:	mov	r0, r4
   15a48:	pop	{r4, r5, r6, pc}
   15a4c:	ldr	r3, [pc, #4]	; 15a58 <__assert_fail@plt+0x457c>
   15a50:	str	r0, [r3]
   15a54:	bx	lr
   15a58:	andeq	lr, r2, r8, asr #8
   15a5c:	ldr	r3, [pc, #4]	; 15a68 <__assert_fail@plt+0x458c>
   15a60:	strb	r0, [r3, #4]
   15a64:	bx	lr
   15a68:	andeq	lr, r2, r8, asr #8
   15a6c:	ldr	r3, [pc, #192]	; 15b34 <__assert_fail@plt+0x4658>
   15a70:	push	{r4, r5, r6, lr}
   15a74:	sub	sp, sp, #8
   15a78:	ldr	r0, [r3]
   15a7c:	bl	159d0 <__assert_fail@plt+0x44f4>
   15a80:	cmp	r0, #0
   15a84:	beq	15aa8 <__assert_fail@plt+0x45cc>
   15a88:	ldr	r4, [pc, #168]	; 15b38 <__assert_fail@plt+0x465c>
   15a8c:	ldrb	r3, [r4, #4]
   15a90:	cmp	r3, #0
   15a94:	beq	15ac4 <__assert_fail@plt+0x45e8>
   15a98:	bl	113a4 <__errno_location@plt>
   15a9c:	ldr	r3, [r0]
   15aa0:	cmp	r3, #32
   15aa4:	bne	15ac4 <__assert_fail@plt+0x45e8>
   15aa8:	ldr	r3, [pc, #140]	; 15b3c <__assert_fail@plt+0x4660>
   15aac:	ldr	r0, [r3]
   15ab0:	bl	159d0 <__assert_fail@plt+0x44f4>
   15ab4:	cmp	r0, #0
   15ab8:	bne	15b0c <__assert_fail@plt+0x4630>
   15abc:	add	sp, sp, #8
   15ac0:	pop	{r4, r5, r6, pc}
   15ac4:	mov	r2, #5
   15ac8:	ldr	r1, [pc, #112]	; 15b40 <__assert_fail@plt+0x4664>
   15acc:	mov	r0, #0
   15ad0:	bl	11230 <dcgettext@plt>
   15ad4:	ldr	r4, [r4]
   15ad8:	cmp	r4, #0
   15adc:	mov	r5, r0
   15ae0:	beq	15b18 <__assert_fail@plt+0x463c>
   15ae4:	bl	113a4 <__errno_location@plt>
   15ae8:	ldr	r6, [r0]
   15aec:	mov	r0, r4
   15af0:	bl	18a60 <__assert_fail@plt+0x7584>
   15af4:	mov	r1, r6
   15af8:	str	r5, [sp]
   15afc:	ldr	r2, [pc, #64]	; 15b44 <__assert_fail@plt+0x4668>
   15b00:	mov	r3, r0
   15b04:	mov	r0, #0
   15b08:	bl	112d8 <error@plt>
   15b0c:	ldr	r3, [pc, #52]	; 15b48 <__assert_fail@plt+0x466c>
   15b10:	ldr	r0, [r3]
   15b14:	bl	111dc <_exit@plt>
   15b18:	bl	113a4 <__errno_location@plt>
   15b1c:	mov	r3, r5
   15b20:	ldr	r2, [pc, #36]	; 15b4c <__assert_fail@plt+0x4670>
   15b24:	ldr	r1, [r0]
   15b28:	mov	r0, r4
   15b2c:	bl	112d8 <error@plt>
   15b30:	b	15b0c <__assert_fail@plt+0x4630>
   15b34:	ldrdeq	lr, [r2], -ip
   15b38:	andeq	lr, r2, r8, asr #8
   15b3c:	ldrdeq	lr, [r2], -r8
   15b40:	ldrdeq	ip, [r1], -r4
   15b44:	andeq	ip, r1, r8, ror #12
   15b48:	andeq	lr, r2, ip, ror r1
   15b4c:	andeq	fp, r1, r4, asr #14
   15b50:	push	{r4, r5, lr}
   15b54:	sub	sp, sp, #12
   15b58:	mov	r4, r0
   15b5c:	bl	113f8 <fileno@plt>
   15b60:	cmp	r0, #0
   15b64:	mov	r0, r4
   15b68:	blt	15be4 <__assert_fail@plt+0x4708>
   15b6c:	bl	1132c <__freading@plt>
   15b70:	cmp	r0, #0
   15b74:	bne	15bb0 <__assert_fail@plt+0x46d4>
   15b78:	mov	r0, r4
   15b7c:	bl	15e28 <__assert_fail@plt+0x494c>
   15b80:	cmp	r0, #0
   15b84:	beq	15be0 <__assert_fail@plt+0x4704>
   15b88:	bl	113a4 <__errno_location@plt>
   15b8c:	mov	r5, r0
   15b90:	mov	r0, r4
   15b94:	ldr	r4, [r5]
   15b98:	bl	11410 <fclose@plt>
   15b9c:	cmp	r4, #0
   15ba0:	mvnne	r0, #0
   15ba4:	strne	r4, [r5]
   15ba8:	add	sp, sp, #12
   15bac:	pop	{r4, r5, pc}
   15bb0:	mov	r0, r4
   15bb4:	bl	113f8 <fileno@plt>
   15bb8:	mov	r3, #1
   15bbc:	str	r3, [sp]
   15bc0:	mov	r2, #0
   15bc4:	mov	r3, #0
   15bc8:	bl	112a8 <lseek64@plt>
   15bcc:	mvn	r3, #0
   15bd0:	mvn	r2, #0
   15bd4:	cmp	r1, r3
   15bd8:	cmpeq	r0, r2
   15bdc:	bne	15b78 <__assert_fail@plt+0x469c>
   15be0:	mov	r0, r4
   15be4:	add	sp, sp, #12
   15be8:	pop	{r4, r5, lr}
   15bec:	b	11410 <fclose@plt>
   15bf0:	push	{r1, r2, r3}
   15bf4:	push	{r4, r5, r6, r7, lr}
   15bf8:	sub	sp, sp, #8
   15bfc:	add	r3, sp, #32
   15c00:	ldr	r1, [sp, #28]
   15c04:	str	r3, [sp, #4]
   15c08:	cmp	r1, #0
   15c0c:	beq	15ca4 <__assert_fail@plt+0x47c8>
   15c10:	ldr	r2, [pc, #412]	; 15db4 <__assert_fail@plt+0x48d8>
   15c14:	mov	r5, r0
   15c18:	cmp	r1, r2
   15c1c:	bne	15c68 <__assert_fail@plt+0x478c>
   15c20:	ldr	r6, [pc, #400]	; 15db8 <__assert_fail@plt+0x48dc>
   15c24:	ldr	r7, [r3]
   15c28:	add	r2, sp, #36	; 0x24
   15c2c:	ldr	r3, [r6]
   15c30:	str	r2, [sp, #4]
   15c34:	cmp	r3, #0
   15c38:	mov	r2, r7
   15c3c:	blt	15d68 <__assert_fail@plt+0x488c>
   15c40:	bl	11428 <fcntl64@plt>
   15c44:	subs	r4, r0, #0
   15c48:	blt	15cec <__assert_fail@plt+0x4810>
   15c4c:	mov	r3, #1
   15c50:	str	r3, [r6]
   15c54:	mov	r0, r4
   15c58:	add	sp, sp, #8
   15c5c:	pop	{r4, r5, r6, r7, lr}
   15c60:	add	sp, sp, #12
   15c64:	bx	lr
   15c68:	cmp	r1, #11
   15c6c:	beq	15c94 <__assert_fail@plt+0x47b8>
   15c70:	bgt	15cb4 <__assert_fail@plt+0x47d8>
   15c74:	cmp	r1, #3
   15c78:	beq	15c94 <__assert_fail@plt+0x47b8>
   15c7c:	ble	15da8 <__assert_fail@plt+0x48cc>
   15c80:	cmp	r1, #8
   15c84:	beq	15cd4 <__assert_fail@plt+0x47f8>
   15c88:	ble	15cd4 <__assert_fail@plt+0x47f8>
   15c8c:	cmp	r1, #9
   15c90:	bne	15cd4 <__assert_fail@plt+0x47f8>
   15c94:	mov	r0, r5
   15c98:	bl	11428 <fcntl64@plt>
   15c9c:	mov	r4, r0
   15ca0:	b	15c54 <__assert_fail@plt+0x4778>
   15ca4:	ldr	r2, [sp, #32]
   15ca8:	bl	11428 <fcntl64@plt>
   15cac:	mov	r4, r0
   15cb0:	b	15c54 <__assert_fail@plt+0x4778>
   15cb4:	ldr	r3, [pc, #256]	; 15dbc <__assert_fail@plt+0x48e0>
   15cb8:	cmp	r1, r3
   15cbc:	bgt	15d88 <__assert_fail@plt+0x48ac>
   15cc0:	cmp	r1, r2
   15cc4:	bge	15cd4 <__assert_fail@plt+0x47f8>
   15cc8:	sub	r3, r3, #6
   15ccc:	cmp	r1, r3
   15cd0:	beq	15c94 <__assert_fail@plt+0x47b8>
   15cd4:	ldr	r3, [sp, #4]
   15cd8:	mov	r0, r5
   15cdc:	ldr	r2, [r3]
   15ce0:	bl	11428 <fcntl64@plt>
   15ce4:	mov	r4, r0
   15ce8:	b	15c54 <__assert_fail@plt+0x4778>
   15cec:	bl	113a4 <__errno_location@plt>
   15cf0:	ldr	r3, [r0]
   15cf4:	cmp	r3, #22
   15cf8:	bne	15c4c <__assert_fail@plt+0x4770>
   15cfc:	mov	r2, r7
   15d00:	mov	r0, r5
   15d04:	mov	r1, #0
   15d08:	bl	11428 <fcntl64@plt>
   15d0c:	subs	r4, r0, #0
   15d10:	blt	15c54 <__assert_fail@plt+0x4778>
   15d14:	mvn	r3, #0
   15d18:	str	r3, [r6]
   15d1c:	mov	r1, #1
   15d20:	mov	r0, r4
   15d24:	bl	11428 <fcntl64@plt>
   15d28:	subs	r2, r0, #0
   15d2c:	blt	15d48 <__assert_fail@plt+0x486c>
   15d30:	orr	r2, r2, #1
   15d34:	mov	r1, #2
   15d38:	mov	r0, r4
   15d3c:	bl	11428 <fcntl64@plt>
   15d40:	cmn	r0, #1
   15d44:	bne	15c54 <__assert_fail@plt+0x4778>
   15d48:	bl	113a4 <__errno_location@plt>
   15d4c:	mov	r5, r0
   15d50:	mov	r0, r4
   15d54:	ldr	r6, [r5]
   15d58:	mvn	r4, #0
   15d5c:	bl	114b8 <close@plt>
   15d60:	str	r6, [r5]
   15d64:	b	15c54 <__assert_fail@plt+0x4778>
   15d68:	mov	r1, #0
   15d6c:	bl	11428 <fcntl64@plt>
   15d70:	subs	r4, r0, #0
   15d74:	blt	15c54 <__assert_fail@plt+0x4778>
   15d78:	ldr	r3, [r6]
   15d7c:	cmn	r3, #1
   15d80:	beq	15d1c <__assert_fail@plt+0x4840>
   15d84:	b	15c54 <__assert_fail@plt+0x4778>
   15d88:	ldr	r3, [pc, #48]	; 15dc0 <__assert_fail@plt+0x48e4>
   15d8c:	cmp	r1, r3
   15d90:	beq	15cd4 <__assert_fail@plt+0x47f8>
   15d94:	blt	15c94 <__assert_fail@plt+0x47b8>
   15d98:	add	r3, r3, #1
   15d9c:	cmp	r1, r3
   15da0:	bne	15cd4 <__assert_fail@plt+0x47f8>
   15da4:	b	15c94 <__assert_fail@plt+0x47b8>
   15da8:	cmp	r1, #1
   15dac:	bne	15cd4 <__assert_fail@plt+0x47f8>
   15db0:	b	15c94 <__assert_fail@plt+0x47b8>
   15db4:	andeq	r0, r0, r6, lsl #8
   15db8:	andeq	lr, r2, r0, asr r4
   15dbc:	andeq	r0, r0, r7, lsl #8
   15dc0:	andeq	r0, r0, r9, lsl #8
   15dc4:	mov	ip, r1
   15dc8:	push	{r4, r5, r6, r7, r8, lr}
   15dcc:	mov	r1, r2
   15dd0:	mov	r5, r0
   15dd4:	mov	r2, r3
   15dd8:	mov	r0, ip
   15ddc:	bl	112e4 <open64@plt>
   15de0:	sub	r3, r5, r0
   15de4:	clz	r3, r3
   15de8:	lsr	r3, r3, #5
   15dec:	orrs	r3, r3, r0, lsr #31
   15df0:	mov	r4, r0
   15df4:	bne	15e20 <__assert_fail@plt+0x4944>
   15df8:	mov	r1, r5
   15dfc:	bl	1123c <dup2@plt>
   15e00:	mov	r7, r0
   15e04:	bl	113a4 <__errno_location@plt>
   15e08:	mov	r5, r0
   15e0c:	mov	r0, r4
   15e10:	ldr	r6, [r5]
   15e14:	mov	r4, r7
   15e18:	bl	114b8 <close@plt>
   15e1c:	str	r6, [r5]
   15e20:	mov	r0, r4
   15e24:	pop	{r4, r5, r6, r7, r8, pc}
   15e28:	push	{r4, lr}
   15e2c:	subs	r4, r0, #0
   15e30:	sub	sp, sp, #8
   15e34:	beq	15e50 <__assert_fail@plt+0x4974>
   15e38:	bl	1132c <__freading@plt>
   15e3c:	cmp	r0, #0
   15e40:	beq	15e50 <__assert_fail@plt+0x4974>
   15e44:	ldr	r3, [r4]
   15e48:	tst	r3, #256	; 0x100
   15e4c:	bne	15e60 <__assert_fail@plt+0x4984>
   15e50:	mov	r0, r4
   15e54:	add	sp, sp, #8
   15e58:	pop	{r4, lr}
   15e5c:	b	111a0 <fflush@plt>
   15e60:	mov	r3, #1
   15e64:	str	r3, [sp]
   15e68:	mov	r2, #0
   15e6c:	mov	r3, #0
   15e70:	mov	r0, r4
   15e74:	bl	15e88 <__assert_fail@plt+0x49ac>
   15e78:	mov	r0, r4
   15e7c:	add	sp, sp, #8
   15e80:	pop	{r4, lr}
   15e84:	b	111a0 <fflush@plt>
   15e88:	push	{r4, r5, r6, r7, r8, lr}
   15e8c:	sub	sp, sp, #8
   15e90:	ldmib	r0, {ip, lr}
   15e94:	mov	r4, r0
   15e98:	ldr	r5, [sp, #32]
   15e9c:	cmp	lr, ip
   15ea0:	beq	15eb8 <__assert_fail@plt+0x49dc>
   15ea4:	str	r5, [sp, #32]
   15ea8:	mov	r0, r4
   15eac:	add	sp, sp, #8
   15eb0:	pop	{r4, r5, r6, r7, r8, lr}
   15eb4:	b	1141c <fseeko64@plt>
   15eb8:	ldr	lr, [r0, #20]
   15ebc:	ldr	ip, [r0, #16]
   15ec0:	cmp	lr, ip
   15ec4:	bne	15ea4 <__assert_fail@plt+0x49c8>
   15ec8:	ldr	r8, [r0, #36]	; 0x24
   15ecc:	cmp	r8, #0
   15ed0:	bne	15ea4 <__assert_fail@plt+0x49c8>
   15ed4:	mov	r6, r2
   15ed8:	mov	r7, r3
   15edc:	bl	113f8 <fileno@plt>
   15ee0:	mov	r2, r6
   15ee4:	mov	r3, r7
   15ee8:	str	r5, [sp]
   15eec:	bl	112a8 <lseek64@plt>
   15ef0:	mvn	r3, #0
   15ef4:	mvn	r2, #0
   15ef8:	cmp	r1, r3
   15efc:	cmpeq	r0, r2
   15f00:	beq	15f20 <__assert_fail@plt+0x4a44>
   15f04:	ldr	r3, [r4]
   15f08:	strd	r0, [r4, #80]	; 0x50
   15f0c:	mov	r0, r8
   15f10:	bic	r3, r3, #16
   15f14:	str	r3, [r4]
   15f18:	add	sp, sp, #8
   15f1c:	pop	{r4, r5, r6, r7, r8, pc}
   15f20:	mvn	r0, #0
   15f24:	b	15f18 <__assert_fail@plt+0x4a3c>
   15f28:	push	{lr}		; (str lr, [sp, #-4]!)
   15f2c:	sub	sp, sp, #12
   15f30:	mov	r1, sp
   15f34:	mov	r0, #1
   15f38:	bl	111d0 <clock_gettime@plt>
   15f3c:	cmp	r0, #0
   15f40:	beq	15f4c <__assert_fail@plt+0x4a70>
   15f44:	mov	r0, sp
   15f48:	bl	15f6c <__assert_fail@plt+0x4a90>
   15f4c:	ldr	r0, [sp, #4]
   15f50:	ldr	r2, [sp]
   15f54:	ldr	r3, [pc, #12]	; 15f68 <__assert_fail@plt+0x4a8c>
   15f58:	asr	r1, r0, #31
   15f5c:	smlal	r0, r1, r3, r2
   15f60:	add	sp, sp, #12
   15f64:	pop	{pc}		; (ldr pc, [sp], #4)
   15f68:	blcc	fe6c8770 <opterr@@GLIBC_2.4+0xfe69a590>
   15f6c:	mov	r1, r0
   15f70:	mov	r0, #0
   15f74:	b	111d0 <clock_gettime@plt>
   15f78:	push	{r4, r5, lr}
   15f7c:	sub	sp, sp, #12
   15f80:	mov	r4, r0
   15f84:	mov	r1, sp
   15f88:	mov	r0, #0
   15f8c:	bl	111d0 <clock_gettime@plt>
   15f90:	ldm	sp, {r0, r1}
   15f94:	stm	r4, {r0, r1}
   15f98:	mov	r0, r4
   15f9c:	add	sp, sp, #12
   15fa0:	pop	{r4, r5, pc}
   15fa4:	andeq	r0, r0, r0
   15fa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fac:	vpush	{d8-d9}
   15fb0:	mov	r8, r3
   15fb4:	ands	r3, r3, #32
   15fb8:	mov	r4, r2
   15fbc:	sub	sp, sp, #124	; 0x7c
   15fc0:	mov	r7, r1
   15fc4:	str	r3, [sp, #20]
   15fc8:	moveq	r3, #1000	; 0x3e8
   15fcc:	movne	r3, #1024	; 0x400
   15fd0:	str	r2, [sp, #12]
   15fd4:	str	r3, [sp, #24]
   15fd8:	mov	r6, r0
   15fdc:	bl	11470 <localeconv@plt>
   15fe0:	add	r3, r4, #644	; 0x284
   15fe4:	str	r3, [sp, #36]	; 0x24
   15fe8:	add	r3, r3, #3
   15fec:	str	r3, [sp, #8]
   15ff0:	ldr	r9, [r0]
   15ff4:	mov	r5, r0
   15ff8:	mov	r0, r9
   15ffc:	bl	11380 <strlen@plt>
   16000:	ldr	fp, [r5, #4]
   16004:	ldr	r3, [pc, #1036]	; 16418 <__assert_fail@plt+0x4f3c>
   16008:	sub	r2, r0, #1
   1600c:	cmp	r2, #16
   16010:	movcc	r3, r9
   16014:	mov	r4, r0
   16018:	mov	r0, fp
   1601c:	movcs	r4, #1
   16020:	str	r3, [sp, #32]
   16024:	bl	11380 <strlen@plt>
   16028:	ldr	r3, [pc, #1004]	; 1641c <__assert_fail@plt+0x4f40>
   1602c:	and	r2, r8, #3
   16030:	str	r2, [sp, #16]
   16034:	ldr	r9, [r5, #8]
   16038:	cmp	r0, #16
   1603c:	movhi	fp, r3
   16040:	ldrd	r0, [sp, #176]	; 0xb0
   16044:	ldrd	r2, [sp, #184]	; 0xb8
   16048:	str	fp, [sp, #28]
   1604c:	cmp	r3, r1
   16050:	cmpeq	r2, r0
   16054:	bhi	16240 <__assert_fail@plt+0x4d64>
   16058:	bl	1aeac <__assert_fail@plt+0x99d0>
   1605c:	orrs	r3, r2, r3
   16060:	bne	160a0 <__assert_fail@plt+0x4bc4>
   16064:	ldrd	r2, [sp, #184]	; 0xb8
   16068:	ldrd	r0, [sp, #176]	; 0xb0
   1606c:	bl	1aeac <__assert_fail@plt+0x99d0>
   16070:	mov	r2, r0
   16074:	mul	r0, r0, r7
   16078:	umull	sl, fp, r2, r6
   1607c:	mla	r0, r6, r1, r0
   16080:	mov	r3, r1
   16084:	add	fp, r0, fp
   16088:	mov	r1, fp
   1608c:	mov	r0, sl
   16090:	bl	1aeac <__assert_fail@plt+0x99d0>
   16094:	cmp	r7, r1
   16098:	cmpeq	r6, r0
   1609c:	beq	166ac <__assert_fail@plt+0x51d0>
   160a0:	ldrd	r0, [sp, #176]	; 0xb0
   160a4:	bl	1ad64 <__assert_fail@plt+0x9888>
   160a8:	vmov	d9, r0, r1
   160ac:	ldrd	r0, [sp, #184]	; 0xb8
   160b0:	bl	1ad64 <__assert_fail@plt+0x9888>
   160b4:	vmov	d7, r0, r1
   160b8:	mov	r0, r6
   160bc:	mov	r1, r7
   160c0:	vdiv.f64	d8, d9, d7
   160c4:	bl	1ad64 <__assert_fail@plt+0x9888>
   160c8:	ands	r6, r8, #16
   160cc:	vmov	d7, r0, r1
   160d0:	vmul.f64	d8, d8, d7
   160d4:	beq	16428 <__assert_fail@plt+0x4f4c>
   160d8:	vldr	s15, [sp, #24]
   160dc:	mov	r5, #0
   160e0:	vcvt.f64.s32	d6, s15
   160e4:	vmov.f64	d7, d6
   160e8:	vmov.f64	d5, d7
   160ec:	vmul.f64	d7, d7, d6
   160f0:	add	r5, r5, #1
   160f4:	vcmpe.f64	d8, d7
   160f8:	vmrs	APSR_nzcv, fpscr
   160fc:	blt	16108 <__assert_fail@plt+0x4c2c>
   16100:	cmp	r5, #8
   16104:	bne	160e8 <__assert_fail@plt+0x4c0c>
   16108:	ldr	sl, [sp, #16]
   1610c:	vdiv.f64	d9, d8, d5
   16110:	cmp	sl, #1
   16114:	beq	16554 <__assert_fail@plt+0x5078>
   16118:	vldr	d7, [pc, #744]	; 16408 <__assert_fail@plt+0x4f2c>
   1611c:	vmov	r0, r1, d9
   16120:	vcmpe.f64	d9, d7
   16124:	vmrs	APSR_nzcv, fpscr
   16128:	bpl	16170 <__assert_fail@plt+0x4c94>
   1612c:	bl	1aef8 <__assert_fail@plt+0x9a1c>
   16130:	cmp	sl, #0
   16134:	mov	r6, r0
   16138:	mov	r7, r1
   1613c:	movne	r0, #0
   16140:	bne	1615c <__assert_fail@plt+0x4c80>
   16144:	bl	1ad64 <__assert_fail@plt+0x9888>
   16148:	vmov	d7, r0, r1
   1614c:	vcmp.f64	d7, d9
   16150:	vmrs	APSR_nzcv, fpscr
   16154:	movne	r0, #1
   16158:	moveq	r0, #0
   1615c:	adds	r2, r6, r0
   16160:	adc	r3, r7, #0
   16164:	mov	r0, r2
   16168:	mov	r1, r3
   1616c:	bl	1ad64 <__assert_fail@plt+0x9888>
   16170:	ldr	r6, [sp, #12]
   16174:	strd	r0, [sp]
   16178:	ldr	r3, [pc, #672]	; 16420 <__assert_fail@plt+0x4f44>
   1617c:	mvn	r2, #0
   16180:	mov	r1, #1
   16184:	mov	r0, r6
   16188:	bl	113b0 <__sprintf_chk@plt>
   1618c:	mov	r0, r6
   16190:	bl	11380 <strlen@plt>
   16194:	ldr	r3, [sp, #20]
   16198:	add	r6, r4, #1
   1619c:	cmp	r3, #0
   161a0:	movne	r3, #1
   161a4:	moveq	r3, #2
   161a8:	add	r3, r3, r6
   161ac:	cmp	r0, r3
   161b0:	mov	r7, r0
   161b4:	bls	1659c <__assert_fail@plt+0x50c0>
   161b8:	vldr	d7, [pc, #592]	; 16410 <__assert_fail@plt+0x4f34>
   161bc:	vmul.f64	d9, d9, d7
   161c0:	vldr	d7, [pc, #576]	; 16408 <__assert_fail@plt+0x4f2c>
   161c4:	vcmpe.f64	d9, d7
   161c8:	vmrs	APSR_nzcv, fpscr
   161cc:	bpl	16208 <__assert_fail@plt+0x4d2c>
   161d0:	vmov	r0, r1, d9
   161d4:	bl	1aef8 <__assert_fail@plt+0x9a1c>
   161d8:	ldr	r3, [sp, #16]
   161dc:	cmp	r3, #0
   161e0:	mov	r6, r0
   161e4:	mov	r7, r1
   161e8:	movne	r0, #0
   161ec:	beq	16860 <__assert_fail@plt+0x5384>
   161f0:	adds	r2, r6, r0
   161f4:	adc	r3, r7, #0
   161f8:	mov	r0, r2
   161fc:	mov	r1, r3
   16200:	bl	1ad64 <__assert_fail@plt+0x9888>
   16204:	vmov	d9, r0, r1
   16208:	vldr	d6, [pc, #512]	; 16410 <__assert_fail@plt+0x4f34>
   1620c:	ldr	r4, [sp, #12]
   16210:	ldr	r3, [pc, #524]	; 16424 <__assert_fail@plt+0x4f48>
   16214:	mvn	r2, #0
   16218:	vdiv.f64	d7, d9, d6
   1621c:	mov	r1, #1
   16220:	mov	r0, r4
   16224:	mov	r6, #0
   16228:	vstr	d7, [sp]
   1622c:	bl	113b0 <__sprintf_chk@plt>
   16230:	mov	r0, r4
   16234:	bl	11380 <strlen@plt>
   16238:	mov	r7, r0
   1623c:	b	16474 <__assert_fail@plt+0x4f98>
   16240:	ldrd	r2, [sp, #176]	; 0xb0
   16244:	orrs	r3, r2, r3
   16248:	beq	160a0 <__assert_fail@plt+0x4bc4>
   1624c:	ldrd	r2, [sp, #176]	; 0xb0
   16250:	ldrd	r0, [sp, #184]	; 0xb8
   16254:	bl	1aeac <__assert_fail@plt+0x99d0>
   16258:	orrs	r3, r2, r3
   1625c:	bne	160a0 <__assert_fail@plt+0x4bc4>
   16260:	ldrd	r2, [sp, #176]	; 0xb0
   16264:	ldrd	r0, [sp, #184]	; 0xb8
   16268:	bl	1aeac <__assert_fail@plt+0x99d0>
   1626c:	mov	sl, r0
   16270:	mov	fp, r1
   16274:	mov	r2, r0
   16278:	mov	r3, r1
   1627c:	mov	r0, r6
   16280:	mov	r1, r7
   16284:	strd	sl, [sp, #48]	; 0x30
   16288:	bl	1aeac <__assert_fail@plt+0x99d0>
   1628c:	mov	r1, #10
   16290:	umull	sl, fp, r2, r1
   16294:	mla	r3, r1, r3, fp
   16298:	strd	sl, [sp, #40]	; 0x28
   1629c:	ldrd	sl, [sp, #48]	; 0x30
   162a0:	str	r3, [sp, #44]	; 0x2c
   162a4:	ldrd	r0, [sp, #40]	; 0x28
   162a8:	mov	r2, sl
   162ac:	mov	r3, fp
   162b0:	bl	1aeac <__assert_fail@plt+0x99d0>
   162b4:	mov	r0, r6
   162b8:	mov	r1, r7
   162bc:	lsls	r6, r2, #1
   162c0:	adc	r7, r3, r3
   162c4:	mov	r2, sl
   162c8:	mov	r3, fp
   162cc:	strd	r6, [sp, #56]	; 0x38
   162d0:	bl	1aeac <__assert_fail@plt+0x99d0>
   162d4:	mov	r7, fp
   162d8:	mov	r6, sl
   162dc:	mov	r3, r7
   162e0:	mov	r2, r6
   162e4:	strd	r6, [sp, #48]	; 0x30
   162e8:	mov	sl, r0
   162ec:	mov	fp, r1
   162f0:	ldrd	r0, [sp, #40]	; 0x28
   162f4:	bl	1aeac <__assert_fail@plt+0x99d0>
   162f8:	ldrd	r2, [sp, #48]	; 0x30
   162fc:	mov	r7, r0
   16300:	ldrd	r0, [sp, #56]	; 0x38
   16304:	cmp	r3, r1
   16308:	cmpeq	r2, r0
   1630c:	bls	1683c <__assert_fail@plt+0x5360>
   16310:	mov	r3, r0
   16314:	orrs	r3, r3, r1
   16318:	movne	r3, #1
   1631c:	moveq	r3, #0
   16320:	str	r3, [sp, #48]	; 0x30
   16324:	ands	r3, r8, #16
   16328:	str	r3, [sp, #56]	; 0x38
   1632c:	beq	16708 <__assert_fail@plt+0x522c>
   16330:	ldr	r1, [sp, #24]
   16334:	mov	r3, #0
   16338:	mov	r2, r1
   1633c:	cmp	fp, r3
   16340:	cmpeq	sl, r1
   16344:	strd	r2, [sp, #40]	; 0x28
   16348:	bcc	16850 <__assert_fail@plt+0x5374>
   1634c:	mov	r5, #0
   16350:	mov	r6, r7
   16354:	str	r9, [sp, #64]	; 0x40
   16358:	str	r8, [sp, #68]	; 0x44
   1635c:	mov	r7, r1
   16360:	mov	r8, r5
   16364:	mov	r9, r4
   16368:	ldr	r5, [sp, #48]	; 0x30
   1636c:	b	16398 <__assert_fail@plt+0x4ebc>
   16370:	cmn	r5, r4
   16374:	movne	r5, #1
   16378:	moveq	r5, #0
   1637c:	ldrd	r2, [sp, #40]	; 0x28
   16380:	add	r8, r8, #1
   16384:	cmp	r3, fp
   16388:	cmpeq	r2, sl
   1638c:	bhi	168ac <__assert_fail@plt+0x53d0>
   16390:	cmp	r8, #8
   16394:	beq	16888 <__assert_fail@plt+0x53ac>
   16398:	mov	r0, sl
   1639c:	mov	r1, fp
   163a0:	ldrd	r2, [sp, #40]	; 0x28
   163a4:	bl	1aeac <__assert_fail@plt+0x99d0>
   163a8:	mov	r1, r7
   163ac:	asr	r4, r5, #1
   163b0:	add	r2, r2, r2, lsl #2
   163b4:	add	r6, r6, r2, lsl #1
   163b8:	mov	r0, r6
   163bc:	bl	1a7c0 <__assert_fail@plt+0x92e4>
   163c0:	ldrd	r2, [sp, #40]	; 0x28
   163c4:	mov	r0, sl
   163c8:	add	r4, r4, r1, lsl #1
   163cc:	mov	r1, fp
   163d0:	bl	1aeac <__assert_fail@plt+0x99d0>
   163d4:	mov	sl, r0
   163d8:	mov	fp, r1
   163dc:	mov	r0, r6
   163e0:	mov	r1, r7
   163e4:	bl	1a5d4 <__assert_fail@plt+0x90f8>
   163e8:	cmp	r7, r4
   163ec:	add	r3, r5, r4
   163f0:	mov	r6, r0
   163f4:	bhi	16370 <__assert_fail@plt+0x4e94>
   163f8:	cmp	r7, r3
   163fc:	movcs	r5, #2
   16400:	movcc	r5, #3
   16404:	b	1637c <__assert_fail@plt+0x4ea0>
   16408:	andeq	r0, r0, r0
   1640c:	mvnsmi	r0, #0
   16410:	andeq	r0, r0, r0
   16414:	eormi	r0, r4, r0
   16418:	andeq	ip, r1, r0, lsl #24
   1641c:	andeq	ip, r1, r8, lsl #8
   16420:	andeq	ip, r1, ip, lsl #24
   16424:	andeq	ip, r1, r4, lsl #24
   16428:	and	r7, r8, #3
   1642c:	cmp	r7, #1
   16430:	beq	16444 <__assert_fail@plt+0x4f68>
   16434:	vldr	d7, [pc, #996]	; 16820 <__assert_fail@plt+0x5344>
   16438:	vcmpe.f64	d8, d7
   1643c:	vmrs	APSR_nzcv, fpscr
   16440:	bmi	16668 <__assert_fail@plt+0x518c>
   16444:	ldr	r4, [sp, #12]
   16448:	ldr	r3, [pc, #992]	; 16830 <__assert_fail@plt+0x5354>
   1644c:	mvn	r2, #0
   16450:	mov	r1, #1
   16454:	vstr	d8, [sp]
   16458:	mov	r0, r4
   1645c:	bl	113b0 <__sprintf_chk@plt>
   16460:	mov	r0, r4
   16464:	bl	11380 <strlen@plt>
   16468:	mov	r6, #0
   1646c:	mvn	r5, #0
   16470:	mov	r7, r0
   16474:	ldr	r3, [sp, #8]
   16478:	mov	r2, r7
   1647c:	sub	r4, r3, r7
   16480:	mov	r0, r4
   16484:	ldr	r1, [sp, #12]
   16488:	bl	111b8 <memmove@plt>
   1648c:	sub	r7, r7, r6
   16490:	add	r7, r4, r7
   16494:	tst	r8, #4
   16498:	bne	165d0 <__assert_fail@plt+0x50f4>
   1649c:	tst	r8, #128	; 0x80
   164a0:	beq	16538 <__assert_fail@plt+0x505c>
   164a4:	cmn	r5, #1
   164a8:	beq	166bc <__assert_fail@plt+0x51e0>
   164ac:	and	r3, r8, #256	; 0x100
   164b0:	orrs	r2, r5, r3
   164b4:	beq	16538 <__assert_fail@plt+0x505c>
   164b8:	tst	r8, #64	; 0x40
   164bc:	ldrne	r1, [sp, #12]
   164c0:	addne	r2, r1, #648	; 0x288
   164c4:	strne	r2, [sp, #8]
   164c8:	movne	r2, #32
   164cc:	strbne	r2, [r1, #647]	; 0x287
   164d0:	cmp	r5, #0
   164d4:	beq	169ec <__assert_fail@plt+0x5510>
   164d8:	ldr	r2, [sp, #20]
   164dc:	ldr	r0, [sp, #8]
   164e0:	cmp	r2, #0
   164e4:	cmpeq	r5, #1
   164e8:	ldr	r2, [sp, #8]
   164ec:	ldrne	r1, [pc, #832]	; 16834 <__assert_fail@plt+0x5358>
   164f0:	moveq	r1, #107	; 0x6b
   164f4:	add	r2, r2, #1
   164f8:	ldrbne	r1, [r1, r5]
   164fc:	cmp	r3, #0
   16500:	streq	r2, [sp, #8]
   16504:	strb	r1, [r0]
   16508:	beq	16538 <__assert_fail@plt+0x505c>
   1650c:	ldr	r3, [sp, #20]
   16510:	cmp	r5, #0
   16514:	cmpne	r3, #0
   16518:	movne	r2, r0
   1651c:	movne	r3, #105	; 0x69
   16520:	strbne	r3, [r2, #1]
   16524:	addne	r2, r2, #2
   16528:	mov	r3, #66	; 0x42
   1652c:	strb	r3, [r2]
   16530:	add	r3, r2, #1
   16534:	str	r3, [sp, #8]
   16538:	ldr	r2, [sp, #8]
   1653c:	mov	r3, #0
   16540:	mov	r0, r4
   16544:	strb	r3, [r2]
   16548:	add	sp, sp, #124	; 0x7c
   1654c:	vpop	{d8-d9}
   16550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16554:	ldr	r6, [sp, #12]
   16558:	ldr	r3, [pc, #728]	; 16838 <__assert_fail@plt+0x535c>
   1655c:	mvn	r2, #0
   16560:	ldr	r1, [sp, #16]
   16564:	mov	r0, r6
   16568:	vstr	d9, [sp]
   1656c:	bl	113b0 <__sprintf_chk@plt>
   16570:	mov	r0, r6
   16574:	bl	11380 <strlen@plt>
   16578:	ldr	r3, [sp, #20]
   1657c:	add	r6, r4, #1
   16580:	cmp	r3, #0
   16584:	movne	r3, #1
   16588:	moveq	r3, #2
   1658c:	add	r3, r3, r6
   16590:	cmp	r3, r0
   16594:	mov	r7, r0
   16598:	bcc	1687c <__assert_fail@plt+0x53a0>
   1659c:	tst	r8, #8
   165a0:	beq	16474 <__assert_fail@plt+0x4f98>
   165a4:	ldr	r3, [sp, #12]
   165a8:	add	r3, r3, r7
   165ac:	ldrb	r3, [r3, #-1]
   165b0:	cmp	r3, #48	; 0x30
   165b4:	bne	16474 <__assert_fail@plt+0x4f98>
   165b8:	vldr	d7, [pc, #616]	; 16828 <__assert_fail@plt+0x534c>
   165bc:	ldr	r3, [sp, #16]
   165c0:	cmp	r3, #1
   165c4:	vmul.f64	d9, d9, d7
   165c8:	beq	16208 <__assert_fail@plt+0x4d2c>
   165cc:	b	161c0 <__assert_fail@plt+0x4ce4>
   165d0:	ldr	r0, [sp, #28]
   165d4:	bl	11380 <strlen@plt>
   165d8:	sub	r6, r7, r4
   165dc:	mov	r1, r4
   165e0:	mov	r2, r6
   165e4:	mov	r3, #41	; 0x29
   165e8:	mvn	sl, #0
   165ec:	mov	fp, r0
   165f0:	add	r0, sp, #76	; 0x4c
   165f4:	bl	11290 <__memcpy_chk@plt>
   165f8:	ldr	r4, [sp, #28]
   165fc:	b	16604 <__assert_fail@plt+0x5128>
   16600:	bl	111e8 <memcpy@plt>
   16604:	ldrb	r3, [r9]
   16608:	cmp	r3, #0
   1660c:	beq	16620 <__assert_fail@plt+0x5144>
   16610:	cmp	r3, #255	; 0xff
   16614:	movne	sl, r3
   16618:	moveq	sl, r6
   1661c:	add	r9, r9, #1
   16620:	cmp	sl, r6
   16624:	movcs	sl, r6
   16628:	sub	r3, r7, sl
   1662c:	sub	r6, r6, sl
   16630:	add	r2, sp, #76	; 0x4c
   16634:	add	r1, r2, r6
   16638:	mov	r0, r3
   1663c:	mov	r2, sl
   16640:	sub	r7, r3, fp
   16644:	bl	111e8 <memcpy@plt>
   16648:	cmp	r6, #0
   1664c:	mov	r2, fp
   16650:	mov	r1, r4
   16654:	mov	r3, r0
   16658:	mov	r0, r7
   1665c:	bne	16600 <__assert_fail@plt+0x5124>
   16660:	mov	r4, r3
   16664:	b	1649c <__assert_fail@plt+0x4fc0>
   16668:	vmov	r0, r1, d8
   1666c:	bl	1aef8 <__assert_fail@plt+0x9a1c>
   16670:	cmp	r7, #0
   16674:	mov	r4, r0
   16678:	mov	r5, r1
   1667c:	bne	16698 <__assert_fail@plt+0x51bc>
   16680:	bl	1ad64 <__assert_fail@plt+0x9888>
   16684:	vmov	d7, r0, r1
   16688:	vcmp.f64	d7, d8
   1668c:	vmrs	APSR_nzcv, fpscr
   16690:	movne	r6, #1
   16694:	moveq	r6, #0
   16698:	adds	r0, r4, r6
   1669c:	adc	r1, r5, #0
   166a0:	bl	1ad64 <__assert_fail@plt+0x9888>
   166a4:	vmov	d8, r0, r1
   166a8:	b	16444 <__assert_fail@plt+0x4f68>
   166ac:	mov	r3, #0
   166b0:	str	r3, [sp, #48]	; 0x30
   166b4:	mov	r7, r3
   166b8:	b	16324 <__assert_fail@plt+0x4e48>
   166bc:	ldrd	r2, [sp, #184]	; 0xb8
   166c0:	cmp	r3, #0
   166c4:	cmpeq	r2, #1
   166c8:	bls	16960 <__assert_fail@plt+0x5484>
   166cc:	ldr	r1, [sp, #24]
   166d0:	ldrd	r6, [sp, #184]	; 0xb8
   166d4:	mov	r5, #1
   166d8:	mov	r2, #1
   166dc:	mov	r3, #0
   166e0:	mul	r0, r1, r3
   166e4:	umull	r2, r3, r2, r1
   166e8:	add	r3, r0, r3
   166ec:	cmp	r7, r3
   166f0:	cmpeq	r6, r2
   166f4:	bls	164ac <__assert_fail@plt+0x4fd0>
   166f8:	add	r5, r5, #1
   166fc:	cmp	r5, #8
   16700:	bne	166e0 <__assert_fail@plt+0x5204>
   16704:	b	164ac <__assert_fail@plt+0x4fd0>
   16708:	ldr	r3, [sp, #8]
   1670c:	mvn	r5, #0
   16710:	str	r3, [sp, #36]	; 0x24
   16714:	ldr	r3, [sp, #16]
   16718:	cmp	r3, #1
   1671c:	beq	167a0 <__assert_fail@plt+0x52c4>
   16720:	ldr	r3, [sp, #16]
   16724:	cmp	r3, #0
   16728:	bne	167c8 <__assert_fail@plt+0x52ec>
   1672c:	ldr	r3, [sp, #48]	; 0x30
   16730:	add	r7, r7, r3
   16734:	cmp	r7, #0
   16738:	ble	167c8 <__assert_fail@plt+0x52ec>
   1673c:	ldr	r3, [sp, #56]	; 0x38
   16740:	adds	sl, sl, #1
   16744:	adc	fp, fp, #0
   16748:	cmp	r3, #0
   1674c:	beq	167c8 <__assert_fail@plt+0x52ec>
   16750:	mov	r3, #0
   16754:	ldr	r2, [sp, #24]
   16758:	cmp	r3, fp
   1675c:	cmpeq	r2, sl
   16760:	moveq	r3, #1
   16764:	movne	r3, #0
   16768:	cmp	r5, #7
   1676c:	movgt	r3, #0
   16770:	andle	r3, r3, #1
   16774:	cmp	r3, #0
   16778:	beq	167c8 <__assert_fail@plt+0x52ec>
   1677c:	tst	r8, #8
   16780:	add	r5, r5, #1
   16784:	beq	169c0 <__assert_fail@plt+0x54e4>
   16788:	ldr	r2, [sp, #36]	; 0x24
   1678c:	mov	r3, #49	; 0x31
   16790:	sub	r4, r2, #1
   16794:	strb	r3, [r2, #-1]
   16798:	mov	r7, r2
   1679c:	b	16494 <__assert_fail@plt+0x4fb8>
   167a0:	ldr	r1, [sp, #48]	; 0x30
   167a4:	and	r2, sl, #1
   167a8:	adds	r2, r2, r1
   167ac:	mov	r3, #0
   167b0:	adc	r3, r3, r1, asr #31
   167b4:	orr	r2, r2, r3
   167b8:	cmp	r2, #0
   167bc:	addne	r7, r7, #1
   167c0:	cmp	r7, #5
   167c4:	bgt	1673c <__assert_fail@plt+0x5260>
   167c8:	ldr	r4, [sp, #36]	; 0x24
   167cc:	mov	r6, #10
   167d0:	mov	r7, #0
   167d4:	mov	r0, sl
   167d8:	mov	r1, fp
   167dc:	mov	r2, r6
   167e0:	mov	r3, r7
   167e4:	bl	1aeac <__assert_fail@plt+0x99d0>
   167e8:	mov	r0, sl
   167ec:	mov	r1, fp
   167f0:	mov	r3, r7
   167f4:	add	r2, r2, #48	; 0x30
   167f8:	strb	r2, [r4, #-1]!
   167fc:	mov	r2, r6
   16800:	bl	1aeac <__assert_fail@plt+0x99d0>
   16804:	mov	sl, r0
   16808:	mov	fp, r1
   1680c:	orrs	r3, sl, fp
   16810:	bne	167d4 <__assert_fail@plt+0x52f8>
   16814:	ldr	r7, [sp, #36]	; 0x24
   16818:	b	16494 <__assert_fail@plt+0x4fb8>
   1681c:	nop			; (mov r0, r0)
   16820:	andeq	r0, r0, r0
   16824:	mvnsmi	r0, #0
   16828:	andeq	r0, r0, r0
   1682c:	eormi	r0, r4, r0
   16830:	andeq	ip, r1, r4, lsl #24
   16834:	andeq	ip, r1, r0, ror #23
   16838:	andeq	ip, r1, ip, lsl #24
   1683c:	movcc	r3, #3
   16840:	strcc	r3, [sp, #48]	; 0x30
   16844:	movcs	r3, #2
   16848:	strcs	r3, [sp, #48]	; 0x30
   1684c:	b	16324 <__assert_fail@plt+0x4e48>
   16850:	ldr	r3, [sp, #8]
   16854:	mov	r5, #0
   16858:	str	r3, [sp, #36]	; 0x24
   1685c:	b	16714 <__assert_fail@plt+0x5238>
   16860:	bl	1ad64 <__assert_fail@plt+0x9888>
   16864:	vmov	d7, r0, r1
   16868:	vcmp.f64	d7, d9
   1686c:	vmrs	APSR_nzcv, fpscr
   16870:	movne	r0, #1
   16874:	moveq	r0, #0
   16878:	b	161f0 <__assert_fail@plt+0x4d14>
   1687c:	vldr	d7, [pc, #380]	; 16a00 <__assert_fail@plt+0x5524>
   16880:	vmul.f64	d9, d9, d7
   16884:	b	16208 <__assert_fail@plt+0x4d2c>
   16888:	ldr	r3, [sp, #8]
   1688c:	str	r5, [sp, #48]	; 0x30
   16890:	mov	r4, r9
   16894:	mov	r5, r8
   16898:	mov	r7, r6
   1689c:	ldr	r9, [sp, #64]	; 0x40
   168a0:	ldr	r8, [sp, #68]	; 0x44
   168a4:	str	r3, [sp, #36]	; 0x24
   168a8:	b	16714 <__assert_fail@plt+0x5238>
   168ac:	cmp	fp, #0
   168b0:	cmpeq	sl, #9
   168b4:	str	r5, [sp, #48]	; 0x30
   168b8:	mov	r4, r9
   168bc:	mov	r5, r8
   168c0:	mov	r7, r6
   168c4:	ldr	r9, [sp, #64]	; 0x40
   168c8:	ldr	r8, [sp, #68]	; 0x44
   168cc:	bhi	169b4 <__assert_fail@plt+0x54d8>
   168d0:	ldr	r3, [sp, #16]
   168d4:	cmp	r3, #1
   168d8:	beq	16968 <__assert_fail@plt+0x548c>
   168dc:	ldr	r2, [sp, #48]	; 0x30
   168e0:	ldr	r3, [sp, #16]
   168e4:	cmp	r2, #0
   168e8:	clz	r3, r3
   168ec:	lsr	r3, r3, #5
   168f0:	moveq	r3, #0
   168f4:	cmp	r3, #0
   168f8:	beq	16948 <__assert_fail@plt+0x546c>
   168fc:	add	r7, r7, #1
   16900:	cmp	r7, #10
   16904:	beq	16994 <__assert_fail@plt+0x54b8>
   16908:	add	r7, r7, #48	; 0x30
   1690c:	uxtb	r3, r7
   16910:	ldr	r2, [sp, #36]	; 0x24
   16914:	ldr	r1, [sp, #12]
   16918:	add	r7, r2, #2
   1691c:	sub	r2, r7, r4
   16920:	str	r2, [sp, #36]	; 0x24
   16924:	strb	r3, [r1, #646]	; 0x286
   16928:	mov	r0, r2
   1692c:	mov	r3, #0
   16930:	mov	r2, r4
   16934:	ldr	r1, [sp, #32]
   16938:	mov	r7, r3
   1693c:	str	r3, [sp, #48]	; 0x30
   16940:	bl	111e8 <memcpy@plt>
   16944:	b	16714 <__assert_fail@plt+0x5238>
   16948:	cmp	r7, #0
   1694c:	bne	16908 <__assert_fail@plt+0x542c>
   16950:	tst	r8, #8
   16954:	bne	16984 <__assert_fail@plt+0x54a8>
   16958:	mov	r3, #48	; 0x30
   1695c:	b	16910 <__assert_fail@plt+0x5434>
   16960:	mov	r5, #0
   16964:	b	164ac <__assert_fail@plt+0x4fd0>
   16968:	ldr	r2, [sp, #48]	; 0x30
   1696c:	and	r3, r6, #1
   16970:	add	r3, r3, r2
   16974:	cmp	r3, #2
   16978:	movle	r3, #0
   1697c:	movgt	r3, #1
   16980:	b	168f4 <__assert_fail@plt+0x5418>
   16984:	ldr	r3, [sp, #8]
   16988:	mov	r7, #0
   1698c:	str	r3, [sp, #36]	; 0x24
   16990:	b	16714 <__assert_fail@plt+0x5238>
   16994:	adds	sl, sl, #1
   16998:	adc	fp, fp, #0
   1699c:	cmp	fp, #0
   169a0:	mov	r3, #0
   169a4:	cmpeq	sl, #10
   169a8:	str	r3, [sp, #48]	; 0x30
   169ac:	moveq	r7, r3
   169b0:	bne	16950 <__assert_fail@plt+0x5474>
   169b4:	ldr	r3, [sp, #8]
   169b8:	str	r3, [sp, #36]	; 0x24
   169bc:	b	16714 <__assert_fail@plt+0x5238>
   169c0:	ldr	r1, [sp, #36]	; 0x24
   169c4:	mvn	r3, r4
   169c8:	add	r3, r1, r3
   169cc:	mov	r2, #48	; 0x30
   169d0:	strb	r2, [r1, #-1]
   169d4:	mov	r0, r3
   169d8:	ldr	r1, [sp, #32]
   169dc:	mov	r2, r4
   169e0:	str	r3, [sp, #36]	; 0x24
   169e4:	bl	111e8 <memcpy@plt>
   169e8:	b	16788 <__assert_fail@plt+0x52ac>
   169ec:	cmp	r3, #0
   169f0:	ldrne	r2, [sp, #8]
   169f4:	bne	16528 <__assert_fail@plt+0x504c>
   169f8:	b	16538 <__assert_fail@plt+0x505c>
   169fc:	nop			; (mov r0, r0)
   16a00:	andeq	r0, r0, r0
   16a04:	eormi	r0, r4, r0
   16a08:	push	{r4, r5, r6, r7, r8, lr}
   16a0c:	subs	r4, r0, #0
   16a10:	sub	sp, sp, #16
   16a14:	mov	r8, r1
   16a18:	mov	r7, r2
   16a1c:	beq	16b14 <__assert_fail@plt+0x5638>
   16a20:	ldrb	r3, [r4]
   16a24:	ldr	r5, [pc, #360]	; 16b94 <__assert_fail@plt+0x56b8>
   16a28:	cmp	r3, #39	; 0x27
   16a2c:	addeq	r4, r4, #1
   16a30:	mov	r3, #4
   16a34:	add	r2, r5, #12
   16a38:	add	r1, r5, #20
   16a3c:	mov	r0, r4
   16a40:	moveq	r6, #4
   16a44:	movne	r6, #0
   16a48:	bl	1a018 <__assert_fail@plt+0x8b3c>
   16a4c:	cmp	r0, #0
   16a50:	blt	16ab0 <__assert_fail@plt+0x55d4>
   16a54:	add	r5, r5, r0, lsl #2
   16a58:	mov	r1, #0
   16a5c:	ldr	ip, [r5, #12]
   16a60:	mov	r0, #1
   16a64:	mov	r2, r0
   16a68:	orr	r6, r6, ip
   16a6c:	mov	r3, r1
   16a70:	str	r0, [r7]
   16a74:	str	r1, [r7, #4]
   16a78:	mov	r0, #0
   16a7c:	str	r6, [r8]
   16a80:	orrs	r3, r2, r3
   16a84:	bne	16aa8 <__assert_fail@plt+0x55cc>
   16a88:	ldr	r0, [pc, #264]	; 16b98 <__assert_fail@plt+0x56bc>
   16a8c:	bl	112f0 <getenv@plt>
   16a90:	mov	r3, #0
   16a94:	cmp	r0, #0
   16a98:	movne	r2, #512	; 0x200
   16a9c:	moveq	r2, #1024	; 0x400
   16aa0:	mov	r0, #4
   16aa4:	strd	r2, [r7]
   16aa8:	add	sp, sp, #16
   16aac:	pop	{r4, r5, r6, r7, r8, pc}
   16ab0:	ldr	r2, [pc, #228]	; 16b9c <__assert_fail@plt+0x56c0>
   16ab4:	mov	r3, r7
   16ab8:	str	r2, [sp]
   16abc:	add	r1, sp, #12
   16ac0:	mov	r2, #0
   16ac4:	mov	r0, r4
   16ac8:	bl	19830 <__assert_fail@plt+0x8354>
   16acc:	cmp	r0, #0
   16ad0:	bne	16b58 <__assert_fail@plt+0x567c>
   16ad4:	ldrb	r3, [r4]
   16ad8:	sub	r3, r3, #48	; 0x30
   16adc:	cmp	r3, #9
   16ae0:	bls	16b0c <__assert_fail@plt+0x5630>
   16ae4:	ldr	r2, [sp, #12]
   16ae8:	cmp	r4, r2
   16aec:	bne	16afc <__assert_fail@plt+0x5620>
   16af0:	b	16b68 <__assert_fail@plt+0x568c>
   16af4:	cmp	r2, r4
   16af8:	beq	16b68 <__assert_fail@plt+0x568c>
   16afc:	ldrb	r3, [r4, #1]!
   16b00:	sub	r3, r3, #48	; 0x30
   16b04:	cmp	r3, #9
   16b08:	bhi	16af4 <__assert_fail@plt+0x5618>
   16b0c:	ldrd	r2, [r7]
   16b10:	b	16a78 <__assert_fail@plt+0x559c>
   16b14:	ldr	r0, [pc, #132]	; 16ba0 <__assert_fail@plt+0x56c4>
   16b18:	bl	112f0 <getenv@plt>
   16b1c:	subs	r4, r0, #0
   16b20:	bne	16a20 <__assert_fail@plt+0x5544>
   16b24:	ldr	r0, [pc, #120]	; 16ba4 <__assert_fail@plt+0x56c8>
   16b28:	bl	112f0 <getenv@plt>
   16b2c:	subs	r4, r0, #0
   16b30:	bne	16a20 <__assert_fail@plt+0x5544>
   16b34:	ldr	r0, [pc, #92]	; 16b98 <__assert_fail@plt+0x56bc>
   16b38:	bl	112f0 <getenv@plt>
   16b3c:	mov	r3, #0
   16b40:	mov	r6, #0
   16b44:	cmp	r0, #0
   16b48:	movne	r2, #512	; 0x200
   16b4c:	moveq	r2, #1024	; 0x400
   16b50:	strd	r2, [r7]
   16b54:	b	16a78 <__assert_fail@plt+0x559c>
   16b58:	mov	r3, #0
   16b5c:	str	r3, [r8]
   16b60:	ldrd	r2, [r7]
   16b64:	b	16a80 <__assert_fail@plt+0x55a4>
   16b68:	ldrb	r3, [r2, #-1]
   16b6c:	cmp	r3, #66	; 0x42
   16b70:	orrne	r6, r6, #128	; 0x80
   16b74:	beq	16b80 <__assert_fail@plt+0x56a4>
   16b78:	orr	r6, r6, #32
   16b7c:	b	16b0c <__assert_fail@plt+0x5630>
   16b80:	ldrb	r3, [r2, #-2]
   16b84:	orr	r6, r6, #384	; 0x180
   16b88:	cmp	r3, #105	; 0x69
   16b8c:	bne	16b0c <__assert_fail@plt+0x5630>
   16b90:	b	16b78 <__assert_fail@plt+0x569c>
   16b94:	andeq	ip, r1, r0, ror #23
   16b98:	andeq	ip, r1, r8, ror #15
   16b9c:	andeq	ip, r1, ip, lsr #24
   16ba0:	andeq	ip, r1, r4, lsl ip
   16ba4:	andeq	ip, r1, r0, lsr #24
   16ba8:	push	{r4, r5, r6, r7, r8, lr}
   16bac:	cmp	r0, #2
   16bb0:	ldr	r4, [pc, #148]	; 16c4c <__assert_fail@plt+0x5770>
   16bb4:	mov	r5, #0
   16bb8:	sub	sp, sp, #16
   16bbc:	ldr	r6, [r4]
   16bc0:	str	r5, [r4]
   16bc4:	beq	16be0 <__assert_fail@plt+0x5704>
   16bc8:	ldr	r3, [pc, #128]	; 16c50 <__assert_fail@plt+0x5774>
   16bcc:	mov	r2, #0
   16bd0:	str	r6, [r4]
   16bd4:	str	r2, [r3]
   16bd8:	add	sp, sp, #16
   16bdc:	pop	{r4, r5, r6, r7, r8, pc}
   16be0:	mov	r8, r3
   16be4:	mov	r7, r2
   16be8:	str	r5, [sp]
   16bec:	ldr	r3, [pc, #96]	; 16c54 <__assert_fail@plt+0x5778>
   16bf0:	ldr	r2, [pc, #96]	; 16c58 <__assert_fail@plt+0x577c>
   16bf4:	bl	1135c <getopt_long@plt>
   16bf8:	cmn	r0, #1
   16bfc:	beq	16bc8 <__assert_fail@plt+0x56ec>
   16c00:	cmp	r0, #104	; 0x68
   16c04:	beq	16c3c <__assert_fail@plt+0x5760>
   16c08:	cmp	r0, #118	; 0x76
   16c0c:	bne	16bc8 <__assert_fail@plt+0x56ec>
   16c10:	ldr	r3, [pc, #68]	; 16c5c <__assert_fail@plt+0x5780>
   16c14:	add	ip, sp, #48	; 0x30
   16c18:	mov	r2, r8
   16c1c:	ldr	r0, [r3]
   16c20:	mov	r1, r7
   16c24:	str	ip, [sp]
   16c28:	ldr	r3, [sp, #40]	; 0x28
   16c2c:	str	ip, [sp, #12]
   16c30:	bl	190c8 <__assert_fail@plt+0x7bec>
   16c34:	mov	r0, r5
   16c38:	bl	11374 <exit@plt>
   16c3c:	mov	r0, r5
   16c40:	ldr	r3, [sp, #44]	; 0x2c
   16c44:	blx	r3
   16c48:	b	16bc8 <__assert_fail@plt+0x56ec>
   16c4c:	andeq	lr, r2, r0, ror #3
   16c50:	ldrdeq	lr, [r2], -r0
   16c54:	andeq	ip, r1, r4, asr ip
   16c58:	andeq	ip, r1, r4, lsl #25
   16c5c:	ldrdeq	lr, [r2], -ip
   16c60:	push	{r4, r5, r6, r7, r8, lr}
   16c64:	sub	sp, sp, #16
   16c68:	ldr	r5, [pc, #176]	; 16d20 <__assert_fail@plt+0x5844>
   16c6c:	ldrb	r8, [sp, #44]	; 0x2c
   16c70:	ldr	r4, [pc, #172]	; 16d24 <__assert_fail@plt+0x5848>
   16c74:	ldr	lr, [pc, #172]	; 16d28 <__assert_fail@plt+0x584c>
   16c78:	cmp	r8, #0
   16c7c:	mov	r6, r2
   16c80:	movne	r2, r5
   16c84:	mov	r5, #0
   16c88:	mov	ip, #1
   16c8c:	moveq	r2, lr
   16c90:	mov	r7, r3
   16c94:	str	r5, [sp]
   16c98:	ldr	r3, [pc, #140]	; 16d2c <__assert_fail@plt+0x5850>
   16c9c:	ldr	r8, [r4]
   16ca0:	str	ip, [r4]
   16ca4:	bl	1135c <getopt_long@plt>
   16ca8:	cmn	r0, #1
   16cac:	beq	16cfc <__assert_fail@plt+0x5820>
   16cb0:	cmp	r0, #104	; 0x68
   16cb4:	beq	16d08 <__assert_fail@plt+0x582c>
   16cb8:	cmp	r0, #118	; 0x76
   16cbc:	bne	16cec <__assert_fail@plt+0x5810>
   16cc0:	ldr	r3, [pc, #104]	; 16d30 <__assert_fail@plt+0x5854>
   16cc4:	add	ip, sp, #52	; 0x34
   16cc8:	mov	r2, r7
   16ccc:	ldr	r0, [r3]
   16cd0:	mov	r1, r6
   16cd4:	str	ip, [sp]
   16cd8:	ldr	r3, [sp, #40]	; 0x28
   16cdc:	str	ip, [sp, #12]
   16ce0:	bl	190c8 <__assert_fail@plt+0x7bec>
   16ce4:	mov	r0, r5
   16ce8:	bl	11374 <exit@plt>
   16cec:	ldr	r3, [pc, #64]	; 16d34 <__assert_fail@plt+0x5858>
   16cf0:	ldr	r0, [r3]
   16cf4:	ldr	r3, [sp, #48]	; 0x30
   16cf8:	blx	r3
   16cfc:	str	r8, [r4]
   16d00:	add	sp, sp, #16
   16d04:	pop	{r4, r5, r6, r7, r8, pc}
   16d08:	mov	r0, r5
   16d0c:	ldr	r3, [sp, #48]	; 0x30
   16d10:	blx	r3
   16d14:	str	r8, [r4]
   16d18:	add	sp, sp, #16
   16d1c:	pop	{r4, r5, r6, r7, r8, pc}
   16d20:	andeq	ip, r1, r8, lsl #8
   16d24:	andeq	lr, r2, r0, ror #3
   16d28:	andeq	ip, r1, r4, lsl #25
   16d2c:	andeq	ip, r1, r4, asr ip
   16d30:	ldrdeq	lr, [r2], -ip
   16d34:	andeq	lr, r2, ip, ror r1
   16d38:	push	{r4, r5, r6, lr}
   16d3c:	subs	r4, r0, #0
   16d40:	beq	16db4 <__assert_fail@plt+0x58d8>
   16d44:	mov	r1, #47	; 0x2f
   16d48:	bl	11458 <strrchr@plt>
   16d4c:	subs	r5, r0, #0
   16d50:	beq	16da0 <__assert_fail@plt+0x58c4>
   16d54:	add	r6, r5, #1
   16d58:	sub	r3, r6, r4
   16d5c:	cmp	r3, #6
   16d60:	ble	16da0 <__assert_fail@plt+0x58c4>
   16d64:	mov	r2, #7
   16d68:	ldr	r1, [pc, #96]	; 16dd0 <__assert_fail@plt+0x58f4>
   16d6c:	sub	r0, r5, #6
   16d70:	bl	11494 <strncmp@plt>
   16d74:	cmp	r0, #0
   16d78:	bne	16da0 <__assert_fail@plt+0x58c4>
   16d7c:	mov	r2, #3
   16d80:	ldr	r1, [pc, #76]	; 16dd4 <__assert_fail@plt+0x58f8>
   16d84:	mov	r0, r6
   16d88:	bl	11494 <strncmp@plt>
   16d8c:	cmp	r0, #0
   16d90:	movne	r4, r6
   16d94:	ldreq	r3, [pc, #60]	; 16dd8 <__assert_fail@plt+0x58fc>
   16d98:	addeq	r4, r5, #4
   16d9c:	streq	r4, [r3]
   16da0:	ldr	r2, [pc, #52]	; 16ddc <__assert_fail@plt+0x5900>
   16da4:	ldr	r3, [pc, #52]	; 16de0 <__assert_fail@plt+0x5904>
   16da8:	str	r4, [r2]
   16dac:	str	r4, [r3]
   16db0:	pop	{r4, r5, r6, pc}
   16db4:	ldr	r3, [pc, #40]	; 16de4 <__assert_fail@plt+0x5908>
   16db8:	mov	r2, #55	; 0x37
   16dbc:	mov	r1, #1
   16dc0:	ldr	r3, [r3]
   16dc4:	ldr	r0, [pc, #28]	; 16de8 <__assert_fail@plt+0x590c>
   16dc8:	bl	1129c <fwrite@plt>
   16dcc:	bl	114ac <abort@plt>
   16dd0:	ldrdeq	ip, [r1], -r0
   16dd4:	ldrdeq	ip, [r1], -r8
   16dd8:	andeq	lr, r2, r8, asr #3
   16ddc:	andeq	lr, r2, r4, asr r4
   16de0:	andeq	lr, r2, ip, asr #3
   16de4:	ldrdeq	lr, [r2], -r8
   16de8:	muleq	r1, r8, ip
   16dec:	push	{r4, r5, r6, lr}
   16df0:	mov	r2, #48	; 0x30
   16df4:	mov	r4, r1
   16df8:	mov	r1, #0
   16dfc:	mov	r5, r0
   16e00:	bl	113d4 <memset@plt>
   16e04:	cmp	r4, #10
   16e08:	beq	16e18 <__assert_fail@plt+0x593c>
   16e0c:	str	r4, [r5]
   16e10:	mov	r0, r5
   16e14:	pop	{r4, r5, r6, pc}
   16e18:	bl	114ac <abort@plt>
   16e1c:	push	{r4, r5, r6, lr}
   16e20:	mov	r4, r0
   16e24:	mov	r5, r1
   16e28:	bl	1a40c <__assert_fail@plt+0x8f30>
   16e2c:	ldrb	r3, [r0]
   16e30:	bic	r3, r3, #32
   16e34:	cmp	r3, #85	; 0x55
   16e38:	bne	16e98 <__assert_fail@plt+0x59bc>
   16e3c:	ldrb	r3, [r0, #1]
   16e40:	bic	r3, r3, #32
   16e44:	cmp	r3, #84	; 0x54
   16e48:	bne	16ed4 <__assert_fail@plt+0x59f8>
   16e4c:	ldrb	r3, [r0, #2]
   16e50:	bic	r3, r3, #32
   16e54:	cmp	r3, #70	; 0x46
   16e58:	bne	16ed4 <__assert_fail@plt+0x59f8>
   16e5c:	ldrb	r3, [r0, #3]
   16e60:	cmp	r3, #45	; 0x2d
   16e64:	bne	16ed4 <__assert_fail@plt+0x59f8>
   16e68:	ldrb	r3, [r0, #4]
   16e6c:	cmp	r3, #56	; 0x38
   16e70:	bne	16ed4 <__assert_fail@plt+0x59f8>
   16e74:	ldrb	r3, [r0, #5]
   16e78:	cmp	r3, #0
   16e7c:	bne	16ed4 <__assert_fail@plt+0x59f8>
   16e80:	ldrb	r2, [r4]
   16e84:	ldr	r3, [pc, #152]	; 16f24 <__assert_fail@plt+0x5a48>
   16e88:	ldr	r0, [pc, #152]	; 16f28 <__assert_fail@plt+0x5a4c>
   16e8c:	cmp	r2, #96	; 0x60
   16e90:	movne	r0, r3
   16e94:	pop	{r4, r5, r6, pc}
   16e98:	cmp	r3, #71	; 0x47
   16e9c:	bne	16ed4 <__assert_fail@plt+0x59f8>
   16ea0:	ldrb	r3, [r0, #1]
   16ea4:	bic	r3, r3, #32
   16ea8:	cmp	r3, #66	; 0x42
   16eac:	bne	16ed4 <__assert_fail@plt+0x59f8>
   16eb0:	ldrb	r3, [r0, #2]
   16eb4:	cmp	r3, #49	; 0x31
   16eb8:	bne	16ed4 <__assert_fail@plt+0x59f8>
   16ebc:	ldrb	r3, [r0, #3]
   16ec0:	cmp	r3, #56	; 0x38
   16ec4:	bne	16ed4 <__assert_fail@plt+0x59f8>
   16ec8:	ldrb	r3, [r0, #4]
   16ecc:	cmp	r3, #48	; 0x30
   16ed0:	beq	16ee8 <__assert_fail@plt+0x5a0c>
   16ed4:	ldr	r3, [pc, #80]	; 16f2c <__assert_fail@plt+0x5a50>
   16ed8:	cmp	r5, #9
   16edc:	ldr	r0, [pc, #76]	; 16f30 <__assert_fail@plt+0x5a54>
   16ee0:	movne	r0, r3
   16ee4:	pop	{r4, r5, r6, pc}
   16ee8:	ldrb	r3, [r0, #5]
   16eec:	cmp	r3, #51	; 0x33
   16ef0:	bne	16ed4 <__assert_fail@plt+0x59f8>
   16ef4:	ldrb	r3, [r0, #6]
   16ef8:	cmp	r3, #48	; 0x30
   16efc:	bne	16ed4 <__assert_fail@plt+0x59f8>
   16f00:	ldrb	r3, [r0, #7]
   16f04:	cmp	r3, #0
   16f08:	bne	16ed4 <__assert_fail@plt+0x59f8>
   16f0c:	ldrb	r2, [r4]
   16f10:	ldr	r3, [pc, #28]	; 16f34 <__assert_fail@plt+0x5a58>
   16f14:	ldr	r0, [pc, #28]	; 16f38 <__assert_fail@plt+0x5a5c>
   16f18:	cmp	r2, #96	; 0x60
   16f1c:	movne	r0, r3
   16f20:	pop	{r4, r5, r6, pc}
   16f24:	andeq	ip, r1, r4, lsr sp
   16f28:	andeq	ip, r1, r0, lsr sp
   16f2c:	andeq	ip, r1, r4, asr #26
   16f30:	andeq	ip, r1, r0, asr #26
   16f34:	andeq	ip, r1, ip, lsr sp
   16f38:	andeq	ip, r1, r8, lsr sp
   16f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f40:	sub	sp, sp, #116	; 0x74
   16f44:	mov	sl, r0
   16f48:	str	r3, [sp, #24]
   16f4c:	mov	r3, #1
   16f50:	mov	r8, r1
   16f54:	str	r2, [sp, #56]	; 0x38
   16f58:	str	r3, [sp, #36]	; 0x24
   16f5c:	bl	112b4 <__ctype_get_mb_cur_max@plt>
   16f60:	ldr	r3, [sp, #156]	; 0x9c
   16f64:	mov	fp, r8
   16f68:	mov	r2, #0
   16f6c:	lsr	r3, r3, #1
   16f70:	and	r3, r3, #1
   16f74:	str	r2, [sp, #68]	; 0x44
   16f78:	str	r3, [sp, #28]
   16f7c:	str	r2, [sp, #40]	; 0x28
   16f80:	str	r2, [sp, #44]	; 0x2c
   16f84:	str	r2, [sp, #52]	; 0x34
   16f88:	str	r2, [sp, #64]	; 0x40
   16f8c:	str	r2, [sp, #72]	; 0x48
   16f90:	str	sl, [sp, #32]
   16f94:	str	r0, [sp, #76]	; 0x4c
   16f98:	ldr	r3, [sp, #152]	; 0x98
   16f9c:	cmp	r3, #10
   16fa0:	ldrls	pc, [pc, r3, lsl #2]
   16fa4:	b	18164 <__assert_fail@plt+0x6c88>
   16fa8:	ldrdeq	r6, [r1], -r4
   16fac:			; <UNDEFINED> instruction: 0x000172bc
   16fb0:	andeq	r7, r1, r0, ror #5
   16fb4:	andeq	r7, r1, r4, lsl #6
   16fb8:	andeq	r7, r1, r0, lsr r4
   16fbc:	andeq	r7, r1, r4, lsl #8
   16fc0:	ldrdeq	r7, [r1], -ip
   16fc4:	andeq	r7, r1, r8, lsl r3
   16fc8:	andeq	r7, r1, r0, lsr r3
   16fcc:	andeq	r7, r1, r0, lsr r3
   16fd0:	andeq	r7, r1, r0, lsr r3
   16fd4:	mov	r3, #0
   16fd8:	mov	r7, r3
   16fdc:	str	r3, [sp, #28]
   16fe0:	ldr	r3, [sp, #44]	; 0x2c
   16fe4:	mov	sl, #0
   16fe8:	eor	r3, r3, #1
   16fec:	str	r3, [sp, #60]	; 0x3c
   16ff0:	ldr	r3, [sp, #24]
   16ff4:	cmn	r3, #1
   16ff8:	beq	1755c <__assert_fail@plt+0x6080>
   16ffc:	ldr	r3, [sp, #24]
   17000:	subs	r5, r3, sl
   17004:	movne	r5, #1
   17008:	cmp	r5, #0
   1700c:	beq	17574 <__assert_fail@plt+0x6098>
   17010:	ldr	r3, [sp, #152]	; 0x98
   17014:	ldr	r8, [sp, #44]	; 0x2c
   17018:	cmp	r3, #2
   1701c:	moveq	r8, #0
   17020:	andne	r8, r8, #1
   17024:	ldr	r3, [sp, #52]	; 0x34
   17028:	adds	r9, r3, #0
   1702c:	movne	r9, #1
   17030:	ands	r6, r9, r8
   17034:	beq	179dc <__assert_fail@plt+0x6500>
   17038:	ldr	r2, [sp, #52]	; 0x34
   1703c:	ldr	r1, [sp, #24]
   17040:	cmp	r2, #1
   17044:	mov	r3, r2
   17048:	movls	r3, #0
   1704c:	movhi	r3, #1
   17050:	cmn	r1, #1
   17054:	movne	r3, #0
   17058:	cmp	r3, #0
   1705c:	add	r4, sl, r2
   17060:	beq	17070 <__assert_fail@plt+0x5b94>
   17064:	ldr	r0, [sp, #56]	; 0x38
   17068:	bl	11380 <strlen@plt>
   1706c:	str	r0, [sp, #24]
   17070:	ldr	r3, [sp, #24]
   17074:	cmp	r3, r4
   17078:	ldr	r3, [sp, #56]	; 0x38
   1707c:	add	r3, r3, sl
   17080:	str	r3, [sp, #48]	; 0x30
   17084:	bcc	179e8 <__assert_fail@plt+0x650c>
   17088:	mov	r0, r3
   1708c:	ldr	r2, [sp, #52]	; 0x34
   17090:	ldr	r1, [sp, #64]	; 0x40
   17094:	bl	11218 <memcmp@plt>
   17098:	cmp	r0, #0
   1709c:	bne	179e8 <__assert_fail@plt+0x650c>
   170a0:	ldr	r3, [sp, #28]
   170a4:	cmp	r3, #0
   170a8:	bne	18264 <__assert_fail@plt+0x6d88>
   170ac:	ldr	r3, [sp, #48]	; 0x30
   170b0:	ldrb	r4, [r3]
   170b4:	cmp	r4, #126	; 0x7e
   170b8:	ldrls	pc, [pc, r4, lsl #2]
   170bc:	b	1797c <__assert_fail@plt+0x64a0>
   170c0:	andeq	r7, r1, r0, lsr #15
   170c4:	andeq	r7, r1, ip, ror r9
   170c8:	andeq	r7, r1, ip, ror r9
   170cc:	andeq	r7, r1, ip, ror r9
   170d0:	andeq	r7, r1, ip, ror r9
   170d4:	andeq	r7, r1, ip, ror r9
   170d8:	andeq	r7, r1, ip, ror r9
   170dc:	andeq	r7, r1, r4, lsl #15
   170e0:	andeq	r7, r1, r8, ror #14
   170e4:	andeq	r7, r1, r4, ror #18
   170e8:	andeq	r7, r1, r8, asr #13
   170ec:	andeq	r7, r1, ip, lsr #13
   170f0:	andeq	r7, r1, r0, asr #18
   170f4:	andeq	r7, r1, ip, lsl r9
   170f8:	andeq	r7, r1, ip, ror r9
   170fc:	andeq	r7, r1, ip, ror r9
   17100:	andeq	r7, r1, ip, ror r9
   17104:	andeq	r7, r1, ip, ror r9
   17108:	andeq	r7, r1, ip, ror r9
   1710c:	andeq	r7, r1, ip, ror r9
   17110:	andeq	r7, r1, ip, ror r9
   17114:	andeq	r7, r1, ip, ror r9
   17118:	andeq	r7, r1, ip, ror r9
   1711c:	andeq	r7, r1, ip, ror r9
   17120:	andeq	r7, r1, ip, ror r9
   17124:	andeq	r7, r1, ip, ror r9
   17128:	andeq	r7, r1, ip, ror r9
   1712c:	andeq	r7, r1, ip, ror r9
   17130:	andeq	r7, r1, ip, ror r9
   17134:	andeq	r7, r1, ip, ror r9
   17138:	andeq	r7, r1, ip, ror r9
   1713c:	andeq	r7, r1, ip, ror r9
   17140:	andeq	r7, r1, ip, asr r9
   17144:	muleq	r1, r0, r8
   17148:	muleq	r1, r0, r8
   1714c:	andeq	r7, r1, r0, lsr #9
   17150:	muleq	r1, r0, r8
   17154:	andeq	r7, r1, r8, lsr #18
   17158:	muleq	r1, r0, r8
   1715c:	strdeq	r7, [r1], -ip
   17160:	muleq	r1, r0, r8
   17164:	muleq	r1, r0, r8
   17168:	muleq	r1, r0, r8
   1716c:	andeq	r7, r1, r8, lsr #18
   17170:	andeq	r7, r1, r8, lsr #18
   17174:	andeq	r7, r1, r8, lsr #18
   17178:	andeq	r7, r1, r8, lsr #18
   1717c:	andeq	r7, r1, r8, lsr #18
   17180:	andeq	r7, r1, r8, lsr #18
   17184:	andeq	r7, r1, r8, lsr #18
   17188:	andeq	r7, r1, r8, lsr #18
   1718c:	andeq	r7, r1, r8, lsr #18
   17190:	andeq	r7, r1, r8, lsr #18
   17194:	andeq	r7, r1, r8, lsr #18
   17198:	andeq	r7, r1, r8, lsr #18
   1719c:	andeq	r7, r1, r8, lsr #18
   171a0:	andeq	r7, r1, r8, lsr #18
   171a4:	andeq	r7, r1, r8, lsr #18
   171a8:	andeq	r7, r1, r8, lsr #18
   171ac:	muleq	r1, r0, r8
   171b0:	muleq	r1, r0, r8
   171b4:	muleq	r1, r0, r8
   171b8:	muleq	r1, r0, r8
   171bc:	andeq	r7, r1, ip, asr #17
   171c0:	andeq	r7, r1, ip, ror r9
   171c4:	andeq	r7, r1, r8, lsr #18
   171c8:	andeq	r7, r1, r8, lsr #18
   171cc:	andeq	r7, r1, r8, lsr #18
   171d0:	andeq	r7, r1, r8, lsr #18
   171d4:	andeq	r7, r1, r8, lsr #18
   171d8:	andeq	r7, r1, r8, lsr #18
   171dc:	andeq	r7, r1, r8, lsr #18
   171e0:	andeq	r7, r1, r8, lsr #18
   171e4:	andeq	r7, r1, r8, lsr #18
   171e8:	andeq	r7, r1, r8, lsr #18
   171ec:	andeq	r7, r1, r8, lsr #18
   171f0:	andeq	r7, r1, r8, lsr #18
   171f4:	andeq	r7, r1, r8, lsr #18
   171f8:	andeq	r7, r1, r8, lsr #18
   171fc:	andeq	r7, r1, r8, lsr #18
   17200:	andeq	r7, r1, r8, lsr #18
   17204:	andeq	r7, r1, r8, lsr #18
   17208:	andeq	r7, r1, r8, lsr #18
   1720c:	andeq	r7, r1, r8, lsr #18
   17210:	andeq	r7, r1, r8, lsr #18
   17214:	andeq	r7, r1, r8, lsr #18
   17218:	andeq	r7, r1, r8, lsr #18
   1721c:	andeq	r7, r1, r8, lsr #18
   17220:	andeq	r7, r1, r8, lsr #18
   17224:	andeq	r7, r1, r8, lsr #18
   17228:	andeq	r7, r1, r8, lsr #18
   1722c:	muleq	r1, r0, r8
   17230:	andeq	r7, r1, ip, ror #11
   17234:	andeq	r7, r1, r8, lsr #18
   17238:	muleq	r1, r0, r8
   1723c:	andeq	r7, r1, r8, lsr #18
   17240:	muleq	r1, r0, r8
   17244:	andeq	r7, r1, r8, lsr #18
   17248:	andeq	r7, r1, r8, lsr #18
   1724c:	andeq	r7, r1, r8, lsr #18
   17250:	andeq	r7, r1, r8, lsr #18
   17254:	andeq	r7, r1, r8, lsr #18
   17258:	andeq	r7, r1, r8, lsr #18
   1725c:	andeq	r7, r1, r8, lsr #18
   17260:	andeq	r7, r1, r8, lsr #18
   17264:	andeq	r7, r1, r8, lsr #18
   17268:	andeq	r7, r1, r8, lsr #18
   1726c:	andeq	r7, r1, r8, lsr #18
   17270:	andeq	r7, r1, r8, lsr #18
   17274:	andeq	r7, r1, r8, lsr #18
   17278:	andeq	r7, r1, r8, lsr #18
   1727c:	andeq	r7, r1, r8, lsr #18
   17280:	andeq	r7, r1, r8, lsr #18
   17284:	andeq	r7, r1, r8, lsr #18
   17288:	andeq	r7, r1, r8, lsr #18
   1728c:	andeq	r7, r1, r8, lsr #18
   17290:	andeq	r7, r1, r8, lsr #18
   17294:	andeq	r7, r1, r8, lsr #18
   17298:	andeq	r7, r1, r8, lsr #18
   1729c:	andeq	r7, r1, r8, lsr #18
   172a0:	andeq	r7, r1, r8, lsr #18
   172a4:	andeq	r7, r1, r8, lsr #18
   172a8:	andeq	r7, r1, r8, lsr #18
   172ac:	andeq	r7, r1, r0, lsl #9
   172b0:	muleq	r1, r0, r8
   172b4:	andeq	r7, r1, r0, lsl #9
   172b8:	andeq	r7, r1, r0, lsr #9
   172bc:	mov	r3, #1
   172c0:	str	r3, [sp, #28]
   172c4:	str	r3, [sp, #52]	; 0x34
   172c8:	ldr	r3, [pc, #4000]	; 18270 <__assert_fail@plt+0x6d94>
   172cc:	mov	r7, #0
   172d0:	str	r3, [sp, #64]	; 0x40
   172d4:	mov	r3, #2
   172d8:	str	r3, [sp, #152]	; 0x98
   172dc:	b	16fe0 <__assert_fail@plt+0x5b04>
   172e0:	ldr	r3, [sp, #28]
   172e4:	cmp	r3, #0
   172e8:	beq	17444 <__assert_fail@plt+0x5f68>
   172ec:	mov	r3, #1
   172f0:	str	r3, [sp, #52]	; 0x34
   172f4:	ldr	r3, [pc, #3956]	; 18270 <__assert_fail@plt+0x6d94>
   172f8:	mov	r7, #0
   172fc:	str	r3, [sp, #64]	; 0x40
   17300:	b	16fe0 <__assert_fail@plt+0x5b04>
   17304:	mov	r3, #1
   17308:	str	r3, [sp, #44]	; 0x2c
   1730c:	str	r3, [sp, #52]	; 0x34
   17310:	str	r3, [sp, #28]
   17314:	b	172c8 <__assert_fail@plt+0x5dec>
   17318:	mov	r3, #0
   1731c:	str	r3, [sp, #28]
   17320:	mov	r3, #1
   17324:	str	r3, [sp, #44]	; 0x2c
   17328:	mov	r7, #0
   1732c:	b	16fe0 <__assert_fail@plt+0x5b04>
   17330:	ldr	r3, [sp, #152]	; 0x98
   17334:	cmp	r3, #10
   17338:	beq	1737c <__assert_fail@plt+0x5ea0>
   1733c:	mov	r2, #5
   17340:	ldr	r1, [pc, #3884]	; 18274 <__assert_fail@plt+0x6d98>
   17344:	mov	r0, #0
   17348:	bl	11230 <dcgettext@plt>
   1734c:	ldr	r2, [pc, #3872]	; 18274 <__assert_fail@plt+0x6d98>
   17350:	cmp	r0, r2
   17354:	str	r0, [sp, #164]	; 0xa4
   17358:	beq	18360 <__assert_fail@plt+0x6e84>
   1735c:	mov	r2, #5
   17360:	ldr	r1, [pc, #3848]	; 18270 <__assert_fail@plt+0x6d94>
   17364:	mov	r0, #0
   17368:	bl	11230 <dcgettext@plt>
   1736c:	ldr	r2, [pc, #3836]	; 18270 <__assert_fail@plt+0x6d94>
   17370:	cmp	r0, r2
   17374:	str	r0, [sp, #168]	; 0xa8
   17378:	beq	18350 <__assert_fail@plt+0x6e74>
   1737c:	ldr	r7, [sp, #28]
   17380:	cmp	r7, #0
   17384:	movne	r7, #0
   17388:	bne	173bc <__assert_fail@plt+0x5ee0>
   1738c:	ldr	r3, [sp, #164]	; 0xa4
   17390:	ldrb	r3, [r3]
   17394:	cmp	r3, #0
   17398:	beq	18370 <__assert_fail@plt+0x6e94>
   1739c:	ldr	r2, [sp, #164]	; 0xa4
   173a0:	ldr	r1, [sp, #32]
   173a4:	cmp	fp, r7
   173a8:	strbhi	r3, [r1, r7]
   173ac:	ldrb	r3, [r2, #1]!
   173b0:	add	r7, r7, #1
   173b4:	cmp	r3, #0
   173b8:	bne	173a4 <__assert_fail@plt+0x5ec8>
   173bc:	ldr	r0, [sp, #168]	; 0xa8
   173c0:	bl	11380 <strlen@plt>
   173c4:	ldr	r3, [sp, #168]	; 0xa8
   173c8:	str	r3, [sp, #64]	; 0x40
   173cc:	mov	r3, #1
   173d0:	str	r3, [sp, #44]	; 0x2c
   173d4:	str	r0, [sp, #52]	; 0x34
   173d8:	b	16fe0 <__assert_fail@plt+0x5b04>
   173dc:	mov	r3, #1
   173e0:	str	r3, [sp, #44]	; 0x2c
   173e4:	str	r3, [sp, #52]	; 0x34
   173e8:	str	r3, [sp, #28]
   173ec:	ldr	r3, [pc, #3716]	; 18278 <__assert_fail@plt+0x6d9c>
   173f0:	mov	r7, #0
   173f4:	str	r3, [sp, #64]	; 0x40
   173f8:	mov	r3, #5
   173fc:	str	r3, [sp, #152]	; 0x98
   17400:	b	16fe0 <__assert_fail@plt+0x5b04>
   17404:	ldr	r3, [sp, #28]
   17408:	cmp	r3, #0
   1740c:	beq	1810c <__assert_fail@plt+0x6c30>
   17410:	ldr	r3, [sp, #28]
   17414:	mov	r7, #0
   17418:	str	r3, [sp, #44]	; 0x2c
   1741c:	mov	r3, #1
   17420:	str	r3, [sp, #52]	; 0x34
   17424:	ldr	r3, [pc, #3660]	; 18278 <__assert_fail@plt+0x6d9c>
   17428:	str	r3, [sp, #64]	; 0x40
   1742c:	b	16fe0 <__assert_fail@plt+0x5b04>
   17430:	ldr	r3, [sp, #28]
   17434:	cmp	r3, #0
   17438:	mov	r3, #1
   1743c:	streq	r3, [sp, #44]	; 0x2c
   17440:	bne	172c4 <__assert_fail@plt+0x5de8>
   17444:	cmp	fp, #0
   17448:	beq	1813c <__assert_fail@plt+0x6c60>
   1744c:	ldr	r3, [sp, #32]
   17450:	mov	r2, #39	; 0x27
   17454:	mov	r7, #1
   17458:	strb	r2, [r3]
   1745c:	mov	r3, #0
   17460:	str	r3, [sp, #28]
   17464:	mov	r3, #1
   17468:	str	r3, [sp, #52]	; 0x34
   1746c:	ldr	r3, [pc, #3580]	; 18270 <__assert_fail@plt+0x6d94>
   17470:	str	r3, [sp, #64]	; 0x40
   17474:	mov	r3, #2
   17478:	str	r3, [sp, #152]	; 0x98
   1747c:	b	16fe0 <__assert_fail@plt+0x5b04>
   17480:	ldr	r3, [sp, #24]
   17484:	cmn	r3, #1
   17488:	beq	180a0 <__assert_fail@plt+0x6bc4>
   1748c:	ldr	r3, [sp, #24]
   17490:	subs	r3, r3, #1
   17494:	movne	r3, #1
   17498:	cmp	r3, #0
   1749c:	bne	174a8 <__assert_fail@plt+0x5fcc>
   174a0:	cmp	sl, #0
   174a4:	beq	17894 <__assert_fail@plt+0x63b8>
   174a8:	ldr	r3, [sp, #152]	; 0x98
   174ac:	mov	r5, #0
   174b0:	sub	r2, r3, #2
   174b4:	mov	r8, r5
   174b8:	clz	r2, r2
   174bc:	lsr	r2, r2, #5
   174c0:	ldr	r3, [sp, #60]	; 0x3c
   174c4:	ldr	r1, [sp, #28]
   174c8:	orr	r3, r2, r3
   174cc:	eor	r3, r3, #1
   174d0:	orr	r3, r1, r3
   174d4:	tst	r3, #255	; 0xff
   174d8:	bne	17c04 <__assert_fail@plt+0x6728>
   174dc:	cmp	r6, #0
   174e0:	bne	17630 <__assert_fail@plt+0x6154>
   174e4:	ldr	r3, [sp, #40]	; 0x28
   174e8:	eor	r8, r8, #1
   174ec:	and	r8, r8, r3
   174f0:	add	sl, sl, #1
   174f4:	uxtb	r6, r8
   174f8:	cmp	r6, #0
   174fc:	beq	17530 <__assert_fail@plt+0x6054>
   17500:	cmp	fp, r7
   17504:	movhi	r2, #39	; 0x27
   17508:	ldrhi	r3, [sp, #32]
   1750c:	strbhi	r2, [r3, r7]
   17510:	add	r3, r7, #1
   17514:	cmp	fp, r3
   17518:	movhi	r1, #39	; 0x27
   1751c:	ldrhi	r2, [sp, #32]
   17520:	add	r7, r7, #2
   17524:	strbhi	r1, [r2, r3]
   17528:	mov	r3, #0
   1752c:	str	r3, [sp, #40]	; 0x28
   17530:	cmp	r7, fp
   17534:	ldrcc	r3, [sp, #32]
   17538:	strbcc	r4, [r3, r7]
   1753c:	ldr	r3, [sp, #36]	; 0x24
   17540:	cmp	r5, #0
   17544:	moveq	r3, #0
   17548:	str	r3, [sp, #36]	; 0x24
   1754c:	ldr	r3, [sp, #24]
   17550:	add	r7, r7, #1
   17554:	cmn	r3, #1
   17558:	bne	16ffc <__assert_fail@plt+0x5b20>
   1755c:	ldr	r3, [sp, #56]	; 0x38
   17560:	ldrb	r5, [r3, sl]
   17564:	adds	r5, r5, #0
   17568:	movne	r5, #1
   1756c:	cmp	r5, #0
   17570:	bne	17010 <__assert_fail@plt+0x5b34>
   17574:	ldr	r3, [sp, #152]	; 0x98
   17578:	ldr	r1, [sp, #28]
   1757c:	sub	r3, r3, #2
   17580:	clz	r3, r3
   17584:	lsr	r3, r3, #5
   17588:	and	r9, r1, r3
   1758c:	cmp	r7, #0
   17590:	movne	r2, #0
   17594:	andeq	r2, r9, #1
   17598:	cmp	r2, #0
   1759c:	bne	17f78 <__assert_fail@plt+0x6a9c>
   175a0:	eor	r2, r1, #1
   175a4:	ands	r3, r3, r2
   175a8:	beq	18434 <__assert_fail@plt+0x6f58>
   175ac:	ldr	r2, [sp, #68]	; 0x44
   175b0:	cmp	r2, #0
   175b4:	beq	18420 <__assert_fail@plt+0x6f44>
   175b8:	ldr	r3, [sp, #36]	; 0x24
   175bc:	cmp	r3, #0
   175c0:	bne	183d8 <__assert_fail@plt+0x6efc>
   175c4:	ldr	r2, [sp, #72]	; 0x48
   175c8:	clz	r3, fp
   175cc:	cmp	r2, #0
   175d0:	lsr	r3, r3, #5
   175d4:	moveq	r3, #0
   175d8:	cmp	r3, #0
   175dc:	beq	18378 <__assert_fail@plt+0x6e9c>
   175e0:	str	r3, [sp, #68]	; 0x44
   175e4:	ldr	fp, [sp, #72]	; 0x48
   175e8:	b	16f98 <__assert_fail@plt+0x5abc>
   175ec:	ldr	r3, [sp, #152]	; 0x98
   175f0:	cmp	r3, #2
   175f4:	beq	17c48 <__assert_fail@plt+0x676c>
   175f8:	ldr	r3, [sp, #44]	; 0x2c
   175fc:	ldr	r2, [sp, #28]
   17600:	and	r2, r3, r2
   17604:	ands	r2, r9, r2
   17608:	bne	17c54 <__assert_fail@plt+0x6778>
   1760c:	mov	r4, #92	; 0x5c
   17610:	mov	r3, r4
   17614:	ldr	r1, [sp, #44]	; 0x2c
   17618:	cmp	r1, #0
   1761c:	moveq	r5, #0
   17620:	moveq	r8, r1
   17624:	beq	174c0 <__assert_fail@plt+0x5fe4>
   17628:	mov	r4, r3
   1762c:	mov	r5, #0
   17630:	ldr	r3, [sp, #28]
   17634:	cmp	r3, #0
   17638:	bne	17c3c <__assert_fail@plt+0x6760>
   1763c:	ldr	r3, [sp, #40]	; 0x28
   17640:	eor	r9, r3, #1
   17644:	and	r9, r9, r2
   17648:	ands	r9, r9, #255	; 0xff
   1764c:	beq	17690 <__assert_fail@plt+0x61b4>
   17650:	cmp	fp, r7
   17654:	movhi	r2, #39	; 0x27
   17658:	ldrhi	r3, [sp, #32]
   1765c:	str	r9, [sp, #40]	; 0x28
   17660:	strbhi	r2, [r3, r7]
   17664:	add	r3, r7, #1
   17668:	cmp	fp, r3
   1766c:	movhi	r1, #36	; 0x24
   17670:	ldrhi	r2, [sp, #32]
   17674:	strbhi	r1, [r2, r3]
   17678:	add	r3, r7, #2
   1767c:	cmp	fp, r3
   17680:	add	r7, r7, #3
   17684:	ldrhi	r2, [sp, #32]
   17688:	movhi	r1, #39	; 0x27
   1768c:	strbhi	r1, [r2, r3]
   17690:	cmp	fp, r7
   17694:	movhi	r2, #92	; 0x5c
   17698:	ldrhi	r3, [sp, #32]
   1769c:	add	sl, sl, #1
   176a0:	strbhi	r2, [r3, r7]
   176a4:	add	r7, r7, #1
   176a8:	b	17530 <__assert_fail@plt+0x6054>
   176ac:	ldr	r3, [sp, #152]	; 0x98
   176b0:	mov	r4, #11
   176b4:	sub	r2, r3, #2
   176b8:	mov	r3, #118	; 0x76
   176bc:	clz	r2, r2
   176c0:	lsr	r2, r2, #5
   176c4:	b	17614 <__assert_fail@plt+0x6138>
   176c8:	mov	r4, #10
   176cc:	mov	r3, #110	; 0x6e
   176d0:	ldr	r2, [sp, #152]	; 0x98
   176d4:	ldr	r1, [sp, #28]
   176d8:	sub	r2, r2, #2
   176dc:	clz	r2, r2
   176e0:	lsr	r2, r2, #5
   176e4:	ands	r1, r1, r2
   176e8:	beq	17614 <__assert_fail@plt+0x6138>
   176ec:	ldr	sl, [sp, #32]
   176f0:	mov	r8, fp
   176f4:	mov	r2, r1
   176f8:	mov	r3, #2
   176fc:	str	r3, [sp, #152]	; 0x98
   17700:	ldr	r9, [sp, #44]	; 0x2c
   17704:	ldr	r3, [sp, #152]	; 0x98
   17708:	and	r9, r9, r2
   1770c:	tst	r9, #255	; 0xff
   17710:	movne	r3, #4
   17714:	str	r3, [sp, #152]	; 0x98
   17718:	ldr	r3, [sp, #156]	; 0x9c
   1771c:	mov	ip, #0
   17720:	bic	r3, r3, #2
   17724:	str	r3, [sp, #4]
   17728:	ldr	r3, [sp, #168]	; 0xa8
   1772c:	ldr	r2, [sp, #56]	; 0x38
   17730:	str	r3, [sp, #16]
   17734:	ldr	r3, [sp, #164]	; 0xa4
   17738:	mov	r1, r8
   1773c:	str	r3, [sp, #12]
   17740:	ldr	r3, [sp, #152]	; 0x98
   17744:	mov	r0, sl
   17748:	str	r3, [sp]
   1774c:	str	ip, [sp, #8]
   17750:	ldr	r3, [sp, #24]
   17754:	bl	16f3c <__assert_fail@plt+0x5a60>
   17758:	mov	fp, r0
   1775c:	mov	r0, fp
   17760:	add	sp, sp, #116	; 0x74
   17764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17768:	ldr	r3, [sp, #152]	; 0x98
   1776c:	mov	r4, #8
   17770:	sub	r2, r3, #2
   17774:	mov	r3, #98	; 0x62
   17778:	clz	r2, r2
   1777c:	lsr	r2, r2, #5
   17780:	b	17614 <__assert_fail@plt+0x6138>
   17784:	ldr	r3, [sp, #152]	; 0x98
   17788:	mov	r4, #7
   1778c:	sub	r2, r3, #2
   17790:	mov	r3, #97	; 0x61
   17794:	clz	r2, r2
   17798:	lsr	r2, r2, #5
   1779c:	b	17614 <__assert_fail@plt+0x6138>
   177a0:	ldr	r3, [sp, #44]	; 0x2c
   177a4:	cmp	r3, #0
   177a8:	beq	17f8c <__assert_fail@plt+0x6ab0>
   177ac:	ldr	r3, [sp, #28]
   177b0:	cmp	r3, #0
   177b4:	bne	18264 <__assert_fail@plt+0x6d88>
   177b8:	ldr	r3, [sp, #152]	; 0x98
   177bc:	sub	r2, r3, #2
   177c0:	ldr	r3, [sp, #40]	; 0x28
   177c4:	clz	r2, r2
   177c8:	eor	r3, r3, #1
   177cc:	lsr	r2, r2, #5
   177d0:	ands	r3, r2, r3
   177d4:	moveq	r1, r7
   177d8:	beq	1781c <__assert_fail@plt+0x6340>
   177dc:	cmp	fp, r7
   177e0:	movhi	r0, #39	; 0x27
   177e4:	ldrhi	r1, [sp, #32]
   177e8:	str	r3, [sp, #40]	; 0x28
   177ec:	strbhi	r0, [r1, r7]
   177f0:	add	r1, r7, #1
   177f4:	cmp	fp, r1
   177f8:	movhi	ip, #36	; 0x24
   177fc:	ldrhi	r0, [sp, #32]
   17800:	strbhi	ip, [r0, r1]
   17804:	add	r1, r7, #2
   17808:	cmp	fp, r1
   1780c:	movhi	ip, #39	; 0x27
   17810:	ldrhi	r0, [sp, #32]
   17814:	strbhi	ip, [r0, r1]
   17818:	add	r1, r7, #3
   1781c:	cmp	fp, r1
   17820:	movhi	r0, #92	; 0x5c
   17824:	ldrhi	r3, [sp, #32]
   17828:	add	r7, r1, #1
   1782c:	strbhi	r0, [r3, r1]
   17830:	cmp	r8, #0
   17834:	beq	18178 <__assert_fail@plt+0x6c9c>
   17838:	ldr	r0, [sp, #24]
   1783c:	add	r3, sl, #1
   17840:	cmp	r3, r0
   17844:	bcs	180b4 <__assert_fail@plt+0x6bd8>
   17848:	ldr	r0, [sp, #56]	; 0x38
   1784c:	ldrb	r3, [r0, r3]
   17850:	sub	r3, r3, #48	; 0x30
   17854:	cmp	r3, #9
   17858:	bhi	180b4 <__assert_fail@plt+0x6bd8>
   1785c:	cmp	fp, r7
   17860:	movhi	r3, #48	; 0x30
   17864:	ldrhi	r0, [sp, #32]
   17868:	ldr	r5, [sp, #28]
   1786c:	mov	r4, #48	; 0x30
   17870:	strbhi	r3, [r0, r7]
   17874:	add	r3, r1, #2
   17878:	cmp	fp, r3
   1787c:	movhi	r0, #48	; 0x30
   17880:	ldrhi	ip, [sp, #32]
   17884:	add	r7, r1, #3
   17888:	strbhi	r0, [ip, r3]
   1788c:	b	174c0 <__assert_fail@plt+0x5fe4>
   17890:	mov	r5, #0
   17894:	ldr	r3, [sp, #152]	; 0x98
   17898:	sub	r2, r3, #2
   1789c:	ldr	r3, [sp, #28]
   178a0:	clz	r2, r2
   178a4:	lsr	r2, r2, #5
   178a8:	ands	r8, r3, r2
   178ac:	beq	174c0 <__assert_fail@plt+0x5fe4>
   178b0:	mov	r3, r8
   178b4:	mov	r2, r3
   178b8:	mov	r3, #2
   178bc:	ldr	sl, [sp, #32]
   178c0:	mov	r8, fp
   178c4:	str	r3, [sp, #152]	; 0x98
   178c8:	b	17700 <__assert_fail@plt+0x6224>
   178cc:	ldr	r3, [sp, #152]	; 0x98
   178d0:	cmp	r3, #2
   178d4:	beq	17ff8 <__assert_fail@plt+0x6b1c>
   178d8:	cmp	r3, #5
   178dc:	beq	17fb8 <__assert_fail@plt+0x6adc>
   178e0:	mov	r5, #0
   178e4:	sub	r2, r3, #2
   178e8:	mov	r8, r5
   178ec:	clz	r2, r2
   178f0:	mov	r4, #63	; 0x3f
   178f4:	lsr	r2, r2, #5
   178f8:	b	174c0 <__assert_fail@plt+0x5fe4>
   178fc:	ldr	r3, [sp, #152]	; 0x98
   17900:	cmp	r3, #2
   17904:	beq	18018 <__assert_fail@plt+0x6b3c>
   17908:	mov	r2, #0
   1790c:	str	r5, [sp, #68]	; 0x44
   17910:	mov	r8, r2
   17914:	mov	r4, #39	; 0x27
   17918:	b	174c0 <__assert_fail@plt+0x5fe4>
   1791c:	mov	r4, #13
   17920:	mov	r3, #114	; 0x72
   17924:	b	176d0 <__assert_fail@plt+0x61f4>
   17928:	ldr	r3, [sp, #152]	; 0x98
   1792c:	mov	r8, #0
   17930:	sub	r2, r3, #2
   17934:	clz	r2, r2
   17938:	lsr	r2, r2, #5
   1793c:	b	174c0 <__assert_fail@plt+0x5fe4>
   17940:	ldr	r3, [sp, #152]	; 0x98
   17944:	mov	r4, #12
   17948:	sub	r2, r3, #2
   1794c:	mov	r3, #102	; 0x66
   17950:	clz	r2, r2
   17954:	lsr	r2, r2, #5
   17958:	b	17614 <__assert_fail@plt+0x6138>
   1795c:	mov	r5, r6
   17960:	b	17894 <__assert_fail@plt+0x63b8>
   17964:	ldr	r3, [sp, #152]	; 0x98
   17968:	sub	r2, r3, #2
   1796c:	mov	r3, #116	; 0x74
   17970:	clz	r2, r2
   17974:	lsr	r2, r2, #5
   17978:	b	17614 <__assert_fail@plt+0x6138>
   1797c:	ldr	r8, [sp, #76]	; 0x4c
   17980:	cmp	r8, #1
   17984:	bne	17e34 <__assert_fail@plt+0x6958>
   17988:	bl	11368 <__ctype_b_loc@plt>
   1798c:	sxth	r3, r4
   17990:	mov	ip, r8
   17994:	lsl	r3, r3, #1
   17998:	ldr	r2, [r0]
   1799c:	ldrh	r3, [r2, r3]
   179a0:	and	r3, r3, #16384	; 0x4000
   179a4:	cmp	r3, #0
   179a8:	movne	r5, #1
   179ac:	moveq	r5, #0
   179b0:	moveq	r3, #1
   179b4:	movne	r3, #0
   179b8:	ldr	r2, [sp, #44]	; 0x2c
   179bc:	and	r3, r3, r2
   179c0:	ands	r8, r3, #255	; 0xff
   179c4:	bne	17cc8 <__assert_fail@plt+0x67ec>
   179c8:	ldr	r3, [sp, #152]	; 0x98
   179cc:	sub	r2, r3, #2
   179d0:	clz	r2, r2
   179d4:	lsr	r2, r2, #5
   179d8:	b	174c0 <__assert_fail@plt+0x5fe4>
   179dc:	ldr	r3, [sp, #56]	; 0x38
   179e0:	add	r3, r3, sl
   179e4:	str	r3, [sp, #48]	; 0x30
   179e8:	ldr	r3, [sp, #48]	; 0x30
   179ec:	mov	r6, #0
   179f0:	ldrb	r4, [r3]
   179f4:	cmp	r4, #126	; 0x7e
   179f8:	ldrls	pc, [pc, r4, lsl #2]
   179fc:	b	1797c <__assert_fail@plt+0x64a0>
   17a00:	andeq	r7, r1, r0, lsr #15
   17a04:	andeq	r7, r1, ip, ror r9
   17a08:	andeq	r7, r1, ip, ror r9
   17a0c:	andeq	r7, r1, ip, ror r9
   17a10:	andeq	r7, r1, ip, ror r9
   17a14:	andeq	r7, r1, ip, ror r9
   17a18:	andeq	r7, r1, ip, ror r9
   17a1c:	andeq	r7, r1, r4, lsl #15
   17a20:	andeq	r7, r1, r8, ror #14
   17a24:	strdeq	r7, [r1], -ip
   17a28:	andeq	r7, r1, r8, asr #13
   17a2c:	andeq	r7, r1, ip, lsr #13
   17a30:	andeq	r7, r1, r0, asr #18
   17a34:	andeq	r7, r1, ip, lsl r9
   17a38:	andeq	r7, r1, ip, ror r9
   17a3c:	andeq	r7, r1, ip, ror r9
   17a40:	andeq	r7, r1, ip, ror r9
   17a44:	andeq	r7, r1, ip, ror r9
   17a48:	andeq	r7, r1, ip, ror r9
   17a4c:	andeq	r7, r1, ip, ror r9
   17a50:	andeq	r7, r1, ip, ror r9
   17a54:	andeq	r7, r1, ip, ror r9
   17a58:	andeq	r7, r1, ip, ror r9
   17a5c:	andeq	r7, r1, ip, ror r9
   17a60:	andeq	r7, r1, ip, ror r9
   17a64:	andeq	r7, r1, ip, ror r9
   17a68:	andeq	r7, r1, ip, ror r9
   17a6c:	andeq	r7, r1, ip, ror r9
   17a70:	andeq	r7, r1, ip, ror r9
   17a74:	andeq	r7, r1, ip, ror r9
   17a78:	andeq	r7, r1, ip, ror r9
   17a7c:	andeq	r7, r1, ip, ror r9
   17a80:	muleq	r1, r4, r8
   17a84:	muleq	r1, r0, r8
   17a88:	muleq	r1, r0, r8
   17a8c:	andeq	r7, r1, r0, lsr #9
   17a90:	muleq	r1, r0, r8
   17a94:	andeq	r7, r1, r8, lsr #18
   17a98:	muleq	r1, r0, r8
   17a9c:	strdeq	r7, [r1], -ip
   17aa0:	muleq	r1, r0, r8
   17aa4:	muleq	r1, r0, r8
   17aa8:	muleq	r1, r0, r8
   17aac:	andeq	r7, r1, r8, lsr #18
   17ab0:	andeq	r7, r1, r8, lsr #18
   17ab4:	andeq	r7, r1, r8, lsr #18
   17ab8:	andeq	r7, r1, r8, lsr #18
   17abc:	andeq	r7, r1, r8, lsr #18
   17ac0:	andeq	r7, r1, r8, lsr #18
   17ac4:	andeq	r7, r1, r8, lsr #18
   17ac8:	andeq	r7, r1, r8, lsr #18
   17acc:	andeq	r7, r1, r8, lsr #18
   17ad0:	andeq	r7, r1, r8, lsr #18
   17ad4:	andeq	r7, r1, r8, lsr #18
   17ad8:	andeq	r7, r1, r8, lsr #18
   17adc:	andeq	r7, r1, r8, lsr #18
   17ae0:	andeq	r7, r1, r8, lsr #18
   17ae4:	andeq	r7, r1, r8, lsr #18
   17ae8:	andeq	r7, r1, r8, lsr #18
   17aec:	muleq	r1, r0, r8
   17af0:	muleq	r1, r0, r8
   17af4:	muleq	r1, r0, r8
   17af8:	muleq	r1, r0, r8
   17afc:	andeq	r7, r1, ip, asr #17
   17b00:	andeq	r7, r1, ip, ror r9
   17b04:	andeq	r7, r1, r8, lsr #18
   17b08:	andeq	r7, r1, r8, lsr #18
   17b0c:	andeq	r7, r1, r8, lsr #18
   17b10:	andeq	r7, r1, r8, lsr #18
   17b14:	andeq	r7, r1, r8, lsr #18
   17b18:	andeq	r7, r1, r8, lsr #18
   17b1c:	andeq	r7, r1, r8, lsr #18
   17b20:	andeq	r7, r1, r8, lsr #18
   17b24:	andeq	r7, r1, r8, lsr #18
   17b28:	andeq	r7, r1, r8, lsr #18
   17b2c:	andeq	r7, r1, r8, lsr #18
   17b30:	andeq	r7, r1, r8, lsr #18
   17b34:	andeq	r7, r1, r8, lsr #18
   17b38:	andeq	r7, r1, r8, lsr #18
   17b3c:	andeq	r7, r1, r8, lsr #18
   17b40:	andeq	r7, r1, r8, lsr #18
   17b44:	andeq	r7, r1, r8, lsr #18
   17b48:	andeq	r7, r1, r8, lsr #18
   17b4c:	andeq	r7, r1, r8, lsr #18
   17b50:	andeq	r7, r1, r8, lsr #18
   17b54:	andeq	r7, r1, r8, lsr #18
   17b58:	andeq	r7, r1, r8, lsr #18
   17b5c:	andeq	r7, r1, r8, lsr #18
   17b60:	andeq	r7, r1, r8, lsr #18
   17b64:	andeq	r7, r1, r8, lsr #18
   17b68:	andeq	r7, r1, r8, lsr #18
   17b6c:	muleq	r1, r0, r8
   17b70:	andeq	r7, r1, ip, ror #11
   17b74:	andeq	r7, r1, r8, lsr #18
   17b78:	muleq	r1, r0, r8
   17b7c:	andeq	r7, r1, r8, lsr #18
   17b80:	muleq	r1, r0, r8
   17b84:	andeq	r7, r1, r8, lsr #18
   17b88:	andeq	r7, r1, r8, lsr #18
   17b8c:	andeq	r7, r1, r8, lsr #18
   17b90:	andeq	r7, r1, r8, lsr #18
   17b94:	andeq	r7, r1, r8, lsr #18
   17b98:	andeq	r7, r1, r8, lsr #18
   17b9c:	andeq	r7, r1, r8, lsr #18
   17ba0:	andeq	r7, r1, r8, lsr #18
   17ba4:	andeq	r7, r1, r8, lsr #18
   17ba8:	andeq	r7, r1, r8, lsr #18
   17bac:	andeq	r7, r1, r8, lsr #18
   17bb0:	andeq	r7, r1, r8, lsr #18
   17bb4:	andeq	r7, r1, r8, lsr #18
   17bb8:	andeq	r7, r1, r8, lsr #18
   17bbc:	andeq	r7, r1, r8, lsr #18
   17bc0:	andeq	r7, r1, r8, lsr #18
   17bc4:	andeq	r7, r1, r8, lsr #18
   17bc8:	andeq	r7, r1, r8, lsr #18
   17bcc:	andeq	r7, r1, r8, lsr #18
   17bd0:	andeq	r7, r1, r8, lsr #18
   17bd4:	andeq	r7, r1, r8, lsr #18
   17bd8:	andeq	r7, r1, r8, lsr #18
   17bdc:	andeq	r7, r1, r8, lsr #18
   17be0:	andeq	r7, r1, r8, lsr #18
   17be4:	andeq	r7, r1, r8, lsr #18
   17be8:	andeq	r7, r1, r8, lsr #18
   17bec:	andeq	r7, r1, r0, lsl #9
   17bf0:	muleq	r1, r0, r8
   17bf4:	andeq	r7, r1, r0, lsl #9
   17bf8:	andeq	r7, r1, r0, lsr #9
   17bfc:	mov	r3, #116	; 0x74
   17c00:	b	176d0 <__assert_fail@plt+0x61f4>
   17c04:	ldr	r3, [sp, #160]	; 0xa0
   17c08:	cmp	r3, #0
   17c0c:	beq	174dc <__assert_fail@plt+0x6000>
   17c10:	lsr	r3, r4, #5
   17c14:	ldr	r0, [sp, #160]	; 0xa0
   17c18:	uxtb	r3, r3
   17c1c:	and	r1, r4, #31
   17c20:	ldr	r0, [r0, r3, lsl #2]
   17c24:	lsr	r3, r0, r1
   17c28:	tst	r3, #1
   17c2c:	beq	174dc <__assert_fail@plt+0x6000>
   17c30:	ldr	r3, [sp, #28]
   17c34:	cmp	r3, #0
   17c38:	beq	1763c <__assert_fail@plt+0x6160>
   17c3c:	ldr	sl, [sp, #32]
   17c40:	mov	r8, fp
   17c44:	b	17700 <__assert_fail@plt+0x6224>
   17c48:	ldr	r3, [sp, #28]
   17c4c:	cmp	r3, #0
   17c50:	bne	181a4 <__assert_fail@plt+0x6cc8>
   17c54:	add	sl, sl, #1
   17c58:	ldr	r6, [sp, #40]	; 0x28
   17c5c:	mov	r5, #0
   17c60:	mov	r4, #92	; 0x5c
   17c64:	b	174f8 <__assert_fail@plt+0x601c>
   17c68:	cmp	r9, r8
   17c6c:	bne	17edc <__assert_fail@plt+0x6a00>
   17c70:	ldr	r0, [sp, #100]	; 0x64
   17c74:	bl	1126c <iswprint@plt>
   17c78:	add	r5, r5, r4
   17c7c:	cmp	r0, #0
   17c80:	add	r0, sp, #104	; 0x68
   17c84:	moveq	r6, #0
   17c88:	bl	11200 <mbsinit@plt>
   17c8c:	cmp	r0, #0
   17c90:	beq	17e70 <__assert_fail@plt+0x6994>
   17c94:	mov	r2, r6
   17c98:	mov	ip, r5
   17c9c:	eor	r5, r2, #1
   17ca0:	ldr	r4, [sp, #80]	; 0x50
   17ca4:	ldr	r6, [sp, #84]	; 0x54
   17ca8:	ldr	r7, [sp, #88]	; 0x58
   17cac:	uxtb	r5, r5
   17cb0:	cmp	ip, #1
   17cb4:	bls	181b4 <__assert_fail@plt+0x6cd8>
   17cb8:	ldr	r3, [sp, #44]	; 0x2c
   17cbc:	and	r8, r3, r5
   17cc0:	mov	r5, r2
   17cc4:	uxtb	r8, r8
   17cc8:	add	r2, sl, ip
   17ccc:	ldr	r0, [sp, #48]	; 0x30
   17cd0:	mov	r1, #0
   17cd4:	str	r5, [sp, #48]	; 0x30
   17cd8:	ldr	r9, [sp, #28]
   17cdc:	ldr	ip, [sp, #40]	; 0x28
   17ce0:	ldr	r3, [sp, #32]
   17ce4:	ldr	r5, [sp, #152]	; 0x98
   17ce8:	b	17da4 <__assert_fail@plt+0x68c8>
   17cec:	cmp	r9, #0
   17cf0:	bne	180c8 <__assert_fail@plt+0x6bec>
   17cf4:	eor	r1, ip, #1
   17cf8:	cmp	r5, #2
   17cfc:	movne	r1, #0
   17d00:	andeq	r1, r1, #1
   17d04:	cmp	r1, #0
   17d08:	beq	17d40 <__assert_fail@plt+0x6864>
   17d0c:	cmp	fp, r7
   17d10:	movhi	ip, #39	; 0x27
   17d14:	strbhi	ip, [r3, r7]
   17d18:	add	ip, r7, #1
   17d1c:	cmp	fp, ip
   17d20:	movhi	lr, #36	; 0x24
   17d24:	strbhi	lr, [r3, ip]
   17d28:	add	ip, r7, #2
   17d2c:	cmp	fp, ip
   17d30:	movhi	lr, #39	; 0x27
   17d34:	strbhi	lr, [r3, ip]
   17d38:	add	r7, r7, #3
   17d3c:	mov	ip, r1
   17d40:	cmp	fp, r7
   17d44:	movhi	r1, #92	; 0x5c
   17d48:	strbhi	r1, [r3, r7]
   17d4c:	add	r1, r7, #1
   17d50:	cmp	fp, r1
   17d54:	lsrhi	lr, r4, #6
   17d58:	addhi	lr, lr, #48	; 0x30
   17d5c:	strbhi	lr, [r3, r1]
   17d60:	add	lr, r7, #2
   17d64:	cmp	fp, lr
   17d68:	lsrhi	r1, r4, #3
   17d6c:	andhi	r1, r1, #7
   17d70:	addhi	r1, r1, #48	; 0x30
   17d74:	add	sl, sl, #1
   17d78:	strbhi	r1, [r3, lr]
   17d7c:	and	r4, r4, #7
   17d80:	cmp	r2, sl
   17d84:	add	r4, r4, #48	; 0x30
   17d88:	add	r7, r7, #3
   17d8c:	bls	180ec <__assert_fail@plt+0x6c10>
   17d90:	mov	r1, r8
   17d94:	cmp	fp, r7
   17d98:	strbhi	r4, [r3, r7]
   17d9c:	ldrb	r4, [r0, #1]!
   17da0:	add	r7, r7, #1
   17da4:	cmp	r8, #0
   17da8:	bne	17cec <__assert_fail@plt+0x6810>
   17dac:	cmp	r6, #0
   17db0:	bne	17e00 <__assert_fail@plt+0x6924>
   17db4:	eor	r6, r1, #1
   17db8:	and	r6, r6, ip
   17dbc:	add	sl, sl, #1
   17dc0:	cmp	r2, sl
   17dc4:	uxtb	r6, r6
   17dc8:	bls	17e28 <__assert_fail@plt+0x694c>
   17dcc:	cmp	r6, #0
   17dd0:	beq	17d94 <__assert_fail@plt+0x68b8>
   17dd4:	cmp	fp, r7
   17dd8:	movhi	ip, #39	; 0x27
   17ddc:	strbhi	ip, [r3, r7]
   17de0:	add	ip, r7, #1
   17de4:	cmp	fp, ip
   17de8:	movhi	lr, #39	; 0x27
   17dec:	strbhi	lr, [r3, ip]
   17df0:	add	r7, r7, #2
   17df4:	mov	r6, r8
   17df8:	mov	ip, r8
   17dfc:	b	17d94 <__assert_fail@plt+0x68b8>
   17e00:	cmp	fp, r7
   17e04:	eor	r6, r1, #1
   17e08:	movhi	lr, #92	; 0x5c
   17e0c:	and	r6, r6, ip
   17e10:	add	sl, sl, #1
   17e14:	strbhi	lr, [r3, r7]
   17e18:	cmp	r2, sl
   17e1c:	add	r7, r7, #1
   17e20:	uxtb	r6, r6
   17e24:	bhi	17dcc <__assert_fail@plt+0x68f0>
   17e28:	str	ip, [sp, #40]	; 0x28
   17e2c:	ldr	r5, [sp, #48]	; 0x30
   17e30:	b	174f8 <__assert_fail@plt+0x601c>
   17e34:	ldr	r3, [sp, #24]
   17e38:	cmn	r3, #1
   17e3c:	mov	r3, #0
   17e40:	str	r3, [sp, #104]	; 0x68
   17e44:	str	r3, [sp, #108]	; 0x6c
   17e48:	beq	18168 <__assert_fail@plt+0x6c8c>
   17e4c:	mov	r2, r5
   17e50:	mov	r3, #0
   17e54:	str	r7, [sp, #88]	; 0x58
   17e58:	ldr	r7, [sp, #152]	; 0x98
   17e5c:	str	r5, [sp, #92]	; 0x5c
   17e60:	str	r6, [sp, #84]	; 0x54
   17e64:	mov	r5, r3
   17e68:	mov	r6, r2
   17e6c:	str	r4, [sp, #80]	; 0x50
   17e70:	ldr	r3, [sp, #56]	; 0x38
   17e74:	add	r9, sl, r5
   17e78:	add	r8, r3, r9
   17e7c:	ldr	r3, [sp, #24]
   17e80:	mov	r1, r8
   17e84:	sub	r2, r3, r9
   17e88:	add	r0, sp, #100	; 0x64
   17e8c:	add	r3, sp, #104	; 0x68
   17e90:	bl	1a440 <__assert_fail@plt+0x8f64>
   17e94:	subs	r4, r0, #0
   17e98:	beq	18240 <__assert_fail@plt+0x6d64>
   17e9c:	cmn	r4, #1
   17ea0:	beq	18220 <__assert_fail@plt+0x6d44>
   17ea4:	cmn	r4, #2
   17ea8:	beq	181c0 <__assert_fail@plt+0x6ce4>
   17eac:	ldr	r2, [sp, #28]
   17eb0:	cmp	r7, #2
   17eb4:	movne	r2, #0
   17eb8:	andeq	r2, r2, #1
   17ebc:	cmp	r2, #0
   17ec0:	beq	17c70 <__assert_fail@plt+0x6794>
   17ec4:	cmp	r4, #1
   17ec8:	beq	17c70 <__assert_fail@plt+0x6794>
   17ecc:	sub	r3, r4, #1
   17ed0:	add	r9, r3, r9
   17ed4:	ldr	r3, [sp, #56]	; 0x38
   17ed8:	add	r9, r3, r9
   17edc:	ldrb	r3, [r8, #1]!
   17ee0:	sub	r3, r3, #91	; 0x5b
   17ee4:	cmp	r3, #33	; 0x21
   17ee8:	ldrls	pc, [pc, r3, lsl #2]
   17eec:	b	17c68 <__assert_fail@plt+0x678c>
   17ef0:	andeq	r7, r1, r8, ror pc
   17ef4:	andeq	r7, r1, r8, ror pc
   17ef8:	andeq	r7, r1, r8, ror #24
   17efc:	andeq	r7, r1, r8, ror pc
   17f00:	andeq	r7, r1, r8, ror #24
   17f04:	andeq	r7, r1, r8, ror pc
   17f08:	andeq	r7, r1, r8, ror #24
   17f0c:	andeq	r7, r1, r8, ror #24
   17f10:	andeq	r7, r1, r8, ror #24
   17f14:	andeq	r7, r1, r8, ror #24
   17f18:	andeq	r7, r1, r8, ror #24
   17f1c:	andeq	r7, r1, r8, ror #24
   17f20:	andeq	r7, r1, r8, ror #24
   17f24:	andeq	r7, r1, r8, ror #24
   17f28:	andeq	r7, r1, r8, ror #24
   17f2c:	andeq	r7, r1, r8, ror #24
   17f30:	andeq	r7, r1, r8, ror #24
   17f34:	andeq	r7, r1, r8, ror #24
   17f38:	andeq	r7, r1, r8, ror #24
   17f3c:	andeq	r7, r1, r8, ror #24
   17f40:	andeq	r7, r1, r8, ror #24
   17f44:	andeq	r7, r1, r8, ror #24
   17f48:	andeq	r7, r1, r8, ror #24
   17f4c:	andeq	r7, r1, r8, ror #24
   17f50:	andeq	r7, r1, r8, ror #24
   17f54:	andeq	r7, r1, r8, ror #24
   17f58:	andeq	r7, r1, r8, ror #24
   17f5c:	andeq	r7, r1, r8, ror #24
   17f60:	andeq	r7, r1, r8, ror #24
   17f64:	andeq	r7, r1, r8, ror #24
   17f68:	andeq	r7, r1, r8, ror #24
   17f6c:	andeq	r7, r1, r8, ror #24
   17f70:	andeq	r7, r1, r8, ror #24
   17f74:	andeq	r7, r1, r8, ror pc
   17f78:	mov	r3, #2
   17f7c:	ldr	sl, [sp, #32]
   17f80:	mov	r8, fp
   17f84:	str	r3, [sp, #152]	; 0x98
   17f88:	b	17700 <__assert_fail@plt+0x6224>
   17f8c:	ldr	r3, [sp, #156]	; 0x9c
   17f90:	tst	r3, #1
   17f94:	bne	180c0 <__assert_fail@plt+0x6be4>
   17f98:	ldr	r3, [sp, #152]	; 0x98
   17f9c:	ldr	r4, [sp, #44]	; 0x2c
   17fa0:	sub	r2, r3, #2
   17fa4:	mov	r5, #0
   17fa8:	clz	r2, r2
   17fac:	mov	r8, r4
   17fb0:	lsr	r2, r2, #5
   17fb4:	b	174c0 <__assert_fail@plt+0x5fe4>
   17fb8:	ldr	r3, [sp, #156]	; 0x9c
   17fbc:	ands	r9, r3, #4
   17fc0:	beq	180f8 <__assert_fail@plt+0x6c1c>
   17fc4:	ldr	r2, [sp, #24]
   17fc8:	add	r3, sl, #2
   17fcc:	cmp	r3, r2
   17fd0:	bcs	17fe4 <__assert_fail@plt+0x6b08>
   17fd4:	ldr	r2, [sp, #48]	; 0x30
   17fd8:	ldrb	r4, [r2, #1]
   17fdc:	cmp	r4, #63	; 0x3f
   17fe0:	beq	18280 <__assert_fail@plt+0x6da4>
   17fe4:	mov	r2, #0
   17fe8:	mov	r8, r2
   17fec:	mov	r5, r2
   17ff0:	mov	r4, #63	; 0x3f
   17ff4:	b	174c0 <__assert_fail@plt+0x5fe4>
   17ff8:	ldr	r3, [sp, #28]
   17ffc:	cmp	r3, #0
   18000:	bne	18324 <__assert_fail@plt+0x6e48>
   18004:	mov	r2, r5
   18008:	mov	r8, r3
   1800c:	mov	r5, #0
   18010:	mov	r4, #63	; 0x3f
   18014:	b	174c0 <__assert_fail@plt+0x5fe4>
   18018:	ldr	r3, [sp, #28]
   1801c:	cmp	r3, #0
   18020:	bne	18324 <__assert_fail@plt+0x6e48>
   18024:	ldr	r2, [sp, #72]	; 0x48
   18028:	adds	r3, fp, #0
   1802c:	movne	r3, #1
   18030:	cmp	r2, #0
   18034:	movne	r3, #0
   18038:	cmp	r3, #0
   1803c:	strne	fp, [sp, #72]	; 0x48
   18040:	movne	fp, #0
   18044:	bne	18080 <__assert_fail@plt+0x6ba4>
   18048:	cmp	fp, r7
   1804c:	movhi	r2, #39	; 0x27
   18050:	ldrhi	r3, [sp, #32]
   18054:	strbhi	r2, [r3, r7]
   18058:	add	r3, r7, #1
   1805c:	cmp	fp, r3
   18060:	movhi	r1, #92	; 0x5c
   18064:	ldrhi	r2, [sp, #32]
   18068:	strbhi	r1, [r2, r3]
   1806c:	add	r3, r7, #2
   18070:	cmp	fp, r3
   18074:	movhi	r1, #39	; 0x27
   18078:	ldrhi	r2, [sp, #32]
   1807c:	strbhi	r1, [r2, r3]
   18080:	ldr	r3, [sp, #28]
   18084:	add	r7, r7, #3
   18088:	mov	r2, r5
   1808c:	mov	r8, r3
   18090:	str	r5, [sp, #68]	; 0x44
   18094:	str	r3, [sp, #40]	; 0x28
   18098:	mov	r4, #39	; 0x27
   1809c:	b	174c0 <__assert_fail@plt+0x5fe4>
   180a0:	ldr	r3, [sp, #56]	; 0x38
   180a4:	ldrb	r3, [r3, #1]
   180a8:	adds	r3, r3, #0
   180ac:	movne	r3, #1
   180b0:	b	17498 <__assert_fail@plt+0x5fbc>
   180b4:	ldr	r5, [sp, #28]
   180b8:	mov	r4, #48	; 0x30
   180bc:	b	174c0 <__assert_fail@plt+0x5fe4>
   180c0:	add	sl, sl, #1
   180c4:	b	16ff0 <__assert_fail@plt+0x5b14>
   180c8:	mov	sl, r3
   180cc:	ldr	r3, [sp, #28]
   180d0:	mov	r8, fp
   180d4:	str	r3, [sp, #44]	; 0x2c
   180d8:	ldr	r3, [sp, #152]	; 0x98
   180dc:	sub	r2, r3, #2
   180e0:	clz	r2, r2
   180e4:	lsr	r2, r2, #5
   180e8:	b	17700 <__assert_fail@plt+0x6224>
   180ec:	str	ip, [sp, #40]	; 0x28
   180f0:	ldr	r5, [sp, #48]	; 0x30
   180f4:	b	17530 <__assert_fail@plt+0x6054>
   180f8:	mov	r2, r9
   180fc:	mov	r8, r9
   18100:	mov	r5, #0
   18104:	mov	r4, #63	; 0x3f
   18108:	b	174c0 <__assert_fail@plt+0x5fe4>
   1810c:	cmp	fp, #0
   18110:	beq	18188 <__assert_fail@plt+0x6cac>
   18114:	ldr	r1, [sp, #32]
   18118:	mov	r3, #34	; 0x22
   1811c:	mov	r2, #1
   18120:	strb	r3, [r1]
   18124:	ldr	r3, [pc, #332]	; 18278 <__assert_fail@plt+0x6d9c>
   18128:	str	r2, [sp, #52]	; 0x34
   1812c:	mov	r7, r2
   18130:	str	r2, [sp, #44]	; 0x2c
   18134:	str	r3, [sp, #64]	; 0x40
   18138:	b	16fe0 <__assert_fail@plt+0x5b04>
   1813c:	ldr	r3, [pc, #300]	; 18270 <__assert_fail@plt+0x6d94>
   18140:	str	r3, [sp, #64]	; 0x40
   18144:	mov	r3, #0
   18148:	str	r3, [sp, #28]
   1814c:	mov	r3, #1
   18150:	str	r3, [sp, #52]	; 0x34
   18154:	mov	r7, r3
   18158:	mov	r3, #2
   1815c:	str	r3, [sp, #152]	; 0x98
   18160:	b	16fe0 <__assert_fail@plt+0x5b04>
   18164:	bl	114ac <abort@plt>
   18168:	ldr	r0, [sp, #56]	; 0x38
   1816c:	bl	11380 <strlen@plt>
   18170:	str	r0, [sp, #24]
   18174:	b	17e4c <__assert_fail@plt+0x6970>
   18178:	mov	r5, r8
   1817c:	mov	r4, #48	; 0x30
   18180:	ldr	r8, [sp, #44]	; 0x2c
   18184:	b	174c0 <__assert_fail@plt+0x5fe4>
   18188:	mov	r3, #1
   1818c:	str	r3, [sp, #52]	; 0x34
   18190:	mov	r7, r3
   18194:	str	r3, [sp, #44]	; 0x2c
   18198:	ldr	r3, [pc, #216]	; 18278 <__assert_fail@plt+0x6d9c>
   1819c:	str	r3, [sp, #64]	; 0x40
   181a0:	b	16fe0 <__assert_fail@plt+0x5b04>
   181a4:	ldr	sl, [sp, #32]
   181a8:	mov	r8, fp
   181ac:	mov	r2, r3
   181b0:	b	17700 <__assert_fail@plt+0x6224>
   181b4:	mov	r3, r5
   181b8:	mov	r5, r2
   181bc:	b	179b8 <__assert_fail@plt+0x64dc>
   181c0:	ldr	r1, [sp, #24]
   181c4:	mov	r2, r5
   181c8:	cmp	r1, r9
   181cc:	mov	ip, r5
   181d0:	ldr	r4, [sp, #80]	; 0x50
   181d4:	ldr	r5, [sp, #92]	; 0x5c
   181d8:	ldr	r6, [sp, #84]	; 0x54
   181dc:	ldr	r7, [sp, #88]	; 0x58
   181e0:	bls	18214 <__assert_fail@plt+0x6d38>
   181e4:	ldrb	r3, [r8]
   181e8:	cmp	r3, #0
   181ec:	bne	18200 <__assert_fail@plt+0x6d24>
   181f0:	b	18218 <__assert_fail@plt+0x6d3c>
   181f4:	ldrb	r3, [r8, #1]!
   181f8:	cmp	r3, #0
   181fc:	beq	18318 <__assert_fail@plt+0x6e3c>
   18200:	add	r2, r2, #1
   18204:	add	r3, sl, r2
   18208:	cmp	r1, r3
   1820c:	bhi	181f4 <__assert_fail@plt+0x6d18>
   18210:	mov	ip, r2
   18214:	mov	r3, #0
   18218:	mov	r2, r3
   1821c:	b	17cb0 <__assert_fail@plt+0x67d4>
   18220:	mov	r3, #0
   18224:	mov	ip, r5
   18228:	ldr	r4, [sp, #80]	; 0x50
   1822c:	ldr	r5, [sp, #92]	; 0x5c
   18230:	ldr	r6, [sp, #84]	; 0x54
   18234:	ldr	r7, [sp, #88]	; 0x58
   18238:	mov	r2, r3
   1823c:	b	17cb0 <__assert_fail@plt+0x67d4>
   18240:	mov	r3, r6
   18244:	mov	ip, r5
   18248:	eor	r5, r3, #1
   1824c:	mov	r2, r6
   18250:	ldr	r4, [sp, #80]	; 0x50
   18254:	ldr	r6, [sp, #84]	; 0x54
   18258:	ldr	r7, [sp, #88]	; 0x58
   1825c:	uxtb	r5, r5
   18260:	b	17cb0 <__assert_fail@plt+0x67d4>
   18264:	ldr	sl, [sp, #32]
   18268:	mov	r8, fp
   1826c:	b	180d4 <__assert_fail@plt+0x6bf8>
   18270:	andeq	ip, r1, r4, asr #26
   18274:	andeq	ip, r1, r8, asr #26
   18278:	andeq	ip, r1, r0, asr #26
   1827c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   18280:	ldr	r2, [sp, #56]	; 0x38
   18284:	ldrb	r1, [r2, r3]
   18288:	sub	r2, r1, #33	; 0x21
   1828c:	uxtb	r2, r2
   18290:	cmp	r2, #29
   18294:	bhi	18334 <__assert_fail@plt+0x6e58>
   18298:	ldr	r0, [pc, #-36]	; 1827c <__assert_fail@plt+0x6da0>
   1829c:	mov	ip, #1
   182a0:	ands	r2, r0, ip, lsl r2
   182a4:	beq	18344 <__assert_fail@plt+0x6e68>
   182a8:	ldr	r2, [sp, #28]
   182ac:	cmp	r2, #0
   182b0:	bne	18444 <__assert_fail@plt+0x6f68>
   182b4:	cmp	fp, r7
   182b8:	ldr	r8, [sp, #28]
   182bc:	ldrhi	r2, [sp, #32]
   182c0:	mov	sl, r3
   182c4:	mov	r5, r8
   182c8:	strbhi	r4, [r2, r7]
   182cc:	add	r2, r7, #1
   182d0:	cmp	fp, r2
   182d4:	movhi	r0, #34	; 0x22
   182d8:	ldrhi	ip, [sp, #32]
   182dc:	mov	r4, r1
   182e0:	strbhi	r0, [ip, r2]
   182e4:	add	r2, r7, #2
   182e8:	cmp	fp, r2
   182ec:	movhi	r0, #34	; 0x22
   182f0:	ldrhi	ip, [sp, #32]
   182f4:	strbhi	r0, [ip, r2]
   182f8:	add	r2, r7, #3
   182fc:	cmp	fp, r2
   18300:	movhi	r0, #63	; 0x3f
   18304:	ldrhi	ip, [sp, #32]
   18308:	add	r7, r7, #4
   1830c:	strbhi	r0, [ip, r2]
   18310:	mov	r2, r8
   18314:	b	174c0 <__assert_fail@plt+0x5fe4>
   18318:	mov	ip, r2
   1831c:	mov	r2, r3
   18320:	b	17cb0 <__assert_fail@plt+0x67d4>
   18324:	ldr	sl, [sp, #32]
   18328:	mov	r8, fp
   1832c:	ldr	r2, [sp, #28]
   18330:	b	17700 <__assert_fail@plt+0x6224>
   18334:	mov	r2, #0
   18338:	mov	r8, r2
   1833c:	mov	r5, r2
   18340:	b	174c0 <__assert_fail@plt+0x5fe4>
   18344:	mov	r8, r2
   18348:	mov	r5, #0
   1834c:	b	174c0 <__assert_fail@plt+0x5fe4>
   18350:	ldr	r1, [sp, #152]	; 0x98
   18354:	bl	16e1c <__assert_fail@plt+0x5940>
   18358:	str	r0, [sp, #168]	; 0xa8
   1835c:	b	1737c <__assert_fail@plt+0x5ea0>
   18360:	ldr	r1, [sp, #152]	; 0x98
   18364:	bl	16e1c <__assert_fail@plt+0x5940>
   18368:	str	r0, [sp, #164]	; 0xa4
   1836c:	b	1735c <__assert_fail@plt+0x5e80>
   18370:	ldr	r7, [sp, #28]
   18374:	b	173bc <__assert_fail@plt+0x5ee0>
   18378:	ldr	sl, [sp, #32]
   1837c:	ldr	r2, [sp, #68]	; 0x44
   18380:	mov	r8, fp
   18384:	mov	fp, r7
   18388:	ldr	r3, [sp, #64]	; 0x40
   1838c:	cmp	r3, #0
   18390:	moveq	r2, #0
   18394:	andne	r2, r2, #1
   18398:	cmp	r2, #0
   1839c:	beq	183c8 <__assert_fail@plt+0x6eec>
   183a0:	mov	r2, r3
   183a4:	ldrb	r3, [r3]
   183a8:	cmp	r3, #0
   183ac:	beq	183c8 <__assert_fail@plt+0x6eec>
   183b0:	cmp	r8, fp
   183b4:	strbhi	r3, [sl, fp]
   183b8:	ldrb	r3, [r2, #1]!
   183bc:	add	fp, fp, #1
   183c0:	cmp	r3, #0
   183c4:	bne	183b0 <__assert_fail@plt+0x6ed4>
   183c8:	cmp	r8, fp
   183cc:	movhi	r3, #0
   183d0:	strbhi	r3, [sl, fp]
   183d4:	b	1775c <__assert_fail@plt+0x6280>
   183d8:	ldr	r3, [sp, #168]	; 0xa8
   183dc:	ldr	sl, [sp, #32]
   183e0:	str	r3, [sp, #16]
   183e4:	ldr	r3, [sp, #164]	; 0xa4
   183e8:	mov	ip, #5
   183ec:	str	r3, [sp, #12]
   183f0:	ldr	r3, [sp, #160]	; 0xa0
   183f4:	ldr	r2, [sp, #56]	; 0x38
   183f8:	str	r3, [sp, #8]
   183fc:	ldr	r3, [sp, #156]	; 0x9c
   18400:	ldr	r1, [sp, #72]	; 0x48
   18404:	str	r3, [sp, #4]
   18408:	mov	r0, sl
   1840c:	ldr	r3, [sp, #24]
   18410:	str	ip, [sp]
   18414:	bl	16f3c <__assert_fail@plt+0x5a60>
   18418:	mov	fp, r0
   1841c:	b	1775c <__assert_fail@plt+0x6280>
   18420:	mov	r8, fp
   18424:	ldr	sl, [sp, #32]
   18428:	mov	fp, r7
   1842c:	mov	r2, r3
   18430:	b	18388 <__assert_fail@plt+0x6eac>
   18434:	mov	r8, fp
   18438:	ldr	sl, [sp, #32]
   1843c:	mov	fp, r7
   18440:	b	18388 <__assert_fail@plt+0x6eac>
   18444:	ldr	sl, [sp, #32]
   18448:	mov	r8, fp
   1844c:	b	17718 <__assert_fail@plt+0x623c>
   18450:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18454:	sub	sp, sp, #52	; 0x34
   18458:	mov	r4, r0
   1845c:	mov	r5, r3
   18460:	mov	sl, r1
   18464:	mov	fp, r2
   18468:	bl	113a4 <__errno_location@plt>
   1846c:	ldr	r7, [pc, #412]	; 18610 <__assert_fail@plt+0x7134>
   18470:	cmn	r4, #-2147483647	; 0x80000001
   18474:	ldr	r6, [r7]
   18478:	mov	r8, r0
   1847c:	movne	r0, #0
   18480:	moveq	r0, #1
   18484:	ldr	r3, [r8]
   18488:	orrs	r0, r0, r4, lsr #31
   1848c:	str	r3, [sp, #24]
   18490:	bne	1860c <__assert_fail@plt+0x7130>
   18494:	ldr	r2, [r7, #4]
   18498:	cmp	r4, r2
   1849c:	blt	184fc <__assert_fail@plt+0x7020>
   184a0:	add	r9, r7, #8
   184a4:	cmp	r6, r9
   184a8:	str	r2, [sp, #44]	; 0x2c
   184ac:	beq	185dc <__assert_fail@plt+0x7100>
   184b0:	mov	r3, #8
   184b4:	sub	r2, r4, r2
   184b8:	mov	r0, r6
   184bc:	str	r3, [sp]
   184c0:	add	r2, r2, #1
   184c4:	mvn	r3, #-2147483648	; 0x80000000
   184c8:	add	r1, sp, #44	; 0x2c
   184cc:	bl	1939c <__assert_fail@plt+0x7ec0>
   184d0:	mov	r6, r0
   184d4:	str	r0, [r7]
   184d8:	ldr	r0, [r7, #4]
   184dc:	ldr	r2, [sp, #44]	; 0x2c
   184e0:	mov	r1, #0
   184e4:	sub	r2, r2, r0
   184e8:	add	r0, r6, r0, lsl #3
   184ec:	lsl	r2, r2, #3
   184f0:	bl	113d4 <memset@plt>
   184f4:	ldr	r3, [sp, #44]	; 0x2c
   184f8:	str	r3, [r7, #4]
   184fc:	add	r3, r6, r4, lsl #3
   18500:	ldr	r1, [r5, #4]
   18504:	ldr	r7, [r3, #4]
   18508:	ldr	r9, [r6, r4, lsl #3]
   1850c:	ldr	r2, [r5, #40]	; 0x28
   18510:	ldr	ip, [r5, #44]	; 0x2c
   18514:	add	r0, r5, #8
   18518:	str	r3, [sp, #28]
   1851c:	ldr	r3, [r5]
   18520:	orr	r1, r1, #1
   18524:	mov	lr, r0
   18528:	str	r1, [sp, #32]
   1852c:	str	r0, [sp, #36]	; 0x24
   18530:	str	r1, [sp, #4]
   18534:	str	r2, [sp, #12]
   18538:	str	r3, [sp]
   1853c:	mov	r0, r7
   18540:	mov	r1, r9
   18544:	str	ip, [sp, #16]
   18548:	str	lr, [sp, #8]
   1854c:	mov	r3, fp
   18550:	mov	r2, sl
   18554:	bl	16f3c <__assert_fail@plt+0x5a60>
   18558:	cmp	r9, r0
   1855c:	bhi	185c8 <__assert_fail@plt+0x70ec>
   18560:	ldr	r3, [pc, #172]	; 18614 <__assert_fail@plt+0x7138>
   18564:	add	r9, r0, #1
   18568:	cmp	r7, r3
   1856c:	str	r9, [r6, r4, lsl #3]
   18570:	beq	1857c <__assert_fail@plt+0x70a0>
   18574:	mov	r0, r7
   18578:	bl	1a3b4 <__assert_fail@plt+0x8ed8>
   1857c:	mov	r0, r9
   18580:	bl	19238 <__assert_fail@plt+0x7d5c>
   18584:	ldr	lr, [sp, #28]
   18588:	ldr	ip, [r5, #44]	; 0x2c
   1858c:	ldr	r4, [r5, #40]	; 0x28
   18590:	mov	r3, fp
   18594:	mov	r2, sl
   18598:	mov	r1, r9
   1859c:	str	r0, [lr, #4]
   185a0:	ldr	lr, [r5]
   185a4:	ldr	r5, [sp, #36]	; 0x24
   185a8:	str	ip, [sp, #16]
   185ac:	str	r5, [sp, #8]
   185b0:	ldr	r5, [sp, #32]
   185b4:	str	r4, [sp, #12]
   185b8:	str	r5, [sp, #4]
   185bc:	str	lr, [sp]
   185c0:	mov	r7, r0
   185c4:	bl	16f3c <__assert_fail@plt+0x5a60>
   185c8:	ldr	r3, [sp, #24]
   185cc:	mov	r0, r7
   185d0:	str	r3, [r8]
   185d4:	add	sp, sp, #52	; 0x34
   185d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185dc:	mov	r3, #8
   185e0:	sub	r2, r4, r2
   185e4:	str	r3, [sp]
   185e8:	add	r1, sp, #44	; 0x2c
   185ec:	add	r2, r2, #1
   185f0:	mvn	r3, #-2147483648	; 0x80000000
   185f4:	bl	1939c <__assert_fail@plt+0x7ec0>
   185f8:	mov	r6, r0
   185fc:	ldm	r9, {r0, r1}
   18600:	str	r6, [r7]
   18604:	stm	r6, {r0, r1}
   18608:	b	184d8 <__assert_fail@plt+0x6ffc>
   1860c:	bl	114ac <abort@plt>
   18610:	andeq	lr, r2, r0, lsl #3
   18614:	andeq	lr, r2, r8, asr r4
   18618:	push	{r4, r5, r6, lr}
   1861c:	mov	r5, r0
   18620:	bl	113a4 <__errno_location@plt>
   18624:	cmp	r5, #0
   18628:	mov	r1, #48	; 0x30
   1862c:	mov	r4, r0
   18630:	ldr	r0, [pc, #16]	; 18648 <__assert_fail@plt+0x716c>
   18634:	ldr	r6, [r4]
   18638:	movne	r0, r5
   1863c:	bl	19698 <__assert_fail@plt+0x81bc>
   18640:	str	r6, [r4]
   18644:	pop	{r4, r5, r6, pc}
   18648:	andeq	lr, r2, r8, asr r5
   1864c:	ldr	r3, [pc, #12]	; 18660 <__assert_fail@plt+0x7184>
   18650:	cmp	r0, #0
   18654:	moveq	r0, r3
   18658:	ldr	r0, [r0]
   1865c:	bx	lr
   18660:	andeq	lr, r2, r8, asr r5
   18664:	ldr	r3, [pc, #12]	; 18678 <__assert_fail@plt+0x719c>
   18668:	cmp	r0, #0
   1866c:	moveq	r0, r3
   18670:	str	r1, [r0]
   18674:	bx	lr
   18678:	andeq	lr, r2, r8, asr r5
   1867c:	ldr	r3, [pc, #52]	; 186b8 <__assert_fail@plt+0x71dc>
   18680:	cmp	r0, #0
   18684:	moveq	r0, r3
   18688:	add	r3, r0, #8
   1868c:	push	{lr}		; (str lr, [sp, #-4]!)
   18690:	lsr	lr, r1, #5
   18694:	and	r1, r1, #31
   18698:	ldr	ip, [r3, lr, lsl #2]
   1869c:	lsr	r0, ip, r1
   186a0:	eor	r2, r2, r0
   186a4:	and	r2, r2, #1
   186a8:	and	r0, r0, #1
   186ac:	eor	r1, ip, r2, lsl r1
   186b0:	str	r1, [r3, lr, lsl #2]
   186b4:	pop	{pc}		; (ldr pc, [sp], #4)
   186b8:	andeq	lr, r2, r8, asr r5
   186bc:	ldr	r3, [pc, #16]	; 186d4 <__assert_fail@plt+0x71f8>
   186c0:	cmp	r0, #0
   186c4:	movne	r3, r0
   186c8:	ldr	r0, [r3, #4]
   186cc:	str	r1, [r3, #4]
   186d0:	bx	lr
   186d4:	andeq	lr, r2, r8, asr r5
   186d8:	ldr	r3, [pc, #44]	; 1870c <__assert_fail@plt+0x7230>
   186dc:	cmp	r0, #0
   186e0:	moveq	r0, r3
   186e4:	mov	ip, #10
   186e8:	cmp	r2, #0
   186ec:	cmpne	r1, #0
   186f0:	str	ip, [r0]
   186f4:	beq	18704 <__assert_fail@plt+0x7228>
   186f8:	str	r1, [r0, #40]	; 0x28
   186fc:	str	r2, [r0, #44]	; 0x2c
   18700:	bx	lr
   18704:	push	{r4, lr}
   18708:	bl	114ac <abort@plt>
   1870c:	andeq	lr, r2, r8, asr r5
   18710:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18714:	sub	sp, sp, #24
   18718:	ldr	ip, [pc, #108]	; 1878c <__assert_fail@plt+0x72b0>
   1871c:	ldr	r4, [sp, #56]	; 0x38
   18720:	mov	r9, r2
   18724:	cmp	r4, #0
   18728:	moveq	r4, ip
   1872c:	mov	sl, r3
   18730:	mov	r7, r0
   18734:	mov	r8, r1
   18738:	bl	113a4 <__errno_location@plt>
   1873c:	ldr	r3, [r4, #44]	; 0x2c
   18740:	mov	r1, r8
   18744:	ldr	r6, [r0]
   18748:	str	r3, [sp, #16]
   1874c:	ldr	r2, [r4, #40]	; 0x28
   18750:	add	r3, r4, #8
   18754:	str	r3, [sp, #8]
   18758:	str	r2, [sp, #12]
   1875c:	ldr	r2, [r4, #4]
   18760:	mov	r5, r0
   18764:	str	r2, [sp, #4]
   18768:	ldr	ip, [r4]
   1876c:	mov	r3, sl
   18770:	mov	r2, r9
   18774:	mov	r0, r7
   18778:	str	ip, [sp]
   1877c:	bl	16f3c <__assert_fail@plt+0x5a60>
   18780:	str	r6, [r5]
   18784:	add	sp, sp, #24
   18788:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1878c:	andeq	lr, r2, r8, asr r5
   18790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18794:	cmp	r3, #0
   18798:	sub	sp, sp, #44	; 0x2c
   1879c:	ldr	r4, [pc, #192]	; 18864 <__assert_fail@plt+0x7388>
   187a0:	mov	r6, r2
   187a4:	movne	r4, r3
   187a8:	mov	r9, r1
   187ac:	mov	r8, r0
   187b0:	bl	113a4 <__errno_location@plt>
   187b4:	ldr	r3, [r4, #44]	; 0x2c
   187b8:	ldr	r5, [r4, #4]
   187bc:	add	sl, r4, #8
   187c0:	cmp	r6, #0
   187c4:	orreq	r5, r5, #1
   187c8:	mov	r1, #0
   187cc:	ldr	r2, [r0]
   187d0:	str	r3, [sp, #16]
   187d4:	ldr	r3, [r4, #40]	; 0x28
   187d8:	stmib	sp, {r5, sl}
   187dc:	str	r3, [sp, #12]
   187e0:	ldr	r3, [r4]
   187e4:	mov	r7, r0
   187e8:	str	r2, [sp, #28]
   187ec:	str	r3, [sp]
   187f0:	mov	r2, r8
   187f4:	mov	r3, r9
   187f8:	mov	r0, r1
   187fc:	bl	16f3c <__assert_fail@plt+0x5a60>
   18800:	add	r1, r0, #1
   18804:	mov	fp, r0
   18808:	mov	r0, r1
   1880c:	str	r1, [sp, #36]	; 0x24
   18810:	bl	19238 <__assert_fail@plt+0x7d5c>
   18814:	ldr	r3, [r4, #44]	; 0x2c
   18818:	mov	r2, r8
   1881c:	str	r3, [sp, #16]
   18820:	ldr	r3, [r4, #40]	; 0x28
   18824:	str	r5, [sp, #4]
   18828:	str	r3, [sp, #12]
   1882c:	str	sl, [sp, #8]
   18830:	ldr	ip, [r4]
   18834:	ldr	r1, [sp, #36]	; 0x24
   18838:	mov	r3, r9
   1883c:	str	ip, [sp]
   18840:	str	r0, [sp, #32]
   18844:	bl	16f3c <__assert_fail@plt+0x5a60>
   18848:	ldr	r2, [sp, #28]
   1884c:	cmp	r6, #0
   18850:	str	r2, [r7]
   18854:	ldr	r0, [sp, #32]
   18858:	strne	fp, [r6]
   1885c:	add	sp, sp, #44	; 0x2c
   18860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18864:	andeq	lr, r2, r8, asr r5
   18868:	mov	r3, r2
   1886c:	mov	r2, #0
   18870:	b	18790 <__assert_fail@plt+0x72b4>
   18874:	push	{r4, r5, r6, r7, r8, lr}
   18878:	ldr	r6, [pc, #116]	; 188f4 <__assert_fail@plt+0x7418>
   1887c:	ldr	r3, [r6, #4]
   18880:	ldr	r7, [r6]
   18884:	cmp	r3, #1
   18888:	movgt	r5, r7
   1888c:	movgt	r4, #1
   18890:	ble	188b0 <__assert_fail@plt+0x73d4>
   18894:	ldr	r0, [r5, #12]
   18898:	bl	1a3b4 <__assert_fail@plt+0x8ed8>
   1889c:	ldr	r3, [r6, #4]
   188a0:	add	r4, r4, #1
   188a4:	cmp	r3, r4
   188a8:	add	r5, r5, #8
   188ac:	bgt	18894 <__assert_fail@plt+0x73b8>
   188b0:	ldr	r0, [r7, #4]
   188b4:	ldr	r4, [pc, #60]	; 188f8 <__assert_fail@plt+0x741c>
   188b8:	cmp	r0, r4
   188bc:	beq	188d0 <__assert_fail@plt+0x73f4>
   188c0:	bl	1a3b4 <__assert_fail@plt+0x8ed8>
   188c4:	mov	r3, #256	; 0x100
   188c8:	str	r4, [r6, #12]
   188cc:	str	r3, [r6, #8]
   188d0:	ldr	r4, [pc, #36]	; 188fc <__assert_fail@plt+0x7420>
   188d4:	cmp	r7, r4
   188d8:	beq	188e8 <__assert_fail@plt+0x740c>
   188dc:	mov	r0, r7
   188e0:	bl	1a3b4 <__assert_fail@plt+0x8ed8>
   188e4:	str	r4, [r6]
   188e8:	mov	r3, #1
   188ec:	str	r3, [r6, #4]
   188f0:	pop	{r4, r5, r6, r7, r8, pc}
   188f4:	andeq	lr, r2, r0, lsl #3
   188f8:	andeq	lr, r2, r8, asr r4
   188fc:	andeq	lr, r2, r8, lsl #3
   18900:	ldr	r3, [pc, #4]	; 1890c <__assert_fail@plt+0x7430>
   18904:	mvn	r2, #0
   18908:	b	18450 <__assert_fail@plt+0x6f74>
   1890c:	andeq	lr, r2, r8, asr r5
   18910:	ldr	r3, [pc]	; 18918 <__assert_fail@plt+0x743c>
   18914:	b	18450 <__assert_fail@plt+0x6f74>
   18918:	andeq	lr, r2, r8, asr r5
   1891c:	mov	r1, r0
   18920:	ldr	r3, [pc, #8]	; 18930 <__assert_fail@plt+0x7454>
   18924:	mvn	r2, #0
   18928:	mov	r0, #0
   1892c:	b	18450 <__assert_fail@plt+0x6f74>
   18930:	andeq	lr, r2, r8, asr r5
   18934:	mov	r2, r1
   18938:	ldr	r3, [pc, #8]	; 18948 <__assert_fail@plt+0x746c>
   1893c:	mov	r1, r0
   18940:	mov	r0, #0
   18944:	b	18450 <__assert_fail@plt+0x6f74>
   18948:	andeq	lr, r2, r8, asr r5
   1894c:	push	{r4, r5, lr}
   18950:	sub	sp, sp, #52	; 0x34
   18954:	mov	r5, r2
   18958:	mov	r4, r0
   1895c:	mov	r0, sp
   18960:	bl	16dec <__assert_fail@plt+0x5910>
   18964:	mov	r3, sp
   18968:	mov	r1, r5
   1896c:	mov	r0, r4
   18970:	mvn	r2, #0
   18974:	bl	18450 <__assert_fail@plt+0x6f74>
   18978:	add	sp, sp, #52	; 0x34
   1897c:	pop	{r4, r5, pc}
   18980:	push	{r4, r5, r6, lr}
   18984:	sub	sp, sp, #48	; 0x30
   18988:	mov	r5, r2
   1898c:	mov	r6, r3
   18990:	mov	r4, r0
   18994:	mov	r0, sp
   18998:	bl	16dec <__assert_fail@plt+0x5910>
   1899c:	mov	r3, sp
   189a0:	mov	r2, r6
   189a4:	mov	r1, r5
   189a8:	mov	r0, r4
   189ac:	bl	18450 <__assert_fail@plt+0x6f74>
   189b0:	add	sp, sp, #48	; 0x30
   189b4:	pop	{r4, r5, r6, pc}
   189b8:	mov	r2, r1
   189bc:	mov	r1, r0
   189c0:	mov	r0, #0
   189c4:	b	1894c <__assert_fail@plt+0x7470>
   189c8:	mov	r3, r2
   189cc:	mov	r2, r1
   189d0:	mov	r1, r0
   189d4:	mov	r0, #0
   189d8:	b	18980 <__assert_fail@plt+0x74a4>
   189dc:	push	{r4, r5, r6, r7, r8, lr}
   189e0:	mov	r7, r0
   189e4:	ldr	lr, [pc, #100]	; 18a50 <__assert_fail@plt+0x7574>
   189e8:	mov	r8, r1
   189ec:	mov	r4, r2
   189f0:	ldm	lr!, {r0, r1, r2, r3}
   189f4:	sub	sp, sp, #48	; 0x30
   189f8:	mov	ip, sp
   189fc:	lsr	r5, r4, #5
   18a00:	stmia	ip!, {r0, r1, r2, r3}
   18a04:	add	r6, sp, #8
   18a08:	ldm	lr!, {r0, r1, r2, r3}
   18a0c:	and	r4, r4, #31
   18a10:	stmia	ip!, {r0, r1, r2, r3}
   18a14:	ldm	lr, {r0, r1, r2, r3}
   18a18:	stm	ip, {r0, r1, r2, r3}
   18a1c:	mov	r2, r8
   18a20:	ldr	lr, [r6, r5, lsl #2]
   18a24:	mov	r1, r7
   18a28:	mov	r3, sp
   18a2c:	lsr	ip, lr, r4
   18a30:	eor	ip, ip, #1
   18a34:	and	ip, ip, #1
   18a38:	mov	r0, #0
   18a3c:	eor	r4, lr, ip, lsl r4
   18a40:	str	r4, [r6, r5, lsl #2]
   18a44:	bl	18450 <__assert_fail@plt+0x6f74>
   18a48:	add	sp, sp, #48	; 0x30
   18a4c:	pop	{r4, r5, r6, r7, r8, pc}
   18a50:	andeq	lr, r2, r8, asr r5
   18a54:	mov	r2, r1
   18a58:	mvn	r1, #0
   18a5c:	b	189dc <__assert_fail@plt+0x7500>
   18a60:	mov	r2, #58	; 0x3a
   18a64:	mvn	r1, #0
   18a68:	b	189dc <__assert_fail@plt+0x7500>
   18a6c:	mov	r2, #58	; 0x3a
   18a70:	b	189dc <__assert_fail@plt+0x7500>
   18a74:	push	{r4, r5, r6, r7, lr}
   18a78:	sub	sp, sp, #100	; 0x64
   18a7c:	mov	r6, r0
   18a80:	mov	r0, sp
   18a84:	mov	r7, r2
   18a88:	bl	16dec <__assert_fail@plt+0x5910>
   18a8c:	mov	ip, sp
   18a90:	add	lr, sp, #48	; 0x30
   18a94:	ldm	ip!, {r0, r1, r2, r3}
   18a98:	stmia	lr!, {r0, r1, r2, r3}
   18a9c:	ldm	ip!, {r0, r1, r2, r3}
   18aa0:	ldr	r5, [sp, #60]	; 0x3c
   18aa4:	stmia	lr!, {r0, r1, r2, r3}
   18aa8:	mvn	r4, r5
   18aac:	ldm	ip, {r0, r1, r2, r3}
   18ab0:	and	ip, r4, #67108864	; 0x4000000
   18ab4:	eor	ip, ip, r5
   18ab8:	str	ip, [sp, #60]	; 0x3c
   18abc:	stm	lr, {r0, r1, r2, r3}
   18ac0:	mov	r1, r7
   18ac4:	mov	r0, r6
   18ac8:	add	r3, sp, #48	; 0x30
   18acc:	mvn	r2, #0
   18ad0:	bl	18450 <__assert_fail@plt+0x6f74>
   18ad4:	add	sp, sp, #100	; 0x64
   18ad8:	pop	{r4, r5, r6, r7, pc}
   18adc:	push	{r4, r5, r6, r7, r8, lr}
   18ae0:	mov	r5, r1
   18ae4:	ldr	lr, [pc, #100]	; 18b50 <__assert_fail@plt+0x7674>
   18ae8:	mov	r4, r2
   18aec:	mov	r7, r0
   18af0:	mov	r8, r3
   18af4:	ldm	lr!, {r0, r1, r2, r3}
   18af8:	sub	sp, sp, #48	; 0x30
   18afc:	mov	ip, sp
   18b00:	mov	r6, #10
   18b04:	stmia	ip!, {r0, r1, r2, r3}
   18b08:	cmp	r4, #0
   18b0c:	cmpne	r5, #0
   18b10:	ldm	lr!, {r0, r1, r2, r3}
   18b14:	str	r6, [sp]
   18b18:	stmia	ip!, {r0, r1, r2, r3}
   18b1c:	ldm	lr, {r0, r1, r2, r3}
   18b20:	stm	ip, {r0, r1, r2, r3}
   18b24:	beq	18b4c <__assert_fail@plt+0x7670>
   18b28:	mov	r3, sp
   18b2c:	mov	r1, r8
   18b30:	mov	r0, r7
   18b34:	ldr	r2, [sp, #72]	; 0x48
   18b38:	str	r5, [sp, #40]	; 0x28
   18b3c:	str	r4, [sp, #44]	; 0x2c
   18b40:	bl	18450 <__assert_fail@plt+0x6f74>
   18b44:	add	sp, sp, #48	; 0x30
   18b48:	pop	{r4, r5, r6, r7, r8, pc}
   18b4c:	bl	114ac <abort@plt>
   18b50:	andeq	lr, r2, r8, asr r5
   18b54:	push	{lr}		; (str lr, [sp, #-4]!)
   18b58:	sub	sp, sp, #12
   18b5c:	mvn	ip, #0
   18b60:	str	ip, [sp]
   18b64:	bl	18adc <__assert_fail@plt+0x7600>
   18b68:	add	sp, sp, #12
   18b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   18b70:	push	{lr}		; (str lr, [sp, #-4]!)
   18b74:	sub	sp, sp, #12
   18b78:	mvn	ip, #0
   18b7c:	mov	r3, r2
   18b80:	str	ip, [sp]
   18b84:	mov	r2, r1
   18b88:	mov	r1, r0
   18b8c:	mov	r0, #0
   18b90:	bl	18adc <__assert_fail@plt+0x7600>
   18b94:	add	sp, sp, #12
   18b98:	pop	{pc}		; (ldr pc, [sp], #4)
   18b9c:	push	{lr}		; (str lr, [sp, #-4]!)
   18ba0:	sub	sp, sp, #12
   18ba4:	str	r3, [sp]
   18ba8:	mov	r3, r2
   18bac:	mov	r2, r1
   18bb0:	mov	r1, r0
   18bb4:	mov	r0, #0
   18bb8:	bl	18adc <__assert_fail@plt+0x7600>
   18bbc:	add	sp, sp, #12
   18bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   18bc4:	ldr	r3, [pc]	; 18bcc <__assert_fail@plt+0x76f0>
   18bc8:	b	18450 <__assert_fail@plt+0x6f74>
   18bcc:	muleq	r2, r0, r1
   18bd0:	mov	r2, r1
   18bd4:	ldr	r3, [pc, #8]	; 18be4 <__assert_fail@plt+0x7708>
   18bd8:	mov	r1, r0
   18bdc:	mov	r0, #0
   18be0:	b	18450 <__assert_fail@plt+0x6f74>
   18be4:	muleq	r2, r0, r1
   18be8:	ldr	r3, [pc, #4]	; 18bf4 <__assert_fail@plt+0x7718>
   18bec:	mvn	r2, #0
   18bf0:	b	18450 <__assert_fail@plt+0x6f74>
   18bf4:	muleq	r2, r0, r1
   18bf8:	mov	r1, r0
   18bfc:	ldr	r3, [pc, #8]	; 18c0c <__assert_fail@plt+0x7730>
   18c00:	mvn	r2, #0
   18c04:	mov	r0, #0
   18c08:	b	18450 <__assert_fail@plt+0x6f74>
   18c0c:	muleq	r2, r0, r1
   18c10:	push	{r4, r5, r6, r7, r8, lr}
   18c14:	sub	sp, sp, #8
   18c18:	mov	r6, r0
   18c1c:	mov	r7, r1
   18c20:	ldr	r0, [sp, #32]
   18c24:	ldr	r1, [sp, #36]	; 0x24
   18c28:	mov	r5, r2
   18c2c:	mov	r8, r3
   18c30:	bl	19e9c <__assert_fail@plt+0x89c0>
   18c34:	subs	r4, r0, #0
   18c38:	beq	18c98 <__assert_fail@plt+0x77bc>
   18c3c:	cmp	r5, #0
   18c40:	beq	18c74 <__assert_fail@plt+0x7798>
   18c44:	ldr	ip, [pc, #120]	; 18cc4 <__assert_fail@plt+0x77e8>
   18c48:	mov	r0, r6
   18c4c:	str	r4, [sp, #4]
   18c50:	mov	r3, r8
   18c54:	mov	r2, r5
   18c58:	mov	r1, r7
   18c5c:	str	ip, [sp]
   18c60:	bl	11308 <error_at_line@plt>
   18c64:	mov	r0, r4
   18c68:	add	sp, sp, #8
   18c6c:	pop	{r4, r5, r6, r7, r8, lr}
   18c70:	b	1a3b4 <__assert_fail@plt+0x8ed8>
   18c74:	mov	r0, r6
   18c78:	mov	r1, r7
   18c7c:	mov	r3, r4
   18c80:	ldr	r2, [pc, #60]	; 18cc4 <__assert_fail@plt+0x77e8>
   18c84:	bl	112d8 <error@plt>
   18c88:	mov	r0, r4
   18c8c:	add	sp, sp, #8
   18c90:	pop	{r4, r5, r6, r7, r8, lr}
   18c94:	b	1a3b4 <__assert_fail@plt+0x8ed8>
   18c98:	bl	113a4 <__errno_location@plt>
   18c9c:	mov	r2, #5
   18ca0:	ldr	r1, [pc, #32]	; 18cc8 <__assert_fail@plt+0x77ec>
   18ca4:	ldr	r5, [r0]
   18ca8:	mov	r0, r4
   18cac:	bl	11230 <dcgettext@plt>
   18cb0:	mov	r1, r5
   18cb4:	mov	r2, r0
   18cb8:	mov	r0, r4
   18cbc:	bl	112d8 <error@plt>
   18cc0:	bl	114ac <abort@plt>
   18cc4:	andeq	fp, r1, r4, asr #14
   18cc8:			; <UNDEFINED> instruction: 0x0001cdb0
   18ccc:	push	{lr}		; (str lr, [sp, #-4]!)
   18cd0:	sub	sp, sp, #12
   18cd4:	str	r3, [sp, #4]
   18cd8:	mov	r3, #0
   18cdc:	str	r2, [sp]
   18ce0:	mov	r2, r3
   18ce4:	bl	18c10 <__assert_fail@plt+0x7734>
   18ce8:	add	sp, sp, #12
   18cec:	pop	{pc}		; (ldr pc, [sp], #4)
   18cf0:	push	{r4, r5, r6, lr}
   18cf4:	sub	sp, sp, #32
   18cf8:	cmp	r1, #0
   18cfc:	mov	r4, r0
   18d00:	ldr	r5, [sp, #48]	; 0x30
   18d04:	ldr	r6, [sp, #52]	; 0x34
   18d08:	beq	19020 <__assert_fail@plt+0x7b44>
   18d0c:	stm	sp, {r2, r3}
   18d10:	mov	r3, r1
   18d14:	ldr	r2, [pc, #808]	; 19044 <__assert_fail@plt+0x7b68>
   18d18:	mov	r1, #1
   18d1c:	bl	11404 <__fprintf_chk@plt>
   18d20:	mov	r2, #5
   18d24:	ldr	r1, [pc, #796]	; 19048 <__assert_fail@plt+0x7b6c>
   18d28:	mov	r0, #0
   18d2c:	bl	11230 <dcgettext@plt>
   18d30:	ldr	r3, [pc, #788]	; 1904c <__assert_fail@plt+0x7b70>
   18d34:	ldr	r2, [pc, #788]	; 19050 <__assert_fail@plt+0x7b74>
   18d38:	str	r3, [sp]
   18d3c:	mov	r1, #1
   18d40:	mov	r3, r0
   18d44:	mov	r0, r4
   18d48:	bl	11404 <__fprintf_chk@plt>
   18d4c:	mov	r1, r4
   18d50:	mov	r0, #10
   18d54:	bl	11224 <fputc_unlocked@plt>
   18d58:	mov	r2, #5
   18d5c:	ldr	r1, [pc, #752]	; 19054 <__assert_fail@plt+0x7b78>
   18d60:	mov	r0, #0
   18d64:	bl	11230 <dcgettext@plt>
   18d68:	mov	r1, #1
   18d6c:	ldr	r3, [pc, #740]	; 19058 <__assert_fail@plt+0x7b7c>
   18d70:	mov	r2, r0
   18d74:	mov	r0, r4
   18d78:	bl	11404 <__fprintf_chk@plt>
   18d7c:	mov	r1, r4
   18d80:	mov	r0, #10
   18d84:	bl	11224 <fputc_unlocked@plt>
   18d88:	cmp	r6, #9
   18d8c:	ldrls	pc, [pc, r6, lsl #2]
   18d90:	b	19038 <__assert_fail@plt+0x7b5c>
   18d94:	andeq	r8, r1, r8, lsl lr
   18d98:	andeq	r8, r1, r0, lsr #28
   18d9c:	andeq	r8, r1, ip, asr #28
   18da0:	andeq	r8, r1, r0, lsl #29
   18da4:			; <UNDEFINED> instruction: 0x00018ebc
   18da8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18dac:	andeq	r8, r1, r4, lsr pc
   18db0:	andeq	r8, r1, r8, ror pc
   18db4:	andeq	r8, r1, r8, asr #31
   18db8:			; <UNDEFINED> instruction: 0x00018dbc
   18dbc:	ldr	r1, [pc, #664]	; 1905c <__assert_fail@plt+0x7b80>
   18dc0:	mov	r2, #5
   18dc4:	mov	r0, #0
   18dc8:	bl	11230 <dcgettext@plt>
   18dcc:	ldr	ip, [r5, #32]
   18dd0:	ldr	r1, [r5, #28]
   18dd4:	ldr	r2, [r5, #24]
   18dd8:	ldr	r3, [r5]
   18ddc:	ldr	r6, [r5, #20]
   18de0:	str	ip, [sp, #28]
   18de4:	ldr	lr, [r5, #16]
   18de8:	str	r1, [sp, #24]
   18dec:	ldr	ip, [r5, #12]
   18df0:	str	r2, [sp, #20]
   18df4:	ldr	r1, [r5, #8]
   18df8:	ldr	r2, [r5, #4]
   18dfc:	str	r6, [sp, #16]
   18e00:	stmib	sp, {r1, ip, lr}
   18e04:	mov	r1, #1
   18e08:	str	r2, [sp]
   18e0c:	mov	r2, r0
   18e10:	mov	r0, r4
   18e14:	bl	11404 <__fprintf_chk@plt>
   18e18:	add	sp, sp, #32
   18e1c:	pop	{r4, r5, r6, pc}
   18e20:	mov	r2, #5
   18e24:	ldr	r1, [pc, #564]	; 19060 <__assert_fail@plt+0x7b84>
   18e28:	mov	r0, #0
   18e2c:	bl	11230 <dcgettext@plt>
   18e30:	ldr	r3, [r5]
   18e34:	mov	r1, #1
   18e38:	mov	r2, r0
   18e3c:	mov	r0, r4
   18e40:	add	sp, sp, #32
   18e44:	pop	{r4, r5, r6, lr}
   18e48:	b	11404 <__fprintf_chk@plt>
   18e4c:	mov	r2, #5
   18e50:	ldr	r1, [pc, #524]	; 19064 <__assert_fail@plt+0x7b88>
   18e54:	mov	r0, #0
   18e58:	bl	11230 <dcgettext@plt>
   18e5c:	ldr	r2, [r5, #4]
   18e60:	ldr	r3, [r5]
   18e64:	mov	r1, #1
   18e68:	str	r2, [sp, #48]	; 0x30
   18e6c:	mov	r2, r0
   18e70:	mov	r0, r4
   18e74:	add	sp, sp, #32
   18e78:	pop	{r4, r5, r6, lr}
   18e7c:	b	11404 <__fprintf_chk@plt>
   18e80:	mov	r2, #5
   18e84:	ldr	r1, [pc, #476]	; 19068 <__assert_fail@plt+0x7b8c>
   18e88:	mov	r0, #0
   18e8c:	bl	11230 <dcgettext@plt>
   18e90:	ldr	r1, [r5, #8]
   18e94:	ldr	r2, [r5, #4]
   18e98:	ldr	r3, [r5]
   18e9c:	str	r1, [sp, #52]	; 0x34
   18ea0:	str	r2, [sp, #48]	; 0x30
   18ea4:	mov	r1, #1
   18ea8:	mov	r2, r0
   18eac:	mov	r0, r4
   18eb0:	add	sp, sp, #32
   18eb4:	pop	{r4, r5, r6, lr}
   18eb8:	b	11404 <__fprintf_chk@plt>
   18ebc:	mov	r2, #5
   18ec0:	ldr	r1, [pc, #420]	; 1906c <__assert_fail@plt+0x7b90>
   18ec4:	mov	r0, #0
   18ec8:	bl	11230 <dcgettext@plt>
   18ecc:	ldr	r1, [r5, #8]
   18ed0:	ldr	ip, [r5, #12]
   18ed4:	ldr	r2, [r5, #4]
   18ed8:	ldr	r3, [r5]
   18edc:	stmib	sp, {r1, ip}
   18ee0:	str	r2, [sp]
   18ee4:	mov	r1, #1
   18ee8:	mov	r2, r0
   18eec:	mov	r0, r4
   18ef0:	bl	11404 <__fprintf_chk@plt>
   18ef4:	b	18e18 <__assert_fail@plt+0x793c>
   18ef8:	mov	r2, #5
   18efc:	ldr	r1, [pc, #364]	; 19070 <__assert_fail@plt+0x7b94>
   18f00:	mov	r0, #0
   18f04:	bl	11230 <dcgettext@plt>
   18f08:	add	r1, r5, #8
   18f0c:	ldr	r2, [r5, #4]
   18f10:	ldm	r1, {r1, ip, lr}
   18f14:	ldr	r3, [r5]
   18f18:	str	r2, [sp]
   18f1c:	stmib	sp, {r1, ip, lr}
   18f20:	mov	r1, #1
   18f24:	mov	r2, r0
   18f28:	mov	r0, r4
   18f2c:	bl	11404 <__fprintf_chk@plt>
   18f30:	b	18e18 <__assert_fail@plt+0x793c>
   18f34:	mov	r2, #5
   18f38:	ldr	r1, [pc, #308]	; 19074 <__assert_fail@plt+0x7b98>
   18f3c:	mov	r0, #0
   18f40:	bl	11230 <dcgettext@plt>
   18f44:	add	r1, r5, #8
   18f48:	ldr	r2, [r5, #4]
   18f4c:	ldm	r1, {r1, ip, lr}
   18f50:	ldr	r6, [r5, #20]
   18f54:	ldr	r3, [r5]
   18f58:	stmib	sp, {r1, ip, lr}
   18f5c:	mov	r1, #1
   18f60:	str	r2, [sp]
   18f64:	str	r6, [sp, #16]
   18f68:	mov	r2, r0
   18f6c:	mov	r0, r4
   18f70:	bl	11404 <__fprintf_chk@plt>
   18f74:	b	18e18 <__assert_fail@plt+0x793c>
   18f78:	mov	r2, #5
   18f7c:	ldr	r1, [pc, #244]	; 19078 <__assert_fail@plt+0x7b9c>
   18f80:	mov	r0, #0
   18f84:	bl	11230 <dcgettext@plt>
   18f88:	ldr	r2, [r5, #24]
   18f8c:	ldr	r3, [r5]
   18f90:	ldr	r6, [r5, #20]
   18f94:	ldr	lr, [r5, #16]
   18f98:	ldr	ip, [r5, #12]
   18f9c:	str	r2, [sp, #20]
   18fa0:	ldr	r1, [r5, #8]
   18fa4:	ldr	r2, [r5, #4]
   18fa8:	str	r6, [sp, #16]
   18fac:	stmib	sp, {r1, ip, lr}
   18fb0:	mov	r1, #1
   18fb4:	str	r2, [sp]
   18fb8:	mov	r2, r0
   18fbc:	mov	r0, r4
   18fc0:	bl	11404 <__fprintf_chk@plt>
   18fc4:	b	18e18 <__assert_fail@plt+0x793c>
   18fc8:	mov	r2, #5
   18fcc:	ldr	r1, [pc, #168]	; 1907c <__assert_fail@plt+0x7ba0>
   18fd0:	mov	r0, #0
   18fd4:	bl	11230 <dcgettext@plt>
   18fd8:	ldr	r1, [r5, #28]
   18fdc:	ldr	r2, [r5, #24]
   18fe0:	ldr	r3, [r5]
   18fe4:	ldr	r6, [r5, #20]
   18fe8:	ldr	lr, [r5, #16]
   18fec:	str	r1, [sp, #24]
   18ff0:	ldr	ip, [r5, #12]
   18ff4:	str	r2, [sp, #20]
   18ff8:	ldr	r1, [r5, #8]
   18ffc:	ldr	r2, [r5, #4]
   19000:	str	r6, [sp, #16]
   19004:	stmib	sp, {r1, ip, lr}
   19008:	mov	r1, #1
   1900c:	str	r2, [sp]
   19010:	mov	r2, r0
   19014:	mov	r0, r4
   19018:	bl	11404 <__fprintf_chk@plt>
   1901c:	b	18e18 <__assert_fail@plt+0x793c>
   19020:	str	r3, [sp]
   19024:	mov	r1, #1
   19028:	mov	r3, r2
   1902c:	ldr	r2, [pc, #76]	; 19080 <__assert_fail@plt+0x7ba4>
   19030:	bl	11404 <__fprintf_chk@plt>
   19034:	b	18d20 <__assert_fail@plt+0x7844>
   19038:	mov	r2, #5
   1903c:	ldr	r1, [pc, #64]	; 19084 <__assert_fail@plt+0x7ba8>
   19040:	b	18dc4 <__assert_fail@plt+0x78e8>
   19044:	ldrdeq	ip, [r1], -r0
   19048:	andeq	ip, r1, r4, ror #27
   1904c:	andeq	r0, r0, r6, ror #15
   19050:	strheq	sp, [r1], -ip
   19054:	andeq	ip, r1, r8, ror #27
   19058:	muleq	r1, r4, lr
   1905c:	andeq	ip, r1, r4, asr #31
   19060:			; <UNDEFINED> instruction: 0x0001ceb8
   19064:	andeq	ip, r1, r8, asr #29
   19068:	andeq	ip, r1, r0, ror #29
   1906c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   19070:	andeq	ip, r1, ip, lsl pc
   19074:	andeq	ip, r1, r0, asr #30
   19078:	andeq	ip, r1, r8, ror #30
   1907c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   19080:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   19084:	strdeq	ip, [r1], -r8
   19088:	push	{r4, r5, lr}
   1908c:	sub	sp, sp, #12
   19090:	ldr	r5, [sp, #24]
   19094:	ldr	ip, [r5]
   19098:	cmp	ip, #0
   1909c:	beq	190b8 <__assert_fail@plt+0x7bdc>
   190a0:	mov	lr, r5
   190a4:	mov	ip, #0
   190a8:	ldr	r4, [lr, #4]!
   190ac:	add	ip, ip, #1
   190b0:	cmp	r4, #0
   190b4:	bne	190a8 <__assert_fail@plt+0x7bcc>
   190b8:	stm	sp, {r5, ip}
   190bc:	bl	18cf0 <__assert_fail@plt+0x7814>
   190c0:	add	sp, sp, #12
   190c4:	pop	{r4, r5, pc}
   190c8:	push	{r4, r5, lr}
   190cc:	sub	sp, sp, #52	; 0x34
   190d0:	add	r5, sp, #4
   190d4:	ldr	r4, [sp, #64]	; 0x40
   190d8:	mov	ip, #0
   190dc:	sub	r4, r4, #4
   190e0:	ldr	lr, [r4, #4]!
   190e4:	cmp	lr, #0
   190e8:	str	lr, [r5, #4]!
   190ec:	beq	190fc <__assert_fail@plt+0x7c20>
   190f0:	add	ip, ip, #1
   190f4:	cmp	ip, #10
   190f8:	bne	190e0 <__assert_fail@plt+0x7c04>
   190fc:	add	lr, sp, #8
   19100:	str	ip, [sp, #4]
   19104:	str	lr, [sp]
   19108:	bl	18cf0 <__assert_fail@plt+0x7814>
   1910c:	add	sp, sp, #52	; 0x34
   19110:	pop	{r4, r5, pc}
   19114:	push	{r3}		; (str r3, [sp, #-4]!)
   19118:	push	{r4, lr}
   1911c:	sub	sp, sp, #60	; 0x3c
   19120:	add	lr, sp, #56	; 0x38
   19124:	add	r3, sp, #72	; 0x48
   19128:	str	r3, [lr, #-44]!	; 0xffffffd4
   1912c:	add	r4, sp, #68	; 0x44
   19130:	mov	r3, #0
   19134:	ldr	ip, [r4, #4]!
   19138:	cmp	ip, #0
   1913c:	str	ip, [lr, #4]!
   19140:	beq	19150 <__assert_fail@plt+0x7c74>
   19144:	add	r3, r3, #1
   19148:	cmp	r3, #10
   1914c:	bne	19134 <__assert_fail@plt+0x7c58>
   19150:	add	ip, sp, #16
   19154:	str	r3, [sp, #4]
   19158:	str	ip, [sp]
   1915c:	ldr	r3, [sp, #68]	; 0x44
   19160:	bl	18cf0 <__assert_fail@plt+0x7814>
   19164:	add	sp, sp, #60	; 0x3c
   19168:	pop	{r4, lr}
   1916c:	add	sp, sp, #4
   19170:	bx	lr
   19174:	ldr	r3, [pc, #116]	; 191f0 <__assert_fail@plt+0x7d14>
   19178:	push	{r4, lr}
   1917c:	mov	r0, #10
   19180:	ldr	r1, [r3]
   19184:	bl	11224 <fputc_unlocked@plt>
   19188:	mov	r2, #5
   1918c:	ldr	r1, [pc, #96]	; 191f4 <__assert_fail@plt+0x7d18>
   19190:	mov	r0, #0
   19194:	bl	11230 <dcgettext@plt>
   19198:	ldr	r2, [pc, #88]	; 191f8 <__assert_fail@plt+0x7d1c>
   1919c:	mov	r1, r0
   191a0:	mov	r0, #1
   191a4:	bl	113e0 <__printf_chk@plt>
   191a8:	mov	r2, #5
   191ac:	ldr	r1, [pc, #72]	; 191fc <__assert_fail@plt+0x7d20>
   191b0:	mov	r0, #0
   191b4:	bl	11230 <dcgettext@plt>
   191b8:	ldr	r3, [pc, #64]	; 19200 <__assert_fail@plt+0x7d24>
   191bc:	ldr	r2, [pc, #64]	; 19204 <__assert_fail@plt+0x7d28>
   191c0:	mov	r1, r0
   191c4:	mov	r0, #1
   191c8:	bl	113e0 <__printf_chk@plt>
   191cc:	mov	r2, #5
   191d0:	ldr	r1, [pc, #48]	; 19208 <__assert_fail@plt+0x7d2c>
   191d4:	mov	r0, #0
   191d8:	bl	11230 <dcgettext@plt>
   191dc:	ldr	r2, [pc, #40]	; 1920c <__assert_fail@plt+0x7d30>
   191e0:	pop	{r4, lr}
   191e4:	mov	r1, r0
   191e8:	mov	r0, #1
   191ec:	b	113e0 <__printf_chk@plt>
   191f0:	ldrdeq	lr, [r2], -ip
   191f4:	andeq	sp, r1, r4, lsr r0
   191f8:	andeq	sp, r1, r8, asr #32
   191fc:	andeq	sp, r1, r0, rrx
   19200:	muleq	r1, r4, r5
   19204:			; <UNDEFINED> instruction: 0x0001c5bc
   19208:	andeq	sp, r1, r4, ror r0
   1920c:	muleq	r1, ip, r0
   19210:	push	{r4, lr}
   19214:	bl	19f88 <__assert_fail@plt+0x8aac>
   19218:	cmp	r0, #0
   1921c:	popne	{r4, pc}
   19220:	bl	19758 <__assert_fail@plt+0x827c>
   19224:	push	{r4, lr}
   19228:	bl	19f88 <__assert_fail@plt+0x8aac>
   1922c:	cmp	r0, #0
   19230:	popne	{r4, pc}
   19234:	bl	19758 <__assert_fail@plt+0x827c>
   19238:	push	{r4, lr}
   1923c:	bl	19f88 <__assert_fail@plt+0x8aac>
   19240:	cmp	r0, #0
   19244:	popne	{r4, pc}
   19248:	bl	19758 <__assert_fail@plt+0x827c>
   1924c:	push	{r4, r5, r6, lr}
   19250:	mov	r5, r0
   19254:	mov	r4, r1
   19258:	bl	19fb4 <__assert_fail@plt+0x8ad8>
   1925c:	cmp	r0, #0
   19260:	popne	{r4, r5, r6, pc}
   19264:	adds	r4, r4, #0
   19268:	movne	r4, #1
   1926c:	cmp	r5, #0
   19270:	orreq	r4, r4, #1
   19274:	cmp	r4, #0
   19278:	popeq	{r4, r5, r6, pc}
   1927c:	bl	19758 <__assert_fail@plt+0x827c>
   19280:	push	{r4, lr}
   19284:	cmp	r1, #0
   19288:	orreq	r1, r1, #1
   1928c:	bl	19fb4 <__assert_fail@plt+0x8ad8>
   19290:	cmp	r0, #0
   19294:	popne	{r4, pc}
   19298:	bl	19758 <__assert_fail@plt+0x827c>
   1929c:	push	{r4, r5, r6, lr}
   192a0:	mov	r6, r0
   192a4:	mov	r5, r1
   192a8:	mov	r4, r2
   192ac:	bl	1a494 <__assert_fail@plt+0x8fb8>
   192b0:	cmp	r0, #0
   192b4:	popne	{r4, r5, r6, pc}
   192b8:	cmp	r6, #0
   192bc:	beq	192cc <__assert_fail@plt+0x7df0>
   192c0:	cmp	r5, #0
   192c4:	cmpne	r4, #0
   192c8:	popeq	{r4, r5, r6, pc}
   192cc:	bl	19758 <__assert_fail@plt+0x827c>
   192d0:	b	1929c <__assert_fail@plt+0x7dc0>
   192d4:	cmp	r2, #0
   192d8:	cmpne	r1, #0
   192dc:	moveq	r2, #1
   192e0:	moveq	r1, r2
   192e4:	push	{r4, lr}
   192e8:	bl	1a494 <__assert_fail@plt+0x8fb8>
   192ec:	cmp	r0, #0
   192f0:	popne	{r4, pc}
   192f4:	bl	19758 <__assert_fail@plt+0x827c>
   192f8:	mov	r2, r1
   192fc:	mov	r1, r0
   19300:	mov	r0, #0
   19304:	b	1929c <__assert_fail@plt+0x7dc0>
   19308:	mov	r2, r1
   1930c:	mov	r1, r0
   19310:	mov	r0, #0
   19314:	b	192d4 <__assert_fail@plt+0x7df8>
   19318:	push	{r4, r5, r6, lr}
   1931c:	subs	r6, r0, #0
   19320:	sub	sp, sp, #8
   19324:	mov	r5, r1
   19328:	ldr	r4, [r1]
   1932c:	beq	19368 <__assert_fail@plt+0x7e8c>
   19330:	lsr	r1, r4, #1
   19334:	add	r3, r1, #1
   19338:	mvn	r3, r3
   1933c:	cmp	r4, r3
   19340:	bhi	19364 <__assert_fail@plt+0x7e88>
   19344:	add	r4, r4, #1
   19348:	add	r4, r4, r1
   1934c:	mov	r0, r6
   19350:	mov	r1, r4
   19354:	bl	1929c <__assert_fail@plt+0x7dc0>
   19358:	str	r4, [r5]
   1935c:	add	sp, sp, #8
   19360:	pop	{r4, r5, r6, pc}
   19364:	bl	19758 <__assert_fail@plt+0x827c>
   19368:	cmp	r4, #0
   1936c:	bne	1934c <__assert_fail@plt+0x7e70>
   19370:	mov	r1, r2
   19374:	mov	r0, #64	; 0x40
   19378:	str	r2, [sp, #4]
   1937c:	bl	1a5d4 <__assert_fail@plt+0x90f8>
   19380:	ldr	r2, [sp, #4]
   19384:	cmp	r0, #0
   19388:	movne	r4, r0
   1938c:	addeq	r4, r0, #1
   19390:	b	1934c <__assert_fail@plt+0x7e70>
   19394:	mov	r2, #1
   19398:	b	19318 <__assert_fail@plt+0x7e3c>
   1939c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193a0:	sub	sp, sp, #12
   193a4:	ldr	r6, [r1]
   193a8:	mov	sl, r1
   193ac:	mov	r9, r0
   193b0:	asrs	r4, r6, #1
   193b4:	mov	r5, r2
   193b8:	mov	fp, r3
   193bc:	ldr	r7, [sp, #48]	; 0x30
   193c0:	bmi	1952c <__assert_fail@plt+0x8050>
   193c4:	mvn	r3, #-2147483648	; 0x80000000
   193c8:	sub	r3, r3, r4
   193cc:	cmp	r6, r3
   193d0:	movle	r3, #0
   193d4:	movgt	r3, #1
   193d8:	mvn	r8, fp
   193dc:	cmp	r3, #0
   193e0:	addeq	r4, r4, r6
   193e4:	mvnne	r4, #-2147483648	; 0x80000000
   193e8:	lsr	r8, r8, #31
   193ec:	cmp	fp, r4
   193f0:	movge	r3, #0
   193f4:	andlt	r3, r8, #1
   193f8:	cmp	r3, #0
   193fc:	beq	194e4 <__assert_fail@plt+0x8008>
   19400:	cmp	r7, #0
   19404:	blt	195b4 <__assert_fail@plt+0x80d8>
   19408:	bne	195ac <__assert_fail@plt+0x80d0>
   1940c:	mov	r2, #64	; 0x40
   19410:	mov	r1, r7
   19414:	mov	r0, r2
   19418:	str	r2, [sp, #4]
   1941c:	bl	1a7e0 <__assert_fail@plt+0x9304>
   19420:	ldr	r2, [sp, #4]
   19424:	mov	r1, r7
   19428:	mov	r4, r0
   1942c:	mov	r0, r2
   19430:	bl	1aa00 <__assert_fail@plt+0x9524>
   19434:	ldr	r2, [sp, #4]
   19438:	sub	r1, r2, r1
   1943c:	cmp	r9, #0
   19440:	sub	r3, r4, r6
   19444:	streq	r9, [sl]
   19448:	cmp	r3, r5
   1944c:	bge	194d0 <__assert_fail@plt+0x7ff4>
   19450:	cmp	r5, #0
   19454:	blt	19540 <__assert_fail@plt+0x8064>
   19458:	cmp	r6, #0
   1945c:	blt	1947c <__assert_fail@plt+0x7fa0>
   19460:	mvn	r3, #-2147483648	; 0x80000000
   19464:	sub	r3, r3, r5
   19468:	cmp	r6, r3
   1946c:	movle	r3, #0
   19470:	movgt	r3, #1
   19474:	cmp	r3, #0
   19478:	bne	1963c <__assert_fail@plt+0x8160>
   1947c:	add	r5, r6, r5
   19480:	cmp	fp, r5
   19484:	movge	r8, #0
   19488:	andlt	r8, r8, #1
   1948c:	cmp	r8, #0
   19490:	mov	r4, r5
   19494:	bne	1963c <__assert_fail@plt+0x8160>
   19498:	cmp	r7, #0
   1949c:	blt	19554 <__assert_fail@plt+0x8078>
   194a0:	beq	194cc <__assert_fail@plt+0x7ff0>
   194a4:	cmp	r5, #0
   194a8:	blt	195fc <__assert_fail@plt+0x8120>
   194ac:	mov	r1, r7
   194b0:	mvn	r0, #-2147483648	; 0x80000000
   194b4:	bl	1a7e0 <__assert_fail@plt+0x9304>
   194b8:	cmp	r5, r0
   194bc:	movle	r0, #0
   194c0:	movgt	r0, #1
   194c4:	cmp	r0, #0
   194c8:	bne	1963c <__assert_fail@plt+0x8160>
   194cc:	mul	r1, r5, r7
   194d0:	mov	r0, r9
   194d4:	bl	1924c <__assert_fail@plt+0x7d70>
   194d8:	str	r4, [sl]
   194dc:	add	sp, sp, #12
   194e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194e4:	cmp	r7, #0
   194e8:	blt	19580 <__assert_fail@plt+0x80a4>
   194ec:	beq	1940c <__assert_fail@plt+0x7f30>
   194f0:	cmp	r4, #0
   194f4:	blt	195bc <__assert_fail@plt+0x80e0>
   194f8:	mov	r1, r7
   194fc:	mvn	r0, #-2147483648	; 0x80000000
   19500:	bl	1a7e0 <__assert_fail@plt+0x9304>
   19504:	cmp	r0, r4
   19508:	movge	r0, #0
   1950c:	movlt	r0, #1
   19510:	cmp	r0, #0
   19514:	mvnne	r2, #-2147483648	; 0x80000000
   19518:	bne	19410 <__assert_fail@plt+0x7f34>
   1951c:	mul	r1, r7, r4
   19520:	cmp	r1, #63	; 0x3f
   19524:	bgt	1943c <__assert_fail@plt+0x7f60>
   19528:	b	1940c <__assert_fail@plt+0x7f30>
   1952c:	rsb	r3, r4, #-2147483648	; 0x80000000
   19530:	cmp	r6, r3
   19534:	movge	r3, #0
   19538:	movlt	r3, #1
   1953c:	b	193d8 <__assert_fail@plt+0x7efc>
   19540:	rsb	r3, r5, #-2147483648	; 0x80000000
   19544:	cmp	r6, r3
   19548:	movge	r3, #0
   1954c:	movlt	r3, #1
   19550:	b	19474 <__assert_fail@plt+0x7f98>
   19554:	cmp	r5, #0
   19558:	blt	195e0 <__assert_fail@plt+0x8104>
   1955c:	cmn	r7, #1
   19560:	beq	194cc <__assert_fail@plt+0x7ff0>
   19564:	mov	r1, r7
   19568:	mov	r0, #-2147483648	; 0x80000000
   1956c:	bl	1a7e0 <__assert_fail@plt+0x9304>
   19570:	cmp	r5, r0
   19574:	movle	r0, #0
   19578:	movgt	r0, #1
   1957c:	b	194c4 <__assert_fail@plt+0x7fe8>
   19580:	cmp	r4, #0
   19584:	blt	19620 <__assert_fail@plt+0x8144>
   19588:	cmn	r7, #1
   1958c:	beq	1951c <__assert_fail@plt+0x8040>
   19590:	mov	r1, r7
   19594:	mov	r0, #-2147483648	; 0x80000000
   19598:	bl	1a7e0 <__assert_fail@plt+0x9304>
   1959c:	cmp	r0, r4
   195a0:	movge	r0, #0
   195a4:	movlt	r0, #1
   195a8:	b	19510 <__assert_fail@plt+0x8034>
   195ac:	mov	r4, fp
   195b0:	b	194f8 <__assert_fail@plt+0x801c>
   195b4:	mov	r4, fp
   195b8:	b	19588 <__assert_fail@plt+0x80ac>
   195bc:	cmn	r4, #1
   195c0:	beq	1951c <__assert_fail@plt+0x8040>
   195c4:	mov	r1, r4
   195c8:	mov	r0, #-2147483648	; 0x80000000
   195cc:	bl	1a7e0 <__assert_fail@plt+0x9304>
   195d0:	cmp	r7, r0
   195d4:	movle	r0, #0
   195d8:	movgt	r0, #1
   195dc:	b	19510 <__assert_fail@plt+0x8034>
   195e0:	mov	r1, r7
   195e4:	mvn	r0, #-2147483648	; 0x80000000
   195e8:	bl	1a7e0 <__assert_fail@plt+0x9304>
   195ec:	cmp	r5, r0
   195f0:	movge	r0, #0
   195f4:	movlt	r0, #1
   195f8:	b	194c4 <__assert_fail@plt+0x7fe8>
   195fc:	cmn	r5, #1
   19600:	beq	194cc <__assert_fail@plt+0x7ff0>
   19604:	mov	r1, r5
   19608:	mov	r0, #-2147483648	; 0x80000000
   1960c:	bl	1a7e0 <__assert_fail@plt+0x9304>
   19610:	cmp	r7, r0
   19614:	movle	r0, #0
   19618:	movgt	r0, #1
   1961c:	b	194c4 <__assert_fail@plt+0x7fe8>
   19620:	mov	r1, r7
   19624:	mvn	r0, #-2147483648	; 0x80000000
   19628:	bl	1a7e0 <__assert_fail@plt+0x9304>
   1962c:	cmp	r0, r4
   19630:	movle	r0, #0
   19634:	movgt	r0, #1
   19638:	b	19510 <__assert_fail@plt+0x8034>
   1963c:	bl	19758 <__assert_fail@plt+0x827c>
   19640:	push	{r4, lr}
   19644:	mov	r1, #1
   19648:	bl	19f40 <__assert_fail@plt+0x8a64>
   1964c:	cmp	r0, #0
   19650:	popne	{r4, pc}
   19654:	bl	19758 <__assert_fail@plt+0x827c>
   19658:	push	{r4, lr}
   1965c:	mov	r1, #1
   19660:	bl	19f40 <__assert_fail@plt+0x8a64>
   19664:	cmp	r0, #0
   19668:	popne	{r4, pc}
   1966c:	bl	19758 <__assert_fail@plt+0x827c>
   19670:	push	{r4, lr}
   19674:	bl	19f40 <__assert_fail@plt+0x8a64>
   19678:	cmp	r0, #0
   1967c:	popne	{r4, pc}
   19680:	bl	19758 <__assert_fail@plt+0x827c>
   19684:	push	{r4, lr}
   19688:	bl	19f40 <__assert_fail@plt+0x8a64>
   1968c:	cmp	r0, #0
   19690:	popne	{r4, pc}
   19694:	bl	19758 <__assert_fail@plt+0x827c>
   19698:	push	{r4, r5, r6, lr}
   1969c:	mov	r6, r0
   196a0:	mov	r0, r1
   196a4:	mov	r4, r1
   196a8:	bl	19f88 <__assert_fail@plt+0x8aac>
   196ac:	subs	r5, r0, #0
   196b0:	beq	196c8 <__assert_fail@plt+0x81ec>
   196b4:	mov	r2, r4
   196b8:	mov	r1, r6
   196bc:	bl	111e8 <memcpy@plt>
   196c0:	mov	r0, r5
   196c4:	pop	{r4, r5, r6, pc}
   196c8:	bl	19758 <__assert_fail@plt+0x827c>
   196cc:	push	{r4, r5, r6, lr}
   196d0:	mov	r6, r0
   196d4:	mov	r0, r1
   196d8:	mov	r4, r1
   196dc:	bl	19f88 <__assert_fail@plt+0x8aac>
   196e0:	subs	r5, r0, #0
   196e4:	beq	196fc <__assert_fail@plt+0x8220>
   196e8:	mov	r2, r4
   196ec:	mov	r1, r6
   196f0:	bl	111e8 <memcpy@plt>
   196f4:	mov	r0, r5
   196f8:	pop	{r4, r5, r6, pc}
   196fc:	bl	19758 <__assert_fail@plt+0x827c>
   19700:	push	{r4, r5, r6, lr}
   19704:	mov	r6, r0
   19708:	add	r0, r1, #1
   1970c:	mov	r4, r1
   19710:	bl	19f88 <__assert_fail@plt+0x8aac>
   19714:	subs	r5, r0, #0
   19718:	beq	19738 <__assert_fail@plt+0x825c>
   1971c:	mov	r3, #0
   19720:	mov	r1, r6
   19724:	strb	r3, [r5, r4]
   19728:	mov	r2, r4
   1972c:	bl	111e8 <memcpy@plt>
   19730:	mov	r0, r5
   19734:	pop	{r4, r5, r6, pc}
   19738:	bl	19758 <__assert_fail@plt+0x827c>
   1973c:	push	{r4, lr}
   19740:	mov	r4, r0
   19744:	bl	11380 <strlen@plt>
   19748:	add	r1, r0, #1
   1974c:	mov	r0, r4
   19750:	pop	{r4, lr}
   19754:	b	19698 <__assert_fail@plt+0x81bc>
   19758:	ldr	r3, [pc, #44]	; 1978c <__assert_fail@plt+0x82b0>
   1975c:	push	{r4, lr}
   19760:	mov	r2, #5
   19764:	ldr	r1, [pc, #36]	; 19790 <__assert_fail@plt+0x82b4>
   19768:	mov	r0, #0
   1976c:	ldr	r4, [r3]
   19770:	bl	11230 <dcgettext@plt>
   19774:	ldr	r2, [pc, #24]	; 19794 <__assert_fail@plt+0x82b8>
   19778:	mov	r1, #0
   1977c:	mov	r3, r0
   19780:	mov	r0, r4
   19784:	bl	112d8 <error@plt>
   19788:	bl	114ac <abort@plt>
   1978c:	andeq	lr, r2, ip, ror r1
   19790:	andeq	sp, r1, ip, ror #1
   19794:	andeq	fp, r1, r4, asr #14
   19798:	push	{r4, r5, r6, r7, r8, lr}
   1979c:	subs	r5, r1, #0
   197a0:	mov	r4, r0
   197a4:	blt	19818 <__assert_fail@plt+0x833c>
   197a8:	moveq	r6, #0
   197ac:	moveq	r7, #0
   197b0:	bne	197d8 <__assert_fail@plt+0x82fc>
   197b4:	ldr	r2, [r4]
   197b8:	ldr	r1, [r4, #4]
   197bc:	mov	r0, #0
   197c0:	mul	ip, r2, r7
   197c4:	umull	r2, r3, r2, r5
   197c8:	mla	r5, r5, r1, ip
   197cc:	add	r3, r5, r3
   197d0:	strd	r2, [r4]
   197d4:	pop	{r4, r5, r6, r7, r8, pc}
   197d8:	asr	r7, r5, #31
   197dc:	mov	r2, r5
   197e0:	mov	r3, r7
   197e4:	mvn	r0, #0
   197e8:	mvn	r1, #0
   197ec:	bl	1aeac <__assert_fail@plt+0x99d0>
   197f0:	ldrd	r2, [r4]
   197f4:	mov	r6, r5
   197f8:	cmp	r1, r3
   197fc:	cmpeq	r0, r2
   19800:	bcs	197b4 <__assert_fail@plt+0x82d8>
   19804:	mvn	r2, #0
   19808:	mvn	r3, #0
   1980c:	mov	r0, #1
   19810:	strd	r2, [r4]
   19814:	pop	{r4, r5, r6, r7, r8, pc}
   19818:	ldrd	r2, [r0]
   1981c:	orrs	r3, r2, r3
   19820:	moveq	r6, r5
   19824:	asreq	r7, r6, #31
   19828:	bne	19804 <__assert_fail@plt+0x8328>
   1982c:	b	197b4 <__assert_fail@plt+0x82d8>
   19830:	cmp	r2, #36	; 0x24
   19834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19838:	sub	sp, sp, #20
   1983c:	bhi	19db0 <__assert_fail@plt+0x88d4>
   19840:	cmp	r1, #0
   19844:	mov	r8, r2
   19848:	mov	r7, r0
   1984c:	mov	r5, r1
   19850:	mov	r6, r3
   19854:	addeq	r5, sp, #4
   19858:	bl	113a4 <__errno_location@plt>
   1985c:	mov	r3, #0
   19860:	str	r3, [r0]
   19864:	mov	r9, r0
   19868:	bl	11368 <__ctype_b_loc@plt>
   1986c:	ldrb	r3, [r7]
   19870:	mov	r2, r7
   19874:	ldr	r0, [r0]
   19878:	b	19880 <__assert_fail@plt+0x83a4>
   1987c:	ldrb	r3, [r2, #1]!
   19880:	lsl	r1, r3, #1
   19884:	ldrh	r4, [r0, r1]
   19888:	ands	r4, r4, #8192	; 0x2000
   1988c:	bne	1987c <__assert_fail@plt+0x83a0>
   19890:	cmp	r3, #45	; 0x2d
   19894:	bne	198a8 <__assert_fail@plt+0x83cc>
   19898:	mov	r4, #4
   1989c:	mov	r0, r4
   198a0:	add	sp, sp, #20
   198a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198a8:	mov	r2, r8
   198ac:	mov	r3, r4
   198b0:	mov	r1, r5
   198b4:	mov	r0, r7
   198b8:	bl	111f4 <__strtoull_internal@plt>
   198bc:	ldr	r8, [r5]
   198c0:	cmp	r7, r8
   198c4:	mov	r2, r0
   198c8:	str	r0, [sp, #8]
   198cc:	str	r1, [sp, #12]
   198d0:	beq	1991c <__assert_fail@plt+0x8440>
   198d4:	ldr	r4, [r9]
   198d8:	cmp	r4, #0
   198dc:	bne	1990c <__assert_fail@plt+0x8430>
   198e0:	ldr	r3, [sp, #56]	; 0x38
   198e4:	cmp	r3, #0
   198e8:	beq	198f8 <__assert_fail@plt+0x841c>
   198ec:	ldrb	r9, [r8]
   198f0:	cmp	r9, #0
   198f4:	bne	19954 <__assert_fail@plt+0x8478>
   198f8:	mov	r0, r4
   198fc:	str	r2, [r6]
   19900:	str	r1, [r6, #4]
   19904:	add	sp, sp, #20
   19908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1990c:	cmp	r4, #34	; 0x22
   19910:	bne	19898 <__assert_fail@plt+0x83bc>
   19914:	mov	r4, #1
   19918:	b	198e0 <__assert_fail@plt+0x8404>
   1991c:	ldr	r3, [sp, #56]	; 0x38
   19920:	cmp	r3, #0
   19924:	beq	19898 <__assert_fail@plt+0x83bc>
   19928:	ldrb	r1, [r8]
   1992c:	cmp	r1, #0
   19930:	beq	19898 <__assert_fail@plt+0x83bc>
   19934:	mov	r0, r3
   19938:	bl	1138c <strchr@plt>
   1993c:	cmp	r0, #0
   19940:	beq	19898 <__assert_fail@plt+0x83bc>
   19944:	ldrb	r9, [r8]
   19948:	mov	r2, #1
   1994c:	mov	r3, #0
   19950:	strd	r2, [sp, #8]
   19954:	mov	r1, r9
   19958:	ldr	r0, [sp, #56]	; 0x38
   1995c:	bl	1138c <strchr@plt>
   19960:	cmp	r0, #0
   19964:	beq	19d6c <__assert_fail@plt+0x8890>
   19968:	sub	r3, r9, #69	; 0x45
   1996c:	cmp	r3, #47	; 0x2f
   19970:	ldrls	pc, [pc, r3, lsl #2]
   19974:	b	19a38 <__assert_fail@plt+0x855c>
   19978:	andeq	r9, r1, r8, lsr #22
   1997c:	andeq	r9, r1, r8, lsr sl
   19980:	andeq	r9, r1, r8, lsr #22
   19984:	andeq	r9, r1, r8, lsr sl
   19988:	andeq	r9, r1, r8, lsr sl
   1998c:	andeq	r9, r1, r8, lsr sl
   19990:	andeq	r9, r1, r8, lsr #22
   19994:	andeq	r9, r1, r8, lsr sl
   19998:	andeq	r9, r1, r8, lsr #22
   1999c:	andeq	r9, r1, r8, lsr sl
   199a0:	andeq	r9, r1, r8, lsr sl
   199a4:	andeq	r9, r1, r8, lsr #22
   199a8:	andeq	r9, r1, r8, lsr sl
   199ac:	andeq	r9, r1, r8, lsr sl
   199b0:	andeq	r9, r1, r8, lsr sl
   199b4:	andeq	r9, r1, r8, lsr #22
   199b8:	andeq	r9, r1, r8, lsr sl
   199bc:	andeq	r9, r1, r8, lsr sl
   199c0:	andeq	r9, r1, r8, lsr sl
   199c4:	andeq	r9, r1, r8, lsr sl
   199c8:	andeq	r9, r1, r8, lsr #22
   199cc:	andeq	r9, r1, r8, lsr #22
   199d0:	andeq	r9, r1, r8, lsr sl
   199d4:	andeq	r9, r1, r8, lsr sl
   199d8:	andeq	r9, r1, r8, lsr sl
   199dc:	andeq	r9, r1, r8, lsr sl
   199e0:	andeq	r9, r1, r8, lsr sl
   199e4:	andeq	r9, r1, r8, lsr sl
   199e8:	andeq	r9, r1, r8, lsr sl
   199ec:	andeq	r9, r1, r8, lsr sl
   199f0:	andeq	r9, r1, r8, lsr sl
   199f4:	andeq	r9, r1, r8, lsr sl
   199f8:	andeq	r9, r1, r8, lsr sl
   199fc:	andeq	r9, r1, r8, lsr sl
   19a00:	andeq	r9, r1, r8, lsr #22
   19a04:	andeq	r9, r1, r8, lsr sl
   19a08:	andeq	r9, r1, r8, lsr sl
   19a0c:	andeq	r9, r1, r8, lsr sl
   19a10:	andeq	r9, r1, r8, lsr #22
   19a14:	andeq	r9, r1, r8, lsr sl
   19a18:	andeq	r9, r1, r8, lsr #22
   19a1c:	andeq	r9, r1, r8, lsr sl
   19a20:	andeq	r9, r1, r8, lsr sl
   19a24:	andeq	r9, r1, r8, lsr sl
   19a28:	andeq	r9, r1, r8, lsr sl
   19a2c:	andeq	r9, r1, r8, lsr sl
   19a30:	andeq	r9, r1, r8, lsr sl
   19a34:	andeq	r9, r1, r8, lsr #22
   19a38:	mov	r7, #1
   19a3c:	mov	sl, #1024	; 0x400
   19a40:	sub	r9, r9, #66	; 0x42
   19a44:	cmp	r9, #53	; 0x35
   19a48:	ldrls	pc, [pc, r9, lsl #2]
   19a4c:	b	19d6c <__assert_fail@plt+0x8890>
   19a50:			; <UNDEFINED> instruction: 0x00019cb8
   19a54:	andeq	r9, r1, ip, ror #26
   19a58:	andeq	r9, r1, ip, ror #26
   19a5c:	muleq	r1, r0, ip
   19a60:	andeq	r9, r1, ip, ror #26
   19a64:	andeq	r9, r1, r8, ror #24
   19a68:	andeq	r9, r1, ip, ror #26
   19a6c:	andeq	r9, r1, ip, ror #26
   19a70:	andeq	r9, r1, ip, ror #26
   19a74:	andeq	r9, r1, r8, asr #24
   19a78:	andeq	r9, r1, ip, ror #26
   19a7c:	andeq	r9, r1, r4, lsl sp
   19a80:	andeq	r9, r1, ip, ror #26
   19a84:	andeq	r9, r1, ip, ror #26
   19a88:	andeq	r9, r1, ip, ror #25
   19a8c:	andeq	r9, r1, ip, ror #26
   19a90:	andeq	r9, r1, ip, ror #26
   19a94:	andeq	r9, r1, ip, ror #26
   19a98:	andeq	r9, r1, r4, asr #26
   19a9c:	andeq	r9, r1, ip, ror #26
   19aa0:	andeq	r9, r1, ip, ror #26
   19aa4:	andeq	r9, r1, ip, ror #26
   19aa8:	andeq	r9, r1, ip, ror #26
   19aac:	andeq	r9, r1, r0, lsr #24
   19ab0:	andeq	r9, r1, ip, ror #23
   19ab4:	andeq	r9, r1, ip, ror #26
   19ab8:	andeq	r9, r1, ip, ror #26
   19abc:	andeq	r9, r1, ip, ror #26
   19ac0:	andeq	r9, r1, ip, ror #26
   19ac4:	andeq	r9, r1, ip, ror #26
   19ac8:	andeq	r9, r1, ip, ror #26
   19acc:	andeq	r9, r1, ip, ror #26
   19ad0:			; <UNDEFINED> instruction: 0x00019bb8
   19ad4:	andeq	r9, r1, r8, lsr #23
   19ad8:	andeq	r9, r1, ip, ror #26
   19adc:	andeq	r9, r1, ip, ror #26
   19ae0:	andeq	r9, r1, ip, ror #26
   19ae4:	andeq	r9, r1, r8, ror #24
   19ae8:	andeq	r9, r1, ip, ror #26
   19aec:	andeq	r9, r1, ip, ror #26
   19af0:	andeq	r9, r1, ip, ror #26
   19af4:	andeq	r9, r1, r8, asr #24
   19af8:	andeq	r9, r1, ip, ror #26
   19afc:	andeq	r9, r1, r4, lsl sp
   19b00:	andeq	r9, r1, ip, ror #26
   19b04:	andeq	r9, r1, ip, ror #26
   19b08:	andeq	r9, r1, ip, ror #26
   19b0c:	andeq	r9, r1, ip, ror #26
   19b10:	andeq	r9, r1, ip, ror #26
   19b14:	andeq	r9, r1, ip, ror #26
   19b18:	andeq	r9, r1, r4, asr #26
   19b1c:	andeq	r9, r1, ip, ror #26
   19b20:	andeq	r9, r1, ip, ror #26
   19b24:	andeq	r9, r1, r4, ror #22
   19b28:	mov	r1, #48	; 0x30
   19b2c:	ldr	r0, [sp, #56]	; 0x38
   19b30:	bl	1138c <strchr@plt>
   19b34:	cmp	r0, #0
   19b38:	beq	19a38 <__assert_fail@plt+0x855c>
   19b3c:	ldrb	r3, [r8, #1]
   19b40:	cmp	r3, #68	; 0x44
   19b44:	beq	19b58 <__assert_fail@plt+0x867c>
   19b48:	cmp	r3, #105	; 0x69
   19b4c:	beq	19d7c <__assert_fail@plt+0x88a0>
   19b50:	cmp	r3, #66	; 0x42
   19b54:	bne	19a38 <__assert_fail@plt+0x855c>
   19b58:	mov	r7, #2
   19b5c:	mov	sl, #1000	; 0x3e8
   19b60:	b	19a40 <__assert_fail@plt+0x8564>
   19b64:	ldrd	r2, [sp, #8]
   19b68:	cmp	r2, #0
   19b6c:	sbcs	r1, r3, #0
   19b70:	blt	19d94 <__assert_fail@plt+0x88b8>
   19b74:	adds	r2, r2, r2
   19b78:	adc	r3, r3, r3
   19b7c:	mov	r1, r3
   19b80:	mov	r9, #0
   19b84:	str	r2, [sp, #8]
   19b88:	str	r3, [sp, #12]
   19b8c:	add	r3, r8, r7
   19b90:	str	r3, [r5]
   19b94:	ldrb	r3, [r8, r7]
   19b98:	orr	r4, r4, r9
   19b9c:	cmp	r3, #0
   19ba0:	orrne	r4, r4, #2
   19ba4:	b	198f8 <__assert_fail@plt+0x841c>
   19ba8:	ldr	r2, [sp, #8]
   19bac:	ldr	r1, [sp, #12]
   19bb0:	mov	r9, #0
   19bb4:	b	19b8c <__assert_fail@plt+0x86b0>
   19bb8:	ldrd	r2, [sp, #8]
   19bbc:	ldr	r1, [pc, #512]	; 19dc4 <__assert_fail@plt+0x88e8>
   19bc0:	mvn	r0, #0
   19bc4:	cmp	r3, r1
   19bc8:	cmpeq	r2, r0
   19bcc:	bhi	19d94 <__assert_fail@plt+0x88b8>
   19bd0:	lsl	r1, r3, #9
   19bd4:	orr	r1, r1, r2, lsr #23
   19bd8:	lsl	r2, r2, #9
   19bdc:	str	r1, [sp, #12]
   19be0:	str	r2, [sp, #8]
   19be4:	mov	r9, #0
   19be8:	b	19b8c <__assert_fail@plt+0x86b0>
   19bec:	mov	fp, #7
   19bf0:	mov	r9, #0
   19bf4:	add	r8, sp, #8
   19bf8:	mov	r1, sl
   19bfc:	mov	r0, r8
   19c00:	bl	19798 <__assert_fail@plt+0x82bc>
   19c04:	subs	fp, fp, #1
   19c08:	orr	r9, r9, r0
   19c0c:	bne	19bf8 <__assert_fail@plt+0x871c>
   19c10:	ldr	r8, [r5]
   19c14:	ldr	r2, [sp, #8]
   19c18:	ldr	r1, [sp, #12]
   19c1c:	b	19b8c <__assert_fail@plt+0x86b0>
   19c20:	mov	fp, #8
   19c24:	mov	r9, #0
   19c28:	add	r8, sp, fp
   19c2c:	mov	r1, sl
   19c30:	mov	r0, r8
   19c34:	bl	19798 <__assert_fail@plt+0x82bc>
   19c38:	subs	fp, fp, #1
   19c3c:	orr	r9, r9, r0
   19c40:	bne	19c2c <__assert_fail@plt+0x8750>
   19c44:	b	19c10 <__assert_fail@plt+0x8734>
   19c48:	mov	r1, sl
   19c4c:	add	r0, sp, #8
   19c50:	bl	19798 <__assert_fail@plt+0x82bc>
   19c54:	ldr	r8, [r5]
   19c58:	ldr	r2, [sp, #8]
   19c5c:	ldr	r1, [sp, #12]
   19c60:	mov	r9, r0
   19c64:	b	19b8c <__assert_fail@plt+0x86b0>
   19c68:	mov	fp, #3
   19c6c:	mov	r9, #0
   19c70:	add	r8, sp, #8
   19c74:	mov	r1, sl
   19c78:	mov	r0, r8
   19c7c:	bl	19798 <__assert_fail@plt+0x82bc>
   19c80:	subs	fp, fp, #1
   19c84:	orr	r9, r9, r0
   19c88:	bne	19c74 <__assert_fail@plt+0x8798>
   19c8c:	b	19c10 <__assert_fail@plt+0x8734>
   19c90:	mov	fp, #6
   19c94:	mov	r9, #0
   19c98:	add	r8, sp, #8
   19c9c:	mov	r1, sl
   19ca0:	mov	r0, r8
   19ca4:	bl	19798 <__assert_fail@plt+0x82bc>
   19ca8:	subs	fp, fp, #1
   19cac:	orr	r9, r9, r0
   19cb0:	bne	19c9c <__assert_fail@plt+0x87c0>
   19cb4:	b	19c10 <__assert_fail@plt+0x8734>
   19cb8:	ldrd	r0, [sp, #8]
   19cbc:	ldr	r3, [pc, #260]	; 19dc8 <__assert_fail@plt+0x88ec>
   19cc0:	mvn	r2, #0
   19cc4:	cmp	r1, r3
   19cc8:	cmpeq	r0, r2
   19ccc:	bhi	19d94 <__assert_fail@plt+0x88b8>
   19cd0:	lsl	r1, r1, #10
   19cd4:	orr	r1, r1, r0, lsr #22
   19cd8:	lsl	r2, r0, #10
   19cdc:	str	r1, [sp, #12]
   19ce0:	str	r2, [sp, #8]
   19ce4:	mov	r9, #0
   19ce8:	b	19b8c <__assert_fail@plt+0x86b0>
   19cec:	mov	fp, #5
   19cf0:	mov	r9, #0
   19cf4:	add	r8, sp, #8
   19cf8:	mov	r1, sl
   19cfc:	mov	r0, r8
   19d00:	bl	19798 <__assert_fail@plt+0x82bc>
   19d04:	subs	fp, fp, #1
   19d08:	orr	r9, r9, r0
   19d0c:	bne	19cf8 <__assert_fail@plt+0x881c>
   19d10:	b	19c10 <__assert_fail@plt+0x8734>
   19d14:	mov	r1, sl
   19d18:	add	r0, sp, #8
   19d1c:	bl	19798 <__assert_fail@plt+0x82bc>
   19d20:	mov	r1, sl
   19d24:	mov	r9, r0
   19d28:	add	r0, sp, #8
   19d2c:	bl	19798 <__assert_fail@plt+0x82bc>
   19d30:	ldr	r8, [r5]
   19d34:	ldr	r2, [sp, #8]
   19d38:	ldr	r1, [sp, #12]
   19d3c:	orr	r9, r9, r0
   19d40:	b	19b8c <__assert_fail@plt+0x86b0>
   19d44:	mov	fp, #4
   19d48:	mov	r9, #0
   19d4c:	add	r8, sp, #8
   19d50:	mov	r1, sl
   19d54:	mov	r0, r8
   19d58:	bl	19798 <__assert_fail@plt+0x82bc>
   19d5c:	subs	fp, fp, #1
   19d60:	orr	r9, r9, r0
   19d64:	bne	19d50 <__assert_fail@plt+0x8874>
   19d68:	b	19c10 <__assert_fail@plt+0x8734>
   19d6c:	ldrd	r2, [sp, #8]
   19d70:	orr	r4, r4, #2
   19d74:	strd	r2, [r6]
   19d78:	b	1989c <__assert_fail@plt+0x83c0>
   19d7c:	ldrb	r7, [r8, #2]
   19d80:	mov	sl, #1024	; 0x400
   19d84:	cmp	r7, #66	; 0x42
   19d88:	movne	r7, #1
   19d8c:	moveq	r7, #3
   19d90:	b	19a40 <__assert_fail@plt+0x8564>
   19d94:	mvn	r1, #0
   19d98:	mvn	r0, #0
   19d9c:	mvn	r2, #0
   19da0:	strd	r0, [sp, #8]
   19da4:	mov	r9, #1
   19da8:	mov	r1, r2
   19dac:	b	19b8c <__assert_fail@plt+0x86b0>
   19db0:	ldr	r3, [pc, #20]	; 19dcc <__assert_fail@plt+0x88f0>
   19db4:	mov	r2, #85	; 0x55
   19db8:	ldr	r1, [pc, #16]	; 19dd0 <__assert_fail@plt+0x88f4>
   19dbc:	ldr	r0, [pc, #16]	; 19dd4 <__assert_fail@plt+0x88f8>
   19dc0:	bl	114dc <__assert_fail@plt>
   19dc4:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   19dc8:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   19dcc:	andeq	sp, r1, r0, lsl #2
   19dd0:	andeq	sp, r1, ip, lsl #2
   19dd4:	andeq	sp, r1, ip, lsl r1
   19dd8:	push	{r4, r5, r6, r7, r8, r9, lr}
   19ddc:	sub	sp, sp, #12
   19de0:	subs	r7, r0, #0
   19de4:	str	r1, [sp, #4]
   19de8:	beq	19e88 <__assert_fail@plt+0x89ac>
   19dec:	mov	r9, r1
   19df0:	mov	r5, r1
   19df4:	mov	r6, r7
   19df8:	mov	r4, #0
   19dfc:	add	r5, r5, #4
   19e00:	str	r5, [sp, #4]
   19e04:	ldr	r0, [r5, #-4]
   19e08:	bl	11380 <strlen@plt>
   19e0c:	adds	r4, r0, r4
   19e10:	mvncs	r4, #0
   19e14:	subs	r6, r6, #1
   19e18:	bne	19dfc <__assert_fail@plt+0x8920>
   19e1c:	cmp	r4, #0
   19e20:	blt	19e78 <__assert_fail@plt+0x899c>
   19e24:	add	r0, r4, #1
   19e28:	bl	19210 <__assert_fail@plt+0x7d34>
   19e2c:	sub	r9, r9, #4
   19e30:	mov	r6, r0
   19e34:	mov	r4, r0
   19e38:	ldr	r8, [r9, #4]!
   19e3c:	mov	r0, r8
   19e40:	bl	11380 <strlen@plt>
   19e44:	mov	r1, r8
   19e48:	mov	r5, r0
   19e4c:	mov	r2, r0
   19e50:	mov	r0, r4
   19e54:	bl	111e8 <memcpy@plt>
   19e58:	subs	r7, r7, #1
   19e5c:	add	r4, r4, r5
   19e60:	bne	19e38 <__assert_fail@plt+0x895c>
   19e64:	mov	r3, #0
   19e68:	strb	r3, [r4]
   19e6c:	mov	r0, r6
   19e70:	add	sp, sp, #12
   19e74:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19e78:	bl	113a4 <__errno_location@plt>
   19e7c:	mov	r3, #75	; 0x4b
   19e80:	str	r3, [r0]
   19e84:	b	19e6c <__assert_fail@plt+0x8990>
   19e88:	mov	r0, #1
   19e8c:	bl	19210 <__assert_fail@plt+0x7d34>
   19e90:	mov	r4, r0
   19e94:	mov	r6, r0
   19e98:	b	19e64 <__assert_fail@plt+0x8988>
   19e9c:	push	{r4, lr}
   19ea0:	sub	sp, sp, #8
   19ea4:	ldrb	r4, [r0]
   19ea8:	cmp	r4, #0
   19eac:	beq	19ef8 <__assert_fail@plt+0x8a1c>
   19eb0:	cmp	r4, #37	; 0x25
   19eb4:	bne	19f08 <__assert_fail@plt+0x8a2c>
   19eb8:	ldrb	r3, [r0, #1]
   19ebc:	cmp	r3, #115	; 0x73
   19ec0:	bne	19f08 <__assert_fail@plt+0x8a2c>
   19ec4:	mov	ip, r0
   19ec8:	mov	r4, #0
   19ecc:	b	19ee8 <__assert_fail@plt+0x8a0c>
   19ed0:	cmp	lr, #37	; 0x25
   19ed4:	bne	19f08 <__assert_fail@plt+0x8a2c>
   19ed8:	add	ip, ip, #2
   19edc:	ldrb	lr, [ip, #1]
   19ee0:	cmp	lr, #115	; 0x73
   19ee4:	bne	19f08 <__assert_fail@plt+0x8a2c>
   19ee8:	ldrb	lr, [ip, #2]
   19eec:	add	r4, r4, #1
   19ef0:	cmp	lr, #0
   19ef4:	bne	19ed0 <__assert_fail@plt+0x89f4>
   19ef8:	mov	r0, r4
   19efc:	bl	19dd8 <__assert_fail@plt+0x88fc>
   19f00:	add	sp, sp, #8
   19f04:	pop	{r4, pc}
   19f08:	mov	r3, r1
   19f0c:	mov	r2, r0
   19f10:	mov	r1, #1
   19f14:	add	r0, sp, #4
   19f18:	bl	113c8 <__vasprintf_chk@plt>
   19f1c:	cmp	r0, #0
   19f20:	ldrge	r0, [sp, #4]
   19f24:	bge	19f00 <__assert_fail@plt+0x8a24>
   19f28:	bl	113a4 <__errno_location@plt>
   19f2c:	ldr	r3, [r0]
   19f30:	cmp	r3, #12
   19f34:	movne	r0, #0
   19f38:	bne	19f00 <__assert_fail@plt+0x8a24>
   19f3c:	bl	19758 <__assert_fail@plt+0x827c>
   19f40:	cmp	r1, #0
   19f44:	cmpne	r0, #0
   19f48:	moveq	r1, #1
   19f4c:	moveq	r0, r1
   19f50:	umull	r2, r3, r0, r1
   19f54:	adds	r3, r3, #0
   19f58:	movne	r3, #1
   19f5c:	cmp	r2, #0
   19f60:	blt	19f70 <__assert_fail@plt+0x8a94>
   19f64:	cmp	r3, #0
   19f68:	bne	19f70 <__assert_fail@plt+0x8a94>
   19f6c:	b	1114c <calloc@plt>
   19f70:	push	{r4, lr}
   19f74:	bl	113a4 <__errno_location@plt>
   19f78:	mov	r3, #12
   19f7c:	str	r3, [r0]
   19f80:	mov	r0, #0
   19f84:	pop	{r4, pc}
   19f88:	cmp	r0, #0
   19f8c:	moveq	r0, #1
   19f90:	cmp	r0, #0
   19f94:	blt	19f9c <__assert_fail@plt+0x8ac0>
   19f98:	b	112fc <malloc@plt>
   19f9c:	push	{r4, lr}
   19fa0:	bl	113a4 <__errno_location@plt>
   19fa4:	mov	r3, #12
   19fa8:	str	r3, [r0]
   19fac:	mov	r0, #0
   19fb0:	pop	{r4, pc}
   19fb4:	cmp	r0, #0
   19fb8:	beq	19fdc <__assert_fail@plt+0x8b00>
   19fbc:	cmp	r1, #0
   19fc0:	push	{lr}		; (str lr, [sp, #-4]!)
   19fc4:	sub	sp, sp, #12
   19fc8:	beq	19fe4 <__assert_fail@plt+0x8b08>
   19fcc:	blt	19ffc <__assert_fail@plt+0x8b20>
   19fd0:	add	sp, sp, #12
   19fd4:	pop	{lr}		; (ldr lr, [sp], #4)
   19fd8:	b	11248 <realloc@plt>
   19fdc:	mov	r0, r1
   19fe0:	b	19f88 <__assert_fail@plt+0x8aac>
   19fe4:	str	r1, [sp, #4]
   19fe8:	bl	1a3b4 <__assert_fail@plt+0x8ed8>
   19fec:	ldr	r3, [sp, #4]
   19ff0:	mov	r0, r3
   19ff4:	add	sp, sp, #12
   19ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   19ffc:	bl	113a4 <__errno_location@plt>
   1a000:	mov	r2, #12
   1a004:	mov	r3, #0
   1a008:	str	r2, [r0]
   1a00c:	b	19ff0 <__assert_fail@plt+0x8b14>
   1a010:	mov	r0, #1
   1a014:	b	14460 <__assert_fail@plt+0x2f84>
   1a018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a01c:	mov	r5, r1
   1a020:	sub	sp, sp, #12
   1a024:	mov	r4, r2
   1a028:	str	r2, [sp]
   1a02c:	mov	r7, r3
   1a030:	mov	sl, r0
   1a034:	bl	11380 <strlen@plt>
   1a038:	ldr	fp, [r5]
   1a03c:	cmp	fp, #0
   1a040:	beq	1a108 <__assert_fail@plt+0x8c2c>
   1a044:	mov	r3, #0
   1a048:	mov	r8, r0
   1a04c:	str	r3, [sp, #4]
   1a050:	mov	r6, r3
   1a054:	mvn	r9, #0
   1a058:	b	1a084 <__assert_fail@plt+0x8ba8>
   1a05c:	bl	11218 <memcmp@plt>
   1a060:	ldr	r3, [sp, #4]
   1a064:	cmp	r0, #0
   1a068:	movne	r3, #1
   1a06c:	str	r3, [sp, #4]
   1a070:	ldr	fp, [r5, #4]!
   1a074:	add	r6, r6, #1
   1a078:	cmp	fp, #0
   1a07c:	add	r4, r4, r7
   1a080:	beq	1a0e0 <__assert_fail@plt+0x8c04>
   1a084:	mov	r2, r8
   1a088:	mov	r1, sl
   1a08c:	mov	r0, fp
   1a090:	bl	11494 <strncmp@plt>
   1a094:	cmp	r0, #0
   1a098:	mov	r0, fp
   1a09c:	bne	1a070 <__assert_fail@plt+0x8b94>
   1a0a0:	bl	11380 <strlen@plt>
   1a0a4:	ldr	r3, [sp]
   1a0a8:	mov	r2, r7
   1a0ac:	mov	r1, r4
   1a0b0:	cmp	r8, r0
   1a0b4:	mla	r0, r7, r9, r3
   1a0b8:	beq	1a0f8 <__assert_fail@plt+0x8c1c>
   1a0bc:	cmn	r9, #1
   1a0c0:	moveq	r9, r6
   1a0c4:	beq	1a070 <__assert_fail@plt+0x8b94>
   1a0c8:	ldr	r3, [sp]
   1a0cc:	cmp	r3, #0
   1a0d0:	bne	1a05c <__assert_fail@plt+0x8b80>
   1a0d4:	mov	r3, #1
   1a0d8:	str	r3, [sp, #4]
   1a0dc:	b	1a070 <__assert_fail@plt+0x8b94>
   1a0e0:	ldr	r3, [sp, #4]
   1a0e4:	cmp	r3, #0
   1a0e8:	mvnne	r9, #1
   1a0ec:	mov	r0, r9
   1a0f0:	add	sp, sp, #12
   1a0f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0f8:	mov	r9, r6
   1a0fc:	mov	r0, r9
   1a100:	add	sp, sp, #12
   1a104:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a108:	mvn	r9, #0
   1a10c:	b	1a0ec <__assert_fail@plt+0x8c10>
   1a110:	push	{r4, r5, r6, lr}
   1a114:	mov	r6, r0
   1a118:	ldr	r0, [r1]
   1a11c:	cmp	r0, #0
   1a120:	beq	1a158 <__assert_fail@plt+0x8c7c>
   1a124:	mov	r4, r1
   1a128:	mov	r5, #0
   1a12c:	b	1a140 <__assert_fail@plt+0x8c64>
   1a130:	ldr	r0, [r4, #4]!
   1a134:	add	r5, r5, #1
   1a138:	cmp	r0, #0
   1a13c:	beq	1a158 <__assert_fail@plt+0x8c7c>
   1a140:	mov	r1, r6
   1a144:	bl	1117c <strcmp@plt>
   1a148:	cmp	r0, #0
   1a14c:	bne	1a130 <__assert_fail@plt+0x8c54>
   1a150:	mov	r0, r5
   1a154:	pop	{r4, r5, r6, pc}
   1a158:	mvn	r0, #0
   1a15c:	pop	{r4, r5, r6, pc}
   1a160:	cmn	r2, #1
   1a164:	push	{r4, r5, r6, lr}
   1a168:	mov	r2, #5
   1a16c:	sub	sp, sp, #8
   1a170:	mov	r4, r1
   1a174:	mov	r5, r0
   1a178:	ldreq	r1, [pc, #76]	; 1a1cc <__assert_fail@plt+0x8cf0>
   1a17c:	ldrne	r1, [pc, #76]	; 1a1d0 <__assert_fail@plt+0x8cf4>
   1a180:	mov	r0, #0
   1a184:	bl	11230 <dcgettext@plt>
   1a188:	mov	r2, r4
   1a18c:	mov	r1, #8
   1a190:	mov	r6, r0
   1a194:	mov	r0, #0
   1a198:	bl	1894c <__assert_fail@plt+0x7470>
   1a19c:	mov	r1, r5
   1a1a0:	mov	r4, r0
   1a1a4:	mov	r0, #1
   1a1a8:	bl	18be8 <__assert_fail@plt+0x770c>
   1a1ac:	mov	r1, #0
   1a1b0:	mov	r3, r4
   1a1b4:	mov	r2, r6
   1a1b8:	str	r0, [sp]
   1a1bc:	mov	r0, r1
   1a1c0:	bl	112d8 <error@plt>
   1a1c4:	add	sp, sp, #8
   1a1c8:	pop	{r4, r5, r6, pc}
   1a1cc:	andeq	sp, r1, r4, asr #2
   1a1d0:	andeq	sp, r1, r0, ror #2
   1a1d4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1d8:	mov	r6, r0
   1a1dc:	ldr	r9, [pc, #232]	; 1a2cc <__assert_fail@plt+0x8df0>
   1a1e0:	mov	r4, r1
   1a1e4:	mov	r7, r2
   1a1e8:	ldr	r1, [pc, #224]	; 1a2d0 <__assert_fail@plt+0x8df4>
   1a1ec:	mov	r2, #5
   1a1f0:	mov	r0, #0
   1a1f4:	bl	11230 <dcgettext@plt>
   1a1f8:	ldr	r1, [r9]
   1a1fc:	bl	11158 <fputs_unlocked@plt>
   1a200:	ldr	fp, [r6]
   1a204:	cmp	fp, #0
   1a208:	movne	r8, #0
   1a20c:	movne	r5, r8
   1a210:	movne	sl, #1
   1a214:	bne	1a254 <__assert_fail@plt+0x8d78>
   1a218:	b	1a298 <__assert_fail@plt+0x8dbc>
   1a21c:	mov	r0, fp
   1a220:	ldr	r8, [r9]
   1a224:	bl	18bf8 <__assert_fail@plt+0x771c>
   1a228:	ldr	r2, [pc, #164]	; 1a2d4 <__assert_fail@plt+0x8df8>
   1a22c:	mov	r1, sl
   1a230:	mov	r3, r0
   1a234:	mov	r0, r8
   1a238:	bl	11404 <__fprintf_chk@plt>
   1a23c:	mov	r8, r4
   1a240:	ldr	fp, [r6, #4]!
   1a244:	add	r5, r5, #1
   1a248:	cmp	fp, #0
   1a24c:	add	r4, r4, r7
   1a250:	beq	1a298 <__assert_fail@plt+0x8dbc>
   1a254:	cmp	r5, #0
   1a258:	mov	r1, r4
   1a25c:	mov	r2, r7
   1a260:	mov	r0, r8
   1a264:	beq	1a21c <__assert_fail@plt+0x8d40>
   1a268:	bl	11218 <memcmp@plt>
   1a26c:	cmp	r0, #0
   1a270:	bne	1a21c <__assert_fail@plt+0x8d40>
   1a274:	mov	r0, fp
   1a278:	ldr	fp, [r9]
   1a27c:	bl	18bf8 <__assert_fail@plt+0x771c>
   1a280:	ldr	r2, [pc, #80]	; 1a2d8 <__assert_fail@plt+0x8dfc>
   1a284:	mov	r1, sl
   1a288:	mov	r3, r0
   1a28c:	mov	r0, fp
   1a290:	bl	11404 <__fprintf_chk@plt>
   1a294:	b	1a240 <__assert_fail@plt+0x8d64>
   1a298:	ldr	r0, [r9]
   1a29c:	ldr	r3, [r0, #20]
   1a2a0:	ldr	r2, [r0, #24]
   1a2a4:	cmp	r3, r2
   1a2a8:	bcs	1a2c0 <__assert_fail@plt+0x8de4>
   1a2ac:	add	r1, r3, #1
   1a2b0:	mov	r2, #10
   1a2b4:	str	r1, [r0, #20]
   1a2b8:	strb	r2, [r3]
   1a2bc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2c0:	mov	r1, #10
   1a2c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2c8:	b	11434 <__overflow@plt>
   1a2cc:	ldrdeq	lr, [r2], -r8
   1a2d0:	andeq	sp, r1, r0, lsl #3
   1a2d4:	muleq	r1, r8, r1
   1a2d8:	strdeq	fp, [r1], -ip
   1a2dc:	push	{r4, r5, r6, r7, r8, lr}
   1a2e0:	mov	r7, r0
   1a2e4:	ldrb	ip, [sp, #32]
   1a2e8:	mov	r5, r1
   1a2ec:	mov	r4, r2
   1a2f0:	cmp	ip, #0
   1a2f4:	mov	r6, r3
   1a2f8:	beq	1a348 <__assert_fail@plt+0x8e6c>
   1a2fc:	ldr	r3, [sp, #24]
   1a300:	mov	r2, r6
   1a304:	mov	r1, r4
   1a308:	mov	r0, r5
   1a30c:	bl	1a018 <__assert_fail@plt+0x8b3c>
   1a310:	cmp	r0, #0
   1a314:	popge	{r4, r5, r6, r7, r8, pc}
   1a318:	mov	r2, r0
   1a31c:	mov	r1, r5
   1a320:	mov	r0, r7
   1a324:	bl	1a160 <__assert_fail@plt+0x8c84>
   1a328:	mov	r0, r4
   1a32c:	ldr	r2, [sp, #24]
   1a330:	mov	r1, r6
   1a334:	bl	1a1d4 <__assert_fail@plt+0x8cf8>
   1a338:	ldr	r3, [sp, #28]
   1a33c:	blx	r3
   1a340:	mvn	r0, #0
   1a344:	pop	{r4, r5, r6, r7, r8, pc}
   1a348:	mov	r1, r2
   1a34c:	mov	r0, r5
   1a350:	bl	1a110 <__assert_fail@plt+0x8c34>
   1a354:	cmp	r0, #0
   1a358:	popge	{r4, r5, r6, r7, r8, pc}
   1a35c:	b	1a318 <__assert_fail@plt+0x8e3c>
   1a360:	push	{r4, r5, r6, r7, r8, lr}
   1a364:	ldr	r7, [r1]
   1a368:	cmp	r7, #0
   1a36c:	beq	1a3ac <__assert_fail@plt+0x8ed0>
   1a370:	mov	r6, r3
   1a374:	mov	r8, r0
   1a378:	mov	r4, r2
   1a37c:	mov	r5, r1
   1a380:	b	1a390 <__assert_fail@plt+0x8eb4>
   1a384:	ldr	r7, [r5, #4]!
   1a388:	cmp	r7, #0
   1a38c:	beq	1a3ac <__assert_fail@plt+0x8ed0>
   1a390:	mov	r1, r4
   1a394:	mov	r2, r6
   1a398:	mov	r0, r8
   1a39c:	bl	11218 <memcmp@plt>
   1a3a0:	add	r4, r4, r6
   1a3a4:	cmp	r0, #0
   1a3a8:	bne	1a384 <__assert_fail@plt+0x8ea8>
   1a3ac:	mov	r0, r7
   1a3b0:	pop	{r4, r5, r6, r7, r8, pc}
   1a3b4:	push	{r4, r5, lr}
   1a3b8:	sub	sp, sp, #12
   1a3bc:	mov	r5, r0
   1a3c0:	bl	113a4 <__errno_location@plt>
   1a3c4:	mov	r2, #0
   1a3c8:	mov	r4, r0
   1a3cc:	ldr	r3, [r0]
   1a3d0:	str	r2, [r4]
   1a3d4:	mov	r0, r5
   1a3d8:	str	r3, [sp]
   1a3dc:	str	r3, [sp, #4]
   1a3e0:	bl	111c4 <free@plt>
   1a3e4:	ldr	r3, [r4]
   1a3e8:	add	r2, sp, #8
   1a3ec:	cmp	r3, #0
   1a3f0:	moveq	r3, #4
   1a3f4:	movne	r3, #0
   1a3f8:	add	r3, r2, r3
   1a3fc:	ldr	r3, [r3, #-8]
   1a400:	str	r3, [r4]
   1a404:	add	sp, sp, #12
   1a408:	pop	{r4, r5, pc}
   1a40c:	push	{r4, lr}
   1a410:	mov	r0, #14
   1a414:	bl	11464 <nl_langinfo@plt>
   1a418:	cmp	r0, #0
   1a41c:	beq	1a434 <__assert_fail@plt+0x8f58>
   1a420:	ldrb	r2, [r0]
   1a424:	ldr	r3, [pc, #16]	; 1a43c <__assert_fail@plt+0x8f60>
   1a428:	cmp	r2, #0
   1a42c:	moveq	r0, r3
   1a430:	pop	{r4, pc}
   1a434:	ldr	r0, [pc]	; 1a43c <__assert_fail@plt+0x8f60>
   1a438:	pop	{r4, pc}
   1a43c:	andeq	sp, r1, r0, lsr #3
   1a440:	push	{r4, r5, r6, r7, lr}
   1a444:	subs	r6, r0, #0
   1a448:	sub	sp, sp, #12
   1a44c:	addeq	r6, sp, #4
   1a450:	mov	r0, r6
   1a454:	mov	r5, r2
   1a458:	mov	r7, r1
   1a45c:	bl	112cc <mbrtowc@plt>
   1a460:	cmp	r5, #0
   1a464:	cmnne	r0, #3
   1a468:	mov	r4, r0
   1a46c:	bls	1a488 <__assert_fail@plt+0x8fac>
   1a470:	mov	r0, #0
   1a474:	bl	1a4e0 <__assert_fail@plt+0x9004>
   1a478:	cmp	r0, #0
   1a47c:	moveq	r4, #1
   1a480:	ldrbeq	r3, [r7]
   1a484:	streq	r3, [r6]
   1a488:	mov	r0, r4
   1a48c:	add	sp, sp, #12
   1a490:	pop	{r4, r5, r6, r7, pc}
   1a494:	push	{r4, r5, r6, lr}
   1a498:	subs	r4, r2, #0
   1a49c:	mov	r6, r0
   1a4a0:	mov	r5, r1
   1a4a4:	beq	1a4d0 <__assert_fail@plt+0x8ff4>
   1a4a8:	mov	r1, r4
   1a4ac:	mvn	r0, #0
   1a4b0:	bl	1a5d4 <__assert_fail@plt+0x90f8>
   1a4b4:	cmp	r0, r5
   1a4b8:	bcs	1a4d0 <__assert_fail@plt+0x8ff4>
   1a4bc:	bl	113a4 <__errno_location@plt>
   1a4c0:	mov	r3, #12
   1a4c4:	str	r3, [r0]
   1a4c8:	mov	r0, #0
   1a4cc:	pop	{r4, r5, r6, pc}
   1a4d0:	mul	r1, r5, r4
   1a4d4:	mov	r0, r6
   1a4d8:	pop	{r4, r5, r6, lr}
   1a4dc:	b	19fb4 <__assert_fail@plt+0x8ad8>
   1a4e0:	push	{lr}		; (str lr, [sp, #-4]!)
   1a4e4:	sub	sp, sp, #268	; 0x10c
   1a4e8:	add	r1, sp, #4
   1a4ec:	ldr	r2, [pc, #60]	; 1a530 <__assert_fail@plt+0x9054>
   1a4f0:	bl	1a53c <__assert_fail@plt+0x9060>
   1a4f4:	cmp	r0, #0
   1a4f8:	movne	r0, #0
   1a4fc:	bne	1a528 <__assert_fail@plt+0x904c>
   1a500:	ldr	r1, [pc, #44]	; 1a534 <__assert_fail@plt+0x9058>
   1a504:	add	r0, sp, #4
   1a508:	bl	1117c <strcmp@plt>
   1a50c:	cmp	r0, #0
   1a510:	beq	1a528 <__assert_fail@plt+0x904c>
   1a514:	add	r0, sp, #4
   1a518:	ldr	r1, [pc, #24]	; 1a538 <__assert_fail@plt+0x905c>
   1a51c:	bl	1117c <strcmp@plt>
   1a520:	adds	r0, r0, #0
   1a524:	movne	r0, #1
   1a528:	add	sp, sp, #268	; 0x10c
   1a52c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a530:	andeq	r0, r0, r1, lsl #2
   1a534:	andeq	sp, r1, r8, lsr #3
   1a538:	andeq	sp, r1, ip, lsr #3
   1a53c:	push	{r4, r5, r6, lr}
   1a540:	mov	r5, r1
   1a544:	mov	r1, #0
   1a548:	mov	r4, r2
   1a54c:	bl	11440 <setlocale@plt>
   1a550:	subs	r6, r0, #0
   1a554:	beq	1a5b0 <__assert_fail@plt+0x90d4>
   1a558:	bl	11380 <strlen@plt>
   1a55c:	cmp	r4, r0
   1a560:	bhi	1a598 <__assert_fail@plt+0x90bc>
   1a564:	cmp	r4, #0
   1a568:	bne	1a574 <__assert_fail@plt+0x9098>
   1a56c:	mov	r0, #34	; 0x22
   1a570:	pop	{r4, r5, r6, pc}
   1a574:	sub	r4, r4, #1
   1a578:	mov	r1, r6
   1a57c:	mov	r2, r4
   1a580:	mov	r0, r5
   1a584:	bl	111e8 <memcpy@plt>
   1a588:	mov	r3, #0
   1a58c:	strb	r3, [r5, r4]
   1a590:	mov	r0, #34	; 0x22
   1a594:	pop	{r4, r5, r6, pc}
   1a598:	add	r2, r0, #1
   1a59c:	mov	r1, r6
   1a5a0:	mov	r0, r5
   1a5a4:	bl	111e8 <memcpy@plt>
   1a5a8:	mov	r0, #0
   1a5ac:	pop	{r4, r5, r6, pc}
   1a5b0:	cmp	r4, #0
   1a5b4:	beq	1a5c4 <__assert_fail@plt+0x90e8>
   1a5b8:	strb	r6, [r5]
   1a5bc:	mov	r0, #22
   1a5c0:	pop	{r4, r5, r6, pc}
   1a5c4:	mov	r0, #22
   1a5c8:	pop	{r4, r5, r6, pc}
   1a5cc:	mov	r1, #0
   1a5d0:	b	11440 <setlocale@plt>
   1a5d4:	subs	r2, r1, #1
   1a5d8:	bxeq	lr
   1a5dc:	bcc	1a7b4 <__assert_fail@plt+0x92d8>
   1a5e0:	cmp	r0, r1
   1a5e4:	bls	1a798 <__assert_fail@plt+0x92bc>
   1a5e8:	tst	r1, r2
   1a5ec:	beq	1a7a4 <__assert_fail@plt+0x92c8>
   1a5f0:	clz	r3, r0
   1a5f4:	clz	r2, r1
   1a5f8:	sub	r3, r2, r3
   1a5fc:	rsbs	r3, r3, #31
   1a600:	addne	r3, r3, r3, lsl #1
   1a604:	mov	r2, #0
   1a608:	addne	pc, pc, r3, lsl #2
   1a60c:	nop			; (mov r0, r0)
   1a610:	cmp	r0, r1, lsl #31
   1a614:	adc	r2, r2, r2
   1a618:	subcs	r0, r0, r1, lsl #31
   1a61c:	cmp	r0, r1, lsl #30
   1a620:	adc	r2, r2, r2
   1a624:	subcs	r0, r0, r1, lsl #30
   1a628:	cmp	r0, r1, lsl #29
   1a62c:	adc	r2, r2, r2
   1a630:	subcs	r0, r0, r1, lsl #29
   1a634:	cmp	r0, r1, lsl #28
   1a638:	adc	r2, r2, r2
   1a63c:	subcs	r0, r0, r1, lsl #28
   1a640:	cmp	r0, r1, lsl #27
   1a644:	adc	r2, r2, r2
   1a648:	subcs	r0, r0, r1, lsl #27
   1a64c:	cmp	r0, r1, lsl #26
   1a650:	adc	r2, r2, r2
   1a654:	subcs	r0, r0, r1, lsl #26
   1a658:	cmp	r0, r1, lsl #25
   1a65c:	adc	r2, r2, r2
   1a660:	subcs	r0, r0, r1, lsl #25
   1a664:	cmp	r0, r1, lsl #24
   1a668:	adc	r2, r2, r2
   1a66c:	subcs	r0, r0, r1, lsl #24
   1a670:	cmp	r0, r1, lsl #23
   1a674:	adc	r2, r2, r2
   1a678:	subcs	r0, r0, r1, lsl #23
   1a67c:	cmp	r0, r1, lsl #22
   1a680:	adc	r2, r2, r2
   1a684:	subcs	r0, r0, r1, lsl #22
   1a688:	cmp	r0, r1, lsl #21
   1a68c:	adc	r2, r2, r2
   1a690:	subcs	r0, r0, r1, lsl #21
   1a694:	cmp	r0, r1, lsl #20
   1a698:	adc	r2, r2, r2
   1a69c:	subcs	r0, r0, r1, lsl #20
   1a6a0:	cmp	r0, r1, lsl #19
   1a6a4:	adc	r2, r2, r2
   1a6a8:	subcs	r0, r0, r1, lsl #19
   1a6ac:	cmp	r0, r1, lsl #18
   1a6b0:	adc	r2, r2, r2
   1a6b4:	subcs	r0, r0, r1, lsl #18
   1a6b8:	cmp	r0, r1, lsl #17
   1a6bc:	adc	r2, r2, r2
   1a6c0:	subcs	r0, r0, r1, lsl #17
   1a6c4:	cmp	r0, r1, lsl #16
   1a6c8:	adc	r2, r2, r2
   1a6cc:	subcs	r0, r0, r1, lsl #16
   1a6d0:	cmp	r0, r1, lsl #15
   1a6d4:	adc	r2, r2, r2
   1a6d8:	subcs	r0, r0, r1, lsl #15
   1a6dc:	cmp	r0, r1, lsl #14
   1a6e0:	adc	r2, r2, r2
   1a6e4:	subcs	r0, r0, r1, lsl #14
   1a6e8:	cmp	r0, r1, lsl #13
   1a6ec:	adc	r2, r2, r2
   1a6f0:	subcs	r0, r0, r1, lsl #13
   1a6f4:	cmp	r0, r1, lsl #12
   1a6f8:	adc	r2, r2, r2
   1a6fc:	subcs	r0, r0, r1, lsl #12
   1a700:	cmp	r0, r1, lsl #11
   1a704:	adc	r2, r2, r2
   1a708:	subcs	r0, r0, r1, lsl #11
   1a70c:	cmp	r0, r1, lsl #10
   1a710:	adc	r2, r2, r2
   1a714:	subcs	r0, r0, r1, lsl #10
   1a718:	cmp	r0, r1, lsl #9
   1a71c:	adc	r2, r2, r2
   1a720:	subcs	r0, r0, r1, lsl #9
   1a724:	cmp	r0, r1, lsl #8
   1a728:	adc	r2, r2, r2
   1a72c:	subcs	r0, r0, r1, lsl #8
   1a730:	cmp	r0, r1, lsl #7
   1a734:	adc	r2, r2, r2
   1a738:	subcs	r0, r0, r1, lsl #7
   1a73c:	cmp	r0, r1, lsl #6
   1a740:	adc	r2, r2, r2
   1a744:	subcs	r0, r0, r1, lsl #6
   1a748:	cmp	r0, r1, lsl #5
   1a74c:	adc	r2, r2, r2
   1a750:	subcs	r0, r0, r1, lsl #5
   1a754:	cmp	r0, r1, lsl #4
   1a758:	adc	r2, r2, r2
   1a75c:	subcs	r0, r0, r1, lsl #4
   1a760:	cmp	r0, r1, lsl #3
   1a764:	adc	r2, r2, r2
   1a768:	subcs	r0, r0, r1, lsl #3
   1a76c:	cmp	r0, r1, lsl #2
   1a770:	adc	r2, r2, r2
   1a774:	subcs	r0, r0, r1, lsl #2
   1a778:	cmp	r0, r1, lsl #1
   1a77c:	adc	r2, r2, r2
   1a780:	subcs	r0, r0, r1, lsl #1
   1a784:	cmp	r0, r1
   1a788:	adc	r2, r2, r2
   1a78c:	subcs	r0, r0, r1
   1a790:	mov	r0, r2
   1a794:	bx	lr
   1a798:	moveq	r0, #1
   1a79c:	movne	r0, #0
   1a7a0:	bx	lr
   1a7a4:	clz	r2, r1
   1a7a8:	rsb	r2, r2, #31
   1a7ac:	lsr	r0, r0, r2
   1a7b0:	bx	lr
   1a7b4:	cmp	r0, #0
   1a7b8:	mvnne	r0, #0
   1a7bc:	b	1aee8 <__assert_fail@plt+0x9a0c>
   1a7c0:	cmp	r1, #0
   1a7c4:	beq	1a7b4 <__assert_fail@plt+0x92d8>
   1a7c8:	push	{r0, r1, lr}
   1a7cc:	bl	1a5d4 <__assert_fail@plt+0x90f8>
   1a7d0:	pop	{r1, r2, lr}
   1a7d4:	mul	r3, r2, r0
   1a7d8:	sub	r1, r1, r3
   1a7dc:	bx	lr
   1a7e0:	cmp	r1, #0
   1a7e4:	beq	1a9f0 <__assert_fail@plt+0x9514>
   1a7e8:	eor	ip, r0, r1
   1a7ec:	rsbmi	r1, r1, #0
   1a7f0:	subs	r2, r1, #1
   1a7f4:	beq	1a9bc <__assert_fail@plt+0x94e0>
   1a7f8:	movs	r3, r0
   1a7fc:	rsbmi	r3, r0, #0
   1a800:	cmp	r3, r1
   1a804:	bls	1a9c8 <__assert_fail@plt+0x94ec>
   1a808:	tst	r1, r2
   1a80c:	beq	1a9d8 <__assert_fail@plt+0x94fc>
   1a810:	clz	r2, r3
   1a814:	clz	r0, r1
   1a818:	sub	r2, r0, r2
   1a81c:	rsbs	r2, r2, #31
   1a820:	addne	r2, r2, r2, lsl #1
   1a824:	mov	r0, #0
   1a828:	addne	pc, pc, r2, lsl #2
   1a82c:	nop			; (mov r0, r0)
   1a830:	cmp	r3, r1, lsl #31
   1a834:	adc	r0, r0, r0
   1a838:	subcs	r3, r3, r1, lsl #31
   1a83c:	cmp	r3, r1, lsl #30
   1a840:	adc	r0, r0, r0
   1a844:	subcs	r3, r3, r1, lsl #30
   1a848:	cmp	r3, r1, lsl #29
   1a84c:	adc	r0, r0, r0
   1a850:	subcs	r3, r3, r1, lsl #29
   1a854:	cmp	r3, r1, lsl #28
   1a858:	adc	r0, r0, r0
   1a85c:	subcs	r3, r3, r1, lsl #28
   1a860:	cmp	r3, r1, lsl #27
   1a864:	adc	r0, r0, r0
   1a868:	subcs	r3, r3, r1, lsl #27
   1a86c:	cmp	r3, r1, lsl #26
   1a870:	adc	r0, r0, r0
   1a874:	subcs	r3, r3, r1, lsl #26
   1a878:	cmp	r3, r1, lsl #25
   1a87c:	adc	r0, r0, r0
   1a880:	subcs	r3, r3, r1, lsl #25
   1a884:	cmp	r3, r1, lsl #24
   1a888:	adc	r0, r0, r0
   1a88c:	subcs	r3, r3, r1, lsl #24
   1a890:	cmp	r3, r1, lsl #23
   1a894:	adc	r0, r0, r0
   1a898:	subcs	r3, r3, r1, lsl #23
   1a89c:	cmp	r3, r1, lsl #22
   1a8a0:	adc	r0, r0, r0
   1a8a4:	subcs	r3, r3, r1, lsl #22
   1a8a8:	cmp	r3, r1, lsl #21
   1a8ac:	adc	r0, r0, r0
   1a8b0:	subcs	r3, r3, r1, lsl #21
   1a8b4:	cmp	r3, r1, lsl #20
   1a8b8:	adc	r0, r0, r0
   1a8bc:	subcs	r3, r3, r1, lsl #20
   1a8c0:	cmp	r3, r1, lsl #19
   1a8c4:	adc	r0, r0, r0
   1a8c8:	subcs	r3, r3, r1, lsl #19
   1a8cc:	cmp	r3, r1, lsl #18
   1a8d0:	adc	r0, r0, r0
   1a8d4:	subcs	r3, r3, r1, lsl #18
   1a8d8:	cmp	r3, r1, lsl #17
   1a8dc:	adc	r0, r0, r0
   1a8e0:	subcs	r3, r3, r1, lsl #17
   1a8e4:	cmp	r3, r1, lsl #16
   1a8e8:	adc	r0, r0, r0
   1a8ec:	subcs	r3, r3, r1, lsl #16
   1a8f0:	cmp	r3, r1, lsl #15
   1a8f4:	adc	r0, r0, r0
   1a8f8:	subcs	r3, r3, r1, lsl #15
   1a8fc:	cmp	r3, r1, lsl #14
   1a900:	adc	r0, r0, r0
   1a904:	subcs	r3, r3, r1, lsl #14
   1a908:	cmp	r3, r1, lsl #13
   1a90c:	adc	r0, r0, r0
   1a910:	subcs	r3, r3, r1, lsl #13
   1a914:	cmp	r3, r1, lsl #12
   1a918:	adc	r0, r0, r0
   1a91c:	subcs	r3, r3, r1, lsl #12
   1a920:	cmp	r3, r1, lsl #11
   1a924:	adc	r0, r0, r0
   1a928:	subcs	r3, r3, r1, lsl #11
   1a92c:	cmp	r3, r1, lsl #10
   1a930:	adc	r0, r0, r0
   1a934:	subcs	r3, r3, r1, lsl #10
   1a938:	cmp	r3, r1, lsl #9
   1a93c:	adc	r0, r0, r0
   1a940:	subcs	r3, r3, r1, lsl #9
   1a944:	cmp	r3, r1, lsl #8
   1a948:	adc	r0, r0, r0
   1a94c:	subcs	r3, r3, r1, lsl #8
   1a950:	cmp	r3, r1, lsl #7
   1a954:	adc	r0, r0, r0
   1a958:	subcs	r3, r3, r1, lsl #7
   1a95c:	cmp	r3, r1, lsl #6
   1a960:	adc	r0, r0, r0
   1a964:	subcs	r3, r3, r1, lsl #6
   1a968:	cmp	r3, r1, lsl #5
   1a96c:	adc	r0, r0, r0
   1a970:	subcs	r3, r3, r1, lsl #5
   1a974:	cmp	r3, r1, lsl #4
   1a978:	adc	r0, r0, r0
   1a97c:	subcs	r3, r3, r1, lsl #4
   1a980:	cmp	r3, r1, lsl #3
   1a984:	adc	r0, r0, r0
   1a988:	subcs	r3, r3, r1, lsl #3
   1a98c:	cmp	r3, r1, lsl #2
   1a990:	adc	r0, r0, r0
   1a994:	subcs	r3, r3, r1, lsl #2
   1a998:	cmp	r3, r1, lsl #1
   1a99c:	adc	r0, r0, r0
   1a9a0:	subcs	r3, r3, r1, lsl #1
   1a9a4:	cmp	r3, r1
   1a9a8:	adc	r0, r0, r0
   1a9ac:	subcs	r3, r3, r1
   1a9b0:	cmp	ip, #0
   1a9b4:	rsbmi	r0, r0, #0
   1a9b8:	bx	lr
   1a9bc:	teq	ip, r0
   1a9c0:	rsbmi	r0, r0, #0
   1a9c4:	bx	lr
   1a9c8:	movcc	r0, #0
   1a9cc:	asreq	r0, ip, #31
   1a9d0:	orreq	r0, r0, #1
   1a9d4:	bx	lr
   1a9d8:	clz	r2, r1
   1a9dc:	rsb	r2, r2, #31
   1a9e0:	cmp	ip, #0
   1a9e4:	lsr	r0, r3, r2
   1a9e8:	rsbmi	r0, r0, #0
   1a9ec:	bx	lr
   1a9f0:	cmp	r0, #0
   1a9f4:	mvngt	r0, #-2147483648	; 0x80000000
   1a9f8:	movlt	r0, #-2147483648	; 0x80000000
   1a9fc:	b	1aee8 <__assert_fail@plt+0x9a0c>
   1aa00:	cmp	r1, #0
   1aa04:	beq	1a9f0 <__assert_fail@plt+0x9514>
   1aa08:	push	{r0, r1, lr}
   1aa0c:	bl	1a7e8 <__assert_fail@plt+0x930c>
   1aa10:	pop	{r1, r2, lr}
   1aa14:	mul	r3, r2, r0
   1aa18:	sub	r1, r1, r3
   1aa1c:	bx	lr
   1aa20:	eor	r1, r1, #-2147483648	; 0x80000000
   1aa24:	b	1aa2c <__assert_fail@plt+0x9550>
   1aa28:	eor	r3, r3, #-2147483648	; 0x80000000
   1aa2c:	push	{r4, r5, lr}
   1aa30:	lsl	r4, r1, #1
   1aa34:	lsl	r5, r3, #1
   1aa38:	teq	r4, r5
   1aa3c:	teqeq	r0, r2
   1aa40:	orrsne	ip, r4, r0
   1aa44:	orrsne	ip, r5, r2
   1aa48:	mvnsne	ip, r4, asr #21
   1aa4c:	mvnsne	ip, r5, asr #21
   1aa50:	beq	1ac3c <__assert_fail@plt+0x9760>
   1aa54:	lsr	r4, r4, #21
   1aa58:	rsbs	r5, r4, r5, lsr #21
   1aa5c:	rsblt	r5, r5, #0
   1aa60:	ble	1aa80 <__assert_fail@plt+0x95a4>
   1aa64:	add	r4, r4, r5
   1aa68:	eor	r2, r0, r2
   1aa6c:	eor	r3, r1, r3
   1aa70:	eor	r0, r2, r0
   1aa74:	eor	r1, r3, r1
   1aa78:	eor	r2, r0, r2
   1aa7c:	eor	r3, r1, r3
   1aa80:	cmp	r5, #54	; 0x36
   1aa84:	pophi	{r4, r5, pc}
   1aa88:	tst	r1, #-2147483648	; 0x80000000
   1aa8c:	lsl	r1, r1, #12
   1aa90:	mov	ip, #1048576	; 0x100000
   1aa94:	orr	r1, ip, r1, lsr #12
   1aa98:	beq	1aaa4 <__assert_fail@plt+0x95c8>
   1aa9c:	rsbs	r0, r0, #0
   1aaa0:	rsc	r1, r1, #0
   1aaa4:	tst	r3, #-2147483648	; 0x80000000
   1aaa8:	lsl	r3, r3, #12
   1aaac:	orr	r3, ip, r3, lsr #12
   1aab0:	beq	1aabc <__assert_fail@plt+0x95e0>
   1aab4:	rsbs	r2, r2, #0
   1aab8:	rsc	r3, r3, #0
   1aabc:	teq	r4, r5
   1aac0:	beq	1ac24 <__assert_fail@plt+0x9748>
   1aac4:	sub	r4, r4, #1
   1aac8:	rsbs	lr, r5, #32
   1aacc:	blt	1aae8 <__assert_fail@plt+0x960c>
   1aad0:	lsl	ip, r2, lr
   1aad4:	adds	r0, r0, r2, lsr r5
   1aad8:	adc	r1, r1, #0
   1aadc:	adds	r0, r0, r3, lsl lr
   1aae0:	adcs	r1, r1, r3, asr r5
   1aae4:	b	1ab04 <__assert_fail@plt+0x9628>
   1aae8:	sub	r5, r5, #32
   1aaec:	add	lr, lr, #32
   1aaf0:	cmp	r2, #1
   1aaf4:	lsl	ip, r3, lr
   1aaf8:	orrcs	ip, ip, #2
   1aafc:	adds	r0, r0, r3, asr r5
   1ab00:	adcs	r1, r1, r3, asr #31
   1ab04:	and	r5, r1, #-2147483648	; 0x80000000
   1ab08:	bpl	1ab18 <__assert_fail@plt+0x963c>
   1ab0c:	rsbs	ip, ip, #0
   1ab10:	rscs	r0, r0, #0
   1ab14:	rsc	r1, r1, #0
   1ab18:	cmp	r1, #1048576	; 0x100000
   1ab1c:	bcc	1ab5c <__assert_fail@plt+0x9680>
   1ab20:	cmp	r1, #2097152	; 0x200000
   1ab24:	bcc	1ab44 <__assert_fail@plt+0x9668>
   1ab28:	lsrs	r1, r1, #1
   1ab2c:	rrxs	r0, r0
   1ab30:	rrx	ip, ip
   1ab34:	add	r4, r4, #1
   1ab38:	lsl	r2, r4, #21
   1ab3c:	cmn	r2, #4194304	; 0x400000
   1ab40:	bcs	1ac9c <__assert_fail@plt+0x97c0>
   1ab44:	cmp	ip, #-2147483648	; 0x80000000
   1ab48:	lsrseq	ip, r0, #1
   1ab4c:	adcs	r0, r0, #0
   1ab50:	adc	r1, r1, r4, lsl #20
   1ab54:	orr	r1, r1, r5
   1ab58:	pop	{r4, r5, pc}
   1ab5c:	lsls	ip, ip, #1
   1ab60:	adcs	r0, r0, r0
   1ab64:	adc	r1, r1, r1
   1ab68:	tst	r1, #1048576	; 0x100000
   1ab6c:	sub	r4, r4, #1
   1ab70:	bne	1ab44 <__assert_fail@plt+0x9668>
   1ab74:	teq	r1, #0
   1ab78:	moveq	r1, r0
   1ab7c:	moveq	r0, #0
   1ab80:	clz	r3, r1
   1ab84:	addeq	r3, r3, #32
   1ab88:	sub	r3, r3, #11
   1ab8c:	subs	r2, r3, #32
   1ab90:	bge	1abb4 <__assert_fail@plt+0x96d8>
   1ab94:	adds	r2, r2, #12
   1ab98:	ble	1abb0 <__assert_fail@plt+0x96d4>
   1ab9c:	add	ip, r2, #20
   1aba0:	rsb	r2, r2, #12
   1aba4:	lsl	r0, r1, ip
   1aba8:	lsr	r1, r1, r2
   1abac:	b	1abc4 <__assert_fail@plt+0x96e8>
   1abb0:	add	r2, r2, #20
   1abb4:	rsble	ip, r2, #32
   1abb8:	lsl	r1, r1, r2
   1abbc:	orrle	r1, r1, r0, lsr ip
   1abc0:	lslle	r0, r0, r2
   1abc4:	subs	r4, r4, r3
   1abc8:	addge	r1, r1, r4, lsl #20
   1abcc:	orrge	r1, r1, r5
   1abd0:	popge	{r4, r5, pc}
   1abd4:	mvn	r4, r4
   1abd8:	subs	r4, r4, #31
   1abdc:	bge	1ac18 <__assert_fail@plt+0x973c>
   1abe0:	adds	r4, r4, #12
   1abe4:	bgt	1ac00 <__assert_fail@plt+0x9724>
   1abe8:	add	r4, r4, #20
   1abec:	rsb	r2, r4, #32
   1abf0:	lsr	r0, r0, r4
   1abf4:	orr	r0, r0, r1, lsl r2
   1abf8:	orr	r1, r5, r1, lsr r4
   1abfc:	pop	{r4, r5, pc}
   1ac00:	rsb	r4, r4, #12
   1ac04:	rsb	r2, r4, #32
   1ac08:	lsr	r0, r0, r2
   1ac0c:	orr	r0, r0, r1, lsl r4
   1ac10:	mov	r1, r5
   1ac14:	pop	{r4, r5, pc}
   1ac18:	lsr	r0, r1, r4
   1ac1c:	mov	r1, r5
   1ac20:	pop	{r4, r5, pc}
   1ac24:	teq	r4, #0
   1ac28:	eor	r3, r3, #1048576	; 0x100000
   1ac2c:	eoreq	r1, r1, #1048576	; 0x100000
   1ac30:	addeq	r4, r4, #1
   1ac34:	subne	r5, r5, #1
   1ac38:	b	1aac4 <__assert_fail@plt+0x95e8>
   1ac3c:	mvns	ip, r4, asr #21
   1ac40:	mvnsne	ip, r5, asr #21
   1ac44:	beq	1acac <__assert_fail@plt+0x97d0>
   1ac48:	teq	r4, r5
   1ac4c:	teqeq	r0, r2
   1ac50:	beq	1ac64 <__assert_fail@plt+0x9788>
   1ac54:	orrs	ip, r4, r0
   1ac58:	moveq	r1, r3
   1ac5c:	moveq	r0, r2
   1ac60:	pop	{r4, r5, pc}
   1ac64:	teq	r1, r3
   1ac68:	movne	r1, #0
   1ac6c:	movne	r0, #0
   1ac70:	popne	{r4, r5, pc}
   1ac74:	lsrs	ip, r4, #21
   1ac78:	bne	1ac8c <__assert_fail@plt+0x97b0>
   1ac7c:	lsls	r0, r0, #1
   1ac80:	adcs	r1, r1, r1
   1ac84:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1ac88:	pop	{r4, r5, pc}
   1ac8c:	adds	r4, r4, #4194304	; 0x400000
   1ac90:	addcc	r1, r1, #1048576	; 0x100000
   1ac94:	popcc	{r4, r5, pc}
   1ac98:	and	r5, r1, #-2147483648	; 0x80000000
   1ac9c:	orr	r1, r5, #2130706432	; 0x7f000000
   1aca0:	orr	r1, r1, #15728640	; 0xf00000
   1aca4:	mov	r0, #0
   1aca8:	pop	{r4, r5, pc}
   1acac:	mvns	ip, r4, asr #21
   1acb0:	movne	r1, r3
   1acb4:	movne	r0, r2
   1acb8:	mvnseq	ip, r5, asr #21
   1acbc:	movne	r3, r1
   1acc0:	movne	r2, r0
   1acc4:	orrs	r4, r0, r1, lsl #12
   1acc8:	orrseq	r5, r2, r3, lsl #12
   1accc:	teqeq	r1, r3
   1acd0:	orrne	r1, r1, #524288	; 0x80000
   1acd4:	pop	{r4, r5, pc}
   1acd8:	teq	r0, #0
   1acdc:	moveq	r1, #0
   1ace0:	bxeq	lr
   1ace4:	push	{r4, r5, lr}
   1ace8:	mov	r4, #1024	; 0x400
   1acec:	add	r4, r4, #50	; 0x32
   1acf0:	mov	r5, #0
   1acf4:	mov	r1, #0
   1acf8:	b	1ab74 <__assert_fail@plt+0x9698>
   1acfc:	teq	r0, #0
   1ad00:	moveq	r1, #0
   1ad04:	bxeq	lr
   1ad08:	push	{r4, r5, lr}
   1ad0c:	mov	r4, #1024	; 0x400
   1ad10:	add	r4, r4, #50	; 0x32
   1ad14:	ands	r5, r0, #-2147483648	; 0x80000000
   1ad18:	rsbmi	r0, r0, #0
   1ad1c:	mov	r1, #0
   1ad20:	b	1ab74 <__assert_fail@plt+0x9698>
   1ad24:	lsls	r2, r0, #1
   1ad28:	asr	r1, r2, #3
   1ad2c:	rrx	r1, r1
   1ad30:	lsl	r0, r2, #28
   1ad34:	andsne	r3, r2, #-16777216	; 0xff000000
   1ad38:	teqne	r3, #-16777216	; 0xff000000
   1ad3c:	eorne	r1, r1, #939524096	; 0x38000000
   1ad40:	bxne	lr
   1ad44:	teq	r2, #0
   1ad48:	teqne	r3, #-16777216	; 0xff000000
   1ad4c:	bxeq	lr
   1ad50:	push	{r4, r5, lr}
   1ad54:	mov	r4, #896	; 0x380
   1ad58:	and	r5, r1, #-2147483648	; 0x80000000
   1ad5c:	bic	r1, r1, #-2147483648	; 0x80000000
   1ad60:	b	1ab74 <__assert_fail@plt+0x9698>
   1ad64:	orrs	r2, r0, r1
   1ad68:	bxeq	lr
   1ad6c:	push	{r4, r5, lr}
   1ad70:	mov	r5, #0
   1ad74:	b	1ad94 <__assert_fail@plt+0x98b8>
   1ad78:	orrs	r2, r0, r1
   1ad7c:	bxeq	lr
   1ad80:	push	{r4, r5, lr}
   1ad84:	ands	r5, r1, #-2147483648	; 0x80000000
   1ad88:	bpl	1ad94 <__assert_fail@plt+0x98b8>
   1ad8c:	rsbs	r0, r0, #0
   1ad90:	rsc	r1, r1, #0
   1ad94:	mov	r4, #1024	; 0x400
   1ad98:	add	r4, r4, #50	; 0x32
   1ad9c:	lsrs	ip, r1, #22
   1ada0:	beq	1ab18 <__assert_fail@plt+0x963c>
   1ada4:	mov	r2, #3
   1ada8:	lsrs	ip, ip, #3
   1adac:	addne	r2, r2, #3
   1adb0:	lsrs	ip, ip, #3
   1adb4:	addne	r2, r2, #3
   1adb8:	add	r2, r2, ip, lsr #3
   1adbc:	rsb	r3, r2, #32
   1adc0:	lsl	ip, r0, r3
   1adc4:	lsr	r0, r0, r2
   1adc8:	orr	r0, r0, r1, lsl r3
   1adcc:	lsr	r1, r1, r2
   1add0:	add	r4, r4, r2
   1add4:	b	1ab18 <__assert_fail@plt+0x963c>
   1add8:	cmp	r3, #0
   1addc:	cmpeq	r2, #0
   1ade0:	bne	1ae04 <__assert_fail@plt+0x9928>
   1ade4:	cmp	r1, #0
   1ade8:	movlt	r1, #-2147483648	; 0x80000000
   1adec:	movlt	r0, #0
   1adf0:	blt	1ae00 <__assert_fail@plt+0x9924>
   1adf4:	cmpeq	r0, #0
   1adf8:	mvnne	r1, #-2147483648	; 0x80000000
   1adfc:	mvnne	r0, #0
   1ae00:	b	1aee8 <__assert_fail@plt+0x9a0c>
   1ae04:	sub	sp, sp, #8
   1ae08:	push	{sp, lr}
   1ae0c:	cmp	r1, #0
   1ae10:	blt	1ae30 <__assert_fail@plt+0x9954>
   1ae14:	cmp	r3, #0
   1ae18:	blt	1ae64 <__assert_fail@plt+0x9988>
   1ae1c:	bl	1af40 <__assert_fail@plt+0x9a64>
   1ae20:	ldr	lr, [sp, #4]
   1ae24:	add	sp, sp, #8
   1ae28:	pop	{r2, r3}
   1ae2c:	bx	lr
   1ae30:	rsbs	r0, r0, #0
   1ae34:	sbc	r1, r1, r1, lsl #1
   1ae38:	cmp	r3, #0
   1ae3c:	blt	1ae88 <__assert_fail@plt+0x99ac>
   1ae40:	bl	1af40 <__assert_fail@plt+0x9a64>
   1ae44:	ldr	lr, [sp, #4]
   1ae48:	add	sp, sp, #8
   1ae4c:	pop	{r2, r3}
   1ae50:	rsbs	r0, r0, #0
   1ae54:	sbc	r1, r1, r1, lsl #1
   1ae58:	rsbs	r2, r2, #0
   1ae5c:	sbc	r3, r3, r3, lsl #1
   1ae60:	bx	lr
   1ae64:	rsbs	r2, r2, #0
   1ae68:	sbc	r3, r3, r3, lsl #1
   1ae6c:	bl	1af40 <__assert_fail@plt+0x9a64>
   1ae70:	ldr	lr, [sp, #4]
   1ae74:	add	sp, sp, #8
   1ae78:	pop	{r2, r3}
   1ae7c:	rsbs	r0, r0, #0
   1ae80:	sbc	r1, r1, r1, lsl #1
   1ae84:	bx	lr
   1ae88:	rsbs	r2, r2, #0
   1ae8c:	sbc	r3, r3, r3, lsl #1
   1ae90:	bl	1af40 <__assert_fail@plt+0x9a64>
   1ae94:	ldr	lr, [sp, #4]
   1ae98:	add	sp, sp, #8
   1ae9c:	pop	{r2, r3}
   1aea0:	rsbs	r2, r2, #0
   1aea4:	sbc	r3, r3, r3, lsl #1
   1aea8:	bx	lr
   1aeac:	cmp	r3, #0
   1aeb0:	cmpeq	r2, #0
   1aeb4:	bne	1aecc <__assert_fail@plt+0x99f0>
   1aeb8:	cmp	r1, #0
   1aebc:	cmpeq	r0, #0
   1aec0:	mvnne	r1, #0
   1aec4:	mvnne	r0, #0
   1aec8:	b	1aee8 <__assert_fail@plt+0x9a0c>
   1aecc:	sub	sp, sp, #8
   1aed0:	push	{sp, lr}
   1aed4:	bl	1af40 <__assert_fail@plt+0x9a64>
   1aed8:	ldr	lr, [sp, #4]
   1aedc:	add	sp, sp, #8
   1aee0:	pop	{r2, r3}
   1aee4:	bx	lr
   1aee8:	push	{r1, lr}
   1aeec:	mov	r0, #8
   1aef0:	bl	11164 <raise@plt>
   1aef4:	pop	{r1, pc}
   1aef8:	vmov	d7, r0, r1
   1aefc:	vldr	d6, [pc, #44]	; 1af30 <__assert_fail@plt+0x9a54>
   1af00:	vldr	d5, [pc, #48]	; 1af38 <__assert_fail@plt+0x9a5c>
   1af04:	mov	r0, #0
   1af08:	vmul.f64	d6, d7, d6
   1af0c:	vcvt.u32.f64	s12, d6
   1af10:	vcvt.f64.u32	d4, s12
   1af14:	vmov	r1, s12
   1af18:	vmls.f64	d7, d4, d5
   1af1c:	vcvt.u32.f64	s14, d7
   1af20:	vmov	r3, s14
   1af24:	orr	r0, r0, r3
   1af28:	bx	lr
   1af2c:	nop			; (mov r0, r0)
   1af30:	andeq	r0, r0, r0
   1af34:	ldclcc	0, cr0, [r0]
   1af38:	andeq	r0, r0, r0
   1af3c:	mvnsmi	r0, r0
   1af40:	cmp	r1, r3
   1af44:	push	{r4, r5, r6, r7, r8, r9, lr}
   1af48:	cmpeq	r0, r2
   1af4c:	mov	r4, r0
   1af50:	mov	r5, r1
   1af54:	ldr	r9, [sp, #28]
   1af58:	movcc	r0, #0
   1af5c:	movcc	r1, #0
   1af60:	bcc	1b058 <__assert_fail@plt+0x9b7c>
   1af64:	cmp	r3, #0
   1af68:	clzeq	ip, r2
   1af6c:	clzne	ip, r3
   1af70:	addeq	ip, ip, #32
   1af74:	cmp	r5, #0
   1af78:	clzeq	r1, r4
   1af7c:	addeq	r1, r1, #32
   1af80:	clzne	r1, r5
   1af84:	sub	ip, ip, r1
   1af88:	sub	lr, ip, #32
   1af8c:	lsl	r7, r3, ip
   1af90:	rsb	r8, ip, #32
   1af94:	orr	r7, r7, r2, lsl lr
   1af98:	orr	r7, r7, r2, lsr r8
   1af9c:	lsl	r6, r2, ip
   1afa0:	cmp	r5, r7
   1afa4:	cmpeq	r4, r6
   1afa8:	movcc	r0, #0
   1afac:	movcc	r1, #0
   1afb0:	bcc	1afcc <__assert_fail@plt+0x9af0>
   1afb4:	mov	r3, #1
   1afb8:	subs	r4, r4, r6
   1afbc:	lsl	r1, r3, lr
   1afc0:	lsl	r0, r3, ip
   1afc4:	orr	r1, r1, r3, lsr r8
   1afc8:	sbc	r5, r5, r7
   1afcc:	cmp	ip, #0
   1afd0:	beq	1b058 <__assert_fail@plt+0x9b7c>
   1afd4:	lsrs	r3, r7, #1
   1afd8:	rrx	r2, r6
   1afdc:	mov	r6, ip
   1afe0:	b	1b004 <__assert_fail@plt+0x9b28>
   1afe4:	subs	r4, r4, r2
   1afe8:	sbc	r5, r5, r3
   1afec:	adds	r4, r4, r4
   1aff0:	adc	r5, r5, r5
   1aff4:	adds	r4, r4, #1
   1aff8:	adc	r5, r5, #0
   1affc:	subs	r6, r6, #1
   1b000:	beq	1b020 <__assert_fail@plt+0x9b44>
   1b004:	cmp	r5, r3
   1b008:	cmpeq	r4, r2
   1b00c:	bcs	1afe4 <__assert_fail@plt+0x9b08>
   1b010:	adds	r4, r4, r4
   1b014:	adc	r5, r5, r5
   1b018:	subs	r6, r6, #1
   1b01c:	bne	1b004 <__assert_fail@plt+0x9b28>
   1b020:	lsr	r6, r4, ip
   1b024:	lsr	r7, r5, ip
   1b028:	orr	r6, r6, r5, lsl r8
   1b02c:	adds	r2, r0, r4
   1b030:	orr	r6, r6, r5, lsr lr
   1b034:	adc	r3, r1, r5
   1b038:	lsl	r1, r7, ip
   1b03c:	orr	r1, r1, r6, lsl lr
   1b040:	lsl	r0, r6, ip
   1b044:	orr	r1, r1, r6, lsr r8
   1b048:	subs	r0, r2, r0
   1b04c:	mov	r4, r6
   1b050:	mov	r5, r7
   1b054:	sbc	r1, r3, r1
   1b058:	cmp	r9, #0
   1b05c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1b060:	strd	r4, [r9]
   1b064:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b068:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b06c:	mov	r7, r0
   1b070:	ldr	r6, [pc, #72]	; 1b0c0 <__assert_fail@plt+0x9be4>
   1b074:	ldr	r5, [pc, #72]	; 1b0c4 <__assert_fail@plt+0x9be8>
   1b078:	add	r6, pc, r6
   1b07c:	add	r5, pc, r5
   1b080:	sub	r6, r6, r5
   1b084:	mov	r8, r1
   1b088:	mov	r9, r2
   1b08c:	bl	1112c <calloc@plt-0x20>
   1b090:	asrs	r6, r6, #2
   1b094:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b098:	mov	r4, #0
   1b09c:	add	r4, r4, #1
   1b0a0:	ldr	r3, [r5], #4
   1b0a4:	mov	r2, r9
   1b0a8:	mov	r1, r8
   1b0ac:	mov	r0, r7
   1b0b0:	blx	r3
   1b0b4:	cmp	r6, r4
   1b0b8:	bne	1b09c <__assert_fail@plt+0x9bc0>
   1b0bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b0c0:	muleq	r1, r0, lr
   1b0c4:	andeq	r2, r1, r8, lsl #29
   1b0c8:	bx	lr
   1b0cc:	ldr	r3, [pc, #12]	; 1b0e0 <__assert_fail@plt+0x9c04>
   1b0d0:	mov	r1, #0
   1b0d4:	add	r3, pc, r3
   1b0d8:	ldr	r2, [r3]
   1b0dc:	b	113bc <__cxa_atexit@plt>
   1b0e0:	andeq	r3, r1, r0, ror r0

Disassembly of section .fini:

0001b0e4 <.fini>:
   1b0e4:	push	{r3, lr}
   1b0e8:	pop	{r3, pc}
