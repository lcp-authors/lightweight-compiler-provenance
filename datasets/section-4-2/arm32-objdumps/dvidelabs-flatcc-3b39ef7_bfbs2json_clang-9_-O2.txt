
../repos/dvidelabs-flatcc-3b39ef7/samples/reflection/bfbs2json:     file format elf32-littlearm


Disassembly of section .init:

00010938 <.init>:
   10938:	push	{r3, lr}
   1093c:	bl	10a6c <_start@@Base+0x3c>
   10940:	pop	{r3, pc}

Disassembly of section .plt:

00010944 <printf@plt-0x14>:
   10944:	push	{lr}		; (str lr, [sp, #-4]!)
   10948:	ldr	lr, [pc, #4]	; 10954 <printf@plt-0x4>
   1094c:	add	lr, pc, lr
   10950:	ldr	pc, [lr, #8]!
   10954:	andeq	r2, r1, ip, lsr #13

00010958 <printf@plt>:
   10958:	add	ip, pc, #0, 12
   1095c:	add	ip, ip, #73728	; 0x12000
   10960:	ldr	pc, [ip, #1708]!	; 0x6ac

00010964 <fopen@plt>:
   10964:	add	ip, pc, #0, 12
   10968:	add	ip, ip, #73728	; 0x12000
   1096c:	ldr	pc, [ip, #1700]!	; 0x6a4

00010970 <free@plt>:
   10970:	add	ip, pc, #0, 12
   10974:	add	ip, ip, #73728	; 0x12000
   10978:	ldr	pc, [ip, #1692]!	; 0x69c

0001097c <ftell@plt>:
   1097c:	add	ip, pc, #0, 12
   10980:	add	ip, ip, #73728	; 0x12000
   10984:	ldr	pc, [ip, #1684]!	; 0x694

00010988 <rewind@plt>:
   10988:	add	ip, pc, #0, 12
   1098c:	add	ip, ip, #73728	; 0x12000
   10990:	ldr	pc, [ip, #1676]!	; 0x68c

00010994 <fwrite@plt>:
   10994:	add	ip, pc, #0, 12
   10998:	add	ip, ip, #73728	; 0x12000
   1099c:	ldr	pc, [ip, #1668]!	; 0x684

000109a0 <puts@plt>:
   109a0:	add	ip, pc, #0, 12
   109a4:	add	ip, ip, #73728	; 0x12000
   109a8:	ldr	pc, [ip, #1660]!	; 0x67c

000109ac <malloc@plt>:
   109ac:	add	ip, pc, #0, 12
   109b0:	add	ip, ip, #73728	; 0x12000
   109b4:	ldr	pc, [ip, #1652]!	; 0x674

000109b8 <__libc_start_main@plt>:
   109b8:	add	ip, pc, #0, 12
   109bc:	add	ip, ip, #73728	; 0x12000
   109c0:	ldr	pc, [ip, #1644]!	; 0x66c

000109c4 <__gmon_start__@plt>:
   109c4:	add	ip, pc, #0, 12
   109c8:	add	ip, ip, #73728	; 0x12000
   109cc:	ldr	pc, [ip, #1636]!	; 0x664

000109d0 <exit@plt>:
   109d0:	add	ip, pc, #0, 12
   109d4:	add	ip, ip, #73728	; 0x12000
   109d8:	ldr	pc, [ip, #1628]!	; 0x65c

000109dc <fprintf@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #73728	; 0x12000
   109e4:	ldr	pc, [ip, #1620]!	; 0x654

000109e8 <putchar@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #73728	; 0x12000
   109f0:	ldr	pc, [ip, #1612]!	; 0x64c

000109f4 <fclose@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #73728	; 0x12000
   109fc:	ldr	pc, [ip, #1604]!	; 0x644

00010a00 <fread_unlocked@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #73728	; 0x12000
   10a08:	ldr	pc, [ip, #1596]!	; 0x63c

00010a0c <fseek@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #73728	; 0x12000
   10a14:	ldr	pc, [ip, #1588]!	; 0x634

00010a18 <abort@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #73728	; 0x12000
   10a20:	ldr	pc, [ip, #1580]!	; 0x62c

00010a24 <__assert_fail@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #73728	; 0x12000
   10a2c:	ldr	pc, [ip, #1572]!	; 0x624

Disassembly of section .text:

00010a30 <_start@@Base>:
   10a30:	mov	fp, #0
   10a34:	mov	lr, #0
   10a38:	pop	{r1}		; (ldr r1, [sp], #4)
   10a3c:	mov	r2, sp
   10a40:	push	{r2}		; (str r2, [sp, #-4]!)
   10a44:	push	{r0}		; (str r0, [sp, #-4]!)
   10a48:	ldr	ip, [pc, #16]	; 10a60 <_start@@Base+0x30>
   10a4c:	push	{ip}		; (str ip, [sp, #-4]!)
   10a50:	ldr	r0, [pc, #12]	; 10a64 <_start@@Base+0x34>
   10a54:	ldr	r3, [pc, #12]	; 10a68 <_start@@Base+0x38>
   10a58:	bl	109b8 <__libc_start_main@plt>
   10a5c:	bl	10a18 <abort@plt>
   10a60:	andeq	r1, r1, r4, lsl #22
   10a64:	andeq	r1, r1, r0, lsr #20
   10a68:	andeq	r1, r1, r4, lsr #21
   10a6c:	ldr	r3, [pc, #20]	; 10a88 <_start@@Base+0x58>
   10a70:	ldr	r2, [pc, #20]	; 10a8c <_start@@Base+0x5c>
   10a74:	add	r3, pc, r3
   10a78:	ldr	r2, [r3, r2]
   10a7c:	cmp	r2, #0
   10a80:	bxeq	lr
   10a84:	b	109c4 <__gmon_start__@plt>
   10a88:	andeq	r2, r1, r4, lsl #11
   10a8c:	andeq	r0, r0, r8, asr r0
   10a90:	ldr	r0, [pc, #24]	; 10ab0 <_start@@Base+0x80>
   10a94:	ldr	r3, [pc, #24]	; 10ab4 <_start@@Base+0x84>
   10a98:	cmp	r3, r0
   10a9c:	bxeq	lr
   10aa0:	ldr	r3, [pc, #16]	; 10ab8 <_start@@Base+0x88>
   10aa4:	cmp	r3, #0
   10aa8:	bxeq	lr
   10aac:	bx	r3
   10ab0:	andeq	r3, r2, r4, rrx
   10ab4:	andeq	r3, r2, r4, rrx
   10ab8:	andeq	r0, r0, r0
   10abc:	ldr	r0, [pc, #36]	; 10ae8 <_start@@Base+0xb8>
   10ac0:	ldr	r1, [pc, #36]	; 10aec <_start@@Base+0xbc>
   10ac4:	sub	r1, r1, r0
   10ac8:	asr	r1, r1, #2
   10acc:	add	r1, r1, r1, lsr #31
   10ad0:	asrs	r1, r1, #1
   10ad4:	bxeq	lr
   10ad8:	ldr	r3, [pc, #16]	; 10af0 <_start@@Base+0xc0>
   10adc:	cmp	r3, #0
   10ae0:	bxeq	lr
   10ae4:	bx	r3
   10ae8:	andeq	r3, r2, r4, rrx
   10aec:	andeq	r3, r2, r4, rrx
   10af0:	andeq	r0, r0, r0
   10af4:	push	{r4, lr}
   10af8:	ldr	r4, [pc, #24]	; 10b18 <_start@@Base+0xe8>
   10afc:	ldrb	r3, [r4]
   10b00:	cmp	r3, #0
   10b04:	popne	{r4, pc}
   10b08:	bl	10a90 <_start@@Base+0x60>
   10b0c:	mov	r3, #1
   10b10:	strb	r3, [r4]
   10b14:	pop	{r4, pc}
   10b18:	andeq	r3, r2, r4, rrx
   10b1c:	b	10abc <_start@@Base+0x8c>

00010b20 <print_type@@Base>:
   10b20:	push	{r4, sl, fp, lr}
   10b24:	add	fp, sp, #8
   10b28:	mov	r4, r0
   10b2c:	mov	r0, #123	; 0x7b
   10b30:	bl	109e8 <putchar@plt>
   10b34:	cmp	r4, #0
   10b38:	beq	10ca8 <print_type@@Base+0x188>
   10b3c:	ldr	r0, [r4]
   10b40:	mov	r2, r4
   10b44:	mov	r1, #1
   10b48:	ldrh	r3, [r2, -r0]!
   10b4c:	rsb	r0, r0, #0
   10b50:	cmp	r3, #6
   10b54:	bcc	10ba4 <print_type@@Base+0x84>
   10b58:	ldrh	r2, [r2, #4]
   10b5c:	cmp	r2, #0
   10b60:	beq	10ba4 <print_type@@Base+0x84>
   10b64:	add	r0, r4, r2
   10b68:	ldrsb	r0, [r0]
   10b6c:	cmp	r0, #16
   10b70:	bhi	10b84 <print_type@@Base+0x64>
   10b74:	ldr	r1, [pc, #336]	; 10ccc <print_type@@Base+0x1ac>
   10b78:	add	r1, pc, r1
   10b7c:	ldr	r1, [r1, r0, lsl #2]
   10b80:	b	10b8c <print_type@@Base+0x6c>
   10b84:	ldr	r1, [pc, #316]	; 10cc8 <print_type@@Base+0x1a8>
   10b88:	add	r1, pc, r1
   10b8c:	ldr	r0, [pc, #316]	; 10cd0 <print_type@@Base+0x1b0>
   10b90:	add	r0, pc, r0
   10b94:	bl	10958 <printf@plt>
   10b98:	ldr	r0, [r4]
   10b9c:	mov	r1, #0
   10ba0:	rsb	r0, r0, #0
   10ba4:	mov	r2, r4
   10ba8:	ldrh	r3, [r2, r0]!
   10bac:	cmp	r3, #8
   10bb0:	bcc	10c3c <print_type@@Base+0x11c>
   10bb4:	ldrh	r2, [r2, #6]
   10bb8:	cmp	r2, #0
   10bbc:	beq	10c3c <print_type@@Base+0x11c>
   10bc0:	cmp	r1, #0
   10bc4:	bne	10bd8 <print_type@@Base+0xb8>
   10bc8:	mov	r0, #44	; 0x2c
   10bcc:	bl	109e8 <putchar@plt>
   10bd0:	ldr	r0, [r4]
   10bd4:	rsb	r0, r0, #0
   10bd8:	mov	r2, r4
   10bdc:	ldrh	r0, [r2, r0]!	; <UNPREDICTABLE>
   10be0:	ldr	r1, [pc, #236]	; 10cd4 <print_type@@Base+0x1b4>
   10be4:	add	r1, pc, r1
   10be8:	cmp	r0, #6
   10bec:	bcc	10c24 <print_type@@Base+0x104>
   10bf0:	ldrh	r0, [r2, #4]
   10bf4:	cmp	r0, #0
   10bf8:	beq	10c24 <print_type@@Base+0x104>
   10bfc:	add	r0, r4, r0
   10c00:	ldrsb	r0, [r0]
   10c04:	cmp	r0, #16
   10c08:	bhi	10c1c <print_type@@Base+0xfc>
   10c0c:	ldr	r1, [pc, #200]	; 10cdc <print_type@@Base+0x1bc>
   10c10:	add	r1, pc, r1
   10c14:	ldr	r1, [r1, r0, lsl #2]
   10c18:	b	10c24 <print_type@@Base+0x104>
   10c1c:	ldr	r1, [pc, #180]	; 10cd8 <print_type@@Base+0x1b8>
   10c20:	add	r1, pc, r1
   10c24:	ldr	r0, [pc, #180]	; 10ce0 <print_type@@Base+0x1c0>
   10c28:	add	r0, pc, r0
   10c2c:	bl	10958 <printf@plt>
   10c30:	ldr	r0, [r4]
   10c34:	mov	r1, #0
   10c38:	rsb	r0, r0, #0
   10c3c:	mov	r2, r4
   10c40:	ldrh	r3, [r2, r0]!
   10c44:	cmp	r3, #10
   10c48:	bcc	10c9c <print_type@@Base+0x17c>
   10c4c:	ldrh	r2, [r2, #8]
   10c50:	cmp	r2, #0
   10c54:	beq	10c9c <print_type@@Base+0x17c>
   10c58:	cmp	r1, #0
   10c5c:	bne	10c70 <print_type@@Base+0x150>
   10c60:	mov	r0, #44	; 0x2c
   10c64:	bl	109e8 <putchar@plt>
   10c68:	ldr	r0, [r4]
   10c6c:	rsb	r0, r0, #0
   10c70:	mov	r2, r4
   10c74:	mvn	r1, #0
   10c78:	ldrh	r0, [r2, r0]!	; <UNPREDICTABLE>
   10c7c:	cmp	r0, #10
   10c80:	bcc	10c90 <print_type@@Base+0x170>
   10c84:	ldrh	r0, [r2, #8]
   10c88:	cmp	r0, #0
   10c8c:	ldrne	r1, [r4, r0]
   10c90:	ldr	r0, [pc, #76]	; 10ce4 <print_type@@Base+0x1c4>
   10c94:	add	r0, pc, r0
   10c98:	bl	10958 <printf@plt>
   10c9c:	mov	r0, #125	; 0x7d
   10ca0:	pop	{r4, sl, fp, lr}
   10ca4:	b	109e8 <putchar@plt>
   10ca8:	ldr	r0, [pc, #56]	; 10ce8 <print_type@@Base+0x1c8>
   10cac:	ldr	r1, [pc, #56]	; 10cec <print_type@@Base+0x1cc>
   10cb0:	ldr	r3, [pc, #56]	; 10cf0 <print_type@@Base+0x1d0>
   10cb4:	mov	r2, #147	; 0x93
   10cb8:	add	r0, pc, r0
   10cbc:	add	r1, pc, r1
   10cc0:	add	r3, pc, r3
   10cc4:	bl	10a24 <__assert_fail@plt>
   10cc8:	andeq	r1, r0, pc, ror #3
   10ccc:	andeq	r2, r1, ip, asr #6
   10cd0:	andeq	r0, r0, ip, ror pc
   10cd4:	andeq	r1, r0, r6, lsr #6
   10cd8:	andeq	r1, r0, r7, asr r1
   10cdc:			; <UNDEFINED> instruction: 0x000122b4
   10ce0:	strdeq	r0, [r0], -r5
   10ce4:	muleq	r0, r8, lr
   10ce8:	andeq	r1, r0, r5, ror r1
   10cec:	muleq	r0, r7, r1
   10cf0:	andeq	r1, r0, r8, lsl #4

00010cf4 <print_object@@Base>:
   10cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cf8:	add	fp, sp, #28
   10cfc:	sub	sp, sp, #4
   10d00:	cmp	r0, #0
   10d04:	beq	1111c <print_object@@Base+0x428>
   10d08:	ldr	r1, [r0]
   10d0c:	mov	r2, r0
   10d10:	ldrh	r1, [r2, -r1]!	; <UNPREDICTABLE>
   10d14:	cmp	r1, #8
   10d18:	bcc	11110 <print_object@@Base+0x41c>
   10d1c:	ldrh	r5, [r2, #6]
   10d20:	cmp	r5, #0
   10d24:	beq	11110 <print_object@@Base+0x41c>
   10d28:	ldrh	r2, [r2, #4]
   10d2c:	cmp	r2, #0
   10d30:	beq	1113c <print_object@@Base+0x448>
   10d34:	mov	r1, r0
   10d38:	mov	r4, r0
   10d3c:	str	r0, [sp]
   10d40:	ldr	r0, [r1, r2]!
   10d44:	ldr	r9, [r4, r5]!
   10d48:	add	r0, r1, r0
   10d4c:	add	r1, r0, #4
   10d50:	ldr	r0, [pc, #1044]	; 1116c <print_object@@Base+0x478>
   10d54:	add	r0, pc, r0
   10d58:	bl	10958 <printf@plt>
   10d5c:	ldr	r0, [pc, #1036]	; 11170 <print_object@@Base+0x47c>
   10d60:	add	r0, pc, r0
   10d64:	bl	10958 <printf@plt>
   10d68:	ldr	r0, [r4, r9]
   10d6c:	cmp	r0, #0
   10d70:	beq	10fe0 <print_object@@Base+0x2ec>
   10d74:	ldr	r2, [sp]
   10d78:	add	r1, r9, r5
   10d7c:	ldr	r5, [pc, #1008]	; 11174 <print_object@@Base+0x480>
   10d80:	mov	r7, #0
   10d84:	add	r1, r1, r2
   10d88:	add	r5, pc, r5
   10d8c:	add	sl, r1, #24
   10d90:	cmp	r7, #0
   10d94:	bne	10dc0 <print_object@@Base+0xcc>
   10d98:	b	10dcc <print_object@@Base+0xd8>
   10d9c:	mov	r0, #125	; 0x7d
   10da0:	bl	109e8 <putchar@plt>
   10da4:	ldr	r0, [r4, r9]
   10da8:	add	r7, r7, #1
   10dac:	add	sl, sl, #4
   10db0:	cmp	r7, r0
   10db4:	bcs	10fe0 <print_object@@Base+0x2ec>
   10db8:	cmp	r7, #0
   10dbc:	beq	10dcc <print_object@@Base+0xd8>
   10dc0:	mov	r0, #44	; 0x2c
   10dc4:	bl	109e8 <putchar@plt>
   10dc8:	ldr	r0, [r4, r9]
   10dcc:	cmp	r0, r7
   10dd0:	bls	110f0 <print_object@@Base+0x3fc>
   10dd4:	ldr	r6, [sl, #-20]	; 0xffffffec
   10dd8:	add	r8, sl, r6
   10ddc:	ldr	r0, [r8, #-20]	; 0xffffffec
   10de0:	sub	r0, r6, r0
   10de4:	add	r0, sl, r0
   10de8:	ldrh	r1, [r0, #-20]	; 0xffffffec
   10dec:	cmp	r1, #6
   10df0:	bcc	110b0 <print_object@@Base+0x3bc>
   10df4:	ldrh	r0, [r0, #-16]
   10df8:	cmp	r0, #0
   10dfc:	beq	110b0 <print_object@@Base+0x3bc>
   10e00:	add	r1, r6, r0
   10e04:	add	r1, sl, r1
   10e08:	ldr	r1, [r1, #-20]	; 0xffffffec
   10e0c:	add	r1, r1, r6
   10e10:	add	r0, r1, r0
   10e14:	add	r0, sl, r0
   10e18:	sub	r1, r0, #16
   10e1c:	mov	r0, r5
   10e20:	bl	10958 <printf@plt>
   10e24:	ldr	r0, [r8, #-20]	; 0xffffffec
   10e28:	sub	r0, r6, r0
   10e2c:	add	r0, sl, r0
   10e30:	ldrh	r1, [r0, #-20]	; 0xffffffec
   10e34:	cmp	r1, #8
   10e38:	bcc	110d0 <print_object@@Base+0x3dc>
   10e3c:	ldrh	r0, [r0, #-14]
   10e40:	cmp	r0, #0
   10e44:	beq	110d0 <print_object@@Base+0x3dc>
   10e48:	add	r1, r6, r0
   10e4c:	add	r1, sl, r1
   10e50:	ldr	r1, [r1, #-20]	; 0xffffffec
   10e54:	add	r1, r1, r6
   10e58:	add	r0, r1, r0
   10e5c:	add	r0, sl, r0
   10e60:	sub	r0, r0, #20
   10e64:	bl	10b20 <print_type@@Base>
   10e68:	ldr	r0, [r8, #-20]	; 0xffffffec
   10e6c:	sub	r1, r6, r0
   10e70:	rsb	r0, r0, #0
   10e74:	add	r1, sl, r1
   10e78:	ldrh	r2, [r1, #-20]	; 0xffffffec
   10e7c:	cmp	r2, #10
   10e80:	bcc	10eb0 <print_object@@Base+0x1bc>
   10e84:	ldrh	r1, [r1, #-12]
   10e88:	cmp	r1, #0
   10e8c:	beq	10eb0 <print_object@@Base+0x1bc>
   10e90:	add	r0, r6, r1
   10e94:	add	r0, sl, r0
   10e98:	ldrh	r1, [r0, #-20]	; 0xffffffec
   10e9c:	ldr	r0, [pc, #724]	; 11178 <print_object@@Base+0x484>
   10ea0:	add	r0, pc, r0
   10ea4:	bl	10958 <printf@plt>
   10ea8:	ldr	r0, [r8, #-20]	; 0xffffffec
   10eac:	rsb	r0, r0, #0
   10eb0:	add	r1, r0, r6
   10eb4:	add	r1, sl, r1
   10eb8:	ldrh	r2, [r1, #-20]	; 0xffffffec
   10ebc:	cmp	r2, #14
   10ec0:	bcc	10ef0 <print_object@@Base+0x1fc>
   10ec4:	ldrh	r1, [r1, #-8]
   10ec8:	cmp	r1, #0
   10ecc:	beq	10ef0 <print_object@@Base+0x1fc>
   10ed0:	add	r0, r6, r1
   10ed4:	add	r0, sl, r0
   10ed8:	ldrd	r2, [r0, #-20]	; 0xffffffec
   10edc:	ldr	r0, [pc, #664]	; 1117c <print_object@@Base+0x488>
   10ee0:	add	r0, pc, r0
   10ee4:	bl	10958 <printf@plt>
   10ee8:	ldr	r0, [r8, #-20]	; 0xffffffec
   10eec:	rsb	r0, r0, #0
   10ef0:	add	r1, r0, r6
   10ef4:	add	r1, sl, r1
   10ef8:	ldrh	r2, [r1, #-20]	; 0xffffffec
   10efc:	cmp	r2, #16
   10f00:	bcc	10f34 <print_object@@Base+0x240>
   10f04:	ldrh	r1, [r1, #-6]
   10f08:	cmp	r1, #0
   10f0c:	beq	10f34 <print_object@@Base+0x240>
   10f10:	add	r0, r6, r1
   10f14:	add	r0, sl, r0
   10f18:	vldr	d16, [r0, #-20]	; 0xffffffec
   10f1c:	ldr	r0, [pc, #604]	; 11180 <print_object@@Base+0x48c>
   10f20:	add	r0, pc, r0
   10f24:	vmov	r2, r3, d16
   10f28:	bl	10958 <printf@plt>
   10f2c:	ldr	r0, [r8, #-20]	; 0xffffffec
   10f30:	rsb	r0, r0, #0
   10f34:	add	r1, r0, r6
   10f38:	add	r1, sl, r1
   10f3c:	ldrh	r2, [r1, #-20]	; 0xffffffec
   10f40:	cmp	r2, #20
   10f44:	bcc	10f8c <print_object@@Base+0x298>
   10f48:	ldrh	r1, [r1, #-2]
   10f4c:	cmp	r1, #0
   10f50:	beq	10f8c <print_object@@Base+0x298>
   10f54:	add	r0, r6, r1
   10f58:	add	r0, sl, r0
   10f5c:	ldrb	r0, [r0, #-20]	; 0xffffffec
   10f60:	ldr	r1, [pc, #540]	; 11184 <print_object@@Base+0x490>
   10f64:	cmp	r0, #0
   10f68:	ldr	r0, [pc, #536]	; 11188 <print_object@@Base+0x494>
   10f6c:	add	r1, pc, r1
   10f70:	add	r0, pc, r0
   10f74:	moveq	r1, r0
   10f78:	ldr	r0, [pc, #524]	; 1118c <print_object@@Base+0x498>
   10f7c:	add	r0, pc, r0
   10f80:	bl	10958 <printf@plt>
   10f84:	ldr	r0, [r8, #-20]	; 0xffffffec
   10f88:	rsb	r0, r0, #0
   10f8c:	add	r0, r0, r6
   10f90:	add	r0, sl, r0
   10f94:	ldrh	r1, [r0, #-20]	; 0xffffffec
   10f98:	cmp	r1, #22
   10f9c:	bcc	10d9c <print_object@@Base+0xa8>
   10fa0:	ldrh	r0, [r0]
   10fa4:	cmp	r0, #0
   10fa8:	beq	10d9c <print_object@@Base+0xa8>
   10fac:	add	r0, r6, r0
   10fb0:	add	r0, sl, r0
   10fb4:	ldrb	r0, [r0, #-20]	; 0xffffffec
   10fb8:	ldr	r1, [pc, #464]	; 11190 <print_object@@Base+0x49c>
   10fbc:	cmp	r0, #0
   10fc0:	ldr	r0, [pc, #460]	; 11194 <print_object@@Base+0x4a0>
   10fc4:	add	r1, pc, r1
   10fc8:	add	r0, pc, r0
   10fcc:	moveq	r1, r0
   10fd0:	ldr	r0, [pc, #448]	; 11198 <print_object@@Base+0x4a4>
   10fd4:	add	r0, pc, r0
   10fd8:	bl	10958 <printf@plt>
   10fdc:	b	10d9c <print_object@@Base+0xa8>
   10fe0:	mov	r0, #93	; 0x5d
   10fe4:	bl	109e8 <putchar@plt>
   10fe8:	ldr	r4, [sp]
   10fec:	ldr	r0, [r4]
   10ff0:	mov	r1, r4
   10ff4:	ldrh	r2, [r1, -r0]!
   10ff8:	rsb	r0, r0, #0
   10ffc:	cmp	r2, #10
   11000:	bcc	11040 <print_object@@Base+0x34c>
   11004:	ldrh	r1, [r1, #8]
   11008:	cmp	r1, #0
   1100c:	beq	11040 <print_object@@Base+0x34c>
   11010:	ldrb	r0, [r4, r1]
   11014:	ldr	r2, [pc, #384]	; 1119c <print_object@@Base+0x4a8>
   11018:	ldr	r1, [pc, #384]	; 111a0 <print_object@@Base+0x4ac>
   1101c:	cmp	r0, #0
   11020:	ldr	r0, [pc, #380]	; 111a4 <print_object@@Base+0x4b0>
   11024:	add	r2, pc, r2
   11028:	add	r1, pc, r1
   1102c:	moveq	r1, r2
   11030:	add	r0, pc, r0
   11034:	bl	10958 <printf@plt>
   11038:	ldr	r0, [r4]
   1103c:	rsb	r0, r0, #0
   11040:	mov	r1, r4
   11044:	ldrh	r2, [r1, r0]!
   11048:	cmp	r2, #12
   1104c:	bcc	11074 <print_object@@Base+0x380>
   11050:	ldrh	r1, [r1, #10]
   11054:	cmp	r1, #0
   11058:	beq	11074 <print_object@@Base+0x380>
   1105c:	ldr	r1, [r4, r1]
   11060:	ldr	r0, [pc, #320]	; 111a8 <print_object@@Base+0x4b4>
   11064:	add	r0, pc, r0
   11068:	bl	10958 <printf@plt>
   1106c:	ldr	r0, [r4]
   11070:	rsb	r0, r0, #0
   11074:	mov	r1, r4
   11078:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   1107c:	cmp	r0, #14
   11080:	bcc	110a0 <print_object@@Base+0x3ac>
   11084:	ldrh	r0, [r1, #12]
   11088:	cmp	r0, #0
   1108c:	beq	110a0 <print_object@@Base+0x3ac>
   11090:	ldr	r1, [r4, r0]
   11094:	ldr	r0, [pc, #272]	; 111ac <print_object@@Base+0x4b8>
   11098:	add	r0, pc, r0
   1109c:	bl	10958 <printf@plt>
   110a0:	mov	r0, #125	; 0x7d
   110a4:	sub	sp, fp, #28
   110a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110ac:	b	109e8 <putchar@plt>
   110b0:	ldr	r0, [pc, #272]	; 111c8 <print_object@@Base+0x4d4>
   110b4:	ldr	r1, [pc, #272]	; 111cc <print_object@@Base+0x4d8>
   110b8:	ldr	r3, [pc, #272]	; 111d0 <print_object@@Base+0x4dc>
   110bc:	mov	r2, #195	; 0xc3
   110c0:	add	r0, pc, r0
   110c4:	add	r1, pc, r1
   110c8:	add	r3, pc, r3
   110cc:	bl	10a24 <__assert_fail@plt>
   110d0:	ldr	r0, [pc, #252]	; 111d4 <print_object@@Base+0x4e0>
   110d4:	ldr	r1, [pc, #252]	; 111d8 <print_object@@Base+0x4e4>
   110d8:	ldr	r3, [pc, #252]	; 111dc <print_object@@Base+0x4e8>
   110dc:	mov	r2, #201	; 0xc9
   110e0:	add	r0, pc, r0
   110e4:	add	r1, pc, r1
   110e8:	add	r3, pc, r3
   110ec:	bl	10a24 <__assert_fail@plt>
   110f0:	ldr	r0, [pc, #196]	; 111bc <print_object@@Base+0x4c8>
   110f4:	ldr	r1, [pc, #196]	; 111c0 <print_object@@Base+0x4cc>
   110f8:	ldr	r3, [pc, #196]	; 111c4 <print_object@@Base+0x4d0>
   110fc:	mov	r2, #192	; 0xc0
   11100:	add	r0, pc, r0
   11104:	add	r1, pc, r1
   11108:	add	r3, pc, r3
   1110c:	bl	10a24 <__assert_fail@plt>
   11110:	ldr	r0, [pc, #80]	; 11168 <print_object@@Base+0x474>
   11114:	add	r0, pc, r0
   11118:	b	11124 <print_object@@Base+0x430>
   1111c:	ldr	r0, [pc, #56]	; 1115c <print_object@@Base+0x468>
   11120:	add	r0, pc, r0
   11124:	ldr	r1, [pc, #52]	; 11160 <print_object@@Base+0x46c>
   11128:	ldr	r3, [pc, #52]	; 11164 <print_object@@Base+0x470>
   1112c:	mov	r2, #224	; 0xe0
   11130:	add	r1, pc, r1
   11134:	add	r3, pc, r3
   11138:	bl	10a24 <__assert_fail@plt>
   1113c:	ldr	r0, [pc, #108]	; 111b0 <print_object@@Base+0x4bc>
   11140:	ldr	r1, [pc, #108]	; 111b4 <print_object@@Base+0x4c0>
   11144:	ldr	r3, [pc, #108]	; 111b8 <print_object@@Base+0x4c4>
   11148:	mov	r2, #218	; 0xda
   1114c:	add	r0, pc, r0
   11150:	add	r1, pc, r1
   11154:	add	r3, pc, r3
   11158:	bl	10a24 <__assert_fail@plt>
   1115c:	andeq	r0, r0, sp, lsl #26
   11160:	andeq	r0, r0, r3, lsr #26
   11164:	andeq	r0, r0, r3, lsr #28
   11168:	andeq	r0, r0, lr, lsl #29
   1116c:	andeq	r0, r0, r3, ror #27
   11170:	andeq	r0, r0, r4, ror #27
   11174:	andeq	r0, r0, r8, asr #27
   11178:	andeq	r0, r0, r5, asr #25
   1117c:	andeq	r0, r0, pc, lsl #25
   11180:	andeq	r0, r0, r7, ror #24
   11184:	andeq	r0, r0, r1, asr #24
   11188:	andeq	r0, r0, r2, asr #24
   1118c:	andeq	r0, r0, r2, lsr #24
   11190:	andeq	r0, r0, r9, ror #23
   11194:	andeq	r0, r0, sl, ror #23
   11198:	andeq	r0, r0, r4, ror #23
   1119c:	andeq	r0, r0, lr, lsl #23
   111a0:	andeq	r0, r0, r5, lsl #23
   111a4:	muleq	r0, r2, fp
   111a8:	andeq	r0, r0, lr, ror #22
   111ac:	andeq	r0, r0, r9, asr #22
   111b0:	andeq	r0, r0, r6, asr lr
   111b4:	andeq	r0, r0, r3, lsl #26
   111b8:	andeq	r0, r0, pc, ror #28
   111bc:	andeq	r0, r0, sl, lsl #30
   111c0:	andeq	r0, r0, pc, asr #26
   111c4:	andeq	r0, r0, r9, lsr pc
   111c8:	andeq	r0, r0, r2, ror #29
   111cc:	andeq	r0, r0, pc, lsl #27
   111d0:	andeq	r0, r0, sl, asr #31
   111d4:	andeq	r0, r0, r2, asr #29
   111d8:	andeq	r0, r0, pc, ror #26
   111dc:	andeq	r0, r0, pc, ror #31

000111e0 <print_enum@@Base>:
   111e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111e4:	add	fp, sp, #28
   111e8:	sub	sp, sp, #4
   111ec:	cmp	r0, #0
   111f0:	beq	114d4 <print_enum@@Base+0x2f4>
   111f4:	ldr	r1, [r0]
   111f8:	mov	r4, r0
   111fc:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   11200:	cmp	r1, #6
   11204:	bcc	11488 <print_enum@@Base+0x2a8>
   11208:	ldrh	r0, [r0, #4]
   1120c:	cmp	r0, #0
   11210:	beq	11488 <print_enum@@Base+0x2a8>
   11214:	mov	r1, r4
   11218:	ldr	r0, [r1, r0]!
   1121c:	add	r0, r1, r0
   11220:	add	r1, r0, #4
   11224:	ldr	r0, [pc, #728]	; 11504 <print_enum@@Base+0x324>
   11228:	add	r0, pc, r0
   1122c:	bl	10958 <printf@plt>
   11230:	ldr	r1, [r4]
   11234:	mov	r0, r4
   11238:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   1123c:	cmp	r1, #8
   11240:	bcc	11494 <print_enum@@Base+0x2b4>
   11244:	ldrh	r5, [r0, #6]
   11248:	cmp	r5, #0
   1124c:	beq	11494 <print_enum@@Base+0x2b4>
   11250:	str	r4, [sp]
   11254:	ldr	r7, [r4, r5]!
   11258:	ldr	r0, [pc, #680]	; 11508 <print_enum@@Base+0x328>
   1125c:	add	r0, pc, r0
   11260:	bl	10958 <printf@plt>
   11264:	ldr	r0, [r4, r7]
   11268:	cmp	r0, #0
   1126c:	beq	113cc <print_enum@@Base+0x1ec>
   11270:	ldr	r1, [sp]
   11274:	add	r0, r7, r5
   11278:	ldr	r5, [pc, #652]	; 1150c <print_enum@@Base+0x32c>
   1127c:	mov	r8, #0
   11280:	add	r0, r0, r1
   11284:	add	r5, pc, r5
   11288:	add	r6, r0, #12
   1128c:	b	112b0 <print_enum@@Base+0xd0>
   11290:	bl	10cf4 <print_object@@Base>
   11294:	mov	r0, #125	; 0x7d
   11298:	bl	109e8 <putchar@plt>
   1129c:	ldr	r0, [r4, r7]
   112a0:	add	r8, r8, #1
   112a4:	add	r6, r6, #4
   112a8:	cmp	r8, r0
   112ac:	bcs	113cc <print_enum@@Base+0x1ec>
   112b0:	ldr	r9, [r6, #-8]
   112b4:	cmp	r8, #0
   112b8:	beq	112c4 <print_enum@@Base+0xe4>
   112bc:	mov	r0, #44	; 0x2c
   112c0:	bl	109e8 <putchar@plt>
   112c4:	add	sl, r6, r9
   112c8:	ldr	r0, [sl, #-8]
   112cc:	sub	r0, r9, r0
   112d0:	add	r0, r6, r0
   112d4:	ldrh	r1, [r0, #-8]
   112d8:	cmp	r1, #6
   112dc:	bcc	11468 <print_enum@@Base+0x288>
   112e0:	ldrh	r0, [r0, #-4]
   112e4:	cmp	r0, #0
   112e8:	beq	11468 <print_enum@@Base+0x288>
   112ec:	add	r1, r9, r0
   112f0:	add	r1, r6, r1
   112f4:	ldr	r1, [r1, #-8]
   112f8:	add	r1, r1, r9
   112fc:	add	r0, r1, r0
   11300:	add	r0, r6, r0
   11304:	sub	r1, r0, #4
   11308:	mov	r0, r5
   1130c:	bl	10958 <printf@plt>
   11310:	ldr	r0, [sl, #-8]
   11314:	sub	r1, r9, r0
   11318:	rsb	r0, r0, #0
   1131c:	add	r1, r6, r1
   11320:	ldrh	r2, [r1, #-8]
   11324:	cmp	r2, #8
   11328:	bcc	11358 <print_enum@@Base+0x178>
   1132c:	ldrh	r1, [r1, #-2]
   11330:	cmp	r1, #0
   11334:	beq	11358 <print_enum@@Base+0x178>
   11338:	add	r0, r9, r1
   1133c:	add	r0, r6, r0
   11340:	ldrd	r2, [r0, #-8]
   11344:	ldr	r0, [pc, #452]	; 11510 <print_enum@@Base+0x330>
   11348:	add	r0, pc, r0
   1134c:	bl	10958 <printf@plt>
   11350:	ldr	r0, [sl, #-8]
   11354:	rsb	r0, r0, #0
   11358:	add	r0, r0, r9
   1135c:	add	r0, r6, r0
   11360:	ldrh	r1, [r0, #-8]
   11364:	cmp	r1, #10
   11368:	bcc	11294 <print_enum@@Base+0xb4>
   1136c:	ldrh	r0, [r0]
   11370:	cmp	r0, #0
   11374:	beq	11294 <print_enum@@Base+0xb4>
   11378:	ldr	r0, [pc, #404]	; 11514 <print_enum@@Base+0x334>
   1137c:	add	r0, pc, r0
   11380:	bl	10958 <printf@plt>
   11384:	ldr	r0, [sl, #-8]
   11388:	sub	r0, r9, r0
   1138c:	add	r1, r6, r0
   11390:	mov	r0, #0
   11394:	ldrh	r2, [r1, #-8]
   11398:	cmp	r2, #10
   1139c:	bcc	11290 <print_enum@@Base+0xb0>
   113a0:	ldrh	r1, [r1]
   113a4:	cmp	r1, #0
   113a8:	beq	11290 <print_enum@@Base+0xb0>
   113ac:	add	r0, r9, r1
   113b0:	add	r0, r6, r0
   113b4:	ldr	r0, [r0, #-8]
   113b8:	add	r0, r0, r9
   113bc:	add	r0, r0, r1
   113c0:	add	r0, r6, r0
   113c4:	sub	r0, r0, #8
   113c8:	b	11290 <print_enum@@Base+0xb0>
   113cc:	mov	r0, #93	; 0x5d
   113d0:	bl	109e8 <putchar@plt>
   113d4:	ldr	r4, [sp]
   113d8:	ldr	r1, [r4]
   113dc:	mov	r0, r4
   113e0:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   113e4:	cmp	r1, #10
   113e8:	bcc	11420 <print_enum@@Base+0x240>
   113ec:	ldrh	r0, [r0, #8]
   113f0:	cmp	r0, #0
   113f4:	beq	11420 <print_enum@@Base+0x240>
   113f8:	ldrb	r0, [r4, r0]
   113fc:	ldr	r2, [pc, #276]	; 11518 <print_enum@@Base+0x338>
   11400:	ldr	r1, [pc, #276]	; 1151c <print_enum@@Base+0x33c>
   11404:	cmp	r0, #0
   11408:	ldr	r0, [pc, #272]	; 11520 <print_enum@@Base+0x340>
   1140c:	add	r2, pc, r2
   11410:	add	r1, pc, r1
   11414:	moveq	r1, r2
   11418:	add	r0, pc, r0
   1141c:	bl	10958 <printf@plt>
   11420:	ldr	r0, [pc, #252]	; 11524 <print_enum@@Base+0x344>
   11424:	add	r0, pc, r0
   11428:	bl	10958 <printf@plt>
   1142c:	ldr	r1, [r4]
   11430:	mov	r0, r4
   11434:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   11438:	cmp	r1, #12
   1143c:	bcc	114b4 <print_enum@@Base+0x2d4>
   11440:	ldrh	r0, [r0, #10]
   11444:	cmp	r0, #0
   11448:	beq	114b4 <print_enum@@Base+0x2d4>
   1144c:	ldr	r0, [r4, r0]!
   11450:	add	r0, r4, r0
   11454:	bl	10b20 <print_type@@Base>
   11458:	mov	r0, #125	; 0x7d
   1145c:	sub	sp, fp, #28
   11460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11464:	b	109e8 <putchar@plt>
   11468:	ldr	r0, [pc, #196]	; 11534 <print_enum@@Base+0x354>
   1146c:	ldr	r1, [pc, #196]	; 11538 <print_enum@@Base+0x358>
   11470:	ldr	r3, [pc, #196]	; 1153c <print_enum@@Base+0x35c>
   11474:	mov	r2, #159	; 0x9f
   11478:	add	r0, pc, r0
   1147c:	add	r1, pc, r1
   11480:	add	r3, pc, r3
   11484:	bl	10a24 <__assert_fail@plt>
   11488:	ldr	r0, [pc, #112]	; 11500 <print_enum@@Base+0x320>
   1148c:	add	r0, pc, r0
   11490:	b	114dc <print_enum@@Base+0x2fc>
   11494:	ldr	r0, [pc, #140]	; 11528 <print_enum@@Base+0x348>
   11498:	ldr	r1, [pc, #140]	; 1152c <print_enum@@Base+0x34c>
   1149c:	ldr	r3, [pc, #140]	; 11530 <print_enum@@Base+0x350>
   114a0:	mov	r2, #183	; 0xb7
   114a4:	add	r0, pc, r0
   114a8:	add	r1, pc, r1
   114ac:	add	r3, pc, r3
   114b0:	bl	10a24 <__assert_fail@plt>
   114b4:	ldr	r0, [pc, #132]	; 11540 <print_enum@@Base+0x360>
   114b8:	ldr	r1, [pc, #132]	; 11544 <print_enum@@Base+0x364>
   114bc:	ldr	r3, [pc, #132]	; 11548 <print_enum@@Base+0x368>
   114c0:	mov	r2, #185	; 0xb9
   114c4:	add	r0, pc, r0
   114c8:	add	r1, pc, r1
   114cc:	add	r3, pc, r3
   114d0:	bl	10a24 <__assert_fail@plt>
   114d4:	ldr	r0, [pc, #24]	; 114f4 <print_enum@@Base+0x314>
   114d8:	add	r0, pc, r0
   114dc:	ldr	r1, [pc, #20]	; 114f8 <print_enum@@Base+0x318>
   114e0:	ldr	r3, [pc, #20]	; 114fc <print_enum@@Base+0x31c>
   114e4:	mov	r2, #177	; 0xb1
   114e8:	add	r1, pc, r1
   114ec:	add	r3, pc, r3
   114f0:	bl	10a24 <__assert_fail@plt>
   114f4:	andeq	r0, r0, r5, asr r9
   114f8:	andeq	r0, r0, fp, ror #18
   114fc:	andeq	r0, r0, r3, lsr ip
   11500:	andeq	r0, r0, r6, lsl fp
   11504:	andeq	r0, r0, pc, lsl #18
   11508:	muleq	r0, r4, r9
   1150c:			; <UNDEFINED> instruction: 0x000008b3
   11510:			; <UNDEFINED> instruction: 0x000008b4
   11514:	andeq	r0, r0, lr, lsl #17
   11518:	andeq	r0, r0, r6, lsr #15
   1151c:	muleq	r0, sp, r7
   11520:	strdeq	r0, [r0], -sp
   11524:	andeq	r0, r0, r0, lsl #16
   11528:	strdeq	r0, [r0], -lr
   1152c:	andeq	r0, r0, fp, lsr #19
   11530:			; <UNDEFINED> instruction: 0x00000cb6
   11534:	andeq	r0, r0, sl, lsr #22
   11538:	ldrdeq	r0, [r0], -r7
   1153c:	andeq	r0, r0, fp, lsr #26
   11540:	ldrdeq	r0, [r0], -lr
   11544:	andeq	r0, r0, fp, lsl #19
   11548:	andeq	r0, r0, r8, lsr #26

0001154c <print_schema@@Base>:
   1154c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11550:	add	fp, sp, #24
   11554:	cmp	r0, #0
   11558:	beq	117f4 <print_schema@@Base+0x2a8>
   1155c:	ldr	r1, [r0]
   11560:	mov	r8, r0
   11564:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   11568:	cmp	r1, #6
   1156c:	bcc	117c8 <print_schema@@Base+0x27c>
   11570:	ldrh	r4, [r0, #4]
   11574:	cmp	r4, #0
   11578:	beq	117c8 <print_schema@@Base+0x27c>
   1157c:	mov	r5, r8
   11580:	mov	r0, #123	; 0x7b
   11584:	ldr	r9, [r5, r4]!
   11588:	bl	109e8 <putchar@plt>
   1158c:	ldr	r0, [pc, #656]	; 11824 <print_schema@@Base+0x2d8>
   11590:	add	r0, pc, r0
   11594:	bl	10958 <printf@plt>
   11598:	ldr	r0, [r5, r9]
   1159c:	cmp	r0, #0
   115a0:	beq	115f8 <print_schema@@Base+0xac>
   115a4:	add	r1, r9, r4
   115a8:	mov	r4, #0
   115ac:	mov	r6, #0
   115b0:	add	r1, r1, r8
   115b4:	add	r7, r1, #4
   115b8:	cmp	r6, #0
   115bc:	beq	115cc <print_schema@@Base+0x80>
   115c0:	mov	r0, #44	; 0x2c
   115c4:	bl	109e8 <putchar@plt>
   115c8:	ldr	r0, [r5, r9]
   115cc:	cmp	r0, r6
   115d0:	bls	11788 <print_schema@@Base+0x23c>
   115d4:	ldr	r0, [r7, r6, lsl #2]
   115d8:	add	r0, r4, r0
   115dc:	add	r0, r7, r0
   115e0:	bl	10cf4 <print_object@@Base>
   115e4:	ldr	r0, [r5, r9]
   115e8:	add	r6, r6, #1
   115ec:	add	r4, r4, #4
   115f0:	cmp	r6, r0
   115f4:	bcc	115b8 <print_schema@@Base+0x6c>
   115f8:	mov	r0, #93	; 0x5d
   115fc:	bl	109e8 <putchar@plt>
   11600:	ldr	r1, [r8]
   11604:	mov	r0, r8
   11608:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   1160c:	cmp	r1, #8
   11610:	bcc	117d4 <print_schema@@Base+0x288>
   11614:	ldrh	r4, [r0, #6]
   11618:	cmp	r4, #0
   1161c:	beq	117d4 <print_schema@@Base+0x288>
   11620:	mov	r5, r8
   11624:	ldr	r9, [r5, r4]!
   11628:	ldr	r0, [pc, #504]	; 11828 <print_schema@@Base+0x2dc>
   1162c:	add	r0, pc, r0
   11630:	bl	10958 <printf@plt>
   11634:	ldr	r0, [r5, r9]
   11638:	cmp	r0, #0
   1163c:	beq	11694 <print_schema@@Base+0x148>
   11640:	add	r1, r9, r4
   11644:	mov	r4, #0
   11648:	mov	r6, #0
   1164c:	add	r1, r1, r8
   11650:	add	r7, r1, #4
   11654:	cmp	r6, #0
   11658:	beq	11668 <print_schema@@Base+0x11c>
   1165c:	mov	r0, #44	; 0x2c
   11660:	bl	109e8 <putchar@plt>
   11664:	ldr	r0, [r5, r9]
   11668:	cmp	r0, r6
   1166c:	bls	117a8 <print_schema@@Base+0x25c>
   11670:	ldr	r0, [r7, r6, lsl #2]
   11674:	add	r0, r4, r0
   11678:	add	r0, r7, r0
   1167c:	bl	111e0 <print_enum@@Base>
   11680:	ldr	r0, [r5, r9]
   11684:	add	r6, r6, #1
   11688:	add	r4, r4, #4
   1168c:	cmp	r6, r0
   11690:	bcc	11654 <print_schema@@Base+0x108>
   11694:	mov	r0, #93	; 0x5d
   11698:	bl	109e8 <putchar@plt>
   1169c:	ldr	r0, [r8]
   116a0:	mov	r1, r8
   116a4:	ldrh	r2, [r1, -r0]!
   116a8:	rsb	r0, r0, #0
   116ac:	cmp	r2, #10
   116b0:	bcc	116e4 <print_schema@@Base+0x198>
   116b4:	ldrh	r1, [r1, #8]
   116b8:	cmp	r1, #0
   116bc:	beq	116e4 <print_schema@@Base+0x198>
   116c0:	mov	r0, r8
   116c4:	ldr	r1, [r0, r1]!
   116c8:	add	r0, r0, r1
   116cc:	add	r1, r0, #4
   116d0:	ldr	r0, [pc, #340]	; 1182c <print_schema@@Base+0x2e0>
   116d4:	add	r0, pc, r0
   116d8:	bl	10958 <printf@plt>
   116dc:	ldr	r0, [r8]
   116e0:	rsb	r0, r0, #0
   116e4:	mov	r1, r8
   116e8:	ldrh	r2, [r1, r0]!
   116ec:	cmp	r2, #12
   116f0:	bcc	11724 <print_schema@@Base+0x1d8>
   116f4:	ldrh	r1, [r1, #10]
   116f8:	cmp	r1, #0
   116fc:	beq	11724 <print_schema@@Base+0x1d8>
   11700:	mov	r0, r8
   11704:	ldr	r1, [r0, r1]!
   11708:	add	r0, r0, r1
   1170c:	add	r1, r0, #4
   11710:	ldr	r0, [pc, #280]	; 11830 <print_schema@@Base+0x2e4>
   11714:	add	r0, pc, r0
   11718:	bl	10958 <printf@plt>
   1171c:	ldr	r0, [r8]
   11720:	rsb	r0, r0, #0
   11724:	mov	r1, r8
   11728:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   1172c:	cmp	r0, #14
   11730:	bcc	11778 <print_schema@@Base+0x22c>
   11734:	ldrh	r0, [r1, #12]
   11738:	cmp	r0, #0
   1173c:	beq	11778 <print_schema@@Base+0x22c>
   11740:	ldr	r0, [pc, #236]	; 11834 <print_schema@@Base+0x2e8>
   11744:	add	r0, pc, r0
   11748:	bl	10958 <printf@plt>
   1174c:	ldr	r0, [r8]
   11750:	mov	r1, r8
   11754:	ldrh	r2, [r1, -r0]!
   11758:	mov	r0, #0
   1175c:	cmp	r2, #14
   11760:	bcc	11774 <print_schema@@Base+0x228>
   11764:	ldrh	r1, [r1, #12]
   11768:	cmp	r1, #0
   1176c:	ldrne	r0, [r8, r1]!
   11770:	addne	r0, r8, r0
   11774:	bl	10cf4 <print_object@@Base>
   11778:	ldr	r0, [pc, #184]	; 11838 <print_schema@@Base+0x2ec>
   1177c:	add	r0, pc, r0
   11780:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   11784:	b	109a0 <puts@plt>
   11788:	ldr	r0, [pc, #172]	; 1183c <print_schema@@Base+0x2f0>
   1178c:	ldr	r1, [pc, #172]	; 11840 <print_schema@@Base+0x2f4>
   11790:	ldr	r3, [pc, #172]	; 11844 <print_schema@@Base+0x2f8>
   11794:	mov	r2, #215	; 0xd7
   11798:	add	r0, pc, r0
   1179c:	add	r1, pc, r1
   117a0:	add	r3, pc, r3
   117a4:	bl	10a24 <__assert_fail@plt>
   117a8:	ldr	r0, [pc, #164]	; 11854 <print_schema@@Base+0x308>
   117ac:	ldr	r1, [pc, #164]	; 11858 <print_schema@@Base+0x30c>
   117b0:	ldr	r3, [pc, #164]	; 1185c <print_schema@@Base+0x310>
   117b4:	mov	r2, #174	; 0xae
   117b8:	add	r0, pc, r0
   117bc:	add	r1, pc, r1
   117c0:	add	r3, pc, r3
   117c4:	bl	10a24 <__assert_fail@plt>
   117c8:	ldr	r0, [pc, #80]	; 11820 <print_schema@@Base+0x2d4>
   117cc:	add	r0, pc, r0
   117d0:	b	117fc <print_schema@@Base+0x2b0>
   117d4:	ldr	r0, [pc, #108]	; 11848 <print_schema@@Base+0x2fc>
   117d8:	ldr	r1, [pc, #108]	; 1184c <print_schema@@Base+0x300>
   117dc:	ldr	r3, [pc, #108]	; 11850 <print_schema@@Base+0x304>
   117e0:	mov	r2, #238	; 0xee
   117e4:	add	r0, pc, r0
   117e8:	add	r1, pc, r1
   117ec:	add	r3, pc, r3
   117f0:	bl	10a24 <__assert_fail@plt>
   117f4:	ldr	r0, [pc, #24]	; 11814 <print_schema@@Base+0x2c8>
   117f8:	add	r0, pc, r0
   117fc:	ldr	r1, [pc, #20]	; 11818 <print_schema@@Base+0x2cc>
   11800:	ldr	r3, [pc, #20]	; 1181c <print_schema@@Base+0x2d0>
   11804:	mov	r2, #237	; 0xed
   11808:	add	r1, pc, r1
   1180c:	add	r3, pc, r3
   11810:	bl	10a24 <__assert_fail@plt>
   11814:	andeq	r0, r0, r5, lsr r6
   11818:	andeq	r0, r0, fp, asr #12
   1181c:	andeq	r0, r0, r9, lsr sl
   11820:	ldrdeq	r0, [r0], -r6
   11824:	andeq	r0, r0, r8, lsr #13
   11828:	andeq	r0, r0, r8, lsl r6
   1182c:	andeq	r0, r0, fp, ror r5
   11830:	andeq	r0, r0, lr, asr #10
   11834:	andeq	r0, r0, pc, lsr #10
   11838:	andeq	r0, r0, r4, lsl #24
   1183c:	andeq	r0, r0, r2, ror r8
   11840:			; <UNDEFINED> instruction: 0x000006b7
   11844:	strdeq	r0, [r0], -r2
   11848:			; <UNDEFINED> instruction: 0x000007be
   1184c:	andeq	r0, r0, fp, ror #12
   11850:	strdeq	r0, [r0], -sl
   11854:	andeq	r0, r0, r2, asr r8
   11858:	muleq	r0, r7, r6
   1185c:	andeq	r0, r0, pc, ror #22

00011860 <load_and_dump_schema@@Base>:
   11860:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11864:	add	fp, sp, #24
   11868:	ldr	r1, [pc, #396]	; 119fc <load_and_dump_schema@@Base+0x19c>
   1186c:	mov	r8, r0
   11870:	add	r1, pc, r1
   11874:	bl	10964 <fopen@plt>
   11878:	cmp	r0, #0
   1187c:	beq	11958 <load_and_dump_schema@@Base+0xf8>
   11880:	mov	r1, #0
   11884:	mov	r2, #2
   11888:	mov	r6, r0
   1188c:	bl	10a0c <fseek@plt>
   11890:	mov	r0, r6
   11894:	bl	1097c <ftell@plt>
   11898:	mov	r7, r0
   1189c:	movw	r0, #10000	; 0x2710
   118a0:	cmp	r7, r0
   118a4:	bhi	11944 <load_and_dump_schema@@Base+0xe4>
   118a8:	mov	r0, r6
   118ac:	bl	10988 <rewind@plt>
   118b0:	cmp	r7, #0
   118b4:	mov	r0, r7
   118b8:	movweq	r0, #1
   118bc:	bl	109ac <malloc@plt>
   118c0:	cmp	r0, #0
   118c4:	beq	11944 <load_and_dump_schema@@Base+0xe4>
   118c8:	mov	r4, r0
   118cc:	mov	r1, #0
   118d0:	mov	r5, r1
   118d4:	add	r0, r4, r1
   118d8:	sub	r2, r7, r1
   118dc:	mov	r1, #1
   118e0:	mov	r3, r6
   118e4:	bl	10a00 <fread_unlocked@plt>
   118e8:	add	r1, r0, r5
   118ec:	cmp	r0, #0
   118f0:	bne	118d0 <load_and_dump_schema@@Base+0x70>
   118f4:	mov	r0, r6
   118f8:	bl	109f4 <fclose@plt>
   118fc:	cmp	r7, r5
   11900:	bne	11950 <load_and_dump_schema@@Base+0xf0>
   11904:	cmp	r7, #11
   11908:	bls	11980 <load_and_dump_schema@@Base+0x120>
   1190c:	mov	r5, r4
   11910:	movw	r0, #17986	; 0x4642
   11914:	ldr	r6, [r5, #4]!
   11918:	movt	r0, #21314	; 0x5342
   1191c:	cmp	r6, r0
   11920:	bne	119a0 <load_and_dump_schema@@Base+0x140>
   11924:	ldr	r0, [r4]
   11928:	add	r0, r4, r0
   1192c:	bl	1154c <print_schema@@Base>
   11930:	mov	r5, #0
   11934:	mov	r0, r4
   11938:	bl	10970 <free@plt>
   1193c:	mov	r0, r5
   11940:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11944:	mov	r0, r6
   11948:	bl	109f4 <fclose@plt>
   1194c:	b	11958 <load_and_dump_schema@@Base+0xf8>
   11950:	mov	r0, r4
   11954:	bl	10970 <free@plt>
   11958:	ldr	r0, [pc, #176]	; 11a10 <load_and_dump_schema@@Base+0x1b0>
   1195c:	mov	r2, r8
   11960:	ldr	r0, [pc, r0]
   11964:	ldr	r0, [r0]
   11968:	ldr	r1, [pc, #164]	; 11a14 <load_and_dump_schema@@Base+0x1b4>
   1196c:	add	r1, pc, r1
   11970:	bl	109dc <fprintf@plt>
   11974:	mvn	r5, #0
   11978:	mov	r0, r5
   1197c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11980:	ldr	r0, [pc, #120]	; 11a00 <load_and_dump_schema@@Base+0x1a0>
   11984:	mov	r2, r8
   11988:	ldr	r0, [pc, r0]
   1198c:	ldr	r0, [r0]
   11990:	ldr	r1, [pc, #108]	; 11a04 <load_and_dump_schema@@Base+0x1a4>
   11994:	add	r1, pc, r1
   11998:	bl	109dc <fprintf@plt>
   1199c:	b	119f4 <load_and_dump_schema@@Base+0x194>
   119a0:	ldr	r1, [r4, #8]
   119a4:	cmp	r1, r0
   119a8:	bne	119d4 <load_and_dump_schema@@Base+0x174>
   119ac:	ldr	r0, [pc, #84]	; 11a08 <load_and_dump_schema@@Base+0x1a8>
   119b0:	mov	r1, #40	; 0x28
   119b4:	mov	r2, #1
   119b8:	ldr	r0, [pc, r0]
   119bc:	ldr	r3, [r0]
   119c0:	ldr	r0, [pc, #68]	; 11a0c <load_and_dump_schema@@Base+0x1ac>
   119c4:	add	r0, pc, r0
   119c8:	bl	10994 <fwrite@plt>
   119cc:	add	r0, r5, r6
   119d0:	b	1192c <load_and_dump_schema@@Base+0xcc>
   119d4:	ldr	r0, [pc, #60]	; 11a18 <load_and_dump_schema@@Base+0x1b8>
   119d8:	mov	r1, #27
   119dc:	mov	r2, #1
   119e0:	ldr	r0, [pc, r0]
   119e4:	ldr	r3, [r0]
   119e8:	ldr	r0, [pc, #44]	; 11a1c <load_and_dump_schema@@Base+0x1bc>
   119ec:	add	r0, pc, r0
   119f0:	bl	10994 <fwrite@plt>
   119f4:	mvn	r5, #0
   119f8:	b	11934 <load_and_dump_schema@@Base+0xd4>
   119fc:	andeq	r0, r0, sp, lsl #22
   11a00:	andeq	r1, r1, r4, asr #13
   11a04:	andeq	r0, r0, r7, lsl r3
   11a08:	muleq	r1, r4, r6
   11a0c:	andeq	r0, r0, r7, lsl #6
   11a10:	andeq	r1, r1, ip, ror #13
   11a14:	andeq	r0, r0, r6, lsl r3
   11a18:	andeq	r1, r1, ip, ror #12
   11a1c:	andeq	r0, r0, r8, lsl #6

00011a20 <main@@Base>:
   11a20:	push	{r4, sl, fp, lr}
   11a24:	add	fp, sp, #8
   11a28:	cmp	r0, #2
   11a2c:	bne	11a3c <main@@Base+0x1c>
   11a30:	ldr	r0, [r1, #4]
   11a34:	pop	{r4, sl, fp, lr}
   11a38:	b	11860 <load_and_dump_schema@@Base>
   11a3c:	ldr	r4, [pc, #80]	; 11a94 <main@@Base+0x74>
   11a40:	mov	r1, #28
   11a44:	mov	r2, #1
   11a48:	ldr	r4, [pc, r4]
   11a4c:	ldr	r3, [r4]
   11a50:	ldr	r0, [pc, #64]	; 11a98 <main@@Base+0x78>
   11a54:	add	r0, pc, r0
   11a58:	bl	10994 <fwrite@plt>
   11a5c:	ldr	r3, [r4]
   11a60:	ldr	r0, [pc, #52]	; 11a9c <main@@Base+0x7c>
   11a64:	mov	r1, #74	; 0x4a
   11a68:	mov	r2, #1
   11a6c:	add	r0, pc, r0
   11a70:	bl	10994 <fwrite@plt>
   11a74:	ldr	r3, [r4]
   11a78:	ldr	r0, [pc, #32]	; 11aa0 <main@@Base+0x80>
   11a7c:	mov	r1, #180	; 0xb4
   11a80:	mov	r2, #1
   11a84:	add	r0, pc, r0
   11a88:	bl	10994 <fwrite@plt>
   11a8c:	mvn	r0, #0
   11a90:	bl	109d0 <exit@plt>
   11a94:	andeq	r1, r1, r4, lsl #12
   11a98:			; <UNDEFINED> instruction: 0x000002bc
   11a9c:	andeq	r0, r0, r1, asr #5
   11aa0:	strdeq	r0, [r0], -r4

00011aa4 <__libc_csu_init@@Base>:
   11aa4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11aa8:	mov	r7, r0
   11aac:	ldr	r6, [pc, #72]	; 11afc <__libc_csu_init@@Base+0x58>
   11ab0:	ldr	r5, [pc, #72]	; 11b00 <__libc_csu_init@@Base+0x5c>
   11ab4:	add	r6, pc, r6
   11ab8:	add	r5, pc, r5
   11abc:	sub	r6, r6, r5
   11ac0:	mov	r8, r1
   11ac4:	mov	r9, r2
   11ac8:	bl	10938 <printf@plt-0x20>
   11acc:	asrs	r6, r6, #2
   11ad0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11ad4:	mov	r4, #0
   11ad8:	add	r4, r4, #1
   11adc:	ldr	r3, [r5], #4
   11ae0:	mov	r2, r9
   11ae4:	mov	r1, r8
   11ae8:	mov	r0, r7
   11aec:	blx	r3
   11af0:	cmp	r6, r4
   11af4:	bne	11ad8 <__libc_csu_init@@Base+0x34>
   11af8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11afc:	andeq	r1, r1, ip, lsl #8
   11b00:	andeq	r1, r1, r4, lsl #8

00011b04 <__libc_csu_fini@@Base>:
   11b04:	bx	lr

Disassembly of section .fini:

00011b08 <.fini>:
   11b08:	push	{r3, lr}
   11b0c:	pop	{r3, pc}
