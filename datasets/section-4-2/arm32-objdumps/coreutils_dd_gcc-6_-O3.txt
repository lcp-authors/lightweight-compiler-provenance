
../repos/coreutils/src/dd:     file format elf32-littlearm


Disassembly of section .init:

0001112c <.init>:
   1112c:	push	{r3, lr}
   11130:	bl	13890 <__assert_fail@plt+0x23b4>
   11134:	pop	{r3, pc}

Disassembly of section .plt:

00011138 <calloc@plt-0x14>:
   11138:	push	{lr}		; (str lr, [sp, #-4]!)
   1113c:	ldr	lr, [pc, #4]	; 11148 <calloc@plt-0x4>
   11140:	add	lr, pc, lr
   11144:	ldr	pc, [lr, #8]!
   11148:			; <UNDEFINED> instruction: 0x00020eb8

0001114c <calloc@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #32, 20	; 0x20000
   11154:	ldr	pc, [ip, #3768]!	; 0xeb8

00011158 <fputs_unlocked@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #32, 20	; 0x20000
   11160:	ldr	pc, [ip, #3760]!	; 0xeb0

00011164 <raise@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #32, 20	; 0x20000
   1116c:	ldr	pc, [ip, #3752]!	; 0xea8

00011170 <fsync@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #32, 20	; 0x20000
   11178:	ldr	pc, [ip, #3744]!	; 0xea0

0001117c <strcmp@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #32, 20	; 0x20000
   11184:	ldr	pc, [ip, #3736]!	; 0xe98

00011188 <posix_fadvise64@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #32, 20	; 0x20000
   11190:	ldr	pc, [ip, #3728]!	; 0xe90

00011194 <read@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #32, 20	; 0x20000
   1119c:	ldr	pc, [ip, #3720]!	; 0xe88

000111a0 <fflush@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #32, 20	; 0x20000
   111a8:	ldr	pc, [ip, #3712]!	; 0xe80

000111ac <sigprocmask@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #32, 20	; 0x20000
   111b4:	ldr	pc, [ip, #3704]!	; 0xe78

000111b8 <memmove@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #32, 20	; 0x20000
   111c0:	ldr	pc, [ip, #3696]!	; 0xe70

000111c4 <free@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #32, 20	; 0x20000
   111cc:	ldr	pc, [ip, #3688]!	; 0xe68

000111d0 <clock_gettime@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #32, 20	; 0x20000
   111d8:	ldr	pc, [ip, #3680]!	; 0xe60

000111dc <_exit@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #32, 20	; 0x20000
   111e4:	ldr	pc, [ip, #3672]!	; 0xe58

000111e8 <memcpy@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #32, 20	; 0x20000
   111f0:	ldr	pc, [ip, #3664]!	; 0xe50

000111f4 <__strtoull_internal@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #32, 20	; 0x20000
   111fc:	ldr	pc, [ip, #3656]!	; 0xe48

00011200 <mbsinit@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #32, 20	; 0x20000
   11208:	ldr	pc, [ip, #3648]!	; 0xe40

0001120c <ftruncate64@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #32, 20	; 0x20000
   11214:	ldr	pc, [ip, #3640]!	; 0xe38

00011218 <memcmp@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #32, 20	; 0x20000
   11220:	ldr	pc, [ip, #3632]!	; 0xe30

00011224 <fputc_unlocked@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #32, 20	; 0x20000
   1122c:	ldr	pc, [ip, #3624]!	; 0xe28

00011230 <dcgettext@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #32, 20	; 0x20000
   11238:	ldr	pc, [ip, #3616]!	; 0xe20

0001123c <dup2@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #32, 20	; 0x20000
   11244:	ldr	pc, [ip, #3608]!	; 0xe18

00011248 <realloc@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #32, 20	; 0x20000
   11250:	ldr	pc, [ip, #3600]!	; 0xe10

00011254 <sigismember@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #32, 20	; 0x20000
   1125c:	ldr	pc, [ip, #3592]!	; 0xe08

00011260 <textdomain@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #32, 20	; 0x20000
   11268:	ldr	pc, [ip, #3584]!	; 0xe00

0001126c <iswprint@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #32, 20	; 0x20000
   11274:	ldr	pc, [ip, #3576]!	; 0xdf8

00011278 <__fxstat64@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #32, 20	; 0x20000
   11280:	ldr	pc, [ip, #3568]!	; 0xdf0

00011284 <sigaction@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #32, 20	; 0x20000
   1128c:	ldr	pc, [ip, #3560]!	; 0xde8

00011290 <__memcpy_chk@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #32, 20	; 0x20000
   11298:	ldr	pc, [ip, #3552]!	; 0xde0

0001129c <fwrite@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #32, 20	; 0x20000
   112a4:	ldr	pc, [ip, #3544]!	; 0xdd8

000112a8 <lseek64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #32, 20	; 0x20000
   112b0:	ldr	pc, [ip, #3536]!	; 0xdd0

000112b4 <__ctype_get_mb_cur_max@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #32, 20	; 0x20000
   112bc:	ldr	pc, [ip, #3528]!	; 0xdc8

000112c0 <__fpending@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #32, 20	; 0x20000
   112c8:	ldr	pc, [ip, #3520]!	; 0xdc0

000112cc <mbrtowc@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #32, 20	; 0x20000
   112d4:	ldr	pc, [ip, #3512]!	; 0xdb8

000112d8 <error@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #32, 20	; 0x20000
   112e0:	ldr	pc, [ip, #3504]!	; 0xdb0

000112e4 <open64@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #32, 20	; 0x20000
   112ec:	ldr	pc, [ip, #3496]!	; 0xda8

000112f0 <getenv@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #32, 20	; 0x20000
   112f8:	ldr	pc, [ip, #3488]!	; 0xda0

000112fc <malloc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #32, 20	; 0x20000
   11304:	ldr	pc, [ip, #3480]!	; 0xd98

00011308 <error_at_line@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #32, 20	; 0x20000
   11310:	ldr	pc, [ip, #3472]!	; 0xd90

00011314 <sigaddset@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #32, 20	; 0x20000
   1131c:	ldr	pc, [ip, #3464]!	; 0xd88

00011320 <__libc_start_main@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #32, 20	; 0x20000
   11328:	ldr	pc, [ip, #3456]!	; 0xd80

0001132c <__freading@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #32, 20	; 0x20000
   11334:	ldr	pc, [ip, #3448]!	; 0xd78

00011338 <__ctype_tolower_loc@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #32, 20	; 0x20000
   11340:	ldr	pc, [ip, #3440]!	; 0xd70

00011344 <__ctype_toupper_loc@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #32, 20	; 0x20000
   1134c:	ldr	pc, [ip, #3432]!	; 0xd68

00011350 <__gmon_start__@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #32, 20	; 0x20000
   11358:	ldr	pc, [ip, #3424]!	; 0xd60

0001135c <getopt_long@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #32, 20	; 0x20000
   11364:	ldr	pc, [ip, #3416]!	; 0xd58

00011368 <__ctype_b_loc@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #32, 20	; 0x20000
   11370:	ldr	pc, [ip, #3408]!	; 0xd50

00011374 <exit@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #32, 20	; 0x20000
   1137c:	ldr	pc, [ip, #3400]!	; 0xd48

00011380 <strlen@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #32, 20	; 0x20000
   11388:	ldr	pc, [ip, #3392]!	; 0xd40

0001138c <strchr@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #32, 20	; 0x20000
   11394:	ldr	pc, [ip, #3384]!	; 0xd38

00011398 <getpagesize@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #32, 20	; 0x20000
   113a0:	ldr	pc, [ip, #3376]!	; 0xd30

000113a4 <__errno_location@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #32, 20	; 0x20000
   113ac:	ldr	pc, [ip, #3368]!	; 0xd28

000113b0 <__sprintf_chk@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #32, 20	; 0x20000
   113b8:	ldr	pc, [ip, #3360]!	; 0xd20

000113bc <__cxa_atexit@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #32, 20	; 0x20000
   113c4:	ldr	pc, [ip, #3352]!	; 0xd18

000113c8 <__vasprintf_chk@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #32, 20	; 0x20000
   113d0:	ldr	pc, [ip, #3344]!	; 0xd10

000113d4 <memset@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #32, 20	; 0x20000
   113dc:	ldr	pc, [ip, #3336]!	; 0xd08

000113e0 <__printf_chk@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #32, 20	; 0x20000
   113e8:	ldr	pc, [ip, #3328]!	; 0xd00

000113ec <write@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #32, 20	; 0x20000
   113f4:	ldr	pc, [ip, #3320]!	; 0xcf8

000113f8 <fileno@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #32, 20	; 0x20000
   11400:	ldr	pc, [ip, #3312]!	; 0xcf0

00011404 <__fprintf_chk@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #32, 20	; 0x20000
   1140c:	ldr	pc, [ip, #3304]!	; 0xce8

00011410 <fclose@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #32, 20	; 0x20000
   11418:	ldr	pc, [ip, #3296]!	; 0xce0

0001141c <fseeko64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #32, 20	; 0x20000
   11424:	ldr	pc, [ip, #3288]!	; 0xcd8

00011428 <fcntl64@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #32, 20	; 0x20000
   11430:	ldr	pc, [ip, #3280]!	; 0xcd0

00011434 <__overflow@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #32, 20	; 0x20000
   1143c:	ldr	pc, [ip, #3272]!	; 0xcc8

00011440 <setlocale@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #32, 20	; 0x20000
   11448:	ldr	pc, [ip, #3264]!	; 0xcc0

0001144c <sigemptyset@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #32, 20	; 0x20000
   11454:	ldr	pc, [ip, #3256]!	; 0xcb8

00011458 <strrchr@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #32, 20	; 0x20000
   11460:	ldr	pc, [ip, #3248]!	; 0xcb0

00011464 <nl_langinfo@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #32, 20	; 0x20000
   1146c:	ldr	pc, [ip, #3240]!	; 0xca8

00011470 <localeconv@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #32, 20	; 0x20000
   11478:	ldr	pc, [ip, #3232]!	; 0xca0

0001147c <bindtextdomain@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #32, 20	; 0x20000
   11484:	ldr	pc, [ip, #3224]!	; 0xc98

00011488 <aligned_alloc@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #32, 20	; 0x20000
   11490:	ldr	pc, [ip, #3216]!	; 0xc90

00011494 <strncmp@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #32, 20	; 0x20000
   1149c:	ldr	pc, [ip, #3208]!	; 0xc88

000114a0 <fdatasync@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #32, 20	; 0x20000
   114a8:	ldr	pc, [ip, #3200]!	; 0xc80

000114ac <abort@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #32, 20	; 0x20000
   114b4:	ldr	pc, [ip, #3192]!	; 0xc78

000114b8 <close@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #32, 20	; 0x20000
   114c0:	ldr	pc, [ip, #3184]!	; 0xc70

000114c4 <dcngettext@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #32, 20	; 0x20000
   114cc:	ldr	pc, [ip, #3176]!	; 0xc68

000114d0 <__snprintf_chk@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #32, 20	; 0x20000
   114d8:	ldr	pc, [ip, #3168]!	; 0xc60

000114dc <__assert_fail@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #32, 20	; 0x20000
   114e4:	ldr	pc, [ip, #3160]!	; 0xc58

Disassembly of section .text:

000114e8 <.text>:
   114e8:	push	{r7, lr}
   114ec:	mov	r2, #5
   114f0:	sub	sp, sp, #672	; 0x2a0
   114f4:	ldr	r1, [pc, #76]	; 11548 <__assert_fail@plt+0x6c>
   114f8:	mov	r0, #0
   114fc:	bl	11230 <dcgettext@plt>
   11500:	ldr	r2, [pc, #68]	; 1154c <__assert_fail@plt+0x70>
   11504:	mov	r6, #1
   11508:	mov	r7, #0
   1150c:	ldr	r4, [r2, #108]	; 0x6c
   11510:	ldr	r3, [pc, #56]	; 11550 <__assert_fail@plt+0x74>
   11514:	add	r2, sp, #20
   11518:	asr	r1, r4, #31
   1151c:	strd	r6, [sp, #8]
   11520:	strd	r6, [sp]
   11524:	mov	r5, r0
   11528:	mov	r0, r4
   1152c:	bl	16818 <__assert_fail@plt+0x533c>
   11530:	mov	r3, r4
   11534:	mov	r2, r5
   11538:	mov	r1, #0
   1153c:	str	r0, [sp]
   11540:	mov	r0, #1
   11544:	bl	13ee4 <__assert_fail@plt+0x2a08>
   11548:	andeq	pc, r1, r0, lsl #11
   1154c:	andeq	r2, r3, r8, ror #3
   11550:	strdeq	r0, [r0], -r1
   11554:	push	{r7, lr}
   11558:	mov	r2, #5
   1155c:	sub	sp, sp, #672	; 0x2a0
   11560:	ldr	r1, [pc, #76]	; 115b4 <__assert_fail@plt+0xd8>
   11564:	mov	r0, #0
   11568:	bl	11230 <dcgettext@plt>
   1156c:	ldr	r2, [pc, #68]	; 115b8 <__assert_fail@plt+0xdc>
   11570:	mov	r6, #1
   11574:	mov	r7, #0
   11578:	ldr	r4, [r2, #120]	; 0x78
   1157c:	ldr	r3, [pc, #56]	; 115bc <__assert_fail@plt+0xe0>
   11580:	add	r2, sp, #20
   11584:	asr	r1, r4, #31
   11588:	strd	r6, [sp, #8]
   1158c:	strd	r6, [sp]
   11590:	mov	r5, r0
   11594:	mov	r0, r4
   11598:	bl	16818 <__assert_fail@plt+0x533c>
   1159c:	mov	r3, r4
   115a0:	mov	r2, r5
   115a4:	mov	r1, #0
   115a8:	str	r0, [sp]
   115ac:	mov	r0, #1
   115b0:	bl	13ee4 <__assert_fail@plt+0x2a08>
   115b4:			; <UNDEFINED> instruction: 0x0001f5b8
   115b8:	andeq	r2, r3, r8, ror #3
   115bc:	strdeq	r0, [r0], -r1
   115c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115c4:	mov	fp, r0
   115c8:	sub	sp, sp, #220	; 0xdc
   115cc:	ldr	r0, [pc, #444]	; 11790 <__assert_fail@plt+0x2b4>
   115d0:	mov	r7, r1
   115d4:	bl	112f0 <getenv@plt>
   115d8:	mov	r4, r0
   115dc:	ldr	r0, [pc, #432]	; 11794 <__assert_fail@plt+0x2b8>
   115e0:	bl	1144c <sigemptyset@plt>
   115e4:	cmp	r4, #0
   115e8:	beq	135f8 <__assert_fail@plt+0x211c>
   115ec:	add	r2, sp, #72	; 0x48
   115f0:	mov	r1, #0
   115f4:	mov	r0, #2
   115f8:	bl	11284 <sigaction@plt>
   115fc:	ldr	r3, [sp, #72]	; 0x48
   11600:	cmp	r3, #1
   11604:	beq	11614 <__assert_fail@plt+0x138>
   11608:	mov	r1, #2
   1160c:	ldr	r0, [pc, #384]	; 11794 <__assert_fail@plt+0x2b8>
   11610:	bl	11314 <sigaddset@plt>
   11614:	mov	r2, #128	; 0x80
   11618:	ldr	r1, [pc, #372]	; 11794 <__assert_fail@plt+0x2b8>
   1161c:	add	r0, sp, #76	; 0x4c
   11620:	bl	111e8 <memcpy@plt>
   11624:	mov	r1, #10
   11628:	ldr	r0, [pc, #356]	; 11794 <__assert_fail@plt+0x2b8>
   1162c:	bl	11254 <sigismember@plt>
   11630:	cmp	r0, #0
   11634:	bne	135d4 <__assert_fail@plt+0x20f8>
   11638:	mov	r1, #2
   1163c:	ldr	r0, [pc, #336]	; 11794 <__assert_fail@plt+0x2b8>
   11640:	bl	11254 <sigismember@plt>
   11644:	cmp	r0, #0
   11648:	bne	13614 <__assert_fail@plt+0x2138>
   1164c:	ldr	r0, [r7]
   11650:	bl	17988 <__assert_fail@plt+0x64ac>
   11654:	ldr	r1, [pc, #316]	; 11798 <__assert_fail@plt+0x2bc>
   11658:	mov	r0, #6
   1165c:	bl	11440 <setlocale@plt>
   11660:	ldr	r1, [pc, #308]	; 1179c <__assert_fail@plt+0x2c0>
   11664:	ldr	r0, [pc, #308]	; 117a0 <__assert_fail@plt+0x2c4>
   11668:	bl	1147c <bindtextdomain@plt>
   1166c:	ldr	r0, [pc, #300]	; 117a0 <__assert_fail@plt+0x2c4>
   11670:	bl	11260 <textdomain@plt>
   11674:	ldr	r0, [pc, #296]	; 117a4 <__assert_fail@plt+0x2c8>
   11678:	bl	1eea4 <__assert_fail@plt+0xd9c8>
   1167c:	bl	11398 <getpagesize@plt>
   11680:	ldr	r3, [pc, #288]	; 117a8 <__assert_fail@plt+0x2cc>
   11684:	ldr	r4, [pc, #288]	; 117ac <__assert_fail@plt+0x2d0>
   11688:	ldr	lr, [pc, #288]	; 117b0 <__assert_fail@plt+0x2d4>
   1168c:	ldr	r3, [r3]
   11690:	ldr	ip, [pc, #284]	; 117b4 <__assert_fail@plt+0x2d8>
   11694:	ldr	r1, [pc, #284]	; 117b8 <__assert_fail@plt+0x2dc>
   11698:	ldr	r2, [pc, #284]	; 117bc <__assert_fail@plt+0x2e0>
   1169c:	mov	r6, #0
   116a0:	str	r3, [sp]
   116a4:	mov	r3, #1
   116a8:	str	ip, [sp, #16]
   116ac:	str	r1, [sp, #12]
   116b0:	str	r2, [sp, #8]
   116b4:	str	r3, [sp, #4]
   116b8:	str	lr, [sp, #20]
   116bc:	str	r6, [sp, #24]
   116c0:	ldr	r3, [pc, #216]	; 117a0 <__assert_fail@plt+0x2c4>
   116c4:	ldr	r2, [pc, #244]	; 117c0 <__assert_fail@plt+0x2e4>
   116c8:	mov	r1, r7
   116cc:	add	ip, r4, #304	; 0x130
   116d0:	sub	r9, ip, #1
   116d4:	str	r0, [r4, #104]	; 0x68
   116d8:	mov	r0, fp
   116dc:	bl	178b0 <__assert_fail@plt+0x63d4>
   116e0:	ldr	r1, [pc, #280]	; 11800 <__assert_fail@plt+0x324>
   116e4:	mov	r2, r9
   116e8:	mov	r3, r6
   116ec:	strb	r6, [r1, #24]
   116f0:	strb	r3, [r2, #1]!
   116f4:	add	r3, r3, #1
   116f8:	cmp	r3, #256	; 0x100
   116fc:	bne	116f0 <__assert_fail@plt+0x214>
   11700:	ldr	r3, [pc, #188]	; 117c4 <__assert_fail@plt+0x2e8>
   11704:	mov	r2, #0
   11708:	str	r2, [sp, #68]	; 0x44
   1170c:	ldr	sl, [r3]
   11710:	mov	r2, #0
   11714:	cmp	fp, sl
   11718:	mov	r3, #0
   1171c:	ble	12564 <__assert_fail@plt+0x1088>
   11720:	strd	r2, [sp, #48]	; 0x30
   11724:	strd	r2, [sp, #40]	; 0x28
   11728:	add	r7, r7, sl, lsl #2
   1172c:	mvn	r2, #0
   11730:	mvn	r3, #-2147483648	; 0x80000000
   11734:	str	r9, [sp, #60]	; 0x3c
   11738:	strd	r2, [sp, #32]
   1173c:	ldr	r6, [r7], #4
   11740:	mov	r1, #61	; 0x3d
   11744:	mov	r0, r6
   11748:	bl	1138c <strchr@plt>
   1174c:	subs	r5, r0, #0
   11750:	beq	13638 <__assert_fail@plt+0x215c>
   11754:	ldr	r0, [pc, #108]	; 117c8 <__assert_fail@plt+0x2ec>
   11758:	add	r5, r5, #1
   1175c:	mov	r2, r6
   11760:	mov	r3, #105	; 0x69
   11764:	b	11774 <__assert_fail@plt+0x298>
   11768:	ldrb	r3, [r0, #1]!
   1176c:	cmp	r3, #0
   11770:	beq	12254 <__assert_fail@plt+0xd78>
   11774:	ldrb	r1, [r2], #1
   11778:	cmp	r1, r3
   1177c:	beq	11768 <__assert_fail@plt+0x28c>
   11780:	ldr	r0, [pc, #68]	; 117cc <__assert_fail@plt+0x2f0>
   11784:	mov	r2, r6
   11788:	mov	r3, #111	; 0x6f
   1178c:	b	1181c <__assert_fail@plt+0x340>
   11790:	andeq	r0, r2, r0, asr #11
   11794:	andeq	r2, r3, r8, ror #4
   11798:	andeq	r0, r2, r0, ror #3
   1179c:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   117a0:	muleq	r2, r8, r3
   117a4:	andeq	r4, r1, r8, asr #5
   117a8:	andeq	r2, r3, r8, ror r1
   117ac:	andeq	r2, r3, r8, ror #3
   117b0:	andeq	r0, r2, r8, ror #11
   117b4:	strdeq	r0, [r2], -r4
   117b8:	andeq	r0, r2, r4, lsl #12
   117bc:	andeq	r4, r1, r4, lsr #11
   117c0:	andeq	pc, r1, ip, asr #12
   117c4:	ldrdeq	r2, [r3], -r0
   117c8:	andeq	r0, r2, r8, lsr #12
   117cc:	andeq	r0, r2, ip, lsr #12
   117d0:	andeq	r0, r2, r0, lsr r6
   117d4:	andeq	r0, r2, r8, lsr r6
   117d8:	andeq	lr, r1, r0, lsl #30
   117dc:	andseq	r1, r0, r0
   117e0:	andeq	r2, r3, r8, lsl r4
   117e4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   117e8:	andeq	r0, r2, r8, lsl r7
   117ec:	andeq	r0, r2, ip, lsr r7
   117f0:	andeq	r0, r2, ip, asr r7
   117f4:	andeq	r0, r1, r2
   117f8:	andeq	r2, r3, r8, lsl r3
   117fc:	andeq	lr, r1, r8, asr #29
   11800:	andeq	r2, r3, r0, asr r1
   11804:	andeq	r2, r3, r8, lsr #8
   11808:			; <UNDEFINED> instruction: 0x000001b6
   1180c:	andeq	r2, r3, r8, asr #8
   11810:	ldrb	r3, [r0, #1]!
   11814:	cmp	r3, #0
   11818:	beq	1226c <__assert_fail@plt+0xd90>
   1181c:	ldrb	r1, [r2], #1
   11820:	cmp	r1, r3
   11824:	beq	11810 <__assert_fail@plt+0x334>
   11828:	ldr	r1, [pc, #-96]	; 117d0 <__assert_fail@plt+0x2f4>
   1182c:	mov	r2, r6
   11830:	mov	r3, #99	; 0x63
   11834:	ldrb	r0, [r2], #1
   11838:	cmp	r0, r3
   1183c:	bne	12284 <__assert_fail@plt+0xda8>
   11840:	ldrb	r3, [r1, #1]!
   11844:	cmp	r3, #0
   11848:	bne	11834 <__assert_fail@plt+0x358>
   1184c:	ldrb	r3, [r2]
   11850:	cmp	r3, #61	; 0x3d
   11854:	cmpne	r3, #0
   11858:	bne	12284 <__assert_fail@plt+0xda8>
   1185c:	mov	r0, r5
   11860:	ldr	r2, [pc, #-148]	; 117d4 <__assert_fail@plt+0x2f8>
   11864:	ldr	r1, [pc, #-148]	; 117d8 <__assert_fail@plt+0x2fc>
   11868:	bl	14a90 <__assert_fail@plt+0x35b4>
   1186c:	ldr	r3, [r4, #116]	; 0x74
   11870:	orr	r3, r3, r0
   11874:	str	r3, [r4, #116]	; 0x74
   11878:	add	sl, sl, #1
   1187c:	cmp	fp, sl
   11880:	bne	1173c <__assert_fail@plt+0x260>
   11884:	ldr	r6, [sp, #68]	; 0x44
   11888:	ldr	r9, [sp, #60]	; 0x3c
   1188c:	cmp	r6, #0
   11890:	beq	12578 <__assert_fail@plt+0x109c>
   11894:	mov	r7, r6
   11898:	str	r6, [r4, #120]	; 0x78
   1189c:	str	r6, [r4, #108]	; 0x6c
   118a0:	ldr	r3, [r4, #284]	; 0x11c
   118a4:	ldr	r5, [r4, #296]	; 0x128
   118a8:	cmp	r3, #0
   118ac:	ldr	r8, [r4, #268]	; 0x10c
   118b0:	ldreq	r3, [r4, #116]	; 0x74
   118b4:	biceq	r3, r3, #24
   118b8:	streq	r3, [r4, #116]	; 0x74
   118bc:	ldr	r3, [pc, #-232]	; 117dc <__assert_fail@plt+0x300>
   118c0:	tst	r5, r3
   118c4:	orrne	r5, r5, r3
   118c8:	strne	r5, [r4, #296]	; 0x128
   118cc:	ands	sl, r8, #1
   118d0:	bne	13400 <__assert_fail@plt+0x1f24>
   118d4:	ands	fp, r5, #16
   118d8:	bne	133d4 <__assert_fail@plt+0x1ef8>
   118dc:	tst	r8, #12
   118e0:	bne	1338c <__assert_fail@plt+0x1eb0>
   118e4:	ldrd	r0, [sp, #40]	; 0x28
   118e8:	tst	r5, #8
   118ec:	mov	r2, r0
   118f0:	mov	r3, r1
   118f4:	beq	137cc <__assert_fail@plt+0x22f0>
   118f8:	orrs	r3, r2, r3
   118fc:	beq	1192c <__assert_fail@plt+0x450>
   11900:	asr	fp, r7, #31
   11904:	mov	r2, r7
   11908:	mov	r3, fp
   1190c:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   11910:	ldr	ip, [pc, #-312]	; 117e0 <__assert_fail@plt+0x304>
   11914:	mov	r2, r7
   11918:	mov	r3, fp
   1191c:	strd	r0, [ip]
   11920:	ldrd	r0, [sp, #40]	; 0x28
   11924:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   11928:	str	r2, [r4, #568]	; 0x238
   1192c:	tst	r5, #4
   11930:	mvn	r2, #0
   11934:	mvn	r3, #-2147483648	; 0x80000000
   11938:	ldrd	r0, [sp, #32]
   1193c:	beq	1379c <__assert_fail@plt+0x22c0>
   11940:	cmp	r1, r3
   11944:	cmpeq	r0, r2
   11948:	beq	11978 <__assert_fail@plt+0x49c>
   1194c:	asr	fp, r7, #31
   11950:	mov	r2, r7
   11954:	mov	r3, fp
   11958:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   1195c:	ldr	ip, [pc, #-356]	; 11800 <__assert_fail@plt+0x324>
   11960:	mov	r2, r7
   11964:	mov	r3, fp
   11968:	strd	r0, [ip, #32]
   1196c:	ldrd	r0, [sp, #32]
   11970:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   11974:	str	r2, [r4, #572]	; 0x23c
   11978:	tst	r8, #16
   1197c:	beq	137b8 <__assert_fail@plt+0x22dc>
   11980:	ldrd	r0, [sp, #48]	; 0x30
   11984:	mov	r2, r0
   11988:	mov	r3, r1
   1198c:	orrs	r3, r2, r3
   11990:	beq	119c0 <__assert_fail@plt+0x4e4>
   11994:	asr	r7, r6, #31
   11998:	mov	r2, r6
   1199c:	mov	r3, r7
   119a0:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   119a4:	ldr	sl, [pc, #-424]	; 11804 <__assert_fail@plt+0x328>
   119a8:	mov	r2, r6
   119ac:	mov	r3, r7
   119b0:	strd	r0, [sl], #16
   119b4:	ldrd	r0, [sp, #48]	; 0x30
   119b8:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   119bc:	strd	r2, [sl, #-8]
   119c0:	ldr	r6, [r4, #116]	; 0x74
   119c4:	ands	r3, r6, #2048	; 0x800
   119c8:	bne	12504 <__assert_fail@plt+0x1028>
   119cc:	tst	r5, #1
   119d0:	bne	13354 <__assert_fail@plt+0x1e78>
   119d4:	ldr	r3, [pc, #-508]	; 117e0 <__assert_fail@plt+0x304>
   119d8:	ldrd	r2, [r3]
   119dc:	orrs	r3, r2, r3
   119e0:	bne	11a14 <__assert_fail@plt+0x538>
   119e4:	ldr	r3, [pc, #-492]	; 11800 <__assert_fail@plt+0x324>
   119e8:	mvn	r1, #-2147483648	; 0x80000000
   119ec:	mvn	r0, #2
   119f0:	ldrd	r2, [r3, #32]
   119f4:	subs	r2, r2, #1
   119f8:	sbc	r3, r3, #0
   119fc:	cmp	r3, r1
   11a00:	cmpeq	r2, r0
   11a04:	bls	11a14 <__assert_fail@plt+0x538>
   11a08:	orr	r3, r8, r5
   11a0c:	ands	r3, r3, #65536	; 0x10000
   11a10:	beq	137dc <__assert_fail@plt+0x2300>
   11a14:	mov	r3, #1
   11a18:	strb	r3, [r4, #300]	; 0x12c
   11a1c:	ldr	r3, [pc, #-576]	; 117e4 <__assert_fail@plt+0x308>
   11a20:	and	r2, r6, #7
   11a24:	sub	sl, r2, #1
   11a28:	bic	r7, r5, #1
   11a2c:	ands	sl, sl, r2
   11a30:	str	r3, [r4, #264]	; 0x108
   11a34:	str	r7, [r4, #296]	; 0x128
   11a38:	bne	13334 <__assert_fail@plt+0x1e58>
   11a3c:	and	r3, r6, #24
   11a40:	sub	fp, r3, #1
   11a44:	ands	fp, fp, r3
   11a48:	movne	r2, #5
   11a4c:	ldrne	r1, [pc, #-620]	; 117e8 <__assert_fail@plt+0x30c>
   11a50:	bne	1333c <__assert_fail@plt+0x1e60>
   11a54:	and	r3, r6, #96	; 0x60
   11a58:	sub	sl, r3, #1
   11a5c:	ands	sl, sl, r3
   11a60:	movne	r2, #5
   11a64:	ldrne	r1, [pc, #-640]	; 117ec <__assert_fail@plt+0x310>
   11a68:	bne	1333c <__assert_fail@plt+0x1e60>
   11a6c:	and	r3, r6, #12288	; 0x3000
   11a70:	sub	r2, r3, #1
   11a74:	tst	r2, r3
   11a78:	movne	r2, #5
   11a7c:	ldrne	r1, [pc, #-660]	; 117f0 <__assert_fail@plt+0x314>
   11a80:	bne	1333c <__assert_fail@plt+0x1e60>
   11a84:	ldr	r3, [pc, #-664]	; 117f4 <__assert_fail@plt+0x318>
   11a88:	and	r2, r5, r3
   11a8c:	sub	r1, r2, #1
   11a90:	tst	r1, r2
   11a94:	bne	13608 <__assert_fail@plt+0x212c>
   11a98:	and	r3, r3, r8
   11a9c:	sub	r2, r3, #1
   11aa0:	ands	r3, r2, r3
   11aa4:	str	r3, [sp, #32]
   11aa8:	bne	13608 <__assert_fail@plt+0x212c>
   11aac:	tst	r5, #2
   11ab0:	beq	11ae4 <__assert_fail@plt+0x608>
   11ab4:	ldr	r3, [pc, #-700]	; 11800 <__assert_fail@plt+0x324>
   11ab8:	mov	r1, #1
   11abc:	bic	r7, r5, #3
   11ac0:	ldrd	r2, [r3, #32]
   11ac4:	strb	r1, [r4, #592]	; 0x250
   11ac8:	str	r7, [r4, #296]	; 0x128
   11acc:	orrs	r3, r2, r3
   11ad0:	ldreq	r3, [r4, #572]	; 0x23c
   11ad4:	ldrne	r3, [sp, #32]
   11ad8:	clzeq	r3, r3
   11adc:	lsreq	r3, r3, #5
   11ae0:	strb	r3, [r4, #88]	; 0x58
   11ae4:	tst	r8, #2
   11ae8:	beq	11b1c <__assert_fail@plt+0x640>
   11aec:	ldr	r3, [pc, #-756]	; 11800 <__assert_fail@plt+0x324>
   11af0:	mov	r1, #1
   11af4:	bic	r8, r8, #2
   11af8:	ldrd	r2, [r3, #32]
   11afc:	strb	r1, [r4, #273]	; 0x111
   11b00:	str	r8, [r4, #268]	; 0x10c
   11b04:	orrs	r3, r2, r3
   11b08:	movne	r3, #0
   11b0c:	ldreq	r3, [r4, #572]	; 0x23c
   11b10:	clzeq	r3, r3
   11b14:	lsreq	r3, r3, #5
   11b18:	strb	r3, [r4, #89]	; 0x59
   11b1c:	tst	r6, #1
   11b20:	beq	11b54 <__assert_fail@plt+0x678>
   11b24:	ldr	r3, [pc, #-820]	; 117f8 <__assert_fail@plt+0x31c>
   11b28:	ldr	r1, [pc, #-820]	; 117fc <__assert_fail@plt+0x320>
   11b2c:	add	r0, r3, #255	; 0xff
   11b30:	mov	r3, r9
   11b34:	ldrb	r2, [r3, #1]
   11b38:	add	r2, r1, r2
   11b3c:	ldrb	r2, [r2, #696]	; 0x2b8
   11b40:	strb	r2, [r3, #1]!
   11b44:	cmp	r3, r0
   11b48:	bne	11b34 <__assert_fail@plt+0x658>
   11b4c:	mov	r3, #1
   11b50:	strb	r3, [r4, #593]	; 0x251
   11b54:	tst	r6, #64	; 0x40
   11b58:	bne	125b4 <__assert_fail@plt+0x10d8>
   11b5c:	tst	r6, #32
   11b60:	beq	11b94 <__assert_fail@plt+0x6b8>
   11b64:	bl	11338 <__ctype_tolower_loc@plt>
   11b68:	ldr	r3, [pc, #-888]	; 117f8 <__assert_fail@plt+0x31c>
   11b6c:	add	r1, r3, #255	; 0xff
   11b70:	mov	r3, r9
   11b74:	ldr	r2, [r0]
   11b78:	ldrb	r0, [r3, #1]
   11b7c:	ldrb	r0, [r2, r0, lsl #2]
   11b80:	strb	r0, [r3, #1]!
   11b84:	cmp	r3, r1
   11b88:	bne	11b78 <__assert_fail@plt+0x69c>
   11b8c:	mov	r3, #1
   11b90:	strb	r3, [r4, #593]	; 0x251
   11b94:	tst	r6, #2
   11b98:	bne	12b38 <__assert_fail@plt+0x165c>
   11b9c:	tst	r6, #4
   11ba0:	beq	11be4 <__assert_fail@plt+0x708>
   11ba4:	ldr	r3, [pc, #-948]	; 117f8 <__assert_fail@plt+0x31c>
   11ba8:	ldr	r1, [pc, #-948]	; 117fc <__assert_fail@plt+0x320>
   11bac:	add	r2, r3, #255	; 0xff
   11bb0:	ldrb	r3, [r9, #1]
   11bb4:	add	r3, r1, r3
   11bb8:	ldrb	r3, [r3, #1208]	; 0x4b8
   11bbc:	strb	r3, [r9, #1]!
   11bc0:	cmp	r9, r2
   11bc4:	bne	11bb0 <__assert_fail@plt+0x6d4>
   11bc8:	mov	r1, #1
   11bcc:	strb	r1, [r4, #593]	; 0x251
   11bd0:	ldr	r1, [pc, #-984]	; 11800 <__assert_fail@plt+0x324>
   11bd4:	mov	r2, #37	; 0x25
   11bd8:	mov	r3, #64	; 0x40
   11bdc:	strb	r2, [r1, #25]
   11be0:	strb	r3, [r1, #26]
   11be4:	ldr	r5, [r4, #260]	; 0x104
   11be8:	cmp	r5, #0
   11bec:	beq	1373c <__assert_fail@plt+0x2260>
   11bf0:	mov	r3, #0
   11bf4:	mov	r2, r7
   11bf8:	mov	r1, r5
   11bfc:	mov	r0, r3
   11c00:	bl	15970 <__assert_fail@plt+0x4494>
   11c04:	cmp	r0, #0
   11c08:	blt	13718 <__assert_fail@plt+0x223c>
   11c0c:	mov	r3, #1
   11c10:	str	r3, [sp]
   11c14:	mov	r2, #0
   11c18:	mov	r3, #0
   11c1c:	mov	r0, #0
   11c20:	bl	112a8 <lseek64@plt>
   11c24:	mov	r2, r0
   11c28:	mov	r3, r1
   11c2c:	cmp	r2, #0
   11c30:	sbcs	r0, r3, #0
   11c34:	mvn	r1, r1
   11c38:	movlt	r3, #0
   11c3c:	movlt	r2, #0
   11c40:	lsr	r1, r1, #31
   11c44:	strd	r2, [r4, #96]	; 0x60
   11c48:	strb	r1, [r4, #90]	; 0x5a
   11c4c:	bl	113a4 <__errno_location@plt>
   11c50:	ldr	r5, [r4, #256]	; 0x100
   11c54:	cmp	r5, #0
   11c58:	ldr	r3, [r0]
   11c5c:	mov	fp, r0
   11c60:	str	r3, [r4, #596]	; 0x254
   11c64:	beq	13768 <__assert_fail@plt+0x228c>
   11c68:	ldr	r1, [pc, #-1132]	; 11804 <__assert_fail@plt+0x328>
   11c6c:	ldr	r2, [r4, #116]	; 0x74
   11c70:	str	r1, [sp, #48]	; 0x30
   11c74:	ldrd	r8, [r1]
   11c78:	ldr	r1, [sp, #32]
   11c7c:	tst	r2, #4096	; 0x1000
   11c80:	ldr	r3, [r4, #268]	; 0x10c
   11c84:	movne	sl, r1
   11c88:	moveq	sl, #64	; 0x40
   11c8c:	orr	sl, sl, r3
   11c90:	ands	r3, r2, #8192	; 0x2000
   11c94:	movne	r3, #128	; 0x80
   11c98:	orrs	r0, r8, r9
   11c9c:	str	r2, [sp, #60]	; 0x3c
   11ca0:	ldr	r6, [r4, #120]	; 0x78
   11ca4:	orr	sl, r3, sl
   11ca8:	bne	12a54 <__assert_fail@plt+0x1578>
   11cac:	tst	r2, #512	; 0x200
   11cb0:	movne	r3, r1
   11cb4:	moveq	r3, #512	; 0x200
   11cb8:	cmp	r6, #0
   11cbc:	orr	sl, sl, r3
   11cc0:	blt	136a0 <__assert_fail@plt+0x21c4>
   11cc4:	beq	13678 <__assert_fail@plt+0x219c>
   11cc8:	mov	r2, r6
   11ccc:	asr	r3, r6, #31
   11cd0:	mvn	r0, #0
   11cd4:	mvn	r1, #-2147483648	; 0x80000000
   11cd8:	strd	r2, [sp, #40]	; 0x28
   11cdc:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   11ce0:	cmp	r0, r8
   11ce4:	sbcs	r3, r1, r9
   11ce8:	movlt	r3, #1
   11cec:	movge	r3, #0
   11cf0:	cmp	r3, #0
   11cf4:	beq	12aac <__assert_fail@plt+0x15d0>
   11cf8:	mul	r3, r6, r9
   11cfc:	ldr	r2, [sp, #44]	; 0x2c
   11d00:	umull	r6, r7, r6, r8
   11d04:	mla	r3, r8, r2, r3
   11d08:	add	r7, r3, r7
   11d0c:	ldr	r3, [sp, #60]	; 0x3c
   11d10:	ands	r3, r3, #512	; 0x200
   11d14:	beq	13644 <__assert_fail@plt+0x2168>
   11d18:	orrs	r3, r8, r9
   11d1c:	beq	12c7c <__assert_fail@plt+0x17a0>
   11d20:	mov	r1, r5
   11d24:	ldr	r3, [pc, #-1316]	; 11808 <__assert_fail@plt+0x32c>
   11d28:	orr	r2, sl, #2
   11d2c:	mov	r0, #1
   11d30:	bl	15970 <__assert_fail@plt+0x4494>
   11d34:	cmp	r0, #0
   11d38:	blt	12c78 <__assert_fail@plt+0x179c>
   11d3c:	ldr	r3, [sp, #48]	; 0x30
   11d40:	ldrd	r2, [r3]
   11d44:	orrs	r3, r2, r3
   11d48:	beq	11d58 <__assert_fail@plt+0x87c>
   11d4c:	ldr	r3, [r4, #116]	; 0x74
   11d50:	tst	r3, #512	; 0x200
   11d54:	beq	130f8 <__assert_fail@plt+0x1c1c>
   11d58:	bl	1679c <__assert_fail@plt+0x52c0>
   11d5c:	ldr	ip, [pc, #-1368]	; 1180c <__assert_fail@plt+0x330>
   11d60:	add	r3, pc, #952	; 0x3b8
   11d64:	ldrd	r2, [r3]
   11d68:	ldrd	r8, [ip, #-48]	; 0xffffffd0
   11d6c:	strd	r0, [r4, #16]
   11d70:	adds	r0, r0, r2
   11d74:	adc	r1, r1, r3
   11d78:	orrs	r3, r8, r9
   11d7c:	strd	r0, [ip, #-8]
   11d80:	bne	12bc0 <__assert_fail@plt+0x16e4>
   11d84:	ldr	r3, [r4, #568]	; 0x238
   11d88:	cmp	r3, #0
   11d8c:	beq	11eb0 <__assert_fail@plt+0x9d4>
   11d90:	ldr	r5, [r4, #108]	; 0x6c
   11d94:	cmp	r5, #0
   11d98:	blt	12c3c <__assert_fail@plt+0x1760>
   11d9c:	bne	12bdc <__assert_fail@plt+0x1700>
   11da0:	mov	r2, r8
   11da4:	mov	r3, r9
   11da8:	mov	r0, r8
   11dac:	mov	r1, r9
   11db0:	ldr	ip, [r4, #568]	; 0x238
   11db4:	cmp	ip, #0
   11db8:	movlt	r6, ip
   11dbc:	asrlt	r7, r6, #31
   11dc0:	blt	12c64 <__assert_fail@plt+0x1788>
   11dc4:	mvn	r6, #0
   11dc8:	subs	r6, r6, r2
   11dcc:	mvn	r7, #-2147483648	; 0x80000000
   11dd0:	sbc	r7, r7, r3
   11dd4:	mov	r2, r6
   11dd8:	mov	r3, r7
   11ddc:	cmp	r2, ip
   11de0:	asr	r7, ip, #31
   11de4:	sbcs	r3, r3, r7
   11de8:	mov	r6, ip
   11dec:	movlt	r3, #1
   11df0:	movge	r3, #0
   11df4:	cmp	r3, #0
   11df8:	beq	12c64 <__assert_fail@plt+0x1788>
   11dfc:	adds	r2, r6, r0
   11e00:	adc	r3, r7, r1
   11e04:	mov	sl, #1
   11e08:	strd	r2, [sp, #40]	; 0x28
   11e0c:	ldr	r0, [pc, #788]	; 12128 <__assert_fail@plt+0xc4c>
   11e10:	ldr	r1, [r4, #260]	; 0x104
   11e14:	mov	r3, r9
   11e18:	str	r0, [sp, #4]
   11e1c:	str	r5, [sp]
   11e20:	mov	r2, r8
   11e24:	mov	r0, #0
   11e28:	ldrd	r8, [r4, #96]	; 0x60
   11e2c:	bl	153a4 <__assert_fail@plt+0x3ec8>
   11e30:	orrs	r3, r0, r1
   11e34:	bne	11e68 <__assert_fail@plt+0x98c>
   11e38:	ldrd	r2, [r4, #96]	; 0x60
   11e3c:	cmp	r2, #0
   11e40:	sbcs	r1, r3, #0
   11e44:	blt	11eb0 <__assert_fail@plt+0x9d4>
   11e48:	cmp	sl, #0
   11e4c:	bne	11e68 <__assert_fail@plt+0x98c>
   11e50:	ldrd	r0, [sp, #40]	; 0x28
   11e54:	subs	r2, r2, r8
   11e58:	sbc	r3, r3, r9
   11e5c:	cmp	r3, r1
   11e60:	cmpeq	r2, r0
   11e64:	beq	11eb0 <__assert_fail@plt+0x9d4>
   11e68:	ldr	r3, [pc, #716]	; 1213c <__assert_fail@plt+0xc60>
   11e6c:	ldr	r3, [r3, #8]
   11e70:	cmp	r3, #1
   11e74:	beq	11eb0 <__assert_fail@plt+0x9d4>
   11e78:	mov	r2, #5
   11e7c:	ldr	r1, [pc, #680]	; 1212c <__assert_fail@plt+0xc50>
   11e80:	mov	r0, #0
   11e84:	bl	11230 <dcgettext@plt>
   11e88:	ldr	r2, [r4, #260]	; 0x104
   11e8c:	mov	r1, #3
   11e90:	mov	r5, r0
   11e94:	mov	r0, #0
   11e98:	bl	1a960 <__assert_fail@plt+0x9484>
   11e9c:	mov	r1, #0
   11ea0:	mov	r2, r5
   11ea4:	mov	r3, r0
   11ea8:	mov	r0, r1
   11eac:	bl	13ee4 <__assert_fail@plt+0x2a08>
   11eb0:	ldr	r3, [sp, #48]	; 0x30
   11eb4:	ldrd	r2, [r3]
   11eb8:	orrs	r1, r2, r3
   11ebc:	ldr	r1, [pc, #620]	; 12130 <__assert_fail@plt+0xc54>
   11ec0:	ldrd	r0, [r1, #-8]
   11ec4:	bne	11ed0 <__assert_fail@plt+0x9f4>
   11ec8:	orrs	ip, r0, r1
   11ecc:	beq	11f40 <__assert_fail@plt+0xa64>
   11ed0:	ldr	ip, [r4, #120]	; 0x78
   11ed4:	add	lr, sp, #72	; 0x48
   11ed8:	ldr	r1, [r4, #256]	; 0x100
   11edc:	str	r0, [sp, #72]	; 0x48
   11ee0:	stm	sp, {ip, lr}
   11ee4:	mov	r0, #1
   11ee8:	bl	153a4 <__assert_fail@plt+0x3ec8>
   11eec:	mov	r6, r0
   11ef0:	mov	r7, r1
   11ef4:	orrs	r3, r6, r7
   11ef8:	bne	12d7c <__assert_fail@plt+0x18a0>
   11efc:	ldr	r2, [sp, #72]	; 0x48
   11f00:	cmp	r2, #0
   11f04:	beq	11f40 <__assert_fail@plt+0xa64>
   11f08:	ldr	r5, [r4, #124]	; 0x7c
   11f0c:	mov	r1, #0
   11f10:	mov	r0, r5
   11f14:	bl	113d4 <memset@plt>
   11f18:	mov	r0, r5
   11f1c:	orrs	r3, r6, r7
   11f20:	bne	126f0 <__assert_fail@plt+0x1214>
   11f24:	ldr	r6, [sp, #72]	; 0x48
   11f28:	mov	r5, r0
   11f2c:	mov	r0, r5
   11f30:	mov	r1, r6
   11f34:	bl	15a44 <__assert_fail@plt+0x4568>
   11f38:	cmp	r0, r6
   11f3c:	bne	1287c <__assert_fail@plt+0x13a0>
   11f40:	ldr	r3, [pc, #500]	; 1213c <__assert_fail@plt+0xc60>
   11f44:	ldrd	r2, [r3, #32]
   11f48:	orrs	r3, r2, r3
   11f4c:	bne	11f5c <__assert_fail@plt+0xa80>
   11f50:	ldr	r3, [r4, #572]	; 0x23c
   11f54:	cmp	r3, #0
   11f58:	beq	12b60 <__assert_fail@plt+0x1684>
   11f5c:	bl	14304 <__assert_fail@plt+0x2e28>
   11f60:	mvn	sl, #0
   11f64:	bl	14344 <__assert_fail@plt+0x2e68>
   11f68:	ldr	r3, [sp, #32]
   11f6c:	str	r3, [sp, #40]	; 0x28
   11f70:	str	r3, [sp, #48]	; 0x30
   11f74:	ldr	r3, [pc, #448]	; 1213c <__assert_fail@plt+0xc60>
   11f78:	ldr	r3, [r3, #8]
   11f7c:	cmp	r3, #4
   11f80:	beq	1220c <__assert_fail@plt+0xd30>
   11f84:	ldr	r3, [pc, #432]	; 1213c <__assert_fail@plt+0xc60>
   11f88:	ldr	r5, [r4, #572]	; 0x23c
   11f8c:	ldrd	r6, [r4, #48]	; 0x30
   11f90:	ldrd	r8, [r3, #32]
   11f94:	ldrd	r0, [r4, #56]	; 0x38
   11f98:	adds	ip, r5, #0
   11f9c:	movne	ip, #1
   11fa0:	adds	r2, r8, ip
   11fa4:	adc	r3, r9, #0
   11fa8:	adds	r6, r6, r0
   11fac:	adc	r7, r7, r1
   11fb0:	cmp	r6, r2
   11fb4:	sbcs	r3, r7, r3
   11fb8:	bge	12d88 <__assert_fail@plt+0x18ac>
   11fbc:	ldr	r2, [r4, #116]	; 0x74
   11fc0:	and	r3, r2, #1280	; 0x500
   11fc4:	cmp	r3, #1280	; 0x500
   11fc8:	ldr	r3, [r4, #112]	; 0x70
   11fcc:	beq	12a34 <__assert_fail@plt+0x1558>
   11fd0:	cmp	r6, r8
   11fd4:	sbcs	r2, r7, r9
   11fd8:	movge	r2, r5
   11fdc:	movge	r1, r3
   11fe0:	movlt	r1, r3
   11fe4:	ldrge	r3, [r4, #264]	; 0x108
   11fe8:	ldrlt	r3, [r4, #264]	; 0x108
   11fec:	ldrlt	r2, [r4, #108]	; 0x6c
   11ff0:	mov	r0, #0
   11ff4:	blx	r3
   11ff8:	cmp	r0, #0
   11ffc:	mov	r5, r0
   12000:	bgt	12728 <__assert_fail@plt+0x124c>
   12004:	beq	131cc <__assert_fail@plt+0x1cf0>
   12008:	ldr	r3, [r4, #116]	; 0x74
   1200c:	tst	r3, #256	; 0x100
   12010:	beq	12024 <__assert_fail@plt+0xb48>
   12014:	ldr	r3, [pc, #288]	; 1213c <__assert_fail@plt+0xc60>
   12018:	ldr	r3, [r3, #8]
   1201c:	cmp	r3, #1
   12020:	beq	12068 <__assert_fail@plt+0xb8c>
   12024:	mov	r2, #5
   12028:	ldr	r1, [pc, #260]	; 12134 <__assert_fail@plt+0xc58>
   1202c:	mov	r0, #0
   12030:	ldr	r5, [fp]
   12034:	bl	11230 <dcgettext@plt>
   12038:	ldr	r1, [r4, #260]	; 0x104
   1203c:	mov	r6, r0
   12040:	mov	r0, #4
   12044:	bl	19ee4 <__assert_fail@plt+0x8a08>
   12048:	mov	r2, r6
   1204c:	mov	r1, r5
   12050:	mov	r3, r0
   12054:	mov	r0, #0
   12058:	bl	13ee4 <__assert_fail@plt+0x2a08>
   1205c:	ldr	r3, [r4, #116]	; 0x74
   12060:	tst	r3, #256	; 0x100
   12064:	beq	1322c <__assert_fail@plt+0x1d50>
   12068:	bl	13d88 <__assert_fail@plt+0x28ac>
   1206c:	ldr	r3, [sp, #48]	; 0x30
   12070:	ldr	r6, [r4, #108]	; 0x6c
   12074:	sub	r6, r6, r3
   12078:	mov	r0, r6
   1207c:	asr	r7, r6, #31
   12080:	mov	r1, r7
   12084:	bl	14b90 <__assert_fail@plt+0x36b4>
   12088:	ldrb	r3, [r4, #90]	; 0x5a
   1208c:	cmp	r3, #0
   12090:	bne	128b8 <__assert_fail@plt+0x13dc>
   12094:	ldr	r5, [r4, #596]	; 0x254
   12098:	cmp	r5, #29
   1209c:	strne	r5, [fp]
   120a0:	beq	120f4 <__assert_fail@plt+0xc18>
   120a4:	mov	r2, #5
   120a8:	ldr	r1, [pc, #136]	; 12138 <__assert_fail@plt+0xc5c>
   120ac:	mov	r0, #0
   120b0:	bl	11230 <dcgettext@plt>
   120b4:	ldr	r2, [r4, #260]	; 0x104
   120b8:	mov	r1, #3
   120bc:	mov	r6, r0
   120c0:	mov	r0, #0
   120c4:	bl	1a960 <__assert_fail@plt+0x9484>
   120c8:	mov	r2, r6
   120cc:	mov	r1, r5
   120d0:	mov	r3, r0
   120d4:	mov	r0, #0
   120d8:	bl	13ee4 <__assert_fail@plt+0x2a08>
   120dc:	mov	r3, #29
   120e0:	mov	r2, #0
   120e4:	str	r3, [r4, #596]	; 0x254
   120e8:	mov	r3, #1
   120ec:	strb	r2, [r4, #90]	; 0x5a
   120f0:	str	r3, [sp, #40]	; 0x28
   120f4:	ldr	r2, [r4, #116]	; 0x74
   120f8:	ldr	r3, [sp, #48]	; 0x30
   120fc:	clz	r3, r3
   12100:	lsr	r3, r3, #5
   12104:	ands	r3, r3, r2, lsr #10
   12108:	beq	11f74 <__assert_fail@plt+0xa98>
   1210c:	ldr	r5, [sp, #32]
   12110:	ldr	r2, [r4, #108]	; 0x6c
   12114:	cmp	r5, r2
   12118:	bge	12780 <__assert_fail@plt+0x12a4>
   1211c:	b	12144 <__assert_fail@plt+0xc68>
   12120:	blcc	fe6c4928 <opterr@@GLIBC_2.4+0xfe692748>
   12124:	andeq	r0, r0, r0
   12128:	andeq	r2, r3, r0, lsr #8
   1212c:	andeq	r0, r2, r8, asr r8
   12130:	andeq	r2, r3, r8, lsr r4
   12134:	andeq	r0, r2, ip, ror #9
   12138:	ldrdeq	r0, [r2], -ip
   1213c:	andeq	r2, r3, r0, asr r1
   12140:	andeq	r2, r3, r8, asr #8
   12144:	ldrd	r0, [r4, #48]	; 0x30
   12148:	ldr	r3, [r4, #116]	; 0x74
   1214c:	ldr	r6, [r4, #112]	; 0x70
   12150:	adds	r0, r0, #1
   12154:	adc	r1, r1, #0
   12158:	tst	r3, #1024	; 0x400
   1215c:	strd	r0, [r4, #48]	; 0x30
   12160:	streq	r5, [sp, #48]	; 0x30
   12164:	beq	12194 <__assert_fail@plt+0xcb8>
   12168:	tst	r3, #256	; 0x100
   1216c:	bne	1218c <__assert_fail@plt+0xcb0>
   12170:	ands	r3, r3, #24
   12174:	sub	r2, r2, r5
   12178:	moveq	r1, r3
   1217c:	movne	r1, #32
   12180:	add	r0, r6, r5
   12184:	bl	113d4 <memset@plt>
   12188:	ldr	r2, [r4, #108]	; 0x6c
   1218c:	str	r5, [sp, #48]	; 0x30
   12190:	mov	r5, r2
   12194:	ldr	r0, [r4, #124]	; 0x7c
   12198:	cmp	r0, r6
   1219c:	beq	127a8 <__assert_fail@plt+0x12cc>
   121a0:	ldrb	r3, [r4, #593]	; 0x251
   121a4:	cmp	r3, #0
   121a8:	beq	127f4 <__assert_fail@plt+0x1318>
   121ac:	cmp	r5, #0
   121b0:	beq	127f4 <__assert_fail@plt+0x1318>
   121b4:	add	r1, r6, r5
   121b8:	mov	r3, r6
   121bc:	ldrb	r2, [r3]
   121c0:	add	r2, r4, r2
   121c4:	ldrb	r2, [r2, #304]	; 0x130
   121c8:	strb	r2, [r3], #1
   121cc:	cmp	r3, r1
   121d0:	bne	121bc <__assert_fail@plt+0xce0>
   121d4:	ldr	r3, [r4, #116]	; 0x74
   121d8:	tst	r3, #128	; 0x80
   121dc:	bne	12808 <__assert_fail@plt+0x132c>
   121e0:	tst	r3, #8
   121e4:	bne	1286c <__assert_fail@plt+0x1390>
   121e8:	tst	r3, #16
   121ec:	beq	126ac <__assert_fail@plt+0x11d0>
   121f0:	mov	r1, r5
   121f4:	mov	r0, r6
   121f8:	bl	15e6c <__assert_fail@plt+0x4990>
   121fc:	ldr	r3, [pc, #-200]	; 1213c <__assert_fail@plt+0xc60>
   12200:	ldr	r3, [r3, #8]
   12204:	cmp	r3, #4
   12208:	bne	11f84 <__assert_fail@plt+0xaa8>
   1220c:	bl	1679c <__assert_fail@plt+0x52c0>
   12210:	ldr	r3, [pc, #-216]	; 12140 <__assert_fail@plt+0xc64>
   12214:	ldrd	r2, [r3, #-8]
   12218:	cmp	r0, r2
   1221c:	sbcs	r3, r1, r3
   12220:	blt	11f84 <__assert_fail@plt+0xaa8>
   12224:	bl	139a8 <__assert_fail@plt+0x24cc>
   12228:	ldr	r3, [pc, #-240]	; 12140 <__assert_fail@plt+0xc64>
   1222c:	add	r1, pc, #940	; 0x3ac
   12230:	ldrd	r0, [r1]
   12234:	ldrd	r2, [r3, #-8]
   12238:	adds	r0, r0, r2
   1223c:	adc	r1, r1, r3
   12240:	mov	r3, r1
   12244:	ldr	r1, [pc, #924]	; 125e8 <__assert_fail@plt+0x110c>
   12248:	mov	r2, r0
   1224c:	strd	r2, [r1, #-8]
   12250:	b	11f84 <__assert_fail@plt+0xaa8>
   12254:	ldrb	r3, [r2]
   12258:	cmp	r3, #61	; 0x3d
   1225c:	cmpne	r3, #0
   12260:	bne	11780 <__assert_fail@plt+0x2a4>
   12264:	str	r5, [r4, #260]	; 0x104
   12268:	b	11878 <__assert_fail@plt+0x39c>
   1226c:	ldrb	r3, [r2]
   12270:	cmp	r3, #0
   12274:	cmpne	r3, #61	; 0x3d
   12278:	bne	11828 <__assert_fail@plt+0x34c>
   1227c:	str	r5, [r4, #256]	; 0x100
   12280:	b	11878 <__assert_fail@plt+0x39c>
   12284:	ldr	r1, [pc, #864]	; 125ec <__assert_fail@plt+0x1110>
   12288:	mov	r2, r6
   1228c:	mov	r3, #105	; 0x69
   12290:	ldrb	r0, [r2], #1
   12294:	cmp	r0, r3
   12298:	bne	122d8 <__assert_fail@plt+0xdfc>
   1229c:	ldrb	r3, [r1, #1]!
   122a0:	cmp	r3, #0
   122a4:	bne	12290 <__assert_fail@plt+0xdb4>
   122a8:	ldrb	r3, [r2]
   122ac:	cmp	r3, #0
   122b0:	cmpne	r3, #61	; 0x3d
   122b4:	bne	122d8 <__assert_fail@plt+0xdfc>
   122b8:	mov	r0, r5
   122bc:	ldr	r2, [pc, #928]	; 12664 <__assert_fail@plt+0x1188>
   122c0:	ldr	r1, [pc, #808]	; 125f0 <__assert_fail@plt+0x1114>
   122c4:	bl	14a90 <__assert_fail@plt+0x35b4>
   122c8:	ldr	r3, [r4, #296]	; 0x128
   122cc:	orr	r3, r3, r0
   122d0:	str	r3, [r4, #296]	; 0x128
   122d4:	b	11878 <__assert_fail@plt+0x39c>
   122d8:	ldr	r1, [pc, #788]	; 125f4 <__assert_fail@plt+0x1118>
   122dc:	mov	r2, r6
   122e0:	mov	r3, #111	; 0x6f
   122e4:	b	122f4 <__assert_fail@plt+0xe18>
   122e8:	ldrb	r3, [r1, #1]!
   122ec:	cmp	r3, #0
   122f0:	beq	123b8 <__assert_fail@plt+0xedc>
   122f4:	ldrb	r0, [r2], #1
   122f8:	cmp	r0, r3
   122fc:	beq	122e8 <__assert_fail@plt+0xe0c>
   12300:	ldr	r1, [pc, #752]	; 125f8 <__assert_fail@plt+0x111c>
   12304:	mov	r2, r6
   12308:	mov	r3, #115	; 0x73
   1230c:	b	1231c <__assert_fail@plt+0xe40>
   12310:	ldrb	r3, [r1, #1]!
   12314:	cmp	r3, #0
   12318:	beq	1245c <__assert_fail@plt+0xf80>
   1231c:	ldrb	r0, [r2], #1
   12320:	cmp	r0, r3
   12324:	beq	12310 <__assert_fail@plt+0xe34>
   12328:	mov	r3, #0
   1232c:	add	r1, sp, #72	; 0x48
   12330:	mov	r0, r5
   12334:	str	r3, [sp, #72]	; 0x48
   12338:	bl	14394 <__assert_fail@plt+0x2eb8>
   1233c:	ldr	ip, [pc, #696]	; 125fc <__assert_fail@plt+0x1120>
   12340:	mov	r3, r6
   12344:	mov	r2, #105	; 0x69
   12348:	b	12358 <__assert_fail@plt+0xe7c>
   1234c:	ldrb	r2, [ip, #1]!
   12350:	cmp	r2, #0
   12354:	beq	123e8 <__assert_fail@plt+0xf0c>
   12358:	ldrb	lr, [r3], #1
   1235c:	cmp	lr, r2
   12360:	beq	1234c <__assert_fail@plt+0xe70>
   12364:	ldr	ip, [pc, #660]	; 12600 <__assert_fail@plt+0x1124>
   12368:	mov	r3, r6
   1236c:	mov	r2, #111	; 0x6f
   12370:	b	12380 <__assert_fail@plt+0xea4>
   12374:	ldrb	r2, [ip, #1]!
   12378:	cmp	r2, #0
   1237c:	beq	12520 <__assert_fail@plt+0x1044>
   12380:	ldrb	lr, [r3], #1
   12384:	cmp	lr, r2
   12388:	beq	12374 <__assert_fail@plt+0xe98>
   1238c:	ldr	ip, [pc, #624]	; 12604 <__assert_fail@plt+0x1128>
   12390:	mov	r3, r6
   12394:	mov	r2, #98	; 0x62
   12398:	b	123a8 <__assert_fail@plt+0xecc>
   1239c:	ldrb	r2, [ip, #1]!
   123a0:	cmp	r2, #0
   123a4:	beq	1347c <__assert_fail@plt+0x1fa0>
   123a8:	ldrb	lr, [r3], #1
   123ac:	cmp	lr, r2
   123b0:	beq	1239c <__assert_fail@plt+0xec0>
   123b4:	b	1348c <__assert_fail@plt+0x1fb0>
   123b8:	ldrb	r3, [r2]
   123bc:	cmp	r3, #61	; 0x3d
   123c0:	cmpne	r3, #0
   123c4:	bne	12300 <__assert_fail@plt+0xe24>
   123c8:	mov	r0, r5
   123cc:	ldr	r2, [pc, #664]	; 1266c <__assert_fail@plt+0x1190>
   123d0:	ldr	r1, [pc, #536]	; 125f0 <__assert_fail@plt+0x1114>
   123d4:	bl	14a90 <__assert_fail@plt+0x35b4>
   123d8:	ldr	r3, [r4, #268]	; 0x10c
   123dc:	orr	r3, r3, r0
   123e0:	str	r3, [r4, #268]	; 0x10c
   123e4:	b	11878 <__assert_fail@plt+0x39c>
   123e8:	ldrb	r3, [r3]
   123ec:	cmp	r3, #0
   123f0:	cmpne	r3, #61	; 0x3d
   123f4:	bne	12364 <__assert_fail@plt+0xe88>
   123f8:	ldr	ip, [pc, #520]	; 12608 <__assert_fail@plt+0x112c>
   123fc:	mvn	r2, #-2147483647	; 0x80000001
   12400:	mov	r3, #0
   12404:	cmp	r0, #1
   12408:	sbcs	lr, r1, #0
   1240c:	blt	12548 <__assert_fail@plt+0x106c>
   12410:	cmp	r2, r0
   12414:	sbcs	r3, r3, r1
   12418:	bge	124f0 <__assert_fail@plt+0x1014>
   1241c:	mov	r4, #75	; 0x4b
   12420:	mov	r3, #1
   12424:	str	r3, [sp, #72]	; 0x48
   12428:	mov	r2, #5
   1242c:	ldr	r1, [pc, #472]	; 1260c <__assert_fail@plt+0x1130>
   12430:	mov	r0, #0
   12434:	bl	11230 <dcgettext@plt>
   12438:	mov	r6, r0
   1243c:	mov	r0, r5
   12440:	bl	1b854 <__assert_fail@plt+0xa378>
   12444:	mov	r3, r6
   12448:	mov	r1, r4
   1244c:	ldr	r2, [pc, #544]	; 12674 <__assert_fail@plt+0x1198>
   12450:	str	r0, [sp]
   12454:	mov	r0, #1
   12458:	bl	13ee4 <__assert_fail@plt+0x2a08>
   1245c:	ldrb	r3, [r2]
   12460:	cmp	r3, #0
   12464:	cmpne	r3, #61	; 0x3d
   12468:	bne	12328 <__assert_fail@plt+0xe4c>
   1246c:	mov	r6, #44	; 0x2c
   12470:	mov	r9, #110	; 0x6e
   12474:	mov	r1, r6
   12478:	mov	r0, r5
   1247c:	bl	1138c <strchr@plt>
   12480:	ldr	r3, [pc, #392]	; 12610 <__assert_fail@plt+0x1134>
   12484:	mov	r8, r9
   12488:	sub	lr, r3, #1
   1248c:	mov	r2, lr
   12490:	mov	r1, r5
   12494:	b	124a4 <__assert_fail@plt+0xfc8>
   12498:	ldrb	ip, [r1], #1
   1249c:	cmp	ip, r3
   124a0:	bne	124cc <__assert_fail@plt+0xff0>
   124a4:	ldrb	r3, [r2, #1]!
   124a8:	cmp	r3, #0
   124ac:	bne	12498 <__assert_fail@plt+0xfbc>
   124b0:	ldrb	r3, [r1]
   124b4:	cmp	r3, #0
   124b8:	cmpne	r3, #44	; 0x2c
   124bc:	bne	124cc <__assert_fail@plt+0xff0>
   124c0:	ldr	r3, [lr, #13]
   124c4:	cmp	r3, #0
   124c8:	bne	124e0 <__assert_fail@plt+0x1004>
   124cc:	cmp	r8, #0
   124d0:	add	lr, lr, #16
   124d4:	beq	1342c <__assert_fail@plt+0x1f50>
   124d8:	ldrb	r8, [lr, #1]
   124dc:	b	1248c <__assert_fail@plt+0xfb0>
   124e0:	cmp	r0, #0
   124e4:	beq	12558 <__assert_fail@plt+0x107c>
   124e8:	add	r5, r0, #1
   124ec:	b	12474 <__assert_fail@plt+0xf98>
   124f0:	ldr	r3, [sp, #72]	; 0x48
   124f4:	cmp	r3, #0
   124f8:	bne	1337c <__assert_fail@plt+0x1ea0>
   124fc:	str	r0, [ip]
   12500:	b	11878 <__assert_fail@plt+0x39c>
   12504:	ldr	r1, [pc, #264]	; 12614 <__assert_fail@plt+0x1138>
   12508:	tst	r5, #1
   1250c:	mov	r2, #0
   12510:	ldr	r3, [pc, #320]	; 12658 <__assert_fail@plt+0x117c>
   12514:	strb	r2, [r4, #300]	; 0x12c
   12518:	moveq	r3, r1
   1251c:	b	11a20 <__assert_fail@plt+0x544>
   12520:	ldrb	r3, [r3]
   12524:	cmp	r3, #61	; 0x3d
   12528:	cmpne	r3, #0
   1252c:	bne	1238c <__assert_fail@plt+0xeb0>
   12530:	cmp	r0, #1
   12534:	sbcs	lr, r1, #0
   12538:	ldr	ip, [pc, #216]	; 12618 <__assert_fail@plt+0x113c>
   1253c:	mvn	r2, #-2147483647	; 0x80000001
   12540:	mov	r3, #0
   12544:	bge	12410 <__assert_fail@plt+0xf34>
   12548:	mov	r3, #4
   1254c:	str	r3, [sp, #72]	; 0x48
   12550:	mov	r4, #0
   12554:	b	12428 <__assert_fail@plt+0xf4c>
   12558:	ldr	r2, [pc, #224]	; 12640 <__assert_fail@plt+0x1164>
   1255c:	str	r3, [r2, #8]
   12560:	b	11878 <__assert_fail@plt+0x39c>
   12564:	strd	r2, [sp, #40]	; 0x28
   12568:	strd	r2, [sp, #48]	; 0x30
   1256c:	mvn	r2, #0
   12570:	mvn	r3, #-2147483648	; 0x80000000
   12574:	strd	r2, [sp, #32]
   12578:	ldr	r7, [r4, #108]	; 0x6c
   1257c:	ldr	r3, [r4, #116]	; 0x74
   12580:	cmp	r7, #0
   12584:	orr	r3, r3, #2048	; 0x800
   12588:	ldreq	r6, [r4, #120]	; 0x78
   1258c:	ldrne	r6, [r4, #120]	; 0x78
   12590:	str	r3, [r4, #116]	; 0x74
   12594:	moveq	r3, #512	; 0x200
   12598:	moveq	r7, r3
   1259c:	streq	r3, [r4, #108]	; 0x6c
   125a0:	cmp	r6, #0
   125a4:	moveq	r3, #512	; 0x200
   125a8:	moveq	r6, r3
   125ac:	streq	r3, [r4, #120]	; 0x78
   125b0:	b	118a0 <__assert_fail@plt+0x3c4>
   125b4:	bl	11344 <__ctype_toupper_loc@plt>
   125b8:	ldr	r3, [pc, #112]	; 12630 <__assert_fail@plt+0x1154>
   125bc:	add	ip, r3, #255	; 0xff
   125c0:	mov	r3, r9
   125c4:	ldr	r1, [r0]
   125c8:	ldrb	r2, [r3, #1]
   125cc:	ldrb	r2, [r1, r2, lsl #2]
   125d0:	strb	r2, [r3, #1]!
   125d4:	cmp	ip, r3
   125d8:	bne	125c8 <__assert_fail@plt+0x10ec>
   125dc:	b	11b8c <__assert_fail@plt+0x6b0>
   125e0:	blcc	fe6c4de8 <opterr@@GLIBC_2.4+0xfe692c08>
   125e4:	andeq	r0, r0, r0
   125e8:	andeq	r2, r3, r8, asr #8
   125ec:	andeq	r0, r2, ip, asr #12
   125f0:	andeq	pc, r1, r0, lsl r0	; <UNPREDICTABLE>
   125f4:	andeq	r0, r2, r8, ror #12
   125f8:	andeq	r0, r2, r4, lsl #13
   125fc:	andeq	r0, r2, r4, lsr #13
   12600:	andeq	r0, r2, r8, lsr #13
   12604:	andeq	r0, r2, ip, lsr #13
   12608:	andeq	r2, r3, r4, asr r2
   1260c:	andeq	r0, r2, ip, asr #13
   12610:	andeq	pc, r1, r0, asr #2
   12614:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12618:	andeq	r2, r3, r0, ror #4
   1261c:	andeq	r0, r2, r0, lsr #10
   12620:	andeq	r0, r2, r8, lsl #18
   12624:	andeq	r0, r2, ip, ror r8
   12628:	andeq	r0, r2, ip, lsr #17
   1262c:	andeq	r2, r3, r8, lsr r4
   12630:	andeq	r2, r3, r8, lsl r3
   12634:	andeq	lr, r1, r8, asr #29
   12638:			; <UNDEFINED> instruction: 0x000001b6
   1263c:			; <UNDEFINED> instruction: 0x000207b0
   12640:	andeq	r2, r3, r0, asr r1
   12644:	ldrdeq	r0, [r2], -r4
   12648:	andeq	r0, r2, r4, lsr #16
   1264c:			; <UNDEFINED> instruction: 0x000204bc
   12650:	andeq	r0, r2, r8, ror #17
   12654:	andeq	r0, r2, r8, ror #13
   12658:	andeq	r6, r1, r8, ror #3
   1265c:	andeq	r0, r2, r8, lsr #11
   12660:			; <UNDEFINED> instruction: 0x000205b4
   12664:	andeq	r0, r2, r4, asr r6
   12668:	ldrdeq	r0, [r2], -ip
   1266c:	andeq	r0, r2, r0, ror r6
   12670:	muleq	r2, ip, r5
   12674:	andeq	r0, r2, r0, asr #8
   12678:	andeq	r0, r2, ip, lsl #13
   1267c:			; <UNDEFINED> instruction: 0x000206b0
   12680:			; <UNDEFINED> instruction: 0x000206b4
   12684:	andeq	r2, r3, r4, lsl #6
   12688:			; <UNDEFINED> instruction: 0x000206bc
   1268c:	andeq	r0, r2, r4, asr #13
   12690:	andeq	r0, r2, r0, lsl r6
   12694:	muleq	r1, r0, r9
   12698:	andeq	r2, r3, r8, ror #4
   1269c:	bl	15cc8 <__assert_fail@plt+0x47ec>
   126a0:	cmp	r5, #0
   126a4:	beq	11f74 <__assert_fail@plt+0xa98>
   126a8:	ldr	r0, [r4, #124]	; 0x7c
   126ac:	ldr	r8, [r4, #276]	; 0x114
   126b0:	ldr	r7, [r4, #120]	; 0x78
   126b4:	add	r0, r0, r8
   126b8:	sub	r7, r7, r8
   126bc:	cmp	r7, r5
   126c0:	movge	r7, r5
   126c4:	mov	r1, r6
   126c8:	mov	r2, r7
   126cc:	bl	111e8 <memcpy@plt>
   126d0:	ldr	r3, [r4, #120]	; 0x78
   126d4:	add	r8, r8, r7
   126d8:	cmp	r8, r3
   126dc:	sub	r5, r5, r7
   126e0:	str	r8, [r4, #276]	; 0x114
   126e4:	add	r6, r6, r7
   126e8:	blt	126a0 <__assert_fail@plt+0x11c4>
   126ec:	b	1269c <__assert_fail@plt+0x11c0>
   126f0:	ldr	r8, [r4, #120]	; 0x78
   126f4:	mov	r1, r8
   126f8:	bl	15a44 <__assert_fail@plt+0x4568>
   126fc:	cmp	r0, r8
   12700:	bne	1287c <__assert_fail@plt+0x13a0>
   12704:	subs	r6, r6, #1
   12708:	sbc	r7, r7, #0
   1270c:	orrs	r3, r6, r7
   12710:	bne	127ec <__assert_fail@plt+0x1310>
   12714:	ldr	r6, [sp, #72]	; 0x48
   12718:	cmp	r6, #0
   1271c:	beq	11f40 <__assert_fail@plt+0xa64>
   12720:	ldr	r5, [r4, #124]	; 0x7c
   12724:	b	11f2c <__assert_fail@plt+0xa50>
   12728:	ldrd	r6, [r4, #96]	; 0x60
   1272c:	asr	r1, r0, #31
   12730:	cmp	r6, #0
   12734:	sbcs	r3, r7, #0
   12738:	blt	12764 <__assert_fail@plt+0x1288>
   1273c:	mvn	r2, #0
   12740:	subs	r2, r2, r0
   12744:	mvn	r3, #-2147483648	; 0x80000000
   12748:	sbc	r3, r3, r1
   1274c:	cmp	r2, r6
   12750:	sbcs	r3, r3, r7
   12754:	bge	12a24 <__assert_fail@plt+0x1548>
   12758:	mvn	r2, #0
   1275c:	mvn	r3, #0
   12760:	strd	r2, [r4, #96]	; 0x60
   12764:	ldrb	r3, [r4, #592]	; 0x250
   12768:	cmp	r3, #0
   1276c:	beq	12110 <__assert_fail@plt+0xc34>
   12770:	bl	14b90 <__assert_fail@plt+0x36b4>
   12774:	ldr	r2, [r4, #108]	; 0x6c
   12778:	cmp	r5, r2
   1277c:	blt	12144 <__assert_fail@plt+0xc68>
   12780:	ldrd	r2, [r4, #56]	; 0x38
   12784:	ldr	r6, [r4, #112]	; 0x70
   12788:	ldr	r0, [r4, #124]	; 0x7c
   1278c:	adds	r2, r2, #1
   12790:	adc	r3, r3, #0
   12794:	ldr	r1, [sp, #32]
   12798:	cmp	r0, r6
   1279c:	str	r1, [sp, #48]	; 0x30
   127a0:	strd	r2, [r4, #56]	; 0x38
   127a4:	bne	121a0 <__assert_fail@plt+0xcc4>
   127a8:	mov	r0, r6
   127ac:	mov	r1, r5
   127b0:	bl	15a44 <__assert_fail@plt+0x4568>
   127b4:	ldrd	r2, [r4, #8]
   127b8:	adds	r2, r2, r0
   127bc:	adc	r3, r3, r0, asr #31
   127c0:	cmp	r0, r5
   127c4:	strd	r2, [r4, #8]
   127c8:	bne	12ff0 <__assert_fail@plt+0x1b14>
   127cc:	ldr	r3, [r4, #108]	; 0x6c
   127d0:	cmp	r3, r5
   127d4:	beq	13218 <__assert_fail@plt+0x1d3c>
   127d8:	ldrd	r2, [r4, #32]
   127dc:	adds	r2, r2, #1
   127e0:	adc	r3, r3, #0
   127e4:	strd	r2, [r4, #32]
   127e8:	b	11f74 <__assert_fail@plt+0xa98>
   127ec:	ldr	r0, [r4, #124]	; 0x7c
   127f0:	b	11f1c <__assert_fail@plt+0xa40>
   127f4:	ldr	r3, [r4, #116]	; 0x74
   127f8:	tst	r3, #128	; 0x80
   127fc:	beq	121e0 <__assert_fail@plt+0xd04>
   12800:	cmp	r5, #0
   12804:	beq	121e0 <__assert_fail@plt+0xd04>
   12808:	mvn	r1, sl
   1280c:	and	r2, r5, #1
   12810:	lsr	r1, r1, #31
   12814:	cmp	r1, r2
   12818:	subne	r5, r5, #1
   1281c:	mvneq	r1, #0
   12820:	ldrbne	r1, [r6, r5]
   12824:	cmp	r5, #1
   12828:	movgt	r2, r5
   1282c:	ble	12848 <__assert_fail@plt+0x136c>
   12830:	add	ip, r6, r2
   12834:	ldrb	ip, [ip, #-2]
   12838:	strb	ip, [r6, r2]
   1283c:	sub	r2, r2, #2
   12840:	cmp	r2, #1
   12844:	bgt	12830 <__assert_fail@plt+0x1354>
   12848:	cmn	sl, #1
   1284c:	strbne	sl, [r6, #1]
   12850:	addne	r5, r5, #1
   12854:	movne	sl, r1
   12858:	bne	121e0 <__assert_fail@plt+0xd04>
   1285c:	tst	r3, #8
   12860:	add	r6, r6, #1
   12864:	mov	sl, r1
   12868:	beq	121e8 <__assert_fail@plt+0xd0c>
   1286c:	mov	r1, r5
   12870:	mov	r0, r6
   12874:	bl	15d78 <__assert_fail@plt+0x489c>
   12878:	b	11f74 <__assert_fail@plt+0xa98>
   1287c:	mov	r2, #5
   12880:	ldr	r1, [pc, #-620]	; 1261c <__assert_fail@plt+0x1140>
   12884:	mov	r0, #0
   12888:	ldr	r5, [fp]
   1288c:	bl	11230 <dcgettext@plt>
   12890:	ldr	r1, [r4, #256]	; 0x100
   12894:	mov	r6, r0
   12898:	mov	r0, #4
   1289c:	bl	19ee4 <__assert_fail@plt+0x8a08>
   128a0:	mov	r2, r6
   128a4:	mov	r1, r5
   128a8:	mov	r3, r0
   128ac:	mov	r0, #0
   128b0:	bl	13ee4 <__assert_fail@plt+0x2a08>
   128b4:	bl	151e0 <__assert_fail@plt+0x3d04>
   128b8:	ldrd	r8, [r4, #96]	; 0x60
   128bc:	cmp	r8, #0
   128c0:	sbcs	r3, r9, #0
   128c4:	blt	128fc <__assert_fail@plt+0x1420>
   128c8:	cmp	r6, #0
   128cc:	sbcs	r3, r7, #0
   128d0:	blt	12934 <__assert_fail@plt+0x1458>
   128d4:	mvn	r2, #0
   128d8:	subs	r2, r2, r6
   128dc:	mvn	r3, #-2147483648	; 0x80000000
   128e0:	sbc	r3, r3, r7
   128e4:	cmp	r2, r8
   128e8:	sbcs	r3, r3, r9
   128ec:	bge	12934 <__assert_fail@plt+0x1458>
   128f0:	mvn	r2, #0
   128f4:	mvn	r3, #0
   128f8:	strd	r2, [r4, #96]	; 0x60
   128fc:	mov	r2, #5
   12900:	ldr	r1, [pc, #-744]	; 12620 <__assert_fail@plt+0x1144>
   12904:	mov	r0, #0
   12908:	bl	11230 <dcgettext@plt>
   1290c:	ldr	r1, [r4, #260]	; 0x104
   12910:	mov	r5, r0
   12914:	mov	r0, #4
   12918:	bl	19ee4 <__assert_fail@plt+0x8a08>
   1291c:	mov	r1, #0
   12920:	mov	r2, r5
   12924:	mov	r3, r0
   12928:	mov	r0, r1
   1292c:	bl	13ee4 <__assert_fail@plt+0x2a08>
   12930:	b	120dc <__assert_fail@plt+0xc00>
   12934:	adds	r8, r8, r6
   12938:	adc	r9, r9, r7
   1293c:	cmp	r8, #0
   12940:	sbcs	r3, r9, #0
   12944:	strd	r8, [r4, #96]	; 0x60
   12948:	blt	128fc <__assert_fail@plt+0x1420>
   1294c:	mov	r3, #1
   12950:	str	r3, [sp]
   12954:	mov	r2, #0
   12958:	mov	r3, #0
   1295c:	mov	r0, #0
   12960:	bl	112a8 <lseek64@plt>
   12964:	cmp	r0, #0
   12968:	sbcs	r3, r1, #0
   1296c:	blt	12a1c <__assert_fail@plt+0x1540>
   12970:	cmp	r1, r9
   12974:	cmpeq	r0, r8
   12978:	beq	120f4 <__assert_fail@plt+0xc18>
   1297c:	subs	r8, r8, r0
   12980:	sbc	r9, r9, r1
   12984:	cmp	r6, r8
   12988:	sbcs	r3, r7, r9
   1298c:	movlt	r3, #1
   12990:	movge	r3, #0
   12994:	orrs	r3, r3, r9, lsr #31
   12998:	beq	129cc <__assert_fail@plt+0x14f0>
   1299c:	ldr	r3, [pc, #-868]	; 12640 <__assert_fail@plt+0x1164>
   129a0:	ldr	r3, [r3, #8]
   129a4:	cmp	r3, #1
   129a8:	beq	129cc <__assert_fail@plt+0x14f0>
   129ac:	mov	r2, #5
   129b0:	ldr	r1, [pc, #-916]	; 12624 <__assert_fail@plt+0x1148>
   129b4:	mov	r0, #0
   129b8:	bl	11230 <dcgettext@plt>
   129bc:	mov	r1, #0
   129c0:	mov	r2, r0
   129c4:	mov	r0, r1
   129c8:	bl	13ee4 <__assert_fail@plt+0x2a08>
   129cc:	mov	r1, #1
   129d0:	mov	r3, r9
   129d4:	mov	r2, r8
   129d8:	str	r1, [sp]
   129dc:	mov	r0, #0
   129e0:	bl	112a8 <lseek64@plt>
   129e4:	cmp	r0, #0
   129e8:	sbcs	r3, r1, #0
   129ec:	bge	120f4 <__assert_fail@plt+0xc18>
   129f0:	ldr	r5, [fp]
   129f4:	cmp	r5, #0
   129f8:	bne	120a4 <__assert_fail@plt+0xbc8>
   129fc:	mov	r2, #5
   12a00:	ldr	r1, [pc, #-992]	; 12628 <__assert_fail@plt+0x114c>
   12a04:	mov	r0, r5
   12a08:	bl	11230 <dcgettext@plt>
   12a0c:	mov	r1, r5
   12a10:	mov	r2, r0
   12a14:	mov	r0, r5
   12a18:	bl	13ee4 <__assert_fail@plt+0x2a08>
   12a1c:	ldr	r5, [fp]
   12a20:	b	120a4 <__assert_fail@plt+0xbc8>
   12a24:	adds	r6, r6, r0
   12a28:	adc	r7, r7, r1
   12a2c:	strd	r6, [r4, #96]	; 0x60
   12a30:	b	12764 <__assert_fail@plt+0x1288>
   12a34:	ands	r2, r2, #24
   12a38:	moveq	r1, r2
   12a3c:	mov	r0, r3
   12a40:	movne	r1, #32
   12a44:	ldr	r2, [r4, #108]	; 0x6c
   12a48:	bl	113d4 <memset@plt>
   12a4c:	mov	r3, r0
   12a50:	b	11fd0 <__assert_fail@plt+0xaf4>
   12a54:	cmp	r6, #0
   12a58:	blt	13694 <__assert_fail@plt+0x21b8>
   12a5c:	beq	13678 <__assert_fail@plt+0x219c>
   12a60:	cmp	r8, #0
   12a64:	sbcs	r3, r9, #0
   12a68:	bge	11cc8 <__assert_fail@plt+0x7ec>
   12a6c:	mvn	r3, #0
   12a70:	mvn	r2, #0
   12a74:	cmp	r9, r3
   12a78:	cmpeq	r8, r2
   12a7c:	beq	137e8 <__assert_fail@plt+0x230c>
   12a80:	mov	r2, r8
   12a84:	mov	r3, r9
   12a88:	mov	r0, #0
   12a8c:	mov	r1, #-2147483648	; 0x80000000
   12a90:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   12a94:	asr	r3, r6, #31
   12a98:	mov	r2, r6
   12a9c:	strd	r2, [sp, #40]	; 0x28
   12aa0:	cmp	r0, r6
   12aa4:	sbcs	r3, r1, r3
   12aa8:	blt	11cf8 <__assert_fail@plt+0x81c>
   12aac:	mul	r3, r6, r9
   12ab0:	ldr	r2, [sp, #44]	; 0x2c
   12ab4:	umull	r6, r7, r6, r8
   12ab8:	mla	r3, r8, r2, r3
   12abc:	cmp	r6, #0
   12ac0:	add	r7, r3, r7
   12ac4:	sbcs	r3, r7, #0
   12ac8:	mov	r0, r6
   12acc:	mov	r1, r7
   12ad0:	blt	136d8 <__assert_fail@plt+0x21fc>
   12ad4:	ldr	r3, [pc, #-1200]	; 1262c <__assert_fail@plt+0x1150>
   12ad8:	ldrd	r2, [r3, #-8]
   12adc:	cmp	r2, #0
   12ae0:	strd	r2, [sp, #40]	; 0x28
   12ae4:	sbcs	r3, r3, #0
   12ae8:	blt	136c0 <__assert_fail@plt+0x21e4>
   12aec:	mvn	r2, #0
   12af0:	subs	r0, r2, r0
   12af4:	mvn	r3, #-2147483648	; 0x80000000
   12af8:	sbc	r1, r3, r1
   12afc:	mov	r2, r0
   12b00:	mov	r3, r1
   12b04:	ldrd	r0, [sp, #40]	; 0x28
   12b08:	cmp	r2, r0
   12b0c:	sbcs	r3, r3, r1
   12b10:	movlt	r3, #1
   12b14:	movge	r3, #0
   12b18:	cmp	r3, #0
   12b1c:	beq	136c0 <__assert_fail@plt+0x21e4>
   12b20:	ldrd	r2, [sp, #40]	; 0x28
   12b24:	adds	r2, r2, r6
   12b28:	adc	r3, r3, r7
   12b2c:	mov	r6, r2
   12b30:	mov	r7, r3
   12b34:	b	11d0c <__assert_fail@plt+0x830>
   12b38:	ldr	r3, [pc, #-1296]	; 12630 <__assert_fail@plt+0x1154>
   12b3c:	ldr	r1, [pc, #-1296]	; 12634 <__assert_fail@plt+0x1158>
   12b40:	add	r2, r3, #255	; 0xff
   12b44:	ldrb	r3, [r9, #1]
   12b48:	add	r3, r1, r3
   12b4c:	ldrb	r3, [r3, #952]	; 0x3b8
   12b50:	strb	r3, [r9, #1]!
   12b54:	cmp	r2, r9
   12b58:	bne	12b44 <__assert_fail@plt+0x1668>
   12b5c:	b	11bc8 <__assert_fail@plt+0x6ec>
   12b60:	ldr	r3, [sp, #32]
   12b64:	str	r3, [sp, #40]	; 0x28
   12b68:	bl	14dfc <__assert_fail@plt+0x3920>
   12b6c:	ldr	r3, [pc, #-1332]	; 12640 <__assert_fail@plt+0x1164>
   12b70:	ldr	r5, [sp, #40]	; 0x28
   12b74:	ldrd	r2, [r3, #32]
   12b78:	cmp	r0, #0
   12b7c:	movne	r5, r0
   12b80:	orrs	r1, r2, r3
   12b84:	bne	132e4 <__assert_fail@plt+0x1e08>
   12b88:	ldr	r1, [r4, #572]	; 0x23c
   12b8c:	cmp	r1, #0
   12b90:	bne	132e4 <__assert_fail@plt+0x1e08>
   12b94:	ldrb	r1, [r4, #592]	; 0x250
   12b98:	cmp	r1, #0
   12b9c:	bne	13238 <__assert_fail@plt+0x1d5c>
   12ba0:	ldrb	r3, [r4, #273]	; 0x111
   12ba4:	cmp	r3, #0
   12ba8:	bne	1328c <__assert_fail@plt+0x1db0>
   12bac:	bl	1514c <__assert_fail@plt+0x3c70>
   12bb0:	bl	15038 <__assert_fail@plt+0x3b5c>
   12bb4:	bl	13d88 <__assert_fail@plt+0x28ac>
   12bb8:	mov	r0, r5
   12bbc:	bl	11374 <exit@plt>
   12bc0:	ldr	r5, [r4, #108]	; 0x6c
   12bc4:	cmp	r5, #0
   12bc8:	blt	12c30 <__assert_fail@plt+0x1754>
   12bcc:	beq	12d68 <__assert_fail@plt+0x188c>
   12bd0:	cmp	r8, #0
   12bd4:	sbcs	r3, r9, #0
   12bd8:	blt	12cd0 <__assert_fail@plt+0x17f4>
   12bdc:	asr	r7, r5, #31
   12be0:	mov	r6, r5
   12be4:	mov	r2, r5
   12be8:	mov	r3, r7
   12bec:	mvn	r0, #0
   12bf0:	mvn	r1, #-2147483648	; 0x80000000
   12bf4:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   12bf8:	cmp	r0, r8
   12bfc:	sbcs	r3, r1, r9
   12c00:	movlt	r3, #1
   12c04:	movge	r3, #0
   12c08:	cmp	r3, #0
   12c0c:	beq	12d14 <__assert_fail@plt+0x1838>
   12c10:	mul	r3, r5, r9
   12c14:	umull	r0, r1, r5, r8
   12c18:	mla	r3, r8, r7, r3
   12c1c:	strd	r0, [sp, #40]	; 0x28
   12c20:	add	r3, r3, r1
   12c24:	mov	sl, #1
   12c28:	str	r3, [sp, #44]	; 0x2c
   12c2c:	b	11e0c <__assert_fail@plt+0x930>
   12c30:	cmp	r8, #0
   12c34:	sbcs	r3, r9, #0
   12c38:	blt	130c8 <__assert_fail@plt+0x1bec>
   12c3c:	cmn	r5, #1
   12c40:	mvneq	r7, #0
   12c44:	beq	12d14 <__assert_fail@plt+0x1838>
   12c48:	asr	r7, r5, #31
   12c4c:	mov	r6, r5
   12c50:	mov	r2, r5
   12c54:	mov	r3, r7
   12c58:	mov	r0, #0
   12c5c:	mov	r1, #-2147483648	; 0x80000000
   12c60:	b	12bf4 <__assert_fail@plt+0x1718>
   12c64:	adds	r2, r6, r0
   12c68:	adc	r3, r7, r1
   12c6c:	ldr	sl, [sp, #32]
   12c70:	strd	r2, [sp, #40]	; 0x28
   12c74:	b	11e0c <__assert_fail@plt+0x930>
   12c78:	ldr	r5, [r4, #256]	; 0x100
   12c7c:	orr	r2, sl, #1
   12c80:	mov	r1, r5
   12c84:	ldr	r3, [pc, #-1620]	; 12638 <__assert_fail@plt+0x115c>
   12c88:	mov	r0, #1
   12c8c:	bl	15970 <__assert_fail@plt+0x4494>
   12c90:	cmp	r0, #0
   12c94:	bge	11d3c <__assert_fail@plt+0x860>
   12c98:	ldr	r1, [pc, #-1636]	; 1263c <__assert_fail@plt+0x1160>
   12c9c:	mov	r2, #5
   12ca0:	mov	r0, #0
   12ca4:	ldr	r5, [fp]
   12ca8:	bl	11230 <dcgettext@plt>
   12cac:	ldr	r1, [r4, #256]	; 0x100
   12cb0:	mov	r6, r0
   12cb4:	mov	r0, #4
   12cb8:	bl	19ee4 <__assert_fail@plt+0x8a08>
   12cbc:	mov	r2, r6
   12cc0:	mov	r1, r5
   12cc4:	mov	r3, r0
   12cc8:	mov	r0, #1
   12ccc:	bl	13ee4 <__assert_fail@plt+0x2a08>
   12cd0:	mvn	r3, #0
   12cd4:	cmp	r9, r3
   12cd8:	mvn	r2, #0
   12cdc:	cmpeq	r8, r2
   12ce0:	moveq	r6, r5
   12ce4:	asreq	r7, r6, #31
   12ce8:	beq	12d14 <__assert_fail@plt+0x1838>
   12cec:	mov	r3, r9
   12cf0:	mov	r2, r8
   12cf4:	mov	r0, #0
   12cf8:	mov	r1, #-2147483648	; 0x80000000
   12cfc:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   12d00:	asr	r7, r5, #31
   12d04:	mov	r6, r5
   12d08:	cmp	r0, r5
   12d0c:	sbcs	r3, r1, r7
   12d10:	blt	12c10 <__assert_fail@plt+0x1734>
   12d14:	mul	r3, r5, r9
   12d18:	umull	r0, r1, r5, r8
   12d1c:	mla	r3, r8, r7, r3
   12d20:	cmp	r0, #0
   12d24:	add	r1, r3, r1
   12d28:	sbcs	r3, r1, #0
   12d2c:	mov	r2, r0
   12d30:	mov	r3, r1
   12d34:	bge	11db0 <__assert_fail@plt+0x8d4>
   12d38:	ldr	ip, [r4, #568]	; 0x238
   12d3c:	mov	r2, #0
   12d40:	subs	r2, r2, r0
   12d44:	mov	r3, #-2147483648	; 0x80000000
   12d48:	sbc	r3, r3, r1
   12d4c:	asr	r7, ip, #31
   12d50:	cmp	ip, r2
   12d54:	sbcs	r3, r7, r3
   12d58:	mov	r6, ip
   12d5c:	movlt	r3, #1
   12d60:	movge	r3, #0
   12d64:	b	11df4 <__assert_fail@plt+0x918>
   12d68:	mov	r2, #0
   12d6c:	mov	r3, #0
   12d70:	mov	r0, r2
   12d74:	mov	r1, r3
   12d78:	b	11db0 <__assert_fail@plt+0x8d4>
   12d7c:	ldr	r5, [r4, #124]	; 0x7c
   12d80:	ldr	r2, [r4, #120]	; 0x78
   12d84:	b	11f0c <__assert_fail@plt+0xa30>
   12d88:	ldr	r3, [r4, #116]	; 0x74
   12d8c:	cmn	sl, #1
   12d90:	beq	130bc <__assert_fail@plt+0x1be0>
   12d94:	uxtb	sl, sl
   12d98:	tst	r3, #8
   12d9c:	strb	sl, [sp, #72]	; 0x48
   12da0:	bne	13094 <__assert_fail@plt+0x1bb8>
   12da4:	tst	r3, #16
   12da8:	bne	13078 <__assert_fail@plt+0x1b9c>
   12dac:	ldr	r3, [r4, #276]	; 0x114
   12db0:	ldr	r2, [r4, #124]	; 0x7c
   12db4:	add	r1, r3, #1
   12db8:	str	r1, [r4, #276]	; 0x114
   12dbc:	strb	sl, [r2, r3]
   12dc0:	ldr	r3, [r4, #120]	; 0x78
   12dc4:	cmp	r1, r3
   12dc8:	bge	12e78 <__assert_fail@plt+0x199c>
   12dcc:	ldr	r5, [r4, #280]	; 0x118
   12dd0:	cmp	r5, #0
   12dd4:	beq	12e14 <__assert_fail@plt+0x1938>
   12dd8:	ldr	r3, [r4, #116]	; 0x74
   12ddc:	tst	r3, #16
   12de0:	beq	12e14 <__assert_fail@plt+0x1938>
   12de4:	ldr	r3, [pc, #-1964]	; 12640 <__assert_fail@plt+0x1164>
   12de8:	ldr	r2, [r4, #124]	; 0x7c
   12dec:	ldrb	r0, [r3, #25]
   12df0:	add	r3, r1, #1
   12df4:	str	r3, [r4, #276]	; 0x114
   12df8:	strb	r0, [r2, r1]
   12dfc:	ldr	r2, [r4, #120]	; 0x78
   12e00:	cmp	r3, r2
   12e04:	movlt	r1, r3
   12e08:	blt	12e14 <__assert_fail@plt+0x1938>
   12e0c:	bl	15cc8 <__assert_fail@plt+0x47ec>
   12e10:	ldr	r1, [r4, #276]	; 0x114
   12e14:	cmp	r1, #0
   12e18:	bne	12fb4 <__assert_fail@plt+0x1ad8>
   12e1c:	ldrb	r3, [r4, #272]	; 0x110
   12e20:	cmp	r3, #0
   12e24:	bne	12ef0 <__assert_fail@plt+0x1a14>
   12e28:	ldr	r3, [r4, #116]	; 0x74
   12e2c:	tst	r3, #49152	; 0xc000
   12e30:	beq	12b68 <__assert_fail@plt+0x168c>
   12e34:	ldr	r3, [pc, #-2044]	; 12640 <__assert_fail@plt+0x1164>
   12e38:	ldr	r3, [r3, #8]
   12e3c:	cmp	r3, #4
   12e40:	bne	12b68 <__assert_fail@plt+0x168c>
   12e44:	ldr	r3, [pc, #-2060]	; 12640 <__assert_fail@plt+0x1164>
   12e48:	ldrd	r0, [r3]
   12e4c:	cmp	r0, #0
   12e50:	sbcs	r3, r1, #0
   12e54:	blt	12b68 <__assert_fail@plt+0x168c>
   12e58:	ldrd	r2, [r4, #8]
   12e5c:	cmp	r0, r2
   12e60:	sbcs	r3, r1, r3
   12e64:	bge	12b68 <__assert_fail@plt+0x168c>
   12e68:	mov	r0, #0
   12e6c:	mov	r1, #0
   12e70:	bl	139a8 <__assert_fail@plt+0x24cc>
   12e74:	b	12b68 <__assert_fail@plt+0x168c>
   12e78:	bl	15cc8 <__assert_fail@plt+0x47ec>
   12e7c:	ldr	r3, [r4, #116]	; 0x74
   12e80:	ldr	r1, [r4, #276]	; 0x114
   12e84:	and	r2, r3, #8
   12e88:	cmp	r2, #0
   12e8c:	beq	12dcc <__assert_fail@plt+0x18f0>
   12e90:	ldr	r5, [r4, #280]	; 0x118
   12e94:	cmp	r5, #0
   12e98:	ble	12dd0 <__assert_fail@plt+0x18f4>
   12e9c:	ldr	r2, [r4, #284]	; 0x11c
   12ea0:	cmp	r5, r2
   12ea4:	blt	12ebc <__assert_fail@plt+0x19e0>
   12ea8:	b	12ddc <__assert_fail@plt+0x1900>
   12eac:	ldr	r3, [r4, #284]	; 0x11c
   12eb0:	add	r5, r5, #1
   12eb4:	cmp	r5, r3
   12eb8:	bge	12dcc <__assert_fail@plt+0x18f0>
   12ebc:	ldr	r3, [pc, #-2180]	; 12640 <__assert_fail@plt+0x1164>
   12ec0:	ldr	r2, [r4, #124]	; 0x7c
   12ec4:	ldrb	r0, [r3, #26]
   12ec8:	add	r3, r1, #1
   12ecc:	str	r3, [r4, #276]	; 0x114
   12ed0:	strb	r0, [r2, r1]
   12ed4:	ldr	r2, [r4, #120]	; 0x78
   12ed8:	cmp	r3, r2
   12edc:	movlt	r1, r3
   12ee0:	blt	12eac <__assert_fail@plt+0x19d0>
   12ee4:	bl	15cc8 <__assert_fail@plt+0x47ec>
   12ee8:	ldr	r1, [r4, #276]	; 0x114
   12eec:	b	12eac <__assert_fail@plt+0x19d0>
   12ef0:	add	r1, sp, #72	; 0x48
   12ef4:	mov	r0, #1
   12ef8:	bl	151f8 <__assert_fail@plt+0x3d1c>
   12efc:	cmp	r0, #0
   12f00:	bne	13034 <__assert_fail@plt+0x1b58>
   12f04:	ldr	r3, [sp, #88]	; 0x58
   12f08:	and	r3, r3, #61440	; 0xf000
   12f0c:	cmp	r3, #32768	; 0x8000
   12f10:	bne	12e28 <__assert_fail@plt+0x194c>
   12f14:	mov	r5, #1
   12f18:	mov	r3, #0
   12f1c:	str	r5, [sp]
   12f20:	mov	r0, r5
   12f24:	mov	r2, #0
   12f28:	bl	112a8 <lseek64@plt>
   12f2c:	cmp	r0, #0
   12f30:	sbcs	r3, r1, #0
   12f34:	mov	r6, r0
   12f38:	mov	r7, r1
   12f3c:	blt	12e28 <__assert_fail@plt+0x194c>
   12f40:	ldrd	r2, [sp, #120]	; 0x78
   12f44:	cmp	r2, r0
   12f48:	sbcs	r3, r3, r1
   12f4c:	bge	12e28 <__assert_fail@plt+0x194c>
   12f50:	bl	1514c <__assert_fail@plt+0x3c70>
   12f54:	mov	r2, r6
   12f58:	mov	r3, r7
   12f5c:	mov	r0, r5
   12f60:	bl	1120c <ftruncate64@plt>
   12f64:	cmp	r0, #0
   12f68:	bge	130b0 <__assert_fail@plt+0x1bd4>
   12f6c:	ldr	r8, [fp]
   12f70:	cmp	r8, #4
   12f74:	beq	12f50 <__assert_fail@plt+0x1a74>
   12f78:	mov	r2, #5
   12f7c:	ldr	r1, [pc, #-2364]	; 12648 <__assert_fail@plt+0x116c>
   12f80:	mov	r0, #0
   12f84:	bl	11230 <dcgettext@plt>
   12f88:	ldr	r1, [r4, #256]	; 0x100
   12f8c:	mov	r5, r0
   12f90:	mov	r0, #4
   12f94:	bl	19ee4 <__assert_fail@plt+0x8a08>
   12f98:	mov	r2, r5
   12f9c:	strd	r6, [sp]
   12fa0:	mov	r1, r8
   12fa4:	str	r0, [sp, #8]
   12fa8:	mov	r0, #0
   12fac:	bl	13ee4 <__assert_fail@plt+0x2a08>
   12fb0:	b	1306c <__assert_fail@plt+0x1b90>
   12fb4:	ldr	r0, [r4, #124]	; 0x7c
   12fb8:	bl	15a44 <__assert_fail@plt+0x4568>
   12fbc:	ldrd	r2, [r4, #8]
   12fc0:	adds	r2, r2, r0
   12fc4:	adc	r3, r3, r0, asr #31
   12fc8:	cmp	r0, #0
   12fcc:	strd	r2, [r4, #8]
   12fd0:	beq	12fe4 <__assert_fail@plt+0x1b08>
   12fd4:	ldrd	r2, [r4, #32]
   12fd8:	adds	r2, r2, #1
   12fdc:	adc	r3, r3, #0
   12fe0:	strd	r2, [r4, #32]
   12fe4:	ldr	r3, [r4, #276]	; 0x114
   12fe8:	cmp	r0, r3
   12fec:	beq	12e1c <__assert_fail@plt+0x1940>
   12ff0:	mov	r2, #5
   12ff4:	ldr	r1, [pc, #-2488]	; 12644 <__assert_fail@plt+0x1168>
   12ff8:	mov	r0, #0
   12ffc:	ldr	r5, [fp]
   13000:	bl	11230 <dcgettext@plt>
   13004:	ldr	r1, [r4, #256]	; 0x100
   13008:	mov	r6, r0
   1300c:	mov	r0, #4
   13010:	bl	19ee4 <__assert_fail@plt+0x8a08>
   13014:	mov	r2, r6
   13018:	mov	r1, r5
   1301c:	mov	r3, r0
   13020:	mov	r0, #0
   13024:	bl	13ee4 <__assert_fail@plt+0x2a08>
   13028:	mov	r3, #1
   1302c:	str	r3, [sp, #40]	; 0x28
   13030:	b	12b68 <__assert_fail@plt+0x168c>
   13034:	mov	r2, #5
   13038:	ldr	r1, [pc, #-2548]	; 1264c <__assert_fail@plt+0x1170>
   1303c:	mov	r0, #0
   13040:	ldr	r5, [fp]
   13044:	bl	11230 <dcgettext@plt>
   13048:	ldr	r1, [r4, #256]	; 0x100
   1304c:	mov	r6, r0
   13050:	mov	r0, #4
   13054:	bl	19ee4 <__assert_fail@plt+0x8a08>
   13058:	mov	r2, r6
   1305c:	mov	r1, r5
   13060:	mov	r3, r0
   13064:	mov	r0, #0
   13068:	bl	13ee4 <__assert_fail@plt+0x2a08>
   1306c:	mov	r3, #1
   13070:	str	r3, [sp, #40]	; 0x28
   13074:	b	12b68 <__assert_fail@plt+0x168c>
   13078:	mov	r1, #1
   1307c:	add	r0, sp, #72	; 0x48
   13080:	bl	15e6c <__assert_fail@plt+0x4990>
   13084:	ldr	r3, [r4, #116]	; 0x74
   13088:	ldr	r1, [r4, #276]	; 0x114
   1308c:	and	r2, r3, #8
   13090:	b	12e88 <__assert_fail@plt+0x19ac>
   13094:	mov	r1, #1
   13098:	add	r0, sp, #72	; 0x48
   1309c:	bl	15d78 <__assert_fail@plt+0x489c>
   130a0:	ldr	r3, [r4, #116]	; 0x74
   130a4:	ldr	r1, [r4, #276]	; 0x114
   130a8:	and	r2, r3, #8
   130ac:	b	12e88 <__assert_fail@plt+0x19ac>
   130b0:	beq	12e28 <__assert_fail@plt+0x194c>
   130b4:	ldr	r8, [fp]
   130b8:	b	12f78 <__assert_fail@plt+0x1a9c>
   130bc:	and	r2, r3, #8
   130c0:	ldr	r1, [r4, #276]	; 0x114
   130c4:	b	12e88 <__assert_fail@plt+0x19ac>
   130c8:	asr	r7, r5, #31
   130cc:	mov	r3, r7
   130d0:	mov	r2, r5
   130d4:	mvn	r0, #0
   130d8:	mvn	r1, #-2147483648	; 0x80000000
   130dc:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   130e0:	mov	r6, r5
   130e4:	cmp	r8, r0
   130e8:	sbcs	r3, r9, r1
   130ec:	movlt	r3, #1
   130f0:	movge	r3, #0
   130f4:	b	12c08 <__assert_fail@plt+0x172c>
   130f8:	mov	r5, #1
   130fc:	b	1310c <__assert_fail@plt+0x1c30>
   13100:	ldr	r8, [fp]
   13104:	cmp	r8, #4
   13108:	bne	13130 <__assert_fail@plt+0x1c54>
   1310c:	bl	1514c <__assert_fail@plt+0x3c70>
   13110:	mov	r2, r6
   13114:	mov	r3, r7
   13118:	mov	r0, r5
   1311c:	bl	1120c <ftruncate64@plt>
   13120:	cmp	r0, #0
   13124:	blt	13100 <__assert_fail@plt+0x1c24>
   13128:	beq	11d58 <__assert_fail@plt+0x87c>
   1312c:	ldr	r8, [fp]
   13130:	add	r1, sp, #72	; 0x48
   13134:	mov	r0, #1
   13138:	bl	151f8 <__assert_fail@plt+0x3d1c>
   1313c:	cmp	r0, #0
   13140:	bne	13190 <__assert_fail@plt+0x1cb4>
   13144:	ldr	r5, [sp, #88]	; 0x58
   13148:	and	r5, r5, #61440	; 0xf000
   1314c:	sub	r5, r5, #16384	; 0x4000
   13150:	bics	r5, r5, #16384	; 0x4000
   13154:	bne	11d58 <__assert_fail@plt+0x87c>
   13158:	mov	r2, #5
   1315c:	ldr	r1, [pc, #-2844]	; 12648 <__assert_fail@plt+0x116c>
   13160:	bl	11230 <dcgettext@plt>
   13164:	ldr	r1, [r4, #256]	; 0x100
   13168:	mov	r9, r0
   1316c:	mov	r0, #4
   13170:	bl	19ee4 <__assert_fail@plt+0x8a08>
   13174:	mov	r2, r9
   13178:	strd	r6, [sp]
   1317c:	mov	r1, r8
   13180:	str	r0, [sp, #8]
   13184:	mov	r0, r5
   13188:	bl	13ee4 <__assert_fail@plt+0x2a08>
   1318c:	b	11d58 <__assert_fail@plt+0x87c>
   13190:	mov	r2, #5
   13194:	ldr	r1, [pc, #-2896]	; 1264c <__assert_fail@plt+0x1170>
   13198:	mov	r0, #0
   1319c:	ldr	r5, [fp]
   131a0:	bl	11230 <dcgettext@plt>
   131a4:	ldr	r1, [r4, #256]	; 0x100
   131a8:	mov	r6, r0
   131ac:	mov	r0, #4
   131b0:	bl	19ee4 <__assert_fail@plt+0x8a08>
   131b4:	mov	r2, r6
   131b8:	mov	r1, r5
   131bc:	mov	r3, r0
   131c0:	mov	r0, #0
   131c4:	bl	13ee4 <__assert_fail@plt+0x2a08>
   131c8:	b	11d58 <__assert_fail@plt+0x87c>
   131cc:	ldrb	r3, [r4, #88]	; 0x58
   131d0:	ldrb	r2, [r4, #273]	; 0x111
   131d4:	ldrb	r1, [r4, #592]	; 0x250
   131d8:	cmp	r2, #0
   131dc:	orr	r3, r3, r1
   131e0:	strb	r3, [r4, #88]	; 0x58
   131e4:	ldrb	r2, [r4, #89]	; 0x59
   131e8:	ldr	r3, [r4, #116]	; 0x74
   131ec:	bne	13204 <__assert_fail@plt+0x1d28>
   131f0:	ldr	r1, [sp, #32]
   131f4:	orr	r2, r2, r1
   131f8:	and	r2, r2, #1
   131fc:	strb	r2, [r4, #89]	; 0x59
   13200:	b	12d8c <__assert_fail@plt+0x18b0>
   13204:	ldr	r1, [sp, #32]
   13208:	tst	r3, #512	; 0x200
   1320c:	moveq	r1, #1
   13210:	str	r1, [sp, #32]
   13214:	b	131f4 <__assert_fail@plt+0x1d18>
   13218:	ldrd	r2, [r4, #40]	; 0x28
   1321c:	adds	r2, r2, #1
   13220:	adc	r3, r3, #0
   13224:	strd	r2, [r4, #40]	; 0x28
   13228:	b	11f74 <__assert_fail@plt+0xa98>
   1322c:	mov	r2, #1
   13230:	str	r2, [sp, #40]	; 0x28
   13234:	b	12d8c <__assert_fail@plt+0x18b0>
   13238:	mov	r0, r2
   1323c:	mov	r1, r3
   13240:	bl	14b90 <__assert_fail@plt+0x36b4>
   13244:	subs	r6, r0, #0
   13248:	bne	12ba0 <__assert_fail@plt+0x16c4>
   1324c:	mov	r2, #5
   13250:	ldr	r1, [pc, #-3080]	; 12650 <__assert_fail@plt+0x1174>
   13254:	ldr	r5, [fp]
   13258:	bl	11230 <dcgettext@plt>
   1325c:	ldr	r2, [r4, #260]	; 0x104
   13260:	mov	r1, #3
   13264:	mov	r7, r0
   13268:	mov	r0, r6
   1326c:	bl	1a960 <__assert_fail@plt+0x9484>
   13270:	mov	r1, r5
   13274:	mov	r2, r7
   13278:	mov	r5, #1
   1327c:	mov	r3, r0
   13280:	mov	r0, r6
   13284:	bl	13ee4 <__assert_fail@plt+0x2a08>
   13288:	b	12ba0 <__assert_fail@plt+0x16c4>
   1328c:	mov	r2, #0
   13290:	mov	r3, #0
   13294:	mov	r0, #1
   13298:	bl	13f78 <__assert_fail@plt+0x2a9c>
   1329c:	subs	r6, r0, #0
   132a0:	bne	12bac <__assert_fail@plt+0x16d0>
   132a4:	mov	r2, #5
   132a8:	ldr	r1, [pc, #-3168]	; 12650 <__assert_fail@plt+0x1174>
   132ac:	ldr	r5, [fp]
   132b0:	bl	11230 <dcgettext@plt>
   132b4:	ldr	r2, [r4, #256]	; 0x100
   132b8:	mov	r1, #3
   132bc:	mov	r7, r0
   132c0:	mov	r0, r6
   132c4:	bl	1a960 <__assert_fail@plt+0x9484>
   132c8:	mov	r1, r5
   132cc:	mov	r2, r7
   132d0:	mov	r5, #1
   132d4:	mov	r3, r0
   132d8:	mov	r0, r6
   132dc:	bl	13ee4 <__assert_fail@plt+0x2a08>
   132e0:	b	12bac <__assert_fail@plt+0x16d0>
   132e4:	ldrb	r3, [r4, #592]	; 0x250
   132e8:	cmp	r3, #0
   132ec:	bne	132fc <__assert_fail@plt+0x1e20>
   132f0:	ldrb	r3, [r4, #88]	; 0x58
   132f4:	cmp	r3, #0
   132f8:	beq	13308 <__assert_fail@plt+0x1e2c>
   132fc:	mov	r0, #0
   13300:	mov	r1, #0
   13304:	bl	14b90 <__assert_fail@plt+0x36b4>
   13308:	ldrb	r3, [r4, #273]	; 0x111
   1330c:	cmp	r3, #0
   13310:	bne	13320 <__assert_fail@plt+0x1e44>
   13314:	ldrb	r3, [r4, #89]	; 0x59
   13318:	cmp	r3, #0
   1331c:	beq	12bac <__assert_fail@plt+0x16d0>
   13320:	mov	r2, #0
   13324:	mov	r3, #0
   13328:	mov	r0, #1
   1332c:	bl	13f78 <__assert_fail@plt+0x2a9c>
   13330:	b	12bac <__assert_fail@plt+0x16d0>
   13334:	ldr	r1, [pc, #-3304]	; 12654 <__assert_fail@plt+0x1178>
   13338:	mov	r2, #5
   1333c:	mov	r0, #0
   13340:	bl	11230 <dcgettext@plt>
   13344:	mov	r1, #0
   13348:	mov	r2, r0
   1334c:	mov	r0, #1
   13350:	bl	13ee4 <__assert_fail@plt+0x2a08>
   13354:	strb	r3, [r4, #300]	; 0x12c
   13358:	ldr	r3, [pc, #-3336]	; 12658 <__assert_fail@plt+0x117c>
   1335c:	b	11a20 <__assert_fail@plt+0x544>
   13360:	strd	r0, [sp, #40]	; 0x28
   13364:	cmp	r0, #0
   13368:	sbcs	r3, r1, #0
   1336c:	blt	12548 <__assert_fail@plt+0x106c>
   13370:	ldr	r3, [sp, #72]	; 0x48
   13374:	cmp	r3, #0
   13378:	beq	11878 <__assert_fail@plt+0x39c>
   1337c:	cmp	r3, #1
   13380:	moveq	r4, #75	; 0x4b
   13384:	movne	r4, #0
   13388:	b	12428 <__assert_fail@plt+0xf4c>
   1338c:	mov	r2, #5
   13390:	ldr	r1, [pc, #-3372]	; 1266c <__assert_fail@plt+0x1190>
   13394:	mov	r0, fp
   13398:	bl	11230 <dcgettext@plt>
   1339c:	ldr	r3, [pc, #-3400]	; 1265c <__assert_fail@plt+0x1180>
   133a0:	tst	r8, #4
   133a4:	mov	r4, r0
   133a8:	ldr	r0, [pc, #-3408]	; 12660 <__assert_fail@plt+0x1184>
   133ac:	movne	r0, r3
   133b0:	bl	1b854 <__assert_fail@plt+0xa378>
   133b4:	ldr	r2, [pc, #-3400]	; 12674 <__assert_fail@plt+0x1198>
   133b8:	mov	r3, r4
   133bc:	mov	r1, fp
   133c0:	str	r0, [sp]
   133c4:	mov	r0, r1
   133c8:	bl	13ee4 <__assert_fail@plt+0x2a08>
   133cc:	mov	r0, #1
   133d0:	bl	145a4 <__assert_fail@plt+0x30c8>
   133d4:	mov	r2, #5
   133d8:	ldr	r1, [pc, #-3452]	; 12664 <__assert_fail@plt+0x1188>
   133dc:	mov	r0, sl
   133e0:	bl	11230 <dcgettext@plt>
   133e4:	mov	r4, r0
   133e8:	ldr	r0, [pc, #-3464]	; 12668 <__assert_fail@plt+0x118c>
   133ec:	bl	1b854 <__assert_fail@plt+0xa378>
   133f0:	mov	r3, r4
   133f4:	ldr	r2, [pc, #-3464]	; 12674 <__assert_fail@plt+0x1198>
   133f8:	mov	r1, sl
   133fc:	b	133c0 <__assert_fail@plt+0x1ee4>
   13400:	ldr	r1, [pc, #-3484]	; 1266c <__assert_fail@plt+0x1190>
   13404:	mov	r2, #5
   13408:	mov	r0, #0
   1340c:	bl	11230 <dcgettext@plt>
   13410:	mov	r4, r0
   13414:	ldr	r0, [pc, #-3500]	; 12670 <__assert_fail@plt+0x1194>
   13418:	bl	1b854 <__assert_fail@plt+0xa378>
   1341c:	mov	r1, #0
   13420:	mov	r3, r4
   13424:	ldr	r2, [pc, #-3512]	; 12674 <__assert_fail@plt+0x1198>
   13428:	b	133c0 <__assert_fail@plt+0x1ee4>
   1342c:	cmp	r0, #0
   13430:	beq	1346c <__assert_fail@plt+0x1f90>
   13434:	sub	r4, r0, r5
   13438:	mov	r2, #5
   1343c:	ldr	r1, [pc, #-3532]	; 12678 <__assert_fail@plt+0x119c>
   13440:	mov	r0, #0
   13444:	bl	11230 <dcgettext@plt>
   13448:	mov	r3, r4
   1344c:	mov	r1, #8
   13450:	mov	r2, r5
   13454:	mov	r6, r0
   13458:	mov	r0, #0
   1345c:	bl	19cf0 <__assert_fail@plt+0x8814>
   13460:	mov	r1, #0
   13464:	mov	r3, r6
   13468:	b	13424 <__assert_fail@plt+0x1f48>
   1346c:	mov	r0, r5
   13470:	bl	11380 <strlen@plt>
   13474:	mov	r4, r0
   13478:	b	13438 <__assert_fail@plt+0x1f5c>
   1347c:	ldrb	r3, [r3]
   13480:	cmp	r3, #0
   13484:	cmpne	r3, #61	; 0x3d
   13488:	beq	134b8 <__assert_fail@plt+0x1fdc>
   1348c:	ldr	ip, [pc, #-3608]	; 1267c <__assert_fail@plt+0x11a0>
   13490:	mov	r3, r6
   13494:	mov	r2, #99	; 0x63
   13498:	b	134a8 <__assert_fail@plt+0x1fcc>
   1349c:	ldrb	r2, [ip, #1]!
   134a0:	cmp	r2, #0
   134a4:	beq	134c8 <__assert_fail@plt+0x1fec>
   134a8:	ldrb	lr, [r3], #1
   134ac:	cmp	lr, r2
   134b0:	beq	1349c <__assert_fail@plt+0x1fc0>
   134b4:	b	134d8 <__assert_fail@plt+0x1ffc>
   134b8:	add	ip, sp, #68	; 0x44
   134bc:	mvn	r2, #-2147483647	; 0x80000001
   134c0:	mov	r3, #0
   134c4:	b	12404 <__assert_fail@plt+0xf28>
   134c8:	ldrb	r3, [r3]
   134cc:	cmp	r3, #0
   134d0:	cmpne	r3, #61	; 0x3d
   134d4:	beq	13504 <__assert_fail@plt+0x2028>
   134d8:	ldr	ip, [pc, #-3680]	; 12680 <__assert_fail@plt+0x11a4>
   134dc:	mov	r3, r6
   134e0:	mov	r2, #115	; 0x73
   134e4:	b	134f4 <__assert_fail@plt+0x2018>
   134e8:	ldrb	r2, [ip, #1]!
   134ec:	cmp	r2, #0
   134f0:	beq	13514 <__assert_fail@plt+0x2038>
   134f4:	ldrb	lr, [r3], #1
   134f8:	cmp	lr, r2
   134fc:	beq	134e8 <__assert_fail@plt+0x200c>
   13500:	b	13524 <__assert_fail@plt+0x2048>
   13504:	ldr	ip, [pc, #-3720]	; 12684 <__assert_fail@plt+0x11a8>
   13508:	mvn	r2, #-2147483648	; 0x80000000
   1350c:	mov	r3, #0
   13510:	b	12404 <__assert_fail@plt+0xf28>
   13514:	ldrb	r3, [r3]
   13518:	cmp	r3, #0
   1351c:	cmpne	r3, #61	; 0x3d
   13520:	beq	13360 <__assert_fail@plt+0x1e84>
   13524:	ldr	ip, [pc, #-3748]	; 12688 <__assert_fail@plt+0x11ac>
   13528:	mov	r3, r6
   1352c:	mov	r2, #115	; 0x73
   13530:	ldrb	lr, [r3], #1
   13534:	cmp	lr, r2
   13538:	bne	13558 <__assert_fail@plt+0x207c>
   1353c:	ldrb	r2, [ip, #1]!
   13540:	cmp	r2, #0
   13544:	bne	13530 <__assert_fail@plt+0x2054>
   13548:	ldrb	r3, [r3]
   1354c:	cmp	r3, #0
   13550:	cmpne	r3, #61	; 0x3d
   13554:	beq	13594 <__assert_fail@plt+0x20b8>
   13558:	ldr	ip, [pc, #-3796]	; 1268c <__assert_fail@plt+0x11b0>
   1355c:	mov	r3, r6
   13560:	mov	r2, #99	; 0x63
   13564:	ldrb	lr, [r3], #1
   13568:	cmp	lr, r2
   1356c:	bne	1359c <__assert_fail@plt+0x20c0>
   13570:	ldrb	r2, [ip, #1]!
   13574:	cmp	r2, #0
   13578:	bne	13564 <__assert_fail@plt+0x2088>
   1357c:	ldrb	r3, [r3]
   13580:	cmp	r3, #0
   13584:	cmpne	r3, #61	; 0x3d
   13588:	bne	1359c <__assert_fail@plt+0x20c0>
   1358c:	strd	r0, [sp, #32]
   13590:	b	13364 <__assert_fail@plt+0x1e88>
   13594:	strd	r0, [sp, #48]	; 0x30
   13598:	b	13364 <__assert_fail@plt+0x1e88>
   1359c:	ldr	r1, [pc, #-3860]	; 12690 <__assert_fail@plt+0x11b4>
   135a0:	mov	r2, #5
   135a4:	mov	r0, #0
   135a8:	bl	11230 <dcgettext@plt>
   135ac:	mov	r4, r0
   135b0:	mov	r0, r6
   135b4:	bl	1b854 <__assert_fail@plt+0xa378>
   135b8:	mov	r1, #0
   135bc:	mov	r2, r4
   135c0:	mov	r3, r0
   135c4:	mov	r0, r1
   135c8:	bl	13ee4 <__assert_fail@plt+0x2a08>
   135cc:	mov	r0, #1
   135d0:	bl	145a4 <__assert_fail@plt+0x30c8>
   135d4:	mov	r3, #0
   135d8:	ldr	ip, [pc, #-3916]	; 12694 <__assert_fail@plt+0x11b8>
   135dc:	mov	r2, r3
   135e0:	add	r1, sp, #72	; 0x48
   135e4:	mov	r0, #10
   135e8:	str	ip, [sp, #72]	; 0x48
   135ec:	str	r3, [sp, #204]	; 0xcc
   135f0:	bl	11284 <sigaction@plt>
   135f4:	b	11638 <__assert_fail@plt+0x15c>
   135f8:	mov	r1, #10
   135fc:	ldr	r0, [pc, #-3948]	; 12698 <__assert_fail@plt+0x11bc>
   13600:	bl	11314 <sigaddset@plt>
   13604:	b	115ec <__assert_fail@plt+0x110>
   13608:	mov	r2, #5
   1360c:	ldr	r1, [pc, #528]	; 13824 <__assert_fail@plt+0x2348>
   13610:	b	1333c <__assert_fail@plt+0x1e60>
   13614:	ldr	ip, [pc, #524]	; 13828 <__assert_fail@plt+0x234c>
   13618:	mov	r3, #-1073741824	; 0xc0000000
   1361c:	mov	r2, #0
   13620:	add	r1, sp, #72	; 0x48
   13624:	mov	r0, #2
   13628:	str	ip, [sp, #72]	; 0x48
   1362c:	str	r3, [sp, #204]	; 0xcc
   13630:	bl	11284 <sigaction@plt>
   13634:	b	1164c <__assert_fail@plt+0x170>
   13638:	mov	r2, #5
   1363c:	ldr	r1, [pc, #488]	; 1382c <__assert_fail@plt+0x2350>
   13640:	b	135a8 <__assert_fail@plt+0x20cc>
   13644:	mov	r2, #5
   13648:	ldr	r1, [pc, #480]	; 13830 <__assert_fail@plt+0x2354>
   1364c:	mov	r0, r3
   13650:	str	r3, [sp, #32]
   13654:	bl	11230 <dcgettext@plt>
   13658:	ldr	r2, [r4, #120]	; 0x78
   1365c:	ldr	r3, [sp, #32]
   13660:	str	r2, [sp, #8]
   13664:	strd	r8, [sp]
   13668:	mov	r1, r3
   1366c:	mov	r2, r0
   13670:	mov	r0, #1
   13674:	bl	13ee4 <__assert_fail@plt+0x2a08>
   13678:	mov	r2, #0
   1367c:	mov	r3, #0
   13680:	mov	r0, r2
   13684:	mov	r1, r3
   13688:	mov	r6, r2
   1368c:	mov	r7, r3
   13690:	b	12ad4 <__assert_fail@plt+0x15f8>
   13694:	cmp	r8, #0
   13698:	sbcs	r3, r9, #0
   1369c:	blt	137f8 <__assert_fail@plt+0x231c>
   136a0:	cmn	r6, #1
   136a4:	beq	13708 <__assert_fail@plt+0x222c>
   136a8:	mov	r2, r6
   136ac:	asr	r3, r6, #31
   136b0:	mov	r0, #0
   136b4:	strd	r2, [sp, #40]	; 0x28
   136b8:	mov	r1, #-2147483648	; 0x80000000
   136bc:	b	11cdc <__assert_fail@plt+0x800>
   136c0:	ldrd	r2, [sp, #40]	; 0x28
   136c4:	adds	r2, r2, r6
   136c8:	adc	r3, r3, r7
   136cc:	mov	r6, r2
   136d0:	mov	r7, r3
   136d4:	b	11d18 <__assert_fail@plt+0x83c>
   136d8:	ldr	r1, [pc, #340]	; 13834 <__assert_fail@plt+0x2358>
   136dc:	mov	r2, #0
   136e0:	subs	r2, r2, r6
   136e4:	ldrd	r0, [r1, #-8]
   136e8:	mov	r3, #-2147483648	; 0x80000000
   136ec:	sbc	r3, r3, r7
   136f0:	cmp	r0, r2
   136f4:	sbcs	r3, r1, r3
   136f8:	strd	r0, [sp, #40]	; 0x28
   136fc:	movlt	r3, #1
   13700:	movge	r3, #0
   13704:	b	12b18 <__assert_fail@plt+0x163c>
   13708:	mvn	r2, #0
   1370c:	mvn	r3, #0
   13710:	strd	r2, [sp, #40]	; 0x28
   13714:	b	12aac <__assert_fail@plt+0x15d0>
   13718:	bl	113a4 <__errno_location@plt>
   1371c:	ldr	r1, [pc, #276]	; 13838 <__assert_fail@plt+0x235c>
   13720:	mov	r2, #5
   13724:	ldr	r5, [r0]
   13728:	mov	r0, #0
   1372c:	bl	11230 <dcgettext@plt>
   13730:	ldr	r1, [r4, #260]	; 0x104
   13734:	mov	r6, r0
   13738:	b	12cb4 <__assert_fail@plt+0x17d8>
   1373c:	mov	r2, #5
   13740:	ldr	r1, [pc, #244]	; 1383c <__assert_fail@plt+0x2360>
   13744:	mov	r0, r5
   13748:	bl	11230 <dcgettext@plt>
   1374c:	mov	r1, r7
   13750:	mov	r3, r0
   13754:	mov	r2, r0
   13758:	mov	r0, r5
   1375c:	str	r3, [r4, #260]	; 0x104
   13760:	bl	152c4 <__assert_fail@plt+0x3de8>
   13764:	b	11c0c <__assert_fail@plt+0x730>
   13768:	mov	r2, #5
   1376c:	ldr	r1, [pc, #204]	; 13840 <__assert_fail@plt+0x2364>
   13770:	mov	r0, r5
   13774:	bl	11230 <dcgettext@plt>
   13778:	ldr	r1, [r4, #268]	; 0x10c
   1377c:	mov	r3, r0
   13780:	mov	r2, r0
   13784:	mov	r0, #1
   13788:	str	r3, [r4, #256]	; 0x100
   1378c:	bl	152c4 <__assert_fail@plt+0x3de8>
   13790:	ldr	r3, [pc, #172]	; 13844 <__assert_fail@plt+0x2368>
   13794:	str	r3, [sp, #48]	; 0x30
   13798:	b	11d58 <__assert_fail@plt+0x87c>
   1379c:	cmp	r1, r3
   137a0:	cmpeq	r0, r2
   137a4:	beq	11978 <__assert_fail@plt+0x49c>
   137a8:	ldr	r3, [pc, #152]	; 13848 <__assert_fail@plt+0x236c>
   137ac:	tst	r8, #16
   137b0:	strd	r0, [r3, #32]
   137b4:	bne	11980 <__assert_fail@plt+0x4a4>
   137b8:	ldrd	r2, [sp, #48]	; 0x30
   137bc:	orrs	r1, r2, r3
   137c0:	ldrne	r1, [pc, #124]	; 13844 <__assert_fail@plt+0x2368>
   137c4:	strdne	r2, [r1]
   137c8:	b	119c0 <__assert_fail@plt+0x4e4>
   137cc:	orrs	r3, r2, r3
   137d0:	ldrne	r3, [pc, #116]	; 1384c <__assert_fail@plt+0x2370>
   137d4:	strdne	r0, [r3]
   137d8:	b	1192c <__assert_fail@plt+0x450>
   137dc:	strb	r3, [r4, #300]	; 0x12c
   137e0:	ldr	r3, [pc, #104]	; 13850 <__assert_fail@plt+0x2374>
   137e4:	b	11a20 <__assert_fail@plt+0x544>
   137e8:	mov	r2, r6
   137ec:	asr	r3, r6, #31
   137f0:	strd	r2, [sp, #40]	; 0x28
   137f4:	b	12aac <__assert_fail@plt+0x15d0>
   137f8:	asr	r3, r6, #31
   137fc:	mov	r2, r6
   13800:	mvn	r0, #0
   13804:	mvn	r1, #-2147483648	; 0x80000000
   13808:	strd	r2, [sp, #40]	; 0x28
   1380c:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   13810:	cmp	r8, r0
   13814:	sbcs	r3, r9, r1
   13818:	movlt	r3, #1
   1381c:	movge	r3, #0
   13820:	b	11cf0 <__assert_fail@plt+0x814>
   13824:	andeq	r0, r2, ip, ror r7
   13828:	andeq	r3, r1, r0, lsl #19
   1382c:	andeq	r0, r2, r0, lsl r6
   13830:	ldrdeq	r0, [r2], -r4
   13834:	andeq	r2, r3, r8, lsr r4
   13838:			; <UNDEFINED> instruction: 0x000207b0
   1383c:	andeq	r0, r2, r0, lsr #15
   13840:	andeq	r0, r2, r4, asr #15
   13844:	andeq	r2, r3, r8, lsr #8
   13848:	andeq	r2, r3, r0, asr r1
   1384c:	andeq	r2, r3, r8, lsl r4
   13850:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   13854:	mov	fp, #0
   13858:	mov	lr, #0
   1385c:	pop	{r1}		; (ldr r1, [sp], #4)
   13860:	mov	r2, sp
   13864:	push	{r2}		; (str r2, [sp, #-4]!)
   13868:	push	{r0}		; (str r0, [sp, #-4]!)
   1386c:	ldr	ip, [pc, #16]	; 13884 <__assert_fail@plt+0x23a8>
   13870:	push	{ip}		; (str ip, [sp, #-4]!)
   13874:	ldr	r0, [pc, #12]	; 13888 <__assert_fail@plt+0x23ac>
   13878:	ldr	r3, [pc, #12]	; 1388c <__assert_fail@plt+0x23b0>
   1387c:	bl	11320 <__libc_start_main@plt>
   13880:	bl	114ac <abort@plt>
   13884:	andeq	lr, r1, r0, lsr #29
   13888:	andeq	r1, r1, r0, asr #11
   1388c:	andeq	lr, r1, r0, asr #28
   13890:	ldr	r3, [pc, #20]	; 138ac <__assert_fail@plt+0x23d0>
   13894:	ldr	r2, [pc, #20]	; 138b0 <__assert_fail@plt+0x23d4>
   13898:	add	r3, pc, r3
   1389c:	ldr	r2, [r3, r2]
   138a0:	cmp	r2, #0
   138a4:	bxeq	lr
   138a8:	b	11350 <__gmon_start__@plt>
   138ac:	andeq	lr, r1, r0, ror #14
   138b0:	andeq	r0, r0, r0, asr #2
   138b4:	ldr	r3, [pc, #28]	; 138d8 <__assert_fail@plt+0x23fc>
   138b8:	ldr	r0, [pc, #28]	; 138dc <__assert_fail@plt+0x2400>
   138bc:	sub	r3, r3, r0
   138c0:	cmp	r3, #6
   138c4:	bxls	lr
   138c8:	ldr	r3, [pc, #16]	; 138e0 <__assert_fail@plt+0x2404>
   138cc:	cmp	r3, #0
   138d0:	bxeq	lr
   138d4:	bx	r3
   138d8:	andeq	r2, r3, r7, asr #3
   138dc:	andeq	r2, r3, r4, asr #3
   138e0:	andeq	r0, r0, r0
   138e4:	ldr	r1, [pc, #36]	; 13910 <__assert_fail@plt+0x2434>
   138e8:	ldr	r0, [pc, #36]	; 13914 <__assert_fail@plt+0x2438>
   138ec:	sub	r1, r1, r0
   138f0:	asr	r1, r1, #2
   138f4:	add	r1, r1, r1, lsr #31
   138f8:	asrs	r1, r1, #1
   138fc:	bxeq	lr
   13900:	ldr	r3, [pc, #16]	; 13918 <__assert_fail@plt+0x243c>
   13904:	cmp	r3, #0
   13908:	bxeq	lr
   1390c:	bx	r3
   13910:	andeq	r2, r3, r4, asr #3
   13914:	andeq	r2, r3, r4, asr #3
   13918:	andeq	r0, r0, r0
   1391c:	push	{r4, lr}
   13920:	ldr	r4, [pc, #24]	; 13940 <__assert_fail@plt+0x2464>
   13924:	ldrb	r3, [r4]
   13928:	cmp	r3, #0
   1392c:	popne	{r4, pc}
   13930:	bl	138b4 <__assert_fail@plt+0x23d8>
   13934:	mov	r3, #1
   13938:	strb	r3, [r4]
   1393c:	pop	{r4, pc}
   13940:	andeq	r2, r3, r4, ror #3
   13944:	ldr	r0, [pc, #40]	; 13974 <__assert_fail@plt+0x2498>
   13948:	ldr	r3, [r0]
   1394c:	cmp	r3, #0
   13950:	bne	13958 <__assert_fail@plt+0x247c>
   13954:	b	138e4 <__assert_fail@plt+0x2408>
   13958:	ldr	r3, [pc, #24]	; 13978 <__assert_fail@plt+0x249c>
   1395c:	cmp	r3, #0
   13960:	beq	13954 <__assert_fail@plt+0x2478>
   13964:	push	{r4, lr}
   13968:	blx	r3
   1396c:	pop	{r4, lr}
   13970:	b	138e4 <__assert_fail@plt+0x2408>
   13974:	andeq	r1, r3, r4, lsl pc
	...
   13980:	ldr	r3, [pc, #4]	; 1398c <__assert_fail@plt+0x24b0>
   13984:	str	r0, [r3]
   13988:	bx	lr
   1398c:	andeq	r2, r3, r8, ror #3
   13990:	ldr	r2, [pc, #12]	; 139a4 <__assert_fail@plt+0x24c8>
   13994:	ldr	r3, [r2, #4]
   13998:	add	r3, r3, #1
   1399c:	str	r3, [r2, #4]
   139a0:	bx	lr
   139a4:	andeq	r2, r3, r8, ror #3
   139a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139ac:	vpush	{d8}
   139b0:	mov	r6, r0
   139b4:	mov	r7, r1
   139b8:	orrs	r3, r6, r7
   139bc:	sub	sp, sp, #2016	; 0x7e0
   139c0:	sub	sp, sp, #12
   139c4:	movne	r8, r0
   139c8:	movne	r9, r1
   139cc:	beq	13c28 <__assert_fail@plt+0x274c>
   139d0:	ldr	sl, [pc, #872]	; 13d40 <__assert_fail@plt+0x2864>
   139d4:	mov	r4, #1
   139d8:	mov	r5, #0
   139dc:	add	r3, sp, #60	; 0x3c
   139e0:	mov	r2, r3
   139e4:	ldrd	r0, [sl, #8]
   139e8:	str	r3, [sp, #28]
   139ec:	strd	r4, [sp, #8]
   139f0:	strd	r4, [sp]
   139f4:	ldr	r3, [pc, #840]	; 13d44 <__assert_fail@plt+0x2868>
   139f8:	bl	16818 <__assert_fail@plt+0x533c>
   139fc:	add	r3, sp, #712	; 0x2c8
   13a00:	strd	r4, [sp, #8]
   13a04:	strd	r4, [sp]
   13a08:	add	r2, r3, #2
   13a0c:	ldr	r3, [pc, #820]	; 13d48 <__assert_fail@plt+0x286c>
   13a10:	mov	fp, r0
   13a14:	ldrd	r0, [sl, #8]
   13a18:	bl	16818 <__assert_fail@plt+0x533c>
   13a1c:	mov	r4, r0
   13a20:	ldrd	r0, [sl, #16]
   13a24:	cmp	r0, r8
   13a28:	sbcs	r3, r1, r9
   13a2c:	bge	13ad0 <__assert_fail@plt+0x25f4>
   13a30:	subs	r8, r8, r0
   13a34:	sbc	r9, r9, r1
   13a38:	mov	r0, r8
   13a3c:	mov	r1, r9
   13a40:	bl	1eb50 <__assert_fail@plt+0xd674>
   13a44:	vldr	d7, [pc, #732]	; 13d28 <__assert_fail@plt+0x284c>
   13a48:	ldr	r3, [sp, #28]
   13a4c:	strd	r8, [sp, #8]
   13a50:	add	r9, pc, #728	; 0x2d8
   13a54:	ldrd	r8, [r9]
   13a58:	add	r2, r3, #1296	; 0x510
   13a5c:	add	r2, r2, #12
   13a60:	ldr	r3, [pc, #732]	; 13d44 <__assert_fail@plt+0x2868>
   13a64:	strd	r8, [sp]
   13a68:	vmov	d6, r0, r1
   13a6c:	ldrd	r0, [sl, #8]
   13a70:	vdiv.f64	d8, d6, d7
   13a74:	bl	16818 <__assert_fail@plt+0x533c>
   13a78:	mov	r8, r0
   13a7c:	bl	11380 <strlen@plt>
   13a80:	ldr	r3, [pc, #708]	; 13d4c <__assert_fail@plt+0x2870>
   13a84:	ldrh	r1, [r3]
   13a88:	ldrb	r3, [r3, #2]
   13a8c:	add	r2, r8, r0
   13a90:	strh	r1, [r8, r0]
   13a94:	strb	r3, [r2, #2]
   13a98:	orrs	r3, r6, r7
   13a9c:	beq	13b1c <__assert_fail@plt+0x2640>
   13aa0:	ldr	r5, [pc, #680]	; 13d50 <__assert_fail@plt+0x2874>
   13aa4:	ldr	r0, [r5]
   13aa8:	ldr	r3, [r0, #20]
   13aac:	ldr	r2, [r0, #24]
   13ab0:	cmp	r3, r2
   13ab4:	bcs	13d18 <__assert_fail@plt+0x283c>
   13ab8:	add	r2, r3, #1
   13abc:	mov	r1, #13
   13ac0:	str	r2, [r0, #20]
   13ac4:	ldr	r2, [pc, #648]	; 13d54 <__assert_fail@plt+0x2878>
   13ac8:	strb	r1, [r3]
   13acc:	b	13b24 <__assert_fail@plt+0x2648>
   13ad0:	mov	r2, #5
   13ad4:	ldr	r1, [pc, #636]	; 13d58 <__assert_fail@plt+0x287c>
   13ad8:	mov	r0, #0
   13adc:	bl	11230 <dcgettext@plt>
   13ae0:	ldr	r3, [sp, #28]
   13ae4:	ldr	r2, [pc, #624]	; 13d5c <__assert_fail@plt+0x2880>
   13ae8:	add	ip, r3, #1296	; 0x510
   13aec:	ldr	r3, [pc, #620]	; 13d60 <__assert_fail@plt+0x2884>
   13af0:	add	ip, ip, #12
   13af4:	str	r2, [sp]
   13af8:	mov	r1, r3
   13afc:	mov	r2, #1
   13b00:	mov	r8, ip
   13b04:	vldr	d8, [pc, #556]	; 13d38 <__assert_fail@plt+0x285c>
   13b08:	str	r0, [sp, #4]
   13b0c:	mov	r0, ip
   13b10:	bl	114d0 <__snprintf_chk@plt>
   13b14:	orrs	r3, r6, r7
   13b18:	bne	13aa0 <__assert_fail@plt+0x25c4>
   13b1c:	ldr	r2, [pc, #576]	; 13d64 <__assert_fail@plt+0x2888>
   13b20:	ldr	r5, [pc, #552]	; 13d50 <__assert_fail@plt+0x2874>
   13b24:	add	r3, sp, #36	; 0x24
   13b28:	str	r3, [sp, #28]
   13b2c:	mov	r3, #24
   13b30:	mov	r1, r3
   13b34:	str	r2, [sp]
   13b38:	vstr	d8, [sp, #8]
   13b3c:	mov	r2, #1
   13b40:	ldr	r0, [sp, #28]
   13b44:	bl	114d0 <__snprintf_chk@plt>
   13b48:	mov	r0, fp
   13b4c:	bl	11380 <strlen@plt>
   13b50:	add	r0, fp, r0
   13b54:	ldrb	r3, [r0, #-2]
   13b58:	cmp	r3, #32
   13b5c:	beq	13c38 <__assert_fail@plt+0x275c>
   13b60:	mov	r0, r4
   13b64:	bl	11380 <strlen@plt>
   13b68:	mov	r2, #5
   13b6c:	add	r0, r4, r0
   13b70:	ldrb	r3, [r0, #-2]
   13b74:	cmp	r3, #32
   13b78:	beq	13cb8 <__assert_fail@plt+0x27dc>
   13b7c:	ldr	r1, [pc, #484]	; 13d68 <__assert_fail@plt+0x288c>
   13b80:	mov	r0, #0
   13b84:	ldr	r9, [r5]
   13b88:	bl	11230 <dcgettext@plt>
   13b8c:	ldrd	r2, [sl, #8]
   13b90:	ldr	r1, [sp, #28]
   13b94:	str	r4, [sp, #12]
   13b98:	str	r1, [sp, #16]
   13b9c:	strd	r2, [sp]
   13ba0:	str	r8, [sp, #20]
   13ba4:	str	fp, [sp, #8]
   13ba8:	mov	r1, #1
   13bac:	mov	r2, r0
   13bb0:	mov	r0, r9
   13bb4:	bl	11404 <__fprintf_chk@plt>
   13bb8:	mov	r4, r0
   13bbc:	orrs	r3, r6, r7
   13bc0:	beq	13bf8 <__assert_fail@plt+0x271c>
   13bc4:	cmp	r4, #0
   13bc8:	blt	13bd8 <__assert_fail@plt+0x26fc>
   13bcc:	ldr	r3, [sl, #24]
   13bd0:	cmp	r4, r3
   13bd4:	blt	13cf8 <__assert_fail@plt+0x281c>
   13bd8:	str	r4, [sl, #24]
   13bdc:	ldr	r3, [pc, #392]	; 13d6c <__assert_fail@plt+0x2890>
   13be0:	ldrd	r0, [sl, #8]
   13be4:	strd	r0, [r3]
   13be8:	add	sp, sp, #2016	; 0x7e0
   13bec:	add	sp, sp, #12
   13bf0:	vpop	{d8}
   13bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bf8:	ldr	r0, [r5]
   13bfc:	ldr	r3, [r0, #20]
   13c00:	ldr	r2, [r0, #24]
   13c04:	cmp	r3, r2
   13c08:	addcc	r1, r3, #1
   13c0c:	movcc	r2, #10
   13c10:	strcc	r1, [r0, #20]
   13c14:	strbcc	r2, [r3]
   13c18:	bcc	13bdc <__assert_fail@plt+0x2700>
   13c1c:	mov	r1, #10
   13c20:	bl	11434 <__overflow@plt>
   13c24:	b	13bdc <__assert_fail@plt+0x2700>
   13c28:	bl	1679c <__assert_fail@plt+0x52c0>
   13c2c:	mov	r8, r0
   13c30:	mov	r9, r1
   13c34:	b	139d0 <__assert_fail@plt+0x24f4>
   13c38:	ldr	r9, [sl, #12]
   13c3c:	ldr	r4, [sl, #8]
   13c40:	mov	r3, #0
   13c44:	cmp	r9, r3
   13c48:	mvn	r2, #0
   13c4c:	cmpeq	r4, r2
   13c50:	mov	r0, r4
   13c54:	mov	r1, r9
   13c58:	ldr	fp, [r5]
   13c5c:	movls	r3, r4
   13c60:	bls	13c78 <__assert_fail@plt+0x279c>
   13c64:	ldr	r2, [pc, #260]	; 13d70 <__assert_fail@plt+0x2894>
   13c68:	mov	r3, #0
   13c6c:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   13c70:	add	r3, r2, #999424	; 0xf4000
   13c74:	add	r3, r3, #576	; 0x240
   13c78:	mov	r2, #5
   13c7c:	str	r2, [sp]
   13c80:	ldr	r1, [pc, #236]	; 13d74 <__assert_fail@plt+0x2898>
   13c84:	ldr	r2, [pc, #236]	; 13d78 <__assert_fail@plt+0x289c>
   13c88:	mov	r0, #0
   13c8c:	bl	114c4 <dcngettext@plt>
   13c90:	ldr	r3, [sp, #28]
   13c94:	stm	sp, {r4, r9}
   13c98:	str	r8, [sp, #12]
   13c9c:	str	r3, [sp, #8]
   13ca0:	mov	r1, #1
   13ca4:	mov	r2, r0
   13ca8:	mov	r0, fp
   13cac:	bl	11404 <__fprintf_chk@plt>
   13cb0:	mov	r4, r0
   13cb4:	b	13bbc <__assert_fail@plt+0x26e0>
   13cb8:	ldr	r1, [pc, #188]	; 13d7c <__assert_fail@plt+0x28a0>
   13cbc:	mov	r0, #0
   13cc0:	ldr	r4, [r5]
   13cc4:	bl	11230 <dcgettext@plt>
   13cc8:	ldrd	r2, [sl, #8]
   13ccc:	ldr	r1, [sp, #28]
   13cd0:	str	r8, [sp, #16]
   13cd4:	str	r1, [sp, #12]
   13cd8:	strd	r2, [sp]
   13cdc:	str	fp, [sp, #8]
   13ce0:	mov	r1, #1
   13ce4:	mov	r2, r0
   13ce8:	mov	r0, r4
   13cec:	bl	11404 <__fprintf_chk@plt>
   13cf0:	mov	r4, r0
   13cf4:	b	13bbc <__assert_fail@plt+0x26e0>
   13cf8:	ldr	r2, [pc, #128]	; 13d80 <__assert_fail@plt+0x28a4>
   13cfc:	ldr	r0, [r5]
   13d00:	sub	r3, r3, r4
   13d04:	str	r2, [sp]
   13d08:	mov	r1, #1
   13d0c:	ldr	r2, [pc, #112]	; 13d84 <__assert_fail@plt+0x28a8>
   13d10:	bl	11404 <__fprintf_chk@plt>
   13d14:	b	13bd8 <__assert_fail@plt+0x26fc>
   13d18:	mov	r1, #13
   13d1c:	bl	11434 <__overflow@plt>
   13d20:	ldr	r2, [pc, #44]	; 13d54 <__assert_fail@plt+0x2878>
   13d24:	b	13b24 <__assert_fail@plt+0x2648>
   13d28:	andeq	r0, r0, r0
   13d2c:	bicmi	ip, sp, r5, ror #26
   13d30:	blcc	fe6c6538 <opterr@@GLIBC_2.4+0xfe694358>
	...
   13d40:	andeq	r2, r3, r8, ror #3
   13d44:	ldrdeq	r0, [r0], -r1
   13d48:	strdeq	r0, [r0], -r1
   13d4c:	andeq	pc, r1, r0, lsr #9
   13d50:	ldrdeq	r2, [r3], -r8
   13d54:	andeq	pc, r1, r0, lsl #9
   13d58:	muleq	r1, r0, r4
   13d5c:	muleq	r1, ip, r4
   13d60:	andeq	r0, r0, lr, lsl #5
   13d64:	andeq	pc, r1, r8, lsl #9
   13d68:	strdeq	pc, [r1], -ip
   13d6c:	andeq	r2, r3, r0, asr r1
   13d70:	andeq	r4, pc, r0, asr #4
   13d74:	andeq	pc, r1, r0, asr #9
   13d78:	andeq	pc, r1, r4, lsr #9
   13d7c:	ldrdeq	pc, [r1], -ip
   13d80:	andeq	r0, r2, r0, ror #3
   13d84:	andeq	pc, r1, r0, lsr #10
   13d88:	push	{r4, r5, r6, r7, r8, r9, lr}
   13d8c:	sub	sp, sp, #36	; 0x24
   13d90:	ldr	r7, [pc, #304]	; 13ec8 <__assert_fail@plt+0x29ec>
   13d94:	ldr	r3, [r7, #8]
   13d98:	cmp	r3, #1
   13d9c:	beq	13eb4 <__assert_fail@plt+0x29d8>
   13da0:	ldr	r6, [pc, #292]	; 13ecc <__assert_fail@plt+0x29f0>
   13da4:	ldr	r8, [pc, #292]	; 13ed0 <__assert_fail@plt+0x29f4>
   13da8:	ldr	r3, [r6, #24]
   13dac:	cmp	r3, #0
   13db0:	ble	13de0 <__assert_fail@plt+0x2904>
   13db4:	ldr	r0, [r8]
   13db8:	ldr	r3, [r0, #20]
   13dbc:	ldr	r2, [r0, #24]
   13dc0:	cmp	r3, r2
   13dc4:	addcc	r1, r3, #1
   13dc8:	movcc	r2, #10
   13dcc:	strcc	r1, [r0, #20]
   13dd0:	strbcc	r2, [r3]
   13dd4:	bcs	13ebc <__assert_fail@plt+0x29e0>
   13dd8:	mov	r3, #0
   13ddc:	str	r3, [r6, #24]
   13de0:	mov	r2, #5
   13de4:	ldr	r1, [pc, #232]	; 13ed4 <__assert_fail@plt+0x29f8>
   13de8:	mov	r0, #0
   13dec:	ldr	r9, [r8]
   13df0:	bl	11230 <dcgettext@plt>
   13df4:	ldrd	r4, [r6, #32]
   13df8:	ldrd	r2, [r6, #40]	; 0x28
   13dfc:	mov	r1, #1
   13e00:	strd	r4, [sp, #24]
   13e04:	ldrd	r4, [r6, #48]	; 0x30
   13e08:	strd	r2, [sp, #16]
   13e0c:	ldrd	r2, [r6, #56]	; 0x38
   13e10:	strd	r4, [sp, #8]
   13e14:	strd	r2, [sp]
   13e18:	mov	r2, r0
   13e1c:	mov	r0, r9
   13e20:	bl	11404 <__fprintf_chk@plt>
   13e24:	ldrd	r4, [r6, #64]	; 0x40
   13e28:	orrs	r3, r4, r5
   13e2c:	beq	13e94 <__assert_fail@plt+0x29b8>
   13e30:	mov	r3, #0
   13e34:	cmp	r5, r3
   13e38:	mvn	r2, #0
   13e3c:	cmpeq	r4, r2
   13e40:	ldr	r6, [r8]
   13e44:	movls	r3, r4
   13e48:	bls	13e68 <__assert_fail@plt+0x298c>
   13e4c:	ldr	r2, [pc, #132]	; 13ed8 <__assert_fail@plt+0x29fc>
   13e50:	mov	r3, #0
   13e54:	mov	r0, r4
   13e58:	mov	r1, r5
   13e5c:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   13e60:	add	r3, r2, #999424	; 0xf4000
   13e64:	add	r3, r3, #576	; 0x240
   13e68:	mov	r2, #5
   13e6c:	str	r2, [sp]
   13e70:	ldr	r1, [pc, #100]	; 13edc <__assert_fail@plt+0x2a00>
   13e74:	ldr	r2, [pc, #100]	; 13ee0 <__assert_fail@plt+0x2a04>
   13e78:	mov	r0, #0
   13e7c:	bl	114c4 <dcngettext@plt>
   13e80:	strd	r4, [sp]
   13e84:	mov	r1, #1
   13e88:	mov	r2, r0
   13e8c:	mov	r0, r6
   13e90:	bl	11404 <__fprintf_chk@plt>
   13e94:	ldr	r3, [r7, #8]
   13e98:	cmp	r3, #2
   13e9c:	beq	13eb4 <__assert_fail@plt+0x29d8>
   13ea0:	mov	r0, #0
   13ea4:	mov	r1, #0
   13ea8:	add	sp, sp, #36	; 0x24
   13eac:	pop	{r4, r5, r6, r7, r8, r9, lr}
   13eb0:	b	139a8 <__assert_fail@plt+0x24cc>
   13eb4:	add	sp, sp, #36	; 0x24
   13eb8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13ebc:	mov	r1, #10
   13ec0:	bl	11434 <__overflow@plt>
   13ec4:	b	13dd8 <__assert_fail@plt+0x28fc>
   13ec8:	andeq	r2, r3, r0, asr r1
   13ecc:	andeq	r2, r3, r8, ror #3
   13ed0:	ldrdeq	r2, [r3], -r8
   13ed4:	andeq	pc, r1, r4, lsr #10
   13ed8:	andeq	r4, pc, r0, asr #4
   13edc:	andeq	pc, r1, r8, ror #10
   13ee0:	andeq	pc, r1, r0, asr r5	; <UNPREDICTABLE>
   13ee4:	push	{r2, r3}
   13ee8:	push	{r4, r5, r6, lr}
   13eec:	mov	r5, r0
   13ef0:	ldr	r4, [pc, #120]	; 13f70 <__assert_fail@plt+0x2a94>
   13ef4:	sub	sp, sp, #8
   13ef8:	mov	r6, r1
   13efc:	ldr	r3, [r4, #24]
   13f00:	cmp	r3, #0
   13f04:	ble	13f38 <__assert_fail@plt+0x2a5c>
   13f08:	ldr	r3, [pc, #100]	; 13f74 <__assert_fail@plt+0x2a98>
   13f0c:	ldr	r0, [r3]
   13f10:	ldr	r3, [r0, #20]
   13f14:	ldr	r2, [r0, #24]
   13f18:	cmp	r3, r2
   13f1c:	addcc	r1, r3, #1
   13f20:	movcc	r2, #10
   13f24:	strcc	r1, [r0, #20]
   13f28:	strbcc	r2, [r3]
   13f2c:	bcs	13f64 <__assert_fail@plt+0x2a88>
   13f30:	mov	r3, #0
   13f34:	str	r3, [r4, #24]
   13f38:	add	ip, sp, #28
   13f3c:	mov	r1, r6
   13f40:	mov	r0, r5
   13f44:	mov	r3, ip
   13f48:	ldr	r2, [sp, #24]
   13f4c:	str	ip, [sp, #4]
   13f50:	bl	1b9d4 <__assert_fail@plt+0xa4f8>
   13f54:	add	sp, sp, #8
   13f58:	pop	{r4, r5, r6, lr}
   13f5c:	add	sp, sp, #8
   13f60:	bx	lr
   13f64:	mov	r1, #10
   13f68:	bl	11434 <__overflow@plt>
   13f6c:	b	13f30 <__assert_fail@plt+0x2a54>
   13f70:	andeq	r2, r3, r8, ror #3
   13f74:	ldrdeq	r2, [r3], -r8
   13f78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f7c:	subs	r5, r0, #0
   13f80:	ldr	r4, [pc, #816]	; 142b8 <__assert_fail@plt+0x2ddc>
   13f84:	mov	fp, r3
   13f88:	sub	sp, sp, #36	; 0x24
   13f8c:	ldrbeq	r3, [r4, #88]	; 0x58
   13f90:	ldrbne	r3, [r4, #89]	; 0x59
   13f94:	mov	sl, r2
   13f98:	addeq	ip, r4, #72	; 0x48
   13f9c:	addne	ip, r4, #80	; 0x50
   13fa0:	str	r3, [sp, #16]
   13fa4:	orrs	r3, sl, fp
   13fa8:	beq	1402c <__assert_fail@plt+0x2b50>
   13fac:	cmp	r2, #0
   13fb0:	sbcs	r3, fp, #0
   13fb4:	ldrd	r0, [ip]
   13fb8:	blt	141b8 <__assert_fail@plt+0x2cdc>
   13fbc:	cmp	r0, #0
   13fc0:	sbcs	r3, r1, #0
   13fc4:	blt	14158 <__assert_fail@plt+0x2c7c>
   13fc8:	mvn	r2, #0
   13fcc:	subs	r2, r2, sl
   13fd0:	mvn	r3, #-2147483648	; 0x80000000
   13fd4:	sbc	r3, r3, fp
   13fd8:	cmp	r2, r0
   13fdc:	sbcs	r3, r3, r1
   13fe0:	movlt	r3, #1
   13fe4:	movge	r3, #0
   13fe8:	cmp	r3, #0
   13fec:	beq	14158 <__assert_fail@plt+0x2c7c>
   13ff0:	ldr	r2, [pc, #708]	; 142bc <__assert_fail@plt+0x2de0>
   13ff4:	ldr	r8, [pc, #708]	; 142c0 <__assert_fail@plt+0x2de4>
   13ff8:	mov	r3, #0
   13ffc:	mvn	r9, #-2147483648	; 0x80000000
   14000:	strd	r2, [ip]
   14004:	cmp	r5, #0
   14008:	bne	141dc <__assert_fail@plt+0x2d00>
   1400c:	ldrd	r2, [r4, #72]	; 0x48
   14010:	str	r5, [sp, #20]
   14014:	strd	r2, [sp, #24]
   14018:	ldrb	r6, [r4, #90]	; 0x5a
   1401c:	cmp	r6, #0
   14020:	beq	141f4 <__assert_fail@plt+0x2d18>
   14024:	ldrd	r0, [r4, #96]	; 0x60
   14028:	b	140bc <__assert_fail@plt+0x2be0>
   1402c:	ldrd	r8, [ip]
   14030:	mov	ip, #0
   14034:	orrs	r3, r8, r9
   14038:	moveq	r3, #1
   1403c:	movne	r3, #0
   14040:	str	r3, [sp, #20]
   14044:	orrs	r3, r8, r9
   14048:	bne	14060 <__assert_fail@plt+0x2b84>
   1404c:	ldr	r3, [sp, #16]
   14050:	cmp	r3, #0
   14054:	movne	r8, #0
   14058:	movne	r9, #0
   1405c:	beq	141a8 <__assert_fail@plt+0x2ccc>
   14060:	mov	r2, #0
   14064:	mov	r3, #0
   14068:	cmp	r5, #0
   1406c:	strd	r2, [sp, #24]
   14070:	beq	14018 <__assert_fail@plt+0x2b3c>
   14074:	ldr	r7, [pc, #584]	; 142c4 <__assert_fail@plt+0x2de8>
   14078:	mvn	r3, #0
   1407c:	mvn	r2, #0
   14080:	ldrd	r0, [r7, #16]
   14084:	cmp	r1, r3
   14088:	cmpeq	r0, r2
   1408c:	beq	1420c <__assert_fail@plt+0x2d30>
   14090:	cmp	r0, #0
   14094:	sbcs	r3, r1, #0
   14098:	blt	14260 <__assert_fail@plt+0x2d84>
   1409c:	cmp	ip, #0
   140a0:	beq	140c8 <__assert_fail@plt+0x2bec>
   140a4:	ldrd	r2, [sp, #24]
   140a8:	adds	r2, r2, r8
   140ac:	adc	r3, r3, r9
   140b0:	adds	r0, r0, r2
   140b4:	adc	r1, r1, r3
   140b8:	strd	r0, [r7, #16]
   140bc:	cmp	r0, #0
   140c0:	sbcs	r3, r1, #0
   140c4:	blt	1420c <__assert_fail@plt+0x2d30>
   140c8:	orrs	r3, sl, fp
   140cc:	moveq	r3, #1
   140d0:	movne	r3, #0
   140d4:	orrs	r2, r8, r9
   140d8:	moveq	r3, #0
   140dc:	andne	r3, r3, #1
   140e0:	cmp	r3, #0
   140e4:	beq	14214 <__assert_fail@plt+0x2d38>
   140e8:	ldr	r3, [sp, #16]
   140ec:	cmp	r3, #0
   140f0:	beq	14240 <__assert_fail@plt+0x2d64>
   140f4:	subs	r0, r0, r8
   140f8:	sbc	r1, r1, r9
   140fc:	mov	r6, r0
   14100:	mov	r7, r1
   14104:	mov	r8, #0
   14108:	mov	r9, #0
   1410c:	ldr	r2, [r4, #104]	; 0x68
   14110:	mov	r0, r6
   14114:	mov	r1, r7
   14118:	asr	r3, r2, #31
   1411c:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   14120:	subs	r6, r6, r2
   14124:	sbc	r7, r7, r3
   14128:	mov	r1, #4
   1412c:	mov	r2, r6
   14130:	strd	r8, [sp]
   14134:	mov	r3, r7
   14138:	mov	r0, r5
   1413c:	str	r1, [sp, #8]
   14140:	bl	11188 <posix_fadvise64@plt>
   14144:	adds	r6, r0, #1
   14148:	movne	r6, #1
   1414c:	mov	r0, r6
   14150:	add	sp, sp, #36	; 0x24
   14154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14158:	adds	r0, r0, sl
   1415c:	adc	r1, r1, fp
   14160:	ldr	r8, [pc, #340]	; 142bc <__assert_fail@plt+0x2de0>
   14164:	asr	r6, r1, #31
   14168:	eor	r2, r0, r6
   1416c:	asr	r7, r6, #31
   14170:	subs	r2, r2, r6
   14174:	eor	r3, r1, r7
   14178:	sbc	r3, r3, r7
   1417c:	mov	r9, #0
   14180:	and	r2, r2, r8
   14184:	and	r3, r3, r9
   14188:	eor	r2, r2, r6
   1418c:	subs	r2, r2, r6
   14190:	eor	r3, r3, r7
   14194:	sbc	r3, r3, r7
   14198:	cmp	r2, r0
   1419c:	sbcs	lr, r3, r1
   141a0:	strd	r2, [ip]
   141a4:	blt	14280 <__assert_fail@plt+0x2da4>
   141a8:	mov	r6, #1
   141ac:	mov	r0, r6
   141b0:	add	sp, sp, #36	; 0x24
   141b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141b8:	mov	r2, #0
   141bc:	subs	r2, r2, sl
   141c0:	mov	r3, #-2147483648	; 0x80000000
   141c4:	sbc	r3, r3, fp
   141c8:	cmp	r0, r2
   141cc:	sbcs	r3, r1, r3
   141d0:	movlt	r3, #1
   141d4:	movge	r3, #0
   141d8:	b	13fe8 <__assert_fail@plt+0x2b0c>
   141dc:	ldrd	r2, [r4, #80]	; 0x50
   141e0:	mov	ip, #1
   141e4:	strd	r2, [sp, #24]
   141e8:	mov	r3, #0
   141ec:	str	r3, [sp, #20]
   141f0:	b	14074 <__assert_fail@plt+0x2b98>
   141f4:	bl	113a4 <__errno_location@plt>
   141f8:	mov	r3, #29
   141fc:	str	r3, [r0]
   14200:	mov	r0, r6
   14204:	add	sp, sp, #36	; 0x24
   14208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1420c:	mov	r6, #0
   14210:	b	141ac <__assert_fail@plt+0x2cd0>
   14214:	ldrd	r2, [sp, #24]
   14218:	subs	r0, r0, r8
   1421c:	sbc	r1, r1, r9
   14220:	subs	r2, r0, r2
   14224:	sbc	r3, r1, r3
   14228:	mov	r7, r3
   1422c:	ldr	r3, [sp, #20]
   14230:	mov	r6, r2
   14234:	cmp	r3, #0
   14238:	beq	14128 <__assert_fail@plt+0x2c4c>
   1423c:	b	1410c <__assert_fail@plt+0x2c30>
   14240:	ldrd	r2, [sp, #24]
   14244:	subs	r0, r0, r8
   14248:	sbc	r1, r1, r9
   1424c:	subs	r2, r0, r2
   14250:	sbc	r3, r1, r3
   14254:	mov	r6, r2
   14258:	mov	r7, r3
   1425c:	b	14128 <__assert_fail@plt+0x2c4c>
   14260:	mov	r3, #1
   14264:	str	r3, [sp]
   14268:	mov	r2, #0
   1426c:	mov	r3, #0
   14270:	mov	r0, r5
   14274:	bl	112a8 <lseek64@plt>
   14278:	strd	r0, [r7, #16]
   1427c:	b	140bc <__assert_fail@plt+0x2be0>
   14280:	subs	r0, r0, r2
   14284:	sbc	r1, r1, r3
   14288:	mov	r8, r0
   1428c:	mov	r9, r1
   14290:	orrs	r3, r8, r9
   14294:	beq	141a8 <__assert_fail@plt+0x2ccc>
   14298:	orr	r2, sl, r0
   1429c:	orr	r3, fp, r1
   142a0:	orrs	r3, r2, r3
   142a4:	bne	14004 <__assert_fail@plt+0x2b28>
   142a8:	mov	r3, #0
   142ac:	mov	ip, #1
   142b0:	str	r3, [sp, #20]
   142b4:	b	1404c <__assert_fail@plt+0x2b70>
   142b8:	andeq	r2, r3, r8, ror #3
   142bc:	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
   142c0:			; <UNDEFINED> instruction: 0xfffe0000
   142c4:	andeq	r2, r3, r0, asr r1
   142c8:	ldr	r3, [pc, #44]	; 142fc <__assert_fail@plt+0x2e20>
   142cc:	ldrb	r3, [r3, #24]
   142d0:	cmp	r3, #0
   142d4:	bne	142f8 <__assert_fail@plt+0x2e1c>
   142d8:	ldr	r3, [pc, #32]	; 14300 <__assert_fail@plt+0x2e24>
   142dc:	push	{r4, lr}
   142e0:	ldr	r0, [r3]
   142e4:	bl	16244 <__assert_fail@plt+0x4d68>
   142e8:	cmp	r0, #0
   142ec:	popeq	{r4, pc}
   142f0:	mov	r0, #1
   142f4:	bl	111dc <_exit@plt>
   142f8:	b	162e0 <__assert_fail@plt+0x4e04>
   142fc:	andeq	r2, r3, r0, asr r1
   14300:	ldrdeq	r2, [r3], -r8
   14304:	push	{r4, lr}
   14308:	ldr	r4, [pc, #48]	; 14340 <__assert_fail@plt+0x2e64>
   1430c:	ldr	r3, [r4, #112]	; 0x70
   14310:	cmp	r3, #0
   14314:	popne	{r4, pc}
   14318:	ldr	r3, [r4, #116]	; 0x74
   1431c:	ldr	r1, [r4, #108]	; 0x6c
   14320:	ldr	r0, [r4, #104]	; 0x68
   14324:	lsl	r3, r3, #24
   14328:	add	r1, r1, r3, lsr #31
   1432c:	bl	11488 <aligned_alloc@plt>
   14330:	cmp	r0, #0
   14334:	str	r0, [r4, #112]	; 0x70
   14338:	popne	{r4, pc}
   1433c:	bl	114e8 <__assert_fail@plt+0xc>
   14340:	andeq	r2, r3, r8, ror #3
   14344:	push	{r4, lr}
   14348:	ldr	r4, [pc, #64]	; 14390 <__assert_fail@plt+0x2eb4>
   1434c:	ldr	r3, [r4, #124]	; 0x7c
   14350:	cmp	r3, #0
   14354:	popne	{r4, pc}
   14358:	ldr	r3, [r4, #116]	; 0x74
   1435c:	tst	r3, #2048	; 0x800
   14360:	beq	14380 <__assert_fail@plt+0x2ea4>
   14364:	ldr	r1, [r4, #120]	; 0x78
   14368:	ldr	r0, [r4, #104]	; 0x68
   1436c:	bl	11488 <aligned_alloc@plt>
   14370:	cmp	r0, #0
   14374:	str	r0, [r4, #124]	; 0x7c
   14378:	popne	{r4, pc}
   1437c:	bl	11554 <__assert_fail@plt+0x78>
   14380:	bl	14304 <__assert_fail@plt+0x2e28>
   14384:	ldr	r3, [r4, #112]	; 0x70
   14388:	str	r3, [r4, #124]	; 0x7c
   1438c:	pop	{r4, pc}
   14390:	andeq	r2, r3, r8, ror #3
   14394:	push	{r4, r5, r6, r7, r8, r9, lr}
   14398:	sub	sp, sp, #28
   1439c:	add	r3, sp, #24
   143a0:	ldr	r2, [pc, #492]	; 14594 <__assert_fail@plt+0x30b8>
   143a4:	mov	r4, #0
   143a8:	mov	r5, #0
   143ac:	mov	r7, r1
   143b0:	strd	r4, [r3, #-8]!
   143b4:	add	r1, sp, #8
   143b8:	str	r2, [sp]
   143bc:	mov	r2, #10
   143c0:	mov	r8, r0
   143c4:	bl	1cbc8 <__assert_fail@plt+0xb6ec>
   143c8:	bic	r3, r0, #1
   143cc:	cmp	r3, #2
   143d0:	mov	r6, r0
   143d4:	beq	14420 <__assert_fail@plt+0x2f44>
   143d8:	ldrd	r4, [sp, #16]
   143dc:	cmp	r4, #0
   143e0:	sbcs	r3, r5, #0
   143e4:	blt	14400 <__assert_fail@plt+0x2f24>
   143e8:	cmp	r6, #0
   143ec:	strne	r6, [r7]
   143f0:	mov	r0, r4
   143f4:	mov	r1, r5
   143f8:	add	sp, sp, #28
   143fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14400:	orr	r6, r6, #1
   14404:	mvn	r4, #0
   14408:	mvn	r5, #-2147483648	; 0x80000000
   1440c:	mov	r0, r4
   14410:	mov	r1, r5
   14414:	str	r6, [r7]
   14418:	add	sp, sp, #28
   1441c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14420:	ldr	r0, [sp, #8]
   14424:	ldrb	r3, [r0]
   14428:	cmp	r3, #120	; 0x78
   1442c:	bne	143d8 <__assert_fail@plt+0x2efc>
   14430:	add	r1, sp, #24
   14434:	mov	r3, #0
   14438:	str	r3, [r1, #-12]!
   1443c:	add	r0, r0, #1
   14440:	bl	14394 <__assert_fail@plt+0x2eb8>
   14444:	ldr	r9, [sp, #12]
   14448:	bics	r3, r9, #1
   1444c:	strne	r9, [r7]
   14450:	mov	r4, r0
   14454:	mov	r5, r1
   14458:	bne	143f0 <__assert_fail@plt+0x2f14>
   1445c:	cmp	r0, #0
   14460:	sbcs	r3, r1, #0
   14464:	blt	14514 <__assert_fail@plt+0x3038>
   14468:	orrs	r3, r4, r5
   1446c:	beq	14494 <__assert_fail@plt+0x2fb8>
   14470:	mov	r2, r0
   14474:	mov	r3, r1
   14478:	mvn	r0, #0
   1447c:	mvn	r1, #-2147483648	; 0x80000000
   14480:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   14484:	ldrd	r2, [sp, #16]
   14488:	cmp	r1, r3
   1448c:	cmpeq	r0, r2
   14490:	bcc	14558 <__assert_fail@plt+0x307c>
   14494:	ldr	r3, [sp, #20]
   14498:	ldr	r2, [sp, #16]
   1449c:	mul	r3, r4, r3
   144a0:	mla	r3, r2, r5, r3
   144a4:	umull	r4, r5, r2, r4
   144a8:	add	r5, r3, r5
   144ac:	orrs	r3, r4, r5
   144b0:	bne	1456c <__assert_fail@plt+0x3090>
   144b4:	mov	r0, r8
   144b8:	mov	r2, #2
   144bc:	ldr	r1, [pc, #212]	; 14598 <__assert_fail@plt+0x30bc>
   144c0:	bl	11494 <strncmp@plt>
   144c4:	subs	r6, r0, #0
   144c8:	bne	143f0 <__assert_fail@plt+0x2f14>
   144cc:	mov	r2, #5
   144d0:	ldr	r1, [pc, #196]	; 1459c <__assert_fail@plt+0x30c0>
   144d4:	bl	11230 <dcgettext@plt>
   144d8:	ldr	r1, [pc, #184]	; 14598 <__assert_fail@plt+0x30bc>
   144dc:	mov	r7, r0
   144e0:	mov	r0, r6
   144e4:	bl	1b6a0 <__assert_fail@plt+0xa1c4>
   144e8:	ldr	r1, [pc, #176]	; 145a0 <__assert_fail@plt+0x30c4>
   144ec:	mov	r8, r0
   144f0:	mov	r0, #1
   144f4:	bl	1b6a0 <__assert_fail@plt+0xa1c4>
   144f8:	mov	r3, r8
   144fc:	mov	r2, r7
   14500:	mov	r1, r6
   14504:	str	r0, [sp]
   14508:	mov	r0, r6
   1450c:	bl	13ee4 <__assert_fail@plt+0x2a08>
   14510:	b	143f0 <__assert_fail@plt+0x2f14>
   14514:	mvn	r3, #0
   14518:	mvn	r2, #0
   1451c:	cmp	r1, r3
   14520:	cmpeq	r0, r2
   14524:	beq	1457c <__assert_fail@plt+0x30a0>
   14528:	mov	r2, r0
   1452c:	mov	r3, r1
   14530:	mov	r0, #0
   14534:	mov	r1, #-2147483648	; 0x80000000
   14538:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   1453c:	ldrd	r2, [sp, #16]
   14540:	cmp	r1, r3
   14544:	cmpeq	r0, r2
   14548:	movcc	r3, #1
   1454c:	movcs	r3, #0
   14550:	cmp	r3, #0
   14554:	beq	14494 <__assert_fail@plt+0x2fb8>
   14558:	mov	r3, #1
   1455c:	str	r3, [r7]
   14560:	mvn	r4, #0
   14564:	mvn	r5, #-2147483648	; 0x80000000
   14568:	b	143f0 <__assert_fail@plt+0x2f14>
   1456c:	orr	r6, r6, r9
   14570:	tst	r6, #1
   14574:	bne	14558 <__assert_fail@plt+0x307c>
   14578:	b	143f0 <__assert_fail@plt+0x2f14>
   1457c:	ldrd	r2, [sp, #16]
   14580:	cmp	r3, #-2147483648	; 0x80000000
   14584:	cmpeq	r2, #0
   14588:	movhi	r3, #1
   1458c:	movls	r3, #0
   14590:	b	14550 <__assert_fail@plt+0x3074>
   14594:	strdeq	pc, [r1], -r4
   14598:	andeq	pc, r1, r4, lsl #12
   1459c:	andeq	pc, r1, r8, lsl #12
   145a0:	andeq	pc, r1, r8, asr #12
   145a4:	subs	r4, r0, #0
   145a8:	push	{r7, lr}
   145ac:	sub	sp, sp, #56	; 0x38
   145b0:	beq	145ec <__assert_fail@plt+0x3110>
   145b4:	ldr	r3, [pc, #1080]	; 149f4 <__assert_fail@plt+0x3518>
   145b8:	mov	r2, #5
   145bc:	ldr	r1, [pc, #1076]	; 149f8 <__assert_fail@plt+0x351c>
   145c0:	mov	r0, #0
   145c4:	ldr	r5, [r3]
   145c8:	bl	11230 <dcgettext@plt>
   145cc:	ldr	r3, [pc, #1064]	; 149fc <__assert_fail@plt+0x3520>
   145d0:	mov	r1, #1
   145d4:	ldr	r3, [r3]
   145d8:	mov	r2, r0
   145dc:	mov	r0, r5
   145e0:	bl	11404 <__fprintf_chk@plt>
   145e4:	mov	r0, r4
   145e8:	bl	11374 <exit@plt>
   145ec:	mov	r2, #5
   145f0:	ldr	r1, [pc, #1032]	; 14a00 <__assert_fail@plt+0x3524>
   145f4:	bl	11230 <dcgettext@plt>
   145f8:	ldr	r3, [pc, #1020]	; 149fc <__assert_fail@plt+0x3520>
   145fc:	ldr	r6, [pc, #1024]	; 14a04 <__assert_fail@plt+0x3528>
   14600:	ldr	r5, [pc, #1024]	; 14a08 <__assert_fail@plt+0x352c>
   14604:	ldr	r3, [r3]
   14608:	mov	r2, r3
   1460c:	mov	r1, r0
   14610:	mov	r0, #1
   14614:	bl	113e0 <__printf_chk@plt>
   14618:	mov	r2, #5
   1461c:	ldr	r1, [pc, #1000]	; 14a0c <__assert_fail@plt+0x3530>
   14620:	mov	r0, r4
   14624:	bl	11230 <dcgettext@plt>
   14628:	ldr	r1, [r6]
   1462c:	bl	11158 <fputs_unlocked@plt>
   14630:	mov	r2, #5
   14634:	ldr	r1, [pc, #980]	; 14a10 <__assert_fail@plt+0x3534>
   14638:	mov	r0, r4
   1463c:	bl	11230 <dcgettext@plt>
   14640:	ldr	r1, [r6]
   14644:	bl	11158 <fputs_unlocked@plt>
   14648:	mov	r2, #5
   1464c:	ldr	r1, [pc, #960]	; 14a14 <__assert_fail@plt+0x3538>
   14650:	mov	r0, r4
   14654:	bl	11230 <dcgettext@plt>
   14658:	ldr	r1, [r6]
   1465c:	bl	11158 <fputs_unlocked@plt>
   14660:	mov	r2, #5
   14664:	ldr	r1, [pc, #940]	; 14a18 <__assert_fail@plt+0x353c>
   14668:	mov	r0, r4
   1466c:	bl	11230 <dcgettext@plt>
   14670:	ldr	r1, [r6]
   14674:	bl	11158 <fputs_unlocked@plt>
   14678:	mov	r2, #5
   1467c:	ldr	r1, [pc, #920]	; 14a1c <__assert_fail@plt+0x3540>
   14680:	mov	r0, r4
   14684:	bl	11230 <dcgettext@plt>
   14688:	ldr	r1, [r6]
   1468c:	bl	11158 <fputs_unlocked@plt>
   14690:	mov	r2, #5
   14694:	ldr	r1, [pc, #900]	; 14a20 <__assert_fail@plt+0x3544>
   14698:	mov	r0, r4
   1469c:	bl	11230 <dcgettext@plt>
   146a0:	ldr	r1, [r6]
   146a4:	bl	11158 <fputs_unlocked@plt>
   146a8:	mov	r2, #5
   146ac:	ldr	r1, [pc, #880]	; 14a24 <__assert_fail@plt+0x3548>
   146b0:	mov	r0, r4
   146b4:	bl	11230 <dcgettext@plt>
   146b8:	ldr	r1, [r6]
   146bc:	bl	11158 <fputs_unlocked@plt>
   146c0:	mov	r2, #5
   146c4:	ldr	r1, [pc, #860]	; 14a28 <__assert_fail@plt+0x354c>
   146c8:	mov	r0, r4
   146cc:	bl	11230 <dcgettext@plt>
   146d0:	ldr	r1, [r6]
   146d4:	bl	11158 <fputs_unlocked@plt>
   146d8:	mov	r2, #5
   146dc:	ldr	r1, [pc, #840]	; 14a2c <__assert_fail@plt+0x3550>
   146e0:	mov	r0, r4
   146e4:	bl	11230 <dcgettext@plt>
   146e8:	ldr	r1, [r6]
   146ec:	bl	11158 <fputs_unlocked@plt>
   146f0:	mov	r2, #5
   146f4:	ldr	r1, [pc, #820]	; 14a30 <__assert_fail@plt+0x3554>
   146f8:	mov	r0, r4
   146fc:	bl	11230 <dcgettext@plt>
   14700:	ldr	r1, [r6]
   14704:	bl	11158 <fputs_unlocked@plt>
   14708:	mov	r2, #5
   1470c:	ldr	r1, [pc, #800]	; 14a34 <__assert_fail@plt+0x3558>
   14710:	mov	r0, r4
   14714:	bl	11230 <dcgettext@plt>
   14718:	ldr	r1, [r6]
   1471c:	bl	11158 <fputs_unlocked@plt>
   14720:	mov	r2, #5
   14724:	ldr	r1, [pc, #780]	; 14a38 <__assert_fail@plt+0x355c>
   14728:	mov	r0, r4
   1472c:	bl	11230 <dcgettext@plt>
   14730:	ldr	r1, [r6]
   14734:	bl	11158 <fputs_unlocked@plt>
   14738:	mov	r2, #5
   1473c:	ldr	r1, [pc, #760]	; 14a3c <__assert_fail@plt+0x3560>
   14740:	mov	r0, r4
   14744:	bl	11230 <dcgettext@plt>
   14748:	ldr	r1, [r6]
   1474c:	bl	11158 <fputs_unlocked@plt>
   14750:	mov	r2, #5
   14754:	ldr	r1, [pc, #740]	; 14a40 <__assert_fail@plt+0x3564>
   14758:	mov	r0, r4
   1475c:	bl	11230 <dcgettext@plt>
   14760:	ldr	r1, [r6]
   14764:	bl	11158 <fputs_unlocked@plt>
   14768:	mov	r2, #5
   1476c:	ldr	r1, [pc, #720]	; 14a44 <__assert_fail@plt+0x3568>
   14770:	mov	r0, r4
   14774:	bl	11230 <dcgettext@plt>
   14778:	ldr	r1, [r6]
   1477c:	bl	11158 <fputs_unlocked@plt>
   14780:	mov	r2, #5
   14784:	ldr	r1, [pc, #700]	; 14a48 <__assert_fail@plt+0x356c>
   14788:	mov	r0, r4
   1478c:	bl	11230 <dcgettext@plt>
   14790:	ldr	r1, [r6]
   14794:	bl	11158 <fputs_unlocked@plt>
   14798:	mov	r2, #5
   1479c:	ldr	r1, [pc, #680]	; 14a4c <__assert_fail@plt+0x3570>
   147a0:	mov	r0, r4
   147a4:	bl	11230 <dcgettext@plt>
   147a8:	ldr	r1, [r6]
   147ac:	bl	11158 <fputs_unlocked@plt>
   147b0:	mov	r2, #5
   147b4:	ldr	r1, [pc, #660]	; 14a50 <__assert_fail@plt+0x3574>
   147b8:	mov	r0, r4
   147bc:	bl	11230 <dcgettext@plt>
   147c0:	ldr	r1, [r6]
   147c4:	bl	11158 <fputs_unlocked@plt>
   147c8:	mov	r2, #5
   147cc:	ldr	r1, [pc, #640]	; 14a54 <__assert_fail@plt+0x3578>
   147d0:	mov	r0, r4
   147d4:	bl	11230 <dcgettext@plt>
   147d8:	ldr	r1, [r6]
   147dc:	bl	11158 <fputs_unlocked@plt>
   147e0:	mov	r2, #5
   147e4:	ldr	r1, [pc, #620]	; 14a58 <__assert_fail@plt+0x357c>
   147e8:	mov	r0, r4
   147ec:	bl	11230 <dcgettext@plt>
   147f0:	ldr	r2, [pc, #612]	; 14a5c <__assert_fail@plt+0x3580>
   147f4:	mov	r1, r0
   147f8:	mov	r0, #1
   147fc:	bl	113e0 <__printf_chk@plt>
   14800:	mov	r2, #5
   14804:	ldr	r1, [pc, #596]	; 14a60 <__assert_fail@plt+0x3584>
   14808:	mov	r0, r4
   1480c:	bl	11230 <dcgettext@plt>
   14810:	ldr	r1, [r6]
   14814:	bl	11158 <fputs_unlocked@plt>
   14818:	mov	r2, #5
   1481c:	ldr	r1, [pc, #576]	; 14a64 <__assert_fail@plt+0x3588>
   14820:	mov	r0, r4
   14824:	bl	11230 <dcgettext@plt>
   14828:	ldr	r1, [r6]
   1482c:	bl	11158 <fputs_unlocked@plt>
   14830:	ldm	r5!, {r0, r1, r2, r3}
   14834:	mov	lr, sp
   14838:	stmia	lr!, {r0, r1, r2, r3}
   1483c:	ldm	r5!, {r0, r1, r2, r3}
   14840:	ldr	ip, [sp]
   14844:	stmia	lr!, {r0, r1, r2, r3}
   14848:	cmp	ip, #0
   1484c:	ldm	r5!, {r0, r1, r2, r3}
   14850:	stmia	lr!, {r0, r1, r2, r3}
   14854:	ldm	r5, {r0, r1}
   14858:	moveq	r5, sp
   1485c:	stm	lr, {r0, r1}
   14860:	beq	14890 <__assert_fail@plt+0x33b4>
   14864:	ldr	r7, [pc, #508]	; 14a68 <__assert_fail@plt+0x358c>
   14868:	mov	r5, sp
   1486c:	b	1487c <__assert_fail@plt+0x33a0>
   14870:	ldr	ip, [r5, #8]!
   14874:	cmp	ip, #0
   14878:	beq	14890 <__assert_fail@plt+0x33b4>
   1487c:	mov	r1, ip
   14880:	mov	r0, r7
   14884:	bl	1117c <strcmp@plt>
   14888:	cmp	r0, #0
   1488c:	bne	14870 <__assert_fail@plt+0x3394>
   14890:	ldr	r5, [r5, #4]
   14894:	mov	r2, #5
   14898:	cmp	r5, #0
   1489c:	ldr	r1, [pc, #456]	; 14a6c <__assert_fail@plt+0x3590>
   148a0:	beq	14948 <__assert_fail@plt+0x346c>
   148a4:	mov	r0, #0
   148a8:	bl	11230 <dcgettext@plt>
   148ac:	ldr	r3, [pc, #444]	; 14a70 <__assert_fail@plt+0x3594>
   148b0:	ldr	r2, [pc, #444]	; 14a74 <__assert_fail@plt+0x3598>
   148b4:	mov	r1, r0
   148b8:	mov	r0, #1
   148bc:	bl	113e0 <__printf_chk@plt>
   148c0:	mov	r1, #0
   148c4:	mov	r0, #5
   148c8:	bl	11440 <setlocale@plt>
   148cc:	cmp	r0, #0
   148d0:	ldreq	r7, [pc, #400]	; 14a68 <__assert_fail@plt+0x358c>
   148d4:	beq	148f0 <__assert_fail@plt+0x3414>
   148d8:	mov	r2, #3
   148dc:	ldr	r1, [pc, #404]	; 14a78 <__assert_fail@plt+0x359c>
   148e0:	bl	11494 <strncmp@plt>
   148e4:	ldr	r7, [pc, #380]	; 14a68 <__assert_fail@plt+0x358c>
   148e8:	cmp	r0, #0
   148ec:	bne	149d8 <__assert_fail@plt+0x34fc>
   148f0:	mov	r2, #5
   148f4:	ldr	r1, [pc, #384]	; 14a7c <__assert_fail@plt+0x35a0>
   148f8:	mov	r0, #0
   148fc:	bl	11230 <dcgettext@plt>
   14900:	ldr	r3, [pc, #352]	; 14a68 <__assert_fail@plt+0x358c>
   14904:	ldr	r2, [pc, #356]	; 14a70 <__assert_fail@plt+0x3594>
   14908:	mov	r1, r0
   1490c:	mov	r0, #1
   14910:	bl	113e0 <__printf_chk@plt>
   14914:	mov	r2, #5
   14918:	ldr	r1, [pc, #352]	; 14a80 <__assert_fail@plt+0x35a4>
   1491c:	mov	r0, #0
   14920:	bl	11230 <dcgettext@plt>
   14924:	ldr	r2, [pc, #344]	; 14a84 <__assert_fail@plt+0x35a8>
   14928:	cmp	r5, r7
   1492c:	ldr	r3, [pc, #340]	; 14a88 <__assert_fail@plt+0x35ac>
   14930:	movne	r3, r2
   14934:	mov	r1, r0
   14938:	mov	r2, r5
   1493c:	mov	r0, #1
   14940:	bl	113e0 <__printf_chk@plt>
   14944:	b	145e4 <__assert_fail@plt+0x3108>
   14948:	mov	r0, r5
   1494c:	bl	11230 <dcgettext@plt>
   14950:	ldr	r3, [pc, #280]	; 14a70 <__assert_fail@plt+0x3594>
   14954:	ldr	r2, [pc, #280]	; 14a74 <__assert_fail@plt+0x3598>
   14958:	mov	r1, r0
   1495c:	mov	r0, #1
   14960:	bl	113e0 <__printf_chk@plt>
   14964:	mov	r1, r5
   14968:	mov	r0, #5
   1496c:	bl	11440 <setlocale@plt>
   14970:	cmp	r0, #0
   14974:	beq	1498c <__assert_fail@plt+0x34b0>
   14978:	mov	r2, #3
   1497c:	ldr	r1, [pc, #244]	; 14a78 <__assert_fail@plt+0x359c>
   14980:	bl	11494 <strncmp@plt>
   14984:	cmp	r0, #0
   14988:	bne	149d0 <__assert_fail@plt+0x34f4>
   1498c:	mov	r2, #5
   14990:	ldr	r1, [pc, #228]	; 14a7c <__assert_fail@plt+0x35a0>
   14994:	mov	r0, #0
   14998:	bl	11230 <dcgettext@plt>
   1499c:	ldr	r3, [pc, #196]	; 14a68 <__assert_fail@plt+0x358c>
   149a0:	ldr	r2, [pc, #200]	; 14a70 <__assert_fail@plt+0x3594>
   149a4:	mov	r5, r3
   149a8:	mov	r1, r0
   149ac:	mov	r0, #1
   149b0:	bl	113e0 <__printf_chk@plt>
   149b4:	ldr	r1, [pc, #196]	; 14a80 <__assert_fail@plt+0x35a4>
   149b8:	mov	r2, #5
   149bc:	mov	r0, #0
   149c0:	bl	11230 <dcgettext@plt>
   149c4:	ldr	r3, [pc, #188]	; 14a88 <__assert_fail@plt+0x35ac>
   149c8:	mov	r1, r0
   149cc:	b	14938 <__assert_fail@plt+0x345c>
   149d0:	ldr	r7, [pc, #144]	; 14a68 <__assert_fail@plt+0x358c>
   149d4:	mov	r5, r7
   149d8:	mov	r2, #5
   149dc:	ldr	r1, [pc, #168]	; 14a8c <__assert_fail@plt+0x35b0>
   149e0:	mov	r0, #0
   149e4:	bl	11230 <dcgettext@plt>
   149e8:	ldr	r1, [r6]
   149ec:	bl	11158 <fputs_unlocked@plt>
   149f0:	b	148f0 <__assert_fail@plt+0x3414>
   149f4:	ldrdeq	r2, [r3], -r8
   149f8:	andeq	pc, r1, r0, asr r6	; <UNPREDICTABLE>
   149fc:	andeq	r2, r3, r4, asr r4
   14a00:	andeq	pc, r1, r8, ror r6	; <UNPREDICTABLE>
   14a04:	ldrdeq	r2, [r3], -ip
   14a08:	andeq	lr, r1, r8, asr #29
   14a0c:	andeq	pc, r1, r4, lsr #13
   14a10:	andeq	pc, r1, r4, asr #16
   14a14:	andeq	pc, r1, r4, ror #21
   14a18:	andeq	pc, r1, r8, lsl #24
   14a1c:	andeq	pc, r1, r8, asr #28
   14a20:	andeq	pc, r1, r8, ror #30
   14a24:	ldrdeq	pc, [r1], -r4
   14a28:	strdeq	pc, [r1], -ip
   14a2c:	andeq	r0, r2, r4, lsr #32
   14a30:	andeq	r0, r2, r0, asr r0
   14a34:	andeq	r0, r2, r0, lsl #1
   14a38:	strheq	r0, [r2], -ip
   14a3c:	andeq	r0, r2, r0, ror #1
   14a40:	andeq	r0, r2, r8, lsl #2
   14a44:	andeq	r0, r2, r4, asr #2
   14a48:	andeq	r0, r2, r0, lsl #3
   14a4c:	andeq	r0, r2, r4, lsr #3
   14a50:	andeq	r0, r2, r4, ror #3
   14a54:	andeq	r0, r2, r0, lsr #4
   14a58:	andeq	r0, r2, ip, asr r2
   14a5c:	andeq	r0, r2, r4, ror #5
   14a60:	andeq	r0, r2, ip, ror #5
   14a64:	andeq	r0, r2, ip, lsl r3
   14a68:	andeq	pc, r1, ip, asr #12
   14a6c:	andeq	r0, r2, r4, asr r3
   14a70:	andeq	r0, r2, ip, ror #6
   14a74:	muleq	r2, r4, r3
   14a78:	andeq	r0, r2, r4, lsr #7
   14a7c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   14a80:	andeq	r0, r2, ip, lsl #8
   14a84:	andeq	r0, r2, r0, ror #3
   14a88:	andeq	r0, r2, r8, lsr r9
   14a8c:	andeq	r0, r2, r8, lsr #7
   14a90:	push	{r4, r5, r6, r7, r8, lr}
   14a94:	mov	r4, r0
   14a98:	sub	sp, sp, #8
   14a9c:	mov	r7, r2
   14aa0:	sub	r6, r1, #1
   14aa4:	mov	r8, #0
   14aa8:	mov	r5, #44	; 0x2c
   14aac:	mov	r1, r5
   14ab0:	mov	r0, r4
   14ab4:	bl	1138c <strchr@plt>
   14ab8:	mov	lr, r6
   14abc:	mov	r2, lr
   14ac0:	mov	r1, r4
   14ac4:	b	14ad4 <__assert_fail@plt+0x35f8>
   14ac8:	ldrb	ip, [r1], #1
   14acc:	cmp	ip, r3
   14ad0:	bne	14afc <__assert_fail@plt+0x3620>
   14ad4:	ldrb	r3, [r2, #1]!
   14ad8:	cmp	r3, #0
   14adc:	bne	14ac8 <__assert_fail@plt+0x35ec>
   14ae0:	ldrb	r3, [r1]
   14ae4:	cmp	r3, #0
   14ae8:	cmpne	r3, #44	; 0x2c
   14aec:	bne	14afc <__assert_fail@plt+0x3620>
   14af0:	ldr	r3, [lr, #13]
   14af4:	cmp	r3, #0
   14af8:	bne	14b60 <__assert_fail@plt+0x3684>
   14afc:	add	lr, lr, #16
   14b00:	ldrb	r3, [lr, #-15]
   14b04:	cmp	r3, #0
   14b08:	bne	14abc <__assert_fail@plt+0x35e0>
   14b0c:	cmp	r0, #0
   14b10:	beq	14b7c <__assert_fail@plt+0x36a0>
   14b14:	sub	r5, r0, r4
   14b18:	mov	r1, r7
   14b1c:	mov	r2, #5
   14b20:	mov	r0, #0
   14b24:	bl	11230 <dcgettext@plt>
   14b28:	mov	r3, r5
   14b2c:	mov	r2, r4
   14b30:	mov	r1, #8
   14b34:	mov	r6, r0
   14b38:	mov	r0, #0
   14b3c:	bl	19cf0 <__assert_fail@plt+0x8814>
   14b40:	mov	r1, #0
   14b44:	mov	r3, r6
   14b48:	ldr	r2, [pc, #60]	; 14b8c <__assert_fail@plt+0x36b0>
   14b4c:	str	r0, [sp]
   14b50:	mov	r0, r1
   14b54:	bl	13ee4 <__assert_fail@plt+0x2a08>
   14b58:	mov	r0, #1
   14b5c:	bl	145a4 <__assert_fail@plt+0x30c8>
   14b60:	cmp	r0, #0
   14b64:	orr	r8, r8, r3
   14b68:	addne	r4, r0, #1
   14b6c:	bne	14aac <__assert_fail@plt+0x35d0>
   14b70:	mov	r0, r8
   14b74:	add	sp, sp, #8
   14b78:	pop	{r4, r5, r6, r7, r8, pc}
   14b7c:	mov	r0, r4
   14b80:	bl	11380 <strlen@plt>
   14b84:	mov	r5, r0
   14b88:	b	14b18 <__assert_fail@plt+0x363c>
   14b8c:	andeq	r0, r2, r0, asr #8
   14b90:	ldr	r3, [pc, #600]	; 14df0 <__assert_fail@plt+0x3914>
   14b94:	orrs	r2, r0, r1
   14b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b9c:	sub	sp, sp, #20
   14ba0:	ldrb	r2, [r3, #88]	; 0x58
   14ba4:	beq	14cb0 <__assert_fail@plt+0x37d4>
   14ba8:	cmp	r0, #0
   14bac:	sbcs	ip, r1, #0
   14bb0:	ldrd	r8, [r3, #72]	; 0x48
   14bb4:	blt	14d84 <__assert_fail@plt+0x38a8>
   14bb8:	cmp	r8, #0
   14bbc:	sbcs	ip, r9, #0
   14bc0:	blt	14d04 <__assert_fail@plt+0x3828>
   14bc4:	mvn	r6, #0
   14bc8:	subs	r6, r6, r0
   14bcc:	mvn	r7, #-2147483648	; 0x80000000
   14bd0:	sbc	r7, r7, r1
   14bd4:	cmp	r6, r8
   14bd8:	sbcs	ip, r7, r9
   14bdc:	movlt	ip, #1
   14be0:	movge	ip, #0
   14be4:	cmp	ip, #0
   14be8:	beq	14d04 <__assert_fail@plt+0x3828>
   14bec:	ldr	lr, [pc, #512]	; 14df4 <__assert_fail@plt+0x3918>
   14bf0:	mov	ip, #0
   14bf4:	ldr	r4, [pc, #508]	; 14df8 <__assert_fail@plt+0x391c>
   14bf8:	mov	r6, lr
   14bfc:	mov	r7, ip
   14c00:	mvn	r5, #-2147483648	; 0x80000000
   14c04:	str	lr, [r3, #72]	; 0x48
   14c08:	str	ip, [r3, #76]	; 0x4c
   14c0c:	ldrb	r8, [r3, #90]	; 0x5a
   14c10:	cmp	r8, #0
   14c14:	beq	14cec <__assert_fail@plt+0x3810>
   14c18:	ldrd	r8, [r3, #96]	; 0x60
   14c1c:	cmp	r8, #0
   14c20:	sbcs	lr, r9, #0
   14c24:	movlt	r8, #0
   14c28:	blt	14d5c <__assert_fail@plt+0x3880>
   14c2c:	orrs	r1, r0, r1
   14c30:	moveq	r1, #1
   14c34:	movne	r1, #0
   14c38:	orrs	r0, r4, r5
   14c3c:	moveq	r1, #0
   14c40:	andne	r1, r1, #1
   14c44:	cmp	r1, #0
   14c48:	bne	14d68 <__assert_fail@plt+0x388c>
   14c4c:	subs	r8, r8, r4
   14c50:	sbc	r9, r9, r5
   14c54:	subs	r8, r8, r6
   14c58:	sbc	r9, r9, r7
   14c5c:	cmp	ip, #0
   14c60:	beq	14c80 <__assert_fail@plt+0x37a4>
   14c64:	ldr	r2, [r3, #104]	; 0x68
   14c68:	mov	r0, r8
   14c6c:	mov	r1, r9
   14c70:	asr	r3, r2, #31
   14c74:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   14c78:	subs	r8, r8, r2
   14c7c:	sbc	r9, r9, r3
   14c80:	mov	r1, #4
   14c84:	mov	r2, r8
   14c88:	strd	r4, [sp]
   14c8c:	mov	r3, r9
   14c90:	str	r1, [sp, #8]
   14c94:	mov	r0, #0
   14c98:	bl	11188 <posix_fadvise64@plt>
   14c9c:	adds	r8, r0, #1
   14ca0:	movne	r8, #1
   14ca4:	mov	r0, r8
   14ca8:	add	sp, sp, #20
   14cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cb0:	ldrd	r4, [r3, #72]	; 0x48
   14cb4:	orrs	ip, r4, r5
   14cb8:	moveq	ip, #1
   14cbc:	movne	ip, #0
   14cc0:	orrs	lr, r4, r5
   14cc4:	bne	14da8 <__assert_fail@plt+0x38cc>
   14cc8:	cmp	r2, #0
   14ccc:	beq	14d58 <__assert_fail@plt+0x387c>
   14cd0:	ldrb	r8, [r3, #90]	; 0x5a
   14cd4:	mov	r4, #0
   14cd8:	mov	r5, #0
   14cdc:	cmp	r8, #0
   14ce0:	mov	r6, r4
   14ce4:	mov	r7, r5
   14ce8:	bne	14c18 <__assert_fail@plt+0x373c>
   14cec:	bl	113a4 <__errno_location@plt>
   14cf0:	mov	r3, #29
   14cf4:	str	r3, [r0]
   14cf8:	mov	r0, r8
   14cfc:	add	sp, sp, #20
   14d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d04:	adds	r8, r8, r0
   14d08:	adc	r9, r9, r1
   14d0c:	ldr	sl, [pc, #224]	; 14df4 <__assert_fail@plt+0x3918>
   14d10:	asr	r6, r9, #31
   14d14:	mov	r4, r6
   14d18:	asr	r5, r6, #31
   14d1c:	eor	r6, r8, r6
   14d20:	subs	r6, r6, r4
   14d24:	eor	r7, r9, r5
   14d28:	sbc	r7, r7, r5
   14d2c:	mov	fp, #0
   14d30:	and	r6, r6, sl
   14d34:	and	r7, r7, fp
   14d38:	eor	r6, r6, r4
   14d3c:	subs	r6, r6, r4
   14d40:	eor	r7, r7, r5
   14d44:	sbc	r7, r7, r5
   14d48:	cmp	r6, r8
   14d4c:	sbcs	ip, r7, r9
   14d50:	strd	r6, [r3, #72]	; 0x48
   14d54:	blt	14dc8 <__assert_fail@plt+0x38ec>
   14d58:	mov	r8, #1
   14d5c:	mov	r0, r8
   14d60:	add	sp, sp, #20
   14d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d68:	cmp	r2, #0
   14d6c:	beq	14db4 <__assert_fail@plt+0x38d8>
   14d70:	subs	r8, r8, r4
   14d74:	sbc	r9, r9, r5
   14d78:	mov	r4, #0
   14d7c:	mov	r5, #0
   14d80:	b	14c64 <__assert_fail@plt+0x3788>
   14d84:	mov	r6, #0
   14d88:	subs	r6, r6, r0
   14d8c:	mov	r7, #-2147483648	; 0x80000000
   14d90:	sbc	r7, r7, r1
   14d94:	cmp	r8, r6
   14d98:	sbcs	ip, r9, r7
   14d9c:	movlt	ip, #1
   14da0:	movge	ip, #0
   14da4:	b	14be4 <__assert_fail@plt+0x3708>
   14da8:	mov	r6, r0
   14dac:	mov	r7, r1
   14db0:	b	14c0c <__assert_fail@plt+0x3730>
   14db4:	subs	r8, r8, r4
   14db8:	sbc	r9, r9, r5
   14dbc:	subs	r8, r8, r6
   14dc0:	sbc	r9, r9, r7
   14dc4:	b	14c80 <__assert_fail@plt+0x37a4>
   14dc8:	subs	r4, r8, r6
   14dcc:	sbc	r5, r9, r7
   14dd0:	orrs	ip, r4, r5
   14dd4:	beq	14d58 <__assert_fail@plt+0x387c>
   14dd8:	orr	r8, r0, r4
   14ddc:	orr	r9, r1, r5
   14de0:	orrs	ip, r8, r9
   14de4:	mov	ip, #0
   14de8:	beq	14cc8 <__assert_fail@plt+0x37ec>
   14dec:	b	14c0c <__assert_fail@plt+0x3730>
   14df0:	andeq	r2, r3, r8, ror #3
   14df4:	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
   14df8:			; <UNDEFINED> instruction: 0xfffe0000
   14dfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e00:	sub	sp, sp, #132	; 0x84
   14e04:	ldr	r4, [pc, #540]	; 15028 <__assert_fail@plt+0x3b4c>
   14e08:	ldr	r8, [r4, #116]	; 0x74
   14e0c:	bic	r3, r8, #49152	; 0xc000
   14e10:	ands	r9, r8, #16384	; 0x4000
   14e14:	str	r3, [r4, #116]	; 0x74
   14e18:	bne	14f14 <__assert_fail@plt+0x3a38>
   14e1c:	tst	r8, #32768	; 0x8000
   14e20:	bne	14e30 <__assert_fail@plt+0x3954>
   14e24:	mov	r0, r9
   14e28:	add	sp, sp, #132	; 0x84
   14e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e30:	ldr	r7, [pc, #500]	; 1502c <__assert_fail@plt+0x3b50>
   14e34:	mov	r6, #0
   14e38:	mov	r8, #2
   14e3c:	mov	sl, #1
   14e40:	ldr	r3, [r4]
   14e44:	mov	r2, sp
   14e48:	cmp	r3, #0
   14e4c:	mov	r1, r7
   14e50:	mov	r0, r6
   14e54:	bne	14e64 <__assert_fail@plt+0x3988>
   14e58:	ldr	r3, [r4, #4]
   14e5c:	cmp	r3, #0
   14e60:	beq	14eb0 <__assert_fail@plt+0x39d4>
   14e64:	bl	111ac <sigprocmask@plt>
   14e68:	ldr	r5, [r4]
   14e6c:	ldr	r3, [r4, #4]
   14e70:	mov	r2, r6
   14e74:	cmp	r3, #0
   14e78:	mov	r1, sp
   14e7c:	sub	r3, r3, #1
   14e80:	mov	r0, r8
   14e84:	strne	r3, [r4, #4]
   14e88:	bl	111ac <sigprocmask@plt>
   14e8c:	cmp	r5, #0
   14e90:	bne	14e9c <__assert_fail@plt+0x39c0>
   14e94:	bl	13d88 <__assert_fail@plt+0x28ac>
   14e98:	b	14e40 <__assert_fail@plt+0x3964>
   14e9c:	bl	15038 <__assert_fail@plt+0x3b5c>
   14ea0:	bl	13d88 <__assert_fail@plt+0x28ac>
   14ea4:	mov	r0, r5
   14ea8:	bl	11164 <raise@plt>
   14eac:	b	14e40 <__assert_fail@plt+0x3964>
   14eb0:	mov	r0, sl
   14eb4:	bl	11170 <fsync@plt>
   14eb8:	cmp	r0, #0
   14ebc:	bge	14fcc <__assert_fail@plt+0x3af0>
   14ec0:	bl	113a4 <__errno_location@plt>
   14ec4:	ldr	r5, [r0]
   14ec8:	cmp	r5, #4
   14ecc:	beq	14e40 <__assert_fail@plt+0x3964>
   14ed0:	mov	r2, #5
   14ed4:	ldr	r1, [pc, #340]	; 15030 <__assert_fail@plt+0x3b54>
   14ed8:	mov	r0, #0
   14edc:	bl	11230 <dcgettext@plt>
   14ee0:	ldr	r1, [r4, #256]	; 0x100
   14ee4:	mov	r9, #1
   14ee8:	mov	r6, r0
   14eec:	mov	r0, #4
   14ef0:	bl	19ee4 <__assert_fail@plt+0x8a08>
   14ef4:	mov	r2, r6
   14ef8:	mov	r1, r5
   14efc:	mov	r3, r0
   14f00:	mov	r0, #0
   14f04:	bl	13ee4 <__assert_fail@plt+0x2a08>
   14f08:	mov	r0, r9
   14f0c:	add	sp, sp, #132	; 0x84
   14f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f14:	add	r6, r4, #128	; 0x80
   14f18:	mov	r5, #0
   14f1c:	mov	r7, #2
   14f20:	mov	sl, #1
   14f24:	ldr	r3, [r4]
   14f28:	mov	r2, sp
   14f2c:	cmp	r3, #0
   14f30:	mov	r1, r6
   14f34:	mov	r0, r5
   14f38:	bne	14f48 <__assert_fail@plt+0x3a6c>
   14f3c:	ldr	r3, [r4, #4]
   14f40:	cmp	r3, #0
   14f44:	beq	14f94 <__assert_fail@plt+0x3ab8>
   14f48:	bl	111ac <sigprocmask@plt>
   14f4c:	ldr	r9, [r4]
   14f50:	ldr	r3, [r4, #4]
   14f54:	mov	r2, r5
   14f58:	cmp	r3, #0
   14f5c:	mov	r1, sp
   14f60:	sub	r3, r3, #1
   14f64:	mov	r0, r7
   14f68:	strne	r3, [r4, #4]
   14f6c:	bl	111ac <sigprocmask@plt>
   14f70:	cmp	r9, #0
   14f74:	bne	14f80 <__assert_fail@plt+0x3aa4>
   14f78:	bl	13d88 <__assert_fail@plt+0x28ac>
   14f7c:	b	14f24 <__assert_fail@plt+0x3a48>
   14f80:	bl	15038 <__assert_fail@plt+0x3b5c>
   14f84:	bl	13d88 <__assert_fail@plt+0x28ac>
   14f88:	mov	r0, r9
   14f8c:	bl	11164 <raise@plt>
   14f90:	b	14f24 <__assert_fail@plt+0x3a48>
   14f94:	mov	r0, sl
   14f98:	bl	114a0 <fdatasync@plt>
   14f9c:	subs	r9, r0, #0
   14fa0:	bge	14fdc <__assert_fail@plt+0x3b00>
   14fa4:	bl	113a4 <__errno_location@plt>
   14fa8:	ldr	fp, [r0]
   14fac:	cmp	fp, #4
   14fb0:	beq	14f24 <__assert_fail@plt+0x3a48>
   14fb4:	sub	r3, fp, #22
   14fb8:	bics	r3, r3, #16
   14fbc:	moveq	r9, r3
   14fc0:	bne	14fec <__assert_fail@plt+0x3b10>
   14fc4:	orr	r8, r8, #32768	; 0x8000
   14fc8:	b	14e1c <__assert_fail@plt+0x3940>
   14fcc:	beq	14e24 <__assert_fail@plt+0x3948>
   14fd0:	bl	113a4 <__errno_location@plt>
   14fd4:	ldr	r5, [r0]
   14fd8:	b	14ed0 <__assert_fail@plt+0x39f4>
   14fdc:	beq	14e1c <__assert_fail@plt+0x3940>
   14fe0:	bl	113a4 <__errno_location@plt>
   14fe4:	ldr	fp, [r0]
   14fe8:	b	14fb4 <__assert_fail@plt+0x3ad8>
   14fec:	mov	r2, #5
   14ff0:	ldr	r1, [pc, #60]	; 15034 <__assert_fail@plt+0x3b58>
   14ff4:	mov	r0, #0
   14ff8:	bl	11230 <dcgettext@plt>
   14ffc:	ldr	r1, [r4, #256]	; 0x100
   15000:	mov	r9, #1
   15004:	mov	r5, r0
   15008:	mov	r0, #4
   1500c:	bl	19ee4 <__assert_fail@plt+0x8a08>
   15010:	mov	r2, r5
   15014:	mov	r1, fp
   15018:	mov	r3, r0
   1501c:	mov	r0, #0
   15020:	bl	13ee4 <__assert_fail@plt+0x2a08>
   15024:	b	14fc4 <__assert_fail@plt+0x3ae8>
   15028:	andeq	r2, r3, r8, ror #3
   1502c:	andeq	r2, r3, r8, ror #4
   15030:	andeq	r0, r2, r0, ror #8
   15034:	andeq	r0, r2, r8, asr #8
   15038:	push	{r4, r5, r6, r7, r8, lr}
   1503c:	ldr	r7, [pc, #252]	; 15140 <__assert_fail@plt+0x3c64>
   15040:	ldr	r3, [r7]
   15044:	cmp	r3, #0
   15048:	bne	15058 <__assert_fail@plt+0x3b7c>
   1504c:	bl	14dfc <__assert_fail@plt+0x3920>
   15050:	cmp	r0, #0
   15054:	bne	1513c <__assert_fail@plt+0x3c60>
   15058:	mov	r0, #0
   1505c:	bl	114b8 <close@plt>
   15060:	cmp	r0, #0
   15064:	beq	150bc <__assert_fail@plt+0x3be0>
   15068:	bl	113a4 <__errno_location@plt>
   1506c:	mov	r6, #0
   15070:	mov	r5, r0
   15074:	ldr	r4, [r0]
   15078:	b	15098 <__assert_fail@plt+0x3bbc>
   1507c:	mov	r0, r6
   15080:	bl	114b8 <close@plt>
   15084:	cmp	r0, #0
   15088:	beq	150bc <__assert_fail@plt+0x3be0>
   1508c:	ldr	r4, [r5]
   15090:	cmp	r4, #9
   15094:	beq	150bc <__assert_fail@plt+0x3be0>
   15098:	cmp	r4, #4
   1509c:	beq	1507c <__assert_fail@plt+0x3ba0>
   150a0:	ldr	r1, [pc, #156]	; 15144 <__assert_fail@plt+0x3c68>
   150a4:	mov	r2, #5
   150a8:	mov	r0, #0
   150ac:	bl	11230 <dcgettext@plt>
   150b0:	ldr	r1, [r7, #260]	; 0x104
   150b4:	mov	r5, r0
   150b8:	b	1511c <__assert_fail@plt+0x3c40>
   150bc:	mov	r0, #1
   150c0:	bl	114b8 <close@plt>
   150c4:	cmp	r0, #0
   150c8:	popeq	{r4, r5, r6, r7, r8, pc}
   150cc:	bl	113a4 <__errno_location@plt>
   150d0:	mov	r6, #1
   150d4:	mov	r5, r0
   150d8:	ldr	r4, [r0]
   150dc:	b	150fc <__assert_fail@plt+0x3c20>
   150e0:	mov	r0, r6
   150e4:	bl	114b8 <close@plt>
   150e8:	cmp	r0, #0
   150ec:	popeq	{r4, r5, r6, r7, r8, pc}
   150f0:	ldr	r4, [r5]
   150f4:	cmp	r4, #9
   150f8:	beq	15138 <__assert_fail@plt+0x3c5c>
   150fc:	cmp	r4, #4
   15100:	beq	150e0 <__assert_fail@plt+0x3c04>
   15104:	ldr	r1, [pc, #60]	; 15148 <__assert_fail@plt+0x3c6c>
   15108:	mov	r2, #5
   1510c:	mov	r0, #0
   15110:	bl	11230 <dcgettext@plt>
   15114:	ldr	r1, [r7, #256]	; 0x100
   15118:	mov	r5, r0
   1511c:	mov	r0, #4
   15120:	bl	19ee4 <__assert_fail@plt+0x8a08>
   15124:	mov	r2, r5
   15128:	mov	r1, r4
   1512c:	mov	r3, r0
   15130:	mov	r0, #1
   15134:	bl	13ee4 <__assert_fail@plt+0x2a08>
   15138:	pop	{r4, r5, r6, r7, r8, pc}
   1513c:	bl	11374 <exit@plt>
   15140:	andeq	r2, r3, r8, ror #3
   15144:	andeq	r0, r2, r4, ror r4
   15148:	andeq	r0, r2, ip, lsl #9
   1514c:	push	{r4, r5, r6, r7, r8, lr}
   15150:	mov	r6, #0
   15154:	ldr	r4, [pc, #128]	; 151dc <__assert_fail@plt+0x3d00>
   15158:	sub	sp, sp, #128	; 0x80
   1515c:	add	r7, r4, #128	; 0x80
   15160:	mov	r8, #2
   15164:	ldr	r3, [r4]
   15168:	mov	r2, sp
   1516c:	cmp	r3, #0
   15170:	mov	r1, r7
   15174:	mov	r0, r6
   15178:	bne	15188 <__assert_fail@plt+0x3cac>
   1517c:	ldr	r3, [r4, #4]
   15180:	cmp	r3, #0
   15184:	beq	151d4 <__assert_fail@plt+0x3cf8>
   15188:	bl	111ac <sigprocmask@plt>
   1518c:	ldr	r5, [r4]
   15190:	ldr	r3, [r4, #4]
   15194:	mov	r2, r6
   15198:	cmp	r3, #0
   1519c:	mov	r1, sp
   151a0:	sub	r3, r3, #1
   151a4:	mov	r0, r8
   151a8:	strne	r3, [r4, #4]
   151ac:	bl	111ac <sigprocmask@plt>
   151b0:	cmp	r5, #0
   151b4:	bne	151c0 <__assert_fail@plt+0x3ce4>
   151b8:	bl	13d88 <__assert_fail@plt+0x28ac>
   151bc:	b	15164 <__assert_fail@plt+0x3c88>
   151c0:	bl	15038 <__assert_fail@plt+0x3b5c>
   151c4:	bl	13d88 <__assert_fail@plt+0x28ac>
   151c8:	mov	r0, r5
   151cc:	bl	11164 <raise@plt>
   151d0:	b	15164 <__assert_fail@plt+0x3c88>
   151d4:	add	sp, sp, #128	; 0x80
   151d8:	pop	{r4, r5, r6, r7, r8, pc}
   151dc:	andeq	r2, r3, r8, ror #3
   151e0:	push	{r4, lr}
   151e4:	bl	1514c <__assert_fail@plt+0x3c70>
   151e8:	bl	15038 <__assert_fail@plt+0x3b5c>
   151ec:	bl	13d88 <__assert_fail@plt+0x28ac>
   151f0:	mov	r0, #1
   151f4:	bl	11374 <exit@plt>
   151f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151fc:	mov	fp, r0
   15200:	ldr	r4, [pc, #184]	; 152c0 <__assert_fail@plt+0x3de4>
   15204:	sub	sp, sp, #132	; 0x84
   15208:	mov	sl, r1
   1520c:	add	r7, r4, #128	; 0x80
   15210:	mov	r6, #0
   15214:	mov	r8, #2
   15218:	mov	r9, #3
   1521c:	ldr	r3, [r4]
   15220:	mov	r2, sp
   15224:	cmp	r3, #0
   15228:	mov	r1, r7
   1522c:	mov	r0, r6
   15230:	bne	15240 <__assert_fail@plt+0x3d64>
   15234:	ldr	r3, [r4, #4]
   15238:	cmp	r3, #0
   1523c:	beq	1528c <__assert_fail@plt+0x3db0>
   15240:	bl	111ac <sigprocmask@plt>
   15244:	ldr	r5, [r4]
   15248:	ldr	r3, [r4, #4]
   1524c:	mov	r2, r6
   15250:	cmp	r3, #0
   15254:	mov	r1, sp
   15258:	sub	r3, r3, #1
   1525c:	mov	r0, r8
   15260:	strne	r3, [r4, #4]
   15264:	bl	111ac <sigprocmask@plt>
   15268:	cmp	r5, #0
   1526c:	bne	15278 <__assert_fail@plt+0x3d9c>
   15270:	bl	13d88 <__assert_fail@plt+0x28ac>
   15274:	b	1521c <__assert_fail@plt+0x3d40>
   15278:	bl	15038 <__assert_fail@plt+0x3b5c>
   1527c:	bl	13d88 <__assert_fail@plt+0x28ac>
   15280:	mov	r0, r5
   15284:	bl	11164 <raise@plt>
   15288:	b	1521c <__assert_fail@plt+0x3d40>
   1528c:	mov	r2, sl
   15290:	mov	r1, fp
   15294:	mov	r0, r9
   15298:	bl	11278 <__fxstat64@plt>
   1529c:	subs	r5, r0, #0
   152a0:	bge	152b4 <__assert_fail@plt+0x3dd8>
   152a4:	bl	113a4 <__errno_location@plt>
   152a8:	ldr	r3, [r0]
   152ac:	cmp	r3, #4
   152b0:	beq	1521c <__assert_fail@plt+0x3d40>
   152b4:	mov	r0, r5
   152b8:	add	sp, sp, #132	; 0x84
   152bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152c0:	andeq	r2, r3, r8, ror #3
   152c4:	push	{r4, r5, r6, r7, lr}
   152c8:	bics	r4, r1, #33024	; 0x8100
   152cc:	sub	sp, sp, #108	; 0x6c
   152d0:	bne	152dc <__assert_fail@plt+0x3e00>
   152d4:	add	sp, sp, #108	; 0x6c
   152d8:	pop	{r4, r5, r6, r7, pc}
   152dc:	mov	r1, #3
   152e0:	mov	r5, r0
   152e4:	mov	r6, r2
   152e8:	bl	16464 <__assert_fail@plt+0x4f88>
   152ec:	subs	r7, r0, #0
   152f0:	blt	15354 <__assert_fail@plt+0x3e78>
   152f4:	orr	r4, r4, r7
   152f8:	cmp	r7, r4
   152fc:	beq	152d4 <__assert_fail@plt+0x3df8>
   15300:	tst	r4, #16384	; 0x4000
   15304:	bne	15324 <__assert_fail@plt+0x3e48>
   15308:	mov	r2, r4
   1530c:	mov	r0, r5
   15310:	mov	r1, #4
   15314:	bl	16464 <__assert_fail@plt+0x4f88>
   15318:	cmn	r0, #1
   1531c:	bne	152d4 <__assert_fail@plt+0x3df8>
   15320:	b	15354 <__assert_fail@plt+0x3e78>
   15324:	mov	r1, sp
   15328:	mov	r0, r5
   1532c:	bl	151f8 <__assert_fail@plt+0x3d1c>
   15330:	cmp	r0, #0
   15334:	bne	15354 <__assert_fail@plt+0x3e78>
   15338:	ldr	r3, [sp, #16]
   1533c:	and	r3, r3, #61440	; 0xf000
   15340:	cmp	r3, #16384	; 0x4000
   15344:	beq	15390 <__assert_fail@plt+0x3eb4>
   15348:	bl	113a4 <__errno_location@plt>
   1534c:	mov	r3, #20
   15350:	str	r3, [r0]
   15354:	bl	113a4 <__errno_location@plt>
   15358:	mov	r2, #5
   1535c:	ldr	r1, [pc, #60]	; 153a0 <__assert_fail@plt+0x3ec4>
   15360:	ldr	r4, [r0]
   15364:	mov	r0, #0
   15368:	bl	11230 <dcgettext@plt>
   1536c:	mov	r1, r6
   15370:	mov	r5, r0
   15374:	mov	r0, #4
   15378:	bl	19ee4 <__assert_fail@plt+0x8a08>
   1537c:	mov	r2, r5
   15380:	mov	r1, r4
   15384:	mov	r3, r0
   15388:	mov	r0, #1
   1538c:	bl	13ee4 <__assert_fail@plt+0x2a08>
   15390:	bic	r4, r4, #16384	; 0x4000
   15394:	cmp	r7, r4
   15398:	beq	152d4 <__assert_fail@plt+0x3df8>
   1539c:	b	15308 <__assert_fail@plt+0x3e2c>
   153a0:	andeq	r0, r2, r4, lsr #9
   153a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153a8:	sub	sp, sp, #148	; 0x94
   153ac:	mov	r5, r3
   153b0:	mov	r8, r0
   153b4:	str	r1, [sp, #36]	; 0x24
   153b8:	mov	r4, r2
   153bc:	bl	113a4 <__errno_location@plt>
   153c0:	ldr	r9, [sp, #184]	; 0xb8
   153c4:	mov	r3, #0
   153c8:	cmp	r9, r3
   153cc:	ldr	r7, [sp, #188]	; 0xbc
   153d0:	str	r0, [sp, #32]
   153d4:	str	r3, [r0]
   153d8:	blt	15748 <__assert_fail@plt+0x426c>
   153dc:	bne	1555c <__assert_fail@plt+0x4080>
   153e0:	ldr	r1, [r7]
   153e4:	mov	r2, #0
   153e8:	mov	r3, #0
   153ec:	cmp	r1, #0
   153f0:	strd	r2, [sp, #8]
   153f4:	blt	157e4 <__assert_fail@plt+0x4308>
   153f8:	mov	sl, r1
   153fc:	asr	fp, r1, #31
   15400:	mvn	r0, #0
   15404:	strd	sl, [sp, #16]
   15408:	mvn	r1, #-2147483648	; 0x80000000
   1540c:	subs	sl, r0, sl
   15410:	sbc	fp, r1, fp
   15414:	mov	r0, sl
   15418:	mov	r1, fp
   1541c:	ldrd	sl, [sp, #8]
   15420:	cmp	r0, sl
   15424:	sbcs	r1, r1, fp
   15428:	movlt	r1, #1
   1542c:	movge	r1, #0
   15430:	cmp	r1, #0
   15434:	beq	155d0 <__assert_fail@plt+0x40f4>
   15438:	mov	r3, #2
   1543c:	str	r3, [sp]
   15440:	mov	r2, #0
   15444:	mov	r3, #0
   15448:	mov	r0, r8
   1544c:	bl	112a8 <lseek64@plt>
   15450:	cmp	r0, #0
   15454:	sbcs	r3, r1, #0
   15458:	bge	157cc <__assert_fail@plt+0x42f0>
   1545c:	mov	fp, #0
   15460:	cmp	r8, #0
   15464:	ldr	r6, [pc, #1264]	; 1595c <__assert_fail@plt+0x4480>
   15468:	bne	156dc <__assert_fail@plt+0x4200>
   1546c:	bl	14304 <__assert_fail@plt+0x2e28>
   15470:	ldr	fp, [r6, #112]	; 0x70
   15474:	str	fp, [sp, #8]
   15478:	orrs	r3, r4, r5
   1547c:	movne	r2, r9
   15480:	ldr	r3, [r6, #264]	; 0x108
   15484:	bne	154b8 <__assert_fail@plt+0x3fdc>
   15488:	ldr	r2, [r7]
   1548c:	b	154b0 <__assert_fail@plt+0x3fd4>
   15490:	subs	r4, r4, #1
   15494:	sbc	r5, r5, #0
   15498:	orrs	r3, r4, r5
   1549c:	bne	15478 <__assert_fail@plt+0x3f9c>
   154a0:	ldr	r2, [r7]
   154a4:	cmp	r2, #0
   154a8:	beq	1554c <__assert_fail@plt+0x4070>
   154ac:	ldr	r3, [r6, #264]	; 0x108
   154b0:	mov	r4, #0
   154b4:	mov	r5, #0
   154b8:	ldr	r1, [sp, #8]
   154bc:	mov	r0, r8
   154c0:	blx	r3
   154c4:	cmp	r0, #0
   154c8:	blt	158d0 <__assert_fail@plt+0x43f4>
   154cc:	beq	1554c <__assert_fail@plt+0x4070>
   154d0:	ldrd	r2, [r6, #96]	; 0x60
   154d4:	mov	sl, r0
   154d8:	asr	fp, r0, #31
   154dc:	mov	r1, r3
   154e0:	cmp	r2, #0
   154e4:	strd	r2, [sp, #24]
   154e8:	sbcs	r3, r1, #0
   154ec:	strd	sl, [sp, #16]
   154f0:	mov	r0, r2
   154f4:	blt	15534 <__assert_fail@plt+0x4058>
   154f8:	mvn	r2, #0
   154fc:	mvn	r3, #-2147483648	; 0x80000000
   15500:	subs	sl, r2, sl
   15504:	sbc	fp, r3, fp
   15508:	mov	r3, fp
   1550c:	cmp	sl, r0
   15510:	sbcs	r3, r3, r1
   15514:	blt	156cc <__assert_fail@plt+0x41f0>
   15518:	ldrd	r0, [sp, #24]
   1551c:	ldrd	r2, [sp, #16]
   15520:	adds	r2, r2, r0
   15524:	adc	r3, r3, r1
   15528:	mov	r0, r2
   1552c:	mov	r1, r3
   15530:	strd	r0, [r6, #96]	; 0x60
   15534:	orrs	r3, r4, r5
   15538:	bne	15490 <__assert_fail@plt+0x3fb4>
   1553c:	mov	r3, #0
   15540:	str	r3, [r7]
   15544:	mov	r4, #0
   15548:	mov	r5, #0
   1554c:	mov	r0, r4
   15550:	mov	r1, r5
   15554:	add	sp, sp, #148	; 0x94
   15558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1555c:	cmp	r4, #0
   15560:	sbcs	r2, r5, #0
   15564:	blt	15820 <__assert_fail@plt+0x4344>
   15568:	mov	r2, r9
   1556c:	asr	r3, r9, #31
   15570:	mvn	r0, #0
   15574:	mvn	r1, #-2147483648	; 0x80000000
   15578:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   1557c:	cmp	r0, r4
   15580:	sbcs	r3, r1, r5
   15584:	movlt	r3, #1
   15588:	movge	r3, #0
   1558c:	cmp	r3, #0
   15590:	bne	15438 <__assert_fail@plt+0x3f5c>
   15594:	mul	r0, r9, r5
   15598:	asr	fp, r9, #31
   1559c:	umull	r2, r3, r9, r4
   155a0:	mla	r0, r4, fp, r0
   155a4:	ldr	r1, [r7]
   155a8:	add	r3, r0, r3
   155ac:	cmp	r1, #0
   155b0:	strd	r2, [sp, #8]
   155b4:	blt	157e4 <__assert_fail@plt+0x4308>
   155b8:	cmp	r2, #0
   155bc:	sbcs	r0, r3, #0
   155c0:	bge	153f8 <__assert_fail@plt+0x3f1c>
   155c4:	mov	sl, r1
   155c8:	asr	fp, r1, #31
   155cc:	strd	sl, [sp, #16]
   155d0:	ldrd	sl, [sp, #16]
   155d4:	mov	r6, #1
   155d8:	str	r6, [sp]
   155dc:	adds	sl, sl, r2
   155e0:	adc	fp, fp, r3
   155e4:	mov	r3, fp
   155e8:	mov	r2, sl
   155ec:	mov	r0, r8
   155f0:	bl	112a8 <lseek64@plt>
   155f4:	cmp	r0, #0
   155f8:	sbcs	r3, r1, #0
   155fc:	blt	15798 <__assert_fail@plt+0x42bc>
   15600:	cmp	r8, #0
   15604:	bne	1553c <__assert_fail@plt+0x4060>
   15608:	add	r1, sp, #40	; 0x28
   1560c:	mov	r0, r8
   15610:	bl	151f8 <__assert_fail@plt+0x3d1c>
   15614:	cmp	r0, #0
   15618:	bne	15920 <__assert_fail@plt+0x4444>
   1561c:	ldr	r3, [sp, #56]	; 0x38
   15620:	ldr	r6, [pc, #820]	; 1595c <__assert_fail@plt+0x4480>
   15624:	and	r3, r3, #53248	; 0xd000
   15628:	cmp	r3, #32768	; 0x8000
   1562c:	ldrd	r2, [r6, #96]	; 0x60
   15630:	strd	r2, [sp, #8]
   15634:	bne	15860 <__assert_fail@plt+0x4384>
   15638:	cmp	r2, #0
   1563c:	sbcs	r1, r3, #0
   15640:	blt	15544 <__assert_fail@plt+0x4068>
   15644:	ldrd	r0, [sp, #88]	; 0x58
   15648:	subs	r2, r0, r2
   1564c:	sbc	r3, r1, r3
   15650:	mov	r5, r3
   15654:	cmp	r2, sl
   15658:	sbcs	r3, r5, fp
   1565c:	mov	r4, r2
   15660:	movge	r5, #0
   15664:	movge	r4, #0
   15668:	bge	15690 <__assert_fail@plt+0x41b4>
   1566c:	subs	r0, sl, r0
   15670:	sbc	r1, fp, r1
   15674:	mov	r2, r9
   15678:	asr	r3, r9, #31
   1567c:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   15680:	mov	sl, r4
   15684:	mov	fp, r5
   15688:	mov	r4, r0
   1568c:	mov	r5, r1
   15690:	cmp	sl, #0
   15694:	sbcs	r3, fp, #0
   15698:	blt	15878 <__assert_fail@plt+0x439c>
   1569c:	ldrd	r0, [sp, #8]
   156a0:	mvn	r2, #0
   156a4:	subs	r2, r2, sl
   156a8:	mvn	r3, #-2147483648	; 0x80000000
   156ac:	sbc	r3, r3, fp
   156b0:	cmp	r2, r0
   156b4:	sbcs	r3, r3, r1
   156b8:	bge	15878 <__assert_fail@plt+0x439c>
   156bc:	mvn	r2, #0
   156c0:	mvn	r3, #0
   156c4:	strd	r2, [r6, #96]	; 0x60
   156c8:	b	1554c <__assert_fail@plt+0x4070>
   156cc:	mvn	r2, #0
   156d0:	mvn	r3, #0
   156d4:	strd	r2, [r6, #96]	; 0x60
   156d8:	b	15534 <__assert_fail@plt+0x4058>
   156dc:	bl	14344 <__assert_fail@plt+0x2e68>
   156e0:	ldr	sl, [r6, #124]	; 0x7c
   156e4:	orrs	r3, r4, r5
   156e8:	movne	r2, r9
   156ec:	ldr	r3, [r6, #264]	; 0x108
   156f0:	bne	15724 <__assert_fail@plt+0x4248>
   156f4:	ldr	r2, [r7]
   156f8:	b	1571c <__assert_fail@plt+0x4240>
   156fc:	subs	r4, r4, #1
   15700:	sbc	r5, r5, #0
   15704:	orrs	r3, r4, r5
   15708:	bne	156e4 <__assert_fail@plt+0x4208>
   1570c:	ldr	r2, [r7]
   15710:	cmp	r2, #0
   15714:	beq	1554c <__assert_fail@plt+0x4070>
   15718:	ldr	r3, [r6, #264]	; 0x108
   1571c:	mov	r4, #0
   15720:	mov	r5, #0
   15724:	mov	r1, sl
   15728:	mov	r0, r8
   1572c:	blx	r3
   15730:	cmp	r0, #0
   15734:	blt	15894 <__assert_fail@plt+0x43b8>
   15738:	beq	1554c <__assert_fail@plt+0x4070>
   1573c:	orrs	r3, r4, r5
   15740:	beq	1553c <__assert_fail@plt+0x4060>
   15744:	b	156fc <__assert_fail@plt+0x4220>
   15748:	cmp	r4, #0
   1574c:	sbcs	r3, r5, #0
   15750:	blt	15770 <__assert_fail@plt+0x4294>
   15754:	cmn	r9, #1
   15758:	beq	15594 <__assert_fail@plt+0x40b8>
   1575c:	mov	r2, r9
   15760:	asr	r3, r9, #31
   15764:	mov	r0, #0
   15768:	mov	r1, #-2147483648	; 0x80000000
   1576c:	b	15578 <__assert_fail@plt+0x409c>
   15770:	asr	r3, r9, #31
   15774:	mov	r2, r9
   15778:	mvn	r0, #0
   1577c:	mvn	r1, #-2147483648	; 0x80000000
   15780:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   15784:	cmp	r4, r0
   15788:	sbcs	r3, r5, r1
   1578c:	movlt	r3, #1
   15790:	movge	r3, #0
   15794:	b	1558c <__assert_fail@plt+0x40b0>
   15798:	ldr	r3, [sp, #32]
   1579c:	mov	r1, #2
   157a0:	mov	r2, #0
   157a4:	ldr	fp, [r3]
   157a8:	mov	r0, r8
   157ac:	mov	r3, #0
   157b0:	str	r1, [sp]
   157b4:	bl	112a8 <lseek64@plt>
   157b8:	cmp	r0, #0
   157bc:	sbcs	r3, r1, #0
   157c0:	blt	15460 <__assert_fail@plt+0x3f84>
   157c4:	cmp	fp, #0
   157c8:	bne	157d0 <__assert_fail@plt+0x42f4>
   157cc:	mov	fp, #75	; 0x4b
   157d0:	cmp	r8, #0
   157d4:	mov	r2, #5
   157d8:	ldreq	r1, [pc, #384]	; 15960 <__assert_fail@plt+0x4484>
   157dc:	beq	1589c <__assert_fail@plt+0x43c0>
   157e0:	b	15898 <__assert_fail@plt+0x43bc>
   157e4:	mov	sl, r1
   157e8:	asr	fp, r1, #31
   157ec:	mov	r0, #0
   157f0:	strd	sl, [sp, #16]
   157f4:	mov	r1, #-2147483648	; 0x80000000
   157f8:	subs	sl, r0, sl
   157fc:	sbc	fp, r1, fp
   15800:	mov	r0, sl
   15804:	mov	r1, fp
   15808:	ldrd	sl, [sp, #8]
   1580c:	cmp	sl, r0
   15810:	sbcs	r1, fp, r1
   15814:	movlt	r1, #1
   15818:	movge	r1, #0
   1581c:	b	15430 <__assert_fail@plt+0x3f54>
   15820:	mvn	r1, #0
   15824:	mvn	r0, #0
   15828:	cmp	r5, r1
   1582c:	cmpeq	r4, r0
   15830:	beq	1558c <__assert_fail@plt+0x40b0>
   15834:	mov	r3, r5
   15838:	mov	r2, r4
   1583c:	mov	r0, #0
   15840:	mov	r1, #-2147483648	; 0x80000000
   15844:	bl	1ebb0 <__assert_fail@plt+0xd6d4>
   15848:	asr	r3, r9, #31
   1584c:	cmp	r0, r9
   15850:	sbcs	r3, r1, r3
   15854:	movlt	r3, #1
   15858:	movge	r3, #0
   1585c:	b	1558c <__assert_fail@plt+0x40b0>
   15860:	cmp	r2, #0
   15864:	sbcs	r3, r3, #0
   15868:	mov	r4, #0
   1586c:	mov	r5, #0
   15870:	bge	15690 <__assert_fail@plt+0x41b4>
   15874:	b	1554c <__assert_fail@plt+0x4070>
   15878:	ldrd	r2, [sp, #8]
   1587c:	adds	r2, r2, sl
   15880:	adc	r3, r3, fp
   15884:	mov	sl, r2
   15888:	mov	fp, r3
   1588c:	strd	sl, [r6, #96]	; 0x60
   15890:	b	1554c <__assert_fail@plt+0x4070>
   15894:	mov	r2, #5
   15898:	ldr	r1, [pc, #196]	; 15964 <__assert_fail@plt+0x4488>
   1589c:	mov	r0, #0
   158a0:	bl	11230 <dcgettext@plt>
   158a4:	ldr	r2, [sp, #36]	; 0x24
   158a8:	mov	r1, #3
   158ac:	mov	r4, r0
   158b0:	mov	r0, #0
   158b4:	bl	1a960 <__assert_fail@plt+0x9484>
   158b8:	mov	r2, r4
   158bc:	mov	r1, fp
   158c0:	mov	r3, r0
   158c4:	mov	r0, #0
   158c8:	bl	13ee4 <__assert_fail@plt+0x2a08>
   158cc:	bl	151e0 <__assert_fail@plt+0x3d04>
   158d0:	ldr	r3, [sp, #32]
   158d4:	mov	r2, #5
   158d8:	ldr	r1, [pc, #136]	; 15968 <__assert_fail@plt+0x448c>
   158dc:	mov	r0, #0
   158e0:	ldr	r4, [r3]
   158e4:	bl	11230 <dcgettext@plt>
   158e8:	ldr	r1, [sp, #36]	; 0x24
   158ec:	mov	r5, r0
   158f0:	mov	r0, #4
   158f4:	bl	19ee4 <__assert_fail@plt+0x8a08>
   158f8:	mov	r2, r5
   158fc:	mov	r1, r4
   15900:	mov	r3, r0
   15904:	mov	r0, #0
   15908:	bl	13ee4 <__assert_fail@plt+0x2a08>
   1590c:	ldr	r3, [r6, #116]	; 0x74
   15910:	tst	r3, #256	; 0x100
   15914:	beq	158cc <__assert_fail@plt+0x43f0>
   15918:	bl	13d88 <__assert_fail@plt+0x28ac>
   1591c:	b	158cc <__assert_fail@plt+0x43f0>
   15920:	ldr	r3, [sp, #32]
   15924:	mov	r2, #5
   15928:	ldr	r1, [pc, #60]	; 1596c <__assert_fail@plt+0x4490>
   1592c:	mov	r0, r8
   15930:	ldr	r4, [r3]
   15934:	bl	11230 <dcgettext@plt>
   15938:	ldr	r1, [sp, #36]	; 0x24
   1593c:	mov	r5, r0
   15940:	mov	r0, #4
   15944:	bl	19ee4 <__assert_fail@plt+0x8a08>
   15948:	mov	r2, r5
   1594c:	mov	r1, r4
   15950:	mov	r3, r0
   15954:	mov	r0, r6
   15958:	bl	13ee4 <__assert_fail@plt+0x2a08>
   1595c:	andeq	r2, r3, r8, ror #3
   15960:	andeq	r0, r2, ip, asr #9
   15964:	ldrdeq	r0, [r2], -ip
   15968:	andeq	r0, r2, ip, ror #9
   1596c:			; <UNDEFINED> instruction: 0x000204bc
   15970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15974:	mov	fp, r0
   15978:	ldr	r4, [pc, #192]	; 15a40 <__assert_fail@plt+0x4564>
   1597c:	sub	sp, sp, #140	; 0x8c
   15980:	mov	sl, r1
   15984:	mov	r9, r2
   15988:	add	r7, r4, #128	; 0x80
   1598c:	mov	r6, #0
   15990:	mov	r8, #2
   15994:	str	r3, [sp, #4]
   15998:	ldr	r3, [r4]
   1599c:	add	r2, sp, #8
   159a0:	cmp	r3, #0
   159a4:	mov	r1, r7
   159a8:	mov	r0, r6
   159ac:	bne	159bc <__assert_fail@plt+0x44e0>
   159b0:	ldr	r3, [r4, #4]
   159b4:	cmp	r3, #0
   159b8:	beq	15a08 <__assert_fail@plt+0x452c>
   159bc:	bl	111ac <sigprocmask@plt>
   159c0:	ldr	r5, [r4]
   159c4:	ldr	r3, [r4, #4]
   159c8:	mov	r2, r6
   159cc:	cmp	r3, #0
   159d0:	add	r1, sp, #8
   159d4:	sub	r3, r3, #1
   159d8:	mov	r0, r8
   159dc:	strne	r3, [r4, #4]
   159e0:	bl	111ac <sigprocmask@plt>
   159e4:	cmp	r5, #0
   159e8:	bne	159f4 <__assert_fail@plt+0x4518>
   159ec:	bl	13d88 <__assert_fail@plt+0x28ac>
   159f0:	b	15998 <__assert_fail@plt+0x44bc>
   159f4:	bl	15038 <__assert_fail@plt+0x3b5c>
   159f8:	bl	13d88 <__assert_fail@plt+0x28ac>
   159fc:	mov	r0, r5
   15a00:	bl	11164 <raise@plt>
   15a04:	b	15998 <__assert_fail@plt+0x44bc>
   15a08:	ldr	r3, [sp, #4]
   15a0c:	mov	r2, r9
   15a10:	mov	r1, sl
   15a14:	mov	r0, fp
   15a18:	bl	16638 <__assert_fail@plt+0x515c>
   15a1c:	subs	r5, r0, #0
   15a20:	bge	15a34 <__assert_fail@plt+0x4558>
   15a24:	bl	113a4 <__errno_location@plt>
   15a28:	ldr	r3, [r0]
   15a2c:	cmp	r3, #4
   15a30:	beq	15998 <__assert_fail@plt+0x44bc>
   15a34:	mov	r0, r5
   15a38:	add	sp, sp, #140	; 0x8c
   15a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a40:	andeq	r2, r3, r8, ror #3
   15a44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a48:	sub	sp, sp, #156	; 0x9c
   15a4c:	ldr	r4, [pc, #612]	; 15cb8 <__assert_fail@plt+0x47dc>
   15a50:	str	r0, [sp, #12]
   15a54:	mov	sl, r1
   15a58:	ldr	r3, [r4, #268]	; 0x10c
   15a5c:	tst	r3, #65536	; 0x10000
   15a60:	beq	15a70 <__assert_fail@plt+0x4594>
   15a64:	ldr	r3, [r4, #120]	; 0x78
   15a68:	cmp	r3, r1
   15a6c:	bgt	15c1c <__assert_fail@plt+0x4740>
   15a70:	cmp	sl, #0
   15a74:	mov	r9, #0
   15a78:	ble	15b64 <__assert_fail@plt+0x4688>
   15a7c:	ldr	r8, [pc, #568]	; 15cbc <__assert_fail@plt+0x47e0>
   15a80:	mov	r2, sl
   15a84:	asr	r3, sl, #31
   15a88:	mov	r6, r9
   15a8c:	mov	r7, #2
   15a90:	mov	fp, #1
   15a94:	strd	r2, [sp, #16]
   15a98:	ldr	r3, [r4]
   15a9c:	cmp	r3, #0
   15aa0:	bne	15ab0 <__assert_fail@plt+0x45d4>
   15aa4:	ldr	r3, [r4, #4]
   15aa8:	cmp	r3, #0
   15aac:	beq	15b08 <__assert_fail@plt+0x462c>
   15ab0:	add	r2, sp, #24
   15ab4:	mov	r1, r8
   15ab8:	mov	r0, r6
   15abc:	bl	111ac <sigprocmask@plt>
   15ac0:	ldr	r5, [r4]
   15ac4:	ldr	r3, [r4, #4]
   15ac8:	mov	r2, r6
   15acc:	cmp	r3, #0
   15ad0:	subne	r3, r3, #1
   15ad4:	add	r1, sp, #24
   15ad8:	mov	r0, r7
   15adc:	strne	r3, [r4, #4]
   15ae0:	bl	111ac <sigprocmask@plt>
   15ae4:	cmp	r5, #0
   15ae8:	bne	15b70 <__assert_fail@plt+0x4694>
   15aec:	bl	13d88 <__assert_fail@plt+0x28ac>
   15af0:	ldr	r3, [r4]
   15af4:	cmp	r3, #0
   15af8:	bne	15ab0 <__assert_fail@plt+0x45d4>
   15afc:	ldr	r3, [r4, #4]
   15b00:	cmp	r3, #0
   15b04:	bne	15ab0 <__assert_fail@plt+0x45d4>
   15b08:	ldr	r5, [r4, #116]	; 0x74
   15b0c:	strb	r3, [r4, #272]	; 0x110
   15b10:	tst	r5, #65536	; 0x10000
   15b14:	bne	15b84 <__assert_fail@plt+0x46a8>
   15b18:	ldr	r3, [sp, #12]
   15b1c:	sub	r2, sl, r9
   15b20:	add	r1, r3, r9
   15b24:	mov	r0, fp
   15b28:	bl	113ec <write@plt>
   15b2c:	cmp	r0, #0
   15b30:	bge	15bec <__assert_fail@plt+0x4710>
   15b34:	bl	113a4 <__errno_location@plt>
   15b38:	ldr	r3, [r0]
   15b3c:	cmp	r3, #4
   15b40:	bne	15b4c <__assert_fail@plt+0x4670>
   15b44:	cmp	sl, r9
   15b48:	bgt	15a98 <__assert_fail@plt+0x45bc>
   15b4c:	ldrb	r3, [r4, #273]	; 0x111
   15b50:	cmp	r9, #0
   15b54:	moveq	r3, #0
   15b58:	andne	r3, r3, #1
   15b5c:	cmp	r3, #0
   15b60:	bne	15c00 <__assert_fail@plt+0x4724>
   15b64:	mov	r0, r9
   15b68:	add	sp, sp, #156	; 0x9c
   15b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b70:	bl	15038 <__assert_fail@plt+0x3b5c>
   15b74:	bl	13d88 <__assert_fail@plt+0x28ac>
   15b78:	mov	r0, r5
   15b7c:	bl	11164 <raise@plt>
   15b80:	b	15a98 <__assert_fail@plt+0x45bc>
   15b84:	ldr	r1, [sp, #12]
   15b88:	mov	r2, sl
   15b8c:	ldrb	r3, [r1], #1
   15b90:	cmp	r3, #0
   15b94:	bne	15b18 <__assert_fail@plt+0x463c>
   15b98:	subs	r2, r2, #1
   15b9c:	beq	15bb8 <__assert_fail@plt+0x46dc>
   15ba0:	tst	r2, #15
   15ba4:	bne	15b8c <__assert_fail@plt+0x46b0>
   15ba8:	ldr	r0, [sp, #12]
   15bac:	bl	11218 <memcmp@plt>
   15bb0:	cmp	r0, #0
   15bb4:	bne	15b18 <__assert_fail@plt+0x463c>
   15bb8:	ldrd	r2, [sp, #16]
   15bbc:	str	fp, [sp]
   15bc0:	mov	r0, #1
   15bc4:	bl	112a8 <lseek64@plt>
   15bc8:	cmp	r0, #0
   15bcc:	sbcs	r3, r1, #0
   15bd0:	biclt	r5, r5, #65536	; 0x10000
   15bd4:	strlt	r5, [r4, #116]	; 0x74
   15bd8:	blt	15b18 <__assert_fail@plt+0x463c>
   15bdc:	mov	r0, sl
   15be0:	strb	fp, [r4, #272]	; 0x110
   15be4:	add	r9, r9, r0
   15be8:	b	15b44 <__assert_fail@plt+0x4668>
   15bec:	bne	15be4 <__assert_fail@plt+0x4708>
   15bf0:	bl	113a4 <__errno_location@plt>
   15bf4:	mov	r3, #28
   15bf8:	str	r3, [r0]
   15bfc:	b	15b4c <__assert_fail@plt+0x4670>
   15c00:	mov	r2, r9
   15c04:	asr	r3, r9, #31
   15c08:	mov	r0, #1
   15c0c:	bl	13f78 <__assert_fail@plt+0x2a9c>
   15c10:	mov	r0, r9
   15c14:	add	sp, sp, #156	; 0x9c
   15c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c1c:	mov	r1, #3
   15c20:	mov	r0, #1
   15c24:	bl	16464 <__assert_fail@plt+0x4f88>
   15c28:	mov	r1, #4
   15c2c:	bic	r2, r0, #65536	; 0x10000
   15c30:	mov	r0, #1
   15c34:	bl	16464 <__assert_fail@plt+0x4f88>
   15c38:	cmp	r0, #0
   15c3c:	beq	15c90 <__assert_fail@plt+0x47b4>
   15c40:	ldr	r3, [pc, #120]	; 15cc0 <__assert_fail@plt+0x47e4>
   15c44:	ldr	r3, [r3, #8]
   15c48:	cmp	r3, #1
   15c4c:	beq	15c90 <__assert_fail@plt+0x47b4>
   15c50:	bl	113a4 <__errno_location@plt>
   15c54:	mov	r2, #5
   15c58:	ldr	r1, [pc, #100]	; 15cc4 <__assert_fail@plt+0x47e8>
   15c5c:	ldr	r5, [r0]
   15c60:	mov	r0, #0
   15c64:	bl	11230 <dcgettext@plt>
   15c68:	ldr	r2, [r4, #256]	; 0x100
   15c6c:	mov	r1, #3
   15c70:	mov	r6, r0
   15c74:	mov	r0, #0
   15c78:	bl	1a960 <__assert_fail@plt+0x9484>
   15c7c:	mov	r2, r6
   15c80:	mov	r1, r5
   15c84:	mov	r3, r0
   15c88:	mov	r0, #0
   15c8c:	bl	13ee4 <__assert_fail@plt+0x2a08>
   15c90:	mov	r1, #1
   15c94:	mov	r3, #0
   15c98:	mov	r0, r1
   15c9c:	mov	r2, #0
   15ca0:	strb	r1, [r4, #89]	; 0x59
   15ca4:	bl	13f78 <__assert_fail@plt+0x2a9c>
   15ca8:	ldr	r3, [r4, #116]	; 0x74
   15cac:	orr	r3, r3, #32768	; 0x8000
   15cb0:	str	r3, [r4, #116]	; 0x74
   15cb4:	b	15a70 <__assert_fail@plt+0x4594>
   15cb8:	andeq	r2, r3, r8, ror #3
   15cbc:	andeq	r2, r3, r8, ror #4
   15cc0:	andeq	r2, r3, r0, asr r1
   15cc4:	andeq	r0, r2, r0, lsl #10
   15cc8:	push	{r4, r5, r6, r7, r8, lr}
   15ccc:	ldr	r4, [pc, #156]	; 15d70 <__assert_fail@plt+0x4894>
   15cd0:	ldr	r1, [r4, #120]	; 0x78
   15cd4:	ldr	r0, [r4, #124]	; 0x7c
   15cd8:	bl	15a44 <__assert_fail@plt+0x4568>
   15cdc:	ldrd	r2, [r4, #8]
   15ce0:	ldr	r1, [r4, #120]	; 0x78
   15ce4:	adds	r2, r2, r0
   15ce8:	adc	r3, r3, r0, asr #31
   15cec:	cmp	r0, r1
   15cf0:	strd	r2, [r4, #8]
   15cf4:	bne	15d14 <__assert_fail@plt+0x4838>
   15cf8:	ldrd	r2, [r4, #40]	; 0x28
   15cfc:	mov	r1, #0
   15d00:	str	r1, [r4, #276]	; 0x114
   15d04:	adds	r2, r2, #1
   15d08:	adc	r3, r3, #0
   15d0c:	strd	r2, [r4, #40]	; 0x28
   15d10:	pop	{r4, r5, r6, r7, r8, pc}
   15d14:	mov	r5, r0
   15d18:	bl	113a4 <__errno_location@plt>
   15d1c:	mov	r2, #5
   15d20:	ldr	r1, [pc, #76]	; 15d74 <__assert_fail@plt+0x4898>
   15d24:	ldr	r6, [r0]
   15d28:	mov	r0, #0
   15d2c:	bl	11230 <dcgettext@plt>
   15d30:	ldr	r1, [r4, #256]	; 0x100
   15d34:	mov	r7, r0
   15d38:	mov	r0, #4
   15d3c:	bl	19ee4 <__assert_fail@plt+0x8a08>
   15d40:	mov	r2, r7
   15d44:	mov	r1, r6
   15d48:	mov	r3, r0
   15d4c:	mov	r0, #0
   15d50:	bl	13ee4 <__assert_fail@plt+0x2a08>
   15d54:	cmp	r5, #0
   15d58:	beq	15d6c <__assert_fail@plt+0x4890>
   15d5c:	ldrd	r2, [r4, #32]
   15d60:	adds	r2, r2, #1
   15d64:	adc	r3, r3, #0
   15d68:	strd	r2, [r4, #32]
   15d6c:	bl	151e0 <__assert_fail@plt+0x3d04>
   15d70:	andeq	r2, r3, r8, ror #3
   15d74:	andeq	r0, r2, r0, lsr #10
   15d78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15d7c:	subs	r6, r1, #0
   15d80:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d84:	ldr	r4, [pc, #216]	; 15e64 <__assert_fail@plt+0x4988>
   15d88:	ldr	r8, [pc, #216]	; 15e68 <__assert_fail@plt+0x498c>
   15d8c:	sub	r9, r0, #1
   15d90:	ldr	r5, [r4, #280]	; 0x118
   15d94:	mov	r7, #0
   15d98:	b	15ddc <__assert_fail@plt+0x4900>
   15d9c:	ldr	r2, [r4, #284]	; 0x11c
   15da0:	cmp	r2, r5
   15da4:	beq	15e44 <__assert_fail@plt+0x4968>
   15da8:	ble	15dcc <__assert_fail@plt+0x48f0>
   15dac:	ldr	r1, [r4, #276]	; 0x114
   15db0:	ldr	r0, [r4, #124]	; 0x7c
   15db4:	add	r2, r1, #1
   15db8:	str	r2, [r4, #276]	; 0x114
   15dbc:	strb	r3, [r0, r1]
   15dc0:	ldr	r3, [r4, #120]	; 0x78
   15dc4:	cmp	r2, r3
   15dc8:	bge	15e58 <__assert_fail@plt+0x497c>
   15dcc:	add	r5, r5, #1
   15dd0:	subs	r6, r6, #1
   15dd4:	str	r5, [r4, #280]	; 0x118
   15dd8:	beq	15e40 <__assert_fail@plt+0x4964>
   15ddc:	ldrb	r3, [r9, #1]!
   15de0:	ldrb	r2, [r8, #25]
   15de4:	cmp	r2, r3
   15de8:	bne	15d9c <__assert_fail@plt+0x48c0>
   15dec:	ldr	r3, [r4, #284]	; 0x11c
   15df0:	cmp	r3, r5
   15df4:	ble	15e30 <__assert_fail@plt+0x4954>
   15df8:	ldr	r2, [r4, #276]	; 0x114
   15dfc:	ldr	r1, [r4, #124]	; 0x7c
   15e00:	ldrb	r0, [r8, #26]
   15e04:	add	r3, r2, #1
   15e08:	add	r5, r5, #1
   15e0c:	strb	r0, [r1, r2]
   15e10:	ldr	r2, [r4, #120]	; 0x78
   15e14:	str	r3, [r4, #276]	; 0x114
   15e18:	cmp	r3, r2
   15e1c:	blt	15dec <__assert_fail@plt+0x4910>
   15e20:	bl	15cc8 <__assert_fail@plt+0x47ec>
   15e24:	ldr	r3, [r4, #284]	; 0x11c
   15e28:	cmp	r3, r5
   15e2c:	bgt	15df8 <__assert_fail@plt+0x491c>
   15e30:	subs	r6, r6, #1
   15e34:	str	r7, [r4, #280]	; 0x118
   15e38:	mov	r5, #0
   15e3c:	bne	15ddc <__assert_fail@plt+0x4900>
   15e40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e44:	ldrd	r2, [r4, #64]	; 0x40
   15e48:	adds	r2, r2, #1
   15e4c:	adc	r3, r3, #0
   15e50:	strd	r2, [r4, #64]	; 0x40
   15e54:	b	15dcc <__assert_fail@plt+0x48f0>
   15e58:	bl	15cc8 <__assert_fail@plt+0x47ec>
   15e5c:	ldr	r5, [r4, #280]	; 0x118
   15e60:	b	15dcc <__assert_fail@plt+0x48f0>
   15e64:	andeq	r2, r3, r8, ror #3
   15e68:	andeq	r2, r3, r0, asr r1
   15e6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e70:	subs	r5, r1, #0
   15e74:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e78:	mov	r9, #0
   15e7c:	mov	r6, r0
   15e80:	ldr	r4, [pc, #268]	; 15f94 <__assert_fail@plt+0x4ab8>
   15e84:	ldr	sl, [pc, #268]	; 15f98 <__assert_fail@plt+0x4abc>
   15e88:	mov	r7, r9
   15e8c:	b	15ecc <__assert_fail@plt+0x49f0>
   15e90:	ldr	r2, [r4, #276]	; 0x114
   15e94:	ldr	r1, [r4, #124]	; 0x7c
   15e98:	ldrb	r0, [sl, #25]
   15e9c:	add	r3, r2, #1
   15ea0:	str	r7, [r4, #288]	; 0x120
   15ea4:	strb	r0, [r1, r2]
   15ea8:	ldr	r2, [r4, #120]	; 0x78
   15eac:	str	r7, [r4, #280]	; 0x118
   15eb0:	cmp	r3, r2
   15eb4:	sub	r9, r9, #1
   15eb8:	str	r3, [r4, #276]	; 0x114
   15ebc:	bge	15f70 <__assert_fail@plt+0x4a94>
   15ec0:	add	r9, r9, #1
   15ec4:	cmp	r5, r9
   15ec8:	ble	15f80 <__assert_fail@plt+0x4aa4>
   15ecc:	ldr	r3, [r4, #280]	; 0x118
   15ed0:	ldr	r1, [r4, #284]	; 0x11c
   15ed4:	add	r2, r3, #1
   15ed8:	cmp	r3, r1
   15edc:	str	r2, [r4, #280]	; 0x118
   15ee0:	ldrb	r8, [r6, r9]
   15ee4:	bge	15e90 <__assert_fail@plt+0x49b4>
   15ee8:	ldrb	r1, [sl, #26]
   15eec:	cmp	r8, r1
   15ef0:	beq	15f84 <__assert_fail@plt+0x4aa8>
   15ef4:	ldr	r2, [r4, #288]	; 0x120
   15ef8:	ldr	r0, [r4, #124]	; 0x7c
   15efc:	cmp	r2, #0
   15f00:	ldr	r3, [r4, #276]	; 0x114
   15f04:	bne	15f20 <__assert_fail@plt+0x4a44>
   15f08:	b	15f58 <__assert_fail@plt+0x4a7c>
   15f0c:	sub	r2, r2, #1
   15f10:	cmp	r2, #0
   15f14:	str	r2, [r4, #288]	; 0x120
   15f18:	beq	15f58 <__assert_fail@plt+0x4a7c>
   15f1c:	ldrb	r1, [sl, #26]
   15f20:	strb	r1, [r0, r3]
   15f24:	ldr	r1, [r4, #120]	; 0x78
   15f28:	add	r3, r3, #1
   15f2c:	cmp	r3, r1
   15f30:	str	r3, [r4, #276]	; 0x114
   15f34:	blt	15f0c <__assert_fail@plt+0x4a30>
   15f38:	bl	15cc8 <__assert_fail@plt+0x47ec>
   15f3c:	ldr	r2, [r4, #288]	; 0x120
   15f40:	ldr	r0, [r4, #124]	; 0x7c
   15f44:	sub	r2, r2, #1
   15f48:	cmp	r2, #0
   15f4c:	ldr	r3, [r4, #276]	; 0x114
   15f50:	str	r2, [r4, #288]	; 0x120
   15f54:	bne	15f1c <__assert_fail@plt+0x4a40>
   15f58:	strb	r8, [r0, r3]
   15f5c:	ldr	r2, [r4, #120]	; 0x78
   15f60:	add	r3, r3, #1
   15f64:	cmp	r3, r2
   15f68:	str	r3, [r4, #276]	; 0x114
   15f6c:	blt	15ec0 <__assert_fail@plt+0x49e4>
   15f70:	add	r9, r9, #1
   15f74:	bl	15cc8 <__assert_fail@plt+0x47ec>
   15f78:	cmp	r5, r9
   15f7c:	bgt	15ecc <__assert_fail@plt+0x49f0>
   15f80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f84:	ldr	r3, [r4, #288]	; 0x120
   15f88:	add	r3, r3, #1
   15f8c:	str	r3, [r4, #288]	; 0x120
   15f90:	b	15ec0 <__assert_fail@plt+0x49e4>
   15f94:	andeq	r2, r3, r8, ror #3
   15f98:	andeq	r2, r3, r0, asr r1
   15f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fa0:	mov	fp, r0
   15fa4:	ldr	r4, [pc, #552]	; 161d4 <__assert_fail@plt+0x4cf8>
   15fa8:	sub	sp, sp, #148	; 0x94
   15fac:	mov	r9, r2
   15fb0:	add	r8, r4, #128	; 0x80
   15fb4:	mov	r6, #0
   15fb8:	mov	r7, #2
   15fbc:	str	r1, [sp, #12]
   15fc0:	ldr	r3, [r4]
   15fc4:	cmp	r3, #0
   15fc8:	bne	15fd8 <__assert_fail@plt+0x4afc>
   15fcc:	ldr	sl, [r4, #4]
   15fd0:	cmp	sl, #0
   15fd4:	beq	16030 <__assert_fail@plt+0x4b54>
   15fd8:	add	r2, sp, #16
   15fdc:	mov	r1, r8
   15fe0:	mov	r0, r6
   15fe4:	bl	111ac <sigprocmask@plt>
   15fe8:	ldr	r5, [r4]
   15fec:	ldr	r3, [r4, #4]
   15ff0:	mov	r2, r6
   15ff4:	cmp	r3, #0
   15ff8:	subne	r3, r3, #1
   15ffc:	add	r1, sp, #16
   16000:	mov	r0, r7
   16004:	strne	r3, [r4, #4]
   16008:	bl	111ac <sigprocmask@plt>
   1600c:	cmp	r5, #0
   16010:	bne	16068 <__assert_fail@plt+0x4b8c>
   16014:	bl	13d88 <__assert_fail@plt+0x28ac>
   16018:	ldr	r3, [r4]
   1601c:	cmp	r3, #0
   16020:	bne	15fd8 <__assert_fail@plt+0x4afc>
   16024:	ldr	sl, [r4, #4]
   16028:	cmp	sl, #0
   1602c:	bne	15fd8 <__assert_fail@plt+0x4afc>
   16030:	mov	r2, r9
   16034:	ldr	r1, [sp, #12]
   16038:	mov	r0, fp
   1603c:	bl	11194 <read@plt>
   16040:	cmn	r0, #1
   16044:	mov	r5, r0
   16048:	beq	1607c <__assert_fail@plt+0x4ba0>
   1604c:	cmp	r0, #0
   16050:	bge	160ac <__assert_fail@plt+0x4bd0>
   16054:	bl	113a4 <__errno_location@plt>
   16058:	ldr	r2, [r0]
   1605c:	cmp	r2, #4
   16060:	beq	15fc0 <__assert_fail@plt+0x4ae4>
   16064:	b	1609c <__assert_fail@plt+0x4bc0>
   16068:	bl	15038 <__assert_fail@plt+0x3b5c>
   1606c:	bl	13d88 <__assert_fail@plt+0x28ac>
   16070:	mov	r0, r5
   16074:	bl	11164 <raise@plt>
   16078:	b	15fc0 <__assert_fail@plt+0x4ae4>
   1607c:	bl	113a4 <__errno_location@plt>
   16080:	ldr	r2, [r0]
   16084:	cmp	r2, #22
   16088:	bne	1605c <__assert_fail@plt+0x4b80>
   1608c:	ldr	r2, [r4, #292]	; 0x124
   16090:	cmp	r9, r2
   16094:	cmpgt	r2, #0
   16098:	bgt	161c0 <__assert_fail@plt+0x4ce4>
   1609c:	mov	r0, r5
   160a0:	str	r5, [r4, #292]	; 0x124
   160a4:	add	sp, sp, #148	; 0x94
   160a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160ac:	movgt	r2, #1
   160b0:	movle	r2, #0
   160b4:	cmp	r9, r0
   160b8:	movle	r2, #0
   160bc:	andgt	r2, r2, #1
   160c0:	cmp	r2, #0
   160c4:	beq	16144 <__assert_fail@plt+0x4c68>
   160c8:	ldr	r8, [pc, #264]	; 161d8 <__assert_fail@plt+0x4cfc>
   160cc:	mov	r7, sl
   160d0:	mov	sl, #2
   160d4:	ldr	r3, [r4]
   160d8:	add	r2, sp, #16
   160dc:	cmp	r3, #0
   160e0:	mov	r1, r8
   160e4:	mov	r0, r7
   160e8:	bne	160f8 <__assert_fail@plt+0x4c1c>
   160ec:	ldr	r3, [r4, #4]
   160f0:	cmp	r3, #0
   160f4:	beq	1614c <__assert_fail@plt+0x4c70>
   160f8:	bl	111ac <sigprocmask@plt>
   160fc:	ldr	r6, [r4]
   16100:	ldr	r3, [r4, #4]
   16104:	mov	r2, r7
   16108:	cmp	r3, #0
   1610c:	add	r1, sp, #16
   16110:	sub	r3, r3, #1
   16114:	mov	r0, sl
   16118:	strne	r3, [r4, #4]
   1611c:	bl	111ac <sigprocmask@plt>
   16120:	cmp	r6, #0
   16124:	bne	16130 <__assert_fail@plt+0x4c54>
   16128:	bl	13d88 <__assert_fail@plt+0x28ac>
   1612c:	b	160d4 <__assert_fail@plt+0x4bf8>
   16130:	bl	15038 <__assert_fail@plt+0x3b5c>
   16134:	bl	13d88 <__assert_fail@plt+0x28ac>
   16138:	mov	r0, r6
   1613c:	bl	11164 <raise@plt>
   16140:	b	160d4 <__assert_fail@plt+0x4bf8>
   16144:	cmp	r0, #0
   16148:	ble	1609c <__assert_fail@plt+0x4bc0>
   1614c:	ldrb	r3, [r4, #300]	; 0x12c
   16150:	cmp	r3, #0
   16154:	beq	1609c <__assert_fail@plt+0x4bc0>
   16158:	ldr	r6, [r4, #292]	; 0x124
   1615c:	cmp	r9, r6
   16160:	cmpgt	r6, #0
   16164:	ble	1609c <__assert_fail@plt+0x4bc0>
   16168:	ldr	r3, [pc, #108]	; 161dc <__assert_fail@plt+0x4d00>
   1616c:	ldr	r3, [r3, #8]
   16170:	cmp	r3, #1
   16174:	beq	161a8 <__assert_fail@plt+0x4ccc>
   16178:	mov	r3, #5
   1617c:	str	r3, [sp]
   16180:	ldr	r2, [pc, #88]	; 161e0 <__assert_fail@plt+0x4d04>
   16184:	mov	r3, r6
   16188:	ldr	r1, [pc, #84]	; 161e4 <__assert_fail@plt+0x4d08>
   1618c:	mov	r0, #0
   16190:	bl	114c4 <dcngettext@plt>
   16194:	mov	r1, #0
   16198:	mov	r3, r6
   1619c:	mov	r2, r0
   161a0:	mov	r0, r1
   161a4:	bl	13ee4 <__assert_fail@plt+0x2a08>
   161a8:	mov	r3, #0
   161ac:	mov	r0, r5
   161b0:	strb	r3, [r4, #300]	; 0x12c
   161b4:	str	r5, [r4, #292]	; 0x124
   161b8:	add	sp, sp, #148	; 0x94
   161bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161c0:	ldr	r2, [r4, #296]	; 0x128
   161c4:	tst	r2, #65536	; 0x10000
   161c8:	strne	sl, [r0]
   161cc:	movne	r5, sl
   161d0:	b	1609c <__assert_fail@plt+0x4bc0>
   161d4:	andeq	r2, r3, r8, ror #3
   161d8:	andeq	r2, r3, r8, ror #4
   161dc:	andeq	r2, r3, r0, asr r1
   161e0:	andeq	r0, r2, r0, lsr r5
   161e4:	andeq	r0, r2, ip, ror #10
   161e8:	push	{r4, r5, r6, r7, r8, lr}
   161ec:	subs	r4, r2, #0
   161f0:	ble	1623c <__assert_fail@plt+0x4d60>
   161f4:	mov	r7, r0
   161f8:	mov	r5, r1
   161fc:	mov	r6, #0
   16200:	b	16214 <__assert_fail@plt+0x4d38>
   16204:	cmp	r4, #0
   16208:	add	r6, r6, r0
   1620c:	add	r5, r5, r0
   16210:	ble	16234 <__assert_fail@plt+0x4d58>
   16214:	mov	r2, r4
   16218:	mov	r1, r5
   1621c:	mov	r0, r7
   16220:	bl	15f9c <__assert_fail@plt+0x4ac0>
   16224:	cmp	r0, #0
   16228:	sub	r4, r4, r0
   1622c:	poplt	{r4, r5, r6, r7, r8, pc}
   16230:	bne	16204 <__assert_fail@plt+0x4d28>
   16234:	mov	r0, r6
   16238:	pop	{r4, r5, r6, r7, r8, pc}
   1623c:	mov	r0, #0
   16240:	pop	{r4, r5, r6, r7, r8, pc}
   16244:	push	{r4, r5, r6, lr}
   16248:	mov	r4, r0
   1624c:	bl	112c0 <__fpending@plt>
   16250:	ldr	r5, [r4]
   16254:	and	r5, r5, #32
   16258:	mov	r6, r0
   1625c:	mov	r0, r4
   16260:	bl	163c4 <__assert_fail@plt+0x4ee8>
   16264:	cmp	r5, #0
   16268:	mov	r4, r0
   1626c:	bne	1628c <__assert_fail@plt+0x4db0>
   16270:	cmp	r0, #0
   16274:	beq	16284 <__assert_fail@plt+0x4da8>
   16278:	cmp	r6, #0
   1627c:	beq	162a8 <__assert_fail@plt+0x4dcc>
   16280:	mvn	r4, #0
   16284:	mov	r0, r4
   16288:	pop	{r4, r5, r6, pc}
   1628c:	cmp	r0, #0
   16290:	bne	16280 <__assert_fail@plt+0x4da4>
   16294:	bl	113a4 <__errno_location@plt>
   16298:	str	r4, [r0]
   1629c:	mvn	r4, #0
   162a0:	mov	r0, r4
   162a4:	pop	{r4, r5, r6, pc}
   162a8:	bl	113a4 <__errno_location@plt>
   162ac:	ldr	r4, [r0]
   162b0:	subs	r4, r4, #9
   162b4:	mvnne	r4, #0
   162b8:	mov	r0, r4
   162bc:	pop	{r4, r5, r6, pc}
   162c0:	ldr	r3, [pc, #4]	; 162cc <__assert_fail@plt+0x4df0>
   162c4:	str	r0, [r3]
   162c8:	bx	lr
   162cc:	andeq	r2, r3, r8, asr #8
   162d0:	ldr	r3, [pc, #4]	; 162dc <__assert_fail@plt+0x4e00>
   162d4:	strb	r0, [r3, #4]
   162d8:	bx	lr
   162dc:	andeq	r2, r3, r8, asr #8
   162e0:	ldr	r3, [pc, #192]	; 163a8 <__assert_fail@plt+0x4ecc>
   162e4:	push	{r4, r5, r6, lr}
   162e8:	sub	sp, sp, #8
   162ec:	ldr	r0, [r3]
   162f0:	bl	16244 <__assert_fail@plt+0x4d68>
   162f4:	cmp	r0, #0
   162f8:	beq	1631c <__assert_fail@plt+0x4e40>
   162fc:	ldr	r4, [pc, #168]	; 163ac <__assert_fail@plt+0x4ed0>
   16300:	ldrb	r3, [r4, #4]
   16304:	cmp	r3, #0
   16308:	beq	16338 <__assert_fail@plt+0x4e5c>
   1630c:	bl	113a4 <__errno_location@plt>
   16310:	ldr	r3, [r0]
   16314:	cmp	r3, #32
   16318:	bne	16338 <__assert_fail@plt+0x4e5c>
   1631c:	ldr	r3, [pc, #140]	; 163b0 <__assert_fail@plt+0x4ed4>
   16320:	ldr	r0, [r3]
   16324:	bl	16244 <__assert_fail@plt+0x4d68>
   16328:	cmp	r0, #0
   1632c:	bne	16380 <__assert_fail@plt+0x4ea4>
   16330:	add	sp, sp, #8
   16334:	pop	{r4, r5, r6, pc}
   16338:	mov	r2, #5
   1633c:	ldr	r1, [pc, #112]	; 163b4 <__assert_fail@plt+0x4ed8>
   16340:	mov	r0, #0
   16344:	bl	11230 <dcgettext@plt>
   16348:	ldr	r4, [r4]
   1634c:	cmp	r4, #0
   16350:	mov	r5, r0
   16354:	beq	1638c <__assert_fail@plt+0x4eb0>
   16358:	bl	113a4 <__errno_location@plt>
   1635c:	ldr	r6, [r0]
   16360:	mov	r0, r4
   16364:	bl	1a5f4 <__assert_fail@plt+0x9118>
   16368:	mov	r1, r6
   1636c:	str	r5, [sp]
   16370:	ldr	r2, [pc, #64]	; 163b8 <__assert_fail@plt+0x4edc>
   16374:	mov	r3, r0
   16378:	mov	r0, #0
   1637c:	bl	112d8 <error@plt>
   16380:	ldr	r3, [pc, #52]	; 163bc <__assert_fail@plt+0x4ee0>
   16384:	ldr	r0, [r3]
   16388:	bl	111dc <_exit@plt>
   1638c:	bl	113a4 <__errno_location@plt>
   16390:	mov	r3, r5
   16394:	ldr	r2, [pc, #36]	; 163c0 <__assert_fail@plt+0x4ee4>
   16398:	ldr	r1, [r0]
   1639c:	mov	r0, r4
   163a0:	bl	112d8 <error@plt>
   163a4:	b	16380 <__assert_fail@plt+0x4ea4>
   163a8:	ldrdeq	r2, [r3], -ip
   163ac:	andeq	r2, r3, r8, asr #8
   163b0:	ldrdeq	r2, [r3], -r8
   163b4:	andeq	r0, r2, ip, lsr #19
   163b8:	andeq	r0, r2, r0, asr #8
   163bc:	andeq	r2, r3, ip, ror r1
   163c0:	andeq	pc, r1, ip, lsl r5	; <UNPREDICTABLE>
   163c4:	push	{r4, r5, lr}
   163c8:	sub	sp, sp, #12
   163cc:	mov	r4, r0
   163d0:	bl	113f8 <fileno@plt>
   163d4:	cmp	r0, #0
   163d8:	mov	r0, r4
   163dc:	blt	16458 <__assert_fail@plt+0x4f7c>
   163e0:	bl	1132c <__freading@plt>
   163e4:	cmp	r0, #0
   163e8:	bne	16424 <__assert_fail@plt+0x4f48>
   163ec:	mov	r0, r4
   163f0:	bl	1669c <__assert_fail@plt+0x51c0>
   163f4:	cmp	r0, #0
   163f8:	beq	16454 <__assert_fail@plt+0x4f78>
   163fc:	bl	113a4 <__errno_location@plt>
   16400:	mov	r5, r0
   16404:	mov	r0, r4
   16408:	ldr	r4, [r5]
   1640c:	bl	11410 <fclose@plt>
   16410:	cmp	r4, #0
   16414:	mvnne	r0, #0
   16418:	strne	r4, [r5]
   1641c:	add	sp, sp, #12
   16420:	pop	{r4, r5, pc}
   16424:	mov	r0, r4
   16428:	bl	113f8 <fileno@plt>
   1642c:	mov	r3, #1
   16430:	str	r3, [sp]
   16434:	mov	r2, #0
   16438:	mov	r3, #0
   1643c:	bl	112a8 <lseek64@plt>
   16440:	mvn	r3, #0
   16444:	mvn	r2, #0
   16448:	cmp	r1, r3
   1644c:	cmpeq	r0, r2
   16450:	bne	163ec <__assert_fail@plt+0x4f10>
   16454:	mov	r0, r4
   16458:	add	sp, sp, #12
   1645c:	pop	{r4, r5, lr}
   16460:	b	11410 <fclose@plt>
   16464:	push	{r1, r2, r3}
   16468:	push	{r4, r5, r6, r7, lr}
   1646c:	sub	sp, sp, #8
   16470:	add	r3, sp, #32
   16474:	ldr	r1, [sp, #28]
   16478:	str	r3, [sp, #4]
   1647c:	cmp	r1, #0
   16480:	beq	16518 <__assert_fail@plt+0x503c>
   16484:	ldr	r2, [pc, #412]	; 16628 <__assert_fail@plt+0x514c>
   16488:	mov	r5, r0
   1648c:	cmp	r1, r2
   16490:	bne	164dc <__assert_fail@plt+0x5000>
   16494:	ldr	r6, [pc, #400]	; 1662c <__assert_fail@plt+0x5150>
   16498:	ldr	r7, [r3]
   1649c:	add	r2, sp, #36	; 0x24
   164a0:	ldr	r3, [r6]
   164a4:	str	r2, [sp, #4]
   164a8:	cmp	r3, #0
   164ac:	mov	r2, r7
   164b0:	blt	165dc <__assert_fail@plt+0x5100>
   164b4:	bl	11428 <fcntl64@plt>
   164b8:	subs	r4, r0, #0
   164bc:	blt	16560 <__assert_fail@plt+0x5084>
   164c0:	mov	r3, #1
   164c4:	str	r3, [r6]
   164c8:	mov	r0, r4
   164cc:	add	sp, sp, #8
   164d0:	pop	{r4, r5, r6, r7, lr}
   164d4:	add	sp, sp, #12
   164d8:	bx	lr
   164dc:	cmp	r1, #11
   164e0:	beq	16508 <__assert_fail@plt+0x502c>
   164e4:	bgt	16528 <__assert_fail@plt+0x504c>
   164e8:	cmp	r1, #3
   164ec:	beq	16508 <__assert_fail@plt+0x502c>
   164f0:	ble	1661c <__assert_fail@plt+0x5140>
   164f4:	cmp	r1, #8
   164f8:	beq	16548 <__assert_fail@plt+0x506c>
   164fc:	ble	16548 <__assert_fail@plt+0x506c>
   16500:	cmp	r1, #9
   16504:	bne	16548 <__assert_fail@plt+0x506c>
   16508:	mov	r0, r5
   1650c:	bl	11428 <fcntl64@plt>
   16510:	mov	r4, r0
   16514:	b	164c8 <__assert_fail@plt+0x4fec>
   16518:	ldr	r2, [sp, #32]
   1651c:	bl	11428 <fcntl64@plt>
   16520:	mov	r4, r0
   16524:	b	164c8 <__assert_fail@plt+0x4fec>
   16528:	ldr	r3, [pc, #256]	; 16630 <__assert_fail@plt+0x5154>
   1652c:	cmp	r1, r3
   16530:	bgt	165fc <__assert_fail@plt+0x5120>
   16534:	cmp	r1, r2
   16538:	bge	16548 <__assert_fail@plt+0x506c>
   1653c:	sub	r3, r3, #6
   16540:	cmp	r1, r3
   16544:	beq	16508 <__assert_fail@plt+0x502c>
   16548:	ldr	r3, [sp, #4]
   1654c:	mov	r0, r5
   16550:	ldr	r2, [r3]
   16554:	bl	11428 <fcntl64@plt>
   16558:	mov	r4, r0
   1655c:	b	164c8 <__assert_fail@plt+0x4fec>
   16560:	bl	113a4 <__errno_location@plt>
   16564:	ldr	r3, [r0]
   16568:	cmp	r3, #22
   1656c:	bne	164c0 <__assert_fail@plt+0x4fe4>
   16570:	mov	r2, r7
   16574:	mov	r0, r5
   16578:	mov	r1, #0
   1657c:	bl	11428 <fcntl64@plt>
   16580:	subs	r4, r0, #0
   16584:	blt	164c8 <__assert_fail@plt+0x4fec>
   16588:	mvn	r3, #0
   1658c:	str	r3, [r6]
   16590:	mov	r1, #1
   16594:	mov	r0, r4
   16598:	bl	11428 <fcntl64@plt>
   1659c:	subs	r2, r0, #0
   165a0:	blt	165bc <__assert_fail@plt+0x50e0>
   165a4:	orr	r2, r2, #1
   165a8:	mov	r1, #2
   165ac:	mov	r0, r4
   165b0:	bl	11428 <fcntl64@plt>
   165b4:	cmn	r0, #1
   165b8:	bne	164c8 <__assert_fail@plt+0x4fec>
   165bc:	bl	113a4 <__errno_location@plt>
   165c0:	mov	r5, r0
   165c4:	mov	r0, r4
   165c8:	ldr	r6, [r5]
   165cc:	mvn	r4, #0
   165d0:	bl	114b8 <close@plt>
   165d4:	str	r6, [r5]
   165d8:	b	164c8 <__assert_fail@plt+0x4fec>
   165dc:	mov	r1, #0
   165e0:	bl	11428 <fcntl64@plt>
   165e4:	subs	r4, r0, #0
   165e8:	blt	164c8 <__assert_fail@plt+0x4fec>
   165ec:	ldr	r3, [r6]
   165f0:	cmn	r3, #1
   165f4:	beq	16590 <__assert_fail@plt+0x50b4>
   165f8:	b	164c8 <__assert_fail@plt+0x4fec>
   165fc:	ldr	r3, [pc, #48]	; 16634 <__assert_fail@plt+0x5158>
   16600:	cmp	r1, r3
   16604:	beq	16548 <__assert_fail@plt+0x506c>
   16608:	blt	16508 <__assert_fail@plt+0x502c>
   1660c:	add	r3, r3, #1
   16610:	cmp	r1, r3
   16614:	bne	16548 <__assert_fail@plt+0x506c>
   16618:	b	16508 <__assert_fail@plt+0x502c>
   1661c:	cmp	r1, #1
   16620:	bne	16548 <__assert_fail@plt+0x506c>
   16624:	b	16508 <__assert_fail@plt+0x502c>
   16628:	andeq	r0, r0, r6, lsl #8
   1662c:	andeq	r2, r3, r0, asr r4
   16630:	andeq	r0, r0, r7, lsl #8
   16634:	andeq	r0, r0, r9, lsl #8
   16638:	mov	ip, r1
   1663c:	push	{r4, r5, r6, r7, r8, lr}
   16640:	mov	r1, r2
   16644:	mov	r5, r0
   16648:	mov	r2, r3
   1664c:	mov	r0, ip
   16650:	bl	112e4 <open64@plt>
   16654:	sub	r3, r5, r0
   16658:	clz	r3, r3
   1665c:	lsr	r3, r3, #5
   16660:	orrs	r3, r3, r0, lsr #31
   16664:	mov	r4, r0
   16668:	bne	16694 <__assert_fail@plt+0x51b8>
   1666c:	mov	r1, r5
   16670:	bl	1123c <dup2@plt>
   16674:	mov	r7, r0
   16678:	bl	113a4 <__errno_location@plt>
   1667c:	mov	r5, r0
   16680:	mov	r0, r4
   16684:	ldr	r6, [r5]
   16688:	mov	r4, r7
   1668c:	bl	114b8 <close@plt>
   16690:	str	r6, [r5]
   16694:	mov	r0, r4
   16698:	pop	{r4, r5, r6, r7, r8, pc}
   1669c:	push	{r4, lr}
   166a0:	subs	r4, r0, #0
   166a4:	sub	sp, sp, #8
   166a8:	beq	166c4 <__assert_fail@plt+0x51e8>
   166ac:	bl	1132c <__freading@plt>
   166b0:	cmp	r0, #0
   166b4:	beq	166c4 <__assert_fail@plt+0x51e8>
   166b8:	ldr	r3, [r4]
   166bc:	tst	r3, #256	; 0x100
   166c0:	bne	166d4 <__assert_fail@plt+0x51f8>
   166c4:	mov	r0, r4
   166c8:	add	sp, sp, #8
   166cc:	pop	{r4, lr}
   166d0:	b	111a0 <fflush@plt>
   166d4:	mov	r3, #1
   166d8:	str	r3, [sp]
   166dc:	mov	r2, #0
   166e0:	mov	r3, #0
   166e4:	mov	r0, r4
   166e8:	bl	166fc <__assert_fail@plt+0x5220>
   166ec:	mov	r0, r4
   166f0:	add	sp, sp, #8
   166f4:	pop	{r4, lr}
   166f8:	b	111a0 <fflush@plt>
   166fc:	push	{r4, r5, r6, r7, r8, lr}
   16700:	sub	sp, sp, #8
   16704:	ldmib	r0, {ip, lr}
   16708:	mov	r4, r0
   1670c:	ldr	r5, [sp, #32]
   16710:	cmp	lr, ip
   16714:	beq	1672c <__assert_fail@plt+0x5250>
   16718:	str	r5, [sp, #32]
   1671c:	mov	r0, r4
   16720:	add	sp, sp, #8
   16724:	pop	{r4, r5, r6, r7, r8, lr}
   16728:	b	1141c <fseeko64@plt>
   1672c:	ldr	lr, [r0, #20]
   16730:	ldr	ip, [r0, #16]
   16734:	cmp	lr, ip
   16738:	bne	16718 <__assert_fail@plt+0x523c>
   1673c:	ldr	r8, [r0, #36]	; 0x24
   16740:	cmp	r8, #0
   16744:	bne	16718 <__assert_fail@plt+0x523c>
   16748:	mov	r6, r2
   1674c:	mov	r7, r3
   16750:	bl	113f8 <fileno@plt>
   16754:	mov	r2, r6
   16758:	mov	r3, r7
   1675c:	str	r5, [sp]
   16760:	bl	112a8 <lseek64@plt>
   16764:	mvn	r3, #0
   16768:	mvn	r2, #0
   1676c:	cmp	r1, r3
   16770:	cmpeq	r0, r2
   16774:	beq	16794 <__assert_fail@plt+0x52b8>
   16778:	ldr	r3, [r4]
   1677c:	strd	r0, [r4, #80]	; 0x50
   16780:	mov	r0, r8
   16784:	bic	r3, r3, #16
   16788:	str	r3, [r4]
   1678c:	add	sp, sp, #8
   16790:	pop	{r4, r5, r6, r7, r8, pc}
   16794:	mvn	r0, #0
   16798:	b	1678c <__assert_fail@plt+0x52b0>
   1679c:	push	{lr}		; (str lr, [sp, #-4]!)
   167a0:	sub	sp, sp, #12
   167a4:	mov	r1, sp
   167a8:	mov	r0, #1
   167ac:	bl	111d0 <clock_gettime@plt>
   167b0:	cmp	r0, #0
   167b4:	beq	167c0 <__assert_fail@plt+0x52e4>
   167b8:	mov	r0, sp
   167bc:	bl	167e0 <__assert_fail@plt+0x5304>
   167c0:	ldr	r0, [sp, #4]
   167c4:	ldr	r2, [sp]
   167c8:	ldr	r3, [pc, #12]	; 167dc <__assert_fail@plt+0x5300>
   167cc:	asr	r1, r0, #31
   167d0:	smlal	r0, r1, r3, r2
   167d4:	add	sp, sp, #12
   167d8:	pop	{pc}		; (ldr pc, [sp], #4)
   167dc:	blcc	fe6c8fe4 <opterr@@GLIBC_2.4+0xfe696e04>
   167e0:	mov	r1, r0
   167e4:	mov	r0, #0
   167e8:	b	111d0 <clock_gettime@plt>
   167ec:	push	{r4, r5, lr}
   167f0:	sub	sp, sp, #12
   167f4:	mov	r4, r0
   167f8:	mov	r1, sp
   167fc:	mov	r0, #0
   16800:	bl	111d0 <clock_gettime@plt>
   16804:	ldm	sp, {r0, r1}
   16808:	stm	r4, {r0, r1}
   1680c:	mov	r0, r4
   16810:	add	sp, sp, #12
   16814:	pop	{r4, r5, pc}
   16818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1681c:	vpush	{d8-d9}
   16820:	mov	r4, r3
   16824:	ands	r3, r3, #32
   16828:	mov	r9, r1
   1682c:	sub	sp, sp, #108	; 0x6c
   16830:	mov	r8, r0
   16834:	str	r3, [sp, #36]	; 0x24
   16838:	and	r3, r4, #3
   1683c:	str	r3, [sp, #8]
   16840:	movne	r3, #1024	; 0x400
   16844:	moveq	r3, #1000	; 0x3e8
   16848:	str	r2, [sp, #12]
   1684c:	strne	r3, [sp, #40]	; 0x28
   16850:	movne	r2, #1024	; 0x400
   16854:	moveq	r2, #1000	; 0x3e8
   16858:	strne	r3, [sp, #28]
   1685c:	streq	r3, [sp, #40]	; 0x28
   16860:	streq	r3, [sp, #28]
   16864:	mov	r3, #0
   16868:	ldrd	r6, [sp, #160]	; 0xa0
   1686c:	strd	r2, [sp, #16]
   16870:	bl	11470 <localeconv@plt>
   16874:	ldr	r3, [sp, #12]
   16878:	add	r3, r3, #644	; 0x284
   1687c:	str	r3, [sp, #24]
   16880:	ldr	fp, [r0]
   16884:	mov	r5, r0
   16888:	mov	r0, fp
   1688c:	bl	11380 <strlen@plt>
   16890:	ldr	sl, [r5, #4]
   16894:	ldr	r1, [pc, #684]	; 16b48 <__assert_fail@plt+0x566c>
   16898:	mov	r2, r0
   1689c:	sub	r0, r0, #1
   168a0:	cmp	r0, #16
   168a4:	movcs	r2, #1
   168a8:	str	r2, [sp, #48]	; 0x30
   168ac:	mov	r0, sl
   168b0:	movcc	r2, fp
   168b4:	movcs	r2, r1
   168b8:	str	r2, [sp, #52]	; 0x34
   168bc:	bl	11380 <strlen@plt>
   168c0:	ldr	r3, [sp, #24]
   168c4:	ldr	r2, [pc, #640]	; 16b4c <__assert_fail@plt+0x5670>
   168c8:	add	r3, r3, #3
   168cc:	str	r3, [sp, #8]
   168d0:	ldr	r5, [r5, #8]
   168d4:	cmp	r0, #16
   168d8:	movhi	sl, r2
   168dc:	ldrd	r2, [sp, #168]	; 0xa8
   168e0:	str	sl, [sp, #32]
   168e4:	cmp	r3, r7
   168e8:	cmpeq	r2, r6
   168ec:	bhi	16b58 <__assert_fail@plt+0x567c>
   168f0:	mov	r0, r6
   168f4:	mov	r1, r7
   168f8:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   168fc:	orrs	r3, r2, r3
   16900:	bne	16944 <__assert_fail@plt+0x5468>
   16904:	ldrd	r2, [sp, #168]	; 0xa8
   16908:	mov	r0, r6
   1690c:	mov	r1, r7
   16910:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16914:	mov	r2, r0
   16918:	mul	r0, r0, r9
   1691c:	umull	sl, fp, r2, r8
   16920:	mla	r0, r8, r1, r0
   16924:	mov	r3, r1
   16928:	add	fp, r0, fp
   1692c:	mov	r1, fp
   16930:	mov	r0, sl
   16934:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16938:	cmp	r9, r1
   1693c:	cmpeq	r8, r0
   16940:	beq	17210 <__assert_fail@plt+0x5d34>
   16944:	mov	r0, r6
   16948:	mov	r1, r7
   1694c:	bl	1eb3c <__assert_fail@plt+0xd660>
   16950:	vmov	d9, r0, r1
   16954:	ldrd	r0, [sp, #168]	; 0xa8
   16958:	bl	1eb3c <__assert_fail@plt+0xd660>
   1695c:	vmov	d7, r0, r1
   16960:	mov	r0, r8
   16964:	mov	r1, r9
   16968:	vdiv.f64	d8, d9, d7
   1696c:	bl	1eb3c <__assert_fail@plt+0xd660>
   16970:	ands	r8, r4, #16
   16974:	vmov	d7, r0, r1
   16978:	vmul.f64	d8, d8, d7
   1697c:	beq	16f88 <__assert_fail@plt+0x5aac>
   16980:	vldr	s15, [sp, #40]	; 0x28
   16984:	vcvt.f64.s32	d7, s15
   16988:	vmul.f64	d6, d7, d7
   1698c:	vcmpe.f64	d8, d6
   16990:	vmrs	APSR_nzcv, fpscr
   16994:	blt	174e8 <__assert_fail@plt+0x600c>
   16998:	vmul.f64	d5, d7, d6
   1699c:	vcmpe.f64	d8, d5
   169a0:	vmrs	APSR_nzcv, fpscr
   169a4:	blt	174f4 <__assert_fail@plt+0x6018>
   169a8:	vmul.f64	d6, d7, d5
   169ac:	vcmpe.f64	d8, d6
   169b0:	vmrs	APSR_nzcv, fpscr
   169b4:	blt	174fc <__assert_fail@plt+0x6020>
   169b8:	vmul.f64	d5, d7, d6
   169bc:	vcmpe.f64	d8, d5
   169c0:	vmrs	APSR_nzcv, fpscr
   169c4:	blt	17508 <__assert_fail@plt+0x602c>
   169c8:	vmul.f64	d6, d7, d5
   169cc:	vcmpe.f64	d8, d6
   169d0:	vmrs	APSR_nzcv, fpscr
   169d4:	blt	17510 <__assert_fail@plt+0x6034>
   169d8:	vmul.f64	d5, d7, d6
   169dc:	vcmpe.f64	d8, d5
   169e0:	vmrs	APSR_nzcv, fpscr
   169e4:	blt	1751c <__assert_fail@plt+0x6040>
   169e8:	vmul.f64	d6, d7, d5
   169ec:	vcmpe.f64	d8, d6
   169f0:	vmrs	APSR_nzcv, fpscr
   169f4:	blt	17524 <__assert_fail@plt+0x6048>
   169f8:	mov	r9, #8
   169fc:	and	r8, r4, #3
   16a00:	cmp	r8, #1
   16a04:	vdiv.f64	d9, d8, d6
   16a08:	beq	170b4 <__assert_fail@plt+0x5bd8>
   16a0c:	vldr	d7, [pc, #292]	; 16b38 <__assert_fail@plt+0x565c>
   16a10:	vmov	r0, r1, d9
   16a14:	vcmpe.f64	d9, d7
   16a18:	vmrs	APSR_nzcv, fpscr
   16a1c:	bpl	16a64 <__assert_fail@plt+0x5588>
   16a20:	bl	1ecd0 <__assert_fail@plt+0xd7f4>
   16a24:	cmp	r8, #0
   16a28:	mov	r6, r0
   16a2c:	mov	r7, r1
   16a30:	movne	r0, #0
   16a34:	bne	16a50 <__assert_fail@plt+0x5574>
   16a38:	bl	1eb3c <__assert_fail@plt+0xd660>
   16a3c:	vmov	d7, r0, r1
   16a40:	vcmp.f64	d7, d9
   16a44:	vmrs	APSR_nzcv, fpscr
   16a48:	movne	r0, #1
   16a4c:	moveq	r0, #0
   16a50:	adds	r2, r6, r0
   16a54:	adc	r3, r7, #0
   16a58:	mov	r0, r2
   16a5c:	mov	r1, r3
   16a60:	bl	1eb3c <__assert_fail@plt+0xd660>
   16a64:	ldr	r6, [sp, #12]
   16a68:	strd	r0, [sp]
   16a6c:	ldr	r3, [pc, #220]	; 16b50 <__assert_fail@plt+0x5674>
   16a70:	mvn	r2, #0
   16a74:	mov	r1, #1
   16a78:	mov	r0, r6
   16a7c:	bl	113b0 <__sprintf_chk@plt>
   16a80:	ldr	r3, [sp, #48]	; 0x30
   16a84:	mov	r0, r6
   16a88:	add	r6, r3, #1
   16a8c:	bl	11380 <strlen@plt>
   16a90:	ands	r3, r4, #32
   16a94:	cmp	r3, #0
   16a98:	movne	r3, #1
   16a9c:	moveq	r3, #2
   16aa0:	add	r3, r3, r6
   16aa4:	cmp	r0, r3
   16aa8:	mov	r7, r0
   16aac:	bls	17100 <__assert_fail@plt+0x5c24>
   16ab0:	vldr	d7, [pc, #136]	; 16b40 <__assert_fail@plt+0x5664>
   16ab4:	vmul.f64	d9, d9, d7
   16ab8:	vldr	d7, [pc, #120]	; 16b38 <__assert_fail@plt+0x565c>
   16abc:	vcmpe.f64	d9, d7
   16ac0:	vmrs	APSR_nzcv, fpscr
   16ac4:	bpl	16b00 <__assert_fail@plt+0x5624>
   16ac8:	vmov	r0, r1, d9
   16acc:	bl	1ecd0 <__assert_fail@plt+0xd7f4>
   16ad0:	and	r3, r4, #3
   16ad4:	cmp	r3, #0
   16ad8:	mov	r6, r0
   16adc:	mov	r7, r1
   16ae0:	movne	r0, #0
   16ae4:	beq	17434 <__assert_fail@plt+0x5f58>
   16ae8:	adds	r2, r6, r0
   16aec:	adc	r3, r7, #0
   16af0:	mov	r0, r2
   16af4:	mov	r1, r3
   16af8:	bl	1eb3c <__assert_fail@plt+0xd660>
   16afc:	vmov	d9, r0, r1
   16b00:	vldr	d6, [pc, #56]	; 16b40 <__assert_fail@plt+0x5664>
   16b04:	ldr	r7, [sp, #12]
   16b08:	ldr	r3, [pc, #68]	; 16b54 <__assert_fail@plt+0x5678>
   16b0c:	mvn	r2, #0
   16b10:	vdiv.f64	d7, d9, d6
   16b14:	mov	r1, #1
   16b18:	mov	r0, r7
   16b1c:	mov	r6, #0
   16b20:	vstr	d7, [sp]
   16b24:	bl	113b0 <__sprintf_chk@plt>
   16b28:	mov	r0, r7
   16b2c:	bl	11380 <strlen@plt>
   16b30:	mov	r7, r0
   16b34:	b	16fd4 <__assert_fail@plt+0x5af8>
   16b38:	andeq	r0, r0, r0
   16b3c:	mvnsmi	r0, #0
   16b40:	andeq	r0, r0, r0
   16b44:	eormi	r0, r4, r0
   16b48:	ldrdeq	r0, [r2], -r8
   16b4c:	andeq	r0, r2, r0, ror #3
   16b50:	andeq	r0, r2, r4, ror #19
   16b54:	ldrdeq	r0, [r2], -ip
   16b58:	orrs	r3, r6, r7
   16b5c:	beq	16944 <__assert_fail@plt+0x5468>
   16b60:	mov	r2, r6
   16b64:	mov	r3, r7
   16b68:	ldrd	r0, [sp, #168]	; 0xa8
   16b6c:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16b70:	orrs	r3, r2, r3
   16b74:	bne	16944 <__assert_fail@plt+0x5468>
   16b78:	mov	r2, r6
   16b7c:	mov	r3, r7
   16b80:	ldrd	r0, [sp, #168]	; 0xa8
   16b84:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16b88:	mov	sl, r0
   16b8c:	mov	fp, r1
   16b90:	mov	r2, r0
   16b94:	mov	r3, r1
   16b98:	mov	r0, r8
   16b9c:	mov	r1, r9
   16ba0:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16ba4:	mov	r1, #10
   16ba8:	umull	r6, r7, r2, r1
   16bac:	mla	r7, r1, r3, r7
   16bb0:	mov	r2, sl
   16bb4:	mov	r3, fp
   16bb8:	mov	r0, r6
   16bbc:	mov	r1, r7
   16bc0:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16bc4:	mov	r0, r8
   16bc8:	mov	r1, r9
   16bcc:	strd	sl, [sp, #40]	; 0x28
   16bd0:	lsls	r8, r2, #1
   16bd4:	adc	r9, r3, r3
   16bd8:	mov	r2, sl
   16bdc:	mov	r3, fp
   16be0:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16be4:	ldrd	r2, [sp, #40]	; 0x28
   16be8:	mov	sl, r0
   16bec:	mov	fp, r1
   16bf0:	mov	r0, r6
   16bf4:	mov	r1, r7
   16bf8:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16bfc:	ldrd	r2, [sp, #40]	; 0x28
   16c00:	cmp	r3, r9
   16c04:	cmpeq	r2, r8
   16c08:	mov	r6, r0
   16c0c:	bls	17418 <__assert_fail@plt+0x5f3c>
   16c10:	orrs	r3, r8, r9
   16c14:	movne	r8, #1
   16c18:	moveq	r8, #0
   16c1c:	ands	r3, r4, #16
   16c20:	str	r3, [sp, #40]	; 0x28
   16c24:	beq	17324 <__assert_fail@plt+0x5e48>
   16c28:	ldrd	r2, [sp, #16]
   16c2c:	cmp	fp, r3
   16c30:	cmpeq	sl, r2
   16c34:	bcc	17424 <__assert_fail@plt+0x5f48>
   16c38:	mov	r0, sl
   16c3c:	mov	r1, fp
   16c40:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16c44:	ldr	r1, [sp, #28]
   16c48:	add	r2, r2, r2, lsl #2
   16c4c:	add	r7, r6, r2, lsl #1
   16c50:	mov	r0, r7
   16c54:	bl	1e598 <__assert_fail@plt+0xd0bc>
   16c58:	asr	r6, r8, #1
   16c5c:	ldrd	r2, [sp, #16]
   16c60:	mov	r0, sl
   16c64:	add	r9, r6, r1, lsl #1
   16c68:	mov	r1, fp
   16c6c:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16c70:	mov	sl, r0
   16c74:	mov	fp, r1
   16c78:	mov	r0, r7
   16c7c:	ldr	r1, [sp, #28]
   16c80:	bl	1e3ac <__assert_fail@plt+0xced0>
   16c84:	ldr	r3, [sp, #28]
   16c88:	cmp	r3, r9
   16c8c:	mov	r6, r0
   16c90:	bls	1745c <__assert_fail@plt+0x5f80>
   16c94:	cmn	r8, r9
   16c98:	movne	r8, #1
   16c9c:	moveq	r8, #0
   16ca0:	ldrd	r2, [sp, #16]
   16ca4:	cmp	r3, fp
   16ca8:	cmpeq	r2, sl
   16cac:	bhi	175d0 <__assert_fail@plt+0x60f4>
   16cb0:	mov	r0, sl
   16cb4:	mov	r1, fp
   16cb8:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16cbc:	ldr	r1, [sp, #28]
   16cc0:	add	r2, r2, r2, lsl #2
   16cc4:	add	r7, r6, r2, lsl #1
   16cc8:	mov	r0, r7
   16ccc:	bl	1e598 <__assert_fail@plt+0xd0bc>
   16cd0:	asr	r6, r8, #1
   16cd4:	ldrd	r2, [sp, #16]
   16cd8:	mov	r0, sl
   16cdc:	add	r9, r6, r1, lsl #1
   16ce0:	mov	r1, fp
   16ce4:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16ce8:	mov	sl, r0
   16cec:	mov	fp, r1
   16cf0:	mov	r0, r7
   16cf4:	ldr	r1, [sp, #28]
   16cf8:	bl	1e3ac <__assert_fail@plt+0xced0>
   16cfc:	ldr	r3, [sp, #28]
   16d00:	cmp	r3, r9
   16d04:	mov	r6, r0
   16d08:	mov	r7, r0
   16d0c:	bls	17474 <__assert_fail@plt+0x5f98>
   16d10:	cmn	r8, r9
   16d14:	movne	r8, #1
   16d18:	moveq	r8, #0
   16d1c:	ldrd	r2, [sp, #16]
   16d20:	cmp	fp, r3
   16d24:	cmpeq	sl, r2
   16d28:	bcc	175d8 <__assert_fail@plt+0x60fc>
   16d2c:	mov	r0, sl
   16d30:	mov	r1, fp
   16d34:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16d38:	ldr	r9, [sp, #28]
   16d3c:	mov	r1, r9
   16d40:	add	r2, r2, r2, lsl #2
   16d44:	add	r6, r7, r2, lsl #1
   16d48:	mov	r0, r6
   16d4c:	bl	1e598 <__assert_fail@plt+0xd0bc>
   16d50:	asr	r7, r8, #1
   16d54:	ldrd	r2, [sp, #16]
   16d58:	mov	r0, sl
   16d5c:	add	r7, r7, r1, lsl #1
   16d60:	mov	r1, fp
   16d64:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16d68:	mov	sl, r0
   16d6c:	mov	fp, r1
   16d70:	mov	r0, r6
   16d74:	mov	r1, r9
   16d78:	bl	1e3ac <__assert_fail@plt+0xced0>
   16d7c:	cmp	r9, r7
   16d80:	mov	r6, r0
   16d84:	mov	r9, r0
   16d88:	bls	1748c <__assert_fail@plt+0x5fb0>
   16d8c:	cmn	r8, r7
   16d90:	movne	r8, #1
   16d94:	moveq	r8, #0
   16d98:	ldrd	r2, [sp, #16]
   16d9c:	cmp	fp, r3
   16da0:	cmpeq	sl, r2
   16da4:	bcc	175e0 <__assert_fail@plt+0x6104>
   16da8:	mov	r0, sl
   16dac:	mov	r1, fp
   16db0:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16db4:	ldr	r1, [sp, #28]
   16db8:	asr	r7, r8, #1
   16dbc:	add	r2, r2, r2, lsl #2
   16dc0:	add	r6, r9, r2, lsl #1
   16dc4:	mov	r0, r6
   16dc8:	bl	1e598 <__assert_fail@plt+0xd0bc>
   16dcc:	ldrd	r2, [sp, #16]
   16dd0:	mov	r0, sl
   16dd4:	add	r7, r7, r1, lsl #1
   16dd8:	mov	r1, fp
   16ddc:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16de0:	ldr	r9, [sp, #28]
   16de4:	mov	sl, r0
   16de8:	mov	fp, r1
   16dec:	mov	r0, r6
   16df0:	mov	r1, r9
   16df4:	bl	1e3ac <__assert_fail@plt+0xced0>
   16df8:	cmp	r9, r7
   16dfc:	mov	r6, r0
   16e00:	mov	r9, r0
   16e04:	bls	174a4 <__assert_fail@plt+0x5fc8>
   16e08:	cmn	r8, r7
   16e0c:	movne	r8, #1
   16e10:	moveq	r8, #0
   16e14:	ldrd	r2, [sp, #16]
   16e18:	cmp	fp, r3
   16e1c:	cmpeq	sl, r2
   16e20:	bcc	17618 <__assert_fail@plt+0x613c>
   16e24:	mov	r0, sl
   16e28:	mov	r1, fp
   16e2c:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16e30:	ldr	r1, [sp, #28]
   16e34:	asr	r7, r8, #1
   16e38:	add	r2, r2, r2, lsl #2
   16e3c:	add	r6, r9, r2, lsl #1
   16e40:	mov	r0, r6
   16e44:	bl	1e598 <__assert_fail@plt+0xd0bc>
   16e48:	ldrd	r2, [sp, #16]
   16e4c:	mov	r0, sl
   16e50:	add	r7, r7, r1, lsl #1
   16e54:	mov	r1, fp
   16e58:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16e5c:	ldr	r9, [sp, #28]
   16e60:	mov	sl, r0
   16e64:	mov	fp, r1
   16e68:	mov	r0, r6
   16e6c:	mov	r1, r9
   16e70:	bl	1e3ac <__assert_fail@plt+0xced0>
   16e74:	cmp	r9, r7
   16e78:	mov	r6, r0
   16e7c:	mov	r9, r0
   16e80:	bls	174bc <__assert_fail@plt+0x5fe0>
   16e84:	cmn	r8, r7
   16e88:	movne	r8, #1
   16e8c:	moveq	r8, #0
   16e90:	ldrd	r2, [sp, #16]
   16e94:	cmp	r3, fp
   16e98:	cmpeq	r2, sl
   16e9c:	bhi	17620 <__assert_fail@plt+0x6144>
   16ea0:	mov	r0, sl
   16ea4:	mov	r1, fp
   16ea8:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16eac:	ldr	r1, [sp, #28]
   16eb0:	asr	r7, r8, #1
   16eb4:	add	r2, r2, r2, lsl #2
   16eb8:	add	r6, r9, r2, lsl #1
   16ebc:	mov	r0, r6
   16ec0:	bl	1e598 <__assert_fail@plt+0xd0bc>
   16ec4:	ldrd	r2, [sp, #16]
   16ec8:	mov	r0, sl
   16ecc:	add	r7, r7, r1, lsl #1
   16ed0:	mov	r1, fp
   16ed4:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   16ed8:	ldr	r9, [sp, #28]
   16edc:	mov	sl, r0
   16ee0:	mov	fp, r1
   16ee4:	mov	r0, r6
   16ee8:	mov	r1, r9
   16eec:	bl	1e3ac <__assert_fail@plt+0xced0>
   16ef0:	cmp	r9, r7
   16ef4:	mov	r6, r0
   16ef8:	bls	174d4 <__assert_fail@plt+0x5ff8>
   16efc:	cmn	r8, r7
   16f00:	movne	r8, #1
   16f04:	moveq	r8, #0
   16f08:	mov	r9, #6
   16f0c:	cmp	fp, #0
   16f10:	cmpeq	sl, #9
   16f14:	bhi	175c4 <__assert_fail@plt+0x60e8>
   16f18:	and	r3, r4, #3
   16f1c:	cmp	r3, #1
   16f20:	beq	17558 <__assert_fail@plt+0x607c>
   16f24:	cmp	r8, #0
   16f28:	and	r3, r4, #3
   16f2c:	clz	r3, r3
   16f30:	lsr	r3, r3, #5
   16f34:	moveq	r3, #0
   16f38:	cmp	r3, #0
   16f3c:	beq	17530 <__assert_fail@plt+0x6054>
   16f40:	add	r6, r6, #1
   16f44:	cmp	r6, #10
   16f48:	beq	175a8 <__assert_fail@plt+0x60cc>
   16f4c:	add	r7, r6, #48	; 0x30
   16f50:	uxtb	r3, r7
   16f54:	ldr	r2, [sp, #24]
   16f58:	ldr	r0, [sp, #12]
   16f5c:	add	r7, r2, #2
   16f60:	ldr	r2, [sp, #48]	; 0x30
   16f64:	strb	r3, [r0, #646]	; 0x286
   16f68:	sub	r1, r7, r2
   16f6c:	str	r1, [sp, #24]
   16f70:	mov	r0, r1
   16f74:	mov	r8, #0
   16f78:	ldr	r1, [sp, #52]	; 0x34
   16f7c:	bl	111e8 <memcpy@plt>
   16f80:	mov	r6, r8
   16f84:	b	17330 <__assert_fail@plt+0x5e54>
   16f88:	and	r9, r4, #3
   16f8c:	cmp	r9, #1
   16f90:	beq	16fa4 <__assert_fail@plt+0x5ac8>
   16f94:	vldr	d7, [pc, #876]	; 17308 <__assert_fail@plt+0x5e2c>
   16f98:	vcmpe.f64	d8, d7
   16f9c:	vmrs	APSR_nzcv, fpscr
   16fa0:	bmi	171cc <__assert_fail@plt+0x5cf0>
   16fa4:	ldr	r6, [sp, #12]
   16fa8:	ldr	r3, [pc, #872]	; 17318 <__assert_fail@plt+0x5e3c>
   16fac:	mvn	r2, #0
   16fb0:	mov	r1, #1
   16fb4:	mov	r0, r6
   16fb8:	vstr	d8, [sp]
   16fbc:	bl	113b0 <__sprintf_chk@plt>
   16fc0:	mov	r0, r6
   16fc4:	bl	11380 <strlen@plt>
   16fc8:	mov	r6, #0
   16fcc:	mvn	r9, #0
   16fd0:	mov	r7, r0
   16fd4:	ldr	r3, [sp, #8]
   16fd8:	mov	r2, r7
   16fdc:	sub	r8, r3, r7
   16fe0:	mov	r0, r8
   16fe4:	ldr	r1, [sp, #12]
   16fe8:	bl	111b8 <memmove@plt>
   16fec:	sub	r7, r7, r6
   16ff0:	add	r7, r8, r7
   16ff4:	tst	r4, #4
   16ff8:	bne	17134 <__assert_fail@plt+0x5c58>
   16ffc:	tst	r4, #128	; 0x80
   17000:	beq	17098 <__assert_fail@plt+0x5bbc>
   17004:	cmn	r9, #1
   17008:	beq	1721c <__assert_fail@plt+0x5d40>
   1700c:	and	r3, r4, #256	; 0x100
   17010:	orrs	r2, r9, r3
   17014:	beq	17098 <__assert_fail@plt+0x5bbc>
   17018:	tst	r4, #64	; 0x40
   1701c:	ldrne	r1, [sp, #12]
   17020:	addne	r2, r1, #648	; 0x288
   17024:	strne	r2, [sp, #8]
   17028:	movne	r2, #32
   1702c:	strbne	r2, [r1, #647]	; 0x287
   17030:	cmp	r9, #0
   17034:	beq	17628 <__assert_fail@plt+0x614c>
   17038:	ldr	r2, [sp, #36]	; 0x24
   1703c:	ldr	r0, [sp, #8]
   17040:	cmp	r2, #0
   17044:	cmpeq	r9, #1
   17048:	ldr	r2, [sp, #8]
   1704c:	ldrne	r1, [pc, #712]	; 1731c <__assert_fail@plt+0x5e40>
   17050:	moveq	r1, #107	; 0x6b
   17054:	add	r2, r2, #1
   17058:	ldrbne	r1, [r1, r9]
   1705c:	cmp	r3, #0
   17060:	streq	r2, [sp, #8]
   17064:	strb	r1, [r0]
   17068:	beq	17098 <__assert_fail@plt+0x5bbc>
   1706c:	ldr	r3, [sp, #36]	; 0x24
   17070:	cmp	r9, #0
   17074:	cmpne	r3, #0
   17078:	movne	r2, r0
   1707c:	movne	r3, #105	; 0x69
   17080:	strbne	r3, [r2, #1]
   17084:	addne	r2, r2, #2
   17088:	mov	r3, #66	; 0x42
   1708c:	strb	r3, [r2]
   17090:	add	r3, r2, #1
   17094:	str	r3, [sp, #8]
   17098:	ldr	r2, [sp, #8]
   1709c:	mov	r3, #0
   170a0:	mov	r0, r8
   170a4:	strb	r3, [r2]
   170a8:	add	sp, sp, #108	; 0x6c
   170ac:	vpop	{d8-d9}
   170b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170b4:	ldr	r6, [sp, #12]
   170b8:	ldr	r3, [pc, #608]	; 17320 <__assert_fail@plt+0x5e44>
   170bc:	mvn	r2, #0
   170c0:	and	r1, r4, #3
   170c4:	mov	r0, r6
   170c8:	vstr	d9, [sp]
   170cc:	bl	113b0 <__sprintf_chk@plt>
   170d0:	ldr	r3, [sp, #48]	; 0x30
   170d4:	mov	r0, r6
   170d8:	add	r6, r3, #1
   170dc:	bl	11380 <strlen@plt>
   170e0:	ands	r3, r4, #32
   170e4:	cmp	r3, #0
   170e8:	movne	r3, #1
   170ec:	moveq	r3, #2
   170f0:	add	r3, r3, r6
   170f4:	cmp	r3, r0
   170f8:	mov	r7, r0
   170fc:	bcc	17450 <__assert_fail@plt+0x5f74>
   17100:	tst	r4, #8
   17104:	beq	16fd4 <__assert_fail@plt+0x5af8>
   17108:	ldr	r3, [sp, #12]
   1710c:	add	r3, r3, r7
   17110:	ldrb	r3, [r3, #-1]
   17114:	cmp	r3, #48	; 0x30
   17118:	bne	16fd4 <__assert_fail@plt+0x5af8>
   1711c:	vldr	d7, [pc, #492]	; 17310 <__assert_fail@plt+0x5e34>
   17120:	and	r3, r4, #3
   17124:	cmp	r3, #1
   17128:	vmul.f64	d9, d9, d7
   1712c:	beq	16b00 <__assert_fail@plt+0x5624>
   17130:	b	16ab8 <__assert_fail@plt+0x55dc>
   17134:	ldr	r0, [sp, #32]
   17138:	bl	11380 <strlen@plt>
   1713c:	sub	r6, r7, r8
   17140:	mov	r1, r8
   17144:	mov	r2, r6
   17148:	mov	r3, #41	; 0x29
   1714c:	mvn	sl, #0
   17150:	mov	fp, r0
   17154:	add	r0, sp, #60	; 0x3c
   17158:	bl	11290 <__memcpy_chk@plt>
   1715c:	ldr	r8, [sp, #32]
   17160:	b	17168 <__assert_fail@plt+0x5c8c>
   17164:	bl	111e8 <memcpy@plt>
   17168:	ldrb	r3, [r5]
   1716c:	cmp	r3, #0
   17170:	beq	17184 <__assert_fail@plt+0x5ca8>
   17174:	cmp	r3, #255	; 0xff
   17178:	movne	sl, r3
   1717c:	moveq	sl, r6
   17180:	add	r5, r5, #1
   17184:	cmp	sl, r6
   17188:	movcs	sl, r6
   1718c:	sub	r3, r7, sl
   17190:	sub	r6, r6, sl
   17194:	add	r2, sp, #60	; 0x3c
   17198:	add	r1, r2, r6
   1719c:	mov	r0, r3
   171a0:	mov	r2, sl
   171a4:	sub	r7, r3, fp
   171a8:	bl	111e8 <memcpy@plt>
   171ac:	cmp	r6, #0
   171b0:	mov	r2, fp
   171b4:	mov	r1, r8
   171b8:	mov	r3, r0
   171bc:	mov	r0, r7
   171c0:	bne	17164 <__assert_fail@plt+0x5c88>
   171c4:	mov	r8, r3
   171c8:	b	16ffc <__assert_fail@plt+0x5b20>
   171cc:	vmov	r0, r1, d8
   171d0:	bl	1ecd0 <__assert_fail@plt+0xd7f4>
   171d4:	cmp	r9, #0
   171d8:	mov	r6, r0
   171dc:	mov	r7, r1
   171e0:	bne	171fc <__assert_fail@plt+0x5d20>
   171e4:	bl	1eb3c <__assert_fail@plt+0xd660>
   171e8:	vmov	d7, r0, r1
   171ec:	vcmp.f64	d7, d8
   171f0:	vmrs	APSR_nzcv, fpscr
   171f4:	movne	r8, #1
   171f8:	moveq	r8, #0
   171fc:	adds	r0, r6, r8
   17200:	adc	r1, r7, #0
   17204:	bl	1eb3c <__assert_fail@plt+0xd660>
   17208:	vmov	d8, r0, r1
   1720c:	b	16fa4 <__assert_fail@plt+0x5ac8>
   17210:	mov	r8, #0
   17214:	mov	r6, r8
   17218:	b	16c1c <__assert_fail@plt+0x5740>
   1721c:	ldrd	r2, [sp, #168]	; 0xa8
   17220:	cmp	r3, #0
   17224:	cmpeq	r2, #1
   17228:	bls	17548 <__assert_fail@plt+0x606c>
   1722c:	ldrd	r6, [sp, #16]
   17230:	mov	r1, r3
   17234:	mov	r0, r2
   17238:	cmp	r1, r7
   1723c:	cmpeq	r0, r6
   17240:	bls	17550 <__assert_fail@plt+0x6074>
   17244:	mul	r1, r6, r7
   17248:	umull	r2, r3, r6, r6
   1724c:	add	r3, r3, r1, lsl #1
   17250:	ldrd	r0, [sp, #168]	; 0xa8
   17254:	cmp	r1, r3
   17258:	cmpeq	r0, r2
   1725c:	bls	17570 <__assert_fail@plt+0x6094>
   17260:	mul	r3, r6, r3
   17264:	umull	r0, r1, r6, r2
   17268:	mla	r2, r2, r7, r3
   1726c:	add	r1, r2, r1
   17270:	ldrd	r2, [sp, #168]	; 0xa8
   17274:	cmp	r3, r1
   17278:	cmpeq	r2, r0
   1727c:	bls	17578 <__assert_fail@plt+0x609c>
   17280:	mul	r1, r6, r1
   17284:	umull	r2, r3, r6, r0
   17288:	mla	r0, r0, r7, r1
   1728c:	add	r3, r0, r3
   17290:	ldrd	r0, [sp, #168]	; 0xa8
   17294:	cmp	r1, r3
   17298:	cmpeq	r0, r2
   1729c:	bls	17580 <__assert_fail@plt+0x60a4>
   172a0:	mul	r3, r6, r3
   172a4:	umull	r0, r1, r6, r2
   172a8:	mla	r2, r2, r7, r3
   172ac:	add	r1, r2, r1
   172b0:	ldrd	r2, [sp, #168]	; 0xa8
   172b4:	cmp	r3, r1
   172b8:	cmpeq	r2, r0
   172bc:	bls	17588 <__assert_fail@plt+0x60ac>
   172c0:	mul	r1, r6, r1
   172c4:	umull	r2, r3, r6, r0
   172c8:	mla	r0, r0, r7, r1
   172cc:	add	r3, r0, r3
   172d0:	ldrd	r0, [sp, #168]	; 0xa8
   172d4:	cmp	r1, r3
   172d8:	cmpeq	r0, r2
   172dc:	bls	17590 <__assert_fail@plt+0x60b4>
   172e0:	mul	r3, r6, r3
   172e4:	umull	r0, r1, r6, r2
   172e8:	mla	r2, r2, r7, r3
   172ec:	add	r1, r2, r1
   172f0:	ldrd	r2, [sp, #168]	; 0xa8
   172f4:	cmp	r3, r1
   172f8:	cmpeq	r2, r0
   172fc:	movhi	r9, #8
   17300:	movls	r9, #7
   17304:	b	1700c <__assert_fail@plt+0x5b30>
   17308:	andeq	r0, r0, r0
   1730c:	mvnsmi	r0, #0
   17310:	andeq	r0, r0, r0
   17314:	eormi	r0, r4, r0
   17318:	ldrdeq	r0, [r2], -ip
   1731c:			; <UNDEFINED> instruction: 0x000209b8
   17320:	andeq	r0, r2, r4, ror #19
   17324:	ldr	r3, [sp, #8]
   17328:	mvn	r9, #0
   1732c:	str	r3, [sp, #24]
   17330:	and	r3, r4, #3
   17334:	cmp	r3, #1
   17338:	beq	1739c <__assert_fail@plt+0x5ec0>
   1733c:	and	r3, r4, #3
   17340:	cmp	r3, #0
   17344:	bne	173c4 <__assert_fail@plt+0x5ee8>
   17348:	add	r7, r6, r8
   1734c:	cmp	r7, #0
   17350:	ble	173c4 <__assert_fail@plt+0x5ee8>
   17354:	adds	sl, sl, #1
   17358:	adc	fp, fp, #0
   1735c:	ands	r3, r4, #16
   17360:	cmp	r3, #0
   17364:	beq	173c4 <__assert_fail@plt+0x5ee8>
   17368:	ldrd	r2, [sp, #16]
   1736c:	cmp	fp, r3
   17370:	cmpeq	sl, r2
   17374:	bne	173c4 <__assert_fail@plt+0x5ee8>
   17378:	tst	r4, #8
   1737c:	add	r9, r9, #1
   17380:	beq	175e8 <__assert_fail@plt+0x610c>
   17384:	ldr	r2, [sp, #24]
   17388:	mov	r3, #49	; 0x31
   1738c:	sub	r8, r2, #1
   17390:	strb	r3, [r2, #-1]
   17394:	mov	r7, r2
   17398:	b	16ff4 <__assert_fail@plt+0x5b18>
   1739c:	and	r2, sl, #1
   173a0:	adds	r2, r2, r8
   173a4:	mov	r3, #0
   173a8:	adc	r3, r3, r8, asr #31
   173ac:	orr	r7, r2, r3
   173b0:	cmp	r7, #0
   173b4:	moveq	r7, r6
   173b8:	addne	r7, r6, #1
   173bc:	cmp	r7, #5
   173c0:	bgt	17354 <__assert_fail@plt+0x5e78>
   173c4:	ldr	r8, [sp, #24]
   173c8:	mov	r6, #10
   173cc:	mov	r7, #0
   173d0:	mov	r0, sl
   173d4:	mov	r1, fp
   173d8:	mov	r2, r6
   173dc:	mov	r3, r7
   173e0:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   173e4:	mov	r0, sl
   173e8:	mov	r1, fp
   173ec:	mov	r3, r7
   173f0:	add	r2, r2, #48	; 0x30
   173f4:	strb	r2, [r8, #-1]!
   173f8:	mov	r2, r6
   173fc:	bl	1ec84 <__assert_fail@plt+0xd7a8>
   17400:	mov	sl, r0
   17404:	mov	fp, r1
   17408:	orrs	r3, sl, fp
   1740c:	bne	173d0 <__assert_fail@plt+0x5ef4>
   17410:	ldr	r7, [sp, #24]
   17414:	b	16ff4 <__assert_fail@plt+0x5b18>
   17418:	movcc	r8, #3
   1741c:	movcs	r8, #2
   17420:	b	16c1c <__assert_fail@plt+0x5740>
   17424:	ldr	r3, [sp, #8]
   17428:	mov	r9, #0
   1742c:	str	r3, [sp, #24]
   17430:	b	17330 <__assert_fail@plt+0x5e54>
   17434:	bl	1eb3c <__assert_fail@plt+0xd660>
   17438:	vmov	d7, r0, r1
   1743c:	vcmp.f64	d7, d9
   17440:	vmrs	APSR_nzcv, fpscr
   17444:	movne	r0, #1
   17448:	moveq	r0, #0
   1744c:	b	16ae8 <__assert_fail@plt+0x560c>
   17450:	vldr	d7, [pc, #480]	; 17638 <__assert_fail@plt+0x615c>
   17454:	vmul.f64	d9, d9, d7
   17458:	b	16b00 <__assert_fail@plt+0x5624>
   1745c:	mov	r2, r3
   17460:	add	r3, r8, r9
   17464:	cmp	r2, r3
   17468:	movcs	r8, #2
   1746c:	movcc	r8, #3
   17470:	b	16ca0 <__assert_fail@plt+0x57c4>
   17474:	mov	r2, r3
   17478:	add	r3, r8, r9
   1747c:	cmp	r2, r3
   17480:	movcs	r8, #2
   17484:	movcc	r8, #3
   17488:	b	16d1c <__assert_fail@plt+0x5840>
   1748c:	ldr	r3, [sp, #28]
   17490:	add	r7, r8, r7
   17494:	cmp	r3, r7
   17498:	movcs	r8, #2
   1749c:	movcc	r8, #3
   174a0:	b	16d98 <__assert_fail@plt+0x58bc>
   174a4:	ldr	r3, [sp, #28]
   174a8:	add	r7, r8, r7
   174ac:	cmp	r3, r7
   174b0:	movcs	r8, #2
   174b4:	movcc	r8, #3
   174b8:	b	16e14 <__assert_fail@plt+0x5938>
   174bc:	ldr	r3, [sp, #28]
   174c0:	add	r7, r8, r7
   174c4:	cmp	r3, r7
   174c8:	movcs	r8, #2
   174cc:	movcc	r8, #3
   174d0:	b	16e90 <__assert_fail@plt+0x59b4>
   174d4:	add	r7, r8, r7
   174d8:	cmp	r9, r7
   174dc:	movcs	r8, #2
   174e0:	movcc	r8, #3
   174e4:	b	16f08 <__assert_fail@plt+0x5a2c>
   174e8:	vmov.f64	d6, d7
   174ec:	mov	r9, #1
   174f0:	b	169fc <__assert_fail@plt+0x5520>
   174f4:	mov	r9, #2
   174f8:	b	169fc <__assert_fail@plt+0x5520>
   174fc:	vmov.f64	d6, d5
   17500:	mov	r9, #3
   17504:	b	169fc <__assert_fail@plt+0x5520>
   17508:	mov	r9, #4
   1750c:	b	169fc <__assert_fail@plt+0x5520>
   17510:	vmov.f64	d6, d5
   17514:	mov	r9, #5
   17518:	b	169fc <__assert_fail@plt+0x5520>
   1751c:	mov	r9, #6
   17520:	b	169fc <__assert_fail@plt+0x5520>
   17524:	vmov.f64	d6, d5
   17528:	mov	r9, #7
   1752c:	b	169fc <__assert_fail@plt+0x5520>
   17530:	cmp	r6, #0
   17534:	bne	16f4c <__assert_fail@plt+0x5a70>
   17538:	tst	r4, #8
   1753c:	bne	17598 <__assert_fail@plt+0x60bc>
   17540:	mov	r3, #48	; 0x30
   17544:	b	16f54 <__assert_fail@plt+0x5a78>
   17548:	mov	r9, #0
   1754c:	b	1700c <__assert_fail@plt+0x5b30>
   17550:	mov	r9, #1
   17554:	b	1700c <__assert_fail@plt+0x5b30>
   17558:	and	r3, r6, #1
   1755c:	add	r3, r3, r8
   17560:	cmp	r3, #2
   17564:	movle	r3, #0
   17568:	movgt	r3, #1
   1756c:	b	16f38 <__assert_fail@plt+0x5a5c>
   17570:	mov	r9, #2
   17574:	b	1700c <__assert_fail@plt+0x5b30>
   17578:	mov	r9, #3
   1757c:	b	1700c <__assert_fail@plt+0x5b30>
   17580:	mov	r9, #4
   17584:	b	1700c <__assert_fail@plt+0x5b30>
   17588:	mov	r9, #5
   1758c:	b	1700c <__assert_fail@plt+0x5b30>
   17590:	mov	r9, #6
   17594:	b	1700c <__assert_fail@plt+0x5b30>
   17598:	ldr	r3, [sp, #8]
   1759c:	mov	r6, #0
   175a0:	str	r3, [sp, #24]
   175a4:	b	17330 <__assert_fail@plt+0x5e54>
   175a8:	adds	sl, sl, #1
   175ac:	adc	fp, fp, #0
   175b0:	cmp	fp, #0
   175b4:	cmpeq	sl, #10
   175b8:	mov	r8, #0
   175bc:	moveq	r6, r8
   175c0:	bne	17538 <__assert_fail@plt+0x605c>
   175c4:	ldr	r3, [sp, #8]
   175c8:	str	r3, [sp, #24]
   175cc:	b	17330 <__assert_fail@plt+0x5e54>
   175d0:	mov	r9, #1
   175d4:	b	16f0c <__assert_fail@plt+0x5a30>
   175d8:	mov	r9, #2
   175dc:	b	16f0c <__assert_fail@plt+0x5a30>
   175e0:	mov	r9, #3
   175e4:	b	16f0c <__assert_fail@plt+0x5a30>
   175e8:	ldr	ip, [sp, #48]	; 0x30
   175ec:	ldr	r1, [sp, #24]
   175f0:	mvn	r3, ip
   175f4:	add	r3, r1, r3
   175f8:	mov	r2, #48	; 0x30
   175fc:	strb	r2, [r1, #-1]
   17600:	mov	r0, r3
   17604:	ldr	r1, [sp, #52]	; 0x34
   17608:	mov	r2, ip
   1760c:	str	r3, [sp, #24]
   17610:	bl	111e8 <memcpy@plt>
   17614:	b	17384 <__assert_fail@plt+0x5ea8>
   17618:	mov	r9, #4
   1761c:	b	16f0c <__assert_fail@plt+0x5a30>
   17620:	mov	r9, #5
   17624:	b	16f0c <__assert_fail@plt+0x5a30>
   17628:	cmp	r3, #0
   1762c:	ldrne	r2, [sp, #8]
   17630:	bne	17088 <__assert_fail@plt+0x5bac>
   17634:	b	17098 <__assert_fail@plt+0x5bbc>
   17638:	andeq	r0, r0, r0
   1763c:	eormi	r0, r4, r0
   17640:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17644:	subs	r4, r0, #0
   17648:	sub	sp, sp, #20
   1764c:	mov	r8, r1
   17650:	mov	r7, r2
   17654:	beq	17764 <__assert_fail@plt+0x6288>
   17658:	ldrb	r3, [r4]
   1765c:	ldr	r5, [pc, #384]	; 177e4 <__assert_fail@plt+0x6308>
   17660:	cmp	r3, #39	; 0x27
   17664:	addeq	r4, r4, #1
   17668:	mov	r3, #4
   1766c:	add	r2, r5, #12
   17670:	add	r1, r5, #20
   17674:	mov	r0, r4
   17678:	moveq	r9, #164	; 0xa4
   1767c:	moveq	fp, #420	; 0x1a4
   17680:	moveq	sl, #388	; 0x184
   17684:	moveq	r6, #4
   17688:	movne	r9, #160	; 0xa0
   1768c:	movne	fp, #416	; 0x1a0
   17690:	movne	sl, #384	; 0x180
   17694:	movne	r6, #0
   17698:	bl	1dbd4 <__assert_fail@plt+0xc6f8>
   1769c:	cmp	r0, #0
   176a0:	blt	17700 <__assert_fail@plt+0x6224>
   176a4:	add	r5, r5, r0, lsl #2
   176a8:	mov	r1, #0
   176ac:	ldr	ip, [r5, #12]
   176b0:	mov	r0, #1
   176b4:	mov	r2, r0
   176b8:	orr	r6, r6, ip
   176bc:	mov	r3, r1
   176c0:	str	r0, [r7]
   176c4:	str	r1, [r7, #4]
   176c8:	mov	r0, #0
   176cc:	str	r6, [r8]
   176d0:	orrs	r3, r2, r3
   176d4:	bne	176f8 <__assert_fail@plt+0x621c>
   176d8:	ldr	r0, [pc, #264]	; 177e8 <__assert_fail@plt+0x630c>
   176dc:	bl	112f0 <getenv@plt>
   176e0:	mov	r3, #0
   176e4:	cmp	r0, #0
   176e8:	movne	r2, #512	; 0x200
   176ec:	moveq	r2, #1024	; 0x400
   176f0:	mov	r0, #4
   176f4:	strd	r2, [r7]
   176f8:	add	sp, sp, #20
   176fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17700:	ldr	r2, [pc, #228]	; 177ec <__assert_fail@plt+0x6310>
   17704:	mov	r3, r7
   17708:	str	r2, [sp]
   1770c:	add	r1, sp, #12
   17710:	mov	r2, #0
   17714:	mov	r0, r4
   17718:	bl	1cbc8 <__assert_fail@plt+0xb6ec>
   1771c:	cmp	r0, #0
   17720:	bne	177a8 <__assert_fail@plt+0x62cc>
   17724:	ldrb	r3, [r4]
   17728:	sub	r3, r3, #48	; 0x30
   1772c:	cmp	r3, #9
   17730:	bls	1775c <__assert_fail@plt+0x6280>
   17734:	ldr	r2, [sp, #12]
   17738:	cmp	r4, r2
   1773c:	bne	1774c <__assert_fail@plt+0x6270>
   17740:	b	177b8 <__assert_fail@plt+0x62dc>
   17744:	cmp	r2, r4
   17748:	beq	177b8 <__assert_fail@plt+0x62dc>
   1774c:	ldrb	r3, [r4, #1]!
   17750:	sub	r3, r3, #48	; 0x30
   17754:	cmp	r3, #9
   17758:	bhi	17744 <__assert_fail@plt+0x6268>
   1775c:	ldrd	r2, [r7]
   17760:	b	176c8 <__assert_fail@plt+0x61ec>
   17764:	ldr	r0, [pc, #132]	; 177f0 <__assert_fail@plt+0x6314>
   17768:	bl	112f0 <getenv@plt>
   1776c:	subs	r4, r0, #0
   17770:	bne	17658 <__assert_fail@plt+0x617c>
   17774:	ldr	r0, [pc, #120]	; 177f4 <__assert_fail@plt+0x6318>
   17778:	bl	112f0 <getenv@plt>
   1777c:	subs	r4, r0, #0
   17780:	bne	17658 <__assert_fail@plt+0x617c>
   17784:	ldr	r0, [pc, #92]	; 177e8 <__assert_fail@plt+0x630c>
   17788:	bl	112f0 <getenv@plt>
   1778c:	mov	r3, #0
   17790:	mov	r6, #0
   17794:	cmp	r0, #0
   17798:	movne	r2, #512	; 0x200
   1779c:	moveq	r2, #1024	; 0x400
   177a0:	strd	r2, [r7]
   177a4:	b	176c8 <__assert_fail@plt+0x61ec>
   177a8:	mov	r3, #0
   177ac:	str	r3, [r8]
   177b0:	ldrd	r2, [r7]
   177b4:	b	176d0 <__assert_fail@plt+0x61f4>
   177b8:	ldrb	r3, [r2, #-1]
   177bc:	cmp	r3, #66	; 0x42
   177c0:	beq	177cc <__assert_fail@plt+0x62f0>
   177c4:	mov	r6, r9
   177c8:	b	1775c <__assert_fail@plt+0x6280>
   177cc:	ldrb	r3, [r2, #-2]
   177d0:	cmp	r3, #105	; 0x69
   177d4:	movne	r6, sl
   177d8:	bne	1775c <__assert_fail@plt+0x6280>
   177dc:	mov	r9, fp
   177e0:	b	177c4 <__assert_fail@plt+0x62e8>
   177e4:			; <UNDEFINED> instruction: 0x000209b8
   177e8:	andeq	r0, r2, r0, asr #11
   177ec:	andeq	r0, r2, r4, lsl #20
   177f0:	andeq	r0, r2, ip, ror #19
   177f4:	strdeq	r0, [r2], -r8
   177f8:	push	{r4, r5, r6, r7, r8, lr}
   177fc:	cmp	r0, #2
   17800:	ldr	r4, [pc, #148]	; 1789c <__assert_fail@plt+0x63c0>
   17804:	mov	r5, #0
   17808:	sub	sp, sp, #16
   1780c:	ldr	r6, [r4]
   17810:	str	r5, [r4]
   17814:	beq	17830 <__assert_fail@plt+0x6354>
   17818:	ldr	r3, [pc, #128]	; 178a0 <__assert_fail@plt+0x63c4>
   1781c:	mov	r2, #0
   17820:	str	r6, [r4]
   17824:	str	r2, [r3]
   17828:	add	sp, sp, #16
   1782c:	pop	{r4, r5, r6, r7, r8, pc}
   17830:	mov	r8, r3
   17834:	mov	r7, r2
   17838:	str	r5, [sp]
   1783c:	ldr	r3, [pc, #96]	; 178a4 <__assert_fail@plt+0x63c8>
   17840:	ldr	r2, [pc, #96]	; 178a8 <__assert_fail@plt+0x63cc>
   17844:	bl	1135c <getopt_long@plt>
   17848:	cmn	r0, #1
   1784c:	beq	17818 <__assert_fail@plt+0x633c>
   17850:	cmp	r0, #104	; 0x68
   17854:	beq	1788c <__assert_fail@plt+0x63b0>
   17858:	cmp	r0, #118	; 0x76
   1785c:	bne	17818 <__assert_fail@plt+0x633c>
   17860:	ldr	r3, [pc, #68]	; 178ac <__assert_fail@plt+0x63d0>
   17864:	add	ip, sp, #48	; 0x30
   17868:	mov	r2, r8
   1786c:	ldr	r0, [r3]
   17870:	mov	r1, r7
   17874:	str	ip, [sp]
   17878:	ldr	r3, [sp, #40]	; 0x28
   1787c:	str	ip, [sp, #12]
   17880:	bl	1bedc <__assert_fail@plt+0xaa00>
   17884:	mov	r0, r5
   17888:	bl	11374 <exit@plt>
   1788c:	mov	r0, r5
   17890:	ldr	r3, [sp, #44]	; 0x2c
   17894:	blx	r3
   17898:	b	17818 <__assert_fail@plt+0x633c>
   1789c:	andeq	r2, r3, r0, ror #3
   178a0:	ldrdeq	r2, [r3], -r0
   178a4:	andeq	r0, r2, ip, lsr #20
   178a8:	andeq	r0, r2, ip, asr sl
   178ac:	ldrdeq	r2, [r3], -ip
   178b0:	push	{r4, r5, r6, r7, r8, lr}
   178b4:	sub	sp, sp, #16
   178b8:	ldr	r5, [pc, #176]	; 17970 <__assert_fail@plt+0x6494>
   178bc:	ldrb	r8, [sp, #44]	; 0x2c
   178c0:	ldr	r4, [pc, #172]	; 17974 <__assert_fail@plt+0x6498>
   178c4:	ldr	lr, [pc, #172]	; 17978 <__assert_fail@plt+0x649c>
   178c8:	cmp	r8, #0
   178cc:	mov	r6, r2
   178d0:	movne	r2, r5
   178d4:	mov	r5, #0
   178d8:	mov	ip, #1
   178dc:	moveq	r2, lr
   178e0:	mov	r7, r3
   178e4:	str	r5, [sp]
   178e8:	ldr	r3, [pc, #140]	; 1797c <__assert_fail@plt+0x64a0>
   178ec:	ldr	r8, [r4]
   178f0:	str	ip, [r4]
   178f4:	bl	1135c <getopt_long@plt>
   178f8:	cmn	r0, #1
   178fc:	beq	1794c <__assert_fail@plt+0x6470>
   17900:	cmp	r0, #104	; 0x68
   17904:	beq	17958 <__assert_fail@plt+0x647c>
   17908:	cmp	r0, #118	; 0x76
   1790c:	bne	1793c <__assert_fail@plt+0x6460>
   17910:	ldr	r3, [pc, #104]	; 17980 <__assert_fail@plt+0x64a4>
   17914:	add	ip, sp, #52	; 0x34
   17918:	mov	r2, r7
   1791c:	ldr	r0, [r3]
   17920:	mov	r1, r6
   17924:	str	ip, [sp]
   17928:	ldr	r3, [sp, #40]	; 0x28
   1792c:	str	ip, [sp, #12]
   17930:	bl	1bedc <__assert_fail@plt+0xaa00>
   17934:	mov	r0, r5
   17938:	bl	11374 <exit@plt>
   1793c:	ldr	r3, [pc, #64]	; 17984 <__assert_fail@plt+0x64a8>
   17940:	ldr	r0, [r3]
   17944:	ldr	r3, [sp, #48]	; 0x30
   17948:	blx	r3
   1794c:	str	r8, [r4]
   17950:	add	sp, sp, #16
   17954:	pop	{r4, r5, r6, r7, r8, pc}
   17958:	mov	r0, r5
   1795c:	ldr	r3, [sp, #48]	; 0x30
   17960:	blx	r3
   17964:	str	r8, [r4]
   17968:	add	sp, sp, #16
   1796c:	pop	{r4, r5, r6, r7, r8, pc}
   17970:	andeq	r0, r2, r0, ror #3
   17974:	andeq	r2, r3, r0, ror #3
   17978:	andeq	r0, r2, ip, asr sl
   1797c:	andeq	r0, r2, ip, lsr #20
   17980:	ldrdeq	r2, [r3], -ip
   17984:	andeq	r2, r3, ip, ror r1
   17988:	push	{r4, r5, r6, lr}
   1798c:	subs	r4, r0, #0
   17990:	beq	17a04 <__assert_fail@plt+0x6528>
   17994:	mov	r1, #47	; 0x2f
   17998:	bl	11458 <strrchr@plt>
   1799c:	subs	r5, r0, #0
   179a0:	beq	179f0 <__assert_fail@plt+0x6514>
   179a4:	add	r6, r5, #1
   179a8:	sub	r3, r6, r4
   179ac:	cmp	r3, #6
   179b0:	ble	179f0 <__assert_fail@plt+0x6514>
   179b4:	mov	r2, #7
   179b8:	ldr	r1, [pc, #96]	; 17a20 <__assert_fail@plt+0x6544>
   179bc:	sub	r0, r5, #6
   179c0:	bl	11494 <strncmp@plt>
   179c4:	cmp	r0, #0
   179c8:	bne	179f0 <__assert_fail@plt+0x6514>
   179cc:	mov	r2, #3
   179d0:	ldr	r1, [pc, #76]	; 17a24 <__assert_fail@plt+0x6548>
   179d4:	mov	r0, r6
   179d8:	bl	11494 <strncmp@plt>
   179dc:	cmp	r0, #0
   179e0:	movne	r4, r6
   179e4:	ldreq	r3, [pc, #60]	; 17a28 <__assert_fail@plt+0x654c>
   179e8:	addeq	r4, r5, #4
   179ec:	streq	r4, [r3]
   179f0:	ldr	r2, [pc, #52]	; 17a2c <__assert_fail@plt+0x6550>
   179f4:	ldr	r3, [pc, #52]	; 17a30 <__assert_fail@plt+0x6554>
   179f8:	str	r4, [r2]
   179fc:	str	r4, [r3]
   17a00:	pop	{r4, r5, r6, pc}
   17a04:	ldr	r3, [pc, #40]	; 17a34 <__assert_fail@plt+0x6558>
   17a08:	mov	r2, #55	; 0x37
   17a0c:	mov	r1, #1
   17a10:	ldr	r3, [r3]
   17a14:	ldr	r0, [pc, #28]	; 17a38 <__assert_fail@plt+0x655c>
   17a18:	bl	1129c <fwrite@plt>
   17a1c:	bl	114ac <abort@plt>
   17a20:	andeq	r0, r2, r8, lsr #21
   17a24:			; <UNDEFINED> instruction: 0x00020ab0
   17a28:	andeq	r2, r3, r8, asr #3
   17a2c:	andeq	r2, r3, r4, asr r4
   17a30:	andeq	r2, r3, ip, asr #3
   17a34:	ldrdeq	r2, [r3], -r8
   17a38:	andeq	r0, r2, r0, ror sl
   17a3c:	push	{r4, r5, r6, lr}
   17a40:	mov	r4, r0
   17a44:	mov	r5, r1
   17a48:	bl	1e1e4 <__assert_fail@plt+0xcd08>
   17a4c:	ldrb	r3, [r0]
   17a50:	bic	r3, r3, #32
   17a54:	cmp	r3, #85	; 0x55
   17a58:	bne	17ab8 <__assert_fail@plt+0x65dc>
   17a5c:	ldrb	r3, [r0, #1]
   17a60:	bic	r3, r3, #32
   17a64:	cmp	r3, #84	; 0x54
   17a68:	bne	17af4 <__assert_fail@plt+0x6618>
   17a6c:	ldrb	r3, [r0, #2]
   17a70:	bic	r3, r3, #32
   17a74:	cmp	r3, #70	; 0x46
   17a78:	bne	17af4 <__assert_fail@plt+0x6618>
   17a7c:	ldrb	r3, [r0, #3]
   17a80:	cmp	r3, #45	; 0x2d
   17a84:	bne	17af4 <__assert_fail@plt+0x6618>
   17a88:	ldrb	r3, [r0, #4]
   17a8c:	cmp	r3, #56	; 0x38
   17a90:	bne	17af4 <__assert_fail@plt+0x6618>
   17a94:	ldrb	r3, [r0, #5]
   17a98:	cmp	r3, #0
   17a9c:	bne	17af4 <__assert_fail@plt+0x6618>
   17aa0:	ldrb	r2, [r4]
   17aa4:	ldr	r3, [pc, #152]	; 17b44 <__assert_fail@plt+0x6668>
   17aa8:	ldr	r0, [pc, #152]	; 17b48 <__assert_fail@plt+0x666c>
   17aac:	cmp	r2, #96	; 0x60
   17ab0:	movne	r0, r3
   17ab4:	pop	{r4, r5, r6, pc}
   17ab8:	cmp	r3, #71	; 0x47
   17abc:	bne	17af4 <__assert_fail@plt+0x6618>
   17ac0:	ldrb	r3, [r0, #1]
   17ac4:	bic	r3, r3, #32
   17ac8:	cmp	r3, #66	; 0x42
   17acc:	bne	17af4 <__assert_fail@plt+0x6618>
   17ad0:	ldrb	r3, [r0, #2]
   17ad4:	cmp	r3, #49	; 0x31
   17ad8:	bne	17af4 <__assert_fail@plt+0x6618>
   17adc:	ldrb	r3, [r0, #3]
   17ae0:	cmp	r3, #56	; 0x38
   17ae4:	bne	17af4 <__assert_fail@plt+0x6618>
   17ae8:	ldrb	r3, [r0, #4]
   17aec:	cmp	r3, #48	; 0x30
   17af0:	beq	17b08 <__assert_fail@plt+0x662c>
   17af4:	ldr	r3, [pc, #80]	; 17b4c <__assert_fail@plt+0x6670>
   17af8:	cmp	r5, #9
   17afc:	ldr	r0, [pc, #76]	; 17b50 <__assert_fail@plt+0x6674>
   17b00:	movne	r0, r3
   17b04:	pop	{r4, r5, r6, pc}
   17b08:	ldrb	r3, [r0, #5]
   17b0c:	cmp	r3, #51	; 0x33
   17b10:	bne	17af4 <__assert_fail@plt+0x6618>
   17b14:	ldrb	r3, [r0, #6]
   17b18:	cmp	r3, #48	; 0x30
   17b1c:	bne	17af4 <__assert_fail@plt+0x6618>
   17b20:	ldrb	r3, [r0, #7]
   17b24:	cmp	r3, #0
   17b28:	bne	17af4 <__assert_fail@plt+0x6618>
   17b2c:	ldrb	r2, [r4]
   17b30:	ldr	r3, [pc, #28]	; 17b54 <__assert_fail@plt+0x6678>
   17b34:	ldr	r0, [pc, #28]	; 17b58 <__assert_fail@plt+0x667c>
   17b38:	cmp	r2, #96	; 0x60
   17b3c:	movne	r0, r3
   17b40:	pop	{r4, r5, r6, pc}
   17b44:	andeq	r0, r2, ip, lsl #22
   17b48:	andeq	r0, r2, r8, lsl #22
   17b4c:	andeq	r0, r2, ip, lsl fp
   17b50:	andeq	r0, r2, r8, lsl fp
   17b54:	andeq	r0, r2, r4, lsl fp
   17b58:	andeq	r0, r2, r0, lsl fp
   17b5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b60:	sub	sp, sp, #140	; 0x8c
   17b64:	mov	r9, r1
   17b68:	str	r3, [sp, #24]
   17b6c:	mov	r3, #1
   17b70:	mov	sl, r0
   17b74:	str	r2, [sp, #44]	; 0x2c
   17b78:	str	r3, [sp, #28]
   17b7c:	bl	112b4 <__ctype_get_mb_cur_max@plt>
   17b80:	ldr	r3, [sp, #180]	; 0xb4
   17b84:	mov	fp, r9
   17b88:	mov	r9, sl
   17b8c:	lsr	r3, r3, #1
   17b90:	and	r3, r3, #1
   17b94:	str	r3, [sp, #40]	; 0x28
   17b98:	ldr	r3, [sp, #180]	; 0xb4
   17b9c:	mov	r2, #0
   17ba0:	and	r3, r3, #4
   17ba4:	str	r3, [sp, #100]	; 0x64
   17ba8:	ldr	r3, [sp, #180]	; 0xb4
   17bac:	str	r2, [sp, #76]	; 0x4c
   17bb0:	and	r3, r3, #1
   17bb4:	str	r3, [sp, #96]	; 0x60
   17bb8:	str	r2, [sp, #36]	; 0x24
   17bbc:	str	r2, [sp, #56]	; 0x38
   17bc0:	str	r2, [sp, #68]	; 0x44
   17bc4:	str	r2, [sp, #72]	; 0x48
   17bc8:	str	r2, [sp, #84]	; 0x54
   17bcc:	str	r0, [sp, #80]	; 0x50
   17bd0:	ldr	r3, [sp, #176]	; 0xb0
   17bd4:	cmp	r3, #10
   17bd8:	ldrls	pc, [pc, r3, lsl #2]
   17bdc:	b	18db4 <__assert_fail@plt+0x78d8>
   17be0:	andeq	r7, r1, ip, lsl #24
   17be4:	andeq	r7, r1, ip, lsr #30
   17be8:	andeq	r8, r1, r4, lsl #1
   17bec:	andeq	r7, r1, r0, ror #30
   17bf0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17bf4:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17bf8:	andeq	r7, r1, r0, lsl #31
   17bfc:	andeq	r7, r1, r4, lsr #31
   17c00:	andeq	r7, r1, ip, asr #31
   17c04:	andeq	r7, r1, ip, asr #31
   17c08:	andeq	r7, r1, ip, asr #31
   17c0c:	mov	r3, #0
   17c10:	ldr	r1, [sp, #56]	; 0x38
   17c14:	ldr	r2, [sp, #176]	; 0xb0
   17c18:	ldr	lr, [sp, #176]	; 0xb0
   17c1c:	mov	r8, r3
   17c20:	mov	ip, r3
   17c24:	str	r3, [sp, #40]	; 0x28
   17c28:	mov	r3, r1
   17c2c:	cmp	r2, #2
   17c30:	moveq	r3, #0
   17c34:	andne	r3, r3, #1
   17c38:	mov	r0, r3
   17c3c:	str	r3, [sp, #92]	; 0x5c
   17c40:	ldr	r3, [sp, #68]	; 0x44
   17c44:	sub	lr, lr, #2
   17c48:	adds	r2, r3, #0
   17c4c:	movne	r2, #1
   17c50:	and	r3, r1, ip
   17c54:	and	r3, r2, r3
   17c58:	clz	lr, lr
   17c5c:	str	r3, [sp, #88]	; 0x58
   17c60:	lsr	lr, lr, #5
   17c64:	mov	r3, ip
   17c68:	and	r3, r3, lr
   17c6c:	mov	sl, #0
   17c70:	and	r0, r2, r0
   17c74:	str	r3, [sp, #64]	; 0x40
   17c78:	eor	r3, r1, #1
   17c7c:	str	lr, [sp, #52]	; 0x34
   17c80:	str	r0, [sp, #48]	; 0x30
   17c84:	str	r3, [sp, #60]	; 0x3c
   17c88:	ldr	r3, [sp, #24]
   17c8c:	cmn	r3, #1
   17c90:	beq	181c0 <__assert_fail@plt+0x6ce4>
   17c94:	subs	r7, r3, sl
   17c98:	movne	r7, #1
   17c9c:	cmp	r7, #0
   17ca0:	beq	181d8 <__assert_fail@plt+0x6cfc>
   17ca4:	ldr	r3, [sp, #48]	; 0x30
   17ca8:	cmp	r3, #0
   17cac:	beq	18544 <__assert_fail@plt+0x7068>
   17cb0:	ldr	r2, [sp, #68]	; 0x44
   17cb4:	ldr	r1, [sp, #24]
   17cb8:	cmp	r2, #1
   17cbc:	mov	r3, r2
   17cc0:	movls	r3, #0
   17cc4:	movhi	r3, #1
   17cc8:	cmn	r1, #1
   17ccc:	movne	r3, #0
   17cd0:	cmp	r3, #0
   17cd4:	add	r4, sl, r2
   17cd8:	beq	17ce8 <__assert_fail@plt+0x680c>
   17cdc:	ldr	r0, [sp, #44]	; 0x2c
   17ce0:	bl	11380 <strlen@plt>
   17ce4:	str	r0, [sp, #24]
   17ce8:	ldr	r3, [sp, #24]
   17cec:	cmp	r3, r4
   17cf0:	ldr	r3, [sp, #44]	; 0x2c
   17cf4:	add	r5, r3, sl
   17cf8:	bcc	1854c <__assert_fail@plt+0x7070>
   17cfc:	mov	r0, r5
   17d00:	ldr	r2, [sp, #68]	; 0x44
   17d04:	ldr	r1, [sp, #72]	; 0x48
   17d08:	bl	11218 <memcmp@plt>
   17d0c:	cmp	r0, #0
   17d10:	bne	1854c <__assert_fail@plt+0x7070>
   17d14:	ldr	r3, [sp, #40]	; 0x28
   17d18:	cmp	r3, #0
   17d1c:	bne	18f08 <__assert_fail@plt+0x7a2c>
   17d20:	ldrb	r4, [r5]
   17d24:	cmp	r4, #126	; 0x7e
   17d28:	ldrls	pc, [pc, r4, lsl #2]
   17d2c:	b	18e44 <__assert_fail@plt+0x7968>
   17d30:	andeq	r8, r1, r4, lsl #8
   17d34:	andeq	r8, r1, r4, asr #28
   17d38:	andeq	r8, r1, r4, asr #28
   17d3c:	andeq	r8, r1, r4, asr #28
   17d40:	andeq	r8, r1, r4, asr #28
   17d44:	andeq	r8, r1, r4, asr #28
   17d48:	andeq	r8, r1, r4, asr #28
   17d4c:	strdeq	r8, [r1], -r0
   17d50:	ldrdeq	r8, [r1], -ip
   17d54:			; <UNDEFINED> instruction: 0x000183b8
   17d58:	muleq	r1, r8, r3
   17d5c:	andeq	r8, r1, r8, asr #7
   17d60:	andeq	r8, r1, r0, lsl #6
   17d64:	andeq	r8, r1, r4, lsr r5
   17d68:	andeq	r8, r1, r4, asr #28
   17d6c:	andeq	r8, r1, r4, asr #28
   17d70:	andeq	r8, r1, r4, asr #28
   17d74:	andeq	r8, r1, r4, asr #28
   17d78:	andeq	r8, r1, r4, asr #28
   17d7c:	andeq	r8, r1, r4, asr #28
   17d80:	andeq	r8, r1, r4, asr #28
   17d84:	andeq	r8, r1, r4, asr #28
   17d88:	andeq	r8, r1, r4, asr #28
   17d8c:	andeq	r8, r1, r4, asr #28
   17d90:	andeq	r8, r1, r4, asr #28
   17d94:	andeq	r8, r1, r4, asr #28
   17d98:	andeq	r8, r1, r4, asr #28
   17d9c:	andeq	r8, r1, r4, asr #28
   17da0:	andeq	r8, r1, r4, asr #28
   17da4:	andeq	r8, r1, r4, asr #28
   17da8:	andeq	r8, r1, r4, asr #28
   17dac:	andeq	r8, r1, r4, asr #28
   17db0:	andeq	r8, r1, r4, lsr #10
   17db4:	andeq	r8, r1, r4, lsl #10
   17db8:	andeq	r8, r1, r4, lsl #10
   17dbc:	andeq	r8, r1, r4, ror #9
   17dc0:	andeq	r8, r1, r4, lsl #10
   17dc4:	strdeq	r8, [r1], -r0
   17dc8:	andeq	r8, r1, r4, lsl #10
   17dcc:	andeq	r8, r1, ip, asr #5
   17dd0:	andeq	r8, r1, r4, lsl #10
   17dd4:	andeq	r8, r1, r4, lsl #10
   17dd8:	andeq	r8, r1, r4, lsl #10
   17ddc:	strdeq	r8, [r1], -r0
   17de0:	strdeq	r8, [r1], -r0
   17de4:	strdeq	r8, [r1], -r0
   17de8:	strdeq	r8, [r1], -r0
   17dec:	strdeq	r8, [r1], -r0
   17df0:	strdeq	r8, [r1], -r0
   17df4:	strdeq	r8, [r1], -r0
   17df8:	strdeq	r8, [r1], -r0
   17dfc:	strdeq	r8, [r1], -r0
   17e00:	strdeq	r8, [r1], -r0
   17e04:	strdeq	r8, [r1], -r0
   17e08:	strdeq	r8, [r1], -r0
   17e0c:	strdeq	r8, [r1], -r0
   17e10:	strdeq	r8, [r1], -r0
   17e14:	strdeq	r8, [r1], -r0
   17e18:	strdeq	r8, [r1], -r0
   17e1c:	andeq	r8, r1, r4, lsl #10
   17e20:	andeq	r8, r1, r4, lsl #10
   17e24:	andeq	r8, r1, r4, lsl #10
   17e28:	andeq	r8, r1, r4, lsl #10
   17e2c:	andeq	r8, r1, ip, ror r2
   17e30:	andeq	r8, r1, r4, asr #28
   17e34:	strdeq	r8, [r1], -r0
   17e38:	strdeq	r8, [r1], -r0
   17e3c:	strdeq	r8, [r1], -r0
   17e40:	strdeq	r8, [r1], -r0
   17e44:	strdeq	r8, [r1], -r0
   17e48:	strdeq	r8, [r1], -r0
   17e4c:	strdeq	r8, [r1], -r0
   17e50:	strdeq	r8, [r1], -r0
   17e54:	strdeq	r8, [r1], -r0
   17e58:	strdeq	r8, [r1], -r0
   17e5c:	strdeq	r8, [r1], -r0
   17e60:	strdeq	r8, [r1], -r0
   17e64:	strdeq	r8, [r1], -r0
   17e68:	strdeq	r8, [r1], -r0
   17e6c:	strdeq	r8, [r1], -r0
   17e70:	strdeq	r8, [r1], -r0
   17e74:	strdeq	r8, [r1], -r0
   17e78:	strdeq	r8, [r1], -r0
   17e7c:	strdeq	r8, [r1], -r0
   17e80:	strdeq	r8, [r1], -r0
   17e84:	strdeq	r8, [r1], -r0
   17e88:	strdeq	r8, [r1], -r0
   17e8c:	strdeq	r8, [r1], -r0
   17e90:	strdeq	r8, [r1], -r0
   17e94:	strdeq	r8, [r1], -r0
   17e98:	strdeq	r8, [r1], -r0
   17e9c:	andeq	r8, r1, r4, lsl #10
   17ea0:	andeq	r8, r1, r8, asr #4
   17ea4:	strdeq	r8, [r1], -r0
   17ea8:	andeq	r8, r1, r4, lsl #10
   17eac:	strdeq	r8, [r1], -r0
   17eb0:	andeq	r8, r1, r4, lsl #10
   17eb4:	strdeq	r8, [r1], -r0
   17eb8:	strdeq	r8, [r1], -r0
   17ebc:	strdeq	r8, [r1], -r0
   17ec0:	strdeq	r8, [r1], -r0
   17ec4:	strdeq	r8, [r1], -r0
   17ec8:	strdeq	r8, [r1], -r0
   17ecc:	strdeq	r8, [r1], -r0
   17ed0:	strdeq	r8, [r1], -r0
   17ed4:	strdeq	r8, [r1], -r0
   17ed8:	strdeq	r8, [r1], -r0
   17edc:	strdeq	r8, [r1], -r0
   17ee0:	strdeq	r8, [r1], -r0
   17ee4:	strdeq	r8, [r1], -r0
   17ee8:	strdeq	r8, [r1], -r0
   17eec:	strdeq	r8, [r1], -r0
   17ef0:	strdeq	r8, [r1], -r0
   17ef4:	strdeq	r8, [r1], -r0
   17ef8:	strdeq	r8, [r1], -r0
   17efc:	strdeq	r8, [r1], -r0
   17f00:	strdeq	r8, [r1], -r0
   17f04:	strdeq	r8, [r1], -r0
   17f08:	strdeq	r8, [r1], -r0
   17f0c:	strdeq	r8, [r1], -r0
   17f10:	strdeq	r8, [r1], -r0
   17f14:	strdeq	r8, [r1], -r0
   17f18:	strdeq	r8, [r1], -r0
   17f1c:	andeq	r8, r1, r0, lsl #2
   17f20:	andeq	r8, r1, r4, lsl #10
   17f24:	andeq	r8, r1, r0, lsl #2
   17f28:	andeq	r8, r1, r4, ror #9
   17f2c:	mov	r3, #1
   17f30:	str	r3, [sp, #40]	; 0x28
   17f34:	str	r3, [sp, #68]	; 0x44
   17f38:	mov	r8, #0
   17f3c:	ldr	r3, [pc, #4056]	; 18f1c <__assert_fail@plt+0x7a40>
   17f40:	str	r3, [sp, #72]	; 0x48
   17f44:	mov	r3, #2
   17f48:	str	r3, [sp, #176]	; 0xb0
   17f4c:	ldr	r1, [sp, #56]	; 0x38
   17f50:	mov	r2, r3
   17f54:	ldr	ip, [sp, #40]	; 0x28
   17f58:	mov	lr, r3
   17f5c:	b	17c28 <__assert_fail@plt+0x674c>
   17f60:	mov	r3, #1
   17f64:	str	r3, [sp, #56]	; 0x38
   17f68:	str	r3, [sp, #68]	; 0x44
   17f6c:	str	r3, [sp, #40]	; 0x28
   17f70:	ldr	r3, [pc, #4004]	; 18f1c <__assert_fail@plt+0x7a40>
   17f74:	mov	r8, #0
   17f78:	str	r3, [sp, #72]	; 0x48
   17f7c:	b	17f44 <__assert_fail@plt+0x6a68>
   17f80:	mov	r3, #1
   17f84:	str	r3, [sp, #56]	; 0x38
   17f88:	str	r3, [sp, #68]	; 0x44
   17f8c:	str	r3, [sp, #40]	; 0x28
   17f90:	ldr	r3, [pc, #3976]	; 18f20 <__assert_fail@plt+0x7a44>
   17f94:	mov	r8, #0
   17f98:	str	r3, [sp, #72]	; 0x48
   17f9c:	mov	r3, #5
   17fa0:	b	17f48 <__assert_fail@plt+0x6a6c>
   17fa4:	mov	r3, #0
   17fa8:	str	r3, [sp, #40]	; 0x28
   17fac:	mov	r3, #1
   17fb0:	str	r3, [sp, #56]	; 0x38
   17fb4:	mov	r8, #0
   17fb8:	mov	r1, r3
   17fbc:	ldr	r2, [sp, #176]	; 0xb0
   17fc0:	ldr	ip, [sp, #40]	; 0x28
   17fc4:	ldr	lr, [sp, #176]	; 0xb0
   17fc8:	b	17c28 <__assert_fail@plt+0x674c>
   17fcc:	ldr	r3, [sp, #176]	; 0xb0
   17fd0:	cmp	r3, #10
   17fd4:	beq	18018 <__assert_fail@plt+0x6b3c>
   17fd8:	mov	r2, #5
   17fdc:	ldr	r1, [pc, #3904]	; 18f24 <__assert_fail@plt+0x7a48>
   17fe0:	mov	r0, #0
   17fe4:	bl	11230 <dcgettext@plt>
   17fe8:	ldr	r2, [pc, #3892]	; 18f24 <__assert_fail@plt+0x7a48>
   17fec:	cmp	r0, r2
   17ff0:	str	r0, [sp, #188]	; 0xbc
   17ff4:	beq	190b0 <__assert_fail@plt+0x7bd4>
   17ff8:	mov	r2, #5
   17ffc:	ldr	r1, [pc, #3864]	; 18f1c <__assert_fail@plt+0x7a40>
   18000:	mov	r0, #0
   18004:	bl	11230 <dcgettext@plt>
   18008:	ldr	r2, [pc, #3852]	; 18f1c <__assert_fail@plt+0x7a40>
   1800c:	cmp	r0, r2
   18010:	str	r0, [sp, #192]	; 0xc0
   18014:	beq	190a0 <__assert_fail@plt+0x7bc4>
   18018:	ldr	r8, [sp, #40]	; 0x28
   1801c:	cmp	r8, #0
   18020:	movne	r8, #0
   18024:	bne	18054 <__assert_fail@plt+0x6b78>
   18028:	ldr	r3, [sp, #188]	; 0xbc
   1802c:	ldrb	r3, [r3]
   18030:	cmp	r3, #0
   18034:	beq	18054 <__assert_fail@plt+0x6b78>
   18038:	ldr	r2, [sp, #188]	; 0xbc
   1803c:	cmp	fp, r8
   18040:	strbhi	r3, [r9, r8]
   18044:	ldrb	r3, [r2, #1]!
   18048:	add	r8, r8, #1
   1804c:	cmp	r3, #0
   18050:	bne	1803c <__assert_fail@plt+0x6b60>
   18054:	ldr	r0, [sp, #192]	; 0xc0
   18058:	bl	11380 <strlen@plt>
   1805c:	ldr	r3, [sp, #192]	; 0xc0
   18060:	ldr	r2, [sp, #176]	; 0xb0
   18064:	str	r3, [sp, #72]	; 0x48
   18068:	mov	r3, #1
   1806c:	str	r3, [sp, #56]	; 0x38
   18070:	mov	r1, r3
   18074:	ldr	ip, [sp, #40]	; 0x28
   18078:	ldr	lr, [sp, #176]	; 0xb0
   1807c:	str	r0, [sp, #68]	; 0x44
   18080:	b	17c28 <__assert_fail@plt+0x674c>
   18084:	ldr	r3, [sp, #40]	; 0x28
   18088:	cmp	r3, #0
   1808c:	beq	18d34 <__assert_fail@plt+0x7858>
   18090:	mov	r3, #1
   18094:	str	r3, [sp, #68]	; 0x44
   18098:	ldr	r3, [pc, #3708]	; 18f1c <__assert_fail@plt+0x7a40>
   1809c:	str	r3, [sp, #72]	; 0x48
   180a0:	mov	r8, #0
   180a4:	ldr	r1, [sp, #56]	; 0x38
   180a8:	ldr	r2, [sp, #176]	; 0xb0
   180ac:	ldr	ip, [sp, #40]	; 0x28
   180b0:	ldr	lr, [sp, #176]	; 0xb0
   180b4:	b	17c28 <__assert_fail@plt+0x674c>
   180b8:	ldr	r3, [sp, #40]	; 0x28
   180bc:	cmp	r3, #0
   180c0:	beq	18db8 <__assert_fail@plt+0x78dc>
   180c4:	str	r3, [sp, #56]	; 0x38
   180c8:	mov	r3, #1
   180cc:	str	r3, [sp, #68]	; 0x44
   180d0:	ldr	r3, [pc, #3656]	; 18f20 <__assert_fail@plt+0x7a44>
   180d4:	b	1809c <__assert_fail@plt+0x6bc0>
   180d8:	ldr	r3, [sp, #40]	; 0x28
   180dc:	cmp	r3, #0
   180e0:	mov	r3, #1
   180e4:	streq	r3, [sp, #56]	; 0x38
   180e8:	beq	18d34 <__assert_fail@plt+0x7858>
   180ec:	str	r3, [sp, #68]	; 0x44
   180f0:	ldr	r3, [pc, #3620]	; 18f1c <__assert_fail@plt+0x7a40>
   180f4:	mov	r8, #0
   180f8:	str	r3, [sp, #72]	; 0x48
   180fc:	b	17f44 <__assert_fail@plt+0x6a68>
   18100:	ldr	r3, [sp, #24]
   18104:	ldr	r6, [sp, #48]	; 0x30
   18108:	cmn	r3, #1
   1810c:	beq	18768 <__assert_fail@plt+0x728c>
   18110:	subs	r3, r3, #1
   18114:	movne	r3, #1
   18118:	cmp	r3, #0
   1811c:	beq	184e8 <__assert_fail@plt+0x700c>
   18120:	ldr	r1, [sp, #52]	; 0x34
   18124:	mov	r7, r3
   18128:	mov	r3, #0
   1812c:	str	r3, [sp, #32]
   18130:	ldr	r3, [sp, #60]	; 0x3c
   18134:	orr	r2, r1, r3
   18138:	ldr	r3, [sp, #40]	; 0x28
   1813c:	eor	r2, r2, #1
   18140:	orr	r2, r3, r2
   18144:	tst	r2, #255	; 0xff
   18148:	bne	18a6c <__assert_fail@plt+0x7590>
   1814c:	cmp	r6, #0
   18150:	bne	1832c <__assert_fail@plt+0x6e50>
   18154:	ldr	r3, [sp, #36]	; 0x24
   18158:	add	sl, sl, #1
   1815c:	and	r3, r3, r7
   18160:	uxtb	r6, r3
   18164:	cmp	r6, #0
   18168:	beq	18194 <__assert_fail@plt+0x6cb8>
   1816c:	cmp	fp, r8
   18170:	movhi	r3, #39	; 0x27
   18174:	strbhi	r3, [r9, r8]
   18178:	add	r3, r8, #1
   1817c:	cmp	fp, r3
   18180:	movhi	r2, #39	; 0x27
   18184:	add	r8, r8, #2
   18188:	strbhi	r2, [r9, r3]
   1818c:	mov	r3, #0
   18190:	str	r3, [sp, #36]	; 0x24
   18194:	ldr	r2, [sp, #32]
   18198:	cmp	r8, fp
   1819c:	ldr	r3, [sp, #28]
   181a0:	strbcc	r4, [r9, r8]
   181a4:	cmp	r2, #0
   181a8:	moveq	r3, #0
   181ac:	str	r3, [sp, #28]
   181b0:	ldr	r3, [sp, #24]
   181b4:	add	r8, r8, #1
   181b8:	cmn	r3, #1
   181bc:	bne	17c94 <__assert_fail@plt+0x67b8>
   181c0:	ldr	r3, [sp, #44]	; 0x2c
   181c4:	ldrb	r3, [r3, sl]
   181c8:	adds	r7, r3, #0
   181cc:	movne	r7, #1
   181d0:	cmp	r7, #0
   181d4:	bne	17ca4 <__assert_fail@plt+0x67c8>
   181d8:	ldr	r3, [sp, #64]	; 0x40
   181dc:	cmp	r8, #0
   181e0:	movne	r3, #0
   181e4:	andeq	r3, r3, #1
   181e8:	cmp	r3, #0
   181ec:	str	r3, [sp, #64]	; 0x40
   181f0:	bne	18c94 <__assert_fail@plt+0x77b8>
   181f4:	ldr	r3, [sp, #40]	; 0x28
   181f8:	ldr	r2, [sp, #52]	; 0x34
   181fc:	eor	r3, r3, #1
   18200:	ands	r2, r2, r3
   18204:	beq	190c0 <__assert_fail@plt+0x7be4>
   18208:	ldr	r3, [sp, #76]	; 0x4c
   1820c:	cmp	r3, #0
   18210:	beq	19090 <__assert_fail@plt+0x7bb4>
   18214:	ldr	r3, [sp, #28]
   18218:	cmp	r3, #0
   1821c:	bne	1904c <__assert_fail@plt+0x7b70>
   18220:	ldr	r2, [sp, #84]	; 0x54
   18224:	clz	r3, fp
   18228:	cmp	r2, #0
   1822c:	lsr	r3, r3, #5
   18230:	moveq	r3, #0
   18234:	cmp	r3, #0
   18238:	beq	18fec <__assert_fail@plt+0x7b10>
   1823c:	mov	fp, r2
   18240:	str	r3, [sp, #76]	; 0x4c
   18244:	b	17bd0 <__assert_fail@plt+0x66f4>
   18248:	ldr	r3, [sp, #176]	; 0xb0
   1824c:	ldr	r6, [sp, #48]	; 0x30
   18250:	cmp	r3, #2
   18254:	beq	1878c <__assert_fail@plt+0x72b0>
   18258:	ldr	r3, [sp, #88]	; 0x58
   1825c:	cmp	r3, #0
   18260:	beq	18d10 <__assert_fail@plt+0x7834>
   18264:	mov	r3, #0
   18268:	add	sl, sl, #1
   1826c:	ldr	r6, [sp, #36]	; 0x24
   18270:	str	r3, [sp, #32]
   18274:	mov	r4, #92	; 0x5c
   18278:	b	18164 <__assert_fail@plt+0x6c88>
   1827c:	ldr	r3, [sp, #176]	; 0xb0
   18280:	ldr	r6, [sp, #48]	; 0x30
   18284:	cmp	r3, #2
   18288:	beq	187bc <__assert_fail@plt+0x72e0>
   1828c:	cmp	r3, #5
   18290:	bne	18d20 <__assert_fail@plt+0x7844>
   18294:	ldr	r3, [sp, #100]	; 0x64
   18298:	cmp	r3, #0
   1829c:	beq	18d84 <__assert_fail@plt+0x78a8>
   182a0:	ldr	r2, [sp, #24]
   182a4:	add	r3, sl, #2
   182a8:	cmp	r2, r3
   182ac:	bls	182bc <__assert_fail@plt+0x6de0>
   182b0:	ldrb	r4, [r5, #1]
   182b4:	cmp	r4, #63	; 0x3f
   182b8:	beq	18f2c <__assert_fail@plt+0x7a50>
   182bc:	mov	r1, #0
   182c0:	str	r1, [sp, #32]
   182c4:	mov	r4, #63	; 0x3f
   182c8:	b	18130 <__assert_fail@plt+0x6c54>
   182cc:	ldr	r3, [sp, #176]	; 0xb0
   182d0:	ldr	r6, [sp, #48]	; 0x30
   182d4:	cmp	r3, #2
   182d8:	beq	187e8 <__assert_fail@plt+0x730c>
   182dc:	str	r7, [sp, #32]
   182e0:	str	r7, [sp, #76]	; 0x4c
   182e4:	mov	r1, #0
   182e8:	mov	r4, #39	; 0x27
   182ec:	b	18130 <__assert_fail@plt+0x6c54>
   182f0:	ldr	r6, [sp, #48]	; 0x30
   182f4:	ldr	r1, [sp, #52]	; 0x34
   182f8:	str	r7, [sp, #32]
   182fc:	b	18130 <__assert_fail@plt+0x6c54>
   18300:	ldr	r6, [sp, #48]	; 0x30
   18304:	ldr	r1, [sp, #52]	; 0x34
   18308:	mov	r4, #12
   1830c:	mov	r3, #102	; 0x66
   18310:	ldr	r2, [sp, #56]	; 0x38
   18314:	cmp	r2, #0
   18318:	streq	r2, [sp, #32]
   1831c:	beq	18130 <__assert_fail@plt+0x6c54>
   18320:	mov	r4, r3
   18324:	mov	r3, #0
   18328:	str	r3, [sp, #32]
   1832c:	ldr	r3, [sp, #40]	; 0x28
   18330:	cmp	r3, #0
   18334:	bne	18aa4 <__assert_fail@plt+0x75c8>
   18338:	ldr	r3, [sp, #36]	; 0x24
   1833c:	eor	r3, r3, #1
   18340:	and	r3, r3, r1
   18344:	ands	r3, r3, #255	; 0xff
   18348:	beq	18380 <__assert_fail@plt+0x6ea4>
   1834c:	cmp	fp, r8
   18350:	movhi	r2, #39	; 0x27
   18354:	strbhi	r2, [r9, r8]
   18358:	add	r2, r8, #1
   1835c:	cmp	fp, r2
   18360:	movhi	r1, #36	; 0x24
   18364:	strbhi	r1, [r9, r2]
   18368:	add	r2, r8, #2
   1836c:	cmp	fp, r2
   18370:	add	r8, r8, #3
   18374:	movhi	r1, #39	; 0x27
   18378:	strbhi	r1, [r9, r2]
   1837c:	str	r3, [sp, #36]	; 0x24
   18380:	cmp	fp, r8
   18384:	movhi	r3, #92	; 0x5c
   18388:	strbhi	r3, [r9, r8]
   1838c:	add	sl, sl, #1
   18390:	add	r8, r8, #1
   18394:	b	18194 <__assert_fail@plt+0x6cb8>
   18398:	ldr	r6, [sp, #48]	; 0x30
   1839c:	mov	r4, #10
   183a0:	mov	r3, #110	; 0x6e
   183a4:	ldr	r2, [sp, #64]	; 0x40
   183a8:	cmp	r2, #0
   183ac:	bne	18e2c <__assert_fail@plt+0x7950>
   183b0:	ldr	r1, [sp, #52]	; 0x34
   183b4:	b	18310 <__assert_fail@plt+0x6e34>
   183b8:	ldr	r6, [sp, #48]	; 0x30
   183bc:	ldr	r1, [sp, #52]	; 0x34
   183c0:	mov	r3, #116	; 0x74
   183c4:	b	18310 <__assert_fail@plt+0x6e34>
   183c8:	ldr	r6, [sp, #48]	; 0x30
   183cc:	ldr	r1, [sp, #52]	; 0x34
   183d0:	mov	r4, #11
   183d4:	mov	r3, #118	; 0x76
   183d8:	b	18310 <__assert_fail@plt+0x6e34>
   183dc:	ldr	r6, [sp, #48]	; 0x30
   183e0:	ldr	r1, [sp, #52]	; 0x34
   183e4:	mov	r4, #8
   183e8:	mov	r3, #98	; 0x62
   183ec:	b	18310 <__assert_fail@plt+0x6e34>
   183f0:	ldr	r6, [sp, #48]	; 0x30
   183f4:	ldr	r1, [sp, #52]	; 0x34
   183f8:	mov	r4, #7
   183fc:	mov	r3, #97	; 0x61
   18400:	b	18310 <__assert_fail@plt+0x6e34>
   18404:	ldr	r3, [sp, #56]	; 0x38
   18408:	ldr	r6, [sp, #48]	; 0x30
   1840c:	cmp	r3, #0
   18410:	beq	188d4 <__assert_fail@plt+0x73f8>
   18414:	ldr	r3, [sp, #40]	; 0x28
   18418:	cmp	r3, #0
   1841c:	bne	18f08 <__assert_fail@plt+0x7a2c>
   18420:	ldr	r3, [sp, #36]	; 0x24
   18424:	ldr	r2, [sp, #52]	; 0x34
   18428:	eor	r3, r3, #1
   1842c:	ands	r3, r2, r3
   18430:	moveq	r2, r8
   18434:	beq	1846c <__assert_fail@plt+0x6f90>
   18438:	cmp	fp, r8
   1843c:	movhi	r2, #39	; 0x27
   18440:	strbhi	r2, [r9, r8]
   18444:	add	r2, r8, #1
   18448:	cmp	fp, r2
   1844c:	movhi	r1, #36	; 0x24
   18450:	strbhi	r1, [r9, r2]
   18454:	add	r2, r8, #2
   18458:	cmp	fp, r2
   1845c:	movhi	r1, #39	; 0x27
   18460:	strbhi	r1, [r9, r2]
   18464:	add	r2, r8, #3
   18468:	str	r3, [sp, #36]	; 0x24
   1846c:	cmp	fp, r2
   18470:	movhi	r3, #92	; 0x5c
   18474:	strbhi	r3, [r9, r2]
   18478:	ldr	r3, [sp, #92]	; 0x5c
   1847c:	add	r8, r2, #1
   18480:	cmp	r3, #0
   18484:	beq	18e08 <__assert_fail@plt+0x792c>
   18488:	ldr	r1, [sp, #24]
   1848c:	add	r3, sl, #1
   18490:	cmp	r1, r3
   18494:	bls	184cc <__assert_fail@plt+0x6ff0>
   18498:	ldr	r1, [sp, #44]	; 0x2c
   1849c:	ldrb	r3, [r1, r3]
   184a0:	sub	r3, r3, #48	; 0x30
   184a4:	cmp	r3, #9
   184a8:	bhi	184cc <__assert_fail@plt+0x6ff0>
   184ac:	cmp	fp, r8
   184b0:	movhi	r3, #48	; 0x30
   184b4:	strbhi	r3, [r9, r8]
   184b8:	add	r3, r2, #2
   184bc:	cmp	fp, r3
   184c0:	add	r8, r2, #3
   184c4:	movhi	r1, #48	; 0x30
   184c8:	strbhi	r1, [r9, r3]
   184cc:	ldr	r3, [sp, #40]	; 0x28
   184d0:	ldr	r1, [sp, #52]	; 0x34
   184d4:	mov	r7, r3
   184d8:	str	r3, [sp, #32]
   184dc:	mov	r4, #48	; 0x30
   184e0:	b	18130 <__assert_fail@plt+0x6c54>
   184e4:	ldr	r6, [sp, #48]	; 0x30
   184e8:	cmp	sl, #0
   184ec:	streq	r7, [sp, #32]
   184f0:	beq	18510 <__assert_fail@plt+0x7034>
   184f4:	mov	r3, #0
   184f8:	ldr	r1, [sp, #52]	; 0x34
   184fc:	str	r3, [sp, #32]
   18500:	b	18130 <__assert_fail@plt+0x6c54>
   18504:	ldr	r6, [sp, #48]	; 0x30
   18508:	mov	r3, #0
   1850c:	str	r3, [sp, #32]
   18510:	ldr	r3, [sp, #64]	; 0x40
   18514:	cmp	r3, #0
   18518:	bne	18c94 <__assert_fail@plt+0x77b8>
   1851c:	ldr	r1, [sp, #52]	; 0x34
   18520:	b	18130 <__assert_fail@plt+0x6c54>
   18524:	ldr	r3, [sp, #48]	; 0x30
   18528:	mov	r6, r3
   1852c:	str	r3, [sp, #32]
   18530:	b	18510 <__assert_fail@plt+0x7034>
   18534:	ldr	r6, [sp, #48]	; 0x30
   18538:	mov	r4, #13
   1853c:	mov	r3, #114	; 0x72
   18540:	b	183a4 <__assert_fail@plt+0x6ec8>
   18544:	ldr	r3, [sp, #44]	; 0x2c
   18548:	add	r5, r3, sl
   1854c:	ldrb	r4, [r5]
   18550:	cmp	r4, #126	; 0x7e
   18554:	ldrls	pc, [pc, r4, lsl #2]
   18558:	b	188f4 <__assert_fail@plt+0x7418>
   1855c:	andeq	r8, r1, r4, asr #17
   18560:	strdeq	r8, [r1], -r4
   18564:	strdeq	r8, [r1], -r4
   18568:	strdeq	r8, [r1], -r4
   1856c:	strdeq	r8, [r1], -r4
   18570:	strdeq	r8, [r1], -r4
   18574:	strdeq	r8, [r1], -r4
   18578:			; <UNDEFINED> instruction: 0x000188bc
   1857c:			; <UNDEFINED> instruction: 0x000188b4
   18580:	andeq	r8, r1, r8, lsr #17
   18584:	andeq	r8, r1, r0, lsr #17
   18588:	muleq	r1, r8, r8
   1858c:	muleq	r1, r0, r8
   18590:	andeq	r8, r1, r8, lsl #17
   18594:	strdeq	r8, [r1], -r4
   18598:	strdeq	r8, [r1], -r4
   1859c:	strdeq	r8, [r1], -r4
   185a0:	strdeq	r8, [r1], -r4
   185a4:	strdeq	r8, [r1], -r4
   185a8:	strdeq	r8, [r1], -r4
   185ac:	strdeq	r8, [r1], -r4
   185b0:	strdeq	r8, [r1], -r4
   185b4:	strdeq	r8, [r1], -r4
   185b8:	strdeq	r8, [r1], -r4
   185bc:	strdeq	r8, [r1], -r4
   185c0:	strdeq	r8, [r1], -r4
   185c4:	strdeq	r8, [r1], -r4
   185c8:	strdeq	r8, [r1], -r4
   185cc:	strdeq	r8, [r1], -r4
   185d0:	strdeq	r8, [r1], -r4
   185d4:	strdeq	r8, [r1], -r4
   185d8:	strdeq	r8, [r1], -r4
   185dc:	andeq	r8, r1, ip, ror r8
   185e0:	andeq	r8, r1, r4, ror r8
   185e4:	andeq	r8, r1, r4, ror r8
   185e8:	andeq	r8, r1, ip, ror #16
   185ec:	andeq	r8, r1, r4, ror r8
   185f0:	andeq	r8, r1, r4, ror #16
   185f4:	andeq	r8, r1, r4, ror r8
   185f8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185fc:	andeq	r8, r1, r4, ror r8
   18600:	andeq	r8, r1, r4, ror r8
   18604:	andeq	r8, r1, r4, ror r8
   18608:	andeq	r8, r1, r4, ror #16
   1860c:	andeq	r8, r1, r4, ror #16
   18610:	andeq	r8, r1, r4, ror #16
   18614:	andeq	r8, r1, r4, ror #16
   18618:	andeq	r8, r1, r4, ror #16
   1861c:	andeq	r8, r1, r4, ror #16
   18620:	andeq	r8, r1, r4, ror #16
   18624:	andeq	r8, r1, r4, ror #16
   18628:	andeq	r8, r1, r4, ror #16
   1862c:	andeq	r8, r1, r4, ror #16
   18630:	andeq	r8, r1, r4, ror #16
   18634:	andeq	r8, r1, r4, ror #16
   18638:	andeq	r8, r1, r4, ror #16
   1863c:	andeq	r8, r1, r4, ror #16
   18640:	andeq	r8, r1, r4, ror #16
   18644:	andeq	r8, r1, r4, ror #16
   18648:	andeq	r8, r1, r4, ror r8
   1864c:	andeq	r8, r1, r4, ror r8
   18650:	andeq	r8, r1, r4, ror r8
   18654:	andeq	r8, r1, r4, ror r8
   18658:	andeq	r8, r1, ip, lsr #15
   1865c:	strdeq	r8, [r1], -r4
   18660:	andeq	r8, r1, r4, ror #16
   18664:	andeq	r8, r1, r4, ror #16
   18668:	andeq	r8, r1, r4, ror #16
   1866c:	andeq	r8, r1, r4, ror #16
   18670:	andeq	r8, r1, r4, ror #16
   18674:	andeq	r8, r1, r4, ror #16
   18678:	andeq	r8, r1, r4, ror #16
   1867c:	andeq	r8, r1, r4, ror #16
   18680:	andeq	r8, r1, r4, ror #16
   18684:	andeq	r8, r1, r4, ror #16
   18688:	andeq	r8, r1, r4, ror #16
   1868c:	andeq	r8, r1, r4, ror #16
   18690:	andeq	r8, r1, r4, ror #16
   18694:	andeq	r8, r1, r4, ror #16
   18698:	andeq	r8, r1, r4, ror #16
   1869c:	andeq	r8, r1, r4, ror #16
   186a0:	andeq	r8, r1, r4, ror #16
   186a4:	andeq	r8, r1, r4, ror #16
   186a8:	andeq	r8, r1, r4, ror #16
   186ac:	andeq	r8, r1, r4, ror #16
   186b0:	andeq	r8, r1, r4, ror #16
   186b4:	andeq	r8, r1, r4, ror #16
   186b8:	andeq	r8, r1, r4, ror #16
   186bc:	andeq	r8, r1, r4, ror #16
   186c0:	andeq	r8, r1, r4, ror #16
   186c4:	andeq	r8, r1, r4, ror #16
   186c8:	andeq	r8, r1, r4, ror r8
   186cc:	andeq	r8, r1, ip, ror r7
   186d0:	andeq	r8, r1, r4, ror #16
   186d4:	andeq	r8, r1, r4, ror r8
   186d8:	andeq	r8, r1, r4, ror #16
   186dc:	andeq	r8, r1, r4, ror r8
   186e0:	andeq	r8, r1, r4, ror #16
   186e4:	andeq	r8, r1, r4, ror #16
   186e8:	andeq	r8, r1, r4, ror #16
   186ec:	andeq	r8, r1, r4, ror #16
   186f0:	andeq	r8, r1, r4, ror #16
   186f4:	andeq	r8, r1, r4, ror #16
   186f8:	andeq	r8, r1, r4, ror #16
   186fc:	andeq	r8, r1, r4, ror #16
   18700:	andeq	r8, r1, r4, ror #16
   18704:	andeq	r8, r1, r4, ror #16
   18708:	andeq	r8, r1, r4, ror #16
   1870c:	andeq	r8, r1, r4, ror #16
   18710:	andeq	r8, r1, r4, ror #16
   18714:	andeq	r8, r1, r4, ror #16
   18718:	andeq	r8, r1, r4, ror #16
   1871c:	andeq	r8, r1, r4, ror #16
   18720:	andeq	r8, r1, r4, ror #16
   18724:	andeq	r8, r1, r4, ror #16
   18728:	andeq	r8, r1, r4, ror #16
   1872c:	andeq	r8, r1, r4, ror #16
   18730:	andeq	r8, r1, r4, ror #16
   18734:	andeq	r8, r1, r4, ror #16
   18738:	andeq	r8, r1, r4, ror #16
   1873c:	andeq	r8, r1, r4, ror #16
   18740:	andeq	r8, r1, r4, ror #16
   18744:	andeq	r8, r1, r4, ror #16
   18748:	andeq	r8, r1, r8, asr r7
   1874c:	andeq	r8, r1, r4, ror r8
   18750:	andeq	r8, r1, r8, asr r7
   18754:	andeq	r8, r1, ip, ror #16
   18758:	ldr	r3, [sp, #24]
   1875c:	mov	r6, #0
   18760:	cmn	r3, #1
   18764:	bne	18110 <__assert_fail@plt+0x6c34>
   18768:	ldr	r3, [sp, #44]	; 0x2c
   1876c:	ldrb	r3, [r3, #1]
   18770:	adds	r3, r3, #0
   18774:	movne	r3, #1
   18778:	b	18118 <__assert_fail@plt+0x6c3c>
   1877c:	ldr	r3, [sp, #176]	; 0xb0
   18780:	mov	r6, #0
   18784:	cmp	r3, #2
   18788:	bne	18258 <__assert_fail@plt+0x6d7c>
   1878c:	ldr	r3, [sp, #64]	; 0x40
   18790:	cmp	r3, #0
   18794:	bne	18fcc <__assert_fail@plt+0x7af0>
   18798:	add	sl, sl, #1
   1879c:	ldr	r6, [sp, #36]	; 0x24
   187a0:	str	r3, [sp, #32]
   187a4:	mov	r4, #92	; 0x5c
   187a8:	b	18164 <__assert_fail@plt+0x6c88>
   187ac:	ldr	r3, [sp, #176]	; 0xb0
   187b0:	mov	r6, #0
   187b4:	cmp	r3, #2
   187b8:	bne	1828c <__assert_fail@plt+0x6db0>
   187bc:	ldr	r3, [sp, #40]	; 0x28
   187c0:	cmp	r3, #0
   187c4:	bne	18aa8 <__assert_fail@plt+0x75cc>
   187c8:	mov	r1, r7
   187cc:	str	r3, [sp, #32]
   187d0:	mov	r4, #63	; 0x3f
   187d4:	b	18130 <__assert_fail@plt+0x6c54>
   187d8:	ldr	r3, [sp, #176]	; 0xb0
   187dc:	mov	r6, #0
   187e0:	cmp	r3, #2
   187e4:	bne	182dc <__assert_fail@plt+0x6e00>
   187e8:	ldr	r3, [sp, #64]	; 0x40
   187ec:	cmp	r3, #0
   187f0:	bne	18fcc <__assert_fail@plt+0x7af0>
   187f4:	ldr	r2, [sp, #84]	; 0x54
   187f8:	adds	r3, fp, #0
   187fc:	movne	r3, #1
   18800:	cmp	r2, #0
   18804:	movne	r3, #0
   18808:	cmp	r3, #0
   1880c:	strne	fp, [sp, #84]	; 0x54
   18810:	movne	fp, #0
   18814:	bne	18844 <__assert_fail@plt+0x7368>
   18818:	cmp	fp, r8
   1881c:	movhi	r3, #39	; 0x27
   18820:	strbhi	r3, [r9, r8]
   18824:	add	r3, r8, #1
   18828:	cmp	fp, r3
   1882c:	movhi	r2, #92	; 0x5c
   18830:	strbhi	r2, [r9, r3]
   18834:	add	r3, r8, #2
   18838:	cmp	fp, r3
   1883c:	movhi	r2, #39	; 0x27
   18840:	strbhi	r2, [r9, r3]
   18844:	ldr	r3, [sp, #64]	; 0x40
   18848:	add	r8, r8, #3
   1884c:	mov	r1, r7
   18850:	str	r7, [sp, #32]
   18854:	str	r7, [sp, #76]	; 0x4c
   18858:	str	r3, [sp, #36]	; 0x24
   1885c:	mov	r4, #39	; 0x27
   18860:	b	18130 <__assert_fail@plt+0x6c54>
   18864:	mov	r6, #0
   18868:	b	182f4 <__assert_fail@plt+0x6e18>
   1886c:	mov	r6, #0
   18870:	b	184e8 <__assert_fail@plt+0x700c>
   18874:	mov	r6, #0
   18878:	b	18508 <__assert_fail@plt+0x702c>
   1887c:	str	r7, [sp, #32]
   18880:	mov	r6, #0
   18884:	b	18510 <__assert_fail@plt+0x7034>
   18888:	mov	r6, #0
   1888c:	b	18538 <__assert_fail@plt+0x705c>
   18890:	mov	r6, #0
   18894:	b	18304 <__assert_fail@plt+0x6e28>
   18898:	mov	r6, #0
   1889c:	b	183cc <__assert_fail@plt+0x6ef0>
   188a0:	mov	r6, #0
   188a4:	b	1839c <__assert_fail@plt+0x6ec0>
   188a8:	mov	r6, #0
   188ac:	mov	r3, #116	; 0x74
   188b0:	b	183a4 <__assert_fail@plt+0x6ec8>
   188b4:	mov	r6, #0
   188b8:	b	183e0 <__assert_fail@plt+0x6f04>
   188bc:	mov	r6, #0
   188c0:	b	183f4 <__assert_fail@plt+0x6f18>
   188c4:	ldr	r3, [sp, #56]	; 0x38
   188c8:	mov	r6, #0
   188cc:	cmp	r3, #0
   188d0:	bne	18414 <__assert_fail@plt+0x6f38>
   188d4:	ldr	r3, [sp, #96]	; 0x60
   188d8:	cmp	r3, #0
   188dc:	addne	sl, sl, #1
   188e0:	bne	17c88 <__assert_fail@plt+0x67ac>
   188e4:	ldr	r1, [sp, #52]	; 0x34
   188e8:	str	r3, [sp, #32]
   188ec:	mov	r4, r3
   188f0:	b	18130 <__assert_fail@plt+0x6c54>
   188f4:	mov	r6, #0
   188f8:	ldr	r3, [sp, #80]	; 0x50
   188fc:	cmp	r3, #1
   18900:	bne	18af0 <__assert_fail@plt+0x7614>
   18904:	bl	11368 <__ctype_b_loc@plt>
   18908:	ldr	r2, [sp, #80]	; 0x50
   1890c:	sxth	r3, r4
   18910:	mov	r1, r2
   18914:	lsl	r3, r3, #1
   18918:	ldr	r2, [r0]
   1891c:	ldrh	r3, [r2, r3]
   18920:	and	r3, r3, #16384	; 0x4000
   18924:	cmp	r3, #0
   18928:	movne	r3, #1
   1892c:	moveq	r3, #0
   18930:	str	r3, [sp, #32]
   18934:	moveq	r3, #1
   18938:	movne	r3, #0
   1893c:	ldr	r2, [sp, #56]	; 0x38
   18940:	and	r3, r3, r2
   18944:	ands	r3, r3, #255	; 0xff
   18948:	beq	1851c <__assert_fail@plt+0x7040>
   1894c:	add	r1, sl, r1
   18950:	mov	r0, #0
   18954:	ldr	r7, [sp, #40]	; 0x28
   18958:	ldr	r2, [sp, #36]	; 0x24
   1895c:	ldr	lr, [sp, #52]	; 0x34
   18960:	b	18a10 <__assert_fail@plt+0x7534>
   18964:	cmp	r7, #0
   18968:	bne	18d64 <__assert_fail@plt+0x7888>
   1896c:	eor	r0, r2, #1
   18970:	ands	r0, lr, r0
   18974:	beq	189ac <__assert_fail@plt+0x74d0>
   18978:	cmp	fp, r8
   1897c:	movhi	r2, #39	; 0x27
   18980:	strbhi	r2, [r9, r8]
   18984:	add	r2, r8, #1
   18988:	cmp	fp, r2
   1898c:	movhi	ip, #36	; 0x24
   18990:	strbhi	ip, [r9, r2]
   18994:	add	r2, r8, #2
   18998:	cmp	fp, r2
   1899c:	movhi	ip, #39	; 0x27
   189a0:	strbhi	ip, [r9, r2]
   189a4:	add	r8, r8, #3
   189a8:	mov	r2, r0
   189ac:	cmp	fp, r8
   189b0:	movhi	r0, #92	; 0x5c
   189b4:	strbhi	r0, [r9, r8]
   189b8:	add	r0, r8, #1
   189bc:	cmp	fp, r0
   189c0:	lsrhi	ip, r4, #6
   189c4:	addhi	ip, ip, #48	; 0x30
   189c8:	strbhi	ip, [r9, r0]
   189cc:	add	ip, r8, #2
   189d0:	cmp	fp, ip
   189d4:	lsrhi	r0, r4, #3
   189d8:	andhi	r0, r0, #7
   189dc:	addhi	r0, r0, #48	; 0x30
   189e0:	add	sl, sl, #1
   189e4:	strbhi	r0, [r9, ip]
   189e8:	and	r4, r4, #7
   189ec:	cmp	sl, r1
   189f0:	add	r4, r4, #48	; 0x30
   189f4:	add	r8, r8, #3
   189f8:	bcs	18d7c <__assert_fail@plt+0x78a0>
   189fc:	mov	r0, r3
   18a00:	cmp	fp, r8
   18a04:	strbhi	r4, [r9, r8]
   18a08:	ldrb	r4, [r5, #1]!
   18a0c:	add	r8, r8, #1
   18a10:	cmp	r3, #0
   18a14:	bne	18964 <__assert_fail@plt+0x7488>
   18a18:	cmp	r6, #0
   18a1c:	bne	18ac0 <__assert_fail@plt+0x75e4>
   18a20:	eor	r6, r0, #1
   18a24:	and	r6, r6, r2
   18a28:	add	sl, sl, #1
   18a2c:	cmp	r1, sl
   18a30:	uxtb	r6, r6
   18a34:	bls	18ae8 <__assert_fail@plt+0x760c>
   18a38:	cmp	r6, #0
   18a3c:	beq	18a00 <__assert_fail@plt+0x7524>
   18a40:	cmp	fp, r8
   18a44:	movhi	r2, #39	; 0x27
   18a48:	strbhi	r2, [r9, r8]
   18a4c:	add	r2, r8, #1
   18a50:	cmp	fp, r2
   18a54:	movhi	ip, #39	; 0x27
   18a58:	strbhi	ip, [r9, r2]
   18a5c:	add	r8, r8, #2
   18a60:	mov	r6, r3
   18a64:	mov	r2, r3
   18a68:	b	18a00 <__assert_fail@plt+0x7524>
   18a6c:	ldr	r3, [sp, #184]	; 0xb8
   18a70:	cmp	r3, #0
   18a74:	beq	1814c <__assert_fail@plt+0x6c70>
   18a78:	lsr	r2, r4, #5
   18a7c:	mov	r0, r3
   18a80:	uxtb	r2, r2
   18a84:	and	r3, r4, #31
   18a88:	ldr	r2, [r0, r2, lsl #2]
   18a8c:	lsr	r3, r2, r3
   18a90:	tst	r3, #1
   18a94:	beq	1814c <__assert_fail@plt+0x6c70>
   18a98:	ldr	r3, [sp, #40]	; 0x28
   18a9c:	cmp	r3, #0
   18aa0:	beq	18338 <__assert_fail@plt+0x6e5c>
   18aa4:	mov	r3, r1
   18aa8:	str	r3, [sp, #64]	; 0x40
   18aac:	mov	sl, r9
   18ab0:	ldr	r3, [sp, #56]	; 0x38
   18ab4:	mov	r9, fp
   18ab8:	ldr	r2, [sp, #64]	; 0x40
   18abc:	b	18cac <__assert_fail@plt+0x77d0>
   18ac0:	cmp	fp, r8
   18ac4:	eor	r6, r0, #1
   18ac8:	movhi	ip, #92	; 0x5c
   18acc:	and	r6, r6, r2
   18ad0:	add	sl, sl, #1
   18ad4:	strbhi	ip, [r9, r8]
   18ad8:	cmp	r1, sl
   18adc:	add	r8, r8, #1
   18ae0:	uxtb	r6, r6
   18ae4:	bhi	18a38 <__assert_fail@plt+0x755c>
   18ae8:	str	r2, [sp, #36]	; 0x24
   18aec:	b	18164 <__assert_fail@plt+0x6c88>
   18af0:	ldr	r3, [sp, #24]
   18af4:	cmn	r3, #1
   18af8:	mov	r3, #0
   18afc:	str	r3, [sp, #128]	; 0x80
   18b00:	str	r3, [sp, #132]	; 0x84
   18b04:	beq	18df8 <__assert_fail@plt+0x791c>
   18b08:	mov	r2, r7
   18b0c:	mov	r3, #0
   18b10:	str	r7, [sp, #104]	; 0x68
   18b14:	str	r5, [sp, #116]	; 0x74
   18b18:	mov	r7, r3
   18b1c:	mov	r5, r2
   18b20:	str	r4, [sp, #32]
   18b24:	str	r6, [sp, #108]	; 0x6c
   18b28:	str	r8, [sp, #112]	; 0x70
   18b2c:	ldr	r3, [sp, #44]	; 0x2c
   18b30:	add	r6, sl, r7
   18b34:	add	r4, r3, r6
   18b38:	ldr	r3, [sp, #24]
   18b3c:	mov	r1, r4
   18b40:	sub	r2, r3, r6
   18b44:	add	r0, sp, #124	; 0x7c
   18b48:	add	r3, sp, #128	; 0x80
   18b4c:	bl	1e218 <__assert_fail@plt+0xcd3c>
   18b50:	subs	r8, r0, #0
   18b54:	beq	18edc <__assert_fail@plt+0x7a00>
   18b58:	cmn	r8, #1
   18b5c:	beq	18eb4 <__assert_fail@plt+0x79d8>
   18b60:	cmn	r8, #2
   18b64:	beq	18e4c <__assert_fail@plt+0x7970>
   18b68:	ldr	r3, [sp, #64]	; 0x40
   18b6c:	cmp	r3, #0
   18b70:	beq	18c30 <__assert_fail@plt+0x7754>
   18b74:	cmp	r8, #1
   18b78:	beq	18c30 <__assert_fail@plt+0x7754>
   18b7c:	sub	r3, r8, #1
   18b80:	add	r6, r3, r6
   18b84:	ldr	r3, [sp, #44]	; 0x2c
   18b88:	add	r6, r3, r6
   18b8c:	ldrb	r3, [r4, #1]!
   18b90:	sub	r3, r3, #91	; 0x5b
   18b94:	cmp	r3, #33	; 0x21
   18b98:	ldrls	pc, [pc, r3, lsl #2]
   18b9c:	b	18c28 <__assert_fail@plt+0x774c>
   18ba0:	muleq	r1, r4, ip
   18ba4:	muleq	r1, r4, ip
   18ba8:	andeq	r8, r1, r8, lsr #24
   18bac:	muleq	r1, r4, ip
   18bb0:	andeq	r8, r1, r8, lsr #24
   18bb4:	muleq	r1, r4, ip
   18bb8:	andeq	r8, r1, r8, lsr #24
   18bbc:	andeq	r8, r1, r8, lsr #24
   18bc0:	andeq	r8, r1, r8, lsr #24
   18bc4:	andeq	r8, r1, r8, lsr #24
   18bc8:	andeq	r8, r1, r8, lsr #24
   18bcc:	andeq	r8, r1, r8, lsr #24
   18bd0:	andeq	r8, r1, r8, lsr #24
   18bd4:	andeq	r8, r1, r8, lsr #24
   18bd8:	andeq	r8, r1, r8, lsr #24
   18bdc:	andeq	r8, r1, r8, lsr #24
   18be0:	andeq	r8, r1, r8, lsr #24
   18be4:	andeq	r8, r1, r8, lsr #24
   18be8:	andeq	r8, r1, r8, lsr #24
   18bec:	andeq	r8, r1, r8, lsr #24
   18bf0:	andeq	r8, r1, r8, lsr #24
   18bf4:	andeq	r8, r1, r8, lsr #24
   18bf8:	andeq	r8, r1, r8, lsr #24
   18bfc:	andeq	r8, r1, r8, lsr #24
   18c00:	andeq	r8, r1, r8, lsr #24
   18c04:	andeq	r8, r1, r8, lsr #24
   18c08:	andeq	r8, r1, r8, lsr #24
   18c0c:	andeq	r8, r1, r8, lsr #24
   18c10:	andeq	r8, r1, r8, lsr #24
   18c14:	andeq	r8, r1, r8, lsr #24
   18c18:	andeq	r8, r1, r8, lsr #24
   18c1c:	andeq	r8, r1, r8, lsr #24
   18c20:	andeq	r8, r1, r8, lsr #24
   18c24:	muleq	r1, r4, ip
   18c28:	cmp	r6, r4
   18c2c:	bne	18b8c <__assert_fail@plt+0x76b0>
   18c30:	ldr	r0, [sp, #124]	; 0x7c
   18c34:	bl	1126c <iswprint@plt>
   18c38:	add	r7, r7, r8
   18c3c:	cmp	r0, #0
   18c40:	add	r0, sp, #128	; 0x80
   18c44:	moveq	r5, #0
   18c48:	bl	11200 <mbsinit@plt>
   18c4c:	cmp	r0, #0
   18c50:	beq	18b2c <__assert_fail@plt+0x7650>
   18c54:	ldr	r4, [sp, #32]
   18c58:	str	r5, [sp, #32]
   18c5c:	ldr	r3, [sp, #32]
   18c60:	mov	r1, r7
   18c64:	eor	r3, r3, #1
   18c68:	ldr	r7, [sp, #104]	; 0x68
   18c6c:	ldr	r6, [sp, #108]	; 0x6c
   18c70:	ldr	r8, [sp, #112]	; 0x70
   18c74:	ldr	r5, [sp, #116]	; 0x74
   18c78:	uxtb	r3, r3
   18c7c:	cmp	r1, #1
   18c80:	bls	1893c <__assert_fail@plt+0x7460>
   18c84:	ldr	r2, [sp, #56]	; 0x38
   18c88:	and	r3, r3, r2
   18c8c:	uxtb	r3, r3
   18c90:	b	1894c <__assert_fail@plt+0x7470>
   18c94:	mov	r3, #2
   18c98:	str	r3, [sp, #176]	; 0xb0
   18c9c:	ldr	r2, [sp, #64]	; 0x40
   18ca0:	ldr	r3, [sp, #56]	; 0x38
   18ca4:	mov	sl, r9
   18ca8:	mov	r9, fp
   18cac:	and	r3, r3, r2
   18cb0:	tst	r3, #255	; 0xff
   18cb4:	ldr	r3, [sp, #176]	; 0xb0
   18cb8:	movne	r3, #4
   18cbc:	str	r3, [sp, #176]	; 0xb0
   18cc0:	ldr	r3, [sp, #180]	; 0xb4
   18cc4:	mov	ip, #0
   18cc8:	bic	r3, r3, #2
   18ccc:	str	r3, [sp, #4]
   18cd0:	ldr	r3, [sp, #192]	; 0xc0
   18cd4:	ldr	r2, [sp, #44]	; 0x2c
   18cd8:	str	r3, [sp, #16]
   18cdc:	ldr	r3, [sp, #188]	; 0xbc
   18ce0:	mov	r1, r9
   18ce4:	str	r3, [sp, #12]
   18ce8:	ldr	r3, [sp, #176]	; 0xb0
   18cec:	mov	r0, sl
   18cf0:	str	r3, [sp]
   18cf4:	str	ip, [sp, #8]
   18cf8:	ldr	r3, [sp, #24]
   18cfc:	bl	17b5c <__assert_fail@plt+0x6680>
   18d00:	mov	fp, r0
   18d04:	mov	r0, fp
   18d08:	add	sp, sp, #140	; 0x8c
   18d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d10:	mov	r4, #92	; 0x5c
   18d14:	mov	r1, #0
   18d18:	mov	r3, r4
   18d1c:	b	18310 <__assert_fail@plt+0x6e34>
   18d20:	mov	r3, #0
   18d24:	ldr	r1, [sp, #52]	; 0x34
   18d28:	str	r3, [sp, #32]
   18d2c:	mov	r4, #63	; 0x3f
   18d30:	b	18130 <__assert_fail@plt+0x6c54>
   18d34:	cmp	fp, #0
   18d38:	beq	18d94 <__assert_fail@plt+0x78b8>
   18d3c:	mov	r3, #39	; 0x27
   18d40:	strb	r3, [r9]
   18d44:	mov	r3, #0
   18d48:	str	r3, [sp, #40]	; 0x28
   18d4c:	mov	r3, #1
   18d50:	str	r3, [sp, #68]	; 0x44
   18d54:	ldr	r3, [pc, #448]	; 18f1c <__assert_fail@plt+0x7a40>
   18d58:	mov	r8, #1
   18d5c:	str	r3, [sp, #72]	; 0x48
   18d60:	b	17f44 <__assert_fail@plt+0x6a68>
   18d64:	ldr	r3, [sp, #40]	; 0x28
   18d68:	mov	sl, r9
   18d6c:	str	r3, [sp, #56]	; 0x38
   18d70:	mov	r9, fp
   18d74:	ldr	r2, [sp, #64]	; 0x40
   18d78:	b	18cac <__assert_fail@plt+0x77d0>
   18d7c:	str	r2, [sp, #36]	; 0x24
   18d80:	b	18194 <__assert_fail@plt+0x6cb8>
   18d84:	mov	r1, #0
   18d88:	str	r3, [sp, #32]
   18d8c:	mov	r4, #63	; 0x3f
   18d90:	b	18130 <__assert_fail@plt+0x6c54>
   18d94:	ldr	r3, [pc, #384]	; 18f1c <__assert_fail@plt+0x7a40>
   18d98:	str	r3, [sp, #72]	; 0x48
   18d9c:	mov	r3, #0
   18da0:	str	r3, [sp, #40]	; 0x28
   18da4:	mov	r3, #1
   18da8:	str	r3, [sp, #68]	; 0x44
   18dac:	mov	r8, r3
   18db0:	b	17f44 <__assert_fail@plt+0x6a68>
   18db4:	bl	114ac <abort@plt>
   18db8:	cmp	fp, #0
   18dbc:	beq	18e1c <__assert_fail@plt+0x7940>
   18dc0:	mov	r2, #1
   18dc4:	mov	r3, #34	; 0x22
   18dc8:	strb	r3, [r9]
   18dcc:	mov	r8, r2
   18dd0:	mov	r3, r2
   18dd4:	str	r2, [sp, #68]	; 0x44
   18dd8:	str	r3, [sp, #56]	; 0x38
   18ddc:	ldr	r3, [pc, #316]	; 18f20 <__assert_fail@plt+0x7a44>
   18de0:	ldr	r1, [sp, #56]	; 0x38
   18de4:	str	r3, [sp, #72]	; 0x48
   18de8:	ldr	r2, [sp, #176]	; 0xb0
   18dec:	ldr	ip, [sp, #40]	; 0x28
   18df0:	ldr	lr, [sp, #176]	; 0xb0
   18df4:	b	17c28 <__assert_fail@plt+0x674c>
   18df8:	ldr	r0, [sp, #44]	; 0x2c
   18dfc:	bl	11380 <strlen@plt>
   18e00:	str	r0, [sp, #24]
   18e04:	b	18b08 <__assert_fail@plt+0x762c>
   18e08:	mov	r7, #0
   18e0c:	ldr	r1, [sp, #52]	; 0x34
   18e10:	str	r3, [sp, #32]
   18e14:	mov	r4, #48	; 0x30
   18e18:	b	18130 <__assert_fail@plt+0x6c54>
   18e1c:	mov	r3, #1
   18e20:	str	r3, [sp, #68]	; 0x44
   18e24:	mov	r8, r3
   18e28:	b	18dd8 <__assert_fail@plt+0x78fc>
   18e2c:	mov	r3, #2
   18e30:	mov	sl, r9
   18e34:	str	r3, [sp, #176]	; 0xb0
   18e38:	mov	r9, fp
   18e3c:	ldr	r3, [sp, #56]	; 0x38
   18e40:	b	18cac <__assert_fail@plt+0x77d0>
   18e44:	ldr	r6, [sp, #48]	; 0x30
   18e48:	b	188f8 <__assert_fail@plt+0x741c>
   18e4c:	ldr	r0, [sp, #24]
   18e50:	mov	ip, r6
   18e54:	cmp	r0, ip
   18e58:	mov	r1, r7
   18e5c:	mov	r2, r4
   18e60:	ldr	r7, [sp, #104]	; 0x68
   18e64:	ldr	r4, [sp, #32]
   18e68:	ldr	r6, [sp, #108]	; 0x6c
   18e6c:	ldr	r8, [sp, #112]	; 0x70
   18e70:	ldr	r5, [sp, #116]	; 0x74
   18e74:	bls	18ea4 <__assert_fail@plt+0x79c8>
   18e78:	ldrb	r3, [r2]
   18e7c:	cmp	r3, #0
   18e80:	bne	18e94 <__assert_fail@plt+0x79b8>
   18e84:	b	18fb4 <__assert_fail@plt+0x7ad8>
   18e88:	ldrb	r3, [r2, #1]!
   18e8c:	cmp	r3, #0
   18e90:	beq	18fb4 <__assert_fail@plt+0x7ad8>
   18e94:	add	r1, r1, #1
   18e98:	add	r3, sl, r1
   18e9c:	cmp	r0, r3
   18ea0:	bhi	18e88 <__assert_fail@plt+0x79ac>
   18ea4:	mov	r2, #0
   18ea8:	mov	r3, r7
   18eac:	str	r2, [sp, #32]
   18eb0:	b	18c7c <__assert_fail@plt+0x77a0>
   18eb4:	mov	r1, r7
   18eb8:	ldr	r7, [sp, #104]	; 0x68
   18ebc:	mov	r2, #0
   18ec0:	ldr	r4, [sp, #32]
   18ec4:	ldr	r6, [sp, #108]	; 0x6c
   18ec8:	ldr	r8, [sp, #112]	; 0x70
   18ecc:	ldr	r5, [sp, #116]	; 0x74
   18ed0:	mov	r3, r7
   18ed4:	str	r2, [sp, #32]
   18ed8:	b	18c7c <__assert_fail@plt+0x77a0>
   18edc:	mov	r3, r5
   18ee0:	eor	r3, r3, #1
   18ee4:	ldr	r4, [sp, #32]
   18ee8:	mov	r1, r7
   18eec:	str	r5, [sp, #32]
   18ef0:	ldr	r7, [sp, #104]	; 0x68
   18ef4:	ldr	r6, [sp, #108]	; 0x6c
   18ef8:	ldr	r8, [sp, #112]	; 0x70
   18efc:	ldr	r5, [sp, #116]	; 0x74
   18f00:	uxtb	r3, r3
   18f04:	b	18c7c <__assert_fail@plt+0x77a0>
   18f08:	mov	sl, r9
   18f0c:	str	r3, [sp, #56]	; 0x38
   18f10:	mov	r9, fp
   18f14:	ldr	r2, [sp, #64]	; 0x40
   18f18:	b	18cac <__assert_fail@plt+0x77d0>
   18f1c:	andeq	r0, r2, ip, lsl fp
   18f20:	andeq	r0, r2, r8, lsl fp
   18f24:	andeq	r0, r2, r0, lsr #22
   18f28:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   18f2c:	ldr	r2, [sp, #44]	; 0x2c
   18f30:	ldrb	r1, [r2, r3]
   18f34:	sub	r2, r1, #33	; 0x21
   18f38:	uxtb	r2, r2
   18f3c:	cmp	r2, #29
   18f40:	bhi	18fc0 <__assert_fail@plt+0x7ae4>
   18f44:	ldr	r0, [pc, #-36]	; 18f28 <__assert_fail@plt+0x7a4c>
   18f48:	mov	ip, #1
   18f4c:	ands	r2, r0, ip, lsl r2
   18f50:	beq	18fe0 <__assert_fail@plt+0x7b04>
   18f54:	ldr	r2, [sp, #40]	; 0x28
   18f58:	cmp	r2, #0
   18f5c:	bne	190d4 <__assert_fail@plt+0x7bf8>
   18f60:	add	r2, r8, #1
   18f64:	cmp	fp, r8
   18f68:	strbhi	r4, [r9, r8]
   18f6c:	cmp	fp, r2
   18f70:	movhi	r0, #34	; 0x22
   18f74:	strbhi	r0, [r9, r2]
   18f78:	add	r2, r8, #2
   18f7c:	cmp	fp, r2
   18f80:	movhi	r0, #34	; 0x22
   18f84:	strbhi	r0, [r9, r2]
   18f88:	add	r2, r8, #3
   18f8c:	cmp	fp, r2
   18f90:	mov	sl, r3
   18f94:	ldr	r3, [sp, #40]	; 0x28
   18f98:	movhi	r0, #63	; 0x3f
   18f9c:	mov	r4, r1
   18fa0:	strbhi	r0, [r9, r2]
   18fa4:	add	r8, r8, #4
   18fa8:	mov	r1, r3
   18fac:	str	r3, [sp, #32]
   18fb0:	b	18130 <__assert_fail@plt+0x6c54>
   18fb4:	str	r3, [sp, #32]
   18fb8:	mov	r3, r7
   18fbc:	b	18c7c <__assert_fail@plt+0x77a0>
   18fc0:	mov	r1, #0
   18fc4:	str	r1, [sp, #32]
   18fc8:	b	18130 <__assert_fail@plt+0x6c54>
   18fcc:	mov	sl, r9
   18fd0:	ldr	r3, [sp, #56]	; 0x38
   18fd4:	mov	r9, fp
   18fd8:	ldr	r2, [sp, #64]	; 0x40
   18fdc:	b	18cac <__assert_fail@plt+0x77d0>
   18fe0:	str	r2, [sp, #32]
   18fe4:	mov	r1, #0
   18fe8:	b	18130 <__assert_fail@plt+0x6c54>
   18fec:	ldr	r2, [sp, #76]	; 0x4c
   18ff0:	mov	sl, r9
   18ff4:	mov	r9, fp
   18ff8:	mov	fp, r8
   18ffc:	ldr	r1, [sp, #72]	; 0x48
   19000:	cmp	r1, #0
   19004:	moveq	r3, #0
   19008:	andne	r3, r2, #1
   1900c:	cmp	r3, #0
   19010:	beq	1903c <__assert_fail@plt+0x7b60>
   19014:	ldrb	r3, [r1]
   19018:	cmp	r3, #0
   1901c:	beq	1903c <__assert_fail@plt+0x7b60>
   19020:	mov	r2, r1
   19024:	cmp	r9, fp
   19028:	strbhi	r3, [sl, fp]
   1902c:	ldrb	r3, [r2, #1]!
   19030:	add	fp, fp, #1
   19034:	cmp	r3, #0
   19038:	bne	19024 <__assert_fail@plt+0x7b48>
   1903c:	cmp	r9, fp
   19040:	movhi	r3, #0
   19044:	strbhi	r3, [sl, fp]
   19048:	b	18d04 <__assert_fail@plt+0x7828>
   1904c:	ldr	r3, [sp, #192]	; 0xc0
   19050:	mov	ip, #5
   19054:	str	r3, [sp, #16]
   19058:	ldr	r3, [sp, #188]	; 0xbc
   1905c:	ldr	r2, [sp, #44]	; 0x2c
   19060:	str	r3, [sp, #12]
   19064:	ldr	r3, [sp, #184]	; 0xb8
   19068:	ldr	r1, [sp, #84]	; 0x54
   1906c:	str	r3, [sp, #8]
   19070:	ldr	r3, [sp, #180]	; 0xb4
   19074:	mov	r0, r9
   19078:	str	r3, [sp, #4]
   1907c:	str	ip, [sp]
   19080:	ldr	r3, [sp, #24]
   19084:	bl	17b5c <__assert_fail@plt+0x6680>
   19088:	mov	fp, r0
   1908c:	b	18d04 <__assert_fail@plt+0x7828>
   19090:	mov	sl, r9
   19094:	mov	r9, fp
   19098:	mov	fp, r8
   1909c:	b	18ffc <__assert_fail@plt+0x7b20>
   190a0:	ldr	r1, [sp, #176]	; 0xb0
   190a4:	bl	17a3c <__assert_fail@plt+0x6560>
   190a8:	str	r0, [sp, #192]	; 0xc0
   190ac:	b	18018 <__assert_fail@plt+0x6b3c>
   190b0:	ldr	r1, [sp, #176]	; 0xb0
   190b4:	bl	17a3c <__assert_fail@plt+0x6560>
   190b8:	str	r0, [sp, #188]	; 0xbc
   190bc:	b	17ff8 <__assert_fail@plt+0x6b1c>
   190c0:	mov	sl, r9
   190c4:	mov	r2, r3
   190c8:	mov	r9, fp
   190cc:	mov	fp, r8
   190d0:	b	18ffc <__assert_fail@plt+0x7b20>
   190d4:	mov	sl, r9
   190d8:	mov	r9, fp
   190dc:	b	18cc0 <__assert_fail@plt+0x77e4>
   190e0:	push	{r4, r5, r6, lr}
   190e4:	mov	r5, r0
   190e8:	bl	113a4 <__errno_location@plt>
   190ec:	cmp	r5, #0
   190f0:	mov	r1, #48	; 0x30
   190f4:	mov	r4, r0
   190f8:	ldr	r0, [pc, #16]	; 19110 <__assert_fail@plt+0x7c34>
   190fc:	ldr	r6, [r4]
   19100:	movne	r0, r5
   19104:	bl	1caac <__assert_fail@plt+0xb5d0>
   19108:	str	r6, [r4]
   1910c:	pop	{r4, r5, r6, pc}
   19110:	andeq	r2, r3, r8, asr r4
   19114:	ldr	r3, [pc, #12]	; 19128 <__assert_fail@plt+0x7c4c>
   19118:	cmp	r0, #0
   1911c:	moveq	r0, r3
   19120:	ldr	r0, [r0]
   19124:	bx	lr
   19128:	andeq	r2, r3, r8, asr r4
   1912c:	ldr	r3, [pc, #12]	; 19140 <__assert_fail@plt+0x7c64>
   19130:	cmp	r0, #0
   19134:	moveq	r0, r3
   19138:	str	r1, [r0]
   1913c:	bx	lr
   19140:	andeq	r2, r3, r8, asr r4
   19144:	ldr	r3, [pc, #52]	; 19180 <__assert_fail@plt+0x7ca4>
   19148:	cmp	r0, #0
   1914c:	moveq	r0, r3
   19150:	add	r3, r0, #8
   19154:	push	{lr}		; (str lr, [sp, #-4]!)
   19158:	lsr	lr, r1, #5
   1915c:	and	r1, r1, #31
   19160:	ldr	ip, [r3, lr, lsl #2]
   19164:	lsr	r0, ip, r1
   19168:	eor	r2, r2, r0
   1916c:	and	r2, r2, #1
   19170:	and	r0, r0, #1
   19174:	eor	r1, ip, r2, lsl r1
   19178:	str	r1, [r3, lr, lsl #2]
   1917c:	pop	{pc}		; (ldr pc, [sp], #4)
   19180:	andeq	r2, r3, r8, asr r4
   19184:	ldr	r3, [pc, #16]	; 1919c <__assert_fail@plt+0x7cc0>
   19188:	cmp	r0, #0
   1918c:	movne	r3, r0
   19190:	ldr	r0, [r3, #4]
   19194:	str	r1, [r3, #4]
   19198:	bx	lr
   1919c:	andeq	r2, r3, r8, asr r4
   191a0:	ldr	r3, [pc, #44]	; 191d4 <__assert_fail@plt+0x7cf8>
   191a4:	cmp	r0, #0
   191a8:	moveq	r0, r3
   191ac:	mov	ip, #10
   191b0:	cmp	r2, #0
   191b4:	cmpne	r1, #0
   191b8:	str	ip, [r0]
   191bc:	beq	191cc <__assert_fail@plt+0x7cf0>
   191c0:	str	r1, [r0, #40]	; 0x28
   191c4:	str	r2, [r0, #44]	; 0x2c
   191c8:	bx	lr
   191cc:	push	{r4, lr}
   191d0:	bl	114ac <abort@plt>
   191d4:	andeq	r2, r3, r8, asr r4
   191d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   191dc:	sub	sp, sp, #24
   191e0:	ldr	ip, [pc, #108]	; 19254 <__assert_fail@plt+0x7d78>
   191e4:	ldr	r4, [sp, #56]	; 0x38
   191e8:	mov	r9, r2
   191ec:	cmp	r4, #0
   191f0:	moveq	r4, ip
   191f4:	mov	sl, r3
   191f8:	mov	r7, r0
   191fc:	mov	r8, r1
   19200:	bl	113a4 <__errno_location@plt>
   19204:	ldr	r3, [r4, #44]	; 0x2c
   19208:	mov	r1, r8
   1920c:	ldr	r6, [r0]
   19210:	str	r3, [sp, #16]
   19214:	ldr	r2, [r4, #40]	; 0x28
   19218:	add	r3, r4, #8
   1921c:	str	r3, [sp, #8]
   19220:	str	r2, [sp, #12]
   19224:	ldr	r2, [r4, #4]
   19228:	mov	r5, r0
   1922c:	str	r2, [sp, #4]
   19230:	ldr	ip, [r4]
   19234:	mov	r3, sl
   19238:	mov	r2, r9
   1923c:	mov	r0, r7
   19240:	str	ip, [sp]
   19244:	bl	17b5c <__assert_fail@plt+0x6680>
   19248:	str	r6, [r5]
   1924c:	add	sp, sp, #24
   19250:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19254:	andeq	r2, r3, r8, asr r4
   19258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1925c:	cmp	r2, #0
   19260:	sub	sp, sp, #36	; 0x24
   19264:	ldr	r4, [pc, #164]	; 19310 <__assert_fail@plt+0x7e34>
   19268:	mov	r8, r1
   1926c:	movne	r4, r2
   19270:	mov	r7, r0
   19274:	bl	113a4 <__errno_location@plt>
   19278:	ldr	r3, [r4, #44]	; 0x2c
   1927c:	ldr	r5, [r4, #4]
   19280:	add	r9, r4, #8
   19284:	orr	r5, r5, #1
   19288:	mov	r1, #0
   1928c:	mov	r2, r7
   19290:	ldr	fp, [r0]
   19294:	str	r3, [sp, #16]
   19298:	ldr	r3, [r4, #40]	; 0x28
   1929c:	stmib	sp, {r5, r9}
   192a0:	str	r3, [sp, #12]
   192a4:	ldr	r3, [r4]
   192a8:	mov	r6, r0
   192ac:	str	r3, [sp]
   192b0:	mov	r0, r1
   192b4:	mov	r3, r8
   192b8:	bl	17b5c <__assert_fail@plt+0x6680>
   192bc:	add	r1, r0, #1
   192c0:	mov	r0, r1
   192c4:	str	r1, [sp, #28]
   192c8:	bl	1c568 <__assert_fail@plt+0xb08c>
   192cc:	ldr	r3, [r4, #44]	; 0x2c
   192d0:	ldr	r1, [sp, #28]
   192d4:	str	r3, [sp, #16]
   192d8:	ldr	r3, [r4, #40]	; 0x28
   192dc:	str	r5, [sp, #4]
   192e0:	str	r3, [sp, #12]
   192e4:	str	r9, [sp, #8]
   192e8:	ldr	ip, [r4]
   192ec:	mov	r3, r8
   192f0:	mov	r2, r7
   192f4:	str	ip, [sp]
   192f8:	mov	sl, r0
   192fc:	bl	17b5c <__assert_fail@plt+0x6680>
   19300:	mov	r0, sl
   19304:	str	fp, [r6]
   19308:	add	sp, sp, #36	; 0x24
   1930c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19310:	andeq	r2, r3, r8, asr r4
   19314:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19318:	cmp	r3, #0
   1931c:	sub	sp, sp, #44	; 0x2c
   19320:	ldr	r4, [pc, #192]	; 193e8 <__assert_fail@plt+0x7f0c>
   19324:	mov	r6, r2
   19328:	movne	r4, r3
   1932c:	mov	r9, r1
   19330:	mov	r8, r0
   19334:	bl	113a4 <__errno_location@plt>
   19338:	ldr	r3, [r4, #44]	; 0x2c
   1933c:	ldr	r5, [r4, #4]
   19340:	add	sl, r4, #8
   19344:	cmp	r6, #0
   19348:	orreq	r5, r5, #1
   1934c:	mov	r1, #0
   19350:	ldr	r2, [r0]
   19354:	str	r3, [sp, #16]
   19358:	ldr	r3, [r4, #40]	; 0x28
   1935c:	stmib	sp, {r5, sl}
   19360:	str	r3, [sp, #12]
   19364:	ldr	r3, [r4]
   19368:	mov	r7, r0
   1936c:	str	r2, [sp, #28]
   19370:	str	r3, [sp]
   19374:	mov	r2, r8
   19378:	mov	r3, r9
   1937c:	mov	r0, r1
   19380:	bl	17b5c <__assert_fail@plt+0x6680>
   19384:	add	r1, r0, #1
   19388:	mov	fp, r0
   1938c:	mov	r0, r1
   19390:	str	r1, [sp, #36]	; 0x24
   19394:	bl	1c568 <__assert_fail@plt+0xb08c>
   19398:	ldr	r3, [r4, #44]	; 0x2c
   1939c:	mov	r2, r8
   193a0:	str	r3, [sp, #16]
   193a4:	ldr	r3, [r4, #40]	; 0x28
   193a8:	str	r5, [sp, #4]
   193ac:	str	r3, [sp, #12]
   193b0:	str	sl, [sp, #8]
   193b4:	ldr	ip, [r4]
   193b8:	ldr	r1, [sp, #36]	; 0x24
   193bc:	mov	r3, r9
   193c0:	str	ip, [sp]
   193c4:	str	r0, [sp, #32]
   193c8:	bl	17b5c <__assert_fail@plt+0x6680>
   193cc:	ldr	r2, [sp, #28]
   193d0:	cmp	r6, #0
   193d4:	str	r2, [r7]
   193d8:	ldr	r0, [sp, #32]
   193dc:	strne	fp, [r6]
   193e0:	add	sp, sp, #44	; 0x2c
   193e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193e8:	andeq	r2, r3, r8, asr r4
   193ec:	push	{r4, r5, r6, r7, r8, lr}
   193f0:	ldr	r6, [pc, #116]	; 1946c <__assert_fail@plt+0x7f90>
   193f4:	ldr	r3, [r6, #4]
   193f8:	ldr	r7, [r6]
   193fc:	cmp	r3, #1
   19400:	movgt	r5, r7
   19404:	movgt	r4, #1
   19408:	ble	19428 <__assert_fail@plt+0x7f4c>
   1940c:	ldr	r0, [r5, #12]
   19410:	bl	1e18c <__assert_fail@plt+0xccb0>
   19414:	ldr	r3, [r6, #4]
   19418:	add	r4, r4, #1
   1941c:	cmp	r3, r4
   19420:	add	r5, r5, #8
   19424:	bgt	1940c <__assert_fail@plt+0x7f30>
   19428:	ldr	r0, [r7, #4]
   1942c:	ldr	r4, [pc, #60]	; 19470 <__assert_fail@plt+0x7f94>
   19430:	cmp	r0, r4
   19434:	beq	19448 <__assert_fail@plt+0x7f6c>
   19438:	bl	1e18c <__assert_fail@plt+0xccb0>
   1943c:	mov	r3, #256	; 0x100
   19440:	str	r4, [r6, #12]
   19444:	str	r3, [r6, #8]
   19448:	ldr	r4, [pc, #36]	; 19474 <__assert_fail@plt+0x7f98>
   1944c:	cmp	r7, r4
   19450:	beq	19460 <__assert_fail@plt+0x7f84>
   19454:	mov	r0, r7
   19458:	bl	1e18c <__assert_fail@plt+0xccb0>
   1945c:	str	r4, [r6]
   19460:	mov	r3, #1
   19464:	str	r3, [r6, #4]
   19468:	pop	{r4, r5, r6, r7, r8, pc}
   1946c:	andeq	r2, r3, r0, lsl #3
   19470:	andeq	r2, r3, r8, lsl #9
   19474:	andeq	r2, r3, r8, lsl #3
   19478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1947c:	sub	sp, sp, #44	; 0x2c
   19480:	mov	r5, r0
   19484:	mov	sl, r1
   19488:	bl	113a4 <__errno_location@plt>
   1948c:	ldr	r4, [pc, #400]	; 19624 <__assert_fail@plt+0x8148>
   19490:	cmn	r5, #-2147483647	; 0x80000001
   19494:	ldr	r6, [r4]
   19498:	mov	r8, r0
   1949c:	movne	r0, #0
   194a0:	moveq	r0, #1
   194a4:	ldr	r3, [r8]
   194a8:	orrs	r0, r0, r5, lsr #31
   194ac:	str	r3, [sp, #24]
   194b0:	bne	19620 <__assert_fail@plt+0x8144>
   194b4:	ldr	r2, [r4, #4]
   194b8:	cmp	r5, r2
   194bc:	blt	1951c <__assert_fail@plt+0x8040>
   194c0:	add	r7, r4, #8
   194c4:	cmp	r6, r7
   194c8:	str	r2, [sp, #36]	; 0x24
   194cc:	beq	195f0 <__assert_fail@plt+0x8114>
   194d0:	mov	r3, #8
   194d4:	sub	r2, r5, r2
   194d8:	mov	r0, r6
   194dc:	str	r3, [sp]
   194e0:	add	r2, r2, #1
   194e4:	mvn	r3, #-2147483648	; 0x80000000
   194e8:	add	r1, sp, #36	; 0x24
   194ec:	bl	1c784 <__assert_fail@plt+0xb2a8>
   194f0:	mov	r6, r0
   194f4:	str	r0, [r4]
   194f8:	ldr	r0, [r4, #4]
   194fc:	ldr	r2, [sp, #36]	; 0x24
   19500:	mov	r1, #0
   19504:	sub	r2, r2, r0
   19508:	add	r0, r6, r0, lsl #3
   1950c:	lsl	r2, r2, #3
   19510:	bl	113d4 <memset@plt>
   19514:	ldr	r3, [sp, #36]	; 0x24
   19518:	str	r3, [r4, #4]
   1951c:	ldr	r4, [pc, #260]	; 19628 <__assert_fail@plt+0x814c>
   19520:	add	fp, r6, r5, lsl #3
   19524:	ldr	r9, [r6, r5, lsl #3]
   19528:	ldr	r0, [r4, #4]
   1952c:	ldr	r3, [r4]
   19530:	ldr	r7, [fp, #4]
   19534:	ldr	r1, [r4, #44]	; 0x2c
   19538:	ldr	r2, [r4, #40]	; 0x28
   1953c:	orr	r0, r0, #1
   19540:	str	r3, [sp]
   19544:	add	r3, r4, #8
   19548:	str	r0, [sp, #28]
   1954c:	str	r0, [sp, #4]
   19550:	str	r1, [sp, #16]
   19554:	str	r2, [sp, #12]
   19558:	str	r3, [sp, #8]
   1955c:	mov	r0, r7
   19560:	mov	r1, r9
   19564:	mvn	r3, #0
   19568:	mov	r2, sl
   1956c:	bl	17b5c <__assert_fail@plt+0x6680>
   19570:	cmp	r9, r0
   19574:	bhi	195dc <__assert_fail@plt+0x8100>
   19578:	add	r3, r4, #48	; 0x30
   1957c:	add	r9, r0, #1
   19580:	cmp	r7, r3
   19584:	str	r9, [r6, r5, lsl #3]
   19588:	beq	19594 <__assert_fail@plt+0x80b8>
   1958c:	mov	r0, r7
   19590:	bl	1e18c <__assert_fail@plt+0xccb0>
   19594:	mov	r0, r9
   19598:	bl	1c568 <__assert_fail@plt+0xb08c>
   1959c:	ldr	ip, [r4, #44]	; 0x2c
   195a0:	ldr	r3, [r4]
   195a4:	ldr	lr, [r4, #40]	; 0x28
   195a8:	ldr	r4, [pc, #124]	; 1962c <__assert_fail@plt+0x8150>
   195ac:	mov	r2, sl
   195b0:	mov	r1, r9
   195b4:	str	r0, [fp, #4]
   195b8:	str	r4, [sp, #8]
   195bc:	ldr	r4, [sp, #28]
   195c0:	str	r3, [sp]
   195c4:	str	r4, [sp, #4]
   195c8:	str	ip, [sp, #16]
   195cc:	str	lr, [sp, #12]
   195d0:	mvn	r3, #0
   195d4:	mov	r7, r0
   195d8:	bl	17b5c <__assert_fail@plt+0x6680>
   195dc:	ldr	r3, [sp, #24]
   195e0:	mov	r0, r7
   195e4:	str	r3, [r8]
   195e8:	add	sp, sp, #44	; 0x2c
   195ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195f0:	mov	r3, #8
   195f4:	sub	r2, r5, r2
   195f8:	str	r3, [sp]
   195fc:	add	r1, sp, #36	; 0x24
   19600:	add	r2, r2, #1
   19604:	mvn	r3, #-2147483648	; 0x80000000
   19608:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1960c:	mov	r6, r0
   19610:	ldm	r7, {r0, r1}
   19614:	str	r6, [r4]
   19618:	stm	r6, {r0, r1}
   1961c:	b	194f8 <__assert_fail@plt+0x801c>
   19620:	bl	114ac <abort@plt>
   19624:	andeq	r2, r3, r0, lsl #3
   19628:	andeq	r2, r3, r8, asr r4
   1962c:	andeq	r2, r3, r0, ror #8
   19630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19634:	sub	sp, sp, #52	; 0x34
   19638:	mov	r5, r0
   1963c:	mov	sl, r1
   19640:	mov	fp, r2
   19644:	bl	113a4 <__errno_location@plt>
   19648:	ldr	r4, [pc, #408]	; 197e8 <__assert_fail@plt+0x830c>
   1964c:	cmn	r5, #-2147483647	; 0x80000001
   19650:	ldr	r6, [r4]
   19654:	mov	r8, r0
   19658:	movne	r0, #0
   1965c:	moveq	r0, #1
   19660:	ldr	r3, [r8]
   19664:	orrs	r0, r0, r5, lsr #31
   19668:	str	r3, [sp, #28]
   1966c:	bne	197e4 <__assert_fail@plt+0x8308>
   19670:	ldr	r2, [r4, #4]
   19674:	cmp	r5, r2
   19678:	blt	196d8 <__assert_fail@plt+0x81fc>
   1967c:	add	r7, r4, #8
   19680:	cmp	r6, r7
   19684:	str	r2, [sp, #44]	; 0x2c
   19688:	beq	197b4 <__assert_fail@plt+0x82d8>
   1968c:	mov	r3, #8
   19690:	sub	r2, r5, r2
   19694:	mov	r0, r6
   19698:	str	r3, [sp]
   1969c:	add	r2, r2, #1
   196a0:	mvn	r3, #-2147483648	; 0x80000000
   196a4:	add	r1, sp, #44	; 0x2c
   196a8:	bl	1c784 <__assert_fail@plt+0xb2a8>
   196ac:	mov	r6, r0
   196b0:	str	r0, [r4]
   196b4:	ldr	r0, [r4, #4]
   196b8:	ldr	r2, [sp, #44]	; 0x2c
   196bc:	mov	r1, #0
   196c0:	sub	r2, r2, r0
   196c4:	add	r0, r6, r0, lsl #3
   196c8:	lsl	r2, r2, #3
   196cc:	bl	113d4 <memset@plt>
   196d0:	ldr	r3, [sp, #44]	; 0x2c
   196d4:	str	r3, [r4, #4]
   196d8:	ldr	r4, [pc, #268]	; 197ec <__assert_fail@plt+0x8310>
   196dc:	add	r3, r6, r5, lsl #3
   196e0:	str	r3, [sp, #32]
   196e4:	ldr	r7, [r3, #4]
   196e8:	ldr	r0, [r4, #4]
   196ec:	ldr	r3, [r4]
   196f0:	ldr	r9, [r6, r5, lsl #3]
   196f4:	ldr	r1, [r4, #44]	; 0x2c
   196f8:	ldr	r2, [r4, #40]	; 0x28
   196fc:	orr	r0, r0, #1
   19700:	str	r3, [sp]
   19704:	add	r3, r4, #8
   19708:	str	r0, [sp, #36]	; 0x24
   1970c:	str	r0, [sp, #4]
   19710:	str	r1, [sp, #16]
   19714:	str	r2, [sp, #12]
   19718:	str	r3, [sp, #8]
   1971c:	mov	r0, r7
   19720:	mov	r1, r9
   19724:	mov	r3, fp
   19728:	mov	r2, sl
   1972c:	bl	17b5c <__assert_fail@plt+0x6680>
   19730:	cmp	r9, r0
   19734:	bhi	197a0 <__assert_fail@plt+0x82c4>
   19738:	add	r3, r4, #48	; 0x30
   1973c:	add	r9, r0, #1
   19740:	cmp	r7, r3
   19744:	str	r9, [r6, r5, lsl #3]
   19748:	beq	19754 <__assert_fail@plt+0x8278>
   1974c:	mov	r0, r7
   19750:	bl	1e18c <__assert_fail@plt+0xccb0>
   19754:	mov	r0, r9
   19758:	bl	1c568 <__assert_fail@plt+0xb08c>
   1975c:	ldr	ip, [sp, #32]
   19760:	ldr	lr, [r4, #44]	; 0x2c
   19764:	ldr	r5, [r4, #40]	; 0x28
   19768:	mov	r3, fp
   1976c:	mov	r2, sl
   19770:	mov	r1, r9
   19774:	str	r0, [ip, #4]
   19778:	ldr	ip, [r4]
   1977c:	ldr	r4, [pc, #108]	; 197f0 <__assert_fail@plt+0x8314>
   19780:	str	lr, [sp, #16]
   19784:	str	r4, [sp, #8]
   19788:	ldr	r4, [sp, #36]	; 0x24
   1978c:	str	r5, [sp, #12]
   19790:	str	r4, [sp, #4]
   19794:	str	ip, [sp]
   19798:	mov	r7, r0
   1979c:	bl	17b5c <__assert_fail@plt+0x6680>
   197a0:	ldr	r3, [sp, #28]
   197a4:	mov	r0, r7
   197a8:	str	r3, [r8]
   197ac:	add	sp, sp, #52	; 0x34
   197b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197b4:	mov	r3, #8
   197b8:	sub	r2, r5, r2
   197bc:	str	r3, [sp]
   197c0:	add	r1, sp, #44	; 0x2c
   197c4:	add	r2, r2, #1
   197c8:	mvn	r3, #-2147483648	; 0x80000000
   197cc:	bl	1c784 <__assert_fail@plt+0xb2a8>
   197d0:	mov	r6, r0
   197d4:	ldm	r7, {r0, r1}
   197d8:	str	r6, [r4]
   197dc:	stm	r6, {r0, r1}
   197e0:	b	196b4 <__assert_fail@plt+0x81d8>
   197e4:	bl	114ac <abort@plt>
   197e8:	andeq	r2, r3, r0, lsl #3
   197ec:	andeq	r2, r3, r8, asr r4
   197f0:	andeq	r2, r3, r0, ror #8
   197f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197f8:	sub	sp, sp, #44	; 0x2c
   197fc:	mov	sl, r0
   19800:	bl	113a4 <__errno_location@plt>
   19804:	ldr	r4, [pc, #352]	; 1996c <__assert_fail@plt+0x8490>
   19808:	ldr	r2, [r4, #4]
   1980c:	ldr	r5, [r4]
   19810:	cmp	r2, #0
   19814:	ldr	r3, [r0]
   19818:	mov	r8, r0
   1981c:	str	r3, [sp, #28]
   19820:	bgt	1987c <__assert_fail@plt+0x83a0>
   19824:	add	r6, r4, #8
   19828:	cmp	r5, r6
   1982c:	str	r2, [sp, #36]	; 0x24
   19830:	beq	1993c <__assert_fail@plt+0x8460>
   19834:	mov	r3, #8
   19838:	mov	r0, r5
   1983c:	str	r3, [sp]
   19840:	rsb	r2, r2, #1
   19844:	mvn	r3, #-2147483648	; 0x80000000
   19848:	add	r1, sp, #36	; 0x24
   1984c:	bl	1c784 <__assert_fail@plt+0xb2a8>
   19850:	mov	r5, r0
   19854:	str	r0, [r4]
   19858:	ldr	r0, [r4, #4]
   1985c:	ldr	r2, [sp, #36]	; 0x24
   19860:	mov	r1, #0
   19864:	sub	r2, r2, r0
   19868:	add	r0, r5, r0, lsl #3
   1986c:	lsl	r2, r2, #3
   19870:	bl	113d4 <memset@plt>
   19874:	ldr	r3, [sp, #36]	; 0x24
   19878:	str	r3, [r4, #4]
   1987c:	ldr	r4, [pc, #236]	; 19970 <__assert_fail@plt+0x8494>
   19880:	ldr	r9, [r5]
   19884:	ldr	r6, [r5, #4]
   19888:	ldr	r7, [r4, #4]
   1988c:	ldr	r1, [r4, #44]	; 0x2c
   19890:	ldr	r2, [r4, #40]	; 0x28
   19894:	ldr	r3, [r4]
   19898:	orr	r7, r7, #1
   1989c:	add	fp, r4, #8
   198a0:	str	r1, [sp, #16]
   198a4:	str	r2, [sp, #12]
   198a8:	str	r3, [sp]
   198ac:	str	r7, [sp, #4]
   198b0:	str	fp, [sp, #8]
   198b4:	mov	r1, r9
   198b8:	mov	r0, r6
   198bc:	mvn	r3, #0
   198c0:	mov	r2, sl
   198c4:	bl	17b5c <__assert_fail@plt+0x6680>
   198c8:	cmp	r9, r0
   198cc:	bhi	19928 <__assert_fail@plt+0x844c>
   198d0:	add	r3, r4, #48	; 0x30
   198d4:	add	r9, r0, #1
   198d8:	cmp	r6, r3
   198dc:	str	r9, [r5]
   198e0:	beq	198ec <__assert_fail@plt+0x8410>
   198e4:	mov	r0, r6
   198e8:	bl	1e18c <__assert_fail@plt+0xccb0>
   198ec:	mov	r0, r9
   198f0:	bl	1c568 <__assert_fail@plt+0xb08c>
   198f4:	ldr	ip, [r4, #44]	; 0x2c
   198f8:	ldr	r3, [r4]
   198fc:	ldr	lr, [r4, #40]	; 0x28
   19900:	mov	r2, sl
   19904:	mov	r1, r9
   19908:	str	r0, [r5, #4]
   1990c:	str	r3, [sp]
   19910:	stmib	sp, {r7, fp}
   19914:	str	ip, [sp, #16]
   19918:	str	lr, [sp, #12]
   1991c:	mvn	r3, #0
   19920:	mov	r6, r0
   19924:	bl	17b5c <__assert_fail@plt+0x6680>
   19928:	ldr	r3, [sp, #28]
   1992c:	mov	r0, r6
   19930:	str	r3, [r8]
   19934:	add	sp, sp, #44	; 0x2c
   19938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1993c:	mov	r3, #8
   19940:	str	r3, [sp]
   19944:	add	r1, sp, #36	; 0x24
   19948:	rsb	r2, r2, #1
   1994c:	mvn	r3, #-2147483648	; 0x80000000
   19950:	mov	r0, #0
   19954:	bl	1c784 <__assert_fail@plt+0xb2a8>
   19958:	mov	r5, r0
   1995c:	ldm	r6, {r0, r1}
   19960:	str	r5, [r4]
   19964:	stm	r5, {r0, r1}
   19968:	b	19858 <__assert_fail@plt+0x837c>
   1996c:	andeq	r2, r3, r0, lsl #3
   19970:	andeq	r2, r3, r8, asr r4
   19974:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19978:	sub	sp, sp, #44	; 0x2c
   1997c:	mov	r9, r0
   19980:	mov	sl, r1
   19984:	bl	113a4 <__errno_location@plt>
   19988:	ldr	r4, [pc, #364]	; 19afc <__assert_fail@plt+0x8620>
   1998c:	ldr	r2, [r4, #4]
   19990:	ldr	r5, [r4]
   19994:	cmp	r2, #0
   19998:	ldr	r3, [r0]
   1999c:	mov	r7, r0
   199a0:	str	r3, [sp, #24]
   199a4:	bgt	19a00 <__assert_fail@plt+0x8524>
   199a8:	add	r6, r4, #8
   199ac:	cmp	r5, r6
   199b0:	str	r2, [sp, #36]	; 0x24
   199b4:	beq	19acc <__assert_fail@plt+0x85f0>
   199b8:	mov	r3, #8
   199bc:	mov	r0, r5
   199c0:	str	r3, [sp]
   199c4:	rsb	r2, r2, #1
   199c8:	mvn	r3, #-2147483648	; 0x80000000
   199cc:	add	r1, sp, #36	; 0x24
   199d0:	bl	1c784 <__assert_fail@plt+0xb2a8>
   199d4:	mov	r5, r0
   199d8:	str	r0, [r4]
   199dc:	ldr	r0, [r4, #4]
   199e0:	ldr	r2, [sp, #36]	; 0x24
   199e4:	mov	r1, #0
   199e8:	sub	r2, r2, r0
   199ec:	add	r0, r5, r0, lsl #3
   199f0:	lsl	r2, r2, #3
   199f4:	bl	113d4 <memset@plt>
   199f8:	ldr	r3, [sp, #36]	; 0x24
   199fc:	str	r3, [r4, #4]
   19a00:	ldr	r4, [pc, #248]	; 19b00 <__assert_fail@plt+0x8624>
   19a04:	ldr	r8, [r5]
   19a08:	ldr	r6, [r5, #4]
   19a0c:	ldr	r0, [r4, #4]
   19a10:	ldr	r1, [r4, #44]	; 0x2c
   19a14:	ldr	r2, [r4, #40]	; 0x28
   19a18:	ldr	r3, [r4]
   19a1c:	orr	r0, r0, #1
   19a20:	add	fp, r4, #8
   19a24:	str	r0, [sp, #28]
   19a28:	str	r0, [sp, #4]
   19a2c:	str	r1, [sp, #16]
   19a30:	str	r2, [sp, #12]
   19a34:	str	r3, [sp]
   19a38:	str	fp, [sp, #8]
   19a3c:	mov	r1, r8
   19a40:	mov	r0, r6
   19a44:	mov	r3, sl
   19a48:	mov	r2, r9
   19a4c:	bl	17b5c <__assert_fail@plt+0x6680>
   19a50:	cmp	r8, r0
   19a54:	bhi	19ab8 <__assert_fail@plt+0x85dc>
   19a58:	add	r3, r4, #48	; 0x30
   19a5c:	add	r8, r0, #1
   19a60:	cmp	r6, r3
   19a64:	str	r8, [r5]
   19a68:	beq	19a74 <__assert_fail@plt+0x8598>
   19a6c:	mov	r0, r6
   19a70:	bl	1e18c <__assert_fail@plt+0xccb0>
   19a74:	mov	r0, r8
   19a78:	bl	1c568 <__assert_fail@plt+0xb08c>
   19a7c:	ldr	lr, [r4, #44]	; 0x2c
   19a80:	ldr	ip, [r4]
   19a84:	mov	r3, sl
   19a88:	mov	r2, r9
   19a8c:	mov	r1, r8
   19a90:	str	r0, [r5, #4]
   19a94:	ldr	r5, [r4, #40]	; 0x28
   19a98:	ldr	r4, [sp, #28]
   19a9c:	str	fp, [sp, #8]
   19aa0:	str	r4, [sp, #4]
   19aa4:	str	lr, [sp, #16]
   19aa8:	str	r5, [sp, #12]
   19aac:	str	ip, [sp]
   19ab0:	mov	r6, r0
   19ab4:	bl	17b5c <__assert_fail@plt+0x6680>
   19ab8:	ldr	r3, [sp, #24]
   19abc:	mov	r0, r6
   19ac0:	str	r3, [r7]
   19ac4:	add	sp, sp, #44	; 0x2c
   19ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19acc:	mov	r3, #8
   19ad0:	str	r3, [sp]
   19ad4:	add	r1, sp, #36	; 0x24
   19ad8:	rsb	r2, r2, #1
   19adc:	mvn	r3, #-2147483648	; 0x80000000
   19ae0:	mov	r0, #0
   19ae4:	bl	1c784 <__assert_fail@plt+0xb2a8>
   19ae8:	mov	r5, r0
   19aec:	ldm	r6, {r0, r1}
   19af0:	str	r5, [r4]
   19af4:	stm	r5, {r0, r1}
   19af8:	b	199dc <__assert_fail@plt+0x8500>
   19afc:	andeq	r2, r3, r0, lsl #3
   19b00:	andeq	r2, r3, r8, asr r4
   19b04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b08:	sub	sp, sp, #132	; 0x84
   19b0c:	mov	r5, r1
   19b10:	mov	r4, r0
   19b14:	mov	r9, r2
   19b18:	add	r0, sp, #80	; 0x50
   19b1c:	mov	r2, #48	; 0x30
   19b20:	mov	r1, #0
   19b24:	bl	113d4 <memset@plt>
   19b28:	cmp	r5, #10
   19b2c:	beq	19ce4 <__assert_fail@plt+0x8808>
   19b30:	add	lr, sp, #80	; 0x50
   19b34:	str	r5, [sp, #80]	; 0x50
   19b38:	ldm	lr!, {r0, r1, r2, r3}
   19b3c:	add	ip, sp, #32
   19b40:	ldr	r6, [pc, #416]	; 19ce8 <__assert_fail@plt+0x880c>
   19b44:	stmia	ip!, {r0, r1, r2, r3}
   19b48:	ldm	lr!, {r0, r1, r2, r3}
   19b4c:	stmia	ip!, {r0, r1, r2, r3}
   19b50:	ldm	lr, {r0, r1, r2, r3}
   19b54:	stm	ip, {r0, r1, r2, r3}
   19b58:	bl	113a4 <__errno_location@plt>
   19b5c:	cmn	r4, #-2147483647	; 0x80000001
   19b60:	ldr	r5, [r6]
   19b64:	mov	r7, r0
   19b68:	movne	r0, #0
   19b6c:	moveq	r0, #1
   19b70:	ldr	r3, [r7]
   19b74:	orrs	r0, r0, r4, lsr #31
   19b78:	str	r3, [sp, #24]
   19b7c:	bne	19ce4 <__assert_fail@plt+0x8808>
   19b80:	ldr	r2, [r6, #4]
   19b84:	cmp	r4, r2
   19b88:	blt	19be8 <__assert_fail@plt+0x870c>
   19b8c:	add	r8, r6, #8
   19b90:	cmp	r5, r8
   19b94:	str	r2, [sp, #80]	; 0x50
   19b98:	beq	19cb4 <__assert_fail@plt+0x87d8>
   19b9c:	mov	r3, #8
   19ba0:	sub	r2, r4, r2
   19ba4:	mov	r0, r5
   19ba8:	str	r3, [sp]
   19bac:	add	r2, r2, #1
   19bb0:	add	r1, sp, #80	; 0x50
   19bb4:	mvn	r3, #-2147483648	; 0x80000000
   19bb8:	bl	1c784 <__assert_fail@plt+0xb2a8>
   19bbc:	mov	r5, r0
   19bc0:	str	r0, [r6]
   19bc4:	ldr	r0, [r6, #4]
   19bc8:	ldr	r2, [sp, #80]	; 0x50
   19bcc:	mov	r1, #0
   19bd0:	sub	r2, r2, r0
   19bd4:	add	r0, r5, r0, lsl #3
   19bd8:	lsl	r2, r2, #3
   19bdc:	bl	113d4 <memset@plt>
   19be0:	ldr	r3, [sp, #80]	; 0x50
   19be4:	str	r3, [r6, #4]
   19be8:	add	fp, r5, r4, lsl #3
   19bec:	ldr	r1, [sp, #36]	; 0x24
   19bf0:	ldr	r8, [r5, r4, lsl #3]
   19bf4:	ldr	r6, [fp, #4]
   19bf8:	ldr	r2, [sp, #72]	; 0x48
   19bfc:	ldr	r3, [sp, #32]
   19c00:	ldr	ip, [sp, #76]	; 0x4c
   19c04:	orr	r1, r1, #1
   19c08:	add	sl, sp, #40	; 0x28
   19c0c:	str	r1, [sp, #28]
   19c10:	str	r1, [sp, #4]
   19c14:	str	r2, [sp, #12]
   19c18:	str	r3, [sp]
   19c1c:	mov	r0, r6
   19c20:	mov	r1, r8
   19c24:	str	ip, [sp, #16]
   19c28:	str	sl, [sp, #8]
   19c2c:	mvn	r3, #0
   19c30:	mov	r2, r9
   19c34:	bl	17b5c <__assert_fail@plt+0x6680>
   19c38:	cmp	r8, r0
   19c3c:	bhi	19ca0 <__assert_fail@plt+0x87c4>
   19c40:	ldr	r3, [pc, #164]	; 19cec <__assert_fail@plt+0x8810>
   19c44:	add	r8, r0, #1
   19c48:	cmp	r6, r3
   19c4c:	str	r8, [r5, r4, lsl #3]
   19c50:	beq	19c5c <__assert_fail@plt+0x8780>
   19c54:	mov	r0, r6
   19c58:	bl	1e18c <__assert_fail@plt+0xccb0>
   19c5c:	mov	r0, r8
   19c60:	bl	1c568 <__assert_fail@plt+0xb08c>
   19c64:	ldr	lr, [sp, #76]	; 0x4c
   19c68:	ldr	r3, [sp, #32]
   19c6c:	ldr	ip, [sp, #72]	; 0x48
   19c70:	ldr	r4, [sp, #28]
   19c74:	mov	r2, r9
   19c78:	mov	r1, r8
   19c7c:	str	r0, [fp, #4]
   19c80:	str	r3, [sp]
   19c84:	str	sl, [sp, #8]
   19c88:	str	r4, [sp, #4]
   19c8c:	str	lr, [sp, #16]
   19c90:	str	ip, [sp, #12]
   19c94:	mvn	r3, #0
   19c98:	mov	r6, r0
   19c9c:	bl	17b5c <__assert_fail@plt+0x6680>
   19ca0:	ldr	r3, [sp, #24]
   19ca4:	mov	r0, r6
   19ca8:	str	r3, [r7]
   19cac:	add	sp, sp, #132	; 0x84
   19cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cb4:	mov	r3, #8
   19cb8:	sub	r2, r4, r2
   19cbc:	add	r1, sp, #80	; 0x50
   19cc0:	str	r3, [sp]
   19cc4:	add	r2, r2, #1
   19cc8:	mvn	r3, #-2147483648	; 0x80000000
   19ccc:	bl	1c784 <__assert_fail@plt+0xb2a8>
   19cd0:	mov	r5, r0
   19cd4:	ldm	r8, {r0, r1}
   19cd8:	str	r5, [r6]
   19cdc:	stm	r5, {r0, r1}
   19ce0:	b	19bc4 <__assert_fail@plt+0x86e8>
   19ce4:	bl	114ac <abort@plt>
   19ce8:	andeq	r2, r3, r0, lsl #3
   19cec:	andeq	r2, r3, r8, lsl #9
   19cf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19cf4:	sub	sp, sp, #132	; 0x84
   19cf8:	mov	r5, r1
   19cfc:	mov	r4, r0
   19d00:	mov	r9, r2
   19d04:	add	r0, sp, #80	; 0x50
   19d08:	mov	r2, #48	; 0x30
   19d0c:	mov	r1, #0
   19d10:	mov	sl, r3
   19d14:	bl	113d4 <memset@plt>
   19d18:	cmp	r5, #10
   19d1c:	beq	19ed8 <__assert_fail@plt+0x89fc>
   19d20:	add	lr, sp, #80	; 0x50
   19d24:	str	r5, [sp, #80]	; 0x50
   19d28:	ldm	lr!, {r0, r1, r2, r3}
   19d2c:	add	ip, sp, #32
   19d30:	ldr	r6, [pc, #420]	; 19edc <__assert_fail@plt+0x8a00>
   19d34:	stmia	ip!, {r0, r1, r2, r3}
   19d38:	ldm	lr!, {r0, r1, r2, r3}
   19d3c:	stmia	ip!, {r0, r1, r2, r3}
   19d40:	ldm	lr, {r0, r1, r2, r3}
   19d44:	stm	ip, {r0, r1, r2, r3}
   19d48:	bl	113a4 <__errno_location@plt>
   19d4c:	cmn	r4, #-2147483647	; 0x80000001
   19d50:	ldr	r5, [r6]
   19d54:	mov	r7, r0
   19d58:	movne	r0, #0
   19d5c:	moveq	r0, #1
   19d60:	ldr	r3, [r7]
   19d64:	orrs	r0, r0, r4, lsr #31
   19d68:	str	r3, [sp, #24]
   19d6c:	bne	19ed8 <__assert_fail@plt+0x89fc>
   19d70:	ldr	r2, [r6, #4]
   19d74:	cmp	r4, r2
   19d78:	blt	19dd8 <__assert_fail@plt+0x88fc>
   19d7c:	add	r8, r6, #8
   19d80:	cmp	r5, r8
   19d84:	str	r2, [sp, #80]	; 0x50
   19d88:	beq	19ea8 <__assert_fail@plt+0x89cc>
   19d8c:	mov	r3, #8
   19d90:	sub	r2, r4, r2
   19d94:	mov	r0, r5
   19d98:	str	r3, [sp]
   19d9c:	add	r2, r2, #1
   19da0:	add	r1, sp, #80	; 0x50
   19da4:	mvn	r3, #-2147483648	; 0x80000000
   19da8:	bl	1c784 <__assert_fail@plt+0xb2a8>
   19dac:	mov	r5, r0
   19db0:	str	r0, [r6]
   19db4:	ldr	r0, [r6, #4]
   19db8:	ldr	r2, [sp, #80]	; 0x50
   19dbc:	mov	r1, #0
   19dc0:	sub	r2, r2, r0
   19dc4:	add	r0, r5, r0, lsl #3
   19dc8:	lsl	r2, r2, #3
   19dcc:	bl	113d4 <memset@plt>
   19dd0:	ldr	r3, [sp, #80]	; 0x50
   19dd4:	str	r3, [r6, #4]
   19dd8:	add	fp, r5, r4, lsl #3
   19ddc:	ldr	r3, [sp, #32]
   19de0:	ldr	r1, [sp, #36]	; 0x24
   19de4:	ldr	r8, [r5, r4, lsl #3]
   19de8:	ldr	r6, [fp, #4]
   19dec:	ldr	r2, [sp, #72]	; 0x48
   19df0:	ldr	ip, [sp, #76]	; 0x4c
   19df4:	orr	r1, r1, #1
   19df8:	str	r3, [sp]
   19dfc:	add	r3, sp, #40	; 0x28
   19e00:	str	r1, [sp, #28]
   19e04:	str	r1, [sp, #4]
   19e08:	str	r2, [sp, #12]
   19e0c:	str	r3, [sp, #8]
   19e10:	mov	r0, r6
   19e14:	mov	r1, r8
   19e18:	str	ip, [sp, #16]
   19e1c:	mov	r3, sl
   19e20:	mov	r2, r9
   19e24:	bl	17b5c <__assert_fail@plt+0x6680>
   19e28:	cmp	r8, r0
   19e2c:	bhi	19e94 <__assert_fail@plt+0x89b8>
   19e30:	ldr	r3, [pc, #168]	; 19ee0 <__assert_fail@plt+0x8a04>
   19e34:	add	r8, r0, #1
   19e38:	cmp	r6, r3
   19e3c:	str	r8, [r5, r4, lsl #3]
   19e40:	beq	19e4c <__assert_fail@plt+0x8970>
   19e44:	mov	r0, r6
   19e48:	bl	1e18c <__assert_fail@plt+0xccb0>
   19e4c:	mov	r0, r8
   19e50:	bl	1c568 <__assert_fail@plt+0xb08c>
   19e54:	add	lr, sp, #40	; 0x28
   19e58:	ldr	ip, [sp, #76]	; 0x4c
   19e5c:	ldr	r4, [sp, #72]	; 0x48
   19e60:	ldr	r5, [sp, #28]
   19e64:	mov	r3, sl
   19e68:	mov	r2, r9
   19e6c:	mov	r1, r8
   19e70:	str	r0, [fp, #4]
   19e74:	str	lr, [sp, #8]
   19e78:	ldr	lr, [sp, #32]
   19e7c:	str	r5, [sp, #4]
   19e80:	str	ip, [sp, #16]
   19e84:	str	r4, [sp, #12]
   19e88:	str	lr, [sp]
   19e8c:	mov	r6, r0
   19e90:	bl	17b5c <__assert_fail@plt+0x6680>
   19e94:	ldr	r3, [sp, #24]
   19e98:	mov	r0, r6
   19e9c:	str	r3, [r7]
   19ea0:	add	sp, sp, #132	; 0x84
   19ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ea8:	mov	r3, #8
   19eac:	sub	r2, r4, r2
   19eb0:	add	r1, sp, #80	; 0x50
   19eb4:	str	r3, [sp]
   19eb8:	add	r2, r2, #1
   19ebc:	mvn	r3, #-2147483648	; 0x80000000
   19ec0:	bl	1c784 <__assert_fail@plt+0xb2a8>
   19ec4:	mov	r5, r0
   19ec8:	ldm	r8, {r0, r1}
   19ecc:	str	r5, [r6]
   19ed0:	stm	r5, {r0, r1}
   19ed4:	b	19db4 <__assert_fail@plt+0x88d8>
   19ed8:	bl	114ac <abort@plt>
   19edc:	andeq	r2, r3, r0, lsl #3
   19ee0:	andeq	r2, r3, r8, lsl #9
   19ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ee8:	sub	sp, sp, #124	; 0x7c
   19eec:	mov	r4, r0
   19ef0:	mov	r9, r1
   19ef4:	add	r0, sp, #72	; 0x48
   19ef8:	mov	r2, #48	; 0x30
   19efc:	mov	r1, #0
   19f00:	bl	113d4 <memset@plt>
   19f04:	cmp	r4, #10
   19f08:	beq	1a094 <__assert_fail@plt+0x8bb8>
   19f0c:	add	lr, sp, #72	; 0x48
   19f10:	str	r4, [sp, #72]	; 0x48
   19f14:	ldm	lr!, {r0, r1, r2, r3}
   19f18:	add	ip, sp, #24
   19f1c:	ldr	r5, [pc, #372]	; 1a098 <__assert_fail@plt+0x8bbc>
   19f20:	stmia	ip!, {r0, r1, r2, r3}
   19f24:	ldm	lr!, {r0, r1, r2, r3}
   19f28:	stmia	ip!, {r0, r1, r2, r3}
   19f2c:	ldm	lr, {r0, r1, r2, r3}
   19f30:	stm	ip, {r0, r1, r2, r3}
   19f34:	bl	113a4 <__errno_location@plt>
   19f38:	ldr	r2, [r5, #4]
   19f3c:	ldr	r4, [r5]
   19f40:	cmp	r2, #0
   19f44:	mov	r7, r0
   19f48:	ldr	fp, [r0]
   19f4c:	bgt	19fa8 <__assert_fail@plt+0x8acc>
   19f50:	add	r6, r5, #8
   19f54:	cmp	r4, r6
   19f58:	str	r2, [sp, #72]	; 0x48
   19f5c:	beq	1a064 <__assert_fail@plt+0x8b88>
   19f60:	mov	r3, #8
   19f64:	mov	r0, r4
   19f68:	str	r3, [sp]
   19f6c:	rsb	r2, r2, #1
   19f70:	add	r1, sp, #72	; 0x48
   19f74:	mvn	r3, #-2147483648	; 0x80000000
   19f78:	bl	1c784 <__assert_fail@plt+0xb2a8>
   19f7c:	mov	r4, r0
   19f80:	str	r0, [r5]
   19f84:	ldr	r0, [r5, #4]
   19f88:	ldr	r2, [sp, #72]	; 0x48
   19f8c:	mov	r1, #0
   19f90:	sub	r2, r2, r0
   19f94:	add	r0, r4, r0, lsl #3
   19f98:	lsl	r2, r2, #3
   19f9c:	bl	113d4 <memset@plt>
   19fa0:	ldr	r3, [sp, #72]	; 0x48
   19fa4:	str	r3, [r5, #4]
   19fa8:	ldr	r6, [sp, #28]
   19fac:	ldr	r8, [r4]
   19fb0:	ldr	r5, [r4, #4]
   19fb4:	ldr	r2, [sp, #64]	; 0x40
   19fb8:	ldr	r3, [sp, #24]
   19fbc:	ldr	ip, [sp, #68]	; 0x44
   19fc0:	orr	r6, r6, #1
   19fc4:	add	sl, sp, #32
   19fc8:	str	r2, [sp, #12]
   19fcc:	str	r3, [sp]
   19fd0:	str	r6, [sp, #4]
   19fd4:	mov	r1, r8
   19fd8:	mov	r0, r5
   19fdc:	str	ip, [sp, #16]
   19fe0:	str	sl, [sp, #8]
   19fe4:	mvn	r3, #0
   19fe8:	mov	r2, r9
   19fec:	bl	17b5c <__assert_fail@plt+0x6680>
   19ff0:	cmp	r8, r0
   19ff4:	bhi	1a054 <__assert_fail@plt+0x8b78>
   19ff8:	ldr	r3, [pc, #156]	; 1a09c <__assert_fail@plt+0x8bc0>
   19ffc:	add	r8, r0, #1
   1a000:	cmp	r5, r3
   1a004:	str	r8, [r4]
   1a008:	beq	1a014 <__assert_fail@plt+0x8b38>
   1a00c:	mov	r0, r5
   1a010:	bl	1e18c <__assert_fail@plt+0xccb0>
   1a014:	mov	r0, r8
   1a018:	bl	1c568 <__assert_fail@plt+0xb08c>
   1a01c:	ldr	lr, [sp, #68]	; 0x44
   1a020:	ldr	r3, [sp, #24]
   1a024:	ldr	ip, [sp, #64]	; 0x40
   1a028:	mov	r2, r9
   1a02c:	mov	r1, r8
   1a030:	str	r0, [r4, #4]
   1a034:	str	r3, [sp]
   1a038:	str	sl, [sp, #8]
   1a03c:	str	r6, [sp, #4]
   1a040:	str	lr, [sp, #16]
   1a044:	str	ip, [sp, #12]
   1a048:	mvn	r3, #0
   1a04c:	mov	r5, r0
   1a050:	bl	17b5c <__assert_fail@plt+0x6680>
   1a054:	mov	r0, r5
   1a058:	str	fp, [r7]
   1a05c:	add	sp, sp, #124	; 0x7c
   1a060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a064:	mov	r3, #8
   1a068:	add	r1, sp, #72	; 0x48
   1a06c:	str	r3, [sp]
   1a070:	rsb	r2, r2, #1
   1a074:	mvn	r3, #-2147483648	; 0x80000000
   1a078:	mov	r0, #0
   1a07c:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1a080:	mov	r4, r0
   1a084:	ldm	r6, {r0, r1}
   1a088:	str	r4, [r5]
   1a08c:	stm	r4, {r0, r1}
   1a090:	b	19f84 <__assert_fail@plt+0x8aa8>
   1a094:	bl	114ac <abort@plt>
   1a098:	andeq	r2, r3, r0, lsl #3
   1a09c:	andeq	r2, r3, r8, lsl #9
   1a0a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0a4:	sub	sp, sp, #132	; 0x84
   1a0a8:	mov	r4, r0
   1a0ac:	mov	r9, r1
   1a0b0:	mov	sl, r2
   1a0b4:	add	r0, sp, #80	; 0x50
   1a0b8:	mov	r2, #48	; 0x30
   1a0bc:	mov	r1, #0
   1a0c0:	bl	113d4 <memset@plt>
   1a0c4:	cmp	r4, #10
   1a0c8:	beq	1a25c <__assert_fail@plt+0x8d80>
   1a0cc:	add	lr, sp, #80	; 0x50
   1a0d0:	str	r4, [sp, #80]	; 0x50
   1a0d4:	ldm	lr!, {r0, r1, r2, r3}
   1a0d8:	add	ip, sp, #32
   1a0dc:	ldr	r5, [pc, #380]	; 1a260 <__assert_fail@plt+0x8d84>
   1a0e0:	stmia	ip!, {r0, r1, r2, r3}
   1a0e4:	ldm	lr!, {r0, r1, r2, r3}
   1a0e8:	stmia	ip!, {r0, r1, r2, r3}
   1a0ec:	ldm	lr, {r0, r1, r2, r3}
   1a0f0:	stm	ip, {r0, r1, r2, r3}
   1a0f4:	bl	113a4 <__errno_location@plt>
   1a0f8:	ldr	r2, [r5, #4]
   1a0fc:	ldr	r4, [r5]
   1a100:	cmp	r2, #0
   1a104:	ldr	r3, [r0]
   1a108:	mov	r7, r0
   1a10c:	str	r3, [sp, #28]
   1a110:	bgt	1a16c <__assert_fail@plt+0x8c90>
   1a114:	add	r6, r5, #8
   1a118:	cmp	r4, r6
   1a11c:	str	r2, [sp, #80]	; 0x50
   1a120:	beq	1a22c <__assert_fail@plt+0x8d50>
   1a124:	mov	r3, #8
   1a128:	mov	r0, r4
   1a12c:	str	r3, [sp]
   1a130:	rsb	r2, r2, #1
   1a134:	add	r1, sp, #80	; 0x50
   1a138:	mvn	r3, #-2147483648	; 0x80000000
   1a13c:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1a140:	mov	r4, r0
   1a144:	str	r0, [r5]
   1a148:	ldr	r0, [r5, #4]
   1a14c:	ldr	r2, [sp, #80]	; 0x50
   1a150:	mov	r1, #0
   1a154:	sub	r2, r2, r0
   1a158:	add	r0, r4, r0, lsl #3
   1a15c:	lsl	r2, r2, #3
   1a160:	bl	113d4 <memset@plt>
   1a164:	ldr	r3, [sp, #80]	; 0x50
   1a168:	str	r3, [r5, #4]
   1a16c:	ldr	r6, [sp, #36]	; 0x24
   1a170:	ldr	r8, [r4]
   1a174:	ldr	r5, [r4, #4]
   1a178:	ldr	r2, [sp, #72]	; 0x48
   1a17c:	ldr	r3, [sp, #32]
   1a180:	ldr	ip, [sp, #76]	; 0x4c
   1a184:	orr	r6, r6, #1
   1a188:	add	fp, sp, #40	; 0x28
   1a18c:	str	r2, [sp, #12]
   1a190:	str	r3, [sp]
   1a194:	str	r6, [sp, #4]
   1a198:	mov	r1, r8
   1a19c:	mov	r0, r5
   1a1a0:	str	ip, [sp, #16]
   1a1a4:	str	fp, [sp, #8]
   1a1a8:	mov	r3, sl
   1a1ac:	mov	r2, r9
   1a1b0:	bl	17b5c <__assert_fail@plt+0x6680>
   1a1b4:	cmp	r8, r0
   1a1b8:	bhi	1a218 <__assert_fail@plt+0x8d3c>
   1a1bc:	ldr	r3, [pc, #160]	; 1a264 <__assert_fail@plt+0x8d88>
   1a1c0:	add	r8, r0, #1
   1a1c4:	cmp	r5, r3
   1a1c8:	str	r8, [r4]
   1a1cc:	beq	1a1d8 <__assert_fail@plt+0x8cfc>
   1a1d0:	mov	r0, r5
   1a1d4:	bl	1e18c <__assert_fail@plt+0xccb0>
   1a1d8:	mov	r0, r8
   1a1dc:	bl	1c568 <__assert_fail@plt+0xb08c>
   1a1e0:	ldr	ip, [sp, #76]	; 0x4c
   1a1e4:	ldr	lr, [sp, #32]
   1a1e8:	mov	r3, sl
   1a1ec:	mov	r2, r9
   1a1f0:	mov	r1, r8
   1a1f4:	str	r0, [r4, #4]
   1a1f8:	ldr	r4, [sp, #72]	; 0x48
   1a1fc:	str	fp, [sp, #8]
   1a200:	str	r6, [sp, #4]
   1a204:	str	ip, [sp, #16]
   1a208:	str	r4, [sp, #12]
   1a20c:	str	lr, [sp]
   1a210:	mov	r5, r0
   1a214:	bl	17b5c <__assert_fail@plt+0x6680>
   1a218:	ldr	r3, [sp, #28]
   1a21c:	mov	r0, r5
   1a220:	str	r3, [r7]
   1a224:	add	sp, sp, #132	; 0x84
   1a228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a22c:	mov	r3, #8
   1a230:	add	r1, sp, #80	; 0x50
   1a234:	str	r3, [sp]
   1a238:	rsb	r2, r2, #1
   1a23c:	mvn	r3, #-2147483648	; 0x80000000
   1a240:	mov	r0, #0
   1a244:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1a248:	mov	r4, r0
   1a24c:	ldm	r6, {r0, r1}
   1a250:	str	r4, [r5]
   1a254:	stm	r4, {r0, r1}
   1a258:	b	1a148 <__assert_fail@plt+0x8c6c>
   1a25c:	bl	114ac <abort@plt>
   1a260:	andeq	r2, r3, r0, lsl #3
   1a264:	andeq	r2, r3, r8, lsl #9
   1a268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a26c:	mov	r4, r2
   1a270:	ldr	lr, [pc, #432]	; 1a428 <__assert_fail@plt+0x8f4c>
   1a274:	mov	sl, r0
   1a278:	mov	fp, r1
   1a27c:	ldm	lr!, {r0, r1, r2, r3}
   1a280:	sub	sp, sp, #92	; 0x5c
   1a284:	add	ip, sp, #40	; 0x28
   1a288:	lsr	r7, r4, #5
   1a28c:	stmia	ip!, {r0, r1, r2, r3}
   1a290:	add	r6, sp, #48	; 0x30
   1a294:	ldm	lr!, {r0, r1, r2, r3}
   1a298:	and	r4, r4, #31
   1a29c:	ldr	r5, [pc, #392]	; 1a42c <__assert_fail@plt+0x8f50>
   1a2a0:	stmia	ip!, {r0, r1, r2, r3}
   1a2a4:	ldm	lr, {r0, r1, r2, r3}
   1a2a8:	stm	ip, {r0, r1, r2, r3}
   1a2ac:	ldr	r2, [r6, r7, lsl #2]
   1a2b0:	lsr	r3, r2, r4
   1a2b4:	eor	r3, r3, #1
   1a2b8:	and	r3, r3, #1
   1a2bc:	eor	r4, r2, r3, lsl r4
   1a2c0:	str	r4, [r6, r7, lsl #2]
   1a2c4:	bl	113a4 <__errno_location@plt>
   1a2c8:	ldr	r2, [r5, #4]
   1a2cc:	ldr	r4, [r5]
   1a2d0:	cmp	r2, #0
   1a2d4:	ldr	r3, [r0]
   1a2d8:	mov	r8, r0
   1a2dc:	str	r3, [sp, #28]
   1a2e0:	bgt	1a33c <__assert_fail@plt+0x8e60>
   1a2e4:	add	r7, r5, #8
   1a2e8:	cmp	r4, r7
   1a2ec:	str	r2, [sp, #36]	; 0x24
   1a2f0:	beq	1a3f8 <__assert_fail@plt+0x8f1c>
   1a2f4:	mov	r3, #8
   1a2f8:	mov	r0, r4
   1a2fc:	str	r3, [sp]
   1a300:	rsb	r2, r2, #1
   1a304:	mvn	r3, #-2147483648	; 0x80000000
   1a308:	add	r1, sp, #36	; 0x24
   1a30c:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1a310:	mov	r4, r0
   1a314:	str	r0, [r5]
   1a318:	ldr	r0, [r5, #4]
   1a31c:	ldr	r2, [sp, #36]	; 0x24
   1a320:	mov	r1, #0
   1a324:	sub	r2, r2, r0
   1a328:	add	r0, r4, r0, lsl #3
   1a32c:	lsl	r2, r2, #3
   1a330:	bl	113d4 <memset@plt>
   1a334:	ldr	r3, [sp, #36]	; 0x24
   1a338:	str	r3, [r5, #4]
   1a33c:	ldr	r7, [sp, #44]	; 0x2c
   1a340:	ldr	r9, [r4]
   1a344:	ldr	r5, [r4, #4]
   1a348:	ldr	r2, [sp, #80]	; 0x50
   1a34c:	ldr	r3, [sp, #40]	; 0x28
   1a350:	ldr	ip, [sp, #84]	; 0x54
   1a354:	orr	r7, r7, #1
   1a358:	str	r2, [sp, #12]
   1a35c:	str	r3, [sp]
   1a360:	str	r7, [sp, #4]
   1a364:	str	r6, [sp, #8]
   1a368:	mov	r1, r9
   1a36c:	mov	r0, r5
   1a370:	str	ip, [sp, #16]
   1a374:	mov	r3, fp
   1a378:	mov	r2, sl
   1a37c:	bl	17b5c <__assert_fail@plt+0x6680>
   1a380:	cmp	r9, r0
   1a384:	bhi	1a3e4 <__assert_fail@plt+0x8f08>
   1a388:	ldr	r3, [pc, #160]	; 1a430 <__assert_fail@plt+0x8f54>
   1a38c:	add	r9, r0, #1
   1a390:	cmp	r5, r3
   1a394:	str	r9, [r4]
   1a398:	beq	1a3a4 <__assert_fail@plt+0x8ec8>
   1a39c:	mov	r0, r5
   1a3a0:	bl	1e18c <__assert_fail@plt+0xccb0>
   1a3a4:	mov	r0, r9
   1a3a8:	bl	1c568 <__assert_fail@plt+0xb08c>
   1a3ac:	ldr	ip, [sp, #84]	; 0x54
   1a3b0:	ldr	lr, [sp, #40]	; 0x28
   1a3b4:	mov	r3, fp
   1a3b8:	mov	r2, sl
   1a3bc:	mov	r1, r9
   1a3c0:	str	r0, [r4, #4]
   1a3c4:	ldr	r4, [sp, #80]	; 0x50
   1a3c8:	str	r6, [sp, #8]
   1a3cc:	str	r7, [sp, #4]
   1a3d0:	str	ip, [sp, #16]
   1a3d4:	str	r4, [sp, #12]
   1a3d8:	str	lr, [sp]
   1a3dc:	mov	r5, r0
   1a3e0:	bl	17b5c <__assert_fail@plt+0x6680>
   1a3e4:	ldr	r3, [sp, #28]
   1a3e8:	mov	r0, r5
   1a3ec:	str	r3, [r8]
   1a3f0:	add	sp, sp, #92	; 0x5c
   1a3f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3f8:	mov	r3, #8
   1a3fc:	str	r3, [sp]
   1a400:	add	r1, sp, #36	; 0x24
   1a404:	rsb	r2, r2, #1
   1a408:	mvn	r3, #-2147483648	; 0x80000000
   1a40c:	mov	r0, #0
   1a410:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1a414:	mov	r4, r0
   1a418:	ldm	r7, {r0, r1}
   1a41c:	str	r4, [r5]
   1a420:	stm	r4, {r0, r1}
   1a424:	b	1a318 <__assert_fail@plt+0x8e3c>
   1a428:	andeq	r2, r3, r8, asr r4
   1a42c:	andeq	r2, r3, r0, lsl #3
   1a430:	andeq	r2, r3, r8, lsl #9
   1a434:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a438:	mov	r4, r1
   1a43c:	ldr	lr, [pc, #420]	; 1a5e8 <__assert_fail@plt+0x910c>
   1a440:	mov	r6, r0
   1a444:	sub	sp, sp, #84	; 0x54
   1a448:	ldm	lr!, {r0, r1, r2, r3}
   1a44c:	add	ip, sp, #32
   1a450:	lsr	r8, r4, #5
   1a454:	add	r5, sp, #40	; 0x28
   1a458:	stmia	ip!, {r0, r1, r2, r3}
   1a45c:	and	r4, r4, #31
   1a460:	ldm	lr!, {r0, r1, r2, r3}
   1a464:	ldr	r7, [pc, #384]	; 1a5ec <__assert_fail@plt+0x9110>
   1a468:	stmia	ip!, {r0, r1, r2, r3}
   1a46c:	ldm	lr, {r0, r1, r2, r3}
   1a470:	stm	ip, {r0, r1, r2, r3}
   1a474:	ldr	r2, [r5, r8, lsl #2]
   1a478:	lsr	r3, r2, r4
   1a47c:	eor	r3, r3, #1
   1a480:	and	r3, r3, #1
   1a484:	eor	r4, r2, r3, lsl r4
   1a488:	str	r4, [r5, r8, lsl #2]
   1a48c:	bl	113a4 <__errno_location@plt>
   1a490:	ldr	r2, [r7, #4]
   1a494:	ldr	r4, [r7]
   1a498:	cmp	r2, #0
   1a49c:	mov	r9, r0
   1a4a0:	ldr	sl, [r0]
   1a4a4:	bgt	1a500 <__assert_fail@plt+0x9024>
   1a4a8:	add	r8, r7, #8
   1a4ac:	cmp	r4, r8
   1a4b0:	str	r2, [sp, #28]
   1a4b4:	beq	1a5b8 <__assert_fail@plt+0x90dc>
   1a4b8:	mov	r3, #8
   1a4bc:	mov	r0, r4
   1a4c0:	str	r3, [sp]
   1a4c4:	rsb	r2, r2, #1
   1a4c8:	mvn	r3, #-2147483648	; 0x80000000
   1a4cc:	add	r1, sp, #28
   1a4d0:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1a4d4:	mov	r4, r0
   1a4d8:	str	r0, [r7]
   1a4dc:	ldr	r0, [r7, #4]
   1a4e0:	ldr	r2, [sp, #28]
   1a4e4:	mov	r1, #0
   1a4e8:	sub	r2, r2, r0
   1a4ec:	add	r0, r4, r0, lsl #3
   1a4f0:	lsl	r2, r2, #3
   1a4f4:	bl	113d4 <memset@plt>
   1a4f8:	ldr	r3, [sp, #28]
   1a4fc:	str	r3, [r7, #4]
   1a500:	ldr	r8, [sp, #36]	; 0x24
   1a504:	ldr	fp, [r4]
   1a508:	ldr	r7, [r4, #4]
   1a50c:	ldr	r2, [sp, #72]	; 0x48
   1a510:	ldr	r3, [sp, #32]
   1a514:	ldr	ip, [sp, #76]	; 0x4c
   1a518:	orr	r8, r8, #1
   1a51c:	str	r2, [sp, #12]
   1a520:	str	r3, [sp]
   1a524:	str	r8, [sp, #4]
   1a528:	str	r5, [sp, #8]
   1a52c:	mov	r1, fp
   1a530:	mov	r0, r7
   1a534:	str	ip, [sp, #16]
   1a538:	mvn	r3, #0
   1a53c:	mov	r2, r6
   1a540:	bl	17b5c <__assert_fail@plt+0x6680>
   1a544:	cmp	fp, r0
   1a548:	bhi	1a5a8 <__assert_fail@plt+0x90cc>
   1a54c:	ldr	r3, [pc, #156]	; 1a5f0 <__assert_fail@plt+0x9114>
   1a550:	add	fp, r0, #1
   1a554:	cmp	r7, r3
   1a558:	str	fp, [r4]
   1a55c:	beq	1a568 <__assert_fail@plt+0x908c>
   1a560:	mov	r0, r7
   1a564:	bl	1e18c <__assert_fail@plt+0xccb0>
   1a568:	mov	r0, fp
   1a56c:	bl	1c568 <__assert_fail@plt+0xb08c>
   1a570:	ldr	lr, [sp, #76]	; 0x4c
   1a574:	ldr	r3, [sp, #32]
   1a578:	ldr	ip, [sp, #72]	; 0x48
   1a57c:	mov	r2, r6
   1a580:	mov	r1, fp
   1a584:	str	r0, [r4, #4]
   1a588:	str	r3, [sp]
   1a58c:	str	r5, [sp, #8]
   1a590:	str	r8, [sp, #4]
   1a594:	str	lr, [sp, #16]
   1a598:	str	ip, [sp, #12]
   1a59c:	mvn	r3, #0
   1a5a0:	mov	r7, r0
   1a5a4:	bl	17b5c <__assert_fail@plt+0x6680>
   1a5a8:	mov	r0, r7
   1a5ac:	str	sl, [r9]
   1a5b0:	add	sp, sp, #84	; 0x54
   1a5b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5b8:	mov	r3, #8
   1a5bc:	str	r3, [sp]
   1a5c0:	add	r1, sp, #28
   1a5c4:	rsb	r2, r2, #1
   1a5c8:	mvn	r3, #-2147483648	; 0x80000000
   1a5cc:	mov	r0, #0
   1a5d0:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1a5d4:	mov	r4, r0
   1a5d8:	ldm	r8, {r0, r1}
   1a5dc:	str	r4, [r7]
   1a5e0:	stm	r4, {r0, r1}
   1a5e4:	b	1a4dc <__assert_fail@plt+0x9000>
   1a5e8:	andeq	r2, r3, r8, asr r4
   1a5ec:	andeq	r2, r3, r0, lsl #3
   1a5f0:	andeq	r2, r3, r8, lsl #9
   1a5f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5f8:	mov	r6, r0
   1a5fc:	ldr	lr, [pc, #404]	; 1a798 <__assert_fail@plt+0x92bc>
   1a600:	sub	sp, sp, #84	; 0x54
   1a604:	add	ip, sp, #32
   1a608:	ldm	lr!, {r0, r1, r2, r3}
   1a60c:	ldr	r5, [pc, #392]	; 1a79c <__assert_fail@plt+0x92c0>
   1a610:	stmia	ip!, {r0, r1, r2, r3}
   1a614:	ldm	lr!, {r0, r1, r2, r3}
   1a618:	ldr	r4, [sp, #44]	; 0x2c
   1a61c:	stmia	ip!, {r0, r1, r2, r3}
   1a620:	ldm	lr, {r0, r1, r2, r3}
   1a624:	mvn	lr, r4
   1a628:	and	lr, lr, #67108864	; 0x4000000
   1a62c:	eor	lr, lr, r4
   1a630:	stm	ip, {r0, r1, r2, r3}
   1a634:	str	lr, [sp, #44]	; 0x2c
   1a638:	bl	113a4 <__errno_location@plt>
   1a63c:	ldr	r2, [r5, #4]
   1a640:	ldr	r4, [r5]
   1a644:	cmp	r2, #0
   1a648:	mov	r8, r0
   1a64c:	ldr	sl, [r0]
   1a650:	bgt	1a6ac <__assert_fail@plt+0x91d0>
   1a654:	add	r7, r5, #8
   1a658:	cmp	r4, r7
   1a65c:	str	r2, [sp, #28]
   1a660:	beq	1a768 <__assert_fail@plt+0x928c>
   1a664:	mov	r3, #8
   1a668:	mov	r0, r4
   1a66c:	str	r3, [sp]
   1a670:	rsb	r2, r2, #1
   1a674:	mvn	r3, #-2147483648	; 0x80000000
   1a678:	add	r1, sp, #28
   1a67c:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1a680:	mov	r4, r0
   1a684:	str	r0, [r5]
   1a688:	ldr	r0, [r5, #4]
   1a68c:	ldr	r2, [sp, #28]
   1a690:	mov	r1, #0
   1a694:	sub	r2, r2, r0
   1a698:	add	r0, r4, r0, lsl #3
   1a69c:	lsl	r2, r2, #3
   1a6a0:	bl	113d4 <memset@plt>
   1a6a4:	ldr	r3, [sp, #28]
   1a6a8:	str	r3, [r5, #4]
   1a6ac:	ldr	r7, [sp, #36]	; 0x24
   1a6b0:	ldr	r9, [r4]
   1a6b4:	ldr	r5, [r4, #4]
   1a6b8:	ldr	r2, [sp, #72]	; 0x48
   1a6bc:	ldr	r3, [sp, #32]
   1a6c0:	ldr	ip, [sp, #76]	; 0x4c
   1a6c4:	orr	r7, r7, #1
   1a6c8:	add	fp, sp, #40	; 0x28
   1a6cc:	str	r2, [sp, #12]
   1a6d0:	str	r3, [sp]
   1a6d4:	str	r7, [sp, #4]
   1a6d8:	mov	r1, r9
   1a6dc:	mov	r0, r5
   1a6e0:	str	ip, [sp, #16]
   1a6e4:	str	fp, [sp, #8]
   1a6e8:	mvn	r3, #0
   1a6ec:	mov	r2, r6
   1a6f0:	bl	17b5c <__assert_fail@plt+0x6680>
   1a6f4:	cmp	r9, r0
   1a6f8:	bhi	1a758 <__assert_fail@plt+0x927c>
   1a6fc:	ldr	r3, [pc, #156]	; 1a7a0 <__assert_fail@plt+0x92c4>
   1a700:	add	r9, r0, #1
   1a704:	cmp	r5, r3
   1a708:	str	r9, [r4]
   1a70c:	beq	1a718 <__assert_fail@plt+0x923c>
   1a710:	mov	r0, r5
   1a714:	bl	1e18c <__assert_fail@plt+0xccb0>
   1a718:	mov	r0, r9
   1a71c:	bl	1c568 <__assert_fail@plt+0xb08c>
   1a720:	ldr	lr, [sp, #76]	; 0x4c
   1a724:	ldr	r3, [sp, #32]
   1a728:	ldr	ip, [sp, #72]	; 0x48
   1a72c:	mov	r2, r6
   1a730:	mov	r1, r9
   1a734:	str	r0, [r4, #4]
   1a738:	str	r3, [sp]
   1a73c:	str	fp, [sp, #8]
   1a740:	str	r7, [sp, #4]
   1a744:	str	lr, [sp, #16]
   1a748:	str	ip, [sp, #12]
   1a74c:	mvn	r3, #0
   1a750:	mov	r5, r0
   1a754:	bl	17b5c <__assert_fail@plt+0x6680>
   1a758:	mov	r0, r5
   1a75c:	str	sl, [r8]
   1a760:	add	sp, sp, #84	; 0x54
   1a764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a768:	mov	r3, #8
   1a76c:	str	r3, [sp]
   1a770:	add	r1, sp, #28
   1a774:	rsb	r2, r2, #1
   1a778:	mvn	r3, #-2147483648	; 0x80000000
   1a77c:	mov	r0, #0
   1a780:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1a784:	mov	r4, r0
   1a788:	ldm	r7, {r0, r1}
   1a78c:	str	r4, [r5]
   1a790:	stm	r4, {r0, r1}
   1a794:	b	1a688 <__assert_fail@plt+0x91ac>
   1a798:	andeq	r2, r3, r8, asr r4
   1a79c:	andeq	r2, r3, r0, lsl #3
   1a7a0:	andeq	r2, r3, r8, lsl #9
   1a7a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7a8:	mov	r9, r0
   1a7ac:	ldr	lr, [pc, #416]	; 1a954 <__assert_fail@plt+0x9478>
   1a7b0:	mov	sl, r1
   1a7b4:	sub	sp, sp, #92	; 0x5c
   1a7b8:	ldm	lr!, {r0, r1, r2, r3}
   1a7bc:	add	ip, sp, #40	; 0x28
   1a7c0:	ldr	r5, [pc, #400]	; 1a958 <__assert_fail@plt+0x947c>
   1a7c4:	stmia	ip!, {r0, r1, r2, r3}
   1a7c8:	ldm	lr!, {r0, r1, r2, r3}
   1a7cc:	ldr	r4, [sp, #52]	; 0x34
   1a7d0:	stmia	ip!, {r0, r1, r2, r3}
   1a7d4:	ldm	lr, {r0, r1, r2, r3}
   1a7d8:	mvn	lr, r4
   1a7dc:	and	lr, lr, #67108864	; 0x4000000
   1a7e0:	eor	lr, lr, r4
   1a7e4:	stm	ip, {r0, r1, r2, r3}
   1a7e8:	str	lr, [sp, #52]	; 0x34
   1a7ec:	bl	113a4 <__errno_location@plt>
   1a7f0:	ldr	r2, [r5, #4]
   1a7f4:	ldr	r4, [r5]
   1a7f8:	cmp	r2, #0
   1a7fc:	ldr	r3, [r0]
   1a800:	mov	r7, r0
   1a804:	str	r3, [sp, #28]
   1a808:	bgt	1a864 <__assert_fail@plt+0x9388>
   1a80c:	add	r6, r5, #8
   1a810:	cmp	r4, r6
   1a814:	str	r2, [sp, #36]	; 0x24
   1a818:	beq	1a924 <__assert_fail@plt+0x9448>
   1a81c:	mov	r3, #8
   1a820:	mov	r0, r4
   1a824:	str	r3, [sp]
   1a828:	rsb	r2, r2, #1
   1a82c:	mvn	r3, #-2147483648	; 0x80000000
   1a830:	add	r1, sp, #36	; 0x24
   1a834:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1a838:	mov	r4, r0
   1a83c:	str	r0, [r5]
   1a840:	ldr	r0, [r5, #4]
   1a844:	ldr	r2, [sp, #36]	; 0x24
   1a848:	mov	r1, #0
   1a84c:	sub	r2, r2, r0
   1a850:	add	r0, r4, r0, lsl #3
   1a854:	lsl	r2, r2, #3
   1a858:	bl	113d4 <memset@plt>
   1a85c:	ldr	r3, [sp, #36]	; 0x24
   1a860:	str	r3, [r5, #4]
   1a864:	ldr	r6, [sp, #44]	; 0x2c
   1a868:	ldr	r8, [r4]
   1a86c:	ldr	r5, [r4, #4]
   1a870:	ldr	r2, [sp, #80]	; 0x50
   1a874:	ldr	r3, [sp, #40]	; 0x28
   1a878:	ldr	ip, [sp, #84]	; 0x54
   1a87c:	orr	r6, r6, #1
   1a880:	add	fp, sp, #48	; 0x30
   1a884:	str	r2, [sp, #12]
   1a888:	str	r3, [sp]
   1a88c:	str	r6, [sp, #4]
   1a890:	mov	r1, r8
   1a894:	mov	r0, r5
   1a898:	str	ip, [sp, #16]
   1a89c:	str	fp, [sp, #8]
   1a8a0:	mov	r3, sl
   1a8a4:	mov	r2, r9
   1a8a8:	bl	17b5c <__assert_fail@plt+0x6680>
   1a8ac:	cmp	r8, r0
   1a8b0:	bhi	1a910 <__assert_fail@plt+0x9434>
   1a8b4:	ldr	r3, [pc, #160]	; 1a95c <__assert_fail@plt+0x9480>
   1a8b8:	add	r8, r0, #1
   1a8bc:	cmp	r5, r3
   1a8c0:	str	r8, [r4]
   1a8c4:	beq	1a8d0 <__assert_fail@plt+0x93f4>
   1a8c8:	mov	r0, r5
   1a8cc:	bl	1e18c <__assert_fail@plt+0xccb0>
   1a8d0:	mov	r0, r8
   1a8d4:	bl	1c568 <__assert_fail@plt+0xb08c>
   1a8d8:	ldr	ip, [sp, #84]	; 0x54
   1a8dc:	ldr	lr, [sp, #40]	; 0x28
   1a8e0:	mov	r3, sl
   1a8e4:	mov	r2, r9
   1a8e8:	mov	r1, r8
   1a8ec:	str	r0, [r4, #4]
   1a8f0:	ldr	r4, [sp, #80]	; 0x50
   1a8f4:	str	fp, [sp, #8]
   1a8f8:	str	r6, [sp, #4]
   1a8fc:	str	ip, [sp, #16]
   1a900:	str	r4, [sp, #12]
   1a904:	str	lr, [sp]
   1a908:	mov	r5, r0
   1a90c:	bl	17b5c <__assert_fail@plt+0x6680>
   1a910:	ldr	r3, [sp, #28]
   1a914:	mov	r0, r5
   1a918:	str	r3, [r7]
   1a91c:	add	sp, sp, #92	; 0x5c
   1a920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a924:	mov	r3, #8
   1a928:	str	r3, [sp]
   1a92c:	add	r1, sp, #36	; 0x24
   1a930:	rsb	r2, r2, #1
   1a934:	mvn	r3, #-2147483648	; 0x80000000
   1a938:	mov	r0, #0
   1a93c:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1a940:	mov	r4, r0
   1a944:	ldm	r6, {r0, r1}
   1a948:	str	r4, [r5]
   1a94c:	stm	r4, {r0, r1}
   1a950:	b	1a840 <__assert_fail@plt+0x9364>
   1a954:	andeq	r2, r3, r8, asr r4
   1a958:	andeq	r2, r3, r0, lsl #3
   1a95c:	andeq	r2, r3, r8, lsl #9
   1a960:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a964:	sub	sp, sp, #180	; 0xb4
   1a968:	mov	r6, r1
   1a96c:	mov	r4, r0
   1a970:	mov	r9, r2
   1a974:	add	r0, sp, #80	; 0x50
   1a978:	mov	r2, #48	; 0x30
   1a97c:	mov	r1, #0
   1a980:	bl	113d4 <memset@plt>
   1a984:	cmp	r6, #10
   1a988:	beq	1ab68 <__assert_fail@plt+0x968c>
   1a98c:	add	r5, sp, #80	; 0x50
   1a990:	str	r6, [sp, #80]	; 0x50
   1a994:	ldm	r5!, {r0, r1, r2, r3}
   1a998:	add	ip, sp, #128	; 0x80
   1a99c:	mov	r7, ip
   1a9a0:	add	lr, sp, #32
   1a9a4:	stmia	ip!, {r0, r1, r2, r3}
   1a9a8:	mov	r8, #67108864	; 0x4000000
   1a9ac:	ldm	r5!, {r0, r1, r2, r3}
   1a9b0:	ldr	r6, [pc, #436]	; 1ab6c <__assert_fail@plt+0x9690>
   1a9b4:	stmia	ip!, {r0, r1, r2, r3}
   1a9b8:	ldm	r5, {r0, r1, r2, r3}
   1a9bc:	stm	ip, {r0, r1, r2, r3}
   1a9c0:	ldm	r7!, {r0, r1, r2, r3}
   1a9c4:	stmia	lr!, {r0, r1, r2, r3}
   1a9c8:	ldm	r7!, {r0, r1, r2, r3}
   1a9cc:	str	r8, [sp, #44]	; 0x2c
   1a9d0:	stmia	lr!, {r0, r1, r2, r3}
   1a9d4:	ldm	ip, {r0, r1, r2, r3}
   1a9d8:	stm	lr, {r0, r1, r2, r3}
   1a9dc:	bl	113a4 <__errno_location@plt>
   1a9e0:	cmn	r4, #-2147483647	; 0x80000001
   1a9e4:	ldr	r5, [r6]
   1a9e8:	mov	r7, r0
   1a9ec:	movne	r0, #0
   1a9f0:	moveq	r0, #1
   1a9f4:	ldr	r3, [r7]
   1a9f8:	orrs	r0, r0, r4, lsr #31
   1a9fc:	str	r3, [sp, #24]
   1aa00:	bne	1ab68 <__assert_fail@plt+0x968c>
   1aa04:	ldr	r2, [r6, #4]
   1aa08:	cmp	r4, r2
   1aa0c:	blt	1aa6c <__assert_fail@plt+0x9590>
   1aa10:	add	r8, r6, #8
   1aa14:	cmp	r5, r8
   1aa18:	str	r2, [sp, #80]	; 0x50
   1aa1c:	beq	1ab38 <__assert_fail@plt+0x965c>
   1aa20:	mov	r3, #8
   1aa24:	sub	r2, r4, r2
   1aa28:	mov	r0, r5
   1aa2c:	str	r3, [sp]
   1aa30:	add	r2, r2, #1
   1aa34:	add	r1, sp, #80	; 0x50
   1aa38:	mvn	r3, #-2147483648	; 0x80000000
   1aa3c:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1aa40:	mov	r5, r0
   1aa44:	str	r0, [r6]
   1aa48:	ldr	r0, [r6, #4]
   1aa4c:	ldr	r2, [sp, #80]	; 0x50
   1aa50:	mov	r1, #0
   1aa54:	sub	r2, r2, r0
   1aa58:	add	r0, r5, r0, lsl #3
   1aa5c:	lsl	r2, r2, #3
   1aa60:	bl	113d4 <memset@plt>
   1aa64:	ldr	r3, [sp, #80]	; 0x50
   1aa68:	str	r3, [r6, #4]
   1aa6c:	add	fp, r5, r4, lsl #3
   1aa70:	ldr	r1, [sp, #36]	; 0x24
   1aa74:	ldr	r8, [r5, r4, lsl #3]
   1aa78:	ldr	r6, [fp, #4]
   1aa7c:	ldr	r2, [sp, #72]	; 0x48
   1aa80:	ldr	r3, [sp, #32]
   1aa84:	ldr	ip, [sp, #76]	; 0x4c
   1aa88:	orr	r1, r1, #1
   1aa8c:	add	sl, sp, #40	; 0x28
   1aa90:	str	r1, [sp, #28]
   1aa94:	str	r1, [sp, #4]
   1aa98:	str	r2, [sp, #12]
   1aa9c:	str	r3, [sp]
   1aaa0:	mov	r0, r6
   1aaa4:	mov	r1, r8
   1aaa8:	str	ip, [sp, #16]
   1aaac:	str	sl, [sp, #8]
   1aab0:	mvn	r3, #0
   1aab4:	mov	r2, r9
   1aab8:	bl	17b5c <__assert_fail@plt+0x6680>
   1aabc:	cmp	r8, r0
   1aac0:	bhi	1ab24 <__assert_fail@plt+0x9648>
   1aac4:	ldr	r3, [pc, #164]	; 1ab70 <__assert_fail@plt+0x9694>
   1aac8:	add	r8, r0, #1
   1aacc:	cmp	r6, r3
   1aad0:	str	r8, [r5, r4, lsl #3]
   1aad4:	beq	1aae0 <__assert_fail@plt+0x9604>
   1aad8:	mov	r0, r6
   1aadc:	bl	1e18c <__assert_fail@plt+0xccb0>
   1aae0:	mov	r0, r8
   1aae4:	bl	1c568 <__assert_fail@plt+0xb08c>
   1aae8:	ldr	lr, [sp, #76]	; 0x4c
   1aaec:	ldr	r3, [sp, #32]
   1aaf0:	ldr	ip, [sp, #72]	; 0x48
   1aaf4:	ldr	r4, [sp, #28]
   1aaf8:	mov	r2, r9
   1aafc:	mov	r1, r8
   1ab00:	str	r0, [fp, #4]
   1ab04:	str	r3, [sp]
   1ab08:	str	sl, [sp, #8]
   1ab0c:	str	r4, [sp, #4]
   1ab10:	str	lr, [sp, #16]
   1ab14:	str	ip, [sp, #12]
   1ab18:	mvn	r3, #0
   1ab1c:	mov	r6, r0
   1ab20:	bl	17b5c <__assert_fail@plt+0x6680>
   1ab24:	ldr	r3, [sp, #24]
   1ab28:	mov	r0, r6
   1ab2c:	str	r3, [r7]
   1ab30:	add	sp, sp, #180	; 0xb4
   1ab34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab38:	mov	r3, #8
   1ab3c:	sub	r2, r4, r2
   1ab40:	add	r1, sp, #80	; 0x50
   1ab44:	str	r3, [sp]
   1ab48:	add	r2, r2, #1
   1ab4c:	mvn	r3, #-2147483648	; 0x80000000
   1ab50:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1ab54:	mov	r5, r0
   1ab58:	ldm	r8, {r0, r1}
   1ab5c:	str	r5, [r6]
   1ab60:	stm	r5, {r0, r1}
   1ab64:	b	1aa48 <__assert_fail@plt+0x956c>
   1ab68:	bl	114ac <abort@plt>
   1ab6c:	andeq	r2, r3, r0, lsl #3
   1ab70:	andeq	r2, r3, r8, lsl #9
   1ab74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab78:	mov	r7, r1
   1ab7c:	ldr	lr, [pc, #492]	; 1ad70 <__assert_fail@plt+0x9894>
   1ab80:	mov	r8, r2
   1ab84:	mov	r4, r0
   1ab88:	mov	fp, r3
   1ab8c:	ldm	lr!, {r0, r1, r2, r3}
   1ab90:	sub	sp, sp, #100	; 0x64
   1ab94:	add	ip, sp, #48	; 0x30
   1ab98:	mov	sl, #10
   1ab9c:	stmia	ip!, {r0, r1, r2, r3}
   1aba0:	cmp	r8, #0
   1aba4:	cmpne	r7, #0
   1aba8:	ldm	lr!, {r0, r1, r2, r3}
   1abac:	str	sl, [sp, #48]	; 0x30
   1abb0:	stmia	ip!, {r0, r1, r2, r3}
   1abb4:	ldm	lr, {r0, r1, r2, r3}
   1abb8:	stm	ip, {r0, r1, r2, r3}
   1abbc:	beq	1ad6c <__assert_fail@plt+0x9890>
   1abc0:	str	r7, [sp, #88]	; 0x58
   1abc4:	str	r8, [sp, #92]	; 0x5c
   1abc8:	bl	113a4 <__errno_location@plt>
   1abcc:	ldr	r6, [pc, #416]	; 1ad74 <__assert_fail@plt+0x9898>
   1abd0:	cmn	r4, #-2147483647	; 0x80000001
   1abd4:	ldr	r5, [r6]
   1abd8:	mov	r9, r0
   1abdc:	movne	r0, #0
   1abe0:	moveq	r0, #1
   1abe4:	ldr	r3, [r9]
   1abe8:	orrs	r0, r0, r4, lsr #31
   1abec:	str	r3, [sp, #28]
   1abf0:	bne	1ad6c <__assert_fail@plt+0x9890>
   1abf4:	ldr	r2, [r6, #4]
   1abf8:	cmp	r4, r2
   1abfc:	movlt	r3, sl
   1ac00:	blt	1ac6c <__assert_fail@plt+0x9790>
   1ac04:	add	r7, r6, #8
   1ac08:	cmp	r5, r7
   1ac0c:	str	r2, [sp, #44]	; 0x2c
   1ac10:	beq	1ad3c <__assert_fail@plt+0x9860>
   1ac14:	mov	r3, #8
   1ac18:	sub	r2, r4, r2
   1ac1c:	mov	r0, r5
   1ac20:	str	r3, [sp]
   1ac24:	add	r2, r2, #1
   1ac28:	mvn	r3, #-2147483648	; 0x80000000
   1ac2c:	add	r1, sp, #44	; 0x2c
   1ac30:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1ac34:	mov	r5, r0
   1ac38:	str	r0, [r6]
   1ac3c:	ldr	r0, [r6, #4]
   1ac40:	ldr	r2, [sp, #44]	; 0x2c
   1ac44:	mov	r1, #0
   1ac48:	sub	r2, r2, r0
   1ac4c:	add	r0, r5, r0, lsl #3
   1ac50:	lsl	r2, r2, #3
   1ac54:	bl	113d4 <memset@plt>
   1ac58:	ldr	r3, [sp, #48]	; 0x30
   1ac5c:	ldr	r7, [sp, #88]	; 0x58
   1ac60:	ldr	r8, [sp, #92]	; 0x5c
   1ac64:	ldr	r2, [sp, #44]	; 0x2c
   1ac68:	str	r2, [r6, #4]
   1ac6c:	add	r2, r5, r4, lsl #3
   1ac70:	mov	r1, r2
   1ac74:	str	r2, [sp, #32]
   1ac78:	ldr	r2, [sp, #52]	; 0x34
   1ac7c:	ldr	r6, [r1, #4]
   1ac80:	ldr	sl, [r5, r4, lsl #3]
   1ac84:	orr	r2, r2, #1
   1ac88:	str	r3, [sp]
   1ac8c:	add	r3, sp, #56	; 0x38
   1ac90:	str	r2, [sp, #36]	; 0x24
   1ac94:	str	r2, [sp, #4]
   1ac98:	str	r3, [sp, #8]
   1ac9c:	mov	r0, r6
   1aca0:	str	r8, [sp, #16]
   1aca4:	str	r7, [sp, #12]
   1aca8:	mov	r1, sl
   1acac:	mvn	r3, #0
   1acb0:	mov	r2, fp
   1acb4:	bl	17b5c <__assert_fail@plt+0x6680>
   1acb8:	cmp	sl, r0
   1acbc:	bhi	1ad28 <__assert_fail@plt+0x984c>
   1acc0:	ldr	r3, [pc, #176]	; 1ad78 <__assert_fail@plt+0x989c>
   1acc4:	add	r7, r0, #1
   1acc8:	cmp	r6, r3
   1accc:	str	r7, [r5, r4, lsl #3]
   1acd0:	beq	1acdc <__assert_fail@plt+0x9800>
   1acd4:	mov	r0, r6
   1acd8:	bl	1e18c <__assert_fail@plt+0xccb0>
   1acdc:	mov	r0, r7
   1ace0:	bl	1c568 <__assert_fail@plt+0xb08c>
   1ace4:	ldr	r3, [sp, #32]
   1ace8:	ldr	lr, [sp, #92]	; 0x5c
   1acec:	ldr	ip, [sp, #88]	; 0x58
   1acf0:	ldr	r4, [sp, #36]	; 0x24
   1acf4:	mov	r2, fp
   1acf8:	mov	r1, r7
   1acfc:	str	r0, [r3, #4]
   1ad00:	add	r3, sp, #56	; 0x38
   1ad04:	str	r3, [sp, #8]
   1ad08:	ldr	r3, [sp, #48]	; 0x30
   1ad0c:	str	r4, [sp, #4]
   1ad10:	str	r3, [sp]
   1ad14:	str	lr, [sp, #16]
   1ad18:	str	ip, [sp, #12]
   1ad1c:	mvn	r3, #0
   1ad20:	mov	r6, r0
   1ad24:	bl	17b5c <__assert_fail@plt+0x6680>
   1ad28:	ldr	r3, [sp, #28]
   1ad2c:	mov	r0, r6
   1ad30:	str	r3, [r9]
   1ad34:	add	sp, sp, #100	; 0x64
   1ad38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad3c:	mov	r3, #8
   1ad40:	sub	r2, r4, r2
   1ad44:	str	r3, [sp]
   1ad48:	add	r1, sp, #44	; 0x2c
   1ad4c:	add	r2, r2, #1
   1ad50:	mvn	r3, #-2147483648	; 0x80000000
   1ad54:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1ad58:	mov	r5, r0
   1ad5c:	ldm	r7, {r0, r1}
   1ad60:	str	r5, [r6]
   1ad64:	stm	r5, {r0, r1}
   1ad68:	b	1ac3c <__assert_fail@plt+0x9760>
   1ad6c:	bl	114ac <abort@plt>
   1ad70:	andeq	r2, r3, r8, asr r4
   1ad74:	andeq	r2, r3, r0, lsl #3
   1ad78:	andeq	r2, r3, r8, lsl #9
   1ad7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad80:	mov	r7, r1
   1ad84:	ldr	lr, [pc, #492]	; 1af78 <__assert_fail@plt+0x9a9c>
   1ad88:	mov	r8, r2
   1ad8c:	mov	r4, r0
   1ad90:	mov	fp, r3
   1ad94:	ldm	lr!, {r0, r1, r2, r3}
   1ad98:	sub	sp, sp, #100	; 0x64
   1ad9c:	add	ip, sp, #48	; 0x30
   1ada0:	mov	sl, #10
   1ada4:	stmia	ip!, {r0, r1, r2, r3}
   1ada8:	cmp	r8, #0
   1adac:	cmpne	r7, #0
   1adb0:	ldm	lr!, {r0, r1, r2, r3}
   1adb4:	str	sl, [sp, #48]	; 0x30
   1adb8:	stmia	ip!, {r0, r1, r2, r3}
   1adbc:	ldm	lr, {r0, r1, r2, r3}
   1adc0:	stm	ip, {r0, r1, r2, r3}
   1adc4:	beq	1af74 <__assert_fail@plt+0x9a98>
   1adc8:	str	r7, [sp, #88]	; 0x58
   1adcc:	str	r8, [sp, #92]	; 0x5c
   1add0:	bl	113a4 <__errno_location@plt>
   1add4:	ldr	r6, [pc, #416]	; 1af7c <__assert_fail@plt+0x9aa0>
   1add8:	cmn	r4, #-2147483647	; 0x80000001
   1addc:	ldr	r5, [r6]
   1ade0:	mov	r9, r0
   1ade4:	movne	r0, #0
   1ade8:	moveq	r0, #1
   1adec:	ldr	r3, [r9]
   1adf0:	orrs	r0, r0, r4, lsr #31
   1adf4:	str	r3, [sp, #28]
   1adf8:	bne	1af74 <__assert_fail@plt+0x9a98>
   1adfc:	ldr	r2, [r6, #4]
   1ae00:	cmp	r4, r2
   1ae04:	movlt	r3, sl
   1ae08:	blt	1ae74 <__assert_fail@plt+0x9998>
   1ae0c:	add	r7, r6, #8
   1ae10:	cmp	r5, r7
   1ae14:	str	r2, [sp, #44]	; 0x2c
   1ae18:	beq	1af44 <__assert_fail@plt+0x9a68>
   1ae1c:	mov	r3, #8
   1ae20:	sub	r2, r4, r2
   1ae24:	mov	r0, r5
   1ae28:	str	r3, [sp]
   1ae2c:	add	r2, r2, #1
   1ae30:	mvn	r3, #-2147483648	; 0x80000000
   1ae34:	add	r1, sp, #44	; 0x2c
   1ae38:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1ae3c:	mov	r5, r0
   1ae40:	str	r0, [r6]
   1ae44:	ldr	r0, [r6, #4]
   1ae48:	ldr	r2, [sp, #44]	; 0x2c
   1ae4c:	mov	r1, #0
   1ae50:	sub	r2, r2, r0
   1ae54:	add	r0, r5, r0, lsl #3
   1ae58:	lsl	r2, r2, #3
   1ae5c:	bl	113d4 <memset@plt>
   1ae60:	ldr	r3, [sp, #48]	; 0x30
   1ae64:	ldr	r7, [sp, #88]	; 0x58
   1ae68:	ldr	r8, [sp, #92]	; 0x5c
   1ae6c:	ldr	r2, [sp, #44]	; 0x2c
   1ae70:	str	r2, [r6, #4]
   1ae74:	add	r2, r5, r4, lsl #3
   1ae78:	mov	r1, r2
   1ae7c:	str	r2, [sp, #32]
   1ae80:	ldr	r2, [sp, #52]	; 0x34
   1ae84:	ldr	r6, [r1, #4]
   1ae88:	ldr	sl, [r5, r4, lsl #3]
   1ae8c:	orr	r2, r2, #1
   1ae90:	str	r3, [sp]
   1ae94:	add	r3, sp, #56	; 0x38
   1ae98:	str	r2, [sp, #36]	; 0x24
   1ae9c:	str	r2, [sp, #4]
   1aea0:	str	r3, [sp, #8]
   1aea4:	mov	r0, r6
   1aea8:	str	r8, [sp, #16]
   1aeac:	str	r7, [sp, #12]
   1aeb0:	mov	r1, sl
   1aeb4:	ldr	r3, [sp, #136]	; 0x88
   1aeb8:	mov	r2, fp
   1aebc:	bl	17b5c <__assert_fail@plt+0x6680>
   1aec0:	cmp	sl, r0
   1aec4:	bhi	1af30 <__assert_fail@plt+0x9a54>
   1aec8:	ldr	r3, [pc, #176]	; 1af80 <__assert_fail@plt+0x9aa4>
   1aecc:	add	r7, r0, #1
   1aed0:	cmp	r6, r3
   1aed4:	str	r7, [r5, r4, lsl #3]
   1aed8:	beq	1aee4 <__assert_fail@plt+0x9a08>
   1aedc:	mov	r0, r6
   1aee0:	bl	1e18c <__assert_fail@plt+0xccb0>
   1aee4:	mov	r0, r7
   1aee8:	bl	1c568 <__assert_fail@plt+0xb08c>
   1aeec:	ldr	r3, [sp, #32]
   1aef0:	ldr	lr, [sp, #92]	; 0x5c
   1aef4:	ldr	ip, [sp, #88]	; 0x58
   1aef8:	ldr	r4, [sp, #36]	; 0x24
   1aefc:	mov	r2, fp
   1af00:	mov	r1, r7
   1af04:	str	r0, [r3, #4]
   1af08:	add	r3, sp, #56	; 0x38
   1af0c:	str	r3, [sp, #8]
   1af10:	ldr	r3, [sp, #48]	; 0x30
   1af14:	str	r4, [sp, #4]
   1af18:	str	r3, [sp]
   1af1c:	str	lr, [sp, #16]
   1af20:	str	ip, [sp, #12]
   1af24:	ldr	r3, [sp, #136]	; 0x88
   1af28:	mov	r6, r0
   1af2c:	bl	17b5c <__assert_fail@plt+0x6680>
   1af30:	ldr	r3, [sp, #28]
   1af34:	mov	r0, r6
   1af38:	str	r3, [r9]
   1af3c:	add	sp, sp, #100	; 0x64
   1af40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af44:	mov	r3, #8
   1af48:	sub	r2, r4, r2
   1af4c:	str	r3, [sp]
   1af50:	add	r1, sp, #44	; 0x2c
   1af54:	add	r2, r2, #1
   1af58:	mvn	r3, #-2147483648	; 0x80000000
   1af5c:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1af60:	mov	r5, r0
   1af64:	ldm	r7, {r0, r1}
   1af68:	str	r5, [r6]
   1af6c:	stm	r5, {r0, r1}
   1af70:	b	1ae44 <__assert_fail@plt+0x9968>
   1af74:	bl	114ac <abort@plt>
   1af78:	andeq	r2, r3, r8, asr r4
   1af7c:	andeq	r2, r3, r0, lsl #3
   1af80:	andeq	r2, r3, r8, lsl #9
   1af84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af88:	mov	r5, r0
   1af8c:	ldr	lr, [pc, #452]	; 1b158 <__assert_fail@plt+0x9c7c>
   1af90:	mov	r6, r1
   1af94:	mov	sl, r2
   1af98:	ldm	lr!, {r0, r1, r2, r3}
   1af9c:	sub	sp, sp, #92	; 0x5c
   1afa0:	add	ip, sp, #40	; 0x28
   1afa4:	cmp	r6, #0
   1afa8:	cmpne	r5, #0
   1afac:	stmia	ip!, {r0, r1, r2, r3}
   1afb0:	mov	r9, #10
   1afb4:	ldm	lr!, {r0, r1, r2, r3}
   1afb8:	moveq	fp, #1
   1afbc:	movne	fp, #0
   1afc0:	str	r9, [sp, #40]	; 0x28
   1afc4:	stmia	ip!, {r0, r1, r2, r3}
   1afc8:	ldm	lr, {r0, r1, r2, r3}
   1afcc:	stm	ip, {r0, r1, r2, r3}
   1afd0:	beq	1b154 <__assert_fail@plt+0x9c78>
   1afd4:	str	r5, [sp, #80]	; 0x50
   1afd8:	str	r6, [sp, #84]	; 0x54
   1afdc:	bl	113a4 <__errno_location@plt>
   1afe0:	ldr	r7, [pc, #372]	; 1b15c <__assert_fail@plt+0x9c80>
   1afe4:	ldr	r2, [r7, #4]
   1afe8:	ldr	r4, [r7]
   1afec:	cmp	r2, #0
   1aff0:	ldr	r3, [r0]
   1aff4:	mov	r8, r0
   1aff8:	str	r3, [sp, #24]
   1affc:	movgt	r3, r9
   1b000:	bgt	1b068 <__assert_fail@plt+0x9b8c>
   1b004:	add	r5, r7, #8
   1b008:	cmp	r4, r5
   1b00c:	str	r2, [sp, #36]	; 0x24
   1b010:	beq	1b124 <__assert_fail@plt+0x9c48>
   1b014:	mov	r3, #8
   1b018:	mov	r0, r4
   1b01c:	str	r3, [sp]
   1b020:	rsb	r2, r2, #1
   1b024:	mvn	r3, #-2147483648	; 0x80000000
   1b028:	add	r1, sp, #36	; 0x24
   1b02c:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1b030:	mov	r4, r0
   1b034:	str	r0, [r7]
   1b038:	ldr	r0, [r7, #4]
   1b03c:	ldr	r2, [sp, #36]	; 0x24
   1b040:	mov	r1, #0
   1b044:	sub	r2, r2, r0
   1b048:	add	r0, r4, r0, lsl #3
   1b04c:	lsl	r2, r2, #3
   1b050:	bl	113d4 <memset@plt>
   1b054:	ldr	r3, [sp, #40]	; 0x28
   1b058:	ldr	r5, [sp, #80]	; 0x50
   1b05c:	ldr	r6, [sp, #84]	; 0x54
   1b060:	ldr	r2, [sp, #36]	; 0x24
   1b064:	str	r2, [r7, #4]
   1b068:	ldr	r2, [sp, #44]	; 0x2c
   1b06c:	ldr	r9, [r4]
   1b070:	ldr	r7, [r4, #4]
   1b074:	orr	r2, r2, #1
   1b078:	add	fp, sp, #48	; 0x30
   1b07c:	str	r2, [sp, #28]
   1b080:	str	r2, [sp, #4]
   1b084:	str	r3, [sp]
   1b088:	str	r6, [sp, #16]
   1b08c:	str	r5, [sp, #12]
   1b090:	mov	r1, r9
   1b094:	mov	r0, r7
   1b098:	str	fp, [sp, #8]
   1b09c:	mvn	r3, #0
   1b0a0:	mov	r2, sl
   1b0a4:	bl	17b5c <__assert_fail@plt+0x6680>
   1b0a8:	cmp	r9, r0
   1b0ac:	bhi	1b110 <__assert_fail@plt+0x9c34>
   1b0b0:	ldr	r3, [pc, #168]	; 1b160 <__assert_fail@plt+0x9c84>
   1b0b4:	add	r5, r0, #1
   1b0b8:	cmp	r7, r3
   1b0bc:	str	r5, [r4]
   1b0c0:	beq	1b0cc <__assert_fail@plt+0x9bf0>
   1b0c4:	mov	r0, r7
   1b0c8:	bl	1e18c <__assert_fail@plt+0xccb0>
   1b0cc:	mov	r0, r5
   1b0d0:	bl	1c568 <__assert_fail@plt+0xb08c>
   1b0d4:	ldr	lr, [sp, #84]	; 0x54
   1b0d8:	ldr	r3, [sp, #40]	; 0x28
   1b0dc:	ldr	ip, [sp, #80]	; 0x50
   1b0e0:	mov	r2, sl
   1b0e4:	mov	r1, r5
   1b0e8:	str	r0, [r4, #4]
   1b0ec:	ldr	r4, [sp, #28]
   1b0f0:	str	r3, [sp]
   1b0f4:	str	fp, [sp, #8]
   1b0f8:	str	r4, [sp, #4]
   1b0fc:	str	lr, [sp, #16]
   1b100:	str	ip, [sp, #12]
   1b104:	mvn	r3, #0
   1b108:	mov	r7, r0
   1b10c:	bl	17b5c <__assert_fail@plt+0x6680>
   1b110:	ldr	r3, [sp, #24]
   1b114:	mov	r0, r7
   1b118:	str	r3, [r8]
   1b11c:	add	sp, sp, #92	; 0x5c
   1b120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b124:	mov	r3, #8
   1b128:	str	r3, [sp]
   1b12c:	add	r1, sp, #36	; 0x24
   1b130:	rsb	r2, r2, #1
   1b134:	mov	r0, fp
   1b138:	mvn	r3, #-2147483648	; 0x80000000
   1b13c:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1b140:	mov	r4, r0
   1b144:	ldm	r5, {r0, r1}
   1b148:	str	r4, [r7]
   1b14c:	stm	r4, {r0, r1}
   1b150:	b	1b038 <__assert_fail@plt+0x9b5c>
   1b154:	bl	114ac <abort@plt>
   1b158:	andeq	r2, r3, r8, asr r4
   1b15c:	andeq	r2, r3, r0, lsl #3
   1b160:	andeq	r2, r3, r8, lsl #9
   1b164:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b168:	mov	r5, r0
   1b16c:	ldr	lr, [pc, #464]	; 1b344 <__assert_fail@plt+0x9e68>
   1b170:	mov	r6, r1
   1b174:	mov	sl, r2
   1b178:	mov	fp, r3
   1b17c:	ldm	lr!, {r0, r1, r2, r3}
   1b180:	sub	sp, sp, #92	; 0x5c
   1b184:	add	ip, sp, #40	; 0x28
   1b188:	cmp	r6, #0
   1b18c:	cmpne	r5, #0
   1b190:	stmia	ip!, {r0, r1, r2, r3}
   1b194:	moveq	r4, #1
   1b198:	ldm	lr!, {r0, r1, r2, r3}
   1b19c:	movne	r4, #0
   1b1a0:	mov	r9, #10
   1b1a4:	str	r4, [sp, #28]
   1b1a8:	stmia	ip!, {r0, r1, r2, r3}
   1b1ac:	ldm	lr, {r0, r1, r2, r3}
   1b1b0:	str	r9, [sp, #40]	; 0x28
   1b1b4:	stm	ip, {r0, r1, r2, r3}
   1b1b8:	beq	1b340 <__assert_fail@plt+0x9e64>
   1b1bc:	str	r5, [sp, #80]	; 0x50
   1b1c0:	str	r6, [sp, #84]	; 0x54
   1b1c4:	bl	113a4 <__errno_location@plt>
   1b1c8:	ldr	r7, [pc, #376]	; 1b348 <__assert_fail@plt+0x9e6c>
   1b1cc:	ldr	r2, [r7, #4]
   1b1d0:	ldr	r4, [r7]
   1b1d4:	cmp	r2, #0
   1b1d8:	ldr	r3, [r0]
   1b1dc:	mov	r8, r0
   1b1e0:	str	r3, [sp, #24]
   1b1e4:	movgt	r3, r9
   1b1e8:	bgt	1b250 <__assert_fail@plt+0x9d74>
   1b1ec:	add	r5, r7, #8
   1b1f0:	cmp	r4, r5
   1b1f4:	str	r2, [sp, #36]	; 0x24
   1b1f8:	beq	1b310 <__assert_fail@plt+0x9e34>
   1b1fc:	mov	r3, #8
   1b200:	mov	r0, r4
   1b204:	str	r3, [sp]
   1b208:	rsb	r2, r2, #1
   1b20c:	mvn	r3, #-2147483648	; 0x80000000
   1b210:	add	r1, sp, #36	; 0x24
   1b214:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1b218:	mov	r4, r0
   1b21c:	str	r0, [r7]
   1b220:	ldr	r0, [r7, #4]
   1b224:	ldr	r2, [sp, #36]	; 0x24
   1b228:	mov	r1, #0
   1b22c:	sub	r2, r2, r0
   1b230:	add	r0, r4, r0, lsl #3
   1b234:	lsl	r2, r2, #3
   1b238:	bl	113d4 <memset@plt>
   1b23c:	ldr	r3, [sp, #40]	; 0x28
   1b240:	ldr	r5, [sp, #80]	; 0x50
   1b244:	ldr	r6, [sp, #84]	; 0x54
   1b248:	ldr	r2, [sp, #36]	; 0x24
   1b24c:	str	r2, [r7, #4]
   1b250:	ldr	r2, [sp, #44]	; 0x2c
   1b254:	ldr	r9, [r4]
   1b258:	ldr	r7, [r4, #4]
   1b25c:	orr	r2, r2, #1
   1b260:	str	r3, [sp]
   1b264:	add	r3, sp, #48	; 0x30
   1b268:	str	r2, [sp, #28]
   1b26c:	str	r2, [sp, #4]
   1b270:	str	r3, [sp, #8]
   1b274:	str	r6, [sp, #16]
   1b278:	str	r5, [sp, #12]
   1b27c:	mov	r1, r9
   1b280:	mov	r0, r7
   1b284:	mov	r3, fp
   1b288:	mov	r2, sl
   1b28c:	bl	17b5c <__assert_fail@plt+0x6680>
   1b290:	cmp	r9, r0
   1b294:	bhi	1b2fc <__assert_fail@plt+0x9e20>
   1b298:	ldr	r3, [pc, #172]	; 1b34c <__assert_fail@plt+0x9e70>
   1b29c:	add	r5, r0, #1
   1b2a0:	cmp	r7, r3
   1b2a4:	str	r5, [r4]
   1b2a8:	beq	1b2b4 <__assert_fail@plt+0x9dd8>
   1b2ac:	mov	r0, r7
   1b2b0:	bl	1e18c <__assert_fail@plt+0xccb0>
   1b2b4:	mov	r0, r5
   1b2b8:	bl	1c568 <__assert_fail@plt+0xb08c>
   1b2bc:	add	lr, sp, #48	; 0x30
   1b2c0:	ldr	ip, [sp, #84]	; 0x54
   1b2c4:	mov	r1, r5
   1b2c8:	ldr	r5, [sp, #28]
   1b2cc:	mov	r3, fp
   1b2d0:	mov	r2, sl
   1b2d4:	str	r0, [r4, #4]
   1b2d8:	ldr	r4, [sp, #80]	; 0x50
   1b2dc:	str	lr, [sp, #8]
   1b2e0:	ldr	lr, [sp, #40]	; 0x28
   1b2e4:	str	r5, [sp, #4]
   1b2e8:	str	ip, [sp, #16]
   1b2ec:	str	r4, [sp, #12]
   1b2f0:	str	lr, [sp]
   1b2f4:	mov	r7, r0
   1b2f8:	bl	17b5c <__assert_fail@plt+0x6680>
   1b2fc:	ldr	r3, [sp, #24]
   1b300:	mov	r0, r7
   1b304:	str	r3, [r8]
   1b308:	add	sp, sp, #92	; 0x5c
   1b30c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b310:	mov	r3, #8
   1b314:	str	r3, [sp]
   1b318:	add	r1, sp, #36	; 0x24
   1b31c:	rsb	r2, r2, #1
   1b320:	ldr	r0, [sp, #28]
   1b324:	mvn	r3, #-2147483648	; 0x80000000
   1b328:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1b32c:	mov	r4, r0
   1b330:	ldm	r5, {r0, r1}
   1b334:	str	r4, [r7]
   1b338:	stm	r4, {r0, r1}
   1b33c:	b	1b220 <__assert_fail@plt+0x9d44>
   1b340:	bl	114ac <abort@plt>
   1b344:	andeq	r2, r3, r8, asr r4
   1b348:	andeq	r2, r3, r0, lsl #3
   1b34c:	andeq	r2, r3, r8, lsl #9
   1b350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b354:	sub	sp, sp, #52	; 0x34
   1b358:	mov	r5, r0
   1b35c:	mov	sl, r1
   1b360:	mov	fp, r2
   1b364:	bl	113a4 <__errno_location@plt>
   1b368:	ldr	r4, [pc, #404]	; 1b504 <__assert_fail@plt+0xa028>
   1b36c:	cmn	r5, #-2147483647	; 0x80000001
   1b370:	ldr	r6, [r4]
   1b374:	mov	r8, r0
   1b378:	movne	r0, #0
   1b37c:	moveq	r0, #1
   1b380:	ldr	r3, [r8]
   1b384:	orrs	r0, r0, r5, lsr #31
   1b388:	str	r3, [sp, #28]
   1b38c:	bne	1b500 <__assert_fail@plt+0xa024>
   1b390:	ldr	r2, [r4, #4]
   1b394:	cmp	r5, r2
   1b398:	blt	1b3f8 <__assert_fail@plt+0x9f1c>
   1b39c:	add	r7, r4, #8
   1b3a0:	cmp	r6, r7
   1b3a4:	str	r2, [sp, #44]	; 0x2c
   1b3a8:	beq	1b4d0 <__assert_fail@plt+0x9ff4>
   1b3ac:	mov	r3, #8
   1b3b0:	sub	r2, r5, r2
   1b3b4:	mov	r0, r6
   1b3b8:	str	r3, [sp]
   1b3bc:	add	r2, r2, #1
   1b3c0:	mvn	r3, #-2147483648	; 0x80000000
   1b3c4:	add	r1, sp, #44	; 0x2c
   1b3c8:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1b3cc:	mov	r6, r0
   1b3d0:	str	r0, [r4]
   1b3d4:	ldr	r0, [r4, #4]
   1b3d8:	ldr	r2, [sp, #44]	; 0x2c
   1b3dc:	mov	r1, #0
   1b3e0:	sub	r2, r2, r0
   1b3e4:	add	r0, r6, r0, lsl #3
   1b3e8:	lsl	r2, r2, #3
   1b3ec:	bl	113d4 <memset@plt>
   1b3f0:	ldr	r3, [sp, #44]	; 0x2c
   1b3f4:	str	r3, [r4, #4]
   1b3f8:	ldr	r2, [r4, #56]	; 0x38
   1b3fc:	add	r3, r6, r5, lsl #3
   1b400:	ldr	r1, [r4, #20]
   1b404:	ldr	r7, [r3, #4]
   1b408:	ldr	r9, [r6, r5, lsl #3]
   1b40c:	ldr	ip, [r4, #60]	; 0x3c
   1b410:	str	r3, [sp, #32]
   1b414:	ldr	r3, [r4, #16]
   1b418:	str	r2, [sp, #12]
   1b41c:	ldr	r2, [pc, #228]	; 1b508 <__assert_fail@plt+0xa02c>
   1b420:	orr	r1, r1, #1
   1b424:	str	r1, [sp, #36]	; 0x24
   1b428:	str	r1, [sp, #4]
   1b42c:	str	r2, [sp, #8]
   1b430:	str	r3, [sp]
   1b434:	mov	r0, r7
   1b438:	mov	r1, r9
   1b43c:	str	ip, [sp, #16]
   1b440:	mov	r3, fp
   1b444:	mov	r2, sl
   1b448:	bl	17b5c <__assert_fail@plt+0x6680>
   1b44c:	cmp	r9, r0
   1b450:	bhi	1b4bc <__assert_fail@plt+0x9fe0>
   1b454:	ldr	r3, [pc, #176]	; 1b50c <__assert_fail@plt+0xa030>
   1b458:	add	r9, r0, #1
   1b45c:	cmp	r7, r3
   1b460:	str	r9, [r6, r5, lsl #3]
   1b464:	beq	1b470 <__assert_fail@plt+0x9f94>
   1b468:	mov	r0, r7
   1b46c:	bl	1e18c <__assert_fail@plt+0xccb0>
   1b470:	mov	r0, r9
   1b474:	bl	1c568 <__assert_fail@plt+0xb08c>
   1b478:	ldr	ip, [sp, #32]
   1b47c:	ldr	lr, [r4, #60]	; 0x3c
   1b480:	ldr	r5, [r4, #56]	; 0x38
   1b484:	mov	r3, fp
   1b488:	mov	r2, sl
   1b48c:	mov	r1, r9
   1b490:	str	r0, [ip, #4]
   1b494:	ldr	ip, [r4, #16]
   1b498:	ldr	r4, [pc, #104]	; 1b508 <__assert_fail@plt+0xa02c>
   1b49c:	str	lr, [sp, #16]
   1b4a0:	str	r4, [sp, #8]
   1b4a4:	ldr	r4, [sp, #36]	; 0x24
   1b4a8:	str	r5, [sp, #12]
   1b4ac:	str	r4, [sp, #4]
   1b4b0:	str	ip, [sp]
   1b4b4:	mov	r7, r0
   1b4b8:	bl	17b5c <__assert_fail@plt+0x6680>
   1b4bc:	ldr	r3, [sp, #28]
   1b4c0:	mov	r0, r7
   1b4c4:	str	r3, [r8]
   1b4c8:	add	sp, sp, #52	; 0x34
   1b4cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4d0:	mov	r3, #8
   1b4d4:	sub	r2, r5, r2
   1b4d8:	str	r3, [sp]
   1b4dc:	add	r1, sp, #44	; 0x2c
   1b4e0:	add	r2, r2, #1
   1b4e4:	mvn	r3, #-2147483648	; 0x80000000
   1b4e8:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1b4ec:	mov	r6, r0
   1b4f0:	ldm	r7, {r0, r1}
   1b4f4:	str	r6, [r4]
   1b4f8:	stm	r6, {r0, r1}
   1b4fc:	b	1b3d4 <__assert_fail@plt+0x9ef8>
   1b500:	bl	114ac <abort@plt>
   1b504:	andeq	r2, r3, r0, lsl #3
   1b508:	muleq	r3, r8, r1
   1b50c:	andeq	r2, r3, r8, lsl #9
   1b510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b514:	sub	sp, sp, #44	; 0x2c
   1b518:	mov	r9, r0
   1b51c:	mov	sl, r1
   1b520:	bl	113a4 <__errno_location@plt>
   1b524:	ldr	r4, [pc, #360]	; 1b694 <__assert_fail@plt+0xa1b8>
   1b528:	ldr	r2, [r4, #4]
   1b52c:	ldr	r5, [r4]
   1b530:	cmp	r2, #0
   1b534:	ldr	r3, [r0]
   1b538:	mov	r7, r0
   1b53c:	str	r3, [sp, #24]
   1b540:	bgt	1b59c <__assert_fail@plt+0xa0c0>
   1b544:	add	r6, r4, #8
   1b548:	cmp	r5, r6
   1b54c:	str	r2, [sp, #36]	; 0x24
   1b550:	beq	1b664 <__assert_fail@plt+0xa188>
   1b554:	mov	r3, #8
   1b558:	mov	r0, r5
   1b55c:	str	r3, [sp]
   1b560:	rsb	r2, r2, #1
   1b564:	mvn	r3, #-2147483648	; 0x80000000
   1b568:	add	r1, sp, #36	; 0x24
   1b56c:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1b570:	mov	r5, r0
   1b574:	str	r0, [r4]
   1b578:	ldr	r0, [r4, #4]
   1b57c:	ldr	r2, [sp, #36]	; 0x24
   1b580:	mov	r1, #0
   1b584:	sub	r2, r2, r0
   1b588:	add	r0, r5, r0, lsl #3
   1b58c:	lsl	r2, r2, #3
   1b590:	bl	113d4 <memset@plt>
   1b594:	ldr	r3, [sp, #36]	; 0x24
   1b598:	str	r3, [r4, #4]
   1b59c:	ldr	r1, [r4, #20]
   1b5a0:	ldr	r8, [r5]
   1b5a4:	ldr	r6, [r5, #4]
   1b5a8:	ldr	r2, [r4, #56]	; 0x38
   1b5ac:	ldr	r3, [r4, #16]
   1b5b0:	ldr	ip, [r4, #60]	; 0x3c
   1b5b4:	ldr	fp, [pc, #220]	; 1b698 <__assert_fail@plt+0xa1bc>
   1b5b8:	orr	r1, r1, #1
   1b5bc:	str	r1, [sp, #28]
   1b5c0:	str	r1, [sp, #4]
   1b5c4:	str	r2, [sp, #12]
   1b5c8:	str	r3, [sp]
   1b5cc:	mov	r1, r8
   1b5d0:	mov	r0, r6
   1b5d4:	str	ip, [sp, #16]
   1b5d8:	str	fp, [sp, #8]
   1b5dc:	mov	r3, sl
   1b5e0:	mov	r2, r9
   1b5e4:	bl	17b5c <__assert_fail@plt+0x6680>
   1b5e8:	cmp	r8, r0
   1b5ec:	bhi	1b650 <__assert_fail@plt+0xa174>
   1b5f0:	ldr	r3, [pc, #164]	; 1b69c <__assert_fail@plt+0xa1c0>
   1b5f4:	add	r8, r0, #1
   1b5f8:	cmp	r6, r3
   1b5fc:	str	r8, [r5]
   1b600:	beq	1b60c <__assert_fail@plt+0xa130>
   1b604:	mov	r0, r6
   1b608:	bl	1e18c <__assert_fail@plt+0xccb0>
   1b60c:	mov	r0, r8
   1b610:	bl	1c568 <__assert_fail@plt+0xb08c>
   1b614:	ldr	lr, [r4, #60]	; 0x3c
   1b618:	ldr	ip, [r4, #16]
   1b61c:	mov	r3, sl
   1b620:	mov	r2, r9
   1b624:	mov	r1, r8
   1b628:	str	r0, [r5, #4]
   1b62c:	ldr	r5, [r4, #56]	; 0x38
   1b630:	ldr	r4, [sp, #28]
   1b634:	str	fp, [sp, #8]
   1b638:	str	r4, [sp, #4]
   1b63c:	str	lr, [sp, #16]
   1b640:	str	r5, [sp, #12]
   1b644:	str	ip, [sp]
   1b648:	mov	r6, r0
   1b64c:	bl	17b5c <__assert_fail@plt+0x6680>
   1b650:	ldr	r3, [sp, #24]
   1b654:	mov	r0, r6
   1b658:	str	r3, [r7]
   1b65c:	add	sp, sp, #44	; 0x2c
   1b660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b664:	mov	r3, #8
   1b668:	str	r3, [sp]
   1b66c:	add	r1, sp, #36	; 0x24
   1b670:	rsb	r2, r2, #1
   1b674:	mvn	r3, #-2147483648	; 0x80000000
   1b678:	mov	r0, #0
   1b67c:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1b680:	mov	r5, r0
   1b684:	ldm	r6, {r0, r1}
   1b688:	str	r5, [r4]
   1b68c:	stm	r5, {r0, r1}
   1b690:	b	1b578 <__assert_fail@plt+0xa09c>
   1b694:	andeq	r2, r3, r0, lsl #3
   1b698:	muleq	r3, r8, r1
   1b69c:	andeq	r2, r3, r8, lsl #9
   1b6a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6a4:	sub	sp, sp, #44	; 0x2c
   1b6a8:	mov	r5, r0
   1b6ac:	mov	sl, r1
   1b6b0:	bl	113a4 <__errno_location@plt>
   1b6b4:	ldr	r4, [pc, #396]	; 1b848 <__assert_fail@plt+0xa36c>
   1b6b8:	cmn	r5, #-2147483647	; 0x80000001
   1b6bc:	ldr	r6, [r4]
   1b6c0:	mov	r8, r0
   1b6c4:	movne	r0, #0
   1b6c8:	moveq	r0, #1
   1b6cc:	ldr	r3, [r8]
   1b6d0:	orrs	r0, r0, r5, lsr #31
   1b6d4:	str	r3, [sp, #24]
   1b6d8:	bne	1b844 <__assert_fail@plt+0xa368>
   1b6dc:	ldr	r2, [r4, #4]
   1b6e0:	cmp	r5, r2
   1b6e4:	blt	1b744 <__assert_fail@plt+0xa268>
   1b6e8:	add	r7, r4, #8
   1b6ec:	cmp	r6, r7
   1b6f0:	str	r2, [sp, #36]	; 0x24
   1b6f4:	beq	1b814 <__assert_fail@plt+0xa338>
   1b6f8:	mov	r3, #8
   1b6fc:	sub	r2, r5, r2
   1b700:	mov	r0, r6
   1b704:	str	r3, [sp]
   1b708:	add	r2, r2, #1
   1b70c:	mvn	r3, #-2147483648	; 0x80000000
   1b710:	add	r1, sp, #36	; 0x24
   1b714:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1b718:	mov	r6, r0
   1b71c:	str	r0, [r4]
   1b720:	ldr	r0, [r4, #4]
   1b724:	ldr	r2, [sp, #36]	; 0x24
   1b728:	mov	r1, #0
   1b72c:	sub	r2, r2, r0
   1b730:	add	r0, r6, r0, lsl #3
   1b734:	lsl	r2, r2, #3
   1b738:	bl	113d4 <memset@plt>
   1b73c:	ldr	r3, [sp, #36]	; 0x24
   1b740:	str	r3, [r4, #4]
   1b744:	ldr	r2, [r4, #56]	; 0x38
   1b748:	add	fp, r6, r5, lsl #3
   1b74c:	ldr	r1, [r4, #20]
   1b750:	ldr	r9, [r6, r5, lsl #3]
   1b754:	ldr	r7, [fp, #4]
   1b758:	ldr	r3, [r4, #16]
   1b75c:	ldr	ip, [r4, #60]	; 0x3c
   1b760:	str	r2, [sp, #12]
   1b764:	ldr	r2, [pc, #224]	; 1b84c <__assert_fail@plt+0xa370>
   1b768:	orr	r1, r1, #1
   1b76c:	str	r1, [sp, #28]
   1b770:	str	r1, [sp, #4]
   1b774:	str	r2, [sp, #8]
   1b778:	str	r3, [sp]
   1b77c:	mov	r0, r7
   1b780:	mov	r1, r9
   1b784:	str	ip, [sp, #16]
   1b788:	mvn	r3, #0
   1b78c:	mov	r2, sl
   1b790:	bl	17b5c <__assert_fail@plt+0x6680>
   1b794:	cmp	r9, r0
   1b798:	bhi	1b800 <__assert_fail@plt+0xa324>
   1b79c:	ldr	r3, [pc, #172]	; 1b850 <__assert_fail@plt+0xa374>
   1b7a0:	add	r9, r0, #1
   1b7a4:	cmp	r7, r3
   1b7a8:	str	r9, [r6, r5, lsl #3]
   1b7ac:	beq	1b7b8 <__assert_fail@plt+0xa2dc>
   1b7b0:	mov	r0, r7
   1b7b4:	bl	1e18c <__assert_fail@plt+0xccb0>
   1b7b8:	mov	r0, r9
   1b7bc:	bl	1c568 <__assert_fail@plt+0xb08c>
   1b7c0:	ldr	ip, [r4, #60]	; 0x3c
   1b7c4:	ldr	r3, [r4, #16]
   1b7c8:	ldr	lr, [r4, #56]	; 0x38
   1b7cc:	ldr	r4, [pc, #120]	; 1b84c <__assert_fail@plt+0xa370>
   1b7d0:	mov	r2, sl
   1b7d4:	mov	r1, r9
   1b7d8:	str	r0, [fp, #4]
   1b7dc:	str	r4, [sp, #8]
   1b7e0:	ldr	r4, [sp, #28]
   1b7e4:	str	r3, [sp]
   1b7e8:	str	r4, [sp, #4]
   1b7ec:	str	ip, [sp, #16]
   1b7f0:	str	lr, [sp, #12]
   1b7f4:	mvn	r3, #0
   1b7f8:	mov	r7, r0
   1b7fc:	bl	17b5c <__assert_fail@plt+0x6680>
   1b800:	ldr	r3, [sp, #24]
   1b804:	mov	r0, r7
   1b808:	str	r3, [r8]
   1b80c:	add	sp, sp, #44	; 0x2c
   1b810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b814:	mov	r3, #8
   1b818:	sub	r2, r5, r2
   1b81c:	str	r3, [sp]
   1b820:	add	r1, sp, #36	; 0x24
   1b824:	add	r2, r2, #1
   1b828:	mvn	r3, #-2147483648	; 0x80000000
   1b82c:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1b830:	mov	r6, r0
   1b834:	ldm	r7, {r0, r1}
   1b838:	str	r6, [r4]
   1b83c:	stm	r6, {r0, r1}
   1b840:	b	1b720 <__assert_fail@plt+0xa244>
   1b844:	bl	114ac <abort@plt>
   1b848:	andeq	r2, r3, r0, lsl #3
   1b84c:	muleq	r3, r8, r1
   1b850:	andeq	r2, r3, r8, lsl #9
   1b854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b858:	sub	sp, sp, #44	; 0x2c
   1b85c:	mov	sl, r0
   1b860:	bl	113a4 <__errno_location@plt>
   1b864:	ldr	r4, [pc, #348]	; 1b9c8 <__assert_fail@plt+0xa4ec>
   1b868:	ldr	r2, [r4, #4]
   1b86c:	ldr	r5, [r4]
   1b870:	cmp	r2, #0
   1b874:	ldr	r3, [r0]
   1b878:	mov	r8, r0
   1b87c:	str	r3, [sp, #28]
   1b880:	bgt	1b8dc <__assert_fail@plt+0xa400>
   1b884:	add	r6, r4, #8
   1b888:	cmp	r5, r6
   1b88c:	str	r2, [sp, #36]	; 0x24
   1b890:	beq	1b998 <__assert_fail@plt+0xa4bc>
   1b894:	mov	r3, #8
   1b898:	mov	r0, r5
   1b89c:	str	r3, [sp]
   1b8a0:	rsb	r2, r2, #1
   1b8a4:	mvn	r3, #-2147483648	; 0x80000000
   1b8a8:	add	r1, sp, #36	; 0x24
   1b8ac:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1b8b0:	mov	r5, r0
   1b8b4:	str	r0, [r4]
   1b8b8:	ldr	r0, [r4, #4]
   1b8bc:	ldr	r2, [sp, #36]	; 0x24
   1b8c0:	mov	r1, #0
   1b8c4:	sub	r2, r2, r0
   1b8c8:	add	r0, r5, r0, lsl #3
   1b8cc:	lsl	r2, r2, #3
   1b8d0:	bl	113d4 <memset@plt>
   1b8d4:	ldr	r3, [sp, #36]	; 0x24
   1b8d8:	str	r3, [r4, #4]
   1b8dc:	ldr	r7, [r4, #20]
   1b8e0:	ldr	r9, [r5]
   1b8e4:	ldr	r6, [r5, #4]
   1b8e8:	ldr	r2, [r4, #56]	; 0x38
   1b8ec:	ldr	r3, [r4, #16]
   1b8f0:	ldr	ip, [r4, #60]	; 0x3c
   1b8f4:	ldr	fp, [pc, #208]	; 1b9cc <__assert_fail@plt+0xa4f0>
   1b8f8:	orr	r7, r7, #1
   1b8fc:	str	r2, [sp, #12]
   1b900:	str	r3, [sp]
   1b904:	str	r7, [sp, #4]
   1b908:	mov	r1, r9
   1b90c:	mov	r0, r6
   1b910:	str	ip, [sp, #16]
   1b914:	str	fp, [sp, #8]
   1b918:	mvn	r3, #0
   1b91c:	mov	r2, sl
   1b920:	bl	17b5c <__assert_fail@plt+0x6680>
   1b924:	cmp	r9, r0
   1b928:	bhi	1b984 <__assert_fail@plt+0xa4a8>
   1b92c:	ldr	r3, [pc, #156]	; 1b9d0 <__assert_fail@plt+0xa4f4>
   1b930:	add	r9, r0, #1
   1b934:	cmp	r6, r3
   1b938:	str	r9, [r5]
   1b93c:	beq	1b948 <__assert_fail@plt+0xa46c>
   1b940:	mov	r0, r6
   1b944:	bl	1e18c <__assert_fail@plt+0xccb0>
   1b948:	mov	r0, r9
   1b94c:	bl	1c568 <__assert_fail@plt+0xb08c>
   1b950:	ldr	ip, [r4, #60]	; 0x3c
   1b954:	ldr	r3, [r4, #16]
   1b958:	ldr	lr, [r4, #56]	; 0x38
   1b95c:	mov	r2, sl
   1b960:	mov	r1, r9
   1b964:	str	r0, [r5, #4]
   1b968:	str	r3, [sp]
   1b96c:	stmib	sp, {r7, fp}
   1b970:	str	ip, [sp, #16]
   1b974:	str	lr, [sp, #12]
   1b978:	mvn	r3, #0
   1b97c:	mov	r6, r0
   1b980:	bl	17b5c <__assert_fail@plt+0x6680>
   1b984:	ldr	r3, [sp, #28]
   1b988:	mov	r0, r6
   1b98c:	str	r3, [r8]
   1b990:	add	sp, sp, #44	; 0x2c
   1b994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b998:	mov	r3, #8
   1b99c:	str	r3, [sp]
   1b9a0:	add	r1, sp, #36	; 0x24
   1b9a4:	rsb	r2, r2, #1
   1b9a8:	mvn	r3, #-2147483648	; 0x80000000
   1b9ac:	mov	r0, #0
   1b9b0:	bl	1c784 <__assert_fail@plt+0xb2a8>
   1b9b4:	mov	r5, r0
   1b9b8:	ldm	r6, {r0, r1}
   1b9bc:	str	r5, [r4]
   1b9c0:	stm	r5, {r0, r1}
   1b9c4:	b	1b8b8 <__assert_fail@plt+0xa3dc>
   1b9c8:	andeq	r2, r3, r0, lsl #3
   1b9cc:	muleq	r3, r8, r1
   1b9d0:	andeq	r2, r3, r8, lsl #9
   1b9d4:	push	{r4, r5, r6, lr}
   1b9d8:	mov	r5, r0
   1b9dc:	mov	r6, r1
   1b9e0:	mov	r0, r2
   1b9e4:	mov	r1, r3
   1b9e8:	bl	1da58 <__assert_fail@plt+0xc57c>
   1b9ec:	subs	r4, r0, #0
   1b9f0:	beq	1ba14 <__assert_fail@plt+0xa538>
   1b9f4:	mov	r0, r5
   1b9f8:	mov	r1, r6
   1b9fc:	mov	r3, r4
   1ba00:	ldr	r2, [pc, #56]	; 1ba40 <__assert_fail@plt+0xa564>
   1ba04:	bl	112d8 <error@plt>
   1ba08:	mov	r0, r4
   1ba0c:	pop	{r4, r5, r6, lr}
   1ba10:	b	1e18c <__assert_fail@plt+0xccb0>
   1ba14:	bl	113a4 <__errno_location@plt>
   1ba18:	mov	r2, #5
   1ba1c:	ldr	r1, [pc, #32]	; 1ba44 <__assert_fail@plt+0xa568>
   1ba20:	ldr	r5, [r0]
   1ba24:	mov	r0, r4
   1ba28:	bl	11230 <dcgettext@plt>
   1ba2c:	mov	r1, r5
   1ba30:	mov	r2, r0
   1ba34:	mov	r0, r4
   1ba38:	bl	112d8 <error@plt>
   1ba3c:	bl	114ac <abort@plt>
   1ba40:	andeq	pc, r1, ip, lsl r5	; <UNPREDICTABLE>
   1ba44:	andeq	r0, r2, r8, lsl #23
   1ba48:	push	{r4, r5, r6, r7, r8, lr}
   1ba4c:	sub	sp, sp, #8
   1ba50:	mov	r6, r0
   1ba54:	mov	r7, r1
   1ba58:	ldr	r0, [sp, #32]
   1ba5c:	ldr	r1, [sp, #36]	; 0x24
   1ba60:	mov	r5, r2
   1ba64:	mov	r8, r3
   1ba68:	bl	1da58 <__assert_fail@plt+0xc57c>
   1ba6c:	subs	r4, r0, #0
   1ba70:	beq	1bad0 <__assert_fail@plt+0xa5f4>
   1ba74:	cmp	r5, #0
   1ba78:	beq	1baac <__assert_fail@plt+0xa5d0>
   1ba7c:	ldr	ip, [pc, #120]	; 1bafc <__assert_fail@plt+0xa620>
   1ba80:	mov	r0, r6
   1ba84:	str	r4, [sp, #4]
   1ba88:	mov	r3, r8
   1ba8c:	mov	r2, r5
   1ba90:	mov	r1, r7
   1ba94:	str	ip, [sp]
   1ba98:	bl	11308 <error_at_line@plt>
   1ba9c:	mov	r0, r4
   1baa0:	add	sp, sp, #8
   1baa4:	pop	{r4, r5, r6, r7, r8, lr}
   1baa8:	b	1e18c <__assert_fail@plt+0xccb0>
   1baac:	mov	r0, r6
   1bab0:	mov	r1, r7
   1bab4:	mov	r3, r4
   1bab8:	ldr	r2, [pc, #60]	; 1bafc <__assert_fail@plt+0xa620>
   1babc:	bl	112d8 <error@plt>
   1bac0:	mov	r0, r4
   1bac4:	add	sp, sp, #8
   1bac8:	pop	{r4, r5, r6, r7, r8, lr}
   1bacc:	b	1e18c <__assert_fail@plt+0xccb0>
   1bad0:	bl	113a4 <__errno_location@plt>
   1bad4:	mov	r2, #5
   1bad8:	ldr	r1, [pc, #32]	; 1bb00 <__assert_fail@plt+0xa624>
   1badc:	ldr	r5, [r0]
   1bae0:	mov	r0, r4
   1bae4:	bl	11230 <dcgettext@plt>
   1bae8:	mov	r1, r5
   1baec:	mov	r2, r0
   1baf0:	mov	r0, r4
   1baf4:	bl	112d8 <error@plt>
   1baf8:	bl	114ac <abort@plt>
   1bafc:	andeq	pc, r1, ip, lsl r5	; <UNPREDICTABLE>
   1bb00:	andeq	r0, r2, r8, lsl #23
   1bb04:	push	{r4, r5, r6, lr}
   1bb08:	sub	sp, sp, #32
   1bb0c:	cmp	r1, #0
   1bb10:	mov	r4, r0
   1bb14:	ldr	r5, [sp, #48]	; 0x30
   1bb18:	ldr	r6, [sp, #52]	; 0x34
   1bb1c:	beq	1be34 <__assert_fail@plt+0xa958>
   1bb20:	stm	sp, {r2, r3}
   1bb24:	mov	r3, r1
   1bb28:	ldr	r2, [pc, #808]	; 1be58 <__assert_fail@plt+0xa97c>
   1bb2c:	mov	r1, #1
   1bb30:	bl	11404 <__fprintf_chk@plt>
   1bb34:	mov	r2, #5
   1bb38:	ldr	r1, [pc, #796]	; 1be5c <__assert_fail@plt+0xa980>
   1bb3c:	mov	r0, #0
   1bb40:	bl	11230 <dcgettext@plt>
   1bb44:	ldr	r3, [pc, #788]	; 1be60 <__assert_fail@plt+0xa984>
   1bb48:	ldr	r2, [pc, #788]	; 1be64 <__assert_fail@plt+0xa988>
   1bb4c:	str	r3, [sp]
   1bb50:	mov	r1, #1
   1bb54:	mov	r3, r0
   1bb58:	mov	r0, r4
   1bb5c:	bl	11404 <__fprintf_chk@plt>
   1bb60:	mov	r1, r4
   1bb64:	mov	r0, #10
   1bb68:	bl	11224 <fputc_unlocked@plt>
   1bb6c:	mov	r2, #5
   1bb70:	ldr	r1, [pc, #752]	; 1be68 <__assert_fail@plt+0xa98c>
   1bb74:	mov	r0, #0
   1bb78:	bl	11230 <dcgettext@plt>
   1bb7c:	mov	r1, #1
   1bb80:	ldr	r3, [pc, #740]	; 1be6c <__assert_fail@plt+0xa990>
   1bb84:	mov	r2, r0
   1bb88:	mov	r0, r4
   1bb8c:	bl	11404 <__fprintf_chk@plt>
   1bb90:	mov	r1, r4
   1bb94:	mov	r0, #10
   1bb98:	bl	11224 <fputc_unlocked@plt>
   1bb9c:	cmp	r6, #9
   1bba0:	ldrls	pc, [pc, r6, lsl #2]
   1bba4:	b	1be4c <__assert_fail@plt+0xa970>
   1bba8:	andeq	fp, r1, ip, lsr #24
   1bbac:	andeq	fp, r1, r4, lsr ip
   1bbb0:	andeq	fp, r1, r0, ror #24
   1bbb4:	muleq	r1, r4, ip
   1bbb8:	ldrdeq	fp, [r1], -r0
   1bbbc:	andeq	fp, r1, ip, lsl #26
   1bbc0:	andeq	fp, r1, r8, asr #26
   1bbc4:	andeq	fp, r1, ip, lsl #27
   1bbc8:	ldrdeq	fp, [r1], -ip
   1bbcc:	ldrdeq	fp, [r1], -r0
   1bbd0:	ldr	r1, [pc, #664]	; 1be70 <__assert_fail@plt+0xa994>
   1bbd4:	mov	r2, #5
   1bbd8:	mov	r0, #0
   1bbdc:	bl	11230 <dcgettext@plt>
   1bbe0:	ldr	ip, [r5, #32]
   1bbe4:	ldr	r1, [r5, #28]
   1bbe8:	ldr	r2, [r5, #24]
   1bbec:	ldr	r3, [r5]
   1bbf0:	ldr	r6, [r5, #20]
   1bbf4:	str	ip, [sp, #28]
   1bbf8:	ldr	lr, [r5, #16]
   1bbfc:	str	r1, [sp, #24]
   1bc00:	ldr	ip, [r5, #12]
   1bc04:	str	r2, [sp, #20]
   1bc08:	ldr	r1, [r5, #8]
   1bc0c:	ldr	r2, [r5, #4]
   1bc10:	str	r6, [sp, #16]
   1bc14:	stmib	sp, {r1, ip, lr}
   1bc18:	mov	r1, #1
   1bc1c:	str	r2, [sp]
   1bc20:	mov	r2, r0
   1bc24:	mov	r0, r4
   1bc28:	bl	11404 <__fprintf_chk@plt>
   1bc2c:	add	sp, sp, #32
   1bc30:	pop	{r4, r5, r6, pc}
   1bc34:	mov	r2, #5
   1bc38:	ldr	r1, [pc, #564]	; 1be74 <__assert_fail@plt+0xa998>
   1bc3c:	mov	r0, #0
   1bc40:	bl	11230 <dcgettext@plt>
   1bc44:	ldr	r3, [r5]
   1bc48:	mov	r1, #1
   1bc4c:	mov	r2, r0
   1bc50:	mov	r0, r4
   1bc54:	add	sp, sp, #32
   1bc58:	pop	{r4, r5, r6, lr}
   1bc5c:	b	11404 <__fprintf_chk@plt>
   1bc60:	mov	r2, #5
   1bc64:	ldr	r1, [pc, #524]	; 1be78 <__assert_fail@plt+0xa99c>
   1bc68:	mov	r0, #0
   1bc6c:	bl	11230 <dcgettext@plt>
   1bc70:	ldr	r2, [r5, #4]
   1bc74:	ldr	r3, [r5]
   1bc78:	mov	r1, #1
   1bc7c:	str	r2, [sp, #48]	; 0x30
   1bc80:	mov	r2, r0
   1bc84:	mov	r0, r4
   1bc88:	add	sp, sp, #32
   1bc8c:	pop	{r4, r5, r6, lr}
   1bc90:	b	11404 <__fprintf_chk@plt>
   1bc94:	mov	r2, #5
   1bc98:	ldr	r1, [pc, #476]	; 1be7c <__assert_fail@plt+0xa9a0>
   1bc9c:	mov	r0, #0
   1bca0:	bl	11230 <dcgettext@plt>
   1bca4:	ldr	r1, [r5, #8]
   1bca8:	ldr	r2, [r5, #4]
   1bcac:	ldr	r3, [r5]
   1bcb0:	str	r1, [sp, #52]	; 0x34
   1bcb4:	str	r2, [sp, #48]	; 0x30
   1bcb8:	mov	r1, #1
   1bcbc:	mov	r2, r0
   1bcc0:	mov	r0, r4
   1bcc4:	add	sp, sp, #32
   1bcc8:	pop	{r4, r5, r6, lr}
   1bccc:	b	11404 <__fprintf_chk@plt>
   1bcd0:	mov	r2, #5
   1bcd4:	ldr	r1, [pc, #420]	; 1be80 <__assert_fail@plt+0xa9a4>
   1bcd8:	mov	r0, #0
   1bcdc:	bl	11230 <dcgettext@plt>
   1bce0:	ldr	r1, [r5, #8]
   1bce4:	ldr	ip, [r5, #12]
   1bce8:	ldr	r2, [r5, #4]
   1bcec:	ldr	r3, [r5]
   1bcf0:	stmib	sp, {r1, ip}
   1bcf4:	str	r2, [sp]
   1bcf8:	mov	r1, #1
   1bcfc:	mov	r2, r0
   1bd00:	mov	r0, r4
   1bd04:	bl	11404 <__fprintf_chk@plt>
   1bd08:	b	1bc2c <__assert_fail@plt+0xa750>
   1bd0c:	mov	r2, #5
   1bd10:	ldr	r1, [pc, #364]	; 1be84 <__assert_fail@plt+0xa9a8>
   1bd14:	mov	r0, #0
   1bd18:	bl	11230 <dcgettext@plt>
   1bd1c:	add	r1, r5, #8
   1bd20:	ldr	r2, [r5, #4]
   1bd24:	ldm	r1, {r1, ip, lr}
   1bd28:	ldr	r3, [r5]
   1bd2c:	str	r2, [sp]
   1bd30:	stmib	sp, {r1, ip, lr}
   1bd34:	mov	r1, #1
   1bd38:	mov	r2, r0
   1bd3c:	mov	r0, r4
   1bd40:	bl	11404 <__fprintf_chk@plt>
   1bd44:	b	1bc2c <__assert_fail@plt+0xa750>
   1bd48:	mov	r2, #5
   1bd4c:	ldr	r1, [pc, #308]	; 1be88 <__assert_fail@plt+0xa9ac>
   1bd50:	mov	r0, #0
   1bd54:	bl	11230 <dcgettext@plt>
   1bd58:	add	r1, r5, #8
   1bd5c:	ldr	r2, [r5, #4]
   1bd60:	ldm	r1, {r1, ip, lr}
   1bd64:	ldr	r6, [r5, #20]
   1bd68:	ldr	r3, [r5]
   1bd6c:	stmib	sp, {r1, ip, lr}
   1bd70:	mov	r1, #1
   1bd74:	str	r2, [sp]
   1bd78:	str	r6, [sp, #16]
   1bd7c:	mov	r2, r0
   1bd80:	mov	r0, r4
   1bd84:	bl	11404 <__fprintf_chk@plt>
   1bd88:	b	1bc2c <__assert_fail@plt+0xa750>
   1bd8c:	mov	r2, #5
   1bd90:	ldr	r1, [pc, #244]	; 1be8c <__assert_fail@plt+0xa9b0>
   1bd94:	mov	r0, #0
   1bd98:	bl	11230 <dcgettext@plt>
   1bd9c:	ldr	r2, [r5, #24]
   1bda0:	ldr	r3, [r5]
   1bda4:	ldr	r6, [r5, #20]
   1bda8:	ldr	lr, [r5, #16]
   1bdac:	ldr	ip, [r5, #12]
   1bdb0:	str	r2, [sp, #20]
   1bdb4:	ldr	r1, [r5, #8]
   1bdb8:	ldr	r2, [r5, #4]
   1bdbc:	str	r6, [sp, #16]
   1bdc0:	stmib	sp, {r1, ip, lr}
   1bdc4:	mov	r1, #1
   1bdc8:	str	r2, [sp]
   1bdcc:	mov	r2, r0
   1bdd0:	mov	r0, r4
   1bdd4:	bl	11404 <__fprintf_chk@plt>
   1bdd8:	b	1bc2c <__assert_fail@plt+0xa750>
   1bddc:	mov	r2, #5
   1bde0:	ldr	r1, [pc, #168]	; 1be90 <__assert_fail@plt+0xa9b4>
   1bde4:	mov	r0, #0
   1bde8:	bl	11230 <dcgettext@plt>
   1bdec:	ldr	r1, [r5, #28]
   1bdf0:	ldr	r2, [r5, #24]
   1bdf4:	ldr	r3, [r5]
   1bdf8:	ldr	r6, [r5, #20]
   1bdfc:	ldr	lr, [r5, #16]
   1be00:	str	r1, [sp, #24]
   1be04:	ldr	ip, [r5, #12]
   1be08:	str	r2, [sp, #20]
   1be0c:	ldr	r1, [r5, #8]
   1be10:	ldr	r2, [r5, #4]
   1be14:	str	r6, [sp, #16]
   1be18:	stmib	sp, {r1, ip, lr}
   1be1c:	mov	r1, #1
   1be20:	str	r2, [sp]
   1be24:	mov	r2, r0
   1be28:	mov	r0, r4
   1be2c:	bl	11404 <__fprintf_chk@plt>
   1be30:	b	1bc2c <__assert_fail@plt+0xa750>
   1be34:	str	r3, [sp]
   1be38:	mov	r1, #1
   1be3c:	mov	r3, r2
   1be40:	ldr	r2, [pc, #76]	; 1be94 <__assert_fail@plt+0xa9b8>
   1be44:	bl	11404 <__fprintf_chk@plt>
   1be48:	b	1bb34 <__assert_fail@plt+0xa658>
   1be4c:	mov	r2, #5
   1be50:	ldr	r1, [pc, #64]	; 1be98 <__assert_fail@plt+0xa9bc>
   1be54:	b	1bbd8 <__assert_fail@plt+0xa6fc>
   1be58:	andeq	r0, r2, r8, lsr #23
   1be5c:			; <UNDEFINED> instruction: 0x00020bbc
   1be60:	andeq	r0, r0, r6, ror #15
   1be64:	muleq	r2, r4, lr
   1be68:	andeq	r0, r2, r0, asr #23
   1be6c:	andeq	r0, r2, ip, ror #24
   1be70:	muleq	r2, ip, sp
   1be74:	muleq	r2, r0, ip
   1be78:	andeq	r0, r2, r0, lsr #25
   1be7c:			; <UNDEFINED> instruction: 0x00020cb8
   1be80:	ldrdeq	r0, [r2], -r4
   1be84:	strdeq	r0, [r2], -r4
   1be88:	andeq	r0, r2, r8, lsl sp
   1be8c:	andeq	r0, r2, r0, asr #26
   1be90:	andeq	r0, r2, ip, ror #26
   1be94:			; <UNDEFINED> instruction: 0x00020bb4
   1be98:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1be9c:	push	{r4, r5, lr}
   1bea0:	sub	sp, sp, #12
   1bea4:	ldr	r5, [sp, #24]
   1bea8:	ldr	ip, [r5]
   1beac:	cmp	ip, #0
   1beb0:	beq	1becc <__assert_fail@plt+0xa9f0>
   1beb4:	mov	lr, r5
   1beb8:	mov	ip, #0
   1bebc:	ldr	r4, [lr, #4]!
   1bec0:	add	ip, ip, #1
   1bec4:	cmp	r4, #0
   1bec8:	bne	1bebc <__assert_fail@plt+0xa9e0>
   1becc:	stm	sp, {r5, ip}
   1bed0:	bl	1bb04 <__assert_fail@plt+0xa628>
   1bed4:	add	sp, sp, #12
   1bed8:	pop	{r4, r5, pc}
   1bedc:	push	{r4, r5, lr}
   1bee0:	sub	sp, sp, #76	; 0x4c
   1bee4:	mov	r5, r0
   1bee8:	ldr	ip, [sp, #88]	; 0x58
   1beec:	ldr	r0, [ip]
   1bef0:	cmp	r0, #0
   1bef4:	str	r0, [sp, #32]
   1bef8:	beq	1c2cc <__assert_fail@plt+0xadf0>
   1befc:	ldr	r0, [ip, #4]
   1bf00:	cmp	r0, #0
   1bf04:	str	r0, [sp, #36]	; 0x24
   1bf08:	beq	1c2d4 <__assert_fail@plt+0xadf8>
   1bf0c:	ldr	r0, [ip, #8]
   1bf10:	cmp	r0, #0
   1bf14:	str	r0, [sp, #40]	; 0x28
   1bf18:	beq	1c2dc <__assert_fail@plt+0xae00>
   1bf1c:	ldr	r0, [ip, #12]
   1bf20:	cmp	r0, #0
   1bf24:	str	r0, [sp, #44]	; 0x2c
   1bf28:	beq	1c2e4 <__assert_fail@plt+0xae08>
   1bf2c:	ldr	r0, [ip, #16]
   1bf30:	cmp	r0, #0
   1bf34:	str	r0, [sp, #48]	; 0x30
   1bf38:	beq	1c2ec <__assert_fail@plt+0xae10>
   1bf3c:	ldr	r0, [ip, #20]
   1bf40:	cmp	r0, #0
   1bf44:	str	r0, [sp, #52]	; 0x34
   1bf48:	beq	1c2f4 <__assert_fail@plt+0xae18>
   1bf4c:	ldr	r0, [ip, #24]
   1bf50:	cmp	r0, #0
   1bf54:	str	r0, [sp, #56]	; 0x38
   1bf58:	beq	1c2fc <__assert_fail@plt+0xae20>
   1bf5c:	ldr	r0, [ip, #28]
   1bf60:	cmp	r0, #0
   1bf64:	str	r0, [sp, #60]	; 0x3c
   1bf68:	beq	1c304 <__assert_fail@plt+0xae28>
   1bf6c:	ldr	r0, [ip, #32]
   1bf70:	cmp	r0, #0
   1bf74:	str	r0, [sp, #64]	; 0x40
   1bf78:	beq	1c30c <__assert_fail@plt+0xae30>
   1bf7c:	ldr	r0, [ip, #36]	; 0x24
   1bf80:	cmp	r0, #0
   1bf84:	movne	r4, #10
   1bf88:	moveq	r4, #9
   1bf8c:	cmp	r1, #0
   1bf90:	beq	1c2a4 <__assert_fail@plt+0xadc8>
   1bf94:	stm	sp, {r2, r3}
   1bf98:	mov	r0, r5
   1bf9c:	mov	r3, r1
   1bfa0:	ldr	r2, [pc, #876]	; 1c314 <__assert_fail@plt+0xae38>
   1bfa4:	mov	r1, #1
   1bfa8:	bl	11404 <__fprintf_chk@plt>
   1bfac:	mov	r2, #5
   1bfb0:	ldr	r1, [pc, #864]	; 1c318 <__assert_fail@plt+0xae3c>
   1bfb4:	mov	r0, #0
   1bfb8:	bl	11230 <dcgettext@plt>
   1bfbc:	ldr	r3, [pc, #856]	; 1c31c <__assert_fail@plt+0xae40>
   1bfc0:	ldr	r2, [pc, #856]	; 1c320 <__assert_fail@plt+0xae44>
   1bfc4:	str	r3, [sp]
   1bfc8:	mov	r1, #1
   1bfcc:	mov	r3, r0
   1bfd0:	mov	r0, r5
   1bfd4:	bl	11404 <__fprintf_chk@plt>
   1bfd8:	mov	r1, r5
   1bfdc:	mov	r0, #10
   1bfe0:	bl	11224 <fputc_unlocked@plt>
   1bfe4:	mov	r2, #5
   1bfe8:	ldr	r1, [pc, #820]	; 1c324 <__assert_fail@plt+0xae48>
   1bfec:	mov	r0, #0
   1bff0:	bl	11230 <dcgettext@plt>
   1bff4:	mov	r1, #1
   1bff8:	ldr	r3, [pc, #808]	; 1c328 <__assert_fail@plt+0xae4c>
   1bffc:	mov	r2, r0
   1c000:	mov	r0, r5
   1c004:	bl	11404 <__fprintf_chk@plt>
   1c008:	mov	r1, r5
   1c00c:	mov	r0, #10
   1c010:	bl	11224 <fputc_unlocked@plt>
   1c014:	cmp	r4, #9
   1c018:	ldrls	pc, [pc, r4, lsl #2]
   1c01c:	b	1c2c0 <__assert_fail@plt+0xade4>
   1c020:	andeq	ip, r1, r4, lsr #1
   1c024:	andeq	ip, r1, ip, lsr #1
   1c028:	ldrdeq	ip, [r1], -r8
   1c02c:	andeq	ip, r1, ip, lsl #2
   1c030:	andeq	ip, r1, r4, asr #2
   1c034:	andeq	ip, r1, r0, lsl #3
   1c038:			; <UNDEFINED> instruction: 0x0001c1bc
   1c03c:	andeq	ip, r1, r0, lsl #4
   1c040:	andeq	ip, r1, ip, asr #4
   1c044:	andeq	ip, r1, r8, asr #32
   1c048:	ldr	r1, [pc, #732]	; 1c32c <__assert_fail@plt+0xae50>
   1c04c:	mov	r2, #5
   1c050:	mov	r0, #0
   1c054:	bl	11230 <dcgettext@plt>
   1c058:	ldr	ip, [sp, #64]	; 0x40
   1c05c:	ldr	r1, [sp, #60]	; 0x3c
   1c060:	ldr	r2, [sp, #56]	; 0x38
   1c064:	ldr	lr, [sp, #48]	; 0x30
   1c068:	str	ip, [sp, #28]
   1c06c:	str	r1, [sp, #24]
   1c070:	ldr	ip, [sp, #44]	; 0x2c
   1c074:	ldr	r1, [sp, #40]	; 0x28
   1c078:	ldr	r4, [sp, #52]	; 0x34
   1c07c:	str	r2, [sp, #20]
   1c080:	ldr	r2, [sp, #36]	; 0x24
   1c084:	stmib	sp, {r1, ip, lr}
   1c088:	mov	r1, #1
   1c08c:	str	r2, [sp]
   1c090:	ldr	r3, [sp, #32]
   1c094:	str	r4, [sp, #16]
   1c098:	mov	r2, r0
   1c09c:	mov	r0, r5
   1c0a0:	bl	11404 <__fprintf_chk@plt>
   1c0a4:	add	sp, sp, #76	; 0x4c
   1c0a8:	pop	{r4, r5, pc}
   1c0ac:	mov	r2, #5
   1c0b0:	ldr	r1, [pc, #632]	; 1c330 <__assert_fail@plt+0xae54>
   1c0b4:	mov	r0, #0
   1c0b8:	bl	11230 <dcgettext@plt>
   1c0bc:	ldr	r3, [sp, #32]
   1c0c0:	mov	r1, #1
   1c0c4:	mov	r2, r0
   1c0c8:	mov	r0, r5
   1c0cc:	add	sp, sp, #76	; 0x4c
   1c0d0:	pop	{r4, r5, lr}
   1c0d4:	b	11404 <__fprintf_chk@plt>
   1c0d8:	mov	r2, #5
   1c0dc:	ldr	r1, [pc, #592]	; 1c334 <__assert_fail@plt+0xae58>
   1c0e0:	mov	r0, #0
   1c0e4:	bl	11230 <dcgettext@plt>
   1c0e8:	ldr	r2, [sp, #36]	; 0x24
   1c0ec:	ldr	r3, [sp, #32]
   1c0f0:	str	r2, [sp, #88]	; 0x58
   1c0f4:	mov	r1, #1
   1c0f8:	mov	r2, r0
   1c0fc:	mov	r0, r5
   1c100:	add	sp, sp, #76	; 0x4c
   1c104:	pop	{r4, r5, lr}
   1c108:	b	11404 <__fprintf_chk@plt>
   1c10c:	mov	r2, #5
   1c110:	ldr	r1, [pc, #544]	; 1c338 <__assert_fail@plt+0xae5c>
   1c114:	mov	r0, #0
   1c118:	bl	11230 <dcgettext@plt>
   1c11c:	ldr	r1, [sp, #40]	; 0x28
   1c120:	ldr	r2, [sp, #36]	; 0x24
   1c124:	str	r1, [sp, #4]
   1c128:	str	r2, [sp]
   1c12c:	ldr	r3, [sp, #32]
   1c130:	mov	r1, #1
   1c134:	mov	r2, r0
   1c138:	mov	r0, r5
   1c13c:	bl	11404 <__fprintf_chk@plt>
   1c140:	b	1c0a4 <__assert_fail@plt+0xabc8>
   1c144:	mov	r2, #5
   1c148:	ldr	r1, [pc, #492]	; 1c33c <__assert_fail@plt+0xae60>
   1c14c:	mov	r0, #0
   1c150:	bl	11230 <dcgettext@plt>
   1c154:	ldr	r1, [sp, #40]	; 0x28
   1c158:	ldr	ip, [sp, #44]	; 0x2c
   1c15c:	ldr	r2, [sp, #36]	; 0x24
   1c160:	ldr	r3, [sp, #32]
   1c164:	stmib	sp, {r1, ip}
   1c168:	str	r2, [sp]
   1c16c:	mov	r1, #1
   1c170:	mov	r2, r0
   1c174:	mov	r0, r5
   1c178:	bl	11404 <__fprintf_chk@plt>
   1c17c:	b	1c0a4 <__assert_fail@plt+0xabc8>
   1c180:	mov	r2, #5
   1c184:	ldr	r1, [pc, #436]	; 1c340 <__assert_fail@plt+0xae64>
   1c188:	mov	r0, #0
   1c18c:	bl	11230 <dcgettext@plt>
   1c190:	add	r1, sp, #40	; 0x28
   1c194:	ldr	r2, [sp, #36]	; 0x24
   1c198:	ldm	r1, {r1, ip, lr}
   1c19c:	ldr	r3, [sp, #32]
   1c1a0:	str	r2, [sp]
   1c1a4:	stmib	sp, {r1, ip, lr}
   1c1a8:	mov	r1, #1
   1c1ac:	mov	r2, r0
   1c1b0:	mov	r0, r5
   1c1b4:	bl	11404 <__fprintf_chk@plt>
   1c1b8:	b	1c0a4 <__assert_fail@plt+0xabc8>
   1c1bc:	mov	r2, #5
   1c1c0:	ldr	r1, [pc, #380]	; 1c344 <__assert_fail@plt+0xae68>
   1c1c4:	mov	r0, #0
   1c1c8:	bl	11230 <dcgettext@plt>
   1c1cc:	add	r1, sp, #40	; 0x28
   1c1d0:	ldr	r2, [sp, #36]	; 0x24
   1c1d4:	ldm	r1, {r1, ip, lr}
   1c1d8:	ldr	r4, [sp, #52]	; 0x34
   1c1dc:	str	r2, [sp]
   1c1e0:	stmib	sp, {r1, ip, lr}
   1c1e4:	mov	r1, #1
   1c1e8:	ldr	r3, [sp, #32]
   1c1ec:	str	r4, [sp, #16]
   1c1f0:	mov	r2, r0
   1c1f4:	mov	r0, r5
   1c1f8:	bl	11404 <__fprintf_chk@plt>
   1c1fc:	b	1c0a4 <__assert_fail@plt+0xabc8>
   1c200:	mov	r2, #5
   1c204:	ldr	r1, [pc, #316]	; 1c348 <__assert_fail@plt+0xae6c>
   1c208:	mov	r0, #0
   1c20c:	bl	11230 <dcgettext@plt>
   1c210:	add	r1, sp, #40	; 0x28
   1c214:	ldr	r2, [sp, #56]	; 0x38
   1c218:	ldm	r1, {r1, ip, lr}
   1c21c:	ldr	r4, [sp, #52]	; 0x34
   1c220:	str	r2, [sp, #20]
   1c224:	ldr	r2, [sp, #36]	; 0x24
   1c228:	stmib	sp, {r1, ip, lr}
   1c22c:	mov	r1, #1
   1c230:	str	r2, [sp]
   1c234:	ldr	r3, [sp, #32]
   1c238:	str	r4, [sp, #16]
   1c23c:	mov	r2, r0
   1c240:	mov	r0, r5
   1c244:	bl	11404 <__fprintf_chk@plt>
   1c248:	b	1c0a4 <__assert_fail@plt+0xabc8>
   1c24c:	mov	r2, #5
   1c250:	ldr	r1, [pc, #244]	; 1c34c <__assert_fail@plt+0xae70>
   1c254:	mov	r0, #0
   1c258:	bl	11230 <dcgettext@plt>
   1c25c:	ldr	r1, [sp, #60]	; 0x3c
   1c260:	ldr	r2, [sp, #56]	; 0x38
   1c264:	ldr	lr, [sp, #48]	; 0x30
   1c268:	ldr	ip, [sp, #44]	; 0x2c
   1c26c:	str	r1, [sp, #24]
   1c270:	ldr	r1, [sp, #40]	; 0x28
   1c274:	ldr	r4, [sp, #52]	; 0x34
   1c278:	str	r2, [sp, #20]
   1c27c:	ldr	r2, [sp, #36]	; 0x24
   1c280:	stmib	sp, {r1, ip, lr}
   1c284:	mov	r1, #1
   1c288:	str	r2, [sp]
   1c28c:	ldr	r3, [sp, #32]
   1c290:	str	r4, [sp, #16]
   1c294:	mov	r2, r0
   1c298:	mov	r0, r5
   1c29c:	bl	11404 <__fprintf_chk@plt>
   1c2a0:	b	1c0a4 <__assert_fail@plt+0xabc8>
   1c2a4:	str	r3, [sp]
   1c2a8:	mov	r1, #1
   1c2ac:	mov	r3, r2
   1c2b0:	mov	r0, r5
   1c2b4:	ldr	r2, [pc, #148]	; 1c350 <__assert_fail@plt+0xae74>
   1c2b8:	bl	11404 <__fprintf_chk@plt>
   1c2bc:	b	1bfac <__assert_fail@plt+0xaad0>
   1c2c0:	mov	r2, #5
   1c2c4:	ldr	r1, [pc, #136]	; 1c354 <__assert_fail@plt+0xae78>
   1c2c8:	b	1c050 <__assert_fail@plt+0xab74>
   1c2cc:	mov	r4, r0
   1c2d0:	b	1bf8c <__assert_fail@plt+0xaab0>
   1c2d4:	mov	r4, #1
   1c2d8:	b	1bf8c <__assert_fail@plt+0xaab0>
   1c2dc:	mov	r4, #2
   1c2e0:	b	1bf8c <__assert_fail@plt+0xaab0>
   1c2e4:	mov	r4, #3
   1c2e8:	b	1bf8c <__assert_fail@plt+0xaab0>
   1c2ec:	mov	r4, #4
   1c2f0:	b	1bf8c <__assert_fail@plt+0xaab0>
   1c2f4:	mov	r4, #5
   1c2f8:	b	1bf8c <__assert_fail@plt+0xaab0>
   1c2fc:	mov	r4, #6
   1c300:	b	1bf8c <__assert_fail@plt+0xaab0>
   1c304:	mov	r4, #7
   1c308:	b	1bf8c <__assert_fail@plt+0xaab0>
   1c30c:	mov	r4, #8
   1c310:	b	1bf8c <__assert_fail@plt+0xaab0>
   1c314:	andeq	r0, r2, r8, lsr #23
   1c318:			; <UNDEFINED> instruction: 0x00020bbc
   1c31c:	andeq	r0, r0, r6, ror #15
   1c320:	muleq	r2, r4, lr
   1c324:	andeq	r0, r2, r0, asr #23
   1c328:	andeq	r0, r2, ip, ror #24
   1c32c:	muleq	r2, ip, sp
   1c330:	muleq	r2, r0, ip
   1c334:	andeq	r0, r2, r0, lsr #25
   1c338:			; <UNDEFINED> instruction: 0x00020cb8
   1c33c:	ldrdeq	r0, [r2], -r4
   1c340:	strdeq	r0, [r2], -r4
   1c344:	andeq	r0, r2, r8, lsl sp
   1c348:	andeq	r0, r2, r0, asr #26
   1c34c:	andeq	r0, r2, ip, ror #26
   1c350:			; <UNDEFINED> instruction: 0x00020bb4
   1c354:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1c358:	push	{r3}		; (str r3, [sp, #-4]!)
   1c35c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c360:	sub	sp, sp, #56	; 0x38
   1c364:	add	r3, sp, #64	; 0x40
   1c368:	ldr	ip, [sp, #64]	; 0x40
   1c36c:	str	r3, [sp, #12]
   1c370:	cmp	ip, #0
   1c374:	str	ip, [sp, #16]
   1c378:	beq	1c410 <__assert_fail@plt+0xaf34>
   1c37c:	ldr	ip, [sp, #68]	; 0x44
   1c380:	cmp	ip, #0
   1c384:	str	ip, [sp, #20]
   1c388:	beq	1c430 <__assert_fail@plt+0xaf54>
   1c38c:	ldr	ip, [sp, #72]	; 0x48
   1c390:	cmp	ip, #0
   1c394:	str	ip, [sp, #24]
   1c398:	beq	1c438 <__assert_fail@plt+0xaf5c>
   1c39c:	ldr	ip, [sp, #76]	; 0x4c
   1c3a0:	cmp	ip, #0
   1c3a4:	str	ip, [sp, #28]
   1c3a8:	beq	1c440 <__assert_fail@plt+0xaf64>
   1c3ac:	ldr	ip, [sp, #80]	; 0x50
   1c3b0:	cmp	ip, #0
   1c3b4:	str	ip, [sp, #32]
   1c3b8:	beq	1c448 <__assert_fail@plt+0xaf6c>
   1c3bc:	ldr	ip, [sp, #84]	; 0x54
   1c3c0:	cmp	ip, #0
   1c3c4:	str	ip, [sp, #36]	; 0x24
   1c3c8:	beq	1c450 <__assert_fail@plt+0xaf74>
   1c3cc:	ldr	ip, [sp, #88]	; 0x58
   1c3d0:	cmp	ip, #0
   1c3d4:	str	ip, [sp, #40]	; 0x28
   1c3d8:	beq	1c458 <__assert_fail@plt+0xaf7c>
   1c3dc:	ldr	ip, [sp, #92]	; 0x5c
   1c3e0:	cmp	ip, #0
   1c3e4:	str	ip, [sp, #44]	; 0x2c
   1c3e8:	beq	1c460 <__assert_fail@plt+0xaf84>
   1c3ec:	ldr	ip, [sp, #96]	; 0x60
   1c3f0:	cmp	ip, #0
   1c3f4:	str	ip, [sp, #48]	; 0x30
   1c3f8:	beq	1c468 <__assert_fail@plt+0xaf8c>
   1c3fc:	ldr	ip, [sp, #100]	; 0x64
   1c400:	cmp	ip, #0
   1c404:	str	ip, [sp, #52]	; 0x34
   1c408:	movne	ip, #10
   1c40c:	moveq	ip, #9
   1c410:	add	r3, sp, #16
   1c414:	stm	sp, {r3, ip}
   1c418:	ldr	r3, [sp, #60]	; 0x3c
   1c41c:	bl	1bb04 <__assert_fail@plt+0xa628>
   1c420:	add	sp, sp, #56	; 0x38
   1c424:	pop	{lr}		; (ldr lr, [sp], #4)
   1c428:	add	sp, sp, #4
   1c42c:	bx	lr
   1c430:	mov	ip, #1
   1c434:	b	1c410 <__assert_fail@plt+0xaf34>
   1c438:	mov	ip, #2
   1c43c:	b	1c410 <__assert_fail@plt+0xaf34>
   1c440:	mov	ip, #3
   1c444:	b	1c410 <__assert_fail@plt+0xaf34>
   1c448:	mov	ip, #4
   1c44c:	b	1c410 <__assert_fail@plt+0xaf34>
   1c450:	mov	ip, #5
   1c454:	b	1c410 <__assert_fail@plt+0xaf34>
   1c458:	mov	ip, #6
   1c45c:	b	1c410 <__assert_fail@plt+0xaf34>
   1c460:	mov	ip, #7
   1c464:	b	1c410 <__assert_fail@plt+0xaf34>
   1c468:	mov	ip, #8
   1c46c:	b	1c410 <__assert_fail@plt+0xaf34>
   1c470:	ldr	r3, [pc, #116]	; 1c4ec <__assert_fail@plt+0xb010>
   1c474:	push	{r4, lr}
   1c478:	mov	r0, #10
   1c47c:	ldr	r1, [r3]
   1c480:	bl	11224 <fputc_unlocked@plt>
   1c484:	mov	r2, #5
   1c488:	ldr	r1, [pc, #96]	; 1c4f0 <__assert_fail@plt+0xb014>
   1c48c:	mov	r0, #0
   1c490:	bl	11230 <dcgettext@plt>
   1c494:	ldr	r2, [pc, #88]	; 1c4f4 <__assert_fail@plt+0xb018>
   1c498:	mov	r1, r0
   1c49c:	mov	r0, #1
   1c4a0:	bl	113e0 <__printf_chk@plt>
   1c4a4:	mov	r2, #5
   1c4a8:	ldr	r1, [pc, #72]	; 1c4f8 <__assert_fail@plt+0xb01c>
   1c4ac:	mov	r0, #0
   1c4b0:	bl	11230 <dcgettext@plt>
   1c4b4:	ldr	r3, [pc, #64]	; 1c4fc <__assert_fail@plt+0xb020>
   1c4b8:	ldr	r2, [pc, #64]	; 1c500 <__assert_fail@plt+0xb024>
   1c4bc:	mov	r1, r0
   1c4c0:	mov	r0, #1
   1c4c4:	bl	113e0 <__printf_chk@plt>
   1c4c8:	mov	r2, #5
   1c4cc:	ldr	r1, [pc, #48]	; 1c504 <__assert_fail@plt+0xb028>
   1c4d0:	mov	r0, #0
   1c4d4:	bl	11230 <dcgettext@plt>
   1c4d8:	ldr	r2, [pc, #40]	; 1c508 <__assert_fail@plt+0xb02c>
   1c4dc:	pop	{r4, lr}
   1c4e0:	mov	r1, r0
   1c4e4:	mov	r0, #1
   1c4e8:	b	113e0 <__printf_chk@plt>
   1c4ec:	ldrdeq	r2, [r3], -ip
   1c4f0:	andeq	r0, r2, ip, lsl #28
   1c4f4:	andeq	r0, r2, r0, lsr #28
   1c4f8:	andeq	r0, r2, r8, lsr lr
   1c4fc:	andeq	r0, r2, ip, ror #6
   1c500:	muleq	r2, r4, r3
   1c504:	andeq	r0, r2, ip, asr #28
   1c508:	andeq	r0, r2, r4, ror lr
   1c50c:	push	{r4, r5, r6, lr}
   1c510:	mov	r6, r0
   1c514:	mov	r5, r1
   1c518:	mov	r4, r2
   1c51c:	bl	1e26c <__assert_fail@plt+0xcd90>
   1c520:	cmp	r0, #0
   1c524:	popne	{r4, r5, r6, pc}
   1c528:	cmp	r6, #0
   1c52c:	beq	1c53c <__assert_fail@plt+0xb060>
   1c530:	cmp	r5, #0
   1c534:	cmpne	r4, #0
   1c538:	popeq	{r4, r5, r6, pc}
   1c53c:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1c540:	push	{r4, lr}
   1c544:	bl	1db44 <__assert_fail@plt+0xc668>
   1c548:	cmp	r0, #0
   1c54c:	popne	{r4, pc}
   1c550:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1c554:	push	{r4, lr}
   1c558:	bl	1db44 <__assert_fail@plt+0xc668>
   1c55c:	cmp	r0, #0
   1c560:	popne	{r4, pc}
   1c564:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1c568:	push	{r4, lr}
   1c56c:	bl	1db44 <__assert_fail@plt+0xc668>
   1c570:	cmp	r0, #0
   1c574:	popne	{r4, pc}
   1c578:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1c57c:	push	{r4, r5, r6, lr}
   1c580:	mov	r5, r0
   1c584:	mov	r4, r1
   1c588:	bl	1db70 <__assert_fail@plt+0xc694>
   1c58c:	cmp	r0, #0
   1c590:	popne	{r4, r5, r6, pc}
   1c594:	adds	r4, r4, #0
   1c598:	movne	r4, #1
   1c59c:	cmp	r5, #0
   1c5a0:	orreq	r4, r4, #1
   1c5a4:	cmp	r4, #0
   1c5a8:	popeq	{r4, r5, r6, pc}
   1c5ac:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1c5b0:	push	{r4, lr}
   1c5b4:	cmp	r1, #0
   1c5b8:	orreq	r1, r1, #1
   1c5bc:	bl	1db70 <__assert_fail@plt+0xc694>
   1c5c0:	cmp	r0, #0
   1c5c4:	popne	{r4, pc}
   1c5c8:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1c5cc:	push	{r4, r5, r6, lr}
   1c5d0:	mov	r6, r0
   1c5d4:	mov	r5, r1
   1c5d8:	mov	r4, r2
   1c5dc:	bl	1e26c <__assert_fail@plt+0xcd90>
   1c5e0:	cmp	r0, #0
   1c5e4:	popne	{r4, r5, r6, pc}
   1c5e8:	cmp	r6, #0
   1c5ec:	beq	1c5fc <__assert_fail@plt+0xb120>
   1c5f0:	cmp	r5, #0
   1c5f4:	cmpne	r4, #0
   1c5f8:	popeq	{r4, r5, r6, pc}
   1c5fc:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1c600:	cmp	r2, #0
   1c604:	cmpne	r1, #0
   1c608:	moveq	r2, #1
   1c60c:	moveq	r1, r2
   1c610:	push	{r4, lr}
   1c614:	bl	1e26c <__assert_fail@plt+0xcd90>
   1c618:	cmp	r0, #0
   1c61c:	popne	{r4, pc}
   1c620:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1c624:	push	{r4, lr}
   1c628:	mov	r2, r1
   1c62c:	mov	r1, r0
   1c630:	mov	r0, #0
   1c634:	bl	1e26c <__assert_fail@plt+0xcd90>
   1c638:	cmp	r0, #0
   1c63c:	popne	{r4, pc}
   1c640:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1c644:	cmp	r1, #0
   1c648:	cmpne	r0, #0
   1c64c:	moveq	r2, #1
   1c650:	movne	r2, r1
   1c654:	moveq	r1, r2
   1c658:	movne	r1, r0
   1c65c:	push	{r4, lr}
   1c660:	mov	r0, #0
   1c664:	bl	1e26c <__assert_fail@plt+0xcd90>
   1c668:	cmp	r0, #0
   1c66c:	popne	{r4, pc}
   1c670:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1c674:	cmp	r0, #0
   1c678:	push	{r4, r5, r6, lr}
   1c67c:	mov	r5, r1
   1c680:	ldr	r4, [r1]
   1c684:	beq	1c6c0 <__assert_fail@plt+0xb1e4>
   1c688:	lsr	r2, r4, #1
   1c68c:	add	r3, r2, #1
   1c690:	mvn	r3, r3
   1c694:	cmp	r4, r3
   1c698:	bhi	1c6dc <__assert_fail@plt+0xb200>
   1c69c:	add	r4, r4, #1
   1c6a0:	add	r4, r4, r2
   1c6a4:	mov	r1, r4
   1c6a8:	mov	r2, #1
   1c6ac:	bl	1e26c <__assert_fail@plt+0xcd90>
   1c6b0:	cmp	r0, #0
   1c6b4:	beq	1c6e0 <__assert_fail@plt+0xb204>
   1c6b8:	str	r4, [r5]
   1c6bc:	pop	{r4, r5, r6, pc}
   1c6c0:	cmp	r4, #0
   1c6c4:	moveq	r4, #64	; 0x40
   1c6c8:	mov	r1, r4
   1c6cc:	mov	r2, #1
   1c6d0:	bl	1e26c <__assert_fail@plt+0xcd90>
   1c6d4:	cmp	r0, #0
   1c6d8:	bne	1c6b8 <__assert_fail@plt+0xb1dc>
   1c6dc:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1c6e0:	cmp	r4, #0
   1c6e4:	bne	1c6dc <__assert_fail@plt+0xb200>
   1c6e8:	str	r4, [r5]
   1c6ec:	pop	{r4, r5, r6, pc}
   1c6f0:	cmp	r0, #0
   1c6f4:	push	{r4, r5, r6, lr}
   1c6f8:	mov	r5, r1
   1c6fc:	ldr	r4, [r1]
   1c700:	mov	r6, r2
   1c704:	beq	1c748 <__assert_fail@plt+0xb26c>
   1c708:	lsr	r1, r4, #1
   1c70c:	add	r3, r1, #1
   1c710:	mvn	r3, r3
   1c714:	cmp	r4, r3
   1c718:	bhi	1c780 <__assert_fail@plt+0xb2a4>
   1c71c:	add	r4, r4, #1
   1c720:	add	r4, r4, r1
   1c724:	mov	r1, r4
   1c728:	bl	1e26c <__assert_fail@plt+0xcd90>
   1c72c:	cmp	r0, #0
   1c730:	bne	1c740 <__assert_fail@plt+0xb264>
   1c734:	cmp	r4, #0
   1c738:	cmpne	r6, #0
   1c73c:	bne	1c780 <__assert_fail@plt+0xb2a4>
   1c740:	str	r4, [r5]
   1c744:	pop	{r4, r5, r6, pc}
   1c748:	cmp	r4, #0
   1c74c:	bne	1c768 <__assert_fail@plt+0xb28c>
   1c750:	mov	r1, r2
   1c754:	mov	r0, #64	; 0x40
   1c758:	bl	1e3ac <__assert_fail@plt+0xced0>
   1c75c:	cmp	r0, #0
   1c760:	movne	r4, r0
   1c764:	addeq	r4, r0, #1
   1c768:	mov	r2, r6
   1c76c:	mov	r1, r4
   1c770:	mov	r0, #0
   1c774:	bl	1e26c <__assert_fail@plt+0xcd90>
   1c778:	cmp	r0, #0
   1c77c:	bne	1c740 <__assert_fail@plt+0xb264>
   1c780:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1c784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c788:	sub	sp, sp, #12
   1c78c:	ldr	r6, [r1]
   1c790:	mov	r8, r1
   1c794:	mov	r9, r0
   1c798:	asrs	r4, r6, #1
   1c79c:	mov	sl, r2
   1c7a0:	mov	fp, r3
   1c7a4:	ldr	r7, [sp, #48]	; 0x30
   1c7a8:	bmi	1c924 <__assert_fail@plt+0xb448>
   1c7ac:	mvn	r1, #-2147483648	; 0x80000000
   1c7b0:	sub	r1, r1, r4
   1c7b4:	cmp	r6, r1
   1c7b8:	movle	r1, #0
   1c7bc:	movgt	r1, #1
   1c7c0:	mvn	r3, fp
   1c7c4:	cmp	r1, #0
   1c7c8:	addeq	r4, r4, r6
   1c7cc:	mvnne	r4, #-2147483648	; 0x80000000
   1c7d0:	lsr	r3, r3, #31
   1c7d4:	cmp	fp, r4
   1c7d8:	movge	r2, #0
   1c7dc:	andlt	r2, r3, #1
   1c7e0:	cmp	r2, #0
   1c7e4:	beq	1c8d4 <__assert_fail@plt+0xb3f8>
   1c7e8:	cmp	r7, #0
   1c7ec:	blt	1c9bc <__assert_fail@plt+0xb4e0>
   1c7f0:	bne	1c9b4 <__assert_fail@plt+0xb4d8>
   1c7f4:	mov	r5, #64	; 0x40
   1c7f8:	mov	r1, r7
   1c7fc:	mov	r0, r5
   1c800:	str	r3, [sp, #4]
   1c804:	bl	1e5b8 <__assert_fail@plt+0xd0dc>
   1c808:	mov	r1, r7
   1c80c:	mov	r4, r0
   1c810:	mov	r0, r5
   1c814:	bl	1e7d8 <__assert_fail@plt+0xd2fc>
   1c818:	ldr	r3, [sp, #4]
   1c81c:	sub	r5, r5, r1
   1c820:	cmp	r9, #0
   1c824:	sub	r2, r4, r6
   1c828:	streq	r9, [r8]
   1c82c:	cmp	r2, sl
   1c830:	bge	1c8b4 <__assert_fail@plt+0xb3d8>
   1c834:	cmp	sl, #0
   1c838:	blt	1c954 <__assert_fail@plt+0xb478>
   1c83c:	cmp	r6, #0
   1c840:	blt	1c860 <__assert_fail@plt+0xb384>
   1c844:	mvn	r2, #-2147483648	; 0x80000000
   1c848:	sub	r2, r2, sl
   1c84c:	cmp	r6, r2
   1c850:	movle	r2, #0
   1c854:	movgt	r2, #1
   1c858:	cmp	r2, #0
   1c85c:	bne	1c950 <__assert_fail@plt+0xb474>
   1c860:	add	r6, r6, sl
   1c864:	cmp	fp, r6
   1c868:	movge	r3, #0
   1c86c:	andlt	r3, r3, #1
   1c870:	cmp	r3, #0
   1c874:	mov	r4, r6
   1c878:	bne	1c950 <__assert_fail@plt+0xb474>
   1c87c:	cmp	r7, #0
   1c880:	blt	1c968 <__assert_fail@plt+0xb48c>
   1c884:	beq	1c8b0 <__assert_fail@plt+0xb3d4>
   1c888:	cmp	r6, #0
   1c88c:	blt	1ca0c <__assert_fail@plt+0xb530>
   1c890:	mov	r1, r7
   1c894:	mvn	r0, #-2147483648	; 0x80000000
   1c898:	bl	1e5b8 <__assert_fail@plt+0xd0dc>
   1c89c:	cmp	r6, r0
   1c8a0:	movle	r0, #0
   1c8a4:	movgt	r0, #1
   1c8a8:	cmp	r0, #0
   1c8ac:	bne	1c950 <__assert_fail@plt+0xb474>
   1c8b0:	mul	r5, r6, r7
   1c8b4:	mov	r1, r5
   1c8b8:	mov	r0, r9
   1c8bc:	bl	1db70 <__assert_fail@plt+0xc694>
   1c8c0:	cmp	r0, #0
   1c8c4:	beq	1c938 <__assert_fail@plt+0xb45c>
   1c8c8:	str	r4, [r8]
   1c8cc:	add	sp, sp, #12
   1c8d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8d4:	cmp	r7, #0
   1c8d8:	blt	1c994 <__assert_fail@plt+0xb4b8>
   1c8dc:	beq	1c7f4 <__assert_fail@plt+0xb318>
   1c8e0:	cmp	r4, #0
   1c8e4:	blt	1c9c4 <__assert_fail@plt+0xb4e8>
   1c8e8:	mov	r1, r7
   1c8ec:	mvn	r0, #-2147483648	; 0x80000000
   1c8f0:	str	r3, [sp, #4]
   1c8f4:	bl	1e5b8 <__assert_fail@plt+0xd0dc>
   1c8f8:	ldr	r3, [sp, #4]
   1c8fc:	cmp	r0, r4
   1c900:	movge	r0, #0
   1c904:	movlt	r0, #1
   1c908:	cmp	r0, #0
   1c90c:	mvnne	r5, #-2147483648	; 0x80000000
   1c910:	bne	1c7f8 <__assert_fail@plt+0xb31c>
   1c914:	mul	r5, r7, r4
   1c918:	cmp	r5, #63	; 0x3f
   1c91c:	bgt	1c820 <__assert_fail@plt+0xb344>
   1c920:	b	1c7f4 <__assert_fail@plt+0xb318>
   1c924:	rsb	r1, r4, #-2147483648	; 0x80000000
   1c928:	cmp	r6, r1
   1c92c:	movge	r1, #0
   1c930:	movlt	r1, #1
   1c934:	b	1c7c0 <__assert_fail@plt+0xb2e4>
   1c938:	adds	r5, r5, #0
   1c93c:	movne	r5, #1
   1c940:	cmp	r9, #0
   1c944:	orreq	r5, r5, #1
   1c948:	cmp	r5, #0
   1c94c:	beq	1c8c8 <__assert_fail@plt+0xb3ec>
   1c950:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1c954:	rsb	r2, sl, #-2147483648	; 0x80000000
   1c958:	cmp	r6, r2
   1c95c:	movge	r2, #0
   1c960:	movlt	r2, #1
   1c964:	b	1c858 <__assert_fail@plt+0xb37c>
   1c968:	cmp	r6, #0
   1c96c:	blt	1c9f0 <__assert_fail@plt+0xb514>
   1c970:	cmn	r7, #1
   1c974:	beq	1c8b0 <__assert_fail@plt+0xb3d4>
   1c978:	mov	r1, r7
   1c97c:	mov	r0, #-2147483648	; 0x80000000
   1c980:	bl	1e5b8 <__assert_fail@plt+0xd0dc>
   1c984:	cmp	r6, r0
   1c988:	movle	r0, #0
   1c98c:	movgt	r0, #1
   1c990:	b	1c8a8 <__assert_fail@plt+0xb3cc>
   1c994:	cmp	r4, #0
   1c998:	blt	1ca30 <__assert_fail@plt+0xb554>
   1c99c:	cmn	r7, #1
   1c9a0:	beq	1c914 <__assert_fail@plt+0xb438>
   1c9a4:	str	r3, [sp, #4]
   1c9a8:	mov	r1, r7
   1c9ac:	mov	r0, #-2147483648	; 0x80000000
   1c9b0:	b	1c8f4 <__assert_fail@plt+0xb418>
   1c9b4:	mov	r4, fp
   1c9b8:	b	1c8e8 <__assert_fail@plt+0xb40c>
   1c9bc:	mov	r4, fp
   1c9c0:	b	1c99c <__assert_fail@plt+0xb4c0>
   1c9c4:	cmn	r4, #1
   1c9c8:	beq	1c914 <__assert_fail@plt+0xb438>
   1c9cc:	mov	r1, r4
   1c9d0:	mov	r0, #-2147483648	; 0x80000000
   1c9d4:	str	r3, [sp, #4]
   1c9d8:	bl	1e5b8 <__assert_fail@plt+0xd0dc>
   1c9dc:	ldr	r3, [sp, #4]
   1c9e0:	cmp	r7, r0
   1c9e4:	movle	r0, #0
   1c9e8:	movgt	r0, #1
   1c9ec:	b	1c908 <__assert_fail@plt+0xb42c>
   1c9f0:	mov	r1, r7
   1c9f4:	mvn	r0, #-2147483648	; 0x80000000
   1c9f8:	bl	1e5b8 <__assert_fail@plt+0xd0dc>
   1c9fc:	cmp	r6, r0
   1ca00:	movge	r0, #0
   1ca04:	movlt	r0, #1
   1ca08:	b	1c8a8 <__assert_fail@plt+0xb3cc>
   1ca0c:	cmn	r6, #1
   1ca10:	beq	1c8b0 <__assert_fail@plt+0xb3d4>
   1ca14:	mov	r1, r6
   1ca18:	mov	r0, #-2147483648	; 0x80000000
   1ca1c:	bl	1e5b8 <__assert_fail@plt+0xd0dc>
   1ca20:	cmp	r7, r0
   1ca24:	movle	r0, #0
   1ca28:	movgt	r0, #1
   1ca2c:	b	1c8a8 <__assert_fail@plt+0xb3cc>
   1ca30:	mov	r1, r7
   1ca34:	mvn	r0, #-2147483648	; 0x80000000
   1ca38:	str	r3, [sp, #4]
   1ca3c:	bl	1e5b8 <__assert_fail@plt+0xd0dc>
   1ca40:	ldr	r3, [sp, #4]
   1ca44:	cmp	r0, r4
   1ca48:	movle	r0, #0
   1ca4c:	movgt	r0, #1
   1ca50:	b	1c908 <__assert_fail@plt+0xb42c>
   1ca54:	push	{r4, lr}
   1ca58:	mov	r1, #1
   1ca5c:	bl	1dafc <__assert_fail@plt+0xc620>
   1ca60:	cmp	r0, #0
   1ca64:	popne	{r4, pc}
   1ca68:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1ca6c:	push	{r4, lr}
   1ca70:	mov	r1, #1
   1ca74:	bl	1dafc <__assert_fail@plt+0xc620>
   1ca78:	cmp	r0, #0
   1ca7c:	popne	{r4, pc}
   1ca80:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1ca84:	push	{r4, lr}
   1ca88:	bl	1dafc <__assert_fail@plt+0xc620>
   1ca8c:	cmp	r0, #0
   1ca90:	popne	{r4, pc}
   1ca94:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1ca98:	push	{r4, lr}
   1ca9c:	bl	1dafc <__assert_fail@plt+0xc620>
   1caa0:	cmp	r0, #0
   1caa4:	popne	{r4, pc}
   1caa8:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1caac:	push	{r4, r5, r6, lr}
   1cab0:	mov	r6, r0
   1cab4:	mov	r0, r1
   1cab8:	mov	r4, r1
   1cabc:	bl	1db44 <__assert_fail@plt+0xc668>
   1cac0:	subs	r5, r0, #0
   1cac4:	beq	1cadc <__assert_fail@plt+0xb600>
   1cac8:	mov	r2, r4
   1cacc:	mov	r1, r6
   1cad0:	bl	111e8 <memcpy@plt>
   1cad4:	mov	r0, r5
   1cad8:	pop	{r4, r5, r6, pc}
   1cadc:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1cae0:	push	{r4, r5, r6, lr}
   1cae4:	mov	r6, r0
   1cae8:	mov	r0, r1
   1caec:	mov	r4, r1
   1caf0:	bl	1db44 <__assert_fail@plt+0xc668>
   1caf4:	subs	r5, r0, #0
   1caf8:	beq	1cb10 <__assert_fail@plt+0xb634>
   1cafc:	mov	r2, r4
   1cb00:	mov	r1, r6
   1cb04:	bl	111e8 <memcpy@plt>
   1cb08:	mov	r0, r5
   1cb0c:	pop	{r4, r5, r6, pc}
   1cb10:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1cb14:	push	{r4, r5, r6, lr}
   1cb18:	mov	r6, r0
   1cb1c:	add	r0, r1, #1
   1cb20:	mov	r4, r1
   1cb24:	bl	1db44 <__assert_fail@plt+0xc668>
   1cb28:	subs	r5, r0, #0
   1cb2c:	beq	1cb4c <__assert_fail@plt+0xb670>
   1cb30:	mov	r3, #0
   1cb34:	mov	r1, r6
   1cb38:	strb	r3, [r5, r4]
   1cb3c:	mov	r2, r4
   1cb40:	bl	111e8 <memcpy@plt>
   1cb44:	mov	r0, r5
   1cb48:	pop	{r4, r5, r6, pc}
   1cb4c:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1cb50:	push	{r4, r5, r6, lr}
   1cb54:	mov	r6, r0
   1cb58:	bl	11380 <strlen@plt>
   1cb5c:	add	r4, r0, #1
   1cb60:	mov	r0, r4
   1cb64:	bl	1db44 <__assert_fail@plt+0xc668>
   1cb68:	subs	r5, r0, #0
   1cb6c:	beq	1cb84 <__assert_fail@plt+0xb6a8>
   1cb70:	mov	r2, r4
   1cb74:	mov	r1, r6
   1cb78:	bl	111e8 <memcpy@plt>
   1cb7c:	mov	r0, r5
   1cb80:	pop	{r4, r5, r6, pc}
   1cb84:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1cb88:	ldr	r3, [pc, #44]	; 1cbbc <__assert_fail@plt+0xb6e0>
   1cb8c:	push	{r4, lr}
   1cb90:	mov	r2, #5
   1cb94:	ldr	r1, [pc, #36]	; 1cbc0 <__assert_fail@plt+0xb6e4>
   1cb98:	mov	r0, #0
   1cb9c:	ldr	r4, [r3]
   1cba0:	bl	11230 <dcgettext@plt>
   1cba4:	ldr	r2, [pc, #24]	; 1cbc4 <__assert_fail@plt+0xb6e8>
   1cba8:	mov	r1, #0
   1cbac:	mov	r3, r0
   1cbb0:	mov	r0, r4
   1cbb4:	bl	112d8 <error@plt>
   1cbb8:	bl	114ac <abort@plt>
   1cbbc:	andeq	r2, r3, ip, ror r1
   1cbc0:	andeq	r0, r2, r4, asr #29
   1cbc4:	andeq	pc, r1, ip, lsl r5	; <UNPREDICTABLE>
   1cbc8:	cmp	r2, #36	; 0x24
   1cbcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbd0:	sub	sp, sp, #52	; 0x34
   1cbd4:	bhi	1d964 <__assert_fail@plt+0xc488>
   1cbd8:	cmp	r1, #0
   1cbdc:	mov	r6, r2
   1cbe0:	mov	sl, r0
   1cbe4:	mov	r5, r1
   1cbe8:	mov	r8, r3
   1cbec:	addeq	r5, sp, #44	; 0x2c
   1cbf0:	bl	113a4 <__errno_location@plt>
   1cbf4:	mov	r3, #0
   1cbf8:	str	r3, [r0]
   1cbfc:	mov	fp, r0
   1cc00:	bl	11368 <__ctype_b_loc@plt>
   1cc04:	ldrb	r3, [sl]
   1cc08:	mov	r2, sl
   1cc0c:	ldr	r0, [r0]
   1cc10:	b	1cc18 <__assert_fail@plt+0xb73c>
   1cc14:	ldrb	r3, [r2, #1]!
   1cc18:	lsl	r1, r3, #1
   1cc1c:	ldrh	r4, [r0, r1]
   1cc20:	ands	r4, r4, #8192	; 0x2000
   1cc24:	bne	1cc14 <__assert_fail@plt+0xb738>
   1cc28:	cmp	r3, #45	; 0x2d
   1cc2c:	bne	1cc40 <__assert_fail@plt+0xb764>
   1cc30:	mov	r4, #4
   1cc34:	mov	r0, r4
   1cc38:	add	sp, sp, #52	; 0x34
   1cc3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc40:	mov	r2, r6
   1cc44:	mov	r3, r4
   1cc48:	mov	r1, r5
   1cc4c:	mov	r0, sl
   1cc50:	bl	111f4 <__strtoull_internal@plt>
   1cc54:	ldr	r9, [r5]
   1cc58:	cmp	sl, r9
   1cc5c:	mov	r6, r0
   1cc60:	mov	r7, r1
   1cc64:	beq	1ccac <__assert_fail@plt+0xb7d0>
   1cc68:	ldr	r4, [fp]
   1cc6c:	cmp	r4, #0
   1cc70:	bne	1cc9c <__assert_fail@plt+0xb7c0>
   1cc74:	ldr	r3, [sp, #88]	; 0x58
   1cc78:	cmp	r3, #0
   1cc7c:	beq	1cc8c <__assert_fail@plt+0xb7b0>
   1cc80:	ldrb	sl, [r9]
   1cc84:	cmp	sl, #0
   1cc88:	bne	1cce0 <__assert_fail@plt+0xb804>
   1cc8c:	mov	r0, r4
   1cc90:	strd	r6, [r8]
   1cc94:	add	sp, sp, #52	; 0x34
   1cc98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc9c:	cmp	r4, #34	; 0x22
   1cca0:	bne	1cc30 <__assert_fail@plt+0xb754>
   1cca4:	mov	r4, #1
   1cca8:	b	1cc74 <__assert_fail@plt+0xb798>
   1ccac:	ldr	r3, [sp, #88]	; 0x58
   1ccb0:	cmp	r3, #0
   1ccb4:	beq	1cc30 <__assert_fail@plt+0xb754>
   1ccb8:	ldrb	sl, [r9]
   1ccbc:	cmp	sl, #0
   1ccc0:	beq	1cc30 <__assert_fail@plt+0xb754>
   1ccc4:	mov	r1, sl
   1ccc8:	mov	r0, r3
   1cccc:	bl	1138c <strchr@plt>
   1ccd0:	cmp	r0, #0
   1ccd4:	movne	r6, #1
   1ccd8:	movne	r7, #0
   1ccdc:	beq	1cc30 <__assert_fail@plt+0xb754>
   1cce0:	mov	r1, sl
   1cce4:	ldr	r0, [sp, #88]	; 0x58
   1cce8:	bl	1138c <strchr@plt>
   1ccec:	cmp	r0, #0
   1ccf0:	beq	1d850 <__assert_fail@plt+0xc374>
   1ccf4:	sub	r3, sl, #69	; 0x45
   1ccf8:	cmp	r3, #47	; 0x2f
   1ccfc:	ldrls	pc, [pc, r3, lsl #2]
   1cd00:	b	1cdf4 <__assert_fail@plt+0xb918>
   1cd04:	andeq	ip, r1, r4, asr #27
   1cd08:	strdeq	ip, [r1], -r4
   1cd0c:	andeq	ip, r1, r4, asr #27
   1cd10:	strdeq	ip, [r1], -r4
   1cd14:	strdeq	ip, [r1], -r4
   1cd18:	strdeq	ip, [r1], -r4
   1cd1c:	andeq	ip, r1, r4, asr #27
   1cd20:	strdeq	ip, [r1], -r4
   1cd24:	andeq	ip, r1, r4, asr #27
   1cd28:	strdeq	ip, [r1], -r4
   1cd2c:	strdeq	ip, [r1], -r4
   1cd30:	andeq	ip, r1, r4, asr #27
   1cd34:	strdeq	ip, [r1], -r4
   1cd38:	strdeq	ip, [r1], -r4
   1cd3c:	strdeq	ip, [r1], -r4
   1cd40:	andeq	ip, r1, r4, asr #27
   1cd44:	strdeq	ip, [r1], -r4
   1cd48:	strdeq	ip, [r1], -r4
   1cd4c:	strdeq	ip, [r1], -r4
   1cd50:	strdeq	ip, [r1], -r4
   1cd54:	andeq	ip, r1, r4, asr #27
   1cd58:	andeq	ip, r1, r4, asr #27
   1cd5c:	strdeq	ip, [r1], -r4
   1cd60:	strdeq	ip, [r1], -r4
   1cd64:	strdeq	ip, [r1], -r4
   1cd68:	strdeq	ip, [r1], -r4
   1cd6c:	strdeq	ip, [r1], -r4
   1cd70:	strdeq	ip, [r1], -r4
   1cd74:	strdeq	ip, [r1], -r4
   1cd78:	strdeq	ip, [r1], -r4
   1cd7c:	strdeq	ip, [r1], -r4
   1cd80:	strdeq	ip, [r1], -r4
   1cd84:	strdeq	ip, [r1], -r4
   1cd88:	strdeq	ip, [r1], -r4
   1cd8c:	andeq	ip, r1, r4, asr #27
   1cd90:	strdeq	ip, [r1], -r4
   1cd94:	strdeq	ip, [r1], -r4
   1cd98:	strdeq	ip, [r1], -r4
   1cd9c:	andeq	ip, r1, r4, asr #27
   1cda0:	strdeq	ip, [r1], -r4
   1cda4:	andeq	ip, r1, r4, asr #27
   1cda8:	strdeq	ip, [r1], -r4
   1cdac:	strdeq	ip, [r1], -r4
   1cdb0:	strdeq	ip, [r1], -r4
   1cdb4:	strdeq	ip, [r1], -r4
   1cdb8:	strdeq	ip, [r1], -r4
   1cdbc:	strdeq	ip, [r1], -r4
   1cdc0:	andeq	ip, r1, r4, asr #27
   1cdc4:	mov	r1, #48	; 0x30
   1cdc8:	ldr	r0, [sp, #88]	; 0x58
   1cdcc:	bl	1138c <strchr@plt>
   1cdd0:	cmp	r0, #0
   1cdd4:	beq	1d8e4 <__assert_fail@plt+0xc408>
   1cdd8:	ldrb	r3, [r9, #1]
   1cddc:	cmp	r3, #68	; 0x44
   1cde0:	beq	1d8c4 <__assert_fail@plt+0xc3e8>
   1cde4:	cmp	r3, #105	; 0x69
   1cde8:	beq	1d894 <__assert_fail@plt+0xc3b8>
   1cdec:	cmp	r3, #66	; 0x42
   1cdf0:	beq	1d8c4 <__assert_fail@plt+0xc3e8>
   1cdf4:	ldr	r3, [pc, #2948]	; 1d980 <__assert_fail@plt+0xc4a4>
   1cdf8:	mvn	r2, #0
   1cdfc:	mov	r1, #1024	; 0x400
   1ce00:	mov	lr, #0
   1ce04:	strd	r2, [sp]
   1ce08:	mov	r3, #1
   1ce0c:	str	r3, [sp, #12]
   1ce10:	sub	sl, sl, #66	; 0x42
   1ce14:	cmp	sl, #53	; 0x35
   1ce18:	ldrls	pc, [pc, sl, lsl #2]
   1ce1c:	b	1d850 <__assert_fail@plt+0xc374>
   1ce20:	andeq	sp, r1, r0, lsr #16
   1ce24:	andeq	sp, r1, r0, asr r8
   1ce28:	andeq	sp, r1, r0, asr r8
   1ce2c:	muleq	r1, ip, r6
   1ce30:	andeq	sp, r1, r0, asr r8
   1ce34:	ldrdeq	sp, [r1], -r8
   1ce38:	andeq	sp, r1, r0, asr r8
   1ce3c:	andeq	sp, r1, r0, asr r8
   1ce40:	andeq	sp, r1, r0, asr r8
   1ce44:	andeq	sp, r1, ip, asr r8
   1ce48:	andeq	sp, r1, r0, asr r8
   1ce4c:	strdeq	ip, [r1], -r8
   1ce50:	andeq	sp, r1, r0, asr r8
   1ce54:	andeq	sp, r1, r0, asr r8
   1ce58:	andeq	ip, r1, r4, lsl #31
   1ce5c:	andeq	sp, r1, r0, asr r8
   1ce60:	andeq	sp, r1, r0, asr r8
   1ce64:	andeq	sp, r1, r0, asr r8
   1ce68:	andeq	sp, r1, r4, lsl #6
   1ce6c:	andeq	sp, r1, r0, asr r8
   1ce70:	andeq	sp, r1, r0, asr r8
   1ce74:	andeq	sp, r1, r0, asr r8
   1ce78:	andeq	sp, r1, r0, asr r8
   1ce7c:	ldrdeq	sp, [r1], -ip
   1ce80:	andeq	sp, r1, r8, lsr r4
   1ce84:	andeq	sp, r1, r0, asr r8
   1ce88:	andeq	sp, r1, r0, asr r8
   1ce8c:	andeq	sp, r1, r0, asr r8
   1ce90:	andeq	sp, r1, r0, asr r8
   1ce94:	andeq	sp, r1, r0, asr r8
   1ce98:	andeq	sp, r1, r0, asr r8
   1ce9c:	andeq	sp, r1, r0, asr r8
   1cea0:	andeq	sp, r1, r8, lsl #8
   1cea4:	andeq	sp, r1, r0, lsl #8
   1cea8:	andeq	sp, r1, r0, asr r8
   1ceac:	andeq	sp, r1, r0, asr r8
   1ceb0:	andeq	sp, r1, r0, asr r8
   1ceb4:	ldrdeq	sp, [r1], -r8
   1ceb8:	andeq	sp, r1, r0, asr r8
   1cebc:	andeq	sp, r1, r0, asr r8
   1cec0:	andeq	sp, r1, r0, asr r8
   1cec4:	andeq	sp, r1, ip, asr r8
   1cec8:	andeq	sp, r1, r0, asr r8
   1cecc:	strdeq	ip, [r1], -r8
   1ced0:	andeq	sp, r1, r0, asr r8
   1ced4:	andeq	sp, r1, r0, asr r8
   1ced8:	andeq	sp, r1, r0, asr r8
   1cedc:	andeq	sp, r1, r0, asr r8
   1cee0:	andeq	sp, r1, r0, asr r8
   1cee4:	andeq	sp, r1, r0, asr r8
   1cee8:	andeq	sp, r1, r4, lsl #6
   1ceec:	andeq	sp, r1, r0, asr r8
   1cef0:	andeq	sp, r1, r0, asr r8
   1cef4:	andeq	sp, r1, r4, ror #7
   1cef8:	mul	r0, r6, lr
   1cefc:	ldrd	sl, [sp]
   1cf00:	umull	r2, r3, r6, r1
   1cf04:	mla	r0, r1, r7, r0
   1cf08:	cmp	r7, fp
   1cf0c:	cmpeq	r6, sl
   1cf10:	add	r3, r0, r3
   1cf14:	mvnhi	r3, #0
   1cf18:	mvnhi	r2, #0
   1cf1c:	mul	r6, r1, r3
   1cf20:	umull	r0, r1, r1, r2
   1cf24:	mla	lr, lr, r2, r6
   1cf28:	ldrd	r6, [sp]
   1cf2c:	movhi	ip, #1
   1cf30:	movls	ip, #0
   1cf34:	cmp	r7, r3
   1cf38:	cmpeq	r6, r2
   1cf3c:	mvncc	r0, #0
   1cf40:	add	r1, lr, r1
   1cf44:	mov	sl, r6
   1cf48:	movcc	r1, r0
   1cf4c:	mov	fp, r7
   1cf50:	cmp	fp, r3
   1cf54:	cmpeq	sl, r2
   1cf58:	mov	r6, r0
   1cf5c:	mov	r7, r1
   1cf60:	orrcc	ip, ip, #1
   1cf64:	ldr	r2, [sp, #12]
   1cf68:	orr	r4, r4, ip
   1cf6c:	add	r3, r9, r2
   1cf70:	str	r3, [r5]
   1cf74:	ldrb	r3, [r9, r2]
   1cf78:	cmp	r3, #0
   1cf7c:	orrne	r4, r4, #2
   1cf80:	b	1cc8c <__assert_fail@plt+0xb7b0>
   1cf84:	ldrd	sl, [sp]
   1cf88:	umull	r2, r3, r6, r1
   1cf8c:	mul	r0, r6, lr
   1cf90:	cmp	r7, fp
   1cf94:	cmpeq	r6, sl
   1cf98:	mvnhi	r2, #0
   1cf9c:	mla	r0, r1, r7, r0
   1cfa0:	umull	sl, fp, r2, r1
   1cfa4:	add	r3, r0, r3
   1cfa8:	mul	r0, lr, r2
   1cfac:	mvnhi	r3, #0
   1cfb0:	strd	sl, [sp, #16]
   1cfb4:	ldrd	sl, [sp]
   1cfb8:	mla	r0, r1, r3, r0
   1cfbc:	ldr	ip, [sp, #20]
   1cfc0:	cmp	r3, fp
   1cfc4:	add	r0, r0, ip
   1cfc8:	cmpeq	r2, sl
   1cfcc:	str	r0, [sp, #20]
   1cfd0:	bls	1cfe8 <__assert_fail@plt+0xbb0c>
   1cfd4:	mvn	sl, #0
   1cfd8:	mvn	fp, #0
   1cfdc:	strd	sl, [sp, #16]
   1cfe0:	ldr	r0, [sp, #20]
   1cfe4:	ldrd	sl, [sp]
   1cfe8:	cmp	r7, fp
   1cfec:	cmpeq	r6, sl
   1cff0:	mul	r0, r1, r0
   1cff4:	ldrd	r6, [sp, #16]
   1cff8:	mla	ip, lr, r6, r0
   1cffc:	mov	r0, r6
   1d000:	movhi	r0, #1
   1d004:	movls	r0, #0
   1d008:	cmp	r3, fp
   1d00c:	cmpeq	r2, sl
   1d010:	ldrd	r2, [sp, #16]
   1d014:	umull	r6, r7, r1, r6
   1d018:	orrhi	r0, r0, #1
   1d01c:	cmp	fp, r3
   1d020:	cmpeq	sl, r2
   1d024:	add	r7, ip, r7
   1d028:	bcc	1d934 <__assert_fail@plt+0xc458>
   1d02c:	mov	sl, r6
   1d030:	mov	fp, r7
   1d034:	strd	r6, [sp, #24]
   1d038:	mul	r3, r1, fp
   1d03c:	umull	r6, r7, r1, sl
   1d040:	mla	ip, lr, sl, r3
   1d044:	ldrd	sl, [sp]
   1d048:	ldrd	r2, [sp, #16]
   1d04c:	add	r7, ip, r7
   1d050:	cmp	fp, r3
   1d054:	cmpeq	sl, r2
   1d058:	mov	r3, fp
   1d05c:	mov	r2, sl
   1d060:	ldrd	sl, [sp, #24]
   1d064:	orrcc	r0, r0, #1
   1d068:	str	r0, [sp, #16]
   1d06c:	cmp	r3, fp
   1d070:	cmpeq	r2, sl
   1d074:	bcs	1d5cc <__assert_fail@plt+0xc0f0>
   1d078:	mvn	r2, #0
   1d07c:	mvn	r3, #0
   1d080:	mul	ip, lr, r2
   1d084:	ldrd	sl, [sp]
   1d088:	mla	ip, r1, r3, ip
   1d08c:	umull	r6, r7, r2, r1
   1d090:	ldrd	r0, [sp, #24]
   1d094:	add	r7, ip, r7
   1d098:	cmp	fp, r1
   1d09c:	ldr	r1, [sp, #16]
   1d0a0:	cmpeq	sl, r0
   1d0a4:	orrcc	r1, r1, #1
   1d0a8:	cmp	r3, fp
   1d0ac:	cmpeq	r2, sl
   1d0b0:	mvnhi	r0, #0
   1d0b4:	movls	ip, r7
   1d0b8:	movhi	ip, r0
   1d0bc:	movls	r0, r6
   1d0c0:	cmp	r3, fp
   1d0c4:	cmpeq	r2, sl
   1d0c8:	mov	r7, ip
   1d0cc:	mov	r6, r0
   1d0d0:	movls	ip, r1
   1d0d4:	orrhi	ip, r1, #1
   1d0d8:	b	1cf64 <__assert_fail@plt+0xba88>
   1d0dc:	ldrd	sl, [sp]
   1d0e0:	umull	r2, r3, r6, r1
   1d0e4:	mul	r0, r6, lr
   1d0e8:	cmp	r7, fp
   1d0ec:	cmpeq	r6, sl
   1d0f0:	mvnhi	r2, #0
   1d0f4:	mla	r0, r1, r7, r0
   1d0f8:	umull	sl, fp, r2, r1
   1d0fc:	add	r3, r0, r3
   1d100:	mul	r0, lr, r2
   1d104:	mvnhi	r3, #0
   1d108:	strd	sl, [sp, #16]
   1d10c:	ldrd	sl, [sp]
   1d110:	mla	r0, r1, r3, r0
   1d114:	ldr	ip, [sp, #20]
   1d118:	cmp	r3, fp
   1d11c:	add	r0, r0, ip
   1d120:	cmpeq	r2, sl
   1d124:	str	r0, [sp, #20]
   1d128:	mvnhi	sl, #0
   1d12c:	mvnhi	fp, #0
   1d130:	strdhi	sl, [sp, #16]
   1d134:	ldrdhi	sl, [sp]
   1d138:	ldr	r0, [sp, #16]
   1d13c:	cmp	r3, fp
   1d140:	ldr	r3, [sp, #20]
   1d144:	mul	r0, lr, r0
   1d148:	cmpeq	r2, sl
   1d14c:	mla	r0, r1, r3, r0
   1d150:	ldr	r3, [sp, #16]
   1d154:	umull	r2, r3, r3, r1
   1d158:	strd	r2, [sp, #24]
   1d15c:	movhi	r3, #1
   1d160:	movls	r3, #0
   1d164:	cmp	r7, fp
   1d168:	cmpeq	r6, sl
   1d16c:	ldrd	r6, [sp, #16]
   1d170:	ldr	r2, [sp, #28]
   1d174:	movls	ip, r3
   1d178:	orrhi	ip, r3, #1
   1d17c:	cmp	r7, fp
   1d180:	add	r2, r0, r2
   1d184:	cmpeq	r6, sl
   1d188:	str	r2, [sp, #28]
   1d18c:	mvnhi	r2, #0
   1d190:	mvnhi	r3, #0
   1d194:	strdhi	r2, [sp, #24]
   1d198:	ldrd	r6, [sp, #24]
   1d19c:	mul	r2, r1, r7
   1d1a0:	umull	sl, fp, r1, r6
   1d1a4:	mla	r3, lr, r6, r2
   1d1a8:	ldrd	r6, [sp]
   1d1ac:	str	r3, [sp, #32]
   1d1b0:	ldrd	r2, [sp, #16]
   1d1b4:	cmp	r3, r7
   1d1b8:	cmpeq	r2, r6
   1d1bc:	ldrd	r2, [sp, #24]
   1d1c0:	orrhi	ip, ip, #1
   1d1c4:	cmp	r3, r7
   1d1c8:	ldr	r3, [sp, #32]
   1d1cc:	cmpeq	r2, r6
   1d1d0:	add	r2, r3, fp
   1d1d4:	mov	fp, r2
   1d1d8:	bhi	1d91c <__assert_fail@plt+0xc440>
   1d1dc:	strd	sl, [sp, #16]
   1d1e0:	mul	r2, r1, fp
   1d1e4:	umull	r6, r7, r1, sl
   1d1e8:	mla	r3, lr, sl, r2
   1d1ec:	ldrd	sl, [sp]
   1d1f0:	str	r3, [sp, #32]
   1d1f4:	ldrd	r2, [sp, #24]
   1d1f8:	cmp	r3, fp
   1d1fc:	cmpeq	r2, sl
   1d200:	ldrd	r2, [sp, #16]
   1d204:	orrhi	ip, ip, #1
   1d208:	cmp	fp, r3
   1d20c:	ldr	r3, [sp, #32]
   1d210:	cmpeq	sl, r2
   1d214:	add	r2, r3, r7
   1d218:	mov	r7, r2
   1d21c:	mvncc	r7, #0
   1d220:	mvncc	r6, #0
   1d224:	mul	r2, r1, r7
   1d228:	mov	sl, r6
   1d22c:	strd	r6, [sp, #24]
   1d230:	mla	r0, lr, sl, r2
   1d234:	ldrd	r2, [sp, #16]
   1d238:	ldrd	sl, [sp]
   1d23c:	umull	r6, r7, r1, r6
   1d240:	cmp	fp, r3
   1d244:	cmpeq	sl, r2
   1d248:	mov	r3, fp
   1d24c:	mov	r2, sl
   1d250:	ldrd	sl, [sp, #24]
   1d254:	orrcc	ip, ip, #1
   1d258:	add	r7, r0, r7
   1d25c:	cmp	r3, fp
   1d260:	cmpeq	r2, sl
   1d264:	mvncc	r6, #0
   1d268:	mvncc	r7, #0
   1d26c:	umull	sl, fp, r1, r6
   1d270:	mul	r3, r1, r7
   1d274:	strd	sl, [sp, #16]
   1d278:	mla	r0, lr, r6, r3
   1d27c:	ldrd	sl, [sp, #24]
   1d280:	ldrd	r2, [sp]
   1d284:	cmp	r3, fp
   1d288:	cmpeq	r2, sl
   1d28c:	orrcc	ip, ip, #1
   1d290:	cmp	r3, r7
   1d294:	ldr	r3, [sp, #20]
   1d298:	cmpeq	r2, r6
   1d29c:	add	r3, r0, r3
   1d2a0:	str	r3, [sp, #20]
   1d2a4:	mvncc	r2, #0
   1d2a8:	mvncc	r3, #0
   1d2ac:	ldrdcs	r2, [sp, #16]
   1d2b0:	ldrd	sl, [sp]
   1d2b4:	mul	r0, r1, r3
   1d2b8:	cmp	fp, r7
   1d2bc:	str	r0, [sp, #16]
   1d2c0:	cmpeq	sl, r6
   1d2c4:	ldr	r6, [sp, #16]
   1d2c8:	umull	r0, r1, r1, r2
   1d2cc:	mla	lr, lr, r2, r6
   1d2d0:	orrcc	ip, ip, #1
   1d2d4:	cmp	r3, fp
   1d2d8:	cmpeq	r2, sl
   1d2dc:	add	r1, lr, r1
   1d2e0:	bls	1d2ec <__assert_fail@plt+0xbe10>
   1d2e4:	mvn	r0, #0
   1d2e8:	mov	r1, r0
   1d2ec:	cmp	r3, fp
   1d2f0:	cmpeq	r2, sl
   1d2f4:	mov	r6, r0
   1d2f8:	mov	r7, r1
   1d2fc:	orrhi	ip, ip, #1
   1d300:	b	1cf64 <__assert_fail@plt+0xba88>
   1d304:	ldrd	sl, [sp]
   1d308:	umull	r2, r3, r6, r1
   1d30c:	mul	r0, r6, lr
   1d310:	cmp	r7, fp
   1d314:	cmpeq	r6, sl
   1d318:	mvnhi	r2, #0
   1d31c:	mla	r0, r1, r7, r0
   1d320:	umull	sl, fp, r1, r2
   1d324:	add	r3, r0, r3
   1d328:	mvnhi	r3, #0
   1d32c:	strd	sl, [sp, #16]
   1d330:	mul	r0, r1, r3
   1d334:	ldrd	sl, [sp]
   1d338:	mla	r0, lr, r2, r0
   1d33c:	ldr	ip, [sp, #20]
   1d340:	cmp	fp, r3
   1d344:	add	r0, r0, ip
   1d348:	cmpeq	sl, r2
   1d34c:	str	r0, [sp, #20]
   1d350:	mvncc	sl, #0
   1d354:	mvncc	fp, #0
   1d358:	strdcc	sl, [sp, #16]
   1d35c:	ldrdcc	sl, [sp]
   1d360:	ldr	r0, [sp, #16]
   1d364:	cmp	fp, r3
   1d368:	cmpeq	sl, r2
   1d36c:	mul	r0, lr, r0
   1d370:	ldr	r2, [sp, #20]
   1d374:	ldr	r3, [sp, #16]
   1d378:	movcc	ip, #1
   1d37c:	movcs	ip, #0
   1d380:	cmp	r7, fp
   1d384:	cmpeq	r6, sl
   1d388:	ldrd	r6, [sp, #16]
   1d38c:	mla	r0, r1, r2, r0
   1d390:	umull	r2, r3, r3, r1
   1d394:	orrhi	ip, ip, #1
   1d398:	cmp	r7, fp
   1d39c:	cmpeq	r6, sl
   1d3a0:	add	r3, r0, r3
   1d3a4:	mvnhi	r3, #0
   1d3a8:	mvnhi	r2, #0
   1d3ac:	mul	r0, r1, r3
   1d3b0:	cmp	r7, fp
   1d3b4:	str	r0, [sp, #24]
   1d3b8:	cmpeq	r6, sl
   1d3bc:	ldr	r6, [sp, #24]
   1d3c0:	umull	r0, r1, r1, r2
   1d3c4:	mla	lr, lr, r2, r6
   1d3c8:	orrhi	ip, ip, #1
   1d3cc:	cmp	fp, r3
   1d3d0:	cmpeq	sl, r2
   1d3d4:	mvncc	r0, #0
   1d3d8:	add	r1, lr, r1
   1d3dc:	movcc	r1, r0
   1d3e0:	b	1cf50 <__assert_fail@plt+0xba74>
   1d3e4:	cmp	r6, #0
   1d3e8:	sbcs	r3, r7, #0
   1d3ec:	blt	1d884 <__assert_fail@plt+0xc3a8>
   1d3f0:	adds	r6, r6, r6
   1d3f4:	adc	r7, r7, r7
   1d3f8:	mov	ip, #0
   1d3fc:	b	1cf64 <__assert_fail@plt+0xba88>
   1d400:	mov	ip, #0
   1d404:	b	1cf64 <__assert_fail@plt+0xba88>
   1d408:	ldr	r3, [pc, #1396]	; 1d984 <__assert_fail@plt+0xc4a8>
   1d40c:	mvn	r2, #0
   1d410:	cmp	r7, r3
   1d414:	cmpeq	r6, r2
   1d418:	bhi	1d884 <__assert_fail@plt+0xc3a8>
   1d41c:	lsl	r3, r7, #9
   1d420:	orr	r3, r3, r6, lsr #23
   1d424:	lsl	r2, r6, #9
   1d428:	mov	r6, r2
   1d42c:	mov	r7, r3
   1d430:	mov	ip, #0
   1d434:	b	1cf64 <__assert_fail@plt+0xba88>
   1d438:	ldrd	sl, [sp]
   1d43c:	umull	r2, r3, r6, r1
   1d440:	mul	r0, r6, lr
   1d444:	cmp	r7, fp
   1d448:	cmpeq	r6, sl
   1d44c:	mvnhi	r2, #0
   1d450:	mla	r0, r1, r7, r0
   1d454:	umull	sl, fp, r2, r1
   1d458:	add	r3, r0, r3
   1d45c:	mul	r0, lr, r2
   1d460:	mvnhi	r3, #0
   1d464:	strd	sl, [sp, #16]
   1d468:	ldrd	sl, [sp]
   1d46c:	mla	r0, r1, r3, r0
   1d470:	ldr	ip, [sp, #20]
   1d474:	cmp	r3, fp
   1d478:	add	r0, r0, ip
   1d47c:	cmpeq	r2, sl
   1d480:	str	r0, [sp, #20]
   1d484:	mvnhi	sl, #0
   1d488:	mvnhi	fp, #0
   1d48c:	strdhi	sl, [sp, #16]
   1d490:	ldrdhi	sl, [sp]
   1d494:	ldr	r0, [sp, #16]
   1d498:	cmp	r3, fp
   1d49c:	ldr	r3, [sp, #20]
   1d4a0:	mul	r0, lr, r0
   1d4a4:	cmpeq	r2, sl
   1d4a8:	mla	r0, r1, r3, r0
   1d4ac:	ldr	r3, [sp, #16]
   1d4b0:	umull	r2, r3, r3, r1
   1d4b4:	strd	r2, [sp, #24]
   1d4b8:	movhi	r3, #1
   1d4bc:	movls	r3, #0
   1d4c0:	cmp	r7, fp
   1d4c4:	cmpeq	r6, sl
   1d4c8:	ldrd	r6, [sp, #16]
   1d4cc:	ldr	r2, [sp, #28]
   1d4d0:	movls	ip, r3
   1d4d4:	orrhi	ip, r3, #1
   1d4d8:	cmp	r7, fp
   1d4dc:	add	r2, r0, r2
   1d4e0:	cmpeq	r6, sl
   1d4e4:	str	r2, [sp, #28]
   1d4e8:	mvnhi	r2, #0
   1d4ec:	mvnhi	r3, #0
   1d4f0:	strdhi	r2, [sp, #24]
   1d4f4:	ldrd	r6, [sp, #24]
   1d4f8:	mul	r2, lr, r6
   1d4fc:	umull	sl, fp, r6, r1
   1d500:	mla	r3, r1, r7, r2
   1d504:	ldrd	r6, [sp]
   1d508:	str	r3, [sp, #32]
   1d50c:	ldrd	r2, [sp, #16]
   1d510:	cmp	r3, r7
   1d514:	cmpeq	r2, r6
   1d518:	ldrd	r2, [sp, #24]
   1d51c:	orrhi	ip, ip, #1
   1d520:	cmp	r3, r7
   1d524:	ldr	r3, [sp, #32]
   1d528:	cmpeq	r2, r6
   1d52c:	add	r2, r3, fp
   1d530:	mov	fp, r2
   1d534:	bhi	1d94c <__assert_fail@plt+0xc470>
   1d538:	strd	sl, [sp, #16]
   1d53c:	mul	r2, lr, sl
   1d540:	umull	r6, r7, sl, r1
   1d544:	mla	r3, r1, fp, r2
   1d548:	ldrd	sl, [sp]
   1d54c:	str	r3, [sp, #32]
   1d550:	ldrd	r2, [sp, #24]
   1d554:	cmp	r3, fp
   1d558:	cmpeq	r2, sl
   1d55c:	ldrd	r2, [sp, #16]
   1d560:	orrhi	ip, ip, #1
   1d564:	cmp	r3, fp
   1d568:	ldr	r3, [sp, #32]
   1d56c:	cmpeq	r2, sl
   1d570:	add	r2, r3, r7
   1d574:	mov	r7, r2
   1d578:	mvnhi	r7, #0
   1d57c:	mvnhi	r6, #0
   1d580:	mul	r2, r1, r7
   1d584:	mov	sl, r6
   1d588:	strd	r6, [sp, #24]
   1d58c:	mla	r0, lr, sl, r2
   1d590:	ldrd	sl, [sp]
   1d594:	ldrd	r2, [sp, #16]
   1d598:	umull	r6, r7, r1, r6
   1d59c:	cmp	r3, fp
   1d5a0:	cmpeq	r2, sl
   1d5a4:	mov	r3, ip
   1d5a8:	orrhi	r3, r3, #1
   1d5ac:	mov	r2, sl
   1d5b0:	str	r3, [sp, #16]
   1d5b4:	mov	r3, fp
   1d5b8:	ldrd	sl, [sp, #24]
   1d5bc:	add	r7, r0, r7
   1d5c0:	cmp	r3, fp
   1d5c4:	cmpeq	r2, sl
   1d5c8:	bcc	1d078 <__assert_fail@plt+0xbb9c>
   1d5cc:	mov	r2, r6
   1d5d0:	mov	r3, r7
   1d5d4:	b	1d080 <__assert_fail@plt+0xbba4>
   1d5d8:	ldrd	sl, [sp]
   1d5dc:	umull	r2, r3, r6, r1
   1d5e0:	mul	r0, r6, lr
   1d5e4:	cmp	r7, fp
   1d5e8:	cmpeq	r6, sl
   1d5ec:	mvnhi	r2, #0
   1d5f0:	mla	r0, r1, r7, r0
   1d5f4:	umull	sl, fp, r2, r1
   1d5f8:	add	r3, r0, r3
   1d5fc:	mul	r0, lr, r2
   1d600:	mvnhi	r3, #0
   1d604:	strd	sl, [sp, #16]
   1d608:	ldrd	sl, [sp]
   1d60c:	mla	r0, r1, r3, r0
   1d610:	ldr	ip, [sp, #20]
   1d614:	cmp	r3, fp
   1d618:	add	r0, r0, ip
   1d61c:	cmpeq	r2, sl
   1d620:	str	r0, [sp, #20]
   1d624:	mvnhi	sl, #0
   1d628:	mvnhi	fp, #0
   1d62c:	strdhi	sl, [sp, #16]
   1d630:	ldrdhi	sl, [sp]
   1d634:	ldr	r0, [sp, #16]
   1d638:	cmp	r3, fp
   1d63c:	ldr	ip, [sp, #20]
   1d640:	mul	r0, lr, r0
   1d644:	ldr	r3, [sp, #16]
   1d648:	cmpeq	r2, sl
   1d64c:	mla	r0, r1, ip, r0
   1d650:	umull	r2, r3, r3, r1
   1d654:	movhi	r1, #1
   1d658:	movls	r1, #0
   1d65c:	cmp	r7, fp
   1d660:	cmpeq	r6, sl
   1d664:	ldrd	r6, [sp, #16]
   1d668:	movls	ip, r1
   1d66c:	orrhi	ip, r1, #1
   1d670:	cmp	r7, fp
   1d674:	cmpeq	r6, sl
   1d678:	mvnhi	r2, #0
   1d67c:	add	r3, r0, r3
   1d680:	movhi	r3, r2
   1d684:	cmp	r7, fp
   1d688:	cmpeq	r6, sl
   1d68c:	mov	r7, r3
   1d690:	mov	r6, r2
   1d694:	orrhi	ip, ip, #1
   1d698:	b	1cf64 <__assert_fail@plt+0xba88>
   1d69c:	ldrd	sl, [sp]
   1d6a0:	umull	r2, r3, r6, r1
   1d6a4:	mul	r0, r6, lr
   1d6a8:	cmp	r7, fp
   1d6ac:	cmpeq	r6, sl
   1d6b0:	mvnhi	r2, #0
   1d6b4:	mla	r0, r1, r7, r0
   1d6b8:	umull	sl, fp, r1, r2
   1d6bc:	add	r3, r0, r3
   1d6c0:	mvnhi	r3, #0
   1d6c4:	strd	sl, [sp, #16]
   1d6c8:	mul	r0, r1, r3
   1d6cc:	ldrd	sl, [sp]
   1d6d0:	mla	r0, lr, r2, r0
   1d6d4:	ldr	ip, [sp, #20]
   1d6d8:	cmp	fp, r3
   1d6dc:	add	r0, r0, ip
   1d6e0:	cmpeq	sl, r2
   1d6e4:	str	r0, [sp, #20]
   1d6e8:	mvncc	sl, #0
   1d6ec:	mvncc	fp, #0
   1d6f0:	strdcc	sl, [sp, #16]
   1d6f4:	ldrdcc	sl, [sp]
   1d6f8:	ldr	r0, [sp, #16]
   1d6fc:	cmp	fp, r3
   1d700:	ldr	r3, [sp, #20]
   1d704:	mul	r0, lr, r0
   1d708:	cmpeq	sl, r2
   1d70c:	mla	r0, r1, r3, r0
   1d710:	ldr	r3, [sp, #16]
   1d714:	umull	r2, r3, r3, r1
   1d718:	strd	r2, [sp, #24]
   1d71c:	movcc	r3, #1
   1d720:	movcs	r3, #0
   1d724:	cmp	r7, fp
   1d728:	cmpeq	r6, sl
   1d72c:	movls	ip, r3
   1d730:	orrhi	ip, r3, #1
   1d734:	ldrd	r2, [sp, #16]
   1d738:	cmp	r3, fp
   1d73c:	ldr	r3, [sp, #28]
   1d740:	cmpeq	r2, sl
   1d744:	add	r3, r0, r3
   1d748:	str	r3, [sp, #28]
   1d74c:	bhi	1d904 <__assert_fail@plt+0xc428>
   1d750:	ldrd	r2, [sp, #24]
   1d754:	mov	sl, r2
   1d758:	mov	fp, r3
   1d75c:	mul	r2, lr, sl
   1d760:	umull	r6, r7, sl, r1
   1d764:	mla	r0, r1, fp, r2
   1d768:	ldrd	r2, [sp]
   1d76c:	add	r7, r0, r7
   1d770:	mov	sl, r2
   1d774:	mov	fp, r3
   1d778:	strd	r2, [sp, #32]
   1d77c:	ldrd	r2, [sp, #16]
   1d780:	cmp	r3, fp
   1d784:	cmpeq	r2, sl
   1d788:	ldrd	r2, [sp, #32]
   1d78c:	ldrd	sl, [sp, #24]
   1d790:	orrhi	ip, ip, #1
   1d794:	cmp	fp, r3
   1d798:	cmpeq	sl, r2
   1d79c:	mvnhi	r6, #0
   1d7a0:	mvnhi	r7, #0
   1d7a4:	umull	sl, fp, r6, r1
   1d7a8:	mul	r3, lr, r6
   1d7ac:	strd	sl, [sp, #16]
   1d7b0:	mla	r0, r1, r7, r3
   1d7b4:	ldrd	sl, [sp, #24]
   1d7b8:	ldrd	r2, [sp]
   1d7bc:	cmp	fp, r3
   1d7c0:	cmpeq	sl, r2
   1d7c4:	orrhi	ip, ip, #1
   1d7c8:	cmp	r7, r3
   1d7cc:	ldr	r3, [sp, #20]
   1d7d0:	cmpeq	r6, r2
   1d7d4:	add	r3, r0, r3
   1d7d8:	str	r3, [sp, #20]
   1d7dc:	mvnhi	r2, #0
   1d7e0:	mvnhi	r3, #0
   1d7e4:	ldrdls	r2, [sp, #16]
   1d7e8:	ldrd	sl, [sp]
   1d7ec:	mul	r0, r1, r3
   1d7f0:	cmp	r7, fp
   1d7f4:	str	r0, [sp, #16]
   1d7f8:	cmpeq	r6, sl
   1d7fc:	ldr	r6, [sp, #16]
   1d800:	umull	r0, r1, r1, r2
   1d804:	mla	lr, lr, r2, r6
   1d808:	orrhi	ip, ip, #1
   1d80c:	cmp	r3, fp
   1d810:	cmpeq	r2, sl
   1d814:	add	r1, lr, r1
   1d818:	bls	1d2ec <__assert_fail@plt+0xbe10>
   1d81c:	b	1d2e4 <__assert_fail@plt+0xbe08>
   1d820:	ldr	r3, [pc, #344]	; 1d980 <__assert_fail@plt+0xc4a4>
   1d824:	mvn	r2, #0
   1d828:	cmp	r7, r3
   1d82c:	cmpeq	r6, r2
   1d830:	bhi	1d884 <__assert_fail@plt+0xc3a8>
   1d834:	lsl	r3, r7, #10
   1d838:	orr	r3, r3, r6, lsr #22
   1d83c:	lsl	r2, r6, #10
   1d840:	mov	r6, r2
   1d844:	mov	r7, r3
   1d848:	mov	ip, #0
   1d84c:	b	1cf64 <__assert_fail@plt+0xba88>
   1d850:	strd	r6, [r8]
   1d854:	orr	r4, r4, #2
   1d858:	b	1cc34 <__assert_fail@plt+0xb758>
   1d85c:	ldrd	r2, [sp]
   1d860:	cmp	r7, r3
   1d864:	cmpeq	r6, r2
   1d868:	bhi	1d884 <__assert_fail@plt+0xc3a8>
   1d86c:	mul	r3, r6, lr
   1d870:	mov	ip, #0
   1d874:	mla	r3, r1, r7, r3
   1d878:	umull	r6, r7, r6, r1
   1d87c:	add	r7, r3, r7
   1d880:	b	1cf64 <__assert_fail@plt+0xba88>
   1d884:	mvn	r6, #0
   1d888:	mvn	r7, #0
   1d88c:	mov	ip, #1
   1d890:	b	1cf64 <__assert_fail@plt+0xba88>
   1d894:	ldrb	r3, [r9, #2]
   1d898:	mvn	r2, #0
   1d89c:	mov	r1, #1024	; 0x400
   1d8a0:	cmp	r3, #66	; 0x42
   1d8a4:	ldr	r3, [pc, #212]	; 1d980 <__assert_fail@plt+0xc4a4>
   1d8a8:	mov	lr, #0
   1d8ac:	strd	r2, [sp]
   1d8b0:	moveq	r3, #3
   1d8b4:	streq	r3, [sp, #12]
   1d8b8:	movne	r3, #1
   1d8bc:	strne	r3, [sp, #12]
   1d8c0:	b	1ce10 <__assert_fail@plt+0xb934>
   1d8c4:	add	r3, pc, #172	; 0xac
   1d8c8:	ldrd	r2, [r3]
   1d8cc:	mov	r1, #1000	; 0x3e8
   1d8d0:	mov	lr, #0
   1d8d4:	strd	r2, [sp]
   1d8d8:	mov	r3, #2
   1d8dc:	str	r3, [sp, #12]
   1d8e0:	b	1ce10 <__assert_fail@plt+0xb934>
   1d8e4:	ldr	r3, [pc, #148]	; 1d980 <__assert_fail@plt+0xc4a4>
   1d8e8:	mvn	r2, #0
   1d8ec:	mov	lr, r0
   1d8f0:	strd	r2, [sp]
   1d8f4:	mov	r3, #1
   1d8f8:	mov	r1, #1024	; 0x400
   1d8fc:	str	r3, [sp, #12]
   1d900:	b	1ce10 <__assert_fail@plt+0xb934>
   1d904:	mvn	r2, #0
   1d908:	mvn	r3, #0
   1d90c:	mov	sl, r2
   1d910:	strd	r2, [sp, #24]
   1d914:	mov	fp, r3
   1d918:	b	1d75c <__assert_fail@plt+0xc280>
   1d91c:	mvn	r2, #0
   1d920:	mvn	r3, #0
   1d924:	mov	sl, r2
   1d928:	strd	r2, [sp, #16]
   1d92c:	mov	fp, r3
   1d930:	b	1d1e0 <__assert_fail@plt+0xbd04>
   1d934:	mvn	r2, #0
   1d938:	mvn	r3, #0
   1d93c:	mov	sl, r2
   1d940:	strd	r2, [sp, #24]
   1d944:	mov	fp, r3
   1d948:	b	1d038 <__assert_fail@plt+0xbb5c>
   1d94c:	mvn	r2, #0
   1d950:	mvn	r3, #0
   1d954:	mov	sl, r2
   1d958:	strd	r2, [sp, #16]
   1d95c:	mov	fp, r3
   1d960:	b	1d53c <__assert_fail@plt+0xc060>
   1d964:	ldr	r3, [pc, #28]	; 1d988 <__assert_fail@plt+0xc4ac>
   1d968:	mov	r2, #85	; 0x55
   1d96c:	ldr	r1, [pc, #24]	; 1d98c <__assert_fail@plt+0xc4b0>
   1d970:	ldr	r0, [pc, #24]	; 1d990 <__assert_fail@plt+0xc4b4>
   1d974:	bl	114dc <__assert_fail@plt>
   1d978:	blmi	ff1c793c <opterr@@GLIBC_2.4+0xff19575c>
   1d97c:	subeq	r8, r1, r7, lsr r9
   1d980:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1d984:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1d988:	ldrdeq	r0, [r2], -r8
   1d98c:	andeq	r0, r2, r4, ror #29
   1d990:	strdeq	r0, [r2], -r4
   1d994:	push	{r4, r5, r6, r7, r8, r9, lr}
   1d998:	sub	sp, sp, #12
   1d99c:	subs	r7, r0, #0
   1d9a0:	str	r1, [sp, #4]
   1d9a4:	beq	1da44 <__assert_fail@plt+0xc568>
   1d9a8:	mov	r9, r1
   1d9ac:	mov	r5, r1
   1d9b0:	mov	r6, r7
   1d9b4:	mov	r4, #0
   1d9b8:	add	r5, r5, #4
   1d9bc:	str	r5, [sp, #4]
   1d9c0:	ldr	r0, [r5, #-4]
   1d9c4:	bl	11380 <strlen@plt>
   1d9c8:	adds	r4, r0, r4
   1d9cc:	mvncs	r4, #0
   1d9d0:	subs	r6, r6, #1
   1d9d4:	bne	1d9b8 <__assert_fail@plt+0xc4dc>
   1d9d8:	cmp	r4, #0
   1d9dc:	blt	1da34 <__assert_fail@plt+0xc558>
   1d9e0:	add	r0, r4, #1
   1d9e4:	bl	1c540 <__assert_fail@plt+0xb064>
   1d9e8:	sub	r9, r9, #4
   1d9ec:	mov	r6, r0
   1d9f0:	mov	r4, r0
   1d9f4:	ldr	r8, [r9, #4]!
   1d9f8:	mov	r0, r8
   1d9fc:	bl	11380 <strlen@plt>
   1da00:	mov	r1, r8
   1da04:	mov	r5, r0
   1da08:	mov	r2, r0
   1da0c:	mov	r0, r4
   1da10:	bl	111e8 <memcpy@plt>
   1da14:	subs	r7, r7, #1
   1da18:	add	r4, r4, r5
   1da1c:	bne	1d9f4 <__assert_fail@plt+0xc518>
   1da20:	mov	r3, #0
   1da24:	strb	r3, [r4]
   1da28:	mov	r0, r6
   1da2c:	add	sp, sp, #12
   1da30:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1da34:	bl	113a4 <__errno_location@plt>
   1da38:	mov	r3, #75	; 0x4b
   1da3c:	str	r3, [r0]
   1da40:	b	1da28 <__assert_fail@plt+0xc54c>
   1da44:	mov	r0, #1
   1da48:	bl	1c540 <__assert_fail@plt+0xb064>
   1da4c:	mov	r4, r0
   1da50:	mov	r6, r0
   1da54:	b	1da20 <__assert_fail@plt+0xc544>
   1da58:	push	{r4, lr}
   1da5c:	sub	sp, sp, #8
   1da60:	ldrb	r4, [r0]
   1da64:	cmp	r4, #0
   1da68:	beq	1dab4 <__assert_fail@plt+0xc5d8>
   1da6c:	cmp	r4, #37	; 0x25
   1da70:	bne	1dac4 <__assert_fail@plt+0xc5e8>
   1da74:	ldrb	r3, [r0, #1]
   1da78:	cmp	r3, #115	; 0x73
   1da7c:	bne	1dac4 <__assert_fail@plt+0xc5e8>
   1da80:	mov	ip, r0
   1da84:	mov	r4, #0
   1da88:	b	1daa4 <__assert_fail@plt+0xc5c8>
   1da8c:	cmp	lr, #37	; 0x25
   1da90:	bne	1dac4 <__assert_fail@plt+0xc5e8>
   1da94:	add	ip, ip, #2
   1da98:	ldrb	lr, [ip, #1]
   1da9c:	cmp	lr, #115	; 0x73
   1daa0:	bne	1dac4 <__assert_fail@plt+0xc5e8>
   1daa4:	ldrb	lr, [ip, #2]
   1daa8:	add	r4, r4, #1
   1daac:	cmp	lr, #0
   1dab0:	bne	1da8c <__assert_fail@plt+0xc5b0>
   1dab4:	mov	r0, r4
   1dab8:	bl	1d994 <__assert_fail@plt+0xc4b8>
   1dabc:	add	sp, sp, #8
   1dac0:	pop	{r4, pc}
   1dac4:	mov	r3, r1
   1dac8:	mov	r2, r0
   1dacc:	mov	r1, #1
   1dad0:	add	r0, sp, #4
   1dad4:	bl	113c8 <__vasprintf_chk@plt>
   1dad8:	cmp	r0, #0
   1dadc:	ldrge	r0, [sp, #4]
   1dae0:	bge	1dabc <__assert_fail@plt+0xc5e0>
   1dae4:	bl	113a4 <__errno_location@plt>
   1dae8:	ldr	r3, [r0]
   1daec:	cmp	r3, #12
   1daf0:	movne	r0, #0
   1daf4:	bne	1dabc <__assert_fail@plt+0xc5e0>
   1daf8:	bl	1cb88 <__assert_fail@plt+0xb6ac>
   1dafc:	cmp	r1, #0
   1db00:	cmpne	r0, #0
   1db04:	moveq	r1, #1
   1db08:	moveq	r0, r1
   1db0c:	umull	r2, r3, r0, r1
   1db10:	adds	r3, r3, #0
   1db14:	movne	r3, #1
   1db18:	cmp	r2, #0
   1db1c:	blt	1db2c <__assert_fail@plt+0xc650>
   1db20:	cmp	r3, #0
   1db24:	bne	1db2c <__assert_fail@plt+0xc650>
   1db28:	b	1114c <calloc@plt>
   1db2c:	push	{r4, lr}
   1db30:	bl	113a4 <__errno_location@plt>
   1db34:	mov	r3, #12
   1db38:	str	r3, [r0]
   1db3c:	mov	r0, #0
   1db40:	pop	{r4, pc}
   1db44:	cmp	r0, #0
   1db48:	moveq	r0, #1
   1db4c:	cmp	r0, #0
   1db50:	blt	1db58 <__assert_fail@plt+0xc67c>
   1db54:	b	112fc <malloc@plt>
   1db58:	push	{r4, lr}
   1db5c:	bl	113a4 <__errno_location@plt>
   1db60:	mov	r3, #12
   1db64:	str	r3, [r0]
   1db68:	mov	r0, #0
   1db6c:	pop	{r4, pc}
   1db70:	cmp	r0, #0
   1db74:	beq	1db98 <__assert_fail@plt+0xc6bc>
   1db78:	cmp	r1, #0
   1db7c:	push	{lr}		; (str lr, [sp, #-4]!)
   1db80:	sub	sp, sp, #12
   1db84:	beq	1dba0 <__assert_fail@plt+0xc6c4>
   1db88:	blt	1dbb8 <__assert_fail@plt+0xc6dc>
   1db8c:	add	sp, sp, #12
   1db90:	pop	{lr}		; (ldr lr, [sp], #4)
   1db94:	b	11248 <realloc@plt>
   1db98:	mov	r0, r1
   1db9c:	b	1db44 <__assert_fail@plt+0xc668>
   1dba0:	str	r1, [sp, #4]
   1dba4:	bl	1e18c <__assert_fail@plt+0xccb0>
   1dba8:	ldr	r3, [sp, #4]
   1dbac:	mov	r0, r3
   1dbb0:	add	sp, sp, #12
   1dbb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1dbb8:	bl	113a4 <__errno_location@plt>
   1dbbc:	mov	r2, #12
   1dbc0:	mov	r3, #0
   1dbc4:	str	r2, [r0]
   1dbc8:	b	1dbac <__assert_fail@plt+0xc6d0>
   1dbcc:	mov	r0, #1
   1dbd0:	b	145a4 <__assert_fail@plt+0x30c8>
   1dbd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbd8:	mov	r4, r1
   1dbdc:	sub	sp, sp, #12
   1dbe0:	mov	r5, r2
   1dbe4:	str	r2, [sp, #4]
   1dbe8:	mov	r7, r3
   1dbec:	mov	sl, r0
   1dbf0:	bl	11380 <strlen@plt>
   1dbf4:	ldr	fp, [r4]
   1dbf8:	cmp	fp, #0
   1dbfc:	beq	1dd10 <__assert_fail@plt+0xc834>
   1dc00:	cmp	r5, #0
   1dc04:	mov	r8, r0
   1dc08:	mov	r3, r5
   1dc0c:	beq	1dcb8 <__assert_fail@plt+0xc7dc>
   1dc10:	mov	r2, #0
   1dc14:	mov	r5, r2
   1dc18:	mov	r6, r3
   1dc1c:	mvn	r9, #0
   1dc20:	str	r2, [sp]
   1dc24:	mov	r2, r8
   1dc28:	mov	r1, sl
   1dc2c:	mov	r0, fp
   1dc30:	bl	11494 <strncmp@plt>
   1dc34:	cmp	r0, #0
   1dc38:	mov	r0, fp
   1dc3c:	bne	1dc7c <__assert_fail@plt+0xc7a0>
   1dc40:	bl	11380 <strlen@plt>
   1dc44:	ldr	r3, [sp, #4]
   1dc48:	mov	r2, r7
   1dc4c:	mov	r1, r6
   1dc50:	cmp	r8, r0
   1dc54:	mla	r0, r7, r9, r3
   1dc58:	beq	1dca8 <__assert_fail@plt+0xc7cc>
   1dc5c:	cmn	r9, #1
   1dc60:	moveq	r9, r5
   1dc64:	beq	1dc7c <__assert_fail@plt+0xc7a0>
   1dc68:	bl	11218 <memcmp@plt>
   1dc6c:	ldr	r3, [sp]
   1dc70:	cmp	r0, #0
   1dc74:	movne	r3, #1
   1dc78:	str	r3, [sp]
   1dc7c:	ldr	fp, [r4, #4]!
   1dc80:	add	r5, r5, #1
   1dc84:	cmp	fp, #0
   1dc88:	add	r6, r6, r7
   1dc8c:	bne	1dc24 <__assert_fail@plt+0xc748>
   1dc90:	ldr	r3, [sp]
   1dc94:	cmp	r3, #0
   1dc98:	mvnne	r9, #1
   1dc9c:	mov	r0, r9
   1dca0:	add	sp, sp, #12
   1dca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dca8:	mov	r9, r5
   1dcac:	mov	r0, r9
   1dcb0:	add	sp, sp, #12
   1dcb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dcb8:	mov	r6, r5
   1dcbc:	mvn	r9, #0
   1dcc0:	mov	r2, r8
   1dcc4:	mov	r1, sl
   1dcc8:	mov	r0, fp
   1dccc:	bl	11494 <strncmp@plt>
   1dcd0:	cmp	r0, #0
   1dcd4:	mov	r0, fp
   1dcd8:	bne	1dcf4 <__assert_fail@plt+0xc818>
   1dcdc:	bl	11380 <strlen@plt>
   1dce0:	cmp	r8, r0
   1dce4:	beq	1dca8 <__assert_fail@plt+0xc7cc>
   1dce8:	cmn	r9, #1
   1dcec:	moveq	r9, r5
   1dcf0:	movne	r6, #1
   1dcf4:	ldr	fp, [r4, #4]!
   1dcf8:	add	r5, r5, #1
   1dcfc:	cmp	fp, #0
   1dd00:	bne	1dcc0 <__assert_fail@plt+0xc7e4>
   1dd04:	str	r6, [sp]
   1dd08:	mov	r3, r6
   1dd0c:	b	1dc94 <__assert_fail@plt+0xc7b8>
   1dd10:	mvn	r9, #0
   1dd14:	b	1dc9c <__assert_fail@plt+0xc7c0>
   1dd18:	push	{r4, r5, r6, lr}
   1dd1c:	mov	r6, r0
   1dd20:	ldr	r0, [r1]
   1dd24:	cmp	r0, #0
   1dd28:	beq	1dd60 <__assert_fail@plt+0xc884>
   1dd2c:	mov	r4, r1
   1dd30:	mov	r5, #0
   1dd34:	b	1dd48 <__assert_fail@plt+0xc86c>
   1dd38:	ldr	r0, [r4, #4]!
   1dd3c:	add	r5, r5, #1
   1dd40:	cmp	r0, #0
   1dd44:	beq	1dd60 <__assert_fail@plt+0xc884>
   1dd48:	mov	r1, r6
   1dd4c:	bl	1117c <strcmp@plt>
   1dd50:	cmp	r0, #0
   1dd54:	bne	1dd38 <__assert_fail@plt+0xc85c>
   1dd58:	mov	r0, r5
   1dd5c:	pop	{r4, r5, r6, pc}
   1dd60:	mvn	r0, #0
   1dd64:	pop	{r4, r5, r6, pc}
   1dd68:	cmn	r2, #1
   1dd6c:	push	{r4, r5, r6, lr}
   1dd70:	mov	r2, #5
   1dd74:	sub	sp, sp, #8
   1dd78:	mov	r4, r1
   1dd7c:	mov	r5, r0
   1dd80:	ldreq	r1, [pc, #76]	; 1ddd4 <__assert_fail@plt+0xc8f8>
   1dd84:	ldrne	r1, [pc, #76]	; 1ddd8 <__assert_fail@plt+0xc8fc>
   1dd88:	mov	r0, #0
   1dd8c:	bl	11230 <dcgettext@plt>
   1dd90:	mov	r2, r4
   1dd94:	mov	r1, #8
   1dd98:	mov	r6, r0
   1dd9c:	mov	r0, #0
   1dda0:	bl	19b04 <__assert_fail@plt+0x8628>
   1dda4:	mov	r1, r5
   1dda8:	mov	r4, r0
   1ddac:	mov	r0, #1
   1ddb0:	bl	1b6a0 <__assert_fail@plt+0xa1c4>
   1ddb4:	mov	r1, #0
   1ddb8:	mov	r3, r4
   1ddbc:	mov	r2, r6
   1ddc0:	str	r0, [sp]
   1ddc4:	mov	r0, r1
   1ddc8:	bl	112d8 <error@plt>
   1ddcc:	add	sp, sp, #8
   1ddd0:	pop	{r4, r5, r6, pc}
   1ddd4:	andeq	r0, r2, ip, lsl pc
   1ddd8:	andeq	r0, r2, r8, lsr pc
   1dddc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dde0:	mov	r6, r0
   1dde4:	ldr	r9, [pc, #232]	; 1ded4 <__assert_fail@plt+0xc9f8>
   1dde8:	mov	r4, r1
   1ddec:	mov	r7, r2
   1ddf0:	ldr	r1, [pc, #224]	; 1ded8 <__assert_fail@plt+0xc9fc>
   1ddf4:	mov	r2, #5
   1ddf8:	mov	r0, #0
   1ddfc:	bl	11230 <dcgettext@plt>
   1de00:	ldr	r1, [r9]
   1de04:	bl	11158 <fputs_unlocked@plt>
   1de08:	ldr	fp, [r6]
   1de0c:	cmp	fp, #0
   1de10:	movne	r8, #0
   1de14:	movne	r5, r8
   1de18:	movne	sl, #1
   1de1c:	bne	1de5c <__assert_fail@plt+0xc980>
   1de20:	b	1dea0 <__assert_fail@plt+0xc9c4>
   1de24:	mov	r0, fp
   1de28:	ldr	r8, [r9]
   1de2c:	bl	1b854 <__assert_fail@plt+0xa378>
   1de30:	ldr	r2, [pc, #164]	; 1dedc <__assert_fail@plt+0xca00>
   1de34:	mov	r1, sl
   1de38:	mov	r3, r0
   1de3c:	mov	r0, r8
   1de40:	bl	11404 <__fprintf_chk@plt>
   1de44:	mov	r8, r4
   1de48:	ldr	fp, [r6, #4]!
   1de4c:	add	r5, r5, #1
   1de50:	cmp	fp, #0
   1de54:	add	r4, r4, r7
   1de58:	beq	1dea0 <__assert_fail@plt+0xc9c4>
   1de5c:	cmp	r5, #0
   1de60:	mov	r1, r4
   1de64:	mov	r2, r7
   1de68:	mov	r0, r8
   1de6c:	beq	1de24 <__assert_fail@plt+0xc948>
   1de70:	bl	11218 <memcmp@plt>
   1de74:	cmp	r0, #0
   1de78:	bne	1de24 <__assert_fail@plt+0xc948>
   1de7c:	mov	r0, fp
   1de80:	ldr	fp, [r9]
   1de84:	bl	1b854 <__assert_fail@plt+0xa378>
   1de88:	ldr	r2, [pc, #80]	; 1dee0 <__assert_fail@plt+0xca04>
   1de8c:	mov	r1, sl
   1de90:	mov	r3, r0
   1de94:	mov	r0, fp
   1de98:	bl	11404 <__fprintf_chk@plt>
   1de9c:	b	1de48 <__assert_fail@plt+0xc96c>
   1dea0:	ldr	r0, [r9]
   1dea4:	ldr	r3, [r0, #20]
   1dea8:	ldr	r2, [r0, #24]
   1deac:	cmp	r3, r2
   1deb0:	bcs	1dec8 <__assert_fail@plt+0xc9ec>
   1deb4:	add	r1, r3, #1
   1deb8:	mov	r2, #10
   1debc:	str	r1, [r0, #20]
   1dec0:	strb	r2, [r3]
   1dec4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dec8:	mov	r1, #10
   1decc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ded0:	b	11434 <__overflow@plt>
   1ded4:	ldrdeq	r2, [r3], -r8
   1ded8:	andeq	r0, r2, r8, asr pc
   1dedc:	andeq	r0, r2, r0, ror pc
   1dee0:	ldrdeq	pc, [r1], -r4
   1dee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dee8:	sub	sp, sp, #36	; 0x24
   1deec:	mov	r6, r1
   1def0:	ldrb	ip, [sp, #80]	; 0x50
   1def4:	str	r0, [sp, #28]
   1def8:	str	r2, [sp, #24]
   1defc:	cmp	ip, #0
   1df00:	str	ip, [sp, #20]
   1df04:	str	r3, [sp, #12]
   1df08:	ldr	r7, [sp, #72]	; 0x48
   1df0c:	bne	1dfc4 <__assert_fail@plt+0xcae8>
   1df10:	ldr	r0, [r2]
   1df14:	cmp	r0, #0
   1df18:	movne	sl, ip
   1df1c:	movne	r4, r2
   1df20:	bne	1dfa8 <__assert_fail@plt+0xcacc>
   1df24:	mov	r2, #5
   1df28:	ldr	r1, [pc, #512]	; 1e130 <__assert_fail@plt+0xcc54>
   1df2c:	mov	r0, #0
   1df30:	bl	11230 <dcgettext@plt>
   1df34:	mov	r4, r0
   1df38:	mov	r2, r6
   1df3c:	mov	r1, #8
   1df40:	mov	r0, #0
   1df44:	bl	19b04 <__assert_fail@plt+0x8628>
   1df48:	ldr	r1, [sp, #28]
   1df4c:	mvn	sl, #0
   1df50:	mov	r5, r0
   1df54:	mov	r0, #1
   1df58:	bl	1b6a0 <__assert_fail@plt+0xa1c4>
   1df5c:	mov	r1, #0
   1df60:	mov	r3, r5
   1df64:	mov	r2, r4
   1df68:	str	r0, [sp]
   1df6c:	mov	r0, r1
   1df70:	bl	112d8 <error@plt>
   1df74:	ldr	r0, [sp, #24]
   1df78:	mov	r2, r7
   1df7c:	ldr	r1, [sp, #12]
   1df80:	bl	1dddc <__assert_fail@plt+0xc900>
   1df84:	ldr	r3, [sp, #76]	; 0x4c
   1df88:	blx	r3
   1df8c:	mov	r0, sl
   1df90:	add	sp, sp, #36	; 0x24
   1df94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df98:	ldr	r0, [r4, #4]!
   1df9c:	add	sl, sl, #1
   1dfa0:	cmp	r0, #0
   1dfa4:	beq	1df24 <__assert_fail@plt+0xca48>
   1dfa8:	mov	r1, r6
   1dfac:	bl	1117c <strcmp@plt>
   1dfb0:	cmp	r0, #0
   1dfb4:	bne	1df98 <__assert_fail@plt+0xcabc>
   1dfb8:	mov	r0, sl
   1dfbc:	add	sp, sp, #36	; 0x24
   1dfc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfc4:	mov	r0, r1
   1dfc8:	bl	11380 <strlen@plt>
   1dfcc:	ldr	r3, [sp, #24]
   1dfd0:	ldr	fp, [r3]
   1dfd4:	cmp	fp, #0
   1dfd8:	mov	r9, r0
   1dfdc:	beq	1df24 <__assert_fail@plt+0xca48>
   1dfe0:	ldr	r2, [sp, #12]
   1dfe4:	cmp	r2, #0
   1dfe8:	beq	1e0a4 <__assert_fail@plt+0xcbc8>
   1dfec:	mov	r1, #0
   1dff0:	mov	r4, r1
   1dff4:	mov	r8, r3
   1dff8:	mov	r5, r2
   1dffc:	mvn	sl, #0
   1e000:	str	r1, [sp, #16]
   1e004:	mov	r2, r9
   1e008:	mov	r1, r6
   1e00c:	mov	r0, fp
   1e010:	bl	11494 <strncmp@plt>
   1e014:	cmp	r0, #0
   1e018:	mov	r0, fp
   1e01c:	bne	1e060 <__assert_fail@plt+0xcb84>
   1e020:	bl	11380 <strlen@plt>
   1e024:	ldr	r3, [sp, #12]
   1e028:	mov	r2, r7
   1e02c:	mov	r1, r5
   1e030:	cmp	r9, r0
   1e034:	mla	r0, r7, sl, r3
   1e038:	beq	1e094 <__assert_fail@plt+0xcbb8>
   1e03c:	cmn	sl, #1
   1e040:	moveq	sl, r4
   1e044:	beq	1e060 <__assert_fail@plt+0xcb84>
   1e048:	bl	11218 <memcmp@plt>
   1e04c:	ldr	r2, [sp, #20]
   1e050:	ldr	r3, [sp, #16]
   1e054:	cmp	r0, #0
   1e058:	movne	r3, r2
   1e05c:	str	r3, [sp, #16]
   1e060:	ldr	fp, [r8, #4]!
   1e064:	add	r4, r4, #1
   1e068:	cmp	fp, #0
   1e06c:	add	r5, r5, r7
   1e070:	bne	1e004 <__assert_fail@plt+0xcb28>
   1e074:	ldr	r3, [sp, #16]
   1e078:	cmp	r3, #0
   1e07c:	bne	1e118 <__assert_fail@plt+0xcc3c>
   1e080:	cmn	sl, #1
   1e084:	beq	1df24 <__assert_fail@plt+0xca48>
   1e088:	mov	r0, sl
   1e08c:	add	sp, sp, #36	; 0x24
   1e090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e094:	mov	sl, r4
   1e098:	mov	r0, sl
   1e09c:	add	sp, sp, #36	; 0x24
   1e0a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0a4:	mov	r5, r3
   1e0a8:	ldr	r3, [sp, #12]
   1e0ac:	str	r7, [sp, #72]	; 0x48
   1e0b0:	mov	r7, fp
   1e0b4:	ldr	fp, [sp, #20]
   1e0b8:	mov	r8, r3
   1e0bc:	mvn	sl, #0
   1e0c0:	mov	r4, r3
   1e0c4:	mov	r2, r9
   1e0c8:	mov	r1, r6
   1e0cc:	mov	r0, r7
   1e0d0:	bl	11494 <strncmp@plt>
   1e0d4:	cmp	r0, #0
   1e0d8:	mov	r0, r7
   1e0dc:	bne	1e0f8 <__assert_fail@plt+0xcc1c>
   1e0e0:	bl	11380 <strlen@plt>
   1e0e4:	cmp	r9, r0
   1e0e8:	beq	1e094 <__assert_fail@plt+0xcbb8>
   1e0ec:	cmn	sl, #1
   1e0f0:	moveq	sl, r4
   1e0f4:	movne	r8, fp
   1e0f8:	ldr	r7, [r5, #4]!
   1e0fc:	add	r4, r4, #1
   1e100:	cmp	r7, #0
   1e104:	bne	1e0c4 <__assert_fail@plt+0xcbe8>
   1e108:	str	r8, [sp, #16]
   1e10c:	ldr	r7, [sp, #72]	; 0x48
   1e110:	mov	r3, r8
   1e114:	b	1e078 <__assert_fail@plt+0xcb9c>
   1e118:	mov	r2, #5
   1e11c:	ldr	r1, [pc, #16]	; 1e134 <__assert_fail@plt+0xcc58>
   1e120:	mov	r0, #0
   1e124:	bl	11230 <dcgettext@plt>
   1e128:	mov	r4, r0
   1e12c:	b	1df38 <__assert_fail@plt+0xca5c>
   1e130:	andeq	r0, r2, ip, lsl pc
   1e134:	andeq	r0, r2, r8, lsr pc
   1e138:	push	{r4, r5, r6, r7, r8, lr}
   1e13c:	ldr	r7, [r1]
   1e140:	cmp	r7, #0
   1e144:	beq	1e184 <__assert_fail@plt+0xcca8>
   1e148:	mov	r6, r3
   1e14c:	mov	r8, r0
   1e150:	mov	r4, r2
   1e154:	mov	r5, r1
   1e158:	b	1e168 <__assert_fail@plt+0xcc8c>
   1e15c:	ldr	r7, [r5, #4]!
   1e160:	cmp	r7, #0
   1e164:	beq	1e184 <__assert_fail@plt+0xcca8>
   1e168:	mov	r1, r4
   1e16c:	mov	r2, r6
   1e170:	mov	r0, r8
   1e174:	bl	11218 <memcmp@plt>
   1e178:	add	r4, r4, r6
   1e17c:	cmp	r0, #0
   1e180:	bne	1e15c <__assert_fail@plt+0xcc80>
   1e184:	mov	r0, r7
   1e188:	pop	{r4, r5, r6, r7, r8, pc}
   1e18c:	push	{r4, r5, lr}
   1e190:	sub	sp, sp, #12
   1e194:	mov	r5, r0
   1e198:	bl	113a4 <__errno_location@plt>
   1e19c:	mov	r2, #0
   1e1a0:	mov	r4, r0
   1e1a4:	ldr	r3, [r0]
   1e1a8:	str	r2, [r4]
   1e1ac:	mov	r0, r5
   1e1b0:	str	r3, [sp]
   1e1b4:	str	r3, [sp, #4]
   1e1b8:	bl	111c4 <free@plt>
   1e1bc:	ldr	r3, [r4]
   1e1c0:	add	r2, sp, #8
   1e1c4:	cmp	r3, #0
   1e1c8:	moveq	r3, #4
   1e1cc:	movne	r3, #0
   1e1d0:	add	r3, r2, r3
   1e1d4:	ldr	r3, [r3, #-8]
   1e1d8:	str	r3, [r4]
   1e1dc:	add	sp, sp, #12
   1e1e0:	pop	{r4, r5, pc}
   1e1e4:	push	{r4, lr}
   1e1e8:	mov	r0, #14
   1e1ec:	bl	11464 <nl_langinfo@plt>
   1e1f0:	cmp	r0, #0
   1e1f4:	beq	1e20c <__assert_fail@plt+0xcd30>
   1e1f8:	ldrb	r2, [r0]
   1e1fc:	ldr	r3, [pc, #16]	; 1e214 <__assert_fail@plt+0xcd38>
   1e200:	cmp	r2, #0
   1e204:	moveq	r0, r3
   1e208:	pop	{r4, pc}
   1e20c:	ldr	r0, [pc]	; 1e214 <__assert_fail@plt+0xcd38>
   1e210:	pop	{r4, pc}
   1e214:	andeq	r0, r2, r8, ror pc
   1e218:	push	{r4, r5, r6, r7, lr}
   1e21c:	subs	r6, r0, #0
   1e220:	sub	sp, sp, #12
   1e224:	addeq	r6, sp, #4
   1e228:	mov	r0, r6
   1e22c:	mov	r5, r2
   1e230:	mov	r7, r1
   1e234:	bl	112cc <mbrtowc@plt>
   1e238:	cmp	r5, #0
   1e23c:	cmnne	r0, #3
   1e240:	mov	r4, r0
   1e244:	bls	1e260 <__assert_fail@plt+0xcd84>
   1e248:	mov	r0, #0
   1e24c:	bl	1e2b8 <__assert_fail@plt+0xcddc>
   1e250:	cmp	r0, #0
   1e254:	moveq	r4, #1
   1e258:	ldrbeq	r3, [r7]
   1e25c:	streq	r3, [r6]
   1e260:	mov	r0, r4
   1e264:	add	sp, sp, #12
   1e268:	pop	{r4, r5, r6, r7, pc}
   1e26c:	push	{r4, r5, r6, lr}
   1e270:	subs	r4, r2, #0
   1e274:	mov	r6, r0
   1e278:	mov	r5, r1
   1e27c:	beq	1e2a8 <__assert_fail@plt+0xcdcc>
   1e280:	mov	r1, r4
   1e284:	mvn	r0, #0
   1e288:	bl	1e3ac <__assert_fail@plt+0xced0>
   1e28c:	cmp	r0, r5
   1e290:	bcs	1e2a8 <__assert_fail@plt+0xcdcc>
   1e294:	bl	113a4 <__errno_location@plt>
   1e298:	mov	r3, #12
   1e29c:	str	r3, [r0]
   1e2a0:	mov	r0, #0
   1e2a4:	pop	{r4, r5, r6, pc}
   1e2a8:	mul	r1, r5, r4
   1e2ac:	mov	r0, r6
   1e2b0:	pop	{r4, r5, r6, lr}
   1e2b4:	b	1db70 <__assert_fail@plt+0xc694>
   1e2b8:	push	{lr}		; (str lr, [sp, #-4]!)
   1e2bc:	sub	sp, sp, #268	; 0x10c
   1e2c0:	add	r1, sp, #4
   1e2c4:	ldr	r2, [pc, #60]	; 1e308 <__assert_fail@plt+0xce2c>
   1e2c8:	bl	1e314 <__assert_fail@plt+0xce38>
   1e2cc:	cmp	r0, #0
   1e2d0:	movne	r0, #0
   1e2d4:	bne	1e300 <__assert_fail@plt+0xce24>
   1e2d8:	ldr	r1, [pc, #44]	; 1e30c <__assert_fail@plt+0xce30>
   1e2dc:	add	r0, sp, #4
   1e2e0:	bl	1117c <strcmp@plt>
   1e2e4:	cmp	r0, #0
   1e2e8:	beq	1e300 <__assert_fail@plt+0xce24>
   1e2ec:	add	r0, sp, #4
   1e2f0:	ldr	r1, [pc, #24]	; 1e310 <__assert_fail@plt+0xce34>
   1e2f4:	bl	1117c <strcmp@plt>
   1e2f8:	adds	r0, r0, #0
   1e2fc:	movne	r0, #1
   1e300:	add	sp, sp, #268	; 0x10c
   1e304:	pop	{pc}		; (ldr pc, [sp], #4)
   1e308:	andeq	r0, r0, r1, lsl #2
   1e30c:	andeq	r0, r2, r0, lsl #31
   1e310:	andeq	r0, r2, r4, lsl #31
   1e314:	push	{r4, r5, r6, lr}
   1e318:	mov	r5, r1
   1e31c:	mov	r1, #0
   1e320:	mov	r4, r2
   1e324:	bl	11440 <setlocale@plt>
   1e328:	subs	r6, r0, #0
   1e32c:	beq	1e388 <__assert_fail@plt+0xceac>
   1e330:	bl	11380 <strlen@plt>
   1e334:	cmp	r4, r0
   1e338:	bhi	1e370 <__assert_fail@plt+0xce94>
   1e33c:	cmp	r4, #0
   1e340:	bne	1e34c <__assert_fail@plt+0xce70>
   1e344:	mov	r0, #34	; 0x22
   1e348:	pop	{r4, r5, r6, pc}
   1e34c:	sub	r4, r4, #1
   1e350:	mov	r1, r6
   1e354:	mov	r2, r4
   1e358:	mov	r0, r5
   1e35c:	bl	111e8 <memcpy@plt>
   1e360:	mov	r3, #0
   1e364:	strb	r3, [r5, r4]
   1e368:	mov	r0, #34	; 0x22
   1e36c:	pop	{r4, r5, r6, pc}
   1e370:	add	r2, r0, #1
   1e374:	mov	r1, r6
   1e378:	mov	r0, r5
   1e37c:	bl	111e8 <memcpy@plt>
   1e380:	mov	r0, #0
   1e384:	pop	{r4, r5, r6, pc}
   1e388:	cmp	r4, #0
   1e38c:	beq	1e39c <__assert_fail@plt+0xcec0>
   1e390:	strb	r6, [r5]
   1e394:	mov	r0, #22
   1e398:	pop	{r4, r5, r6, pc}
   1e39c:	mov	r0, #22
   1e3a0:	pop	{r4, r5, r6, pc}
   1e3a4:	mov	r1, #0
   1e3a8:	b	11440 <setlocale@plt>
   1e3ac:	subs	r2, r1, #1
   1e3b0:	bxeq	lr
   1e3b4:	bcc	1e58c <__assert_fail@plt+0xd0b0>
   1e3b8:	cmp	r0, r1
   1e3bc:	bls	1e570 <__assert_fail@plt+0xd094>
   1e3c0:	tst	r1, r2
   1e3c4:	beq	1e57c <__assert_fail@plt+0xd0a0>
   1e3c8:	clz	r3, r0
   1e3cc:	clz	r2, r1
   1e3d0:	sub	r3, r2, r3
   1e3d4:	rsbs	r3, r3, #31
   1e3d8:	addne	r3, r3, r3, lsl #1
   1e3dc:	mov	r2, #0
   1e3e0:	addne	pc, pc, r3, lsl #2
   1e3e4:	nop			; (mov r0, r0)
   1e3e8:	cmp	r0, r1, lsl #31
   1e3ec:	adc	r2, r2, r2
   1e3f0:	subcs	r0, r0, r1, lsl #31
   1e3f4:	cmp	r0, r1, lsl #30
   1e3f8:	adc	r2, r2, r2
   1e3fc:	subcs	r0, r0, r1, lsl #30
   1e400:	cmp	r0, r1, lsl #29
   1e404:	adc	r2, r2, r2
   1e408:	subcs	r0, r0, r1, lsl #29
   1e40c:	cmp	r0, r1, lsl #28
   1e410:	adc	r2, r2, r2
   1e414:	subcs	r0, r0, r1, lsl #28
   1e418:	cmp	r0, r1, lsl #27
   1e41c:	adc	r2, r2, r2
   1e420:	subcs	r0, r0, r1, lsl #27
   1e424:	cmp	r0, r1, lsl #26
   1e428:	adc	r2, r2, r2
   1e42c:	subcs	r0, r0, r1, lsl #26
   1e430:	cmp	r0, r1, lsl #25
   1e434:	adc	r2, r2, r2
   1e438:	subcs	r0, r0, r1, lsl #25
   1e43c:	cmp	r0, r1, lsl #24
   1e440:	adc	r2, r2, r2
   1e444:	subcs	r0, r0, r1, lsl #24
   1e448:	cmp	r0, r1, lsl #23
   1e44c:	adc	r2, r2, r2
   1e450:	subcs	r0, r0, r1, lsl #23
   1e454:	cmp	r0, r1, lsl #22
   1e458:	adc	r2, r2, r2
   1e45c:	subcs	r0, r0, r1, lsl #22
   1e460:	cmp	r0, r1, lsl #21
   1e464:	adc	r2, r2, r2
   1e468:	subcs	r0, r0, r1, lsl #21
   1e46c:	cmp	r0, r1, lsl #20
   1e470:	adc	r2, r2, r2
   1e474:	subcs	r0, r0, r1, lsl #20
   1e478:	cmp	r0, r1, lsl #19
   1e47c:	adc	r2, r2, r2
   1e480:	subcs	r0, r0, r1, lsl #19
   1e484:	cmp	r0, r1, lsl #18
   1e488:	adc	r2, r2, r2
   1e48c:	subcs	r0, r0, r1, lsl #18
   1e490:	cmp	r0, r1, lsl #17
   1e494:	adc	r2, r2, r2
   1e498:	subcs	r0, r0, r1, lsl #17
   1e49c:	cmp	r0, r1, lsl #16
   1e4a0:	adc	r2, r2, r2
   1e4a4:	subcs	r0, r0, r1, lsl #16
   1e4a8:	cmp	r0, r1, lsl #15
   1e4ac:	adc	r2, r2, r2
   1e4b0:	subcs	r0, r0, r1, lsl #15
   1e4b4:	cmp	r0, r1, lsl #14
   1e4b8:	adc	r2, r2, r2
   1e4bc:	subcs	r0, r0, r1, lsl #14
   1e4c0:	cmp	r0, r1, lsl #13
   1e4c4:	adc	r2, r2, r2
   1e4c8:	subcs	r0, r0, r1, lsl #13
   1e4cc:	cmp	r0, r1, lsl #12
   1e4d0:	adc	r2, r2, r2
   1e4d4:	subcs	r0, r0, r1, lsl #12
   1e4d8:	cmp	r0, r1, lsl #11
   1e4dc:	adc	r2, r2, r2
   1e4e0:	subcs	r0, r0, r1, lsl #11
   1e4e4:	cmp	r0, r1, lsl #10
   1e4e8:	adc	r2, r2, r2
   1e4ec:	subcs	r0, r0, r1, lsl #10
   1e4f0:	cmp	r0, r1, lsl #9
   1e4f4:	adc	r2, r2, r2
   1e4f8:	subcs	r0, r0, r1, lsl #9
   1e4fc:	cmp	r0, r1, lsl #8
   1e500:	adc	r2, r2, r2
   1e504:	subcs	r0, r0, r1, lsl #8
   1e508:	cmp	r0, r1, lsl #7
   1e50c:	adc	r2, r2, r2
   1e510:	subcs	r0, r0, r1, lsl #7
   1e514:	cmp	r0, r1, lsl #6
   1e518:	adc	r2, r2, r2
   1e51c:	subcs	r0, r0, r1, lsl #6
   1e520:	cmp	r0, r1, lsl #5
   1e524:	adc	r2, r2, r2
   1e528:	subcs	r0, r0, r1, lsl #5
   1e52c:	cmp	r0, r1, lsl #4
   1e530:	adc	r2, r2, r2
   1e534:	subcs	r0, r0, r1, lsl #4
   1e538:	cmp	r0, r1, lsl #3
   1e53c:	adc	r2, r2, r2
   1e540:	subcs	r0, r0, r1, lsl #3
   1e544:	cmp	r0, r1, lsl #2
   1e548:	adc	r2, r2, r2
   1e54c:	subcs	r0, r0, r1, lsl #2
   1e550:	cmp	r0, r1, lsl #1
   1e554:	adc	r2, r2, r2
   1e558:	subcs	r0, r0, r1, lsl #1
   1e55c:	cmp	r0, r1
   1e560:	adc	r2, r2, r2
   1e564:	subcs	r0, r0, r1
   1e568:	mov	r0, r2
   1e56c:	bx	lr
   1e570:	moveq	r0, #1
   1e574:	movne	r0, #0
   1e578:	bx	lr
   1e57c:	clz	r2, r1
   1e580:	rsb	r2, r2, #31
   1e584:	lsr	r0, r0, r2
   1e588:	bx	lr
   1e58c:	cmp	r0, #0
   1e590:	mvnne	r0, #0
   1e594:	b	1ecc0 <__assert_fail@plt+0xd7e4>
   1e598:	cmp	r1, #0
   1e59c:	beq	1e58c <__assert_fail@plt+0xd0b0>
   1e5a0:	push	{r0, r1, lr}
   1e5a4:	bl	1e3ac <__assert_fail@plt+0xced0>
   1e5a8:	pop	{r1, r2, lr}
   1e5ac:	mul	r3, r2, r0
   1e5b0:	sub	r1, r1, r3
   1e5b4:	bx	lr
   1e5b8:	cmp	r1, #0
   1e5bc:	beq	1e7c8 <__assert_fail@plt+0xd2ec>
   1e5c0:	eor	ip, r0, r1
   1e5c4:	rsbmi	r1, r1, #0
   1e5c8:	subs	r2, r1, #1
   1e5cc:	beq	1e794 <__assert_fail@plt+0xd2b8>
   1e5d0:	movs	r3, r0
   1e5d4:	rsbmi	r3, r0, #0
   1e5d8:	cmp	r3, r1
   1e5dc:	bls	1e7a0 <__assert_fail@plt+0xd2c4>
   1e5e0:	tst	r1, r2
   1e5e4:	beq	1e7b0 <__assert_fail@plt+0xd2d4>
   1e5e8:	clz	r2, r3
   1e5ec:	clz	r0, r1
   1e5f0:	sub	r2, r0, r2
   1e5f4:	rsbs	r2, r2, #31
   1e5f8:	addne	r2, r2, r2, lsl #1
   1e5fc:	mov	r0, #0
   1e600:	addne	pc, pc, r2, lsl #2
   1e604:	nop			; (mov r0, r0)
   1e608:	cmp	r3, r1, lsl #31
   1e60c:	adc	r0, r0, r0
   1e610:	subcs	r3, r3, r1, lsl #31
   1e614:	cmp	r3, r1, lsl #30
   1e618:	adc	r0, r0, r0
   1e61c:	subcs	r3, r3, r1, lsl #30
   1e620:	cmp	r3, r1, lsl #29
   1e624:	adc	r0, r0, r0
   1e628:	subcs	r3, r3, r1, lsl #29
   1e62c:	cmp	r3, r1, lsl #28
   1e630:	adc	r0, r0, r0
   1e634:	subcs	r3, r3, r1, lsl #28
   1e638:	cmp	r3, r1, lsl #27
   1e63c:	adc	r0, r0, r0
   1e640:	subcs	r3, r3, r1, lsl #27
   1e644:	cmp	r3, r1, lsl #26
   1e648:	adc	r0, r0, r0
   1e64c:	subcs	r3, r3, r1, lsl #26
   1e650:	cmp	r3, r1, lsl #25
   1e654:	adc	r0, r0, r0
   1e658:	subcs	r3, r3, r1, lsl #25
   1e65c:	cmp	r3, r1, lsl #24
   1e660:	adc	r0, r0, r0
   1e664:	subcs	r3, r3, r1, lsl #24
   1e668:	cmp	r3, r1, lsl #23
   1e66c:	adc	r0, r0, r0
   1e670:	subcs	r3, r3, r1, lsl #23
   1e674:	cmp	r3, r1, lsl #22
   1e678:	adc	r0, r0, r0
   1e67c:	subcs	r3, r3, r1, lsl #22
   1e680:	cmp	r3, r1, lsl #21
   1e684:	adc	r0, r0, r0
   1e688:	subcs	r3, r3, r1, lsl #21
   1e68c:	cmp	r3, r1, lsl #20
   1e690:	adc	r0, r0, r0
   1e694:	subcs	r3, r3, r1, lsl #20
   1e698:	cmp	r3, r1, lsl #19
   1e69c:	adc	r0, r0, r0
   1e6a0:	subcs	r3, r3, r1, lsl #19
   1e6a4:	cmp	r3, r1, lsl #18
   1e6a8:	adc	r0, r0, r0
   1e6ac:	subcs	r3, r3, r1, lsl #18
   1e6b0:	cmp	r3, r1, lsl #17
   1e6b4:	adc	r0, r0, r0
   1e6b8:	subcs	r3, r3, r1, lsl #17
   1e6bc:	cmp	r3, r1, lsl #16
   1e6c0:	adc	r0, r0, r0
   1e6c4:	subcs	r3, r3, r1, lsl #16
   1e6c8:	cmp	r3, r1, lsl #15
   1e6cc:	adc	r0, r0, r0
   1e6d0:	subcs	r3, r3, r1, lsl #15
   1e6d4:	cmp	r3, r1, lsl #14
   1e6d8:	adc	r0, r0, r0
   1e6dc:	subcs	r3, r3, r1, lsl #14
   1e6e0:	cmp	r3, r1, lsl #13
   1e6e4:	adc	r0, r0, r0
   1e6e8:	subcs	r3, r3, r1, lsl #13
   1e6ec:	cmp	r3, r1, lsl #12
   1e6f0:	adc	r0, r0, r0
   1e6f4:	subcs	r3, r3, r1, lsl #12
   1e6f8:	cmp	r3, r1, lsl #11
   1e6fc:	adc	r0, r0, r0
   1e700:	subcs	r3, r3, r1, lsl #11
   1e704:	cmp	r3, r1, lsl #10
   1e708:	adc	r0, r0, r0
   1e70c:	subcs	r3, r3, r1, lsl #10
   1e710:	cmp	r3, r1, lsl #9
   1e714:	adc	r0, r0, r0
   1e718:	subcs	r3, r3, r1, lsl #9
   1e71c:	cmp	r3, r1, lsl #8
   1e720:	adc	r0, r0, r0
   1e724:	subcs	r3, r3, r1, lsl #8
   1e728:	cmp	r3, r1, lsl #7
   1e72c:	adc	r0, r0, r0
   1e730:	subcs	r3, r3, r1, lsl #7
   1e734:	cmp	r3, r1, lsl #6
   1e738:	adc	r0, r0, r0
   1e73c:	subcs	r3, r3, r1, lsl #6
   1e740:	cmp	r3, r1, lsl #5
   1e744:	adc	r0, r0, r0
   1e748:	subcs	r3, r3, r1, lsl #5
   1e74c:	cmp	r3, r1, lsl #4
   1e750:	adc	r0, r0, r0
   1e754:	subcs	r3, r3, r1, lsl #4
   1e758:	cmp	r3, r1, lsl #3
   1e75c:	adc	r0, r0, r0
   1e760:	subcs	r3, r3, r1, lsl #3
   1e764:	cmp	r3, r1, lsl #2
   1e768:	adc	r0, r0, r0
   1e76c:	subcs	r3, r3, r1, lsl #2
   1e770:	cmp	r3, r1, lsl #1
   1e774:	adc	r0, r0, r0
   1e778:	subcs	r3, r3, r1, lsl #1
   1e77c:	cmp	r3, r1
   1e780:	adc	r0, r0, r0
   1e784:	subcs	r3, r3, r1
   1e788:	cmp	ip, #0
   1e78c:	rsbmi	r0, r0, #0
   1e790:	bx	lr
   1e794:	teq	ip, r0
   1e798:	rsbmi	r0, r0, #0
   1e79c:	bx	lr
   1e7a0:	movcc	r0, #0
   1e7a4:	asreq	r0, ip, #31
   1e7a8:	orreq	r0, r0, #1
   1e7ac:	bx	lr
   1e7b0:	clz	r2, r1
   1e7b4:	rsb	r2, r2, #31
   1e7b8:	cmp	ip, #0
   1e7bc:	lsr	r0, r3, r2
   1e7c0:	rsbmi	r0, r0, #0
   1e7c4:	bx	lr
   1e7c8:	cmp	r0, #0
   1e7cc:	mvngt	r0, #-2147483648	; 0x80000000
   1e7d0:	movlt	r0, #-2147483648	; 0x80000000
   1e7d4:	b	1ecc0 <__assert_fail@plt+0xd7e4>
   1e7d8:	cmp	r1, #0
   1e7dc:	beq	1e7c8 <__assert_fail@plt+0xd2ec>
   1e7e0:	push	{r0, r1, lr}
   1e7e4:	bl	1e5c0 <__assert_fail@plt+0xd0e4>
   1e7e8:	pop	{r1, r2, lr}
   1e7ec:	mul	r3, r2, r0
   1e7f0:	sub	r1, r1, r3
   1e7f4:	bx	lr
   1e7f8:	eor	r1, r1, #-2147483648	; 0x80000000
   1e7fc:	b	1e804 <__assert_fail@plt+0xd328>
   1e800:	eor	r3, r3, #-2147483648	; 0x80000000
   1e804:	push	{r4, r5, lr}
   1e808:	lsl	r4, r1, #1
   1e80c:	lsl	r5, r3, #1
   1e810:	teq	r4, r5
   1e814:	teqeq	r0, r2
   1e818:	orrsne	ip, r4, r0
   1e81c:	orrsne	ip, r5, r2
   1e820:	mvnsne	ip, r4, asr #21
   1e824:	mvnsne	ip, r5, asr #21
   1e828:	beq	1ea14 <__assert_fail@plt+0xd538>
   1e82c:	lsr	r4, r4, #21
   1e830:	rsbs	r5, r4, r5, lsr #21
   1e834:	rsblt	r5, r5, #0
   1e838:	ble	1e858 <__assert_fail@plt+0xd37c>
   1e83c:	add	r4, r4, r5
   1e840:	eor	r2, r0, r2
   1e844:	eor	r3, r1, r3
   1e848:	eor	r0, r2, r0
   1e84c:	eor	r1, r3, r1
   1e850:	eor	r2, r0, r2
   1e854:	eor	r3, r1, r3
   1e858:	cmp	r5, #54	; 0x36
   1e85c:	pophi	{r4, r5, pc}
   1e860:	tst	r1, #-2147483648	; 0x80000000
   1e864:	lsl	r1, r1, #12
   1e868:	mov	ip, #1048576	; 0x100000
   1e86c:	orr	r1, ip, r1, lsr #12
   1e870:	beq	1e87c <__assert_fail@plt+0xd3a0>
   1e874:	rsbs	r0, r0, #0
   1e878:	rsc	r1, r1, #0
   1e87c:	tst	r3, #-2147483648	; 0x80000000
   1e880:	lsl	r3, r3, #12
   1e884:	orr	r3, ip, r3, lsr #12
   1e888:	beq	1e894 <__assert_fail@plt+0xd3b8>
   1e88c:	rsbs	r2, r2, #0
   1e890:	rsc	r3, r3, #0
   1e894:	teq	r4, r5
   1e898:	beq	1e9fc <__assert_fail@plt+0xd520>
   1e89c:	sub	r4, r4, #1
   1e8a0:	rsbs	lr, r5, #32
   1e8a4:	blt	1e8c0 <__assert_fail@plt+0xd3e4>
   1e8a8:	lsl	ip, r2, lr
   1e8ac:	adds	r0, r0, r2, lsr r5
   1e8b0:	adc	r1, r1, #0
   1e8b4:	adds	r0, r0, r3, lsl lr
   1e8b8:	adcs	r1, r1, r3, asr r5
   1e8bc:	b	1e8dc <__assert_fail@plt+0xd400>
   1e8c0:	sub	r5, r5, #32
   1e8c4:	add	lr, lr, #32
   1e8c8:	cmp	r2, #1
   1e8cc:	lsl	ip, r3, lr
   1e8d0:	orrcs	ip, ip, #2
   1e8d4:	adds	r0, r0, r3, asr r5
   1e8d8:	adcs	r1, r1, r3, asr #31
   1e8dc:	and	r5, r1, #-2147483648	; 0x80000000
   1e8e0:	bpl	1e8f0 <__assert_fail@plt+0xd414>
   1e8e4:	rsbs	ip, ip, #0
   1e8e8:	rscs	r0, r0, #0
   1e8ec:	rsc	r1, r1, #0
   1e8f0:	cmp	r1, #1048576	; 0x100000
   1e8f4:	bcc	1e934 <__assert_fail@plt+0xd458>
   1e8f8:	cmp	r1, #2097152	; 0x200000
   1e8fc:	bcc	1e91c <__assert_fail@plt+0xd440>
   1e900:	lsrs	r1, r1, #1
   1e904:	rrxs	r0, r0
   1e908:	rrx	ip, ip
   1e90c:	add	r4, r4, #1
   1e910:	lsl	r2, r4, #21
   1e914:	cmn	r2, #4194304	; 0x400000
   1e918:	bcs	1ea74 <__assert_fail@plt+0xd598>
   1e91c:	cmp	ip, #-2147483648	; 0x80000000
   1e920:	lsrseq	ip, r0, #1
   1e924:	adcs	r0, r0, #0
   1e928:	adc	r1, r1, r4, lsl #20
   1e92c:	orr	r1, r1, r5
   1e930:	pop	{r4, r5, pc}
   1e934:	lsls	ip, ip, #1
   1e938:	adcs	r0, r0, r0
   1e93c:	adc	r1, r1, r1
   1e940:	tst	r1, #1048576	; 0x100000
   1e944:	sub	r4, r4, #1
   1e948:	bne	1e91c <__assert_fail@plt+0xd440>
   1e94c:	teq	r1, #0
   1e950:	moveq	r1, r0
   1e954:	moveq	r0, #0
   1e958:	clz	r3, r1
   1e95c:	addeq	r3, r3, #32
   1e960:	sub	r3, r3, #11
   1e964:	subs	r2, r3, #32
   1e968:	bge	1e98c <__assert_fail@plt+0xd4b0>
   1e96c:	adds	r2, r2, #12
   1e970:	ble	1e988 <__assert_fail@plt+0xd4ac>
   1e974:	add	ip, r2, #20
   1e978:	rsb	r2, r2, #12
   1e97c:	lsl	r0, r1, ip
   1e980:	lsr	r1, r1, r2
   1e984:	b	1e99c <__assert_fail@plt+0xd4c0>
   1e988:	add	r2, r2, #20
   1e98c:	rsble	ip, r2, #32
   1e990:	lsl	r1, r1, r2
   1e994:	orrle	r1, r1, r0, lsr ip
   1e998:	lslle	r0, r0, r2
   1e99c:	subs	r4, r4, r3
   1e9a0:	addge	r1, r1, r4, lsl #20
   1e9a4:	orrge	r1, r1, r5
   1e9a8:	popge	{r4, r5, pc}
   1e9ac:	mvn	r4, r4
   1e9b0:	subs	r4, r4, #31
   1e9b4:	bge	1e9f0 <__assert_fail@plt+0xd514>
   1e9b8:	adds	r4, r4, #12
   1e9bc:	bgt	1e9d8 <__assert_fail@plt+0xd4fc>
   1e9c0:	add	r4, r4, #20
   1e9c4:	rsb	r2, r4, #32
   1e9c8:	lsr	r0, r0, r4
   1e9cc:	orr	r0, r0, r1, lsl r2
   1e9d0:	orr	r1, r5, r1, lsr r4
   1e9d4:	pop	{r4, r5, pc}
   1e9d8:	rsb	r4, r4, #12
   1e9dc:	rsb	r2, r4, #32
   1e9e0:	lsr	r0, r0, r2
   1e9e4:	orr	r0, r0, r1, lsl r4
   1e9e8:	mov	r1, r5
   1e9ec:	pop	{r4, r5, pc}
   1e9f0:	lsr	r0, r1, r4
   1e9f4:	mov	r1, r5
   1e9f8:	pop	{r4, r5, pc}
   1e9fc:	teq	r4, #0
   1ea00:	eor	r3, r3, #1048576	; 0x100000
   1ea04:	eoreq	r1, r1, #1048576	; 0x100000
   1ea08:	addeq	r4, r4, #1
   1ea0c:	subne	r5, r5, #1
   1ea10:	b	1e89c <__assert_fail@plt+0xd3c0>
   1ea14:	mvns	ip, r4, asr #21
   1ea18:	mvnsne	ip, r5, asr #21
   1ea1c:	beq	1ea84 <__assert_fail@plt+0xd5a8>
   1ea20:	teq	r4, r5
   1ea24:	teqeq	r0, r2
   1ea28:	beq	1ea3c <__assert_fail@plt+0xd560>
   1ea2c:	orrs	ip, r4, r0
   1ea30:	moveq	r1, r3
   1ea34:	moveq	r0, r2
   1ea38:	pop	{r4, r5, pc}
   1ea3c:	teq	r1, r3
   1ea40:	movne	r1, #0
   1ea44:	movne	r0, #0
   1ea48:	popne	{r4, r5, pc}
   1ea4c:	lsrs	ip, r4, #21
   1ea50:	bne	1ea64 <__assert_fail@plt+0xd588>
   1ea54:	lsls	r0, r0, #1
   1ea58:	adcs	r1, r1, r1
   1ea5c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1ea60:	pop	{r4, r5, pc}
   1ea64:	adds	r4, r4, #4194304	; 0x400000
   1ea68:	addcc	r1, r1, #1048576	; 0x100000
   1ea6c:	popcc	{r4, r5, pc}
   1ea70:	and	r5, r1, #-2147483648	; 0x80000000
   1ea74:	orr	r1, r5, #2130706432	; 0x7f000000
   1ea78:	orr	r1, r1, #15728640	; 0xf00000
   1ea7c:	mov	r0, #0
   1ea80:	pop	{r4, r5, pc}
   1ea84:	mvns	ip, r4, asr #21
   1ea88:	movne	r1, r3
   1ea8c:	movne	r0, r2
   1ea90:	mvnseq	ip, r5, asr #21
   1ea94:	movne	r3, r1
   1ea98:	movne	r2, r0
   1ea9c:	orrs	r4, r0, r1, lsl #12
   1eaa0:	orrseq	r5, r2, r3, lsl #12
   1eaa4:	teqeq	r1, r3
   1eaa8:	orrne	r1, r1, #524288	; 0x80000
   1eaac:	pop	{r4, r5, pc}
   1eab0:	teq	r0, #0
   1eab4:	moveq	r1, #0
   1eab8:	bxeq	lr
   1eabc:	push	{r4, r5, lr}
   1eac0:	mov	r4, #1024	; 0x400
   1eac4:	add	r4, r4, #50	; 0x32
   1eac8:	mov	r5, #0
   1eacc:	mov	r1, #0
   1ead0:	b	1e94c <__assert_fail@plt+0xd470>
   1ead4:	teq	r0, #0
   1ead8:	moveq	r1, #0
   1eadc:	bxeq	lr
   1eae0:	push	{r4, r5, lr}
   1eae4:	mov	r4, #1024	; 0x400
   1eae8:	add	r4, r4, #50	; 0x32
   1eaec:	ands	r5, r0, #-2147483648	; 0x80000000
   1eaf0:	rsbmi	r0, r0, #0
   1eaf4:	mov	r1, #0
   1eaf8:	b	1e94c <__assert_fail@plt+0xd470>
   1eafc:	lsls	r2, r0, #1
   1eb00:	asr	r1, r2, #3
   1eb04:	rrx	r1, r1
   1eb08:	lsl	r0, r2, #28
   1eb0c:	andsne	r3, r2, #-16777216	; 0xff000000
   1eb10:	teqne	r3, #-16777216	; 0xff000000
   1eb14:	eorne	r1, r1, #939524096	; 0x38000000
   1eb18:	bxne	lr
   1eb1c:	teq	r2, #0
   1eb20:	teqne	r3, #-16777216	; 0xff000000
   1eb24:	bxeq	lr
   1eb28:	push	{r4, r5, lr}
   1eb2c:	mov	r4, #896	; 0x380
   1eb30:	and	r5, r1, #-2147483648	; 0x80000000
   1eb34:	bic	r1, r1, #-2147483648	; 0x80000000
   1eb38:	b	1e94c <__assert_fail@plt+0xd470>
   1eb3c:	orrs	r2, r0, r1
   1eb40:	bxeq	lr
   1eb44:	push	{r4, r5, lr}
   1eb48:	mov	r5, #0
   1eb4c:	b	1eb6c <__assert_fail@plt+0xd690>
   1eb50:	orrs	r2, r0, r1
   1eb54:	bxeq	lr
   1eb58:	push	{r4, r5, lr}
   1eb5c:	ands	r5, r1, #-2147483648	; 0x80000000
   1eb60:	bpl	1eb6c <__assert_fail@plt+0xd690>
   1eb64:	rsbs	r0, r0, #0
   1eb68:	rsc	r1, r1, #0
   1eb6c:	mov	r4, #1024	; 0x400
   1eb70:	add	r4, r4, #50	; 0x32
   1eb74:	lsrs	ip, r1, #22
   1eb78:	beq	1e8f0 <__assert_fail@plt+0xd414>
   1eb7c:	mov	r2, #3
   1eb80:	lsrs	ip, ip, #3
   1eb84:	addne	r2, r2, #3
   1eb88:	lsrs	ip, ip, #3
   1eb8c:	addne	r2, r2, #3
   1eb90:	add	r2, r2, ip, lsr #3
   1eb94:	rsb	r3, r2, #32
   1eb98:	lsl	ip, r0, r3
   1eb9c:	lsr	r0, r0, r2
   1eba0:	orr	r0, r0, r1, lsl r3
   1eba4:	lsr	r1, r1, r2
   1eba8:	add	r4, r4, r2
   1ebac:	b	1e8f0 <__assert_fail@plt+0xd414>
   1ebb0:	cmp	r3, #0
   1ebb4:	cmpeq	r2, #0
   1ebb8:	bne	1ebdc <__assert_fail@plt+0xd700>
   1ebbc:	cmp	r1, #0
   1ebc0:	movlt	r1, #-2147483648	; 0x80000000
   1ebc4:	movlt	r0, #0
   1ebc8:	blt	1ebd8 <__assert_fail@plt+0xd6fc>
   1ebcc:	cmpeq	r0, #0
   1ebd0:	mvnne	r1, #-2147483648	; 0x80000000
   1ebd4:	mvnne	r0, #0
   1ebd8:	b	1ecc0 <__assert_fail@plt+0xd7e4>
   1ebdc:	sub	sp, sp, #8
   1ebe0:	push	{sp, lr}
   1ebe4:	cmp	r1, #0
   1ebe8:	blt	1ec08 <__assert_fail@plt+0xd72c>
   1ebec:	cmp	r3, #0
   1ebf0:	blt	1ec3c <__assert_fail@plt+0xd760>
   1ebf4:	bl	1ed18 <__assert_fail@plt+0xd83c>
   1ebf8:	ldr	lr, [sp, #4]
   1ebfc:	add	sp, sp, #8
   1ec00:	pop	{r2, r3}
   1ec04:	bx	lr
   1ec08:	rsbs	r0, r0, #0
   1ec0c:	sbc	r1, r1, r1, lsl #1
   1ec10:	cmp	r3, #0
   1ec14:	blt	1ec60 <__assert_fail@plt+0xd784>
   1ec18:	bl	1ed18 <__assert_fail@plt+0xd83c>
   1ec1c:	ldr	lr, [sp, #4]
   1ec20:	add	sp, sp, #8
   1ec24:	pop	{r2, r3}
   1ec28:	rsbs	r0, r0, #0
   1ec2c:	sbc	r1, r1, r1, lsl #1
   1ec30:	rsbs	r2, r2, #0
   1ec34:	sbc	r3, r3, r3, lsl #1
   1ec38:	bx	lr
   1ec3c:	rsbs	r2, r2, #0
   1ec40:	sbc	r3, r3, r3, lsl #1
   1ec44:	bl	1ed18 <__assert_fail@plt+0xd83c>
   1ec48:	ldr	lr, [sp, #4]
   1ec4c:	add	sp, sp, #8
   1ec50:	pop	{r2, r3}
   1ec54:	rsbs	r0, r0, #0
   1ec58:	sbc	r1, r1, r1, lsl #1
   1ec5c:	bx	lr
   1ec60:	rsbs	r2, r2, #0
   1ec64:	sbc	r3, r3, r3, lsl #1
   1ec68:	bl	1ed18 <__assert_fail@plt+0xd83c>
   1ec6c:	ldr	lr, [sp, #4]
   1ec70:	add	sp, sp, #8
   1ec74:	pop	{r2, r3}
   1ec78:	rsbs	r2, r2, #0
   1ec7c:	sbc	r3, r3, r3, lsl #1
   1ec80:	bx	lr
   1ec84:	cmp	r3, #0
   1ec88:	cmpeq	r2, #0
   1ec8c:	bne	1eca4 <__assert_fail@plt+0xd7c8>
   1ec90:	cmp	r1, #0
   1ec94:	cmpeq	r0, #0
   1ec98:	mvnne	r1, #0
   1ec9c:	mvnne	r0, #0
   1eca0:	b	1ecc0 <__assert_fail@plt+0xd7e4>
   1eca4:	sub	sp, sp, #8
   1eca8:	push	{sp, lr}
   1ecac:	bl	1ed18 <__assert_fail@plt+0xd83c>
   1ecb0:	ldr	lr, [sp, #4]
   1ecb4:	add	sp, sp, #8
   1ecb8:	pop	{r2, r3}
   1ecbc:	bx	lr
   1ecc0:	push	{r1, lr}
   1ecc4:	mov	r0, #8
   1ecc8:	bl	11164 <raise@plt>
   1eccc:	pop	{r1, pc}
   1ecd0:	vmov	d7, r0, r1
   1ecd4:	vldr	d6, [pc, #44]	; 1ed08 <__assert_fail@plt+0xd82c>
   1ecd8:	vldr	d5, [pc, #48]	; 1ed10 <__assert_fail@plt+0xd834>
   1ecdc:	mov	r0, #0
   1ece0:	vmul.f64	d6, d7, d6
   1ece4:	vcvt.u32.f64	s12, d6
   1ece8:	vcvt.f64.u32	d4, s12
   1ecec:	vmov	r1, s12
   1ecf0:	vmls.f64	d7, d4, d5
   1ecf4:	vcvt.u32.f64	s14, d7
   1ecf8:	vmov	r3, s14
   1ecfc:	orr	r0, r0, r3
   1ed00:	bx	lr
   1ed04:	nop			; (mov r0, r0)
   1ed08:	andeq	r0, r0, r0
   1ed0c:	ldclcc	0, cr0, [r0]
   1ed10:	andeq	r0, r0, r0
   1ed14:	mvnsmi	r0, r0
   1ed18:	cmp	r1, r3
   1ed1c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ed20:	cmpeq	r0, r2
   1ed24:	mov	r4, r0
   1ed28:	mov	r5, r1
   1ed2c:	ldr	r9, [sp, #28]
   1ed30:	movcc	r0, #0
   1ed34:	movcc	r1, #0
   1ed38:	bcc	1ee30 <__assert_fail@plt+0xd954>
   1ed3c:	cmp	r3, #0
   1ed40:	clzeq	ip, r2
   1ed44:	clzne	ip, r3
   1ed48:	addeq	ip, ip, #32
   1ed4c:	cmp	r5, #0
   1ed50:	clzeq	r1, r4
   1ed54:	addeq	r1, r1, #32
   1ed58:	clzne	r1, r5
   1ed5c:	sub	ip, ip, r1
   1ed60:	sub	lr, ip, #32
   1ed64:	lsl	r7, r3, ip
   1ed68:	rsb	r8, ip, #32
   1ed6c:	orr	r7, r7, r2, lsl lr
   1ed70:	orr	r7, r7, r2, lsr r8
   1ed74:	lsl	r6, r2, ip
   1ed78:	cmp	r5, r7
   1ed7c:	cmpeq	r4, r6
   1ed80:	movcc	r0, #0
   1ed84:	movcc	r1, #0
   1ed88:	bcc	1eda4 <__assert_fail@plt+0xd8c8>
   1ed8c:	mov	r3, #1
   1ed90:	subs	r4, r4, r6
   1ed94:	lsl	r1, r3, lr
   1ed98:	lsl	r0, r3, ip
   1ed9c:	orr	r1, r1, r3, lsr r8
   1eda0:	sbc	r5, r5, r7
   1eda4:	cmp	ip, #0
   1eda8:	beq	1ee30 <__assert_fail@plt+0xd954>
   1edac:	lsrs	r3, r7, #1
   1edb0:	rrx	r2, r6
   1edb4:	mov	r6, ip
   1edb8:	b	1eddc <__assert_fail@plt+0xd900>
   1edbc:	subs	r4, r4, r2
   1edc0:	sbc	r5, r5, r3
   1edc4:	adds	r4, r4, r4
   1edc8:	adc	r5, r5, r5
   1edcc:	adds	r4, r4, #1
   1edd0:	adc	r5, r5, #0
   1edd4:	subs	r6, r6, #1
   1edd8:	beq	1edf8 <__assert_fail@plt+0xd91c>
   1eddc:	cmp	r5, r3
   1ede0:	cmpeq	r4, r2
   1ede4:	bcs	1edbc <__assert_fail@plt+0xd8e0>
   1ede8:	adds	r4, r4, r4
   1edec:	adc	r5, r5, r5
   1edf0:	subs	r6, r6, #1
   1edf4:	bne	1eddc <__assert_fail@plt+0xd900>
   1edf8:	lsr	r6, r4, ip
   1edfc:	lsr	r7, r5, ip
   1ee00:	orr	r6, r6, r5, lsl r8
   1ee04:	adds	r2, r0, r4
   1ee08:	orr	r6, r6, r5, lsr lr
   1ee0c:	adc	r3, r1, r5
   1ee10:	lsl	r1, r7, ip
   1ee14:	orr	r1, r1, r6, lsl lr
   1ee18:	lsl	r0, r6, ip
   1ee1c:	orr	r1, r1, r6, lsr r8
   1ee20:	subs	r0, r2, r0
   1ee24:	mov	r4, r6
   1ee28:	mov	r5, r7
   1ee2c:	sbc	r1, r3, r1
   1ee30:	cmp	r9, #0
   1ee34:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1ee38:	strd	r4, [r9]
   1ee3c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ee40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ee44:	mov	r7, r0
   1ee48:	ldr	r6, [pc, #72]	; 1ee98 <__assert_fail@plt+0xd9bc>
   1ee4c:	ldr	r5, [pc, #72]	; 1ee9c <__assert_fail@plt+0xd9c0>
   1ee50:	add	r6, pc, r6
   1ee54:	add	r5, pc, r5
   1ee58:	sub	r6, r6, r5
   1ee5c:	mov	r8, r1
   1ee60:	mov	r9, r2
   1ee64:	bl	1112c <calloc@plt-0x20>
   1ee68:	asrs	r6, r6, #2
   1ee6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ee70:	mov	r4, #0
   1ee74:	add	r4, r4, #1
   1ee78:	ldr	r3, [r5], #4
   1ee7c:	mov	r2, r9
   1ee80:	mov	r1, r8
   1ee84:	mov	r0, r7
   1ee88:	blx	r3
   1ee8c:	cmp	r6, r4
   1ee90:	bne	1ee74 <__assert_fail@plt+0xd998>
   1ee94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ee98:	strheq	r3, [r1], -r8
   1ee9c:	strheq	r3, [r1], -r0
   1eea0:	bx	lr
   1eea4:	ldr	r3, [pc, #12]	; 1eeb8 <__assert_fail@plt+0xd9dc>
   1eea8:	mov	r1, #0
   1eeac:	add	r3, pc, r3
   1eeb0:	ldr	r2, [r3]
   1eeb4:	b	113bc <__cxa_atexit@plt>
   1eeb8:	muleq	r1, r8, r2

Disassembly of section .fini:

0001eebc <.fini>:
   1eebc:	push	{r3, lr}
   1eec0:	pop	{r3, pc}
