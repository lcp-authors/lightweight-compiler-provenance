
../repos/coreutils/src/mkfifo:     file format elf32-littlearm


Disassembly of section .init:

00011668 <.init>:
   11668:	push	{r3, lr}
   1166c:	bl	11ae4 <__assert_fail@plt+0x48>
   11670:	pop	{r3, pc}

Disassembly of section .plt:

00011674 <fstatfs64@plt-0x14>:
   11674:	push	{lr}		; (str lr, [sp, #-4]!)
   11678:	ldr	lr, [pc, #4]	; 11684 <fstatfs64@plt-0x4>
   1167c:	add	lr, pc, lr
   11680:	ldr	pc, [lr, #8]!
   11684:	andeq	sl, r1, ip, ror r9

00011688 <fstatfs64@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #106496	; 0x1a000
   11690:	ldr	pc, [ip, #2428]!	; 0x97c

00011694 <selabel_lookup@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #106496	; 0x1a000
   1169c:	ldr	pc, [ip, #2420]!	; 0x974

000116a0 <calloc@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #106496	; 0x1a000
   116a8:	ldr	pc, [ip, #2412]!	; 0x96c

000116ac <fputs_unlocked@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #106496	; 0x1a000
   116b4:	ldr	pc, [ip, #2404]!	; 0x964

000116b8 <raise@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #106496	; 0x1a000
   116c0:	ldr	pc, [ip, #2396]!	; 0x95c

000116c4 <is_selinux_enabled@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #106496	; 0x1a000
   116cc:	ldr	pc, [ip, #2388]!	; 0x954

000116d0 <strcmp@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #106496	; 0x1a000
   116d8:	ldr	pc, [ip, #2380]!	; 0x94c

000116dc <context_type_get@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #106496	; 0x1a000
   116e4:	ldr	pc, [ip, #2372]!	; 0x944

000116e8 <fflush@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #106496	; 0x1a000
   116f0:	ldr	pc, [ip, #2364]!	; 0x93c

000116f4 <lsetfilecon@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #106496	; 0x1a000
   116fc:	ldr	pc, [ip, #2356]!	; 0x934

00011700 <memmove@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #106496	; 0x1a000
   11708:	ldr	pc, [ip, #2348]!	; 0x92c

0001170c <free@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #106496	; 0x1a000
   11714:	ldr	pc, [ip, #2340]!	; 0x924

00011718 <faccessat@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #106496	; 0x1a000
   11720:	ldr	pc, [ip, #2332]!	; 0x91c

00011724 <_exit@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #106496	; 0x1a000
   1172c:	ldr	pc, [ip, #2324]!	; 0x914

00011730 <memcpy@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #106496	; 0x1a000
   11738:	ldr	pc, [ip, #2316]!	; 0x90c

0001173c <mbsinit@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #106496	; 0x1a000
   11744:	ldr	pc, [ip, #2308]!	; 0x904

00011748 <context_new@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #106496	; 0x1a000
   11750:	ldr	pc, [ip, #2300]!	; 0x8fc

00011754 <memcmp@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #106496	; 0x1a000
   1175c:	ldr	pc, [ip, #2292]!	; 0x8f4

00011760 <dcgettext@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #106496	; 0x1a000
   11768:	ldr	pc, [ip, #2284]!	; 0x8ec

0001176c <context_type_set@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #106496	; 0x1a000
   11774:	ldr	pc, [ip, #2276]!	; 0x8e4

00011778 <realloc@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #106496	; 0x1a000
   11780:	ldr	pc, [ip, #2268]!	; 0x8dc

00011784 <fgetfilecon@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #106496	; 0x1a000
   1178c:	ldr	pc, [ip, #2260]!	; 0x8d4

00011790 <textdomain@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #106496	; 0x1a000
   11798:	ldr	pc, [ip, #2252]!	; 0x8cc

0001179c <rawmemchr@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #106496	; 0x1a000
   117a4:	ldr	pc, [ip, #2244]!	; 0x8c4

000117a8 <__fxstatat64@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #106496	; 0x1a000
   117b0:	ldr	pc, [ip, #2236]!	; 0x8bc

000117b4 <iswprint@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #106496	; 0x1a000
   117bc:	ldr	pc, [ip, #2228]!	; 0x8b4

000117c0 <__fxstat64@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #106496	; 0x1a000
   117c8:	ldr	pc, [ip, #2220]!	; 0x8ac

000117cc <readlink@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #106496	; 0x1a000
   117d4:	ldr	pc, [ip, #2212]!	; 0x8a4

000117d8 <fwrite@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #106496	; 0x1a000
   117e0:	ldr	pc, [ip, #2204]!	; 0x89c

000117e4 <lseek64@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #106496	; 0x1a000
   117ec:	ldr	pc, [ip, #2196]!	; 0x894

000117f0 <__ctype_get_mb_cur_max@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #106496	; 0x1a000
   117f8:	ldr	pc, [ip, #2188]!	; 0x88c

000117fc <getcon@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #106496	; 0x1a000
   11804:	ldr	pc, [ip, #2180]!	; 0x884

00011808 <__fpending@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #106496	; 0x1a000
   11810:	ldr	pc, [ip, #2172]!	; 0x87c

00011814 <mbrtowc@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #106496	; 0x1a000
   1181c:	ldr	pc, [ip, #2164]!	; 0x874

00011820 <error@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #106496	; 0x1a000
   11828:	ldr	pc, [ip, #2156]!	; 0x86c

0001182c <open64@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #106496	; 0x1a000
   11834:	ldr	pc, [ip, #2148]!	; 0x864

00011838 <lgetfilecon@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #106496	; 0x1a000
   11840:	ldr	pc, [ip, #2140]!	; 0x85c

00011844 <malloc@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #106496	; 0x1a000
   1184c:	ldr	pc, [ip, #2132]!	; 0x854

00011850 <__libc_start_main@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #106496	; 0x1a000
   11858:	ldr	pc, [ip, #2124]!	; 0x84c

0001185c <__freading@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #106496	; 0x1a000
   11864:	ldr	pc, [ip, #2116]!	; 0x844

00011868 <__gmon_start__@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #106496	; 0x1a000
   11870:	ldr	pc, [ip, #2108]!	; 0x83c

00011874 <context_free@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #106496	; 0x1a000
   1187c:	ldr	pc, [ip, #2100]!	; 0x834

00011880 <getopt_long@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #106496	; 0x1a000
   11888:	ldr	pc, [ip, #2092]!	; 0x82c

0001188c <__ctype_b_loc@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #106496	; 0x1a000
   11894:	ldr	pc, [ip, #2084]!	; 0x824

00011898 <getcwd@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #106496	; 0x1a000
   118a0:	ldr	pc, [ip, #2076]!	; 0x81c

000118a4 <exit@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #106496	; 0x1a000
   118ac:	ldr	pc, [ip, #2068]!	; 0x814

000118b0 <getfilecon@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #106496	; 0x1a000
   118b8:	ldr	pc, [ip, #2060]!	; 0x80c

000118bc <strlen@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #106496	; 0x1a000
   118c4:	ldr	pc, [ip, #2052]!	; 0x804

000118c8 <selabel_open@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #106496	; 0x1a000
   118d0:	ldr	pc, [ip, #2044]!	; 0x7fc

000118d4 <openat64@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #106496	; 0x1a000
   118dc:	ldr	pc, [ip, #2036]!	; 0x7f4

000118e0 <setfscreatecon@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #106496	; 0x1a000
   118e8:	ldr	pc, [ip, #2028]!	; 0x7ec

000118ec <__errno_location@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #106496	; 0x1a000
   118f4:	ldr	pc, [ip, #2020]!	; 0x7e4

000118f8 <__sprintf_chk@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #106496	; 0x1a000
   11900:	ldr	pc, [ip, #2012]!	; 0x7dc

00011904 <__cxa_atexit@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #106496	; 0x1a000
   1190c:	ldr	pc, [ip, #2004]!	; 0x7d4

00011910 <memset@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #106496	; 0x1a000
   11918:	ldr	pc, [ip, #1996]!	; 0x7cc

0001191c <__printf_chk@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #106496	; 0x1a000
   11924:	ldr	pc, [ip, #1988]!	; 0x7c4

00011928 <fileno@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #106496	; 0x1a000
   11930:	ldr	pc, [ip, #1980]!	; 0x7bc

00011934 <__fprintf_chk@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #106496	; 0x1a000
   1193c:	ldr	pc, [ip, #1972]!	; 0x7b4

00011940 <fclose@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #106496	; 0x1a000
   11948:	ldr	pc, [ip, #1964]!	; 0x7ac

0001194c <fseeko64@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #106496	; 0x1a000
   11954:	ldr	pc, [ip, #1956]!	; 0x7a4

00011958 <fcntl64@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #106496	; 0x1a000
   11960:	ldr	pc, [ip, #1948]!	; 0x79c

00011964 <setlocale@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #106496	; 0x1a000
   1196c:	ldr	pc, [ip, #1940]!	; 0x794

00011970 <fsetfilecon@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #106496	; 0x1a000
   11978:	ldr	pc, [ip, #1932]!	; 0x78c

0001197c <strrchr@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #106496	; 0x1a000
   11984:	ldr	pc, [ip, #1924]!	; 0x784

00011988 <nl_langinfo@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #106496	; 0x1a000
   11990:	ldr	pc, [ip, #1916]!	; 0x77c

00011994 <readdir64@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #106496	; 0x1a000
   1199c:	ldr	pc, [ip, #1908]!	; 0x774

000119a0 <fdopendir@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #106496	; 0x1a000
   119a8:	ldr	pc, [ip, #1900]!	; 0x76c

000119ac <security_compute_create@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #106496	; 0x1a000
   119b4:	ldr	pc, [ip, #1892]!	; 0x764

000119b8 <dirfd@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #106496	; 0x1a000
   119c0:	ldr	pc, [ip, #1884]!	; 0x75c

000119c4 <fchdir@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #106496	; 0x1a000
   119cc:	ldr	pc, [ip, #1876]!	; 0x754

000119d0 <qsort@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #106496	; 0x1a000
   119d8:	ldr	pc, [ip, #1868]!	; 0x74c

000119dc <freecon@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #106496	; 0x1a000
   119e4:	ldr	pc, [ip, #1860]!	; 0x744

000119e8 <bindtextdomain@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #106496	; 0x1a000
   119f0:	ldr	pc, [ip, #1852]!	; 0x73c

000119f4 <getfscreatecon@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #106496	; 0x1a000
   119fc:	ldr	pc, [ip, #1844]!	; 0x734

00011a00 <umask@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #106496	; 0x1a000
   11a08:	ldr	pc, [ip, #1836]!	; 0x72c

00011a0c <context_str@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #106496	; 0x1a000
   11a14:	ldr	pc, [ip, #1828]!	; 0x724

00011a18 <chmod@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #106496	; 0x1a000
   11a20:	ldr	pc, [ip, #1820]!	; 0x71c

00011a24 <__xstat64@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #106496	; 0x1a000
   11a2c:	ldr	pc, [ip, #1812]!	; 0x714

00011a30 <strncmp@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #106496	; 0x1a000
   11a38:	ldr	pc, [ip, #1804]!	; 0x70c

00011a3c <abort@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #106496	; 0x1a000
   11a44:	ldr	pc, [ip, #1796]!	; 0x704

00011a48 <close@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #106496	; 0x1a000
   11a50:	ldr	pc, [ip, #1788]!	; 0x6fc

00011a54 <__lxstat64@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #106496	; 0x1a000
   11a5c:	ldr	pc, [ip, #1780]!	; 0x6f4

00011a60 <mkfifo@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #106496	; 0x1a000
   11a68:	ldr	pc, [ip, #1772]!	; 0x6ec

00011a6c <mode_to_security_class@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #106496	; 0x1a000
   11a74:	ldr	pc, [ip, #1764]!	; 0x6e4

00011a78 <closedir@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #106496	; 0x1a000
   11a80:	ldr	pc, [ip, #1756]!	; 0x6dc

00011a84 <strspn@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #106496	; 0x1a000
   11a8c:	ldr	pc, [ip, #1748]!	; 0x6d4

00011a90 <__mempcpy_chk@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #106496	; 0x1a000
   11a98:	ldr	pc, [ip, #1740]!	; 0x6cc

00011a9c <__assert_fail@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #106496	; 0x1a000
   11aa4:	ldr	pc, [ip, #1732]!	; 0x6c4

Disassembly of section .text:

00011aa8 <lchmod@@Base-0x4ea0>:
   11aa8:	mov	fp, #0
   11aac:	mov	lr, #0
   11ab0:	pop	{r1}		; (ldr r1, [sp], #4)
   11ab4:	mov	r2, sp
   11ab8:	push	{r2}		; (str r2, [sp, #-4]!)
   11abc:	push	{r0}		; (str r0, [sp, #-4]!)
   11ac0:	ldr	ip, [pc, #16]	; 11ad8 <__assert_fail@plt+0x3c>
   11ac4:	push	{ip}		; (str ip, [sp, #-4]!)
   11ac8:	ldr	r0, [pc, #12]	; 11adc <__assert_fail@plt+0x40>
   11acc:	ldr	r3, [pc, #12]	; 11ae0 <__assert_fail@plt+0x44>
   11ad0:	bl	11850 <__libc_start_main@plt>
   11ad4:	bl	11a3c <abort@plt>
   11ad8:	andeq	sl, r1, r0, lsr #17
   11adc:	andeq	r1, r1, r0, lsr lr
   11ae0:	andeq	sl, r1, r0, asr #16
   11ae4:	ldr	r3, [pc, #20]	; 11b00 <__assert_fail@plt+0x64>
   11ae8:	ldr	r2, [pc, #20]	; 11b04 <__assert_fail@plt+0x68>
   11aec:	add	r3, pc, r3
   11af0:	ldr	r2, [r3, r2]
   11af4:	cmp	r2, #0
   11af8:	bxeq	lr
   11afc:	b	11868 <__gmon_start__@plt>
   11b00:	andeq	sl, r1, ip, lsl #10
   11b04:	andeq	r0, r0, ip, ror #2
   11b08:	ldr	r0, [pc, #24]	; 11b28 <__assert_fail@plt+0x8c>
   11b0c:	ldr	r3, [pc, #24]	; 11b2c <__assert_fail@plt+0x90>
   11b10:	cmp	r3, r0
   11b14:	bxeq	lr
   11b18:	ldr	r3, [pc, #16]	; 11b30 <__assert_fail@plt+0x94>
   11b1c:	cmp	r3, #0
   11b20:	bxeq	lr
   11b24:	bx	r3
   11b28:	andeq	ip, r2, r0, asr #3
   11b2c:	andeq	ip, r2, r0, asr #3
   11b30:	andeq	r0, r0, r0
   11b34:	ldr	r0, [pc, #36]	; 11b60 <__assert_fail@plt+0xc4>
   11b38:	ldr	r1, [pc, #36]	; 11b64 <__assert_fail@plt+0xc8>
   11b3c:	sub	r1, r1, r0
   11b40:	asr	r1, r1, #2
   11b44:	add	r1, r1, r1, lsr #31
   11b48:	asrs	r1, r1, #1
   11b4c:	bxeq	lr
   11b50:	ldr	r3, [pc, #16]	; 11b68 <__assert_fail@plt+0xcc>
   11b54:	cmp	r3, #0
   11b58:	bxeq	lr
   11b5c:	bx	r3
   11b60:	andeq	ip, r2, r0, asr #3
   11b64:	andeq	ip, r2, r0, asr #3
   11b68:	andeq	r0, r0, r0
   11b6c:	push	{r4, lr}
   11b70:	ldr	r4, [pc, #24]	; 11b90 <__assert_fail@plt+0xf4>
   11b74:	ldrb	r3, [r4]
   11b78:	cmp	r3, #0
   11b7c:	popne	{r4, pc}
   11b80:	bl	11b08 <__assert_fail@plt+0x6c>
   11b84:	mov	r3, #1
   11b88:	strb	r3, [r4]
   11b8c:	pop	{r4, pc}
   11b90:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   11b94:	b	11b34 <__assert_fail@plt+0x98>
   11b98:	push	{fp, lr}
   11b9c:	mov	fp, sp
   11ba0:	sub	sp, sp, #56	; 0x38
   11ba4:	mov	r4, r0
   11ba8:	cmp	r0, #0
   11bac:	bne	11dec <__assert_fail@plt+0x350>
   11bb0:	movw	r1, #43259	; 0xa8fb
   11bb4:	mov	r0, #0
   11bb8:	mov	r2, #5
   11bbc:	movt	r1, #1
   11bc0:	bl	11760 <dcgettext@plt>
   11bc4:	mov	r1, r0
   11bc8:	movw	r0, #49640	; 0xc1e8
   11bcc:	movt	r0, #2
   11bd0:	ldr	r2, [r0]
   11bd4:	mov	r0, #1
   11bd8:	bl	1191c <__printf_chk@plt>
   11bdc:	movw	r1, #43290	; 0xa91a
   11be0:	mov	r0, #0
   11be4:	mov	r2, #5
   11be8:	movt	r1, #1
   11bec:	bl	11760 <dcgettext@plt>
   11bf0:	movw	r7, #49620	; 0xc1d4
   11bf4:	movt	r7, #2
   11bf8:	ldr	r1, [r7]
   11bfc:	bl	116ac <fputs_unlocked@plt>
   11c00:	movw	r1, #44059	; 0xac1b
   11c04:	mov	r0, #0
   11c08:	mov	r2, #5
   11c0c:	movt	r1, #1
   11c10:	bl	11760 <dcgettext@plt>
   11c14:	ldr	r1, [r7]
   11c18:	bl	116ac <fputs_unlocked@plt>
   11c1c:	movw	r1, #43340	; 0xa94c
   11c20:	mov	r0, #0
   11c24:	mov	r2, #5
   11c28:	movt	r1, #1
   11c2c:	bl	11760 <dcgettext@plt>
   11c30:	ldr	r1, [r7]
   11c34:	bl	116ac <fputs_unlocked@plt>
   11c38:	movw	r1, #43413	; 0xa995
   11c3c:	mov	r0, #0
   11c40:	mov	r2, #5
   11c44:	movt	r1, #1
   11c48:	bl	11760 <dcgettext@plt>
   11c4c:	ldr	r1, [r7]
   11c50:	bl	116ac <fputs_unlocked@plt>
   11c54:	movw	r1, #43620	; 0xaa64
   11c58:	mov	r0, #0
   11c5c:	mov	r2, #5
   11c60:	movt	r1, #1
   11c64:	bl	11760 <dcgettext@plt>
   11c68:	ldr	r1, [r7]
   11c6c:	bl	116ac <fputs_unlocked@plt>
   11c70:	movw	r1, #43665	; 0xaa91
   11c74:	mov	r0, #0
   11c78:	mov	r2, #5
   11c7c:	movt	r1, #1
   11c80:	bl	11760 <dcgettext@plt>
   11c84:	ldr	r1, [r7]
   11c88:	bl	116ac <fputs_unlocked@plt>
   11c8c:	movw	r0, #44544	; 0xae00
   11c90:	mov	r2, #48	; 0x30
   11c94:	mov	r6, sp
   11c98:	movw	r5, #43719	; 0xaac7
   11c9c:	movt	r0, #1
   11ca0:	movt	r5, #1
   11ca4:	add	r1, r0, #32
   11ca8:	add	r3, r0, #16
   11cac:	vld1.64	{d18-d19}, [r0], r2
   11cb0:	vld1.64	{d16-d17}, [r1]
   11cb4:	vld1.64	{d20-d21}, [r3]
   11cb8:	add	r1, r6, #32
   11cbc:	vldr	d22, [r0]
   11cc0:	add	r0, r6, #16
   11cc4:	vst1.64	{d16-d17}, [r1]
   11cc8:	movw	r1, #44134	; 0xac66
   11ccc:	vst1.64	{d20-d21}, [r0]
   11cd0:	mov	r0, r6
   11cd4:	vst1.64	{d18-d19}, [r0], r2
   11cd8:	movt	r1, #1
   11cdc:	vstr	d22, [r0]
   11ce0:	mov	r0, r5
   11ce4:	bl	116d0 <strcmp@plt>
   11ce8:	cmp	r0, #0
   11cec:	ldrne	r1, [r6, #8]!
   11cf0:	cmpne	r1, #0
   11cf4:	bne	11ce0 <__assert_fail@plt+0x244>
   11cf8:	ldr	r6, [r6, #4]
   11cfc:	movw	r1, #44229	; 0xacc5
   11d00:	mov	r0, #0
   11d04:	mov	r2, #5
   11d08:	movt	r1, #1
   11d0c:	bl	11760 <dcgettext@plt>
   11d10:	movw	r2, #43855	; 0xab4f
   11d14:	movw	r3, #44252	; 0xacdc
   11d18:	mov	r1, r0
   11d1c:	mov	r0, #1
   11d20:	movt	r2, #1
   11d24:	movt	r3, #1
   11d28:	bl	1191c <__printf_chk@plt>
   11d2c:	cmp	r6, #0
   11d30:	mov	r0, #5
   11d34:	mov	r1, #0
   11d38:	moveq	r6, r5
   11d3c:	bl	11964 <setlocale@plt>
   11d40:	cmp	r0, #0
   11d44:	beq	11d7c <__assert_fail@plt+0x2e0>
   11d48:	movw	r1, #44292	; 0xad04
   11d4c:	mov	r2, #3
   11d50:	movt	r1, #1
   11d54:	bl	11a30 <strncmp@plt>
   11d58:	cmp	r0, #0
   11d5c:	beq	11d7c <__assert_fail@plt+0x2e0>
   11d60:	movw	r1, #44296	; 0xad08
   11d64:	mov	r0, #0
   11d68:	mov	r2, #5
   11d6c:	movt	r1, #1
   11d70:	bl	11760 <dcgettext@plt>
   11d74:	ldr	r1, [r7]
   11d78:	bl	116ac <fputs_unlocked@plt>
   11d7c:	movw	r1, #44367	; 0xad4f
   11d80:	mov	r0, #0
   11d84:	mov	r2, #5
   11d88:	movt	r1, #1
   11d8c:	bl	11760 <dcgettext@plt>
   11d90:	movw	r2, #44252	; 0xacdc
   11d94:	mov	r1, r0
   11d98:	mov	r0, #1
   11d9c:	mov	r3, r5
   11da0:	movt	r2, #1
   11da4:	bl	1191c <__printf_chk@plt>
   11da8:	movw	r1, #44394	; 0xad6a
   11dac:	mov	r0, #0
   11db0:	mov	r2, #5
   11db4:	movt	r1, #1
   11db8:	bl	11760 <dcgettext@plt>
   11dbc:	movw	r3, #44444	; 0xad9c
   11dc0:	mov	r1, r0
   11dc4:	movw	r0, #44162	; 0xac82
   11dc8:	cmp	r6, r5
   11dcc:	mov	r2, r6
   11dd0:	movt	r0, #1
   11dd4:	movt	r3, #1
   11dd8:	moveq	r3, r0
   11ddc:	mov	r0, #1
   11de0:	bl	1191c <__printf_chk@plt>
   11de4:	mov	r0, r4
   11de8:	bl	118a4 <exit@plt>
   11dec:	movw	r0, #49616	; 0xc1d0
   11df0:	movw	r1, #43220	; 0xa8d4
   11df4:	mov	r2, #5
   11df8:	movt	r0, #2
   11dfc:	movt	r1, #1
   11e00:	ldr	r5, [r0]
   11e04:	mov	r0, #0
   11e08:	bl	11760 <dcgettext@plt>
   11e0c:	mov	r2, r0
   11e10:	movw	r0, #49640	; 0xc1e8
   11e14:	mov	r1, #1
   11e18:	movt	r0, #2
   11e1c:	ldr	r3, [r0]
   11e20:	mov	r0, r5
   11e24:	bl	11934 <__fprintf_chk@plt>
   11e28:	mov	r0, r4
   11e2c:	bl	118a4 <exit@plt>
   11e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e34:	add	fp, sp, #28
   11e38:	sub	sp, sp, #20
   11e3c:	str	r0, [sp, #16]
   11e40:	ldr	r0, [r1]
   11e44:	mov	r4, r1
   11e48:	bl	170b0 <lchmod@@Base+0x768>
   11e4c:	movw	r1, #44444	; 0xad9c
   11e50:	mov	r0, #6
   11e54:	movt	r1, #1
   11e58:	bl	11964 <setlocale@plt>
   11e5c:	movw	r6, #43859	; 0xab53
   11e60:	movw	r1, #43726	; 0xaace
   11e64:	movt	r6, #1
   11e68:	movt	r1, #1
   11e6c:	mov	r0, r6
   11e70:	bl	119e8 <bindtextdomain@plt>
   11e74:	mov	r0, r6
   11e78:	bl	11790 <textdomain@plt>
   11e7c:	movw	r0, #11940	; 0x2ea4
   11e80:	movt	r0, #1
   11e84:	bl	1a8a4 <lchmod@@Base+0x3f5c>
   11e88:	movw	r5, #43750	; 0xaae6
   11e8c:	movw	r6, #44464	; 0xadb0
   11e90:	movw	r9, #49624	; 0xc1d8
   11e94:	mov	r7, #0
   11e98:	mov	r8, #0
   11e9c:	mov	sl, #0
   11ea0:	mov	r0, #0
   11ea4:	movt	r5, #1
   11ea8:	movt	r6, #1
   11eac:	movt	r9, #2
   11eb0:	b	11eb8 <__assert_fail@plt+0x41c>
   11eb4:	ldr	r0, [r9]
   11eb8:	str	r0, [sp, #12]
   11ebc:	b	11ee4 <__assert_fail@plt+0x448>
   11ec0:	movw	r1, #43782	; 0xab06
   11ec4:	mov	r0, #0
   11ec8:	mov	r2, #5
   11ecc:	movt	r1, #1
   11ed0:	bl	11760 <dcgettext@plt>
   11ed4:	mov	r2, r0
   11ed8:	mov	r0, #0
   11edc:	mov	r1, #0
   11ee0:	bl	11820 <error@plt>
   11ee4:	ldr	r0, [sp, #16]
   11ee8:	mov	r1, r4
   11eec:	mov	r2, r5
   11ef0:	mov	r3, r6
   11ef4:	str	r7, [sp]
   11ef8:	bl	11880 <getopt_long@plt>
   11efc:	cmp	r0, #89	; 0x59
   11f00:	ble	11f98 <__assert_fail@plt+0x4fc>
   11f04:	cmp	r0, #90	; 0x5a
   11f08:	bne	11f8c <__assert_fail@plt+0x4f0>
   11f0c:	bl	116c4 <is_selinux_enabled@plt>
   11f10:	ldr	r1, [r9]
   11f14:	cmp	r0, #1
   11f18:	bge	11f28 <__assert_fail@plt+0x48c>
   11f1c:	cmp	r1, #0
   11f20:	beq	11ee4 <__assert_fail@plt+0x448>
   11f24:	b	11ec0 <__assert_fail@plt+0x424>
   11f28:	cmp	r1, #0
   11f2c:	bne	11f84 <__assert_fail@plt+0x4e8>
   11f30:	mov	r0, #0
   11f34:	mov	r1, #0
   11f38:	mov	r2, #0
   11f3c:	bl	118c8 <selabel_open@plt>
   11f40:	mov	sl, r0
   11f44:	cmp	r0, #0
   11f48:	bne	11ee4 <__assert_fail@plt+0x448>
   11f4c:	bl	118ec <__errno_location@plt>
   11f50:	ldr	r0, [r0]
   11f54:	movw	r1, #43754	; 0xaaea
   11f58:	mov	r2, #5
   11f5c:	mov	sl, #0
   11f60:	movt	r1, #1
   11f64:	str	r0, [sp, #8]
   11f68:	mov	r0, #0
   11f6c:	bl	11760 <dcgettext@plt>
   11f70:	ldr	r1, [sp, #8]
   11f74:	mov	r2, r0
   11f78:	mov	r0, #0
   11f7c:	bl	11820 <error@plt>
   11f80:	b	11ee4 <__assert_fail@plt+0x448>
   11f84:	mov	r8, r1
   11f88:	b	11ee4 <__assert_fail@plt+0x448>
   11f8c:	cmp	r0, #109	; 0x6d
   11f90:	beq	11eb4 <__assert_fail@plt+0x418>
   11f94:	b	12190 <__assert_fail@plt+0x6f4>
   11f98:	cmn	r0, #1
   11f9c:	bne	12130 <__assert_fail@plt+0x694>
   11fa0:	movw	r9, #49608	; 0xc1c8
   11fa4:	ldr	r1, [sp, #16]
   11fa8:	movt	r9, #2
   11fac:	ldr	r0, [r9]
   11fb0:	cmp	r0, r1
   11fb4:	beq	12198 <__assert_fail@plt+0x6fc>
   11fb8:	cmp	r8, #0
   11fbc:	beq	11fd0 <__assert_fail@plt+0x534>
   11fc0:	mov	r0, r8
   11fc4:	bl	118e0 <setfscreatecon@plt>
   11fc8:	cmn	r0, #1
   11fcc:	ble	121c4 <__assert_fail@plt+0x728>
   11fd0:	ldr	r0, [sp, #12]
   11fd4:	cmp	r0, #0
   11fd8:	beq	12038 <__assert_fail@plt+0x59c>
   11fdc:	bl	16a6c <lchmod@@Base+0x124>
   11fe0:	cmp	r0, #0
   11fe4:	beq	12200 <__assert_fail@plt+0x764>
   11fe8:	mov	r8, r0
   11fec:	mov	r0, #0
   11ff0:	mov	r5, #0
   11ff4:	bl	11a00 <umask@plt>
   11ff8:	mov	r6, r0
   11ffc:	bl	11a00 <umask@plt>
   12000:	movw	r0, #438	; 0x1b6
   12004:	mov	r1, #0
   12008:	mov	r2, r6
   1200c:	mov	r3, r8
   12010:	str	r5, [sp]
   12014:	bl	16f08 <lchmod@@Base+0x5c0>
   12018:	mov	r6, r0
   1201c:	mov	r0, r8
   12020:	bl	13148 <__assert_fail@plt+0x16ac>
   12024:	cmp	r6, #512	; 0x200
   12028:	bcc	1203c <__assert_fail@plt+0x5a0>
   1202c:	movw	r1, #43964	; 0xabbc
   12030:	movt	r1, #1
   12034:	b	12208 <__assert_fail@plt+0x76c>
   12038:	movw	r6, #438	; 0x1b6
   1203c:	ldr	r0, [r9]
   12040:	ldr	r1, [sp, #16]
   12044:	mov	r8, #0
   12048:	cmp	r0, r1
   1204c:	bge	12124 <__assert_fail@plt+0x688>
   12050:	mov	r8, #0
   12054:	b	12094 <__assert_fail@plt+0x5f8>
   12058:	ldr	r0, [sp, #12]
   1205c:	cmp	r0, #0
   12060:	beq	1210c <__assert_fail@plt+0x670>
   12064:	ldr	r0, [r9]
   12068:	mov	r1, r6
   1206c:	ldr	r0, [r4, r0, lsl #2]
   12070:	bl	16948 <lchmod@@Base>
   12074:	cmp	r0, #0
   12078:	beq	1210c <__assert_fail@plt+0x670>
   1207c:	bl	118ec <__errno_location@plt>
   12080:	ldr	r5, [r0]
   12084:	movw	r1, #44030	; 0xabfe
   12088:	mov	r0, #0
   1208c:	movt	r1, #1
   12090:	b	120d8 <__assert_fail@plt+0x63c>
   12094:	cmp	sl, #0
   12098:	beq	120b0 <__assert_fail@plt+0x614>
   1209c:	ldr	r1, [r4, r0, lsl #2]
   120a0:	mov	r0, sl
   120a4:	mov	r2, #4096	; 0x1000
   120a8:	bl	12224 <__assert_fail@plt+0x788>
   120ac:	ldr	r0, [r9]
   120b0:	ldr	r0, [r4, r0, lsl #2]
   120b4:	mov	r1, r6
   120b8:	bl	11a60 <mkfifo@plt>
   120bc:	cmp	r0, #0
   120c0:	beq	12058 <__assert_fail@plt+0x5bc>
   120c4:	bl	118ec <__errno_location@plt>
   120c8:	ldr	r5, [r0]
   120cc:	movw	r1, #44008	; 0xabe8
   120d0:	mov	r0, #0
   120d4:	movt	r1, #1
   120d8:	mov	r2, #5
   120dc:	bl	11760 <dcgettext@plt>
   120e0:	mov	r7, r0
   120e4:	ldr	r0, [r9]
   120e8:	ldr	r1, [r4, r0, lsl #2]
   120ec:	mov	r0, #4
   120f0:	bl	187bc <lchmod@@Base+0x1e74>
   120f4:	mov	r3, r0
   120f8:	mov	r0, #0
   120fc:	mov	r1, r5
   12100:	mov	r2, r7
   12104:	bl	11820 <error@plt>
   12108:	mov	r8, #1
   1210c:	ldr	r0, [r9]
   12110:	ldr	r1, [sp, #16]
   12114:	add	r0, r0, #1
   12118:	cmp	r0, r1
   1211c:	str	r0, [r9]
   12120:	blt	12094 <__assert_fail@plt+0x5f8>
   12124:	mov	r0, r8
   12128:	sub	sp, fp, #28
   1212c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12130:	cmn	r0, #3
   12134:	bne	12180 <__assert_fail@plt+0x6e4>
   12138:	movw	r0, #49528	; 0xc178
   1213c:	movw	r2, #43869	; 0xab5d
   12140:	mov	r1, #0
   12144:	movt	r0, #2
   12148:	movt	r2, #1
   1214c:	str	r1, [sp, #4]
   12150:	movw	r1, #43719	; 0xaac7
   12154:	ldr	r3, [r0]
   12158:	movw	r0, #49620	; 0xc1d4
   1215c:	str	r2, [sp]
   12160:	movw	r2, #43855	; 0xab4f
   12164:	movt	r1, #1
   12168:	movt	r0, #2
   1216c:	movt	r2, #1
   12170:	ldr	r0, [r0]
   12174:	bl	195bc <lchmod@@Base+0x2c74>
   12178:	mov	r0, #0
   1217c:	bl	118a4 <exit@plt>
   12180:	cmn	r0, #2
   12184:	bne	12190 <__assert_fail@plt+0x6f4>
   12188:	mov	r0, #0
   1218c:	bl	11b98 <__assert_fail@plt+0xfc>
   12190:	mov	r0, #1
   12194:	bl	11b98 <__assert_fail@plt+0xfc>
   12198:	movw	r1, #43885	; 0xab6d
   1219c:	mov	r0, #0
   121a0:	mov	r2, #5
   121a4:	movt	r1, #1
   121a8:	bl	11760 <dcgettext@plt>
   121ac:	mov	r2, r0
   121b0:	mov	r0, #0
   121b4:	mov	r1, #0
   121b8:	bl	11820 <error@plt>
   121bc:	mov	r0, #1
   121c0:	bl	11b98 <__assert_fail@plt+0xfc>
   121c4:	bl	118ec <__errno_location@plt>
   121c8:	ldr	r4, [r0]
   121cc:	movw	r1, #43901	; 0xab7d
   121d0:	mov	r0, #0
   121d4:	mov	r2, #5
   121d8:	movt	r1, #1
   121dc:	bl	11760 <dcgettext@plt>
   121e0:	mov	r5, r0
   121e4:	mov	r0, r8
   121e8:	bl	18ce4 <lchmod@@Base+0x239c>
   121ec:	mov	r3, r0
   121f0:	mov	r0, #1
   121f4:	mov	r1, r4
   121f8:	mov	r2, r5
   121fc:	bl	11820 <error@plt>
   12200:	movw	r1, #43951	; 0xabaf
   12204:	movt	r1, #1
   12208:	mov	r0, #0
   1220c:	mov	r2, #5
   12210:	bl	11760 <dcgettext@plt>
   12214:	mov	r2, r0
   12218:	mov	r0, #1
   1221c:	mov	r1, #0
   12220:	bl	11820 <error@plt>
   12224:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12228:	add	fp, sp, #24
   1222c:	sub	sp, sp, #16
   12230:	mov	r4, #0
   12234:	mov	r7, r0
   12238:	mov	r5, r2
   1223c:	mov	r6, r1
   12240:	str	r4, [sp, #4]
   12244:	str	r4, [sp]
   12248:	ldrb	r0, [r1]
   1224c:	cmp	r0, #47	; 0x2f
   12250:	beq	12270 <__assert_fail@plt+0x7d4>
   12254:	mov	r0, r6
   12258:	mov	r1, #2
   1225c:	bl	127a4 <__assert_fail@plt+0xd08>
   12260:	mov	r4, r0
   12264:	cmp	r0, #0
   12268:	mov	r6, r0
   1226c:	beq	123c4 <__assert_fail@plt+0x928>
   12270:	add	r1, sp, #4
   12274:	mov	r0, r7
   12278:	mov	r2, r6
   1227c:	mov	r3, r5
   12280:	bl	11694 <selabel_lookup@plt>
   12284:	cmn	r0, #1
   12288:	ble	1239c <__assert_fail@plt+0x900>
   1228c:	mov	r0, #0
   12290:	str	r0, [sp, #12]
   12294:	str	r0, [sp, #8]
   12298:	mov	r0, r6
   1229c:	bl	12f8c <__assert_fail@plt+0x14f0>
   122a0:	mov	r6, r0
   122a4:	add	r0, sp, #12
   122a8:	bl	117fc <getcon@plt>
   122ac:	mov	r9, #1
   122b0:	cmp	r0, #0
   122b4:	blt	122f4 <__assert_fail@plt+0x858>
   122b8:	add	r1, sp, #8
   122bc:	mov	r0, r6
   122c0:	bl	18f98 <lchmod@@Base+0x2650>
   122c4:	cmp	r0, #0
   122c8:	blt	122f4 <__assert_fail@plt+0x858>
   122cc:	mov	r0, r5
   122d0:	bl	11a6c <mode_to_security_class@plt>
   122d4:	cmp	r0, #0
   122d8:	beq	122f4 <__assert_fail@plt+0x858>
   122dc:	mov	r2, r0
   122e0:	ldr	r1, [sp, #8]
   122e4:	ldr	r0, [sp, #12]
   122e8:	mov	r3, sp
   122ec:	bl	119ac <security_compute_create@plt>
   122f0:	lsr	r9, r0, #31
   122f4:	bl	118ec <__errno_location@plt>
   122f8:	ldr	r7, [r0]
   122fc:	mov	r5, r0
   12300:	mov	r0, r6
   12304:	bl	13148 <__assert_fail@plt+0x16ac>
   12308:	ldr	r0, [sp, #12]
   1230c:	bl	119dc <freecon@plt>
   12310:	ldr	r0, [sp, #8]
   12314:	bl	119dc <freecon@plt>
   12318:	mvn	r8, #0
   1231c:	cmp	r9, #0
   12320:	str	r7, [r5]
   12324:	bne	12390 <__assert_fail@plt+0x8f4>
   12328:	ldr	r0, [sp, #4]
   1232c:	bl	11748 <context_new@plt>
   12330:	cmp	r0, #0
   12334:	beq	12390 <__assert_fail@plt+0x8f4>
   12338:	mov	r6, r0
   1233c:	ldr	r0, [sp]
   12340:	bl	11748 <context_new@plt>
   12344:	cmp	r0, #0
   12348:	beq	123e0 <__assert_fail@plt+0x944>
   1234c:	mov	r9, r0
   12350:	mov	r0, r6
   12354:	bl	116dc <context_type_get@plt>
   12358:	cmp	r0, #0
   1235c:	beq	123e4 <__assert_fail@plt+0x948>
   12360:	mov	r1, r0
   12364:	mov	r0, r9
   12368:	bl	1176c <context_type_set@plt>
   1236c:	cmp	r0, #0
   12370:	bne	123e4 <__assert_fail@plt+0x948>
   12374:	mov	r0, r9
   12378:	bl	11a0c <context_str@plt>
   1237c:	cmp	r0, #0
   12380:	beq	123e4 <__assert_fail@plt+0x948>
   12384:	bl	118e0 <setfscreatecon@plt>
   12388:	mov	r8, r0
   1238c:	b	123e4 <__assert_fail@plt+0x948>
   12390:	mov	r9, #0
   12394:	mov	r6, #0
   12398:	b	123e4 <__assert_fail@plt+0x948>
   1239c:	bl	118ec <__errno_location@plt>
   123a0:	mov	r5, r0
   123a4:	ldr	r0, [r0]
   123a8:	mvn	r8, #0
   123ac:	mov	r9, #0
   123b0:	mov	r6, #0
   123b4:	cmp	r0, #2
   123b8:	moveq	r0, #61	; 0x3d
   123bc:	streq	r0, [r5]
   123c0:	b	123e4 <__assert_fail@plt+0x948>
   123c4:	mov	r9, #0
   123c8:	mvn	r8, #0
   123cc:	bl	118ec <__errno_location@plt>
   123d0:	mov	r5, r0
   123d4:	mov	r6, #0
   123d8:	mov	r4, #0
   123dc:	b	123e4 <__assert_fail@plt+0x948>
   123e0:	mov	r9, #0
   123e4:	ldr	r7, [r5]
   123e8:	mov	r0, r6
   123ec:	bl	11874 <context_free@plt>
   123f0:	mov	r0, r9
   123f4:	bl	11874 <context_free@plt>
   123f8:	ldr	r0, [sp, #4]
   123fc:	bl	119dc <freecon@plt>
   12400:	ldr	r0, [sp]
   12404:	bl	119dc <freecon@plt>
   12408:	mov	r0, r4
   1240c:	bl	13148 <__assert_fail@plt+0x16ac>
   12410:	str	r7, [r5]
   12414:	mov	r0, r8
   12418:	sub	sp, fp, #24
   1241c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12420:	push	{r4, r5, r6, r7, fp, lr}
   12424:	add	fp, sp, #16
   12428:	sub	sp, sp, #8
   1242c:	mov	r5, r0
   12430:	ldrb	r0, [r1]
   12434:	mov	r6, r2
   12438:	mov	r4, #0
   1243c:	cmp	r0, #47	; 0x2f
   12440:	beq	12468 <__assert_fail@plt+0x9cc>
   12444:	mov	r0, r1
   12448:	mov	r1, #2
   1244c:	bl	127a4 <__assert_fail@plt+0xd08>
   12450:	mov	r4, r0
   12454:	cmp	r0, #0
   12458:	mov	r1, r0
   1245c:	moveq	r0, #0
   12460:	subeq	sp, fp, #16
   12464:	popeq	{r4, r5, r6, r7, fp, pc}
   12468:	cmp	r6, #0
   1246c:	beq	12504 <__assert_fail@plt+0xa68>
   12470:	mov	r7, #0
   12474:	mov	r0, sp
   12478:	mov	r2, #0
   1247c:	stm	sp, {r1, r7}
   12480:	mov	r1, #16
   12484:	bl	19d94 <lchmod@@Base+0x344c>
   12488:	mov	r6, r0
   1248c:	bl	13a88 <__assert_fail@plt+0x1fec>
   12490:	cmp	r0, #0
   12494:	beq	124c8 <__assert_fail@plt+0xa2c>
   12498:	mov	r7, #0
   1249c:	ldr	r1, [r6, #24]
   124a0:	mov	r0, r5
   124a4:	bl	1253c <__assert_fail@plt+0xaa0>
   124a8:	cmn	r0, #1
   124ac:	bgt	124b8 <__assert_fail@plt+0xa1c>
   124b0:	bl	118ec <__errno_location@plt>
   124b4:	ldr	r7, [r0]
   124b8:	mov	r0, r6
   124bc:	bl	13a88 <__assert_fail@plt+0x1fec>
   124c0:	cmp	r0, #0
   124c4:	bne	1249c <__assert_fail@plt+0xa00>
   124c8:	bl	118ec <__errno_location@plt>
   124cc:	mov	r5, r0
   124d0:	ldr	r0, [r0]
   124d4:	cmp	r0, #0
   124d8:	movne	r7, r0
   124dc:	mov	r0, r6
   124e0:	bl	138e8 <__assert_fail@plt+0x1e4c>
   124e4:	cmp	r0, #0
   124e8:	mov	r0, r4
   124ec:	ldrne	r7, [r5]
   124f0:	bl	13148 <__assert_fail@plt+0x16ac>
   124f4:	clz	r0, r7
   124f8:	lsr	r0, r0, #5
   124fc:	sub	sp, fp, #16
   12500:	pop	{r4, r5, r6, r7, fp, pc}
   12504:	mov	r0, r5
   12508:	bl	1253c <__assert_fail@plt+0xaa0>
   1250c:	mov	r5, r0
   12510:	bl	118ec <__errno_location@plt>
   12514:	ldr	r7, [r0]
   12518:	mov	r6, r0
   1251c:	mov	r0, r4
   12520:	bl	13148 <__assert_fail@plt+0x16ac>
   12524:	add	r0, r5, #1
   12528:	cmn	r5, #1
   1252c:	str	r7, [r6]
   12530:	movwne	r0, #1
   12534:	sub	sp, fp, #16
   12538:	pop	{r4, r5, r6, r7, fp, pc}
   1253c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12540:	add	fp, sp, #28
   12544:	sub	sp, sp, #116	; 0x74
   12548:	mov	r6, r0
   1254c:	mov	r0, #0
   12550:	mov	r7, r1
   12554:	cmp	r6, #0
   12558:	str	r0, [sp, #4]
   1255c:	str	r0, [sp]
   12560:	beq	125b4 <__assert_fail@plt+0xb18>
   12564:	mov	r0, r7
   12568:	mov	r1, #32768	; 0x8000
   1256c:	bl	1182c <open64@plt>
   12570:	mov	sl, r0
   12574:	cmn	r0, #1
   12578:	beq	125f0 <__assert_fail@plt+0xb54>
   1257c:	add	r2, sp, #8
   12580:	mov	r0, #3
   12584:	mov	r1, sl
   12588:	bl	117c0 <__fxstat64@plt>
   1258c:	mov	r5, #1
   12590:	cmn	r0, #1
   12594:	bgt	12628 <__assert_fail@plt+0xb8c>
   12598:	bl	118ec <__errno_location@plt>
   1259c:	ldr	r5, [r0]
   125a0:	mov	r4, r0
   125a4:	mov	r8, #0
   125a8:	mvn	r9, #0
   125ac:	mov	r6, #0
   125b0:	b	1274c <__assert_fail@plt+0xcb0>
   125b4:	mov	r0, sp
   125b8:	bl	119f4 <getfscreatecon@plt>
   125bc:	mvn	r9, #0
   125c0:	cmp	r0, #0
   125c4:	blt	12778 <__assert_fail@plt+0xcdc>
   125c8:	ldr	r1, [sp]
   125cc:	cmp	r1, #0
   125d0:	beq	126a8 <__assert_fail@plt+0xc0c>
   125d4:	mov	r0, r7
   125d8:	bl	116f4 <lsetfilecon@plt>
   125dc:	mov	r9, r0
   125e0:	bl	118ec <__errno_location@plt>
   125e4:	ldr	r5, [r0]
   125e8:	mov	r4, r0
   125ec:	b	1276c <__assert_fail@plt+0xcd0>
   125f0:	bl	118ec <__errno_location@plt>
   125f4:	ldr	r5, [r0]
   125f8:	mov	r4, r0
   125fc:	mov	r8, #0
   12600:	mvn	r9, #0
   12604:	cmp	r5, #40	; 0x28
   12608:	bne	126a0 <__assert_fail@plt+0xc04>
   1260c:	add	r2, sp, #8
   12610:	mov	r0, #3
   12614:	mov	r1, r7
   12618:	bl	11a54 <__lxstat64@plt>
   1261c:	mov	r5, #0
   12620:	cmn	r0, #1
   12624:	ble	12784 <__assert_fail@plt+0xce8>
   12628:	ldr	r3, [sp, #24]
   1262c:	add	r1, sp, #4
   12630:	mov	r0, r6
   12634:	mov	r2, r7
   12638:	bl	11694 <selabel_lookup@plt>
   1263c:	cmn	r0, #1
   12640:	ble	1267c <__assert_fail@plt+0xbe0>
   12644:	ldr	r0, [sp, #4]
   12648:	bl	11748 <context_new@plt>
   1264c:	mvn	r9, #0
   12650:	cmp	r0, #0
   12654:	beq	126b8 <__assert_fail@plt+0xc1c>
   12658:	mov	r8, r0
   1265c:	mov	r1, sp
   12660:	cmp	r5, #0
   12664:	beq	126c4 <__assert_fail@plt+0xc28>
   12668:	mov	r0, sl
   1266c:	bl	19080 <lchmod@@Base+0x2738>
   12670:	cmp	r0, #0
   12674:	bge	126d4 <__assert_fail@plt+0xc38>
   12678:	b	12734 <__assert_fail@plt+0xc98>
   1267c:	bl	118ec <__errno_location@plt>
   12680:	ldr	r1, [r0]
   12684:	mvn	r9, #0
   12688:	mov	r6, #0
   1268c:	mov	r8, #0
   12690:	cmp	r1, #2
   12694:	moveq	r1, #61	; 0x3d
   12698:	streq	r1, [r0]
   1269c:	b	12738 <__assert_fail@plt+0xc9c>
   126a0:	mov	r6, #0
   126a4:	b	12754 <__assert_fail@plt+0xcb8>
   126a8:	bl	118ec <__errno_location@plt>
   126ac:	mov	r1, #61	; 0x3d
   126b0:	str	r1, [r0]
   126b4:	b	12778 <__assert_fail@plt+0xcdc>
   126b8:	mov	r6, #0
   126bc:	mov	r8, #0
   126c0:	b	12738 <__assert_fail@plt+0xc9c>
   126c4:	mov	r0, r7
   126c8:	bl	1900c <lchmod@@Base+0x26c4>
   126cc:	cmp	r0, #0
   126d0:	blt	12734 <__assert_fail@plt+0xc98>
   126d4:	ldr	r0, [sp]
   126d8:	bl	11748 <context_new@plt>
   126dc:	cmp	r0, #0
   126e0:	beq	12734 <__assert_fail@plt+0xc98>
   126e4:	mov	r6, r0
   126e8:	mov	r0, r8
   126ec:	bl	116dc <context_type_get@plt>
   126f0:	cmp	r0, #0
   126f4:	beq	12738 <__assert_fail@plt+0xc9c>
   126f8:	mov	r1, r0
   126fc:	mov	r0, r6
   12700:	bl	1176c <context_type_set@plt>
   12704:	cmp	r0, #0
   12708:	bne	12738 <__assert_fail@plt+0xc9c>
   1270c:	mov	r0, r6
   12710:	bl	11a0c <context_str@plt>
   12714:	cmp	r0, #0
   12718:	beq	12738 <__assert_fail@plt+0xc9c>
   1271c:	mov	r1, r0
   12720:	cmp	r5, #0
   12724:	beq	12794 <__assert_fail@plt+0xcf8>
   12728:	mov	r0, sl
   1272c:	bl	11970 <fsetfilecon@plt>
   12730:	b	1279c <__assert_fail@plt+0xd00>
   12734:	mov	r6, #0
   12738:	bl	118ec <__errno_location@plt>
   1273c:	ldr	r5, [r0]
   12740:	mov	r4, r0
   12744:	cmn	sl, #1
   12748:	beq	12754 <__assert_fail@plt+0xcb8>
   1274c:	mov	r0, sl
   12750:	bl	11a48 <close@plt>
   12754:	mov	r0, r8
   12758:	bl	11874 <context_free@plt>
   1275c:	mov	r0, r6
   12760:	bl	11874 <context_free@plt>
   12764:	ldr	r0, [sp, #4]
   12768:	bl	119dc <freecon@plt>
   1276c:	ldr	r0, [sp]
   12770:	bl	119dc <freecon@plt>
   12774:	str	r5, [r4]
   12778:	mov	r0, r9
   1277c:	sub	sp, fp, #28
   12780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12784:	ldr	r5, [r4]
   12788:	mov	r8, #0
   1278c:	mov	r6, #0
   12790:	b	12754 <__assert_fail@plt+0xcb8>
   12794:	mov	r0, r7
   12798:	bl	116f4 <lsetfilecon@plt>
   1279c:	mov	r9, r0
   127a0:	b	12738 <__assert_fail@plt+0xc9c>
   127a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127a8:	add	fp, sp, #28
   127ac:	sub	sp, sp, #180	; 0xb4
   127b0:	sub	sp, sp, #3072	; 0xc00
   127b4:	mov	r8, r0
   127b8:	and	r7, r1, #3
   127bc:	sub	r0, r1, #1
   127c0:	tst	r0, r7
   127c4:	beq	127e4 <__assert_fail@plt+0xd48>
   127c8:	bl	118ec <__errno_location@plt>
   127cc:	mov	r1, #22
   127d0:	mov	r4, #0
   127d4:	str	r1, [r0]
   127d8:	mov	r0, r4
   127dc:	sub	sp, fp, #28
   127e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127e4:	cmp	r8, #0
   127e8:	beq	127c8 <__assert_fail@plt+0xd2c>
   127ec:	ldrb	r0, [r8]
   127f0:	cmp	r0, #0
   127f4:	beq	1286c <__assert_fail@plt+0xdd0>
   127f8:	sub	lr, fp, #1024	; 0x400
   127fc:	mov	r4, r1
   12800:	mov	r1, #1024	; 0x400
   12804:	cmp	r0, #47	; 0x2f
   12808:	sub	r2, lr, #40	; 0x28
   1280c:	str	r1, [fp, #-1060]	; 0xfffffbdc
   12810:	add	r2, r2, #8
   12814:	str	r2, [sp, #12]
   12818:	str	r2, [fp, #-1064]	; 0xfffffbd8
   1281c:	add	r2, sp, #1184	; 0x4a0
   12820:	add	r2, r2, #8
   12824:	str	r2, [sp, #1184]	; 0x4a0
   12828:	str	r2, [sp, #16]
   1282c:	add	r2, sp, #48	; 0x30
   12830:	str	r1, [sp, #1188]	; 0x4a4
   12834:	add	r5, r2, #8
   12838:	mov	r0, r5
   1283c:	str	r5, [sp, #48]	; 0x30
   12840:	str	r1, [sp, #52]	; 0x34
   12844:	str	r5, [sp, #8]
   12848:	bne	12878 <__assert_fail@plt+0xddc>
   1284c:	mov	r1, r8
   12850:	mov	r2, #0
   12854:	mov	r3, #1024	; 0x400
   12858:	bl	11a90 <__mempcpy_chk@plt>
   1285c:	mov	r6, r0
   12860:	mov	r0, #47	; 0x2f
   12864:	strb	r0, [r6], #1
   12868:	b	12898 <__assert_fail@plt+0xdfc>
   1286c:	bl	118ec <__errno_location@plt>
   12870:	mov	r1, #2
   12874:	b	127d0 <__assert_fail@plt+0xd34>
   12878:	mov	r1, #1024	; 0x400
   1287c:	bl	11898 <getcwd@plt>
   12880:	cmp	r0, #0
   12884:	beq	12da8 <__assert_fail@plt+0x130c>
   12888:	mov	r0, r5
   1288c:	mov	r1, #0
   12890:	bl	1179c <rawmemchr@plt>
   12894:	mov	r6, r0
   12898:	ldrb	r0, [r8]
   1289c:	cmp	r0, #0
   128a0:	beq	12d6c <__assert_fail@plt+0x12d0>
   128a4:	and	r1, r4, #4
   128a8:	add	r9, sp, #48	; 0x30
   128ac:	str	r7, [sp, #32]
   128b0:	str	r1, [sp, #40]	; 0x28
   128b4:	mov	r1, #0
   128b8:	str	r1, [sp, #24]
   128bc:	mov	r1, #0
   128c0:	str	r1, [sp, #36]	; 0x24
   128c4:	mov	r1, #0
   128c8:	str	r1, [sp, #20]
   128cc:	b	12d14 <__assert_fail@plt+0x1278>
   128d0:	uxtb	r0, r0
   128d4:	cmp	r0, #46	; 0x2e
   128d8:	ldrbeq	r0, [r8, #1]
   128dc:	cmpeq	r0, #46	; 0x2e
   128e0:	bne	12920 <__assert_fail@plt+0xe84>
   128e4:	add	r0, r5, #1
   128e8:	cmp	r6, r0
   128ec:	bls	12a14 <__assert_fail@plt+0xf78>
   128f0:	sub	r0, r6, #1
   128f4:	mov	r6, r0
   128f8:	cmp	r0, r5
   128fc:	bls	12a14 <__assert_fail@plt+0xf78>
   12900:	mov	r0, r6
   12904:	ldrb	r1, [r0, #-1]!
   12908:	cmp	r1, #47	; 0x2f
   1290c:	bne	128f4 <__assert_fail@plt+0xe58>
   12910:	b	12a14 <__assert_fail@plt+0xf78>
   12914:	uxtb	r0, r0
   12918:	cmp	r0, #46	; 0x2e
   1291c:	beq	12a14 <__assert_fail@plt+0xf78>
   12920:	ldrb	r0, [r6, #-1]
   12924:	add	r4, r2, #2
   12928:	str	r2, [sp, #44]	; 0x2c
   1292c:	cmp	r0, #47	; 0x2f
   12930:	movne	r0, #47	; 0x2f
   12934:	strbne	r0, [r6], #1
   12938:	ldr	r0, [sp, #52]	; 0x34
   1293c:	add	r0, r5, r0
   12940:	sub	r0, r0, r6
   12944:	cmp	r0, r4
   12948:	bcs	12980 <__assert_fail@plt+0xee4>
   1294c:	mov	r0, r9
   12950:	bl	18ef4 <lchmod@@Base+0x25ac>
   12954:	cmp	r0, #0
   12958:	beq	12e6c <__assert_fail@plt+0x13d0>
   1295c:	sub	r0, r6, r5
   12960:	ldr	r5, [sp, #48]	; 0x30
   12964:	ldr	r1, [sp, #52]	; 0x34
   12968:	add	r6, r5, r0
   1296c:	add	r0, r5, r1
   12970:	sub	r0, r0, r6
   12974:	cmp	r0, r4
   12978:	bcc	1294c <__assert_fail@plt+0xeb0>
   1297c:	ldr	r2, [sp, #44]	; 0x2c
   12980:	mov	r0, r6
   12984:	mov	r1, r8
   12988:	mvn	r3, #0
   1298c:	bl	11a90 <__mempcpy_chk@plt>
   12990:	mov	r6, r0
   12994:	mov	r0, #0
   12998:	strb	r0, [r6]
   1299c:	ldr	r0, [sp, #40]	; 0x28
   129a0:	cmp	r0, #0
   129a4:	bne	12a08 <__assert_fail@plt+0xf6c>
   129a8:	ldr	r0, [sp, #1188]	; 0x4a4
   129ac:	ldr	r7, [sp, #1184]	; 0x4a0
   129b0:	sub	r9, r0, #1
   129b4:	mov	r0, r5
   129b8:	mov	r1, r7
   129bc:	mov	r2, r9
   129c0:	bl	117cc <readlink@plt>
   129c4:	cmp	r0, r9
   129c8:	blt	129e0 <__assert_fail@plt+0xf44>
   129cc:	add	r0, sp, #1184	; 0x4a0
   129d0:	bl	18e84 <lchmod@@Base+0x253c>
   129d4:	cmp	r0, #0
   129d8:	bne	129a8 <__assert_fail@plt+0xf0c>
   129dc:	b	12e6c <__assert_fail@plt+0x13d0>
   129e0:	mov	r4, r0
   129e4:	cmp	r0, #0
   129e8:	add	r9, sp, #48	; 0x30
   129ec:	blt	12a08 <__assert_fail@plt+0xf6c>
   129f0:	ldr	r0, [sp, #24]
   129f4:	cmp	r0, #19
   129f8:	bgt	12a9c <__assert_fail@plt+0x1000>
   129fc:	add	r0, r0, #1
   12a00:	str	r0, [sp, #24]
   12a04:	b	12c04 <__assert_fail@plt+0x1168>
   12a08:	ldr	r7, [sp, #32]
   12a0c:	cmp	r7, #2
   12a10:	bne	12a28 <__assert_fail@plt+0xf8c>
   12a14:	mov	r8, sl
   12a18:	ldrb	r0, [r8]
   12a1c:	cmp	r0, #0
   12a20:	bne	12d14 <__assert_fail@plt+0x1278>
   12a24:	b	12d74 <__assert_fail@plt+0x12d8>
   12a28:	ldrb	r0, [sl]
   12a2c:	cmp	r0, #47	; 0x2f
   12a30:	bne	12b6c <__assert_fail@plt+0x10d0>
   12a34:	mov	r2, sl
   12a38:	mov	r1, r2
   12a3c:	ldrb	r3, [r2, #1]!
   12a40:	cmp	r3, #47	; 0x2f
   12a44:	beq	12a38 <__assert_fail@plt+0xf9c>
   12a48:	cmp	r3, #46	; 0x2e
   12a4c:	bne	12b64 <__assert_fail@plt+0x10c8>
   12a50:	add	r2, r1, #2
   12a54:	ldrb	r3, [r2]
   12a58:	cmp	r3, #47	; 0x2f
   12a5c:	beq	12a38 <__assert_fail@plt+0xf9c>
   12a60:	cmp	r3, #0
   12a64:	beq	12a80 <__assert_fail@plt+0xfe4>
   12a68:	cmp	r3, #46	; 0x2e
   12a6c:	bne	12b6c <__assert_fail@plt+0x10d0>
   12a70:	ldrb	r1, [r1, #3]
   12a74:	cmp	r1, #47	; 0x2f
   12a78:	cmpne	r1, #0
   12a7c:	bne	12b6c <__assert_fail@plt+0x10d0>
   12a80:	mov	r0, #47	; 0x2f
   12a84:	mov	r1, r5
   12a88:	mov	r2, #0
   12a8c:	mov	r3, #512	; 0x200
   12a90:	strh	r0, [r6]
   12a94:	mvn	r0, #99	; 0x63
   12a98:	b	12b90 <__assert_fail@plt+0x10f4>
   12a9c:	ldrb	r0, [r8]
   12aa0:	cmp	r0, #0
   12aa4:	beq	12c04 <__assert_fail@plt+0x1168>
   12aa8:	ldr	r9, [sp, #44]	; 0x2c
   12aac:	mov	r0, #0
   12ab0:	add	lr, sp, #1024	; 0x400
   12ab4:	mov	r1, r5
   12ab8:	add	r2, lr, #56	; 0x38
   12abc:	strb	r0, [r6, -r9]
   12ac0:	ldrb	r0, [r5]
   12ac4:	cmp	r0, #0
   12ac8:	movw	r0, #44635	; 0xae5b
   12acc:	movt	r0, #1
   12ad0:	moveq	r1, r0
   12ad4:	mov	r0, #3
   12ad8:	bl	11a24 <__xstat64@plt>
   12adc:	cmp	r0, #0
   12ae0:	bne	12e7c <__assert_fail@plt+0x13e0>
   12ae4:	rsb	r0, r9, #0
   12ae8:	ldr	r9, [sp, #20]
   12aec:	ldrb	r1, [r8]
   12af0:	cmp	r9, #0
   12af4:	strb	r1, [r6, r0]
   12af8:	bne	12b30 <__assert_fail@plt+0x1094>
   12afc:	movw	r0, #26712	; 0x6858
   12b00:	movw	r2, #26568	; 0x67c8
   12b04:	movw	r3, #26624	; 0x6800
   12b08:	mov	r1, #0
   12b0c:	movt	r0, #1
   12b10:	movt	r2, #1
   12b14:	movt	r3, #1
   12b18:	str	r0, [sp]
   12b1c:	mov	r0, #7
   12b20:	bl	159a0 <__assert_fail@plt+0x3f04>
   12b24:	mov	r9, r0
   12b28:	cmp	r0, #0
   12b2c:	beq	12e6c <__assert_fail@plt+0x13d0>
   12b30:	add	lr, sp, #1024	; 0x400
   12b34:	mov	r0, r9
   12b38:	mov	r1, r8
   12b3c:	add	r2, lr, #56	; 0x38
   12b40:	bl	130fc <__assert_fail@plt+0x1660>
   12b44:	cmp	r0, #0
   12b48:	str	r9, [sp, #20]
   12b4c:	beq	12bf0 <__assert_fail@plt+0x1154>
   12b50:	ldr	r7, [sp, #32]
   12b54:	cmp	r7, #2
   12b58:	bne	12e70 <__assert_fail@plt+0x13d4>
   12b5c:	mov	r8, sl
   12b60:	b	12cd0 <__assert_fail@plt+0x1234>
   12b64:	cmp	r3, #0
   12b68:	beq	12a80 <__assert_fail@plt+0xfe4>
   12b6c:	ldr	r1, [sp, #40]	; 0x28
   12b70:	cmp	r1, #0
   12b74:	beq	12ba0 <__assert_fail@plt+0x1104>
   12b78:	cmp	r0, #0
   12b7c:	bne	12a14 <__assert_fail@plt+0xf78>
   12b80:	mvn	r0, #99	; 0x63
   12b84:	mov	r1, r5
   12b88:	mov	r2, #0
   12b8c:	mov	r3, #512	; 0x200
   12b90:	bl	11718 <faccessat@plt>
   12b94:	cmp	r0, #0
   12b98:	bne	12bb0 <__assert_fail@plt+0x1114>
   12b9c:	b	12a14 <__assert_fail@plt+0xf78>
   12ba0:	bl	118ec <__errno_location@plt>
   12ba4:	ldr	r0, [r0]
   12ba8:	cmp	r0, #22
   12bac:	beq	12a14 <__assert_fail@plt+0xf78>
   12bb0:	mov	r4, #1
   12bb4:	cmp	r7, #1
   12bb8:	bne	12d94 <__assert_fail@plt+0x12f8>
   12bbc:	bl	118ec <__errno_location@plt>
   12bc0:	ldr	r0, [r0]
   12bc4:	cmp	r0, #2
   12bc8:	bne	12d94 <__assert_fail@plt+0x12f8>
   12bcc:	movw	r1, #45833	; 0xb309
   12bd0:	mov	r0, sl
   12bd4:	movt	r1, #1
   12bd8:	bl	11a84 <strspn@plt>
   12bdc:	ldrb	r0, [sl, r0]
   12be0:	mov	r8, sl
   12be4:	cmp	r0, #0
   12be8:	beq	12a18 <__assert_fail@plt+0xf7c>
   12bec:	b	12d94 <__assert_fail@plt+0x12f8>
   12bf0:	add	lr, sp, #1024	; 0x400
   12bf4:	mov	r0, r9
   12bf8:	mov	r1, r8
   12bfc:	add	r2, lr, #56	; 0x38
   12c00:	bl	13080 <__assert_fail@plt+0x15e4>
   12c04:	mov	r0, #0
   12c08:	strb	r0, [r7, r4]
   12c0c:	ldr	r0, [sp, #36]	; 0x24
   12c10:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   12c14:	tst	r0, #1
   12c18:	ldr	r0, [sp, #28]
   12c1c:	subne	r0, sl, r8
   12c20:	str	r0, [sp, #28]
   12c24:	mov	r0, sl
   12c28:	bl	118bc <strlen@plt>
   12c2c:	adds	r9, r0, r4
   12c30:	str	r0, [sp, #44]	; 0x2c
   12c34:	bcs	12e6c <__assert_fail@plt+0x13d0>
   12c38:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   12c3c:	cmp	r0, r9
   12c40:	bhi	12c68 <__assert_fail@plt+0x11cc>
   12c44:	sub	lr, fp, #1024	; 0x400
   12c48:	sub	r0, lr, #40	; 0x28
   12c4c:	bl	18ef4 <lchmod@@Base+0x25ac>
   12c50:	cmp	r0, #0
   12c54:	beq	12e6c <__assert_fail@plt+0x13d0>
   12c58:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   12c5c:	cmp	r0, r9
   12c60:	bls	12c44 <__assert_fail@plt+0x11a8>
   12c64:	ldr	r8, [fp, #-1064]	; 0xfffffbd8
   12c68:	ldr	r0, [sp, #36]	; 0x24
   12c6c:	ldr	r1, [sp, #44]	; 0x2c
   12c70:	tst	r0, #1
   12c74:	ldr	r0, [sp, #28]
   12c78:	add	r2, r1, #1
   12c7c:	addne	sl, r8, r0
   12c80:	add	r0, r8, r4
   12c84:	mov	r1, sl
   12c88:	bl	11700 <memmove@plt>
   12c8c:	mov	r0, r8
   12c90:	mov	r1, r7
   12c94:	mov	r2, r4
   12c98:	bl	11730 <memcpy@plt>
   12c9c:	ldrb	r0, [r7]
   12ca0:	cmp	r0, #47	; 0x2f
   12ca4:	bne	12cd8 <__assert_fail@plt+0x123c>
   12ca8:	mov	r0, r5
   12cac:	mov	r1, r7
   12cb0:	mov	r2, #0
   12cb4:	mvn	r3, #0
   12cb8:	bl	11a90 <__mempcpy_chk@plt>
   12cbc:	mov	r6, r0
   12cc0:	mov	r0, #47	; 0x2f
   12cc4:	strb	r0, [r6], #1
   12cc8:	mov	r0, #1
   12ccc:	str	r0, [sp, #36]	; 0x24
   12cd0:	add	r9, sp, #48	; 0x30
   12cd4:	b	12a18 <__assert_fail@plt+0xf7c>
   12cd8:	add	r0, r5, #1
   12cdc:	mov	r1, #1
   12ce0:	add	r9, sp, #48	; 0x30
   12ce4:	cmp	r6, r0
   12ce8:	str	r1, [sp, #36]	; 0x24
   12cec:	bls	12a18 <__assert_fail@plt+0xf7c>
   12cf0:	sub	r0, r6, #1
   12cf4:	mov	r6, r0
   12cf8:	cmp	r0, r5
   12cfc:	bls	12a18 <__assert_fail@plt+0xf7c>
   12d00:	mov	r0, r6
   12d04:	ldrb	r1, [r0, #-1]!
   12d08:	cmp	r1, #47	; 0x2f
   12d0c:	bne	12cf4 <__assert_fail@plt+0x1258>
   12d10:	b	12a18 <__assert_fail@plt+0xf7c>
   12d14:	uxtb	r1, r0
   12d18:	cmp	r1, #47	; 0x2f
   12d1c:	bne	12d2c <__assert_fail@plt+0x1290>
   12d20:	ldrb	r0, [r8, #1]!
   12d24:	cmp	r0, #47	; 0x2f
   12d28:	beq	12d20 <__assert_fail@plt+0x1284>
   12d2c:	mov	r1, r0
   12d30:	mov	sl, r8
   12d34:	b	12d3c <__assert_fail@plt+0x12a0>
   12d38:	ldrb	r1, [sl, #1]!
   12d3c:	uxtb	r1, r1
   12d40:	cmp	r1, #0
   12d44:	cmpne	r1, #47	; 0x2f
   12d48:	bne	12d38 <__assert_fail@plt+0x129c>
   12d4c:	sub	r2, sl, r8
   12d50:	cmp	r2, #1
   12d54:	beq	12914 <__assert_fail@plt+0xe78>
   12d58:	cmp	r2, #2
   12d5c:	beq	128d0 <__assert_fail@plt+0xe34>
   12d60:	cmp	r2, #0
   12d64:	bne	12920 <__assert_fail@plt+0xe84>
   12d68:	b	12d74 <__assert_fail@plt+0x12d8>
   12d6c:	mov	r0, #0
   12d70:	str	r0, [sp, #20]
   12d74:	add	r0, r5, #1
   12d78:	cmp	r6, r0
   12d7c:	bls	12d90 <__assert_fail@plt+0x12f4>
   12d80:	mov	r0, r6
   12d84:	ldrb	r1, [r0, #-1]!
   12d88:	cmp	r1, #47	; 0x2f
   12d8c:	moveq	r6, r0
   12d90:	mov	r4, #0
   12d94:	ldr	r0, [sp, #20]
   12d98:	cmp	r0, #0
   12d9c:	beq	12e00 <__assert_fail@plt+0x1364>
   12da0:	bl	15c98 <__assert_fail@plt+0x41fc>
   12da4:	b	12e00 <__assert_fail@plt+0x1364>
   12da8:	bl	118ec <__errno_location@plt>
   12dac:	ldr	r5, [sp, #8]
   12db0:	mov	r6, r0
   12db4:	add	r9, sp, #48	; 0x30
   12db8:	ldr	r0, [r6]
   12dbc:	cmp	r0, #34	; 0x22
   12dc0:	bne	12df0 <__assert_fail@plt+0x1354>
   12dc4:	mov	r0, r9
   12dc8:	bl	18e84 <lchmod@@Base+0x253c>
   12dcc:	cmp	r0, #0
   12dd0:	beq	12e6c <__assert_fail@plt+0x13d0>
   12dd4:	ldr	r5, [sp, #48]	; 0x30
   12dd8:	ldr	r1, [sp, #52]	; 0x34
   12ddc:	mov	r0, r5
   12de0:	bl	11898 <getcwd@plt>
   12de4:	cmp	r0, #0
   12de8:	beq	12db8 <__assert_fail@plt+0x131c>
   12dec:	b	12888 <__assert_fail@plt+0xdec>
   12df0:	cmp	r0, #12
   12df4:	beq	12e6c <__assert_fail@plt+0x13d0>
   12df8:	mov	r4, #1
   12dfc:	mov	r6, r5
   12e00:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   12e04:	ldr	r1, [sp, #12]
   12e08:	cmp	r0, r1
   12e0c:	beq	12e14 <__assert_fail@plt+0x1378>
   12e10:	bl	13148 <__assert_fail@plt+0x16ac>
   12e14:	ldr	r0, [sp, #1184]	; 0x4a0
   12e18:	ldr	r1, [sp, #16]
   12e1c:	cmp	r0, r1
   12e20:	beq	12e28 <__assert_fail@plt+0x138c>
   12e24:	bl	13148 <__assert_fail@plt+0x16ac>
   12e28:	cmp	r4, #0
   12e2c:	beq	12e4c <__assert_fail@plt+0x13b0>
   12e30:	ldr	r0, [sp, #48]	; 0x30
   12e34:	ldr	r1, [sp, #8]
   12e38:	mov	r4, #0
   12e3c:	cmp	r0, r1
   12e40:	beq	127d8 <__assert_fail@plt+0xd3c>
   12e44:	bl	13148 <__assert_fail@plt+0x16ac>
   12e48:	b	127d8 <__assert_fail@plt+0xd3c>
   12e4c:	mov	r0, #0
   12e50:	strb	r0, [r6], #1
   12e54:	add	r0, sp, #48	; 0x30
   12e58:	sub	r1, r6, r5
   12e5c:	bl	18e1c <lchmod@@Base+0x24d4>
   12e60:	mov	r4, r0
   12e64:	cmp	r0, #0
   12e68:	bne	127d8 <__assert_fail@plt+0xd3c>
   12e6c:	bl	19d50 <lchmod@@Base+0x3408>
   12e70:	bl	118ec <__errno_location@plt>
   12e74:	mov	r1, #40	; 0x28
   12e78:	str	r1, [r0]
   12e7c:	mov	r4, #1
   12e80:	b	12d94 <__assert_fail@plt+0x12f8>
   12e84:	movw	r1, #49632	; 0xc1e0
   12e88:	movt	r1, #2
   12e8c:	str	r0, [r1]
   12e90:	bx	lr
   12e94:	movw	r1, #49636	; 0xc1e4
   12e98:	movt	r1, #2
   12e9c:	strb	r0, [r1]
   12ea0:	bx	lr
   12ea4:	push	{r4, r5, r6, sl, fp, lr}
   12ea8:	add	fp, sp, #16
   12eac:	sub	sp, sp, #8
   12eb0:	movw	r0, #49620	; 0xc1d4
   12eb4:	movt	r0, #2
   12eb8:	ldr	r0, [r0]
   12ebc:	bl	19f6c <lchmod@@Base+0x3624>
   12ec0:	cmp	r0, #0
   12ec4:	beq	12eec <__assert_fail@plt+0x1450>
   12ec8:	movw	r0, #49636	; 0xc1e4
   12ecc:	movt	r0, #2
   12ed0:	ldrb	r0, [r0]
   12ed4:	cmp	r0, #0
   12ed8:	beq	12f0c <__assert_fail@plt+0x1470>
   12edc:	bl	118ec <__errno_location@plt>
   12ee0:	ldr	r0, [r0]
   12ee4:	cmp	r0, #32
   12ee8:	bne	12f0c <__assert_fail@plt+0x1470>
   12eec:	movw	r0, #49616	; 0xc1d0
   12ef0:	movt	r0, #2
   12ef4:	ldr	r0, [r0]
   12ef8:	bl	19f6c <lchmod@@Base+0x3624>
   12efc:	cmp	r0, #0
   12f00:	subeq	sp, fp, #16
   12f04:	popeq	{r4, r5, r6, sl, fp, pc}
   12f08:	b	12f7c <__assert_fail@plt+0x14e0>
   12f0c:	movw	r1, #44615	; 0xae47
   12f10:	mov	r0, #0
   12f14:	mov	r2, #5
   12f18:	movt	r1, #1
   12f1c:	bl	11760 <dcgettext@plt>
   12f20:	mov	r4, r0
   12f24:	movw	r0, #49632	; 0xc1e0
   12f28:	movt	r0, #2
   12f2c:	ldr	r6, [r0]
   12f30:	bl	118ec <__errno_location@plt>
   12f34:	ldr	r5, [r0]
   12f38:	cmp	r6, #0
   12f3c:	bne	12f58 <__assert_fail@plt+0x14bc>
   12f40:	movw	r2, #44631	; 0xae57
   12f44:	mov	r0, #0
   12f48:	mov	r1, r5
   12f4c:	mov	r3, r4
   12f50:	movt	r2, #1
   12f54:	b	12f78 <__assert_fail@plt+0x14dc>
   12f58:	mov	r0, r6
   12f5c:	bl	1895c <lchmod@@Base+0x2014>
   12f60:	movw	r2, #44627	; 0xae53
   12f64:	mov	r3, r0
   12f68:	str	r4, [sp]
   12f6c:	mov	r0, #0
   12f70:	mov	r1, r5
   12f74:	movt	r2, #1
   12f78:	bl	11820 <error@plt>
   12f7c:	movw	r0, #49532	; 0xc17c
   12f80:	movt	r0, #2
   12f84:	ldr	r0, [r0]
   12f88:	bl	11724 <_exit@plt>
   12f8c:	push	{fp, lr}
   12f90:	mov	fp, sp
   12f94:	bl	12fec <__assert_fail@plt+0x1550>
   12f98:	cmp	r0, #0
   12f9c:	popne	{fp, pc}
   12fa0:	bl	19d50 <lchmod@@Base+0x3408>
   12fa4:	push	{r4, r5, r6, sl, fp, lr}
   12fa8:	add	fp, sp, #16
   12fac:	mov	r5, r0
   12fb0:	mov	r4, r0
   12fb4:	ldrb	r6, [r5], #-1
   12fb8:	bl	19ee8 <lchmod@@Base+0x35a0>
   12fbc:	sub	r2, r0, r4
   12fc0:	sub	r0, r6, #47	; 0x2f
   12fc4:	clz	r0, r0
   12fc8:	lsr	r1, r0, #5
   12fcc:	mov	r0, r2
   12fd0:	cmp	r2, r1
   12fd4:	popls	{r4, r5, r6, sl, fp, pc}
   12fd8:	ldrb	r3, [r5, r0]
   12fdc:	sub	r2, r0, #1
   12fe0:	cmp	r3, #47	; 0x2f
   12fe4:	beq	12fcc <__assert_fail@plt+0x1530>
   12fe8:	pop	{r4, r5, r6, sl, fp, pc}
   12fec:	push	{r4, r5, r6, sl, fp, lr}
   12ff0:	add	fp, sp, #16
   12ff4:	mov	r6, r0
   12ff8:	mov	r4, r0
   12ffc:	ldrb	r5, [r6], #-1
   13000:	bl	19ee8 <lchmod@@Base+0x35a0>
   13004:	sub	r1, r0, r4
   13008:	sub	r0, r5, #47	; 0x2f
   1300c:	clz	r0, r0
   13010:	lsr	r0, r0, #5
   13014:	mov	r5, r1
   13018:	cmp	r1, r0
   1301c:	bls	13030 <__assert_fail@plt+0x1594>
   13020:	ldrb	r2, [r6, r5]
   13024:	sub	r1, r5, #1
   13028:	cmp	r2, #47	; 0x2f
   1302c:	beq	13014 <__assert_fail@plt+0x1578>
   13030:	cmp	r5, #0
   13034:	mov	r0, r5
   13038:	addeq	r0, r0, #1
   1303c:	add	r0, r0, #1
   13040:	bl	19e64 <lchmod@@Base+0x351c>
   13044:	mov	r6, r0
   13048:	cmp	r0, #0
   1304c:	beq	13078 <__assert_fail@plt+0x15dc>
   13050:	mov	r0, r6
   13054:	mov	r1, r4
   13058:	mov	r2, r5
   1305c:	bl	11730 <memcpy@plt>
   13060:	cmp	r5, #0
   13064:	moveq	r0, #46	; 0x2e
   13068:	moveq	r5, #1
   1306c:	strbeq	r0, [r6]
   13070:	mov	r0, #0
   13074:	strb	r0, [r6, r5]
   13078:	mov	r0, r6
   1307c:	pop	{r4, r5, r6, sl, fp, pc}
   13080:	push	{r4, r5, r6, r7, fp, lr}
   13084:	add	fp, sp, #16
   13088:	cmp	r0, #0
   1308c:	popeq	{r4, r5, r6, r7, fp, pc}
   13090:	mov	r5, r0
   13094:	mov	r0, #24
   13098:	mov	r6, r2
   1309c:	mov	r7, r1
   130a0:	bl	197f0 <lchmod@@Base+0x2ea8>
   130a4:	mov	r4, r0
   130a8:	mov	r0, r7
   130ac:	bl	19d10 <lchmod@@Base+0x33c8>
   130b0:	str	r0, [r4]
   130b4:	ldrd	r0, [r6, #96]	; 0x60
   130b8:	str	r1, [r4, #12]
   130bc:	str	r0, [r4, #8]
   130c0:	ldrd	r0, [r6]
   130c4:	str	r1, [r4, #20]
   130c8:	str	r0, [r4, #16]
   130cc:	mov	r0, r5
   130d0:	mov	r1, r4
   130d4:	bl	164e4 <__assert_fail@plt+0x4a48>
   130d8:	cmp	r0, #0
   130dc:	beq	130f8 <__assert_fail@plt+0x165c>
   130e0:	cmp	r0, r4
   130e4:	beq	130f4 <__assert_fail@plt+0x1658>
   130e8:	mov	r0, r4
   130ec:	pop	{r4, r5, r6, r7, fp, lr}
   130f0:	b	16858 <__assert_fail@plt+0x4dbc>
   130f4:	pop	{r4, r5, r6, r7, fp, pc}
   130f8:	bl	19d50 <lchmod@@Base+0x3408>
   130fc:	cmp	r0, #0
   13100:	moveq	r0, #0
   13104:	bxeq	lr
   13108:	push	{r4, r5, fp, lr}
   1310c:	add	fp, sp, #8
   13110:	sub	sp, sp, #24
   13114:	str	r1, [sp]
   13118:	mov	r1, sp
   1311c:	ldrd	r4, [r2, #96]	; 0x60
   13120:	str	r5, [sp, #12]
   13124:	str	r4, [sp, #8]
   13128:	ldrd	r2, [r2]
   1312c:	str	r3, [sp, #20]
   13130:	str	r2, [sp, #16]
   13134:	bl	156f0 <__assert_fail@plt+0x3c54>
   13138:	cmp	r0, #0
   1313c:	movwne	r0, #1
   13140:	sub	sp, fp, #8
   13144:	pop	{r4, r5, fp, pc}
   13148:	push	{r4, r5, r6, sl, fp, lr}
   1314c:	add	fp, sp, #16
   13150:	mov	r4, r0
   13154:	bl	118ec <__errno_location@plt>
   13158:	ldr	r6, [r0]
   1315c:	mov	r5, r0
   13160:	mov	r0, r4
   13164:	bl	1170c <free@plt>
   13168:	str	r6, [r5]
   1316c:	pop	{r4, r5, r6, sl, fp, pc}
   13170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13174:	add	fp, sp, #28
   13178:	sub	sp, sp, #28
   1317c:	cmp	r1, #4096	; 0x1000
   13180:	bcs	1319c <__assert_fail@plt+0x1700>
   13184:	mov	r7, r0
   13188:	and	r0, r1, #516	; 0x204
   1318c:	mov	r5, r1
   13190:	cmp	r0, #516	; 0x204
   13194:	tstne	r5, #18
   13198:	bne	131b8 <__assert_fail@plt+0x171c>
   1319c:	bl	118ec <__errno_location@plt>
   131a0:	mov	r1, #22
   131a4:	mov	r4, #0
   131a8:	str	r1, [r0]
   131ac:	mov	r0, r4
   131b0:	sub	sp, fp, #28
   131b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131b8:	mov	r0, #1
   131bc:	mov	r1, #96	; 0x60
   131c0:	mov	sl, r2
   131c4:	bl	19e10 <lchmod@@Base+0x34c8>
   131c8:	cmp	r0, #0
   131cc:	beq	135bc <__assert_fail@plt+0x1b20>
   131d0:	mov	r4, r0
   131d4:	mvn	r0, #99	; 0x63
   131d8:	tst	r5, #2
   131dc:	mov	r1, r5
   131e0:	str	r0, [r4, #32]
   131e4:	bic	r0, r5, #516	; 0x204
   131e8:	str	sl, [r4, #44]	; 0x2c
   131ec:	str	r4, [sp, #24]
   131f0:	orrne	r1, r0, #4
   131f4:	str	r1, [r4, #48]	; 0x30
   131f8:	ldr	r0, [r7]
   131fc:	cmp	r0, #0
   13200:	beq	13238 <__assert_fail@plt+0x179c>
   13204:	add	r6, r7, #4
   13208:	mov	r4, #0
   1320c:	bl	118bc <strlen@plt>
   13210:	cmp	r0, r4
   13214:	movhi	r4, r0
   13218:	ldr	r0, [r6], #4
   1321c:	cmp	r0, #0
   13220:	bne	1320c <__assert_fail@plt+0x1770>
   13224:	add	r0, r4, #1
   13228:	ldr	r4, [sp, #24]
   1322c:	cmp	r0, #4096	; 0x1000
   13230:	movls	r0, #4096	; 0x1000
   13234:	b	1323c <__assert_fail@plt+0x17a0>
   13238:	mov	r0, #4096	; 0x1000
   1323c:	ldr	r1, [r4, #36]	; 0x24
   13240:	add	r0, r0, #256	; 0x100
   13244:	adds	r1, r0, r1
   13248:	bcc	1326c <__assert_fail@plt+0x17d0>
   1324c:	ldr	r0, [r4, #24]
   13250:	bl	13148 <__assert_fail@plt+0x16ac>
   13254:	mov	r0, #0
   13258:	str	r0, [r4, #24]
   1325c:	bl	118ec <__errno_location@plt>
   13260:	mov	r1, #36	; 0x24
   13264:	str	r1, [r0]
   13268:	b	135b4 <__assert_fail@plt+0x1b18>
   1326c:	str	r1, [r4, #36]	; 0x24
   13270:	ldr	r0, [r4, #24]
   13274:	bl	19e94 <lchmod@@Base+0x354c>
   13278:	cmp	r0, #0
   1327c:	beq	132e0 <__assert_fail@plt+0x1844>
   13280:	str	r0, [r4, #24]
   13284:	ldr	r0, [r7]
   13288:	cmp	r0, #0
   1328c:	beq	132f4 <__assert_fail@plt+0x1858>
   13290:	mov	r0, #176	; 0xb0
   13294:	bl	19e64 <lchmod@@Base+0x351c>
   13298:	cmp	r0, #0
   1329c:	beq	135ac <__assert_fail@plt+0x1b10>
   132a0:	ldr	r1, [r4, #24]
   132a4:	mov	r8, r0
   132a8:	mov	r0, #0
   132ac:	mov	r2, #196608	; 0x30000
   132b0:	strb	r0, [r8, #168]	; 0xa8
   132b4:	str	r2, [r8, #58]	; 0x3a
   132b8:	mvn	r2, #0
   132bc:	str	r0, [r8, #12]
   132c0:	str	r0, [r8, #16]
   132c4:	str	r0, [r8, #20]
   132c8:	str	r4, [r8, #44]	; 0x2c
   132cc:	str	r2, [r8, #48]	; 0x30
   132d0:	str	r0, [r8, #52]	; 0x34
   132d4:	str	r1, [r8, #28]
   132d8:	str	r0, [r8, #32]
   132dc:	b	132f8 <__assert_fail@plt+0x185c>
   132e0:	ldr	r0, [r4, #24]
   132e4:	bl	13148 <__assert_fail@plt+0x16ac>
   132e8:	mov	r0, #0
   132ec:	str	r0, [r4, #24]
   132f0:	b	135b4 <__assert_fail@plt+0x1b18>
   132f4:	mov	r8, #0
   132f8:	cmp	sl, #0
   132fc:	ldrbne	r0, [r4, #49]	; 0x31
   13300:	ubfxne	r0, r0, #2, #1
   13304:	ldr	r4, [r7]
   13308:	moveq	r0, #1
   1330c:	cmp	r4, #0
   13310:	beq	1347c <__assert_fail@plt+0x19e0>
   13314:	eor	r0, r0, #1
   13318:	and	r1, r5, #2048	; 0x800
   1331c:	mov	r9, #0
   13320:	mov	r6, #0
   13324:	str	r8, [sp, #16]
   13328:	str	sl, [sp, #8]
   1332c:	str	r0, [sp, #12]
   13330:	mov	r0, #0
   13334:	str	r1, [sp, #20]
   13338:	str	r0, [sp, #4]
   1333c:	mov	r0, r4
   13340:	bl	118bc <strlen@plt>
   13344:	mov	r8, r0
   13348:	ldr	r0, [sp, #20]
   1334c:	cmp	r0, #0
   13350:	bne	13388 <__assert_fail@plt+0x18ec>
   13354:	cmp	r8, #3
   13358:	bcc	13388 <__assert_fail@plt+0x18ec>
   1335c:	add	r0, r4, r8
   13360:	ldrb	r0, [r0, #-1]
   13364:	cmp	r0, #47	; 0x2f
   13368:	bne	13388 <__assert_fail@plt+0x18ec>
   1336c:	sub	r0, r4, #2
   13370:	ldrb	r1, [r0, r8]
   13374:	cmp	r1, #47	; 0x2f
   13378:	bne	13388 <__assert_fail@plt+0x18ec>
   1337c:	sub	r8, r8, #1
   13380:	cmp	r8, #1
   13384:	bhi	13370 <__assert_fail@plt+0x18d4>
   13388:	add	r0, r8, #176	; 0xb0
   1338c:	bic	r0, r0, #7
   13390:	bl	19e64 <lchmod@@Base+0x351c>
   13394:	cmp	r0, #0
   13398:	beq	13488 <__assert_fail@plt+0x19ec>
   1339c:	add	sl, r0, #168	; 0xa8
   133a0:	mov	r5, r0
   133a4:	mov	r1, r4
   133a8:	mov	r2, r8
   133ac:	mov	r0, sl
   133b0:	bl	11730 <memcpy@plt>
   133b4:	ldr	r0, [sp, #24]
   133b8:	mov	r4, #0
   133bc:	mov	r2, #196608	; 0x30000
   133c0:	strb	r4, [sl, r8]
   133c4:	str	r2, [r5, #58]	; 0x3a
   133c8:	add	r2, r5, #44	; 0x2c
   133cc:	ldr	r1, [r0, #24]
   133d0:	stm	r2, {r0, r4, r8}
   133d4:	ldr	r8, [sp, #16]
   133d8:	ldr	r2, [sp, #12]
   133dc:	str	r8, [r5, #4]
   133e0:	str	r4, [r5, #12]
   133e4:	str	r4, [r5, #16]
   133e8:	str	r4, [r5, #20]
   133ec:	str	sl, [r5, #24]
   133f0:	str	r1, [r5, #28]
   133f4:	clz	r1, r9
   133f8:	str	r4, [r5, #32]
   133fc:	lsr	r1, r1, #5
   13400:	orrs	r1, r2, r1
   13404:	bne	1341c <__assert_fail@plt+0x1980>
   13408:	mov	r0, #2
   1340c:	str	r0, [r5, #112]	; 0x70
   13410:	str	r4, [r5, #116]	; 0x74
   13414:	mov	r0, #11
   13418:	b	13428 <__assert_fail@plt+0x198c>
   1341c:	mov	r1, r5
   13420:	mov	r2, #0
   13424:	bl	1364c <__assert_fail@plt+0x1bb0>
   13428:	ldr	sl, [sp, #8]
   1342c:	strh	r0, [r5, #56]	; 0x38
   13430:	cmp	sl, #0
   13434:	beq	13444 <__assert_fail@plt+0x19a8>
   13438:	str	r9, [r5, #8]
   1343c:	mov	r9, r5
   13440:	b	1345c <__assert_fail@plt+0x19c0>
   13444:	cmp	r9, #0
   13448:	str	r4, [r5, #8]
   1344c:	beq	13470 <__assert_fail@plt+0x19d4>
   13450:	ldr	r0, [sp, #4]
   13454:	str	r5, [sp, #4]
   13458:	str	r5, [r0, #8]
   1345c:	ldr	r4, [r7, #4]!
   13460:	add	r6, r6, #1
   13464:	cmp	r4, #0
   13468:	bne	1333c <__assert_fail@plt+0x18a0>
   1346c:	b	13498 <__assert_fail@plt+0x19fc>
   13470:	mov	r0, r5
   13474:	str	r5, [sp, #4]
   13478:	b	1343c <__assert_fail@plt+0x19a0>
   1347c:	ldr	r4, [sp, #24]
   13480:	mov	r9, #0
   13484:	b	134c8 <__assert_fail@plt+0x1a2c>
   13488:	ldr	r8, [sp, #16]
   1348c:	cmp	r9, #0
   13490:	bne	13578 <__assert_fail@plt+0x1adc>
   13494:	b	135a0 <__assert_fail@plt+0x1b04>
   13498:	cmp	sl, #0
   1349c:	beq	134c4 <__assert_fail@plt+0x1a28>
   134a0:	ldr	r4, [sp, #24]
   134a4:	cmp	r6, #2
   134a8:	bcc	134c8 <__assert_fail@plt+0x1a2c>
   134ac:	mov	r0, r4
   134b0:	mov	r1, r9
   134b4:	mov	r2, r6
   134b8:	bl	137e4 <__assert_fail@plt+0x1d48>
   134bc:	mov	r9, r0
   134c0:	b	134c8 <__assert_fail@plt+0x1a2c>
   134c4:	ldr	r4, [sp, #24]
   134c8:	mov	r0, #176	; 0xb0
   134cc:	bl	19e64 <lchmod@@Base+0x351c>
   134d0:	cmp	r0, #0
   134d4:	beq	13568 <__assert_fail@plt+0x1acc>
   134d8:	ldr	r2, [r4, #24]
   134dc:	mov	r1, #0
   134e0:	mov	r3, #196608	; 0x30000
   134e4:	str	r0, [r4]
   134e8:	str	r1, [r0, #52]	; 0x34
   134ec:	strb	r1, [r0, #168]	; 0xa8
   134f0:	str	r4, [r0, #44]	; 0x2c
   134f4:	str	r3, [r0, #58]	; 0x3a
   134f8:	str	r2, [r0, #28]
   134fc:	mov	r2, #9
   13500:	str	r1, [r0, #32]
   13504:	strh	r2, [r0, #56]	; 0x38
   13508:	str	r9, [r0, #8]
   1350c:	str	r1, [r0, #12]
   13510:	str	r1, [r0, #16]
   13514:	str	r1, [r0, #20]
   13518:	mov	r1, #1
   1351c:	str	r1, [r0, #48]	; 0x30
   13520:	ldrh	r0, [r4, #48]	; 0x30
   13524:	movw	r1, #258	; 0x102
   13528:	tst	r0, r1
   1352c:	beq	135c4 <__assert_fail@plt+0x1b28>
   13530:	movw	r0, #12616	; 0x3148
   13534:	movw	r2, #21264	; 0x5310
   13538:	movw	r3, #21296	; 0x5330
   1353c:	mov	r1, #0
   13540:	movt	r0, #1
   13544:	movt	r2, #1
   13548:	movt	r3, #1
   1354c:	str	r0, [sp]
   13550:	mov	r0, #31
   13554:	bl	159a0 <__assert_fail@plt+0x3f04>
   13558:	cmp	r0, #0
   1355c:	str	r0, [r4, #56]	; 0x38
   13560:	bne	135dc <__assert_fail@plt+0x1b40>
   13564:	b	13570 <__assert_fail@plt+0x1ad4>
   13568:	mov	r0, #0
   1356c:	str	r0, [r4]
   13570:	cmp	r9, #0
   13574:	beq	135a0 <__assert_fail@plt+0x1b04>
   13578:	ldrd	r4, [r9, #8]
   1357c:	cmp	r5, #0
   13580:	beq	1358c <__assert_fail@plt+0x1af0>
   13584:	mov	r0, r5
   13588:	bl	11a78 <closedir@plt>
   1358c:	mov	r0, r9
   13590:	bl	13148 <__assert_fail@plt+0x16ac>
   13594:	cmp	r4, #0
   13598:	mov	r9, r4
   1359c:	bne	13578 <__assert_fail@plt+0x1adc>
   135a0:	mov	r0, r8
   135a4:	bl	13148 <__assert_fail@plt+0x16ac>
   135a8:	ldr	r4, [sp, #24]
   135ac:	ldr	r0, [r4, #24]
   135b0:	bl	13148 <__assert_fail@plt+0x16ac>
   135b4:	mov	r0, r4
   135b8:	bl	13148 <__assert_fail@plt+0x16ac>
   135bc:	mov	r4, #0
   135c0:	b	131ac <__assert_fail@plt+0x1710>
   135c4:	mov	r0, #32
   135c8:	bl	19e64 <lchmod@@Base+0x351c>
   135cc:	cmp	r0, #0
   135d0:	str	r0, [r4, #56]	; 0x38
   135d4:	beq	13570 <__assert_fail@plt+0x1ad4>
   135d8:	bl	19ff0 <lchmod@@Base+0x36a8>
   135dc:	ldr	r4, [sp, #24]
   135e0:	ldr	r0, [r4, #48]	; 0x30
   135e4:	tst	r0, #516	; 0x204
   135e8:	bne	1363c <__assert_fail@plt+0x1ba0>
   135ec:	mov	r1, #32768	; 0x8000
   135f0:	tst	r0, #512	; 0x200
   135f4:	and	r1, r1, r0, lsl #11
   135f8:	orr	r1, r1, #18688	; 0x4900
   135fc:	orr	r2, r1, #524288	; 0x80000
   13600:	bne	13618 <__assert_fail@plt+0x1b7c>
   13604:	movw	r0, #44635	; 0xae5b
   13608:	mov	r1, r2
   1360c:	movt	r0, #1
   13610:	bl	1a360 <lchmod@@Base+0x3a18>
   13614:	b	13628 <__assert_fail@plt+0x1b8c>
   13618:	ldr	r0, [r4, #32]
   1361c:	movw	r1, #44635	; 0xae5b
   13620:	movt	r1, #1
   13624:	bl	17010 <lchmod@@Base+0x6c8>
   13628:	str	r0, [r4, #28]
   1362c:	cmn	r0, #1
   13630:	ldrle	r0, [r4, #48]	; 0x30
   13634:	orrle	r0, r0, #4
   13638:	strle	r0, [r4, #48]	; 0x30
   1363c:	add	r0, r4, #60	; 0x3c
   13640:	mvn	r1, #0
   13644:	bl	16878 <__assert_fail@plt+0x4ddc>
   13648:	b	131ac <__assert_fail@plt+0x1710>
   1364c:	push	{r4, r5, r6, sl, fp, lr}
   13650:	add	fp, sp, #16
   13654:	sub	sp, sp, #8
   13658:	mov	r4, r1
   1365c:	ldr	r1, [r0, #48]	; 0x30
   13660:	ldr	r3, [r4, #48]	; 0x30
   13664:	add	r5, r4, #64	; 0x40
   13668:	cmp	r3, #0
   1366c:	andeq	r3, r1, #1
   13670:	orreq	r2, r3, r2
   13674:	cmp	r2, #0
   13678:	andseq	r1, r1, #2
   1367c:	beq	136d8 <__assert_fail@plt+0x1c3c>
   13680:	ldr	r1, [r4, #24]
   13684:	mov	r0, #3
   13688:	mov	r2, r5
   1368c:	bl	11a24 <__xstat64@plt>
   13690:	cmp	r0, #0
   13694:	beq	13758 <__assert_fail@plt+0x1cbc>
   13698:	bl	118ec <__errno_location@plt>
   1369c:	mov	r6, r0
   136a0:	ldr	r0, [r0]
   136a4:	cmp	r0, #2
   136a8:	bne	13708 <__assert_fail@plt+0x1c6c>
   136ac:	ldr	r1, [r4, #24]
   136b0:	mov	r0, #3
   136b4:	mov	r2, r5
   136b8:	bl	11a54 <__lxstat64@plt>
   136bc:	cmp	r0, #0
   136c0:	bne	13704 <__assert_fail@plt+0x1c68>
   136c4:	mov	r0, #0
   136c8:	str	r0, [r6]
   136cc:	mov	r0, #13
   136d0:	sub	sp, fp, #16
   136d4:	pop	{r4, r5, r6, sl, fp, pc}
   136d8:	ldr	r1, [r0, #32]
   136dc:	ldr	r2, [r4, #24]
   136e0:	mov	r0, #256	; 0x100
   136e4:	mov	r3, r5
   136e8:	str	r0, [sp]
   136ec:	mov	r0, #3
   136f0:	bl	117a8 <__fxstatat64@plt>
   136f4:	cmp	r0, #0
   136f8:	beq	13758 <__assert_fail@plt+0x1cbc>
   136fc:	bl	118ec <__errno_location@plt>
   13700:	mov	r6, r0
   13704:	ldr	r0, [r6]
   13708:	vmov.i32	q8, #0	; 0x00000000
   1370c:	add	r1, r5, #80	; 0x50
   13710:	str	r0, [r4, #32]
   13714:	mov	r0, #0
   13718:	vst1.64	{d16-d17}, [r1]
   1371c:	add	r1, r5, #64	; 0x40
   13720:	str	r0, [r5, #96]	; 0x60
   13724:	vst1.64	{d16-d17}, [r1]
   13728:	add	r1, r5, #48	; 0x30
   1372c:	vst1.64	{d16-d17}, [r1]
   13730:	add	r1, r5, #32
   13734:	vst1.64	{d16-d17}, [r1]
   13738:	add	r1, r5, #16
   1373c:	vst1.64	{d16-d17}, [r1]
   13740:	mov	r1, #100	; 0x64
   13744:	vst1.64	{d16-d17}, [r5], r1
   13748:	str	r0, [r5]
   1374c:	mov	r0, #10
   13750:	sub	sp, fp, #16
   13754:	pop	{r4, r5, r6, sl, fp, pc}
   13758:	ldr	r0, [r4, #80]	; 0x50
   1375c:	and	r0, r0, #61440	; 0xf000
   13760:	cmp	r0, #40960	; 0xa000
   13764:	beq	137c0 <__assert_fail@plt+0x1d24>
   13768:	cmp	r0, #32768	; 0x8000
   1376c:	moveq	r0, #8
   13770:	subeq	sp, fp, #16
   13774:	popeq	{r4, r5, r6, sl, fp, pc}
   13778:	cmp	r0, #16384	; 0x4000
   1377c:	bne	137b4 <__assert_fail@plt+0x1d18>
   13780:	ldrb	r1, [r4, #168]	; 0xa8
   13784:	mov	r0, #1
   13788:	cmp	r1, #46	; 0x2e
   1378c:	bne	137ac <__assert_fail@plt+0x1d10>
   13790:	ldrb	r1, [r4, #169]	; 0xa9
   13794:	cmp	r1, #0
   13798:	beq	137cc <__assert_fail@plt+0x1d30>
   1379c:	cmp	r1, #46	; 0x2e
   137a0:	ldrbeq	r1, [r4, #170]	; 0xaa
   137a4:	cmpeq	r1, #0
   137a8:	beq	137cc <__assert_fail@plt+0x1d30>
   137ac:	sub	sp, fp, #16
   137b0:	pop	{r4, r5, r6, sl, fp, pc}
   137b4:	mov	r0, #3
   137b8:	sub	sp, fp, #16
   137bc:	pop	{r4, r5, r6, sl, fp, pc}
   137c0:	mov	r0, #12
   137c4:	sub	sp, fp, #16
   137c8:	pop	{r4, r5, r6, sl, fp, pc}
   137cc:	ldr	r1, [r4, #48]	; 0x30
   137d0:	mov	r0, #5
   137d4:	cmp	r1, #0
   137d8:	movweq	r0, #1
   137dc:	sub	sp, fp, #16
   137e0:	pop	{r4, r5, r6, sl, fp, pc}
   137e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   137e8:	add	fp, sp, #24
   137ec:	ldrd	r8, [r0, #40]	; 0x28
   137f0:	mov	r5, r2
   137f4:	mov	r4, r1
   137f8:	mov	r6, r0
   137fc:	cmp	r8, r2
   13800:	bcs	13840 <__assert_fail@plt+0x1da4>
   13804:	add	r1, r5, #40	; 0x28
   13808:	cmn	r1, #-1073741823	; 0xc0000001
   1380c:	str	r1, [r6, #40]	; 0x28
   13810:	bhi	138cc <__assert_fail@plt+0x1e30>
   13814:	add	r7, r6, #8
   13818:	lsl	r1, r1, #2
   1381c:	ldr	r0, [r7]
   13820:	bl	19e94 <lchmod@@Base+0x354c>
   13824:	cmp	r0, #0
   13828:	beq	138cc <__assert_fail@plt+0x1e30>
   1382c:	mov	r6, r7
   13830:	str	r0, [r7]
   13834:	cmp	r4, #0
   13838:	bne	1384c <__assert_fail@plt+0x1db0>
   1383c:	b	13860 <__assert_fail@plt+0x1dc4>
   13840:	ldr	r0, [r6, #8]!
   13844:	cmp	r4, #0
   13848:	beq	13860 <__assert_fail@plt+0x1dc4>
   1384c:	str	r4, [r0], #4
   13850:	ldr	r4, [r4, #8]
   13854:	cmp	r4, #0
   13858:	bne	1384c <__assert_fail@plt+0x1db0>
   1385c:	ldr	r0, [r6]
   13860:	mov	r1, r5
   13864:	mov	r2, #4
   13868:	mov	r3, r9
   1386c:	bl	119d0 <qsort@plt>
   13870:	ldr	r7, [r6]
   13874:	subs	r0, r5, #1
   13878:	ldr	r4, [r7]
   1387c:	mov	r1, r4
   13880:	beq	138bc <__assert_fail@plt+0x1e20>
   13884:	mov	r1, r7
   13888:	cmp	r5, #2
   1388c:	ldr	r2, [r1, #4]!
   13890:	str	r2, [r4, #8]
   13894:	beq	138b8 <__assert_fail@plt+0x1e1c>
   13898:	rsb	r3, r5, #2
   1389c:	mov	r2, r1
   138a0:	ldr	r6, [r2, #4]!
   138a4:	ldr	r1, [r1]
   138a8:	adds	r3, r3, #1
   138ac:	str	r6, [r1, #8]
   138b0:	mov	r1, r2
   138b4:	bne	138a0 <__assert_fail@plt+0x1e04>
   138b8:	ldr	r1, [r7, r0, lsl #2]
   138bc:	mov	r0, #0
   138c0:	str	r0, [r1, #8]
   138c4:	mov	r0, r4
   138c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   138cc:	ldr	r0, [r6, #8]
   138d0:	bl	13148 <__assert_fail@plt+0x16ac>
   138d4:	mov	r0, #0
   138d8:	str	r0, [r6, #40]	; 0x28
   138dc:	str	r0, [r6, #8]
   138e0:	mov	r0, r4
   138e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   138e8:	push	{r4, r5, r6, r7, fp, lr}
   138ec:	add	fp, sp, #16
   138f0:	mov	r4, r0
   138f4:	ldr	r0, [r0]
   138f8:	cmp	r0, #0
   138fc:	beq	1393c <__assert_fail@plt+0x1ea0>
   13900:	ldr	r1, [r0, #48]	; 0x30
   13904:	cmp	r1, #0
   13908:	blt	13930 <__assert_fail@plt+0x1e94>
   1390c:	ldr	r5, [r0, #8]
   13910:	cmp	r5, #0
   13914:	ldreq	r5, [r0, #4]
   13918:	bl	13148 <__assert_fail@plt+0x16ac>
   1391c:	ldr	r0, [r5, #48]	; 0x30
   13920:	cmn	r0, #1
   13924:	mov	r0, r5
   13928:	bgt	1390c <__assert_fail@plt+0x1e70>
   1392c:	b	13934 <__assert_fail@plt+0x1e98>
   13930:	mov	r5, r0
   13934:	mov	r0, r5
   13938:	bl	13148 <__assert_fail@plt+0x16ac>
   1393c:	ldr	r5, [r4, #4]
   13940:	cmp	r5, #0
   13944:	beq	13970 <__assert_fail@plt+0x1ed4>
   13948:	ldrd	r6, [r5, #8]
   1394c:	cmp	r7, #0
   13950:	beq	1395c <__assert_fail@plt+0x1ec0>
   13954:	mov	r0, r7
   13958:	bl	11a78 <closedir@plt>
   1395c:	mov	r0, r5
   13960:	bl	13148 <__assert_fail@plt+0x16ac>
   13964:	cmp	r6, #0
   13968:	mov	r5, r6
   1396c:	bne	13948 <__assert_fail@plt+0x1eac>
   13970:	ldr	r0, [r4, #8]
   13974:	bl	13148 <__assert_fail@plt+0x16ac>
   13978:	ldr	r0, [r4, #24]
   1397c:	bl	13148 <__assert_fail@plt+0x16ac>
   13980:	ldr	r0, [r4, #48]	; 0x30
   13984:	tst	r0, #512	; 0x200
   13988:	bne	139b4 <__assert_fail@plt+0x1f18>
   1398c:	mov	r6, #0
   13990:	tst	r0, #4
   13994:	bne	139f8 <__assert_fail@plt+0x1f5c>
   13998:	ldr	r0, [r4, #28]
   1399c:	bl	119c4 <fchdir@plt>
   139a0:	cmp	r0, #0
   139a4:	beq	139d4 <__assert_fail@plt+0x1f38>
   139a8:	bl	118ec <__errno_location@plt>
   139ac:	ldr	r6, [r0]
   139b0:	b	139d8 <__assert_fail@plt+0x1f3c>
   139b4:	ldr	r0, [r4, #32]
   139b8:	mov	r6, #0
   139bc:	cmp	r0, #0
   139c0:	blt	139f8 <__assert_fail@plt+0x1f5c>
   139c4:	bl	11a48 <close@plt>
   139c8:	cmp	r0, #0
   139cc:	bne	139f0 <__assert_fail@plt+0x1f54>
   139d0:	b	139f8 <__assert_fail@plt+0x1f5c>
   139d4:	mov	r6, #0
   139d8:	ldr	r0, [r4, #28]
   139dc:	bl	11a48 <close@plt>
   139e0:	cmp	r6, #0
   139e4:	bne	139f8 <__assert_fail@plt+0x1f5c>
   139e8:	cmp	r0, #0
   139ec:	beq	139f8 <__assert_fail@plt+0x1f5c>
   139f0:	bl	118ec <__errno_location@plt>
   139f4:	ldr	r6, [r0]
   139f8:	add	r5, r4, #60	; 0x3c
   139fc:	b	13a04 <__assert_fail@plt+0x1f68>
   13a00:	bl	11a48 <close@plt>
   13a04:	mov	r0, r5
   13a08:	bl	1689c <__assert_fail@plt+0x4e00>
   13a0c:	cmp	r0, #0
   13a10:	bne	13a28 <__assert_fail@plt+0x1f8c>
   13a14:	mov	r0, r5
   13a18:	bl	168f0 <__assert_fail@plt+0x4e54>
   13a1c:	cmp	r0, #0
   13a20:	bge	13a00 <__assert_fail@plt+0x1f64>
   13a24:	b	13a04 <__assert_fail@plt+0x1f68>
   13a28:	ldr	r0, [r4, #52]	; 0x34
   13a2c:	cmp	r0, #0
   13a30:	beq	13a38 <__assert_fail@plt+0x1f9c>
   13a34:	bl	15c98 <__assert_fail@plt+0x41fc>
   13a38:	ldrh	r0, [r4, #48]	; 0x30
   13a3c:	movw	r1, #258	; 0x102
   13a40:	tst	r0, r1
   13a44:	beq	13a5c <__assert_fail@plt+0x1fc0>
   13a48:	ldr	r0, [r4, #56]	; 0x38
   13a4c:	cmp	r0, #0
   13a50:	beq	13a64 <__assert_fail@plt+0x1fc8>
   13a54:	bl	15c98 <__assert_fail@plt+0x41fc>
   13a58:	b	13a64 <__assert_fail@plt+0x1fc8>
   13a5c:	ldr	r0, [r4, #56]	; 0x38
   13a60:	bl	13148 <__assert_fail@plt+0x16ac>
   13a64:	mov	r0, r4
   13a68:	bl	13148 <__assert_fail@plt+0x16ac>
   13a6c:	cmp	r6, #0
   13a70:	moveq	r0, #0
   13a74:	popeq	{r4, r5, r6, r7, fp, pc}
   13a78:	bl	118ec <__errno_location@plt>
   13a7c:	str	r6, [r0]
   13a80:	mvn	r0, #0
   13a84:	pop	{r4, r5, r6, r7, fp, pc}
   13a88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13a8c:	add	fp, sp, #24
   13a90:	sub	sp, sp, #8
   13a94:	ldr	r6, [r0]
   13a98:	mov	r5, #0
   13a9c:	cmp	r6, #0
   13aa0:	beq	141d4 <__assert_fail@plt+0x2738>
   13aa4:	mov	r4, r0
   13aa8:	ldr	r0, [r0, #48]	; 0x30
   13aac:	tst	r0, #8192	; 0x2000
   13ab0:	bne	141d4 <__assert_fail@plt+0x2738>
   13ab4:	ldrh	r1, [r6, #60]	; 0x3c
   13ab8:	mov	r2, #3
   13abc:	strh	r2, [r6, #60]	; 0x3c
   13ac0:	cmp	r1, #1
   13ac4:	beq	13b3c <__assert_fail@plt+0x20a0>
   13ac8:	mov	r7, r6
   13acc:	cmp	r1, #2
   13ad0:	bne	13b58 <__assert_fail@plt+0x20bc>
   13ad4:	ldrh	r2, [r7, #56]!	; 0x38
   13ad8:	movw	r3, #65534	; 0xfffe
   13adc:	and	r3, r2, r3
   13ae0:	cmp	r3, #12
   13ae4:	bne	13b5c <__assert_fail@plt+0x20c0>
   13ae8:	mov	r0, r4
   13aec:	mov	r1, r6
   13af0:	mov	r2, #1
   13af4:	bl	1364c <__assert_fail@plt+0x1bb0>
   13af8:	cmp	r0, #1
   13afc:	strh	r0, [r6, #56]	; 0x38
   13b00:	bne	13c44 <__assert_fail@plt+0x21a8>
   13b04:	ldr	r0, [r4, #48]	; 0x30
   13b08:	tst	r0, #4
   13b0c:	bne	13c44 <__assert_fail@plt+0x21a8>
   13b10:	mov	r1, #32768	; 0x8000
   13b14:	tst	r0, #512	; 0x200
   13b18:	and	r1, r1, r0, lsl #11
   13b1c:	orr	r1, r1, #18688	; 0x4900
   13b20:	orr	r2, r1, #524288	; 0x80000
   13b24:	bne	13eb0 <__assert_fail@plt+0x2414>
   13b28:	movw	r0, #44635	; 0xae5b
   13b2c:	mov	r1, r2
   13b30:	movt	r0, #1
   13b34:	bl	1a360 <lchmod@@Base+0x3a18>
   13b38:	b	13ec0 <__assert_fail@plt+0x2424>
   13b3c:	mov	r0, r4
   13b40:	mov	r1, r6
   13b44:	mov	r2, #0
   13b48:	bl	1364c <__assert_fail@plt+0x1bb0>
   13b4c:	strh	r0, [r6, #56]	; 0x38
   13b50:	mov	r5, r6
   13b54:	b	141d4 <__assert_fail@plt+0x2738>
   13b58:	ldrh	r2, [r7, #56]!	; 0x38
   13b5c:	cmp	r2, #1
   13b60:	bne	13bd8 <__assert_fail@plt+0x213c>
   13b64:	cmp	r1, #4
   13b68:	bne	13c4c <__assert_fail@plt+0x21b0>
   13b6c:	ldrb	r0, [r6, #58]	; 0x3a
   13b70:	tst	r0, #2
   13b74:	beq	13b80 <__assert_fail@plt+0x20e4>
   13b78:	ldr	r0, [r6, #36]	; 0x24
   13b7c:	bl	11a48 <close@plt>
   13b80:	ldr	r5, [r4, #4]
   13b84:	cmp	r5, #0
   13b88:	beq	13bbc <__assert_fail@plt+0x2120>
   13b8c:	ldrd	r8, [r5, #8]
   13b90:	cmp	r9, #0
   13b94:	beq	13ba0 <__assert_fail@plt+0x2104>
   13b98:	mov	r0, r9
   13b9c:	bl	11a78 <closedir@plt>
   13ba0:	mov	r0, r5
   13ba4:	bl	13148 <__assert_fail@plt+0x16ac>
   13ba8:	cmp	r8, #0
   13bac:	mov	r5, r8
   13bb0:	bne	13b8c <__assert_fail@plt+0x20f0>
   13bb4:	mov	r0, #0
   13bb8:	str	r0, [r4, #4]
   13bbc:	mov	r0, #6
   13bc0:	strh	r0, [r6, #56]	; 0x38
   13bc4:	mov	r0, r4
   13bc8:	mov	r1, r6
   13bcc:	bl	141e4 <__assert_fail@plt+0x2748>
   13bd0:	mov	r5, r6
   13bd4:	b	141d4 <__assert_fail@plt+0x2738>
   13bd8:	ldr	r5, [r6, #8]
   13bdc:	cmp	r5, #0
   13be0:	beq	13cdc <__assert_fail@plt+0x2240>
   13be4:	mov	r0, r6
   13be8:	str	r5, [r4]
   13bec:	bl	13148 <__assert_fail@plt+0x16ac>
   13bf0:	ldr	r0, [r5, #48]	; 0x30
   13bf4:	cmp	r0, #0
   13bf8:	beq	13d28 <__assert_fail@plt+0x228c>
   13bfc:	ldrh	r0, [r5, #60]	; 0x3c
   13c00:	mov	r6, r5
   13c04:	cmp	r0, #4
   13c08:	beq	13bd8 <__assert_fail@plt+0x213c>
   13c0c:	cmp	r0, #2
   13c10:	bne	13dc8 <__assert_fail@plt+0x232c>
   13c14:	mov	r0, r4
   13c18:	mov	r1, r5
   13c1c:	mov	r2, #1
   13c20:	bl	1364c <__assert_fail@plt+0x1bb0>
   13c24:	strh	r0, [r5, #56]	; 0x38
   13c28:	cmp	r0, #1
   13c2c:	ldreq	r0, [r4, #48]	; 0x30
   13c30:	tsteq	r0, #4
   13c34:	beq	140ec <__assert_fail@plt+0x2650>
   13c38:	mov	r0, #3
   13c3c:	strh	r0, [r5, #60]	; 0x3c
   13c40:	b	13dc8 <__assert_fail@plt+0x232c>
   13c44:	mov	r5, r6
   13c48:	b	13e04 <__assert_fail@plt+0x2368>
   13c4c:	tst	r0, #64	; 0x40
   13c50:	beq	13c6c <__assert_fail@plt+0x21d0>
   13c54:	ldrd	r2, [r4, #16]
   13c58:	ldrd	r8, [r6, #64]	; 0x40
   13c5c:	eor	r1, r9, r3
   13c60:	eor	r2, r8, r2
   13c64:	orrs	r1, r2, r1
   13c68:	bne	13b6c <__assert_fail@plt+0x20d0>
   13c6c:	ldr	r5, [r4, #4]
   13c70:	cmp	r5, #0
   13c74:	beq	13da4 <__assert_fail@plt+0x2308>
   13c78:	tst	r0, #4096	; 0x1000
   13c7c:	bne	13d6c <__assert_fail@plt+0x22d0>
   13c80:	ldr	r3, [r6, #24]
   13c84:	mov	r0, r4
   13c88:	mov	r1, r6
   13c8c:	mvn	r2, #0
   13c90:	bl	142b4 <__assert_fail@plt+0x2818>
   13c94:	cmp	r0, #0
   13c98:	beq	13dbc <__assert_fail@plt+0x2320>
   13c9c:	bl	118ec <__errno_location@plt>
   13ca0:	ldr	r0, [r0]
   13ca4:	str	r0, [r6, #32]
   13ca8:	ldrh	r0, [r6, #58]	; 0x3a
   13cac:	orr	r0, r0, #1
   13cb0:	strh	r0, [r6, #58]	; 0x3a
   13cb4:	ldr	r0, [r4, #4]
   13cb8:	cmp	r0, #0
   13cbc:	beq	13dbc <__assert_fail@plt+0x2320>
   13cc0:	ldmib	r0, {r1, r2}
   13cc4:	ldr	r1, [r1, #24]
   13cc8:	cmp	r2, #0
   13ccc:	str	r1, [r0, #24]
   13cd0:	mov	r0, r2
   13cd4:	bne	13cc0 <__assert_fail@plt+0x2224>
   13cd8:	b	13dbc <__assert_fail@plt+0x2320>
   13cdc:	ldr	r5, [r6, #4]
   13ce0:	ldr	r0, [r5, #12]
   13ce4:	cmp	r0, #0
   13ce8:	beq	13ef0 <__assert_fail@plt+0x2454>
   13cec:	str	r5, [r4]
   13cf0:	ldr	r1, [r5, #40]	; 0x28
   13cf4:	ldr	r0, [r4, #24]
   13cf8:	mov	r5, #0
   13cfc:	strb	r5, [r0, r1]
   13d00:	mov	r0, r4
   13d04:	mov	r1, #3
   13d08:	bl	1450c <__assert_fail@plt+0x2a70>
   13d0c:	cmp	r0, #0
   13d10:	beq	13ee0 <__assert_fail@plt+0x2444>
   13d14:	mov	r7, r0
   13d18:	mov	r0, r6
   13d1c:	bl	13148 <__assert_fail@plt+0x16ac>
   13d20:	mov	r5, r7
   13d24:	b	13dc8 <__assert_fail@plt+0x232c>
   13d28:	mov	r0, r4
   13d2c:	bl	14fc0 <__assert_fail@plt+0x3524>
   13d30:	ldr	r1, [r4, #48]	; 0x30
   13d34:	cmp	r0, #0
   13d38:	beq	13d4c <__assert_fail@plt+0x22b0>
   13d3c:	orr	r0, r1, #8192	; 0x2000
   13d40:	mov	r5, #0
   13d44:	str	r0, [r4, #48]	; 0x30
   13d48:	b	141d4 <__assert_fail@plt+0x2738>
   13d4c:	movw	r0, #258	; 0x102
   13d50:	tst	r1, r0
   13d54:	beq	13fa0 <__assert_fail@plt+0x2504>
   13d58:	ldr	r0, [r4, #56]	; 0x38
   13d5c:	cmp	r0, #0
   13d60:	beq	13fa8 <__assert_fail@plt+0x250c>
   13d64:	bl	15c98 <__assert_fail@plt+0x41fc>
   13d68:	b	13fa8 <__assert_fail@plt+0x250c>
   13d6c:	bic	r0, r0, #4096	; 0x1000
   13d70:	str	r0, [r4, #48]	; 0x30
   13d74:	ldrd	r8, [r5, #8]
   13d78:	cmp	r9, #0
   13d7c:	beq	13d88 <__assert_fail@plt+0x22ec>
   13d80:	mov	r0, r9
   13d84:	bl	11a78 <closedir@plt>
   13d88:	mov	r0, r5
   13d8c:	bl	13148 <__assert_fail@plt+0x16ac>
   13d90:	cmp	r8, #0
   13d94:	mov	r5, r8
   13d98:	bne	13d74 <__assert_fail@plt+0x22d8>
   13d9c:	mov	r0, #0
   13da0:	str	r0, [r4, #4]
   13da4:	mov	r0, r4
   13da8:	mov	r1, #3
   13dac:	bl	1450c <__assert_fail@plt+0x2a70>
   13db0:	cmp	r0, #0
   13db4:	str	r0, [r4, #4]
   13db8:	beq	13e84 <__assert_fail@plt+0x23e8>
   13dbc:	ldr	r5, [r4, #4]
   13dc0:	mov	r0, #0
   13dc4:	str	r0, [r4, #4]
   13dc8:	ldr	r0, [r5, #4]
   13dcc:	ldr	r1, [r0, #28]
   13dd0:	ldr	r0, [r0, #40]	; 0x28
   13dd4:	sub	r2, r0, #1
   13dd8:	ldrb	r1, [r1, r2]
   13ddc:	cmp	r1, #47	; 0x2f
   13de0:	ldr	r1, [r4, #24]
   13de4:	moveq	r0, r2
   13de8:	mov	r2, #47	; 0x2f
   13dec:	strb	r2, [r1, r0]!
   13df0:	ldr	r2, [r5, #52]	; 0x34
   13df4:	add	r0, r1, #1
   13df8:	add	r1, r5, #168	; 0xa8
   13dfc:	add	r2, r2, #1
   13e00:	bl	11700 <memmove@plt>
   13e04:	str	r5, [r4]
   13e08:	ldrh	r0, [r5, #56]	; 0x38
   13e0c:	cmp	r0, #11
   13e10:	bne	13e44 <__assert_fail@plt+0x23a8>
   13e14:	ldrd	r0, [r5, #112]	; 0x70
   13e18:	eor	r2, r0, #1
   13e1c:	orrs	r2, r2, r1
   13e20:	beq	141d4 <__assert_fail@plt+0x2738>
   13e24:	eor	r0, r0, #2
   13e28:	orrs	r0, r0, r1
   13e2c:	bne	141e0 <__assert_fail@plt+0x2744>
   13e30:	mov	r0, r4
   13e34:	mov	r1, r5
   13e38:	mov	r2, #0
   13e3c:	bl	1364c <__assert_fail@plt+0x1bb0>
   13e40:	strh	r0, [r5, #56]	; 0x38
   13e44:	cmp	r0, #1
   13e48:	bne	141d4 <__assert_fail@plt+0x2738>
   13e4c:	ldr	r0, [r5, #48]	; 0x30
   13e50:	cmp	r0, #0
   13e54:	ldrdeq	r0, [r5, #64]	; 0x40
   13e58:	strdeq	r0, [r4, #16]
   13e5c:	mov	r0, r4
   13e60:	mov	r1, r5
   13e64:	bl	15050 <__assert_fail@plt+0x35b4>
   13e68:	cmp	r0, #0
   13e6c:	bne	141d4 <__assert_fail@plt+0x2738>
   13e70:	bl	118ec <__errno_location@plt>
   13e74:	mov	r1, #12
   13e78:	mov	r5, #0
   13e7c:	str	r1, [r0]
   13e80:	b	141d4 <__assert_fail@plt+0x2738>
   13e84:	ldrb	r0, [r4, #49]	; 0x31
   13e88:	mov	r5, #0
   13e8c:	tst	r0, #32
   13e90:	bne	141d4 <__assert_fail@plt+0x2738>
   13e94:	ldr	r0, [r6, #32]
   13e98:	cmp	r0, #0
   13e9c:	ldrhne	r0, [r7]
   13ea0:	cmpne	r0, #4
   13ea4:	movne	r0, #7
   13ea8:	strhne	r0, [r7]
   13eac:	b	13bc4 <__assert_fail@plt+0x2128>
   13eb0:	ldr	r0, [r4, #32]
   13eb4:	movw	r1, #44635	; 0xae5b
   13eb8:	movt	r1, #1
   13ebc:	bl	17010 <lchmod@@Base+0x6c8>
   13ec0:	cmn	r0, #1
   13ec4:	str	r0, [r6, #36]	; 0x24
   13ec8:	ble	13f84 <__assert_fail@plt+0x24e8>
   13ecc:	ldrh	r0, [r6, #58]	; 0x3a
   13ed0:	mov	r5, r6
   13ed4:	orr	r0, r0, #2
   13ed8:	strh	r0, [r6, #58]	; 0x3a
   13edc:	b	13e04 <__assert_fail@plt+0x2368>
   13ee0:	ldrb	r0, [r4, #49]	; 0x31
   13ee4:	tst	r0, #32
   13ee8:	bne	141d4 <__assert_fail@plt+0x2738>
   13eec:	ldr	r5, [r6, #4]
   13ef0:	mov	r0, r6
   13ef4:	str	r5, [r4]
   13ef8:	bl	13148 <__assert_fail@plt+0x16ac>
   13efc:	ldr	r0, [r5, #48]	; 0x30
   13f00:	cmn	r0, #1
   13f04:	beq	13f68 <__assert_fail@plt+0x24cc>
   13f08:	ldrh	r0, [r5, #56]	; 0x38
   13f0c:	cmp	r0, #11
   13f10:	beq	141e0 <__assert_fail@plt+0x2744>
   13f14:	ldr	r0, [r5, #40]	; 0x28
   13f18:	ldr	r1, [r4, #24]
   13f1c:	mov	r2, #0
   13f20:	strb	r2, [r1, r0]
   13f24:	ldr	r0, [r5, #48]	; 0x30
   13f28:	cmp	r0, #0
   13f2c:	beq	14078 <__assert_fail@plt+0x25dc>
   13f30:	ldrh	r0, [r5, #58]	; 0x3a
   13f34:	tst	r0, #2
   13f38:	bne	140a4 <__assert_fail@plt+0x2608>
   13f3c:	tst	r0, #1
   13f40:	bne	14198 <__assert_fail@plt+0x26fc>
   13f44:	ldr	r1, [r5, #4]
   13f48:	movw	r3, #44634	; 0xae5a
   13f4c:	mov	r0, r4
   13f50:	mvn	r2, #0
   13f54:	movt	r3, #1
   13f58:	bl	142b4 <__assert_fail@plt+0x2818>
   13f5c:	cmp	r0, #0
   13f60:	bne	14088 <__assert_fail@plt+0x25ec>
   13f64:	b	14198 <__assert_fail@plt+0x26fc>
   13f68:	mov	r0, r5
   13f6c:	bl	13148 <__assert_fail@plt+0x16ac>
   13f70:	bl	118ec <__errno_location@plt>
   13f74:	mov	r5, #0
   13f78:	str	r5, [r0]
   13f7c:	str	r5, [r4]
   13f80:	b	141d4 <__assert_fail@plt+0x2738>
   13f84:	bl	118ec <__errno_location@plt>
   13f88:	ldr	r0, [r0]
   13f8c:	mov	r1, #7
   13f90:	mov	r5, r6
   13f94:	strh	r1, [r6, #56]	; 0x38
   13f98:	str	r0, [r6, #32]
   13f9c:	b	13e04 <__assert_fail@plt+0x2368>
   13fa0:	ldr	r0, [r4, #56]	; 0x38
   13fa4:	bl	13148 <__assert_fail@plt+0x16ac>
   13fa8:	ldr	r1, [r5, #52]	; 0x34
   13fac:	add	r6, r5, #168	; 0xa8
   13fb0:	str	r1, [r5, #40]	; 0x28
   13fb4:	add	r2, r1, #1
   13fb8:	mov	r1, r6
   13fbc:	ldr	r0, [r4, #24]
   13fc0:	bl	11700 <memmove@plt>
   13fc4:	mov	r0, r6
   13fc8:	mov	r1, #47	; 0x2f
   13fcc:	bl	1197c <strrchr@plt>
   13fd0:	cmp	r0, #0
   13fd4:	beq	14010 <__assert_fail@plt+0x2574>
   13fd8:	cmp	r0, r6
   13fdc:	bne	13fec <__assert_fail@plt+0x2550>
   13fe0:	ldrb	r1, [r5, #169]	; 0xa9
   13fe4:	cmp	r1, #0
   13fe8:	beq	14010 <__assert_fail@plt+0x2574>
   13fec:	add	r7, r0, #1
   13ff0:	mov	r0, r7
   13ff4:	bl	118bc <strlen@plt>
   13ff8:	mov	r8, r0
   13ffc:	add	r2, r0, #1
   14000:	mov	r0, r6
   14004:	mov	r1, r7
   14008:	bl	11700 <memmove@plt>
   1400c:	str	r8, [r5, #52]	; 0x34
   14010:	ldr	r0, [r4, #24]
   14014:	movw	r1, #258	; 0x102
   14018:	str	r0, [r5, #24]
   1401c:	str	r0, [r5, #28]
   14020:	ldrh	r0, [r4, #48]	; 0x30
   14024:	tst	r0, r1
   14028:	beq	1405c <__assert_fail@plt+0x25c0>
   1402c:	movw	r0, #12616	; 0x3148
   14030:	movw	r2, #21264	; 0x5310
   14034:	movw	r3, #21296	; 0x5330
   14038:	mov	r1, #0
   1403c:	movt	r0, #1
   14040:	movt	r2, #1
   14044:	movt	r3, #1
   14048:	str	r0, [sp]
   1404c:	mov	r0, #31
   14050:	bl	159a0 <__assert_fail@plt+0x3f04>
   14054:	str	r0, [r4, #56]	; 0x38
   14058:	b	13e04 <__assert_fail@plt+0x2368>
   1405c:	mov	r0, #32
   14060:	bl	19e64 <lchmod@@Base+0x351c>
   14064:	cmp	r0, #0
   14068:	str	r0, [r4, #56]	; 0x38
   1406c:	beq	13e04 <__assert_fail@plt+0x2368>
   14070:	bl	19ff0 <lchmod@@Base+0x36a8>
   14074:	b	13e04 <__assert_fail@plt+0x2368>
   14078:	mov	r0, r4
   1407c:	bl	14fc0 <__assert_fail@plt+0x3524>
   14080:	cmp	r0, #0
   14084:	beq	14198 <__assert_fail@plt+0x26fc>
   14088:	bl	118ec <__errno_location@plt>
   1408c:	ldr	r0, [r0]
   14090:	str	r0, [r5, #32]
   14094:	ldr	r0, [r4, #48]	; 0x30
   14098:	orr	r0, r0, #8192	; 0x2000
   1409c:	str	r0, [r4, #48]	; 0x30
   140a0:	b	14198 <__assert_fail@plt+0x26fc>
   140a4:	ldr	r0, [r4, #48]	; 0x30
   140a8:	tst	r0, #4
   140ac:	bne	14118 <__assert_fail@plt+0x267c>
   140b0:	mov	r7, r5
   140b4:	tst	r0, #512	; 0x200
   140b8:	ldr	r6, [r7, #36]!	; 0x24
   140bc:	bne	14164 <__assert_fail@plt+0x26c8>
   140c0:	mov	r0, r6
   140c4:	bl	119c4 <fchdir@plt>
   140c8:	cmp	r0, #0
   140cc:	beq	14190 <__assert_fail@plt+0x26f4>
   140d0:	bl	118ec <__errno_location@plt>
   140d4:	ldr	r0, [r0]
   140d8:	str	r0, [r5, #32]
   140dc:	ldr	r0, [r4, #48]	; 0x30
   140e0:	orr	r0, r0, #8192	; 0x2000
   140e4:	str	r0, [r4, #48]	; 0x30
   140e8:	b	14190 <__assert_fail@plt+0x26f4>
   140ec:	mov	r1, #32768	; 0x8000
   140f0:	tst	r0, #512	; 0x200
   140f4:	and	r1, r1, r0, lsl #11
   140f8:	orr	r1, r1, #18688	; 0x4900
   140fc:	orr	r2, r1, #524288	; 0x80000
   14100:	bne	14120 <__assert_fail@plt+0x2684>
   14104:	movw	r0, #44635	; 0xae5b
   14108:	mov	r1, r2
   1410c:	movt	r0, #1
   14110:	bl	1a360 <lchmod@@Base+0x3a18>
   14114:	b	14130 <__assert_fail@plt+0x2694>
   14118:	add	r7, r5, #36	; 0x24
   1411c:	b	14190 <__assert_fail@plt+0x26f4>
   14120:	ldr	r0, [r4, #32]
   14124:	movw	r1, #44635	; 0xae5b
   14128:	movt	r1, #1
   1412c:	bl	17010 <lchmod@@Base+0x6c8>
   14130:	cmn	r0, #1
   14134:	str	r0, [r5, #36]	; 0x24
   14138:	ble	1414c <__assert_fail@plt+0x26b0>
   1413c:	ldrh	r0, [r5, #58]	; 0x3a
   14140:	orr	r0, r0, #2
   14144:	strh	r0, [r5, #58]	; 0x3a
   14148:	b	13c38 <__assert_fail@plt+0x219c>
   1414c:	bl	118ec <__errno_location@plt>
   14150:	ldr	r0, [r0]
   14154:	mov	r1, #7
   14158:	strh	r1, [r5, #56]	; 0x38
   1415c:	str	r0, [r5, #32]
   14160:	b	13c38 <__assert_fail@plt+0x219c>
   14164:	ldr	r1, [r4, #32]
   14168:	cmp	r1, r6
   1416c:	bne	14178 <__assert_fail@plt+0x26dc>
   14170:	cmn	r1, #100	; 0x64
   14174:	bne	141e0 <__assert_fail@plt+0x2744>
   14178:	add	r0, r4, #60	; 0x3c
   1417c:	bl	168a4 <__assert_fail@plt+0x4e08>
   14180:	cmp	r0, #0
   14184:	blt	1418c <__assert_fail@plt+0x26f0>
   14188:	bl	11a48 <close@plt>
   1418c:	str	r6, [r4, #32]
   14190:	ldr	r0, [r7]
   14194:	bl	11a48 <close@plt>
   14198:	ldrh	r0, [r5, #56]	; 0x38
   1419c:	cmp	r0, #2
   141a0:	beq	141c8 <__assert_fail@plt+0x272c>
   141a4:	ldr	r0, [r5, #32]
   141a8:	mov	r1, #7
   141ac:	cmp	r0, #0
   141b0:	movweq	r1, #6
   141b4:	strh	r1, [r5, #56]	; 0x38
   141b8:	bne	141c8 <__assert_fail@plt+0x272c>
   141bc:	mov	r0, r4
   141c0:	mov	r1, r5
   141c4:	bl	141e4 <__assert_fail@plt+0x2748>
   141c8:	ldrb	r0, [r4, #49]	; 0x31
   141cc:	tst	r0, #32
   141d0:	movne	r5, #0
   141d4:	mov	r0, r5
   141d8:	sub	sp, fp, #24
   141dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   141e0:	bl	11a3c <abort@plt>
   141e4:	push	{r4, r5, r6, r7, fp, lr}
   141e8:	add	fp, sp, #16
   141ec:	sub	sp, sp, #24
   141f0:	ldrh	r2, [r0, #48]	; 0x30
   141f4:	movw	r3, #258	; 0x102
   141f8:	add	lr, r1, #64	; 0x40
   141fc:	tst	r2, r3
   14200:	beq	14238 <__assert_fail@plt+0x279c>
   14204:	ldrd	r2, [lr]
   14208:	stm	sp, {r2, r3}
   1420c:	ldrd	r2, [r1, #160]	; 0xa0
   14210:	mov	r1, sp
   14214:	str	r3, [sp, #12]
   14218:	str	r2, [sp, #8]
   1421c:	ldr	r0, [r0, #56]	; 0x38
   14220:	bl	16524 <__assert_fail@plt+0x4a88>
   14224:	cmp	r0, #0
   14228:	beq	142b0 <__assert_fail@plt+0x2814>
   1422c:	bl	13148 <__assert_fail@plt+0x16ac>
   14230:	sub	sp, fp, #16
   14234:	pop	{r4, r5, r6, r7, fp, pc}
   14238:	ldr	r2, [r1, #4]
   1423c:	cmp	r2, #0
   14240:	beq	142a8 <__assert_fail@plt+0x280c>
   14244:	ldr	r3, [r2, #48]	; 0x30
   14248:	cmp	r3, #0
   1424c:	blt	142a8 <__assert_fail@plt+0x280c>
   14250:	ldr	ip, [r0, #56]	; 0x38
   14254:	ldrd	r4, [ip, #16]
   14258:	orrs	r3, r4, r5
   1425c:	beq	142b0 <__assert_fail@plt+0x2814>
   14260:	ldrd	r4, [r1, #160]	; 0xa0
   14264:	ldrd	r6, [ip]
   14268:	eor	r1, r7, r5
   1426c:	eor	r3, r6, r4
   14270:	orrs	r1, r3, r1
   14274:	bne	142a8 <__assert_fail@plt+0x280c>
   14278:	ldr	r1, [ip, #8]!
   1427c:	ldrd	r4, [lr]
   14280:	ldr	r3, [ip, #4]
   14284:	eor	r1, r1, r4
   14288:	eor	r3, r3, r5
   1428c:	orrs	r1, r1, r3
   14290:	bne	142a8 <__assert_fail@plt+0x280c>
   14294:	ldrd	r4, [r2, #64]	; 0x40
   14298:	strd	r4, [ip]
   1429c:	ldr	r0, [r0, #56]	; 0x38
   142a0:	ldrd	r2, [r2, #160]	; 0xa0
   142a4:	strd	r2, [r0]
   142a8:	sub	sp, fp, #16
   142ac:	pop	{r4, r5, r6, r7, fp, pc}
   142b0:	bl	11a3c <abort@plt>
   142b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142b8:	add	fp, sp, #28
   142bc:	sub	sp, sp, #108	; 0x6c
   142c0:	mov	r7, r3
   142c4:	mov	r4, r2
   142c8:	mov	r8, r1
   142cc:	mov	sl, r0
   142d0:	cmp	r3, #0
   142d4:	beq	142f8 <__assert_fail@plt+0x285c>
   142d8:	movw	r1, #44634	; 0xae5a
   142dc:	mov	r0, r7
   142e0:	movt	r1, #1
   142e4:	bl	116d0 <strcmp@plt>
   142e8:	mov	r6, r0
   142ec:	cmp	r0, #0
   142f0:	movwne	r6, #1
   142f4:	b	142fc <__assert_fail@plt+0x2860>
   142f8:	mov	r6, #1
   142fc:	ldr	r0, [sl, #48]	; 0x30
   14300:	tst	r0, #4
   14304:	bne	1435c <__assert_fail@plt+0x28c0>
   14308:	cmn	r4, #1
   1430c:	mov	r1, #0
   14310:	mov	r9, #0
   14314:	movwgt	r1, #1
   14318:	orrs	r1, r1, r6
   1431c:	bne	1437c <__assert_fail@plt+0x28e0>
   14320:	ands	r0, r0, #512	; 0x200
   14324:	beq	1437c <__assert_fail@plt+0x28e0>
   14328:	add	r4, sl, #60	; 0x3c
   1432c:	mov	r0, r4
   14330:	bl	1689c <__assert_fail@plt+0x4e00>
   14334:	cmp	r0, #0
   14338:	bne	14384 <__assert_fail@plt+0x28e8>
   1433c:	mov	r0, r4
   14340:	bl	168f0 <__assert_fail@plt+0x4e54>
   14344:	cmn	r0, #1
   14348:	ble	14384 <__assert_fail@plt+0x28e8>
   1434c:	mov	r4, r0
   14350:	mov	r9, #0
   14354:	mov	r7, #0
   14358:	b	143cc <__assert_fail@plt+0x2930>
   1435c:	mov	r5, #0
   14360:	cmp	r4, #0
   14364:	blt	144fc <__assert_fail@plt+0x2a60>
   14368:	ands	r0, r0, #512	; 0x200
   1436c:	beq	144fc <__assert_fail@plt+0x2a60>
   14370:	mov	r0, r4
   14374:	bl	11a48 <close@plt>
   14378:	b	144fc <__assert_fail@plt+0x2a60>
   1437c:	cmn	r4, #1
   14380:	bgt	143cc <__assert_fail@plt+0x2930>
   14384:	ldr	r0, [sl, #48]	; 0x30
   14388:	mov	r1, #32768	; 0x8000
   1438c:	and	r1, r1, r0, lsl #11
   14390:	tst	r0, #512	; 0x200
   14394:	orr	r1, r1, #18688	; 0x4900
   14398:	orr	r2, r1, #524288	; 0x80000
   1439c:	bne	143b0 <__assert_fail@plt+0x2914>
   143a0:	mov	r0, r7
   143a4:	mov	r1, r2
   143a8:	bl	1a360 <lchmod@@Base+0x3a18>
   143ac:	b	143bc <__assert_fail@plt+0x2920>
   143b0:	ldr	r0, [sl, #32]
   143b4:	mov	r1, r7
   143b8:	bl	17010 <lchmod@@Base+0x6c8>
   143bc:	mov	r4, r0
   143c0:	mov	r9, #1
   143c4:	cmp	r0, #0
   143c8:	blt	144a0 <__assert_fail@plt+0x2a04>
   143cc:	ldr	r5, [sl, #48]	; 0x30
   143d0:	tst	r5, #2
   143d4:	bne	14418 <__assert_fail@plt+0x297c>
   143d8:	cmp	r7, #0
   143dc:	beq	143f8 <__assert_fail@plt+0x295c>
   143e0:	movw	r1, #44634	; 0xae5a
   143e4:	mov	r0, r7
   143e8:	movt	r1, #1
   143ec:	bl	116d0 <strcmp@plt>
   143f0:	cmp	r0, #0
   143f4:	beq	14418 <__assert_fail@plt+0x297c>
   143f8:	tst	r5, #512	; 0x200
   143fc:	bne	14470 <__assert_fail@plt+0x29d4>
   14400:	mov	r0, r4
   14404:	bl	119c4 <fchdir@plt>
   14408:	mov	r5, r0
   1440c:	cmp	r9, #0
   14410:	bne	144c0 <__assert_fail@plt+0x2a24>
   14414:	b	144fc <__assert_fail@plt+0x2a60>
   14418:	mov	r2, sp
   1441c:	mov	r0, #3
   14420:	mov	r1, r4
   14424:	bl	117c0 <__fxstat64@plt>
   14428:	cmp	r0, #0
   1442c:	bne	144b4 <__assert_fail@plt+0x2a18>
   14430:	ldrd	r0, [r8, #64]	; 0x40
   14434:	ldm	sp, {r2, r3}
   14438:	eor	r1, r1, r3
   1443c:	eor	r0, r0, r2
   14440:	orrs	r0, r0, r1
   14444:	bne	144a8 <__assert_fail@plt+0x2a0c>
   14448:	ldrd	r0, [r8, #160]	; 0xa0
   1444c:	ldr	r2, [sp, #96]	; 0x60
   14450:	ldr	r3, [sp, #100]	; 0x64
   14454:	eor	r1, r1, r3
   14458:	eor	r0, r0, r2
   1445c:	orrs	r0, r0, r1
   14460:	bne	144a8 <__assert_fail@plt+0x2a0c>
   14464:	ldr	r5, [sl, #48]	; 0x30
   14468:	tst	r5, #512	; 0x200
   1446c:	beq	14400 <__assert_fail@plt+0x2964>
   14470:	ldr	r1, [sl, #32]
   14474:	cmp	r1, r4
   14478:	bne	14484 <__assert_fail@plt+0x29e8>
   1447c:	cmn	r1, #100	; 0x64
   14480:	bne	14508 <__assert_fail@plt+0x2a6c>
   14484:	cmp	r6, #0
   14488:	beq	144dc <__assert_fail@plt+0x2a40>
   1448c:	add	r0, sl, #60	; 0x3c
   14490:	bl	168a4 <__assert_fail@plt+0x4e08>
   14494:	cmp	r0, #0
   14498:	bge	144f0 <__assert_fail@plt+0x2a54>
   1449c:	b	144f4 <__assert_fail@plt+0x2a58>
   144a0:	mvn	r5, #0
   144a4:	b	144fc <__assert_fail@plt+0x2a60>
   144a8:	bl	118ec <__errno_location@plt>
   144ac:	mov	r1, #2
   144b0:	str	r1, [r0]
   144b4:	mvn	r5, #0
   144b8:	cmp	r9, #0
   144bc:	beq	144fc <__assert_fail@plt+0x2a60>
   144c0:	bl	118ec <__errno_location@plt>
   144c4:	ldr	r7, [r0]
   144c8:	mov	r6, r0
   144cc:	mov	r0, r4
   144d0:	bl	11a48 <close@plt>
   144d4:	str	r7, [r6]
   144d8:	b	144fc <__assert_fail@plt+0x2a60>
   144dc:	tst	r5, #4
   144e0:	bne	144f4 <__assert_fail@plt+0x2a58>
   144e4:	cmp	r1, #0
   144e8:	blt	144f4 <__assert_fail@plt+0x2a58>
   144ec:	mov	r0, r1
   144f0:	bl	11a48 <close@plt>
   144f4:	str	r4, [sl, #32]
   144f8:	mov	r5, #0
   144fc:	mov	r0, r5
   14500:	sub	sp, fp, #28
   14504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14508:	bl	11a3c <abort@plt>
   1450c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14510:	add	fp, sp, #28
   14514:	sub	sp, sp, #76	; 0x4c
   14518:	ldr	sl, [r0]
   1451c:	mov	r8, r1
   14520:	mov	r5, r0
   14524:	str	r0, [sp, #44]	; 0x2c
   14528:	ldr	r4, [sl, #12]
   1452c:	cmp	r4, #0
   14530:	beq	1457c <__assert_fail@plt+0x2ae0>
   14534:	mov	r0, r4
   14538:	bl	119b8 <dirfd@plt>
   1453c:	cmn	r0, #1
   14540:	str	r0, [fp, #-32]	; 0xffffffe0
   14544:	ble	145b4 <__assert_fail@plt+0x2b18>
   14548:	mov	r1, r5
   1454c:	mvn	r2, #0
   14550:	str	r4, [sp, #16]
   14554:	str	r8, [sp, #8]
   14558:	mov	ip, #0
   1455c:	ldr	r0, [r1, #44]!	; 0x2c
   14560:	cmp	r0, #0
   14564:	str	r1, [sp, #52]	; 0x34
   14568:	add	r7, r1, #4
   1456c:	movweq	r2, #34464	; 0x86a0
   14570:	movteq	r2, #1
   14574:	str	r2, [sp, #32]
   14578:	b	14798 <__assert_fail@plt+0x2cfc>
   1457c:	mov	r7, r5
   14580:	mvn	r0, #99	; 0x63
   14584:	mov	r2, #0
   14588:	ldr	r3, [r7, #48]!	; 0x30
   1458c:	and	r1, r3, #516	; 0x204
   14590:	cmp	r1, #512	; 0x200
   14594:	ldr	r1, [sl, #24]
   14598:	ldreq	r0, [r5, #32]
   1459c:	tst	r3, #16
   145a0:	beq	145dc <__assert_fail@plt+0x2b40>
   145a4:	tst	r3, #1
   145a8:	bne	145d0 <__assert_fail@plt+0x2b34>
   145ac:	mov	r2, #32768	; 0x8000
   145b0:	b	145dc <__assert_fail@plt+0x2b40>
   145b4:	ldr	r0, [sl, #12]
   145b8:	bl	11a78 <closedir@plt>
   145bc:	mov	r6, #0
   145c0:	str	r6, [sl, #12]
   145c4:	cmp	r8, #3
   145c8:	beq	14620 <__assert_fail@plt+0x2b84>
   145cc:	b	14eb4 <__assert_fail@plt+0x3418>
   145d0:	ldr	r3, [sl, #48]	; 0x30
   145d4:	cmp	r3, #0
   145d8:	movne	r2, #32768	; 0x8000
   145dc:	sub	r3, fp, #32
   145e0:	bl	17054 <lchmod@@Base+0x70c>
   145e4:	cmp	r0, #0
   145e8:	str	r0, [sl, #12]
   145ec:	beq	14614 <__assert_fail@plt+0x2b78>
   145f0:	ldrh	r0, [sl, #56]	; 0x38
   145f4:	cmp	r0, #11
   145f8:	bne	14638 <__assert_fail@plt+0x2b9c>
   145fc:	mov	r0, r5
   14600:	mov	r1, sl
   14604:	mov	r2, #0
   14608:	bl	1364c <__assert_fail@plt+0x1bb0>
   1460c:	strh	r0, [sl, #56]	; 0x38
   14610:	b	14678 <__assert_fail@plt+0x2bdc>
   14614:	mov	r6, #0
   14618:	cmp	r8, #3
   1461c:	bne	14eb4 <__assert_fail@plt+0x3418>
   14620:	mov	r0, #4
   14624:	strh	r0, [sl, #56]	; 0x38
   14628:	bl	118ec <__errno_location@plt>
   1462c:	ldr	r0, [r0]
   14630:	str	r0, [sl, #32]
   14634:	b	14eb4 <__assert_fail@plt+0x3418>
   14638:	ldrb	r0, [r7, #1]
   1463c:	tst	r0, #1
   14640:	beq	14678 <__assert_fail@plt+0x2bdc>
   14644:	mov	r0, r5
   14648:	mov	r1, sl
   1464c:	bl	141e4 <__assert_fail@plt+0x2748>
   14650:	mov	r0, r5
   14654:	mov	r1, sl
   14658:	mov	r2, #0
   1465c:	mov	r6, #0
   14660:	bl	1364c <__assert_fail@plt+0x1bb0>
   14664:	mov	r0, r5
   14668:	mov	r1, sl
   1466c:	bl	15050 <__assert_fail@plt+0x35b4>
   14670:	cmp	r0, #0
   14674:	beq	14e20 <__assert_fail@plt+0x3384>
   14678:	mov	r1, r5
   1467c:	str	r8, [sp, #8]
   14680:	str	r4, [sp, #16]
   14684:	ldr	r0, [r1, #44]!	; 0x2c
   14688:	str	r1, [sp, #52]	; 0x34
   1468c:	mvn	r1, #0
   14690:	cmp	r0, #0
   14694:	movweq	r1, #34464	; 0x86a0
   14698:	movteq	r1, #1
   1469c:	cmp	r8, #2
   146a0:	str	r1, [sp, #32]
   146a4:	bne	146c0 <__assert_fail@plt+0x2c24>
   146a8:	mov	ip, #1
   146ac:	cmp	r8, #3
   146b0:	bne	14798 <__assert_fail@plt+0x2cfc>
   146b4:	sub	r0, r8, #3
   146b8:	mov	r5, #0
   146bc:	b	146e0 <__assert_fail@plt+0x2c44>
   146c0:	ldr	r0, [r7]
   146c4:	and	r0, r0, #56	; 0x38
   146c8:	cmp	r0, #24
   146cc:	ldreq	r0, [sl, #84]	; 0x54
   146d0:	cmpeq	r0, #2
   146d4:	beq	14f68 <__assert_fail@plt+0x34cc>
   146d8:	sub	r0, r8, #3
   146dc:	mov	r5, #1
   146e0:	clz	r0, r0
   146e4:	lsr	r6, r0, #5
   146e8:	ldrb	r0, [r7, #1]
   146ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   146f0:	tst	r0, #2
   146f4:	beq	14710 <__assert_fail@plt+0x2c74>
   146f8:	mov	r0, r2
   146fc:	movw	r1, #1030	; 0x406
   14700:	mov	r2, #3
   14704:	bl	1a180 <lchmod@@Base+0x3838>
   14708:	mov	r2, r0
   1470c:	str	r0, [fp, #-32]	; 0xffffffe0
   14710:	cmp	r2, #0
   14714:	blt	14730 <__assert_fail@plt+0x2c94>
   14718:	ldr	r0, [sp, #44]	; 0x2c
   1471c:	mov	r1, sl
   14720:	mov	r3, #0
   14724:	bl	142b4 <__assert_fail@plt+0x2818>
   14728:	cmp	r0, #0
   1472c:	beq	14790 <__assert_fail@plt+0x2cf4>
   14730:	and	r0, r6, r5
   14734:	cmp	r0, #1
   14738:	bne	14748 <__assert_fail@plt+0x2cac>
   1473c:	bl	118ec <__errno_location@plt>
   14740:	ldr	r0, [r0]
   14744:	str	r0, [sl, #32]
   14748:	ldrh	r0, [sl, #58]	; 0x3a
   1474c:	orr	r0, r0, #1
   14750:	strh	r0, [sl, #58]	; 0x3a
   14754:	ldr	r0, [sl, #12]
   14758:	bl	11a78 <closedir@plt>
   1475c:	mov	r4, #0
   14760:	ldr	r5, [sp, #44]	; 0x2c
   14764:	str	r4, [sl, #12]
   14768:	ldr	r0, [r7]
   1476c:	tst	r0, #512	; 0x200
   14770:	beq	14784 <__assert_fail@plt+0x2ce8>
   14774:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14778:	cmp	r0, #0
   1477c:	blt	14784 <__assert_fail@plt+0x2ce8>
   14780:	bl	11a48 <close@plt>
   14784:	mov	ip, #1
   14788:	str	r4, [sl, #12]
   1478c:	b	14798 <__assert_fail@plt+0x2cfc>
   14790:	ldr	r5, [sp, #44]	; 0x2c
   14794:	mov	ip, #0
   14798:	ldr	r0, [sl, #40]	; 0x28
   1479c:	ldr	r1, [sl, #28]
   147a0:	mov	r9, #0
   147a4:	sub	r2, r0, #1
   147a8:	ldrb	r1, [r1, r2]
   147ac:	cmp	r1, #47	; 0x2f
   147b0:	ldrb	r1, [r7]
   147b4:	moveq	r0, r2
   147b8:	tst	r1, #4
   147bc:	mov	r1, #0
   147c0:	str	r1, [sp, #40]	; 0x28
   147c4:	beq	147dc <__assert_fail@plt+0x2d40>
   147c8:	ldr	r1, [r5, #24]
   147cc:	mov	r2, #47	; 0x2f
   147d0:	strb	r2, [r1, r0]!
   147d4:	add	r1, r1, #1
   147d8:	str	r1, [sp, #40]	; 0x28
   147dc:	ldr	r6, [sl, #12]
   147e0:	add	r1, r0, #1
   147e4:	str	r1, [fp, #-48]	; 0xffffffd0
   147e8:	cmp	r6, #0
   147ec:	beq	14b64 <__assert_fail@plt+0x30c8>
   147f0:	ldr	r0, [sl, #48]	; 0x30
   147f4:	str	r7, [fp, #-36]	; 0xffffffdc
   147f8:	str	ip, [sp, #4]
   147fc:	mov	r7, #0
   14800:	add	r0, r0, #1
   14804:	str	r0, [sp, #24]
   14808:	ldr	r0, [r5, #36]	; 0x24
   1480c:	sub	r0, r0, r1
   14810:	str	r0, [fp, #-44]	; 0xffffffd4
   14814:	bl	118ec <__errno_location@plt>
   14818:	str	r0, [sp, #36]	; 0x24
   1481c:	mov	r0, #0
   14820:	mov	r9, #0
   14824:	mov	r4, #0
   14828:	str	sl, [sp, #28]
   1482c:	str	r0, [sp, #48]	; 0x30
   14830:	mov	r0, #0
   14834:	str	r0, [sp, #12]
   14838:	mov	r0, #0
   1483c:	str	r0, [sp, #20]
   14840:	ldr	r0, [sp, #36]	; 0x24
   14844:	str	r7, [r0]
   14848:	mov	r0, r6
   1484c:	bl	11994 <readdir64@plt>
   14850:	cmp	r0, #0
   14854:	beq	14cb8 <__assert_fail@plt+0x321c>
   14858:	mov	r8, r0
   1485c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14860:	str	r4, [fp, #-40]	; 0xffffffd8
   14864:	add	r4, r8, #19
   14868:	ldrb	r0, [r0]
   1486c:	tst	r0, #32
   14870:	ldrbeq	r0, [r4]
   14874:	cmpeq	r0, #46	; 0x2e
   14878:	beq	14974 <__assert_fail@plt+0x2ed8>
   1487c:	mov	r0, r4
   14880:	bl	118bc <strlen@plt>
   14884:	mov	r5, r0
   14888:	add	r0, r0, #176	; 0xb0
   1488c:	bic	r0, r0, #7
   14890:	bl	19e64 <lchmod@@Base+0x351c>
   14894:	mov	r6, r0
   14898:	cmp	r0, #0
   1489c:	beq	14e44 <__assert_fail@plt+0x33a8>
   148a0:	add	sl, r6, #168	; 0xa8
   148a4:	mov	r1, r4
   148a8:	mov	r2, r5
   148ac:	mov	r0, sl
   148b0:	bl	11730 <memcpy@plt>
   148b4:	ldr	r2, [sp, #44]	; 0x2c
   148b8:	mov	r0, #0
   148bc:	mov	r1, #196608	; 0x30000
   148c0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   148c4:	strb	r0, [sl, r5]
   148c8:	str	r5, [r6, #52]	; 0x34
   148cc:	str	r2, [r6, #44]	; 0x2c
   148d0:	add	r7, r5, r3
   148d4:	ldr	r4, [r2, #24]
   148d8:	str	r1, [r6, #58]	; 0x3a
   148dc:	str	r0, [r6, #12]
   148e0:	str	r0, [r6, #16]
   148e4:	str	r0, [r6, #20]
   148e8:	str	r4, [r6, #28]
   148ec:	str	r0, [r6, #32]
   148f0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   148f4:	cmp	r5, r0
   148f8:	bcs	14910 <__assert_fail@plt+0x2e74>
   148fc:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14900:	mov	r5, r2
   14904:	cmp	r7, r3
   14908:	bcs	149b4 <__assert_fail@plt+0x2f18>
   1490c:	b	14d1c <__assert_fail@plt+0x3280>
   14910:	ldr	r1, [r2, #36]	; 0x24
   14914:	movw	r0, #257	; 0x101
   14918:	mov	r5, r2
   1491c:	add	r0, r7, r0
   14920:	adds	r1, r0, r1
   14924:	bcs	14e00 <__assert_fail@plt+0x3364>
   14928:	mov	r0, r4
   1492c:	str	r1, [r5, #36]	; 0x24
   14930:	bl	19e94 <lchmod@@Base+0x354c>
   14934:	cmp	r0, #0
   14938:	beq	14e30 <__assert_fail@plt+0x3394>
   1493c:	cmp	r0, r4
   14940:	str	r0, [r5, #24]
   14944:	beq	1499c <__assert_fail@plt+0x2f00>
   14948:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1494c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14950:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14954:	ldrb	r1, [r1]
   14958:	tst	r1, #4
   1495c:	ldr	r1, [sp, #40]	; 0x28
   14960:	addne	r1, r0, r3
   14964:	mov	r0, #1
   14968:	str	r1, [sp, #40]	; 0x28
   1496c:	str	r0, [sp, #20]
   14970:	b	149a4 <__assert_fail@plt+0x2f08>
   14974:	ldrb	r0, [r8, #20]
   14978:	cmp	r0, #0
   1497c:	beq	14990 <__assert_fail@plt+0x2ef4>
   14980:	cmp	r0, #46	; 0x2e
   14984:	ldrbeq	r0, [r8, #21]
   14988:	cmpeq	r0, #0
   1498c:	bne	1487c <__assert_fail@plt+0x2de0>
   14990:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14994:	mov	r7, #0
   14998:	b	14b48 <__assert_fail@plt+0x30ac>
   1499c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   149a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   149a4:	ldr	r0, [r5, #36]	; 0x24
   149a8:	sub	r0, r0, r3
   149ac:	cmp	r7, r3
   149b0:	bcc	14d1c <__assert_fail@plt+0x3280>
   149b4:	str	r0, [fp, #-44]	; 0xffffffd4
   149b8:	ldr	r0, [sp, #24]
   149bc:	str	r0, [r6, #48]	; 0x30
   149c0:	ldr	r0, [r5]
   149c4:	str	r7, [r6, #40]	; 0x28
   149c8:	str	r0, [r6, #4]
   149cc:	ldrd	r0, [r8]
   149d0:	strd	r0, [r6, #160]	; 0xa0
   149d4:	ldrb	r0, [r5, #48]	; 0x30
   149d8:	tst	r0, #4
   149dc:	bne	149e8 <__assert_fail@plt+0x2f4c>
   149e0:	str	sl, [r6, #24]
   149e4:	b	14a04 <__assert_fail@plt+0x2f68>
   149e8:	ldr	r0, [r6, #28]
   149ec:	ldr	r1, [r6, #52]	; 0x34
   149f0:	str	r0, [r6, #24]
   149f4:	ldr	r0, [sp, #40]	; 0x28
   149f8:	add	r2, r1, #1
   149fc:	mov	r1, sl
   14a00:	bl	11700 <memmove@plt>
   14a04:	ldr	r0, [sp, #52]	; 0x34
   14a08:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14a0c:	ldr	sl, [sp, #28]
   14a10:	ldr	r0, [r0]
   14a14:	ldr	r2, [r1]
   14a18:	cmp	r0, #0
   14a1c:	beq	14a44 <__assert_fail@plt+0x2fa8>
   14a20:	ands	r0, r2, #1024	; 0x400
   14a24:	bne	14a44 <__assert_fail@plt+0x2fa8>
   14a28:	mov	r0, r5
   14a2c:	mov	r1, r6
   14a30:	mov	r2, #0
   14a34:	bl	1364c <__assert_fail@plt+0x1bb0>
   14a38:	mov	r7, #0
   14a3c:	strh	r0, [r6, #56]	; 0x38
   14a40:	b	14ab8 <__assert_fail@plt+0x301c>
   14a44:	ldrb	r3, [r8, #18]
   14a48:	mov	r0, #0
   14a4c:	tst	r2, #8
   14a50:	mov	r1, #0
   14a54:	beq	14a78 <__assert_fail@plt+0x2fdc>
   14a58:	orr	r1, r3, #4
   14a5c:	cmp	r1, #4
   14a60:	mov	r1, #0
   14a64:	beq	14a78 <__assert_fail@plt+0x2fdc>
   14a68:	eor	r1, r3, #10
   14a6c:	and	r2, r2, #16
   14a70:	orrs	r1, r2, r1
   14a74:	movwne	r1, #1
   14a78:	mov	r2, #11
   14a7c:	mov	r7, #0
   14a80:	strh	r2, [r6, #56]	; 0x38
   14a84:	sub	r2, r3, #1
   14a88:	uxtb	r3, r2
   14a8c:	cmp	r3, #11
   14a90:	sxtbls	r0, r2
   14a94:	movwls	r2, #44640	; 0xae60
   14a98:	movtls	r2, #1
   14a9c:	ldrls	r0, [r2, r0, lsl #2]
   14aa0:	cmp	r1, #0
   14aa4:	str	r0, [r6, #80]	; 0x50
   14aa8:	mov	r0, #2
   14aac:	movwne	r0, #1
   14ab0:	str	r0, [r6, #112]	; 0x70
   14ab4:	str	r7, [r6, #116]	; 0x74
   14ab8:	cmp	r9, #0
   14abc:	str	r7, [r6, #8]
   14ac0:	ldrne	r0, [sp, #48]	; 0x30
   14ac4:	moveq	r9, r6
   14ac8:	strne	r6, [r0, #8]
   14acc:	movw	r0, #10000	; 0x2710
   14ad0:	cmp	r4, r0
   14ad4:	bne	14b28 <__assert_fail@plt+0x308c>
   14ad8:	ldr	r0, [sp, #52]	; 0x34
   14adc:	ldr	r0, [r0]
   14ae0:	cmp	r0, #0
   14ae4:	bne	14b28 <__assert_fail@plt+0x308c>
   14ae8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14aec:	mov	r0, sl
   14af0:	bl	153b0 <__assert_fail@plt+0x3914>
   14af4:	mov	r1, #0
   14af8:	str	r1, [sp, #12]
   14afc:	movw	r1, #19778	; 0x4d42
   14b00:	movt	r1, #65363	; 0xff53
   14b04:	cmp	r0, r1
   14b08:	movwne	r1, #26985	; 0x6969
   14b0c:	cmpne	r0, r1
   14b10:	beq	14b28 <__assert_fail@plt+0x308c>
   14b14:	movw	r1, #6548	; 0x1994
   14b18:	movt	r1, #258	; 0x102
   14b1c:	cmp	r0, r1
   14b20:	movne	r0, #1
   14b24:	strne	r0, [sp, #12]
   14b28:	ldr	r0, [sp, #32]
   14b2c:	add	r4, r4, #1
   14b30:	cmp	r0, r4
   14b34:	mov	r0, #0
   14b38:	movwls	r0, #15
   14b3c:	cmp	r0, #0
   14b40:	bne	14d90 <__assert_fail@plt+0x32f4>
   14b44:	str	r6, [sp, #48]	; 0x30
   14b48:	ldr	r6, [sl, #12]
   14b4c:	cmp	r6, #0
   14b50:	bne	14840 <__assert_fail@plt+0x2da4>
   14b54:	ldr	r0, [sp, #20]
   14b58:	ldr	ip, [sp, #4]
   14b5c:	ldr	r6, [sp, #12]
   14b60:	b	14d04 <__assert_fail@plt+0x3268>
   14b64:	mov	r4, #0
   14b68:	mov	r6, #0
   14b6c:	ldrb	r0, [r7]
   14b70:	tst	r0, #4
   14b74:	beq	14ba0 <__assert_fail@plt+0x3104>
   14b78:	ldr	r2, [sp, #40]	; 0x28
   14b7c:	ldr	r0, [r5, #36]	; 0x24
   14b80:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14b84:	cmp	r3, r0
   14b88:	sub	r1, r2, #1
   14b8c:	mov	r0, #0
   14b90:	moveq	r2, r1
   14b94:	cmp	r4, #0
   14b98:	moveq	r2, r1
   14b9c:	strb	r0, [r2]
   14ba0:	ldr	r0, [sp, #16]
   14ba4:	cmp	r0, #0
   14ba8:	movwne	r0, #1
   14bac:	orrs	r0, r0, ip
   14bb0:	beq	14c14 <__assert_fail@plt+0x3178>
   14bb4:	cmp	r4, #0
   14bb8:	bne	14c54 <__assert_fail@plt+0x31b8>
   14bbc:	ldr	r0, [sp, #8]
   14bc0:	cmp	r0, #3
   14bc4:	bne	14bdc <__assert_fail@plt+0x3140>
   14bc8:	ldrh	r0, [sl, #56]	; 0x38
   14bcc:	cmp	r0, #4
   14bd0:	cmpne	r0, #7
   14bd4:	movne	r0, #6
   14bd8:	strhne	r0, [sl, #56]	; 0x38
   14bdc:	mov	r6, #0
   14be0:	cmp	r9, #0
   14be4:	beq	14eb4 <__assert_fail@plt+0x3418>
   14be8:	ldrd	r4, [r9, #8]
   14bec:	cmp	r5, #0
   14bf0:	beq	14bfc <__assert_fail@plt+0x3160>
   14bf4:	mov	r0, r5
   14bf8:	bl	11a78 <closedir@plt>
   14bfc:	mov	r0, r9
   14c00:	bl	13148 <__assert_fail@plt+0x16ac>
   14c04:	cmp	r4, #0
   14c08:	mov	r9, r4
   14c0c:	bne	14be8 <__assert_fail@plt+0x314c>
   14c10:	b	14eb4 <__assert_fail@plt+0x3418>
   14c14:	ldr	r0, [sp, #8]
   14c18:	cmp	r0, #1
   14c1c:	cmpne	r4, #0
   14c20:	bne	14c54 <__assert_fail@plt+0x31b8>
   14c24:	ldr	r0, [sl, #48]	; 0x30
   14c28:	cmp	r0, #0
   14c2c:	beq	14da4 <__assert_fail@plt+0x3308>
   14c30:	ldr	r1, [sl, #4]
   14c34:	movw	r3, #44634	; 0xae5a
   14c38:	mov	r0, r5
   14c3c:	mvn	r2, #0
   14c40:	movt	r3, #1
   14c44:	bl	142b4 <__assert_fail@plt+0x2818>
   14c48:	cmp	r0, #0
   14c4c:	bne	14db4 <__assert_fail@plt+0x3318>
   14c50:	b	14bb4 <__assert_fail@plt+0x3118>
   14c54:	tst	r6, #1
   14c58:	beq	14c88 <__assert_fail@plt+0x31ec>
   14c5c:	movw	r0, #21368	; 0x5378
   14c60:	mov	r1, r9
   14c64:	mov	r2, r4
   14c68:	movt	r0, #1
   14c6c:	str	r0, [r5, #44]	; 0x2c
   14c70:	mov	r0, r5
   14c74:	bl	137e4 <__assert_fail@plt+0x1d48>
   14c78:	mov	r6, r0
   14c7c:	mov	r0, #0
   14c80:	str	r0, [r5, #44]	; 0x2c
   14c84:	b	14eb4 <__assert_fail@plt+0x3418>
   14c88:	cmp	r4, #2
   14c8c:	bcc	14d14 <__assert_fail@plt+0x3278>
   14c90:	ldr	r0, [sp, #52]	; 0x34
   14c94:	ldr	r0, [r0]
   14c98:	cmp	r0, #0
   14c9c:	beq	14d14 <__assert_fail@plt+0x3278>
   14ca0:	mov	r0, r5
   14ca4:	mov	r1, r9
   14ca8:	mov	r2, r4
   14cac:	bl	137e4 <__assert_fail@plt+0x1d48>
   14cb0:	mov	r6, r0
   14cb4:	b	14eb4 <__assert_fail@plt+0x3418>
   14cb8:	ldr	r0, [sp, #36]	; 0x24
   14cbc:	ldr	r0, [r0]
   14cc0:	cmp	r0, #0
   14cc4:	beq	14ce0 <__assert_fail@plt+0x3244>
   14cc8:	str	r0, [sl, #32]
   14ccc:	ldr	r0, [sp, #16]
   14cd0:	orrs	r0, r0, r4
   14cd4:	mov	r0, #4
   14cd8:	movwne	r0, #7
   14cdc:	strh	r0, [sl, #56]	; 0x38
   14ce0:	ldr	r0, [sl, #12]
   14ce4:	ldr	r6, [sp, #12]
   14ce8:	cmp	r0, #0
   14cec:	beq	14ec8 <__assert_fail@plt+0x342c>
   14cf0:	bl	11a78 <closedir@plt>
   14cf4:	mov	r0, #0
   14cf8:	ldr	ip, [sp, #4]
   14cfc:	str	r0, [sl, #12]
   14d00:	ldr	r0, [sp, #20]
   14d04:	tst	r0, #1
   14d08:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14d0c:	beq	14b6c <__assert_fail@plt+0x30d0>
   14d10:	b	14edc <__assert_fail@plt+0x3440>
   14d14:	mov	r6, r9
   14d18:	b	14eb4 <__assert_fail@plt+0x3418>
   14d1c:	mov	r0, r6
   14d20:	bl	13148 <__assert_fail@plt+0x16ac>
   14d24:	ldr	r7, [sp, #28]
   14d28:	cmp	r9, #0
   14d2c:	beq	14d58 <__assert_fail@plt+0x32bc>
   14d30:	ldrd	r4, [r9, #8]
   14d34:	cmp	r5, #0
   14d38:	beq	14d44 <__assert_fail@plt+0x32a8>
   14d3c:	mov	r0, r5
   14d40:	bl	11a78 <closedir@plt>
   14d44:	mov	r0, r9
   14d48:	bl	13148 <__assert_fail@plt+0x16ac>
   14d4c:	cmp	r4, #0
   14d50:	mov	r9, r4
   14d54:	bne	14d30 <__assert_fail@plt+0x3294>
   14d58:	ldr	r0, [r7, #12]
   14d5c:	bl	11a78 <closedir@plt>
   14d60:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14d64:	mov	r6, #0
   14d68:	mov	r0, #7
   14d6c:	str	r6, [r7, #12]
   14d70:	strh	r0, [r7, #56]	; 0x38
   14d74:	ldr	r0, [r1]
   14d78:	orr	r0, r0, #8192	; 0x2000
   14d7c:	str	r0, [r1]
   14d80:	ldr	r1, [sp, #36]	; 0x24
   14d84:	mov	r0, #36	; 0x24
   14d88:	str	r0, [r1]
   14d8c:	b	14eb4 <__assert_fail@plt+0x3418>
   14d90:	ldr	ip, [sp, #4]
   14d94:	cmp	r0, #15
   14d98:	bne	14ec0 <__assert_fail@plt+0x3424>
   14d9c:	ldr	r6, [sp, #12]
   14da0:	b	14ecc <__assert_fail@plt+0x3430>
   14da4:	mov	r0, r5
   14da8:	bl	14fc0 <__assert_fail@plt+0x3524>
   14dac:	cmp	r0, #0
   14db0:	beq	14bb4 <__assert_fail@plt+0x3118>
   14db4:	mov	r0, #7
   14db8:	mov	r6, #0
   14dbc:	cmp	r9, #0
   14dc0:	strh	r0, [sl, #56]	; 0x38
   14dc4:	ldr	r0, [r7]
   14dc8:	orr	r0, r0, #8192	; 0x2000
   14dcc:	str	r0, [r7]
   14dd0:	beq	14eb4 <__assert_fail@plt+0x3418>
   14dd4:	ldrd	r4, [r9, #8]
   14dd8:	cmp	r5, #0
   14ddc:	beq	14de8 <__assert_fail@plt+0x334c>
   14de0:	mov	r0, r5
   14de4:	bl	11a78 <closedir@plt>
   14de8:	mov	r0, r9
   14dec:	bl	13148 <__assert_fail@plt+0x16ac>
   14df0:	cmp	r4, #0
   14df4:	mov	r9, r4
   14df8:	bne	14dd4 <__assert_fail@plt+0x3338>
   14dfc:	b	14eb4 <__assert_fail@plt+0x3418>
   14e00:	mov	r0, r4
   14e04:	bl	13148 <__assert_fail@plt+0x16ac>
   14e08:	ldr	r1, [sp, #36]	; 0x24
   14e0c:	mov	r0, #0
   14e10:	str	r0, [r5, #24]
   14e14:	mov	r0, #36	; 0x24
   14e18:	str	r0, [r1]
   14e1c:	b	14e40 <__assert_fail@plt+0x33a4>
   14e20:	bl	118ec <__errno_location@plt>
   14e24:	mov	r1, #12
   14e28:	str	r1, [r0]
   14e2c:	b	14eb4 <__assert_fail@plt+0x3418>
   14e30:	ldr	r0, [r5, #24]
   14e34:	bl	13148 <__assert_fail@plt+0x16ac>
   14e38:	mov	r0, #0
   14e3c:	str	r0, [r5, #24]
   14e40:	ldr	sl, [sp, #28]
   14e44:	ldr	r0, [sp, #36]	; 0x24
   14e48:	ldr	r4, [r0]
   14e4c:	mov	r0, r6
   14e50:	bl	13148 <__assert_fail@plt+0x16ac>
   14e54:	cmp	r9, #0
   14e58:	beq	14e84 <__assert_fail@plt+0x33e8>
   14e5c:	ldrd	r6, [r9, #8]
   14e60:	cmp	r7, #0
   14e64:	beq	14e70 <__assert_fail@plt+0x33d4>
   14e68:	mov	r0, r7
   14e6c:	bl	11a78 <closedir@plt>
   14e70:	mov	r0, r9
   14e74:	bl	13148 <__assert_fail@plt+0x16ac>
   14e78:	cmp	r6, #0
   14e7c:	mov	r9, r6
   14e80:	bne	14e5c <__assert_fail@plt+0x33c0>
   14e84:	ldr	r0, [sl, #12]
   14e88:	bl	11a78 <closedir@plt>
   14e8c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14e90:	mov	r6, #0
   14e94:	mov	r0, #7
   14e98:	str	r6, [sl, #12]
   14e9c:	strh	r0, [sl, #56]	; 0x38
   14ea0:	ldr	r0, [r1]
   14ea4:	orr	r0, r0, #8192	; 0x2000
   14ea8:	str	r0, [r1]
   14eac:	ldr	r0, [sp, #36]	; 0x24
   14eb0:	str	r4, [r0]
   14eb4:	mov	r0, r6
   14eb8:	sub	sp, fp, #28
   14ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ec0:	mov	r6, #0
   14ec4:	b	14eb4 <__assert_fail@plt+0x3418>
   14ec8:	ldr	ip, [sp, #4]
   14ecc:	ldr	r0, [sp, #20]
   14ed0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14ed4:	tst	r0, #1
   14ed8:	beq	14b6c <__assert_fail@plt+0x30d0>
   14edc:	ldr	r1, [r5, #4]
   14ee0:	ldr	r0, [r5, #24]
   14ee4:	cmp	r1, #0
   14ee8:	beq	14f18 <__assert_fail@plt+0x347c>
   14eec:	ldr	r2, [r1, #24]
   14ef0:	add	r3, r1, #168	; 0xa8
   14ef4:	cmp	r2, r3
   14ef8:	ldrne	r3, [r1, #28]
   14efc:	subne	r2, r2, r3
   14f00:	addne	r2, r0, r2
   14f04:	strne	r2, [r1, #24]
   14f08:	str	r0, [r1, #28]
   14f0c:	ldr	r1, [r1, #8]
   14f10:	cmp	r1, #0
   14f14:	bne	14eec <__assert_fail@plt+0x3450>
   14f18:	ldr	r1, [r9, #48]	; 0x30
   14f1c:	cmp	r1, #0
   14f20:	blt	14b6c <__assert_fail@plt+0x30d0>
   14f24:	mov	r1, r9
   14f28:	ldr	r2, [r1, #24]
   14f2c:	add	r3, r1, #168	; 0xa8
   14f30:	cmp	r2, r3
   14f34:	ldrne	r3, [r1, #28]
   14f38:	subne	r2, r2, r3
   14f3c:	addne	r2, r0, r2
   14f40:	strne	r2, [r1, #24]
   14f44:	str	r0, [r1, #28]
   14f48:	ldr	r2, [r1, #8]
   14f4c:	cmp	r2, #0
   14f50:	ldreq	r2, [r1, #4]
   14f54:	ldr	r1, [r2, #48]	; 0x30
   14f58:	cmn	r1, #1
   14f5c:	mov	r1, r2
   14f60:	bgt	14f28 <__assert_fail@plt+0x348c>
   14f64:	b	14b6c <__assert_fail@plt+0x30d0>
   14f68:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14f6c:	mov	r0, sl
   14f70:	bl	153b0 <__assert_fail@plt+0x3914>
   14f74:	movw	r1, #26984	; 0x6968
   14f78:	cmp	r0, r1
   14f7c:	ble	14fa8 <__assert_fail@plt+0x350c>
   14f80:	movw	r1, #26985	; 0x6969
   14f84:	cmp	r0, r1
   14f88:	movwne	r1, #16719	; 0x414f
   14f8c:	movtne	r1, #21318	; 0x5346
   14f90:	cmpne	r0, r1
   14f94:	beq	146d8 <__assert_fail@plt+0x2c3c>
   14f98:	movw	r1, #40864	; 0x9fa0
   14f9c:	cmp	r0, r1
   14fa0:	beq	146d8 <__assert_fail@plt+0x2c3c>
   14fa4:	b	146a8 <__assert_fail@plt+0x2c0c>
   14fa8:	movw	r1, #19778	; 0x4d42
   14fac:	movt	r1, #65363	; 0xff53
   14fb0:	cmp	r0, r1
   14fb4:	cmpne	r0, #0
   14fb8:	beq	146d8 <__assert_fail@plt+0x2c3c>
   14fbc:	b	146a8 <__assert_fail@plt+0x2c0c>
   14fc0:	push	{r4, r5, fp, lr}
   14fc4:	add	fp, sp, #8
   14fc8:	mov	r5, r0
   14fcc:	ldr	r0, [r0, #48]	; 0x30
   14fd0:	mov	r4, #0
   14fd4:	tst	r0, #4
   14fd8:	bne	1501c <__assert_fail@plt+0x3580>
   14fdc:	tst	r0, #512	; 0x200
   14fe0:	bne	14ffc <__assert_fail@plt+0x3560>
   14fe4:	ldr	r0, [r5, #28]
   14fe8:	bl	119c4 <fchdir@plt>
   14fec:	mov	r4, r0
   14ff0:	cmp	r0, #0
   14ff4:	movwne	r4, #1
   14ff8:	b	1501c <__assert_fail@plt+0x3580>
   14ffc:	ldr	r1, [r5, #32]
   15000:	add	r0, r5, #60	; 0x3c
   15004:	bl	168a4 <__assert_fail@plt+0x4e08>
   15008:	cmp	r0, #0
   1500c:	blt	15014 <__assert_fail@plt+0x3578>
   15010:	bl	11a48 <close@plt>
   15014:	mvn	r0, #99	; 0x63
   15018:	str	r0, [r5, #32]
   1501c:	add	r5, r5, #60	; 0x3c
   15020:	b	15028 <__assert_fail@plt+0x358c>
   15024:	bl	11a48 <close@plt>
   15028:	mov	r0, r5
   1502c:	bl	1689c <__assert_fail@plt+0x4e00>
   15030:	cmp	r0, #0
   15034:	movne	r0, r4
   15038:	popne	{r4, r5, fp, pc}
   1503c:	mov	r0, r5
   15040:	bl	168f0 <__assert_fail@plt+0x4e54>
   15044:	cmp	r0, #0
   15048:	bge	15024 <__assert_fail@plt+0x3588>
   1504c:	b	15028 <__assert_fail@plt+0x358c>
   15050:	push	{r4, r5, r6, r7, fp, lr}
   15054:	add	fp, sp, #16
   15058:	mov	r6, r0
   1505c:	ldrh	r0, [r0, #48]	; 0x30
   15060:	mov	r4, r1
   15064:	movw	r1, #258	; 0x102
   15068:	tst	r0, r1
   1506c:	beq	150e0 <__assert_fail@plt+0x3644>
   15070:	mov	r0, #24
   15074:	bl	19e64 <lchmod@@Base+0x351c>
   15078:	mov	r5, #0
   1507c:	cmp	r0, #0
   15080:	beq	15100 <__assert_fail@plt+0x3664>
   15084:	mov	r7, r0
   15088:	ldrd	r0, [r4, #64]	; 0x40
   1508c:	add	r2, r7, #8
   15090:	stm	r7, {r0, r1}
   15094:	ldrd	r0, [r4, #160]	; 0xa0
   15098:	stm	r2, {r0, r1, r4}
   1509c:	mov	r1, r7
   150a0:	ldr	r0, [r6, #56]	; 0x38
   150a4:	bl	164e4 <__assert_fail@plt+0x4a48>
   150a8:	cmp	r0, r7
   150ac:	beq	150d4 <__assert_fail@plt+0x3638>
   150b0:	mov	r6, r0
   150b4:	mov	r0, r7
   150b8:	bl	13148 <__assert_fail@plt+0x16ac>
   150bc:	cmp	r6, #0
   150c0:	beq	15100 <__assert_fail@plt+0x3664>
   150c4:	ldr	r0, [r6, #16]
   150c8:	mov	r1, #2
   150cc:	strh	r1, [r4, #56]	; 0x38
   150d0:	str	r0, [r4]
   150d4:	mov	r5, #1
   150d8:	mov	r0, r5
   150dc:	pop	{r4, r5, r6, r7, fp, pc}
   150e0:	ldr	r0, [r6, #56]	; 0x38
   150e4:	add	r1, r4, #64	; 0x40
   150e8:	bl	1a00c <lchmod@@Base+0x36c4>
   150ec:	cmp	r0, #0
   150f0:	mov	r5, #1
   150f4:	movne	r0, #2
   150f8:	strhne	r0, [r4, #56]	; 0x38
   150fc:	strne	r4, [r4]
   15100:	mov	r0, r5
   15104:	pop	{r4, r5, r6, r7, fp, pc}
   15108:	cmp	r2, #5
   1510c:	movcc	r0, #0
   15110:	strhcc	r2, [r1, #60]	; 0x3c
   15114:	bxcc	lr
   15118:	push	{fp, lr}
   1511c:	mov	fp, sp
   15120:	bl	118ec <__errno_location@plt>
   15124:	mov	r1, #22
   15128:	str	r1, [r0]
   1512c:	mov	r0, #1
   15130:	pop	{fp, pc}
   15134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15138:	add	fp, sp, #28
   1513c:	sub	sp, sp, #4
   15140:	mov	r9, r0
   15144:	orr	r0, r1, #4096	; 0x1000
   15148:	cmp	r0, #4096	; 0x1000
   1514c:	bne	1518c <__assert_fail@plt+0x36f0>
   15150:	ldr	r8, [r9]
   15154:	mov	r7, r1
   15158:	bl	118ec <__errno_location@plt>
   1515c:	mov	r5, #0
   15160:	mov	sl, r0
   15164:	str	r5, [r0]
   15168:	ldrb	r0, [r9, #49]	; 0x31
   1516c:	tst	r0, #32
   15170:	bne	1519c <__assert_fail@plt+0x3700>
   15174:	ldrh	r0, [r8, #56]	; 0x38
   15178:	cmp	r0, #1
   1517c:	beq	151a8 <__assert_fail@plt+0x370c>
   15180:	cmp	r0, #9
   15184:	ldreq	r5, [r8, #8]
   15188:	b	1519c <__assert_fail@plt+0x3700>
   1518c:	bl	118ec <__errno_location@plt>
   15190:	mov	r1, #22
   15194:	mov	r5, #0
   15198:	str	r1, [r0]
   1519c:	mov	r0, r5
   151a0:	sub	sp, fp, #28
   151a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151a8:	ldr	r6, [r9, #4]
   151ac:	cmp	r6, #0
   151b0:	beq	151e0 <__assert_fail@plt+0x3744>
   151b4:	ldr	r4, [r6, #8]
   151b8:	ldr	r1, [r6, #12]
   151bc:	cmp	r1, #0
   151c0:	beq	151cc <__assert_fail@plt+0x3730>
   151c4:	mov	r0, r1
   151c8:	bl	11a78 <closedir@plt>
   151cc:	mov	r0, r6
   151d0:	bl	13148 <__assert_fail@plt+0x16ac>
   151d4:	cmp	r4, #0
   151d8:	mov	r6, r4
   151dc:	bne	151b4 <__assert_fail@plt+0x3718>
   151e0:	cmp	r7, #4096	; 0x1000
   151e4:	mov	r4, #1
   151e8:	ldreq	r0, [r9, #48]	; 0x30
   151ec:	moveq	r4, #2
   151f0:	orreq	r0, r0, #4096	; 0x1000
   151f4:	streq	r0, [r9, #48]	; 0x30
   151f8:	ldr	r0, [r8, #48]	; 0x30
   151fc:	cmp	r0, #0
   15200:	bne	1524c <__assert_fail@plt+0x37b0>
   15204:	ldr	r0, [r8, #24]
   15208:	ldrb	r0, [r0]
   1520c:	cmp	r0, #47	; 0x2f
   15210:	beq	1524c <__assert_fail@plt+0x37b0>
   15214:	ldr	r0, [r9, #48]	; 0x30
   15218:	tst	r0, #4
   1521c:	bne	1524c <__assert_fail@plt+0x37b0>
   15220:	mov	r1, #32768	; 0x8000
   15224:	tst	r0, #512	; 0x200
   15228:	and	r1, r1, r0, lsl #11
   1522c:	orr	r1, r1, #18688	; 0x4900
   15230:	orr	r2, r1, #524288	; 0x80000
   15234:	bne	15264 <__assert_fail@plt+0x37c8>
   15238:	movw	r0, #44635	; 0xae5b
   1523c:	mov	r1, r2
   15240:	movt	r0, #1
   15244:	bl	1a360 <lchmod@@Base+0x3a18>
   15248:	b	15274 <__assert_fail@plt+0x37d8>
   1524c:	mov	r0, r9
   15250:	mov	r1, r4
   15254:	bl	1450c <__assert_fail@plt+0x2a70>
   15258:	mov	r5, r0
   1525c:	str	r0, [r9, #4]
   15260:	b	1519c <__assert_fail@plt+0x3700>
   15264:	ldr	r0, [r9, #32]
   15268:	movw	r1, #44635	; 0xae5b
   1526c:	movt	r1, #1
   15270:	bl	17010 <lchmod@@Base+0x6c8>
   15274:	mov	r8, r0
   15278:	cmn	r0, #1
   1527c:	ble	152c0 <__assert_fail@plt+0x3824>
   15280:	mov	r0, r9
   15284:	mov	r1, r4
   15288:	bl	1450c <__assert_fail@plt+0x2a70>
   1528c:	str	r0, [r9, #4]
   15290:	ldrb	r0, [r9, #49]	; 0x31
   15294:	tst	r0, #2
   15298:	bne	152cc <__assert_fail@plt+0x3830>
   1529c:	mov	r0, r8
   152a0:	bl	119c4 <fchdir@plt>
   152a4:	cmp	r0, #0
   152a8:	beq	152fc <__assert_fail@plt+0x3860>
   152ac:	ldr	r4, [sl]
   152b0:	mov	r0, r8
   152b4:	bl	11a48 <close@plt>
   152b8:	str	r4, [sl]
   152bc:	b	1519c <__assert_fail@plt+0x3700>
   152c0:	mov	r5, #0
   152c4:	str	r5, [r9, #4]
   152c8:	b	1519c <__assert_fail@plt+0x3700>
   152cc:	ldr	r1, [r9, #32]
   152d0:	cmp	r1, r8
   152d4:	bne	152e0 <__assert_fail@plt+0x3844>
   152d8:	cmn	r1, #100	; 0x64
   152dc:	bne	1530c <__assert_fail@plt+0x3870>
   152e0:	add	r0, r9, #60	; 0x3c
   152e4:	bl	168a4 <__assert_fail@plt+0x4e08>
   152e8:	cmp	r0, #0
   152ec:	blt	152f4 <__assert_fail@plt+0x3858>
   152f0:	bl	11a48 <close@plt>
   152f4:	str	r8, [r9, #32]
   152f8:	b	15304 <__assert_fail@plt+0x3868>
   152fc:	mov	r0, r8
   15300:	bl	11a48 <close@plt>
   15304:	ldr	r5, [r9, #4]
   15308:	b	1519c <__assert_fail@plt+0x3700>
   1530c:	bl	11a3c <abort@plt>
   15310:	push	{fp, lr}
   15314:	mov	fp, sp
   15318:	mov	r2, r1
   1531c:	ldrd	r0, [r0, #8]
   15320:	mov	r3, #0
   15324:	bl	1a6cc <lchmod@@Base+0x3d84>
   15328:	mov	r0, r2
   1532c:	pop	{fp, pc}
   15330:	push	{r4, r5, fp, lr}
   15334:	add	fp, sp, #8
   15338:	ldrd	r2, [r1, #8]
   1533c:	ldrd	r4, [r0, #8]
   15340:	eor	r3, r5, r3
   15344:	eor	r2, r4, r2
   15348:	orrs	r2, r2, r3
   1534c:	mov	r2, #0
   15350:	bne	15370 <__assert_fail@plt+0x38d4>
   15354:	ldrd	r2, [r1]
   15358:	ldrd	r0, [r0]
   1535c:	eor	r1, r1, r3
   15360:	eor	r0, r0, r2
   15364:	orr	r0, r0, r1
   15368:	clz	r0, r0
   1536c:	lsr	r2, r0, #5
   15370:	mov	r0, r2
   15374:	pop	{r4, r5, fp, pc}
   15378:	push	{r4, r5, fp, lr}
   1537c:	add	fp, sp, #8
   15380:	ldr	r0, [r0]
   15384:	ldrd	r2, [r0, #160]	; 0xa0
   15388:	ldr	r0, [r1]
   1538c:	ldrd	r4, [r0, #160]	; 0xa0
   15390:	mov	r0, #0
   15394:	subs	r1, r4, r2
   15398:	sbcs	r1, r5, r3
   1539c:	movwcc	r0, #1
   153a0:	subs	r1, r2, r4
   153a4:	sbcs	r1, r3, r5
   153a8:	subcc	r0, r0, #1
   153ac:	pop	{r4, r5, fp, pc}
   153b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   153b4:	add	fp, sp, #24
   153b8:	sub	sp, sp, #96	; 0x60
   153bc:	ldr	r7, [r0, #44]	; 0x2c
   153c0:	mov	r4, r0
   153c4:	mov	r5, #0
   153c8:	ldrb	r0, [r7, #49]	; 0x31
   153cc:	tst	r0, #2
   153d0:	beq	154cc <__assert_fail@plt+0x3a30>
   153d4:	ldr	r6, [r7, #52]	; 0x34
   153d8:	mov	r9, r1
   153dc:	cmp	r6, #0
   153e0:	bne	15420 <__assert_fail@plt+0x3984>
   153e4:	movw	r0, #12616	; 0x3148
   153e8:	movw	r2, #21720	; 0x54d8
   153ec:	movw	r3, #21752	; 0x54f8
   153f0:	mov	r1, #0
   153f4:	mov	r8, #0
   153f8:	movt	r0, #1
   153fc:	movt	r2, #1
   15400:	movt	r3, #1
   15404:	str	r0, [sp]
   15408:	mov	r0, #13
   1540c:	bl	159a0 <__assert_fail@plt+0x3f04>
   15410:	mov	r6, r0
   15414:	cmp	r0, #0
   15418:	str	r0, [r7, #52]	; 0x34
   1541c:	beq	15458 <__assert_fail@plt+0x39bc>
   15420:	ldrd	r0, [r4, #64]	; 0x40
   15424:	str	r1, [sp, #12]
   15428:	str	r0, [sp, #8]
   1542c:	add	r1, sp, #8
   15430:	mov	r0, r6
   15434:	bl	156f0 <__assert_fail@plt+0x3c54>
   15438:	cmp	r0, #0
   1543c:	beq	15448 <__assert_fail@plt+0x39ac>
   15440:	ldr	r5, [r0, #8]
   15444:	b	154cc <__assert_fail@plt+0x3a30>
   15448:	mov	r8, #1
   1544c:	cmp	r9, #0
   15450:	bge	15464 <__assert_fail@plt+0x39c8>
   15454:	b	154cc <__assert_fail@plt+0x3a30>
   15458:	mov	r6, #0
   1545c:	cmp	r9, #0
   15460:	blt	154cc <__assert_fail@plt+0x3a30>
   15464:	add	r1, sp, #8
   15468:	mov	r0, r9
   1546c:	bl	11688 <fstatfs64@plt>
   15470:	cmp	r0, #0
   15474:	bne	154cc <__assert_fail@plt+0x3a30>
   15478:	cmp	r8, #0
   1547c:	beq	154c8 <__assert_fail@plt+0x3a2c>
   15480:	mov	r0, #16
   15484:	bl	19e64 <lchmod@@Base+0x351c>
   15488:	cmp	r0, #0
   1548c:	beq	154c8 <__assert_fail@plt+0x3a2c>
   15490:	mov	r5, r0
   15494:	ldrd	r0, [r4, #64]	; 0x40
   15498:	ldr	r2, [sp, #8]
   1549c:	stm	r5, {r0, r1, r2}
   154a0:	mov	r0, r6
   154a4:	mov	r1, r5
   154a8:	bl	164e4 <__assert_fail@plt+0x4a48>
   154ac:	cmp	r0, #0
   154b0:	beq	154c0 <__assert_fail@plt+0x3a24>
   154b4:	cmp	r0, r5
   154b8:	beq	154c8 <__assert_fail@plt+0x3a2c>
   154bc:	bl	11a3c <abort@plt>
   154c0:	mov	r0, r5
   154c4:	bl	13148 <__assert_fail@plt+0x16ac>
   154c8:	ldr	r5, [sp, #8]
   154cc:	mov	r0, r5
   154d0:	sub	sp, fp, #24
   154d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   154d8:	push	{fp, lr}
   154dc:	mov	fp, sp
   154e0:	mov	r2, r1
   154e4:	ldrd	r0, [r0]
   154e8:	mov	r3, #0
   154ec:	bl	1a6cc <lchmod@@Base+0x3d84>
   154f0:	mov	r0, r2
   154f4:	pop	{fp, pc}
   154f8:	ldrd	r2, [r1]
   154fc:	ldrd	r0, [r0]
   15500:	eor	r1, r1, r3
   15504:	eor	r0, r0, r2
   15508:	orr	r0, r0, r1
   1550c:	clz	r0, r0
   15510:	lsr	r0, r0, #5
   15514:	bx	lr
   15518:	ldr	r0, [r0, #8]
   1551c:	bx	lr
   15520:	ldr	r0, [r0, #12]
   15524:	bx	lr
   15528:	ldr	r0, [r0, #16]
   1552c:	bx	lr
   15530:	ldm	r0, {r2, ip}
   15534:	mov	r0, #0
   15538:	cmp	r2, ip
   1553c:	bxcs	lr
   15540:	mov	r0, #0
   15544:	ldr	r1, [r2]
   15548:	cmp	r1, #0
   1554c:	beq	15570 <__assert_fail@plt+0x3ad4>
   15550:	mov	r3, #0
   15554:	mov	r1, r2
   15558:	ldr	r1, [r1, #4]
   1555c:	add	r3, r3, #1
   15560:	cmp	r1, #0
   15564:	bne	15558 <__assert_fail@plt+0x3abc>
   15568:	cmp	r3, r0
   1556c:	movhi	r0, r3
   15570:	add	r2, r2, #8
   15574:	cmp	r2, ip
   15578:	bcc	15544 <__assert_fail@plt+0x3aa8>
   1557c:	bx	lr
   15580:	push	{fp, lr}
   15584:	mov	fp, sp
   15588:	ldm	r0, {r3, ip}
   1558c:	mov	lr, #0
   15590:	mov	r1, #0
   15594:	cmp	r3, ip
   15598:	bcs	155d4 <__assert_fail@plt+0x3b38>
   1559c:	mov	r1, #0
   155a0:	mov	lr, #0
   155a4:	ldr	r2, [r3]
   155a8:	cmp	r2, #0
   155ac:	beq	155c8 <__assert_fail@plt+0x3b2c>
   155b0:	mov	r2, r3
   155b4:	ldr	r2, [r2, #4]
   155b8:	add	r1, r1, #1
   155bc:	cmp	r2, #0
   155c0:	bne	155b4 <__assert_fail@plt+0x3b18>
   155c4:	add	lr, lr, #1
   155c8:	add	r3, r3, #8
   155cc:	cmp	r3, ip
   155d0:	bcc	155a4 <__assert_fail@plt+0x3b08>
   155d4:	ldr	r2, [r0, #12]
   155d8:	cmp	lr, r2
   155dc:	bne	155f4 <__assert_fail@plt+0x3b58>
   155e0:	ldr	r2, [r0, #16]
   155e4:	mov	r0, #1
   155e8:	cmp	r1, r2
   155ec:	movne	r0, #0
   155f0:	pop	{fp, pc}
   155f4:	mov	r0, #0
   155f8:	pop	{fp, pc}
   155fc:	nop	{0}
   15600:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15604:	add	fp, sp, #24
   15608:	sub	sp, sp, #8
   1560c:	ldr	r6, [r0]
   15610:	ldmib	r0, {r2, r7, r8}
   15614:	ldr	r3, [r0, #16]
   15618:	mov	r4, r1
   1561c:	mov	r5, #0
   15620:	cmp	r6, r2
   15624:	bcs	15664 <__assert_fail@plt+0x3bc8>
   15628:	mov	r5, #0
   1562c:	ldr	r0, [r6]
   15630:	cmp	r0, #0
   15634:	beq	15658 <__assert_fail@plt+0x3bbc>
   15638:	mov	r0, #0
   1563c:	mov	r1, r6
   15640:	ldr	r1, [r1, #4]
   15644:	add	r0, r0, #1
   15648:	cmp	r1, #0
   1564c:	bne	15640 <__assert_fail@plt+0x3ba4>
   15650:	cmp	r0, r5
   15654:	movhi	r5, r0
   15658:	add	r6, r6, #8
   1565c:	cmp	r6, r2
   15660:	bcc	1562c <__assert_fail@plt+0x3b90>
   15664:	movw	r2, #44688	; 0xae90
   15668:	mov	r0, r4
   1566c:	mov	r1, #1
   15670:	movt	r2, #1
   15674:	bl	11934 <__fprintf_chk@plt>
   15678:	movw	r2, #44712	; 0xaea8
   1567c:	mov	r0, r4
   15680:	mov	r1, #1
   15684:	mov	r3, r7
   15688:	movt	r2, #1
   1568c:	bl	11934 <__fprintf_chk@plt>
   15690:	vldr	d16, [pc, #80]	; 156e8 <__assert_fail@plt+0x3c4c>
   15694:	vmov	s0, r8
   15698:	movw	r2, #44736	; 0xaec0
   1569c:	mov	r0, r4
   156a0:	mov	r1, #1
   156a4:	mov	r3, r8
   156a8:	vcvt.f64.u32	d17, s0
   156ac:	vmov	s0, r7
   156b0:	movt	r2, #1
   156b4:	vcvt.f64.u32	d18, s0
   156b8:	vmul.f64	d16, d17, d16
   156bc:	vdiv.f64	d16, d16, d18
   156c0:	vstr	d16, [sp]
   156c4:	bl	11934 <__fprintf_chk@plt>
   156c8:	movw	r2, #44769	; 0xaee1
   156cc:	mov	r0, r4
   156d0:	mov	r1, #1
   156d4:	mov	r3, r5
   156d8:	movt	r2, #1
   156dc:	sub	sp, fp, #24
   156e0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   156e4:	b	11934 <__fprintf_chk@plt>
   156e8:	andeq	r0, r0, r0
   156ec:	subsmi	r0, r9, r0
   156f0:	push	{r4, r5, r6, r7, fp, lr}
   156f4:	add	fp, sp, #16
   156f8:	mov	r4, r1
   156fc:	ldr	r1, [r0, #8]
   15700:	ldr	r2, [r0, #24]
   15704:	mov	r5, r0
   15708:	mov	r0, r4
   1570c:	blx	r2
   15710:	ldr	r1, [r5, #8]
   15714:	cmp	r0, r1
   15718:	bcs	15784 <__assert_fail@plt+0x3ce8>
   1571c:	ldr	r7, [r5]
   15720:	mov	r6, #0
   15724:	ldr	r1, [r7, r0, lsl #3]!
   15728:	cmp	r1, #0
   1572c:	cmpne	r7, #0
   15730:	bne	15740 <__assert_fail@plt+0x3ca4>
   15734:	mov	r0, r6
   15738:	pop	{r4, r5, r6, r7, fp, pc}
   1573c:	ldr	r1, [r7]
   15740:	cmp	r1, r4
   15744:	beq	1576c <__assert_fail@plt+0x3cd0>
   15748:	ldr	r2, [r5, #28]
   1574c:	mov	r0, r4
   15750:	blx	r2
   15754:	cmp	r0, #0
   15758:	bne	15778 <__assert_fail@plt+0x3cdc>
   1575c:	ldr	r7, [r7, #4]
   15760:	cmp	r7, #0
   15764:	bne	1573c <__assert_fail@plt+0x3ca0>
   15768:	b	15734 <__assert_fail@plt+0x3c98>
   1576c:	mov	r6, r4
   15770:	mov	r0, r6
   15774:	pop	{r4, r5, r6, r7, fp, pc}
   15778:	ldr	r6, [r7]
   1577c:	mov	r0, r6
   15780:	pop	{r4, r5, r6, r7, fp, pc}
   15784:	bl	11a3c <abort@plt>
   15788:	ldr	r1, [r0, #16]
   1578c:	cmp	r1, #0
   15790:	moveq	r0, #0
   15794:	bxeq	lr
   15798:	ldm	r0, {r1, r2}
   1579c:	cmp	r1, r2
   157a0:	bcs	157b8 <__assert_fail@plt+0x3d1c>
   157a4:	ldr	r0, [r1], #8
   157a8:	cmp	r0, #0
   157ac:	bxne	lr
   157b0:	cmp	r1, r2
   157b4:	bcc	157a4 <__assert_fail@plt+0x3d08>
   157b8:	push	{fp, lr}
   157bc:	mov	fp, sp
   157c0:	bl	11a3c <abort@plt>
   157c4:	push	{r4, r5, fp, lr}
   157c8:	add	fp, sp, #8
   157cc:	mov	r5, r1
   157d0:	ldr	r1, [r0, #8]
   157d4:	ldr	r2, [r0, #24]
   157d8:	mov	r4, r0
   157dc:	mov	r0, r5
   157e0:	blx	r2
   157e4:	ldr	r1, [r4, #8]
   157e8:	cmp	r0, r1
   157ec:	bcs	15848 <__assert_fail@plt+0x3dac>
   157f0:	ldr	r1, [r4]
   157f4:	add	r2, r1, r0, lsl #3
   157f8:	ldr	r3, [r2]
   157fc:	ldr	r2, [r2, #4]
   15800:	cmp	r3, r5
   15804:	beq	15814 <__assert_fail@plt+0x3d78>
   15808:	cmp	r2, #0
   1580c:	bne	157f8 <__assert_fail@plt+0x3d5c>
   15810:	b	15820 <__assert_fail@plt+0x3d84>
   15814:	cmp	r2, #0
   15818:	ldrne	r0, [r2]
   1581c:	popne	{r4, r5, fp, pc}
   15820:	ldr	r2, [r4, #4]
   15824:	add	r0, r1, r0, lsl #3
   15828:	add	r1, r0, #8
   1582c:	cmp	r1, r2
   15830:	movcs	r0, #0
   15834:	popcs	{r4, r5, fp, pc}
   15838:	ldr	r0, [r1], #8
   1583c:	cmp	r0, #0
   15840:	popne	{r4, r5, fp, pc}
   15844:	b	1582c <__assert_fail@plt+0x3d90>
   15848:	bl	11a3c <abort@plt>
   1584c:	push	{r4, r5, fp, lr}
   15850:	add	fp, sp, #8
   15854:	ldm	r0, {r5, lr}
   15858:	mov	ip, r0
   1585c:	mov	r0, #0
   15860:	cmp	r5, lr
   15864:	bcs	158b0 <__assert_fail@plt+0x3e14>
   15868:	mov	r0, #0
   1586c:	ldr	r3, [r5]
   15870:	cmp	r3, #0
   15874:	cmpne	r5, #0
   15878:	beq	158a4 <__assert_fail@plt+0x3e08>
   1587c:	mov	r3, r5
   15880:	cmp	r0, r2
   15884:	popcs	{r4, r5, fp, pc}
   15888:	ldr	r4, [r3]
   1588c:	str	r4, [r1, r0, lsl #2]
   15890:	add	r0, r0, #1
   15894:	ldr	r3, [r3, #4]
   15898:	cmp	r3, #0
   1589c:	bne	15880 <__assert_fail@plt+0x3de4>
   158a0:	ldr	lr, [ip, #4]
   158a4:	add	r5, r5, #8
   158a8:	cmp	r5, lr
   158ac:	bcc	1586c <__assert_fail@plt+0x3dd0>
   158b0:	pop	{r4, r5, fp, pc}
   158b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   158b8:	add	fp, sp, #24
   158bc:	mov	r5, r1
   158c0:	ldr	r4, [r0]
   158c4:	ldr	r1, [r0, #4]
   158c8:	mov	r6, #0
   158cc:	cmp	r4, r1
   158d0:	bcs	15944 <__assert_fail@plt+0x3ea8>
   158d4:	mov	r9, r2
   158d8:	mov	r8, r0
   158dc:	mov	r6, #0
   158e0:	b	15928 <__assert_fail@plt+0x3e8c>
   158e4:	mov	r1, r9
   158e8:	blx	r5
   158ec:	cmp	r0, #0
   158f0:	beq	15944 <__assert_fail@plt+0x3ea8>
   158f4:	mov	r7, r4
   158f8:	ldr	r7, [r7, #4]
   158fc:	add	r6, r6, #1
   15900:	cmp	r7, #0
   15904:	beq	15920 <__assert_fail@plt+0x3e84>
   15908:	ldr	r0, [r7]
   1590c:	mov	r1, r9
   15910:	blx	r5
   15914:	cmp	r0, #0
   15918:	bne	158f8 <__assert_fail@plt+0x3e5c>
   1591c:	b	15944 <__assert_fail@plt+0x3ea8>
   15920:	ldr	r1, [r8, #4]
   15924:	b	15938 <__assert_fail@plt+0x3e9c>
   15928:	ldr	r0, [r4]
   1592c:	cmp	r0, #0
   15930:	cmpne	r4, #0
   15934:	bne	158e4 <__assert_fail@plt+0x3e48>
   15938:	add	r4, r4, #8
   1593c:	cmp	r4, r1
   15940:	bcc	15928 <__assert_fail@plt+0x3e8c>
   15944:	mov	r0, r6
   15948:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1594c:	ldrb	r2, [r0]
   15950:	cmp	r2, #0
   15954:	moveq	r0, #0
   15958:	bxeq	lr
   1595c:	add	r3, r0, #1
   15960:	mov	r0, #0
   15964:	rsb	r0, r0, r0, lsl #5
   15968:	uxtab	r0, r0, r2
   1596c:	udiv	r2, r0, r1
   15970:	mls	r0, r2, r1, r0
   15974:	ldrb	r2, [r3], #1
   15978:	cmp	r2, #0
   1597c:	bne	15964 <__assert_fail@plt+0x3ec8>
   15980:	bx	lr
   15984:	movw	r1, #44800	; 0xaf00
   15988:	movt	r1, #1
   1598c:	vld1.32	{d16-d17}, [r1]!
   15990:	ldr	r1, [r1]
   15994:	vst1.32	{d16-d17}, [r0]!
   15998:	str	r1, [r0]
   1599c:	bx	lr
   159a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   159a4:	add	fp, sp, #24
   159a8:	movw	r9, #23496	; 0x5bc8
   159ac:	movw	r5, #23476	; 0x5bb4
   159b0:	cmp	r3, #0
   159b4:	mov	r6, r0
   159b8:	mov	r0, #40	; 0x28
   159bc:	mov	r7, r1
   159c0:	movt	r9, #1
   159c4:	movt	r5, #1
   159c8:	movne	r9, r3
   159cc:	cmp	r2, #0
   159d0:	movne	r5, r2
   159d4:	bl	19e64 <lchmod@@Base+0x351c>
   159d8:	mov	r8, #0
   159dc:	cmp	r0, #0
   159e0:	beq	15b9c <__assert_fail@plt+0x4100>
   159e4:	mov	r4, r0
   159e8:	movw	r0, #44800	; 0xaf00
   159ec:	cmp	r7, #0
   159f0:	movt	r0, #1
   159f4:	moveq	r7, r0
   159f8:	cmp	r7, r0
   159fc:	str	r7, [r4, #20]
   15a00:	beq	15a7c <__assert_fail@plt+0x3fe0>
   15a04:	vldr	s2, [pc, #408]	; 15ba4 <__assert_fail@plt+0x4108>
   15a08:	vldr	s0, [r7, #8]
   15a0c:	vcmpe.f32	s0, s2
   15a10:	vmrs	APSR_nzcv, fpscr
   15a14:	ble	15b28 <__assert_fail@plt+0x408c>
   15a18:	vldr	s4, [pc, #392]	; 15ba8 <__assert_fail@plt+0x410c>
   15a1c:	vcmpe.f32	s0, s4
   15a20:	vmrs	APSR_nzcv, fpscr
   15a24:	bpl	15b28 <__assert_fail@plt+0x408c>
   15a28:	vldr	s4, [pc, #380]	; 15bac <__assert_fail@plt+0x4110>
   15a2c:	vldr	s6, [r7, #12]
   15a30:	vcmpe.f32	s6, s4
   15a34:	vmrs	APSR_nzcv, fpscr
   15a38:	ble	15b28 <__assert_fail@plt+0x408c>
   15a3c:	vldr	s4, [r7]
   15a40:	vcmpe.f32	s4, #0.0
   15a44:	vmrs	APSR_nzcv, fpscr
   15a48:	blt	15b28 <__assert_fail@plt+0x408c>
   15a4c:	vadd.f32	s2, s4, s2
   15a50:	vcmpe.f32	s2, s0
   15a54:	vmrs	APSR_nzcv, fpscr
   15a58:	bpl	15b28 <__assert_fail@plt+0x408c>
   15a5c:	vldr	s0, [r7, #4]
   15a60:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15a64:	vcmpe.f32	s0, s4
   15a68:	vmrs	APSR_nzcv, fpscr
   15a6c:	bhi	15b28 <__assert_fail@plt+0x408c>
   15a70:	vcmpe.f32	s2, s0
   15a74:	vmrs	APSR_nzcv, fpscr
   15a78:	bpl	15b28 <__assert_fail@plt+0x408c>
   15a7c:	ldrb	r0, [r7, #16]
   15a80:	cmp	r0, #0
   15a84:	bne	15ab0 <__assert_fail@plt+0x4014>
   15a88:	vldr	s0, [r7, #8]
   15a8c:	vldr	s4, [pc, #284]	; 15bb0 <__assert_fail@plt+0x4114>
   15a90:	vmov	s2, r6
   15a94:	vcvt.f32.u32	s2, s2
   15a98:	vdiv.f32	s2, s2, s0
   15a9c:	vcmpe.f32	s2, s4
   15aa0:	vcvt.u32.f32	s0, s2
   15aa4:	vmrs	APSR_nzcv, fpscr
   15aa8:	bge	15b38 <__assert_fail@plt+0x409c>
   15aac:	vmov	r6, s0
   15ab0:	cmp	r6, #10
   15ab4:	movls	r6, #10
   15ab8:	orr	r0, r6, #1
   15abc:	cmn	r0, #1
   15ac0:	beq	15b38 <__assert_fail@plt+0x409c>
   15ac4:	ldr	r6, [fp, #8]
   15ac8:	mov	r1, #3
   15acc:	cmp	r0, #10
   15ad0:	bcc	15b08 <__assert_fail@plt+0x406c>
   15ad4:	mov	r1, #3
   15ad8:	mov	r3, #9
   15adc:	mov	r2, #12
   15ae0:	udiv	r7, r0, r1
   15ae4:	mls	r7, r7, r1, r0
   15ae8:	cmp	r7, #0
   15aec:	beq	15b08 <__assert_fail@plt+0x406c>
   15af0:	add	r3, r3, r2
   15af4:	add	r2, r2, #8
   15af8:	add	r1, r1, #2
   15afc:	add	r3, r3, #4
   15b00:	cmp	r3, r0
   15b04:	bcc	15ae0 <__assert_fail@plt+0x4044>
   15b08:	udiv	r2, r0, r1
   15b0c:	mls	r1, r2, r1, r0
   15b10:	cmp	r1, #0
   15b14:	bne	15b30 <__assert_fail@plt+0x4094>
   15b18:	add	r0, r0, #2
   15b1c:	cmn	r0, #1
   15b20:	bne	15ac8 <__assert_fail@plt+0x402c>
   15b24:	b	15b38 <__assert_fail@plt+0x409c>
   15b28:	str	r0, [r4, #20]
   15b2c:	b	15b40 <__assert_fail@plt+0x40a4>
   15b30:	cmp	r0, #536870912	; 0x20000000
   15b34:	bcc	15b50 <__assert_fail@plt+0x40b4>
   15b38:	mov	r0, #0
   15b3c:	str	r0, [r4, #8]
   15b40:	mov	r0, r4
   15b44:	bl	13148 <__assert_fail@plt+0x16ac>
   15b48:	mov	r0, r8
   15b4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15b50:	cmp	r0, #0
   15b54:	str	r0, [r4, #8]
   15b58:	beq	15b40 <__assert_fail@plt+0x40a4>
   15b5c:	mov	r1, #8
   15b60:	bl	19e10 <lchmod@@Base+0x34c8>
   15b64:	cmp	r0, #0
   15b68:	str	r0, [r4]
   15b6c:	beq	15b40 <__assert_fail@plt+0x40a4>
   15b70:	mov	r1, #0
   15b74:	mov	r8, r4
   15b78:	str	r1, [r4, #12]
   15b7c:	str	r1, [r4, #16]
   15b80:	str	r5, [r4, #24]
   15b84:	str	r9, [r4, #28]
   15b88:	str	r6, [r4, #32]
   15b8c:	str	r1, [r4, #36]	; 0x24
   15b90:	ldr	r1, [r4, #8]
   15b94:	add	r0, r0, r1, lsl #3
   15b98:	str	r0, [r4, #4]
   15b9c:	mov	r0, r8
   15ba0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15ba4:	stclcc	12, cr12, [ip, #820]	; 0x334
   15ba8:	svccc	0x00666666
   15bac:	svccc	0x008ccccd
   15bb0:	svcmi	0x00800000
   15bb4:	ror	r2, r0, #3
   15bb8:	udiv	r2, r2, r1
   15bbc:	mul	r1, r2, r1
   15bc0:	rsb	r0, r1, r0, ror #3
   15bc4:	bx	lr
   15bc8:	sub	r0, r0, r1
   15bcc:	clz	r0, r0
   15bd0:	lsr	r0, r0, #5
   15bd4:	bx	lr
   15bd8:	push	{r4, r5, r6, r7, fp, lr}
   15bdc:	add	fp, sp, #16
   15be0:	mov	r4, r0
   15be4:	ldr	r5, [r0]
   15be8:	ldr	r0, [r0, #4]
   15bec:	cmp	r5, r0
   15bf0:	bcs	15c88 <__assert_fail@plt+0x41ec>
   15bf4:	mov	r6, #0
   15bf8:	ldr	r1, [r5]
   15bfc:	cmp	r1, #0
   15c00:	beq	15c7c <__assert_fail@plt+0x41e0>
   15c04:	ldr	r1, [r4, #32]
   15c08:	ldr	r7, [r5, #4]
   15c0c:	cmp	r1, #0
   15c10:	mov	r0, r1
   15c14:	movwne	r0, #1
   15c18:	cmp	r7, #0
   15c1c:	beq	15c60 <__assert_fail@plt+0x41c4>
   15c20:	tst	r0, #1
   15c24:	beq	15c34 <__assert_fail@plt+0x4198>
   15c28:	ldr	r0, [r7]
   15c2c:	blx	r1
   15c30:	ldr	r1, [r4, #32]
   15c34:	str	r6, [r7]
   15c38:	cmp	r1, #0
   15c3c:	ldr	r0, [r4, #36]	; 0x24
   15c40:	ldr	r2, [r7, #4]
   15c44:	str	r0, [r7, #4]
   15c48:	mov	r0, r1
   15c4c:	str	r7, [r4, #36]	; 0x24
   15c50:	mov	r7, r2
   15c54:	movwne	r0, #1
   15c58:	cmp	r2, #0
   15c5c:	bne	15c20 <__assert_fail@plt+0x4184>
   15c60:	cmp	r0, #0
   15c64:	beq	15c70 <__assert_fail@plt+0x41d4>
   15c68:	ldr	r0, [r5]
   15c6c:	blx	r1
   15c70:	str	r6, [r5]
   15c74:	str	r6, [r5, #4]
   15c78:	ldr	r0, [r4, #4]
   15c7c:	add	r5, r5, #8
   15c80:	cmp	r5, r0
   15c84:	bcc	15bf8 <__assert_fail@plt+0x415c>
   15c88:	mov	r0, #0
   15c8c:	str	r0, [r4, #12]
   15c90:	str	r0, [r4, #16]
   15c94:	pop	{r4, r5, r6, r7, fp, pc}
   15c98:	push	{r4, r5, r6, sl, fp, lr}
   15c9c:	add	fp, sp, #16
   15ca0:	mov	r4, r0
   15ca4:	ldr	r0, [r0, #32]
   15ca8:	cmp	r0, #0
   15cac:	ldrne	r0, [r4, #16]
   15cb0:	cmpne	r0, #0
   15cb4:	beq	15d1c <__assert_fail@plt+0x4280>
   15cb8:	ldr	r5, [r4]
   15cbc:	ldr	r1, [r4, #4]
   15cc0:	cmp	r5, r1
   15cc4:	bcc	15cd8 <__assert_fail@plt+0x423c>
   15cc8:	b	15d1c <__assert_fail@plt+0x4280>
   15ccc:	add	r5, r5, #8
   15cd0:	cmp	r5, r1
   15cd4:	bcs	15d1c <__assert_fail@plt+0x4280>
   15cd8:	ldr	r0, [r5]
   15cdc:	cmp	r0, #0
   15ce0:	cmpne	r5, #0
   15ce4:	beq	15ccc <__assert_fail@plt+0x4230>
   15ce8:	ldr	r1, [r4, #32]
   15cec:	blx	r1
   15cf0:	ldr	r6, [r5, #4]
   15cf4:	cmp	r6, #0
   15cf8:	beq	15d14 <__assert_fail@plt+0x4278>
   15cfc:	ldr	r1, [r4, #32]
   15d00:	ldr	r0, [r6]
   15d04:	blx	r1
   15d08:	ldr	r6, [r6, #4]
   15d0c:	cmp	r6, #0
   15d10:	bne	15cfc <__assert_fail@plt+0x4260>
   15d14:	ldr	r1, [r4, #4]
   15d18:	b	15ccc <__assert_fail@plt+0x4230>
   15d1c:	ldr	r5, [r4]
   15d20:	ldr	r1, [r4, #4]
   15d24:	cmp	r5, r1
   15d28:	bcc	15d3c <__assert_fail@plt+0x42a0>
   15d2c:	b	15d64 <__assert_fail@plt+0x42c8>
   15d30:	add	r5, r5, #8
   15d34:	cmp	r5, r1
   15d38:	bcs	15d64 <__assert_fail@plt+0x42c8>
   15d3c:	ldr	r0, [r5, #4]
   15d40:	cmp	r0, #0
   15d44:	beq	15d30 <__assert_fail@plt+0x4294>
   15d48:	ldr	r6, [r0, #4]
   15d4c:	bl	13148 <__assert_fail@plt+0x16ac>
   15d50:	cmp	r6, #0
   15d54:	mov	r0, r6
   15d58:	bne	15d48 <__assert_fail@plt+0x42ac>
   15d5c:	ldr	r1, [r4, #4]
   15d60:	b	15d30 <__assert_fail@plt+0x4294>
   15d64:	ldr	r0, [r4, #36]	; 0x24
   15d68:	cmp	r0, #0
   15d6c:	beq	15d84 <__assert_fail@plt+0x42e8>
   15d70:	ldr	r5, [r0, #4]
   15d74:	bl	13148 <__assert_fail@plt+0x16ac>
   15d78:	cmp	r5, #0
   15d7c:	mov	r0, r5
   15d80:	bne	15d70 <__assert_fail@plt+0x42d4>
   15d84:	ldr	r0, [r4]
   15d88:	bl	13148 <__assert_fail@plt+0x16ac>
   15d8c:	mov	r0, r4
   15d90:	pop	{r4, r5, r6, sl, fp, lr}
   15d94:	b	13148 <__assert_fail@plt+0x16ac>
   15d98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d9c:	add	fp, sp, #28
   15da0:	sub	sp, sp, #44	; 0x2c
   15da4:	mov	r7, r0
   15da8:	mov	r4, r0
   15dac:	ldr	r0, [r7, #20]!
   15db0:	ldrb	r2, [r0, #16]
   15db4:	cmp	r2, #0
   15db8:	bne	15de8 <__assert_fail@plt+0x434c>
   15dbc:	vldr	s0, [r0, #8]
   15dc0:	vldr	s4, [pc, #560]	; 15ff8 <__assert_fail@plt+0x455c>
   15dc4:	vmov	s2, r1
   15dc8:	mov	r5, #0
   15dcc:	vcvt.f32.u32	s2, s2
   15dd0:	vdiv.f32	s2, s2, s0
   15dd4:	vcmpe.f32	s2, s4
   15dd8:	vcvt.u32.f32	s0, s2
   15ddc:	vmrs	APSR_nzcv, fpscr
   15de0:	bge	15fe8 <__assert_fail@plt+0x454c>
   15de4:	vmov	r1, s0
   15de8:	cmp	r1, #10
   15dec:	mov	r5, #0
   15df0:	movls	r1, #10
   15df4:	orr	r6, r1, #1
   15df8:	cmn	r6, #1
   15dfc:	bne	15e10 <__assert_fail@plt+0x4374>
   15e00:	b	15fe8 <__assert_fail@plt+0x454c>
   15e04:	add	r6, r6, #2
   15e08:	cmn	r6, #1
   15e0c:	beq	15fe8 <__assert_fail@plt+0x454c>
   15e10:	mov	r0, #3
   15e14:	cmp	r6, #10
   15e18:	bcc	15e50 <__assert_fail@plt+0x43b4>
   15e1c:	mov	r0, #3
   15e20:	mov	r2, #9
   15e24:	mov	r1, #12
   15e28:	udiv	r3, r6, r0
   15e2c:	mls	r3, r3, r0, r6
   15e30:	cmp	r3, #0
   15e34:	beq	15e50 <__assert_fail@plt+0x43b4>
   15e38:	add	r2, r2, r1
   15e3c:	add	r1, r1, #8
   15e40:	add	r0, r0, #2
   15e44:	add	r2, r2, #4
   15e48:	cmp	r2, r6
   15e4c:	bcc	15e28 <__assert_fail@plt+0x438c>
   15e50:	udiv	r1, r6, r0
   15e54:	mls	r0, r1, r0, r6
   15e58:	cmp	r0, #0
   15e5c:	beq	15e04 <__assert_fail@plt+0x4368>
   15e60:	sub	r0, r6, #1
   15e64:	cmn	r0, #-536870910	; 0xe0000002
   15e68:	bhi	15fe8 <__assert_fail@plt+0x454c>
   15e6c:	ldr	r0, [r4, #8]
   15e70:	cmp	r6, r0
   15e74:	bne	15e80 <__assert_fail@plt+0x43e4>
   15e78:	mov	r5, #1
   15e7c:	b	15fe8 <__assert_fail@plt+0x454c>
   15e80:	mov	r0, r6
   15e84:	mov	r1, #8
   15e88:	bl	19e10 <lchmod@@Base+0x34c8>
   15e8c:	cmp	r0, #0
   15e90:	str	r0, [sp, #4]
   15e94:	beq	15fe8 <__assert_fail@plt+0x454c>
   15e98:	mov	r1, #0
   15e9c:	add	r0, r0, r6, lsl #3
   15ea0:	str	r6, [sp, #12]
   15ea4:	add	r5, sp, #4
   15ea8:	mov	sl, r4
   15eac:	mov	r2, #0
   15eb0:	str	r1, [sp, #16]
   15eb4:	str	r1, [sp, #20]
   15eb8:	str	r0, [sp, #8]
   15ebc:	add	r0, r5, #20
   15ec0:	mov	r1, r4
   15ec4:	vld1.32	{d16-d17}, [r7]
   15ec8:	vst1.32	{d16-d17}, [r0]
   15ecc:	ldr	r0, [sl, #36]!	; 0x24
   15ed0:	str	r0, [sp, #40]	; 0x28
   15ed4:	mov	r0, r5
   15ed8:	bl	15ffc <__assert_fail@plt+0x4560>
   15edc:	cmp	r0, #0
   15ee0:	beq	15f08 <__assert_fail@plt+0x446c>
   15ee4:	ldr	r0, [r4]
   15ee8:	bl	13148 <__assert_fail@plt+0x16ac>
   15eec:	mov	r0, #36	; 0x24
   15ef0:	vld1.32	{d16-d17}, [r5], r0
   15ef4:	vst1.32	{d16-d17}, [r4], r0
   15ef8:	ldr	r0, [r5]
   15efc:	mov	r5, #1
   15f00:	str	r0, [r4]
   15f04:	b	15fe8 <__assert_fail@plt+0x454c>
   15f08:	ldr	r0, [sp, #40]	; 0x28
   15f0c:	str	r0, [sl]
   15f10:	ldr	r0, [sp, #8]
   15f14:	ldr	r8, [sp, #4]
   15f18:	cmp	r8, r0
   15f1c:	str	r0, [sp]
   15f20:	bcs	15fc4 <__assert_fail@plt+0x4528>
   15f24:	mov	r9, #0
   15f28:	ldr	r0, [r8]
   15f2c:	cmp	r0, #0
   15f30:	beq	15fb4 <__assert_fail@plt+0x4518>
   15f34:	ldr	r6, [r8, #4]
   15f38:	cmp	r6, #0
   15f3c:	beq	15fb0 <__assert_fail@plt+0x4514>
   15f40:	ldr	r1, [r4, #8]
   15f44:	ldr	r5, [r6]
   15f48:	ldr	r2, [r4, #24]
   15f4c:	mov	r0, r5
   15f50:	blx	r2
   15f54:	ldr	r1, [r4, #8]
   15f58:	cmp	r0, r1
   15f5c:	bcs	15ff4 <__assert_fail@plt+0x4558>
   15f60:	ldr	r3, [r4]
   15f64:	ldr	r2, [r6, #4]
   15f68:	ldr	r7, [r3, r0, lsl #3]
   15f6c:	cmp	r7, #0
   15f70:	beq	15f80 <__assert_fail@plt+0x44e4>
   15f74:	add	r0, r3, r0, lsl #3
   15f78:	add	r0, r0, #4
   15f7c:	b	15f98 <__assert_fail@plt+0x44fc>
   15f80:	str	r5, [r3, r0, lsl #3]
   15f84:	ldr	r0, [r4, #12]
   15f88:	add	r0, r0, #1
   15f8c:	str	r0, [r4, #12]
   15f90:	mov	r0, sl
   15f94:	str	r9, [r6]
   15f98:	ldr	r3, [r0]
   15f9c:	cmp	r2, #0
   15fa0:	str	r3, [r6, #4]
   15fa4:	str	r6, [r0]
   15fa8:	mov	r6, r2
   15fac:	bne	15f44 <__assert_fail@plt+0x44a8>
   15fb0:	str	r9, [r8, #4]
   15fb4:	ldr	r0, [sp]
   15fb8:	add	r8, r8, #8
   15fbc:	cmp	r8, r0
   15fc0:	bcc	15f28 <__assert_fail@plt+0x448c>
   15fc4:	add	r1, sp, #4
   15fc8:	mov	r0, r4
   15fcc:	mov	r2, #0
   15fd0:	mov	r5, #0
   15fd4:	bl	15ffc <__assert_fail@plt+0x4560>
   15fd8:	cmp	r0, #0
   15fdc:	beq	15ff4 <__assert_fail@plt+0x4558>
   15fe0:	ldr	r0, [sp, #4]
   15fe4:	bl	13148 <__assert_fail@plt+0x16ac>
   15fe8:	mov	r0, r5
   15fec:	sub	sp, fp, #28
   15ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ff4:	bl	11a3c <abort@plt>
   15ff8:	svcmi	0x00800000
   15ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16000:	add	fp, sp, #28
   16004:	sub	sp, sp, #12
   16008:	ldr	sl, [r1]
   1600c:	str	r1, [sp, #8]
   16010:	ldr	r1, [r1, #4]
   16014:	mov	r7, r0
   16018:	mov	r0, #1
   1601c:	str	r2, [sp, #4]
   16020:	cmp	sl, r1
   16024:	bcs	16180 <__assert_fail@plt+0x46e4>
   16028:	add	r8, r7, #36	; 0x24
   1602c:	mov	r9, #0
   16030:	ldr	r4, [sl]
   16034:	cmp	r4, #0
   16038:	beq	16168 <__assert_fail@plt+0x46cc>
   1603c:	ldr	r5, [sl, #4]
   16040:	cmp	r5, #0
   16044:	beq	160bc <__assert_fail@plt+0x4620>
   16048:	ldr	r1, [r7, #8]
   1604c:	ldr	r4, [r5]
   16050:	ldr	r2, [r7, #24]
   16054:	mov	r0, r4
   16058:	blx	r2
   1605c:	ldr	r1, [r7, #8]
   16060:	cmp	r0, r1
   16064:	bcs	16194 <__assert_fail@plt+0x46f8>
   16068:	ldr	r3, [r7]
   1606c:	ldr	r2, [r5, #4]
   16070:	ldr	r6, [r3, r0, lsl #3]
   16074:	cmp	r6, #0
   16078:	beq	16088 <__assert_fail@plt+0x45ec>
   1607c:	add	r0, r3, r0, lsl #3
   16080:	add	r0, r0, #4
   16084:	b	160a0 <__assert_fail@plt+0x4604>
   16088:	str	r4, [r3, r0, lsl #3]
   1608c:	ldr	r0, [r7, #12]
   16090:	add	r0, r0, #1
   16094:	str	r0, [r7, #12]
   16098:	mov	r0, r8
   1609c:	str	r9, [r5]
   160a0:	ldr	r3, [r0]
   160a4:	cmp	r2, #0
   160a8:	str	r3, [r5, #4]
   160ac:	str	r5, [r0]
   160b0:	mov	r5, r2
   160b4:	bne	1604c <__assert_fail@plt+0x45b0>
   160b8:	ldr	r4, [sl]
   160bc:	ldr	r0, [sp, #4]
   160c0:	str	r9, [sl, #4]
   160c4:	cmp	r0, #0
   160c8:	bne	16168 <__assert_fail@plt+0x46cc>
   160cc:	ldr	r1, [r7, #8]
   160d0:	ldr	r2, [r7, #24]
   160d4:	mov	r0, r4
   160d8:	blx	r2
   160dc:	mov	r5, r0
   160e0:	ldr	r0, [r7, #8]
   160e4:	cmp	r5, r0
   160e8:	bcs	16194 <__assert_fail@plt+0x46f8>
   160ec:	ldr	r6, [r7]
   160f0:	ldr	r0, [r6, r5, lsl #3]
   160f4:	cmp	r0, #0
   160f8:	beq	16118 <__assert_fail@plt+0x467c>
   160fc:	ldr	r0, [r8]
   16100:	cmp	r0, #0
   16104:	beq	1612c <__assert_fail@plt+0x4690>
   16108:	mov	r1, r0
   1610c:	ldr	r2, [r1, #4]!
   16110:	str	r2, [r8]
   16114:	b	16140 <__assert_fail@plt+0x46a4>
   16118:	str	r4, [r6, r5, lsl #3]
   1611c:	ldr	r0, [r7, #12]
   16120:	add	r0, r0, #1
   16124:	str	r0, [r7, #12]
   16128:	b	16154 <__assert_fail@plt+0x46b8>
   1612c:	mov	r0, #8
   16130:	bl	19e64 <lchmod@@Base+0x351c>
   16134:	cmp	r0, #0
   16138:	beq	16188 <__assert_fail@plt+0x46ec>
   1613c:	add	r1, r0, #4
   16140:	str	r4, [r0]
   16144:	add	r2, r6, r5, lsl #3
   16148:	ldr	r3, [r2, #4]
   1614c:	str	r3, [r1]
   16150:	str	r0, [r2, #4]
   16154:	ldr	r1, [sp, #8]
   16158:	str	r9, [sl]
   1615c:	ldr	r0, [r1, #12]
   16160:	sub	r0, r0, #1
   16164:	str	r0, [r1, #12]
   16168:	ldr	r0, [sp, #8]
   1616c:	add	sl, sl, #8
   16170:	ldr	r0, [r0, #4]
   16174:	cmp	sl, r0
   16178:	bcc	16030 <__assert_fail@plt+0x4594>
   1617c:	mov	r0, #1
   16180:	sub	sp, fp, #28
   16184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16188:	mov	r0, #0
   1618c:	sub	sp, fp, #28
   16190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16194:	bl	11a3c <abort@plt>
   16198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1619c:	add	fp, sp, #28
   161a0:	sub	sp, sp, #4
   161a4:	cmp	r1, #0
   161a8:	beq	164cc <__assert_fail@plt+0x4a30>
   161ac:	mov	r8, r2
   161b0:	mov	sl, r1
   161b4:	ldr	r1, [r0, #8]
   161b8:	ldr	r2, [r0, #24]
   161bc:	mov	r4, r0
   161c0:	mov	r0, sl
   161c4:	blx	r2
   161c8:	mov	r7, r0
   161cc:	ldr	r0, [r4, #8]
   161d0:	cmp	r7, r0
   161d4:	bcs	164cc <__assert_fail@plt+0x4a30>
   161d8:	ldr	r5, [r4]
   161dc:	mov	r9, r5
   161e0:	ldr	r1, [r9, r7, lsl #3]!
   161e4:	cmp	r1, #0
   161e8:	beq	16274 <__assert_fail@plt+0x47d8>
   161ec:	cmp	r1, sl
   161f0:	beq	1621c <__assert_fail@plt+0x4780>
   161f4:	ldr	r2, [r4, #28]
   161f8:	mov	r0, sl
   161fc:	blx	r2
   16200:	cmp	r0, #0
   16204:	mov	r6, r9
   16208:	beq	16230 <__assert_fail@plt+0x4794>
   1620c:	ldr	r0, [r6]
   16210:	cmp	r0, #0
   16214:	bne	16220 <__assert_fail@plt+0x4784>
   16218:	b	16274 <__assert_fail@plt+0x47d8>
   1621c:	mov	r0, sl
   16220:	cmp	r8, #0
   16224:	mov	r7, #0
   16228:	strne	r0, [r8]
   1622c:	b	16468 <__assert_fail@plt+0x49cc>
   16230:	add	r6, r5, r7, lsl #3
   16234:	ldr	r0, [r6, #4]!
   16238:	cmp	r0, #0
   1623c:	beq	16274 <__assert_fail@plt+0x47d8>
   16240:	ldr	r1, [r0]
   16244:	cmp	r1, sl
   16248:	beq	16268 <__assert_fail@plt+0x47cc>
   1624c:	ldr	r2, [r4, #28]
   16250:	mov	r0, sl
   16254:	blx	r2
   16258:	ldr	r6, [r6]
   1625c:	cmp	r0, #0
   16260:	beq	16234 <__assert_fail@plt+0x4798>
   16264:	b	1620c <__assert_fail@plt+0x4770>
   16268:	mov	r0, sl
   1626c:	cmp	r0, #0
   16270:	bne	16220 <__assert_fail@plt+0x4784>
   16274:	vldr	s0, [r4, #8]
   16278:	vldr	s2, [r4, #12]
   1627c:	ldr	r0, [r4, #20]
   16280:	vcvt.f32.u32	s0, s0
   16284:	vcvt.f32.u32	s4, s2
   16288:	vldr	s2, [r0, #8]
   1628c:	vmul.f32	s6, s2, s0
   16290:	vcmpe.f32	s6, s4
   16294:	vmrs	APSR_nzcv, fpscr
   16298:	bpl	163ec <__assert_fail@plt+0x4950>
   1629c:	movw	r1, #44800	; 0xaf00
   162a0:	movt	r1, #1
   162a4:	cmp	r0, r1
   162a8:	beq	16334 <__assert_fail@plt+0x4898>
   162ac:	vldr	s6, [pc, #540]	; 164d0 <__assert_fail@plt+0x4a34>
   162b0:	vcmpe.f32	s2, s6
   162b4:	vmrs	APSR_nzcv, fpscr
   162b8:	ble	16320 <__assert_fail@plt+0x4884>
   162bc:	vldr	s8, [pc, #528]	; 164d4 <__assert_fail@plt+0x4a38>
   162c0:	vcmpe.f32	s2, s8
   162c4:	vmrs	APSR_nzcv, fpscr
   162c8:	bpl	16320 <__assert_fail@plt+0x4884>
   162cc:	vldr	s8, [pc, #516]	; 164d8 <__assert_fail@plt+0x4a3c>
   162d0:	vldr	s10, [r0, #12]
   162d4:	vcmpe.f32	s10, s8
   162d8:	vmrs	APSR_nzcv, fpscr
   162dc:	ble	16320 <__assert_fail@plt+0x4884>
   162e0:	vldr	s8, [r0]
   162e4:	vcmpe.f32	s8, #0.0
   162e8:	vmrs	APSR_nzcv, fpscr
   162ec:	blt	16320 <__assert_fail@plt+0x4884>
   162f0:	vadd.f32	s6, s8, s6
   162f4:	vcmpe.f32	s6, s2
   162f8:	vmrs	APSR_nzcv, fpscr
   162fc:	bpl	16320 <__assert_fail@plt+0x4884>
   16300:	vldr	s8, [r0, #4]
   16304:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16308:	vcmpe.f32	s8, s10
   1630c:	vmrs	APSR_nzcv, fpscr
   16310:	bhi	16320 <__assert_fail@plt+0x4884>
   16314:	vcmpe.f32	s6, s8
   16318:	vmrs	APSR_nzcv, fpscr
   1631c:	bmi	16338 <__assert_fail@plt+0x489c>
   16320:	vldr	s2, [pc, #436]	; 164dc <__assert_fail@plt+0x4a40>
   16324:	movw	r0, #44800	; 0xaf00
   16328:	movt	r0, #1
   1632c:	str	r0, [r4, #20]
   16330:	b	16338 <__assert_fail@plt+0x489c>
   16334:	mov	r0, r1
   16338:	vmul.f32	s6, s2, s0
   1633c:	vcmpe.f32	s6, s4
   16340:	vmrs	APSR_nzcv, fpscr
   16344:	bpl	163ec <__assert_fail@plt+0x4950>
   16348:	vldr	s4, [r0, #12]
   1634c:	ldrb	r0, [r0, #16]
   16350:	mvn	r7, #0
   16354:	vmul.f32	s0, s4, s0
   16358:	vldr	s4, [pc, #384]	; 164e0 <__assert_fail@plt+0x4a44>
   1635c:	cmp	r0, #0
   16360:	vmul.f32	s2, s2, s0
   16364:	vseleq.f32	s0, s2, s0
   16368:	vcmpe.f32	s0, s4
   1636c:	vmrs	APSR_nzcv, fpscr
   16370:	bge	16468 <__assert_fail@plt+0x49cc>
   16374:	vcvt.u32.f32	s0, s0
   16378:	mov	r0, r4
   1637c:	vmov	r1, s0
   16380:	bl	15d98 <__assert_fail@plt+0x42fc>
   16384:	cmp	r0, #0
   16388:	beq	16468 <__assert_fail@plt+0x49cc>
   1638c:	ldr	r1, [r4, #8]
   16390:	ldr	r2, [r4, #24]
   16394:	mov	r0, sl
   16398:	blx	r2
   1639c:	mov	r7, r0
   163a0:	ldr	r0, [r4, #8]
   163a4:	cmp	r7, r0
   163a8:	bcs	164cc <__assert_fail@plt+0x4a30>
   163ac:	ldr	r5, [r4]
   163b0:	mov	r9, r5
   163b4:	ldr	r1, [r9, r7, lsl #3]!
   163b8:	cmp	r1, #0
   163bc:	beq	16414 <__assert_fail@plt+0x4978>
   163c0:	cmp	r1, sl
   163c4:	mov	r0, sl
   163c8:	beq	163e4 <__assert_fail@plt+0x4948>
   163cc:	ldr	r2, [r4, #28]
   163d0:	mov	r0, sl
   163d4:	blx	r2
   163d8:	cmp	r0, #0
   163dc:	beq	1647c <__assert_fail@plt+0x49e0>
   163e0:	ldr	r0, [r9]
   163e4:	cmp	r0, #0
   163e8:	bne	164cc <__assert_fail@plt+0x4a30>
   163ec:	ldr	r0, [r9]
   163f0:	cmp	r0, #0
   163f4:	beq	16414 <__assert_fail@plt+0x4978>
   163f8:	ldr	r0, [r4, #36]	; 0x24
   163fc:	cmp	r0, #0
   16400:	beq	16434 <__assert_fail@plt+0x4998>
   16404:	mov	r1, r0
   16408:	ldr	r2, [r1, #4]!
   1640c:	str	r2, [r4, #36]	; 0x24
   16410:	b	16448 <__assert_fail@plt+0x49ac>
   16414:	str	sl, [r9]
   16418:	ldr	r0, [r4, #12]
   1641c:	ldr	r1, [r4, #16]
   16420:	add	r0, r0, #1
   16424:	add	r1, r1, #1
   16428:	str	r0, [r4, #12]
   1642c:	str	r1, [r4, #16]
   16430:	b	16464 <__assert_fail@plt+0x49c8>
   16434:	mov	r0, #8
   16438:	bl	19e64 <lchmod@@Base+0x351c>
   1643c:	cmp	r0, #0
   16440:	beq	16474 <__assert_fail@plt+0x49d8>
   16444:	add	r1, r0, #4
   16448:	str	sl, [r0]
   1644c:	ldr	r2, [r9, #4]
   16450:	str	r2, [r1]
   16454:	str	r0, [r9, #4]
   16458:	ldr	r0, [r4, #16]
   1645c:	add	r0, r0, #1
   16460:	str	r0, [r4, #16]
   16464:	mov	r7, #1
   16468:	mov	r0, r7
   1646c:	sub	sp, fp, #28
   16470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16474:	mvn	r7, #0
   16478:	b	16468 <__assert_fail@plt+0x49cc>
   1647c:	add	r6, r5, r7, lsl #3
   16480:	ldr	r0, [r6, #4]!
   16484:	cmp	r0, #0
   16488:	beq	163ec <__assert_fail@plt+0x4950>
   1648c:	ldr	r1, [r0]
   16490:	cmp	r1, sl
   16494:	beq	164c0 <__assert_fail@plt+0x4a24>
   16498:	ldr	r2, [r4, #28]
   1649c:	mov	r0, sl
   164a0:	blx	r2
   164a4:	ldr	r6, [r6]
   164a8:	cmp	r0, #0
   164ac:	beq	16480 <__assert_fail@plt+0x49e4>
   164b0:	ldr	r0, [r6]
   164b4:	cmp	r0, #0
   164b8:	beq	163ec <__assert_fail@plt+0x4950>
   164bc:	b	164cc <__assert_fail@plt+0x4a30>
   164c0:	mov	r0, sl
   164c4:	cmp	r0, #0
   164c8:	beq	163ec <__assert_fail@plt+0x4950>
   164cc:	bl	11a3c <abort@plt>
   164d0:	stclcc	12, cr12, [ip, #820]	; 0x334
   164d4:	svccc	0x00666666
   164d8:	svccc	0x008ccccd
   164dc:	svccc	0x004ccccd
   164e0:	svcmi	0x00800000
   164e4:	push	{r4, sl, fp, lr}
   164e8:	add	fp, sp, #8
   164ec:	sub	sp, sp, #8
   164f0:	add	r2, sp, #4
   164f4:	mov	r4, r1
   164f8:	bl	16198 <__assert_fail@plt+0x46fc>
   164fc:	cmn	r0, #1
   16500:	beq	16514 <__assert_fail@plt+0x4a78>
   16504:	ldr	r1, [sp, #4]
   16508:	cmp	r0, #0
   1650c:	moveq	r4, r1
   16510:	b	16518 <__assert_fail@plt+0x4a7c>
   16514:	mov	r4, #0
   16518:	mov	r0, r4
   1651c:	sub	sp, fp, #8
   16520:	pop	{r4, sl, fp, pc}
   16524:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16528:	add	fp, sp, #24
   1652c:	mov	r9, r1
   16530:	ldr	r1, [r0, #8]
   16534:	ldr	r2, [r0, #24]
   16538:	mov	r5, r0
   1653c:	mov	r0, r9
   16540:	blx	r2
   16544:	mov	r7, r0
   16548:	ldr	r0, [r5, #8]
   1654c:	cmp	r7, r0
   16550:	bcs	167b0 <__assert_fail@plt+0x4d14>
   16554:	ldr	r6, [r5]
   16558:	mov	r8, #0
   1655c:	mov	r4, r6
   16560:	ldr	r1, [r4, r7, lsl #3]!
   16564:	cmp	r1, #0
   16568:	beq	1661c <__assert_fail@plt+0x4b80>
   1656c:	cmp	r1, r9
   16570:	beq	1658c <__assert_fail@plt+0x4af0>
   16574:	ldr	r2, [r5, #28]
   16578:	mov	r0, r9
   1657c:	blx	r2
   16580:	cmp	r0, #0
   16584:	beq	165c4 <__assert_fail@plt+0x4b28>
   16588:	ldr	r9, [r4]
   1658c:	add	r0, r6, r7, lsl #3
   16590:	ldr	r0, [r0, #4]
   16594:	cmp	r0, #0
   16598:	beq	1660c <__assert_fail@plt+0x4b70>
   1659c:	ldm	r0, {r1, r2}
   165a0:	stm	r4, {r1, r2}
   165a4:	mov	r1, #0
   165a8:	str	r1, [r0]
   165ac:	ldr	r1, [r5, #36]	; 0x24
   165b0:	str	r1, [r0, #4]
   165b4:	str	r0, [r5, #36]	; 0x24
   165b8:	cmp	r9, #0
   165bc:	bne	16654 <__assert_fail@plt+0x4bb8>
   165c0:	b	1661c <__assert_fail@plt+0x4b80>
   165c4:	add	r7, r6, r7, lsl #3
   165c8:	ldr	r0, [r7, #4]!
   165cc:	cmp	r0, #0
   165d0:	beq	1661c <__assert_fail@plt+0x4b80>
   165d4:	ldr	r1, [r0]
   165d8:	cmp	r1, r9
   165dc:	beq	16624 <__assert_fail@plt+0x4b88>
   165e0:	ldr	r2, [r5, #28]
   165e4:	mov	r0, r9
   165e8:	blx	r2
   165ec:	ldr	r1, [r7]
   165f0:	cmp	r0, #0
   165f4:	bne	1662c <__assert_fail@plt+0x4b90>
   165f8:	ldr	r0, [r1, #4]!
   165fc:	cmp	r0, #0
   16600:	mov	r7, r1
   16604:	bne	165d4 <__assert_fail@plt+0x4b38>
   16608:	b	1661c <__assert_fail@plt+0x4b80>
   1660c:	mov	r0, #0
   16610:	str	r0, [r4]
   16614:	cmp	r9, #0
   16618:	bne	16654 <__assert_fail@plt+0x4bb8>
   1661c:	mov	r0, r8
   16620:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16624:	mov	r1, r0
   16628:	b	16630 <__assert_fail@plt+0x4b94>
   1662c:	ldr	r9, [r1]
   16630:	ldr	r0, [r1, #4]
   16634:	str	r0, [r7]
   16638:	mov	r0, #0
   1663c:	str	r0, [r1]
   16640:	ldr	r0, [r5, #36]	; 0x24
   16644:	str	r0, [r1, #4]
   16648:	str	r1, [r5, #36]	; 0x24
   1664c:	cmp	r9, #0
   16650:	beq	1661c <__assert_fail@plt+0x4b80>
   16654:	ldr	r0, [r5, #16]
   16658:	sub	r0, r0, #1
   1665c:	str	r0, [r5, #16]
   16660:	ldr	r0, [r4]
   16664:	cmp	r0, #0
   16668:	bne	16770 <__assert_fail@plt+0x4cd4>
   1666c:	ldr	r0, [r5, #12]
   16670:	vldr	s0, [r5, #8]
   16674:	sub	r1, r0, #1
   16678:	str	r1, [r5, #12]
   1667c:	vmov	s2, r1
   16680:	ldr	r0, [r5, #20]
   16684:	vcvt.f32.u32	s0, s0
   16688:	vcvt.f32.u32	s2, s2
   1668c:	vldr	s4, [r0]
   16690:	vmul.f32	s6, s4, s0
   16694:	vcmpe.f32	s6, s2
   16698:	vmrs	APSR_nzcv, fpscr
   1669c:	ble	16770 <__assert_fail@plt+0x4cd4>
   166a0:	movw	r1, #44800	; 0xaf00
   166a4:	movt	r1, #1
   166a8:	cmp	r0, r1
   166ac:	beq	16704 <__assert_fail@plt+0x4c68>
   166b0:	vldr	s8, [pc, #252]	; 167b4 <__assert_fail@plt+0x4d18>
   166b4:	vldr	s6, [r0, #8]
   166b8:	vcmpe.f32	s6, s8
   166bc:	vmrs	APSR_nzcv, fpscr
   166c0:	ble	166f0 <__assert_fail@plt+0x4c54>
   166c4:	vldr	s10, [pc, #236]	; 167b8 <__assert_fail@plt+0x4d1c>
   166c8:	vcmpe.f32	s6, s10
   166cc:	vmrs	APSR_nzcv, fpscr
   166d0:	bpl	166f0 <__assert_fail@plt+0x4c54>
   166d4:	vcmpe.f32	s4, #0.0
   166d8:	vmrs	APSR_nzcv, fpscr
   166dc:	vldrge	s10, [r0, #12]
   166e0:	vldrge	s12, [pc, #212]	; 167bc <__assert_fail@plt+0x4d20>
   166e4:	vcmpege.f32	s10, s12
   166e8:	vmrsge	APSR_nzcv, fpscr
   166ec:	bgt	1677c <__assert_fail@plt+0x4ce0>
   166f0:	vldr	s4, [pc, #200]	; 167c0 <__assert_fail@plt+0x4d24>
   166f4:	movw	r0, #44800	; 0xaf00
   166f8:	movt	r0, #1
   166fc:	str	r0, [r5, #20]
   16700:	b	16708 <__assert_fail@plt+0x4c6c>
   16704:	mov	r0, r1
   16708:	vmul.f32	s4, s4, s0
   1670c:	vcmpe.f32	s4, s2
   16710:	vmrs	APSR_nzcv, fpscr
   16714:	ble	16770 <__assert_fail@plt+0x4cd4>
   16718:	ldrb	r1, [r0, #16]
   1671c:	vldr	s2, [r0, #4]
   16720:	cmp	r1, #0
   16724:	vmul.f32	s0, s2, s0
   16728:	vldreq	s2, [r0, #8]
   1672c:	mov	r0, r5
   16730:	vmuleq.f32	s0, s0, s2
   16734:	vcvt.u32.f32	s0, s0
   16738:	vmov	r1, s0
   1673c:	bl	15d98 <__assert_fail@plt+0x42fc>
   16740:	cmp	r0, #0
   16744:	bne	16770 <__assert_fail@plt+0x4cd4>
   16748:	ldr	r0, [r5, #36]	; 0x24
   1674c:	cmp	r0, #0
   16750:	beq	16768 <__assert_fail@plt+0x4ccc>
   16754:	ldr	r4, [r0, #4]
   16758:	bl	13148 <__assert_fail@plt+0x16ac>
   1675c:	cmp	r4, #0
   16760:	mov	r0, r4
   16764:	bne	16754 <__assert_fail@plt+0x4cb8>
   16768:	mov	r0, #0
   1676c:	str	r0, [r5, #36]	; 0x24
   16770:	mov	r8, r9
   16774:	mov	r0, r8
   16778:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1677c:	vadd.f32	s8, s4, s8
   16780:	vcmpe.f32	s8, s6
   16784:	vmrs	APSR_nzcv, fpscr
   16788:	bpl	166f0 <__assert_fail@plt+0x4c54>
   1678c:	vldr	s6, [r0, #4]
   16790:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16794:	vcmpe.f32	s6, s10
   16798:	vmrs	APSR_nzcv, fpscr
   1679c:	bhi	166f0 <__assert_fail@plt+0x4c54>
   167a0:	vcmpe.f32	s8, s6
   167a4:	vmrs	APSR_nzcv, fpscr
   167a8:	bmi	16708 <__assert_fail@plt+0x4c6c>
   167ac:	b	166f0 <__assert_fail@plt+0x4c54>
   167b0:	bl	11a3c <abort@plt>
   167b4:	stclcc	12, cr12, [ip, #820]	; 0x334
   167b8:	svccc	0x00666666
   167bc:	svccc	0x008ccccd
   167c0:	andeq	r0, r0, r0
   167c4:	b	16524 <__assert_fail@plt+0x4a88>
   167c8:	push	{r4, r5, fp, lr}
   167cc:	add	fp, sp, #8
   167d0:	mov	r5, r0
   167d4:	ldr	r0, [r0]
   167d8:	mov	r4, r1
   167dc:	bl	1a4a8 <lchmod@@Base+0x3b60>
   167e0:	ldrd	r2, [r5, #8]
   167e4:	eor	r0, r2, r0
   167e8:	mov	r1, r3
   167ec:	mov	r2, r4
   167f0:	mov	r3, #0
   167f4:	bl	1a6cc <lchmod@@Base+0x3d84>
   167f8:	mov	r0, r2
   167fc:	pop	{r4, r5, fp, pc}
   16800:	push	{r4, r5, r6, r7, fp, lr}
   16804:	add	fp, sp, #16
   16808:	ldrd	r2, [r1, #8]
   1680c:	ldrd	r4, [r0, #8]
   16810:	eor	r3, r5, r3
   16814:	eor	r2, r4, r2
   16818:	orrs	r2, r2, r3
   1681c:	mov	r2, #0
   16820:	bne	16850 <__assert_fail@plt+0x4db4>
   16824:	ldrd	r4, [r1, #16]
   16828:	ldrd	r6, [r0, #16]
   1682c:	eor	r3, r7, r5
   16830:	eor	r7, r6, r4
   16834:	orrs	r3, r7, r3
   16838:	bne	16850 <__assert_fail@plt+0x4db4>
   1683c:	ldr	r1, [r1]
   16840:	ldr	r0, [r0]
   16844:	bl	116d0 <strcmp@plt>
   16848:	clz	r0, r0
   1684c:	lsr	r2, r0, #5
   16850:	mov	r0, r2
   16854:	pop	{r4, r5, r6, r7, fp, pc}
   16858:	push	{r4, sl, fp, lr}
   1685c:	add	fp, sp, #8
   16860:	mov	r4, r0
   16864:	ldr	r0, [r0]
   16868:	bl	13148 <__assert_fail@plt+0x16ac>
   1686c:	mov	r0, r4
   16870:	pop	{r4, sl, fp, lr}
   16874:	b	13148 <__assert_fail@plt+0x16ac>
   16878:	mov	r3, #1
   1687c:	mov	r2, #0
   16880:	vdup.32	q8, r1
   16884:	strb	r3, [r0, #28]
   16888:	str	r2, [r0, #20]
   1688c:	str	r2, [r0, #24]
   16890:	vst1.32	{d16-d17}, [r0]!
   16894:	str	r1, [r0]
   16898:	bx	lr
   1689c:	ldrb	r0, [r0, #28]
   168a0:	bx	lr
   168a4:	push	{fp, lr}
   168a8:	mov	fp, sp
   168ac:	ldrb	r3, [r0, #28]
   168b0:	ldr	r2, [r0, #20]
   168b4:	eor	lr, r3, #1
   168b8:	add	r2, r2, lr
   168bc:	and	r3, r2, #3
   168c0:	ldr	ip, [r0, r3, lsl #2]
   168c4:	str	r1, [r0, r3, lsl #2]
   168c8:	str	r3, [r0, #20]
   168cc:	ldr	r1, [r0, #24]
   168d0:	cmp	r3, r1
   168d4:	addeq	r1, r2, lr
   168d8:	andeq	r1, r1, #3
   168dc:	streq	r1, [r0, #24]
   168e0:	mov	r1, #0
   168e4:	strb	r1, [r0, #28]
   168e8:	mov	r0, ip
   168ec:	pop	{fp, pc}
   168f0:	ldrb	r1, [r0, #28]
   168f4:	cmp	r1, #0
   168f8:	bne	1693c <__assert_fail@plt+0x4ea0>
   168fc:	ldr	r3, [r0, #20]
   16900:	ldr	r2, [r0, #16]
   16904:	ldr	r1, [r0, r3, lsl #2]
   16908:	str	r2, [r0, r3, lsl #2]
   1690c:	ldr	r2, [r0, #20]
   16910:	ldr	r3, [r0, #24]
   16914:	cmp	r2, r3
   16918:	moveq	r2, #1
   1691c:	strbeq	r2, [r0, #28]
   16920:	moveq	r0, r1
   16924:	bxeq	lr
   16928:	sub	r2, r2, #1
   1692c:	and	r2, r2, #3
   16930:	str	r2, [r0, #20]
   16934:	mov	r0, r1
   16938:	bx	lr
   1693c:	push	{fp, lr}
   16940:	mov	fp, sp
   16944:	bl	11a3c <abort@plt>

00016948 <lchmod@@Base>:
   16948:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1694c:	add	fp, sp, #24
   16950:	sub	sp, sp, #136	; 0x88
   16954:	mov	r4, r1
   16958:	mov	r1, #2654208	; 0x288000
   1695c:	mov	r5, r0
   16960:	bl	1182c <open64@plt>
   16964:	mov	r6, r0
   16968:	cmp	r0, #0
   1696c:	blt	169b8 <lchmod@@Base+0x70>
   16970:	movw	r2, #44444	; 0xad9c
   16974:	mov	r0, #4096	; 0x1000
   16978:	add	r3, sp, #32
   1697c:	mov	r1, r6
   16980:	str	r0, [sp]
   16984:	movt	r2, #1
   16988:	mov	r0, #3
   1698c:	bl	117a8 <__fxstatat64@plt>
   16990:	cmp	r0, #0
   16994:	beq	169c0 <lchmod@@Base+0x78>
   16998:	bl	118ec <__errno_location@plt>
   1699c:	ldr	r5, [r0]
   169a0:	mov	r4, r0
   169a4:	mov	r0, r6
   169a8:	bl	11a48 <close@plt>
   169ac:	str	r5, [r4]
   169b0:	mvn	r7, #0
   169b4:	b	16a60 <lchmod@@Base+0x118>
   169b8:	mov	r7, r6
   169bc:	b	16a60 <lchmod@@Base+0x118>
   169c0:	ldr	r0, [sp, #48]	; 0x30
   169c4:	and	r0, r0, #61440	; 0xf000
   169c8:	cmp	r0, #40960	; 0xa000
   169cc:	bne	169ec <lchmod@@Base+0xa4>
   169d0:	mov	r0, r6
   169d4:	bl	11a48 <close@plt>
   169d8:	bl	118ec <__errno_location@plt>
   169dc:	mov	r1, #95	; 0x5f
   169e0:	mvn	r7, #0
   169e4:	str	r1, [r0]
   169e8:	b	16a60 <lchmod@@Base+0x118>
   169ec:	movw	r3, #44820	; 0xaf14
   169f0:	add	r7, sp, #6
   169f4:	mov	r1, #1
   169f8:	mov	r2, #26
   169fc:	str	r6, [sp]
   16a00:	movt	r3, #1
   16a04:	mov	r0, r7
   16a08:	bl	118f8 <__sprintf_chk@plt>
   16a0c:	mov	r0, r7
   16a10:	mov	r1, r4
   16a14:	bl	11a18 <chmod@plt>
   16a18:	mov	r7, r0
   16a1c:	bl	118ec <__errno_location@plt>
   16a20:	ldr	r9, [r0]
   16a24:	mov	r8, r0
   16a28:	mov	r0, r6
   16a2c:	bl	11a48 <close@plt>
   16a30:	cmp	r7, #0
   16a34:	beq	16a54 <lchmod@@Base+0x10c>
   16a38:	cmp	r9, #2
   16a3c:	bne	16a5c <lchmod@@Base+0x114>
   16a40:	mov	r0, r5
   16a44:	mov	r1, r4
   16a48:	bl	11a18 <chmod@plt>
   16a4c:	mov	r7, r0
   16a50:	b	16a60 <lchmod@@Base+0x118>
   16a54:	mov	r7, #0
   16a58:	b	16a60 <lchmod@@Base+0x118>
   16a5c:	str	r9, [r8]
   16a60:	mov	r0, r7
   16a64:	sub	sp, fp, #24
   16a68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a70:	add	fp, sp, #28
   16a74:	sub	sp, sp, #4
   16a78:	ldrb	r1, [r0]
   16a7c:	mov	r4, r0
   16a80:	and	r0, r1, #248	; 0xf8
   16a84:	cmp	r0, #48	; 0x30
   16a88:	bne	16ad4 <lchmod@@Base+0x18c>
   16a8c:	mov	r0, #0
   16a90:	mov	r5, #0
   16a94:	mov	r2, r4
   16a98:	lsl	r3, r5, #3
   16a9c:	uxtab	r1, r3, r1
   16aa0:	sub	r5, r1, #48	; 0x30
   16aa4:	cmp	r0, r5, lsr #12
   16aa8:	bne	16acc <lchmod@@Base+0x184>
   16aac:	ldrb	r1, [r2, #1]
   16ab0:	add	r6, r2, #1
   16ab4:	and	r2, r1, #248	; 0xf8
   16ab8:	cmp	r2, #48	; 0x30
   16abc:	mov	r2, r6
   16ac0:	beq	16a98 <lchmod@@Base+0x150>
   16ac4:	cmp	r1, #0
   16ac8:	beq	16b44 <lchmod@@Base+0x1fc>
   16acc:	sub	sp, fp, #28
   16ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ad4:	movw	sl, #5
   16ad8:	mov	r2, #1
   16adc:	mvn	r3, #42	; 0x2a
   16ae0:	mov	r7, #1
   16ae4:	mov	r0, #1
   16ae8:	movt	sl, #4
   16aec:	b	16afc <lchmod@@Base+0x1b4>
   16af0:	ldrb	r1, [r4, r7]
   16af4:	add	r0, r6, r0
   16af8:	add	r7, r7, #1
   16afc:	uxtab	r6, r3, r1
   16b00:	uxtb	r1, r1
   16b04:	cmp	r6, #18
   16b08:	bhi	16b18 <lchmod@@Base+0x1d0>
   16b0c:	tst	sl, r2, lsl r6
   16b10:	mov	r6, #1
   16b14:	bne	16af0 <lchmod@@Base+0x1a8>
   16b18:	cmp	r1, #0
   16b1c:	beq	16b28 <lchmod@@Base+0x1e0>
   16b20:	mov	r6, #0
   16b24:	b	16af0 <lchmod@@Base+0x1a8>
   16b28:	mov	r1, #16
   16b2c:	bl	198c0 <lchmod@@Base+0x2f78>
   16b30:	mov	r9, #0
   16b34:	mov	ip, #1
   16b38:	mvn	lr, #87	; 0x57
   16b3c:	mov	r8, #0
   16b40:	b	16b90 <lchmod@@Base+0x248>
   16b44:	mov	r0, #32
   16b48:	bl	197f0 <lchmod@@Base+0x2ea8>
   16b4c:	movw	r1, #317	; 0x13d
   16b50:	mov	r2, #0
   16b54:	and	r3, r5, #3072	; 0xc00
   16b58:	movw	r7, #1023	; 0x3ff
   16b5c:	strh	r1, [r0]
   16b60:	strb	r2, [r0, #17]
   16b64:	sub	r2, r6, r4
   16b68:	movw	r1, #4095	; 0xfff
   16b6c:	cmp	r2, #5
   16b70:	str	r1, [r0, #4]
   16b74:	str	r5, [r0, #8]
   16b78:	orrlt	r1, r3, r7
   16b7c:	str	r1, [r0, #12]
   16b80:	sub	sp, fp, #28
   16b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b88:	add	r4, r4, #1
   16b8c:	mov	r8, r3
   16b90:	mov	r2, #0
   16b94:	b	16ba0 <lchmod@@Base+0x258>
   16b98:	orr	r2, r2, r1
   16b9c:	add	r4, r4, #1
   16ba0:	ldrb	r6, [r4]
   16ba4:	sub	r3, r6, #97	; 0x61
   16ba8:	cmp	r3, #20
   16bac:	bhi	16c28 <lchmod@@Base+0x2e0>
   16bb0:	add	r5, pc, #4
   16bb4:	mov	r1, #2496	; 0x9c0
   16bb8:	ldr	pc, [r5, r3, lsl #2]
   16bbc:	andeq	r6, r1, r0, lsl ip
   16bc0:	muleq	r1, r4, lr
   16bc4:	muleq	r1, r4, lr
   16bc8:	muleq	r1, r4, lr
   16bcc:	muleq	r1, r4, lr
   16bd0:	muleq	r1, r4, lr
   16bd4:	andeq	r6, r1, r8, lsl ip
   16bd8:	muleq	r1, r4, lr
   16bdc:	muleq	r1, r4, lr
   16be0:	muleq	r1, r4, lr
   16be4:	muleq	r1, r4, lr
   16be8:	muleq	r1, r4, lr
   16bec:	muleq	r1, r4, lr
   16bf0:	muleq	r1, r4, lr
   16bf4:	andeq	r6, r1, r0, lsr #24
   16bf8:	muleq	r1, r4, lr
   16bfc:	muleq	r1, r4, lr
   16c00:	muleq	r1, r4, lr
   16c04:	muleq	r1, r4, lr
   16c08:	muleq	r1, r4, lr
   16c0c:	muleq	r1, r8, fp
   16c10:	movw	r1, #4095	; 0xfff
   16c14:	b	16b98 <lchmod@@Base+0x250>
   16c18:	movw	r1, #1080	; 0x438
   16c1c:	b	16b98 <lchmod@@Base+0x250>
   16c20:	movw	r1, #519	; 0x207
   16c24:	b	16b98 <lchmod@@Base+0x250>
   16c28:	sub	r1, r6, #43	; 0x2b
   16c2c:	cmp	r1, #18
   16c30:	bhi	16e94 <lchmod@@Base+0x54c>
   16c34:	tst	sl, ip, lsl r1
   16c38:	beq	16e94 <lchmod@@Base+0x54c>
   16c3c:	ldrb	r1, [r4, #1]
   16c40:	sub	r3, r1, #48	; 0x30
   16c44:	cmp	r3, #8
   16c48:	bcs	16ca4 <lchmod@@Base+0x35c>
   16c4c:	add	r3, r4, #2
   16c50:	mov	r7, #0
   16c54:	lsl	r4, r7, #3
   16c58:	uxtab	r1, r4, r1
   16c5c:	sub	r7, r1, #48	; 0x30
   16c60:	cmp	r9, r7, lsr #12
   16c64:	bne	16e94 <lchmod@@Base+0x54c>
   16c68:	ldrb	r1, [r3], #1
   16c6c:	and	r4, r1, #248	; 0xf8
   16c70:	cmp	r4, #48	; 0x30
   16c74:	beq	16c54 <lchmod@@Base+0x30c>
   16c78:	cmp	r2, #0
   16c7c:	bne	16e94 <lchmod@@Base+0x54c>
   16c80:	sub	r4, r3, #1
   16c84:	mov	r5, #1
   16c88:	movw	r2, #4095	; 0xfff
   16c8c:	cmp	r1, #0
   16c90:	beq	16cd0 <lchmod@@Base+0x388>
   16c94:	cmp	r1, #44	; 0x2c
   16c98:	movw	r1, #4095	; 0xfff
   16c9c:	beq	16de0 <lchmod@@Base+0x498>
   16ca0:	b	16e94 <lchmod@@Base+0x54c>
   16ca4:	add	r4, r4, #2
   16ca8:	cmp	r1, #103	; 0x67
   16cac:	beq	16cd8 <lchmod@@Base+0x390>
   16cb0:	cmp	r1, #111	; 0x6f
   16cb4:	beq	16ce8 <lchmod@@Base+0x3a0>
   16cb8:	cmp	r1, #117	; 0x75
   16cbc:	bne	16cf8 <lchmod@@Base+0x3b0>
   16cc0:	mov	r5, #3
   16cc4:	mov	r1, #0
   16cc8:	mov	r7, #448	; 0x1c0
   16ccc:	b	16de0 <lchmod@@Base+0x498>
   16cd0:	movw	r1, #4095	; 0xfff
   16cd4:	b	16de0 <lchmod@@Base+0x498>
   16cd8:	mov	r5, #3
   16cdc:	mov	r1, #0
   16ce0:	mov	r7, #56	; 0x38
   16ce4:	b	16de0 <lchmod@@Base+0x498>
   16ce8:	mov	r5, #3
   16cec:	mov	r1, #0
   16cf0:	mov	r7, #7
   16cf4:	b	16de0 <lchmod@@Base+0x498>
   16cf8:	mov	r3, #1
   16cfc:	mov	r7, #0
   16d00:	b	16d08 <lchmod@@Base+0x3c0>
   16d04:	ldrb	r1, [r4], #1
   16d08:	uxtab	r1, lr, r1
   16d0c:	mov	r5, r3
   16d10:	cmp	r1, #32
   16d14:	bhi	16dd4 <lchmod@@Base+0x48c>
   16d18:	add	ip, pc, #4
   16d1c:	mov	r3, #2
   16d20:	ldr	pc, [ip, r1, lsl #2]
   16d24:	andeq	r6, r1, r4, lsl #26
   16d28:	ldrdeq	r6, [r1], -r4
   16d2c:	ldrdeq	r6, [r1], -r4
   16d30:	ldrdeq	r6, [r1], -r4
   16d34:	ldrdeq	r6, [r1], -r4
   16d38:	ldrdeq	r6, [r1], -r4
   16d3c:	ldrdeq	r6, [r1], -r4
   16d40:	ldrdeq	r6, [r1], -r4
   16d44:	ldrdeq	r6, [r1], -r4
   16d48:	ldrdeq	r6, [r1], -r4
   16d4c:	ldrdeq	r6, [r1], -r4
   16d50:	ldrdeq	r6, [r1], -r4
   16d54:	ldrdeq	r6, [r1], -r4
   16d58:	ldrdeq	r6, [r1], -r4
   16d5c:	ldrdeq	r6, [r1], -r4
   16d60:	ldrdeq	r6, [r1], -r4
   16d64:	ldrdeq	r6, [r1], -r4
   16d68:	ldrdeq	r6, [r1], -r4
   16d6c:	ldrdeq	r6, [r1], -r4
   16d70:	ldrdeq	r6, [r1], -r4
   16d74:	ldrdeq	r6, [r1], -r4
   16d78:	ldrdeq	r6, [r1], -r4
   16d7c:	ldrdeq	r6, [r1], -r4
   16d80:	ldrdeq	r6, [r1], -r4
   16d84:	ldrdeq	r6, [r1], -r4
   16d88:	ldrdeq	r6, [r1], -r4
   16d8c:	andeq	r6, r1, r8, lsr #27
   16d90:			; <UNDEFINED> instruction: 0x00016db0
   16d94:			; <UNDEFINED> instruction: 0x00016db8
   16d98:	ldrdeq	r6, [r1], -r4
   16d9c:	ldrdeq	r6, [r1], -r4
   16da0:	andeq	r6, r1, r0, asr #27
   16da4:	andeq	r6, r1, r8, asr #27
   16da8:	orr	r7, r7, #292	; 0x124
   16dac:	b	16dcc <lchmod@@Base+0x484>
   16db0:	orr	r7, r7, #3072	; 0xc00
   16db4:	b	16dcc <lchmod@@Base+0x484>
   16db8:	orr	r7, r7, #512	; 0x200
   16dbc:	b	16dcc <lchmod@@Base+0x484>
   16dc0:	orr	r7, r7, #146	; 0x92
   16dc4:	b	16dcc <lchmod@@Base+0x484>
   16dc8:	orr	r7, r7, #73	; 0x49
   16dcc:	mov	r3, r5
   16dd0:	b	16d04 <lchmod@@Base+0x3bc>
   16dd4:	sub	r4, r4, #1
   16dd8:	mov	r1, #0
   16ddc:	mov	ip, #1
   16de0:	mov	r3, r0
   16de4:	cmp	r1, #0
   16de8:	strb	r6, [r3, r8, lsl #4]!
   16dec:	strb	r5, [r3, #1]
   16df0:	stmib	r3, {r2, r7}
   16df4:	bne	16e04 <lchmod@@Base+0x4bc>
   16df8:	cmp	r2, #0
   16dfc:	andne	r7, r7, r2
   16e00:	mov	r1, r7
   16e04:	add	r7, r0, r8, lsl #4
   16e08:	add	r3, r8, #1
   16e0c:	str	r1, [r7, #12]
   16e10:	ldrb	r6, [r4]
   16e14:	sub	r1, r6, #43	; 0x2b
   16e18:	cmp	r1, #18
   16e1c:	bhi	16e78 <lchmod@@Base+0x530>
   16e20:	add	r7, pc, #4
   16e24:	mov	r8, r3
   16e28:	ldr	pc, [r7, r1, lsl #2]
   16e2c:	andeq	r6, r1, ip, lsr ip
   16e30:	andeq	r6, r1, r8, lsl #23
   16e34:	andeq	r6, r1, ip, lsr ip
   16e38:	muleq	r1, r4, lr
   16e3c:	muleq	r1, r4, lr
   16e40:	muleq	r1, r4, lr
   16e44:	muleq	r1, r4, lr
   16e48:	muleq	r1, r4, lr
   16e4c:	muleq	r1, r4, lr
   16e50:	muleq	r1, r4, lr
   16e54:	muleq	r1, r4, lr
   16e58:	muleq	r1, r4, lr
   16e5c:	muleq	r1, r4, lr
   16e60:	muleq	r1, r4, lr
   16e64:	muleq	r1, r4, lr
   16e68:	muleq	r1, r4, lr
   16e6c:	muleq	r1, r4, lr
   16e70:	muleq	r1, r4, lr
   16e74:	andeq	r6, r1, ip, lsr ip
   16e78:	cmp	r6, #0
   16e7c:	bne	16e94 <lchmod@@Base+0x54c>
   16e80:	add	r1, r0, r3, lsl #4
   16e84:	mov	r2, #0
   16e88:	strb	r2, [r1, #1]
   16e8c:	sub	sp, fp, #28
   16e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e94:	bl	13148 <__assert_fail@plt+0x16ac>
   16e98:	mov	r0, #0
   16e9c:	sub	sp, fp, #28
   16ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ea4:	push	{r4, sl, fp, lr}
   16ea8:	add	fp, sp, #8
   16eac:	sub	sp, sp, #104	; 0x68
   16eb0:	mov	r1, r0
   16eb4:	mov	r2, sp
   16eb8:	mov	r0, #3
   16ebc:	bl	11a24 <__xstat64@plt>
   16ec0:	mov	r1, r0
   16ec4:	mov	r0, #0
   16ec8:	cmp	r1, #0
   16ecc:	beq	16ed8 <lchmod@@Base+0x590>
   16ed0:	sub	sp, fp, #8
   16ed4:	pop	{r4, sl, fp, pc}
   16ed8:	ldr	r4, [sp, #16]
   16edc:	mov	r0, #32
   16ee0:	bl	197f0 <lchmod@@Base+0x2ea8>
   16ee4:	movw	r1, #317	; 0x13d
   16ee8:	strh	r1, [r0]
   16eec:	movw	r1, #4095	; 0xfff
   16ef0:	stmib	r0, {r1, r4}
   16ef4:	str	r1, [r0, #12]
   16ef8:	mov	r1, #0
   16efc:	strb	r1, [r0, #17]
   16f00:	sub	sp, fp, #8
   16f04:	pop	{r4, sl, fp, pc}
   16f08:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16f0c:	add	fp, sp, #24
   16f10:	ldrb	r4, [r3, #1]
   16f14:	ldr	ip, [fp, #8]
   16f18:	bfc	r0, #12, #20
   16f1c:	cmp	r4, #0
   16f20:	beq	17000 <lchmod@@Base+0x6b8>
   16f24:	cmp	r1, #0
   16f28:	mov	lr, r1
   16f2c:	add	r3, r3, #8
   16f30:	mov	r9, #0
   16f34:	movw	r8, #4095	; 0xfff
   16f38:	movwne	lr, #3072	; 0xc00
   16f3c:	mov	r5, r3
   16f40:	ldr	r7, [r3, #-4]
   16f44:	ldr	r3, [r3]
   16f48:	uxtb	r4, r4
   16f4c:	ldr	r6, [r5, #4]
   16f50:	cmp	r4, #2
   16f54:	bic	r6, lr, r6
   16f58:	beq	16f84 <lchmod@@Base+0x63c>
   16f5c:	cmp	r4, #3
   16f60:	bne	16f90 <lchmod@@Base+0x648>
   16f64:	and	r4, r3, r0
   16f68:	tst	r4, #146	; 0x92
   16f6c:	mov	r3, r4
   16f70:	orrne	r3, r3, #146	; 0x92
   16f74:	tst	r4, #292	; 0x124
   16f78:	orrne	r3, r3, #292	; 0x124
   16f7c:	tst	r4, #73	; 0x49
   16f80:	b	16f8c <lchmod@@Base+0x644>
   16f84:	and	r4, r0, #73	; 0x49
   16f88:	orrs	r4, r4, r1
   16f8c:	orrne	r3, r3, #73	; 0x49
   16f90:	cmp	r7, #0
   16f94:	mov	r4, r7
   16f98:	mvneq	r4, r2
   16f9c:	bic	r4, r4, r6
   16fa0:	and	r3, r4, r3
   16fa4:	ldrb	r4, [r5, #-8]
   16fa8:	cmp	r4, #43	; 0x2b
   16fac:	beq	16fdc <lchmod@@Base+0x694>
   16fb0:	cmp	r4, #45	; 0x2d
   16fb4:	beq	16fe4 <lchmod@@Base+0x69c>
   16fb8:	cmp	r4, #61	; 0x3d
   16fbc:	bne	16fec <lchmod@@Base+0x6a4>
   16fc0:	mvn	r4, r7
   16fc4:	cmp	r7, #0
   16fc8:	orrne	r6, r6, r4
   16fcc:	and	r0, r6, r0
   16fd0:	orr	r0, r3, r0
   16fd4:	bic	r3, r8, r6
   16fd8:	b	16fe8 <lchmod@@Base+0x6a0>
   16fdc:	orr	r0, r3, r0
   16fe0:	b	16fe8 <lchmod@@Base+0x6a0>
   16fe4:	bic	r0, r0, r3
   16fe8:	orr	r9, r3, r9
   16fec:	ldrb	r4, [r5, #9]
   16ff0:	add	r3, r5, #16
   16ff4:	cmp	r4, #0
   16ff8:	bne	16f3c <lchmod@@Base+0x5f4>
   16ffc:	b	17004 <lchmod@@Base+0x6bc>
   17000:	mov	r9, #0
   17004:	cmp	ip, #0
   17008:	strne	r9, [ip]
   1700c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17010:	sub	sp, sp, #4
   17014:	push	{fp, lr}
   17018:	mov	fp, sp
   1701c:	sub	sp, sp, #4
   17020:	str	r3, [fp, #8]
   17024:	mov	r3, #0
   17028:	tst	r2, #64	; 0x40
   1702c:	addne	r3, fp, #8
   17030:	addne	r3, r3, #4
   17034:	strne	r3, [sp]
   17038:	ldrne	r3, [fp, #8]
   1703c:	bl	118d4 <openat64@plt>
   17040:	bl	190f4 <lchmod@@Base+0x27ac>
   17044:	mov	sp, fp
   17048:	pop	{fp, lr}
   1704c:	add	sp, sp, #4
   17050:	bx	lr
   17054:	push	{r4, r5, r6, sl, fp, lr}
   17058:	add	fp, sp, #16
   1705c:	orr	r2, r2, #18688	; 0x4900
   17060:	mov	r4, r3
   17064:	orr	r2, r2, #524288	; 0x80000
   17068:	bl	17010 <lchmod@@Base+0x6c8>
   1706c:	mov	r5, r0
   17070:	mov	r0, #0
   17074:	cmp	r5, #0
   17078:	poplt	{r4, r5, r6, sl, fp, pc}
   1707c:	mov	r0, r5
   17080:	bl	119a0 <fdopendir@plt>
   17084:	cmp	r0, #0
   17088:	strne	r5, [r4]
   1708c:	popne	{r4, r5, r6, sl, fp, pc}
   17090:	bl	118ec <__errno_location@plt>
   17094:	ldr	r6, [r0]
   17098:	mov	r4, r0
   1709c:	mov	r0, r5
   170a0:	bl	11a48 <close@plt>
   170a4:	mov	r0, #0
   170a8:	str	r6, [r4]
   170ac:	pop	{r4, r5, r6, sl, fp, pc}
   170b0:	push	{r4, r5, fp, lr}
   170b4:	add	fp, sp, #8
   170b8:	cmp	r0, #0
   170bc:	beq	17150 <lchmod@@Base+0x808>
   170c0:	mov	r1, #47	; 0x2f
   170c4:	mov	r4, r0
   170c8:	bl	1197c <strrchr@plt>
   170cc:	cmp	r0, #0
   170d0:	mov	r5, r4
   170d4:	addne	r5, r0, #1
   170d8:	sub	r0, r5, r4
   170dc:	cmp	r0, #7
   170e0:	blt	17134 <lchmod@@Base+0x7ec>
   170e4:	movw	r1, #44893	; 0xaf5d
   170e8:	sub	r0, r5, #7
   170ec:	mov	r2, #7
   170f0:	movt	r1, #1
   170f4:	bl	11a30 <strncmp@plt>
   170f8:	cmp	r0, #0
   170fc:	bne	17134 <lchmod@@Base+0x7ec>
   17100:	movw	r1, #44901	; 0xaf65
   17104:	mov	r0, r5
   17108:	mov	r2, #3
   1710c:	movt	r1, #1
   17110:	bl	11a30 <strncmp@plt>
   17114:	cmp	r0, #0
   17118:	beq	17124 <lchmod@@Base+0x7dc>
   1711c:	mov	r4, r5
   17120:	b	17134 <lchmod@@Base+0x7ec>
   17124:	movw	r0, #49600	; 0xc1c0
   17128:	add	r4, r5, #3
   1712c:	movt	r0, #2
   17130:	str	r4, [r0]
   17134:	movw	r0, #49604	; 0xc1c4
   17138:	movt	r0, #2
   1713c:	str	r4, [r0]
   17140:	movw	r0, #49640	; 0xc1e8
   17144:	movt	r0, #2
   17148:	str	r4, [r0]
   1714c:	pop	{r4, r5, fp, pc}
   17150:	movw	r0, #49616	; 0xc1d0
   17154:	mov	r1, #55	; 0x37
   17158:	mov	r2, #1
   1715c:	movt	r0, #2
   17160:	ldr	r3, [r0]
   17164:	movw	r0, #44837	; 0xaf25
   17168:	movt	r0, #1
   1716c:	bl	117d8 <fwrite@plt>
   17170:	bl	11a3c <abort@plt>
   17174:	push	{r4, r5, r6, sl, fp, lr}
   17178:	add	fp, sp, #16
   1717c:	mov	r4, r0
   17180:	movw	r0, #49648	; 0xc1f0
   17184:	movt	r0, #2
   17188:	cmp	r4, #0
   1718c:	moveq	r4, r0
   17190:	bl	118ec <__errno_location@plt>
   17194:	ldr	r6, [r0]
   17198:	mov	r5, r0
   1719c:	mov	r0, r4
   171a0:	mov	r1, #48	; 0x30
   171a4:	bl	19c50 <lchmod@@Base+0x3308>
   171a8:	str	r6, [r5]
   171ac:	pop	{r4, r5, r6, sl, fp, pc}
   171b0:	movw	r1, #49648	; 0xc1f0
   171b4:	cmp	r0, #0
   171b8:	movt	r1, #2
   171bc:	movne	r1, r0
   171c0:	ldr	r0, [r1]
   171c4:	bx	lr
   171c8:	movw	r2, #49648	; 0xc1f0
   171cc:	cmp	r0, #0
   171d0:	movt	r2, #2
   171d4:	movne	r2, r0
   171d8:	str	r1, [r2]
   171dc:	bx	lr
   171e0:	movw	r3, #49648	; 0xc1f0
   171e4:	cmp	r0, #0
   171e8:	movt	r3, #2
   171ec:	movne	r3, r0
   171f0:	ubfx	r0, r1, #5, #3
   171f4:	and	r1, r1, #31
   171f8:	add	r0, r3, r0, lsl #2
   171fc:	ldr	r3, [r0, #8]
   17200:	eor	r2, r2, r3, lsr r1
   17204:	and	r2, r2, #1
   17208:	eor	r2, r3, r2, lsl r1
   1720c:	str	r2, [r0, #8]
   17210:	mov	r0, #1
   17214:	and	r0, r0, r3, lsr r1
   17218:	bx	lr
   1721c:	movw	r2, #49648	; 0xc1f0
   17220:	cmp	r0, #0
   17224:	movt	r2, #2
   17228:	movne	r2, r0
   1722c:	ldr	r0, [r2, #4]
   17230:	str	r1, [r2, #4]
   17234:	bx	lr
   17238:	movw	r3, #49648	; 0xc1f0
   1723c:	cmp	r0, #0
   17240:	movt	r3, #2
   17244:	movne	r3, r0
   17248:	cmp	r1, #0
   1724c:	mov	r0, #10
   17250:	cmpne	r2, #0
   17254:	str	r0, [r3]
   17258:	bne	17268 <lchmod@@Base+0x920>
   1725c:	push	{fp, lr}
   17260:	mov	fp, sp
   17264:	bl	11a3c <abort@plt>
   17268:	str	r1, [r3, #40]	; 0x28
   1726c:	str	r2, [r3, #44]	; 0x2c
   17270:	bx	lr
   17274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17278:	add	fp, sp, #28
   1727c:	sub	sp, sp, #20
   17280:	mov	r7, r0
   17284:	ldr	r0, [fp, #8]
   17288:	movw	r5, #49648	; 0xc1f0
   1728c:	mov	r8, r3
   17290:	mov	r9, r2
   17294:	mov	sl, r1
   17298:	movt	r5, #2
   1729c:	cmp	r0, #0
   172a0:	movne	r5, r0
   172a4:	bl	118ec <__errno_location@plt>
   172a8:	mov	r4, r0
   172ac:	ldm	r5, {r0, r1}
   172b0:	ldr	r2, [r5, #40]	; 0x28
   172b4:	ldr	r3, [r5, #44]	; 0x2c
   172b8:	add	r5, r5, #8
   172bc:	ldr	r6, [r4]
   172c0:	stm	sp, {r0, r1, r5}
   172c4:	str	r2, [sp, #12]
   172c8:	str	r3, [sp, #16]
   172cc:	mov	r0, r7
   172d0:	mov	r1, sl
   172d4:	mov	r2, r9
   172d8:	mov	r3, r8
   172dc:	bl	172ec <lchmod@@Base+0x9a4>
   172e0:	str	r6, [r4]
   172e4:	sub	sp, fp, #28
   172e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172f0:	add	fp, sp, #28
   172f4:	sub	sp, sp, #156	; 0x9c
   172f8:	str	r0, [sp, #80]	; 0x50
   172fc:	ldr	r0, [fp, #12]
   17300:	mov	r6, r1
   17304:	mov	r9, r3
   17308:	str	r2, [fp, #-84]	; 0xffffffac
   1730c:	and	r1, r0, #4
   17310:	str	r1, [sp, #32]
   17314:	and	r1, r0, #1
   17318:	str	r1, [sp, #36]	; 0x24
   1731c:	ubfx	r4, r0, #1, #1
   17320:	bl	117f0 <__ctype_get_mb_cur_max@plt>
   17324:	str	r0, [sp, #40]	; 0x28
   17328:	ldr	r0, [fp, #24]
   1732c:	ldr	r7, [fp, #8]
   17330:	mov	r1, #0
   17334:	mov	r5, #1
   17338:	str	r1, [fp, #-56]	; 0xffffffc8
   1733c:	mov	r1, #0
   17340:	str	r1, [sp, #60]	; 0x3c
   17344:	str	r0, [sp, #76]	; 0x4c
   17348:	ldr	r0, [fp, #20]
   1734c:	str	r0, [sp, #72]	; 0x48
   17350:	mov	r0, #0
   17354:	str	r0, [sp, #56]	; 0x38
   17358:	mov	r0, #0
   1735c:	str	r0, [sp, #92]	; 0x5c
   17360:	mov	r0, #0
   17364:	str	r0, [fp, #-76]	; 0xffffffb4
   17368:	mov	r0, #0
   1736c:	cmp	r7, #10
   17370:	bhi	182f0 <lchmod@@Base+0x19a8>
   17374:	add	r1, pc, #28
   17378:	mov	sl, r6
   1737c:	ldr	r6, [sp, #80]	; 0x50
   17380:	ldr	ip, [fp, #-84]	; 0xffffffac
   17384:	mov	r8, #0
   17388:	mov	r2, #1
   1738c:	mov	r3, #0
   17390:	mov	lr, r9
   17394:	ldr	pc, [r1, r7, lsl #2]
   17398:	andeq	r7, r1, ip, ror r4
   1739c:	andeq	r7, r1, r8, lsr #9
   173a0:	andeq	r7, r1, ip, ror #8
   173a4:	andeq	r7, r1, r4, ror #8
   173a8:	muleq	r1, ip, r4
   173ac:	strdeq	r7, [r1], -r0
   173b0:	andeq	r7, r1, ip, lsl #9
   173b4:	andeq	r7, r1, ip, asr #10
   173b8:	andeq	r7, r1, r4, asr #7
   173bc:	andeq	r7, r1, r4, asr #7
   173c0:	andeq	r7, r1, ip, ror #7
   173c4:	movw	r0, #44983	; 0xafb7
   173c8:	mov	r1, r7
   173cc:	movt	r0, #1
   173d0:	bl	18cfc <lchmod@@Base+0x23b4>
   173d4:	str	r0, [sp, #72]	; 0x48
   173d8:	movw	r0, #44985	; 0xafb9
   173dc:	mov	r1, r7
   173e0:	movt	r0, #1
   173e4:	bl	18cfc <lchmod@@Base+0x23b4>
   173e8:	str	r0, [sp, #76]	; 0x4c
   173ec:	str	r5, [fp, #-48]	; 0xffffffd0
   173f0:	mov	r8, #0
   173f4:	mov	r5, r7
   173f8:	tst	r4, #1
   173fc:	bne	17434 <lchmod@@Base+0xaec>
   17400:	ldr	r0, [sp, #72]	; 0x48
   17404:	ldrb	r0, [r0]
   17408:	cmp	r0, #0
   1740c:	beq	17434 <lchmod@@Base+0xaec>
   17410:	ldr	r1, [sp, #72]	; 0x48
   17414:	mov	r8, #0
   17418:	add	r1, r1, #1
   1741c:	cmp	r8, sl
   17420:	strbcc	r0, [r6, r8]
   17424:	ldrb	r0, [r1, r8]
   17428:	add	r8, r8, #1
   1742c:	cmp	r0, #0
   17430:	bne	1741c <lchmod@@Base+0xad4>
   17434:	ldr	r7, [sp, #76]	; 0x4c
   17438:	mov	r0, r7
   1743c:	bl	118bc <strlen@plt>
   17440:	str	r7, [sp, #92]	; 0x5c
   17444:	mov	r7, r5
   17448:	ldr	ip, [fp, #-84]	; 0xffffffac
   1744c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17450:	str	r0, [fp, #-76]	; 0xffffffb4
   17454:	mov	r2, #1
   17458:	mov	r3, r4
   1745c:	mov	lr, r9
   17460:	b	1754c <lchmod@@Base+0xc04>
   17464:	mov	r0, #1
   17468:	b	174a8 <lchmod@@Base+0xb60>
   1746c:	tst	r4, #1
   17470:	bne	174a8 <lchmod@@Base+0xb60>
   17474:	mov	r2, r0
   17478:	b	174d0 <lchmod@@Base+0xb88>
   1747c:	mov	r7, #0
   17480:	mov	r8, #0
   17484:	mov	r2, r0
   17488:	b	17548 <lchmod@@Base+0xc00>
   1748c:	mov	r0, #1
   17490:	mov	r8, #0
   17494:	mov	r7, #5
   17498:	b	17504 <lchmod@@Base+0xbbc>
   1749c:	mov	r2, #1
   174a0:	tst	r4, #1
   174a4:	beq	174d0 <lchmod@@Base+0xb88>
   174a8:	mov	r1, #1
   174ac:	mov	r8, #0
   174b0:	mov	r7, #2
   174b4:	mov	r2, r0
   174b8:	mov	r3, #1
   174bc:	str	r1, [fp, #-76]	; 0xffffffb4
   174c0:	movw	r1, #44985	; 0xafb9
   174c4:	movt	r1, #1
   174c8:	str	r1, [sp, #92]	; 0x5c
   174cc:	b	1754c <lchmod@@Base+0xc04>
   174d0:	cmp	sl, #0
   174d4:	mov	r8, #1
   174d8:	mov	r7, #2
   174dc:	movne	r0, #39	; 0x27
   174e0:	strbne	r0, [r6]
   174e4:	movw	r0, #44985	; 0xafb9
   174e8:	movt	r0, #1
   174ec:	b	1753c <lchmod@@Base+0xbf4>
   174f0:	mov	r7, #5
   174f4:	tst	r4, #1
   174f8:	beq	17520 <lchmod@@Base+0xbd8>
   174fc:	mov	r0, #1
   17500:	mov	r8, #0
   17504:	str	r0, [fp, #-76]	; 0xffffffb4
   17508:	movw	r0, #44981	; 0xafb5
   1750c:	mov	r2, #1
   17510:	mov	r3, #1
   17514:	movt	r0, #1
   17518:	str	r0, [sp, #92]	; 0x5c
   1751c:	b	1754c <lchmod@@Base+0xc04>
   17520:	cmp	sl, #0
   17524:	mov	r8, #1
   17528:	mov	r2, #1
   1752c:	movne	r0, #34	; 0x22
   17530:	strbne	r0, [r6]
   17534:	movw	r0, #44981	; 0xafb5
   17538:	movt	r0, #1
   1753c:	str	r0, [sp, #92]	; 0x5c
   17540:	mov	r0, #1
   17544:	str	r0, [fp, #-76]	; 0xffffffb4
   17548:	mov	r3, #0
   1754c:	ldr	r0, [fp, #16]
   17550:	str	r3, [fp, #-72]	; 0xffffffb8
   17554:	str	r7, [fp, #-64]	; 0xffffffc0
   17558:	str	r2, [sp, #84]	; 0x54
   1755c:	cmp	r0, #0
   17560:	movwne	r0, #1
   17564:	and	r0, r0, r3
   17568:	str	r0, [fp, #-88]	; 0xffffffa8
   1756c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17570:	cmp	r0, #0
   17574:	movwne	r0, #1
   17578:	subs	r4, r7, #2
   1757c:	mov	r7, #0
   17580:	and	r1, r0, r3
   17584:	str	r4, [fp, #-80]	; 0xffffffb0
   17588:	and	r1, r2, r1
   1758c:	str	r1, [sp, #48]	; 0x30
   17590:	clz	r1, r4
   17594:	lsr	r1, r1, #5
   17598:	and	r1, r1, r3
   1759c:	eor	r3, r3, #1
   175a0:	str	r1, [sp, #64]	; 0x40
   175a4:	mov	r1, r4
   175a8:	str	r3, [sp, #88]	; 0x58
   175ac:	movwne	r1, #1
   175b0:	orr	r3, r1, r3
   175b4:	and	r1, r1, r2
   175b8:	and	r0, r0, r1
   175bc:	str	r3, [sp, #68]	; 0x44
   175c0:	str	r1, [fp, #-68]	; 0xffffffbc
   175c4:	str	r0, [fp, #-60]	; 0xffffffc4
   175c8:	eor	r0, r2, #1
   175cc:	str	r0, [sp, #52]	; 0x34
   175d0:	cmn	lr, #1
   175d4:	beq	175e4 <lchmod@@Base+0xc9c>
   175d8:	cmp	r7, lr
   175dc:	bne	175f0 <lchmod@@Base+0xca8>
   175e0:	b	18118 <lchmod@@Base+0x17d0>
   175e4:	ldrb	r0, [ip, r7]
   175e8:	cmp	r0, #0
   175ec:	beq	18120 <lchmod@@Base+0x17d8>
   175f0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   175f4:	mov	r9, #0
   175f8:	str	r5, [fp, #-48]	; 0xffffffd0
   175fc:	cmp	r0, #0
   17600:	beq	17634 <lchmod@@Base+0xcec>
   17604:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17608:	add	r4, r7, r0
   1760c:	cmp	r0, #2
   17610:	bcc	1762c <lchmod@@Base+0xce4>
   17614:	cmn	lr, #1
   17618:	bne	1762c <lchmod@@Base+0xce4>
   1761c:	mov	r0, ip
   17620:	bl	118bc <strlen@plt>
   17624:	ldr	ip, [fp, #-84]	; 0xffffffac
   17628:	mov	lr, r0
   1762c:	cmp	r4, lr
   17630:	bls	1763c <lchmod@@Base+0xcf4>
   17634:	mov	r0, #0
   17638:	b	1767c <lchmod@@Base+0xd34>
   1763c:	ldr	r1, [sp, #92]	; 0x5c
   17640:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17644:	add	r0, ip, r7
   17648:	mov	r4, lr
   1764c:	bl	11754 <memcmp@plt>
   17650:	ldr	r2, [sp, #88]	; 0x58
   17654:	cmp	r0, #0
   17658:	mov	r1, r0
   1765c:	movwne	r1, #1
   17660:	orr	r1, r1, r2
   17664:	tst	r1, #1
   17668:	beq	181b0 <lchmod@@Base+0x1868>
   1766c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17670:	clz	r0, r0
   17674:	mov	lr, r4
   17678:	lsr	r0, r0, #5
   1767c:	str	r0, [fp, #-52]	; 0xffffffcc
   17680:	ldrb	r5, [ip, r7]
   17684:	cmp	r5, #126	; 0x7e
   17688:	bhi	17a40 <lchmod@@Base+0x10f8>
   1768c:	add	r3, pc, #16
   17690:	mov	r4, #1
   17694:	mov	r2, #110	; 0x6e
   17698:	mov	r0, #97	; 0x61
   1769c:	mov	r1, #0
   176a0:	ldr	pc, [r3, r5, lsl #2]
   176a4:	andeq	r7, r1, ip, lsr r9
   176a8:	andeq	r7, r1, r0, asr #20
   176ac:	andeq	r7, r1, r0, asr #20
   176b0:	andeq	r7, r1, r0, asr #20
   176b4:	andeq	r7, r1, r0, asr #20
   176b8:	andeq	r7, r1, r0, asr #20
   176bc:	andeq	r7, r1, r0, asr #20
   176c0:	strdeq	r7, [r1], -r4
   176c4:	andeq	r7, r1, ip, lsl r9
   176c8:	andeq	r7, r1, r4, lsl r9
   176cc:	andeq	r7, r1, r8, lsr #18
   176d0:	andeq	r7, r1, r8, lsr #19
   176d4:	andeq	r7, r1, ip, lsl #18
   176d8:	andeq	r7, r1, r4, lsr #18
   176dc:	andeq	r7, r1, r0, asr #20
   176e0:	andeq	r7, r1, r0, asr #20
   176e4:	andeq	r7, r1, r0, asr #20
   176e8:	andeq	r7, r1, r0, asr #20
   176ec:	andeq	r7, r1, r0, asr #20
   176f0:	andeq	r7, r1, r0, asr #20
   176f4:	andeq	r7, r1, r0, asr #20
   176f8:	andeq	r7, r1, r0, asr #20
   176fc:	andeq	r7, r1, r0, asr #20
   17700:	andeq	r7, r1, r0, asr #20
   17704:	andeq	r7, r1, r0, asr #20
   17708:	andeq	r7, r1, r0, asr #20
   1770c:	andeq	r7, r1, r0, asr #20
   17710:	andeq	r7, r1, r0, asr #20
   17714:	andeq	r7, r1, r0, asr #20
   17718:	andeq	r7, r1, r0, asr #20
   1771c:	andeq	r7, r1, r0, asr #20
   17720:	andeq	r7, r1, r0, asr #20
   17724:	andeq	r7, r1, ip, lsr #21
   17728:			; <UNDEFINED> instruction: 0x00017ab0
   1772c:			; <UNDEFINED> instruction: 0x00017ab0
   17730:			; <UNDEFINED> instruction: 0x000178b4
   17734:			; <UNDEFINED> instruction: 0x00017ab0
   17738:	andeq	r7, r1, r0, lsr #17
   1773c:			; <UNDEFINED> instruction: 0x00017ab0
   17740:			; <UNDEFINED> instruction: 0x000179b0
   17744:			; <UNDEFINED> instruction: 0x00017ab0
   17748:			; <UNDEFINED> instruction: 0x00017ab0
   1774c:			; <UNDEFINED> instruction: 0x00017ab0
   17750:	andeq	r7, r1, r0, lsr #17
   17754:	andeq	r7, r1, r0, lsr #17
   17758:	andeq	r7, r1, r0, lsr #17
   1775c:	andeq	r7, r1, r0, lsr #17
   17760:	andeq	r7, r1, r0, lsr #17
   17764:	andeq	r7, r1, r0, lsr #17
   17768:	andeq	r7, r1, r0, lsr #17
   1776c:	andeq	r7, r1, r0, lsr #17
   17770:	andeq	r7, r1, r0, lsr #17
   17774:	andeq	r7, r1, r0, lsr #17
   17778:	andeq	r7, r1, r0, lsr #17
   1777c:	andeq	r7, r1, r0, lsr #17
   17780:	andeq	r7, r1, r0, lsr #17
   17784:	andeq	r7, r1, r0, lsr #17
   17788:	andeq	r7, r1, r0, lsr #17
   1778c:	andeq	r7, r1, r0, lsr #17
   17790:			; <UNDEFINED> instruction: 0x00017ab0
   17794:			; <UNDEFINED> instruction: 0x00017ab0
   17798:			; <UNDEFINED> instruction: 0x00017ab0
   1779c:			; <UNDEFINED> instruction: 0x00017ab0
   177a0:	andeq	r7, r1, ip, ror r9
   177a4:	andeq	r7, r1, r0, asr #20
   177a8:	andeq	r7, r1, r0, lsr #17
   177ac:	andeq	r7, r1, r0, lsr #17
   177b0:	andeq	r7, r1, r0, lsr #17
   177b4:	andeq	r7, r1, r0, lsr #17
   177b8:	andeq	r7, r1, r0, lsr #17
   177bc:	andeq	r7, r1, r0, lsr #17
   177c0:	andeq	r7, r1, r0, lsr #17
   177c4:	andeq	r7, r1, r0, lsr #17
   177c8:	andeq	r7, r1, r0, lsr #17
   177cc:	andeq	r7, r1, r0, lsr #17
   177d0:	andeq	r7, r1, r0, lsr #17
   177d4:	andeq	r7, r1, r0, lsr #17
   177d8:	andeq	r7, r1, r0, lsr #17
   177dc:	andeq	r7, r1, r0, lsr #17
   177e0:	andeq	r7, r1, r0, lsr #17
   177e4:	andeq	r7, r1, r0, lsr #17
   177e8:	andeq	r7, r1, r0, lsr #17
   177ec:	andeq	r7, r1, r0, lsr #17
   177f0:	andeq	r7, r1, r0, lsr #17
   177f4:	andeq	r7, r1, r0, lsr #17
   177f8:	andeq	r7, r1, r0, lsr #17
   177fc:	andeq	r7, r1, r0, lsr #17
   17800:	andeq	r7, r1, r0, lsr #17
   17804:	andeq	r7, r1, r0, lsr #17
   17808:	andeq	r7, r1, r0, lsr #17
   1780c:	andeq	r7, r1, r0, lsr #17
   17810:			; <UNDEFINED> instruction: 0x00017ab0
   17814:	andeq	r7, r1, r8, ror #17
   17818:	andeq	r7, r1, r0, lsr #17
   1781c:			; <UNDEFINED> instruction: 0x00017ab0
   17820:	andeq	r7, r1, r0, lsr #17
   17824:			; <UNDEFINED> instruction: 0x00017ab0
   17828:	andeq	r7, r1, r0, lsr #17
   1782c:	andeq	r7, r1, r0, lsr #17
   17830:	andeq	r7, r1, r0, lsr #17
   17834:	andeq	r7, r1, r0, lsr #17
   17838:	andeq	r7, r1, r0, lsr #17
   1783c:	andeq	r7, r1, r0, lsr #17
   17840:	andeq	r7, r1, r0, lsr #17
   17844:	andeq	r7, r1, r0, lsr #17
   17848:	andeq	r7, r1, r0, lsr #17
   1784c:	andeq	r7, r1, r0, lsr #17
   17850:	andeq	r7, r1, r0, lsr #17
   17854:	andeq	r7, r1, r0, lsr #17
   17858:	andeq	r7, r1, r0, lsr #17
   1785c:	andeq	r7, r1, r0, lsr #17
   17860:	andeq	r7, r1, r0, lsr #17
   17864:	andeq	r7, r1, r0, lsr #17
   17868:	andeq	r7, r1, r0, lsr #17
   1786c:	andeq	r7, r1, r0, lsr #17
   17870:	andeq	r7, r1, r0, lsr #17
   17874:	andeq	r7, r1, r0, lsr #17
   17878:	andeq	r7, r1, r0, lsr #17
   1787c:	andeq	r7, r1, r0, lsr #17
   17880:	andeq	r7, r1, r0, lsr #17
   17884:	andeq	r7, r1, r0, lsr #17
   17888:	andeq	r7, r1, r0, lsr #17
   1788c:	andeq	r7, r1, r0, lsr #17
   17890:	andeq	r7, r1, r8, asr #17
   17894:			; <UNDEFINED> instruction: 0x00017ab0
   17898:	andeq	r7, r1, r8, asr #17
   1789c:			; <UNDEFINED> instruction: 0x000178b4
   178a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   178a4:	cmp	r0, #0
   178a8:	beq	17b08 <lchmod@@Base+0x11c0>
   178ac:	ldr	r0, [fp, #16]
   178b0:	b	17b0c <lchmod@@Base+0x11c4>
   178b4:	mov	r4, #0
   178b8:	cmp	r7, #0
   178bc:	beq	17aac <lchmod@@Base+0x1164>
   178c0:	mov	r9, #0
   178c4:	b	178a0 <lchmod@@Base+0xf58>
   178c8:	mov	r4, #0
   178cc:	cmn	lr, #1
   178d0:	beq	17a90 <lchmod@@Base+0x1148>
   178d4:	cmp	r7, #0
   178d8:	bne	178c0 <lchmod@@Base+0xf78>
   178dc:	cmp	lr, #1
   178e0:	beq	17aac <lchmod@@Base+0x1164>
   178e4:	b	178c0 <lchmod@@Base+0xf78>
   178e8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   178ec:	cmp	r0, #2
   178f0:	bne	17ad0 <lchmod@@Base+0x1188>
   178f4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   178f8:	tst	r0, #1
   178fc:	bne	181cc <lchmod@@Base+0x1884>
   17900:	mov	r9, #0
   17904:	mov	r0, #92	; 0x5c
   17908:	b	17ae4 <lchmod@@Base+0x119c>
   1790c:	mov	r0, #102	; 0x66
   17910:	b	17af4 <lchmod@@Base+0x11ac>
   17914:	mov	r2, #116	; 0x74
   17918:	b	17928 <lchmod@@Base+0xfe0>
   1791c:	mov	r0, #98	; 0x62
   17920:	b	17af4 <lchmod@@Base+0x11ac>
   17924:	mov	r2, #114	; 0x72
   17928:	ldr	r0, [sp, #68]	; 0x44
   1792c:	tst	r0, #1
   17930:	mov	r0, r2
   17934:	bne	17af4 <lchmod@@Base+0x11ac>
   17938:	b	181cc <lchmod@@Base+0x1884>
   1793c:	ldr	r0, [sp, #84]	; 0x54
   17940:	tst	r0, #1
   17944:	beq	17be4 <lchmod@@Base+0x129c>
   17948:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1794c:	tst	r0, #1
   17950:	bne	182dc <lchmod@@Base+0x1994>
   17954:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17958:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1795c:	cmp	r0, #2
   17960:	ldr	r0, [fp, #-80]	; 0xffffffb0
   17964:	movwne	r0, #1
   17968:	orr	r0, r0, r2
   1796c:	tst	r0, #1
   17970:	beq	17fb4 <lchmod@@Base+0x166c>
   17974:	mov	r0, r8
   17978:	b	17fe8 <lchmod@@Base+0x16a0>
   1797c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17980:	mov	r9, #0
   17984:	mov	r5, #63	; 0x3f
   17988:	cmp	r0, #5
   1798c:	beq	17d98 <lchmod@@Base+0x1450>
   17990:	cmp	r0, #2
   17994:	bne	17e3c <lchmod@@Base+0x14f4>
   17998:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1799c:	tst	r0, #1
   179a0:	beq	17e40 <lchmod@@Base+0x14f8>
   179a4:	b	181cc <lchmod@@Base+0x1884>
   179a8:	mov	r0, #118	; 0x76
   179ac:	b	17af4 <lchmod@@Base+0x11ac>
   179b0:	mov	r0, #1
   179b4:	mov	r5, #39	; 0x27
   179b8:	str	r0, [sp, #60]	; 0x3c
   179bc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   179c0:	cmp	r0, #2
   179c4:	bne	17a38 <lchmod@@Base+0x10f0>
   179c8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   179cc:	tst	r0, #1
   179d0:	bne	181cc <lchmod@@Base+0x1884>
   179d4:	ldr	r2, [sp, #56]	; 0x38
   179d8:	clz	r1, sl
   179dc:	mov	r9, #0
   179e0:	lsr	r1, r1, #5
   179e4:	cmp	r2, #0
   179e8:	mov	r0, r2
   179ec:	movwne	r0, #1
   179f0:	orrs	r0, r0, r1
   179f4:	moveq	r2, sl
   179f8:	moveq	sl, r0
   179fc:	cmp	r8, sl
   17a00:	str	r2, [sp, #56]	; 0x38
   17a04:	movcc	r0, #39	; 0x27
   17a08:	strbcc	r0, [r6, r8]
   17a0c:	add	r0, r8, #1
   17a10:	cmp	r0, sl
   17a14:	movcc	r1, #92	; 0x5c
   17a18:	strbcc	r1, [r6, r0]
   17a1c:	add	r0, r8, #2
   17a20:	add	r8, r8, #3
   17a24:	cmp	r0, sl
   17a28:	movcc	r1, #39	; 0x27
   17a2c:	strbcc	r1, [r6, r0]
   17a30:	mov	r0, #0
   17a34:	str	r0, [fp, #-56]	; 0xffffffc8
   17a38:	mov	r4, #1
   17a3c:	b	178a0 <lchmod@@Base+0xf58>
   17a40:	ldr	r0, [sp, #40]	; 0x28
   17a44:	cmp	r0, #1
   17a48:	bne	17c10 <lchmod@@Base+0x12c8>
   17a4c:	str	lr, [sp, #28]
   17a50:	bl	1188c <__ctype_b_loc@plt>
   17a54:	ldr	r0, [r0]
   17a58:	ldr	ip, [fp, #-84]	; 0xffffffac
   17a5c:	mov	r1, #1
   17a60:	add	r0, r0, r5, lsl #1
   17a64:	ldrb	r0, [r0, #1]
   17a68:	ubfx	r4, r0, #6, #1
   17a6c:	ldr	r0, [sp, #52]	; 0x34
   17a70:	mov	r2, r1
   17a74:	cmp	r1, #1
   17a78:	orr	r0, r4, r0
   17a7c:	bhi	17e48 <lchmod@@Base+0x1500>
   17a80:	tst	r0, #1
   17a84:	beq	17e48 <lchmod@@Base+0x1500>
   17a88:	ldr	lr, [sp, #28]
   17a8c:	b	178a0 <lchmod@@Base+0xf58>
   17a90:	cmp	r7, #0
   17a94:	ldrbeq	r0, [ip, #1]
   17a98:	cmpeq	r0, #0
   17a9c:	beq	17aac <lchmod@@Base+0x1164>
   17aa0:	mvn	lr, #0
   17aa4:	mov	r9, #0
   17aa8:	b	178a0 <lchmod@@Base+0xf58>
   17aac:	mov	r1, #1
   17ab0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17ab4:	cmp	r0, #2
   17ab8:	bne	17ac8 <lchmod@@Base+0x1180>
   17abc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17ac0:	tst	r0, #1
   17ac4:	bne	181cc <lchmod@@Base+0x1884>
   17ac8:	mov	r4, r1
   17acc:	b	178a0 <lchmod@@Base+0xf58>
   17ad0:	ldr	r1, [sp, #48]	; 0x30
   17ad4:	mov	r9, #0
   17ad8:	mov	r0, #92	; 0x5c
   17adc:	cmp	r1, #0
   17ae0:	beq	17af4 <lchmod@@Base+0x11ac>
   17ae4:	mov	r4, #0
   17ae8:	cmp	r9, #0
   17aec:	beq	18080 <lchmod@@Base+0x1738>
   17af0:	b	180bc <lchmod@@Base+0x1774>
   17af4:	ldr	r1, [sp, #84]	; 0x54
   17af8:	mov	r4, #0
   17afc:	mov	r9, #0
   17b00:	tst	r1, #1
   17b04:	bne	17b44 <lchmod@@Base+0x11fc>
   17b08:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17b0c:	cmp	r0, #0
   17b10:	mov	r0, r5
   17b14:	beq	17b38 <lchmod@@Base+0x11f0>
   17b18:	ldr	r1, [fp, #16]
   17b1c:	ubfx	r0, r5, #5, #3
   17b20:	mov	r2, #1
   17b24:	ldr	r0, [r1, r0, lsl #2]
   17b28:	and	r1, r5, #31
   17b2c:	tst	r0, r2, lsl r1
   17b30:	mov	r0, r5
   17b34:	bne	17b44 <lchmod@@Base+0x11fc>
   17b38:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17b3c:	cmp	r1, #0
   17b40:	beq	18078 <lchmod@@Base+0x1730>
   17b44:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17b48:	tst	r1, #1
   17b4c:	bne	181a4 <lchmod@@Base+0x185c>
   17b50:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17b54:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17b58:	cmp	r1, #2
   17b5c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17b60:	movwne	r1, #1
   17b64:	orr	r1, r1, r2
   17b68:	tst	r1, #1
   17b6c:	beq	17b78 <lchmod@@Base+0x1230>
   17b70:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17b74:	b	17bb4 <lchmod@@Base+0x126c>
   17b78:	cmp	r8, sl
   17b7c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17b80:	movcc	r1, #39	; 0x27
   17b84:	strbcc	r1, [r6, r8]
   17b88:	add	r1, r8, #1
   17b8c:	cmp	r1, sl
   17b90:	movcc	r2, #36	; 0x24
   17b94:	strbcc	r2, [r6, r1]
   17b98:	add	r1, r8, #2
   17b9c:	add	r8, r8, #3
   17ba0:	cmp	r1, sl
   17ba4:	movcc	r2, #39	; 0x27
   17ba8:	strbcc	r2, [r6, r1]
   17bac:	mov	r1, #1
   17bb0:	str	r1, [fp, #-56]	; 0xffffffc8
   17bb4:	cmp	r8, sl
   17bb8:	movcc	r1, #92	; 0x5c
   17bbc:	strbcc	r1, [r6, r8]
   17bc0:	add	r8, r8, #1
   17bc4:	cmp	r8, sl
   17bc8:	and	r5, r5, r4
   17bcc:	add	r7, r7, #1
   17bd0:	strbcc	r0, [r6, r8]
   17bd4:	add	r8, r8, #1
   17bd8:	cmn	lr, #1
   17bdc:	bne	175d8 <lchmod@@Base+0xc90>
   17be0:	b	175e4 <lchmod@@Base+0xc9c>
   17be4:	ldr	r0, [sp, #36]	; 0x24
   17be8:	mov	r4, #0
   17bec:	mov	r9, #0
   17bf0:	mov	r5, #0
   17bf4:	cmp	r0, #0
   17bf8:	beq	17b08 <lchmod@@Base+0x11c0>
   17bfc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17c00:	add	r7, r7, #1
   17c04:	cmn	lr, #1
   17c08:	bne	175d8 <lchmod@@Base+0xc90>
   17c0c:	b	175e4 <lchmod@@Base+0xc9c>
   17c10:	mov	r0, #0
   17c14:	cmn	lr, #1
   17c18:	str	r0, [fp, #-36]	; 0xffffffdc
   17c1c:	str	r0, [fp, #-40]	; 0xffffffd8
   17c20:	bne	17c34 <lchmod@@Base+0x12ec>
   17c24:	mov	r0, ip
   17c28:	bl	118bc <strlen@plt>
   17c2c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17c30:	mov	lr, r0
   17c34:	add	r0, ip, r7
   17c38:	mov	r4, #1
   17c3c:	mov	r6, #0
   17c40:	str	lr, [sp, #28]
   17c44:	str	r0, [sp, #24]
   17c48:	sub	r0, fp, #40	; 0x28
   17c4c:	mov	r3, r0
   17c50:	str	r6, [sp, #44]	; 0x2c
   17c54:	add	r6, r6, r7
   17c58:	sub	r0, fp, #44	; 0x2c
   17c5c:	add	r1, ip, r6
   17c60:	sub	r2, lr, r6
   17c64:	bl	1a51c <lchmod@@Base+0x3bd4>
   17c68:	cmp	r0, #0
   17c6c:	beq	18104 <lchmod@@Base+0x17bc>
   17c70:	cmn	r0, #1
   17c74:	beq	180c4 <lchmod@@Base+0x177c>
   17c78:	ldr	lr, [sp, #28]
   17c7c:	cmn	r0, #2
   17c80:	beq	180cc <lchmod@@Base+0x1784>
   17c84:	ldr	r2, [sp, #64]	; 0x40
   17c88:	cmp	r0, #2
   17c8c:	mov	r1, #0
   17c90:	movwcc	r1, #1
   17c94:	eor	r2, r2, #1
   17c98:	orrs	r1, r2, r1
   17c9c:	bne	17d5c <lchmod@@Base+0x1414>
   17ca0:	ldr	r1, [sp, #44]	; 0x2c
   17ca4:	ldr	r2, [sp, #24]
   17ca8:	add	r1, r2, r1
   17cac:	mov	r2, #1
   17cb0:	ldrb	r3, [r1, r2]
   17cb4:	sub	r3, r3, #91	; 0x5b
   17cb8:	cmp	r3, #33	; 0x21
   17cbc:	bhi	17d50 <lchmod@@Base+0x1408>
   17cc0:	add	r6, pc, #0
   17cc4:	ldr	pc, [r6, r3, lsl #2]
   17cc8:	andeq	r8, r1, r4, asr #3
   17ccc:	andeq	r8, r1, r4, asr #3
   17cd0:	andeq	r7, r1, r0, asr sp
   17cd4:	andeq	r8, r1, r4, asr #3
   17cd8:	andeq	r7, r1, r0, asr sp
   17cdc:	andeq	r8, r1, r4, asr #3
   17ce0:	andeq	r7, r1, r0, asr sp
   17ce4:	andeq	r7, r1, r0, asr sp
   17ce8:	andeq	r7, r1, r0, asr sp
   17cec:	andeq	r7, r1, r0, asr sp
   17cf0:	andeq	r7, r1, r0, asr sp
   17cf4:	andeq	r7, r1, r0, asr sp
   17cf8:	andeq	r7, r1, r0, asr sp
   17cfc:	andeq	r7, r1, r0, asr sp
   17d00:	andeq	r7, r1, r0, asr sp
   17d04:	andeq	r7, r1, r0, asr sp
   17d08:	andeq	r7, r1, r0, asr sp
   17d0c:	andeq	r7, r1, r0, asr sp
   17d10:	andeq	r7, r1, r0, asr sp
   17d14:	andeq	r7, r1, r0, asr sp
   17d18:	andeq	r7, r1, r0, asr sp
   17d1c:	andeq	r7, r1, r0, asr sp
   17d20:	andeq	r7, r1, r0, asr sp
   17d24:	andeq	r7, r1, r0, asr sp
   17d28:	andeq	r7, r1, r0, asr sp
   17d2c:	andeq	r7, r1, r0, asr sp
   17d30:	andeq	r7, r1, r0, asr sp
   17d34:	andeq	r7, r1, r0, asr sp
   17d38:	andeq	r7, r1, r0, asr sp
   17d3c:	andeq	r7, r1, r0, asr sp
   17d40:	andeq	r7, r1, r0, asr sp
   17d44:	andeq	r7, r1, r0, asr sp
   17d48:	andeq	r7, r1, r0, asr sp
   17d4c:	andeq	r8, r1, r4, asr #3
   17d50:	add	r2, r2, #1
   17d54:	cmp	r2, r0
   17d58:	bcc	17cb0 <lchmod@@Base+0x1368>
   17d5c:	ldr	r6, [sp, #44]	; 0x2c
   17d60:	add	r6, r0, r6
   17d64:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17d68:	bl	117b4 <iswprint@plt>
   17d6c:	cmp	r0, #0
   17d70:	movwne	r0, #1
   17d74:	and	r4, r4, r0
   17d78:	sub	r0, fp, #40	; 0x28
   17d7c:	bl	1173c <mbsinit@plt>
   17d80:	ldr	lr, [sp, #28]
   17d84:	ldr	ip, [fp, #-84]	; 0xffffffac
   17d88:	sub	r3, fp, #40	; 0x28
   17d8c:	cmp	r0, #0
   17d90:	beq	17c50 <lchmod@@Base+0x1308>
   17d94:	b	1810c <lchmod@@Base+0x17c4>
   17d98:	ldr	r0, [sp, #32]
   17d9c:	cmp	r0, #0
   17da0:	beq	17e3c <lchmod@@Base+0x14f4>
   17da4:	add	r0, r7, #2
   17da8:	cmp	r0, lr
   17dac:	bcs	17e3c <lchmod@@Base+0x14f4>
   17db0:	add	r1, ip, r7
   17db4:	ldrb	r1, [r1, #1]
   17db8:	cmp	r1, #63	; 0x3f
   17dbc:	bne	17e3c <lchmod@@Base+0x14f4>
   17dc0:	ldrb	r5, [ip, r0]
   17dc4:	sub	r1, r5, #33	; 0x21
   17dc8:	cmp	r1, #29
   17dcc:	bhi	17e3c <lchmod@@Base+0x14f4>
   17dd0:	movw	r3, #20929	; 0x51c1
   17dd4:	mov	r2, #1
   17dd8:	movt	r3, #14336	; 0x3800
   17ddc:	tst	r3, r2, lsl r1
   17de0:	beq	17e3c <lchmod@@Base+0x14f4>
   17de4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17de8:	tst	r1, #1
   17dec:	bne	182e4 <lchmod@@Base+0x199c>
   17df0:	cmp	r8, sl
   17df4:	mov	r7, r0
   17df8:	mov	r4, #0
   17dfc:	movcc	r1, #63	; 0x3f
   17e00:	strbcc	r1, [r6, r8]
   17e04:	add	r1, r8, #1
   17e08:	cmp	r1, sl
   17e0c:	movcc	r2, #34	; 0x22
   17e10:	strbcc	r2, [r6, r1]
   17e14:	add	r1, r8, #2
   17e18:	cmp	r1, sl
   17e1c:	movcc	r2, #34	; 0x22
   17e20:	strbcc	r2, [r6, r1]
   17e24:	add	r1, r8, #3
   17e28:	add	r8, r8, #4
   17e2c:	cmp	r1, sl
   17e30:	movcc	r2, #63	; 0x3f
   17e34:	strbcc	r2, [r6, r1]
   17e38:	b	178a0 <lchmod@@Base+0xf58>
   17e3c:	mov	r5, #63	; 0x3f
   17e40:	mov	r4, #0
   17e44:	b	178a0 <lchmod@@Base+0xf58>
   17e48:	add	r1, r2, r7
   17e4c:	ldr	lr, [sp, #28]
   17e50:	mov	r3, #0
   17e54:	str	r1, [sp, #44]	; 0x2c
   17e58:	add	r1, r7, #1
   17e5c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17e60:	tst	r0, #1
   17e64:	bne	17f38 <lchmod@@Base+0x15f0>
   17e68:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17e6c:	tst	r2, #1
   17e70:	bne	1822c <lchmod@@Base+0x18e4>
   17e74:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17e78:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17e7c:	cmp	r7, #2
   17e80:	movwne	r3, #1
   17e84:	orr	r3, r3, r2
   17e88:	tst	r3, #1
   17e8c:	bne	17ec8 <lchmod@@Base+0x1580>
   17e90:	cmp	r8, sl
   17e94:	add	r3, r8, #1
   17e98:	movcc	r2, #39	; 0x27
   17e9c:	strbcc	r2, [r6, r8]
   17ea0:	cmp	r3, sl
   17ea4:	movcc	r2, #36	; 0x24
   17ea8:	strbcc	r2, [r6, r3]
   17eac:	add	r3, r8, #2
   17eb0:	add	r8, r8, #3
   17eb4:	cmp	r3, sl
   17eb8:	movcc	r2, #39	; 0x27
   17ebc:	strbcc	r2, [r6, r3]
   17ec0:	mov	r2, #1
   17ec4:	str	r2, [fp, #-56]	; 0xffffffc8
   17ec8:	cmp	r8, sl
   17ecc:	movcc	r3, #92	; 0x5c
   17ed0:	strbcc	r3, [r6, r8]
   17ed4:	add	r3, r8, #1
   17ed8:	cmp	r3, sl
   17edc:	andcc	r7, r5, #192	; 0xc0
   17ee0:	movcc	r2, #48	; 0x30
   17ee4:	orrcc	r7, r2, r7, lsr #6
   17ee8:	strbcc	r7, [r6, r3]
   17eec:	add	r3, r8, #2
   17ef0:	add	r8, r8, #3
   17ef4:	cmp	r3, sl
   17ef8:	lsrcc	r7, r5, #3
   17efc:	movcc	r2, #6
   17f00:	bficc	r7, r2, #3, #29
   17f04:	mov	r2, #6
   17f08:	strbcc	r7, [r6, r3]
   17f0c:	bfi	r5, r2, #3, #29
   17f10:	mov	r3, #1
   17f14:	b	17f5c <lchmod@@Base+0x1614>
   17f18:	cmp	r8, sl
   17f1c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17f20:	strbcc	r5, [r6, r8]
   17f24:	add	r8, r8, #1
   17f28:	ldrb	r5, [ip, r1]
   17f2c:	add	r1, r1, #1
   17f30:	tst	r0, #1
   17f34:	beq	17e68 <lchmod@@Base+0x1520>
   17f38:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17f3c:	tst	r2, #1
   17f40:	beq	17f54 <lchmod@@Base+0x160c>
   17f44:	cmp	r8, sl
   17f48:	movcc	r7, #92	; 0x5c
   17f4c:	strbcc	r7, [r6, r8]
   17f50:	add	r8, r8, #1
   17f54:	mov	r2, #0
   17f58:	str	r2, [fp, #-52]	; 0xffffffcc
   17f5c:	ldr	r2, [sp, #44]	; 0x2c
   17f60:	and	r9, r3, #1
   17f64:	cmp	r2, r1
   17f68:	bls	18068 <lchmod@@Base+0x1720>
   17f6c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17f70:	cmp	r9, #0
   17f74:	movwne	r9, #1
   17f78:	mvn	r7, r2
   17f7c:	orr	r7, r7, r9
   17f80:	tst	r7, #1
   17f84:	bne	17f18 <lchmod@@Base+0x15d0>
   17f88:	cmp	r8, sl
   17f8c:	movcc	r7, #39	; 0x27
   17f90:	strbcc	r7, [r6, r8]
   17f94:	add	r7, r8, #1
   17f98:	add	r8, r8, #2
   17f9c:	cmp	r7, sl
   17fa0:	movcc	r2, #39	; 0x27
   17fa4:	strbcc	r2, [r6, r7]
   17fa8:	mov	r2, #0
   17fac:	str	r2, [fp, #-56]	; 0xffffffc8
   17fb0:	b	17f18 <lchmod@@Base+0x15d0>
   17fb4:	cmp	r8, sl
   17fb8:	mov	r2, #1
   17fbc:	movcc	r0, #39	; 0x27
   17fc0:	strbcc	r0, [r6, r8]
   17fc4:	add	r0, r8, #1
   17fc8:	cmp	r0, sl
   17fcc:	movcc	r1, #36	; 0x24
   17fd0:	strbcc	r1, [r6, r0]
   17fd4:	add	r0, r8, #2
   17fd8:	cmp	r0, sl
   17fdc:	movcc	r1, #39	; 0x27
   17fe0:	strbcc	r1, [r6, r0]
   17fe4:	add	r0, r8, #3
   17fe8:	cmp	r0, sl
   17fec:	add	r8, r0, #1
   17ff0:	str	r2, [fp, #-56]	; 0xffffffc8
   17ff4:	movcc	r1, #92	; 0x5c
   17ff8:	strbcc	r1, [r6, r0]
   17ffc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18000:	cmp	r1, #2
   18004:	beq	18058 <lchmod@@Base+0x1710>
   18008:	add	r1, r7, #1
   1800c:	mov	r4, #0
   18010:	mov	r9, #1
   18014:	mov	r5, #48	; 0x30
   18018:	cmp	r1, lr
   1801c:	bcs	178a0 <lchmod@@Base+0xf58>
   18020:	ldrb	r1, [ip, r1]
   18024:	sub	r1, r1, #48	; 0x30
   18028:	uxtb	r1, r1
   1802c:	cmp	r1, #9
   18030:	bhi	178a0 <lchmod@@Base+0xf58>
   18034:	cmp	r8, sl
   18038:	movcc	r1, #48	; 0x30
   1803c:	strbcc	r1, [r6, r8]
   18040:	add	r1, r0, #2
   18044:	add	r8, r0, #3
   18048:	cmp	r1, sl
   1804c:	movcc	r2, #48	; 0x30
   18050:	strbcc	r2, [r6, r1]
   18054:	b	178a0 <lchmod@@Base+0xf58>
   18058:	mov	r0, #48	; 0x30
   1805c:	mov	r9, #1
   18060:	mov	r4, #0
   18064:	b	17b38 <lchmod@@Base+0x11f0>
   18068:	cmp	r9, #0
   1806c:	sub	r7, r1, #1
   18070:	mov	r0, r5
   18074:	movwne	r9, #1
   18078:	cmp	r9, #0
   1807c:	bne	180bc <lchmod@@Base+0x1774>
   18080:	ldr	r1, [fp, #-56]	; 0xffffffc8
   18084:	tst	r1, #1
   18088:	beq	180bc <lchmod@@Base+0x1774>
   1808c:	cmp	r8, sl
   18090:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18094:	movcc	r1, #39	; 0x27
   18098:	strbcc	r1, [r6, r8]
   1809c:	add	r1, r8, #1
   180a0:	add	r8, r8, #2
   180a4:	cmp	r1, sl
   180a8:	movcc	r2, #39	; 0x27
   180ac:	strbcc	r2, [r6, r1]
   180b0:	mov	r1, #0
   180b4:	str	r1, [fp, #-56]	; 0xffffffc8
   180b8:	b	17bc4 <lchmod@@Base+0x127c>
   180bc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   180c0:	b	17bc4 <lchmod@@Base+0x127c>
   180c4:	mov	r4, #0
   180c8:	b	18104 <lchmod@@Base+0x17bc>
   180cc:	mov	r4, #0
   180d0:	cmp	lr, r6
   180d4:	bls	18104 <lchmod@@Base+0x17bc>
   180d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   180dc:	ldr	r6, [sp, #44]	; 0x2c
   180e0:	ldr	r0, [sp, #24]
   180e4:	ldrb	r0, [r0, r6]
   180e8:	cmp	r0, #0
   180ec:	beq	1810c <lchmod@@Base+0x17c4>
   180f0:	add	r6, r6, #1
   180f4:	add	r0, r7, r6
   180f8:	cmp	r0, lr
   180fc:	bcc	180e0 <lchmod@@Base+0x1798>
   18100:	b	1810c <lchmod@@Base+0x17c4>
   18104:	ldr	ip, [fp, #-84]	; 0xffffffac
   18108:	ldr	r6, [sp, #44]	; 0x2c
   1810c:	mov	r1, r6
   18110:	ldr	r6, [sp, #80]	; 0x50
   18114:	b	17a6c <lchmod@@Base+0x1124>
   18118:	mov	lr, r7
   1811c:	b	18124 <lchmod@@Base+0x17dc>
   18120:	mvn	lr, #0
   18124:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18128:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1812c:	eor	r0, r7, #2
   18130:	orr	r0, r0, r8
   18134:	clz	r0, r0
   18138:	lsr	r0, r0, #5
   1813c:	tst	r1, r0
   18140:	bne	181cc <lchmod@@Base+0x1884>
   18144:	mov	r0, r1
   18148:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1814c:	cmp	r7, #2
   18150:	movwne	r1, #1
   18154:	orr	r0, r0, r1
   18158:	tst	r0, #1
   1815c:	ldreq	r0, [sp, #60]	; 0x3c
   18160:	eoreq	r0, r0, #1
   18164:	tsteq	r0, #1
   18168:	bne	18278 <lchmod@@Base+0x1930>
   1816c:	mov	r9, lr
   18170:	tst	r5, #1
   18174:	bne	18234 <lchmod@@Base+0x18ec>
   18178:	ldr	r6, [sp, #56]	; 0x38
   1817c:	mov	r4, #0
   18180:	cmp	r6, #0
   18184:	beq	18270 <lchmod@@Base+0x1928>
   18188:	ldr	r0, [sp, #84]	; 0x54
   1818c:	mov	r1, #0
   18190:	cmp	sl, #0
   18194:	mov	r5, #0
   18198:	str	r1, [fp, #-72]	; 0xffffffb8
   1819c:	beq	1736c <lchmod@@Base+0xa24>
   181a0:	b	18278 <lchmod@@Base+0x1930>
   181a4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   181a8:	ldr	r2, [sp, #84]	; 0x54
   181ac:	b	181d4 <lchmod@@Base+0x188c>
   181b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   181b4:	mov	r2, #1
   181b8:	mov	lr, r4
   181bc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   181c0:	b	181d4 <lchmod@@Base+0x188c>
   181c4:	ldr	r6, [sp, #80]	; 0x50
   181c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   181cc:	ldr	r2, [sp, #84]	; 0x54
   181d0:	mov	r7, #2
   181d4:	mov	r0, #0
   181d8:	ldr	r1, [fp, #12]
   181dc:	tst	r2, #1
   181e0:	mov	r2, r7
   181e4:	mov	r3, lr
   181e8:	str	r0, [sp, #8]
   181ec:	ldr	r0, [sp, #72]	; 0x48
   181f0:	movwne	r2, #4
   181f4:	cmp	r7, #2
   181f8:	movne	r2, r7
   181fc:	str	r2, [sp]
   18200:	mov	r2, ip
   18204:	bic	r1, r1, #2
   18208:	str	r0, [sp, #12]
   1820c:	ldr	r0, [sp, #76]	; 0x4c
   18210:	str	r1, [sp, #4]
   18214:	mov	r1, sl
   18218:	str	r0, [sp, #16]
   1821c:	mov	r0, r6
   18220:	bl	172ec <lchmod@@Base+0x9a4>
   18224:	mov	r8, r0
   18228:	b	182d0 <lchmod@@Base+0x1988>
   1822c:	ldr	r2, [sp, #84]	; 0x54
   18230:	b	181d4 <lchmod@@Base+0x188c>
   18234:	mov	r0, #5
   18238:	ldr	r1, [sp, #56]	; 0x38
   1823c:	ldr	r2, [fp, #-84]	; 0xffffffac
   18240:	mov	r3, r9
   18244:	str	r0, [sp]
   18248:	ldr	r0, [fp, #12]
   1824c:	str	r0, [sp, #4]
   18250:	ldr	r0, [fp, #16]
   18254:	str	r0, [sp, #8]
   18258:	ldr	r0, [sp, #72]	; 0x48
   1825c:	str	r0, [sp, #12]
   18260:	ldr	r0, [sp, #76]	; 0x4c
   18264:	str	r0, [sp, #16]
   18268:	ldr	r0, [sp, #80]	; 0x50
   1826c:	b	18220 <lchmod@@Base+0x18d8>
   18270:	mov	r0, #0
   18274:	str	r0, [fp, #-72]	; 0xffffffb8
   18278:	ldr	r1, [sp, #92]	; 0x5c
   1827c:	cmp	r1, #0
   18280:	beq	182c0 <lchmod@@Base+0x1978>
   18284:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18288:	ldr	r2, [sp, #80]	; 0x50
   1828c:	tst	r0, #1
   18290:	bne	182c4 <lchmod@@Base+0x197c>
   18294:	ldrb	r0, [r1]
   18298:	cmp	r0, #0
   1829c:	beq	182c4 <lchmod@@Base+0x197c>
   182a0:	add	r1, r1, #1
   182a4:	cmp	r8, sl
   182a8:	strbcc	r0, [r2, r8]
   182ac:	add	r8, r8, #1
   182b0:	ldrb	r0, [r1], #1
   182b4:	cmp	r0, #0
   182b8:	bne	182a4 <lchmod@@Base+0x195c>
   182bc:	b	182c4 <lchmod@@Base+0x197c>
   182c0:	ldr	r2, [sp, #80]	; 0x50
   182c4:	cmp	r8, sl
   182c8:	movcc	r0, #0
   182cc:	strbcc	r0, [r2, r8]
   182d0:	mov	r0, r8
   182d4:	sub	sp, fp, #28
   182d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182dc:	mov	r2, #1
   182e0:	b	181bc <lchmod@@Base+0x1874>
   182e4:	ldr	r2, [sp, #84]	; 0x54
   182e8:	mov	r7, #5
   182ec:	b	181d4 <lchmod@@Base+0x188c>
   182f0:	bl	11a3c <abort@plt>
   182f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182f8:	add	fp, sp, #28
   182fc:	sub	sp, sp, #28
   18300:	movw	r5, #49648	; 0xc1f0
   18304:	cmp	r2, #0
   18308:	mov	r4, r1
   1830c:	mov	r7, r0
   18310:	str	r0, [sp, #20]
   18314:	movt	r5, #2
   18318:	movne	r5, r2
   1831c:	bl	118ec <__errno_location@plt>
   18320:	mov	sl, r0
   18324:	ldm	r5, {r0, r1}
   18328:	ldr	r2, [r5, #40]	; 0x28
   1832c:	ldr	r3, [r5, #44]	; 0x2c
   18330:	add	r9, r5, #8
   18334:	ldr	r6, [sl]
   18338:	orr	r8, r1, #1
   1833c:	mov	r1, #0
   18340:	str	r6, [sp, #24]
   18344:	stm	sp, {r0, r8, r9}
   18348:	str	r2, [sp, #12]
   1834c:	str	r3, [sp, #16]
   18350:	mov	r0, #0
   18354:	mov	r2, r7
   18358:	mov	r3, r4
   1835c:	mov	r6, r4
   18360:	bl	172ec <lchmod@@Base+0x9a4>
   18364:	add	r7, r0, #1
   18368:	mov	r0, r7
   1836c:	bl	19820 <lchmod@@Base+0x2ed8>
   18370:	mov	r4, r0
   18374:	ldr	r0, [r5]
   18378:	ldr	r2, [r5, #44]	; 0x2c
   1837c:	ldr	r1, [r5, #40]	; 0x28
   18380:	mov	r3, r6
   18384:	stm	sp, {r0, r8, r9}
   18388:	str	r2, [sp, #16]
   1838c:	str	r1, [sp, #12]
   18390:	mov	r0, r4
   18394:	mov	r1, r7
   18398:	ldr	r2, [sp, #20]
   1839c:	bl	172ec <lchmod@@Base+0x9a4>
   183a0:	ldr	r0, [sp, #24]
   183a4:	str	r0, [sl]
   183a8:	mov	r0, r4
   183ac:	sub	sp, fp, #28
   183b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183b8:	add	fp, sp, #28
   183bc:	sub	sp, sp, #36	; 0x24
   183c0:	movw	r8, #49648	; 0xc1f0
   183c4:	cmp	r3, #0
   183c8:	mov	r4, r2
   183cc:	str	r2, [sp, #24]
   183d0:	mov	r5, r1
   183d4:	mov	r6, r0
   183d8:	str	r0, [sp, #20]
   183dc:	movt	r8, #2
   183e0:	movne	r8, r3
   183e4:	bl	118ec <__errno_location@plt>
   183e8:	str	r0, [sp, #28]
   183ec:	cmp	r4, #0
   183f0:	add	sl, r8, #8
   183f4:	ldm	r8, {r3, r9}
   183f8:	ldr	r7, [r0]
   183fc:	ldr	r1, [r8, #40]	; 0x28
   18400:	ldr	r2, [r8, #44]	; 0x2c
   18404:	mov	r0, #0
   18408:	orreq	r9, r9, #1
   1840c:	str	r7, [sp, #32]
   18410:	mov	r7, r5
   18414:	stm	sp, {r3, r9, sl}
   18418:	str	r1, [sp, #12]
   1841c:	str	r2, [sp, #16]
   18420:	mov	r1, #0
   18424:	mov	r2, r6
   18428:	mov	r3, r5
   1842c:	bl	172ec <lchmod@@Base+0x9a4>
   18430:	add	r4, r0, #1
   18434:	mov	r5, r0
   18438:	mov	r0, r4
   1843c:	bl	19820 <lchmod@@Base+0x2ed8>
   18440:	mov	r6, r0
   18444:	ldr	r0, [r8]
   18448:	ldr	r2, [r8, #44]	; 0x2c
   1844c:	ldr	r1, [r8, #40]	; 0x28
   18450:	mov	r3, r7
   18454:	stm	sp, {r0, r9, sl}
   18458:	str	r2, [sp, #16]
   1845c:	str	r1, [sp, #12]
   18460:	mov	r0, r6
   18464:	mov	r1, r4
   18468:	ldr	r2, [sp, #20]
   1846c:	bl	172ec <lchmod@@Base+0x9a4>
   18470:	ldr	r0, [sp, #24]
   18474:	ldr	r1, [sp, #32]
   18478:	ldr	r2, [sp, #28]
   1847c:	cmp	r0, #0
   18480:	str	r1, [r2]
   18484:	strne	r5, [r0]
   18488:	mov	r0, r6
   1848c:	sub	sp, fp, #28
   18490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18494:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18498:	add	fp, sp, #24
   1849c:	movw	r5, #49540	; 0xc184
   184a0:	movw	r8, #49536	; 0xc180
   184a4:	movt	r5, #2
   184a8:	movt	r8, #2
   184ac:	ldr	r0, [r5]
   184b0:	ldr	r4, [r8]
   184b4:	cmp	r0, #2
   184b8:	blt	184e4 <lchmod@@Base+0x1b9c>
   184bc:	add	r7, r4, #12
   184c0:	mov	r6, #0
   184c4:	ldr	r0, [r7, r6, lsl #3]
   184c8:	bl	13148 <__assert_fail@plt+0x16ac>
   184cc:	ldr	r1, [r5]
   184d0:	add	r2, r6, #2
   184d4:	add	r0, r6, #1
   184d8:	mov	r6, r0
   184dc:	cmp	r2, r1
   184e0:	blt	184c4 <lchmod@@Base+0x1b7c>
   184e4:	ldr	r0, [r4, #4]
   184e8:	movw	r7, #49696	; 0xc220
   184ec:	movt	r7, #2
   184f0:	cmp	r0, r7
   184f4:	beq	1850c <lchmod@@Base+0x1bc4>
   184f8:	bl	13148 <__assert_fail@plt+0x16ac>
   184fc:	movw	r0, #49544	; 0xc188
   18500:	mov	r6, #256	; 0x100
   18504:	movt	r0, #2
   18508:	strd	r6, [r0]
   1850c:	movw	r6, #49544	; 0xc188
   18510:	movt	r6, #2
   18514:	cmp	r4, r6
   18518:	beq	18528 <lchmod@@Base+0x1be0>
   1851c:	mov	r0, r4
   18520:	bl	13148 <__assert_fail@plt+0x16ac>
   18524:	str	r6, [r8]
   18528:	mov	r0, #1
   1852c:	str	r0, [r5]
   18530:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18534:	movw	r3, #49648	; 0xc1f0
   18538:	mvn	r2, #0
   1853c:	movt	r3, #2
   18540:	b	18544 <lchmod@@Base+0x1bfc>
   18544:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18548:	add	fp, sp, #28
   1854c:	sub	sp, sp, #44	; 0x2c
   18550:	mov	r7, r3
   18554:	str	r2, [sp, #36]	; 0x24
   18558:	str	r1, [sp, #32]
   1855c:	mov	r5, r0
   18560:	bl	118ec <__errno_location@plt>
   18564:	cmp	r5, #0
   18568:	blt	186d4 <lchmod@@Base+0x1d8c>
   1856c:	cmn	r5, #-2147483647	; 0x80000001
   18570:	beq	186d4 <lchmod@@Base+0x1d8c>
   18574:	movw	r8, #49540	; 0xc184
   18578:	movw	r4, #49536	; 0xc180
   1857c:	str	r0, [sp, #28]
   18580:	ldr	r0, [r0]
   18584:	movt	r8, #2
   18588:	movt	r4, #2
   1858c:	ldr	r1, [r8]
   18590:	ldr	r6, [r4]
   18594:	str	r0, [sp, #24]
   18598:	cmp	r1, r5
   1859c:	ble	185a8 <lchmod@@Base+0x1c60>
   185a0:	mov	sl, r6
   185a4:	b	18610 <lchmod@@Base+0x1cc8>
   185a8:	movw	r9, #49544	; 0xc188
   185ac:	mov	r0, #8
   185b0:	add	r2, r5, #1
   185b4:	str	r1, [fp, #-32]	; 0xffffffe0
   185b8:	mvn	r3, #-2147483648	; 0x80000000
   185bc:	movt	r9, #2
   185c0:	str	r0, [sp]
   185c4:	sub	r2, r2, r1
   185c8:	sub	r1, fp, #32
   185cc:	subs	r0, r6, r9
   185d0:	movne	r0, r6
   185d4:	bl	19a20 <lchmod@@Base+0x30d8>
   185d8:	cmp	r6, r9
   185dc:	mov	sl, r0
   185e0:	str	r0, [r4]
   185e4:	ldrdeq	r0, [r9]
   185e8:	stmeq	sl, {r0, r1}
   185ec:	ldr	r1, [r8]
   185f0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   185f4:	add	r0, sl, r1, lsl #3
   185f8:	sub	r1, r2, r1
   185fc:	lsl	r2, r1, #3
   18600:	mov	r1, #0
   18604:	bl	11910 <memset@plt>
   18608:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1860c:	str	r0, [r8]
   18610:	mov	r9, sl
   18614:	ldr	r6, [r9, r5, lsl #3]!
   18618:	ldr	r4, [r9, #4]!
   1861c:	ldm	r7, {r0, r1}
   18620:	ldr	r2, [r7, #40]	; 0x28
   18624:	ldr	r3, [r7, #44]	; 0x2c
   18628:	orr	r8, r1, #1
   1862c:	add	r1, r7, #8
   18630:	stm	sp, {r0, r8}
   18634:	add	r0, sp, #8
   18638:	str	r1, [sp, #20]
   1863c:	stm	r0, {r1, r2, r3}
   18640:	mov	r0, r4
   18644:	mov	r1, r6
   18648:	ldr	r2, [sp, #32]
   1864c:	ldr	r3, [sp, #36]	; 0x24
   18650:	bl	172ec <lchmod@@Base+0x9a4>
   18654:	cmp	r6, r0
   18658:	bhi	186bc <lchmod@@Base+0x1d74>
   1865c:	add	r6, r0, #1
   18660:	movw	r0, #49696	; 0xc220
   18664:	movt	r0, #2
   18668:	str	r6, [sl, r5, lsl #3]
   1866c:	cmp	r4, r0
   18670:	beq	1867c <lchmod@@Base+0x1d34>
   18674:	mov	r0, r4
   18678:	bl	13148 <__assert_fail@plt+0x16ac>
   1867c:	mov	r0, r6
   18680:	bl	19820 <lchmod@@Base+0x2ed8>
   18684:	str	r0, [r9]
   18688:	mov	r4, r0
   1868c:	add	r3, sp, #8
   18690:	ldr	r0, [r7]
   18694:	ldr	r1, [r7, #40]	; 0x28
   18698:	ldr	r2, [r7, #44]	; 0x2c
   1869c:	stm	sp, {r0, r8}
   186a0:	ldr	r0, [sp, #20]
   186a4:	stm	r3, {r0, r1, r2}
   186a8:	mov	r0, r4
   186ac:	mov	r1, r6
   186b0:	ldr	r2, [sp, #32]
   186b4:	ldr	r3, [sp, #36]	; 0x24
   186b8:	bl	172ec <lchmod@@Base+0x9a4>
   186bc:	ldr	r0, [sp, #28]
   186c0:	ldr	r1, [sp, #24]
   186c4:	str	r1, [r0]
   186c8:	mov	r0, r4
   186cc:	sub	sp, fp, #28
   186d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186d4:	bl	11a3c <abort@plt>
   186d8:	movw	r3, #49648	; 0xc1f0
   186dc:	movt	r3, #2
   186e0:	b	18544 <lchmod@@Base+0x1bfc>
   186e4:	movw	r3, #49648	; 0xc1f0
   186e8:	mov	r1, r0
   186ec:	mov	r0, #0
   186f0:	mvn	r2, #0
   186f4:	movt	r3, #2
   186f8:	b	18544 <lchmod@@Base+0x1bfc>
   186fc:	movw	r3, #49648	; 0xc1f0
   18700:	mov	r2, r1
   18704:	mov	r1, r0
   18708:	mov	r0, #0
   1870c:	movt	r3, #2
   18710:	b	18544 <lchmod@@Base+0x1bfc>
   18714:	push	{fp, lr}
   18718:	mov	fp, sp
   1871c:	sub	sp, sp, #48	; 0x30
   18720:	vmov.i32	q8, #0	; 0x00000000
   18724:	mov	ip, #32
   18728:	mov	r3, sp
   1872c:	mov	lr, r2
   18730:	cmp	r1, #10
   18734:	add	r2, r3, #16
   18738:	vst1.64	{d16-d17}, [r3], ip
   1873c:	vst1.64	{d16-d17}, [r3]
   18740:	vst1.64	{d16-d17}, [r2]
   18744:	beq	18764 <lchmod@@Base+0x1e1c>
   18748:	str	r1, [sp]
   1874c:	mov	r3, sp
   18750:	mov	r1, lr
   18754:	mvn	r2, #0
   18758:	bl	18544 <lchmod@@Base+0x1bfc>
   1875c:	mov	sp, fp
   18760:	pop	{fp, pc}
   18764:	bl	11a3c <abort@plt>
   18768:	push	{r4, sl, fp, lr}
   1876c:	add	fp, sp, #8
   18770:	sub	sp, sp, #48	; 0x30
   18774:	mov	ip, r3
   18778:	mov	r3, sp
   1877c:	vmov.i32	q8, #0	; 0x00000000
   18780:	mov	lr, #32
   18784:	cmp	r1, #10
   18788:	add	r4, r3, #16
   1878c:	vst1.64	{d16-d17}, [r3], lr
   18790:	vst1.64	{d16-d17}, [r3]
   18794:	vst1.64	{d16-d17}, [r4]
   18798:	beq	187b8 <lchmod@@Base+0x1e70>
   1879c:	str	r1, [sp]
   187a0:	mov	r1, r2
   187a4:	mov	r3, sp
   187a8:	mov	r2, ip
   187ac:	bl	18544 <lchmod@@Base+0x1bfc>
   187b0:	sub	sp, fp, #8
   187b4:	pop	{r4, sl, fp, pc}
   187b8:	bl	11a3c <abort@plt>
   187bc:	push	{fp, lr}
   187c0:	mov	fp, sp
   187c4:	sub	sp, sp, #48	; 0x30
   187c8:	mov	r3, sp
   187cc:	vmov.i32	q8, #0	; 0x00000000
   187d0:	mov	ip, #32
   187d4:	cmp	r0, #10
   187d8:	add	r2, r3, #16
   187dc:	vst1.64	{d16-d17}, [r3], ip
   187e0:	vst1.64	{d16-d17}, [r3]
   187e4:	vst1.64	{d16-d17}, [r2]
   187e8:	beq	18808 <lchmod@@Base+0x1ec0>
   187ec:	str	r0, [sp]
   187f0:	mov	r3, sp
   187f4:	mov	r0, #0
   187f8:	mvn	r2, #0
   187fc:	bl	18544 <lchmod@@Base+0x1bfc>
   18800:	mov	sp, fp
   18804:	pop	{fp, pc}
   18808:	bl	11a3c <abort@plt>
   1880c:	push	{fp, lr}
   18810:	mov	fp, sp
   18814:	sub	sp, sp, #48	; 0x30
   18818:	mov	r3, sp
   1881c:	vmov.i32	q8, #0	; 0x00000000
   18820:	mov	ip, #32
   18824:	cmp	r0, #10
   18828:	add	lr, r3, #16
   1882c:	vst1.64	{d16-d17}, [r3], ip
   18830:	vst1.64	{d16-d17}, [r3]
   18834:	vst1.64	{d16-d17}, [lr]
   18838:	beq	18854 <lchmod@@Base+0x1f0c>
   1883c:	str	r0, [sp]
   18840:	mov	r3, sp
   18844:	mov	r0, #0
   18848:	bl	18544 <lchmod@@Base+0x1bfc>
   1884c:	mov	sp, fp
   18850:	pop	{fp, pc}
   18854:	bl	11a3c <abort@plt>
   18858:	push	{r4, sl, fp, lr}
   1885c:	add	fp, sp, #8
   18860:	sub	sp, sp, #48	; 0x30
   18864:	mov	lr, r0
   18868:	movw	r0, #49648	; 0xc1f0
   1886c:	mov	r3, #32
   18870:	mov	ip, r1
   18874:	mov	r4, #1
   18878:	movt	r0, #2
   1887c:	add	r1, r0, #16
   18880:	vld1.64	{d16-d17}, [r0], r3
   18884:	mov	r3, sp
   18888:	vld1.64	{d18-d19}, [r1]
   1888c:	add	r1, r3, #16
   18890:	vld1.64	{d20-d21}, [r0]
   18894:	add	r0, r3, #32
   18898:	vst1.64	{d18-d19}, [r1]
   1889c:	mov	r1, r3
   188a0:	vst1.64	{d20-d21}, [r0]
   188a4:	mov	r0, #28
   188a8:	and	r0, r0, r2, lsr #3
   188ac:	and	r2, r2, #31
   188b0:	vst1.64	{d16-d17}, [r1], r0
   188b4:	ldr	r0, [r1, #8]
   188b8:	bic	r4, r4, r0, lsr r2
   188bc:	eor	r0, r0, r4, lsl r2
   188c0:	mov	r2, ip
   188c4:	str	r0, [r1, #8]
   188c8:	mov	r0, #0
   188cc:	mov	r1, lr
   188d0:	bl	18544 <lchmod@@Base+0x1bfc>
   188d4:	sub	sp, fp, #8
   188d8:	pop	{r4, sl, fp, pc}
   188dc:	push	{fp, lr}
   188e0:	mov	fp, sp
   188e4:	sub	sp, sp, #48	; 0x30
   188e8:	mov	ip, r0
   188ec:	movw	r0, #49648	; 0xc1f0
   188f0:	mov	r3, #32
   188f4:	movt	r0, #2
   188f8:	add	r2, r0, #16
   188fc:	vld1.64	{d16-d17}, [r0], r3
   18900:	mov	r3, sp
   18904:	vld1.64	{d18-d19}, [r2]
   18908:	add	r2, r3, #16
   1890c:	vld1.64	{d20-d21}, [r0]
   18910:	add	r0, r3, #32
   18914:	vst1.64	{d18-d19}, [r2]
   18918:	mov	r2, r3
   1891c:	vst1.64	{d20-d21}, [r0]
   18920:	mov	r0, #28
   18924:	and	r0, r0, r1, lsr #3
   18928:	and	r1, r1, #31
   1892c:	vst1.64	{d16-d17}, [r2], r0
   18930:	mov	r0, #1
   18934:	ldr	lr, [r2, #8]
   18938:	bic	r0, r0, lr, lsr r1
   1893c:	eor	r0, lr, r0, lsl r1
   18940:	mov	r1, ip
   18944:	str	r0, [r2, #8]
   18948:	mov	r0, #0
   1894c:	mvn	r2, #0
   18950:	bl	18544 <lchmod@@Base+0x1bfc>
   18954:	mov	sp, fp
   18958:	pop	{fp, pc}
   1895c:	push	{fp, lr}
   18960:	mov	fp, sp
   18964:	sub	sp, sp, #48	; 0x30
   18968:	movw	r2, #49648	; 0xc1f0
   1896c:	mov	r3, #32
   18970:	mov	r1, r0
   18974:	movt	r2, #2
   18978:	add	r0, r2, #16
   1897c:	vld1.64	{d16-d17}, [r2], r3
   18980:	mov	r3, sp
   18984:	vld1.64	{d18-d19}, [r0]
   18988:	add	r0, r3, #16
   1898c:	vld1.64	{d20-d21}, [r2]
   18990:	mov	r2, r3
   18994:	vst1.64	{d18-d19}, [r0]
   18998:	add	r0, r3, #32
   1899c:	vst1.64	{d20-d21}, [r0]
   189a0:	mov	r0, #12
   189a4:	vst1.64	{d16-d17}, [r2], r0
   189a8:	ldr	r0, [r2]
   189ac:	orr	r0, r0, #67108864	; 0x4000000
   189b0:	str	r0, [r2]
   189b4:	mov	r0, #0
   189b8:	mvn	r2, #0
   189bc:	bl	18544 <lchmod@@Base+0x1bfc>
   189c0:	mov	sp, fp
   189c4:	pop	{fp, pc}
   189c8:	push	{fp, lr}
   189cc:	mov	fp, sp
   189d0:	sub	sp, sp, #48	; 0x30
   189d4:	mov	ip, r1
   189d8:	mov	r1, r0
   189dc:	movw	r0, #49648	; 0xc1f0
   189e0:	mov	r3, #32
   189e4:	movt	r0, #2
   189e8:	add	r2, r0, #16
   189ec:	vld1.64	{d16-d17}, [r0], r3
   189f0:	mov	r3, sp
   189f4:	vld1.64	{d18-d19}, [r2]
   189f8:	add	r2, r3, #16
   189fc:	vld1.64	{d20-d21}, [r0]
   18a00:	add	r0, r3, #32
   18a04:	vst1.64	{d18-d19}, [r2]
   18a08:	mov	r2, r3
   18a0c:	vst1.64	{d20-d21}, [r0]
   18a10:	mov	r0, #12
   18a14:	vst1.64	{d16-d17}, [r2], r0
   18a18:	ldr	r0, [r2]
   18a1c:	orr	r0, r0, #67108864	; 0x4000000
   18a20:	str	r0, [r2]
   18a24:	mov	r0, #0
   18a28:	mov	r2, ip
   18a2c:	bl	18544 <lchmod@@Base+0x1bfc>
   18a30:	mov	sp, fp
   18a34:	pop	{fp, pc}
   18a38:	push	{r4, sl, fp, lr}
   18a3c:	add	fp, sp, #8
   18a40:	sub	sp, sp, #96	; 0x60
   18a44:	mov	ip, r2
   18a48:	mov	r2, sp
   18a4c:	vmov.i32	q8, #0	; 0x00000000
   18a50:	mov	r4, #28
   18a54:	cmp	r1, #10
   18a58:	mov	r3, r2
   18a5c:	add	lr, r2, #16
   18a60:	vst1.64	{d16-d17}, [r3], r4
   18a64:	vst1.64	{d16-d17}, [lr]
   18a68:	vst1.32	{d16-d17}, [r3]
   18a6c:	beq	18abc <lchmod@@Base+0x2174>
   18a70:	vld1.64	{d16-d17}, [r2], r4
   18a74:	vld1.64	{d18-d19}, [lr]
   18a78:	add	r3, sp, #48	; 0x30
   18a7c:	add	r4, r3, #4
   18a80:	vld1.32	{d20-d21}, [r2]
   18a84:	add	r2, r3, #20
   18a88:	vst1.32	{d16-d17}, [r4]
   18a8c:	vst1.32	{d18-d19}, [r2]
   18a90:	add	r2, r3, #32
   18a94:	vst1.32	{d20-d21}, [r2]
   18a98:	str	r1, [sp, #48]	; 0x30
   18a9c:	mvn	r2, #0
   18aa0:	ldr	r1, [sp, #60]	; 0x3c
   18aa4:	orr	r1, r1, #67108864	; 0x4000000
   18aa8:	str	r1, [sp, #60]	; 0x3c
   18aac:	mov	r1, ip
   18ab0:	bl	18544 <lchmod@@Base+0x1bfc>
   18ab4:	sub	sp, fp, #8
   18ab8:	pop	{r4, sl, fp, pc}
   18abc:	bl	11a3c <abort@plt>
   18ac0:	push	{r4, r5, fp, lr}
   18ac4:	add	fp, sp, #8
   18ac8:	sub	sp, sp, #48	; 0x30
   18acc:	mov	ip, r3
   18ad0:	movw	r3, #49648	; 0xc1f0
   18ad4:	mov	lr, #32
   18ad8:	cmp	r1, #0
   18adc:	mov	r5, sp
   18ae0:	movt	r3, #2
   18ae4:	cmpne	r2, #0
   18ae8:	add	r4, r3, #16
   18aec:	vld1.64	{d16-d17}, [r3], lr
   18af0:	vld1.64	{d18-d19}, [r4]
   18af4:	add	r4, r5, #16
   18af8:	vld1.64	{d20-d21}, [r3]
   18afc:	vst1.64	{d16-d17}, [r5], lr
   18b00:	mov	r3, #10
   18b04:	vst1.64	{d18-d19}, [r4]
   18b08:	vst1.64	{d20-d21}, [r5]
   18b0c:	str	r3, [sp]
   18b10:	bne	18b18 <lchmod@@Base+0x21d0>
   18b14:	bl	11a3c <abort@plt>
   18b18:	str	r2, [sp, #44]	; 0x2c
   18b1c:	str	r1, [sp, #40]	; 0x28
   18b20:	mov	r3, sp
   18b24:	mov	r1, ip
   18b28:	mvn	r2, #0
   18b2c:	bl	18544 <lchmod@@Base+0x1bfc>
   18b30:	sub	sp, fp, #8
   18b34:	pop	{r4, r5, fp, pc}
   18b38:	push	{r4, r5, fp, lr}
   18b3c:	add	fp, sp, #8
   18b40:	sub	sp, sp, #48	; 0x30
   18b44:	mov	lr, r3
   18b48:	movw	r3, #49648	; 0xc1f0
   18b4c:	mov	ip, #32
   18b50:	cmp	r1, #0
   18b54:	mov	r5, sp
   18b58:	movt	r3, #2
   18b5c:	cmpne	r2, #0
   18b60:	add	r4, r3, #16
   18b64:	vld1.64	{d16-d17}, [r3], ip
   18b68:	vld1.64	{d18-d19}, [r4]
   18b6c:	add	r4, r5, #16
   18b70:	vld1.64	{d20-d21}, [r3]
   18b74:	vst1.64	{d16-d17}, [r5], ip
   18b78:	mov	r3, #10
   18b7c:	vst1.64	{d18-d19}, [r4]
   18b80:	vst1.64	{d20-d21}, [r5]
   18b84:	str	r3, [sp]
   18b88:	bne	18b90 <lchmod@@Base+0x2248>
   18b8c:	bl	11a3c <abort@plt>
   18b90:	ldr	ip, [fp, #8]
   18b94:	str	r2, [sp, #44]	; 0x2c
   18b98:	str	r1, [sp, #40]	; 0x28
   18b9c:	mov	r3, sp
   18ba0:	mov	r1, lr
   18ba4:	mov	r2, ip
   18ba8:	bl	18544 <lchmod@@Base+0x1bfc>
   18bac:	sub	sp, fp, #8
   18bb0:	pop	{r4, r5, fp, pc}
   18bb4:	push	{r4, sl, fp, lr}
   18bb8:	add	fp, sp, #8
   18bbc:	sub	sp, sp, #48	; 0x30
   18bc0:	mov	ip, r2
   18bc4:	movw	r2, #49648	; 0xc1f0
   18bc8:	mov	lr, #32
   18bcc:	cmp	r0, #0
   18bd0:	mov	r4, sp
   18bd4:	movt	r2, #2
   18bd8:	cmpne	r1, #0
   18bdc:	add	r3, r2, #16
   18be0:	vld1.64	{d16-d17}, [r2], lr
   18be4:	vld1.64	{d18-d19}, [r3]
   18be8:	add	r3, r4, #16
   18bec:	vld1.64	{d20-d21}, [r2]
   18bf0:	vst1.64	{d16-d17}, [r4], lr
   18bf4:	mov	r2, #10
   18bf8:	vst1.64	{d18-d19}, [r3]
   18bfc:	vst1.64	{d20-d21}, [r4]
   18c00:	str	r2, [sp]
   18c04:	bne	18c0c <lchmod@@Base+0x22c4>
   18c08:	bl	11a3c <abort@plt>
   18c0c:	str	r1, [sp, #44]	; 0x2c
   18c10:	str	r0, [sp, #40]	; 0x28
   18c14:	mov	r3, sp
   18c18:	mov	r0, #0
   18c1c:	mov	r1, ip
   18c20:	mvn	r2, #0
   18c24:	bl	18544 <lchmod@@Base+0x1bfc>
   18c28:	sub	sp, fp, #8
   18c2c:	pop	{r4, sl, fp, pc}
   18c30:	push	{r4, r5, fp, lr}
   18c34:	add	fp, sp, #8
   18c38:	sub	sp, sp, #48	; 0x30
   18c3c:	mov	lr, r2
   18c40:	movw	r2, #49648	; 0xc1f0
   18c44:	mov	ip, r3
   18c48:	mov	r3, #32
   18c4c:	cmp	r0, #0
   18c50:	mov	r5, sp
   18c54:	movt	r2, #2
   18c58:	cmpne	r1, #0
   18c5c:	add	r4, r2, #16
   18c60:	vld1.64	{d16-d17}, [r2], r3
   18c64:	vld1.64	{d18-d19}, [r4]
   18c68:	add	r4, r5, #16
   18c6c:	vld1.64	{d20-d21}, [r2]
   18c70:	vst1.64	{d16-d17}, [r5], r3
   18c74:	mov	r2, #10
   18c78:	vst1.64	{d18-d19}, [r4]
   18c7c:	vst1.64	{d20-d21}, [r5]
   18c80:	str	r2, [sp]
   18c84:	bne	18c8c <lchmod@@Base+0x2344>
   18c88:	bl	11a3c <abort@plt>
   18c8c:	str	r1, [sp, #44]	; 0x2c
   18c90:	str	r0, [sp, #40]	; 0x28
   18c94:	mov	r3, sp
   18c98:	mov	r0, #0
   18c9c:	mov	r1, lr
   18ca0:	mov	r2, ip
   18ca4:	bl	18544 <lchmod@@Base+0x1bfc>
   18ca8:	sub	sp, fp, #8
   18cac:	pop	{r4, r5, fp, pc}
   18cb0:	movw	r3, #49552	; 0xc190
   18cb4:	movt	r3, #2
   18cb8:	b	18544 <lchmod@@Base+0x1bfc>
   18cbc:	movw	r3, #49552	; 0xc190
   18cc0:	mov	r2, r1
   18cc4:	mov	r1, r0
   18cc8:	mov	r0, #0
   18ccc:	movt	r3, #2
   18cd0:	b	18544 <lchmod@@Base+0x1bfc>
   18cd4:	movw	r3, #49552	; 0xc190
   18cd8:	mvn	r2, #0
   18cdc:	movt	r3, #2
   18ce0:	b	18544 <lchmod@@Base+0x1bfc>
   18ce4:	movw	r3, #49552	; 0xc190
   18ce8:	mov	r1, r0
   18cec:	mov	r0, #0
   18cf0:	mvn	r2, #0
   18cf4:	movt	r3, #2
   18cf8:	b	18544 <lchmod@@Base+0x1bfc>
   18cfc:	push	{r4, r5, fp, lr}
   18d00:	add	fp, sp, #8
   18d04:	mov	r5, r0
   18d08:	mov	r4, r1
   18d0c:	mov	r0, #0
   18d10:	mov	r2, #5
   18d14:	mov	r1, r5
   18d18:	bl	11760 <dcgettext@plt>
   18d1c:	cmp	r0, r5
   18d20:	popne	{r4, r5, fp, pc}
   18d24:	bl	1a4e4 <lchmod@@Base+0x3b9c>
   18d28:	ldrb	r1, [r0]
   18d2c:	and	r1, r1, #223	; 0xdf
   18d30:	cmp	r1, #71	; 0x47
   18d34:	beq	18d9c <lchmod@@Base+0x2454>
   18d38:	cmp	r1, #85	; 0x55
   18d3c:	bne	18dc0 <lchmod@@Base+0x2478>
   18d40:	ldrb	r1, [r0, #1]
   18d44:	and	r1, r1, #223	; 0xdf
   18d48:	cmp	r1, #84	; 0x54
   18d4c:	bne	18dc0 <lchmod@@Base+0x2478>
   18d50:	ldrb	r1, [r0, #2]
   18d54:	and	r1, r1, #223	; 0xdf
   18d58:	cmp	r1, #70	; 0x46
   18d5c:	ldrbeq	r1, [r0, #3]
   18d60:	cmpeq	r1, #45	; 0x2d
   18d64:	bne	18dc0 <lchmod@@Base+0x2478>
   18d68:	ldrb	r1, [r0, #4]
   18d6c:	cmp	r1, #56	; 0x38
   18d70:	ldrbeq	r0, [r0, #5]
   18d74:	cmpeq	r0, #0
   18d78:	bne	18dc0 <lchmod@@Base+0x2478>
   18d7c:	ldrb	r1, [r5]
   18d80:	movw	r2, #44987	; 0xafbb
   18d84:	movw	r0, #44991	; 0xafbf
   18d88:	movt	r2, #1
   18d8c:	movt	r0, #1
   18d90:	cmp	r1, #96	; 0x60
   18d94:	moveq	r0, r2
   18d98:	pop	{r4, r5, fp, pc}
   18d9c:	ldrb	r1, [r0, #1]
   18da0:	and	r1, r1, #223	; 0xdf
   18da4:	cmp	r1, #66	; 0x42
   18da8:	bne	18dc0 <lchmod@@Base+0x2478>
   18dac:	ldrb	r1, [r0, #2]
   18db0:	cmp	r1, #49	; 0x31
   18db4:	ldrbeq	r1, [r0, #3]
   18db8:	cmpeq	r1, #56	; 0x38
   18dbc:	beq	18ddc <lchmod@@Base+0x2494>
   18dc0:	movw	r1, #44981	; 0xafb5
   18dc4:	movw	r0, #44985	; 0xafb9
   18dc8:	cmp	r4, #9
   18dcc:	movt	r1, #1
   18dd0:	movt	r0, #1
   18dd4:	moveq	r0, r1
   18dd8:	pop	{r4, r5, fp, pc}
   18ddc:	ldrb	r1, [r0, #4]
   18de0:	cmp	r1, #48	; 0x30
   18de4:	ldrbeq	r1, [r0, #5]
   18de8:	cmpeq	r1, #51	; 0x33
   18dec:	bne	18dc0 <lchmod@@Base+0x2478>
   18df0:	ldrb	r1, [r0, #6]
   18df4:	cmp	r1, #48	; 0x30
   18df8:	ldrbeq	r0, [r0, #7]
   18dfc:	cmpeq	r0, #0
   18e00:	bne	18dc0 <lchmod@@Base+0x2478>
   18e04:	ldrb	r1, [r5]
   18e08:	movw	r2, #44995	; 0xafc3
   18e0c:	movw	r0, #44999	; 0xafc7
   18e10:	movt	r2, #1
   18e14:	movt	r0, #1
   18e18:	b	18d90 <lchmod@@Base+0x2448>
   18e1c:	push	{r4, r5, r6, sl, fp, lr}
   18e20:	add	fp, sp, #16
   18e24:	ldr	r4, [r0], #8
   18e28:	mov	r5, r1
   18e2c:	cmp	r4, r0
   18e30:	beq	18e54 <lchmod@@Base+0x250c>
   18e34:	mov	r0, r4
   18e38:	mov	r1, r5
   18e3c:	bl	19e94 <lchmod@@Base+0x354c>
   18e40:	mov	r6, r0
   18e44:	cmp	r0, #0
   18e48:	moveq	r6, r4
   18e4c:	mov	r0, r6
   18e50:	pop	{r4, r5, r6, sl, fp, pc}
   18e54:	mov	r0, r5
   18e58:	bl	19e64 <lchmod@@Base+0x351c>
   18e5c:	cmp	r0, #0
   18e60:	moveq	r6, #0
   18e64:	moveq	r0, r6
   18e68:	popeq	{r4, r5, r6, sl, fp, pc}
   18e6c:	mov	r1, r4
   18e70:	mov	r2, r5
   18e74:	mov	r6, r0
   18e78:	bl	11730 <memcpy@plt>
   18e7c:	mov	r0, r6
   18e80:	pop	{r4, r5, r6, sl, fp, pc}
   18e84:	push	{r4, r5, r6, sl, fp, lr}
   18e88:	add	fp, sp, #16
   18e8c:	mov	r4, r0
   18e90:	add	r6, r0, #8
   18e94:	ldrd	r0, [r0]
   18e98:	lsl	r5, r1, #1
   18e9c:	cmp	r0, r6
   18ea0:	beq	18eac <lchmod@@Base+0x2564>
   18ea4:	bl	13148 <__assert_fail@plt+0x16ac>
   18ea8:	ldr	r1, [r4, #4]
   18eac:	cmp	r5, r1
   18eb0:	bcc	18ed4 <lchmod@@Base+0x258c>
   18eb4:	mov	r0, r5
   18eb8:	bl	19e64 <lchmod@@Base+0x351c>
   18ebc:	cmp	r0, #0
   18ec0:	strne	r0, [r4]
   18ec4:	movne	r0, #1
   18ec8:	strne	r5, [r4, #4]
   18ecc:	popne	{r4, r5, r6, sl, fp, pc}
   18ed0:	b	18ee0 <lchmod@@Base+0x2598>
   18ed4:	bl	118ec <__errno_location@plt>
   18ed8:	mov	r1, #12
   18edc:	str	r1, [r0]
   18ee0:	mov	r0, #0
   18ee4:	mov	r5, #1024	; 0x400
   18ee8:	str	r6, [r4]
   18eec:	str	r5, [r4, #4]
   18ef0:	pop	{r4, r5, r6, sl, fp, pc}
   18ef4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18ef8:	add	fp, sp, #24
   18efc:	ldrd	r8, [r0]
   18f00:	add	r7, r0, #8
   18f04:	mov	r4, r0
   18f08:	lsl	r5, r9, #1
   18f0c:	cmp	r8, r7
   18f10:	beq	18f3c <lchmod@@Base+0x25f4>
   18f14:	cmp	r5, r9
   18f18:	bcc	18f70 <lchmod@@Base+0x2628>
   18f1c:	mov	r0, r8
   18f20:	mov	r1, r5
   18f24:	bl	19e94 <lchmod@@Base+0x354c>
   18f28:	mov	r6, r0
   18f2c:	cmp	r0, #0
   18f30:	bne	18f60 <lchmod@@Base+0x2618>
   18f34:	ldr	r8, [r4]
   18f38:	b	18f7c <lchmod@@Base+0x2634>
   18f3c:	mov	r0, r5
   18f40:	bl	19e64 <lchmod@@Base+0x351c>
   18f44:	cmp	r0, #0
   18f48:	moveq	r0, #0
   18f4c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   18f50:	ldr	r2, [r4, #4]
   18f54:	mov	r1, r8
   18f58:	mov	r6, r0
   18f5c:	bl	11730 <memcpy@plt>
   18f60:	mov	r0, #1
   18f64:	str	r6, [r4]
   18f68:	str	r5, [r4, #4]
   18f6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18f70:	bl	118ec <__errno_location@plt>
   18f74:	mov	r1, #12
   18f78:	str	r1, [r0]
   18f7c:	mov	r0, r8
   18f80:	bl	13148 <__assert_fail@plt+0x16ac>
   18f84:	mov	r0, #0
   18f88:	mov	r5, #1024	; 0x400
   18f8c:	str	r7, [r4]
   18f90:	str	r5, [r4, #4]
   18f94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18f98:	push	{r4, r5, fp, lr}
   18f9c:	add	fp, sp, #8
   18fa0:	mov	r4, r1
   18fa4:	bl	118b0 <getfilecon@plt>
   18fa8:	cmp	r0, #10
   18fac:	beq	18fc4 <lchmod@@Base+0x267c>
   18fb0:	cmp	r0, #0
   18fb4:	bne	19008 <lchmod@@Base+0x26c0>
   18fb8:	bl	118ec <__errno_location@plt>
   18fbc:	mov	r1, #95	; 0x5f
   18fc0:	b	19000 <lchmod@@Base+0x26b8>
   18fc4:	ldr	r5, [r4]
   18fc8:	movw	r1, #45088	; 0xb020
   18fcc:	movt	r1, #1
   18fd0:	mov	r0, r5
   18fd4:	bl	116d0 <strcmp@plt>
   18fd8:	mov	r1, r0
   18fdc:	mov	r0, #10
   18fe0:	cmp	r1, #0
   18fe4:	popne	{r4, r5, fp, pc}
   18fe8:	mov	r0, r5
   18fec:	bl	119dc <freecon@plt>
   18ff0:	mov	r0, #0
   18ff4:	str	r0, [r4]
   18ff8:	bl	118ec <__errno_location@plt>
   18ffc:	mov	r1, #61	; 0x3d
   19000:	str	r1, [r0]
   19004:	mvn	r0, #0
   19008:	pop	{r4, r5, fp, pc}
   1900c:	push	{r4, r5, fp, lr}
   19010:	add	fp, sp, #8
   19014:	mov	r4, r1
   19018:	bl	11838 <lgetfilecon@plt>
   1901c:	cmp	r0, #10
   19020:	beq	19038 <lchmod@@Base+0x26f0>
   19024:	cmp	r0, #0
   19028:	bne	1907c <lchmod@@Base+0x2734>
   1902c:	bl	118ec <__errno_location@plt>
   19030:	mov	r1, #95	; 0x5f
   19034:	b	19074 <lchmod@@Base+0x272c>
   19038:	ldr	r5, [r4]
   1903c:	movw	r1, #45088	; 0xb020
   19040:	movt	r1, #1
   19044:	mov	r0, r5
   19048:	bl	116d0 <strcmp@plt>
   1904c:	mov	r1, r0
   19050:	mov	r0, #10
   19054:	cmp	r1, #0
   19058:	popne	{r4, r5, fp, pc}
   1905c:	mov	r0, r5
   19060:	bl	119dc <freecon@plt>
   19064:	mov	r0, #0
   19068:	str	r0, [r4]
   1906c:	bl	118ec <__errno_location@plt>
   19070:	mov	r1, #61	; 0x3d
   19074:	str	r1, [r0]
   19078:	mvn	r0, #0
   1907c:	pop	{r4, r5, fp, pc}
   19080:	push	{r4, r5, fp, lr}
   19084:	add	fp, sp, #8
   19088:	mov	r4, r1
   1908c:	bl	11784 <fgetfilecon@plt>
   19090:	cmp	r0, #10
   19094:	beq	190ac <lchmod@@Base+0x2764>
   19098:	cmp	r0, #0
   1909c:	bne	190f0 <lchmod@@Base+0x27a8>
   190a0:	bl	118ec <__errno_location@plt>
   190a4:	mov	r1, #95	; 0x5f
   190a8:	b	190e8 <lchmod@@Base+0x27a0>
   190ac:	ldr	r5, [r4]
   190b0:	movw	r1, #45088	; 0xb020
   190b4:	movt	r1, #1
   190b8:	mov	r0, r5
   190bc:	bl	116d0 <strcmp@plt>
   190c0:	mov	r1, r0
   190c4:	mov	r0, #10
   190c8:	cmp	r1, #0
   190cc:	popne	{r4, r5, fp, pc}
   190d0:	mov	r0, r5
   190d4:	bl	119dc <freecon@plt>
   190d8:	mov	r0, #0
   190dc:	str	r0, [r4]
   190e0:	bl	118ec <__errno_location@plt>
   190e4:	mov	r1, #61	; 0x3d
   190e8:	str	r1, [r0]
   190ec:	mvn	r0, #0
   190f0:	pop	{r4, r5, fp, pc}
   190f4:	push	{r4, r5, r6, r7, fp, lr}
   190f8:	add	fp, sp, #16
   190fc:	mov	r4, r0
   19100:	cmp	r0, #2
   19104:	movhi	r0, r4
   19108:	pophi	{r4, r5, r6, r7, fp, pc}
   1910c:	mov	r0, r4
   19110:	bl	1a5b8 <lchmod@@Base+0x3c70>
   19114:	mov	r5, r0
   19118:	bl	118ec <__errno_location@plt>
   1911c:	ldr	r7, [r0]
   19120:	mov	r6, r0
   19124:	mov	r0, r4
   19128:	bl	11a48 <close@plt>
   1912c:	mov	r0, r5
   19130:	str	r7, [r6]
   19134:	pop	{r4, r5, r6, r7, fp, pc}
   19138:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1913c:	add	fp, sp, #24
   19140:	sub	sp, sp, #32
   19144:	ldr	r6, [fp, #12]
   19148:	ldr	r7, [fp, #8]
   1914c:	mov	r4, r2
   19150:	mov	r8, r0
   19154:	cmp	r1, #0
   19158:	beq	19180 <lchmod@@Base+0x2838>
   1915c:	movw	r2, #45098	; 0xb02a
   19160:	mov	r5, r1
   19164:	str	r3, [sp, #4]
   19168:	str	r4, [sp]
   1916c:	mov	r0, r8
   19170:	mov	r1, #1
   19174:	movt	r2, #1
   19178:	mov	r3, r5
   1917c:	b	19198 <lchmod@@Base+0x2850>
   19180:	movw	r2, #45110	; 0xb036
   19184:	str	r3, [sp]
   19188:	mov	r0, r8
   1918c:	mov	r1, #1
   19190:	mov	r3, r4
   19194:	movt	r2, #1
   19198:	bl	11934 <__fprintf_chk@plt>
   1919c:	movw	r1, #45117	; 0xb03d
   191a0:	mov	r0, #0
   191a4:	mov	r2, #5
   191a8:	movt	r1, #1
   191ac:	bl	11760 <dcgettext@plt>
   191b0:	movw	r2, #45835	; 0xb30b
   191b4:	mov	r3, r0
   191b8:	movw	r0, #2022	; 0x7e6
   191bc:	mov	r1, #1
   191c0:	str	r0, [sp]
   191c4:	movt	r2, #1
   191c8:	mov	r0, r8
   191cc:	bl	11934 <__fprintf_chk@plt>
   191d0:	movw	r4, #44443	; 0xad9b
   191d4:	mov	r1, r8
   191d8:	movt	r4, #1
   191dc:	mov	r0, r4
   191e0:	bl	116ac <fputs_unlocked@plt>
   191e4:	movw	r1, #45121	; 0xb041
   191e8:	mov	r0, #0
   191ec:	mov	r2, #5
   191f0:	movt	r1, #1
   191f4:	bl	11760 <dcgettext@plt>
   191f8:	movw	r3, #45292	; 0xb0ec
   191fc:	mov	r2, r0
   19200:	mov	r0, r8
   19204:	mov	r1, #1
   19208:	movt	r3, #1
   1920c:	bl	11934 <__fprintf_chk@plt>
   19210:	mov	r0, r4
   19214:	mov	r1, r8
   19218:	bl	116ac <fputs_unlocked@plt>
   1921c:	cmp	r6, #9
   19220:	bhi	1925c <lchmod@@Base+0x2914>
   19224:	add	r0, pc, #0
   19228:	ldr	pc, [r0, r6, lsl #2]
   1922c:	andeq	r9, r1, r4, asr r2
   19230:	andeq	r9, r1, r8, ror #4
   19234:	muleq	r1, r8, r2
   19238:	andeq	r9, r1, r0, asr #5
   1923c:	andeq	r9, r1, r8, ror #5
   19240:	andeq	r9, r1, r0, lsl r3
   19244:	andeq	r9, r1, r8, lsr r3
   19248:	andeq	r9, r1, r0, ror r3
   1924c:	andeq	r9, r1, r0, lsl r4
   19250:			; <UNDEFINED> instruction: 0x000193b8
   19254:	sub	sp, fp, #24
   19258:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1925c:	movw	r1, #45645	; 0xb24d
   19260:	movt	r1, #1
   19264:	b	193c0 <lchmod@@Base+0x2a78>
   19268:	movw	r1, #45326	; 0xb10e
   1926c:	mov	r0, #0
   19270:	mov	r2, #5
   19274:	movt	r1, #1
   19278:	bl	11760 <dcgettext@plt>
   1927c:	ldr	r3, [r7]
   19280:	mov	r2, r0
   19284:	mov	r0, r8
   19288:	mov	r1, #1
   1928c:	sub	sp, fp, #24
   19290:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19294:	b	11934 <__fprintf_chk@plt>
   19298:	movw	r1, #45342	; 0xb11e
   1929c:	mov	r0, #0
   192a0:	mov	r2, #5
   192a4:	movt	r1, #1
   192a8:	bl	11760 <dcgettext@plt>
   192ac:	mov	r2, r0
   192b0:	ldr	r3, [r7]
   192b4:	ldr	r0, [r7, #4]
   192b8:	str	r0, [sp]
   192bc:	b	193ac <lchmod@@Base+0x2a64>
   192c0:	movw	r1, #45365	; 0xb135
   192c4:	mov	r0, #0
   192c8:	mov	r2, #5
   192cc:	movt	r1, #1
   192d0:	bl	11760 <dcgettext@plt>
   192d4:	ldr	r3, [r7]
   192d8:	mov	r2, r0
   192dc:	ldmib	r7, {r0, r1}
   192e0:	stm	sp, {r0, r1}
   192e4:	b	193ac <lchmod@@Base+0x2a64>
   192e8:	movw	r1, #45393	; 0xb151
   192ec:	mov	r0, #0
   192f0:	mov	r2, #5
   192f4:	movt	r1, #1
   192f8:	bl	11760 <dcgettext@plt>
   192fc:	ldr	r3, [r7]
   19300:	mov	r2, r0
   19304:	ldmib	r7, {r0, r1, r7}
   19308:	stm	sp, {r0, r1, r7}
   1930c:	b	193ac <lchmod@@Base+0x2a64>
   19310:	movw	r1, #45425	; 0xb171
   19314:	mov	r0, #0
   19318:	mov	r2, #5
   1931c:	movt	r1, #1
   19320:	bl	11760 <dcgettext@plt>
   19324:	ldr	r3, [r7]
   19328:	mov	r2, r0
   1932c:	ldmib	r7, {r0, r1, r6, r7}
   19330:	stm	sp, {r0, r1, r6, r7}
   19334:	b	193ac <lchmod@@Base+0x2a64>
   19338:	movw	r1, #45461	; 0xb195
   1933c:	mov	r0, #0
   19340:	mov	r2, #5
   19344:	movt	r1, #1
   19348:	bl	11760 <dcgettext@plt>
   1934c:	ldr	r3, [r7]
   19350:	mov	r2, r0
   19354:	ldmib	r7, {r0, r1, r6}
   19358:	ldr	r5, [r7, #16]
   1935c:	ldr	r7, [r7, #20]
   19360:	stm	sp, {r0, r1, r6}
   19364:	str	r5, [sp, #12]
   19368:	str	r7, [sp, #16]
   1936c:	b	193ac <lchmod@@Base+0x2a64>
   19370:	movw	r1, #45501	; 0xb1bd
   19374:	mov	r0, #0
   19378:	mov	r2, #5
   1937c:	movt	r1, #1
   19380:	bl	11760 <dcgettext@plt>
   19384:	ldr	r3, [r7]
   19388:	mov	r2, r0
   1938c:	ldmib	r7, {r0, r1, r6}
   19390:	ldr	r5, [r7, #16]
   19394:	ldr	r4, [r7, #20]
   19398:	ldr	r7, [r7, #24]
   1939c:	stm	sp, {r0, r1, r6}
   193a0:	str	r5, [sp, #12]
   193a4:	str	r4, [sp, #16]
   193a8:	str	r7, [sp, #20]
   193ac:	mov	r0, r8
   193b0:	mov	r1, #1
   193b4:	b	19460 <lchmod@@Base+0x2b18>
   193b8:	movw	r1, #45593	; 0xb219
   193bc:	movt	r1, #1
   193c0:	mov	r0, #0
   193c4:	mov	r2, #5
   193c8:	bl	11760 <dcgettext@plt>
   193cc:	mov	ip, r0
   193d0:	ldr	r3, [r7]
   193d4:	ldr	r0, [r7, #4]
   193d8:	ldr	r1, [r7, #8]
   193dc:	ldr	r6, [r7, #12]
   193e0:	ldr	r5, [r7, #16]
   193e4:	ldr	r4, [r7, #20]
   193e8:	ldr	r2, [r7, #24]
   193ec:	ldr	lr, [r7, #28]
   193f0:	ldr	r7, [r7, #32]
   193f4:	stm	sp, {r0, r1, r6}
   193f8:	str	r5, [sp, #12]
   193fc:	str	r4, [sp, #16]
   19400:	str	r2, [sp, #20]
   19404:	str	lr, [sp, #24]
   19408:	str	r7, [sp, #28]
   1940c:	b	19454 <lchmod@@Base+0x2b0c>
   19410:	movw	r1, #45545	; 0xb1e9
   19414:	mov	r0, #0
   19418:	mov	r2, #5
   1941c:	movt	r1, #1
   19420:	bl	11760 <dcgettext@plt>
   19424:	mov	ip, r0
   19428:	ldr	r3, [r7]
   1942c:	ldmib	r7, {r0, r1, r6}
   19430:	ldr	r5, [r7, #16]
   19434:	ldr	r4, [r7, #20]
   19438:	ldr	r2, [r7, #24]
   1943c:	ldr	r7, [r7, #28]
   19440:	stm	sp, {r0, r1, r6}
   19444:	str	r5, [sp, #12]
   19448:	str	r4, [sp, #16]
   1944c:	str	r2, [sp, #20]
   19450:	str	r7, [sp, #24]
   19454:	mov	r0, r8
   19458:	mov	r1, #1
   1945c:	mov	r2, ip
   19460:	bl	11934 <__fprintf_chk@plt>
   19464:	sub	sp, fp, #24
   19468:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1946c:	push	{r4, sl, fp, lr}
   19470:	add	fp, sp, #8
   19474:	sub	sp, sp, #8
   19478:	ldr	ip, [fp, #8]
   1947c:	mov	lr, #0
   19480:	ldr	r4, [ip, lr, lsl #2]
   19484:	add	lr, lr, #1
   19488:	cmp	r4, #0
   1948c:	bne	19480 <lchmod@@Base+0x2b38>
   19490:	sub	r4, lr, #1
   19494:	str	ip, [sp]
   19498:	str	r4, [sp, #4]
   1949c:	bl	19138 <lchmod@@Base+0x27f0>
   194a0:	sub	sp, fp, #8
   194a4:	pop	{r4, sl, fp, pc}
   194a8:	push	{fp, lr}
   194ac:	mov	fp, sp
   194b0:	sub	sp, sp, #48	; 0x30
   194b4:	ldr	ip, [fp, #8]
   194b8:	ldr	lr, [ip]
   194bc:	cmp	lr, #0
   194c0:	str	lr, [sp, #8]
   194c4:	beq	19560 <lchmod@@Base+0x2c18>
   194c8:	ldr	lr, [ip, #4]
   194cc:	cmp	lr, #0
   194d0:	str	lr, [sp, #12]
   194d4:	beq	19568 <lchmod@@Base+0x2c20>
   194d8:	ldr	lr, [ip, #8]
   194dc:	cmp	lr, #0
   194e0:	str	lr, [sp, #16]
   194e4:	beq	19570 <lchmod@@Base+0x2c28>
   194e8:	ldr	lr, [ip, #12]
   194ec:	cmp	lr, #0
   194f0:	str	lr, [sp, #20]
   194f4:	beq	19578 <lchmod@@Base+0x2c30>
   194f8:	ldr	lr, [ip, #16]
   194fc:	cmp	lr, #0
   19500:	str	lr, [sp, #24]
   19504:	beq	19580 <lchmod@@Base+0x2c38>
   19508:	ldr	lr, [ip, #20]
   1950c:	cmp	lr, #0
   19510:	str	lr, [sp, #28]
   19514:	beq	19588 <lchmod@@Base+0x2c40>
   19518:	ldr	lr, [ip, #24]
   1951c:	cmp	lr, #0
   19520:	str	lr, [sp, #32]
   19524:	beq	19590 <lchmod@@Base+0x2c48>
   19528:	ldr	lr, [ip, #28]
   1952c:	cmp	lr, #0
   19530:	str	lr, [sp, #36]	; 0x24
   19534:	beq	19598 <lchmod@@Base+0x2c50>
   19538:	ldr	lr, [ip, #32]
   1953c:	cmp	lr, #0
   19540:	str	lr, [sp, #40]	; 0x28
   19544:	beq	195a0 <lchmod@@Base+0x2c58>
   19548:	ldr	lr, [ip, #36]	; 0x24
   1954c:	mov	ip, #10
   19550:	cmp	lr, #0
   19554:	str	lr, [sp, #44]	; 0x2c
   19558:	movweq	ip, #9
   1955c:	b	195a4 <lchmod@@Base+0x2c5c>
   19560:	mov	ip, #0
   19564:	b	195a4 <lchmod@@Base+0x2c5c>
   19568:	mov	ip, #1
   1956c:	b	195a4 <lchmod@@Base+0x2c5c>
   19570:	mov	ip, #2
   19574:	b	195a4 <lchmod@@Base+0x2c5c>
   19578:	mov	ip, #3
   1957c:	b	195a4 <lchmod@@Base+0x2c5c>
   19580:	mov	ip, #4
   19584:	b	195a4 <lchmod@@Base+0x2c5c>
   19588:	mov	ip, #5
   1958c:	b	195a4 <lchmod@@Base+0x2c5c>
   19590:	mov	ip, #6
   19594:	b	195a4 <lchmod@@Base+0x2c5c>
   19598:	mov	ip, #7
   1959c:	b	195a4 <lchmod@@Base+0x2c5c>
   195a0:	mov	ip, #8
   195a4:	add	lr, sp, #8
   195a8:	str	ip, [sp, #4]
   195ac:	str	lr, [sp]
   195b0:	bl	19138 <lchmod@@Base+0x27f0>
   195b4:	mov	sp, fp
   195b8:	pop	{fp, pc}
   195bc:	push	{fp, lr}
   195c0:	mov	fp, sp
   195c4:	sub	sp, sp, #56	; 0x38
   195c8:	add	ip, fp, #8
   195cc:	str	ip, [sp, #12]
   195d0:	ldr	lr, [fp, #8]
   195d4:	cmp	lr, #0
   195d8:	str	lr, [sp, #16]
   195dc:	beq	19678 <lchmod@@Base+0x2d30>
   195e0:	ldr	lr, [ip, #4]
   195e4:	cmp	lr, #0
   195e8:	str	lr, [sp, #20]
   195ec:	beq	19680 <lchmod@@Base+0x2d38>
   195f0:	ldr	lr, [ip, #8]
   195f4:	cmp	lr, #0
   195f8:	str	lr, [sp, #24]
   195fc:	beq	19688 <lchmod@@Base+0x2d40>
   19600:	ldr	lr, [ip, #12]
   19604:	cmp	lr, #0
   19608:	str	lr, [sp, #28]
   1960c:	beq	19690 <lchmod@@Base+0x2d48>
   19610:	ldr	lr, [ip, #16]
   19614:	cmp	lr, #0
   19618:	str	lr, [sp, #32]
   1961c:	beq	19698 <lchmod@@Base+0x2d50>
   19620:	ldr	lr, [ip, #20]
   19624:	cmp	lr, #0
   19628:	str	lr, [sp, #36]	; 0x24
   1962c:	beq	196a0 <lchmod@@Base+0x2d58>
   19630:	ldr	lr, [ip, #24]
   19634:	cmp	lr, #0
   19638:	str	lr, [sp, #40]	; 0x28
   1963c:	beq	196a8 <lchmod@@Base+0x2d60>
   19640:	ldr	lr, [ip, #28]
   19644:	cmp	lr, #0
   19648:	str	lr, [sp, #44]	; 0x2c
   1964c:	beq	196b0 <lchmod@@Base+0x2d68>
   19650:	ldr	lr, [ip, #32]
   19654:	cmp	lr, #0
   19658:	str	lr, [sp, #48]	; 0x30
   1965c:	beq	196b8 <lchmod@@Base+0x2d70>
   19660:	ldr	lr, [ip, #36]	; 0x24
   19664:	mov	ip, #10
   19668:	cmp	lr, #0
   1966c:	str	lr, [sp, #52]	; 0x34
   19670:	movweq	ip, #9
   19674:	b	196bc <lchmod@@Base+0x2d74>
   19678:	mov	ip, #0
   1967c:	b	196bc <lchmod@@Base+0x2d74>
   19680:	mov	ip, #1
   19684:	b	196bc <lchmod@@Base+0x2d74>
   19688:	mov	ip, #2
   1968c:	b	196bc <lchmod@@Base+0x2d74>
   19690:	mov	ip, #3
   19694:	b	196bc <lchmod@@Base+0x2d74>
   19698:	mov	ip, #4
   1969c:	b	196bc <lchmod@@Base+0x2d74>
   196a0:	mov	ip, #5
   196a4:	b	196bc <lchmod@@Base+0x2d74>
   196a8:	mov	ip, #6
   196ac:	b	196bc <lchmod@@Base+0x2d74>
   196b0:	mov	ip, #7
   196b4:	b	196bc <lchmod@@Base+0x2d74>
   196b8:	mov	ip, #8
   196bc:	add	lr, sp, #16
   196c0:	str	ip, [sp, #4]
   196c4:	str	lr, [sp]
   196c8:	bl	19138 <lchmod@@Base+0x27f0>
   196cc:	mov	sp, fp
   196d0:	pop	{fp, pc}
   196d4:	push	{fp, lr}
   196d8:	mov	fp, sp
   196dc:	movw	r0, #49620	; 0xc1d4
   196e0:	movt	r0, #2
   196e4:	ldr	r1, [r0]
   196e8:	movw	r0, #44443	; 0xad9b
   196ec:	movt	r0, #1
   196f0:	bl	116ac <fputs_unlocked@plt>
   196f4:	movw	r1, #45705	; 0xb289
   196f8:	mov	r0, #0
   196fc:	mov	r2, #5
   19700:	movt	r1, #1
   19704:	bl	11760 <dcgettext@plt>
   19708:	movw	r2, #45725	; 0xb29d
   1970c:	mov	r1, r0
   19710:	mov	r0, #1
   19714:	movt	r2, #1
   19718:	bl	1191c <__printf_chk@plt>
   1971c:	movw	r1, #45747	; 0xb2b3
   19720:	mov	r0, #0
   19724:	mov	r2, #5
   19728:	movt	r1, #1
   1972c:	bl	11760 <dcgettext@plt>
   19730:	movw	r2, #43855	; 0xab4f
   19734:	movw	r3, #44252	; 0xacdc
   19738:	mov	r1, r0
   1973c:	mov	r0, #1
   19740:	movt	r2, #1
   19744:	movt	r3, #1
   19748:	bl	1191c <__printf_chk@plt>
   1974c:	movw	r1, #45767	; 0xb2c7
   19750:	mov	r0, #0
   19754:	mov	r2, #5
   19758:	movt	r1, #1
   1975c:	bl	11760 <dcgettext@plt>
   19760:	movw	r2, #45806	; 0xb2ee
   19764:	mov	r1, r0
   19768:	mov	r0, #1
   1976c:	movt	r2, #1
   19770:	pop	{fp, lr}
   19774:	b	1191c <__printf_chk@plt>
   19778:	push	{r4, r5, r6, sl, fp, lr}
   1977c:	add	fp, sp, #16
   19780:	mov	r4, r2
   19784:	mov	r5, r1
   19788:	mov	r6, r0
   1978c:	bl	1a57c <lchmod@@Base+0x3c34>
   19790:	cmp	r0, #0
   19794:	popne	{r4, r5, r6, sl, fp, pc}
   19798:	cmp	r6, #0
   1979c:	beq	197b0 <lchmod@@Base+0x2e68>
   197a0:	cmp	r5, #0
   197a4:	cmpne	r4, #0
   197a8:	bne	197b0 <lchmod@@Base+0x2e68>
   197ac:	pop	{r4, r5, r6, sl, fp, pc}
   197b0:	bl	19d50 <lchmod@@Base+0x3408>
   197b4:	push	{r4, r5, r6, sl, fp, lr}
   197b8:	add	fp, sp, #16
   197bc:	mov	r4, r2
   197c0:	mov	r5, r1
   197c4:	mov	r6, r0
   197c8:	bl	1a57c <lchmod@@Base+0x3c34>
   197cc:	cmp	r0, #0
   197d0:	popne	{r4, r5, r6, sl, fp, pc}
   197d4:	cmp	r6, #0
   197d8:	beq	197ec <lchmod@@Base+0x2ea4>
   197dc:	cmp	r5, #0
   197e0:	cmpne	r4, #0
   197e4:	bne	197ec <lchmod@@Base+0x2ea4>
   197e8:	pop	{r4, r5, r6, sl, fp, pc}
   197ec:	bl	19d50 <lchmod@@Base+0x3408>
   197f0:	push	{fp, lr}
   197f4:	mov	fp, sp
   197f8:	bl	19e64 <lchmod@@Base+0x351c>
   197fc:	cmp	r0, #0
   19800:	popne	{fp, pc}
   19804:	bl	19d50 <lchmod@@Base+0x3408>
   19808:	push	{fp, lr}
   1980c:	mov	fp, sp
   19810:	bl	19e64 <lchmod@@Base+0x351c>
   19814:	cmp	r0, #0
   19818:	popne	{fp, pc}
   1981c:	bl	19d50 <lchmod@@Base+0x3408>
   19820:	push	{fp, lr}
   19824:	mov	fp, sp
   19828:	bl	19e64 <lchmod@@Base+0x351c>
   1982c:	cmp	r0, #0
   19830:	popne	{fp, pc}
   19834:	bl	19d50 <lchmod@@Base+0x3408>
   19838:	push	{r4, r5, fp, lr}
   1983c:	add	fp, sp, #8
   19840:	mov	r4, r1
   19844:	mov	r5, r0
   19848:	bl	19e94 <lchmod@@Base+0x354c>
   1984c:	cmp	r0, #0
   19850:	popne	{r4, r5, fp, pc}
   19854:	cmp	r5, #0
   19858:	beq	19868 <lchmod@@Base+0x2f20>
   1985c:	cmp	r4, #0
   19860:	bne	19868 <lchmod@@Base+0x2f20>
   19864:	pop	{r4, r5, fp, pc}
   19868:	bl	19d50 <lchmod@@Base+0x3408>
   1986c:	push	{fp, lr}
   19870:	mov	fp, sp
   19874:	cmp	r1, #0
   19878:	orreq	r1, r1, #1
   1987c:	bl	19e94 <lchmod@@Base+0x354c>
   19880:	cmp	r0, #0
   19884:	popne	{fp, pc}
   19888:	bl	19d50 <lchmod@@Base+0x3408>
   1988c:	push	{fp, lr}
   19890:	mov	fp, sp
   19894:	clz	r3, r2
   19898:	lsr	ip, r3, #5
   1989c:	clz	r3, r1
   198a0:	lsr	r3, r3, #5
   198a4:	orrs	r3, r3, ip
   198a8:	movwne	r1, #1
   198ac:	movwne	r2, #1
   198b0:	bl	1a57c <lchmod@@Base+0x3c34>
   198b4:	cmp	r0, #0
   198b8:	popne	{fp, pc}
   198bc:	bl	19d50 <lchmod@@Base+0x3408>
   198c0:	push	{fp, lr}
   198c4:	mov	fp, sp
   198c8:	mov	r2, r1
   198cc:	mov	r1, r0
   198d0:	mov	r0, #0
   198d4:	bl	1a57c <lchmod@@Base+0x3c34>
   198d8:	cmp	r0, #0
   198dc:	popne	{fp, pc}
   198e0:	bl	19d50 <lchmod@@Base+0x3408>
   198e4:	push	{fp, lr}
   198e8:	mov	fp, sp
   198ec:	mov	r2, r1
   198f0:	mov	r1, r0
   198f4:	clz	r0, r2
   198f8:	clz	r3, r1
   198fc:	lsr	r0, r0, #5
   19900:	lsr	r3, r3, #5
   19904:	orrs	r0, r3, r0
   19908:	movwne	r1, #1
   1990c:	movwne	r2, #1
   19910:	mov	r0, #0
   19914:	bl	1a57c <lchmod@@Base+0x3c34>
   19918:	cmp	r0, #0
   1991c:	popne	{fp, pc}
   19920:	bl	19d50 <lchmod@@Base+0x3408>
   19924:	push	{r4, r5, r6, sl, fp, lr}
   19928:	add	fp, sp, #16
   1992c:	ldr	r5, [r1]
   19930:	mov	r4, r1
   19934:	mov	r6, r0
   19938:	cmp	r0, #0
   1993c:	beq	19954 <lchmod@@Base+0x300c>
   19940:	mov	r0, #1
   19944:	add	r0, r0, r5, lsr #1
   19948:	adds	r5, r5, r0
   1994c:	bcc	1995c <lchmod@@Base+0x3014>
   19950:	b	19998 <lchmod@@Base+0x3050>
   19954:	cmp	r5, #0
   19958:	movweq	r5, #64	; 0x40
   1995c:	mov	r0, r6
   19960:	mov	r1, r5
   19964:	mov	r2, #1
   19968:	bl	1a57c <lchmod@@Base+0x3c34>
   1996c:	cmp	r5, #0
   19970:	mov	r1, r5
   19974:	movwne	r1, #1
   19978:	cmp	r0, #0
   1997c:	bne	19990 <lchmod@@Base+0x3048>
   19980:	clz	r2, r6
   19984:	lsr	r2, r2, #5
   19988:	orrs	r1, r2, r1
   1998c:	bne	19998 <lchmod@@Base+0x3050>
   19990:	str	r5, [r4]
   19994:	pop	{r4, r5, r6, sl, fp, pc}
   19998:	bl	19d50 <lchmod@@Base+0x3408>
   1999c:	push	{r4, r5, r6, r7, fp, lr}
   199a0:	add	fp, sp, #16
   199a4:	ldr	r5, [r1]
   199a8:	mov	r6, r2
   199ac:	mov	r4, r1
   199b0:	mov	r7, r0
   199b4:	cmp	r0, #0
   199b8:	beq	199d0 <lchmod@@Base+0x3088>
   199bc:	mov	r0, #1
   199c0:	add	r0, r0, r5, lsr #1
   199c4:	adds	r5, r5, r0
   199c8:	bcc	199e8 <lchmod@@Base+0x30a0>
   199cc:	b	19a1c <lchmod@@Base+0x30d4>
   199d0:	cmp	r5, #0
   199d4:	bne	199e8 <lchmod@@Base+0x30a0>
   199d8:	mov	r0, #64	; 0x40
   199dc:	cmp	r6, #64	; 0x40
   199e0:	udiv	r5, r0, r6
   199e4:	addhi	r5, r5, #1
   199e8:	mov	r0, r7
   199ec:	mov	r1, r5
   199f0:	mov	r2, r6
   199f4:	bl	1a57c <lchmod@@Base+0x3c34>
   199f8:	cmp	r0, #0
   199fc:	bne	19a14 <lchmod@@Base+0x30cc>
   19a00:	cmp	r7, #0
   19a04:	beq	19a1c <lchmod@@Base+0x30d4>
   19a08:	cmp	r6, #0
   19a0c:	cmpne	r5, #0
   19a10:	bne	19a1c <lchmod@@Base+0x30d4>
   19a14:	str	r5, [r4]
   19a18:	pop	{r4, r5, r6, r7, fp, pc}
   19a1c:	bl	19d50 <lchmod@@Base+0x3408>
   19a20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19a24:	add	fp, sp, #24
   19a28:	mov	r8, r1
   19a2c:	ldr	r1, [r1]
   19a30:	mov	r5, r0
   19a34:	add	r0, r1, r1, asr #1
   19a38:	cmp	r0, r1
   19a3c:	mvnvs	r0, #-2147483648	; 0x80000000
   19a40:	cmp	r0, r3
   19a44:	mov	r7, r0
   19a48:	movgt	r7, r3
   19a4c:	cmn	r3, #1
   19a50:	movle	r7, r0
   19a54:	ldr	r0, [fp, #8]
   19a58:	cmn	r0, #1
   19a5c:	ble	19a84 <lchmod@@Base+0x313c>
   19a60:	cmp	r0, #0
   19a64:	beq	19ad8 <lchmod@@Base+0x3190>
   19a68:	cmn	r7, #1
   19a6c:	ble	19aac <lchmod@@Base+0x3164>
   19a70:	mvn	r4, #-2147483648	; 0x80000000
   19a74:	udiv	r6, r4, r0
   19a78:	cmp	r6, r7
   19a7c:	bge	19ad8 <lchmod@@Base+0x3190>
   19a80:	b	19ae8 <lchmod@@Base+0x31a0>
   19a84:	cmn	r7, #1
   19a88:	ble	19ac8 <lchmod@@Base+0x3180>
   19a8c:	cmn	r0, #1
   19a90:	beq	19ad8 <lchmod@@Base+0x3190>
   19a94:	mov	r6, #-2147483648	; 0x80000000
   19a98:	mvn	r4, #-2147483648	; 0x80000000
   19a9c:	sdiv	r6, r6, r0
   19aa0:	cmp	r6, r7
   19aa4:	bge	19ad8 <lchmod@@Base+0x3190>
   19aa8:	b	19ae8 <lchmod@@Base+0x31a0>
   19aac:	beq	19ad8 <lchmod@@Base+0x3190>
   19ab0:	mov	r6, #-2147483648	; 0x80000000
   19ab4:	mvn	r4, #-2147483648	; 0x80000000
   19ab8:	sdiv	r6, r6, r7
   19abc:	cmp	r6, r0
   19ac0:	bge	19ad8 <lchmod@@Base+0x3190>
   19ac4:	b	19ae8 <lchmod@@Base+0x31a0>
   19ac8:	mvn	r4, #-2147483648	; 0x80000000
   19acc:	sdiv	r6, r4, r0
   19ad0:	cmp	r7, r6
   19ad4:	blt	19ae8 <lchmod@@Base+0x31a0>
   19ad8:	mul	r6, r7, r0
   19adc:	mov	r4, #64	; 0x40
   19ae0:	cmp	r6, #63	; 0x3f
   19ae4:	bgt	19af0 <lchmod@@Base+0x31a8>
   19ae8:	sdiv	r7, r4, r0
   19aec:	mul	r6, r7, r0
   19af0:	cmp	r5, #0
   19af4:	moveq	r4, #0
   19af8:	streq	r4, [r8]
   19afc:	sub	r4, r7, r1
   19b00:	cmp	r4, r2
   19b04:	bge	19bb0 <lchmod@@Base+0x3268>
   19b08:	add	r7, r1, r2
   19b0c:	mov	r6, #0
   19b10:	mov	r2, #0
   19b14:	cmp	r7, r3
   19b18:	movwgt	r6, #1
   19b1c:	cmn	r3, #1
   19b20:	movwgt	r2, #1
   19b24:	cmp	r7, r1
   19b28:	bvs	19be4 <lchmod@@Base+0x329c>
   19b2c:	ands	r1, r2, r6
   19b30:	bne	19be4 <lchmod@@Base+0x329c>
   19b34:	cmn	r0, #1
   19b38:	ble	19b60 <lchmod@@Base+0x3218>
   19b3c:	cmp	r0, #0
   19b40:	beq	19bac <lchmod@@Base+0x3264>
   19b44:	cmn	r7, #1
   19b48:	ble	19b84 <lchmod@@Base+0x323c>
   19b4c:	mvn	r1, #-2147483648	; 0x80000000
   19b50:	udiv	r1, r1, r0
   19b54:	cmp	r1, r7
   19b58:	bge	19bac <lchmod@@Base+0x3264>
   19b5c:	b	19be4 <lchmod@@Base+0x329c>
   19b60:	cmn	r7, #1
   19b64:	ble	19b9c <lchmod@@Base+0x3254>
   19b68:	cmn	r0, #1
   19b6c:	beq	19bac <lchmod@@Base+0x3264>
   19b70:	mov	r1, #-2147483648	; 0x80000000
   19b74:	sdiv	r1, r1, r0
   19b78:	cmp	r1, r7
   19b7c:	bge	19bac <lchmod@@Base+0x3264>
   19b80:	b	19be4 <lchmod@@Base+0x329c>
   19b84:	beq	19bac <lchmod@@Base+0x3264>
   19b88:	mov	r1, #-2147483648	; 0x80000000
   19b8c:	sdiv	r1, r1, r7
   19b90:	cmp	r1, r0
   19b94:	bge	19bac <lchmod@@Base+0x3264>
   19b98:	b	19be4 <lchmod@@Base+0x329c>
   19b9c:	mvn	r1, #-2147483648	; 0x80000000
   19ba0:	sdiv	r1, r1, r0
   19ba4:	cmp	r7, r1
   19ba8:	blt	19be4 <lchmod@@Base+0x329c>
   19bac:	mul	r6, r7, r0
   19bb0:	mov	r0, r5
   19bb4:	mov	r1, r6
   19bb8:	bl	19e94 <lchmod@@Base+0x354c>
   19bbc:	cmp	r6, #0
   19bc0:	movwne	r6, #1
   19bc4:	cmp	r0, #0
   19bc8:	bne	19bdc <lchmod@@Base+0x3294>
   19bcc:	clz	r1, r5
   19bd0:	lsr	r1, r1, #5
   19bd4:	orrs	r1, r1, r6
   19bd8:	bne	19be4 <lchmod@@Base+0x329c>
   19bdc:	str	r7, [r8]
   19be0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19be4:	bl	19d50 <lchmod@@Base+0x3408>
   19be8:	push	{fp, lr}
   19bec:	mov	fp, sp
   19bf0:	mov	r1, #1
   19bf4:	bl	19e10 <lchmod@@Base+0x34c8>
   19bf8:	cmp	r0, #0
   19bfc:	popne	{fp, pc}
   19c00:	bl	19d50 <lchmod@@Base+0x3408>
   19c04:	push	{fp, lr}
   19c08:	mov	fp, sp
   19c0c:	bl	19e10 <lchmod@@Base+0x34c8>
   19c10:	cmp	r0, #0
   19c14:	popne	{fp, pc}
   19c18:	bl	19d50 <lchmod@@Base+0x3408>
   19c1c:	push	{fp, lr}
   19c20:	mov	fp, sp
   19c24:	mov	r1, #1
   19c28:	bl	19e10 <lchmod@@Base+0x34c8>
   19c2c:	cmp	r0, #0
   19c30:	popne	{fp, pc}
   19c34:	bl	19d50 <lchmod@@Base+0x3408>
   19c38:	push	{fp, lr}
   19c3c:	mov	fp, sp
   19c40:	bl	19e10 <lchmod@@Base+0x34c8>
   19c44:	cmp	r0, #0
   19c48:	popne	{fp, pc}
   19c4c:	bl	19d50 <lchmod@@Base+0x3408>
   19c50:	push	{r4, r5, r6, sl, fp, lr}
   19c54:	add	fp, sp, #16
   19c58:	mov	r5, r0
   19c5c:	mov	r0, r1
   19c60:	mov	r4, r1
   19c64:	bl	19e64 <lchmod@@Base+0x351c>
   19c68:	cmp	r0, #0
   19c6c:	beq	19c88 <lchmod@@Base+0x3340>
   19c70:	mov	r1, r5
   19c74:	mov	r2, r4
   19c78:	mov	r6, r0
   19c7c:	bl	11730 <memcpy@plt>
   19c80:	mov	r0, r6
   19c84:	pop	{r4, r5, r6, sl, fp, pc}
   19c88:	bl	19d50 <lchmod@@Base+0x3408>
   19c8c:	push	{r4, r5, r6, sl, fp, lr}
   19c90:	add	fp, sp, #16
   19c94:	mov	r5, r0
   19c98:	mov	r0, r1
   19c9c:	mov	r4, r1
   19ca0:	bl	19e64 <lchmod@@Base+0x351c>
   19ca4:	cmp	r0, #0
   19ca8:	beq	19cc4 <lchmod@@Base+0x337c>
   19cac:	mov	r1, r5
   19cb0:	mov	r2, r4
   19cb4:	mov	r6, r0
   19cb8:	bl	11730 <memcpy@plt>
   19cbc:	mov	r0, r6
   19cc0:	pop	{r4, r5, r6, sl, fp, pc}
   19cc4:	bl	19d50 <lchmod@@Base+0x3408>
   19cc8:	push	{r4, r5, r6, sl, fp, lr}
   19ccc:	add	fp, sp, #16
   19cd0:	mov	r5, r0
   19cd4:	add	r0, r1, #1
   19cd8:	mov	r4, r1
   19cdc:	bl	19e64 <lchmod@@Base+0x351c>
   19ce0:	cmp	r0, #0
   19ce4:	beq	19d0c <lchmod@@Base+0x33c4>
   19ce8:	mov	r6, r0
   19cec:	mov	r0, #0
   19cf0:	mov	r1, r5
   19cf4:	mov	r2, r4
   19cf8:	strb	r0, [r6, r4]
   19cfc:	mov	r0, r6
   19d00:	bl	11730 <memcpy@plt>
   19d04:	mov	r0, r6
   19d08:	pop	{r4, r5, r6, sl, fp, pc}
   19d0c:	bl	19d50 <lchmod@@Base+0x3408>
   19d10:	push	{r4, r5, r6, sl, fp, lr}
   19d14:	add	fp, sp, #16
   19d18:	mov	r4, r0
   19d1c:	bl	118bc <strlen@plt>
   19d20:	add	r5, r0, #1
   19d24:	mov	r0, r5
   19d28:	bl	19e64 <lchmod@@Base+0x351c>
   19d2c:	cmp	r0, #0
   19d30:	beq	19d4c <lchmod@@Base+0x3404>
   19d34:	mov	r1, r4
   19d38:	mov	r2, r5
   19d3c:	mov	r6, r0
   19d40:	bl	11730 <memcpy@plt>
   19d44:	mov	r0, r6
   19d48:	pop	{r4, r5, r6, sl, fp, pc}
   19d4c:	bl	19d50 <lchmod@@Base+0x3408>
   19d50:	push	{fp, lr}
   19d54:	mov	fp, sp
   19d58:	movw	r0, #49532	; 0xc17c
   19d5c:	movw	r1, #45882	; 0xb33a
   19d60:	mov	r2, #5
   19d64:	movt	r0, #2
   19d68:	movt	r1, #1
   19d6c:	ldr	r4, [r0]
   19d70:	mov	r0, #0
   19d74:	bl	11760 <dcgettext@plt>
   19d78:	movw	r2, #44631	; 0xae57
   19d7c:	mov	r3, r0
   19d80:	mov	r0, r4
   19d84:	mov	r1, #0
   19d88:	movt	r2, #1
   19d8c:	bl	11820 <error@plt>
   19d90:	bl	11a3c <abort@plt>
   19d94:	push	{fp, lr}
   19d98:	mov	fp, sp
   19d9c:	orr	r1, r1, #512	; 0x200
   19da0:	bl	13170 <__assert_fail@plt+0x16d4>
   19da4:	cmp	r0, #0
   19da8:	popne	{fp, pc}
   19dac:	bl	118ec <__errno_location@plt>
   19db0:	ldr	r0, [r0]
   19db4:	cmp	r0, #22
   19db8:	bne	19ddc <lchmod@@Base+0x3494>
   19dbc:	movw	r0, #45899	; 0xb34b
   19dc0:	movw	r1, #45915	; 0xb35b
   19dc4:	movw	r3, #45926	; 0xb366
   19dc8:	mov	r2, #41	; 0x29
   19dcc:	movt	r0, #1
   19dd0:	movt	r1, #1
   19dd4:	movt	r3, #1
   19dd8:	bl	11a9c <__assert_fail@plt>
   19ddc:	bl	19d50 <lchmod@@Base+0x3408>
   19de0:	ldr	r0, [r0, #48]	; 0x30
   19de4:	and	r0, r0, #17
   19de8:	cmp	r0, #16
   19dec:	moveq	r0, #1
   19df0:	bxeq	lr
   19df4:	cmp	r0, #17
   19df8:	movne	r0, #0
   19dfc:	bxne	lr
   19e00:	ldr	r0, [r1, #48]	; 0x30
   19e04:	cmp	r0, #0
   19e08:	movwne	r0, #1
   19e0c:	bx	lr
   19e10:	clz	r2, r1
   19e14:	clz	r3, r0
   19e18:	lsr	r2, r2, #5
   19e1c:	lsr	r3, r3, #5
   19e20:	orrs	r2, r3, r2
   19e24:	movwne	r1, #1
   19e28:	movwne	r0, #1
   19e2c:	cmp	r1, #0
   19e30:	beq	19e60 <lchmod@@Base+0x3518>
   19e34:	mvn	r2, #-2147483648	; 0x80000000
   19e38:	udiv	r2, r2, r1
   19e3c:	cmp	r2, r0
   19e40:	bcs	19e60 <lchmod@@Base+0x3518>
   19e44:	push	{fp, lr}
   19e48:	mov	fp, sp
   19e4c:	bl	118ec <__errno_location@plt>
   19e50:	mov	r1, #12
   19e54:	str	r1, [r0]
   19e58:	mov	r0, #0
   19e5c:	pop	{fp, pc}
   19e60:	b	116a0 <calloc@plt>
   19e64:	cmp	r0, #0
   19e68:	movweq	r0, #1
   19e6c:	cmn	r0, #1
   19e70:	ble	19e78 <lchmod@@Base+0x3530>
   19e74:	b	11844 <malloc@plt>
   19e78:	push	{fp, lr}
   19e7c:	mov	fp, sp
   19e80:	bl	118ec <__errno_location@plt>
   19e84:	mov	r1, #12
   19e88:	str	r1, [r0]
   19e8c:	mov	r0, #0
   19e90:	pop	{fp, pc}
   19e94:	push	{fp, lr}
   19e98:	mov	fp, sp
   19e9c:	cmp	r0, #0
   19ea0:	beq	19ebc <lchmod@@Base+0x3574>
   19ea4:	cmp	r1, #0
   19ea8:	beq	19ec8 <lchmod@@Base+0x3580>
   19eac:	cmn	r1, #1
   19eb0:	ble	19ed4 <lchmod@@Base+0x358c>
   19eb4:	pop	{fp, lr}
   19eb8:	b	11778 <realloc@plt>
   19ebc:	mov	r0, r1
   19ec0:	pop	{fp, lr}
   19ec4:	b	19e64 <lchmod@@Base+0x351c>
   19ec8:	bl	13148 <__assert_fail@plt+0x16ac>
   19ecc:	mov	r0, #0
   19ed0:	pop	{fp, pc}
   19ed4:	bl	118ec <__errno_location@plt>
   19ed8:	mov	r1, #12
   19edc:	str	r1, [r0]
   19ee0:	mov	r0, #0
   19ee4:	pop	{fp, pc}
   19ee8:	sub	r0, r0, #1
   19eec:	ldrb	r3, [r0, #1]!
   19ef0:	cmp	r3, #47	; 0x2f
   19ef4:	beq	19eec <lchmod@@Base+0x35a4>
   19ef8:	mov	r2, #0
   19efc:	mov	r1, r0
   19f00:	b	19f1c <lchmod@@Base+0x35d4>
   19f04:	cmp	r3, #0
   19f08:	bxeq	lr
   19f0c:	tst	r2, #1
   19f10:	mov	r2, #0
   19f14:	movne	r0, r1
   19f18:	ldrb	r3, [r1, #1]!
   19f1c:	uxtb	r3, r3
   19f20:	cmp	r3, #47	; 0x2f
   19f24:	bne	19f04 <lchmod@@Base+0x35bc>
   19f28:	ldrb	r3, [r1, #1]!
   19f2c:	mov	r2, #1
   19f30:	b	19f1c <lchmod@@Base+0x35d4>
   19f34:	push	{r4, sl, fp, lr}
   19f38:	add	fp, sp, #8
   19f3c:	mov	r4, r0
   19f40:	bl	118bc <strlen@plt>
   19f44:	mov	r1, r0
   19f48:	sub	r2, r4, #1
   19f4c:	mov	r0, r1
   19f50:	cmp	r1, #2
   19f54:	popcc	{r4, sl, fp, pc}
   19f58:	ldrb	r3, [r2, r0]
   19f5c:	sub	r1, r0, #1
   19f60:	cmp	r3, #47	; 0x2f
   19f64:	beq	19f4c <lchmod@@Base+0x3604>
   19f68:	pop	{r4, sl, fp, pc}
   19f6c:	push	{r4, r5, r6, sl, fp, lr}
   19f70:	add	fp, sp, #16
   19f74:	mov	r4, r0
   19f78:	bl	11808 <__fpending@plt>
   19f7c:	ldr	r6, [r4]
   19f80:	mov	r5, r0
   19f84:	mov	r0, r4
   19f88:	bl	1a0e4 <lchmod@@Base+0x379c>
   19f8c:	tst	r6, #32
   19f90:	bne	19fc8 <lchmod@@Base+0x3680>
   19f94:	cmp	r0, #0
   19f98:	mov	r4, r0
   19f9c:	mvnne	r4, #0
   19fa0:	cmp	r5, #0
   19fa4:	bne	19fd4 <lchmod@@Base+0x368c>
   19fa8:	cmp	r0, #0
   19fac:	beq	19fd4 <lchmod@@Base+0x368c>
   19fb0:	bl	118ec <__errno_location@plt>
   19fb4:	ldr	r0, [r0]
   19fb8:	subs	r4, r0, #9
   19fbc:	mvnne	r4, #0
   19fc0:	mov	r0, r4
   19fc4:	pop	{r4, r5, r6, sl, fp, pc}
   19fc8:	mvn	r4, #0
   19fcc:	cmp	r0, #0
   19fd0:	beq	19fdc <lchmod@@Base+0x3694>
   19fd4:	mov	r0, r4
   19fd8:	pop	{r4, r5, r6, sl, fp, pc}
   19fdc:	bl	118ec <__errno_location@plt>
   19fe0:	mov	r1, #0
   19fe4:	str	r1, [r0]
   19fe8:	mov	r0, r4
   19fec:	pop	{r4, r5, r6, sl, fp, pc}
   19ff0:	movw	r2, #62998	; 0xf616
   19ff4:	mov	r1, #0
   19ff8:	movt	r2, #149	; 0x95
   19ffc:	str	r1, [r0, #16]
   1a000:	str	r1, [r0, #20]
   1a004:	str	r2, [r0, #24]
   1a008:	bx	lr
   1a00c:	push	{r4, r5, r6, r7, fp, lr}
   1a010:	add	fp, sp, #16
   1a014:	ldr	r2, [r0, #24]
   1a018:	movw	r3, #62998	; 0xf616
   1a01c:	movt	r3, #149	; 0x95
   1a020:	cmp	r2, r3
   1a024:	bne	1a0c4 <lchmod@@Base+0x377c>
   1a028:	mov	r3, r0
   1a02c:	ldr	r2, [r3, #16]!
   1a030:	ldr	lr, [r3, #4]
   1a034:	orrs	r5, r2, lr
   1a038:	beq	1a070 <lchmod@@Base+0x3728>
   1a03c:	ldrd	r4, [r0]
   1a040:	ldrd	r6, [r1, #96]	; 0x60
   1a044:	eor	r7, r7, r5
   1a048:	eor	r6, r6, r4
   1a04c:	orrs	r7, r6, r7
   1a050:	bne	1a070 <lchmod@@Base+0x3728>
   1a054:	ldrd	r4, [r0, #8]
   1a058:	ldrd	r6, [r1]
   1a05c:	mov	ip, #1
   1a060:	eor	r7, r7, r5
   1a064:	eor	r6, r6, r4
   1a068:	orrs	r7, r6, r7
   1a06c:	beq	1a090 <lchmod@@Base+0x3748>
   1a070:	adds	r4, r2, #1
   1a074:	mov	ip, #0
   1a078:	adc	r5, lr, #0
   1a07c:	and	r2, r4, r2
   1a080:	strd	r4, [r3]
   1a084:	and	r3, r5, lr
   1a088:	orrs	r2, r2, r3
   1a08c:	beq	1a098 <lchmod@@Base+0x3750>
   1a090:	mov	r0, ip
   1a094:	pop	{r4, r5, r6, r7, fp, pc}
   1a098:	orrs	r2, r4, r5
   1a09c:	moveq	ip, #1
   1a0a0:	moveq	r0, ip
   1a0a4:	popeq	{r4, r5, r6, r7, fp, pc}
   1a0a8:	ldrd	r2, [r1]
   1a0ac:	str	r3, [r0, #12]
   1a0b0:	str	r2, [r0, #8]
   1a0b4:	ldrd	r2, [r1, #96]	; 0x60
   1a0b8:	stm	r0, {r2, r3}
   1a0bc:	mov	r0, ip
   1a0c0:	pop	{r4, r5, r6, r7, fp, pc}
   1a0c4:	movw	r0, #46004	; 0xb3b4
   1a0c8:	movw	r1, #46028	; 0xb3cc
   1a0cc:	movw	r3, #46046	; 0xb3de
   1a0d0:	mov	r2, #60	; 0x3c
   1a0d4:	movt	r0, #1
   1a0d8:	movt	r1, #1
   1a0dc:	movt	r3, #1
   1a0e0:	bl	11a9c <__assert_fail@plt>
   1a0e4:	push	{r4, r5, r6, sl, fp, lr}
   1a0e8:	add	fp, sp, #16
   1a0ec:	sub	sp, sp, #8
   1a0f0:	mov	r4, r0
   1a0f4:	bl	11928 <fileno@plt>
   1a0f8:	cmn	r0, #1
   1a0fc:	ble	1a170 <lchmod@@Base+0x3828>
   1a100:	mov	r0, r4
   1a104:	bl	1185c <__freading@plt>
   1a108:	cmp	r0, #0
   1a10c:	beq	1a138 <lchmod@@Base+0x37f0>
   1a110:	mov	r0, r4
   1a114:	bl	11928 <fileno@plt>
   1a118:	mov	r1, #1
   1a11c:	mov	r2, #0
   1a120:	mov	r3, #0
   1a124:	str	r1, [sp]
   1a128:	bl	117e4 <lseek64@plt>
   1a12c:	and	r0, r0, r1
   1a130:	cmn	r0, #1
   1a134:	beq	1a170 <lchmod@@Base+0x3828>
   1a138:	mov	r0, r4
   1a13c:	bl	1a3a8 <lchmod@@Base+0x3a60>
   1a140:	cmp	r0, #0
   1a144:	beq	1a170 <lchmod@@Base+0x3828>
   1a148:	bl	118ec <__errno_location@plt>
   1a14c:	ldr	r6, [r0]
   1a150:	mov	r5, r0
   1a154:	mov	r0, r4
   1a158:	bl	11940 <fclose@plt>
   1a15c:	cmp	r6, #0
   1a160:	strne	r6, [r5]
   1a164:	mvnne	r0, #0
   1a168:	sub	sp, fp, #16
   1a16c:	pop	{r4, r5, r6, sl, fp, pc}
   1a170:	mov	r0, r4
   1a174:	sub	sp, fp, #16
   1a178:	pop	{r4, r5, r6, sl, fp, lr}
   1a17c:	b	11940 <fclose@plt>
   1a180:	sub	sp, sp, #8
   1a184:	push	{r4, r5, r6, r7, fp, lr}
   1a188:	add	fp, sp, #16
   1a18c:	sub	sp, sp, #8
   1a190:	mov	r5, r0
   1a194:	add	r0, fp, #8
   1a198:	cmp	r1, #11
   1a19c:	str	r3, [fp, #12]
   1a1a0:	str	r2, [fp, #8]
   1a1a4:	str	r0, [sp, #4]
   1a1a8:	bhi	1a1e4 <lchmod@@Base+0x389c>
   1a1ac:	mov	r0, #1
   1a1b0:	movw	r2, #1300	; 0x514
   1a1b4:	tst	r2, r0, lsl r1
   1a1b8:	bne	1a2a4 <lchmod@@Base+0x395c>
   1a1bc:	movw	r2, #2570	; 0xa0a
   1a1c0:	tst	r2, r0, lsl r1
   1a1c4:	bne	1a20c <lchmod@@Base+0x38c4>
   1a1c8:	cmp	r1, #0
   1a1cc:	bne	1a1e4 <lchmod@@Base+0x389c>
   1a1d0:	ldr	r0, [sp, #4]
   1a1d4:	add	r1, r0, #4
   1a1d8:	str	r1, [sp, #4]
   1a1dc:	mov	r1, #0
   1a1e0:	b	1a2b0 <lchmod@@Base+0x3968>
   1a1e4:	sub	r0, r1, #1024	; 0x400
   1a1e8:	cmp	r0, #10
   1a1ec:	bhi	1a2a4 <lchmod@@Base+0x395c>
   1a1f0:	mov	r2, #1
   1a1f4:	movw	r3, #645	; 0x285
   1a1f8:	tst	r3, r2, lsl r0
   1a1fc:	bne	1a2a4 <lchmod@@Base+0x395c>
   1a200:	movw	r3, #1282	; 0x502
   1a204:	tst	r3, r2, lsl r0
   1a208:	beq	1a218 <lchmod@@Base+0x38d0>
   1a20c:	mov	r0, r5
   1a210:	bl	11958 <fcntl64@plt>
   1a214:	b	1a2bc <lchmod@@Base+0x3974>
   1a218:	cmp	r0, #6
   1a21c:	bne	1a2a4 <lchmod@@Base+0x395c>
   1a220:	ldr	r0, [sp, #4]
   1a224:	movw	r7, #49952	; 0xc320
   1a228:	movt	r7, #2
   1a22c:	add	r1, r0, #4
   1a230:	str	r1, [sp, #4]
   1a234:	ldr	r6, [r0]
   1a238:	ldr	r0, [r7]
   1a23c:	cmp	r0, #0
   1a240:	blt	1a2e0 <lchmod@@Base+0x3998>
   1a244:	mov	r0, r5
   1a248:	movw	r1, #1030	; 0x406
   1a24c:	mov	r2, r6
   1a250:	bl	11958 <fcntl64@plt>
   1a254:	mov	r4, r0
   1a258:	cmn	r0, #1
   1a25c:	bgt	1a2d4 <lchmod@@Base+0x398c>
   1a260:	bl	118ec <__errno_location@plt>
   1a264:	ldr	r0, [r0]
   1a268:	cmp	r0, #22
   1a26c:	bne	1a2d4 <lchmod@@Base+0x398c>
   1a270:	mov	r0, r5
   1a274:	mov	r1, #0
   1a278:	mov	r2, r6
   1a27c:	bl	11958 <fcntl64@plt>
   1a280:	mov	r4, r0
   1a284:	cmp	r0, #0
   1a288:	blt	1a2c0 <lchmod@@Base+0x3978>
   1a28c:	mvn	r0, #0
   1a290:	str	r0, [r7]
   1a294:	mov	r0, #1
   1a298:	cmp	r0, #0
   1a29c:	bne	1a30c <lchmod@@Base+0x39c4>
   1a2a0:	b	1a2c0 <lchmod@@Base+0x3978>
   1a2a4:	ldr	r0, [sp, #4]
   1a2a8:	add	r2, r0, #4
   1a2ac:	str	r2, [sp, #4]
   1a2b0:	ldr	r2, [r0]
   1a2b4:	mov	r0, r5
   1a2b8:	bl	11958 <fcntl64@plt>
   1a2bc:	mov	r4, r0
   1a2c0:	mov	r0, r4
   1a2c4:	sub	sp, fp, #16
   1a2c8:	pop	{r4, r5, r6, r7, fp, lr}
   1a2cc:	add	sp, sp, #8
   1a2d0:	bx	lr
   1a2d4:	mov	r0, #1
   1a2d8:	str	r0, [r7]
   1a2dc:	b	1a2c0 <lchmod@@Base+0x3978>
   1a2e0:	mov	r0, r5
   1a2e4:	mov	r1, #0
   1a2e8:	mov	r2, r6
   1a2ec:	bl	11958 <fcntl64@plt>
   1a2f0:	mov	r4, r0
   1a2f4:	ldr	r0, [r7]
   1a2f8:	add	r0, r0, #1
   1a2fc:	clz	r0, r0
   1a300:	lsr	r0, r0, #5
   1a304:	cmp	r0, #0
   1a308:	beq	1a2c0 <lchmod@@Base+0x3978>
   1a30c:	cmp	r4, #0
   1a310:	blt	1a2c0 <lchmod@@Base+0x3978>
   1a314:	mov	r0, r4
   1a318:	mov	r1, #1
   1a31c:	bl	11958 <fcntl64@plt>
   1a320:	cmp	r0, #0
   1a324:	blt	1a340 <lchmod@@Base+0x39f8>
   1a328:	orr	r2, r0, #1
   1a32c:	mov	r0, r4
   1a330:	mov	r1, #2
   1a334:	bl	11958 <fcntl64@plt>
   1a338:	cmn	r0, #1
   1a33c:	bne	1a2c0 <lchmod@@Base+0x3978>
   1a340:	bl	118ec <__errno_location@plt>
   1a344:	ldr	r6, [r0]
   1a348:	mov	r5, r0
   1a34c:	mov	r0, r4
   1a350:	bl	11a48 <close@plt>
   1a354:	str	r6, [r5]
   1a358:	mvn	r4, #0
   1a35c:	b	1a2c0 <lchmod@@Base+0x3978>
   1a360:	sub	sp, sp, #8
   1a364:	push	{fp, lr}
   1a368:	mov	fp, sp
   1a36c:	sub	sp, sp, #8
   1a370:	str	r2, [fp, #8]
   1a374:	mov	r2, #0
   1a378:	tst	r1, #64	; 0x40
   1a37c:	str	r3, [fp, #12]
   1a380:	addne	r2, fp, #8
   1a384:	orrne	r2, r2, #4
   1a388:	strne	r2, [sp, #4]
   1a38c:	ldrne	r2, [fp, #8]
   1a390:	bl	1182c <open64@plt>
   1a394:	bl	190f4 <lchmod@@Base+0x27ac>
   1a398:	mov	sp, fp
   1a39c:	pop	{fp, lr}
   1a3a0:	add	sp, sp, #8
   1a3a4:	bx	lr
   1a3a8:	push	{r4, sl, fp, lr}
   1a3ac:	add	fp, sp, #8
   1a3b0:	sub	sp, sp, #8
   1a3b4:	mov	r4, r0
   1a3b8:	cmp	r0, #0
   1a3bc:	beq	1a3d8 <lchmod@@Base+0x3a90>
   1a3c0:	mov	r0, r4
   1a3c4:	bl	1185c <__freading@plt>
   1a3c8:	cmp	r0, #0
   1a3cc:	ldrbne	r0, [r4, #1]
   1a3d0:	tstne	r0, #1
   1a3d4:	bne	1a3e8 <lchmod@@Base+0x3aa0>
   1a3d8:	mov	r0, r4
   1a3dc:	sub	sp, fp, #8
   1a3e0:	pop	{r4, sl, fp, lr}
   1a3e4:	b	116e8 <fflush@plt>
   1a3e8:	mov	r0, #1
   1a3ec:	mov	r2, #0
   1a3f0:	mov	r3, #0
   1a3f4:	str	r0, [sp]
   1a3f8:	mov	r0, r4
   1a3fc:	bl	1a404 <lchmod@@Base+0x3abc>
   1a400:	b	1a3d8 <lchmod@@Base+0x3a90>
   1a404:	push	{r4, r5, r6, r7, fp, lr}
   1a408:	add	fp, sp, #16
   1a40c:	sub	sp, sp, #8
   1a410:	mov	r4, r0
   1a414:	ldr	r0, [r0, #4]
   1a418:	mov	r5, r3
   1a41c:	mov	r6, r2
   1a420:	ldr	r1, [r4, #8]
   1a424:	cmp	r1, r0
   1a428:	bne	1a444 <lchmod@@Base+0x3afc>
   1a42c:	ldrd	r0, [r4, #16]
   1a430:	cmp	r1, r0
   1a434:	bne	1a444 <lchmod@@Base+0x3afc>
   1a438:	ldr	r0, [r4, #36]	; 0x24
   1a43c:	cmp	r0, #0
   1a440:	beq	1a45c <lchmod@@Base+0x3b14>
   1a444:	mov	r0, r4
   1a448:	mov	r2, r6
   1a44c:	mov	r3, r5
   1a450:	sub	sp, fp, #16
   1a454:	pop	{r4, r5, r6, r7, fp, lr}
   1a458:	b	1194c <fseeko64@plt>
   1a45c:	ldr	r7, [fp, #8]
   1a460:	mov	r0, r4
   1a464:	bl	11928 <fileno@plt>
   1a468:	mov	r2, r6
   1a46c:	mov	r3, r5
   1a470:	str	r7, [sp]
   1a474:	bl	117e4 <lseek64@plt>
   1a478:	and	r2, r0, r1
   1a47c:	cmn	r2, #1
   1a480:	mvneq	r0, #0
   1a484:	subeq	sp, fp, #16
   1a488:	popeq	{r4, r5, r6, r7, fp, pc}
   1a48c:	strd	r0, [r4, #80]	; 0x50
   1a490:	ldr	r0, [r4]
   1a494:	bic	r0, r0, #16
   1a498:	str	r0, [r4]
   1a49c:	mov	r0, #0
   1a4a0:	sub	sp, fp, #16
   1a4a4:	pop	{r4, r5, r6, r7, fp, pc}
   1a4a8:	ldrb	r2, [r0]
   1a4ac:	cmp	r2, #0
   1a4b0:	beq	1a4d4 <lchmod@@Base+0x3b8c>
   1a4b4:	add	r3, r0, #1
   1a4b8:	mov	r0, #0
   1a4bc:	ror	r0, r0, #23
   1a4c0:	uxtab	r0, r0, r2
   1a4c4:	ldrb	r2, [r3], #1
   1a4c8:	cmp	r2, #0
   1a4cc:	bne	1a4bc <lchmod@@Base+0x3b74>
   1a4d0:	b	1a4d8 <lchmod@@Base+0x3b90>
   1a4d4:	mov	r0, #0
   1a4d8:	udiv	r2, r0, r1
   1a4dc:	mls	r0, r2, r1, r0
   1a4e0:	bx	lr
   1a4e4:	push	{fp, lr}
   1a4e8:	mov	fp, sp
   1a4ec:	mov	r0, #14
   1a4f0:	bl	11988 <nl_langinfo@plt>
   1a4f4:	movw	r1, #44444	; 0xad9c
   1a4f8:	cmp	r0, #0
   1a4fc:	movt	r1, #1
   1a500:	movne	r1, r0
   1a504:	movw	r0, #46113	; 0xb421
   1a508:	ldrb	r2, [r1]
   1a50c:	movt	r0, #1
   1a510:	cmp	r2, #0
   1a514:	movne	r0, r1
   1a518:	pop	{fp, pc}
   1a51c:	push	{r4, r5, r6, r7, fp, lr}
   1a520:	add	fp, sp, #16
   1a524:	sub	sp, sp, #8
   1a528:	add	r5, sp, #4
   1a52c:	cmp	r0, #0
   1a530:	mov	r7, r2
   1a534:	mov	r4, r1
   1a538:	movne	r5, r0
   1a53c:	mov	r0, r5
   1a540:	bl	11814 <mbrtowc@plt>
   1a544:	mov	r6, r0
   1a548:	cmp	r7, #0
   1a54c:	beq	1a570 <lchmod@@Base+0x3c28>
   1a550:	cmn	r6, #2
   1a554:	bcc	1a570 <lchmod@@Base+0x3c28>
   1a558:	mov	r0, #0
   1a55c:	bl	1a5c4 <lchmod@@Base+0x3c7c>
   1a560:	cmp	r0, #0
   1a564:	ldrbeq	r0, [r4]
   1a568:	moveq	r6, #1
   1a56c:	streq	r0, [r5]
   1a570:	mov	r0, r6
   1a574:	sub	sp, fp, #16
   1a578:	pop	{r4, r5, r6, r7, fp, pc}
   1a57c:	cmp	r2, #0
   1a580:	beq	1a5b0 <lchmod@@Base+0x3c68>
   1a584:	mvn	r3, #0
   1a588:	udiv	r3, r3, r2
   1a58c:	cmp	r3, r1
   1a590:	bcs	1a5b0 <lchmod@@Base+0x3c68>
   1a594:	push	{fp, lr}
   1a598:	mov	fp, sp
   1a59c:	bl	118ec <__errno_location@plt>
   1a5a0:	mov	r1, #12
   1a5a4:	str	r1, [r0]
   1a5a8:	mov	r0, #0
   1a5ac:	pop	{fp, pc}
   1a5b0:	mul	r1, r2, r1
   1a5b4:	b	19e94 <lchmod@@Base+0x354c>
   1a5b8:	mov	r1, #0
   1a5bc:	mov	r2, #3
   1a5c0:	b	1a180 <lchmod@@Base+0x3838>
   1a5c4:	push	{r4, sl, fp, lr}
   1a5c8:	add	fp, sp, #8
   1a5cc:	sub	sp, sp, #264	; 0x108
   1a5d0:	add	r1, sp, #7
   1a5d4:	movw	r2, #257	; 0x101
   1a5d8:	bl	1a628 <lchmod@@Base+0x3ce0>
   1a5dc:	mov	r4, #0
   1a5e0:	cmp	r0, #0
   1a5e4:	bne	1a61c <lchmod@@Base+0x3cd4>
   1a5e8:	movw	r1, #46119	; 0xb427
   1a5ec:	add	r0, sp, #7
   1a5f0:	movt	r1, #1
   1a5f4:	bl	116d0 <strcmp@plt>
   1a5f8:	cmp	r0, #0
   1a5fc:	beq	1a61c <lchmod@@Base+0x3cd4>
   1a600:	movw	r1, #46121	; 0xb429
   1a604:	add	r0, sp, #7
   1a608:	movt	r1, #1
   1a60c:	bl	116d0 <strcmp@plt>
   1a610:	mov	r4, r0
   1a614:	cmp	r0, #0
   1a618:	movwne	r4, #1
   1a61c:	mov	r0, r4
   1a620:	sub	sp, fp, #8
   1a624:	pop	{r4, sl, fp, pc}
   1a628:	push	{r4, r5, r6, r7, fp, lr}
   1a62c:	add	fp, sp, #16
   1a630:	mov	r4, r1
   1a634:	mov	r1, #0
   1a638:	mov	r6, r2
   1a63c:	bl	11964 <setlocale@plt>
   1a640:	cmp	r0, #0
   1a644:	beq	1a674 <lchmod@@Base+0x3d2c>
   1a648:	mov	r7, r0
   1a64c:	bl	118bc <strlen@plt>
   1a650:	cmp	r0, r6
   1a654:	bcs	1a694 <lchmod@@Base+0x3d4c>
   1a658:	add	r2, r0, #1
   1a65c:	mov	r0, r4
   1a660:	mov	r1, r7
   1a664:	bl	11730 <memcpy@plt>
   1a668:	mov	r5, #0
   1a66c:	mov	r0, r5
   1a670:	pop	{r4, r5, r6, r7, fp, pc}
   1a674:	cmp	r6, #0
   1a678:	mov	r5, #22
   1a67c:	movne	r0, #0
   1a680:	strbne	r0, [r4]
   1a684:	movne	r0, r5
   1a688:	popne	{r4, r5, r6, r7, fp, pc}
   1a68c:	mov	r0, r5
   1a690:	pop	{r4, r5, r6, r7, fp, pc}
   1a694:	mov	r5, #34	; 0x22
   1a698:	cmp	r6, #0
   1a69c:	beq	1a6bc <lchmod@@Base+0x3d74>
   1a6a0:	sub	r6, r6, #1
   1a6a4:	mov	r0, r4
   1a6a8:	mov	r1, r7
   1a6ac:	mov	r2, r6
   1a6b0:	bl	11730 <memcpy@plt>
   1a6b4:	mov	r0, #0
   1a6b8:	strb	r0, [r4, r6]
   1a6bc:	mov	r0, r5
   1a6c0:	pop	{r4, r5, r6, r7, fp, pc}
   1a6c4:	mov	r1, #0
   1a6c8:	b	11964 <setlocale@plt>
   1a6cc:	cmp	r3, #0
   1a6d0:	cmpeq	r2, #0
   1a6d4:	bne	1a6ec <lchmod@@Base+0x3da4>
   1a6d8:	cmp	r1, #0
   1a6dc:	cmpeq	r0, #0
   1a6e0:	mvnne	r1, #0
   1a6e4:	mvnne	r0, #0
   1a6e8:	b	1a708 <lchmod@@Base+0x3dc0>
   1a6ec:	sub	sp, sp, #8
   1a6f0:	push	{sp, lr}
   1a6f4:	bl	1a718 <lchmod@@Base+0x3dd0>
   1a6f8:	ldr	lr, [sp, #4]
   1a6fc:	add	sp, sp, #8
   1a700:	pop	{r2, r3}
   1a704:	bx	lr
   1a708:	push	{r1, lr}
   1a70c:	mov	r0, #8
   1a710:	bl	116b8 <raise@plt>
   1a714:	pop	{r1, pc}
   1a718:	cmp	r1, r3
   1a71c:	cmpeq	r0, r2
   1a720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a724:	mov	r4, r0
   1a728:	movcc	r0, #0
   1a72c:	mov	r5, r1
   1a730:	ldr	lr, [sp, #36]	; 0x24
   1a734:	movcc	r1, r0
   1a738:	bcc	1a834 <lchmod@@Base+0x3eec>
   1a73c:	cmp	r3, #0
   1a740:	clzeq	ip, r2
   1a744:	clzne	ip, r3
   1a748:	addeq	ip, ip, #32
   1a74c:	cmp	r5, #0
   1a750:	clzeq	r1, r4
   1a754:	addeq	r1, r1, #32
   1a758:	clzne	r1, r5
   1a75c:	sub	ip, ip, r1
   1a760:	sub	sl, ip, #32
   1a764:	lsl	r9, r3, ip
   1a768:	rsb	fp, ip, #32
   1a76c:	orr	r9, r9, r2, lsl sl
   1a770:	orr	r9, r9, r2, lsr fp
   1a774:	lsl	r8, r2, ip
   1a778:	cmp	r5, r9
   1a77c:	cmpeq	r4, r8
   1a780:	movcc	r0, #0
   1a784:	movcc	r1, r0
   1a788:	bcc	1a7a4 <lchmod@@Base+0x3e5c>
   1a78c:	mov	r0, #1
   1a790:	subs	r4, r4, r8
   1a794:	lsl	r1, r0, sl
   1a798:	orr	r1, r1, r0, lsr fp
   1a79c:	lsl	r0, r0, ip
   1a7a0:	sbc	r5, r5, r9
   1a7a4:	cmp	ip, #0
   1a7a8:	beq	1a834 <lchmod@@Base+0x3eec>
   1a7ac:	lsr	r6, r8, #1
   1a7b0:	orr	r6, r6, r9, lsl #31
   1a7b4:	lsr	r7, r9, #1
   1a7b8:	mov	r2, ip
   1a7bc:	b	1a7e0 <lchmod@@Base+0x3e98>
   1a7c0:	subs	r3, r4, r6
   1a7c4:	sbc	r8, r5, r7
   1a7c8:	adds	r3, r3, r3
   1a7cc:	adc	r8, r8, r8
   1a7d0:	adds	r4, r3, #1
   1a7d4:	adc	r5, r8, #0
   1a7d8:	subs	r2, r2, #1
   1a7dc:	beq	1a7fc <lchmod@@Base+0x3eb4>
   1a7e0:	cmp	r5, r7
   1a7e4:	cmpeq	r4, r6
   1a7e8:	bcs	1a7c0 <lchmod@@Base+0x3e78>
   1a7ec:	adds	r4, r4, r4
   1a7f0:	adc	r5, r5, r5
   1a7f4:	subs	r2, r2, #1
   1a7f8:	bne	1a7e0 <lchmod@@Base+0x3e98>
   1a7fc:	lsr	r3, r4, ip
   1a800:	orr	r3, r3, r5, lsl fp
   1a804:	lsr	r2, r5, ip
   1a808:	orr	r3, r3, r5, lsr sl
   1a80c:	adds	r0, r0, r4
   1a810:	mov	r4, r3
   1a814:	lsl	r3, r2, ip
   1a818:	orr	r3, r3, r4, lsl sl
   1a81c:	lsl	ip, r4, ip
   1a820:	orr	r3, r3, r4, lsr fp
   1a824:	adc	r1, r1, r5
   1a828:	subs	r0, r0, ip
   1a82c:	mov	r5, r2
   1a830:	sbc	r1, r1, r3
   1a834:	cmp	lr, #0
   1a838:	strdne	r4, [lr]
   1a83c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a840:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a844:	mov	r7, r0
   1a848:	ldr	r6, [pc, #72]	; 1a898 <lchmod@@Base+0x3f50>
   1a84c:	ldr	r5, [pc, #72]	; 1a89c <lchmod@@Base+0x3f54>
   1a850:	add	r6, pc, r6
   1a854:	add	r5, pc, r5
   1a858:	sub	r6, r6, r5
   1a85c:	mov	r8, r1
   1a860:	mov	r9, r2
   1a864:	bl	11668 <fstatfs64@plt-0x20>
   1a868:	asrs	r6, r6, #2
   1a86c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a870:	mov	r4, #0
   1a874:	add	r4, r4, #1
   1a878:	ldr	r3, [r5], #4
   1a87c:	mov	r2, r9
   1a880:	mov	r1, r8
   1a884:	mov	r0, r7
   1a888:	blx	r3
   1a88c:	cmp	r6, r4
   1a890:	bne	1a874 <lchmod@@Base+0x3f2c>
   1a894:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a898:	andeq	r1, r1, ip, lsr #13
   1a89c:	andeq	r1, r1, r4, lsr #13
   1a8a0:	bx	lr
   1a8a4:	ldr	r3, [pc, #12]	; 1a8b8 <lchmod@@Base+0x3f70>
   1a8a8:	mov	r1, #0
   1a8ac:	add	r3, pc, r3
   1a8b0:	ldr	r2, [r3]
   1a8b4:	b	11904 <__cxa_atexit@plt>
   1a8b8:	andeq	r1, r1, r0, asr #17

Disassembly of section .fini:

0001a8bc <.fini>:
   1a8bc:	push	{r3, lr}
   1a8c0:	pop	{r3, pc}
