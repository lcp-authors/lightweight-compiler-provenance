
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010bf0 <.init>:
   10bf0:	push	{r3, lr}
   10bf4:	bl	11250 <__assert_fail@plt+0x3f4>
   10bf8:	pop	{r3, pc}

Disassembly of section .plt:

00010bfc <calloc@plt-0x14>:
   10bfc:	push	{lr}		; (str lr, [sp, #-4]!)
   10c00:	ldr	lr, [pc, #4]	; 10c0c <calloc@plt-0x4>
   10c04:	add	lr, pc, lr
   10c08:	ldr	pc, [lr, #8]!
   10c0c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>

00010c10 <calloc@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #20, 20	; 0x14000
   10c18:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c1c <fputs_unlocked@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #20, 20	; 0x14000
   10c24:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c28 <raise@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #20, 20	; 0x14000
   10c30:	ldr	pc, [ip, #996]!	; 0x3e4

00010c34 <strcmp@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #20, 20	; 0x14000
   10c3c:	ldr	pc, [ip, #988]!	; 0x3dc

00010c40 <strtol@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #20, 20	; 0x14000
   10c48:	ldr	pc, [ip, #980]!	; 0x3d4

00010c4c <fflush@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #20, 20	; 0x14000
   10c54:	ldr	pc, [ip, #972]!	; 0x3cc

00010c58 <free@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #20, 20	; 0x14000
   10c60:	ldr	pc, [ip, #964]!	; 0x3c4

00010c64 <_exit@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #20, 20	; 0x14000
   10c6c:	ldr	pc, [ip, #956]!	; 0x3bc

00010c70 <memcpy@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #20, 20	; 0x14000
   10c78:	ldr	pc, [ip, #948]!	; 0x3b4

00010c7c <execvp@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #20, 20	; 0x14000
   10c84:	ldr	pc, [ip, #940]!	; 0x3ac

00010c88 <mbsinit@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #20, 20	; 0x14000
   10c90:	ldr	pc, [ip, #932]!	; 0x3a4

00010c94 <memcmp@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #20, 20	; 0x14000
   10c9c:	ldr	pc, [ip, #924]!	; 0x39c

00010ca0 <fputc_unlocked@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #20, 20	; 0x14000
   10ca8:	ldr	pc, [ip, #916]!	; 0x394

00010cac <dcgettext@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #20, 20	; 0x14000
   10cb4:	ldr	pc, [ip, #908]!	; 0x38c

00010cb8 <realloc@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #20, 20	; 0x14000
   10cc0:	ldr	pc, [ip, #900]!	; 0x384

00010cc4 <getpriority@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #20, 20	; 0x14000
   10ccc:	ldr	pc, [ip, #892]!	; 0x37c

00010cd0 <textdomain@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #20, 20	; 0x14000
   10cd8:	ldr	pc, [ip, #884]!	; 0x374

00010cdc <iswprint@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #20, 20	; 0x14000
   10ce4:	ldr	pc, [ip, #876]!	; 0x36c

00010ce8 <lseek64@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #20, 20	; 0x14000
   10cf0:	ldr	pc, [ip, #868]!	; 0x364

00010cf4 <__ctype_get_mb_cur_max@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #20, 20	; 0x14000
   10cfc:	ldr	pc, [ip, #860]!	; 0x35c

00010d00 <__fpending@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #20, 20	; 0x14000
   10d08:	ldr	pc, [ip, #852]!	; 0x354

00010d0c <ferror_unlocked@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #20, 20	; 0x14000
   10d14:	ldr	pc, [ip, #844]!	; 0x34c

00010d18 <mbrtowc@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #20, 20	; 0x14000
   10d20:	ldr	pc, [ip, #836]!	; 0x344

00010d24 <error@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #20, 20	; 0x14000
   10d2c:	ldr	pc, [ip, #828]!	; 0x33c

00010d30 <setpriority@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #20, 20	; 0x14000
   10d38:	ldr	pc, [ip, #820]!	; 0x334

00010d3c <malloc@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #20, 20	; 0x14000
   10d44:	ldr	pc, [ip, #812]!	; 0x32c

00010d48 <__libc_start_main@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #20, 20	; 0x14000
   10d50:	ldr	pc, [ip, #804]!	; 0x324

00010d54 <__freading@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #20, 20	; 0x14000
   10d5c:	ldr	pc, [ip, #796]!	; 0x31c

00010d60 <__gmon_start__@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #20, 20	; 0x14000
   10d68:	ldr	pc, [ip, #788]!	; 0x314

00010d6c <getopt_long@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #20, 20	; 0x14000
   10d74:	ldr	pc, [ip, #780]!	; 0x30c

00010d78 <__ctype_b_loc@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #20, 20	; 0x14000
   10d80:	ldr	pc, [ip, #772]!	; 0x304

00010d84 <exit@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #20, 20	; 0x14000
   10d8c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d90 <strlen@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #20, 20	; 0x14000
   10d98:	ldr	pc, [ip, #756]!	; 0x2f4

00010d9c <strchr@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #20, 20	; 0x14000
   10da4:	ldr	pc, [ip, #748]!	; 0x2ec

00010da8 <__errno_location@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #20, 20	; 0x14000
   10db0:	ldr	pc, [ip, #740]!	; 0x2e4

00010db4 <__cxa_atexit@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #20, 20	; 0x14000
   10dbc:	ldr	pc, [ip, #732]!	; 0x2dc

00010dc0 <memset@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #20, 20	; 0x14000
   10dc8:	ldr	pc, [ip, #724]!	; 0x2d4

00010dcc <__printf_chk@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #20, 20	; 0x14000
   10dd4:	ldr	pc, [ip, #716]!	; 0x2cc

00010dd8 <fileno@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #20, 20	; 0x14000
   10de0:	ldr	pc, [ip, #708]!	; 0x2c4

00010de4 <__fprintf_chk@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #20, 20	; 0x14000
   10dec:	ldr	pc, [ip, #700]!	; 0x2bc

00010df0 <fclose@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #20, 20	; 0x14000
   10df8:	ldr	pc, [ip, #692]!	; 0x2b4

00010dfc <fseeko64@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #20, 20	; 0x14000
   10e04:	ldr	pc, [ip, #684]!	; 0x2ac

00010e08 <setlocale@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #20, 20	; 0x14000
   10e10:	ldr	pc, [ip, #676]!	; 0x2a4

00010e14 <strrchr@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #20, 20	; 0x14000
   10e1c:	ldr	pc, [ip, #668]!	; 0x29c

00010e20 <nl_langinfo@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #20, 20	; 0x14000
   10e28:	ldr	pc, [ip, #660]!	; 0x294

00010e2c <bindtextdomain@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #20, 20	; 0x14000
   10e34:	ldr	pc, [ip, #652]!	; 0x28c

00010e38 <fputs@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #20, 20	; 0x14000
   10e40:	ldr	pc, [ip, #644]!	; 0x284

00010e44 <strncmp@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #20, 20	; 0x14000
   10e4c:	ldr	pc, [ip, #636]!	; 0x27c

00010e50 <abort@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #20, 20	; 0x14000
   10e58:	ldr	pc, [ip, #628]!	; 0x274

00010e5c <__assert_fail@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #20, 20	; 0x14000
   10e64:	ldr	pc, [ip, #620]!	; 0x26c

Disassembly of section .text:

00010e68 <.text>:
   10e68:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   10e6c:	mov	r7, r0
   10e70:	ldr	r0, [r1]
   10e74:	mov	r6, r1
   10e78:	bl	116cc <__assert_fail@plt+0x870>
   10e7c:	ldr	r1, [pc, #828]	; 111c0 <__assert_fail@plt+0x364>
   10e80:	mov	r0, #6
   10e84:	bl	10e08 <setlocale@plt>
   10e88:	ldr	r1, [pc, #820]	; 111c4 <__assert_fail@plt+0x368>
   10e8c:	ldr	r0, [pc, #820]	; 111c8 <__assert_fail@plt+0x36c>
   10e90:	bl	10e2c <bindtextdomain@plt>
   10e94:	ldr	r0, [pc, #812]	; 111c8 <__assert_fail@plt+0x36c>
   10e98:	bl	10cd0 <textdomain@plt>
   10e9c:	ldr	r3, [pc, #808]	; 111cc <__assert_fail@plt+0x370>
   10ea0:	mov	r2, #125	; 0x7d
   10ea4:	ldr	r0, [pc, #804]	; 111d0 <__assert_fail@plt+0x374>
   10ea8:	str	r2, [r3]
   10eac:	bl	14470 <__assert_fail@plt+0x3614>
   10eb0:	mov	r5, #0
   10eb4:	ldr	r9, [pc, #792]	; 111d4 <__assert_fail@plt+0x378>
   10eb8:	ldr	sl, [pc, #792]	; 111d8 <__assert_fail@plt+0x37c>
   10ebc:	mov	r4, #1
   10ec0:	mov	r8, r5
   10ec4:	cmp	r4, r7
   10ec8:	blt	10f28 <__assert_fail@plt+0xcc>
   10ecc:	cmp	r5, #0
   10ed0:	beq	11164 <__assert_fail@plt+0x308>
   10ed4:	ldr	r3, [pc, #740]	; 111c0 <__assert_fail@plt+0x364>
   10ed8:	mov	r2, #10
   10edc:	str	r3, [sp]
   10ee0:	mov	r1, #0
   10ee4:	add	r3, sp, #12
   10ee8:	mov	r0, r5
   10eec:	bl	137dc <__assert_fail@plt+0x2980>
   10ef0:	cmp	r0, #1
   10ef4:	bls	11010 <__assert_fail@plt+0x1b4>
   10ef8:	mov	r2, #5
   10efc:	ldr	r1, [pc, #728]	; 111dc <__assert_fail@plt+0x380>
   10f00:	mov	r0, #0
   10f04:	bl	10cac <dcgettext@plt>
   10f08:	mov	r4, r0
   10f0c:	mov	r0, r5
   10f10:	bl	12cfc <__assert_fail@plt+0x1ea0>
   10f14:	mov	r2, r4
   10f18:	mov	r1, #0
   10f1c:	mov	r3, r0
   10f20:	mov	r0, #125	; 0x7d
   10f24:	bl	10d24 <error@plt>
   10f28:	ldr	r2, [r6, r4, lsl #2]
   10f2c:	lsl	r1, r4, #2
   10f30:	ldrb	r3, [r2]
   10f34:	cmp	r3, #45	; 0x2d
   10f38:	bne	10f6c <__assert_fail@plt+0x110>
   10f3c:	ldrb	r3, [r2, #1]
   10f40:	sub	r3, r3, #43	; 0x2b
   10f44:	and	r3, r3, #253	; 0xfd
   10f48:	cmp	r3, #0
   10f4c:	movne	r3, r2
   10f50:	addeq	r3, r2, #1
   10f54:	ldrb	r3, [r3, #1]
   10f58:	sub	r3, r3, #48	; 0x30
   10f5c:	cmp	r3, #9
   10f60:	addls	r5, r2, #1
   10f64:	addls	r4, r4, #1
   10f68:	bls	10ec4 <__assert_fail@plt+0x68>
   10f6c:	ldr	r3, [r6]
   10f70:	sub	r1, r1, #4
   10f74:	sub	r0, r4, #1
   10f78:	str	r3, [r6, r1]
   10f7c:	ldr	r2, [pc, #604]	; 111e0 <__assert_fail@plt+0x384>
   10f80:	str	r8, [r9]
   10f84:	ldr	r3, [pc, #600]	; 111e4 <__assert_fail@plt+0x388>
   10f88:	str	r8, [sp]
   10f8c:	add	r1, r6, r1
   10f90:	sub	r0, r7, r0
   10f94:	bl	10d6c <getopt_long@plt>
   10f98:	ldr	r3, [r9]
   10f9c:	sub	r3, r3, #1
   10fa0:	add	r4, r4, r3
   10fa4:	cmn	r0, #2
   10fa8:	beq	10fd8 <__assert_fail@plt+0x17c>
   10fac:	bgt	10fc0 <__assert_fail@plt+0x164>
   10fb0:	cmn	r0, #3
   10fb4:	beq	10fe0 <__assert_fail@plt+0x184>
   10fb8:	mov	r0, #125	; 0x7d
   10fbc:	b	10fdc <__assert_fail@plt+0x180>
   10fc0:	cmn	r0, #1
   10fc4:	beq	10ecc <__assert_fail@plt+0x70>
   10fc8:	cmp	r0, #110	; 0x6e
   10fcc:	bne	10fb8 <__assert_fail@plt+0x15c>
   10fd0:	ldr	r5, [sl]
   10fd4:	b	10ec4 <__assert_fail@plt+0x68>
   10fd8:	mov	r0, #0
   10fdc:	bl	1133c <__assert_fail@plt+0x4e0>
   10fe0:	ldr	r3, [pc, #512]	; 111e8 <__assert_fail@plt+0x38c>
   10fe4:	ldr	r0, [pc, #512]	; 111ec <__assert_fail@plt+0x390>
   10fe8:	str	r3, [sp]
   10fec:	ldr	r3, [pc, #508]	; 111f0 <__assert_fail@plt+0x394>
   10ff0:	str	r8, [sp, #4]
   10ff4:	ldr	r2, [pc, #504]	; 111f4 <__assert_fail@plt+0x398>
   10ff8:	ldr	r0, [r0]
   10ffc:	ldr	r3, [r3]
   11000:	ldr	r1, [pc, #496]	; 111f8 <__assert_fail@plt+0x39c>
   11004:	bl	1314c <__assert_fail@plt+0x22f0>
   11008:	mov	r0, #0
   1100c:	bl	10d84 <exit@plt>
   11010:	ldr	r5, [sp, #12]
   11014:	mvn	r3, #38	; 0x26
   11018:	cmp	r5, #39	; 0x27
   1101c:	movge	r5, #39	; 0x27
   11020:	cmp	r5, r3
   11024:	movlt	r5, r3
   11028:	cmp	r4, r7
   1102c:	bne	11070 <__assert_fail@plt+0x214>
   11030:	mov	r2, #5
   11034:	ldr	r1, [pc, #448]	; 111fc <__assert_fail@plt+0x3a0>
   11038:	mov	r0, #0
   1103c:	bl	10cac <dcgettext@plt>
   11040:	mov	r1, #0
   11044:	mov	r2, r0
   11048:	mov	r0, r1
   1104c:	bl	10d24 <error@plt>
   11050:	b	10fb8 <__assert_fail@plt+0x15c>
   11054:	ldr	r1, [pc, #420]	; 11200 <__assert_fail@plt+0x3a4>
   11058:	mov	r0, #1
   1105c:	bl	10dcc <__printf_chk@plt>
   11060:	mov	r4, #0
   11064:	mov	r0, r4
   11068:	add	sp, sp, #16
   1106c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11070:	bl	10da8 <__errno_location@plt>
   11074:	mov	r8, #0
   11078:	mov	r1, r8
   1107c:	str	r8, [r0]
   11080:	mov	r7, r0
   11084:	mov	r0, r8
   11088:	bl	10cc4 <getpriority@plt>
   1108c:	cmn	r0, #1
   11090:	bne	110bc <__assert_fail@plt+0x260>
   11094:	ldr	r9, [r7]
   11098:	cmp	r9, r8
   1109c:	beq	110bc <__assert_fail@plt+0x260>
   110a0:	mov	r2, #5
   110a4:	ldr	r1, [pc, #344]	; 11204 <__assert_fail@plt+0x3a8>
   110a8:	mov	r0, r8
   110ac:	bl	10cac <dcgettext@plt>
   110b0:	mov	r1, r9
   110b4:	mov	r2, r0
   110b8:	b	111b8 <__assert_fail@plt+0x35c>
   110bc:	mov	r1, #0
   110c0:	add	r2, r0, r5
   110c4:	mov	r0, r1
   110c8:	bl	10d30 <setpriority@plt>
   110cc:	cmp	r0, #0
   110d0:	bne	11114 <__assert_fail@plt+0x2b8>
   110d4:	lsl	r8, r4, #2
   110d8:	add	r1, r6, r8
   110dc:	ldr	r0, [r6, r4, lsl #2]
   110e0:	bl	10c7c <execvp@plt>
   110e4:	ldr	r5, [r7]
   110e8:	ldr	r0, [r6, r8]
   110ec:	cmp	r5, #2
   110f0:	moveq	r4, #127	; 0x7f
   110f4:	movne	r4, #126	; 0x7e
   110f8:	bl	12cfc <__assert_fail@plt+0x1ea0>
   110fc:	ldr	r2, [pc, #260]	; 11208 <__assert_fail@plt+0x3ac>
   11100:	mov	r1, r5
   11104:	mov	r3, r0
   11108:	mov	r0, #0
   1110c:	bl	10d24 <error@plt>
   11110:	b	11064 <__assert_fail@plt+0x208>
   11114:	ldr	r5, [r7]
   11118:	mov	r2, #5
   1111c:	cmp	r5, #13
   11120:	cmpne	r5, #1
   11124:	ldr	r1, [pc, #224]	; 1120c <__assert_fail@plt+0x3b0>
   11128:	mov	r0, #0
   1112c:	movne	r8, #125	; 0x7d
   11130:	moveq	r8, #0
   11134:	bl	10cac <dcgettext@plt>
   11138:	mov	r1, r5
   1113c:	mov	r2, r0
   11140:	mov	r0, r8
   11144:	bl	10d24 <error@plt>
   11148:	ldr	r3, [pc, #192]	; 11210 <__assert_fail@plt+0x3b4>
   1114c:	ldr	r0, [r3]
   11150:	bl	10d0c <ferror_unlocked@plt>
   11154:	cmp	r0, #0
   11158:	movne	r4, #125	; 0x7d
   1115c:	bne	11064 <__assert_fail@plt+0x208>
   11160:	b	110d4 <__assert_fail@plt+0x278>
   11164:	cmp	r4, r7
   11168:	movne	r5, #10
   1116c:	bne	11070 <__assert_fail@plt+0x214>
   11170:	bl	10da8 <__errno_location@plt>
   11174:	mov	r1, r5
   11178:	str	r5, [r0]
   1117c:	mov	r4, r0
   11180:	mov	r0, r5
   11184:	bl	10cc4 <getpriority@plt>
   11188:	cmn	r0, #1
   1118c:	mov	r2, r0
   11190:	bne	11054 <__assert_fail@plt+0x1f8>
   11194:	ldr	r4, [r4]
   11198:	cmp	r4, #0
   1119c:	beq	11054 <__assert_fail@plt+0x1f8>
   111a0:	mov	r2, #5
   111a4:	ldr	r1, [pc, #88]	; 11204 <__assert_fail@plt+0x3a8>
   111a8:	mov	r0, r5
   111ac:	bl	10cac <dcgettext@plt>
   111b0:	mov	r1, r4
   111b4:	mov	r2, r0
   111b8:	mov	r0, #125	; 0x7d
   111bc:	bl	10d24 <error@plt>
   111c0:	ldrdeq	r4, [r1], -r2
   111c4:	ldrdeq	r4, [r1], -r3
   111c8:	andeq	r4, r1, r0, lsr r8
   111cc:	andeq	r5, r2, r4, ror #1
   111d0:	andeq	r1, r1, r8, ror #11
   111d4:	andeq	r5, r2, r0, lsr r1
   111d8:	andeq	r5, r2, r0, asr #2
   111dc:	strdeq	r4, [r1], -pc	; <UNPREDICTABLE>
   111e0:	andeq	r4, r1, fp, ror #17
   111e4:	andeq	r4, r1, ip, asr #9
   111e8:	andeq	r4, r1, pc, ror #17
   111ec:	andeq	r5, r2, ip, lsr r1
   111f0:	andeq	r5, r2, r0, ror #1
   111f4:	andeq	r4, r1, ip, lsr #16
   111f8:	andeq	r4, r1, ip, lsl #10
   111fc:	andeq	r4, r1, r5, lsl r9
   11200:	andeq	r4, r1, r4, asr r9
   11204:	andeq	r4, r1, r0, asr #18
   11208:	strdeq	r4, [r1], -r7
   1120c:	andeq	r4, r1, r8, asr r9
   11210:	andeq	r5, r2, r8, lsr r1
   11214:	mov	fp, #0
   11218:	mov	lr, #0
   1121c:	pop	{r1}		; (ldr r1, [sp], #4)
   11220:	mov	r2, sp
   11224:	push	{r2}		; (str r2, [sp, #-4]!)
   11228:	push	{r0}		; (str r0, [sp, #-4]!)
   1122c:	ldr	ip, [pc, #16]	; 11244 <__assert_fail@plt+0x3e8>
   11230:	push	{ip}		; (str ip, [sp, #-4]!)
   11234:	ldr	r0, [pc, #12]	; 11248 <__assert_fail@plt+0x3ec>
   11238:	ldr	r3, [pc, #12]	; 1124c <__assert_fail@plt+0x3f0>
   1123c:	bl	10d48 <__libc_start_main@plt>
   11240:	bl	10e50 <abort@plt>
   11244:	andeq	r4, r1, ip, ror #8
   11248:	andeq	r0, r1, r8, ror #28
   1124c:	andeq	r4, r1, ip, lsl #8
   11250:	ldr	r3, [pc, #20]	; 1126c <__assert_fail@plt+0x410>
   11254:	ldr	r2, [pc, #20]	; 11270 <__assert_fail@plt+0x414>
   11258:	add	r3, pc, r3
   1125c:	ldr	r2, [r3, r2]
   11260:	cmp	r2, #0
   11264:	bxeq	lr
   11268:	b	10d60 <__gmon_start__@plt>
   1126c:	andeq	r3, r1, r0, lsr #27
   11270:	ldrdeq	r0, [r0], -r4
   11274:	ldr	r3, [pc, #28]	; 11298 <__assert_fail@plt+0x43c>
   11278:	ldr	r0, [pc, #28]	; 1129c <__assert_fail@plt+0x440>
   1127c:	sub	r3, r3, r0
   11280:	cmp	r3, #6
   11284:	bxls	lr
   11288:	ldr	r3, [pc, #16]	; 112a0 <__assert_fail@plt+0x444>
   1128c:	cmp	r3, #0
   11290:	bxeq	lr
   11294:	bx	r3
   11298:	andeq	r5, r2, fp, lsr #2
   1129c:	andeq	r5, r2, r8, lsr #2
   112a0:	andeq	r0, r0, r0
   112a4:	ldr	r1, [pc, #36]	; 112d0 <__assert_fail@plt+0x474>
   112a8:	ldr	r0, [pc, #36]	; 112d4 <__assert_fail@plt+0x478>
   112ac:	sub	r1, r1, r0
   112b0:	asr	r1, r1, #2
   112b4:	add	r1, r1, r1, lsr #31
   112b8:	asrs	r1, r1, #1
   112bc:	bxeq	lr
   112c0:	ldr	r3, [pc, #16]	; 112d8 <__assert_fail@plt+0x47c>
   112c4:	cmp	r3, #0
   112c8:	bxeq	lr
   112cc:	bx	r3
   112d0:	andeq	r5, r2, r8, lsr #2
   112d4:	andeq	r5, r2, r8, lsr #2
   112d8:	andeq	r0, r0, r0
   112dc:	push	{r4, lr}
   112e0:	ldr	r4, [pc, #24]	; 11300 <__assert_fail@plt+0x4a4>
   112e4:	ldrb	r3, [r4]
   112e8:	cmp	r3, #0
   112ec:	popne	{r4, pc}
   112f0:	bl	11274 <__assert_fail@plt+0x418>
   112f4:	mov	r3, #1
   112f8:	strb	r3, [r4]
   112fc:	pop	{r4, pc}
   11300:	andeq	r5, r2, r4, asr #2
   11304:	ldr	r0, [pc, #40]	; 11334 <__assert_fail@plt+0x4d8>
   11308:	ldr	r3, [r0]
   1130c:	cmp	r3, #0
   11310:	bne	11318 <__assert_fail@plt+0x4bc>
   11314:	b	112a4 <__assert_fail@plt+0x448>
   11318:	ldr	r3, [pc, #24]	; 11338 <__assert_fail@plt+0x4dc>
   1131c:	cmp	r3, #0
   11320:	beq	11314 <__assert_fail@plt+0x4b8>
   11324:	push	{r4, lr}
   11328:	blx	r3
   1132c:	pop	{r4, lr}
   11330:	b	112a4 <__assert_fail@plt+0x448>
   11334:	andeq	r4, r2, r4, lsl pc
   11338:	andeq	r0, r0, r0
   1133c:	subs	r4, r0, #0
   11340:	push	{r7, lr}
   11344:	sub	sp, sp, #56	; 0x38
   11348:	ldr	r5, [pc, #544]	; 11570 <__assert_fail@plt+0x714>
   1134c:	beq	11384 <__assert_fail@plt+0x528>
   11350:	ldr	r3, [pc, #540]	; 11574 <__assert_fail@plt+0x718>
   11354:	mov	r2, #5
   11358:	ldr	r1, [pc, #536]	; 11578 <__assert_fail@plt+0x71c>
   1135c:	mov	r0, #0
   11360:	ldr	r6, [r3]
   11364:	bl	10cac <dcgettext@plt>
   11368:	ldr	r3, [r5]
   1136c:	mov	r1, #1
   11370:	mov	r2, r0
   11374:	mov	r0, r6
   11378:	bl	10de4 <__fprintf_chk@plt>
   1137c:	mov	r0, r4
   11380:	bl	10d84 <exit@plt>
   11384:	mov	r2, #5
   11388:	ldr	r1, [pc, #492]	; 1157c <__assert_fail@plt+0x720>
   1138c:	bl	10cac <dcgettext@plt>
   11390:	ldr	r2, [r5]
   11394:	ldr	r5, [pc, #484]	; 11580 <__assert_fail@plt+0x724>
   11398:	ldr	r8, [pc, #484]	; 11584 <__assert_fail@plt+0x728>
   1139c:	mov	r6, r4
   113a0:	mov	r1, r0
   113a4:	mov	r0, #1
   113a8:	bl	10dcc <__printf_chk@plt>
   113ac:	mov	r2, #5
   113b0:	ldr	r1, [pc, #464]	; 11588 <__assert_fail@plt+0x72c>
   113b4:	mov	r0, r4
   113b8:	bl	10cac <dcgettext@plt>
   113bc:	mov	r3, #19
   113c0:	mvn	r2, #19
   113c4:	mov	r1, r0
   113c8:	mov	r0, #1
   113cc:	bl	10dcc <__printf_chk@plt>
   113d0:	mov	r2, #5
   113d4:	ldr	r1, [pc, #432]	; 1158c <__assert_fail@plt+0x730>
   113d8:	mov	r0, r4
   113dc:	bl	10cac <dcgettext@plt>
   113e0:	ldr	r1, [r5]
   113e4:	bl	10c1c <fputs_unlocked@plt>
   113e8:	mov	r2, #5
   113ec:	ldr	r1, [pc, #412]	; 11590 <__assert_fail@plt+0x734>
   113f0:	mov	r0, r4
   113f4:	bl	10cac <dcgettext@plt>
   113f8:	ldr	r1, [r5]
   113fc:	bl	10c1c <fputs_unlocked@plt>
   11400:	mov	r2, #5
   11404:	ldr	r1, [pc, #392]	; 11594 <__assert_fail@plt+0x738>
   11408:	mov	r0, r4
   1140c:	bl	10cac <dcgettext@plt>
   11410:	ldr	r1, [r5]
   11414:	bl	10c1c <fputs_unlocked@plt>
   11418:	mov	r2, #5
   1141c:	ldr	r1, [pc, #372]	; 11598 <__assert_fail@plt+0x73c>
   11420:	mov	r0, r4
   11424:	bl	10cac <dcgettext@plt>
   11428:	ldr	r1, [r5]
   1142c:	bl	10c1c <fputs_unlocked@plt>
   11430:	mov	r2, #5
   11434:	ldr	r1, [pc, #352]	; 1159c <__assert_fail@plt+0x740>
   11438:	mov	r0, r4
   1143c:	bl	10cac <dcgettext@plt>
   11440:	ldr	r2, [pc, #316]	; 11584 <__assert_fail@plt+0x728>
   11444:	mov	r1, r0
   11448:	mov	r0, #1
   1144c:	bl	10dcc <__printf_chk@plt>
   11450:	ldr	lr, [pc, #328]	; 115a0 <__assert_fail@plt+0x744>
   11454:	mov	ip, sp
   11458:	ldm	lr!, {r0, r1, r2, r3}
   1145c:	stmia	ip!, {r0, r1, r2, r3}
   11460:	ldm	lr!, {r0, r1, r2, r3}
   11464:	stmia	ip!, {r0, r1, r2, r3}
   11468:	ldm	lr!, {r0, r1, r2, r3}
   1146c:	stmia	ip!, {r0, r1, r2, r3}
   11470:	ldm	lr, {r0, r1}
   11474:	stm	ip, {r0, r1}
   11478:	ldr	r1, [sp, r6]
   1147c:	add	r7, sp, r6
   11480:	cmp	r1, #0
   11484:	bne	11528 <__assert_fail@plt+0x6cc>
   11488:	ldr	r6, [r7, #4]
   1148c:	ldr	r7, [pc, #240]	; 11584 <__assert_fail@plt+0x728>
   11490:	cmp	r6, #0
   11494:	mov	r2, #5
   11498:	ldr	r1, [pc, #260]	; 115a4 <__assert_fail@plt+0x748>
   1149c:	mov	r0, #0
   114a0:	moveq	r6, r7
   114a4:	bl	10cac <dcgettext@plt>
   114a8:	ldr	r3, [pc, #248]	; 115a8 <__assert_fail@plt+0x74c>
   114ac:	ldr	r2, [pc, #248]	; 115ac <__assert_fail@plt+0x750>
   114b0:	mov	r1, r0
   114b4:	mov	r0, #1
   114b8:	bl	10dcc <__printf_chk@plt>
   114bc:	mov	r1, #0
   114c0:	mov	r0, #5
   114c4:	bl	10e08 <setlocale@plt>
   114c8:	cmp	r0, #0
   114cc:	bne	11540 <__assert_fail@plt+0x6e4>
   114d0:	mov	r2, #5
   114d4:	ldr	r1, [pc, #212]	; 115b0 <__assert_fail@plt+0x754>
   114d8:	mov	r0, #0
   114dc:	bl	10cac <dcgettext@plt>
   114e0:	ldr	r3, [pc, #156]	; 11584 <__assert_fail@plt+0x728>
   114e4:	ldr	r2, [pc, #188]	; 115a8 <__assert_fail@plt+0x74c>
   114e8:	mov	r1, r0
   114ec:	mov	r0, #1
   114f0:	bl	10dcc <__printf_chk@plt>
   114f4:	mov	r2, #5
   114f8:	ldr	r1, [pc, #180]	; 115b4 <__assert_fail@plt+0x758>
   114fc:	mov	r0, #0
   11500:	bl	10cac <dcgettext@plt>
   11504:	ldr	r2, [pc, #172]	; 115b8 <__assert_fail@plt+0x75c>
   11508:	cmp	r6, r7
   1150c:	ldr	r3, [pc, #168]	; 115bc <__assert_fail@plt+0x760>
   11510:	moveq	r3, r2
   11514:	mov	r2, r6
   11518:	mov	r1, r0
   1151c:	mov	r0, #1
   11520:	bl	10dcc <__printf_chk@plt>
   11524:	b	1137c <__assert_fail@plt+0x520>
   11528:	mov	r0, r8
   1152c:	bl	10c34 <strcmp@plt>
   11530:	add	r6, r6, #8
   11534:	cmp	r0, #0
   11538:	bne	11478 <__assert_fail@plt+0x61c>
   1153c:	b	11488 <__assert_fail@plt+0x62c>
   11540:	mov	r2, #3
   11544:	ldr	r1, [pc, #116]	; 115c0 <__assert_fail@plt+0x764>
   11548:	bl	10e44 <strncmp@plt>
   1154c:	cmp	r0, #0
   11550:	beq	114d0 <__assert_fail@plt+0x674>
   11554:	mov	r2, #5
   11558:	ldr	r1, [pc, #100]	; 115c4 <__assert_fail@plt+0x768>
   1155c:	mov	r0, #0
   11560:	bl	10cac <dcgettext@plt>
   11564:	ldr	r1, [r5]
   11568:	bl	10c1c <fputs_unlocked@plt>
   1156c:	b	114d0 <__assert_fail@plt+0x674>
   11570:	andeq	r5, r2, r0, asr r1
   11574:	andeq	r5, r2, r8, lsr r1
   11578:	andeq	r4, r1, r1, lsl r5
   1157c:	andeq	r4, r1, r8, lsr r5
   11580:	andeq	r5, r2, ip, lsr r1
   11584:	andeq	r4, r1, ip, lsl #10
   11588:	andeq	r4, r1, pc, asr r5
   1158c:	andeq	r4, r1, sp, lsr r6
   11590:	andeq	r4, r1, r8, lsl #13
   11594:	andeq	r4, r1, fp, asr #13
   11598:	strdeq	r4, [r1], -r8
   1159c:	andeq	r4, r1, lr, lsr #14
   115a0:	muleq	r1, r4, r4
   115a4:	andeq	r4, r1, sp, ror #15
   115a8:	andeq	r4, r1, r4, lsl #16
   115ac:	andeq	r4, r1, ip, lsr #16
   115b0:	andeq	r4, r1, r5, lsl #17
   115b4:	andeq	r4, r1, r0, lsr #17
   115b8:	andeq	r4, r1, r8, lsl #19
   115bc:	ldrdeq	r4, [r1], -r2
   115c0:	andeq	r4, r1, sl, lsr r8
   115c4:	andeq	r4, r1, lr, lsr r8
   115c8:	ldr	r3, [pc, #4]	; 115d4 <__assert_fail@plt+0x778>
   115cc:	str	r0, [r3]
   115d0:	bx	lr
   115d4:	andeq	r5, r2, r8, asr #2
   115d8:	ldr	r3, [pc, #4]	; 115e4 <__assert_fail@plt+0x788>
   115dc:	strb	r0, [r3, #4]
   115e0:	bx	lr
   115e4:	andeq	r5, r2, r8, asr #2
   115e8:	ldr	r3, [pc, #192]	; 116b0 <__assert_fail@plt+0x854>
   115ec:	push	{r0, r1, r4, r5, r6, lr}
   115f0:	ldr	r0, [r3]
   115f4:	bl	13bb0 <__assert_fail@plt+0x2d54>
   115f8:	cmp	r0, #0
   115fc:	beq	11694 <__assert_fail@plt+0x838>
   11600:	ldr	r3, [pc, #172]	; 116b4 <__assert_fail@plt+0x858>
   11604:	mov	r4, r3
   11608:	ldrb	r2, [r3, #4]
   1160c:	cmp	r2, #0
   11610:	beq	11624 <__assert_fail@plt+0x7c8>
   11614:	bl	10da8 <__errno_location@plt>
   11618:	ldr	r3, [r0]
   1161c:	cmp	r3, #32
   11620:	beq	11694 <__assert_fail@plt+0x838>
   11624:	mov	r2, #5
   11628:	ldr	r1, [pc, #136]	; 116b8 <__assert_fail@plt+0x85c>
   1162c:	mov	r0, #0
   11630:	bl	10cac <dcgettext@plt>
   11634:	ldr	r4, [r4]
   11638:	cmp	r4, #0
   1163c:	mov	r5, r0
   11640:	beq	11678 <__assert_fail@plt+0x81c>
   11644:	bl	10da8 <__errno_location@plt>
   11648:	ldr	r6, [r0]
   1164c:	mov	r0, r4
   11650:	bl	12bac <__assert_fail@plt+0x1d50>
   11654:	str	r5, [sp]
   11658:	ldr	r2, [pc, #92]	; 116bc <__assert_fail@plt+0x860>
   1165c:	mov	r1, r6
   11660:	mov	r3, r0
   11664:	mov	r0, #0
   11668:	bl	10d24 <error@plt>
   1166c:	ldr	r3, [pc, #76]	; 116c0 <__assert_fail@plt+0x864>
   11670:	ldr	r0, [r3]
   11674:	bl	10c64 <_exit@plt>
   11678:	bl	10da8 <__errno_location@plt>
   1167c:	mov	r3, r5
   11680:	ldr	r2, [pc, #60]	; 116c4 <__assert_fail@plt+0x868>
   11684:	ldr	r1, [r0]
   11688:	mov	r0, r4
   1168c:	bl	10d24 <error@plt>
   11690:	b	1166c <__assert_fail@plt+0x810>
   11694:	ldr	r3, [pc, #44]	; 116c8 <__assert_fail@plt+0x86c>
   11698:	ldr	r0, [r3]
   1169c:	bl	13bb0 <__assert_fail@plt+0x2d54>
   116a0:	cmp	r0, #0
   116a4:	bne	1166c <__assert_fail@plt+0x810>
   116a8:	add	sp, sp, #8
   116ac:	pop	{r4, r5, r6, pc}
   116b0:	andeq	r5, r2, ip, lsr r1
   116b4:	andeq	r5, r2, r8, asr #2
   116b8:	andeq	r4, r1, r7, ror #19
   116bc:	strdeq	r4, [r1], -r3
   116c0:	andeq	r5, r2, r4, ror #1
   116c4:	strdeq	r4, [r1], -r7
   116c8:	andeq	r5, r2, r8, lsr r1
   116cc:	push	{r4, r5, r6, lr}
   116d0:	subs	r5, r0, #0
   116d4:	bne	116ec <__assert_fail@plt+0x890>
   116d8:	ldr	r3, [pc, #124]	; 1175c <__assert_fail@plt+0x900>
   116dc:	ldr	r0, [pc, #124]	; 11760 <__assert_fail@plt+0x904>
   116e0:	ldr	r1, [r3]
   116e4:	bl	10e38 <fputs@plt>
   116e8:	bl	10e50 <abort@plt>
   116ec:	mov	r1, #47	; 0x2f
   116f0:	bl	10e14 <strrchr@plt>
   116f4:	cmp	r0, #0
   116f8:	addne	r4, r0, #1
   116fc:	moveq	r4, r5
   11700:	sub	r3, r4, r5
   11704:	cmp	r3, #6
   11708:	ble	11748 <__assert_fail@plt+0x8ec>
   1170c:	mov	r2, #7
   11710:	ldr	r1, [pc, #76]	; 11764 <__assert_fail@plt+0x908>
   11714:	sub	r0, r4, #7
   11718:	bl	10e44 <strncmp@plt>
   1171c:	cmp	r0, #0
   11720:	bne	11748 <__assert_fail@plt+0x8ec>
   11724:	mov	r2, #3
   11728:	ldr	r1, [pc, #56]	; 11768 <__assert_fail@plt+0x90c>
   1172c:	mov	r0, r4
   11730:	bl	10e44 <strncmp@plt>
   11734:	cmp	r0, #0
   11738:	movne	r5, r4
   1173c:	ldreq	r3, [pc, #40]	; 1176c <__assert_fail@plt+0x910>
   11740:	addeq	r5, r4, #3
   11744:	streq	r5, [r3]
   11748:	ldr	r3, [pc, #32]	; 11770 <__assert_fail@plt+0x914>
   1174c:	str	r5, [r3]
   11750:	ldr	r3, [pc, #28]	; 11774 <__assert_fail@plt+0x918>
   11754:	str	r5, [r3]
   11758:	pop	{r4, r5, r6, pc}
   1175c:	andeq	r5, r2, r8, lsr r1
   11760:	strdeq	r4, [r1], -sl
   11764:	andeq	r4, r1, r2, lsr sl
   11768:	andeq	r4, r1, sl, lsr sl
   1176c:	andeq	r5, r2, r8, lsr #2
   11770:	andeq	r5, r2, r0, asr r1
   11774:	andeq	r5, r2, ip, lsr #2
   11778:	push	{r4, r5, r6, lr}
   1177c:	mov	r2, #48	; 0x30
   11780:	mov	r5, r1
   11784:	mov	r1, #0
   11788:	mov	r4, r0
   1178c:	bl	10dc0 <memset@plt>
   11790:	cmp	r5, #10
   11794:	bne	1179c <__assert_fail@plt+0x940>
   11798:	bl	10e50 <abort@plt>
   1179c:	str	r5, [r4]
   117a0:	mov	r0, r4
   117a4:	pop	{r4, r5, r6, pc}
   117a8:	push	{r4, r5, r6, lr}
   117ac:	mov	r4, r0
   117b0:	mov	r5, r1
   117b4:	bl	13e00 <__assert_fail@plt+0x2fa4>
   117b8:	ldrb	r3, [r0]
   117bc:	bic	r3, r3, #32
   117c0:	cmp	r3, #85	; 0x55
   117c4:	bne	11834 <__assert_fail@plt+0x9d8>
   117c8:	ldrb	r3, [r0, #1]
   117cc:	bic	r3, r3, #32
   117d0:	cmp	r3, #84	; 0x54
   117d4:	bne	1180c <__assert_fail@plt+0x9b0>
   117d8:	ldrb	r3, [r0, #2]
   117dc:	bic	r3, r3, #32
   117e0:	cmp	r3, #70	; 0x46
   117e4:	bne	1180c <__assert_fail@plt+0x9b0>
   117e8:	ldrb	r3, [r0, #3]
   117ec:	cmp	r3, #45	; 0x2d
   117f0:	bne	1180c <__assert_fail@plt+0x9b0>
   117f4:	ldrb	r3, [r0, #4]
   117f8:	cmp	r3, #56	; 0x38
   117fc:	bne	1180c <__assert_fail@plt+0x9b0>
   11800:	ldrb	r3, [r0, #5]
   11804:	cmp	r3, #0
   11808:	beq	11820 <__assert_fail@plt+0x9c4>
   1180c:	ldr	r1, [pc, #144]	; 118a4 <__assert_fail@plt+0xa48>
   11810:	ldr	r0, [pc, #144]	; 118a8 <__assert_fail@plt+0xa4c>
   11814:	cmp	r5, #9
   11818:	movne	r0, r1
   1181c:	pop	{r4, r5, r6, pc}
   11820:	ldrb	r3, [r4]
   11824:	ldr	r1, [pc, #128]	; 118ac <__assert_fail@plt+0xa50>
   11828:	ldr	r0, [pc, #128]	; 118b0 <__assert_fail@plt+0xa54>
   1182c:	cmp	r3, #96	; 0x60
   11830:	b	11818 <__assert_fail@plt+0x9bc>
   11834:	cmp	r3, #71	; 0x47
   11838:	bne	1180c <__assert_fail@plt+0x9b0>
   1183c:	ldrb	r3, [r0, #1]
   11840:	bic	r3, r3, #32
   11844:	cmp	r3, #66	; 0x42
   11848:	bne	1180c <__assert_fail@plt+0x9b0>
   1184c:	ldrb	r3, [r0, #2]
   11850:	cmp	r3, #49	; 0x31
   11854:	bne	1180c <__assert_fail@plt+0x9b0>
   11858:	ldrb	r3, [r0, #3]
   1185c:	cmp	r3, #56	; 0x38
   11860:	bne	1180c <__assert_fail@plt+0x9b0>
   11864:	ldrb	r3, [r0, #4]
   11868:	cmp	r3, #48	; 0x30
   1186c:	bne	1180c <__assert_fail@plt+0x9b0>
   11870:	ldrb	r3, [r0, #5]
   11874:	cmp	r3, #51	; 0x33
   11878:	bne	1180c <__assert_fail@plt+0x9b0>
   1187c:	ldrb	r3, [r0, #6]
   11880:	cmp	r3, #48	; 0x30
   11884:	bne	1180c <__assert_fail@plt+0x9b0>
   11888:	ldrb	r3, [r0, #7]
   1188c:	cmp	r3, #0
   11890:	bne	1180c <__assert_fail@plt+0x9b0>
   11894:	ldrb	r3, [r4]
   11898:	ldr	r1, [pc, #20]	; 118b4 <__assert_fail@plt+0xa58>
   1189c:	ldr	r0, [pc, #20]	; 118b8 <__assert_fail@plt+0xa5c>
   118a0:	b	1182c <__assert_fail@plt+0x9d0>
   118a4:	andeq	r4, r1, r5, lsr #21
   118a8:	andeq	r4, r1, r3, lsr #21
   118ac:	muleq	r1, r8, sl
   118b0:	muleq	r1, r4, sl
   118b4:	andeq	r4, r1, r0, lsr #21
   118b8:	muleq	r1, ip, sl
   118bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118c0:	sub	sp, sp, #108	; 0x6c
   118c4:	mov	r8, r0
   118c8:	str	r3, [sp, #36]	; 0x24
   118cc:	mov	r5, r1
   118d0:	str	r2, [sp, #44]	; 0x2c
   118d4:	ldr	sl, [sp, #144]	; 0x90
   118d8:	bl	10cf4 <__ctype_get_mb_cur_max@plt>
   118dc:	ldr	r3, [sp, #148]	; 0x94
   118e0:	mov	r7, #0
   118e4:	str	r7, [sp, #48]	; 0x30
   118e8:	lsr	r6, r3, #1
   118ec:	and	r6, r6, #1
   118f0:	mov	r3, #1
   118f4:	str	r3, [sp, #72]	; 0x48
   118f8:	str	r7, [sp, #24]
   118fc:	str	r7, [sp, #32]
   11900:	str	r7, [sp, #40]	; 0x28
   11904:	str	r7, [sp, #60]	; 0x3c
   11908:	str	r0, [sp, #76]	; 0x4c
   1190c:	cmp	sl, #10
   11910:	ldrls	pc, [pc, sl, lsl #2]
   11914:	b	11b50 <__assert_fail@plt+0xcf4>
   11918:	andeq	r1, r1, r4, asr #18
   1191c:	ldrdeq	r2, [r1], -r8
   11920:	andeq	r1, r1, ip, lsl fp
   11924:	andeq	r1, r1, r8, ror #22
   11928:	strdeq	r1, [r1], -r8
   1192c:	andeq	r1, r1, r0, asr r9
   11930:			; <UNDEFINED> instruction: 0x000125b8
   11934:	andeq	r1, r1, r4, asr fp
   11938:	andeq	r1, r1, r8, asr #20
   1193c:	andeq	r1, r1, r8, asr #20
   11940:	andeq	r1, r1, r8, asr #20
   11944:	mov	r6, #0
   11948:	mov	r4, #0
   1194c:	b	1197c <__assert_fail@plt+0xb20>
   11950:	cmp	r6, #0
   11954:	bne	11b78 <__assert_fail@plt+0xd1c>
   11958:	cmp	r5, #0
   1195c:	movne	r3, #34	; 0x22
   11960:	strbne	r3, [r8]
   11964:	mov	r3, #1
   11968:	str	r3, [sp, #24]
   1196c:	str	r3, [sp, #32]
   11970:	mov	r4, #1
   11974:	ldr	r3, [pc, #3172]	; 125e0 <__assert_fail@plt+0x1784>
   11978:	str	r3, [sp, #40]	; 0x28
   1197c:	mov	r9, r5
   11980:	mov	r3, #0
   11984:	str	r7, [sp, #68]	; 0x44
   11988:	str	r3, [sp, #28]
   1198c:	ldr	r3, [sp, #36]	; 0x24
   11990:	cmn	r3, #1
   11994:	bne	12524 <__assert_fail@plt+0x16c8>
   11998:	ldr	r3, [sp, #44]	; 0x2c
   1199c:	ldr	r2, [sp, #28]
   119a0:	ldrb	r3, [r3, r2]
   119a4:	adds	r3, r3, #0
   119a8:	movne	r3, #1
   119ac:	str	r3, [sp, #52]	; 0x34
   119b0:	ldr	r3, [sp, #52]	; 0x34
   119b4:	cmp	r3, #0
   119b8:	bne	11ba0 <__assert_fail@plt+0xd44>
   119bc:	sub	r2, sl, #2
   119c0:	clz	r2, r2
   119c4:	lsr	r2, r2, #5
   119c8:	and	r3, r6, r2
   119cc:	cmp	r4, #0
   119d0:	movne	r3, #0
   119d4:	andeq	r3, r3, #1
   119d8:	cmp	r3, #0
   119dc:	bne	11d68 <__assert_fail@plt+0xf0c>
   119e0:	eor	r3, r6, #1
   119e4:	ands	r2, r2, r3
   119e8:	beq	1255c <__assert_fail@plt+0x1700>
   119ec:	ldr	r3, [sp, #68]	; 0x44
   119f0:	cmp	r3, #0
   119f4:	beq	12594 <__assert_fail@plt+0x1738>
   119f8:	ldr	r3, [sp, #72]	; 0x48
   119fc:	cmp	r3, #0
   11a00:	beq	12538 <__assert_fail@plt+0x16dc>
   11a04:	ldr	r3, [sp, #160]	; 0xa0
   11a08:	ldr	r2, [sp, #44]	; 0x2c
   11a0c:	str	r3, [sp, #16]
   11a10:	ldr	r3, [sp, #156]	; 0x9c
   11a14:	ldr	r1, [sp, #60]	; 0x3c
   11a18:	str	r3, [sp, #12]
   11a1c:	ldr	r3, [sp, #152]	; 0x98
   11a20:	str	r3, [sp, #8]
   11a24:	ldr	r3, [sp, #148]	; 0x94
   11a28:	str	r3, [sp, #4]
   11a2c:	mov	r3, #5
   11a30:	str	r3, [sp]
   11a34:	ldr	r3, [sp, #36]	; 0x24
   11a38:	mov	r0, r8
   11a3c:	bl	118bc <__assert_fail@plt+0xa60>
   11a40:	mov	r4, r0
   11a44:	b	12588 <__assert_fail@plt+0x172c>
   11a48:	cmp	sl, #10
   11a4c:	beq	11aa8 <__assert_fail@plt+0xc4c>
   11a50:	ldr	r4, [pc, #2956]	; 125e4 <__assert_fail@plt+0x1788>
   11a54:	mov	r2, #5
   11a58:	mov	r1, r4
   11a5c:	mov	r0, #0
   11a60:	bl	10cac <dcgettext@plt>
   11a64:	cmp	r0, r4
   11a68:	str	r0, [sp, #156]	; 0x9c
   11a6c:	bne	11a7c <__assert_fail@plt+0xc20>
   11a70:	mov	r1, sl
   11a74:	bl	117a8 <__assert_fail@plt+0x94c>
   11a78:	str	r0, [sp, #156]	; 0x9c
   11a7c:	ldr	r4, [pc, #2916]	; 125e8 <__assert_fail@plt+0x178c>
   11a80:	mov	r2, #5
   11a84:	mov	r1, r4
   11a88:	mov	r0, #0
   11a8c:	bl	10cac <dcgettext@plt>
   11a90:	cmp	r0, r4
   11a94:	str	r0, [sp, #160]	; 0xa0
   11a98:	bne	11aa8 <__assert_fail@plt+0xc4c>
   11a9c:	mov	r1, sl
   11aa0:	bl	117a8 <__assert_fail@plt+0x94c>
   11aa4:	str	r0, [sp, #160]	; 0xa0
   11aa8:	cmp	r6, #0
   11aac:	moveq	r4, r6
   11ab0:	beq	11ac8 <__assert_fail@plt+0xc6c>
   11ab4:	mov	r4, #0
   11ab8:	b	11ad8 <__assert_fail@plt+0xc7c>
   11abc:	cmp	r5, r4
   11ac0:	strbhi	r3, [r8, r4]
   11ac4:	add	r4, r4, #1
   11ac8:	ldr	r3, [sp, #156]	; 0x9c
   11acc:	ldrb	r3, [r3, r4]
   11ad0:	cmp	r3, #0
   11ad4:	bne	11abc <__assert_fail@plt+0xc60>
   11ad8:	ldr	r0, [sp, #160]	; 0xa0
   11adc:	bl	10d90 <strlen@plt>
   11ae0:	ldr	r3, [sp, #160]	; 0xa0
   11ae4:	str	r3, [sp, #40]	; 0x28
   11ae8:	mov	r3, #1
   11aec:	str	r3, [sp, #24]
   11af0:	str	r0, [sp, #32]
   11af4:	b	1197c <__assert_fail@plt+0xb20>
   11af8:	mov	r3, #1
   11afc:	cmp	r6, #0
   11b00:	streq	r3, [sp, #24]
   11b04:	beq	11b24 <__assert_fail@plt+0xcc8>
   11b08:	str	r3, [sp, #32]
   11b0c:	ldr	r3, [pc, #2772]	; 125e8 <__assert_fail@plt+0x178c>
   11b10:	mov	r4, #0
   11b14:	str	r3, [sp, #40]	; 0x28
   11b18:	b	11b48 <__assert_fail@plt+0xcec>
   11b1c:	cmp	r6, #0
   11b20:	bne	11b90 <__assert_fail@plt+0xd34>
   11b24:	cmp	r5, #0
   11b28:	movne	r3, #39	; 0x27
   11b2c:	strbne	r3, [r8]
   11b30:	mov	r3, #1
   11b34:	str	r3, [sp, #32]
   11b38:	mov	r6, #0
   11b3c:	ldr	r3, [pc, #2724]	; 125e8 <__assert_fail@plt+0x178c>
   11b40:	mov	r4, #1
   11b44:	str	r3, [sp, #40]	; 0x28
   11b48:	mov	sl, #2
   11b4c:	b	1197c <__assert_fail@plt+0xb20>
   11b50:	bl	10e50 <abort@plt>
   11b54:	mov	r6, #0
   11b58:	mov	r3, #1
   11b5c:	str	r3, [sp, #24]
   11b60:	mov	r4, r6
   11b64:	b	1197c <__assert_fail@plt+0xb20>
   11b68:	mov	r6, #1
   11b6c:	str	r6, [sp, #24]
   11b70:	str	r6, [sp, #32]
   11b74:	b	11b0c <__assert_fail@plt+0xcb0>
   11b78:	mov	r3, #1
   11b7c:	str	r3, [sp, #32]
   11b80:	ldr	r3, [pc, #2648]	; 125e0 <__assert_fail@plt+0x1784>
   11b84:	str	r6, [sp, #24]
   11b88:	str	r3, [sp, #40]	; 0x28
   11b8c:	b	11948 <__assert_fail@plt+0xaec>
   11b90:	mov	r3, #1
   11b94:	str	r3, [sp, #32]
   11b98:	ldr	r3, [pc, #2632]	; 125e8 <__assert_fail@plt+0x178c>
   11b9c:	b	11b88 <__assert_fail@plt+0xd2c>
   11ba0:	ldr	r3, [sp, #32]
   11ba4:	ldr	fp, [sp, #24]
   11ba8:	cmp	sl, #2
   11bac:	moveq	fp, #0
   11bb0:	andne	fp, fp, #1
   11bb4:	adds	r5, r3, #0
   11bb8:	movne	r5, #1
   11bbc:	ands	r3, r5, fp
   11bc0:	str	r3, [sp, #64]	; 0x40
   11bc4:	beq	11c94 <__assert_fail@plt+0xe38>
   11bc8:	ldr	r2, [sp, #32]
   11bcc:	ldr	r3, [sp, #28]
   11bd0:	add	r7, r3, r2
   11bd4:	mov	r3, r2
   11bd8:	ldr	r2, [sp, #36]	; 0x24
   11bdc:	cmp	r3, #1
   11be0:	movls	r3, #0
   11be4:	movhi	r3, #1
   11be8:	cmn	r2, #1
   11bec:	movne	r3, #0
   11bf0:	cmp	r3, #0
   11bf4:	beq	11c04 <__assert_fail@plt+0xda8>
   11bf8:	ldr	r0, [sp, #44]	; 0x2c
   11bfc:	bl	10d90 <strlen@plt>
   11c00:	str	r0, [sp, #36]	; 0x24
   11c04:	ldr	r3, [sp, #36]	; 0x24
   11c08:	cmp	r3, r7
   11c0c:	bcc	11c8c <__assert_fail@plt+0xe30>
   11c10:	ldr	r3, [sp, #44]	; 0x2c
   11c14:	ldr	r0, [sp, #28]
   11c18:	ldr	r2, [sp, #32]
   11c1c:	ldr	r1, [sp, #40]	; 0x28
   11c20:	add	r0, r3, r0
   11c24:	bl	10c94 <memcmp@plt>
   11c28:	cmp	r0, #0
   11c2c:	bne	11c8c <__assert_fail@plt+0xe30>
   11c30:	cmp	r6, #0
   11c34:	beq	11c94 <__assert_fail@plt+0xe38>
   11c38:	str	r6, [sp, #24]
   11c3c:	ldr	r3, [sp, #24]
   11c40:	ldr	r2, [sp, #44]	; 0x2c
   11c44:	cmp	sl, #2
   11c48:	movne	r3, #0
   11c4c:	andeq	r3, r3, #1
   11c50:	cmp	r3, #0
   11c54:	ldr	r3, [sp, #160]	; 0xa0
   11c58:	movne	sl, #4
   11c5c:	str	r3, [sp, #16]
   11c60:	ldr	r3, [sp, #156]	; 0x9c
   11c64:	str	sl, [sp]
   11c68:	str	r3, [sp, #12]
   11c6c:	mov	r3, #0
   11c70:	str	r3, [sp, #8]
   11c74:	ldr	r3, [sp, #148]	; 0x94
   11c78:	mov	r1, r9
   11c7c:	bic	r3, r3, #2
   11c80:	str	r3, [sp, #4]
   11c84:	ldr	r3, [sp, #36]	; 0x24
   11c88:	b	11a38 <__assert_fail@plt+0xbdc>
   11c8c:	mov	r3, #0
   11c90:	str	r3, [sp, #64]	; 0x40
   11c94:	ldr	r2, [sp, #28]
   11c98:	ldr	r3, [sp, #44]	; 0x2c
   11c9c:	add	r3, r3, r2
   11ca0:	str	r3, [sp, #80]	; 0x50
   11ca4:	ldr	r3, [sp, #44]	; 0x2c
   11ca8:	ldrb	r7, [r3, r2]
   11cac:	cmp	r7, #58	; 0x3a
   11cb0:	bhi	11e18 <__assert_fail@plt+0xfbc>
   11cb4:	cmp	r7, #43	; 0x2b
   11cb8:	bcs	11e6c <__assert_fail@plt+0x1010>
   11cbc:	cmp	r7, #32
   11cc0:	beq	11ec4 <__assert_fail@plt+0x1068>
   11cc4:	bhi	11d70 <__assert_fail@plt+0xf14>
   11cc8:	cmp	r7, #9
   11ccc:	beq	12178 <__assert_fail@plt+0x131c>
   11cd0:	bhi	11d34 <__assert_fail@plt+0xed8>
   11cd4:	cmp	r7, #7
   11cd8:	beq	12224 <__assert_fail@plt+0x13c8>
   11cdc:	bhi	11ee0 <__assert_fail@plt+0x1084>
   11ce0:	cmp	r7, #0
   11ce4:	beq	11efc <__assert_fail@plt+0x10a0>
   11ce8:	ldr	r3, [sp, #76]	; 0x4c
   11cec:	cmp	r3, #1
   11cf0:	bne	12268 <__assert_fail@plt+0x140c>
   11cf4:	bl	10d78 <__ctype_b_loc@plt>
   11cf8:	sxth	r3, r7
   11cfc:	lsl	r3, r3, #1
   11d00:	ldr	r2, [r0]
   11d04:	ldrh	r5, [r2, r3]
   11d08:	ldr	r3, [sp, #76]	; 0x4c
   11d0c:	str	r3, [sp, #56]	; 0x38
   11d10:	lsr	r5, r5, #14
   11d14:	and	r5, r5, #1
   11d18:	ldr	r3, [sp, #24]
   11d1c:	eor	fp, r5, #1
   11d20:	and	fp, fp, r3
   11d24:	ands	fp, fp, #255	; 0xff
   11d28:	beq	120b0 <__assert_fail@plt+0x1254>
   11d2c:	mov	r5, #0
   11d30:	b	12314 <__assert_fail@plt+0x14b8>
   11d34:	cmp	r7, #11
   11d38:	beq	12180 <__assert_fail@plt+0x1324>
   11d3c:	bcc	1221c <__assert_fail@plt+0x13c0>
   11d40:	cmp	r7, #12
   11d44:	beq	1222c <__assert_fail@plt+0x13d0>
   11d48:	cmp	r7, #13
   11d4c:	moveq	r3, #114	; 0x72
   11d50:	bne	11ce8 <__assert_fail@plt+0xe8c>
   11d54:	cmp	sl, #2
   11d58:	movne	r2, #0
   11d5c:	andeq	r2, r6, #1
   11d60:	cmp	r2, #0
   11d64:	beq	11ee4 <__assert_fail@plt+0x1088>
   11d68:	mov	sl, #2
   11d6c:	b	11c3c <__assert_fail@plt+0xde0>
   11d70:	cmp	r7, #37	; 0x25
   11d74:	beq	11e6c <__assert_fail@plt+0x1010>
   11d78:	bhi	11d8c <__assert_fail@plt+0xf30>
   11d7c:	cmp	r7, #35	; 0x23
   11d80:	beq	11eb8 <__assert_fail@plt+0x105c>
   11d84:	mov	r5, #0
   11d88:	b	11ec8 <__assert_fail@plt+0x106c>
   11d8c:	cmp	r7, #39	; 0x27
   11d90:	bne	11d84 <__assert_fail@plt+0xf28>
   11d94:	cmp	sl, #2
   11d98:	ldrne	r5, [sp, #52]	; 0x34
   11d9c:	movne	r3, r5
   11da0:	strne	r3, [sp, #68]	; 0x44
   11da4:	bne	11e70 <__assert_fail@plt+0x1014>
   11da8:	cmp	r6, #0
   11dac:	bne	11c3c <__assert_fail@plt+0xde0>
   11db0:	ldr	r2, [sp, #60]	; 0x3c
   11db4:	adds	r3, r9, #0
   11db8:	movne	r3, #1
   11dbc:	cmp	r2, #0
   11dc0:	movne	r3, #0
   11dc4:	cmp	r3, #0
   11dc8:	strne	r9, [sp, #60]	; 0x3c
   11dcc:	movne	r9, #0
   11dd0:	bne	11de0 <__assert_fail@plt+0xf84>
   11dd4:	cmp	r9, r4
   11dd8:	movhi	r3, #39	; 0x27
   11ddc:	strbhi	r3, [r8, r4]
   11de0:	add	r3, r4, #1
   11de4:	cmp	r3, r9
   11de8:	movcc	r2, #92	; 0x5c
   11dec:	strbcc	r2, [r8, r3]
   11df0:	add	r3, r4, #2
   11df4:	cmp	r3, r9
   11df8:	ldr	r5, [sp, #52]	; 0x34
   11dfc:	movcc	r2, #39	; 0x27
   11e00:	strbcc	r2, [r8, r3]
   11e04:	add	r4, r4, #3
   11e08:	mov	fp, r6
   11e0c:	str	r5, [sp, #68]	; 0x44
   11e10:	str	r6, [sp, #48]	; 0x30
   11e14:	b	120b0 <__assert_fail@plt+0x1254>
   11e18:	cmp	r7, #94	; 0x5e
   11e1c:	beq	11d84 <__assert_fail@plt+0xf28>
   11e20:	bhi	11e78 <__assert_fail@plt+0x101c>
   11e24:	cmp	r7, #90	; 0x5a
   11e28:	bhi	11e60 <__assert_fail@plt+0x1004>
   11e2c:	cmp	r7, #65	; 0x41
   11e30:	bcs	11e6c <__assert_fail@plt+0x1010>
   11e34:	cmp	r7, #62	; 0x3e
   11e38:	bls	11d84 <__assert_fail@plt+0xf28>
   11e3c:	cmp	r7, #63	; 0x3f
   11e40:	bne	11ce8 <__assert_fail@plt+0xe8c>
   11e44:	cmp	sl, #2
   11e48:	beq	11fec <__assert_fail@plt+0x1190>
   11e4c:	cmp	sl, #5
   11e50:	beq	11ffc <__assert_fail@plt+0x11a0>
   11e54:	mov	fp, #0
   11e58:	mov	r5, fp
   11e5c:	b	120b0 <__assert_fail@plt+0x1254>
   11e60:	cmp	r7, #92	; 0x5c
   11e64:	beq	12188 <__assert_fail@plt+0x132c>
   11e68:	bls	11d84 <__assert_fail@plt+0xf28>
   11e6c:	ldr	r5, [sp, #52]	; 0x34
   11e70:	mov	fp, #0
   11e74:	b	120b0 <__assert_fail@plt+0x1254>
   11e78:	cmp	r7, #122	; 0x7a
   11e7c:	bhi	11e9c <__assert_fail@plt+0x1040>
   11e80:	cmp	r7, #97	; 0x61
   11e84:	bcs	11e6c <__assert_fail@plt+0x1010>
   11e88:	cmp	r7, #95	; 0x5f
   11e8c:	beq	11e6c <__assert_fail@plt+0x1010>
   11e90:	cmp	r7, #96	; 0x60
   11e94:	bne	11ce8 <__assert_fail@plt+0xe8c>
   11e98:	b	11d84 <__assert_fail@plt+0xf28>
   11e9c:	cmp	r7, #124	; 0x7c
   11ea0:	beq	11d84 <__assert_fail@plt+0xf28>
   11ea4:	bcc	12234 <__assert_fail@plt+0x13d8>
   11ea8:	cmp	r7, #125	; 0x7d
   11eac:	beq	12234 <__assert_fail@plt+0x13d8>
   11eb0:	cmp	r7, #126	; 0x7e
   11eb4:	bne	11ce8 <__assert_fail@plt+0xe8c>
   11eb8:	ldr	r3, [sp, #28]
   11ebc:	cmp	r3, #0
   11ec0:	bne	11ff4 <__assert_fail@plt+0x1198>
   11ec4:	ldr	r5, [sp, #52]	; 0x34
   11ec8:	cmp	sl, #2
   11ecc:	movne	fp, #0
   11ed0:	andeq	fp, r6, #1
   11ed4:	cmp	fp, #0
   11ed8:	beq	120b0 <__assert_fail@plt+0x1254>
   11edc:	b	11d68 <__assert_fail@plt+0xf0c>
   11ee0:	mov	r3, #98	; 0x62
   11ee4:	ldr	r2, [sp, #24]
   11ee8:	cmp	r2, #0
   11eec:	beq	11ff4 <__assert_fail@plt+0x1198>
   11ef0:	mov	r7, r3
   11ef4:	mov	r5, #0
   11ef8:	b	12108 <__assert_fail@plt+0x12ac>
   11efc:	ldr	r3, [sp, #24]
   11f00:	cmp	r3, #0
   11f04:	beq	11fd0 <__assert_fail@plt+0x1174>
   11f08:	cmp	r6, #0
   11f0c:	bne	11c38 <__assert_fail@plt+0xddc>
   11f10:	ldr	r3, [sp, #48]	; 0x30
   11f14:	eor	r2, r3, #1
   11f18:	cmp	sl, #2
   11f1c:	movne	r2, #0
   11f20:	andeq	r2, r2, #1
   11f24:	cmp	r2, #0
   11f28:	moveq	r3, r4
   11f2c:	beq	11f64 <__assert_fail@plt+0x1108>
   11f30:	cmp	r9, r4
   11f34:	movhi	r3, #39	; 0x27
   11f38:	strbhi	r3, [r8, r4]
   11f3c:	add	r3, r4, #1
   11f40:	cmp	r9, r3
   11f44:	movhi	r1, #36	; 0x24
   11f48:	strbhi	r1, [r8, r3]
   11f4c:	add	r3, r4, #2
   11f50:	cmp	r9, r3
   11f54:	movhi	r1, #39	; 0x27
   11f58:	strbhi	r1, [r8, r3]
   11f5c:	add	r3, r4, #3
   11f60:	str	r2, [sp, #48]	; 0x30
   11f64:	cmp	r9, r3
   11f68:	movhi	r2, #92	; 0x5c
   11f6c:	strbhi	r2, [r8, r3]
   11f70:	cmp	fp, #0
   11f74:	add	r4, r3, #1
   11f78:	beq	12508 <__assert_fail@plt+0x16ac>
   11f7c:	ldr	r2, [sp, #28]
   11f80:	ldr	r1, [sp, #36]	; 0x24
   11f84:	add	r2, r2, #1
   11f88:	cmp	r1, r2
   11f8c:	bls	11fc8 <__assert_fail@plt+0x116c>
   11f90:	ldr	r1, [sp, #44]	; 0x2c
   11f94:	mov	r7, #48	; 0x30
   11f98:	ldrb	r2, [r1, r2]
   11f9c:	sub	r2, r2, #48	; 0x30
   11fa0:	cmp	r2, #9
   11fa4:	movhi	r5, r6
   11fa8:	bhi	120b0 <__assert_fail@plt+0x1254>
   11fac:	cmp	r9, r4
   11fb0:	add	r2, r3, #2
   11fb4:	strbhi	r7, [r8, r4]
   11fb8:	cmp	r9, r2
   11fbc:	add	r4, r3, #3
   11fc0:	movhi	r1, #48	; 0x30
   11fc4:	strbhi	r1, [r8, r2]
   11fc8:	mov	r5, r6
   11fcc:	b	12510 <__assert_fail@plt+0x16b4>
   11fd0:	ldr	r3, [sp, #148]	; 0x94
   11fd4:	tst	r3, #1
   11fd8:	ldreq	r5, [sp, #24]
   11fdc:	beq	1251c <__assert_fail@plt+0x16c0>
   11fe0:	ldr	r3, [sp, #28]
   11fe4:	add	r3, r3, #1
   11fe8:	b	11988 <__assert_fail@plt+0xb2c>
   11fec:	cmp	r6, #0
   11ff0:	bne	11c3c <__assert_fail@plt+0xde0>
   11ff4:	mov	r5, #0
   11ff8:	b	11e70 <__assert_fail@plt+0x1014>
   11ffc:	ldr	r3, [sp, #148]	; 0x94
   12000:	tst	r3, #4
   12004:	beq	11ff4 <__assert_fail@plt+0x1198>
   12008:	ldr	r3, [sp, #28]
   1200c:	add	r2, r3, #2
   12010:	ldr	r3, [sp, #36]	; 0x24
   12014:	cmp	r3, r2
   12018:	bls	11ff4 <__assert_fail@plt+0x1198>
   1201c:	ldr	r3, [sp, #44]	; 0x2c
   12020:	ldr	r1, [sp, #28]
   12024:	add	r3, r3, r1
   12028:	ldrb	r0, [r3, #1]
   1202c:	cmp	r0, #63	; 0x3f
   12030:	bne	11ff4 <__assert_fail@plt+0x1198>
   12034:	ldr	r3, [sp, #44]	; 0x2c
   12038:	ldrb	r1, [r3, r2]
   1203c:	sub	r3, r1, #33	; 0x21
   12040:	uxtb	r3, r3
   12044:	cmp	r3, #29
   12048:	bhi	12518 <__assert_fail@plt+0x16bc>
   1204c:	mov	ip, #1
   12050:	ldr	r5, [pc, #1428]	; 125ec <__assert_fail@plt+0x1790>
   12054:	ands	r5, r5, ip, lsl r3
   12058:	beq	11e70 <__assert_fail@plt+0x1014>
   1205c:	cmp	r6, #0
   12060:	bne	11c3c <__assert_fail@plt+0xde0>
   12064:	add	r3, r4, #1
   12068:	cmp	r9, r4
   1206c:	strbhi	r0, [r8, r4]
   12070:	cmp	r9, r3
   12074:	movhi	r0, #34	; 0x22
   12078:	strbhi	r0, [r8, r3]
   1207c:	add	r3, r4, #2
   12080:	cmp	r9, r3
   12084:	movhi	r0, #34	; 0x22
   12088:	strbhi	r0, [r8, r3]
   1208c:	add	r3, r4, #3
   12090:	cmp	r9, r3
   12094:	add	r4, r4, #4
   12098:	mov	r5, r6
   1209c:	mov	fp, r6
   120a0:	mov	r7, r1
   120a4:	movhi	r0, #63	; 0x3f
   120a8:	strbhi	r0, [r8, r3]
   120ac:	str	r2, [sp, #28]
   120b0:	ldr	r3, [sp, #24]
   120b4:	eor	r3, r3, #1
   120b8:	cmp	sl, #2
   120bc:	orreq	r3, r3, #1
   120c0:	eor	r3, r3, #1
   120c4:	orr	r3, r6, r3
   120c8:	tst	r3, #255	; 0xff
   120cc:	beq	120fc <__assert_fail@plt+0x12a0>
   120d0:	ldr	r3, [sp, #152]	; 0x98
   120d4:	cmp	r3, #0
   120d8:	beq	120fc <__assert_fail@plt+0x12a0>
   120dc:	lsr	r2, r7, #5
   120e0:	ldr	r1, [sp, #152]	; 0x98
   120e4:	uxtb	r2, r2
   120e8:	and	r3, r7, #31
   120ec:	ldr	r2, [r1, r2, lsl #2]
   120f0:	lsr	r3, r2, r3
   120f4:	tst	r3, #1
   120f8:	bne	12108 <__assert_fail@plt+0x12ac>
   120fc:	ldr	r3, [sp, #64]	; 0x40
   12100:	cmp	r3, #0
   12104:	beq	121a0 <__assert_fail@plt+0x1344>
   12108:	cmp	r6, #0
   1210c:	bne	11c3c <__assert_fail@plt+0xde0>
   12110:	ldr	r3, [sp, #48]	; 0x30
   12114:	eor	r3, r3, #1
   12118:	cmp	sl, #2
   1211c:	movne	r3, #0
   12120:	andeq	r3, r3, #1
   12124:	cmp	r3, #0
   12128:	beq	12160 <__assert_fail@plt+0x1304>
   1212c:	cmp	r9, r4
   12130:	movhi	r2, #39	; 0x27
   12134:	strbhi	r2, [r8, r4]
   12138:	add	r2, r4, #1
   1213c:	cmp	r9, r2
   12140:	movhi	r1, #36	; 0x24
   12144:	strbhi	r1, [r8, r2]
   12148:	add	r2, r4, #2
   1214c:	cmp	r9, r2
   12150:	add	r4, r4, #3
   12154:	movhi	r1, #39	; 0x27
   12158:	strbhi	r1, [r8, r2]
   1215c:	str	r3, [sp, #48]	; 0x30
   12160:	cmp	r9, r4
   12164:	movhi	r3, #92	; 0x5c
   12168:	strbhi	r3, [r8, r4]
   1216c:	ldr	fp, [sp, #52]	; 0x34
   12170:	add	r4, r4, #1
   12174:	b	121a0 <__assert_fail@plt+0x1344>
   12178:	mov	r3, #116	; 0x74
   1217c:	b	11d54 <__assert_fail@plt+0xef8>
   12180:	mov	r3, #118	; 0x76
   12184:	b	11ee4 <__assert_fail@plt+0x1088>
   12188:	cmp	sl, #2
   1218c:	bne	121fc <__assert_fail@plt+0x13a0>
   12190:	cmp	r6, #0
   12194:	bne	11c3c <__assert_fail@plt+0xde0>
   12198:	mov	r5, r6
   1219c:	mov	fp, r6
   121a0:	ldr	r3, [sp, #48]	; 0x30
   121a4:	eor	fp, fp, #1
   121a8:	and	fp, fp, r3
   121ac:	tst	fp, #255	; 0xff
   121b0:	beq	121dc <__assert_fail@plt+0x1380>
   121b4:	cmp	r9, r4
   121b8:	movhi	r3, #39	; 0x27
   121bc:	strbhi	r3, [r8, r4]
   121c0:	add	r3, r4, #1
   121c4:	cmp	r9, r3
   121c8:	movhi	r2, #39	; 0x27
   121cc:	add	r4, r4, #2
   121d0:	strbhi	r2, [r8, r3]
   121d4:	mov	r3, #0
   121d8:	str	r3, [sp, #48]	; 0x30
   121dc:	cmp	r9, r4
   121e0:	strbhi	r7, [r8, r4]
   121e4:	ldr	r3, [sp, #72]	; 0x48
   121e8:	cmp	r5, #0
   121ec:	moveq	r3, #0
   121f0:	add	r4, r4, #1
   121f4:	str	r3, [sp, #72]	; 0x48
   121f8:	b	11fe0 <__assert_fail@plt+0x1184>
   121fc:	ldr	r3, [sp, #24]
   12200:	and	r3, r3, r6
   12204:	tst	r5, r3
   12208:	moveq	r3, r7
   1220c:	beq	11d54 <__assert_fail@plt+0xef8>
   12210:	mov	fp, #0
   12214:	mov	r5, fp
   12218:	b	121a0 <__assert_fail@plt+0x1344>
   1221c:	mov	r3, #110	; 0x6e
   12220:	b	11d54 <__assert_fail@plt+0xef8>
   12224:	mov	r3, #97	; 0x61
   12228:	b	11ee4 <__assert_fail@plt+0x1088>
   1222c:	mov	r3, #102	; 0x66
   12230:	b	11ee4 <__assert_fail@plt+0x1088>
   12234:	ldr	r3, [sp, #36]	; 0x24
   12238:	cmn	r3, #1
   1223c:	bne	1225c <__assert_fail@plt+0x1400>
   12240:	ldr	r3, [sp, #44]	; 0x2c
   12244:	ldrb	r3, [r3, #1]
   12248:	adds	r3, r3, #0
   1224c:	movne	r3, #1
   12250:	cmp	r3, #0
   12254:	bne	11ff4 <__assert_fail@plt+0x1198>
   12258:	b	11eb8 <__assert_fail@plt+0x105c>
   1225c:	ldr	r3, [sp, #36]	; 0x24
   12260:	subs	r3, r3, #1
   12264:	b	1224c <__assert_fail@plt+0x13f0>
   12268:	mov	r3, #0
   1226c:	str	r3, [sp, #96]	; 0x60
   12270:	str	r3, [sp, #100]	; 0x64
   12274:	ldr	r3, [sp, #36]	; 0x24
   12278:	cmn	r3, #1
   1227c:	bne	1228c <__assert_fail@plt+0x1430>
   12280:	ldr	r0, [sp, #44]	; 0x2c
   12284:	bl	10d90 <strlen@plt>
   12288:	str	r0, [sp, #36]	; 0x24
   1228c:	ldr	r5, [sp, #52]	; 0x34
   12290:	mov	r3, #0
   12294:	str	r3, [sp, #56]	; 0x38
   12298:	ldr	r3, [sp, #28]
   1229c:	ldr	r2, [sp, #56]	; 0x38
   122a0:	ldr	r1, [sp, #36]	; 0x24
   122a4:	add	r2, r3, r2
   122a8:	ldr	r3, [sp, #44]	; 0x2c
   122ac:	add	r0, sp, #92	; 0x5c
   122b0:	add	fp, r3, r2
   122b4:	sub	r2, r1, r2
   122b8:	add	r3, sp, #96	; 0x60
   122bc:	mov	r1, fp
   122c0:	bl	13e34 <__assert_fail@plt+0x2fd8>
   122c4:	subs	r2, r0, #0
   122c8:	beq	12308 <__assert_fail@plt+0x14ac>
   122cc:	cmn	r2, #1
   122d0:	beq	124e0 <__assert_fail@plt+0x1684>
   122d4:	cmn	r2, #2
   122d8:	bne	12450 <__assert_fail@plt+0x15f4>
   122dc:	ldr	r2, [sp, #56]	; 0x38
   122e0:	ldr	r3, [sp, #28]
   122e4:	add	r3, r3, r2
   122e8:	ldr	r2, [sp, #36]	; 0x24
   122ec:	cmp	r2, r3
   122f0:	bls	124e0 <__assert_fail@plt+0x1684>
   122f4:	ldr	r3, [sp, #80]	; 0x50
   122f8:	ldr	r2, [sp, #56]	; 0x38
   122fc:	ldrb	r5, [r3, r2]
   12300:	cmp	r5, #0
   12304:	bne	12440 <__assert_fail@plt+0x15e4>
   12308:	ldr	r3, [sp, #56]	; 0x38
   1230c:	cmp	r3, #1
   12310:	bls	11d18 <__assert_fail@plt+0xebc>
   12314:	ldr	r2, [sp, #56]	; 0x38
   12318:	ldr	r3, [sp, #28]
   1231c:	mov	fp, #0
   12320:	add	r3, r3, r2
   12324:	ldr	r2, [sp, #24]
   12328:	str	r3, [sp, #52]	; 0x34
   1232c:	eor	r3, r5, #1
   12330:	and	r3, r3, r2
   12334:	mov	ip, #92	; 0x5c
   12338:	uxtb	r3, r3
   1233c:	mov	r2, #39	; 0x27
   12340:	cmp	r3, #0
   12344:	beq	124e8 <__assert_fail@plt+0x168c>
   12348:	cmp	r6, #0
   1234c:	bne	11c38 <__assert_fail@plt+0xddc>
   12350:	ldr	r1, [sp, #48]	; 0x30
   12354:	eor	r1, r1, #1
   12358:	cmp	sl, #2
   1235c:	movne	r1, #0
   12360:	andeq	r1, r1, #1
   12364:	cmp	r1, #0
   12368:	beq	12398 <__assert_fail@plt+0x153c>
   1236c:	add	r0, r4, #1
   12370:	cmp	r9, r4
   12374:	strbhi	r2, [r8, r4]
   12378:	cmp	r9, r0
   1237c:	movhi	lr, #36	; 0x24
   12380:	strbhi	lr, [r8, r0]
   12384:	add	r0, r4, #2
   12388:	add	r4, r4, #3
   1238c:	cmp	r9, r0
   12390:	strbhi	r2, [r8, r0]
   12394:	str	r1, [sp, #48]	; 0x30
   12398:	add	r0, r4, #1
   1239c:	cmp	r9, r4
   123a0:	strbhi	ip, [r8, r4]
   123a4:	cmp	r9, r0
   123a8:	lsrhi	r1, r7, #6
   123ac:	addhi	r1, r1, #48	; 0x30
   123b0:	strbhi	r1, [r8, r0]
   123b4:	add	r0, r4, #2
   123b8:	cmp	r9, r0
   123bc:	lsrhi	r1, r7, #3
   123c0:	and	r7, r7, #7
   123c4:	andhi	r1, r1, #7
   123c8:	add	r4, r4, #3
   123cc:	add	r7, r7, #48	; 0x30
   123d0:	mov	fp, r3
   123d4:	addhi	r1, r1, #48	; 0x30
   123d8:	strbhi	r1, [r8, r0]
   123dc:	ldr	r1, [sp, #28]
   123e0:	ldr	r0, [sp, #52]	; 0x34
   123e4:	add	r1, r1, #1
   123e8:	cmp	r0, r1
   123ec:	bls	121a0 <__assert_fail@plt+0x1344>
   123f0:	ldr	lr, [sp, #48]	; 0x30
   123f4:	eor	r0, fp, #1
   123f8:	and	r0, r0, lr
   123fc:	tst	r0, #255	; 0xff
   12400:	beq	12424 <__assert_fail@plt+0x15c8>
   12404:	add	r0, r4, #1
   12408:	cmp	r9, r4
   1240c:	strbhi	r2, [r8, r4]
   12410:	cmp	r9, r0
   12414:	add	r4, r4, #2
   12418:	strbhi	r2, [r8, r0]
   1241c:	mov	r0, #0
   12420:	str	r0, [sp, #48]	; 0x30
   12424:	ldr	r0, [sp, #44]	; 0x2c
   12428:	cmp	r9, r4
   1242c:	strbhi	r7, [r8, r4]
   12430:	str	r1, [sp, #28]
   12434:	add	r4, r4, #1
   12438:	ldrb	r7, [r0, r1]
   1243c:	b	12340 <__assert_fail@plt+0x14e4>
   12440:	ldr	r3, [sp, #56]	; 0x38
   12444:	add	r3, r3, #1
   12448:	str	r3, [sp, #56]	; 0x38
   1244c:	b	122dc <__assert_fail@plt+0x1480>
   12450:	cmp	sl, #2
   12454:	movne	r3, #0
   12458:	andeq	r3, r6, #1
   1245c:	cmp	r3, #0
   12460:	movne	r1, #1
   12464:	bne	124c0 <__assert_fail@plt+0x1664>
   12468:	ldr	r0, [sp, #92]	; 0x5c
   1246c:	str	r2, [sp, #84]	; 0x54
   12470:	bl	10cdc <iswprint@plt>
   12474:	ldr	r3, [sp, #56]	; 0x38
   12478:	ldr	r2, [sp, #84]	; 0x54
   1247c:	add	r3, r3, r2
   12480:	str	r3, [sp, #56]	; 0x38
   12484:	cmp	r0, #0
   12488:	add	r0, sp, #96	; 0x60
   1248c:	moveq	r5, #0
   12490:	bl	10c88 <mbsinit@plt>
   12494:	cmp	r0, #0
   12498:	beq	12298 <__assert_fail@plt+0x143c>
   1249c:	b	12308 <__assert_fail@plt+0x14ac>
   124a0:	ldrb	r3, [fp, r1]
   124a4:	cmp	r3, #94	; 0x5e
   124a8:	beq	11d68 <__assert_fail@plt+0xf0c>
   124ac:	bhi	124cc <__assert_fail@plt+0x1670>
   124b0:	sub	r3, r3, #91	; 0x5b
   124b4:	cmp	r3, #1
   124b8:	bls	11d68 <__assert_fail@plt+0xf0c>
   124bc:	add	r1, r1, #1
   124c0:	cmp	r1, r2
   124c4:	bne	124a0 <__assert_fail@plt+0x1644>
   124c8:	b	12468 <__assert_fail@plt+0x160c>
   124cc:	cmp	r3, #96	; 0x60
   124d0:	beq	11d68 <__assert_fail@plt+0xf0c>
   124d4:	cmp	r3, #124	; 0x7c
   124d8:	bne	124bc <__assert_fail@plt+0x1660>
   124dc:	b	11d68 <__assert_fail@plt+0xf0c>
   124e0:	mov	r5, #0
   124e4:	b	12308 <__assert_fail@plt+0x14ac>
   124e8:	ldr	r1, [sp, #64]	; 0x40
   124ec:	cmp	r1, #0
   124f0:	beq	123dc <__assert_fail@plt+0x1580>
   124f4:	cmp	r9, r4
   124f8:	strbhi	ip, [r8, r4]
   124fc:	str	r3, [sp, #64]	; 0x40
   12500:	add	r4, r4, #1
   12504:	b	123dc <__assert_fail@plt+0x1580>
   12508:	mov	r5, fp
   1250c:	ldr	fp, [sp, #24]
   12510:	mov	r7, #48	; 0x30
   12514:	b	120b0 <__assert_fail@plt+0x1254>
   12518:	mov	r5, #0
   1251c:	mov	fp, r5
   12520:	b	120b0 <__assert_fail@plt+0x1254>
   12524:	ldr	r3, [sp, #36]	; 0x24
   12528:	ldr	r2, [sp, #28]
   1252c:	subs	r3, r3, r2
   12530:	movne	r3, #1
   12534:	b	119ac <__assert_fail@plt+0xb50>
   12538:	ldr	r3, [sp, #60]	; 0x3c
   1253c:	clz	r7, r9
   12540:	cmp	r3, #0
   12544:	lsr	r7, r7, #5
   12548:	moveq	r7, #0
   1254c:	cmp	r7, #0
   12550:	mov	r5, r3
   12554:	bne	1190c <__assert_fail@plt+0xab0>
   12558:	ldr	r3, [sp, #68]	; 0x44
   1255c:	ldr	r2, [sp, #40]	; 0x28
   12560:	cmp	r2, #0
   12564:	moveq	r3, #0
   12568:	andne	r3, r3, #1
   1256c:	cmp	r3, #0
   12570:	movne	r3, r2
   12574:	subne	r2, r3, #1
   12578:	bne	125a8 <__assert_fail@plt+0x174c>
   1257c:	cmp	r9, r4
   12580:	movhi	r3, #0
   12584:	strbhi	r3, [r8, r4]
   12588:	mov	r0, r4
   1258c:	add	sp, sp, #108	; 0x6c
   12590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12594:	mov	r3, r2
   12598:	b	1255c <__assert_fail@plt+0x1700>
   1259c:	cmp	r9, r4
   125a0:	strbhi	r3, [r8, r4]
   125a4:	add	r4, r4, #1
   125a8:	ldrb	r3, [r2, #1]!
   125ac:	cmp	r3, #0
   125b0:	bne	1259c <__assert_fail@plt+0x1740>
   125b4:	b	1257c <__assert_fail@plt+0x1720>
   125b8:	ldr	r3, [pc, #32]	; 125e0 <__assert_fail@plt+0x1784>
   125bc:	mov	r6, #1
   125c0:	str	r6, [sp, #24]
   125c4:	str	r6, [sp, #32]
   125c8:	str	r3, [sp, #40]	; 0x28
   125cc:	mov	r4, #0
   125d0:	mov	sl, #5
   125d4:	b	1197c <__assert_fail@plt+0xb20>
   125d8:	mov	r6, #1
   125dc:	b	11b70 <__assert_fail@plt+0xd14>
   125e0:	andeq	r4, r1, r3, lsr #21
   125e4:	andeq	r4, r1, r7, lsr #21
   125e8:	andeq	r4, r1, r5, lsr #21
   125ec:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   125f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125f4:	sub	sp, sp, #52	; 0x34
   125f8:	mov	r6, r0
   125fc:	mov	r5, r3
   12600:	mov	r8, r1
   12604:	mov	r9, r2
   12608:	bl	10da8 <__errno_location@plt>
   1260c:	ldr	r7, [pc, #380]	; 12790 <__assert_fail@plt+0x1934>
   12610:	cmn	r6, #-2147483647	; 0x80000001
   12614:	ldr	r4, [r7]
   12618:	ldr	r3, [r0]
   1261c:	str	r0, [sp, #24]
   12620:	str	r3, [sp, #32]
   12624:	movne	r3, #0
   12628:	moveq	r3, #1
   1262c:	orrs	r3, r3, r6, lsr #31
   12630:	beq	12638 <__assert_fail@plt+0x17dc>
   12634:	bl	10e50 <abort@plt>
   12638:	ldr	r2, [r7, #4]
   1263c:	cmp	r6, r2
   12640:	blt	126b0 <__assert_fail@plt+0x1854>
   12644:	add	r1, sp, #48	; 0x30
   12648:	add	sl, r7, #8
   1264c:	str	r2, [r1, #-4]!
   12650:	cmp	r4, sl
   12654:	mov	r3, #8
   12658:	sub	r2, r6, r2
   1265c:	movne	r0, r4
   12660:	str	r3, [sp]
   12664:	add	r2, r2, #1
   12668:	mvn	r3, #-2147483648	; 0x80000000
   1266c:	moveq	r0, #0
   12670:	bl	13384 <__assert_fail@plt+0x2528>
   12674:	cmp	r4, sl
   12678:	ldr	r2, [sp, #44]	; 0x2c
   1267c:	mov	fp, r0
   12680:	str	r0, [r7]
   12684:	ldmeq	r4, {r0, r1}
   12688:	mov	r4, fp
   1268c:	stmeq	fp, {r0, r1}
   12690:	ldr	r0, [r7, #4]
   12694:	mov	r1, #0
   12698:	sub	r2, r2, r0
   1269c:	add	r0, fp, r0, lsl #3
   126a0:	lsl	r2, r2, #3
   126a4:	bl	10dc0 <memset@plt>
   126a8:	ldr	r3, [sp, #44]	; 0x2c
   126ac:	str	r3, [r7, #4]
   126b0:	ldr	r3, [r5, #4]
   126b4:	add	sl, r4, r6, lsl #3
   126b8:	orr	r3, r3, #1
   126bc:	str	r3, [sp, #28]
   126c0:	add	r3, r5, #8
   126c4:	str	r3, [sp, #36]	; 0x24
   126c8:	ldr	r3, [r5, #44]	; 0x2c
   126cc:	ldr	fp, [r4, r6, lsl #3]
   126d0:	ldr	r7, [sl, #4]
   126d4:	str	r3, [sp, #16]
   126d8:	ldr	r3, [r5, #40]	; 0x28
   126dc:	mov	r2, r8
   126e0:	str	r3, [sp, #12]
   126e4:	add	r3, r5, #8
   126e8:	str	r3, [sp, #8]
   126ec:	ldr	r3, [sp, #28]
   126f0:	mov	r1, fp
   126f4:	str	r3, [sp, #4]
   126f8:	ldr	r3, [r5]
   126fc:	mov	r0, r7
   12700:	str	r3, [sp]
   12704:	mov	r3, r9
   12708:	bl	118bc <__assert_fail@plt+0xa60>
   1270c:	cmp	fp, r0
   12710:	bhi	12778 <__assert_fail@plt+0x191c>
   12714:	ldr	r3, [pc, #120]	; 12794 <__assert_fail@plt+0x1938>
   12718:	add	fp, r0, #1
   1271c:	cmp	r7, r3
   12720:	str	fp, [r4, r6, lsl #3]
   12724:	beq	12730 <__assert_fail@plt+0x18d4>
   12728:	mov	r0, r7
   1272c:	bl	13d18 <__assert_fail@plt+0x2ebc>
   12730:	mov	r0, fp
   12734:	bl	1323c <__assert_fail@plt+0x23e0>
   12738:	ldr	r3, [r5, #44]	; 0x2c
   1273c:	mov	r2, r8
   12740:	mov	r1, fp
   12744:	str	r0, [sl, #4]
   12748:	str	r3, [sp, #16]
   1274c:	ldr	r3, [r5, #40]	; 0x28
   12750:	mov	r7, r0
   12754:	str	r3, [sp, #12]
   12758:	add	r3, r5, #8
   1275c:	str	r3, [sp, #8]
   12760:	ldr	r3, [sp, #28]
   12764:	str	r3, [sp, #4]
   12768:	ldr	r3, [r5]
   1276c:	str	r3, [sp]
   12770:	mov	r3, r9
   12774:	bl	118bc <__assert_fail@plt+0xa60>
   12778:	ldr	r3, [sp, #24]
   1277c:	ldr	r2, [sp, #32]
   12780:	mov	r0, r7
   12784:	str	r2, [r3]
   12788:	add	sp, sp, #52	; 0x34
   1278c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12790:	andeq	r5, r2, r8, ror #1
   12794:	andeq	r5, r2, r4, asr r1
   12798:	push	{r4, r5, r6, lr}
   1279c:	mov	r5, r0
   127a0:	bl	10da8 <__errno_location@plt>
   127a4:	cmp	r5, #0
   127a8:	mov	r1, #48	; 0x30
   127ac:	ldr	r6, [r0]
   127b0:	mov	r4, r0
   127b4:	ldr	r0, [pc, #12]	; 127c8 <__assert_fail@plt+0x196c>
   127b8:	movne	r0, r5
   127bc:	bl	13618 <__assert_fail@plt+0x27bc>
   127c0:	str	r6, [r4]
   127c4:	pop	{r4, r5, r6, pc}
   127c8:	andeq	r5, r2, r4, asr r2
   127cc:	ldr	r3, [pc, #12]	; 127e0 <__assert_fail@plt+0x1984>
   127d0:	cmp	r0, #0
   127d4:	moveq	r0, r3
   127d8:	ldr	r0, [r0]
   127dc:	bx	lr
   127e0:	andeq	r5, r2, r4, asr r2
   127e4:	ldr	r3, [pc, #12]	; 127f8 <__assert_fail@plt+0x199c>
   127e8:	cmp	r0, #0
   127ec:	moveq	r0, r3
   127f0:	str	r1, [r0]
   127f4:	bx	lr
   127f8:	andeq	r5, r2, r4, asr r2
   127fc:	ldr	r3, [pc, #52]	; 12838 <__assert_fail@plt+0x19dc>
   12800:	cmp	r0, #0
   12804:	moveq	r0, r3
   12808:	add	r3, r0, #8
   1280c:	push	{lr}		; (str lr, [sp, #-4]!)
   12810:	lsr	lr, r1, #5
   12814:	and	r1, r1, #31
   12818:	ldr	ip, [r3, lr, lsl #2]
   1281c:	lsr	r0, ip, r1
   12820:	eor	r2, r2, r0
   12824:	and	r2, r2, #1
   12828:	and	r0, r0, #1
   1282c:	eor	r1, ip, r2, lsl r1
   12830:	str	r1, [r3, lr, lsl #2]
   12834:	pop	{pc}		; (ldr pc, [sp], #4)
   12838:	andeq	r5, r2, r4, asr r2
   1283c:	ldr	r3, [pc, #16]	; 12854 <__assert_fail@plt+0x19f8>
   12840:	cmp	r0, #0
   12844:	movne	r3, r0
   12848:	ldr	r0, [r3, #4]
   1284c:	str	r1, [r3, #4]
   12850:	bx	lr
   12854:	andeq	r5, r2, r4, asr r2
   12858:	ldr	r3, [pc, #44]	; 1288c <__assert_fail@plt+0x1a30>
   1285c:	cmp	r0, #0
   12860:	moveq	r0, r3
   12864:	mov	r3, #10
   12868:	cmp	r2, #0
   1286c:	cmpne	r1, #0
   12870:	str	r3, [r0]
   12874:	bne	12880 <__assert_fail@plt+0x1a24>
   12878:	push	{r4, lr}
   1287c:	bl	10e50 <abort@plt>
   12880:	str	r1, [r0, #40]	; 0x28
   12884:	str	r2, [r0, #44]	; 0x2c
   12888:	bx	lr
   1288c:	andeq	r5, r2, r4, asr r2
   12890:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12894:	sub	sp, sp, #24
   12898:	mov	sl, r3
   1289c:	ldr	r4, [sp, #56]	; 0x38
   128a0:	ldr	r3, [pc, #100]	; 1290c <__assert_fail@plt+0x1ab0>
   128a4:	cmp	r4, #0
   128a8:	moveq	r4, r3
   128ac:	mov	r7, r0
   128b0:	mov	r8, r1
   128b4:	mov	r9, r2
   128b8:	bl	10da8 <__errno_location@plt>
   128bc:	ldr	r3, [r4, #44]	; 0x2c
   128c0:	mov	r2, r9
   128c4:	mov	r1, r8
   128c8:	ldr	r6, [r0]
   128cc:	str	r3, [sp, #16]
   128d0:	ldr	r3, [r4, #40]	; 0x28
   128d4:	mov	r5, r0
   128d8:	str	r3, [sp, #12]
   128dc:	add	r3, r4, #8
   128e0:	str	r3, [sp, #8]
   128e4:	ldr	r3, [r4, #4]
   128e8:	mov	r0, r7
   128ec:	str	r3, [sp, #4]
   128f0:	ldr	r3, [r4]
   128f4:	str	r3, [sp]
   128f8:	mov	r3, sl
   128fc:	bl	118bc <__assert_fail@plt+0xa60>
   12900:	str	r6, [r5]
   12904:	add	sp, sp, #24
   12908:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1290c:	andeq	r5, r2, r4, asr r2
   12910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12914:	cmp	r3, #0
   12918:	sub	sp, sp, #44	; 0x2c
   1291c:	ldr	r4, [pc, #188]	; 129e0 <__assert_fail@plt+0x1b84>
   12920:	mov	r6, r2
   12924:	movne	r4, r3
   12928:	mov	sl, r1
   1292c:	mov	r9, r0
   12930:	bl	10da8 <__errno_location@plt>
   12934:	ldr	r5, [r4, #4]
   12938:	add	fp, r4, #8
   1293c:	cmp	r6, #0
   12940:	orreq	r5, r5, #1
   12944:	mov	r1, #0
   12948:	mov	r2, r9
   1294c:	ldr	r3, [r0]
   12950:	mov	r8, r0
   12954:	str	r3, [sp, #28]
   12958:	ldr	r3, [r4, #44]	; 0x2c
   1295c:	mov	r0, r1
   12960:	str	r3, [sp, #16]
   12964:	ldr	r3, [r4, #40]	; 0x28
   12968:	stmib	sp, {r5, fp}
   1296c:	str	r3, [sp, #12]
   12970:	ldr	r3, [r4]
   12974:	str	r3, [sp]
   12978:	mov	r3, sl
   1297c:	bl	118bc <__assert_fail@plt+0xa60>
   12980:	add	r1, r0, #1
   12984:	mov	r7, r0
   12988:	mov	r0, r1
   1298c:	str	r1, [sp, #36]	; 0x24
   12990:	bl	1323c <__assert_fail@plt+0x23e0>
   12994:	ldr	r3, [r4, #44]	; 0x2c
   12998:	mov	r2, r9
   1299c:	str	r3, [sp, #16]
   129a0:	ldr	r3, [r4, #40]	; 0x28
   129a4:	stmib	sp, {r5, fp}
   129a8:	str	r3, [sp, #12]
   129ac:	ldr	r3, [r4]
   129b0:	ldr	r1, [sp, #36]	; 0x24
   129b4:	str	r3, [sp]
   129b8:	mov	r3, sl
   129bc:	str	r0, [sp, #32]
   129c0:	bl	118bc <__assert_fail@plt+0xa60>
   129c4:	ldr	r3, [sp, #28]
   129c8:	cmp	r6, #0
   129cc:	str	r3, [r8]
   129d0:	ldr	r0, [sp, #32]
   129d4:	strne	r7, [r6]
   129d8:	add	sp, sp, #44	; 0x2c
   129dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129e0:	andeq	r5, r2, r4, asr r2
   129e4:	mov	r3, r2
   129e8:	mov	r2, #0
   129ec:	b	12910 <__assert_fail@plt+0x1ab4>
   129f0:	push	{r4, r5, r6, r7, r8, lr}
   129f4:	mov	r6, #1
   129f8:	ldr	r4, [pc, #104]	; 12a68 <__assert_fail@plt+0x1c0c>
   129fc:	ldr	r5, [r4]
   12a00:	add	r7, r5, #12
   12a04:	ldr	r3, [r4, #4]
   12a08:	add	r7, r7, #8
   12a0c:	cmp	r6, r3
   12a10:	blt	12a58 <__assert_fail@plt+0x1bfc>
   12a14:	ldr	r0, [r5, #4]
   12a18:	ldr	r6, [pc, #76]	; 12a6c <__assert_fail@plt+0x1c10>
   12a1c:	cmp	r0, r6
   12a20:	beq	12a34 <__assert_fail@plt+0x1bd8>
   12a24:	bl	13d18 <__assert_fail@plt+0x2ebc>
   12a28:	mov	r3, #256	; 0x100
   12a2c:	str	r3, [r4, #8]
   12a30:	str	r6, [r4, #12]
   12a34:	ldr	r6, [pc, #52]	; 12a70 <__assert_fail@plt+0x1c14>
   12a38:	cmp	r5, r6
   12a3c:	beq	12a4c <__assert_fail@plt+0x1bf0>
   12a40:	mov	r0, r5
   12a44:	bl	13d18 <__assert_fail@plt+0x2ebc>
   12a48:	str	r6, [r4]
   12a4c:	mov	r3, #1
   12a50:	str	r3, [r4, #4]
   12a54:	pop	{r4, r5, r6, r7, r8, pc}
   12a58:	ldr	r0, [r7, #-8]
   12a5c:	bl	13d18 <__assert_fail@plt+0x2ebc>
   12a60:	add	r6, r6, #1
   12a64:	b	12a04 <__assert_fail@plt+0x1ba8>
   12a68:	andeq	r5, r2, r8, ror #1
   12a6c:	andeq	r5, r2, r4, asr r1
   12a70:	strdeq	r5, [r2], -r0
   12a74:	ldr	r3, [pc, #4]	; 12a80 <__assert_fail@plt+0x1c24>
   12a78:	mvn	r2, #0
   12a7c:	b	125f0 <__assert_fail@plt+0x1794>
   12a80:	andeq	r5, r2, r4, asr r2
   12a84:	ldr	r3, [pc]	; 12a8c <__assert_fail@plt+0x1c30>
   12a88:	b	125f0 <__assert_fail@plt+0x1794>
   12a8c:	andeq	r5, r2, r4, asr r2
   12a90:	mov	r1, r0
   12a94:	mov	r0, #0
   12a98:	b	12a74 <__assert_fail@plt+0x1c18>
   12a9c:	mov	r2, r1
   12aa0:	mov	r1, r0
   12aa4:	mov	r0, #0
   12aa8:	b	12a84 <__assert_fail@plt+0x1c28>
   12aac:	push	{r4, r5, lr}
   12ab0:	sub	sp, sp, #52	; 0x34
   12ab4:	mov	r5, r2
   12ab8:	mov	r4, r0
   12abc:	mov	r0, sp
   12ac0:	bl	11778 <__assert_fail@plt+0x91c>
   12ac4:	mov	r3, sp
   12ac8:	mvn	r2, #0
   12acc:	mov	r1, r5
   12ad0:	mov	r0, r4
   12ad4:	bl	125f0 <__assert_fail@plt+0x1794>
   12ad8:	add	sp, sp, #52	; 0x34
   12adc:	pop	{r4, r5, pc}
   12ae0:	push	{r4, r5, r6, lr}
   12ae4:	sub	sp, sp, #48	; 0x30
   12ae8:	mov	r5, r2
   12aec:	mov	r6, r3
   12af0:	mov	r4, r0
   12af4:	mov	r0, sp
   12af8:	bl	11778 <__assert_fail@plt+0x91c>
   12afc:	mov	r3, sp
   12b00:	mov	r2, r6
   12b04:	mov	r1, r5
   12b08:	mov	r0, r4
   12b0c:	bl	125f0 <__assert_fail@plt+0x1794>
   12b10:	add	sp, sp, #48	; 0x30
   12b14:	pop	{r4, r5, r6, pc}
   12b18:	mov	r2, r1
   12b1c:	mov	r1, r0
   12b20:	mov	r0, #0
   12b24:	b	12aac <__assert_fail@plt+0x1c50>
   12b28:	mov	r3, r2
   12b2c:	mov	r2, r1
   12b30:	mov	r1, r0
   12b34:	mov	r0, #0
   12b38:	b	12ae0 <__assert_fail@plt+0x1c84>
   12b3c:	push	{r4, r5, r6, lr}
   12b40:	mov	r4, r0
   12b44:	ldr	lr, [pc, #80]	; 12b9c <__assert_fail@plt+0x1d40>
   12b48:	mov	r5, r1
   12b4c:	mov	r6, r2
   12b50:	ldm	lr!, {r0, r1, r2, r3}
   12b54:	sub	sp, sp, #48	; 0x30
   12b58:	mov	ip, sp
   12b5c:	stmia	ip!, {r0, r1, r2, r3}
   12b60:	ldm	lr!, {r0, r1, r2, r3}
   12b64:	stmia	ip!, {r0, r1, r2, r3}
   12b68:	ldm	lr, {r0, r1, r2, r3}
   12b6c:	stm	ip, {r0, r1, r2, r3}
   12b70:	mov	r1, r6
   12b74:	mov	r2, #1
   12b78:	mov	r0, sp
   12b7c:	bl	127fc <__assert_fail@plt+0x19a0>
   12b80:	mov	r3, sp
   12b84:	mov	r2, r5
   12b88:	mov	r1, r4
   12b8c:	mov	r0, #0
   12b90:	bl	125f0 <__assert_fail@plt+0x1794>
   12b94:	add	sp, sp, #48	; 0x30
   12b98:	pop	{r4, r5, r6, pc}
   12b9c:	andeq	r5, r2, r4, asr r2
   12ba0:	mov	r2, r1
   12ba4:	mvn	r1, #0
   12ba8:	b	12b3c <__assert_fail@plt+0x1ce0>
   12bac:	mov	r1, #58	; 0x3a
   12bb0:	b	12ba0 <__assert_fail@plt+0x1d44>
   12bb4:	mov	r2, #58	; 0x3a
   12bb8:	b	12b3c <__assert_fail@plt+0x1ce0>
   12bbc:	push	{r4, r5, lr}
   12bc0:	sub	sp, sp, #100	; 0x64
   12bc4:	mov	r4, r0
   12bc8:	mov	r0, sp
   12bcc:	mov	r5, r2
   12bd0:	bl	11778 <__assert_fail@plt+0x91c>
   12bd4:	mov	ip, sp
   12bd8:	add	lr, sp, #48	; 0x30
   12bdc:	ldm	ip!, {r0, r1, r2, r3}
   12be0:	stmia	lr!, {r0, r1, r2, r3}
   12be4:	ldm	ip!, {r0, r1, r2, r3}
   12be8:	stmia	lr!, {r0, r1, r2, r3}
   12bec:	ldm	ip, {r0, r1, r2, r3}
   12bf0:	stm	lr, {r0, r1, r2, r3}
   12bf4:	mov	r2, #1
   12bf8:	mov	r1, #58	; 0x3a
   12bfc:	add	r0, sp, #48	; 0x30
   12c00:	bl	127fc <__assert_fail@plt+0x19a0>
   12c04:	add	r3, sp, #48	; 0x30
   12c08:	mvn	r2, #0
   12c0c:	mov	r1, r5
   12c10:	mov	r0, r4
   12c14:	bl	125f0 <__assert_fail@plt+0x1794>
   12c18:	add	sp, sp, #100	; 0x64
   12c1c:	pop	{r4, r5, pc}
   12c20:	push	{r4, r5, r6, r7, lr}
   12c24:	mov	r4, r0
   12c28:	ldr	lr, [pc, #84]	; 12c84 <__assert_fail@plt+0x1e28>
   12c2c:	mov	r6, r1
   12c30:	mov	r7, r2
   12c34:	mov	r5, r3
   12c38:	ldm	lr!, {r0, r1, r2, r3}
   12c3c:	sub	sp, sp, #52	; 0x34
   12c40:	mov	ip, sp
   12c44:	stmia	ip!, {r0, r1, r2, r3}
   12c48:	ldm	lr!, {r0, r1, r2, r3}
   12c4c:	stmia	ip!, {r0, r1, r2, r3}
   12c50:	ldm	lr, {r0, r1, r2, r3}
   12c54:	stm	ip, {r0, r1, r2, r3}
   12c58:	mov	r2, r7
   12c5c:	mov	r1, r6
   12c60:	mov	r0, sp
   12c64:	bl	12858 <__assert_fail@plt+0x19fc>
   12c68:	mov	r3, sp
   12c6c:	ldr	r2, [sp, #72]	; 0x48
   12c70:	mov	r1, r5
   12c74:	mov	r0, r4
   12c78:	bl	125f0 <__assert_fail@plt+0x1794>
   12c7c:	add	sp, sp, #52	; 0x34
   12c80:	pop	{r4, r5, r6, r7, pc}
   12c84:	andeq	r5, r2, r4, asr r2
   12c88:	mvn	ip, #0
   12c8c:	push	{r0, r1, r2, lr}
   12c90:	str	ip, [sp]
   12c94:	bl	12c20 <__assert_fail@plt+0x1dc4>
   12c98:	add	sp, sp, #12
   12c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   12ca0:	mov	r3, r2
   12ca4:	mov	r2, r1
   12ca8:	mov	r1, r0
   12cac:	mov	r0, #0
   12cb0:	b	12c88 <__assert_fail@plt+0x1e2c>
   12cb4:	push	{r0, r1, r2, lr}
   12cb8:	str	r3, [sp]
   12cbc:	mov	r3, r2
   12cc0:	mov	r2, r1
   12cc4:	mov	r1, r0
   12cc8:	mov	r0, #0
   12ccc:	bl	12c20 <__assert_fail@plt+0x1dc4>
   12cd0:	add	sp, sp, #12
   12cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   12cd8:	ldr	r3, [pc]	; 12ce0 <__assert_fail@plt+0x1e84>
   12cdc:	b	125f0 <__assert_fail@plt+0x1794>
   12ce0:	strdeq	r5, [r2], -r8
   12ce4:	mov	r2, r1
   12ce8:	mov	r1, r0
   12cec:	mov	r0, #0
   12cf0:	b	12cd8 <__assert_fail@plt+0x1e7c>
   12cf4:	mvn	r2, #0
   12cf8:	b	12cd8 <__assert_fail@plt+0x1e7c>
   12cfc:	mov	r1, r0
   12d00:	mov	r0, #0
   12d04:	b	12cf4 <__assert_fail@plt+0x1e98>
   12d08:	push	{r4, r5, r6, lr}
   12d0c:	sub	sp, sp, #32
   12d10:	cmp	r1, #0
   12d14:	mov	r5, r0
   12d18:	ldr	r4, [sp, #48]	; 0x30
   12d1c:	ldr	r6, [sp, #52]	; 0x34
   12d20:	beq	12dd4 <__assert_fail@plt+0x1f78>
   12d24:	stm	sp, {r2, r3}
   12d28:	mov	r3, r1
   12d2c:	ldr	r2, [pc, #860]	; 13090 <__assert_fail@plt+0x2234>
   12d30:	mov	r1, #1
   12d34:	bl	10de4 <__fprintf_chk@plt>
   12d38:	mov	r2, #5
   12d3c:	ldr	r1, [pc, #848]	; 13094 <__assert_fail@plt+0x2238>
   12d40:	mov	r0, #0
   12d44:	bl	10cac <dcgettext@plt>
   12d48:	ldr	r3, [pc, #840]	; 13098 <__assert_fail@plt+0x223c>
   12d4c:	ldr	r2, [pc, #840]	; 1309c <__assert_fail@plt+0x2240>
   12d50:	str	r3, [sp]
   12d54:	mov	r1, #1
   12d58:	mov	r3, r0
   12d5c:	mov	r0, r5
   12d60:	bl	10de4 <__fprintf_chk@plt>
   12d64:	mov	r1, r5
   12d68:	mov	r0, #10
   12d6c:	bl	10ca0 <fputc_unlocked@plt>
   12d70:	mov	r2, #5
   12d74:	ldr	r1, [pc, #804]	; 130a0 <__assert_fail@plt+0x2244>
   12d78:	mov	r0, #0
   12d7c:	bl	10cac <dcgettext@plt>
   12d80:	mov	r1, #1
   12d84:	ldr	r3, [pc, #792]	; 130a4 <__assert_fail@plt+0x2248>
   12d88:	mov	r2, r0
   12d8c:	mov	r0, r5
   12d90:	bl	10de4 <__fprintf_chk@plt>
   12d94:	mov	r1, r5
   12d98:	mov	r0, #10
   12d9c:	bl	10ca0 <fputc_unlocked@plt>
   12da0:	cmp	r6, #9
   12da4:	ldrls	pc, [pc, r6, lsl #2]
   12da8:	b	13084 <__assert_fail@plt+0x2228>
   12dac:	andeq	r2, r1, r4, asr #29
   12db0:	andeq	r2, r1, ip, ror #27
   12db4:	andeq	r2, r1, r8, lsl lr
   12db8:	andeq	r2, r1, ip, asr #28
   12dbc:	andeq	r2, r1, r8, lsl #29
   12dc0:	andeq	r2, r1, ip, asr #29
   12dc4:	andeq	r2, r1, r4, lsl pc
   12dc8:	andeq	r2, r1, r4, ror #30
   12dcc:			; <UNDEFINED> instruction: 0x00012fbc
   12dd0:	andeq	r3, r1, ip, lsl r0
   12dd4:	str	r3, [sp]
   12dd8:	mov	r1, #1
   12ddc:	mov	r3, r2
   12de0:	ldr	r2, [pc, #704]	; 130a8 <__assert_fail@plt+0x224c>
   12de4:	bl	10de4 <__fprintf_chk@plt>
   12de8:	b	12d38 <__assert_fail@plt+0x1edc>
   12dec:	mov	r2, #5
   12df0:	ldr	r1, [pc, #692]	; 130ac <__assert_fail@plt+0x2250>
   12df4:	mov	r0, #0
   12df8:	bl	10cac <dcgettext@plt>
   12dfc:	ldr	r3, [r4]
   12e00:	mov	r1, #1
   12e04:	mov	r2, r0
   12e08:	mov	r0, r5
   12e0c:	add	sp, sp, #32
   12e10:	pop	{r4, r5, r6, lr}
   12e14:	b	10de4 <__fprintf_chk@plt>
   12e18:	mov	r2, #5
   12e1c:	ldr	r1, [pc, #652]	; 130b0 <__assert_fail@plt+0x2254>
   12e20:	mov	r0, #0
   12e24:	bl	10cac <dcgettext@plt>
   12e28:	ldr	r3, [r4, #4]
   12e2c:	mov	r1, #1
   12e30:	str	r3, [sp, #48]	; 0x30
   12e34:	ldr	r3, [r4]
   12e38:	mov	r2, r0
   12e3c:	mov	r0, r5
   12e40:	add	sp, sp, #32
   12e44:	pop	{r4, r5, r6, lr}
   12e48:	b	10de4 <__fprintf_chk@plt>
   12e4c:	mov	r2, #5
   12e50:	ldr	r1, [pc, #604]	; 130b4 <__assert_fail@plt+0x2258>
   12e54:	mov	r0, #0
   12e58:	bl	10cac <dcgettext@plt>
   12e5c:	ldr	r3, [r4, #8]
   12e60:	mov	r1, #1
   12e64:	str	r3, [sp, #52]	; 0x34
   12e68:	ldr	r3, [r4, #4]
   12e6c:	str	r3, [sp, #48]	; 0x30
   12e70:	ldr	r3, [r4]
   12e74:	mov	r2, r0
   12e78:	mov	r0, r5
   12e7c:	add	sp, sp, #32
   12e80:	pop	{r4, r5, r6, lr}
   12e84:	b	10de4 <__fprintf_chk@plt>
   12e88:	mov	r2, #5
   12e8c:	ldr	r1, [pc, #548]	; 130b8 <__assert_fail@plt+0x225c>
   12e90:	mov	r0, #0
   12e94:	bl	10cac <dcgettext@plt>
   12e98:	ldr	r3, [r4, #12]
   12e9c:	mov	r1, #1
   12ea0:	str	r3, [sp, #8]
   12ea4:	ldr	r3, [r4, #8]
   12ea8:	str	r3, [sp, #4]
   12eac:	ldr	r3, [r4, #4]
   12eb0:	str	r3, [sp]
   12eb4:	ldr	r3, [r4]
   12eb8:	mov	r2, r0
   12ebc:	mov	r0, r5
   12ec0:	bl	10de4 <__fprintf_chk@plt>
   12ec4:	add	sp, sp, #32
   12ec8:	pop	{r4, r5, r6, pc}
   12ecc:	mov	r2, #5
   12ed0:	ldr	r1, [pc, #484]	; 130bc <__assert_fail@plt+0x2260>
   12ed4:	mov	r0, #0
   12ed8:	bl	10cac <dcgettext@plt>
   12edc:	ldr	r3, [r4, #16]
   12ee0:	mov	r1, #1
   12ee4:	str	r3, [sp, #12]
   12ee8:	ldr	r3, [r4, #12]
   12eec:	str	r3, [sp, #8]
   12ef0:	ldr	r3, [r4, #8]
   12ef4:	str	r3, [sp, #4]
   12ef8:	ldr	r3, [r4, #4]
   12efc:	str	r3, [sp]
   12f00:	ldr	r3, [r4]
   12f04:	mov	r2, r0
   12f08:	mov	r0, r5
   12f0c:	bl	10de4 <__fprintf_chk@plt>
   12f10:	b	12ec4 <__assert_fail@plt+0x2068>
   12f14:	mov	r2, #5
   12f18:	ldr	r1, [pc, #416]	; 130c0 <__assert_fail@plt+0x2264>
   12f1c:	mov	r0, #0
   12f20:	bl	10cac <dcgettext@plt>
   12f24:	ldr	r3, [r4, #20]
   12f28:	mov	r1, #1
   12f2c:	str	r3, [sp, #16]
   12f30:	ldr	r3, [r4, #16]
   12f34:	str	r3, [sp, #12]
   12f38:	ldr	r3, [r4, #12]
   12f3c:	str	r3, [sp, #8]
   12f40:	ldr	r3, [r4, #8]
   12f44:	str	r3, [sp, #4]
   12f48:	ldr	r3, [r4, #4]
   12f4c:	str	r3, [sp]
   12f50:	ldr	r3, [r4]
   12f54:	mov	r2, r0
   12f58:	mov	r0, r5
   12f5c:	bl	10de4 <__fprintf_chk@plt>
   12f60:	b	12ec4 <__assert_fail@plt+0x2068>
   12f64:	mov	r2, #5
   12f68:	ldr	r1, [pc, #340]	; 130c4 <__assert_fail@plt+0x2268>
   12f6c:	mov	r0, #0
   12f70:	bl	10cac <dcgettext@plt>
   12f74:	ldr	r3, [r4, #24]
   12f78:	mov	r1, #1
   12f7c:	str	r3, [sp, #20]
   12f80:	ldr	r3, [r4, #20]
   12f84:	str	r3, [sp, #16]
   12f88:	ldr	r3, [r4, #16]
   12f8c:	str	r3, [sp, #12]
   12f90:	ldr	r3, [r4, #12]
   12f94:	str	r3, [sp, #8]
   12f98:	ldr	r3, [r4, #8]
   12f9c:	str	r3, [sp, #4]
   12fa0:	ldr	r3, [r4, #4]
   12fa4:	str	r3, [sp]
   12fa8:	ldr	r3, [r4]
   12fac:	mov	r2, r0
   12fb0:	mov	r0, r5
   12fb4:	bl	10de4 <__fprintf_chk@plt>
   12fb8:	b	12ec4 <__assert_fail@plt+0x2068>
   12fbc:	mov	r2, #5
   12fc0:	ldr	r1, [pc, #256]	; 130c8 <__assert_fail@plt+0x226c>
   12fc4:	mov	r0, #0
   12fc8:	bl	10cac <dcgettext@plt>
   12fcc:	ldr	r3, [r4, #28]
   12fd0:	mov	r1, #1
   12fd4:	str	r3, [sp, #24]
   12fd8:	ldr	r3, [r4, #24]
   12fdc:	str	r3, [sp, #20]
   12fe0:	ldr	r3, [r4, #20]
   12fe4:	str	r3, [sp, #16]
   12fe8:	ldr	r3, [r4, #16]
   12fec:	str	r3, [sp, #12]
   12ff0:	ldr	r3, [r4, #12]
   12ff4:	str	r3, [sp, #8]
   12ff8:	ldr	r3, [r4, #8]
   12ffc:	str	r3, [sp, #4]
   13000:	ldr	r3, [r4, #4]
   13004:	str	r3, [sp]
   13008:	ldr	r3, [r4]
   1300c:	mov	r2, r0
   13010:	mov	r0, r5
   13014:	bl	10de4 <__fprintf_chk@plt>
   13018:	b	12ec4 <__assert_fail@plt+0x2068>
   1301c:	ldr	r1, [pc, #168]	; 130cc <__assert_fail@plt+0x2270>
   13020:	mov	r2, #5
   13024:	mov	r0, #0
   13028:	bl	10cac <dcgettext@plt>
   1302c:	ldr	r3, [r4, #32]
   13030:	mov	r1, #1
   13034:	str	r3, [sp, #28]
   13038:	ldr	r3, [r4, #28]
   1303c:	str	r3, [sp, #24]
   13040:	ldr	r3, [r4, #24]
   13044:	str	r3, [sp, #20]
   13048:	ldr	r3, [r4, #20]
   1304c:	str	r3, [sp, #16]
   13050:	ldr	r3, [r4, #16]
   13054:	str	r3, [sp, #12]
   13058:	ldr	r3, [r4, #12]
   1305c:	str	r3, [sp, #8]
   13060:	ldr	r3, [r4, #8]
   13064:	str	r3, [sp, #4]
   13068:	ldr	r3, [r4, #4]
   1306c:	str	r3, [sp]
   13070:	ldr	r3, [r4]
   13074:	mov	r2, r0
   13078:	mov	r0, r5
   1307c:	bl	10de4 <__fprintf_chk@plt>
   13080:	b	12ec4 <__assert_fail@plt+0x2068>
   13084:	mov	r2, #5
   13088:	ldr	r1, [pc, #64]	; 130d0 <__assert_fail@plt+0x2274>
   1308c:	b	13024 <__assert_fail@plt+0x21c8>
   13090:	strdeq	r4, [r1], -r5
   13094:	andeq	r4, r1, r8, lsl #22
   13098:	andeq	r0, r0, r6, ror #15
   1309c:	ldrdeq	r4, [r1], -r6
   130a0:	andeq	r4, r1, ip, lsl #22
   130a4:			; <UNDEFINED> instruction: 0x00014bb7
   130a8:	andeq	r4, r1, r1, lsl #22
   130ac:	ldrdeq	r4, [r1], -r9
   130b0:	andeq	r4, r1, r9, ror #23
   130b4:	andeq	r4, r1, r0, lsl #24
   130b8:	andeq	r4, r1, ip, lsl ip
   130bc:	andeq	r4, r1, ip, lsr ip
   130c0:	andeq	r4, r1, r0, ror #24
   130c4:	andeq	r4, r1, r8, lsl #25
   130c8:			; <UNDEFINED> instruction: 0x00014cb4
   130cc:	andeq	r4, r1, r4, ror #25
   130d0:	andeq	r4, r1, r8, lsl sp
   130d4:	push	{r0, r1, r4, lr}
   130d8:	mov	ip, #0
   130dc:	ldr	lr, [sp, #16]
   130e0:	ldr	r4, [lr, ip, lsl #2]
   130e4:	cmp	r4, #0
   130e8:	bne	13100 <__assert_fail@plt+0x22a4>
   130ec:	str	ip, [sp, #4]
   130f0:	str	lr, [sp]
   130f4:	bl	12d08 <__assert_fail@plt+0x1eac>
   130f8:	add	sp, sp, #8
   130fc:	pop	{r4, pc}
   13100:	add	ip, ip, #1
   13104:	b	130e0 <__assert_fail@plt+0x2284>
   13108:	push	{r4, r5, lr}
   1310c:	sub	sp, sp, #52	; 0x34
   13110:	mov	ip, #0
   13114:	ldr	r5, [sp, #64]	; 0x40
   13118:	add	lr, sp, #8
   1311c:	ldr	r4, [r5, ip, lsl #2]
   13120:	cmp	r4, #0
   13124:	str	r4, [lr, ip, lsl #2]
   13128:	beq	13138 <__assert_fail@plt+0x22dc>
   1312c:	add	ip, ip, #1
   13130:	cmp	ip, #10
   13134:	bne	1311c <__assert_fail@plt+0x22c0>
   13138:	str	ip, [sp, #4]
   1313c:	str	lr, [sp]
   13140:	bl	12d08 <__assert_fail@plt+0x1eac>
   13144:	add	sp, sp, #52	; 0x34
   13148:	pop	{r4, r5, pc}
   1314c:	push	{r3}		; (str r3, [sp, #-4]!)
   13150:	push	{r0, r1, r2, r3, lr}
   13154:	add	r3, sp, #24
   13158:	str	r3, [sp, #12]
   1315c:	str	r3, [sp]
   13160:	ldr	r3, [sp, #20]
   13164:	bl	13108 <__assert_fail@plt+0x22ac>
   13168:	add	sp, sp, #16
   1316c:	pop	{lr}		; (ldr lr, [sp], #4)
   13170:	add	sp, sp, #4
   13174:	bx	lr
   13178:	ldr	r3, [pc, #116]	; 131f4 <__assert_fail@plt+0x2398>
   1317c:	push	{r4, lr}
   13180:	mov	r0, #10
   13184:	ldr	r1, [r3]
   13188:	bl	10ca0 <fputc_unlocked@plt>
   1318c:	mov	r2, #5
   13190:	ldr	r1, [pc, #96]	; 131f8 <__assert_fail@plt+0x239c>
   13194:	mov	r0, #0
   13198:	bl	10cac <dcgettext@plt>
   1319c:	ldr	r2, [pc, #88]	; 131fc <__assert_fail@plt+0x23a0>
   131a0:	mov	r1, r0
   131a4:	mov	r0, #1
   131a8:	bl	10dcc <__printf_chk@plt>
   131ac:	mov	r2, #5
   131b0:	ldr	r1, [pc, #72]	; 13200 <__assert_fail@plt+0x23a4>
   131b4:	mov	r0, #0
   131b8:	bl	10cac <dcgettext@plt>
   131bc:	ldr	r3, [pc, #64]	; 13204 <__assert_fail@plt+0x23a8>
   131c0:	ldr	r2, [pc, #64]	; 13208 <__assert_fail@plt+0x23ac>
   131c4:	mov	r1, r0
   131c8:	mov	r0, #1
   131cc:	bl	10dcc <__printf_chk@plt>
   131d0:	mov	r2, #5
   131d4:	ldr	r1, [pc, #48]	; 1320c <__assert_fail@plt+0x23b0>
   131d8:	mov	r0, #0
   131dc:	bl	10cac <dcgettext@plt>
   131e0:	ldr	r2, [pc, #40]	; 13210 <__assert_fail@plt+0x23b4>
   131e4:	pop	{r4, lr}
   131e8:	mov	r1, r0
   131ec:	mov	r0, #1
   131f0:	b	10dcc <__printf_chk@plt>
   131f4:	andeq	r5, r2, ip, lsr r1
   131f8:	andeq	r4, r1, r4, asr sp
   131fc:	andeq	r4, r1, r8, ror #26
   13200:	andeq	r4, r1, lr, ror sp
   13204:	andeq	r4, r1, r4, lsl #16
   13208:	andeq	r4, r1, ip, lsr #16
   1320c:	muleq	r1, r2, sp
   13210:			; <UNDEFINED> instruction: 0x00014db9
   13214:	push	{r4, lr}
   13218:	bl	13b14 <__assert_fail@plt+0x2cb8>
   1321c:	cmp	r0, #0
   13220:	popne	{r4, pc}
   13224:	bl	136a8 <__assert_fail@plt+0x284c>
   13228:	push	{r4, lr}
   1322c:	bl	13b14 <__assert_fail@plt+0x2cb8>
   13230:	cmp	r0, #0
   13234:	popne	{r4, pc}
   13238:	bl	136a8 <__assert_fail@plt+0x284c>
   1323c:	b	13214 <__assert_fail@plt+0x23b8>
   13240:	push	{r4, r5, r6, lr}
   13244:	mov	r5, r0
   13248:	mov	r4, r1
   1324c:	bl	13b54 <__assert_fail@plt+0x2cf8>
   13250:	cmp	r0, #0
   13254:	popne	{r4, r5, r6, pc}
   13258:	adds	r4, r4, #0
   1325c:	movne	r4, #1
   13260:	cmp	r5, #0
   13264:	orreq	r4, r4, #1
   13268:	cmp	r4, #0
   1326c:	popeq	{r4, r5, r6, pc}
   13270:	bl	136a8 <__assert_fail@plt+0x284c>
   13274:	push	{r4, lr}
   13278:	cmp	r1, #0
   1327c:	orreq	r1, r1, #1
   13280:	bl	13b54 <__assert_fail@plt+0x2cf8>
   13284:	cmp	r0, #0
   13288:	popne	{r4, pc}
   1328c:	bl	136a8 <__assert_fail@plt+0x284c>
   13290:	push	{r4, r5, r6, lr}
   13294:	mov	r6, r0
   13298:	mov	r5, r1
   1329c:	mov	r4, r2
   132a0:	bl	13e84 <__assert_fail@plt+0x3028>
   132a4:	cmp	r0, #0
   132a8:	popne	{r4, r5, r6, pc}
   132ac:	cmp	r6, #0
   132b0:	beq	132c0 <__assert_fail@plt+0x2464>
   132b4:	cmp	r5, #0
   132b8:	cmpne	r4, #0
   132bc:	popeq	{r4, r5, r6, pc}
   132c0:	bl	136a8 <__assert_fail@plt+0x284c>
   132c4:	b	13290 <__assert_fail@plt+0x2434>
   132c8:	cmp	r2, #0
   132cc:	cmpne	r1, #0
   132d0:	moveq	r2, #1
   132d4:	moveq	r1, r2
   132d8:	push	{r4, lr}
   132dc:	bl	13e84 <__assert_fail@plt+0x3028>
   132e0:	cmp	r0, #0
   132e4:	popne	{r4, pc}
   132e8:	bl	136a8 <__assert_fail@plt+0x284c>
   132ec:	mov	r2, r1
   132f0:	mov	r1, r0
   132f4:	mov	r0, #0
   132f8:	b	13290 <__assert_fail@plt+0x2434>
   132fc:	mov	r2, r1
   13300:	mov	r1, r0
   13304:	mov	r0, #0
   13308:	b	132c8 <__assert_fail@plt+0x246c>
   1330c:	push	{r4, r5, r6, r7, r8, lr}
   13310:	subs	r7, r0, #0
   13314:	mov	r5, r1
   13318:	mov	r6, r2
   1331c:	ldr	r4, [r1]
   13320:	bne	1335c <__assert_fail@plt+0x2500>
   13324:	cmp	r4, #0
   13328:	bne	13344 <__assert_fail@plt+0x24e8>
   1332c:	mov	r1, r2
   13330:	mov	r0, #64	; 0x40
   13334:	bl	13fb0 <__assert_fail@plt+0x3154>
   13338:	cmp	r0, #0
   1333c:	movne	r4, r0
   13340:	addeq	r4, r0, #1
   13344:	mov	r2, r6
   13348:	mov	r1, r4
   1334c:	mov	r0, r7
   13350:	bl	13290 <__assert_fail@plt+0x2434>
   13354:	str	r4, [r5]
   13358:	pop	{r4, r5, r6, r7, r8, pc}
   1335c:	lsr	r2, r4, #1
   13360:	add	r3, r2, #1
   13364:	mvn	r3, r3
   13368:	cmp	r4, r3
   1336c:	addls	r4, r4, #1
   13370:	addls	r4, r4, r2
   13374:	bls	13344 <__assert_fail@plt+0x24e8>
   13378:	bl	136a8 <__assert_fail@plt+0x284c>
   1337c:	mov	r2, #1
   13380:	b	1330c <__assert_fail@plt+0x24b0>
   13384:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13388:	mov	sl, r0
   1338c:	ldr	r8, [r1]
   13390:	mov	fp, r1
   13394:	mov	r5, r2
   13398:	asrs	r4, r8, #1
   1339c:	mov	r9, r3
   133a0:	ldr	r7, [sp, #48]	; 0x30
   133a4:	bpl	13440 <__assert_fail@plt+0x25e4>
   133a8:	rsb	r2, r4, #-2147483648	; 0x80000000
   133ac:	cmp	r8, r2
   133b0:	movge	r2, #0
   133b4:	movlt	r2, #1
   133b8:	mvn	r3, r9
   133bc:	cmp	r2, #0
   133c0:	lsr	r3, r3, #31
   133c4:	addeq	r4, r4, r8
   133c8:	mvnne	r4, #-2147483648	; 0x80000000
   133cc:	mov	r0, r3
   133d0:	cmp	r9, r4
   133d4:	movge	r0, #0
   133d8:	andlt	r0, r0, #1
   133dc:	cmp	r0, #0
   133e0:	str	r3, [sp, #4]
   133e4:	bne	135b4 <__assert_fail@plt+0x2758>
   133e8:	cmp	r7, #0
   133ec:	bge	13500 <__assert_fail@plt+0x26a4>
   133f0:	cmp	r4, #0
   133f4:	bge	13458 <__assert_fail@plt+0x25fc>
   133f8:	mov	r1, r7
   133fc:	mvn	r0, #-2147483648	; 0x80000000
   13400:	bl	141bc <__assert_fail@plt+0x3360>
   13404:	cmp	r0, r4
   13408:	movle	r0, #0
   1340c:	movgt	r0, #1
   13410:	cmp	r0, #0
   13414:	mvnne	r6, #-2147483648	; 0x80000000
   13418:	beq	13468 <__assert_fail@plt+0x260c>
   1341c:	mov	r1, r7
   13420:	mov	r0, r6
   13424:	bl	141bc <__assert_fail@plt+0x3360>
   13428:	mov	r1, r7
   1342c:	mov	r4, r0
   13430:	mov	r0, r6
   13434:	bl	143dc <__assert_fail@plt+0x3580>
   13438:	sub	r1, r6, r1
   1343c:	b	13478 <__assert_fail@plt+0x261c>
   13440:	mvn	r2, #-2147483648	; 0x80000000
   13444:	sub	r2, r2, r4
   13448:	cmp	r8, r2
   1344c:	movle	r2, #0
   13450:	movgt	r2, #1
   13454:	b	133b8 <__assert_fail@plt+0x255c>
   13458:	cmn	r7, #1
   1345c:	movne	r1, r7
   13460:	movne	r0, #-2147483648	; 0x80000000
   13464:	bne	135cc <__assert_fail@plt+0x2770>
   13468:	mul	r1, r7, r4
   1346c:	cmp	r1, #63	; 0x3f
   13470:	movle	r6, #64	; 0x40
   13474:	ble	1341c <__assert_fail@plt+0x25c0>
   13478:	cmp	sl, #0
   1347c:	sub	r2, r4, r8
   13480:	streq	sl, [fp]
   13484:	cmp	r2, r5
   13488:	bge	1355c <__assert_fail@plt+0x2700>
   1348c:	cmp	r5, #0
   13490:	bge	13528 <__assert_fail@plt+0x26cc>
   13494:	rsb	r2, r5, #-2147483648	; 0x80000000
   13498:	cmp	r8, r2
   1349c:	movge	r2, #0
   134a0:	movlt	r2, #1
   134a4:	cmp	r2, #0
   134a8:	bne	134fc <__assert_fail@plt+0x26a0>
   134ac:	ldr	r0, [sp, #4]
   134b0:	add	r5, r8, r5
   134b4:	cmp	r9, r5
   134b8:	movge	r0, #0
   134bc:	andlt	r0, r0, #1
   134c0:	cmp	r0, #0
   134c4:	mov	r4, r5
   134c8:	bne	134fc <__assert_fail@plt+0x26a0>
   134cc:	cmp	r7, #0
   134d0:	bge	13570 <__assert_fail@plt+0x2714>
   134d4:	cmp	r5, #0
   134d8:	bge	13548 <__assert_fail@plt+0x26ec>
   134dc:	mov	r1, r7
   134e0:	mvn	r0, #-2147483648	; 0x80000000
   134e4:	bl	141bc <__assert_fail@plt+0x3360>
   134e8:	cmp	r5, r0
   134ec:	movge	r0, #0
   134f0:	movlt	r0, #1
   134f4:	cmp	r0, #0
   134f8:	beq	13558 <__assert_fail@plt+0x26fc>
   134fc:	bl	136a8 <__assert_fail@plt+0x284c>
   13500:	beq	13468 <__assert_fail@plt+0x260c>
   13504:	cmp	r4, #0
   13508:	bge	135c4 <__assert_fail@plt+0x2768>
   1350c:	cmn	r4, #1
   13510:	beq	13468 <__assert_fail@plt+0x260c>
   13514:	mov	r1, r4
   13518:	mov	r0, #-2147483648	; 0x80000000
   1351c:	bl	141bc <__assert_fail@plt+0x3360>
   13520:	cmp	r7, r0
   13524:	b	13408 <__assert_fail@plt+0x25ac>
   13528:	cmp	r8, #0
   1352c:	blt	134ac <__assert_fail@plt+0x2650>
   13530:	mvn	r2, #-2147483648	; 0x80000000
   13534:	sub	r2, r2, r5
   13538:	cmp	r8, r2
   1353c:	movle	r2, #0
   13540:	movgt	r2, #1
   13544:	b	134a4 <__assert_fail@plt+0x2648>
   13548:	cmn	r7, #1
   1354c:	movne	r1, r7
   13550:	movne	r0, #-2147483648	; 0x80000000
   13554:	bne	135a8 <__assert_fail@plt+0x274c>
   13558:	mul	r1, r5, r7
   1355c:	mov	r0, sl
   13560:	bl	13240 <__assert_fail@plt+0x23e4>
   13564:	str	r4, [fp]
   13568:	add	sp, sp, #12
   1356c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13570:	beq	13558 <__assert_fail@plt+0x26fc>
   13574:	cmp	r5, #0
   13578:	movge	r1, r7
   1357c:	mvnge	r0, #-2147483648	; 0x80000000
   13580:	bge	135a8 <__assert_fail@plt+0x274c>
   13584:	cmn	r5, #1
   13588:	beq	13558 <__assert_fail@plt+0x26fc>
   1358c:	mov	r1, r5
   13590:	mov	r0, #-2147483648	; 0x80000000
   13594:	bl	141bc <__assert_fail@plt+0x3360>
   13598:	cmp	r7, r0
   1359c:	movle	r0, #0
   135a0:	movgt	r0, #1
   135a4:	b	134f4 <__assert_fail@plt+0x2698>
   135a8:	bl	141bc <__assert_fail@plt+0x3360>
   135ac:	cmp	r5, r0
   135b0:	b	1359c <__assert_fail@plt+0x2740>
   135b4:	cmp	r7, #0
   135b8:	mov	r4, r9
   135bc:	blt	13458 <__assert_fail@plt+0x25fc>
   135c0:	beq	13468 <__assert_fail@plt+0x260c>
   135c4:	mov	r1, r7
   135c8:	mvn	r0, #-2147483648	; 0x80000000
   135cc:	bl	141bc <__assert_fail@plt+0x3360>
   135d0:	cmp	r0, r4
   135d4:	movge	r0, #0
   135d8:	movlt	r0, #1
   135dc:	b	13410 <__assert_fail@plt+0x25b4>
   135e0:	push	{r4, lr}
   135e4:	bl	13acc <__assert_fail@plt+0x2c70>
   135e8:	cmp	r0, #0
   135ec:	popne	{r4, pc}
   135f0:	bl	136a8 <__assert_fail@plt+0x284c>
   135f4:	mov	r1, #1
   135f8:	b	135e0 <__assert_fail@plt+0x2784>
   135fc:	push	{r4, lr}
   13600:	bl	13acc <__assert_fail@plt+0x2c70>
   13604:	cmp	r0, #0
   13608:	popne	{r4, pc}
   1360c:	bl	136a8 <__assert_fail@plt+0x284c>
   13610:	mov	r1, #1
   13614:	b	135fc <__assert_fail@plt+0x27a0>
   13618:	push	{r4, r5, r6, lr}
   1361c:	mov	r4, r1
   13620:	mov	r5, r0
   13624:	mov	r0, r1
   13628:	bl	13214 <__assert_fail@plt+0x23b8>
   1362c:	mov	r2, r4
   13630:	mov	r1, r5
   13634:	pop	{r4, r5, r6, lr}
   13638:	b	10c70 <memcpy@plt>
   1363c:	push	{r4, r5, r6, lr}
   13640:	mov	r4, r1
   13644:	mov	r5, r0
   13648:	mov	r0, r1
   1364c:	bl	13228 <__assert_fail@plt+0x23cc>
   13650:	mov	r2, r4
   13654:	mov	r1, r5
   13658:	pop	{r4, r5, r6, lr}
   1365c:	b	10c70 <memcpy@plt>
   13660:	push	{r4, r5, r6, lr}
   13664:	mov	r5, r0
   13668:	add	r0, r1, #1
   1366c:	mov	r4, r1
   13670:	bl	13228 <__assert_fail@plt+0x23cc>
   13674:	mov	r2, #0
   13678:	mov	r1, r5
   1367c:	strb	r2, [r0, r4]
   13680:	mov	r2, r4
   13684:	pop	{r4, r5, r6, lr}
   13688:	b	10c70 <memcpy@plt>
   1368c:	push	{r4, lr}
   13690:	mov	r4, r0
   13694:	bl	10d90 <strlen@plt>
   13698:	add	r1, r0, #1
   1369c:	mov	r0, r4
   136a0:	pop	{r4, lr}
   136a4:	b	13618 <__assert_fail@plt+0x27bc>
   136a8:	ldr	r3, [pc, #44]	; 136dc <__assert_fail@plt+0x2880>
   136ac:	push	{r4, lr}
   136b0:	mov	r2, #5
   136b4:	ldr	r1, [pc, #36]	; 136e0 <__assert_fail@plt+0x2884>
   136b8:	mov	r0, #0
   136bc:	ldr	r4, [r3]
   136c0:	bl	10cac <dcgettext@plt>
   136c4:	ldr	r2, [pc, #24]	; 136e4 <__assert_fail@plt+0x2888>
   136c8:	mov	r1, #0
   136cc:	mov	r3, r0
   136d0:	mov	r0, r4
   136d4:	bl	10d24 <error@plt>
   136d8:	bl	10e50 <abort@plt>
   136dc:	andeq	r5, r2, r4, ror #1
   136e0:	andeq	r4, r1, r5, lsl #28
   136e4:	strdeq	r4, [r1], -r7
   136e8:	push	{r4, r5, r6, lr}
   136ec:	subs	r5, r1, #0
   136f0:	mov	r6, r0
   136f4:	ldr	r4, [r0]
   136f8:	bge	1376c <__assert_fail@plt+0x2910>
   136fc:	cmp	r4, #0
   13700:	bge	13734 <__assert_fail@plt+0x28d8>
   13704:	mvn	r0, #-2147483648	; 0x80000000
   13708:	bl	141bc <__assert_fail@plt+0x3360>
   1370c:	cmp	r4, r0
   13710:	movge	r0, #0
   13714:	movlt	r0, #1
   13718:	cmp	r0, #0
   1371c:	movne	r3, #-2147483648	; 0x80000000
   13720:	bne	13760 <__assert_fail@plt+0x2904>
   13724:	mul	r4, r5, r4
   13728:	mov	r0, #0
   1372c:	str	r4, [r6]
   13730:	pop	{r4, r5, r6, pc}
   13734:	cmn	r5, #1
   13738:	movne	r0, #-2147483648	; 0x80000000
   1373c:	moveq	r0, #0
   13740:	beq	13754 <__assert_fail@plt+0x28f8>
   13744:	bl	141bc <__assert_fail@plt+0x3360>
   13748:	cmp	r4, r0
   1374c:	movle	r0, #0
   13750:	movgt	r0, #1
   13754:	cmp	r0, #0
   13758:	mvnne	r3, #-2147483648	; 0x80000000
   1375c:	beq	13724 <__assert_fail@plt+0x28c8>
   13760:	str	r3, [r6]
   13764:	mov	r0, #1
   13768:	pop	{r4, r5, r6, pc}
   1376c:	beq	13724 <__assert_fail@plt+0x28c8>
   13770:	cmp	r4, #0
   13774:	mvnge	r0, #-2147483648	; 0x80000000
   13778:	bge	13744 <__assert_fail@plt+0x28e8>
   1377c:	cmn	r4, #1
   13780:	beq	13724 <__assert_fail@plt+0x28c8>
   13784:	mov	r1, r4
   13788:	mov	r0, #-2147483648	; 0x80000000
   1378c:	bl	141bc <__assert_fail@plt+0x3360>
   13790:	cmp	r5, r0
   13794:	movle	r0, #0
   13798:	movgt	r0, #1
   1379c:	b	13718 <__assert_fail@plt+0x28bc>
   137a0:	push	{r4, r5, r6, r7, r8, lr}
   137a4:	mov	r6, r0
   137a8:	mov	r7, r1
   137ac:	mov	r5, r2
   137b0:	mov	r4, #0
   137b4:	cmp	r5, #0
   137b8:	bne	137c4 <__assert_fail@plt+0x2968>
   137bc:	mov	r0, r4
   137c0:	pop	{r4, r5, r6, r7, r8, pc}
   137c4:	mov	r1, r7
   137c8:	mov	r0, r6
   137cc:	bl	136e8 <__assert_fail@plt+0x288c>
   137d0:	sub	r5, r5, #1
   137d4:	orr	r4, r4, r0
   137d8:	b	137b4 <__assert_fail@plt+0x2958>
   137dc:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   137e0:	cmp	r2, #36	; 0x24
   137e4:	ldr	r9, [sp, #40]	; 0x28
   137e8:	bls	13800 <__assert_fail@plt+0x29a4>
   137ec:	ldr	r3, [pc, #716]	; 13ac0 <__assert_fail@plt+0x2c64>
   137f0:	mov	r2, #85	; 0x55
   137f4:	ldr	r1, [pc, #712]	; 13ac4 <__assert_fail@plt+0x2c68>
   137f8:	ldr	r0, [pc, #712]	; 13ac8 <__assert_fail@plt+0x2c6c>
   137fc:	bl	10e5c <__assert_fail@plt>
   13800:	cmp	r1, #0
   13804:	mov	r7, r1
   13808:	mov	sl, r0
   1380c:	moveq	r7, sp
   13810:	mov	r6, r2
   13814:	mov	r8, r3
   13818:	bl	10da8 <__errno_location@plt>
   1381c:	mov	r5, #0
   13820:	mov	r2, r6
   13824:	mov	r1, r7
   13828:	str	r5, [r0]
   1382c:	mov	r4, r0
   13830:	mov	r0, sl
   13834:	bl	10c40 <strtol@plt>
   13838:	ldr	r6, [r7]
   1383c:	cmp	sl, r6
   13840:	str	r0, [sp, #4]
   13844:	bne	1387c <__assert_fail@plt+0x2a20>
   13848:	cmp	r9, r5
   1384c:	beq	13874 <__assert_fail@plt+0x2a18>
   13850:	ldrb	r1, [r6]
   13854:	cmp	r1, r5
   13858:	beq	13874 <__assert_fail@plt+0x2a18>
   1385c:	mov	r0, r9
   13860:	bl	10d9c <strchr@plt>
   13864:	cmp	r0, r5
   13868:	movne	r3, #1
   1386c:	strne	r3, [sp, #4]
   13870:	bne	138a0 <__assert_fail@plt+0x2a44>
   13874:	mov	r5, #4
   13878:	b	138cc <__assert_fail@plt+0x2a70>
   1387c:	ldr	r5, [r4]
   13880:	cmp	r5, #0
   13884:	beq	13894 <__assert_fail@plt+0x2a38>
   13888:	cmp	r5, #34	; 0x22
   1388c:	bne	13874 <__assert_fail@plt+0x2a18>
   13890:	mov	r5, #1
   13894:	cmp	r9, #0
   13898:	streq	r0, [r8]
   1389c:	beq	138cc <__assert_fail@plt+0x2a70>
   138a0:	ldrb	r4, [r6]
   138a4:	cmp	r4, #0
   138a8:	beq	139c0 <__assert_fail@plt+0x2b64>
   138ac:	mov	r1, r4
   138b0:	mov	r0, r9
   138b4:	bl	10d9c <strchr@plt>
   138b8:	cmp	r0, #0
   138bc:	bne	138d8 <__assert_fail@plt+0x2a7c>
   138c0:	ldr	r3, [sp, #4]
   138c4:	orr	r5, r5, #2
   138c8:	str	r3, [r8]
   138cc:	mov	r0, r5
   138d0:	add	sp, sp, #8
   138d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   138d8:	cmp	r4, #84	; 0x54
   138dc:	beq	13930 <__assert_fail@plt+0x2ad4>
   138e0:	bhi	13918 <__assert_fail@plt+0x2abc>
   138e4:	cmp	r4, #75	; 0x4b
   138e8:	beq	13930 <__assert_fail@plt+0x2ad4>
   138ec:	bhi	13908 <__assert_fail@plt+0x2aac>
   138f0:	cmp	r4, #69	; 0x45
   138f4:	beq	13930 <__assert_fail@plt+0x2ad4>
   138f8:	cmp	r4, #71	; 0x47
   138fc:	beq	13930 <__assert_fail@plt+0x2ad4>
   13900:	mov	r6, #1
   13904:	b	139f4 <__assert_fail@plt+0x2b98>
   13908:	cmp	r4, #77	; 0x4d
   1390c:	beq	13930 <__assert_fail@plt+0x2ad4>
   13910:	cmp	r4, #80	; 0x50
   13914:	b	138fc <__assert_fail@plt+0x2aa0>
   13918:	cmp	r4, #103	; 0x67
   1391c:	beq	13930 <__assert_fail@plt+0x2ad4>
   13920:	bhi	139cc <__assert_fail@plt+0x2b70>
   13924:	sub	r3, r4, #89	; 0x59
   13928:	cmp	r3, #1
   1392c:	bhi	13900 <__assert_fail@plt+0x2aa4>
   13930:	mov	r1, #48	; 0x30
   13934:	mov	r0, r9
   13938:	bl	10d9c <strchr@plt>
   1393c:	cmp	r0, #0
   13940:	beq	13900 <__assert_fail@plt+0x2aa4>
   13944:	ldrb	r3, [r6, #1]
   13948:	cmp	r3, #68	; 0x44
   1394c:	beq	13960 <__assert_fail@plt+0x2b04>
   13950:	cmp	r3, #105	; 0x69
   13954:	beq	139e4 <__assert_fail@plt+0x2b88>
   13958:	cmp	r3, #66	; 0x42
   1395c:	bne	13900 <__assert_fail@plt+0x2aa4>
   13960:	mov	r6, #2
   13964:	mov	r1, #1000	; 0x3e8
   13968:	cmp	r4, #89	; 0x59
   1396c:	beq	13ab0 <__assert_fail@plt+0x2c54>
   13970:	bhi	13a1c <__assert_fail@plt+0x2bc0>
   13974:	cmp	r4, #75	; 0x4b
   13978:	beq	13a5c <__assert_fail@plt+0x2c00>
   1397c:	bhi	139fc <__assert_fail@plt+0x2ba0>
   13980:	cmp	r4, #69	; 0x45
   13984:	beq	13a84 <__assert_fail@plt+0x2c28>
   13988:	cmp	r4, #71	; 0x47
   1398c:	beq	13a90 <__assert_fail@plt+0x2c34>
   13990:	cmp	r4, #66	; 0x42
   13994:	moveq	r1, #1024	; 0x400
   13998:	bne	138c0 <__assert_fail@plt+0x2a64>
   1399c:	add	r0, sp, #4
   139a0:	bl	136e8 <__assert_fail@plt+0x288c>
   139a4:	ldr	r3, [r7]
   139a8:	orr	r5, r5, r0
   139ac:	add	r2, r3, r6
   139b0:	str	r2, [r7]
   139b4:	ldrb	r3, [r3, r6]
   139b8:	cmp	r3, #0
   139bc:	orrne	r5, r5, #2
   139c0:	ldr	r3, [sp, #4]
   139c4:	str	r3, [r8]
   139c8:	b	138cc <__assert_fail@plt+0x2a70>
   139cc:	cmp	r4, #109	; 0x6d
   139d0:	beq	13930 <__assert_fail@plt+0x2ad4>
   139d4:	cmp	r4, #116	; 0x74
   139d8:	beq	13930 <__assert_fail@plt+0x2ad4>
   139dc:	cmp	r4, #107	; 0x6b
   139e0:	b	138fc <__assert_fail@plt+0x2aa0>
   139e4:	ldrb	r6, [r6, #2]
   139e8:	cmp	r6, #66	; 0x42
   139ec:	movne	r6, #1
   139f0:	moveq	r6, #3
   139f4:	mov	r1, #1024	; 0x400
   139f8:	b	13968 <__assert_fail@plt+0x2b0c>
   139fc:	cmp	r4, #80	; 0x50
   13a00:	beq	13a98 <__assert_fail@plt+0x2c3c>
   13a04:	cmp	r4, #84	; 0x54
   13a08:	beq	13aa0 <__assert_fail@plt+0x2c44>
   13a0c:	cmp	r4, #77	; 0x4d
   13a10:	bne	138c0 <__assert_fail@plt+0x2a64>
   13a14:	mov	r2, #2
   13a18:	b	13a88 <__assert_fail@plt+0x2c2c>
   13a1c:	cmp	r4, #103	; 0x67
   13a20:	beq	13a90 <__assert_fail@plt+0x2c34>
   13a24:	bhi	13a48 <__assert_fail@plt+0x2bec>
   13a28:	cmp	r4, #98	; 0x62
   13a2c:	beq	13a7c <__assert_fail@plt+0x2c20>
   13a30:	cmp	r4, #99	; 0x63
   13a34:	beq	13ab8 <__assert_fail@plt+0x2c5c>
   13a38:	cmp	r4, #90	; 0x5a
   13a3c:	bne	138c0 <__assert_fail@plt+0x2a64>
   13a40:	mov	r2, #7
   13a44:	b	13a88 <__assert_fail@plt+0x2c2c>
   13a48:	cmp	r4, #109	; 0x6d
   13a4c:	beq	13a14 <__assert_fail@plt+0x2bb8>
   13a50:	bhi	13a64 <__assert_fail@plt+0x2c08>
   13a54:	cmp	r4, #107	; 0x6b
   13a58:	bne	138c0 <__assert_fail@plt+0x2a64>
   13a5c:	mov	r2, #1
   13a60:	b	13a88 <__assert_fail@plt+0x2c2c>
   13a64:	cmp	r4, #116	; 0x74
   13a68:	beq	13aa0 <__assert_fail@plt+0x2c44>
   13a6c:	cmp	r4, #119	; 0x77
   13a70:	moveq	r1, #2
   13a74:	beq	1399c <__assert_fail@plt+0x2b40>
   13a78:	b	138c0 <__assert_fail@plt+0x2a64>
   13a7c:	mov	r1, #512	; 0x200
   13a80:	b	1399c <__assert_fail@plt+0x2b40>
   13a84:	mov	r2, #6
   13a88:	add	r0, sp, #4
   13a8c:	b	13aa8 <__assert_fail@plt+0x2c4c>
   13a90:	mov	r2, #3
   13a94:	b	13a88 <__assert_fail@plt+0x2c2c>
   13a98:	mov	r2, #5
   13a9c:	b	13a88 <__assert_fail@plt+0x2c2c>
   13aa0:	mov	r2, #4
   13aa4:	add	r0, sp, r2
   13aa8:	bl	137a0 <__assert_fail@plt+0x2944>
   13aac:	b	139a4 <__assert_fail@plt+0x2b48>
   13ab0:	mov	r2, #8
   13ab4:	b	13a88 <__assert_fail@plt+0x2c2c>
   13ab8:	mov	r0, #0
   13abc:	b	139a4 <__assert_fail@plt+0x2b48>
   13ac0:	andeq	r4, r1, r6, lsl lr
   13ac4:	andeq	r4, r1, lr, lsl lr
   13ac8:	andeq	r4, r1, ip, lsr #28
   13acc:	cmp	r1, #0
   13ad0:	cmpne	r0, #0
   13ad4:	moveq	r1, #1
   13ad8:	moveq	r0, r1
   13adc:	umull	r2, r3, r0, r1
   13ae0:	adds	r3, r3, #0
   13ae4:	movne	r3, #1
   13ae8:	cmp	r2, #0
   13aec:	blt	13afc <__assert_fail@plt+0x2ca0>
   13af0:	cmp	r3, #0
   13af4:	bne	13afc <__assert_fail@plt+0x2ca0>
   13af8:	b	10c10 <calloc@plt>
   13afc:	push	{r4, lr}
   13b00:	bl	10da8 <__errno_location@plt>
   13b04:	mov	r3, #12
   13b08:	str	r3, [r0]
   13b0c:	mov	r0, #0
   13b10:	pop	{r4, pc}
   13b14:	cmp	r0, #0
   13b18:	mov	r3, #0
   13b1c:	moveq	r0, #1
   13b20:	adds	r3, r3, #0
   13b24:	movne	r3, #1
   13b28:	cmp	r0, #0
   13b2c:	blt	13b3c <__assert_fail@plt+0x2ce0>
   13b30:	cmp	r3, #0
   13b34:	bne	13b3c <__assert_fail@plt+0x2ce0>
   13b38:	b	10d3c <malloc@plt>
   13b3c:	push	{r4, lr}
   13b40:	bl	10da8 <__errno_location@plt>
   13b44:	mov	r3, #12
   13b48:	str	r3, [r0]
   13b4c:	mov	r0, #0
   13b50:	pop	{r4, pc}
   13b54:	cmp	r0, #0
   13b58:	push	{r4, lr}
   13b5c:	mov	r4, r1
   13b60:	bne	13b70 <__assert_fail@plt+0x2d14>
   13b64:	mov	r0, r1
   13b68:	pop	{r4, lr}
   13b6c:	b	13b14 <__assert_fail@plt+0x2cb8>
   13b70:	cmp	r1, #0
   13b74:	bne	13b84 <__assert_fail@plt+0x2d28>
   13b78:	bl	13d18 <__assert_fail@plt+0x2ebc>
   13b7c:	mov	r0, #0
   13b80:	pop	{r4, pc}
   13b84:	cmp	r1, #0
   13b88:	blt	13b98 <__assert_fail@plt+0x2d3c>
   13b8c:	mov	r3, #0
   13b90:	cmp	r3, r3
   13b94:	beq	13ba8 <__assert_fail@plt+0x2d4c>
   13b98:	bl	10da8 <__errno_location@plt>
   13b9c:	mov	r3, #12
   13ba0:	str	r3, [r0]
   13ba4:	b	13b7c <__assert_fail@plt+0x2d20>
   13ba8:	pop	{r4, lr}
   13bac:	b	10cb8 <realloc@plt>
   13bb0:	push	{r4, r5, r6, lr}
   13bb4:	mov	r4, r0
   13bb8:	bl	10d00 <__fpending@plt>
   13bbc:	mov	r5, r0
   13bc0:	mov	r0, r4
   13bc4:	bl	10d0c <ferror_unlocked@plt>
   13bc8:	mov	r6, r0
   13bcc:	mov	r0, r4
   13bd0:	bl	13c20 <__assert_fail@plt+0x2dc4>
   13bd4:	cmp	r6, #0
   13bd8:	mov	r4, r0
   13bdc:	bne	13c08 <__assert_fail@plt+0x2dac>
   13be0:	cmp	r0, #0
   13be4:	beq	13c00 <__assert_fail@plt+0x2da4>
   13be8:	cmp	r5, #0
   13bec:	bne	13c18 <__assert_fail@plt+0x2dbc>
   13bf0:	bl	10da8 <__errno_location@plt>
   13bf4:	ldr	r4, [r0]
   13bf8:	subs	r4, r4, #9
   13bfc:	mvnne	r4, #0
   13c00:	mov	r0, r4
   13c04:	pop	{r4, r5, r6, pc}
   13c08:	cmp	r0, #0
   13c0c:	bne	13c18 <__assert_fail@plt+0x2dbc>
   13c10:	bl	10da8 <__errno_location@plt>
   13c14:	str	r4, [r0]
   13c18:	mvn	r4, #0
   13c1c:	b	13c00 <__assert_fail@plt+0x2da4>
   13c20:	push	{r0, r1, r2, r4, r5, lr}
   13c24:	mov	r4, r0
   13c28:	bl	10dd8 <fileno@plt>
   13c2c:	cmp	r0, #0
   13c30:	mov	r0, r4
   13c34:	bge	13c44 <__assert_fail@plt+0x2de8>
   13c38:	add	sp, sp, #12
   13c3c:	pop	{r4, r5, lr}
   13c40:	b	10df0 <fclose@plt>
   13c44:	bl	10d54 <__freading@plt>
   13c48:	cmp	r0, #0
   13c4c:	bne	13c88 <__assert_fail@plt+0x2e2c>
   13c50:	mov	r0, r4
   13c54:	bl	13cc8 <__assert_fail@plt+0x2e6c>
   13c58:	cmp	r0, #0
   13c5c:	bne	13cbc <__assert_fail@plt+0x2e60>
   13c60:	mov	r5, #0
   13c64:	mov	r0, r4
   13c68:	bl	10df0 <fclose@plt>
   13c6c:	cmp	r5, #0
   13c70:	beq	13c80 <__assert_fail@plt+0x2e24>
   13c74:	bl	10da8 <__errno_location@plt>
   13c78:	str	r5, [r0]
   13c7c:	mvn	r0, #0
   13c80:	add	sp, sp, #12
   13c84:	pop	{r4, r5, pc}
   13c88:	mov	r0, r4
   13c8c:	bl	10dd8 <fileno@plt>
   13c90:	mov	r3, #1
   13c94:	str	r3, [sp]
   13c98:	mov	r2, #0
   13c9c:	mov	r3, #0
   13ca0:	bl	10ce8 <lseek64@plt>
   13ca4:	mvn	r3, #0
   13ca8:	mvn	r2, #0
   13cac:	cmp	r1, r3
   13cb0:	cmpeq	r0, r2
   13cb4:	bne	13c50 <__assert_fail@plt+0x2df4>
   13cb8:	b	13c60 <__assert_fail@plt+0x2e04>
   13cbc:	bl	10da8 <__errno_location@plt>
   13cc0:	ldr	r5, [r0]
   13cc4:	b	13c64 <__assert_fail@plt+0x2e08>
   13cc8:	push	{r0, r1, r4, lr}
   13ccc:	subs	r4, r0, #0
   13cd0:	bne	13ce4 <__assert_fail@plt+0x2e88>
   13cd4:	mov	r0, r4
   13cd8:	add	sp, sp, #8
   13cdc:	pop	{r4, lr}
   13ce0:	b	10c4c <fflush@plt>
   13ce4:	bl	10d54 <__freading@plt>
   13ce8:	cmp	r0, #0
   13cec:	beq	13cd4 <__assert_fail@plt+0x2e78>
   13cf0:	ldr	r3, [r4]
   13cf4:	tst	r3, #256	; 0x100
   13cf8:	beq	13cd4 <__assert_fail@plt+0x2e78>
   13cfc:	mov	r3, #1
   13d00:	str	r3, [sp]
   13d04:	mov	r2, #0
   13d08:	mov	r3, #0
   13d0c:	mov	r0, r4
   13d10:	bl	13d6c <__assert_fail@plt+0x2f10>
   13d14:	b	13cd4 <__assert_fail@plt+0x2e78>
   13d18:	push	{r0, r1, r2, r4, r5, lr}
   13d1c:	mov	r5, r0
   13d20:	bl	10da8 <__errno_location@plt>
   13d24:	ldr	r3, [r0]
   13d28:	mov	r4, r0
   13d2c:	str	r3, [sp]
   13d30:	str	r3, [sp, #4]
   13d34:	mov	r3, #0
   13d38:	str	r3, [r0]
   13d3c:	mov	r0, r5
   13d40:	bl	10c58 <free@plt>
   13d44:	ldr	r3, [r4]
   13d48:	add	r2, sp, #8
   13d4c:	cmp	r3, #0
   13d50:	moveq	r3, #4
   13d54:	movne	r3, #0
   13d58:	add	r3, r2, r3
   13d5c:	ldr	r3, [r3, #-8]
   13d60:	str	r3, [r4]
   13d64:	add	sp, sp, #12
   13d68:	pop	{r4, r5, pc}
   13d6c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   13d70:	mov	r4, r0
   13d74:	ldmib	r0, {ip, lr}
   13d78:	ldr	r8, [sp, #32]
   13d7c:	cmp	lr, ip
   13d80:	bne	13dec <__assert_fail@plt+0x2f90>
   13d84:	ldr	lr, [r0, #20]
   13d88:	ldr	ip, [r0, #16]
   13d8c:	cmp	lr, ip
   13d90:	bne	13dec <__assert_fail@plt+0x2f90>
   13d94:	ldr	r5, [r0, #36]	; 0x24
   13d98:	cmp	r5, #0
   13d9c:	bne	13dec <__assert_fail@plt+0x2f90>
   13da0:	mov	r6, r2
   13da4:	mov	r7, r3
   13da8:	bl	10dd8 <fileno@plt>
   13dac:	mov	r2, r6
   13db0:	mov	r3, r7
   13db4:	str	r8, [sp]
   13db8:	bl	10ce8 <lseek64@plt>
   13dbc:	mvn	r3, #0
   13dc0:	mvn	r2, #0
   13dc4:	cmp	r1, r3
   13dc8:	cmpeq	r0, r2
   13dcc:	mvneq	r0, #0
   13dd0:	ldrne	r3, [r4]
   13dd4:	strdne	r0, [r4, #80]	; 0x50
   13dd8:	movne	r0, r5
   13ddc:	bicne	r3, r3, #16
   13de0:	strne	r3, [r4]
   13de4:	add	sp, sp, #8
   13de8:	pop	{r4, r5, r6, r7, r8, pc}
   13dec:	str	r8, [sp, #32]
   13df0:	mov	r0, r4
   13df4:	add	sp, sp, #8
   13df8:	pop	{r4, r5, r6, r7, r8, lr}
   13dfc:	b	10dfc <fseeko64@plt>
   13e00:	push	{r4, lr}
   13e04:	mov	r0, #14
   13e08:	bl	10e20 <nl_langinfo@plt>
   13e0c:	ldr	r3, [pc, #24]	; 13e2c <__assert_fail@plt+0x2fd0>
   13e10:	cmp	r0, #0
   13e14:	moveq	r0, r3
   13e18:	ldr	r3, [pc, #16]	; 13e30 <__assert_fail@plt+0x2fd4>
   13e1c:	ldrb	r2, [r0]
   13e20:	cmp	r2, #0
   13e24:	moveq	r0, r3
   13e28:	pop	{r4, pc}
   13e2c:	ldrdeq	r4, [r1], -r2
   13e30:	andeq	r4, r1, r2, asr lr
   13e34:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13e38:	subs	r5, r0, #0
   13e3c:	addeq	r5, sp, #4
   13e40:	mov	r0, r5
   13e44:	mov	r7, r2
   13e48:	mov	r6, r1
   13e4c:	bl	10d18 <mbrtowc@plt>
   13e50:	cmp	r7, #0
   13e54:	cmnne	r0, #3
   13e58:	mov	r4, r0
   13e5c:	bls	13e78 <__assert_fail@plt+0x301c>
   13e60:	mov	r0, #0
   13e64:	bl	13ed0 <__assert_fail@plt+0x3074>
   13e68:	cmp	r0, #0
   13e6c:	moveq	r4, #1
   13e70:	ldrbeq	r3, [r6]
   13e74:	streq	r3, [r5]
   13e78:	mov	r0, r4
   13e7c:	add	sp, sp, #12
   13e80:	pop	{r4, r5, r6, r7, pc}
   13e84:	push	{r4, r5, r6, lr}
   13e88:	subs	r4, r2, #0
   13e8c:	mov	r6, r0
   13e90:	mov	r5, r1
   13e94:	beq	13eac <__assert_fail@plt+0x3050>
   13e98:	mov	r1, r4
   13e9c:	mvn	r0, #0
   13ea0:	bl	13fb0 <__assert_fail@plt+0x3154>
   13ea4:	cmp	r0, r5
   13ea8:	bcc	13ebc <__assert_fail@plt+0x3060>
   13eac:	mul	r1, r5, r4
   13eb0:	mov	r0, r6
   13eb4:	pop	{r4, r5, r6, lr}
   13eb8:	b	13b54 <__assert_fail@plt+0x2cf8>
   13ebc:	bl	10da8 <__errno_location@plt>
   13ec0:	mov	r3, #12
   13ec4:	str	r3, [r0]
   13ec8:	mov	r0, #0
   13ecc:	pop	{r4, r5, r6, pc}
   13ed0:	push	{lr}		; (str lr, [sp, #-4]!)
   13ed4:	sub	sp, sp, #268	; 0x10c
   13ed8:	ldr	r2, [pc, #64]	; 13f20 <__assert_fail@plt+0x30c4>
   13edc:	add	r1, sp, #4
   13ee0:	bl	13f2c <__assert_fail@plt+0x30d0>
   13ee4:	cmp	r0, #0
   13ee8:	movne	r0, #0
   13eec:	bne	13f18 <__assert_fail@plt+0x30bc>
   13ef0:	ldr	r1, [pc, #44]	; 13f24 <__assert_fail@plt+0x30c8>
   13ef4:	add	r0, sp, #4
   13ef8:	bl	10c34 <strcmp@plt>
   13efc:	cmp	r0, #0
   13f00:	beq	13f18 <__assert_fail@plt+0x30bc>
   13f04:	ldr	r1, [pc, #28]	; 13f28 <__assert_fail@plt+0x30cc>
   13f08:	add	r0, sp, #4
   13f0c:	bl	10c34 <strcmp@plt>
   13f10:	adds	r0, r0, #0
   13f14:	movne	r0, #1
   13f18:	add	sp, sp, #268	; 0x10c
   13f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   13f20:	andeq	r0, r0, r1, lsl #2
   13f24:	andeq	r4, r1, r8, asr lr
   13f28:	andeq	r4, r1, sl, asr lr
   13f2c:	push	{r4, r5, r6, lr}
   13f30:	mov	r5, r1
   13f34:	mov	r1, #0
   13f38:	mov	r4, r2
   13f3c:	bl	10e08 <setlocale@plt>
   13f40:	subs	r6, r0, #0
   13f44:	bne	13f58 <__assert_fail@plt+0x30fc>
   13f48:	cmp	r4, #0
   13f4c:	strbne	r6, [r5]
   13f50:	mov	r0, #22
   13f54:	pop	{r4, r5, r6, pc}
   13f58:	bl	10d90 <strlen@plt>
   13f5c:	cmp	r4, r0
   13f60:	bls	13f7c <__assert_fail@plt+0x3120>
   13f64:	add	r2, r0, #1
   13f68:	mov	r1, r6
   13f6c:	mov	r0, r5
   13f70:	bl	10c70 <memcpy@plt>
   13f74:	mov	r0, #0
   13f78:	pop	{r4, r5, r6, pc}
   13f7c:	cmp	r4, #0
   13f80:	beq	13fa0 <__assert_fail@plt+0x3144>
   13f84:	sub	r4, r4, #1
   13f88:	mov	r2, r4
   13f8c:	mov	r1, r6
   13f90:	mov	r0, r5
   13f94:	bl	10c70 <memcpy@plt>
   13f98:	mov	r3, #0
   13f9c:	strb	r3, [r5, r4]
   13fa0:	mov	r0, #34	; 0x22
   13fa4:	pop	{r4, r5, r6, pc}
   13fa8:	mov	r1, #0
   13fac:	b	10e08 <setlocale@plt>
   13fb0:	subs	r2, r1, #1
   13fb4:	bxeq	lr
   13fb8:	bcc	14190 <__assert_fail@plt+0x3334>
   13fbc:	cmp	r0, r1
   13fc0:	bls	14174 <__assert_fail@plt+0x3318>
   13fc4:	tst	r1, r2
   13fc8:	beq	14180 <__assert_fail@plt+0x3324>
   13fcc:	clz	r3, r0
   13fd0:	clz	r2, r1
   13fd4:	sub	r3, r2, r3
   13fd8:	rsbs	r3, r3, #31
   13fdc:	addne	r3, r3, r3, lsl #1
   13fe0:	mov	r2, #0
   13fe4:	addne	pc, pc, r3, lsl #2
   13fe8:	nop			; (mov r0, r0)
   13fec:	cmp	r0, r1, lsl #31
   13ff0:	adc	r2, r2, r2
   13ff4:	subcs	r0, r0, r1, lsl #31
   13ff8:	cmp	r0, r1, lsl #30
   13ffc:	adc	r2, r2, r2
   14000:	subcs	r0, r0, r1, lsl #30
   14004:	cmp	r0, r1, lsl #29
   14008:	adc	r2, r2, r2
   1400c:	subcs	r0, r0, r1, lsl #29
   14010:	cmp	r0, r1, lsl #28
   14014:	adc	r2, r2, r2
   14018:	subcs	r0, r0, r1, lsl #28
   1401c:	cmp	r0, r1, lsl #27
   14020:	adc	r2, r2, r2
   14024:	subcs	r0, r0, r1, lsl #27
   14028:	cmp	r0, r1, lsl #26
   1402c:	adc	r2, r2, r2
   14030:	subcs	r0, r0, r1, lsl #26
   14034:	cmp	r0, r1, lsl #25
   14038:	adc	r2, r2, r2
   1403c:	subcs	r0, r0, r1, lsl #25
   14040:	cmp	r0, r1, lsl #24
   14044:	adc	r2, r2, r2
   14048:	subcs	r0, r0, r1, lsl #24
   1404c:	cmp	r0, r1, lsl #23
   14050:	adc	r2, r2, r2
   14054:	subcs	r0, r0, r1, lsl #23
   14058:	cmp	r0, r1, lsl #22
   1405c:	adc	r2, r2, r2
   14060:	subcs	r0, r0, r1, lsl #22
   14064:	cmp	r0, r1, lsl #21
   14068:	adc	r2, r2, r2
   1406c:	subcs	r0, r0, r1, lsl #21
   14070:	cmp	r0, r1, lsl #20
   14074:	adc	r2, r2, r2
   14078:	subcs	r0, r0, r1, lsl #20
   1407c:	cmp	r0, r1, lsl #19
   14080:	adc	r2, r2, r2
   14084:	subcs	r0, r0, r1, lsl #19
   14088:	cmp	r0, r1, lsl #18
   1408c:	adc	r2, r2, r2
   14090:	subcs	r0, r0, r1, lsl #18
   14094:	cmp	r0, r1, lsl #17
   14098:	adc	r2, r2, r2
   1409c:	subcs	r0, r0, r1, lsl #17
   140a0:	cmp	r0, r1, lsl #16
   140a4:	adc	r2, r2, r2
   140a8:	subcs	r0, r0, r1, lsl #16
   140ac:	cmp	r0, r1, lsl #15
   140b0:	adc	r2, r2, r2
   140b4:	subcs	r0, r0, r1, lsl #15
   140b8:	cmp	r0, r1, lsl #14
   140bc:	adc	r2, r2, r2
   140c0:	subcs	r0, r0, r1, lsl #14
   140c4:	cmp	r0, r1, lsl #13
   140c8:	adc	r2, r2, r2
   140cc:	subcs	r0, r0, r1, lsl #13
   140d0:	cmp	r0, r1, lsl #12
   140d4:	adc	r2, r2, r2
   140d8:	subcs	r0, r0, r1, lsl #12
   140dc:	cmp	r0, r1, lsl #11
   140e0:	adc	r2, r2, r2
   140e4:	subcs	r0, r0, r1, lsl #11
   140e8:	cmp	r0, r1, lsl #10
   140ec:	adc	r2, r2, r2
   140f0:	subcs	r0, r0, r1, lsl #10
   140f4:	cmp	r0, r1, lsl #9
   140f8:	adc	r2, r2, r2
   140fc:	subcs	r0, r0, r1, lsl #9
   14100:	cmp	r0, r1, lsl #8
   14104:	adc	r2, r2, r2
   14108:	subcs	r0, r0, r1, lsl #8
   1410c:	cmp	r0, r1, lsl #7
   14110:	adc	r2, r2, r2
   14114:	subcs	r0, r0, r1, lsl #7
   14118:	cmp	r0, r1, lsl #6
   1411c:	adc	r2, r2, r2
   14120:	subcs	r0, r0, r1, lsl #6
   14124:	cmp	r0, r1, lsl #5
   14128:	adc	r2, r2, r2
   1412c:	subcs	r0, r0, r1, lsl #5
   14130:	cmp	r0, r1, lsl #4
   14134:	adc	r2, r2, r2
   14138:	subcs	r0, r0, r1, lsl #4
   1413c:	cmp	r0, r1, lsl #3
   14140:	adc	r2, r2, r2
   14144:	subcs	r0, r0, r1, lsl #3
   14148:	cmp	r0, r1, lsl #2
   1414c:	adc	r2, r2, r2
   14150:	subcs	r0, r0, r1, lsl #2
   14154:	cmp	r0, r1, lsl #1
   14158:	adc	r2, r2, r2
   1415c:	subcs	r0, r0, r1, lsl #1
   14160:	cmp	r0, r1
   14164:	adc	r2, r2, r2
   14168:	subcs	r0, r0, r1
   1416c:	mov	r0, r2
   14170:	bx	lr
   14174:	moveq	r0, #1
   14178:	movne	r0, #0
   1417c:	bx	lr
   14180:	clz	r2, r1
   14184:	rsb	r2, r2, #31
   14188:	lsr	r0, r0, r2
   1418c:	bx	lr
   14190:	cmp	r0, #0
   14194:	mvnne	r0, #0
   14198:	b	143fc <__assert_fail@plt+0x35a0>
   1419c:	cmp	r1, #0
   141a0:	beq	14190 <__assert_fail@plt+0x3334>
   141a4:	push	{r0, r1, lr}
   141a8:	bl	13fb0 <__assert_fail@plt+0x3154>
   141ac:	pop	{r1, r2, lr}
   141b0:	mul	r3, r2, r0
   141b4:	sub	r1, r1, r3
   141b8:	bx	lr
   141bc:	cmp	r1, #0
   141c0:	beq	143cc <__assert_fail@plt+0x3570>
   141c4:	eor	ip, r0, r1
   141c8:	rsbmi	r1, r1, #0
   141cc:	subs	r2, r1, #1
   141d0:	beq	14398 <__assert_fail@plt+0x353c>
   141d4:	movs	r3, r0
   141d8:	rsbmi	r3, r0, #0
   141dc:	cmp	r3, r1
   141e0:	bls	143a4 <__assert_fail@plt+0x3548>
   141e4:	tst	r1, r2
   141e8:	beq	143b4 <__assert_fail@plt+0x3558>
   141ec:	clz	r2, r3
   141f0:	clz	r0, r1
   141f4:	sub	r2, r0, r2
   141f8:	rsbs	r2, r2, #31
   141fc:	addne	r2, r2, r2, lsl #1
   14200:	mov	r0, #0
   14204:	addne	pc, pc, r2, lsl #2
   14208:	nop			; (mov r0, r0)
   1420c:	cmp	r3, r1, lsl #31
   14210:	adc	r0, r0, r0
   14214:	subcs	r3, r3, r1, lsl #31
   14218:	cmp	r3, r1, lsl #30
   1421c:	adc	r0, r0, r0
   14220:	subcs	r3, r3, r1, lsl #30
   14224:	cmp	r3, r1, lsl #29
   14228:	adc	r0, r0, r0
   1422c:	subcs	r3, r3, r1, lsl #29
   14230:	cmp	r3, r1, lsl #28
   14234:	adc	r0, r0, r0
   14238:	subcs	r3, r3, r1, lsl #28
   1423c:	cmp	r3, r1, lsl #27
   14240:	adc	r0, r0, r0
   14244:	subcs	r3, r3, r1, lsl #27
   14248:	cmp	r3, r1, lsl #26
   1424c:	adc	r0, r0, r0
   14250:	subcs	r3, r3, r1, lsl #26
   14254:	cmp	r3, r1, lsl #25
   14258:	adc	r0, r0, r0
   1425c:	subcs	r3, r3, r1, lsl #25
   14260:	cmp	r3, r1, lsl #24
   14264:	adc	r0, r0, r0
   14268:	subcs	r3, r3, r1, lsl #24
   1426c:	cmp	r3, r1, lsl #23
   14270:	adc	r0, r0, r0
   14274:	subcs	r3, r3, r1, lsl #23
   14278:	cmp	r3, r1, lsl #22
   1427c:	adc	r0, r0, r0
   14280:	subcs	r3, r3, r1, lsl #22
   14284:	cmp	r3, r1, lsl #21
   14288:	adc	r0, r0, r0
   1428c:	subcs	r3, r3, r1, lsl #21
   14290:	cmp	r3, r1, lsl #20
   14294:	adc	r0, r0, r0
   14298:	subcs	r3, r3, r1, lsl #20
   1429c:	cmp	r3, r1, lsl #19
   142a0:	adc	r0, r0, r0
   142a4:	subcs	r3, r3, r1, lsl #19
   142a8:	cmp	r3, r1, lsl #18
   142ac:	adc	r0, r0, r0
   142b0:	subcs	r3, r3, r1, lsl #18
   142b4:	cmp	r3, r1, lsl #17
   142b8:	adc	r0, r0, r0
   142bc:	subcs	r3, r3, r1, lsl #17
   142c0:	cmp	r3, r1, lsl #16
   142c4:	adc	r0, r0, r0
   142c8:	subcs	r3, r3, r1, lsl #16
   142cc:	cmp	r3, r1, lsl #15
   142d0:	adc	r0, r0, r0
   142d4:	subcs	r3, r3, r1, lsl #15
   142d8:	cmp	r3, r1, lsl #14
   142dc:	adc	r0, r0, r0
   142e0:	subcs	r3, r3, r1, lsl #14
   142e4:	cmp	r3, r1, lsl #13
   142e8:	adc	r0, r0, r0
   142ec:	subcs	r3, r3, r1, lsl #13
   142f0:	cmp	r3, r1, lsl #12
   142f4:	adc	r0, r0, r0
   142f8:	subcs	r3, r3, r1, lsl #12
   142fc:	cmp	r3, r1, lsl #11
   14300:	adc	r0, r0, r0
   14304:	subcs	r3, r3, r1, lsl #11
   14308:	cmp	r3, r1, lsl #10
   1430c:	adc	r0, r0, r0
   14310:	subcs	r3, r3, r1, lsl #10
   14314:	cmp	r3, r1, lsl #9
   14318:	adc	r0, r0, r0
   1431c:	subcs	r3, r3, r1, lsl #9
   14320:	cmp	r3, r1, lsl #8
   14324:	adc	r0, r0, r0
   14328:	subcs	r3, r3, r1, lsl #8
   1432c:	cmp	r3, r1, lsl #7
   14330:	adc	r0, r0, r0
   14334:	subcs	r3, r3, r1, lsl #7
   14338:	cmp	r3, r1, lsl #6
   1433c:	adc	r0, r0, r0
   14340:	subcs	r3, r3, r1, lsl #6
   14344:	cmp	r3, r1, lsl #5
   14348:	adc	r0, r0, r0
   1434c:	subcs	r3, r3, r1, lsl #5
   14350:	cmp	r3, r1, lsl #4
   14354:	adc	r0, r0, r0
   14358:	subcs	r3, r3, r1, lsl #4
   1435c:	cmp	r3, r1, lsl #3
   14360:	adc	r0, r0, r0
   14364:	subcs	r3, r3, r1, lsl #3
   14368:	cmp	r3, r1, lsl #2
   1436c:	adc	r0, r0, r0
   14370:	subcs	r3, r3, r1, lsl #2
   14374:	cmp	r3, r1, lsl #1
   14378:	adc	r0, r0, r0
   1437c:	subcs	r3, r3, r1, lsl #1
   14380:	cmp	r3, r1
   14384:	adc	r0, r0, r0
   14388:	subcs	r3, r3, r1
   1438c:	cmp	ip, #0
   14390:	rsbmi	r0, r0, #0
   14394:	bx	lr
   14398:	teq	ip, r0
   1439c:	rsbmi	r0, r0, #0
   143a0:	bx	lr
   143a4:	movcc	r0, #0
   143a8:	asreq	r0, ip, #31
   143ac:	orreq	r0, r0, #1
   143b0:	bx	lr
   143b4:	clz	r2, r1
   143b8:	rsb	r2, r2, #31
   143bc:	cmp	ip, #0
   143c0:	lsr	r0, r3, r2
   143c4:	rsbmi	r0, r0, #0
   143c8:	bx	lr
   143cc:	cmp	r0, #0
   143d0:	mvngt	r0, #-2147483648	; 0x80000000
   143d4:	movlt	r0, #-2147483648	; 0x80000000
   143d8:	b	143fc <__assert_fail@plt+0x35a0>
   143dc:	cmp	r1, #0
   143e0:	beq	143cc <__assert_fail@plt+0x3570>
   143e4:	push	{r0, r1, lr}
   143e8:	bl	141c4 <__assert_fail@plt+0x3368>
   143ec:	pop	{r1, r2, lr}
   143f0:	mul	r3, r2, r0
   143f4:	sub	r1, r1, r3
   143f8:	bx	lr
   143fc:	push	{r1, lr}
   14400:	mov	r0, #8
   14404:	bl	10c28 <raise@plt>
   14408:	pop	{r1, pc}
   1440c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14410:	mov	r7, r0
   14414:	ldr	r6, [pc, #72]	; 14464 <__assert_fail@plt+0x3608>
   14418:	ldr	r5, [pc, #72]	; 14468 <__assert_fail@plt+0x360c>
   1441c:	add	r6, pc, r6
   14420:	add	r5, pc, r5
   14424:	sub	r6, r6, r5
   14428:	mov	r8, r1
   1442c:	mov	r9, r2
   14430:	bl	10bf0 <calloc@plt-0x20>
   14434:	asrs	r6, r6, #2
   14438:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1443c:	mov	r4, #0
   14440:	add	r4, r4, #1
   14444:	ldr	r3, [r5], #4
   14448:	mov	r2, r9
   1444c:	mov	r1, r8
   14450:	mov	r0, r7
   14454:	blx	r3
   14458:	cmp	r6, r4
   1445c:	bne	14440 <__assert_fail@plt+0x35e4>
   14460:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14464:	andeq	r0, r1, ip, ror #21
   14468:	andeq	r0, r1, r4, ror #21
   1446c:	bx	lr
   14470:	ldr	r3, [pc, #12]	; 14484 <__assert_fail@plt+0x3628>
   14474:	mov	r1, #0
   14478:	add	r3, pc, r3
   1447c:	ldr	r2, [r3]
   14480:	b	10db4 <__cxa_atexit@plt>
   14484:	andeq	r0, r1, ip, asr ip

Disassembly of section .fini:

00014488 <.fini>:
   14488:	push	{r3, lr}
   1448c:	pop	{r3, pc}
