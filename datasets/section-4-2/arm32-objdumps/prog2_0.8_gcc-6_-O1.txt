
../repos/prog2/0.8:     file format elf32-littlearm


Disassembly of section .init:

00010610 <.init>:
   10610:	push	{r3, lr}
   10614:	bl	106c0 <_start@@Base+0x3c>
   10618:	pop	{r3, pc}

Disassembly of section .plt:

0001061c <printf@plt-0x14>:
   1061c:	push	{lr}		; (str lr, [sp, #-4]!)
   10620:	ldr	lr, [pc, #4]	; 1062c <printf@plt-0x4>
   10624:	add	lr, pc, lr
   10628:	ldr	pc, [lr, #8]!
   1062c:	ldrdeq	r0, [r1], -r4

00010630 <printf@plt>:
   10630:	add	ip, pc, #0, 12
   10634:	add	ip, ip, #16, 20	; 0x10000
   10638:	ldr	pc, [ip, #2516]!	; 0x9d4

0001063c <strcpy@plt>:
   1063c:	add	ip, pc, #0, 12
   10640:	add	ip, ip, #16, 20	; 0x10000
   10644:	ldr	pc, [ip, #2508]!	; 0x9cc

00010648 <__libc_start_main@plt>:
   10648:	add	ip, pc, #0, 12
   1064c:	add	ip, ip, #16, 20	; 0x10000
   10650:	ldr	pc, [ip, #2500]!	; 0x9c4

00010654 <__gmon_start__@plt>:
   10654:	add	ip, pc, #0, 12
   10658:	add	ip, ip, #16, 20	; 0x10000
   1065c:	ldr	pc, [ip, #2492]!	; 0x9bc

00010660 <memset@plt>:
   10660:	add	ip, pc, #0, 12
   10664:	add	ip, ip, #16, 20	; 0x10000
   10668:	ldr	pc, [ip, #2484]!	; 0x9b4

0001066c <__isoc99_scanf@plt>:
   1066c:	add	ip, pc, #0, 12
   10670:	add	ip, ip, #16, 20	; 0x10000
   10674:	ldr	pc, [ip, #2476]!	; 0x9ac

00010678 <abort@plt>:
   10678:	add	ip, pc, #0, 12
   1067c:	add	ip, ip, #16, 20	; 0x10000
   10680:	ldr	pc, [ip, #2468]!	; 0x9a4

Disassembly of section .text:

00010684 <_start@@Base>:
   10684:	mov	fp, #0
   10688:	mov	lr, #0
   1068c:	pop	{r1}		; (ldr r1, [sp], #4)
   10690:	mov	r2, sp
   10694:	push	{r2}		; (str r2, [sp, #-4]!)
   10698:	push	{r0}		; (str r0, [sp, #-4]!)
   1069c:	ldr	ip, [pc, #16]	; 106b4 <_start@@Base+0x30>
   106a0:	push	{ip}		; (str ip, [sp, #-4]!)
   106a4:	ldr	r0, [pc, #12]	; 106b8 <_start@@Base+0x34>
   106a8:	ldr	r3, [pc, #12]	; 106bc <_start@@Base+0x38>
   106ac:	bl	10648 <__libc_start_main@plt>
   106b0:	bl	10678 <abort@plt>
   106b4:			; <UNDEFINED> instruction: 0x000109bc
   106b8:	muleq	r1, r0, r8
   106bc:	andeq	r0, r1, ip, asr r9
   106c0:	ldr	r3, [pc, #20]	; 106dc <_start@@Base+0x58>
   106c4:	ldr	r2, [pc, #20]	; 106e0 <_start@@Base+0x5c>
   106c8:	add	r3, pc, r3
   106cc:	ldr	r2, [r3, r2]
   106d0:	cmp	r2, #0
   106d4:	bxeq	lr
   106d8:	b	10654 <__gmon_start__@plt>
   106dc:	andeq	r0, r1, r0, lsr r9
   106e0:	andeq	r0, r0, r8, lsr #32
   106e4:	ldr	r3, [pc, #28]	; 10708 <_start@@Base+0x84>
   106e8:	ldr	r0, [pc, #28]	; 1070c <_start@@Base+0x88>
   106ec:	sub	r3, r3, r0
   106f0:	cmp	r3, #6
   106f4:	bxls	lr
   106f8:	ldr	r3, [pc, #16]	; 10710 <_start@@Base+0x8c>
   106fc:	cmp	r3, #0
   10700:	bxeq	lr
   10704:	bx	r3
   10708:	andeq	r1, r2, r7, lsr r0
   1070c:	andeq	r1, r2, r4, lsr r0
   10710:	andeq	r0, r0, r0
   10714:	ldr	r1, [pc, #36]	; 10740 <_start@@Base+0xbc>
   10718:	ldr	r0, [pc, #36]	; 10744 <_start@@Base+0xc0>
   1071c:	sub	r1, r1, r0
   10720:	asr	r1, r1, #2
   10724:	add	r1, r1, r1, lsr #31
   10728:	asrs	r1, r1, #1
   1072c:	bxeq	lr
   10730:	ldr	r3, [pc, #16]	; 10748 <_start@@Base+0xc4>
   10734:	cmp	r3, #0
   10738:	bxeq	lr
   1073c:	bx	r3
   10740:	andeq	r1, r2, r4, lsr r0
   10744:	andeq	r1, r2, r4, lsr r0
   10748:	andeq	r0, r0, r0
   1074c:	push	{r4, lr}
   10750:	ldr	r4, [pc, #24]	; 10770 <_start@@Base+0xec>
   10754:	ldrb	r3, [r4]
   10758:	cmp	r3, #0
   1075c:	popne	{r4, pc}
   10760:	bl	106e4 <_start@@Base+0x60>
   10764:	mov	r3, #1
   10768:	strb	r3, [r4]
   1076c:	pop	{r4, pc}
   10770:	andeq	r1, r2, r4, lsr r0
   10774:	ldr	r0, [pc, #40]	; 107a4 <_start@@Base+0x120>
   10778:	ldr	r3, [r0]
   1077c:	cmp	r3, #0
   10780:	bne	10788 <_start@@Base+0x104>
   10784:	b	10714 <_start@@Base+0x90>
   10788:	ldr	r3, [pc, #24]	; 107a8 <_start@@Base+0x124>
   1078c:	cmp	r3, #0
   10790:	beq	10784 <_start@@Base+0x100>
   10794:	push	{r4, lr}
   10798:	blx	r3
   1079c:	pop	{r4, lr}
   107a0:	b	10714 <_start@@Base+0x90>
   107a4:	andeq	r0, r2, r4, lsl pc
   107a8:	andeq	r0, r0, r0

000107ac <lerpontuacoes@@Base>:
   107ac:	push	{r4, r5, r6, r7, lr}
   107b0:	sub	sp, sp, #12
   107b4:	mov	r5, r0
   107b8:	mov	r4, r1
   107bc:	add	r1, sp, #4
   107c0:	ldr	r0, [pc, #68]	; 1080c <lerpontuacoes@@Base+0x60>
   107c4:	bl	1066c <__isoc99_scanf@plt>
   107c8:	ldr	r0, [sp, #4]
   107cc:	cmp	r0, #0
   107d0:	ble	10804 <lerpontuacoes@@Base+0x58>
   107d4:	mov	r6, #0
   107d8:	ldr	r7, [pc, #48]	; 10810 <lerpontuacoes@@Base+0x64>
   107dc:	mov	r2, r4
   107e0:	mov	r1, r5
   107e4:	mov	r0, r7
   107e8:	bl	1066c <__isoc99_scanf@plt>
   107ec:	add	r6, r6, #1
   107f0:	ldr	r0, [sp, #4]
   107f4:	add	r5, r5, #50	; 0x32
   107f8:	add	r4, r4, #4
   107fc:	cmp	r0, r6
   10800:	bgt	107dc <lerpontuacoes@@Base+0x30>
   10804:	add	sp, sp, #12
   10808:	pop	{r4, r5, r6, r7, pc}
   1080c:	andeq	r0, r1, ip, asr #19
   10810:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>

00010814 <primeiroUltimo@@Base>:
   10814:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10818:	ldr	r8, [r1]
   1081c:	cmp	r2, #1
   10820:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   10824:	mov	r9, r3
   10828:	mov	r5, r1
   1082c:	add	r4, r0, #50	; 0x32
   10830:	mov	r7, #50	; 0x32
   10834:	mla	r7, r7, r2, r0
   10838:	mov	sl, r8
   1083c:	b	10860 <primeiroUltimo@@Base+0x4c>
   10840:	mov	r1, r4
   10844:	mov	r0, r9
   10848:	bl	1063c <strcpy@plt>
   1084c:	mov	r8, r6
   10850:	b	1086c <primeiroUltimo@@Base+0x58>
   10854:	add	r4, r4, #50	; 0x32
   10858:	cmp	r4, r7
   1085c:	beq	1088c <primeiroUltimo@@Base+0x78>
   10860:	ldr	r6, [r5, #4]
   10864:	cmp	r6, r8
   10868:	bgt	10840 <primeiroUltimo@@Base+0x2c>
   1086c:	ldr	r6, [r5, #4]!
   10870:	cmp	r6, sl
   10874:	bge	10854 <primeiroUltimo@@Base+0x40>
   10878:	mov	r1, r4
   1087c:	ldr	r0, [sp, #32]
   10880:	bl	1063c <strcpy@plt>
   10884:	mov	sl, r6
   10888:	b	10854 <primeiroUltimo@@Base+0x40>
   1088c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00010890 <main@@Base>:
   10890:	push	{r4, r5, lr}
   10894:	sub	sp, sp, #1200	; 0x4b0
   10898:	sub	sp, sp, #4
   1089c:	mov	r2, #80	; 0x50
   108a0:	mov	r1, #0
   108a4:	add	r0, sp, #1120	; 0x460
   108a8:	bl	10660 <memset@plt>
   108ac:	add	r3, sp, #120	; 0x78
   108b0:	str	r3, [sp, #8]
   108b4:	mov	r2, #1000	; 0x3e8
   108b8:	mov	r1, #0
   108bc:	mov	r0, r3
   108c0:	bl	10660 <memset@plt>
   108c4:	add	r3, sp, #68	; 0x44
   108c8:	str	r3, [sp, #12]
   108cc:	mov	r5, #50	; 0x32
   108d0:	mov	r2, r5
   108d4:	mov	r1, #0
   108d8:	mov	r0, r3
   108dc:	bl	10660 <memset@plt>
   108e0:	add	r4, sp, #16
   108e4:	mov	r2, r5
   108e8:	mov	r1, #0
   108ec:	mov	r0, r4
   108f0:	bl	10660 <memset@plt>
   108f4:	add	r1, sp, #1120	; 0x460
   108f8:	ldr	r0, [sp, #8]
   108fc:	bl	107ac <lerpontuacoes@@Base>
   10900:	mov	r5, r0
   10904:	str	r4, [sp]
   10908:	ldr	r3, [sp, #12]
   1090c:	mov	r2, r0
   10910:	add	r1, sp, #1120	; 0x460
   10914:	ldr	r0, [sp, #8]
   10918:	bl	10814 <primeiroUltimo@@Base>
   1091c:	mov	r1, r5
   10920:	ldr	r0, [pc, #40]	; 10950 <main@@Base+0xc0>
   10924:	bl	10630 <printf@plt>
   10928:	ldr	r1, [sp, #12]
   1092c:	ldr	r0, [pc, #32]	; 10954 <main@@Base+0xc4>
   10930:	bl	10630 <printf@plt>
   10934:	mov	r1, r4
   10938:	ldr	r0, [pc, #24]	; 10958 <main@@Base+0xc8>
   1093c:	bl	10630 <printf@plt>
   10940:	mov	r0, #0
   10944:	add	sp, sp, #1200	; 0x4b0
   10948:	add	sp, sp, #4
   1094c:	pop	{r4, r5, pc}
   10950:	ldrdeq	r0, [r1], -r8
   10954:	strdeq	r0, [r1], -r4
   10958:	andeq	r0, r1, r4, lsl #20

0001095c <__libc_csu_init@@Base>:
   1095c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10960:	mov	r7, r0
   10964:	ldr	r6, [pc, #72]	; 109b4 <__libc_csu_init@@Base+0x58>
   10968:	ldr	r5, [pc, #72]	; 109b8 <__libc_csu_init@@Base+0x5c>
   1096c:	add	r6, pc, r6
   10970:	add	r5, pc, r5
   10974:	sub	r6, r6, r5
   10978:	mov	r8, r1
   1097c:	mov	r9, r2
   10980:	bl	10610 <printf@plt-0x20>
   10984:	asrs	r6, r6, #2
   10988:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1098c:	mov	r4, #0
   10990:	add	r4, r4, #1
   10994:	ldr	r3, [r5], #4
   10998:	mov	r2, r9
   1099c:	mov	r1, r8
   109a0:	mov	r0, r7
   109a4:	blx	r3
   109a8:	cmp	r6, r4
   109ac:	bne	10990 <__libc_csu_init@@Base+0x34>
   109b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109b4:	muleq	r1, ip, r5
   109b8:	muleq	r1, r4, r5

000109bc <__libc_csu_fini@@Base>:
   109bc:	bx	lr

Disassembly of section .fini:

000109c0 <.fini>:
   109c0:	push	{r3, lr}
   109c4:	pop	{r3, pc}
