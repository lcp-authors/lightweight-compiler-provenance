
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

00011088 <.init>:
   11088:	push	{r3, lr}
   1108c:	bl	11d24 <__assert_fail@plt+0x910>
   11090:	pop	{r3, pc}

Disassembly of section .plt:

00011094 <fdopen@plt-0x14>:
   11094:	push	{lr}		; (str lr, [sp, #-4]!)
   11098:	ldr	lr, [pc, #4]	; 110a4 <fdopen@plt-0x4>
   1109c:	add	lr, pc, lr
   110a0:	ldr	pc, [lr, #8]!
   110a4:	andeq	sl, r1, ip, asr pc

000110a8 <fdopen@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #106496	; 0x1a000
   110b0:	ldr	pc, [ip, #3932]!	; 0xf5c

000110b4 <calloc@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #106496	; 0x1a000
   110bc:	ldr	pc, [ip, #3924]!	; 0xf54

000110c0 <fputs_unlocked@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #106496	; 0x1a000
   110c8:	ldr	pc, [ip, #3916]!	; 0xf4c

000110cc <raise@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #106496	; 0x1a000
   110d4:	ldr	pc, [ip, #3908]!	; 0xf44

000110d8 <gmtime_r@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #106496	; 0x1a000
   110e0:	ldr	pc, [ip, #3900]!	; 0xf3c

000110e4 <strcmp@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #106496	; 0x1a000
   110ec:	ldr	pc, [ip, #3892]!	; 0xf34

000110f0 <strtol@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #106496	; 0x1a000
   110f8:	ldr	pc, [ip, #3884]!	; 0xf2c

000110fc <posix_fadvise64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #106496	; 0x1a000
   11104:	ldr	pc, [ip, #3876]!	; 0xf24

00011108 <mktime@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #106496	; 0x1a000
   11110:	ldr	pc, [ip, #3868]!	; 0xf1c

00011114 <fflush@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #106496	; 0x1a000
   1111c:	ldr	pc, [ip, #3860]!	; 0xf14

00011120 <wcwidth@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #106496	; 0x1a000
   11128:	ldr	pc, [ip, #3852]!	; 0xf0c

0001112c <free@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #106496	; 0x1a000
   11134:	ldr	pc, [ip, #3844]!	; 0xf04

00011138 <clock_gettime@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #106496	; 0x1a000
   11140:	ldr	pc, [ip, #3836]!	; 0xefc

00011144 <_exit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #106496	; 0x1a000
   1114c:	ldr	pc, [ip, #3828]!	; 0xef4

00011150 <memcpy@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #106496	; 0x1a000
   11158:	ldr	pc, [ip, #3820]!	; 0xeec

0001115c <mbsinit@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #106496	; 0x1a000
   11164:	ldr	pc, [ip, #3812]!	; 0xee4

00011168 <memcmp@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #106496	; 0x1a000
   11170:	ldr	pc, [ip, #3804]!	; 0xedc

00011174 <fputc_unlocked@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #106496	; 0x1a000
   1117c:	ldr	pc, [ip, #3796]!	; 0xed4

00011180 <getc_unlocked@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #106496	; 0x1a000
   11188:	ldr	pc, [ip, #3788]!	; 0xecc

0001118c <dcgettext@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #106496	; 0x1a000
   11194:	ldr	pc, [ip, #3780]!	; 0xec4

00011198 <realloc@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #106496	; 0x1a000
   111a0:	ldr	pc, [ip, #3772]!	; 0xebc

000111a4 <localtime_r@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #106496	; 0x1a000
   111ac:	ldr	pc, [ip, #3764]!	; 0xeb4

000111b0 <textdomain@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #106496	; 0x1a000
   111b8:	ldr	pc, [ip, #3756]!	; 0xeac

000111bc <iswcntrl@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #106496	; 0x1a000
   111c4:	ldr	pc, [ip, #3748]!	; 0xea4

000111c8 <iswprint@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #106496	; 0x1a000
   111d0:	ldr	pc, [ip, #3740]!	; 0xe9c

000111d4 <tzset@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #106496	; 0x1a000
   111dc:	ldr	pc, [ip, #3732]!	; 0xe94

000111e0 <__fxstat64@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #106496	; 0x1a000
   111e8:	ldr	pc, [ip, #3724]!	; 0xe8c

000111ec <lseek64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #106496	; 0x1a000
   111f4:	ldr	pc, [ip, #3716]!	; 0xe84

000111f8 <__ctype_get_mb_cur_max@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #106496	; 0x1a000
   11200:	ldr	pc, [ip, #3708]!	; 0xe7c

00011204 <__fpending@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #106496	; 0x1a000
   1120c:	ldr	pc, [ip, #3700]!	; 0xe74

00011210 <ferror_unlocked@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #106496	; 0x1a000
   11218:	ldr	pc, [ip, #3692]!	; 0xe6c

0001121c <mbrtowc@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #106496	; 0x1a000
   11224:	ldr	pc, [ip, #3684]!	; 0xe64

00011228 <error@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #106496	; 0x1a000
   11230:	ldr	pc, [ip, #3676]!	; 0xe5c

00011234 <getenv@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #106496	; 0x1a000
   1123c:	ldr	pc, [ip, #3668]!	; 0xe54

00011240 <malloc@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #106496	; 0x1a000
   11248:	ldr	pc, [ip, #3660]!	; 0xe4c

0001124c <__libc_start_main@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #106496	; 0x1a000
   11254:	ldr	pc, [ip, #3652]!	; 0xe44

00011258 <strftime@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #106496	; 0x1a000
   11260:	ldr	pc, [ip, #3644]!	; 0xe3c

00011264 <__freading@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #106496	; 0x1a000
   1126c:	ldr	pc, [ip, #3636]!	; 0xe34

00011270 <__ctype_tolower_loc@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #106496	; 0x1a000
   11278:	ldr	pc, [ip, #3628]!	; 0xe2c

0001127c <__ctype_toupper_loc@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #106496	; 0x1a000
   11284:	ldr	pc, [ip, #3620]!	; 0xe24

00011288 <__gmon_start__@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #106496	; 0x1a000
   11290:	ldr	pc, [ip, #3612]!	; 0xe1c

00011294 <getopt_long@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #106496	; 0x1a000
   1129c:	ldr	pc, [ip, #3604]!	; 0xe14

000112a0 <__ctype_b_loc@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #106496	; 0x1a000
   112a8:	ldr	pc, [ip, #3596]!	; 0xe0c

000112ac <exit@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #106496	; 0x1a000
   112b4:	ldr	pc, [ip, #3588]!	; 0xe04

000112b8 <strlen@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #106496	; 0x1a000
   112c0:	ldr	pc, [ip, #3580]!	; 0xdfc

000112c4 <strchr@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #106496	; 0x1a000
   112cc:	ldr	pc, [ip, #3572]!	; 0xdf4

000112d0 <setenv@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #106496	; 0x1a000
   112d8:	ldr	pc, [ip, #3564]!	; 0xdec

000112dc <ungetc@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #106496	; 0x1a000
   112e4:	ldr	pc, [ip, #3556]!	; 0xde4

000112e8 <__errno_location@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #106496	; 0x1a000
   112f0:	ldr	pc, [ip, #3548]!	; 0xddc

000112f4 <__sprintf_chk@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #106496	; 0x1a000
   112fc:	ldr	pc, [ip, #3540]!	; 0xdd4

00011300 <__cxa_atexit@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #106496	; 0x1a000
   11308:	ldr	pc, [ip, #3532]!	; 0xdcc

0001130c <memset@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #106496	; 0x1a000
   11314:	ldr	pc, [ip, #3524]!	; 0xdc4

00011318 <__printf_chk@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #106496	; 0x1a000
   11320:	ldr	pc, [ip, #3516]!	; 0xdbc

00011324 <fileno@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #106496	; 0x1a000
   1132c:	ldr	pc, [ip, #3508]!	; 0xdb4

00011330 <strtoumax@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #106496	; 0x1a000
   11338:	ldr	pc, [ip, #3500]!	; 0xdac

0001133c <__fprintf_chk@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #106496	; 0x1a000
   11344:	ldr	pc, [ip, #3492]!	; 0xda4

00011348 <strtoimax@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #106496	; 0x1a000
   11350:	ldr	pc, [ip, #3484]!	; 0xd9c

00011354 <fclose@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #106496	; 0x1a000
   1135c:	ldr	pc, [ip, #3476]!	; 0xd94

00011360 <fseeko64@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #106496	; 0x1a000
   11368:	ldr	pc, [ip, #3468]!	; 0xd8c

0001136c <fcntl64@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #106496	; 0x1a000
   11374:	ldr	pc, [ip, #3460]!	; 0xd84

00011378 <setlocale@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #106496	; 0x1a000
   11380:	ldr	pc, [ip, #3452]!	; 0xd7c

00011384 <strrchr@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #106496	; 0x1a000
   1138c:	ldr	pc, [ip, #3444]!	; 0xd74

00011390 <nl_langinfo@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #106496	; 0x1a000
   11398:	ldr	pc, [ip, #3436]!	; 0xd6c

0001139c <timegm@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #106496	; 0x1a000
   113a4:	ldr	pc, [ip, #3428]!	; 0xd64

000113a8 <clearerr_unlocked@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #106496	; 0x1a000
   113b0:	ldr	pc, [ip, #3420]!	; 0xd5c

000113b4 <fopen64@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #106496	; 0x1a000
   113bc:	ldr	pc, [ip, #3412]!	; 0xd54

000113c0 <bindtextdomain@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #106496	; 0x1a000
   113c8:	ldr	pc, [ip, #3404]!	; 0xd4c

000113cc <unsetenv@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #106496	; 0x1a000
   113d4:	ldr	pc, [ip, #3396]!	; 0xd44

000113d8 <fputs@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #106496	; 0x1a000
   113e0:	ldr	pc, [ip, #3388]!	; 0xd3c

000113e4 <strncmp@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #106496	; 0x1a000
   113ec:	ldr	pc, [ip, #3380]!	; 0xd34

000113f0 <abort@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #106496	; 0x1a000
   113f8:	ldr	pc, [ip, #3372]!	; 0xd2c

000113fc <close@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #106496	; 0x1a000
   11404:	ldr	pc, [ip, #3364]!	; 0xd24

00011408 <putchar_unlocked@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #106496	; 0x1a000
   11410:	ldr	pc, [ip, #3356]!	; 0xd1c

00011414 <__assert_fail@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #106496	; 0x1a000
   1141c:	ldr	pc, [ip, #3348]!	; 0xd14

Disassembly of section .text:

00011420 <.text>:
   11420:	push	{r4, lr}
   11424:	bl	112e8 <__errno_location@plt>
   11428:	mov	r3, #12
   1142c:	str	r3, [r0]
   11430:	mov	r0, #0
   11434:	pop	{r4, pc}
   11438:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1143c:	sub	sp, sp, #52	; 0x34
   11440:	mov	r5, #0
   11444:	str	r0, [sp, #16]
   11448:	ldr	r0, [r1]
   1144c:	str	r1, [sp, #24]
   11450:	str	r5, [sp, #36]	; 0x24
   11454:	bl	15ae8 <__assert_fail@plt+0x46d4>
   11458:	ldr	r1, [pc, #2036]	; 11c54 <__assert_fail@plt+0x840>
   1145c:	mov	r0, #6
   11460:	bl	11378 <setlocale@plt>
   11464:	ldr	r1, [pc, #2028]	; 11c58 <__assert_fail@plt+0x844>
   11468:	ldr	r0, [pc, #2028]	; 11c5c <__assert_fail@plt+0x848>
   1146c:	bl	113c0 <bindtextdomain@plt>
   11470:	ldr	r0, [pc, #2020]	; 11c5c <__assert_fail@plt+0x848>
   11474:	bl	111b0 <textdomain@plt>
   11478:	ldr	r0, [pc, #2016]	; 11c60 <__assert_fail@plt+0x84c>
   1147c:	bl	192a8 <__assert_fail@plt+0x7e94>
   11480:	ldr	r3, [sp, #16]
   11484:	cmp	r3, #1
   11488:	ble	1149c <__assert_fail@plt+0x88>
   1148c:	mov	r1, #4
   11490:	sub	r0, r3, #1
   11494:	bl	17b98 <__assert_fail@plt+0x6784>
   11498:	mov	r5, r0
   1149c:	ldr	r9, [pc, #1984]	; 11c64 <__assert_fail@plt+0x850>
   114a0:	mov	sl, #0
   114a4:	mov	r8, sl
   114a8:	mov	r6, sl
   114ac:	mov	fp, sl
   114b0:	mov	r7, sl
   114b4:	str	sl, [sp, #20]
   114b8:	mvn	r3, #0
   114bc:	ldr	r0, [sp, #16]
   114c0:	str	r3, [sp, #40]	; 0x28
   114c4:	add	r3, sp, #40	; 0x28
   114c8:	ldr	r1, [sp, #24]
   114cc:	str	r3, [sp]
   114d0:	ldr	r3, [pc, #1936]	; 11c68 <__assert_fail@plt+0x854>
   114d4:	add	r2, r3, #488	; 0x1e8
   114d8:	bl	11294 <getopt_long@plt>
   114dc:	cmn	r0, #1
   114e0:	mov	r4, r0
   114e4:	beq	11a14 <__assert_fail@plt+0x600>
   114e8:	sub	r3, r0, #48	; 0x30
   114ec:	cmp	r3, #9
   114f0:	bhi	11530 <__assert_fail@plt+0x11c>
   114f4:	ldr	r2, [sp, #36]	; 0x24
   114f8:	add	r3, sl, #1
   114fc:	cmp	r3, r2
   11500:	bcc	1151c <__assert_fail@plt+0x108>
   11504:	mov	r0, r8
   11508:	add	r1, sp, #36	; 0x24
   1150c:	str	r3, [sp, #28]
   11510:	bl	17c08 <__assert_fail@plt+0x67f4>
   11514:	ldr	r3, [sp, #28]
   11518:	mov	r8, r0
   1151c:	mov	r2, #0
   11520:	strb	r4, [r8, sl]
   11524:	strb	r2, [r8, r3]
   11528:	mov	sl, r3
   1152c:	b	114b8 <__assert_fail@plt+0xa4>
   11530:	cmp	r0, #101	; 0x65
   11534:	beq	11828 <__assert_fail@plt+0x414>
   11538:	bgt	1161c <__assert_fail@plt+0x208>
   1153c:	cmp	r0, #78	; 0x4e
   11540:	beq	118e0 <__assert_fail@plt+0x4cc>
   11544:	ldr	sl, [pc, #1824]	; 11c6c <__assert_fail@plt+0x858>
   11548:	bgt	1159c <__assert_fail@plt+0x188>
   1154c:	cmp	r0, #1
   11550:	beq	1173c <__assert_fail@plt+0x328>
   11554:	bgt	11574 <__assert_fail@plt+0x160>
   11558:	cmn	r0, #3
   1155c:	beq	119dc <__assert_fail@plt+0x5c8>
   11560:	cmn	r0, #2
   11564:	moveq	r0, #0
   11568:	beq	11570 <__assert_fail@plt+0x15c>
   1156c:	mov	r0, #1
   11570:	bl	13bd0 <__assert_fail@plt+0x27bc>
   11574:	cmp	r0, #70	; 0x46
   11578:	beq	11858 <__assert_fail@plt+0x444>
   1157c:	cmp	r0, #74	; 0x4a
   11580:	beq	11898 <__assert_fail@plt+0x484>
   11584:	cmp	r0, #68	; 0x44
   11588:	bne	1156c <__assert_fail@plt+0x158>
   1158c:	ldr	r3, [pc, #1756]	; 11c70 <__assert_fail@plt+0x85c>
   11590:	ldr	r3, [r3]
   11594:	str	r3, [sl, #48]	; 0x30
   11598:	b	11758 <__assert_fail@plt+0x344>
   1159c:	cmp	r0, #97	; 0x61
   115a0:	beq	11814 <__assert_fail@plt+0x400>
   115a4:	bgt	11600 <__assert_fail@plt+0x1ec>
   115a8:	cmp	r0, #84	; 0x54
   115ac:	beq	11984 <__assert_fail@plt+0x570>
   115b0:	cmp	r0, #87	; 0x57
   115b4:	ldr	r3, [pc, #1716]	; 11c70 <__assert_fail@plt+0x85c>
   115b8:	beq	119a0 <__assert_fail@plt+0x58c>
   115bc:	cmp	r0, #83	; 0x53
   115c0:	bne	1156c <__assert_fail@plt+0x158>
   115c4:	ldr	r2, [pc, #1672]	; 11c54 <__assert_fail@plt+0x840>
   115c8:	mov	r4, #0
   115cc:	ldr	r6, [r3]
   115d0:	str	r4, [sl, #140]	; 0x8c
   115d4:	str	r2, [r9, #48]	; 0x30
   115d8:	mov	r2, #1
   115dc:	cmp	r6, r4
   115e0:	strb	r2, [sl, #148]	; 0x94
   115e4:	beq	11758 <__assert_fail@plt+0x344>
   115e8:	mov	r0, r6
   115ec:	bl	112b8 <strlen@plt>
   115f0:	str	r6, [r9, #48]	; 0x30
   115f4:	mov	r6, r4
   115f8:	str	r0, [sl, #140]	; 0x8c
   115fc:	b	11758 <__assert_fail@plt+0x344>
   11600:	cmp	r0, #99	; 0x63
   11604:	mov	r3, #1
   11608:	strbeq	r3, [sl, #110]	; 0x6e
   1160c:	beq	11758 <__assert_fail@plt+0x344>
   11610:	strble	r3, [sl, #181]	; 0xb5
   11614:	strbgt	r3, [sl, #180]	; 0xb4
   11618:	b	11758 <__assert_fail@plt+0x344>
   1161c:	cmp	r0, #111	; 0x6f
   11620:	beq	1190c <__assert_fail@plt+0x4f8>
   11624:	bgt	1169c <__assert_fail@plt+0x288>
   11628:	cmp	r0, #105	; 0x69
   1162c:	beq	11868 <__assert_fail@plt+0x454>
   11630:	bgt	11658 <__assert_fail@plt+0x244>
   11634:	cmp	r0, #102	; 0x66
   11638:	beq	11858 <__assert_fail@plt+0x444>
   1163c:	cmp	r0, #104	; 0x68
   11640:	bne	1156c <__assert_fail@plt+0x158>
   11644:	ldr	r3, [pc, #1572]	; 11c70 <__assert_fail@plt+0x85c>
   11648:	ldr	r2, [r3]
   1164c:	ldr	r3, [pc, #1560]	; 11c6c <__assert_fail@plt+0x858>
   11650:	str	r2, [r3, #56]	; 0x38
   11654:	b	11758 <__assert_fail@plt+0x344>
   11658:	cmp	r0, #109	; 0x6d
   1165c:	beq	118a4 <__assert_fail@plt+0x490>
   11660:	ldr	r3, [pc, #1544]	; 11c70 <__assert_fail@plt+0x85c>
   11664:	bgt	118b4 <__assert_fail@plt+0x4a0>
   11668:	cmp	r0, #108	; 0x6c
   1166c:	bne	1156c <__assert_fail@plt+0x158>
   11670:	mov	r2, #5
   11674:	ldr	r1, [pc, #1528]	; 11c74 <__assert_fail@plt+0x860>
   11678:	mov	r0, #0
   1167c:	ldr	r4, [r3]
   11680:	bl	1118c <dcgettext@plt>
   11684:	ldr	r2, [pc, #1516]	; 11c78 <__assert_fail@plt+0x864>
   11688:	mov	r3, r0
   1168c:	mov	r1, #1
   11690:	mov	r0, r4
   11694:	bl	1208c <__assert_fail@plt+0xc78>
   11698:	b	11758 <__assert_fail@plt+0x344>
   1169c:	cmp	r0, #118	; 0x76
   116a0:	beq	11990 <__assert_fail@plt+0x57c>
   116a4:	bgt	116d0 <__assert_fail@plt+0x2bc>
   116a8:	cmp	r0, #115	; 0x73
   116ac:	ldr	sl, [pc, #1464]	; 11c6c <__assert_fail@plt+0x858>
   116b0:	beq	11934 <__assert_fail@plt+0x520>
   116b4:	cmp	r0, #116	; 0x74
   116b8:	beq	11970 <__assert_fail@plt+0x55c>
   116bc:	cmp	r0, #114	; 0x72
   116c0:	bne	1156c <__assert_fail@plt+0x158>
   116c4:	mov	r3, #1
   116c8:	strb	r3, [sl, #127]	; 0x7f
   116cc:	b	11758 <__assert_fail@plt+0x344>
   116d0:	cmp	r0, #256	; 0x100
   116d4:	ldr	sl, [pc, #1428]	; 11c70 <__assert_fail@plt+0x85c>
   116d8:	beq	117f8 <__assert_fail@plt+0x3e4>
   116dc:	movw	r3, #257	; 0x101
   116e0:	cmp	r0, r3
   116e4:	beq	11788 <__assert_fail@plt+0x374>
   116e8:	cmp	r0, #119	; 0x77
   116ec:	bne	1156c <__assert_fail@plt+0x158>
   116f0:	ldr	r4, [sl]
   116f4:	mov	r2, #5
   116f8:	mov	r0, #0
   116fc:	ldr	r1, [pc, #1400]	; 11c7c <__assert_fail@plt+0x868>
   11700:	bl	1118c <dcgettext@plt>
   11704:	mov	r3, r0
   11708:	add	r2, sp, #44	; 0x2c
   1170c:	mov	r1, #1
   11710:	mov	r0, r4
   11714:	bl	1208c <__assert_fail@plt+0xc78>
   11718:	ldr	r3, [pc, #1356]	; 11c6c <__assert_fail@plt+0x858>
   1171c:	ldrb	r3, [r3, #124]	; 0x7c
   11720:	cmp	r3, #0
   11724:	ldreq	r3, [sp, #44]	; 0x2c
   11728:	streq	r3, [r9, #16]
   1172c:	mov	r3, #1
   11730:	mov	fp, r3
   11734:	str	r3, [sp, #20]
   11738:	b	11758 <__assert_fail@plt+0x344>
   1173c:	ldrd	r2, [sl, #24]
   11740:	ldr	r4, [pc, #1320]	; 11c70 <__assert_fail@plt+0x85c>
   11744:	orrs	r3, r2, r3
   11748:	beq	11760 <__assert_fail@plt+0x34c>
   1174c:	ldr	r3, [r4]
   11750:	str	r3, [r5, r7, lsl #2]
   11754:	add	r7, r7, #1
   11758:	mov	r3, #0
   1175c:	b	11528 <__assert_fail@plt+0x114>
   11760:	ldr	r2, [r4]
   11764:	ldrb	r1, [r2]
   11768:	cmp	r1, #43	; 0x2b
   1176c:	bne	1174c <__assert_fail@plt+0x338>
   11770:	add	r2, r2, #1
   11774:	mvn	r0, #1
   11778:	bl	11f7c <__assert_fail@plt+0xb68>
   1177c:	cmp	r0, #0
   11780:	bne	11758 <__assert_fail@plt+0x344>
   11784:	b	1174c <__assert_fail@plt+0x338>
   11788:	ldr	r4, [sl]
   1178c:	cmp	r4, #0
   11790:	bne	117b4 <__assert_fail@plt+0x3a0>
   11794:	ldr	r1, [pc, #1252]	; 11c80 <__assert_fail@plt+0x86c>
   11798:	mov	r2, #5
   1179c:	mov	r0, #0
   117a0:	bl	1118c <dcgettext@plt>
   117a4:	mov	r2, r0
   117a8:	mov	r1, #0
   117ac:	mov	r0, #1
   117b0:	bl	11228 <error@plt>
   117b4:	mov	r2, r4
   117b8:	mov	r1, #0
   117bc:	ldr	r0, [sp, #40]	; 0x28
   117c0:	bl	11f7c <__assert_fail@plt+0xb68>
   117c4:	subs	r4, r0, #0
   117c8:	bne	11758 <__assert_fail@plt+0x344>
   117cc:	mov	r2, #5
   117d0:	ldr	r1, [pc, #1196]	; 11c84 <__assert_fail@plt+0x870>
   117d4:	bl	1118c <dcgettext@plt>
   117d8:	mov	r5, r0
   117dc:	ldr	r0, [sl]
   117e0:	bl	170e8 <__assert_fail@plt+0x5cd4>
   117e4:	mov	r3, r0
   117e8:	mov	r2, r5
   117ec:	mov	r1, r4
   117f0:	mov	r0, #1
   117f4:	bl	11228 <error@plt>
   117f8:	ldr	r0, [sl]
   117fc:	bl	120d4 <__assert_fail@plt+0xcc0>
   11800:	mov	r0, r8
   11804:	mov	r8, #0
   11808:	bl	14304 <__assert_fail@plt+0x2ef0>
   1180c:	str	r8, [sp, #36]	; 0x24
   11810:	b	11758 <__assert_fail@plt+0x344>
   11814:	mov	r3, #1
   11818:	strb	r3, [sl, #185]	; 0xb9
   1181c:	mov	r3, #0
   11820:	strb	r3, [r9, #4]
   11824:	b	11758 <__assert_fail@plt+0x344>
   11828:	ldr	r3, [pc, #1088]	; 11c70 <__assert_fail@plt+0x85c>
   1182c:	ldr	r0, [r3]
   11830:	cmp	r0, #0
   11834:	beq	11848 <__assert_fail@plt+0x434>
   11838:	ldr	r3, [pc, #1096]	; 11c88 <__assert_fail@plt+0x874>
   1183c:	mov	r1, r4
   11840:	sub	r2, r3, #4
   11844:	bl	13f94 <__assert_fail@plt+0x2b80>
   11848:	ldr	r3, [pc, #1052]	; 11c6c <__assert_fail@plt+0x858>
   1184c:	mov	r2, #1
   11850:	strb	r2, [r3, #108]	; 0x6c
   11854:	b	11758 <__assert_fail@plt+0x344>
   11858:	ldr	r3, [pc, #1036]	; 11c6c <__assert_fail@plt+0x858>
   1185c:	mov	r2, #1
   11860:	strb	r2, [r3, #184]	; 0xb8
   11864:	b	11758 <__assert_fail@plt+0x344>
   11868:	ldr	r3, [pc, #1024]	; 11c70 <__assert_fail@plt+0x85c>
   1186c:	ldr	r0, [r3]
   11870:	cmp	r0, #0
   11874:	beq	11888 <__assert_fail@plt+0x474>
   11878:	ldr	r3, [pc, #1036]	; 11c8c <__assert_fail@plt+0x878>
   1187c:	mov	r1, r4
   11880:	sub	r2, r3, #4
   11884:	bl	13f94 <__assert_fail@plt+0x2b80>
   11888:	ldr	r3, [pc, #988]	; 11c6c <__assert_fail@plt+0x858>
   1188c:	mov	r2, #1
   11890:	strb	r2, [r3, #76]	; 0x4c
   11894:	b	11758 <__assert_fail@plt+0x344>
   11898:	mov	r3, #1
   1189c:	strb	r3, [sl, #182]	; 0xb6
   118a0:	b	11758 <__assert_fail@plt+0x344>
   118a4:	ldr	r3, [pc, #960]	; 11c6c <__assert_fail@plt+0x858>
   118a8:	mov	r2, #1
   118ac:	strb	r2, [r3, #4]
   118b0:	b	1181c <__assert_fail@plt+0x408>
   118b4:	ldr	r0, [r3]
   118b8:	mov	r1, #1
   118bc:	ldr	r2, [pc, #936]	; 11c6c <__assert_fail@plt+0x858>
   118c0:	cmp	r0, #0
   118c4:	strb	r1, [r2, #183]	; 0xb7
   118c8:	beq	11758 <__assert_fail@plt+0x344>
   118cc:	ldr	r3, [pc, #956]	; 11c90 <__assert_fail@plt+0x87c>
   118d0:	mov	r1, #110	; 0x6e
   118d4:	add	r2, r3, #4
   118d8:	bl	13f94 <__assert_fail@plt+0x2b80>
   118dc:	b	11758 <__assert_fail@plt+0x344>
   118e0:	ldr	r3, [pc, #904]	; 11c70 <__assert_fail@plt+0x85c>
   118e4:	mov	r0, #0
   118e8:	mov	r2, #5
   118ec:	ldr	r1, [pc, #928]	; 11c94 <__assert_fail@plt+0x880>
   118f0:	strb	r0, [r9, #41]	; 0x29
   118f4:	ldr	r4, [r3]
   118f8:	bl	1118c <dcgettext@plt>
   118fc:	mov	r3, r0
   11900:	ldr	r2, [pc, #912]	; 11c98 <__assert_fail@plt+0x884>
   11904:	mov	r1, #-2147483648	; 0x80000000
   11908:	b	11690 <__assert_fail@plt+0x27c>
   1190c:	ldr	r3, [pc, #860]	; 11c70 <__assert_fail@plt+0x85c>
   11910:	mov	r2, #5
   11914:	mov	r0, #0
   11918:	ldr	r1, [pc, #892]	; 11c9c <__assert_fail@plt+0x888>
   1191c:	ldr	r4, [r3]
   11920:	bl	1118c <dcgettext@plt>
   11924:	mov	r3, r0
   11928:	ldr	r2, [pc, #880]	; 11ca0 <__assert_fail@plt+0x88c>
   1192c:	mov	r1, #0
   11930:	b	11690 <__assert_fail@plt+0x27c>
   11934:	ldrb	fp, [sl, #148]	; 0x94
   11938:	cmp	fp, #0
   1193c:	movne	r6, fp
   11940:	bne	11758 <__assert_fail@plt+0x344>
   11944:	ldr	r3, [pc, #804]	; 11c70 <__assert_fail@plt+0x85c>
   11948:	ldr	r4, [r3]
   1194c:	cmp	r4, #0
   11950:	beq	11964 <__assert_fail@plt+0x550>
   11954:	mov	r0, r4
   11958:	bl	112b8 <strlen@plt>
   1195c:	str	r4, [r9, #48]	; 0x30
   11960:	str	r0, [sl, #140]	; 0x8c
   11964:	mov	r6, #1
   11968:	mov	fp, r6
   1196c:	b	11758 <__assert_fail@plt+0x344>
   11970:	mov	r3, #0
   11974:	strb	r3, [r9, #52]	; 0x34
   11978:	mov	r3, #1
   1197c:	strb	r3, [sl, #133]	; 0x85
   11980:	b	11758 <__assert_fail@plt+0x344>
   11984:	mov	r3, #0
   11988:	strb	r3, [r9, #52]	; 0x34
   1198c:	b	1197c <__assert_fail@plt+0x568>
   11990:	ldr	r3, [pc, #724]	; 11c6c <__assert_fail@plt+0x858>
   11994:	mov	r2, #1
   11998:	strb	r2, [r3, #109]	; 0x6d
   1199c:	b	11758 <__assert_fail@plt+0x344>
   119a0:	mov	r4, #1
   119a4:	mov	r2, #5
   119a8:	ldr	r1, [pc, #756]	; 11ca4 <__assert_fail@plt+0x890>
   119ac:	mov	r0, #0
   119b0:	strb	r4, [sl, #124]	; 0x7c
   119b4:	ldr	sl, [r3]
   119b8:	bl	1118c <dcgettext@plt>
   119bc:	mov	r3, r0
   119c0:	ldr	r2, [pc, #736]	; 11ca8 <__assert_fail@plt+0x894>
   119c4:	mov	r1, r4
   119c8:	mov	r0, sl
   119cc:	bl	1208c <__assert_fail@plt+0xc78>
   119d0:	mov	r3, #0
   119d4:	str	r3, [sp, #20]
   119d8:	b	11758 <__assert_fail@plt+0x344>
   119dc:	ldr	r3, [pc, #712]	; 11cac <__assert_fail@plt+0x898>
   119e0:	mov	r4, #0
   119e4:	ldr	r0, [pc, #708]	; 11cb0 <__assert_fail@plt+0x89c>
   119e8:	ldr	r2, [pc, #708]	; 11cb4 <__assert_fail@plt+0x8a0>
   119ec:	stmib	sp, {r3, r4}
   119f0:	ldr	r3, [pc, #704]	; 11cb8 <__assert_fail@plt+0x8a4>
   119f4:	ldr	r1, [pc, #704]	; 11cbc <__assert_fail@plt+0x8a8>
   119f8:	str	r3, [sp]
   119fc:	ldr	r3, [pc, #700]	; 11cc0 <__assert_fail@plt+0x8ac>
   11a00:	ldr	r0, [r0]
   11a04:	ldr	r3, [r3]
   11a08:	bl	17a10 <__assert_fail@plt+0x65fc>
   11a0c:	mov	r0, r4
   11a10:	bl	112ac <exit@plt>
   11a14:	cmp	r8, #0
   11a18:	beq	11a2c <__assert_fail@plt+0x618>
   11a1c:	mov	r0, r8
   11a20:	bl	120d4 <__assert_fail@plt+0xcc0>
   11a24:	mov	r0, r8
   11a28:	bl	14304 <__assert_fail@plt+0x2ef0>
   11a2c:	ldr	r4, [pc, #568]	; 11c6c <__assert_fail@plt+0x858>
   11a30:	ldr	r3, [r4, #48]	; 0x30
   11a34:	cmp	r3, #0
   11a38:	bne	11a54 <__assert_fail@plt+0x640>
   11a3c:	ldr	r0, [pc, #640]	; 11cc4 <__assert_fail@plt+0x8b0>
   11a40:	bl	11234 <getenv@plt>
   11a44:	cmp	r0, #0
   11a48:	bne	11a9c <__assert_fail@plt+0x688>
   11a4c:	ldr	r3, [pc, #628]	; 11cc8 <__assert_fail@plt+0x8b4>
   11a50:	str	r3, [r4, #48]	; 0x30
   11a54:	ldr	r0, [pc, #624]	; 11ccc <__assert_fail@plt+0x8b8>
   11a58:	bl	11234 <getenv@plt>
   11a5c:	bl	17198 <__assert_fail@plt+0x5d84>
   11a60:	ldrd	r2, [r4, #24]
   11a64:	str	r0, [r4, #44]	; 0x2c
   11a68:	orrs	r3, r2, r3
   11a6c:	moveq	r2, #1
   11a70:	moveq	r3, #0
   11a74:	strdeq	r2, [r4, #24]
   11a78:	ldrb	r2, [r4, #4]
   11a7c:	cmp	r2, #0
   11a80:	beq	11ac8 <__assert_fail@plt+0x6b4>
   11a84:	ldrb	r8, [r4, #32]
   11a88:	cmp	r8, #0
   11a8c:	beq	11ab4 <__assert_fail@plt+0x6a0>
   11a90:	mov	r2, #5
   11a94:	ldr	r1, [pc, #564]	; 11cd0 <__assert_fail@plt+0x8bc>
   11a98:	b	1179c <__assert_fail@plt+0x388>
   11a9c:	mov	r0, #2
   11aa0:	bl	14420 <__assert_fail@plt+0x300c>
   11aa4:	cmp	r0, #0
   11aa8:	bne	11a4c <__assert_fail@plt+0x638>
   11aac:	ldr	r3, [pc, #544]	; 11cd4 <__assert_fail@plt+0x8c0>
   11ab0:	b	11a50 <__assert_fail@plt+0x63c>
   11ab4:	ldrb	r3, [r4, #185]	; 0xb9
   11ab8:	cmp	r3, #0
   11abc:	movne	r2, #5
   11ac0:	ldrne	r1, [pc, #528]	; 11cd8 <__assert_fail@plt+0x8c4>
   11ac4:	bne	1179c <__assert_fail@plt+0x388>
   11ac8:	cmp	fp, #0
   11acc:	beq	11b10 <__assert_fail@plt+0x6fc>
   11ad0:	ldr	r3, [sp, #20]
   11ad4:	cmp	r3, #0
   11ad8:	beq	11bcc <__assert_fail@plt+0x7b8>
   11adc:	cmp	r2, #0
   11ae0:	bne	11af8 <__assert_fail@plt+0x6e4>
   11ae4:	ldrb	r3, [r4, #32]
   11ae8:	cmp	r3, #0
   11aec:	moveq	r3, #1
   11af0:	strbeq	r3, [r4, #182]	; 0xb6
   11af4:	beq	11b10 <__assert_fail@plt+0x6fc>
   11af8:	mov	r3, #1
   11afc:	cmp	r6, #0
   11b00:	strb	r3, [r4, #124]	; 0x7c
   11b04:	beq	11b10 <__assert_fail@plt+0x6fc>
   11b08:	mov	r3, #1
   11b0c:	strb	r3, [r4, #148]	; 0x94
   11b10:	ldr	r1, [pc, #452]	; 11cdc <__assert_fail@plt+0x8c8>
   11b14:	mov	r0, #0
   11b18:	ldr	r3, [r1]
   11b1c:	ldr	ip, [sp, #16]
   11b20:	cmp	r3, ip
   11b24:	blt	11c14 <__assert_fail@plt+0x800>
   11b28:	cmp	r0, #0
   11b2c:	strne	r3, [r1]
   11b30:	cmp	r7, #0
   11b34:	moveq	r1, r7
   11b38:	moveq	r0, r1
   11b3c:	beq	11b54 <__assert_fail@plt+0x740>
   11b40:	cmp	r2, #0
   11b44:	addeq	r7, r5, r7, lsl #2
   11b48:	beq	11c40 <__assert_fail@plt+0x82c>
   11b4c:	mov	r1, r5
   11b50:	mov	r0, r7
   11b54:	bl	1302c <__assert_fail@plt+0x1c18>
   11b58:	ldr	r0, [r4, #112]	; 0x70
   11b5c:	bl	14304 <__assert_fail@plt+0x2ef0>
   11b60:	ldr	r0, [r4, #100]	; 0x64
   11b64:	bl	14304 <__assert_fail@plt+0x2ef0>
   11b68:	ldr	r0, [r4]
   11b6c:	bl	14304 <__assert_fail@plt+0x2ef0>
   11b70:	ldr	r0, [r4, #152]	; 0x98
   11b74:	bl	14304 <__assert_fail@plt+0x2ef0>
   11b78:	ldr	r0, [r4, #160]	; 0xa0
   11b7c:	bl	14304 <__assert_fail@plt+0x2ef0>
   11b80:	ldr	r0, [r4, #20]
   11b84:	bl	14304 <__assert_fail@plt+0x2ef0>
   11b88:	ldrb	r3, [r4, #125]	; 0x7d
   11b8c:	cmp	r3, #0
   11b90:	beq	11c4c <__assert_fail@plt+0x838>
   11b94:	ldr	r3, [pc, #324]	; 11ce0 <__assert_fail@plt+0x8cc>
   11b98:	ldr	r0, [r3]
   11b9c:	bl	14178 <__assert_fail@plt+0x2d64>
   11ba0:	cmn	r0, #1
   11ba4:	bne	11c4c <__assert_fail@plt+0x838>
   11ba8:	bl	112e8 <__errno_location@plt>
   11bac:	ldr	r4, [r0]
   11bb0:	mov	r2, #5
   11bb4:	mov	r0, #0
   11bb8:	ldr	r1, [pc, #292]	; 11ce4 <__assert_fail@plt+0x8d0>
   11bbc:	bl	1118c <dcgettext@plt>
   11bc0:	mov	r2, r0
   11bc4:	mov	r1, r4
   11bc8:	b	117ac <__assert_fail@plt+0x398>
   11bcc:	ldrb	r3, [r4, #148]	; 0x94
   11bd0:	eor	r3, r3, #1
   11bd4:	tst	r6, r3
   11bd8:	beq	11b10 <__assert_fail@plt+0x6fc>
   11bdc:	cmp	r2, #0
   11be0:	bne	11bf0 <__assert_fail@plt+0x7dc>
   11be4:	ldrb	r3, [r4, #32]
   11be8:	cmp	r3, #0
   11bec:	beq	11b10 <__assert_fail@plt+0x6fc>
   11bf0:	ldrb	r3, [r4, #124]	; 0x7c
   11bf4:	cmp	r3, #0
   11bf8:	bne	11b08 <__assert_fail@plt+0x6f4>
   11bfc:	mov	r3, #1
   11c00:	strb	r3, [r4, #182]	; 0xb6
   11c04:	ldr	r3, [r4, #140]	; 0x8c
   11c08:	cmp	r3, #0
   11c0c:	bgt	11b08 <__assert_fail@plt+0x6f4>
   11c10:	b	11b10 <__assert_fail@plt+0x6fc>
   11c14:	ldr	r0, [sp, #24]
   11c18:	ldr	r0, [r0, r3, lsl #2]
   11c1c:	add	r3, r3, #1
   11c20:	str	r0, [r5, r7, lsl #2]
   11c24:	add	r7, r7, #1
   11c28:	mov	r0, #1
   11c2c:	b	11b1c <__assert_fail@plt+0x708>
   11c30:	mov	r1, r5
   11c34:	mov	r0, #1
   11c38:	add	r5, r5, #4
   11c3c:	bl	1302c <__assert_fail@plt+0x1c18>
   11c40:	cmp	r7, r5
   11c44:	bne	11c30 <__assert_fail@plt+0x81c>
   11c48:	b	11b58 <__assert_fail@plt+0x744>
   11c4c:	ldrb	r0, [r4, #126]	; 0x7e
   11c50:	b	11a10 <__assert_fail@plt+0x5fc>
   11c54:	andeq	r9, r1, sl, ror #10
   11c58:			; <UNDEFINED> instruction: 0x0001a6bf
   11c5c:	andeq	sl, r1, r1, asr #11
   11c60:	andeq	r4, r1, r0, ror r0
   11c64:	andeq	ip, r2, r0, asr #2
   11c68:	ldrdeq	r9, [r1], -ip
   11c6c:	strdeq	ip, [r2], -r0
   11c70:	andeq	ip, r2, r8, ror #3
   11c74:	andeq	sl, r1, pc, lsl r7
   11c78:	andeq	ip, r2, r8, ror r1
   11c7c:	muleq	r1, r1, r7
   11c80:	ldrdeq	sl, [r1], -r7
   11c84:	andeq	sl, r1, r9, lsl #14
   11c88:	andeq	ip, r2, r0, ror #2
   11c8c:	andeq	ip, r2, r8, asr r1
   11c90:	andeq	ip, r2, r4, ror #2
   11c94:	andeq	sl, r1, r8, asr #14
   11c98:	andeq	ip, r2, ip, ror r1
   11c9c:	andeq	sl, r1, r1, ror r7
   11ca0:	andeq	ip, r2, r0, asr #4
   11ca4:			; <UNDEFINED> instruction: 0x0001a7be
   11ca8:	andeq	ip, r2, r0, asr r1
   11cac:	andeq	sl, r1, fp, ror #15
   11cb0:	andeq	ip, r2, r4, ror #3
   11cb4:			; <UNDEFINED> instruction: 0x0001a5bd
   11cb8:	strdeq	sl, [r1], -sl	; <UNPREDICTABLE>
   11cbc:	andeq	r9, r1, r4, asr #11
   11cc0:	andeq	ip, r2, r0, lsl #3
   11cc4:	andeq	sl, r1, r7, lsl #16
   11cc8:	andeq	sl, r1, r1, lsr #13
   11ccc:	andeq	sl, r1, r7, lsl r8
   11cd0:	andeq	sl, r1, sl, lsl r8
   11cd4:			; <UNDEFINED> instruction: 0x0001a6b0
   11cd8:	andeq	sl, r1, r5, asr r8
   11cdc:	ldrdeq	ip, [r2], -r0
   11ce0:	andeq	ip, r2, r0, ror #3
   11ce4:	andeq	r9, r1, sl, asr r5
   11ce8:	mov	fp, #0
   11cec:	mov	lr, #0
   11cf0:	pop	{r1}		; (ldr r1, [sp], #4)
   11cf4:	mov	r2, sp
   11cf8:	push	{r2}		; (str r2, [sp, #-4]!)
   11cfc:	push	{r0}		; (str r0, [sp, #-4]!)
   11d00:	ldr	ip, [pc, #16]	; 11d18 <__assert_fail@plt+0x904>
   11d04:	push	{ip}		; (str ip, [sp, #-4]!)
   11d08:	ldr	r0, [pc, #12]	; 11d1c <__assert_fail@plt+0x908>
   11d0c:	ldr	r3, [pc, #12]	; 11d20 <__assert_fail@plt+0x90c>
   11d10:	bl	1124c <__libc_start_main@plt>
   11d14:	bl	113f0 <abort@plt>
   11d18:	andeq	r9, r1, r4, lsr #5
   11d1c:	andeq	r1, r1, r8, lsr r4
   11d20:	andeq	r9, r1, r4, asr #4
   11d24:	ldr	r3, [pc, #20]	; 11d40 <__assert_fail@plt+0x92c>
   11d28:	ldr	r2, [pc, #20]	; 11d44 <__assert_fail@plt+0x930>
   11d2c:	add	r3, pc, r3
   11d30:	ldr	r2, [r3, r2]
   11d34:	cmp	r2, #0
   11d38:	bxeq	lr
   11d3c:	b	11288 <__gmon_start__@plt>
   11d40:	andeq	sl, r1, ip, asr #5
   11d44:	andeq	r0, r0, r4, lsr r1
   11d48:	ldr	r0, [pc, #24]	; 11d68 <__assert_fail@plt+0x954>
   11d4c:	ldr	r3, [pc, #24]	; 11d6c <__assert_fail@plt+0x958>
   11d50:	cmp	r3, r0
   11d54:	bxeq	lr
   11d58:	ldr	r3, [pc, #16]	; 11d70 <__assert_fail@plt+0x95c>
   11d5c:	cmp	r3, #0
   11d60:	bxeq	lr
   11d64:	bx	r3
   11d68:	andeq	ip, r2, r8, asr #3
   11d6c:	andeq	ip, r2, r8, asr #3
   11d70:	andeq	r0, r0, r0
   11d74:	ldr	r0, [pc, #36]	; 11da0 <__assert_fail@plt+0x98c>
   11d78:	ldr	r1, [pc, #36]	; 11da4 <__assert_fail@plt+0x990>
   11d7c:	sub	r1, r1, r0
   11d80:	asr	r1, r1, #2
   11d84:	add	r1, r1, r1, lsr #31
   11d88:	asrs	r1, r1, #1
   11d8c:	bxeq	lr
   11d90:	ldr	r3, [pc, #16]	; 11da8 <__assert_fail@plt+0x994>
   11d94:	cmp	r3, #0
   11d98:	bxeq	lr
   11d9c:	bx	r3
   11da0:	andeq	ip, r2, r8, asr #3
   11da4:	andeq	ip, r2, r8, asr #3
   11da8:	andeq	r0, r0, r0
   11dac:	push	{r4, lr}
   11db0:	ldr	r4, [pc, #24]	; 11dd0 <__assert_fail@plt+0x9bc>
   11db4:	ldrb	r3, [r4]
   11db8:	cmp	r3, #0
   11dbc:	popne	{r4, pc}
   11dc0:	bl	11d48 <__assert_fail@plt+0x934>
   11dc4:	mov	r3, #1
   11dc8:	strb	r3, [r4]
   11dcc:	pop	{r4, pc}
   11dd0:	andeq	ip, r2, ip, ror #3
   11dd4:	b	11d74 <__assert_fail@plt+0x960>
   11dd8:	ldr	r2, [pc, #100]	; 11e44 <__assert_fail@plt+0xa30>
   11ddc:	mov	r0, #0
   11de0:	ldr	r3, [pc, #96]	; 11e48 <__assert_fail@plt+0xa34>
   11de4:	ldr	r1, [r2]
   11de8:	ldrb	ip, [r2, #4]
   11dec:	mov	r2, r0
   11df0:	ldr	r3, [r3]
   11df4:	cmp	r1, r0
   11df8:	bxeq	lr
   11dfc:	push	{lr}		; (str lr, [sp, #-4]!)
   11e00:	ldr	lr, [r3, #8]
   11e04:	cmp	lr, #1
   11e08:	bls	11e2c <__assert_fail@plt+0xa18>
   11e0c:	cmp	ip, #0
   11e10:	beq	11e30 <__assert_fail@plt+0xa1c>
   11e14:	ldr	lr, [r3, #24]
   11e18:	cmp	lr, #0
   11e1c:	ble	11e30 <__assert_fail@plt+0xa1c>
   11e20:	ldr	lr, [r3, #28]
   11e24:	cmp	lr, #0
   11e28:	ble	11e30 <__assert_fail@plt+0xa1c>
   11e2c:	add	r0, r0, #1
   11e30:	add	r2, r2, #1
   11e34:	add	r3, r3, #40	; 0x28
   11e38:	cmp	r1, r2
   11e3c:	bne	11e00 <__assert_fail@plt+0x9ec>
   11e40:	pop	{pc}		; (ldr pc, [sp], #4)
   11e44:	andeq	ip, r2, r0, asr #2
   11e48:	strdeq	ip, [r2], -r0
   11e4c:	ldr	r3, [pc, #92]	; 11eb0 <__assert_fail@plt+0xa9c>
   11e50:	ldrb	r2, [r3, #4]
   11e54:	cmp	r2, #0
   11e58:	movne	r2, #2
   11e5c:	strne	r2, [r0, #8]
   11e60:	bne	11e88 <__assert_fail@plt+0xa74>
   11e64:	ldr	ip, [pc, #72]	; 11eb4 <__assert_fail@plt+0xaa0>
   11e68:	ldr	r1, [r3]
   11e6c:	ldr	r2, [ip]
   11e70:	ldrb	ip, [ip, #4]
   11e74:	cmp	ip, #0
   11e78:	movne	ip, #1
   11e7c:	moveq	ip, #2
   11e80:	cmp	r2, #0
   11e84:	bne	11ea0 <__assert_fail@plt+0xa8c>
   11e88:	mov	r2, #0
   11e8c:	str	r2, [r0, #28]
   11e90:	ldr	r2, [r3, #8]
   11e94:	sub	r2, r2, #1
   11e98:	str	r2, [r3, #8]
   11e9c:	bx	lr
   11ea0:	sub	r2, r2, #1
   11ea4:	add	r1, r1, #40	; 0x28
   11ea8:	str	ip, [r1, #-32]	; 0xffffffe0
   11eac:	b	11e80 <__assert_fail@plt+0xa6c>
   11eb0:	strdeq	ip, [r2], -r0
   11eb4:	andeq	ip, r2, r0, asr #2
   11eb8:	ldr	r3, [pc, #112]	; 11f30 <__assert_fail@plt+0xb1c>
   11ebc:	mov	ip, #0
   11ec0:	push	{r4, r5, r6, lr}
   11ec4:	mov	r5, ip
   11ec8:	ldr	r2, [pc, #100]	; 11f34 <__assert_fail@plt+0xb20>
   11ecc:	ldr	r4, [r3]
   11ed0:	ldr	r0, [r3, #8]
   11ed4:	ldr	lr, [r2]
   11ed8:	mov	r1, r4
   11edc:	cmp	lr, #0
   11ee0:	bne	11f10 <__assert_fail@plt+0xafc>
   11ee4:	ldrb	r2, [r2, #4]
   11ee8:	cmp	ip, #0
   11eec:	strne	r0, [r3, #8]
   11ef0:	cmp	r2, #0
   11ef4:	popeq	{r4, r5, r6, pc}
   11ef8:	ldr	r2, [r4, #8]
   11efc:	cmp	r2, #3
   11f00:	moveq	r2, #0
   11f04:	movne	r2, #1
   11f08:	str	r2, [r3, #8]
   11f0c:	pop	{r4, r5, r6, pc}
   11f10:	ldr	r6, [r1, #8]
   11f14:	sub	lr, lr, #1
   11f18:	add	r1, r1, #40	; 0x28
   11f1c:	cmp	r6, #2
   11f20:	addeq	r0, r0, #1
   11f24:	moveq	ip, #1
   11f28:	streq	r5, [r1, #-32]	; 0xffffffe0
   11f2c:	b	11edc <__assert_fail@plt+0xac8>
   11f30:	strdeq	ip, [r2], -r0
   11f34:	andeq	ip, r2, r0, asr #2
   11f38:	push	{r4, r5, r6, lr}
   11f3c:	mov	r5, r0
   11f40:	ldr	r4, [pc, #48]	; 11f78 <__assert_fail@plt+0xb64>
   11f44:	ldrd	r2, [r4, #12]
   11f48:	cmp	r2, r3
   11f4c:	bcc	11f60 <__assert_fail@plt+0xb4c>
   11f50:	add	r1, r4, #16
   11f54:	ldr	r0, [r4, #20]
   11f58:	bl	17c08 <__assert_fail@plt+0x67f4>
   11f5c:	str	r0, [r4, #20]
   11f60:	ldr	r3, [r4, #12]
   11f64:	ldr	r2, [r4, #20]
   11f68:	add	r1, r3, #1
   11f6c:	strb	r5, [r2, r3]
   11f70:	str	r1, [r4, #12]
   11f74:	pop	{r4, r5, r6, pc}
   11f78:	strdeq	ip, [r2], -r0
   11f7c:	push	{r4, r5, r6, r7, r8, lr}
   11f80:	mvn	r3, #0
   11f84:	sub	sp, sp, #32
   11f88:	mov	r5, r2
   11f8c:	mvn	r2, #0
   11f90:	mov	r6, r0
   11f94:	mov	r7, r1
   11f98:	ldr	r8, [pc, #220]	; 1207c <__assert_fail@plt+0xc68>
   11f9c:	add	r1, sp, #12
   11fa0:	mov	r0, r5
   11fa4:	str	r8, [sp]
   11fa8:	strd	r2, [sp, #24]
   11fac:	add	r3, sp, #16
   11fb0:	mov	r2, #10
   11fb4:	bl	188ac <__assert_fail@plt+0x7498>
   11fb8:	bics	r3, r0, #2
   11fbc:	beq	11fd4 <__assert_fail@plt+0xbc0>
   11fc0:	ldr	r3, [pc, #184]	; 12080 <__assert_fail@plt+0xc6c>
   11fc4:	mov	r2, r7
   11fc8:	mov	r1, r6
   11fcc:	str	r5, [sp]
   11fd0:	bl	18798 <__assert_fail@plt+0x7384>
   11fd4:	ldr	r0, [sp, #12]
   11fd8:	cmp	r0, r5
   11fdc:	bne	11fec <__assert_fail@plt+0xbd8>
   11fe0:	mov	r0, #0
   11fe4:	add	sp, sp, #32
   11fe8:	pop	{r4, r5, r6, r7, r8, pc}
   11fec:	ldrd	r2, [sp, #16]
   11ff0:	orrs	r3, r2, r3
   11ff4:	beq	11fe0 <__assert_fail@plt+0xbcc>
   11ff8:	ldrb	r3, [r0]
   11ffc:	cmp	r3, #58	; 0x3a
   12000:	beq	12034 <__assert_fail@plt+0xc20>
   12004:	ldr	r3, [sp, #12]
   12008:	ldrb	r3, [r3]
   1200c:	cmp	r3, #0
   12010:	bne	11fe0 <__assert_fail@plt+0xbcc>
   12014:	ldr	r3, [pc, #104]	; 12084 <__assert_fail@plt+0xc70>
   12018:	ldrd	r0, [sp, #16]
   1201c:	strd	r0, [r3, #24]
   12020:	ldr	r3, [pc, #96]	; 12088 <__assert_fail@plt+0xc74>
   12024:	ldrd	r0, [sp, #24]
   12028:	strd	r0, [r3, #8]
   1202c:	mov	r0, #1
   12030:	b	11fe4 <__assert_fail@plt+0xbd0>
   12034:	add	r4, r0, #1
   12038:	add	r3, sp, #24
   1203c:	str	r8, [sp]
   12040:	mov	r2, #10
   12044:	add	r1, sp, #12
   12048:	mov	r0, r4
   1204c:	bl	188ac <__assert_fail@plt+0x7498>
   12050:	cmp	r0, #0
   12054:	bne	11fc0 <__assert_fail@plt+0xbac>
   12058:	ldr	r3, [sp, #12]
   1205c:	cmp	r3, r4
   12060:	beq	11fe0 <__assert_fail@plt+0xbcc>
   12064:	ldrd	r2, [sp, #16]
   12068:	ldrd	r0, [sp, #24]
   1206c:	cmp	r1, r3
   12070:	cmpeq	r0, r2
   12074:	bcs	12004 <__assert_fail@plt+0xbf0>
   12078:	b	11fe0 <__assert_fail@plt+0xbcc>
   1207c:	andeq	r9, r1, sl, ror #10
   12080:	ldrdeq	r9, [r1], -ip
   12084:	strdeq	ip, [r2], -r0
   12088:	andeq	ip, r2, r0, asr #2
   1208c:	push	{r4, lr}
   12090:	sub	sp, sp, #24
   12094:	mov	r4, r2
   12098:	mov	r2, #0
   1209c:	str	r3, [sp, #12]
   120a0:	ldr	r3, [pc, #40]	; 120d0 <__assert_fail@plt+0xcbc>
   120a4:	str	r3, [sp, #8]
   120a8:	mov	r3, #0
   120ac:	str	r2, [sp, #16]
   120b0:	mvn	r2, #-2147483648	; 0x80000000
   120b4:	strd	r2, [sp]
   120b8:	asr	r3, r1, #31
   120bc:	mov	r2, r1
   120c0:	bl	17ed4 <__assert_fail@plt+0x6ac0>
   120c4:	str	r0, [r4]
   120c8:	add	sp, sp, #24
   120cc:	pop	{r4, pc}
   120d0:	andeq	r9, r1, sl, ror #10
   120d4:	push	{r4, lr}
   120d8:	mov	r2, #5
   120dc:	mov	r4, r0
   120e0:	mov	r0, #0
   120e4:	ldr	r1, [pc, #36]	; 12110 <__assert_fail@plt+0xcfc>
   120e8:	bl	1118c <dcgettext@plt>
   120ec:	mov	r3, r0
   120f0:	ldr	r2, [pc, #28]	; 12114 <__assert_fail@plt+0xd00>
   120f4:	mov	r1, #1
   120f8:	mov	r0, r4
   120fc:	bl	1208c <__assert_fail@plt+0xc78>
   12100:	ldr	r3, [pc, #16]	; 12118 <__assert_fail@plt+0xd04>
   12104:	mov	r2, #1
   12108:	strb	r2, [r3, #32]
   1210c:	pop	{r4, pc}
   12110:	strdeq	r9, [r1], -r9	; <UNPREDICTABLE>
   12114:	andeq	ip, r2, r0, asr #2
   12118:	strdeq	ip, [r2], -r0
   1211c:	push	{r4, r5, r6, r7, r8, r9, lr}
   12120:	mov	r5, r1
   12124:	sub	sp, sp, #196	; 0xc4
   12128:	mov	r8, r0
   1212c:	add	r6, sp, #12
   12130:	ldr	r1, [pc, #340]	; 1228c <__assert_fail@plt+0xe78>
   12134:	bl	110e4 <strcmp@plt>
   12138:	cmp	r0, #0
   1213c:	ldr	r4, [pc, #332]	; 12290 <__assert_fail@plt+0xe7c>
   12140:	beq	1222c <__assert_fail@plt+0xe18>
   12144:	cmp	r5, #0
   12148:	blt	12230 <__assert_fail@plt+0xe1c>
   1214c:	add	r1, sp, #88	; 0x58
   12150:	mov	r0, r5
   12154:	bl	192c0 <__assert_fail@plt+0x7eac>
   12158:	cmp	r0, #0
   1215c:	bne	12230 <__assert_fail@plt+0xe1c>
   12160:	ldr	r3, [sp, #168]	; 0xa8
   12164:	str	r3, [sp, #12]
   12168:	ldr	r3, [sp, #172]	; 0xac
   1216c:	str	r3, [sp, #16]
   12170:	add	r2, sp, #44	; 0x2c
   12174:	mov	r1, r6
   12178:	ldr	r0, [r4, #44]	; 0x2c
   1217c:	ldr	r7, [sp, #16]
   12180:	bl	17440 <__assert_fail@plt+0x602c>
   12184:	cmp	r0, #0
   12188:	beq	12254 <__assert_fail@plt+0xe40>
   1218c:	ldr	r3, [r4, #44]	; 0x2c
   12190:	mvn	r1, #0
   12194:	mov	r0, #0
   12198:	ldr	r2, [r4, #48]	; 0x30
   1219c:	stm	sp, {r3, r7}
   121a0:	add	r3, sp, #44	; 0x2c
   121a4:	bl	15aa4 <__assert_fail@plt+0x4690>
   121a8:	add	r9, r0, #1
   121ac:	mov	r0, r9
   121b0:	bl	17ad8 <__assert_fail@plt+0x66c4>
   121b4:	ldr	r3, [r4, #44]	; 0x2c
   121b8:	mov	r1, r9
   121bc:	mov	r6, r0
   121c0:	ldr	r2, [r4, #48]	; 0x30
   121c4:	stm	sp, {r3, r7}
   121c8:	add	r3, sp, #44	; 0x2c
   121cc:	bl	15aa4 <__assert_fail@plt+0x4690>
   121d0:	ldr	r0, [r4, #52]	; 0x34
   121d4:	bl	14304 <__assert_fail@plt+0x2ef0>
   121d8:	ldr	r3, [r4, #56]	; 0x38
   121dc:	str	r6, [r4, #52]	; 0x34
   121e0:	cmp	r3, #0
   121e4:	bne	121f4 <__assert_fail@plt+0xde0>
   121e8:	cmp	r5, #0
   121ec:	ldr	r3, [pc, #160]	; 12294 <__assert_fail@plt+0xe80>
   121f0:	movge	r3, r8
   121f4:	str	r3, [r4, #60]	; 0x3c
   121f8:	mov	r1, #0
   121fc:	mov	r0, r6
   12200:	ldr	r3, [pc, #144]	; 12298 <__assert_fail@plt+0xe84>
   12204:	ldr	r5, [r3, #16]
   12208:	bl	146d0 <__assert_fail@plt+0x32bc>
   1220c:	mov	r1, #0
   12210:	sub	r5, r5, r0
   12214:	ldr	r0, [r4, #60]	; 0x3c
   12218:	bl	146d0 <__assert_fail@plt+0x32bc>
   1221c:	sub	r0, r5, r0
   12220:	str	r0, [r4, #64]	; 0x40
   12224:	add	sp, sp, #196	; 0xc4
   12228:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1222c:	mvn	r5, #0
   12230:	ldr	r3, [r4, #36]	; 0x24
   12234:	ldr	r7, [pc, #96]	; 1229c <__assert_fail@plt+0xe88>
   12238:	cmp	r3, #0
   1223c:	bne	12248 <__assert_fail@plt+0xe34>
   12240:	mov	r0, r7
   12244:	bl	143ec <__assert_fail@plt+0x2fd8>
   12248:	ldm	r7, {r0, r1}
   1224c:	stm	r6, {r0, r1}
   12250:	b	12170 <__assert_fail@plt+0xd5c>
   12254:	mov	r0, #33	; 0x21
   12258:	bl	17ad8 <__assert_fail@plt+0x66c4>
   1225c:	mov	r6, r0
   12260:	ldr	r0, [sp, #12]
   12264:	add	r2, sp, #20
   12268:	asr	r1, r0, #31
   1226c:	bl	1447c <__assert_fail@plt+0x3068>
   12270:	ldr	r3, [pc, #40]	; 122a0 <__assert_fail@plt+0xe8c>
   12274:	mov	r2, #33	; 0x21
   12278:	mov	r1, #1
   1227c:	stm	sp, {r0, r7}
   12280:	mov	r0, r6
   12284:	bl	112f4 <__sprintf_chk@plt>
   12288:	b	121d0 <__assert_fail@plt+0xdbc>
   1228c:	andeq	sl, r1, sp, lsr #29
   12290:	strdeq	ip, [r2], -r0
   12294:	andeq	r9, r1, sl, ror #10
   12298:	andeq	ip, r2, r0, asr #2
   1229c:	andeq	ip, r2, r4, lsl r2
   122a0:	andeq	r9, r1, r3, lsl r5
   122a4:	ldr	r3, [pc, #104]	; 12314 <__assert_fail@plt+0xf00>
   122a8:	push	{r4, r5, r6, r7, r8, lr}
   122ac:	ldr	r8, [pc, #100]	; 12318 <__assert_fail@plt+0xf04>
   122b0:	mov	r7, r3
   122b4:	ldrd	r4, [r3, #68]	; 0x44
   122b8:	add	r5, r4, r5
   122bc:	sub	r3, r5, r4
   122c0:	cmp	r3, #1
   122c4:	ble	122dc <__assert_fail@plt+0xec8>
   122c8:	ldr	r3, [r8, #24]
   122cc:	sdiv	r6, r4, r3
   122d0:	mla	r6, r3, r6, r3
   122d4:	cmp	r5, r6
   122d8:	bge	122f8 <__assert_fail@plt+0xee4>
   122dc:	add	r4, r4, #1
   122e0:	cmp	r5, r4
   122e4:	bge	12308 <__assert_fail@plt+0xef4>
   122e8:	mov	r3, #0
   122ec:	str	r5, [r7, #68]	; 0x44
   122f0:	str	r3, [r7, #72]	; 0x48
   122f4:	pop	{r4, r5, r6, r7, r8, pc}
   122f8:	ldrb	r0, [r8, #20]
   122fc:	mov	r4, r6
   12300:	bl	11408 <putchar_unlocked@plt>
   12304:	b	122bc <__assert_fail@plt+0xea8>
   12308:	mov	r0, #32
   1230c:	bl	11408 <putchar_unlocked@plt>
   12310:	b	122dc <__assert_fail@plt+0xec8>
   12314:	strdeq	ip, [r2], -r0
   12318:	andeq	ip, r2, r0, asr #2
   1231c:	ldr	r3, [pc, #68]	; 12368 <__assert_fail@plt+0xf54>
   12320:	push	{r4, r5, r6, lr}
   12324:	mov	r4, r0
   12328:	ldrb	r2, [r3, #76]	; 0x4c
   1232c:	ldr	r5, [r3, #68]	; 0x44
   12330:	cmp	r2, #0
   12334:	beq	12360 <__assert_fail@plt+0xf4c>
   12338:	sub	r4, r0, r5
   1233c:	str	r4, [r3, #72]	; 0x48
   12340:	pop	{r4, r5, r6, pc}
   12344:	mov	r0, #32
   12348:	bl	11408 <putchar_unlocked@plt>
   1234c:	add	r5, r5, #1
   12350:	cmp	r4, r5
   12354:	bge	12344 <__assert_fail@plt+0xf30>
   12358:	str	r4, [r6, #68]	; 0x44
   1235c:	pop	{r4, r5, r6, pc}
   12360:	mov	r6, r3
   12364:	b	1234c <__assert_fail@plt+0xf38>
   12368:	strdeq	ip, [r2], -r0
   1236c:	push	{r4, r5, r6, r7, r8, r9, lr}
   12370:	mov	r6, #0
   12374:	sub	sp, sp, #316	; 0x13c
   12378:	ldr	r4, [pc, #204]	; 1244c <__assert_fail@plt+0x1038>
   1237c:	ldr	r0, [r4, #80]	; 0x50
   12380:	str	r6, [r4, #68]	; 0x44
   12384:	bl	1231c <__assert_fail@plt+0xf08>
   12388:	bl	122a4 <__assert_fail@plt+0xe90>
   1238c:	ldrd	r8, [r4, #88]	; 0x58
   12390:	mov	r2, #5
   12394:	orrs	r3, r8, r9
   12398:	bne	123b8 <__assert_fail@plt+0xfa4>
   1239c:	ldr	r1, [pc, #172]	; 12450 <__assert_fail@plt+0x103c>
   123a0:	mov	r0, r6
   123a4:	bl	1118c <dcgettext@plt>
   123a8:	mov	r2, r0
   123ac:	mov	r1, r6
   123b0:	mov	r0, #1
   123b4:	bl	11228 <error@plt>
   123b8:	ldr	r1, [pc, #148]	; 12454 <__assert_fail@plt+0x1040>
   123bc:	mov	r0, r6
   123c0:	add	r7, sp, #36	; 0x24
   123c4:	bl	1118c <dcgettext@plt>
   123c8:	mov	r3, r0
   123cc:	mov	r2, #276	; 0x114
   123d0:	strd	r8, [sp]
   123d4:	mov	r1, #1
   123d8:	mov	r0, r7
   123dc:	bl	112f4 <__sprintf_chk@plt>
   123e0:	ldr	r5, [r4, #64]	; 0x40
   123e4:	mov	r1, r6
   123e8:	mov	r0, r7
   123ec:	bl	146d0 <__assert_fail@plt+0x32bc>
   123f0:	ldr	r2, [pc, #96]	; 12458 <__assert_fail@plt+0x1044>
   123f4:	ldr	r1, [r4, #60]	; 0x3c
   123f8:	sub	r0, r5, r0
   123fc:	bic	r0, r0, r0, asr #31
   12400:	str	r2, [sp, #8]
   12404:	asr	r3, r0, #1
   12408:	str	r7, [sp, #24]
   1240c:	sub	r0, r0, r3
   12410:	str	r3, [sp, #4]
   12414:	ldr	r3, [r4, #52]	; 0x34
   12418:	str	r1, [sp, #12]
   1241c:	ldr	r1, [pc, #56]	; 1245c <__assert_fail@plt+0x1048>
   12420:	str	r3, [sp]
   12424:	ldr	r3, [pc, #52]	; 12460 <__assert_fail@plt+0x104c>
   12428:	str	r2, [sp, #20]
   1242c:	ldr	r2, [r4, #80]	; 0x50
   12430:	str	r0, [sp, #16]
   12434:	mov	r0, #1
   12438:	bl	11318 <__printf_chk@plt>
   1243c:	str	r6, [r4, #68]	; 0x44
   12440:	strb	r6, [r4, #96]	; 0x60
   12444:	add	sp, sp, #316	; 0x13c
   12448:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1244c:	strdeq	ip, [r2], -r0
   12450:	andeq	r9, r1, fp, lsl r5
   12454:	andeq	r9, r1, r0, lsr r5
   12458:	andeq	r9, r1, pc, asr #10
   1245c:	andeq	r9, r1, sl, lsr r5
   12460:	andeq	r9, r1, sl, ror #10
   12464:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12468:	ldr	r3, [pc, #344]	; 125c8 <__assert_fail@plt+0x11b4>
   1246c:	ldr	r6, [pc, #344]	; 125cc <__assert_fail@plt+0x11b8>
   12470:	ldrb	r2, [r3, #28]
   12474:	ldr	r4, [r6, #100]	; 0x64
   12478:	cmp	r2, r0
   1247c:	ldreq	r3, [r3, #32]
   12480:	beq	12490 <__assert_fail@plt+0x107c>
   12484:	cmp	r0, #9
   12488:	bne	124f8 <__assert_fail@plt+0x10e4>
   1248c:	mov	r3, #8
   12490:	ldr	r1, [r6, #104]	; 0x68
   12494:	sdiv	r2, r1, r3
   12498:	mls	r2, r3, r2, r1
   1249c:	sub	r3, r3, r2
   124a0:	ldrb	r2, [r6, #108]	; 0x6c
   124a4:	cmp	r2, #0
   124a8:	addne	r2, r4, r3
   124ac:	movne	r1, #32
   124b0:	bne	124c4 <__assert_fail@plt+0x10b0>
   124b4:	mov	r2, #1
   124b8:	strb	r0, [r4]
   124bc:	b	124d0 <__assert_fail@plt+0x10bc>
   124c0:	strb	r1, [r4], #1
   124c4:	cmp	r4, r2
   124c8:	bne	124c0 <__assert_fail@plt+0x10ac>
   124cc:	mov	r2, r3
   124d0:	cmp	r3, #0
   124d4:	bge	125a4 <__assert_fail@plt+0x1190>
   124d8:	ldr	r0, [r6, #104]	; 0x68
   124dc:	cmp	r0, #0
   124e0:	beq	125b4 <__assert_fail@plt+0x11a0>
   124e4:	rsb	r1, r3, #0
   124e8:	cmp	r0, r1
   124ec:	movle	r3, #0
   124f0:	ble	125ac <__assert_fail@plt+0x1198>
   124f4:	b	125a4 <__assert_fail@plt+0x1190>
   124f8:	mov	r5, r0
   124fc:	bl	112a0 <__ctype_b_loc@plt>
   12500:	ldr	r2, [r0]
   12504:	lsl	r3, r5, #1
   12508:	ldrh	r3, [r2, r3]
   1250c:	tst	r3, #16384	; 0x4000
   12510:	bne	125bc <__assert_fail@plt+0x11a8>
   12514:	ldrb	r3, [r6, #109]	; 0x6d
   12518:	cmp	r3, #0
   1251c:	beq	12560 <__assert_fail@plt+0x114c>
   12520:	mov	r3, #92	; 0x5c
   12524:	mov	r2, #4
   12528:	mov	r1, #1
   1252c:	add	r0, sp, #12
   12530:	strb	r3, [r4]
   12534:	ldr	r3, [pc, #148]	; 125d0 <__assert_fail@plt+0x11bc>
   12538:	str	r5, [sp]
   1253c:	bl	112f4 <__sprintf_chk@plt>
   12540:	ldrb	r3, [sp, #12]
   12544:	strb	r3, [r4, #1]
   12548:	ldrb	r3, [sp, #13]
   1254c:	strb	r3, [r4, #2]
   12550:	ldrb	r3, [sp, #14]
   12554:	strb	r3, [r4, #3]
   12558:	mov	r3, #4
   1255c:	b	12588 <__assert_fail@plt+0x1174>
   12560:	ldrb	r3, [r6, #110]	; 0x6e
   12564:	cmp	r3, #0
   12568:	beq	12590 <__assert_fail@plt+0x117c>
   1256c:	tst	r5, #128	; 0x80
   12570:	bne	12520 <__assert_fail@plt+0x110c>
   12574:	mov	r3, #94	; 0x5e
   12578:	eor	r5, r5, #64	; 0x40
   1257c:	strb	r3, [r4]
   12580:	mov	r3, #2
   12584:	strb	r5, [r4, #1]
   12588:	mov	r2, r3
   1258c:	b	125a4 <__assert_fail@plt+0x1190>
   12590:	cmp	r5, #8
   12594:	mov	r2, #1
   12598:	strb	r5, [r4]
   1259c:	mvneq	r3, #0
   125a0:	beq	124d8 <__assert_fail@plt+0x10c4>
   125a4:	ldr	r1, [r6, #104]	; 0x68
   125a8:	add	r3, r1, r3
   125ac:	mov	r0, r2
   125b0:	str	r3, [r6, #104]	; 0x68
   125b4:	add	sp, sp, #16
   125b8:	pop	{r4, r5, r6, pc}
   125bc:	mov	r3, #1
   125c0:	strb	r5, [r4]
   125c4:	b	12588 <__assert_fail@plt+0x1174>
   125c8:	andeq	ip, r2, r0, asr #2
   125cc:	strdeq	ip, [r2], -r0
   125d0:	andeq	r9, r1, r1, asr r5
   125d4:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   125d8:	mvn	r2, #0
   125dc:	mov	r7, r0
   125e0:	mov	r1, #1
   125e4:	ldr	r4, [pc, #248]	; 126e4 <__assert_fail@plt+0x12d0>
   125e8:	ldr	r6, [pc, #248]	; 126e8 <__assert_fail@plt+0x12d4>
   125ec:	ldr	r0, [r4, #112]	; 0x70
   125f0:	ldr	r3, [r4, #116]	; 0x74
   125f4:	str	r3, [sp, #4]
   125f8:	ldr	r3, [r6, #36]	; 0x24
   125fc:	str	r3, [sp]
   12600:	ldr	r3, [pc, #228]	; 126ec <__assert_fail@plt+0x12d8>
   12604:	bl	112f4 <__sprintf_chk@plt>
   12608:	ldr	r5, [r4, #112]	; 0x70
   1260c:	ldr	r3, [r4, #116]	; 0x74
   12610:	add	r3, r3, #1
   12614:	str	r3, [r4, #116]	; 0x74
   12618:	ldr	r3, [r6, #36]	; 0x24
   1261c:	sub	r0, r0, r3
   12620:	add	r5, r5, r0
   12624:	add	r8, r5, r3
   12628:	sub	r3, r8, r5
   1262c:	cmp	r3, #0
   12630:	bgt	12664 <__assert_fail@plt+0x1250>
   12634:	ldr	r3, [r6]
   12638:	ldrb	r0, [r6, #40]	; 0x28
   1263c:	cmp	r3, #1
   12640:	ble	126b8 <__assert_fail@plt+0x12a4>
   12644:	cmp	r0, #9
   12648:	ldreq	r5, [r4, #120]	; 0x78
   1264c:	ldreq	r3, [r6, #36]	; 0x24
   12650:	subeq	r5, r5, r3
   12654:	beq	12684 <__assert_fail@plt+0x1270>
   12658:	ldr	r3, [r7]
   1265c:	blx	r3
   12660:	b	1268c <__assert_fail@plt+0x1278>
   12664:	ldrb	r0, [r5], #1
   12668:	ldr	r3, [r7]
   1266c:	blx	r3
   12670:	b	12628 <__assert_fail@plt+0x1214>
   12674:	mov	r0, #32
   12678:	ldr	r3, [r7]
   1267c:	sub	r5, r5, #1
   12680:	blx	r3
   12684:	cmp	r5, #0
   12688:	bgt	12674 <__assert_fail@plt+0x1260>
   1268c:	ldrb	r3, [r4, #124]	; 0x7c
   12690:	cmp	r3, #0
   12694:	beq	126b0 <__assert_fail@plt+0x129c>
   12698:	ldrb	r3, [r4, #4]
   1269c:	cmp	r3, #0
   126a0:	ldreq	r3, [r4, #104]	; 0x68
   126a4:	ldreq	r2, [r4, #120]	; 0x78
   126a8:	addeq	r3, r3, r2
   126ac:	streq	r3, [r4, #104]	; 0x68
   126b0:	add	sp, sp, #8
   126b4:	pop	{r4, r5, r6, r7, r8, pc}
   126b8:	ldr	r3, [r7]
   126bc:	blx	r3
   126c0:	ldrb	r3, [r6, #40]	; 0x28
   126c4:	cmp	r3, #9
   126c8:	bne	1268c <__assert_fail@plt+0x1278>
   126cc:	ldr	r3, [r6, #24]
   126d0:	ldr	r2, [r4, #68]	; 0x44
   126d4:	sdiv	r2, r2, r3
   126d8:	mla	r3, r3, r2, r3
   126dc:	str	r3, [r4, #68]	; 0x44
   126e0:	b	1268c <__assert_fail@plt+0x1278>
   126e4:	strdeq	ip, [r2], -r0
   126e8:	andeq	ip, r2, r0, asr #2
   126ec:	andeq	r9, r1, r6, asr r5
   126f0:	push	{r4, r5, r6, lr}
   126f4:	mov	r4, r1
   126f8:	mov	r6, r0
   126fc:	ldr	r1, [pc, #200]	; 127cc <__assert_fail@plt+0x13b8>
   12700:	bl	110e4 <strcmp@plt>
   12704:	cmp	r0, #0
   12708:	ldr	r5, [pc, #192]	; 127d0 <__assert_fail@plt+0x13bc>
   1270c:	bne	1278c <__assert_fail@plt+0x1378>
   12710:	mov	r2, #5
   12714:	ldr	r1, [pc, #184]	; 127d4 <__assert_fail@plt+0x13c0>
   12718:	bl	1118c <dcgettext@plt>
   1271c:	ldr	r3, [pc, #180]	; 127d8 <__assert_fail@plt+0x13c4>
   12720:	str	r0, [r4, #4]
   12724:	ldr	r3, [r3]
   12728:	str	r3, [r4]
   1272c:	mov	r3, #1
   12730:	strb	r3, [r5, #125]	; 0x7d
   12734:	ldr	r0, [r4]
   12738:	cmp	r0, #0
   1273c:	bne	127a4 <__assert_fail@plt+0x1390>
   12740:	ldrb	r4, [r5, #127]	; 0x7f
   12744:	mov	r3, #1
   12748:	strb	r3, [r5, #126]	; 0x7e
   1274c:	cmp	r4, #0
   12750:	movne	r4, r0
   12754:	bne	12784 <__assert_fail@plt+0x1370>
   12758:	bl	112e8 <__errno_location@plt>
   1275c:	ldr	r5, [r0]
   12760:	mov	r2, r6
   12764:	mov	r1, #3
   12768:	mov	r0, r4
   1276c:	bl	16fa8 <__assert_fail@plt+0x5b94>
   12770:	mov	r3, r0
   12774:	ldr	r2, [pc, #96]	; 127dc <__assert_fail@plt+0x13c8>
   12778:	mov	r0, r4
   1277c:	mov	r1, r5
   12780:	bl	11228 <error@plt>
   12784:	mov	r0, r4
   12788:	pop	{r4, r5, r6, pc}
   1278c:	ldr	r1, [pc, #76]	; 127e0 <__assert_fail@plt+0x13cc>
   12790:	mov	r0, r6
   12794:	str	r6, [r4, #4]
   12798:	bl	14270 <__assert_fail@plt+0x2e5c>
   1279c:	str	r0, [r4]
   127a0:	b	12734 <__assert_fail@plt+0x1320>
   127a4:	mov	r1, #2
   127a8:	bl	14148 <__assert_fail@plt+0x2d34>
   127ac:	mov	r3, #0
   127b0:	str	r3, [r4, #8]
   127b4:	strb	r3, [r4, #37]	; 0x25
   127b8:	mov	r4, #1
   127bc:	ldr	r3, [r5, #128]	; 0x80
   127c0:	add	r3, r3, #1
   127c4:	str	r3, [r5, #128]	; 0x80
   127c8:	b	12784 <__assert_fail@plt+0x1370>
   127cc:	andeq	sl, r1, sp, lsr #29
   127d0:	strdeq	ip, [r2], -r0
   127d4:	andeq	r9, r1, sl, asr r5
   127d8:	andeq	ip, r2, r0, ror #3
   127dc:	andeq	sl, r1, r4, lsl sl
   127e0:	andeq	sl, r1, pc, ror #14
   127e4:	ldr	r3, [r0, #8]
   127e8:	cmp	r3, #3
   127ec:	bxeq	lr
   127f0:	push	{r4, r5, r6, lr}
   127f4:	mov	r4, r0
   127f8:	bl	112e8 <__errno_location@plt>
   127fc:	mov	r6, r0
   12800:	ldr	r0, [r4]
   12804:	ldr	r5, [r6]
   12808:	bl	11210 <ferror_unlocked@plt>
   1280c:	cmp	r0, #0
   12810:	ldr	r0, [r4]
   12814:	moveq	r5, #0
   12818:	bl	11324 <fileno@plt>
   1281c:	cmp	r0, #0
   12820:	ldr	r0, [r4]
   12824:	bne	12858 <__assert_fail@plt+0x1444>
   12828:	bl	113a8 <clearerr_unlocked@plt>
   1282c:	cmp	r5, #0
   12830:	beq	12874 <__assert_fail@plt+0x1460>
   12834:	mov	r1, #3
   12838:	mov	r0, #0
   1283c:	ldr	r2, [r4, #4]
   12840:	bl	16fa8 <__assert_fail@plt+0x5b94>
   12844:	mov	r3, r0
   12848:	ldr	r2, [pc, #132]	; 128d4 <__assert_fail@plt+0x14c0>
   1284c:	mov	r1, r5
   12850:	mov	r0, #1
   12854:	bl	11228 <error@plt>
   12858:	bl	14178 <__assert_fail@plt+0x2d64>
   1285c:	cmp	r0, #0
   12860:	beq	1282c <__assert_fail@plt+0x1418>
   12864:	cmp	r5, #0
   12868:	bne	12834 <__assert_fail@plt+0x1420>
   1286c:	ldr	r5, [r6]
   12870:	b	1282c <__assert_fail@plt+0x1418>
   12874:	ldr	r3, [pc, #92]	; 128d8 <__assert_fail@plt+0x14c4>
   12878:	ldrb	r2, [r3, #4]
   1287c:	cmp	r2, #0
   12880:	movne	r2, #3
   12884:	strne	r5, [r4, #28]
   12888:	strne	r2, [r4, #8]
   1288c:	bne	128a8 <__assert_fail@plt+0x1494>
   12890:	ldr	r1, [pc, #68]	; 128dc <__assert_fail@plt+0x14c8>
   12894:	mov	ip, #3
   12898:	ldr	r2, [r3]
   1289c:	ldr	r1, [r1]
   128a0:	cmp	r1, #0
   128a4:	bne	128b8 <__assert_fail@plt+0x14a4>
   128a8:	ldr	r2, [r3, #8]
   128ac:	sub	r2, r2, #1
   128b0:	str	r2, [r3, #8]
   128b4:	pop	{r4, r5, r6, pc}
   128b8:	ldr	r0, [r2, #24]
   128bc:	sub	r1, r1, #1
   128c0:	add	r2, r2, #40	; 0x28
   128c4:	str	ip, [r2, #-32]	; 0xffffffe0
   128c8:	cmp	r0, #0
   128cc:	streq	r0, [r2, #-12]
   128d0:	b	128a0 <__assert_fail@plt+0x148c>
   128d4:	andeq	sl, r1, r4, lsl sl
   128d8:	strdeq	ip, [r2], -r0
   128dc:	andeq	ip, r2, r0, asr #2
   128e0:	push	{r4, r5, r6, r7, r8, lr}
   128e4:	mov	r5, r0
   128e8:	mov	r8, r1
   128ec:	ldr	r6, [r0]
   128f0:	mov	r0, r6
   128f4:	bl	11180 <getc_unlocked@plt>
   128f8:	cmp	r0, #12
   128fc:	bne	12928 <__assert_fail@plt+0x1514>
   12900:	ldrb	r3, [r5, #37]	; 0x25
   12904:	cmp	r3, #0
   12908:	moveq	r7, #1
   1290c:	beq	1293c <__assert_fail@plt+0x1528>
   12910:	mov	r0, r6
   12914:	bl	11180 <getc_unlocked@plt>
   12918:	cmp	r0, #10
   1291c:	bne	12928 <__assert_fail@plt+0x1514>
   12920:	mov	r0, r6
   12924:	bl	11180 <getc_unlocked@plt>
   12928:	sub	r7, r0, #12
   1292c:	mov	r3, #0
   12930:	clz	r7, r7
   12934:	lsr	r7, r7, #5
   12938:	strb	r3, [r5, #37]	; 0x25
   1293c:	ldr	r4, [pc, #220]	; 12a20 <__assert_fail@plt+0x160c>
   12940:	ldrb	r3, [r4, #132]	; 0x84
   12944:	cmp	r3, #0
   12948:	movne	r3, #1
   1294c:	strbne	r3, [r5, #37]	; 0x25
   12950:	cmp	r0, #10
   12954:	beq	129b4 <__assert_fail@plt+0x15a0>
   12958:	cmp	r0, #12
   1295c:	bne	12a00 <__assert_fail@plt+0x15ec>
   12960:	ldrb	r3, [r4, #132]	; 0x84
   12964:	cmp	r3, #0
   12968:	beq	12994 <__assert_fail@plt+0x1580>
   1296c:	ldrb	r3, [r4, #4]
   12970:	cmp	r3, #0
   12974:	movne	r3, #0
   12978:	strbne	r3, [r5, #37]	; 0x25
   1297c:	bne	12994 <__assert_fail@plt+0x1580>
   12980:	ldr	r2, [pc, #156]	; 12a24 <__assert_fail@plt+0x1610>
   12984:	ldr	r1, [r4]
   12988:	ldr	r2, [r2]
   1298c:	cmp	r2, #0
   12990:	bne	129f0 <__assert_fail@plt+0x15dc>
   12994:	mov	r0, r6
   12998:	bl	11180 <getc_unlocked@plt>
   1299c:	cmp	r0, #10
   129a0:	beq	129ac <__assert_fail@plt+0x1598>
   129a4:	mov	r1, r6
   129a8:	bl	112dc <ungetc@plt>
   129ac:	mov	r0, r5
   129b0:	bl	11e4c <__assert_fail@plt+0xa38>
   129b4:	ldr	r3, [pc, #104]	; 12a24 <__assert_fail@plt+0x1610>
   129b8:	ldrb	r2, [r3, #41]	; 0x29
   129bc:	cmp	r2, #0
   129c0:	popeq	{r4, r5, r6, r7, r8, pc}
   129c4:	ldrb	r1, [r4, #4]
   129c8:	eor	r1, r1, #1
   129cc:	cmp	r8, #1
   129d0:	orreq	r1, r1, #1
   129d4:	cmp	r1, #0
   129d8:	popeq	{r4, r5, r6, r7, r8, pc}
   129dc:	cmp	r7, #0
   129e0:	ldreq	r2, [r3, #44]	; 0x2c
   129e4:	addeq	r2, r2, #1
   129e8:	streq	r2, [r3, #44]	; 0x2c
   129ec:	pop	{r4, r5, r6, r7, r8, pc}
   129f0:	sub	r2, r2, #1
   129f4:	add	r1, r1, #40	; 0x28
   129f8:	strb	r3, [r1, #-3]
   129fc:	b	1298c <__assert_fail@plt+0x1578>
   12a00:	cmn	r0, #1
   12a04:	bne	12a14 <__assert_fail@plt+0x1600>
   12a08:	mov	r0, r5
   12a0c:	bl	127e4 <__assert_fail@plt+0x13d0>
   12a10:	b	129b4 <__assert_fail@plt+0x15a0>
   12a14:	mov	r0, r6
   12a18:	bl	11180 <getc_unlocked@plt>
   12a1c:	b	12950 <__assert_fail@plt+0x153c>
   12a20:	strdeq	ip, [r2], -r0
   12a24:	andeq	ip, r2, r0, asr #2
   12a28:	push	{r4, r5, r6, lr}
   12a2c:	mov	r5, r0
   12a30:	ldr	r4, [r0]
   12a34:	mov	r0, r4
   12a38:	bl	11180 <getc_unlocked@plt>
   12a3c:	cmp	r0, #10
   12a40:	popeq	{r4, r5, r6, pc}
   12a44:	cmp	r0, #12
   12a48:	bne	12a84 <__assert_fail@plt+0x1670>
   12a4c:	mov	r0, r4
   12a50:	bl	11180 <getc_unlocked@plt>
   12a54:	cmp	r0, #10
   12a58:	beq	12a64 <__assert_fail@plt+0x1650>
   12a5c:	mov	r1, r4
   12a60:	bl	112dc <ungetc@plt>
   12a64:	ldr	r3, [pc, #44]	; 12a98 <__assert_fail@plt+0x1684>
   12a68:	mov	r0, r5
   12a6c:	pop	{r4, r5, r6, lr}
   12a70:	ldrb	r2, [r3, #133]	; 0x85
   12a74:	cmp	r2, #0
   12a78:	movne	r2, #1
   12a7c:	strbne	r2, [r3, #134]	; 0x86
   12a80:	b	11e4c <__assert_fail@plt+0xa38>
   12a84:	cmn	r0, #1
   12a88:	bne	12a34 <__assert_fail@plt+0x1620>
   12a8c:	mov	r0, r5
   12a90:	pop	{r4, r5, r6, lr}
   12a94:	b	127e4 <__assert_fail@plt+0x13d0>
   12a98:	strdeq	ip, [r2], -r0
   12a9c:	ldr	r3, [pc, #160]	; 12b44 <__assert_fail@plt+0x1730>
   12aa0:	ldr	r2, [r3, #136]	; 0x88
   12aa4:	cmp	r2, #0
   12aa8:	ble	12af0 <__assert_fail@plt+0x16dc>
   12aac:	push	{r4, r5, r6, r7, r8, lr}
   12ab0:	mov	r4, r3
   12ab4:	ldr	r3, [pc, #140]	; 12b48 <__assert_fail@plt+0x1734>
   12ab8:	ldr	r6, [r4, #140]	; 0x8c
   12abc:	ldr	r5, [r3, #48]	; 0x30
   12ac0:	cmp	r6, #0
   12ac4:	ldr	r3, [r4, #72]	; 0x48
   12ac8:	bgt	12b00 <__assert_fail@plt+0x16ec>
   12acc:	cmp	r3, #0
   12ad0:	ble	12ad8 <__assert_fail@plt+0x16c4>
   12ad4:	bl	122a4 <__assert_fail@plt+0xe90>
   12ad8:	ldr	r3, [r4, #136]	; 0x88
   12adc:	sub	r3, r3, #1
   12ae0:	cmp	r3, #0
   12ae4:	str	r3, [r4, #136]	; 0x88
   12ae8:	bgt	12b3c <__assert_fail@plt+0x1728>
   12aec:	pop	{r4, r5, r6, r7, r8, pc}
   12af0:	ldr	r3, [r3, #72]	; 0x48
   12af4:	cmp	r3, #0
   12af8:	bxle	lr
   12afc:	b	122a4 <__assert_fail@plt+0xe90>
   12b00:	mov	r7, r5
   12b04:	ldrb	r2, [r7], #1
   12b08:	cmp	r2, #32
   12b0c:	addeq	r3, r3, #1
   12b10:	streq	r3, [r4, #72]	; 0x48
   12b14:	beq	12b38 <__assert_fail@plt+0x1724>
   12b18:	cmp	r3, #0
   12b1c:	ble	12b24 <__assert_fail@plt+0x1710>
   12b20:	bl	122a4 <__assert_fail@plt+0xe90>
   12b24:	ldrb	r0, [r5]
   12b28:	bl	11408 <putchar_unlocked@plt>
   12b2c:	ldr	r3, [r4, #68]	; 0x44
   12b30:	add	r3, r3, #1
   12b34:	str	r3, [r4, #68]	; 0x44
   12b38:	mov	r5, r7
   12b3c:	sub	r6, r6, #1
   12b40:	b	12ac0 <__assert_fail@plt+0x16ac>
   12b44:	strdeq	ip, [r2], -r0
   12b48:	andeq	ip, r2, r0, asr #2
   12b4c:	ldr	r3, [pc, #84]	; 12ba8 <__assert_fail@plt+0x1794>
   12b50:	push	{r4, r5, r6, lr}
   12b54:	mov	r5, r0
   12b58:	ldr	r2, [r0, #32]
   12b5c:	mov	r4, r3
   12b60:	ldr	r0, [r3, #140]	; 0x8c
   12b64:	str	r2, [r3, #144]	; 0x90
   12b68:	cmp	r2, r0
   12b6c:	ble	12b80 <__assert_fail@plt+0x176c>
   12b70:	sub	r0, r2, r0
   12b74:	bl	1231c <__assert_fail@plt+0xf08>
   12b78:	mov	r3, #0
   12b7c:	str	r3, [r4, #144]	; 0x90
   12b80:	ldrb	r3, [r4, #148]	; 0x94
   12b84:	cmp	r3, #0
   12b88:	beq	12b90 <__assert_fail@plt+0x177c>
   12b8c:	bl	12a9c <__assert_fail@plt+0x1688>
   12b90:	ldrb	r3, [r5, #36]	; 0x24
   12b94:	cmp	r3, #0
   12b98:	popeq	{r4, r5, r6, pc}
   12b9c:	add	r0, r5, #16
   12ba0:	pop	{r4, r5, r6, lr}
   12ba4:	b	125d4 <__assert_fail@plt+0x11c0>
   12ba8:	strdeq	ip, [r2], -r0
   12bac:	ldr	r2, [pc, #124]	; 12c30 <__assert_fail@plt+0x181c>
   12bb0:	push	{r4, r5, r6, lr}
   12bb4:	mov	r4, r0
   12bb8:	ldrb	r3, [r2, #76]	; 0x4c
   12bbc:	cmp	r3, #0
   12bc0:	beq	12c14 <__assert_fail@plt+0x1800>
   12bc4:	cmp	r0, #32
   12bc8:	ldr	r3, [r2, #72]	; 0x48
   12bcc:	bne	12bdc <__assert_fail@plt+0x17c8>
   12bd0:	add	r3, r3, #1
   12bd4:	str	r3, [r2, #72]	; 0x48
   12bd8:	pop	{r4, r5, r6, pc}
   12bdc:	cmp	r3, #0
   12be0:	mov	r5, r2
   12be4:	ble	12bec <__assert_fail@plt+0x17d8>
   12be8:	bl	122a4 <__assert_fail@plt+0xe90>
   12bec:	bl	112a0 <__ctype_b_loc@plt>
   12bf0:	ldr	r2, [r0]
   12bf4:	lsl	r3, r4, #1
   12bf8:	ldrh	r3, [r2, r3]
   12bfc:	tst	r3, #16384	; 0x4000
   12c00:	bne	12c20 <__assert_fail@plt+0x180c>
   12c04:	cmp	r4, #8
   12c08:	ldreq	r3, [r5, #68]	; 0x44
   12c0c:	subeq	r3, r3, #1
   12c10:	beq	12c28 <__assert_fail@plt+0x1814>
   12c14:	mov	r0, r4
   12c18:	pop	{r4, r5, r6, lr}
   12c1c:	b	11408 <putchar_unlocked@plt>
   12c20:	ldr	r3, [r5, #68]	; 0x44
   12c24:	add	r3, r3, #1
   12c28:	str	r3, [r5, #68]	; 0x44
   12c2c:	b	12c14 <__assert_fail@plt+0x1800>
   12c30:	strdeq	ip, [r2], -r0
   12c34:	push	{r4, r5, r6, r7, r8, lr}
   12c38:	mov	r7, r0
   12c3c:	ldr	r6, [r0, #20]
   12c40:	ldr	r4, [pc, #272]	; 12d58 <__assert_fail@plt+0x1944>
   12c44:	add	r3, r6, #1
   12c48:	str	r3, [r0, #20]
   12c4c:	ldr	r8, [r4, #20]
   12c50:	ldr	r3, [r4, #152]	; 0x98
   12c54:	ldr	r5, [r3, r6, lsl #2]
   12c58:	add	r3, r3, r6, lsl #2
   12c5c:	ldr	r3, [r3, #4]
   12c60:	add	r5, r8, r5
   12c64:	add	r8, r8, r3
   12c68:	mov	r3, #1
   12c6c:	strb	r3, [r4, #156]	; 0x9c
   12c70:	ldrb	r3, [r4, #96]	; 0x60
   12c74:	cmp	r3, #0
   12c78:	beq	12c80 <__assert_fail@plt+0x186c>
   12c7c:	bl	1236c <__assert_fail@plt+0xf58>
   12c80:	ldr	r3, [r7, #8]
   12c84:	cmp	r3, #1
   12c88:	bne	12cd8 <__assert_fail@plt+0x18c4>
   12c8c:	ldr	r2, [pc, #200]	; 12d5c <__assert_fail@plt+0x1948>
   12c90:	mov	lr, #2
   12c94:	ldr	r0, [r4]
   12c98:	ldr	ip, [r2]
   12c9c:	mov	r1, r0
   12ca0:	cmp	ip, r3
   12ca4:	bge	12cc8 <__assert_fail@plt+0x18b4>
   12ca8:	ldr	r3, [r0, #28]
   12cac:	cmp	r3, #0
   12cb0:	bgt	12cd8 <__assert_fail@plt+0x18c4>
   12cb4:	ldrb	r3, [r2, #52]	; 0x34
   12cb8:	cmp	r3, #0
   12cbc:	strbeq	r3, [r4, #156]	; 0x9c
   12cc0:	mov	r0, #1
   12cc4:	pop	{r4, r5, r6, r7, r8, pc}
   12cc8:	add	r3, r3, #1
   12ccc:	add	r1, r1, #40	; 0x28
   12cd0:	str	lr, [r1, #-32]	; 0xffffffe0
   12cd4:	b	12ca0 <__assert_fail@plt+0x188c>
   12cd8:	ldr	r3, [r4, #140]	; 0x8c
   12cdc:	ldr	r0, [r4, #144]	; 0x90
   12ce0:	cmp	r3, r0
   12ce4:	bge	12cf8 <__assert_fail@plt+0x18e4>
   12ce8:	sub	r0, r0, r3
   12cec:	bl	1231c <__assert_fail@plt+0xf08>
   12cf0:	mov	r3, #0
   12cf4:	str	r3, [r4, #144]	; 0x90
   12cf8:	ldrb	r3, [r4, #148]	; 0x94
   12cfc:	cmp	r3, #0
   12d00:	beq	12d08 <__assert_fail@plt+0x18f4>
   12d04:	bl	12a9c <__assert_fail@plt+0x1688>
   12d08:	cmp	r5, r8
   12d0c:	bne	12d4c <__assert_fail@plt+0x1938>
   12d10:	ldr	r3, [r4, #72]	; 0x48
   12d14:	cmp	r3, #0
   12d18:	bne	12cc0 <__assert_fail@plt+0x18ac>
   12d1c:	ldr	r2, [r7, #32]
   12d20:	ldr	r3, [r4, #160]	; 0xa0
   12d24:	ldr	r0, [r4, #80]	; 0x50
   12d28:	ldr	r1, [r4, #140]	; 0x8c
   12d2c:	ldr	r3, [r3, r6, lsl #2]
   12d30:	add	r3, r2, r3
   12d34:	sub	r2, r2, r1
   12d38:	cmp	r2, r0
   12d3c:	str	r3, [r4, #68]	; 0x44
   12d40:	subeq	r3, r3, r1
   12d44:	streq	r3, [r4, #68]	; 0x44
   12d48:	b	12cc0 <__assert_fail@plt+0x18ac>
   12d4c:	ldrb	r0, [r5], #1
   12d50:	bl	12bac <__assert_fail@plt+0x1798>
   12d54:	b	12d08 <__assert_fail@plt+0x18f4>
   12d58:	strdeq	ip, [r2], -r0
   12d5c:	andeq	ip, r2, r0, asr #2
   12d60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d64:	mov	r5, r0
   12d68:	ldr	r4, [pc, #688]	; 13020 <__assert_fail@plt+0x1c0c>
   12d6c:	ldr	r0, [r0]
   12d70:	bl	11180 <getc_unlocked@plt>
   12d74:	cmp	r0, #12
   12d78:	mov	r6, r0
   12d7c:	ldr	r8, [r4, #104]	; 0x68
   12d80:	bne	12db0 <__assert_fail@plt+0x199c>
   12d84:	ldrb	r3, [r5, #37]	; 0x25
   12d88:	cmp	r3, #0
   12d8c:	beq	12ddc <__assert_fail@plt+0x19c8>
   12d90:	ldr	r0, [r5]
   12d94:	bl	11180 <getc_unlocked@plt>
   12d98:	cmp	r0, #10
   12d9c:	mov	r6, r0
   12da0:	bne	12db0 <__assert_fail@plt+0x199c>
   12da4:	ldr	r0, [r5]
   12da8:	bl	11180 <getc_unlocked@plt>
   12dac:	mov	r6, r0
   12db0:	mov	r3, #0
   12db4:	cmp	r6, #10
   12db8:	strb	r3, [r5, #37]	; 0x25
   12dbc:	beq	12e3c <__assert_fail@plt+0x1a28>
   12dc0:	cmp	r6, #12
   12dc4:	beq	12ddc <__assert_fail@plt+0x19c8>
   12dc8:	cmn	r6, #1
   12dcc:	bne	12e30 <__assert_fail@plt+0x1a1c>
   12dd0:	mov	r0, r5
   12dd4:	bl	127e4 <__assert_fail@plt+0x13d0>
   12dd8:	b	12e28 <__assert_fail@plt+0x1a14>
   12ddc:	ldr	r0, [r5]
   12de0:	bl	11180 <getc_unlocked@plt>
   12de4:	cmp	r0, #10
   12de8:	beq	12df4 <__assert_fail@plt+0x19e0>
   12dec:	ldr	r1, [r5]
   12df0:	bl	112dc <ungetc@plt>
   12df4:	ldrb	r2, [r4, #96]	; 0x60
   12df8:	mov	r3, #1
   12dfc:	strb	r3, [r4, #164]	; 0xa4
   12e00:	cmp	r2, #0
   12e04:	beq	12fec <__assert_fail@plt+0x1bd8>
   12e08:	ldr	r2, [pc, #532]	; 13024 <__assert_fail@plt+0x1c10>
   12e0c:	ldrb	r2, [r2, #4]
   12e10:	cmp	r2, #0
   12e14:	bne	12fec <__assert_fail@plt+0x1bd8>
   12e18:	strb	r3, [r4, #156]	; 0x9c
   12e1c:	bl	1236c <__assert_fail@plt+0xf58>
   12e20:	mov	r0, r5
   12e24:	bl	11e4c <__assert_fail@plt+0xa38>
   12e28:	mov	r0, #1
   12e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e30:	uxtb	r0, r6
   12e34:	bl	12464 <__assert_fail@plt+0x1050>
   12e38:	mov	r7, r0
   12e3c:	ldrb	r3, [r4, #124]	; 0x7c
   12e40:	cmp	r3, #0
   12e44:	beq	12e5c <__assert_fail@plt+0x1a48>
   12e48:	ldr	r2, [r4, #104]	; 0x68
   12e4c:	ldr	r3, [r4, #168]	; 0xa8
   12e50:	cmp	r2, r3
   12e54:	strgt	r8, [r4, #104]	; 0x68
   12e58:	bgt	12f9c <__assert_fail@plt+0x1b88>
   12e5c:	ldr	r3, [pc, #452]	; 13028 <__assert_fail@plt+0x1c14>
   12e60:	ldr	r2, [r5, #16]
   12e64:	cmp	r2, r3
   12e68:	beq	12f1c <__assert_fail@plt+0x1b08>
   12e6c:	mov	r3, #1
   12e70:	strb	r3, [r4, #156]	; 0x9c
   12e74:	ldrb	r3, [r4, #96]	; 0x60
   12e78:	cmp	r3, #0
   12e7c:	beq	12e94 <__assert_fail@plt+0x1a80>
   12e80:	ldr	r3, [pc, #412]	; 13024 <__assert_fail@plt+0x1c10>
   12e84:	ldrb	r3, [r3, #4]
   12e88:	cmp	r3, #0
   12e8c:	bne	12e94 <__assert_fail@plt+0x1a80>
   12e90:	bl	1236c <__assert_fail@plt+0xf58>
   12e94:	ldrb	r3, [r4, #4]
   12e98:	cmp	r3, #0
   12e9c:	beq	12eec <__assert_fail@plt+0x1ad8>
   12ea0:	ldrb	r3, [r4, #172]	; 0xac
   12ea4:	cmp	r3, #0
   12ea8:	beq	12eec <__assert_fail@plt+0x1ad8>
   12eac:	ldr	r9, [r4]
   12eb0:	mov	r3, #0
   12eb4:	mov	r8, #1
   12eb8:	ldr	sl, [r4, #136]	; 0x88
   12ebc:	str	r3, [r4, #136]	; 0x88
   12ec0:	cmp	r8, sl
   12ec4:	ble	12fa4 <__assert_fail@plt+0x1b90>
   12ec8:	ldr	r3, [r5, #32]
   12ecc:	str	r3, [r4, #144]	; 0x90
   12ed0:	ldrb	r3, [r4, #124]	; 0x7c
   12ed4:	cmp	r3, #0
   12ed8:	mov	r3, #0
   12edc:	ldrne	r2, [r4, #168]	; 0xa8
   12ee0:	moveq	r2, r3
   12ee4:	str	r2, [r4, #72]	; 0x48
   12ee8:	strb	r3, [r4, #172]	; 0xac
   12eec:	ldr	r3, [r4, #140]	; 0x8c
   12ef0:	ldr	r0, [r4, #144]	; 0x90
   12ef4:	cmp	r3, r0
   12ef8:	bge	12f0c <__assert_fail@plt+0x1af8>
   12efc:	sub	r0, r0, r3
   12f00:	bl	1231c <__assert_fail@plt+0xf08>
   12f04:	mov	r3, #0
   12f08:	str	r3, [r4, #144]	; 0x90
   12f0c:	ldrb	r3, [r4, #148]	; 0x94
   12f10:	cmp	r3, #0
   12f14:	beq	12f1c <__assert_fail@plt+0x1b08>
   12f18:	bl	12a9c <__assert_fail@plt+0x1688>
   12f1c:	ldrb	r3, [r5, #36]	; 0x24
   12f20:	cmp	r3, #0
   12f24:	beq	12f30 <__assert_fail@plt+0x1b1c>
   12f28:	add	r0, r5, #16
   12f2c:	bl	125d4 <__assert_fail@plt+0x11c0>
   12f30:	cmp	r6, #10
   12f34:	mov	r3, #0
   12f38:	ldrne	r6, [r4, #100]	; 0x64
   12f3c:	strb	r3, [r4, #173]	; 0xad
   12f40:	addne	r7, r6, r7
   12f44:	beq	12e28 <__assert_fail@plt+0x1a14>
   12f48:	cmp	r7, r6
   12f4c:	bne	12fc4 <__assert_fail@plt+0x1bb0>
   12f50:	ldr	r0, [r5]
   12f54:	bl	11180 <getc_unlocked@plt>
   12f58:	cmp	r0, #10
   12f5c:	beq	12e28 <__assert_fail@plt+0x1a14>
   12f60:	cmp	r0, #12
   12f64:	beq	12fd4 <__assert_fail@plt+0x1bc0>
   12f68:	cmn	r0, #1
   12f6c:	beq	12dd0 <__assert_fail@plt+0x19bc>
   12f70:	uxtb	r0, r0
   12f74:	ldr	r6, [r4, #104]	; 0x68
   12f78:	bl	12464 <__assert_fail@plt+0x1050>
   12f7c:	ldrb	r3, [r4, #124]	; 0x7c
   12f80:	cmp	r3, #0
   12f84:	beq	13000 <__assert_fail@plt+0x1bec>
   12f88:	ldr	r2, [r4, #104]	; 0x68
   12f8c:	ldr	r3, [r4, #168]	; 0xa8
   12f90:	cmp	r2, r3
   12f94:	ble	13000 <__assert_fail@plt+0x1bec>
   12f98:	str	r6, [r4, #104]	; 0x68
   12f9c:	mov	r0, #0
   12fa0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12fa4:	mov	r0, r9
   12fa8:	add	r8, r8, #1
   12fac:	bl	12b4c <__assert_fail@plt+0x1738>
   12fb0:	ldr	r3, [r4, #136]	; 0x88
   12fb4:	add	r9, r9, #40	; 0x28
   12fb8:	add	r3, r3, #1
   12fbc:	str	r3, [r4, #136]	; 0x88
   12fc0:	b	12ec0 <__assert_fail@plt+0x1aac>
   12fc4:	ldrb	r0, [r6], #1
   12fc8:	ldr	r3, [r5, #16]
   12fcc:	blx	r3
   12fd0:	b	12f48 <__assert_fail@plt+0x1b34>
   12fd4:	ldr	r0, [r5]
   12fd8:	bl	11180 <getc_unlocked@plt>
   12fdc:	cmp	r0, #10
   12fe0:	beq	12fec <__assert_fail@plt+0x1bd8>
   12fe4:	ldr	r1, [r5]
   12fe8:	bl	112dc <ungetc@plt>
   12fec:	ldrb	r3, [r4, #133]	; 0x85
   12ff0:	cmp	r3, #0
   12ff4:	movne	r3, #1
   12ff8:	strbne	r3, [r4, #134]	; 0x86
   12ffc:	b	12e20 <__assert_fail@plt+0x1a0c>
   13000:	ldr	r6, [r4, #100]	; 0x64
   13004:	add	r7, r6, r0
   13008:	cmp	r7, r6
   1300c:	beq	12f50 <__assert_fail@plt+0x1b3c>
   13010:	ldrb	r0, [r6], #1
   13014:	ldr	r3, [r5, #16]
   13018:	blx	r3
   1301c:	b	13008 <__assert_fail@plt+0x1bf4>
   13020:	strdeq	ip, [r2], -r0
   13024:	andeq	ip, r2, r0, asr #2
   13028:	andeq	r1, r1, r8, lsr pc
   1302c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13030:	mov	r8, r0
   13034:	sub	sp, sp, #44	; 0x2c
   13038:	mov	r7, r1
   1303c:	ldr	r5, [pc, #2900]	; 13b98 <__assert_fail@plt+0x2784>
   13040:	ldr	r4, [pc, #2900]	; 13b9c <__assert_fail@plt+0x2788>
   13044:	ldr	r3, [r5, #56]	; 0x38
   13048:	sub	r2, r3, #10
   1304c:	cmp	r2, #0
   13050:	str	r2, [r4, #176]	; 0xb0
   13054:	bgt	13070 <__assert_fail@plt+0x1c5c>
   13058:	mov	r2, #0
   1305c:	strb	r2, [r5, #52]	; 0x34
   13060:	mov	r2, #1
   13064:	strb	r2, [r4, #133]	; 0x85
   13068:	str	r3, [r4, #176]	; 0xb0
   1306c:	b	1307c <__assert_fail@plt+0x1c68>
   13070:	ldrb	r2, [r5, #52]	; 0x34
   13074:	cmp	r2, #0
   13078:	beq	13068 <__assert_fail@plt+0x1c54>
   1307c:	ldrb	r3, [r4, #180]	; 0xb4
   13080:	cmp	r3, #0
   13084:	ldrne	r3, [r4, #176]	; 0xb0
   13088:	addne	r3, r3, r3, lsr #31
   1308c:	asrne	r3, r3, #1
   13090:	strne	r3, [r4, #176]	; 0xb0
   13094:	cmp	r8, #0
   13098:	strbeq	r8, [r4, #4]
   1309c:	beq	130ac <__assert_fail@plt+0x1c98>
   130a0:	ldrb	r3, [r4, #4]
   130a4:	cmp	r3, #0
   130a8:	strne	r8, [r5]
   130ac:	ldrb	r3, [r5, #4]
   130b0:	ldr	r0, [r5]
   130b4:	cmp	r3, #0
   130b8:	movne	r3, #1
   130bc:	strbne	r3, [r4, #181]	; 0xb5
   130c0:	cmp	r0, #1
   130c4:	movle	r2, #0
   130c8:	ldrb	r3, [r4, #182]	; 0xb6
   130cc:	strble	r2, [r5, #4]
   130d0:	ble	13134 <__assert_fail@plt+0x1d20>
   130d4:	ldrb	r2, [r4, #148]	; 0x94
   130d8:	cmp	r2, #0
   130dc:	bne	132bc <__assert_fail@plt+0x1ea8>
   130e0:	ldr	r1, [pc, #2744]	; 13ba0 <__assert_fail@plt+0x278c>
   130e4:	cmp	r3, #0
   130e8:	ldr	r2, [pc, #2740]	; 13ba4 <__assert_fail@plt+0x2790>
   130ec:	movne	r2, r1
   130f0:	str	r2, [r5, #48]	; 0x30
   130f4:	mov	r2, #1
   130f8:	str	r2, [r4, #140]	; 0x8c
   130fc:	strb	r2, [r4, #148]	; 0x94
   13100:	mov	r2, #1
   13104:	strb	r2, [r4, #124]	; 0x7c
   13108:	ldr	r2, [r4, #140]	; 0x8c
   1310c:	cmp	r2, #1
   13110:	bne	13124 <__assert_fail@plt+0x1d10>
   13114:	ldr	r2, [r5, #48]	; 0x30
   13118:	ldrb	r2, [r2]
   1311c:	cmp	r2, #9
   13120:	beq	1312c <__assert_fail@plt+0x1d18>
   13124:	mov	r2, #1
   13128:	strb	r2, [r4, #108]	; 0x6c
   1312c:	mov	r2, #1
   13130:	strb	r2, [r4, #76]	; 0x4c
   13134:	ldrb	r1, [r4, #183]	; 0xb7
   13138:	cmp	r3, #0
   1313c:	movne	r3, #0
   13140:	strbne	r3, [r4, #124]	; 0x7c
   13144:	cmp	r1, #0
   13148:	beq	13190 <__assert_fail@plt+0x1d7c>
   1314c:	ldr	r3, [r5, #60]	; 0x3c
   13150:	ldrb	r2, [r5, #40]	; 0x28
   13154:	str	r3, [r5, #44]	; 0x2c
   13158:	ldr	r3, [r5, #36]	; 0x24
   1315c:	cmp	r2, #9
   13160:	addne	lr, r3, #1
   13164:	bne	13180 <__assert_fail@plt+0x1d6c>
   13168:	rsbs	r2, r3, #0
   1316c:	and	lr, r3, #7
   13170:	and	r2, r2, #7
   13174:	rsbpl	lr, r2, #0
   13178:	rsb	lr, lr, #8
   1317c:	add	lr, lr, r3
   13180:	ldrb	r3, [r4, #4]
   13184:	str	lr, [r4, #120]	; 0x78
   13188:	cmp	r3, #0
   1318c:	bne	13194 <__assert_fail@plt+0x1d80>
   13190:	mov	lr, #0
   13194:	ldr	r3, [r4, #140]	; 0x8c
   13198:	sub	r2, r0, #1
   1319c:	smull	r2, r3, r2, r3
   131a0:	cmp	r3, r2, asr #31
   131a4:	moveq	ip, r2
   131a8:	ldr	r2, [r5, #16]
   131ac:	mvnne	ip, #-2147483648	; 0x80000000
   131b0:	sub	r3, r2, lr
   131b4:	subs	r3, r3, ip
   131b8:	movvs	r3, #0
   131bc:	sdiv	r3, r3, r0
   131c0:	cmp	r3, #0
   131c4:	str	r3, [r4, #168]	; 0xa8
   131c8:	movle	r2, #5
   131cc:	ldrle	r1, [pc, #2516]	; 13ba8 <__assert_fail@plt+0x2794>
   131d0:	ble	13450 <__assert_fail@plt+0x203c>
   131d4:	cmp	r1, #0
   131d8:	beq	131fc <__assert_fail@plt+0x1de8>
   131dc:	ldr	r0, [r4, #112]	; 0x70
   131e0:	bl	14304 <__assert_fail@plt+0x2ef0>
   131e4:	ldr	r0, [r5, #36]	; 0x24
   131e8:	cmp	r0, #11
   131ec:	movcc	r0, #11
   131f0:	add	r0, r0, #1
   131f4:	bl	17ad8 <__assert_fail@plt+0x66c4>
   131f8:	str	r0, [r4, #112]	; 0x70
   131fc:	ldr	r0, [r4, #100]	; 0x64
   13200:	bl	14304 <__assert_fail@plt+0x2ef0>
   13204:	ldr	r0, [r5, #32]
   13208:	cmp	r0, #8
   1320c:	movlt	r0, #8
   13210:	bl	17ad8 <__assert_fail@plt+0x66c4>
   13214:	mov	r3, #0
   13218:	str	r0, [r4, #100]	; 0x64
   1321c:	ldr	r0, [r4]
   13220:	str	r3, [r4, #128]	; 0x80
   13224:	bl	14304 <__assert_fail@plt+0x2ef0>
   13228:	mov	r1, #40	; 0x28
   1322c:	ldr	r0, [r5]
   13230:	bl	17b98 <__assert_fail@plt+0x6784>
   13234:	ldrb	r9, [r4, #4]
   13238:	mov	r6, r0
   1323c:	str	r0, [r4]
   13240:	cmp	r9, #0
   13244:	subne	r7, r7, #4
   13248:	bne	1330c <__assert_fail@plt+0x1ef8>
   1324c:	cmp	r8, #0
   13250:	ble	13404 <__assert_fail@plt+0x1ff0>
   13254:	mov	r1, r0
   13258:	ldr	r0, [r7]
   1325c:	bl	126f0 <__assert_fail@plt+0x12dc>
   13260:	cmp	r0, #0
   13264:	beq	13b90 <__assert_fail@plt+0x277c>
   13268:	ldr	r7, [r7]
   1326c:	ldr	r0, [r6]
   13270:	bl	11324 <fileno@plt>
   13274:	mov	r1, r0
   13278:	mov	r0, r7
   1327c:	bl	1211c <__assert_fail@plt+0xd08>
   13280:	ldr	r3, [r5]
   13284:	mov	r2, #0
   13288:	str	r9, [r6, #24]
   1328c:	ldr	r1, [r6, #4]
   13290:	ldr	r0, [r6], #40	; 0x28
   13294:	sub	r3, r3, #1
   13298:	cmp	r3, #0
   1329c:	add	r6, r6, #40	; 0x28
   132a0:	beq	1332c <__assert_fail@plt+0x1f18>
   132a4:	sub	r3, r3, #1
   132a8:	strd	r0, [r6, #-40]	; 0xffffffd8
   132ac:	str	r2, [r6, #-32]	; 0xffffffe0
   132b0:	str	r2, [r6, #-16]
   132b4:	strb	r2, [r6, #-3]
   132b8:	b	13298 <__assert_fail@plt+0x1e84>
   132bc:	cmp	r3, #0
   132c0:	bne	13100 <__assert_fail@plt+0x1cec>
   132c4:	ldr	r2, [r4, #140]	; 0x8c
   132c8:	cmp	r2, #1
   132cc:	bne	13100 <__assert_fail@plt+0x1cec>
   132d0:	ldr	r2, [r5, #48]	; 0x30
   132d4:	ldrb	r2, [r2]
   132d8:	cmp	r2, #9
   132dc:	ldreq	r2, [pc, #2240]	; 13ba4 <__assert_fail@plt+0x2790>
   132e0:	streq	r2, [r5, #48]	; 0x30
   132e4:	b	13100 <__assert_fail@plt+0x1cec>
   132e8:	mov	r1, r6
   132ec:	ldr	r0, [r7, #4]!
   132f0:	bl	126f0 <__assert_fail@plt+0x12dc>
   132f4:	cmp	r0, #0
   132f8:	ldreq	r3, [r5]
   132fc:	subeq	r6, r6, #40	; 0x28
   13300:	add	r6, r6, #40	; 0x28
   13304:	subeq	r3, r3, #1
   13308:	streq	r3, [r5]
   1330c:	subs	r8, r8, #1
   13310:	bcs	132e8 <__assert_fail@plt+0x1ed4>
   13314:	ldr	r3, [r5]
   13318:	cmp	r3, #0
   1331c:	beq	13b90 <__assert_fail@plt+0x277c>
   13320:	mov	r1, r8
   13324:	ldr	r0, [pc, #2176]	; 13bac <__assert_fail@plt+0x2798>
   13328:	bl	1211c <__assert_fail@plt+0xd08>
   1332c:	ldr	r3, [r4, #128]	; 0x80
   13330:	str	r3, [r4, #8]
   13334:	ldrb	r3, [r5, #4]
   13338:	cmp	r3, #0
   1333c:	beq	133d0 <__assert_fail@plt+0x1fbc>
   13340:	ldr	r3, [r5]
   13344:	ldr	r8, [r4, #176]	; 0xb0
   13348:	smull	r8, r9, r8, r3
   1334c:	cmp	r9, r8, asr #31
   13350:	bne	13448 <__assert_fail@plt+0x2034>
   13354:	mov	r3, #1
   13358:	adds	sl, r8, r3
   1335c:	bvs	13448 <__assert_fail@plt+0x2034>
   13360:	ldr	r6, [r4, #168]	; 0xa8
   13364:	adds	r6, r6, r3
   13368:	bvs	13448 <__assert_fail@plt+0x2034>
   1336c:	smull	r6, r7, r8, r6
   13370:	cmp	r7, r6, asr #31
   13374:	bne	13448 <__assert_fail@plt+0x2034>
   13378:	ldr	r0, [r4, #152]	; 0x98
   1337c:	bl	14304 <__assert_fail@plt+0x2ef0>
   13380:	mov	r1, #4
   13384:	mov	r0, sl
   13388:	bl	17b98 <__assert_fail@plt+0x6784>
   1338c:	str	r0, [r4, #152]	; 0x98
   13390:	ldr	r0, [r4, #160]	; 0xa0
   13394:	bl	14304 <__assert_fail@plt+0x2ef0>
   13398:	mov	r1, #4
   1339c:	mov	r0, r8
   133a0:	bl	17b98 <__assert_fail@plt+0x6784>
   133a4:	str	r0, [r4, #160]	; 0xa0
   133a8:	ldr	r0, [r4, #20]
   133ac:	bl	14304 <__assert_fail@plt+0x2ef0>
   133b0:	ldrb	r1, [r4, #148]	; 0x94
   133b4:	mov	r0, r6
   133b8:	add	r1, r1, #1
   133bc:	bl	17b98 <__assert_fail@plt+0x6784>
   133c0:	ldrb	r3, [r4, #148]	; 0x94
   133c4:	str	r0, [r4, #20]
   133c8:	mla	r6, r3, r6, r6
   133cc:	str	r6, [r4, #16]
   133d0:	ldrd	r2, [r4, #24]
   133d4:	cmp	r3, #0
   133d8:	strd	r2, [sp, #16]
   133dc:	mov	r3, #0
   133e0:	cmpeq	r2, #1
   133e4:	mov	r2, #1
   133e8:	strdls	r2, [r4, #88]	; 0x58
   133ec:	bls	13528 <__assert_fail@plt+0x2114>
   133f0:	mov	r6, r2
   133f4:	mov	r7, r3
   133f8:	mov	sl, #1
   133fc:	mov	fp, #2
   13400:	b	137dc <__assert_fail@plt+0x23c8>
   13404:	ldr	r1, [pc, #1956]	; 13bb0 <__assert_fail@plt+0x279c>
   13408:	mov	r2, #5
   1340c:	mov	r0, r9
   13410:	bl	1118c <dcgettext@plt>
   13414:	ldr	r3, [pc, #1944]	; 13bb4 <__assert_fail@plt+0x27a0>
   13418:	mvn	r1, #0
   1341c:	stmib	r6, {r0, r9}
   13420:	ldr	r0, [pc, #1924]	; 13bac <__assert_fail@plt+0x2798>
   13424:	strb	r9, [r6, #37]	; 0x25
   13428:	ldr	r3, [r3]
   1342c:	str	r3, [r6]
   13430:	mov	r3, #1
   13434:	strb	r3, [r4, #125]	; 0x7d
   13438:	ldr	r3, [r4, #128]	; 0x80
   1343c:	add	r3, r3, #1
   13440:	str	r3, [r4, #128]	; 0x80
   13444:	b	1327c <__assert_fail@plt+0x1e68>
   13448:	ldr	r1, [pc, #1896]	; 13bb8 <__assert_fail@plt+0x27a4>
   1344c:	mov	r2, #5
   13450:	mov	r0, #0
   13454:	bl	1118c <dcgettext@plt>
   13458:	mov	r2, r0
   1345c:	mov	r1, #0
   13460:	mov	r0, #1
   13464:	bl	11228 <error@plt>
   13468:	ldr	r2, [r8, #8]
   1346c:	cmp	r2, #0
   13470:	bne	13488 <__assert_fail@plt+0x2074>
   13474:	mov	r1, r9
   13478:	mov	r0, r8
   1347c:	str	r3, [sp, #36]	; 0x24
   13480:	bl	128e0 <__assert_fail@plt+0x14cc>
   13484:	ldr	r3, [sp, #36]	; 0x24
   13488:	add	r9, r9, #1
   1348c:	add	r8, r8, #40	; 0x28
   13490:	ldr	r2, [r5]
   13494:	cmp	r9, r2
   13498:	ble	13468 <__assert_fail@plt+0x2054>
   1349c:	add	r3, r3, #1
   134a0:	ldr	r8, [r4]
   134a4:	ldr	r2, [r4, #176]	; 0xb0
   134a8:	cmp	r3, r2
   134ac:	blt	13770 <__assert_fail@plt+0x235c>
   134b0:	mov	r9, #1
   134b4:	strb	sl, [r4, #132]	; 0x84
   134b8:	ldr	r1, [r5]
   134bc:	cmp	r9, r1
   134c0:	ble	13778 <__assert_fail@plt+0x2364>
   134c4:	ldrb	r3, [r5, #4]
   134c8:	cmp	r3, #0
   134cc:	bne	1379c <__assert_fail@plt+0x2388>
   134d0:	bl	11eb8 <__assert_fail@plt+0xaa4>
   134d4:	ldr	r3, [r4, #8]
   134d8:	mov	r8, #0
   134dc:	strb	r8, [r4, #132]	; 0x84
   134e0:	cmp	r3, r8
   134e4:	bgt	137c4 <__assert_fail@plt+0x23b0>
   134e8:	mov	r2, #5
   134ec:	ldr	r1, [pc, #1736]	; 13bbc <__assert_fail@plt+0x27a8>
   134f0:	mov	r0, r8
   134f4:	bl	1118c <dcgettext@plt>
   134f8:	ldrd	r2, [sp, #16]
   134fc:	mov	r1, r8
   13500:	strd	r2, [sp]
   13504:	mov	r2, r0
   13508:	mov	r0, r8
   1350c:	strd	r6, [sp, #8]
   13510:	bl	11228 <error@plt>
   13514:	ldr	r3, [r4, #8]
   13518:	cmp	r3, #0
   1351c:	ble	13b90 <__assert_fail@plt+0x277c>
   13520:	ldrd	r2, [r4, #24]
   13524:	strd	r2, [r4, #88]	; 0x58
   13528:	ldrb	r0, [r4, #124]	; 0x7c
   1352c:	ldrb	ip, [r4, #4]
   13530:	ldrb	r6, [r4, #183]	; 0xb7
   13534:	cmp	r0, #0
   13538:	moveq	r1, r0
   1353c:	ldr	r2, [r4, #80]	; 0x50
   13540:	ldr	r9, [r4, #168]	; 0xa8
   13544:	beq	13560 <__assert_fail@plt+0x214c>
   13548:	cmp	ip, #0
   1354c:	add	r1, r2, r9
   13550:	beq	13560 <__assert_fail@plt+0x214c>
   13554:	cmp	r6, #0
   13558:	ldrne	r3, [r4, #120]	; 0x78
   1355c:	addne	r1, r1, r3
   13560:	ldrb	lr, [r5, #4]
   13564:	eor	ip, ip, #1
   13568:	ldr	r8, [r4, #140]	; 0x8c
   1356c:	ldr	sl, [pc, #1612]	; 13bc0 <__assert_fail@plt+0x27ac>
   13570:	str	lr, [sp, #16]
   13574:	ldr	fp, [pc, #1608]	; 13bc4 <__assert_fail@plt+0x27b0>
   13578:	add	r2, r2, r8
   1357c:	str	ip, [sp, #36]	; 0x24
   13580:	mov	ip, #1
   13584:	ldr	r3, [r4]
   13588:	ldr	r7, [r5]
   1358c:	cmp	ip, r7
   13590:	blt	137e4 <__assert_fail@plt+0x23d0>
   13594:	ldrb	r1, [r5, #4]
   13598:	cmp	r1, #0
   1359c:	beq	13848 <__assert_fail@plt+0x2434>
   135a0:	ldrb	r1, [r4, #181]	; 0xb5
   135a4:	cmp	r1, #0
   135a8:	beq	13848 <__assert_fail@plt+0x2434>
   135ac:	ldr	r1, [pc, #1548]	; 13bc0 <__assert_fail@plt+0x27ac>
   135b0:	str	r1, [r3, #16]
   135b4:	ldr	r1, [pc, #1544]	; 13bc4 <__assert_fail@plt+0x27b0>
   135b8:	str	r1, [r3, #12]
   135bc:	ldrb	r1, [r4, #183]	; 0xb7
   135c0:	cmp	r1, #0
   135c4:	moveq	r7, r1
   135c8:	beq	135e0 <__assert_fail@plt+0x21cc>
   135cc:	ldrb	r1, [r4, #4]
   135d0:	eor	r1, r1, #1
   135d4:	cmp	r7, #1
   135d8:	movgt	r7, r1
   135dc:	orrle	r7, r1, #1
   135e0:	and	r7, r7, #1
   135e4:	str	r2, [r3, #32]
   135e8:	strb	r7, [r3, #36]	; 0x24
   135ec:	ldr	r7, [pc, #1448]	; 13b9c <__assert_fail@plt+0x2788>
   135f0:	ldr	r3, [r5, #44]	; 0x2c
   135f4:	str	r3, [r4, #116]	; 0x74
   135f8:	ldrb	r3, [r5, #4]
   135fc:	ldr	r6, [r4]
   13600:	ldr	r9, [r5]
   13604:	cmp	r3, #0
   13608:	ldreq	r3, [r4, #176]	; 0xb0
   1360c:	beq	13984 <__assert_fail@plt+0x2570>
   13610:	mov	r3, #0
   13614:	mov	r2, r6
   13618:	mov	r1, #0
   1361c:	str	r3, [r4, #12]
   13620:	ldrb	r3, [r4, #181]	; 0xb5
   13624:	cmp	r3, #0
   13628:	mov	r3, #1
   1362c:	subeq	r9, r9, #1
   13630:	cmp	r3, r9
   13634:	ble	13858 <__assert_fail@plt+0x2444>
   13638:	mov	sl, #0
   1363c:	mov	fp, #1
   13640:	mov	r8, sl
   13644:	cmp	r9, fp
   13648:	blt	13658 <__assert_fail@plt+0x2244>
   1364c:	ldr	r3, [r4, #8]
   13650:	cmp	r3, #0
   13654:	bne	13868 <__assert_fail@plt+0x2454>
   13658:	ldrb	r0, [r4, #181]	; 0xb5
   1365c:	ldr	ip, [r4]
   13660:	ldr	r3, [r4, #152]	; 0x98
   13664:	cmp	r0, #0
   13668:	str	sl, [r3, r8, lsl #2]
   1366c:	bne	13914 <__assert_fail@plt+0x2500>
   13670:	ldr	r3, [r5]
   13674:	mov	r2, ip
   13678:	sub	r3, r3, #1
   1367c:	mov	r1, r3
   13680:	cmp	r1, #0
   13684:	bne	13954 <__assert_fail@plt+0x2540>
   13688:	mov	r2, #40	; 0x28
   1368c:	cmp	r0, #0
   13690:	mla	ip, r2, r3, ip
   13694:	ldrne	r3, [ip, #24]
   13698:	bne	136b0 <__assert_fail@plt+0x229c>
   1369c:	ldr	r3, [ip, #8]
   136a0:	cmp	r3, #0
   136a4:	strne	r0, [ip, #28]
   136a8:	bne	136b4 <__assert_fail@plt+0x22a0>
   136ac:	ldr	r3, [r7, #176]	; 0xb0
   136b0:	str	r3, [ip, #28]
   136b4:	bl	11dd8 <__assert_fail@plt+0x9c4>
   136b8:	cmp	r0, #0
   136bc:	beq	13b90 <__assert_fail@plt+0x277c>
   136c0:	ldrb	r3, [r5, #52]	; 0x34
   136c4:	mov	sl, #0
   136c8:	mov	r8, sl
   136cc:	ldr	r6, [r4, #176]	; 0xb0
   136d0:	cmp	r3, #0
   136d4:	movne	r3, #1
   136d8:	strbne	r3, [r4, #96]	; 0x60
   136dc:	mov	r3, #0
   136e0:	strb	r3, [r4, #156]	; 0x9c
   136e4:	ldrb	r3, [r4, #180]	; 0xb4
   136e8:	cmp	r3, #0
   136ec:	lslne	r6, r6, #1
   136f0:	cmp	r6, #0
   136f4:	ble	13b14 <__assert_fail@plt+0x2700>
   136f8:	bl	11dd8 <__assert_fail@plt+0x9c4>
   136fc:	cmp	r0, #0
   13700:	bne	13990 <__assert_fail@plt+0x257c>
   13704:	cmp	sl, #0
   13708:	strb	sl, [r4, #156]	; 0x9c
   1370c:	beq	13b64 <__assert_fail@plt+0x2750>
   13710:	ldrb	r3, [r5, #52]	; 0x34
   13714:	cmp	r3, #0
   13718:	beq	13b64 <__assert_fail@plt+0x2750>
   1371c:	ldrb	r3, [r4, #184]	; 0xb8
   13720:	cmp	r3, #0
   13724:	addeq	r6, r6, #5
   13728:	beq	13b58 <__assert_fail@plt+0x2744>
   1372c:	mov	r0, #12
   13730:	bl	11408 <putchar_unlocked@plt>
   13734:	ldr	r3, [r4, #88]	; 0x58
   13738:	ldr	r2, [r4, #92]	; 0x5c
   1373c:	adds	r3, r3, #1
   13740:	str	r3, [sp, #24]
   13744:	adc	r3, r2, #0
   13748:	str	r3, [sp, #28]
   1374c:	ldrd	r2, [sp, #24]
   13750:	ldrd	r0, [sp, #24]
   13754:	strd	r2, [r4, #88]	; 0x58
   13758:	ldrd	r2, [r5, #8]
   1375c:	cmp	r1, r3
   13760:	cmpeq	r0, r2
   13764:	bhi	13b90 <__assert_fail@plt+0x277c>
   13768:	bl	11eb8 <__assert_fail@plt+0xaa4>
   1376c:	b	135f8 <__assert_fail@plt+0x21e4>
   13770:	mov	r9, #1
   13774:	b	13490 <__assert_fail@plt+0x207c>
   13778:	ldr	r3, [r8, #8]
   1377c:	cmp	r3, #0
   13780:	bne	13790 <__assert_fail@plt+0x237c>
   13784:	mov	r1, r9
   13788:	mov	r0, r8
   1378c:	bl	128e0 <__assert_fail@plt+0x14cc>
   13790:	add	r9, r9, #1
   13794:	add	r8, r8, #40	; 0x28
   13798:	b	134b8 <__assert_fail@plt+0x20a4>
   1379c:	ldr	r3, [r4]
   137a0:	mov	r2, #1
   137a4:	cmp	r1, r2
   137a8:	blt	134d0 <__assert_fail@plt+0x20bc>
   137ac:	ldr	r0, [r3, #8]
   137b0:	add	r2, r2, #1
   137b4:	add	r3, r3, #40	; 0x28
   137b8:	cmp	r0, #3
   137bc:	strne	fp, [r3, #-32]	; 0xffffffe0
   137c0:	b	137a4 <__assert_fail@plt+0x2390>
   137c4:	ldrd	r2, [sp, #16]
   137c8:	adds	r6, r6, #1
   137cc:	adc	r7, r7, #0
   137d0:	cmp	r3, r7
   137d4:	cmpeq	r2, r6
   137d8:	beq	13520 <__assert_fail@plt+0x210c>
   137dc:	mov	r3, #1
   137e0:	b	134a0 <__assert_fail@plt+0x208c>
   137e4:	ldr	lr, [sp, #16]
   137e8:	cmp	lr, #0
   137ec:	ldreq	lr, [pc, #980]	; 13bc8 <__assert_fail@plt+0x27b4>
   137f0:	strne	fp, [r3, #12]
   137f4:	strne	sl, [r3, #16]
   137f8:	streq	lr, [r3, #16]
   137fc:	ldreq	lr, [pc, #968]	; 13bcc <__assert_fail@plt+0x27b8>
   13800:	streq	lr, [r3, #12]
   13804:	cmp	r6, #0
   13808:	moveq	lr, r6
   1380c:	beq	1381c <__assert_fail@plt+0x2408>
   13810:	ldr	lr, [sp, #36]	; 0x24
   13814:	cmp	ip, #1
   13818:	orreq	lr, lr, #1
   1381c:	cmp	r0, #0
   13820:	and	lr, lr, #1
   13824:	str	r2, [r3, #32]
   13828:	addne	r2, r8, r1
   1382c:	moveq	r1, r0
   13830:	addne	r1, r2, r9
   13834:	moveq	r2, r0
   13838:	strb	lr, [r3, #36]	; 0x24
   1383c:	add	ip, ip, #1
   13840:	add	r3, r3, #40	; 0x28
   13844:	b	1358c <__assert_fail@plt+0x2178>
   13848:	ldr	r1, [pc, #888]	; 13bc8 <__assert_fail@plt+0x27b4>
   1384c:	str	r1, [r3, #16]
   13850:	ldr	r1, [pc, #884]	; 13bcc <__assert_fail@plt+0x27b8>
   13854:	b	135b8 <__assert_fail@plt+0x21a4>
   13858:	add	r3, r3, #1
   1385c:	add	r2, r2, #40	; 0x28
   13860:	str	r1, [r2, #-16]
   13864:	b	13630 <__assert_fail@plt+0x221c>
   13868:	ldr	r3, [r4, #176]	; 0xb0
   1386c:	str	r8, [r6, #20]
   13870:	cmp	r3, #0
   13874:	beq	13884 <__assert_fail@plt+0x2470>
   13878:	ldr	r2, [r4, #8]
   1387c:	cmp	r2, #0
   13880:	bne	13890 <__assert_fail@plt+0x247c>
   13884:	add	fp, fp, #1
   13888:	add	r6, r6, #40	; 0x28
   1388c:	b	13644 <__assert_fail@plt+0x2230>
   13890:	ldr	r2, [r6, #8]
   13894:	cmp	r2, #0
   13898:	movne	r2, sl
   1389c:	bne	13908 <__assert_fail@plt+0x24f4>
   138a0:	mov	r0, r6
   138a4:	str	r3, [sp, #16]
   138a8:	str	r2, [r4, #104]	; 0x68
   138ac:	bl	12d60 <__assert_fail@plt+0x194c>
   138b0:	cmp	r0, #0
   138b4:	ldr	r3, [sp, #16]
   138b8:	bne	138c8 <__assert_fail@plt+0x24b4>
   138bc:	mov	r0, r6
   138c0:	bl	12a28 <__assert_fail@plt+0x1614>
   138c4:	ldr	r3, [sp, #16]
   138c8:	ldr	r1, [r6, #8]
   138cc:	ldr	r2, [r7, #12]
   138d0:	cmp	r1, #0
   138d4:	beq	138e0 <__assert_fail@plt+0x24cc>
   138d8:	cmp	sl, r2
   138dc:	beq	13908 <__assert_fail@plt+0x24f4>
   138e0:	ldr	r1, [r6, #24]
   138e4:	ldr	r0, [r7, #152]	; 0x98
   138e8:	ldr	ip, [r7, #160]	; 0xa0
   138ec:	add	r1, r1, #1
   138f0:	str	r1, [r6, #24]
   138f4:	lsl	r1, r8, #2
   138f8:	str	sl, [r0, r8, lsl #2]
   138fc:	add	r8, r8, #1
   13900:	ldr	r0, [r7, #104]	; 0x68
   13904:	str	r0, [ip, r1]
   13908:	sub	r3, r3, #1
   1390c:	mov	sl, r2
   13910:	b	13870 <__assert_fail@plt+0x245c>
   13914:	ldr	lr, [r5]
   13918:	mov	r1, ip
   1391c:	mov	r6, #0
   13920:	mov	r2, #1
   13924:	cmp	lr, r2
   13928:	blt	13670 <__assert_fail@plt+0x225c>
   1392c:	sdiv	r3, r8, lr
   13930:	add	r1, r1, #40	; 0x28
   13934:	str	r6, [r1, #-20]	; 0xffffffec
   13938:	mls	r9, lr, r3, r8
   1393c:	cmp	r9, r2
   13940:	add	r2, r2, #1
   13944:	addge	r3, r3, #1
   13948:	add	r6, r6, r3
   1394c:	str	r3, [r1, #-16]
   13950:	b	13924 <__assert_fail@plt+0x2510>
   13954:	ldr	lr, [r2, #24]
   13958:	sub	r1, r1, #1
   1395c:	add	r2, r2, #40	; 0x28
   13960:	str	lr, [r2, #-12]
   13964:	b	13680 <__assert_fail@plt+0x226c>
   13968:	ldr	r2, [r6, #8]
   1396c:	sub	r9, r9, #1
   13970:	add	r6, r6, #40	; 0x28
   13974:	cmp	r2, #0
   13978:	moveq	r2, r3
   1397c:	movne	r2, #0
   13980:	str	r2, [r6, #-12]
   13984:	cmp	r9, #0
   13988:	bne	13968 <__assert_fail@plt+0x2554>
   1398c:	b	136b4 <__assert_fail@plt+0x22a0>
   13990:	ldr	fp, [r4]
   13994:	mov	r9, #1
   13998:	str	r8, [r4, #68]	; 0x44
   1399c:	str	r8, [r4, #72]	; 0x48
   139a0:	str	r8, [r4, #136]	; 0x88
   139a4:	strb	r8, [r4, #156]	; 0x9c
   139a8:	strb	r8, [r4, #172]	; 0xac
   139ac:	strb	r9, [r4, #173]	; 0xad
   139b0:	ldr	r2, [r5]
   139b4:	cmp	r9, r2
   139b8:	ble	13a14 <__assert_fail@plt+0x2600>
   139bc:	ldrb	r3, [r4, #156]	; 0x9c
   139c0:	cmp	r3, #0
   139c4:	beq	139d4 <__assert_fail@plt+0x25c0>
   139c8:	mov	r0, #10
   139cc:	sub	r6, r6, #1
   139d0:	bl	11408 <putchar_unlocked@plt>
   139d4:	bl	11dd8 <__assert_fail@plt+0x9c4>
   139d8:	cmp	r0, #0
   139dc:	bne	139f0 <__assert_fail@plt+0x25dc>
   139e0:	ldr	r3, [pc, #432]	; 13b98 <__assert_fail@plt+0x2784>
   139e4:	ldrb	r3, [r3, #52]	; 0x34
   139e8:	cmp	r3, #0
   139ec:	beq	13b14 <__assert_fail@plt+0x2700>
   139f0:	ldrb	r3, [r7, #180]	; 0xb4
   139f4:	cmp	r3, #0
   139f8:	beq	136f0 <__assert_fail@plt+0x22dc>
   139fc:	cmp	sl, #0
   13a00:	beq	136f0 <__assert_fail@plt+0x22dc>
   13a04:	mov	r0, #10
   13a08:	sub	r6, r6, #1
   13a0c:	bl	11408 <putchar_unlocked@plt>
   13a10:	b	136f0 <__assert_fail@plt+0x22dc>
   13a14:	ldr	r2, [fp, #28]
   13a18:	str	r8, [r4, #104]	; 0x68
   13a1c:	cmp	r2, #0
   13a20:	bgt	13a30 <__assert_fail@plt+0x261c>
   13a24:	ldr	r2, [fp, #8]
   13a28:	cmp	r2, #1
   13a2c:	bne	13ad4 <__assert_fail@plt+0x26c0>
   13a30:	ldr	r2, [fp, #32]
   13a34:	mov	r0, fp
   13a38:	str	r2, [r4, #144]	; 0x90
   13a3c:	ldr	r2, [fp, #12]
   13a40:	strb	r8, [r4, #164]	; 0xa4
   13a44:	blx	r2
   13a48:	cmp	r0, #0
   13a4c:	bne	13a58 <__assert_fail@plt+0x2644>
   13a50:	mov	r0, fp
   13a54:	bl	12a28 <__assert_fail@plt+0x1614>
   13a58:	ldrb	r2, [r7, #156]	; 0x9c
   13a5c:	orr	sl, sl, r2
   13a60:	ldr	r2, [fp, #28]
   13a64:	sub	r2, r2, #1
   13a68:	cmp	r2, #0
   13a6c:	str	r2, [fp, #28]
   13a70:	bgt	13a80 <__assert_fail@plt+0x266c>
   13a74:	bl	11dd8 <__assert_fail@plt+0x9c4>
   13a78:	cmp	r0, #0
   13a7c:	beq	139bc <__assert_fail@plt+0x25a8>
   13a80:	ldrb	r2, [r7, #4]
   13a84:	cmp	r2, #0
   13a88:	beq	13af4 <__assert_fail@plt+0x26e0>
   13a8c:	ldr	r2, [fp, #8]
   13a90:	cmp	r2, #0
   13a94:	beq	13af4 <__assert_fail@plt+0x26e0>
   13a98:	ldrb	r1, [r7, #173]	; 0xad
   13a9c:	cmp	r1, #0
   13aa0:	movne	r3, #1
   13aa4:	strbne	r3, [r7, #172]	; 0xac
   13aa8:	bne	13af4 <__assert_fail@plt+0x26e0>
   13aac:	cmp	r2, #3
   13ab0:	beq	13ac8 <__assert_fail@plt+0x26b4>
   13ab4:	cmp	r2, #2
   13ab8:	bne	13af4 <__assert_fail@plt+0x26e0>
   13abc:	ldrb	r2, [r7, #164]	; 0xa4
   13ac0:	cmp	r2, #0
   13ac4:	beq	13af4 <__assert_fail@plt+0x26e0>
   13ac8:	mov	r0, fp
   13acc:	bl	12b4c <__assert_fail@plt+0x1738>
   13ad0:	b	13af4 <__assert_fail@plt+0x26e0>
   13ad4:	ldrb	r2, [r4, #4]
   13ad8:	cmp	r2, #0
   13adc:	beq	13af4 <__assert_fail@plt+0x26e0>
   13ae0:	ldrb	r2, [r4, #173]	; 0xad
   13ae4:	cmp	r2, #0
   13ae8:	movne	r3, #1
   13aec:	strbne	r3, [r4, #172]	; 0xac
   13af0:	beq	13ac8 <__assert_fail@plt+0x26b4>
   13af4:	ldrb	r2, [r4, #148]	; 0x94
   13af8:	add	r9, r9, #1
   13afc:	add	fp, fp, #40	; 0x28
   13b00:	cmp	r2, #0
   13b04:	ldrne	r2, [r4, #136]	; 0x88
   13b08:	addne	r2, r2, #1
   13b0c:	strne	r2, [r4, #136]	; 0x88
   13b10:	b	139b0 <__assert_fail@plt+0x259c>
   13b14:	cmp	r6, #0
   13b18:	bne	13704 <__assert_fail@plt+0x22f0>
   13b1c:	ldr	r2, [r4]
   13b20:	mov	r3, #1
   13b24:	mov	r0, r3
   13b28:	ldr	r1, [r5]
   13b2c:	cmp	r3, r1
   13b30:	bgt	13704 <__assert_fail@plt+0x22f0>
   13b34:	ldr	ip, [r2, #8]
   13b38:	add	r3, r3, #1
   13b3c:	add	r2, r2, #40	; 0x28
   13b40:	cmp	ip, #0
   13b44:	strbeq	r0, [r2, #-3]
   13b48:	b	13b2c <__assert_fail@plt+0x2718>
   13b4c:	mov	r0, #10
   13b50:	sub	r6, r6, #1
   13b54:	bl	11408 <putchar_unlocked@plt>
   13b58:	cmp	r6, #0
   13b5c:	bne	13b4c <__assert_fail@plt+0x2738>
   13b60:	b	13734 <__assert_fail@plt+0x2320>
   13b64:	ldrb	r3, [r4, #133]	; 0x85
   13b68:	cmp	r3, #0
   13b6c:	beq	13734 <__assert_fail@plt+0x2320>
   13b70:	ldrb	r3, [r4, #134]	; 0x86
   13b74:	cmp	r3, #0
   13b78:	beq	13734 <__assert_fail@plt+0x2320>
   13b7c:	mov	r0, #12
   13b80:	bl	11408 <putchar_unlocked@plt>
   13b84:	mov	r3, #0
   13b88:	strb	r3, [r4, #134]	; 0x86
   13b8c:	b	13734 <__assert_fail@plt+0x2320>
   13b90:	add	sp, sp, #44	; 0x2c
   13b94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b98:	andeq	ip, r2, r0, asr #2
   13b9c:	strdeq	ip, [r2], -r0
   13ba0:	andeq	r9, r1, r9, ror #10
   13ba4:	andeq	r9, r1, pc, asr #10
   13ba8:	andeq	r9, r1, fp, ror #10
   13bac:	andeq	r9, r1, sl, ror #10
   13bb0:	andeq	r9, r1, sl, asr r5
   13bb4:	andeq	ip, r2, r0, ror #3
   13bb8:	andeq	r9, r1, r1, lsl #11
   13bbc:	muleq	r1, r2, r5
   13bc0:	andeq	r1, r1, r8, lsr pc
   13bc4:	andeq	r2, r1, r4, lsr ip
   13bc8:	andeq	r2, r1, ip, lsr #23
   13bcc:	andeq	r2, r1, r0, ror #26
   13bd0:	subs	r5, r0, #0
   13bd4:	push	{r7, lr}
   13bd8:	sub	sp, sp, #56	; 0x38
   13bdc:	ldr	r4, [pc, #808]	; 13f0c <__assert_fail@plt+0x2af8>
   13be0:	beq	13c18 <__assert_fail@plt+0x2804>
   13be4:	mov	r2, #5
   13be8:	mov	r0, #0
   13bec:	ldr	r3, [pc, #796]	; 13f10 <__assert_fail@plt+0x2afc>
   13bf0:	ldr	r1, [pc, #796]	; 13f14 <__assert_fail@plt+0x2b00>
   13bf4:	ldr	r6, [r3]
   13bf8:	bl	1118c <dcgettext@plt>
   13bfc:	mov	r2, r0
   13c00:	mov	r1, #1
   13c04:	ldr	r3, [r4]
   13c08:	mov	r0, r6
   13c0c:	bl	1133c <__fprintf_chk@plt>
   13c10:	mov	r0, r5
   13c14:	bl	112ac <exit@plt>
   13c18:	mov	r2, #5
   13c1c:	ldr	r1, [pc, #756]	; 13f18 <__assert_fail@plt+0x2b04>
   13c20:	mov	r6, sp
   13c24:	bl	1118c <dcgettext@plt>
   13c28:	ldr	r2, [r4]
   13c2c:	mov	r1, r0
   13c30:	mov	r0, #1
   13c34:	bl	11318 <__printf_chk@plt>
   13c38:	ldr	r4, [pc, #732]	; 13f1c <__assert_fail@plt+0x2b08>
   13c3c:	mov	r2, #5
   13c40:	mov	r0, r5
   13c44:	ldr	r1, [pc, #724]	; 13f20 <__assert_fail@plt+0x2b0c>
   13c48:	bl	1118c <dcgettext@plt>
   13c4c:	ldr	r7, [pc, #720]	; 13f24 <__assert_fail@plt+0x2b10>
   13c50:	ldr	r1, [r4]
   13c54:	bl	110c0 <fputs_unlocked@plt>
   13c58:	mov	r2, #5
   13c5c:	ldr	r1, [pc, #708]	; 13f28 <__assert_fail@plt+0x2b14>
   13c60:	mov	r0, r5
   13c64:	bl	1118c <dcgettext@plt>
   13c68:	ldr	r1, [r4]
   13c6c:	bl	110c0 <fputs_unlocked@plt>
   13c70:	mov	r2, #5
   13c74:	ldr	r1, [pc, #688]	; 13f2c <__assert_fail@plt+0x2b18>
   13c78:	mov	r0, r5
   13c7c:	bl	1118c <dcgettext@plt>
   13c80:	ldr	r1, [r4]
   13c84:	bl	110c0 <fputs_unlocked@plt>
   13c88:	mov	r2, #5
   13c8c:	ldr	r1, [pc, #668]	; 13f30 <__assert_fail@plt+0x2b1c>
   13c90:	mov	r0, r5
   13c94:	bl	1118c <dcgettext@plt>
   13c98:	ldr	r1, [r4]
   13c9c:	bl	110c0 <fputs_unlocked@plt>
   13ca0:	mov	r2, #5
   13ca4:	ldr	r1, [pc, #648]	; 13f34 <__assert_fail@plt+0x2b20>
   13ca8:	mov	r0, r5
   13cac:	bl	1118c <dcgettext@plt>
   13cb0:	ldr	r1, [r4]
   13cb4:	bl	110c0 <fputs_unlocked@plt>
   13cb8:	mov	r2, #5
   13cbc:	ldr	r1, [pc, #628]	; 13f38 <__assert_fail@plt+0x2b24>
   13cc0:	mov	r0, r5
   13cc4:	bl	1118c <dcgettext@plt>
   13cc8:	ldr	r1, [r4]
   13ccc:	bl	110c0 <fputs_unlocked@plt>
   13cd0:	mov	r2, #5
   13cd4:	ldr	r1, [pc, #608]	; 13f3c <__assert_fail@plt+0x2b28>
   13cd8:	mov	r0, r5
   13cdc:	bl	1118c <dcgettext@plt>
   13ce0:	ldr	r1, [r4]
   13ce4:	bl	110c0 <fputs_unlocked@plt>
   13ce8:	mov	r2, #5
   13cec:	ldr	r1, [pc, #588]	; 13f40 <__assert_fail@plt+0x2b2c>
   13cf0:	mov	r0, r5
   13cf4:	bl	1118c <dcgettext@plt>
   13cf8:	ldr	r1, [r4]
   13cfc:	bl	110c0 <fputs_unlocked@plt>
   13d00:	mov	r2, #5
   13d04:	ldr	r1, [pc, #568]	; 13f44 <__assert_fail@plt+0x2b30>
   13d08:	mov	r0, r5
   13d0c:	bl	1118c <dcgettext@plt>
   13d10:	ldr	r1, [r4]
   13d14:	bl	110c0 <fputs_unlocked@plt>
   13d18:	mov	r2, #5
   13d1c:	ldr	r1, [pc, #548]	; 13f48 <__assert_fail@plt+0x2b34>
   13d20:	mov	r0, r5
   13d24:	bl	1118c <dcgettext@plt>
   13d28:	ldr	r1, [r4]
   13d2c:	bl	110c0 <fputs_unlocked@plt>
   13d30:	mov	r2, #5
   13d34:	ldr	r1, [pc, #528]	; 13f4c <__assert_fail@plt+0x2b38>
   13d38:	mov	r0, r5
   13d3c:	bl	1118c <dcgettext@plt>
   13d40:	ldr	r1, [r4]
   13d44:	bl	110c0 <fputs_unlocked@plt>
   13d48:	mov	r2, #5
   13d4c:	ldr	r1, [pc, #508]	; 13f50 <__assert_fail@plt+0x2b3c>
   13d50:	mov	r0, r5
   13d54:	bl	1118c <dcgettext@plt>
   13d58:	ldr	r1, [r4]
   13d5c:	bl	110c0 <fputs_unlocked@plt>
   13d60:	mov	r2, #5
   13d64:	ldr	r1, [pc, #488]	; 13f54 <__assert_fail@plt+0x2b40>
   13d68:	mov	r0, r5
   13d6c:	bl	1118c <dcgettext@plt>
   13d70:	ldr	r1, [r4]
   13d74:	bl	110c0 <fputs_unlocked@plt>
   13d78:	mov	r2, #5
   13d7c:	ldr	r1, [pc, #468]	; 13f58 <__assert_fail@plt+0x2b44>
   13d80:	mov	r0, r5
   13d84:	bl	1118c <dcgettext@plt>
   13d88:	ldr	r1, [r4]
   13d8c:	bl	110c0 <fputs_unlocked@plt>
   13d90:	mov	r2, #5
   13d94:	ldr	r1, [pc, #448]	; 13f5c <__assert_fail@plt+0x2b48>
   13d98:	mov	r0, r5
   13d9c:	bl	1118c <dcgettext@plt>
   13da0:	ldr	r1, [r4]
   13da4:	bl	110c0 <fputs_unlocked@plt>
   13da8:	mov	r2, #5
   13dac:	ldr	r1, [pc, #428]	; 13f60 <__assert_fail@plt+0x2b4c>
   13db0:	mov	r0, r5
   13db4:	bl	1118c <dcgettext@plt>
   13db8:	ldr	r1, [r4]
   13dbc:	bl	110c0 <fputs_unlocked@plt>
   13dc0:	mov	r2, #5
   13dc4:	ldr	r1, [pc, #408]	; 13f64 <__assert_fail@plt+0x2b50>
   13dc8:	mov	r0, r5
   13dcc:	bl	1118c <dcgettext@plt>
   13dd0:	ldr	r1, [r4]
   13dd4:	bl	110c0 <fputs_unlocked@plt>
   13dd8:	mov	r2, #5
   13ddc:	ldr	r1, [pc, #388]	; 13f68 <__assert_fail@plt+0x2b54>
   13de0:	mov	r0, r5
   13de4:	bl	1118c <dcgettext@plt>
   13de8:	ldr	r1, [r4]
   13dec:	bl	110c0 <fputs_unlocked@plt>
   13df0:	ldr	lr, [pc, #372]	; 13f6c <__assert_fail@plt+0x2b58>
   13df4:	mov	ip, sp
   13df8:	ldm	lr!, {r0, r1, r2, r3}
   13dfc:	stmia	ip!, {r0, r1, r2, r3}
   13e00:	ldm	lr!, {r0, r1, r2, r3}
   13e04:	stmia	ip!, {r0, r1, r2, r3}
   13e08:	ldm	lr!, {r0, r1, r2, r3}
   13e0c:	stmia	ip!, {r0, r1, r2, r3}
   13e10:	ldm	lr, {r0, r1}
   13e14:	stm	ip, {r0, r1}
   13e18:	ldr	r1, [r6]
   13e1c:	cmp	r1, #0
   13e20:	bne	13ec4 <__assert_fail@plt+0x2ab0>
   13e24:	ldr	r6, [r6, #4]
   13e28:	mov	r2, #5
   13e2c:	mov	r0, #0
   13e30:	ldr	r7, [pc, #236]	; 13f24 <__assert_fail@plt+0x2b10>
   13e34:	ldr	r1, [pc, #308]	; 13f70 <__assert_fail@plt+0x2b5c>
   13e38:	cmp	r6, #0
   13e3c:	moveq	r6, r7
   13e40:	bl	1118c <dcgettext@plt>
   13e44:	mov	r1, r0
   13e48:	ldr	r3, [pc, #292]	; 13f74 <__assert_fail@plt+0x2b60>
   13e4c:	mov	r0, #1
   13e50:	ldr	r2, [pc, #288]	; 13f78 <__assert_fail@plt+0x2b64>
   13e54:	bl	11318 <__printf_chk@plt>
   13e58:	mov	r1, #0
   13e5c:	mov	r0, #5
   13e60:	bl	11378 <setlocale@plt>
   13e64:	cmp	r0, #0
   13e68:	bne	13edc <__assert_fail@plt+0x2ac8>
   13e6c:	mov	r2, #5
   13e70:	ldr	r1, [pc, #260]	; 13f7c <__assert_fail@plt+0x2b68>
   13e74:	mov	r0, #0
   13e78:	bl	1118c <dcgettext@plt>
   13e7c:	mov	r1, r0
   13e80:	ldr	r3, [pc, #156]	; 13f24 <__assert_fail@plt+0x2b10>
   13e84:	mov	r0, #1
   13e88:	ldr	r2, [pc, #228]	; 13f74 <__assert_fail@plt+0x2b60>
   13e8c:	bl	11318 <__printf_chk@plt>
   13e90:	mov	r2, #5
   13e94:	ldr	r1, [pc, #228]	; 13f80 <__assert_fail@plt+0x2b6c>
   13e98:	mov	r0, #0
   13e9c:	bl	1118c <dcgettext@plt>
   13ea0:	ldr	r2, [pc, #220]	; 13f84 <__assert_fail@plt+0x2b70>
   13ea4:	cmp	r6, r7
   13ea8:	mov	r1, r0
   13eac:	mov	r0, #1
   13eb0:	ldr	r3, [pc, #208]	; 13f88 <__assert_fail@plt+0x2b74>
   13eb4:	moveq	r3, r2
   13eb8:	mov	r2, r6
   13ebc:	bl	11318 <__printf_chk@plt>
   13ec0:	b	13c10 <__assert_fail@plt+0x27fc>
   13ec4:	mov	r0, r7
   13ec8:	bl	110e4 <strcmp@plt>
   13ecc:	cmp	r0, #0
   13ed0:	beq	13e24 <__assert_fail@plt+0x2a10>
   13ed4:	add	r6, r6, #8
   13ed8:	b	13e18 <__assert_fail@plt+0x2a04>
   13edc:	mov	r2, #3
   13ee0:	ldr	r1, [pc, #164]	; 13f8c <__assert_fail@plt+0x2b78>
   13ee4:	bl	113e4 <strncmp@plt>
   13ee8:	cmp	r0, #0
   13eec:	beq	13e6c <__assert_fail@plt+0x2a58>
   13ef0:	mov	r2, #5
   13ef4:	ldr	r1, [pc, #148]	; 13f90 <__assert_fail@plt+0x2b7c>
   13ef8:	mov	r0, #0
   13efc:	bl	1118c <dcgettext@plt>
   13f00:	ldr	r1, [r4]
   13f04:	bl	110c0 <fputs_unlocked@plt>
   13f08:	b	13e6c <__assert_fail@plt+0x2a58>
   13f0c:			; <UNDEFINED> instruction: 0x0002c2b4
   13f10:	ldrdeq	ip, [r2], -r8
   13f14:	andeq	r9, r1, r7, asr #11
   13f18:	andeq	r9, r1, lr, ror #11
   13f1c:	andeq	ip, r2, r4, ror #3
   13f20:	andeq	r9, r1, pc, lsl #12
   13f24:	andeq	r9, r1, r4, asr #11
   13f28:	andeq	r9, r1, ip, lsr r6
   13f2c:	andeq	r9, r1, r4, ror r6
   13f30:			; <UNDEFINED> instruction: 0x000196bf
   13f34:	andeq	r9, r1, sp, lsl #16
   13f38:	andeq	r9, r1, fp, lsl r9
   13f3c:	andeq	r9, r1, fp, lsr #21
   13f40:	andeq	r9, r1, r6, asr ip
   13f44:	andeq	r9, r1, r2, lsr sp
   13f48:	andeq	r9, r1, r2, asr #27
   13f4c:	andeq	r9, r1, ip, lsl pc
   13f50:	andeq	sl, r1, r9, lsl r0
   13f54:	andeq	sl, r1, pc, asr r1
   13f58:	andeq	sl, r1, fp, asr #4
   13f5c:			; <UNDEFINED> instruction: 0x0001a2b3
   13f60:	andeq	sl, r1, r4, asr #8
   13f64:	andeq	sl, r1, fp, lsl r5
   13f68:	andeq	sl, r1, r8, asr #10
   13f6c:	andeq	r9, r1, ip, lsl #9
   13f70:	andeq	sl, r1, lr, ror r5
   13f74:	muleq	r1, r5, r5
   13f78:			; <UNDEFINED> instruction: 0x0001a5bd
   13f7c:	andeq	sl, r1, r6, lsl r6
   13f80:	andeq	sl, r1, r1, lsr r6
   13f84:	andeq	sl, r1, lr, lsr #17
   13f88:	andeq	r9, r1, sl, ror #10
   13f8c:	andeq	sl, r1, fp, asr #11
   13f90:	andeq	sl, r1, pc, asr #11
   13f94:	push	{r4, r5, r6, r7, lr}
   13f98:	mov	r5, r3
   13f9c:	mov	r7, r1
   13fa0:	mov	r4, r0
   13fa4:	sub	sp, sp, #20
   13fa8:	ldrb	r3, [r0]
   13fac:	sub	r1, r3, #48	; 0x30
   13fb0:	cmp	r1, #9
   13fb4:	addhi	r4, r0, #1
   13fb8:	strbhi	r3, [r2]
   13fbc:	ldrb	r3, [r4]
   13fc0:	cmp	r3, #0
   13fc4:	beq	14040 <__assert_fail@plt+0x2c2c>
   13fc8:	ldr	r3, [pc, #120]	; 14048 <__assert_fail@plt+0x2c34>
   13fcc:	mov	r2, #10
   13fd0:	mov	r1, #0
   13fd4:	mov	r0, r4
   13fd8:	str	r3, [sp]
   13fdc:	add	r3, sp, #12
   13fe0:	bl	18448 <__assert_fail@plt+0x7034>
   13fe4:	cmp	r0, #0
   13fe8:	bne	13ffc <__assert_fail@plt+0x2be8>
   13fec:	ldr	r3, [sp, #12]
   13ff0:	cmp	r3, #0
   13ff4:	strgt	r3, [r5]
   13ff8:	bgt	14040 <__assert_fail@plt+0x2c2c>
   13ffc:	bl	112e8 <__errno_location@plt>
   14000:	ldr	r5, [r0]
   14004:	mov	r2, #5
   14008:	mov	r0, #0
   1400c:	ldr	r1, [pc, #56]	; 1404c <__assert_fail@plt+0x2c38>
   14010:	bl	1118c <dcgettext@plt>
   14014:	mov	r6, r0
   14018:	mov	r0, r4
   1401c:	bl	170e8 <__assert_fail@plt+0x5cd4>
   14020:	mov	r3, r7
   14024:	mov	r2, r6
   14028:	str	r0, [sp]
   1402c:	mov	r1, r5
   14030:	mov	r0, #0
   14034:	bl	11228 <error@plt>
   14038:	mov	r0, #1
   1403c:	bl	13bd0 <__assert_fail@plt+0x27bc>
   14040:	add	sp, sp, #20
   14044:	pop	{r4, r5, r6, r7, pc}
   14048:	andeq	r9, r1, sl, ror #10
   1404c:	andeq	sl, r1, r4, ror #12
   14050:	ldr	r3, [pc, #4]	; 1405c <__assert_fail@plt+0x2c48>
   14054:	str	r0, [r3]
   14058:	bx	lr
   1405c:	andeq	ip, r2, ip, lsr #5
   14060:	ldr	r3, [pc, #4]	; 1406c <__assert_fail@plt+0x2c58>
   14064:	strb	r0, [r3, #4]
   14068:	bx	lr
   1406c:	andeq	ip, r2, ip, lsr #5
   14070:	ldr	r3, [pc, #176]	; 14128 <__assert_fail@plt+0x2d14>
   14074:	push	{r0, r1, r4, r5, r6, lr}
   14078:	ldr	r0, [r3]
   1407c:	bl	18d04 <__assert_fail@plt+0x78f0>
   14080:	cmp	r0, #0
   14084:	beq	1410c <__assert_fail@plt+0x2cf8>
   14088:	ldr	r4, [pc, #156]	; 1412c <__assert_fail@plt+0x2d18>
   1408c:	bl	112e8 <__errno_location@plt>
   14090:	mov	r5, r0
   14094:	ldrb	r6, [r4, #4]
   14098:	cmp	r6, #0
   1409c:	beq	140ac <__assert_fail@plt+0x2c98>
   140a0:	ldr	r3, [r0]
   140a4:	cmp	r3, #32
   140a8:	beq	1410c <__assert_fail@plt+0x2cf8>
   140ac:	mov	r2, #5
   140b0:	ldr	r1, [pc, #120]	; 14130 <__assert_fail@plt+0x2d1c>
   140b4:	mov	r0, #0
   140b8:	bl	1118c <dcgettext@plt>
   140bc:	mov	r6, r0
   140c0:	ldr	r0, [r4]
   140c4:	cmp	r0, #0
   140c8:	beq	140f8 <__assert_fail@plt+0x2ce4>
   140cc:	ldr	r4, [r5]
   140d0:	bl	16f98 <__assert_fail@plt+0x5b84>
   140d4:	mov	r3, r0
   140d8:	ldr	r2, [pc, #84]	; 14134 <__assert_fail@plt+0x2d20>
   140dc:	mov	r0, #0
   140e0:	str	r6, [sp]
   140e4:	mov	r1, r4
   140e8:	bl	11228 <error@plt>
   140ec:	ldr	r3, [pc, #68]	; 14138 <__assert_fail@plt+0x2d24>
   140f0:	ldr	r0, [r3]
   140f4:	bl	11144 <_exit@plt>
   140f8:	mov	r3, r6
   140fc:	ldr	r2, [pc, #56]	; 1413c <__assert_fail@plt+0x2d28>
   14100:	ldr	r1, [r5]
   14104:	bl	11228 <error@plt>
   14108:	b	140ec <__assert_fail@plt+0x2cd8>
   1410c:	ldr	r3, [pc, #44]	; 14140 <__assert_fail@plt+0x2d2c>
   14110:	ldr	r0, [r3]
   14114:	bl	18d04 <__assert_fail@plt+0x78f0>
   14118:	cmp	r0, #0
   1411c:	bne	140ec <__assert_fail@plt+0x2cd8>
   14120:	add	sp, sp, #8
   14124:	pop	{r4, r5, r6, pc}
   14128:	andeq	ip, r2, r4, ror #3
   1412c:	andeq	ip, r2, ip, lsr #5
   14130:	andeq	sl, r1, r4, lsl #20
   14134:	andeq	sl, r1, r0, lsl sl
   14138:	andeq	ip, r2, r4, lsl #3
   1413c:	andeq	sl, r1, r4, lsl sl
   14140:	ldrdeq	ip, [r2], -r8
   14144:	b	110fc <posix_fadvise64@plt>
   14148:	cmp	r0, #0
   1414c:	bxeq	lr
   14150:	push	{r0, r1, r2, r3, r4, lr}
   14154:	mov	r4, r1
   14158:	bl	11324 <fileno@plt>
   1415c:	mov	r2, #0
   14160:	mov	r3, #0
   14164:	strd	r2, [sp]
   14168:	str	r4, [sp, #8]
   1416c:	bl	110fc <posix_fadvise64@plt>
   14170:	add	sp, sp, #16
   14174:	pop	{r4, pc}
   14178:	push	{r0, r1, r2, r4, r5, lr}
   1417c:	mov	r4, r0
   14180:	bl	11324 <fileno@plt>
   14184:	cmp	r0, #0
   14188:	mov	r0, r4
   1418c:	bge	1419c <__assert_fail@plt+0x2d88>
   14190:	add	sp, sp, #12
   14194:	pop	{r4, r5, lr}
   14198:	b	11354 <fclose@plt>
   1419c:	bl	11264 <__freading@plt>
   141a0:	cmp	r0, #0
   141a4:	bne	141e0 <__assert_fail@plt+0x2dcc>
   141a8:	mov	r0, r4
   141ac:	bl	14220 <__assert_fail@plt+0x2e0c>
   141b0:	cmp	r0, #0
   141b4:	bne	14214 <__assert_fail@plt+0x2e00>
   141b8:	mov	r5, #0
   141bc:	mov	r0, r4
   141c0:	bl	11354 <fclose@plt>
   141c4:	cmp	r5, #0
   141c8:	beq	141d8 <__assert_fail@plt+0x2dc4>
   141cc:	bl	112e8 <__errno_location@plt>
   141d0:	str	r5, [r0]
   141d4:	mvn	r0, #0
   141d8:	add	sp, sp, #12
   141dc:	pop	{r4, r5, pc}
   141e0:	mov	r0, r4
   141e4:	bl	11324 <fileno@plt>
   141e8:	mov	r3, #1
   141ec:	mov	r2, #0
   141f0:	str	r3, [sp]
   141f4:	mov	r3, #0
   141f8:	bl	111ec <lseek64@plt>
   141fc:	mvn	r3, #0
   14200:	mvn	r2, #0
   14204:	cmp	r1, r3
   14208:	cmpeq	r0, r2
   1420c:	bne	141a8 <__assert_fail@plt+0x2d94>
   14210:	b	141b8 <__assert_fail@plt+0x2da4>
   14214:	bl	112e8 <__errno_location@plt>
   14218:	ldr	r5, [r0]
   1421c:	b	141bc <__assert_fail@plt+0x2da8>
   14220:	push	{r0, r1, r4, lr}
   14224:	subs	r4, r0, #0
   14228:	bne	1423c <__assert_fail@plt+0x2e28>
   1422c:	mov	r0, r4
   14230:	add	sp, sp, #8
   14234:	pop	{r4, lr}
   14238:	b	11114 <fflush@plt>
   1423c:	bl	11264 <__freading@plt>
   14240:	cmp	r0, #0
   14244:	beq	1422c <__assert_fail@plt+0x2e18>
   14248:	ldr	r3, [r4]
   1424c:	tst	r3, #256	; 0x100
   14250:	beq	1422c <__assert_fail@plt+0x2e18>
   14254:	mov	r3, #1
   14258:	mov	r2, #0
   1425c:	mov	r0, r4
   14260:	str	r3, [sp]
   14264:	mov	r3, #0
   14268:	bl	14354 <__assert_fail@plt+0x2f40>
   1426c:	b	1422c <__assert_fail@plt+0x2e18>
   14270:	push	{r4, r5, r6, lr}
   14274:	mov	r6, r1
   14278:	bl	113b4 <fopen64@plt>
   1427c:	subs	r4, r0, #0
   14280:	beq	142b8 <__assert_fail@plt+0x2ea4>
   14284:	bl	11324 <fileno@plt>
   14288:	cmp	r0, #2
   1428c:	bhi	142b8 <__assert_fail@plt+0x2ea4>
   14290:	bl	175c4 <__assert_fail@plt+0x61b0>
   14294:	subs	r5, r0, #0
   14298:	bge	142c0 <__assert_fail@plt+0x2eac>
   1429c:	bl	112e8 <__errno_location@plt>
   142a0:	mov	r5, r0
   142a4:	mov	r0, r4
   142a8:	ldr	r6, [r5]
   142ac:	bl	14178 <__assert_fail@plt+0x2d64>
   142b0:	str	r6, [r5]
   142b4:	mov	r4, #0
   142b8:	mov	r0, r4
   142bc:	pop	{r4, r5, r6, pc}
   142c0:	mov	r0, r4
   142c4:	bl	14178 <__assert_fail@plt+0x2d64>
   142c8:	cmp	r0, #0
   142cc:	beq	142ec <__assert_fail@plt+0x2ed8>
   142d0:	bl	112e8 <__errno_location@plt>
   142d4:	mov	r4, r0
   142d8:	mov	r0, r5
   142dc:	ldr	r6, [r4]
   142e0:	bl	113fc <close@plt>
   142e4:	str	r6, [r4]
   142e8:	b	142b4 <__assert_fail@plt+0x2ea0>
   142ec:	mov	r1, r6
   142f0:	mov	r0, r5
   142f4:	bl	110a8 <fdopen@plt>
   142f8:	subs	r4, r0, #0
   142fc:	bne	142b8 <__assert_fail@plt+0x2ea4>
   14300:	b	142d0 <__assert_fail@plt+0x2ebc>
   14304:	push	{r0, r1, r2, r4, r5, lr}
   14308:	mov	r5, r0
   1430c:	bl	112e8 <__errno_location@plt>
   14310:	mov	r4, r0
   14314:	mov	r0, r5
   14318:	ldr	r3, [r4]
   1431c:	str	r3, [sp]
   14320:	str	r3, [sp, #4]
   14324:	mov	r3, #0
   14328:	str	r3, [r4]
   1432c:	bl	1112c <free@plt>
   14330:	ldr	r3, [r4]
   14334:	add	r2, sp, #8
   14338:	clz	r3, r3
   1433c:	lsr	r3, r3, #5
   14340:	add	r3, r2, r3, lsl #2
   14344:	ldr	r3, [r3, #-8]
   14348:	str	r3, [r4]
   1434c:	add	sp, sp, #12
   14350:	pop	{r4, r5, pc}
   14354:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14358:	mov	r4, r0
   1435c:	ldmib	r0, {ip, lr}
   14360:	ldr	r8, [sp, #32]
   14364:	cmp	lr, ip
   14368:	bne	143d8 <__assert_fail@plt+0x2fc4>
   1436c:	ldr	ip, [r0, #16]
   14370:	ldr	lr, [r0, #20]
   14374:	cmp	lr, ip
   14378:	bne	143d8 <__assert_fail@plt+0x2fc4>
   1437c:	ldr	r5, [r0, #36]	; 0x24
   14380:	cmp	r5, #0
   14384:	bne	143d8 <__assert_fail@plt+0x2fc4>
   14388:	mov	r6, r2
   1438c:	mov	r7, r3
   14390:	bl	11324 <fileno@plt>
   14394:	mov	r2, r6
   14398:	mov	r3, r7
   1439c:	str	r8, [sp]
   143a0:	bl	111ec <lseek64@plt>
   143a4:	mvn	r3, #0
   143a8:	mvn	r2, #0
   143ac:	cmp	r1, r3
   143b0:	cmpeq	r0, r2
   143b4:	mvneq	r0, #0
   143b8:	beq	143d0 <__assert_fail@plt+0x2fbc>
   143bc:	ldr	r3, [r4]
   143c0:	strd	r0, [r4, #80]	; 0x50
   143c4:	mov	r0, r5
   143c8:	bic	r3, r3, #16
   143cc:	str	r3, [r4]
   143d0:	add	sp, sp, #8
   143d4:	pop	{r4, r5, r6, r7, r8, pc}
   143d8:	mov	r0, r4
   143dc:	str	r8, [sp, #32]
   143e0:	add	sp, sp, #8
   143e4:	pop	{r4, r5, r6, r7, r8, lr}
   143e8:	b	11360 <fseeko64@plt>
   143ec:	mov	r1, r0
   143f0:	mov	r0, #0
   143f4:	b	11138 <clock_gettime@plt>
   143f8:	push	{r0, r1, r2, r4, r5, lr}
   143fc:	mov	r5, sp
   14400:	mov	r4, r0
   14404:	mov	r0, r5
   14408:	bl	143ec <__assert_fail@plt+0x2fd8>
   1440c:	ldm	r5, {r0, r1}
   14410:	stm	r4, {r0, r1}
   14414:	mov	r0, r4
   14418:	add	sp, sp, #12
   1441c:	pop	{r4, r5, pc}
   14420:	push	{lr}		; (str lr, [sp, #-4]!)
   14424:	sub	sp, sp, #268	; 0x10c
   14428:	movw	r2, #257	; 0x101
   1442c:	add	r1, sp, #4
   14430:	bl	170f4 <__assert_fail@plt+0x5ce0>
   14434:	cmp	r0, #0
   14438:	movne	r0, #0
   1443c:	bne	1446c <__assert_fail@plt+0x3058>
   14440:	ldr	r1, [pc, #44]	; 14474 <__assert_fail@plt+0x3060>
   14444:	add	r0, sp, #4
   14448:	bl	110e4 <strcmp@plt>
   1444c:	cmp	r0, #0
   14450:	beq	14468 <__assert_fail@plt+0x3054>
   14454:	ldr	r1, [pc, #28]	; 14478 <__assert_fail@plt+0x3064>
   14458:	add	r0, sp, #4
   1445c:	bl	110e4 <strcmp@plt>
   14460:	adds	r0, r0, #0
   14464:	movne	r0, #1
   14468:	and	r0, r0, #1
   1446c:	add	sp, sp, #268	; 0x10c
   14470:	pop	{pc}		; (ldr pc, [sp], #4)
   14474:	andeq	sl, r1, r7, lsl sl
   14478:	andeq	sl, r1, r9, lsl sl
   1447c:	mov	r3, #0
   14480:	cmp	r0, #0
   14484:	push	{r4, r5, r6, r7, r8, lr}
   14488:	mov	r4, r0
   1448c:	mov	r5, r1
   14490:	add	r6, r2, #20
   14494:	strb	r3, [r2, #20]
   14498:	sbcs	r3, r1, #0
   1449c:	bge	14500 <__assert_fail@plt+0x30ec>
   144a0:	mov	r0, r4
   144a4:	mov	r1, r5
   144a8:	mov	r2, #10
   144ac:	mov	r3, #0
   144b0:	bl	18ffc <__assert_fail@plt+0x7be8>
   144b4:	rsb	r2, r2, #48	; 0x30
   144b8:	mov	r3, #0
   144bc:	mov	r0, r4
   144c0:	mov	r1, r5
   144c4:	strb	r2, [r6, #-1]
   144c8:	mov	r2, #10
   144cc:	sub	r7, r6, #1
   144d0:	bl	18ffc <__assert_fail@plt+0x7be8>
   144d4:	mov	r4, r0
   144d8:	mov	r5, r1
   144dc:	orrs	r3, r4, r5
   144e0:	bne	144f8 <__assert_fail@plt+0x30e4>
   144e4:	mov	r3, #45	; 0x2d
   144e8:	sub	r6, r6, #2
   144ec:	strb	r3, [r7, #-1]
   144f0:	mov	r0, r6
   144f4:	pop	{r4, r5, r6, r7, r8, pc}
   144f8:	mov	r6, r7
   144fc:	b	144a0 <__assert_fail@plt+0x308c>
   14500:	mov	r0, r4
   14504:	mov	r1, r5
   14508:	mov	r2, #10
   1450c:	mov	r3, #0
   14510:	bl	18ffc <__assert_fail@plt+0x7be8>
   14514:	add	r2, r2, #48	; 0x30
   14518:	mov	r3, #0
   1451c:	mov	r0, r4
   14520:	mov	r1, r5
   14524:	strb	r2, [r6, #-1]!
   14528:	mov	r2, #10
   1452c:	bl	18ffc <__assert_fail@plt+0x7be8>
   14530:	mov	r4, r0
   14534:	mov	r5, r1
   14538:	orrs	r3, r4, r5
   1453c:	bne	14500 <__assert_fail@plt+0x30ec>
   14540:	b	144f0 <__assert_fail@plt+0x30dc>
   14544:	push	{r0, r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, lr}
   14548:	mov	r8, r2
   1454c:	mov	r5, r0
   14550:	add	r9, r0, r1
   14554:	mov	r4, #0
   14558:	bl	111f8 <__ctype_get_mb_cur_max@plt>
   1455c:	cmp	r0, #1
   14560:	andls	r8, r8, #2
   14564:	bls	1469c <__assert_fail@plt+0x3288>
   14568:	cmp	r5, r9
   1456c:	bcs	14680 <__assert_fail@plt+0x326c>
   14570:	ldrb	r3, [r5]
   14574:	cmp	r3, #63	; 0x3f
   14578:	bhi	1459c <__assert_fail@plt+0x3188>
   1457c:	cmp	r3, #37	; 0x25
   14580:	bcs	14590 <__assert_fail@plt+0x317c>
   14584:	sub	r3, r3, #32
   14588:	cmp	r3, #3
   1458c:	bhi	145b8 <__assert_fail@plt+0x31a4>
   14590:	add	r5, r5, #1
   14594:	add	r4, r4, #1
   14598:	b	14568 <__assert_fail@plt+0x3154>
   1459c:	cmp	r3, #65	; 0x41
   145a0:	bcc	145b8 <__assert_fail@plt+0x31a4>
   145a4:	cmp	r3, #95	; 0x5f
   145a8:	bls	14590 <__assert_fail@plt+0x317c>
   145ac:	sub	r3, r3, #97	; 0x61
   145b0:	cmp	r3, #29
   145b4:	b	1458c <__assert_fail@plt+0x3178>
   145b8:	mov	r2, #0
   145bc:	mov	r3, #0
   145c0:	and	sl, r8, #2
   145c4:	mvn	fp, #-2147483648	; 0x80000000
   145c8:	strd	r2, [sp, #8]
   145cc:	add	r3, sp, #8
   145d0:	sub	r2, r9, r5
   145d4:	mov	r1, r5
   145d8:	add	r0, sp, #4
   145dc:	bl	18f80 <__assert_fail@plt+0x7b6c>
   145e0:	cmn	r0, #1
   145e4:	mov	r6, r0
   145e8:	bne	145fc <__assert_fail@plt+0x31e8>
   145ec:	tst	r8, #1
   145f0:	beq	14590 <__assert_fail@plt+0x317c>
   145f4:	mvn	r4, #0
   145f8:	b	14680 <__assert_fail@plt+0x326c>
   145fc:	cmn	r0, #2
   14600:	bne	14618 <__assert_fail@plt+0x3204>
   14604:	tst	r8, #1
   14608:	bne	145f4 <__assert_fail@plt+0x31e0>
   1460c:	add	r4, r4, #1
   14610:	mov	r5, r9
   14614:	b	14568 <__assert_fail@plt+0x3154>
   14618:	cmp	r0, #0
   1461c:	ldr	r0, [sp, #4]
   14620:	moveq	r6, #1
   14624:	bl	11120 <wcwidth@plt>
   14628:	cmp	r0, #0
   1462c:	blt	14658 <__assert_fail@plt+0x3244>
   14630:	sub	r2, fp, r4
   14634:	cmp	r2, r0
   14638:	blt	1467c <__assert_fail@plt+0x3268>
   1463c:	add	r4, r4, r0
   14640:	add	r0, sp, #8
   14644:	add	r5, r5, r6
   14648:	bl	1115c <mbsinit@plt>
   1464c:	cmp	r0, #0
   14650:	beq	145cc <__assert_fail@plt+0x31b8>
   14654:	b	14568 <__assert_fail@plt+0x3154>
   14658:	cmp	sl, #0
   1465c:	bne	145f4 <__assert_fail@plt+0x31e0>
   14660:	ldr	r0, [sp, #4]
   14664:	bl	111bc <iswcntrl@plt>
   14668:	cmp	r0, #0
   1466c:	bne	14640 <__assert_fail@plt+0x322c>
   14670:	cmn	r4, #-2147483647	; 0x80000001
   14674:	addne	r4, r4, #1
   14678:	bne	14640 <__assert_fail@plt+0x322c>
   1467c:	mvn	r4, #-2147483648	; 0x80000000
   14680:	mov	r0, r4
   14684:	add	sp, sp, #16
   14688:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1468c:	cmp	r8, #0
   14690:	bne	145f4 <__assert_fail@plt+0x31e0>
   14694:	tst	r3, #2
   14698:	beq	146c0 <__assert_fail@plt+0x32ac>
   1469c:	cmp	r5, r9
   146a0:	bcs	14680 <__assert_fail@plt+0x326c>
   146a4:	bl	112a0 <__ctype_b_loc@plt>
   146a8:	ldrb	r3, [r5], #1
   146ac:	ldr	r2, [r0]
   146b0:	lsl	r3, r3, #1
   146b4:	ldrh	r3, [r2, r3]
   146b8:	tst	r3, #16384	; 0x4000
   146bc:	beq	1468c <__assert_fail@plt+0x3278>
   146c0:	cmn	r4, #-2147483647	; 0x80000001
   146c4:	beq	14680 <__assert_fail@plt+0x326c>
   146c8:	add	r4, r4, #1
   146cc:	b	1469c <__assert_fail@plt+0x3288>
   146d0:	push	{r4, r5, r6, lr}
   146d4:	mov	r5, r1
   146d8:	mov	r4, r0
   146dc:	bl	112b8 <strlen@plt>
   146e0:	mov	r1, r0
   146e4:	mov	r2, r5
   146e8:	mov	r0, r4
   146ec:	pop	{r4, r5, r6, lr}
   146f0:	b	14544 <__assert_fail@plt+0x3130>
   146f4:	push	{r4, r5, r6, lr}
   146f8:	mov	r5, r0
   146fc:	mov	r6, r1
   14700:	mov	r4, r2
   14704:	subs	r4, r4, #1
   14708:	bcs	14714 <__assert_fail@plt+0x3300>
   1470c:	mov	r0, r5
   14710:	pop	{r4, r5, r6, pc}
   14714:	bl	11270 <__ctype_tolower_loc@plt>
   14718:	ldrb	r2, [r6, r4]
   1471c:	ldr	r3, [r0]
   14720:	ldr	r3, [r3, r2, lsl #2]
   14724:	strb	r3, [r5, r4]
   14728:	b	14704 <__assert_fail@plt+0x32f0>
   1472c:	push	{r4, r5, r6, lr}
   14730:	mov	r5, r0
   14734:	mov	r6, r1
   14738:	mov	r4, r2
   1473c:	subs	r4, r4, #1
   14740:	bcs	1474c <__assert_fail@plt+0x3338>
   14744:	mov	r0, r5
   14748:	pop	{r4, r5, r6, pc}
   1474c:	bl	1127c <__ctype_toupper_loc@plt>
   14750:	ldrb	r2, [r6, r4]
   14754:	ldr	r3, [r0]
   14758:	ldr	r3, [r3, r2, lsl #2]
   1475c:	strb	r3, [r5, r4]
   14760:	b	1473c <__assert_fail@plt+0x3328>
   14764:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14768:	sub	sp, sp, #1104	; 0x450
   1476c:	mov	fp, r3
   14770:	sub	sp, sp, #4
   14774:	mov	r8, r2
   14778:	mov	r5, r0
   1477c:	ldrb	r3, [sp, #1144]	; 0x478
   14780:	str	r1, [sp, #40]	; 0x28
   14784:	ldr	r4, [sp, #1152]	; 0x480
   14788:	str	r3, [sp, #60]	; 0x3c
   1478c:	bl	112e8 <__errno_location@plt>
   14790:	ldr	r3, [r0]
   14794:	str	r0, [sp, #36]	; 0x24
   14798:	str	r3, [sp, #56]	; 0x38
   1479c:	ldr	r3, [fp, #8]
   147a0:	str	r3, [sp, #44]	; 0x2c
   147a4:	ldr	r3, [fp, #40]	; 0x28
   147a8:	str	r3, [sp, #48]	; 0x30
   147ac:	ldr	r2, [sp, #48]	; 0x30
   147b0:	ldr	r3, [pc, #3872]	; 156d8 <__assert_fail@plt+0x42c4>
   147b4:	cmp	r2, #0
   147b8:	moveq	r2, r3
   147bc:	ldr	r3, [sp, #44]	; 0x2c
   147c0:	str	r2, [sp, #48]	; 0x30
   147c4:	cmp	r3, #12
   147c8:	subgt	r3, r3, #12
   147cc:	bgt	147dc <__assert_fail@plt+0x33c8>
   147d0:	ldr	r3, [sp, #44]	; 0x2c
   147d4:	cmp	r3, #0
   147d8:	moveq	r3, #12
   147dc:	str	r3, [sp, #44]	; 0x2c
   147e0:	mov	r3, #0
   147e4:	str	r3, [sp, #24]
   147e8:	ldrb	r3, [r8]
   147ec:	cmp	r3, #0
   147f0:	bne	14814 <__assert_fail@plt+0x3400>
   147f4:	ldr	r2, [sp, #40]	; 0x28
   147f8:	cmp	r5, #0
   147fc:	cmpne	r2, #0
   14800:	ldr	r2, [sp, #56]	; 0x38
   14804:	strbne	r3, [r5]
   14808:	ldr	r3, [sp, #36]	; 0x24
   1480c:	str	r2, [r3]
   14810:	b	155b8 <__assert_fail@plt+0x41a4>
   14814:	cmp	r3, #37	; 0x25
   14818:	beq	14b4c <__assert_fail@plt+0x3738>
   1481c:	ldr	r1, [sp, #24]
   14820:	bic	r3, r4, r4, asr #31
   14824:	ldr	r2, [sp, #40]	; 0x28
   14828:	cmp	r3, #1
   1482c:	movcs	r6, r3
   14830:	movcc	r6, #1
   14834:	sub	r2, r2, r1
   14838:	cmp	r2, r6
   1483c:	bhi	14848 <__assert_fail@plt+0x3434>
   14840:	mov	r3, #34	; 0x22
   14844:	b	155a8 <__assert_fail@plt+0x4194>
   14848:	cmp	r5, #0
   1484c:	beq	14878 <__assert_fail@plt+0x3464>
   14850:	cmp	r4, #1
   14854:	ble	14870 <__assert_fail@plt+0x345c>
   14858:	sub	r4, r3, #1
   1485c:	mov	r0, r5
   14860:	mov	r2, r4
   14864:	mov	r1, #32
   14868:	add	r5, r5, r4
   1486c:	bl	1130c <memset@plt>
   14870:	ldrb	r3, [r8]
   14874:	strb	r3, [r5], #1
   14878:	ldr	r3, [sp, #24]
   1487c:	add	r3, r3, r6
   14880:	str	r3, [sp, #24]
   14884:	add	r8, r8, #1
   14888:	mvn	r4, #0
   1488c:	b	147e8 <__assert_fail@plt+0x33d4>
   14890:	mov	r6, r3
   14894:	ldr	r2, [sp, #28]
   14898:	ldrb	r3, [r2, #1]!
   1489c:	cmp	r3, #45	; 0x2d
   148a0:	str	r2, [sp, #28]
   148a4:	beq	14890 <__assert_fail@plt+0x347c>
   148a8:	bhi	14b64 <__assert_fail@plt+0x3750>
   148ac:	cmp	r3, #35	; 0x23
   148b0:	moveq	r9, #1
   148b4:	beq	14894 <__assert_fail@plt+0x3480>
   148b8:	cmp	r3, #43	; 0x2b
   148bc:	beq	14890 <__assert_fail@plt+0x347c>
   148c0:	sub	r3, r3, #48	; 0x30
   148c4:	cmp	r3, #9
   148c8:	bhi	14914 <__assert_fail@plt+0x3500>
   148cc:	mov	r4, #0
   148d0:	mov	r3, #10
   148d4:	smull	r0, r1, r4, r3
   148d8:	cmp	r1, r0, asr #31
   148dc:	bne	148f8 <__assert_fail@plt+0x34e4>
   148e0:	ldr	r2, [sp, #28]
   148e4:	ldrb	r2, [r2]
   148e8:	sub	r2, r2, #48	; 0x30
   148ec:	adds	r2, r0, r2
   148f0:	movvc	r4, r2
   148f4:	bvc	148fc <__assert_fail@plt+0x34e8>
   148f8:	mvn	r4, #-2147483648	; 0x80000000
   148fc:	ldr	r2, [sp, #28]
   14900:	ldrb	r3, [r2, #1]!
   14904:	sub	r3, r3, #48	; 0x30
   14908:	str	r2, [sp, #28]
   1490c:	cmp	r3, #9
   14910:	bls	148d0 <__assert_fail@plt+0x34bc>
   14914:	ldr	r3, [sp, #28]
   14918:	ldrb	lr, [r3]
   1491c:	cmp	lr, #69	; 0x45
   14920:	beq	14930 <__assert_fail@plt+0x351c>
   14924:	cmp	lr, #79	; 0x4f
   14928:	movne	lr, #0
   1492c:	bne	1493c <__assert_fail@plt+0x3528>
   14930:	ldr	r3, [sp, #28]
   14934:	add	r3, r3, #1
   14938:	str	r3, [sp, #28]
   1493c:	ldr	r3, [sp, #28]
   14940:	ldrb	sl, [r3]
   14944:	mov	r7, sl
   14948:	cmp	sl, #122	; 0x7a
   1494c:	ldrls	pc, [pc, sl, lsl #2]
   14950:	b	14f18 <__assert_fail@plt+0x3b04>
   14954:	andeq	r5, r1, ip, lsl #21
   14958:	andeq	r4, r1, r8, lsl pc
   1495c:	andeq	r4, r1, r8, lsl pc
   14960:	andeq	r4, r1, r8, lsl pc
   14964:	andeq	r4, r1, r8, lsl pc
   14968:	andeq	r4, r1, r8, lsl pc
   1496c:	andeq	r4, r1, r8, lsl pc
   14970:	andeq	r4, r1, r8, lsl pc
   14974:	andeq	r4, r1, r8, lsl pc
   14978:	andeq	r4, r1, r8, lsl pc
   1497c:	andeq	r4, r1, r8, lsl pc
   14980:	andeq	r4, r1, r8, lsl pc
   14984:	andeq	r4, r1, r8, lsl pc
   14988:	andeq	r4, r1, r8, lsl pc
   1498c:	andeq	r4, r1, r8, lsl pc
   14990:	andeq	r4, r1, r8, lsl pc
   14994:	andeq	r4, r1, r8, lsl pc
   14998:	andeq	r4, r1, r8, lsl pc
   1499c:	andeq	r4, r1, r8, lsl pc
   149a0:	andeq	r4, r1, r8, lsl pc
   149a4:	andeq	r4, r1, r8, lsl pc
   149a8:	andeq	r4, r1, r8, lsl pc
   149ac:	andeq	r4, r1, r8, lsl pc
   149b0:	andeq	r4, r1, r8, lsl pc
   149b4:	andeq	r4, r1, r8, lsl pc
   149b8:	andeq	r4, r1, r8, lsl pc
   149bc:	andeq	r4, r1, r8, lsl pc
   149c0:	andeq	r4, r1, r8, lsl pc
   149c4:	andeq	r4, r1, r8, lsl pc
   149c8:	andeq	r4, r1, r8, lsl pc
   149cc:	andeq	r4, r1, r8, lsl pc
   149d0:	andeq	r4, r1, r8, lsl pc
   149d4:	andeq	r4, r1, r8, lsl pc
   149d8:	andeq	r4, r1, r8, lsl pc
   149dc:	andeq	r4, r1, r8, lsl pc
   149e0:	andeq	r4, r1, r8, lsl pc
   149e4:	andeq	r4, r1, r8, lsl pc
   149e8:	andeq	r4, r1, r8, lsl sp
   149ec:	andeq	r4, r1, r8, lsl pc
   149f0:	andeq	r4, r1, r8, lsl pc
   149f4:	andeq	r4, r1, r8, lsl pc
   149f8:	andeq	r4, r1, r8, lsl pc
   149fc:	andeq	r4, r1, r8, lsl pc
   14a00:	andeq	r4, r1, r8, lsl pc
   14a04:	andeq	r4, r1, r8, lsl pc
   14a08:	andeq	r4, r1, r8, lsl pc
   14a0c:	andeq	r4, r1, r8, lsl pc
   14a10:	andeq	r4, r1, r8, lsl pc
   14a14:	andeq	r4, r1, r8, lsl pc
   14a18:	andeq	r4, r1, r8, lsl pc
   14a1c:	andeq	r4, r1, r8, lsl pc
   14a20:	andeq	r4, r1, r8, lsl pc
   14a24:	andeq	r4, r1, r8, lsl pc
   14a28:	andeq	r4, r1, r8, lsl pc
   14a2c:	andeq	r4, r1, r8, lsl pc
   14a30:	andeq	r4, r1, r8, lsl pc
   14a34:	andeq	r4, r1, r8, lsl pc
   14a38:	andeq	r4, r1, r8, lsl pc
   14a3c:	andeq	r4, r1, r0, lsl #25
   14a40:	andeq	r4, r1, r8, lsl pc
   14a44:	andeq	r4, r1, r8, lsl pc
   14a48:	andeq	r4, r1, r8, lsl pc
   14a4c:	andeq	r4, r1, r8, lsl pc
   14a50:	andeq	r4, r1, r8, lsl pc
   14a54:	andeq	r4, r1, r8, lsl pc
   14a58:	andeq	r4, r1, ip, lsr #29
   14a5c:	andeq	r4, r1, ip, ror #29
   14a60:	ldrdeq	r4, [r1], -ip
   14a64:	andeq	r5, r1, ip, lsr r2
   14a68:	andeq	r4, r1, r8, lsl pc
   14a6c:	muleq	r1, r4, r2
   14a70:	strdeq	r5, [r1], -r0
   14a74:			; <UNDEFINED> instruction: 0x000152bc
   14a78:	andeq	r5, r1, ip, asr #5
   14a7c:	andeq	r4, r1, r8, lsl pc
   14a80:	andeq	r4, r1, r8, lsl pc
   14a84:	andeq	r4, r1, r8, lsl pc
   14a88:	andeq	r5, r1, r8, lsr #6
   14a8c:	andeq	r5, r1, r4, ror #6
   14a90:	andeq	r4, r1, r8, lsl pc
   14a94:	andeq	r5, r1, r4, lsl #10
   14a98:	andeq	r4, r1, r8, lsl pc
   14a9c:	andeq	r4, r1, r0, lsr #31
   14aa0:	andeq	r5, r1, r4, asr r5
   14aa4:	andeq	r4, r1, ip, ror fp
   14aa8:			; <UNDEFINED> instruction: 0x000156b8
   14aac:	strdeq	r5, [r1], -r0
   14ab0:	andeq	r5, r1, ip, lsr #17
   14ab4:	andeq	r5, r1, ip, lsl #12
   14ab8:	andeq	r5, r1, ip, ror #17
   14abc:	andeq	r5, r1, r8, asr #18
   14ac0:	andeq	r4, r1, r8, lsl pc
   14ac4:	andeq	r4, r1, r8, lsl pc
   14ac8:	andeq	r4, r1, r8, lsl pc
   14acc:	andeq	r4, r1, r8, lsl pc
   14ad0:	andeq	r4, r1, r8, lsl pc
   14ad4:	andeq	r4, r1, r8, lsl pc
   14ad8:			; <UNDEFINED> instruction: 0x00014db0
   14adc:	andeq	r4, r1, ip, asr #29
   14ae0:	andeq	r4, r1, ip, lsl #30
   14ae4:	andeq	r5, r1, r0, asr r2
   14ae8:	andeq	r5, r1, r4, ror #4
   14aec:	andeq	r4, r1, r8, lsl pc
   14af0:	strdeq	r5, [r1], -r0
   14af4:	andeq	r4, r1, ip, asr #29
   14af8:	andeq	r4, r1, r8, lsl pc
   14afc:	strdeq	r5, [r1], -ip
   14b00:	ldrdeq	r5, [r1], -ip
   14b04:	andeq	r5, r1, ip, ror #5
   14b08:	andeq	r5, r1, r8, lsr r3
   14b0c:	andeq	r5, r1, ip, lsl #9
   14b10:	andeq	r4, r1, r8, lsl pc
   14b14:	andeq	r5, r1, r4, lsr #10
   14b18:	andeq	r5, r1, ip, lsr #10
   14b1c:			; <UNDEFINED> instruction: 0x00014fbc
   14b20:	andeq	r5, r1, r4, ror #10
   14b24:	andeq	r5, r1, ip, lsl r6
   14b28:	muleq	r1, r4, r6
   14b2c:	andeq	r4, r1, r8, lsl pc
   14b30:	ldrdeq	r5, [r1], -ip
   14b34:	andeq	r5, r1, ip, lsr #4
   14b38:	andeq	r5, r1, ip, lsl r9
   14b3c:	andeq	r5, r1, r8, lsl sl
   14b40:	mov	r3, #1
   14b44:	str	r3, [sp, #32]
   14b48:	b	14894 <__assert_fail@plt+0x3480>
   14b4c:	ldr	r3, [sp, #60]	; 0x3c
   14b50:	mov	r9, #0
   14b54:	mov	r6, r9
   14b58:	str	r8, [sp, #28]
   14b5c:	str	r3, [sp, #32]
   14b60:	b	14894 <__assert_fail@plt+0x3480>
   14b64:	cmp	r3, #94	; 0x5e
   14b68:	beq	14b40 <__assert_fail@plt+0x372c>
   14b6c:	cmp	r3, #95	; 0x5f
   14b70:	beq	14890 <__assert_fail@plt+0x347c>
   14b74:	cmp	r3, #48	; 0x30
   14b78:	b	148bc <__assert_fail@plt+0x34a8>
   14b7c:	ldr	r8, [pc, #2904]	; 156dc <__assert_fail@plt+0x42c8>
   14b80:	mvn	r7, #0
   14b84:	mov	r2, r8
   14b88:	mvn	r1, #0
   14b8c:	strd	r6, [sp, #4]
   14b90:	ldr	r3, [sp, #1164]	; 0x48c
   14b94:	mov	r0, #0
   14b98:	str	r3, [sp, #20]
   14b9c:	ldr	r3, [sp, #1160]	; 0x488
   14ba0:	str	r3, [sp, #16]
   14ba4:	ldr	r3, [sp, #1156]	; 0x484
   14ba8:	str	r3, [sp, #12]
   14bac:	ldr	r3, [sp, #32]
   14bb0:	str	r3, [sp]
   14bb4:	mov	r3, fp
   14bb8:	bl	14764 <__assert_fail@plt+0x3350>
   14bbc:	mvn	r3, r4
   14bc0:	cmp	r6, #45	; 0x2d
   14bc4:	ldr	r2, [sp, #24]
   14bc8:	lsr	r3, r3, #31
   14bcc:	moveq	r3, #0
   14bd0:	mov	r9, r0
   14bd4:	cmp	r3, #0
   14bd8:	ldr	r3, [sp, #40]	; 0x28
   14bdc:	moveq	r4, #0
   14be0:	cmp	r4, r0
   14be4:	movcs	sl, r4
   14be8:	movcc	sl, r0
   14bec:	sub	r3, r3, r2
   14bf0:	cmp	r3, sl
   14bf4:	str	r3, [sp, #52]	; 0x34
   14bf8:	bls	14840 <__assert_fail@plt+0x342c>
   14bfc:	cmp	r5, #0
   14c00:	beq	14c6c <__assert_fail@plt+0x3858>
   14c04:	cmp	r4, r0
   14c08:	movls	r4, r5
   14c0c:	bls	14c30 <__assert_fail@plt+0x381c>
   14c10:	cmp	r6, #43	; 0x2b
   14c14:	cmpne	r6, #48	; 0x30
   14c18:	sub	r2, r4, r0
   14c1c:	moveq	r1, #48	; 0x30
   14c20:	movne	r1, #32
   14c24:	mov	r0, r5
   14c28:	add	r4, r5, r2
   14c2c:	bl	1130c <memset@plt>
   14c30:	mov	r2, r8
   14c34:	mov	r0, r4
   14c38:	strd	r6, [sp, #4]
   14c3c:	ldr	r3, [sp, #1164]	; 0x48c
   14c40:	add	r5, r4, r9
   14c44:	ldr	r1, [sp, #52]	; 0x34
   14c48:	str	r3, [sp, #20]
   14c4c:	ldr	r3, [sp, #1160]	; 0x488
   14c50:	str	r3, [sp, #16]
   14c54:	ldr	r3, [sp, #1156]	; 0x484
   14c58:	str	r3, [sp, #12]
   14c5c:	ldr	r3, [sp, #32]
   14c60:	str	r3, [sp]
   14c64:	mov	r3, fp
   14c68:	bl	14764 <__assert_fail@plt+0x3350>
   14c6c:	ldr	r3, [sp, #24]
   14c70:	add	r3, r3, sl
   14c74:	str	r3, [sp, #24]
   14c78:	ldr	r8, [sp, #28]
   14c7c:	b	14884 <__assert_fail@plt+0x3470>
   14c80:	ldr	r3, [sp, #28]
   14c84:	add	r3, r3, #1
   14c88:	ldr	r2, [sp, #28]
   14c8c:	mov	r1, r3
   14c90:	sub	sl, r3, r2
   14c94:	ldrb	r2, [r3], #1
   14c98:	cmp	r2, #58	; 0x3a
   14c9c:	beq	14c88 <__assert_fail@plt+0x3874>
   14ca0:	cmp	r2, #122	; 0x7a
   14ca4:	streq	r1, [sp, #28]
   14ca8:	bne	14f18 <__assert_fail@plt+0x3b04>
   14cac:	ldr	r3, [fp, #32]
   14cb0:	cmp	r3, #0
   14cb4:	blt	14c78 <__assert_fail@plt+0x3864>
   14cb8:	ldr	r9, [fp, #36]	; 0x24
   14cbc:	cmp	r9, #0
   14cc0:	movlt	ip, #1
   14cc4:	blt	14ce0 <__assert_fail@plt+0x38cc>
   14cc8:	ldreq	r3, [sp, #48]	; 0x30
   14ccc:	movne	ip, #0
   14cd0:	ldrbeq	ip, [r3]
   14cd4:	subeq	ip, ip, #45	; 0x2d
   14cd8:	clzeq	ip, ip
   14cdc:	lsreq	ip, ip, #5
   14ce0:	mov	r1, #60	; 0x3c
   14ce4:	mov	r3, #3600	; 0xe10
   14ce8:	sdiv	r2, r9, r1
   14cec:	sdiv	r3, r9, r3
   14cf0:	sdiv	r0, r2, r1
   14cf4:	mls	r0, r1, r0, r2
   14cf8:	mls	r2, r1, r2, r9
   14cfc:	cmp	sl, #3
   14d00:	ldrls	pc, [pc, sl, lsl #2]
   14d04:	b	14f18 <__assert_fail@plt+0x3b04>
   14d08:	andeq	r5, r1, r0, lsr #20
   14d0c:	andeq	r5, r1, r8, lsr sl
   14d10:	andeq	r5, r1, r0, asr sl
   14d14:	andeq	r5, r1, r4, ror sl
   14d18:	ldr	r3, [sp, #28]
   14d1c:	sub	r3, r3, #1
   14d20:	cmp	r8, r3
   14d24:	bne	15a8c <__assert_fail@plt+0x4678>
   14d28:	mvn	r3, r4
   14d2c:	cmp	r6, #45	; 0x2d
   14d30:	ldr	r2, [sp, #24]
   14d34:	lsr	r3, r3, #31
   14d38:	moveq	r3, #0
   14d3c:	cmp	r3, #0
   14d40:	ldr	r3, [sp, #40]	; 0x28
   14d44:	moveq	r4, #0
   14d48:	cmp	r4, #1
   14d4c:	movcs	r7, r4
   14d50:	movcc	r7, #1
   14d54:	sub	r3, r3, r2
   14d58:	cmp	r3, r7
   14d5c:	bls	14840 <__assert_fail@plt+0x342c>
   14d60:	cmp	r5, #0
   14d64:	beq	14da4 <__assert_fail@plt+0x3990>
   14d68:	cmp	r4, #1
   14d6c:	movle	r8, r5
   14d70:	ble	14d94 <__assert_fail@plt+0x3980>
   14d74:	cmp	r6, #43	; 0x2b
   14d78:	cmpne	r6, #48	; 0x30
   14d7c:	sub	r2, r4, #1
   14d80:	moveq	r1, #48	; 0x30
   14d84:	movne	r1, #32
   14d88:	mov	r0, r5
   14d8c:	add	r8, r5, r2
   14d90:	bl	1130c <memset@plt>
   14d94:	ldr	r3, [sp, #28]
   14d98:	mov	r5, r8
   14d9c:	ldrb	r3, [r3]
   14da0:	strb	r3, [r5], #1
   14da4:	ldr	r3, [sp, #24]
   14da8:	add	r3, r3, r7
   14dac:	b	14c74 <__assert_fail@plt+0x3860>
   14db0:	cmp	lr, #0
   14db4:	bne	14f18 <__assert_fail@plt+0x3b04>
   14db8:	cmp	r9, #0
   14dbc:	movne	r7, #97	; 0x61
   14dc0:	strne	r9, [sp, #32]
   14dc4:	bne	14ee4 <__assert_fail@plt+0x3ad0>
   14dc8:	mov	r7, #97	; 0x61
   14dcc:	movw	r3, #9504	; 0x2520
   14dd0:	cmp	lr, #0
   14dd4:	mov	r2, #0
   14dd8:	mov	r1, #1024	; 0x400
   14ddc:	strh	r3, [sp, #64]	; 0x40
   14de0:	addne	r3, sp, #67	; 0x43
   14de4:	addeq	r3, sp, #66	; 0x42
   14de8:	strbne	lr, [sp, #66]	; 0x42
   14dec:	add	r0, sp, #80	; 0x50
   14df0:	strb	r7, [r3]
   14df4:	strb	r2, [r3, #1]
   14df8:	mov	r3, fp
   14dfc:	add	r2, sp, #64	; 0x40
   14e00:	bl	11258 <strftime@plt>
   14e04:	cmp	r0, #0
   14e08:	beq	14c78 <__assert_fail@plt+0x3864>
   14e0c:	subs	r3, r6, #45	; 0x2d
   14e10:	ldr	r2, [sp, #24]
   14e14:	sub	r7, r0, #1
   14e18:	movne	r3, #1
   14e1c:	cmp	r4, #0
   14e20:	movlt	r3, #0
   14e24:	cmp	r3, #0
   14e28:	ldr	r3, [sp, #40]	; 0x28
   14e2c:	moveq	r4, #0
   14e30:	cmp	r4, r7
   14e34:	movcs	r8, r4
   14e38:	movcc	r8, r7
   14e3c:	sub	r3, r3, r2
   14e40:	cmp	r3, r8
   14e44:	bls	14840 <__assert_fail@plt+0x342c>
   14e48:	cmp	r5, #0
   14e4c:	beq	159ec <__assert_fail@plt+0x45d8>
   14e50:	cmp	r4, r7
   14e54:	movls	sl, r5
   14e58:	bls	14e7c <__assert_fail@plt+0x3a68>
   14e5c:	cmp	r6, #43	; 0x2b
   14e60:	cmpne	r6, #48	; 0x30
   14e64:	sub	r2, r4, r7
   14e68:	moveq	r1, #48	; 0x30
   14e6c:	movne	r1, #32
   14e70:	mov	r0, r5
   14e74:	add	sl, r5, r2
   14e78:	bl	1130c <memset@plt>
   14e7c:	cmp	r9, #0
   14e80:	movne	r2, r7
   14e84:	addne	r1, sp, #81	; 0x51
   14e88:	bne	159e0 <__assert_fail@plt+0x45cc>
   14e8c:	ldr	r3, [sp, #32]
   14e90:	mov	r2, r7
   14e94:	add	r1, sp, #81	; 0x51
   14e98:	mov	r0, sl
   14e9c:	cmp	r3, #0
   14ea0:	beq	15a10 <__assert_fail@plt+0x45fc>
   14ea4:	bl	1472c <__assert_fail@plt+0x3318>
   14ea8:	b	159e8 <__assert_fail@plt+0x45d4>
   14eac:	cmp	lr, #0
   14eb0:	bne	14f18 <__assert_fail@plt+0x3b04>
   14eb4:	cmp	r9, #0
   14eb8:	movne	r7, #65	; 0x41
   14ebc:	strne	r9, [sp, #32]
   14ec0:	bne	14ee4 <__assert_fail@plt+0x3ad0>
   14ec4:	mov	r7, #65	; 0x41
   14ec8:	b	14dcc <__assert_fail@plt+0x39b8>
   14ecc:	ldr	r3, [sp, #32]
   14ed0:	cmp	r9, #0
   14ed4:	movne	r3, r9
   14ed8:	cmp	lr, #69	; 0x45
   14edc:	str	r3, [sp, #32]
   14ee0:	beq	14f18 <__assert_fail@plt+0x3b04>
   14ee4:	mov	r9, #0
   14ee8:	b	14dcc <__assert_fail@plt+0x39b8>
   14eec:	cmp	lr, #69	; 0x45
   14ef0:	beq	14f18 <__assert_fail@plt+0x3b04>
   14ef4:	cmp	r9, #0
   14ef8:	movne	r7, #66	; 0x42
   14efc:	strne	r9, [sp, #32]
   14f00:	bne	14ee4 <__assert_fail@plt+0x3ad0>
   14f04:	mov	r7, #66	; 0x42
   14f08:	b	14dcc <__assert_fail@plt+0x39b8>
   14f0c:	cmp	lr, #79	; 0x4f
   14f10:	movne	r7, #99	; 0x63
   14f14:	bne	14ee4 <__assert_fail@plt+0x3ad0>
   14f18:	ldrd	r2, [sp, #24]
   14f1c:	sub	sl, r3, r8
   14f20:	subs	r3, r6, #45	; 0x2d
   14f24:	movne	r3, #1
   14f28:	cmp	r4, #0
   14f2c:	movlt	r3, #0
   14f30:	add	sl, sl, #1
   14f34:	cmp	r3, #0
   14f38:	ldr	r3, [sp, #40]	; 0x28
   14f3c:	moveq	r4, #0
   14f40:	cmp	r4, sl
   14f44:	movcs	r7, r4
   14f48:	movcc	r7, sl
   14f4c:	sub	r3, r3, r2
   14f50:	cmp	r3, r7
   14f54:	bls	14840 <__assert_fail@plt+0x342c>
   14f58:	cmp	r5, #0
   14f5c:	beq	14da4 <__assert_fail@plt+0x3990>
   14f60:	cmp	r4, sl
   14f64:	movls	r9, r5
   14f68:	bls	14f8c <__assert_fail@plt+0x3b78>
   14f6c:	cmp	r6, #43	; 0x2b
   14f70:	cmpne	r6, #48	; 0x30
   14f74:	sub	r2, r4, sl
   14f78:	moveq	r1, #48	; 0x30
   14f7c:	movne	r1, #32
   14f80:	mov	r0, r5
   14f84:	add	r9, r5, r2
   14f88:	bl	1130c <memset@plt>
   14f8c:	mov	r2, sl
   14f90:	mov	r1, r8
   14f94:	ldr	r3, [sp, #32]
   14f98:	mov	r0, r9
   14f9c:	b	15218 <__assert_fail@plt+0x3e04>
   14fa0:	mvn	r7, #0
   14fa4:	ldr	r8, [pc, #1844]	; 156e0 <__assert_fail@plt+0x42cc>
   14fa8:	b	14b84 <__assert_fail@plt+0x3770>
   14fac:	mov	r7, #4
   14fb0:	ldr	r8, [pc, #1836]	; 156e4 <__assert_fail@plt+0x42d0>
   14fb4:	mov	r6, #43	; 0x2b
   14fb8:	b	14b84 <__assert_fail@plt+0x3770>
   14fbc:	mov	r7, #114	; 0x72
   14fc0:	b	14ee4 <__assert_fail@plt+0x3ad0>
   14fc4:	mov	r7, #67	; 0x43
   14fc8:	b	14ee4 <__assert_fail@plt+0x3ad0>
   14fcc:	mov	r7, #89	; 0x59
   14fd0:	b	14ee4 <__assert_fail@plt+0x3ad0>
   14fd4:	mov	r7, #121	; 0x79
   14fd8:	b	14ee4 <__assert_fail@plt+0x3ad0>
   14fdc:	cmp	lr, #69	; 0x45
   14fe0:	beq	14fc4 <__assert_fail@plt+0x3bb0>
   14fe4:	ldr	r3, [pc, #1792]	; 156ec <__assert_fail@plt+0x42d8>
   14fe8:	movw	r1, #1899	; 0x76b
   14fec:	ldr	r2, [fp, #20]
   14ff0:	cmp	r2, r3
   14ff4:	add	r3, r2, #1888	; 0x760
   14ff8:	add	r3, r3, #12
   14ffc:	movge	ip, #0
   15000:	movlt	ip, #1
   15004:	cmp	r3, r1
   15008:	mvnls	r3, #98	; 0x62
   1500c:	movhi	r3, #0
   15010:	add	r3, r3, r2
   15014:	mov	r2, #100	; 0x64
   15018:	sdiv	r3, r3, r2
   1501c:	add	r3, r3, #19
   15020:	mov	r1, #2
   15024:	ldr	r2, [sp, #1148]	; 0x47c
   15028:	cmp	r6, #0
   1502c:	moveq	r6, r2
   15030:	cmp	r6, #43	; 0x2b
   15034:	movne	r2, #0
   15038:	bne	1505c <__assert_fail@plt+0x3c48>
   1503c:	cmp	r1, #2
   15040:	movw	r2, #9999	; 0x270f
   15044:	moveq	r2, #99	; 0x63
   15048:	cmp	r3, r2
   1504c:	movls	r2, #0
   15050:	movhi	r2, #1
   15054:	cmp	r1, r4
   15058:	orrlt	r2, r2, #1
   1505c:	mov	r0, #0
   15060:	eor	r8, ip, #1
   15064:	cmp	lr, #79	; 0x4f
   15068:	movne	r8, #0
   1506c:	andeq	r8, r8, #1
   15070:	cmp	r8, #0
   15074:	bne	14ee4 <__assert_fail@plt+0x3ad0>
   15078:	cmp	ip, #0
   1507c:	add	r8, sp, #78	; 0x4e
   15080:	rsbne	r3, r3, #0
   15084:	mov	sl, #58	; 0x3a
   15088:	mov	r7, #10
   1508c:	tst	r0, #1
   15090:	subne	lr, r8, #1
   15094:	moveq	lr, r8
   15098:	udiv	r9, r3, r7
   1509c:	strbne	sl, [r8, #-1]
   150a0:	sub	r8, lr, #1
   150a4:	asrs	r0, r0, #1
   150a8:	mls	r7, r7, r9, r3
   150ac:	add	r7, r7, #48	; 0x30
   150b0:	strb	r7, [lr, #-1]
   150b4:	movne	lr, #1
   150b8:	moveq	lr, #0
   150bc:	cmp	r3, #9
   150c0:	movls	r3, lr
   150c4:	orrhi	r3, lr, #1
   150c8:	cmp	r3, #0
   150cc:	bne	1528c <__assert_fail@plt+0x3e78>
   150d0:	cmp	r6, #0
   150d4:	moveq	r6, #48	; 0x30
   150d8:	cmp	r4, #0
   150dc:	movlt	r4, r1
   150e0:	cmp	ip, #0
   150e4:	movne	sl, #45	; 0x2d
   150e8:	bne	150f8 <__assert_fail@plt+0x3ce4>
   150ec:	cmp	r2, #0
   150f0:	movne	sl, #43	; 0x2b
   150f4:	moveq	sl, #0
   150f8:	cmp	sl, #0
   150fc:	moveq	r7, r4
   15100:	subne	r7, r4, #1
   15104:	add	r9, sp, #78	; 0x4e
   15108:	subs	r3, r6, #45	; 0x2d
   1510c:	sub	r9, r9, r8
   15110:	movne	r3, #1
   15114:	sub	r7, r7, r9
   15118:	str	r3, [sp, #52]	; 0x34
   1511c:	cmp	r7, #0
   15120:	movle	r3, #0
   15124:	andgt	r3, r3, #1
   15128:	cmp	r3, #0
   1512c:	moveq	r7, #0
   15130:	cmp	sl, #0
   15134:	beq	15198 <__assert_fail@plt+0x3d84>
   15138:	cmp	r6, #95	; 0x5f
   1513c:	bne	1516c <__assert_fail@plt+0x3d58>
   15140:	cmp	r5, #0
   15144:	beq	1515c <__assert_fail@plt+0x3d48>
   15148:	mov	r0, r5
   1514c:	mov	r2, r7
   15150:	mov	r1, #32
   15154:	add	r5, r5, r7
   15158:	bl	1130c <memset@plt>
   1515c:	ldr	r3, [sp, #24]
   15160:	sub	r4, r4, r7
   15164:	add	r3, r3, r7
   15168:	str	r3, [sp, #24]
   1516c:	ldr	r2, [sp, #24]
   15170:	ldr	r3, [sp, #40]	; 0x28
   15174:	sub	r3, r3, r2
   15178:	cmp	r3, #1
   1517c:	bls	14840 <__assert_fail@plt+0x342c>
   15180:	ldr	r3, [sp, #24]
   15184:	cmp	r5, #0
   15188:	sub	r4, r4, #1
   1518c:	strbne	sl, [r5], #1
   15190:	add	r3, r3, #1
   15194:	str	r3, [sp, #24]
   15198:	subs	sl, r6, #45	; 0x2d
   1519c:	ldr	r2, [sp, #24]
   151a0:	movne	sl, #1
   151a4:	ldr	r3, [sp, #40]	; 0x28
   151a8:	cmp	r4, #0
   151ac:	movlt	sl, #0
   151b0:	andge	sl, sl, #1
   151b4:	cmp	sl, #0
   151b8:	moveq	r4, #0
   151bc:	cmp	r4, r9
   151c0:	movcs	r7, r4
   151c4:	movcc	r7, r9
   151c8:	sub	r3, r3, r2
   151cc:	cmp	r3, r7
   151d0:	bls	14840 <__assert_fail@plt+0x342c>
   151d4:	cmp	r5, #0
   151d8:	beq	14da4 <__assert_fail@plt+0x3990>
   151dc:	cmp	r4, r9
   151e0:	movls	sl, r5
   151e4:	bls	15208 <__assert_fail@plt+0x3df4>
   151e8:	cmp	r6, #43	; 0x2b
   151ec:	cmpne	r6, #48	; 0x30
   151f0:	sub	r2, r4, r9
   151f4:	moveq	r1, #48	; 0x30
   151f8:	movne	r1, #32
   151fc:	mov	r0, r5
   15200:	add	sl, r5, r2
   15204:	bl	1130c <memset@plt>
   15208:	ldr	r3, [sp, #32]
   1520c:	mov	r2, r9
   15210:	mov	r1, r8
   15214:	mov	r0, sl
   15218:	cmp	r3, #0
   1521c:	beq	15a9c <__assert_fail@plt+0x4688>
   15220:	bl	1472c <__assert_fail@plt+0x3318>
   15224:	add	r5, r9, sl
   15228:	b	14da4 <__assert_fail@plt+0x3990>
   1522c:	cmp	lr, #79	; 0x4f
   15230:	movne	r7, #120	; 0x78
   15234:	bne	14ee4 <__assert_fail@plt+0x3ad0>
   15238:	b	14f18 <__assert_fail@plt+0x3b04>
   1523c:	cmp	lr, #0
   15240:	mvneq	r7, #0
   15244:	ldreq	r8, [pc, #1180]	; 156e8 <__assert_fail@plt+0x42d4>
   15248:	beq	14b84 <__assert_fail@plt+0x3770>
   1524c:	b	14f18 <__assert_fail@plt+0x3b04>
   15250:	cmp	lr, #69	; 0x45
   15254:	ldrne	r3, [fp, #12]
   15258:	beq	14f18 <__assert_fail@plt+0x3b04>
   1525c:	mov	r1, #2
   15260:	b	1527c <__assert_fail@plt+0x3e68>
   15264:	cmp	lr, #69	; 0x45
   15268:	ldrne	r3, [fp, #12]
   1526c:	beq	14f18 <__assert_fail@plt+0x3b04>
   15270:	cmp	r6, #0
   15274:	mov	r1, #2
   15278:	moveq	r6, #95	; 0x5f
   1527c:	mov	r0, #0
   15280:	lsr	ip, r3, #31
   15284:	mov	r2, r0
   15288:	b	15060 <__assert_fail@plt+0x3c4c>
   1528c:	mov	r3, r9
   15290:	b	15088 <__assert_fail@plt+0x3c74>
   15294:	cmp	lr, #0
   15298:	bne	14f18 <__assert_fail@plt+0x3b04>
   1529c:	clz	r3, r6
   152a0:	lsr	r3, r3, #5
   152a4:	ands	r3, r3, r4, lsr #31
   152a8:	bne	14fac <__assert_fail@plt+0x3b98>
   152ac:	sub	r7, r4, #6
   152b0:	ldr	r8, [pc, #1068]	; 156e4 <__assert_fail@plt+0x42d0>
   152b4:	bic	r7, r7, r7, asr #31
   152b8:	b	14b84 <__assert_fail@plt+0x3770>
   152bc:	cmp	lr, #69	; 0x45
   152c0:	ldrne	r3, [fp, #8]
   152c4:	bne	1525c <__assert_fail@plt+0x3e48>
   152c8:	b	14f18 <__assert_fail@plt+0x3b04>
   152cc:	cmp	lr, #69	; 0x45
   152d0:	ldrne	r3, [sp, #44]	; 0x2c
   152d4:	bne	1525c <__assert_fail@plt+0x3e48>
   152d8:	b	14f18 <__assert_fail@plt+0x3b04>
   152dc:	cmp	lr, #69	; 0x45
   152e0:	ldrne	r3, [fp, #8]
   152e4:	bne	15270 <__assert_fail@plt+0x3e5c>
   152e8:	b	14f18 <__assert_fail@plt+0x3b04>
   152ec:	cmp	lr, #69	; 0x45
   152f0:	ldrne	r3, [sp, #44]	; 0x2c
   152f4:	bne	15270 <__assert_fail@plt+0x3e5c>
   152f8:	b	14f18 <__assert_fail@plt+0x3b04>
   152fc:	cmp	lr, #69	; 0x45
   15300:	beq	14f18 <__assert_fail@plt+0x3b04>
   15304:	ldr	r3, [fp, #28]
   15308:	mov	r0, #0
   1530c:	mov	r2, r0
   15310:	cmn	r3, #1
   15314:	add	r3, r3, #1
   15318:	movge	ip, #0
   1531c:	movlt	ip, #1
   15320:	mov	r1, #3
   15324:	b	15060 <__assert_fail@plt+0x3c4c>
   15328:	cmp	lr, #69	; 0x45
   1532c:	ldrne	r3, [fp, #4]
   15330:	bne	1525c <__assert_fail@plt+0x3e48>
   15334:	b	14f18 <__assert_fail@plt+0x3b04>
   15338:	cmp	lr, #69	; 0x45
   1533c:	beq	14f18 <__assert_fail@plt+0x3b04>
   15340:	ldr	r3, [fp, #16]
   15344:	mov	r0, #0
   15348:	mov	r1, #2
   1534c:	mov	r2, r0
   15350:	cmn	r3, #1
   15354:	add	r3, r3, #1
   15358:	movge	ip, #0
   1535c:	movlt	ip, #1
   15360:	b	15060 <__assert_fail@plt+0x3c4c>
   15364:	cmp	lr, #69	; 0x45
   15368:	beq	14f18 <__assert_fail@plt+0x3b04>
   1536c:	ldr	r3, [sp, #1164]	; 0x48c
   15370:	cmp	r4, #0
   15374:	mov	r8, #9
   15378:	movle	r4, #9
   1537c:	cmp	r8, r4
   15380:	bgt	153ac <__assert_fail@plt+0x3f98>
   15384:	cmp	r8, #1
   15388:	ble	153a0 <__assert_fail@plt+0x3f8c>
   1538c:	mov	r1, #10
   15390:	sdiv	r2, r3, r1
   15394:	mls	r2, r1, r2, r3
   15398:	cmp	r2, #0
   1539c:	beq	153ac <__assert_fail@plt+0x3f98>
   153a0:	mov	r2, r8
   153a4:	add	r0, sp, #64	; 0x40
   153a8:	b	153d8 <__assert_fail@plt+0x3fc4>
   153ac:	mov	r2, #10
   153b0:	sub	r8, r8, #1
   153b4:	sdiv	r3, r3, r2
   153b8:	b	1537c <__assert_fail@plt+0x3f68>
   153bc:	mov	ip, #10
   153c0:	sub	r2, r2, #1
   153c4:	sdiv	r1, r3, ip
   153c8:	mls	r3, ip, r1, r3
   153cc:	add	r3, r3, #48	; 0x30
   153d0:	strb	r3, [r2, r0]
   153d4:	mov	r3, r1
   153d8:	cmp	r2, #0
   153dc:	bgt	153bc <__assert_fail@plt+0x3fa8>
   153e0:	ldr	r2, [sp, #24]
   153e4:	cmp	r6, #0
   153e8:	moveq	r6, #48	; 0x30
   153ec:	ldr	r3, [sp, #40]	; 0x28
   153f0:	sub	r3, r3, r2
   153f4:	cmp	r3, r8
   153f8:	bls	14840 <__assert_fail@plt+0x342c>
   153fc:	cmp	r5, #0
   15400:	beq	15424 <__assert_fail@plt+0x4010>
   15404:	ldr	r3, [sp, #32]
   15408:	mov	r2, r8
   1540c:	add	r1, sp, #64	; 0x40
   15410:	mov	r0, r5
   15414:	cmp	r3, #0
   15418:	beq	15484 <__assert_fail@plt+0x4070>
   1541c:	bl	1472c <__assert_fail@plt+0x3318>
   15420:	add	r5, r5, r8
   15424:	ldr	r3, [sp, #24]
   15428:	cmp	r6, #45	; 0x2d
   1542c:	subne	r4, r4, r8
   15430:	moveq	r4, #0
   15434:	add	r7, r3, r8
   15438:	ldr	r3, [sp, #40]	; 0x28
   1543c:	sub	r3, r3, r7
   15440:	cmp	r3, r4
   15444:	bls	14840 <__assert_fail@plt+0x342c>
   15448:	cmp	r5, #0
   1544c:	beq	1547c <__assert_fail@plt+0x4068>
   15450:	cmp	r4, #0
   15454:	beq	1547c <__assert_fail@plt+0x4068>
   15458:	cmp	r6, #43	; 0x2b
   1545c:	cmpne	r6, #48	; 0x30
   15460:	add	r8, r5, r4
   15464:	mov	r0, r5
   15468:	mov	r2, r4
   1546c:	moveq	r1, #48	; 0x30
   15470:	movne	r1, #32
   15474:	mov	r5, r8
   15478:	bl	1130c <memset@plt>
   1547c:	add	r3, r4, r7
   15480:	b	14c74 <__assert_fail@plt+0x3860>
   15484:	bl	11150 <memcpy@plt>
   15488:	b	15420 <__assert_fail@plt+0x400c>
   1548c:	subs	r3, r6, #45	; 0x2d
   15490:	ldr	r2, [sp, #24]
   15494:	movne	r3, #1
   15498:	cmp	r4, #0
   1549c:	movlt	r3, #0
   154a0:	cmp	r3, #0
   154a4:	ldr	r3, [sp, #40]	; 0x28
   154a8:	moveq	r4, #0
   154ac:	cmp	r4, #1
   154b0:	movcs	r7, r4
   154b4:	movcc	r7, #1
   154b8:	sub	r3, r3, r2
   154bc:	cmp	r3, r7
   154c0:	bls	14840 <__assert_fail@plt+0x342c>
   154c4:	cmp	r5, #0
   154c8:	beq	14da4 <__assert_fail@plt+0x3990>
   154cc:	cmp	r4, #1
   154d0:	movle	r8, r5
   154d4:	ble	154f8 <__assert_fail@plt+0x40e4>
   154d8:	cmp	r6, #43	; 0x2b
   154dc:	cmpne	r6, #48	; 0x30
   154e0:	sub	r2, r4, #1
   154e4:	moveq	r1, #48	; 0x30
   154e8:	movne	r1, #32
   154ec:	mov	r0, r5
   154f0:	add	r8, r5, r2
   154f4:	bl	1130c <memset@plt>
   154f8:	mov	r5, r8
   154fc:	mov	r3, #10
   15500:	b	14da0 <__assert_fail@plt+0x398c>
   15504:	mov	r3, #1
   15508:	cmp	r9, #0
   1550c:	movne	r3, #0
   15510:	movne	r7, #112	; 0x70
   15514:	strne	r3, [sp, #32]
   15518:	moveq	r9, r3
   1551c:	moveq	r7, #112	; 0x70
   15520:	b	14dcc <__assert_fail@plt+0x39b8>
   15524:	mov	r3, #0
   15528:	b	15508 <__assert_fail@plt+0x40f4>
   1552c:	ldr	r2, [fp, #16]
   15530:	mov	r3, #11
   15534:	mov	r0, #0
   15538:	mov	ip, r0
   1553c:	mov	r1, #1
   15540:	mul	r3, r3, r2
   15544:	mov	r2, r0
   15548:	asr	r3, r3, #5
   1554c:	add	r3, r3, #1
   15550:	b	15060 <__assert_fail@plt+0x3c4c>
   15554:	cmp	lr, #69	; 0x45
   15558:	ldrne	r3, [fp]
   1555c:	bne	1525c <__assert_fail@plt+0x3e48>
   15560:	b	14f18 <__assert_fail@plt+0x3b04>
   15564:	mov	lr, fp
   15568:	add	ip, sp, #80	; 0x50
   1556c:	ldm	lr!, {r0, r1, r2, r3}
   15570:	stmia	ip!, {r0, r1, r2, r3}
   15574:	ldm	lr!, {r0, r1, r2, r3}
   15578:	stmia	ip!, {r0, r1, r2, r3}
   1557c:	mvn	r3, #0
   15580:	ldm	lr, {r0, r1, r2}
   15584:	str	r3, [sp, #108]	; 0x6c
   15588:	stm	ip, {r0, r1, r2}
   1558c:	add	r1, sp, #80	; 0x50
   15590:	ldr	r0, [sp, #1160]	; 0x488
   15594:	bl	174cc <__assert_fail@plt+0x60b8>
   15598:	ldr	r3, [sp, #108]	; 0x6c
   1559c:	cmp	r3, #0
   155a0:	bge	155c8 <__assert_fail@plt+0x41b4>
   155a4:	mov	r3, #75	; 0x4b
   155a8:	ldr	r2, [sp, #36]	; 0x24
   155ac:	str	r3, [r2]
   155b0:	mov	r3, #0
   155b4:	str	r3, [sp, #24]
   155b8:	ldr	r0, [sp, #24]
   155bc:	add	sp, sp, #1104	; 0x450
   155c0:	add	sp, sp, #4
   155c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155c8:	lsr	ip, r0, #31
   155cc:	mov	r1, r0
   155d0:	add	r8, sp, #78	; 0x4e
   155d4:	mov	r3, #10
   155d8:	cmp	r0, #0
   155dc:	sdiv	r2, r1, r3
   155e0:	mls	r3, r3, r2, r1
   155e4:	mov	r1, r2
   155e8:	uxtb	r3, r3
   155ec:	rsblt	r3, r3, #48	; 0x30
   155f0:	addge	r3, r3, #48	; 0x30
   155f4:	uxtb	r3, r3
   155f8:	cmp	r2, #0
   155fc:	strb	r3, [r8, #-1]!
   15600:	bne	155d4 <__assert_fail@plt+0x41c0>
   15604:	mov	r1, #1
   15608:	b	150d0 <__assert_fail@plt+0x3cbc>
   1560c:	cmp	lr, #79	; 0x4f
   15610:	movne	r7, #88	; 0x58
   15614:	bne	14ee4 <__assert_fail@plt+0x3ad0>
   15618:	b	14f18 <__assert_fail@plt+0x3b04>
   1561c:	mvn	r3, r4
   15620:	cmp	r6, #45	; 0x2d
   15624:	ldr	r2, [sp, #24]
   15628:	lsr	r3, r3, #31
   1562c:	moveq	r3, #0
   15630:	cmp	r3, #0
   15634:	ldr	r3, [sp, #40]	; 0x28
   15638:	moveq	r4, #0
   1563c:	cmp	r4, #1
   15640:	movcs	r7, r4
   15644:	movcc	r7, #1
   15648:	sub	r3, r3, r2
   1564c:	cmp	r3, r7
   15650:	bls	14840 <__assert_fail@plt+0x342c>
   15654:	cmp	r5, #0
   15658:	beq	14da4 <__assert_fail@plt+0x3990>
   1565c:	cmp	r4, #1
   15660:	movle	r8, r5
   15664:	ble	15688 <__assert_fail@plt+0x4274>
   15668:	cmp	r6, #43	; 0x2b
   1566c:	cmpne	r6, #48	; 0x30
   15670:	sub	r2, r4, #1
   15674:	moveq	r1, #48	; 0x30
   15678:	movne	r1, #32
   1567c:	mov	r0, r5
   15680:	add	r8, r5, r2
   15684:	bl	1130c <memset@plt>
   15688:	mov	r5, r8
   1568c:	mov	r3, #9
   15690:	b	14da0 <__assert_fail@plt+0x398c>
   15694:	ldr	r3, [fp, #24]
   15698:	mov	r2, #7
   1569c:	add	r3, r3, #6
   156a0:	sdiv	r2, r3, r2
   156a4:	rsb	r2, r2, r2, lsl #3
   156a8:	sub	r3, r3, r2
   156ac:	add	r3, r3, #1
   156b0:	mov	r1, #1
   156b4:	b	1527c <__assert_fail@plt+0x3e68>
   156b8:	cmp	lr, #69	; 0x45
   156bc:	beq	14f18 <__assert_fail@plt+0x3b04>
   156c0:	ldrd	r2, [fp, #24]
   156c4:	sub	r3, r3, r2
   156c8:	mov	r2, #7
   156cc:	add	r3, r3, #7
   156d0:	sdiv	r3, r3, r2
   156d4:	b	1525c <__assert_fail@plt+0x3e48>
   156d8:	andeq	r9, r1, sl, ror #10
   156dc:	andeq	sl, r1, r1, lsr sl
   156e0:	andeq	sl, r1, sl, lsr #13
   156e4:	andeq	sl, r1, pc, lsl sl
   156e8:	andeq	sl, r1, r8, lsr #20
   156ec:			; <UNDEFINED> instruction: 0xfffff894
   156f0:	cmp	lr, #69	; 0x45
   156f4:	beq	14f18 <__assert_fail@plt+0x3b04>
   156f8:	mov	r3, #7
   156fc:	ldr	r8, [fp, #20]
   15700:	ldr	r0, [fp, #24]
   15704:	ldr	r9, [fp, #28]
   15708:	cmp	r8, #0
   1570c:	movlt	ip, #300	; 0x12c
   15710:	mvnge	ip, #99	; 0x63
   15714:	add	ip, r8, ip
   15718:	sub	r2, r9, r0
   1571c:	add	r2, r2, #380	; 0x17c
   15720:	add	r2, r2, #2
   15724:	sdiv	r3, r2, r3
   15728:	rsb	r3, r3, r3, lsl #3
   1572c:	sub	r2, r2, r3
   15730:	sub	r2, r9, r2
   15734:	adds	r2, r2, #3
   15738:	bpl	157fc <__assert_fail@plt+0x43e8>
   1573c:	sub	ip, ip, #1
   15740:	tst	ip, #3
   15744:	movne	ip, #0
   15748:	bne	15774 <__assert_fail@plt+0x4360>
   1574c:	mov	r2, #100	; 0x64
   15750:	sdiv	r3, ip, r2
   15754:	mls	r3, r2, r3, ip
   15758:	cmp	r3, #0
   1575c:	moveq	r1, #400	; 0x190
   15760:	movne	ip, #1
   15764:	sdiveq	r3, ip, r1
   15768:	mlseq	ip, r1, r3, ip
   1576c:	clzeq	ip, ip
   15770:	lsreq	ip, ip, #5
   15774:	add	ip, ip, #364	; 0x16c
   15778:	mov	r2, #7
   1577c:	add	ip, ip, #1
   15780:	mvn	r1, #0
   15784:	add	ip, ip, r9
   15788:	sub	r0, ip, r0
   1578c:	add	r0, r0, #380	; 0x17c
   15790:	add	r0, r0, #2
   15794:	sdiv	r2, r0, r2
   15798:	rsb	r2, r2, r2, lsl #3
   1579c:	sub	r2, r0, r2
   157a0:	sub	r2, ip, r2
   157a4:	add	r2, r2, #3
   157a8:	cmp	sl, #71	; 0x47
   157ac:	beq	15874 <__assert_fail@plt+0x4460>
   157b0:	cmp	sl, #103	; 0x67
   157b4:	bne	1589c <__assert_fail@plt+0x4488>
   157b8:	mov	r0, #100	; 0x64
   157bc:	sdiv	r2, r8, r0
   157c0:	mls	r2, r0, r2, r8
   157c4:	add	r2, r2, r1
   157c8:	sdiv	r3, r2, r0
   157cc:	mls	r3, r0, r3, r2
   157d0:	cmp	r3, #0
   157d4:	bge	157f4 <__assert_fail@plt+0x43e0>
   157d8:	rsb	r1, r1, #-16777216	; 0xff000000
   157dc:	add	r1, r1, #16711680	; 0xff0000
   157e0:	add	r1, r1, #63488	; 0xf800
   157e4:	add	r1, r1, #148	; 0x94
   157e8:	cmp	r8, r1
   157ec:	rsblt	r3, r3, #0
   157f0:	addge	r3, r3, #100	; 0x64
   157f4:	mov	ip, #0
   157f8:	b	15020 <__assert_fail@plt+0x3c0c>
   157fc:	tst	ip, #3
   15800:	movne	r1, #0
   15804:	bne	15830 <__assert_fail@plt+0x441c>
   15808:	mov	r1, #100	; 0x64
   1580c:	sdiv	r3, ip, r1
   15810:	mls	r3, r1, r3, ip
   15814:	cmp	r3, #0
   15818:	moveq	r3, #400	; 0x190
   1581c:	movne	r1, #1
   15820:	sdiveq	r1, ip, r3
   15824:	mlseq	r1, r3, r1, ip
   15828:	clzeq	r1, r1
   1582c:	lsreq	r1, r1, #5
   15830:	add	r1, r1, #364	; 0x16c
   15834:	add	r1, r1, #1
   15838:	sub	r1, r9, r1
   1583c:	mov	r9, #7
   15840:	sub	r0, r1, r0
   15844:	add	r0, r0, #380	; 0x17c
   15848:	add	r0, r0, #2
   1584c:	sdiv	r9, r0, r9
   15850:	rsb	r9, r9, r9, lsl #3
   15854:	sub	r9, r0, r9
   15858:	sub	r9, r1, r9
   1585c:	add	r9, r9, #3
   15860:	cmp	r9, #0
   15864:	movge	r2, r9
   15868:	movge	r1, #1
   1586c:	movlt	r1, #0
   15870:	b	157a8 <__assert_fail@plt+0x4394>
   15874:	ldr	ip, [pc, #-400]	; 156ec <__assert_fail@plt+0x42d8>
   15878:	add	r3, r8, #1888	; 0x760
   1587c:	add	r3, r3, #12
   15880:	add	r3, r3, r1
   15884:	sub	ip, ip, r1
   15888:	cmp	r8, ip
   1588c:	movge	ip, #0
   15890:	movlt	ip, #1
   15894:	mov	r1, #4
   15898:	b	15024 <__assert_fail@plt+0x3c10>
   1589c:	mov	r3, #7
   158a0:	sdiv	r3, r2, r3
   158a4:	add	r3, r3, #1
   158a8:	b	1525c <__assert_fail@plt+0x3e48>
   158ac:	cmp	lr, #69	; 0x45
   158b0:	beq	14f18 <__assert_fail@plt+0x3b04>
   158b4:	ldr	r3, [fp, #24]
   158b8:	mov	r2, #7
   158bc:	add	r3, r3, #6
   158c0:	sdiv	r1, r3, r2
   158c4:	rsb	r1, r1, r1, lsl #3
   158c8:	sub	r1, r3, r1
   158cc:	ldr	r3, [fp, #28]
   158d0:	sub	r3, r3, r1
   158d4:	add	r3, r3, r2
   158d8:	b	156d0 <__assert_fail@plt+0x42bc>
   158dc:	cmp	lr, #69	; 0x45
   158e0:	beq	14f18 <__assert_fail@plt+0x3b04>
   158e4:	ldr	r3, [fp, #24]
   158e8:	b	156b0 <__assert_fail@plt+0x429c>
   158ec:	cmp	lr, #69	; 0x45
   158f0:	beq	14fcc <__assert_fail@plt+0x3bb8>
   158f4:	cmp	lr, #79	; 0x4f
   158f8:	beq	14f18 <__assert_fail@plt+0x3b04>
   158fc:	ldr	r2, [pc, #-536]	; 156ec <__assert_fail@plt+0x42d8>
   15900:	ldr	r3, [fp, #20]
   15904:	cmp	r3, r2
   15908:	add	r3, r3, #1888	; 0x760
   1590c:	movge	ip, #0
   15910:	movlt	ip, #1
   15914:	add	r3, r3, #12
   15918:	b	15894 <__assert_fail@plt+0x4480>
   1591c:	cmp	lr, #69	; 0x45
   15920:	beq	14fd4 <__assert_fail@plt+0x3bc0>
   15924:	ldr	r2, [fp, #20]
   15928:	mov	r1, #100	; 0x64
   1592c:	sdiv	r3, r2, r1
   15930:	mls	r3, r1, r3, r2
   15934:	cmp	r3, #0
   15938:	bge	157f4 <__assert_fail@plt+0x43e0>
   1593c:	sub	r1, r1, #2000	; 0x7d0
   15940:	cmp	r2, r1
   15944:	b	157ec <__assert_fail@plt+0x43d8>
   15948:	ldr	r3, [sp, #32]
   1594c:	cmp	r9, #0
   15950:	movne	r3, #0
   15954:	ldr	r0, [sp, #48]	; 0x30
   15958:	str	r3, [sp, #32]
   1595c:	bl	112b8 <strlen@plt>
   15960:	subs	r3, r6, #45	; 0x2d
   15964:	ldr	r2, [sp, #24]
   15968:	mov	r7, r0
   1596c:	movne	r3, #1
   15970:	cmp	r4, #0
   15974:	movlt	r3, #0
   15978:	cmp	r3, #0
   1597c:	ldr	r3, [sp, #40]	; 0x28
   15980:	moveq	r4, #0
   15984:	cmp	r4, r0
   15988:	movcs	r8, r4
   1598c:	movcc	r8, r0
   15990:	sub	r3, r3, r2
   15994:	cmp	r3, r8
   15998:	bls	14840 <__assert_fail@plt+0x342c>
   1599c:	cmp	r5, #0
   159a0:	beq	159ec <__assert_fail@plt+0x45d8>
   159a4:	cmp	r4, r0
   159a8:	movls	sl, r5
   159ac:	bls	159d0 <__assert_fail@plt+0x45bc>
   159b0:	cmp	r6, #43	; 0x2b
   159b4:	cmpne	r6, #48	; 0x30
   159b8:	sub	r2, r4, r0
   159bc:	moveq	r1, #48	; 0x30
   159c0:	movne	r1, #32
   159c4:	mov	r0, r5
   159c8:	add	sl, r5, r2
   159cc:	bl	1130c <memset@plt>
   159d0:	cmp	r9, #0
   159d4:	beq	159f8 <__assert_fail@plt+0x45e4>
   159d8:	ldr	r1, [sp, #48]	; 0x30
   159dc:	mov	r2, r7
   159e0:	mov	r0, sl
   159e4:	bl	146f4 <__assert_fail@plt+0x32e0>
   159e8:	add	r5, sl, r7
   159ec:	ldr	r3, [sp, #24]
   159f0:	add	r3, r3, r8
   159f4:	b	14c74 <__assert_fail@plt+0x3860>
   159f8:	ldr	r3, [sp, #32]
   159fc:	mov	r2, r7
   15a00:	mov	r0, sl
   15a04:	ldr	r1, [sp, #48]	; 0x30
   15a08:	cmp	r3, #0
   15a0c:	b	14ea0 <__assert_fail@plt+0x3a8c>
   15a10:	bl	11150 <memcpy@plt>
   15a14:	b	159e8 <__assert_fail@plt+0x45d4>
   15a18:	mov	sl, #0
   15a1c:	b	14cac <__assert_fail@plt+0x3898>
   15a20:	mov	r2, #100	; 0x64
   15a24:	mov	r1, #5
   15a28:	mla	r3, r2, r3, r0
   15a2c:	mov	r0, #0
   15a30:	mov	r2, #1
   15a34:	b	15060 <__assert_fail@plt+0x3c4c>
   15a38:	mov	r2, #100	; 0x64
   15a3c:	mov	r1, #6
   15a40:	mla	r3, r2, r3, r0
   15a44:	mov	r0, #4
   15a48:	mov	r2, #1
   15a4c:	b	15060 <__assert_fail@plt+0x3c4c>
   15a50:	mov	r1, #100	; 0x64
   15a54:	mul	r0, r1, r0
   15a58:	movw	r1, #10000	; 0x2710
   15a5c:	mla	r3, r1, r3, r0
   15a60:	mov	r0, #20
   15a64:	mov	r1, #9
   15a68:	add	r3, r3, r2
   15a6c:	mov	r2, #1
   15a70:	b	15060 <__assert_fail@plt+0x3c4c>
   15a74:	cmp	r2, #0
   15a78:	bne	15a50 <__assert_fail@plt+0x463c>
   15a7c:	cmp	r0, #0
   15a80:	bne	15a38 <__assert_fail@plt+0x4624>
   15a84:	mov	r2, #1
   15a88:	b	15320 <__assert_fail@plt+0x3f0c>
   15a8c:	ldr	r3, [sp, #28]
   15a90:	sub	r3, r3, #1
   15a94:	str	r3, [sp, #28]
   15a98:	b	14f18 <__assert_fail@plt+0x3b04>
   15a9c:	bl	11150 <memcpy@plt>
   15aa0:	b	15224 <__assert_fail@plt+0x3e10>
   15aa4:	push	{lr}		; (str lr, [sp, #-4]!)
   15aa8:	sub	sp, sp, #36	; 0x24
   15aac:	mov	ip, #0
   15ab0:	ldr	lr, [sp, #44]	; 0x2c
   15ab4:	str	ip, [sp]
   15ab8:	str	ip, [sp, #4]
   15abc:	str	lr, [sp, #20]
   15ac0:	ldr	lr, [sp, #40]	; 0x28
   15ac4:	strb	ip, [sp, #31]
   15ac8:	str	lr, [sp, #16]
   15acc:	add	lr, sp, #31
   15ad0:	str	lr, [sp, #12]
   15ad4:	mvn	lr, #0
   15ad8:	str	lr, [sp, #8]
   15adc:	bl	14764 <__assert_fail@plt+0x3350>
   15ae0:	add	sp, sp, #36	; 0x24
   15ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ae8:	push	{r4, r5, r6, lr}
   15aec:	subs	r4, r0, #0
   15af0:	bne	15b08 <__assert_fail@plt+0x46f4>
   15af4:	ldr	r3, [pc, #124]	; 15b78 <__assert_fail@plt+0x4764>
   15af8:	ldr	r0, [pc, #124]	; 15b7c <__assert_fail@plt+0x4768>
   15afc:	ldr	r1, [r3]
   15b00:	bl	113d8 <fputs@plt>
   15b04:	bl	113f0 <abort@plt>
   15b08:	mov	r1, #47	; 0x2f
   15b0c:	bl	11384 <strrchr@plt>
   15b10:	subs	r6, r0, #0
   15b14:	beq	15b64 <__assert_fail@plt+0x4750>
   15b18:	add	r5, r6, #1
   15b1c:	sub	r3, r5, r4
   15b20:	cmp	r3, #6
   15b24:	ble	15b64 <__assert_fail@plt+0x4750>
   15b28:	mov	r2, #7
   15b2c:	ldr	r1, [pc, #76]	; 15b80 <__assert_fail@plt+0x476c>
   15b30:	sub	r0, r6, #6
   15b34:	bl	113e4 <strncmp@plt>
   15b38:	cmp	r0, #0
   15b3c:	bne	15b64 <__assert_fail@plt+0x4750>
   15b40:	mov	r2, #3
   15b44:	ldr	r1, [pc, #56]	; 15b84 <__assert_fail@plt+0x4770>
   15b48:	mov	r0, r5
   15b4c:	bl	113e4 <strncmp@plt>
   15b50:	cmp	r0, #0
   15b54:	ldreq	r3, [pc, #44]	; 15b88 <__assert_fail@plt+0x4774>
   15b58:	addeq	r4, r6, #4
   15b5c:	movne	r4, r5
   15b60:	streq	r4, [r3]
   15b64:	ldr	r3, [pc, #32]	; 15b8c <__assert_fail@plt+0x4778>
   15b68:	str	r4, [r3]
   15b6c:	ldr	r3, [pc, #28]	; 15b90 <__assert_fail@plt+0x477c>
   15b70:	str	r4, [r3]
   15b74:	pop	{r4, r5, r6, pc}
   15b78:	ldrdeq	ip, [r2], -r8
   15b7c:	andeq	sl, r1, sl, lsr sl
   15b80:	andeq	sl, r1, r2, ror sl
   15b84:	andeq	sl, r1, sl, ror sl
   15b88:	andeq	ip, r2, r8, asr #3
   15b8c:			; <UNDEFINED> instruction: 0x0002c2b4
   15b90:	andeq	ip, r2, ip, asr #3
   15b94:	push	{r4, lr}
   15b98:	mov	r2, #48	; 0x30
   15b9c:	mov	r4, r1
   15ba0:	mov	r1, #0
   15ba4:	bl	1130c <memset@plt>
   15ba8:	cmp	r4, #10
   15bac:	bne	15bb4 <__assert_fail@plt+0x47a0>
   15bb0:	bl	113f0 <abort@plt>
   15bb4:	str	r4, [r0]
   15bb8:	pop	{r4, pc}
   15bbc:	push	{r4, r5, r6, lr}
   15bc0:	mov	r2, #5
   15bc4:	mov	r6, r0
   15bc8:	mov	r5, r1
   15bcc:	mov	r1, r0
   15bd0:	mov	r0, #0
   15bd4:	bl	1118c <dcgettext@plt>
   15bd8:	cmp	r6, r0
   15bdc:	mov	r4, r0
   15be0:	bne	15c50 <__assert_fail@plt+0x483c>
   15be4:	bl	18f4c <__assert_fail@plt+0x7b38>
   15be8:	ldrb	r3, [r0]
   15bec:	bic	r3, r3, #32
   15bf0:	cmp	r3, #85	; 0x55
   15bf4:	bne	15c58 <__assert_fail@plt+0x4844>
   15bf8:	ldrb	r3, [r0, #1]
   15bfc:	bic	r3, r3, #32
   15c00:	cmp	r3, #84	; 0x54
   15c04:	bne	15cc8 <__assert_fail@plt+0x48b4>
   15c08:	ldrb	r3, [r0, #2]
   15c0c:	bic	r3, r3, #32
   15c10:	cmp	r3, #70	; 0x46
   15c14:	bne	15cc8 <__assert_fail@plt+0x48b4>
   15c18:	ldrb	r3, [r0, #3]
   15c1c:	cmp	r3, #45	; 0x2d
   15c20:	bne	15cc8 <__assert_fail@plt+0x48b4>
   15c24:	ldrb	r3, [r0, #4]
   15c28:	cmp	r3, #56	; 0x38
   15c2c:	bne	15cc8 <__assert_fail@plt+0x48b4>
   15c30:	ldrb	r3, [r0, #5]
   15c34:	cmp	r3, #0
   15c38:	bne	15cc8 <__assert_fail@plt+0x48b4>
   15c3c:	ldrb	r2, [r4]
   15c40:	ldr	r3, [pc, #144]	; 15cd8 <__assert_fail@plt+0x48c4>
   15c44:	ldr	r4, [pc, #144]	; 15cdc <__assert_fail@plt+0x48c8>
   15c48:	cmp	r2, #96	; 0x60
   15c4c:	movne	r4, r3
   15c50:	mov	r0, r4
   15c54:	pop	{r4, r5, r6, pc}
   15c58:	cmp	r3, #71	; 0x47
   15c5c:	bne	15cc8 <__assert_fail@plt+0x48b4>
   15c60:	ldrb	r3, [r0, #1]
   15c64:	bic	r3, r3, #32
   15c68:	cmp	r3, #66	; 0x42
   15c6c:	bne	15cc8 <__assert_fail@plt+0x48b4>
   15c70:	ldrb	r3, [r0, #2]
   15c74:	cmp	r3, #49	; 0x31
   15c78:	bne	15cc8 <__assert_fail@plt+0x48b4>
   15c7c:	ldrb	r3, [r0, #3]
   15c80:	cmp	r3, #56	; 0x38
   15c84:	bne	15cc8 <__assert_fail@plt+0x48b4>
   15c88:	ldrb	r3, [r0, #4]
   15c8c:	cmp	r3, #48	; 0x30
   15c90:	bne	15cc8 <__assert_fail@plt+0x48b4>
   15c94:	ldrb	r3, [r0, #5]
   15c98:	cmp	r3, #51	; 0x33
   15c9c:	bne	15cc8 <__assert_fail@plt+0x48b4>
   15ca0:	ldrb	r3, [r0, #6]
   15ca4:	cmp	r3, #48	; 0x30
   15ca8:	bne	15cc8 <__assert_fail@plt+0x48b4>
   15cac:	ldrb	r3, [r0, #7]
   15cb0:	cmp	r3, #0
   15cb4:	bne	15cc8 <__assert_fail@plt+0x48b4>
   15cb8:	ldrb	r2, [r4]
   15cbc:	ldr	r3, [pc, #28]	; 15ce0 <__assert_fail@plt+0x48cc>
   15cc0:	ldr	r4, [pc, #28]	; 15ce4 <__assert_fail@plt+0x48d0>
   15cc4:	b	15c48 <__assert_fail@plt+0x4834>
   15cc8:	ldr	r4, [pc, #24]	; 15ce8 <__assert_fail@plt+0x48d4>
   15ccc:	cmp	r5, #9
   15cd0:	ldr	r3, [pc, #20]	; 15cec <__assert_fail@plt+0x48d8>
   15cd4:	b	15c4c <__assert_fail@plt+0x4838>
   15cd8:	ldrdeq	sl, [r1], -r6
   15cdc:	andeq	sl, r1, r1, ror #21
   15ce0:	ldrdeq	sl, [r1], -sl	; <UNPREDICTABLE>
   15ce4:	ldrdeq	sl, [r1], -sp
   15ce8:	ldrdeq	sl, [r1], -r4
   15cec:	andeq	sl, r1, sl, lsl #30
   15cf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cf4:	sub	sp, sp, #108	; 0x6c
   15cf8:	mov	r8, r0
   15cfc:	mov	r5, r1
   15d00:	mov	r6, #0
   15d04:	str	r3, [sp, #40]	; 0x28
   15d08:	str	r2, [sp, #48]	; 0x30
   15d0c:	ldr	sl, [sp, #144]	; 0x90
   15d10:	bl	111f8 <__ctype_get_mb_cur_max@plt>
   15d14:	ldr	r3, [sp, #148]	; 0x94
   15d18:	str	r6, [sp, #24]
   15d1c:	str	r6, [sp, #32]
   15d20:	str	r6, [sp, #44]	; 0x2c
   15d24:	str	r6, [sp, #52]	; 0x34
   15d28:	ubfx	r7, r3, #1, #1
   15d2c:	mov	r3, #1
   15d30:	str	r6, [sp, #60]	; 0x3c
   15d34:	str	r3, [sp, #72]	; 0x48
   15d38:	str	r0, [sp, #76]	; 0x4c
   15d3c:	cmp	sl, #10
   15d40:	ldrls	pc, [pc, sl, lsl #2]
   15d44:	b	15f88 <__assert_fail@plt+0x4b74>
   15d48:	andeq	r5, r1, r4, ror sp
   15d4c:	andeq	r5, r1, r0, lsr #31
   15d50:	andeq	r5, r1, r4, lsr #30
   15d54:	andeq	r5, r1, ip, lsr pc
   15d58:	andeq	r5, r1, ip, lsl #30
   15d5c:	andeq	r5, r1, r4, ror #28
   15d60:	andeq	r5, r1, r4, asr #28
   15d64:	andeq	r5, r1, ip, lsl #31
   15d68:	muleq	r1, r4, lr
   15d6c:	muleq	r1, r4, lr
   15d70:	muleq	r1, r4, lr
   15d74:	mov	r4, sl
   15d78:	mov	r7, #0
   15d7c:	mov	r9, r5
   15d80:	mov	r3, #0
   15d84:	str	r6, [sp, #68]	; 0x44
   15d88:	str	r3, [sp, #28]
   15d8c:	ldr	r3, [sp, #40]	; 0x28
   15d90:	cmn	r3, #1
   15d94:	bne	16934 <__assert_fail@plt+0x5520>
   15d98:	ldr	r2, [sp, #28]
   15d9c:	ldr	r3, [sp, #48]	; 0x30
   15da0:	ldrb	r3, [r3, r2]
   15da4:	adds	r3, r3, #0
   15da8:	movne	r3, #1
   15dac:	str	r3, [sp, #36]	; 0x24
   15db0:	ldr	r3, [sp, #36]	; 0x24
   15db4:	cmp	r3, #0
   15db8:	bne	15fc4 <__assert_fail@plt+0x4bb0>
   15dbc:	sub	r3, sl, #2
   15dc0:	cmp	r4, #0
   15dc4:	clz	r3, r3
   15dc8:	movne	r2, #0
   15dcc:	lsr	r3, r3, #5
   15dd0:	andeq	r2, r3, r7
   15dd4:	cmp	r2, #0
   15dd8:	bne	16188 <__assert_fail@plt+0x4d74>
   15ddc:	eor	r7, r7, #1
   15de0:	ands	r3, r3, r7
   15de4:	beq	169ac <__assert_fail@plt+0x5598>
   15de8:	ldr	r2, [sp, #68]	; 0x44
   15dec:	cmp	r2, #0
   15df0:	beq	16974 <__assert_fail@plt+0x5560>
   15df4:	ldr	r3, [sp, #72]	; 0x48
   15df8:	cmp	r3, #0
   15dfc:	beq	16948 <__assert_fail@plt+0x5534>
   15e00:	ldr	r2, [sp, #48]	; 0x30
   15e04:	ldr	r3, [sp, #160]	; 0xa0
   15e08:	ldr	r1, [sp, #60]	; 0x3c
   15e0c:	str	r3, [sp, #16]
   15e10:	ldr	r3, [sp, #156]	; 0x9c
   15e14:	str	r3, [sp, #12]
   15e18:	ldr	r3, [sp, #152]	; 0x98
   15e1c:	str	r3, [sp, #8]
   15e20:	ldr	r3, [sp, #148]	; 0x94
   15e24:	str	r3, [sp, #4]
   15e28:	mov	r3, #5
   15e2c:	str	r3, [sp]
   15e30:	ldr	r3, [sp, #40]	; 0x28
   15e34:	mov	r0, r8
   15e38:	bl	15cf0 <__assert_fail@plt+0x48dc>
   15e3c:	mov	r4, r0
   15e40:	b	169a0 <__assert_fail@plt+0x558c>
   15e44:	ldr	r3, [pc, #2948]	; 169d0 <__assert_fail@plt+0x55bc>
   15e48:	mov	r7, #1
   15e4c:	mov	r4, #0
   15e50:	mov	sl, #5
   15e54:	str	r7, [sp, #24]
   15e58:	str	r7, [sp, #32]
   15e5c:	str	r3, [sp, #44]	; 0x2c
   15e60:	b	15d7c <__assert_fail@plt+0x4968>
   15e64:	cmp	r7, #0
   15e68:	bne	15fac <__assert_fail@plt+0x4b98>
   15e6c:	cmp	r5, #0
   15e70:	mov	r4, #1
   15e74:	movne	r3, #34	; 0x22
   15e78:	strbne	r3, [r8]
   15e7c:	mov	r3, #1
   15e80:	str	r3, [sp, #24]
   15e84:	str	r3, [sp, #32]
   15e88:	ldr	r3, [pc, #2880]	; 169d0 <__assert_fail@plt+0x55bc>
   15e8c:	str	r3, [sp, #44]	; 0x2c
   15e90:	b	15d7c <__assert_fail@plt+0x4968>
   15e94:	cmp	sl, #10
   15e98:	beq	15ebc <__assert_fail@plt+0x4aa8>
   15e9c:	mov	r1, sl
   15ea0:	ldr	r0, [pc, #2860]	; 169d4 <__assert_fail@plt+0x55c0>
   15ea4:	bl	15bbc <__assert_fail@plt+0x47a8>
   15ea8:	mov	r1, sl
   15eac:	str	r0, [sp, #156]	; 0x9c
   15eb0:	ldr	r0, [pc, #2848]	; 169d8 <__assert_fail@plt+0x55c4>
   15eb4:	bl	15bbc <__assert_fail@plt+0x47a8>
   15eb8:	str	r0, [sp, #160]	; 0xa0
   15ebc:	cmp	r7, #0
   15ec0:	moveq	r4, r7
   15ec4:	beq	15edc <__assert_fail@plt+0x4ac8>
   15ec8:	mov	r4, #0
   15ecc:	b	15eec <__assert_fail@plt+0x4ad8>
   15ed0:	cmp	r5, r4
   15ed4:	strbhi	r3, [r8, r4]
   15ed8:	add	r4, r4, #1
   15edc:	ldr	r3, [sp, #156]	; 0x9c
   15ee0:	ldrb	r3, [r3, r4]
   15ee4:	cmp	r3, #0
   15ee8:	bne	15ed0 <__assert_fail@plt+0x4abc>
   15eec:	ldr	r0, [sp, #160]	; 0xa0
   15ef0:	bl	112b8 <strlen@plt>
   15ef4:	ldr	r3, [sp, #160]	; 0xa0
   15ef8:	str	r0, [sp, #32]
   15efc:	str	r3, [sp, #44]	; 0x2c
   15f00:	mov	r3, #1
   15f04:	str	r3, [sp, #24]
   15f08:	b	15d7c <__assert_fail@plt+0x4968>
   15f0c:	mov	r3, #1
   15f10:	cmp	r7, #0
   15f14:	streq	r3, [sp, #24]
   15f18:	beq	15f5c <__assert_fail@plt+0x4b48>
   15f1c:	str	r3, [sp, #32]
   15f20:	b	15f48 <__assert_fail@plt+0x4b34>
   15f24:	cmp	r7, #0
   15f28:	beq	15f5c <__assert_fail@plt+0x4b48>
   15f2c:	mov	r3, #1
   15f30:	str	r3, [sp, #32]
   15f34:	ldr	r3, [pc, #2716]	; 169d8 <__assert_fail@plt+0x55c4>
   15f38:	b	15fbc <__assert_fail@plt+0x4ba8>
   15f3c:	mov	r7, #1
   15f40:	str	r7, [sp, #24]
   15f44:	str	r7, [sp, #32]
   15f48:	ldr	r3, [pc, #2696]	; 169d8 <__assert_fail@plt+0x55c4>
   15f4c:	mov	r4, #0
   15f50:	str	r3, [sp, #44]	; 0x2c
   15f54:	mov	sl, #2
   15f58:	b	15d7c <__assert_fail@plt+0x4968>
   15f5c:	cmp	r5, #0
   15f60:	movne	r3, #39	; 0x27
   15f64:	movne	r7, #0
   15f68:	strbne	r3, [r8]
   15f6c:	moveq	r7, r5
   15f70:	mov	r3, #1
   15f74:	mov	r4, #1
   15f78:	str	r3, [sp, #32]
   15f7c:	ldr	r3, [pc, #2644]	; 169d8 <__assert_fail@plt+0x55c4>
   15f80:	str	r3, [sp, #44]	; 0x2c
   15f84:	b	15f54 <__assert_fail@plt+0x4b40>
   15f88:	bl	113f0 <abort@plt>
   15f8c:	mov	r3, #1
   15f90:	mov	r7, #0
   15f94:	str	r3, [sp, #24]
   15f98:	mov	r4, #0
   15f9c:	b	15d7c <__assert_fail@plt+0x4968>
   15fa0:	mov	r7, #1
   15fa4:	str	sl, [sp, #32]
   15fa8:	b	15f48 <__assert_fail@plt+0x4b34>
   15fac:	mov	r3, #1
   15fb0:	str	r7, [sp, #24]
   15fb4:	str	r3, [sp, #32]
   15fb8:	ldr	r3, [pc, #2576]	; 169d0 <__assert_fail@plt+0x55bc>
   15fbc:	str	r3, [sp, #44]	; 0x2c
   15fc0:	b	15f98 <__assert_fail@plt+0x4b84>
   15fc4:	ldr	fp, [sp, #24]
   15fc8:	ldr	r3, [sp, #32]
   15fcc:	cmp	sl, #2
   15fd0:	moveq	fp, #0
   15fd4:	andne	fp, fp, #1
   15fd8:	adds	r5, r3, #0
   15fdc:	movne	r5, #1
   15fe0:	ands	r3, fp, r5
   15fe4:	str	r3, [sp, #64]	; 0x40
   15fe8:	beq	160b8 <__assert_fail@plt+0x4ca4>
   15fec:	ldr	r3, [sp, #28]
   15ff0:	ldr	r2, [sp, #32]
   15ff4:	cmp	r2, #1
   15ff8:	add	r6, r3, r2
   15ffc:	mov	r3, r2
   16000:	ldr	r2, [sp, #40]	; 0x28
   16004:	movls	r3, #0
   16008:	movhi	r3, #1
   1600c:	cmn	r2, #1
   16010:	movne	r3, #0
   16014:	cmp	r3, #0
   16018:	beq	16028 <__assert_fail@plt+0x4c14>
   1601c:	ldr	r0, [sp, #48]	; 0x30
   16020:	bl	112b8 <strlen@plt>
   16024:	str	r0, [sp, #40]	; 0x28
   16028:	ldr	r3, [sp, #40]	; 0x28
   1602c:	cmp	r6, r3
   16030:	bhi	160b0 <__assert_fail@plt+0x4c9c>
   16034:	ldr	r0, [sp, #28]
   16038:	ldr	r2, [sp, #32]
   1603c:	ldr	r3, [sp, #48]	; 0x30
   16040:	ldr	r1, [sp, #44]	; 0x2c
   16044:	add	r0, r3, r0
   16048:	bl	11168 <memcmp@plt>
   1604c:	cmp	r0, #0
   16050:	bne	160b0 <__assert_fail@plt+0x4c9c>
   16054:	cmp	r7, #0
   16058:	beq	160b8 <__assert_fail@plt+0x4ca4>
   1605c:	str	r7, [sp, #24]
   16060:	ldr	r3, [sp, #24]
   16064:	mov	r1, r9
   16068:	ldr	r2, [sp, #48]	; 0x30
   1606c:	cmp	sl, #2
   16070:	movne	r3, #0
   16074:	andeq	r3, r3, #1
   16078:	cmp	r3, #0
   1607c:	ldr	r3, [sp, #160]	; 0xa0
   16080:	movne	sl, #4
   16084:	str	sl, [sp]
   16088:	str	r3, [sp, #16]
   1608c:	ldr	r3, [sp, #156]	; 0x9c
   16090:	str	r3, [sp, #12]
   16094:	mov	r3, #0
   16098:	str	r3, [sp, #8]
   1609c:	ldr	r3, [sp, #148]	; 0x94
   160a0:	bic	r3, r3, #2
   160a4:	str	r3, [sp, #4]
   160a8:	ldr	r3, [sp, #40]	; 0x28
   160ac:	b	15e34 <__assert_fail@plt+0x4a20>
   160b0:	mov	r3, #0
   160b4:	str	r3, [sp, #64]	; 0x40
   160b8:	ldr	r2, [sp, #28]
   160bc:	ldr	r3, [sp, #48]	; 0x30
   160c0:	add	r3, r3, r2
   160c4:	str	r3, [sp, #80]	; 0x50
   160c8:	ldr	r3, [sp, #48]	; 0x30
   160cc:	ldrb	r6, [r3, r2]
   160d0:	cmp	r6, #58	; 0x3a
   160d4:	bhi	16238 <__assert_fail@plt+0x4e24>
   160d8:	cmp	r6, #43	; 0x2b
   160dc:	bcs	163f8 <__assert_fail@plt+0x4fe4>
   160e0:	cmp	r6, #32
   160e4:	beq	1644c <__assert_fail@plt+0x5038>
   160e8:	bhi	16190 <__assert_fail@plt+0x4d7c>
   160ec:	cmp	r6, #9
   160f0:	beq	165f4 <__assert_fail@plt+0x51e0>
   160f4:	bhi	16154 <__assert_fail@plt+0x4d40>
   160f8:	cmp	r6, #7
   160fc:	beq	16604 <__assert_fail@plt+0x51f0>
   16100:	bhi	16620 <__assert_fail@plt+0x520c>
   16104:	cmp	r6, #0
   16108:	beq	16468 <__assert_fail@plt+0x5054>
   1610c:	ldr	r3, [sp, #76]	; 0x4c
   16110:	cmp	r3, #1
   16114:	bne	1666c <__assert_fail@plt+0x5258>
   16118:	bl	112a0 <__ctype_b_loc@plt>
   1611c:	ldr	r2, [r0]
   16120:	sxth	r3, r6
   16124:	lsl	r3, r3, #1
   16128:	ldrh	r5, [r2, r3]
   1612c:	ldr	r3, [sp, #76]	; 0x4c
   16130:	ubfx	r5, r5, #14, #1
   16134:	str	r3, [sp, #56]	; 0x38
   16138:	ldr	r3, [sp, #24]
   1613c:	eor	fp, r5, #1
   16140:	and	fp, fp, r3
   16144:	ands	fp, fp, #255	; 0xff
   16148:	beq	16328 <__assert_fail@plt+0x4f14>
   1614c:	mov	r5, #0
   16150:	b	16718 <__assert_fail@plt+0x5304>
   16154:	cmp	r6, #11
   16158:	beq	16628 <__assert_fail@plt+0x5214>
   1615c:	bcc	165fc <__assert_fail@plt+0x51e8>
   16160:	cmp	r6, #12
   16164:	beq	16630 <__assert_fail@plt+0x521c>
   16168:	cmp	r6, #13
   1616c:	moveq	r3, #114	; 0x72
   16170:	bne	1610c <__assert_fail@plt+0x4cf8>
   16174:	cmp	sl, #2
   16178:	movne	r2, #0
   1617c:	andeq	r2, r7, #1
   16180:	cmp	r2, #0
   16184:	beq	16608 <__assert_fail@plt+0x51f4>
   16188:	mov	sl, #2
   1618c:	b	16060 <__assert_fail@plt+0x4c4c>
   16190:	cmp	r6, #37	; 0x25
   16194:	beq	163f8 <__assert_fail@plt+0x4fe4>
   16198:	bhi	161ac <__assert_fail@plt+0x4d98>
   1619c:	cmp	r6, #35	; 0x23
   161a0:	beq	16440 <__assert_fail@plt+0x502c>
   161a4:	mov	r5, #0
   161a8:	b	16450 <__assert_fail@plt+0x503c>
   161ac:	cmp	r6, #39	; 0x27
   161b0:	bne	161a4 <__assert_fail@plt+0x4d90>
   161b4:	cmp	sl, #2
   161b8:	ldrne	r5, [sp, #36]	; 0x24
   161bc:	movne	r3, r5
   161c0:	strne	r3, [sp, #68]	; 0x44
   161c4:	bne	16544 <__assert_fail@plt+0x5130>
   161c8:	cmp	r7, #0
   161cc:	bne	16060 <__assert_fail@plt+0x4c4c>
   161d0:	ldr	r3, [sp, #60]	; 0x3c
   161d4:	cmp	r9, #0
   161d8:	clz	r3, r3
   161dc:	lsr	r3, r3, #5
   161e0:	moveq	r3, #0
   161e4:	cmp	r3, #0
   161e8:	strne	r9, [sp, #60]	; 0x3c
   161ec:	movne	r9, #0
   161f0:	bne	16200 <__assert_fail@plt+0x4dec>
   161f4:	cmp	r9, r4
   161f8:	movhi	r3, #39	; 0x27
   161fc:	strbhi	r3, [r8, r4]
   16200:	add	r3, r4, #1
   16204:	ldr	r5, [sp, #36]	; 0x24
   16208:	mov	fp, #0
   1620c:	cmp	r3, r9
   16210:	movcc	r2, #92	; 0x5c
   16214:	str	fp, [sp, #52]	; 0x34
   16218:	strbcc	r2, [r8, r3]
   1621c:	add	r3, r4, #2
   16220:	add	r4, r4, #3
   16224:	cmp	r3, r9
   16228:	str	r5, [sp, #68]	; 0x44
   1622c:	movcc	r2, #39	; 0x27
   16230:	strbcc	r2, [r8, r3]
   16234:	b	16328 <__assert_fail@plt+0x4f14>
   16238:	cmp	r6, #94	; 0x5e
   1623c:	beq	161a4 <__assert_fail@plt+0x4d90>
   16240:	bhi	16400 <__assert_fail@plt+0x4fec>
   16244:	cmp	r6, #90	; 0x5a
   16248:	bhi	163ec <__assert_fail@plt+0x4fd8>
   1624c:	cmp	r6, #65	; 0x41
   16250:	bcs	163f8 <__assert_fail@plt+0x4fe4>
   16254:	cmp	r6, #62	; 0x3e
   16258:	bls	161a4 <__assert_fail@plt+0x4d90>
   1625c:	cmp	r6, #63	; 0x3f
   16260:	bne	1610c <__assert_fail@plt+0x4cf8>
   16264:	cmp	sl, #2
   16268:	beq	1654c <__assert_fail@plt+0x5138>
   1626c:	cmp	sl, #5
   16270:	movne	fp, #0
   16274:	bne	1691c <__assert_fail@plt+0x5508>
   16278:	ldr	r3, [sp, #148]	; 0x94
   1627c:	tst	r3, #4
   16280:	beq	16554 <__assert_fail@plt+0x5140>
   16284:	ldr	r3, [sp, #28]
   16288:	add	r2, r3, #2
   1628c:	ldr	r3, [sp, #40]	; 0x28
   16290:	cmp	r2, r3
   16294:	bcs	16554 <__assert_fail@plt+0x5140>
   16298:	ldr	r1, [sp, #28]
   1629c:	ldr	r3, [sp, #48]	; 0x30
   162a0:	add	r3, r3, r1
   162a4:	ldrb	r1, [r3, #1]
   162a8:	cmp	r1, #63	; 0x3f
   162ac:	bne	16554 <__assert_fail@plt+0x5140>
   162b0:	ldr	r3, [sp, #48]	; 0x30
   162b4:	ldrb	r6, [r3, r2]
   162b8:	sub	r3, r6, #33	; 0x21
   162bc:	uxtb	r3, r3
   162c0:	cmp	r3, #29
   162c4:	bhi	16924 <__assert_fail@plt+0x5510>
   162c8:	ldr	r0, [pc, #1804]	; 169dc <__assert_fail@plt+0x55c8>
   162cc:	mov	r5, #1
   162d0:	ands	r5, r0, r5, lsl r3
   162d4:	beq	1692c <__assert_fail@plt+0x5518>
   162d8:	cmp	r7, #0
   162dc:	bne	16060 <__assert_fail@plt+0x4c4c>
   162e0:	cmp	r9, r4
   162e4:	add	r3, r4, #1
   162e8:	str	r2, [sp, #28]
   162ec:	mov	r5, #0
   162f0:	strbhi	r1, [r8, r4]
   162f4:	cmp	r9, r3
   162f8:	mov	fp, r5
   162fc:	movhi	r1, #34	; 0x22
   16300:	strbhi	r1, [r8, r3]
   16304:	add	r3, r4, #2
   16308:	cmp	r9, r3
   1630c:	movhi	r1, #34	; 0x22
   16310:	strbhi	r1, [r8, r3]
   16314:	add	r3, r4, #3
   16318:	add	r4, r4, #4
   1631c:	cmp	r9, r3
   16320:	movhi	r1, #63	; 0x3f
   16324:	strbhi	r1, [r8, r3]
   16328:	ldr	r3, [sp, #24]
   1632c:	eor	r3, r3, #1
   16330:	cmp	sl, #2
   16334:	orreq	r3, r3, #1
   16338:	eor	r3, r3, #1
   1633c:	orr	r3, r7, r3
   16340:	tst	r3, #255	; 0xff
   16344:	beq	16370 <__assert_fail@plt+0x4f5c>
   16348:	ldr	r3, [sp, #152]	; 0x98
   1634c:	cmp	r3, #0
   16350:	beq	16370 <__assert_fail@plt+0x4f5c>
   16354:	ldr	r1, [sp, #152]	; 0x98
   16358:	ubfx	r2, r6, #5, #8
   1635c:	and	r3, r6, #31
   16360:	ldr	r2, [r1, r2, lsl #2]
   16364:	lsr	r3, r2, r3
   16368:	tst	r3, #1
   1636c:	bne	1637c <__assert_fail@plt+0x4f68>
   16370:	ldr	r3, [sp, #64]	; 0x40
   16374:	cmp	r3, #0
   16378:	beq	16574 <__assert_fail@plt+0x5160>
   1637c:	sub	r3, sl, #2
   16380:	cmp	r7, #0
   16384:	clz	r3, r3
   16388:	lsr	r3, r3, #5
   1638c:	bne	16060 <__assert_fail@plt+0x4c4c>
   16390:	ldr	r2, [sp, #52]	; 0x34
   16394:	eor	r2, r2, #1
   16398:	ands	r3, r3, r2
   1639c:	beq	163d4 <__assert_fail@plt+0x4fc0>
   163a0:	cmp	r9, r4
   163a4:	str	r3, [sp, #52]	; 0x34
   163a8:	movhi	r2, #39	; 0x27
   163ac:	strbhi	r2, [r8, r4]
   163b0:	add	r2, r4, #1
   163b4:	cmp	r9, r2
   163b8:	movhi	r1, #36	; 0x24
   163bc:	strbhi	r1, [r8, r2]
   163c0:	add	r2, r4, #2
   163c4:	add	r4, r4, #3
   163c8:	cmp	r9, r2
   163cc:	movhi	r1, #39	; 0x27
   163d0:	strbhi	r1, [r8, r2]
   163d4:	cmp	r9, r4
   163d8:	ldr	fp, [sp, #36]	; 0x24
   163dc:	movhi	r3, #92	; 0x5c
   163e0:	strbhi	r3, [r8, r4]
   163e4:	add	r4, r4, #1
   163e8:	b	16574 <__assert_fail@plt+0x5160>
   163ec:	cmp	r6, #92	; 0x5c
   163f0:	beq	1655c <__assert_fail@plt+0x5148>
   163f4:	bls	161a4 <__assert_fail@plt+0x4d90>
   163f8:	ldr	r5, [sp, #36]	; 0x24
   163fc:	b	16544 <__assert_fail@plt+0x5130>
   16400:	cmp	r6, #122	; 0x7a
   16404:	bhi	16424 <__assert_fail@plt+0x5010>
   16408:	cmp	r6, #97	; 0x61
   1640c:	bcs	163f8 <__assert_fail@plt+0x4fe4>
   16410:	cmp	r6, #95	; 0x5f
   16414:	beq	163f8 <__assert_fail@plt+0x4fe4>
   16418:	cmp	r6, #96	; 0x60
   1641c:	bne	1610c <__assert_fail@plt+0x4cf8>
   16420:	b	161a4 <__assert_fail@plt+0x4d90>
   16424:	cmp	r6, #124	; 0x7c
   16428:	beq	161a4 <__assert_fail@plt+0x4d90>
   1642c:	bcc	16638 <__assert_fail@plt+0x5224>
   16430:	cmp	r6, #125	; 0x7d
   16434:	beq	16638 <__assert_fail@plt+0x5224>
   16438:	cmp	r6, #126	; 0x7e
   1643c:	bne	1610c <__assert_fail@plt+0x4cf8>
   16440:	ldr	r3, [sp, #28]
   16444:	cmp	r3, #0
   16448:	bne	16554 <__assert_fail@plt+0x5140>
   1644c:	ldr	r5, [sp, #36]	; 0x24
   16450:	cmp	sl, #2
   16454:	movne	fp, #0
   16458:	andeq	fp, r7, #1
   1645c:	cmp	fp, #0
   16460:	beq	16328 <__assert_fail@plt+0x4f14>
   16464:	b	16188 <__assert_fail@plt+0x4d74>
   16468:	ldr	r3, [sp, #24]
   1646c:	cmp	r3, #0
   16470:	beq	16538 <__assert_fail@plt+0x5124>
   16474:	sub	r2, sl, #2
   16478:	cmp	r7, #0
   1647c:	clz	r2, r2
   16480:	lsr	r2, r2, #5
   16484:	bne	1605c <__assert_fail@plt+0x4c48>
   16488:	ldr	r3, [sp, #52]	; 0x34
   1648c:	eor	r3, r3, #1
   16490:	ands	r2, r2, r3
   16494:	moveq	r3, r4
   16498:	beq	164d0 <__assert_fail@plt+0x50bc>
   1649c:	cmp	r9, r4
   164a0:	str	r2, [sp, #52]	; 0x34
   164a4:	movhi	r3, #39	; 0x27
   164a8:	strbhi	r3, [r8, r4]
   164ac:	add	r3, r4, #1
   164b0:	cmp	r9, r3
   164b4:	movhi	r1, #36	; 0x24
   164b8:	strbhi	r1, [r8, r3]
   164bc:	add	r3, r4, #2
   164c0:	cmp	r9, r3
   164c4:	movhi	r1, #39	; 0x27
   164c8:	strbhi	r1, [r8, r3]
   164cc:	add	r3, r4, #3
   164d0:	cmp	r9, r3
   164d4:	add	r4, r3, #1
   164d8:	movhi	r2, #92	; 0x5c
   164dc:	strbhi	r2, [r8, r3]
   164e0:	cmp	fp, #0
   164e4:	beq	1690c <__assert_fail@plt+0x54f8>
   164e8:	ldr	r2, [sp, #28]
   164ec:	ldr	r1, [sp, #40]	; 0x28
   164f0:	add	r2, r2, #1
   164f4:	cmp	r2, r1
   164f8:	bcs	16530 <__assert_fail@plt+0x511c>
   164fc:	ldr	r1, [sp, #48]	; 0x30
   16500:	mov	r6, #48	; 0x30
   16504:	ldrb	r2, [r1, r2]
   16508:	sub	r2, r2, #48	; 0x30
   1650c:	cmp	r2, #9
   16510:	bhi	1691c <__assert_fail@plt+0x5508>
   16514:	cmp	r9, r4
   16518:	add	r2, r3, #2
   1651c:	strbhi	r6, [r8, r4]
   16520:	cmp	r9, r2
   16524:	add	r4, r3, #3
   16528:	movhi	r1, #48	; 0x30
   1652c:	strbhi	r1, [r8, r2]
   16530:	mov	r5, #0
   16534:	b	16914 <__assert_fail@plt+0x5500>
   16538:	ldr	r3, [sp, #148]	; 0x94
   1653c:	ands	r5, r3, #1
   16540:	bne	165c8 <__assert_fail@plt+0x51b4>
   16544:	mov	fp, #0
   16548:	b	16328 <__assert_fail@plt+0x4f14>
   1654c:	cmp	r7, #0
   16550:	bne	16060 <__assert_fail@plt+0x4c4c>
   16554:	mov	r5, #0
   16558:	b	16544 <__assert_fail@plt+0x5130>
   1655c:	cmp	sl, #2
   16560:	bne	165d4 <__assert_fail@plt+0x51c0>
   16564:	cmp	r7, #0
   16568:	bne	16060 <__assert_fail@plt+0x4c4c>
   1656c:	mov	r5, r7
   16570:	mov	fp, r7
   16574:	ldr	r3, [sp, #52]	; 0x34
   16578:	eor	fp, fp, #1
   1657c:	tst	r3, fp
   16580:	beq	165ac <__assert_fail@plt+0x5198>
   16584:	cmp	r9, r4
   16588:	movhi	r3, #39	; 0x27
   1658c:	strbhi	r3, [r8, r4]
   16590:	add	r3, r4, #1
   16594:	add	r4, r4, #2
   16598:	cmp	r9, r3
   1659c:	movhi	r2, #39	; 0x27
   165a0:	strbhi	r2, [r8, r3]
   165a4:	mov	r3, #0
   165a8:	str	r3, [sp, #52]	; 0x34
   165ac:	cmp	r9, r4
   165b0:	ldr	r3, [sp, #72]	; 0x48
   165b4:	strbhi	r6, [r8, r4]
   165b8:	cmp	r5, #0
   165bc:	add	r4, r4, #1
   165c0:	moveq	r3, #0
   165c4:	str	r3, [sp, #72]	; 0x48
   165c8:	ldr	r3, [sp, #28]
   165cc:	add	r3, r3, #1
   165d0:	b	15d88 <__assert_fail@plt+0x4974>
   165d4:	ldr	r3, [sp, #24]
   165d8:	and	r3, r3, r7
   165dc:	tst	r5, r3
   165e0:	moveq	r3, r6
   165e4:	beq	16174 <__assert_fail@plt+0x4d60>
   165e8:	mov	fp, #0
   165ec:	mov	r5, fp
   165f0:	b	16574 <__assert_fail@plt+0x5160>
   165f4:	mov	r3, #116	; 0x74
   165f8:	b	16174 <__assert_fail@plt+0x4d60>
   165fc:	mov	r3, #110	; 0x6e
   16600:	b	16174 <__assert_fail@plt+0x4d60>
   16604:	mov	r3, #97	; 0x61
   16608:	ldr	r2, [sp, #24]
   1660c:	cmp	r2, #0
   16610:	beq	16554 <__assert_fail@plt+0x5140>
   16614:	mov	r6, r3
   16618:	mov	r5, #0
   1661c:	b	1637c <__assert_fail@plt+0x4f68>
   16620:	mov	r3, #98	; 0x62
   16624:	b	16608 <__assert_fail@plt+0x51f4>
   16628:	mov	r3, #118	; 0x76
   1662c:	b	16608 <__assert_fail@plt+0x51f4>
   16630:	mov	r3, #102	; 0x66
   16634:	b	16608 <__assert_fail@plt+0x51f4>
   16638:	ldr	r3, [sp, #40]	; 0x28
   1663c:	cmn	r3, #1
   16640:	bne	16660 <__assert_fail@plt+0x524c>
   16644:	ldr	r3, [sp, #48]	; 0x30
   16648:	ldrb	r3, [r3, #1]
   1664c:	adds	r3, r3, #0
   16650:	movne	r3, #1
   16654:	cmp	r3, #0
   16658:	bne	16554 <__assert_fail@plt+0x5140>
   1665c:	b	16440 <__assert_fail@plt+0x502c>
   16660:	ldr	r3, [sp, #40]	; 0x28
   16664:	subs	r3, r3, #1
   16668:	b	16650 <__assert_fail@plt+0x523c>
   1666c:	mov	r3, #0
   16670:	mov	r2, #0
   16674:	strd	r2, [sp, #96]	; 0x60
   16678:	ldr	r3, [sp, #40]	; 0x28
   1667c:	cmn	r3, #1
   16680:	bne	16690 <__assert_fail@plt+0x527c>
   16684:	ldr	r0, [sp, #48]	; 0x30
   16688:	bl	112b8 <strlen@plt>
   1668c:	str	r0, [sp, #40]	; 0x28
   16690:	ldr	r5, [sp, #36]	; 0x24
   16694:	mov	r3, #0
   16698:	str	r3, [sp, #56]	; 0x38
   1669c:	ldr	r3, [sp, #28]
   166a0:	add	r0, sp, #92	; 0x5c
   166a4:	ldr	r1, [sp, #40]	; 0x28
   166a8:	ldr	r2, [sp, #56]	; 0x38
   166ac:	add	r2, r3, r2
   166b0:	ldr	r3, [sp, #48]	; 0x30
   166b4:	add	fp, r3, r2
   166b8:	sub	r2, r1, r2
   166bc:	add	r3, sp, #96	; 0x60
   166c0:	mov	r1, fp
   166c4:	bl	18f80 <__assert_fail@plt+0x7b6c>
   166c8:	subs	r2, r0, #0
   166cc:	beq	1670c <__assert_fail@plt+0x52f8>
   166d0:	cmn	r2, #1
   166d4:	beq	168e0 <__assert_fail@plt+0x54cc>
   166d8:	cmn	r2, #2
   166dc:	bne	16850 <__assert_fail@plt+0x543c>
   166e0:	ldr	r3, [sp, #28]
   166e4:	ldr	r2, [sp, #56]	; 0x38
   166e8:	add	r3, r3, r2
   166ec:	ldr	r2, [sp, #40]	; 0x28
   166f0:	cmp	r2, r3
   166f4:	bls	168e0 <__assert_fail@plt+0x54cc>
   166f8:	ldr	r2, [sp, #56]	; 0x38
   166fc:	ldr	r3, [sp, #80]	; 0x50
   16700:	ldrb	r5, [r3, r2]
   16704:	cmp	r5, #0
   16708:	bne	16840 <__assert_fail@plt+0x542c>
   1670c:	ldr	r3, [sp, #56]	; 0x38
   16710:	cmp	r3, #1
   16714:	bls	16138 <__assert_fail@plt+0x4d24>
   16718:	ldr	r3, [sp, #28]
   1671c:	mov	fp, #0
   16720:	mov	ip, #92	; 0x5c
   16724:	ldr	r2, [sp, #56]	; 0x38
   16728:	add	r3, r3, r2
   1672c:	ldr	r2, [sp, #24]
   16730:	str	r3, [sp, #36]	; 0x24
   16734:	eor	r3, r5, #1
   16738:	and	r3, r3, r2
   1673c:	mov	r2, #39	; 0x27
   16740:	uxtb	r3, r3
   16744:	cmp	r3, #0
   16748:	beq	168e8 <__assert_fail@plt+0x54d4>
   1674c:	sub	r0, sl, #2
   16750:	cmp	r7, #0
   16754:	clz	r0, r0
   16758:	lsr	r0, r0, #5
   1675c:	bne	1605c <__assert_fail@plt+0x4c48>
   16760:	ldr	r1, [sp, #52]	; 0x34
   16764:	eor	r1, r1, #1
   16768:	ands	r1, r0, r1
   1676c:	beq	1679c <__assert_fail@plt+0x5388>
   16770:	cmp	r9, r4
   16774:	add	r0, r4, #1
   16778:	str	r1, [sp, #52]	; 0x34
   1677c:	strbhi	r2, [r8, r4]
   16780:	cmp	r9, r0
   16784:	movhi	lr, #36	; 0x24
   16788:	strbhi	lr, [r8, r0]
   1678c:	add	r0, r4, #2
   16790:	add	r4, r4, #3
   16794:	cmp	r9, r0
   16798:	strbhi	r2, [r8, r0]
   1679c:	cmp	r9, r4
   167a0:	add	r0, r4, #1
   167a4:	mov	fp, r3
   167a8:	strbhi	ip, [r8, r4]
   167ac:	cmp	r9, r0
   167b0:	lsrhi	r1, r6, #6
   167b4:	addhi	r1, r1, #48	; 0x30
   167b8:	strbhi	r1, [r8, r0]
   167bc:	add	r0, r4, #2
   167c0:	add	r4, r4, #3
   167c4:	cmp	r9, r0
   167c8:	ubfxhi	r1, r6, #3, #3
   167cc:	and	r6, r6, #7
   167d0:	add	r6, r6, #48	; 0x30
   167d4:	addhi	r1, r1, #48	; 0x30
   167d8:	strbhi	r1, [r8, r0]
   167dc:	eor	r0, fp, #1
   167e0:	ldr	r1, [sp, #28]
   167e4:	ldr	lr, [sp, #52]	; 0x34
   167e8:	add	r1, r1, #1
   167ec:	and	r0, r0, lr
   167f0:	ldr	lr, [sp, #36]	; 0x24
   167f4:	cmp	r1, lr
   167f8:	bcs	16574 <__assert_fail@plt+0x5160>
   167fc:	cmp	r0, #0
   16800:	beq	16824 <__assert_fail@plt+0x5410>
   16804:	cmp	r9, r4
   16808:	add	r0, r4, #1
   1680c:	strbhi	r2, [r8, r4]
   16810:	cmp	r9, r0
   16814:	add	r4, r4, #2
   16818:	strbhi	r2, [r8, r0]
   1681c:	mov	r0, #0
   16820:	str	r0, [sp, #52]	; 0x34
   16824:	ldr	r0, [sp, #48]	; 0x30
   16828:	cmp	r9, r4
   1682c:	str	r1, [sp, #28]
   16830:	strbhi	r6, [r8, r4]
   16834:	add	r4, r4, #1
   16838:	ldrb	r6, [r0, r1]
   1683c:	b	16744 <__assert_fail@plt+0x5330>
   16840:	ldr	r3, [sp, #56]	; 0x38
   16844:	add	r3, r3, #1
   16848:	str	r3, [sp, #56]	; 0x38
   1684c:	b	166e0 <__assert_fail@plt+0x52cc>
   16850:	cmp	sl, #2
   16854:	movne	r3, #0
   16858:	andeq	r3, r7, #1
   1685c:	cmp	r3, #0
   16860:	movne	r1, #1
   16864:	bne	168c0 <__assert_fail@plt+0x54ac>
   16868:	ldr	r0, [sp, #92]	; 0x5c
   1686c:	str	r2, [sp, #84]	; 0x54
   16870:	bl	111c8 <iswprint@plt>
   16874:	ldr	r3, [sp, #56]	; 0x38
   16878:	cmp	r0, #0
   1687c:	add	r0, sp, #96	; 0x60
   16880:	moveq	r5, #0
   16884:	ldr	r2, [sp, #84]	; 0x54
   16888:	add	r3, r3, r2
   1688c:	str	r3, [sp, #56]	; 0x38
   16890:	bl	1115c <mbsinit@plt>
   16894:	cmp	r0, #0
   16898:	beq	1669c <__assert_fail@plt+0x5288>
   1689c:	b	1670c <__assert_fail@plt+0x52f8>
   168a0:	ldrb	r3, [fp, #1]!
   168a4:	cmp	r3, #94	; 0x5e
   168a8:	beq	16188 <__assert_fail@plt+0x4d74>
   168ac:	bhi	168cc <__assert_fail@plt+0x54b8>
   168b0:	sub	r3, r3, #91	; 0x5b
   168b4:	cmp	r3, #1
   168b8:	bls	16188 <__assert_fail@plt+0x4d74>
   168bc:	add	r1, r1, #1
   168c0:	cmp	r1, r2
   168c4:	bne	168a0 <__assert_fail@plt+0x548c>
   168c8:	b	16868 <__assert_fail@plt+0x5454>
   168cc:	cmp	r3, #96	; 0x60
   168d0:	beq	16188 <__assert_fail@plt+0x4d74>
   168d4:	cmp	r3, #124	; 0x7c
   168d8:	bne	168bc <__assert_fail@plt+0x54a8>
   168dc:	b	16188 <__assert_fail@plt+0x4d74>
   168e0:	mov	r5, #0
   168e4:	b	1670c <__assert_fail@plt+0x52f8>
   168e8:	ldr	r1, [sp, #64]	; 0x40
   168ec:	cmp	r1, #0
   168f0:	beq	167dc <__assert_fail@plt+0x53c8>
   168f4:	cmp	r9, r4
   168f8:	mov	r1, #0
   168fc:	strbhi	ip, [r8, r4]
   16900:	add	r4, r4, #1
   16904:	str	r1, [sp, #64]	; 0x40
   16908:	b	167dc <__assert_fail@plt+0x53c8>
   1690c:	mov	r5, fp
   16910:	ldr	fp, [sp, #24]
   16914:	mov	r6, #48	; 0x30
   16918:	b	16328 <__assert_fail@plt+0x4f14>
   1691c:	mov	r5, #0
   16920:	b	16328 <__assert_fail@plt+0x4f14>
   16924:	mov	r6, r1
   16928:	b	16554 <__assert_fail@plt+0x5140>
   1692c:	mov	r6, r1
   16930:	b	16544 <__assert_fail@plt+0x5130>
   16934:	ldr	r2, [sp, #28]
   16938:	ldr	r3, [sp, #40]	; 0x28
   1693c:	subs	r3, r3, r2
   16940:	movne	r3, #1
   16944:	b	15dac <__assert_fail@plt+0x4998>
   16948:	ldr	r3, [sp, #60]	; 0x3c
   1694c:	mov	sl, #2
   16950:	ldr	r7, [sp, #72]	; 0x48
   16954:	adds	r6, r3, #0
   16958:	mov	r5, r3
   1695c:	movne	r6, #1
   16960:	cmp	r9, #0
   16964:	movne	r6, #0
   16968:	cmp	r6, #0
   1696c:	bne	15d3c <__assert_fail@plt+0x4928>
   16970:	ldr	r3, [sp, #68]	; 0x44
   16974:	ldr	r2, [sp, #44]	; 0x2c
   16978:	cmp	r2, #0
   1697c:	moveq	r3, #0
   16980:	andne	r3, r3, #1
   16984:	cmp	r3, #0
   16988:	movne	r3, r2
   1698c:	subne	r3, r3, #1
   16990:	bne	169c0 <__assert_fail@plt+0x55ac>
   16994:	cmp	r9, r4
   16998:	movhi	r3, #0
   1699c:	strbhi	r3, [r8, r4]
   169a0:	mov	r0, r4
   169a4:	add	sp, sp, #108	; 0x6c
   169a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169ac:	mov	r3, r7
   169b0:	b	16974 <__assert_fail@plt+0x5560>
   169b4:	cmp	r9, r4
   169b8:	strbhi	r2, [r8, r4]
   169bc:	add	r4, r4, #1
   169c0:	ldrb	r2, [r3, #1]!
   169c4:	cmp	r2, #0
   169c8:	bne	169b4 <__assert_fail@plt+0x55a0>
   169cc:	b	16994 <__assert_fail@plt+0x5580>
   169d0:	ldrdeq	sl, [r1], -r4
   169d4:	andeq	sl, r1, r5, ror #21
   169d8:	andeq	sl, r1, sl, lsl #30
   169dc:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   169e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169e4:	sub	sp, sp, #52	; 0x34
   169e8:	mov	r6, r0
   169ec:	mov	r5, r3
   169f0:	mov	r8, r1
   169f4:	mov	r9, r2
   169f8:	bl	112e8 <__errno_location@plt>
   169fc:	ldr	r3, [r0]
   16a00:	cmn	r6, #-2147483647	; 0x80000001
   16a04:	str	r0, [sp, #24]
   16a08:	ldr	r7, [pc, #368]	; 16b80 <__assert_fail@plt+0x576c>
   16a0c:	str	r3, [sp, #32]
   16a10:	movne	r3, #0
   16a14:	moveq	r3, #1
   16a18:	orrs	r3, r3, r6, lsr #31
   16a1c:	ldr	r4, [r7]
   16a20:	beq	16a28 <__assert_fail@plt+0x5614>
   16a24:	bl	113f0 <abort@plt>
   16a28:	ldr	r2, [r7, #4]
   16a2c:	cmp	r2, r6
   16a30:	bgt	16aa0 <__assert_fail@plt+0x568c>
   16a34:	add	sl, r7, #8
   16a38:	mov	r3, #8
   16a3c:	cmp	r4, sl
   16a40:	add	r1, sp, #44	; 0x2c
   16a44:	str	r2, [sp, #44]	; 0x2c
   16a48:	sub	r2, r6, r2
   16a4c:	movne	r0, r4
   16a50:	moveq	r0, #0
   16a54:	add	r2, r2, #1
   16a58:	str	r3, [sp]
   16a5c:	mvn	r3, #-2147483648	; 0x80000000
   16a60:	bl	17c10 <__assert_fail@plt+0x67fc>
   16a64:	cmp	r4, sl
   16a68:	mov	fp, r0
   16a6c:	str	r0, [r7]
   16a70:	ldmeq	r4, {r0, r1}
   16a74:	mov	r4, fp
   16a78:	ldr	r2, [sp, #44]	; 0x2c
   16a7c:	stmeq	fp, {r0, r1}
   16a80:	mov	r1, #0
   16a84:	ldr	r0, [r7, #4]
   16a88:	sub	r2, r2, r0
   16a8c:	add	r0, fp, r0, lsl #3
   16a90:	lsl	r2, r2, #3
   16a94:	bl	1130c <memset@plt>
   16a98:	ldr	r3, [sp, #44]	; 0x2c
   16a9c:	str	r3, [r7, #4]
   16aa0:	ldr	r3, [r5, #4]
   16aa4:	add	sl, r4, r6, lsl #3
   16aa8:	mov	r2, r8
   16aac:	ldr	fp, [r4, r6, lsl #3]
   16ab0:	ldr	r7, [sl, #4]
   16ab4:	orr	r3, r3, #1
   16ab8:	str	r3, [sp, #28]
   16abc:	add	r3, r5, #8
   16ac0:	mov	r1, fp
   16ac4:	str	r3, [sp, #36]	; 0x24
   16ac8:	mov	r0, r7
   16acc:	ldr	r3, [r5, #44]	; 0x2c
   16ad0:	str	r3, [sp, #16]
   16ad4:	ldr	r3, [r5, #40]	; 0x28
   16ad8:	str	r3, [sp, #12]
   16adc:	add	r3, r5, #8
   16ae0:	str	r3, [sp, #8]
   16ae4:	ldr	r3, [sp, #28]
   16ae8:	str	r3, [sp, #4]
   16aec:	ldr	r3, [r5]
   16af0:	str	r3, [sp]
   16af4:	mov	r3, r9
   16af8:	bl	15cf0 <__assert_fail@plt+0x48dc>
   16afc:	cmp	fp, r0
   16b00:	bhi	16b68 <__assert_fail@plt+0x5754>
   16b04:	ldr	r3, [pc, #120]	; 16b84 <__assert_fail@plt+0x5770>
   16b08:	add	fp, r0, #1
   16b0c:	str	fp, [r4, r6, lsl #3]
   16b10:	cmp	r7, r3
   16b14:	beq	16b20 <__assert_fail@plt+0x570c>
   16b18:	mov	r0, r7
   16b1c:	bl	14304 <__assert_fail@plt+0x2ef0>
   16b20:	mov	r0, fp
   16b24:	bl	17b00 <__assert_fail@plt+0x66ec>
   16b28:	ldr	r3, [r5, #44]	; 0x2c
   16b2c:	mov	r2, r8
   16b30:	mov	r1, fp
   16b34:	str	r0, [sl, #4]
   16b38:	mov	r7, r0
   16b3c:	str	r3, [sp, #16]
   16b40:	ldr	r3, [r5, #40]	; 0x28
   16b44:	str	r3, [sp, #12]
   16b48:	add	r3, r5, #8
   16b4c:	str	r3, [sp, #8]
   16b50:	ldr	r3, [sp, #28]
   16b54:	str	r3, [sp, #4]
   16b58:	ldr	r3, [r5]
   16b5c:	str	r3, [sp]
   16b60:	mov	r3, r9
   16b64:	bl	15cf0 <__assert_fail@plt+0x48dc>
   16b68:	ldr	r3, [sp, #24]
   16b6c:	mov	r0, r7
   16b70:	ldr	r2, [sp, #32]
   16b74:	str	r2, [r3]
   16b78:	add	sp, sp, #52	; 0x34
   16b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b80:	andeq	ip, r2, r8, lsl #3
   16b84:			; <UNDEFINED> instruction: 0x0002c2b8
   16b88:	push	{r4, r5, r6, lr}
   16b8c:	mov	r5, r0
   16b90:	bl	112e8 <__errno_location@plt>
   16b94:	mov	r4, r0
   16b98:	cmp	r5, #0
   16b9c:	ldr	r0, [pc, #20]	; 16bb8 <__assert_fail@plt+0x57a4>
   16ba0:	mov	r1, #48	; 0x30
   16ba4:	movne	r0, r5
   16ba8:	ldr	r6, [r4]
   16bac:	bl	17d00 <__assert_fail@plt+0x68ec>
   16bb0:	str	r6, [r4]
   16bb4:	pop	{r4, r5, r6, pc}
   16bb8:			; <UNDEFINED> instruction: 0x0002c3b8
   16bbc:	ldr	r3, [pc, #12]	; 16bd0 <__assert_fail@plt+0x57bc>
   16bc0:	cmp	r0, #0
   16bc4:	moveq	r0, r3
   16bc8:	ldr	r0, [r0]
   16bcc:	bx	lr
   16bd0:			; <UNDEFINED> instruction: 0x0002c3b8
   16bd4:	ldr	r3, [pc, #12]	; 16be8 <__assert_fail@plt+0x57d4>
   16bd8:	cmp	r0, #0
   16bdc:	moveq	r0, r3
   16be0:	str	r1, [r0]
   16be4:	bx	lr
   16be8:			; <UNDEFINED> instruction: 0x0002c3b8
   16bec:	ldr	r3, [pc, #52]	; 16c28 <__assert_fail@plt+0x5814>
   16bf0:	cmp	r0, #0
   16bf4:	push	{lr}		; (str lr, [sp, #-4]!)
   16bf8:	lsr	lr, r1, #5
   16bfc:	and	r1, r1, #31
   16c00:	moveq	r0, r3
   16c04:	add	r3, r0, #8
   16c08:	ldr	ip, [r3, lr, lsl #2]
   16c0c:	lsr	r0, ip, r1
   16c10:	eor	r2, r2, r0
   16c14:	and	r0, r0, #1
   16c18:	and	r2, r2, #1
   16c1c:	eor	r1, ip, r2, lsl r1
   16c20:	str	r1, [r3, lr, lsl #2]
   16c24:	pop	{pc}		; (ldr pc, [sp], #4)
   16c28:			; <UNDEFINED> instruction: 0x0002c3b8
   16c2c:	ldr	r3, [pc, #16]	; 16c44 <__assert_fail@plt+0x5830>
   16c30:	cmp	r0, #0
   16c34:	movne	r3, r0
   16c38:	ldr	r0, [r3, #4]
   16c3c:	str	r1, [r3, #4]
   16c40:	bx	lr
   16c44:			; <UNDEFINED> instruction: 0x0002c3b8
   16c48:	ldr	r3, [pc, #44]	; 16c7c <__assert_fail@plt+0x5868>
   16c4c:	cmp	r0, #0
   16c50:	moveq	r0, r3
   16c54:	mov	r3, #10
   16c58:	cmp	r2, #0
   16c5c:	cmpne	r1, #0
   16c60:	str	r3, [r0]
   16c64:	bne	16c70 <__assert_fail@plt+0x585c>
   16c68:	push	{r4, lr}
   16c6c:	bl	113f0 <abort@plt>
   16c70:	str	r1, [r0, #40]	; 0x28
   16c74:	str	r2, [r0, #44]	; 0x2c
   16c78:	bx	lr
   16c7c:			; <UNDEFINED> instruction: 0x0002c3b8
   16c80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c84:	sub	sp, sp, #24
   16c88:	mov	sl, r3
   16c8c:	mov	r7, r0
   16c90:	mov	r8, r1
   16c94:	mov	r9, r2
   16c98:	ldr	r4, [sp, #56]	; 0x38
   16c9c:	ldr	r3, [pc, #88]	; 16cfc <__assert_fail@plt+0x58e8>
   16ca0:	cmp	r4, #0
   16ca4:	moveq	r4, r3
   16ca8:	bl	112e8 <__errno_location@plt>
   16cac:	ldr	r3, [r4, #44]	; 0x2c
   16cb0:	mov	r5, r0
   16cb4:	mov	r2, r9
   16cb8:	mov	r1, r8
   16cbc:	mov	r0, r7
   16cc0:	ldr	r6, [r5]
   16cc4:	str	r3, [sp, #16]
   16cc8:	ldr	r3, [r4, #40]	; 0x28
   16ccc:	str	r3, [sp, #12]
   16cd0:	add	r3, r4, #8
   16cd4:	str	r3, [sp, #8]
   16cd8:	ldr	r3, [r4, #4]
   16cdc:	str	r3, [sp, #4]
   16ce0:	ldr	r3, [r4]
   16ce4:	str	r3, [sp]
   16ce8:	mov	r3, sl
   16cec:	bl	15cf0 <__assert_fail@plt+0x48dc>
   16cf0:	str	r6, [r5]
   16cf4:	add	sp, sp, #24
   16cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16cfc:			; <UNDEFINED> instruction: 0x0002c3b8
   16d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d04:	cmp	r3, #0
   16d08:	sub	sp, sp, #44	; 0x2c
   16d0c:	mov	r6, r2
   16d10:	mov	sl, r1
   16d14:	mov	r9, r0
   16d18:	ldr	r4, [pc, #176]	; 16dd0 <__assert_fail@plt+0x59bc>
   16d1c:	movne	r4, r3
   16d20:	bl	112e8 <__errno_location@plt>
   16d24:	ldr	r3, [r0]
   16d28:	mov	r1, #0
   16d2c:	mov	r2, r9
   16d30:	mov	r8, r0
   16d34:	mov	r0, r1
   16d38:	ldr	r5, [r4, #4]
   16d3c:	add	fp, r4, #8
   16d40:	str	r3, [sp, #28]
   16d44:	ldr	r3, [r4, #44]	; 0x2c
   16d48:	cmp	r6, #0
   16d4c:	orreq	r5, r5, #1
   16d50:	str	r3, [sp, #16]
   16d54:	ldr	r3, [r4, #40]	; 0x28
   16d58:	stmib	sp, {r5, fp}
   16d5c:	str	r3, [sp, #12]
   16d60:	ldr	r3, [r4]
   16d64:	str	r3, [sp]
   16d68:	mov	r3, sl
   16d6c:	bl	15cf0 <__assert_fail@plt+0x48dc>
   16d70:	add	r1, r0, #1
   16d74:	mov	r7, r0
   16d78:	mov	r0, r1
   16d7c:	str	r1, [sp, #36]	; 0x24
   16d80:	bl	17b00 <__assert_fail@plt+0x66ec>
   16d84:	ldr	r3, [r4, #44]	; 0x2c
   16d88:	mov	r2, r9
   16d8c:	ldr	r1, [sp, #36]	; 0x24
   16d90:	str	r3, [sp, #16]
   16d94:	ldr	r3, [r4, #40]	; 0x28
   16d98:	stmib	sp, {r5, fp}
   16d9c:	str	r0, [sp, #32]
   16da0:	str	r3, [sp, #12]
   16da4:	ldr	r3, [r4]
   16da8:	str	r3, [sp]
   16dac:	mov	r3, sl
   16db0:	bl	15cf0 <__assert_fail@plt+0x48dc>
   16db4:	ldr	r3, [sp, #28]
   16db8:	cmp	r6, #0
   16dbc:	ldr	r0, [sp, #32]
   16dc0:	str	r3, [r8]
   16dc4:	strne	r7, [r6]
   16dc8:	add	sp, sp, #44	; 0x2c
   16dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dd0:			; <UNDEFINED> instruction: 0x0002c3b8
   16dd4:	mov	r3, r2
   16dd8:	mov	r2, #0
   16ddc:	b	16d00 <__assert_fail@plt+0x58ec>
   16de0:	push	{r4, r5, r6, r7, r8, lr}
   16de4:	mov	r6, #1
   16de8:	ldr	r4, [pc, #100]	; 16e54 <__assert_fail@plt+0x5a40>
   16dec:	ldr	r5, [r4]
   16df0:	add	r7, r5, #4
   16df4:	ldr	r3, [r4, #4]
   16df8:	cmp	r3, r6
   16dfc:	bgt	16e44 <__assert_fail@plt+0x5a30>
   16e00:	ldr	r6, [pc, #80]	; 16e58 <__assert_fail@plt+0x5a44>
   16e04:	ldr	r0, [r5, #4]
   16e08:	cmp	r0, r6
   16e0c:	beq	16e20 <__assert_fail@plt+0x5a0c>
   16e10:	bl	14304 <__assert_fail@plt+0x2ef0>
   16e14:	mov	r3, #256	; 0x100
   16e18:	str	r3, [r4, #8]
   16e1c:	str	r6, [r4, #12]
   16e20:	ldr	r6, [pc, #52]	; 16e5c <__assert_fail@plt+0x5a48>
   16e24:	cmp	r5, r6
   16e28:	beq	16e38 <__assert_fail@plt+0x5a24>
   16e2c:	mov	r0, r5
   16e30:	bl	14304 <__assert_fail@plt+0x2ef0>
   16e34:	str	r6, [r4]
   16e38:	mov	r3, #1
   16e3c:	str	r3, [r4, #4]
   16e40:	pop	{r4, r5, r6, r7, r8, pc}
   16e44:	ldr	r0, [r7, r6, lsl #3]
   16e48:	add	r6, r6, #1
   16e4c:	bl	14304 <__assert_fail@plt+0x2ef0>
   16e50:	b	16df4 <__assert_fail@plt+0x59e0>
   16e54:	andeq	ip, r2, r8, lsl #3
   16e58:			; <UNDEFINED> instruction: 0x0002c2b8
   16e5c:	muleq	r2, r0, r1
   16e60:	ldr	r3, [pc, #4]	; 16e6c <__assert_fail@plt+0x5a58>
   16e64:	mvn	r2, #0
   16e68:	b	169e0 <__assert_fail@plt+0x55cc>
   16e6c:			; <UNDEFINED> instruction: 0x0002c3b8
   16e70:	ldr	r3, [pc]	; 16e78 <__assert_fail@plt+0x5a64>
   16e74:	b	169e0 <__assert_fail@plt+0x55cc>
   16e78:			; <UNDEFINED> instruction: 0x0002c3b8
   16e7c:	mov	r1, r0
   16e80:	mov	r0, #0
   16e84:	b	16e60 <__assert_fail@plt+0x5a4c>
   16e88:	mov	r2, r1
   16e8c:	mov	r1, r0
   16e90:	mov	r0, #0
   16e94:	b	16e70 <__assert_fail@plt+0x5a5c>
   16e98:	push	{r4, r5, lr}
   16e9c:	sub	sp, sp, #52	; 0x34
   16ea0:	mov	r5, r2
   16ea4:	mov	r4, r0
   16ea8:	mov	r0, sp
   16eac:	bl	15b94 <__assert_fail@plt+0x4780>
   16eb0:	mov	r3, sp
   16eb4:	mvn	r2, #0
   16eb8:	mov	r1, r5
   16ebc:	mov	r0, r4
   16ec0:	bl	169e0 <__assert_fail@plt+0x55cc>
   16ec4:	add	sp, sp, #52	; 0x34
   16ec8:	pop	{r4, r5, pc}
   16ecc:	push	{r4, r5, r6, lr}
   16ed0:	sub	sp, sp, #48	; 0x30
   16ed4:	mov	r5, r2
   16ed8:	mov	r6, r3
   16edc:	mov	r4, r0
   16ee0:	mov	r0, sp
   16ee4:	bl	15b94 <__assert_fail@plt+0x4780>
   16ee8:	mov	r3, sp
   16eec:	mov	r2, r6
   16ef0:	mov	r1, r5
   16ef4:	mov	r0, r4
   16ef8:	bl	169e0 <__assert_fail@plt+0x55cc>
   16efc:	add	sp, sp, #48	; 0x30
   16f00:	pop	{r4, r5, r6, pc}
   16f04:	mov	r2, r1
   16f08:	mov	r1, r0
   16f0c:	mov	r0, #0
   16f10:	b	16e98 <__assert_fail@plt+0x5a84>
   16f14:	mov	r3, r2
   16f18:	mov	r2, r1
   16f1c:	mov	r1, r0
   16f20:	mov	r0, #0
   16f24:	b	16ecc <__assert_fail@plt+0x5ab8>
   16f28:	push	{r4, r5, r6, lr}
   16f2c:	mov	r4, r0
   16f30:	mov	r5, r1
   16f34:	mov	r6, r2
   16f38:	sub	sp, sp, #48	; 0x30
   16f3c:	mov	ip, sp
   16f40:	ldr	lr, [pc, #64]	; 16f88 <__assert_fail@plt+0x5b74>
   16f44:	ldm	lr!, {r0, r1, r2, r3}
   16f48:	stmia	ip!, {r0, r1, r2, r3}
   16f4c:	ldm	lr!, {r0, r1, r2, r3}
   16f50:	stmia	ip!, {r0, r1, r2, r3}
   16f54:	ldm	lr, {r0, r1, r2, r3}
   16f58:	stm	ip, {r0, r1, r2, r3}
   16f5c:	mov	r1, r6
   16f60:	mov	r2, #1
   16f64:	mov	r0, sp
   16f68:	bl	16bec <__assert_fail@plt+0x57d8>
   16f6c:	mov	r3, sp
   16f70:	mov	r2, r5
   16f74:	mov	r1, r4
   16f78:	mov	r0, #0
   16f7c:	bl	169e0 <__assert_fail@plt+0x55cc>
   16f80:	add	sp, sp, #48	; 0x30
   16f84:	pop	{r4, r5, r6, pc}
   16f88:			; <UNDEFINED> instruction: 0x0002c3b8
   16f8c:	mov	r2, r1
   16f90:	mvn	r1, #0
   16f94:	b	16f28 <__assert_fail@plt+0x5b14>
   16f98:	mov	r1, #58	; 0x3a
   16f9c:	b	16f8c <__assert_fail@plt+0x5b78>
   16fa0:	mov	r2, #58	; 0x3a
   16fa4:	b	16f28 <__assert_fail@plt+0x5b14>
   16fa8:	push	{r4, r5, lr}
   16fac:	sub	sp, sp, #100	; 0x64
   16fb0:	mov	r4, r0
   16fb4:	mov	r0, sp
   16fb8:	mov	r5, r2
   16fbc:	bl	15b94 <__assert_fail@plt+0x4780>
   16fc0:	mov	ip, sp
   16fc4:	add	lr, sp, #48	; 0x30
   16fc8:	ldm	ip!, {r0, r1, r2, r3}
   16fcc:	stmia	lr!, {r0, r1, r2, r3}
   16fd0:	ldm	ip!, {r0, r1, r2, r3}
   16fd4:	stmia	lr!, {r0, r1, r2, r3}
   16fd8:	ldm	ip, {r0, r1, r2, r3}
   16fdc:	stm	lr, {r0, r1, r2, r3}
   16fe0:	mov	r2, #1
   16fe4:	mov	r1, #58	; 0x3a
   16fe8:	add	r0, sp, #48	; 0x30
   16fec:	bl	16bec <__assert_fail@plt+0x57d8>
   16ff0:	add	r3, sp, #48	; 0x30
   16ff4:	mvn	r2, #0
   16ff8:	mov	r1, r5
   16ffc:	mov	r0, r4
   17000:	bl	169e0 <__assert_fail@plt+0x55cc>
   17004:	add	sp, sp, #100	; 0x64
   17008:	pop	{r4, r5, pc}
   1700c:	push	{r4, r5, r6, r7, lr}
   17010:	mov	r4, r0
   17014:	mov	r6, r1
   17018:	mov	r7, r2
   1701c:	mov	r5, r3
   17020:	sub	sp, sp, #52	; 0x34
   17024:	ldr	lr, [pc, #68]	; 17070 <__assert_fail@plt+0x5c5c>
   17028:	mov	ip, sp
   1702c:	ldm	lr!, {r0, r1, r2, r3}
   17030:	stmia	ip!, {r0, r1, r2, r3}
   17034:	ldm	lr!, {r0, r1, r2, r3}
   17038:	stmia	ip!, {r0, r1, r2, r3}
   1703c:	ldm	lr, {r0, r1, r2, r3}
   17040:	stm	ip, {r0, r1, r2, r3}
   17044:	mov	r2, r7
   17048:	mov	r1, r6
   1704c:	mov	r0, sp
   17050:	bl	16c48 <__assert_fail@plt+0x5834>
   17054:	ldr	r2, [sp, #72]	; 0x48
   17058:	mov	r3, sp
   1705c:	mov	r1, r5
   17060:	mov	r0, r4
   17064:	bl	169e0 <__assert_fail@plt+0x55cc>
   17068:	add	sp, sp, #52	; 0x34
   1706c:	pop	{r4, r5, r6, r7, pc}
   17070:			; <UNDEFINED> instruction: 0x0002c3b8
   17074:	mvn	ip, #0
   17078:	push	{r0, r1, r2, lr}
   1707c:	str	ip, [sp]
   17080:	bl	1700c <__assert_fail@plt+0x5bf8>
   17084:	add	sp, sp, #12
   17088:	pop	{pc}		; (ldr pc, [sp], #4)
   1708c:	mov	r3, r2
   17090:	mov	r2, r1
   17094:	mov	r1, r0
   17098:	mov	r0, #0
   1709c:	b	17074 <__assert_fail@plt+0x5c60>
   170a0:	push	{r0, r1, r2, lr}
   170a4:	str	r3, [sp]
   170a8:	mov	r3, r2
   170ac:	mov	r2, r1
   170b0:	mov	r1, r0
   170b4:	mov	r0, #0
   170b8:	bl	1700c <__assert_fail@plt+0x5bf8>
   170bc:	add	sp, sp, #12
   170c0:	pop	{pc}		; (ldr pc, [sp], #4)
   170c4:	ldr	r3, [pc]	; 170cc <__assert_fail@plt+0x5cb8>
   170c8:	b	169e0 <__assert_fail@plt+0x55cc>
   170cc:	muleq	r2, r8, r1
   170d0:	mov	r2, r1
   170d4:	mov	r1, r0
   170d8:	mov	r0, #0
   170dc:	b	170c4 <__assert_fail@plt+0x5cb0>
   170e0:	mvn	r2, #0
   170e4:	b	170c4 <__assert_fail@plt+0x5cb0>
   170e8:	mov	r1, r0
   170ec:	mov	r0, #0
   170f0:	b	170e0 <__assert_fail@plt+0x5ccc>
   170f4:	push	{r4, r5, r6, lr}
   170f8:	mov	r5, r1
   170fc:	mov	r1, #0
   17100:	mov	r4, r2
   17104:	bl	11378 <setlocale@plt>
   17108:	subs	r6, r0, #0
   1710c:	bne	17120 <__assert_fail@plt+0x5d0c>
   17110:	cmp	r4, #0
   17114:	mov	r0, #22
   17118:	strbne	r6, [r5]
   1711c:	pop	{r4, r5, r6, pc}
   17120:	bl	112b8 <strlen@plt>
   17124:	cmp	r4, r0
   17128:	bls	17144 <__assert_fail@plt+0x5d30>
   1712c:	add	r2, r0, #1
   17130:	mov	r1, r6
   17134:	mov	r0, r5
   17138:	bl	11150 <memcpy@plt>
   1713c:	mov	r0, #0
   17140:	pop	{r4, r5, r6, pc}
   17144:	cmp	r4, #0
   17148:	beq	17168 <__assert_fail@plt+0x5d54>
   1714c:	sub	r4, r4, #1
   17150:	mov	r1, r6
   17154:	mov	r2, r4
   17158:	mov	r0, r5
   1715c:	bl	11150 <memcpy@plt>
   17160:	mov	r3, #0
   17164:	strb	r3, [r5, r4]
   17168:	mov	r0, #34	; 0x22
   1716c:	pop	{r4, r5, r6, pc}
   17170:	mov	r1, #0
   17174:	b	11378 <setlocale@plt>
   17178:	subs	r1, r0, #0
   1717c:	beq	1718c <__assert_fail@plt+0x5d78>
   17180:	mov	r2, #1
   17184:	ldr	r0, [pc, #8]	; 17194 <__assert_fail@plt+0x5d80>
   17188:	b	112d0 <setenv@plt>
   1718c:	ldr	r0, [pc]	; 17194 <__assert_fail@plt+0x5d80>
   17190:	b	113cc <unsetenv@plt>
   17194:	andeq	sl, r1, r7, lsl r8
   17198:	push	{r4, r5, r6, r7, r8, lr}
   1719c:	subs	r7, r0, #0
   171a0:	moveq	r5, r7
   171a4:	beq	171b0 <__assert_fail@plt+0x5d9c>
   171a8:	bl	112b8 <strlen@plt>
   171ac:	add	r5, r0, #1
   171b0:	cmp	r5, #58	; 0x3a
   171b4:	movcs	r0, r5
   171b8:	movcc	r0, #58	; 0x3a
   171bc:	add	r0, r0, #9
   171c0:	bic	r0, r0, #3
   171c4:	bl	18c94 <__assert_fail@plt+0x7880>
   171c8:	subs	r4, r0, #0
   171cc:	beq	17208 <__assert_fail@plt+0x5df4>
   171d0:	mov	r6, #0
   171d4:	cmp	r7, r6
   171d8:	movne	r3, #1
   171dc:	moveq	r3, r6
   171e0:	str	r6, [r4]
   171e4:	strb	r3, [r4, #4]
   171e8:	strb	r6, [r4, #5]
   171ec:	beq	17208 <__assert_fail@plt+0x5df4>
   171f0:	add	r3, r4, #5
   171f4:	mov	r2, r5
   171f8:	mov	r1, r7
   171fc:	mov	r0, r3
   17200:	bl	11150 <memcpy@plt>
   17204:	strb	r6, [r0, r5]
   17208:	mov	r0, r4
   1720c:	pop	{r4, r5, r6, r7, r8, pc}
   17210:	push	{r4, r5, r6, r7, r8, lr}
   17214:	ldr	r5, [r1, #40]	; 0x28
   17218:	cmp	r5, #0
   1721c:	beq	17310 <__assert_fail@plt+0x5efc>
   17220:	cmp	r1, r5
   17224:	mov	r6, r0
   17228:	mov	r7, r1
   1722c:	bhi	1723c <__assert_fail@plt+0x5e28>
   17230:	add	r3, r1, #44	; 0x2c
   17234:	cmp	r5, r3
   17238:	bcc	17310 <__assert_fail@plt+0x5efc>
   1723c:	ldrb	r3, [r5]
   17240:	cmp	r3, #0
   17244:	addne	r4, r6, #5
   17248:	bne	17288 <__assert_fail@plt+0x5e74>
   1724c:	ldr	r4, [pc, #196]	; 17318 <__assert_fail@plt+0x5f04>
   17250:	b	1730c <__assert_fail@plt+0x5ef8>
   17254:	ldrb	r3, [r6, #4]
   17258:	cmp	r3, #0
   1725c:	beq	172b4 <__assert_fail@plt+0x5ea0>
   17260:	mov	r0, r4
   17264:	bl	112b8 <strlen@plt>
   17268:	add	r0, r0, #1
   1726c:	ldrb	r3, [r4, r0]!
   17270:	cmp	r3, #0
   17274:	bne	17288 <__assert_fail@plt+0x5e74>
   17278:	ldr	r3, [r6]
   1727c:	cmp	r3, #0
   17280:	addne	r4, r3, #5
   17284:	movne	r6, r3
   17288:	mov	r1, r5
   1728c:	mov	r0, r4
   17290:	bl	110e4 <strcmp@plt>
   17294:	cmp	r0, #0
   17298:	beq	1730c <__assert_fail@plt+0x5ef8>
   1729c:	ldrb	r3, [r4]
   172a0:	cmp	r3, #0
   172a4:	bne	17260 <__assert_fail@plt+0x5e4c>
   172a8:	add	r3, r6, #5
   172ac:	cmp	r4, r3
   172b0:	beq	17254 <__assert_fail@plt+0x5e40>
   172b4:	mov	r0, r5
   172b8:	bl	112b8 <strlen@plt>
   172bc:	add	r3, r6, #64	; 0x40
   172c0:	add	r8, r0, #1
   172c4:	sub	r3, r3, r4
   172c8:	cmp	r3, r8
   172cc:	bgt	172f4 <__assert_fail@plt+0x5ee0>
   172d0:	mov	r0, r5
   172d4:	bl	17198 <__assert_fail@plt+0x5d84>
   172d8:	cmp	r0, #0
   172dc:	str	r0, [r6]
   172e0:	movne	r3, #0
   172e4:	addne	r4, r0, #5
   172e8:	strbne	r3, [r0, #4]
   172ec:	bne	1730c <__assert_fail@plt+0x5ef8>
   172f0:	pop	{r4, r5, r6, r7, r8, pc}
   172f4:	mov	r2, r8
   172f8:	mov	r1, r5
   172fc:	mov	r0, r4
   17300:	bl	11150 <memcpy@plt>
   17304:	mov	r3, #0
   17308:	strb	r3, [r4, r8]
   1730c:	str	r4, [r7, #40]	; 0x28
   17310:	mov	r0, #1
   17314:	pop	{r4, r5, r6, r7, r8, pc}
   17318:	andeq	r9, r1, sl, ror #10
   1731c:	cmp	r0, #1
   17320:	bxeq	lr
   17324:	cmp	r0, #0
   17328:	bxeq	lr
   1732c:	push	{r4, lr}
   17330:	ldr	r4, [r0]
   17334:	bl	14304 <__assert_fail@plt+0x2ef0>
   17338:	cmp	r4, #0
   1733c:	mov	r0, r4
   17340:	bne	17330 <__assert_fail@plt+0x5f1c>
   17344:	pop	{r4, pc}
   17348:	push	{r4, r5, r6, lr}
   1734c:	mov	r6, r0
   17350:	ldr	r0, [pc, #148]	; 173ec <__assert_fail@plt+0x5fd8>
   17354:	bl	11234 <getenv@plt>
   17358:	subs	r5, r0, #0
   1735c:	ldrb	r4, [r6, #4]
   17360:	beq	173dc <__assert_fail@plt+0x5fc8>
   17364:	cmp	r4, #0
   17368:	beq	17380 <__assert_fail@plt+0x5f6c>
   1736c:	mov	r1, r5
   17370:	add	r0, r6, #5
   17374:	bl	110e4 <strcmp@plt>
   17378:	clz	r4, r0
   1737c:	lsr	r4, r4, #5
   17380:	cmp	r4, #0
   17384:	movne	r5, #1
   17388:	bne	173d4 <__assert_fail@plt+0x5fc0>
   1738c:	mov	r0, r5
   17390:	bl	17198 <__assert_fail@plt+0x5d84>
   17394:	subs	r5, r0, #0
   17398:	beq	173d4 <__assert_fail@plt+0x5fc0>
   1739c:	ldrb	r3, [r6, #4]
   173a0:	cmp	r3, #0
   173a4:	addne	r0, r6, #5
   173a8:	moveq	r0, r4
   173ac:	bl	17178 <__assert_fail@plt+0x5d64>
   173b0:	cmp	r0, #0
   173b4:	beq	173e4 <__assert_fail@plt+0x5fd0>
   173b8:	bl	112e8 <__errno_location@plt>
   173bc:	mov	r4, r0
   173c0:	mov	r0, r5
   173c4:	ldr	r6, [r4]
   173c8:	mov	r5, #0
   173cc:	bl	1731c <__assert_fail@plt+0x5f08>
   173d0:	str	r6, [r4]
   173d4:	mov	r0, r5
   173d8:	pop	{r4, r5, r6, pc}
   173dc:	clz	r4, r4
   173e0:	b	1737c <__assert_fail@plt+0x5f68>
   173e4:	bl	111d4 <tzset@plt>
   173e8:	b	173d4 <__assert_fail@plt+0x5fc0>
   173ec:	andeq	sl, r1, r7, lsl r8
   173f0:	push	{r4, r5, r6, r7, r8, lr}
   173f4:	mov	r5, r0
   173f8:	bl	112e8 <__errno_location@plt>
   173fc:	mov	r4, r0
   17400:	ldr	r7, [r0]
   17404:	ldrb	r0, [r5, #4]
   17408:	cmp	r0, #0
   1740c:	addne	r0, r5, #5
   17410:	bl	17178 <__assert_fail@plt+0x5d64>
   17414:	cmp	r0, #0
   17418:	movne	r6, #0
   1741c:	ldrne	r7, [r4]
   17420:	bne	1742c <__assert_fail@plt+0x6018>
   17424:	mov	r6, #1
   17428:	bl	111d4 <tzset@plt>
   1742c:	mov	r0, r5
   17430:	bl	1731c <__assert_fail@plt+0x5f08>
   17434:	mov	r0, r6
   17438:	str	r7, [r4]
   1743c:	pop	{r4, r5, r6, r7, r8, pc}
   17440:	push	{r4, r5, r6, r7, r8, lr}
   17444:	subs	r7, r0, #0
   17448:	mov	r5, r1
   1744c:	mov	r4, r2
   17450:	bne	17464 <__assert_fail@plt+0x6050>
   17454:	mov	r0, r5
   17458:	mov	r1, r2
   1745c:	pop	{r4, r5, r6, r7, r8, lr}
   17460:	b	110d8 <gmtime_r@plt>
   17464:	bl	17348 <__assert_fail@plt+0x5f34>
   17468:	subs	r6, r0, #0
   1746c:	beq	174b4 <__assert_fail@plt+0x60a0>
   17470:	mov	r0, r5
   17474:	mov	r1, r4
   17478:	bl	111a4 <localtime_r@plt>
   1747c:	subs	r5, r0, #0
   17480:	beq	174c0 <__assert_fail@plt+0x60ac>
   17484:	mov	r1, r4
   17488:	mov	r0, r7
   1748c:	bl	17210 <__assert_fail@plt+0x5dfc>
   17490:	cmp	r6, #1
   17494:	mov	r5, r0
   17498:	beq	174ac <__assert_fail@plt+0x6098>
   1749c:	mov	r0, r6
   174a0:	bl	173f0 <__assert_fail@plt+0x5fdc>
   174a4:	cmp	r0, #0
   174a8:	beq	174b4 <__assert_fail@plt+0x60a0>
   174ac:	cmp	r5, #0
   174b0:	bne	174b8 <__assert_fail@plt+0x60a4>
   174b4:	mov	r4, #0
   174b8:	mov	r0, r4
   174bc:	pop	{r4, r5, r6, r7, r8, pc}
   174c0:	cmp	r6, #1
   174c4:	bne	1749c <__assert_fail@plt+0x6088>
   174c8:	b	174b4 <__assert_fail@plt+0x60a0>
   174cc:	push	{r4, r5, r6, r7, lr}
   174d0:	subs	r7, r0, #0
   174d4:	sub	sp, sp, #52	; 0x34
   174d8:	mov	r4, r1
   174dc:	bne	174f8 <__assert_fail@plt+0x60e4>
   174e0:	mov	r0, r1
   174e4:	bl	1139c <timegm@plt>
   174e8:	mov	r5, r0
   174ec:	mov	r0, r5
   174f0:	add	sp, sp, #52	; 0x34
   174f4:	pop	{r4, r5, r6, r7, pc}
   174f8:	bl	17348 <__assert_fail@plt+0x5f34>
   174fc:	subs	r6, r0, #0
   17500:	beq	175bc <__assert_fail@plt+0x61a8>
   17504:	ldr	r3, [r4]
   17508:	add	r0, sp, #4
   1750c:	str	r3, [sp, #4]
   17510:	ldr	r3, [r4, #4]
   17514:	str	r3, [sp, #8]
   17518:	ldr	r3, [r4, #8]
   1751c:	str	r3, [sp, #12]
   17520:	ldr	r3, [r4, #12]
   17524:	str	r3, [sp, #16]
   17528:	ldr	r3, [r4, #16]
   1752c:	str	r3, [sp, #20]
   17530:	ldr	r3, [r4, #20]
   17534:	str	r3, [sp, #24]
   17538:	mvn	r3, #0
   1753c:	str	r3, [sp, #32]
   17540:	ldr	r3, [r4, #32]
   17544:	str	r3, [sp, #36]	; 0x24
   17548:	bl	11108 <mktime@plt>
   1754c:	ldr	r3, [sp, #32]
   17550:	mov	r5, r0
   17554:	cmp	r3, #0
   17558:	blt	175b0 <__assert_fail@plt+0x619c>
   1755c:	mov	r0, r7
   17560:	add	r1, sp, #4
   17564:	bl	17210 <__assert_fail@plt+0x5dfc>
   17568:	cmp	r6, #1
   1756c:	mov	r7, r0
   17570:	beq	17584 <__assert_fail@plt+0x6170>
   17574:	mov	r0, r6
   17578:	bl	173f0 <__assert_fail@plt+0x5fdc>
   1757c:	cmp	r0, #0
   17580:	beq	175bc <__assert_fail@plt+0x61a8>
   17584:	cmp	r7, #0
   17588:	beq	175bc <__assert_fail@plt+0x61a8>
   1758c:	add	lr, sp, #4
   17590:	mov	ip, r4
   17594:	ldm	lr!, {r0, r1, r2, r3}
   17598:	stmia	ip!, {r0, r1, r2, r3}
   1759c:	ldm	lr!, {r0, r1, r2, r3}
   175a0:	stmia	ip!, {r0, r1, r2, r3}
   175a4:	ldm	lr, {r0, r1, r2}
   175a8:	stm	ip, {r0, r1, r2}
   175ac:	b	174ec <__assert_fail@plt+0x60d8>
   175b0:	cmp	r6, #1
   175b4:	movne	r7, #0
   175b8:	bne	17574 <__assert_fail@plt+0x6160>
   175bc:	mvn	r5, #0
   175c0:	b	174ec <__assert_fail@plt+0x60d8>
   175c4:	mov	r2, #3
   175c8:	mov	r1, #0
   175cc:	b	18d74 <__assert_fail@plt+0x7960>
   175d0:	push	{r4, r5, r6, lr}
   175d4:	cmp	r1, #0
   175d8:	sub	sp, sp, #32
   175dc:	mov	r5, r0
   175e0:	ldr	r4, [sp, #48]	; 0x30
   175e4:	ldr	r6, [sp, #52]	; 0x34
   175e8:	beq	1769c <__assert_fail@plt+0x6288>
   175ec:	strd	r2, [sp]
   175f0:	mov	r3, r1
   175f4:	mov	r1, #1
   175f8:	ldr	r2, [pc, #856]	; 17958 <__assert_fail@plt+0x6544>
   175fc:	bl	1133c <__fprintf_chk@plt>
   17600:	mov	r2, #5
   17604:	ldr	r1, [pc, #848]	; 1795c <__assert_fail@plt+0x6548>
   17608:	mov	r0, #0
   1760c:	bl	1118c <dcgettext@plt>
   17610:	movw	r3, #2022	; 0x7e6
   17614:	ldr	r2, [pc, #836]	; 17960 <__assert_fail@plt+0x654c>
   17618:	mov	r1, #1
   1761c:	str	r3, [sp]
   17620:	mov	r3, r0
   17624:	mov	r0, r5
   17628:	bl	1133c <__fprintf_chk@plt>
   1762c:	mov	r1, r5
   17630:	mov	r0, #10
   17634:	bl	11174 <fputc_unlocked@plt>
   17638:	mov	r2, #5
   1763c:	ldr	r1, [pc, #800]	; 17964 <__assert_fail@plt+0x6550>
   17640:	mov	r0, #0
   17644:	bl	1118c <dcgettext@plt>
   17648:	mov	r2, r0
   1764c:	mov	r1, #1
   17650:	ldr	r3, [pc, #784]	; 17968 <__assert_fail@plt+0x6554>
   17654:	mov	r0, r5
   17658:	bl	1133c <__fprintf_chk@plt>
   1765c:	mov	r1, r5
   17660:	mov	r0, #10
   17664:	bl	11174 <fputc_unlocked@plt>
   17668:	cmp	r6, #9
   1766c:	ldrls	pc, [pc, r6, lsl #2]
   17670:	b	1794c <__assert_fail@plt+0x6538>
   17674:	andeq	r7, r1, ip, lsl #15
   17678:			; <UNDEFINED> instruction: 0x000176b4
   1767c:	andeq	r7, r1, r0, ror #13
   17680:	andeq	r7, r1, r4, lsl r7
   17684:	andeq	r7, r1, r0, asr r7
   17688:	muleq	r1, r4, r7
   1768c:	ldrdeq	r7, [r1], -ip
   17690:	andeq	r7, r1, ip, lsr #16
   17694:	andeq	r7, r1, r4, lsl #17
   17698:	andeq	r7, r1, r4, ror #17
   1769c:	mov	r1, #1
   176a0:	str	r3, [sp]
   176a4:	mov	r3, r2
   176a8:	ldr	r2, [pc, #700]	; 1796c <__assert_fail@plt+0x6558>
   176ac:	bl	1133c <__fprintf_chk@plt>
   176b0:	b	17600 <__assert_fail@plt+0x61ec>
   176b4:	mov	r2, #5
   176b8:	ldr	r1, [pc, #688]	; 17970 <__assert_fail@plt+0x655c>
   176bc:	mov	r0, #0
   176c0:	bl	1118c <dcgettext@plt>
   176c4:	ldr	r3, [r4]
   176c8:	mov	r2, r0
   176cc:	mov	r1, #1
   176d0:	mov	r0, r5
   176d4:	add	sp, sp, #32
   176d8:	pop	{r4, r5, r6, lr}
   176dc:	b	1133c <__fprintf_chk@plt>
   176e0:	mov	r2, #5
   176e4:	ldr	r1, [pc, #648]	; 17974 <__assert_fail@plt+0x6560>
   176e8:	mov	r0, #0
   176ec:	bl	1118c <dcgettext@plt>
   176f0:	ldr	r3, [r4, #4]
   176f4:	mov	r2, r0
   176f8:	mov	r1, #1
   176fc:	mov	r0, r5
   17700:	str	r3, [sp, #48]	; 0x30
   17704:	ldr	r3, [r4]
   17708:	add	sp, sp, #32
   1770c:	pop	{r4, r5, r6, lr}
   17710:	b	1133c <__fprintf_chk@plt>
   17714:	mov	r2, #5
   17718:	ldr	r1, [pc, #600]	; 17978 <__assert_fail@plt+0x6564>
   1771c:	mov	r0, #0
   17720:	bl	1118c <dcgettext@plt>
   17724:	ldr	r3, [r4, #8]
   17728:	mov	r2, r0
   1772c:	mov	r1, #1
   17730:	mov	r0, r5
   17734:	str	r3, [sp, #52]	; 0x34
   17738:	ldr	r3, [r4, #4]
   1773c:	str	r3, [sp, #48]	; 0x30
   17740:	ldr	r3, [r4]
   17744:	add	sp, sp, #32
   17748:	pop	{r4, r5, r6, lr}
   1774c:	b	1133c <__fprintf_chk@plt>
   17750:	mov	r2, #5
   17754:	ldr	r1, [pc, #544]	; 1797c <__assert_fail@plt+0x6568>
   17758:	mov	r0, #0
   1775c:	bl	1118c <dcgettext@plt>
   17760:	ldr	r3, [r4, #12]
   17764:	mov	r2, r0
   17768:	mov	r1, #1
   1776c:	mov	r0, r5
   17770:	str	r3, [sp, #8]
   17774:	ldr	r3, [r4, #8]
   17778:	str	r3, [sp, #4]
   1777c:	ldr	r3, [r4, #4]
   17780:	str	r3, [sp]
   17784:	ldr	r3, [r4]
   17788:	bl	1133c <__fprintf_chk@plt>
   1778c:	add	sp, sp, #32
   17790:	pop	{r4, r5, r6, pc}
   17794:	mov	r2, #5
   17798:	ldr	r1, [pc, #480]	; 17980 <__assert_fail@plt+0x656c>
   1779c:	mov	r0, #0
   177a0:	bl	1118c <dcgettext@plt>
   177a4:	ldr	r3, [r4, #16]
   177a8:	mov	r2, r0
   177ac:	mov	r1, #1
   177b0:	mov	r0, r5
   177b4:	str	r3, [sp, #12]
   177b8:	ldr	r3, [r4, #12]
   177bc:	str	r3, [sp, #8]
   177c0:	ldr	r3, [r4, #8]
   177c4:	str	r3, [sp, #4]
   177c8:	ldr	r3, [r4, #4]
   177cc:	str	r3, [sp]
   177d0:	ldr	r3, [r4]
   177d4:	bl	1133c <__fprintf_chk@plt>
   177d8:	b	1778c <__assert_fail@plt+0x6378>
   177dc:	mov	r2, #5
   177e0:	ldr	r1, [pc, #412]	; 17984 <__assert_fail@plt+0x6570>
   177e4:	mov	r0, #0
   177e8:	bl	1118c <dcgettext@plt>
   177ec:	ldr	r3, [r4, #20]
   177f0:	mov	r2, r0
   177f4:	mov	r1, #1
   177f8:	mov	r0, r5
   177fc:	str	r3, [sp, #16]
   17800:	ldr	r3, [r4, #16]
   17804:	str	r3, [sp, #12]
   17808:	ldr	r3, [r4, #12]
   1780c:	str	r3, [sp, #8]
   17810:	ldr	r3, [r4, #8]
   17814:	str	r3, [sp, #4]
   17818:	ldr	r3, [r4, #4]
   1781c:	str	r3, [sp]
   17820:	ldr	r3, [r4]
   17824:	bl	1133c <__fprintf_chk@plt>
   17828:	b	1778c <__assert_fail@plt+0x6378>
   1782c:	mov	r2, #5
   17830:	ldr	r1, [pc, #336]	; 17988 <__assert_fail@plt+0x6574>
   17834:	mov	r0, #0
   17838:	bl	1118c <dcgettext@plt>
   1783c:	ldr	r3, [r4, #24]
   17840:	mov	r2, r0
   17844:	mov	r1, #1
   17848:	mov	r0, r5
   1784c:	str	r3, [sp, #20]
   17850:	ldr	r3, [r4, #20]
   17854:	str	r3, [sp, #16]
   17858:	ldr	r3, [r4, #16]
   1785c:	str	r3, [sp, #12]
   17860:	ldr	r3, [r4, #12]
   17864:	str	r3, [sp, #8]
   17868:	ldr	r3, [r4, #8]
   1786c:	str	r3, [sp, #4]
   17870:	ldr	r3, [r4, #4]
   17874:	str	r3, [sp]
   17878:	ldr	r3, [r4]
   1787c:	bl	1133c <__fprintf_chk@plt>
   17880:	b	1778c <__assert_fail@plt+0x6378>
   17884:	mov	r2, #5
   17888:	ldr	r1, [pc, #252]	; 1798c <__assert_fail@plt+0x6578>
   1788c:	mov	r0, #0
   17890:	bl	1118c <dcgettext@plt>
   17894:	ldr	r3, [r4, #28]
   17898:	mov	r2, r0
   1789c:	mov	r1, #1
   178a0:	mov	r0, r5
   178a4:	str	r3, [sp, #24]
   178a8:	ldr	r3, [r4, #24]
   178ac:	str	r3, [sp, #20]
   178b0:	ldr	r3, [r4, #20]
   178b4:	str	r3, [sp, #16]
   178b8:	ldr	r3, [r4, #16]
   178bc:	str	r3, [sp, #12]
   178c0:	ldr	r3, [r4, #12]
   178c4:	str	r3, [sp, #8]
   178c8:	ldr	r3, [r4, #8]
   178cc:	str	r3, [sp, #4]
   178d0:	ldr	r3, [r4, #4]
   178d4:	str	r3, [sp]
   178d8:	ldr	r3, [r4]
   178dc:	bl	1133c <__fprintf_chk@plt>
   178e0:	b	1778c <__assert_fail@plt+0x6378>
   178e4:	ldr	r1, [pc, #164]	; 17990 <__assert_fail@plt+0x657c>
   178e8:	mov	r2, #5
   178ec:	mov	r0, #0
   178f0:	bl	1118c <dcgettext@plt>
   178f4:	ldr	r3, [r4, #32]
   178f8:	mov	r2, r0
   178fc:	mov	r1, #1
   17900:	mov	r0, r5
   17904:	str	r3, [sp, #28]
   17908:	ldr	r3, [r4, #28]
   1790c:	str	r3, [sp, #24]
   17910:	ldr	r3, [r4, #24]
   17914:	str	r3, [sp, #20]
   17918:	ldr	r3, [r4, #20]
   1791c:	str	r3, [sp, #16]
   17920:	ldr	r3, [r4, #16]
   17924:	str	r3, [sp, #12]
   17928:	ldr	r3, [r4, #12]
   1792c:	str	r3, [sp, #8]
   17930:	ldr	r3, [r4, #8]
   17934:	str	r3, [sp, #4]
   17938:	ldr	r3, [r4, #4]
   1793c:	str	r3, [sp]
   17940:	ldr	r3, [r4]
   17944:	bl	1133c <__fprintf_chk@plt>
   17948:	b	1778c <__assert_fail@plt+0x6378>
   1794c:	mov	r2, #5
   17950:	ldr	r1, [pc, #60]	; 17994 <__assert_fail@plt+0x6580>
   17954:	b	178ec <__assert_fail@plt+0x64d8>
   17958:	andeq	sl, r1, r3, lsr fp
   1795c:	andeq	sl, r1, r6, asr #22
   17960:	andeq	sl, r1, r4, lsl lr
   17964:	andeq	sl, r1, sl, asr #22
   17968:	strdeq	sl, [r1], -r5
   1796c:	andeq	sl, r1, pc, lsr fp
   17970:	andeq	sl, r1, r7, lsl ip
   17974:	andeq	sl, r1, r7, lsr #24
   17978:	andeq	sl, r1, lr, lsr ip
   1797c:	andeq	sl, r1, sl, asr ip
   17980:	andeq	sl, r1, sl, ror ip
   17984:	muleq	r1, lr, ip
   17988:	andeq	sl, r1, r6, asr #25
   1798c:	strdeq	sl, [r1], -r2
   17990:	andeq	sl, r1, r2, lsr #26
   17994:	andeq	sl, r1, r6, asr sp
   17998:	push	{r0, r1, r4, lr}
   1799c:	mov	ip, #0
   179a0:	ldr	lr, [sp, #16]
   179a4:	ldr	r4, [lr, ip, lsl #2]
   179a8:	cmp	r4, #0
   179ac:	bne	179c4 <__assert_fail@plt+0x65b0>
   179b0:	str	lr, [sp]
   179b4:	str	ip, [sp, #4]
   179b8:	bl	175d0 <__assert_fail@plt+0x61bc>
   179bc:	add	sp, sp, #8
   179c0:	pop	{r4, pc}
   179c4:	add	ip, ip, #1
   179c8:	b	179a4 <__assert_fail@plt+0x6590>
   179cc:	push	{r4, r5, r6, lr}
   179d0:	sub	sp, sp, #48	; 0x30
   179d4:	mov	ip, #0
   179d8:	add	lr, sp, #8
   179dc:	mov	r5, lr
   179e0:	ldr	r6, [sp, #64]	; 0x40
   179e4:	ldr	r4, [r6, ip, lsl #2]
   179e8:	cmp	r4, #0
   179ec:	str	r4, [lr], #4
   179f0:	beq	17a00 <__assert_fail@plt+0x65ec>
   179f4:	add	ip, ip, #1
   179f8:	cmp	ip, #10
   179fc:	bne	179e4 <__assert_fail@plt+0x65d0>
   17a00:	stm	sp, {r5, ip}
   17a04:	bl	175d0 <__assert_fail@plt+0x61bc>
   17a08:	add	sp, sp, #48	; 0x30
   17a0c:	pop	{r4, r5, r6, pc}
   17a10:	push	{r3}		; (str r3, [sp, #-4]!)
   17a14:	push	{r0, r1, r2, r3, lr}
   17a18:	add	r3, sp, #24
   17a1c:	str	r3, [sp]
   17a20:	str	r3, [sp, #12]
   17a24:	ldr	r3, [sp, #20]
   17a28:	bl	179cc <__assert_fail@plt+0x65b8>
   17a2c:	add	sp, sp, #16
   17a30:	pop	{lr}		; (ldr lr, [sp], #4)
   17a34:	add	sp, sp, #4
   17a38:	bx	lr
   17a3c:	ldr	r3, [pc, #116]	; 17ab8 <__assert_fail@plt+0x66a4>
   17a40:	mov	r0, #10
   17a44:	push	{r4, lr}
   17a48:	ldr	r1, [r3]
   17a4c:	bl	11174 <fputc_unlocked@plt>
   17a50:	mov	r2, #5
   17a54:	ldr	r1, [pc, #96]	; 17abc <__assert_fail@plt+0x66a8>
   17a58:	mov	r0, #0
   17a5c:	bl	1118c <dcgettext@plt>
   17a60:	mov	r1, r0
   17a64:	ldr	r2, [pc, #84]	; 17ac0 <__assert_fail@plt+0x66ac>
   17a68:	mov	r0, #1
   17a6c:	bl	11318 <__printf_chk@plt>
   17a70:	mov	r2, #5
   17a74:	ldr	r1, [pc, #72]	; 17ac4 <__assert_fail@plt+0x66b0>
   17a78:	mov	r0, #0
   17a7c:	bl	1118c <dcgettext@plt>
   17a80:	mov	r1, r0
   17a84:	ldr	r3, [pc, #60]	; 17ac8 <__assert_fail@plt+0x66b4>
   17a88:	mov	r0, #1
   17a8c:	ldr	r2, [pc, #56]	; 17acc <__assert_fail@plt+0x66b8>
   17a90:	bl	11318 <__printf_chk@plt>
   17a94:	mov	r2, #5
   17a98:	ldr	r1, [pc, #48]	; 17ad0 <__assert_fail@plt+0x66bc>
   17a9c:	mov	r0, #0
   17aa0:	bl	1118c <dcgettext@plt>
   17aa4:	mov	r1, r0
   17aa8:	ldr	r2, [pc, #36]	; 17ad4 <__assert_fail@plt+0x66c0>
   17aac:	mov	r0, #1
   17ab0:	pop	{r4, lr}
   17ab4:	b	11318 <__printf_chk@plt>
   17ab8:	andeq	ip, r2, r4, ror #3
   17abc:	muleq	r1, r2, sp
   17ac0:	andeq	sl, r1, r6, lsr #27
   17ac4:			; <UNDEFINED> instruction: 0x0001adbc
   17ac8:	muleq	r1, r5, r5
   17acc:			; <UNDEFINED> instruction: 0x0001a5bd
   17ad0:	ldrdeq	sl, [r1], -r0
   17ad4:	strdeq	sl, [r1], -r7
   17ad8:	push	{r4, lr}
   17adc:	bl	18c94 <__assert_fail@plt+0x7880>
   17ae0:	cmp	r0, #0
   17ae4:	popne	{r4, pc}
   17ae8:	bl	17d90 <__assert_fail@plt+0x697c>
   17aec:	push	{r4, lr}
   17af0:	bl	18c94 <__assert_fail@plt+0x7880>
   17af4:	cmp	r0, #0
   17af8:	popne	{r4, pc}
   17afc:	bl	17d90 <__assert_fail@plt+0x697c>
   17b00:	b	17ad8 <__assert_fail@plt+0x66c4>
   17b04:	push	{r4, r5, r6, lr}
   17b08:	mov	r5, r0
   17b0c:	mov	r4, r1
   17b10:	bl	18cc0 <__assert_fail@plt+0x78ac>
   17b14:	cmp	r0, #0
   17b18:	popne	{r4, r5, r6, pc}
   17b1c:	adds	r4, r4, #0
   17b20:	movne	r4, #1
   17b24:	cmp	r5, #0
   17b28:	moveq	r4, #1
   17b2c:	cmp	r4, #0
   17b30:	popeq	{r4, r5, r6, pc}
   17b34:	bl	17d90 <__assert_fail@plt+0x697c>
   17b38:	push	{r4, lr}
   17b3c:	bl	18f28 <__assert_fail@plt+0x7b14>
   17b40:	cmp	r0, #0
   17b44:	popne	{r4, pc}
   17b48:	bl	17d90 <__assert_fail@plt+0x697c>
   17b4c:	push	{r4, r5, r6, lr}
   17b50:	mov	r6, r0
   17b54:	mov	r5, r1
   17b58:	mov	r4, r2
   17b5c:	bl	18fd0 <__assert_fail@plt+0x7bbc>
   17b60:	cmp	r0, #0
   17b64:	popne	{r4, r5, r6, pc}
   17b68:	cmp	r6, #0
   17b6c:	beq	17b7c <__assert_fail@plt+0x6768>
   17b70:	cmp	r5, #0
   17b74:	cmpne	r4, #0
   17b78:	popeq	{r4, r5, r6, pc}
   17b7c:	bl	17d90 <__assert_fail@plt+0x697c>
   17b80:	b	17b4c <__assert_fail@plt+0x6738>
   17b84:	push	{r4, lr}
   17b88:	bl	18f38 <__assert_fail@plt+0x7b24>
   17b8c:	cmp	r0, #0
   17b90:	popne	{r4, pc}
   17b94:	bl	17d90 <__assert_fail@plt+0x697c>
   17b98:	mov	r2, r1
   17b9c:	mov	r1, r0
   17ba0:	mov	r0, #0
   17ba4:	b	17b4c <__assert_fail@plt+0x6738>
   17ba8:	mov	r2, r1
   17bac:	mov	r1, r0
   17bb0:	mov	r0, #0
   17bb4:	b	17b84 <__assert_fail@plt+0x6770>
   17bb8:	cmp	r0, #0
   17bbc:	push	{r4, r5, r6, lr}
   17bc0:	mov	r5, r1
   17bc4:	ldr	r4, [r1]
   17bc8:	bne	17bf4 <__assert_fail@plt+0x67e0>
   17bcc:	cmp	r4, #0
   17bd0:	bne	17be4 <__assert_fail@plt+0x67d0>
   17bd4:	mov	r4, #64	; 0x40
   17bd8:	udiv	r4, r4, r2
   17bdc:	cmp	r2, #64	; 0x40
   17be0:	addhi	r4, r4, #1
   17be4:	mov	r1, r4
   17be8:	bl	17b4c <__assert_fail@plt+0x6738>
   17bec:	str	r4, [r5]
   17bf0:	pop	{r4, r5, r6, pc}
   17bf4:	lsr	r3, r4, #1
   17bf8:	add	r3, r3, #1
   17bfc:	adds	r4, r4, r3
   17c00:	bcc	17be4 <__assert_fail@plt+0x67d0>
   17c04:	bl	17d90 <__assert_fail@plt+0x697c>
   17c08:	mov	r2, #1
   17c0c:	b	17bb8 <__assert_fail@plt+0x67a4>
   17c10:	ldr	ip, [r1]
   17c14:	push	{r4, r5, r6, r7, r8, lr}
   17c18:	mov	r5, r1
   17c1c:	mvn	r8, r3
   17c20:	lsr	r8, r8, #31
   17c24:	ldr	lr, [sp, #24]
   17c28:	asr	r1, ip, #1
   17c2c:	adds	r4, ip, r1
   17c30:	mvnvs	r4, #-2147483648	; 0x80000000
   17c34:	cmp	r3, r4
   17c38:	movge	r1, #0
   17c3c:	andlt	r1, r8, #1
   17c40:	cmp	r1, #0
   17c44:	movne	r4, r3
   17c48:	smull	r6, r7, r4, lr
   17c4c:	cmp	r7, r6, asr #31
   17c50:	bne	17c68 <__assert_fail@plt+0x6854>
   17c54:	cmp	r6, #63	; 0x3f
   17c58:	mov	r1, r6
   17c5c:	bgt	17c78 <__assert_fail@plt+0x6864>
   17c60:	mov	r1, #64	; 0x40
   17c64:	b	17c6c <__assert_fail@plt+0x6858>
   17c68:	mvn	r1, #-2147483648	; 0x80000000
   17c6c:	sdiv	r4, r1, lr
   17c70:	mls	r6, lr, r4, r1
   17c74:	sub	r1, r1, r6
   17c78:	cmp	r0, #0
   17c7c:	sub	r6, r4, ip
   17c80:	streq	r0, [r5]
   17c84:	cmp	r6, r2
   17c88:	bge	17cbc <__assert_fail@plt+0x68a8>
   17c8c:	adds	r4, ip, r2
   17c90:	bvs	17cb8 <__assert_fail@plt+0x68a4>
   17c94:	cmp	r4, r3
   17c98:	movle	r3, #0
   17c9c:	andgt	r3, r8, #1
   17ca0:	cmp	r3, #0
   17ca4:	bne	17cb8 <__assert_fail@plt+0x68a4>
   17ca8:	smull	r2, r3, r4, lr
   17cac:	cmp	r3, r2, asr #31
   17cb0:	mov	r1, r2
   17cb4:	beq	17cbc <__assert_fail@plt+0x68a8>
   17cb8:	bl	17d90 <__assert_fail@plt+0x697c>
   17cbc:	bl	17b04 <__assert_fail@plt+0x66f0>
   17cc0:	str	r4, [r5]
   17cc4:	pop	{r4, r5, r6, r7, r8, pc}
   17cc8:	push	{r4, lr}
   17ccc:	bl	18c40 <__assert_fail@plt+0x782c>
   17cd0:	cmp	r0, #0
   17cd4:	popne	{r4, pc}
   17cd8:	bl	17d90 <__assert_fail@plt+0x697c>
   17cdc:	mov	r1, #1
   17ce0:	b	17cc8 <__assert_fail@plt+0x68b4>
   17ce4:	push	{r4, lr}
   17ce8:	bl	18c40 <__assert_fail@plt+0x782c>
   17cec:	cmp	r0, #0
   17cf0:	popne	{r4, pc}
   17cf4:	bl	17d90 <__assert_fail@plt+0x697c>
   17cf8:	mov	r1, #1
   17cfc:	b	17ce4 <__assert_fail@plt+0x68d0>
   17d00:	push	{r4, r5, r6, lr}
   17d04:	mov	r4, r1
   17d08:	mov	r5, r0
   17d0c:	mov	r0, r1
   17d10:	bl	17ad8 <__assert_fail@plt+0x66c4>
   17d14:	mov	r2, r4
   17d18:	mov	r1, r5
   17d1c:	pop	{r4, r5, r6, lr}
   17d20:	b	11150 <memcpy@plt>
   17d24:	push	{r4, r5, r6, lr}
   17d28:	mov	r4, r1
   17d2c:	mov	r5, r0
   17d30:	mov	r0, r1
   17d34:	bl	17aec <__assert_fail@plt+0x66d8>
   17d38:	mov	r2, r4
   17d3c:	mov	r1, r5
   17d40:	pop	{r4, r5, r6, lr}
   17d44:	b	11150 <memcpy@plt>
   17d48:	push	{r4, r5, r6, lr}
   17d4c:	mov	r5, r0
   17d50:	add	r0, r1, #1
   17d54:	mov	r4, r1
   17d58:	bl	17aec <__assert_fail@plt+0x66d8>
   17d5c:	mov	r2, #0
   17d60:	mov	r1, r5
   17d64:	strb	r2, [r0, r4]
   17d68:	mov	r2, r4
   17d6c:	pop	{r4, r5, r6, lr}
   17d70:	b	11150 <memcpy@plt>
   17d74:	push	{r4, lr}
   17d78:	mov	r4, r0
   17d7c:	bl	112b8 <strlen@plt>
   17d80:	add	r1, r0, #1
   17d84:	mov	r0, r4
   17d88:	pop	{r4, lr}
   17d8c:	b	17d00 <__assert_fail@plt+0x68ec>
   17d90:	ldr	r3, [pc, #44]	; 17dc4 <__assert_fail@plt+0x69b0>
   17d94:	mov	r2, #5
   17d98:	mov	r0, #0
   17d9c:	push	{r4, lr}
   17da0:	ldr	r1, [pc, #32]	; 17dc8 <__assert_fail@plt+0x69b4>
   17da4:	ldr	r4, [r3]
   17da8:	bl	1118c <dcgettext@plt>
   17dac:	mov	r3, r0
   17db0:	ldr	r2, [pc, #20]	; 17dcc <__assert_fail@plt+0x69b8>
   17db4:	mov	r1, #0
   17db8:	mov	r0, r4
   17dbc:	bl	11228 <error@plt>
   17dc0:	bl	113f0 <abort@plt>
   17dc4:	andeq	ip, r2, r4, lsl #3
   17dc8:	andeq	sl, r1, r3, asr #28
   17dcc:	andeq	sl, r1, r4, lsl sl
   17dd0:	push	{r4, r5, r6, r7, r8, r9, lr}
   17dd4:	sub	sp, sp, #20
   17dd8:	mov	r9, r3
   17ddc:	mov	r8, r2
   17de0:	mov	r2, r1
   17de4:	mov	r1, #0
   17de8:	mov	r7, r0
   17dec:	ldr	r3, [sp, #56]	; 0x38
   17df0:	ldr	r6, [sp, #64]	; 0x40
   17df4:	str	r3, [sp]
   17df8:	add	r3, sp, #8
   17dfc:	bl	17fa0 <__assert_fail@plt+0x6b8c>
   17e00:	subs	r4, r0, #0
   17e04:	bne	17ea0 <__assert_fail@plt+0x6a8c>
   17e08:	ldrd	r4, [sp, #8]
   17e0c:	cmp	r4, r8
   17e10:	sbcs	r3, r5, r9
   17e14:	ldrd	r2, [sp, #48]	; 0x30
   17e18:	movlt	r1, #1
   17e1c:	movge	r1, #0
   17e20:	cmp	r2, r4
   17e24:	sbcs	r3, r3, r5
   17e28:	movge	r3, r1
   17e2c:	orrlt	r3, r1, #1
   17e30:	cmp	r3, #0
   17e34:	beq	17ec0 <__assert_fail@plt+0x6aac>
   17e38:	bl	112e8 <__errno_location@plt>
   17e3c:	cmp	r4, #1073741824	; 0x40000000
   17e40:	sbcs	r3, r5, #0
   17e44:	mov	r3, #75	; 0x4b
   17e48:	blt	17e88 <__assert_fail@plt+0x6a74>
   17e4c:	str	r3, [r0]
   17e50:	cmp	r6, #0
   17e54:	moveq	r6, #1
   17e58:	bl	112e8 <__errno_location@plt>
   17e5c:	ldr	r4, [r0]
   17e60:	mov	r0, r7
   17e64:	cmp	r4, #22
   17e68:	moveq	r4, #0
   17e6c:	bl	170e8 <__assert_fail@plt+0x5cd4>
   17e70:	ldr	r2, [pc, #88]	; 17ed0 <__assert_fail@plt+0x6abc>
   17e74:	mov	r1, r4
   17e78:	str	r0, [sp]
   17e7c:	mov	r0, r6
   17e80:	ldr	r3, [sp, #60]	; 0x3c
   17e84:	bl	11228 <error@plt>
   17e88:	mov	r8, #-1073741824	; 0xc0000000
   17e8c:	mvn	r9, #0
   17e90:	cmp	r4, r8
   17e94:	sbcs	r2, r5, r9
   17e98:	movge	r3, #34	; 0x22
   17e9c:	b	17e4c <__assert_fail@plt+0x6a38>
   17ea0:	bl	112e8 <__errno_location@plt>
   17ea4:	cmp	r4, #1
   17ea8:	moveq	r3, #75	; 0x4b
   17eac:	beq	17e4c <__assert_fail@plt+0x6a38>
   17eb0:	cmp	r4, #3
   17eb4:	bne	17e50 <__assert_fail@plt+0x6a3c>
   17eb8:	mov	r3, #0
   17ebc:	b	17e4c <__assert_fail@plt+0x6a38>
   17ec0:	mov	r0, r4
   17ec4:	mov	r1, r5
   17ec8:	add	sp, sp, #20
   17ecc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17ed0:	andeq	sl, r1, r0, lsl sl
   17ed4:	mov	r1, #10
   17ed8:	b	17dd0 <__assert_fail@plt+0x69bc>
   17edc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ee0:	mov	r3, #0
   17ee4:	asr	r5, r1, #31
   17ee8:	mov	r4, r1
   17eec:	mov	ip, r3
   17ef0:	strd	r4, [sp]
   17ef4:	subs	r2, r2, #1
   17ef8:	bcs	17f08 <__assert_fail@plt+0x6af4>
   17efc:	mov	r0, r3
   17f00:	add	sp, sp, #12
   17f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f08:	ldrd	r4, [r0]
   17f0c:	mov	lr, #0
   17f10:	cmp	r5, r4, asr #31
   17f14:	smulleq	r8, r9, r4, r1
   17f18:	moveq	r6, r8
   17f1c:	moveq	sl, r9
   17f20:	beq	17f68 <__assert_fail@plt+0x6b54>
   17f24:	cmp	r5, #0
   17f28:	umull	r8, r9, r4, r1
   17f2c:	umull	r6, r7, r1, r5
   17f30:	bge	17f3c <__assert_fail@plt+0x6b28>
   17f34:	subs	r6, r6, ip
   17f38:	sbc	r7, r7, r1
   17f3c:	adds	sl, r6, r9
   17f40:	mov	fp, #0
   17f44:	adc	fp, r7, fp
   17f48:	cmp	fp, sl, asr #31
   17f4c:	ldrne	lr, [sp, #4]
   17f50:	moveq	r6, r8
   17f54:	umullne	r6, r7, r4, r1
   17f58:	mulne	sl, r4, lr
   17f5c:	movne	lr, #1
   17f60:	mlane	sl, r1, r5, sl
   17f64:	addne	sl, sl, r7
   17f68:	cmp	lr, #0
   17f6c:	beq	17f98 <__assert_fail@plt+0x6b84>
   17f70:	cmp	r4, #0
   17f74:	sbcs	lr, r5, #0
   17f78:	mov	lr, #1
   17f7c:	mvnge	r4, #0
   17f80:	mvnge	r5, #-2147483648	; 0x80000000
   17f84:	movlt	r4, #0
   17f88:	movlt	r5, #-2147483648	; 0x80000000
   17f8c:	strd	r4, [r0]
   17f90:	orr	r3, r3, lr
   17f94:	b	17ef4 <__assert_fail@plt+0x6ae0>
   17f98:	stm	r0, {r6, sl}
   17f9c:	b	17f90 <__assert_fail@plt+0x6b7c>
   17fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fa4:	cmp	r2, #36	; 0x24
   17fa8:	sub	sp, sp, #20
   17fac:	ldr	r5, [sp, #56]	; 0x38
   17fb0:	bls	17fc8 <__assert_fail@plt+0x6bb4>
   17fb4:	ldr	r3, [pc, #1064]	; 183e4 <__assert_fail@plt+0x6fd0>
   17fb8:	mov	r2, #85	; 0x55
   17fbc:	ldr	r1, [pc, #1060]	; 183e8 <__assert_fail@plt+0x6fd4>
   17fc0:	ldr	r0, [pc, #1060]	; 183ec <__assert_fail@plt+0x6fd8>
   17fc4:	bl	11414 <__assert_fail@plt>
   17fc8:	cmp	r1, #0
   17fcc:	mov	r6, r1
   17fd0:	mov	r8, r0
   17fd4:	addeq	r6, sp, #4
   17fd8:	mov	r9, r2
   17fdc:	mov	r7, r3
   17fe0:	bl	112e8 <__errno_location@plt>
   17fe4:	mov	sl, r0
   17fe8:	mov	r4, #0
   17fec:	mov	r2, r9
   17ff0:	mov	r1, r6
   17ff4:	mov	r0, r8
   17ff8:	str	r4, [sl]
   17ffc:	bl	11348 <strtoimax@plt>
   18000:	ldr	r9, [r6]
   18004:	strd	r0, [sp, #8]
   18008:	cmp	r9, r8
   1800c:	bne	18048 <__assert_fail@plt+0x6c34>
   18010:	cmp	r5, r4
   18014:	beq	18040 <__assert_fail@plt+0x6c2c>
   18018:	ldrb	r1, [r8]
   1801c:	cmp	r1, r4
   18020:	beq	18040 <__assert_fail@plt+0x6c2c>
   18024:	mov	r0, r5
   18028:	bl	112c4 <strchr@plt>
   1802c:	cmp	r0, r4
   18030:	movne	r2, #1
   18034:	movne	r3, #0
   18038:	strdne	r2, [sp, #8]
   1803c:	bne	1806c <__assert_fail@plt+0x6c58>
   18040:	mov	r4, #4
   18044:	b	18098 <__assert_fail@plt+0x6c84>
   18048:	ldr	r4, [sl]
   1804c:	cmp	r4, #0
   18050:	beq	18060 <__assert_fail@plt+0x6c4c>
   18054:	cmp	r4, #34	; 0x22
   18058:	bne	18040 <__assert_fail@plt+0x6c2c>
   1805c:	mov	r4, #1
   18060:	cmp	r5, #0
   18064:	strdeq	r0, [r7]
   18068:	beq	18098 <__assert_fail@plt+0x6c84>
   1806c:	ldrb	r8, [r9]
   18070:	cmp	r8, #0
   18074:	beq	18388 <__assert_fail@plt+0x6f74>
   18078:	mov	r1, r8
   1807c:	mov	r0, r5
   18080:	bl	112c4 <strchr@plt>
   18084:	cmp	r0, #0
   18088:	bne	180a4 <__assert_fail@plt+0x6c90>
   1808c:	ldrd	r2, [sp, #8]
   18090:	orr	r4, r4, #2
   18094:	strd	r2, [r7]
   18098:	mov	r0, r4
   1809c:	add	sp, sp, #20
   180a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180a4:	cmp	r8, #84	; 0x54
   180a8:	beq	180fc <__assert_fail@plt+0x6ce8>
   180ac:	bhi	180e4 <__assert_fail@plt+0x6cd0>
   180b0:	cmp	r8, #75	; 0x4b
   180b4:	beq	180fc <__assert_fail@plt+0x6ce8>
   180b8:	bhi	180d4 <__assert_fail@plt+0x6cc0>
   180bc:	cmp	r8, #69	; 0x45
   180c0:	beq	180fc <__assert_fail@plt+0x6ce8>
   180c4:	cmp	r8, #71	; 0x47
   180c8:	beq	180fc <__assert_fail@plt+0x6ce8>
   180cc:	mov	r5, #1
   180d0:	b	181f8 <__assert_fail@plt+0x6de4>
   180d4:	cmp	r8, #77	; 0x4d
   180d8:	beq	180fc <__assert_fail@plt+0x6ce8>
   180dc:	cmp	r8, #80	; 0x50
   180e0:	b	180c8 <__assert_fail@plt+0x6cb4>
   180e4:	cmp	r8, #103	; 0x67
   180e8:	beq	180fc <__assert_fail@plt+0x6ce8>
   180ec:	bhi	181d0 <__assert_fail@plt+0x6dbc>
   180f0:	sub	r3, r8, #89	; 0x59
   180f4:	cmp	r3, #1
   180f8:	bhi	180cc <__assert_fail@plt+0x6cb8>
   180fc:	mov	r1, #48	; 0x30
   18100:	mov	r0, r5
   18104:	bl	112c4 <strchr@plt>
   18108:	cmp	r0, #0
   1810c:	beq	180cc <__assert_fail@plt+0x6cb8>
   18110:	ldrb	r3, [r9, #1]
   18114:	cmp	r3, #68	; 0x44
   18118:	moveq	r5, #2
   1811c:	moveq	r1, #1000	; 0x3e8
   18120:	beq	18140 <__assert_fail@plt+0x6d2c>
   18124:	cmp	r3, #105	; 0x69
   18128:	beq	181e8 <__assert_fail@plt+0x6dd4>
   1812c:	cmp	r3, #66	; 0x42
   18130:	moveq	r5, #2
   18134:	movne	r5, #1
   18138:	moveq	r1, #1000	; 0x3e8
   1813c:	movne	r1, #1024	; 0x400
   18140:	cmp	r8, #89	; 0x59
   18144:	beq	183cc <__assert_fail@plt+0x6fb8>
   18148:	bhi	18220 <__assert_fail@plt+0x6e0c>
   1814c:	cmp	r8, #75	; 0x4b
   18150:	beq	18260 <__assert_fail@plt+0x6e4c>
   18154:	bhi	18200 <__assert_fail@plt+0x6dec>
   18158:	cmp	r8, #69	; 0x45
   1815c:	beq	183a8 <__assert_fail@plt+0x6f94>
   18160:	cmp	r8, #71	; 0x47
   18164:	beq	183b4 <__assert_fail@plt+0x6fa0>
   18168:	cmp	r8, #66	; 0x42
   1816c:	bne	1808c <__assert_fail@plt+0x6c78>
   18170:	ldrd	r2, [sp, #8]
   18174:	mov	r0, #0
   18178:	cmp	r3, r2, asr #31
   1817c:	lsleq	r1, r3, #10
   18180:	lsleq	r8, r2, #10
   18184:	orreq	r1, r1, r2, lsr #22
   18188:	beq	18340 <__assert_fail@plt+0x6f2c>
   1818c:	mov	r1, #1024	; 0x400
   18190:	cmp	r3, #0
   18194:	lsr	sl, r2, #22
   18198:	lsl	lr, r2, #10
   1819c:	umull	r8, r9, r1, r3
   181a0:	bge	181ac <__assert_fail@plt+0x6d98>
   181a4:	subs	r8, r8, r0
   181a8:	sbc	r9, r9, r1
   181ac:	adds	r1, r8, sl
   181b0:	mov	ip, #0
   181b4:	adc	ip, r9, ip
   181b8:	cmp	ip, r1, asr #31
   181bc:	beq	1833c <__assert_fail@plt+0x6f28>
   181c0:	lsl	r1, r3, #10
   181c4:	lsl	r8, r2, #10
   181c8:	orr	r1, r1, r2, lsr #22
   181cc:	b	183a0 <__assert_fail@plt+0x6f8c>
   181d0:	cmp	r8, #109	; 0x6d
   181d4:	beq	180fc <__assert_fail@plt+0x6ce8>
   181d8:	cmp	r8, #116	; 0x74
   181dc:	beq	180fc <__assert_fail@plt+0x6ce8>
   181e0:	cmp	r8, #107	; 0x6b
   181e4:	b	180c8 <__assert_fail@plt+0x6cb4>
   181e8:	ldrb	r3, [r9, #2]
   181ec:	cmp	r3, #66	; 0x42
   181f0:	movne	r5, #1
   181f4:	moveq	r5, #3
   181f8:	mov	r1, #1024	; 0x400
   181fc:	b	18140 <__assert_fail@plt+0x6d2c>
   18200:	cmp	r8, #80	; 0x50
   18204:	beq	183bc <__assert_fail@plt+0x6fa8>
   18208:	cmp	r8, #84	; 0x54
   1820c:	beq	183c4 <__assert_fail@plt+0x6fb0>
   18210:	cmp	r8, #77	; 0x4d
   18214:	bne	1808c <__assert_fail@plt+0x6c78>
   18218:	mov	r2, #2
   1821c:	b	183ac <__assert_fail@plt+0x6f98>
   18220:	cmp	r8, #103	; 0x67
   18224:	beq	183b4 <__assert_fail@plt+0x6fa0>
   18228:	bhi	1824c <__assert_fail@plt+0x6e38>
   1822c:	cmp	r8, #98	; 0x62
   18230:	beq	182ec <__assert_fail@plt+0x6ed8>
   18234:	cmp	r8, #99	; 0x63
   18238:	beq	183dc <__assert_fail@plt+0x6fc8>
   1823c:	cmp	r8, #90	; 0x5a
   18240:	bne	1808c <__assert_fail@plt+0x6c78>
   18244:	mov	r2, #7
   18248:	b	183ac <__assert_fail@plt+0x6f98>
   1824c:	cmp	r8, #109	; 0x6d
   18250:	beq	18218 <__assert_fail@plt+0x6e04>
   18254:	bhi	18268 <__assert_fail@plt+0x6e54>
   18258:	cmp	r8, #107	; 0x6b
   1825c:	bne	1808c <__assert_fail@plt+0x6c78>
   18260:	mov	r2, #1
   18264:	b	183ac <__assert_fail@plt+0x6f98>
   18268:	cmp	r8, #116	; 0x74
   1826c:	beq	183c4 <__assert_fail@plt+0x6fb0>
   18270:	cmp	r8, #119	; 0x77
   18274:	bne	1808c <__assert_fail@plt+0x6c78>
   18278:	ldrd	r2, [sp, #8]
   1827c:	mov	r0, #0
   18280:	adds	ip, r2, r2
   18284:	adc	r1, r3, r3
   18288:	cmp	r3, r2, asr #31
   1828c:	beq	182d8 <__assert_fail@plt+0x6ec4>
   18290:	mov	r9, #0
   18294:	adds	ip, r2, r2
   18298:	mov	r1, #2
   1829c:	adc	sl, r9, r9
   182a0:	cmp	r3, #0
   182a4:	umull	r8, r9, r1, r3
   182a8:	bge	182b8 <__assert_fail@plt+0x6ea4>
   182ac:	mov	lr, #0
   182b0:	subs	r8, r8, lr
   182b4:	sbc	r9, r9, r1
   182b8:	adds	r1, r8, sl
   182bc:	mov	lr, #0
   182c0:	adc	lr, r9, lr
   182c4:	cmp	lr, r1, asr #31
   182c8:	beq	182d8 <__assert_fail@plt+0x6ec4>
   182cc:	adds	ip, r2, r2
   182d0:	mov	r0, #1
   182d4:	adc	r1, r3, r3
   182d8:	cmp	r0, #0
   182dc:	streq	ip, [sp, #8]
   182e0:	bne	1834c <__assert_fail@plt+0x6f38>
   182e4:	str	r1, [sp, #12]
   182e8:	b	1836c <__assert_fail@plt+0x6f58>
   182ec:	ldrd	r2, [sp, #8]
   182f0:	mov	r0, #0
   182f4:	cmp	r3, r2, asr #31
   182f8:	lsleq	r1, r3, #9
   182fc:	lsleq	r8, r2, #9
   18300:	orreq	r1, r1, r2, lsr #23
   18304:	beq	18340 <__assert_fail@plt+0x6f2c>
   18308:	mov	r1, #512	; 0x200
   1830c:	cmp	r3, #0
   18310:	lsr	sl, r2, #23
   18314:	lsl	lr, r2, #9
   18318:	umull	r8, r9, r1, r3
   1831c:	bge	18328 <__assert_fail@plt+0x6f14>
   18320:	subs	r8, r8, r0
   18324:	sbc	r9, r9, r1
   18328:	adds	r1, r8, sl
   1832c:	mov	ip, #0
   18330:	adc	ip, r9, ip
   18334:	cmp	ip, r1, asr #31
   18338:	bne	18394 <__assert_fail@plt+0x6f80>
   1833c:	mov	r8, lr
   18340:	cmp	r0, #0
   18344:	streq	r8, [sp, #8]
   18348:	beq	182e4 <__assert_fail@plt+0x6ed0>
   1834c:	cmp	r2, #0
   18350:	mov	r0, #1
   18354:	sbcs	r3, r3, #0
   18358:	mvnge	r2, #0
   1835c:	mvnge	r3, #-2147483648	; 0x80000000
   18360:	movlt	r2, #0
   18364:	movlt	r3, #-2147483648	; 0x80000000
   18368:	strd	r2, [sp, #8]
   1836c:	ldr	r3, [r6]
   18370:	orr	r4, r4, r0
   18374:	add	r2, r3, r5
   18378:	str	r2, [r6]
   1837c:	ldrb	r3, [r3, r5]
   18380:	cmp	r3, #0
   18384:	orrne	r4, r4, #2
   18388:	ldrd	r2, [sp, #8]
   1838c:	strd	r2, [r7]
   18390:	b	18098 <__assert_fail@plt+0x6c84>
   18394:	lsl	r1, r3, #9
   18398:	lsl	r8, r2, #9
   1839c:	orr	r1, r1, r2, lsr #23
   183a0:	mov	r0, #1
   183a4:	b	18340 <__assert_fail@plt+0x6f2c>
   183a8:	mov	r2, #6
   183ac:	add	r0, sp, #8
   183b0:	b	183d4 <__assert_fail@plt+0x6fc0>
   183b4:	mov	r2, #3
   183b8:	b	183ac <__assert_fail@plt+0x6f98>
   183bc:	mov	r2, #5
   183c0:	b	183ac <__assert_fail@plt+0x6f98>
   183c4:	mov	r2, #4
   183c8:	b	183ac <__assert_fail@plt+0x6f98>
   183cc:	mov	r2, #8
   183d0:	add	r0, sp, r2
   183d4:	bl	17edc <__assert_fail@plt+0x6ac8>
   183d8:	b	1836c <__assert_fail@plt+0x6f58>
   183dc:	mov	r0, #0
   183e0:	b	1836c <__assert_fail@plt+0x6f58>
   183e4:	andeq	sl, r1, r4, asr lr
   183e8:	andeq	sl, r1, pc, asr lr
   183ec:	andeq	sl, r1, sp, ror #28
   183f0:	subs	r2, r2, #1
   183f4:	mov	r3, #0
   183f8:	bcs	18404 <__assert_fail@plt+0x6ff0>
   183fc:	mov	r0, r3
   18400:	bx	lr
   18404:	push	{r4, r5, lr}
   18408:	ldr	ip, [r0]
   1840c:	smull	r4, r5, ip, r1
   18410:	cmp	r5, r4, asr #31
   18414:	moveq	ip, #0
   18418:	streq	r4, [r0]
   1841c:	beq	18434 <__assert_fail@plt+0x7020>
   18420:	cmp	ip, #0
   18424:	movlt	ip, #-2147483648	; 0x80000000
   18428:	mvnge	ip, #-2147483648	; 0x80000000
   1842c:	str	ip, [r0]
   18430:	mov	ip, #1
   18434:	subs	r2, r2, #1
   18438:	orr	r3, r3, ip
   1843c:	bcs	18408 <__assert_fail@plt+0x6ff4>
   18440:	mov	r0, r3
   18444:	pop	{r4, r5, pc}
   18448:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1844c:	cmp	r2, #36	; 0x24
   18450:	ldr	r6, [sp, #48]	; 0x30
   18454:	bls	1846c <__assert_fail@plt+0x7058>
   18458:	ldr	r3, [pc, #812]	; 1878c <__assert_fail@plt+0x7378>
   1845c:	mov	r2, #85	; 0x55
   18460:	ldr	r1, [pc, #808]	; 18790 <__assert_fail@plt+0x737c>
   18464:	ldr	r0, [pc, #808]	; 18794 <__assert_fail@plt+0x7380>
   18468:	bl	11414 <__assert_fail@plt>
   1846c:	cmp	r1, #0
   18470:	mov	r7, r1
   18474:	mov	r4, r0
   18478:	moveq	r7, sp
   1847c:	mov	r9, r2
   18480:	mov	r8, r3
   18484:	bl	112e8 <__errno_location@plt>
   18488:	mov	sl, r0
   1848c:	mov	r5, #0
   18490:	mov	r2, r9
   18494:	mov	r1, r7
   18498:	mov	r0, r4
   1849c:	str	r5, [sl]
   184a0:	bl	110f0 <strtol@plt>
   184a4:	ldr	r9, [r7]
   184a8:	str	r0, [sp, #4]
   184ac:	cmp	r9, r4
   184b0:	bne	184e8 <__assert_fail@plt+0x70d4>
   184b4:	cmp	r6, r5
   184b8:	beq	184e0 <__assert_fail@plt+0x70cc>
   184bc:	ldrb	r1, [r4]
   184c0:	cmp	r1, r5
   184c4:	beq	184e0 <__assert_fail@plt+0x70cc>
   184c8:	mov	r0, r6
   184cc:	bl	112c4 <strchr@plt>
   184d0:	cmp	r0, r5
   184d4:	movne	r3, #1
   184d8:	strne	r3, [sp, #4]
   184dc:	bne	1850c <__assert_fail@plt+0x70f8>
   184e0:	mov	r5, #4
   184e4:	b	18538 <__assert_fail@plt+0x7124>
   184e8:	ldr	r5, [sl]
   184ec:	cmp	r5, #0
   184f0:	beq	18500 <__assert_fail@plt+0x70ec>
   184f4:	cmp	r5, #34	; 0x22
   184f8:	bne	184e0 <__assert_fail@plt+0x70cc>
   184fc:	mov	r5, #1
   18500:	cmp	r6, #0
   18504:	streq	r0, [r8]
   18508:	beq	18538 <__assert_fail@plt+0x7124>
   1850c:	ldrb	r4, [r9]
   18510:	cmp	r4, #0
   18514:	beq	18744 <__assert_fail@plt+0x7330>
   18518:	mov	r1, r4
   1851c:	mov	r0, r6
   18520:	bl	112c4 <strchr@plt>
   18524:	cmp	r0, #0
   18528:	bne	18544 <__assert_fail@plt+0x7130>
   1852c:	ldr	r3, [sp, #4]
   18530:	orr	r5, r5, #2
   18534:	str	r3, [r8]
   18538:	mov	r0, r5
   1853c:	add	sp, sp, #12
   18540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18544:	cmp	r4, #84	; 0x54
   18548:	beq	1859c <__assert_fail@plt+0x7188>
   1854c:	bhi	18584 <__assert_fail@plt+0x7170>
   18550:	cmp	r4, #75	; 0x4b
   18554:	beq	1859c <__assert_fail@plt+0x7188>
   18558:	bhi	18574 <__assert_fail@plt+0x7160>
   1855c:	cmp	r4, #69	; 0x45
   18560:	beq	1859c <__assert_fail@plt+0x7188>
   18564:	cmp	r4, #71	; 0x47
   18568:	beq	1859c <__assert_fail@plt+0x7188>
   1856c:	mov	r6, #1
   18570:	b	18650 <__assert_fail@plt+0x723c>
   18574:	cmp	r4, #77	; 0x4d
   18578:	beq	1859c <__assert_fail@plt+0x7188>
   1857c:	cmp	r4, #80	; 0x50
   18580:	b	18568 <__assert_fail@plt+0x7154>
   18584:	cmp	r4, #103	; 0x67
   18588:	beq	1859c <__assert_fail@plt+0x7188>
   1858c:	bhi	18628 <__assert_fail@plt+0x7214>
   18590:	sub	r3, r4, #89	; 0x59
   18594:	cmp	r3, #1
   18598:	bhi	1856c <__assert_fail@plt+0x7158>
   1859c:	mov	r1, #48	; 0x30
   185a0:	mov	r0, r6
   185a4:	bl	112c4 <strchr@plt>
   185a8:	cmp	r0, #0
   185ac:	beq	1856c <__assert_fail@plt+0x7158>
   185b0:	ldrb	r3, [r9, #1]
   185b4:	cmp	r3, #68	; 0x44
   185b8:	moveq	r6, #2
   185bc:	moveq	r1, #1000	; 0x3e8
   185c0:	beq	185e0 <__assert_fail@plt+0x71cc>
   185c4:	cmp	r3, #105	; 0x69
   185c8:	beq	18640 <__assert_fail@plt+0x722c>
   185cc:	cmp	r3, #66	; 0x42
   185d0:	moveq	r6, #2
   185d4:	movne	r6, #1
   185d8:	moveq	r1, #1000	; 0x3e8
   185dc:	movne	r1, #1024	; 0x400
   185e0:	cmp	r4, #89	; 0x59
   185e4:	beq	1877c <__assert_fail@plt+0x7368>
   185e8:	bhi	18678 <__assert_fail@plt+0x7264>
   185ec:	cmp	r4, #75	; 0x4b
   185f0:	beq	186b8 <__assert_fail@plt+0x72a4>
   185f4:	bhi	18658 <__assert_fail@plt+0x7244>
   185f8:	cmp	r4, #69	; 0x45
   185fc:	beq	18750 <__assert_fail@plt+0x733c>
   18600:	cmp	r4, #71	; 0x47
   18604:	beq	1875c <__assert_fail@plt+0x7348>
   18608:	cmp	r4, #66	; 0x42
   1860c:	bne	1852c <__assert_fail@plt+0x7118>
   18610:	ldr	r3, [sp, #4]
   18614:	asr	r1, r3, #31
   18618:	lsl	r2, r1, #10
   1861c:	lsl	r1, r3, #10
   18620:	orr	r2, r2, r3, lsr #22
   18624:	b	18708 <__assert_fail@plt+0x72f4>
   18628:	cmp	r4, #109	; 0x6d
   1862c:	beq	1859c <__assert_fail@plt+0x7188>
   18630:	cmp	r4, #116	; 0x74
   18634:	beq	1859c <__assert_fail@plt+0x7188>
   18638:	cmp	r4, #107	; 0x6b
   1863c:	b	18568 <__assert_fail@plt+0x7154>
   18640:	ldrb	r3, [r9, #2]
   18644:	cmp	r3, #66	; 0x42
   18648:	movne	r6, #1
   1864c:	moveq	r6, #3
   18650:	mov	r1, #1024	; 0x400
   18654:	b	185e0 <__assert_fail@plt+0x71cc>
   18658:	cmp	r4, #80	; 0x50
   1865c:	beq	18764 <__assert_fail@plt+0x7350>
   18660:	cmp	r4, #84	; 0x54
   18664:	beq	1876c <__assert_fail@plt+0x7358>
   18668:	cmp	r4, #77	; 0x4d
   1866c:	bne	1852c <__assert_fail@plt+0x7118>
   18670:	mov	r2, #2
   18674:	b	18754 <__assert_fail@plt+0x7340>
   18678:	cmp	r4, #103	; 0x67
   1867c:	beq	1875c <__assert_fail@plt+0x7348>
   18680:	bhi	186a4 <__assert_fail@plt+0x7290>
   18684:	cmp	r4, #98	; 0x62
   18688:	beq	186f4 <__assert_fail@plt+0x72e0>
   1868c:	cmp	r4, #99	; 0x63
   18690:	beq	18784 <__assert_fail@plt+0x7370>
   18694:	cmp	r4, #90	; 0x5a
   18698:	bne	1852c <__assert_fail@plt+0x7118>
   1869c:	mov	r2, #7
   186a0:	b	18754 <__assert_fail@plt+0x7340>
   186a4:	cmp	r4, #109	; 0x6d
   186a8:	beq	18670 <__assert_fail@plt+0x725c>
   186ac:	bhi	186c0 <__assert_fail@plt+0x72ac>
   186b0:	cmp	r4, #107	; 0x6b
   186b4:	bne	1852c <__assert_fail@plt+0x7118>
   186b8:	mov	r2, #1
   186bc:	b	18754 <__assert_fail@plt+0x7340>
   186c0:	cmp	r4, #116	; 0x74
   186c4:	beq	1876c <__assert_fail@plt+0x7358>
   186c8:	cmp	r4, #119	; 0x77
   186cc:	bne	1852c <__assert_fail@plt+0x7118>
   186d0:	ldr	r1, [sp, #4]
   186d4:	asr	fp, r1, #31
   186d8:	adds	r2, r1, r1
   186dc:	adc	r3, fp, fp
   186e0:	cmp	r3, r2, asr #31
   186e4:	streq	r2, [sp, #4]
   186e8:	beq	18784 <__assert_fail@plt+0x7370>
   186ec:	cmp	r1, #0
   186f0:	b	18718 <__assert_fail@plt+0x7304>
   186f4:	ldr	r3, [sp, #4]
   186f8:	asr	r1, r3, #31
   186fc:	lsl	r2, r1, #9
   18700:	lsl	r1, r3, #9
   18704:	orr	r2, r2, r3, lsr #23
   18708:	cmp	r2, r1, asr #31
   1870c:	streq	r1, [sp, #4]
   18710:	beq	18784 <__assert_fail@plt+0x7370>
   18714:	cmp	r3, #0
   18718:	movlt	r3, #-2147483648	; 0x80000000
   1871c:	mvnge	r3, #-2147483648	; 0x80000000
   18720:	mov	r0, #1
   18724:	str	r3, [sp, #4]
   18728:	ldr	r3, [r7]
   1872c:	orr	r5, r5, r0
   18730:	add	r2, r3, r6
   18734:	str	r2, [r7]
   18738:	ldrb	r3, [r3, r6]
   1873c:	cmp	r3, #0
   18740:	orrne	r5, r5, #2
   18744:	ldr	r3, [sp, #4]
   18748:	str	r3, [r8]
   1874c:	b	18538 <__assert_fail@plt+0x7124>
   18750:	mov	r2, #6
   18754:	add	r0, sp, #4
   18758:	b	18774 <__assert_fail@plt+0x7360>
   1875c:	mov	r2, #3
   18760:	b	18754 <__assert_fail@plt+0x7340>
   18764:	mov	r2, #5
   18768:	b	18754 <__assert_fail@plt+0x7340>
   1876c:	mov	r2, #4
   18770:	add	r0, sp, r2
   18774:	bl	183f0 <__assert_fail@plt+0x6fdc>
   18778:	b	18728 <__assert_fail@plt+0x7314>
   1877c:	mov	r2, #8
   18780:	b	18754 <__assert_fail@plt+0x7340>
   18784:	mov	r0, #0
   18788:	b	18728 <__assert_fail@plt+0x7314>
   1878c:	muleq	r1, r3, lr
   18790:	andeq	sl, r1, pc, asr lr
   18794:	andeq	sl, r1, sp, ror #28
   18798:	ldr	ip, [pc, #108]	; 1880c <__assert_fail@plt+0x73f8>
   1879c:	push	{r0, r1, r2, r3, r4, lr}
   187a0:	sub	r0, r0, #1
   187a4:	cmp	r0, #3
   187a8:	ldr	r6, [ip]
   187ac:	bhi	18808 <__assert_fail@plt+0x73f4>
   187b0:	cmp	r1, #0
   187b4:	ldr	ip, [pc, #84]	; 18810 <__assert_fail@plt+0x73fc>
   187b8:	movlt	r3, #0
   187bc:	addlt	r5, sp, #12
   187c0:	strblt	r2, [sp, #12]
   187c4:	mov	r2, #5
   187c8:	ldr	r4, [pc, #68]	; 18814 <__assert_fail@plt+0x7400>
   187cc:	strblt	r3, [sp, #13]
   187d0:	ldrge	r5, [r3, r1, lsl #4]
   187d4:	ldr	r0, [ip, r0, lsl #2]
   187d8:	sublt	r4, r4, r1
   187dc:	mov	r1, r0
   187e0:	mov	r0, #0
   187e4:	bl	1118c <dcgettext@plt>
   187e8:	ldr	r3, [sp, #24]
   187ec:	mov	r2, r0
   187f0:	mov	r1, #0
   187f4:	mov	r0, r6
   187f8:	str	r5, [sp]
   187fc:	str	r3, [sp, #4]
   18800:	mov	r3, r4
   18804:	bl	11228 <error@plt>
   18808:	bl	113f0 <abort@plt>
   1880c:	andeq	ip, r2, r4, lsl #3
   18810:	muleq	r1, ip, lr
   18814:	andeq	sl, r1, ip, lsr #29
   18818:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1881c:	mov	ip, r0
   18820:	asr	fp, r1, #31
   18824:	mov	r0, #0
   18828:	mov	lr, r0
   1882c:	subs	r2, r2, #1
   18830:	bcs	1883c <__assert_fail@plt+0x7428>
   18834:	add	sp, sp, #12
   18838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1883c:	ldrd	r8, [ip]
   18840:	mov	r3, #0
   18844:	cmp	r9, r3
   18848:	umulleq	r8, r9, r8, r1
   1884c:	moveq	r6, r8
   18850:	moveq	r4, r9
   18854:	beq	1888c <__assert_fail@plt+0x7478>
   18858:	umull	r4, r5, r8, r1
   1885c:	strd	r4, [sp]
   18860:	mov	r5, lr
   18864:	ldr	r4, [sp, #4]
   18868:	umlal	r4, r5, r9, r1
   1886c:	cmp	r5, #0
   18870:	ldrne	r3, [sp, #4]
   18874:	mulne	r4, r1, r9
   18878:	ldreq	r6, [sp]
   1887c:	mlane	r4, r8, fp, r4
   18880:	ldrne	r6, [sp]
   18884:	addne	r4, r4, r3
   18888:	movne	r3, #1
   1888c:	cmp	r3, #0
   18890:	mvnne	r6, #0
   18894:	movne	r3, #1
   18898:	movne	r4, r6
   1889c:	orr	r0, r0, r3
   188a0:	str	r6, [ip]
   188a4:	str	r4, [ip, #4]
   188a8:	b	1882c <__assert_fail@plt+0x7418>
   188ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188b0:	cmp	r2, #36	; 0x24
   188b4:	sub	sp, sp, #20
   188b8:	ldr	r5, [sp, #56]	; 0x38
   188bc:	bls	188d4 <__assert_fail@plt+0x74c0>
   188c0:	ldr	r3, [pc, #876]	; 18c34 <__assert_fail@plt+0x7820>
   188c4:	mov	r2, #85	; 0x55
   188c8:	ldr	r1, [pc, #872]	; 18c38 <__assert_fail@plt+0x7824>
   188cc:	ldr	r0, [pc, #872]	; 18c3c <__assert_fail@plt+0x7828>
   188d0:	bl	11414 <__assert_fail@plt>
   188d4:	cmp	r1, #0
   188d8:	mov	r6, r1
   188dc:	mov	r8, r0
   188e0:	mov	fp, r2
   188e4:	mov	r7, r3
   188e8:	addeq	r6, sp, #4
   188ec:	bl	112e8 <__errno_location@plt>
   188f0:	mov	r3, #0
   188f4:	mov	sl, r0
   188f8:	str	r3, [r0]
   188fc:	bl	112a0 <__ctype_b_loc@plt>
   18900:	ldrb	r9, [r8]
   18904:	mov	r3, r8
   18908:	ldr	r1, [r0]
   1890c:	lsl	r2, r9, #1
   18910:	ldrh	r4, [r1, r2]
   18914:	ands	r4, r4, #8192	; 0x2000
   18918:	bne	18934 <__assert_fail@plt+0x7520>
   1891c:	cmp	r9, #45	; 0x2d
   18920:	bne	1893c <__assert_fail@plt+0x7528>
   18924:	mov	r4, #4
   18928:	mov	r0, r4
   1892c:	add	sp, sp, #20
   18930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18934:	ldrb	r9, [r3, #1]!
   18938:	b	1890c <__assert_fail@plt+0x74f8>
   1893c:	mov	r2, fp
   18940:	mov	r1, r6
   18944:	mov	r0, r8
   18948:	bl	11330 <strtoumax@plt>
   1894c:	ldr	r9, [r6]
   18950:	strd	r0, [sp, #8]
   18954:	cmp	r9, r8
   18958:	bne	189bc <__assert_fail@plt+0x75a8>
   1895c:	cmp	r5, #0
   18960:	beq	18924 <__assert_fail@plt+0x7510>
   18964:	ldrb	r1, [r8]
   18968:	cmp	r1, #0
   1896c:	beq	18924 <__assert_fail@plt+0x7510>
   18970:	mov	r0, r5
   18974:	bl	112c4 <strchr@plt>
   18978:	cmp	r0, #0
   1897c:	movne	r2, #1
   18980:	movne	r3, #0
   18984:	strdne	r2, [sp, #8]
   18988:	beq	18924 <__assert_fail@plt+0x7510>
   1898c:	ldrb	r8, [r9]
   18990:	cmp	r8, #0
   18994:	beq	18bec <__assert_fail@plt+0x77d8>
   18998:	mov	r1, r8
   1899c:	mov	r0, r5
   189a0:	bl	112c4 <strchr@plt>
   189a4:	cmp	r0, #0
   189a8:	bne	189e4 <__assert_fail@plt+0x75d0>
   189ac:	ldrd	r2, [sp, #8]
   189b0:	orr	r4, r4, #2
   189b4:	strd	r2, [r7]
   189b8:	b	18928 <__assert_fail@plt+0x7514>
   189bc:	ldr	r4, [sl]
   189c0:	cmp	r4, #0
   189c4:	beq	189d4 <__assert_fail@plt+0x75c0>
   189c8:	cmp	r4, #34	; 0x22
   189cc:	bne	18924 <__assert_fail@plt+0x7510>
   189d0:	mov	r4, #1
   189d4:	cmp	r5, #0
   189d8:	strdeq	r0, [r7]
   189dc:	bne	1898c <__assert_fail@plt+0x7578>
   189e0:	b	18928 <__assert_fail@plt+0x7514>
   189e4:	cmp	r8, #84	; 0x54
   189e8:	beq	18a3c <__assert_fail@plt+0x7628>
   189ec:	bhi	18a24 <__assert_fail@plt+0x7610>
   189f0:	cmp	r8, #75	; 0x4b
   189f4:	beq	18a3c <__assert_fail@plt+0x7628>
   189f8:	bhi	18a14 <__assert_fail@plt+0x7600>
   189fc:	cmp	r8, #69	; 0x45
   18a00:	beq	18a3c <__assert_fail@plt+0x7628>
   18a04:	cmp	r8, #71	; 0x47
   18a08:	beq	18a3c <__assert_fail@plt+0x7628>
   18a0c:	mov	r5, #1
   18a10:	b	18af4 <__assert_fail@plt+0x76e0>
   18a14:	cmp	r8, #77	; 0x4d
   18a18:	beq	18a3c <__assert_fail@plt+0x7628>
   18a1c:	cmp	r8, #80	; 0x50
   18a20:	b	18a08 <__assert_fail@plt+0x75f4>
   18a24:	cmp	r8, #103	; 0x67
   18a28:	beq	18a3c <__assert_fail@plt+0x7628>
   18a2c:	bhi	18acc <__assert_fail@plt+0x76b8>
   18a30:	sub	r3, r8, #89	; 0x59
   18a34:	cmp	r3, #1
   18a38:	bhi	18a0c <__assert_fail@plt+0x75f8>
   18a3c:	mov	r1, #48	; 0x30
   18a40:	mov	r0, r5
   18a44:	bl	112c4 <strchr@plt>
   18a48:	cmp	r0, #0
   18a4c:	beq	18a0c <__assert_fail@plt+0x75f8>
   18a50:	ldrb	r3, [r9, #1]
   18a54:	cmp	r3, #68	; 0x44
   18a58:	moveq	r5, #2
   18a5c:	moveq	r1, #1000	; 0x3e8
   18a60:	beq	18a80 <__assert_fail@plt+0x766c>
   18a64:	cmp	r3, #105	; 0x69
   18a68:	beq	18ae4 <__assert_fail@plt+0x76d0>
   18a6c:	cmp	r3, #66	; 0x42
   18a70:	moveq	r5, #2
   18a74:	movne	r5, #1
   18a78:	moveq	r1, #1000	; 0x3e8
   18a7c:	movne	r1, #1024	; 0x400
   18a80:	cmp	r8, #89	; 0x59
   18a84:	beq	18c1c <__assert_fail@plt+0x7808>
   18a88:	bhi	18b1c <__assert_fail@plt+0x7708>
   18a8c:	cmp	r8, #75	; 0x4b
   18a90:	beq	18b5c <__assert_fail@plt+0x7748>
   18a94:	bhi	18afc <__assert_fail@plt+0x76e8>
   18a98:	cmp	r8, #69	; 0x45
   18a9c:	beq	18bf8 <__assert_fail@plt+0x77e4>
   18aa0:	cmp	r8, #71	; 0x47
   18aa4:	beq	18c04 <__assert_fail@plt+0x77f0>
   18aa8:	cmp	r8, #66	; 0x42
   18aac:	bne	189ac <__assert_fail@plt+0x7598>
   18ab0:	ldr	r3, [sp, #8]
   18ab4:	ldr	r1, [sp, #12]
   18ab8:	lsl	r2, r1, #10
   18abc:	lsr	r0, r1, #22
   18ac0:	orr	r2, r2, r3, lsr #22
   18ac4:	lsl	r3, r3, #10
   18ac8:	b	18ba8 <__assert_fail@plt+0x7794>
   18acc:	cmp	r8, #109	; 0x6d
   18ad0:	beq	18a3c <__assert_fail@plt+0x7628>
   18ad4:	cmp	r8, #116	; 0x74
   18ad8:	beq	18a3c <__assert_fail@plt+0x7628>
   18adc:	cmp	r8, #107	; 0x6b
   18ae0:	b	18a08 <__assert_fail@plt+0x75f4>
   18ae4:	ldrb	r3, [r9, #2]
   18ae8:	cmp	r3, #66	; 0x42
   18aec:	movne	r5, #1
   18af0:	moveq	r5, #3
   18af4:	mov	r1, #1024	; 0x400
   18af8:	b	18a80 <__assert_fail@plt+0x766c>
   18afc:	cmp	r8, #80	; 0x50
   18b00:	beq	18c0c <__assert_fail@plt+0x77f8>
   18b04:	cmp	r8, #84	; 0x54
   18b08:	beq	18c14 <__assert_fail@plt+0x7800>
   18b0c:	cmp	r8, #77	; 0x4d
   18b10:	bne	189ac <__assert_fail@plt+0x7598>
   18b14:	mov	r2, #2
   18b18:	b	18bfc <__assert_fail@plt+0x77e8>
   18b1c:	cmp	r8, #103	; 0x67
   18b20:	beq	18c04 <__assert_fail@plt+0x77f0>
   18b24:	bhi	18b48 <__assert_fail@plt+0x7734>
   18b28:	cmp	r8, #98	; 0x62
   18b2c:	beq	18b90 <__assert_fail@plt+0x777c>
   18b30:	cmp	r8, #99	; 0x63
   18b34:	beq	18c2c <__assert_fail@plt+0x7818>
   18b38:	cmp	r8, #90	; 0x5a
   18b3c:	bne	189ac <__assert_fail@plt+0x7598>
   18b40:	mov	r2, #7
   18b44:	b	18bfc <__assert_fail@plt+0x77e8>
   18b48:	cmp	r8, #109	; 0x6d
   18b4c:	beq	18b14 <__assert_fail@plt+0x7700>
   18b50:	bhi	18b64 <__assert_fail@plt+0x7750>
   18b54:	cmp	r8, #107	; 0x6b
   18b58:	bne	189ac <__assert_fail@plt+0x7598>
   18b5c:	mov	r2, #1
   18b60:	b	18bfc <__assert_fail@plt+0x77e8>
   18b64:	cmp	r8, #116	; 0x74
   18b68:	beq	18c14 <__assert_fail@plt+0x7800>
   18b6c:	cmp	r8, #119	; 0x77
   18b70:	bne	189ac <__assert_fail@plt+0x7598>
   18b74:	ldr	r3, [sp, #8]
   18b78:	ldr	r2, [sp, #12]
   18b7c:	ldr	r0, [sp, #12]
   18b80:	adds	r3, r3, r3
   18b84:	adc	r2, r2, r2
   18b88:	lsr	r0, r0, #31
   18b8c:	b	18ba8 <__assert_fail@plt+0x7794>
   18b90:	ldr	r3, [sp, #8]
   18b94:	ldr	r1, [sp, #12]
   18b98:	lsl	r2, r1, #9
   18b9c:	lsr	r0, r1, #23
   18ba0:	orr	r2, r2, r3, lsr #23
   18ba4:	lsl	r3, r3, #9
   18ba8:	adds	r0, r0, #0
   18bac:	movne	r0, #1
   18bb0:	cmp	r0, #0
   18bb4:	streq	r3, [sp, #8]
   18bb8:	streq	r2, [sp, #12]
   18bbc:	beq	18bd0 <__assert_fail@plt+0x77bc>
   18bc0:	mvn	r2, #0
   18bc4:	mvn	r3, #0
   18bc8:	mov	r0, #1
   18bcc:	strd	r2, [sp, #8]
   18bd0:	ldr	r3, [r6]
   18bd4:	orr	r4, r4, r0
   18bd8:	add	r2, r3, r5
   18bdc:	str	r2, [r6]
   18be0:	ldrb	r3, [r3, r5]
   18be4:	cmp	r3, #0
   18be8:	orrne	r4, r4, #2
   18bec:	ldrd	r2, [sp, #8]
   18bf0:	strd	r2, [r7]
   18bf4:	b	18928 <__assert_fail@plt+0x7514>
   18bf8:	mov	r2, #6
   18bfc:	add	r0, sp, #8
   18c00:	b	18c24 <__assert_fail@plt+0x7810>
   18c04:	mov	r2, #3
   18c08:	b	18bfc <__assert_fail@plt+0x77e8>
   18c0c:	mov	r2, #5
   18c10:	b	18bfc <__assert_fail@plt+0x77e8>
   18c14:	mov	r2, #4
   18c18:	b	18bfc <__assert_fail@plt+0x77e8>
   18c1c:	mov	r2, #8
   18c20:	add	r0, sp, r2
   18c24:	bl	18818 <__assert_fail@plt+0x7404>
   18c28:	b	18bd0 <__assert_fail@plt+0x77bc>
   18c2c:	mov	r0, #0
   18c30:	b	18bd0 <__assert_fail@plt+0x77bc>
   18c34:	andeq	sl, r1, ip, lsl #30
   18c38:	andeq	sl, r1, pc, asr lr
   18c3c:	andeq	sl, r1, sp, ror #28
   18c40:	cmp	r1, #0
   18c44:	cmpne	r0, #0
   18c48:	beq	18c80 <__assert_fail@plt+0x786c>
   18c4c:	push	{r4, r5, r6, lr}
   18c50:	umull	r4, r5, r0, r1
   18c54:	adds	r3, r5, #0
   18c58:	movne	r3, #1
   18c5c:	cmp	r4, #0
   18c60:	blt	18c6c <__assert_fail@plt+0x7858>
   18c64:	cmp	r3, #0
   18c68:	beq	18c8c <__assert_fail@plt+0x7878>
   18c6c:	bl	112e8 <__errno_location@plt>
   18c70:	mov	r3, #12
   18c74:	str	r3, [r0]
   18c78:	mov	r0, #0
   18c7c:	pop	{r4, r5, r6, pc}
   18c80:	mov	r1, #1
   18c84:	mov	r0, r1
   18c88:	b	110b4 <calloc@plt>
   18c8c:	pop	{r4, r5, r6, lr}
   18c90:	b	18c88 <__assert_fail@plt+0x7874>
   18c94:	cmp	r0, #0
   18c98:	beq	18cb8 <__assert_fail@plt+0x78a4>
   18c9c:	bge	18cbc <__assert_fail@plt+0x78a8>
   18ca0:	push	{r4, lr}
   18ca4:	bl	112e8 <__errno_location@plt>
   18ca8:	mov	r3, #12
   18cac:	str	r3, [r0]
   18cb0:	mov	r0, #0
   18cb4:	pop	{r4, pc}
   18cb8:	mov	r0, #1
   18cbc:	b	11240 <malloc@plt>
   18cc0:	cmp	r0, #0
   18cc4:	bne	18cd0 <__assert_fail@plt+0x78bc>
   18cc8:	mov	r0, r1
   18ccc:	b	18c94 <__assert_fail@plt+0x7880>
   18cd0:	cmp	r1, #0
   18cd4:	push	{r4, lr}
   18cd8:	bne	18ce8 <__assert_fail@plt+0x78d4>
   18cdc:	bl	14304 <__assert_fail@plt+0x2ef0>
   18ce0:	mov	r0, #0
   18ce4:	pop	{r4, pc}
   18ce8:	blt	18cf4 <__assert_fail@plt+0x78e0>
   18cec:	pop	{r4, lr}
   18cf0:	b	11198 <realloc@plt>
   18cf4:	bl	112e8 <__errno_location@plt>
   18cf8:	mov	r3, #12
   18cfc:	str	r3, [r0]
   18d00:	b	18ce0 <__assert_fail@plt+0x78cc>
   18d04:	push	{r4, r5, r6, lr}
   18d08:	mov	r4, r0
   18d0c:	bl	11204 <__fpending@plt>
   18d10:	mov	r5, r0
   18d14:	mov	r0, r4
   18d18:	bl	11210 <ferror_unlocked@plt>
   18d1c:	mov	r6, r0
   18d20:	mov	r0, r4
   18d24:	bl	14178 <__assert_fail@plt+0x2d64>
   18d28:	cmp	r6, #0
   18d2c:	mov	r4, r0
   18d30:	bne	18d5c <__assert_fail@plt+0x7948>
   18d34:	cmp	r0, #0
   18d38:	beq	18d54 <__assert_fail@plt+0x7940>
   18d3c:	cmp	r5, #0
   18d40:	bne	18d6c <__assert_fail@plt+0x7958>
   18d44:	bl	112e8 <__errno_location@plt>
   18d48:	ldr	r4, [r0]
   18d4c:	subs	r4, r4, #9
   18d50:	mvnne	r4, #0
   18d54:	mov	r0, r4
   18d58:	pop	{r4, r5, r6, pc}
   18d5c:	cmp	r0, #0
   18d60:	bne	18d6c <__assert_fail@plt+0x7958>
   18d64:	bl	112e8 <__errno_location@plt>
   18d68:	str	r4, [r0]
   18d6c:	mvn	r4, #0
   18d70:	b	18d54 <__assert_fail@plt+0x7940>
   18d74:	push	{r1, r2, r3}
   18d78:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   18d7c:	add	r2, sp, #40	; 0x28
   18d80:	ldr	r1, [sp, #36]	; 0x24
   18d84:	str	r2, [sp, #4]
   18d88:	cmp	r1, #0
   18d8c:	beq	18ddc <__assert_fail@plt+0x79c8>
   18d90:	movw	r3, #1030	; 0x406
   18d94:	mov	r5, r0
   18d98:	cmp	r1, r3
   18d9c:	beq	18de8 <__assert_fail@plt+0x79d4>
   18da0:	cmp	r1, #11
   18da4:	beq	18dcc <__assert_fail@plt+0x79b8>
   18da8:	bgt	18edc <__assert_fail@plt+0x7ac8>
   18dac:	cmp	r1, #4
   18db0:	beq	18ef4 <__assert_fail@plt+0x7ae0>
   18db4:	bgt	18ed4 <__assert_fail@plt+0x7ac0>
   18db8:	cmp	r1, #2
   18dbc:	beq	18ef4 <__assert_fail@plt+0x7ae0>
   18dc0:	bgt	18dcc <__assert_fail@plt+0x79b8>
   18dc4:	cmp	r1, #1
   18dc8:	bne	18ef4 <__assert_fail@plt+0x7ae0>
   18dcc:	mov	r0, r5
   18dd0:	bl	1136c <fcntl64@plt>
   18dd4:	mov	r4, r0
   18dd8:	b	18e30 <__assert_fail@plt+0x7a1c>
   18ddc:	ldr	r2, [sp, #40]	; 0x28
   18de0:	bl	1136c <fcntl64@plt>
   18de4:	b	18dd4 <__assert_fail@plt+0x79c0>
   18de8:	ldr	r6, [pc, #304]	; 18f20 <__assert_fail@plt+0x7b0c>
   18dec:	add	r3, sp, #44	; 0x2c
   18df0:	str	r3, [sp, #4]
   18df4:	ldr	r7, [r2]
   18df8:	ldr	r3, [r6]
   18dfc:	mov	r8, r6
   18e00:	mov	r2, r7
   18e04:	cmp	r3, #0
   18e08:	blt	18e98 <__assert_fail@plt+0x7a84>
   18e0c:	bl	1136c <fcntl64@plt>
   18e10:	subs	r4, r0, #0
   18e14:	bge	18e28 <__assert_fail@plt+0x7a14>
   18e18:	bl	112e8 <__errno_location@plt>
   18e1c:	ldr	r3, [r0]
   18e20:	cmp	r3, #22
   18e24:	beq	18e44 <__assert_fail@plt+0x7a30>
   18e28:	mov	r3, #1
   18e2c:	str	r3, [r8]
   18e30:	mov	r0, r4
   18e34:	add	sp, sp, #12
   18e38:	pop	{r4, r5, r6, r7, r8, lr}
   18e3c:	add	sp, sp, #12
   18e40:	bx	lr
   18e44:	mov	r2, r7
   18e48:	mov	r1, #0
   18e4c:	mov	r0, r5
   18e50:	bl	1136c <fcntl64@plt>
   18e54:	subs	r4, r0, #0
   18e58:	mvnge	r3, #0
   18e5c:	strge	r3, [r6]
   18e60:	blt	18e30 <__assert_fail@plt+0x7a1c>
   18e64:	mov	r1, #1
   18e68:	mov	r0, r4
   18e6c:	bl	1136c <fcntl64@plt>
   18e70:	subs	r2, r0, #0
   18e74:	bge	18eb8 <__assert_fail@plt+0x7aa4>
   18e78:	bl	112e8 <__errno_location@plt>
   18e7c:	mov	r5, r0
   18e80:	mov	r0, r4
   18e84:	ldr	r6, [r5]
   18e88:	mvn	r4, #0
   18e8c:	bl	113fc <close@plt>
   18e90:	str	r6, [r5]
   18e94:	b	18e30 <__assert_fail@plt+0x7a1c>
   18e98:	mov	r1, #0
   18e9c:	bl	1136c <fcntl64@plt>
   18ea0:	subs	r4, r0, #0
   18ea4:	blt	18e30 <__assert_fail@plt+0x7a1c>
   18ea8:	ldr	r3, [r6]
   18eac:	cmn	r3, #1
   18eb0:	bne	18e30 <__assert_fail@plt+0x7a1c>
   18eb4:	b	18e64 <__assert_fail@plt+0x7a50>
   18eb8:	orr	r2, r2, #1
   18ebc:	mov	r1, #2
   18ec0:	mov	r0, r4
   18ec4:	bl	1136c <fcntl64@plt>
   18ec8:	cmn	r0, #1
   18ecc:	bne	18e30 <__assert_fail@plt+0x7a1c>
   18ed0:	b	18e78 <__assert_fail@plt+0x7a64>
   18ed4:	cmp	r1, #9
   18ed8:	b	18dc8 <__assert_fail@plt+0x79b4>
   18edc:	movw	r2, #1031	; 0x407
   18ee0:	cmp	r1, r2
   18ee4:	bgt	18f04 <__assert_fail@plt+0x7af0>
   18ee8:	cmp	r1, r3
   18eec:	movwlt	r3, #1025	; 0x401
   18ef0:	blt	18f18 <__assert_fail@plt+0x7b04>
   18ef4:	ldr	r3, [sp, #4]
   18ef8:	mov	r0, r5
   18efc:	ldr	r2, [r3]
   18f00:	b	18de0 <__assert_fail@plt+0x79cc>
   18f04:	movw	r3, #1033	; 0x409
   18f08:	cmp	r1, r3
   18f0c:	beq	18ef4 <__assert_fail@plt+0x7ae0>
   18f10:	blt	18dcc <__assert_fail@plt+0x79b8>
   18f14:	movw	r3, #1034	; 0x40a
   18f18:	cmp	r1, r3
   18f1c:	b	18dc8 <__assert_fail@plt+0x79b4>
   18f20:	andeq	ip, r2, r8, ror #7
   18f24:	b	18c94 <__assert_fail@plt+0x7880>
   18f28:	cmp	r1, #0
   18f2c:	orreq	r1, r1, #1
   18f30:	b	18cc0 <__assert_fail@plt+0x78ac>
   18f34:	b	18c40 <__assert_fail@plt+0x782c>
   18f38:	cmp	r2, #0
   18f3c:	cmpne	r1, #0
   18f40:	moveq	r2, #1
   18f44:	moveq	r1, r2
   18f48:	b	18fd0 <__assert_fail@plt+0x7bbc>
   18f4c:	push	{r4, lr}
   18f50:	mov	r0, #14
   18f54:	bl	11390 <nl_langinfo@plt>
   18f58:	cmp	r0, #0
   18f5c:	beq	18f74 <__assert_fail@plt+0x7b60>
   18f60:	ldrb	r2, [r0]
   18f64:	ldr	r3, [pc, #16]	; 18f7c <__assert_fail@plt+0x7b68>
   18f68:	cmp	r2, #0
   18f6c:	moveq	r0, r3
   18f70:	pop	{r4, pc}
   18f74:	ldr	r0, [pc]	; 18f7c <__assert_fail@plt+0x7b68>
   18f78:	pop	{r4, pc}
   18f7c:	andeq	sl, r1, r7, lsl pc
   18f80:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18f84:	subs	r5, r0, #0
   18f88:	mov	r7, r2
   18f8c:	addeq	r5, sp, #4
   18f90:	mov	r6, r1
   18f94:	mov	r0, r5
   18f98:	bl	1121c <mbrtowc@plt>
   18f9c:	cmp	r7, #0
   18fa0:	cmnne	r0, #3
   18fa4:	mov	r4, r0
   18fa8:	bls	18fc4 <__assert_fail@plt+0x7bb0>
   18fac:	mov	r0, #0
   18fb0:	bl	14420 <__assert_fail@plt+0x300c>
   18fb4:	cmp	r0, #0
   18fb8:	ldrbeq	r3, [r6]
   18fbc:	moveq	r4, #1
   18fc0:	streq	r3, [r5]
   18fc4:	mov	r0, r4
   18fc8:	add	sp, sp, #12
   18fcc:	pop	{r4, r5, r6, r7, pc}
   18fd0:	umull	r2, r3, r1, r2
   18fd4:	cmp	r3, #0
   18fd8:	bne	18fe4 <__assert_fail@plt+0x7bd0>
   18fdc:	mov	r1, r2
   18fe0:	b	18cc0 <__assert_fail@plt+0x78ac>
   18fe4:	push	{r4, lr}
   18fe8:	bl	112e8 <__errno_location@plt>
   18fec:	mov	r3, #12
   18ff0:	str	r3, [r0]
   18ff4:	mov	r0, #0
   18ff8:	pop	{r4, pc}
   18ffc:	cmp	r3, #0
   19000:	cmpeq	r2, #0
   19004:	bne	19028 <__assert_fail@plt+0x7c14>
   19008:	cmp	r1, #0
   1900c:	movlt	r1, #-2147483648	; 0x80000000
   19010:	movlt	r0, #0
   19014:	blt	19024 <__assert_fail@plt+0x7c10>
   19018:	cmpeq	r0, #0
   1901c:	mvnne	r1, #-2147483648	; 0x80000000
   19020:	mvnne	r0, #0
   19024:	b	1910c <__assert_fail@plt+0x7cf8>
   19028:	sub	sp, sp, #8
   1902c:	push	{sp, lr}
   19030:	cmp	r1, #0
   19034:	blt	19054 <__assert_fail@plt+0x7c40>
   19038:	cmp	r3, #0
   1903c:	blt	19088 <__assert_fail@plt+0x7c74>
   19040:	bl	1911c <__assert_fail@plt+0x7d08>
   19044:	ldr	lr, [sp, #4]
   19048:	add	sp, sp, #8
   1904c:	pop	{r2, r3}
   19050:	bx	lr
   19054:	rsbs	r0, r0, #0
   19058:	sbc	r1, r1, r1, lsl #1
   1905c:	cmp	r3, #0
   19060:	blt	190ac <__assert_fail@plt+0x7c98>
   19064:	bl	1911c <__assert_fail@plt+0x7d08>
   19068:	ldr	lr, [sp, #4]
   1906c:	add	sp, sp, #8
   19070:	pop	{r2, r3}
   19074:	rsbs	r0, r0, #0
   19078:	sbc	r1, r1, r1, lsl #1
   1907c:	rsbs	r2, r2, #0
   19080:	sbc	r3, r3, r3, lsl #1
   19084:	bx	lr
   19088:	rsbs	r2, r2, #0
   1908c:	sbc	r3, r3, r3, lsl #1
   19090:	bl	1911c <__assert_fail@plt+0x7d08>
   19094:	ldr	lr, [sp, #4]
   19098:	add	sp, sp, #8
   1909c:	pop	{r2, r3}
   190a0:	rsbs	r0, r0, #0
   190a4:	sbc	r1, r1, r1, lsl #1
   190a8:	bx	lr
   190ac:	rsbs	r2, r2, #0
   190b0:	sbc	r3, r3, r3, lsl #1
   190b4:	bl	1911c <__assert_fail@plt+0x7d08>
   190b8:	ldr	lr, [sp, #4]
   190bc:	add	sp, sp, #8
   190c0:	pop	{r2, r3}
   190c4:	rsbs	r2, r2, #0
   190c8:	sbc	r3, r3, r3, lsl #1
   190cc:	bx	lr
   190d0:	cmp	r3, #0
   190d4:	cmpeq	r2, #0
   190d8:	bne	190f0 <__assert_fail@plt+0x7cdc>
   190dc:	cmp	r1, #0
   190e0:	cmpeq	r0, #0
   190e4:	mvnne	r1, #0
   190e8:	mvnne	r0, #0
   190ec:	b	1910c <__assert_fail@plt+0x7cf8>
   190f0:	sub	sp, sp, #8
   190f4:	push	{sp, lr}
   190f8:	bl	1911c <__assert_fail@plt+0x7d08>
   190fc:	ldr	lr, [sp, #4]
   19100:	add	sp, sp, #8
   19104:	pop	{r2, r3}
   19108:	bx	lr
   1910c:	push	{r1, lr}
   19110:	mov	r0, #8
   19114:	bl	110cc <raise@plt>
   19118:	pop	{r1, pc}
   1911c:	cmp	r1, r3
   19120:	cmpeq	r0, r2
   19124:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19128:	mov	r4, r0
   1912c:	movcc	r0, #0
   19130:	mov	r5, r1
   19134:	ldr	lr, [sp, #36]	; 0x24
   19138:	movcc	r1, r0
   1913c:	bcc	19238 <__assert_fail@plt+0x7e24>
   19140:	cmp	r3, #0
   19144:	clzeq	ip, r2
   19148:	clzne	ip, r3
   1914c:	addeq	ip, ip, #32
   19150:	cmp	r5, #0
   19154:	clzeq	r1, r4
   19158:	addeq	r1, r1, #32
   1915c:	clzne	r1, r5
   19160:	sub	ip, ip, r1
   19164:	sub	sl, ip, #32
   19168:	lsl	r9, r3, ip
   1916c:	rsb	fp, ip, #32
   19170:	orr	r9, r9, r2, lsl sl
   19174:	orr	r9, r9, r2, lsr fp
   19178:	lsl	r8, r2, ip
   1917c:	cmp	r5, r9
   19180:	cmpeq	r4, r8
   19184:	movcc	r0, #0
   19188:	movcc	r1, r0
   1918c:	bcc	191a8 <__assert_fail@plt+0x7d94>
   19190:	mov	r0, #1
   19194:	subs	r4, r4, r8
   19198:	lsl	r1, r0, sl
   1919c:	orr	r1, r1, r0, lsr fp
   191a0:	lsl	r0, r0, ip
   191a4:	sbc	r5, r5, r9
   191a8:	cmp	ip, #0
   191ac:	beq	19238 <__assert_fail@plt+0x7e24>
   191b0:	lsr	r6, r8, #1
   191b4:	orr	r6, r6, r9, lsl #31
   191b8:	lsr	r7, r9, #1
   191bc:	mov	r2, ip
   191c0:	b	191e4 <__assert_fail@plt+0x7dd0>
   191c4:	subs	r3, r4, r6
   191c8:	sbc	r8, r5, r7
   191cc:	adds	r3, r3, r3
   191d0:	adc	r8, r8, r8
   191d4:	adds	r4, r3, #1
   191d8:	adc	r5, r8, #0
   191dc:	subs	r2, r2, #1
   191e0:	beq	19200 <__assert_fail@plt+0x7dec>
   191e4:	cmp	r5, r7
   191e8:	cmpeq	r4, r6
   191ec:	bcs	191c4 <__assert_fail@plt+0x7db0>
   191f0:	adds	r4, r4, r4
   191f4:	adc	r5, r5, r5
   191f8:	subs	r2, r2, #1
   191fc:	bne	191e4 <__assert_fail@plt+0x7dd0>
   19200:	lsr	r3, r4, ip
   19204:	orr	r3, r3, r5, lsl fp
   19208:	lsr	r2, r5, ip
   1920c:	orr	r3, r3, r5, lsr sl
   19210:	adds	r0, r0, r4
   19214:	mov	r4, r3
   19218:	lsl	r3, r2, ip
   1921c:	orr	r3, r3, r4, lsl sl
   19220:	lsl	ip, r4, ip
   19224:	orr	r3, r3, r4, lsr fp
   19228:	adc	r1, r1, r5
   1922c:	subs	r0, r0, ip
   19230:	mov	r5, r2
   19234:	sbc	r1, r1, r3
   19238:	cmp	lr, #0
   1923c:	strdne	r4, [lr]
   19240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19244:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19248:	mov	r7, r0
   1924c:	ldr	r6, [pc, #72]	; 1929c <__assert_fail@plt+0x7e88>
   19250:	ldr	r5, [pc, #72]	; 192a0 <__assert_fail@plt+0x7e8c>
   19254:	add	r6, pc, r6
   19258:	add	r5, pc, r5
   1925c:	sub	r6, r6, r5
   19260:	mov	r8, r1
   19264:	mov	r9, r2
   19268:	bl	11088 <fdopen@plt-0x20>
   1926c:	asrs	r6, r6, #2
   19270:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19274:	mov	r4, #0
   19278:	add	r4, r4, #1
   1927c:	ldr	r3, [r5], #4
   19280:	mov	r2, r9
   19284:	mov	r1, r8
   19288:	mov	r0, r7
   1928c:	blx	r3
   19290:	cmp	r6, r4
   19294:	bne	19278 <__assert_fail@plt+0x7e64>
   19298:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1929c:			; <UNDEFINED> instruction: 0x00012cb8
   192a0:			; <UNDEFINED> instruction: 0x00012cb0
   192a4:	bx	lr
   192a8:	ldr	r3, [pc, #12]	; 192bc <__assert_fail@plt+0x7ea8>
   192ac:	mov	r1, #0
   192b0:	add	r3, pc, r3
   192b4:	ldr	r2, [r3]
   192b8:	b	11300 <__cxa_atexit@plt>
   192bc:	andeq	r2, r1, r4, lsl #29
   192c0:	mov	r2, r1
   192c4:	mov	r1, r0
   192c8:	mov	r0, #3
   192cc:	b	111e0 <__fxstat64@plt>

Disassembly of section .fini:

000192d0 <.fini>:
   192d0:	push	{r3, lr}
   192d4:	pop	{r3, pc}
