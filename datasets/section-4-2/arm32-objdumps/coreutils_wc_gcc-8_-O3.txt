
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

00011044 <.init>:
   11044:	push	{r3, lr}
   11048:	bl	11eb0 <__assert_fail@plt+0xb28>
   1104c:	pop	{r3, pc}

Disassembly of section .plt:

00011050 <calloc@plt-0x14>:
   11050:	push	{lr}		; (str lr, [sp, #-4]!)
   11054:	ldr	lr, [pc, #4]	; 11060 <calloc@plt-0x4>
   11058:	add	lr, pc, lr
   1105c:	ldr	pc, [lr, #8]!
   11060:	andeq	r9, r1, r0, lsr #31

00011064 <calloc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #102400	; 0x19000
   1106c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011070 <fputs_unlocked@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #102400	; 0x19000
   11078:	ldr	pc, [ip, #3992]!	; 0xf98

0001107c <raise@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #102400	; 0x19000
   11084:	ldr	pc, [ip, #3984]!	; 0xf90

00011088 <strcmp@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #102400	; 0x19000
   11090:	ldr	pc, [ip, #3976]!	; 0xf88

00011094 <posix_fadvise64@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #102400	; 0x19000
   1109c:	ldr	pc, [ip, #3968]!	; 0xf80

000110a0 <read@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #102400	; 0x19000
   110a8:	ldr	pc, [ip, #3960]!	; 0xf78

000110ac <fflush@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #102400	; 0x19000
   110b4:	ldr	pc, [ip, #3952]!	; 0xf70

000110b8 <wcwidth@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #102400	; 0x19000
   110c0:	ldr	pc, [ip, #3944]!	; 0xf68

000110c4 <__memmove_chk@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #102400	; 0x19000
   110cc:	ldr	pc, [ip, #3936]!	; 0xf60

000110d0 <free@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #102400	; 0x19000
   110d8:	ldr	pc, [ip, #3928]!	; 0xf58

000110dc <ferror@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #102400	; 0x19000
   110e4:	ldr	pc, [ip, #3920]!	; 0xf50

000110e8 <_exit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #102400	; 0x19000
   110f0:	ldr	pc, [ip, #3912]!	; 0xf48

000110f4 <memcpy@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #102400	; 0x19000
   110fc:	ldr	pc, [ip, #3904]!	; 0xf40

00011100 <mbsinit@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #102400	; 0x19000
   11108:	ldr	pc, [ip, #3896]!	; 0xf38

0001110c <memcmp@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #102400	; 0x19000
   11114:	ldr	pc, [ip, #3888]!	; 0xf30

00011118 <fputc_unlocked@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #102400	; 0x19000
   11120:	ldr	pc, [ip, #3880]!	; 0xf28

00011124 <dcgettext@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #102400	; 0x19000
   1112c:	ldr	pc, [ip, #3872]!	; 0xf20

00011130 <sysconf@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #102400	; 0x19000
   11138:	ldr	pc, [ip, #3864]!	; 0xf18

0001113c <realloc@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #102400	; 0x19000
   11144:	ldr	pc, [ip, #3856]!	; 0xf10

00011148 <textdomain@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #102400	; 0x19000
   11150:	ldr	pc, [ip, #3848]!	; 0xf08

00011154 <iswcntrl@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #102400	; 0x19000
   1115c:	ldr	pc, [ip, #3840]!	; 0xf00

00011160 <rawmemchr@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #102400	; 0x19000
   11168:	ldr	pc, [ip, #3832]!	; 0xef8

0001116c <iswprint@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #102400	; 0x19000
   11174:	ldr	pc, [ip, #3824]!	; 0xef0

00011178 <__fxstat64@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #102400	; 0x19000
   11180:	ldr	pc, [ip, #3816]!	; 0xee8

00011184 <fwrite@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #102400	; 0x19000
   1118c:	ldr	pc, [ip, #3808]!	; 0xee0

00011190 <lseek64@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #102400	; 0x19000
   11198:	ldr	pc, [ip, #3800]!	; 0xed8

0001119c <__ctype_get_mb_cur_max@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #102400	; 0x19000
   111a4:	ldr	pc, [ip, #3792]!	; 0xed0

000111a8 <__fpending@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #102400	; 0x19000
   111b0:	ldr	pc, [ip, #3784]!	; 0xec8

000111b4 <mbrtowc@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #102400	; 0x19000
   111bc:	ldr	pc, [ip, #3776]!	; 0xec0

000111c0 <error@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #102400	; 0x19000
   111c8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111cc <open64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #102400	; 0x19000
   111d4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111d8 <getenv@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #102400	; 0x19000
   111e0:	ldr	pc, [ip, #3752]!	; 0xea8

000111e4 <sysinfo@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #102400	; 0x19000
   111ec:	ldr	pc, [ip, #3744]!	; 0xea0

000111f0 <malloc@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #102400	; 0x19000
   111f8:	ldr	pc, [ip, #3736]!	; 0xe98

000111fc <__libc_start_main@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #102400	; 0x19000
   11204:	ldr	pc, [ip, #3728]!	; 0xe90

00011208 <__freading@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #102400	; 0x19000
   11210:	ldr	pc, [ip, #3720]!	; 0xe88

00011214 <__gmon_start__@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #102400	; 0x19000
   1121c:	ldr	pc, [ip, #3712]!	; 0xe80

00011220 <getopt_long@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #102400	; 0x19000
   11228:	ldr	pc, [ip, #3704]!	; 0xe78

0001122c <__ctype_b_loc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #102400	; 0x19000
   11234:	ldr	pc, [ip, #3696]!	; 0xe70

00011238 <exit@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #102400	; 0x19000
   11240:	ldr	pc, [ip, #3688]!	; 0xe68

00011244 <feof@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #102400	; 0x19000
   1124c:	ldr	pc, [ip, #3680]!	; 0xe60

00011250 <iswspace@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #102400	; 0x19000
   11258:	ldr	pc, [ip, #3672]!	; 0xe58

0001125c <strlen@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #102400	; 0x19000
   11264:	ldr	pc, [ip, #3664]!	; 0xe50

00011268 <strchr@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #102400	; 0x19000
   11270:	ldr	pc, [ip, #3656]!	; 0xe48

00011274 <getpagesize@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #102400	; 0x19000
   1127c:	ldr	pc, [ip, #3648]!	; 0xe40

00011280 <__errno_location@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #102400	; 0x19000
   11288:	ldr	pc, [ip, #3640]!	; 0xe38

0001128c <__cxa_atexit@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #102400	; 0x19000
   11294:	ldr	pc, [ip, #3632]!	; 0xe30

00011298 <setvbuf@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #102400	; 0x19000
   112a0:	ldr	pc, [ip, #3624]!	; 0xe28

000112a4 <memset@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #102400	; 0x19000
   112ac:	ldr	pc, [ip, #3616]!	; 0xe20

000112b0 <btowc@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #102400	; 0x19000
   112b8:	ldr	pc, [ip, #3608]!	; 0xe18

000112bc <fgetc@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #102400	; 0x19000
   112c4:	ldr	pc, [ip, #3600]!	; 0xe10

000112c8 <__printf_chk@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #102400	; 0x19000
   112d0:	ldr	pc, [ip, #3592]!	; 0xe08

000112d4 <fileno@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #102400	; 0x19000
   112dc:	ldr	pc, [ip, #3584]!	; 0xe00

000112e0 <__fprintf_chk@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #102400	; 0x19000
   112e8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112ec <fclose@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #102400	; 0x19000
   112f4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112f8 <fseeko64@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #102400	; 0x19000
   11300:	ldr	pc, [ip, #3560]!	; 0xde8

00011304 <__overflow@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #102400	; 0x19000
   1130c:	ldr	pc, [ip, #3552]!	; 0xde0

00011310 <setlocale@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #102400	; 0x19000
   11318:	ldr	pc, [ip, #3544]!	; 0xdd8

0001131c <strrchr@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #102400	; 0x19000
   11324:	ldr	pc, [ip, #3536]!	; 0xdd0

00011328 <nl_langinfo@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #102400	; 0x19000
   11330:	ldr	pc, [ip, #3528]!	; 0xdc8

00011334 <fopen64@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #102400	; 0x19000
   1133c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011340 <bindtextdomain@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #102400	; 0x19000
   11348:	ldr	pc, [ip, #3512]!	; 0xdb8

0001134c <getdelim@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #102400	; 0x19000
   11354:	ldr	pc, [ip, #3504]!	; 0xdb0

00011358 <__xstat64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #102400	; 0x19000
   11360:	ldr	pc, [ip, #3496]!	; 0xda8

00011364 <strncmp@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #102400	; 0x19000
   1136c:	ldr	pc, [ip, #3488]!	; 0xda0

00011370 <abort@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #102400	; 0x19000
   11378:	ldr	pc, [ip, #3480]!	; 0xd98

0001137c <close@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #102400	; 0x19000
   11384:	ldr	pc, [ip, #3472]!	; 0xd90

00011388 <__assert_fail@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #102400	; 0x19000
   11390:	ldr	pc, [ip, #3464]!	; 0xd88

Disassembly of section .text:

00011398 <_obstack_begin@@Base-0x761c>:
   11398:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1139c:	movw	r4, #45472	; 0xb1a0
   113a0:	movt	r4, #2
   113a4:	strd	r6, [sp, #8]
   113a8:	mov	r7, r1
   113ac:	movw	r6, #39696	; 0x9b10
   113b0:	movt	r6, #1
   113b4:	strd	r8, [sp, #16]
   113b8:	mov	r8, r0
   113bc:	strd	sl, [sp, #24]
   113c0:	movw	sl, #45460	; 0xb194
   113c4:	movt	sl, #2
   113c8:	str	lr, [sp, #32]
   113cc:	movw	fp, #45464	; 0xb198
   113d0:	movt	fp, #2
   113d4:	vpush	{d8-d9}
   113d8:	sub	sp, sp, #340	; 0x154
   113dc:	ldr	r0, [r1]
   113e0:	bl	13ae0 <__assert_fail@plt+0x2758>
   113e4:	movw	r1, #39284	; 0x9974
   113e8:	movt	r1, #1
   113ec:	ldr	r9, [pc, #2676]	; 11e68 <__assert_fail@plt+0xae0>
   113f0:	mov	r0, #6
   113f4:	bl	11310 <setlocale@plt>
   113f8:	movw	r1, #39628	; 0x9acc
   113fc:	movt	r1, #1
   11400:	movw	r0, #39460	; 0x9a24
   11404:	movt	r0, #1
   11408:	bl	11340 <bindtextdomain@plt>
   1140c:	movw	r0, #39460	; 0x9a24
   11410:	movt	r0, #1
   11414:	bl	11148 <textdomain@plt>
   11418:	movw	r0, #13284	; 0x33e4
   1141c:	movt	r0, #1
   11420:	bl	19488 <_obstack_memory_used@@Base+0x6c8>
   11424:	bl	11274 <getpagesize@plt>
   11428:	mov	r3, #0
   1142c:	mov	r2, #1
   11430:	str	r0, [r4, #12]
   11434:	mov	r1, r3
   11438:	ldr	r0, [sl]
   1143c:	bl	11298 <setvbuf@plt>
   11440:	movw	r0, #39652	; 0x9ae4
   11444:	movt	r0, #1
   11448:	bl	111d8 <getenv@plt>
   1144c:	adds	r2, r0, #0
   11450:	mov	r3, #0
   11454:	mov	r0, #0
   11458:	mov	r1, #0
   1145c:	movne	r2, #1
   11460:	strb	r3, [r4]
   11464:	strb	r3, [r4, #8]
   11468:	strb	r3, [r4, #9]
   1146c:	strb	r3, [r4, #10]
   11470:	strb	r3, [r4, #11]
   11474:	strb	r2, [r4, #16]
   11478:	strd	r0, [r4, #24]
   1147c:	strd	r0, [r4, #32]
   11480:	str	r3, [sp, #32]
   11484:	strd	r0, [r4, #40]	; 0x28
   11488:	strd	r0, [r4, #48]	; 0x30
   1148c:	strd	r0, [r4, #56]	; 0x38
   11490:	mov	r5, #0
   11494:	mov	r3, r9
   11498:	mov	r2, r6
   1149c:	mov	r1, r7
   114a0:	mov	r0, r8
   114a4:	str	r5, [sp]
   114a8:	bl	11220 <getopt_long@plt>
   114ac:	cmn	r0, #1
   114b0:	beq	11598 <__assert_fail@plt+0x210>
   114b4:	cmp	r0, #108	; 0x6c
   114b8:	beq	11580 <__assert_fail@plt+0x1f8>
   114bc:	ble	114ec <__assert_fail@plt+0x164>
   114c0:	cmp	r0, #119	; 0x77
   114c4:	beq	1158c <__assert_fail@plt+0x204>
   114c8:	ble	1150c <__assert_fail@plt+0x184>
   114cc:	cmp	r0, #256	; 0x100
   114d0:	beq	11490 <__assert_fail@plt+0x108>
   114d4:	movw	r3, #257	; 0x101
   114d8:	cmp	r0, r3
   114dc:	bne	11e14 <__assert_fail@plt+0xa8c>
   114e0:	ldr	r3, [fp]
   114e4:	str	r3, [sp, #32]
   114e8:	b	11490 <__assert_fail@plt+0x108>
   114ec:	cmn	r0, #2
   114f0:	beq	11d98 <__assert_fail@plt+0xa10>
   114f4:	ble	11534 <__assert_fail@plt+0x1ac>
   114f8:	cmp	r0, #76	; 0x4c
   114fc:	bne	11520 <__assert_fail@plt+0x198>
   11500:	mov	r3, #1
   11504:	strb	r3, [r4, #11]
   11508:	b	11490 <__assert_fail@plt+0x108>
   1150c:	cmp	r0, #109	; 0x6d
   11510:	bne	11e14 <__assert_fail@plt+0xa8c>
   11514:	mov	r3, #1
   11518:	strb	r3, [r4, #9]
   1151c:	b	11490 <__assert_fail@plt+0x108>
   11520:	cmp	r0, #99	; 0x63
   11524:	bne	11e14 <__assert_fail@plt+0xa8c>
   11528:	mov	r3, #1
   1152c:	strb	r3, [r4, #10]
   11530:	b	11490 <__assert_fail@plt+0x108>
   11534:	cmn	r0, #3
   11538:	bne	11e14 <__assert_fail@plt+0xa8c>
   1153c:	movw	r2, #39668	; 0x9af4
   11540:	movt	r2, #1
   11544:	str	r5, [sp, #8]
   11548:	movw	r1, #39684	; 0x9b04
   1154c:	movt	r1, #1
   11550:	ldr	r0, [sl]
   11554:	movw	r3, #45352	; 0xb128
   11558:	movt	r3, #2
   1155c:	stm	sp, {r1, r2}
   11560:	movw	r2, #39456	; 0x9a20
   11564:	movt	r2, #1
   11568:	movw	r1, #38312	; 0x95a8
   1156c:	movt	r1, #1
   11570:	ldr	r3, [r3]
   11574:	bl	17f24 <__assert_fail@plt+0x6b9c>
   11578:	mov	r0, r5
   1157c:	bl	11238 <exit@plt>
   11580:	mov	r3, #1
   11584:	strb	r3, [r4]
   11588:	b	11490 <__assert_fail@plt+0x108>
   1158c:	mov	r3, #1
   11590:	strb	r3, [r4, #8]
   11594:	b	11490 <__assert_fail@plt+0x108>
   11598:	ldrb	r3, [r4]
   1159c:	cmp	r3, r5
   115a0:	bne	115b0 <__assert_fail@plt+0x228>
   115a4:	ldrb	r3, [r4, #8]
   115a8:	cmp	r3, r5
   115ac:	beq	11b80 <__assert_fail@plt+0x7f8>
   115b0:	ldr	r3, [sp, #32]
   115b4:	movw	r5, #45440	; 0xb180
   115b8:	movt	r5, #2
   115bc:	cmp	r3, #0
   115c0:	ldr	r3, [r5]
   115c4:	beq	11aa4 <__assert_fail@plt+0x71c>
   115c8:	cmp	r3, r8
   115cc:	blt	11da0 <__assert_fail@plt+0xa18>
   115d0:	movw	r1, #39776	; 0x9b60
   115d4:	movt	r1, #1
   115d8:	ldr	r0, [sp, #32]
   115dc:	bl	11088 <strcmp@plt>
   115e0:	cmp	r0, #0
   115e4:	bne	11c98 <__assert_fail@plt+0x910>
   115e8:	movw	r3, #45456	; 0xb190
   115ec:	movt	r3, #2
   115f0:	ldr	r5, [r3]
   115f4:	add	r3, sp, #88	; 0x58
   115f8:	mov	r0, r5
   115fc:	mov	r6, r3
   11600:	str	r3, [sp, #40]	; 0x28
   11604:	bl	112d4 <fileno@plt>
   11608:	mov	r1, r0
   1160c:	mov	r2, r6
   11610:	mov	r0, #3
   11614:	bl	11178 <__fxstat64@plt>
   11618:	cmp	r0, #0
   1161c:	bne	11630 <__assert_fail@plt+0x2a8>
   11620:	ldr	r3, [sp, #104]	; 0x68
   11624:	and	r3, r3, #61440	; 0xf000
   11628:	cmp	r3, #32768	; 0x8000
   1162c:	beq	11cf4 <__assert_fail@plt+0x96c>
   11630:	mov	r0, r5
   11634:	bl	13274 <__assert_fail@plt+0x1eec>
   11638:	subs	r9, r0, #0
   1163c:	beq	11cf0 <__assert_fail@plt+0x968>
   11640:	mov	r3, #0
   11644:	str	r3, [sp, #80]	; 0x50
   11648:	mov	r1, #112	; 0x70
   1164c:	mov	r0, #1
   11650:	bl	18298 <__assert_fail@plt+0x6f10>
   11654:	mov	r3, #1
   11658:	mov	r8, #0
   1165c:	str	r0, [sp, #52]	; 0x34
   11660:	mov	r5, r3
   11664:	str	r3, [r0]
   11668:	movw	r3, #40240	; 0x9d30
   1166c:	movt	r3, #1
   11670:	str	r5, [r4, #4]
   11674:	movw	fp, #39776	; 0x9b60
   11678:	movt	fp, #1
   1167c:	mov	r7, #0
   11680:	mov	r6, #1
   11684:	str	fp, [sp, #56]	; 0x38
   11688:	str	r4, [sp, #64]	; 0x40
   1168c:	str	r3, [sp, #72]	; 0x48
   11690:	ldr	r4, [sp, #32]
   11694:	b	1172c <__assert_fail@plt+0x3a4>
   11698:	mov	r1, sl
   1169c:	mov	r0, r5
   116a0:	bl	11088 <strcmp@plt>
   116a4:	subs	sl, r0, #0
   116a8:	beq	117c8 <__assert_fail@plt+0x440>
   116ac:	ldrb	r3, [r5]
   116b0:	cmp	r3, #0
   116b4:	beq	1180c <__assert_fail@plt+0x484>
   116b8:	cmp	r8, #0
   116bc:	ldreq	sl, [sp, #52]	; 0x34
   116c0:	bne	11778 <__assert_fail@plt+0x3f0>
   116c4:	mov	r1, #0
   116c8:	mov	r0, r5
   116cc:	bl	111cc <open64@plt>
   116d0:	cmn	r0, #1
   116d4:	beq	11a3c <__assert_fail@plt+0x6b4>
   116d8:	mov	r2, sl
   116dc:	mov	fp, #0
   116e0:	str	r0, [sp, #84]	; 0x54
   116e4:	mov	sl, #0
   116e8:	mov	r1, r5
   116ec:	strd	sl, [sp]
   116f0:	bl	1214c <__assert_fail@plt+0xdc4>
   116f4:	ldr	r3, [sp, #84]	; 0x54
   116f8:	mov	sl, r0
   116fc:	mov	r0, r3
   11700:	bl	1137c <close@plt>
   11704:	cmp	r0, #0
   11708:	bne	11a3c <__assert_fail@plt+0x6b4>
   1170c:	and	r6, r6, sl
   11710:	uxtb	r6, r6
   11714:	cmp	r8, #0
   11718:	bne	11728 <__assert_fail@plt+0x3a0>
   1171c:	ldr	r2, [sp, #52]	; 0x34
   11720:	mov	r3, #1
   11724:	str	r3, [r2]
   11728:	add	r7, r7, #1
   1172c:	mov	r0, r9
   11730:	ldr	r1, [sp, #40]	; 0x28
   11734:	bl	132b4 <__assert_fail@plt+0x1f2c>
   11738:	subs	r5, r0, #0
   1173c:	beq	118a4 <__assert_fail@plt+0x51c>
   11740:	cmp	r4, #0
   11744:	beq	11868 <__assert_fail@plt+0x4e0>
   11748:	ldr	sl, [sp, #56]	; 0x38
   1174c:	mov	r0, r4
   11750:	mov	r1, sl
   11754:	bl	11088 <strcmp@plt>
   11758:	cmp	r0, #0
   1175c:	beq	11698 <__assert_fail@plt+0x310>
   11760:	ldrb	r3, [r5]
   11764:	cmp	r3, #0
   11768:	beq	1180c <__assert_fail@plt+0x484>
   1176c:	cmp	r8, #0
   11770:	moveq	sl, r8
   11774:	beq	11780 <__assert_fail@plt+0x3f8>
   11778:	mov	sl, #112	; 0x70
   1177c:	mul	sl, sl, r7
   11780:	ldr	r3, [sp, #52]	; 0x34
   11784:	mov	r0, r5
   11788:	ldr	r1, [sp, #56]	; 0x38
   1178c:	add	sl, r3, sl
   11790:	bl	11088 <strcmp@plt>
   11794:	cmp	r0, #0
   11798:	bne	116c4 <__assert_fail@plt+0x33c>
   1179c:	ldr	ip, [sp, #64]	; 0x40
   117a0:	mov	r3, #1
   117a4:	mov	r2, sl
   117a8:	mvn	fp, #0
   117ac:	mvn	sl, #0
   117b0:	mov	r1, r5
   117b4:	strd	sl, [sp]
   117b8:	strb	r3, [ip, #68]	; 0x44
   117bc:	bl	1214c <__assert_fail@plt+0xdc4>
   117c0:	mov	sl, r0
   117c4:	b	1170c <__assert_fail@plt+0x384>
   117c8:	mov	r2, #5
   117cc:	movw	r1, #39912	; 0x9be8
   117d0:	movt	r1, #1
   117d4:	bl	11124 <dcgettext@plt>
   117d8:	mov	r6, r0
   117dc:	mov	r1, r5
   117e0:	mov	r0, #4
   117e4:	bl	16124 <__assert_fail@plt+0x4d9c>
   117e8:	mov	r3, r0
   117ec:	mov	r2, r6
   117f0:	mov	r1, sl
   117f4:	mov	r0, sl
   117f8:	bl	111c0 <error@plt>
   117fc:	ldrb	r3, [r5]
   11800:	cmp	r3, #0
   11804:	movne	r6, sl
   11808:	bne	11714 <__assert_fail@plt+0x38c>
   1180c:	mov	r0, r9
   11810:	mov	r6, #0
   11814:	bl	13368 <__assert_fail@plt+0x1fe0>
   11818:	mov	r5, r0
   1181c:	mov	r2, r4
   11820:	mov	r1, #3
   11824:	mov	r0, r6
   11828:	bl	16ca4 <__assert_fail@plt+0x591c>
   1182c:	mov	sl, r0
   11830:	mov	r2, #5
   11834:	mov	r0, r6
   11838:	movw	r1, #39984	; 0x9c30
   1183c:	movt	r1, #1
   11840:	bl	11124 <dcgettext@plt>
   11844:	mov	r1, r6
   11848:	mov	r3, sl
   1184c:	str	r5, [sp]
   11850:	movw	r2, #40016	; 0x9c50
   11854:	movt	r2, #1
   11858:	str	r0, [sp, #4]
   1185c:	mov	r0, r6
   11860:	bl	111c0 <error@plt>
   11864:	b	11714 <__assert_fail@plt+0x38c>
   11868:	ldrb	r3, [r5]
   1186c:	cmp	r3, #0
   11870:	bne	1176c <__assert_fail@plt+0x3e4>
   11874:	mov	r2, #5
   11878:	mov	r0, r4
   1187c:	movw	r1, #39984	; 0x9c30
   11880:	movt	r1, #1
   11884:	bl	11124 <dcgettext@plt>
   11888:	mov	r3, r0
   1188c:	mov	r1, r4
   11890:	ldr	r2, [sp, #72]	; 0x48
   11894:	mov	r0, r4
   11898:	mov	r6, r4
   1189c:	bl	111c0 <error@plt>
   118a0:	b	11714 <__assert_fail@plt+0x38c>
   118a4:	ldr	r4, [sp, #64]	; 0x40
   118a8:	ldr	r3, [sp, #88]	; 0x58
   118ac:	cmp	r3, #3
   118b0:	beq	11cf0 <__assert_fail@plt+0x968>
   118b4:	cmp	r3, #4
   118b8:	bne	119c8 <__assert_fail@plt+0x640>
   118bc:	bl	11280 <__errno_location@plt>
   118c0:	ldr	r6, [r0]
   118c4:	mov	r2, #5
   118c8:	movw	r1, #39844	; 0x9ba4
   118cc:	movt	r1, #1
   118d0:	mov	r0, r5
   118d4:	bl	11124 <dcgettext@plt>
   118d8:	mov	r7, r0
   118dc:	mov	r1, #3
   118e0:	ldr	r2, [sp, #32]
   118e4:	mov	r0, r5
   118e8:	bl	16ca4 <__assert_fail@plt+0x591c>
   118ec:	mov	r3, r0
   118f0:	mov	r1, r6
   118f4:	mov	r2, r7
   118f8:	mov	r0, r5
   118fc:	mov	r6, r5
   11900:	bl	111c0 <error@plt>
   11904:	ldr	r3, [sp, #80]	; 0x50
   11908:	cmp	r3, #0
   1190c:	bne	11a70 <__assert_fail@plt+0x6e8>
   11910:	mov	r0, r9
   11914:	bl	13368 <__assert_fail@plt+0x1fe0>
   11918:	cmp	r0, #1
   1191c:	bls	11984 <__assert_fail@plt+0x5fc>
   11920:	ldrd	r2, [r4, #24]
   11924:	movw	r1, #39976	; 0x9c28
   11928:	movt	r1, #1
   1192c:	mov	r0, #0
   11930:	ldrd	sl, [r4, #32]
   11934:	strd	r2, [sp, #32]
   11938:	mov	r2, #5
   1193c:	strd	sl, [sp, #40]	; 0x28
   11940:	ldrd	sl, [r4, #40]	; 0x28
   11944:	strd	sl, [sp, #56]	; 0x38
   11948:	ldrd	sl, [r4, #48]	; 0x30
   1194c:	strd	sl, [sp, #64]	; 0x40
   11950:	ldrd	sl, [r4, #56]	; 0x38
   11954:	strd	sl, [sp, #72]	; 0x48
   11958:	bl	11124 <dcgettext@plt>
   1195c:	str	r0, [sp, #24]
   11960:	ldrd	sl, [sp, #56]	; 0x38
   11964:	ldrd	r0, [sp, #32]
   11968:	ldrd	r2, [sp, #40]	; 0x28
   1196c:	strd	sl, [sp]
   11970:	ldrd	sl, [sp, #64]	; 0x40
   11974:	strd	sl, [sp, #8]
   11978:	ldrd	sl, [sp, #72]	; 0x48
   1197c:	strd	sl, [sp, #16]
   11980:	bl	11f64 <__assert_fail@plt+0xbdc>
   11984:	mov	r0, r9
   11988:	bl	13390 <__assert_fail@plt+0x2008>
   1198c:	ldr	r0, [sp, #52]	; 0x34
   11990:	bl	13638 <__assert_fail@plt+0x22b0>
   11994:	ldrb	r3, [r4, #68]	; 0x44
   11998:	cmp	r3, #0
   1199c:	bne	11a7c <__assert_fail@plt+0x6f4>
   119a0:	eor	r0, r6, #1
   119a4:	uxtb	r0, r0
   119a8:	add	sp, sp, #340	; 0x154
   119ac:	vpop	{d8-d9}
   119b0:	ldrd	r4, [sp]
   119b4:	ldrd	r6, [sp, #8]
   119b8:	ldrd	r8, [sp, #16]
   119bc:	ldrd	sl, [sp, #24]
   119c0:	add	sp, sp, #32
   119c4:	pop	{pc}		; (ldr pc, [sp], #4)
   119c8:	cmp	r3, #2
   119cc:	beq	119ec <__assert_fail@plt+0x664>
   119d0:	movw	r1, #39860	; 0x9bb4
   119d4:	movt	r1, #1
   119d8:	ldr	r3, [pc, #1164]	; 11e6c <__assert_fail@plt+0xae4>
   119dc:	movw	r0, #39872	; 0x9bc0
   119e0:	movt	r0, #1
   119e4:	movw	r2, #938	; 0x3aa
   119e8:	bl	11388 <__assert_fail@plt>
   119ec:	ldr	r3, [sp, #32]
   119f0:	cmp	r3, #0
   119f4:	movne	r5, #0
   119f8:	andeq	r5, r6, #1
   119fc:	cmp	r5, #0
   11a00:	beq	11904 <__assert_fail@plt+0x57c>
   11a04:	mov	r0, r9
   11a08:	bl	13368 <__assert_fail@plt+0x1fe0>
   11a0c:	subs	r1, r0, #0
   11a10:	movne	r6, r5
   11a14:	bne	11904 <__assert_fail@plt+0x57c>
   11a18:	mvn	r2, #0
   11a1c:	mvn	r3, #0
   11a20:	mov	ip, #1
   11a24:	strd	r2, [sp]
   11a28:	strb	ip, [r4, #68]	; 0x44
   11a2c:	ldr	r2, [sp, #52]	; 0x34
   11a30:	bl	1214c <__assert_fail@plt+0xdc4>
   11a34:	mov	r6, r0
   11a38:	b	11904 <__assert_fail@plt+0x57c>
   11a3c:	bl	11280 <__errno_location@plt>
   11a40:	mov	r2, r5
   11a44:	ldr	r5, [r0]
   11a48:	mov	r1, #3
   11a4c:	mov	r0, #0
   11a50:	mov	sl, r0
   11a54:	bl	16ca4 <__assert_fail@plt+0x591c>
   11a58:	mov	r3, r0
   11a5c:	mov	r0, sl
   11a60:	ldr	r2, [sp, #72]	; 0x48
   11a64:	mov	r1, r5
   11a68:	bl	111c0 <error@plt>
   11a6c:	b	1170c <__assert_fail@plt+0x384>
   11a70:	add	r0, sp, #192	; 0xc0
   11a74:	bl	17768 <__assert_fail@plt+0x63e0>
   11a78:	b	11910 <__assert_fail@plt+0x588>
   11a7c:	mov	r0, #0
   11a80:	bl	1137c <close@plt>
   11a84:	cmp	r0, #0
   11a88:	beq	119a0 <__assert_fail@plt+0x618>
   11a8c:	bl	11280 <__errno_location@plt>
   11a90:	movw	r2, #39776	; 0x9b60
   11a94:	movt	r2, #1
   11a98:	ldr	r1, [r0]
   11a9c:	mov	r0, #1
   11aa0:	bl	111c0 <error@plt>
   11aa4:	cmp	r3, r8
   11aa8:	blt	11bb8 <__assert_fail@plt+0x830>
   11aac:	ldr	r0, [pc, #956]	; 11e70 <__assert_fail@plt+0xae8>
   11ab0:	bl	1323c <__assert_fail@plt+0x1eb4>
   11ab4:	subs	r9, r0, #0
   11ab8:	beq	11cf0 <__assert_fail@plt+0x968>
   11abc:	mov	r1, #112	; 0x70
   11ac0:	mov	r0, #1
   11ac4:	ldr	r7, [pc, #932]	; 11e70 <__assert_fail@plt+0xae8>
   11ac8:	bl	18298 <__assert_fail@plt+0x6f10>
   11acc:	ldr	r3, [sp, #32]
   11ad0:	str	r0, [sp, #52]	; 0x34
   11ad4:	str	r3, [sp, #80]	; 0x50
   11ad8:	add	r3, sp, #88	; 0x58
   11adc:	str	r3, [sp, #40]	; 0x28
   11ae0:	ldrb	r5, [r4]
   11ae4:	ldrb	r1, [r4, #8]
   11ae8:	ldrb	r2, [r4, #9]
   11aec:	ldrb	r3, [r4, #10]
   11af0:	add	r5, r5, r1
   11af4:	ldrb	r6, [r4, #11]
   11af8:	add	r5, r5, r2
   11afc:	add	r5, r5, r3
   11b00:	add	r5, r5, r6
   11b04:	cmp	r5, #1
   11b08:	beq	11d7c <__assert_fail@plt+0x9f4>
   11b0c:	mov	r8, #1
   11b10:	ldr	r3, [sp, #52]	; 0x34
   11b14:	movw	r6, #39776	; 0x9b60
   11b18:	movt	r6, #1
   11b1c:	mov	r5, #0
   11b20:	add	sl, r3, #8
   11b24:	b	11b4c <__assert_fail@plt+0x7c4>
   11b28:	mov	r2, sl
   11b2c:	mov	r1, #0
   11b30:	mov	r0, #3
   11b34:	bl	11178 <__fxstat64@plt>
   11b38:	add	r5, r5, #1
   11b3c:	add	sl, sl, #112	; 0x70
   11b40:	str	r0, [sl, #-120]	; 0xffffff88
   11b44:	cmp	r5, r8
   11b48:	bcs	11bfc <__assert_fail@plt+0x874>
   11b4c:	ldr	fp, [r7, r5, lsl #2]
   11b50:	cmp	fp, #0
   11b54:	beq	11b28 <__assert_fail@plt+0x7a0>
   11b58:	mov	r1, r6
   11b5c:	mov	r0, fp
   11b60:	bl	11088 <strcmp@plt>
   11b64:	cmp	r0, #0
   11b68:	beq	11b28 <__assert_fail@plt+0x7a0>
   11b6c:	mov	r1, fp
   11b70:	mov	r2, sl
   11b74:	mov	r0, #3
   11b78:	bl	11358 <__xstat64@plt>
   11b7c:	b	11b38 <__assert_fail@plt+0x7b0>
   11b80:	ldrb	r3, [r4, #9]
   11b84:	cmp	r3, r5
   11b88:	bne	115b0 <__assert_fail@plt+0x228>
   11b8c:	ldrb	r3, [r4, #10]
   11b90:	cmp	r3, r5
   11b94:	bne	115b0 <__assert_fail@plt+0x228>
   11b98:	ldrb	r3, [r4, #11]
   11b9c:	cmp	r3, r5
   11ba0:	bne	115b0 <__assert_fail@plt+0x228>
   11ba4:	mov	r3, #1
   11ba8:	strb	r3, [r4]
   11bac:	strb	r3, [r4, #8]
   11bb0:	strb	r3, [r4, #10]
   11bb4:	b	115b0 <__assert_fail@plt+0x228>
   11bb8:	add	r7, r7, r3, lsl #2
   11bbc:	sub	r8, r8, r3
   11bc0:	mov	r0, r7
   11bc4:	bl	1323c <__assert_fail@plt+0x1eb4>
   11bc8:	subs	r9, r0, #0
   11bcc:	beq	11cf0 <__assert_fail@plt+0x968>
   11bd0:	ldr	r3, [sp, #32]
   11bd4:	str	r3, [sp, #80]	; 0x50
   11bd8:	add	r3, sp, #88	; 0x58
   11bdc:	str	r3, [sp, #40]	; 0x28
   11be0:	mov	r1, #112	; 0x70
   11be4:	mov	r0, r8
   11be8:	bl	18298 <__assert_fail@plt+0x6f10>
   11bec:	cmp	r8, #1
   11bf0:	str	r0, [sp, #52]	; 0x34
   11bf4:	bne	11b10 <__assert_fail@plt+0x788>
   11bf8:	b	11ae0 <__assert_fail@plt+0x758>
   11bfc:	ldr	r2, [sp, #52]	; 0x34
   11c00:	ldr	r3, [r2]
   11c04:	cmp	r3, #0
   11c08:	movgt	r5, #1
   11c0c:	bgt	11668 <__assert_fail@plt+0x2e0>
   11c10:	mov	ip, #112	; 0x70
   11c14:	mov	r3, r2
   11c18:	mov	r0, #0
   11c1c:	mov	r1, #0
   11c20:	mov	r6, #1
   11c24:	mla	ip, ip, r8, r2
   11c28:	b	11c60 <__assert_fail@plt+0x8d8>
   11c2c:	ldr	r2, [r3]
   11c30:	cmp	r2, #0
   11c34:	bne	11c5c <__assert_fail@plt+0x8d4>
   11c38:	ldr	r2, [r3, #24]
   11c3c:	and	r2, r2, #61440	; 0xf000
   11c40:	cmp	r2, #32768	; 0x8000
   11c44:	movne	r6, #7
   11c48:	bne	11c5c <__assert_fail@plt+0x8d4>
   11c4c:	ldr	r2, [r3, #56]	; 0x38
   11c50:	ldr	lr, [r3, #60]	; 0x3c
   11c54:	adds	r0, r0, r2
   11c58:	adc	r1, r1, lr
   11c5c:	add	r3, r3, #112	; 0x70
   11c60:	cmp	ip, r3
   11c64:	bne	11c2c <__assert_fail@plt+0x8a4>
   11c68:	mov	r5, #1
   11c6c:	b	11c80 <__assert_fail@plt+0x8f8>
   11c70:	mov	r2, #10
   11c74:	mov	r3, #0
   11c78:	add	r5, r5, #1
   11c7c:	bl	192b0 <_obstack_memory_used@@Base+0x4f0>
   11c80:	cmp	r1, #0
   11c84:	cmpeq	r0, #9
   11c88:	bhi	11c70 <__assert_fail@plt+0x8e8>
   11c8c:	cmp	r5, r6
   11c90:	movlt	r5, r6
   11c94:	b	11668 <__assert_fail@plt+0x2e0>
   11c98:	movw	r1, #39780	; 0x9b64
   11c9c:	movt	r1, #1
   11ca0:	ldr	r0, [sp, #32]
   11ca4:	bl	11334 <fopen64@plt>
   11ca8:	subs	r5, r0, #0
   11cac:	bne	115f4 <__assert_fail@plt+0x26c>
   11cb0:	bl	11280 <__errno_location@plt>
   11cb4:	ldr	r4, [r0]
   11cb8:	mov	r2, #5
   11cbc:	mov	r0, r5
   11cc0:	movw	r1, #39784	; 0x9b68
   11cc4:	movt	r1, #1
   11cc8:	bl	11124 <dcgettext@plt>
   11ccc:	mov	r5, r0
   11cd0:	mov	r0, #4
   11cd4:	ldr	r1, [sp, #32]
   11cd8:	bl	16124 <__assert_fail@plt+0x4d9c>
   11cdc:	mov	r3, r0
   11ce0:	mov	r2, r5
   11ce4:	mov	r1, r4
   11ce8:	mov	r0, #1
   11cec:	bl	111c0 <error@plt>
   11cf0:	bl	186ec <__assert_fail@plt+0x7364>
   11cf4:	vldr	d8, [pc, #348]	; 11e58 <__assert_fail@plt+0xad0>
   11cf8:	ldrd	r0, [sp, #136]	; 0x88
   11cfc:	bl	19250 <_obstack_memory_used@@Base+0x490>
   11d00:	vmov	d9, r0, r1
   11d04:	bl	139b0 <__assert_fail@plt+0x2628>
   11d08:	vmul.f64	d0, d0, d8
   11d0c:	vldr	d7, [pc, #332]	; 11e60 <__assert_fail@plt+0xad8>
   11d10:	vcmpe.f64	d0, d7
   11d14:	vmrs	APSR_nzcv, fpscr
   11d18:	ble	11d8c <__assert_fail@plt+0xa04>
   11d1c:	vcmpe.f64	d9, d7
   11d20:	vmrs	APSR_nzcv, fpscr
   11d24:	bhi	11630 <__assert_fail@plt+0x2a8>
   11d28:	add	r0, sp, #192	; 0xc0
   11d2c:	bl	176d8 <__assert_fail@plt+0x6350>
   11d30:	add	r1, sp, #192	; 0xc0
   11d34:	mov	r0, r5
   11d38:	bl	177a4 <__assert_fail@plt+0x641c>
   11d3c:	subs	r3, r0, #0
   11d40:	str	r3, [sp, #80]	; 0x50
   11d44:	beq	11e1c <__assert_fail@plt+0xa94>
   11d48:	mov	r0, r5
   11d4c:	bl	13524 <__assert_fail@plt+0x219c>
   11d50:	cmp	r0, #0
   11d54:	bne	11e1c <__assert_fail@plt+0xa94>
   11d58:	ldr	r8, [sp, #192]	; 0xc0
   11d5c:	ldr	r7, [sp, #196]	; 0xc4
   11d60:	mov	r0, r7
   11d64:	bl	1323c <__assert_fail@plt+0x1eb4>
   11d68:	subs	r9, r0, #0
   11d6c:	beq	11cf0 <__assert_fail@plt+0x968>
   11d70:	cmp	r8, #0
   11d74:	bne	11be0 <__assert_fail@plt+0x858>
   11d78:	b	11648 <__assert_fail@plt+0x2c0>
   11d7c:	ldr	r3, [sp, #52]	; 0x34
   11d80:	mov	r8, r5
   11d84:	str	r5, [r3]
   11d88:	b	11668 <__assert_fail@plt+0x2e0>
   11d8c:	bl	139b0 <__assert_fail@plt+0x2628>
   11d90:	vmul.f64	d7, d0, d8
   11d94:	b	11d1c <__assert_fail@plt+0x994>
   11d98:	mov	r0, r5
   11d9c:	bl	12ecc <__assert_fail@plt+0x1b44>
   11da0:	mov	r2, #5
   11da4:	movw	r1, #39704	; 0x9b18
   11da8:	movt	r1, #1
   11dac:	mov	r0, #0
   11db0:	bl	11124 <dcgettext@plt>
   11db4:	ldr	r3, [r5]
   11db8:	mov	r4, r0
   11dbc:	mov	r0, #4
   11dc0:	ldr	r1, [r7, r3, lsl #2]
   11dc4:	bl	16124 <__assert_fail@plt+0x4d9c>
   11dc8:	mov	r1, #0
   11dcc:	mov	r3, r0
   11dd0:	mov	r2, r4
   11dd4:	mov	r0, r1
   11dd8:	bl	111c0 <error@plt>
   11ddc:	movw	r3, #45448	; 0xb188
   11de0:	movt	r3, #2
   11de4:	ldr	r4, [r3]
   11de8:	mov	r2, #5
   11dec:	movw	r1, #39724	; 0x9b2c
   11df0:	movt	r1, #1
   11df4:	mov	r0, #0
   11df8:	bl	11124 <dcgettext@plt>
   11dfc:	mov	r3, r0
   11e00:	movw	r2, #40568	; 0x9e78
   11e04:	movt	r2, #1
   11e08:	mov	r1, #1
   11e0c:	mov	r0, r4
   11e10:	bl	112e0 <__fprintf_chk@plt>
   11e14:	mov	r0, #1
   11e18:	bl	12ecc <__assert_fail@plt+0x1b44>
   11e1c:	mov	r2, #5
   11e20:	movw	r1, #39812	; 0x9b84
   11e24:	movt	r1, #1
   11e28:	mov	r0, #0
   11e2c:	bl	11124 <dcgettext@plt>
   11e30:	mov	r4, r0
   11e34:	mov	r0, #4
   11e38:	ldr	r1, [sp, #32]
   11e3c:	bl	16124 <__assert_fail@plt+0x4d9c>
   11e40:	mov	r3, r0
   11e44:	mov	r2, r4
   11e48:	mov	r1, #0
   11e4c:	mov	r0, #1
   11e50:	bl	111c0 <error@plt>
   11e54:	nop	{0}
   11e58:	andeq	r0, r0, r0
   11e5c:	svccc	0x00e00000
   11e60:	andeq	r0, r0, r0
   11e64:	cmnmi	r4, r0
   11e68:	andeq	r9, r1, ip, ror #9
   11e6c:	andeq	r9, r1, ip, lsl #11
   11e70:	andeq	fp, r2, r0, ror #3
   11e74:	mov	fp, #0
   11e78:	mov	lr, #0
   11e7c:	pop	{r1}		; (ldr r1, [sp], #4)
   11e80:	mov	r2, sp
   11e84:	push	{r2}		; (str r2, [sp, #-4]!)
   11e88:	push	{r0}		; (str r0, [sp, #-4]!)
   11e8c:	ldr	ip, [pc, #16]	; 11ea4 <__assert_fail@plt+0xb1c>
   11e90:	push	{ip}		; (str ip, [sp, #-4]!)
   11e94:	ldr	r0, [pc, #12]	; 11ea8 <__assert_fail@plt+0xb20>
   11e98:	ldr	r3, [pc, #12]	; 11eac <__assert_fail@plt+0xb24>
   11e9c:	bl	111fc <__libc_start_main@plt>
   11ea0:	bl	11370 <abort@plt>
   11ea4:	andeq	r9, r1, r4, lsl #9
   11ea8:	muleq	r1, r8, r3
   11eac:	andeq	r9, r1, r4, lsr #8
   11eb0:	ldr	r3, [pc, #20]	; 11ecc <__assert_fail@plt+0xb44>
   11eb4:	ldr	r2, [pc, #20]	; 11ed0 <__assert_fail@plt+0xb48>
   11eb8:	add	r3, pc, r3
   11ebc:	ldr	r2, [r3, r2]
   11ec0:	cmp	r2, #0
   11ec4:	bxeq	lr
   11ec8:	b	11214 <__gmon_start__@plt>
   11ecc:	andeq	r9, r1, r0, asr #2
   11ed0:	andeq	r0, r0, ip, lsl r1
   11ed4:	ldr	r0, [pc, #24]	; 11ef4 <__assert_fail@plt+0xb6c>
   11ed8:	ldr	r3, [pc, #24]	; 11ef8 <__assert_fail@plt+0xb70>
   11edc:	cmp	r3, r0
   11ee0:	bxeq	lr
   11ee4:	ldr	r3, [pc, #16]	; 11efc <__assert_fail@plt+0xb74>
   11ee8:	cmp	r3, #0
   11eec:	bxeq	lr
   11ef0:	bx	r3
   11ef4:	andeq	fp, r2, r4, ror r1
   11ef8:	andeq	fp, r2, r4, ror r1
   11efc:	andeq	r0, r0, r0
   11f00:	ldr	r0, [pc, #36]	; 11f2c <__assert_fail@plt+0xba4>
   11f04:	ldr	r1, [pc, #36]	; 11f30 <__assert_fail@plt+0xba8>
   11f08:	sub	r1, r1, r0
   11f0c:	asr	r1, r1, #2
   11f10:	add	r1, r1, r1, lsr #31
   11f14:	asrs	r1, r1, #1
   11f18:	bxeq	lr
   11f1c:	ldr	r3, [pc, #16]	; 11f34 <__assert_fail@plt+0xbac>
   11f20:	cmp	r3, #0
   11f24:	bxeq	lr
   11f28:	bx	r3
   11f2c:	andeq	fp, r2, r4, ror r1
   11f30:	andeq	fp, r2, r4, ror r1
   11f34:	andeq	r0, r0, r0
   11f38:	push	{r4, lr}
   11f3c:	ldr	r4, [pc, #24]	; 11f5c <__assert_fail@plt+0xbd4>
   11f40:	ldrb	r3, [r4]
   11f44:	cmp	r3, #0
   11f48:	popne	{r4, pc}
   11f4c:	bl	11ed4 <__assert_fail@plt+0xb4c>
   11f50:	mov	r3, #1
   11f54:	strb	r3, [r4]
   11f58:	pop	{r4, pc}
   11f5c:	muleq	r2, ip, r1
   11f60:	b	11f00 <__assert_fail@plt+0xb78>
   11f64:	strd	r4, [sp, #-28]!	; 0xffffffe4
   11f68:	movw	r4, #45472	; 0xb1a0
   11f6c:	movt	r4, #2
   11f70:	strd	r6, [sp, #8]
   11f74:	strd	r8, [sp, #16]
   11f78:	mov	r9, r3
   11f7c:	mov	r8, r2
   11f80:	ldrb	r3, [r4]
   11f84:	str	lr, [sp, #24]
   11f88:	sub	sp, sp, #28
   11f8c:	ldr	r6, [sp, #80]	; 0x50
   11f90:	cmp	r3, #0
   11f94:	ldreq	r5, [pc, #428]	; 12148 <__assert_fail@plt+0xdc0>
   11f98:	bne	12110 <__assert_fail@plt+0xd88>
   11f9c:	ldrb	r3, [r4, #8]
   11fa0:	cmp	r3, #0
   11fa4:	bne	120dc <__assert_fail@plt+0xd54>
   11fa8:	ldrb	r3, [r4, #9]
   11fac:	cmp	r3, #0
   11fb0:	bne	120ac <__assert_fail@plt+0xd24>
   11fb4:	ldrb	r3, [r4, #10]
   11fb8:	cmp	r3, #0
   11fbc:	bne	1207c <__assert_fail@plt+0xcf4>
   11fc0:	ldrb	r3, [r4, #11]
   11fc4:	cmp	r3, #0
   11fc8:	bne	12054 <__assert_fail@plt+0xccc>
   11fcc:	cmp	r6, #0
   11fd0:	beq	12010 <__assert_fail@plt+0xc88>
   11fd4:	mov	r1, #10
   11fd8:	mov	r0, r6
   11fdc:	bl	11268 <strchr@plt>
   11fe0:	cmp	r0, #0
   11fe4:	beq	11ffc <__assert_fail@plt+0xc74>
   11fe8:	mov	r2, r6
   11fec:	mov	r1, #3
   11ff0:	mov	r0, #0
   11ff4:	bl	16ca4 <__assert_fail@plt+0x591c>
   11ff8:	mov	r6, r0
   11ffc:	movw	r1, #38292	; 0x9594
   12000:	movt	r1, #1
   12004:	mov	r2, r6
   12008:	mov	r0, #1
   1200c:	bl	112c8 <__printf_chk@plt>
   12010:	movw	r3, #45460	; 0xb194
   12014:	movt	r3, #2
   12018:	ldr	r0, [r3]
   1201c:	ldr	r3, [r0, #20]
   12020:	ldr	r2, [r0, #24]
   12024:	cmp	r3, r2
   12028:	addcc	r1, r3, #1
   1202c:	movcc	r2, #10
   12030:	strcc	r1, [r0, #20]
   12034:	strbcc	r2, [r3]
   12038:	bcs	1213c <__assert_fail@plt+0xdb4>
   1203c:	add	sp, sp, #28
   12040:	ldrd	r4, [sp]
   12044:	ldrd	r6, [sp, #8]
   12048:	ldrd	r8, [sp, #16]
   1204c:	add	sp, sp, #24
   12050:	pop	{pc}		; (ldr pc, [sp], #4)
   12054:	ldr	r4, [r4, #4]
   12058:	mov	r2, sp
   1205c:	ldrd	r0, [sp, #72]	; 0x48
   12060:	bl	13768 <__assert_fail@plt+0x23e0>
   12064:	mov	r3, r0
   12068:	mov	r1, r5
   1206c:	mov	r2, r4
   12070:	mov	r0, #1
   12074:	bl	112c8 <__printf_chk@plt>
   12078:	b	11fcc <__assert_fail@plt+0xc44>
   1207c:	ldr	r7, [r4, #4]
   12080:	mov	r2, sp
   12084:	ldrd	r0, [sp, #64]	; 0x40
   12088:	bl	13768 <__assert_fail@plt+0x23e0>
   1208c:	mov	r3, r0
   12090:	mov	r1, r5
   12094:	mov	r2, r7
   12098:	mov	r0, #1
   1209c:	movw	r5, #38060	; 0x94ac
   120a0:	movt	r5, #1
   120a4:	bl	112c8 <__printf_chk@plt>
   120a8:	b	11fc0 <__assert_fail@plt+0xc38>
   120ac:	ldr	r7, [r4, #4]
   120b0:	mov	r2, sp
   120b4:	ldrd	r0, [sp, #56]	; 0x38
   120b8:	bl	13768 <__assert_fail@plt+0x23e0>
   120bc:	mov	r3, r0
   120c0:	mov	r1, r5
   120c4:	mov	r2, r7
   120c8:	mov	r0, #1
   120cc:	movw	r5, #38060	; 0x94ac
   120d0:	movt	r5, #1
   120d4:	bl	112c8 <__printf_chk@plt>
   120d8:	b	11fb4 <__assert_fail@plt+0xc2c>
   120dc:	ldr	r7, [r4, #4]
   120e0:	mov	r1, r9
   120e4:	mov	r2, sp
   120e8:	mov	r0, r8
   120ec:	bl	13768 <__assert_fail@plt+0x23e0>
   120f0:	mov	r3, r0
   120f4:	mov	r1, r5
   120f8:	mov	r0, #1
   120fc:	movw	r5, #38060	; 0x94ac
   12100:	movt	r5, #1
   12104:	mov	r2, r7
   12108:	bl	112c8 <__printf_chk@plt>
   1210c:	b	11fa8 <__assert_fail@plt+0xc20>
   12110:	ldr	r7, [r4, #4]
   12114:	mov	r2, sp
   12118:	movw	r5, #38060	; 0x94ac
   1211c:	movt	r5, #1
   12120:	bl	13768 <__assert_fail@plt+0x23e0>
   12124:	mov	r3, r0
   12128:	add	r1, r5, #1
   1212c:	mov	r0, #1
   12130:	mov	r2, r7
   12134:	bl	112c8 <__printf_chk@plt>
   12138:	b	11f9c <__assert_fail@plt+0xc14>
   1213c:	mov	r1, #10
   12140:	bl	11304 <__overflow@plt>
   12144:	b	1203c <__assert_fail@plt+0xcb4>
   12148:	andeq	r9, r1, sp, lsr #9
   1214c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12150:	subs	r3, r1, #0
   12154:	strd	r6, [sp, #8]
   12158:	mov	r7, r2
   1215c:	strd	r8, [sp, #16]
   12160:	strd	sl, [sp, #24]
   12164:	str	lr, [sp, #32]
   12168:	sub	sp, sp, #16384	; 0x4000
   1216c:	sub	sp, sp, #156	; 0x9c
   12170:	strne	r3, [sp, #96]	; 0x60
   12174:	str	r0, [sp, #80]	; 0x50
   12178:	str	r3, [sp, #88]	; 0x58
   1217c:	beq	12a20 <__assert_fail@plt+0x1698>
   12180:	mov	r2, #0
   12184:	mov	r3, #0
   12188:	movw	sl, #45472	; 0xb1a0
   1218c:	movt	sl, #2
   12190:	strd	r2, [sp, #112]	; 0x70
   12194:	strd	r2, [sp, #120]	; 0x78
   12198:	bl	1119c <__ctype_get_mb_cur_max@plt>
   1219c:	cmp	r0, #1
   121a0:	ldrb	r4, [sl, #10]
   121a4:	bls	1257c <__assert_fail@plt+0x11f4>
   121a8:	ldrb	r3, [sl, #9]
   121ac:	str	r3, [sp, #92]	; 0x5c
   121b0:	ldrb	r3, [sl, #8]
   121b4:	cmp	r3, #0
   121b8:	bne	12420 <__assert_fail@plt+0x1098>
   121bc:	ldrb	r3, [sl, #11]
   121c0:	cmp	r3, #0
   121c4:	str	r3, [sp, #44]	; 0x2c
   121c8:	bne	12420 <__assert_fail@plt+0x1098>
   121cc:	ldr	r2, [sp, #92]	; 0x5c
   121d0:	eor	r3, r4, #1
   121d4:	orrs	r3, r3, r2
   121d8:	bne	12c14 <__assert_fail@plt+0x188c>
   121dc:	ldrb	r3, [sl]
   121e0:	cmp	r3, #0
   121e4:	bne	12c94 <__assert_fail@plt+0x190c>
   121e8:	ldr	r6, [r7]
   121ec:	cmp	r6, #0
   121f0:	bgt	12b7c <__assert_fail@plt+0x17f4>
   121f4:	cmp	r6, #0
   121f8:	bne	122c0 <__assert_fail@plt+0xf38>
   121fc:	ldr	r3, [r7, #24]
   12200:	and	r3, r3, #53248	; 0xd000
   12204:	cmp	r3, #32768	; 0x8000
   12208:	bne	122c0 <__assert_fail@plt+0xf38>
   1220c:	ldrd	r4, [r7, #56]	; 0x38
   12210:	cmp	r4, #0
   12214:	sbcs	r3, r5, #0
   12218:	blt	122c0 <__assert_fail@plt+0xf38>
   1221c:	add	r1, sp, #16384	; 0x4000
   12220:	mvn	r3, #0
   12224:	ldr	r8, [sl, #12]
   12228:	add	r1, r1, #192	; 0xc0
   1222c:	mvn	r2, #0
   12230:	ldrd	r0, [r1]
   12234:	cmp	r1, r3
   12238:	cmpeq	r0, r2
   1223c:	beq	12b98 <__assert_fail@plt+0x1810>
   12240:	udiv	r3, r4, r8
   12244:	mls	r8, r8, r3, r4
   12248:	cmp	r8, #0
   1224c:	bne	12c08 <__assert_fail@plt+0x1880>
   12250:	mov	r0, #0
   12254:	mov	r1, #0
   12258:	strd	r0, [sp, #32]
   1225c:	ldr	r3, [r7, #64]	; 0x40
   12260:	mov	r7, #0
   12264:	sub	r2, r3, #1
   12268:	cmn	r2, #-536870911	; 0xe0000001
   1226c:	addls	r3, r3, #1
   12270:	movwhi	r3, #513	; 0x201
   12274:	cmp	r7, r1
   12278:	udiv	r6, r4, r3
   1227c:	mls	r6, r3, r6, r4
   12280:	sub	r6, r4, r6
   12284:	cmpeq	r6, r0
   12288:	bls	122c0 <__assert_fail@plt+0xf38>
   1228c:	mov	r1, #1
   12290:	mov	r3, r7
   12294:	ldr	r0, [sp, #80]	; 0x50
   12298:	mov	r2, r6
   1229c:	str	r1, [sp]
   122a0:	bl	11190 <lseek64@plt>
   122a4:	cmp	r0, #0
   122a8:	sbcs	r3, r1, #0
   122ac:	blt	122c0 <__assert_fail@plt+0xf38>
   122b0:	ldrd	r0, [sp, #32]
   122b4:	subs	r2, r6, r0
   122b8:	sbc	r3, r7, r1
   122bc:	strd	r2, [sp, #120]	; 0x78
   122c0:	ldr	r4, [sp, #80]	; 0x50
   122c4:	mov	r1, #2
   122c8:	mov	r2, #0
   122cc:	mov	r3, #0
   122d0:	add	r5, sp, #148	; 0x94
   122d4:	strd	r2, [sp]
   122d8:	str	r1, [sp, #8]
   122dc:	mov	r0, r4
   122e0:	bl	134d0 <__assert_fail@plt+0x2148>
   122e4:	b	12300 <__assert_fail@plt+0xf78>
   122e8:	cmn	r0, #1
   122ec:	beq	12b28 <__assert_fail@plt+0x17a0>
   122f0:	ldrd	r2, [sp, #120]	; 0x78
   122f4:	adds	r6, r2, r0
   122f8:	adc	r7, r3, #0
   122fc:	strd	r6, [sp, #120]	; 0x78
   12300:	mov	r2, #16384	; 0x4000
   12304:	mov	r1, r5
   12308:	mov	r0, r4
   1230c:	bl	17970 <__assert_fail@plt+0x65e8>
   12310:	cmp	r0, #0
   12314:	bne	122e8 <__assert_fail@plt+0xf60>
   12318:	mov	r1, #1
   1231c:	ldr	r0, [sp, #120]	; 0x78
   12320:	mov	r2, #0
   12324:	mov	r3, #0
   12328:	mov	r8, r2
   1232c:	str	r1, [sp, #44]	; 0x2c
   12330:	mov	r9, r3
   12334:	mov	r4, r2
   12338:	ldr	r1, [sp, #124]	; 0x7c
   1233c:	mov	r5, r3
   12340:	strd	r8, [sp, #32]
   12344:	ldrb	r3, [sl, #9]
   12348:	strd	r0, [sp, #8]
   1234c:	ldrd	r6, [sp, #32]
   12350:	ldr	r2, [sp, #92]	; 0x5c
   12354:	strd	r6, [sp, #16]
   12358:	cmp	r3, r2
   1235c:	mov	r2, r8
   12360:	movhi	r5, r1
   12364:	ldr	r1, [sp, #88]	; 0x58
   12368:	movhi	r4, r0
   1236c:	mov	r3, r9
   12370:	strd	r4, [sp]
   12374:	str	r1, [sp, #24]
   12378:	ldrd	r0, [sp, #112]	; 0x70
   1237c:	bl	11f64 <__assert_fail@plt+0xbdc>
   12380:	ldr	r3, [sl, #24]
   12384:	ldr	r2, [sp, #112]	; 0x70
   12388:	ldr	r1, [sl, #28]
   1238c:	ldr	r0, [sp, #116]	; 0x74
   12390:	adds	r2, r3, r2
   12394:	ldr	r3, [sl, #32]
   12398:	str	r2, [sl, #24]
   1239c:	ldr	ip, [sl, #36]	; 0x24
   123a0:	adc	r1, r1, r0
   123a4:	ldr	r2, [sl, #40]	; 0x28
   123a8:	adds	r3, r3, r8
   123ac:	str	r1, [sl, #28]
   123b0:	ldr	r0, [sl, #44]	; 0x2c
   123b4:	str	r3, [sl, #32]
   123b8:	adc	ip, ip, r9
   123bc:	ldr	r3, [sl, #48]	; 0x30
   123c0:	adds	r4, r2, r4
   123c4:	str	ip, [sl, #36]	; 0x24
   123c8:	ldr	r1, [sp, #120]	; 0x78
   123cc:	adc	r5, r0, r5
   123d0:	ldr	r0, [sl, #52]	; 0x34
   123d4:	strd	r4, [sl, #40]	; 0x28
   123d8:	ldr	ip, [sp, #124]	; 0x7c
   123dc:	adds	r1, r3, r1
   123e0:	ldrd	r2, [sl, #56]	; 0x38
   123e4:	str	r1, [sl, #48]	; 0x30
   123e8:	adc	r1, r0, ip
   123ec:	ldr	r0, [sp, #44]	; 0x2c
   123f0:	cmp	r3, r7
   123f4:	str	r1, [sl, #52]	; 0x34
   123f8:	cmpeq	r2, r6
   123fc:	strdcc	r6, [sl, #56]	; 0x38
   12400:	add	sp, sp, #16384	; 0x4000
   12404:	add	sp, sp, #156	; 0x9c
   12408:	ldrd	r4, [sp]
   1240c:	ldrd	r6, [sp, #8]
   12410:	ldrd	r8, [sp, #16]
   12414:	ldrd	sl, [sp, #24]
   12418:	add	sp, sp, #32
   1241c:	pop	{pc}		; (ldr pc, [sp], #4)
   12420:	mov	r1, #2
   12424:	mov	r2, #0
   12428:	ldr	r0, [sp, #80]	; 0x50
   1242c:	mov	r3, #0
   12430:	strd	r2, [sp]
   12434:	str	r1, [sp, #8]
   12438:	bl	134d0 <__assert_fail@plt+0x2148>
   1243c:	bl	1119c <__ctype_get_mb_cur_max@plt>
   12440:	cmp	r0, #1
   12444:	bls	12698 <__assert_fail@plt+0x1310>
   12448:	mov	r2, #0
   1244c:	mov	r3, r2
   12450:	mov	r6, r2
   12454:	mov	r8, r2
   12458:	strd	r2, [sp, #48]	; 0x30
   1245c:	ldrd	r0, [sp, #48]	; 0x30
   12460:	str	sl, [sp, #100]	; 0x64
   12464:	strd	r2, [sp, #132]	; 0x84
   12468:	movw	r3, #40244	; 0x9d34
   1246c:	movt	r3, #1
   12470:	mov	r4, r0
   12474:	mov	r5, r1
   12478:	str	r3, [sp, #72]	; 0x48
   1247c:	add	r3, sp, #148	; 0x94
   12480:	strd	r0, [sp, #56]	; 0x38
   12484:	strd	r0, [sp, #64]	; 0x40
   12488:	str	r3, [sp, #76]	; 0x4c
   1248c:	str	r2, [sp, #84]	; 0x54
   12490:	ldr	r3, [sp, #76]	; 0x4c
   12494:	rsb	r2, r6, #16384	; 0x4000
   12498:	ldr	r0, [sp, #80]	; 0x50
   1249c:	add	r1, r3, r6
   124a0:	bl	17970 <__assert_fail@plt+0x65e8>
   124a4:	cmp	r0, #0
   124a8:	beq	12a3c <__assert_fail@plt+0x16b4>
   124ac:	cmn	r0, #1
   124b0:	beq	12a78 <__assert_fail@plt+0x16f0>
   124b4:	ldr	r7, [sp, #76]	; 0x4c
   124b8:	add	r6, r6, r0
   124bc:	add	r9, sp, #132	; 0x84
   124c0:	str	r4, [sp, #32]
   124c4:	ldrd	r2, [sp, #120]	; 0x78
   124c8:	str	r5, [sp, #44]	; 0x2c
   124cc:	adds	sl, r2, r0
   124d0:	mov	r2, r8
   124d4:	adc	fp, r3, #0
   124d8:	strd	sl, [sp, #120]	; 0x78
   124dc:	ldr	fp, [sp, #84]	; 0x54
   124e0:	cmp	r2, #0
   124e4:	bne	12848 <__assert_fail@plt+0x14c0>
   124e8:	ldrb	r8, [r7]
   124ec:	ldr	r0, [sp, #72]	; 0x48
   124f0:	lsr	r3, r8, #5
   124f4:	and	r1, r8, #31
   124f8:	ldr	r3, [r0, r3, lsl #2]
   124fc:	lsr	r3, r3, r1
   12500:	ands	sl, r3, #1
   12504:	beq	12848 <__assert_fail@plt+0x14c0>
   12508:	sub	r1, r8, #9
   1250c:	str	r8, [sp, #108]	; 0x6c
   12510:	cmp	r1, #23
   12514:	ldrls	pc, [pc, r1, lsl #2]
   12518:	b	12650 <__assert_fail@plt+0x12c8>
   1251c:	muleq	r1, r0, r5
   12520:	strdeq	r2, [r1], -r8
   12524:	andeq	r2, r1, r8, lsr #11
   12528:	andeq	r2, r1, r0, lsl r6
   1252c:	andeq	r2, r1, r0, lsl r6
   12530:	andeq	r2, r1, r0, asr r6
   12534:	andeq	r2, r1, r0, asr r6
   12538:	andeq	r2, r1, r0, asr r6
   1253c:	andeq	r2, r1, r0, asr r6
   12540:	andeq	r2, r1, r0, asr r6
   12544:	andeq	r2, r1, r0, asr r6
   12548:	andeq	r2, r1, r0, asr r6
   1254c:	andeq	r2, r1, r0, asr r6
   12550:	andeq	r2, r1, r0, asr r6
   12554:	andeq	r2, r1, r0, asr r6
   12558:	andeq	r2, r1, r0, asr r6
   1255c:	andeq	r2, r1, r0, asr r6
   12560:	andeq	r2, r1, r0, asr r6
   12564:	andeq	r2, r1, r0, asr r6
   12568:	andeq	r2, r1, r0, asr r6
   1256c:	andeq	r2, r1, r0, asr r6
   12570:	andeq	r2, r1, r0, asr r6
   12574:	andeq	r2, r1, r0, asr r6
   12578:	andeq	r2, r1, r4, lsr r6
   1257c:	mov	r3, #0
   12580:	cmp	r4, #0
   12584:	ldrbeq	r4, [sl, #9]
   12588:	str	r3, [sp, #92]	; 0x5c
   1258c:	b	121b0 <__assert_fail@plt+0xe28>
   12590:	ldrd	r4, [sp, #48]	; 0x30
   12594:	bic	r1, r4, #7
   12598:	adds	r3, r1, #8
   1259c:	str	r3, [sp, #48]	; 0x30
   125a0:	adc	r3, r5, #0
   125a4:	str	r3, [sp, #52]	; 0x34
   125a8:	ldrd	r0, [sp, #56]	; 0x38
   125ac:	adds	r0, r0, fp
   125b0:	mov	fp, #0
   125b4:	adc	r1, r1, #0
   125b8:	strd	r0, [sp, #56]	; 0x38
   125bc:	ldr	r3, [sp, #32]
   125c0:	add	r7, r7, sl
   125c4:	sub	r6, r6, sl
   125c8:	adds	r3, r3, #1
   125cc:	str	r3, [sp, #32]
   125d0:	ldr	r3, [sp, #44]	; 0x2c
   125d4:	adc	r3, r3, #0
   125d8:	str	r3, [sp, #44]	; 0x2c
   125dc:	cmp	r6, #0
   125e0:	bne	124e0 <__assert_fail@plt+0x1158>
   125e4:	mov	r8, r2
   125e8:	str	fp, [sp, #84]	; 0x54
   125ec:	ldr	r4, [sp, #32]
   125f0:	ldr	r5, [sp, #44]	; 0x2c
   125f4:	b	12490 <__assert_fail@plt+0x1108>
   125f8:	ldr	r1, [sp, #112]	; 0x70
   125fc:	ldr	r0, [sp, #116]	; 0x74
   12600:	adds	r1, r1, #1
   12604:	adc	r0, r0, #0
   12608:	str	r1, [sp, #112]	; 0x70
   1260c:	str	r0, [sp, #116]	; 0x74
   12610:	ldrd	r0, [sp, #48]	; 0x30
   12614:	ldrd	r4, [sp, #64]	; 0x40
   12618:	cmp	r5, r1
   1261c:	cmpeq	r4, r0
   12620:	strdcc	r0, [sp, #64]	; 0x40
   12624:	mov	r0, #0
   12628:	mov	r1, #0
   1262c:	strd	r0, [sp, #48]	; 0x30
   12630:	b	125a8 <__assert_fail@plt+0x1220>
   12634:	ldr	r3, [sp, #48]	; 0x30
   12638:	adds	r3, r3, #1
   1263c:	str	r3, [sp, #48]	; 0x30
   12640:	ldr	r3, [sp, #52]	; 0x34
   12644:	adc	r3, r3, #0
   12648:	str	r3, [sp, #52]	; 0x34
   1264c:	b	125a8 <__assert_fail@plt+0x1220>
   12650:	str	r2, [sp, #84]	; 0x54
   12654:	lsl	r8, r8, #1
   12658:	bl	1122c <__ctype_b_loc@plt>
   1265c:	ldr	r1, [r0]
   12660:	ldr	r2, [sp, #84]	; 0x54
   12664:	ldrh	r1, [r1, r8]
   12668:	tst	r1, #16384	; 0x4000
   1266c:	beq	125bc <__assert_fail@plt+0x1234>
   12670:	ldr	r3, [sp, #48]	; 0x30
   12674:	adds	r3, r3, #1
   12678:	str	r3, [sp, #48]	; 0x30
   1267c:	ldr	r3, [sp, #52]	; 0x34
   12680:	adc	r3, r3, #0
   12684:	tst	r1, #8192	; 0x2000
   12688:	moveq	fp, #1
   1268c:	str	r3, [sp, #52]	; 0x34
   12690:	beq	125bc <__assert_fail@plt+0x1234>
   12694:	b	125a8 <__assert_fail@plt+0x1220>
   12698:	mov	r8, #0
   1269c:	mov	r9, #0
   126a0:	add	r3, sp, #148	; 0x94
   126a4:	mov	r4, #0
   126a8:	mov	r6, r8
   126ac:	mov	r7, r9
   126b0:	strd	r8, [sp, #32]
   126b4:	str	sl, [sp, #44]	; 0x2c
   126b8:	str	r3, [sp, #76]	; 0x4c
   126bc:	mov	r2, #16384	; 0x4000
   126c0:	ldr	r1, [sp, #76]	; 0x4c
   126c4:	ldr	r0, [sp, #80]	; 0x50
   126c8:	bl	17970 <__assert_fail@plt+0x65e8>
   126cc:	cmp	r0, #0
   126d0:	beq	12ab8 <__assert_fail@plt+0x1730>
   126d4:	cmn	r0, #1
   126d8:	beq	12aec <__assert_fail@plt+0x1764>
   126dc:	ldr	r5, [sp, #76]	; 0x4c
   126e0:	ldrd	r2, [sp, #120]	; 0x78
   126e4:	add	r1, r5, r0
   126e8:	adds	sl, r2, r0
   126ec:	adc	fp, r3, #0
   126f0:	strd	sl, [sp, #120]	; 0x78
   126f4:	mov	fp, r1
   126f8:	mov	sl, r4
   126fc:	ldrb	r4, [r5], #1
   12700:	sub	r3, r4, #9
   12704:	cmp	r3, #23
   12708:	ldrls	pc, [pc, r3, lsl #2]
   1270c:	b	127d8 <__assert_fail@plt+0x1450>
   12710:	andeq	r2, r1, r0, ror r7
   12714:	muleq	r1, r8, r7
   12718:	andeq	r2, r1, ip, ror r7
   1271c:			; <UNDEFINED> instruction: 0x000127b0
   12720:			; <UNDEFINED> instruction: 0x000127b0
   12724:	ldrdeq	r2, [r1], -r8
   12728:	ldrdeq	r2, [r1], -r8
   1272c:	ldrdeq	r2, [r1], -r8
   12730:	ldrdeq	r2, [r1], -r8
   12734:	ldrdeq	r2, [r1], -r8
   12738:	ldrdeq	r2, [r1], -r8
   1273c:	ldrdeq	r2, [r1], -r8
   12740:	ldrdeq	r2, [r1], -r8
   12744:	ldrdeq	r2, [r1], -r8
   12748:	ldrdeq	r2, [r1], -r8
   1274c:	ldrdeq	r2, [r1], -r8
   12750:	ldrdeq	r2, [r1], -r8
   12754:	ldrdeq	r2, [r1], -r8
   12758:	ldrdeq	r2, [r1], -r8
   1275c:	ldrdeq	r2, [r1], -r8
   12760:	ldrdeq	r2, [r1], -r8
   12764:	ldrdeq	r2, [r1], -r8
   12768:	ldrdeq	r2, [r1], -r8
   1276c:	andeq	r2, r1, ip, asr #15
   12770:	bic	r3, r8, #7
   12774:	adds	r8, r3, #8
   12778:	adc	r9, r9, #0
   1277c:	adds	r6, r6, sl
   12780:	mov	sl, #0
   12784:	adc	r7, r7, #0
   12788:	cmp	r5, fp
   1278c:	bne	126fc <__assert_fail@plt+0x1374>
   12790:	mov	r4, sl
   12794:	b	126bc <__assert_fail@plt+0x1334>
   12798:	ldr	r3, [sp, #112]	; 0x70
   1279c:	ldr	r0, [sp, #116]	; 0x74
   127a0:	adds	r3, r3, #1
   127a4:	adc	r0, r0, #0
   127a8:	str	r3, [sp, #112]	; 0x70
   127ac:	str	r0, [sp, #116]	; 0x74
   127b0:	ldrd	r2, [sp, #32]
   127b4:	cmp	r3, r9
   127b8:	cmpeq	r2, r8
   127bc:	strdcc	r8, [sp, #32]
   127c0:	mov	r8, #0
   127c4:	mov	r9, #0
   127c8:	b	1277c <__assert_fail@plt+0x13f4>
   127cc:	adds	r8, r8, #1
   127d0:	adc	r9, r9, #0
   127d4:	b	1277c <__assert_fail@plt+0x13f4>
   127d8:	bl	1122c <__ctype_b_loc@plt>
   127dc:	ldr	r0, [r0]
   127e0:	lsl	r3, r4, #1
   127e4:	ldrh	r3, [r0, r3]
   127e8:	tst	r3, #16384	; 0x4000
   127ec:	beq	12788 <__assert_fail@plt+0x1400>
   127f0:	adds	r8, r8, #1
   127f4:	adc	r9, r9, #0
   127f8:	tst	r3, #8192	; 0x2000
   127fc:	bne	1277c <__assert_fail@plt+0x13f4>
   12800:	mov	r0, r4
   12804:	bl	112b0 <btowc@plt>
   12808:	ldr	r3, [sp, #44]	; 0x2c
   1280c:	ldrb	r3, [r3, #16]
   12810:	cmp	r3, #0
   12814:	movne	sl, r3
   12818:	bne	12788 <__assert_fail@plt+0x1400>
   1281c:	movw	r3, #8199	; 0x2007
   12820:	cmp	r0, r3
   12824:	cmpne	r0, #160	; 0xa0
   12828:	beq	1277c <__assert_fail@plt+0x13f4>
   1282c:	movw	r3, #8239	; 0x202f
   12830:	movw	r2, #8288	; 0x2060
   12834:	cmp	r0, r2
   12838:	cmpne	r0, r3
   1283c:	movne	sl, #1
   12840:	bne	12788 <__assert_fail@plt+0x1400>
   12844:	b	1277c <__assert_fail@plt+0x13f4>
   12848:	ldrd	r4, [r9]
   1284c:	mov	r3, r9
   12850:	mov	r2, r6
   12854:	mov	r1, r7
   12858:	add	r0, sp, #108	; 0x6c
   1285c:	add	r8, sp, #140	; 0x8c
   12860:	strd	r4, [sp, #140]	; 0x8c
   12864:	bl	138a0 <__assert_fail@plt+0x2518>
   12868:	cmn	r0, #2
   1286c:	mov	sl, r0
   12870:	beq	129ac <__assert_fail@plt+0x1624>
   12874:	cmn	r0, #1
   12878:	addeq	r7, r7, #1
   1287c:	subeq	r6, r6, #1
   12880:	moveq	r2, #1
   12884:	beq	125dc <__assert_fail@plt+0x1254>
   12888:	mov	r0, r9
   1288c:	bl	11100 <mbsinit@plt>
   12890:	cmp	sl, #0
   12894:	clz	r2, r0
   12898:	lsr	r2, r2, #5
   1289c:	moveq	r8, #1
   128a0:	streq	sl, [sp, #108]	; 0x6c
   128a4:	bne	12938 <__assert_fail@plt+0x15b0>
   128a8:	mov	r0, sl
   128ac:	str	r2, [sp, #84]	; 0x54
   128b0:	bl	1116c <iswprint@plt>
   128b4:	cmp	r0, #0
   128b8:	ldr	r2, [sp, #84]	; 0x54
   128bc:	moveq	sl, r8
   128c0:	beq	125bc <__assert_fail@plt+0x1234>
   128c4:	ldr	r3, [sp, #100]	; 0x64
   128c8:	ldrb	r1, [r3, #11]
   128cc:	cmp	r1, #0
   128d0:	bne	129f4 <__assert_fail@plt+0x166c>
   128d4:	mov	r0, sl
   128d8:	str	r2, [sp, #84]	; 0x54
   128dc:	bl	11250 <iswspace@plt>
   128e0:	cmp	r0, #0
   128e4:	ldr	r2, [sp, #84]	; 0x54
   128e8:	bne	12930 <__assert_fail@plt+0x15a8>
   128ec:	ldr	r3, [sp, #100]	; 0x64
   128f0:	ldrb	r1, [r3, #16]
   128f4:	cmp	r1, #0
   128f8:	movne	sl, r8
   128fc:	movne	fp, r1
   12900:	bne	125bc <__assert_fail@plt+0x1234>
   12904:	movw	r1, #8199	; 0x2007
   12908:	cmp	sl, r1
   1290c:	cmpne	sl, #160	; 0xa0
   12910:	beq	12930 <__assert_fail@plt+0x15a8>
   12914:	movw	r0, #8239	; 0x202f
   12918:	movw	r1, #8288	; 0x2060
   1291c:	cmp	sl, r1
   12920:	cmpne	sl, r0
   12924:	movne	sl, r8
   12928:	movne	fp, #1
   1292c:	bne	125bc <__assert_fail@plt+0x1234>
   12930:	mov	sl, r8
   12934:	b	125a8 <__assert_fail@plt+0x1220>
   12938:	ldr	r0, [sp, #108]	; 0x6c
   1293c:	sub	r1, r0, #9
   12940:	cmp	r1, #23
   12944:	ldrls	pc, [pc, r1, lsl #2]
   12948:	b	12cb4 <__assert_fail@plt+0x192c>
   1294c:	muleq	r1, r0, r5
   12950:	strdeq	r2, [r1], -r8
   12954:	andeq	r2, r1, r8, lsr #11
   12958:	andeq	r2, r1, r0, lsl r6
   1295c:	andeq	r2, r1, r0, lsl r6
   12960:			; <UNDEFINED> instruction: 0x00012cb4
   12964:			; <UNDEFINED> instruction: 0x00012cb4
   12968:			; <UNDEFINED> instruction: 0x00012cb4
   1296c:			; <UNDEFINED> instruction: 0x00012cb4
   12970:			; <UNDEFINED> instruction: 0x00012cb4
   12974:			; <UNDEFINED> instruction: 0x00012cb4
   12978:			; <UNDEFINED> instruction: 0x00012cb4
   1297c:			; <UNDEFINED> instruction: 0x00012cb4
   12980:			; <UNDEFINED> instruction: 0x00012cb4
   12984:			; <UNDEFINED> instruction: 0x00012cb4
   12988:			; <UNDEFINED> instruction: 0x00012cb4
   1298c:			; <UNDEFINED> instruction: 0x00012cb4
   12990:			; <UNDEFINED> instruction: 0x00012cb4
   12994:			; <UNDEFINED> instruction: 0x00012cb4
   12998:			; <UNDEFINED> instruction: 0x00012cb4
   1299c:			; <UNDEFINED> instruction: 0x00012cb4
   129a0:			; <UNDEFINED> instruction: 0x00012cb4
   129a4:			; <UNDEFINED> instruction: 0x00012cb4
   129a8:	andeq	r2, r1, r4, lsr r6
   129ac:	ldrd	r2, [r8]
   129b0:	cmp	r6, #0
   129b4:	moveq	r8, #1
   129b8:	str	fp, [sp, #84]	; 0x54
   129bc:	ldr	r4, [sp, #32]
   129c0:	ldr	r5, [sp, #44]	; 0x2c
   129c4:	strd	r2, [sp, #132]	; 0x84
   129c8:	beq	12490 <__assert_fail@plt+0x1108>
   129cc:	cmp	r6, #16384	; 0x4000
   129d0:	movw	r3, #16385	; 0x4001
   129d4:	ldr	r0, [sp, #76]	; 0x4c
   129d8:	addeq	r7, r7, #1
   129dc:	movweq	r6, #16383	; 0x3fff
   129e0:	mov	r1, r7
   129e4:	mov	r2, r6
   129e8:	mov	r8, #1
   129ec:	bl	110c4 <__memmove_chk@plt>
   129f0:	b	12490 <__assert_fail@plt+0x1108>
   129f4:	mov	r0, sl
   129f8:	bl	110b8 <wcwidth@plt>
   129fc:	cmp	r0, #0
   12a00:	ldr	r2, [sp, #84]	; 0x54
   12a04:	ldr	sl, [sp, #108]	; 0x6c
   12a08:	ble	128d4 <__assert_fail@plt+0x154c>
   12a0c:	ldrd	r4, [sp, #48]	; 0x30
   12a10:	adds	r4, r4, r0
   12a14:	adc	r5, r5, r0, asr #31
   12a18:	strd	r4, [sp, #48]	; 0x30
   12a1c:	b	128d4 <__assert_fail@plt+0x154c>
   12a20:	movw	r1, #38296	; 0x9598
   12a24:	movt	r1, #1
   12a28:	mov	r2, #5
   12a2c:	mov	r0, r3
   12a30:	bl	11124 <dcgettext@plt>
   12a34:	str	r0, [sp, #96]	; 0x60
   12a38:	b	12180 <__assert_fail@plt+0xdf8>
   12a3c:	ldr	fp, [sp, #84]	; 0x54
   12a40:	mov	r3, #1
   12a44:	ldr	sl, [sp, #100]	; 0x64
   12a48:	str	r3, [sp, #44]	; 0x2c
   12a4c:	ldrd	r0, [sp, #48]	; 0x30
   12a50:	ldrd	r8, [sp, #56]	; 0x38
   12a54:	ldrd	r2, [sp, #64]	; 0x40
   12a58:	cmp	r3, r1
   12a5c:	strd	r2, [sp, #32]
   12a60:	cmpeq	r2, r0
   12a64:	strdcc	r0, [sp, #32]
   12a68:	adds	r8, r8, fp
   12a6c:	adc	r9, r9, #0
   12a70:	ldrd	r0, [sp, #120]	; 0x78
   12a74:	b	12344 <__assert_fail@plt+0xfbc>
   12a78:	bl	11280 <__errno_location@plt>
   12a7c:	ldr	r6, [r0]
   12a80:	mov	r0, #0
   12a84:	mov	r1, #3
   12a88:	str	r0, [sp, #44]	; 0x2c
   12a8c:	ldr	r2, [sp, #96]	; 0x60
   12a90:	ldr	fp, [sp, #84]	; 0x54
   12a94:	ldr	sl, [sp, #100]	; 0x64
   12a98:	bl	16ca4 <__assert_fail@plt+0x591c>
   12a9c:	mov	r3, r0
   12aa0:	movw	r2, #40240	; 0x9d30
   12aa4:	movt	r2, #1
   12aa8:	mov	r0, #0
   12aac:	mov	r1, r6
   12ab0:	bl	111c0 <error@plt>
   12ab4:	b	12a4c <__assert_fail@plt+0x16c4>
   12ab8:	mov	r3, #1
   12abc:	ldr	sl, [sp, #44]	; 0x2c
   12ac0:	str	r3, [sp, #44]	; 0x2c
   12ac4:	ldrd	r2, [sp, #32]
   12ac8:	ldrd	r0, [sp, #120]	; 0x78
   12acc:	cmp	r3, r9
   12ad0:	cmpeq	r2, r8
   12ad4:	strdcc	r8, [sp, #32]
   12ad8:	adds	r8, r6, r4
   12adc:	mov	r4, #0
   12ae0:	adc	r9, r7, #0
   12ae4:	mov	r5, r4
   12ae8:	b	12344 <__assert_fail@plt+0xfbc>
   12aec:	bl	11280 <__errno_location@plt>
   12af0:	ldr	r5, [r0]
   12af4:	mov	r0, #0
   12af8:	mov	r1, #3
   12afc:	ldr	sl, [sp, #44]	; 0x2c
   12b00:	str	r0, [sp, #44]	; 0x2c
   12b04:	ldr	r2, [sp, #96]	; 0x60
   12b08:	bl	16ca4 <__assert_fail@plt+0x591c>
   12b0c:	mov	r3, r0
   12b10:	movw	r2, #40240	; 0x9d30
   12b14:	movt	r2, #1
   12b18:	mov	r0, #0
   12b1c:	mov	r1, r5
   12b20:	bl	111c0 <error@plt>
   12b24:	b	12ac4 <__assert_fail@plt+0x173c>
   12b28:	bl	11280 <__errno_location@plt>
   12b2c:	ldr	r4, [r0]
   12b30:	mov	r6, #0
   12b34:	mov	r7, #0
   12b38:	mov	r8, r6
   12b3c:	mov	r9, r7
   12b40:	mov	r1, #3
   12b44:	mov	r0, #0
   12b48:	ldr	r2, [sp, #96]	; 0x60
   12b4c:	strd	r8, [sp, #32]
   12b50:	mov	r5, r7
   12b54:	bl	16ca4 <__assert_fail@plt+0x591c>
   12b58:	mov	r3, r0
   12b5c:	mov	r1, r4
   12b60:	mov	r0, #0
   12b64:	movw	r2, #40240	; 0x9d30
   12b68:	movt	r2, #1
   12b6c:	mov	r4, r6
   12b70:	bl	111c0 <error@plt>
   12b74:	ldrd	r0, [sp, #120]	; 0x78
   12b78:	b	12344 <__assert_fail@plt+0xfbc>
   12b7c:	add	r2, r7, #8
   12b80:	mov	r0, #3
   12b84:	ldr	r1, [sp, #80]	; 0x50
   12b88:	bl	11178 <__fxstat64@plt>
   12b8c:	mov	r6, r0
   12b90:	str	r0, [r7]
   12b94:	b	121f4 <__assert_fail@plt+0xe6c>
   12b98:	mov	r1, #1
   12b9c:	mov	r3, #0
   12ba0:	ldr	r0, [sp, #80]	; 0x50
   12ba4:	mov	r2, #0
   12ba8:	str	r1, [sp]
   12bac:	bl	11190 <lseek64@plt>
   12bb0:	udiv	r3, r4, r8
   12bb4:	strd	r0, [sp, #32]
   12bb8:	mls	r8, r8, r3, r4
   12bbc:	cmp	r8, #0
   12bc0:	beq	12cd0 <__assert_fail@plt+0x1948>
   12bc4:	cmp	r4, r0
   12bc8:	mov	r2, r4
   12bcc:	sbcs	r1, r6, r1
   12bd0:	movlt	r0, #0
   12bd4:	movlt	r1, r0
   12bd8:	bge	12cc0 <__assert_fail@plt+0x1938>
   12bdc:	mov	r2, #0
   12be0:	mov	r3, #0
   12be4:	mov	ip, #1
   12be8:	mov	r4, r2
   12bec:	mov	r5, r3
   12bf0:	mov	r8, r2
   12bf4:	strd	r2, [sp, #32]
   12bf8:	mov	r9, r3
   12bfc:	str	ip, [sp, #44]	; 0x2c
   12c00:	strd	r0, [sp, #120]	; 0x78
   12c04:	b	12344 <__assert_fail@plt+0xfbc>
   12c08:	mov	r0, r4
   12c0c:	mov	r1, r6
   12c10:	b	12bdc <__assert_fail@plt+0x1854>
   12c14:	mov	r3, #0
   12c18:	mov	r1, #2
   12c1c:	ldr	r0, [sp, #80]	; 0x50
   12c20:	mov	r2, #0
   12c24:	strd	r2, [sp]
   12c28:	str	r1, [sp, #8]
   12c2c:	bl	134d0 <__assert_fail@plt+0x2148>
   12c30:	ldr	r3, [sp, #92]	; 0x5c
   12c34:	eor	r3, r3, #1
   12c38:	tst	r4, r3
   12c3c:	beq	12c84 <__assert_fail@plt+0x18fc>
   12c40:	ldrb	r3, [sl]
   12c44:	cmp	r3, #0
   12c48:	beq	121e8 <__assert_fail@plt+0xe60>
   12c4c:	mov	r4, #0
   12c50:	mov	r5, #0
   12c54:	ldr	r1, [sp, #80]	; 0x50
   12c58:	mov	r8, r4
   12c5c:	mov	r9, r5
   12c60:	add	r3, sp, #120	; 0x78
   12c64:	add	r2, sp, #112	; 0x70
   12c68:	ldr	r0, [sp, #96]	; 0x60
   12c6c:	strd	r8, [sp, #32]
   12c70:	bl	12eb4 <__assert_fail@plt+0x1b2c>
   12c74:	str	r0, [sp, #44]	; 0x2c
   12c78:	ldr	r0, [sp, #120]	; 0x78
   12c7c:	ldr	r1, [sp, #124]	; 0x7c
   12c80:	b	12344 <__assert_fail@plt+0xfbc>
   12c84:	ldr	r3, [sp, #92]	; 0x5c
   12c88:	cmp	r3, #0
   12c8c:	beq	12c4c <__assert_fail@plt+0x18c4>
   12c90:	b	1243c <__assert_fail@plt+0x10b4>
   12c94:	mov	r1, #2
   12c98:	mov	r2, #0
   12c9c:	ldr	r0, [sp, #80]	; 0x50
   12ca0:	mov	r3, #0
   12ca4:	strd	r2, [sp]
   12ca8:	str	r1, [sp, #8]
   12cac:	bl	134d0 <__assert_fail@plt+0x2148>
   12cb0:	b	12c40 <__assert_fail@plt+0x18b8>
   12cb4:	mov	r8, sl
   12cb8:	mov	sl, r0
   12cbc:	b	128a8 <__assert_fail@plt+0x1520>
   12cc0:	ldrd	r4, [sp, #32]
   12cc4:	subs	r0, r2, r4
   12cc8:	sbc	r1, r6, r5
   12ccc:	b	12bdc <__assert_fail@plt+0x1854>
   12cd0:	ldrd	r0, [sp, #32]
   12cd4:	b	1225c <__assert_fail@plt+0xed4>
   12cd8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12cdc:	mov	r5, #0
   12ce0:	mov	r4, #0
   12ce4:	strd	r6, [sp, #8]
   12ce8:	strd	r8, [sp, #16]
   12cec:	mov	r9, r5
   12cf0:	mov	r8, r4
   12cf4:	strd	sl, [sp, #24]
   12cf8:	str	lr, [sp, #32]
   12cfc:	sub	sp, sp, #16384	; 0x4000
   12d00:	sub	sp, sp, #60	; 0x3c
   12d04:	strd	r4, [sp]
   12d08:	add	r5, sp, #52	; 0x34
   12d0c:	str	r1, [sp, #28]
   12d10:	strd	r2, [sp, #36]	; 0x24
   12d14:	movw	r3, #34953	; 0x8889
   12d18:	movt	r3, #34952	; 0x8888
   12d1c:	str	r3, [sp, #32]
   12d20:	str	r0, [sp, #44]	; 0x2c
   12d24:	mov	r2, #16384	; 0x4000
   12d28:	mov	r1, r5
   12d2c:	ldr	r0, [sp, #28]
   12d30:	bl	17970 <__assert_fail@plt+0x65e8>
   12d34:	cmp	r0, #0
   12d38:	beq	12e3c <__assert_fail@plt+0x1ab4>
   12d3c:	cmn	r0, #1
   12d40:	beq	12e74 <__assert_fail@plt+0x1aec>
   12d44:	ldr	r3, [sp, #32]
   12d48:	add	fp, r5, r0
   12d4c:	mov	r7, #0
   12d50:	umull	r3, r6, r3, r0
   12d54:	ldrd	r2, [sp]
   12d58:	lsr	r6, r6, #3
   12d5c:	adds	r2, r2, r0
   12d60:	adc	r3, r3, #0
   12d64:	cmp	r4, #0
   12d68:	strd	r2, [sp]
   12d6c:	bne	12dd4 <__assert_fail@plt+0x1a4c>
   12d70:	cmp	fp, r5
   12d74:	beq	12eac <__assert_fail@plt+0x1b24>
   12d78:	mov	r0, r8
   12d7c:	mov	ip, r5
   12d80:	mov	r1, r9
   12d84:	ldrb	r3, [ip], #1
   12d88:	sub	r3, r3, #10
   12d8c:	clz	r3, r3
   12d90:	lsr	r3, r3, #5
   12d94:	adds	r0, r0, r3
   12d98:	adc	r1, r1, #0
   12d9c:	cmp	fp, ip
   12da0:	bne	12d84 <__assert_fail@plt+0x19fc>
   12da4:	subs	r3, r0, r8
   12da8:	mov	r8, r0
   12dac:	str	r3, [sp, #16]
   12db0:	sbc	r3, r1, r9
   12db4:	mov	r9, r1
   12db8:	str	r3, [sp, #20]
   12dbc:	ldrd	r2, [sp, #16]
   12dc0:	cmp	r3, r7
   12dc4:	cmpeq	r2, r6
   12dc8:	movls	r4, #1
   12dcc:	movhi	r4, #0
   12dd0:	b	12d24 <__assert_fail@plt+0x199c>
   12dd4:	mov	r3, #10
   12dd8:	mov	r4, r8
   12ddc:	mov	sl, r9
   12de0:	strb	r3, [r5, r0]
   12de4:	mov	r0, r5
   12de8:	b	12df4 <__assert_fail@plt+0x1a6c>
   12dec:	adds	r4, r4, #1
   12df0:	adc	sl, sl, #0
   12df4:	mov	r1, #10
   12df8:	bl	11160 <rawmemchr@plt>
   12dfc:	mov	r3, r0
   12e00:	add	r0, r0, #1
   12e04:	cmp	fp, r3
   12e08:	bhi	12dec <__assert_fail@plt+0x1a64>
   12e0c:	subs	r3, r4, r8
   12e10:	mov	r8, r4
   12e14:	str	r3, [sp, #8]
   12e18:	sbc	r3, sl, r9
   12e1c:	mov	r9, sl
   12e20:	str	r3, [sp, #12]
   12e24:	ldrd	r2, [sp, #8]
   12e28:	cmp	r3, r7
   12e2c:	cmpeq	r2, r6
   12e30:	movls	r4, #1
   12e34:	movhi	r4, #0
   12e38:	b	12d24 <__assert_fail@plt+0x199c>
   12e3c:	ldrd	r2, [sp]
   12e40:	mov	r0, #1
   12e44:	ldr	r1, [sp, #40]	; 0x28
   12e48:	strd	r2, [r1]
   12e4c:	ldr	r3, [sp, #36]	; 0x24
   12e50:	strd	r8, [r3]
   12e54:	add	sp, sp, #16384	; 0x4000
   12e58:	add	sp, sp, #60	; 0x3c
   12e5c:	ldrd	r4, [sp]
   12e60:	ldrd	r6, [sp, #8]
   12e64:	ldrd	r8, [sp, #16]
   12e68:	ldrd	sl, [sp, #24]
   12e6c:	add	sp, sp, #32
   12e70:	pop	{pc}		; (ldr pc, [sp], #4)
   12e74:	bl	11280 <__errno_location@plt>
   12e78:	ldr	r4, [r0]
   12e7c:	mov	r1, #3
   12e80:	mov	r0, #0
   12e84:	ldr	r2, [sp, #44]	; 0x2c
   12e88:	bl	16ca4 <__assert_fail@plt+0x591c>
   12e8c:	mov	r3, r0
   12e90:	movw	r2, #40240	; 0x9d30
   12e94:	movt	r2, #1
   12e98:	mov	r0, #0
   12e9c:	mov	r1, r4
   12ea0:	bl	111c0 <error@plt>
   12ea4:	mov	r0, #0
   12ea8:	b	12e54 <__assert_fail@plt+0x1acc>
   12eac:	mov	r4, #1
   12eb0:	b	12d24 <__assert_fail@plt+0x199c>
   12eb4:	cmp	r3, #0
   12eb8:	cmpne	r2, #0
   12ebc:	beq	12ec4 <__assert_fail@plt+0x1b3c>
   12ec0:	b	12cd8 <__assert_fail@plt+0x1950>
   12ec4:	mov	r0, #0
   12ec8:	bx	lr
   12ecc:	subs	r4, r0, #0
   12ed0:	str	r7, [sp, #-8]!
   12ed4:	str	lr, [sp, #4]
   12ed8:	sub	sp, sp, #56	; 0x38
   12edc:	beq	12f24 <__assert_fail@plt+0x1b9c>
   12ee0:	movw	r3, #45448	; 0xb188
   12ee4:	movt	r3, #2
   12ee8:	ldr	r5, [r3]
   12eec:	mov	r2, #5
   12ef0:	movw	r1, #38316	; 0x95ac
   12ef4:	movt	r1, #1
   12ef8:	mov	r0, #0
   12efc:	bl	11124 <dcgettext@plt>
   12f00:	movw	r3, #45552	; 0xb1f0
   12f04:	movt	r3, #2
   12f08:	mov	r2, r0
   12f0c:	mov	r1, #1
   12f10:	ldr	r3, [r3]
   12f14:	mov	r0, r5
   12f18:	bl	112e0 <__fprintf_chk@plt>
   12f1c:	mov	r0, r4
   12f20:	bl	11238 <exit@plt>
   12f24:	mov	r2, #5
   12f28:	movw	r1, #38356	; 0x95d4
   12f2c:	movt	r1, #1
   12f30:	movw	r5, #45460	; 0xb194
   12f34:	movt	r5, #2
   12f38:	bl	11124 <dcgettext@plt>
   12f3c:	movw	r3, #45552	; 0xb1f0
   12f40:	movt	r3, #2
   12f44:	ldr	r3, [r3]
   12f48:	mov	r1, r0
   12f4c:	mov	r0, #1
   12f50:	mov	r2, r3
   12f54:	bl	112c8 <__printf_chk@plt>
   12f58:	mov	r2, #5
   12f5c:	movw	r1, #38428	; 0x961c
   12f60:	movt	r1, #1
   12f64:	mov	r0, r4
   12f68:	bl	11124 <dcgettext@plt>
   12f6c:	ldr	r1, [r5]
   12f70:	bl	11070 <fputs_unlocked@plt>
   12f74:	mov	r2, #5
   12f78:	movw	r1, #38624	; 0x96e0
   12f7c:	movt	r1, #1
   12f80:	mov	r0, r4
   12f84:	bl	11124 <dcgettext@plt>
   12f88:	ldr	r1, [r5]
   12f8c:	bl	11070 <fputs_unlocked@plt>
   12f90:	mov	r2, #5
   12f94:	movw	r1, #38680	; 0x9718
   12f98:	movt	r1, #1
   12f9c:	mov	r0, r4
   12fa0:	bl	11124 <dcgettext@plt>
   12fa4:	ldr	r1, [r5]
   12fa8:	bl	11070 <fputs_unlocked@plt>
   12fac:	mov	r2, #5
   12fb0:	movw	r1, #38984	; 0x9848
   12fb4:	movt	r1, #1
   12fb8:	mov	r0, r4
   12fbc:	bl	11124 <dcgettext@plt>
   12fc0:	ldr	r1, [r5]
   12fc4:	bl	11070 <fputs_unlocked@plt>
   12fc8:	mov	r2, #5
   12fcc:	movw	r1, #39288	; 0x9978
   12fd0:	movt	r1, #1
   12fd4:	mov	r0, r4
   12fd8:	bl	11124 <dcgettext@plt>
   12fdc:	ldr	r1, [r5]
   12fe0:	bl	11070 <fputs_unlocked@plt>
   12fe4:	mov	r2, #5
   12fe8:	movw	r1, #39336	; 0x99a8
   12fec:	movt	r1, #1
   12ff0:	mov	r0, r4
   12ff4:	bl	11124 <dcgettext@plt>
   12ff8:	ldr	r1, [r5]
   12ffc:	bl	11070 <fputs_unlocked@plt>
   13000:	movw	r0, #38060	; 0x94ac
   13004:	movt	r0, #1
   13008:	ldr	ip, [r0, #8]
   1300c:	ldrd	r2, [r0, #16]
   13010:	ldr	r6, [r0, #12]
   13014:	subs	r1, ip, #0
   13018:	str	ip, [sp]
   1301c:	ldrd	r8, [r0, #24]
   13020:	strd	r2, [sp, #8]
   13024:	ldrd	r2, [r0, #32]
   13028:	str	r6, [sp, #4]
   1302c:	ldrd	r6, [r0, #40]	; 0x28
   13030:	strd	r8, [sp, #16]
   13034:	ldrd	r8, [r0, #48]	; 0x30
   13038:	strd	r2, [sp, #24]
   1303c:	ldrd	r2, [r0, #56]	; 0x38
   13040:	strd	r6, [sp, #32]
   13044:	movwne	r7, #38312	; 0x95a8
   13048:	mov	r6, sp
   1304c:	movtne	r7, #1
   13050:	strd	r8, [sp, #40]	; 0x28
   13054:	strd	r2, [sp, #48]	; 0x30
   13058:	bne	13150 <__assert_fail@plt+0x1dc8>
   1305c:	ldr	r6, [r6, #4]
   13060:	movw	r1, #39392	; 0x99e0
   13064:	movt	r1, #1
   13068:	mov	r2, #5
   1306c:	cmp	r6, #0
   13070:	beq	13164 <__assert_fail@plt+0x1ddc>
   13074:	mov	r0, #0
   13078:	bl	11124 <dcgettext@plt>
   1307c:	mov	r1, r0
   13080:	movw	r3, #39416	; 0x99f8
   13084:	movt	r3, #1
   13088:	movw	r2, #39456	; 0x9a20
   1308c:	movt	r2, #1
   13090:	mov	r0, #1
   13094:	bl	112c8 <__printf_chk@plt>
   13098:	mov	r1, #0
   1309c:	mov	r0, #5
   130a0:	bl	11310 <setlocale@plt>
   130a4:	cmp	r0, #0
   130a8:	movweq	r7, #38312	; 0x95a8
   130ac:	movteq	r7, #1
   130b0:	beq	130d4 <__assert_fail@plt+0x1d4c>
   130b4:	movw	r1, #39472	; 0x9a30
   130b8:	movt	r1, #1
   130bc:	mov	r2, #3
   130c0:	movw	r7, #38312	; 0x95a8
   130c4:	movt	r7, #1
   130c8:	bl	11364 <strncmp@plt>
   130cc:	cmp	r0, #0
   130d0:	bne	1321c <__assert_fail@plt+0x1e94>
   130d4:	mov	r2, #5
   130d8:	movw	r1, #39548	; 0x9a7c
   130dc:	movt	r1, #1
   130e0:	mov	r0, #0
   130e4:	bl	11124 <dcgettext@plt>
   130e8:	mov	r1, r0
   130ec:	movw	r3, #38312	; 0x95a8
   130f0:	movt	r3, #1
   130f4:	movw	r2, #39416	; 0x99f8
   130f8:	movt	r2, #1
   130fc:	mov	r0, #1
   13100:	bl	112c8 <__printf_chk@plt>
   13104:	mov	r2, #5
   13108:	movw	r1, #39576	; 0x9a98
   1310c:	movt	r1, #1
   13110:	mov	r0, #0
   13114:	bl	11124 <dcgettext@plt>
   13118:	movw	r2, #40036	; 0x9c64
   1311c:	movt	r2, #1
   13120:	cmp	r6, r7
   13124:	movw	r3, #39284	; 0x9974
   13128:	movt	r3, #1
   1312c:	mov	r1, r0
   13130:	moveq	r3, r2
   13134:	mov	r2, r6
   13138:	mov	r0, #1
   1313c:	bl	112c8 <__printf_chk@plt>
   13140:	b	12f1c <__assert_fail@plt+0x1b94>
   13144:	ldr	r1, [r6, #8]!
   13148:	cmp	r1, #0
   1314c:	beq	1305c <__assert_fail@plt+0x1cd4>
   13150:	mov	r0, r7
   13154:	bl	11088 <strcmp@plt>
   13158:	cmp	r0, #0
   1315c:	bne	13144 <__assert_fail@plt+0x1dbc>
   13160:	b	1305c <__assert_fail@plt+0x1cd4>
   13164:	mov	r0, r6
   13168:	bl	11124 <dcgettext@plt>
   1316c:	mov	r1, r0
   13170:	movw	r3, #39416	; 0x99f8
   13174:	movt	r3, #1
   13178:	movw	r2, #39456	; 0x9a20
   1317c:	movt	r2, #1
   13180:	mov	r0, #1
   13184:	bl	112c8 <__printf_chk@plt>
   13188:	mov	r1, r6
   1318c:	mov	r0, #5
   13190:	bl	11310 <setlocale@plt>
   13194:	cmp	r0, #0
   13198:	beq	131b4 <__assert_fail@plt+0x1e2c>
   1319c:	movw	r1, #39472	; 0x9a30
   131a0:	movt	r1, #1
   131a4:	mov	r2, #3
   131a8:	bl	11364 <strncmp@plt>
   131ac:	cmp	r0, #0
   131b0:	bne	13210 <__assert_fail@plt+0x1e88>
   131b4:	mov	r2, #5
   131b8:	movw	r1, #39548	; 0x9a7c
   131bc:	movt	r1, #1
   131c0:	mov	r0, #0
   131c4:	bl	11124 <dcgettext@plt>
   131c8:	mov	r1, r0
   131cc:	movw	r3, #38312	; 0x95a8
   131d0:	movt	r3, #1
   131d4:	movw	r2, #39416	; 0x99f8
   131d8:	movt	r2, #1
   131dc:	mov	r0, #1
   131e0:	bl	112c8 <__printf_chk@plt>
   131e4:	movw	r1, #39576	; 0x9a98
   131e8:	movt	r1, #1
   131ec:	mov	r2, #5
   131f0:	mov	r0, #0
   131f4:	bl	11124 <dcgettext@plt>
   131f8:	movw	r6, #38312	; 0x95a8
   131fc:	movt	r6, #1
   13200:	movw	r3, #40036	; 0x9c64
   13204:	movt	r3, #1
   13208:	mov	r1, r0
   1320c:	b	13134 <__assert_fail@plt+0x1dac>
   13210:	movw	r7, #38312	; 0x95a8
   13214:	movt	r7, #1
   13218:	mov	r6, r7
   1321c:	mov	r2, #5
   13220:	movw	r1, #39476	; 0x9a34
   13224:	movt	r1, #1
   13228:	mov	r0, #0
   1322c:	bl	11124 <dcgettext@plt>
   13230:	ldr	r1, [r5]
   13234:	bl	11070 <fputs_unlocked@plt>
   13238:	b	130d4 <__assert_fail@plt+0x1d4c>
   1323c:	str	r4, [sp, #-8]!
   13240:	mov	r4, r0
   13244:	mov	r0, #24
   13248:	str	lr, [sp, #4]
   1324c:	bl	187a4 <__assert_fail@plt+0x741c>
   13250:	cmp	r0, #0
   13254:	beq	13268 <__assert_fail@plt+0x1ee0>
   13258:	mov	r3, #0
   1325c:	str	r3, [r0]
   13260:	str	r4, [r0, #16]
   13264:	str	r4, [r0, #20]
   13268:	ldr	r4, [sp]
   1326c:	add	sp, sp, #4
   13270:	pop	{pc}		; (ldr pc, [sp], #4)
   13274:	str	r4, [sp, #-8]!
   13278:	mov	r4, r0
   1327c:	mov	r0, #24
   13280:	str	lr, [sp, #4]
   13284:	bl	187a4 <__assert_fail@plt+0x741c>
   13288:	cmp	r0, #0
   1328c:	beq	132a8 <__assert_fail@plt+0x1f20>
   13290:	mov	r3, #0
   13294:	str	r4, [r0]
   13298:	str	r3, [r0, #4]
   1329c:	str	r3, [r0, #8]
   132a0:	str	r3, [r0, #12]
   132a4:	str	r3, [r0, #16]
   132a8:	ldr	r4, [sp]
   132ac:	add	sp, sp, #4
   132b0:	pop	{pc}		; (ldr pc, [sp], #4)
   132b4:	ldr	r3, [r0]
   132b8:	cmp	r3, #0
   132bc:	beq	13318 <__assert_fail@plt+0x1f90>
   132c0:	mov	r2, #0
   132c4:	strd	r4, [sp, #-16]!
   132c8:	mov	r5, r1
   132cc:	mov	r4, r0
   132d0:	add	r1, r0, #12
   132d4:	str	r6, [sp, #8]
   132d8:	add	r0, r0, #8
   132dc:	str	lr, [sp, #12]
   132e0:	bl	1134c <getdelim@plt>
   132e4:	cmp	r0, #0
   132e8:	blt	13348 <__assert_fail@plt+0x1fc0>
   132ec:	mov	r3, #1
   132f0:	ldr	r2, [r4, #4]
   132f4:	str	r3, [r5]
   132f8:	ldr	r3, [r4, #8]
   132fc:	add	r2, r2, #1
   13300:	str	r2, [r4, #4]
   13304:	ldrd	r4, [sp]
   13308:	mov	r0, r3
   1330c:	ldr	r6, [sp, #8]
   13310:	add	sp, sp, #12
   13314:	pop	{pc}		; (ldr pc, [sp], #4)
   13318:	ldr	r2, [r0, #20]
   1331c:	ldr	r3, [r2]
   13320:	cmp	r3, #0
   13324:	moveq	r2, #2
   13328:	streq	r2, [r1]
   1332c:	beq	13340 <__assert_fail@plt+0x1fb8>
   13330:	add	r2, r2, #4
   13334:	mov	ip, #1
   13338:	str	ip, [r1]
   1333c:	str	r2, [r0, #20]
   13340:	mov	r0, r3
   13344:	bx	lr
   13348:	ldr	r0, [r4]
   1334c:	bl	11244 <feof@plt>
   13350:	cmp	r0, #0
   13354:	mov	r3, #0
   13358:	movne	r2, #2
   1335c:	moveq	r2, #4
   13360:	str	r2, [r5]
   13364:	b	13304 <__assert_fail@plt+0x1f7c>
   13368:	ldr	r3, [r0]
   1336c:	cmp	r3, #0
   13370:	beq	1337c <__assert_fail@plt+0x1ff4>
   13374:	ldr	r0, [r0, #4]
   13378:	bx	lr
   1337c:	ldr	r3, [r0, #16]
   13380:	ldr	r0, [r0, #20]
   13384:	sub	r0, r0, r3
   13388:	asr	r0, r0, #2
   1338c:	bx	lr
   13390:	ldr	r3, [r0]
   13394:	str	r4, [sp, #-8]!
   13398:	mov	r4, r0
   1339c:	str	lr, [sp, #4]
   133a0:	cmp	r3, #0
   133a4:	beq	133b0 <__assert_fail@plt+0x2028>
   133a8:	ldr	r0, [r0, #8]
   133ac:	bl	13638 <__assert_fail@plt+0x22b0>
   133b0:	mov	r0, r4
   133b4:	ldr	r4, [sp]
   133b8:	ldr	lr, [sp, #4]
   133bc:	add	sp, sp, #8
   133c0:	b	13638 <__assert_fail@plt+0x22b0>
   133c4:	movw	r3, #45544	; 0xb1e8
   133c8:	movt	r3, #2
   133cc:	str	r0, [r3]
   133d0:	bx	lr
   133d4:	movw	r3, #45544	; 0xb1e8
   133d8:	movt	r3, #2
   133dc:	strb	r0, [r3, #4]
   133e0:	bx	lr
   133e4:	movw	r3, #45460	; 0xb194
   133e8:	movt	r3, #2
   133ec:	strd	r4, [sp, #-16]!
   133f0:	ldr	r0, [r3]
   133f4:	str	r6, [sp, #8]
   133f8:	str	lr, [sp, #12]
   133fc:	sub	sp, sp, #8
   13400:	bl	18838 <__assert_fail@plt+0x74b0>
   13404:	cmp	r0, #0
   13408:	beq	13434 <__assert_fail@plt+0x20ac>
   1340c:	movw	r4, #45544	; 0xb1e8
   13410:	movt	r4, #2
   13414:	ldrb	r6, [r4, #4]
   13418:	bl	11280 <__errno_location@plt>
   1341c:	mov	r5, r0
   13420:	cmp	r6, #0
   13424:	beq	13460 <__assert_fail@plt+0x20d8>
   13428:	ldr	r3, [r0]
   1342c:	cmp	r3, #32
   13430:	bne	13460 <__assert_fail@plt+0x20d8>
   13434:	movw	r3, #45448	; 0xb188
   13438:	movt	r3, #2
   1343c:	ldr	r0, [r3]
   13440:	bl	18838 <__assert_fail@plt+0x74b0>
   13444:	cmp	r0, #0
   13448:	bne	134a8 <__assert_fail@plt+0x2120>
   1344c:	add	sp, sp, #8
   13450:	ldrd	r4, [sp]
   13454:	ldr	r6, [sp, #8]
   13458:	add	sp, sp, #12
   1345c:	pop	{pc}		; (ldr pc, [sp], #4)
   13460:	movw	r1, #40224	; 0x9d20
   13464:	movt	r1, #1
   13468:	mov	r2, #5
   1346c:	mov	r0, #0
   13470:	bl	11124 <dcgettext@plt>
   13474:	mov	r6, r0
   13478:	ldr	r0, [r4]
   1347c:	cmp	r0, #0
   13480:	beq	134b8 <__assert_fail@plt+0x2130>
   13484:	ldr	r4, [r5]
   13488:	bl	168d4 <__assert_fail@plt+0x554c>
   1348c:	mov	r3, r0
   13490:	movw	r2, #40236	; 0x9d2c
   13494:	movt	r2, #1
   13498:	mov	r0, #0
   1349c:	str	r6, [sp]
   134a0:	mov	r1, r4
   134a4:	bl	111c0 <error@plt>
   134a8:	movw	r3, #45356	; 0xb12c
   134ac:	movt	r3, #2
   134b0:	ldr	r0, [r3]
   134b4:	bl	110e8 <_exit@plt>
   134b8:	mov	r3, r6
   134bc:	movw	r2, #40240	; 0x9d30
   134c0:	movt	r2, #1
   134c4:	ldr	r1, [r5]
   134c8:	bl	111c0 <error@plt>
   134cc:	b	134a8 <__assert_fail@plt+0x2120>
   134d0:	b	11094 <posix_fadvise64@plt>
   134d4:	cmp	r0, #0
   134d8:	bxeq	lr
   134dc:	str	r4, [sp, #-16]!
   134e0:	mov	r4, r1
   134e4:	strd	r6, [sp, #4]
   134e8:	mov	r6, #0
   134ec:	mov	r7, #0
   134f0:	str	lr, [sp, #12]
   134f4:	sub	sp, sp, #16
   134f8:	bl	112d4 <fileno@plt>
   134fc:	mov	r2, r6
   13500:	mov	r3, r7
   13504:	strd	r6, [sp]
   13508:	str	r4, [sp, #8]
   1350c:	bl	11094 <posix_fadvise64@plt>
   13510:	add	sp, sp, #16
   13514:	ldr	r4, [sp]
   13518:	ldrd	r6, [sp, #4]
   1351c:	add	sp, sp, #12
   13520:	pop	{pc}		; (ldr pc, [sp], #4)
   13524:	strd	r4, [sp, #-12]!
   13528:	mov	r4, r0
   1352c:	str	lr, [sp, #8]
   13530:	sub	sp, sp, #12
   13534:	bl	112d4 <fileno@plt>
   13538:	cmp	r0, #0
   1353c:	mov	r0, r4
   13540:	blt	135c4 <__assert_fail@plt+0x223c>
   13544:	bl	11208 <__freading@plt>
   13548:	cmp	r0, #0
   1354c:	bne	13590 <__assert_fail@plt+0x2208>
   13550:	mov	r0, r4
   13554:	bl	135d8 <__assert_fail@plt+0x2250>
   13558:	cmp	r0, #0
   1355c:	beq	135c0 <__assert_fail@plt+0x2238>
   13560:	bl	11280 <__errno_location@plt>
   13564:	mov	r5, r0
   13568:	mov	r0, r4
   1356c:	ldr	r4, [r5]
   13570:	bl	112ec <fclose@plt>
   13574:	cmp	r4, #0
   13578:	mvnne	r0, #0
   1357c:	strne	r4, [r5]
   13580:	add	sp, sp, #12
   13584:	ldrd	r4, [sp]
   13588:	add	sp, sp, #8
   1358c:	pop	{pc}		; (ldr pc, [sp], #4)
   13590:	mov	r0, r4
   13594:	bl	112d4 <fileno@plt>
   13598:	mov	r1, #1
   1359c:	mov	r2, #0
   135a0:	mov	r3, #0
   135a4:	str	r1, [sp]
   135a8:	bl	11190 <lseek64@plt>
   135ac:	mvn	r3, #0
   135b0:	mvn	r2, #0
   135b4:	cmp	r1, r3
   135b8:	cmpeq	r0, r2
   135bc:	bne	13550 <__assert_fail@plt+0x21c8>
   135c0:	mov	r0, r4
   135c4:	add	sp, sp, #12
   135c8:	ldrd	r4, [sp]
   135cc:	ldr	lr, [sp, #8]
   135d0:	add	sp, sp, #12
   135d4:	b	112ec <fclose@plt>
   135d8:	str	r4, [sp, #-8]!
   135dc:	subs	r4, r0, #0
   135e0:	str	lr, [sp, #4]
   135e4:	sub	sp, sp, #8
   135e8:	beq	13604 <__assert_fail@plt+0x227c>
   135ec:	bl	11208 <__freading@plt>
   135f0:	cmp	r0, #0
   135f4:	beq	13604 <__assert_fail@plt+0x227c>
   135f8:	ldr	r3, [r4]
   135fc:	tst	r3, #256	; 0x100
   13600:	bne	1361c <__assert_fail@plt+0x2294>
   13604:	mov	r0, r4
   13608:	add	sp, sp, #8
   1360c:	ldr	r4, [sp]
   13610:	ldr	lr, [sp, #4]
   13614:	add	sp, sp, #8
   13618:	b	110ac <fflush@plt>
   1361c:	mov	r1, #1
   13620:	mov	r2, #0
   13624:	mov	r3, #0
   13628:	mov	r0, r4
   1362c:	str	r1, [sp]
   13630:	bl	13698 <__assert_fail@plt+0x2310>
   13634:	b	13604 <__assert_fail@plt+0x227c>
   13638:	strd	r4, [sp, #-12]!
   1363c:	mov	r5, r0
   13640:	str	lr, [sp, #8]
   13644:	sub	sp, sp, #12
   13648:	bl	11280 <__errno_location@plt>
   1364c:	mov	r4, r0
   13650:	mov	r2, #0
   13654:	ldr	r3, [r4]
   13658:	mov	r0, r5
   1365c:	str	r2, [r4]
   13660:	str	r3, [sp]
   13664:	str	r3, [sp, #4]
   13668:	bl	110d0 <free@plt>
   1366c:	ldr	r3, [r4]
   13670:	add	r2, sp, #8
   13674:	clz	r3, r3
   13678:	lsr	r3, r3, #5
   1367c:	add	r3, r2, r3, lsl #2
   13680:	ldr	r3, [r3, #-8]
   13684:	str	r3, [r4]
   13688:	add	sp, sp, #12
   1368c:	ldrd	r4, [sp]
   13690:	add	sp, sp, #8
   13694:	pop	{pc}		; (ldr pc, [sp], #4)
   13698:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1369c:	mov	r4, r0
   136a0:	ldr	ip, [r0, #4]
   136a4:	strd	r6, [sp, #8]
   136a8:	str	lr, [sp, #20]
   136ac:	ldr	lr, [r0, #8]
   136b0:	str	r8, [sp, #16]
   136b4:	sub	sp, sp, #8
   136b8:	ldr	r5, [sp, #32]
   136bc:	cmp	lr, ip
   136c0:	beq	136e8 <__assert_fail@plt+0x2360>
   136c4:	mov	r0, r4
   136c8:	str	r5, [sp, #32]
   136cc:	add	sp, sp, #8
   136d0:	ldrd	r4, [sp]
   136d4:	ldrd	r6, [sp, #8]
   136d8:	ldr	r8, [sp, #16]
   136dc:	ldr	lr, [sp, #20]
   136e0:	add	sp, sp, #24
   136e4:	b	112f8 <fseeko64@plt>
   136e8:	ldr	ip, [r0, #16]
   136ec:	ldr	lr, [r0, #20]
   136f0:	cmp	lr, ip
   136f4:	bne	136c4 <__assert_fail@plt+0x233c>
   136f8:	ldr	r8, [r0, #36]	; 0x24
   136fc:	cmp	r8, #0
   13700:	bne	136c4 <__assert_fail@plt+0x233c>
   13704:	mov	r6, r2
   13708:	mov	r7, r3
   1370c:	bl	112d4 <fileno@plt>
   13710:	mov	r2, r6
   13714:	mov	r3, r7
   13718:	str	r5, [sp]
   1371c:	bl	11190 <lseek64@plt>
   13720:	mvn	r3, #0
   13724:	mvn	r2, #0
   13728:	cmp	r1, r3
   1372c:	cmpeq	r0, r2
   13730:	beq	13760 <__assert_fail@plt+0x23d8>
   13734:	ldr	r3, [r4]
   13738:	strd	r0, [r4, #80]	; 0x50
   1373c:	bic	r3, r3, #16
   13740:	str	r3, [r4]
   13744:	mov	r0, r8
   13748:	add	sp, sp, #8
   1374c:	ldrd	r4, [sp]
   13750:	ldrd	r6, [sp, #8]
   13754:	ldr	r8, [sp, #16]
   13758:	add	sp, sp, #20
   1375c:	pop	{pc}		; (ldr pc, [sp], #4)
   13760:	mvn	r8, #0
   13764:	b	13744 <__assert_fail@plt+0x23bc>
   13768:	mov	r3, #0
   1376c:	strd	r4, [sp, #-16]!
   13770:	mov	r4, r0
   13774:	mov	r5, r1
   13778:	str	r6, [sp, #8]
   1377c:	add	r6, r2, #20
   13780:	str	lr, [sp, #12]
   13784:	strb	r3, [r2, #20]
   13788:	mov	r0, r4
   1378c:	mov	r1, r5
   13790:	mov	r2, #10
   13794:	mov	r3, #0
   13798:	bl	192b0 <_obstack_memory_used@@Base+0x4f0>
   1379c:	add	ip, r2, #48	; 0x30
   137a0:	mov	r0, r4
   137a4:	mov	r1, r5
   137a8:	mov	r2, #10
   137ac:	mov	r3, #0
   137b0:	strb	ip, [r6, #-1]!
   137b4:	bl	192b0 <_obstack_memory_used@@Base+0x4f0>
   137b8:	cmp	r5, #0
   137bc:	mov	r5, r1
   137c0:	cmpeq	r4, #9
   137c4:	mov	r4, r0
   137c8:	bhi	13788 <__assert_fail@plt+0x2400>
   137cc:	mov	r0, r6
   137d0:	ldrd	r4, [sp]
   137d4:	ldr	r6, [sp, #8]
   137d8:	add	sp, sp, #12
   137dc:	pop	{pc}		; (ldr pc, [sp], #4)
   137e0:	str	r4, [sp, #-8]!
   137e4:	mov	r4, r0
   137e8:	str	lr, [sp, #4]
   137ec:	bl	110b8 <wcwidth@plt>
   137f0:	cmp	r0, #0
   137f4:	bge	13808 <__assert_fail@plt+0x2480>
   137f8:	mov	r0, r4
   137fc:	bl	11154 <iswcntrl@plt>
   13800:	clz	r0, r0
   13804:	lsr	r0, r0, #5
   13808:	ldr	r4, [sp]
   1380c:	add	sp, sp, #4
   13810:	pop	{pc}		; (ldr pc, [sp], #4)
   13814:	mov	r3, r1
   13818:	strd	r4, [sp, #-16]!
   1381c:	mov	r4, r1
   13820:	ldr	r2, [r1, #4]
   13824:	mov	r5, r0
   13828:	ldr	r1, [r3], #16
   1382c:	str	r6, [sp, #8]
   13830:	str	lr, [sp, #12]
   13834:	cmp	r1, r3
   13838:	strne	r1, [r0]
   1383c:	beq	13868 <__assert_fail@plt+0x24e0>
   13840:	ldrb	r3, [r4, #8]
   13844:	str	r2, [r5, #4]
   13848:	ldr	r6, [sp, #8]
   1384c:	cmp	r3, #0
   13850:	strb	r3, [r5, #8]
   13854:	ldrne	r3, [r4, #12]
   13858:	strne	r3, [r5, #12]
   1385c:	ldrd	r4, [sp]
   13860:	add	sp, sp, #12
   13864:	pop	{pc}		; (ldr pc, [sp], #4)
   13868:	add	r3, r0, #16
   1386c:	mov	r0, r3
   13870:	bl	110f4 <memcpy@plt>
   13874:	ldr	r2, [r4, #4]
   13878:	str	r0, [r5]
   1387c:	b	13840 <__assert_fail@plt+0x24b8>
   13880:	lsr	r2, r0, #5
   13884:	movw	r3, #40244	; 0x9d34
   13888:	movt	r3, #1
   1388c:	and	r0, r0, #31
   13890:	ldr	r3, [r3, r2, lsl #2]
   13894:	lsr	r0, r3, r0
   13898:	and	r0, r0, #1
   1389c:	bx	lr
   138a0:	strd	r4, [sp, #-20]!	; 0xffffffec
   138a4:	mov	r5, r2
   138a8:	strd	r6, [sp, #8]
   138ac:	subs	r6, r0, #0
   138b0:	mov	r7, r1
   138b4:	str	lr, [sp, #16]
   138b8:	sub	sp, sp, #12
   138bc:	addeq	r6, sp, #4
   138c0:	mov	r0, r6
   138c4:	bl	111b4 <mbrtowc@plt>
   138c8:	cmp	r5, #0
   138cc:	cmnne	r0, #3
   138d0:	mov	r4, r0
   138d4:	bhi	138f0 <__assert_fail@plt+0x2568>
   138d8:	mov	r0, r4
   138dc:	add	sp, sp, #12
   138e0:	ldrd	r4, [sp]
   138e4:	ldrd	r6, [sp, #8]
   138e8:	add	sp, sp, #16
   138ec:	pop	{pc}		; (ldr pc, [sp], #4)
   138f0:	mov	r0, #0
   138f4:	bl	188c0 <__assert_fail@plt+0x7538>
   138f8:	cmp	r0, #0
   138fc:	bne	138d8 <__assert_fail@plt+0x2550>
   13900:	ldrb	r3, [r7]
   13904:	mov	r4, #1
   13908:	str	r3, [r6]
   1390c:	b	138d8 <__assert_fail@plt+0x2550>
   13910:	mov	r0, #85	; 0x55
   13914:	str	r4, [sp, #-8]!
   13918:	str	lr, [sp, #4]
   1391c:	sub	sp, sp, #64	; 0x40
   13920:	bl	11130 <sysconf@plt>
   13924:	mov	r4, r0
   13928:	mov	r0, #30
   1392c:	bl	11130 <sysconf@plt>
   13930:	cmp	r4, #0
   13934:	cmpge	r0, #0
   13938:	bge	13984 <__assert_fail@plt+0x25fc>
   1393c:	mov	r0, sp
   13940:	bl	111e4 <sysinfo@plt>
   13944:	cmp	r0, #0
   13948:	beq	13960 <__assert_fail@plt+0x25d8>
   1394c:	vldr	d0, [pc, #84]	; 139a8 <__assert_fail@plt+0x2620>
   13950:	add	sp, sp, #64	; 0x40
   13954:	ldr	r4, [sp]
   13958:	add	sp, sp, #4
   1395c:	pop	{pc}		; (ldr pc, [sp], #4)
   13960:	vldr	s15, [sp, #16]
   13964:	vcvt.f64.u32	d0, s15
   13968:	vldr	s15, [sp, #52]	; 0x34
   1396c:	vcvt.f64.u32	d7, s15
   13970:	vmul.f64	d0, d0, d7
   13974:	add	sp, sp, #64	; 0x40
   13978:	ldr	r4, [sp]
   1397c:	add	sp, sp, #4
   13980:	pop	{pc}		; (ldr pc, [sp], #4)
   13984:	vmov	s15, r4
   13988:	vcvt.f64.s32	d0, s15
   1398c:	vmov	s15, r0
   13990:	vcvt.f64.s32	d7, s15
   13994:	vmul.f64	d0, d0, d7
   13998:	add	sp, sp, #64	; 0x40
   1399c:	ldr	r4, [sp]
   139a0:	add	sp, sp, #4
   139a4:	pop	{pc}		; (ldr pc, [sp], #4)
   139a8:	andeq	r0, r0, r0
   139ac:	orrsmi	r0, r0, r0
   139b0:	mov	r0, #86	; 0x56
   139b4:	str	r4, [sp, #-8]!
   139b8:	str	lr, [sp, #4]
   139bc:	sub	sp, sp, #64	; 0x40
   139c0:	bl	11130 <sysconf@plt>
   139c4:	mov	r4, r0
   139c8:	mov	r0, #30
   139cc:	bl	11130 <sysconf@plt>
   139d0:	cmp	r4, #0
   139d4:	cmpge	r0, #0
   139d8:	bge	13a60 <__assert_fail@plt+0x26d8>
   139dc:	mov	r0, sp
   139e0:	bl	111e4 <sysinfo@plt>
   139e4:	cmp	r0, #0
   139e8:	bne	13a1c <__assert_fail@plt+0x2694>
   139ec:	vldr	s15, [sp, #20]
   139f0:	vcvt.f64.u32	d0, s15
   139f4:	vldr	s15, [sp, #28]
   139f8:	vcvt.f64.u32	d6, s15
   139fc:	vldr	s15, [sp, #52]	; 0x34
   13a00:	vadd.f64	d0, d0, d6
   13a04:	vcvt.f64.u32	d7, s15
   13a08:	vmul.f64	d0, d0, d7
   13a0c:	add	sp, sp, #64	; 0x40
   13a10:	ldr	r4, [sp]
   13a14:	add	sp, sp, #4
   13a18:	pop	{pc}		; (ldr pc, [sp], #4)
   13a1c:	mov	r0, #85	; 0x55
   13a20:	bl	11130 <sysconf@plt>
   13a24:	mov	r4, r0
   13a28:	mov	r0, #30
   13a2c:	bl	11130 <sysconf@plt>
   13a30:	cmp	r0, #0
   13a34:	cmpge	r4, #0
   13a38:	bge	13aa4 <__assert_fail@plt+0x271c>
   13a3c:	mov	r0, sp
   13a40:	bl	111e4 <sysinfo@plt>
   13a44:	cmp	r0, #0
   13a48:	beq	13a84 <__assert_fail@plt+0x26fc>
   13a4c:	vldr	d0, [pc, #124]	; 13ad0 <__assert_fail@plt+0x2748>
   13a50:	add	sp, sp, #64	; 0x40
   13a54:	ldr	r4, [sp]
   13a58:	add	sp, sp, #4
   13a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a60:	vmov	s15, r4
   13a64:	vcvt.f64.s32	d0, s15
   13a68:	vmov	s15, r0
   13a6c:	vcvt.f64.s32	d7, s15
   13a70:	vmul.f64	d0, d0, d7
   13a74:	add	sp, sp, #64	; 0x40
   13a78:	ldr	r4, [sp]
   13a7c:	add	sp, sp, #4
   13a80:	pop	{pc}		; (ldr pc, [sp], #4)
   13a84:	vldr	s15, [sp, #16]
   13a88:	vldr	d6, [pc, #72]	; 13ad8 <__assert_fail@plt+0x2750>
   13a8c:	vcvt.f64.u32	d0, s15
   13a90:	vldr	s15, [sp, #52]	; 0x34
   13a94:	vcvt.f64.u32	d7, s15
   13a98:	vmul.f64	d0, d0, d7
   13a9c:	vmul.f64	d0, d0, d6
   13aa0:	b	13a0c <__assert_fail@plt+0x2684>
   13aa4:	vmov	s15, r4
   13aa8:	vldr	d6, [pc, #40]	; 13ad8 <__assert_fail@plt+0x2750>
   13aac:	vcvt.f64.s32	d0, s15
   13ab0:	vmov	s15, r0
   13ab4:	vcvt.f64.s32	d7, s15
   13ab8:	vmul.f64	d0, d0, d7
   13abc:	vmul.f64	d0, d0, d6
   13ac0:	add	sp, sp, #64	; 0x40
   13ac4:	ldr	r4, [sp]
   13ac8:	add	sp, sp, #4
   13acc:	pop	{pc}		; (ldr pc, [sp], #4)
   13ad0:	andeq	r0, r0, r0
   13ad4:	cmnmi	r0, r0
   13ad8:	andeq	r0, r0, r0
   13adc:	svccc	0x00d00000
   13ae0:	strd	r4, [sp, #-16]!
   13ae4:	subs	r4, r0, #0
   13ae8:	str	r6, [sp, #8]
   13aec:	str	lr, [sp, #12]
   13af0:	beq	13b88 <__assert_fail@plt+0x2800>
   13af4:	mov	r1, #47	; 0x2f
   13af8:	bl	1131c <strrchr@plt>
   13afc:	subs	r5, r0, #0
   13b00:	beq	13b60 <__assert_fail@plt+0x27d8>
   13b04:	add	r6, r5, #1
   13b08:	sub	r3, r6, r4
   13b0c:	cmp	r3, #6
   13b10:	ble	13b60 <__assert_fail@plt+0x27d8>
   13b14:	movw	r1, #40332	; 0x9d8c
   13b18:	movt	r1, #1
   13b1c:	mov	r2, #7
   13b20:	sub	r0, r5, #6
   13b24:	bl	11364 <strncmp@plt>
   13b28:	cmp	r0, #0
   13b2c:	bne	13b60 <__assert_fail@plt+0x27d8>
   13b30:	movw	r1, #40340	; 0x9d94
   13b34:	movt	r1, #1
   13b38:	mov	r2, #3
   13b3c:	mov	r0, r6
   13b40:	bl	11364 <strncmp@plt>
   13b44:	cmp	r0, #0
   13b48:	movne	r4, r6
   13b4c:	bne	13b60 <__assert_fail@plt+0x27d8>
   13b50:	add	r4, r5, #4
   13b54:	movw	r3, #45432	; 0xb178
   13b58:	movt	r3, #2
   13b5c:	str	r4, [r3]
   13b60:	movw	r2, #45552	; 0xb1f0
   13b64:	movt	r2, #2
   13b68:	ldr	r6, [sp, #8]
   13b6c:	movw	r3, #45436	; 0xb17c
   13b70:	movt	r3, #2
   13b74:	str	r4, [r2]
   13b78:	str	r4, [r3]
   13b7c:	ldrd	r4, [sp]
   13b80:	add	sp, sp, #12
   13b84:	pop	{pc}		; (ldr pc, [sp], #4)
   13b88:	movw	r3, #45448	; 0xb188
   13b8c:	movt	r3, #2
   13b90:	movw	r0, #40276	; 0x9d54
   13b94:	movt	r0, #1
   13b98:	ldr	r3, [r3]
   13b9c:	mov	r2, #55	; 0x37
   13ba0:	mov	r1, #1
   13ba4:	bl	11184 <fwrite@plt>
   13ba8:	bl	11370 <abort@plt>
   13bac:	mov	r2, #5
   13bb0:	strd	r4, [sp, #-16]!
   13bb4:	mov	r5, r0
   13bb8:	str	r6, [sp, #8]
   13bbc:	mov	r6, r1
   13bc0:	mov	r1, r0
   13bc4:	mov	r0, #0
   13bc8:	str	lr, [sp, #12]
   13bcc:	bl	11124 <dcgettext@plt>
   13bd0:	cmp	r5, r0
   13bd4:	mov	r4, r0
   13bd8:	beq	13bf0 <__assert_fail@plt+0x2868>
   13bdc:	mov	r0, r4
   13be0:	ldrd	r4, [sp]
   13be4:	ldr	r6, [sp, #8]
   13be8:	add	sp, sp, #12
   13bec:	pop	{pc}		; (ldr pc, [sp], #4)
   13bf0:	bl	18918 <__assert_fail@plt+0x7590>
   13bf4:	ldrb	r3, [r0]
   13bf8:	bic	r3, r3, #32
   13bfc:	cmp	r3, #85	; 0x55
   13c00:	bne	13c68 <__assert_fail@plt+0x28e0>
   13c04:	ldrb	r3, [r0, #1]
   13c08:	bic	r3, r3, #32
   13c0c:	cmp	r3, #84	; 0x54
   13c10:	bne	13ce8 <__assert_fail@plt+0x2960>
   13c14:	ldrb	r3, [r0, #2]
   13c18:	bic	r3, r3, #32
   13c1c:	cmp	r3, #70	; 0x46
   13c20:	bne	13ce8 <__assert_fail@plt+0x2960>
   13c24:	ldrb	r3, [r0, #3]
   13c28:	cmp	r3, #45	; 0x2d
   13c2c:	bne	13ce8 <__assert_fail@plt+0x2960>
   13c30:	ldrb	r3, [r0, #4]
   13c34:	cmp	r3, #56	; 0x38
   13c38:	bne	13ce8 <__assert_fail@plt+0x2960>
   13c3c:	ldrb	r3, [r0, #5]
   13c40:	cmp	r3, #0
   13c44:	bne	13ce8 <__assert_fail@plt+0x2960>
   13c48:	ldrb	r2, [r4]
   13c4c:	movw	r3, #40432	; 0x9df0
   13c50:	movt	r3, #1
   13c54:	movw	r4, #40444	; 0x9dfc
   13c58:	movt	r4, #1
   13c5c:	cmp	r2, #96	; 0x60
   13c60:	movne	r4, r3
   13c64:	b	13bdc <__assert_fail@plt+0x2854>
   13c68:	cmp	r3, #71	; 0x47
   13c6c:	bne	13ce8 <__assert_fail@plt+0x2960>
   13c70:	ldrb	r3, [r0, #1]
   13c74:	bic	r3, r3, #32
   13c78:	cmp	r3, #66	; 0x42
   13c7c:	bne	13ce8 <__assert_fail@plt+0x2960>
   13c80:	ldrb	r3, [r0, #2]
   13c84:	cmp	r3, #49	; 0x31
   13c88:	bne	13ce8 <__assert_fail@plt+0x2960>
   13c8c:	ldrb	r3, [r0, #3]
   13c90:	cmp	r3, #56	; 0x38
   13c94:	bne	13ce8 <__assert_fail@plt+0x2960>
   13c98:	ldrb	r3, [r0, #4]
   13c9c:	cmp	r3, #48	; 0x30
   13ca0:	bne	13ce8 <__assert_fail@plt+0x2960>
   13ca4:	ldrb	r3, [r0, #5]
   13ca8:	cmp	r3, #51	; 0x33
   13cac:	bne	13ce8 <__assert_fail@plt+0x2960>
   13cb0:	ldrb	r3, [r0, #6]
   13cb4:	cmp	r3, #48	; 0x30
   13cb8:	bne	13ce8 <__assert_fail@plt+0x2960>
   13cbc:	ldrb	r3, [r0, #7]
   13cc0:	cmp	r3, #0
   13cc4:	bne	13ce8 <__assert_fail@plt+0x2960>
   13cc8:	ldrb	r2, [r4]
   13ccc:	movw	r3, #40436	; 0x9df4
   13cd0:	movt	r3, #1
   13cd4:	movw	r4, #40440	; 0x9df8
   13cd8:	movt	r4, #1
   13cdc:	cmp	r2, #96	; 0x60
   13ce0:	movne	r4, r3
   13ce4:	b	13bdc <__assert_fail@plt+0x2854>
   13ce8:	movw	r3, #40448	; 0x9e00
   13cec:	movt	r3, #1
   13cf0:	cmp	r6, #9
   13cf4:	movw	r4, #40428	; 0x9dec
   13cf8:	movt	r4, #1
   13cfc:	movne	r4, r3
   13d00:	b	13bdc <__assert_fail@plt+0x2854>
   13d04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13d08:	strd	r6, [sp, #8]
   13d0c:	strd	r8, [sp, #16]
   13d10:	mov	r8, r3
   13d14:	strd	sl, [sp, #24]
   13d18:	mov	fp, r0
   13d1c:	mov	sl, r1
   13d20:	str	lr, [sp, #32]
   13d24:	sub	sp, sp, #140	; 0x8c
   13d28:	ldr	r3, [sp, #180]	; 0xb4
   13d2c:	str	r2, [sp, #28]
   13d30:	and	r4, r3, #2
   13d34:	ubfx	r3, r3, #1, #1
   13d38:	str	r3, [sp, #44]	; 0x2c
   13d3c:	bl	1119c <__ctype_get_mb_cur_max@plt>
   13d40:	ldr	r3, [sp, #176]	; 0xb0
   13d44:	str	r0, [sp, #76]	; 0x4c
   13d48:	cmp	r3, #10
   13d4c:	ldrls	pc, [pc, r3, lsl #2]
   13d50:	b	156ec <__assert_fail@plt+0x4364>
   13d54:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d58:	strdeq	r4, [r1], -r0
   13d5c:	andeq	r4, r1, ip, ror #16
   13d60:	andeq	r4, r1, ip, asr r3
   13d64:	ldrdeq	r4, [r1], -ip
   13d68:	andeq	r4, r1, r8, asr r1
   13d6c:	andeq	r4, r1, r0, lsr r2
   13d70:	muleq	r1, r8, r2
   13d74:	andeq	r3, r1, r0, lsl #27
   13d78:	andeq	r3, r1, r0, lsl #27
   13d7c:	andeq	r3, r1, r0, lsl #27
   13d80:	ldr	r3, [sp, #176]	; 0xb0
   13d84:	cmp	r3, #10
   13d88:	beq	13db4 <__assert_fail@plt+0x2a2c>
   13d8c:	mov	r1, r3
   13d90:	movw	r0, #40452	; 0x9e04
   13d94:	movt	r0, #1
   13d98:	bl	13bac <__assert_fail@plt+0x2824>
   13d9c:	str	r0, [sp, #188]	; 0xbc
   13da0:	movw	r0, #40448	; 0x9e00
   13da4:	movt	r0, #1
   13da8:	ldr	r1, [sp, #176]	; 0xb0
   13dac:	bl	13bac <__assert_fail@plt+0x2824>
   13db0:	str	r0, [sp, #192]	; 0xc0
   13db4:	cmp	r4, #0
   13db8:	movne	r4, #0
   13dbc:	beq	15478 <__assert_fail@plt+0x40f0>
   13dc0:	mov	r5, #0
   13dc4:	ldr	r0, [sp, #192]	; 0xc0
   13dc8:	mov	r9, r5
   13dcc:	str	r5, [sp, #64]	; 0x40
   13dd0:	bl	1125c <strlen@plt>
   13dd4:	mov	r3, #1
   13dd8:	ldr	r2, [sp, #44]	; 0x2c
   13ddc:	cmp	r0, r5
   13de0:	moveq	r2, r5
   13de4:	str	r3, [sp, #32]
   13de8:	str	r3, [sp, #48]	; 0x30
   13dec:	str	r5, [sp, #52]	; 0x34
   13df0:	str	r3, [sp, #60]	; 0x3c
   13df4:	ldr	r3, [sp, #180]	; 0xb4
   13df8:	str	r0, [sp, #56]	; 0x38
   13dfc:	str	r5, [sp, #68]	; 0x44
   13e00:	str	r5, [sp, #80]	; 0x50
   13e04:	str	r5, [sp, #84]	; 0x54
   13e08:	and	r3, r3, #1
   13e0c:	str	r2, [sp, #88]	; 0x58
   13e10:	str	r3, [sp, #92]	; 0x5c
   13e14:	ldr	r3, [sp, #180]	; 0xb4
   13e18:	and	r3, r3, #4
   13e1c:	str	r3, [sp, #96]	; 0x60
   13e20:	ldr	r3, [sp, #192]	; 0xc0
   13e24:	str	r3, [sp, #72]	; 0x48
   13e28:	mov	r3, fp
   13e2c:	mov	r7, #0
   13e30:	mov	fp, r9
   13e34:	mov	r9, r3
   13e38:	cmn	r8, #1
   13e3c:	beq	14440 <__assert_fail@plt+0x30b8>
   13e40:	subs	r6, r8, r7
   13e44:	movne	r6, #1
   13e48:	cmp	r6, #0
   13e4c:	beq	14458 <__assert_fail@plt+0x30d0>
   13e50:	ldr	r0, [sp, #28]
   13e54:	ldr	r3, [sp, #48]	; 0x30
   13e58:	cmp	r3, #0
   13e5c:	add	r3, r0, r7
   13e60:	str	r3, [sp, #36]	; 0x24
   13e64:	beq	148e4 <__assert_fail@plt+0x355c>
   13e68:	ldr	r2, [sp, #56]	; 0x38
   13e6c:	cmp	r2, #0
   13e70:	beq	14de4 <__assert_fail@plt+0x3a5c>
   13e74:	cmp	r2, #1
   13e78:	mov	r3, r2
   13e7c:	movls	r3, #0
   13e80:	movhi	r3, #1
   13e84:	cmn	r8, #1
   13e88:	add	r5, r7, r2
   13e8c:	movne	r3, #0
   13e90:	cmp	r3, #0
   13e94:	beq	13ea0 <__assert_fail@plt+0x2b18>
   13e98:	bl	1125c <strlen@plt>
   13e9c:	mov	r8, r0
   13ea0:	cmp	r5, r8
   13ea4:	bhi	14de4 <__assert_fail@plt+0x3a5c>
   13ea8:	ldr	r0, [sp, #36]	; 0x24
   13eac:	ldr	r2, [sp, #56]	; 0x38
   13eb0:	ldr	r1, [sp, #72]	; 0x48
   13eb4:	bl	1110c <memcmp@plt>
   13eb8:	cmp	r0, #0
   13ebc:	bne	14de4 <__assert_fail@plt+0x3a5c>
   13ec0:	ldr	r3, [sp, #44]	; 0x2c
   13ec4:	cmp	r3, #0
   13ec8:	bne	15590 <__assert_fail@plt+0x4208>
   13ecc:	ldr	r3, [sp, #36]	; 0x24
   13ed0:	ldrb	r5, [r3]
   13ed4:	cmp	r5, #126	; 0x7e
   13ed8:	ldrls	pc, [pc, r5, lsl #2]
   13edc:	b	15378 <__assert_fail@plt+0x3ff0>
   13ee0:			; <UNDEFINED> instruction: 0x000145b4
   13ee4:	andeq	r5, r1, r8, ror r3
   13ee8:	andeq	r5, r1, r8, ror r3
   13eec:	andeq	r5, r1, r8, ror r3
   13ef0:	andeq	r5, r1, r8, ror r3
   13ef4:	andeq	r5, r1, r8, ror r3
   13ef8:	andeq	r5, r1, r8, ror r3
   13efc:	andeq	r4, r1, ip, lsl #10
   13f00:	andeq	r4, r1, r4, lsl #10
   13f04:	andeq	r4, r1, r4, lsl r5
   13f08:	muleq	r1, r8, r6
   13f0c:	andeq	r4, r1, r8, lsl #13
   13f10:			; <UNDEFINED> instruction: 0x000143b0
   13f14:	andeq	r4, r1, r4, ror #12
   13f18:	andeq	r5, r1, r8, ror r3
   13f1c:	andeq	r5, r1, r8, ror r3
   13f20:	andeq	r5, r1, r8, ror r3
   13f24:	andeq	r5, r1, r8, ror r3
   13f28:	andeq	r5, r1, r8, ror r3
   13f2c:	andeq	r5, r1, r8, ror r3
   13f30:	andeq	r5, r1, r8, ror r3
   13f34:	andeq	r5, r1, r8, ror r3
   13f38:	andeq	r5, r1, r8, ror r3
   13f3c:	andeq	r5, r1, r8, ror r3
   13f40:	andeq	r5, r1, r8, ror r3
   13f44:	andeq	r5, r1, r8, ror r3
   13f48:	andeq	r5, r1, r8, ror r3
   13f4c:	andeq	r5, r1, r8, ror r3
   13f50:	andeq	r5, r1, r8, ror r3
   13f54:	andeq	r5, r1, r8, ror r3
   13f58:	andeq	r5, r1, r8, ror r3
   13f5c:	andeq	r5, r1, r8, ror r3
   13f60:	andeq	r4, r1, r0, lsl r7
   13f64:	andeq	r4, r1, r4, lsl #14
   13f68:	andeq	r4, r1, r4, lsl #14
   13f6c:	strdeq	r4, [r1], -r8
   13f70:	andeq	r4, r1, r4, lsl #14
   13f74:	ldrdeq	r4, [r1], -ip
   13f78:	andeq	r4, r1, r4, lsl #14
   13f7c:	andeq	r4, r1, ip, asr #16
   13f80:	andeq	r4, r1, r4, lsl #14
   13f84:	andeq	r4, r1, r4, lsl #14
   13f88:	andeq	r4, r1, r4, lsl #14
   13f8c:	ldrdeq	r4, [r1], -ip
   13f90:	ldrdeq	r4, [r1], -ip
   13f94:	ldrdeq	r4, [r1], -ip
   13f98:	ldrdeq	r4, [r1], -ip
   13f9c:	ldrdeq	r4, [r1], -ip
   13fa0:	ldrdeq	r4, [r1], -ip
   13fa4:	ldrdeq	r4, [r1], -ip
   13fa8:	ldrdeq	r4, [r1], -ip
   13fac:	ldrdeq	r4, [r1], -ip
   13fb0:	ldrdeq	r4, [r1], -ip
   13fb4:	ldrdeq	r4, [r1], -ip
   13fb8:	ldrdeq	r4, [r1], -ip
   13fbc:	ldrdeq	r4, [r1], -ip
   13fc0:	ldrdeq	r4, [r1], -ip
   13fc4:	ldrdeq	r4, [r1], -ip
   13fc8:	ldrdeq	r4, [r1], -ip
   13fcc:	andeq	r4, r1, r4, lsl #14
   13fd0:	andeq	r4, r1, r4, lsl #14
   13fd4:	andeq	r4, r1, r4, lsl #14
   13fd8:	andeq	r4, r1, r4, lsl #14
   13fdc:	strdeq	r4, [r1], -ip
   13fe0:	andeq	r5, r1, r8, ror r3
   13fe4:	ldrdeq	r4, [r1], -ip
   13fe8:	ldrdeq	r4, [r1], -ip
   13fec:	ldrdeq	r4, [r1], -ip
   13ff0:	ldrdeq	r4, [r1], -ip
   13ff4:	ldrdeq	r4, [r1], -ip
   13ff8:	ldrdeq	r4, [r1], -ip
   13ffc:	ldrdeq	r4, [r1], -ip
   14000:	ldrdeq	r4, [r1], -ip
   14004:	ldrdeq	r4, [r1], -ip
   14008:	ldrdeq	r4, [r1], -ip
   1400c:	ldrdeq	r4, [r1], -ip
   14010:	ldrdeq	r4, [r1], -ip
   14014:	ldrdeq	r4, [r1], -ip
   14018:	ldrdeq	r4, [r1], -ip
   1401c:	ldrdeq	r4, [r1], -ip
   14020:	ldrdeq	r4, [r1], -ip
   14024:	ldrdeq	r4, [r1], -ip
   14028:	ldrdeq	r4, [r1], -ip
   1402c:	ldrdeq	r4, [r1], -ip
   14030:	ldrdeq	r4, [r1], -ip
   14034:	ldrdeq	r4, [r1], -ip
   14038:	ldrdeq	r4, [r1], -ip
   1403c:	ldrdeq	r4, [r1], -ip
   14040:	ldrdeq	r4, [r1], -ip
   14044:	ldrdeq	r4, [r1], -ip
   14048:	ldrdeq	r4, [r1], -ip
   1404c:	andeq	r4, r1, r4, lsl #14
   14050:	andeq	r4, r1, r0, lsr #15
   14054:	ldrdeq	r4, [r1], -ip
   14058:	andeq	r4, r1, r4, lsl #14
   1405c:	ldrdeq	r4, [r1], -ip
   14060:	andeq	r4, r1, r4, lsl #14
   14064:	ldrdeq	r4, [r1], -ip
   14068:	ldrdeq	r4, [r1], -ip
   1406c:	ldrdeq	r4, [r1], -ip
   14070:	ldrdeq	r4, [r1], -ip
   14074:	ldrdeq	r4, [r1], -ip
   14078:	ldrdeq	r4, [r1], -ip
   1407c:	ldrdeq	r4, [r1], -ip
   14080:	ldrdeq	r4, [r1], -ip
   14084:	ldrdeq	r4, [r1], -ip
   14088:	ldrdeq	r4, [r1], -ip
   1408c:	ldrdeq	r4, [r1], -ip
   14090:	ldrdeq	r4, [r1], -ip
   14094:	ldrdeq	r4, [r1], -ip
   14098:	ldrdeq	r4, [r1], -ip
   1409c:	ldrdeq	r4, [r1], -ip
   140a0:	ldrdeq	r4, [r1], -ip
   140a4:	ldrdeq	r4, [r1], -ip
   140a8:	ldrdeq	r4, [r1], -ip
   140ac:	ldrdeq	r4, [r1], -ip
   140b0:	ldrdeq	r4, [r1], -ip
   140b4:	ldrdeq	r4, [r1], -ip
   140b8:	ldrdeq	r4, [r1], -ip
   140bc:	ldrdeq	r4, [r1], -ip
   140c0:	ldrdeq	r4, [r1], -ip
   140c4:	ldrdeq	r4, [r1], -ip
   140c8:	ldrdeq	r4, [r1], -ip
   140cc:	andeq	r4, r1, ip, lsr #13
   140d0:	andeq	r4, r1, r4, lsl #14
   140d4:	andeq	r4, r1, ip, lsr #13
   140d8:	strdeq	r4, [r1], -r8
   140dc:	ldr	r3, [sp, #180]	; 0xb4
   140e0:	cmp	r4, #0
   140e4:	and	r3, r3, #1
   140e8:	str	r3, [sp, #92]	; 0x5c
   140ec:	ldr	r3, [sp, #180]	; 0xb4
   140f0:	and	r3, r3, #4
   140f4:	str	r3, [sp, #96]	; 0x60
   140f8:	moveq	r3, #1
   140fc:	streq	r3, [sp, #60]	; 0x3c
   14100:	beq	14890 <__assert_fail@plt+0x3508>
   14104:	mov	r3, #0
   14108:	mov	r2, #1
   1410c:	mov	r4, r3
   14110:	mov	r9, r3
   14114:	str	r2, [sp, #32]
   14118:	str	r2, [sp, #44]	; 0x2c
   1411c:	str	r3, [sp, #48]	; 0x30
   14120:	str	r2, [sp, #52]	; 0x34
   14124:	str	r2, [sp, #56]	; 0x38
   14128:	str	r3, [sp, #60]	; 0x3c
   1412c:	str	r2, [sp, #64]	; 0x40
   14130:	str	r2, [sp, #68]	; 0x44
   14134:	str	r3, [sp, #80]	; 0x50
   14138:	str	r3, [sp, #84]	; 0x54
   1413c:	str	r3, [sp, #88]	; 0x58
   14140:	movw	r3, #40448	; 0x9e00
   14144:	movt	r3, #1
   14148:	str	r3, [sp, #72]	; 0x48
   1414c:	mov	r3, #2
   14150:	str	r3, [sp, #176]	; 0xb0
   14154:	b	13e28 <__assert_fail@plt+0x2aa0>
   14158:	ldr	r3, [sp, #180]	; 0xb4
   1415c:	cmp	r4, #0
   14160:	and	r3, r3, #1
   14164:	str	r3, [sp, #92]	; 0x5c
   14168:	ldr	r3, [sp, #180]	; 0xb4
   1416c:	and	r3, r3, #4
   14170:	str	r3, [sp, #96]	; 0x60
   14174:	bne	15548 <__assert_fail@plt+0x41c0>
   14178:	cmp	sl, #0
   1417c:	beq	152f4 <__assert_fail@plt+0x3f6c>
   14180:	mov	r3, #34	; 0x22
   14184:	mov	r2, r4
   14188:	mov	r1, #1
   1418c:	mov	r9, r2
   14190:	strb	r3, [fp]
   14194:	movw	r3, #40428	; 0x9dec
   14198:	movt	r3, #1
   1419c:	mov	r4, r1
   141a0:	str	r1, [sp, #32]
   141a4:	str	r2, [sp, #44]	; 0x2c
   141a8:	str	r1, [sp, #48]	; 0x30
   141ac:	str	r2, [sp, #52]	; 0x34
   141b0:	str	r1, [sp, #56]	; 0x38
   141b4:	str	r1, [sp, #60]	; 0x3c
   141b8:	str	r2, [sp, #64]	; 0x40
   141bc:	str	r2, [sp, #68]	; 0x44
   141c0:	str	r3, [sp, #72]	; 0x48
   141c4:	str	r2, [sp, #80]	; 0x50
   141c8:	str	r2, [sp, #84]	; 0x54
   141cc:	str	r2, [sp, #88]	; 0x58
   141d0:	b	13e28 <__assert_fail@plt+0x2aa0>
   141d4:	mov	r3, #0
   141d8:	mov	r2, #1
   141dc:	mov	r9, r3
   141e0:	str	r2, [sp, #32]
   141e4:	str	r3, [sp, #44]	; 0x2c
   141e8:	str	r3, [sp, #48]	; 0x30
   141ec:	str	r3, [sp, #52]	; 0x34
   141f0:	str	r3, [sp, #60]	; 0x3c
   141f4:	strd	r2, [sp, #64]	; 0x40
   141f8:	str	r3, [sp, #72]	; 0x48
   141fc:	str	r3, [sp, #80]	; 0x50
   14200:	str	r3, [sp, #88]	; 0x58
   14204:	ldr	r3, [sp, #180]	; 0xb4
   14208:	and	r3, r3, r2
   1420c:	str	r3, [sp, #92]	; 0x5c
   14210:	ldr	r3, [sp, #180]	; 0xb4
   14214:	and	r3, r3, #4
   14218:	str	r3, [sp, #96]	; 0x60
   1421c:	ldr	r3, [sp, #176]	; 0xb0
   14220:	mov	r4, r3
   14224:	str	r3, [sp, #56]	; 0x38
   14228:	str	r3, [sp, #84]	; 0x54
   1422c:	b	13e28 <__assert_fail@plt+0x2aa0>
   14230:	mov	r3, #1
   14234:	mov	r4, #0
   14238:	mov	r9, r4
   1423c:	str	r3, [sp, #32]
   14240:	str	r3, [sp, #44]	; 0x2c
   14244:	str	r3, [sp, #48]	; 0x30
   14248:	str	r4, [sp, #52]	; 0x34
   1424c:	str	r3, [sp, #56]	; 0x38
   14250:	str	r3, [sp, #60]	; 0x3c
   14254:	str	r3, [sp, #88]	; 0x58
   14258:	movw	r3, #40428	; 0x9dec
   1425c:	movt	r3, #1
   14260:	str	r4, [sp, #64]	; 0x40
   14264:	str	r4, [sp, #68]	; 0x44
   14268:	str	r3, [sp, #72]	; 0x48
   1426c:	ldr	r3, [sp, #180]	; 0xb4
   14270:	str	r4, [sp, #80]	; 0x50
   14274:	str	r4, [sp, #84]	; 0x54
   14278:	and	r3, r3, #1
   1427c:	str	r3, [sp, #92]	; 0x5c
   14280:	ldr	r3, [sp, #180]	; 0xb4
   14284:	and	r3, r3, #4
   14288:	str	r3, [sp, #96]	; 0x60
   1428c:	mov	r3, #5
   14290:	str	r3, [sp, #176]	; 0xb0
   14294:	b	13e28 <__assert_fail@plt+0x2aa0>
   14298:	mov	r3, #1
   1429c:	mov	r4, #0
   142a0:	mov	r9, r4
   142a4:	str	r3, [sp, #32]
   142a8:	str	r4, [sp, #44]	; 0x2c
   142ac:	str	r3, [sp, #48]	; 0x30
   142b0:	str	r3, [sp, #60]	; 0x3c
   142b4:	ldr	r3, [sp, #180]	; 0xb4
   142b8:	str	r4, [sp, #52]	; 0x34
   142bc:	str	r4, [sp, #56]	; 0x38
   142c0:	str	r4, [sp, #64]	; 0x40
   142c4:	str	r4, [sp, #68]	; 0x44
   142c8:	and	r3, r3, #1
   142cc:	str	r4, [sp, #72]	; 0x48
   142d0:	str	r4, [sp, #80]	; 0x50
   142d4:	str	r4, [sp, #84]	; 0x54
   142d8:	str	r3, [sp, #92]	; 0x5c
   142dc:	ldr	r3, [sp, #180]	; 0xb4
   142e0:	str	r4, [sp, #88]	; 0x58
   142e4:	and	r3, r3, #4
   142e8:	str	r3, [sp, #96]	; 0x60
   142ec:	b	13e28 <__assert_fail@plt+0x2aa0>
   142f0:	mov	r3, #0
   142f4:	mov	r2, #1
   142f8:	ldr	r1, [sp, #176]	; 0xb0
   142fc:	mov	r4, r3
   14300:	mov	r9, r3
   14304:	movw	r3, #40448	; 0x9e00
   14308:	movt	r3, #1
   1430c:	str	r2, [sp, #32]
   14310:	str	r2, [sp, #44]	; 0x2c
   14314:	str	r4, [sp, #48]	; 0x30
   14318:	strd	r2, [sp, #68]	; 0x44
   1431c:	ldr	r3, [sp, #180]	; 0xb4
   14320:	str	r2, [sp, #52]	; 0x34
   14324:	str	r1, [sp, #56]	; 0x38
   14328:	str	r4, [sp, #60]	; 0x3c
   1432c:	str	r2, [sp, #64]	; 0x40
   14330:	and	r3, r3, r2
   14334:	str	r4, [sp, #80]	; 0x50
   14338:	str	r4, [sp, #84]	; 0x54
   1433c:	str	r4, [sp, #88]	; 0x58
   14340:	str	r3, [sp, #92]	; 0x5c
   14344:	ldr	r3, [sp, #180]	; 0xb4
   14348:	and	r3, r3, #4
   1434c:	str	r3, [sp, #96]	; 0x60
   14350:	mov	r3, #2
   14354:	str	r3, [sp, #176]	; 0xb0
   14358:	b	13e28 <__assert_fail@plt+0x2aa0>
   1435c:	mov	r3, #1
   14360:	mov	r2, #0
   14364:	mov	r4, r2
   14368:	mov	r9, r2
   1436c:	str	r3, [sp, #32]
   14370:	str	r3, [sp, #44]	; 0x2c
   14374:	str	r2, [sp, #48]	; 0x30
   14378:	str	r3, [sp, #52]	; 0x34
   1437c:	str	r3, [sp, #56]	; 0x38
   14380:	str	r3, [sp, #60]	; 0x3c
   14384:	str	r3, [sp, #64]	; 0x40
   14388:	str	r3, [sp, #68]	; 0x44
   1438c:	str	r3, [sp, #88]	; 0x58
   14390:	movw	r3, #40448	; 0x9e00
   14394:	movt	r3, #1
   14398:	str	r3, [sp, #72]	; 0x48
   1439c:	ldr	r3, [sp, #180]	; 0xb4
   143a0:	str	r2, [sp, #80]	; 0x50
   143a4:	str	r2, [sp, #84]	; 0x54
   143a8:	and	r3, r3, #1
   143ac:	b	14340 <__assert_fail@plt+0x2fb8>
   143b0:	mov	r5, #102	; 0x66
   143b4:	mov	r6, #0
   143b8:	ldr	r3, [sp, #44]	; 0x2c
   143bc:	cmp	r3, #0
   143c0:	bne	15270 <__assert_fail@plt+0x3ee8>
   143c4:	ldr	r2, [sp, #52]	; 0x34
   143c8:	eor	r3, fp, #1
   143cc:	ands	r3, r2, r3
   143d0:	beq	14408 <__assert_fail@plt+0x3080>
   143d4:	cmp	sl, r4
   143d8:	mov	fp, r3
   143dc:	movhi	r2, #39	; 0x27
   143e0:	strbhi	r2, [r9, r4]
   143e4:	add	r2, r4, #1
   143e8:	cmp	sl, r2
   143ec:	movhi	r1, #36	; 0x24
   143f0:	strbhi	r1, [r9, r2]
   143f4:	add	r2, r4, #2
   143f8:	add	r4, r4, #3
   143fc:	cmp	sl, r2
   14400:	movhi	r1, #39	; 0x27
   14404:	strbhi	r1, [r9, r2]
   14408:	cmp	sl, r4
   1440c:	add	r7, r7, #1
   14410:	movhi	r3, #92	; 0x5c
   14414:	strbhi	r3, [r9, r4]
   14418:	add	r4, r4, #1
   1441c:	cmp	r4, sl
   14420:	ldr	r3, [sp, #32]
   14424:	strbcc	r5, [r9, r4]
   14428:	cmp	r6, #0
   1442c:	add	r4, r4, #1
   14430:	moveq	r3, #0
   14434:	cmn	r8, #1
   14438:	str	r3, [sp, #32]
   1443c:	bne	13e40 <__assert_fail@plt+0x2ab8>
   14440:	ldr	r3, [sp, #28]
   14444:	ldrb	r6, [r3, r7]
   14448:	adds	r6, r6, #0
   1444c:	movne	r6, #1
   14450:	cmp	r6, #0
   14454:	bne	13e50 <__assert_fail@plt+0x2ac8>
   14458:	mov	r3, r9
   1445c:	mov	r9, fp
   14460:	mov	fp, r3
   14464:	ldr	r3, [sp, #68]	; 0x44
   14468:	cmp	r4, #0
   1446c:	movne	r3, #0
   14470:	cmp	r3, #0
   14474:	bne	15668 <__assert_fail@plt+0x42e0>
   14478:	ldr	r3, [sp, #44]	; 0x2c
   1447c:	ldr	r2, [sp, #52]	; 0x34
   14480:	eor	r3, r3, #1
   14484:	ands	r2, r3, r2
   14488:	beq	155a0 <__assert_fail@plt+0x4218>
   1448c:	ldr	r3, [sp, #80]	; 0x50
   14490:	cmp	r3, #0
   14494:	beq	155a4 <__assert_fail@plt+0x421c>
   14498:	ldr	r3, [sp, #32]
   1449c:	cmp	r3, #0
   144a0:	bne	15618 <__assert_fail@plt+0x4290>
   144a4:	ldr	r3, [sp, #84]	; 0x54
   144a8:	adds	r3, r3, #0
   144ac:	movne	r3, #1
   144b0:	cmp	sl, #0
   144b4:	movne	r3, #0
   144b8:	cmp	r3, #0
   144bc:	ldreq	r2, [sp, #80]	; 0x50
   144c0:	beq	155a4 <__assert_fail@plt+0x421c>
   144c4:	ldr	r2, [sp, #84]	; 0x54
   144c8:	mov	sl, r2
   144cc:	mov	r0, #0
   144d0:	mov	r4, #1
   144d4:	mov	r1, #39	; 0x27
   144d8:	str	r0, [sp, #44]	; 0x2c
   144dc:	strb	r1, [fp]
   144e0:	str	r0, [sp, #48]	; 0x30
   144e4:	str	r4, [sp, #52]	; 0x34
   144e8:	str	r4, [sp, #56]	; 0x38
   144ec:	str	r4, [sp, #64]	; 0x40
   144f0:	str	r0, [sp, #68]	; 0x44
   144f4:	str	r3, [sp, #80]	; 0x50
   144f8:	str	r2, [sp, #84]	; 0x54
   144fc:	str	r0, [sp, #88]	; 0x58
   14500:	b	14140 <__assert_fail@plt+0x2db8>
   14504:	mov	r5, #98	; 0x62
   14508:	b	143b4 <__assert_fail@plt+0x302c>
   1450c:	mov	r5, #97	; 0x61
   14510:	b	143b4 <__assert_fail@plt+0x302c>
   14514:	ldr	r3, [sp, #48]	; 0x30
   14518:	str	r3, [sp, #40]	; 0x28
   1451c:	mov	r3, #116	; 0x74
   14520:	ldr	r2, [sp, #68]	; 0x44
   14524:	cmp	r2, #0
   14528:	bne	14724 <__assert_fail@plt+0x339c>
   1452c:	ldr	r2, [sp, #60]	; 0x3c
   14530:	cmp	r2, #0
   14534:	bne	14680 <__assert_fail@plt+0x32f8>
   14538:	ldr	r3, [sp, #44]	; 0x2c
   1453c:	mov	r6, #0
   14540:	cmp	r3, #0
   14544:	beq	146f0 <__assert_fail@plt+0x3368>
   14548:	mov	r3, fp
   1454c:	ldr	r2, [sp, #184]	; 0xb8
   14550:	cmp	r2, #0
   14554:	beq	14574 <__assert_fail@plt+0x31ec>
   14558:	ubfx	r1, r5, #5, #8
   1455c:	mov	r0, r2
   14560:	and	r2, r5, #31
   14564:	ldr	r1, [r0, r1, lsl #2]
   14568:	lsr	r2, r1, r2
   1456c:	tst	r2, #1
   14570:	bne	143b8 <__assert_fail@plt+0x3030>
   14574:	ldr	r2, [sp, #40]	; 0x28
   14578:	cmp	r2, #0
   1457c:	addeq	r7, r7, #1
   14580:	bne	143b8 <__assert_fail@plt+0x3030>
   14584:	cmp	r3, #0
   14588:	beq	1441c <__assert_fail@plt+0x3094>
   1458c:	cmp	sl, r4
   14590:	mov	fp, #0
   14594:	movhi	r3, #39	; 0x27
   14598:	strbhi	r3, [r9, r4]
   1459c:	add	r3, r4, #1
   145a0:	add	r4, r4, #2
   145a4:	cmp	sl, r3
   145a8:	movhi	r2, #39	; 0x27
   145ac:	strbhi	r2, [r9, r3]
   145b0:	b	1441c <__assert_fail@plt+0x3094>
   145b4:	ldr	r3, [sp, #48]	; 0x30
   145b8:	str	r3, [sp, #40]	; 0x28
   145bc:	eor	r3, fp, #1
   145c0:	ldr	r2, [sp, #52]	; 0x34
   145c4:	ands	r2, r2, r3
   145c8:	beq	15288 <__assert_fail@plt+0x3f00>
   145cc:	cmp	sl, r4
   145d0:	movhi	r3, #39	; 0x27
   145d4:	strbhi	r3, [r9, r4]
   145d8:	add	r3, r4, #1
   145dc:	cmp	sl, r3
   145e0:	movhi	r1, #36	; 0x24
   145e4:	strbhi	r1, [r9, r3]
   145e8:	add	r3, r4, #2
   145ec:	cmp	sl, r3
   145f0:	movhi	r1, #39	; 0x27
   145f4:	strbhi	r1, [r9, r3]
   145f8:	add	r3, r4, #3
   145fc:	cmp	sl, r3
   14600:	bls	152d4 <__assert_fail@plt+0x3f4c>
   14604:	mov	r4, r3
   14608:	mov	r3, #92	; 0x5c
   1460c:	mov	fp, r2
   14610:	mov	r2, r4
   14614:	strb	r3, [r9, r4]
   14618:	ldr	r3, [sp, #176]	; 0xb0
   1461c:	add	r4, r4, #1
   14620:	cmp	r3, #2
   14624:	beq	1533c <__assert_fail@plt+0x3fb4>
   14628:	add	r3, r7, #1
   1462c:	cmp	r3, r8
   14630:	bcs	14648 <__assert_fail@plt+0x32c0>
   14634:	ldr	r1, [sp, #28]
   14638:	ldrb	r3, [r1, r3]
   1463c:	sub	r3, r3, #48	; 0x30
   14640:	cmp	r3, #9
   14644:	bls	1534c <__assert_fail@plt+0x3fc4>
   14648:	mov	r3, #0
   1464c:	mov	r5, #48	; 0x30
   14650:	ldr	r6, [sp, #64]	; 0x40
   14654:	cmp	r6, #0
   14658:	beq	1454c <__assert_fail@plt+0x31c4>
   1465c:	mov	r6, #0
   14660:	b	14574 <__assert_fail@plt+0x31ec>
   14664:	ldr	r3, [sp, #48]	; 0x30
   14668:	str	r3, [sp, #40]	; 0x28
   1466c:	ldr	r2, [sp, #60]	; 0x3c
   14670:	mov	r5, #13
   14674:	mov	r3, #114	; 0x72
   14678:	cmp	r2, #0
   1467c:	beq	14538 <__assert_fail@plt+0x31b0>
   14680:	mov	r5, r3
   14684:	b	143b4 <__assert_fail@plt+0x302c>
   14688:	ldr	r3, [sp, #48]	; 0x30
   1468c:	str	r3, [sp, #40]	; 0x28
   14690:	mov	r3, #118	; 0x76
   14694:	b	1452c <__assert_fail@plt+0x31a4>
   14698:	ldr	r3, [sp, #48]	; 0x30
   1469c:	str	r3, [sp, #40]	; 0x28
   146a0:	mov	r5, #10
   146a4:	mov	r3, #110	; 0x6e
   146a8:	b	1452c <__assert_fail@plt+0x31a4>
   146ac:	ldr	r3, [sp, #48]	; 0x30
   146b0:	cmn	r8, #1
   146b4:	str	r3, [sp, #40]	; 0x28
   146b8:	beq	14b00 <__assert_fail@plt+0x3778>
   146bc:	subs	r3, r8, #1
   146c0:	movne	r3, #1
   146c4:	cmp	r3, #0
   146c8:	bne	146d4 <__assert_fail@plt+0x334c>
   146cc:	cmp	r7, #0
   146d0:	beq	14718 <__assert_fail@plt+0x3390>
   146d4:	mov	r6, #0
   146d8:	ldr	r3, [sp, #64]	; 0x40
   146dc:	cmp	r3, #0
   146e0:	beq	14548 <__assert_fail@plt+0x31c0>
   146e4:	ldr	r3, [sp, #44]	; 0x2c
   146e8:	cmp	r3, #0
   146ec:	bne	14548 <__assert_fail@plt+0x31c0>
   146f0:	mov	r3, fp
   146f4:	b	14574 <__assert_fail@plt+0x31ec>
   146f8:	ldr	r3, [sp, #48]	; 0x30
   146fc:	str	r3, [sp, #40]	; 0x28
   14700:	b	146cc <__assert_fail@plt+0x3344>
   14704:	ldr	r3, [sp, #48]	; 0x30
   14708:	str	r3, [sp, #40]	; 0x28
   1470c:	b	146d4 <__assert_fail@plt+0x334c>
   14710:	ldr	r6, [sp, #48]	; 0x30
   14714:	str	r6, [sp, #40]	; 0x28
   14718:	ldr	r3, [sp, #68]	; 0x44
   1471c:	cmp	r3, #0
   14720:	beq	146d8 <__assert_fail@plt+0x3350>
   14724:	mov	r3, #2
   14728:	mov	fp, r9
   1472c:	str	r3, [sp, #176]	; 0xb0
   14730:	ldr	r3, [sp, #60]	; 0x3c
   14734:	cmp	r3, #0
   14738:	ldr	r3, [sp, #176]	; 0xb0
   1473c:	movne	r3, #4
   14740:	str	r3, [sp, #176]	; 0xb0
   14744:	mov	lr, #0
   14748:	mov	r0, fp
   1474c:	ldr	r2, [sp, #28]
   14750:	ldr	r3, [sp, #180]	; 0xb4
   14754:	ldr	r1, [sp, #188]	; 0xbc
   14758:	bic	ip, r3, #2
   1475c:	ldr	r3, [sp, #176]	; 0xb0
   14760:	stm	sp, {r3, ip, lr}
   14764:	mov	r3, r8
   14768:	ldr	ip, [sp, #192]	; 0xc0
   1476c:	str	r1, [sp, #12]
   14770:	mov	r1, sl
   14774:	str	ip, [sp, #16]
   14778:	bl	13d04 <__assert_fail@plt+0x297c>
   1477c:	mov	r4, r0
   14780:	mov	r0, r4
   14784:	add	sp, sp, #140	; 0x8c
   14788:	ldrd	r4, [sp]
   1478c:	ldrd	r6, [sp, #8]
   14790:	ldrd	r8, [sp, #16]
   14794:	ldrd	sl, [sp, #24]
   14798:	add	sp, sp, #32
   1479c:	pop	{pc}		; (ldr pc, [sp], #4)
   147a0:	ldr	r3, [sp, #48]	; 0x30
   147a4:	str	r3, [sp, #40]	; 0x28
   147a8:	ldr	r3, [sp, #176]	; 0xb0
   147ac:	cmp	r3, #2
   147b0:	beq	14b28 <__assert_fail@plt+0x37a0>
   147b4:	ldr	r3, [sp, #88]	; 0x58
   147b8:	cmp	r3, #0
   147bc:	moveq	r5, #92	; 0x5c
   147c0:	moveq	r3, r5
   147c4:	beq	1452c <__assert_fail@plt+0x31a4>
   147c8:	add	r7, r7, #1
   147cc:	mov	r3, fp
   147d0:	mov	r6, #0
   147d4:	mov	r5, #92	; 0x5c
   147d8:	b	14584 <__assert_fail@plt+0x31fc>
   147dc:	ldr	r3, [sp, #64]	; 0x40
   147e0:	cmp	r3, #0
   147e4:	bne	1565c <__assert_fail@plt+0x42d4>
   147e8:	ldr	r2, [sp, #48]	; 0x30
   147ec:	mov	r3, fp
   147f0:	mov	r6, r2
   147f4:	str	r2, [sp, #40]	; 0x28
   147f8:	b	1454c <__assert_fail@plt+0x31c4>
   147fc:	ldr	r3, [sp, #176]	; 0xb0
   14800:	cmp	r3, #2
   14804:	beq	15598 <__assert_fail@plt+0x4210>
   14808:	cmp	r3, #5
   1480c:	ldr	r3, [sp, #48]	; 0x30
   14810:	str	r3, [sp, #40]	; 0x28
   14814:	bne	14840 <__assert_fail@plt+0x34b8>
   14818:	ldr	r3, [sp, #96]	; 0x60
   1481c:	cmp	r3, #0
   14820:	beq	1529c <__assert_fail@plt+0x3f14>
   14824:	add	r3, r7, #2
   14828:	cmp	r3, r8
   1482c:	bcs	14840 <__assert_fail@plt+0x34b8>
   14830:	ldr	r2, [sp, #36]	; 0x24
   14834:	ldrb	r5, [r2, #1]
   14838:	cmp	r5, #63	; 0x3f
   1483c:	beq	15384 <__assert_fail@plt+0x3ffc>
   14840:	mov	r6, #0
   14844:	mov	r5, #63	; 0x3f
   14848:	b	146d8 <__assert_fail@plt+0x3350>
   1484c:	ldr	r3, [sp, #176]	; 0xb0
   14850:	cmp	r3, #2
   14854:	ldr	r3, [sp, #48]	; 0x30
   14858:	beq	15040 <__assert_fail@plt+0x3cb8>
   1485c:	mov	r5, #39	; 0x27
   14860:	str	r3, [sp, #40]	; 0x28
   14864:	str	r6, [sp, #80]	; 0x50
   14868:	b	146d8 <__assert_fail@plt+0x3350>
   1486c:	ldr	r3, [sp, #180]	; 0xb4
   14870:	cmp	r4, #0
   14874:	and	r3, r3, #1
   14878:	str	r3, [sp, #92]	; 0x5c
   1487c:	ldr	r3, [sp, #180]	; 0xb4
   14880:	and	r3, r3, #4
   14884:	str	r3, [sp, #96]	; 0x60
   14888:	bne	156a8 <__assert_fail@plt+0x4320>
   1488c:	str	r4, [sp, #60]	; 0x3c
   14890:	cmp	sl, #0
   14894:	bne	1568c <__assert_fail@plt+0x4304>
   14898:	mov	r3, #1
   1489c:	movw	r2, #40448	; 0x9e00
   148a0:	movt	r2, #1
   148a4:	mov	r4, r3
   148a8:	mov	r3, #2
   148ac:	mov	r9, sl
   148b0:	str	r4, [sp, #32]
   148b4:	str	sl, [sp, #44]	; 0x2c
   148b8:	str	sl, [sp, #48]	; 0x30
   148bc:	str	r4, [sp, #52]	; 0x34
   148c0:	str	r4, [sp, #56]	; 0x38
   148c4:	str	r4, [sp, #64]	; 0x40
   148c8:	str	sl, [sp, #68]	; 0x44
   148cc:	str	r2, [sp, #72]	; 0x48
   148d0:	str	sl, [sp, #80]	; 0x50
   148d4:	str	sl, [sp, #84]	; 0x54
   148d8:	str	sl, [sp, #88]	; 0x58
   148dc:	str	r3, [sp, #176]	; 0xb0
   148e0:	b	13e28 <__assert_fail@plt+0x2aa0>
   148e4:	ldrb	r5, [r0, r7]
   148e8:	cmp	r5, #126	; 0x7e
   148ec:	ldrls	pc, [pc, r5, lsl #2]
   148f0:	b	14c54 <__assert_fail@plt+0x38cc>
   148f4:	andeq	r4, r1, r0, lsr #24
   148f8:	andeq	r4, r1, r4, asr ip
   148fc:	andeq	r4, r1, r4, asr ip
   14900:	andeq	r4, r1, r4, asr ip
   14904:	andeq	r4, r1, r4, asr ip
   14908:	andeq	r4, r1, r4, asr ip
   1490c:	andeq	r4, r1, r4, asr ip
   14910:	andeq	r4, r1, r0, lsl ip
   14914:	andeq	r4, r1, r0, lsl #24
   14918:	andeq	r4, r1, r4, lsl #23
   1491c:	strdeq	r4, [r1], -r0
   14920:	andeq	r4, r1, r4, ror #22
   14924:	andeq	r4, r1, r4, asr #24
   14928:	ldrdeq	r4, [r1], -r0
   1492c:	andeq	r4, r1, r4, asr ip
   14930:	andeq	r4, r1, r4, asr ip
   14934:	andeq	r4, r1, r4, asr ip
   14938:	andeq	r4, r1, r4, asr ip
   1493c:	andeq	r4, r1, r4, asr ip
   14940:	andeq	r4, r1, r4, asr ip
   14944:	andeq	r4, r1, r4, asr ip
   14948:	andeq	r4, r1, r4, asr ip
   1494c:	andeq	r4, r1, r4, asr ip
   14950:	andeq	r4, r1, r4, asr ip
   14954:	andeq	r4, r1, r4, asr ip
   14958:	andeq	r4, r1, r4, asr ip
   1495c:	andeq	r4, r1, r4, asr ip
   14960:	andeq	r4, r1, r4, asr ip
   14964:	andeq	r4, r1, r4, asr ip
   14968:	andeq	r4, r1, r4, asr ip
   1496c:	andeq	r4, r1, r4, asr ip
   14970:	andeq	r4, r1, r4, asr ip
   14974:	andeq	r4, r1, r8, ror fp
   14978:	andeq	r4, r1, r0, ror #23
   1497c:	andeq	r4, r1, r0, ror #23
   14980:	andeq	r4, r1, r8, asr fp
   14984:	andeq	r4, r1, r0, ror #23
   14988:	andeq	r4, r1, ip, asr #22
   1498c:	andeq	r4, r1, r0, ror #23
   14990:			; <UNDEFINED> instruction: 0x00014bbc
   14994:	andeq	r4, r1, r0, ror #23
   14998:	andeq	r4, r1, r0, ror #23
   1499c:	andeq	r4, r1, r0, ror #23
   149a0:	andeq	r4, r1, ip, asr #22
   149a4:	andeq	r4, r1, ip, asr #22
   149a8:	andeq	r4, r1, ip, asr #22
   149ac:	andeq	r4, r1, ip, asr #22
   149b0:	andeq	r4, r1, ip, asr #22
   149b4:	andeq	r4, r1, ip, asr #22
   149b8:	andeq	r4, r1, ip, asr #22
   149bc:	andeq	r4, r1, ip, asr #22
   149c0:	andeq	r4, r1, ip, asr #22
   149c4:	andeq	r4, r1, ip, asr #22
   149c8:	andeq	r4, r1, ip, asr #22
   149cc:	andeq	r4, r1, ip, asr #22
   149d0:	andeq	r4, r1, ip, asr #22
   149d4:	andeq	r4, r1, ip, asr #22
   149d8:	andeq	r4, r1, ip, asr #22
   149dc:	andeq	r4, r1, ip, asr #22
   149e0:	andeq	r4, r1, r0, ror #23
   149e4:	andeq	r4, r1, r0, ror #23
   149e8:	andeq	r4, r1, r0, ror #23
   149ec:	andeq	r4, r1, r0, ror #23
   149f0:	muleq	r1, r4, fp
   149f4:	andeq	r4, r1, r4, asr ip
   149f8:	andeq	r4, r1, ip, asr #22
   149fc:	andeq	r4, r1, ip, asr #22
   14a00:	andeq	r4, r1, ip, asr #22
   14a04:	andeq	r4, r1, ip, asr #22
   14a08:	andeq	r4, r1, ip, asr #22
   14a0c:	andeq	r4, r1, ip, asr #22
   14a10:	andeq	r4, r1, ip, asr #22
   14a14:	andeq	r4, r1, ip, asr #22
   14a18:	andeq	r4, r1, ip, asr #22
   14a1c:	andeq	r4, r1, ip, asr #22
   14a20:	andeq	r4, r1, ip, asr #22
   14a24:	andeq	r4, r1, ip, asr #22
   14a28:	andeq	r4, r1, ip, asr #22
   14a2c:	andeq	r4, r1, ip, asr #22
   14a30:	andeq	r4, r1, ip, asr #22
   14a34:	andeq	r4, r1, ip, asr #22
   14a38:	andeq	r4, r1, ip, asr #22
   14a3c:	andeq	r4, r1, ip, asr #22
   14a40:	andeq	r4, r1, ip, asr #22
   14a44:	andeq	r4, r1, ip, asr #22
   14a48:	andeq	r4, r1, ip, asr #22
   14a4c:	andeq	r4, r1, ip, asr #22
   14a50:	andeq	r4, r1, ip, asr #22
   14a54:	andeq	r4, r1, ip, asr #22
   14a58:	andeq	r4, r1, ip, asr #22
   14a5c:	andeq	r4, r1, ip, asr #22
   14a60:	andeq	r4, r1, r0, ror #23
   14a64:	andeq	r4, r1, r4, lsl fp
   14a68:	andeq	r4, r1, ip, asr #22
   14a6c:	andeq	r4, r1, r0, ror #23
   14a70:	andeq	r4, r1, ip, asr #22
   14a74:	andeq	r4, r1, r0, ror #23
   14a78:	andeq	r4, r1, ip, asr #22
   14a7c:	andeq	r4, r1, ip, asr #22
   14a80:	andeq	r4, r1, ip, asr #22
   14a84:	andeq	r4, r1, ip, asr #22
   14a88:	andeq	r4, r1, ip, asr #22
   14a8c:	andeq	r4, r1, ip, asr #22
   14a90:	andeq	r4, r1, ip, asr #22
   14a94:	andeq	r4, r1, ip, asr #22
   14a98:	andeq	r4, r1, ip, asr #22
   14a9c:	andeq	r4, r1, ip, asr #22
   14aa0:	andeq	r4, r1, ip, asr #22
   14aa4:	andeq	r4, r1, ip, asr #22
   14aa8:	andeq	r4, r1, ip, asr #22
   14aac:	andeq	r4, r1, ip, asr #22
   14ab0:	andeq	r4, r1, ip, asr #22
   14ab4:	andeq	r4, r1, ip, asr #22
   14ab8:	andeq	r4, r1, ip, asr #22
   14abc:	andeq	r4, r1, ip, asr #22
   14ac0:	andeq	r4, r1, ip, asr #22
   14ac4:	andeq	r4, r1, ip, asr #22
   14ac8:	andeq	r4, r1, ip, asr #22
   14acc:	andeq	r4, r1, ip, asr #22
   14ad0:	andeq	r4, r1, ip, asr #22
   14ad4:	andeq	r4, r1, ip, asr #22
   14ad8:	andeq	r4, r1, ip, asr #22
   14adc:	andeq	r4, r1, ip, asr #22
   14ae0:	strdeq	r4, [r1], -r0
   14ae4:	andeq	r4, r1, r0, ror #23
   14ae8:	strdeq	r4, [r1], -r0
   14aec:	andeq	r4, r1, r8, asr fp
   14af0:	mov	r3, #0
   14af4:	cmn	r8, #1
   14af8:	str	r3, [sp, #40]	; 0x28
   14afc:	bne	146bc <__assert_fail@plt+0x3334>
   14b00:	ldr	r3, [sp, #28]
   14b04:	ldrb	r3, [r3, #1]
   14b08:	adds	r3, r3, #0
   14b0c:	movne	r3, #1
   14b10:	b	146c4 <__assert_fail@plt+0x333c>
   14b14:	mov	r3, #0
   14b18:	str	r3, [sp, #40]	; 0x28
   14b1c:	ldr	r3, [sp, #176]	; 0xb0
   14b20:	cmp	r3, #2
   14b24:	bne	147b4 <__assert_fail@plt+0x342c>
   14b28:	ldr	r3, [sp, #44]	; 0x2c
   14b2c:	cmp	r3, #0
   14b30:	bne	15470 <__assert_fail@plt+0x40e8>
   14b34:	mov	r6, r3
   14b38:	add	r7, r7, #1
   14b3c:	mov	r3, fp
   14b40:	mov	r5, #92	; 0x5c
   14b44:	b	14584 <__assert_fail@plt+0x31fc>
   14b48:	ldr	r6, [sp, #48]	; 0x30
   14b4c:	mov	r3, #0
   14b50:	str	r3, [sp, #40]	; 0x28
   14b54:	b	146d8 <__assert_fail@plt+0x3350>
   14b58:	mov	r3, #0
   14b5c:	str	r3, [sp, #40]	; 0x28
   14b60:	b	146cc <__assert_fail@plt+0x3344>
   14b64:	mov	r3, #0
   14b68:	str	r3, [sp, #40]	; 0x28
   14b6c:	mov	r3, #118	; 0x76
   14b70:	b	1452c <__assert_fail@plt+0x31a4>
   14b74:	ldr	r6, [sp, #48]	; 0x30
   14b78:	mov	r3, #0
   14b7c:	str	r3, [sp, #40]	; 0x28
   14b80:	b	14718 <__assert_fail@plt+0x3390>
   14b84:	mov	r3, #0
   14b88:	str	r3, [sp, #40]	; 0x28
   14b8c:	mov	r3, #116	; 0x74
   14b90:	b	14520 <__assert_fail@plt+0x3198>
   14b94:	ldr	r3, [sp, #176]	; 0xb0
   14b98:	cmp	r3, #2
   14b9c:	beq	150ac <__assert_fail@plt+0x3d24>
   14ba0:	cmp	r3, #5
   14ba4:	mov	r3, #0
   14ba8:	str	r3, [sp, #40]	; 0x28
   14bac:	beq	14818 <__assert_fail@plt+0x3490>
   14bb0:	mov	r6, #0
   14bb4:	mov	r5, #63	; 0x3f
   14bb8:	b	146d8 <__assert_fail@plt+0x3350>
   14bbc:	ldr	r3, [sp, #176]	; 0xb0
   14bc0:	cmp	r3, #2
   14bc4:	beq	15034 <__assert_fail@plt+0x3cac>
   14bc8:	mov	r3, #0
   14bcc:	b	1485c <__assert_fail@plt+0x34d4>
   14bd0:	mov	r3, #0
   14bd4:	str	r3, [sp, #40]	; 0x28
   14bd8:	mov	r3, #114	; 0x72
   14bdc:	b	14520 <__assert_fail@plt+0x3198>
   14be0:	mov	r3, #0
   14be4:	mov	r6, r3
   14be8:	str	r3, [sp, #40]	; 0x28
   14bec:	b	14718 <__assert_fail@plt+0x3390>
   14bf0:	mov	r3, #0
   14bf4:	str	r3, [sp, #40]	; 0x28
   14bf8:	mov	r3, #110	; 0x6e
   14bfc:	b	14520 <__assert_fail@plt+0x3198>
   14c00:	mov	r3, #0
   14c04:	str	r3, [sp, #40]	; 0x28
   14c08:	mov	r3, #98	; 0x62
   14c0c:	b	1452c <__assert_fail@plt+0x31a4>
   14c10:	mov	r3, #0
   14c14:	str	r3, [sp, #40]	; 0x28
   14c18:	mov	r3, #97	; 0x61
   14c1c:	b	1452c <__assert_fail@plt+0x31a4>
   14c20:	ldr	r3, [sp, #60]	; 0x3c
   14c24:	cmp	r3, #0
   14c28:	bne	15018 <__assert_fail@plt+0x3c90>
   14c2c:	ldr	r3, [sp, #92]	; 0x5c
   14c30:	cmp	r3, #0
   14c34:	addne	r7, r7, #1
   14c38:	bne	13e38 <__assert_fail@plt+0x2ab0>
   14c3c:	str	r3, [sp, #40]	; 0x28
   14c40:	b	14538 <__assert_fail@plt+0x31b0>
   14c44:	mov	r3, #0
   14c48:	str	r3, [sp, #40]	; 0x28
   14c4c:	mov	r3, #102	; 0x66
   14c50:	b	1452c <__assert_fail@plt+0x31a4>
   14c54:	mov	r3, #0
   14c58:	str	r3, [sp, #40]	; 0x28
   14c5c:	ldr	r3, [sp, #76]	; 0x4c
   14c60:	cmp	r3, #1
   14c64:	bne	150cc <__assert_fail@plt+0x3d44>
   14c68:	bl	1122c <__ctype_b_loc@plt>
   14c6c:	ldr	r2, [r0]
   14c70:	sxth	r3, r5
   14c74:	lsl	r3, r3, #1
   14c78:	ldr	r1, [sp, #76]	; 0x4c
   14c7c:	ldrh	r3, [r2, r3]
   14c80:	mov	r0, r1
   14c84:	and	r3, r3, #16384	; 0x4000
   14c88:	cmp	r3, #0
   14c8c:	ldr	r3, [sp, #60]	; 0x3c
   14c90:	movne	r6, #1
   14c94:	moveq	r6, #0
   14c98:	movne	r2, #0
   14c9c:	andeq	r2, r3, #1
   14ca0:	cmp	r2, #0
   14ca4:	beq	146d8 <__assert_fail@plt+0x3350>
   14ca8:	ldr	r2, [sp, #60]	; 0x3c
   14cac:	mov	r6, #0
   14cb0:	add	r1, r0, r7
   14cb4:	mov	ip, #39	; 0x27
   14cb8:	str	r6, [sp, #100]	; 0x64
   14cbc:	mov	r0, #0
   14cc0:	ldr	lr, [sp, #36]	; 0x24
   14cc4:	str	r8, [sp, #36]	; 0x24
   14cc8:	ldr	r6, [sp, #40]	; 0x28
   14ccc:	ldr	r8, [sp, #44]	; 0x2c
   14cd0:	b	14d80 <__assert_fail@plt+0x39f8>
   14cd4:	cmp	r8, #0
   14cd8:	bne	152b4 <__assert_fail@plt+0x3f2c>
   14cdc:	ldr	r0, [sp, #52]	; 0x34
   14ce0:	eor	r3, fp, #1
   14ce4:	ands	r3, r0, r3
   14ce8:	beq	14d18 <__assert_fail@plt+0x3990>
   14cec:	cmp	sl, r4
   14cf0:	add	r0, r4, #1
   14cf4:	strbhi	ip, [r9, r4]
   14cf8:	cmp	sl, r0
   14cfc:	movhi	fp, #36	; 0x24
   14d00:	strbhi	fp, [r9, r0]
   14d04:	add	r0, r4, #2
   14d08:	mov	fp, r3
   14d0c:	cmp	sl, r0
   14d10:	add	r4, r4, #3
   14d14:	strbhi	ip, [r9, r0]
   14d18:	cmp	sl, r4
   14d1c:	movhi	r3, #92	; 0x5c
   14d20:	strbhi	r3, [r9, r4]
   14d24:	add	r3, r4, #1
   14d28:	cmp	sl, r3
   14d2c:	bls	14d3c <__assert_fail@plt+0x39b4>
   14d30:	lsr	r0, r5, #6
   14d34:	add	r0, r0, #48	; 0x30
   14d38:	strb	r0, [r9, r3]
   14d3c:	add	r3, r4, #2
   14d40:	cmp	sl, r3
   14d44:	bls	14d54 <__assert_fail@plt+0x39cc>
   14d48:	ubfx	r0, r5, #3, #3
   14d4c:	add	r0, r0, #48	; 0x30
   14d50:	strb	r0, [r9, r3]
   14d54:	add	r7, r7, #1
   14d58:	and	r5, r5, #7
   14d5c:	cmp	r1, r7
   14d60:	add	r5, r5, #48	; 0x30
   14d64:	add	r4, r4, #3
   14d68:	bls	152c8 <__assert_fail@plt+0x3f40>
   14d6c:	mov	r0, r2
   14d70:	cmp	sl, r4
   14d74:	strbhi	r5, [r9, r4]
   14d78:	add	r4, r4, #1
   14d7c:	ldrb	r5, [lr, #1]!
   14d80:	cmp	r2, #0
   14d84:	bne	14cd4 <__assert_fail@plt+0x394c>
   14d88:	eor	r3, r0, #1
   14d8c:	cmp	r6, #0
   14d90:	and	r3, r3, fp
   14d94:	uxtb	r3, r3
   14d98:	beq	14dac <__assert_fail@plt+0x3a24>
   14d9c:	cmp	sl, r4
   14da0:	movhi	r6, #92	; 0x5c
   14da4:	strbhi	r6, [r9, r4]
   14da8:	add	r4, r4, #1
   14dac:	add	r7, r7, #1
   14db0:	cmp	r7, r1
   14db4:	bcs	152a8 <__assert_fail@plt+0x3f20>
   14db8:	cmp	r3, #0
   14dbc:	beq	152ec <__assert_fail@plt+0x3f64>
   14dc0:	cmp	sl, r4
   14dc4:	add	r3, r4, #1
   14dc8:	mov	r6, #0
   14dcc:	strbhi	ip, [r9, r4]
   14dd0:	cmp	sl, r3
   14dd4:	add	r4, r4, #2
   14dd8:	mov	fp, r6
   14ddc:	strbhi	ip, [r9, r3]
   14de0:	b	14d70 <__assert_fail@plt+0x39e8>
   14de4:	ldr	r3, [sp, #36]	; 0x24
   14de8:	ldrb	r5, [r3]
   14dec:	cmp	r5, #126	; 0x7e
   14df0:	ldrls	pc, [pc, r5, lsl #2]
   14df4:	b	14c54 <__assert_fail@plt+0x38cc>
   14df8:	andeq	r5, r1, r8, lsl r0
   14dfc:	andeq	r4, r1, r4, asr ip
   14e00:	andeq	r4, r1, r4, asr ip
   14e04:	andeq	r4, r1, r4, asr ip
   14e08:	andeq	r4, r1, r4, asr ip
   14e0c:	andeq	r4, r1, r4, asr ip
   14e10:	andeq	r4, r1, r4, asr ip
   14e14:	andeq	r4, r1, ip, lsl #10
   14e18:	andeq	r4, r1, r4, lsl #10
   14e1c:	andeq	r4, r1, r4, lsl #23
   14e20:	andeq	r5, r1, ip
   14e24:	andeq	r4, r1, r4, ror #22
   14e28:			; <UNDEFINED> instruction: 0x000143b0
   14e2c:	andeq	r5, r1, r0
   14e30:	andeq	r4, r1, r4, asr ip
   14e34:	andeq	r4, r1, r4, asr ip
   14e38:	andeq	r4, r1, r4, asr ip
   14e3c:	andeq	r4, r1, r4, asr ip
   14e40:	andeq	r4, r1, r4, asr ip
   14e44:	andeq	r4, r1, r4, asr ip
   14e48:	andeq	r4, r1, r4, asr ip
   14e4c:	andeq	r4, r1, r4, asr ip
   14e50:	andeq	r4, r1, r4, asr ip
   14e54:	andeq	r4, r1, r4, asr ip
   14e58:	andeq	r4, r1, r4, asr ip
   14e5c:	andeq	r4, r1, r4, asr ip
   14e60:	andeq	r4, r1, r4, asr ip
   14e64:	andeq	r4, r1, r4, asr ip
   14e68:	andeq	r4, r1, r4, asr ip
   14e6c:	andeq	r4, r1, r4, asr ip
   14e70:	andeq	r4, r1, r4, asr ip
   14e74:	andeq	r4, r1, r4, asr ip
   14e78:	andeq	r4, r1, r4, ror fp
   14e7c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e80:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e84:	andeq	r4, r1, r8, asr fp
   14e88:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e8c:	andeq	r4, r1, r8, asr #22
   14e90:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e94:			; <UNDEFINED> instruction: 0x00014bbc
   14e98:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e9c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ea0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ea4:	andeq	r4, r1, r8, asr #22
   14ea8:	andeq	r4, r1, r8, asr #22
   14eac:	andeq	r4, r1, r8, asr #22
   14eb0:	andeq	r4, r1, r8, asr #22
   14eb4:	andeq	r4, r1, r8, asr #22
   14eb8:	andeq	r4, r1, r8, asr #22
   14ebc:	andeq	r4, r1, r8, asr #22
   14ec0:	andeq	r4, r1, r8, asr #22
   14ec4:	andeq	r4, r1, r8, asr #22
   14ec8:	andeq	r4, r1, r8, asr #22
   14ecc:	andeq	r4, r1, r8, asr #22
   14ed0:	andeq	r4, r1, r8, asr #22
   14ed4:	andeq	r4, r1, r8, asr #22
   14ed8:	andeq	r4, r1, r8, asr #22
   14edc:	andeq	r4, r1, r8, asr #22
   14ee0:	andeq	r4, r1, r8, asr #22
   14ee4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ee8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14eec:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ef0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ef4:	muleq	r1, r4, fp
   14ef8:	andeq	r4, r1, r4, asr ip
   14efc:	andeq	r4, r1, r8, asr #22
   14f00:	andeq	r4, r1, r8, asr #22
   14f04:	andeq	r4, r1, r8, asr #22
   14f08:	andeq	r4, r1, r8, asr #22
   14f0c:	andeq	r4, r1, r8, asr #22
   14f10:	andeq	r4, r1, r8, asr #22
   14f14:	andeq	r4, r1, r8, asr #22
   14f18:	andeq	r4, r1, r8, asr #22
   14f1c:	andeq	r4, r1, r8, asr #22
   14f20:	andeq	r4, r1, r8, asr #22
   14f24:	andeq	r4, r1, r8, asr #22
   14f28:	andeq	r4, r1, r8, asr #22
   14f2c:	andeq	r4, r1, r8, asr #22
   14f30:	andeq	r4, r1, r8, asr #22
   14f34:	andeq	r4, r1, r8, asr #22
   14f38:	andeq	r4, r1, r8, asr #22
   14f3c:	andeq	r4, r1, r8, asr #22
   14f40:	andeq	r4, r1, r8, asr #22
   14f44:	andeq	r4, r1, r8, asr #22
   14f48:	andeq	r4, r1, r8, asr #22
   14f4c:	andeq	r4, r1, r8, asr #22
   14f50:	andeq	r4, r1, r8, asr #22
   14f54:	andeq	r4, r1, r8, asr #22
   14f58:	andeq	r4, r1, r8, asr #22
   14f5c:	andeq	r4, r1, r8, asr #22
   14f60:	andeq	r4, r1, r8, asr #22
   14f64:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f68:	andeq	r4, r1, r4, lsl fp
   14f6c:	andeq	r4, r1, r8, asr #22
   14f70:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f74:	andeq	r4, r1, r8, asr #22
   14f78:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14f7c:	andeq	r4, r1, r8, asr #22
   14f80:	andeq	r4, r1, r8, asr #22
   14f84:	andeq	r4, r1, r8, asr #22
   14f88:	andeq	r4, r1, r8, asr #22
   14f8c:	andeq	r4, r1, r8, asr #22
   14f90:	andeq	r4, r1, r8, asr #22
   14f94:	andeq	r4, r1, r8, asr #22
   14f98:	andeq	r4, r1, r8, asr #22
   14f9c:	andeq	r4, r1, r8, asr #22
   14fa0:	andeq	r4, r1, r8, asr #22
   14fa4:	andeq	r4, r1, r8, asr #22
   14fa8:	andeq	r4, r1, r8, asr #22
   14fac:	andeq	r4, r1, r8, asr #22
   14fb0:	andeq	r4, r1, r8, asr #22
   14fb4:	andeq	r4, r1, r8, asr #22
   14fb8:	andeq	r4, r1, r8, asr #22
   14fbc:	andeq	r4, r1, r8, asr #22
   14fc0:	andeq	r4, r1, r8, asr #22
   14fc4:	andeq	r4, r1, r8, asr #22
   14fc8:	andeq	r4, r1, r8, asr #22
   14fcc:	andeq	r4, r1, r8, asr #22
   14fd0:	andeq	r4, r1, r8, asr #22
   14fd4:	andeq	r4, r1, r8, asr #22
   14fd8:	andeq	r4, r1, r8, asr #22
   14fdc:	andeq	r4, r1, r8, asr #22
   14fe0:	andeq	r4, r1, r8, asr #22
   14fe4:	strdeq	r4, [r1], -r0
   14fe8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14fec:	strdeq	r4, [r1], -r0
   14ff0:	andeq	r4, r1, r8, asr fp
   14ff4:	mov	r3, #0
   14ff8:	str	r3, [sp, #40]	; 0x28
   14ffc:	b	146d4 <__assert_fail@plt+0x334c>
   15000:	mov	r3, #0
   15004:	str	r3, [sp, #40]	; 0x28
   15008:	b	1466c <__assert_fail@plt+0x32e4>
   1500c:	mov	r3, #0
   15010:	str	r3, [sp, #40]	; 0x28
   15014:	b	146a0 <__assert_fail@plt+0x3318>
   15018:	ldr	r3, [sp, #44]	; 0x2c
   1501c:	cmp	r3, #0
   15020:	beq	145b8 <__assert_fail@plt+0x3230>
   15024:	ldr	r3, [sp, #52]	; 0x34
   15028:	mov	fp, r9
   1502c:	str	r3, [sp, #60]	; 0x3c
   15030:	b	14730 <__assert_fail@plt+0x33a8>
   15034:	ldr	r3, [sp, #44]	; 0x2c
   15038:	cmp	r3, #0
   1503c:	bne	15470 <__assert_fail@plt+0x40e8>
   15040:	str	r3, [sp, #40]	; 0x28
   15044:	cmp	sl, #0
   15048:	ldr	r3, [sp, #84]	; 0x54
   1504c:	clz	r3, r3
   15050:	lsr	r3, r3, #5
   15054:	moveq	r3, #0
   15058:	cmp	r3, #0
   1505c:	strne	sl, [sp, #84]	; 0x54
   15060:	movne	sl, #0
   15064:	bne	15094 <__assert_fail@plt+0x3d0c>
   15068:	cmp	sl, r4
   1506c:	movhi	r3, #39	; 0x27
   15070:	strbhi	r3, [r9, r4]
   15074:	add	r3, r4, #1
   15078:	cmp	sl, r3
   1507c:	movhi	r2, #92	; 0x5c
   15080:	strbhi	r2, [r9, r3]
   15084:	add	r3, r4, #2
   15088:	cmp	sl, r3
   1508c:	movhi	r2, #39	; 0x27
   15090:	strbhi	r2, [r9, r3]
   15094:	mov	r3, #0
   15098:	add	r4, r4, #3
   1509c:	str	r6, [sp, #80]	; 0x50
   150a0:	mov	fp, r3
   150a4:	mov	r5, #39	; 0x27
   150a8:	b	14574 <__assert_fail@plt+0x31ec>
   150ac:	ldr	r3, [sp, #44]	; 0x2c
   150b0:	cmp	r3, #0
   150b4:	bne	15470 <__assert_fail@plt+0x40e8>
   150b8:	mov	r6, #0
   150bc:	mov	r5, #63	; 0x3f
   150c0:	str	r3, [sp, #40]	; 0x28
   150c4:	mov	r3, fp
   150c8:	b	14574 <__assert_fail@plt+0x31ec>
   150cc:	mov	r2, #0
   150d0:	mov	r3, #0
   150d4:	cmn	r8, #1
   150d8:	strd	r2, [sp, #128]	; 0x80
   150dc:	bne	150ec <__assert_fail@plt+0x3d64>
   150e0:	ldr	r0, [sp, #28]
   150e4:	bl	1125c <strlen@plt>
   150e8:	mov	r8, r0
   150ec:	str	r9, [sp, #100]	; 0x64
   150f0:	mov	r3, #0
   150f4:	strd	sl, [sp, #104]	; 0x68
   150f8:	ldr	sl, [sp, #28]
   150fc:	str	r5, [sp, #112]	; 0x70
   15100:	mov	r5, r3
   15104:	ldr	r9, [sp, #68]	; 0x44
   15108:	str	r4, [sp, #116]	; 0x74
   1510c:	add	r4, r7, r5
   15110:	add	r3, sp, #128	; 0x80
   15114:	add	fp, sl, r4
   15118:	sub	r2, r8, r4
   1511c:	mov	r1, fp
   15120:	add	r0, sp, #124	; 0x7c
   15124:	bl	138a0 <__assert_fail@plt+0x2518>
   15128:	subs	r1, r0, #0
   1512c:	beq	1516c <__assert_fail@plt+0x3de4>
   15130:	cmn	r1, #1
   15134:	beq	154c4 <__assert_fail@plt+0x413c>
   15138:	cmn	r1, #2
   1513c:	beq	154e4 <__assert_fail@plt+0x415c>
   15140:	cmp	r9, #0
   15144:	bne	1519c <__assert_fail@plt+0x3e14>
   15148:	ldr	r0, [sp, #124]	; 0x7c
   1514c:	add	r5, r5, r1
   15150:	bl	1116c <iswprint@plt>
   15154:	cmp	r0, #0
   15158:	add	r0, sp, #128	; 0x80
   1515c:	moveq	r6, #0
   15160:	bl	11100 <mbsinit@plt>
   15164:	cmp	r0, #0
   15168:	beq	1510c <__assert_fail@plt+0x3d84>
   1516c:	ldr	r3, [sp, #60]	; 0x3c
   15170:	add	r9, sp, #100	; 0x64
   15174:	mov	r0, r5
   15178:	ldm	r9, {r9, sl, fp}
   1517c:	eor	r2, r6, #1
   15180:	ldr	r5, [sp, #112]	; 0x70
   15184:	and	r2, r2, r3
   15188:	uxtb	r2, r2
   1518c:	ldr	r4, [sp, #116]	; 0x74
   15190:	cmp	r0, #1
   15194:	bhi	14cb0 <__assert_fail@plt+0x3928>
   15198:	b	14ca0 <__assert_fail@plt+0x3918>
   1519c:	cmp	r1, #1
   151a0:	beq	15148 <__assert_fail@plt+0x3dc0>
   151a4:	add	r2, r4, #1
   151a8:	add	r3, sl, r1
   151ac:	add	r2, sl, r2
   151b0:	add	r4, r3, r4
   151b4:	ldrb	r3, [r2], #1
   151b8:	sub	r3, r3, #91	; 0x5b
   151bc:	cmp	r3, #33	; 0x21
   151c0:	ldrls	pc, [pc, r3, lsl #2]
   151c4:	b	15250 <__assert_fail@plt+0x3ec8>
   151c8:	andeq	r5, r1, ip, asr r2
   151cc:	andeq	r5, r1, ip, asr r2
   151d0:	andeq	r5, r1, r0, asr r2
   151d4:	andeq	r5, r1, ip, asr r2
   151d8:	andeq	r5, r1, r0, asr r2
   151dc:	andeq	r5, r1, ip, asr r2
   151e0:	andeq	r5, r1, r0, asr r2
   151e4:	andeq	r5, r1, r0, asr r2
   151e8:	andeq	r5, r1, r0, asr r2
   151ec:	andeq	r5, r1, r0, asr r2
   151f0:	andeq	r5, r1, r0, asr r2
   151f4:	andeq	r5, r1, r0, asr r2
   151f8:	andeq	r5, r1, r0, asr r2
   151fc:	andeq	r5, r1, r0, asr r2
   15200:	andeq	r5, r1, r0, asr r2
   15204:	andeq	r5, r1, r0, asr r2
   15208:	andeq	r5, r1, r0, asr r2
   1520c:	andeq	r5, r1, r0, asr r2
   15210:	andeq	r5, r1, r0, asr r2
   15214:	andeq	r5, r1, r0, asr r2
   15218:	andeq	r5, r1, r0, asr r2
   1521c:	andeq	r5, r1, r0, asr r2
   15220:	andeq	r5, r1, r0, asr r2
   15224:	andeq	r5, r1, r0, asr r2
   15228:	andeq	r5, r1, r0, asr r2
   1522c:	andeq	r5, r1, r0, asr r2
   15230:	andeq	r5, r1, r0, asr r2
   15234:	andeq	r5, r1, r0, asr r2
   15238:	andeq	r5, r1, r0, asr r2
   1523c:	andeq	r5, r1, r0, asr r2
   15240:	andeq	r5, r1, r0, asr r2
   15244:	andeq	r5, r1, r0, asr r2
   15248:	andeq	r5, r1, r0, asr r2
   1524c:	andeq	r5, r1, ip, asr r2
   15250:	cmp	r4, r2
   15254:	bne	151b4 <__assert_fail@plt+0x3e2c>
   15258:	b	15148 <__assert_fail@plt+0x3dc0>
   1525c:	mov	r3, #2
   15260:	ldr	fp, [sp, #100]	; 0x64
   15264:	str	r3, [sp, #176]	; 0xb0
   15268:	ldr	sl, [sp, #104]	; 0x68
   1526c:	b	14730 <__assert_fail@plt+0x33a8>
   15270:	ldr	r2, [sp, #52]	; 0x34
   15274:	mov	fp, r9
   15278:	ldr	r3, [sp, #60]	; 0x3c
   1527c:	and	r3, r3, r2
   15280:	str	r3, [sp, #60]	; 0x3c
   15284:	b	14730 <__assert_fail@plt+0x33a8>
   15288:	cmp	sl, r4
   1528c:	movhi	r2, fp
   15290:	bhi	14608 <__assert_fail@plt+0x3280>
   15294:	mov	r2, r4
   15298:	b	14618 <__assert_fail@plt+0x3290>
   1529c:	mov	r6, r3
   152a0:	mov	r5, #63	; 0x3f
   152a4:	b	146d8 <__assert_fail@plt+0x3350>
   152a8:	ldr	r8, [sp, #36]	; 0x24
   152ac:	ldr	r6, [sp, #100]	; 0x64
   152b0:	b	14584 <__assert_fail@plt+0x31fc>
   152b4:	mov	fp, r9
   152b8:	ldr	r8, [sp, #36]	; 0x24
   152bc:	ldr	r3, [sp, #52]	; 0x34
   152c0:	str	r3, [sp, #60]	; 0x3c
   152c4:	b	14730 <__assert_fail@plt+0x33a8>
   152c8:	ldr	r8, [sp, #36]	; 0x24
   152cc:	ldr	r6, [sp, #100]	; 0x64
   152d0:	b	1441c <__assert_fail@plt+0x3094>
   152d4:	mov	r3, #0
   152d8:	add	r4, r4, #4
   152dc:	mov	fp, r2
   152e0:	mov	r6, r3
   152e4:	mov	r5, #48	; 0x30
   152e8:	b	14574 <__assert_fail@plt+0x31ec>
   152ec:	mov	r6, r3
   152f0:	b	14d70 <__assert_fail@plt+0x39e8>
   152f4:	mov	r3, #1
   152f8:	movw	r2, #40428	; 0x9dec
   152fc:	movt	r2, #1
   15300:	mov	r4, r3
   15304:	mov	r9, sl
   15308:	str	r3, [sp, #32]
   1530c:	str	sl, [sp, #44]	; 0x2c
   15310:	str	r3, [sp, #48]	; 0x30
   15314:	str	sl, [sp, #52]	; 0x34
   15318:	str	r3, [sp, #56]	; 0x38
   1531c:	str	r3, [sp, #60]	; 0x3c
   15320:	str	sl, [sp, #64]	; 0x40
   15324:	str	sl, [sp, #68]	; 0x44
   15328:	str	r2, [sp, #72]	; 0x48
   1532c:	str	sl, [sp, #80]	; 0x50
   15330:	str	sl, [sp, #84]	; 0x54
   15334:	str	sl, [sp, #88]	; 0x58
   15338:	b	13e28 <__assert_fail@plt+0x2aa0>
   1533c:	mov	r3, #0
   15340:	mov	r5, #48	; 0x30
   15344:	mov	r6, r3
   15348:	b	14574 <__assert_fail@plt+0x31ec>
   1534c:	cmp	sl, r4
   15350:	mov	r5, #48	; 0x30
   15354:	movhi	r3, #48	; 0x30
   15358:	strbhi	r3, [r9, r4]
   1535c:	add	r3, r2, #2
   15360:	add	r4, r2, #3
   15364:	cmp	sl, r3
   15368:	movhi	r1, #48	; 0x30
   1536c:	strbhi	r1, [r9, r3]
   15370:	mov	r3, #0
   15374:	b	14650 <__assert_fail@plt+0x32c8>
   15378:	ldr	r3, [sp, #48]	; 0x30
   1537c:	str	r3, [sp, #40]	; 0x28
   15380:	b	14c5c <__assert_fail@plt+0x38d4>
   15384:	ldr	r2, [sp, #28]
   15388:	ldrb	r2, [r2, r3]
   1538c:	sub	r1, r2, #33	; 0x21
   15390:	cmp	r1, #29
   15394:	ldrls	pc, [pc, r1, lsl #2]
   15398:	b	146d4 <__assert_fail@plt+0x334c>
   1539c:	andeq	r5, r1, r4, lsl r4
   153a0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153a4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153a8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153ac:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153b0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153b4:	andeq	r5, r1, r4, lsl r4
   153b8:	andeq	r5, r1, r4, lsl r4
   153bc:	andeq	r5, r1, r4, lsl r4
   153c0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153c4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153c8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153cc:	andeq	r5, r1, r4, lsl r4
   153d0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153d4:	andeq	r5, r1, r4, lsl r4
   153d8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153dc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153e0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153e4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153e8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153ec:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153f0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153f4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153f8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   153fc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15400:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15404:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15408:	andeq	r5, r1, r4, lsl r4
   1540c:	andeq	r5, r1, r4, lsl r4
   15410:	andeq	r5, r1, r4, lsl r4
   15414:	ldr	r1, [sp, #44]	; 0x2c
   15418:	cmp	r1, #0
   1541c:	bne	1567c <__assert_fail@plt+0x42f4>
   15420:	cmp	sl, r4
   15424:	mov	r7, r3
   15428:	movhi	r1, #63	; 0x3f
   1542c:	mov	r5, r2
   15430:	mov	r3, fp
   15434:	strbhi	r1, [r9, r4]
   15438:	add	r1, r4, #1
   1543c:	cmp	sl, r1
   15440:	movhi	r0, #34	; 0x22
   15444:	strbhi	r0, [r9, r1]
   15448:	add	r1, r4, #2
   1544c:	cmp	sl, r1
   15450:	movhi	r0, #34	; 0x22
   15454:	strbhi	r0, [r9, r1]
   15458:	add	r1, r4, #3
   1545c:	add	r4, r4, #4
   15460:	cmp	sl, r1
   15464:	movhi	r0, #63	; 0x3f
   15468:	strbhi	r0, [r9, r1]
   1546c:	b	14650 <__assert_fail@plt+0x32c8>
   15470:	mov	fp, r9
   15474:	b	14730 <__assert_fail@plt+0x33a8>
   15478:	ldr	r3, [sp, #188]	; 0xbc
   1547c:	ldrb	r3, [r3]
   15480:	cmp	r3, #0
   15484:	beq	13dc0 <__assert_fail@plt+0x2a38>
   15488:	ldr	r2, [sp, #188]	; 0xbc
   1548c:	cmp	sl, r4
   15490:	bls	154b0 <__assert_fail@plt+0x4128>
   15494:	strb	r3, [fp, r4]
   15498:	add	r4, r4, #1
   1549c:	ldrb	r3, [r2, #1]!
   154a0:	cmp	r3, #0
   154a4:	beq	13dc0 <__assert_fail@plt+0x2a38>
   154a8:	cmp	sl, r4
   154ac:	bhi	15494 <__assert_fail@plt+0x410c>
   154b0:	ldrb	r3, [r2, #1]!
   154b4:	add	r4, r4, #1
   154b8:	cmp	r3, #0
   154bc:	bne	1548c <__assert_fail@plt+0x4104>
   154c0:	b	13dc0 <__assert_fail@plt+0x2a38>
   154c4:	add	r9, sp, #100	; 0x64
   154c8:	mov	r0, r5
   154cc:	ldr	r2, [sp, #60]	; 0x3c
   154d0:	mov	r6, #0
   154d4:	ldm	r9, {r9, sl, fp}
   154d8:	ldr	r5, [sp, #112]	; 0x70
   154dc:	ldr	r4, [sp, #116]	; 0x74
   154e0:	b	15190 <__assert_fail@plt+0x3e08>
   154e4:	cmp	r4, r8
   154e8:	add	r9, sp, #100	; 0x64
   154ec:	mov	r1, r4
   154f0:	mov	r2, fp
   154f4:	ldm	r9, {r9, sl, fp}
   154f8:	mov	r3, r5
   154fc:	mov	r0, r5
   15500:	ldr	r5, [sp, #112]	; 0x70
   15504:	ldr	r4, [sp, #116]	; 0x74
   15508:	bcs	1553c <__assert_fail@plt+0x41b4>
   1550c:	ldrb	r6, [r2]
   15510:	cmp	r6, #0
   15514:	bne	15528 <__assert_fail@plt+0x41a0>
   15518:	b	15674 <__assert_fail@plt+0x42ec>
   1551c:	ldrb	r6, [r2, #1]!
   15520:	cmp	r6, #0
   15524:	beq	1560c <__assert_fail@plt+0x4284>
   15528:	add	r3, r3, #1
   1552c:	add	r1, r7, r3
   15530:	cmp	r8, r1
   15534:	bhi	1551c <__assert_fail@plt+0x4194>
   15538:	mov	r0, r3
   1553c:	mov	r6, #0
   15540:	ldr	r2, [sp, #60]	; 0x3c
   15544:	b	15190 <__assert_fail@plt+0x3e08>
   15548:	mov	r3, #1
   1554c:	mov	r4, #0
   15550:	mov	r9, r4
   15554:	str	r3, [sp, #32]
   15558:	str	r3, [sp, #44]	; 0x2c
   1555c:	str	r3, [sp, #48]	; 0x30
   15560:	str	r4, [sp, #52]	; 0x34
   15564:	str	r3, [sp, #56]	; 0x38
   15568:	str	r3, [sp, #60]	; 0x3c
   1556c:	str	r3, [sp, #88]	; 0x58
   15570:	movw	r3, #40428	; 0x9dec
   15574:	movt	r3, #1
   15578:	str	r4, [sp, #64]	; 0x40
   1557c:	str	r4, [sp, #68]	; 0x44
   15580:	str	r3, [sp, #72]	; 0x48
   15584:	str	r4, [sp, #80]	; 0x50
   15588:	str	r4, [sp, #84]	; 0x54
   1558c:	b	13e28 <__assert_fail@plt+0x2aa0>
   15590:	mov	fp, r9
   15594:	b	14744 <__assert_fail@plt+0x33bc>
   15598:	ldr	r3, [sp, #48]	; 0x30
   1559c:	b	150b8 <__assert_fail@plt+0x3d30>
   155a0:	mov	r2, r3
   155a4:	ldr	r3, [sp, #72]	; 0x48
   155a8:	cmp	r3, #0
   155ac:	moveq	r2, #0
   155b0:	andne	r2, r2, #1
   155b4:	cmp	r2, #0
   155b8:	beq	155e8 <__assert_fail@plt+0x4260>
   155bc:	mov	r2, r3
   155c0:	ldrb	r3, [r3]
   155c4:	cmp	r3, #0
   155c8:	beq	155e8 <__assert_fail@plt+0x4260>
   155cc:	cmp	sl, r4
   155d0:	bls	155f8 <__assert_fail@plt+0x4270>
   155d4:	strb	r3, [fp, r4]
   155d8:	add	r4, r4, #1
   155dc:	ldrb	r3, [r2, #1]!
   155e0:	cmp	r3, #0
   155e4:	bne	155cc <__assert_fail@plt+0x4244>
   155e8:	cmp	sl, r4
   155ec:	movhi	r3, #0
   155f0:	strbhi	r3, [fp, r4]
   155f4:	b	14780 <__assert_fail@plt+0x33f8>
   155f8:	ldrb	r3, [r2, #1]!
   155fc:	add	r4, r4, #1
   15600:	cmp	r3, #0
   15604:	bne	155cc <__assert_fail@plt+0x4244>
   15608:	b	155e8 <__assert_fail@plt+0x4260>
   1560c:	mov	r0, r3
   15610:	ldr	r2, [sp, #60]	; 0x3c
   15614:	b	15190 <__assert_fail@plt+0x3e08>
   15618:	mov	ip, #5
   1561c:	mov	r3, r8
   15620:	ldr	r1, [sp, #84]	; 0x54
   15624:	str	ip, [sp]
   15628:	ldr	r2, [sp, #180]	; 0xb4
   1562c:	ldr	ip, [sp, #188]	; 0xbc
   15630:	ldr	r0, [sp, #184]	; 0xb8
   15634:	str	r2, [sp, #4]
   15638:	ldr	r2, [sp, #28]
   1563c:	str	ip, [sp, #12]
   15640:	ldr	ip, [sp, #192]	; 0xc0
   15644:	str	r0, [sp, #8]
   15648:	mov	r0, fp
   1564c:	str	ip, [sp, #16]
   15650:	bl	13d04 <__assert_fail@plt+0x297c>
   15654:	mov	r4, r0
   15658:	b	14780 <__assert_fail@plt+0x33f8>
   1565c:	mov	r6, r3
   15660:	str	r3, [sp, #40]	; 0x28
   15664:	b	146f0 <__assert_fail@plt+0x3368>
   15668:	mov	r3, #2
   1566c:	str	r3, [sp, #176]	; 0xb0
   15670:	b	14730 <__assert_fail@plt+0x33a8>
   15674:	ldr	r2, [sp, #60]	; 0x3c
   15678:	b	15190 <__assert_fail@plt+0x3e08>
   1567c:	mov	r3, #5
   15680:	mov	fp, r9
   15684:	str	r3, [sp, #176]	; 0xb0
   15688:	b	14744 <__assert_fail@plt+0x33bc>
   1568c:	mov	r1, #1
   15690:	mov	r9, #0
   15694:	mov	r3, r9
   15698:	mov	r2, r9
   1569c:	str	r1, [sp, #32]
   156a0:	str	sl, [sp, #84]	; 0x54
   156a4:	b	144cc <__assert_fail@plt+0x3144>
   156a8:	mov	r3, #0
   156ac:	mov	r2, #1
   156b0:	mov	r9, r3
   156b4:	mov	r4, r3
   156b8:	str	r2, [sp, #32]
   156bc:	strd	r2, [sp, #44]	; 0x2c
   156c0:	strd	r2, [sp, #56]	; 0x38
   156c4:	str	r3, [sp, #80]	; 0x50
   156c8:	str	r3, [sp, #84]	; 0x54
   156cc:	str	r3, [sp, #88]	; 0x58
   156d0:	movw	r3, #40448	; 0x9e00
   156d4:	movt	r3, #1
   156d8:	str	r2, [sp, #52]	; 0x34
   156dc:	str	r2, [sp, #64]	; 0x40
   156e0:	str	r2, [sp, #68]	; 0x44
   156e4:	str	r3, [sp, #72]	; 0x48
   156e8:	b	13e28 <__assert_fail@plt+0x2aa0>
   156ec:	bl	11370 <abort@plt>
   156f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   156f4:	mov	r4, r0
   156f8:	mov	r5, r3
   156fc:	strd	r6, [sp, #8]
   15700:	movw	r7, #45360	; 0xb130
   15704:	movt	r7, #2
   15708:	strd	r8, [sp, #16]
   1570c:	strd	sl, [sp, #24]
   15710:	mov	sl, r1
   15714:	mov	fp, r2
   15718:	str	lr, [sp, #32]
   1571c:	sub	sp, sp, #60	; 0x3c
   15720:	bl	11280 <__errno_location@plt>
   15724:	mov	r8, r0
   15728:	cmn	r4, #-2147483647	; 0x80000001
   1572c:	ldr	r6, [r7]
   15730:	movne	r0, #0
   15734:	moveq	r0, #1
   15738:	ldr	r3, [r8]
   1573c:	orrs	r0, r0, r4, lsr #31
   15740:	str	r3, [sp, #28]
   15744:	bne	158d4 <__assert_fail@plt+0x454c>
   15748:	ldr	r3, [r7, #4]
   1574c:	cmp	r3, r4
   15750:	bgt	157b0 <__assert_fail@plt+0x4428>
   15754:	add	r1, r7, #8
   15758:	sub	r2, r4, r3
   1575c:	str	r3, [sp, #52]	; 0x34
   15760:	cmp	r6, r1
   15764:	add	r2, r2, #1
   15768:	beq	158ac <__assert_fail@plt+0x4524>
   1576c:	mov	r1, #8
   15770:	mov	r0, r6
   15774:	mvn	r3, #-2147483648	; 0x80000000
   15778:	str	r1, [sp]
   1577c:	add	r1, sp, #52	; 0x34
   15780:	bl	18420 <__assert_fail@plt+0x7098>
   15784:	mov	r6, r0
   15788:	str	r0, [r7]
   1578c:	ldr	r0, [r7, #4]
   15790:	mov	r1, #0
   15794:	ldr	r2, [sp, #52]	; 0x34
   15798:	sub	r2, r2, r0
   1579c:	add	r0, r6, r0, lsl #3
   157a0:	lsl	r2, r2, #3
   157a4:	bl	112a4 <memset@plt>
   157a8:	ldr	r3, [sp, #52]	; 0x34
   157ac:	str	r3, [r7, #4]
   157b0:	ldr	r1, [r5, #4]
   157b4:	add	r0, r6, r4, lsl #3
   157b8:	add	ip, r5, #8
   157bc:	mov	r3, fp
   157c0:	mov	r2, sl
   157c4:	ldr	r7, [r0, #4]
   157c8:	str	r0, [sp, #36]	; 0x24
   157cc:	str	ip, [sp, #40]	; 0x28
   157d0:	orr	r0, r1, #1
   157d4:	ldr	r9, [r6, r4, lsl #3]
   157d8:	str	ip, [sp, #8]
   157dc:	ldr	lr, [r5, #44]	; 0x2c
   157e0:	str	r0, [sp, #4]
   157e4:	ldr	ip, [r5]
   157e8:	mov	r1, r9
   157ec:	str	ip, [sp, #32]
   157f0:	ldr	ip, [r5, #40]	; 0x28
   157f4:	str	ip, [sp, #12]
   157f8:	ldr	ip, [sp, #32]
   157fc:	str	lr, [sp, #16]
   15800:	str	r0, [sp, #44]	; 0x2c
   15804:	mov	r0, r7
   15808:	str	ip, [sp]
   1580c:	bl	13d04 <__assert_fail@plt+0x297c>
   15810:	cmp	r9, r0
   15814:	bhi	15884 <__assert_fail@plt+0x44fc>
   15818:	add	r9, r0, #1
   1581c:	movw	r3, #45556	; 0xb1f4
   15820:	movt	r3, #2
   15824:	cmp	r7, r3
   15828:	str	r9, [r6, r4, lsl #3]
   1582c:	beq	15838 <__assert_fail@plt+0x44b0>
   15830:	mov	r0, r7
   15834:	bl	13638 <__assert_fail@plt+0x22b0>
   15838:	mov	r0, r9
   1583c:	bl	1817c <__assert_fail@plt+0x6df4>
   15840:	ldr	ip, [r5]
   15844:	mov	r3, fp
   15848:	mov	r2, sl
   1584c:	mov	r1, r9
   15850:	mov	r7, r0
   15854:	ldr	lr, [sp, #36]	; 0x24
   15858:	ldr	r4, [r5, #40]	; 0x28
   1585c:	str	r0, [lr, #4]
   15860:	ldr	lr, [r5, #44]	; 0x2c
   15864:	str	ip, [sp]
   15868:	ldr	ip, [sp, #44]	; 0x2c
   1586c:	str	ip, [sp, #4]
   15870:	ldr	ip, [sp, #40]	; 0x28
   15874:	str	r4, [sp, #12]
   15878:	str	lr, [sp, #16]
   1587c:	str	ip, [sp, #8]
   15880:	bl	13d04 <__assert_fail@plt+0x297c>
   15884:	ldr	r3, [sp, #28]
   15888:	mov	r0, r7
   1588c:	str	r3, [r8]
   15890:	add	sp, sp, #60	; 0x3c
   15894:	ldrd	r4, [sp]
   15898:	ldrd	r6, [sp, #8]
   1589c:	ldrd	r8, [sp, #16]
   158a0:	ldrd	sl, [sp, #24]
   158a4:	add	sp, sp, #32
   158a8:	pop	{pc}		; (ldr pc, [sp], #4)
   158ac:	mov	r1, #8
   158b0:	mvn	r3, #-2147483648	; 0x80000000
   158b4:	str	r1, [sp]
   158b8:	add	r1, sp, #52	; 0x34
   158bc:	bl	18420 <__assert_fail@plt+0x7098>
   158c0:	ldrd	r2, [r7, #8]
   158c4:	mov	r6, r0
   158c8:	str	r0, [r7]
   158cc:	strd	r2, [r0]
   158d0:	b	1578c <__assert_fail@plt+0x4404>
   158d4:	bl	11370 <abort@plt>
   158d8:	strd	r4, [sp, #-16]!
   158dc:	mov	r5, r0
   158e0:	str	r6, [sp, #8]
   158e4:	str	lr, [sp, #12]
   158e8:	bl	11280 <__errno_location@plt>
   158ec:	mov	r4, r0
   158f0:	cmp	r5, #0
   158f4:	ldr	r0, [pc, #32]	; 1591c <__assert_fail@plt+0x4594>
   158f8:	mov	r1, #48	; 0x30
   158fc:	movne	r0, r5
   15900:	ldr	r6, [r4]
   15904:	bl	185c0 <__assert_fail@plt+0x7238>
   15908:	str	r6, [r4]
   1590c:	ldrd	r4, [sp]
   15910:	ldr	r6, [sp, #8]
   15914:	add	sp, sp, #12
   15918:	pop	{pc}		; (ldr pc, [sp], #4)
   1591c:	strdeq	fp, [r2], -r4
   15920:	ldr	r3, [pc, #12]	; 15934 <__assert_fail@plt+0x45ac>
   15924:	cmp	r0, #0
   15928:	moveq	r0, r3
   1592c:	ldr	r0, [r0]
   15930:	bx	lr
   15934:	strdeq	fp, [r2], -r4
   15938:	ldr	r3, [pc, #12]	; 1594c <__assert_fail@plt+0x45c4>
   1593c:	cmp	r0, #0
   15940:	moveq	r0, r3
   15944:	str	r1, [r0]
   15948:	bx	lr
   1594c:	strdeq	fp, [r2], -r4
   15950:	ldr	r3, [pc, #52]	; 1598c <__assert_fail@plt+0x4604>
   15954:	cmp	r0, #0
   15958:	push	{lr}		; (str lr, [sp, #-4]!)
   1595c:	lsr	lr, r1, #5
   15960:	and	r1, r1, #31
   15964:	moveq	r0, r3
   15968:	add	r3, r0, #8
   1596c:	ldr	ip, [r3, lr, lsl #2]
   15970:	lsr	r0, ip, r1
   15974:	eor	r2, r2, r0
   15978:	and	r0, r0, #1
   1597c:	and	r2, r2, #1
   15980:	eor	r1, ip, r2, lsl r1
   15984:	str	r1, [r3, lr, lsl #2]
   15988:	pop	{pc}		; (ldr pc, [sp], #4)
   1598c:	strdeq	fp, [r2], -r4
   15990:	ldr	r3, [pc, #16]	; 159a8 <__assert_fail@plt+0x4620>
   15994:	cmp	r0, #0
   15998:	movne	r3, r0
   1599c:	ldr	r0, [r3, #4]
   159a0:	str	r1, [r3, #4]
   159a4:	bx	lr
   159a8:	strdeq	fp, [r2], -r4
   159ac:	ldr	r3, [pc, #48]	; 159e4 <__assert_fail@plt+0x465c>
   159b0:	cmp	r0, #0
   159b4:	mov	ip, #10
   159b8:	moveq	r0, r3
   159bc:	cmp	r2, #0
   159c0:	cmpne	r1, #0
   159c4:	str	ip, [r0]
   159c8:	beq	159d8 <__assert_fail@plt+0x4650>
   159cc:	str	r1, [r0, #40]	; 0x28
   159d0:	str	r2, [r0, #44]	; 0x2c
   159d4:	bx	lr
   159d8:	str	r4, [sp, #-8]!
   159dc:	str	lr, [sp, #4]
   159e0:	bl	11370 <abort@plt>
   159e4:	strdeq	fp, [r2], -r4
   159e8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   159ec:	strd	r6, [sp, #8]
   159f0:	mov	r7, r0
   159f4:	mov	r6, r1
   159f8:	strd	r8, [sp, #16]
   159fc:	mov	r8, r2
   15a00:	mov	r9, r3
   15a04:	str	lr, [sp, #24]
   15a08:	sub	sp, sp, #28
   15a0c:	ldr	r4, [sp, #56]	; 0x38
   15a10:	ldr	ip, [pc, #104]	; 15a80 <__assert_fail@plt+0x46f8>
   15a14:	cmp	r4, #0
   15a18:	moveq	r4, ip
   15a1c:	bl	11280 <__errno_location@plt>
   15a20:	ldr	ip, [r4, #44]	; 0x2c
   15a24:	mov	r5, r0
   15a28:	mov	r1, r6
   15a2c:	add	lr, r4, #8
   15a30:	mov	r3, r9
   15a34:	ldr	r6, [r5]
   15a38:	mov	r2, r8
   15a3c:	mov	r0, r7
   15a40:	str	ip, [sp, #16]
   15a44:	ldr	ip, [r4, #40]	; 0x28
   15a48:	str	lr, [sp, #8]
   15a4c:	str	ip, [sp, #12]
   15a50:	ldr	ip, [r4, #4]
   15a54:	str	ip, [sp, #4]
   15a58:	ldr	ip, [r4]
   15a5c:	str	ip, [sp]
   15a60:	bl	13d04 <__assert_fail@plt+0x297c>
   15a64:	str	r6, [r5]
   15a68:	add	sp, sp, #28
   15a6c:	ldrd	r4, [sp]
   15a70:	ldrd	r6, [sp, #8]
   15a74:	ldrd	r8, [sp, #16]
   15a78:	add	sp, sp, #24
   15a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a80:	strdeq	fp, [r2], -r4
   15a84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15a88:	cmp	r2, #0
   15a8c:	ldr	r4, [pc, #192]	; 15b54 <__assert_fail@plt+0x47cc>
   15a90:	movne	r4, r2
   15a94:	strd	r6, [sp, #8]
   15a98:	strd	r8, [sp, #16]
   15a9c:	mov	r9, r1
   15aa0:	mov	r8, r0
   15aa4:	strd	sl, [sp, #24]
   15aa8:	str	lr, [sp, #32]
   15aac:	sub	sp, sp, #36	; 0x24
   15ab0:	bl	11280 <__errno_location@plt>
   15ab4:	ldr	r5, [r4, #4]
   15ab8:	mov	r6, r0
   15abc:	add	r7, r4, #8
   15ac0:	mov	r1, #0
   15ac4:	mov	r3, r9
   15ac8:	ldr	ip, [r4, #44]	; 0x2c
   15acc:	mov	r2, r8
   15ad0:	mov	r0, r1
   15ad4:	ldr	sl, [r6]
   15ad8:	orr	r5, r5, #1
   15adc:	str	ip, [sp, #16]
   15ae0:	ldr	ip, [r4, #40]	; 0x28
   15ae4:	stmib	sp, {r5, r7, ip}
   15ae8:	ldr	ip, [r4]
   15aec:	str	ip, [sp]
   15af0:	bl	13d04 <__assert_fail@plt+0x297c>
   15af4:	add	r1, r0, #1
   15af8:	mov	r0, r1
   15afc:	str	r1, [sp, #28]
   15b00:	bl	1817c <__assert_fail@plt+0x6df4>
   15b04:	ldr	ip, [r4, #44]	; 0x2c
   15b08:	mov	fp, r0
   15b0c:	mov	r3, r9
   15b10:	mov	r2, r8
   15b14:	ldr	r1, [sp, #28]
   15b18:	str	ip, [sp, #16]
   15b1c:	ldr	ip, [r4, #40]	; 0x28
   15b20:	stmib	sp, {r5, r7, ip}
   15b24:	ldr	ip, [r4]
   15b28:	str	ip, [sp]
   15b2c:	bl	13d04 <__assert_fail@plt+0x297c>
   15b30:	mov	r0, fp
   15b34:	str	sl, [r6]
   15b38:	add	sp, sp, #36	; 0x24
   15b3c:	ldrd	r4, [sp]
   15b40:	ldrd	r6, [sp, #8]
   15b44:	ldrd	r8, [sp, #16]
   15b48:	ldrd	sl, [sp, #24]
   15b4c:	add	sp, sp, #32
   15b50:	pop	{pc}		; (ldr pc, [sp], #4)
   15b54:	strdeq	fp, [r2], -r4
   15b58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15b5c:	cmp	r3, #0
   15b60:	ldr	r4, [pc, #220]	; 15c44 <__assert_fail@plt+0x48bc>
   15b64:	movne	r4, r3
   15b68:	strd	r6, [sp, #8]
   15b6c:	mov	r6, r2
   15b70:	strd	r8, [sp, #16]
   15b74:	mov	r9, r0
   15b78:	strd	sl, [sp, #24]
   15b7c:	mov	sl, r1
   15b80:	str	lr, [sp, #32]
   15b84:	sub	sp, sp, #44	; 0x2c
   15b88:	bl	11280 <__errno_location@plt>
   15b8c:	ldr	r5, [r4, #4]
   15b90:	mov	r7, r0
   15b94:	mov	r1, #0
   15b98:	add	r8, r4, #8
   15b9c:	mov	r3, sl
   15ba0:	ldr	ip, [r4, #44]	; 0x2c
   15ba4:	mov	r2, r9
   15ba8:	mov	r0, r1
   15bac:	ldr	lr, [r7]
   15bb0:	cmp	r6, r1
   15bb4:	orreq	r5, r5, #1
   15bb8:	str	ip, [sp, #16]
   15bbc:	ldr	ip, [r4, #40]	; 0x28
   15bc0:	stmib	sp, {r5, r8, ip}
   15bc4:	ldr	ip, [r4]
   15bc8:	str	lr, [sp, #28]
   15bcc:	str	ip, [sp]
   15bd0:	bl	13d04 <__assert_fail@plt+0x297c>
   15bd4:	add	r1, r0, #1
   15bd8:	mov	fp, r0
   15bdc:	mov	r0, r1
   15be0:	str	r1, [sp, #36]	; 0x24
   15be4:	bl	1817c <__assert_fail@plt+0x6df4>
   15be8:	ldr	ip, [r4, #44]	; 0x2c
   15bec:	mov	r3, sl
   15bf0:	mov	r2, r9
   15bf4:	ldr	r1, [sp, #36]	; 0x24
   15bf8:	str	ip, [sp, #16]
   15bfc:	ldr	ip, [r4, #40]	; 0x28
   15c00:	str	r0, [sp, #32]
   15c04:	stmib	sp, {r5, r8, ip}
   15c08:	ldr	ip, [r4]
   15c0c:	str	ip, [sp]
   15c10:	bl	13d04 <__assert_fail@plt+0x297c>
   15c14:	ldr	lr, [sp, #28]
   15c18:	cmp	r6, #0
   15c1c:	ldr	r0, [sp, #32]
   15c20:	str	lr, [r7]
   15c24:	strne	fp, [r6]
   15c28:	add	sp, sp, #44	; 0x2c
   15c2c:	ldrd	r4, [sp]
   15c30:	ldrd	r6, [sp, #8]
   15c34:	ldrd	r8, [sp, #16]
   15c38:	ldrd	sl, [sp, #24]
   15c3c:	add	sp, sp, #32
   15c40:	pop	{pc}		; (ldr pc, [sp], #4)
   15c44:	strdeq	fp, [r2], -r4
   15c48:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c4c:	movw	r5, #45360	; 0xb130
   15c50:	movt	r5, #2
   15c54:	ldr	r3, [r5, #4]
   15c58:	strd	r6, [sp, #8]
   15c5c:	str	r8, [sp, #16]
   15c60:	str	lr, [sp, #20]
   15c64:	ldr	r7, [r5]
   15c68:	cmp	r3, #1
   15c6c:	ble	15c90 <__assert_fail@plt+0x4908>
   15c70:	mov	r4, #1
   15c74:	add	r6, r7, #4
   15c78:	ldr	r0, [r6, r4, lsl #3]
   15c7c:	add	r4, r4, #1
   15c80:	bl	13638 <__assert_fail@plt+0x22b0>
   15c84:	ldr	r3, [r5, #4]
   15c88:	cmp	r3, r4
   15c8c:	bgt	15c78 <__assert_fail@plt+0x48f0>
   15c90:	ldr	r0, [r7, #4]
   15c94:	movw	r4, #45556	; 0xb1f4
   15c98:	movt	r4, #2
   15c9c:	cmp	r0, r4
   15ca0:	beq	15cb4 <__assert_fail@plt+0x492c>
   15ca4:	bl	13638 <__assert_fail@plt+0x22b0>
   15ca8:	mov	r3, #256	; 0x100
   15cac:	str	r3, [r5, #8]
   15cb0:	str	r4, [r5, #12]
   15cb4:	ldr	r4, [pc, #44]	; 15ce8 <__assert_fail@plt+0x4960>
   15cb8:	cmp	r7, r4
   15cbc:	beq	15ccc <__assert_fail@plt+0x4944>
   15cc0:	mov	r0, r7
   15cc4:	bl	13638 <__assert_fail@plt+0x22b0>
   15cc8:	str	r4, [r5]
   15ccc:	mov	r3, #1
   15cd0:	ldrd	r6, [sp, #8]
   15cd4:	str	r3, [r5, #4]
   15cd8:	ldrd	r4, [sp]
   15cdc:	ldr	r8, [sp, #16]
   15ce0:	add	sp, sp, #20
   15ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ce8:	andeq	fp, r2, r8, lsr r1
   15cec:	ldr	r3, [pc, #4]	; 15cf8 <__assert_fail@plt+0x4970>
   15cf0:	mvn	r2, #0
   15cf4:	b	156f0 <__assert_fail@plt+0x4368>
   15cf8:	strdeq	fp, [r2], -r4
   15cfc:	ldr	r3, [pc]	; 15d04 <__assert_fail@plt+0x497c>
   15d00:	b	156f0 <__assert_fail@plt+0x4368>
   15d04:	strdeq	fp, [r2], -r4
   15d08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15d0c:	movw	r4, #45360	; 0xb130
   15d10:	movt	r4, #2
   15d14:	strd	r6, [sp, #8]
   15d18:	strd	r8, [sp, #16]
   15d1c:	strd	sl, [sp, #24]
   15d20:	mov	sl, r0
   15d24:	str	lr, [sp, #32]
   15d28:	sub	sp, sp, #44	; 0x2c
   15d2c:	bl	11280 <__errno_location@plt>
   15d30:	ldr	r3, [r0]
   15d34:	mov	r8, r0
   15d38:	ldr	r2, [r4, #4]
   15d3c:	ldr	r5, [r4]
   15d40:	str	r3, [sp, #28]
   15d44:	cmp	r2, #0
   15d48:	bgt	15da4 <__assert_fail@plt+0x4a1c>
   15d4c:	add	r3, r4, #8
   15d50:	str	r2, [sp, #36]	; 0x24
   15d54:	rsb	r2, r2, #1
   15d58:	cmp	r5, r3
   15d5c:	beq	15e70 <__assert_fail@plt+0x4ae8>
   15d60:	mov	r1, #8
   15d64:	mov	r0, r5
   15d68:	mvn	r3, #-2147483648	; 0x80000000
   15d6c:	str	r1, [sp]
   15d70:	add	r1, sp, #36	; 0x24
   15d74:	bl	18420 <__assert_fail@plt+0x7098>
   15d78:	mov	r5, r0
   15d7c:	str	r0, [r4]
   15d80:	ldr	r0, [r4, #4]
   15d84:	mov	r1, #0
   15d88:	ldr	r2, [sp, #36]	; 0x24
   15d8c:	sub	r2, r2, r0
   15d90:	add	r0, r5, r0, lsl #3
   15d94:	lsl	r2, r2, #3
   15d98:	bl	112a4 <memset@plt>
   15d9c:	ldr	r3, [sp, #36]	; 0x24
   15da0:	str	r3, [r4, #4]
   15da4:	movw	r4, #45556	; 0xb1f4
   15da8:	movt	r4, #2
   15dac:	ldr	r9, [r5]
   15db0:	add	fp, r4, #264	; 0x108
   15db4:	mvn	r3, #0
   15db8:	ldr	r7, [r4, #260]	; 0x104
   15dbc:	mov	r2, sl
   15dc0:	ldr	r6, [r5, #4]
   15dc4:	str	fp, [sp, #8]
   15dc8:	mov	r1, r9
   15dcc:	ldr	ip, [r4, #256]	; 0x100
   15dd0:	orr	r7, r7, #1
   15dd4:	ldr	lr, [r4, #300]	; 0x12c
   15dd8:	mov	r0, r6
   15ddc:	str	ip, [sp]
   15de0:	str	r7, [sp, #4]
   15de4:	str	lr, [sp, #16]
   15de8:	ldr	ip, [r4, #296]	; 0x128
   15dec:	str	ip, [sp, #12]
   15df0:	bl	13d04 <__assert_fail@plt+0x297c>
   15df4:	cmp	r9, r0
   15df8:	bhi	15e48 <__assert_fail@plt+0x4ac0>
   15dfc:	add	r9, r0, #1
   15e00:	cmp	r6, r4
   15e04:	str	r9, [r5]
   15e08:	beq	15e14 <__assert_fail@plt+0x4a8c>
   15e0c:	mov	r0, r6
   15e10:	bl	13638 <__assert_fail@plt+0x22b0>
   15e14:	mov	r0, r9
   15e18:	bl	1817c <__assert_fail@plt+0x6df4>
   15e1c:	ldr	r3, [r4, #256]	; 0x100
   15e20:	mov	r2, sl
   15e24:	mov	r1, r9
   15e28:	mov	r6, r0
   15e2c:	ldr	lr, [r4, #296]	; 0x128
   15e30:	ldr	ip, [r4, #300]	; 0x12c
   15e34:	str	r0, [r5, #4]
   15e38:	stm	sp, {r3, r7, fp, lr}
   15e3c:	mvn	r3, #0
   15e40:	str	ip, [sp, #16]
   15e44:	bl	13d04 <__assert_fail@plt+0x297c>
   15e48:	ldr	r3, [sp, #28]
   15e4c:	mov	r0, r6
   15e50:	str	r3, [r8]
   15e54:	add	sp, sp, #44	; 0x2c
   15e58:	ldrd	r4, [sp]
   15e5c:	ldrd	r6, [sp, #8]
   15e60:	ldrd	r8, [sp, #16]
   15e64:	ldrd	sl, [sp, #24]
   15e68:	add	sp, sp, #32
   15e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e70:	mov	r0, #8
   15e74:	mvn	r3, #-2147483648	; 0x80000000
   15e78:	add	r1, sp, #36	; 0x24
   15e7c:	str	r0, [sp]
   15e80:	mov	r0, #0
   15e84:	bl	18420 <__assert_fail@plt+0x7098>
   15e88:	ldrd	r2, [r4, #8]
   15e8c:	mov	r5, r0
   15e90:	str	r0, [r4]
   15e94:	strd	r2, [r0]
   15e98:	b	15d80 <__assert_fail@plt+0x49f8>
   15e9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15ea0:	movw	r4, #45360	; 0xb130
   15ea4:	movt	r4, #2
   15ea8:	strd	r6, [sp, #8]
   15eac:	strd	r8, [sp, #16]
   15eb0:	strd	sl, [sp, #24]
   15eb4:	mov	sl, r0
   15eb8:	mov	fp, r1
   15ebc:	str	lr, [sp, #32]
   15ec0:	sub	sp, sp, #44	; 0x2c
   15ec4:	bl	11280 <__errno_location@plt>
   15ec8:	ldr	r3, [r0]
   15ecc:	mov	r8, r0
   15ed0:	ldr	r2, [r4, #4]
   15ed4:	ldr	r5, [r4]
   15ed8:	str	r3, [sp, #28]
   15edc:	cmp	r2, #0
   15ee0:	bgt	15f3c <__assert_fail@plt+0x4bb4>
   15ee4:	add	r3, r4, #8
   15ee8:	str	r2, [sp, #36]	; 0x24
   15eec:	rsb	r2, r2, #1
   15ef0:	cmp	r5, r3
   15ef4:	beq	16018 <__assert_fail@plt+0x4c90>
   15ef8:	mov	r1, #8
   15efc:	mov	r0, r5
   15f00:	mvn	r3, #-2147483648	; 0x80000000
   15f04:	str	r1, [sp]
   15f08:	add	r1, sp, #36	; 0x24
   15f0c:	bl	18420 <__assert_fail@plt+0x7098>
   15f10:	mov	r5, r0
   15f14:	str	r0, [r4]
   15f18:	ldr	r0, [r4, #4]
   15f1c:	mov	r1, #0
   15f20:	ldr	r2, [sp, #36]	; 0x24
   15f24:	sub	r2, r2, r0
   15f28:	add	r0, r5, r0, lsl #3
   15f2c:	lsl	r2, r2, #3
   15f30:	bl	112a4 <memset@plt>
   15f34:	ldr	r3, [sp, #36]	; 0x24
   15f38:	str	r3, [r4, #4]
   15f3c:	movw	r4, #45556	; 0xb1f4
   15f40:	movt	r4, #2
   15f44:	ldr	r9, [r5]
   15f48:	add	r0, r4, #264	; 0x108
   15f4c:	mov	r3, fp
   15f50:	ldr	r7, [r4, #260]	; 0x104
   15f54:	mov	r2, sl
   15f58:	ldr	r6, [r5, #4]
   15f5c:	str	r0, [sp, #8]
   15f60:	mov	r1, r9
   15f64:	ldr	ip, [r4, #256]	; 0x100
   15f68:	orr	r7, r7, #1
   15f6c:	ldr	lr, [r4, #300]	; 0x12c
   15f70:	mov	r0, r6
   15f74:	str	ip, [sp]
   15f78:	str	r7, [sp, #4]
   15f7c:	str	lr, [sp, #16]
   15f80:	ldr	ip, [r4, #296]	; 0x128
   15f84:	str	ip, [sp, #12]
   15f88:	bl	13d04 <__assert_fail@plt+0x297c>
   15f8c:	cmp	r9, r0
   15f90:	bhi	15ff0 <__assert_fail@plt+0x4c68>
   15f94:	add	r9, r0, #1
   15f98:	cmp	r6, r4
   15f9c:	str	r9, [r5]
   15fa0:	beq	15fac <__assert_fail@plt+0x4c24>
   15fa4:	mov	r0, r6
   15fa8:	bl	13638 <__assert_fail@plt+0x22b0>
   15fac:	mov	r0, r9
   15fb0:	bl	1817c <__assert_fail@plt+0x6df4>
   15fb4:	ldr	ip, [r4, #256]	; 0x100
   15fb8:	mov	r1, r9
   15fbc:	mov	r3, fp
   15fc0:	mov	r2, sl
   15fc4:	mov	r6, r0
   15fc8:	ldr	r9, [r4, #296]	; 0x128
   15fcc:	ldr	lr, [r4, #300]	; 0x12c
   15fd0:	str	r0, [r5, #4]
   15fd4:	str	ip, [sp]
   15fd8:	ldr	ip, [pc, #100]	; 16044 <__assert_fail@plt+0x4cbc>
   15fdc:	str	r7, [sp, #4]
   15fe0:	str	ip, [sp, #8]
   15fe4:	str	r9, [sp, #12]
   15fe8:	str	lr, [sp, #16]
   15fec:	bl	13d04 <__assert_fail@plt+0x297c>
   15ff0:	ldr	r3, [sp, #28]
   15ff4:	mov	r0, r6
   15ff8:	str	r3, [r8]
   15ffc:	add	sp, sp, #44	; 0x2c
   16000:	ldrd	r4, [sp]
   16004:	ldrd	r6, [sp, #8]
   16008:	ldrd	r8, [sp, #16]
   1600c:	ldrd	sl, [sp, #24]
   16010:	add	sp, sp, #32
   16014:	pop	{pc}		; (ldr pc, [sp], #4)
   16018:	mov	r0, #8
   1601c:	mvn	r3, #-2147483648	; 0x80000000
   16020:	add	r1, sp, #36	; 0x24
   16024:	str	r0, [sp]
   16028:	mov	r0, #0
   1602c:	bl	18420 <__assert_fail@plt+0x7098>
   16030:	ldrd	r2, [r4, #8]
   16034:	mov	r5, r0
   16038:	str	r0, [r4]
   1603c:	strd	r2, [r0]
   16040:	b	15f18 <__assert_fail@plt+0x4b90>
   16044:	strdeq	fp, [r2], -ip
   16048:	strd	r4, [sp, #-20]!	; 0xffffffec
   1604c:	mov	r4, #0
   16050:	mov	r5, #0
   16054:	strd	r6, [sp, #8]
   16058:	cmp	r1, #10
   1605c:	str	lr, [sp, #16]
   16060:	sub	sp, sp, #100	; 0x64
   16064:	strd	r4, [sp, #48]	; 0x30
   16068:	beq	160b0 <__assert_fail@plt+0x4d28>
   1606c:	mov	r3, sp
   16070:	strd	r4, [sp, #8]
   16074:	str	r1, [sp, #48]	; 0x30
   16078:	mov	r1, r2
   1607c:	mvn	r2, #0
   16080:	ldrd	r6, [sp, #48]	; 0x30
   16084:	strd	r6, [sp]
   16088:	strd	r4, [sp, #16]
   1608c:	strd	r4, [sp, #24]
   16090:	strd	r4, [sp, #32]
   16094:	strd	r4, [sp, #40]	; 0x28
   16098:	bl	156f0 <__assert_fail@plt+0x4368>
   1609c:	add	sp, sp, #100	; 0x64
   160a0:	ldrd	r4, [sp]
   160a4:	ldrd	r6, [sp, #8]
   160a8:	add	sp, sp, #16
   160ac:	pop	{pc}		; (ldr pc, [sp], #4)
   160b0:	bl	11370 <abort@plt>
   160b4:	strd	r4, [sp, #-20]!	; 0xffffffec
   160b8:	mov	r4, #0
   160bc:	mov	r5, #0
   160c0:	strd	r6, [sp, #8]
   160c4:	cmp	r1, #10
   160c8:	str	lr, [sp, #16]
   160cc:	sub	sp, sp, #100	; 0x64
   160d0:	strd	r4, [sp, #48]	; 0x30
   160d4:	beq	16120 <__assert_fail@plt+0x4d98>
   160d8:	mov	ip, r2
   160dc:	mov	r2, r3
   160e0:	strd	r4, [sp, #8]
   160e4:	str	r1, [sp, #48]	; 0x30
   160e8:	mov	r3, sp
   160ec:	mov	r1, ip
   160f0:	ldrd	r6, [sp, #48]	; 0x30
   160f4:	strd	r6, [sp]
   160f8:	strd	r4, [sp, #16]
   160fc:	strd	r4, [sp, #24]
   16100:	strd	r4, [sp, #32]
   16104:	strd	r4, [sp, #40]	; 0x28
   16108:	bl	156f0 <__assert_fail@plt+0x4368>
   1610c:	add	sp, sp, #100	; 0x64
   16110:	ldrd	r4, [sp]
   16114:	ldrd	r6, [sp, #8]
   16118:	add	sp, sp, #16
   1611c:	pop	{pc}		; (ldr pc, [sp], #4)
   16120:	bl	11370 <abort@plt>
   16124:	mov	r2, #0
   16128:	mov	r3, #0
   1612c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16130:	strd	r6, [sp, #8]
   16134:	cmp	r0, #10
   16138:	strd	r8, [sp, #16]
   1613c:	strd	sl, [sp, #24]
   16140:	str	lr, [sp, #32]
   16144:	sub	sp, sp, #124	; 0x7c
   16148:	strd	r2, [sp, #72]	; 0x48
   1614c:	strd	r2, [sp, #80]	; 0x50
   16150:	strd	r2, [sp, #88]	; 0x58
   16154:	strd	r2, [sp, #96]	; 0x60
   16158:	strd	r2, [sp, #104]	; 0x68
   1615c:	strd	r2, [sp, #112]	; 0x70
   16160:	beq	16304 <__assert_fail@plt+0x4f7c>
   16164:	mov	r6, r1
   16168:	movw	r4, #45360	; 0xb130
   1616c:	movt	r4, #2
   16170:	str	r0, [sp, #72]	; 0x48
   16174:	ldrd	r0, [sp, #72]	; 0x48
   16178:	strd	r0, [sp, #24]
   1617c:	strd	r2, [sp, #32]
   16180:	strd	r2, [sp, #40]	; 0x28
   16184:	strd	r2, [sp, #48]	; 0x30
   16188:	strd	r2, [sp, #56]	; 0x38
   1618c:	strd	r2, [sp, #64]	; 0x40
   16190:	bl	11280 <__errno_location@plt>
   16194:	mov	r8, r0
   16198:	ldr	r5, [r4]
   1619c:	ldr	r2, [r4, #4]
   161a0:	ldr	r9, [r0]
   161a4:	cmp	r2, #0
   161a8:	bgt	16204 <__assert_fail@plt+0x4e7c>
   161ac:	add	r3, r4, #8
   161b0:	str	r2, [sp, #72]	; 0x48
   161b4:	rsb	r2, r2, #1
   161b8:	cmp	r5, r3
   161bc:	beq	162d8 <__assert_fail@plt+0x4f50>
   161c0:	mov	r3, #8
   161c4:	mov	r0, r5
   161c8:	add	r1, sp, #72	; 0x48
   161cc:	str	r3, [sp]
   161d0:	mvn	r3, #-2147483648	; 0x80000000
   161d4:	bl	18420 <__assert_fail@plt+0x7098>
   161d8:	mov	r5, r0
   161dc:	str	r0, [r4]
   161e0:	ldr	r0, [r4, #4]
   161e4:	mov	r1, #0
   161e8:	ldr	r2, [sp, #72]	; 0x48
   161ec:	sub	r2, r2, r0
   161f0:	add	r0, r5, r0, lsl #3
   161f4:	lsl	r2, r2, #3
   161f8:	bl	112a4 <memset@plt>
   161fc:	ldr	r3, [sp, #72]	; 0x48
   16200:	str	r3, [r4, #4]
   16204:	ldr	sl, [r5]
   16208:	add	r0, sp, #32
   1620c:	mvn	r3, #0
   16210:	mov	r2, r6
   16214:	ldr	r7, [sp, #28]
   16218:	ldr	r4, [r5, #4]
   1621c:	mov	r1, sl
   16220:	str	r0, [sp, #8]
   16224:	ldr	lr, [sp, #24]
   16228:	orr	r7, r7, #1
   1622c:	ldr	ip, [sp, #64]	; 0x40
   16230:	mov	r0, r4
   16234:	ldr	fp, [sp, #68]	; 0x44
   16238:	str	lr, [sp]
   1623c:	str	r7, [sp, #4]
   16240:	str	ip, [sp, #12]
   16244:	str	fp, [sp, #16]
   16248:	bl	13d04 <__assert_fail@plt+0x297c>
   1624c:	cmp	sl, r0
   16250:	bhi	162b4 <__assert_fail@plt+0x4f2c>
   16254:	add	sl, r0, #1
   16258:	movw	r3, #45556	; 0xb1f4
   1625c:	movt	r3, #2
   16260:	cmp	r4, r3
   16264:	str	sl, [r5]
   16268:	beq	16274 <__assert_fail@plt+0x4eec>
   1626c:	mov	r0, r4
   16270:	bl	13638 <__assert_fail@plt+0x22b0>
   16274:	mov	r0, sl
   16278:	bl	1817c <__assert_fail@plt+0x6df4>
   1627c:	ldr	r3, [sp, #24]
   16280:	mov	r2, r6
   16284:	mov	r1, sl
   16288:	mov	r4, r0
   1628c:	ldr	lr, [sp, #64]	; 0x40
   16290:	ldr	ip, [sp, #68]	; 0x44
   16294:	str	r0, [r5, #4]
   16298:	add	r5, sp, #32
   1629c:	stm	sp, {r3, r7}
   162a0:	mvn	r3, #0
   162a4:	str	r5, [sp, #8]
   162a8:	str	lr, [sp, #12]
   162ac:	str	ip, [sp, #16]
   162b0:	bl	13d04 <__assert_fail@plt+0x297c>
   162b4:	mov	r0, r4
   162b8:	str	r9, [r8]
   162bc:	add	sp, sp, #124	; 0x7c
   162c0:	ldrd	r4, [sp]
   162c4:	ldrd	r6, [sp, #8]
   162c8:	ldrd	r8, [sp, #16]
   162cc:	ldrd	sl, [sp, #24]
   162d0:	add	sp, sp, #32
   162d4:	pop	{pc}		; (ldr pc, [sp], #4)
   162d8:	mov	r0, #8
   162dc:	mvn	r3, #-2147483648	; 0x80000000
   162e0:	add	r1, sp, #72	; 0x48
   162e4:	str	r0, [sp]
   162e8:	mov	r0, #0
   162ec:	bl	18420 <__assert_fail@plt+0x7098>
   162f0:	ldrd	r2, [r4, #8]
   162f4:	mov	r5, r0
   162f8:	str	r0, [r4]
   162fc:	strd	r2, [r0]
   16300:	b	161e0 <__assert_fail@plt+0x4e58>
   16304:	bl	11370 <abort@plt>
   16308:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1630c:	cmp	r0, #10
   16310:	strd	r6, [sp, #8]
   16314:	mov	r6, #0
   16318:	mov	r7, #0
   1631c:	strd	r8, [sp, #16]
   16320:	strd	sl, [sp, #24]
   16324:	str	lr, [sp, #32]
   16328:	sub	sp, sp, #124	; 0x7c
   1632c:	strd	r6, [sp, #72]	; 0x48
   16330:	strd	r6, [sp, #80]	; 0x50
   16334:	strd	r6, [sp, #88]	; 0x58
   16338:	strd	r6, [sp, #96]	; 0x60
   1633c:	strd	r6, [sp, #104]	; 0x68
   16340:	strd	r6, [sp, #112]	; 0x70
   16344:	beq	164f0 <__assert_fail@plt+0x5168>
   16348:	mov	sl, r2
   1634c:	movw	r5, #45360	; 0xb130
   16350:	movt	r5, #2
   16354:	str	r0, [sp, #72]	; 0x48
   16358:	mov	r9, r1
   1635c:	ldrd	r2, [sp, #72]	; 0x48
   16360:	strd	r2, [sp, #24]
   16364:	strd	r6, [sp, #32]
   16368:	strd	r6, [sp, #40]	; 0x28
   1636c:	strd	r6, [sp, #48]	; 0x30
   16370:	strd	r6, [sp, #56]	; 0x38
   16374:	strd	r6, [sp, #64]	; 0x40
   16378:	bl	11280 <__errno_location@plt>
   1637c:	mov	r7, r0
   16380:	ldr	r4, [r5]
   16384:	ldr	r2, [r5, #4]
   16388:	ldr	fp, [r0]
   1638c:	cmp	r2, #0
   16390:	bgt	163ec <__assert_fail@plt+0x5064>
   16394:	add	r3, r5, #8
   16398:	str	r2, [sp, #72]	; 0x48
   1639c:	rsb	r2, r2, #1
   163a0:	cmp	r4, r3
   163a4:	beq	164c4 <__assert_fail@plt+0x513c>
   163a8:	mov	r3, #8
   163ac:	mov	r0, r4
   163b0:	add	r1, sp, #72	; 0x48
   163b4:	str	r3, [sp]
   163b8:	mvn	r3, #-2147483648	; 0x80000000
   163bc:	bl	18420 <__assert_fail@plt+0x7098>
   163c0:	mov	r4, r0
   163c4:	str	r0, [r5]
   163c8:	ldr	r0, [r5, #4]
   163cc:	mov	r1, #0
   163d0:	ldr	r2, [sp, #72]	; 0x48
   163d4:	sub	r2, r2, r0
   163d8:	add	r0, r4, r0, lsl #3
   163dc:	lsl	r2, r2, #3
   163e0:	bl	112a4 <memset@plt>
   163e4:	ldr	r3, [sp, #72]	; 0x48
   163e8:	str	r3, [r5, #4]
   163ec:	ldr	ip, [sp, #24]
   163f0:	add	r0, sp, #32
   163f4:	mov	r3, sl
   163f8:	mov	r2, r9
   163fc:	ldr	r6, [sp, #28]
   16400:	ldr	r8, [r4]
   16404:	ldr	r5, [r4, #4]
   16408:	str	ip, [sp]
   1640c:	orr	r6, r6, #1
   16410:	ldr	ip, [sp, #64]	; 0x40
   16414:	mov	r1, r8
   16418:	str	r6, [sp, #4]
   1641c:	ldr	lr, [sp, #68]	; 0x44
   16420:	str	r0, [sp, #8]
   16424:	mov	r0, r5
   16428:	str	ip, [sp, #12]
   1642c:	str	lr, [sp, #16]
   16430:	bl	13d04 <__assert_fail@plt+0x297c>
   16434:	cmp	r8, r0
   16438:	bhi	164a0 <__assert_fail@plt+0x5118>
   1643c:	add	r8, r0, #1
   16440:	movw	r3, #45556	; 0xb1f4
   16444:	movt	r3, #2
   16448:	cmp	r5, r3
   1644c:	str	r8, [r4]
   16450:	beq	1645c <__assert_fail@plt+0x50d4>
   16454:	mov	r0, r5
   16458:	bl	13638 <__assert_fail@plt+0x22b0>
   1645c:	mov	r0, r8
   16460:	bl	1817c <__assert_fail@plt+0x6df4>
   16464:	ldr	lr, [sp, #24]
   16468:	mov	r1, r8
   1646c:	mov	r3, sl
   16470:	mov	r2, r9
   16474:	mov	r5, r0
   16478:	ldr	r8, [sp, #64]	; 0x40
   1647c:	ldr	ip, [sp, #68]	; 0x44
   16480:	str	r0, [r4, #4]
   16484:	str	lr, [sp]
   16488:	add	lr, sp, #32
   1648c:	str	r6, [sp, #4]
   16490:	str	lr, [sp, #8]
   16494:	str	r8, [sp, #12]
   16498:	str	ip, [sp, #16]
   1649c:	bl	13d04 <__assert_fail@plt+0x297c>
   164a0:	mov	r0, r5
   164a4:	str	fp, [r7]
   164a8:	add	sp, sp, #124	; 0x7c
   164ac:	ldrd	r4, [sp]
   164b0:	ldrd	r6, [sp, #8]
   164b4:	ldrd	r8, [sp, #16]
   164b8:	ldrd	sl, [sp, #24]
   164bc:	add	sp, sp, #32
   164c0:	pop	{pc}		; (ldr pc, [sp], #4)
   164c4:	mov	r0, #8
   164c8:	mvn	r3, #-2147483648	; 0x80000000
   164cc:	add	r1, sp, #72	; 0x48
   164d0:	str	r0, [sp]
   164d4:	mov	r0, #0
   164d8:	bl	18420 <__assert_fail@plt+0x7098>
   164dc:	ldrd	r2, [r5, #8]
   164e0:	mov	r4, r0
   164e4:	str	r0, [r5]
   164e8:	strd	r2, [r0]
   164ec:	b	163c8 <__assert_fail@plt+0x5040>
   164f0:	bl	11370 <abort@plt>
   164f4:	ldr	r3, [pc, #492]	; 166e8 <__assert_fail@plt+0x5360>
   164f8:	lsr	ip, r2, #5
   164fc:	and	r2, r2, #31
   16500:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16504:	movw	r5, #45360	; 0xb130
   16508:	movt	r5, #2
   1650c:	strd	r6, [sp, #8]
   16510:	strd	r8, [sp, #16]
   16514:	strd	sl, [sp, #24]
   16518:	mov	sl, r0
   1651c:	mov	fp, r1
   16520:	ldrd	r0, [r3]
   16524:	str	lr, [sp, #32]
   16528:	sub	sp, sp, #92	; 0x5c
   1652c:	ldrd	r8, [r3, #8]
   16530:	add	r6, sp, #48	; 0x30
   16534:	strd	r0, [sp, #40]	; 0x28
   16538:	ldrd	r0, [r3, #16]
   1653c:	strd	r8, [sp, #48]	; 0x30
   16540:	ldrd	r8, [r3, #24]
   16544:	strd	r0, [sp, #56]	; 0x38
   16548:	ldrd	r0, [r3, #32]
   1654c:	strd	r8, [sp, #64]	; 0x40
   16550:	ldrd	r8, [r3, #40]	; 0x28
   16554:	strd	r0, [sp, #72]	; 0x48
   16558:	strd	r8, [sp, #80]	; 0x50
   1655c:	ldr	r3, [r6, ip, lsl #2]
   16560:	mvn	r1, r3, lsr r2
   16564:	and	r1, r1, #1
   16568:	eor	r2, r3, r1, lsl r2
   1656c:	str	r2, [r6, ip, lsl #2]
   16570:	bl	11280 <__errno_location@plt>
   16574:	ldr	r3, [r0]
   16578:	mov	r8, r0
   1657c:	ldr	r2, [r5, #4]
   16580:	ldr	r4, [r5]
   16584:	str	r3, [sp, #28]
   16588:	cmp	r2, #0
   1658c:	bgt	165e8 <__assert_fail@plt+0x5260>
   16590:	add	r3, r5, #8
   16594:	str	r2, [sp, #36]	; 0x24
   16598:	rsb	r2, r2, #1
   1659c:	cmp	r4, r3
   165a0:	beq	166bc <__assert_fail@plt+0x5334>
   165a4:	mov	r1, #8
   165a8:	mov	r0, r4
   165ac:	mvn	r3, #-2147483648	; 0x80000000
   165b0:	str	r1, [sp]
   165b4:	add	r1, sp, #36	; 0x24
   165b8:	bl	18420 <__assert_fail@plt+0x7098>
   165bc:	mov	r4, r0
   165c0:	str	r0, [r5]
   165c4:	ldr	r0, [r5, #4]
   165c8:	mov	r1, #0
   165cc:	ldr	r2, [sp, #36]	; 0x24
   165d0:	sub	r2, r2, r0
   165d4:	add	r0, r4, r0, lsl #3
   165d8:	lsl	r2, r2, #3
   165dc:	bl	112a4 <memset@plt>
   165e0:	ldr	r3, [sp, #36]	; 0x24
   165e4:	str	r3, [r5, #4]
   165e8:	ldr	ip, [sp, #40]	; 0x28
   165ec:	mov	r3, fp
   165f0:	mov	r2, sl
   165f4:	ldr	r7, [sp, #44]	; 0x2c
   165f8:	ldr	r9, [r4]
   165fc:	ldr	r5, [r4, #4]
   16600:	str	ip, [sp]
   16604:	orr	r7, r7, #1
   16608:	ldr	ip, [sp, #80]	; 0x50
   1660c:	mov	r1, r9
   16610:	str	r7, [sp, #4]
   16614:	ldr	lr, [sp, #84]	; 0x54
   16618:	mov	r0, r5
   1661c:	str	r6, [sp, #8]
   16620:	str	ip, [sp, #12]
   16624:	str	lr, [sp, #16]
   16628:	bl	13d04 <__assert_fail@plt+0x297c>
   1662c:	cmp	r9, r0
   16630:	bhi	16694 <__assert_fail@plt+0x530c>
   16634:	add	r9, r0, #1
   16638:	movw	r3, #45556	; 0xb1f4
   1663c:	movt	r3, #2
   16640:	cmp	r5, r3
   16644:	str	r9, [r4]
   16648:	beq	16654 <__assert_fail@plt+0x52cc>
   1664c:	mov	r0, r5
   16650:	bl	13638 <__assert_fail@plt+0x22b0>
   16654:	mov	r0, r9
   16658:	bl	1817c <__assert_fail@plt+0x6df4>
   1665c:	mov	r1, r9
   16660:	ldr	ip, [sp, #40]	; 0x28
   16664:	mov	r3, fp
   16668:	mov	r2, sl
   1666c:	mov	r5, r0
   16670:	ldr	r9, [sp, #80]	; 0x50
   16674:	ldr	lr, [sp, #84]	; 0x54
   16678:	str	r0, [r4, #4]
   1667c:	str	ip, [sp]
   16680:	str	r7, [sp, #4]
   16684:	str	r6, [sp, #8]
   16688:	str	r9, [sp, #12]
   1668c:	str	lr, [sp, #16]
   16690:	bl	13d04 <__assert_fail@plt+0x297c>
   16694:	ldr	r3, [sp, #28]
   16698:	mov	r0, r5
   1669c:	str	r3, [r8]
   166a0:	add	sp, sp, #92	; 0x5c
   166a4:	ldrd	r4, [sp]
   166a8:	ldrd	r6, [sp, #8]
   166ac:	ldrd	r8, [sp, #16]
   166b0:	ldrd	sl, [sp, #24]
   166b4:	add	sp, sp, #32
   166b8:	pop	{pc}		; (ldr pc, [sp], #4)
   166bc:	mov	r0, #8
   166c0:	mvn	r3, #-2147483648	; 0x80000000
   166c4:	add	r1, sp, #36	; 0x24
   166c8:	str	r0, [sp]
   166cc:	mov	r0, #0
   166d0:	bl	18420 <__assert_fail@plt+0x7098>
   166d4:	ldrd	r2, [r5, #8]
   166d8:	mov	r4, r0
   166dc:	str	r0, [r5]
   166e0:	strd	r2, [r0]
   166e4:	b	165c4 <__assert_fail@plt+0x523c>
   166e8:	strdeq	fp, [r2], -r4
   166ec:	ldr	ip, [pc, #476]	; 168d0 <__assert_fail@plt+0x5548>
   166f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   166f4:	movw	r4, #45360	; 0xb130
   166f8:	movt	r4, #2
   166fc:	ldrd	r2, [ip, #8]
   16700:	strd	r6, [sp, #8]
   16704:	lsr	r7, r1, #5
   16708:	mov	r6, r0
   1670c:	strd	r8, [sp, #16]
   16710:	str	lr, [sp, #32]
   16714:	and	lr, r1, #31
   16718:	ldrd	r0, [ip]
   1671c:	strd	sl, [sp, #24]
   16720:	sub	sp, sp, #84	; 0x54
   16724:	add	r5, sp, #40	; 0x28
   16728:	strd	r0, [sp, #32]
   1672c:	strd	r2, [sp, #40]	; 0x28
   16730:	ldrd	r0, [ip, #16]
   16734:	ldrd	r2, [ip, #24]
   16738:	strd	r0, [sp, #48]	; 0x30
   1673c:	ldrd	r0, [ip, #32]
   16740:	strd	r2, [sp, #56]	; 0x38
   16744:	ldrd	r2, [ip, #40]	; 0x28
   16748:	strd	r0, [sp, #64]	; 0x40
   1674c:	strd	r2, [sp, #72]	; 0x48
   16750:	ldr	r1, [r5, r7, lsl #2]
   16754:	mvn	r3, r1, lsr lr
   16758:	and	r3, r3, #1
   1675c:	eor	r1, r1, r3, lsl lr
   16760:	str	r1, [r5, r7, lsl #2]
   16764:	bl	11280 <__errno_location@plt>
   16768:	mov	r9, r0
   1676c:	ldr	sl, [r0]
   16770:	ldr	r2, [r4, #4]
   16774:	ldr	r7, [r4]
   16778:	cmp	r2, #0
   1677c:	bgt	167d8 <__assert_fail@plt+0x5450>
   16780:	add	r3, r4, #8
   16784:	str	r2, [sp, #28]
   16788:	rsb	r2, r2, #1
   1678c:	cmp	r7, r3
   16790:	beq	168a4 <__assert_fail@plt+0x551c>
   16794:	mov	r1, #8
   16798:	mov	r0, r7
   1679c:	mvn	r3, #-2147483648	; 0x80000000
   167a0:	str	r1, [sp]
   167a4:	add	r1, sp, #28
   167a8:	bl	18420 <__assert_fail@plt+0x7098>
   167ac:	mov	r7, r0
   167b0:	str	r0, [r4]
   167b4:	ldr	r0, [r4, #4]
   167b8:	mov	r1, #0
   167bc:	ldr	r2, [sp, #28]
   167c0:	sub	r2, r2, r0
   167c4:	add	r0, r7, r0, lsl #3
   167c8:	lsl	r2, r2, #3
   167cc:	bl	112a4 <memset@plt>
   167d0:	ldr	r3, [sp, #28]
   167d4:	str	r3, [r4, #4]
   167d8:	ldr	ip, [sp, #32]
   167dc:	mvn	r3, #0
   167e0:	mov	r2, r6
   167e4:	ldr	r8, [sp, #36]	; 0x24
   167e8:	ldr	fp, [r7]
   167ec:	ldr	r4, [r7, #4]
   167f0:	str	ip, [sp]
   167f4:	orr	r8, r8, #1
   167f8:	ldr	ip, [sp, #72]	; 0x48
   167fc:	mov	r1, fp
   16800:	str	r8, [sp, #4]
   16804:	ldr	lr, [sp, #76]	; 0x4c
   16808:	mov	r0, r4
   1680c:	str	r5, [sp, #8]
   16810:	str	ip, [sp, #12]
   16814:	str	lr, [sp, #16]
   16818:	bl	13d04 <__assert_fail@plt+0x297c>
   1681c:	cmp	fp, r0
   16820:	bhi	16880 <__assert_fail@plt+0x54f8>
   16824:	add	fp, r0, #1
   16828:	movw	r3, #45556	; 0xb1f4
   1682c:	movt	r3, #2
   16830:	cmp	r4, r3
   16834:	str	fp, [r7]
   16838:	beq	16844 <__assert_fail@plt+0x54bc>
   1683c:	mov	r0, r4
   16840:	bl	13638 <__assert_fail@plt+0x22b0>
   16844:	mov	r0, fp
   16848:	bl	1817c <__assert_fail@plt+0x6df4>
   1684c:	ldr	r3, [sp, #32]
   16850:	mov	r2, r6
   16854:	mov	r1, fp
   16858:	mov	r4, r0
   1685c:	ldr	lr, [sp, #72]	; 0x48
   16860:	ldr	ip, [sp, #76]	; 0x4c
   16864:	str	r0, [r7, #4]
   16868:	stm	sp, {r3, r8}
   1686c:	mvn	r3, #0
   16870:	str	r5, [sp, #8]
   16874:	str	lr, [sp, #12]
   16878:	str	ip, [sp, #16]
   1687c:	bl	13d04 <__assert_fail@plt+0x297c>
   16880:	mov	r0, r4
   16884:	str	sl, [r9]
   16888:	add	sp, sp, #84	; 0x54
   1688c:	ldrd	r4, [sp]
   16890:	ldrd	r6, [sp, #8]
   16894:	ldrd	r8, [sp, #16]
   16898:	ldrd	sl, [sp, #24]
   1689c:	add	sp, sp, #32
   168a0:	pop	{pc}		; (ldr pc, [sp], #4)
   168a4:	mov	r0, #8
   168a8:	mvn	r3, #-2147483648	; 0x80000000
   168ac:	add	r1, sp, #28
   168b0:	str	r0, [sp]
   168b4:	mov	r0, #0
   168b8:	bl	18420 <__assert_fail@plt+0x7098>
   168bc:	ldrd	r2, [r4, #8]
   168c0:	mov	r7, r0
   168c4:	str	r0, [r4]
   168c8:	strd	r2, [r0]
   168cc:	b	167b4 <__assert_fail@plt+0x542c>
   168d0:	strdeq	fp, [r2], -r4
   168d4:	ldr	ip, [pc, #472]	; 16ab4 <__assert_fail@plt+0x572c>
   168d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   168dc:	mov	r5, r0
   168e0:	movw	r4, #45360	; 0xb130
   168e4:	movt	r4, #2
   168e8:	ldrd	r2, [ip]
   168ec:	ldrd	r0, [ip, #8]
   168f0:	strd	r6, [sp, #8]
   168f4:	strd	r8, [sp, #16]
   168f8:	strd	sl, [sp, #24]
   168fc:	str	lr, [sp, #32]
   16900:	sub	sp, sp, #84	; 0x54
   16904:	strd	r2, [sp, #32]
   16908:	strd	r0, [sp, #40]	; 0x28
   1690c:	ldr	r6, [sp, #44]	; 0x2c
   16910:	ldrd	r2, [ip, #16]
   16914:	ldrd	r0, [ip, #24]
   16918:	mvn	lr, r6
   1691c:	and	lr, lr, #67108864	; 0x4000000
   16920:	eor	lr, lr, r6
   16924:	ldrd	r6, [ip, #40]	; 0x28
   16928:	strd	r2, [sp, #48]	; 0x30
   1692c:	ldrd	r2, [ip, #32]
   16930:	str	lr, [sp, #44]	; 0x2c
   16934:	strd	r0, [sp, #56]	; 0x38
   16938:	strd	r2, [sp, #64]	; 0x40
   1693c:	strd	r6, [sp, #72]	; 0x48
   16940:	bl	11280 <__errno_location@plt>
   16944:	mov	r8, r0
   16948:	ldr	r9, [r0]
   1694c:	ldr	r2, [r4, #4]
   16950:	ldr	r6, [r4]
   16954:	cmp	r2, #0
   16958:	bgt	169b4 <__assert_fail@plt+0x562c>
   1695c:	add	r3, r4, #8
   16960:	str	r2, [sp, #28]
   16964:	rsb	r2, r2, #1
   16968:	cmp	r6, r3
   1696c:	beq	16a88 <__assert_fail@plt+0x5700>
   16970:	mov	r1, #8
   16974:	mov	r0, r6
   16978:	mvn	r3, #-2147483648	; 0x80000000
   1697c:	str	r1, [sp]
   16980:	add	r1, sp, #28
   16984:	bl	18420 <__assert_fail@plt+0x7098>
   16988:	mov	r6, r0
   1698c:	str	r0, [r4]
   16990:	ldr	r0, [r4, #4]
   16994:	mov	r1, #0
   16998:	ldr	r2, [sp, #28]
   1699c:	sub	r2, r2, r0
   169a0:	add	r0, r6, r0, lsl #3
   169a4:	lsl	r2, r2, #3
   169a8:	bl	112a4 <memset@plt>
   169ac:	ldr	r3, [sp, #28]
   169b0:	str	r3, [r4, #4]
   169b4:	ldr	sl, [r6]
   169b8:	add	r0, sp, #40	; 0x28
   169bc:	mvn	r3, #0
   169c0:	mov	r2, r5
   169c4:	ldr	r7, [sp, #36]	; 0x24
   169c8:	ldr	r4, [r6, #4]
   169cc:	mov	r1, sl
   169d0:	str	r0, [sp, #8]
   169d4:	ldr	lr, [sp, #32]
   169d8:	orr	r7, r7, #1
   169dc:	ldr	ip, [sp, #72]	; 0x48
   169e0:	mov	r0, r4
   169e4:	ldr	fp, [sp, #76]	; 0x4c
   169e8:	str	lr, [sp]
   169ec:	str	r7, [sp, #4]
   169f0:	str	ip, [sp, #12]
   169f4:	str	fp, [sp, #16]
   169f8:	bl	13d04 <__assert_fail@plt+0x297c>
   169fc:	cmp	sl, r0
   16a00:	bhi	16a64 <__assert_fail@plt+0x56dc>
   16a04:	add	sl, r0, #1
   16a08:	movw	r3, #45556	; 0xb1f4
   16a0c:	movt	r3, #2
   16a10:	cmp	r4, r3
   16a14:	str	sl, [r6]
   16a18:	beq	16a24 <__assert_fail@plt+0x569c>
   16a1c:	mov	r0, r4
   16a20:	bl	13638 <__assert_fail@plt+0x22b0>
   16a24:	mov	r0, sl
   16a28:	bl	1817c <__assert_fail@plt+0x6df4>
   16a2c:	ldr	r3, [sp, #32]
   16a30:	mov	r2, r5
   16a34:	add	r5, sp, #40	; 0x28
   16a38:	mov	r1, sl
   16a3c:	mov	r4, r0
   16a40:	ldr	lr, [sp, #72]	; 0x48
   16a44:	ldr	ip, [sp, #76]	; 0x4c
   16a48:	str	r0, [r6, #4]
   16a4c:	stm	sp, {r3, r7}
   16a50:	mvn	r3, #0
   16a54:	str	r5, [sp, #8]
   16a58:	str	lr, [sp, #12]
   16a5c:	str	ip, [sp, #16]
   16a60:	bl	13d04 <__assert_fail@plt+0x297c>
   16a64:	mov	r0, r4
   16a68:	str	r9, [r8]
   16a6c:	add	sp, sp, #84	; 0x54
   16a70:	ldrd	r4, [sp]
   16a74:	ldrd	r6, [sp, #8]
   16a78:	ldrd	r8, [sp, #16]
   16a7c:	ldrd	sl, [sp, #24]
   16a80:	add	sp, sp, #32
   16a84:	pop	{pc}		; (ldr pc, [sp], #4)
   16a88:	mov	r0, #8
   16a8c:	mvn	r3, #-2147483648	; 0x80000000
   16a90:	add	r1, sp, #28
   16a94:	str	r0, [sp]
   16a98:	mov	r0, #0
   16a9c:	bl	18420 <__assert_fail@plt+0x7098>
   16aa0:	ldrd	r2, [r4, #8]
   16aa4:	mov	r6, r0
   16aa8:	str	r0, [r4]
   16aac:	strd	r2, [r0]
   16ab0:	b	16990 <__assert_fail@plt+0x5608>
   16ab4:	strdeq	fp, [r2], -r4
   16ab8:	ldr	ip, [pc, #480]	; 16ca0 <__assert_fail@plt+0x5918>
   16abc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16ac0:	mov	r5, r0
   16ac4:	movw	r4, #45360	; 0xb130
   16ac8:	movt	r4, #2
   16acc:	ldrd	r2, [ip]
   16ad0:	strd	r6, [sp, #8]
   16ad4:	mov	r6, r1
   16ad8:	ldrd	r0, [ip, #8]
   16adc:	strd	r8, [sp, #16]
   16ae0:	strd	sl, [sp, #24]
   16ae4:	str	lr, [sp, #32]
   16ae8:	sub	sp, sp, #84	; 0x54
   16aec:	ldrd	r8, [ip, #40]	; 0x28
   16af0:	strd	r2, [sp, #32]
   16af4:	strd	r0, [sp, #40]	; 0x28
   16af8:	ldrd	r2, [ip, #16]
   16afc:	ldr	r7, [sp, #44]	; 0x2c
   16b00:	ldrd	r0, [ip, #24]
   16b04:	strd	r2, [sp, #48]	; 0x30
   16b08:	ldrd	r2, [ip, #32]
   16b0c:	mvn	lr, r7
   16b10:	and	lr, lr, #67108864	; 0x4000000
   16b14:	eor	lr, lr, r7
   16b18:	str	lr, [sp, #44]	; 0x2c
   16b1c:	strd	r0, [sp, #56]	; 0x38
   16b20:	strd	r2, [sp, #64]	; 0x40
   16b24:	strd	r8, [sp, #72]	; 0x48
   16b28:	bl	11280 <__errno_location@plt>
   16b2c:	mov	r9, r0
   16b30:	ldr	sl, [r0]
   16b34:	ldr	r2, [r4, #4]
   16b38:	ldr	r7, [r4]
   16b3c:	cmp	r2, #0
   16b40:	bgt	16b9c <__assert_fail@plt+0x5814>
   16b44:	add	r3, r4, #8
   16b48:	str	r2, [sp, #28]
   16b4c:	rsb	r2, r2, #1
   16b50:	cmp	r7, r3
   16b54:	beq	16c74 <__assert_fail@plt+0x58ec>
   16b58:	mov	r1, #8
   16b5c:	mov	r0, r7
   16b60:	mvn	r3, #-2147483648	; 0x80000000
   16b64:	str	r1, [sp]
   16b68:	add	r1, sp, #28
   16b6c:	bl	18420 <__assert_fail@plt+0x7098>
   16b70:	mov	r7, r0
   16b74:	str	r0, [r4]
   16b78:	ldr	r0, [r4, #4]
   16b7c:	mov	r1, #0
   16b80:	ldr	r2, [sp, #28]
   16b84:	sub	r2, r2, r0
   16b88:	add	r0, r7, r0, lsl #3
   16b8c:	lsl	r2, r2, #3
   16b90:	bl	112a4 <memset@plt>
   16b94:	ldr	r3, [sp, #28]
   16b98:	str	r3, [r4, #4]
   16b9c:	ldr	ip, [sp, #32]
   16ba0:	add	r0, sp, #40	; 0x28
   16ba4:	mov	r3, r6
   16ba8:	mov	r2, r5
   16bac:	ldr	r8, [sp, #36]	; 0x24
   16bb0:	ldr	fp, [r7]
   16bb4:	ldr	r4, [r7, #4]
   16bb8:	str	ip, [sp]
   16bbc:	orr	r8, r8, #1
   16bc0:	ldr	ip, [sp, #72]	; 0x48
   16bc4:	mov	r1, fp
   16bc8:	str	r8, [sp, #4]
   16bcc:	ldr	lr, [sp, #76]	; 0x4c
   16bd0:	str	r0, [sp, #8]
   16bd4:	mov	r0, r4
   16bd8:	str	ip, [sp, #12]
   16bdc:	str	lr, [sp, #16]
   16be0:	bl	13d04 <__assert_fail@plt+0x297c>
   16be4:	cmp	fp, r0
   16be8:	bhi	16c50 <__assert_fail@plt+0x58c8>
   16bec:	add	fp, r0, #1
   16bf0:	movw	r3, #45556	; 0xb1f4
   16bf4:	movt	r3, #2
   16bf8:	cmp	r4, r3
   16bfc:	str	fp, [r7]
   16c00:	beq	16c0c <__assert_fail@plt+0x5884>
   16c04:	mov	r0, r4
   16c08:	bl	13638 <__assert_fail@plt+0x22b0>
   16c0c:	mov	r0, fp
   16c10:	bl	1817c <__assert_fail@plt+0x6df4>
   16c14:	ldr	lr, [sp, #32]
   16c18:	mov	r2, r5
   16c1c:	mov	r3, r6
   16c20:	mov	r1, fp
   16c24:	mov	r4, r0
   16c28:	ldr	r5, [sp, #72]	; 0x48
   16c2c:	ldr	ip, [sp, #76]	; 0x4c
   16c30:	str	r0, [r7, #4]
   16c34:	str	lr, [sp]
   16c38:	add	lr, sp, #40	; 0x28
   16c3c:	str	r8, [sp, #4]
   16c40:	str	lr, [sp, #8]
   16c44:	str	r5, [sp, #12]
   16c48:	str	ip, [sp, #16]
   16c4c:	bl	13d04 <__assert_fail@plt+0x297c>
   16c50:	mov	r0, r4
   16c54:	str	sl, [r9]
   16c58:	add	sp, sp, #84	; 0x54
   16c5c:	ldrd	r4, [sp]
   16c60:	ldrd	r6, [sp, #8]
   16c64:	ldrd	r8, [sp, #16]
   16c68:	ldrd	sl, [sp, #24]
   16c6c:	add	sp, sp, #32
   16c70:	pop	{pc}		; (ldr pc, [sp], #4)
   16c74:	mov	r0, #8
   16c78:	mvn	r3, #-2147483648	; 0x80000000
   16c7c:	add	r1, sp, #28
   16c80:	str	r0, [sp]
   16c84:	mov	r0, #0
   16c88:	bl	18420 <__assert_fail@plt+0x7098>
   16c8c:	ldrd	r2, [r4, #8]
   16c90:	mov	r7, r0
   16c94:	str	r0, [r4]
   16c98:	strd	r2, [r0]
   16c9c:	b	16b78 <__assert_fail@plt+0x57f0>
   16ca0:	strdeq	fp, [r2], -r4
   16ca4:	strd	r4, [sp, #-12]!
   16ca8:	mov	r4, #0
   16cac:	mov	r5, #0
   16cb0:	str	lr, [sp, #8]
   16cb4:	sub	sp, sp, #100	; 0x64
   16cb8:	cmp	r1, #10
   16cbc:	strd	r4, [sp]
   16cc0:	strd	r4, [sp, #8]
   16cc4:	strd	r4, [sp, #16]
   16cc8:	strd	r4, [sp, #24]
   16ccc:	strd	r4, [sp, #32]
   16cd0:	strd	r4, [sp, #40]	; 0x28
   16cd4:	beq	16d04 <__assert_fail@plt+0x597c>
   16cd8:	mov	ip, #67108864	; 0x4000000
   16cdc:	mov	r3, sp
   16ce0:	str	r1, [sp]
   16ce4:	mov	r1, r2
   16ce8:	mvn	r2, #0
   16cec:	str	ip, [sp, #12]
   16cf0:	bl	156f0 <__assert_fail@plt+0x4368>
   16cf4:	add	sp, sp, #100	; 0x64
   16cf8:	ldrd	r4, [sp]
   16cfc:	add	sp, sp, #8
   16d00:	pop	{pc}		; (ldr pc, [sp], #4)
   16d04:	bl	11370 <abort@plt>
   16d08:	ldr	ip, [pc, #156]	; 16dac <__assert_fail@plt+0x5a24>
   16d0c:	cmp	r2, #0
   16d10:	cmpne	r1, #0
   16d14:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16d18:	strd	r6, [sp, #8]
   16d1c:	mov	r6, r2
   16d20:	str	r8, [sp, #16]
   16d24:	mov	r8, r3
   16d28:	strd	sl, [sp, #20]
   16d2c:	ldrd	r4, [ip]
   16d30:	str	lr, [sp, #28]
   16d34:	sub	sp, sp, #48	; 0x30
   16d38:	mov	lr, #10
   16d3c:	ldrd	r2, [ip, #8]
   16d40:	ldrd	sl, [ip, #16]
   16d44:	strd	r4, [sp]
   16d48:	ldrd	r4, [ip, #32]
   16d4c:	str	lr, [sp]
   16d50:	strd	r2, [sp, #8]
   16d54:	strd	sl, [sp, #16]
   16d58:	ldrd	r2, [ip, #24]
   16d5c:	ldrd	sl, [ip, #40]	; 0x28
   16d60:	strd	r2, [sp, #24]
   16d64:	strd	r4, [sp, #32]
   16d68:	strd	sl, [sp, #40]	; 0x28
   16d6c:	beq	16da8 <__assert_fail@plt+0x5a20>
   16d70:	mov	r7, r1
   16d74:	mov	r3, sp
   16d78:	mov	r1, r8
   16d7c:	mvn	r2, #0
   16d80:	str	r7, [sp, #40]	; 0x28
   16d84:	str	r6, [sp, #44]	; 0x2c
   16d88:	bl	156f0 <__assert_fail@plt+0x4368>
   16d8c:	add	sp, sp, #48	; 0x30
   16d90:	ldrd	r4, [sp]
   16d94:	ldrd	r6, [sp, #8]
   16d98:	ldr	r8, [sp, #16]
   16d9c:	ldrd	sl, [sp, #20]
   16da0:	add	sp, sp, #28
   16da4:	pop	{pc}		; (ldr pc, [sp], #4)
   16da8:	bl	11370 <abort@plt>
   16dac:	strdeq	fp, [r2], -r4
   16db0:	ldr	ip, [pc, #156]	; 16e54 <__assert_fail@plt+0x5acc>
   16db4:	cmp	r2, #0
   16db8:	cmpne	r1, #0
   16dbc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16dc0:	strd	r6, [sp, #8]
   16dc4:	mov	r6, r2
   16dc8:	str	r8, [sp, #16]
   16dcc:	mov	r8, r3
   16dd0:	strd	sl, [sp, #20]
   16dd4:	ldrd	r4, [ip]
   16dd8:	str	lr, [sp, #28]
   16ddc:	sub	sp, sp, #48	; 0x30
   16de0:	mov	lr, #10
   16de4:	ldrd	r2, [ip, #8]
   16de8:	ldrd	sl, [ip, #16]
   16dec:	strd	r4, [sp]
   16df0:	ldrd	r4, [ip, #32]
   16df4:	str	lr, [sp]
   16df8:	strd	r2, [sp, #8]
   16dfc:	strd	sl, [sp, #16]
   16e00:	ldrd	r2, [ip, #24]
   16e04:	ldrd	sl, [ip, #40]	; 0x28
   16e08:	strd	r2, [sp, #24]
   16e0c:	strd	r4, [sp, #32]
   16e10:	strd	sl, [sp, #40]	; 0x28
   16e14:	beq	16e50 <__assert_fail@plt+0x5ac8>
   16e18:	ldr	r2, [sp, #80]	; 0x50
   16e1c:	mov	r7, r1
   16e20:	mov	r3, sp
   16e24:	mov	r1, r8
   16e28:	str	r7, [sp, #40]	; 0x28
   16e2c:	str	r6, [sp, #44]	; 0x2c
   16e30:	bl	156f0 <__assert_fail@plt+0x4368>
   16e34:	add	sp, sp, #48	; 0x30
   16e38:	ldrd	r4, [sp]
   16e3c:	ldrd	r6, [sp, #8]
   16e40:	ldr	r8, [sp, #16]
   16e44:	ldrd	sl, [sp, #20]
   16e48:	add	sp, sp, #28
   16e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e50:	bl	11370 <abort@plt>
   16e54:	strdeq	fp, [r2], -r4
   16e58:	ldr	ip, [pc, #512]	; 17060 <__assert_fail@plt+0x5cd8>
   16e5c:	cmp	r0, #0
   16e60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16e64:	ldrd	r4, [ip, #16]
   16e68:	strd	r6, [sp, #8]
   16e6c:	clz	r6, r1
   16e70:	mov	r7, r1
   16e74:	strd	r8, [sp, #16]
   16e78:	mov	r8, r0
   16e7c:	lsr	r6, r6, #5
   16e80:	strd	sl, [sp, #24]
   16e84:	mov	fp, r2
   16e88:	mov	sl, #10
   16e8c:	ldrd	r2, [ip]
   16e90:	moveq	r6, #1
   16e94:	str	lr, [sp, #32]
   16e98:	sub	sp, sp, #92	; 0x5c
   16e9c:	cmp	r6, #0
   16ea0:	ldrd	r0, [ip, #8]
   16ea4:	strd	r2, [sp, #40]	; 0x28
   16ea8:	strd	r4, [sp, #56]	; 0x38
   16eac:	ldrd	r2, [ip, #24]
   16eb0:	strd	r0, [sp, #48]	; 0x30
   16eb4:	ldrd	r0, [ip, #32]
   16eb8:	str	sl, [sp, #40]	; 0x28
   16ebc:	ldrd	r4, [ip, #40]	; 0x28
   16ec0:	strd	r2, [sp, #64]	; 0x40
   16ec4:	strd	r0, [sp, #72]	; 0x48
   16ec8:	strd	r4, [sp, #80]	; 0x50
   16ecc:	bne	1705c <__assert_fail@plt+0x5cd4>
   16ed0:	movw	r5, #45360	; 0xb130
   16ed4:	movt	r5, #2
   16ed8:	str	r8, [sp, #80]	; 0x50
   16edc:	str	r7, [sp, #84]	; 0x54
   16ee0:	bl	11280 <__errno_location@plt>
   16ee4:	ldr	r3, [r0]
   16ee8:	mov	r9, r0
   16eec:	ldr	r2, [r5, #4]
   16ef0:	ldr	r4, [r5]
   16ef4:	str	r3, [sp, #28]
   16ef8:	cmp	r2, #0
   16efc:	movgt	r1, sl
   16f00:	bgt	16f68 <__assert_fail@plt+0x5be0>
   16f04:	add	r3, r5, #8
   16f08:	str	r2, [sp, #36]	; 0x24
   16f0c:	rsb	r2, r2, #1
   16f10:	cmp	r4, r3
   16f14:	beq	17030 <__assert_fail@plt+0x5ca8>
   16f18:	mov	r1, #8
   16f1c:	mov	r0, r4
   16f20:	mvn	r3, #-2147483648	; 0x80000000
   16f24:	str	r1, [sp]
   16f28:	add	r1, sp, #36	; 0x24
   16f2c:	bl	18420 <__assert_fail@plt+0x7098>
   16f30:	mov	r4, r0
   16f34:	str	r0, [r5]
   16f38:	ldr	r0, [r5, #4]
   16f3c:	mov	r1, #0
   16f40:	ldr	r2, [sp, #36]	; 0x24
   16f44:	sub	r2, r2, r0
   16f48:	add	r0, r4, r0, lsl #3
   16f4c:	lsl	r2, r2, #3
   16f50:	bl	112a4 <memset@plt>
   16f54:	ldr	r3, [sp, #36]	; 0x24
   16f58:	ldr	r1, [sp, #40]	; 0x28
   16f5c:	ldr	r8, [sp, #80]	; 0x50
   16f60:	str	r3, [r5, #4]
   16f64:	ldr	r7, [sp, #84]	; 0x54
   16f68:	mvn	r3, #0
   16f6c:	mov	r2, fp
   16f70:	ldr	r6, [sp, #44]	; 0x2c
   16f74:	ldr	sl, [r4]
   16f78:	ldr	r5, [r4, #4]
   16f7c:	orr	r6, r6, #1
   16f80:	stm	sp, {r1, r6}
   16f84:	add	r1, sp, #48	; 0x30
   16f88:	str	r8, [sp, #12]
   16f8c:	mov	r0, r5
   16f90:	str	r1, [sp, #8]
   16f94:	mov	r1, sl
   16f98:	str	r7, [sp, #16]
   16f9c:	bl	13d04 <__assert_fail@plt+0x297c>
   16fa0:	cmp	sl, r0
   16fa4:	bhi	17008 <__assert_fail@plt+0x5c80>
   16fa8:	add	r7, r0, #1
   16fac:	movw	r3, #45556	; 0xb1f4
   16fb0:	movt	r3, #2
   16fb4:	cmp	r5, r3
   16fb8:	str	r7, [r4]
   16fbc:	beq	16fc8 <__assert_fail@plt+0x5c40>
   16fc0:	mov	r0, r5
   16fc4:	bl	13638 <__assert_fail@plt+0x22b0>
   16fc8:	mov	r0, r7
   16fcc:	bl	1817c <__assert_fail@plt+0x6df4>
   16fd0:	ldr	r3, [sp, #40]	; 0x28
   16fd4:	mov	r2, fp
   16fd8:	mov	r1, r7
   16fdc:	mov	r5, r0
   16fe0:	ldr	lr, [sp, #80]	; 0x50
   16fe4:	ldr	ip, [sp, #84]	; 0x54
   16fe8:	str	r0, [r4, #4]
   16fec:	add	r4, sp, #48	; 0x30
   16ff0:	stm	sp, {r3, r6}
   16ff4:	mvn	r3, #0
   16ff8:	str	r4, [sp, #8]
   16ffc:	str	lr, [sp, #12]
   17000:	str	ip, [sp, #16]
   17004:	bl	13d04 <__assert_fail@plt+0x297c>
   17008:	ldr	r3, [sp, #28]
   1700c:	mov	r0, r5
   17010:	str	r3, [r9]
   17014:	add	sp, sp, #92	; 0x5c
   17018:	ldrd	r4, [sp]
   1701c:	ldrd	r6, [sp, #8]
   17020:	ldrd	r8, [sp, #16]
   17024:	ldrd	sl, [sp, #24]
   17028:	add	sp, sp, #32
   1702c:	pop	{pc}		; (ldr pc, [sp], #4)
   17030:	mov	r1, #8
   17034:	mvn	r3, #-2147483648	; 0x80000000
   17038:	mov	r0, r6
   1703c:	str	r1, [sp]
   17040:	add	r1, sp, #36	; 0x24
   17044:	bl	18420 <__assert_fail@plt+0x7098>
   17048:	ldrd	r2, [r5, #8]
   1704c:	mov	r4, r0
   17050:	str	r0, [r5]
   17054:	strd	r2, [r0]
   17058:	b	16f38 <__assert_fail@plt+0x5bb0>
   1705c:	bl	11370 <abort@plt>
   17060:	strdeq	fp, [r2], -r4
   17064:	ldr	ip, [pc, #536]	; 17284 <__assert_fail@plt+0x5efc>
   17068:	cmp	r0, #0
   1706c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17070:	ldrd	r4, [ip, #16]
   17074:	strd	r6, [sp, #8]
   17078:	mov	r6, r1
   1707c:	mov	r7, r0
   17080:	strd	r8, [sp, #16]
   17084:	mov	r9, #10
   17088:	strd	sl, [sp, #24]
   1708c:	mov	sl, r2
   17090:	mov	fp, r3
   17094:	str	lr, [sp, #32]
   17098:	clz	lr, r1
   1709c:	sub	sp, sp, #92	; 0x5c
   170a0:	ldrd	r2, [ip]
   170a4:	lsr	lr, lr, #5
   170a8:	moveq	lr, #1
   170ac:	ldrd	r0, [ip, #8]
   170b0:	cmp	lr, #0
   170b4:	strd	r4, [sp, #56]	; 0x38
   170b8:	ldrd	r4, [ip, #40]	; 0x28
   170bc:	str	lr, [sp, #28]
   170c0:	strd	r2, [sp, #40]	; 0x28
   170c4:	ldrd	r2, [ip, #24]
   170c8:	strd	r0, [sp, #48]	; 0x30
   170cc:	ldrd	r0, [ip, #32]
   170d0:	str	r9, [sp, #40]	; 0x28
   170d4:	strd	r2, [sp, #64]	; 0x40
   170d8:	strd	r4, [sp, #80]	; 0x50
   170dc:	strd	r0, [sp, #72]	; 0x48
   170e0:	bne	17280 <__assert_fail@plt+0x5ef8>
   170e4:	movw	r5, #45360	; 0xb130
   170e8:	movt	r5, #2
   170ec:	str	r7, [sp, #80]	; 0x50
   170f0:	str	r6, [sp, #84]	; 0x54
   170f4:	bl	11280 <__errno_location@plt>
   170f8:	ldr	r3, [r0]
   170fc:	mov	r8, r0
   17100:	ldr	r2, [r5, #4]
   17104:	ldr	r4, [r5]
   17108:	str	r3, [sp, #24]
   1710c:	cmp	r2, #0
   17110:	movgt	r1, r9
   17114:	bgt	1717c <__assert_fail@plt+0x5df4>
   17118:	add	r3, r5, #8
   1711c:	str	r2, [sp, #36]	; 0x24
   17120:	rsb	r2, r2, #1
   17124:	cmp	r4, r3
   17128:	beq	17254 <__assert_fail@plt+0x5ecc>
   1712c:	mov	r1, #8
   17130:	mov	r0, r4
   17134:	mvn	r3, #-2147483648	; 0x80000000
   17138:	str	r1, [sp]
   1713c:	add	r1, sp, #36	; 0x24
   17140:	bl	18420 <__assert_fail@plt+0x7098>
   17144:	mov	r4, r0
   17148:	str	r0, [r5]
   1714c:	ldr	r0, [r5, #4]
   17150:	mov	r1, #0
   17154:	ldr	r2, [sp, #36]	; 0x24
   17158:	sub	r2, r2, r0
   1715c:	add	r0, r4, r0, lsl #3
   17160:	lsl	r2, r2, #3
   17164:	bl	112a4 <memset@plt>
   17168:	ldr	r3, [sp, #36]	; 0x24
   1716c:	ldr	r1, [sp, #40]	; 0x28
   17170:	ldr	r7, [sp, #80]	; 0x50
   17174:	str	r3, [r5, #4]
   17178:	ldr	r6, [sp, #84]	; 0x54
   1717c:	mov	r3, fp
   17180:	mov	r2, sl
   17184:	ldr	r0, [sp, #44]	; 0x2c
   17188:	ldr	r9, [r4]
   1718c:	ldr	r5, [r4, #4]
   17190:	orr	r0, r0, #1
   17194:	str	r1, [sp]
   17198:	add	r1, sp, #48	; 0x30
   1719c:	str	r0, [sp, #4]
   171a0:	str	r1, [sp, #8]
   171a4:	mov	r1, r9
   171a8:	str	r7, [sp, #12]
   171ac:	str	r6, [sp, #16]
   171b0:	str	r0, [sp, #28]
   171b4:	mov	r0, r5
   171b8:	bl	13d04 <__assert_fail@plt+0x297c>
   171bc:	cmp	r9, r0
   171c0:	bhi	1722c <__assert_fail@plt+0x5ea4>
   171c4:	add	r6, r0, #1
   171c8:	movw	r3, #45556	; 0xb1f4
   171cc:	movt	r3, #2
   171d0:	cmp	r5, r3
   171d4:	str	r6, [r4]
   171d8:	beq	171e4 <__assert_fail@plt+0x5e5c>
   171dc:	mov	r0, r5
   171e0:	bl	13638 <__assert_fail@plt+0x22b0>
   171e4:	mov	r0, r6
   171e8:	bl	1817c <__assert_fail@plt+0x6df4>
   171ec:	ldr	lr, [sp, #40]	; 0x28
   171f0:	mov	r1, r6
   171f4:	mov	r3, fp
   171f8:	mov	r2, sl
   171fc:	mov	r5, r0
   17200:	ldr	r6, [sp, #80]	; 0x50
   17204:	ldr	ip, [sp, #84]	; 0x54
   17208:	str	r0, [r4, #4]
   1720c:	str	lr, [sp]
   17210:	ldr	lr, [sp, #28]
   17214:	str	lr, [sp, #4]
   17218:	add	lr, sp, #48	; 0x30
   1721c:	str	r6, [sp, #12]
   17220:	str	lr, [sp, #8]
   17224:	str	ip, [sp, #16]
   17228:	bl	13d04 <__assert_fail@plt+0x297c>
   1722c:	ldr	r3, [sp, #24]
   17230:	mov	r0, r5
   17234:	str	r3, [r8]
   17238:	add	sp, sp, #92	; 0x5c
   1723c:	ldrd	r4, [sp]
   17240:	ldrd	r6, [sp, #8]
   17244:	ldrd	r8, [sp, #16]
   17248:	ldrd	sl, [sp, #24]
   1724c:	add	sp, sp, #32
   17250:	pop	{pc}		; (ldr pc, [sp], #4)
   17254:	mov	r1, #8
   17258:	mvn	r3, #-2147483648	; 0x80000000
   1725c:	ldr	r0, [sp, #28]
   17260:	str	r1, [sp]
   17264:	add	r1, sp, #36	; 0x24
   17268:	bl	18420 <__assert_fail@plt+0x7098>
   1726c:	ldrd	r2, [r5, #8]
   17270:	mov	r4, r0
   17274:	str	r0, [r5]
   17278:	strd	r2, [r0]
   1727c:	b	1714c <__assert_fail@plt+0x5dc4>
   17280:	bl	11370 <abort@plt>
   17284:	strdeq	fp, [r2], -r4
   17288:	ldr	r3, [pc]	; 17290 <__assert_fail@plt+0x5f08>
   1728c:	b	156f0 <__assert_fail@plt+0x4368>
   17290:	andeq	fp, r2, r0, asr #2
   17294:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17298:	movw	r4, #45360	; 0xb130
   1729c:	movt	r4, #2
   172a0:	strd	r6, [sp, #8]
   172a4:	strd	r8, [sp, #16]
   172a8:	strd	sl, [sp, #24]
   172ac:	mov	sl, r0
   172b0:	mov	fp, r1
   172b4:	str	lr, [sp, #32]
   172b8:	sub	sp, sp, #44	; 0x2c
   172bc:	bl	11280 <__errno_location@plt>
   172c0:	ldr	r3, [r0]
   172c4:	mov	r8, r0
   172c8:	ldr	r2, [r4, #4]
   172cc:	ldr	r5, [r4]
   172d0:	str	r3, [sp, #28]
   172d4:	cmp	r2, #0
   172d8:	bgt	17334 <__assert_fail@plt+0x5fac>
   172dc:	add	r3, r4, #8
   172e0:	str	r2, [sp, #36]	; 0x24
   172e4:	rsb	r2, r2, #1
   172e8:	cmp	r5, r3
   172ec:	beq	17410 <__assert_fail@plt+0x6088>
   172f0:	mov	r1, #8
   172f4:	mov	r0, r5
   172f8:	mvn	r3, #-2147483648	; 0x80000000
   172fc:	str	r1, [sp]
   17300:	add	r1, sp, #36	; 0x24
   17304:	bl	18420 <__assert_fail@plt+0x7098>
   17308:	mov	r5, r0
   1730c:	str	r0, [r4]
   17310:	ldr	r0, [r4, #4]
   17314:	mov	r1, #0
   17318:	ldr	r2, [sp, #36]	; 0x24
   1731c:	sub	r2, r2, r0
   17320:	add	r0, r5, r0, lsl #3
   17324:	lsl	r2, r2, #3
   17328:	bl	112a4 <memset@plt>
   1732c:	ldr	r3, [sp, #36]	; 0x24
   17330:	str	r3, [r4, #4]
   17334:	ldr	ip, [r4, #16]
   17338:	mov	r3, fp
   1733c:	mov	r2, sl
   17340:	ldr	r7, [r4, #20]
   17344:	ldr	r0, [pc, #240]	; 1743c <__assert_fail@plt+0x60b4>
   17348:	ldr	r9, [r5]
   1734c:	orr	r7, r7, #1
   17350:	ldr	r6, [r5, #4]
   17354:	str	ip, [sp]
   17358:	ldr	ip, [r4, #56]	; 0x38
   1735c:	mov	r1, r9
   17360:	str	r7, [sp, #4]
   17364:	ldr	lr, [r4, #60]	; 0x3c
   17368:	str	r0, [sp, #8]
   1736c:	mov	r0, r6
   17370:	str	ip, [sp, #12]
   17374:	str	lr, [sp, #16]
   17378:	bl	13d04 <__assert_fail@plt+0x297c>
   1737c:	cmp	r9, r0
   17380:	bhi	173e8 <__assert_fail@plt+0x6060>
   17384:	add	r9, r0, #1
   17388:	movw	r3, #45556	; 0xb1f4
   1738c:	movt	r3, #2
   17390:	cmp	r6, r3
   17394:	str	r9, [r5]
   17398:	beq	173a4 <__assert_fail@plt+0x601c>
   1739c:	mov	r0, r6
   173a0:	bl	13638 <__assert_fail@plt+0x22b0>
   173a4:	mov	r0, r9
   173a8:	bl	1817c <__assert_fail@plt+0x6df4>
   173ac:	ldr	ip, [r4, #16]
   173b0:	mov	r1, r9
   173b4:	mov	r3, fp
   173b8:	mov	r2, sl
   173bc:	mov	r6, r0
   173c0:	ldr	r9, [r4, #56]	; 0x38
   173c4:	ldr	lr, [r4, #60]	; 0x3c
   173c8:	str	r0, [r5, #4]
   173cc:	str	ip, [sp]
   173d0:	ldr	ip, [pc, #100]	; 1743c <__assert_fail@plt+0x60b4>
   173d4:	str	r7, [sp, #4]
   173d8:	str	ip, [sp, #8]
   173dc:	str	r9, [sp, #12]
   173e0:	str	lr, [sp, #16]
   173e4:	bl	13d04 <__assert_fail@plt+0x297c>
   173e8:	ldr	r3, [sp, #28]
   173ec:	mov	r0, r6
   173f0:	str	r3, [r8]
   173f4:	add	sp, sp, #44	; 0x2c
   173f8:	ldrd	r4, [sp]
   173fc:	ldrd	r6, [sp, #8]
   17400:	ldrd	r8, [sp, #16]
   17404:	ldrd	sl, [sp, #24]
   17408:	add	sp, sp, #32
   1740c:	pop	{pc}		; (ldr pc, [sp], #4)
   17410:	mov	r0, #8
   17414:	mvn	r3, #-2147483648	; 0x80000000
   17418:	add	r1, sp, #36	; 0x24
   1741c:	str	r0, [sp]
   17420:	mov	r0, #0
   17424:	bl	18420 <__assert_fail@plt+0x7098>
   17428:	ldrd	r2, [r4, #8]
   1742c:	mov	r5, r0
   17430:	str	r0, [r4]
   17434:	strd	r2, [r0]
   17438:	b	17310 <__assert_fail@plt+0x5f88>
   1743c:	andeq	fp, r2, r8, asr #2
   17440:	ldr	r3, [pc, #4]	; 1744c <__assert_fail@plt+0x60c4>
   17444:	mvn	r2, #0
   17448:	b	156f0 <__assert_fail@plt+0x4368>
   1744c:	andeq	fp, r2, r0, asr #2
   17450:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17454:	movw	r4, #45360	; 0xb130
   17458:	movt	r4, #2
   1745c:	strd	r6, [sp, #8]
   17460:	strd	r8, [sp, #16]
   17464:	strd	sl, [sp, #24]
   17468:	mov	sl, r0
   1746c:	str	lr, [sp, #32]
   17470:	sub	sp, sp, #44	; 0x2c
   17474:	bl	11280 <__errno_location@plt>
   17478:	ldr	r3, [r0]
   1747c:	mov	r8, r0
   17480:	ldr	r2, [r4, #4]
   17484:	ldr	r5, [r4]
   17488:	str	r3, [sp, #28]
   1748c:	cmp	r2, #0
   17490:	bgt	174ec <__assert_fail@plt+0x6164>
   17494:	add	r3, r4, #8
   17498:	str	r2, [sp, #36]	; 0x24
   1749c:	rsb	r2, r2, #1
   174a0:	cmp	r5, r3
   174a4:	beq	175b4 <__assert_fail@plt+0x622c>
   174a8:	mov	r1, #8
   174ac:	mov	r0, r5
   174b0:	mvn	r3, #-2147483648	; 0x80000000
   174b4:	str	r1, [sp]
   174b8:	add	r1, sp, #36	; 0x24
   174bc:	bl	18420 <__assert_fail@plt+0x7098>
   174c0:	mov	r5, r0
   174c4:	str	r0, [r4]
   174c8:	ldr	r0, [r4, #4]
   174cc:	mov	r1, #0
   174d0:	ldr	r2, [sp, #36]	; 0x24
   174d4:	sub	r2, r2, r0
   174d8:	add	r0, r5, r0, lsl #3
   174dc:	lsl	r2, r2, #3
   174e0:	bl	112a4 <memset@plt>
   174e4:	ldr	r3, [sp, #36]	; 0x24
   174e8:	str	r3, [r4, #4]
   174ec:	ldr	ip, [r4, #16]
   174f0:	mvn	r3, #0
   174f4:	mov	r2, sl
   174f8:	ldr	r7, [r4, #20]
   174fc:	ldr	fp, [pc, #220]	; 175e0 <__assert_fail@plt+0x6258>
   17500:	ldr	r9, [r5]
   17504:	orr	r7, r7, #1
   17508:	ldr	r6, [r5, #4]
   1750c:	str	ip, [sp]
   17510:	ldr	ip, [r4, #56]	; 0x38
   17514:	mov	r1, r9
   17518:	stmib	sp, {r7, fp}
   1751c:	ldr	lr, [r4, #60]	; 0x3c
   17520:	mov	r0, r6
   17524:	str	ip, [sp, #12]
   17528:	str	lr, [sp, #16]
   1752c:	bl	13d04 <__assert_fail@plt+0x297c>
   17530:	cmp	r9, r0
   17534:	bhi	1758c <__assert_fail@plt+0x6204>
   17538:	add	r9, r0, #1
   1753c:	movw	r3, #45556	; 0xb1f4
   17540:	movt	r3, #2
   17544:	cmp	r6, r3
   17548:	str	r9, [r5]
   1754c:	beq	17558 <__assert_fail@plt+0x61d0>
   17550:	mov	r0, r6
   17554:	bl	13638 <__assert_fail@plt+0x22b0>
   17558:	mov	r0, r9
   1755c:	bl	1817c <__assert_fail@plt+0x6df4>
   17560:	ldr	r3, [r4, #16]
   17564:	mov	r2, sl
   17568:	mov	r1, r9
   1756c:	mov	r6, r0
   17570:	ldr	lr, [r4, #56]	; 0x38
   17574:	ldr	ip, [r4, #60]	; 0x3c
   17578:	str	r0, [r5, #4]
   1757c:	stm	sp, {r3, r7, fp, lr}
   17580:	mvn	r3, #0
   17584:	str	ip, [sp, #16]
   17588:	bl	13d04 <__assert_fail@plt+0x297c>
   1758c:	ldr	r3, [sp, #28]
   17590:	mov	r0, r6
   17594:	str	r3, [r8]
   17598:	add	sp, sp, #44	; 0x2c
   1759c:	ldrd	r4, [sp]
   175a0:	ldrd	r6, [sp, #8]
   175a4:	ldrd	r8, [sp, #16]
   175a8:	ldrd	sl, [sp, #24]
   175ac:	add	sp, sp, #32
   175b0:	pop	{pc}		; (ldr pc, [sp], #4)
   175b4:	mov	r0, #8
   175b8:	mvn	r3, #-2147483648	; 0x80000000
   175bc:	add	r1, sp, #36	; 0x24
   175c0:	str	r0, [sp]
   175c4:	mov	r0, #0
   175c8:	bl	18420 <__assert_fail@plt+0x7098>
   175cc:	ldrd	r2, [r4, #8]
   175d0:	mov	r5, r0
   175d4:	str	r0, [r4]
   175d8:	strd	r2, [r0]
   175dc:	b	174c8 <__assert_fail@plt+0x6140>
   175e0:	andeq	fp, r2, r8, asr #2
   175e4:	strd	r4, [sp, #-16]!
   175e8:	mov	r4, r0
   175ec:	ldr	r3, [r0, #24]
   175f0:	str	r6, [sp, #8]
   175f4:	ldr	r6, [r0, #20]
   175f8:	str	lr, [sp, #12]
   175fc:	sub	r5, r3, r6
   17600:	cmp	r3, r6
   17604:	sub	r5, r5, #1
   17608:	beq	176c8 <__assert_fail@plt+0x6340>
   1760c:	ldr	r2, [r4, #16]
   17610:	ldr	r0, [r4, #36]	; 0x24
   17614:	ldr	r1, [r4, #28]
   17618:	add	r3, r3, r0
   1761c:	bic	r3, r3, r0
   17620:	sub	r0, r3, r2
   17624:	sub	r2, r1, r2
   17628:	cmp	r0, r2
   1762c:	str	r3, [r4, #24]
   17630:	movhi	r3, r1
   17634:	ldr	r2, [r4, #68]	; 0x44
   17638:	strhi	r1, [r4, #24]
   1763c:	str	r3, [r4, #20]
   17640:	ldr	r3, [r4, #72]	; 0x48
   17644:	sub	r3, r3, r2
   17648:	cmp	r3, #3
   1764c:	bls	176a0 <__assert_fail@plt+0x6318>
   17650:	str	r6, [r2]
   17654:	ldr	r2, [r4, #68]	; 0x44
   17658:	ldr	r1, [r4, #112]	; 0x70
   1765c:	ldr	r3, [r4, #116]	; 0x74
   17660:	add	r2, r2, #4
   17664:	str	r2, [r4, #68]	; 0x44
   17668:	sub	r3, r3, r1
   1766c:	cmp	r3, #3
   17670:	bls	176b4 <__assert_fail@plt+0x632c>
   17674:	str	r5, [r1]
   17678:	ldr	r2, [r4]
   1767c:	ldr	r3, [r4, #112]	; 0x70
   17680:	ldr	r6, [sp, #8]
   17684:	add	r2, r2, #1
   17688:	add	r3, r3, #4
   1768c:	str	r2, [r4]
   17690:	str	r3, [r4, #112]	; 0x70
   17694:	ldrd	r4, [sp]
   17698:	add	sp, sp, #12
   1769c:	pop	{pc}		; (ldr pc, [sp], #4)
   176a0:	mov	r1, #4
   176a4:	add	r0, r4, #56	; 0x38
   176a8:	bl	18b78 <_obstack_newchunk@@Base>
   176ac:	ldr	r2, [r4, #68]	; 0x44
   176b0:	b	17650 <__assert_fail@plt+0x62c8>
   176b4:	mov	r1, #4
   176b8:	add	r0, r4, #100	; 0x64
   176bc:	bl	18b78 <_obstack_newchunk@@Base>
   176c0:	ldr	r1, [r4, #112]	; 0x70
   176c4:	b	17674 <__assert_fail@plt+0x62ec>
   176c8:	ldrb	r2, [r0, #52]	; 0x34
   176cc:	orr	r2, r2, #2
   176d0:	strb	r2, [r0, #52]	; 0x34
   176d4:	b	1760c <__assert_fail@plt+0x6284>
   176d8:	strd	r4, [sp, #-20]!	; 0xffffffec
   176dc:	mov	r4, #0
   176e0:	mov	r5, r0
   176e4:	strd	r6, [sp, #8]
   176e8:	movw	r6, #13880	; 0x3638
   176ec:	movt	r6, #1
   176f0:	str	lr, [sp, #16]
   176f4:	sub	sp, sp, #12
   176f8:	movw	r7, #34724	; 0x87a4
   176fc:	movt	r7, #1
   17700:	mov	r2, r4
   17704:	mov	r1, r4
   17708:	mov	r3, r7
   1770c:	str	r6, [sp]
   17710:	add	r0, r0, #12
   17714:	str	r4, [r5]
   17718:	str	r4, [r5, #4]
   1771c:	str	r4, [r5, #8]
   17720:	bl	189b4 <_obstack_begin@@Base>
   17724:	mov	r3, r7
   17728:	mov	r2, r4
   1772c:	str	r6, [sp]
   17730:	mov	r1, r4
   17734:	add	r0, r5, #56	; 0x38
   17738:	bl	189b4 <_obstack_begin@@Base>
   1773c:	mov	r3, r7
   17740:	add	r0, r5, #100	; 0x64
   17744:	str	r6, [sp]
   17748:	mov	r2, r4
   1774c:	mov	r1, r4
   17750:	bl	189b4 <_obstack_begin@@Base>
   17754:	add	sp, sp, #12
   17758:	ldrd	r4, [sp]
   1775c:	ldrd	r6, [sp, #8]
   17760:	add	sp, sp, #16
   17764:	pop	{pc}		; (ldr pc, [sp], #4)
   17768:	mov	r1, #0
   1776c:	str	r4, [sp, #-8]!
   17770:	mov	r4, r0
   17774:	add	r0, r0, #12
   17778:	str	lr, [sp, #4]
   1777c:	bl	18d20 <_obstack_free@@Base>
   17780:	add	r0, r4, #56	; 0x38
   17784:	mov	r1, #0
   17788:	bl	18d20 <_obstack_free@@Base>
   1778c:	add	r0, r4, #100	; 0x64
   17790:	mov	r1, #0
   17794:	ldr	r4, [sp]
   17798:	ldr	lr, [sp, #4]
   1779c:	add	sp, sp, #8
   177a0:	b	18d20 <_obstack_free@@Base>
   177a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   177a8:	mov	r4, r1
   177ac:	strd	r6, [sp, #8]
   177b0:	mov	r6, r0
   177b4:	add	r7, r1, #12
   177b8:	str	r8, [sp, #16]
   177bc:	str	lr, [sp, #20]
   177c0:	mov	r0, r6
   177c4:	bl	112bc <fgetc@plt>
   177c8:	cmn	r0, #1
   177cc:	mov	r5, r0
   177d0:	beq	1782c <__assert_fail@plt+0x64a4>
   177d4:	ldr	r3, [r4, #24]
   177d8:	ldr	r2, [r4, #28]
   177dc:	add	r1, r3, #1
   177e0:	cmp	r2, r3
   177e4:	beq	17804 <__assert_fail@plt+0x647c>
   177e8:	cmp	r0, #0
   177ec:	str	r1, [r4, #24]
   177f0:	strb	r0, [r3]
   177f4:	bne	177c0 <__assert_fail@plt+0x6438>
   177f8:	mov	r0, r4
   177fc:	bl	175e4 <__assert_fail@plt+0x625c>
   17800:	b	177c0 <__assert_fail@plt+0x6438>
   17804:	mov	r1, #1
   17808:	mov	r0, r7
   1780c:	bl	18b78 <_obstack_newchunk@@Base>
   17810:	ldr	r3, [r4, #24]
   17814:	cmp	r5, #0
   17818:	add	r2, r3, #1
   1781c:	str	r2, [r4, #24]
   17820:	strb	r5, [r3]
   17824:	bne	177c0 <__assert_fail@plt+0x6438>
   17828:	b	177f8 <__assert_fail@plt+0x6470>
   1782c:	ldrd	r2, [r4, #20]
   17830:	cmp	r3, r2
   17834:	beq	1785c <__assert_fail@plt+0x64d4>
   17838:	ldr	r2, [r4, #28]
   1783c:	cmp	r3, r2
   17840:	beq	1795c <__assert_fail@plt+0x65d4>
   17844:	add	r1, r3, #1
   17848:	mov	r2, #0
   1784c:	mov	r0, r4
   17850:	str	r1, [r4, #24]
   17854:	strb	r2, [r3]
   17858:	bl	175e4 <__assert_fail@plt+0x625c>
   1785c:	ldrd	r2, [r4, #68]	; 0x44
   17860:	sub	r3, r3, r2
   17864:	cmp	r3, #3
   17868:	bls	17928 <__assert_fail@plt+0x65a0>
   1786c:	mov	r3, #0
   17870:	str	r3, [r2]
   17874:	ldr	r1, [r4, #64]	; 0x40
   17878:	ldr	r3, [r4, #68]	; 0x44
   1787c:	add	r3, r3, #4
   17880:	cmp	r3, r1
   17884:	str	r3, [r4, #68]	; 0x44
   17888:	beq	1794c <__assert_fail@plt+0x65c4>
   1788c:	ldr	r2, [r4, #60]	; 0x3c
   17890:	str	r1, [r4, #4]
   17894:	ldr	r0, [r4, #80]	; 0x50
   17898:	ldr	ip, [r4, #72]	; 0x48
   1789c:	add	r3, r3, r0
   178a0:	bic	r3, r3, r0
   178a4:	sub	r0, r3, r2
   178a8:	sub	r2, ip, r2
   178ac:	cmp	r0, r2
   178b0:	str	r3, [r4, #68]	; 0x44
   178b4:	movhi	r3, ip
   178b8:	ldr	r2, [r4, #112]	; 0x70
   178bc:	strhi	ip, [r4, #68]	; 0x44
   178c0:	ldr	ip, [r4, #108]	; 0x6c
   178c4:	str	r3, [r4, #64]	; 0x40
   178c8:	cmp	r2, ip
   178cc:	beq	1793c <__assert_fail@plt+0x65b4>
   178d0:	ldr	r1, [r4, #104]	; 0x68
   178d4:	str	ip, [r4, #8]
   178d8:	ldr	r0, [r4, #124]	; 0x7c
   178dc:	ldr	lr, [r4, #116]	; 0x74
   178e0:	add	r3, r2, r0
   178e4:	bic	r3, r3, r0
   178e8:	mov	r0, r6
   178ec:	sub	r2, r3, r1
   178f0:	sub	r1, lr, r1
   178f4:	cmp	r2, r1
   178f8:	str	r3, [r4, #112]	; 0x70
   178fc:	movhi	r3, lr
   17900:	strhi	lr, [r4, #112]	; 0x70
   17904:	str	r3, [r4, #108]	; 0x6c
   17908:	bl	110dc <ferror@plt>
   1790c:	clz	r0, r0
   17910:	ldrd	r4, [sp]
   17914:	lsr	r0, r0, #5
   17918:	ldrd	r6, [sp, #8]
   1791c:	ldr	r8, [sp, #16]
   17920:	add	sp, sp, #20
   17924:	pop	{pc}		; (ldr pc, [sp], #4)
   17928:	mov	r1, #4
   1792c:	add	r0, r4, #56	; 0x38
   17930:	bl	18b78 <_obstack_newchunk@@Base>
   17934:	ldr	r2, [r4, #68]	; 0x44
   17938:	b	1786c <__assert_fail@plt+0x64e4>
   1793c:	ldrb	r3, [r4, #140]	; 0x8c
   17940:	orr	r3, r3, #2
   17944:	strb	r3, [r4, #140]	; 0x8c
   17948:	b	178d0 <__assert_fail@plt+0x6548>
   1794c:	ldrb	r2, [r4, #96]	; 0x60
   17950:	orr	r2, r2, #2
   17954:	strb	r2, [r4, #96]	; 0x60
   17958:	b	1788c <__assert_fail@plt+0x6504>
   1795c:	mov	r1, #1
   17960:	add	r0, r4, #12
   17964:	bl	18b78 <_obstack_newchunk@@Base>
   17968:	ldr	r3, [r4, #24]
   1796c:	b	17844 <__assert_fail@plt+0x64bc>
   17970:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17974:	mov	r5, #0
   17978:	movt	r5, #32752	; 0x7ff0
   1797c:	mov	r4, r2
   17980:	strd	r6, [sp, #8]
   17984:	mov	r7, r1
   17988:	str	r8, [sp, #16]
   1798c:	mov	r8, r0
   17990:	str	lr, [sp, #20]
   17994:	mov	r2, r4
   17998:	mov	r1, r7
   1799c:	mov	r0, r8
   179a0:	bl	110a0 <read@plt>
   179a4:	subs	r6, r0, #0
   179a8:	bge	179dc <__assert_fail@plt+0x6654>
   179ac:	bl	11280 <__errno_location@plt>
   179b0:	ldr	r3, [r0]
   179b4:	cmp	r3, #4
   179b8:	beq	17994 <__assert_fail@plt+0x660c>
   179bc:	cmp	r4, r5
   179c0:	mov	r4, r5
   179c4:	movls	r2, #0
   179c8:	movhi	r2, #1
   179cc:	cmp	r3, #22
   179d0:	movne	r2, #0
   179d4:	cmp	r2, #0
   179d8:	bne	17994 <__assert_fail@plt+0x660c>
   179dc:	mov	r0, r6
   179e0:	ldrd	r4, [sp]
   179e4:	ldrd	r6, [sp, #8]
   179e8:	ldr	r8, [sp, #16]
   179ec:	add	sp, sp, #20
   179f0:	pop	{pc}		; (ldr pc, [sp], #4)
   179f4:	cmp	r1, #0
   179f8:	strd	r4, [sp, #-16]!
   179fc:	mov	ip, r3
   17a00:	str	r6, [sp, #8]
   17a04:	mov	r4, r0
   17a08:	str	lr, [sp, #12]
   17a0c:	sub	sp, sp, #32
   17a10:	ldr	r5, [sp, #48]	; 0x30
   17a14:	ldr	r6, [sp, #52]	; 0x34
   17a18:	beq	17b5c <__assert_fail@plt+0x67d4>
   17a1c:	mov	r3, r1
   17a20:	mov	r1, #1
   17a24:	stm	sp, {r2, ip}
   17a28:	movw	r2, #40560	; 0x9e70
   17a2c:	movt	r2, #1
   17a30:	bl	112e0 <__fprintf_chk@plt>
   17a34:	mov	r2, #5
   17a38:	movw	r1, #40580	; 0x9e84
   17a3c:	movt	r1, #1
   17a40:	mov	r0, #0
   17a44:	bl	11124 <dcgettext@plt>
   17a48:	movw	ip, #2022	; 0x7e6
   17a4c:	mov	r3, r0
   17a50:	mov	r1, #1
   17a54:	movw	r2, #41308	; 0xa15c
   17a58:	movt	r2, #1
   17a5c:	mov	r0, r4
   17a60:	str	ip, [sp]
   17a64:	bl	112e0 <__fprintf_chk@plt>
   17a68:	mov	r1, r4
   17a6c:	mov	r0, #10
   17a70:	bl	11118 <fputc_unlocked@plt>
   17a74:	mov	r2, #5
   17a78:	movw	r1, #40584	; 0x9e88
   17a7c:	movt	r1, #1
   17a80:	mov	r0, #0
   17a84:	bl	11124 <dcgettext@plt>
   17a88:	mov	r2, r0
   17a8c:	mov	r1, #1
   17a90:	movw	r3, #40756	; 0x9f34
   17a94:	movt	r3, #1
   17a98:	mov	r0, r4
   17a9c:	bl	112e0 <__fprintf_chk@plt>
   17aa0:	mov	r1, r4
   17aa4:	mov	r0, #10
   17aa8:	bl	11118 <fputc_unlocked@plt>
   17aac:	cmp	r6, #9
   17ab0:	ldrls	pc, [pc, r6, lsl #2]
   17ab4:	b	17dc8 <__assert_fail@plt+0x6a40>
   17ab8:	andeq	r7, r1, r8, asr #22
   17abc:	andeq	r7, r1, r8, ror fp
   17ac0:			; <UNDEFINED> instruction: 0x00017bb4
   17ac4:	strdeq	r7, [r1], -r4
   17ac8:	andeq	r7, r1, ip, lsr ip
   17acc:	andeq	r7, r1, r4, ror ip
   17ad0:			; <UNDEFINED> instruction: 0x00017cbc
   17ad4:	andeq	r7, r1, r0, lsl sp
   17ad8:	andeq	r7, r1, r8, ror #26
   17adc:	andeq	r7, r1, r0, ror #21
   17ae0:	movw	r1, #41060	; 0xa064
   17ae4:	movt	r1, #1
   17ae8:	mov	r2, #5
   17aec:	mov	r0, #0
   17af0:	bl	11124 <dcgettext@plt>
   17af4:	ldr	lr, [r5, #4]
   17af8:	mov	r2, r0
   17afc:	mov	r1, #1
   17b00:	mov	r0, r4
   17b04:	ldr	r3, [r5, #8]
   17b08:	ldr	ip, [r5, #32]
   17b0c:	str	lr, [sp]
   17b10:	ldr	lr, [r5, #12]
   17b14:	str	ip, [sp, #28]
   17b18:	ldr	ip, [r5, #28]
   17b1c:	str	r3, [sp, #4]
   17b20:	ldr	r3, [r5, #16]
   17b24:	str	lr, [sp, #8]
   17b28:	ldr	lr, [r5, #20]
   17b2c:	str	ip, [sp, #24]
   17b30:	ldr	ip, [r5, #24]
   17b34:	str	r3, [sp, #12]
   17b38:	ldr	r3, [r5]
   17b3c:	str	lr, [sp, #16]
   17b40:	str	ip, [sp, #20]
   17b44:	bl	112e0 <__fprintf_chk@plt>
   17b48:	add	sp, sp, #32
   17b4c:	ldrd	r4, [sp]
   17b50:	ldr	r6, [sp, #8]
   17b54:	add	sp, sp, #12
   17b58:	pop	{pc}		; (ldr pc, [sp], #4)
   17b5c:	mov	r3, r2
   17b60:	mov	r1, #1
   17b64:	str	ip, [sp]
   17b68:	movw	r2, #40572	; 0x9e7c
   17b6c:	movt	r2, #1
   17b70:	bl	112e0 <__fprintf_chk@plt>
   17b74:	b	17a34 <__assert_fail@plt+0x66ac>
   17b78:	mov	r2, #5
   17b7c:	movw	r1, #40792	; 0x9f58
   17b80:	movt	r1, #1
   17b84:	mov	r0, #0
   17b88:	bl	11124 <dcgettext@plt>
   17b8c:	ldr	r3, [r5]
   17b90:	mov	r2, r0
   17b94:	mov	r1, #1
   17b98:	mov	r0, r4
   17b9c:	add	sp, sp, #32
   17ba0:	ldrd	r4, [sp]
   17ba4:	ldr	r6, [sp, #8]
   17ba8:	ldr	lr, [sp, #12]
   17bac:	add	sp, sp, #16
   17bb0:	b	112e0 <__fprintf_chk@plt>
   17bb4:	mov	r2, #5
   17bb8:	movw	r1, #40808	; 0x9f68
   17bbc:	movt	r1, #1
   17bc0:	mov	r0, #0
   17bc4:	bl	11124 <dcgettext@plt>
   17bc8:	ldm	r5, {r3, ip}
   17bcc:	mov	r2, r0
   17bd0:	mov	r1, #1
   17bd4:	mov	r0, r4
   17bd8:	str	ip, [sp, #48]	; 0x30
   17bdc:	add	sp, sp, #32
   17be0:	ldrd	r4, [sp]
   17be4:	ldr	r6, [sp, #8]
   17be8:	ldr	lr, [sp, #12]
   17bec:	add	sp, sp, #16
   17bf0:	b	112e0 <__fprintf_chk@plt>
   17bf4:	mov	r2, #5
   17bf8:	movw	r1, #40832	; 0x9f80
   17bfc:	movt	r1, #1
   17c00:	mov	r0, #0
   17c04:	bl	11124 <dcgettext@plt>
   17c08:	ldm	r5, {r3, lr}
   17c0c:	mov	r2, r0
   17c10:	mov	r1, #1
   17c14:	mov	r0, r4
   17c18:	ldr	ip, [r5, #8]
   17c1c:	str	lr, [sp, #48]	; 0x30
   17c20:	str	ip, [sp, #52]	; 0x34
   17c24:	add	sp, sp, #32
   17c28:	ldrd	r4, [sp]
   17c2c:	ldr	r6, [sp, #8]
   17c30:	ldr	lr, [sp, #12]
   17c34:	add	sp, sp, #16
   17c38:	b	112e0 <__fprintf_chk@plt>
   17c3c:	mov	r2, #5
   17c40:	movw	r1, #40860	; 0x9f9c
   17c44:	movt	r1, #1
   17c48:	mov	r0, #0
   17c4c:	bl	11124 <dcgettext@plt>
   17c50:	ldmib	r5, {r3, ip, lr}
   17c54:	mov	r2, r0
   17c58:	mov	r1, #1
   17c5c:	mov	r0, r4
   17c60:	str	r3, [sp]
   17c64:	ldr	r3, [r5]
   17c68:	stmib	sp, {ip, lr}
   17c6c:	bl	112e0 <__fprintf_chk@plt>
   17c70:	b	17b48 <__assert_fail@plt+0x67c0>
   17c74:	mov	r2, #5
   17c78:	movw	r1, #40892	; 0x9fbc
   17c7c:	movt	r1, #1
   17c80:	mov	r0, #0
   17c84:	bl	11124 <dcgettext@plt>
   17c88:	ldmib	r5, {ip, lr}
   17c8c:	mov	r2, r0
   17c90:	mov	r1, #1
   17c94:	mov	r0, r4
   17c98:	ldr	r3, [r5, #16]
   17c9c:	str	ip, [sp]
   17ca0:	ldr	ip, [r5, #12]
   17ca4:	str	r3, [sp, #12]
   17ca8:	ldr	r3, [r5]
   17cac:	str	lr, [sp, #4]
   17cb0:	str	ip, [sp, #8]
   17cb4:	bl	112e0 <__fprintf_chk@plt>
   17cb8:	b	17b48 <__assert_fail@plt+0x67c0>
   17cbc:	mov	r2, #5
   17cc0:	movw	r1, #40928	; 0x9fe0
   17cc4:	movt	r1, #1
   17cc8:	mov	r0, #0
   17ccc:	bl	11124 <dcgettext@plt>
   17cd0:	ldr	lr, [r5, #4]
   17cd4:	mov	r2, r0
   17cd8:	mov	r1, #1
   17cdc:	mov	r0, r4
   17ce0:	ldr	r3, [r5, #8]
   17ce4:	ldr	ip, [r5, #20]
   17ce8:	str	lr, [sp]
   17cec:	ldr	lr, [r5, #12]
   17cf0:	str	ip, [sp, #16]
   17cf4:	ldr	ip, [r5, #16]
   17cf8:	str	r3, [sp, #4]
   17cfc:	ldr	r3, [r5]
   17d00:	str	lr, [sp, #8]
   17d04:	str	ip, [sp, #12]
   17d08:	bl	112e0 <__fprintf_chk@plt>
   17d0c:	b	17b48 <__assert_fail@plt+0x67c0>
   17d10:	mov	r2, #5
   17d14:	movw	r1, #40968	; 0xa008
   17d18:	movt	r1, #1
   17d1c:	mov	r0, #0
   17d20:	bl	11124 <dcgettext@plt>
   17d24:	ldmib	r5, {r3, ip}
   17d28:	mov	r2, r0
   17d2c:	mov	r1, #1
   17d30:	mov	r0, r4
   17d34:	ldr	lr, [r5, #24]
   17d38:	str	r3, [sp]
   17d3c:	ldr	r3, [r5, #12]
   17d40:	str	lr, [sp, #20]
   17d44:	ldr	lr, [r5, #20]
   17d48:	str	ip, [sp, #4]
   17d4c:	ldr	ip, [r5, #16]
   17d50:	str	r3, [sp, #8]
   17d54:	ldr	r3, [r5]
   17d58:	str	ip, [sp, #12]
   17d5c:	str	lr, [sp, #16]
   17d60:	bl	112e0 <__fprintf_chk@plt>
   17d64:	b	17b48 <__assert_fail@plt+0x67c0>
   17d68:	mov	r2, #5
   17d6c:	movw	r1, #41012	; 0xa034
   17d70:	movt	r1, #1
   17d74:	mov	r0, #0
   17d78:	bl	11124 <dcgettext@plt>
   17d7c:	ldmib	r5, {ip, lr}
   17d80:	mov	r2, r0
   17d84:	mov	r1, #1
   17d88:	mov	r0, r4
   17d8c:	ldr	r3, [r5, #28]
   17d90:	str	ip, [sp]
   17d94:	ldr	ip, [r5, #12]
   17d98:	str	r3, [sp, #24]
   17d9c:	ldr	r3, [r5, #24]
   17da0:	str	lr, [sp, #4]
   17da4:	ldr	lr, [r5, #16]
   17da8:	str	ip, [sp, #8]
   17dac:	ldr	ip, [r5, #20]
   17db0:	str	r3, [sp, #20]
   17db4:	ldr	r3, [r5]
   17db8:	str	lr, [sp, #12]
   17dbc:	str	ip, [sp, #16]
   17dc0:	bl	112e0 <__fprintf_chk@plt>
   17dc4:	b	17b48 <__assert_fail@plt+0x67c0>
   17dc8:	movw	r1, #41112	; 0xa098
   17dcc:	movt	r1, #1
   17dd0:	b	17ae8 <__assert_fail@plt+0x6760>
   17dd4:	strd	r4, [sp, #-12]!
   17dd8:	str	lr, [sp, #8]
   17ddc:	sub	sp, sp, #12
   17de0:	ldr	r5, [sp, #24]
   17de4:	ldr	ip, [r5]
   17de8:	cmp	ip, #0
   17dec:	beq	17e08 <__assert_fail@plt+0x6a80>
   17df0:	mov	lr, r5
   17df4:	mov	ip, #0
   17df8:	ldr	r4, [lr, #4]!
   17dfc:	add	ip, ip, #1
   17e00:	cmp	r4, #0
   17e04:	bne	17df8 <__assert_fail@plt+0x6a70>
   17e08:	stm	sp, {r5, ip}
   17e0c:	bl	179f4 <__assert_fail@plt+0x666c>
   17e10:	add	sp, sp, #12
   17e14:	ldrd	r4, [sp]
   17e18:	add	sp, sp, #8
   17e1c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e20:	push	{lr}		; (str lr, [sp, #-4]!)
   17e24:	sub	sp, sp, #52	; 0x34
   17e28:	ldr	ip, [sp, #56]	; 0x38
   17e2c:	ldr	lr, [ip]
   17e30:	cmp	lr, #0
   17e34:	str	lr, [sp, #8]
   17e38:	beq	17ed0 <__assert_fail@plt+0x6b48>
   17e3c:	ldr	lr, [ip, #4]
   17e40:	cmp	lr, #0
   17e44:	str	lr, [sp, #12]
   17e48:	beq	17ee4 <__assert_fail@plt+0x6b5c>
   17e4c:	ldr	lr, [ip, #8]
   17e50:	cmp	lr, #0
   17e54:	str	lr, [sp, #16]
   17e58:	beq	17eec <__assert_fail@plt+0x6b64>
   17e5c:	ldr	lr, [ip, #12]
   17e60:	cmp	lr, #0
   17e64:	str	lr, [sp, #20]
   17e68:	beq	17ef4 <__assert_fail@plt+0x6b6c>
   17e6c:	ldr	lr, [ip, #16]
   17e70:	cmp	lr, #0
   17e74:	str	lr, [sp, #24]
   17e78:	beq	17efc <__assert_fail@plt+0x6b74>
   17e7c:	ldr	lr, [ip, #20]
   17e80:	cmp	lr, #0
   17e84:	str	lr, [sp, #28]
   17e88:	beq	17f04 <__assert_fail@plt+0x6b7c>
   17e8c:	ldr	lr, [ip, #24]
   17e90:	cmp	lr, #0
   17e94:	str	lr, [sp, #32]
   17e98:	beq	17f0c <__assert_fail@plt+0x6b84>
   17e9c:	ldr	lr, [ip, #28]
   17ea0:	cmp	lr, #0
   17ea4:	str	lr, [sp, #36]	; 0x24
   17ea8:	beq	17f14 <__assert_fail@plt+0x6b8c>
   17eac:	ldr	lr, [ip, #32]
   17eb0:	cmp	lr, #0
   17eb4:	str	lr, [sp, #40]	; 0x28
   17eb8:	beq	17f1c <__assert_fail@plt+0x6b94>
   17ebc:	ldr	ip, [ip, #36]	; 0x24
   17ec0:	cmp	ip, #0
   17ec4:	str	ip, [sp, #44]	; 0x2c
   17ec8:	movne	lr, #10
   17ecc:	moveq	lr, #9
   17ed0:	add	ip, sp, #8
   17ed4:	stm	sp, {ip, lr}
   17ed8:	bl	179f4 <__assert_fail@plt+0x666c>
   17edc:	add	sp, sp, #52	; 0x34
   17ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ee4:	mov	lr, #1
   17ee8:	b	17ed0 <__assert_fail@plt+0x6b48>
   17eec:	mov	lr, #2
   17ef0:	b	17ed0 <__assert_fail@plt+0x6b48>
   17ef4:	mov	lr, #3
   17ef8:	b	17ed0 <__assert_fail@plt+0x6b48>
   17efc:	mov	lr, #4
   17f00:	b	17ed0 <__assert_fail@plt+0x6b48>
   17f04:	mov	lr, #5
   17f08:	b	17ed0 <__assert_fail@plt+0x6b48>
   17f0c:	mov	lr, #6
   17f10:	b	17ed0 <__assert_fail@plt+0x6b48>
   17f14:	mov	lr, #7
   17f18:	b	17ed0 <__assert_fail@plt+0x6b48>
   17f1c:	mov	lr, #8
   17f20:	b	17ed0 <__assert_fail@plt+0x6b48>
   17f24:	push	{r3}		; (str r3, [sp, #-4]!)
   17f28:	push	{lr}		; (str lr, [sp, #-4]!)
   17f2c:	sub	sp, sp, #56	; 0x38
   17f30:	ldr	ip, [sp, #64]	; 0x40
   17f34:	add	r3, sp, #64	; 0x40
   17f38:	str	r3, [sp, #12]
   17f3c:	cmp	ip, #0
   17f40:	str	ip, [sp, #16]
   17f44:	beq	17fdc <__assert_fail@plt+0x6c54>
   17f48:	ldr	ip, [sp, #68]	; 0x44
   17f4c:	cmp	ip, #0
   17f50:	str	ip, [sp, #20]
   17f54:	beq	18000 <__assert_fail@plt+0x6c78>
   17f58:	ldr	ip, [sp, #72]	; 0x48
   17f5c:	cmp	ip, #0
   17f60:	str	ip, [sp, #24]
   17f64:	beq	18008 <__assert_fail@plt+0x6c80>
   17f68:	ldr	ip, [sp, #76]	; 0x4c
   17f6c:	cmp	ip, #0
   17f70:	str	ip, [sp, #28]
   17f74:	beq	18010 <__assert_fail@plt+0x6c88>
   17f78:	ldr	ip, [sp, #80]	; 0x50
   17f7c:	cmp	ip, #0
   17f80:	str	ip, [sp, #32]
   17f84:	beq	18018 <__assert_fail@plt+0x6c90>
   17f88:	ldr	ip, [sp, #84]	; 0x54
   17f8c:	cmp	ip, #0
   17f90:	str	ip, [sp, #36]	; 0x24
   17f94:	beq	18020 <__assert_fail@plt+0x6c98>
   17f98:	ldr	ip, [sp, #88]	; 0x58
   17f9c:	cmp	ip, #0
   17fa0:	str	ip, [sp, #40]	; 0x28
   17fa4:	beq	18028 <__assert_fail@plt+0x6ca0>
   17fa8:	ldr	ip, [sp, #92]	; 0x5c
   17fac:	cmp	ip, #0
   17fb0:	str	ip, [sp, #44]	; 0x2c
   17fb4:	beq	18030 <__assert_fail@plt+0x6ca8>
   17fb8:	ldr	ip, [sp, #96]	; 0x60
   17fbc:	cmp	ip, #0
   17fc0:	str	ip, [sp, #48]	; 0x30
   17fc4:	beq	18038 <__assert_fail@plt+0x6cb0>
   17fc8:	ldr	r3, [sp, #100]	; 0x64
   17fcc:	cmp	r3, #0
   17fd0:	str	r3, [sp, #52]	; 0x34
   17fd4:	movne	ip, #10
   17fd8:	moveq	ip, #9
   17fdc:	ldr	r3, [sp, #60]	; 0x3c
   17fe0:	add	lr, sp, #16
   17fe4:	str	lr, [sp]
   17fe8:	str	ip, [sp, #4]
   17fec:	bl	179f4 <__assert_fail@plt+0x666c>
   17ff0:	add	sp, sp, #56	; 0x38
   17ff4:	pop	{lr}		; (ldr lr, [sp], #4)
   17ff8:	add	sp, sp, #4
   17ffc:	bx	lr
   18000:	mov	ip, #1
   18004:	b	17fdc <__assert_fail@plt+0x6c54>
   18008:	mov	ip, #2
   1800c:	b	17fdc <__assert_fail@plt+0x6c54>
   18010:	mov	ip, #3
   18014:	b	17fdc <__assert_fail@plt+0x6c54>
   18018:	mov	ip, #4
   1801c:	b	17fdc <__assert_fail@plt+0x6c54>
   18020:	mov	ip, #5
   18024:	b	17fdc <__assert_fail@plt+0x6c54>
   18028:	mov	ip, #6
   1802c:	b	17fdc <__assert_fail@plt+0x6c54>
   18030:	mov	ip, #7
   18034:	b	17fdc <__assert_fail@plt+0x6c54>
   18038:	mov	ip, #8
   1803c:	b	17fdc <__assert_fail@plt+0x6c54>
   18040:	movw	r3, #45460	; 0xb194
   18044:	movt	r3, #2
   18048:	str	r4, [sp, #-8]!
   1804c:	mov	r0, #10
   18050:	ldr	r1, [r3]
   18054:	str	lr, [sp, #4]
   18058:	bl	11118 <fputc_unlocked@plt>
   1805c:	mov	r2, #5
   18060:	movw	r1, #41172	; 0xa0d4
   18064:	movt	r1, #1
   18068:	mov	r0, #0
   1806c:	bl	11124 <dcgettext@plt>
   18070:	mov	r1, r0
   18074:	movw	r2, #41192	; 0xa0e8
   18078:	movt	r2, #1
   1807c:	mov	r0, #1
   18080:	bl	112c8 <__printf_chk@plt>
   18084:	mov	r2, #5
   18088:	movw	r1, #41216	; 0xa100
   1808c:	movt	r1, #1
   18090:	mov	r0, #0
   18094:	bl	11124 <dcgettext@plt>
   18098:	mov	r1, r0
   1809c:	movw	r3, #39416	; 0x99f8
   180a0:	movt	r3, #1
   180a4:	movw	r2, #39456	; 0x9a20
   180a8:	movt	r2, #1
   180ac:	mov	r0, #1
   180b0:	bl	112c8 <__printf_chk@plt>
   180b4:	mov	r2, #5
   180b8:	movw	r1, #41236	; 0xa114
   180bc:	movt	r1, #1
   180c0:	mov	r0, #0
   180c4:	bl	11124 <dcgettext@plt>
   180c8:	mov	r1, r0
   180cc:	movw	r2, #41276	; 0xa13c
   180d0:	movt	r2, #1
   180d4:	mov	r0, #1
   180d8:	ldr	r4, [sp]
   180dc:	ldr	lr, [sp, #4]
   180e0:	add	sp, sp, #8
   180e4:	b	112c8 <__printf_chk@plt>
   180e8:	strd	r4, [sp, #-16]!
   180ec:	mov	r4, r0
   180f0:	mov	r5, r2
   180f4:	str	r6, [sp, #8]
   180f8:	mov	r6, r1
   180fc:	str	lr, [sp, #12]
   18100:	bl	18df4 <_obstack_memory_used@@Base+0x34>
   18104:	cmp	r0, #0
   18108:	beq	1811c <__assert_fail@plt+0x6d94>
   1810c:	ldrd	r4, [sp]
   18110:	ldr	r6, [sp, #8]
   18114:	add	sp, sp, #12
   18118:	pop	{pc}		; (ldr pc, [sp], #4)
   1811c:	cmp	r4, #0
   18120:	beq	18130 <__assert_fail@plt+0x6da8>
   18124:	cmp	r6, #0
   18128:	cmpne	r5, #0
   1812c:	beq	1810c <__assert_fail@plt+0x6d84>
   18130:	bl	186ec <__assert_fail@plt+0x7364>
   18134:	str	r4, [sp, #-8]!
   18138:	str	lr, [sp, #4]
   1813c:	bl	187a4 <__assert_fail@plt+0x741c>
   18140:	cmp	r0, #0
   18144:	beq	18154 <__assert_fail@plt+0x6dcc>
   18148:	ldr	r4, [sp]
   1814c:	add	sp, sp, #4
   18150:	pop	{pc}		; (ldr pc, [sp], #4)
   18154:	bl	186ec <__assert_fail@plt+0x7364>
   18158:	str	r4, [sp, #-8]!
   1815c:	str	lr, [sp, #4]
   18160:	bl	187a4 <__assert_fail@plt+0x741c>
   18164:	cmp	r0, #0
   18168:	beq	18178 <__assert_fail@plt+0x6df0>
   1816c:	ldr	r4, [sp]
   18170:	add	sp, sp, #4
   18174:	pop	{pc}		; (ldr pc, [sp], #4)
   18178:	bl	186ec <__assert_fail@plt+0x7364>
   1817c:	str	r4, [sp, #-8]!
   18180:	str	lr, [sp, #4]
   18184:	bl	187a4 <__assert_fail@plt+0x741c>
   18188:	cmp	r0, #0
   1818c:	beq	1819c <__assert_fail@plt+0x6e14>
   18190:	ldr	r4, [sp]
   18194:	add	sp, sp, #4
   18198:	pop	{pc}		; (ldr pc, [sp], #4)
   1819c:	bl	186ec <__assert_fail@plt+0x7364>
   181a0:	strd	r4, [sp, #-16]!
   181a4:	mov	r5, r0
   181a8:	mov	r4, r1
   181ac:	str	r6, [sp, #8]
   181b0:	str	lr, [sp, #12]
   181b4:	bl	187e0 <__assert_fail@plt+0x7458>
   181b8:	cmp	r0, #0
   181bc:	beq	181d0 <__assert_fail@plt+0x6e48>
   181c0:	ldrd	r4, [sp]
   181c4:	ldr	r6, [sp, #8]
   181c8:	add	sp, sp, #12
   181cc:	pop	{pc}		; (ldr pc, [sp], #4)
   181d0:	adds	r4, r4, #0
   181d4:	movne	r4, #1
   181d8:	cmp	r5, #0
   181dc:	moveq	r4, #1
   181e0:	cmp	r4, #0
   181e4:	beq	181c0 <__assert_fail@plt+0x6e38>
   181e8:	bl	186ec <__assert_fail@plt+0x7364>
   181ec:	cmp	r1, #0
   181f0:	orreq	r1, r1, #1
   181f4:	str	r4, [sp, #-8]!
   181f8:	str	lr, [sp, #4]
   181fc:	bl	187e0 <__assert_fail@plt+0x7458>
   18200:	cmp	r0, #0
   18204:	beq	18214 <__assert_fail@plt+0x6e8c>
   18208:	ldr	r4, [sp]
   1820c:	add	sp, sp, #4
   18210:	pop	{pc}		; (ldr pc, [sp], #4)
   18214:	bl	186ec <__assert_fail@plt+0x7364>
   18218:	strd	r4, [sp, #-16]!
   1821c:	mov	r4, r0
   18220:	mov	r5, r2
   18224:	str	r6, [sp, #8]
   18228:	mov	r6, r1
   1822c:	str	lr, [sp, #12]
   18230:	bl	18df4 <_obstack_memory_used@@Base+0x34>
   18234:	cmp	r0, #0
   18238:	beq	1824c <__assert_fail@plt+0x6ec4>
   1823c:	ldrd	r4, [sp]
   18240:	ldr	r6, [sp, #8]
   18244:	add	sp, sp, #12
   18248:	pop	{pc}		; (ldr pc, [sp], #4)
   1824c:	cmp	r4, #0
   18250:	beq	18260 <__assert_fail@plt+0x6ed8>
   18254:	cmp	r6, #0
   18258:	cmpne	r5, #0
   1825c:	beq	1823c <__assert_fail@plt+0x6eb4>
   18260:	bl	186ec <__assert_fail@plt+0x7364>
   18264:	cmp	r2, #0
   18268:	cmpne	r1, #0
   1826c:	str	r4, [sp, #-8]!
   18270:	moveq	r2, #1
   18274:	str	lr, [sp, #4]
   18278:	moveq	r1, r2
   1827c:	bl	18df4 <_obstack_memory_used@@Base+0x34>
   18280:	cmp	r0, #0
   18284:	beq	18294 <__assert_fail@plt+0x6f0c>
   18288:	ldr	r4, [sp]
   1828c:	add	sp, sp, #4
   18290:	pop	{pc}		; (ldr pc, [sp], #4)
   18294:	bl	186ec <__assert_fail@plt+0x7364>
   18298:	mov	r2, r1
   1829c:	mov	r1, r0
   182a0:	str	r4, [sp, #-8]!
   182a4:	mov	r0, #0
   182a8:	str	lr, [sp, #4]
   182ac:	bl	18df4 <_obstack_memory_used@@Base+0x34>
   182b0:	cmp	r0, #0
   182b4:	beq	182c4 <__assert_fail@plt+0x6f3c>
   182b8:	ldr	r4, [sp]
   182bc:	add	sp, sp, #4
   182c0:	pop	{pc}		; (ldr pc, [sp], #4)
   182c4:	bl	186ec <__assert_fail@plt+0x7364>
   182c8:	cmp	r1, #0
   182cc:	cmpne	r0, #0
   182d0:	str	r4, [sp, #-8]!
   182d4:	moveq	r2, #1
   182d8:	movne	r2, r1
   182dc:	str	lr, [sp, #4]
   182e0:	movne	r1, r0
   182e4:	moveq	r1, r2
   182e8:	mov	r0, #0
   182ec:	bl	18df4 <_obstack_memory_used@@Base+0x34>
   182f0:	cmp	r0, #0
   182f4:	beq	18304 <__assert_fail@plt+0x6f7c>
   182f8:	ldr	r4, [sp]
   182fc:	add	sp, sp, #4
   18300:	pop	{pc}		; (ldr pc, [sp], #4)
   18304:	bl	186ec <__assert_fail@plt+0x7364>
   18308:	cmp	r0, #0
   1830c:	strd	r4, [sp, #-16]!
   18310:	mov	r5, r1
   18314:	ldr	r4, [r1]
   18318:	str	r6, [sp, #8]
   1831c:	str	lr, [sp, #12]
   18320:	beq	18368 <__assert_fail@plt+0x6fe0>
   18324:	lsr	r3, r4, #1
   18328:	add	r3, r3, #1
   1832c:	adds	r4, r4, r3
   18330:	bcs	18364 <__assert_fail@plt+0x6fdc>
   18334:	mov	r2, #1
   18338:	mov	r1, r4
   1833c:	bl	18df4 <_obstack_memory_used@@Base+0x34>
   18340:	cmp	r0, #0
   18344:	beq	1835c <__assert_fail@plt+0x6fd4>
   18348:	ldr	r6, [sp, #8]
   1834c:	str	r4, [r5]
   18350:	ldrd	r4, [sp]
   18354:	add	sp, sp, #12
   18358:	pop	{pc}		; (ldr pc, [sp], #4)
   1835c:	cmp	r4, #0
   18360:	beq	18348 <__assert_fail@plt+0x6fc0>
   18364:	bl	186ec <__assert_fail@plt+0x7364>
   18368:	cmp	r4, #0
   1836c:	mov	r2, #1
   18370:	moveq	r4, #64	; 0x40
   18374:	mov	r1, r4
   18378:	bl	18df4 <_obstack_memory_used@@Base+0x34>
   1837c:	cmp	r0, #0
   18380:	bne	18348 <__assert_fail@plt+0x6fc0>
   18384:	b	18364 <__assert_fail@plt+0x6fdc>
   18388:	cmp	r0, #0
   1838c:	strd	r4, [sp, #-16]!
   18390:	mov	r5, r1
   18394:	ldr	r4, [r1]
   18398:	str	r6, [sp, #8]
   1839c:	mov	r6, r2
   183a0:	str	lr, [sp, #12]
   183a4:	beq	183ec <__assert_fail@plt+0x7064>
   183a8:	lsr	r3, r4, #1
   183ac:	add	r3, r3, #1
   183b0:	adds	r4, r4, r3
   183b4:	bcs	183e8 <__assert_fail@plt+0x7060>
   183b8:	mov	r1, r4
   183bc:	bl	18df4 <_obstack_memory_used@@Base+0x34>
   183c0:	cmp	r0, #0
   183c4:	beq	183dc <__assert_fail@plt+0x7054>
   183c8:	ldr	r6, [sp, #8]
   183cc:	str	r4, [r5]
   183d0:	ldrd	r4, [sp]
   183d4:	add	sp, sp, #12
   183d8:	pop	{pc}		; (ldr pc, [sp], #4)
   183dc:	cmp	r4, #0
   183e0:	cmpne	r6, #0
   183e4:	beq	183c8 <__assert_fail@plt+0x7040>
   183e8:	bl	186ec <__assert_fail@plt+0x7364>
   183ec:	cmp	r4, #0
   183f0:	bne	18404 <__assert_fail@plt+0x707c>
   183f4:	mov	r4, #64	; 0x40
   183f8:	udiv	r4, r4, r2
   183fc:	cmp	r2, #64	; 0x40
   18400:	addhi	r4, r4, #1
   18404:	mov	r2, r6
   18408:	mov	r1, r4
   1840c:	mov	r0, #0
   18410:	bl	18df4 <_obstack_memory_used@@Base+0x34>
   18414:	cmp	r0, #0
   18418:	bne	183c8 <__assert_fail@plt+0x7040>
   1841c:	b	183e8 <__assert_fail@plt+0x7060>
   18420:	ldr	ip, [r1]
   18424:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18428:	strd	r6, [sp, #8]
   1842c:	mov	r7, r1
   18430:	mov	r6, r0
   18434:	str	r8, [sp, #16]
   18438:	mvn	r8, r3
   1843c:	lsr	r8, r8, #31
   18440:	str	lr, [sp, #20]
   18444:	asr	r1, ip, #1
   18448:	ldr	lr, [sp, #24]
   1844c:	adds	r4, ip, r1
   18450:	mvnvs	r4, #-2147483648	; 0x80000000
   18454:	cmp	r3, r4
   18458:	movge	r1, #0
   1845c:	andlt	r1, r8, #1
   18460:	cmp	r1, #0
   18464:	movne	r4, r3
   18468:	smull	r0, r1, r4, lr
   1846c:	cmp	r1, r0, asr #31
   18470:	bne	18520 <__assert_fail@plt+0x7198>
   18474:	cmp	r0, #63	; 0x3f
   18478:	mov	r5, r0
   1847c:	ble	184ec <__assert_fail@plt+0x7164>
   18480:	cmp	r6, #0
   18484:	sub	r1, r4, ip
   18488:	streq	r6, [r7]
   1848c:	cmp	r1, r2
   18490:	bge	184c0 <__assert_fail@plt+0x7138>
   18494:	adds	r4, ip, r2
   18498:	bvs	1851c <__assert_fail@plt+0x7194>
   1849c:	cmp	r4, r3
   184a0:	movle	r3, #0
   184a4:	andgt	r3, r8, #1
   184a8:	cmp	r3, #0
   184ac:	bne	1851c <__assert_fail@plt+0x7194>
   184b0:	smull	r0, r1, r4, lr
   184b4:	cmp	r1, r0, asr #31
   184b8:	mov	r5, r0
   184bc:	bne	1851c <__assert_fail@plt+0x7194>
   184c0:	mov	r1, r5
   184c4:	mov	r0, r6
   184c8:	bl	187e0 <__assert_fail@plt+0x7458>
   184cc:	cmp	r0, #0
   184d0:	beq	18500 <__assert_fail@plt+0x7178>
   184d4:	ldr	r8, [sp, #16]
   184d8:	str	r4, [r7]
   184dc:	ldrd	r4, [sp]
   184e0:	ldrd	r6, [sp, #8]
   184e4:	add	sp, sp, #20
   184e8:	pop	{pc}		; (ldr pc, [sp], #4)
   184ec:	mov	r0, #64	; 0x40
   184f0:	sdiv	r4, r0, lr
   184f4:	mls	r5, lr, r4, r0
   184f8:	sub	r5, r0, r5
   184fc:	b	18480 <__assert_fail@plt+0x70f8>
   18500:	adds	r5, r5, #0
   18504:	movne	r5, #1
   18508:	cmp	r6, #0
   1850c:	movne	r6, r5
   18510:	moveq	r6, #1
   18514:	cmp	r6, #0
   18518:	beq	184d4 <__assert_fail@plt+0x714c>
   1851c:	bl	186ec <__assert_fail@plt+0x7364>
   18520:	mvn	r0, #-2147483648	; 0x80000000
   18524:	b	184f0 <__assert_fail@plt+0x7168>
   18528:	mov	r1, #1
   1852c:	str	r4, [sp, #-8]!
   18530:	str	lr, [sp, #4]
   18534:	bl	18730 <__assert_fail@plt+0x73a8>
   18538:	cmp	r0, #0
   1853c:	beq	1854c <__assert_fail@plt+0x71c4>
   18540:	ldr	r4, [sp]
   18544:	add	sp, sp, #4
   18548:	pop	{pc}		; (ldr pc, [sp], #4)
   1854c:	bl	186ec <__assert_fail@plt+0x7364>
   18550:	mov	r1, #1
   18554:	str	r4, [sp, #-8]!
   18558:	str	lr, [sp, #4]
   1855c:	bl	18730 <__assert_fail@plt+0x73a8>
   18560:	cmp	r0, #0
   18564:	beq	18574 <__assert_fail@plt+0x71ec>
   18568:	ldr	r4, [sp]
   1856c:	add	sp, sp, #4
   18570:	pop	{pc}		; (ldr pc, [sp], #4)
   18574:	bl	186ec <__assert_fail@plt+0x7364>
   18578:	str	r4, [sp, #-8]!
   1857c:	str	lr, [sp, #4]
   18580:	bl	18730 <__assert_fail@plt+0x73a8>
   18584:	cmp	r0, #0
   18588:	beq	18598 <__assert_fail@plt+0x7210>
   1858c:	ldr	r4, [sp]
   18590:	add	sp, sp, #4
   18594:	pop	{pc}		; (ldr pc, [sp], #4)
   18598:	bl	186ec <__assert_fail@plt+0x7364>
   1859c:	str	r4, [sp, #-8]!
   185a0:	str	lr, [sp, #4]
   185a4:	bl	18730 <__assert_fail@plt+0x73a8>
   185a8:	cmp	r0, #0
   185ac:	beq	185bc <__assert_fail@plt+0x7234>
   185b0:	ldr	r4, [sp]
   185b4:	add	sp, sp, #4
   185b8:	pop	{pc}		; (ldr pc, [sp], #4)
   185bc:	bl	186ec <__assert_fail@plt+0x7364>
   185c0:	strd	r4, [sp, #-16]!
   185c4:	mov	r4, r1
   185c8:	str	r6, [sp, #8]
   185cc:	mov	r6, r0
   185d0:	mov	r0, r1
   185d4:	str	lr, [sp, #12]
   185d8:	bl	187a4 <__assert_fail@plt+0x741c>
   185dc:	subs	r5, r0, #0
   185e0:	beq	18604 <__assert_fail@plt+0x727c>
   185e4:	mov	r2, r4
   185e8:	mov	r1, r6
   185ec:	bl	110f4 <memcpy@plt>
   185f0:	mov	r0, r5
   185f4:	ldrd	r4, [sp]
   185f8:	ldr	r6, [sp, #8]
   185fc:	add	sp, sp, #12
   18600:	pop	{pc}		; (ldr pc, [sp], #4)
   18604:	bl	186ec <__assert_fail@plt+0x7364>
   18608:	strd	r4, [sp, #-16]!
   1860c:	mov	r4, r1
   18610:	str	r6, [sp, #8]
   18614:	mov	r6, r0
   18618:	mov	r0, r1
   1861c:	str	lr, [sp, #12]
   18620:	bl	187a4 <__assert_fail@plt+0x741c>
   18624:	subs	r5, r0, #0
   18628:	beq	1864c <__assert_fail@plt+0x72c4>
   1862c:	mov	r2, r4
   18630:	mov	r1, r6
   18634:	bl	110f4 <memcpy@plt>
   18638:	mov	r0, r5
   1863c:	ldrd	r4, [sp]
   18640:	ldr	r6, [sp, #8]
   18644:	add	sp, sp, #12
   18648:	pop	{pc}		; (ldr pc, [sp], #4)
   1864c:	bl	186ec <__assert_fail@plt+0x7364>
   18650:	strd	r4, [sp, #-16]!
   18654:	mov	r4, r1
   18658:	str	r6, [sp, #8]
   1865c:	mov	r6, r0
   18660:	add	r0, r1, #1
   18664:	str	lr, [sp, #12]
   18668:	bl	187a4 <__assert_fail@plt+0x741c>
   1866c:	subs	r5, r0, #0
   18670:	beq	1869c <__assert_fail@plt+0x7314>
   18674:	mov	r3, #0
   18678:	mov	r1, r6
   1867c:	mov	r2, r4
   18680:	strb	r3, [r5, r4]
   18684:	bl	110f4 <memcpy@plt>
   18688:	mov	r0, r5
   1868c:	ldrd	r4, [sp]
   18690:	ldr	r6, [sp, #8]
   18694:	add	sp, sp, #12
   18698:	pop	{pc}		; (ldr pc, [sp], #4)
   1869c:	bl	186ec <__assert_fail@plt+0x7364>
   186a0:	strd	r4, [sp, #-16]!
   186a4:	str	r6, [sp, #8]
   186a8:	mov	r6, r0
   186ac:	str	lr, [sp, #12]
   186b0:	bl	1125c <strlen@plt>
   186b4:	add	r4, r0, #1
   186b8:	mov	r0, r4
   186bc:	bl	187a4 <__assert_fail@plt+0x741c>
   186c0:	subs	r5, r0, #0
   186c4:	beq	186e8 <__assert_fail@plt+0x7360>
   186c8:	mov	r2, r4
   186cc:	mov	r1, r6
   186d0:	bl	110f4 <memcpy@plt>
   186d4:	mov	r0, r5
   186d8:	ldrd	r4, [sp]
   186dc:	ldr	r6, [sp, #8]
   186e0:	add	sp, sp, #12
   186e4:	pop	{pc}		; (ldr pc, [sp], #4)
   186e8:	bl	186ec <__assert_fail@plt+0x7364>
   186ec:	movw	r3, #45356	; 0xb12c
   186f0:	movt	r3, #2
   186f4:	str	r4, [sp, #-8]!
   186f8:	ldr	r4, [r3]
   186fc:	mov	r2, #5
   18700:	movw	r1, #41356	; 0xa18c
   18704:	movt	r1, #1
   18708:	mov	r0, #0
   1870c:	str	lr, [sp, #4]
   18710:	bl	11124 <dcgettext@plt>
   18714:	mov	r3, r0
   18718:	movw	r2, #40240	; 0x9d30
   1871c:	movt	r2, #1
   18720:	mov	r1, #0
   18724:	mov	r0, r4
   18728:	bl	111c0 <error@plt>
   1872c:	bl	11370 <abort@plt>
   18730:	cmp	r1, #0
   18734:	cmpne	r0, #0
   18738:	beq	18784 <__assert_fail@plt+0x73fc>
   1873c:	strd	r4, [sp, #-16]!
   18740:	umull	r4, r5, r0, r1
   18744:	str	r6, [sp, #8]
   18748:	str	lr, [sp, #12]
   1874c:	adds	r3, r5, #0
   18750:	movne	r3, #1
   18754:	cmp	r4, #0
   18758:	blt	18764 <__assert_fail@plt+0x73dc>
   1875c:	cmp	r3, #0
   18760:	beq	18790 <__assert_fail@plt+0x7408>
   18764:	bl	11280 <__errno_location@plt>
   18768:	mov	r3, #12
   1876c:	ldrd	r4, [sp]
   18770:	ldr	r6, [sp, #8]
   18774:	add	sp, sp, #12
   18778:	str	r3, [r0]
   1877c:	mov	r0, #0
   18780:	pop	{pc}		; (ldr pc, [sp], #4)
   18784:	mov	r1, #1
   18788:	mov	r0, r1
   1878c:	b	11064 <calloc@plt>
   18790:	ldrd	r4, [sp]
   18794:	ldr	r6, [sp, #8]
   18798:	ldr	lr, [sp, #12]
   1879c:	add	sp, sp, #16
   187a0:	b	11064 <calloc@plt>
   187a4:	cmp	r0, #0
   187a8:	beq	187b4 <__assert_fail@plt+0x742c>
   187ac:	blt	187bc <__assert_fail@plt+0x7434>
   187b0:	b	111f0 <malloc@plt>
   187b4:	mov	r0, #1
   187b8:	b	111f0 <malloc@plt>
   187bc:	str	r4, [sp, #-8]!
   187c0:	str	lr, [sp, #4]
   187c4:	bl	11280 <__errno_location@plt>
   187c8:	mov	r3, #12
   187cc:	ldr	r4, [sp]
   187d0:	add	sp, sp, #4
   187d4:	str	r3, [r0]
   187d8:	mov	r0, #0
   187dc:	pop	{pc}		; (ldr pc, [sp], #4)
   187e0:	cmp	r0, #0
   187e4:	beq	1880c <__assert_fail@plt+0x7484>
   187e8:	cmp	r1, #0
   187ec:	str	r4, [sp, #-8]!
   187f0:	str	lr, [sp, #4]
   187f4:	beq	18814 <__assert_fail@plt+0x748c>
   187f8:	blt	18828 <__assert_fail@plt+0x74a0>
   187fc:	ldr	r4, [sp]
   18800:	ldr	lr, [sp, #4]
   18804:	add	sp, sp, #8
   18808:	b	1113c <realloc@plt>
   1880c:	mov	r0, r1
   18810:	b	187a4 <__assert_fail@plt+0x741c>
   18814:	bl	13638 <__assert_fail@plt+0x22b0>
   18818:	ldr	r4, [sp]
   1881c:	add	sp, sp, #4
   18820:	mov	r0, #0
   18824:	pop	{pc}		; (ldr pc, [sp], #4)
   18828:	bl	11280 <__errno_location@plt>
   1882c:	mov	r3, #12
   18830:	str	r3, [r0]
   18834:	b	18818 <__assert_fail@plt+0x7490>
   18838:	strd	r4, [sp, #-16]!
   1883c:	mov	r4, r0
   18840:	str	r6, [sp, #8]
   18844:	str	lr, [sp, #12]
   18848:	bl	111a8 <__fpending@plt>
   1884c:	ldr	r5, [r4]
   18850:	mov	r6, r0
   18854:	mov	r0, r4
   18858:	bl	13524 <__assert_fail@plt+0x219c>
   1885c:	mov	r4, r0
   18860:	and	r5, r5, #32
   18864:	cmp	r5, #0
   18868:	bne	188a0 <__assert_fail@plt+0x7518>
   1886c:	cmp	r0, #0
   18870:	beq	1888c <__assert_fail@plt+0x7504>
   18874:	cmp	r6, #0
   18878:	bne	188b8 <__assert_fail@plt+0x7530>
   1887c:	bl	11280 <__errno_location@plt>
   18880:	ldr	r4, [r0]
   18884:	subs	r4, r4, #9
   18888:	mvnne	r4, #0
   1888c:	mov	r0, r4
   18890:	ldrd	r4, [sp]
   18894:	ldr	r6, [sp, #8]
   18898:	add	sp, sp, #12
   1889c:	pop	{pc}		; (ldr pc, [sp], #4)
   188a0:	cmp	r0, #0
   188a4:	bne	188b8 <__assert_fail@plt+0x7530>
   188a8:	bl	11280 <__errno_location@plt>
   188ac:	str	r4, [r0]
   188b0:	mvn	r4, #0
   188b4:	b	1888c <__assert_fail@plt+0x7504>
   188b8:	mvn	r4, #0
   188bc:	b	1888c <__assert_fail@plt+0x7504>
   188c0:	push	{lr}		; (str lr, [sp, #-4]!)
   188c4:	sub	sp, sp, #268	; 0x10c
   188c8:	movw	r2, #257	; 0x101
   188cc:	add	r1, sp, #4
   188d0:	bl	18e2c <_obstack_memory_used@@Base+0x6c>
   188d4:	cmp	r0, #0
   188d8:	movne	r0, #0
   188dc:	bne	18910 <__assert_fail@plt+0x7588>
   188e0:	movw	r1, #41376	; 0xa1a0
   188e4:	movt	r1, #1
   188e8:	add	r0, sp, #4
   188ec:	bl	11088 <strcmp@plt>
   188f0:	cmp	r0, #0
   188f4:	beq	18910 <__assert_fail@plt+0x7588>
   188f8:	add	r0, sp, #4
   188fc:	movw	r1, #41380	; 0xa1a4
   18900:	movt	r1, #1
   18904:	bl	11088 <strcmp@plt>
   18908:	adds	r0, r0, #0
   1890c:	movne	r0, #1
   18910:	add	sp, sp, #268	; 0x10c
   18914:	pop	{pc}		; (ldr pc, [sp], #4)
   18918:	mov	r0, #14
   1891c:	str	r4, [sp, #-8]!
   18920:	str	lr, [sp, #4]
   18924:	bl	11328 <nl_langinfo@plt>
   18928:	cmp	r0, #0
   1892c:	beq	18950 <__assert_fail@plt+0x75c8>
   18930:	ldrb	r2, [r0]
   18934:	movw	r3, #41388	; 0xa1ac
   18938:	movt	r3, #1
   1893c:	ldr	r4, [sp]
   18940:	add	sp, sp, #4
   18944:	cmp	r2, #0
   18948:	moveq	r0, r3
   1894c:	pop	{pc}		; (ldr pc, [sp], #4)
   18950:	ldr	r4, [sp]
   18954:	add	sp, sp, #4
   18958:	movw	r0, #41388	; 0xa1ac
   1895c:	movt	r0, #1
   18960:	pop	{pc}		; (ldr pc, [sp], #4)
   18964:	movw	r3, #45448	; 0xb188
   18968:	movt	r3, #2
   1896c:	str	r4, [sp, #-8]!
   18970:	ldr	r4, [r3]
   18974:	mov	r2, #5
   18978:	movw	r1, #41356	; 0xa18c
   1897c:	movt	r1, #1
   18980:	mov	r0, #0
   18984:	str	lr, [sp, #4]
   18988:	bl	11124 <dcgettext@plt>
   1898c:	mov	r3, r0
   18990:	movw	r2, #40568	; 0x9e78
   18994:	movt	r2, #1
   18998:	mov	r1, #1
   1899c:	mov	r0, r4
   189a0:	bl	112e0 <__fprintf_chk@plt>
   189a4:	movw	r3, #45356	; 0xb12c
   189a8:	movt	r3, #2
   189ac:	ldr	r0, [r3]
   189b0:	bl	11238 <exit@plt>

000189b4 <_obstack_begin@@Base>:
   189b4:	strd	r4, [sp, #-16]!
   189b8:	subs	r5, r2, #0
   189bc:	mov	r4, r0
   189c0:	ldrb	r2, [r0, #40]	; 0x28
   189c4:	moveq	r5, #8
   189c8:	str	r6, [sp, #8]
   189cc:	subne	r6, r5, #1
   189d0:	moveq	r6, #7
   189d4:	ldr	r0, [sp, #16]
   189d8:	cmp	r1, #0
   189dc:	str	lr, [sp, #12]
   189e0:	str	r6, [r4, #24]
   189e4:	bfc	r2, #0, #1
   189e8:	str	r3, [r4, #28]
   189ec:	str	r0, [r4, #32]
   189f0:	movw	r0, #4072	; 0xfe8
   189f4:	strb	r2, [r4, #40]	; 0x28
   189f8:	moveq	r1, r0
   189fc:	ldrb	r2, [r4, #40]	; 0x28
   18a00:	str	r1, [r4]
   18a04:	tst	r2, #1
   18a08:	beq	18a74 <_obstack_begin@@Base+0xc0>
   18a0c:	ldr	r0, [r4, #36]	; 0x24
   18a10:	blx	r3
   18a14:	mov	r3, r0
   18a18:	cmp	r3, #0
   18a1c:	str	r3, [r4, #4]
   18a20:	beq	18a84 <_obstack_begin@@Base+0xd0>
   18a24:	ldrb	lr, [r4, #40]	; 0x28
   18a28:	add	r1, r3, #8
   18a2c:	rsb	r2, r5, #0
   18a30:	add	r1, r1, r6
   18a34:	mov	r5, #0
   18a38:	ldr	ip, [r4]
   18a3c:	and	r2, r2, r1
   18a40:	mov	r0, #1
   18a44:	ldr	r6, [sp, #8]
   18a48:	bic	lr, lr, #6
   18a4c:	str	r2, [r4, #8]
   18a50:	str	r2, [r4, #12]
   18a54:	add	r2, r3, ip
   18a58:	str	r2, [r3]
   18a5c:	str	r2, [r4, #16]
   18a60:	str	r5, [r3, #4]
   18a64:	strb	lr, [r4, #40]	; 0x28
   18a68:	ldrd	r4, [sp]
   18a6c:	add	sp, sp, #12
   18a70:	pop	{pc}		; (ldr pc, [sp], #4)
   18a74:	mov	r0, r1
   18a78:	blx	r3
   18a7c:	mov	r3, r0
   18a80:	b	18a18 <_obstack_begin@@Base+0x64>
   18a84:	movw	r3, #45424	; 0xb170
   18a88:	movt	r3, #2
   18a8c:	ldr	r3, [r3]
   18a90:	blx	r3

00018a94 <_obstack_begin_1@@Base>:
   18a94:	strd	r4, [sp, #-16]!
   18a98:	subs	r5, r2, #0
   18a9c:	mov	r4, r0
   18aa0:	ldrb	r2, [r0, #40]	; 0x28
   18aa4:	moveq	r5, #8
   18aa8:	str	r6, [sp, #8]
   18aac:	subne	r6, r5, #1
   18ab0:	moveq	r6, #7
   18ab4:	ldr	ip, [sp, #16]
   18ab8:	cmp	r1, #0
   18abc:	str	lr, [sp, #12]
   18ac0:	str	r3, [r0, #28]
   18ac4:	orr	r2, r2, #1
   18ac8:	str	ip, [r0, #32]
   18acc:	movw	ip, #4072	; 0xfe8
   18ad0:	strb	r2, [r0, #40]	; 0x28
   18ad4:	moveq	r1, ip
   18ad8:	ldrb	r2, [r4, #40]	; 0x28
   18adc:	str	r1, [r4]
   18ae0:	ldr	r0, [sp, #20]
   18ae4:	str	r6, [r4, #24]
   18ae8:	tst	r2, #1
   18aec:	str	r0, [r4, #36]	; 0x24
   18af0:	beq	18b58 <_obstack_begin_1@@Base+0xc4>
   18af4:	blx	r3
   18af8:	mov	r3, r0
   18afc:	cmp	r3, #0
   18b00:	str	r3, [r4, #4]
   18b04:	beq	18b68 <_obstack_begin_1@@Base+0xd4>
   18b08:	ldrb	lr, [r4, #40]	; 0x28
   18b0c:	add	r1, r3, #8
   18b10:	rsb	r2, r5, #0
   18b14:	add	r1, r1, r6
   18b18:	mov	r5, #0
   18b1c:	ldr	ip, [r4]
   18b20:	and	r2, r2, r1
   18b24:	mov	r0, #1
   18b28:	ldr	r6, [sp, #8]
   18b2c:	bic	lr, lr, #6
   18b30:	str	r2, [r4, #8]
   18b34:	str	r2, [r4, #12]
   18b38:	add	r2, r3, ip
   18b3c:	str	r2, [r3]
   18b40:	str	r2, [r4, #16]
   18b44:	str	r5, [r3, #4]
   18b48:	strb	lr, [r4, #40]	; 0x28
   18b4c:	ldrd	r4, [sp]
   18b50:	add	sp, sp, #12
   18b54:	pop	{pc}		; (ldr pc, [sp], #4)
   18b58:	mov	r0, r1
   18b5c:	blx	r3
   18b60:	mov	r3, r0
   18b64:	b	18afc <_obstack_begin_1@@Base+0x68>
   18b68:	movw	r3, #45424	; 0xb170
   18b6c:	movt	r3, #2
   18b70:	ldr	r3, [r3]
   18b74:	blx	r3

00018b78 <_obstack_newchunk@@Base>:
   18b78:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18b7c:	mov	r4, r0
   18b80:	ldr	ip, [r0]
   18b84:	ldr	r2, [r0, #8]
   18b88:	ldr	r3, [r0, #24]
   18b8c:	strd	r6, [sp, #8]
   18b90:	ldr	r7, [r0, #4]
   18b94:	str	r8, [sp, #16]
   18b98:	ldr	r6, [r0, #12]
   18b9c:	str	lr, [sp, #20]
   18ba0:	sub	r6, r6, r2
   18ba4:	adds	r1, r6, r1
   18ba8:	movcs	r0, #1
   18bac:	movcc	r0, #0
   18bb0:	adds	r3, r3, r1
   18bb4:	eor	r0, r0, #1
   18bb8:	add	r5, r3, r6, lsr #3
   18bbc:	movcs	r2, #1
   18bc0:	movcc	r2, #0
   18bc4:	cmp	r3, ip
   18bc8:	eor	r2, r2, #1
   18bcc:	add	r5, r5, #100	; 0x64
   18bd0:	movcc	r3, ip
   18bd4:	cmp	r3, r5
   18bd8:	movcs	r5, r3
   18bdc:	tst	r0, r2
   18be0:	beq	18cd4 <_obstack_newchunk@@Base+0x15c>
   18be4:	ldrb	r3, [r4, #40]	; 0x28
   18be8:	ldr	r2, [r4, #28]
   18bec:	tst	r3, #1
   18bf0:	bne	18c90 <_obstack_newchunk@@Base+0x118>
   18bf4:	mov	r0, r5
   18bf8:	blx	r2
   18bfc:	mov	r8, r0
   18c00:	cmp	r8, #0
   18c04:	beq	18cd4 <_obstack_newchunk@@Base+0x15c>
   18c08:	add	r3, r8, r5
   18c0c:	mov	r5, r8
   18c10:	str	r8, [r4, #4]
   18c14:	ldr	r0, [r4, #24]
   18c18:	mov	r2, r6
   18c1c:	ldr	r1, [r4, #8]
   18c20:	str	r7, [r8, #4]
   18c24:	str	r3, [r4, #16]
   18c28:	str	r3, [r5], #8
   18c2c:	add	r5, r5, r0
   18c30:	bic	r5, r5, r0
   18c34:	mov	r0, r5
   18c38:	bl	110f4 <memcpy@plt>
   18c3c:	ldrb	r2, [r4, #40]	; 0x28
   18c40:	tst	r2, #2
   18c44:	bne	18c64 <_obstack_newchunk@@Base+0xec>
   18c48:	ldr	r0, [r4, #8]
   18c4c:	add	r3, r7, #8
   18c50:	ldr	r1, [r4, #24]
   18c54:	add	r3, r3, r1
   18c58:	bic	r3, r3, r1
   18c5c:	cmp	r0, r3
   18c60:	beq	18ca4 <_obstack_newchunk@@Base+0x12c>
   18c64:	ldrb	r3, [r4, #40]	; 0x28
   18c68:	add	r6, r5, r6
   18c6c:	ldr	r8, [sp, #16]
   18c70:	str	r5, [r4, #8]
   18c74:	str	r6, [r4, #12]
   18c78:	bfc	r3, #1, #1
   18c7c:	ldrd	r6, [sp, #8]
   18c80:	strb	r3, [r4, #40]	; 0x28
   18c84:	ldrd	r4, [sp]
   18c88:	add	sp, sp, #20
   18c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   18c90:	mov	r1, r5
   18c94:	ldr	r0, [r4, #36]	; 0x24
   18c98:	blx	r2
   18c9c:	mov	r8, r0
   18ca0:	b	18c00 <_obstack_newchunk@@Base+0x88>
   18ca4:	ldr	r3, [r7, #4]
   18ca8:	tst	r2, #1
   18cac:	ldr	r2, [r4, #32]
   18cb0:	str	r3, [r8, #4]
   18cb4:	beq	18cc8 <_obstack_newchunk@@Base+0x150>
   18cb8:	mov	r1, r7
   18cbc:	ldr	r0, [r4, #36]	; 0x24
   18cc0:	blx	r2
   18cc4:	b	18c64 <_obstack_newchunk@@Base+0xec>
   18cc8:	mov	r0, r7
   18ccc:	blx	r2
   18cd0:	b	18c64 <_obstack_newchunk@@Base+0xec>
   18cd4:	movw	r3, #45424	; 0xb170
   18cd8:	movt	r3, #2
   18cdc:	ldr	r3, [r3]
   18ce0:	blx	r3

00018ce4 <_obstack_allocated_p@@Base>:
   18ce4:	ldr	r0, [r0, #4]
   18ce8:	cmp	r0, #0
   18cec:	beq	18d1c <_obstack_allocated_p@@Base+0x38>
   18cf0:	cmp	r1, r0
   18cf4:	bls	18d04 <_obstack_allocated_p@@Base+0x20>
   18cf8:	ldr	r3, [r0]
   18cfc:	cmp	r3, r1
   18d00:	bcs	18d14 <_obstack_allocated_p@@Base+0x30>
   18d04:	ldr	r0, [r0, #4]
   18d08:	cmp	r0, #0
   18d0c:	bne	18cf0 <_obstack_allocated_p@@Base+0xc>
   18d10:	bx	lr
   18d14:	mov	r0, #1
   18d18:	bx	lr
   18d1c:	bx	lr

00018d20 <_obstack_free@@Base>:
   18d20:	strd	r4, [sp, #-16]!
   18d24:	str	r6, [sp, #8]
   18d28:	mov	r6, r1
   18d2c:	ldr	r1, [r0, #4]
   18d30:	str	lr, [sp, #12]
   18d34:	cmp	r1, #0
   18d38:	movne	r4, r0
   18d3c:	bne	18d64 <_obstack_free@@Base+0x44>
   18d40:	b	18db4 <_obstack_free@@Base+0x94>
   18d44:	ldr	r0, [r4, #36]	; 0x24
   18d48:	blx	r3
   18d4c:	ldrb	r3, [r4, #40]	; 0x28
   18d50:	cmp	r5, #0
   18d54:	orr	r3, r3, #2
   18d58:	strb	r3, [r4, #40]	; 0x28
   18d5c:	beq	18db4 <_obstack_free@@Base+0x94>
   18d60:	mov	r1, r5
   18d64:	cmp	r1, r6
   18d68:	bcs	18d78 <_obstack_free@@Base+0x58>
   18d6c:	ldr	r3, [r1]
   18d70:	cmp	r3, r6
   18d74:	bcs	18d98 <_obstack_free@@Base+0x78>
   18d78:	ldrb	r2, [r4, #40]	; 0x28
   18d7c:	ldr	r5, [r1, #4]
   18d80:	ldr	r3, [r4, #32]
   18d84:	tst	r2, #1
   18d88:	bne	18d44 <_obstack_free@@Base+0x24>
   18d8c:	mov	r0, r1
   18d90:	blx	r3
   18d94:	b	18d4c <_obstack_free@@Base+0x2c>
   18d98:	stmib	r4, {r1, r6}
   18d9c:	str	r6, [r4, #12]
   18da0:	str	r3, [r4, #16]
   18da4:	ldrd	r4, [sp]
   18da8:	ldr	r6, [sp, #8]
   18dac:	add	sp, sp, #12
   18db0:	pop	{pc}		; (ldr pc, [sp], #4)
   18db4:	cmp	r6, #0
   18db8:	beq	18da4 <_obstack_free@@Base+0x84>
   18dbc:	bl	11370 <abort@plt>

00018dc0 <_obstack_memory_used@@Base>:
   18dc0:	ldr	r3, [r0, #4]
   18dc4:	cmp	r3, #0
   18dc8:	beq	18dec <_obstack_memory_used@@Base+0x2c>
   18dcc:	mov	r0, #0
   18dd0:	ldr	r2, [r3]
   18dd4:	sub	r2, r2, r3
   18dd8:	ldr	r3, [r3, #4]
   18ddc:	add	r0, r0, r2
   18de0:	cmp	r3, #0
   18de4:	bne	18dd0 <_obstack_memory_used@@Base+0x10>
   18de8:	bx	lr
   18dec:	mov	r0, r3
   18df0:	bx	lr
   18df4:	umull	r2, r3, r1, r2
   18df8:	cmp	r3, #0
   18dfc:	bne	18e08 <_obstack_memory_used@@Base+0x48>
   18e00:	mov	r1, r2
   18e04:	b	187e0 <__assert_fail@plt+0x7458>
   18e08:	str	r4, [sp, #-8]!
   18e0c:	str	lr, [sp, #4]
   18e10:	bl	11280 <__errno_location@plt>
   18e14:	mov	r3, #12
   18e18:	ldr	r4, [sp]
   18e1c:	add	sp, sp, #4
   18e20:	str	r3, [r0]
   18e24:	mov	r0, #0
   18e28:	pop	{pc}		; (ldr pc, [sp], #4)
   18e2c:	strd	r4, [sp, #-16]!
   18e30:	mov	r5, r1
   18e34:	mov	r1, #0
   18e38:	mov	r4, r2
   18e3c:	str	r6, [sp, #8]
   18e40:	str	lr, [sp, #12]
   18e44:	bl	11310 <setlocale@plt>
   18e48:	subs	r6, r0, #0
   18e4c:	beq	18ecc <_obstack_memory_used@@Base+0x10c>
   18e50:	bl	1125c <strlen@plt>
   18e54:	cmp	r4, r0
   18e58:	bhi	18e78 <_obstack_memory_used@@Base+0xb8>
   18e5c:	cmp	r4, #0
   18e60:	moveq	r0, #34	; 0x22
   18e64:	bne	18e9c <_obstack_memory_used@@Base+0xdc>
   18e68:	ldrd	r4, [sp]
   18e6c:	ldr	r6, [sp, #8]
   18e70:	add	sp, sp, #12
   18e74:	pop	{pc}		; (ldr pc, [sp], #4)
   18e78:	add	r2, r0, #1
   18e7c:	mov	r1, r6
   18e80:	mov	r0, r5
   18e84:	bl	110f4 <memcpy@plt>
   18e88:	ldrd	r4, [sp]
   18e8c:	mov	r0, #0
   18e90:	ldr	r6, [sp, #8]
   18e94:	add	sp, sp, #12
   18e98:	pop	{pc}		; (ldr pc, [sp], #4)
   18e9c:	sub	r4, r4, #1
   18ea0:	mov	r1, r6
   18ea4:	mov	r2, r4
   18ea8:	mov	r0, r5
   18eac:	bl	110f4 <memcpy@plt>
   18eb0:	mov	r3, #0
   18eb4:	mov	r0, #34	; 0x22
   18eb8:	strb	r3, [r5, r4]
   18ebc:	ldrd	r4, [sp]
   18ec0:	ldr	r6, [sp, #8]
   18ec4:	add	sp, sp, #12
   18ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   18ecc:	cmp	r4, #0
   18ed0:	mov	r0, #22
   18ed4:	strbne	r6, [r5]
   18ed8:	ldrd	r4, [sp]
   18edc:	ldr	r6, [sp, #8]
   18ee0:	add	sp, sp, #12
   18ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   18ee8:	mov	r1, #0
   18eec:	b	11310 <setlocale@plt>
   18ef0:	eor	r1, r1, #-2147483648	; 0x80000000
   18ef4:	b	18efc <_obstack_memory_used@@Base+0x13c>
   18ef8:	eor	r3, r3, #-2147483648	; 0x80000000
   18efc:	push	{r4, r5, lr}
   18f00:	lsl	r4, r1, #1
   18f04:	lsl	r5, r3, #1
   18f08:	teq	r4, r5
   18f0c:	teqeq	r0, r2
   18f10:	orrsne	ip, r4, r0
   18f14:	orrsne	ip, r5, r2
   18f18:	mvnsne	ip, r4, asr #21
   18f1c:	mvnsne	ip, r5, asr #21
   18f20:	beq	1910c <_obstack_memory_used@@Base+0x34c>
   18f24:	lsr	r4, r4, #21
   18f28:	rsbs	r5, r4, r5, lsr #21
   18f2c:	rsblt	r5, r5, #0
   18f30:	ble	18f50 <_obstack_memory_used@@Base+0x190>
   18f34:	add	r4, r4, r5
   18f38:	eor	r2, r0, r2
   18f3c:	eor	r3, r1, r3
   18f40:	eor	r0, r2, r0
   18f44:	eor	r1, r3, r1
   18f48:	eor	r2, r0, r2
   18f4c:	eor	r3, r1, r3
   18f50:	cmp	r5, #54	; 0x36
   18f54:	pophi	{r4, r5, pc}
   18f58:	tst	r1, #-2147483648	; 0x80000000
   18f5c:	lsl	r1, r1, #12
   18f60:	mov	ip, #1048576	; 0x100000
   18f64:	orr	r1, ip, r1, lsr #12
   18f68:	beq	18f74 <_obstack_memory_used@@Base+0x1b4>
   18f6c:	rsbs	r0, r0, #0
   18f70:	rsc	r1, r1, #0
   18f74:	tst	r3, #-2147483648	; 0x80000000
   18f78:	lsl	r3, r3, #12
   18f7c:	orr	r3, ip, r3, lsr #12
   18f80:	beq	18f8c <_obstack_memory_used@@Base+0x1cc>
   18f84:	rsbs	r2, r2, #0
   18f88:	rsc	r3, r3, #0
   18f8c:	teq	r4, r5
   18f90:	beq	190f4 <_obstack_memory_used@@Base+0x334>
   18f94:	sub	r4, r4, #1
   18f98:	rsbs	lr, r5, #32
   18f9c:	blt	18fb8 <_obstack_memory_used@@Base+0x1f8>
   18fa0:	lsl	ip, r2, lr
   18fa4:	adds	r0, r0, r2, lsr r5
   18fa8:	adc	r1, r1, #0
   18fac:	adds	r0, r0, r3, lsl lr
   18fb0:	adcs	r1, r1, r3, asr r5
   18fb4:	b	18fd4 <_obstack_memory_used@@Base+0x214>
   18fb8:	sub	r5, r5, #32
   18fbc:	add	lr, lr, #32
   18fc0:	cmp	r2, #1
   18fc4:	lsl	ip, r3, lr
   18fc8:	orrcs	ip, ip, #2
   18fcc:	adds	r0, r0, r3, asr r5
   18fd0:	adcs	r1, r1, r3, asr #31
   18fd4:	and	r5, r1, #-2147483648	; 0x80000000
   18fd8:	bpl	18fe8 <_obstack_memory_used@@Base+0x228>
   18fdc:	rsbs	ip, ip, #0
   18fe0:	rscs	r0, r0, #0
   18fe4:	rsc	r1, r1, #0
   18fe8:	cmp	r1, #1048576	; 0x100000
   18fec:	bcc	1902c <_obstack_memory_used@@Base+0x26c>
   18ff0:	cmp	r1, #2097152	; 0x200000
   18ff4:	bcc	19014 <_obstack_memory_used@@Base+0x254>
   18ff8:	lsrs	r1, r1, #1
   18ffc:	rrxs	r0, r0
   19000:	rrx	ip, ip
   19004:	add	r4, r4, #1
   19008:	lsl	r2, r4, #21
   1900c:	cmn	r2, #4194304	; 0x400000
   19010:	bcs	1916c <_obstack_memory_used@@Base+0x3ac>
   19014:	cmp	ip, #-2147483648	; 0x80000000
   19018:	lsrseq	ip, r0, #1
   1901c:	adcs	r0, r0, #0
   19020:	adc	r1, r1, r4, lsl #20
   19024:	orr	r1, r1, r5
   19028:	pop	{r4, r5, pc}
   1902c:	lsls	ip, ip, #1
   19030:	adcs	r0, r0, r0
   19034:	adc	r1, r1, r1
   19038:	tst	r1, #1048576	; 0x100000
   1903c:	sub	r4, r4, #1
   19040:	bne	19014 <_obstack_memory_used@@Base+0x254>
   19044:	teq	r1, #0
   19048:	moveq	r1, r0
   1904c:	moveq	r0, #0
   19050:	clz	r3, r1
   19054:	addeq	r3, r3, #32
   19058:	sub	r3, r3, #11
   1905c:	subs	r2, r3, #32
   19060:	bge	19084 <_obstack_memory_used@@Base+0x2c4>
   19064:	adds	r2, r2, #12
   19068:	ble	19080 <_obstack_memory_used@@Base+0x2c0>
   1906c:	add	ip, r2, #20
   19070:	rsb	r2, r2, #12
   19074:	lsl	r0, r1, ip
   19078:	lsr	r1, r1, r2
   1907c:	b	19094 <_obstack_memory_used@@Base+0x2d4>
   19080:	add	r2, r2, #20
   19084:	rsble	ip, r2, #32
   19088:	lsl	r1, r1, r2
   1908c:	orrle	r1, r1, r0, lsr ip
   19090:	lslle	r0, r0, r2
   19094:	subs	r4, r4, r3
   19098:	addge	r1, r1, r4, lsl #20
   1909c:	orrge	r1, r1, r5
   190a0:	popge	{r4, r5, pc}
   190a4:	mvn	r4, r4
   190a8:	subs	r4, r4, #31
   190ac:	bge	190e8 <_obstack_memory_used@@Base+0x328>
   190b0:	adds	r4, r4, #12
   190b4:	bgt	190d0 <_obstack_memory_used@@Base+0x310>
   190b8:	add	r4, r4, #20
   190bc:	rsb	r2, r4, #32
   190c0:	lsr	r0, r0, r4
   190c4:	orr	r0, r0, r1, lsl r2
   190c8:	orr	r1, r5, r1, lsr r4
   190cc:	pop	{r4, r5, pc}
   190d0:	rsb	r4, r4, #12
   190d4:	rsb	r2, r4, #32
   190d8:	lsr	r0, r0, r2
   190dc:	orr	r0, r0, r1, lsl r4
   190e0:	mov	r1, r5
   190e4:	pop	{r4, r5, pc}
   190e8:	lsr	r0, r1, r4
   190ec:	mov	r1, r5
   190f0:	pop	{r4, r5, pc}
   190f4:	teq	r4, #0
   190f8:	eor	r3, r3, #1048576	; 0x100000
   190fc:	eoreq	r1, r1, #1048576	; 0x100000
   19100:	addeq	r4, r4, #1
   19104:	subne	r5, r5, #1
   19108:	b	18f94 <_obstack_memory_used@@Base+0x1d4>
   1910c:	mvns	ip, r4, asr #21
   19110:	mvnsne	ip, r5, asr #21
   19114:	beq	1917c <_obstack_memory_used@@Base+0x3bc>
   19118:	teq	r4, r5
   1911c:	teqeq	r0, r2
   19120:	beq	19134 <_obstack_memory_used@@Base+0x374>
   19124:	orrs	ip, r4, r0
   19128:	moveq	r1, r3
   1912c:	moveq	r0, r2
   19130:	pop	{r4, r5, pc}
   19134:	teq	r1, r3
   19138:	movne	r1, #0
   1913c:	movne	r0, #0
   19140:	popne	{r4, r5, pc}
   19144:	lsrs	ip, r4, #21
   19148:	bne	1915c <_obstack_memory_used@@Base+0x39c>
   1914c:	lsls	r0, r0, #1
   19150:	adcs	r1, r1, r1
   19154:	orrcs	r1, r1, #-2147483648	; 0x80000000
   19158:	pop	{r4, r5, pc}
   1915c:	adds	r4, r4, #4194304	; 0x400000
   19160:	addcc	r1, r1, #1048576	; 0x100000
   19164:	popcc	{r4, r5, pc}
   19168:	and	r5, r1, #-2147483648	; 0x80000000
   1916c:	orr	r1, r5, #2130706432	; 0x7f000000
   19170:	orr	r1, r1, #15728640	; 0xf00000
   19174:	mov	r0, #0
   19178:	pop	{r4, r5, pc}
   1917c:	mvns	ip, r4, asr #21
   19180:	movne	r1, r3
   19184:	movne	r0, r2
   19188:	mvnseq	ip, r5, asr #21
   1918c:	movne	r3, r1
   19190:	movne	r2, r0
   19194:	orrs	r4, r0, r1, lsl #12
   19198:	orrseq	r5, r2, r3, lsl #12
   1919c:	teqeq	r1, r3
   191a0:	orrne	r1, r1, #524288	; 0x80000
   191a4:	pop	{r4, r5, pc}
   191a8:	teq	r0, #0
   191ac:	moveq	r1, #0
   191b0:	bxeq	lr
   191b4:	push	{r4, r5, lr}
   191b8:	mov	r4, #1024	; 0x400
   191bc:	add	r4, r4, #50	; 0x32
   191c0:	mov	r5, #0
   191c4:	mov	r1, #0
   191c8:	b	19044 <_obstack_memory_used@@Base+0x284>
   191cc:	teq	r0, #0
   191d0:	moveq	r1, #0
   191d4:	bxeq	lr
   191d8:	push	{r4, r5, lr}
   191dc:	mov	r4, #1024	; 0x400
   191e0:	add	r4, r4, #50	; 0x32
   191e4:	ands	r5, r0, #-2147483648	; 0x80000000
   191e8:	rsbmi	r0, r0, #0
   191ec:	mov	r1, #0
   191f0:	b	19044 <_obstack_memory_used@@Base+0x284>
   191f4:	lsls	r2, r0, #1
   191f8:	asr	r1, r2, #3
   191fc:	rrx	r1, r1
   19200:	lsl	r0, r2, #28
   19204:	andsne	r3, r2, #-16777216	; 0xff000000
   19208:	teqne	r3, #-16777216	; 0xff000000
   1920c:	eorne	r1, r1, #939524096	; 0x38000000
   19210:	bxne	lr
   19214:	bics	r2, r2, #-16777216	; 0xff000000
   19218:	bxeq	lr
   1921c:	teq	r3, #-16777216	; 0xff000000
   19220:	orreq	r1, r1, #524288	; 0x80000
   19224:	bxeq	lr
   19228:	push	{r4, r5, lr}
   1922c:	mov	r4, #896	; 0x380
   19230:	and	r5, r1, #-2147483648	; 0x80000000
   19234:	bic	r1, r1, #-2147483648	; 0x80000000
   19238:	b	19044 <_obstack_memory_used@@Base+0x284>
   1923c:	orrs	r2, r0, r1
   19240:	bxeq	lr
   19244:	push	{r4, r5, lr}
   19248:	mov	r5, #0
   1924c:	b	1926c <_obstack_memory_used@@Base+0x4ac>
   19250:	orrs	r2, r0, r1
   19254:	bxeq	lr
   19258:	push	{r4, r5, lr}
   1925c:	ands	r5, r1, #-2147483648	; 0x80000000
   19260:	bpl	1926c <_obstack_memory_used@@Base+0x4ac>
   19264:	rsbs	r0, r0, #0
   19268:	rsc	r1, r1, #0
   1926c:	mov	r4, #1024	; 0x400
   19270:	add	r4, r4, #50	; 0x32
   19274:	lsrs	ip, r1, #22
   19278:	beq	18fe8 <_obstack_memory_used@@Base+0x228>
   1927c:	mov	r2, #3
   19280:	lsrs	ip, ip, #3
   19284:	addne	r2, r2, #3
   19288:	lsrs	ip, ip, #3
   1928c:	addne	r2, r2, #3
   19290:	add	r2, r2, ip, lsr #3
   19294:	rsb	r3, r2, #32
   19298:	lsl	ip, r0, r3
   1929c:	lsr	r0, r0, r2
   192a0:	orr	r0, r0, r1, lsl r3
   192a4:	lsr	r1, r1, r2
   192a8:	add	r4, r4, r2
   192ac:	b	18fe8 <_obstack_memory_used@@Base+0x228>
   192b0:	cmp	r3, #0
   192b4:	cmpeq	r2, #0
   192b8:	bne	192d0 <_obstack_memory_used@@Base+0x510>
   192bc:	cmp	r1, #0
   192c0:	cmpeq	r0, #0
   192c4:	mvnne	r1, #0
   192c8:	mvnne	r0, #0
   192cc:	b	192ec <_obstack_memory_used@@Base+0x52c>
   192d0:	sub	sp, sp, #8
   192d4:	push	{sp, lr}
   192d8:	bl	192fc <_obstack_memory_used@@Base+0x53c>
   192dc:	ldr	lr, [sp, #4]
   192e0:	add	sp, sp, #8
   192e4:	pop	{r2, r3}
   192e8:	bx	lr
   192ec:	push	{r1, lr}
   192f0:	mov	r0, #8
   192f4:	bl	1107c <raise@plt>
   192f8:	pop	{r1, pc}
   192fc:	cmp	r1, r3
   19300:	cmpeq	r0, r2
   19304:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19308:	mov	r4, r0
   1930c:	movcc	r0, #0
   19310:	mov	r5, r1
   19314:	ldr	lr, [sp, #36]	; 0x24
   19318:	movcc	r1, r0
   1931c:	bcc	19418 <_obstack_memory_used@@Base+0x658>
   19320:	cmp	r3, #0
   19324:	clzeq	ip, r2
   19328:	clzne	ip, r3
   1932c:	addeq	ip, ip, #32
   19330:	cmp	r5, #0
   19334:	clzeq	r1, r4
   19338:	addeq	r1, r1, #32
   1933c:	clzne	r1, r5
   19340:	sub	ip, ip, r1
   19344:	sub	sl, ip, #32
   19348:	lsl	r9, r3, ip
   1934c:	rsb	fp, ip, #32
   19350:	orr	r9, r9, r2, lsl sl
   19354:	orr	r9, r9, r2, lsr fp
   19358:	lsl	r8, r2, ip
   1935c:	cmp	r5, r9
   19360:	cmpeq	r4, r8
   19364:	movcc	r0, #0
   19368:	movcc	r1, r0
   1936c:	bcc	19388 <_obstack_memory_used@@Base+0x5c8>
   19370:	mov	r0, #1
   19374:	subs	r4, r4, r8
   19378:	lsl	r1, r0, sl
   1937c:	orr	r1, r1, r0, lsr fp
   19380:	lsl	r0, r0, ip
   19384:	sbc	r5, r5, r9
   19388:	cmp	ip, #0
   1938c:	beq	19418 <_obstack_memory_used@@Base+0x658>
   19390:	lsr	r6, r8, #1
   19394:	orr	r6, r6, r9, lsl #31
   19398:	lsr	r7, r9, #1
   1939c:	mov	r2, ip
   193a0:	b	193c4 <_obstack_memory_used@@Base+0x604>
   193a4:	subs	r3, r4, r6
   193a8:	sbc	r8, r5, r7
   193ac:	adds	r3, r3, r3
   193b0:	adc	r8, r8, r8
   193b4:	adds	r4, r3, #1
   193b8:	adc	r5, r8, #0
   193bc:	subs	r2, r2, #1
   193c0:	beq	193e0 <_obstack_memory_used@@Base+0x620>
   193c4:	cmp	r5, r7
   193c8:	cmpeq	r4, r6
   193cc:	bcs	193a4 <_obstack_memory_used@@Base+0x5e4>
   193d0:	adds	r4, r4, r4
   193d4:	adc	r5, r5, r5
   193d8:	subs	r2, r2, #1
   193dc:	bne	193c4 <_obstack_memory_used@@Base+0x604>
   193e0:	lsr	r3, r4, ip
   193e4:	orr	r3, r3, r5, lsl fp
   193e8:	lsr	r2, r5, ip
   193ec:	orr	r3, r3, r5, lsr sl
   193f0:	adds	r0, r0, r4
   193f4:	mov	r4, r3
   193f8:	lsl	r3, r2, ip
   193fc:	orr	r3, r3, r4, lsl sl
   19400:	lsl	ip, r4, ip
   19404:	orr	r3, r3, r4, lsr fp
   19408:	adc	r1, r1, r5
   1940c:	subs	r0, r0, ip
   19410:	mov	r5, r2
   19414:	sbc	r1, r1, r3
   19418:	cmp	lr, #0
   1941c:	strdne	r4, [lr]
   19420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19424:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19428:	mov	r7, r0
   1942c:	ldr	r6, [pc, #72]	; 1947c <_obstack_memory_used@@Base+0x6bc>
   19430:	ldr	r5, [pc, #72]	; 19480 <_obstack_memory_used@@Base+0x6c0>
   19434:	add	r6, pc, r6
   19438:	add	r5, pc, r5
   1943c:	sub	r6, r6, r5
   19440:	mov	r8, r1
   19444:	mov	r9, r2
   19448:	bl	11044 <calloc@plt-0x20>
   1944c:	asrs	r6, r6, #2
   19450:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19454:	mov	r4, #0
   19458:	add	r4, r4, #1
   1945c:	ldr	r3, [r5], #4
   19460:	mov	r2, r9
   19464:	mov	r1, r8
   19468:	mov	r0, r7
   1946c:	blx	r3
   19470:	cmp	r6, r4
   19474:	bne	19458 <_obstack_memory_used@@Base+0x698>
   19478:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1947c:	ldrdeq	r1, [r1], -r8
   19480:	ldrdeq	r1, [r1], -r0
   19484:	bx	lr
   19488:	ldr	r3, [pc, #12]	; 1949c <_obstack_memory_used@@Base+0x6dc>
   1948c:	mov	r1, #0
   19490:	add	r3, pc, r3
   19494:	ldr	r2, [r3]
   19498:	b	1128c <__cxa_atexit@plt>
   1949c:	andeq	r1, r1, ip, lsl #25

Disassembly of section .fini:

000194a0 <.fini>:
   194a0:	push	{r3, lr}
   194a4:	pop	{r3, pc}
