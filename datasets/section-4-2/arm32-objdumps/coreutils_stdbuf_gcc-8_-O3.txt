
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010cdc <.init>:
   10cdc:	push	{r3, lr}
   10ce0:	bl	116e0 <__assert_fail@plt+0x75c>
   10ce4:	pop	{r3, pc}

Disassembly of section .plt:

00010ce8 <calloc@plt-0x14>:
   10ce8:	push	{lr}		; (str lr, [sp, #-4]!)
   10cec:	ldr	lr, [pc, #4]	; 10cf8 <calloc@plt-0x4>
   10cf0:	add	lr, pc, lr
   10cf4:	ldr	pc, [lr, #8]!
   10cf8:	andeq	r8, r1, r8, lsl #6

00010cfc <calloc@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #24, 20	; 0x18000
   10d04:	ldr	pc, [ip, #776]!	; 0x308

00010d08 <fputs_unlocked@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #24, 20	; 0x18000
   10d10:	ldr	pc, [ip, #768]!	; 0x300

00010d14 <strcmp@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #24, 20	; 0x18000
   10d1c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d20 <fflush@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #24, 20	; 0x18000
   10d28:	ldr	pc, [ip, #752]!	; 0x2f0

00010d2c <free@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #24, 20	; 0x18000
   10d34:	ldr	pc, [ip, #744]!	; 0x2e8

00010d38 <_exit@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #24, 20	; 0x18000
   10d40:	ldr	pc, [ip, #736]!	; 0x2e0

00010d44 <memcpy@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #24, 20	; 0x18000
   10d4c:	ldr	pc, [ip, #728]!	; 0x2d8

00010d50 <execvp@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #24, 20	; 0x18000
   10d58:	ldr	pc, [ip, #720]!	; 0x2d0

00010d5c <__strtoull_internal@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #24, 20	; 0x18000
   10d64:	ldr	pc, [ip, #712]!	; 0x2c8

00010d68 <mbsinit@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #24, 20	; 0x18000
   10d70:	ldr	pc, [ip, #704]!	; 0x2c0

00010d74 <memcmp@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #24, 20	; 0x18000
   10d7c:	ldr	pc, [ip, #696]!	; 0x2b8

00010d80 <fputc_unlocked@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #24, 20	; 0x18000
   10d88:	ldr	pc, [ip, #688]!	; 0x2b0

00010d8c <dcgettext@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #24, 20	; 0x18000
   10d94:	ldr	pc, [ip, #680]!	; 0x2a8

00010d98 <realloc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #24, 20	; 0x18000
   10da0:	ldr	pc, [ip, #672]!	; 0x2a0

00010da4 <textdomain@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #24, 20	; 0x18000
   10dac:	ldr	pc, [ip, #664]!	; 0x298

00010db0 <iswprint@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #24, 20	; 0x18000
   10db8:	ldr	pc, [ip, #656]!	; 0x290

00010dbc <readlink@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #24, 20	; 0x18000
   10dc4:	ldr	pc, [ip, #648]!	; 0x288

00010dc8 <fwrite@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #24, 20	; 0x18000
   10dd0:	ldr	pc, [ip, #640]!	; 0x280

00010dd4 <lseek64@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #24, 20	; 0x18000
   10ddc:	ldr	pc, [ip, #632]!	; 0x278

00010de0 <__ctype_get_mb_cur_max@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #24, 20	; 0x18000
   10de8:	ldr	pc, [ip, #624]!	; 0x270

00010dec <__fpending@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #24, 20	; 0x18000
   10df4:	ldr	pc, [ip, #616]!	; 0x268

00010df8 <mbrtowc@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #24, 20	; 0x18000
   10e00:	ldr	pc, [ip, #608]!	; 0x260

00010e04 <error@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #24, 20	; 0x18000
   10e0c:	ldr	pc, [ip, #600]!	; 0x258

00010e10 <__asprintf_chk@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #24, 20	; 0x18000
   10e18:	ldr	pc, [ip, #592]!	; 0x250

00010e1c <getenv@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #24, 20	; 0x18000
   10e24:	ldr	pc, [ip, #584]!	; 0x248

00010e28 <malloc@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #24, 20	; 0x18000
   10e30:	ldr	pc, [ip, #576]!	; 0x240

00010e34 <__libc_start_main@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #24, 20	; 0x18000
   10e3c:	ldr	pc, [ip, #568]!	; 0x238

00010e40 <__freading@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #24, 20	; 0x18000
   10e48:	ldr	pc, [ip, #560]!	; 0x230

00010e4c <__ctype_toupper_loc@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #24, 20	; 0x18000
   10e54:	ldr	pc, [ip, #552]!	; 0x228

00010e58 <__gmon_start__@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #24, 20	; 0x18000
   10e60:	ldr	pc, [ip, #544]!	; 0x220

00010e64 <mempcpy@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #24, 20	; 0x18000
   10e6c:	ldr	pc, [ip, #536]!	; 0x218

00010e70 <getopt_long@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #24, 20	; 0x18000
   10e78:	ldr	pc, [ip, #528]!	; 0x210

00010e7c <__ctype_b_loc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #24, 20	; 0x18000
   10e84:	ldr	pc, [ip, #520]!	; 0x208

00010e88 <exit@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #24, 20	; 0x18000
   10e90:	ldr	pc, [ip, #512]!	; 0x200

00010e94 <strlen@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #24, 20	; 0x18000
   10e9c:	ldr	pc, [ip, #504]!	; 0x1f8

00010ea0 <strchr@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #24, 20	; 0x18000
   10ea8:	ldr	pc, [ip, #496]!	; 0x1f0

00010eac <__errno_location@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #24, 20	; 0x18000
   10eb4:	ldr	pc, [ip, #488]!	; 0x1e8

00010eb8 <__cxa_atexit@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #24, 20	; 0x18000
   10ec0:	ldr	pc, [ip, #480]!	; 0x1e0

00010ec4 <memset@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #24, 20	; 0x18000
   10ecc:	ldr	pc, [ip, #472]!	; 0x1d8

00010ed0 <__printf_chk@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #24, 20	; 0x18000
   10ed8:	ldr	pc, [ip, #464]!	; 0x1d0

00010edc <fileno@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #24, 20	; 0x18000
   10ee4:	ldr	pc, [ip, #456]!	; 0x1c8

00010ee8 <__fprintf_chk@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #24, 20	; 0x18000
   10ef0:	ldr	pc, [ip, #448]!	; 0x1c0

00010ef4 <access@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #24, 20	; 0x18000
   10efc:	ldr	pc, [ip, #440]!	; 0x1b8

00010f00 <fclose@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #24, 20	; 0x18000
   10f08:	ldr	pc, [ip, #432]!	; 0x1b0

00010f0c <fseeko64@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #24, 20	; 0x18000
   10f14:	ldr	pc, [ip, #424]!	; 0x1a8

00010f18 <strtok@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #24, 20	; 0x18000
   10f20:	ldr	pc, [ip, #416]!	; 0x1a0

00010f24 <setlocale@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #24, 20	; 0x18000
   10f2c:	ldr	pc, [ip, #408]!	; 0x198

00010f30 <putenv@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #24, 20	; 0x18000
   10f38:	ldr	pc, [ip, #400]!	; 0x190

00010f3c <strrchr@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #24, 20	; 0x18000
   10f44:	ldr	pc, [ip, #392]!	; 0x188

00010f48 <nl_langinfo@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #24, 20	; 0x18000
   10f50:	ldr	pc, [ip, #384]!	; 0x180

00010f54 <bindtextdomain@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #24, 20	; 0x18000
   10f5c:	ldr	pc, [ip, #376]!	; 0x178

00010f60 <__xstat64@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #24, 20	; 0x18000
   10f68:	ldr	pc, [ip, #368]!	; 0x170

00010f6c <strncmp@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #24, 20	; 0x18000
   10f74:	ldr	pc, [ip, #360]!	; 0x168

00010f78 <abort@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #24, 20	; 0x18000
   10f80:	ldr	pc, [ip, #352]!	; 0x160

00010f84 <__assert_fail@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #24, 20	; 0x18000
   10f8c:	ldr	pc, [ip, #344]!	; 0x158

Disassembly of section .text:

00010f90 <.text>:
   10f90:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f94:	mov	r4, r1
   10f98:	strd	r6, [sp, #8]
   10f9c:	strd	r8, [sp, #16]
   10fa0:	mov	r9, r0
   10fa4:	strd	sl, [sp, #24]
   10fa8:	str	lr, [sp, #32]
   10fac:	sub	sp, sp, #156	; 0x9c
   10fb0:	ldr	r0, [r1]
   10fb4:	bl	11fbc <__assert_fail@plt+0x1038>
   10fb8:	ldr	r8, [pc, #1756]	; 1169c <__assert_fail@plt+0x718>
   10fbc:	movw	r1, #33224	; 0x81c8
   10fc0:	movt	r1, #1
   10fc4:	mov	r0, #6
   10fc8:	bl	10f24 <setlocale@plt>
   10fcc:	movw	r1, #34108	; 0x853c
   10fd0:	movt	r1, #1
   10fd4:	movw	r0, #33940	; 0x8494
   10fd8:	movt	r0, #1
   10fdc:	bl	10f54 <bindtextdomain@plt>
   10fe0:	movw	r0, #33940	; 0x8494
   10fe4:	movt	r0, #1
   10fe8:	bl	10da4 <textdomain@plt>
   10fec:	movw	r3, #37112	; 0x90f8
   10ff0:	movt	r3, #2
   10ff4:	mov	r2, #125	; 0x7d
   10ff8:	movw	r0, #7028	; 0x1b74
   10ffc:	movt	r0, #1
   11000:	sub	sl, r8, #108	; 0x6c
   11004:	str	r2, [r3]
   11008:	bl	17e64 <__assert_fail@plt+0x6ee0>
   1100c:	movw	r6, #34292	; 0x85f4
   11010:	movt	r6, #1
   11014:	mov	r5, #0
   11018:	mov	r3, r8
   1101c:	mov	r2, r6
   11020:	mov	r1, r4
   11024:	mov	r0, r9
   11028:	str	r5, [sp]
   1102c:	bl	10e70 <getopt_long@plt>
   11030:	cmn	r0, #1
   11034:	beq	111fc <__assert_fail@plt+0x278>
   11038:	cmp	r0, #101	; 0x65
   1103c:	beq	11094 <__assert_fail@plt+0x110>
   11040:	bgt	1108c <__assert_fail@plt+0x108>
   11044:	cmn	r0, #3
   11048:	bne	111b8 <__assert_fail@plt+0x234>
   1104c:	movw	r2, #34276	; 0x85e4
   11050:	movt	r2, #1
   11054:	movw	r3, #37108	; 0x90f4
   11058:	movt	r3, #2
   1105c:	movw	r0, #37204	; 0x9154
   11060:	movt	r0, #2
   11064:	stm	sp, {r2, r5}
   11068:	movw	r1, #32596	; 0x7f54
   1106c:	movt	r1, #1
   11070:	ldr	r0, [r0]
   11074:	movw	r2, #33936	; 0x8490
   11078:	movt	r2, #1
   1107c:	ldr	r3, [r3]
   11080:	bl	15ff0 <__assert_fail@plt+0x506c>
   11084:	mov	r0, r5
   11088:	bl	10e88 <exit@plt>
   1108c:	cmp	r0, #105	; 0x69
   11090:	bne	111a8 <__assert_fail@plt+0x224>
   11094:	add	r3, sl, r0, lsl #2
   11098:	ldr	fp, [r3, #-348]	; 0xfffffea4
   1109c:	cmp	fp, #2
   110a0:	bhi	115ec <__assert_fail@plt+0x668>
   110a4:	lsl	ip, fp, #1
   110a8:	movw	r7, #37208	; 0x9158
   110ac:	movt	r7, #2
   110b0:	ldr	r2, [r7]
   110b4:	movw	r5, #37216	; 0x9160
   110b8:	movt	r5, #2
   110bc:	add	r3, ip, fp
   110c0:	add	r3, r5, r3, lsl #2
   110c4:	str	r0, [r3, #4]
   110c8:	mov	r3, r2
   110cc:	ldrb	r1, [r2], #1
   110d0:	cmp	r1, #9
   110d4:	bcc	110fc <__assert_fail@plt+0x178>
   110d8:	cmp	r1, #13
   110dc:	bls	110e8 <__assert_fail@plt+0x164>
   110e0:	cmp	r1, #32
   110e4:	bne	110fc <__assert_fail@plt+0x178>
   110e8:	mov	r3, r2
   110ec:	str	r2, [r7]
   110f0:	ldrb	r1, [r2], #1
   110f4:	cmp	r1, #9
   110f8:	bcs	110d8 <__assert_fail@plt+0x154>
   110fc:	add	ip, ip, fp
   11100:	cmp	r0, #105	; 0x69
   11104:	add	ip, r5, ip, lsl #2
   11108:	str	r3, [ip, #8]
   1110c:	beq	111c8 <__assert_fail@plt+0x244>
   11110:	mov	r0, r3
   11114:	movw	r1, #34244	; 0x85c4
   11118:	movt	r1, #1
   1111c:	str	r3, [sp, #16]
   11120:	bl	10d14 <strcmp@plt>
   11124:	cmp	r0, #0
   11128:	ldr	r3, [sp, #16]
   1112c:	beq	11014 <__assert_fail@plt+0x90>
   11130:	movw	r1, #34248	; 0x85c8
   11134:	movt	r1, #1
   11138:	mov	r0, r3
   1113c:	mov	r2, #10
   11140:	add	r3, sp, #48	; 0x30
   11144:	str	r1, [sp]
   11148:	mov	r1, #0
   1114c:	bl	16834 <__assert_fail@plt+0x58b0>
   11150:	mov	r6, r0
   11154:	bl	10eac <__errno_location@plt>
   11158:	cmp	r6, #0
   1115c:	mov	ip, r0
   11160:	beq	11540 <__assert_fail@plt+0x5bc>
   11164:	cmp	r6, #1
   11168:	beq	11648 <__assert_fail@plt+0x6c4>
   1116c:	ldr	r4, [r0]
   11170:	movw	r1, #34260	; 0x85d4
   11174:	movt	r1, #1
   11178:	str	r4, [ip]
   1117c:	mov	r2, #5
   11180:	mov	r0, #0
   11184:	bl	10d8c <dcgettext@plt>
   11188:	mov	r5, r0
   1118c:	ldr	r0, [r7]
   11190:	bl	1592c <__assert_fail@plt+0x49a8>
   11194:	mov	r3, r0
   11198:	mov	r2, r5
   1119c:	mov	r1, r4
   111a0:	mov	r0, #125	; 0x7d
   111a4:	bl	10e04 <error@plt>
   111a8:	cmp	r0, #111	; 0x6f
   111ac:	beq	11094 <__assert_fail@plt+0x110>
   111b0:	mov	r0, #125	; 0x7d
   111b4:	bl	11794 <__assert_fail@plt+0x810>
   111b8:	cmn	r0, #2
   111bc:	bne	111b0 <__assert_fail@plt+0x22c>
   111c0:	mov	r0, r5
   111c4:	bl	11794 <__assert_fail@plt+0x810>
   111c8:	ldrb	r2, [r3]
   111cc:	cmp	r2, #76	; 0x4c
   111d0:	bne	11110 <__assert_fail@plt+0x18c>
   111d4:	movw	r1, #34208	; 0x85a0
   111d8:	movt	r1, #1
   111dc:	mov	r2, #5
   111e0:	mov	r0, #0
   111e4:	bl	10d8c <dcgettext@plt>
   111e8:	mov	r1, #0
   111ec:	mov	r2, r0
   111f0:	mov	r0, r1
   111f4:	bl	10e04 <error@plt>
   111f8:	b	111b0 <__assert_fail@plt+0x22c>
   111fc:	movw	r3, #37192	; 0x9148
   11200:	movt	r3, #2
   11204:	ldr	r3, [r3]
   11208:	sub	r9, r9, r3
   1120c:	str	r3, [sp, #16]
   11210:	add	r3, r4, r3, lsl #2
   11214:	cmp	r9, r5
   11218:	movwle	r1, #34300	; 0x85fc
   1121c:	movtle	r1, #1
   11220:	str	r3, [sp, #20]
   11224:	ble	111dc <__assert_fail@plt+0x258>
   11228:	movw	sl, #37216	; 0x9160
   1122c:	movt	sl, #2
   11230:	mov	fp, r5
   11234:	mov	r6, r5
   11238:	movw	r7, #34316	; 0x860c
   1123c:	movt	r7, #1
   11240:	movw	r8, #34336	; 0x8620
   11244:	movt	r8, #1
   11248:	movw	r9, #34328	; 0x8618
   1124c:	movt	r9, #1
   11250:	mov	r5, sl
   11254:	ldr	r3, [r5, #8]
   11258:	cmp	r3, #0
   1125c:	beq	112cc <__assert_fail@plt+0x348>
   11260:	ldrb	r3, [r3]
   11264:	ldr	fp, [r5, #4]
   11268:	cmp	r3, #76	; 0x4c
   1126c:	add	r3, fp, #128	; 0x80
   11270:	beq	1149c <__assert_fail@plt+0x518>
   11274:	cmp	r3, #384	; 0x180
   11278:	bcs	11288 <__assert_fail@plt+0x304>
   1127c:	bl	10e4c <__ctype_toupper_loc@plt>
   11280:	ldr	r3, [r0]
   11284:	ldr	fp, [r3, fp, lsl #2]
   11288:	str	fp, [sp]
   1128c:	mov	r0, #0
   11290:	mov	r3, r7
   11294:	ldr	ip, [r5]
   11298:	mov	r2, r8
   1129c:	mov	r1, #1
   112a0:	str	ip, [sp, #8]
   112a4:	str	r0, [sp, #12]
   112a8:	add	r0, sp, #28
   112ac:	bl	10e10 <__asprintf_chk@plt>
   112b0:	cmp	r0, #0
   112b4:	blt	11608 <__assert_fail@plt+0x684>
   112b8:	ldr	r0, [sp, #28]
   112bc:	bl	10f30 <putenv@plt>
   112c0:	cmp	r0, #0
   112c4:	bne	11650 <__assert_fail@plt+0x6cc>
   112c8:	mov	fp, #1
   112cc:	add	r6, r6, #1
   112d0:	add	r5, r5, #12
   112d4:	cmp	r6, #3
   112d8:	bne	11254 <__assert_fail@plt+0x2d0>
   112dc:	cmp	fp, #0
   112e0:	movweq	r1, #34392	; 0x8658
   112e4:	movteq	r1, #1
   112e8:	beq	111dc <__assert_fail@plt+0x258>
   112ec:	movw	r3, #37264	; 0x9190
   112f0:	movt	r3, #2
   112f4:	ldr	r5, [r3]
   112f8:	mov	r1, #47	; 0x2f
   112fc:	mov	r0, r5
   11300:	bl	10ea0 <strchr@plt>
   11304:	cmp	r0, #0
   11308:	beq	114e4 <__assert_fail@plt+0x560>
   1130c:	mov	r0, r5
   11310:	bl	11c60 <__assert_fail@plt+0xcdc>
   11314:	str	r0, [sl, #36]	; 0x24
   11318:	movw	r0, #34492	; 0x86bc
   1131c:	movt	r0, #1
   11320:	bl	10e1c <getenv@plt>
   11324:	ldr	r5, [sl, #36]	; 0x24
   11328:	movw	r3, #34504	; 0x86c8
   1132c:	movt	r3, #1
   11330:	mov	r2, #0
   11334:	mov	fp, r0
   11338:	str	r3, [sp, #40]	; 0x28
   1133c:	ldrb	r3, [r5]
   11340:	str	r5, [sp, #36]	; 0x24
   11344:	str	r2, [sp, #44]	; 0x2c
   11348:	cmp	r3, r2
   1134c:	beq	114cc <__assert_fail@plt+0x548>
   11350:	movw	r8, #34536	; 0x86e8
   11354:	movt	r8, #1
   11358:	movw	r7, #34552	; 0x86f8
   1135c:	movt	r7, #1
   11360:	add	r6, sp, #36	; 0x24
   11364:	mov	r3, r5
   11368:	b	1138c <__assert_fail@plt+0x408>
   1136c:	ldr	r0, [sp, #32]
   11370:	bl	11f5c <__assert_fail@plt+0xfd8>
   11374:	ldr	r3, [r6, #4]!
   11378:	cmp	r3, #0
   1137c:	beq	1160c <__assert_fail@plt+0x688>
   11380:	ldrb	r2, [r3]
   11384:	cmp	r2, #0
   11388:	beq	114d0 <__assert_fail@plt+0x54c>
   1138c:	mov	r2, r7
   11390:	mov	r1, #1
   11394:	str	r8, [sp]
   11398:	add	r0, sp, #32
   1139c:	bl	10e10 <__asprintf_chk@plt>
   113a0:	cmp	r0, #0
   113a4:	blt	11608 <__assert_fail@plt+0x684>
   113a8:	add	r2, sp, #48	; 0x30
   113ac:	mov	r0, #3
   113b0:	ldr	r1, [sp, #32]
   113b4:	bl	10f60 <__xstat64@plt>
   113b8:	cmp	r0, #0
   113bc:	add	r9, sp, #48	; 0x30
   113c0:	bne	1136c <__assert_fail@plt+0x3e8>
   113c4:	cmp	fp, #0
   113c8:	movw	r3, #34492	; 0x86bc
   113cc:	movt	r3, #1
   113d0:	mov	r0, r9
   113d4:	ldr	r1, [sp, #32]
   113d8:	beq	11528 <__assert_fail@plt+0x5a4>
   113dc:	movw	r2, #34580	; 0x8714
   113e0:	movt	r2, #1
   113e4:	str	fp, [sp]
   113e8:	str	r1, [sp, #4]
   113ec:	mov	r1, #1
   113f0:	bl	10e10 <__asprintf_chk@plt>
   113f4:	cmp	r0, #0
   113f8:	blt	11608 <__assert_fail@plt+0x684>
   113fc:	ldr	r0, [sp, #32]
   11400:	bl	11f5c <__assert_fail@plt+0xfd8>
   11404:	ldr	r0, [sp, #48]	; 0x30
   11408:	bl	10f30 <putenv@plt>
   1140c:	mov	r5, r0
   11410:	bl	10eac <__errno_location@plt>
   11414:	cmp	r5, #0
   11418:	mov	r6, r0
   1141c:	bne	11678 <__assert_fail@plt+0x6f4>
   11420:	ldr	r0, [sl, #36]	; 0x24
   11424:	bl	11f5c <__assert_fail@plt+0xfd8>
   11428:	ldr	r9, [sp, #16]
   1142c:	ldr	r1, [sp, #20]
   11430:	ldr	r0, [r4, r9, lsl #2]
   11434:	bl	10d50 <execvp@plt>
   11438:	ldr	r6, [r6]
   1143c:	mov	r2, #5
   11440:	mov	r0, r5
   11444:	movw	r1, #34600	; 0x8728
   11448:	movt	r1, #1
   1144c:	cmp	r6, #2
   11450:	moveq	r7, #127	; 0x7f
   11454:	movne	r7, #126	; 0x7e
   11458:	bl	10d8c <dcgettext@plt>
   1145c:	mov	r8, r0
   11460:	ldr	r0, [r4, r9, lsl #2]
   11464:	bl	1592c <__assert_fail@plt+0x49a8>
   11468:	mov	r3, r0
   1146c:	mov	r2, r8
   11470:	mov	r0, r5
   11474:	mov	r1, r6
   11478:	bl	10e04 <error@plt>
   1147c:	mov	r0, r7
   11480:	add	sp, sp, #156	; 0x9c
   11484:	ldrd	r4, [sp]
   11488:	ldrd	r6, [sp, #8]
   1148c:	ldrd	r8, [sp, #16]
   11490:	ldrd	sl, [sp, #24]
   11494:	add	sp, sp, #32
   11498:	pop	{pc}		; (ldr pc, [sp], #4)
   1149c:	cmp	r3, #384	; 0x180
   114a0:	bcs	114b0 <__assert_fail@plt+0x52c>
   114a4:	bl	10e4c <__ctype_toupper_loc@plt>
   114a8:	ldr	r3, [r0]
   114ac:	ldr	fp, [r3, fp, lsl #2]
   114b0:	mov	r3, r7
   114b4:	mov	r2, r9
   114b8:	str	fp, [sp]
   114bc:	mov	r1, #1
   114c0:	add	r0, sp, #28
   114c4:	bl	10e10 <__asprintf_chk@plt>
   114c8:	b	112b0 <__assert_fail@plt+0x32c>
   114cc:	add	r9, sp, #48	; 0x30
   114d0:	movw	r0, #34536	; 0x86e8
   114d4:	movt	r0, #1
   114d8:	bl	1676c <__assert_fail@plt+0x57e8>
   114dc:	str	r0, [sp, #32]
   114e0:	b	113c4 <__assert_fail@plt+0x440>
   114e4:	movw	r0, #34436	; 0x8684
   114e8:	movt	r0, #1
   114ec:	bl	167fc <__assert_fail@plt+0x5878>
   114f0:	subs	r6, r0, #0
   114f4:	beq	1156c <__assert_fail@plt+0x5e8>
   114f8:	bl	11c60 <__assert_fail@plt+0xcdc>
   114fc:	str	r0, [sl, #36]	; 0x24
   11500:	mov	r0, r6
   11504:	bl	11f5c <__assert_fail@plt+0xfd8>
   11508:	ldr	r3, [sl, #36]	; 0x24
   1150c:	cmp	r3, #0
   11510:	bne	11318 <__assert_fail@plt+0x394>
   11514:	movw	r0, #34464	; 0x86a0
   11518:	movt	r0, #1
   1151c:	bl	1676c <__assert_fail@plt+0x57e8>
   11520:	str	r0, [sl, #36]	; 0x24
   11524:	b	11318 <__assert_fail@plt+0x394>
   11528:	movw	r2, #34592	; 0x8720
   1152c:	movt	r2, #1
   11530:	str	r1, [sp]
   11534:	mov	r1, #1
   11538:	bl	10e10 <__asprintf_chk@plt>
   1153c:	b	113f4 <__assert_fail@plt+0x470>
   11540:	ldrd	r0, [sp, #48]	; 0x30
   11544:	mov	r3, #0
   11548:	mvn	r2, #0
   1154c:	cmp	r1, r3
   11550:	cmpeq	r0, r2
   11554:	bhi	11648 <__assert_fail@plt+0x6c4>
   11558:	mov	r3, #12
   1155c:	str	r6, [ip]
   11560:	mul	r3, r3, fp
   11564:	str	r0, [r5, r3]
   11568:	b	1100c <__assert_fail@plt+0x88>
   1156c:	movw	r0, #34452	; 0x8694
   11570:	movt	r0, #1
   11574:	bl	10e1c <getenv@plt>
   11578:	subs	r6, r0, #0
   1157c:	beq	11500 <__assert_fail@plt+0x57c>
   11580:	bl	1676c <__assert_fail@plt+0x57e8>
   11584:	movw	r1, #34460	; 0x869c
   11588:	movt	r1, #1
   1158c:	mov	r6, r0
   11590:	mov	r7, r1
   11594:	bl	10f18 <strtok@plt>
   11598:	b	115ac <__assert_fail@plt+0x628>
   1159c:	bl	11f5c <__assert_fail@plt+0xfd8>
   115a0:	mov	r1, r7
   115a4:	mov	r0, #0
   115a8:	bl	10f18 <strtok@plt>
   115ac:	cmp	r0, #0
   115b0:	beq	11500 <__assert_fail@plt+0x57c>
   115b4:	mov	r2, #0
   115b8:	mov	r1, r5
   115bc:	bl	11e3c <__assert_fail@plt+0xeb8>
   115c0:	mov	r1, #1
   115c4:	mov	r8, r0
   115c8:	bl	10ef4 <access@plt>
   115cc:	cmp	r0, #0
   115d0:	mov	r0, r8
   115d4:	bne	1159c <__assert_fail@plt+0x618>
   115d8:	bl	11c60 <__assert_fail@plt+0xcdc>
   115dc:	str	r0, [sl, #36]	; 0x24
   115e0:	mov	r0, r8
   115e4:	bl	11f5c <__assert_fail@plt+0xfd8>
   115e8:	b	11500 <__assert_fail@plt+0x57c>
   115ec:	movw	r1, #34132	; 0x8554
   115f0:	movt	r1, #1
   115f4:	ldr	r3, [pc, #164]	; 116a0 <__assert_fail@plt+0x71c>
   115f8:	movw	r0, #34148	; 0x8564
   115fc:	movt	r0, #1
   11600:	mov	r2, #336	; 0x150
   11604:	bl	10f84 <__assert_fail@plt>
   11608:	bl	167b8 <__assert_fail@plt+0x5834>
   1160c:	mov	r2, #5
   11610:	mov	r0, r3
   11614:	movw	r1, #34560	; 0x8700
   11618:	movt	r1, #1
   1161c:	mov	r5, r3
   11620:	bl	10d8c <dcgettext@plt>
   11624:	mov	r4, r0
   11628:	movw	r0, #34536	; 0x86e8
   1162c:	movt	r0, #1
   11630:	bl	1592c <__assert_fail@plt+0x49a8>
   11634:	mov	r3, r0
   11638:	mov	r2, r4
   1163c:	mov	r1, r5
   11640:	mov	r0, #125	; 0x7d
   11644:	bl	10e04 <error@plt>
   11648:	mov	r4, #75	; 0x4b
   1164c:	b	11170 <__assert_fail@plt+0x1ec>
   11650:	bl	10eac <__errno_location@plt>
   11654:	movw	r1, #34348	; 0x862c
   11658:	movt	r1, #1
   1165c:	ldr	r4, [r0]
   11660:	mov	r2, #5
   11664:	mov	r0, #0
   11668:	bl	10d8c <dcgettext@plt>
   1166c:	mov	r5, r0
   11670:	ldr	r0, [sp, #28]
   11674:	b	11190 <__assert_fail@plt+0x20c>
   11678:	movw	r1, #34348	; 0x862c
   1167c:	movt	r1, #1
   11680:	ldr	r4, [r6]
   11684:	mov	r2, #5
   11688:	mov	r0, #0
   1168c:	bl	10d8c <dcgettext@plt>
   11690:	mov	r5, r0
   11694:	ldr	r0, [sp, #48]	; 0x30
   11698:	b	11190 <__assert_fail@plt+0x20c>
   1169c:	strdeq	r7, [r1], -r4
   116a0:	andeq	r7, r1, ip, ror #29
   116a4:	mov	fp, #0
   116a8:	mov	lr, #0
   116ac:	pop	{r1}		; (ldr r1, [sp], #4)
   116b0:	mov	r2, sp
   116b4:	push	{r2}		; (str r2, [sp, #-4]!)
   116b8:	push	{r0}		; (str r0, [sp, #-4]!)
   116bc:	ldr	ip, [pc, #16]	; 116d4 <__assert_fail@plt+0x750>
   116c0:	push	{ip}		; (str ip, [sp, #-4]!)
   116c4:	ldr	r0, [pc, #12]	; 116d8 <__assert_fail@plt+0x754>
   116c8:	ldr	r3, [pc, #12]	; 116dc <__assert_fail@plt+0x758>
   116cc:	bl	10e34 <__libc_start_main@plt>
   116d0:	bl	10f78 <abort@plt>
   116d4:	andeq	r7, r1, r0, ror #28
   116d8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   116dc:	andeq	r7, r1, r0, lsl #28
   116e0:	ldr	r3, [pc, #20]	; 116fc <__assert_fail@plt+0x778>
   116e4:	ldr	r2, [pc, #20]	; 11700 <__assert_fail@plt+0x77c>
   116e8:	add	r3, pc, r3
   116ec:	ldr	r2, [r3, r2]
   116f0:	cmp	r2, #0
   116f4:	bxeq	lr
   116f8:	b	10e58 <__gmon_start__@plt>
   116fc:	andeq	r7, r1, r0, lsl r9
   11700:	andeq	r0, r0, r8, ror #1
   11704:	ldr	r0, [pc, #24]	; 11724 <__assert_fail@plt+0x7a0>
   11708:	ldr	r3, [pc, #24]	; 11728 <__assert_fail@plt+0x7a4>
   1170c:	cmp	r3, r0
   11710:	bxeq	lr
   11714:	ldr	r3, [pc, #16]	; 1172c <__assert_fail@plt+0x7a8>
   11718:	cmp	r3, #0
   1171c:	bxeq	lr
   11720:	bx	r3
   11724:	andeq	r9, r2, ip, lsr r1
   11728:	andeq	r9, r2, ip, lsr r1
   1172c:	andeq	r0, r0, r0
   11730:	ldr	r0, [pc, #36]	; 1175c <__assert_fail@plt+0x7d8>
   11734:	ldr	r1, [pc, #36]	; 11760 <__assert_fail@plt+0x7dc>
   11738:	sub	r1, r1, r0
   1173c:	asr	r1, r1, #2
   11740:	add	r1, r1, r1, lsr #31
   11744:	asrs	r1, r1, #1
   11748:	bxeq	lr
   1174c:	ldr	r3, [pc, #16]	; 11764 <__assert_fail@plt+0x7e0>
   11750:	cmp	r3, #0
   11754:	bxeq	lr
   11758:	bx	r3
   1175c:	andeq	r9, r2, ip, lsr r1
   11760:	andeq	r9, r2, ip, lsr r1
   11764:	andeq	r0, r0, r0
   11768:	push	{r4, lr}
   1176c:	ldr	r4, [pc, #24]	; 1178c <__assert_fail@plt+0x808>
   11770:	ldrb	r3, [r4]
   11774:	cmp	r3, #0
   11778:	popne	{r4, pc}
   1177c:	bl	11704 <__assert_fail@plt+0x780>
   11780:	mov	r3, #1
   11784:	strb	r3, [r4]
   11788:	pop	{r4, pc}
   1178c:	andeq	r9, r2, ip, asr r1
   11790:	b	11730 <__assert_fail@plt+0x7ac>
   11794:	subs	r6, r0, #0
   11798:	str	r7, [sp, #-8]!
   1179c:	str	lr, [sp, #4]
   117a0:	sub	sp, sp, #56	; 0x38
   117a4:	beq	117ec <__assert_fail@plt+0x868>
   117a8:	movw	r3, #37200	; 0x9150
   117ac:	movt	r3, #2
   117b0:	ldr	r4, [r3]
   117b4:	mov	r2, #5
   117b8:	movw	r1, #32604	; 0x7f5c
   117bc:	movt	r1, #1
   117c0:	mov	r0, #0
   117c4:	bl	10d8c <dcgettext@plt>
   117c8:	movw	r3, #37264	; 0x9190
   117cc:	movt	r3, #2
   117d0:	mov	r2, r0
   117d4:	mov	r1, #1
   117d8:	ldr	r3, [r3]
   117dc:	mov	r0, r4
   117e0:	bl	10ee8 <__fprintf_chk@plt>
   117e4:	mov	r0, r6
   117e8:	bl	10e88 <exit@plt>
   117ec:	mov	r2, #5
   117f0:	movw	r1, #32644	; 0x7f84
   117f4:	movt	r1, #1
   117f8:	movw	r7, #37204	; 0x9154
   117fc:	movt	r7, #2
   11800:	bl	10d8c <dcgettext@plt>
   11804:	movw	r3, #37264	; 0x9190
   11808:	movt	r3, #2
   1180c:	mov	r1, r0
   11810:	mov	r0, #1
   11814:	ldr	r2, [r3]
   11818:	bl	10ed0 <__printf_chk@plt>
   1181c:	mov	r2, #5
   11820:	movw	r1, #32676	; 0x7fa4
   11824:	movt	r1, #1
   11828:	mov	r0, r6
   1182c:	bl	10d8c <dcgettext@plt>
   11830:	ldr	r1, [r7]
   11834:	bl	10d08 <fputs_unlocked@plt>
   11838:	mov	r2, #5
   1183c:	movw	r1, #32752	; 0x7ff0
   11840:	movt	r1, #1
   11844:	mov	r0, r6
   11848:	bl	10d8c <dcgettext@plt>
   1184c:	ldr	r1, [r7]
   11850:	bl	10d08 <fputs_unlocked@plt>
   11854:	mov	r2, #5
   11858:	movw	r1, #32828	; 0x803c
   1185c:	movt	r1, #1
   11860:	mov	r0, r6
   11864:	bl	10d8c <dcgettext@plt>
   11868:	ldr	r1, [r7]
   1186c:	bl	10d08 <fputs_unlocked@plt>
   11870:	mov	r2, #5
   11874:	movw	r1, #33012	; 0x80f4
   11878:	movt	r1, #1
   1187c:	mov	r0, r6
   11880:	bl	10d8c <dcgettext@plt>
   11884:	ldr	r1, [r7]
   11888:	bl	10d08 <fputs_unlocked@plt>
   1188c:	mov	r2, #5
   11890:	movw	r1, #33060	; 0x8124
   11894:	movt	r1, #1
   11898:	mov	r0, r6
   1189c:	bl	10d8c <dcgettext@plt>
   118a0:	ldr	r1, [r7]
   118a4:	bl	10d08 <fputs_unlocked@plt>
   118a8:	mov	r2, #5
   118ac:	movw	r1, #33116	; 0x815c
   118b0:	movt	r1, #1
   118b4:	mov	r0, r6
   118b8:	bl	10d8c <dcgettext@plt>
   118bc:	ldr	r1, [r7]
   118c0:	bl	10d08 <fputs_unlocked@plt>
   118c4:	mov	r2, #5
   118c8:	movw	r1, #33228	; 0x81cc
   118cc:	movt	r1, #1
   118d0:	mov	r0, r6
   118d4:	bl	10d8c <dcgettext@plt>
   118d8:	ldr	r1, [r7]
   118dc:	bl	10d08 <fputs_unlocked@plt>
   118e0:	mov	r2, #5
   118e4:	movw	r1, #33292	; 0x820c
   118e8:	movt	r1, #1
   118ec:	mov	r0, r6
   118f0:	bl	10d8c <dcgettext@plt>
   118f4:	ldr	r1, [r7]
   118f8:	bl	10d08 <fputs_unlocked@plt>
   118fc:	mov	r2, #5
   11900:	movw	r1, #33604	; 0x8344
   11904:	movt	r1, #1
   11908:	mov	r0, r6
   1190c:	bl	10d8c <dcgettext@plt>
   11910:	ldr	r1, [r7]
   11914:	bl	10d08 <fputs_unlocked@plt>
   11918:	movw	lr, #32392	; 0x7e88
   1191c:	movt	lr, #1
   11920:	ldr	ip, [lr]
   11924:	ldr	r4, [lr, #4]
   11928:	ldrd	r8, [lr, #8]
   1192c:	subs	r1, ip, #0
   11930:	str	ip, [sp]
   11934:	ldrd	r2, [lr, #16]
   11938:	str	r4, [sp, #4]
   1193c:	ldrd	r4, [lr, #24]
   11940:	strd	r8, [sp, #8]
   11944:	ldrd	r8, [lr, #32]
   11948:	strd	r2, [sp, #16]
   1194c:	ldrd	r2, [lr, #40]	; 0x28
   11950:	strd	r4, [sp, #24]
   11954:	ldrd	r4, [lr, #48]	; 0x30
   11958:	strd	r8, [sp, #32]
   1195c:	strd	r2, [sp, #40]	; 0x28
   11960:	strd	r4, [sp, #48]	; 0x30
   11964:	movwne	r5, #32596	; 0x7f54
   11968:	mov	r4, sp
   1196c:	movtne	r5, #1
   11970:	bne	11a68 <__assert_fail@plt+0xae4>
   11974:	ldr	r4, [r4, #4]
   11978:	movw	r1, #33872	; 0x8450
   1197c:	movt	r1, #1
   11980:	mov	r2, #5
   11984:	cmp	r4, #0
   11988:	beq	11a7c <__assert_fail@plt+0xaf8>
   1198c:	mov	r0, #0
   11990:	bl	10d8c <dcgettext@plt>
   11994:	mov	r1, r0
   11998:	movw	r3, #33896	; 0x8468
   1199c:	movt	r3, #1
   119a0:	movw	r2, #33936	; 0x8490
   119a4:	movt	r2, #1
   119a8:	mov	r0, #1
   119ac:	bl	10ed0 <__printf_chk@plt>
   119b0:	mov	r1, #0
   119b4:	mov	r0, #5
   119b8:	bl	10f24 <setlocale@plt>
   119bc:	cmp	r0, #0
   119c0:	movweq	r5, #32596	; 0x7f54
   119c4:	movteq	r5, #1
   119c8:	beq	119ec <__assert_fail@plt+0xa68>
   119cc:	movw	r1, #33952	; 0x84a0
   119d0:	movt	r1, #1
   119d4:	mov	r2, #3
   119d8:	movw	r5, #32596	; 0x7f54
   119dc:	movt	r5, #1
   119e0:	bl	10f6c <strncmp@plt>
   119e4:	cmp	r0, #0
   119e8:	bne	11b34 <__assert_fail@plt+0xbb0>
   119ec:	mov	r2, #5
   119f0:	movw	r1, #34028	; 0x84ec
   119f4:	movt	r1, #1
   119f8:	mov	r0, #0
   119fc:	bl	10d8c <dcgettext@plt>
   11a00:	mov	r1, r0
   11a04:	movw	r3, #32596	; 0x7f54
   11a08:	movt	r3, #1
   11a0c:	movw	r2, #33896	; 0x8468
   11a10:	movt	r2, #1
   11a14:	mov	r0, #1
   11a18:	bl	10ed0 <__printf_chk@plt>
   11a1c:	mov	r2, #5
   11a20:	movw	r1, #34056	; 0x8508
   11a24:	movt	r1, #1
   11a28:	mov	r0, #0
   11a2c:	bl	10d8c <dcgettext@plt>
   11a30:	movw	r2, #34636	; 0x874c
   11a34:	movt	r2, #1
   11a38:	cmp	r4, r5
   11a3c:	movw	r3, #33224	; 0x81c8
   11a40:	movt	r3, #1
   11a44:	mov	r1, r0
   11a48:	moveq	r3, r2
   11a4c:	mov	r2, r4
   11a50:	mov	r0, #1
   11a54:	bl	10ed0 <__printf_chk@plt>
   11a58:	b	117e4 <__assert_fail@plt+0x860>
   11a5c:	ldr	r1, [r4, #8]!
   11a60:	cmp	r1, #0
   11a64:	beq	11974 <__assert_fail@plt+0x9f0>
   11a68:	mov	r0, r5
   11a6c:	bl	10d14 <strcmp@plt>
   11a70:	cmp	r0, #0
   11a74:	bne	11a5c <__assert_fail@plt+0xad8>
   11a78:	b	11974 <__assert_fail@plt+0x9f0>
   11a7c:	mov	r0, r4
   11a80:	bl	10d8c <dcgettext@plt>
   11a84:	mov	r1, r0
   11a88:	movw	r3, #33896	; 0x8468
   11a8c:	movt	r3, #1
   11a90:	movw	r2, #33936	; 0x8490
   11a94:	movt	r2, #1
   11a98:	mov	r0, #1
   11a9c:	bl	10ed0 <__printf_chk@plt>
   11aa0:	mov	r1, r4
   11aa4:	mov	r0, #5
   11aa8:	bl	10f24 <setlocale@plt>
   11aac:	cmp	r0, #0
   11ab0:	beq	11acc <__assert_fail@plt+0xb48>
   11ab4:	movw	r1, #33952	; 0x84a0
   11ab8:	movt	r1, #1
   11abc:	mov	r2, #3
   11ac0:	bl	10f6c <strncmp@plt>
   11ac4:	cmp	r0, #0
   11ac8:	bne	11b28 <__assert_fail@plt+0xba4>
   11acc:	mov	r2, #5
   11ad0:	movw	r1, #34028	; 0x84ec
   11ad4:	movt	r1, #1
   11ad8:	mov	r0, #0
   11adc:	bl	10d8c <dcgettext@plt>
   11ae0:	mov	r1, r0
   11ae4:	movw	r3, #32596	; 0x7f54
   11ae8:	movt	r3, #1
   11aec:	movw	r2, #33896	; 0x8468
   11af0:	movt	r2, #1
   11af4:	mov	r0, #1
   11af8:	bl	10ed0 <__printf_chk@plt>
   11afc:	movw	r1, #34056	; 0x8508
   11b00:	movt	r1, #1
   11b04:	mov	r2, #5
   11b08:	mov	r0, #0
   11b0c:	bl	10d8c <dcgettext@plt>
   11b10:	movw	r4, #32596	; 0x7f54
   11b14:	movt	r4, #1
   11b18:	movw	r3, #34636	; 0x874c
   11b1c:	movt	r3, #1
   11b20:	mov	r1, r0
   11b24:	b	11a4c <__assert_fail@plt+0xac8>
   11b28:	movw	r5, #32596	; 0x7f54
   11b2c:	movt	r5, #1
   11b30:	mov	r4, r5
   11b34:	mov	r2, #5
   11b38:	movw	r1, #33956	; 0x84a4
   11b3c:	movt	r1, #1
   11b40:	mov	r0, #0
   11b44:	bl	10d8c <dcgettext@plt>
   11b48:	ldr	r1, [r7]
   11b4c:	bl	10d08 <fputs_unlocked@plt>
   11b50:	b	119ec <__assert_fail@plt+0xa68>
   11b54:	movw	r3, #37256	; 0x9188
   11b58:	movt	r3, #2
   11b5c:	str	r0, [r3]
   11b60:	bx	lr
   11b64:	movw	r3, #37256	; 0x9188
   11b68:	movt	r3, #2
   11b6c:	strb	r0, [r3, #4]
   11b70:	bx	lr
   11b74:	movw	r3, #37204	; 0x9154
   11b78:	movt	r3, #2
   11b7c:	strd	r4, [sp, #-16]!
   11b80:	ldr	r0, [r3]
   11b84:	str	r6, [sp, #8]
   11b88:	str	lr, [sp, #12]
   11b8c:	sub	sp, sp, #8
   11b90:	bl	17984 <__assert_fail@plt+0x6a00>
   11b94:	cmp	r0, #0
   11b98:	beq	11bc4 <__assert_fail@plt+0xc40>
   11b9c:	movw	r4, #37256	; 0x9188
   11ba0:	movt	r4, #2
   11ba4:	ldrb	r6, [r4, #4]
   11ba8:	bl	10eac <__errno_location@plt>
   11bac:	mov	r5, r0
   11bb0:	cmp	r6, #0
   11bb4:	beq	11bf0 <__assert_fail@plt+0xc6c>
   11bb8:	ldr	r3, [r0]
   11bbc:	cmp	r3, #32
   11bc0:	bne	11bf0 <__assert_fail@plt+0xc6c>
   11bc4:	movw	r3, #37200	; 0x9150
   11bc8:	movt	r3, #2
   11bcc:	ldr	r0, [r3]
   11bd0:	bl	17984 <__assert_fail@plt+0x6a00>
   11bd4:	cmp	r0, #0
   11bd8:	bne	11c38 <__assert_fail@plt+0xcb4>
   11bdc:	add	sp, sp, #8
   11be0:	ldrd	r4, [sp]
   11be4:	ldr	r6, [sp, #8]
   11be8:	add	sp, sp, #12
   11bec:	pop	{pc}		; (ldr pc, [sp], #4)
   11bf0:	movw	r1, #34792	; 0x87e8
   11bf4:	movt	r1, #1
   11bf8:	mov	r2, #5
   11bfc:	mov	r0, #0
   11c00:	bl	10d8c <dcgettext@plt>
   11c04:	mov	r6, r0
   11c08:	ldr	r0, [r4]
   11c0c:	cmp	r0, #0
   11c10:	beq	11c48 <__assert_fail@plt+0xcc4>
   11c14:	ldr	r4, [r5]
   11c18:	bl	14db0 <__assert_fail@plt+0x3e2c>
   11c1c:	mov	r3, r0
   11c20:	movw	r2, #34804	; 0x87f4
   11c24:	movt	r2, #1
   11c28:	mov	r0, #0
   11c2c:	str	r6, [sp]
   11c30:	mov	r1, r4
   11c34:	bl	10e04 <error@plt>
   11c38:	movw	r3, #37112	; 0x90f8
   11c3c:	movt	r3, #2
   11c40:	ldr	r0, [r3]
   11c44:	bl	10d38 <_exit@plt>
   11c48:	mov	r3, r6
   11c4c:	movw	r2, #34808	; 0x87f8
   11c50:	movt	r2, #1
   11c54:	ldr	r1, [r5]
   11c58:	bl	10e04 <error@plt>
   11c5c:	b	11c38 <__assert_fail@plt+0xcb4>
   11c60:	str	r4, [sp, #-8]!
   11c64:	str	lr, [sp, #4]
   11c68:	bl	11d24 <__assert_fail@plt+0xda0>
   11c6c:	cmp	r0, #0
   11c70:	beq	11c80 <__assert_fail@plt+0xcfc>
   11c74:	ldr	r4, [sp]
   11c78:	add	sp, sp, #4
   11c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   11c80:	bl	167b8 <__assert_fail@plt+0x5834>
   11c84:	strd	r4, [sp, #-16]!
   11c88:	mov	r4, r0
   11c8c:	str	r6, [sp, #8]
   11c90:	str	lr, [sp, #12]
   11c94:	ldrb	ip, [r0]
   11c98:	sub	r5, ip, #47	; 0x2f
   11c9c:	clz	r5, r5
   11ca0:	bl	176f4 <__assert_fail@plt+0x6770>
   11ca4:	lsr	r5, r5, #5
   11ca8:	sub	r0, r0, r4
   11cac:	cmp	r0, r5
   11cb0:	bls	11d0c <__assert_fail@plt+0xd88>
   11cb4:	sub	r3, r0, #1
   11cb8:	ldrb	r2, [r4, r3]
   11cbc:	cmp	r2, #47	; 0x2f
   11cc0:	bne	11d0c <__assert_fail@plt+0xd88>
   11cc4:	cmp	r3, r5
   11cc8:	bls	11d1c <__assert_fail@plt+0xd98>
   11ccc:	add	r2, r4, r0
   11cd0:	ldrb	r2, [r2, #-2]
   11cd4:	cmp	r2, #47	; 0x2f
   11cd8:	bne	11d1c <__assert_fail@plt+0xd98>
   11cdc:	sub	r0, r0, #3
   11ce0:	sub	ip, r4, #1
   11ce4:	add	r3, r4, r0
   11ce8:	add	ip, ip, r5
   11cec:	rsb	r2, r4, #1
   11cf0:	b	11d00 <__assert_fail@plt+0xd7c>
   11cf4:	ldrb	r1, [r3], #-1
   11cf8:	cmp	r1, #47	; 0x2f
   11cfc:	bne	11d0c <__assert_fail@plt+0xd88>
   11d00:	cmp	r3, ip
   11d04:	add	r0, r2, r3
   11d08:	bne	11cf4 <__assert_fail@plt+0xd70>
   11d0c:	ldrd	r4, [sp]
   11d10:	ldr	r6, [sp, #8]
   11d14:	add	sp, sp, #12
   11d18:	pop	{pc}		; (ldr pc, [sp], #4)
   11d1c:	mov	r0, r3
   11d20:	b	11d0c <__assert_fail@plt+0xd88>
   11d24:	strd	r4, [sp, #-16]!
   11d28:	mov	r5, r0
   11d2c:	str	r6, [sp, #8]
   11d30:	str	lr, [sp, #12]
   11d34:	ldrb	r6, [r0]
   11d38:	bl	176f4 <__assert_fail@plt+0x6770>
   11d3c:	sub	r4, r0, r5
   11d40:	sub	r6, r6, #47	; 0x2f
   11d44:	clz	r6, r6
   11d48:	lsr	r6, r6, #5
   11d4c:	cmp	r6, r4
   11d50:	bcs	11dac <__assert_fail@plt+0xe28>
   11d54:	sub	r3, r4, #1
   11d58:	ldrb	r2, [r5, r3]
   11d5c:	cmp	r2, #47	; 0x2f
   11d60:	bne	11e04 <__assert_fail@plt+0xe80>
   11d64:	cmp	r6, r3
   11d68:	bcs	11e34 <__assert_fail@plt+0xeb0>
   11d6c:	add	r2, r5, r4
   11d70:	ldrb	r2, [r2, #-2]
   11d74:	cmp	r2, #47	; 0x2f
   11d78:	bne	11e00 <__assert_fail@plt+0xe7c>
   11d7c:	sub	r4, r4, #3
   11d80:	sub	r2, r5, #1
   11d84:	add	r3, r5, r4
   11d88:	add	r6, r2, r6
   11d8c:	rsb	r1, r5, #1
   11d90:	b	11da0 <__assert_fail@plt+0xe1c>
   11d94:	ldrb	r2, [r3], #-1
   11d98:	cmp	r2, #47	; 0x2f
   11d9c:	bne	11e04 <__assert_fail@plt+0xe80>
   11da0:	cmp	r3, r6
   11da4:	add	r4, r1, r3
   11da8:	bne	11d94 <__assert_fail@plt+0xe10>
   11dac:	add	r0, r4, #1
   11db0:	cmp	r4, #0
   11db4:	addeq	r0, r0, #1
   11db8:	bl	17604 <__assert_fail@plt+0x6680>
   11dbc:	subs	r6, r0, #0
   11dc0:	beq	11e2c <__assert_fail@plt+0xea8>
   11dc4:	mov	r1, r5
   11dc8:	mov	r2, r4
   11dcc:	bl	10d44 <memcpy@plt>
   11dd0:	cmp	r4, #0
   11dd4:	bne	11de4 <__assert_fail@plt+0xe60>
   11dd8:	mov	r3, #46	; 0x2e
   11ddc:	mov	r4, #1
   11de0:	strb	r3, [r6]
   11de4:	mov	r3, #0
   11de8:	strb	r3, [r6, r4]
   11dec:	mov	r0, r6
   11df0:	ldrd	r4, [sp]
   11df4:	ldr	r6, [sp, #8]
   11df8:	add	sp, sp, #12
   11dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   11e00:	mov	r4, r3
   11e04:	add	r0, r4, #1
   11e08:	cmp	r4, #0
   11e0c:	addeq	r0, r0, #1
   11e10:	bl	17604 <__assert_fail@plt+0x6680>
   11e14:	subs	r6, r0, #0
   11e18:	beq	11e2c <__assert_fail@plt+0xea8>
   11e1c:	mov	r1, r5
   11e20:	mov	r2, r4
   11e24:	bl	10d44 <memcpy@plt>
   11e28:	b	11de4 <__assert_fail@plt+0xe60>
   11e2c:	mov	r6, #0
   11e30:	b	11dec <__assert_fail@plt+0xe68>
   11e34:	mov	r4, r3
   11e38:	b	11dac <__assert_fail@plt+0xe28>
   11e3c:	str	r4, [sp, #-8]!
   11e40:	str	lr, [sp, #4]
   11e44:	bl	11e60 <__assert_fail@plt+0xedc>
   11e48:	cmp	r0, #0
   11e4c:	beq	11e5c <__assert_fail@plt+0xed8>
   11e50:	ldr	r4, [sp]
   11e54:	add	sp, sp, #4
   11e58:	pop	{pc}		; (ldr pc, [sp], #4)
   11e5c:	bl	167b8 <__assert_fail@plt+0x5834>
   11e60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11e64:	strd	r6, [sp, #8]
   11e68:	mov	r6, r1
   11e6c:	mov	r7, r0
   11e70:	strd	r8, [sp, #16]
   11e74:	mov	r9, r2
   11e78:	strd	sl, [sp, #24]
   11e7c:	str	lr, [sp, #32]
   11e80:	sub	sp, sp, #4
   11e84:	bl	176f4 <__assert_fail@plt+0x6770>
   11e88:	mov	r4, r0
   11e8c:	bl	17744 <__assert_fail@plt+0x67c0>
   11e90:	mov	r5, r0
   11e94:	mov	r0, r6
   11e98:	bl	10e94 <strlen@plt>
   11e9c:	sub	r4, r4, r7
   11ea0:	cmp	r5, #0
   11ea4:	add	r4, r4, r5
   11ea8:	mov	r8, r0
   11eac:	beq	11f44 <__assert_fail@plt+0xfc0>
   11eb0:	add	r3, r7, r4
   11eb4:	ldrb	r3, [r3, #-1]
   11eb8:	cmp	r3, #47	; 0x2f
   11ebc:	beq	11f38 <__assert_fail@plt+0xfb4>
   11ec0:	ldrb	r3, [r6]
   11ec4:	cmp	r3, #47	; 0x2f
   11ec8:	beq	11f38 <__assert_fail@plt+0xfb4>
   11ecc:	mov	r5, #1
   11ed0:	mov	sl, #47	; 0x2f
   11ed4:	add	r0, r8, #1
   11ed8:	add	r0, r0, r4
   11edc:	add	r0, r0, r5
   11ee0:	bl	17604 <__assert_fail@plt+0x6680>
   11ee4:	subs	fp, r0, #0
   11ee8:	beq	11f18 <__assert_fail@plt+0xf94>
   11eec:	mov	r2, r4
   11ef0:	mov	r1, r7
   11ef4:	bl	10e64 <mempcpy@plt>
   11ef8:	cmp	r9, #0
   11efc:	mov	r2, r8
   11f00:	strb	sl, [r0], r5
   11f04:	mov	r1, r6
   11f08:	strne	r0, [r9]
   11f0c:	bl	10e64 <mempcpy@plt>
   11f10:	mov	r3, #0
   11f14:	strb	r3, [r0]
   11f18:	mov	r0, fp
   11f1c:	add	sp, sp, #4
   11f20:	ldrd	r4, [sp]
   11f24:	ldrd	r6, [sp, #8]
   11f28:	ldrd	r8, [sp, #16]
   11f2c:	ldrd	sl, [sp, #24]
   11f30:	add	sp, sp, #32
   11f34:	pop	{pc}		; (ldr pc, [sp], #4)
   11f38:	mov	r5, #0
   11f3c:	mov	sl, r5
   11f40:	b	11ed4 <__assert_fail@plt+0xf50>
   11f44:	ldrb	r3, [r6]
   11f48:	cmp	r3, #47	; 0x2f
   11f4c:	moveq	r5, #1
   11f50:	movne	sl, #0
   11f54:	moveq	sl, #46	; 0x2e
   11f58:	b	11ed4 <__assert_fail@plt+0xf50>
   11f5c:	strd	r4, [sp, #-12]!
   11f60:	mov	r5, r0
   11f64:	str	lr, [sp, #8]
   11f68:	sub	sp, sp, #12
   11f6c:	bl	10eac <__errno_location@plt>
   11f70:	mov	r4, r0
   11f74:	mov	r2, #0
   11f78:	ldr	r3, [r4]
   11f7c:	mov	r0, r5
   11f80:	str	r2, [r4]
   11f84:	str	r3, [sp]
   11f88:	str	r3, [sp, #4]
   11f8c:	bl	10d2c <free@plt>
   11f90:	ldr	r3, [r4]
   11f94:	add	r2, sp, #8
   11f98:	clz	r3, r3
   11f9c:	lsr	r3, r3, #5
   11fa0:	add	r3, r2, r3, lsl #2
   11fa4:	ldr	r3, [r3, #-8]
   11fa8:	str	r3, [r4]
   11fac:	add	sp, sp, #12
   11fb0:	ldrd	r4, [sp]
   11fb4:	add	sp, sp, #8
   11fb8:	pop	{pc}		; (ldr pc, [sp], #4)
   11fbc:	strd	r4, [sp, #-16]!
   11fc0:	subs	r4, r0, #0
   11fc4:	str	r6, [sp, #8]
   11fc8:	str	lr, [sp, #12]
   11fcc:	beq	12064 <__assert_fail@plt+0x10e0>
   11fd0:	mov	r1, #47	; 0x2f
   11fd4:	bl	10f3c <strrchr@plt>
   11fd8:	subs	r5, r0, #0
   11fdc:	beq	1203c <__assert_fail@plt+0x10b8>
   11fe0:	add	r6, r5, #1
   11fe4:	sub	r3, r6, r4
   11fe8:	cmp	r3, #6
   11fec:	ble	1203c <__assert_fail@plt+0x10b8>
   11ff0:	movw	r1, #34868	; 0x8834
   11ff4:	movt	r1, #1
   11ff8:	mov	r2, #7
   11ffc:	sub	r0, r5, #6
   12000:	bl	10f6c <strncmp@plt>
   12004:	cmp	r0, #0
   12008:	bne	1203c <__assert_fail@plt+0x10b8>
   1200c:	movw	r1, #34876	; 0x883c
   12010:	movt	r1, #1
   12014:	mov	r2, #3
   12018:	mov	r0, r6
   1201c:	bl	10f6c <strncmp@plt>
   12020:	cmp	r0, #0
   12024:	movne	r4, r6
   12028:	bne	1203c <__assert_fail@plt+0x10b8>
   1202c:	add	r4, r5, #4
   12030:	movw	r3, #37184	; 0x9140
   12034:	movt	r3, #2
   12038:	str	r4, [r3]
   1203c:	movw	r2, #37264	; 0x9190
   12040:	movt	r2, #2
   12044:	ldr	r6, [sp, #8]
   12048:	movw	r3, #37188	; 0x9144
   1204c:	movt	r3, #2
   12050:	str	r4, [r2]
   12054:	str	r4, [r3]
   12058:	ldrd	r4, [sp]
   1205c:	add	sp, sp, #12
   12060:	pop	{pc}		; (ldr pc, [sp], #4)
   12064:	movw	r3, #37200	; 0x9150
   12068:	movt	r3, #2
   1206c:	movw	r0, #34812	; 0x87fc
   12070:	movt	r0, #1
   12074:	ldr	r3, [r3]
   12078:	mov	r2, #55	; 0x37
   1207c:	mov	r1, #1
   12080:	bl	10dc8 <fwrite@plt>
   12084:	bl	10f78 <abort@plt>
   12088:	mov	r2, #5
   1208c:	strd	r4, [sp, #-16]!
   12090:	mov	r5, r0
   12094:	str	r6, [sp, #8]
   12098:	mov	r6, r1
   1209c:	mov	r1, r0
   120a0:	mov	r0, #0
   120a4:	str	lr, [sp, #12]
   120a8:	bl	10d8c <dcgettext@plt>
   120ac:	cmp	r5, r0
   120b0:	mov	r4, r0
   120b4:	beq	120cc <__assert_fail@plt+0x1148>
   120b8:	mov	r0, r4
   120bc:	ldrd	r4, [sp]
   120c0:	ldr	r6, [sp, #8]
   120c4:	add	sp, sp, #12
   120c8:	pop	{pc}		; (ldr pc, [sp], #4)
   120cc:	bl	17bf0 <__assert_fail@plt+0x6c6c>
   120d0:	ldrb	r3, [r0]
   120d4:	bic	r3, r3, #32
   120d8:	cmp	r3, #85	; 0x55
   120dc:	bne	12144 <__assert_fail@plt+0x11c0>
   120e0:	ldrb	r3, [r0, #1]
   120e4:	bic	r3, r3, #32
   120e8:	cmp	r3, #84	; 0x54
   120ec:	bne	121c4 <__assert_fail@plt+0x1240>
   120f0:	ldrb	r3, [r0, #2]
   120f4:	bic	r3, r3, #32
   120f8:	cmp	r3, #70	; 0x46
   120fc:	bne	121c4 <__assert_fail@plt+0x1240>
   12100:	ldrb	r3, [r0, #3]
   12104:	cmp	r3, #45	; 0x2d
   12108:	bne	121c4 <__assert_fail@plt+0x1240>
   1210c:	ldrb	r3, [r0, #4]
   12110:	cmp	r3, #56	; 0x38
   12114:	bne	121c4 <__assert_fail@plt+0x1240>
   12118:	ldrb	r3, [r0, #5]
   1211c:	cmp	r3, #0
   12120:	bne	121c4 <__assert_fail@plt+0x1240>
   12124:	ldrb	r2, [r4]
   12128:	movw	r3, #34968	; 0x8898
   1212c:	movt	r3, #1
   12130:	movw	r4, #34980	; 0x88a4
   12134:	movt	r4, #1
   12138:	cmp	r2, #96	; 0x60
   1213c:	movne	r4, r3
   12140:	b	120b8 <__assert_fail@plt+0x1134>
   12144:	cmp	r3, #71	; 0x47
   12148:	bne	121c4 <__assert_fail@plt+0x1240>
   1214c:	ldrb	r3, [r0, #1]
   12150:	bic	r3, r3, #32
   12154:	cmp	r3, #66	; 0x42
   12158:	bne	121c4 <__assert_fail@plt+0x1240>
   1215c:	ldrb	r3, [r0, #2]
   12160:	cmp	r3, #49	; 0x31
   12164:	bne	121c4 <__assert_fail@plt+0x1240>
   12168:	ldrb	r3, [r0, #3]
   1216c:	cmp	r3, #56	; 0x38
   12170:	bne	121c4 <__assert_fail@plt+0x1240>
   12174:	ldrb	r3, [r0, #4]
   12178:	cmp	r3, #48	; 0x30
   1217c:	bne	121c4 <__assert_fail@plt+0x1240>
   12180:	ldrb	r3, [r0, #5]
   12184:	cmp	r3, #51	; 0x33
   12188:	bne	121c4 <__assert_fail@plt+0x1240>
   1218c:	ldrb	r3, [r0, #6]
   12190:	cmp	r3, #48	; 0x30
   12194:	bne	121c4 <__assert_fail@plt+0x1240>
   12198:	ldrb	r3, [r0, #7]
   1219c:	cmp	r3, #0
   121a0:	bne	121c4 <__assert_fail@plt+0x1240>
   121a4:	ldrb	r2, [r4]
   121a8:	movw	r3, #34972	; 0x889c
   121ac:	movt	r3, #1
   121b0:	movw	r4, #34976	; 0x88a0
   121b4:	movt	r4, #1
   121b8:	cmp	r2, #96	; 0x60
   121bc:	movne	r4, r3
   121c0:	b	120b8 <__assert_fail@plt+0x1134>
   121c4:	movw	r3, #34984	; 0x88a8
   121c8:	movt	r3, #1
   121cc:	cmp	r6, #9
   121d0:	movw	r4, #34964	; 0x8894
   121d4:	movt	r4, #1
   121d8:	movne	r4, r3
   121dc:	b	120b8 <__assert_fail@plt+0x1134>
   121e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   121e4:	strd	r6, [sp, #8]
   121e8:	strd	r8, [sp, #16]
   121ec:	mov	r8, r3
   121f0:	strd	sl, [sp, #24]
   121f4:	mov	fp, r0
   121f8:	mov	sl, r1
   121fc:	str	lr, [sp, #32]
   12200:	sub	sp, sp, #140	; 0x8c
   12204:	ldr	r3, [sp, #180]	; 0xb4
   12208:	str	r2, [sp, #28]
   1220c:	and	r4, r3, #2
   12210:	ubfx	r3, r3, #1, #1
   12214:	str	r3, [sp, #44]	; 0x2c
   12218:	bl	10de0 <__ctype_get_mb_cur_max@plt>
   1221c:	ldr	r3, [sp, #176]	; 0xb0
   12220:	str	r0, [sp, #76]	; 0x4c
   12224:	cmp	r3, #10
   12228:	ldrls	pc, [pc, r3, lsl #2]
   1222c:	b	13bc8 <__assert_fail@plt+0x2c44>
   12230:			; <UNDEFINED> instruction: 0x000126b0
   12234:	andeq	r2, r1, ip, asr #15
   12238:	andeq	r2, r1, r8, asr #26
   1223c:	andeq	r2, r1, r8, lsr r8
   12240:			; <UNDEFINED> instruction: 0x000125b8
   12244:	andeq	r2, r1, r4, lsr r6
   12248:	andeq	r2, r1, ip, lsl #14
   1224c:	andeq	r2, r1, r4, ror r7
   12250:	andeq	r2, r1, ip, asr r2
   12254:	andeq	r2, r1, ip, asr r2
   12258:	andeq	r2, r1, ip, asr r2
   1225c:	ldr	r3, [sp, #176]	; 0xb0
   12260:	cmp	r3, #10
   12264:	beq	12290 <__assert_fail@plt+0x130c>
   12268:	mov	r1, r3
   1226c:	movw	r0, #34988	; 0x88ac
   12270:	movt	r0, #1
   12274:	bl	12088 <__assert_fail@plt+0x1104>
   12278:	str	r0, [sp, #188]	; 0xbc
   1227c:	movw	r0, #34984	; 0x88a8
   12280:	movt	r0, #1
   12284:	ldr	r1, [sp, #176]	; 0xb0
   12288:	bl	12088 <__assert_fail@plt+0x1104>
   1228c:	str	r0, [sp, #192]	; 0xc0
   12290:	cmp	r4, #0
   12294:	movne	r4, #0
   12298:	beq	13954 <__assert_fail@plt+0x29d0>
   1229c:	mov	r5, #0
   122a0:	ldr	r0, [sp, #192]	; 0xc0
   122a4:	mov	r9, r5
   122a8:	str	r5, [sp, #64]	; 0x40
   122ac:	bl	10e94 <strlen@plt>
   122b0:	mov	r3, #1
   122b4:	ldr	r2, [sp, #44]	; 0x2c
   122b8:	cmp	r0, r5
   122bc:	moveq	r2, r5
   122c0:	str	r3, [sp, #32]
   122c4:	str	r3, [sp, #48]	; 0x30
   122c8:	str	r5, [sp, #52]	; 0x34
   122cc:	str	r3, [sp, #60]	; 0x3c
   122d0:	ldr	r3, [sp, #180]	; 0xb4
   122d4:	str	r0, [sp, #56]	; 0x38
   122d8:	str	r5, [sp, #68]	; 0x44
   122dc:	str	r5, [sp, #80]	; 0x50
   122e0:	str	r5, [sp, #84]	; 0x54
   122e4:	and	r3, r3, #1
   122e8:	str	r2, [sp, #88]	; 0x58
   122ec:	str	r3, [sp, #92]	; 0x5c
   122f0:	ldr	r3, [sp, #180]	; 0xb4
   122f4:	and	r3, r3, #4
   122f8:	str	r3, [sp, #96]	; 0x60
   122fc:	ldr	r3, [sp, #192]	; 0xc0
   12300:	str	r3, [sp, #72]	; 0x48
   12304:	mov	r3, fp
   12308:	mov	r7, #0
   1230c:	mov	fp, r9
   12310:	mov	r9, r3
   12314:	cmn	r8, #1
   12318:	beq	1291c <__assert_fail@plt+0x1998>
   1231c:	subs	r6, r8, r7
   12320:	movne	r6, #1
   12324:	cmp	r6, #0
   12328:	beq	12934 <__assert_fail@plt+0x19b0>
   1232c:	ldr	r0, [sp, #28]
   12330:	ldr	r3, [sp, #48]	; 0x30
   12334:	cmp	r3, #0
   12338:	add	r3, r0, r7
   1233c:	str	r3, [sp, #36]	; 0x24
   12340:	beq	12dc0 <__assert_fail@plt+0x1e3c>
   12344:	ldr	r2, [sp, #56]	; 0x38
   12348:	cmp	r2, #0
   1234c:	beq	132c0 <__assert_fail@plt+0x233c>
   12350:	cmp	r2, #1
   12354:	mov	r3, r2
   12358:	movls	r3, #0
   1235c:	movhi	r3, #1
   12360:	cmn	r8, #1
   12364:	add	r5, r7, r2
   12368:	movne	r3, #0
   1236c:	cmp	r3, #0
   12370:	beq	1237c <__assert_fail@plt+0x13f8>
   12374:	bl	10e94 <strlen@plt>
   12378:	mov	r8, r0
   1237c:	cmp	r5, r8
   12380:	bhi	132c0 <__assert_fail@plt+0x233c>
   12384:	ldr	r0, [sp, #36]	; 0x24
   12388:	ldr	r2, [sp, #56]	; 0x38
   1238c:	ldr	r1, [sp, #72]	; 0x48
   12390:	bl	10d74 <memcmp@plt>
   12394:	cmp	r0, #0
   12398:	bne	132c0 <__assert_fail@plt+0x233c>
   1239c:	ldr	r3, [sp, #44]	; 0x2c
   123a0:	cmp	r3, #0
   123a4:	bne	13a6c <__assert_fail@plt+0x2ae8>
   123a8:	ldr	r3, [sp, #36]	; 0x24
   123ac:	ldrb	r5, [r3]
   123b0:	cmp	r5, #126	; 0x7e
   123b4:	ldrls	pc, [pc, r5, lsl #2]
   123b8:	b	13854 <__assert_fail@plt+0x28d0>
   123bc:	muleq	r1, r0, sl
   123c0:	andeq	r3, r1, r4, asr r8
   123c4:	andeq	r3, r1, r4, asr r8
   123c8:	andeq	r3, r1, r4, asr r8
   123cc:	andeq	r3, r1, r4, asr r8
   123d0:	andeq	r3, r1, r4, asr r8
   123d4:	andeq	r3, r1, r4, asr r8
   123d8:	andeq	r2, r1, r8, ror #19
   123dc:	andeq	r2, r1, r0, ror #19
   123e0:	strdeq	r2, [r1], -r0
   123e4:	andeq	r2, r1, r4, ror fp
   123e8:	andeq	r2, r1, r4, ror #22
   123ec:	andeq	r2, r1, ip, lsl #17
   123f0:	andeq	r2, r1, r0, asr #22
   123f4:	andeq	r3, r1, r4, asr r8
   123f8:	andeq	r3, r1, r4, asr r8
   123fc:	andeq	r3, r1, r4, asr r8
   12400:	andeq	r3, r1, r4, asr r8
   12404:	andeq	r3, r1, r4, asr r8
   12408:	andeq	r3, r1, r4, asr r8
   1240c:	andeq	r3, r1, r4, asr r8
   12410:	andeq	r3, r1, r4, asr r8
   12414:	andeq	r3, r1, r4, asr r8
   12418:	andeq	r3, r1, r4, asr r8
   1241c:	andeq	r3, r1, r4, asr r8
   12420:	andeq	r3, r1, r4, asr r8
   12424:	andeq	r3, r1, r4, asr r8
   12428:	andeq	r3, r1, r4, asr r8
   1242c:	andeq	r3, r1, r4, asr r8
   12430:	andeq	r3, r1, r4, asr r8
   12434:	andeq	r3, r1, r4, asr r8
   12438:	andeq	r3, r1, r4, asr r8
   1243c:	andeq	r2, r1, ip, ror #23
   12440:	andeq	r2, r1, r0, ror #23
   12444:	andeq	r2, r1, r0, ror #23
   12448:	ldrdeq	r2, [r1], -r4
   1244c:	andeq	r2, r1, r0, ror #23
   12450:			; <UNDEFINED> instruction: 0x00012cb8
   12454:	andeq	r2, r1, r0, ror #23
   12458:	andeq	r2, r1, r8, lsr #26
   1245c:	andeq	r2, r1, r0, ror #23
   12460:	andeq	r2, r1, r0, ror #23
   12464:	andeq	r2, r1, r0, ror #23
   12468:			; <UNDEFINED> instruction: 0x00012cb8
   1246c:			; <UNDEFINED> instruction: 0x00012cb8
   12470:			; <UNDEFINED> instruction: 0x00012cb8
   12474:			; <UNDEFINED> instruction: 0x00012cb8
   12478:			; <UNDEFINED> instruction: 0x00012cb8
   1247c:			; <UNDEFINED> instruction: 0x00012cb8
   12480:			; <UNDEFINED> instruction: 0x00012cb8
   12484:			; <UNDEFINED> instruction: 0x00012cb8
   12488:			; <UNDEFINED> instruction: 0x00012cb8
   1248c:			; <UNDEFINED> instruction: 0x00012cb8
   12490:			; <UNDEFINED> instruction: 0x00012cb8
   12494:			; <UNDEFINED> instruction: 0x00012cb8
   12498:			; <UNDEFINED> instruction: 0x00012cb8
   1249c:			; <UNDEFINED> instruction: 0x00012cb8
   124a0:			; <UNDEFINED> instruction: 0x00012cb8
   124a4:			; <UNDEFINED> instruction: 0x00012cb8
   124a8:	andeq	r2, r1, r0, ror #23
   124ac:	andeq	r2, r1, r0, ror #23
   124b0:	andeq	r2, r1, r0, ror #23
   124b4:	andeq	r2, r1, r0, ror #23
   124b8:	ldrdeq	r2, [r1], -r8
   124bc:	andeq	r3, r1, r4, asr r8
   124c0:			; <UNDEFINED> instruction: 0x00012cb8
   124c4:			; <UNDEFINED> instruction: 0x00012cb8
   124c8:			; <UNDEFINED> instruction: 0x00012cb8
   124cc:			; <UNDEFINED> instruction: 0x00012cb8
   124d0:			; <UNDEFINED> instruction: 0x00012cb8
   124d4:			; <UNDEFINED> instruction: 0x00012cb8
   124d8:			; <UNDEFINED> instruction: 0x00012cb8
   124dc:			; <UNDEFINED> instruction: 0x00012cb8
   124e0:			; <UNDEFINED> instruction: 0x00012cb8
   124e4:			; <UNDEFINED> instruction: 0x00012cb8
   124e8:			; <UNDEFINED> instruction: 0x00012cb8
   124ec:			; <UNDEFINED> instruction: 0x00012cb8
   124f0:			; <UNDEFINED> instruction: 0x00012cb8
   124f4:			; <UNDEFINED> instruction: 0x00012cb8
   124f8:			; <UNDEFINED> instruction: 0x00012cb8
   124fc:			; <UNDEFINED> instruction: 0x00012cb8
   12500:			; <UNDEFINED> instruction: 0x00012cb8
   12504:			; <UNDEFINED> instruction: 0x00012cb8
   12508:			; <UNDEFINED> instruction: 0x00012cb8
   1250c:			; <UNDEFINED> instruction: 0x00012cb8
   12510:			; <UNDEFINED> instruction: 0x00012cb8
   12514:			; <UNDEFINED> instruction: 0x00012cb8
   12518:			; <UNDEFINED> instruction: 0x00012cb8
   1251c:			; <UNDEFINED> instruction: 0x00012cb8
   12520:			; <UNDEFINED> instruction: 0x00012cb8
   12524:			; <UNDEFINED> instruction: 0x00012cb8
   12528:	andeq	r2, r1, r0, ror #23
   1252c:	andeq	r2, r1, ip, ror ip
   12530:			; <UNDEFINED> instruction: 0x00012cb8
   12534:	andeq	r2, r1, r0, ror #23
   12538:			; <UNDEFINED> instruction: 0x00012cb8
   1253c:	andeq	r2, r1, r0, ror #23
   12540:			; <UNDEFINED> instruction: 0x00012cb8
   12544:			; <UNDEFINED> instruction: 0x00012cb8
   12548:			; <UNDEFINED> instruction: 0x00012cb8
   1254c:			; <UNDEFINED> instruction: 0x00012cb8
   12550:			; <UNDEFINED> instruction: 0x00012cb8
   12554:			; <UNDEFINED> instruction: 0x00012cb8
   12558:			; <UNDEFINED> instruction: 0x00012cb8
   1255c:			; <UNDEFINED> instruction: 0x00012cb8
   12560:			; <UNDEFINED> instruction: 0x00012cb8
   12564:			; <UNDEFINED> instruction: 0x00012cb8
   12568:			; <UNDEFINED> instruction: 0x00012cb8
   1256c:			; <UNDEFINED> instruction: 0x00012cb8
   12570:			; <UNDEFINED> instruction: 0x00012cb8
   12574:			; <UNDEFINED> instruction: 0x00012cb8
   12578:			; <UNDEFINED> instruction: 0x00012cb8
   1257c:			; <UNDEFINED> instruction: 0x00012cb8
   12580:			; <UNDEFINED> instruction: 0x00012cb8
   12584:			; <UNDEFINED> instruction: 0x00012cb8
   12588:			; <UNDEFINED> instruction: 0x00012cb8
   1258c:			; <UNDEFINED> instruction: 0x00012cb8
   12590:			; <UNDEFINED> instruction: 0x00012cb8
   12594:			; <UNDEFINED> instruction: 0x00012cb8
   12598:			; <UNDEFINED> instruction: 0x00012cb8
   1259c:			; <UNDEFINED> instruction: 0x00012cb8
   125a0:			; <UNDEFINED> instruction: 0x00012cb8
   125a4:			; <UNDEFINED> instruction: 0x00012cb8
   125a8:	andeq	r2, r1, r8, lsl #23
   125ac:	andeq	r2, r1, r0, ror #23
   125b0:	andeq	r2, r1, r8, lsl #23
   125b4:	ldrdeq	r2, [r1], -r4
   125b8:	ldr	r3, [sp, #180]	; 0xb4
   125bc:	cmp	r4, #0
   125c0:	and	r3, r3, #1
   125c4:	str	r3, [sp, #92]	; 0x5c
   125c8:	ldr	r3, [sp, #180]	; 0xb4
   125cc:	and	r3, r3, #4
   125d0:	str	r3, [sp, #96]	; 0x60
   125d4:	moveq	r3, #1
   125d8:	streq	r3, [sp, #60]	; 0x3c
   125dc:	beq	12d6c <__assert_fail@plt+0x1de8>
   125e0:	mov	r3, #0
   125e4:	mov	r2, #1
   125e8:	mov	r4, r3
   125ec:	mov	r9, r3
   125f0:	str	r2, [sp, #32]
   125f4:	str	r2, [sp, #44]	; 0x2c
   125f8:	str	r3, [sp, #48]	; 0x30
   125fc:	str	r2, [sp, #52]	; 0x34
   12600:	str	r2, [sp, #56]	; 0x38
   12604:	str	r3, [sp, #60]	; 0x3c
   12608:	str	r2, [sp, #64]	; 0x40
   1260c:	str	r2, [sp, #68]	; 0x44
   12610:	str	r3, [sp, #80]	; 0x50
   12614:	str	r3, [sp, #84]	; 0x54
   12618:	str	r3, [sp, #88]	; 0x58
   1261c:	movw	r3, #34984	; 0x88a8
   12620:	movt	r3, #1
   12624:	str	r3, [sp, #72]	; 0x48
   12628:	mov	r3, #2
   1262c:	str	r3, [sp, #176]	; 0xb0
   12630:	b	12304 <__assert_fail@plt+0x1380>
   12634:	ldr	r3, [sp, #180]	; 0xb4
   12638:	cmp	r4, #0
   1263c:	and	r3, r3, #1
   12640:	str	r3, [sp, #92]	; 0x5c
   12644:	ldr	r3, [sp, #180]	; 0xb4
   12648:	and	r3, r3, #4
   1264c:	str	r3, [sp, #96]	; 0x60
   12650:	bne	13a24 <__assert_fail@plt+0x2aa0>
   12654:	cmp	sl, #0
   12658:	beq	137d0 <__assert_fail@plt+0x284c>
   1265c:	mov	r3, #34	; 0x22
   12660:	mov	r2, r4
   12664:	mov	r1, #1
   12668:	mov	r9, r2
   1266c:	strb	r3, [fp]
   12670:	movw	r3, #34964	; 0x8894
   12674:	movt	r3, #1
   12678:	mov	r4, r1
   1267c:	str	r1, [sp, #32]
   12680:	str	r2, [sp, #44]	; 0x2c
   12684:	str	r1, [sp, #48]	; 0x30
   12688:	str	r2, [sp, #52]	; 0x34
   1268c:	str	r1, [sp, #56]	; 0x38
   12690:	str	r1, [sp, #60]	; 0x3c
   12694:	str	r2, [sp, #64]	; 0x40
   12698:	str	r2, [sp, #68]	; 0x44
   1269c:	str	r3, [sp, #72]	; 0x48
   126a0:	str	r2, [sp, #80]	; 0x50
   126a4:	str	r2, [sp, #84]	; 0x54
   126a8:	str	r2, [sp, #88]	; 0x58
   126ac:	b	12304 <__assert_fail@plt+0x1380>
   126b0:	mov	r3, #0
   126b4:	mov	r2, #1
   126b8:	mov	r9, r3
   126bc:	str	r2, [sp, #32]
   126c0:	str	r3, [sp, #44]	; 0x2c
   126c4:	str	r3, [sp, #48]	; 0x30
   126c8:	str	r3, [sp, #52]	; 0x34
   126cc:	str	r3, [sp, #60]	; 0x3c
   126d0:	strd	r2, [sp, #64]	; 0x40
   126d4:	str	r3, [sp, #72]	; 0x48
   126d8:	str	r3, [sp, #80]	; 0x50
   126dc:	str	r3, [sp, #88]	; 0x58
   126e0:	ldr	r3, [sp, #180]	; 0xb4
   126e4:	and	r3, r3, r2
   126e8:	str	r3, [sp, #92]	; 0x5c
   126ec:	ldr	r3, [sp, #180]	; 0xb4
   126f0:	and	r3, r3, #4
   126f4:	str	r3, [sp, #96]	; 0x60
   126f8:	ldr	r3, [sp, #176]	; 0xb0
   126fc:	mov	r4, r3
   12700:	str	r3, [sp, #56]	; 0x38
   12704:	str	r3, [sp, #84]	; 0x54
   12708:	b	12304 <__assert_fail@plt+0x1380>
   1270c:	mov	r3, #1
   12710:	mov	r4, #0
   12714:	mov	r9, r4
   12718:	str	r3, [sp, #32]
   1271c:	str	r3, [sp, #44]	; 0x2c
   12720:	str	r3, [sp, #48]	; 0x30
   12724:	str	r4, [sp, #52]	; 0x34
   12728:	str	r3, [sp, #56]	; 0x38
   1272c:	str	r3, [sp, #60]	; 0x3c
   12730:	str	r3, [sp, #88]	; 0x58
   12734:	movw	r3, #34964	; 0x8894
   12738:	movt	r3, #1
   1273c:	str	r4, [sp, #64]	; 0x40
   12740:	str	r4, [sp, #68]	; 0x44
   12744:	str	r3, [sp, #72]	; 0x48
   12748:	ldr	r3, [sp, #180]	; 0xb4
   1274c:	str	r4, [sp, #80]	; 0x50
   12750:	str	r4, [sp, #84]	; 0x54
   12754:	and	r3, r3, #1
   12758:	str	r3, [sp, #92]	; 0x5c
   1275c:	ldr	r3, [sp, #180]	; 0xb4
   12760:	and	r3, r3, #4
   12764:	str	r3, [sp, #96]	; 0x60
   12768:	mov	r3, #5
   1276c:	str	r3, [sp, #176]	; 0xb0
   12770:	b	12304 <__assert_fail@plt+0x1380>
   12774:	mov	r3, #1
   12778:	mov	r4, #0
   1277c:	mov	r9, r4
   12780:	str	r3, [sp, #32]
   12784:	str	r4, [sp, #44]	; 0x2c
   12788:	str	r3, [sp, #48]	; 0x30
   1278c:	str	r3, [sp, #60]	; 0x3c
   12790:	ldr	r3, [sp, #180]	; 0xb4
   12794:	str	r4, [sp, #52]	; 0x34
   12798:	str	r4, [sp, #56]	; 0x38
   1279c:	str	r4, [sp, #64]	; 0x40
   127a0:	str	r4, [sp, #68]	; 0x44
   127a4:	and	r3, r3, #1
   127a8:	str	r4, [sp, #72]	; 0x48
   127ac:	str	r4, [sp, #80]	; 0x50
   127b0:	str	r4, [sp, #84]	; 0x54
   127b4:	str	r3, [sp, #92]	; 0x5c
   127b8:	ldr	r3, [sp, #180]	; 0xb4
   127bc:	str	r4, [sp, #88]	; 0x58
   127c0:	and	r3, r3, #4
   127c4:	str	r3, [sp, #96]	; 0x60
   127c8:	b	12304 <__assert_fail@plt+0x1380>
   127cc:	mov	r3, #0
   127d0:	mov	r2, #1
   127d4:	ldr	r1, [sp, #176]	; 0xb0
   127d8:	mov	r4, r3
   127dc:	mov	r9, r3
   127e0:	movw	r3, #34984	; 0x88a8
   127e4:	movt	r3, #1
   127e8:	str	r2, [sp, #32]
   127ec:	str	r2, [sp, #44]	; 0x2c
   127f0:	str	r4, [sp, #48]	; 0x30
   127f4:	strd	r2, [sp, #68]	; 0x44
   127f8:	ldr	r3, [sp, #180]	; 0xb4
   127fc:	str	r2, [sp, #52]	; 0x34
   12800:	str	r1, [sp, #56]	; 0x38
   12804:	str	r4, [sp, #60]	; 0x3c
   12808:	str	r2, [sp, #64]	; 0x40
   1280c:	and	r3, r3, r2
   12810:	str	r4, [sp, #80]	; 0x50
   12814:	str	r4, [sp, #84]	; 0x54
   12818:	str	r4, [sp, #88]	; 0x58
   1281c:	str	r3, [sp, #92]	; 0x5c
   12820:	ldr	r3, [sp, #180]	; 0xb4
   12824:	and	r3, r3, #4
   12828:	str	r3, [sp, #96]	; 0x60
   1282c:	mov	r3, #2
   12830:	str	r3, [sp, #176]	; 0xb0
   12834:	b	12304 <__assert_fail@plt+0x1380>
   12838:	mov	r3, #1
   1283c:	mov	r2, #0
   12840:	mov	r4, r2
   12844:	mov	r9, r2
   12848:	str	r3, [sp, #32]
   1284c:	str	r3, [sp, #44]	; 0x2c
   12850:	str	r2, [sp, #48]	; 0x30
   12854:	str	r3, [sp, #52]	; 0x34
   12858:	str	r3, [sp, #56]	; 0x38
   1285c:	str	r3, [sp, #60]	; 0x3c
   12860:	str	r3, [sp, #64]	; 0x40
   12864:	str	r3, [sp, #68]	; 0x44
   12868:	str	r3, [sp, #88]	; 0x58
   1286c:	movw	r3, #34984	; 0x88a8
   12870:	movt	r3, #1
   12874:	str	r3, [sp, #72]	; 0x48
   12878:	ldr	r3, [sp, #180]	; 0xb4
   1287c:	str	r2, [sp, #80]	; 0x50
   12880:	str	r2, [sp, #84]	; 0x54
   12884:	and	r3, r3, #1
   12888:	b	1281c <__assert_fail@plt+0x1898>
   1288c:	mov	r5, #102	; 0x66
   12890:	mov	r6, #0
   12894:	ldr	r3, [sp, #44]	; 0x2c
   12898:	cmp	r3, #0
   1289c:	bne	1374c <__assert_fail@plt+0x27c8>
   128a0:	ldr	r2, [sp, #52]	; 0x34
   128a4:	eor	r3, fp, #1
   128a8:	ands	r3, r2, r3
   128ac:	beq	128e4 <__assert_fail@plt+0x1960>
   128b0:	cmp	sl, r4
   128b4:	mov	fp, r3
   128b8:	movhi	r2, #39	; 0x27
   128bc:	strbhi	r2, [r9, r4]
   128c0:	add	r2, r4, #1
   128c4:	cmp	sl, r2
   128c8:	movhi	r1, #36	; 0x24
   128cc:	strbhi	r1, [r9, r2]
   128d0:	add	r2, r4, #2
   128d4:	add	r4, r4, #3
   128d8:	cmp	sl, r2
   128dc:	movhi	r1, #39	; 0x27
   128e0:	strbhi	r1, [r9, r2]
   128e4:	cmp	sl, r4
   128e8:	add	r7, r7, #1
   128ec:	movhi	r3, #92	; 0x5c
   128f0:	strbhi	r3, [r9, r4]
   128f4:	add	r4, r4, #1
   128f8:	cmp	r4, sl
   128fc:	ldr	r3, [sp, #32]
   12900:	strbcc	r5, [r9, r4]
   12904:	cmp	r6, #0
   12908:	add	r4, r4, #1
   1290c:	moveq	r3, #0
   12910:	cmn	r8, #1
   12914:	str	r3, [sp, #32]
   12918:	bne	1231c <__assert_fail@plt+0x1398>
   1291c:	ldr	r3, [sp, #28]
   12920:	ldrb	r6, [r3, r7]
   12924:	adds	r6, r6, #0
   12928:	movne	r6, #1
   1292c:	cmp	r6, #0
   12930:	bne	1232c <__assert_fail@plt+0x13a8>
   12934:	mov	r3, r9
   12938:	mov	r9, fp
   1293c:	mov	fp, r3
   12940:	ldr	r3, [sp, #68]	; 0x44
   12944:	cmp	r4, #0
   12948:	movne	r3, #0
   1294c:	cmp	r3, #0
   12950:	bne	13b44 <__assert_fail@plt+0x2bc0>
   12954:	ldr	r3, [sp, #44]	; 0x2c
   12958:	ldr	r2, [sp, #52]	; 0x34
   1295c:	eor	r3, r3, #1
   12960:	ands	r2, r3, r2
   12964:	beq	13a7c <__assert_fail@plt+0x2af8>
   12968:	ldr	r3, [sp, #80]	; 0x50
   1296c:	cmp	r3, #0
   12970:	beq	13a80 <__assert_fail@plt+0x2afc>
   12974:	ldr	r3, [sp, #32]
   12978:	cmp	r3, #0
   1297c:	bne	13af4 <__assert_fail@plt+0x2b70>
   12980:	ldr	r3, [sp, #84]	; 0x54
   12984:	adds	r3, r3, #0
   12988:	movne	r3, #1
   1298c:	cmp	sl, #0
   12990:	movne	r3, #0
   12994:	cmp	r3, #0
   12998:	ldreq	r2, [sp, #80]	; 0x50
   1299c:	beq	13a80 <__assert_fail@plt+0x2afc>
   129a0:	ldr	r2, [sp, #84]	; 0x54
   129a4:	mov	sl, r2
   129a8:	mov	r0, #0
   129ac:	mov	r4, #1
   129b0:	mov	r1, #39	; 0x27
   129b4:	str	r0, [sp, #44]	; 0x2c
   129b8:	strb	r1, [fp]
   129bc:	str	r0, [sp, #48]	; 0x30
   129c0:	str	r4, [sp, #52]	; 0x34
   129c4:	str	r4, [sp, #56]	; 0x38
   129c8:	str	r4, [sp, #64]	; 0x40
   129cc:	str	r0, [sp, #68]	; 0x44
   129d0:	str	r3, [sp, #80]	; 0x50
   129d4:	str	r2, [sp, #84]	; 0x54
   129d8:	str	r0, [sp, #88]	; 0x58
   129dc:	b	1261c <__assert_fail@plt+0x1698>
   129e0:	mov	r5, #98	; 0x62
   129e4:	b	12890 <__assert_fail@plt+0x190c>
   129e8:	mov	r5, #97	; 0x61
   129ec:	b	12890 <__assert_fail@plt+0x190c>
   129f0:	ldr	r3, [sp, #48]	; 0x30
   129f4:	str	r3, [sp, #40]	; 0x28
   129f8:	mov	r3, #116	; 0x74
   129fc:	ldr	r2, [sp, #68]	; 0x44
   12a00:	cmp	r2, #0
   12a04:	bne	12c00 <__assert_fail@plt+0x1c7c>
   12a08:	ldr	r2, [sp, #60]	; 0x3c
   12a0c:	cmp	r2, #0
   12a10:	bne	12b5c <__assert_fail@plt+0x1bd8>
   12a14:	ldr	r3, [sp, #44]	; 0x2c
   12a18:	mov	r6, #0
   12a1c:	cmp	r3, #0
   12a20:	beq	12bcc <__assert_fail@plt+0x1c48>
   12a24:	mov	r3, fp
   12a28:	ldr	r2, [sp, #184]	; 0xb8
   12a2c:	cmp	r2, #0
   12a30:	beq	12a50 <__assert_fail@plt+0x1acc>
   12a34:	ubfx	r1, r5, #5, #8
   12a38:	mov	r0, r2
   12a3c:	and	r2, r5, #31
   12a40:	ldr	r1, [r0, r1, lsl #2]
   12a44:	lsr	r2, r1, r2
   12a48:	tst	r2, #1
   12a4c:	bne	12894 <__assert_fail@plt+0x1910>
   12a50:	ldr	r2, [sp, #40]	; 0x28
   12a54:	cmp	r2, #0
   12a58:	addeq	r7, r7, #1
   12a5c:	bne	12894 <__assert_fail@plt+0x1910>
   12a60:	cmp	r3, #0
   12a64:	beq	128f8 <__assert_fail@plt+0x1974>
   12a68:	cmp	sl, r4
   12a6c:	mov	fp, #0
   12a70:	movhi	r3, #39	; 0x27
   12a74:	strbhi	r3, [r9, r4]
   12a78:	add	r3, r4, #1
   12a7c:	add	r4, r4, #2
   12a80:	cmp	sl, r3
   12a84:	movhi	r2, #39	; 0x27
   12a88:	strbhi	r2, [r9, r3]
   12a8c:	b	128f8 <__assert_fail@plt+0x1974>
   12a90:	ldr	r3, [sp, #48]	; 0x30
   12a94:	str	r3, [sp, #40]	; 0x28
   12a98:	eor	r3, fp, #1
   12a9c:	ldr	r2, [sp, #52]	; 0x34
   12aa0:	ands	r2, r2, r3
   12aa4:	beq	13764 <__assert_fail@plt+0x27e0>
   12aa8:	cmp	sl, r4
   12aac:	movhi	r3, #39	; 0x27
   12ab0:	strbhi	r3, [r9, r4]
   12ab4:	add	r3, r4, #1
   12ab8:	cmp	sl, r3
   12abc:	movhi	r1, #36	; 0x24
   12ac0:	strbhi	r1, [r9, r3]
   12ac4:	add	r3, r4, #2
   12ac8:	cmp	sl, r3
   12acc:	movhi	r1, #39	; 0x27
   12ad0:	strbhi	r1, [r9, r3]
   12ad4:	add	r3, r4, #3
   12ad8:	cmp	sl, r3
   12adc:	bls	137b0 <__assert_fail@plt+0x282c>
   12ae0:	mov	r4, r3
   12ae4:	mov	r3, #92	; 0x5c
   12ae8:	mov	fp, r2
   12aec:	mov	r2, r4
   12af0:	strb	r3, [r9, r4]
   12af4:	ldr	r3, [sp, #176]	; 0xb0
   12af8:	add	r4, r4, #1
   12afc:	cmp	r3, #2
   12b00:	beq	13818 <__assert_fail@plt+0x2894>
   12b04:	add	r3, r7, #1
   12b08:	cmp	r3, r8
   12b0c:	bcs	12b24 <__assert_fail@plt+0x1ba0>
   12b10:	ldr	r1, [sp, #28]
   12b14:	ldrb	r3, [r1, r3]
   12b18:	sub	r3, r3, #48	; 0x30
   12b1c:	cmp	r3, #9
   12b20:	bls	13828 <__assert_fail@plt+0x28a4>
   12b24:	mov	r3, #0
   12b28:	mov	r5, #48	; 0x30
   12b2c:	ldr	r6, [sp, #64]	; 0x40
   12b30:	cmp	r6, #0
   12b34:	beq	12a28 <__assert_fail@plt+0x1aa4>
   12b38:	mov	r6, #0
   12b3c:	b	12a50 <__assert_fail@plt+0x1acc>
   12b40:	ldr	r3, [sp, #48]	; 0x30
   12b44:	str	r3, [sp, #40]	; 0x28
   12b48:	ldr	r2, [sp, #60]	; 0x3c
   12b4c:	mov	r5, #13
   12b50:	mov	r3, #114	; 0x72
   12b54:	cmp	r2, #0
   12b58:	beq	12a14 <__assert_fail@plt+0x1a90>
   12b5c:	mov	r5, r3
   12b60:	b	12890 <__assert_fail@plt+0x190c>
   12b64:	ldr	r3, [sp, #48]	; 0x30
   12b68:	str	r3, [sp, #40]	; 0x28
   12b6c:	mov	r3, #118	; 0x76
   12b70:	b	12a08 <__assert_fail@plt+0x1a84>
   12b74:	ldr	r3, [sp, #48]	; 0x30
   12b78:	str	r3, [sp, #40]	; 0x28
   12b7c:	mov	r5, #10
   12b80:	mov	r3, #110	; 0x6e
   12b84:	b	12a08 <__assert_fail@plt+0x1a84>
   12b88:	ldr	r3, [sp, #48]	; 0x30
   12b8c:	cmn	r8, #1
   12b90:	str	r3, [sp, #40]	; 0x28
   12b94:	beq	12fdc <__assert_fail@plt+0x2058>
   12b98:	subs	r3, r8, #1
   12b9c:	movne	r3, #1
   12ba0:	cmp	r3, #0
   12ba4:	bne	12bb0 <__assert_fail@plt+0x1c2c>
   12ba8:	cmp	r7, #0
   12bac:	beq	12bf4 <__assert_fail@plt+0x1c70>
   12bb0:	mov	r6, #0
   12bb4:	ldr	r3, [sp, #64]	; 0x40
   12bb8:	cmp	r3, #0
   12bbc:	beq	12a24 <__assert_fail@plt+0x1aa0>
   12bc0:	ldr	r3, [sp, #44]	; 0x2c
   12bc4:	cmp	r3, #0
   12bc8:	bne	12a24 <__assert_fail@plt+0x1aa0>
   12bcc:	mov	r3, fp
   12bd0:	b	12a50 <__assert_fail@plt+0x1acc>
   12bd4:	ldr	r3, [sp, #48]	; 0x30
   12bd8:	str	r3, [sp, #40]	; 0x28
   12bdc:	b	12ba8 <__assert_fail@plt+0x1c24>
   12be0:	ldr	r3, [sp, #48]	; 0x30
   12be4:	str	r3, [sp, #40]	; 0x28
   12be8:	b	12bb0 <__assert_fail@plt+0x1c2c>
   12bec:	ldr	r6, [sp, #48]	; 0x30
   12bf0:	str	r6, [sp, #40]	; 0x28
   12bf4:	ldr	r3, [sp, #68]	; 0x44
   12bf8:	cmp	r3, #0
   12bfc:	beq	12bb4 <__assert_fail@plt+0x1c30>
   12c00:	mov	r3, #2
   12c04:	mov	fp, r9
   12c08:	str	r3, [sp, #176]	; 0xb0
   12c0c:	ldr	r3, [sp, #60]	; 0x3c
   12c10:	cmp	r3, #0
   12c14:	ldr	r3, [sp, #176]	; 0xb0
   12c18:	movne	r3, #4
   12c1c:	str	r3, [sp, #176]	; 0xb0
   12c20:	mov	lr, #0
   12c24:	mov	r0, fp
   12c28:	ldr	r2, [sp, #28]
   12c2c:	ldr	r3, [sp, #180]	; 0xb4
   12c30:	ldr	r1, [sp, #188]	; 0xbc
   12c34:	bic	ip, r3, #2
   12c38:	ldr	r3, [sp, #176]	; 0xb0
   12c3c:	stm	sp, {r3, ip, lr}
   12c40:	mov	r3, r8
   12c44:	ldr	ip, [sp, #192]	; 0xc0
   12c48:	str	r1, [sp, #12]
   12c4c:	mov	r1, sl
   12c50:	str	ip, [sp, #16]
   12c54:	bl	121e0 <__assert_fail@plt+0x125c>
   12c58:	mov	r4, r0
   12c5c:	mov	r0, r4
   12c60:	add	sp, sp, #140	; 0x8c
   12c64:	ldrd	r4, [sp]
   12c68:	ldrd	r6, [sp, #8]
   12c6c:	ldrd	r8, [sp, #16]
   12c70:	ldrd	sl, [sp, #24]
   12c74:	add	sp, sp, #32
   12c78:	pop	{pc}		; (ldr pc, [sp], #4)
   12c7c:	ldr	r3, [sp, #48]	; 0x30
   12c80:	str	r3, [sp, #40]	; 0x28
   12c84:	ldr	r3, [sp, #176]	; 0xb0
   12c88:	cmp	r3, #2
   12c8c:	beq	13004 <__assert_fail@plt+0x2080>
   12c90:	ldr	r3, [sp, #88]	; 0x58
   12c94:	cmp	r3, #0
   12c98:	moveq	r5, #92	; 0x5c
   12c9c:	moveq	r3, r5
   12ca0:	beq	12a08 <__assert_fail@plt+0x1a84>
   12ca4:	add	r7, r7, #1
   12ca8:	mov	r3, fp
   12cac:	mov	r6, #0
   12cb0:	mov	r5, #92	; 0x5c
   12cb4:	b	12a60 <__assert_fail@plt+0x1adc>
   12cb8:	ldr	r3, [sp, #64]	; 0x40
   12cbc:	cmp	r3, #0
   12cc0:	bne	13b38 <__assert_fail@plt+0x2bb4>
   12cc4:	ldr	r2, [sp, #48]	; 0x30
   12cc8:	mov	r3, fp
   12ccc:	mov	r6, r2
   12cd0:	str	r2, [sp, #40]	; 0x28
   12cd4:	b	12a28 <__assert_fail@plt+0x1aa4>
   12cd8:	ldr	r3, [sp, #176]	; 0xb0
   12cdc:	cmp	r3, #2
   12ce0:	beq	13a74 <__assert_fail@plt+0x2af0>
   12ce4:	cmp	r3, #5
   12ce8:	ldr	r3, [sp, #48]	; 0x30
   12cec:	str	r3, [sp, #40]	; 0x28
   12cf0:	bne	12d1c <__assert_fail@plt+0x1d98>
   12cf4:	ldr	r3, [sp, #96]	; 0x60
   12cf8:	cmp	r3, #0
   12cfc:	beq	13778 <__assert_fail@plt+0x27f4>
   12d00:	add	r3, r7, #2
   12d04:	cmp	r3, r8
   12d08:	bcs	12d1c <__assert_fail@plt+0x1d98>
   12d0c:	ldr	r2, [sp, #36]	; 0x24
   12d10:	ldrb	r5, [r2, #1]
   12d14:	cmp	r5, #63	; 0x3f
   12d18:	beq	13860 <__assert_fail@plt+0x28dc>
   12d1c:	mov	r6, #0
   12d20:	mov	r5, #63	; 0x3f
   12d24:	b	12bb4 <__assert_fail@plt+0x1c30>
   12d28:	ldr	r3, [sp, #176]	; 0xb0
   12d2c:	cmp	r3, #2
   12d30:	ldr	r3, [sp, #48]	; 0x30
   12d34:	beq	1351c <__assert_fail@plt+0x2598>
   12d38:	mov	r5, #39	; 0x27
   12d3c:	str	r3, [sp, #40]	; 0x28
   12d40:	str	r6, [sp, #80]	; 0x50
   12d44:	b	12bb4 <__assert_fail@plt+0x1c30>
   12d48:	ldr	r3, [sp, #180]	; 0xb4
   12d4c:	cmp	r4, #0
   12d50:	and	r3, r3, #1
   12d54:	str	r3, [sp, #92]	; 0x5c
   12d58:	ldr	r3, [sp, #180]	; 0xb4
   12d5c:	and	r3, r3, #4
   12d60:	str	r3, [sp, #96]	; 0x60
   12d64:	bne	13b84 <__assert_fail@plt+0x2c00>
   12d68:	str	r4, [sp, #60]	; 0x3c
   12d6c:	cmp	sl, #0
   12d70:	bne	13b68 <__assert_fail@plt+0x2be4>
   12d74:	mov	r3, #1
   12d78:	movw	r2, #34984	; 0x88a8
   12d7c:	movt	r2, #1
   12d80:	mov	r4, r3
   12d84:	mov	r3, #2
   12d88:	mov	r9, sl
   12d8c:	str	r4, [sp, #32]
   12d90:	str	sl, [sp, #44]	; 0x2c
   12d94:	str	sl, [sp, #48]	; 0x30
   12d98:	str	r4, [sp, #52]	; 0x34
   12d9c:	str	r4, [sp, #56]	; 0x38
   12da0:	str	r4, [sp, #64]	; 0x40
   12da4:	str	sl, [sp, #68]	; 0x44
   12da8:	str	r2, [sp, #72]	; 0x48
   12dac:	str	sl, [sp, #80]	; 0x50
   12db0:	str	sl, [sp, #84]	; 0x54
   12db4:	str	sl, [sp, #88]	; 0x58
   12db8:	str	r3, [sp, #176]	; 0xb0
   12dbc:	b	12304 <__assert_fail@plt+0x1380>
   12dc0:	ldrb	r5, [r0, r7]
   12dc4:	cmp	r5, #126	; 0x7e
   12dc8:	ldrls	pc, [pc, r5, lsl #2]
   12dcc:	b	13130 <__assert_fail@plt+0x21ac>
   12dd0:	strdeq	r3, [r1], -ip
   12dd4:	andeq	r3, r1, r0, lsr r1
   12dd8:	andeq	r3, r1, r0, lsr r1
   12ddc:	andeq	r3, r1, r0, lsr r1
   12de0:	andeq	r3, r1, r0, lsr r1
   12de4:	andeq	r3, r1, r0, lsr r1
   12de8:	andeq	r3, r1, r0, lsr r1
   12dec:	andeq	r3, r1, ip, ror #1
   12df0:	ldrdeq	r3, [r1], -ip
   12df4:	andeq	r3, r1, r0, rrx
   12df8:	andeq	r3, r1, ip, asr #1
   12dfc:	andeq	r3, r1, r0, asr #32
   12e00:	andeq	r3, r1, r0, lsr #2
   12e04:	andeq	r3, r1, ip, lsr #1
   12e08:	andeq	r3, r1, r0, lsr r1
   12e0c:	andeq	r3, r1, r0, lsr r1
   12e10:	andeq	r3, r1, r0, lsr r1
   12e14:	andeq	r3, r1, r0, lsr r1
   12e18:	andeq	r3, r1, r0, lsr r1
   12e1c:	andeq	r3, r1, r0, lsr r1
   12e20:	andeq	r3, r1, r0, lsr r1
   12e24:	andeq	r3, r1, r0, lsr r1
   12e28:	andeq	r3, r1, r0, lsr r1
   12e2c:	andeq	r3, r1, r0, lsr r1
   12e30:	andeq	r3, r1, r0, lsr r1
   12e34:	andeq	r3, r1, r0, lsr r1
   12e38:	andeq	r3, r1, r0, lsr r1
   12e3c:	andeq	r3, r1, r0, lsr r1
   12e40:	andeq	r3, r1, r0, lsr r1
   12e44:	andeq	r3, r1, r0, lsr r1
   12e48:	andeq	r3, r1, r0, lsr r1
   12e4c:	andeq	r3, r1, r0, lsr r1
   12e50:	andeq	r3, r1, r4, asr r0
   12e54:	strheq	r3, [r1], -ip
   12e58:	strheq	r3, [r1], -ip
   12e5c:	andeq	r3, r1, r4, lsr r0
   12e60:	strheq	r3, [r1], -ip
   12e64:	andeq	r3, r1, r8, lsr #32
   12e68:	strheq	r3, [r1], -ip
   12e6c:	muleq	r1, r8, r0
   12e70:	strheq	r3, [r1], -ip
   12e74:	strheq	r3, [r1], -ip
   12e78:	strheq	r3, [r1], -ip
   12e7c:	andeq	r3, r1, r8, lsr #32
   12e80:	andeq	r3, r1, r8, lsr #32
   12e84:	andeq	r3, r1, r8, lsr #32
   12e88:	andeq	r3, r1, r8, lsr #32
   12e8c:	andeq	r3, r1, r8, lsr #32
   12e90:	andeq	r3, r1, r8, lsr #32
   12e94:	andeq	r3, r1, r8, lsr #32
   12e98:	andeq	r3, r1, r8, lsr #32
   12e9c:	andeq	r3, r1, r8, lsr #32
   12ea0:	andeq	r3, r1, r8, lsr #32
   12ea4:	andeq	r3, r1, r8, lsr #32
   12ea8:	andeq	r3, r1, r8, lsr #32
   12eac:	andeq	r3, r1, r8, lsr #32
   12eb0:	andeq	r3, r1, r8, lsr #32
   12eb4:	andeq	r3, r1, r8, lsr #32
   12eb8:	andeq	r3, r1, r8, lsr #32
   12ebc:	strheq	r3, [r1], -ip
   12ec0:	strheq	r3, [r1], -ip
   12ec4:	strheq	r3, [r1], -ip
   12ec8:	strheq	r3, [r1], -ip
   12ecc:	andeq	r3, r1, r0, ror r0
   12ed0:	andeq	r3, r1, r0, lsr r1
   12ed4:	andeq	r3, r1, r8, lsr #32
   12ed8:	andeq	r3, r1, r8, lsr #32
   12edc:	andeq	r3, r1, r8, lsr #32
   12ee0:	andeq	r3, r1, r8, lsr #32
   12ee4:	andeq	r3, r1, r8, lsr #32
   12ee8:	andeq	r3, r1, r8, lsr #32
   12eec:	andeq	r3, r1, r8, lsr #32
   12ef0:	andeq	r3, r1, r8, lsr #32
   12ef4:	andeq	r3, r1, r8, lsr #32
   12ef8:	andeq	r3, r1, r8, lsr #32
   12efc:	andeq	r3, r1, r8, lsr #32
   12f00:	andeq	r3, r1, r8, lsr #32
   12f04:	andeq	r3, r1, r8, lsr #32
   12f08:	andeq	r3, r1, r8, lsr #32
   12f0c:	andeq	r3, r1, r8, lsr #32
   12f10:	andeq	r3, r1, r8, lsr #32
   12f14:	andeq	r3, r1, r8, lsr #32
   12f18:	andeq	r3, r1, r8, lsr #32
   12f1c:	andeq	r3, r1, r8, lsr #32
   12f20:	andeq	r3, r1, r8, lsr #32
   12f24:	andeq	r3, r1, r8, lsr #32
   12f28:	andeq	r3, r1, r8, lsr #32
   12f2c:	andeq	r3, r1, r8, lsr #32
   12f30:	andeq	r3, r1, r8, lsr #32
   12f34:	andeq	r3, r1, r8, lsr #32
   12f38:	andeq	r3, r1, r8, lsr #32
   12f3c:	strheq	r3, [r1], -ip
   12f40:	strdeq	r2, [r1], -r0
   12f44:	andeq	r3, r1, r8, lsr #32
   12f48:	strheq	r3, [r1], -ip
   12f4c:	andeq	r3, r1, r8, lsr #32
   12f50:	strheq	r3, [r1], -ip
   12f54:	andeq	r3, r1, r8, lsr #32
   12f58:	andeq	r3, r1, r8, lsr #32
   12f5c:	andeq	r3, r1, r8, lsr #32
   12f60:	andeq	r3, r1, r8, lsr #32
   12f64:	andeq	r3, r1, r8, lsr #32
   12f68:	andeq	r3, r1, r8, lsr #32
   12f6c:	andeq	r3, r1, r8, lsr #32
   12f70:	andeq	r3, r1, r8, lsr #32
   12f74:	andeq	r3, r1, r8, lsr #32
   12f78:	andeq	r3, r1, r8, lsr #32
   12f7c:	andeq	r3, r1, r8, lsr #32
   12f80:	andeq	r3, r1, r8, lsr #32
   12f84:	andeq	r3, r1, r8, lsr #32
   12f88:	andeq	r3, r1, r8, lsr #32
   12f8c:	andeq	r3, r1, r8, lsr #32
   12f90:	andeq	r3, r1, r8, lsr #32
   12f94:	andeq	r3, r1, r8, lsr #32
   12f98:	andeq	r3, r1, r8, lsr #32
   12f9c:	andeq	r3, r1, r8, lsr #32
   12fa0:	andeq	r3, r1, r8, lsr #32
   12fa4:	andeq	r3, r1, r8, lsr #32
   12fa8:	andeq	r3, r1, r8, lsr #32
   12fac:	andeq	r3, r1, r8, lsr #32
   12fb0:	andeq	r3, r1, r8, lsr #32
   12fb4:	andeq	r3, r1, r8, lsr #32
   12fb8:	andeq	r3, r1, r8, lsr #32
   12fbc:	andeq	r2, r1, ip, asr #31
   12fc0:	strheq	r3, [r1], -ip
   12fc4:	andeq	r2, r1, ip, asr #31
   12fc8:	andeq	r3, r1, r4, lsr r0
   12fcc:	mov	r3, #0
   12fd0:	cmn	r8, #1
   12fd4:	str	r3, [sp, #40]	; 0x28
   12fd8:	bne	12b98 <__assert_fail@plt+0x1c14>
   12fdc:	ldr	r3, [sp, #28]
   12fe0:	ldrb	r3, [r3, #1]
   12fe4:	adds	r3, r3, #0
   12fe8:	movne	r3, #1
   12fec:	b	12ba0 <__assert_fail@plt+0x1c1c>
   12ff0:	mov	r3, #0
   12ff4:	str	r3, [sp, #40]	; 0x28
   12ff8:	ldr	r3, [sp, #176]	; 0xb0
   12ffc:	cmp	r3, #2
   13000:	bne	12c90 <__assert_fail@plt+0x1d0c>
   13004:	ldr	r3, [sp, #44]	; 0x2c
   13008:	cmp	r3, #0
   1300c:	bne	1394c <__assert_fail@plt+0x29c8>
   13010:	mov	r6, r3
   13014:	add	r7, r7, #1
   13018:	mov	r3, fp
   1301c:	mov	r5, #92	; 0x5c
   13020:	b	12a60 <__assert_fail@plt+0x1adc>
   13024:	ldr	r6, [sp, #48]	; 0x30
   13028:	mov	r3, #0
   1302c:	str	r3, [sp, #40]	; 0x28
   13030:	b	12bb4 <__assert_fail@plt+0x1c30>
   13034:	mov	r3, #0
   13038:	str	r3, [sp, #40]	; 0x28
   1303c:	b	12ba8 <__assert_fail@plt+0x1c24>
   13040:	mov	r3, #0
   13044:	str	r3, [sp, #40]	; 0x28
   13048:	mov	r3, #118	; 0x76
   1304c:	b	12a08 <__assert_fail@plt+0x1a84>
   13050:	ldr	r6, [sp, #48]	; 0x30
   13054:	mov	r3, #0
   13058:	str	r3, [sp, #40]	; 0x28
   1305c:	b	12bf4 <__assert_fail@plt+0x1c70>
   13060:	mov	r3, #0
   13064:	str	r3, [sp, #40]	; 0x28
   13068:	mov	r3, #116	; 0x74
   1306c:	b	129fc <__assert_fail@plt+0x1a78>
   13070:	ldr	r3, [sp, #176]	; 0xb0
   13074:	cmp	r3, #2
   13078:	beq	13588 <__assert_fail@plt+0x2604>
   1307c:	cmp	r3, #5
   13080:	mov	r3, #0
   13084:	str	r3, [sp, #40]	; 0x28
   13088:	beq	12cf4 <__assert_fail@plt+0x1d70>
   1308c:	mov	r6, #0
   13090:	mov	r5, #63	; 0x3f
   13094:	b	12bb4 <__assert_fail@plt+0x1c30>
   13098:	ldr	r3, [sp, #176]	; 0xb0
   1309c:	cmp	r3, #2
   130a0:	beq	13510 <__assert_fail@plt+0x258c>
   130a4:	mov	r3, #0
   130a8:	b	12d38 <__assert_fail@plt+0x1db4>
   130ac:	mov	r3, #0
   130b0:	str	r3, [sp, #40]	; 0x28
   130b4:	mov	r3, #114	; 0x72
   130b8:	b	129fc <__assert_fail@plt+0x1a78>
   130bc:	mov	r3, #0
   130c0:	mov	r6, r3
   130c4:	str	r3, [sp, #40]	; 0x28
   130c8:	b	12bf4 <__assert_fail@plt+0x1c70>
   130cc:	mov	r3, #0
   130d0:	str	r3, [sp, #40]	; 0x28
   130d4:	mov	r3, #110	; 0x6e
   130d8:	b	129fc <__assert_fail@plt+0x1a78>
   130dc:	mov	r3, #0
   130e0:	str	r3, [sp, #40]	; 0x28
   130e4:	mov	r3, #98	; 0x62
   130e8:	b	12a08 <__assert_fail@plt+0x1a84>
   130ec:	mov	r3, #0
   130f0:	str	r3, [sp, #40]	; 0x28
   130f4:	mov	r3, #97	; 0x61
   130f8:	b	12a08 <__assert_fail@plt+0x1a84>
   130fc:	ldr	r3, [sp, #60]	; 0x3c
   13100:	cmp	r3, #0
   13104:	bne	134f4 <__assert_fail@plt+0x2570>
   13108:	ldr	r3, [sp, #92]	; 0x5c
   1310c:	cmp	r3, #0
   13110:	addne	r7, r7, #1
   13114:	bne	12314 <__assert_fail@plt+0x1390>
   13118:	str	r3, [sp, #40]	; 0x28
   1311c:	b	12a14 <__assert_fail@plt+0x1a90>
   13120:	mov	r3, #0
   13124:	str	r3, [sp, #40]	; 0x28
   13128:	mov	r3, #102	; 0x66
   1312c:	b	12a08 <__assert_fail@plt+0x1a84>
   13130:	mov	r3, #0
   13134:	str	r3, [sp, #40]	; 0x28
   13138:	ldr	r3, [sp, #76]	; 0x4c
   1313c:	cmp	r3, #1
   13140:	bne	135a8 <__assert_fail@plt+0x2624>
   13144:	bl	10e7c <__ctype_b_loc@plt>
   13148:	ldr	r2, [r0]
   1314c:	sxth	r3, r5
   13150:	lsl	r3, r3, #1
   13154:	ldr	r1, [sp, #76]	; 0x4c
   13158:	ldrh	r3, [r2, r3]
   1315c:	mov	r0, r1
   13160:	and	r3, r3, #16384	; 0x4000
   13164:	cmp	r3, #0
   13168:	ldr	r3, [sp, #60]	; 0x3c
   1316c:	movne	r6, #1
   13170:	moveq	r6, #0
   13174:	movne	r2, #0
   13178:	andeq	r2, r3, #1
   1317c:	cmp	r2, #0
   13180:	beq	12bb4 <__assert_fail@plt+0x1c30>
   13184:	ldr	r2, [sp, #60]	; 0x3c
   13188:	mov	r6, #0
   1318c:	add	r1, r0, r7
   13190:	mov	ip, #39	; 0x27
   13194:	str	r6, [sp, #100]	; 0x64
   13198:	mov	r0, #0
   1319c:	ldr	lr, [sp, #36]	; 0x24
   131a0:	str	r8, [sp, #36]	; 0x24
   131a4:	ldr	r6, [sp, #40]	; 0x28
   131a8:	ldr	r8, [sp, #44]	; 0x2c
   131ac:	b	1325c <__assert_fail@plt+0x22d8>
   131b0:	cmp	r8, #0
   131b4:	bne	13790 <__assert_fail@plt+0x280c>
   131b8:	ldr	r0, [sp, #52]	; 0x34
   131bc:	eor	r3, fp, #1
   131c0:	ands	r3, r0, r3
   131c4:	beq	131f4 <__assert_fail@plt+0x2270>
   131c8:	cmp	sl, r4
   131cc:	add	r0, r4, #1
   131d0:	strbhi	ip, [r9, r4]
   131d4:	cmp	sl, r0
   131d8:	movhi	fp, #36	; 0x24
   131dc:	strbhi	fp, [r9, r0]
   131e0:	add	r0, r4, #2
   131e4:	mov	fp, r3
   131e8:	cmp	sl, r0
   131ec:	add	r4, r4, #3
   131f0:	strbhi	ip, [r9, r0]
   131f4:	cmp	sl, r4
   131f8:	movhi	r3, #92	; 0x5c
   131fc:	strbhi	r3, [r9, r4]
   13200:	add	r3, r4, #1
   13204:	cmp	sl, r3
   13208:	bls	13218 <__assert_fail@plt+0x2294>
   1320c:	lsr	r0, r5, #6
   13210:	add	r0, r0, #48	; 0x30
   13214:	strb	r0, [r9, r3]
   13218:	add	r3, r4, #2
   1321c:	cmp	sl, r3
   13220:	bls	13230 <__assert_fail@plt+0x22ac>
   13224:	ubfx	r0, r5, #3, #3
   13228:	add	r0, r0, #48	; 0x30
   1322c:	strb	r0, [r9, r3]
   13230:	add	r7, r7, #1
   13234:	and	r5, r5, #7
   13238:	cmp	r1, r7
   1323c:	add	r5, r5, #48	; 0x30
   13240:	add	r4, r4, #3
   13244:	bls	137a4 <__assert_fail@plt+0x2820>
   13248:	mov	r0, r2
   1324c:	cmp	sl, r4
   13250:	strbhi	r5, [r9, r4]
   13254:	add	r4, r4, #1
   13258:	ldrb	r5, [lr, #1]!
   1325c:	cmp	r2, #0
   13260:	bne	131b0 <__assert_fail@plt+0x222c>
   13264:	eor	r3, r0, #1
   13268:	cmp	r6, #0
   1326c:	and	r3, r3, fp
   13270:	uxtb	r3, r3
   13274:	beq	13288 <__assert_fail@plt+0x2304>
   13278:	cmp	sl, r4
   1327c:	movhi	r6, #92	; 0x5c
   13280:	strbhi	r6, [r9, r4]
   13284:	add	r4, r4, #1
   13288:	add	r7, r7, #1
   1328c:	cmp	r7, r1
   13290:	bcs	13784 <__assert_fail@plt+0x2800>
   13294:	cmp	r3, #0
   13298:	beq	137c8 <__assert_fail@plt+0x2844>
   1329c:	cmp	sl, r4
   132a0:	add	r3, r4, #1
   132a4:	mov	r6, #0
   132a8:	strbhi	ip, [r9, r4]
   132ac:	cmp	sl, r3
   132b0:	add	r4, r4, #2
   132b4:	mov	fp, r6
   132b8:	strbhi	ip, [r9, r3]
   132bc:	b	1324c <__assert_fail@plt+0x22c8>
   132c0:	ldr	r3, [sp, #36]	; 0x24
   132c4:	ldrb	r5, [r3]
   132c8:	cmp	r5, #126	; 0x7e
   132cc:	ldrls	pc, [pc, r5, lsl #2]
   132d0:	b	13130 <__assert_fail@plt+0x21ac>
   132d4:	strdeq	r3, [r1], -r4
   132d8:	andeq	r3, r1, r0, lsr r1
   132dc:	andeq	r3, r1, r0, lsr r1
   132e0:	andeq	r3, r1, r0, lsr r1
   132e4:	andeq	r3, r1, r0, lsr r1
   132e8:	andeq	r3, r1, r0, lsr r1
   132ec:	andeq	r3, r1, r0, lsr r1
   132f0:	andeq	r2, r1, r8, ror #19
   132f4:	andeq	r2, r1, r0, ror #19
   132f8:	andeq	r3, r1, r0, rrx
   132fc:	andeq	r3, r1, r8, ror #9
   13300:	andeq	r3, r1, r0, asr #32
   13304:	andeq	r2, r1, ip, lsl #17
   13308:	ldrdeq	r3, [r1], -ip
   1330c:	andeq	r3, r1, r0, lsr r1
   13310:	andeq	r3, r1, r0, lsr r1
   13314:	andeq	r3, r1, r0, lsr r1
   13318:	andeq	r3, r1, r0, lsr r1
   1331c:	andeq	r3, r1, r0, lsr r1
   13320:	andeq	r3, r1, r0, lsr r1
   13324:	andeq	r3, r1, r0, lsr r1
   13328:	andeq	r3, r1, r0, lsr r1
   1332c:	andeq	r3, r1, r0, lsr r1
   13330:	andeq	r3, r1, r0, lsr r1
   13334:	andeq	r3, r1, r0, lsr r1
   13338:	andeq	r3, r1, r0, lsr r1
   1333c:	andeq	r3, r1, r0, lsr r1
   13340:	andeq	r3, r1, r0, lsr r1
   13344:	andeq	r3, r1, r0, lsr r1
   13348:	andeq	r3, r1, r0, lsr r1
   1334c:	andeq	r3, r1, r0, lsr r1
   13350:	andeq	r3, r1, r0, lsr r1
   13354:	andeq	r3, r1, r0, asr r0
   13358:	ldrdeq	r3, [r1], -r0
   1335c:	ldrdeq	r3, [r1], -r0
   13360:	andeq	r3, r1, r4, lsr r0
   13364:	ldrdeq	r3, [r1], -r0
   13368:	andeq	r3, r1, r4, lsr #32
   1336c:	ldrdeq	r3, [r1], -r0
   13370:	muleq	r1, r8, r0
   13374:	ldrdeq	r3, [r1], -r0
   13378:	ldrdeq	r3, [r1], -r0
   1337c:	ldrdeq	r3, [r1], -r0
   13380:	andeq	r3, r1, r4, lsr #32
   13384:	andeq	r3, r1, r4, lsr #32
   13388:	andeq	r3, r1, r4, lsr #32
   1338c:	andeq	r3, r1, r4, lsr #32
   13390:	andeq	r3, r1, r4, lsr #32
   13394:	andeq	r3, r1, r4, lsr #32
   13398:	andeq	r3, r1, r4, lsr #32
   1339c:	andeq	r3, r1, r4, lsr #32
   133a0:	andeq	r3, r1, r4, lsr #32
   133a4:	andeq	r3, r1, r4, lsr #32
   133a8:	andeq	r3, r1, r4, lsr #32
   133ac:	andeq	r3, r1, r4, lsr #32
   133b0:	andeq	r3, r1, r4, lsr #32
   133b4:	andeq	r3, r1, r4, lsr #32
   133b8:	andeq	r3, r1, r4, lsr #32
   133bc:	andeq	r3, r1, r4, lsr #32
   133c0:	ldrdeq	r3, [r1], -r0
   133c4:	ldrdeq	r3, [r1], -r0
   133c8:	ldrdeq	r3, [r1], -r0
   133cc:	ldrdeq	r3, [r1], -r0
   133d0:	andeq	r3, r1, r0, ror r0
   133d4:	andeq	r3, r1, r0, lsr r1
   133d8:	andeq	r3, r1, r4, lsr #32
   133dc:	andeq	r3, r1, r4, lsr #32
   133e0:	andeq	r3, r1, r4, lsr #32
   133e4:	andeq	r3, r1, r4, lsr #32
   133e8:	andeq	r3, r1, r4, lsr #32
   133ec:	andeq	r3, r1, r4, lsr #32
   133f0:	andeq	r3, r1, r4, lsr #32
   133f4:	andeq	r3, r1, r4, lsr #32
   133f8:	andeq	r3, r1, r4, lsr #32
   133fc:	andeq	r3, r1, r4, lsr #32
   13400:	andeq	r3, r1, r4, lsr #32
   13404:	andeq	r3, r1, r4, lsr #32
   13408:	andeq	r3, r1, r4, lsr #32
   1340c:	andeq	r3, r1, r4, lsr #32
   13410:	andeq	r3, r1, r4, lsr #32
   13414:	andeq	r3, r1, r4, lsr #32
   13418:	andeq	r3, r1, r4, lsr #32
   1341c:	andeq	r3, r1, r4, lsr #32
   13420:	andeq	r3, r1, r4, lsr #32
   13424:	andeq	r3, r1, r4, lsr #32
   13428:	andeq	r3, r1, r4, lsr #32
   1342c:	andeq	r3, r1, r4, lsr #32
   13430:	andeq	r3, r1, r4, lsr #32
   13434:	andeq	r3, r1, r4, lsr #32
   13438:	andeq	r3, r1, r4, lsr #32
   1343c:	andeq	r3, r1, r4, lsr #32
   13440:	ldrdeq	r3, [r1], -r0
   13444:	strdeq	r2, [r1], -r0
   13448:	andeq	r3, r1, r4, lsr #32
   1344c:	ldrdeq	r3, [r1], -r0
   13450:	andeq	r3, r1, r4, lsr #32
   13454:	ldrdeq	r3, [r1], -r0
   13458:	andeq	r3, r1, r4, lsr #32
   1345c:	andeq	r3, r1, r4, lsr #32
   13460:	andeq	r3, r1, r4, lsr #32
   13464:	andeq	r3, r1, r4, lsr #32
   13468:	andeq	r3, r1, r4, lsr #32
   1346c:	andeq	r3, r1, r4, lsr #32
   13470:	andeq	r3, r1, r4, lsr #32
   13474:	andeq	r3, r1, r4, lsr #32
   13478:	andeq	r3, r1, r4, lsr #32
   1347c:	andeq	r3, r1, r4, lsr #32
   13480:	andeq	r3, r1, r4, lsr #32
   13484:	andeq	r3, r1, r4, lsr #32
   13488:	andeq	r3, r1, r4, lsr #32
   1348c:	andeq	r3, r1, r4, lsr #32
   13490:	andeq	r3, r1, r4, lsr #32
   13494:	andeq	r3, r1, r4, lsr #32
   13498:	andeq	r3, r1, r4, lsr #32
   1349c:	andeq	r3, r1, r4, lsr #32
   134a0:	andeq	r3, r1, r4, lsr #32
   134a4:	andeq	r3, r1, r4, lsr #32
   134a8:	andeq	r3, r1, r4, lsr #32
   134ac:	andeq	r3, r1, r4, lsr #32
   134b0:	andeq	r3, r1, r4, lsr #32
   134b4:	andeq	r3, r1, r4, lsr #32
   134b8:	andeq	r3, r1, r4, lsr #32
   134bc:	andeq	r3, r1, r4, lsr #32
   134c0:	andeq	r2, r1, ip, asr #31
   134c4:	ldrdeq	r3, [r1], -r0
   134c8:	andeq	r2, r1, ip, asr #31
   134cc:	andeq	r3, r1, r4, lsr r0
   134d0:	mov	r3, #0
   134d4:	str	r3, [sp, #40]	; 0x28
   134d8:	b	12bb0 <__assert_fail@plt+0x1c2c>
   134dc:	mov	r3, #0
   134e0:	str	r3, [sp, #40]	; 0x28
   134e4:	b	12b48 <__assert_fail@plt+0x1bc4>
   134e8:	mov	r3, #0
   134ec:	str	r3, [sp, #40]	; 0x28
   134f0:	b	12b7c <__assert_fail@plt+0x1bf8>
   134f4:	ldr	r3, [sp, #44]	; 0x2c
   134f8:	cmp	r3, #0
   134fc:	beq	12a94 <__assert_fail@plt+0x1b10>
   13500:	ldr	r3, [sp, #52]	; 0x34
   13504:	mov	fp, r9
   13508:	str	r3, [sp, #60]	; 0x3c
   1350c:	b	12c0c <__assert_fail@plt+0x1c88>
   13510:	ldr	r3, [sp, #44]	; 0x2c
   13514:	cmp	r3, #0
   13518:	bne	1394c <__assert_fail@plt+0x29c8>
   1351c:	str	r3, [sp, #40]	; 0x28
   13520:	cmp	sl, #0
   13524:	ldr	r3, [sp, #84]	; 0x54
   13528:	clz	r3, r3
   1352c:	lsr	r3, r3, #5
   13530:	moveq	r3, #0
   13534:	cmp	r3, #0
   13538:	strne	sl, [sp, #84]	; 0x54
   1353c:	movne	sl, #0
   13540:	bne	13570 <__assert_fail@plt+0x25ec>
   13544:	cmp	sl, r4
   13548:	movhi	r3, #39	; 0x27
   1354c:	strbhi	r3, [r9, r4]
   13550:	add	r3, r4, #1
   13554:	cmp	sl, r3
   13558:	movhi	r2, #92	; 0x5c
   1355c:	strbhi	r2, [r9, r3]
   13560:	add	r3, r4, #2
   13564:	cmp	sl, r3
   13568:	movhi	r2, #39	; 0x27
   1356c:	strbhi	r2, [r9, r3]
   13570:	mov	r3, #0
   13574:	add	r4, r4, #3
   13578:	str	r6, [sp, #80]	; 0x50
   1357c:	mov	fp, r3
   13580:	mov	r5, #39	; 0x27
   13584:	b	12a50 <__assert_fail@plt+0x1acc>
   13588:	ldr	r3, [sp, #44]	; 0x2c
   1358c:	cmp	r3, #0
   13590:	bne	1394c <__assert_fail@plt+0x29c8>
   13594:	mov	r6, #0
   13598:	mov	r5, #63	; 0x3f
   1359c:	str	r3, [sp, #40]	; 0x28
   135a0:	mov	r3, fp
   135a4:	b	12a50 <__assert_fail@plt+0x1acc>
   135a8:	mov	r2, #0
   135ac:	mov	r3, #0
   135b0:	cmn	r8, #1
   135b4:	strd	r2, [sp, #128]	; 0x80
   135b8:	bne	135c8 <__assert_fail@plt+0x2644>
   135bc:	ldr	r0, [sp, #28]
   135c0:	bl	10e94 <strlen@plt>
   135c4:	mov	r8, r0
   135c8:	str	r9, [sp, #100]	; 0x64
   135cc:	mov	r3, #0
   135d0:	strd	sl, [sp, #104]	; 0x68
   135d4:	ldr	sl, [sp, #28]
   135d8:	str	r5, [sp, #112]	; 0x70
   135dc:	mov	r5, r3
   135e0:	ldr	r9, [sp, #68]	; 0x44
   135e4:	str	r4, [sp, #116]	; 0x74
   135e8:	add	r4, r7, r5
   135ec:	add	r3, sp, #128	; 0x80
   135f0:	add	fp, sl, r4
   135f4:	sub	r2, r8, r4
   135f8:	mov	r1, fp
   135fc:	add	r0, sp, #124	; 0x7c
   13600:	bl	17c3c <__assert_fail@plt+0x6cb8>
   13604:	subs	r1, r0, #0
   13608:	beq	13648 <__assert_fail@plt+0x26c4>
   1360c:	cmn	r1, #1
   13610:	beq	139a0 <__assert_fail@plt+0x2a1c>
   13614:	cmn	r1, #2
   13618:	beq	139c0 <__assert_fail@plt+0x2a3c>
   1361c:	cmp	r9, #0
   13620:	bne	13678 <__assert_fail@plt+0x26f4>
   13624:	ldr	r0, [sp, #124]	; 0x7c
   13628:	add	r5, r5, r1
   1362c:	bl	10db0 <iswprint@plt>
   13630:	cmp	r0, #0
   13634:	add	r0, sp, #128	; 0x80
   13638:	moveq	r6, #0
   1363c:	bl	10d68 <mbsinit@plt>
   13640:	cmp	r0, #0
   13644:	beq	135e8 <__assert_fail@plt+0x2664>
   13648:	ldr	r3, [sp, #60]	; 0x3c
   1364c:	add	r9, sp, #100	; 0x64
   13650:	mov	r0, r5
   13654:	ldm	r9, {r9, sl, fp}
   13658:	eor	r2, r6, #1
   1365c:	ldr	r5, [sp, #112]	; 0x70
   13660:	and	r2, r2, r3
   13664:	uxtb	r2, r2
   13668:	ldr	r4, [sp, #116]	; 0x74
   1366c:	cmp	r0, #1
   13670:	bhi	1318c <__assert_fail@plt+0x2208>
   13674:	b	1317c <__assert_fail@plt+0x21f8>
   13678:	cmp	r1, #1
   1367c:	beq	13624 <__assert_fail@plt+0x26a0>
   13680:	add	r2, r4, #1
   13684:	add	r3, sl, r1
   13688:	add	r2, sl, r2
   1368c:	add	r4, r3, r4
   13690:	ldrb	r3, [r2], #1
   13694:	sub	r3, r3, #91	; 0x5b
   13698:	cmp	r3, #33	; 0x21
   1369c:	ldrls	pc, [pc, r3, lsl #2]
   136a0:	b	1372c <__assert_fail@plt+0x27a8>
   136a4:	andeq	r3, r1, r8, lsr r7
   136a8:	andeq	r3, r1, r8, lsr r7
   136ac:	andeq	r3, r1, ip, lsr #14
   136b0:	andeq	r3, r1, r8, lsr r7
   136b4:	andeq	r3, r1, ip, lsr #14
   136b8:	andeq	r3, r1, r8, lsr r7
   136bc:	andeq	r3, r1, ip, lsr #14
   136c0:	andeq	r3, r1, ip, lsr #14
   136c4:	andeq	r3, r1, ip, lsr #14
   136c8:	andeq	r3, r1, ip, lsr #14
   136cc:	andeq	r3, r1, ip, lsr #14
   136d0:	andeq	r3, r1, ip, lsr #14
   136d4:	andeq	r3, r1, ip, lsr #14
   136d8:	andeq	r3, r1, ip, lsr #14
   136dc:	andeq	r3, r1, ip, lsr #14
   136e0:	andeq	r3, r1, ip, lsr #14
   136e4:	andeq	r3, r1, ip, lsr #14
   136e8:	andeq	r3, r1, ip, lsr #14
   136ec:	andeq	r3, r1, ip, lsr #14
   136f0:	andeq	r3, r1, ip, lsr #14
   136f4:	andeq	r3, r1, ip, lsr #14
   136f8:	andeq	r3, r1, ip, lsr #14
   136fc:	andeq	r3, r1, ip, lsr #14
   13700:	andeq	r3, r1, ip, lsr #14
   13704:	andeq	r3, r1, ip, lsr #14
   13708:	andeq	r3, r1, ip, lsr #14
   1370c:	andeq	r3, r1, ip, lsr #14
   13710:	andeq	r3, r1, ip, lsr #14
   13714:	andeq	r3, r1, ip, lsr #14
   13718:	andeq	r3, r1, ip, lsr #14
   1371c:	andeq	r3, r1, ip, lsr #14
   13720:	andeq	r3, r1, ip, lsr #14
   13724:	andeq	r3, r1, ip, lsr #14
   13728:	andeq	r3, r1, r8, lsr r7
   1372c:	cmp	r4, r2
   13730:	bne	13690 <__assert_fail@plt+0x270c>
   13734:	b	13624 <__assert_fail@plt+0x26a0>
   13738:	mov	r3, #2
   1373c:	ldr	fp, [sp, #100]	; 0x64
   13740:	str	r3, [sp, #176]	; 0xb0
   13744:	ldr	sl, [sp, #104]	; 0x68
   13748:	b	12c0c <__assert_fail@plt+0x1c88>
   1374c:	ldr	r2, [sp, #52]	; 0x34
   13750:	mov	fp, r9
   13754:	ldr	r3, [sp, #60]	; 0x3c
   13758:	and	r3, r3, r2
   1375c:	str	r3, [sp, #60]	; 0x3c
   13760:	b	12c0c <__assert_fail@plt+0x1c88>
   13764:	cmp	sl, r4
   13768:	movhi	r2, fp
   1376c:	bhi	12ae4 <__assert_fail@plt+0x1b60>
   13770:	mov	r2, r4
   13774:	b	12af4 <__assert_fail@plt+0x1b70>
   13778:	mov	r6, r3
   1377c:	mov	r5, #63	; 0x3f
   13780:	b	12bb4 <__assert_fail@plt+0x1c30>
   13784:	ldr	r8, [sp, #36]	; 0x24
   13788:	ldr	r6, [sp, #100]	; 0x64
   1378c:	b	12a60 <__assert_fail@plt+0x1adc>
   13790:	mov	fp, r9
   13794:	ldr	r8, [sp, #36]	; 0x24
   13798:	ldr	r3, [sp, #52]	; 0x34
   1379c:	str	r3, [sp, #60]	; 0x3c
   137a0:	b	12c0c <__assert_fail@plt+0x1c88>
   137a4:	ldr	r8, [sp, #36]	; 0x24
   137a8:	ldr	r6, [sp, #100]	; 0x64
   137ac:	b	128f8 <__assert_fail@plt+0x1974>
   137b0:	mov	r3, #0
   137b4:	add	r4, r4, #4
   137b8:	mov	fp, r2
   137bc:	mov	r6, r3
   137c0:	mov	r5, #48	; 0x30
   137c4:	b	12a50 <__assert_fail@plt+0x1acc>
   137c8:	mov	r6, r3
   137cc:	b	1324c <__assert_fail@plt+0x22c8>
   137d0:	mov	r3, #1
   137d4:	movw	r2, #34964	; 0x8894
   137d8:	movt	r2, #1
   137dc:	mov	r4, r3
   137e0:	mov	r9, sl
   137e4:	str	r3, [sp, #32]
   137e8:	str	sl, [sp, #44]	; 0x2c
   137ec:	str	r3, [sp, #48]	; 0x30
   137f0:	str	sl, [sp, #52]	; 0x34
   137f4:	str	r3, [sp, #56]	; 0x38
   137f8:	str	r3, [sp, #60]	; 0x3c
   137fc:	str	sl, [sp, #64]	; 0x40
   13800:	str	sl, [sp, #68]	; 0x44
   13804:	str	r2, [sp, #72]	; 0x48
   13808:	str	sl, [sp, #80]	; 0x50
   1380c:	str	sl, [sp, #84]	; 0x54
   13810:	str	sl, [sp, #88]	; 0x58
   13814:	b	12304 <__assert_fail@plt+0x1380>
   13818:	mov	r3, #0
   1381c:	mov	r5, #48	; 0x30
   13820:	mov	r6, r3
   13824:	b	12a50 <__assert_fail@plt+0x1acc>
   13828:	cmp	sl, r4
   1382c:	mov	r5, #48	; 0x30
   13830:	movhi	r3, #48	; 0x30
   13834:	strbhi	r3, [r9, r4]
   13838:	add	r3, r2, #2
   1383c:	add	r4, r2, #3
   13840:	cmp	sl, r3
   13844:	movhi	r1, #48	; 0x30
   13848:	strbhi	r1, [r9, r3]
   1384c:	mov	r3, #0
   13850:	b	12b2c <__assert_fail@plt+0x1ba8>
   13854:	ldr	r3, [sp, #48]	; 0x30
   13858:	str	r3, [sp, #40]	; 0x28
   1385c:	b	13138 <__assert_fail@plt+0x21b4>
   13860:	ldr	r2, [sp, #28]
   13864:	ldrb	r2, [r2, r3]
   13868:	sub	r1, r2, #33	; 0x21
   1386c:	cmp	r1, #29
   13870:	ldrls	pc, [pc, r1, lsl #2]
   13874:	b	12bb0 <__assert_fail@plt+0x1c2c>
   13878:	strdeq	r3, [r1], -r0
   1387c:			; <UNDEFINED> instruction: 0x00012bb0
   13880:			; <UNDEFINED> instruction: 0x00012bb0
   13884:			; <UNDEFINED> instruction: 0x00012bb0
   13888:			; <UNDEFINED> instruction: 0x00012bb0
   1388c:			; <UNDEFINED> instruction: 0x00012bb0
   13890:	strdeq	r3, [r1], -r0
   13894:	strdeq	r3, [r1], -r0
   13898:	strdeq	r3, [r1], -r0
   1389c:			; <UNDEFINED> instruction: 0x00012bb0
   138a0:			; <UNDEFINED> instruction: 0x00012bb0
   138a4:			; <UNDEFINED> instruction: 0x00012bb0
   138a8:	strdeq	r3, [r1], -r0
   138ac:			; <UNDEFINED> instruction: 0x00012bb0
   138b0:	strdeq	r3, [r1], -r0
   138b4:			; <UNDEFINED> instruction: 0x00012bb0
   138b8:			; <UNDEFINED> instruction: 0x00012bb0
   138bc:			; <UNDEFINED> instruction: 0x00012bb0
   138c0:			; <UNDEFINED> instruction: 0x00012bb0
   138c4:			; <UNDEFINED> instruction: 0x00012bb0
   138c8:			; <UNDEFINED> instruction: 0x00012bb0
   138cc:			; <UNDEFINED> instruction: 0x00012bb0
   138d0:			; <UNDEFINED> instruction: 0x00012bb0
   138d4:			; <UNDEFINED> instruction: 0x00012bb0
   138d8:			; <UNDEFINED> instruction: 0x00012bb0
   138dc:			; <UNDEFINED> instruction: 0x00012bb0
   138e0:			; <UNDEFINED> instruction: 0x00012bb0
   138e4:	strdeq	r3, [r1], -r0
   138e8:	strdeq	r3, [r1], -r0
   138ec:	strdeq	r3, [r1], -r0
   138f0:	ldr	r1, [sp, #44]	; 0x2c
   138f4:	cmp	r1, #0
   138f8:	bne	13b58 <__assert_fail@plt+0x2bd4>
   138fc:	cmp	sl, r4
   13900:	mov	r7, r3
   13904:	movhi	r1, #63	; 0x3f
   13908:	mov	r5, r2
   1390c:	mov	r3, fp
   13910:	strbhi	r1, [r9, r4]
   13914:	add	r1, r4, #1
   13918:	cmp	sl, r1
   1391c:	movhi	r0, #34	; 0x22
   13920:	strbhi	r0, [r9, r1]
   13924:	add	r1, r4, #2
   13928:	cmp	sl, r1
   1392c:	movhi	r0, #34	; 0x22
   13930:	strbhi	r0, [r9, r1]
   13934:	add	r1, r4, #3
   13938:	add	r4, r4, #4
   1393c:	cmp	sl, r1
   13940:	movhi	r0, #63	; 0x3f
   13944:	strbhi	r0, [r9, r1]
   13948:	b	12b2c <__assert_fail@plt+0x1ba8>
   1394c:	mov	fp, r9
   13950:	b	12c0c <__assert_fail@plt+0x1c88>
   13954:	ldr	r3, [sp, #188]	; 0xbc
   13958:	ldrb	r3, [r3]
   1395c:	cmp	r3, #0
   13960:	beq	1229c <__assert_fail@plt+0x1318>
   13964:	ldr	r2, [sp, #188]	; 0xbc
   13968:	cmp	sl, r4
   1396c:	bls	1398c <__assert_fail@plt+0x2a08>
   13970:	strb	r3, [fp, r4]
   13974:	add	r4, r4, #1
   13978:	ldrb	r3, [r2, #1]!
   1397c:	cmp	r3, #0
   13980:	beq	1229c <__assert_fail@plt+0x1318>
   13984:	cmp	sl, r4
   13988:	bhi	13970 <__assert_fail@plt+0x29ec>
   1398c:	ldrb	r3, [r2, #1]!
   13990:	add	r4, r4, #1
   13994:	cmp	r3, #0
   13998:	bne	13968 <__assert_fail@plt+0x29e4>
   1399c:	b	1229c <__assert_fail@plt+0x1318>
   139a0:	add	r9, sp, #100	; 0x64
   139a4:	mov	r0, r5
   139a8:	ldr	r2, [sp, #60]	; 0x3c
   139ac:	mov	r6, #0
   139b0:	ldm	r9, {r9, sl, fp}
   139b4:	ldr	r5, [sp, #112]	; 0x70
   139b8:	ldr	r4, [sp, #116]	; 0x74
   139bc:	b	1366c <__assert_fail@plt+0x26e8>
   139c0:	cmp	r4, r8
   139c4:	add	r9, sp, #100	; 0x64
   139c8:	mov	r1, r4
   139cc:	mov	r2, fp
   139d0:	ldm	r9, {r9, sl, fp}
   139d4:	mov	r3, r5
   139d8:	mov	r0, r5
   139dc:	ldr	r5, [sp, #112]	; 0x70
   139e0:	ldr	r4, [sp, #116]	; 0x74
   139e4:	bcs	13a18 <__assert_fail@plt+0x2a94>
   139e8:	ldrb	r6, [r2]
   139ec:	cmp	r6, #0
   139f0:	bne	13a04 <__assert_fail@plt+0x2a80>
   139f4:	b	13b50 <__assert_fail@plt+0x2bcc>
   139f8:	ldrb	r6, [r2, #1]!
   139fc:	cmp	r6, #0
   13a00:	beq	13ae8 <__assert_fail@plt+0x2b64>
   13a04:	add	r3, r3, #1
   13a08:	add	r1, r7, r3
   13a0c:	cmp	r8, r1
   13a10:	bhi	139f8 <__assert_fail@plt+0x2a74>
   13a14:	mov	r0, r3
   13a18:	mov	r6, #0
   13a1c:	ldr	r2, [sp, #60]	; 0x3c
   13a20:	b	1366c <__assert_fail@plt+0x26e8>
   13a24:	mov	r3, #1
   13a28:	mov	r4, #0
   13a2c:	mov	r9, r4
   13a30:	str	r3, [sp, #32]
   13a34:	str	r3, [sp, #44]	; 0x2c
   13a38:	str	r3, [sp, #48]	; 0x30
   13a3c:	str	r4, [sp, #52]	; 0x34
   13a40:	str	r3, [sp, #56]	; 0x38
   13a44:	str	r3, [sp, #60]	; 0x3c
   13a48:	str	r3, [sp, #88]	; 0x58
   13a4c:	movw	r3, #34964	; 0x8894
   13a50:	movt	r3, #1
   13a54:	str	r4, [sp, #64]	; 0x40
   13a58:	str	r4, [sp, #68]	; 0x44
   13a5c:	str	r3, [sp, #72]	; 0x48
   13a60:	str	r4, [sp, #80]	; 0x50
   13a64:	str	r4, [sp, #84]	; 0x54
   13a68:	b	12304 <__assert_fail@plt+0x1380>
   13a6c:	mov	fp, r9
   13a70:	b	12c20 <__assert_fail@plt+0x1c9c>
   13a74:	ldr	r3, [sp, #48]	; 0x30
   13a78:	b	13594 <__assert_fail@plt+0x2610>
   13a7c:	mov	r2, r3
   13a80:	ldr	r3, [sp, #72]	; 0x48
   13a84:	cmp	r3, #0
   13a88:	moveq	r2, #0
   13a8c:	andne	r2, r2, #1
   13a90:	cmp	r2, #0
   13a94:	beq	13ac4 <__assert_fail@plt+0x2b40>
   13a98:	mov	r2, r3
   13a9c:	ldrb	r3, [r3]
   13aa0:	cmp	r3, #0
   13aa4:	beq	13ac4 <__assert_fail@plt+0x2b40>
   13aa8:	cmp	sl, r4
   13aac:	bls	13ad4 <__assert_fail@plt+0x2b50>
   13ab0:	strb	r3, [fp, r4]
   13ab4:	add	r4, r4, #1
   13ab8:	ldrb	r3, [r2, #1]!
   13abc:	cmp	r3, #0
   13ac0:	bne	13aa8 <__assert_fail@plt+0x2b24>
   13ac4:	cmp	sl, r4
   13ac8:	movhi	r3, #0
   13acc:	strbhi	r3, [fp, r4]
   13ad0:	b	12c5c <__assert_fail@plt+0x1cd8>
   13ad4:	ldrb	r3, [r2, #1]!
   13ad8:	add	r4, r4, #1
   13adc:	cmp	r3, #0
   13ae0:	bne	13aa8 <__assert_fail@plt+0x2b24>
   13ae4:	b	13ac4 <__assert_fail@plt+0x2b40>
   13ae8:	mov	r0, r3
   13aec:	ldr	r2, [sp, #60]	; 0x3c
   13af0:	b	1366c <__assert_fail@plt+0x26e8>
   13af4:	mov	ip, #5
   13af8:	mov	r3, r8
   13afc:	ldr	r1, [sp, #84]	; 0x54
   13b00:	str	ip, [sp]
   13b04:	ldr	r2, [sp, #180]	; 0xb4
   13b08:	ldr	ip, [sp, #188]	; 0xbc
   13b0c:	ldr	r0, [sp, #184]	; 0xb8
   13b10:	str	r2, [sp, #4]
   13b14:	ldr	r2, [sp, #28]
   13b18:	str	ip, [sp, #12]
   13b1c:	ldr	ip, [sp, #192]	; 0xc0
   13b20:	str	r0, [sp, #8]
   13b24:	mov	r0, fp
   13b28:	str	ip, [sp, #16]
   13b2c:	bl	121e0 <__assert_fail@plt+0x125c>
   13b30:	mov	r4, r0
   13b34:	b	12c5c <__assert_fail@plt+0x1cd8>
   13b38:	mov	r6, r3
   13b3c:	str	r3, [sp, #40]	; 0x28
   13b40:	b	12bcc <__assert_fail@plt+0x1c48>
   13b44:	mov	r3, #2
   13b48:	str	r3, [sp, #176]	; 0xb0
   13b4c:	b	12c0c <__assert_fail@plt+0x1c88>
   13b50:	ldr	r2, [sp, #60]	; 0x3c
   13b54:	b	1366c <__assert_fail@plt+0x26e8>
   13b58:	mov	r3, #5
   13b5c:	mov	fp, r9
   13b60:	str	r3, [sp, #176]	; 0xb0
   13b64:	b	12c20 <__assert_fail@plt+0x1c9c>
   13b68:	mov	r1, #1
   13b6c:	mov	r9, #0
   13b70:	mov	r3, r9
   13b74:	mov	r2, r9
   13b78:	str	r1, [sp, #32]
   13b7c:	str	sl, [sp, #84]	; 0x54
   13b80:	b	129a8 <__assert_fail@plt+0x1a24>
   13b84:	mov	r3, #0
   13b88:	mov	r2, #1
   13b8c:	mov	r9, r3
   13b90:	mov	r4, r3
   13b94:	str	r2, [sp, #32]
   13b98:	strd	r2, [sp, #44]	; 0x2c
   13b9c:	strd	r2, [sp, #56]	; 0x38
   13ba0:	str	r3, [sp, #80]	; 0x50
   13ba4:	str	r3, [sp, #84]	; 0x54
   13ba8:	str	r3, [sp, #88]	; 0x58
   13bac:	movw	r3, #34984	; 0x88a8
   13bb0:	movt	r3, #1
   13bb4:	str	r2, [sp, #52]	; 0x34
   13bb8:	str	r2, [sp, #64]	; 0x40
   13bbc:	str	r2, [sp, #68]	; 0x44
   13bc0:	str	r3, [sp, #72]	; 0x48
   13bc4:	b	12304 <__assert_fail@plt+0x1380>
   13bc8:	bl	10f78 <abort@plt>
   13bcc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13bd0:	mov	r4, r0
   13bd4:	mov	r5, r3
   13bd8:	strd	r6, [sp, #8]
   13bdc:	movw	r7, #37116	; 0x90fc
   13be0:	movt	r7, #2
   13be4:	strd	r8, [sp, #16]
   13be8:	strd	sl, [sp, #24]
   13bec:	mov	sl, r1
   13bf0:	mov	fp, r2
   13bf4:	str	lr, [sp, #32]
   13bf8:	sub	sp, sp, #60	; 0x3c
   13bfc:	bl	10eac <__errno_location@plt>
   13c00:	mov	r8, r0
   13c04:	cmn	r4, #-2147483647	; 0x80000001
   13c08:	ldr	r6, [r7]
   13c0c:	movne	r0, #0
   13c10:	moveq	r0, #1
   13c14:	ldr	r3, [r8]
   13c18:	orrs	r0, r0, r4, lsr #31
   13c1c:	str	r3, [sp, #28]
   13c20:	bne	13db0 <__assert_fail@plt+0x2e2c>
   13c24:	ldr	r3, [r7, #4]
   13c28:	cmp	r3, r4
   13c2c:	bgt	13c8c <__assert_fail@plt+0x2d08>
   13c30:	add	r1, r7, #8
   13c34:	sub	r2, r4, r3
   13c38:	str	r3, [sp, #52]	; 0x34
   13c3c:	cmp	r6, r1
   13c40:	add	r2, r2, #1
   13c44:	beq	13d88 <__assert_fail@plt+0x2e04>
   13c48:	mov	r1, #8
   13c4c:	mov	r0, r6
   13c50:	mvn	r3, #-2147483648	; 0x80000000
   13c54:	str	r1, [sp]
   13c58:	add	r1, sp, #52	; 0x34
   13c5c:	bl	164ec <__assert_fail@plt+0x5568>
   13c60:	mov	r6, r0
   13c64:	str	r0, [r7]
   13c68:	ldr	r0, [r7, #4]
   13c6c:	mov	r1, #0
   13c70:	ldr	r2, [sp, #52]	; 0x34
   13c74:	sub	r2, r2, r0
   13c78:	add	r0, r6, r0, lsl #3
   13c7c:	lsl	r2, r2, #3
   13c80:	bl	10ec4 <memset@plt>
   13c84:	ldr	r3, [sp, #52]	; 0x34
   13c88:	str	r3, [r7, #4]
   13c8c:	ldr	r1, [r5, #4]
   13c90:	add	r0, r6, r4, lsl #3
   13c94:	add	ip, r5, #8
   13c98:	mov	r3, fp
   13c9c:	mov	r2, sl
   13ca0:	ldr	r7, [r0, #4]
   13ca4:	str	r0, [sp, #36]	; 0x24
   13ca8:	str	ip, [sp, #40]	; 0x28
   13cac:	orr	r0, r1, #1
   13cb0:	ldr	r9, [r6, r4, lsl #3]
   13cb4:	str	ip, [sp, #8]
   13cb8:	ldr	lr, [r5, #44]	; 0x2c
   13cbc:	str	r0, [sp, #4]
   13cc0:	ldr	ip, [r5]
   13cc4:	mov	r1, r9
   13cc8:	str	ip, [sp, #32]
   13ccc:	ldr	ip, [r5, #40]	; 0x28
   13cd0:	str	ip, [sp, #12]
   13cd4:	ldr	ip, [sp, #32]
   13cd8:	str	lr, [sp, #16]
   13cdc:	str	r0, [sp, #44]	; 0x2c
   13ce0:	mov	r0, r7
   13ce4:	str	ip, [sp]
   13ce8:	bl	121e0 <__assert_fail@plt+0x125c>
   13cec:	cmp	r9, r0
   13cf0:	bhi	13d60 <__assert_fail@plt+0x2ddc>
   13cf4:	add	r9, r0, #1
   13cf8:	movw	r3, #37268	; 0x9194
   13cfc:	movt	r3, #2
   13d00:	cmp	r7, r3
   13d04:	str	r9, [r6, r4, lsl #3]
   13d08:	beq	13d14 <__assert_fail@plt+0x2d90>
   13d0c:	mov	r0, r7
   13d10:	bl	11f5c <__assert_fail@plt+0xfd8>
   13d14:	mov	r0, r9
   13d18:	bl	16248 <__assert_fail@plt+0x52c4>
   13d1c:	ldr	ip, [r5]
   13d20:	mov	r3, fp
   13d24:	mov	r2, sl
   13d28:	mov	r1, r9
   13d2c:	mov	r7, r0
   13d30:	ldr	lr, [sp, #36]	; 0x24
   13d34:	ldr	r4, [r5, #40]	; 0x28
   13d38:	str	r0, [lr, #4]
   13d3c:	ldr	lr, [r5, #44]	; 0x2c
   13d40:	str	ip, [sp]
   13d44:	ldr	ip, [sp, #44]	; 0x2c
   13d48:	str	ip, [sp, #4]
   13d4c:	ldr	ip, [sp, #40]	; 0x28
   13d50:	str	r4, [sp, #12]
   13d54:	str	lr, [sp, #16]
   13d58:	str	ip, [sp, #8]
   13d5c:	bl	121e0 <__assert_fail@plt+0x125c>
   13d60:	ldr	r3, [sp, #28]
   13d64:	mov	r0, r7
   13d68:	str	r3, [r8]
   13d6c:	add	sp, sp, #60	; 0x3c
   13d70:	ldrd	r4, [sp]
   13d74:	ldrd	r6, [sp, #8]
   13d78:	ldrd	r8, [sp, #16]
   13d7c:	ldrd	sl, [sp, #24]
   13d80:	add	sp, sp, #32
   13d84:	pop	{pc}		; (ldr pc, [sp], #4)
   13d88:	mov	r1, #8
   13d8c:	mvn	r3, #-2147483648	; 0x80000000
   13d90:	str	r1, [sp]
   13d94:	add	r1, sp, #52	; 0x34
   13d98:	bl	164ec <__assert_fail@plt+0x5568>
   13d9c:	ldrd	r2, [r7, #8]
   13da0:	mov	r6, r0
   13da4:	str	r0, [r7]
   13da8:	strd	r2, [r0]
   13dac:	b	13c68 <__assert_fail@plt+0x2ce4>
   13db0:	bl	10f78 <abort@plt>
   13db4:	strd	r4, [sp, #-16]!
   13db8:	mov	r5, r0
   13dbc:	str	r6, [sp, #8]
   13dc0:	str	lr, [sp, #12]
   13dc4:	bl	10eac <__errno_location@plt>
   13dc8:	mov	r4, r0
   13dcc:	cmp	r5, #0
   13dd0:	ldr	r0, [pc, #32]	; 13df8 <__assert_fail@plt+0x2e74>
   13dd4:	mov	r1, #48	; 0x30
   13dd8:	movne	r0, r5
   13ddc:	ldr	r6, [r4]
   13de0:	bl	1668c <__assert_fail@plt+0x5708>
   13de4:	str	r6, [r4]
   13de8:	ldrd	r4, [sp]
   13dec:	ldr	r6, [sp, #8]
   13df0:	add	sp, sp, #12
   13df4:	pop	{pc}		; (ldr pc, [sp], #4)
   13df8:	muleq	r2, r4, r2
   13dfc:	ldr	r3, [pc, #12]	; 13e10 <__assert_fail@plt+0x2e8c>
   13e00:	cmp	r0, #0
   13e04:	moveq	r0, r3
   13e08:	ldr	r0, [r0]
   13e0c:	bx	lr
   13e10:	muleq	r2, r4, r2
   13e14:	ldr	r3, [pc, #12]	; 13e28 <__assert_fail@plt+0x2ea4>
   13e18:	cmp	r0, #0
   13e1c:	moveq	r0, r3
   13e20:	str	r1, [r0]
   13e24:	bx	lr
   13e28:	muleq	r2, r4, r2
   13e2c:	ldr	r3, [pc, #52]	; 13e68 <__assert_fail@plt+0x2ee4>
   13e30:	cmp	r0, #0
   13e34:	push	{lr}		; (str lr, [sp, #-4]!)
   13e38:	lsr	lr, r1, #5
   13e3c:	and	r1, r1, #31
   13e40:	moveq	r0, r3
   13e44:	add	r3, r0, #8
   13e48:	ldr	ip, [r3, lr, lsl #2]
   13e4c:	lsr	r0, ip, r1
   13e50:	eor	r2, r2, r0
   13e54:	and	r0, r0, #1
   13e58:	and	r2, r2, #1
   13e5c:	eor	r1, ip, r2, lsl r1
   13e60:	str	r1, [r3, lr, lsl #2]
   13e64:	pop	{pc}		; (ldr pc, [sp], #4)
   13e68:	muleq	r2, r4, r2
   13e6c:	ldr	r3, [pc, #16]	; 13e84 <__assert_fail@plt+0x2f00>
   13e70:	cmp	r0, #0
   13e74:	movne	r3, r0
   13e78:	ldr	r0, [r3, #4]
   13e7c:	str	r1, [r3, #4]
   13e80:	bx	lr
   13e84:	muleq	r2, r4, r2
   13e88:	ldr	r3, [pc, #48]	; 13ec0 <__assert_fail@plt+0x2f3c>
   13e8c:	cmp	r0, #0
   13e90:	mov	ip, #10
   13e94:	moveq	r0, r3
   13e98:	cmp	r2, #0
   13e9c:	cmpne	r1, #0
   13ea0:	str	ip, [r0]
   13ea4:	beq	13eb4 <__assert_fail@plt+0x2f30>
   13ea8:	str	r1, [r0, #40]	; 0x28
   13eac:	str	r2, [r0, #44]	; 0x2c
   13eb0:	bx	lr
   13eb4:	str	r4, [sp, #-8]!
   13eb8:	str	lr, [sp, #4]
   13ebc:	bl	10f78 <abort@plt>
   13ec0:	muleq	r2, r4, r2
   13ec4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13ec8:	strd	r6, [sp, #8]
   13ecc:	mov	r7, r0
   13ed0:	mov	r6, r1
   13ed4:	strd	r8, [sp, #16]
   13ed8:	mov	r8, r2
   13edc:	mov	r9, r3
   13ee0:	str	lr, [sp, #24]
   13ee4:	sub	sp, sp, #28
   13ee8:	ldr	r4, [sp, #56]	; 0x38
   13eec:	ldr	ip, [pc, #104]	; 13f5c <__assert_fail@plt+0x2fd8>
   13ef0:	cmp	r4, #0
   13ef4:	moveq	r4, ip
   13ef8:	bl	10eac <__errno_location@plt>
   13efc:	ldr	ip, [r4, #44]	; 0x2c
   13f00:	mov	r5, r0
   13f04:	mov	r1, r6
   13f08:	add	lr, r4, #8
   13f0c:	mov	r3, r9
   13f10:	ldr	r6, [r5]
   13f14:	mov	r2, r8
   13f18:	mov	r0, r7
   13f1c:	str	ip, [sp, #16]
   13f20:	ldr	ip, [r4, #40]	; 0x28
   13f24:	str	lr, [sp, #8]
   13f28:	str	ip, [sp, #12]
   13f2c:	ldr	ip, [r4, #4]
   13f30:	str	ip, [sp, #4]
   13f34:	ldr	ip, [r4]
   13f38:	str	ip, [sp]
   13f3c:	bl	121e0 <__assert_fail@plt+0x125c>
   13f40:	str	r6, [r5]
   13f44:	add	sp, sp, #28
   13f48:	ldrd	r4, [sp]
   13f4c:	ldrd	r6, [sp, #8]
   13f50:	ldrd	r8, [sp, #16]
   13f54:	add	sp, sp, #24
   13f58:	pop	{pc}		; (ldr pc, [sp], #4)
   13f5c:	muleq	r2, r4, r2
   13f60:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13f64:	cmp	r2, #0
   13f68:	ldr	r4, [pc, #192]	; 14030 <__assert_fail@plt+0x30ac>
   13f6c:	movne	r4, r2
   13f70:	strd	r6, [sp, #8]
   13f74:	strd	r8, [sp, #16]
   13f78:	mov	r9, r1
   13f7c:	mov	r8, r0
   13f80:	strd	sl, [sp, #24]
   13f84:	str	lr, [sp, #32]
   13f88:	sub	sp, sp, #36	; 0x24
   13f8c:	bl	10eac <__errno_location@plt>
   13f90:	ldr	r5, [r4, #4]
   13f94:	mov	r6, r0
   13f98:	add	r7, r4, #8
   13f9c:	mov	r1, #0
   13fa0:	mov	r3, r9
   13fa4:	ldr	ip, [r4, #44]	; 0x2c
   13fa8:	mov	r2, r8
   13fac:	mov	r0, r1
   13fb0:	ldr	sl, [r6]
   13fb4:	orr	r5, r5, #1
   13fb8:	str	ip, [sp, #16]
   13fbc:	ldr	ip, [r4, #40]	; 0x28
   13fc0:	stmib	sp, {r5, r7, ip}
   13fc4:	ldr	ip, [r4]
   13fc8:	str	ip, [sp]
   13fcc:	bl	121e0 <__assert_fail@plt+0x125c>
   13fd0:	add	r1, r0, #1
   13fd4:	mov	r0, r1
   13fd8:	str	r1, [sp, #28]
   13fdc:	bl	16248 <__assert_fail@plt+0x52c4>
   13fe0:	ldr	ip, [r4, #44]	; 0x2c
   13fe4:	mov	fp, r0
   13fe8:	mov	r3, r9
   13fec:	mov	r2, r8
   13ff0:	ldr	r1, [sp, #28]
   13ff4:	str	ip, [sp, #16]
   13ff8:	ldr	ip, [r4, #40]	; 0x28
   13ffc:	stmib	sp, {r5, r7, ip}
   14000:	ldr	ip, [r4]
   14004:	str	ip, [sp]
   14008:	bl	121e0 <__assert_fail@plt+0x125c>
   1400c:	mov	r0, fp
   14010:	str	sl, [r6]
   14014:	add	sp, sp, #36	; 0x24
   14018:	ldrd	r4, [sp]
   1401c:	ldrd	r6, [sp, #8]
   14020:	ldrd	r8, [sp, #16]
   14024:	ldrd	sl, [sp, #24]
   14028:	add	sp, sp, #32
   1402c:	pop	{pc}		; (ldr pc, [sp], #4)
   14030:	muleq	r2, r4, r2
   14034:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14038:	cmp	r3, #0
   1403c:	ldr	r4, [pc, #220]	; 14120 <__assert_fail@plt+0x319c>
   14040:	movne	r4, r3
   14044:	strd	r6, [sp, #8]
   14048:	mov	r6, r2
   1404c:	strd	r8, [sp, #16]
   14050:	mov	r9, r0
   14054:	strd	sl, [sp, #24]
   14058:	mov	sl, r1
   1405c:	str	lr, [sp, #32]
   14060:	sub	sp, sp, #44	; 0x2c
   14064:	bl	10eac <__errno_location@plt>
   14068:	ldr	r5, [r4, #4]
   1406c:	mov	r7, r0
   14070:	mov	r1, #0
   14074:	add	r8, r4, #8
   14078:	mov	r3, sl
   1407c:	ldr	ip, [r4, #44]	; 0x2c
   14080:	mov	r2, r9
   14084:	mov	r0, r1
   14088:	ldr	lr, [r7]
   1408c:	cmp	r6, r1
   14090:	orreq	r5, r5, #1
   14094:	str	ip, [sp, #16]
   14098:	ldr	ip, [r4, #40]	; 0x28
   1409c:	stmib	sp, {r5, r8, ip}
   140a0:	ldr	ip, [r4]
   140a4:	str	lr, [sp, #28]
   140a8:	str	ip, [sp]
   140ac:	bl	121e0 <__assert_fail@plt+0x125c>
   140b0:	add	r1, r0, #1
   140b4:	mov	fp, r0
   140b8:	mov	r0, r1
   140bc:	str	r1, [sp, #36]	; 0x24
   140c0:	bl	16248 <__assert_fail@plt+0x52c4>
   140c4:	ldr	ip, [r4, #44]	; 0x2c
   140c8:	mov	r3, sl
   140cc:	mov	r2, r9
   140d0:	ldr	r1, [sp, #36]	; 0x24
   140d4:	str	ip, [sp, #16]
   140d8:	ldr	ip, [r4, #40]	; 0x28
   140dc:	str	r0, [sp, #32]
   140e0:	stmib	sp, {r5, r8, ip}
   140e4:	ldr	ip, [r4]
   140e8:	str	ip, [sp]
   140ec:	bl	121e0 <__assert_fail@plt+0x125c>
   140f0:	ldr	lr, [sp, #28]
   140f4:	cmp	r6, #0
   140f8:	ldr	r0, [sp, #32]
   140fc:	str	lr, [r7]
   14100:	strne	fp, [r6]
   14104:	add	sp, sp, #44	; 0x2c
   14108:	ldrd	r4, [sp]
   1410c:	ldrd	r6, [sp, #8]
   14110:	ldrd	r8, [sp, #16]
   14114:	ldrd	sl, [sp, #24]
   14118:	add	sp, sp, #32
   1411c:	pop	{pc}		; (ldr pc, [sp], #4)
   14120:	muleq	r2, r4, r2
   14124:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14128:	movw	r5, #37116	; 0x90fc
   1412c:	movt	r5, #2
   14130:	ldr	r3, [r5, #4]
   14134:	strd	r6, [sp, #8]
   14138:	str	r8, [sp, #16]
   1413c:	str	lr, [sp, #20]
   14140:	ldr	r7, [r5]
   14144:	cmp	r3, #1
   14148:	ble	1416c <__assert_fail@plt+0x31e8>
   1414c:	mov	r4, #1
   14150:	add	r6, r7, #4
   14154:	ldr	r0, [r6, r4, lsl #3]
   14158:	add	r4, r4, #1
   1415c:	bl	11f5c <__assert_fail@plt+0xfd8>
   14160:	ldr	r3, [r5, #4]
   14164:	cmp	r3, r4
   14168:	bgt	14154 <__assert_fail@plt+0x31d0>
   1416c:	ldr	r0, [r7, #4]
   14170:	movw	r4, #37268	; 0x9194
   14174:	movt	r4, #2
   14178:	cmp	r0, r4
   1417c:	beq	14190 <__assert_fail@plt+0x320c>
   14180:	bl	11f5c <__assert_fail@plt+0xfd8>
   14184:	mov	r3, #256	; 0x100
   14188:	str	r3, [r5, #8]
   1418c:	str	r4, [r5, #12]
   14190:	ldr	r4, [pc, #44]	; 141c4 <__assert_fail@plt+0x3240>
   14194:	cmp	r7, r4
   14198:	beq	141a8 <__assert_fail@plt+0x3224>
   1419c:	mov	r0, r7
   141a0:	bl	11f5c <__assert_fail@plt+0xfd8>
   141a4:	str	r4, [r5]
   141a8:	mov	r3, #1
   141ac:	ldrd	r6, [sp, #8]
   141b0:	str	r3, [r5, #4]
   141b4:	ldrd	r4, [sp]
   141b8:	ldr	r8, [sp, #16]
   141bc:	add	sp, sp, #20
   141c0:	pop	{pc}		; (ldr pc, [sp], #4)
   141c4:	andeq	r9, r2, r4, lsl #2
   141c8:	ldr	r3, [pc, #4]	; 141d4 <__assert_fail@plt+0x3250>
   141cc:	mvn	r2, #0
   141d0:	b	13bcc <__assert_fail@plt+0x2c48>
   141d4:	muleq	r2, r4, r2
   141d8:	ldr	r3, [pc]	; 141e0 <__assert_fail@plt+0x325c>
   141dc:	b	13bcc <__assert_fail@plt+0x2c48>
   141e0:	muleq	r2, r4, r2
   141e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   141e8:	movw	r4, #37116	; 0x90fc
   141ec:	movt	r4, #2
   141f0:	strd	r6, [sp, #8]
   141f4:	strd	r8, [sp, #16]
   141f8:	strd	sl, [sp, #24]
   141fc:	mov	sl, r0
   14200:	str	lr, [sp, #32]
   14204:	sub	sp, sp, #44	; 0x2c
   14208:	bl	10eac <__errno_location@plt>
   1420c:	ldr	r3, [r0]
   14210:	mov	r8, r0
   14214:	ldr	r2, [r4, #4]
   14218:	ldr	r5, [r4]
   1421c:	str	r3, [sp, #28]
   14220:	cmp	r2, #0
   14224:	bgt	14280 <__assert_fail@plt+0x32fc>
   14228:	add	r3, r4, #8
   1422c:	str	r2, [sp, #36]	; 0x24
   14230:	rsb	r2, r2, #1
   14234:	cmp	r5, r3
   14238:	beq	1434c <__assert_fail@plt+0x33c8>
   1423c:	mov	r1, #8
   14240:	mov	r0, r5
   14244:	mvn	r3, #-2147483648	; 0x80000000
   14248:	str	r1, [sp]
   1424c:	add	r1, sp, #36	; 0x24
   14250:	bl	164ec <__assert_fail@plt+0x5568>
   14254:	mov	r5, r0
   14258:	str	r0, [r4]
   1425c:	ldr	r0, [r4, #4]
   14260:	mov	r1, #0
   14264:	ldr	r2, [sp, #36]	; 0x24
   14268:	sub	r2, r2, r0
   1426c:	add	r0, r5, r0, lsl #3
   14270:	lsl	r2, r2, #3
   14274:	bl	10ec4 <memset@plt>
   14278:	ldr	r3, [sp, #36]	; 0x24
   1427c:	str	r3, [r4, #4]
   14280:	movw	r4, #37268	; 0x9194
   14284:	movt	r4, #2
   14288:	ldr	r9, [r5]
   1428c:	add	fp, r4, #264	; 0x108
   14290:	mvn	r3, #0
   14294:	ldr	r7, [r4, #260]	; 0x104
   14298:	mov	r2, sl
   1429c:	ldr	r6, [r5, #4]
   142a0:	str	fp, [sp, #8]
   142a4:	mov	r1, r9
   142a8:	ldr	ip, [r4, #256]	; 0x100
   142ac:	orr	r7, r7, #1
   142b0:	ldr	lr, [r4, #300]	; 0x12c
   142b4:	mov	r0, r6
   142b8:	str	ip, [sp]
   142bc:	str	r7, [sp, #4]
   142c0:	str	lr, [sp, #16]
   142c4:	ldr	ip, [r4, #296]	; 0x128
   142c8:	str	ip, [sp, #12]
   142cc:	bl	121e0 <__assert_fail@plt+0x125c>
   142d0:	cmp	r9, r0
   142d4:	bhi	14324 <__assert_fail@plt+0x33a0>
   142d8:	add	r9, r0, #1
   142dc:	cmp	r6, r4
   142e0:	str	r9, [r5]
   142e4:	beq	142f0 <__assert_fail@plt+0x336c>
   142e8:	mov	r0, r6
   142ec:	bl	11f5c <__assert_fail@plt+0xfd8>
   142f0:	mov	r0, r9
   142f4:	bl	16248 <__assert_fail@plt+0x52c4>
   142f8:	ldr	r3, [r4, #256]	; 0x100
   142fc:	mov	r2, sl
   14300:	mov	r1, r9
   14304:	mov	r6, r0
   14308:	ldr	lr, [r4, #296]	; 0x128
   1430c:	ldr	ip, [r4, #300]	; 0x12c
   14310:	str	r0, [r5, #4]
   14314:	stm	sp, {r3, r7, fp, lr}
   14318:	mvn	r3, #0
   1431c:	str	ip, [sp, #16]
   14320:	bl	121e0 <__assert_fail@plt+0x125c>
   14324:	ldr	r3, [sp, #28]
   14328:	mov	r0, r6
   1432c:	str	r3, [r8]
   14330:	add	sp, sp, #44	; 0x2c
   14334:	ldrd	r4, [sp]
   14338:	ldrd	r6, [sp, #8]
   1433c:	ldrd	r8, [sp, #16]
   14340:	ldrd	sl, [sp, #24]
   14344:	add	sp, sp, #32
   14348:	pop	{pc}		; (ldr pc, [sp], #4)
   1434c:	mov	r0, #8
   14350:	mvn	r3, #-2147483648	; 0x80000000
   14354:	add	r1, sp, #36	; 0x24
   14358:	str	r0, [sp]
   1435c:	mov	r0, #0
   14360:	bl	164ec <__assert_fail@plt+0x5568>
   14364:	ldrd	r2, [r4, #8]
   14368:	mov	r5, r0
   1436c:	str	r0, [r4]
   14370:	strd	r2, [r0]
   14374:	b	1425c <__assert_fail@plt+0x32d8>
   14378:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1437c:	movw	r4, #37116	; 0x90fc
   14380:	movt	r4, #2
   14384:	strd	r6, [sp, #8]
   14388:	strd	r8, [sp, #16]
   1438c:	strd	sl, [sp, #24]
   14390:	mov	sl, r0
   14394:	mov	fp, r1
   14398:	str	lr, [sp, #32]
   1439c:	sub	sp, sp, #44	; 0x2c
   143a0:	bl	10eac <__errno_location@plt>
   143a4:	ldr	r3, [r0]
   143a8:	mov	r8, r0
   143ac:	ldr	r2, [r4, #4]
   143b0:	ldr	r5, [r4]
   143b4:	str	r3, [sp, #28]
   143b8:	cmp	r2, #0
   143bc:	bgt	14418 <__assert_fail@plt+0x3494>
   143c0:	add	r3, r4, #8
   143c4:	str	r2, [sp, #36]	; 0x24
   143c8:	rsb	r2, r2, #1
   143cc:	cmp	r5, r3
   143d0:	beq	144f4 <__assert_fail@plt+0x3570>
   143d4:	mov	r1, #8
   143d8:	mov	r0, r5
   143dc:	mvn	r3, #-2147483648	; 0x80000000
   143e0:	str	r1, [sp]
   143e4:	add	r1, sp, #36	; 0x24
   143e8:	bl	164ec <__assert_fail@plt+0x5568>
   143ec:	mov	r5, r0
   143f0:	str	r0, [r4]
   143f4:	ldr	r0, [r4, #4]
   143f8:	mov	r1, #0
   143fc:	ldr	r2, [sp, #36]	; 0x24
   14400:	sub	r2, r2, r0
   14404:	add	r0, r5, r0, lsl #3
   14408:	lsl	r2, r2, #3
   1440c:	bl	10ec4 <memset@plt>
   14410:	ldr	r3, [sp, #36]	; 0x24
   14414:	str	r3, [r4, #4]
   14418:	movw	r4, #37268	; 0x9194
   1441c:	movt	r4, #2
   14420:	ldr	r9, [r5]
   14424:	add	r0, r4, #264	; 0x108
   14428:	mov	r3, fp
   1442c:	ldr	r7, [r4, #260]	; 0x104
   14430:	mov	r2, sl
   14434:	ldr	r6, [r5, #4]
   14438:	str	r0, [sp, #8]
   1443c:	mov	r1, r9
   14440:	ldr	ip, [r4, #256]	; 0x100
   14444:	orr	r7, r7, #1
   14448:	ldr	lr, [r4, #300]	; 0x12c
   1444c:	mov	r0, r6
   14450:	str	ip, [sp]
   14454:	str	r7, [sp, #4]
   14458:	str	lr, [sp, #16]
   1445c:	ldr	ip, [r4, #296]	; 0x128
   14460:	str	ip, [sp, #12]
   14464:	bl	121e0 <__assert_fail@plt+0x125c>
   14468:	cmp	r9, r0
   1446c:	bhi	144cc <__assert_fail@plt+0x3548>
   14470:	add	r9, r0, #1
   14474:	cmp	r6, r4
   14478:	str	r9, [r5]
   1447c:	beq	14488 <__assert_fail@plt+0x3504>
   14480:	mov	r0, r6
   14484:	bl	11f5c <__assert_fail@plt+0xfd8>
   14488:	mov	r0, r9
   1448c:	bl	16248 <__assert_fail@plt+0x52c4>
   14490:	ldr	ip, [r4, #256]	; 0x100
   14494:	mov	r1, r9
   14498:	mov	r3, fp
   1449c:	mov	r2, sl
   144a0:	mov	r6, r0
   144a4:	ldr	r9, [r4, #296]	; 0x128
   144a8:	ldr	lr, [r4, #300]	; 0x12c
   144ac:	str	r0, [r5, #4]
   144b0:	str	ip, [sp]
   144b4:	ldr	ip, [pc, #100]	; 14520 <__assert_fail@plt+0x359c>
   144b8:	str	r7, [sp, #4]
   144bc:	str	ip, [sp, #8]
   144c0:	str	r9, [sp, #12]
   144c4:	str	lr, [sp, #16]
   144c8:	bl	121e0 <__assert_fail@plt+0x125c>
   144cc:	ldr	r3, [sp, #28]
   144d0:	mov	r0, r6
   144d4:	str	r3, [r8]
   144d8:	add	sp, sp, #44	; 0x2c
   144dc:	ldrd	r4, [sp]
   144e0:	ldrd	r6, [sp, #8]
   144e4:	ldrd	r8, [sp, #16]
   144e8:	ldrd	sl, [sp, #24]
   144ec:	add	sp, sp, #32
   144f0:	pop	{pc}		; (ldr pc, [sp], #4)
   144f4:	mov	r0, #8
   144f8:	mvn	r3, #-2147483648	; 0x80000000
   144fc:	add	r1, sp, #36	; 0x24
   14500:	str	r0, [sp]
   14504:	mov	r0, #0
   14508:	bl	164ec <__assert_fail@plt+0x5568>
   1450c:	ldrd	r2, [r4, #8]
   14510:	mov	r5, r0
   14514:	str	r0, [r4]
   14518:	strd	r2, [r0]
   1451c:	b	143f4 <__assert_fail@plt+0x3470>
   14520:	muleq	r2, ip, r2
   14524:	strd	r4, [sp, #-20]!	; 0xffffffec
   14528:	mov	r4, #0
   1452c:	mov	r5, #0
   14530:	strd	r6, [sp, #8]
   14534:	cmp	r1, #10
   14538:	str	lr, [sp, #16]
   1453c:	sub	sp, sp, #100	; 0x64
   14540:	strd	r4, [sp, #48]	; 0x30
   14544:	beq	1458c <__assert_fail@plt+0x3608>
   14548:	mov	r3, sp
   1454c:	strd	r4, [sp, #8]
   14550:	str	r1, [sp, #48]	; 0x30
   14554:	mov	r1, r2
   14558:	mvn	r2, #0
   1455c:	ldrd	r6, [sp, #48]	; 0x30
   14560:	strd	r6, [sp]
   14564:	strd	r4, [sp, #16]
   14568:	strd	r4, [sp, #24]
   1456c:	strd	r4, [sp, #32]
   14570:	strd	r4, [sp, #40]	; 0x28
   14574:	bl	13bcc <__assert_fail@plt+0x2c48>
   14578:	add	sp, sp, #100	; 0x64
   1457c:	ldrd	r4, [sp]
   14580:	ldrd	r6, [sp, #8]
   14584:	add	sp, sp, #16
   14588:	pop	{pc}		; (ldr pc, [sp], #4)
   1458c:	bl	10f78 <abort@plt>
   14590:	strd	r4, [sp, #-20]!	; 0xffffffec
   14594:	mov	r4, #0
   14598:	mov	r5, #0
   1459c:	strd	r6, [sp, #8]
   145a0:	cmp	r1, #10
   145a4:	str	lr, [sp, #16]
   145a8:	sub	sp, sp, #100	; 0x64
   145ac:	strd	r4, [sp, #48]	; 0x30
   145b0:	beq	145fc <__assert_fail@plt+0x3678>
   145b4:	mov	ip, r2
   145b8:	mov	r2, r3
   145bc:	strd	r4, [sp, #8]
   145c0:	str	r1, [sp, #48]	; 0x30
   145c4:	mov	r3, sp
   145c8:	mov	r1, ip
   145cc:	ldrd	r6, [sp, #48]	; 0x30
   145d0:	strd	r6, [sp]
   145d4:	strd	r4, [sp, #16]
   145d8:	strd	r4, [sp, #24]
   145dc:	strd	r4, [sp, #32]
   145e0:	strd	r4, [sp, #40]	; 0x28
   145e4:	bl	13bcc <__assert_fail@plt+0x2c48>
   145e8:	add	sp, sp, #100	; 0x64
   145ec:	ldrd	r4, [sp]
   145f0:	ldrd	r6, [sp, #8]
   145f4:	add	sp, sp, #16
   145f8:	pop	{pc}		; (ldr pc, [sp], #4)
   145fc:	bl	10f78 <abort@plt>
   14600:	mov	r2, #0
   14604:	mov	r3, #0
   14608:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1460c:	strd	r6, [sp, #8]
   14610:	cmp	r0, #10
   14614:	strd	r8, [sp, #16]
   14618:	strd	sl, [sp, #24]
   1461c:	str	lr, [sp, #32]
   14620:	sub	sp, sp, #124	; 0x7c
   14624:	strd	r2, [sp, #72]	; 0x48
   14628:	strd	r2, [sp, #80]	; 0x50
   1462c:	strd	r2, [sp, #88]	; 0x58
   14630:	strd	r2, [sp, #96]	; 0x60
   14634:	strd	r2, [sp, #104]	; 0x68
   14638:	strd	r2, [sp, #112]	; 0x70
   1463c:	beq	147e0 <__assert_fail@plt+0x385c>
   14640:	mov	r6, r1
   14644:	movw	r4, #37116	; 0x90fc
   14648:	movt	r4, #2
   1464c:	str	r0, [sp, #72]	; 0x48
   14650:	ldrd	r0, [sp, #72]	; 0x48
   14654:	strd	r0, [sp, #24]
   14658:	strd	r2, [sp, #32]
   1465c:	strd	r2, [sp, #40]	; 0x28
   14660:	strd	r2, [sp, #48]	; 0x30
   14664:	strd	r2, [sp, #56]	; 0x38
   14668:	strd	r2, [sp, #64]	; 0x40
   1466c:	bl	10eac <__errno_location@plt>
   14670:	mov	r8, r0
   14674:	ldr	r5, [r4]
   14678:	ldr	r2, [r4, #4]
   1467c:	ldr	r9, [r0]
   14680:	cmp	r2, #0
   14684:	bgt	146e0 <__assert_fail@plt+0x375c>
   14688:	add	r3, r4, #8
   1468c:	str	r2, [sp, #72]	; 0x48
   14690:	rsb	r2, r2, #1
   14694:	cmp	r5, r3
   14698:	beq	147b4 <__assert_fail@plt+0x3830>
   1469c:	mov	r3, #8
   146a0:	mov	r0, r5
   146a4:	add	r1, sp, #72	; 0x48
   146a8:	str	r3, [sp]
   146ac:	mvn	r3, #-2147483648	; 0x80000000
   146b0:	bl	164ec <__assert_fail@plt+0x5568>
   146b4:	mov	r5, r0
   146b8:	str	r0, [r4]
   146bc:	ldr	r0, [r4, #4]
   146c0:	mov	r1, #0
   146c4:	ldr	r2, [sp, #72]	; 0x48
   146c8:	sub	r2, r2, r0
   146cc:	add	r0, r5, r0, lsl #3
   146d0:	lsl	r2, r2, #3
   146d4:	bl	10ec4 <memset@plt>
   146d8:	ldr	r3, [sp, #72]	; 0x48
   146dc:	str	r3, [r4, #4]
   146e0:	ldr	sl, [r5]
   146e4:	add	r0, sp, #32
   146e8:	mvn	r3, #0
   146ec:	mov	r2, r6
   146f0:	ldr	r7, [sp, #28]
   146f4:	ldr	r4, [r5, #4]
   146f8:	mov	r1, sl
   146fc:	str	r0, [sp, #8]
   14700:	ldr	lr, [sp, #24]
   14704:	orr	r7, r7, #1
   14708:	ldr	ip, [sp, #64]	; 0x40
   1470c:	mov	r0, r4
   14710:	ldr	fp, [sp, #68]	; 0x44
   14714:	str	lr, [sp]
   14718:	str	r7, [sp, #4]
   1471c:	str	ip, [sp, #12]
   14720:	str	fp, [sp, #16]
   14724:	bl	121e0 <__assert_fail@plt+0x125c>
   14728:	cmp	sl, r0
   1472c:	bhi	14790 <__assert_fail@plt+0x380c>
   14730:	add	sl, r0, #1
   14734:	movw	r3, #37268	; 0x9194
   14738:	movt	r3, #2
   1473c:	cmp	r4, r3
   14740:	str	sl, [r5]
   14744:	beq	14750 <__assert_fail@plt+0x37cc>
   14748:	mov	r0, r4
   1474c:	bl	11f5c <__assert_fail@plt+0xfd8>
   14750:	mov	r0, sl
   14754:	bl	16248 <__assert_fail@plt+0x52c4>
   14758:	ldr	r3, [sp, #24]
   1475c:	mov	r2, r6
   14760:	mov	r1, sl
   14764:	mov	r4, r0
   14768:	ldr	lr, [sp, #64]	; 0x40
   1476c:	ldr	ip, [sp, #68]	; 0x44
   14770:	str	r0, [r5, #4]
   14774:	add	r5, sp, #32
   14778:	stm	sp, {r3, r7}
   1477c:	mvn	r3, #0
   14780:	str	r5, [sp, #8]
   14784:	str	lr, [sp, #12]
   14788:	str	ip, [sp, #16]
   1478c:	bl	121e0 <__assert_fail@plt+0x125c>
   14790:	mov	r0, r4
   14794:	str	r9, [r8]
   14798:	add	sp, sp, #124	; 0x7c
   1479c:	ldrd	r4, [sp]
   147a0:	ldrd	r6, [sp, #8]
   147a4:	ldrd	r8, [sp, #16]
   147a8:	ldrd	sl, [sp, #24]
   147ac:	add	sp, sp, #32
   147b0:	pop	{pc}		; (ldr pc, [sp], #4)
   147b4:	mov	r0, #8
   147b8:	mvn	r3, #-2147483648	; 0x80000000
   147bc:	add	r1, sp, #72	; 0x48
   147c0:	str	r0, [sp]
   147c4:	mov	r0, #0
   147c8:	bl	164ec <__assert_fail@plt+0x5568>
   147cc:	ldrd	r2, [r4, #8]
   147d0:	mov	r5, r0
   147d4:	str	r0, [r4]
   147d8:	strd	r2, [r0]
   147dc:	b	146bc <__assert_fail@plt+0x3738>
   147e0:	bl	10f78 <abort@plt>
   147e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   147e8:	cmp	r0, #10
   147ec:	strd	r6, [sp, #8]
   147f0:	mov	r6, #0
   147f4:	mov	r7, #0
   147f8:	strd	r8, [sp, #16]
   147fc:	strd	sl, [sp, #24]
   14800:	str	lr, [sp, #32]
   14804:	sub	sp, sp, #124	; 0x7c
   14808:	strd	r6, [sp, #72]	; 0x48
   1480c:	strd	r6, [sp, #80]	; 0x50
   14810:	strd	r6, [sp, #88]	; 0x58
   14814:	strd	r6, [sp, #96]	; 0x60
   14818:	strd	r6, [sp, #104]	; 0x68
   1481c:	strd	r6, [sp, #112]	; 0x70
   14820:	beq	149cc <__assert_fail@plt+0x3a48>
   14824:	mov	sl, r2
   14828:	movw	r5, #37116	; 0x90fc
   1482c:	movt	r5, #2
   14830:	str	r0, [sp, #72]	; 0x48
   14834:	mov	r9, r1
   14838:	ldrd	r2, [sp, #72]	; 0x48
   1483c:	strd	r2, [sp, #24]
   14840:	strd	r6, [sp, #32]
   14844:	strd	r6, [sp, #40]	; 0x28
   14848:	strd	r6, [sp, #48]	; 0x30
   1484c:	strd	r6, [sp, #56]	; 0x38
   14850:	strd	r6, [sp, #64]	; 0x40
   14854:	bl	10eac <__errno_location@plt>
   14858:	mov	r7, r0
   1485c:	ldr	r4, [r5]
   14860:	ldr	r2, [r5, #4]
   14864:	ldr	fp, [r0]
   14868:	cmp	r2, #0
   1486c:	bgt	148c8 <__assert_fail@plt+0x3944>
   14870:	add	r3, r5, #8
   14874:	str	r2, [sp, #72]	; 0x48
   14878:	rsb	r2, r2, #1
   1487c:	cmp	r4, r3
   14880:	beq	149a0 <__assert_fail@plt+0x3a1c>
   14884:	mov	r3, #8
   14888:	mov	r0, r4
   1488c:	add	r1, sp, #72	; 0x48
   14890:	str	r3, [sp]
   14894:	mvn	r3, #-2147483648	; 0x80000000
   14898:	bl	164ec <__assert_fail@plt+0x5568>
   1489c:	mov	r4, r0
   148a0:	str	r0, [r5]
   148a4:	ldr	r0, [r5, #4]
   148a8:	mov	r1, #0
   148ac:	ldr	r2, [sp, #72]	; 0x48
   148b0:	sub	r2, r2, r0
   148b4:	add	r0, r4, r0, lsl #3
   148b8:	lsl	r2, r2, #3
   148bc:	bl	10ec4 <memset@plt>
   148c0:	ldr	r3, [sp, #72]	; 0x48
   148c4:	str	r3, [r5, #4]
   148c8:	ldr	ip, [sp, #24]
   148cc:	add	r0, sp, #32
   148d0:	mov	r3, sl
   148d4:	mov	r2, r9
   148d8:	ldr	r6, [sp, #28]
   148dc:	ldr	r8, [r4]
   148e0:	ldr	r5, [r4, #4]
   148e4:	str	ip, [sp]
   148e8:	orr	r6, r6, #1
   148ec:	ldr	ip, [sp, #64]	; 0x40
   148f0:	mov	r1, r8
   148f4:	str	r6, [sp, #4]
   148f8:	ldr	lr, [sp, #68]	; 0x44
   148fc:	str	r0, [sp, #8]
   14900:	mov	r0, r5
   14904:	str	ip, [sp, #12]
   14908:	str	lr, [sp, #16]
   1490c:	bl	121e0 <__assert_fail@plt+0x125c>
   14910:	cmp	r8, r0
   14914:	bhi	1497c <__assert_fail@plt+0x39f8>
   14918:	add	r8, r0, #1
   1491c:	movw	r3, #37268	; 0x9194
   14920:	movt	r3, #2
   14924:	cmp	r5, r3
   14928:	str	r8, [r4]
   1492c:	beq	14938 <__assert_fail@plt+0x39b4>
   14930:	mov	r0, r5
   14934:	bl	11f5c <__assert_fail@plt+0xfd8>
   14938:	mov	r0, r8
   1493c:	bl	16248 <__assert_fail@plt+0x52c4>
   14940:	ldr	lr, [sp, #24]
   14944:	mov	r1, r8
   14948:	mov	r3, sl
   1494c:	mov	r2, r9
   14950:	mov	r5, r0
   14954:	ldr	r8, [sp, #64]	; 0x40
   14958:	ldr	ip, [sp, #68]	; 0x44
   1495c:	str	r0, [r4, #4]
   14960:	str	lr, [sp]
   14964:	add	lr, sp, #32
   14968:	str	r6, [sp, #4]
   1496c:	str	lr, [sp, #8]
   14970:	str	r8, [sp, #12]
   14974:	str	ip, [sp, #16]
   14978:	bl	121e0 <__assert_fail@plt+0x125c>
   1497c:	mov	r0, r5
   14980:	str	fp, [r7]
   14984:	add	sp, sp, #124	; 0x7c
   14988:	ldrd	r4, [sp]
   1498c:	ldrd	r6, [sp, #8]
   14990:	ldrd	r8, [sp, #16]
   14994:	ldrd	sl, [sp, #24]
   14998:	add	sp, sp, #32
   1499c:	pop	{pc}		; (ldr pc, [sp], #4)
   149a0:	mov	r0, #8
   149a4:	mvn	r3, #-2147483648	; 0x80000000
   149a8:	add	r1, sp, #72	; 0x48
   149ac:	str	r0, [sp]
   149b0:	mov	r0, #0
   149b4:	bl	164ec <__assert_fail@plt+0x5568>
   149b8:	ldrd	r2, [r5, #8]
   149bc:	mov	r4, r0
   149c0:	str	r0, [r5]
   149c4:	strd	r2, [r0]
   149c8:	b	148a4 <__assert_fail@plt+0x3920>
   149cc:	bl	10f78 <abort@plt>
   149d0:	ldr	r3, [pc, #492]	; 14bc4 <__assert_fail@plt+0x3c40>
   149d4:	lsr	ip, r2, #5
   149d8:	and	r2, r2, #31
   149dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   149e0:	movw	r5, #37116	; 0x90fc
   149e4:	movt	r5, #2
   149e8:	strd	r6, [sp, #8]
   149ec:	strd	r8, [sp, #16]
   149f0:	strd	sl, [sp, #24]
   149f4:	mov	sl, r0
   149f8:	mov	fp, r1
   149fc:	ldrd	r0, [r3]
   14a00:	str	lr, [sp, #32]
   14a04:	sub	sp, sp, #92	; 0x5c
   14a08:	ldrd	r8, [r3, #8]
   14a0c:	add	r6, sp, #48	; 0x30
   14a10:	strd	r0, [sp, #40]	; 0x28
   14a14:	ldrd	r0, [r3, #16]
   14a18:	strd	r8, [sp, #48]	; 0x30
   14a1c:	ldrd	r8, [r3, #24]
   14a20:	strd	r0, [sp, #56]	; 0x38
   14a24:	ldrd	r0, [r3, #32]
   14a28:	strd	r8, [sp, #64]	; 0x40
   14a2c:	ldrd	r8, [r3, #40]	; 0x28
   14a30:	strd	r0, [sp, #72]	; 0x48
   14a34:	strd	r8, [sp, #80]	; 0x50
   14a38:	ldr	r3, [r6, ip, lsl #2]
   14a3c:	mvn	r1, r3, lsr r2
   14a40:	and	r1, r1, #1
   14a44:	eor	r2, r3, r1, lsl r2
   14a48:	str	r2, [r6, ip, lsl #2]
   14a4c:	bl	10eac <__errno_location@plt>
   14a50:	ldr	r3, [r0]
   14a54:	mov	r8, r0
   14a58:	ldr	r2, [r5, #4]
   14a5c:	ldr	r4, [r5]
   14a60:	str	r3, [sp, #28]
   14a64:	cmp	r2, #0
   14a68:	bgt	14ac4 <__assert_fail@plt+0x3b40>
   14a6c:	add	r3, r5, #8
   14a70:	str	r2, [sp, #36]	; 0x24
   14a74:	rsb	r2, r2, #1
   14a78:	cmp	r4, r3
   14a7c:	beq	14b98 <__assert_fail@plt+0x3c14>
   14a80:	mov	r1, #8
   14a84:	mov	r0, r4
   14a88:	mvn	r3, #-2147483648	; 0x80000000
   14a8c:	str	r1, [sp]
   14a90:	add	r1, sp, #36	; 0x24
   14a94:	bl	164ec <__assert_fail@plt+0x5568>
   14a98:	mov	r4, r0
   14a9c:	str	r0, [r5]
   14aa0:	ldr	r0, [r5, #4]
   14aa4:	mov	r1, #0
   14aa8:	ldr	r2, [sp, #36]	; 0x24
   14aac:	sub	r2, r2, r0
   14ab0:	add	r0, r4, r0, lsl #3
   14ab4:	lsl	r2, r2, #3
   14ab8:	bl	10ec4 <memset@plt>
   14abc:	ldr	r3, [sp, #36]	; 0x24
   14ac0:	str	r3, [r5, #4]
   14ac4:	ldr	ip, [sp, #40]	; 0x28
   14ac8:	mov	r3, fp
   14acc:	mov	r2, sl
   14ad0:	ldr	r7, [sp, #44]	; 0x2c
   14ad4:	ldr	r9, [r4]
   14ad8:	ldr	r5, [r4, #4]
   14adc:	str	ip, [sp]
   14ae0:	orr	r7, r7, #1
   14ae4:	ldr	ip, [sp, #80]	; 0x50
   14ae8:	mov	r1, r9
   14aec:	str	r7, [sp, #4]
   14af0:	ldr	lr, [sp, #84]	; 0x54
   14af4:	mov	r0, r5
   14af8:	str	r6, [sp, #8]
   14afc:	str	ip, [sp, #12]
   14b00:	str	lr, [sp, #16]
   14b04:	bl	121e0 <__assert_fail@plt+0x125c>
   14b08:	cmp	r9, r0
   14b0c:	bhi	14b70 <__assert_fail@plt+0x3bec>
   14b10:	add	r9, r0, #1
   14b14:	movw	r3, #37268	; 0x9194
   14b18:	movt	r3, #2
   14b1c:	cmp	r5, r3
   14b20:	str	r9, [r4]
   14b24:	beq	14b30 <__assert_fail@plt+0x3bac>
   14b28:	mov	r0, r5
   14b2c:	bl	11f5c <__assert_fail@plt+0xfd8>
   14b30:	mov	r0, r9
   14b34:	bl	16248 <__assert_fail@plt+0x52c4>
   14b38:	mov	r1, r9
   14b3c:	ldr	ip, [sp, #40]	; 0x28
   14b40:	mov	r3, fp
   14b44:	mov	r2, sl
   14b48:	mov	r5, r0
   14b4c:	ldr	r9, [sp, #80]	; 0x50
   14b50:	ldr	lr, [sp, #84]	; 0x54
   14b54:	str	r0, [r4, #4]
   14b58:	str	ip, [sp]
   14b5c:	str	r7, [sp, #4]
   14b60:	str	r6, [sp, #8]
   14b64:	str	r9, [sp, #12]
   14b68:	str	lr, [sp, #16]
   14b6c:	bl	121e0 <__assert_fail@plt+0x125c>
   14b70:	ldr	r3, [sp, #28]
   14b74:	mov	r0, r5
   14b78:	str	r3, [r8]
   14b7c:	add	sp, sp, #92	; 0x5c
   14b80:	ldrd	r4, [sp]
   14b84:	ldrd	r6, [sp, #8]
   14b88:	ldrd	r8, [sp, #16]
   14b8c:	ldrd	sl, [sp, #24]
   14b90:	add	sp, sp, #32
   14b94:	pop	{pc}		; (ldr pc, [sp], #4)
   14b98:	mov	r0, #8
   14b9c:	mvn	r3, #-2147483648	; 0x80000000
   14ba0:	add	r1, sp, #36	; 0x24
   14ba4:	str	r0, [sp]
   14ba8:	mov	r0, #0
   14bac:	bl	164ec <__assert_fail@plt+0x5568>
   14bb0:	ldrd	r2, [r5, #8]
   14bb4:	mov	r4, r0
   14bb8:	str	r0, [r5]
   14bbc:	strd	r2, [r0]
   14bc0:	b	14aa0 <__assert_fail@plt+0x3b1c>
   14bc4:	muleq	r2, r4, r2
   14bc8:	ldr	ip, [pc, #476]	; 14dac <__assert_fail@plt+0x3e28>
   14bcc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14bd0:	movw	r4, #37116	; 0x90fc
   14bd4:	movt	r4, #2
   14bd8:	ldrd	r2, [ip, #8]
   14bdc:	strd	r6, [sp, #8]
   14be0:	lsr	r7, r1, #5
   14be4:	mov	r6, r0
   14be8:	strd	r8, [sp, #16]
   14bec:	str	lr, [sp, #32]
   14bf0:	and	lr, r1, #31
   14bf4:	ldrd	r0, [ip]
   14bf8:	strd	sl, [sp, #24]
   14bfc:	sub	sp, sp, #84	; 0x54
   14c00:	add	r5, sp, #40	; 0x28
   14c04:	strd	r0, [sp, #32]
   14c08:	strd	r2, [sp, #40]	; 0x28
   14c0c:	ldrd	r0, [ip, #16]
   14c10:	ldrd	r2, [ip, #24]
   14c14:	strd	r0, [sp, #48]	; 0x30
   14c18:	ldrd	r0, [ip, #32]
   14c1c:	strd	r2, [sp, #56]	; 0x38
   14c20:	ldrd	r2, [ip, #40]	; 0x28
   14c24:	strd	r0, [sp, #64]	; 0x40
   14c28:	strd	r2, [sp, #72]	; 0x48
   14c2c:	ldr	r1, [r5, r7, lsl #2]
   14c30:	mvn	r3, r1, lsr lr
   14c34:	and	r3, r3, #1
   14c38:	eor	r1, r1, r3, lsl lr
   14c3c:	str	r1, [r5, r7, lsl #2]
   14c40:	bl	10eac <__errno_location@plt>
   14c44:	mov	r9, r0
   14c48:	ldr	sl, [r0]
   14c4c:	ldr	r2, [r4, #4]
   14c50:	ldr	r7, [r4]
   14c54:	cmp	r2, #0
   14c58:	bgt	14cb4 <__assert_fail@plt+0x3d30>
   14c5c:	add	r3, r4, #8
   14c60:	str	r2, [sp, #28]
   14c64:	rsb	r2, r2, #1
   14c68:	cmp	r7, r3
   14c6c:	beq	14d80 <__assert_fail@plt+0x3dfc>
   14c70:	mov	r1, #8
   14c74:	mov	r0, r7
   14c78:	mvn	r3, #-2147483648	; 0x80000000
   14c7c:	str	r1, [sp]
   14c80:	add	r1, sp, #28
   14c84:	bl	164ec <__assert_fail@plt+0x5568>
   14c88:	mov	r7, r0
   14c8c:	str	r0, [r4]
   14c90:	ldr	r0, [r4, #4]
   14c94:	mov	r1, #0
   14c98:	ldr	r2, [sp, #28]
   14c9c:	sub	r2, r2, r0
   14ca0:	add	r0, r7, r0, lsl #3
   14ca4:	lsl	r2, r2, #3
   14ca8:	bl	10ec4 <memset@plt>
   14cac:	ldr	r3, [sp, #28]
   14cb0:	str	r3, [r4, #4]
   14cb4:	ldr	ip, [sp, #32]
   14cb8:	mvn	r3, #0
   14cbc:	mov	r2, r6
   14cc0:	ldr	r8, [sp, #36]	; 0x24
   14cc4:	ldr	fp, [r7]
   14cc8:	ldr	r4, [r7, #4]
   14ccc:	str	ip, [sp]
   14cd0:	orr	r8, r8, #1
   14cd4:	ldr	ip, [sp, #72]	; 0x48
   14cd8:	mov	r1, fp
   14cdc:	str	r8, [sp, #4]
   14ce0:	ldr	lr, [sp, #76]	; 0x4c
   14ce4:	mov	r0, r4
   14ce8:	str	r5, [sp, #8]
   14cec:	str	ip, [sp, #12]
   14cf0:	str	lr, [sp, #16]
   14cf4:	bl	121e0 <__assert_fail@plt+0x125c>
   14cf8:	cmp	fp, r0
   14cfc:	bhi	14d5c <__assert_fail@plt+0x3dd8>
   14d00:	add	fp, r0, #1
   14d04:	movw	r3, #37268	; 0x9194
   14d08:	movt	r3, #2
   14d0c:	cmp	r4, r3
   14d10:	str	fp, [r7]
   14d14:	beq	14d20 <__assert_fail@plt+0x3d9c>
   14d18:	mov	r0, r4
   14d1c:	bl	11f5c <__assert_fail@plt+0xfd8>
   14d20:	mov	r0, fp
   14d24:	bl	16248 <__assert_fail@plt+0x52c4>
   14d28:	ldr	r3, [sp, #32]
   14d2c:	mov	r2, r6
   14d30:	mov	r1, fp
   14d34:	mov	r4, r0
   14d38:	ldr	lr, [sp, #72]	; 0x48
   14d3c:	ldr	ip, [sp, #76]	; 0x4c
   14d40:	str	r0, [r7, #4]
   14d44:	stm	sp, {r3, r8}
   14d48:	mvn	r3, #0
   14d4c:	str	r5, [sp, #8]
   14d50:	str	lr, [sp, #12]
   14d54:	str	ip, [sp, #16]
   14d58:	bl	121e0 <__assert_fail@plt+0x125c>
   14d5c:	mov	r0, r4
   14d60:	str	sl, [r9]
   14d64:	add	sp, sp, #84	; 0x54
   14d68:	ldrd	r4, [sp]
   14d6c:	ldrd	r6, [sp, #8]
   14d70:	ldrd	r8, [sp, #16]
   14d74:	ldrd	sl, [sp, #24]
   14d78:	add	sp, sp, #32
   14d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d80:	mov	r0, #8
   14d84:	mvn	r3, #-2147483648	; 0x80000000
   14d88:	add	r1, sp, #28
   14d8c:	str	r0, [sp]
   14d90:	mov	r0, #0
   14d94:	bl	164ec <__assert_fail@plt+0x5568>
   14d98:	ldrd	r2, [r4, #8]
   14d9c:	mov	r7, r0
   14da0:	str	r0, [r4]
   14da4:	strd	r2, [r0]
   14da8:	b	14c90 <__assert_fail@plt+0x3d0c>
   14dac:	muleq	r2, r4, r2
   14db0:	ldr	ip, [pc, #472]	; 14f90 <__assert_fail@plt+0x400c>
   14db4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14db8:	mov	r5, r0
   14dbc:	movw	r4, #37116	; 0x90fc
   14dc0:	movt	r4, #2
   14dc4:	ldrd	r2, [ip]
   14dc8:	ldrd	r0, [ip, #8]
   14dcc:	strd	r6, [sp, #8]
   14dd0:	strd	r8, [sp, #16]
   14dd4:	strd	sl, [sp, #24]
   14dd8:	str	lr, [sp, #32]
   14ddc:	sub	sp, sp, #84	; 0x54
   14de0:	strd	r2, [sp, #32]
   14de4:	strd	r0, [sp, #40]	; 0x28
   14de8:	ldr	r6, [sp, #44]	; 0x2c
   14dec:	ldrd	r2, [ip, #16]
   14df0:	ldrd	r0, [ip, #24]
   14df4:	mvn	lr, r6
   14df8:	and	lr, lr, #67108864	; 0x4000000
   14dfc:	eor	lr, lr, r6
   14e00:	ldrd	r6, [ip, #40]	; 0x28
   14e04:	strd	r2, [sp, #48]	; 0x30
   14e08:	ldrd	r2, [ip, #32]
   14e0c:	str	lr, [sp, #44]	; 0x2c
   14e10:	strd	r0, [sp, #56]	; 0x38
   14e14:	strd	r2, [sp, #64]	; 0x40
   14e18:	strd	r6, [sp, #72]	; 0x48
   14e1c:	bl	10eac <__errno_location@plt>
   14e20:	mov	r8, r0
   14e24:	ldr	r9, [r0]
   14e28:	ldr	r2, [r4, #4]
   14e2c:	ldr	r6, [r4]
   14e30:	cmp	r2, #0
   14e34:	bgt	14e90 <__assert_fail@plt+0x3f0c>
   14e38:	add	r3, r4, #8
   14e3c:	str	r2, [sp, #28]
   14e40:	rsb	r2, r2, #1
   14e44:	cmp	r6, r3
   14e48:	beq	14f64 <__assert_fail@plt+0x3fe0>
   14e4c:	mov	r1, #8
   14e50:	mov	r0, r6
   14e54:	mvn	r3, #-2147483648	; 0x80000000
   14e58:	str	r1, [sp]
   14e5c:	add	r1, sp, #28
   14e60:	bl	164ec <__assert_fail@plt+0x5568>
   14e64:	mov	r6, r0
   14e68:	str	r0, [r4]
   14e6c:	ldr	r0, [r4, #4]
   14e70:	mov	r1, #0
   14e74:	ldr	r2, [sp, #28]
   14e78:	sub	r2, r2, r0
   14e7c:	add	r0, r6, r0, lsl #3
   14e80:	lsl	r2, r2, #3
   14e84:	bl	10ec4 <memset@plt>
   14e88:	ldr	r3, [sp, #28]
   14e8c:	str	r3, [r4, #4]
   14e90:	ldr	sl, [r6]
   14e94:	add	r0, sp, #40	; 0x28
   14e98:	mvn	r3, #0
   14e9c:	mov	r2, r5
   14ea0:	ldr	r7, [sp, #36]	; 0x24
   14ea4:	ldr	r4, [r6, #4]
   14ea8:	mov	r1, sl
   14eac:	str	r0, [sp, #8]
   14eb0:	ldr	lr, [sp, #32]
   14eb4:	orr	r7, r7, #1
   14eb8:	ldr	ip, [sp, #72]	; 0x48
   14ebc:	mov	r0, r4
   14ec0:	ldr	fp, [sp, #76]	; 0x4c
   14ec4:	str	lr, [sp]
   14ec8:	str	r7, [sp, #4]
   14ecc:	str	ip, [sp, #12]
   14ed0:	str	fp, [sp, #16]
   14ed4:	bl	121e0 <__assert_fail@plt+0x125c>
   14ed8:	cmp	sl, r0
   14edc:	bhi	14f40 <__assert_fail@plt+0x3fbc>
   14ee0:	add	sl, r0, #1
   14ee4:	movw	r3, #37268	; 0x9194
   14ee8:	movt	r3, #2
   14eec:	cmp	r4, r3
   14ef0:	str	sl, [r6]
   14ef4:	beq	14f00 <__assert_fail@plt+0x3f7c>
   14ef8:	mov	r0, r4
   14efc:	bl	11f5c <__assert_fail@plt+0xfd8>
   14f00:	mov	r0, sl
   14f04:	bl	16248 <__assert_fail@plt+0x52c4>
   14f08:	ldr	r3, [sp, #32]
   14f0c:	mov	r2, r5
   14f10:	add	r5, sp, #40	; 0x28
   14f14:	mov	r1, sl
   14f18:	mov	r4, r0
   14f1c:	ldr	lr, [sp, #72]	; 0x48
   14f20:	ldr	ip, [sp, #76]	; 0x4c
   14f24:	str	r0, [r6, #4]
   14f28:	stm	sp, {r3, r7}
   14f2c:	mvn	r3, #0
   14f30:	str	r5, [sp, #8]
   14f34:	str	lr, [sp, #12]
   14f38:	str	ip, [sp, #16]
   14f3c:	bl	121e0 <__assert_fail@plt+0x125c>
   14f40:	mov	r0, r4
   14f44:	str	r9, [r8]
   14f48:	add	sp, sp, #84	; 0x54
   14f4c:	ldrd	r4, [sp]
   14f50:	ldrd	r6, [sp, #8]
   14f54:	ldrd	r8, [sp, #16]
   14f58:	ldrd	sl, [sp, #24]
   14f5c:	add	sp, sp, #32
   14f60:	pop	{pc}		; (ldr pc, [sp], #4)
   14f64:	mov	r0, #8
   14f68:	mvn	r3, #-2147483648	; 0x80000000
   14f6c:	add	r1, sp, #28
   14f70:	str	r0, [sp]
   14f74:	mov	r0, #0
   14f78:	bl	164ec <__assert_fail@plt+0x5568>
   14f7c:	ldrd	r2, [r4, #8]
   14f80:	mov	r6, r0
   14f84:	str	r0, [r4]
   14f88:	strd	r2, [r0]
   14f8c:	b	14e6c <__assert_fail@plt+0x3ee8>
   14f90:	muleq	r2, r4, r2
   14f94:	ldr	ip, [pc, #480]	; 1517c <__assert_fail@plt+0x41f8>
   14f98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14f9c:	mov	r5, r0
   14fa0:	movw	r4, #37116	; 0x90fc
   14fa4:	movt	r4, #2
   14fa8:	ldrd	r2, [ip]
   14fac:	strd	r6, [sp, #8]
   14fb0:	mov	r6, r1
   14fb4:	ldrd	r0, [ip, #8]
   14fb8:	strd	r8, [sp, #16]
   14fbc:	strd	sl, [sp, #24]
   14fc0:	str	lr, [sp, #32]
   14fc4:	sub	sp, sp, #84	; 0x54
   14fc8:	ldrd	r8, [ip, #40]	; 0x28
   14fcc:	strd	r2, [sp, #32]
   14fd0:	strd	r0, [sp, #40]	; 0x28
   14fd4:	ldrd	r2, [ip, #16]
   14fd8:	ldr	r7, [sp, #44]	; 0x2c
   14fdc:	ldrd	r0, [ip, #24]
   14fe0:	strd	r2, [sp, #48]	; 0x30
   14fe4:	ldrd	r2, [ip, #32]
   14fe8:	mvn	lr, r7
   14fec:	and	lr, lr, #67108864	; 0x4000000
   14ff0:	eor	lr, lr, r7
   14ff4:	str	lr, [sp, #44]	; 0x2c
   14ff8:	strd	r0, [sp, #56]	; 0x38
   14ffc:	strd	r2, [sp, #64]	; 0x40
   15000:	strd	r8, [sp, #72]	; 0x48
   15004:	bl	10eac <__errno_location@plt>
   15008:	mov	r9, r0
   1500c:	ldr	sl, [r0]
   15010:	ldr	r2, [r4, #4]
   15014:	ldr	r7, [r4]
   15018:	cmp	r2, #0
   1501c:	bgt	15078 <__assert_fail@plt+0x40f4>
   15020:	add	r3, r4, #8
   15024:	str	r2, [sp, #28]
   15028:	rsb	r2, r2, #1
   1502c:	cmp	r7, r3
   15030:	beq	15150 <__assert_fail@plt+0x41cc>
   15034:	mov	r1, #8
   15038:	mov	r0, r7
   1503c:	mvn	r3, #-2147483648	; 0x80000000
   15040:	str	r1, [sp]
   15044:	add	r1, sp, #28
   15048:	bl	164ec <__assert_fail@plt+0x5568>
   1504c:	mov	r7, r0
   15050:	str	r0, [r4]
   15054:	ldr	r0, [r4, #4]
   15058:	mov	r1, #0
   1505c:	ldr	r2, [sp, #28]
   15060:	sub	r2, r2, r0
   15064:	add	r0, r7, r0, lsl #3
   15068:	lsl	r2, r2, #3
   1506c:	bl	10ec4 <memset@plt>
   15070:	ldr	r3, [sp, #28]
   15074:	str	r3, [r4, #4]
   15078:	ldr	ip, [sp, #32]
   1507c:	add	r0, sp, #40	; 0x28
   15080:	mov	r3, r6
   15084:	mov	r2, r5
   15088:	ldr	r8, [sp, #36]	; 0x24
   1508c:	ldr	fp, [r7]
   15090:	ldr	r4, [r7, #4]
   15094:	str	ip, [sp]
   15098:	orr	r8, r8, #1
   1509c:	ldr	ip, [sp, #72]	; 0x48
   150a0:	mov	r1, fp
   150a4:	str	r8, [sp, #4]
   150a8:	ldr	lr, [sp, #76]	; 0x4c
   150ac:	str	r0, [sp, #8]
   150b0:	mov	r0, r4
   150b4:	str	ip, [sp, #12]
   150b8:	str	lr, [sp, #16]
   150bc:	bl	121e0 <__assert_fail@plt+0x125c>
   150c0:	cmp	fp, r0
   150c4:	bhi	1512c <__assert_fail@plt+0x41a8>
   150c8:	add	fp, r0, #1
   150cc:	movw	r3, #37268	; 0x9194
   150d0:	movt	r3, #2
   150d4:	cmp	r4, r3
   150d8:	str	fp, [r7]
   150dc:	beq	150e8 <__assert_fail@plt+0x4164>
   150e0:	mov	r0, r4
   150e4:	bl	11f5c <__assert_fail@plt+0xfd8>
   150e8:	mov	r0, fp
   150ec:	bl	16248 <__assert_fail@plt+0x52c4>
   150f0:	ldr	lr, [sp, #32]
   150f4:	mov	r2, r5
   150f8:	mov	r3, r6
   150fc:	mov	r1, fp
   15100:	mov	r4, r0
   15104:	ldr	r5, [sp, #72]	; 0x48
   15108:	ldr	ip, [sp, #76]	; 0x4c
   1510c:	str	r0, [r7, #4]
   15110:	str	lr, [sp]
   15114:	add	lr, sp, #40	; 0x28
   15118:	str	r8, [sp, #4]
   1511c:	str	lr, [sp, #8]
   15120:	str	r5, [sp, #12]
   15124:	str	ip, [sp, #16]
   15128:	bl	121e0 <__assert_fail@plt+0x125c>
   1512c:	mov	r0, r4
   15130:	str	sl, [r9]
   15134:	add	sp, sp, #84	; 0x54
   15138:	ldrd	r4, [sp]
   1513c:	ldrd	r6, [sp, #8]
   15140:	ldrd	r8, [sp, #16]
   15144:	ldrd	sl, [sp, #24]
   15148:	add	sp, sp, #32
   1514c:	pop	{pc}		; (ldr pc, [sp], #4)
   15150:	mov	r0, #8
   15154:	mvn	r3, #-2147483648	; 0x80000000
   15158:	add	r1, sp, #28
   1515c:	str	r0, [sp]
   15160:	mov	r0, #0
   15164:	bl	164ec <__assert_fail@plt+0x5568>
   15168:	ldrd	r2, [r4, #8]
   1516c:	mov	r7, r0
   15170:	str	r0, [r4]
   15174:	strd	r2, [r0]
   15178:	b	15054 <__assert_fail@plt+0x40d0>
   1517c:	muleq	r2, r4, r2
   15180:	strd	r4, [sp, #-12]!
   15184:	mov	r4, #0
   15188:	mov	r5, #0
   1518c:	str	lr, [sp, #8]
   15190:	sub	sp, sp, #100	; 0x64
   15194:	cmp	r1, #10
   15198:	strd	r4, [sp]
   1519c:	strd	r4, [sp, #8]
   151a0:	strd	r4, [sp, #16]
   151a4:	strd	r4, [sp, #24]
   151a8:	strd	r4, [sp, #32]
   151ac:	strd	r4, [sp, #40]	; 0x28
   151b0:	beq	151e0 <__assert_fail@plt+0x425c>
   151b4:	mov	ip, #67108864	; 0x4000000
   151b8:	mov	r3, sp
   151bc:	str	r1, [sp]
   151c0:	mov	r1, r2
   151c4:	mvn	r2, #0
   151c8:	str	ip, [sp, #12]
   151cc:	bl	13bcc <__assert_fail@plt+0x2c48>
   151d0:	add	sp, sp, #100	; 0x64
   151d4:	ldrd	r4, [sp]
   151d8:	add	sp, sp, #8
   151dc:	pop	{pc}		; (ldr pc, [sp], #4)
   151e0:	bl	10f78 <abort@plt>
   151e4:	ldr	ip, [pc, #156]	; 15288 <__assert_fail@plt+0x4304>
   151e8:	cmp	r2, #0
   151ec:	cmpne	r1, #0
   151f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   151f4:	strd	r6, [sp, #8]
   151f8:	mov	r6, r2
   151fc:	str	r8, [sp, #16]
   15200:	mov	r8, r3
   15204:	strd	sl, [sp, #20]
   15208:	ldrd	r4, [ip]
   1520c:	str	lr, [sp, #28]
   15210:	sub	sp, sp, #48	; 0x30
   15214:	mov	lr, #10
   15218:	ldrd	r2, [ip, #8]
   1521c:	ldrd	sl, [ip, #16]
   15220:	strd	r4, [sp]
   15224:	ldrd	r4, [ip, #32]
   15228:	str	lr, [sp]
   1522c:	strd	r2, [sp, #8]
   15230:	strd	sl, [sp, #16]
   15234:	ldrd	r2, [ip, #24]
   15238:	ldrd	sl, [ip, #40]	; 0x28
   1523c:	strd	r2, [sp, #24]
   15240:	strd	r4, [sp, #32]
   15244:	strd	sl, [sp, #40]	; 0x28
   15248:	beq	15284 <__assert_fail@plt+0x4300>
   1524c:	mov	r7, r1
   15250:	mov	r3, sp
   15254:	mov	r1, r8
   15258:	mvn	r2, #0
   1525c:	str	r7, [sp, #40]	; 0x28
   15260:	str	r6, [sp, #44]	; 0x2c
   15264:	bl	13bcc <__assert_fail@plt+0x2c48>
   15268:	add	sp, sp, #48	; 0x30
   1526c:	ldrd	r4, [sp]
   15270:	ldrd	r6, [sp, #8]
   15274:	ldr	r8, [sp, #16]
   15278:	ldrd	sl, [sp, #20]
   1527c:	add	sp, sp, #28
   15280:	pop	{pc}		; (ldr pc, [sp], #4)
   15284:	bl	10f78 <abort@plt>
   15288:	muleq	r2, r4, r2
   1528c:	ldr	ip, [pc, #156]	; 15330 <__assert_fail@plt+0x43ac>
   15290:	cmp	r2, #0
   15294:	cmpne	r1, #0
   15298:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1529c:	strd	r6, [sp, #8]
   152a0:	mov	r6, r2
   152a4:	str	r8, [sp, #16]
   152a8:	mov	r8, r3
   152ac:	strd	sl, [sp, #20]
   152b0:	ldrd	r4, [ip]
   152b4:	str	lr, [sp, #28]
   152b8:	sub	sp, sp, #48	; 0x30
   152bc:	mov	lr, #10
   152c0:	ldrd	r2, [ip, #8]
   152c4:	ldrd	sl, [ip, #16]
   152c8:	strd	r4, [sp]
   152cc:	ldrd	r4, [ip, #32]
   152d0:	str	lr, [sp]
   152d4:	strd	r2, [sp, #8]
   152d8:	strd	sl, [sp, #16]
   152dc:	ldrd	r2, [ip, #24]
   152e0:	ldrd	sl, [ip, #40]	; 0x28
   152e4:	strd	r2, [sp, #24]
   152e8:	strd	r4, [sp, #32]
   152ec:	strd	sl, [sp, #40]	; 0x28
   152f0:	beq	1532c <__assert_fail@plt+0x43a8>
   152f4:	ldr	r2, [sp, #80]	; 0x50
   152f8:	mov	r7, r1
   152fc:	mov	r3, sp
   15300:	mov	r1, r8
   15304:	str	r7, [sp, #40]	; 0x28
   15308:	str	r6, [sp, #44]	; 0x2c
   1530c:	bl	13bcc <__assert_fail@plt+0x2c48>
   15310:	add	sp, sp, #48	; 0x30
   15314:	ldrd	r4, [sp]
   15318:	ldrd	r6, [sp, #8]
   1531c:	ldr	r8, [sp, #16]
   15320:	ldrd	sl, [sp, #20]
   15324:	add	sp, sp, #28
   15328:	pop	{pc}		; (ldr pc, [sp], #4)
   1532c:	bl	10f78 <abort@plt>
   15330:	muleq	r2, r4, r2
   15334:	ldr	ip, [pc, #512]	; 1553c <__assert_fail@plt+0x45b8>
   15338:	cmp	r0, #0
   1533c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15340:	ldrd	r4, [ip, #16]
   15344:	strd	r6, [sp, #8]
   15348:	clz	r6, r1
   1534c:	mov	r7, r1
   15350:	strd	r8, [sp, #16]
   15354:	mov	r8, r0
   15358:	lsr	r6, r6, #5
   1535c:	strd	sl, [sp, #24]
   15360:	mov	fp, r2
   15364:	mov	sl, #10
   15368:	ldrd	r2, [ip]
   1536c:	moveq	r6, #1
   15370:	str	lr, [sp, #32]
   15374:	sub	sp, sp, #92	; 0x5c
   15378:	cmp	r6, #0
   1537c:	ldrd	r0, [ip, #8]
   15380:	strd	r2, [sp, #40]	; 0x28
   15384:	strd	r4, [sp, #56]	; 0x38
   15388:	ldrd	r2, [ip, #24]
   1538c:	strd	r0, [sp, #48]	; 0x30
   15390:	ldrd	r0, [ip, #32]
   15394:	str	sl, [sp, #40]	; 0x28
   15398:	ldrd	r4, [ip, #40]	; 0x28
   1539c:	strd	r2, [sp, #64]	; 0x40
   153a0:	strd	r0, [sp, #72]	; 0x48
   153a4:	strd	r4, [sp, #80]	; 0x50
   153a8:	bne	15538 <__assert_fail@plt+0x45b4>
   153ac:	movw	r5, #37116	; 0x90fc
   153b0:	movt	r5, #2
   153b4:	str	r8, [sp, #80]	; 0x50
   153b8:	str	r7, [sp, #84]	; 0x54
   153bc:	bl	10eac <__errno_location@plt>
   153c0:	ldr	r3, [r0]
   153c4:	mov	r9, r0
   153c8:	ldr	r2, [r5, #4]
   153cc:	ldr	r4, [r5]
   153d0:	str	r3, [sp, #28]
   153d4:	cmp	r2, #0
   153d8:	movgt	r1, sl
   153dc:	bgt	15444 <__assert_fail@plt+0x44c0>
   153e0:	add	r3, r5, #8
   153e4:	str	r2, [sp, #36]	; 0x24
   153e8:	rsb	r2, r2, #1
   153ec:	cmp	r4, r3
   153f0:	beq	1550c <__assert_fail@plt+0x4588>
   153f4:	mov	r1, #8
   153f8:	mov	r0, r4
   153fc:	mvn	r3, #-2147483648	; 0x80000000
   15400:	str	r1, [sp]
   15404:	add	r1, sp, #36	; 0x24
   15408:	bl	164ec <__assert_fail@plt+0x5568>
   1540c:	mov	r4, r0
   15410:	str	r0, [r5]
   15414:	ldr	r0, [r5, #4]
   15418:	mov	r1, #0
   1541c:	ldr	r2, [sp, #36]	; 0x24
   15420:	sub	r2, r2, r0
   15424:	add	r0, r4, r0, lsl #3
   15428:	lsl	r2, r2, #3
   1542c:	bl	10ec4 <memset@plt>
   15430:	ldr	r3, [sp, #36]	; 0x24
   15434:	ldr	r1, [sp, #40]	; 0x28
   15438:	ldr	r8, [sp, #80]	; 0x50
   1543c:	str	r3, [r5, #4]
   15440:	ldr	r7, [sp, #84]	; 0x54
   15444:	mvn	r3, #0
   15448:	mov	r2, fp
   1544c:	ldr	r6, [sp, #44]	; 0x2c
   15450:	ldr	sl, [r4]
   15454:	ldr	r5, [r4, #4]
   15458:	orr	r6, r6, #1
   1545c:	stm	sp, {r1, r6}
   15460:	add	r1, sp, #48	; 0x30
   15464:	str	r8, [sp, #12]
   15468:	mov	r0, r5
   1546c:	str	r1, [sp, #8]
   15470:	mov	r1, sl
   15474:	str	r7, [sp, #16]
   15478:	bl	121e0 <__assert_fail@plt+0x125c>
   1547c:	cmp	sl, r0
   15480:	bhi	154e4 <__assert_fail@plt+0x4560>
   15484:	add	r7, r0, #1
   15488:	movw	r3, #37268	; 0x9194
   1548c:	movt	r3, #2
   15490:	cmp	r5, r3
   15494:	str	r7, [r4]
   15498:	beq	154a4 <__assert_fail@plt+0x4520>
   1549c:	mov	r0, r5
   154a0:	bl	11f5c <__assert_fail@plt+0xfd8>
   154a4:	mov	r0, r7
   154a8:	bl	16248 <__assert_fail@plt+0x52c4>
   154ac:	ldr	r3, [sp, #40]	; 0x28
   154b0:	mov	r2, fp
   154b4:	mov	r1, r7
   154b8:	mov	r5, r0
   154bc:	ldr	lr, [sp, #80]	; 0x50
   154c0:	ldr	ip, [sp, #84]	; 0x54
   154c4:	str	r0, [r4, #4]
   154c8:	add	r4, sp, #48	; 0x30
   154cc:	stm	sp, {r3, r6}
   154d0:	mvn	r3, #0
   154d4:	str	r4, [sp, #8]
   154d8:	str	lr, [sp, #12]
   154dc:	str	ip, [sp, #16]
   154e0:	bl	121e0 <__assert_fail@plt+0x125c>
   154e4:	ldr	r3, [sp, #28]
   154e8:	mov	r0, r5
   154ec:	str	r3, [r9]
   154f0:	add	sp, sp, #92	; 0x5c
   154f4:	ldrd	r4, [sp]
   154f8:	ldrd	r6, [sp, #8]
   154fc:	ldrd	r8, [sp, #16]
   15500:	ldrd	sl, [sp, #24]
   15504:	add	sp, sp, #32
   15508:	pop	{pc}		; (ldr pc, [sp], #4)
   1550c:	mov	r1, #8
   15510:	mvn	r3, #-2147483648	; 0x80000000
   15514:	mov	r0, r6
   15518:	str	r1, [sp]
   1551c:	add	r1, sp, #36	; 0x24
   15520:	bl	164ec <__assert_fail@plt+0x5568>
   15524:	ldrd	r2, [r5, #8]
   15528:	mov	r4, r0
   1552c:	str	r0, [r5]
   15530:	strd	r2, [r0]
   15534:	b	15414 <__assert_fail@plt+0x4490>
   15538:	bl	10f78 <abort@plt>
   1553c:	muleq	r2, r4, r2
   15540:	ldr	ip, [pc, #536]	; 15760 <__assert_fail@plt+0x47dc>
   15544:	cmp	r0, #0
   15548:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1554c:	ldrd	r4, [ip, #16]
   15550:	strd	r6, [sp, #8]
   15554:	mov	r6, r1
   15558:	mov	r7, r0
   1555c:	strd	r8, [sp, #16]
   15560:	mov	r9, #10
   15564:	strd	sl, [sp, #24]
   15568:	mov	sl, r2
   1556c:	mov	fp, r3
   15570:	str	lr, [sp, #32]
   15574:	clz	lr, r1
   15578:	sub	sp, sp, #92	; 0x5c
   1557c:	ldrd	r2, [ip]
   15580:	lsr	lr, lr, #5
   15584:	moveq	lr, #1
   15588:	ldrd	r0, [ip, #8]
   1558c:	cmp	lr, #0
   15590:	strd	r4, [sp, #56]	; 0x38
   15594:	ldrd	r4, [ip, #40]	; 0x28
   15598:	str	lr, [sp, #28]
   1559c:	strd	r2, [sp, #40]	; 0x28
   155a0:	ldrd	r2, [ip, #24]
   155a4:	strd	r0, [sp, #48]	; 0x30
   155a8:	ldrd	r0, [ip, #32]
   155ac:	str	r9, [sp, #40]	; 0x28
   155b0:	strd	r2, [sp, #64]	; 0x40
   155b4:	strd	r4, [sp, #80]	; 0x50
   155b8:	strd	r0, [sp, #72]	; 0x48
   155bc:	bne	1575c <__assert_fail@plt+0x47d8>
   155c0:	movw	r5, #37116	; 0x90fc
   155c4:	movt	r5, #2
   155c8:	str	r7, [sp, #80]	; 0x50
   155cc:	str	r6, [sp, #84]	; 0x54
   155d0:	bl	10eac <__errno_location@plt>
   155d4:	ldr	r3, [r0]
   155d8:	mov	r8, r0
   155dc:	ldr	r2, [r5, #4]
   155e0:	ldr	r4, [r5]
   155e4:	str	r3, [sp, #24]
   155e8:	cmp	r2, #0
   155ec:	movgt	r1, r9
   155f0:	bgt	15658 <__assert_fail@plt+0x46d4>
   155f4:	add	r3, r5, #8
   155f8:	str	r2, [sp, #36]	; 0x24
   155fc:	rsb	r2, r2, #1
   15600:	cmp	r4, r3
   15604:	beq	15730 <__assert_fail@plt+0x47ac>
   15608:	mov	r1, #8
   1560c:	mov	r0, r4
   15610:	mvn	r3, #-2147483648	; 0x80000000
   15614:	str	r1, [sp]
   15618:	add	r1, sp, #36	; 0x24
   1561c:	bl	164ec <__assert_fail@plt+0x5568>
   15620:	mov	r4, r0
   15624:	str	r0, [r5]
   15628:	ldr	r0, [r5, #4]
   1562c:	mov	r1, #0
   15630:	ldr	r2, [sp, #36]	; 0x24
   15634:	sub	r2, r2, r0
   15638:	add	r0, r4, r0, lsl #3
   1563c:	lsl	r2, r2, #3
   15640:	bl	10ec4 <memset@plt>
   15644:	ldr	r3, [sp, #36]	; 0x24
   15648:	ldr	r1, [sp, #40]	; 0x28
   1564c:	ldr	r7, [sp, #80]	; 0x50
   15650:	str	r3, [r5, #4]
   15654:	ldr	r6, [sp, #84]	; 0x54
   15658:	mov	r3, fp
   1565c:	mov	r2, sl
   15660:	ldr	r0, [sp, #44]	; 0x2c
   15664:	ldr	r9, [r4]
   15668:	ldr	r5, [r4, #4]
   1566c:	orr	r0, r0, #1
   15670:	str	r1, [sp]
   15674:	add	r1, sp, #48	; 0x30
   15678:	str	r0, [sp, #4]
   1567c:	str	r1, [sp, #8]
   15680:	mov	r1, r9
   15684:	str	r7, [sp, #12]
   15688:	str	r6, [sp, #16]
   1568c:	str	r0, [sp, #28]
   15690:	mov	r0, r5
   15694:	bl	121e0 <__assert_fail@plt+0x125c>
   15698:	cmp	r9, r0
   1569c:	bhi	15708 <__assert_fail@plt+0x4784>
   156a0:	add	r6, r0, #1
   156a4:	movw	r3, #37268	; 0x9194
   156a8:	movt	r3, #2
   156ac:	cmp	r5, r3
   156b0:	str	r6, [r4]
   156b4:	beq	156c0 <__assert_fail@plt+0x473c>
   156b8:	mov	r0, r5
   156bc:	bl	11f5c <__assert_fail@plt+0xfd8>
   156c0:	mov	r0, r6
   156c4:	bl	16248 <__assert_fail@plt+0x52c4>
   156c8:	ldr	lr, [sp, #40]	; 0x28
   156cc:	mov	r1, r6
   156d0:	mov	r3, fp
   156d4:	mov	r2, sl
   156d8:	mov	r5, r0
   156dc:	ldr	r6, [sp, #80]	; 0x50
   156e0:	ldr	ip, [sp, #84]	; 0x54
   156e4:	str	r0, [r4, #4]
   156e8:	str	lr, [sp]
   156ec:	ldr	lr, [sp, #28]
   156f0:	str	lr, [sp, #4]
   156f4:	add	lr, sp, #48	; 0x30
   156f8:	str	r6, [sp, #12]
   156fc:	str	lr, [sp, #8]
   15700:	str	ip, [sp, #16]
   15704:	bl	121e0 <__assert_fail@plt+0x125c>
   15708:	ldr	r3, [sp, #24]
   1570c:	mov	r0, r5
   15710:	str	r3, [r8]
   15714:	add	sp, sp, #92	; 0x5c
   15718:	ldrd	r4, [sp]
   1571c:	ldrd	r6, [sp, #8]
   15720:	ldrd	r8, [sp, #16]
   15724:	ldrd	sl, [sp, #24]
   15728:	add	sp, sp, #32
   1572c:	pop	{pc}		; (ldr pc, [sp], #4)
   15730:	mov	r1, #8
   15734:	mvn	r3, #-2147483648	; 0x80000000
   15738:	ldr	r0, [sp, #28]
   1573c:	str	r1, [sp]
   15740:	add	r1, sp, #36	; 0x24
   15744:	bl	164ec <__assert_fail@plt+0x5568>
   15748:	ldrd	r2, [r5, #8]
   1574c:	mov	r4, r0
   15750:	str	r0, [r5]
   15754:	strd	r2, [r0]
   15758:	b	15628 <__assert_fail@plt+0x46a4>
   1575c:	bl	10f78 <abort@plt>
   15760:	muleq	r2, r4, r2
   15764:	ldr	r3, [pc]	; 1576c <__assert_fail@plt+0x47e8>
   15768:	b	13bcc <__assert_fail@plt+0x2c48>
   1576c:	andeq	r9, r2, ip, lsl #2
   15770:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15774:	movw	r4, #37116	; 0x90fc
   15778:	movt	r4, #2
   1577c:	strd	r6, [sp, #8]
   15780:	strd	r8, [sp, #16]
   15784:	strd	sl, [sp, #24]
   15788:	mov	sl, r0
   1578c:	mov	fp, r1
   15790:	str	lr, [sp, #32]
   15794:	sub	sp, sp, #44	; 0x2c
   15798:	bl	10eac <__errno_location@plt>
   1579c:	ldr	r3, [r0]
   157a0:	mov	r8, r0
   157a4:	ldr	r2, [r4, #4]
   157a8:	ldr	r5, [r4]
   157ac:	str	r3, [sp, #28]
   157b0:	cmp	r2, #0
   157b4:	bgt	15810 <__assert_fail@plt+0x488c>
   157b8:	add	r3, r4, #8
   157bc:	str	r2, [sp, #36]	; 0x24
   157c0:	rsb	r2, r2, #1
   157c4:	cmp	r5, r3
   157c8:	beq	158ec <__assert_fail@plt+0x4968>
   157cc:	mov	r1, #8
   157d0:	mov	r0, r5
   157d4:	mvn	r3, #-2147483648	; 0x80000000
   157d8:	str	r1, [sp]
   157dc:	add	r1, sp, #36	; 0x24
   157e0:	bl	164ec <__assert_fail@plt+0x5568>
   157e4:	mov	r5, r0
   157e8:	str	r0, [r4]
   157ec:	ldr	r0, [r4, #4]
   157f0:	mov	r1, #0
   157f4:	ldr	r2, [sp, #36]	; 0x24
   157f8:	sub	r2, r2, r0
   157fc:	add	r0, r5, r0, lsl #3
   15800:	lsl	r2, r2, #3
   15804:	bl	10ec4 <memset@plt>
   15808:	ldr	r3, [sp, #36]	; 0x24
   1580c:	str	r3, [r4, #4]
   15810:	ldr	ip, [r4, #16]
   15814:	mov	r3, fp
   15818:	mov	r2, sl
   1581c:	ldr	r7, [r4, #20]
   15820:	ldr	r0, [pc, #240]	; 15918 <__assert_fail@plt+0x4994>
   15824:	ldr	r9, [r5]
   15828:	orr	r7, r7, #1
   1582c:	ldr	r6, [r5, #4]
   15830:	str	ip, [sp]
   15834:	ldr	ip, [r4, #56]	; 0x38
   15838:	mov	r1, r9
   1583c:	str	r7, [sp, #4]
   15840:	ldr	lr, [r4, #60]	; 0x3c
   15844:	str	r0, [sp, #8]
   15848:	mov	r0, r6
   1584c:	str	ip, [sp, #12]
   15850:	str	lr, [sp, #16]
   15854:	bl	121e0 <__assert_fail@plt+0x125c>
   15858:	cmp	r9, r0
   1585c:	bhi	158c4 <__assert_fail@plt+0x4940>
   15860:	add	r9, r0, #1
   15864:	movw	r3, #37268	; 0x9194
   15868:	movt	r3, #2
   1586c:	cmp	r6, r3
   15870:	str	r9, [r5]
   15874:	beq	15880 <__assert_fail@plt+0x48fc>
   15878:	mov	r0, r6
   1587c:	bl	11f5c <__assert_fail@plt+0xfd8>
   15880:	mov	r0, r9
   15884:	bl	16248 <__assert_fail@plt+0x52c4>
   15888:	ldr	ip, [r4, #16]
   1588c:	mov	r1, r9
   15890:	mov	r3, fp
   15894:	mov	r2, sl
   15898:	mov	r6, r0
   1589c:	ldr	r9, [r4, #56]	; 0x38
   158a0:	ldr	lr, [r4, #60]	; 0x3c
   158a4:	str	r0, [r5, #4]
   158a8:	str	ip, [sp]
   158ac:	ldr	ip, [pc, #100]	; 15918 <__assert_fail@plt+0x4994>
   158b0:	str	r7, [sp, #4]
   158b4:	str	ip, [sp, #8]
   158b8:	str	r9, [sp, #12]
   158bc:	str	lr, [sp, #16]
   158c0:	bl	121e0 <__assert_fail@plt+0x125c>
   158c4:	ldr	r3, [sp, #28]
   158c8:	mov	r0, r6
   158cc:	str	r3, [r8]
   158d0:	add	sp, sp, #44	; 0x2c
   158d4:	ldrd	r4, [sp]
   158d8:	ldrd	r6, [sp, #8]
   158dc:	ldrd	r8, [sp, #16]
   158e0:	ldrd	sl, [sp, #24]
   158e4:	add	sp, sp, #32
   158e8:	pop	{pc}		; (ldr pc, [sp], #4)
   158ec:	mov	r0, #8
   158f0:	mvn	r3, #-2147483648	; 0x80000000
   158f4:	add	r1, sp, #36	; 0x24
   158f8:	str	r0, [sp]
   158fc:	mov	r0, #0
   15900:	bl	164ec <__assert_fail@plt+0x5568>
   15904:	ldrd	r2, [r4, #8]
   15908:	mov	r5, r0
   1590c:	str	r0, [r4]
   15910:	strd	r2, [r0]
   15914:	b	157ec <__assert_fail@plt+0x4868>
   15918:	andeq	r9, r2, r4, lsl r1
   1591c:	ldr	r3, [pc, #4]	; 15928 <__assert_fail@plt+0x49a4>
   15920:	mvn	r2, #0
   15924:	b	13bcc <__assert_fail@plt+0x2c48>
   15928:	andeq	r9, r2, ip, lsl #2
   1592c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15930:	movw	r4, #37116	; 0x90fc
   15934:	movt	r4, #2
   15938:	strd	r6, [sp, #8]
   1593c:	strd	r8, [sp, #16]
   15940:	strd	sl, [sp, #24]
   15944:	mov	sl, r0
   15948:	str	lr, [sp, #32]
   1594c:	sub	sp, sp, #44	; 0x2c
   15950:	bl	10eac <__errno_location@plt>
   15954:	ldr	r3, [r0]
   15958:	mov	r8, r0
   1595c:	ldr	r2, [r4, #4]
   15960:	ldr	r5, [r4]
   15964:	str	r3, [sp, #28]
   15968:	cmp	r2, #0
   1596c:	bgt	159c8 <__assert_fail@plt+0x4a44>
   15970:	add	r3, r4, #8
   15974:	str	r2, [sp, #36]	; 0x24
   15978:	rsb	r2, r2, #1
   1597c:	cmp	r5, r3
   15980:	beq	15a90 <__assert_fail@plt+0x4b0c>
   15984:	mov	r1, #8
   15988:	mov	r0, r5
   1598c:	mvn	r3, #-2147483648	; 0x80000000
   15990:	str	r1, [sp]
   15994:	add	r1, sp, #36	; 0x24
   15998:	bl	164ec <__assert_fail@plt+0x5568>
   1599c:	mov	r5, r0
   159a0:	str	r0, [r4]
   159a4:	ldr	r0, [r4, #4]
   159a8:	mov	r1, #0
   159ac:	ldr	r2, [sp, #36]	; 0x24
   159b0:	sub	r2, r2, r0
   159b4:	add	r0, r5, r0, lsl #3
   159b8:	lsl	r2, r2, #3
   159bc:	bl	10ec4 <memset@plt>
   159c0:	ldr	r3, [sp, #36]	; 0x24
   159c4:	str	r3, [r4, #4]
   159c8:	ldr	ip, [r4, #16]
   159cc:	mvn	r3, #0
   159d0:	mov	r2, sl
   159d4:	ldr	r7, [r4, #20]
   159d8:	ldr	fp, [pc, #220]	; 15abc <__assert_fail@plt+0x4b38>
   159dc:	ldr	r9, [r5]
   159e0:	orr	r7, r7, #1
   159e4:	ldr	r6, [r5, #4]
   159e8:	str	ip, [sp]
   159ec:	ldr	ip, [r4, #56]	; 0x38
   159f0:	mov	r1, r9
   159f4:	stmib	sp, {r7, fp}
   159f8:	ldr	lr, [r4, #60]	; 0x3c
   159fc:	mov	r0, r6
   15a00:	str	ip, [sp, #12]
   15a04:	str	lr, [sp, #16]
   15a08:	bl	121e0 <__assert_fail@plt+0x125c>
   15a0c:	cmp	r9, r0
   15a10:	bhi	15a68 <__assert_fail@plt+0x4ae4>
   15a14:	add	r9, r0, #1
   15a18:	movw	r3, #37268	; 0x9194
   15a1c:	movt	r3, #2
   15a20:	cmp	r6, r3
   15a24:	str	r9, [r5]
   15a28:	beq	15a34 <__assert_fail@plt+0x4ab0>
   15a2c:	mov	r0, r6
   15a30:	bl	11f5c <__assert_fail@plt+0xfd8>
   15a34:	mov	r0, r9
   15a38:	bl	16248 <__assert_fail@plt+0x52c4>
   15a3c:	ldr	r3, [r4, #16]
   15a40:	mov	r2, sl
   15a44:	mov	r1, r9
   15a48:	mov	r6, r0
   15a4c:	ldr	lr, [r4, #56]	; 0x38
   15a50:	ldr	ip, [r4, #60]	; 0x3c
   15a54:	str	r0, [r5, #4]
   15a58:	stm	sp, {r3, r7, fp, lr}
   15a5c:	mvn	r3, #0
   15a60:	str	ip, [sp, #16]
   15a64:	bl	121e0 <__assert_fail@plt+0x125c>
   15a68:	ldr	r3, [sp, #28]
   15a6c:	mov	r0, r6
   15a70:	str	r3, [r8]
   15a74:	add	sp, sp, #44	; 0x2c
   15a78:	ldrd	r4, [sp]
   15a7c:	ldrd	r6, [sp, #8]
   15a80:	ldrd	r8, [sp, #16]
   15a84:	ldrd	sl, [sp, #24]
   15a88:	add	sp, sp, #32
   15a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a90:	mov	r0, #8
   15a94:	mvn	r3, #-2147483648	; 0x80000000
   15a98:	add	r1, sp, #36	; 0x24
   15a9c:	str	r0, [sp]
   15aa0:	mov	r0, #0
   15aa4:	bl	164ec <__assert_fail@plt+0x5568>
   15aa8:	ldrd	r2, [r4, #8]
   15aac:	mov	r5, r0
   15ab0:	str	r0, [r4]
   15ab4:	strd	r2, [r0]
   15ab8:	b	159a4 <__assert_fail@plt+0x4a20>
   15abc:	andeq	r9, r2, r4, lsl r1
   15ac0:	cmp	r1, #0
   15ac4:	strd	r4, [sp, #-16]!
   15ac8:	mov	ip, r3
   15acc:	str	r6, [sp, #8]
   15ad0:	mov	r4, r0
   15ad4:	str	lr, [sp, #12]
   15ad8:	sub	sp, sp, #32
   15adc:	ldr	r5, [sp, #48]	; 0x30
   15ae0:	ldr	r6, [sp, #52]	; 0x34
   15ae4:	beq	15c28 <__assert_fail@plt+0x4ca4>
   15ae8:	mov	r3, r1
   15aec:	mov	r1, #1
   15af0:	stm	sp, {r2, ip}
   15af4:	movw	r2, #35092	; 0x8914
   15af8:	movt	r2, #1
   15afc:	bl	10ee8 <__fprintf_chk@plt>
   15b00:	mov	r2, #5
   15b04:	movw	r1, #35112	; 0x8928
   15b08:	movt	r1, #1
   15b0c:	mov	r0, #0
   15b10:	bl	10d8c <dcgettext@plt>
   15b14:	movw	ip, #2022	; 0x7e6
   15b18:	mov	r3, r0
   15b1c:	mov	r1, #1
   15b20:	movw	r2, #35840	; 0x8c00
   15b24:	movt	r2, #1
   15b28:	mov	r0, r4
   15b2c:	str	ip, [sp]
   15b30:	bl	10ee8 <__fprintf_chk@plt>
   15b34:	mov	r1, r4
   15b38:	mov	r0, #10
   15b3c:	bl	10d80 <fputc_unlocked@plt>
   15b40:	mov	r2, #5
   15b44:	movw	r1, #35116	; 0x892c
   15b48:	movt	r1, #1
   15b4c:	mov	r0, #0
   15b50:	bl	10d8c <dcgettext@plt>
   15b54:	mov	r2, r0
   15b58:	mov	r1, #1
   15b5c:	movw	r3, #35288	; 0x89d8
   15b60:	movt	r3, #1
   15b64:	mov	r0, r4
   15b68:	bl	10ee8 <__fprintf_chk@plt>
   15b6c:	mov	r1, r4
   15b70:	mov	r0, #10
   15b74:	bl	10d80 <fputc_unlocked@plt>
   15b78:	cmp	r6, #9
   15b7c:	ldrls	pc, [pc, r6, lsl #2]
   15b80:	b	15e94 <__assert_fail@plt+0x4f10>
   15b84:	andeq	r5, r1, r4, lsl ip
   15b88:	andeq	r5, r1, r4, asr #24
   15b8c:	andeq	r5, r1, r0, lsl #25
   15b90:	andeq	r5, r1, r0, asr #25
   15b94:	andeq	r5, r1, r8, lsl #26
   15b98:	andeq	r5, r1, r0, asr #26
   15b9c:	andeq	r5, r1, r8, lsl #27
   15ba0:	ldrdeq	r5, [r1], -ip
   15ba4:	andeq	r5, r1, r4, lsr lr
   15ba8:	andeq	r5, r1, ip, lsr #23
   15bac:	movw	r1, #35592	; 0x8b08
   15bb0:	movt	r1, #1
   15bb4:	mov	r2, #5
   15bb8:	mov	r0, #0
   15bbc:	bl	10d8c <dcgettext@plt>
   15bc0:	ldr	lr, [r5, #4]
   15bc4:	mov	r2, r0
   15bc8:	mov	r1, #1
   15bcc:	mov	r0, r4
   15bd0:	ldr	r3, [r5, #8]
   15bd4:	ldr	ip, [r5, #32]
   15bd8:	str	lr, [sp]
   15bdc:	ldr	lr, [r5, #12]
   15be0:	str	ip, [sp, #28]
   15be4:	ldr	ip, [r5, #28]
   15be8:	str	r3, [sp, #4]
   15bec:	ldr	r3, [r5, #16]
   15bf0:	str	lr, [sp, #8]
   15bf4:	ldr	lr, [r5, #20]
   15bf8:	str	ip, [sp, #24]
   15bfc:	ldr	ip, [r5, #24]
   15c00:	str	r3, [sp, #12]
   15c04:	ldr	r3, [r5]
   15c08:	str	lr, [sp, #16]
   15c0c:	str	ip, [sp, #20]
   15c10:	bl	10ee8 <__fprintf_chk@plt>
   15c14:	add	sp, sp, #32
   15c18:	ldrd	r4, [sp]
   15c1c:	ldr	r6, [sp, #8]
   15c20:	add	sp, sp, #12
   15c24:	pop	{pc}		; (ldr pc, [sp], #4)
   15c28:	mov	r3, r2
   15c2c:	mov	r1, #1
   15c30:	str	ip, [sp]
   15c34:	movw	r2, #35104	; 0x8920
   15c38:	movt	r2, #1
   15c3c:	bl	10ee8 <__fprintf_chk@plt>
   15c40:	b	15b00 <__assert_fail@plt+0x4b7c>
   15c44:	mov	r2, #5
   15c48:	movw	r1, #35324	; 0x89fc
   15c4c:	movt	r1, #1
   15c50:	mov	r0, #0
   15c54:	bl	10d8c <dcgettext@plt>
   15c58:	ldr	r3, [r5]
   15c5c:	mov	r2, r0
   15c60:	mov	r1, #1
   15c64:	mov	r0, r4
   15c68:	add	sp, sp, #32
   15c6c:	ldrd	r4, [sp]
   15c70:	ldr	r6, [sp, #8]
   15c74:	ldr	lr, [sp, #12]
   15c78:	add	sp, sp, #16
   15c7c:	b	10ee8 <__fprintf_chk@plt>
   15c80:	mov	r2, #5
   15c84:	movw	r1, #35340	; 0x8a0c
   15c88:	movt	r1, #1
   15c8c:	mov	r0, #0
   15c90:	bl	10d8c <dcgettext@plt>
   15c94:	ldm	r5, {r3, ip}
   15c98:	mov	r2, r0
   15c9c:	mov	r1, #1
   15ca0:	mov	r0, r4
   15ca4:	str	ip, [sp, #48]	; 0x30
   15ca8:	add	sp, sp, #32
   15cac:	ldrd	r4, [sp]
   15cb0:	ldr	r6, [sp, #8]
   15cb4:	ldr	lr, [sp, #12]
   15cb8:	add	sp, sp, #16
   15cbc:	b	10ee8 <__fprintf_chk@plt>
   15cc0:	mov	r2, #5
   15cc4:	movw	r1, #35364	; 0x8a24
   15cc8:	movt	r1, #1
   15ccc:	mov	r0, #0
   15cd0:	bl	10d8c <dcgettext@plt>
   15cd4:	ldm	r5, {r3, lr}
   15cd8:	mov	r2, r0
   15cdc:	mov	r1, #1
   15ce0:	mov	r0, r4
   15ce4:	ldr	ip, [r5, #8]
   15ce8:	str	lr, [sp, #48]	; 0x30
   15cec:	str	ip, [sp, #52]	; 0x34
   15cf0:	add	sp, sp, #32
   15cf4:	ldrd	r4, [sp]
   15cf8:	ldr	r6, [sp, #8]
   15cfc:	ldr	lr, [sp, #12]
   15d00:	add	sp, sp, #16
   15d04:	b	10ee8 <__fprintf_chk@plt>
   15d08:	mov	r2, #5
   15d0c:	movw	r1, #35392	; 0x8a40
   15d10:	movt	r1, #1
   15d14:	mov	r0, #0
   15d18:	bl	10d8c <dcgettext@plt>
   15d1c:	ldmib	r5, {r3, ip, lr}
   15d20:	mov	r2, r0
   15d24:	mov	r1, #1
   15d28:	mov	r0, r4
   15d2c:	str	r3, [sp]
   15d30:	ldr	r3, [r5]
   15d34:	stmib	sp, {ip, lr}
   15d38:	bl	10ee8 <__fprintf_chk@plt>
   15d3c:	b	15c14 <__assert_fail@plt+0x4c90>
   15d40:	mov	r2, #5
   15d44:	movw	r1, #35424	; 0x8a60
   15d48:	movt	r1, #1
   15d4c:	mov	r0, #0
   15d50:	bl	10d8c <dcgettext@plt>
   15d54:	ldmib	r5, {ip, lr}
   15d58:	mov	r2, r0
   15d5c:	mov	r1, #1
   15d60:	mov	r0, r4
   15d64:	ldr	r3, [r5, #16]
   15d68:	str	ip, [sp]
   15d6c:	ldr	ip, [r5, #12]
   15d70:	str	r3, [sp, #12]
   15d74:	ldr	r3, [r5]
   15d78:	str	lr, [sp, #4]
   15d7c:	str	ip, [sp, #8]
   15d80:	bl	10ee8 <__fprintf_chk@plt>
   15d84:	b	15c14 <__assert_fail@plt+0x4c90>
   15d88:	mov	r2, #5
   15d8c:	movw	r1, #35460	; 0x8a84
   15d90:	movt	r1, #1
   15d94:	mov	r0, #0
   15d98:	bl	10d8c <dcgettext@plt>
   15d9c:	ldr	lr, [r5, #4]
   15da0:	mov	r2, r0
   15da4:	mov	r1, #1
   15da8:	mov	r0, r4
   15dac:	ldr	r3, [r5, #8]
   15db0:	ldr	ip, [r5, #20]
   15db4:	str	lr, [sp]
   15db8:	ldr	lr, [r5, #12]
   15dbc:	str	ip, [sp, #16]
   15dc0:	ldr	ip, [r5, #16]
   15dc4:	str	r3, [sp, #4]
   15dc8:	ldr	r3, [r5]
   15dcc:	str	lr, [sp, #8]
   15dd0:	str	ip, [sp, #12]
   15dd4:	bl	10ee8 <__fprintf_chk@plt>
   15dd8:	b	15c14 <__assert_fail@plt+0x4c90>
   15ddc:	mov	r2, #5
   15de0:	movw	r1, #35500	; 0x8aac
   15de4:	movt	r1, #1
   15de8:	mov	r0, #0
   15dec:	bl	10d8c <dcgettext@plt>
   15df0:	ldmib	r5, {r3, ip}
   15df4:	mov	r2, r0
   15df8:	mov	r1, #1
   15dfc:	mov	r0, r4
   15e00:	ldr	lr, [r5, #24]
   15e04:	str	r3, [sp]
   15e08:	ldr	r3, [r5, #12]
   15e0c:	str	lr, [sp, #20]
   15e10:	ldr	lr, [r5, #20]
   15e14:	str	ip, [sp, #4]
   15e18:	ldr	ip, [r5, #16]
   15e1c:	str	r3, [sp, #8]
   15e20:	ldr	r3, [r5]
   15e24:	str	ip, [sp, #12]
   15e28:	str	lr, [sp, #16]
   15e2c:	bl	10ee8 <__fprintf_chk@plt>
   15e30:	b	15c14 <__assert_fail@plt+0x4c90>
   15e34:	mov	r2, #5
   15e38:	movw	r1, #35544	; 0x8ad8
   15e3c:	movt	r1, #1
   15e40:	mov	r0, #0
   15e44:	bl	10d8c <dcgettext@plt>
   15e48:	ldmib	r5, {ip, lr}
   15e4c:	mov	r2, r0
   15e50:	mov	r1, #1
   15e54:	mov	r0, r4
   15e58:	ldr	r3, [r5, #28]
   15e5c:	str	ip, [sp]
   15e60:	ldr	ip, [r5, #12]
   15e64:	str	r3, [sp, #24]
   15e68:	ldr	r3, [r5, #24]
   15e6c:	str	lr, [sp, #4]
   15e70:	ldr	lr, [r5, #16]
   15e74:	str	ip, [sp, #8]
   15e78:	ldr	ip, [r5, #20]
   15e7c:	str	r3, [sp, #20]
   15e80:	ldr	r3, [r5]
   15e84:	str	lr, [sp, #12]
   15e88:	str	ip, [sp, #16]
   15e8c:	bl	10ee8 <__fprintf_chk@plt>
   15e90:	b	15c14 <__assert_fail@plt+0x4c90>
   15e94:	movw	r1, #35644	; 0x8b3c
   15e98:	movt	r1, #1
   15e9c:	b	15bb4 <__assert_fail@plt+0x4c30>
   15ea0:	strd	r4, [sp, #-12]!
   15ea4:	str	lr, [sp, #8]
   15ea8:	sub	sp, sp, #12
   15eac:	ldr	r5, [sp, #24]
   15eb0:	ldr	ip, [r5]
   15eb4:	cmp	ip, #0
   15eb8:	beq	15ed4 <__assert_fail@plt+0x4f50>
   15ebc:	mov	lr, r5
   15ec0:	mov	ip, #0
   15ec4:	ldr	r4, [lr, #4]!
   15ec8:	add	ip, ip, #1
   15ecc:	cmp	r4, #0
   15ed0:	bne	15ec4 <__assert_fail@plt+0x4f40>
   15ed4:	stm	sp, {r5, ip}
   15ed8:	bl	15ac0 <__assert_fail@plt+0x4b3c>
   15edc:	add	sp, sp, #12
   15ee0:	ldrd	r4, [sp]
   15ee4:	add	sp, sp, #8
   15ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   15eec:	push	{lr}		; (str lr, [sp, #-4]!)
   15ef0:	sub	sp, sp, #52	; 0x34
   15ef4:	ldr	ip, [sp, #56]	; 0x38
   15ef8:	ldr	lr, [ip]
   15efc:	cmp	lr, #0
   15f00:	str	lr, [sp, #8]
   15f04:	beq	15f9c <__assert_fail@plt+0x5018>
   15f08:	ldr	lr, [ip, #4]
   15f0c:	cmp	lr, #0
   15f10:	str	lr, [sp, #12]
   15f14:	beq	15fb0 <__assert_fail@plt+0x502c>
   15f18:	ldr	lr, [ip, #8]
   15f1c:	cmp	lr, #0
   15f20:	str	lr, [sp, #16]
   15f24:	beq	15fb8 <__assert_fail@plt+0x5034>
   15f28:	ldr	lr, [ip, #12]
   15f2c:	cmp	lr, #0
   15f30:	str	lr, [sp, #20]
   15f34:	beq	15fc0 <__assert_fail@plt+0x503c>
   15f38:	ldr	lr, [ip, #16]
   15f3c:	cmp	lr, #0
   15f40:	str	lr, [sp, #24]
   15f44:	beq	15fc8 <__assert_fail@plt+0x5044>
   15f48:	ldr	lr, [ip, #20]
   15f4c:	cmp	lr, #0
   15f50:	str	lr, [sp, #28]
   15f54:	beq	15fd0 <__assert_fail@plt+0x504c>
   15f58:	ldr	lr, [ip, #24]
   15f5c:	cmp	lr, #0
   15f60:	str	lr, [sp, #32]
   15f64:	beq	15fd8 <__assert_fail@plt+0x5054>
   15f68:	ldr	lr, [ip, #28]
   15f6c:	cmp	lr, #0
   15f70:	str	lr, [sp, #36]	; 0x24
   15f74:	beq	15fe0 <__assert_fail@plt+0x505c>
   15f78:	ldr	lr, [ip, #32]
   15f7c:	cmp	lr, #0
   15f80:	str	lr, [sp, #40]	; 0x28
   15f84:	beq	15fe8 <__assert_fail@plt+0x5064>
   15f88:	ldr	ip, [ip, #36]	; 0x24
   15f8c:	cmp	ip, #0
   15f90:	str	ip, [sp, #44]	; 0x2c
   15f94:	movne	lr, #10
   15f98:	moveq	lr, #9
   15f9c:	add	ip, sp, #8
   15fa0:	stm	sp, {ip, lr}
   15fa4:	bl	15ac0 <__assert_fail@plt+0x4b3c>
   15fa8:	add	sp, sp, #52	; 0x34
   15fac:	pop	{pc}		; (ldr pc, [sp], #4)
   15fb0:	mov	lr, #1
   15fb4:	b	15f9c <__assert_fail@plt+0x5018>
   15fb8:	mov	lr, #2
   15fbc:	b	15f9c <__assert_fail@plt+0x5018>
   15fc0:	mov	lr, #3
   15fc4:	b	15f9c <__assert_fail@plt+0x5018>
   15fc8:	mov	lr, #4
   15fcc:	b	15f9c <__assert_fail@plt+0x5018>
   15fd0:	mov	lr, #5
   15fd4:	b	15f9c <__assert_fail@plt+0x5018>
   15fd8:	mov	lr, #6
   15fdc:	b	15f9c <__assert_fail@plt+0x5018>
   15fe0:	mov	lr, #7
   15fe4:	b	15f9c <__assert_fail@plt+0x5018>
   15fe8:	mov	lr, #8
   15fec:	b	15f9c <__assert_fail@plt+0x5018>
   15ff0:	push	{r3}		; (str r3, [sp, #-4]!)
   15ff4:	push	{lr}		; (str lr, [sp, #-4]!)
   15ff8:	sub	sp, sp, #56	; 0x38
   15ffc:	ldr	ip, [sp, #64]	; 0x40
   16000:	add	r3, sp, #64	; 0x40
   16004:	str	r3, [sp, #12]
   16008:	cmp	ip, #0
   1600c:	str	ip, [sp, #16]
   16010:	beq	160a8 <__assert_fail@plt+0x5124>
   16014:	ldr	ip, [sp, #68]	; 0x44
   16018:	cmp	ip, #0
   1601c:	str	ip, [sp, #20]
   16020:	beq	160cc <__assert_fail@plt+0x5148>
   16024:	ldr	ip, [sp, #72]	; 0x48
   16028:	cmp	ip, #0
   1602c:	str	ip, [sp, #24]
   16030:	beq	160d4 <__assert_fail@plt+0x5150>
   16034:	ldr	ip, [sp, #76]	; 0x4c
   16038:	cmp	ip, #0
   1603c:	str	ip, [sp, #28]
   16040:	beq	160dc <__assert_fail@plt+0x5158>
   16044:	ldr	ip, [sp, #80]	; 0x50
   16048:	cmp	ip, #0
   1604c:	str	ip, [sp, #32]
   16050:	beq	160e4 <__assert_fail@plt+0x5160>
   16054:	ldr	ip, [sp, #84]	; 0x54
   16058:	cmp	ip, #0
   1605c:	str	ip, [sp, #36]	; 0x24
   16060:	beq	160ec <__assert_fail@plt+0x5168>
   16064:	ldr	ip, [sp, #88]	; 0x58
   16068:	cmp	ip, #0
   1606c:	str	ip, [sp, #40]	; 0x28
   16070:	beq	160f4 <__assert_fail@plt+0x5170>
   16074:	ldr	ip, [sp, #92]	; 0x5c
   16078:	cmp	ip, #0
   1607c:	str	ip, [sp, #44]	; 0x2c
   16080:	beq	160fc <__assert_fail@plt+0x5178>
   16084:	ldr	ip, [sp, #96]	; 0x60
   16088:	cmp	ip, #0
   1608c:	str	ip, [sp, #48]	; 0x30
   16090:	beq	16104 <__assert_fail@plt+0x5180>
   16094:	ldr	r3, [sp, #100]	; 0x64
   16098:	cmp	r3, #0
   1609c:	str	r3, [sp, #52]	; 0x34
   160a0:	movne	ip, #10
   160a4:	moveq	ip, #9
   160a8:	ldr	r3, [sp, #60]	; 0x3c
   160ac:	add	lr, sp, #16
   160b0:	str	lr, [sp]
   160b4:	str	ip, [sp, #4]
   160b8:	bl	15ac0 <__assert_fail@plt+0x4b3c>
   160bc:	add	sp, sp, #56	; 0x38
   160c0:	pop	{lr}		; (ldr lr, [sp], #4)
   160c4:	add	sp, sp, #4
   160c8:	bx	lr
   160cc:	mov	ip, #1
   160d0:	b	160a8 <__assert_fail@plt+0x5124>
   160d4:	mov	ip, #2
   160d8:	b	160a8 <__assert_fail@plt+0x5124>
   160dc:	mov	ip, #3
   160e0:	b	160a8 <__assert_fail@plt+0x5124>
   160e4:	mov	ip, #4
   160e8:	b	160a8 <__assert_fail@plt+0x5124>
   160ec:	mov	ip, #5
   160f0:	b	160a8 <__assert_fail@plt+0x5124>
   160f4:	mov	ip, #6
   160f8:	b	160a8 <__assert_fail@plt+0x5124>
   160fc:	mov	ip, #7
   16100:	b	160a8 <__assert_fail@plt+0x5124>
   16104:	mov	ip, #8
   16108:	b	160a8 <__assert_fail@plt+0x5124>
   1610c:	movw	r3, #37204	; 0x9154
   16110:	movt	r3, #2
   16114:	str	r4, [sp, #-8]!
   16118:	mov	r0, #10
   1611c:	ldr	r1, [r3]
   16120:	str	lr, [sp, #4]
   16124:	bl	10d80 <fputc_unlocked@plt>
   16128:	mov	r2, #5
   1612c:	movw	r1, #35704	; 0x8b78
   16130:	movt	r1, #1
   16134:	mov	r0, #0
   16138:	bl	10d8c <dcgettext@plt>
   1613c:	mov	r1, r0
   16140:	movw	r2, #35724	; 0x8b8c
   16144:	movt	r2, #1
   16148:	mov	r0, #1
   1614c:	bl	10ed0 <__printf_chk@plt>
   16150:	mov	r2, #5
   16154:	movw	r1, #35748	; 0x8ba4
   16158:	movt	r1, #1
   1615c:	mov	r0, #0
   16160:	bl	10d8c <dcgettext@plt>
   16164:	mov	r1, r0
   16168:	movw	r3, #33896	; 0x8468
   1616c:	movt	r3, #1
   16170:	movw	r2, #33936	; 0x8490
   16174:	movt	r2, #1
   16178:	mov	r0, #1
   1617c:	bl	10ed0 <__printf_chk@plt>
   16180:	mov	r2, #5
   16184:	movw	r1, #35768	; 0x8bb8
   16188:	movt	r1, #1
   1618c:	mov	r0, #0
   16190:	bl	10d8c <dcgettext@plt>
   16194:	mov	r1, r0
   16198:	movw	r2, #35808	; 0x8be0
   1619c:	movt	r2, #1
   161a0:	mov	r0, #1
   161a4:	ldr	r4, [sp]
   161a8:	ldr	lr, [sp, #4]
   161ac:	add	sp, sp, #8
   161b0:	b	10ed0 <__printf_chk@plt>
   161b4:	strd	r4, [sp, #-16]!
   161b8:	mov	r4, r0
   161bc:	mov	r5, r2
   161c0:	str	r6, [sp, #8]
   161c4:	mov	r6, r1
   161c8:	str	lr, [sp, #12]
   161cc:	bl	17cac <__assert_fail@plt+0x6d28>
   161d0:	cmp	r0, #0
   161d4:	beq	161e8 <__assert_fail@plt+0x5264>
   161d8:	ldrd	r4, [sp]
   161dc:	ldr	r6, [sp, #8]
   161e0:	add	sp, sp, #12
   161e4:	pop	{pc}		; (ldr pc, [sp], #4)
   161e8:	cmp	r4, #0
   161ec:	beq	161fc <__assert_fail@plt+0x5278>
   161f0:	cmp	r6, #0
   161f4:	cmpne	r5, #0
   161f8:	beq	161d8 <__assert_fail@plt+0x5254>
   161fc:	bl	167b8 <__assert_fail@plt+0x5834>
   16200:	str	r4, [sp, #-8]!
   16204:	str	lr, [sp, #4]
   16208:	bl	17604 <__assert_fail@plt+0x6680>
   1620c:	cmp	r0, #0
   16210:	beq	16220 <__assert_fail@plt+0x529c>
   16214:	ldr	r4, [sp]
   16218:	add	sp, sp, #4
   1621c:	pop	{pc}		; (ldr pc, [sp], #4)
   16220:	bl	167b8 <__assert_fail@plt+0x5834>
   16224:	str	r4, [sp, #-8]!
   16228:	str	lr, [sp, #4]
   1622c:	bl	17604 <__assert_fail@plt+0x6680>
   16230:	cmp	r0, #0
   16234:	beq	16244 <__assert_fail@plt+0x52c0>
   16238:	ldr	r4, [sp]
   1623c:	add	sp, sp, #4
   16240:	pop	{pc}		; (ldr pc, [sp], #4)
   16244:	bl	167b8 <__assert_fail@plt+0x5834>
   16248:	str	r4, [sp, #-8]!
   1624c:	str	lr, [sp, #4]
   16250:	bl	17604 <__assert_fail@plt+0x6680>
   16254:	cmp	r0, #0
   16258:	beq	16268 <__assert_fail@plt+0x52e4>
   1625c:	ldr	r4, [sp]
   16260:	add	sp, sp, #4
   16264:	pop	{pc}		; (ldr pc, [sp], #4)
   16268:	bl	167b8 <__assert_fail@plt+0x5834>
   1626c:	strd	r4, [sp, #-16]!
   16270:	mov	r5, r0
   16274:	mov	r4, r1
   16278:	str	r6, [sp, #8]
   1627c:	str	lr, [sp, #12]
   16280:	bl	17640 <__assert_fail@plt+0x66bc>
   16284:	cmp	r0, #0
   16288:	beq	1629c <__assert_fail@plt+0x5318>
   1628c:	ldrd	r4, [sp]
   16290:	ldr	r6, [sp, #8]
   16294:	add	sp, sp, #12
   16298:	pop	{pc}		; (ldr pc, [sp], #4)
   1629c:	adds	r4, r4, #0
   162a0:	movne	r4, #1
   162a4:	cmp	r5, #0
   162a8:	moveq	r4, #1
   162ac:	cmp	r4, #0
   162b0:	beq	1628c <__assert_fail@plt+0x5308>
   162b4:	bl	167b8 <__assert_fail@plt+0x5834>
   162b8:	cmp	r1, #0
   162bc:	orreq	r1, r1, #1
   162c0:	str	r4, [sp, #-8]!
   162c4:	str	lr, [sp, #4]
   162c8:	bl	17640 <__assert_fail@plt+0x66bc>
   162cc:	cmp	r0, #0
   162d0:	beq	162e0 <__assert_fail@plt+0x535c>
   162d4:	ldr	r4, [sp]
   162d8:	add	sp, sp, #4
   162dc:	pop	{pc}		; (ldr pc, [sp], #4)
   162e0:	bl	167b8 <__assert_fail@plt+0x5834>
   162e4:	strd	r4, [sp, #-16]!
   162e8:	mov	r4, r0
   162ec:	mov	r5, r2
   162f0:	str	r6, [sp, #8]
   162f4:	mov	r6, r1
   162f8:	str	lr, [sp, #12]
   162fc:	bl	17cac <__assert_fail@plt+0x6d28>
   16300:	cmp	r0, #0
   16304:	beq	16318 <__assert_fail@plt+0x5394>
   16308:	ldrd	r4, [sp]
   1630c:	ldr	r6, [sp, #8]
   16310:	add	sp, sp, #12
   16314:	pop	{pc}		; (ldr pc, [sp], #4)
   16318:	cmp	r4, #0
   1631c:	beq	1632c <__assert_fail@plt+0x53a8>
   16320:	cmp	r6, #0
   16324:	cmpne	r5, #0
   16328:	beq	16308 <__assert_fail@plt+0x5384>
   1632c:	bl	167b8 <__assert_fail@plt+0x5834>
   16330:	cmp	r2, #0
   16334:	cmpne	r1, #0
   16338:	str	r4, [sp, #-8]!
   1633c:	moveq	r2, #1
   16340:	str	lr, [sp, #4]
   16344:	moveq	r1, r2
   16348:	bl	17cac <__assert_fail@plt+0x6d28>
   1634c:	cmp	r0, #0
   16350:	beq	16360 <__assert_fail@plt+0x53dc>
   16354:	ldr	r4, [sp]
   16358:	add	sp, sp, #4
   1635c:	pop	{pc}		; (ldr pc, [sp], #4)
   16360:	bl	167b8 <__assert_fail@plt+0x5834>
   16364:	mov	r2, r1
   16368:	mov	r1, r0
   1636c:	str	r4, [sp, #-8]!
   16370:	mov	r0, #0
   16374:	str	lr, [sp, #4]
   16378:	bl	17cac <__assert_fail@plt+0x6d28>
   1637c:	cmp	r0, #0
   16380:	beq	16390 <__assert_fail@plt+0x540c>
   16384:	ldr	r4, [sp]
   16388:	add	sp, sp, #4
   1638c:	pop	{pc}		; (ldr pc, [sp], #4)
   16390:	bl	167b8 <__assert_fail@plt+0x5834>
   16394:	cmp	r1, #0
   16398:	cmpne	r0, #0
   1639c:	str	r4, [sp, #-8]!
   163a0:	moveq	r2, #1
   163a4:	movne	r2, r1
   163a8:	str	lr, [sp, #4]
   163ac:	movne	r1, r0
   163b0:	moveq	r1, r2
   163b4:	mov	r0, #0
   163b8:	bl	17cac <__assert_fail@plt+0x6d28>
   163bc:	cmp	r0, #0
   163c0:	beq	163d0 <__assert_fail@plt+0x544c>
   163c4:	ldr	r4, [sp]
   163c8:	add	sp, sp, #4
   163cc:	pop	{pc}		; (ldr pc, [sp], #4)
   163d0:	bl	167b8 <__assert_fail@plt+0x5834>
   163d4:	cmp	r0, #0
   163d8:	strd	r4, [sp, #-16]!
   163dc:	mov	r5, r1
   163e0:	ldr	r4, [r1]
   163e4:	str	r6, [sp, #8]
   163e8:	str	lr, [sp, #12]
   163ec:	beq	16434 <__assert_fail@plt+0x54b0>
   163f0:	lsr	r3, r4, #1
   163f4:	add	r3, r3, #1
   163f8:	adds	r4, r4, r3
   163fc:	bcs	16430 <__assert_fail@plt+0x54ac>
   16400:	mov	r2, #1
   16404:	mov	r1, r4
   16408:	bl	17cac <__assert_fail@plt+0x6d28>
   1640c:	cmp	r0, #0
   16410:	beq	16428 <__assert_fail@plt+0x54a4>
   16414:	ldr	r6, [sp, #8]
   16418:	str	r4, [r5]
   1641c:	ldrd	r4, [sp]
   16420:	add	sp, sp, #12
   16424:	pop	{pc}		; (ldr pc, [sp], #4)
   16428:	cmp	r4, #0
   1642c:	beq	16414 <__assert_fail@plt+0x5490>
   16430:	bl	167b8 <__assert_fail@plt+0x5834>
   16434:	cmp	r4, #0
   16438:	mov	r2, #1
   1643c:	moveq	r4, #64	; 0x40
   16440:	mov	r1, r4
   16444:	bl	17cac <__assert_fail@plt+0x6d28>
   16448:	cmp	r0, #0
   1644c:	bne	16414 <__assert_fail@plt+0x5490>
   16450:	b	16430 <__assert_fail@plt+0x54ac>
   16454:	cmp	r0, #0
   16458:	strd	r4, [sp, #-16]!
   1645c:	mov	r5, r1
   16460:	ldr	r4, [r1]
   16464:	str	r6, [sp, #8]
   16468:	mov	r6, r2
   1646c:	str	lr, [sp, #12]
   16470:	beq	164b8 <__assert_fail@plt+0x5534>
   16474:	lsr	r3, r4, #1
   16478:	add	r3, r3, #1
   1647c:	adds	r4, r4, r3
   16480:	bcs	164b4 <__assert_fail@plt+0x5530>
   16484:	mov	r1, r4
   16488:	bl	17cac <__assert_fail@plt+0x6d28>
   1648c:	cmp	r0, #0
   16490:	beq	164a8 <__assert_fail@plt+0x5524>
   16494:	ldr	r6, [sp, #8]
   16498:	str	r4, [r5]
   1649c:	ldrd	r4, [sp]
   164a0:	add	sp, sp, #12
   164a4:	pop	{pc}		; (ldr pc, [sp], #4)
   164a8:	cmp	r4, #0
   164ac:	cmpne	r6, #0
   164b0:	beq	16494 <__assert_fail@plt+0x5510>
   164b4:	bl	167b8 <__assert_fail@plt+0x5834>
   164b8:	cmp	r4, #0
   164bc:	bne	164d0 <__assert_fail@plt+0x554c>
   164c0:	mov	r4, #64	; 0x40
   164c4:	udiv	r4, r4, r2
   164c8:	cmp	r2, #64	; 0x40
   164cc:	addhi	r4, r4, #1
   164d0:	mov	r2, r6
   164d4:	mov	r1, r4
   164d8:	mov	r0, #0
   164dc:	bl	17cac <__assert_fail@plt+0x6d28>
   164e0:	cmp	r0, #0
   164e4:	bne	16494 <__assert_fail@plt+0x5510>
   164e8:	b	164b4 <__assert_fail@plt+0x5530>
   164ec:	ldr	ip, [r1]
   164f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   164f4:	strd	r6, [sp, #8]
   164f8:	mov	r7, r1
   164fc:	mov	r6, r0
   16500:	str	r8, [sp, #16]
   16504:	mvn	r8, r3
   16508:	lsr	r8, r8, #31
   1650c:	str	lr, [sp, #20]
   16510:	asr	r1, ip, #1
   16514:	ldr	lr, [sp, #24]
   16518:	adds	r4, ip, r1
   1651c:	mvnvs	r4, #-2147483648	; 0x80000000
   16520:	cmp	r3, r4
   16524:	movge	r1, #0
   16528:	andlt	r1, r8, #1
   1652c:	cmp	r1, #0
   16530:	movne	r4, r3
   16534:	smull	r0, r1, r4, lr
   16538:	cmp	r1, r0, asr #31
   1653c:	bne	165ec <__assert_fail@plt+0x5668>
   16540:	cmp	r0, #63	; 0x3f
   16544:	mov	r5, r0
   16548:	ble	165b8 <__assert_fail@plt+0x5634>
   1654c:	cmp	r6, #0
   16550:	sub	r1, r4, ip
   16554:	streq	r6, [r7]
   16558:	cmp	r1, r2
   1655c:	bge	1658c <__assert_fail@plt+0x5608>
   16560:	adds	r4, ip, r2
   16564:	bvs	165e8 <__assert_fail@plt+0x5664>
   16568:	cmp	r4, r3
   1656c:	movle	r3, #0
   16570:	andgt	r3, r8, #1
   16574:	cmp	r3, #0
   16578:	bne	165e8 <__assert_fail@plt+0x5664>
   1657c:	smull	r0, r1, r4, lr
   16580:	cmp	r1, r0, asr #31
   16584:	mov	r5, r0
   16588:	bne	165e8 <__assert_fail@plt+0x5664>
   1658c:	mov	r1, r5
   16590:	mov	r0, r6
   16594:	bl	17640 <__assert_fail@plt+0x66bc>
   16598:	cmp	r0, #0
   1659c:	beq	165cc <__assert_fail@plt+0x5648>
   165a0:	ldr	r8, [sp, #16]
   165a4:	str	r4, [r7]
   165a8:	ldrd	r4, [sp]
   165ac:	ldrd	r6, [sp, #8]
   165b0:	add	sp, sp, #20
   165b4:	pop	{pc}		; (ldr pc, [sp], #4)
   165b8:	mov	r0, #64	; 0x40
   165bc:	sdiv	r4, r0, lr
   165c0:	mls	r5, lr, r4, r0
   165c4:	sub	r5, r0, r5
   165c8:	b	1654c <__assert_fail@plt+0x55c8>
   165cc:	adds	r5, r5, #0
   165d0:	movne	r5, #1
   165d4:	cmp	r6, #0
   165d8:	movne	r6, r5
   165dc:	moveq	r6, #1
   165e0:	cmp	r6, #0
   165e4:	beq	165a0 <__assert_fail@plt+0x561c>
   165e8:	bl	167b8 <__assert_fail@plt+0x5834>
   165ec:	mvn	r0, #-2147483648	; 0x80000000
   165f0:	b	165bc <__assert_fail@plt+0x5638>
   165f4:	mov	r1, #1
   165f8:	str	r4, [sp, #-8]!
   165fc:	str	lr, [sp, #4]
   16600:	bl	17590 <__assert_fail@plt+0x660c>
   16604:	cmp	r0, #0
   16608:	beq	16618 <__assert_fail@plt+0x5694>
   1660c:	ldr	r4, [sp]
   16610:	add	sp, sp, #4
   16614:	pop	{pc}		; (ldr pc, [sp], #4)
   16618:	bl	167b8 <__assert_fail@plt+0x5834>
   1661c:	mov	r1, #1
   16620:	str	r4, [sp, #-8]!
   16624:	str	lr, [sp, #4]
   16628:	bl	17590 <__assert_fail@plt+0x660c>
   1662c:	cmp	r0, #0
   16630:	beq	16640 <__assert_fail@plt+0x56bc>
   16634:	ldr	r4, [sp]
   16638:	add	sp, sp, #4
   1663c:	pop	{pc}		; (ldr pc, [sp], #4)
   16640:	bl	167b8 <__assert_fail@plt+0x5834>
   16644:	str	r4, [sp, #-8]!
   16648:	str	lr, [sp, #4]
   1664c:	bl	17590 <__assert_fail@plt+0x660c>
   16650:	cmp	r0, #0
   16654:	beq	16664 <__assert_fail@plt+0x56e0>
   16658:	ldr	r4, [sp]
   1665c:	add	sp, sp, #4
   16660:	pop	{pc}		; (ldr pc, [sp], #4)
   16664:	bl	167b8 <__assert_fail@plt+0x5834>
   16668:	str	r4, [sp, #-8]!
   1666c:	str	lr, [sp, #4]
   16670:	bl	17590 <__assert_fail@plt+0x660c>
   16674:	cmp	r0, #0
   16678:	beq	16688 <__assert_fail@plt+0x5704>
   1667c:	ldr	r4, [sp]
   16680:	add	sp, sp, #4
   16684:	pop	{pc}		; (ldr pc, [sp], #4)
   16688:	bl	167b8 <__assert_fail@plt+0x5834>
   1668c:	strd	r4, [sp, #-16]!
   16690:	mov	r4, r1
   16694:	str	r6, [sp, #8]
   16698:	mov	r6, r0
   1669c:	mov	r0, r1
   166a0:	str	lr, [sp, #12]
   166a4:	bl	17604 <__assert_fail@plt+0x6680>
   166a8:	subs	r5, r0, #0
   166ac:	beq	166d0 <__assert_fail@plt+0x574c>
   166b0:	mov	r2, r4
   166b4:	mov	r1, r6
   166b8:	bl	10d44 <memcpy@plt>
   166bc:	mov	r0, r5
   166c0:	ldrd	r4, [sp]
   166c4:	ldr	r6, [sp, #8]
   166c8:	add	sp, sp, #12
   166cc:	pop	{pc}		; (ldr pc, [sp], #4)
   166d0:	bl	167b8 <__assert_fail@plt+0x5834>
   166d4:	strd	r4, [sp, #-16]!
   166d8:	mov	r4, r1
   166dc:	str	r6, [sp, #8]
   166e0:	mov	r6, r0
   166e4:	mov	r0, r1
   166e8:	str	lr, [sp, #12]
   166ec:	bl	17604 <__assert_fail@plt+0x6680>
   166f0:	subs	r5, r0, #0
   166f4:	beq	16718 <__assert_fail@plt+0x5794>
   166f8:	mov	r2, r4
   166fc:	mov	r1, r6
   16700:	bl	10d44 <memcpy@plt>
   16704:	mov	r0, r5
   16708:	ldrd	r4, [sp]
   1670c:	ldr	r6, [sp, #8]
   16710:	add	sp, sp, #12
   16714:	pop	{pc}		; (ldr pc, [sp], #4)
   16718:	bl	167b8 <__assert_fail@plt+0x5834>
   1671c:	strd	r4, [sp, #-16]!
   16720:	mov	r4, r1
   16724:	str	r6, [sp, #8]
   16728:	mov	r6, r0
   1672c:	add	r0, r1, #1
   16730:	str	lr, [sp, #12]
   16734:	bl	17604 <__assert_fail@plt+0x6680>
   16738:	subs	r5, r0, #0
   1673c:	beq	16768 <__assert_fail@plt+0x57e4>
   16740:	mov	r3, #0
   16744:	mov	r1, r6
   16748:	mov	r2, r4
   1674c:	strb	r3, [r5, r4]
   16750:	bl	10d44 <memcpy@plt>
   16754:	mov	r0, r5
   16758:	ldrd	r4, [sp]
   1675c:	ldr	r6, [sp, #8]
   16760:	add	sp, sp, #12
   16764:	pop	{pc}		; (ldr pc, [sp], #4)
   16768:	bl	167b8 <__assert_fail@plt+0x5834>
   1676c:	strd	r4, [sp, #-16]!
   16770:	str	r6, [sp, #8]
   16774:	mov	r6, r0
   16778:	str	lr, [sp, #12]
   1677c:	bl	10e94 <strlen@plt>
   16780:	add	r4, r0, #1
   16784:	mov	r0, r4
   16788:	bl	17604 <__assert_fail@plt+0x6680>
   1678c:	subs	r5, r0, #0
   16790:	beq	167b4 <__assert_fail@plt+0x5830>
   16794:	mov	r2, r4
   16798:	mov	r1, r6
   1679c:	bl	10d44 <memcpy@plt>
   167a0:	mov	r0, r5
   167a4:	ldrd	r4, [sp]
   167a8:	ldr	r6, [sp, #8]
   167ac:	add	sp, sp, #12
   167b0:	pop	{pc}		; (ldr pc, [sp], #4)
   167b4:	bl	167b8 <__assert_fail@plt+0x5834>
   167b8:	movw	r3, #37112	; 0x90f8
   167bc:	movt	r3, #2
   167c0:	str	r4, [sp, #-8]!
   167c4:	ldr	r4, [r3]
   167c8:	mov	r2, #5
   167cc:	movw	r1, #35888	; 0x8c30
   167d0:	movt	r1, #1
   167d4:	mov	r0, #0
   167d8:	str	lr, [sp, #4]
   167dc:	bl	10d8c <dcgettext@plt>
   167e0:	mov	r3, r0
   167e4:	movw	r2, #34808	; 0x87f8
   167e8:	movt	r2, #1
   167ec:	mov	r1, #0
   167f0:	mov	r0, r4
   167f4:	bl	10e04 <error@plt>
   167f8:	bl	10f78 <abort@plt>
   167fc:	str	r4, [sp, #-8]!
   16800:	str	lr, [sp, #4]
   16804:	bl	176bc <__assert_fail@plt+0x6738>
   16808:	subs	r4, r0, #0
   1680c:	beq	16820 <__assert_fail@plt+0x589c>
   16810:	mov	r0, r4
   16814:	ldr	r4, [sp]
   16818:	add	sp, sp, #4
   1681c:	pop	{pc}		; (ldr pc, [sp], #4)
   16820:	bl	10eac <__errno_location@plt>
   16824:	ldr	r3, [r0]
   16828:	cmp	r3, #12
   1682c:	bne	16810 <__assert_fail@plt+0x588c>
   16830:	bl	167b8 <__assert_fail@plt+0x5834>
   16834:	cmp	r2, #36	; 0x24
   16838:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1683c:	strd	r6, [sp, #8]
   16840:	strd	r8, [sp, #16]
   16844:	strd	sl, [sp, #24]
   16848:	str	lr, [sp, #32]
   1684c:	sub	sp, sp, #36	; 0x24
   16850:	bhi	174c8 <__assert_fail@plt+0x6544>
   16854:	cmp	r1, #0
   16858:	mov	r6, r2
   1685c:	mov	r5, r1
   16860:	mov	sl, r0
   16864:	addeq	r5, sp, #28
   16868:	mov	r9, r3
   1686c:	bl	10eac <__errno_location@plt>
   16870:	mov	r3, #0
   16874:	mov	fp, r0
   16878:	str	r3, [r0]
   1687c:	ldrb	r4, [sl]
   16880:	bl	10e7c <__ctype_b_loc@plt>
   16884:	ldr	r2, [r0]
   16888:	lsl	r3, r4, #1
   1688c:	ldrh	r3, [r2, r3]
   16890:	tst	r3, #8192	; 0x2000
   16894:	beq	168b0 <__assert_fail@plt+0x592c>
   16898:	mov	r3, sl
   1689c:	ldrb	r4, [r3, #1]!
   168a0:	lsl	r1, r4, #1
   168a4:	ldrh	r1, [r2, r1]
   168a8:	tst	r1, #8192	; 0x2000
   168ac:	bne	1689c <__assert_fail@plt+0x5918>
   168b0:	cmp	r4, #45	; 0x2d
   168b4:	beq	16950 <__assert_fail@plt+0x59cc>
   168b8:	mov	r2, r6
   168bc:	mov	r3, #0
   168c0:	mov	r1, r5
   168c4:	mov	r0, sl
   168c8:	bl	10d5c <__strtoull_internal@plt>
   168cc:	ldr	r8, [r5]
   168d0:	mov	r6, r0
   168d4:	mov	r7, r1
   168d8:	cmp	r8, sl
   168dc:	beq	16938 <__assert_fail@plt+0x59b4>
   168e0:	ldr	r4, [fp]
   168e4:	cmp	r4, #0
   168e8:	bne	16928 <__assert_fail@plt+0x59a4>
   168ec:	ldr	r3, [sp, #72]	; 0x48
   168f0:	cmp	r3, #0
   168f4:	beq	16904 <__assert_fail@plt+0x5980>
   168f8:	ldrb	sl, [r8]
   168fc:	cmp	sl, #0
   16900:	bne	16cbc <__assert_fail@plt+0x5d38>
   16904:	strd	r6, [r9]
   16908:	mov	r0, r4
   1690c:	add	sp, sp, #36	; 0x24
   16910:	ldrd	r4, [sp]
   16914:	ldrd	r6, [sp, #8]
   16918:	ldrd	r8, [sp, #16]
   1691c:	ldrd	sl, [sp, #24]
   16920:	add	sp, sp, #32
   16924:	pop	{pc}		; (ldr pc, [sp], #4)
   16928:	cmp	r4, #34	; 0x22
   1692c:	bne	16950 <__assert_fail@plt+0x59cc>
   16930:	mov	r4, #1
   16934:	b	168ec <__assert_fail@plt+0x5968>
   16938:	ldr	r3, [sp, #72]	; 0x48
   1693c:	cmp	r3, #0
   16940:	beq	16950 <__assert_fail@plt+0x59cc>
   16944:	ldrb	sl, [sl]
   16948:	cmp	sl, #0
   1694c:	bne	16958 <__assert_fail@plt+0x59d4>
   16950:	mov	r4, #4
   16954:	b	16908 <__assert_fail@plt+0x5984>
   16958:	mov	r1, sl
   1695c:	mov	r0, r3
   16960:	bl	10ea0 <strchr@plt>
   16964:	cmp	r0, #0
   16968:	movne	r4, #0
   1696c:	movne	r6, #1
   16970:	movne	r7, r4
   16974:	beq	16950 <__assert_fail@plt+0x59cc>
   16978:	sub	r3, sl, #69	; 0x45
   1697c:	cmp	r3, #47	; 0x2f
   16980:	ldrls	pc, [pc, r3, lsl #2]
   16984:	b	16a8c <__assert_fail@plt+0x5b08>
   16988:	andeq	r6, r1, r8, asr #20
   1698c:	andeq	r6, r1, ip, lsl #21
   16990:	andeq	r6, r1, r8, asr #20
   16994:	andeq	r6, r1, ip, lsl #21
   16998:	andeq	r6, r1, ip, lsl #21
   1699c:	andeq	r6, r1, ip, lsl #21
   169a0:	andeq	r6, r1, r8, asr #20
   169a4:	andeq	r6, r1, ip, lsl #21
   169a8:	andeq	r6, r1, r8, asr #20
   169ac:	andeq	r6, r1, ip, lsl #21
   169b0:	andeq	r6, r1, ip, lsl #21
   169b4:	andeq	r6, r1, r8, asr #20
   169b8:	andeq	r6, r1, ip, lsl #21
   169bc:	andeq	r6, r1, ip, lsl #21
   169c0:	andeq	r6, r1, ip, lsl #21
   169c4:	andeq	r6, r1, r8, asr #20
   169c8:	andeq	r6, r1, ip, lsl #21
   169cc:	andeq	r6, r1, ip, lsl #21
   169d0:	andeq	r6, r1, ip, lsl #21
   169d4:	andeq	r6, r1, ip, lsl #21
   169d8:	andeq	r6, r1, r8, asr #20
   169dc:	andeq	r6, r1, r8, asr #20
   169e0:	andeq	r6, r1, ip, lsl #21
   169e4:	andeq	r6, r1, ip, lsl #21
   169e8:	andeq	r6, r1, ip, lsl #21
   169ec:	andeq	r6, r1, ip, lsl #21
   169f0:	andeq	r6, r1, ip, lsl #21
   169f4:	andeq	r6, r1, ip, lsl #21
   169f8:	andeq	r6, r1, ip, lsl #21
   169fc:	andeq	r6, r1, ip, lsl #21
   16a00:	andeq	r6, r1, ip, lsl #21
   16a04:	andeq	r6, r1, ip, lsl #21
   16a08:	andeq	r6, r1, ip, lsl #21
   16a0c:	andeq	r6, r1, ip, lsl #21
   16a10:	andeq	r6, r1, r8, asr #20
   16a14:	andeq	r6, r1, ip, lsl #21
   16a18:	andeq	r6, r1, ip, lsl #21
   16a1c:	andeq	r6, r1, ip, lsl #21
   16a20:	andeq	r6, r1, r8, asr #20
   16a24:	andeq	r6, r1, ip, lsl #21
   16a28:	andeq	r6, r1, r8, asr #20
   16a2c:	andeq	r6, r1, ip, lsl #21
   16a30:	andeq	r6, r1, ip, lsl #21
   16a34:	andeq	r6, r1, ip, lsl #21
   16a38:	andeq	r6, r1, ip, lsl #21
   16a3c:	andeq	r6, r1, ip, lsl #21
   16a40:	andeq	r6, r1, ip, lsl #21
   16a44:	andeq	r6, r1, r8, asr #20
   16a48:	mov	r1, #48	; 0x30
   16a4c:	ldr	r0, [sp, #72]	; 0x48
   16a50:	bl	10ea0 <strchr@plt>
   16a54:	cmp	r0, #0
   16a58:	beq	16a8c <__assert_fail@plt+0x5b08>
   16a5c:	ldrb	r3, [r8, #1]
   16a60:	cmp	r3, #68	; 0x44
   16a64:	beq	1701c <__assert_fail@plt+0x6098>
   16a68:	cmp	r3, #105	; 0x69
   16a6c:	beq	16cd4 <__assert_fail@plt+0x5d50>
   16a70:	cmp	r3, #66	; 0x42
   16a74:	moveq	r3, #2
   16a78:	movne	r3, #1
   16a7c:	moveq	ip, #1000	; 0x3e8
   16a80:	movne	ip, #1024	; 0x400
   16a84:	str	r3, [sp, #12]
   16a88:	b	16a98 <__assert_fail@plt+0x5b14>
   16a8c:	mov	r3, #1
   16a90:	mov	ip, #1024	; 0x400
   16a94:	str	r3, [sp, #12]
   16a98:	sub	sl, sl, #66	; 0x42
   16a9c:	cmp	sl, #53	; 0x35
   16aa0:	ldrls	pc, [pc, sl, lsl #2]
   16aa4:	b	16c80 <__assert_fail@plt+0x5cfc>
   16aa8:	andeq	r6, r1, r8, ror #30
   16aac:	andeq	r6, r1, r0, lsl #25
   16ab0:	andeq	r6, r1, r0, lsl #25
   16ab4:	andeq	r6, r1, r8, lsl #30
   16ab8:	andeq	r6, r1, r0, lsl #25
   16abc:	andeq	r6, r1, r4, lsl #31
   16ac0:	andeq	r6, r1, r0, lsl #25
   16ac4:	andeq	r6, r1, r0, lsl #25
   16ac8:	andeq	r6, r1, r0, lsl #25
   16acc:	andeq	r6, r1, r8, lsl #25
   16ad0:	andeq	r6, r1, r0, lsl #25
   16ad4:			; <UNDEFINED> instruction: 0x00016eb0
   16ad8:	andeq	r6, r1, r0, lsl #25
   16adc:	andeq	r6, r1, r0, lsl #25
   16ae0:	andeq	r6, r1, r4, asr lr
   16ae4:	andeq	r6, r1, r0, lsl #25
   16ae8:	andeq	r6, r1, r0, lsl #25
   16aec:	andeq	r6, r1, r0, lsl #25
   16af0:	strdeq	r6, [r1], -r4
   16af4:	andeq	r6, r1, r0, lsl #25
   16af8:	andeq	r6, r1, r0, lsl #25
   16afc:	andeq	r6, r1, r0, lsl #25
   16b00:	andeq	r6, r1, r0, lsl #25
   16b04:	andeq	r6, r1, r8, lsr #26
   16b08:	andeq	r6, r1, r0, lsl #23
   16b0c:	andeq	r6, r1, r0, lsl #25
   16b10:	andeq	r6, r1, r0, lsl #25
   16b14:	andeq	r6, r1, r0, lsl #25
   16b18:	andeq	r6, r1, r0, lsl #25
   16b1c:	andeq	r6, r1, r0, lsl #25
   16b20:	andeq	r6, r1, r0, lsl #25
   16b24:	andeq	r6, r1, r0, lsl #25
   16b28:	andeq	r6, r1, r8, lsl #26
   16b2c:	andeq	r6, r1, r8, ror #24
   16b30:	andeq	r6, r1, r0, lsl #25
   16b34:	andeq	r6, r1, r0, lsl #25
   16b38:	andeq	r6, r1, r0, lsl #25
   16b3c:	andeq	r6, r1, r4, lsl #31
   16b40:	andeq	r6, r1, r0, lsl #25
   16b44:	andeq	r6, r1, r0, lsl #25
   16b48:	andeq	r6, r1, r0, lsl #25
   16b4c:	andeq	r6, r1, r8, lsl #25
   16b50:	andeq	r6, r1, r0, lsl #25
   16b54:			; <UNDEFINED> instruction: 0x00016eb0
   16b58:	andeq	r6, r1, r0, lsl #25
   16b5c:	andeq	r6, r1, r0, lsl #25
   16b60:	andeq	r6, r1, r0, lsl #25
   16b64:	andeq	r6, r1, r0, lsl #25
   16b68:	andeq	r6, r1, r0, lsl #25
   16b6c:	andeq	r6, r1, r0, lsl #25
   16b70:	strdeq	r6, [r1], -r4
   16b74:	andeq	r6, r1, r0, lsl #25
   16b78:	andeq	r6, r1, r0, lsl #25
   16b7c:	strdeq	r6, [r1], -r0
   16b80:	asr	r3, ip, #31
   16b84:	mov	r2, ip
   16b88:	cmp	r7, #0
   16b8c:	mov	r1, #0
   16b90:	strd	r2, [sp]
   16b94:	bne	170d4 <__assert_fail@plt+0x6150>
   16b98:	umull	r6, r7, r6, ip
   16b9c:	mov	r2, r6
   16ba0:	mov	r3, r7
   16ba4:	cmp	r1, #0
   16ba8:	bne	16fe8 <__assert_fail@plt+0x6064>
   16bac:	cmp	r3, #0
   16bb0:	mov	lr, r1
   16bb4:	bne	17200 <__assert_fail@plt+0x627c>
   16bb8:	umull	r2, r3, r2, ip
   16bbc:	mov	r0, r2
   16bc0:	mov	r1, r3
   16bc4:	cmp	lr, #0
   16bc8:	bne	16fe8 <__assert_fail@plt+0x6064>
   16bcc:	cmp	r1, #0
   16bd0:	bne	171dc <__assert_fail@plt+0x6258>
   16bd4:	umull	r0, r1, r0, ip
   16bd8:	mov	r2, r0
   16bdc:	mov	r3, r1
   16be0:	cmp	lr, #0
   16be4:	bne	16fe8 <__assert_fail@plt+0x6064>
   16be8:	cmp	r3, #0
   16bec:	bne	16e8c <__assert_fail@plt+0x5f08>
   16bf0:	umull	r2, r3, r2, ip
   16bf4:	mov	r0, r2
   16bf8:	mov	r1, r3
   16bfc:	cmp	lr, #0
   16c00:	bne	16fe8 <__assert_fail@plt+0x6064>
   16c04:	cmp	r1, #0
   16c08:	bne	1708c <__assert_fail@plt+0x6108>
   16c0c:	umull	r0, r1, r0, ip
   16c10:	mov	r2, r0
   16c14:	mov	r3, r1
   16c18:	cmp	lr, #0
   16c1c:	bne	16fe8 <__assert_fail@plt+0x6064>
   16c20:	cmp	r3, #0
   16c24:	mov	r7, lr
   16c28:	bne	17068 <__assert_fail@plt+0x60e4>
   16c2c:	umull	r2, r3, r2, ip
   16c30:	mov	r6, r2
   16c34:	mov	lr, r3
   16c38:	cmp	r7, #0
   16c3c:	bne	16fe8 <__assert_fail@plt+0x6064>
   16c40:	cmp	lr, #0
   16c44:	bne	1702c <__assert_fail@plt+0x60a8>
   16c48:	umull	r2, r3, r6, ip
   16c4c:	mov	r0, r2
   16c50:	mov	r2, r3
   16c54:	subs	r3, r7, #0
   16c58:	bne	16fe8 <__assert_fail@plt+0x6064>
   16c5c:	mov	r6, r0
   16c60:	mov	r7, r2
   16c64:	orr	r4, r4, r3
   16c68:	ldr	r2, [sp, #12]
   16c6c:	add	r3, r8, r2
   16c70:	str	r3, [r5]
   16c74:	ldrb	r3, [r8, r2]
   16c78:	cmp	r3, #0
   16c7c:	beq	16904 <__assert_fail@plt+0x5980>
   16c80:	orr	r4, r4, #2
   16c84:	b	16904 <__assert_fail@plt+0x5980>
   16c88:	cmp	r7, #0
   16c8c:	asr	r1, ip, #31
   16c90:	mov	lr, #0
   16c94:	bne	16ff8 <__assert_fail@plt+0x6074>
   16c98:	umull	r2, r3, r6, ip
   16c9c:	mov	r6, r2
   16ca0:	mov	r7, r3
   16ca4:	cmp	lr, #0
   16ca8:	beq	16c68 <__assert_fail@plt+0x5ce4>
   16cac:	mvn	r6, #0
   16cb0:	mov	r4, #1
   16cb4:	mov	r7, r6
   16cb8:	b	16c68 <__assert_fail@plt+0x5ce4>
   16cbc:	mov	r0, r3
   16cc0:	mov	r1, sl
   16cc4:	bl	10ea0 <strchr@plt>
   16cc8:	cmp	r0, #0
   16ccc:	bne	16978 <__assert_fail@plt+0x59f4>
   16cd0:	b	16c80 <__assert_fail@plt+0x5cfc>
   16cd4:	ldrb	r3, [r8, #2]
   16cd8:	mov	ip, #1024	; 0x400
   16cdc:	cmp	r3, #66	; 0x42
   16ce0:	movne	r3, #1
   16ce4:	moveq	r3, #3
   16ce8:	str	r3, [sp, #12]
   16cec:	b	16a98 <__assert_fail@plt+0x5b14>
   16cf0:	lsr	r3, r7, #31
   16cf4:	adds	r6, r6, r6
   16cf8:	adc	r7, r7, r7
   16cfc:	cmp	r3, #0
   16d00:	beq	16c68 <__assert_fail@plt+0x5ce4>
   16d04:	b	16cac <__assert_fail@plt+0x5d28>
   16d08:	lsr	r3, r7, #23
   16d0c:	lsl	r7, r7, #9
   16d10:	cmp	r3, #0
   16d14:	lsl	r3, r6, #9
   16d18:	orr	r7, r7, r6, lsr #23
   16d1c:	bne	16cac <__assert_fail@plt+0x5d28>
   16d20:	mov	r6, r3
   16d24:	b	16c68 <__assert_fail@plt+0x5ce4>
   16d28:	asr	r3, ip, #31
   16d2c:	mov	r2, ip
   16d30:	cmp	r7, #0
   16d34:	mov	r1, #0
   16d38:	strd	r2, [sp]
   16d3c:	bne	17148 <__assert_fail@plt+0x61c4>
   16d40:	umull	r6, r7, r6, ip
   16d44:	mov	r0, r6
   16d48:	mov	fp, r7
   16d4c:	cmp	r1, #0
   16d50:	bne	16fe8 <__assert_fail@plt+0x6064>
   16d54:	cmp	fp, #0
   16d58:	mov	lr, r1
   16d5c:	bne	172d8 <__assert_fail@plt+0x6354>
   16d60:	umull	r0, r1, r0, ip
   16d64:	mov	r2, r0
   16d68:	mov	r3, r1
   16d6c:	cmp	lr, #0
   16d70:	bne	16fe8 <__assert_fail@plt+0x6064>
   16d74:	cmp	r3, #0
   16d78:	bne	17300 <__assert_fail@plt+0x637c>
   16d7c:	umull	r2, r3, r2, ip
   16d80:	mov	r0, r2
   16d84:	mov	r1, r3
   16d88:	cmp	lr, #0
   16d8c:	bne	16fe8 <__assert_fail@plt+0x6064>
   16d90:	cmp	r1, #0
   16d94:	bne	17280 <__assert_fail@plt+0x62fc>
   16d98:	umull	r0, r1, r0, ip
   16d9c:	mov	r2, r0
   16da0:	mov	r3, r1
   16da4:	cmp	lr, #0
   16da8:	bne	16fe8 <__assert_fail@plt+0x6064>
   16dac:	cmp	r3, #0
   16db0:	bne	170b0 <__assert_fail@plt+0x612c>
   16db4:	umull	r2, r3, r2, ip
   16db8:	mov	r0, r2
   16dbc:	mov	r1, r3
   16dc0:	cmp	lr, #0
   16dc4:	bne	16fe8 <__assert_fail@plt+0x6064>
   16dc8:	cmp	r1, #0
   16dcc:	beq	16c0c <__assert_fail@plt+0x5c88>
   16dd0:	umull	r6, r7, r0, ip
   16dd4:	mov	fp, lr
   16dd8:	mov	sl, r7
   16ddc:	umlal	sl, fp, r1, ip
   16de0:	cmp	fp, #0
   16de4:	bne	174e8 <__assert_fail@plt+0x6564>
   16de8:	mov	r2, r6
   16dec:	mov	r3, sl
   16df0:	b	16c18 <__assert_fail@plt+0x5c94>
   16df4:	asr	r3, ip, #31
   16df8:	mov	r2, ip
   16dfc:	cmp	r7, #0
   16e00:	mov	r1, #0
   16e04:	strd	r2, [sp]
   16e08:	bne	1716c <__assert_fail@plt+0x61e8>
   16e0c:	umull	r6, r7, r6, ip
   16e10:	mov	r0, r6
   16e14:	mov	fp, r7
   16e18:	cmp	r1, #0
   16e1c:	bne	16fe8 <__assert_fail@plt+0x6064>
   16e20:	cmp	fp, #0
   16e24:	mov	lr, r1
   16e28:	beq	16c0c <__assert_fail@plt+0x5c88>
   16e2c:	umull	r6, r7, r0, ip
   16e30:	mov	r3, r1
   16e34:	mov	r2, r7
   16e38:	umlal	r2, r3, fp, ip
   16e3c:	cmp	r3, #0
   16e40:	strd	r2, [sp, #16]
   16e44:	bne	173cc <__assert_fail@plt+0x6448>
   16e48:	mov	r2, r6
   16e4c:	ldr	r3, [sp, #16]
   16e50:	b	16c18 <__assert_fail@plt+0x5c94>
   16e54:	asr	r3, ip, #31
   16e58:	mov	r2, ip
   16e5c:	cmp	r7, #0
   16e60:	mov	r1, #0
   16e64:	strd	r2, [sp]
   16e68:	bne	171b4 <__assert_fail@plt+0x6230>
   16e6c:	umull	r6, r7, r6, ip
   16e70:	mov	r2, r6
   16e74:	mov	r3, r7
   16e78:	cmp	r1, #0
   16e7c:	bne	16fe8 <__assert_fail@plt+0x6064>
   16e80:	cmp	r3, #0
   16e84:	mov	lr, r1
   16e88:	beq	16bf0 <__assert_fail@plt+0x5c6c>
   16e8c:	umull	r6, r7, r2, ip
   16e90:	mov	fp, lr
   16e94:	mov	sl, r7
   16e98:	umlal	sl, fp, r3, ip
   16e9c:	cmp	fp, #0
   16ea0:	bne	174ac <__assert_fail@plt+0x6528>
   16ea4:	mov	r0, r6
   16ea8:	mov	r1, sl
   16eac:	b	16bfc <__assert_fail@plt+0x5c78>
   16eb0:	asr	r3, ip, #31
   16eb4:	mov	r2, ip
   16eb8:	cmp	r7, #0
   16ebc:	mov	r1, #0
   16ec0:	strd	r2, [sp]
   16ec4:	bne	17190 <__assert_fail@plt+0x620c>
   16ec8:	umull	r6, r7, r6, ip
   16ecc:	mov	sl, r6
   16ed0:	mov	lr, r7
   16ed4:	cmp	r1, #0
   16ed8:	bne	16cac <__assert_fail@plt+0x5d28>
   16edc:	cmp	lr, #0
   16ee0:	mov	r7, r1
   16ee4:	bne	172a4 <__assert_fail@plt+0x6320>
   16ee8:	umull	sl, fp, sl, ip
   16eec:	mov	r0, sl
   16ef0:	mov	r2, fp
   16ef4:	cmp	r7, #0
   16ef8:	mov	r6, r0
   16efc:	mov	r7, r2
   16f00:	beq	16c68 <__assert_fail@plt+0x5ce4>
   16f04:	b	16cac <__assert_fail@plt+0x5d28>
   16f08:	asr	r3, ip, #31
   16f0c:	mov	r2, ip
   16f10:	cmp	r7, #0
   16f14:	mov	r1, #0
   16f18:	strd	r2, [sp]
   16f1c:	bne	17124 <__assert_fail@plt+0x61a0>
   16f20:	umull	r6, r7, r6, ip
   16f24:	mov	r0, r6
   16f28:	mov	fp, r7
   16f2c:	cmp	r1, #0
   16f30:	bne	16fe8 <__assert_fail@plt+0x6064>
   16f34:	cmp	fp, #0
   16f38:	mov	lr, r1
   16f3c:	beq	16d98 <__assert_fail@plt+0x5e14>
   16f40:	umull	r6, r7, r0, ip
   16f44:	mov	r3, r1
   16f48:	mov	r2, r7
   16f4c:	umlal	r2, r3, fp, ip
   16f50:	cmp	r3, #0
   16f54:	strd	r2, [sp, #16]
   16f58:	bne	1743c <__assert_fail@plt+0x64b8>
   16f5c:	mov	r2, r6
   16f60:	ldr	r3, [sp, #16]
   16f64:	b	16da4 <__assert_fail@plt+0x5e20>
   16f68:	lsr	r3, r7, #22
   16f6c:	lsl	r7, r7, #10
   16f70:	cmp	r3, #0
   16f74:	lsl	r3, r6, #10
   16f78:	orr	r7, r7, r6, lsr #22
   16f7c:	beq	16d20 <__assert_fail@plt+0x5d9c>
   16f80:	b	16cac <__assert_fail@plt+0x5d28>
   16f84:	asr	r3, ip, #31
   16f88:	mov	r2, ip
   16f8c:	cmp	r7, #0
   16f90:	mov	r1, #0
   16f94:	strd	r2, [sp]
   16f98:	bne	170fc <__assert_fail@plt+0x6178>
   16f9c:	umull	r6, r7, r6, ip
   16fa0:	mov	r2, r6
   16fa4:	mov	r3, r7
   16fa8:	cmp	r1, #0
   16fac:	bne	16cac <__assert_fail@plt+0x5d28>
   16fb0:	cmp	r3, #0
   16fb4:	mov	r7, r1
   16fb8:	bne	17260 <__assert_fail@plt+0x62dc>
   16fbc:	umull	r2, r3, r2, ip
   16fc0:	mov	r6, r2
   16fc4:	mov	lr, r3
   16fc8:	cmp	r7, #0
   16fcc:	bne	16cac <__assert_fail@plt+0x5d28>
   16fd0:	cmp	lr, #0
   16fd4:	bne	17224 <__assert_fail@plt+0x62a0>
   16fd8:	umull	r2, r3, r6, ip
   16fdc:	mov	r0, r2
   16fe0:	mov	r2, r3
   16fe4:	b	16ef4 <__assert_fail@plt+0x5f70>
   16fe8:	mvn	r6, #0
   16fec:	mov	r3, #1
   16ff0:	mov	r7, r6
   16ff4:	b	16c64 <__assert_fail@plt+0x5ce0>
   16ff8:	umull	sl, fp, r6, ip
   16ffc:	mov	r3, lr
   17000:	mov	r2, fp
   17004:	umlal	r2, r3, r7, ip
   17008:	cmp	r3, #0
   1700c:	bne	17404 <__assert_fail@plt+0x6480>
   17010:	mov	r6, sl
   17014:	mov	r7, r2
   17018:	b	16ca4 <__assert_fail@plt+0x5d20>
   1701c:	mov	r3, #2
   17020:	mov	ip, #1000	; 0x3e8
   17024:	str	r3, [sp, #12]
   17028:	b	16a98 <__assert_fail@plt+0x5b14>
   1702c:	umull	r0, r1, r6, ip
   17030:	mov	r3, r7
   17034:	mov	r2, r1
   17038:	strd	r0, [sp, #16]
   1703c:	umlal	r2, r3, lr, ip
   17040:	cmp	r3, #0
   17044:	beq	16c54 <__assert_fail@plt+0x5cd0>
   17048:	ldrd	sl, [sp]
   1704c:	mov	r7, #1
   17050:	ldr	r0, [sp, #16]
   17054:	ldr	r3, [sp, #20]
   17058:	mul	r2, r6, fp
   1705c:	mla	r2, lr, sl, r2
   17060:	add	r2, r2, r3
   17064:	b	16c54 <__assert_fail@plt+0x5cd0>
   17068:	umull	sl, fp, r2, ip
   1706c:	mov	r1, lr
   17070:	mov	r0, fp
   17074:	umlal	r0, r1, r3, ip
   17078:	cmp	r1, #0
   1707c:	bne	1735c <__assert_fail@plt+0x63d8>
   17080:	mov	r6, sl
   17084:	mov	lr, r0
   17088:	b	16c38 <__assert_fail@plt+0x5cb4>
   1708c:	umull	sl, fp, r0, ip
   17090:	mov	r7, lr
   17094:	mov	r6, fp
   17098:	umlal	r6, r7, r1, ip
   1709c:	cmp	r7, #0
   170a0:	bne	17504 <__assert_fail@plt+0x6580>
   170a4:	mov	r2, sl
   170a8:	mov	r3, r6
   170ac:	b	16c18 <__assert_fail@plt+0x5c94>
   170b0:	umull	sl, fp, r2, ip
   170b4:	mov	r7, lr
   170b8:	mov	r6, fp
   170bc:	umlal	r6, r7, r3, ip
   170c0:	cmp	r7, #0
   170c4:	bne	17394 <__assert_fail@plt+0x6410>
   170c8:	mov	r0, sl
   170cc:	mov	r1, r6
   170d0:	b	16dc0 <__assert_fail@plt+0x5e3c>
   170d4:	umull	sl, fp, r6, ip
   170d8:	mov	r3, r1
   170dc:	mov	r2, fp
   170e0:	umlal	r2, r3, r7, ip
   170e4:	cmp	r3, #0
   170e8:	strd	r2, [sp, #16]
   170ec:	bne	17378 <__assert_fail@plt+0x63f4>
   170f0:	mov	r2, sl
   170f4:	ldr	r3, [sp, #16]
   170f8:	b	16ba4 <__assert_fail@plt+0x5c20>
   170fc:	umull	sl, fp, r6, ip
   17100:	mov	r3, r1
   17104:	mov	r2, fp
   17108:	umlal	r2, r3, r7, ip
   1710c:	cmp	r3, #0
   17110:	strd	r2, [sp, #16]
   17114:	bne	17458 <__assert_fail@plt+0x64d4>
   17118:	mov	r2, sl
   1711c:	ldr	r3, [sp, #16]
   17120:	b	16fa8 <__assert_fail@plt+0x6024>
   17124:	umull	sl, fp, r6, ip
   17128:	mov	r3, r1
   1712c:	mov	r2, fp
   17130:	umlal	r2, r3, r7, ip
   17134:	cmp	r3, #0
   17138:	bne	17324 <__assert_fail@plt+0x63a0>
   1713c:	mov	r0, sl
   17140:	mov	fp, r2
   17144:	b	16f2c <__assert_fail@plt+0x5fa8>
   17148:	umull	sl, fp, r6, ip
   1714c:	mov	r3, r1
   17150:	mov	r2, fp
   17154:	umlal	r2, r3, r7, ip
   17158:	cmp	r3, #0
   1715c:	bne	173e8 <__assert_fail@plt+0x6464>
   17160:	mov	r0, sl
   17164:	mov	fp, r2
   17168:	b	16d4c <__assert_fail@plt+0x5dc8>
   1716c:	umull	sl, fp, r6, ip
   17170:	mov	r3, r1
   17174:	mov	r2, fp
   17178:	umlal	r2, r3, r7, ip
   1717c:	cmp	r3, #0
   17180:	bne	17474 <__assert_fail@plt+0x64f0>
   17184:	mov	r0, sl
   17188:	mov	fp, r2
   1718c:	b	16e18 <__assert_fail@plt+0x5e94>
   17190:	umull	sl, fp, r6, ip
   17194:	mov	r3, r1
   17198:	mov	r2, fp
   1719c:	strd	sl, [sp, #16]
   171a0:	umlal	r2, r3, r7, ip
   171a4:	cmp	r3, #0
   171a8:	bne	1741c <__assert_fail@plt+0x6498>
   171ac:	mov	lr, r2
   171b0:	b	16ed4 <__assert_fail@plt+0x5f50>
   171b4:	umull	sl, fp, r6, ip
   171b8:	mov	r3, r1
   171bc:	mov	r2, fp
   171c0:	umlal	r2, r3, r7, ip
   171c4:	cmp	r3, #0
   171c8:	strd	r2, [sp, #16]
   171cc:	bne	17520 <__assert_fail@plt+0x659c>
   171d0:	mov	r2, sl
   171d4:	ldr	r3, [sp, #16]
   171d8:	b	16e78 <__assert_fail@plt+0x5ef4>
   171dc:	umull	sl, fp, r0, ip
   171e0:	mov	r7, lr
   171e4:	mov	r6, fp
   171e8:	umlal	r6, r7, r1, ip
   171ec:	cmp	r7, #0
   171f0:	bne	1753c <__assert_fail@plt+0x65b8>
   171f4:	mov	r2, sl
   171f8:	mov	r3, r6
   171fc:	b	16be0 <__assert_fail@plt+0x5c5c>
   17200:	umull	r6, r7, r2, ip
   17204:	mov	fp, r1
   17208:	mov	sl, r7
   1720c:	umlal	sl, fp, r3, ip
   17210:	cmp	fp, #0
   17214:	bne	173b0 <__assert_fail@plt+0x642c>
   17218:	mov	r0, r6
   1721c:	mov	r1, sl
   17220:	b	16bc4 <__assert_fail@plt+0x5c40>
   17224:	umull	r0, r1, r6, ip
   17228:	mov	r3, r7
   1722c:	mov	r2, r1
   17230:	strd	r0, [sp, #16]
   17234:	umlal	r2, r3, lr, ip
   17238:	cmp	r3, #0
   1723c:	beq	16ef4 <__assert_fail@plt+0x5f70>
   17240:	ldrd	sl, [sp]
   17244:	mov	r7, #1
   17248:	ldr	r0, [sp, #16]
   1724c:	ldr	r3, [sp, #20]
   17250:	mul	r2, r6, fp
   17254:	mla	r2, lr, sl, r2
   17258:	add	r2, r2, r3
   1725c:	b	16ef4 <__assert_fail@plt+0x5f70>
   17260:	umull	sl, fp, r2, ip
   17264:	mov	r0, fp
   17268:	umlal	r0, r1, r3, ip
   1726c:	cmp	r1, #0
   17270:	bne	17558 <__assert_fail@plt+0x65d4>
   17274:	mov	r6, sl
   17278:	mov	lr, r0
   1727c:	b	16fc8 <__assert_fail@plt+0x6044>
   17280:	umull	r6, r7, r0, ip
   17284:	mov	fp, lr
   17288:	mov	sl, r7
   1728c:	umlal	sl, fp, r1, ip
   17290:	cmp	fp, #0
   17294:	bne	17490 <__assert_fail@plt+0x650c>
   17298:	mov	r2, r6
   1729c:	mov	r3, sl
   172a0:	b	16da4 <__assert_fail@plt+0x5e20>
   172a4:	umull	r0, r1, sl, ip
   172a8:	mov	r3, r7
   172ac:	mov	r2, r1
   172b0:	umlal	r2, r3, lr, ip
   172b4:	cmp	r3, #0
   172b8:	beq	16ef4 <__assert_fail@plt+0x5f70>
   172bc:	ldr	r3, [sp, #4]
   172c0:	mov	r7, #1
   172c4:	mul	r2, sl, r3
   172c8:	ldr	r3, [sp]
   172cc:	mla	r2, lr, r3, r2
   172d0:	add	r2, r2, r1
   172d4:	b	16ef4 <__assert_fail@plt+0x5f70>
   172d8:	umull	r6, r7, r0, ip
   172dc:	mov	r3, r1
   172e0:	mov	r2, r7
   172e4:	umlal	r2, r3, fp, ip
   172e8:	cmp	r3, #0
   172ec:	strd	r2, [sp, #16]
   172f0:	bne	17574 <__assert_fail@plt+0x65f0>
   172f4:	mov	r2, r6
   172f8:	ldr	r3, [sp, #16]
   172fc:	b	16d6c <__assert_fail@plt+0x5de8>
   17300:	umull	sl, fp, r2, ip
   17304:	mov	r7, lr
   17308:	mov	r6, fp
   1730c:	umlal	r6, r7, r3, ip
   17310:	cmp	r7, #0
   17314:	bne	17340 <__assert_fail@plt+0x63bc>
   17318:	mov	r0, sl
   1731c:	mov	r1, r6
   17320:	b	16d88 <__assert_fail@plt+0x5e04>
   17324:	ldrd	r2, [sp]
   17328:	mov	r0, sl
   1732c:	mov	r1, #1
   17330:	mul	r6, r6, r3
   17334:	mla	r7, r2, r7, r6
   17338:	add	fp, r7, fp
   1733c:	b	16f2c <__assert_fail@plt+0x5fa8>
   17340:	ldrd	r6, [sp]
   17344:	mov	r0, sl
   17348:	mov	lr, #1
   1734c:	mul	r2, r2, r7
   17350:	mla	r1, r3, r6, r2
   17354:	add	r1, r1, fp
   17358:	b	16d88 <__assert_fail@plt+0x5e04>
   1735c:	ldrd	r0, [sp]
   17360:	mov	r6, sl
   17364:	mov	r7, #1
   17368:	mul	r2, r2, r1
   1736c:	mla	lr, r3, r0, r2
   17370:	add	lr, lr, fp
   17374:	b	16c38 <__assert_fail@plt+0x5cb4>
   17378:	ldm	sp, {r0, r3}
   1737c:	mov	r2, sl
   17380:	mov	r1, #1
   17384:	mul	r3, r6, r3
   17388:	mla	r3, r0, r7, r3
   1738c:	add	r3, r3, fp
   17390:	b	16ba4 <__assert_fail@plt+0x5c20>
   17394:	ldrd	r6, [sp]
   17398:	mov	r0, sl
   1739c:	mov	lr, #1
   173a0:	mul	r2, r2, r7
   173a4:	mla	r1, r3, r6, r2
   173a8:	add	r1, r1, fp
   173ac:	b	16dc0 <__assert_fail@plt+0x5e3c>
   173b0:	ldrd	sl, [sp]
   173b4:	mov	r0, r6
   173b8:	mov	lr, #1
   173bc:	mul	r2, r2, fp
   173c0:	mla	r1, r3, sl, r2
   173c4:	add	r1, r1, r7
   173c8:	b	16bc4 <__assert_fail@plt+0x5c40>
   173cc:	ldm	sp, {r1, r3}
   173d0:	mov	r2, r6
   173d4:	mov	lr, #1
   173d8:	mul	r3, r0, r3
   173dc:	mla	r3, fp, r1, r3
   173e0:	add	r3, r3, r7
   173e4:	b	16c18 <__assert_fail@plt+0x5c94>
   173e8:	ldrd	r2, [sp]
   173ec:	mov	r0, sl
   173f0:	mov	r1, #1
   173f4:	mul	r6, r6, r3
   173f8:	mla	r7, r2, r7, r6
   173fc:	add	fp, r7, fp
   17400:	b	16d4c <__assert_fail@plt+0x5dc8>
   17404:	mul	r3, r6, r1
   17408:	mov	lr, #1
   1740c:	mov	r6, sl
   17410:	mla	r7, ip, r7, r3
   17414:	add	r7, r7, fp
   17418:	b	16ca4 <__assert_fail@plt+0x5d20>
   1741c:	ldrd	r2, [sp]
   17420:	mov	r1, #1
   17424:	ldr	sl, [sp, #16]
   17428:	mul	lr, r6, r3
   1742c:	ldr	r3, [sp, #20]
   17430:	mla	lr, r2, r7, lr
   17434:	add	lr, lr, r3
   17438:	b	16ed4 <__assert_fail@plt+0x5f50>
   1743c:	ldm	sp, {r1, r3}
   17440:	mov	r2, r6
   17444:	mov	lr, #1
   17448:	mul	r3, r0, r3
   1744c:	mla	r3, fp, r1, r3
   17450:	add	r3, r3, r7
   17454:	b	16da4 <__assert_fail@plt+0x5e20>
   17458:	ldm	sp, {r0, r3}
   1745c:	mov	r2, sl
   17460:	mov	r1, #1
   17464:	mul	r3, r6, r3
   17468:	mla	r3, r0, r7, r3
   1746c:	add	r3, r3, fp
   17470:	b	16fa8 <__assert_fail@plt+0x6024>
   17474:	ldrd	r2, [sp]
   17478:	mov	r0, sl
   1747c:	mov	r1, #1
   17480:	mul	r6, r6, r3
   17484:	mla	r7, r2, r7, r6
   17488:	add	fp, r7, fp
   1748c:	b	16e18 <__assert_fail@plt+0x5e94>
   17490:	ldrd	sl, [sp]
   17494:	mov	r2, r6
   17498:	mov	lr, #1
   1749c:	mul	r3, r0, fp
   174a0:	mla	r3, r1, sl, r3
   174a4:	add	r3, r3, r7
   174a8:	b	16da4 <__assert_fail@plt+0x5e20>
   174ac:	ldrd	sl, [sp]
   174b0:	mov	r0, r6
   174b4:	mov	lr, #1
   174b8:	mul	r2, r2, fp
   174bc:	mla	r1, r3, sl, r2
   174c0:	add	r1, r1, r7
   174c4:	b	16bfc <__assert_fail@plt+0x5c78>
   174c8:	movw	r3, #35908	; 0x8c44
   174cc:	movt	r3, #1
   174d0:	movw	r1, #35920	; 0x8c50
   174d4:	movt	r1, #1
   174d8:	movw	r0, #35936	; 0x8c60
   174dc:	movt	r0, #1
   174e0:	mov	r2, #85	; 0x55
   174e4:	bl	10f84 <__assert_fail@plt>
   174e8:	ldrd	sl, [sp]
   174ec:	mov	r2, r6
   174f0:	mov	lr, #1
   174f4:	mul	r3, r0, fp
   174f8:	mla	r3, r1, sl, r3
   174fc:	add	r3, r3, r7
   17500:	b	16c18 <__assert_fail@plt+0x5c94>
   17504:	ldrd	r6, [sp]
   17508:	mov	r2, sl
   1750c:	mov	lr, #1
   17510:	mul	r3, r0, r7
   17514:	mla	r3, r1, r6, r3
   17518:	add	r3, r3, fp
   1751c:	b	16c18 <__assert_fail@plt+0x5c94>
   17520:	ldm	sp, {r0, r3}
   17524:	mov	r2, sl
   17528:	mov	r1, #1
   1752c:	mul	r3, r6, r3
   17530:	mla	r3, r0, r7, r3
   17534:	add	r3, r3, fp
   17538:	b	16e78 <__assert_fail@plt+0x5ef4>
   1753c:	ldrd	r6, [sp]
   17540:	mov	r2, sl
   17544:	mov	lr, #1
   17548:	mul	r3, r0, r7
   1754c:	mla	r3, r1, r6, r3
   17550:	add	r3, r3, fp
   17554:	b	16be0 <__assert_fail@plt+0x5c5c>
   17558:	ldrd	r0, [sp]
   1755c:	mov	r6, sl
   17560:	mov	r7, #1
   17564:	mul	r2, r2, r1
   17568:	mla	lr, r3, r0, r2
   1756c:	add	lr, lr, fp
   17570:	b	16fc8 <__assert_fail@plt+0x6044>
   17574:	ldm	sp, {r1, r3}
   17578:	mov	r2, r6
   1757c:	mov	lr, #1
   17580:	mul	r3, r0, r3
   17584:	mla	r3, fp, r1, r3
   17588:	add	r3, r3, r7
   1758c:	b	16d6c <__assert_fail@plt+0x5de8>
   17590:	cmp	r1, #0
   17594:	cmpne	r0, #0
   17598:	beq	175e4 <__assert_fail@plt+0x6660>
   1759c:	strd	r4, [sp, #-16]!
   175a0:	umull	r4, r5, r0, r1
   175a4:	str	r6, [sp, #8]
   175a8:	str	lr, [sp, #12]
   175ac:	adds	r3, r5, #0
   175b0:	movne	r3, #1
   175b4:	cmp	r4, #0
   175b8:	blt	175c4 <__assert_fail@plt+0x6640>
   175bc:	cmp	r3, #0
   175c0:	beq	175f0 <__assert_fail@plt+0x666c>
   175c4:	bl	10eac <__errno_location@plt>
   175c8:	mov	r3, #12
   175cc:	ldrd	r4, [sp]
   175d0:	ldr	r6, [sp, #8]
   175d4:	add	sp, sp, #12
   175d8:	str	r3, [r0]
   175dc:	mov	r0, #0
   175e0:	pop	{pc}		; (ldr pc, [sp], #4)
   175e4:	mov	r1, #1
   175e8:	mov	r0, r1
   175ec:	b	10cfc <calloc@plt>
   175f0:	ldrd	r4, [sp]
   175f4:	ldr	r6, [sp, #8]
   175f8:	ldr	lr, [sp, #12]
   175fc:	add	sp, sp, #16
   17600:	b	10cfc <calloc@plt>
   17604:	cmp	r0, #0
   17608:	beq	17614 <__assert_fail@plt+0x6690>
   1760c:	blt	1761c <__assert_fail@plt+0x6698>
   17610:	b	10e28 <malloc@plt>
   17614:	mov	r0, #1
   17618:	b	10e28 <malloc@plt>
   1761c:	str	r4, [sp, #-8]!
   17620:	str	lr, [sp, #4]
   17624:	bl	10eac <__errno_location@plt>
   17628:	mov	r3, #12
   1762c:	ldr	r4, [sp]
   17630:	add	sp, sp, #4
   17634:	str	r3, [r0]
   17638:	mov	r0, #0
   1763c:	pop	{pc}		; (ldr pc, [sp], #4)
   17640:	cmp	r0, #0
   17644:	beq	1766c <__assert_fail@plt+0x66e8>
   17648:	cmp	r1, #0
   1764c:	str	r4, [sp, #-8]!
   17650:	str	lr, [sp, #4]
   17654:	beq	17674 <__assert_fail@plt+0x66f0>
   17658:	blt	17688 <__assert_fail@plt+0x6704>
   1765c:	ldr	r4, [sp]
   17660:	ldr	lr, [sp, #4]
   17664:	add	sp, sp, #8
   17668:	b	10d98 <realloc@plt>
   1766c:	mov	r0, r1
   17670:	b	17604 <__assert_fail@plt+0x6680>
   17674:	bl	11f5c <__assert_fail@plt+0xfd8>
   17678:	ldr	r4, [sp]
   1767c:	add	sp, sp, #4
   17680:	mov	r0, #0
   17684:	pop	{pc}		; (ldr pc, [sp], #4)
   17688:	bl	10eac <__errno_location@plt>
   1768c:	mov	r3, #12
   17690:	str	r3, [r0]
   17694:	b	17678 <__assert_fail@plt+0x66f4>
   17698:	cmn	r0, #100	; 0x64
   1769c:	bne	176b0 <__assert_fail@plt+0x672c>
   176a0:	mov	r0, r1
   176a4:	mov	r1, r2
   176a8:	mov	r2, r3
   176ac:	b	10dbc <readlink@plt>
   176b0:	str	r4, [sp, #-8]!
   176b4:	str	lr, [sp, #4]
   176b8:	bl	10f78 <abort@plt>
   176bc:	movw	ip, #30360	; 0x7698
   176c0:	movt	ip, #1
   176c4:	push	{lr}		; (str lr, [sp, #-4]!)
   176c8:	mov	lr, #0
   176cc:	sub	sp, sp, #12
   176d0:	mov	r1, r0
   176d4:	mov	r3, lr
   176d8:	mov	r2, lr
   176dc:	mvn	r0, #99	; 0x63
   176e0:	str	lr, [sp]
   176e4:	str	ip, [sp, #4]
   176e8:	bl	177c8 <__assert_fail@plt+0x6844>
   176ec:	add	sp, sp, #12
   176f0:	pop	{pc}		; (ldr pc, [sp], #4)
   176f4:	ldrb	r3, [r0]
   176f8:	cmp	r3, #47	; 0x2f
   176fc:	bne	1770c <__assert_fail@plt+0x6788>
   17700:	ldrb	r3, [r0, #1]!
   17704:	cmp	r3, #47	; 0x2f
   17708:	beq	17700 <__assert_fail@plt+0x677c>
   1770c:	cmp	r3, #0
   17710:	beq	17740 <__assert_fail@plt+0x67bc>
   17714:	mov	r2, r0
   17718:	mov	r1, #0
   1771c:	cmp	r3, #47	; 0x2f
   17720:	moveq	r1, #1
   17724:	beq	17734 <__assert_fail@plt+0x67b0>
   17728:	cmp	r1, #0
   1772c:	movne	r0, r2
   17730:	movne	r1, #0
   17734:	ldrb	r3, [r2, #1]!
   17738:	cmp	r3, #0
   1773c:	bne	1771c <__assert_fail@plt+0x6798>
   17740:	bx	lr
   17744:	str	r4, [sp, #-8]!
   17748:	mov	r4, r0
   1774c:	str	lr, [sp, #4]
   17750:	bl	10e94 <strlen@plt>
   17754:	cmp	r0, #1
   17758:	bls	1776c <__assert_fail@plt+0x67e8>
   1775c:	sub	r2, r0, #1
   17760:	ldrb	r1, [r4, r2]
   17764:	cmp	r1, #47	; 0x2f
   17768:	beq	17778 <__assert_fail@plt+0x67f4>
   1776c:	ldr	r4, [sp]
   17770:	add	sp, sp, #4
   17774:	pop	{pc}		; (ldr pc, [sp], #4)
   17778:	cmp	r2, #1
   1777c:	beq	17790 <__assert_fail@plt+0x680c>
   17780:	add	r1, r4, r0
   17784:	ldrb	r1, [r1, #-2]
   17788:	cmp	r1, #47	; 0x2f
   1778c:	beq	177a0 <__assert_fail@plt+0x681c>
   17790:	ldr	r4, [sp]
   17794:	add	sp, sp, #4
   17798:	mov	r0, r2
   1779c:	pop	{pc}		; (ldr pc, [sp], #4)
   177a0:	sub	r3, r0, #3
   177a4:	rsb	r0, r4, #1
   177a8:	add	r3, r4, r3
   177ac:	cmp	r3, r4
   177b0:	add	r2, r0, r3
   177b4:	beq	17790 <__assert_fail@plt+0x680c>
   177b8:	ldrb	r1, [r3], #-1
   177bc:	cmp	r1, #47	; 0x2f
   177c0:	bne	17790 <__assert_fail@plt+0x680c>
   177c4:	b	177ac <__assert_fail@plt+0x6828>
   177c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   177cc:	movw	ip, #35984	; 0x8c90
   177d0:	movt	ip, #1
   177d4:	strd	r6, [sp, #8]
   177d8:	strd	r8, [sp, #16]
   177dc:	mov	r8, r0
   177e0:	mov	r9, r1
   177e4:	strd	sl, [sp, #24]
   177e8:	str	lr, [sp, #32]
   177ec:	sub	sp, sp, #1024	; 0x400
   177f0:	sub	sp, sp, #4
   177f4:	ldr	r6, [sp, #1064]	; 0x428
   177f8:	ldr	sl, [sp, #1068]	; 0x42c
   177fc:	cmp	r6, #0
   17800:	moveq	r6, ip
   17804:	subs	r7, r2, #0
   17808:	beq	178c4 <__assert_fail@plt+0x6940>
   1780c:	mvn	r4, #-2147483648	; 0x80000000
   17810:	cmp	r3, r4
   17814:	movcc	r4, r3
   17818:	mov	r5, r7
   1781c:	mov	r3, r4
   17820:	mov	r2, r5
   17824:	mov	r1, r9
   17828:	mov	r0, r8
   1782c:	blx	sl
   17830:	subs	r3, r0, #0
   17834:	mov	r0, r5
   17838:	blt	178d0 <__assert_fail@plt+0x694c>
   1783c:	cmp	r3, r4
   17840:	blt	17900 <__assert_fail@plt+0x697c>
   17844:	cmp	r7, r5
   17848:	beq	17854 <__assert_fail@plt+0x68d0>
   1784c:	ldr	r3, [r6, #8]
   17850:	blx	r3
   17854:	cmn	r4, #-1073741822	; 0xc0000002
   17858:	lsl	r3, r4, #1
   1785c:	bgt	17944 <__assert_fail@plt+0x69c0>
   17860:	add	r4, r3, #1
   17864:	ldr	r3, [r6]
   17868:	mov	r0, r4
   1786c:	mov	fp, r4
   17870:	blx	r3
   17874:	subs	r5, r0, #0
   17878:	bne	1781c <__assert_fail@plt+0x6898>
   1787c:	ldr	r3, [r6, #12]
   17880:	cmp	r3, #0
   17884:	beq	17890 <__assert_fail@plt+0x690c>
   17888:	mov	r0, fp
   1788c:	blx	r3
   17890:	bl	10eac <__errno_location@plt>
   17894:	mov	r5, #0
   17898:	mov	r3, #12
   1789c:	str	r3, [r0]
   178a0:	mov	r0, r5
   178a4:	add	sp, sp, #1024	; 0x400
   178a8:	add	sp, sp, #4
   178ac:	ldrd	r4, [sp]
   178b0:	ldrd	r6, [sp, #8]
   178b4:	ldrd	r8, [sp, #16]
   178b8:	ldrd	sl, [sp, #24]
   178bc:	add	sp, sp, #32
   178c0:	pop	{pc}		; (ldr pc, [sp], #4)
   178c4:	mov	r4, #1024	; 0x400
   178c8:	mov	r7, sp
   178cc:	b	17818 <__assert_fail@plt+0x6894>
   178d0:	cmp	r7, r5
   178d4:	moveq	r5, #0
   178d8:	beq	178a0 <__assert_fail@plt+0x691c>
   178dc:	bl	10eac <__errno_location@plt>
   178e0:	mov	r4, r0
   178e4:	ldr	r3, [r6, #8]
   178e8:	mov	r0, r5
   178ec:	mov	r5, #0
   178f0:	ldr	r6, [r4]
   178f4:	blx	r3
   178f8:	str	r6, [r4]
   178fc:	b	178a0 <__assert_fail@plt+0x691c>
   17900:	mov	r2, #0
   17904:	mov	r1, sp
   17908:	cmp	r5, r1
   1790c:	add	r8, r3, #1
   17910:	strb	r2, [r5, r3]
   17914:	beq	17958 <__assert_fail@plt+0x69d4>
   17918:	cmp	r7, r5
   1791c:	cmpne	r8, r4
   17920:	bge	178a0 <__assert_fail@plt+0x691c>
   17924:	ldr	r3, [r6, #4]
   17928:	cmp	r3, #0
   1792c:	beq	178a0 <__assert_fail@plt+0x691c>
   17930:	mov	r1, r8
   17934:	blx	r3
   17938:	cmp	r0, #0
   1793c:	movne	r5, r0
   17940:	b	178a0 <__assert_fail@plt+0x691c>
   17944:	bl	10eac <__errno_location@plt>
   17948:	mov	r3, #36	; 0x24
   1794c:	mov	r5, #0
   17950:	str	r3, [r0]
   17954:	b	178a0 <__assert_fail@plt+0x691c>
   17958:	mov	r0, r8
   1795c:	ldr	r3, [r6]
   17960:	mov	fp, r8
   17964:	blx	r3
   17968:	cmp	r0, #0
   1796c:	beq	1787c <__assert_fail@plt+0x68f8>
   17970:	mov	r1, r5
   17974:	mov	r2, r8
   17978:	bl	10d44 <memcpy@plt>
   1797c:	mov	r5, r0
   17980:	b	178a0 <__assert_fail@plt+0x691c>
   17984:	strd	r4, [sp, #-16]!
   17988:	mov	r4, r0
   1798c:	str	r6, [sp, #8]
   17990:	str	lr, [sp, #12]
   17994:	bl	10dec <__fpending@plt>
   17998:	ldr	r5, [r4]
   1799c:	mov	r6, r0
   179a0:	mov	r0, r4
   179a4:	bl	17a0c <__assert_fail@plt+0x6a88>
   179a8:	mov	r4, r0
   179ac:	and	r5, r5, #32
   179b0:	cmp	r5, #0
   179b4:	bne	179ec <__assert_fail@plt+0x6a68>
   179b8:	cmp	r0, #0
   179bc:	beq	179d8 <__assert_fail@plt+0x6a54>
   179c0:	cmp	r6, #0
   179c4:	bne	17a04 <__assert_fail@plt+0x6a80>
   179c8:	bl	10eac <__errno_location@plt>
   179cc:	ldr	r4, [r0]
   179d0:	subs	r4, r4, #9
   179d4:	mvnne	r4, #0
   179d8:	mov	r0, r4
   179dc:	ldrd	r4, [sp]
   179e0:	ldr	r6, [sp, #8]
   179e4:	add	sp, sp, #12
   179e8:	pop	{pc}		; (ldr pc, [sp], #4)
   179ec:	cmp	r0, #0
   179f0:	bne	17a04 <__assert_fail@plt+0x6a80>
   179f4:	bl	10eac <__errno_location@plt>
   179f8:	str	r4, [r0]
   179fc:	mvn	r4, #0
   17a00:	b	179d8 <__assert_fail@plt+0x6a54>
   17a04:	mvn	r4, #0
   17a08:	b	179d8 <__assert_fail@plt+0x6a54>
   17a0c:	strd	r4, [sp, #-12]!
   17a10:	mov	r4, r0
   17a14:	str	lr, [sp, #8]
   17a18:	sub	sp, sp, #12
   17a1c:	bl	10edc <fileno@plt>
   17a20:	cmp	r0, #0
   17a24:	mov	r0, r4
   17a28:	blt	17aac <__assert_fail@plt+0x6b28>
   17a2c:	bl	10e40 <__freading@plt>
   17a30:	cmp	r0, #0
   17a34:	bne	17a78 <__assert_fail@plt+0x6af4>
   17a38:	mov	r0, r4
   17a3c:	bl	17ac0 <__assert_fail@plt+0x6b3c>
   17a40:	cmp	r0, #0
   17a44:	beq	17aa8 <__assert_fail@plt+0x6b24>
   17a48:	bl	10eac <__errno_location@plt>
   17a4c:	mov	r5, r0
   17a50:	mov	r0, r4
   17a54:	ldr	r4, [r5]
   17a58:	bl	10f00 <fclose@plt>
   17a5c:	cmp	r4, #0
   17a60:	mvnne	r0, #0
   17a64:	strne	r4, [r5]
   17a68:	add	sp, sp, #12
   17a6c:	ldrd	r4, [sp]
   17a70:	add	sp, sp, #8
   17a74:	pop	{pc}		; (ldr pc, [sp], #4)
   17a78:	mov	r0, r4
   17a7c:	bl	10edc <fileno@plt>
   17a80:	mov	r1, #1
   17a84:	mov	r2, #0
   17a88:	mov	r3, #0
   17a8c:	str	r1, [sp]
   17a90:	bl	10dd4 <lseek64@plt>
   17a94:	mvn	r3, #0
   17a98:	mvn	r2, #0
   17a9c:	cmp	r1, r3
   17aa0:	cmpeq	r0, r2
   17aa4:	bne	17a38 <__assert_fail@plt+0x6ab4>
   17aa8:	mov	r0, r4
   17aac:	add	sp, sp, #12
   17ab0:	ldrd	r4, [sp]
   17ab4:	ldr	lr, [sp, #8]
   17ab8:	add	sp, sp, #12
   17abc:	b	10f00 <fclose@plt>
   17ac0:	str	r4, [sp, #-8]!
   17ac4:	subs	r4, r0, #0
   17ac8:	str	lr, [sp, #4]
   17acc:	sub	sp, sp, #8
   17ad0:	beq	17aec <__assert_fail@plt+0x6b68>
   17ad4:	bl	10e40 <__freading@plt>
   17ad8:	cmp	r0, #0
   17adc:	beq	17aec <__assert_fail@plt+0x6b68>
   17ae0:	ldr	r3, [r4]
   17ae4:	tst	r3, #256	; 0x100
   17ae8:	bne	17b04 <__assert_fail@plt+0x6b80>
   17aec:	mov	r0, r4
   17af0:	add	sp, sp, #8
   17af4:	ldr	r4, [sp]
   17af8:	ldr	lr, [sp, #4]
   17afc:	add	sp, sp, #8
   17b00:	b	10d20 <fflush@plt>
   17b04:	mov	r1, #1
   17b08:	mov	r2, #0
   17b0c:	mov	r3, #0
   17b10:	mov	r0, r4
   17b14:	str	r1, [sp]
   17b18:	bl	17b20 <__assert_fail@plt+0x6b9c>
   17b1c:	b	17aec <__assert_fail@plt+0x6b68>
   17b20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17b24:	mov	r4, r0
   17b28:	ldr	ip, [r0, #4]
   17b2c:	strd	r6, [sp, #8]
   17b30:	str	lr, [sp, #20]
   17b34:	ldr	lr, [r0, #8]
   17b38:	str	r8, [sp, #16]
   17b3c:	sub	sp, sp, #8
   17b40:	ldr	r5, [sp, #32]
   17b44:	cmp	lr, ip
   17b48:	beq	17b70 <__assert_fail@plt+0x6bec>
   17b4c:	mov	r0, r4
   17b50:	str	r5, [sp, #32]
   17b54:	add	sp, sp, #8
   17b58:	ldrd	r4, [sp]
   17b5c:	ldrd	r6, [sp, #8]
   17b60:	ldr	r8, [sp, #16]
   17b64:	ldr	lr, [sp, #20]
   17b68:	add	sp, sp, #24
   17b6c:	b	10f0c <fseeko64@plt>
   17b70:	ldr	ip, [r0, #16]
   17b74:	ldr	lr, [r0, #20]
   17b78:	cmp	lr, ip
   17b7c:	bne	17b4c <__assert_fail@plt+0x6bc8>
   17b80:	ldr	r8, [r0, #36]	; 0x24
   17b84:	cmp	r8, #0
   17b88:	bne	17b4c <__assert_fail@plt+0x6bc8>
   17b8c:	mov	r6, r2
   17b90:	mov	r7, r3
   17b94:	bl	10edc <fileno@plt>
   17b98:	mov	r2, r6
   17b9c:	mov	r3, r7
   17ba0:	str	r5, [sp]
   17ba4:	bl	10dd4 <lseek64@plt>
   17ba8:	mvn	r3, #0
   17bac:	mvn	r2, #0
   17bb0:	cmp	r1, r3
   17bb4:	cmpeq	r0, r2
   17bb8:	beq	17be8 <__assert_fail@plt+0x6c64>
   17bbc:	ldr	r3, [r4]
   17bc0:	strd	r0, [r4, #80]	; 0x50
   17bc4:	bic	r3, r3, #16
   17bc8:	str	r3, [r4]
   17bcc:	mov	r0, r8
   17bd0:	add	sp, sp, #8
   17bd4:	ldrd	r4, [sp]
   17bd8:	ldrd	r6, [sp, #8]
   17bdc:	ldr	r8, [sp, #16]
   17be0:	add	sp, sp, #20
   17be4:	pop	{pc}		; (ldr pc, [sp], #4)
   17be8:	mvn	r8, #0
   17bec:	b	17bcc <__assert_fail@plt+0x6c48>
   17bf0:	mov	r0, #14
   17bf4:	str	r4, [sp, #-8]!
   17bf8:	str	lr, [sp, #4]
   17bfc:	bl	10f48 <nl_langinfo@plt>
   17c00:	cmp	r0, #0
   17c04:	beq	17c28 <__assert_fail@plt+0x6ca4>
   17c08:	ldrb	r2, [r0]
   17c0c:	movw	r3, #35976	; 0x8c88
   17c10:	movt	r3, #1
   17c14:	ldr	r4, [sp]
   17c18:	add	sp, sp, #4
   17c1c:	cmp	r2, #0
   17c20:	moveq	r0, r3
   17c24:	pop	{pc}		; (ldr pc, [sp], #4)
   17c28:	ldr	r4, [sp]
   17c2c:	add	sp, sp, #4
   17c30:	movw	r0, #35976	; 0x8c88
   17c34:	movt	r0, #1
   17c38:	pop	{pc}		; (ldr pc, [sp], #4)
   17c3c:	strd	r4, [sp, #-20]!	; 0xffffffec
   17c40:	mov	r5, r2
   17c44:	strd	r6, [sp, #8]
   17c48:	subs	r6, r0, #0
   17c4c:	mov	r7, r1
   17c50:	str	lr, [sp, #16]
   17c54:	sub	sp, sp, #12
   17c58:	addeq	r6, sp, #4
   17c5c:	mov	r0, r6
   17c60:	bl	10df8 <mbrtowc@plt>
   17c64:	cmp	r5, #0
   17c68:	cmnne	r0, #3
   17c6c:	mov	r4, r0
   17c70:	bhi	17c8c <__assert_fail@plt+0x6d08>
   17c74:	mov	r0, r4
   17c78:	add	sp, sp, #12
   17c7c:	ldrd	r4, [sp]
   17c80:	ldrd	r6, [sp, #8]
   17c84:	add	sp, sp, #16
   17c88:	pop	{pc}		; (ldr pc, [sp], #4)
   17c8c:	mov	r0, #0
   17c90:	bl	17ce4 <__assert_fail@plt+0x6d60>
   17c94:	cmp	r0, #0
   17c98:	bne	17c74 <__assert_fail@plt+0x6cf0>
   17c9c:	ldrb	r3, [r7]
   17ca0:	mov	r4, #1
   17ca4:	str	r3, [r6]
   17ca8:	b	17c74 <__assert_fail@plt+0x6cf0>
   17cac:	umull	r2, r3, r1, r2
   17cb0:	cmp	r3, #0
   17cb4:	bne	17cc0 <__assert_fail@plt+0x6d3c>
   17cb8:	mov	r1, r2
   17cbc:	b	17640 <__assert_fail@plt+0x66bc>
   17cc0:	str	r4, [sp, #-8]!
   17cc4:	str	lr, [sp, #4]
   17cc8:	bl	10eac <__errno_location@plt>
   17ccc:	mov	r3, #12
   17cd0:	ldr	r4, [sp]
   17cd4:	add	sp, sp, #4
   17cd8:	str	r3, [r0]
   17cdc:	mov	r0, #0
   17ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ce4:	push	{lr}		; (str lr, [sp, #-4]!)
   17ce8:	sub	sp, sp, #268	; 0x10c
   17cec:	movw	r2, #257	; 0x101
   17cf0:	add	r1, sp, #4
   17cf4:	bl	17d3c <__assert_fail@plt+0x6db8>
   17cf8:	cmp	r0, #0
   17cfc:	movne	r0, #0
   17d00:	bne	17d34 <__assert_fail@plt+0x6db0>
   17d04:	movw	r1, #36000	; 0x8ca0
   17d08:	movt	r1, #1
   17d0c:	add	r0, sp, #4
   17d10:	bl	10d14 <strcmp@plt>
   17d14:	cmp	r0, #0
   17d18:	beq	17d34 <__assert_fail@plt+0x6db0>
   17d1c:	add	r0, sp, #4
   17d20:	movw	r1, #36004	; 0x8ca4
   17d24:	movt	r1, #1
   17d28:	bl	10d14 <strcmp@plt>
   17d2c:	adds	r0, r0, #0
   17d30:	movne	r0, #1
   17d34:	add	sp, sp, #268	; 0x10c
   17d38:	pop	{pc}		; (ldr pc, [sp], #4)
   17d3c:	strd	r4, [sp, #-16]!
   17d40:	mov	r5, r1
   17d44:	mov	r1, #0
   17d48:	mov	r4, r2
   17d4c:	str	r6, [sp, #8]
   17d50:	str	lr, [sp, #12]
   17d54:	bl	10f24 <setlocale@plt>
   17d58:	subs	r6, r0, #0
   17d5c:	beq	17ddc <__assert_fail@plt+0x6e58>
   17d60:	bl	10e94 <strlen@plt>
   17d64:	cmp	r4, r0
   17d68:	bhi	17d88 <__assert_fail@plt+0x6e04>
   17d6c:	cmp	r4, #0
   17d70:	moveq	r0, #34	; 0x22
   17d74:	bne	17dac <__assert_fail@plt+0x6e28>
   17d78:	ldrd	r4, [sp]
   17d7c:	ldr	r6, [sp, #8]
   17d80:	add	sp, sp, #12
   17d84:	pop	{pc}		; (ldr pc, [sp], #4)
   17d88:	add	r2, r0, #1
   17d8c:	mov	r1, r6
   17d90:	mov	r0, r5
   17d94:	bl	10d44 <memcpy@plt>
   17d98:	ldrd	r4, [sp]
   17d9c:	mov	r0, #0
   17da0:	ldr	r6, [sp, #8]
   17da4:	add	sp, sp, #12
   17da8:	pop	{pc}		; (ldr pc, [sp], #4)
   17dac:	sub	r4, r4, #1
   17db0:	mov	r1, r6
   17db4:	mov	r2, r4
   17db8:	mov	r0, r5
   17dbc:	bl	10d44 <memcpy@plt>
   17dc0:	mov	r3, #0
   17dc4:	mov	r0, #34	; 0x22
   17dc8:	strb	r3, [r5, r4]
   17dcc:	ldrd	r4, [sp]
   17dd0:	ldr	r6, [sp, #8]
   17dd4:	add	sp, sp, #12
   17dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   17ddc:	cmp	r4, #0
   17de0:	mov	r0, #22
   17de4:	strbne	r6, [r5]
   17de8:	ldrd	r4, [sp]
   17dec:	ldr	r6, [sp, #8]
   17df0:	add	sp, sp, #12
   17df4:	pop	{pc}		; (ldr pc, [sp], #4)
   17df8:	mov	r1, #0
   17dfc:	b	10f24 <setlocale@plt>
   17e00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17e04:	mov	r7, r0
   17e08:	ldr	r6, [pc, #72]	; 17e58 <__assert_fail@plt+0x6ed4>
   17e0c:	ldr	r5, [pc, #72]	; 17e5c <__assert_fail@plt+0x6ed8>
   17e10:	add	r6, pc, r6
   17e14:	add	r5, pc, r5
   17e18:	sub	r6, r6, r5
   17e1c:	mov	r8, r1
   17e20:	mov	r9, r2
   17e24:	bl	10cdc <calloc@plt-0x20>
   17e28:	asrs	r6, r6, #2
   17e2c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17e30:	mov	r4, #0
   17e34:	add	r4, r4, #1
   17e38:	ldr	r3, [r5], #4
   17e3c:	mov	r2, r9
   17e40:	mov	r1, r8
   17e44:	mov	r0, r7
   17e48:	blx	r3
   17e4c:	cmp	r6, r4
   17e50:	bne	17e34 <__assert_fail@plt+0x6eb0>
   17e54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17e58:	strdeq	r1, [r1], -ip
   17e5c:	strdeq	r1, [r1], -r4
   17e60:	bx	lr
   17e64:	ldr	r3, [pc, #12]	; 17e78 <__assert_fail@plt+0x6ef4>
   17e68:	mov	r1, #0
   17e6c:	add	r3, pc, r3
   17e70:	ldr	r2, [r3]
   17e74:	b	10eb8 <__cxa_atexit@plt>
   17e78:	andeq	r1, r1, ip, ror r2

Disassembly of section .fini:

00017e7c <.fini>:
   17e7c:	push	{r3, lr}
   17e80:	pop	{r3, pc}
