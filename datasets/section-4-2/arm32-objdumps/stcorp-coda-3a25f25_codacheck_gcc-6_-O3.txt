
../repos/stcorp-coda-3a25f25/codacheck:     file format elf32-littlearm


Disassembly of section .init:

00010bb4 <.init>:
   10bb4:	push	{r3, lr}
   10bb8:	bl	111b0 <_start@@Base+0x3c>
   10bbc:	pop	{r3, pc}

Disassembly of section .plt:

00010bc0 <coda_set_option_perform_boundary_checks@plt-0x14>:
   10bc0:	push	{lr}		; (str lr, [sp, #-4]!)
   10bc4:	ldr	lr, [pc, #4]	; 10bd0 <coda_set_option_perform_boundary_checks@plt-0x4>
   10bc8:	add	lr, pc, lr
   10bcc:	ldr	pc, [lr, #8]!
   10bd0:	andeq	r1, r1, r0, lsr r4

00010bd4 <coda_set_option_perform_boundary_checks@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #69632	; 0x11000
   10bdc:	ldr	pc, [ip, #1072]!	; 0x430

00010be0 <strcmp@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #69632	; 0x11000
   10be8:	ldr	pc, [ip, #1064]!	; 0x428

00010bec <printf@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #69632	; 0x11000
   10bf4:	ldr	pc, [ip, #1056]!	; 0x420

00010bf8 <coda_set_error@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #69632	; 0x11000
   10c00:	ldr	pc, [ip, #1048]!	; 0x418

00010c04 <coda_open@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #69632	; 0x11000
   10c0c:	ldr	pc, [ip, #1040]!	; 0x410

00010c10 <fflush@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #69632	; 0x11000
   10c18:	ldr	pc, [ip, #1032]!	; 0x408

00010c1c <coda_set_option_use_mmap@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #69632	; 0x11000
   10c24:	ldr	pc, [ip, #1024]!	; 0x400

00010c28 <coda_cursor_print_path@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #69632	; 0x11000
   10c30:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c34 <coda_set_definition_path_conditional@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #69632	; 0x11000
   10c3c:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c40 <coda_set_definition_path@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #69632	; 0x11000
   10c48:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c4c <coda_recognize_file@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #69632	; 0x11000
   10c54:	ldr	pc, [ip, #992]!	; 0x3e0

00010c58 <fwrite@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #69632	; 0x11000
   10c60:	ldr	pc, [ip, #984]!	; 0x3d8

00010c64 <coda_type_get_format_name@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #69632	; 0x11000
   10c6c:	ldr	pc, [ip, #976]!	; 0x3d0

00010c70 <coda_done@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #69632	; 0x11000
   10c78:	ldr	pc, [ip, #968]!	; 0x3c8

00010c7c <puts@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #69632	; 0x11000
   10c84:	ldr	pc, [ip, #960]!	; 0x3c0

00010c88 <coda_product_check@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #69632	; 0x11000
   10c90:	ldr	pc, [ip, #952]!	; 0x3b8

00010c94 <__libc_start_main@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #69632	; 0x11000
   10c9c:	ldr	pc, [ip, #944]!	; 0x3b0

00010ca0 <__gmon_start__@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #69632	; 0x11000
   10ca8:	ldr	pc, [ip, #936]!	; 0x3a8

00010cac <exit@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #69632	; 0x11000
   10cb4:	ldr	pc, [ip, #928]!	; 0x3a0

00010cb8 <fprintf@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #69632	; 0x11000
   10cc0:	ldr	pc, [ip, #920]!	; 0x398

00010cc4 <coda_init@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #69632	; 0x11000
   10ccc:	ldr	pc, [ip, #912]!	; 0x390

00010cd0 <ungetc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #69632	; 0x11000
   10cd8:	ldr	pc, [ip, #904]!	; 0x388

00010cdc <coda_set_option_perform_conversions@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #69632	; 0x11000
   10ce4:	ldr	pc, [ip, #896]!	; 0x380

00010ce8 <putchar@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #69632	; 0x11000
   10cf0:	ldr	pc, [ip, #888]!	; 0x378

00010cf4 <coda_close@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #69632	; 0x11000
   10cfc:	ldr	pc, [ip, #880]!	; 0x370

00010d00 <coda_errno_to_string@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #69632	; 0x11000
   10d08:	ldr	pc, [ip, #872]!	; 0x368

00010d0c <coda_get_libcoda_version@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #69632	; 0x11000
   10d14:	ldr	pc, [ip, #864]!	; 0x360

00010d18 <coda_get_errno@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #69632	; 0x11000
   10d20:	ldr	pc, [ip, #856]!	; 0x358

00010d24 <abort@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #69632	; 0x11000
   10d2c:	ldr	pc, [ip, #848]!	; 0x350

00010d30 <getc@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #69632	; 0x11000
   10d38:	ldr	pc, [ip, #840]!	; 0x348

00010d3c <__assert_fail@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #69632	; 0x11000
   10d44:	ldr	pc, [ip, #832]!	; 0x340

Disassembly of section .text:

00010d48 <main@@Base>:
   10d48:	ldr	r2, [pc, #952]	; 11108 <main@@Base+0x3c0>
   10d4c:	mov	r3, #0
   10d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d54:	sub	sp, sp, #1012	; 0x3f4
   10d58:	str	r3, [r2]
   10d5c:	ldr	sl, [pc, #936]	; 1110c <main@@Base+0x3c4>
   10d60:	ldr	r2, [pc, #936]	; 11110 <main@@Base+0x3c8>
   10d64:	cmp	r0, #1
   10d68:	str	r1, [sp]
   10d6c:	str	r3, [sl]
   10d70:	str	r3, [r2]
   10d74:	beq	10fec <main@@Base+0x2a4>
   10d78:	ldr	r4, [r1, #4]
   10d7c:	mov	r7, r0
   10d80:	ldr	r1, [pc, #908]	; 11114 <main@@Base+0x3cc>
   10d84:	mov	r0, r4
   10d88:	bl	10be0 <strcmp@plt>
   10d8c:	cmp	r0, #0
   10d90:	beq	10fec <main@@Base+0x2a4>
   10d94:	ldr	r1, [pc, #892]	; 11118 <main@@Base+0x3d0>
   10d98:	mov	r0, r4
   10d9c:	bl	10be0 <strcmp@plt>
   10da0:	cmp	r0, #0
   10da4:	beq	10fec <main@@Base+0x2a4>
   10da8:	ldr	r1, [pc, #876]	; 1111c <main@@Base+0x3d4>
   10dac:	mov	r0, r4
   10db0:	bl	10be0 <strcmp@plt>
   10db4:	cmp	r0, #0
   10db8:	beq	110bc <main@@Base+0x374>
   10dbc:	ldr	r1, [pc, #860]	; 11120 <main@@Base+0x3d8>
   10dc0:	mov	r0, r4
   10dc4:	bl	10be0 <strcmp@plt>
   10dc8:	cmp	r0, #0
   10dcc:	beq	110bc <main@@Base+0x374>
   10dd0:	cmp	r7, #2
   10dd4:	ble	10dec <main@@Base+0xa4>
   10dd8:	mov	r0, r4
   10ddc:	ldr	r1, [pc, #832]	; 11124 <main@@Base+0x3dc>
   10de0:	bl	10be0 <strcmp@plt>
   10de4:	cmp	r0, #0
   10de8:	beq	10f2c <main@@Base+0x1e4>
   10dec:	ldr	r3, [sp]
   10df0:	ldr	r2, [pc, #816]	; 11128 <main@@Base+0x3e0>
   10df4:	mov	r1, #0
   10df8:	ldr	r0, [r3]
   10dfc:	bl	10c34 <coda_set_definition_path_conditional@plt>
   10e00:	cmp	r0, #0
   10e04:	moveq	r4, #1
   10e08:	bne	10ecc <main@@Base+0x184>
   10e0c:	mov	r3, #1
   10e10:	cmp	r7, r4
   10e14:	str	r3, [sp, #4]
   10e18:	ble	10ec0 <main@@Base+0x178>
   10e1c:	mov	r9, r3
   10e20:	ldr	r3, [sp]
   10e24:	ldr	r8, [pc, #768]	; 1112c <main@@Base+0x3e4>
   10e28:	ldr	fp, [pc, #768]	; 11130 <main@@Base+0x3e8>
   10e2c:	add	r6, r3, r4, lsl #2
   10e30:	ldr	r5, [r6], #4
   10e34:	mov	r1, r8
   10e38:	mov	r0, r5
   10e3c:	bl	10be0 <strcmp@plt>
   10e40:	cmp	r0, #0
   10e44:	beq	10ef8 <main@@Base+0x1b0>
   10e48:	mov	r1, fp
   10e4c:	mov	r0, r5
   10e50:	bl	10be0 <strcmp@plt>
   10e54:	cmp	r0, #0
   10e58:	beq	10ef8 <main@@Base+0x1b0>
   10e5c:	ldr	r1, [pc, #720]	; 11134 <main@@Base+0x3ec>
   10e60:	mov	r0, r5
   10e64:	bl	10be0 <strcmp@plt>
   10e68:	cmp	r0, #0
   10e6c:	beq	10f00 <main@@Base+0x1b8>
   10e70:	ldr	r1, [pc, #704]	; 11138 <main@@Base+0x3f0>
   10e74:	mov	r0, r5
   10e78:	bl	10be0 <strcmp@plt>
   10e7c:	cmp	r0, #0
   10e80:	beq	10f00 <main@@Base+0x1b8>
   10e84:	ldr	r1, [pc, #688]	; 1113c <main@@Base+0x3f4>
   10e88:	mov	r0, r5
   10e8c:	bl	10be0 <strcmp@plt>
   10e90:	cmp	r0, #0
   10e94:	beq	10eac <main@@Base+0x164>
   10e98:	ldr	r1, [pc, #672]	; 11140 <main@@Base+0x3f8>
   10e9c:	mov	r0, r5
   10ea0:	bl	10be0 <strcmp@plt>
   10ea4:	cmp	r0, #0
   10ea8:	bne	10f0c <main@@Base+0x1c4>
   10eac:	ldr	r3, [pc, #604]	; 11110 <main@@Base+0x3c8>
   10eb0:	str	r9, [r3]
   10eb4:	add	r4, r4, #1
   10eb8:	cmp	r7, r4
   10ebc:	bne	10e30 <main@@Base+0xe8>
   10ec0:	bl	10cc4 <coda_init@plt>
   10ec4:	subs	r4, r0, #0
   10ec8:	beq	10f40 <main@@Base+0x1f8>
   10ecc:	ldr	r3, [pc, #624]	; 11144 <main@@Base+0x3fc>
   10ed0:	ldr	r4, [r3]
   10ed4:	bl	10d18 <coda_get_errno@plt>
   10ed8:	ldr	r0, [r0]
   10edc:	bl	10d00 <coda_errno_to_string@plt>
   10ee0:	ldr	r1, [pc, #608]	; 11148 <main@@Base+0x400>
   10ee4:	mov	r2, r0
   10ee8:	mov	r0, r4
   10eec:	bl	10cb8 <fprintf@plt>
   10ef0:	mov	r0, #1
   10ef4:	bl	10cac <exit@plt>
   10ef8:	str	r9, [sl]
   10efc:	b	10eb4 <main@@Base+0x16c>
   10f00:	ldr	r3, [pc, #512]	; 11108 <main@@Base+0x3c0>
   10f04:	str	r9, [r3]
   10f08:	b	10eb4 <main@@Base+0x16c>
   10f0c:	ldr	r1, [pc, #568]	; 1114c <main@@Base+0x404>
   10f10:	mov	r0, r5
   10f14:	bl	10be0 <strcmp@plt>
   10f18:	cmp	r0, #0
   10f1c:	bne	10f70 <main@@Base+0x228>
   10f20:	mov	r3, #0
   10f24:	str	r3, [sp, #4]
   10f28:	b	10eb4 <main@@Base+0x16c>
   10f2c:	ldr	r3, [sp]
   10f30:	mov	r4, #3
   10f34:	ldr	r0, [r3, #8]
   10f38:	bl	10c40 <coda_set_definition_path@plt>
   10f3c:	b	10e0c <main@@Base+0xc4>
   10f40:	bl	10bd4 <coda_set_option_perform_boundary_checks@plt>
   10f44:	mov	r0, r4
   10f48:	bl	10cdc <coda_set_option_perform_conversions@plt>
   10f4c:	ldr	r0, [sp, #4]
   10f50:	bl	10c1c <coda_set_option_use_mmap@plt>
   10f54:	bl	10c70 <coda_done@plt>
   10f58:	ldr	r3, [pc, #496]	; 11150 <main@@Base+0x408>
   10f5c:	ldr	r0, [r3]
   10f60:	cmp	r0, #0
   10f64:	bne	110a0 <main@@Base+0x358>
   10f68:	add	sp, sp, #1012	; 0x3f4
   10f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f70:	ldr	r1, [pc, #476]	; 11154 <main@@Base+0x40c>
   10f74:	mov	r0, r5
   10f78:	bl	10be0 <strcmp@plt>
   10f7c:	cmp	r0, #0
   10f80:	bne	10f90 <main@@Base+0x248>
   10f84:	sub	r3, r7, #1
   10f88:	cmp	r3, r4
   10f8c:	beq	10ff8 <main@@Base+0x2b0>
   10f90:	ldrb	r3, [r5]
   10f94:	cmp	r3, #45	; 0x2d
   10f98:	beq	110e4 <main@@Base+0x39c>
   10f9c:	bl	10cc4 <coda_init@plt>
   10fa0:	subs	r6, r0, #0
   10fa4:	bne	10ecc <main@@Base+0x184>
   10fa8:	bl	10bd4 <coda_set_option_perform_boundary_checks@plt>
   10fac:	mov	r0, r6
   10fb0:	bl	10cdc <coda_set_option_perform_conversions@plt>
   10fb4:	ldr	r0, [sp, #4]
   10fb8:	bl	10c1c <coda_set_option_use_mmap@plt>
   10fbc:	cmp	r7, r4
   10fc0:	ldrgt	r3, [sp]
   10fc4:	addgt	r5, r3, r4, lsl #2
   10fc8:	ble	10f54 <main@@Base+0x20c>
   10fcc:	ldr	r0, [r5], #4
   10fd0:	bl	1141c <_start@@Base+0x2a8>
   10fd4:	add	r4, r4, #1
   10fd8:	mov	r0, r6
   10fdc:	bl	10c10 <fflush@plt>
   10fe0:	cmp	r7, r4
   10fe4:	bne	10fcc <main@@Base+0x284>
   10fe8:	b	10f54 <main@@Base+0x20c>
   10fec:	bl	1129c <_start@@Base+0x128>
   10ff0:	mov	r0, #0
   10ff4:	bl	10cac <exit@plt>
   10ff8:	bl	10cc4 <coda_init@plt>
   10ffc:	subs	r7, r0, #0
   11000:	bne	10ecc <main@@Base+0x184>
   11004:	mov	r0, #0
   11008:	bl	10bd4 <coda_set_option_perform_boundary_checks@plt>
   1100c:	mov	r0, #0
   11010:	bl	10cdc <coda_set_option_perform_conversions@plt>
   11014:	ldr	r0, [sp, #4]
   11018:	bl	10c1c <coda_set_option_use_mmap@plt>
   1101c:	ldr	r5, [pc, #308]	; 11158 <main@@Base+0x410>
   11020:	mov	r6, #0
   11024:	mov	r4, r7
   11028:	b	11048 <main@@Base+0x300>
   1102c:	cmp	r0, #10
   11030:	beq	11078 <main@@Base+0x330>
   11034:	add	r3, sp, #8
   11038:	strb	r0, [r3, r4]
   1103c:	add	r4, r4, #1
   11040:	cmp	r4, #1000	; 0x3e8
   11044:	beq	110a8 <main@@Base+0x360>
   11048:	ldr	r0, [r5]
   1104c:	bl	10d30 <getc@plt>
   11050:	uxtb	r0, r0
   11054:	cmp	r0, #13
   11058:	bne	1102c <main@@Base+0x2e4>
   1105c:	ldr	r0, [r5]
   11060:	bl	10d30 <getc@plt>
   11064:	uxtb	r0, r0
   11068:	cmp	r0, #10
   1106c:	beq	11078 <main@@Base+0x330>
   11070:	ldr	r1, [r5]
   11074:	bl	10cd0 <ungetc@plt>
   11078:	add	r3, sp, #1008	; 0x3f0
   1107c:	add	r3, r3, r4
   11080:	cmp	r4, #0
   11084:	strb	r6, [r3, #-1000]	; 0xfffffc18
   11088:	beq	11024 <main@@Base+0x2dc>
   1108c:	add	r0, sp, #8
   11090:	bl	1141c <_start@@Base+0x2a8>
   11094:	mov	r0, r6
   11098:	bl	10c10 <fflush@plt>
   1109c:	b	11024 <main@@Base+0x2dc>
   110a0:	mov	r0, #1
   110a4:	bl	10cac <exit@plt>
   110a8:	ldr	r3, [pc, #172]	; 1115c <main@@Base+0x414>
   110ac:	mov	r2, #316	; 0x13c
   110b0:	ldr	r1, [pc, #168]	; 11160 <main@@Base+0x418>
   110b4:	ldr	r0, [pc, #168]	; 11164 <main@@Base+0x41c>
   110b8:	bl	10d3c <__assert_fail@plt>
   110bc:	bl	10d0c <coda_get_libcoda_version@plt>
   110c0:	mov	r1, r0
   110c4:	ldr	r0, [pc, #156]	; 11168 <main@@Base+0x420>
   110c8:	bl	10bec <printf@plt>
   110cc:	ldr	r0, [pc, #152]	; 1116c <main@@Base+0x424>
   110d0:	bl	10c7c <puts@plt>
   110d4:	mov	r0, #10
   110d8:	bl	10ce8 <putchar@plt>
   110dc:	mov	r0, #0
   110e0:	bl	10cac <exit@plt>
   110e4:	ldr	r3, [pc, #88]	; 11144 <main@@Base+0x3fc>
   110e8:	mov	r2, #25
   110ec:	mov	r1, #1
   110f0:	ldr	r3, [r3]
   110f4:	ldr	r0, [pc, #116]	; 11170 <main@@Base+0x428>
   110f8:	bl	10c58 <fwrite@plt>
   110fc:	bl	1129c <_start@@Base+0x128>
   11100:	mov	r0, #1
   11104:	bl	10cac <exit@plt>
   11108:	strheq	r2, [r2], -r4
   1110c:	strheq	r2, [r2], -r0
   11110:	andeq	r2, r2, r8, lsr #1
   11114:	andeq	r1, r1, r8, ror sp
   11118:	andeq	r1, r1, ip, ror sp
   1111c:	andeq	r1, r1, r4, lsl #27
   11120:	andeq	r1, r1, r8, lsl #27
   11124:	ldrdeq	r1, [r1], -ip
   11128:	andeq	r1, r1, r0, ror #27
   1112c:	andeq	r1, r1, r8, lsl #28
   11130:	andeq	r1, r1, r4, ror r9
   11134:	andeq	r1, r1, ip, lsl #28
   11138:	andeq	r1, r1, r4, ror #17
   1113c:	andeq	r1, r1, r0, lsl lr
   11140:	andeq	r1, r1, r0, ror #15
   11144:	muleq	r2, r8, r0
   11148:	strdeq	r1, [r1], -ip
   1114c:	ldrdeq	r1, [r1], -r4
   11150:	andeq	r2, r2, ip, lsr #1
   11154:	andeq	r1, r1, r4, lsl lr
   11158:	andeq	r2, r2, r0, lsr #1
   1115c:	andeq	r1, r1, ip, lsr #14
   11160:	andeq	r1, r1, r4, lsr lr
   11164:	andeq	r1, r1, ip, ror lr
   11168:	muleq	r1, r4, sp
   1116c:	andeq	r1, r1, ip, lsr #27
   11170:	andeq	r1, r1, r8, lsl lr

00011174 <_start@@Base>:
   11174:	mov	fp, #0
   11178:	mov	lr, #0
   1117c:	pop	{r1}		; (ldr r1, [sp], #4)
   11180:	mov	r2, sp
   11184:	push	{r2}		; (str r2, [sp, #-4]!)
   11188:	push	{r0}		; (str r0, [sp, #-4]!)
   1118c:	ldr	ip, [pc, #16]	; 111a4 <_start@@Base+0x30>
   11190:	push	{ip}		; (str ip, [sp, #-4]!)
   11194:	ldr	r0, [pc, #12]	; 111a8 <_start@@Base+0x34>
   11198:	ldr	r3, [pc, #12]	; 111ac <_start@@Base+0x38>
   1119c:	bl	10c94 <__libc_start_main@plt>
   111a0:	bl	10d24 <abort@plt>
   111a4:	andeq	r1, r1, ip, lsl r7
   111a8:	andeq	r0, r1, r8, asr #26
   111ac:			; <UNDEFINED> instruction: 0x000116bc
   111b0:	ldr	r3, [pc, #20]	; 111cc <_start@@Base+0x58>
   111b4:	ldr	r2, [pc, #20]	; 111d0 <_start@@Base+0x5c>
   111b8:	add	r3, pc, r3
   111bc:	ldr	r2, [r3, r2]
   111c0:	cmp	r2, #0
   111c4:	bxeq	lr
   111c8:	b	10ca0 <__gmon_start__@plt>
   111cc:	andeq	r0, r1, r0, asr #28
   111d0:	andeq	r0, r0, r8, lsl #1
   111d4:	ldr	r3, [pc, #28]	; 111f8 <_start@@Base+0x84>
   111d8:	ldr	r0, [pc, #28]	; 111fc <_start@@Base+0x88>
   111dc:	sub	r3, r3, r0
   111e0:	cmp	r3, #6
   111e4:	bxls	lr
   111e8:	ldr	r3, [pc, #16]	; 11200 <_start@@Base+0x8c>
   111ec:	cmp	r3, #0
   111f0:	bxeq	lr
   111f4:	bx	r3
   111f8:	muleq	r2, r7, r0
   111fc:	muleq	r2, r4, r0
   11200:	andeq	r0, r0, r0
   11204:	ldr	r1, [pc, #36]	; 11230 <_start@@Base+0xbc>
   11208:	ldr	r0, [pc, #36]	; 11234 <_start@@Base+0xc0>
   1120c:	sub	r1, r1, r0
   11210:	asr	r1, r1, #2
   11214:	add	r1, r1, r1, lsr #31
   11218:	asrs	r1, r1, #1
   1121c:	bxeq	lr
   11220:	ldr	r3, [pc, #16]	; 11238 <_start@@Base+0xc4>
   11224:	cmp	r3, #0
   11228:	bxeq	lr
   1122c:	bx	r3
   11230:	muleq	r2, r4, r0
   11234:	muleq	r2, r4, r0
   11238:	andeq	r0, r0, r0
   1123c:	push	{r4, lr}
   11240:	ldr	r4, [pc, #24]	; 11260 <_start@@Base+0xec>
   11244:	ldrb	r3, [r4]
   11248:	cmp	r3, #0
   1124c:	popne	{r4, pc}
   11250:	bl	111d4 <_start@@Base+0x60>
   11254:	mov	r3, #1
   11258:	strb	r3, [r4]
   1125c:	pop	{r4, pc}
   11260:	andeq	r2, r2, r4, lsr #1
   11264:	ldr	r0, [pc, #40]	; 11294 <_start@@Base+0x120>
   11268:	ldr	r3, [r0]
   1126c:	cmp	r3, #0
   11270:	bne	11278 <_start@@Base+0x104>
   11274:	b	11204 <_start@@Base+0x90>
   11278:	ldr	r3, [pc, #24]	; 11298 <_start@@Base+0x124>
   1127c:	cmp	r3, #0
   11280:	beq	11274 <_start@@Base+0x100>
   11284:	push	{r4, lr}
   11288:	blx	r3
   1128c:	pop	{r4, lr}
   11290:	b	11204 <_start@@Base+0x90>
   11294:	strdeq	r1, [r2], -ip
   11298:	andeq	r0, r0, r0
   1129c:	push	{r4, lr}
   112a0:	ldr	r0, [pc, #260]	; 113ac <_start@@Base+0x238>
   112a4:	bl	10c7c <puts@plt>
   112a8:	ldr	r0, [pc, #256]	; 113b0 <_start@@Base+0x23c>
   112ac:	bl	10c7c <puts@plt>
   112b0:	ldr	r0, [pc, #252]	; 113b4 <_start@@Base+0x240>
   112b4:	bl	10c7c <puts@plt>
   112b8:	ldr	r0, [pc, #248]	; 113b8 <_start@@Base+0x244>
   112bc:	bl	10c7c <puts@plt>
   112c0:	ldr	r0, [pc, #244]	; 113bc <_start@@Base+0x248>
   112c4:	bl	10c7c <puts@plt>
   112c8:	ldr	r0, [pc, #240]	; 113c0 <_start@@Base+0x24c>
   112cc:	bl	10c7c <puts@plt>
   112d0:	ldr	r0, [pc, #236]	; 113c4 <_start@@Base+0x250>
   112d4:	bl	10c7c <puts@plt>
   112d8:	ldr	r0, [pc, #232]	; 113c8 <_start@@Base+0x254>
   112dc:	bl	10c7c <puts@plt>
   112e0:	ldr	r0, [pc, #228]	; 113cc <_start@@Base+0x258>
   112e4:	bl	10c7c <puts@plt>
   112e8:	ldr	r0, [pc, #224]	; 113d0 <_start@@Base+0x25c>
   112ec:	bl	10c7c <puts@plt>
   112f0:	ldr	r0, [pc, #220]	; 113d4 <_start@@Base+0x260>
   112f4:	bl	10c7c <puts@plt>
   112f8:	ldr	r0, [pc, #216]	; 113d8 <_start@@Base+0x264>
   112fc:	bl	10c7c <puts@plt>
   11300:	ldr	r0, [pc, #212]	; 113dc <_start@@Base+0x268>
   11304:	bl	10c7c <puts@plt>
   11308:	ldr	r0, [pc, #208]	; 113e0 <_start@@Base+0x26c>
   1130c:	bl	10c7c <puts@plt>
   11310:	ldr	r0, [pc, #204]	; 113e4 <_start@@Base+0x270>
   11314:	bl	10c7c <puts@plt>
   11318:	mov	r0, #10
   1131c:	bl	10ce8 <putchar@plt>
   11320:	ldr	r0, [pc, #192]	; 113e8 <_start@@Base+0x274>
   11324:	bl	10c7c <puts@plt>
   11328:	ldr	r0, [pc, #188]	; 113ec <_start@@Base+0x278>
   1132c:	bl	10c7c <puts@plt>
   11330:	mov	r0, #10
   11334:	bl	10ce8 <putchar@plt>
   11338:	ldr	r0, [pc, #176]	; 113f0 <_start@@Base+0x27c>
   1133c:	bl	10c7c <puts@plt>
   11340:	ldr	r0, [pc, #172]	; 113f4 <_start@@Base+0x280>
   11344:	bl	10c7c <puts@plt>
   11348:	mov	r0, #10
   1134c:	bl	10ce8 <putchar@plt>
   11350:	ldr	r0, [pc, #160]	; 113f8 <_start@@Base+0x284>
   11354:	bl	10c7c <puts@plt>
   11358:	ldr	r0, [pc, #156]	; 113fc <_start@@Base+0x288>
   1135c:	bl	10c7c <puts@plt>
   11360:	mov	r0, #10
   11364:	bl	10ce8 <putchar@plt>
   11368:	ldr	r0, [pc, #144]	; 11400 <_start@@Base+0x28c>
   1136c:	bl	10c7c <puts@plt>
   11370:	ldr	r0, [pc, #140]	; 11404 <_start@@Base+0x290>
   11374:	bl	10c7c <puts@plt>
   11378:	ldr	r0, [pc, #136]	; 11408 <_start@@Base+0x294>
   1137c:	bl	10c7c <puts@plt>
   11380:	ldr	r0, [pc, #132]	; 1140c <_start@@Base+0x298>
   11384:	bl	10c7c <puts@plt>
   11388:	ldr	r0, [pc, #128]	; 11410 <_start@@Base+0x29c>
   1138c:	bl	10c7c <puts@plt>
   11390:	ldr	r0, [pc, #124]	; 11414 <_start@@Base+0x2a0>
   11394:	bl	10c7c <puts@plt>
   11398:	ldr	r0, [pc, #120]	; 11418 <_start@@Base+0x2a4>
   1139c:	bl	10c7c <puts@plt>
   113a0:	mov	r0, #10
   113a4:	pop	{r4, lr}
   113a8:	b	10ce8 <putchar@plt>
   113ac:	andeq	r1, r1, r4, lsr r7
   113b0:	andeq	r1, r1, ip, lsr r7
   113b4:	andeq	r1, r1, r4, ror r7
   113b8:			; <UNDEFINED> instruction: 0x000117bc
   113bc:	ldrdeq	r1, [r1], -r0
   113c0:	strdeq	r1, [r1], -r0
   113c4:	andeq	r1, r1, r0, asr #16
   113c8:	andeq	r1, r1, r8, lsl #17
   113cc:	ldrdeq	r1, [r1], -r4
   113d0:	andeq	r1, r1, ip, ror #17
   113d4:	andeq	r1, r1, ip, lsr #18
   113d8:	andeq	r1, r1, r4, ror #18
   113dc:	andeq	r1, r1, r0, lsl #19
   113e0:	andeq	r1, r1, r8, asr #19
   113e4:	andeq	r1, r1, r0, ror #19
   113e8:	andeq	r1, r1, r0, lsr #20
   113ec:	andeq	r1, r1, r0, ror sl
   113f0:	andeq	r1, r1, ip, lsl #21
   113f4:	andeq	r1, r1, r8, lsr #21
   113f8:	andeq	r1, r1, r8, asr #21
   113fc:	andeq	r1, r1, r4, ror #21
   11400:	andeq	r1, r1, r8, lsl fp
   11404:	andeq	r1, r1, r8, ror #22
   11408:			; <UNDEFINED> instruction: 0x00011bb4
   1140c:	andeq	r1, r1, r0, ror #23
   11410:	andeq	r1, r1, ip, lsr #24
   11414:	andeq	r1, r1, r4, ror ip
   11418:			; <UNDEFINED> instruction: 0x00011cb4
   1141c:	push	{r4, lr}
   11420:	sub	sp, sp, #40	; 0x28
   11424:	mov	r4, r0
   11428:	bl	10c7c <puts@plt>
   1142c:	add	r2, sp, #28
   11430:	add	r3, sp, #24
   11434:	str	r2, [sp, #4]
   11438:	str	r3, [sp]
   1143c:	mov	r0, r4
   11440:	add	r3, sp, #20
   11444:	add	r2, sp, #16
   11448:	add	r1, sp, #32
   1144c:	bl	10c4c <coda_recognize_file@plt>
   11450:	cmp	r0, #0
   11454:	bne	11500 <_start@@Base+0x38c>
   11458:	ldr	r3, [pc, #480]	; 11640 <_start@@Base+0x4cc>
   1145c:	ldr	r3, [r3]
   11460:	cmp	r3, #0
   11464:	beq	11480 <_start@@Base+0x30c>
   11468:	ldr	r3, [sp, #20]
   1146c:	cmp	r3, #0
   11470:	beq	115b8 <_start@@Base+0x444>
   11474:	ldr	r3, [sp, #24]
   11478:	cmp	r3, #0
   1147c:	beq	115b8 <_start@@Base+0x444>
   11480:	ldr	r3, [pc, #444]	; 11644 <_start@@Base+0x4d0>
   11484:	ldr	r3, [r3]
   11488:	cmp	r3, #0
   1148c:	bne	11574 <_start@@Base+0x400>
   11490:	add	r1, sp, #12
   11494:	mov	r0, r4
   11498:	bl	10c04 <coda_open@plt>
   1149c:	cmp	r0, #0
   114a0:	bne	11538 <_start@@Base+0x3c4>
   114a4:	ldr	r1, [pc, #412]	; 11648 <_start@@Base+0x4d4>
   114a8:	mov	r3, #0
   114ac:	ldr	r2, [pc, #408]	; 1164c <_start@@Base+0x4d8>
   114b0:	ldr	r1, [r1]
   114b4:	ldr	r0, [sp, #12]
   114b8:	clz	r1, r1
   114bc:	lsr	r1, r1, #5
   114c0:	bl	10c88 <coda_product_check@plt>
   114c4:	cmp	r0, #0
   114c8:	beq	115d0 <_start@@Base+0x45c>
   114cc:	bl	10d18 <coda_get_errno@plt>
   114d0:	ldr	r0, [r0]
   114d4:	bl	10d00 <coda_errno_to_string@plt>
   114d8:	mov	r1, r0
   114dc:	ldr	r0, [pc, #364]	; 11650 <_start@@Base+0x4dc>
   114e0:	bl	10bec <printf@plt>
   114e4:	ldr	r3, [pc, #360]	; 11654 <_start@@Base+0x4e0>
   114e8:	mov	r2, #1
   114ec:	ldr	r0, [sp, #12]
   114f0:	str	r2, [r3]
   114f4:	bl	10cf4 <coda_close@plt>
   114f8:	add	sp, sp, #40	; 0x28
   114fc:	pop	{r4, pc}
   11500:	bl	10d18 <coda_get_errno@plt>
   11504:	ldr	r0, [r0]
   11508:	bl	10d00 <coda_errno_to_string@plt>
   1150c:	mov	r1, r0
   11510:	ldr	r0, [pc, #312]	; 11650 <_start@@Base+0x4dc>
   11514:	bl	10bec <printf@plt>
   11518:	mov	r1, #0
   1151c:	mov	r0, r1
   11520:	bl	10bf8 <coda_set_error@plt>
   11524:	ldr	r3, [pc, #296]	; 11654 <_start@@Base+0x4e0>
   11528:	mov	r2, #1
   1152c:	str	r2, [r3]
   11530:	add	sp, sp, #40	; 0x28
   11534:	pop	{r4, pc}
   11538:	bl	10d18 <coda_get_errno@plt>
   1153c:	ldr	r3, [r0]
   11540:	cmn	r3, #21
   11544:	beq	11614 <_start@@Base+0x4a0>
   11548:	bl	10d18 <coda_get_errno@plt>
   1154c:	ldr	r0, [r0]
   11550:	bl	10d00 <coda_errno_to_string@plt>
   11554:	mov	r1, r0
   11558:	ldr	r0, [pc, #240]	; 11650 <_start@@Base+0x4dc>
   1155c:	bl	10bec <printf@plt>
   11560:	ldr	r3, [pc, #236]	; 11654 <_start@@Base+0x4e0>
   11564:	mov	r2, #1
   11568:	str	r2, [r3]
   1156c:	add	sp, sp, #40	; 0x28
   11570:	pop	{r4, pc}
   11574:	ldr	r0, [sp, #16]
   11578:	bl	10c64 <coda_type_get_format_name@plt>
   1157c:	mov	r1, r0
   11580:	ldr	r0, [pc, #208]	; 11658 <_start@@Base+0x4e4>
   11584:	bl	10bec <printf@plt>
   11588:	ldr	r1, [sp, #20]
   1158c:	cmp	r1, #0
   11590:	beq	115ac <_start@@Base+0x438>
   11594:	ldr	r2, [sp, #24]
   11598:	cmp	r2, #0
   1159c:	beq	115ac <_start@@Base+0x438>
   115a0:	ldr	r3, [sp, #28]
   115a4:	ldr	r0, [pc, #176]	; 1165c <_start@@Base+0x4e8>
   115a8:	bl	10bec <printf@plt>
   115ac:	mov	r0, #10
   115b0:	bl	10ce8 <putchar@plt>
   115b4:	b	11490 <_start@@Base+0x31c>
   115b8:	ldr	r0, [pc, #160]	; 11660 <_start@@Base+0x4ec>
   115bc:	bl	10c7c <puts@plt>
   115c0:	ldr	r3, [pc, #140]	; 11654 <_start@@Base+0x4e0>
   115c4:	mov	r2, #1
   115c8:	str	r2, [r3]
   115cc:	b	114f8 <_start@@Base+0x384>
   115d0:	ldr	r0, [sp, #12]
   115d4:	bl	10cf4 <coda_close@plt>
   115d8:	cmp	r0, #0
   115dc:	beq	11608 <_start@@Base+0x494>
   115e0:	bl	10d18 <coda_get_errno@plt>
   115e4:	ldr	r0, [r0]
   115e8:	bl	10d00 <coda_errno_to_string@plt>
   115ec:	mov	r1, r0
   115f0:	ldr	r0, [pc, #108]	; 11664 <_start@@Base+0x4f0>
   115f4:	bl	10bec <printf@plt>
   115f8:	ldr	r3, [pc, #84]	; 11654 <_start@@Base+0x4e0>
   115fc:	mov	r2, #1
   11600:	str	r2, [r3]
   11604:	b	114f8 <_start@@Base+0x384>
   11608:	mov	r0, #10
   1160c:	bl	10ce8 <putchar@plt>
   11610:	b	114f8 <_start@@Base+0x384>
   11614:	mov	r0, #0
   11618:	bl	10c1c <coda_set_option_use_mmap@plt>
   1161c:	add	r1, sp, #12
   11620:	mov	r0, r4
   11624:	bl	10c04 <coda_open@plt>
   11628:	mov	r4, r0
   1162c:	mov	r0, #1
   11630:	bl	10c1c <coda_set_option_use_mmap@plt>
   11634:	cmp	r4, #0
   11638:	bne	11548 <_start@@Base+0x3d4>
   1163c:	b	114a4 <_start@@Base+0x330>
   11640:	andeq	r2, r2, r8, lsr #1
   11644:	strheq	r2, [r2], -r0
   11648:	strheq	r2, [r2], -r4
   1164c:	andeq	r1, r1, r8, ror #12
   11650:	strdeq	r1, [r1], -r4
   11654:	andeq	r2, r2, ip, lsr #1
   11658:	andeq	r1, r1, r0, lsr sp
   1165c:	andeq	r1, r1, r8, asr #26
   11660:	andeq	r1, r1, r4, lsl #26
   11664:	andeq	r1, r1, r4, asr sp
   11668:	push	{r4, lr}
   1166c:	mov	r4, r0
   11670:	ldr	r0, [pc, #52]	; 116ac <_start@@Base+0x538>
   11674:	bl	10bec <printf@plt>
   11678:	cmp	r4, #0
   1167c:	beq	11694 <_start@@Base+0x520>
   11680:	ldr	r0, [pc, #40]	; 116b0 <_start@@Base+0x53c>
   11684:	bl	10bec <printf@plt>
   11688:	mov	r0, r4
   1168c:	ldr	r1, [pc, #32]	; 116b4 <_start@@Base+0x540>
   11690:	bl	10c28 <coda_cursor_print_path@plt>
   11694:	mov	r0, #10
   11698:	bl	10ce8 <putchar@plt>
   1169c:	ldr	r3, [pc, #20]	; 116b8 <_start@@Base+0x544>
   116a0:	mov	r2, #1
   116a4:	str	r2, [r3]
   116a8:	pop	{r4, pc}
   116ac:	andeq	r1, r1, r4, ror #26
   116b0:	andeq	r1, r1, r0, ror sp
   116b4:	andeq	r0, r1, ip, ror #23
   116b8:	andeq	r2, r2, ip, lsr #1

000116bc <__libc_csu_init@@Base>:
   116bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   116c0:	mov	r7, r0
   116c4:	ldr	r6, [pc, #72]	; 11714 <__libc_csu_init@@Base+0x58>
   116c8:	ldr	r5, [pc, #72]	; 11718 <__libc_csu_init@@Base+0x5c>
   116cc:	add	r6, pc, r6
   116d0:	add	r5, pc, r5
   116d4:	sub	r6, r6, r5
   116d8:	mov	r8, r1
   116dc:	mov	r9, r2
   116e0:	bl	10bb4 <coda_set_option_perform_boundary_checks@plt-0x20>
   116e4:	asrs	r6, r6, #2
   116e8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   116ec:	mov	r4, #0
   116f0:	add	r4, r4, #1
   116f4:	ldr	r3, [r5], #4
   116f8:	mov	r2, r9
   116fc:	mov	r1, r8
   11700:	mov	r0, r7
   11704:	blx	r3
   11708:	cmp	r6, r4
   1170c:	bne	116f0 <__libc_csu_init@@Base+0x34>
   11710:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11714:	andeq	r0, r1, r4, lsr #16
   11718:	andeq	r0, r1, ip, lsl r8

0001171c <__libc_csu_fini@@Base>:
   1171c:	bx	lr

Disassembly of section .fini:

00011720 <.fini>:
   11720:	push	{r3, lr}
   11724:	pop	{r3, pc}
