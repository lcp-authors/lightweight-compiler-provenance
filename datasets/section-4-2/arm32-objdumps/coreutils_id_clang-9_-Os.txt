
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

000110b8 <.init>:
   110b8:	push	{r3, lr}
   110bc:	bl	113fc <__assert_fail@plt+0x48>
   110c0:	pop	{r3, pc}

Disassembly of section .plt:

000110c4 <calloc@plt-0x14>:
   110c4:	push	{lr}		; (str lr, [sp, #-4]!)
   110c8:	ldr	lr, [pc, #4]	; 110d4 <calloc@plt-0x4>
   110cc:	add	lr, pc, lr
   110d0:	ldr	pc, [lr, #8]!
   110d4:	andeq	r5, r1, ip, lsr #30

000110d8 <calloc@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #86016	; 0x15000
   110e0:	ldr	pc, [ip, #3884]!	; 0xf2c

000110e4 <endgrent@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #86016	; 0x15000
   110ec:	ldr	pc, [ip, #3876]!	; 0xf24

000110f0 <fputs_unlocked@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #86016	; 0x15000
   110f8:	ldr	pc, [ip, #3868]!	; 0xf1c

000110fc <raise@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #86016	; 0x15000
   11104:	ldr	pc, [ip, #3860]!	; 0xf14

00011108 <getpwnam@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #86016	; 0x15000
   11110:	ldr	pc, [ip, #3852]!	; 0xf0c

00011114 <is_selinux_enabled@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #86016	; 0x15000
   1111c:	ldr	pc, [ip, #3844]!	; 0xf04

00011120 <strcmp@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #86016	; 0x15000
   11128:	ldr	pc, [ip, #3836]!	; 0xefc

0001112c <getpwuid@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #86016	; 0x15000
   11134:	ldr	pc, [ip, #3828]!	; 0xef4

00011138 <fflush@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #86016	; 0x15000
   11140:	ldr	pc, [ip, #3820]!	; 0xeec

00011144 <getuid@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #86016	; 0x15000
   1114c:	ldr	pc, [ip, #3812]!	; 0xee4

00011150 <free@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #86016	; 0x15000
   11158:	ldr	pc, [ip, #3804]!	; 0xedc

0001115c <_exit@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #86016	; 0x15000
   11164:	ldr	pc, [ip, #3796]!	; 0xed4

00011168 <memcpy@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #86016	; 0x15000
   11170:	ldr	pc, [ip, #3788]!	; 0xecc

00011174 <mbsinit@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #86016	; 0x15000
   1117c:	ldr	pc, [ip, #3780]!	; 0xec4

00011180 <dcgettext@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #86016	; 0x15000
   11188:	ldr	pc, [ip, #3772]!	; 0xebc

0001118c <realloc@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #86016	; 0x15000
   11194:	ldr	pc, [ip, #3764]!	; 0xeb4

00011198 <textdomain@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #86016	; 0x15000
   111a0:	ldr	pc, [ip, #3756]!	; 0xeac

000111a4 <geteuid@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #86016	; 0x15000
   111ac:	ldr	pc, [ip, #3748]!	; 0xea4

000111b0 <iswprint@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #86016	; 0x15000
   111b8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111bc <getegid@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #86016	; 0x15000
   111c4:	ldr	pc, [ip, #3732]!	; 0xe94

000111c8 <lseek64@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #86016	; 0x15000
   111d0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111d4 <__ctype_get_mb_cur_max@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #86016	; 0x15000
   111dc:	ldr	pc, [ip, #3716]!	; 0xe84

000111e0 <getcon@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #86016	; 0x15000
   111e8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111ec <__fpending@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #86016	; 0x15000
   111f4:	ldr	pc, [ip, #3700]!	; 0xe74

000111f8 <ferror_unlocked@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #86016	; 0x15000
   11200:	ldr	pc, [ip, #3692]!	; 0xe6c

00011204 <mbrtowc@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #86016	; 0x15000
   1120c:	ldr	pc, [ip, #3684]!	; 0xe64

00011210 <error@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #86016	; 0x15000
   11218:	ldr	pc, [ip, #3676]!	; 0xe5c

0001121c <getenv@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #86016	; 0x15000
   11224:	ldr	pc, [ip, #3668]!	; 0xe54

00011228 <malloc@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #86016	; 0x15000
   11230:	ldr	pc, [ip, #3660]!	; 0xe4c

00011234 <__libc_start_main@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #86016	; 0x15000
   1123c:	ldr	pc, [ip, #3652]!	; 0xe44

00011240 <__freading@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #86016	; 0x15000
   11248:	ldr	pc, [ip, #3644]!	; 0xe3c

0001124c <__gmon_start__@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #86016	; 0x15000
   11254:	ldr	pc, [ip, #3636]!	; 0xe34

00011258 <getopt_long@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #86016	; 0x15000
   11260:	ldr	pc, [ip, #3628]!	; 0xe2c

00011264 <__ctype_b_loc@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #86016	; 0x15000
   1126c:	ldr	pc, [ip, #3620]!	; 0xe24

00011270 <exit@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #86016	; 0x15000
   11278:	ldr	pc, [ip, #3612]!	; 0xe1c

0001127c <bcmp@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #86016	; 0x15000
   11284:	ldr	pc, [ip, #3604]!	; 0xe14

00011288 <strtoul@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #86016	; 0x15000
   11290:	ldr	pc, [ip, #3596]!	; 0xe0c

00011294 <strlen@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #86016	; 0x15000
   1129c:	ldr	pc, [ip, #3588]!	; 0xe04

000112a0 <strchr@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #86016	; 0x15000
   112a8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112ac <__errno_location@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #86016	; 0x15000
   112b4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112b8 <__cxa_atexit@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #86016	; 0x15000
   112c0:	ldr	pc, [ip, #3564]!	; 0xdec

000112c4 <getgid@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #86016	; 0x15000
   112cc:	ldr	pc, [ip, #3556]!	; 0xde4

000112d0 <getgrouplist@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #86016	; 0x15000
   112d8:	ldr	pc, [ip, #3548]!	; 0xddc

000112dc <memset@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #86016	; 0x15000
   112e4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112e8 <__printf_chk@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #86016	; 0x15000
   112f0:	ldr	pc, [ip, #3532]!	; 0xdcc

000112f4 <fileno@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #86016	; 0x15000
   112fc:	ldr	pc, [ip, #3524]!	; 0xdc4

00011300 <__fprintf_chk@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #86016	; 0x15000
   11308:	ldr	pc, [ip, #3516]!	; 0xdbc

0001130c <fclose@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #86016	; 0x15000
   11314:	ldr	pc, [ip, #3508]!	; 0xdb4

00011318 <fseeko64@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #86016	; 0x15000
   11320:	ldr	pc, [ip, #3500]!	; 0xdac

00011324 <setlocale@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #86016	; 0x15000
   1132c:	ldr	pc, [ip, #3492]!	; 0xda4

00011330 <endpwent@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #86016	; 0x15000
   11338:	ldr	pc, [ip, #3484]!	; 0xd9c

0001133c <strrchr@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #86016	; 0x15000
   11344:	ldr	pc, [ip, #3476]!	; 0xd94

00011348 <nl_langinfo@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #86016	; 0x15000
   11350:	ldr	pc, [ip, #3468]!	; 0xd8c

00011354 <getgroups@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #86016	; 0x15000
   1135c:	ldr	pc, [ip, #3460]!	; 0xd84

00011360 <bindtextdomain@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #86016	; 0x15000
   11368:	ldr	pc, [ip, #3452]!	; 0xd7c

0001136c <fputs@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #86016	; 0x15000
   11374:	ldr	pc, [ip, #3444]!	; 0xd74

00011378 <strncmp@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #86016	; 0x15000
   11380:	ldr	pc, [ip, #3436]!	; 0xd6c

00011384 <abort@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #86016	; 0x15000
   1138c:	ldr	pc, [ip, #3428]!	; 0xd64

00011390 <getgrgid@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #86016	; 0x15000
   11398:	ldr	pc, [ip, #3420]!	; 0xd5c

0001139c <getgrnam@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #86016	; 0x15000
   113a4:	ldr	pc, [ip, #3412]!	; 0xd54

000113a8 <putchar_unlocked@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #86016	; 0x15000
   113b0:	ldr	pc, [ip, #3404]!	; 0xd4c

000113b4 <__assert_fail@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #86016	; 0x15000
   113bc:	ldr	pc, [ip, #3396]!	; 0xd44

Disassembly of section .text:

000113c0 <.text>:
   113c0:	mov	fp, #0
   113c4:	mov	lr, #0
   113c8:	pop	{r1}		; (ldr r1, [sp], #4)
   113cc:	mov	r2, sp
   113d0:	push	{r2}		; (str r2, [sp, #-4]!)
   113d4:	push	{r0}		; (str r0, [sp, #-4]!)
   113d8:	ldr	ip, [pc, #16]	; 113f0 <__assert_fail@plt+0x3c>
   113dc:	push	{ip}		; (str ip, [sp, #-4]!)
   113e0:	ldr	r0, [pc, #12]	; 113f4 <__assert_fail@plt+0x40>
   113e4:	ldr	r3, [pc, #12]	; 113f8 <__assert_fail@plt+0x44>
   113e8:	bl	11234 <__libc_start_main@plt>
   113ec:	bl	11384 <abort@plt>
   113f0:	andeq	r5, r1, r0, lsr #24
   113f4:	andeq	r1, r1, ip, lsl #14
   113f8:	andeq	r5, r1, r0, asr #23
   113fc:	ldr	r3, [pc, #20]	; 11418 <__assert_fail@plt+0x64>
   11400:	ldr	r2, [pc, #20]	; 1141c <__assert_fail@plt+0x68>
   11404:	add	r3, pc, r3
   11408:	ldr	r2, [r3, r2]
   1140c:	cmp	r2, #0
   11410:	bxeq	lr
   11414:	b	1124c <__gmon_start__@plt>
   11418:	strdeq	r5, [r1], -r4
   1141c:	andeq	r0, r0, r4, lsl #2
   11420:	ldr	r0, [pc, #24]	; 11440 <__assert_fail@plt+0x8c>
   11424:	ldr	r3, [pc, #24]	; 11444 <__assert_fail@plt+0x90>
   11428:	cmp	r3, r0
   1142c:	bxeq	lr
   11430:	ldr	r3, [pc, #16]	; 11448 <__assert_fail@plt+0x94>
   11434:	cmp	r3, #0
   11438:	bxeq	lr
   1143c:	bx	r3
   11440:	andeq	r7, r2, r0, ror #2
   11444:	andeq	r7, r2, r0, ror #2
   11448:	andeq	r0, r0, r0
   1144c:	ldr	r0, [pc, #36]	; 11478 <__assert_fail@plt+0xc4>
   11450:	ldr	r1, [pc, #36]	; 1147c <__assert_fail@plt+0xc8>
   11454:	sub	r1, r1, r0
   11458:	asr	r1, r1, #2
   1145c:	add	r1, r1, r1, lsr #31
   11460:	asrs	r1, r1, #1
   11464:	bxeq	lr
   11468:	ldr	r3, [pc, #16]	; 11480 <__assert_fail@plt+0xcc>
   1146c:	cmp	r3, #0
   11470:	bxeq	lr
   11474:	bx	r3
   11478:	andeq	r7, r2, r0, ror #2
   1147c:	andeq	r7, r2, r0, ror #2
   11480:	andeq	r0, r0, r0
   11484:	push	{r4, lr}
   11488:	ldr	r4, [pc, #24]	; 114a8 <__assert_fail@plt+0xf4>
   1148c:	ldrb	r3, [r4]
   11490:	cmp	r3, #0
   11494:	popne	{r4, pc}
   11498:	bl	11420 <__assert_fail@plt+0x6c>
   1149c:	mov	r3, #1
   114a0:	strb	r3, [r4]
   114a4:	pop	{r4, pc}
   114a8:	andeq	r7, r2, r8, ror r1
   114ac:	b	1144c <__assert_fail@plt+0x98>
   114b0:	push	{fp, lr}
   114b4:	mov	fp, sp
   114b8:	sub	sp, sp, #56	; 0x38
   114bc:	mov	r8, r0
   114c0:	cmp	r0, #0
   114c4:	bne	116cc <__assert_fail@plt+0x318>
   114c8:	movw	r1, #23667	; 0x5c73
   114cc:	mov	r0, #0
   114d0:	mov	r2, #5
   114d4:	movt	r1, #1
   114d8:	bl	11180 <dcgettext@plt>
   114dc:	mov	r1, r0
   114e0:	movw	r0, #29156	; 0x71e4
   114e4:	movt	r0, #2
   114e8:	ldr	r2, [r0]
   114ec:	mov	r0, #1
   114f0:	bl	112e8 <__printf_chk@plt>
   114f4:	movw	r1, #23700	; 0x5c94
   114f8:	mov	r0, #0
   114fc:	mov	r2, #5
   11500:	movt	r1, #1
   11504:	bl	11180 <dcgettext@plt>
   11508:	movw	r9, #29044	; 0x7174
   1150c:	movt	r9, #2
   11510:	ldr	r1, [r9]
   11514:	bl	110f0 <fputs_unlocked@plt>
   11518:	movw	r1, #23808	; 0x5d00
   1151c:	mov	r0, #0
   11520:	mov	r2, #5
   11524:	movt	r1, #1
   11528:	bl	11180 <dcgettext@plt>
   1152c:	ldr	r1, [r9]
   11530:	bl	110f0 <fputs_unlocked@plt>
   11534:	movw	r1, #24329	; 0x5f09
   11538:	mov	r0, #0
   1153c:	mov	r2, #5
   11540:	movt	r1, #1
   11544:	bl	11180 <dcgettext@plt>
   11548:	ldr	r1, [r9]
   1154c:	bl	110f0 <fputs_unlocked@plt>
   11550:	movw	r1, #24374	; 0x5f36
   11554:	mov	r0, #0
   11558:	mov	r2, #5
   1155c:	movt	r1, #1
   11560:	bl	11180 <dcgettext@plt>
   11564:	ldr	r1, [r9]
   11568:	bl	110f0 <fputs_unlocked@plt>
   1156c:	movw	r1, #24428	; 0x5f6c
   11570:	mov	r0, #0
   11574:	mov	r2, #5
   11578:	movt	r1, #1
   1157c:	bl	11180 <dcgettext@plt>
   11580:	ldr	r1, [r9]
   11584:	bl	110f0 <fputs_unlocked@plt>
   11588:	movw	r0, #25648	; 0x6430
   1158c:	mov	r6, sp
   11590:	movt	r0, #1
   11594:	mov	r1, r6
   11598:	ldm	r0!, {r2, r3, r4, r5}
   1159c:	stmia	r1!, {r2, r3, r4, r5}
   115a0:	ldm	r0!, {r2, r3, r4, r5, r7}
   115a4:	stmia	r1!, {r2, r3, r4, r5, r7}
   115a8:	ldm	r0, {r2, r3, r4, r5, r7}
   115ac:	stm	r1, {r2, r3, r4, r5, r7}
   115b0:	movw	r1, #24978	; 0x6192
   115b4:	movw	r5, #24499	; 0x5fb3
   115b8:	movt	r1, #1
   115bc:	movt	r5, #1
   115c0:	mov	r0, r5
   115c4:	bl	11120 <strcmp@plt>
   115c8:	cmp	r0, #0
   115cc:	ldrne	r1, [r6, #8]!
   115d0:	cmpne	r1, #0
   115d4:	bne	115c0 <__assert_fail@plt+0x20c>
   115d8:	movw	r1, #25073	; 0x61f1
   115dc:	ldr	r6, [r6, #4]
   115e0:	mov	r0, #0
   115e4:	mov	r2, #5
   115e8:	movt	r1, #1
   115ec:	bl	11180 <dcgettext@plt>
   115f0:	movw	r2, #24590	; 0x600e
   115f4:	movw	r3, #25096	; 0x6208
   115f8:	mov	r1, r0
   115fc:	mov	r0, #1
   11600:	movt	r2, #1
   11604:	movt	r3, #1
   11608:	bl	112e8 <__printf_chk@plt>
   1160c:	cmp	r6, #0
   11610:	mov	r0, #5
   11614:	mov	r1, #0
   11618:	moveq	r6, r5
   1161c:	bl	11324 <setlocale@plt>
   11620:	cmp	r0, #0
   11624:	beq	1165c <__assert_fail@plt+0x2a8>
   11628:	movw	r1, #25136	; 0x6230
   1162c:	mov	r2, #3
   11630:	movt	r1, #1
   11634:	bl	11378 <strncmp@plt>
   11638:	cmp	r0, #0
   1163c:	beq	1165c <__assert_fail@plt+0x2a8>
   11640:	movw	r1, #25140	; 0x6234
   11644:	mov	r0, #0
   11648:	mov	r2, #5
   1164c:	movt	r1, #1
   11650:	bl	11180 <dcgettext@plt>
   11654:	ldr	r1, [r9]
   11658:	bl	110f0 <fputs_unlocked@plt>
   1165c:	movw	r1, #25211	; 0x627b
   11660:	mov	r0, #0
   11664:	mov	r2, #5
   11668:	movt	r1, #1
   1166c:	bl	11180 <dcgettext@plt>
   11670:	movw	r2, #25096	; 0x6208
   11674:	mov	r1, r0
   11678:	mov	r0, #1
   1167c:	mov	r3, r5
   11680:	movt	r2, #1
   11684:	bl	112e8 <__printf_chk@plt>
   11688:	movw	r1, #25238	; 0x6296
   1168c:	mov	r0, #0
   11690:	mov	r2, #5
   11694:	movt	r1, #1
   11698:	bl	11180 <dcgettext@plt>
   1169c:	mov	r1, r0
   116a0:	movw	r0, #25006	; 0x61ae
   116a4:	movw	r3, #23807	; 0x5cff
   116a8:	cmp	r6, r5
   116ac:	mov	r2, r6
   116b0:	movt	r0, #1
   116b4:	movt	r3, #1
   116b8:	moveq	r3, r0
   116bc:	mov	r0, #1
   116c0:	bl	112e8 <__printf_chk@plt>
   116c4:	mov	r0, r8
   116c8:	bl	11270 <exit@plt>
   116cc:	movw	r0, #29040	; 0x7170
   116d0:	movw	r1, #23628	; 0x5c4c
   116d4:	mov	r2, #5
   116d8:	movt	r0, #2
   116dc:	movt	r1, #1
   116e0:	ldr	r5, [r0]
   116e4:	mov	r0, #0
   116e8:	bl	11180 <dcgettext@plt>
   116ec:	mov	r2, r0
   116f0:	movw	r0, #29156	; 0x71e4
   116f4:	mov	r1, #1
   116f8:	movt	r0, #2
   116fc:	ldr	r3, [r0]
   11700:	mov	r0, r5
   11704:	bl	11300 <__fprintf_chk@plt>
   11708:	b	116c4 <__assert_fail@plt+0x310>
   1170c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11710:	add	fp, sp, #28
   11714:	sub	sp, sp, #20
   11718:	mov	r4, r1
   1171c:	mov	r5, r0
   11720:	bl	11114 <is_selinux_enabled@plt>
   11724:	str	r0, [sp, #16]
   11728:	ldr	r0, [r4]
   1172c:	bl	126d4 <__assert_fail@plt+0x1320>
   11730:	movw	r1, #23807	; 0x5cff
   11734:	mov	r0, #6
   11738:	movt	r1, #1
   1173c:	bl	11324 <setlocale@plt>
   11740:	movw	r6, #24594	; 0x6012
   11744:	movw	r1, #24502	; 0x5fb6
   11748:	movt	r6, #1
   1174c:	movt	r1, #1
   11750:	mov	r0, r6
   11754:	bl	11360 <bindtextdomain@plt>
   11758:	mov	r0, r6
   1175c:	bl	11198 <textdomain@plt>
   11760:	movw	r0, #9576	; 0x2568
   11764:	movt	r0, #1
   11768:	bl	15c24 <__assert_fail@plt+0x4870>
   1176c:	movw	r7, #24526	; 0x5fce
   11770:	movw	r6, #25488	; 0x6390
   11774:	movw	sl, #29053	; 0x717d
   11778:	mov	r9, #0
   1177c:	mov	r8, #1
   11780:	movt	r7, #1
   11784:	movt	r6, #1
   11788:	movt	sl, #2
   1178c:	mov	r0, r5
   11790:	mov	r1, r4
   11794:	mov	r2, r7
   11798:	mov	r3, r6
   1179c:	str	r9, [sp]
   117a0:	bl	11258 <getopt_long@plt>
   117a4:	cmp	r0, #102	; 0x66
   117a8:	ble	117d0 <__assert_fail@plt+0x41c>
   117ac:	cmp	r0, #113	; 0x71
   117b0:	ble	11800 <__assert_fail@plt+0x44c>
   117b4:	cmp	r0, #114	; 0x72
   117b8:	beq	11820 <__assert_fail@plt+0x46c>
   117bc:	cmp	r0, #117	; 0x75
   117c0:	bne	1182c <__assert_fail@plt+0x478>
   117c4:	movw	r1, #29056	; 0x7180
   117c8:	movt	r1, #2
   117cc:	b	11848 <__assert_fail@plt+0x494>
   117d0:	cmp	r0, #70	; 0x46
   117d4:	ble	1185c <__assert_fail@plt+0x4a8>
   117d8:	cmp	r0, #71	; 0x47
   117dc:	beq	11840 <__assert_fail@plt+0x48c>
   117e0:	cmp	r0, #90	; 0x5a
   117e4:	bne	11850 <__assert_fail@plt+0x49c>
   117e8:	ldr	r0, [sp, #16]
   117ec:	movw	r1, #29052	; 0x717c
   117f0:	movt	r1, #2
   117f4:	cmp	r0, #0
   117f8:	bgt	11848 <__assert_fail@plt+0x494>
   117fc:	b	11cd0 <__assert_fail@plt+0x91c>
   11800:	cmp	r0, #103	; 0x67
   11804:	mov	r1, sl
   11808:	beq	11848 <__assert_fail@plt+0x494>
   1180c:	cmp	r0, #110	; 0x6e
   11810:	bne	11d00 <__assert_fail@plt+0x94c>
   11814:	movw	r1, #29054	; 0x717e
   11818:	movt	r1, #2
   1181c:	b	11848 <__assert_fail@plt+0x494>
   11820:	movw	r1, #29055	; 0x717f
   11824:	movt	r1, #2
   11828:	b	11848 <__assert_fail@plt+0x494>
   1182c:	cmp	r0, #122	; 0x7a
   11830:	bne	11d00 <__assert_fail@plt+0x94c>
   11834:	movw	r1, #29057	; 0x7181
   11838:	movt	r1, #2
   1183c:	b	11848 <__assert_fail@plt+0x494>
   11840:	movw	r1, #29058	; 0x7182
   11844:	movt	r1, #2
   11848:	strb	r8, [r1]
   1184c:	b	1178c <__assert_fail@plt+0x3d8>
   11850:	cmp	r0, #97	; 0x61
   11854:	beq	1178c <__assert_fail@plt+0x3d8>
   11858:	b	11d00 <__assert_fail@plt+0x94c>
   1185c:	cmn	r0, #1
   11860:	bne	11c64 <__assert_fail@plt+0x8b0>
   11864:	movw	sl, #29032	; 0x7168
   11868:	movw	lr, #29052	; 0x717c
   1186c:	movt	sl, #2
   11870:	movt	lr, #2
   11874:	ldr	r0, [sl]
   11878:	ldrb	r2, [lr]
   1187c:	subs	ip, r5, r0
   11880:	cmpne	r2, #0
   11884:	bne	11cdc <__assert_fail@plt+0x928>
   11888:	movw	r9, #29056	; 0x7180
   1188c:	movw	r8, #29053	; 0x717d
   11890:	clz	r3, ip
   11894:	movw	r6, #29058	; 0x7182
   11898:	movt	r8, #2
   1189c:	movt	r9, #2
   118a0:	movt	r6, #2
   118a4:	lsr	r3, r3, #5
   118a8:	and	r2, r3, r2
   118ac:	ldrb	r3, [r9]
   118b0:	ldrb	r7, [r8]
   118b4:	ldrb	r6, [r6]
   118b8:	add	r1, r7, r3
   118bc:	add	r1, r1, r6
   118c0:	add	r1, r1, r2
   118c4:	cmp	r1, #2
   118c8:	bcs	11ce8 <__assert_fail@plt+0x934>
   118cc:	orr	r1, r6, r2
   118d0:	orr	r3, r3, r7
   118d4:	orrs	r3, r3, r1
   118d8:	bne	11918 <__assert_fail@plt+0x564>
   118dc:	movw	r1, #29055	; 0x717f
   118e0:	movt	r1, #2
   118e4:	ldrb	r1, [r1]
   118e8:	cmp	r1, #0
   118ec:	bne	11cf4 <__assert_fail@plt+0x940>
   118f0:	movw	r1, #29054	; 0x717e
   118f4:	movt	r1, #2
   118f8:	ldrb	r1, [r1]
   118fc:	cmp	r1, #1
   11900:	beq	11cf4 <__assert_fail@plt+0x940>
   11904:	movw	r1, #29057	; 0x7181
   11908:	movt	r1, #2
   1190c:	ldrb	r1, [r1]
   11910:	cmp	r1, #1
   11914:	beq	11d08 <__assert_fail@plt+0x954>
   11918:	cmp	ip, #0
   1191c:	beq	11a3c <__assert_fail@plt+0x688>
   11920:	movw	r2, #29064	; 0x7188
   11924:	subs	r1, ip, #1
   11928:	movt	r2, #2
   1192c:	movwne	r1, #1
   11930:	cmp	r0, r5
   11934:	strb	r1, [r2]
   11938:	bcs	11c4c <__assert_fail@plt+0x898>
   1193c:	movw	r9, #29068	; 0x718c
   11940:	mov	r8, #0
   11944:	movt	r9, #2
   11948:	ldr	r0, [r4, r0, lsl #2]
   1194c:	ldrb	r1, [r0]
   11950:	cmp	r1, #0
   11954:	beq	11974 <__assert_fail@plt+0x5c0>
   11958:	mov	r1, r9
   1195c:	mov	r2, #0
   11960:	mov	r3, #0
   11964:	str	r8, [sp]
   11968:	bl	1420c <__assert_fail@plt+0x2e58>
   1196c:	cmp	r0, #0
   11970:	beq	119d8 <__assert_fail@plt+0x624>
   11974:	bl	112ac <__errno_location@plt>
   11978:	movw	r1, #24871	; 0x6127
   1197c:	ldr	r6, [r0]
   11980:	mov	r0, #0
   11984:	mov	r2, #5
   11988:	movt	r1, #1
   1198c:	bl	11180 <dcgettext@plt>
   11990:	mov	r7, r0
   11994:	ldr	r0, [sl]
   11998:	ldr	r0, [r4, r0, lsl #2]
   1199c:	bl	140c0 <__assert_fail@plt+0x2d0c>
   119a0:	mov	r3, r0
   119a4:	mov	r0, #0
   119a8:	mov	r1, r6
   119ac:	mov	r2, r7
   119b0:	bl	11210 <error@plt>
   119b4:	movw	r0, #28944	; 0x7110
   119b8:	movt	r0, #2
   119bc:	strb	r8, [r0]
   119c0:	ldr	r0, [sl]
   119c4:	add	r0, r0, #1
   119c8:	cmp	r0, r5
   119cc:	str	r0, [sl]
   119d0:	bcc	11948 <__assert_fail@plt+0x594>
   119d4:	b	11c4c <__assert_fail@plt+0x898>
   119d8:	ldr	r0, [r9]
   119dc:	bl	1112c <getpwuid@plt>
   119e0:	cmp	r0, #0
   119e4:	beq	11974 <__assert_fail@plt+0x5c0>
   119e8:	mov	r6, r0
   119ec:	ldr	r0, [r0]
   119f0:	bl	14e58 <__assert_fail@plt+0x3aa4>
   119f4:	mov	r7, r0
   119f8:	ldr	r0, [r6, #8]
   119fc:	movw	r2, #29072	; 0x7190
   11a00:	ldr	r1, [r6, #12]
   11a04:	movt	r2, #2
   11a08:	str	r0, [r9]
   11a0c:	str	r0, [r2]
   11a10:	movw	r0, #29076	; 0x7194
   11a14:	movt	r0, #2
   11a18:	str	r1, [r0]
   11a1c:	movw	r0, #29080	; 0x7198
   11a20:	movt	r0, #2
   11a24:	str	r1, [r0]
   11a28:	mov	r0, r7
   11a2c:	bl	11d8c <__assert_fail@plt+0x9d8>
   11a30:	mov	r0, r7
   11a34:	bl	12650 <__assert_fail@plt+0x129c>
   11a38:	b	119c0 <__assert_fail@plt+0x60c>
   11a3c:	cmp	r2, #0
   11a40:	mov	r5, lr
   11a44:	bne	11a68 <__assert_fail@plt+0x6b4>
   11a48:	cmp	r3, #0
   11a4c:	bne	11a98 <__assert_fail@plt+0x6e4>
   11a50:	movw	r0, #24829	; 0x60fd
   11a54:	movt	r0, #1
   11a58:	bl	1121c <getenv@plt>
   11a5c:	mov	lr, r5
   11a60:	cmp	r0, #0
   11a64:	bne	11a98 <__assert_fail@plt+0x6e4>
   11a68:	ldr	r0, [sp, #16]
   11a6c:	cmp	r0, #1
   11a70:	blt	11a98 <__assert_fail@plt+0x6e4>
   11a74:	movw	r0, #29060	; 0x7184
   11a78:	movt	r0, #2
   11a7c:	bl	111e0 <getcon@plt>
   11a80:	mov	lr, r5
   11a84:	cmp	r0, #0
   11a88:	beq	11a98 <__assert_fail@plt+0x6e4>
   11a8c:	ldrb	r0, [lr]
   11a90:	cmp	r0, #1
   11a94:	beq	11d2c <__assert_fail@plt+0x978>
   11a98:	ldrb	r0, [r9]
   11a9c:	cmp	r0, #1
   11aa0:	bne	11afc <__assert_fail@plt+0x748>
   11aa4:	movw	r0, #29055	; 0x717f
   11aa8:	movt	r0, #2
   11aac:	ldrb	r0, [r0]
   11ab0:	cmp	r0, #0
   11ab4:	bne	11b78 <__assert_fail@plt+0x7c4>
   11ab8:	bl	112ac <__errno_location@plt>
   11abc:	mov	r4, r0
   11ac0:	mov	r0, #0
   11ac4:	str	r0, [r4]
   11ac8:	bl	111a4 <geteuid@plt>
   11acc:	movw	r1, #29068	; 0x718c
   11ad0:	mov	lr, r5
   11ad4:	cmn	r0, #1
   11ad8:	movt	r1, #2
   11adc:	str	r0, [r1]
   11ae0:	bne	11b28 <__assert_fail@plt+0x774>
   11ae4:	ldr	r4, [r4]
   11ae8:	cmp	r4, #0
   11aec:	beq	11b28 <__assert_fail@plt+0x774>
   11af0:	movw	r1, #24888	; 0x6138
   11af4:	movt	r1, #1
   11af8:	b	11d70 <__assert_fail@plt+0x9bc>
   11afc:	ldrb	r0, [r8]
   11b00:	cmp	r0, #0
   11b04:	bne	11be8 <__assert_fail@plt+0x834>
   11b08:	movw	r0, #29058	; 0x7182
   11b0c:	movt	r0, #2
   11b10:	ldrb	r0, [r0]
   11b14:	cmp	r0, #0
   11b18:	bne	11b78 <__assert_fail@plt+0x7c4>
   11b1c:	ldrb	r0, [lr]
   11b20:	cmp	r0, #0
   11b24:	beq	11ab8 <__assert_fail@plt+0x704>
   11b28:	ldrb	r0, [r9]
   11b2c:	cmp	r0, #1
   11b30:	bne	11b4c <__assert_fail@plt+0x798>
   11b34:	movw	r0, #29055	; 0x717f
   11b38:	movt	r0, #2
   11b3c:	ldrb	r0, [r0]
   11b40:	cmp	r0, #0
   11b44:	bne	11b78 <__assert_fail@plt+0x7c4>
   11b48:	b	11c44 <__assert_fail@plt+0x890>
   11b4c:	ldrb	r0, [r8]
   11b50:	cmp	r0, #0
   11b54:	bne	11be8 <__assert_fail@plt+0x834>
   11b58:	movw	r0, #29058	; 0x7182
   11b5c:	movt	r0, #2
   11b60:	ldrb	r0, [r0]
   11b64:	cmp	r0, #0
   11b68:	bne	11b78 <__assert_fail@plt+0x7c4>
   11b6c:	ldrb	r0, [lr]
   11b70:	cmp	r0, #0
   11b74:	bne	11bb0 <__assert_fail@plt+0x7fc>
   11b78:	bl	112ac <__errno_location@plt>
   11b7c:	mov	r4, r0
   11b80:	mov	r0, #0
   11b84:	str	r0, [r4]
   11b88:	bl	11144 <getuid@plt>
   11b8c:	movw	r1, #29072	; 0x7190
   11b90:	mov	lr, r5
   11b94:	cmn	r0, #1
   11b98:	movt	r1, #2
   11b9c:	str	r0, [r1]
   11ba0:	bne	11bb0 <__assert_fail@plt+0x7fc>
   11ba4:	ldr	r4, [r4]
   11ba8:	cmp	r4, #0
   11bac:	bne	11d68 <__assert_fail@plt+0x9b4>
   11bb0:	ldrb	r0, [r9]
   11bb4:	cmp	r0, #0
   11bb8:	bne	11c44 <__assert_fail@plt+0x890>
   11bbc:	ldrb	r0, [r8]
   11bc0:	cmp	r0, #0
   11bc4:	bne	11be8 <__assert_fail@plt+0x834>
   11bc8:	movw	r0, #29058	; 0x7182
   11bcc:	movt	r0, #2
   11bd0:	ldrb	r0, [r0]
   11bd4:	cmp	r0, #0
   11bd8:	bne	11be8 <__assert_fail@plt+0x834>
   11bdc:	ldrb	r0, [lr]
   11be0:	cmp	r0, #0
   11be4:	bne	11c44 <__assert_fail@plt+0x890>
   11be8:	bl	112ac <__errno_location@plt>
   11bec:	mov	r6, #0
   11bf0:	mov	r4, r0
   11bf4:	str	r6, [r0]
   11bf8:	bl	111bc <getegid@plt>
   11bfc:	movw	r1, #29076	; 0x7194
   11c00:	cmn	r0, #1
   11c04:	movt	r1, #2
   11c08:	str	r0, [r1]
   11c0c:	bne	11c1c <__assert_fail@plt+0x868>
   11c10:	ldr	r5, [r4]
   11c14:	cmp	r5, #0
   11c18:	bne	11d38 <__assert_fail@plt+0x984>
   11c1c:	str	r6, [r4]
   11c20:	bl	112c4 <getgid@plt>
   11c24:	movw	r1, #29080	; 0x7198
   11c28:	cmn	r0, #1
   11c2c:	movt	r1, #2
   11c30:	str	r0, [r1]
   11c34:	bne	11c44 <__assert_fail@plt+0x890>
   11c38:	ldr	r4, [r4]
   11c3c:	cmp	r4, #0
   11c40:	bne	11d5c <__assert_fail@plt+0x9a8>
   11c44:	mov	r0, #0
   11c48:	bl	11d8c <__assert_fail@plt+0x9d8>
   11c4c:	movw	r0, #28944	; 0x7110
   11c50:	movt	r0, #2
   11c54:	ldrb	r0, [r0]
   11c58:	eor	r0, r0, #1
   11c5c:	sub	sp, fp, #28
   11c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c64:	cmn	r0, #3
   11c68:	bne	11cc0 <__assert_fail@plt+0x90c>
   11c6c:	movw	r0, #28948	; 0x7114
   11c70:	movw	r2, #24619	; 0x602b
   11c74:	mov	r1, #0
   11c78:	movw	r7, #24604	; 0x601c
   11c7c:	movt	r0, #2
   11c80:	movt	r2, #1
   11c84:	str	r1, [sp, #8]
   11c88:	movw	r1, #24499	; 0x5fb3
   11c8c:	movt	r7, #1
   11c90:	movt	r1, #1
   11c94:	ldr	r3, [r0]
   11c98:	movw	r0, #29044	; 0x7174
   11c9c:	str	r2, [sp, #4]
   11ca0:	movw	r2, #24590	; 0x600e
   11ca4:	str	r7, [sp]
   11ca8:	movt	r0, #2
   11cac:	movt	r2, #1
   11cb0:	ldr	r0, [r0]
   11cb4:	bl	1495c <__assert_fail@plt+0x35a8>
   11cb8:	mov	r0, #0
   11cbc:	bl	11270 <exit@plt>
   11cc0:	cmn	r0, #2
   11cc4:	bne	11d00 <__assert_fail@plt+0x94c>
   11cc8:	mov	r0, #0
   11ccc:	bl	114b0 <__assert_fail@plt+0xfc>
   11cd0:	movw	r1, #24535	; 0x5fd7
   11cd4:	movt	r1, #1
   11cd8:	b	11d10 <__assert_fail@plt+0x95c>
   11cdc:	movw	r1, #24635	; 0x603b
   11ce0:	movt	r1, #1
   11ce4:	b	11d10 <__assert_fail@plt+0x95c>
   11ce8:	movw	r1, #24685	; 0x606d
   11cec:	movt	r1, #1
   11cf0:	b	11d10 <__assert_fail@plt+0x95c>
   11cf4:	movw	r1, #24729	; 0x6099
   11cf8:	movt	r1, #1
   11cfc:	b	11d10 <__assert_fail@plt+0x95c>
   11d00:	mov	r0, #1
   11d04:	bl	114b0 <__assert_fail@plt+0xfc>
   11d08:	movw	r1, #24783	; 0x60cf
   11d0c:	movt	r1, #1
   11d10:	mov	r0, #0
   11d14:	mov	r2, #5
   11d18:	bl	11180 <dcgettext@plt>
   11d1c:	mov	r2, r0
   11d20:	mov	r0, #1
   11d24:	mov	r1, #0
   11d28:	bl	11210 <error@plt>
   11d2c:	movw	r1, #24845	; 0x610d
   11d30:	movt	r1, #1
   11d34:	b	11d10 <__assert_fail@plt+0x95c>
   11d38:	movw	r1, #24933	; 0x6165
   11d3c:	mov	r0, #0
   11d40:	mov	r2, #5
   11d44:	movt	r1, #1
   11d48:	bl	11180 <dcgettext@plt>
   11d4c:	mov	r2, r0
   11d50:	mov	r0, #1
   11d54:	mov	r1, r5
   11d58:	bl	11210 <error@plt>
   11d5c:	movw	r1, #24958	; 0x617e
   11d60:	movt	r1, #1
   11d64:	b	11d70 <__assert_fail@plt+0x9bc>
   11d68:	movw	r1, #24913	; 0x6151
   11d6c:	movt	r1, #1
   11d70:	mov	r0, #0
   11d74:	mov	r2, #5
   11d78:	bl	11180 <dcgettext@plt>
   11d7c:	mov	r2, r0
   11d80:	mov	r0, #1
   11d84:	mov	r1, r4
   11d88:	bl	11210 <error@plt>
   11d8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d90:	add	fp, sp, #28
   11d94:	sub	sp, sp, #12
   11d98:	mov	r4, r0
   11d9c:	movw	r0, #29056	; 0x7180
   11da0:	movw	sl, #29057	; 0x7181
   11da4:	movt	r0, #2
   11da8:	movt	sl, #2
   11dac:	ldrb	r0, [r0]
   11db0:	cmp	r0, #1
   11db4:	bne	11e0c <__assert_fail@plt+0xa58>
   11db8:	movw	r0, #29055	; 0x717f
   11dbc:	movw	r1, #29072	; 0x7190
   11dc0:	movw	r2, #29068	; 0x718c
   11dc4:	movt	r0, #2
   11dc8:	movt	r1, #2
   11dcc:	movt	r2, #2
   11dd0:	ldrb	r0, [r0]
   11dd4:	cmp	r0, #0
   11dd8:	movw	r0, #29054	; 0x717e
   11ddc:	movt	r0, #2
   11de0:	movne	r2, r1
   11de4:	ldr	r4, [r2]
   11de8:	ldrb	r0, [r0]
   11dec:	cmp	r0, #0
   11df0:	beq	11e5c <__assert_fail@plt+0xaa8>
   11df4:	mov	r0, r4
   11df8:	bl	1112c <getpwuid@plt>
   11dfc:	cmp	r0, #0
   11e00:	beq	11f10 <__assert_fail@plt+0xb5c>
   11e04:	ldr	r0, [r0]
   11e08:	b	11f74 <__assert_fail@plt+0xbc0>
   11e0c:	movw	r0, #29053	; 0x717d
   11e10:	movt	r0, #2
   11e14:	ldrb	r0, [r0]
   11e18:	cmp	r0, #1
   11e1c:	bne	11e64 <__assert_fail@plt+0xab0>
   11e20:	movw	r0, #29055	; 0x717f
   11e24:	movw	r1, #29080	; 0x7198
   11e28:	movw	r2, #29076	; 0x7194
   11e2c:	movt	r0, #2
   11e30:	movt	r1, #2
   11e34:	movt	r2, #2
   11e38:	ldrb	r0, [r0]
   11e3c:	cmp	r0, #0
   11e40:	movne	r2, r1
   11e44:	movw	r1, #29054	; 0x717e
   11e48:	movt	r1, #2
   11e4c:	ldr	r0, [r2]
   11e50:	ldrb	r1, [r1]
   11e54:	bl	124bc <__assert_fail@plt+0x1108>
   11e58:	b	11ec8 <__assert_fail@plt+0xb14>
   11e5c:	mov	r5, #0
   11e60:	b	11f60 <__assert_fail@plt+0xbac>
   11e64:	movw	r0, #29058	; 0x7182
   11e68:	movt	r0, #2
   11e6c:	ldrb	r0, [r0]
   11e70:	cmp	r0, #1
   11e74:	bne	11ee0 <__assert_fail@plt+0xb2c>
   11e78:	movw	r0, #29076	; 0x7194
   11e7c:	movw	r7, #29054	; 0x717e
   11e80:	mov	r6, #32
   11e84:	movt	r0, #2
   11e88:	movt	r7, #2
   11e8c:	ldr	r3, [r0]
   11e90:	movw	r0, #29080	; 0x7198
   11e94:	ldrb	r7, [r7]
   11e98:	movt	r0, #2
   11e9c:	ldr	r2, [r0]
   11ea0:	movw	r0, #29072	; 0x7190
   11ea4:	movt	r0, #2
   11ea8:	str	r7, [sp]
   11eac:	ldr	r1, [r0]
   11eb0:	ldrb	r0, [sl]
   11eb4:	cmp	r0, #0
   11eb8:	mov	r0, r4
   11ebc:	movwne	r6, #0
   11ec0:	str	r6, [sp, #4]
   11ec4:	bl	12350 <__assert_fail@plt+0xf9c>
   11ec8:	movw	r1, #28944	; 0x7110
   11ecc:	movt	r1, #2
   11ed0:	ldrb	r2, [r1]
   11ed4:	and	r0, r2, r0
   11ed8:	strb	r0, [r1]
   11edc:	b	11f84 <__assert_fail@plt+0xbd0>
   11ee0:	movw	r0, #29052	; 0x717c
   11ee4:	movt	r0, #2
   11ee8:	ldrb	r0, [r0]
   11eec:	cmp	r0, #1
   11ef0:	bne	11fe4 <__assert_fail@plt+0xc30>
   11ef4:	movw	r0, #29044	; 0x7174
   11ef8:	movt	r0, #2
   11efc:	ldr	r1, [r0]
   11f00:	movw	r0, #29060	; 0x7184
   11f04:	movt	r0, #2
   11f08:	ldr	r0, [r0]
   11f0c:	b	11f80 <__assert_fail@plt+0xbcc>
   11f10:	movw	r1, #25324	; 0x62ec
   11f14:	mov	r0, #0
   11f18:	mov	r2, #5
   11f1c:	mov	r5, #0
   11f20:	movt	r1, #1
   11f24:	bl	11180 <dcgettext@plt>
   11f28:	movw	r2, #29084	; 0x719c
   11f2c:	mov	r6, r0
   11f30:	mov	r0, r4
   11f34:	mov	r1, #0
   11f38:	movt	r2, #2
   11f3c:	bl	12678 <__assert_fail@plt+0x12c4>
   11f40:	mov	r3, r0
   11f44:	mov	r0, #0
   11f48:	mov	r1, #0
   11f4c:	mov	r2, r6
   11f50:	bl	11210 <error@plt>
   11f54:	movw	r0, #28944	; 0x7110
   11f58:	movt	r0, #2
   11f5c:	strb	r5, [r0]
   11f60:	movw	r2, #29084	; 0x719c
   11f64:	mov	r0, r4
   11f68:	mov	r1, r5
   11f6c:	movt	r2, #2
   11f70:	bl	12678 <__assert_fail@plt+0x12c4>
   11f74:	movw	r1, #29044	; 0x7174
   11f78:	movt	r1, #2
   11f7c:	ldr	r1, [r1]
   11f80:	bl	110f0 <fputs_unlocked@plt>
   11f84:	ldrb	r0, [sl]
   11f88:	cmp	r0, #1
   11f8c:	bne	11fc8 <__assert_fail@plt+0xc14>
   11f90:	movw	r1, #29064	; 0x7188
   11f94:	movt	r1, #2
   11f98:	ldrb	r1, [r1]
   11f9c:	cmp	r1, #0
   11fa0:	beq	11fc8 <__assert_fail@plt+0xc14>
   11fa4:	movw	r1, #29058	; 0x7182
   11fa8:	movt	r1, #2
   11fac:	ldrb	r1, [r1]
   11fb0:	cmp	r1, #0
   11fb4:	beq	11fc8 <__assert_fail@plt+0xc14>
   11fb8:	mov	r0, #0
   11fbc:	mov	r4, #0
   11fc0:	bl	113a8 <putchar_unlocked@plt>
   11fc4:	b	11fd4 <__assert_fail@plt+0xc20>
   11fc8:	cmp	r0, #0
   11fcc:	mov	r4, #10
   11fd0:	movwne	r4, #0
   11fd4:	mov	r0, r4
   11fd8:	bl	113a8 <putchar_unlocked@plt>
   11fdc:	sub	sp, fp, #28
   11fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fe4:	movw	r1, #25371	; 0x631b
   11fe8:	mov	r0, #0
   11fec:	mov	r2, #5
   11ff0:	movt	r1, #1
   11ff4:	bl	11180 <dcgettext@plt>
   11ff8:	movw	r9, #29072	; 0x7190
   11ffc:	mov	r5, r0
   12000:	movw	r2, #29084	; 0x719c
   12004:	mov	r1, #0
   12008:	movt	r9, #2
   1200c:	movt	r2, #2
   12010:	ldr	r0, [r9]
   12014:	bl	12678 <__assert_fail@plt+0x12c4>
   12018:	mov	r2, r0
   1201c:	mov	r0, #1
   12020:	mov	r1, r5
   12024:	bl	112e8 <__printf_chk@plt>
   12028:	ldr	r0, [r9]
   1202c:	bl	1112c <getpwuid@plt>
   12030:	mov	r5, r0
   12034:	cmp	r0, #0
   12038:	beq	12050 <__assert_fail@plt+0xc9c>
   1203c:	ldr	r2, [r5]
   12040:	movw	r1, #25356	; 0x630c
   12044:	mov	r0, #1
   12048:	movt	r1, #1
   1204c:	bl	112e8 <__printf_chk@plt>
   12050:	movw	r1, #25361	; 0x6311
   12054:	mov	r0, #0
   12058:	mov	r2, #5
   1205c:	movt	r1, #1
   12060:	bl	11180 <dcgettext@plt>
   12064:	movw	r8, #29080	; 0x7198
   12068:	mov	r6, r0
   1206c:	movw	r2, #29105	; 0x71b1
   12070:	mov	r1, #0
   12074:	movt	r8, #2
   12078:	movt	r2, #2
   1207c:	ldr	r0, [r8]
   12080:	bl	12678 <__assert_fail@plt+0x12c4>
   12084:	mov	r2, r0
   12088:	mov	r0, #1
   1208c:	mov	r1, r6
   12090:	bl	112e8 <__printf_chk@plt>
   12094:	ldr	r0, [r8]
   12098:	bl	11390 <getgrgid@plt>
   1209c:	cmp	r0, #0
   120a0:	beq	120b8 <__assert_fail@plt+0xd04>
   120a4:	ldr	r2, [r0]
   120a8:	movw	r1, #25356	; 0x630c
   120ac:	mov	r0, #1
   120b0:	movt	r1, #1
   120b4:	bl	112e8 <__printf_chk@plt>
   120b8:	movw	r7, #29068	; 0x718c
   120bc:	ldr	r0, [r9]
   120c0:	movt	r7, #2
   120c4:	ldr	r1, [r7]
   120c8:	cmp	r1, r0
   120cc:	beq	1213c <__assert_fail@plt+0xd88>
   120d0:	movw	r1, #25369	; 0x6319
   120d4:	mov	r0, #0
   120d8:	mov	r2, #5
   120dc:	mov	r5, #0
   120e0:	movt	r1, #1
   120e4:	bl	11180 <dcgettext@plt>
   120e8:	mov	r6, r0
   120ec:	ldr	r0, [r7]
   120f0:	movw	r2, #29084	; 0x719c
   120f4:	mov	r1, #0
   120f8:	movt	r2, #2
   120fc:	bl	12678 <__assert_fail@plt+0x12c4>
   12100:	mov	r2, r0
   12104:	mov	r0, #1
   12108:	mov	r1, r6
   1210c:	bl	112e8 <__printf_chk@plt>
   12110:	ldr	r0, [r7]
   12114:	bl	1112c <getpwuid@plt>
   12118:	cmp	r0, #0
   1211c:	beq	1213c <__assert_fail@plt+0xd88>
   12120:	ldr	r2, [r0]
   12124:	movw	r1, #25356	; 0x630c
   12128:	mov	r6, r0
   1212c:	mov	r0, #1
   12130:	movt	r1, #1
   12134:	bl	112e8 <__printf_chk@plt>
   12138:	mov	r5, r6
   1213c:	movw	r7, #29076	; 0x7194
   12140:	ldr	r0, [r8]
   12144:	movt	r7, #2
   12148:	ldr	r1, [r7]
   1214c:	cmp	r1, r0
   12150:	beq	121b4 <__assert_fail@plt+0xe00>
   12154:	movw	r1, #25378	; 0x6322
   12158:	mov	r0, #0
   1215c:	mov	r2, #5
   12160:	movt	r1, #1
   12164:	bl	11180 <dcgettext@plt>
   12168:	mov	r6, r0
   1216c:	ldr	r0, [r7]
   12170:	movw	r2, #29105	; 0x71b1
   12174:	mov	r1, #0
   12178:	movt	r2, #2
   1217c:	bl	12678 <__assert_fail@plt+0x12c4>
   12180:	mov	r2, r0
   12184:	mov	r0, #1
   12188:	mov	r1, r6
   1218c:	bl	112e8 <__printf_chk@plt>
   12190:	ldr	r0, [r7]
   12194:	bl	11390 <getgrgid@plt>
   12198:	cmp	r0, #0
   1219c:	beq	121b4 <__assert_fail@plt+0xe00>
   121a0:	ldr	r2, [r0]
   121a4:	movw	r1, #25356	; 0x630c
   121a8:	mov	r0, #1
   121ac:	movt	r1, #1
   121b0:	bl	112e8 <__printf_chk@plt>
   121b4:	cmp	r4, #0
   121b8:	beq	121cc <__assert_fail@plt+0xe18>
   121bc:	cmp	r5, #0
   121c0:	beq	121d4 <__assert_fail@plt+0xe20>
   121c4:	ldr	r1, [r5, #12]
   121c8:	b	121d8 <__assert_fail@plt+0xe24>
   121cc:	ldr	r1, [r7]
   121d0:	b	121d8 <__assert_fail@plt+0xe24>
   121d4:	mvn	r1, #0
   121d8:	add	r2, sp, #8
   121dc:	mov	r0, r4
   121e0:	bl	14ed4 <__assert_fail@plt+0x3b20>
   121e4:	cmn	r0, #1
   121e8:	ble	122d0 <__assert_fail@plt+0xf1c>
   121ec:	mov	r5, r0
   121f0:	cmp	r0, #0
   121f4:	beq	1228c <__assert_fail@plt+0xed8>
   121f8:	movw	r1, #25465	; 0x6379
   121fc:	mov	r0, #0
   12200:	mov	r2, #5
   12204:	mov	r7, #0
   12208:	movt	r1, #1
   1220c:	bl	11180 <dcgettext@plt>
   12210:	movw	r6, #29044	; 0x7174
   12214:	movt	r6, #2
   12218:	ldr	r1, [r6]
   1221c:	bl	110f0 <fputs_unlocked@plt>
   12220:	movw	r4, #29105	; 0x71b1
   12224:	movw	r8, #25356	; 0x630c
   12228:	movt	r4, #2
   1222c:	movt	r8, #1
   12230:	cmp	r7, #0
   12234:	beq	12240 <__assert_fail@plt+0xe8c>
   12238:	mov	r0, #44	; 0x2c
   1223c:	bl	113a8 <putchar_unlocked@plt>
   12240:	ldr	r0, [sp, #8]
   12244:	mov	r1, #0
   12248:	mov	r2, r4
   1224c:	ldr	r0, [r0, r7, lsl #2]
   12250:	bl	12678 <__assert_fail@plt+0x12c4>
   12254:	ldr	r1, [r6]
   12258:	bl	110f0 <fputs_unlocked@plt>
   1225c:	ldr	r0, [sp, #8]
   12260:	ldr	r0, [r0, r7, lsl #2]
   12264:	bl	11390 <getgrgid@plt>
   12268:	cmp	r0, #0
   1226c:	beq	12280 <__assert_fail@plt+0xecc>
   12270:	ldr	r2, [r0]
   12274:	mov	r0, #1
   12278:	mov	r1, r8
   1227c:	bl	112e8 <__printf_chk@plt>
   12280:	add	r7, r7, #1
   12284:	cmp	r5, r7
   12288:	bne	12230 <__assert_fail@plt+0xe7c>
   1228c:	ldr	r0, [sp, #8]
   12290:	bl	12650 <__assert_fail@plt+0x129c>
   12294:	movw	r4, #29060	; 0x7184
   12298:	movt	r4, #2
   1229c:	ldr	r0, [r4]
   122a0:	cmp	r0, #0
   122a4:	beq	11f84 <__assert_fail@plt+0xbd0>
   122a8:	movw	r1, #25474	; 0x6382
   122ac:	mov	r0, #0
   122b0:	mov	r2, #5
   122b4:	movt	r1, #1
   122b8:	bl	11180 <dcgettext@plt>
   122bc:	ldr	r2, [r4]
   122c0:	mov	r1, r0
   122c4:	mov	r0, #1
   122c8:	bl	112e8 <__printf_chk@plt>
   122cc:	b	11f84 <__assert_fail@plt+0xbd0>
   122d0:	bl	112ac <__errno_location@plt>
   122d4:	ldr	r5, [r0]
   122d8:	cmp	r4, #0
   122dc:	beq	12318 <__assert_fail@plt+0xf64>
   122e0:	movw	r1, #25387	; 0x632b
   122e4:	mov	r0, #0
   122e8:	mov	r2, #5
   122ec:	movt	r1, #1
   122f0:	bl	11180 <dcgettext@plt>
   122f4:	mov	r6, r0
   122f8:	mov	r0, r4
   122fc:	bl	140c0 <__assert_fail@plt+0x2d0c>
   12300:	mov	r3, r0
   12304:	mov	r0, #0
   12308:	mov	r1, r5
   1230c:	mov	r2, r6
   12310:	bl	11210 <error@plt>
   12314:	b	1233c <__assert_fail@plt+0xf88>
   12318:	movw	r1, #25420	; 0x634c
   1231c:	mov	r0, #0
   12320:	mov	r2, #5
   12324:	movt	r1, #1
   12328:	bl	11180 <dcgettext@plt>
   1232c:	mov	r2, r0
   12330:	mov	r0, #0
   12334:	mov	r1, r5
   12338:	bl	11210 <error@plt>
   1233c:	movw	r0, #28944	; 0x7110
   12340:	mov	r1, #0
   12344:	movt	r0, #2
   12348:	strb	r1, [r0]
   1234c:	b	11f84 <__assert_fail@plt+0xbd0>
   12350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12354:	add	fp, sp, #28
   12358:	sub	sp, sp, #4
   1235c:	ldr	r9, [fp, #8]
   12360:	mov	r8, r3
   12364:	mov	r5, r2
   12368:	mov	r4, r0
   1236c:	cmp	r0, #0
   12370:	beq	12390 <__assert_fail@plt+0xfdc>
   12374:	mov	r0, r1
   12378:	bl	1112c <getpwuid@plt>
   1237c:	cmp	r0, #0
   12380:	mov	r7, r0
   12384:	mov	r6, r0
   12388:	movwne	r7, #1
   1238c:	b	12398 <__assert_fail@plt+0xfe4>
   12390:	mov	r6, #0
   12394:	mov	r7, #1
   12398:	ldr	sl, [fp, #12]
   1239c:	mov	r0, r5
   123a0:	mov	r1, r9
   123a4:	bl	124bc <__assert_fail@plt+0x1108>
   123a8:	and	r7, r7, r0
   123ac:	cmp	r8, r5
   123b0:	beq	123cc <__assert_fail@plt+0x1018>
   123b4:	mov	r0, sl
   123b8:	bl	113a8 <putchar_unlocked@plt>
   123bc:	mov	r0, r8
   123c0:	mov	r1, r9
   123c4:	bl	124bc <__assert_fail@plt+0x1108>
   123c8:	and	r7, r7, r0
   123cc:	cmp	r6, #0
   123d0:	mov	r1, r8
   123d4:	mov	r2, sp
   123d8:	mov	r0, r4
   123dc:	ldrne	r1, [r6, #12]
   123e0:	bl	14ed4 <__assert_fail@plt+0x3b20>
   123e4:	cmp	r0, #0
   123e8:	bmi	12440 <__assert_fail@plt+0x108c>
   123ec:	beq	12434 <__assert_fail@plt+0x1080>
   123f0:	mov	r6, r0
   123f4:	mov	r4, #0
   123f8:	ldr	r0, [sp]
   123fc:	ldr	r0, [r0, r4, lsl #2]
   12400:	cmp	r0, r5
   12404:	cmpne	r0, r8
   12408:	beq	12428 <__assert_fail@plt+0x1074>
   1240c:	mov	r0, sl
   12410:	bl	113a8 <putchar_unlocked@plt>
   12414:	ldr	r0, [sp]
   12418:	mov	r1, r9
   1241c:	ldr	r0, [r0, r4, lsl #2]
   12420:	bl	124bc <__assert_fail@plt+0x1108>
   12424:	and	r7, r7, r0
   12428:	add	r4, r4, #1
   1242c:	cmp	r6, r4
   12430:	bne	123f8 <__assert_fail@plt+0x1044>
   12434:	ldr	r0, [sp]
   12438:	bl	12650 <__assert_fail@plt+0x129c>
   1243c:	b	124b0 <__assert_fail@plt+0x10fc>
   12440:	bl	112ac <__errno_location@plt>
   12444:	ldr	r6, [r0]
   12448:	mov	r7, #0
   1244c:	cmp	r4, #0
   12450:	beq	1248c <__assert_fail@plt+0x10d8>
   12454:	movw	r1, #25387	; 0x632b
   12458:	mov	r0, #0
   1245c:	mov	r2, #5
   12460:	movt	r1, #1
   12464:	bl	11180 <dcgettext@plt>
   12468:	mov	r5, r0
   1246c:	mov	r0, r4
   12470:	bl	140c0 <__assert_fail@plt+0x2d0c>
   12474:	mov	r3, r0
   12478:	mov	r0, #0
   1247c:	mov	r1, r6
   12480:	mov	r2, r5
   12484:	bl	11210 <error@plt>
   12488:	b	124b0 <__assert_fail@plt+0x10fc>
   1248c:	movw	r1, #25420	; 0x634c
   12490:	mov	r0, #0
   12494:	mov	r2, #5
   12498:	movt	r1, #1
   1249c:	bl	11180 <dcgettext@plt>
   124a0:	mov	r2, r0
   124a4:	mov	r0, #0
   124a8:	mov	r1, r6
   124ac:	bl	11210 <error@plt>
   124b0:	and	r0, r7, #1
   124b4:	sub	sp, fp, #28
   124b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124bc:	push	{r4, r5, fp, lr}
   124c0:	add	fp, sp, #8
   124c4:	mov	r5, r0
   124c8:	mov	r4, #1
   124cc:	cmp	r1, #0
   124d0:	beq	1251c <__assert_fail@plt+0x1168>
   124d4:	mov	r0, r5
   124d8:	bl	11390 <getgrgid@plt>
   124dc:	cmp	r0, #0
   124e0:	beq	124f0 <__assert_fail@plt+0x113c>
   124e4:	ldr	r0, [r0]
   124e8:	mov	r4, #1
   124ec:	b	12530 <__assert_fail@plt+0x117c>
   124f0:	movw	r1, #25704	; 0x6468
   124f4:	mov	r0, #0
   124f8:	mov	r2, #5
   124fc:	mov	r4, #0
   12500:	movt	r1, #1
   12504:	bl	11180 <dcgettext@plt>
   12508:	mov	r2, r0
   1250c:	mov	r0, #0
   12510:	mov	r1, #0
   12514:	mov	r3, r5
   12518:	bl	11210 <error@plt>
   1251c:	movw	r2, #29126	; 0x71c6
   12520:	mov	r0, r5
   12524:	mov	r1, #0
   12528:	movt	r2, #2
   1252c:	bl	12678 <__assert_fail@plt+0x12c4>
   12530:	movw	r1, #29044	; 0x7174
   12534:	movt	r1, #2
   12538:	ldr	r1, [r1]
   1253c:	bl	110f0 <fputs_unlocked@plt>
   12540:	mov	r0, r4
   12544:	pop	{r4, r5, fp, pc}
   12548:	movw	r1, #29148	; 0x71dc
   1254c:	movt	r1, #2
   12550:	str	r0, [r1]
   12554:	bx	lr
   12558:	movw	r1, #29152	; 0x71e0
   1255c:	movt	r1, #2
   12560:	strb	r0, [r1]
   12564:	bx	lr
   12568:	push	{r4, r5, r6, sl, fp, lr}
   1256c:	add	fp, sp, #16
   12570:	sub	sp, sp, #8
   12574:	movw	r0, #29044	; 0x7174
   12578:	movt	r0, #2
   1257c:	ldr	r0, [r0]
   12580:	bl	15448 <__assert_fail@plt+0x4094>
   12584:	cmp	r0, #0
   12588:	beq	125b0 <__assert_fail@plt+0x11fc>
   1258c:	movw	r0, #29152	; 0x71e0
   12590:	movt	r0, #2
   12594:	ldrb	r0, [r0]
   12598:	cmp	r0, #0
   1259c:	beq	125d0 <__assert_fail@plt+0x121c>
   125a0:	bl	112ac <__errno_location@plt>
   125a4:	ldr	r0, [r0]
   125a8:	cmp	r0, #32
   125ac:	bne	125d0 <__assert_fail@plt+0x121c>
   125b0:	movw	r0, #29040	; 0x7170
   125b4:	movt	r0, #2
   125b8:	ldr	r0, [r0]
   125bc:	bl	15448 <__assert_fail@plt+0x4094>
   125c0:	cmp	r0, #0
   125c4:	subeq	sp, fp, #16
   125c8:	popeq	{r4, r5, r6, sl, fp, pc}
   125cc:	b	12640 <__assert_fail@plt+0x128c>
   125d0:	movw	r1, #25753	; 0x6499
   125d4:	mov	r0, #0
   125d8:	mov	r2, #5
   125dc:	movt	r1, #1
   125e0:	bl	11180 <dcgettext@plt>
   125e4:	mov	r4, r0
   125e8:	movw	r0, #29148	; 0x71dc
   125ec:	movt	r0, #2
   125f0:	ldr	r6, [r0]
   125f4:	bl	112ac <__errno_location@plt>
   125f8:	ldr	r5, [r0]
   125fc:	cmp	r6, #0
   12600:	bne	1261c <__assert_fail@plt+0x1268>
   12604:	movw	r2, #25769	; 0x64a9
   12608:	mov	r0, #0
   1260c:	mov	r1, r5
   12610:	mov	r3, r4
   12614:	movt	r2, #1
   12618:	b	1263c <__assert_fail@plt+0x1288>
   1261c:	mov	r0, r6
   12620:	bl	13e80 <__assert_fail@plt+0x2acc>
   12624:	movw	r2, #25765	; 0x64a5
   12628:	mov	r3, r0
   1262c:	str	r4, [sp]
   12630:	mov	r0, #0
   12634:	mov	r1, r5
   12638:	movt	r2, #1
   1263c:	bl	11210 <error@plt>
   12640:	movw	r0, #28952	; 0x7118
   12644:	movt	r0, #2
   12648:	ldr	r0, [r0]
   1264c:	bl	1115c <_exit@plt>
   12650:	push	{r4, r5, r6, sl, fp, lr}
   12654:	add	fp, sp, #16
   12658:	mov	r4, r0
   1265c:	bl	112ac <__errno_location@plt>
   12660:	ldr	r6, [r0]
   12664:	mov	r5, r0
   12668:	mov	r0, r4
   1266c:	bl	11150 <free@plt>
   12670:	str	r6, [r5]
   12674:	pop	{r4, r5, r6, sl, fp, pc}
   12678:	push	{r4, r5, r6, sl, fp, lr}
   1267c:	add	fp, sp, #16
   12680:	mov	r5, r0
   12684:	mov	r0, #0
   12688:	mov	r4, r1
   1268c:	add	r6, r2, #19
   12690:	strb	r0, [r2, #20]
   12694:	mov	r0, r5
   12698:	mov	r1, r4
   1269c:	mov	r2, #10
   126a0:	mov	r3, #0
   126a4:	bl	15a4c <__assert_fail@plt+0x4698>
   126a8:	add	r2, r0, r0, lsl #2
   126ac:	sub	r2, r5, r2, lsl #1
   126b0:	orr	r2, r2, #48	; 0x30
   126b4:	strb	r2, [r6], #-1
   126b8:	rsbs	r2, r5, #9
   126bc:	mov	r5, r0
   126c0:	rscs	r2, r4, #0
   126c4:	mov	r4, r1
   126c8:	bcc	12694 <__assert_fail@plt+0x12e0>
   126cc:	add	r0, r6, #1
   126d0:	pop	{r4, r5, r6, sl, fp, pc}
   126d4:	push	{r4, r5, fp, lr}
   126d8:	add	fp, sp, #8
   126dc:	cmp	r0, #0
   126e0:	beq	12774 <__assert_fail@plt+0x13c0>
   126e4:	mov	r1, #47	; 0x2f
   126e8:	mov	r4, r0
   126ec:	bl	1133c <strrchr@plt>
   126f0:	cmp	r0, #0
   126f4:	mov	r5, r4
   126f8:	addne	r5, r0, #1
   126fc:	sub	r0, r5, r4
   12700:	cmp	r0, #7
   12704:	blt	12758 <__assert_fail@plt+0x13a4>
   12708:	movw	r1, #25828	; 0x64e4
   1270c:	sub	r0, r5, #7
   12710:	mov	r2, #7
   12714:	movt	r1, #1
   12718:	bl	11378 <strncmp@plt>
   1271c:	cmp	r0, #0
   12720:	bne	12758 <__assert_fail@plt+0x13a4>
   12724:	movw	r1, #25836	; 0x64ec
   12728:	mov	r0, r5
   1272c:	mov	r2, #3
   12730:	movt	r1, #1
   12734:	bl	11378 <strncmp@plt>
   12738:	cmp	r0, #0
   1273c:	beq	12748 <__assert_fail@plt+0x1394>
   12740:	mov	r4, r5
   12744:	b	12758 <__assert_fail@plt+0x13a4>
   12748:	movw	r0, #29024	; 0x7160
   1274c:	add	r4, r5, #3
   12750:	movt	r0, #2
   12754:	str	r4, [r0]
   12758:	movw	r0, #29028	; 0x7164
   1275c:	movt	r0, #2
   12760:	str	r4, [r0]
   12764:	movw	r0, #29156	; 0x71e4
   12768:	movt	r0, #2
   1276c:	str	r4, [r0]
   12770:	pop	{r4, r5, fp, pc}
   12774:	movw	r0, #29040	; 0x7170
   12778:	movt	r0, #2
   1277c:	ldr	r1, [r0]
   12780:	movw	r0, #25772	; 0x64ac
   12784:	movt	r0, #1
   12788:	bl	1136c <fputs@plt>
   1278c:	bl	11384 <abort@plt>
   12790:	push	{r4, r5, r6, sl, fp, lr}
   12794:	add	fp, sp, #16
   12798:	mov	r4, r0
   1279c:	movw	r0, #29160	; 0x71e8
   127a0:	movt	r0, #2
   127a4:	cmp	r4, #0
   127a8:	moveq	r4, r0
   127ac:	bl	112ac <__errno_location@plt>
   127b0:	ldr	r6, [r0]
   127b4:	mov	r5, r0
   127b8:	mov	r0, r4
   127bc:	mov	r1, #48	; 0x30
   127c0:	bl	14db4 <__assert_fail@plt+0x3a00>
   127c4:	str	r6, [r5]
   127c8:	pop	{r4, r5, r6, sl, fp, pc}
   127cc:	movw	r1, #29160	; 0x71e8
   127d0:	cmp	r0, #0
   127d4:	movt	r1, #2
   127d8:	movne	r1, r0
   127dc:	ldr	r0, [r1]
   127e0:	bx	lr
   127e4:	movw	r2, #29160	; 0x71e8
   127e8:	cmp	r0, #0
   127ec:	movt	r2, #2
   127f0:	movne	r2, r0
   127f4:	str	r1, [r2]
   127f8:	bx	lr
   127fc:	movw	r3, #29160	; 0x71e8
   12800:	cmp	r0, #0
   12804:	and	r2, r2, #1
   12808:	movt	r3, #2
   1280c:	movne	r3, r0
   12810:	ubfx	r0, r1, #5, #3
   12814:	and	r1, r1, #31
   12818:	add	ip, r3, r0, lsl #2
   1281c:	mov	r0, #1
   12820:	ldr	r3, [ip, #8]
   12824:	and	r0, r0, r3, lsr r1
   12828:	eor	r2, r0, r2
   1282c:	eor	r1, r3, r2, lsl r1
   12830:	str	r1, [ip, #8]
   12834:	bx	lr
   12838:	movw	r2, #29160	; 0x71e8
   1283c:	cmp	r0, #0
   12840:	movt	r2, #2
   12844:	movne	r2, r0
   12848:	ldr	r0, [r2, #4]
   1284c:	str	r1, [r2, #4]
   12850:	bx	lr
   12854:	push	{fp, lr}
   12858:	mov	fp, sp
   1285c:	movw	r3, #29160	; 0x71e8
   12860:	cmp	r0, #0
   12864:	movt	r3, #2
   12868:	movne	r3, r0
   1286c:	cmp	r1, #0
   12870:	mov	r0, #10
   12874:	cmpne	r2, #0
   12878:	str	r0, [r3]
   1287c:	bne	12884 <__assert_fail@plt+0x14d0>
   12880:	bl	11384 <abort@plt>
   12884:	str	r1, [r3, #40]	; 0x28
   12888:	str	r2, [r3, #44]	; 0x2c
   1288c:	pop	{fp, pc}
   12890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12894:	add	fp, sp, #28
   12898:	sub	sp, sp, #20
   1289c:	mov	r7, r0
   128a0:	ldr	r0, [fp, #8]
   128a4:	movw	r5, #29160	; 0x71e8
   128a8:	mov	r8, r3
   128ac:	mov	r9, r2
   128b0:	mov	sl, r1
   128b4:	movt	r5, #2
   128b8:	cmp	r0, #0
   128bc:	movne	r5, r0
   128c0:	bl	112ac <__errno_location@plt>
   128c4:	ldr	r2, [r5, #40]	; 0x28
   128c8:	ldr	r3, [r5, #44]	; 0x2c
   128cc:	mov	r4, r0
   128d0:	ldm	r5, {r0, r1}
   128d4:	add	r5, r5, #8
   128d8:	ldr	r6, [r4]
   128dc:	stm	sp, {r0, r1, r5}
   128e0:	mov	r0, r7
   128e4:	mov	r1, sl
   128e8:	str	r2, [sp, #12]
   128ec:	str	r3, [sp, #16]
   128f0:	mov	r2, r9
   128f4:	mov	r3, r8
   128f8:	bl	12908 <__assert_fail@plt+0x1554>
   128fc:	str	r6, [r4]
   12900:	sub	sp, fp, #28
   12904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1290c:	add	fp, sp, #28
   12910:	sub	sp, sp, #156	; 0x9c
   12914:	mov	r5, r0
   12918:	add	r0, r2, #1
   1291c:	mov	r6, r1
   12920:	mov	sl, r3
   12924:	str	r2, [fp, #-80]	; 0xffffffb0
   12928:	str	r0, [sp, #72]	; 0x48
   1292c:	ldr	r0, [fp, #12]
   12930:	and	r1, r0, #1
   12934:	str	r1, [sp, #32]
   12938:	and	r1, r0, #4
   1293c:	str	r1, [sp, #28]
   12940:	ubfx	r9, r0, #1, #1
   12944:	bl	111d4 <__ctype_get_mb_cur_max@plt>
   12948:	str	r0, [sp, #40]	; 0x28
   1294c:	ldr	r0, [fp, #24]
   12950:	ldr	r7, [fp, #8]
   12954:	mov	r1, #0
   12958:	mov	lr, #0
   1295c:	str	r5, [fp, #-84]	; 0xffffffac
   12960:	str	r1, [sp, #60]	; 0x3c
   12964:	mov	r1, #1
   12968:	str	r1, [fp, #-48]	; 0xffffffd0
   1296c:	str	r0, [sp, #80]	; 0x50
   12970:	ldr	r0, [fp, #20]
   12974:	str	r0, [sp, #76]	; 0x4c
   12978:	mov	r0, #0
   1297c:	str	r0, [sp, #56]	; 0x38
   12980:	mov	r0, #0
   12984:	str	r0, [fp, #-88]	; 0xffffffa8
   12988:	mov	r0, #0
   1298c:	str	r0, [fp, #-72]	; 0xffffffb8
   12990:	mov	r0, #0
   12994:	cmp	r7, #10
   12998:	bhi	13974 <__assert_fail@plt+0x25c0>
   1299c:	add	r1, pc, #24
   129a0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   129a4:	mov	ip, r6
   129a8:	mov	r8, #0
   129ac:	mov	r2, #1
   129b0:	mov	r6, #0
   129b4:	mov	r3, sl
   129b8:	ldr	pc, [r1, r7, lsl #2]
   129bc:	andeq	r2, r1, r8, lsr #21
   129c0:	strdeq	r2, [r1], -ip
   129c4:			; <UNDEFINED> instruction: 0x00012abc
   129c8:	andeq	r2, r1, r0, lsr #21
   129cc:	strdeq	r2, [r1], -r0
   129d0:	andeq	r2, r1, r4, lsr #22
   129d4:	andeq	r2, r1, ip, asr #21
   129d8:	andeq	r2, r1, r8, lsr #23
   129dc:	andeq	r2, r1, r8, ror #19
   129e0:	andeq	r2, r1, r8, ror #19
   129e4:	andeq	r2, r1, r8, lsr #20
   129e8:	movw	r0, #25918	; 0x653e
   129ec:	mov	r1, r7
   129f0:	mov	r6, r5
   129f4:	mov	r4, ip
   129f8:	mov	r5, lr
   129fc:	movt	r0, #1
   12a00:	bl	140d8 <__assert_fail@plt+0x2d24>
   12a04:	str	r0, [sp, #76]	; 0x4c
   12a08:	movw	r0, #25920	; 0x6540
   12a0c:	mov	r1, r7
   12a10:	movt	r0, #1
   12a14:	bl	140d8 <__assert_fail@plt+0x2d24>
   12a18:	mov	lr, r5
   12a1c:	mov	r5, r6
   12a20:	mov	ip, r4
   12a24:	str	r0, [sp, #80]	; 0x50
   12a28:	mov	r8, #0
   12a2c:	tst	r9, #1
   12a30:	str	lr, [sp, #44]	; 0x2c
   12a34:	bne	12a6c <__assert_fail@plt+0x16b8>
   12a38:	ldr	r0, [sp, #76]	; 0x4c
   12a3c:	ldrb	r0, [r0]
   12a40:	cmp	r0, #0
   12a44:	beq	12a6c <__assert_fail@plt+0x16b8>
   12a48:	ldr	r1, [sp, #76]	; 0x4c
   12a4c:	mov	r8, #0
   12a50:	add	r1, r1, #1
   12a54:	cmp	r8, ip
   12a58:	strbcc	r0, [r5, r8]
   12a5c:	ldrb	r0, [r1, r8]
   12a60:	add	r8, r8, #1
   12a64:	cmp	r0, #0
   12a68:	bne	12a54 <__assert_fail@plt+0x16a0>
   12a6c:	ldr	r6, [sp, #80]	; 0x50
   12a70:	mov	r4, ip
   12a74:	mov	r0, r6
   12a78:	bl	11294 <strlen@plt>
   12a7c:	mov	ip, r4
   12a80:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12a84:	ldr	lr, [sp, #44]	; 0x2c
   12a88:	str	r6, [fp, #-88]	; 0xffffffa8
   12a8c:	str	r0, [fp, #-72]	; 0xffffffb8
   12a90:	mov	r2, #1
   12a94:	mov	r6, r9
   12a98:	mov	r3, sl
   12a9c:	b	12ba8 <__assert_fail@plt+0x17f4>
   12aa0:	mov	r0, #1
   12aa4:	b	12afc <__assert_fail@plt+0x1748>
   12aa8:	mov	r7, #0
   12aac:	mov	r8, #0
   12ab0:	mov	r2, r0
   12ab4:	mov	r6, #0
   12ab8:	b	12ba8 <__assert_fail@plt+0x17f4>
   12abc:	tst	r9, #1
   12ac0:	bne	12afc <__assert_fail@plt+0x1748>
   12ac4:	mov	r2, r0
   12ac8:	b	12b54 <__assert_fail@plt+0x17a0>
   12acc:	mov	r0, #1
   12ad0:	mov	r8, #0
   12ad4:	mov	r7, #5
   12ad8:	mov	r2, #1
   12adc:	str	r0, [fp, #-72]	; 0xffffffb8
   12ae0:	movw	r0, #25916	; 0x653c
   12ae4:	movt	r0, #1
   12ae8:	str	r0, [fp, #-88]	; 0xffffffa8
   12aec:	b	12b1c <__assert_fail@plt+0x1768>
   12af0:	mov	r2, #1
   12af4:	tst	r9, #1
   12af8:	beq	12b54 <__assert_fail@plt+0x17a0>
   12afc:	mov	r1, #1
   12b00:	mov	r8, #0
   12b04:	mov	r7, #2
   12b08:	mov	r2, r0
   12b0c:	str	r1, [fp, #-72]	; 0xffffffb8
   12b10:	movw	r1, #25920	; 0x6540
   12b14:	movt	r1, #1
   12b18:	str	r1, [fp, #-88]	; 0xffffffa8
   12b1c:	mov	r6, #1
   12b20:	b	12ba8 <__assert_fail@plt+0x17f4>
   12b24:	tst	r9, #1
   12b28:	beq	12b78 <__assert_fail@plt+0x17c4>
   12b2c:	mov	r0, #1
   12b30:	mov	r8, #0
   12b34:	mov	r2, #1
   12b38:	mov	r6, #1
   12b3c:	mov	r7, #5
   12b40:	str	r0, [fp, #-72]	; 0xffffffb8
   12b44:	movw	r0, #25916	; 0x653c
   12b48:	movt	r0, #1
   12b4c:	str	r0, [fp, #-88]	; 0xffffffa8
   12b50:	b	12ba8 <__assert_fail@plt+0x17f4>
   12b54:	cmp	ip, #0
   12b58:	mov	r8, #1
   12b5c:	mov	r6, #0
   12b60:	mov	r7, #2
   12b64:	movne	r0, #39	; 0x27
   12b68:	strbne	r0, [r5]
   12b6c:	movw	r0, #25920	; 0x6540
   12b70:	movt	r0, #1
   12b74:	b	12b9c <__assert_fail@plt+0x17e8>
   12b78:	cmp	ip, #0
   12b7c:	mov	r8, #1
   12b80:	mov	r2, #1
   12b84:	mov	r7, #5
   12b88:	mov	r6, #0
   12b8c:	movne	r0, #34	; 0x22
   12b90:	strbne	r0, [r5]
   12b94:	movw	r0, #25916	; 0x653c
   12b98:	movt	r0, #1
   12b9c:	str	r0, [fp, #-88]	; 0xffffffa8
   12ba0:	mov	r0, #1
   12ba4:	str	r0, [fp, #-72]	; 0xffffffb8
   12ba8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12bac:	str	r7, [fp, #-68]	; 0xffffffbc
   12bb0:	str	r6, [fp, #-76]	; 0xffffffb4
   12bb4:	str	r2, [sp, #84]	; 0x54
   12bb8:	cmp	r0, #0
   12bbc:	movwne	r0, #1
   12bc0:	and	r1, r0, r6
   12bc4:	and	r1, r2, r1
   12bc8:	str	r1, [sp, #48]	; 0x30
   12bcc:	sub	r1, r7, #2
   12bd0:	clz	r1, r1
   12bd4:	lsr	r1, r1, #5
   12bd8:	and	r1, r1, r6
   12bdc:	str	r1, [sp, #64]	; 0x40
   12be0:	subs	r1, r7, #2
   12be4:	eor	r7, r6, #1
   12be8:	movwne	r1, #1
   12bec:	str	r7, [sp, #92]	; 0x5c
   12bf0:	orr	r7, r1, r7
   12bf4:	and	r1, r1, r2
   12bf8:	and	r0, r0, r1
   12bfc:	str	r7, [sp, #68]	; 0x44
   12c00:	mov	r7, #0
   12c04:	str	r0, [fp, #-60]	; 0xffffffc4
   12c08:	orr	r0, r1, r6
   12c0c:	ldr	r1, [fp, #16]
   12c10:	eor	r0, r0, #1
   12c14:	clz	r1, r1
   12c18:	lsr	r1, r1, #5
   12c1c:	orr	r0, r1, r0
   12c20:	str	r0, [fp, #-64]	; 0xffffffc0
   12c24:	eor	r0, r2, #1
   12c28:	str	r0, [sp, #52]	; 0x34
   12c2c:	cmn	r3, #1
   12c30:	beq	12c40 <__assert_fail@plt+0x188c>
   12c34:	cmp	r7, r3
   12c38:	bne	12c4c <__assert_fail@plt+0x1898>
   12c3c:	b	137a8 <__assert_fail@plt+0x23f4>
   12c40:	ldrb	r0, [r4, r7]
   12c44:	cmp	r0, #0
   12c48:	beq	137b0 <__assert_fail@plt+0x23fc>
   12c4c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12c50:	cmp	r0, #0
   12c54:	beq	12c9c <__assert_fail@plt+0x18e8>
   12c58:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c5c:	add	r5, r7, r0
   12c60:	cmp	r0, #2
   12c64:	bcc	12cb0 <__assert_fail@plt+0x18fc>
   12c68:	mov	r0, #0
   12c6c:	cmn	r3, #1
   12c70:	str	r0, [fp, #-56]	; 0xffffffc8
   12c74:	bne	12cb8 <__assert_fail@plt+0x1904>
   12c78:	mov	r0, r4
   12c7c:	mov	r4, ip
   12c80:	mov	r6, lr
   12c84:	bl	11294 <strlen@plt>
   12c88:	mov	ip, r4
   12c8c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12c90:	mov	lr, r6
   12c94:	mov	r3, r0
   12c98:	b	12cb8 <__assert_fail@plt+0x1904>
   12c9c:	mov	r0, #0
   12ca0:	mov	sl, r3
   12ca4:	str	r0, [fp, #-56]	; 0xffffffc8
   12ca8:	mov	r0, #0
   12cac:	b	12d24 <__assert_fail@plt+0x1970>
   12cb0:	mov	r0, #0
   12cb4:	str	r0, [fp, #-56]	; 0xffffffc8
   12cb8:	cmp	r5, r3
   12cbc:	bls	12cd0 <__assert_fail@plt+0x191c>
   12cc0:	ldr	r5, [fp, #-84]	; 0xffffffac
   12cc4:	mov	r0, #0
   12cc8:	mov	sl, r3
   12ccc:	b	12d24 <__assert_fail@plt+0x1970>
   12cd0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12cd4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12cd8:	add	r0, r4, r7
   12cdc:	mov	r5, lr
   12ce0:	mov	r6, ip
   12ce4:	mov	sl, r3
   12ce8:	bl	1127c <bcmp@plt>
   12cec:	ldr	r2, [sp, #92]	; 0x5c
   12cf0:	cmp	r0, #0
   12cf4:	ldr	r3, [fp, #-84]	; 0xffffffac
   12cf8:	mov	r1, r0
   12cfc:	movwne	r1, #1
   12d00:	orr	r1, r1, r2
   12d04:	tst	r1, #1
   12d08:	beq	13834 <__assert_fail@plt+0x2480>
   12d0c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12d10:	clz	r0, r0
   12d14:	mov	lr, r5
   12d18:	mov	ip, r6
   12d1c:	mov	r5, r3
   12d20:	lsr	r0, r0, #5
   12d24:	str	r0, [fp, #-52]	; 0xffffffcc
   12d28:	ldrb	r6, [r4, r7]
   12d2c:	cmp	r6, #126	; 0x7e
   12d30:	bhi	13258 <__assert_fail@plt+0x1ea4>
   12d34:	add	r3, pc, #16
   12d38:	mov	r9, #1
   12d3c:	mov	r2, #110	; 0x6e
   12d40:	mov	r0, #97	; 0x61
   12d44:	mov	r1, #0
   12d48:	ldr	pc, [r3, r6, lsl #2]
   12d4c:	strheq	r3, [r1], -ip
   12d50:	andeq	r3, r1, r8, asr r2
   12d54:	andeq	r3, r1, r8, asr r2
   12d58:	andeq	r3, r1, r8, asr r2
   12d5c:	andeq	r3, r1, r8, asr r2
   12d60:	andeq	r3, r1, r8, asr r2
   12d64:	andeq	r3, r1, r8, asr r2
   12d68:	ldrdeq	r3, [r1], -r8
   12d6c:	muleq	r1, ip, r0
   12d70:	muleq	r1, r4, r0
   12d74:	andeq	r3, r1, r8, lsr #1
   12d78:	andeq	r3, r1, r0, asr #3
   12d7c:	andeq	r3, r1, ip, lsl #1
   12d80:	andeq	r3, r1, r4, lsr #1
   12d84:	andeq	r3, r1, r8, asr r2
   12d88:	andeq	r3, r1, r8, asr r2
   12d8c:	andeq	r3, r1, r8, asr r2
   12d90:	andeq	r3, r1, r8, asr r2
   12d94:	andeq	r3, r1, r8, asr r2
   12d98:	andeq	r3, r1, r8, asr r2
   12d9c:	andeq	r3, r1, r8, asr r2
   12da0:	andeq	r3, r1, r8, asr r2
   12da4:	andeq	r3, r1, r8, asr r2
   12da8:	andeq	r3, r1, r8, asr r2
   12dac:	andeq	r3, r1, r8, asr r2
   12db0:	andeq	r3, r1, r8, asr r2
   12db4:	andeq	r3, r1, r8, asr r2
   12db8:	andeq	r3, r1, r8, asr r2
   12dbc:	andeq	r3, r1, r8, asr r2
   12dc0:	andeq	r3, r1, r8, asr r2
   12dc4:	andeq	r3, r1, r8, asr r2
   12dc8:	andeq	r3, r1, r8, asr r2
   12dcc:	andeq	r3, r1, ip, lsr r0
   12dd0:	andeq	r3, r1, r0, asr #32
   12dd4:	andeq	r3, r1, r0, asr #32
   12dd8:	andeq	r3, r1, r4, lsr #32
   12ddc:	andeq	r3, r1, r0, asr #32
   12de0:	andeq	r2, r1, r8, asr #30
   12de4:	andeq	r3, r1, r0, asr #32
   12de8:	andeq	r3, r1, r8, asr #3
   12dec:	andeq	r3, r1, r0, asr #32
   12df0:	andeq	r3, r1, r0, asr #32
   12df4:	andeq	r3, r1, r0, asr #32
   12df8:	andeq	r2, r1, r8, asr #30
   12dfc:	andeq	r2, r1, r8, asr #30
   12e00:	andeq	r2, r1, r8, asr #30
   12e04:	andeq	r2, r1, r8, asr #30
   12e08:	andeq	r2, r1, r8, asr #30
   12e0c:	andeq	r2, r1, r8, asr #30
   12e10:	andeq	r2, r1, r8, asr #30
   12e14:	andeq	r2, r1, r8, asr #30
   12e18:	andeq	r2, r1, r8, asr #30
   12e1c:	andeq	r2, r1, r8, asr #30
   12e20:	andeq	r2, r1, r8, asr #30
   12e24:	andeq	r2, r1, r8, asr #30
   12e28:	andeq	r2, r1, r8, asr #30
   12e2c:	andeq	r2, r1, r8, asr #30
   12e30:	andeq	r2, r1, r8, asr #30
   12e34:	andeq	r2, r1, r8, asr #30
   12e38:	andeq	r3, r1, r0, asr #32
   12e3c:	andeq	r3, r1, r0, asr #32
   12e40:	andeq	r3, r1, r0, asr #32
   12e44:	andeq	r3, r1, r0, asr #32
   12e48:	muleq	r1, r4, r1
   12e4c:	andeq	r3, r1, r8, asr r2
   12e50:	andeq	r2, r1, r8, asr #30
   12e54:	andeq	r2, r1, r8, asr #30
   12e58:	andeq	r2, r1, r8, asr #30
   12e5c:	andeq	r2, r1, r8, asr #30
   12e60:	andeq	r2, r1, r8, asr #30
   12e64:	andeq	r2, r1, r8, asr #30
   12e68:	andeq	r2, r1, r8, asr #30
   12e6c:	andeq	r2, r1, r8, asr #30
   12e70:	andeq	r2, r1, r8, asr #30
   12e74:	andeq	r2, r1, r8, asr #30
   12e78:	andeq	r2, r1, r8, asr #30
   12e7c:	andeq	r2, r1, r8, asr #30
   12e80:	andeq	r2, r1, r8, asr #30
   12e84:	andeq	r2, r1, r8, asr #30
   12e88:	andeq	r2, r1, r8, asr #30
   12e8c:	andeq	r2, r1, r8, asr #30
   12e90:	andeq	r2, r1, r8, asr #30
   12e94:	andeq	r2, r1, r8, asr #30
   12e98:	andeq	r2, r1, r8, asr #30
   12e9c:	andeq	r2, r1, r8, asr #30
   12ea0:	andeq	r2, r1, r8, asr #30
   12ea4:	andeq	r2, r1, r8, asr #30
   12ea8:	andeq	r2, r1, r8, asr #30
   12eac:	andeq	r2, r1, r8, asr #30
   12eb0:	andeq	r2, r1, r8, asr #30
   12eb4:	andeq	r2, r1, r8, asr #30
   12eb8:	andeq	r3, r1, r0, asr #32
   12ebc:	andeq	r3, r1, r8, rrx
   12ec0:	andeq	r2, r1, r8, asr #30
   12ec4:	andeq	r3, r1, r0, asr #32
   12ec8:	andeq	r2, r1, r8, asr #30
   12ecc:	andeq	r3, r1, r0, asr #32
   12ed0:	andeq	r2, r1, r8, asr #30
   12ed4:	andeq	r2, r1, r8, asr #30
   12ed8:	andeq	r2, r1, r8, asr #30
   12edc:	andeq	r2, r1, r8, asr #30
   12ee0:	andeq	r2, r1, r8, asr #30
   12ee4:	andeq	r2, r1, r8, asr #30
   12ee8:	andeq	r2, r1, r8, asr #30
   12eec:	andeq	r2, r1, r8, asr #30
   12ef0:	andeq	r2, r1, r8, asr #30
   12ef4:	andeq	r2, r1, r8, asr #30
   12ef8:	andeq	r2, r1, r8, asr #30
   12efc:	andeq	r2, r1, r8, asr #30
   12f00:	andeq	r2, r1, r8, asr #30
   12f04:	andeq	r2, r1, r8, asr #30
   12f08:	andeq	r2, r1, r8, asr #30
   12f0c:	andeq	r2, r1, r8, asr #30
   12f10:	andeq	r2, r1, r8, asr #30
   12f14:	andeq	r2, r1, r8, asr #30
   12f18:	andeq	r2, r1, r8, asr #30
   12f1c:	andeq	r2, r1, r8, asr #30
   12f20:	andeq	r2, r1, r8, asr #30
   12f24:	andeq	r2, r1, r8, asr #30
   12f28:	andeq	r2, r1, r8, asr #30
   12f2c:	andeq	r2, r1, r8, asr #30
   12f30:	andeq	r2, r1, r8, asr #30
   12f34:	andeq	r2, r1, r8, asr #30
   12f38:	strdeq	r2, [r1], -ip
   12f3c:	andeq	r3, r1, r0, asr #32
   12f40:	strdeq	r2, [r1], -ip
   12f44:	andeq	r3, r1, r4, lsr #32
   12f48:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f4c:	tst	r0, #1
   12f50:	bne	12f7c <__assert_fail@plt+0x1bc8>
   12f54:	ldr	r1, [fp, #16]
   12f58:	ubfx	r0, r6, #5, #3
   12f5c:	mov	r2, #1
   12f60:	ldr	r0, [r1, r0, lsl #2]
   12f64:	and	r1, r6, #31
   12f68:	tst	r0, r2, lsl r1
   12f6c:	beq	12f7c <__assert_fail@plt+0x1bc8>
   12f70:	mov	r0, r6
   12f74:	mov	r1, r9
   12f78:	b	12f90 <__assert_fail@plt+0x1bdc>
   12f7c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12f80:	mov	r1, r9
   12f84:	cmp	r0, #0
   12f88:	mov	r0, r6
   12f8c:	beq	136dc <__assert_fail@plt+0x2328>
   12f90:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12f94:	tst	r2, #1
   12f98:	bne	13878 <__assert_fail@plt+0x24c4>
   12f9c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12fa0:	subs	r2, r2, #2
   12fa4:	movwne	r2, #1
   12fa8:	orr	r2, r2, lr
   12fac:	tst	r2, #1
   12fb0:	bne	12fe8 <__assert_fail@plt+0x1c34>
   12fb4:	cmp	r8, ip
   12fb8:	mov	lr, #1
   12fbc:	movcc	r2, #39	; 0x27
   12fc0:	strbcc	r2, [r5, r8]
   12fc4:	add	r2, r8, #1
   12fc8:	cmp	r2, ip
   12fcc:	movcc	r3, #36	; 0x24
   12fd0:	strbcc	r3, [r5, r2]
   12fd4:	add	r2, r8, #2
   12fd8:	add	r8, r8, #3
   12fdc:	cmp	r2, ip
   12fe0:	movcc	r3, #39	; 0x27
   12fe4:	strbcc	r3, [r5, r2]
   12fe8:	cmp	r8, ip
   12fec:	movcc	r2, #92	; 0x5c
   12ff0:	strbcc	r2, [r5, r8]
   12ff4:	add	r8, r8, #1
   12ff8:	b	1371c <__assert_fail@plt+0x2368>
   12ffc:	cmp	sl, #1
   13000:	beq	13024 <__assert_fail@plt+0x1c70>
   13004:	mov	r9, #0
   13008:	cmn	sl, #1
   1300c:	bne	13030 <__assert_fail@plt+0x1c7c>
   13010:	ldrb	r0, [r4, #1]
   13014:	cmp	r0, #0
   13018:	beq	13024 <__assert_fail@plt+0x1c70>
   1301c:	mvn	sl, #0
   13020:	b	13030 <__assert_fail@plt+0x1c7c>
   13024:	mov	r9, #0
   13028:	cmp	r7, #0
   1302c:	beq	1303c <__assert_fail@plt+0x1c88>
   13030:	mov	r0, #0
   13034:	str	r0, [fp, #-56]	; 0xffffffc8
   13038:	b	12f48 <__assert_fail@plt+0x1b94>
   1303c:	mov	r1, #1
   13040:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13044:	cmp	r0, #2
   13048:	bne	13060 <__assert_fail@plt+0x1cac>
   1304c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13050:	mov	r9, r1
   13054:	tst	r0, #1
   13058:	beq	12f48 <__assert_fail@plt+0x1b94>
   1305c:	b	13878 <__assert_fail@plt+0x24c4>
   13060:	mov	r9, r1
   13064:	b	12f48 <__assert_fail@plt+0x1b94>
   13068:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1306c:	cmp	r0, #2
   13070:	bne	132b4 <__assert_fail@plt+0x1f00>
   13074:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13078:	tst	r0, #1
   1307c:	bne	13878 <__assert_fail@plt+0x24c4>
   13080:	mov	r0, #0
   13084:	str	r0, [fp, #-56]	; 0xffffffc8
   13088:	b	132cc <__assert_fail@plt+0x1f18>
   1308c:	mov	r0, #102	; 0x66
   13090:	b	132d8 <__assert_fail@plt+0x1f24>
   13094:	mov	r2, #116	; 0x74
   13098:	b	130a8 <__assert_fail@plt+0x1cf4>
   1309c:	mov	r0, #98	; 0x62
   130a0:	b	132d8 <__assert_fail@plt+0x1f24>
   130a4:	mov	r2, #114	; 0x72
   130a8:	ldr	r0, [sp, #68]	; 0x44
   130ac:	tst	r0, #1
   130b0:	mov	r0, r2
   130b4:	bne	132d8 <__assert_fail@plt+0x1f24>
   130b8:	b	13878 <__assert_fail@plt+0x24c4>
   130bc:	ldr	r0, [sp, #84]	; 0x54
   130c0:	tst	r0, #1
   130c4:	beq	132f8 <__assert_fail@plt+0x1f44>
   130c8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130cc:	tst	r0, #1
   130d0:	bne	13964 <__assert_fail@plt+0x25b0>
   130d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   130d8:	mov	r2, sl
   130dc:	subs	r0, r0, #2
   130e0:	movwne	r0, #1
   130e4:	orr	r0, r0, lr
   130e8:	tst	r0, #1
   130ec:	bne	13124 <__assert_fail@plt+0x1d70>
   130f0:	cmp	r8, ip
   130f4:	mov	lr, #1
   130f8:	movcc	r0, #39	; 0x27
   130fc:	strbcc	r0, [r5, r8]
   13100:	add	r0, r8, #1
   13104:	cmp	r0, ip
   13108:	movcc	r1, #36	; 0x24
   1310c:	strbcc	r1, [r5, r0]
   13110:	add	r0, r8, #2
   13114:	add	r8, r8, #3
   13118:	cmp	r0, ip
   1311c:	movcc	r1, #39	; 0x27
   13120:	strbcc	r1, [r5, r0]
   13124:	mov	r1, #1
   13128:	cmp	r8, ip
   1312c:	mov	r9, #0
   13130:	mov	r6, #48	; 0x30
   13134:	str	r1, [fp, #-56]	; 0xffffffc8
   13138:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1313c:	movcc	r0, #92	; 0x5c
   13140:	strbcc	r0, [r5, r8]
   13144:	add	r0, r8, #1
   13148:	cmp	r1, #2
   1314c:	beq	13454 <__assert_fail@plt+0x20a0>
   13150:	add	r1, r7, #1
   13154:	cmp	r1, r2
   13158:	bcs	13454 <__assert_fail@plt+0x20a0>
   1315c:	ldrb	r1, [r4, r1]
   13160:	sub	r1, r1, #48	; 0x30
   13164:	uxtb	r1, r1
   13168:	cmp	r1, #9
   1316c:	bhi	13454 <__assert_fail@plt+0x20a0>
   13170:	cmp	r0, ip
   13174:	movcc	r1, #48	; 0x30
   13178:	strbcc	r1, [r5, r0]
   1317c:	add	r0, r8, #2
   13180:	add	r8, r8, #3
   13184:	cmp	r0, ip
   13188:	movcc	r1, #48	; 0x30
   1318c:	strbcc	r1, [r5, r0]
   13190:	b	12f48 <__assert_fail@plt+0x1b94>
   13194:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13198:	mov	r6, #63	; 0x3f
   1319c:	cmp	r0, #5
   131a0:	beq	1345c <__assert_fail@plt+0x20a8>
   131a4:	mov	r1, #0
   131a8:	cmp	r0, #2
   131ac:	str	r1, [fp, #-56]	; 0xffffffc8
   131b0:	bne	13510 <__assert_fail@plt+0x215c>
   131b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   131b8:	mov	r9, #0
   131bc:	b	13054 <__assert_fail@plt+0x1ca0>
   131c0:	mov	r0, #118	; 0x76
   131c4:	b	132d8 <__assert_fail@plt+0x1f24>
   131c8:	mov	r0, #1
   131cc:	mov	r6, #39	; 0x27
   131d0:	str	r0, [sp, #60]	; 0x3c
   131d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   131d8:	cmp	r0, #2
   131dc:	bne	13250 <__assert_fail@plt+0x1e9c>
   131e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   131e4:	tst	r0, #1
   131e8:	bne	13878 <__assert_fail@plt+0x24c4>
   131ec:	ldr	r2, [sp, #56]	; 0x38
   131f0:	clz	r1, ip
   131f4:	mov	lr, #0
   131f8:	lsr	r1, r1, #5
   131fc:	cmp	r2, #0
   13200:	mov	r0, r2
   13204:	movwne	r0, #1
   13208:	orrs	r0, r0, r1
   1320c:	moveq	r2, ip
   13210:	moveq	ip, r0
   13214:	cmp	r8, ip
   13218:	str	r2, [sp, #56]	; 0x38
   1321c:	movcc	r0, #39	; 0x27
   13220:	strbcc	r0, [r5, r8]
   13224:	add	r0, r8, #1
   13228:	cmp	r0, ip
   1322c:	movcc	r1, #92	; 0x5c
   13230:	strbcc	r1, [r5, r0]
   13234:	add	r0, r8, #2
   13238:	add	r8, r8, #3
   1323c:	cmp	r0, ip
   13240:	movcc	r1, #39	; 0x27
   13244:	strbcc	r1, [r5, r0]
   13248:	mov	r0, #0
   1324c:	str	r0, [fp, #-56]	; 0xffffffc8
   13250:	mov	r9, #1
   13254:	b	12f48 <__assert_fail@plt+0x1b94>
   13258:	ldr	r0, [sp, #40]	; 0x28
   1325c:	str	lr, [sp, #44]	; 0x2c
   13260:	str	ip, [sp, #88]	; 0x58
   13264:	cmp	r0, #1
   13268:	bne	13318 <__assert_fail@plt+0x1f64>
   1326c:	str	sl, [sp, #36]	; 0x24
   13270:	bl	11264 <__ctype_b_loc@plt>
   13274:	ldr	r0, [r0]
   13278:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1327c:	mov	r1, #1
   13280:	add	r0, r0, r6, lsl #1
   13284:	ldrb	r0, [r0, #1]
   13288:	ubfx	r9, r0, #6, #1
   1328c:	ldr	r0, [sp, #52]	; 0x34
   13290:	ldr	lr, [sp, #44]	; 0x2c
   13294:	cmp	r1, #1
   13298:	orr	r3, r9, r0
   1329c:	bhi	13518 <__assert_fail@plt+0x2164>
   132a0:	tst	r3, #1
   132a4:	beq	13518 <__assert_fail@plt+0x2164>
   132a8:	ldr	sl, [sp, #36]	; 0x24
   132ac:	ldr	ip, [sp, #88]	; 0x58
   132b0:	b	12f48 <__assert_fail@plt+0x1b94>
   132b4:	ldr	r1, [sp, #48]	; 0x30
   132b8:	mov	r0, #0
   132bc:	str	r0, [fp, #-56]	; 0xffffffc8
   132c0:	mov	r0, #92	; 0x5c
   132c4:	cmp	r1, #0
   132c8:	beq	132d8 <__assert_fail@plt+0x1f24>
   132cc:	mov	r6, #92	; 0x5c
   132d0:	mov	r9, #0
   132d4:	b	136dc <__assert_fail@plt+0x2328>
   132d8:	mov	r1, #0
   132dc:	mov	r9, #0
   132e0:	str	r1, [fp, #-56]	; 0xffffffc8
   132e4:	ldr	r1, [sp, #84]	; 0x54
   132e8:	tst	r1, #1
   132ec:	mov	r1, #0
   132f0:	beq	12f48 <__assert_fail@plt+0x1b94>
   132f4:	b	12f90 <__assert_fail@plt+0x1bdc>
   132f8:	ldr	r0, [sp, #32]
   132fc:	mov	r6, #0
   13300:	mov	r9, #0
   13304:	cmp	r0, #0
   13308:	mov	r0, #0
   1330c:	str	r0, [fp, #-56]	; 0xffffffc8
   13310:	beq	12f48 <__assert_fail@plt+0x1b94>
   13314:	b	13734 <__assert_fail@plt+0x2380>
   13318:	mov	r0, #0
   1331c:	cmn	sl, #1
   13320:	sub	r3, fp, #40	; 0x28
   13324:	str	r0, [fp, #-36]	; 0xffffffdc
   13328:	str	r0, [fp, #-40]	; 0xffffffd8
   1332c:	bne	13344 <__assert_fail@plt+0x1f90>
   13330:	mov	r0, r4
   13334:	bl	11294 <strlen@plt>
   13338:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1333c:	sub	r3, fp, #40	; 0x28
   13340:	mov	sl, r0
   13344:	ldr	r0, [sp, #72]	; 0x48
   13348:	mov	r9, #1
   1334c:	mov	r1, #0
   13350:	str	sl, [sp, #36]	; 0x24
   13354:	add	r0, r0, r7
   13358:	str	r0, [sp, #20]
   1335c:	add	r0, r1, r7
   13360:	str	r1, [sp, #24]
   13364:	add	r1, r4, r0
   13368:	mov	r4, r0
   1336c:	sub	r2, sl, r0
   13370:	sub	r0, fp, #44	; 0x2c
   13374:	bl	1569c <__assert_fail@plt+0x42e8>
   13378:	cmp	r0, #0
   1337c:	beq	13788 <__assert_fail@plt+0x23d4>
   13380:	cmn	r0, #1
   13384:	beq	13740 <__assert_fail@plt+0x238c>
   13388:	ldr	r2, [sp, #36]	; 0x24
   1338c:	cmn	r0, #2
   13390:	beq	13748 <__assert_fail@plt+0x2394>
   13394:	ldr	r2, [sp, #64]	; 0x40
   13398:	ldr	ip, [sp, #88]	; 0x58
   1339c:	ldr	r4, [sp, #84]	; 0x54
   133a0:	ldr	lr, [fp, #-48]	; 0xffffffd0
   133a4:	cmp	r0, #2
   133a8:	mov	r1, #0
   133ac:	movwcc	r1, #1
   133b0:	eor	r2, r2, #1
   133b4:	orrs	r1, r2, r1
   133b8:	bne	13408 <__assert_fail@plt+0x2054>
   133bc:	ldr	r1, [sp, #24]
   133c0:	ldr	r2, [sp, #20]
   133c4:	add	r1, r2, r1
   133c8:	sub	r2, r0, #1
   133cc:	ldrb	r3, [r1]
   133d0:	sub	r5, r3, #94	; 0x5e
   133d4:	cmp	r5, #30
   133d8:	bhi	133f0 <__assert_fail@plt+0x203c>
   133dc:	mov	r4, #1
   133e0:	mov	sl, #1073741829	; 0x40000005
   133e4:	tst	sl, r4, lsl r5
   133e8:	ldr	r4, [sp, #84]	; 0x54
   133ec:	bne	13850 <__assert_fail@plt+0x249c>
   133f0:	sub	r3, r3, #91	; 0x5b
   133f4:	cmp	r3, #2
   133f8:	bcc	13850 <__assert_fail@plt+0x249c>
   133fc:	add	r1, r1, #1
   13400:	subs	r2, r2, #1
   13404:	bne	133cc <__assert_fail@plt+0x2018>
   13408:	ldr	r5, [sp, #24]
   1340c:	str	lr, [fp, #-48]	; 0xffffffd0
   13410:	add	r5, r0, r5
   13414:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13418:	bl	111b0 <iswprint@plt>
   1341c:	cmp	r0, #0
   13420:	sub	r4, fp, #40	; 0x28
   13424:	movwne	r0, #1
   13428:	and	r9, r9, r0
   1342c:	mov	r0, r4
   13430:	bl	11174 <mbsinit@plt>
   13434:	mov	r1, r5
   13438:	mov	r3, r4
   1343c:	ldr	sl, [sp, #36]	; 0x24
   13440:	ldr	r5, [fp, #-84]	; 0xffffffac
   13444:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13448:	cmp	r0, #0
   1344c:	beq	1335c <__assert_fail@plt+0x1fa8>
   13450:	b	1328c <__assert_fail@plt+0x1ed8>
   13454:	mov	r8, r0
   13458:	b	12f48 <__assert_fail@plt+0x1b94>
   1345c:	mov	r0, #0
   13460:	str	r0, [fp, #-56]	; 0xffffffc8
   13464:	ldr	r0, [sp, #28]
   13468:	cmp	r0, #0
   1346c:	beq	13510 <__assert_fail@plt+0x215c>
   13470:	add	r0, r7, #2
   13474:	mov	r1, sl
   13478:	cmp	r0, sl
   1347c:	bcs	13510 <__assert_fail@plt+0x215c>
   13480:	add	r1, r7, r4
   13484:	ldrb	r1, [r1, #1]
   13488:	cmp	r1, #63	; 0x3f
   1348c:	bne	13510 <__assert_fail@plt+0x215c>
   13490:	ldrb	r9, [r4, r0]
   13494:	sub	r2, r9, #33	; 0x21
   13498:	cmp	r2, #29
   1349c:	bhi	13510 <__assert_fail@plt+0x215c>
   134a0:	mov	r1, r4
   134a4:	movw	r4, #20929	; 0x51c1
   134a8:	mov	r3, #1
   134ac:	movt	r4, #14336	; 0x3800
   134b0:	tst	r4, r3, lsl r2
   134b4:	beq	1379c <__assert_fail@plt+0x23e8>
   134b8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   134bc:	tst	r2, #1
   134c0:	bne	1396c <__assert_fail@plt+0x25b8>
   134c4:	cmp	r8, ip
   134c8:	mov	r4, r1
   134cc:	mov	r7, r0
   134d0:	mov	r6, r9
   134d4:	movcc	r2, #63	; 0x3f
   134d8:	strbcc	r2, [r5, r8]
   134dc:	add	r2, r8, #1
   134e0:	cmp	r2, ip
   134e4:	movcc	r3, #34	; 0x22
   134e8:	strbcc	r3, [r5, r2]
   134ec:	add	r2, r8, #2
   134f0:	cmp	r2, ip
   134f4:	movcc	r3, #34	; 0x22
   134f8:	strbcc	r3, [r5, r2]
   134fc:	add	r2, r8, #3
   13500:	add	r8, r8, #4
   13504:	cmp	r2, ip
   13508:	movcc	r3, #63	; 0x3f
   1350c:	strbcc	r3, [r5, r2]
   13510:	mov	r9, #0
   13514:	b	12f48 <__assert_fail@plt+0x1b94>
   13518:	ldr	sl, [sp, #36]	; 0x24
   1351c:	add	r0, r1, r7
   13520:	mov	r2, #0
   13524:	str	r3, [sp, #24]
   13528:	str	r0, [fp, #-56]	; 0xffffffc8
   1352c:	tst	r3, #1
   13530:	beq	1355c <__assert_fail@plt+0x21a8>
   13534:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13538:	tst	r0, #1
   1353c:	beq	13624 <__assert_fail@plt+0x2270>
   13540:	ldr	r1, [sp, #88]	; 0x58
   13544:	mov	r0, r3
   13548:	cmp	r8, r1
   1354c:	movcc	r1, #92	; 0x5c
   13550:	strbcc	r1, [r5, r8]
   13554:	add	r8, r8, #1
   13558:	b	13628 <__assert_fail@plt+0x2274>
   1355c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13560:	tst	r1, #1
   13564:	bne	13874 <__assert_fail@plt+0x24c0>
   13568:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1356c:	subs	r2, r1, #2
   13570:	movwne	r2, #1
   13574:	orr	r2, r2, lr
   13578:	tst	r2, #1
   1357c:	bne	135c0 <__assert_fail@plt+0x220c>
   13580:	ldr	r1, [sp, #88]	; 0x58
   13584:	add	r2, r8, #1
   13588:	mov	lr, #1
   1358c:	cmp	r8, r1
   13590:	movcc	r1, #39	; 0x27
   13594:	strbcc	r1, [r5, r8]
   13598:	ldr	r1, [sp, #88]	; 0x58
   1359c:	cmp	r2, r1
   135a0:	movcc	r1, #36	; 0x24
   135a4:	strbcc	r1, [r5, r2]
   135a8:	ldr	r1, [sp, #88]	; 0x58
   135ac:	add	r2, r8, #2
   135b0:	add	r8, r8, #3
   135b4:	cmp	r2, r1
   135b8:	movcc	r1, #39	; 0x27
   135bc:	strbcc	r1, [r5, r2]
   135c0:	ldr	r1, [sp, #88]	; 0x58
   135c4:	add	r2, r8, #1
   135c8:	mov	r0, r3
   135cc:	cmp	r8, r1
   135d0:	movcc	r1, #92	; 0x5c
   135d4:	strbcc	r1, [r5, r8]
   135d8:	ldr	r1, [sp, #88]	; 0x58
   135dc:	cmp	r2, r1
   135e0:	bcs	135f4 <__assert_fail@plt+0x2240>
   135e4:	uxtb	r3, r6
   135e8:	mov	r1, #48	; 0x30
   135ec:	orr	r3, r1, r3, lsr #6
   135f0:	strb	r3, [r5, r2]
   135f4:	ldr	r1, [sp, #88]	; 0x58
   135f8:	add	r2, r8, #2
   135fc:	add	r8, r8, #3
   13600:	cmp	r2, r1
   13604:	lsrcc	r3, r6, #3
   13608:	movcc	r1, #6
   1360c:	bficc	r3, r1, #3, #29
   13610:	mov	r1, #6
   13614:	bfi	r6, r1, #3, #29
   13618:	strbcc	r3, [r5, r2]
   1361c:	mov	r2, #1
   13620:	b	13630 <__assert_fail@plt+0x227c>
   13624:	mov	r0, r3
   13628:	mov	r1, #0
   1362c:	str	r1, [fp, #-52]	; 0xffffffcc
   13630:	mov	ip, r2
   13634:	and	r1, r2, #1
   13638:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1363c:	add	r3, r7, #1
   13640:	cmp	r2, r3
   13644:	bls	136cc <__assert_fail@plt+0x2318>
   13648:	cmp	r1, #0
   1364c:	mvn	r5, lr
   13650:	movwne	r1, #1
   13654:	orr	r5, r5, r1
   13658:	tst	r5, #1
   1365c:	bne	136a0 <__assert_fail@plt+0x22ec>
   13660:	ldr	r1, [sp, #88]	; 0x58
   13664:	ldr	r5, [fp, #-84]	; 0xffffffac
   13668:	mov	r2, r4
   1366c:	ldr	r4, [sp, #88]	; 0x58
   13670:	ldr	r0, [sp, #24]
   13674:	mov	lr, #0
   13678:	cmp	r8, r1
   1367c:	movcc	r1, #39	; 0x27
   13680:	strbcc	r1, [r5, r8]
   13684:	add	r1, r8, #1
   13688:	add	r8, r8, #2
   1368c:	cmp	r1, r4
   13690:	movcc	r4, #39	; 0x27
   13694:	strbcc	r4, [r5, r1]
   13698:	mov	r4, r2
   1369c:	b	136a4 <__assert_fail@plt+0x22f0>
   136a0:	ldr	r5, [fp, #-84]	; 0xffffffac
   136a4:	ldr	r1, [sp, #88]	; 0x58
   136a8:	mov	r2, ip
   136ac:	cmp	r8, r1
   136b0:	ldr	r1, [sp, #72]	; 0x48
   136b4:	strbcc	r6, [r5, r8]
   136b8:	add	r8, r8, #1
   136bc:	ldrb	r6, [r1, r7]
   136c0:	mov	r7, r3
   136c4:	mov	r3, r0
   136c8:	b	1352c <__assert_fail@plt+0x2178>
   136cc:	ldr	ip, [sp, #88]	; 0x58
   136d0:	cmp	r1, #0
   136d4:	movwne	r1, #1
   136d8:	str	r1, [fp, #-56]	; 0xffffffc8
   136dc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   136e0:	cmp	r0, #0
   136e4:	bne	13714 <__assert_fail@plt+0x2360>
   136e8:	tst	lr, #1
   136ec:	beq	13714 <__assert_fail@plt+0x2360>
   136f0:	cmp	r8, ip
   136f4:	mov	lr, #0
   136f8:	movcc	r0, #39	; 0x27
   136fc:	strbcc	r0, [r5, r8]
   13700:	add	r0, r8, #1
   13704:	add	r8, r8, #2
   13708:	cmp	r0, ip
   1370c:	movcc	r1, #39	; 0x27
   13710:	strbcc	r1, [r5, r0]
   13714:	mov	r1, r9
   13718:	mov	r0, r6
   1371c:	cmp	r8, ip
   13720:	strbcc	r0, [r5, r8]
   13724:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13728:	add	r8, r8, #1
   1372c:	and	r0, r0, r1
   13730:	str	r0, [fp, #-48]	; 0xffffffd0
   13734:	mov	r3, sl
   13738:	add	r7, r7, #1
   1373c:	b	12c2c <__assert_fail@plt+0x1878>
   13740:	mov	r9, #0
   13744:	b	13788 <__assert_fail@plt+0x23d4>
   13748:	mov	r9, #0
   1374c:	cmp	r2, r4
   13750:	bls	13788 <__assert_fail@plt+0x23d4>
   13754:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13758:	ldr	r1, [sp, #24]
   1375c:	add	r0, r4, r7
   13760:	mov	r3, r1
   13764:	ldrb	r1, [r0, r1]
   13768:	cmp	r1, #0
   1376c:	beq	13794 <__assert_fail@plt+0x23e0>
   13770:	add	r3, r3, #1
   13774:	add	r1, r7, r3
   13778:	cmp	r1, r2
   1377c:	mov	r1, r3
   13780:	bcc	13760 <__assert_fail@plt+0x23ac>
   13784:	b	1328c <__assert_fail@plt+0x1ed8>
   13788:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1378c:	ldr	r1, [sp, #24]
   13790:	b	1328c <__assert_fail@plt+0x1ed8>
   13794:	mov	r1, r3
   13798:	b	1328c <__assert_fail@plt+0x1ed8>
   1379c:	mov	r9, #0
   137a0:	mov	r4, r1
   137a4:	b	12f48 <__assert_fail@plt+0x1b94>
   137a8:	mov	sl, r7
   137ac:	b	137b4 <__assert_fail@plt+0x2400>
   137b0:	mvn	sl, #0
   137b4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   137b8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   137bc:	eor	r0, r1, #2
   137c0:	orr	r0, r0, r8
   137c4:	clz	r0, r0
   137c8:	lsr	r0, r0, #5
   137cc:	tst	r2, r0
   137d0:	bne	13878 <__assert_fail@plt+0x24c4>
   137d4:	subs	r0, r1, #2
   137d8:	movwne	r0, #1
   137dc:	orr	r0, r2, r0
   137e0:	tst	r0, #1
   137e4:	ldreq	r0, [sp, #60]	; 0x3c
   137e8:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   137ec:	eoreq	r0, r0, #1
   137f0:	tsteq	r0, #1
   137f4:	bne	1390c <__assert_fail@plt+0x2558>
   137f8:	tst	r1, #1
   137fc:	bne	138d8 <__assert_fail@plt+0x2524>
   13800:	ldr	r6, [sp, #56]	; 0x38
   13804:	mov	r9, #0
   13808:	cmp	r6, #0
   1380c:	beq	13904 <__assert_fail@plt+0x2550>
   13810:	ldr	r0, [sp, #84]	; 0x54
   13814:	mov	r1, #0
   13818:	mov	r7, #2
   1381c:	cmp	ip, #0
   13820:	str	r1, [fp, #-48]	; 0xffffffd0
   13824:	mov	r1, #0
   13828:	str	r1, [fp, #-76]	; 0xffffffb4
   1382c:	beq	12994 <__assert_fail@plt+0x15e0>
   13830:	b	1390c <__assert_fail@plt+0x2558>
   13834:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13838:	ldr	r1, [fp, #12]
   1383c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13840:	mov	r5, r3
   13844:	mov	ip, r6
   13848:	mov	r3, sl
   1384c:	b	1389c <__assert_fail@plt+0x24e8>
   13850:	tst	r4, #1
   13854:	ldr	r5, [fp, #-84]	; 0xffffffac
   13858:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1385c:	ldr	r1, [fp, #12]
   13860:	ldr	r3, [sp, #36]	; 0x24
   13864:	mov	r0, #2
   13868:	movwne	r0, #4
   1386c:	mov	r2, r0
   13870:	b	1389c <__assert_fail@plt+0x24e8>
   13874:	ldr	ip, [sp, #88]	; 0x58
   13878:	ldr	r1, [sp, #84]	; 0x54
   1387c:	mov	r0, #2
   13880:	tst	r1, #1
   13884:	movwne	r0, #4
   13888:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1388c:	ldr	r1, [fp, #12]
   13890:	mov	r3, sl
   13894:	cmp	r2, #2
   13898:	moveq	r2, r0
   1389c:	mov	r0, #0
   138a0:	bic	r1, r1, #2
   138a4:	str	r2, [sp]
   138a8:	mov	r2, r4
   138ac:	str	r0, [sp, #8]
   138b0:	ldr	r0, [sp, #76]	; 0x4c
   138b4:	str	r1, [sp, #4]
   138b8:	mov	r1, ip
   138bc:	str	r0, [sp, #12]
   138c0:	ldr	r0, [sp, #80]	; 0x50
   138c4:	str	r0, [sp, #16]
   138c8:	mov	r0, r5
   138cc:	bl	12908 <__assert_fail@plt+0x1554>
   138d0:	mov	r8, r0
   138d4:	b	13958 <__assert_fail@plt+0x25a4>
   138d8:	mov	r0, #5
   138dc:	ldr	r1, [sp, #56]	; 0x38
   138e0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   138e4:	mov	r3, sl
   138e8:	str	r0, [sp]
   138ec:	ldr	r0, [fp, #12]
   138f0:	str	r0, [sp, #4]
   138f4:	ldr	r0, [fp, #16]
   138f8:	str	r0, [sp, #8]
   138fc:	ldr	r0, [sp, #76]	; 0x4c
   13900:	b	138bc <__assert_fail@plt+0x2508>
   13904:	mov	r0, #0
   13908:	str	r0, [fp, #-76]	; 0xffffffb4
   1390c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13910:	cmp	r1, #0
   13914:	beq	1394c <__assert_fail@plt+0x2598>
   13918:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1391c:	tst	r0, #1
   13920:	bne	1394c <__assert_fail@plt+0x2598>
   13924:	ldrb	r0, [r1]
   13928:	cmp	r0, #0
   1392c:	beq	1394c <__assert_fail@plt+0x2598>
   13930:	add	r1, r1, #1
   13934:	cmp	r8, ip
   13938:	strbcc	r0, [r5, r8]
   1393c:	add	r8, r8, #1
   13940:	ldrb	r0, [r1], #1
   13944:	cmp	r0, #0
   13948:	bne	13934 <__assert_fail@plt+0x2580>
   1394c:	cmp	r8, ip
   13950:	movcc	r0, #0
   13954:	strbcc	r0, [r5, r8]
   13958:	mov	r0, r8
   1395c:	sub	sp, fp, #28
   13960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13964:	mov	r0, #4
   13968:	b	13888 <__assert_fail@plt+0x24d4>
   1396c:	mov	r4, r1
   13970:	b	13878 <__assert_fail@plt+0x24c4>
   13974:	bl	11384 <abort@plt>
   13978:	mov	r3, r2
   1397c:	mov	r2, #0
   13980:	b	13984 <__assert_fail@plt+0x25d0>
   13984:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13988:	add	fp, sp, #28
   1398c:	sub	sp, sp, #36	; 0x24
   13990:	movw	r8, #29160	; 0x71e8
   13994:	cmp	r3, #0
   13998:	mov	r4, r2
   1399c:	str	r2, [sp, #24]
   139a0:	mov	r5, r1
   139a4:	mov	r6, r0
   139a8:	str	r0, [sp, #20]
   139ac:	movt	r8, #2
   139b0:	movne	r8, r3
   139b4:	bl	112ac <__errno_location@plt>
   139b8:	str	r0, [sp, #28]
   139bc:	ldr	r1, [r8, #40]	; 0x28
   139c0:	ldr	r2, [r8, #44]	; 0x2c
   139c4:	ldr	r7, [r0]
   139c8:	cmp	r4, #0
   139cc:	add	sl, r8, #8
   139d0:	mov	r0, #0
   139d4:	ldm	r8, {r3, r9}
   139d8:	orreq	r9, r9, #1
   139dc:	stm	sp, {r3, r9, sl}
   139e0:	str	r1, [sp, #12]
   139e4:	str	r2, [sp, #16]
   139e8:	mov	r1, #0
   139ec:	mov	r2, r6
   139f0:	mov	r3, r5
   139f4:	str	r7, [sp, #32]
   139f8:	mov	r7, r5
   139fc:	bl	12908 <__assert_fail@plt+0x1554>
   13a00:	add	r4, r0, #1
   13a04:	mov	r5, r0
   13a08:	mov	r0, r4
   13a0c:	bl	14a94 <__assert_fail@plt+0x36e0>
   13a10:	mov	r6, r0
   13a14:	ldr	r0, [r8]
   13a18:	ldr	r2, [r8, #44]	; 0x2c
   13a1c:	ldr	r1, [r8, #40]	; 0x28
   13a20:	mov	r3, r7
   13a24:	stm	sp, {r0, r9, sl}
   13a28:	str	r2, [sp, #16]
   13a2c:	ldr	r2, [sp, #20]
   13a30:	str	r1, [sp, #12]
   13a34:	mov	r0, r6
   13a38:	mov	r1, r4
   13a3c:	bl	12908 <__assert_fail@plt+0x1554>
   13a40:	ldr	r0, [sp, #24]
   13a44:	ldr	r1, [sp, #32]
   13a48:	ldr	r2, [sp, #28]
   13a4c:	cmp	r0, #0
   13a50:	str	r1, [r2]
   13a54:	strne	r5, [r0]
   13a58:	mov	r0, r6
   13a5c:	sub	sp, fp, #28
   13a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a64:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13a68:	add	fp, sp, #24
   13a6c:	movw	r5, #28964	; 0x7124
   13a70:	movw	r8, #28960	; 0x7120
   13a74:	movt	r5, #2
   13a78:	movt	r8, #2
   13a7c:	ldr	r0, [r5]
   13a80:	ldr	r4, [r8]
   13a84:	cmp	r0, #2
   13a88:	blt	13ab4 <__assert_fail@plt+0x2700>
   13a8c:	add	r7, r4, #12
   13a90:	mov	r6, #0
   13a94:	ldr	r0, [r7, r6, lsl #3]
   13a98:	bl	12650 <__assert_fail@plt+0x129c>
   13a9c:	ldr	r1, [r5]
   13aa0:	add	r2, r6, #2
   13aa4:	add	r0, r6, #1
   13aa8:	mov	r6, r0
   13aac:	cmp	r2, r1
   13ab0:	blt	13a94 <__assert_fail@plt+0x26e0>
   13ab4:	ldr	r0, [r4, #4]
   13ab8:	movw	r9, #29208	; 0x7218
   13abc:	movw	r7, #28968	; 0x7128
   13ac0:	movt	r9, #2
   13ac4:	movt	r7, #2
   13ac8:	cmp	r0, r9
   13acc:	beq	13adc <__assert_fail@plt+0x2728>
   13ad0:	bl	12650 <__assert_fail@plt+0x129c>
   13ad4:	mov	r0, #256	; 0x100
   13ad8:	stm	r7, {r0, r9}
   13adc:	cmp	r4, r7
   13ae0:	beq	13af0 <__assert_fail@plt+0x273c>
   13ae4:	mov	r0, r4
   13ae8:	bl	12650 <__assert_fail@plt+0x129c>
   13aec:	str	r7, [r8]
   13af0:	mov	r0, #1
   13af4:	str	r0, [r5]
   13af8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13afc:	movw	r3, #29160	; 0x71e8
   13b00:	mvn	r2, #0
   13b04:	movt	r3, #2
   13b08:	b	13b0c <__assert_fail@plt+0x2758>
   13b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b10:	add	fp, sp, #28
   13b14:	sub	sp, sp, #44	; 0x2c
   13b18:	mov	r7, r3
   13b1c:	str	r2, [sp, #36]	; 0x24
   13b20:	str	r1, [sp, #32]
   13b24:	mov	r5, r0
   13b28:	bl	112ac <__errno_location@plt>
   13b2c:	cmp	r5, #0
   13b30:	bmi	13ca0 <__assert_fail@plt+0x28ec>
   13b34:	cmn	r5, #-2147483647	; 0x80000001
   13b38:	beq	13ca0 <__assert_fail@plt+0x28ec>
   13b3c:	movw	r8, #28964	; 0x7124
   13b40:	movw	r4, #28960	; 0x7120
   13b44:	str	r0, [sp, #28]
   13b48:	ldr	r0, [r0]
   13b4c:	movt	r8, #2
   13b50:	movt	r4, #2
   13b54:	ldr	r1, [r8]
   13b58:	ldr	r6, [r4]
   13b5c:	str	r0, [sp, #24]
   13b60:	cmp	r1, r5
   13b64:	ble	13b70 <__assert_fail@plt+0x27bc>
   13b68:	mov	sl, r6
   13b6c:	b	13bdc <__assert_fail@plt+0x2828>
   13b70:	movw	r9, #28968	; 0x7128
   13b74:	mov	r0, #8
   13b78:	str	r1, [fp, #-32]	; 0xffffffe0
   13b7c:	sub	r1, r5, r1
   13b80:	mvn	r3, #-2147483648	; 0x80000000
   13b84:	movt	r9, #2
   13b88:	str	r0, [sp]
   13b8c:	add	r2, r1, #1
   13b90:	sub	r1, fp, #32
   13b94:	subs	r0, r6, r9
   13b98:	movne	r0, r6
   13b9c:	bl	14bc4 <__assert_fail@plt+0x3810>
   13ba0:	mov	sl, r0
   13ba4:	cmp	r6, r9
   13ba8:	str	r0, [r4]
   13bac:	bne	13bb8 <__assert_fail@plt+0x2804>
   13bb0:	ldrd	r0, [r9]
   13bb4:	stm	sl, {r0, r1}
   13bb8:	ldr	r1, [r8]
   13bbc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13bc0:	add	r0, sl, r1, lsl #3
   13bc4:	sub	r1, r2, r1
   13bc8:	lsl	r2, r1, #3
   13bcc:	mov	r1, #0
   13bd0:	bl	112dc <memset@plt>
   13bd4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13bd8:	str	r0, [r8]
   13bdc:	mov	r9, sl
   13be0:	ldm	r7, {r0, r1}
   13be4:	orr	r8, r1, #1
   13be8:	add	r1, r7, #8
   13bec:	ldr	r2, [r7, #40]	; 0x28
   13bf0:	ldr	r3, [r7, #44]	; 0x2c
   13bf4:	ldr	r6, [r9, r5, lsl #3]!
   13bf8:	str	r1, [sp, #20]
   13bfc:	ldr	r4, [r9, #4]!
   13c00:	stm	sp, {r0, r8}
   13c04:	add	r0, sp, #8
   13c08:	stm	r0, {r1, r2, r3}
   13c0c:	ldr	r2, [sp, #32]
   13c10:	ldr	r3, [sp, #36]	; 0x24
   13c14:	mov	r1, r6
   13c18:	mov	r0, r4
   13c1c:	bl	12908 <__assert_fail@plt+0x1554>
   13c20:	cmp	r6, r0
   13c24:	bhi	13c88 <__assert_fail@plt+0x28d4>
   13c28:	add	r6, r0, #1
   13c2c:	movw	r0, #29208	; 0x7218
   13c30:	movt	r0, #2
   13c34:	str	r6, [sl, r5, lsl #3]
   13c38:	cmp	r4, r0
   13c3c:	beq	13c48 <__assert_fail@plt+0x2894>
   13c40:	mov	r0, r4
   13c44:	bl	12650 <__assert_fail@plt+0x129c>
   13c48:	mov	r0, r6
   13c4c:	bl	14a94 <__assert_fail@plt+0x36e0>
   13c50:	str	r0, [r9]
   13c54:	mov	r4, r0
   13c58:	add	r3, sp, #8
   13c5c:	ldr	r0, [r7]
   13c60:	ldr	r1, [r7, #40]	; 0x28
   13c64:	ldr	r2, [r7, #44]	; 0x2c
   13c68:	stm	sp, {r0, r8}
   13c6c:	ldr	r0, [sp, #20]
   13c70:	stm	r3, {r0, r1, r2}
   13c74:	ldr	r2, [sp, #32]
   13c78:	ldr	r3, [sp, #36]	; 0x24
   13c7c:	mov	r0, r4
   13c80:	mov	r1, r6
   13c84:	bl	12908 <__assert_fail@plt+0x1554>
   13c88:	ldr	r0, [sp, #28]
   13c8c:	ldr	r1, [sp, #24]
   13c90:	str	r1, [r0]
   13c94:	mov	r0, r4
   13c98:	sub	sp, fp, #28
   13c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ca0:	bl	11384 <abort@plt>
   13ca4:	movw	r3, #29160	; 0x71e8
   13ca8:	movt	r3, #2
   13cac:	b	13b0c <__assert_fail@plt+0x2758>
   13cb0:	movw	r3, #29160	; 0x71e8
   13cb4:	mov	r1, r0
   13cb8:	mov	r0, #0
   13cbc:	mvn	r2, #0
   13cc0:	movt	r3, #2
   13cc4:	b	13b0c <__assert_fail@plt+0x2758>
   13cc8:	movw	r3, #29160	; 0x71e8
   13ccc:	mov	r2, r1
   13cd0:	mov	r1, r0
   13cd4:	mov	r0, #0
   13cd8:	movt	r3, #2
   13cdc:	b	13b0c <__assert_fail@plt+0x2758>
   13ce0:	push	{fp, lr}
   13ce4:	mov	fp, sp
   13ce8:	sub	sp, sp, #48	; 0x30
   13cec:	vmov.i32	q8, #0	; 0x00000000
   13cf0:	mov	ip, #32
   13cf4:	mov	r3, sp
   13cf8:	mov	lr, r2
   13cfc:	cmp	r1, #10
   13d00:	add	r2, r3, #16
   13d04:	vst1.64	{d16-d17}, [r3], ip
   13d08:	vst1.64	{d16-d17}, [r2]
   13d0c:	vst1.64	{d16-d17}, [r3]
   13d10:	beq	13d30 <__assert_fail@plt+0x297c>
   13d14:	str	r1, [sp]
   13d18:	mov	r3, sp
   13d1c:	mov	r1, lr
   13d20:	mvn	r2, #0
   13d24:	bl	13b0c <__assert_fail@plt+0x2758>
   13d28:	mov	sp, fp
   13d2c:	pop	{fp, pc}
   13d30:	bl	11384 <abort@plt>
   13d34:	push	{r4, sl, fp, lr}
   13d38:	add	fp, sp, #8
   13d3c:	sub	sp, sp, #48	; 0x30
   13d40:	vmov.i32	q8, #0	; 0x00000000
   13d44:	mov	ip, r3
   13d48:	mov	r3, sp
   13d4c:	mov	lr, #32
   13d50:	cmp	r1, #10
   13d54:	add	r4, r3, #16
   13d58:	vst1.64	{d16-d17}, [r3], lr
   13d5c:	vst1.64	{d16-d17}, [r4]
   13d60:	vst1.64	{d16-d17}, [r3]
   13d64:	beq	13d84 <__assert_fail@plt+0x29d0>
   13d68:	str	r1, [sp]
   13d6c:	mov	r1, r2
   13d70:	mov	r3, sp
   13d74:	mov	r2, ip
   13d78:	bl	13b0c <__assert_fail@plt+0x2758>
   13d7c:	sub	sp, fp, #8
   13d80:	pop	{r4, sl, fp, pc}
   13d84:	bl	11384 <abort@plt>
   13d88:	mov	r2, r1
   13d8c:	mov	r1, r0
   13d90:	mov	r0, #0
   13d94:	b	13ce0 <__assert_fail@plt+0x292c>
   13d98:	mov	r3, r2
   13d9c:	mov	r2, r1
   13da0:	mov	r1, r0
   13da4:	mov	r0, #0
   13da8:	b	13d34 <__assert_fail@plt+0x2980>
   13dac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13db0:	add	fp, sp, #24
   13db4:	sub	sp, sp, #48	; 0x30
   13db8:	movw	r8, #29160	; 0x71e8
   13dbc:	mov	lr, r0
   13dc0:	mov	r3, sp
   13dc4:	mov	ip, r1
   13dc8:	movt	r8, #2
   13dcc:	mov	r1, r3
   13dd0:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   13dd4:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   13dd8:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   13ddc:	stm	r1, {r0, r4, r5, r6, r7, r9}
   13de0:	ubfx	r0, r2, #5, #3
   13de4:	and	r2, r2, #31
   13de8:	mov	r4, #1
   13dec:	add	r0, r3, r0, lsl #2
   13df0:	ldr	r1, [r0, #8]
   13df4:	bic	r4, r4, r1, lsr r2
   13df8:	eor	r1, r1, r4, lsl r2
   13dfc:	mov	r2, ip
   13e00:	str	r1, [r0, #8]
   13e04:	mov	r0, #0
   13e08:	mov	r1, lr
   13e0c:	bl	13b0c <__assert_fail@plt+0x2758>
   13e10:	sub	sp, fp, #24
   13e14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13e18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e1c:	add	fp, sp, #24
   13e20:	sub	sp, sp, #48	; 0x30
   13e24:	movw	lr, #29160	; 0x71e8
   13e28:	mov	ip, r0
   13e2c:	mov	r3, sp
   13e30:	movt	lr, #2
   13e34:	mov	r2, r3
   13e38:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   13e3c:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   13e40:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13e44:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13e48:	ubfx	r0, r1, #5, #3
   13e4c:	and	r1, r1, #31
   13e50:	mov	r7, #1
   13e54:	add	r0, r3, r0, lsl #2
   13e58:	ldr	r2, [r0, #8]
   13e5c:	bic	r7, r7, r2, lsr r1
   13e60:	eor	r1, r2, r7, lsl r1
   13e64:	mvn	r2, #0
   13e68:	str	r1, [r0, #8]
   13e6c:	mov	r0, #0
   13e70:	mov	r1, ip
   13e74:	bl	13b0c <__assert_fail@plt+0x2758>
   13e78:	sub	sp, fp, #24
   13e7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e80:	push	{r4, r5, r6, r7, fp, lr}
   13e84:	add	fp, sp, #16
   13e88:	sub	sp, sp, #48	; 0x30
   13e8c:	movw	lr, #29160	; 0x71e8
   13e90:	mov	ip, r0
   13e94:	mov	r3, sp
   13e98:	movt	lr, #2
   13e9c:	mov	r2, r3
   13ea0:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13ea4:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13ea8:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13eac:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13eb0:	mov	r1, ip
   13eb4:	mvn	r2, #0
   13eb8:	ldr	r0, [sp, #12]
   13ebc:	orr	r0, r0, #67108864	; 0x4000000
   13ec0:	str	r0, [sp, #12]
   13ec4:	mov	r0, #0
   13ec8:	bl	13b0c <__assert_fail@plt+0x2758>
   13ecc:	sub	sp, fp, #16
   13ed0:	pop	{r4, r5, r6, r7, fp, pc}
   13ed4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ed8:	add	fp, sp, #24
   13edc:	sub	sp, sp, #48	; 0x30
   13ee0:	movw	r8, #29160	; 0x71e8
   13ee4:	mov	ip, r1
   13ee8:	mov	lr, r0
   13eec:	mov	r3, sp
   13ef0:	movt	r8, #2
   13ef4:	mov	r2, r3
   13ef8:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13efc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13f00:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13f04:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13f08:	mov	r1, lr
   13f0c:	mov	r2, ip
   13f10:	ldr	r0, [sp, #12]
   13f14:	orr	r0, r0, #67108864	; 0x4000000
   13f18:	str	r0, [sp, #12]
   13f1c:	mov	r0, #0
   13f20:	bl	13b0c <__assert_fail@plt+0x2758>
   13f24:	sub	sp, fp, #24
   13f28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f30:	add	fp, sp, #24
   13f34:	sub	sp, sp, #96	; 0x60
   13f38:	vmov.i32	q8, #0	; 0x00000000
   13f3c:	mov	lr, sp
   13f40:	mov	ip, r2
   13f44:	cmp	r1, #10
   13f48:	add	r3, lr, #16
   13f4c:	mov	r2, lr
   13f50:	vst1.64	{d16-d17}, [r3]
   13f54:	mov	r3, #28
   13f58:	vst1.64	{d16-d17}, [r2], r3
   13f5c:	vst1.32	{d16-d17}, [r2]
   13f60:	beq	13fa0 <__assert_fail@plt+0x2bec>
   13f64:	str	r1, [sp, #48]	; 0x30
   13f68:	add	r3, sp, #48	; 0x30
   13f6c:	ldm	lr!, {r2, r4, r5, r6, r7}
   13f70:	add	r1, r3, #4
   13f74:	stmia	r1!, {r2, r4, r5, r6, r7}
   13f78:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13f7c:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13f80:	mvn	r2, #0
   13f84:	ldr	r1, [sp, #60]	; 0x3c
   13f88:	orr	r1, r1, #67108864	; 0x4000000
   13f8c:	str	r1, [sp, #60]	; 0x3c
   13f90:	mov	r1, ip
   13f94:	bl	13b0c <__assert_fail@plt+0x2758>
   13f98:	sub	sp, fp, #24
   13f9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13fa0:	bl	11384 <abort@plt>
   13fa4:	push	{fp, lr}
   13fa8:	mov	fp, sp
   13fac:	sub	sp, sp, #8
   13fb0:	mvn	ip, #0
   13fb4:	str	ip, [sp]
   13fb8:	bl	13fc4 <__assert_fail@plt+0x2c10>
   13fbc:	mov	sp, fp
   13fc0:	pop	{fp, pc}
   13fc4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13fc8:	add	fp, sp, #24
   13fcc:	sub	sp, sp, #48	; 0x30
   13fd0:	movw	ip, #29160	; 0x71e8
   13fd4:	mov	lr, r3
   13fd8:	mov	r3, sp
   13fdc:	cmp	r1, #0
   13fe0:	movt	ip, #2
   13fe4:	cmpne	r2, #0
   13fe8:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13fec:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   13ff0:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   13ff4:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13ff8:	mov	r3, #10
   13ffc:	str	r3, [sp]
   14000:	bne	14008 <__assert_fail@plt+0x2c54>
   14004:	bl	11384 <abort@plt>
   14008:	ldr	ip, [fp, #8]
   1400c:	str	r2, [sp, #44]	; 0x2c
   14010:	str	r1, [sp, #40]	; 0x28
   14014:	mov	r3, sp
   14018:	mov	r1, lr
   1401c:	mov	r2, ip
   14020:	bl	13b0c <__assert_fail@plt+0x2758>
   14024:	sub	sp, fp, #24
   14028:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1402c:	push	{fp, lr}
   14030:	mov	fp, sp
   14034:	sub	sp, sp, #8
   14038:	mov	r3, r2
   1403c:	mov	r2, r1
   14040:	mov	r1, r0
   14044:	mvn	r0, #0
   14048:	str	r0, [sp]
   1404c:	mov	r0, #0
   14050:	bl	13fc4 <__assert_fail@plt+0x2c10>
   14054:	mov	sp, fp
   14058:	pop	{fp, pc}
   1405c:	push	{fp, lr}
   14060:	mov	fp, sp
   14064:	sub	sp, sp, #8
   14068:	mov	ip, r2
   1406c:	mov	r2, r1
   14070:	mov	r1, r0
   14074:	str	r3, [sp]
   14078:	mov	r0, #0
   1407c:	mov	r3, ip
   14080:	bl	13fc4 <__assert_fail@plt+0x2c10>
   14084:	mov	sp, fp
   14088:	pop	{fp, pc}
   1408c:	movw	r3, #28976	; 0x7130
   14090:	movt	r3, #2
   14094:	b	13b0c <__assert_fail@plt+0x2758>
   14098:	movw	r3, #28976	; 0x7130
   1409c:	mov	r2, r1
   140a0:	mov	r1, r0
   140a4:	mov	r0, #0
   140a8:	movt	r3, #2
   140ac:	b	13b0c <__assert_fail@plt+0x2758>
   140b0:	movw	r3, #28976	; 0x7130
   140b4:	mvn	r2, #0
   140b8:	movt	r3, #2
   140bc:	b	13b0c <__assert_fail@plt+0x2758>
   140c0:	movw	r3, #28976	; 0x7130
   140c4:	mov	r1, r0
   140c8:	mov	r0, #0
   140cc:	mvn	r2, #0
   140d0:	movt	r3, #2
   140d4:	b	13b0c <__assert_fail@plt+0x2758>
   140d8:	push	{r4, r5, fp, lr}
   140dc:	add	fp, sp, #8
   140e0:	mov	r5, r0
   140e4:	mov	r4, r1
   140e8:	mov	r0, #0
   140ec:	mov	r2, #5
   140f0:	mov	r1, r5
   140f4:	bl	11180 <dcgettext@plt>
   140f8:	cmp	r0, r5
   140fc:	popne	{r4, r5, fp, pc}
   14100:	bl	15664 <__assert_fail@plt+0x42b0>
   14104:	ldrb	r1, [r0]
   14108:	and	r1, r1, #223	; 0xdf
   1410c:	cmp	r1, #71	; 0x47
   14110:	beq	14178 <__assert_fail@plt+0x2dc4>
   14114:	cmp	r1, #85	; 0x55
   14118:	bne	141d0 <__assert_fail@plt+0x2e1c>
   1411c:	ldrb	r1, [r0, #1]
   14120:	and	r1, r1, #223	; 0xdf
   14124:	cmp	r1, #84	; 0x54
   14128:	bne	141d0 <__assert_fail@plt+0x2e1c>
   1412c:	ldrb	r1, [r0, #2]
   14130:	and	r1, r1, #223	; 0xdf
   14134:	cmp	r1, #70	; 0x46
   14138:	bne	141d0 <__assert_fail@plt+0x2e1c>
   1413c:	ldrb	r1, [r0, #3]
   14140:	cmp	r1, #45	; 0x2d
   14144:	bne	141d0 <__assert_fail@plt+0x2e1c>
   14148:	ldrb	r1, [r0, #4]
   1414c:	cmp	r1, #56	; 0x38
   14150:	bne	141d0 <__assert_fail@plt+0x2e1c>
   14154:	ldrb	r0, [r0, #5]
   14158:	cmp	r0, #0
   1415c:	bne	141d0 <__assert_fail@plt+0x2e1c>
   14160:	ldrb	r1, [r5]
   14164:	movw	r2, #25922	; 0x6542
   14168:	movw	r0, #25926	; 0x6546
   1416c:	movt	r2, #1
   14170:	movt	r0, #1
   14174:	b	14200 <__assert_fail@plt+0x2e4c>
   14178:	ldrb	r1, [r0, #1]
   1417c:	and	r1, r1, #223	; 0xdf
   14180:	cmp	r1, #66	; 0x42
   14184:	bne	141d0 <__assert_fail@plt+0x2e1c>
   14188:	ldrb	r1, [r0, #2]
   1418c:	cmp	r1, #49	; 0x31
   14190:	bne	141d0 <__assert_fail@plt+0x2e1c>
   14194:	ldrb	r1, [r0, #3]
   14198:	cmp	r1, #56	; 0x38
   1419c:	bne	141d0 <__assert_fail@plt+0x2e1c>
   141a0:	ldrb	r1, [r0, #4]
   141a4:	cmp	r1, #48	; 0x30
   141a8:	bne	141d0 <__assert_fail@plt+0x2e1c>
   141ac:	ldrb	r1, [r0, #5]
   141b0:	cmp	r1, #51	; 0x33
   141b4:	bne	141d0 <__assert_fail@plt+0x2e1c>
   141b8:	ldrb	r1, [r0, #6]
   141bc:	cmp	r1, #48	; 0x30
   141c0:	bne	141d0 <__assert_fail@plt+0x2e1c>
   141c4:	ldrb	r0, [r0, #7]
   141c8:	cmp	r0, #0
   141cc:	beq	141ec <__assert_fail@plt+0x2e38>
   141d0:	movw	r1, #25916	; 0x653c
   141d4:	movw	r0, #25920	; 0x6540
   141d8:	cmp	r4, #9
   141dc:	movt	r1, #1
   141e0:	movt	r0, #1
   141e4:	moveq	r0, r1
   141e8:	pop	{r4, r5, fp, pc}
   141ec:	ldrb	r1, [r5]
   141f0:	movw	r2, #25930	; 0x654a
   141f4:	movw	r0, #25934	; 0x654e
   141f8:	movt	r2, #1
   141fc:	movt	r0, #1
   14200:	cmp	r1, #96	; 0x60
   14204:	moveq	r0, r2
   14208:	pop	{r4, r5, fp, pc}
   1420c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14210:	add	fp, sp, #28
   14214:	sub	sp, sp, #12
   14218:	ldr	sl, [fp, #8]
   1421c:	mov	r9, r3
   14220:	mov	r4, r2
   14224:	mov	r8, r1
   14228:	mov	r7, r0
   1422c:	cmp	r2, #0
   14230:	beq	14248 <__assert_fail@plt+0x2e94>
   14234:	mov	r0, r7
   14238:	mov	r1, #58	; 0x3a
   1423c:	bl	112a0 <strchr@plt>
   14240:	mov	r6, r0
   14244:	b	1424c <__assert_fail@plt+0x2e98>
   14248:	mov	r6, #0
   1424c:	mov	r0, r7
   14250:	mov	r1, r6
   14254:	mov	r2, r8
   14258:	mov	r3, r4
   1425c:	stm	sp, {r9, sl}
   14260:	bl	142c4 <__assert_fail@plt+0x2f10>
   14264:	mov	r5, r0
   14268:	cmp	r4, #0
   1426c:	beq	142b8 <__assert_fail@plt+0x2f04>
   14270:	cmp	r6, #0
   14274:	bne	142b8 <__assert_fail@plt+0x2f04>
   14278:	cmp	r5, #0
   1427c:	beq	142b8 <__assert_fail@plt+0x2f04>
   14280:	mov	r0, r7
   14284:	mov	r1, #46	; 0x2e
   14288:	bl	112a0 <strchr@plt>
   1428c:	cmp	r0, #0
   14290:	beq	142b8 <__assert_fail@plt+0x2f04>
   14294:	mov	r1, r0
   14298:	mov	r0, r7
   1429c:	mov	r2, r8
   142a0:	mov	r3, r4
   142a4:	stm	sp, {r9, sl}
   142a8:	bl	142c4 <__assert_fail@plt+0x2f10>
   142ac:	cmp	r0, #0
   142b0:	movne	r0, r5
   142b4:	b	142bc <__assert_fail@plt+0x2f08>
   142b8:	mov	r0, r5
   142bc:	sub	sp, fp, #28
   142c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142c8:	add	fp, sp, #28
   142cc:	sub	sp, sp, #36	; 0x24
   142d0:	mov	sl, r3
   142d4:	mov	r9, r2
   142d8:	ldr	r3, [r2]
   142dc:	ldr	r2, [fp, #8]
   142e0:	mov	r4, r1
   142e4:	cmp	sl, #0
   142e8:	beq	142f4 <__assert_fail@plt+0x2f40>
   142ec:	ldr	r1, [sl]
   142f0:	b	142f8 <__assert_fail@plt+0x2f44>
   142f4:	mvn	r1, #0
   142f8:	ldr	r8, [fp, #12]
   142fc:	cmp	r2, #0
   14300:	str	r1, [sp, #8]
   14304:	str	r3, [sp, #4]
   14308:	movne	r1, #0
   1430c:	strne	r1, [r2]
   14310:	cmp	r8, #0
   14314:	movne	r1, #0
   14318:	strne	r1, [r8]
   1431c:	cmp	r4, #0
   14320:	beq	14354 <__assert_fail@plt+0x2fa0>
   14324:	subs	r5, r4, r0
   14328:	beq	143e4 <__assert_fail@plt+0x3030>
   1432c:	add	r1, r5, #1
   14330:	bl	14de8 <__assert_fail@plt+0x3a34>
   14334:	mov	r7, r0
   14338:	mov	r0, #0
   1433c:	mov	r6, r4
   14340:	strb	r0, [r7, r5]
   14344:	ldrb	r0, [r6, #1]!
   14348:	cmp	r0, #0
   1434c:	moveq	r6, r0
   14350:	b	1436c <__assert_fail@plt+0x2fb8>
   14354:	ldrb	r1, [r0]
   14358:	cmp	r1, #0
   1435c:	beq	14460 <__assert_fail@plt+0x30ac>
   14360:	bl	14e58 <__assert_fail@plt+0x3aa4>
   14364:	mov	r7, r0
   14368:	mov	r6, #0
   1436c:	ldrb	r0, [r7]
   14370:	cmp	r0, #43	; 0x2b
   14374:	beq	143c4 <__assert_fail@plt+0x3010>
   14378:	mov	r0, r7
   1437c:	bl	11108 <getpwnam@plt>
   14380:	cmp	r0, #0
   14384:	beq	143c4 <__assert_fail@plt+0x3010>
   14388:	ldr	r1, [r0, #8]
   1438c:	mov	r5, #0
   14390:	cmp	r4, #0
   14394:	str	r1, [sp, #4]
   14398:	beq	143dc <__assert_fail@plt+0x3028>
   1439c:	cmp	r6, #0
   143a0:	bne	143dc <__assert_fail@plt+0x3028>
   143a4:	ldr	r4, [r0, #12]
   143a8:	mov	r0, r4
   143ac:	bl	11390 <getgrgid@plt>
   143b0:	cmp	r0, #0
   143b4:	str	r4, [sp, #8]
   143b8:	beq	1446c <__assert_fail@plt+0x30b8>
   143bc:	ldr	r0, [r0]
   143c0:	b	1447c <__assert_fail@plt+0x30c8>
   143c4:	cmp	r4, #0
   143c8:	beq	14404 <__assert_fail@plt+0x3050>
   143cc:	cmp	r6, #0
   143d0:	bne	14404 <__assert_fail@plt+0x3050>
   143d4:	movw	r5, #26051	; 0x65c3
   143d8:	movt	r5, #1
   143dc:	mov	r4, #0
   143e0:	b	14488 <__assert_fail@plt+0x30d4>
   143e4:	ldrb	r0, [r4, #1]!
   143e8:	mov	r7, #0
   143ec:	mov	r5, #0
   143f0:	cmp	r0, #0
   143f4:	moveq	r4, r0
   143f8:	mov	r6, r4
   143fc:	mov	r4, #0
   14400:	b	1448c <__assert_fail@plt+0x30d8>
   14404:	movw	r0, #23807	; 0x5cff
   14408:	add	r3, sp, #12
   1440c:	mov	r1, #0
   14410:	mov	r2, #10
   14414:	mov	r4, #0
   14418:	movt	r0, #1
   1441c:	str	r0, [sp]
   14420:	mov	r0, r7
   14424:	bl	14f08 <__assert_fail@plt+0x3b54>
   14428:	ldr	r1, [sp, #12]
   1442c:	mvn	r2, #0
   14430:	clz	r0, r0
   14434:	movw	r5, #26024	; 0x65a8
   14438:	lsr	r0, r0, #5
   1443c:	movt	r5, #1
   14440:	subs	r2, r1, r2
   14444:	movwne	r2, #1
   14448:	ands	r0, r0, r2
   1444c:	ldr	r0, [sp, #4]
   14450:	movne	r0, r1
   14454:	movwne	r5, #0
   14458:	str	r0, [sp, #4]
   1445c:	b	14488 <__assert_fail@plt+0x30d4>
   14460:	mov	r4, #0
   14464:	mov	r7, #0
   14468:	b	14534 <__assert_fail@plt+0x3180>
   1446c:	add	r2, sp, #12
   14470:	mov	r0, r4
   14474:	mov	r1, #0
   14478:	bl	12678 <__assert_fail@plt+0x12c4>
   1447c:	bl	14e58 <__assert_fail@plt+0x3aa4>
   14480:	mov	r4, r0
   14484:	bl	110e4 <endgrent@plt>
   14488:	bl	11330 <endpwent@plt>
   1448c:	cmp	r6, #0
   14490:	beq	14528 <__assert_fail@plt+0x3174>
   14494:	cmp	r5, #0
   14498:	bne	14528 <__assert_fail@plt+0x3174>
   1449c:	ldrb	r0, [r6]
   144a0:	cmp	r0, #43	; 0x2b
   144a4:	beq	144c4 <__assert_fail@plt+0x3110>
   144a8:	mov	r0, r6
   144ac:	bl	1139c <getgrnam@plt>
   144b0:	cmp	r0, #0
   144b4:	beq	144c4 <__assert_fail@plt+0x3110>
   144b8:	ldr	r0, [r0, #8]
   144bc:	mov	r5, #0
   144c0:	b	14514 <__assert_fail@plt+0x3160>
   144c4:	movw	r0, #23807	; 0x5cff
   144c8:	add	r3, sp, #12
   144cc:	mov	r1, #0
   144d0:	mov	r2, #10
   144d4:	movt	r0, #1
   144d8:	str	r0, [sp]
   144dc:	mov	r0, r6
   144e0:	bl	14f08 <__assert_fail@plt+0x3b54>
   144e4:	ldr	r1, [sp, #12]
   144e8:	mvn	r2, #0
   144ec:	clz	r0, r0
   144f0:	movw	r5, #26037	; 0x65b5
   144f4:	lsr	r0, r0, #5
   144f8:	movt	r5, #1
   144fc:	subs	r2, r1, r2
   14500:	movwne	r2, #1
   14504:	ands	r0, r0, r2
   14508:	ldr	r0, [sp, #8]
   1450c:	movne	r0, r1
   14510:	movwne	r5, #0
   14514:	str	r0, [sp, #8]
   14518:	bl	110e4 <endgrent@plt>
   1451c:	mov	r0, r6
   14520:	bl	14e58 <__assert_fail@plt+0x3aa4>
   14524:	mov	r4, r0
   14528:	mov	r6, #0
   1452c:	cmp	r5, #0
   14530:	bne	14570 <__assert_fail@plt+0x31bc>
   14534:	ldr	r0, [sp, #4]
   14538:	cmp	sl, #0
   1453c:	mov	r6, #1
   14540:	str	r0, [r9]
   14544:	ldrne	r0, [sp, #8]
   14548:	strne	r0, [sl]
   1454c:	ldr	r0, [fp, #8]
   14550:	cmp	r0, #0
   14554:	strne	r7, [r0]
   14558:	movne	r7, #0
   1455c:	cmp	r8, #0
   14560:	moveq	r5, #0
   14564:	strne	r4, [r8]
   14568:	movne	r5, #0
   1456c:	movne	r4, #0
   14570:	mov	r0, r7
   14574:	bl	12650 <__assert_fail@plt+0x129c>
   14578:	mov	r0, r4
   1457c:	bl	12650 <__assert_fail@plt+0x129c>
   14580:	mov	r0, #0
   14584:	cmp	r6, #0
   14588:	bne	1459c <__assert_fail@plt+0x31e8>
   1458c:	mov	r0, #0
   14590:	mov	r1, r5
   14594:	mov	r2, #5
   14598:	bl	11180 <dcgettext@plt>
   1459c:	sub	sp, fp, #28
   145a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   145a8:	add	fp, sp, #24
   145ac:	sub	sp, sp, #32
   145b0:	ldr	r6, [fp, #12]
   145b4:	ldr	r7, [fp, #8]
   145b8:	mov	r4, r2
   145bc:	mov	r8, r0
   145c0:	cmp	r1, #0
   145c4:	beq	145ec <__assert_fail@plt+0x3238>
   145c8:	movw	r2, #26064	; 0x65d0
   145cc:	mov	r5, r1
   145d0:	str	r3, [sp, #4]
   145d4:	str	r4, [sp]
   145d8:	mov	r0, r8
   145dc:	mov	r1, #1
   145e0:	movt	r2, #1
   145e4:	mov	r3, r5
   145e8:	b	14604 <__assert_fail@plt+0x3250>
   145ec:	movw	r2, #26076	; 0x65dc
   145f0:	str	r3, [sp]
   145f4:	mov	r0, r8
   145f8:	mov	r1, #1
   145fc:	mov	r3, r4
   14600:	movt	r2, #1
   14604:	bl	11300 <__fprintf_chk@plt>
   14608:	movw	r1, #26083	; 0x65e3
   1460c:	mov	r0, #0
   14610:	mov	r2, #5
   14614:	movt	r1, #1
   14618:	bl	11180 <dcgettext@plt>
   1461c:	movw	r2, #26801	; 0x68b1
   14620:	mov	r3, r0
   14624:	movw	r0, #2022	; 0x7e6
   14628:	mov	r1, #1
   1462c:	movt	r2, #1
   14630:	str	r0, [sp]
   14634:	mov	r0, r8
   14638:	bl	11300 <__fprintf_chk@plt>
   1463c:	movw	r4, #23806	; 0x5cfe
   14640:	mov	r1, r8
   14644:	movt	r4, #1
   14648:	mov	r0, r4
   1464c:	bl	110f0 <fputs_unlocked@plt>
   14650:	movw	r1, #26087	; 0x65e7
   14654:	mov	r0, #0
   14658:	mov	r2, #5
   1465c:	movt	r1, #1
   14660:	bl	11180 <dcgettext@plt>
   14664:	movw	r3, #26258	; 0x6692
   14668:	mov	r2, r0
   1466c:	mov	r0, r8
   14670:	mov	r1, #1
   14674:	movt	r3, #1
   14678:	bl	11300 <__fprintf_chk@plt>
   1467c:	mov	r0, r4
   14680:	mov	r1, r8
   14684:	bl	110f0 <fputs_unlocked@plt>
   14688:	cmp	r6, #9
   1468c:	bhi	146f0 <__assert_fail@plt+0x333c>
   14690:	add	r0, pc, #0
   14694:	ldr	pc, [r0, r6, lsl #2]
   14698:	andeq	r4, r1, r8, asr #17
   1469c:	andeq	r4, r1, r0, asr #13
   146a0:	strdeq	r4, [r1], -ip
   146a4:	andeq	r4, r1, r4, lsr #14
   146a8:	andeq	r4, r1, ip, asr #14
   146ac:	andeq	r4, r1, r4, ror r7
   146b0:	muleq	r1, ip, r7
   146b4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146b8:	andeq	r4, r1, r4, ror r8
   146bc:	andeq	r4, r1, ip, lsl r8
   146c0:	movw	r1, #26292	; 0x66b4
   146c4:	mov	r0, #0
   146c8:	mov	r2, #5
   146cc:	movt	r1, #1
   146d0:	bl	11180 <dcgettext@plt>
   146d4:	ldr	r3, [r7]
   146d8:	mov	r2, r0
   146dc:	mov	r0, r8
   146e0:	mov	r1, #1
   146e4:	sub	sp, fp, #24
   146e8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   146ec:	b	11300 <__fprintf_chk@plt>
   146f0:	movw	r1, #26611	; 0x67f3
   146f4:	movt	r1, #1
   146f8:	b	14824 <__assert_fail@plt+0x3470>
   146fc:	movw	r1, #26308	; 0x66c4
   14700:	mov	r0, #0
   14704:	mov	r2, #5
   14708:	movt	r1, #1
   1470c:	bl	11180 <dcgettext@plt>
   14710:	mov	r2, r0
   14714:	ldr	r3, [r7]
   14718:	ldr	r0, [r7, #4]
   1471c:	str	r0, [sp]
   14720:	b	14810 <__assert_fail@plt+0x345c>
   14724:	movw	r1, #26331	; 0x66db
   14728:	mov	r0, #0
   1472c:	mov	r2, #5
   14730:	movt	r1, #1
   14734:	bl	11180 <dcgettext@plt>
   14738:	mov	r2, r0
   1473c:	ldr	r3, [r7]
   14740:	ldmib	r7, {r0, r1}
   14744:	stm	sp, {r0, r1}
   14748:	b	14810 <__assert_fail@plt+0x345c>
   1474c:	movw	r1, #26359	; 0x66f7
   14750:	mov	r0, #0
   14754:	mov	r2, #5
   14758:	movt	r1, #1
   1475c:	bl	11180 <dcgettext@plt>
   14760:	ldr	r3, [r7]
   14764:	mov	r2, r0
   14768:	ldmib	r7, {r0, r1, r7}
   1476c:	stm	sp, {r0, r1, r7}
   14770:	b	14810 <__assert_fail@plt+0x345c>
   14774:	movw	r1, #26391	; 0x6717
   14778:	mov	r0, #0
   1477c:	mov	r2, #5
   14780:	movt	r1, #1
   14784:	bl	11180 <dcgettext@plt>
   14788:	ldr	r3, [r7]
   1478c:	mov	r2, r0
   14790:	ldmib	r7, {r0, r1, r6, r7}
   14794:	stm	sp, {r0, r1, r6, r7}
   14798:	b	14810 <__assert_fail@plt+0x345c>
   1479c:	movw	r1, #26427	; 0x673b
   147a0:	mov	r0, #0
   147a4:	mov	r2, #5
   147a8:	movt	r1, #1
   147ac:	bl	11180 <dcgettext@plt>
   147b0:	mov	r2, r0
   147b4:	ldr	r3, [r7]
   147b8:	ldmib	r7, {r0, r1, r6}
   147bc:	ldr	r5, [r7, #16]
   147c0:	ldr	r7, [r7, #20]
   147c4:	stm	sp, {r0, r1, r6}
   147c8:	str	r5, [sp, #12]
   147cc:	str	r7, [sp, #16]
   147d0:	b	14810 <__assert_fail@plt+0x345c>
   147d4:	movw	r1, #26467	; 0x6763
   147d8:	mov	r0, #0
   147dc:	mov	r2, #5
   147e0:	movt	r1, #1
   147e4:	bl	11180 <dcgettext@plt>
   147e8:	mov	r2, r0
   147ec:	ldr	r3, [r7]
   147f0:	ldmib	r7, {r0, r1, r6}
   147f4:	ldr	r5, [r7, #16]
   147f8:	ldr	r4, [r7, #20]
   147fc:	ldr	r7, [r7, #24]
   14800:	stm	sp, {r0, r1, r6}
   14804:	str	r5, [sp, #12]
   14808:	str	r4, [sp, #16]
   1480c:	str	r7, [sp, #20]
   14810:	mov	r0, r8
   14814:	mov	r1, #1
   14818:	b	148c4 <__assert_fail@plt+0x3510>
   1481c:	movw	r1, #26559	; 0x67bf
   14820:	movt	r1, #1
   14824:	mov	r0, #0
   14828:	mov	r2, #5
   1482c:	bl	11180 <dcgettext@plt>
   14830:	mov	ip, r0
   14834:	ldr	r3, [r7]
   14838:	ldr	r0, [r7, #4]
   1483c:	ldr	r1, [r7, #8]
   14840:	ldr	r6, [r7, #12]
   14844:	ldr	r5, [r7, #16]
   14848:	ldr	r4, [r7, #20]
   1484c:	ldr	r2, [r7, #24]
   14850:	ldr	lr, [r7, #28]
   14854:	ldr	r7, [r7, #32]
   14858:	stm	sp, {r0, r1, r6}
   1485c:	str	r5, [sp, #12]
   14860:	str	r4, [sp, #16]
   14864:	str	r2, [sp, #20]
   14868:	str	lr, [sp, #24]
   1486c:	str	r7, [sp, #28]
   14870:	b	148b8 <__assert_fail@plt+0x3504>
   14874:	movw	r1, #26511	; 0x678f
   14878:	mov	r0, #0
   1487c:	mov	r2, #5
   14880:	movt	r1, #1
   14884:	bl	11180 <dcgettext@plt>
   14888:	mov	ip, r0
   1488c:	ldr	r3, [r7]
   14890:	ldmib	r7, {r0, r1, r6}
   14894:	ldr	r5, [r7, #16]
   14898:	ldr	r4, [r7, #20]
   1489c:	ldr	r2, [r7, #24]
   148a0:	ldr	r7, [r7, #28]
   148a4:	stm	sp, {r0, r1, r6}
   148a8:	str	r5, [sp, #12]
   148ac:	str	r4, [sp, #16]
   148b0:	str	r2, [sp, #20]
   148b4:	str	r7, [sp, #24]
   148b8:	mov	r0, r8
   148bc:	mov	r1, #1
   148c0:	mov	r2, ip
   148c4:	bl	11300 <__fprintf_chk@plt>
   148c8:	sub	sp, fp, #24
   148cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148d0:	push	{r4, sl, fp, lr}
   148d4:	add	fp, sp, #8
   148d8:	sub	sp, sp, #8
   148dc:	ldr	ip, [fp, #8]
   148e0:	mov	lr, #0
   148e4:	ldr	r4, [ip, lr, lsl #2]
   148e8:	add	lr, lr, #1
   148ec:	cmp	r4, #0
   148f0:	bne	148e4 <__assert_fail@plt+0x3530>
   148f4:	sub	r4, lr, #1
   148f8:	str	ip, [sp]
   148fc:	str	r4, [sp, #4]
   14900:	bl	145a4 <__assert_fail@plt+0x31f0>
   14904:	sub	sp, fp, #8
   14908:	pop	{r4, sl, fp, pc}
   1490c:	push	{r4, r5, fp, lr}
   14910:	add	fp, sp, #8
   14914:	sub	sp, sp, #48	; 0x30
   14918:	ldr	r4, [fp, #8]
   1491c:	mov	ip, #0
   14920:	add	lr, sp, #8
   14924:	ldr	r5, [r4]
   14928:	cmp	r5, #0
   1492c:	str	r5, [lr, ip, lsl #2]
   14930:	beq	14948 <__assert_fail@plt+0x3594>
   14934:	add	ip, ip, #1
   14938:	add	r4, r4, #4
   1493c:	cmp	ip, #10
   14940:	bne	14924 <__assert_fail@plt+0x3570>
   14944:	mov	ip, #10
   14948:	str	lr, [sp]
   1494c:	str	ip, [sp, #4]
   14950:	bl	145a4 <__assert_fail@plt+0x31f0>
   14954:	sub	sp, fp, #8
   14958:	pop	{r4, r5, fp, pc}
   1495c:	push	{fp, lr}
   14960:	mov	fp, sp
   14964:	sub	sp, sp, #8
   14968:	add	ip, fp, #8
   1496c:	str	ip, [sp, #4]
   14970:	str	ip, [sp]
   14974:	bl	1490c <__assert_fail@plt+0x3558>
   14978:	mov	sp, fp
   1497c:	pop	{fp, pc}
   14980:	push	{fp, lr}
   14984:	mov	fp, sp
   14988:	movw	r0, #29044	; 0x7174
   1498c:	movt	r0, #2
   14990:	ldr	r1, [r0]
   14994:	movw	r0, #23806	; 0x5cfe
   14998:	movt	r0, #1
   1499c:	bl	110f0 <fputs_unlocked@plt>
   149a0:	movw	r1, #26671	; 0x682f
   149a4:	mov	r0, #0
   149a8:	mov	r2, #5
   149ac:	movt	r1, #1
   149b0:	bl	11180 <dcgettext@plt>
   149b4:	movw	r2, #26691	; 0x6843
   149b8:	mov	r1, r0
   149bc:	mov	r0, #1
   149c0:	movt	r2, #1
   149c4:	bl	112e8 <__printf_chk@plt>
   149c8:	movw	r1, #26713	; 0x6859
   149cc:	mov	r0, #0
   149d0:	mov	r2, #5
   149d4:	movt	r1, #1
   149d8:	bl	11180 <dcgettext@plt>
   149dc:	movw	r2, #24590	; 0x600e
   149e0:	movw	r3, #25096	; 0x6208
   149e4:	mov	r1, r0
   149e8:	mov	r0, #1
   149ec:	movt	r2, #1
   149f0:	movt	r3, #1
   149f4:	bl	112e8 <__printf_chk@plt>
   149f8:	movw	r1, #26733	; 0x686d
   149fc:	mov	r0, #0
   14a00:	mov	r2, #5
   14a04:	movt	r1, #1
   14a08:	bl	11180 <dcgettext@plt>
   14a0c:	movw	r2, #26772	; 0x6894
   14a10:	mov	r1, r0
   14a14:	mov	r0, #1
   14a18:	movt	r2, #1
   14a1c:	pop	{fp, lr}
   14a20:	b	112e8 <__printf_chk@plt>
   14a24:	b	14a28 <__assert_fail@plt+0x3674>
   14a28:	push	{r4, r5, r6, sl, fp, lr}
   14a2c:	add	fp, sp, #16
   14a30:	mov	r4, r2
   14a34:	mov	r5, r1
   14a38:	mov	r6, r0
   14a3c:	bl	15910 <__assert_fail@plt+0x455c>
   14a40:	cmp	r0, #0
   14a44:	popne	{r4, r5, r6, sl, fp, pc}
   14a48:	cmp	r6, #0
   14a4c:	beq	14a60 <__assert_fail@plt+0x36ac>
   14a50:	cmp	r5, #0
   14a54:	cmpne	r4, #0
   14a58:	bne	14a60 <__assert_fail@plt+0x36ac>
   14a5c:	pop	{r4, r5, r6, sl, fp, pc}
   14a60:	bl	14e90 <__assert_fail@plt+0x3adc>
   14a64:	push	{fp, lr}
   14a68:	mov	fp, sp
   14a6c:	bl	153c8 <__assert_fail@plt+0x4014>
   14a70:	cmp	r0, #0
   14a74:	popne	{fp, pc}
   14a78:	bl	14e90 <__assert_fail@plt+0x3adc>
   14a7c:	push	{fp, lr}
   14a80:	mov	fp, sp
   14a84:	bl	153c8 <__assert_fail@plt+0x4014>
   14a88:	cmp	r0, #0
   14a8c:	popne	{fp, pc}
   14a90:	bl	14e90 <__assert_fail@plt+0x3adc>
   14a94:	push	{fp, lr}
   14a98:	mov	fp, sp
   14a9c:	bl	153c8 <__assert_fail@plt+0x4014>
   14aa0:	cmp	r0, #0
   14aa4:	popne	{fp, pc}
   14aa8:	bl	14e90 <__assert_fail@plt+0x3adc>
   14aac:	push	{r4, r5, fp, lr}
   14ab0:	add	fp, sp, #8
   14ab4:	mov	r4, r1
   14ab8:	mov	r5, r0
   14abc:	bl	153f8 <__assert_fail@plt+0x4044>
   14ac0:	cmp	r0, #0
   14ac4:	popne	{r4, r5, fp, pc}
   14ac8:	cmp	r5, #0
   14acc:	beq	14adc <__assert_fail@plt+0x3728>
   14ad0:	cmp	r4, #0
   14ad4:	bne	14adc <__assert_fail@plt+0x3728>
   14ad8:	pop	{r4, r5, fp, pc}
   14adc:	bl	14e90 <__assert_fail@plt+0x3adc>
   14ae0:	push	{fp, lr}
   14ae4:	mov	fp, sp
   14ae8:	cmp	r1, #0
   14aec:	orreq	r1, r1, #1
   14af0:	bl	153f8 <__assert_fail@plt+0x4044>
   14af4:	cmp	r0, #0
   14af8:	popne	{fp, pc}
   14afc:	bl	14e90 <__assert_fail@plt+0x3adc>
   14b00:	push	{fp, lr}
   14b04:	mov	fp, sp
   14b08:	clz	r3, r2
   14b0c:	lsr	ip, r3, #5
   14b10:	clz	r3, r1
   14b14:	lsr	r3, r3, #5
   14b18:	orrs	r3, r3, ip
   14b1c:	movwne	r1, #1
   14b20:	movwne	r2, #1
   14b24:	bl	15910 <__assert_fail@plt+0x455c>
   14b28:	cmp	r0, #0
   14b2c:	popne	{fp, pc}
   14b30:	bl	14e90 <__assert_fail@plt+0x3adc>
   14b34:	push	{fp, lr}
   14b38:	mov	fp, sp
   14b3c:	mov	r2, r1
   14b40:	mov	r1, r0
   14b44:	mov	r0, #0
   14b48:	bl	15910 <__assert_fail@plt+0x455c>
   14b4c:	cmp	r0, #0
   14b50:	popne	{fp, pc}
   14b54:	bl	14e90 <__assert_fail@plt+0x3adc>
   14b58:	mov	r2, r1
   14b5c:	mov	r1, r0
   14b60:	mov	r0, #0
   14b64:	b	14b00 <__assert_fail@plt+0x374c>
   14b68:	mov	r2, #1
   14b6c:	b	14b70 <__assert_fail@plt+0x37bc>
   14b70:	push	{r4, r5, fp, lr}
   14b74:	add	fp, sp, #8
   14b78:	ldr	r5, [r1]
   14b7c:	mov	r4, r1
   14b80:	cmp	r0, #0
   14b84:	beq	14b9c <__assert_fail@plt+0x37e8>
   14b88:	mov	r1, #1
   14b8c:	add	r1, r1, r5, lsr #1
   14b90:	adds	r5, r5, r1
   14b94:	bcc	14bb4 <__assert_fail@plt+0x3800>
   14b98:	bl	14e90 <__assert_fail@plt+0x3adc>
   14b9c:	cmp	r5, #0
   14ba0:	bne	14bb4 <__assert_fail@plt+0x3800>
   14ba4:	mov	r1, #64	; 0x40
   14ba8:	cmp	r2, #64	; 0x40
   14bac:	udiv	r5, r1, r2
   14bb0:	addhi	r5, r5, #1
   14bb4:	mov	r1, r5
   14bb8:	bl	14a28 <__assert_fail@plt+0x3674>
   14bbc:	str	r5, [r4]
   14bc0:	pop	{r4, r5, fp, pc}
   14bc4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14bc8:	add	fp, sp, #24
   14bcc:	ldr	r6, [r1]
   14bd0:	mov	r8, r1
   14bd4:	ldr	r4, [fp, #8]
   14bd8:	add	r1, r6, r6, asr #1
   14bdc:	cmp	r1, r6
   14be0:	mvnvs	r1, #-2147483648	; 0x80000000
   14be4:	cmp	r1, r3
   14be8:	mov	r5, r1
   14bec:	movgt	r5, r3
   14bf0:	cmn	r3, #1
   14bf4:	movle	r5, r1
   14bf8:	cmn	r4, #1
   14bfc:	ble	14c1c <__assert_fail@plt+0x3868>
   14c00:	cmp	r4, #0
   14c04:	beq	14c70 <__assert_fail@plt+0x38bc>
   14c08:	cmn	r5, #1
   14c0c:	ble	14c44 <__assert_fail@plt+0x3890>
   14c10:	mvn	r7, #-2147483648	; 0x80000000
   14c14:	udiv	r1, r7, r4
   14c18:	b	14c38 <__assert_fail@plt+0x3884>
   14c1c:	cmn	r5, #1
   14c20:	ble	14c60 <__assert_fail@plt+0x38ac>
   14c24:	cmn	r4, #1
   14c28:	beq	14c70 <__assert_fail@plt+0x38bc>
   14c2c:	mov	r1, #-2147483648	; 0x80000000
   14c30:	mvn	r7, #-2147483648	; 0x80000000
   14c34:	sdiv	r1, r1, r4
   14c38:	cmp	r1, r5
   14c3c:	bge	14c70 <__assert_fail@plt+0x38bc>
   14c40:	b	14c80 <__assert_fail@plt+0x38cc>
   14c44:	beq	14c70 <__assert_fail@plt+0x38bc>
   14c48:	mov	r1, #-2147483648	; 0x80000000
   14c4c:	mvn	r7, #-2147483648	; 0x80000000
   14c50:	sdiv	r1, r1, r5
   14c54:	cmp	r1, r4
   14c58:	bge	14c70 <__assert_fail@plt+0x38bc>
   14c5c:	b	14c80 <__assert_fail@plt+0x38cc>
   14c60:	mvn	r7, #-2147483648	; 0x80000000
   14c64:	sdiv	r1, r7, r4
   14c68:	cmp	r5, r1
   14c6c:	blt	14c80 <__assert_fail@plt+0x38cc>
   14c70:	mul	r1, r5, r4
   14c74:	mov	r7, #64	; 0x40
   14c78:	cmp	r1, #63	; 0x3f
   14c7c:	bgt	14c88 <__assert_fail@plt+0x38d4>
   14c80:	sdiv	r5, r7, r4
   14c84:	mul	r1, r5, r4
   14c88:	cmp	r0, #0
   14c8c:	moveq	r7, #0
   14c90:	streq	r7, [r8]
   14c94:	sub	r7, r5, r6
   14c98:	cmp	r7, r2
   14c9c:	bge	14d40 <__assert_fail@plt+0x398c>
   14ca0:	add	r5, r6, r2
   14ca4:	mov	r2, #0
   14ca8:	mov	r1, #0
   14cac:	cmp	r5, r3
   14cb0:	movwgt	r2, #1
   14cb4:	cmn	r3, #1
   14cb8:	movwgt	r1, #1
   14cbc:	cmp	r5, r6
   14cc0:	bvs	14d28 <__assert_fail@plt+0x3974>
   14cc4:	ands	r1, r1, r2
   14cc8:	bne	14d28 <__assert_fail@plt+0x3974>
   14ccc:	cmn	r4, #1
   14cd0:	ble	14cf0 <__assert_fail@plt+0x393c>
   14cd4:	cmp	r4, #0
   14cd8:	beq	14d3c <__assert_fail@plt+0x3988>
   14cdc:	cmn	r5, #1
   14ce0:	ble	14d14 <__assert_fail@plt+0x3960>
   14ce4:	mvn	r1, #-2147483648	; 0x80000000
   14ce8:	udiv	r1, r1, r4
   14cec:	b	14d08 <__assert_fail@plt+0x3954>
   14cf0:	cmn	r5, #1
   14cf4:	ble	14d2c <__assert_fail@plt+0x3978>
   14cf8:	cmn	r4, #1
   14cfc:	beq	14d3c <__assert_fail@plt+0x3988>
   14d00:	mov	r1, #-2147483648	; 0x80000000
   14d04:	sdiv	r1, r1, r4
   14d08:	cmp	r1, r5
   14d0c:	bge	14d3c <__assert_fail@plt+0x3988>
   14d10:	b	14d28 <__assert_fail@plt+0x3974>
   14d14:	beq	14d3c <__assert_fail@plt+0x3988>
   14d18:	mov	r1, #-2147483648	; 0x80000000
   14d1c:	sdiv	r1, r1, r5
   14d20:	cmp	r1, r4
   14d24:	bge	14d3c <__assert_fail@plt+0x3988>
   14d28:	bl	14e90 <__assert_fail@plt+0x3adc>
   14d2c:	mvn	r1, #-2147483648	; 0x80000000
   14d30:	sdiv	r1, r1, r4
   14d34:	cmp	r5, r1
   14d38:	blt	14d28 <__assert_fail@plt+0x3974>
   14d3c:	mul	r1, r5, r4
   14d40:	bl	14aac <__assert_fail@plt+0x36f8>
   14d44:	str	r5, [r8]
   14d48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d4c:	push	{fp, lr}
   14d50:	mov	fp, sp
   14d54:	mov	r1, #1
   14d58:	bl	15374 <__assert_fail@plt+0x3fc0>
   14d5c:	cmp	r0, #0
   14d60:	popne	{fp, pc}
   14d64:	bl	14e90 <__assert_fail@plt+0x3adc>
   14d68:	push	{fp, lr}
   14d6c:	mov	fp, sp
   14d70:	bl	15374 <__assert_fail@plt+0x3fc0>
   14d74:	cmp	r0, #0
   14d78:	popne	{fp, pc}
   14d7c:	bl	14e90 <__assert_fail@plt+0x3adc>
   14d80:	push	{fp, lr}
   14d84:	mov	fp, sp
   14d88:	mov	r1, #1
   14d8c:	bl	15374 <__assert_fail@plt+0x3fc0>
   14d90:	cmp	r0, #0
   14d94:	popne	{fp, pc}
   14d98:	bl	14e90 <__assert_fail@plt+0x3adc>
   14d9c:	push	{fp, lr}
   14da0:	mov	fp, sp
   14da4:	bl	15374 <__assert_fail@plt+0x3fc0>
   14da8:	cmp	r0, #0
   14dac:	popne	{fp, pc}
   14db0:	bl	14e90 <__assert_fail@plt+0x3adc>
   14db4:	push	{r4, r5, fp, lr}
   14db8:	add	fp, sp, #8
   14dbc:	mov	r5, r0
   14dc0:	mov	r0, r1
   14dc4:	mov	r4, r1
   14dc8:	bl	153c8 <__assert_fail@plt+0x4014>
   14dcc:	cmp	r0, #0
   14dd0:	beq	14de4 <__assert_fail@plt+0x3a30>
   14dd4:	mov	r1, r5
   14dd8:	mov	r2, r4
   14ddc:	pop	{r4, r5, fp, lr}
   14de0:	b	11168 <memcpy@plt>
   14de4:	bl	14e90 <__assert_fail@plt+0x3adc>
   14de8:	push	{r4, r5, fp, lr}
   14dec:	add	fp, sp, #8
   14df0:	mov	r5, r0
   14df4:	mov	r0, r1
   14df8:	mov	r4, r1
   14dfc:	bl	153c8 <__assert_fail@plt+0x4014>
   14e00:	cmp	r0, #0
   14e04:	beq	14e18 <__assert_fail@plt+0x3a64>
   14e08:	mov	r1, r5
   14e0c:	mov	r2, r4
   14e10:	pop	{r4, r5, fp, lr}
   14e14:	b	11168 <memcpy@plt>
   14e18:	bl	14e90 <__assert_fail@plt+0x3adc>
   14e1c:	push	{r4, r5, fp, lr}
   14e20:	add	fp, sp, #8
   14e24:	mov	r5, r0
   14e28:	add	r0, r1, #1
   14e2c:	mov	r4, r1
   14e30:	bl	153c8 <__assert_fail@plt+0x4014>
   14e34:	cmp	r0, #0
   14e38:	beq	14e54 <__assert_fail@plt+0x3aa0>
   14e3c:	mov	r1, #0
   14e40:	mov	r2, r4
   14e44:	strb	r1, [r0, r4]
   14e48:	mov	r1, r5
   14e4c:	pop	{r4, r5, fp, lr}
   14e50:	b	11168 <memcpy@plt>
   14e54:	bl	14e90 <__assert_fail@plt+0x3adc>
   14e58:	push	{r4, r5, fp, lr}
   14e5c:	add	fp, sp, #8
   14e60:	mov	r4, r0
   14e64:	bl	11294 <strlen@plt>
   14e68:	add	r5, r0, #1
   14e6c:	mov	r0, r5
   14e70:	bl	153c8 <__assert_fail@plt+0x4014>
   14e74:	cmp	r0, #0
   14e78:	beq	14e8c <__assert_fail@plt+0x3ad8>
   14e7c:	mov	r1, r4
   14e80:	mov	r2, r5
   14e84:	pop	{r4, r5, fp, lr}
   14e88:	b	11168 <memcpy@plt>
   14e8c:	bl	14e90 <__assert_fail@plt+0x3adc>
   14e90:	push	{fp, lr}
   14e94:	mov	fp, sp
   14e98:	movw	r0, #28952	; 0x7118
   14e9c:	movw	r1, #26848	; 0x68e0
   14ea0:	mov	r2, #5
   14ea4:	movt	r0, #2
   14ea8:	movt	r1, #1
   14eac:	ldr	r4, [r0]
   14eb0:	mov	r0, #0
   14eb4:	bl	11180 <dcgettext@plt>
   14eb8:	movw	r2, #25769	; 0x64a9
   14ebc:	mov	r3, r0
   14ec0:	mov	r0, r4
   14ec4:	mov	r1, #0
   14ec8:	movt	r2, #1
   14ecc:	bl	11210 <error@plt>
   14ed0:	bl	11384 <abort@plt>
   14ed4:	push	{r4, sl, fp, lr}
   14ed8:	add	fp, sp, #8
   14edc:	bl	15700 <__assert_fail@plt+0x434c>
   14ee0:	mov	r4, r0
   14ee4:	cmn	r0, #1
   14ee8:	bne	14efc <__assert_fail@plt+0x3b48>
   14eec:	bl	112ac <__errno_location@plt>
   14ef0:	ldr	r0, [r0]
   14ef4:	cmp	r0, #12
   14ef8:	beq	14f04 <__assert_fail@plt+0x3b50>
   14efc:	mov	r0, r4
   14f00:	pop	{r4, sl, fp, pc}
   14f04:	bl	14e90 <__assert_fail@plt+0x3adc>
   14f08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f0c:	add	fp, sp, #28
   14f10:	sub	sp, sp, #12
   14f14:	cmp	r2, #37	; 0x25
   14f18:	bcs	15354 <__assert_fail@plt+0x3fa0>
   14f1c:	ldr	r9, [fp, #8]
   14f20:	mov	r7, r2
   14f24:	mov	r6, r1
   14f28:	mov	r4, r0
   14f2c:	str	r3, [sp, #4]
   14f30:	bl	112ac <__errno_location@plt>
   14f34:	mov	r5, r0
   14f38:	mov	r0, #0
   14f3c:	str	r0, [r5]
   14f40:	bl	11264 <__ctype_b_loc@plt>
   14f44:	ldr	r1, [r0]
   14f48:	mov	r2, r4
   14f4c:	ldrb	r0, [r2], #1
   14f50:	add	r3, r1, r0, lsl #1
   14f54:	ldrb	r3, [r3, #1]
   14f58:	tst	r3, #32
   14f5c:	bne	14f4c <__assert_fail@plt+0x3b98>
   14f60:	cmp	r6, #0
   14f64:	add	r8, sp, #8
   14f68:	mov	sl, #4
   14f6c:	movne	r8, r6
   14f70:	cmp	r0, #45	; 0x2d
   14f74:	beq	15348 <__assert_fail@plt+0x3f94>
   14f78:	mov	r0, r4
   14f7c:	mov	r1, r8
   14f80:	mov	r2, r7
   14f84:	bl	11288 <strtoul@plt>
   14f88:	ldr	r6, [r8]
   14f8c:	cmp	r6, r4
   14f90:	beq	14fb4 <__assert_fail@plt+0x3c00>
   14f94:	mov	r7, r0
   14f98:	ldr	r0, [r5]
   14f9c:	cmp	r0, #0
   14fa0:	beq	14fe4 <__assert_fail@plt+0x3c30>
   14fa4:	cmp	r0, #34	; 0x22
   14fa8:	bne	15348 <__assert_fail@plt+0x3f94>
   14fac:	mov	sl, #1
   14fb0:	b	14fe8 <__assert_fail@plt+0x3c34>
   14fb4:	cmp	r9, #0
   14fb8:	beq	15348 <__assert_fail@plt+0x3f94>
   14fbc:	ldrb	r1, [r4]
   14fc0:	cmp	r1, #0
   14fc4:	beq	15348 <__assert_fail@plt+0x3f94>
   14fc8:	mov	r0, r9
   14fcc:	bl	112a0 <strchr@plt>
   14fd0:	cmp	r0, #0
   14fd4:	beq	15348 <__assert_fail@plt+0x3f94>
   14fd8:	mov	r7, #1
   14fdc:	mov	sl, #0
   14fe0:	b	14ff0 <__assert_fail@plt+0x3c3c>
   14fe4:	mov	sl, r0
   14fe8:	cmp	r9, #0
   14fec:	beq	15340 <__assert_fail@plt+0x3f8c>
   14ff0:	ldrb	r4, [r6]
   14ff4:	cmp	r4, #0
   14ff8:	beq	15340 <__assert_fail@plt+0x3f8c>
   14ffc:	mov	r0, r9
   15000:	mov	r1, r4
   15004:	bl	112a0 <strchr@plt>
   15008:	cmp	r0, #0
   1500c:	beq	152c8 <__assert_fail@plt+0x3f14>
   15010:	sub	r0, r4, #69	; 0x45
   15014:	mov	r3, #1
   15018:	mov	r5, #1024	; 0x400
   1501c:	cmp	r0, #21
   15020:	bhi	15038 <__assert_fail@plt+0x3c84>
   15024:	movw	r2, #35141	; 0x8945
   15028:	mov	r1, #1
   1502c:	movt	r2, #48	; 0x30
   15030:	tst	r2, r1, lsl r0
   15034:	bne	15054 <__assert_fail@plt+0x3ca0>
   15038:	sub	r0, r4, #103	; 0x67
   1503c:	cmp	r0, #13
   15040:	bhi	150a4 <__assert_fail@plt+0x3cf0>
   15044:	mov	r1, #1
   15048:	movw	r2, #8273	; 0x2051
   1504c:	tst	r2, r1, lsl r0
   15050:	beq	150a4 <__assert_fail@plt+0x3cf0>
   15054:	mov	r0, r9
   15058:	mov	r1, #48	; 0x30
   1505c:	bl	112a0 <strchr@plt>
   15060:	cmp	r0, #0
   15064:	beq	150a0 <__assert_fail@plt+0x3cec>
   15068:	ldrb	r0, [r6, #1]
   1506c:	cmp	r0, #66	; 0x42
   15070:	cmpne	r0, #68	; 0x44
   15074:	bne	15084 <__assert_fail@plt+0x3cd0>
   15078:	mov	r3, #2
   1507c:	mov	r5, #1000	; 0x3e8
   15080:	b	150a4 <__assert_fail@plt+0x3cf0>
   15084:	cmp	r0, #105	; 0x69
   15088:	bne	150a0 <__assert_fail@plt+0x3cec>
   1508c:	ldrb	r0, [r6, #2]
   15090:	mov	r3, #1
   15094:	cmp	r0, #66	; 0x42
   15098:	movweq	r3, #3
   1509c:	b	150a4 <__assert_fail@plt+0x3cf0>
   150a0:	mov	r3, #1
   150a4:	cmp	r4, #89	; 0x59
   150a8:	bgt	15118 <__assert_fail@plt+0x3d64>
   150ac:	sub	r0, r4, #66	; 0x42
   150b0:	cmp	r0, #14
   150b4:	bhi	1518c <__assert_fail@plt+0x3dd8>
   150b8:	add	r1, pc, #0
   150bc:	ldr	pc, [r1, r0, lsl #2]
   150c0:	strdeq	r5, [r1], -ip
   150c4:	andeq	r5, r1, r8, asr #5
   150c8:	andeq	r5, r1, r8, asr #5
   150cc:	ldrdeq	r5, [r1], -r4
   150d0:	andeq	r5, r1, r8, asr #5
   150d4:	andeq	r5, r1, ip, ror #3
   150d8:	andeq	r5, r1, r8, asr #5
   150dc:	andeq	r5, r1, r8, asr #5
   150e0:	andeq	r5, r1, r8, asr #5
   150e4:	andeq	r5, r1, r8, lsl r2
   150e8:	andeq	r5, r1, r8, asr #5
   150ec:	andeq	r5, r1, ip, lsr r2
   150f0:	andeq	r5, r1, r8, asr #5
   150f4:	andeq	r5, r1, r8, asr #5
   150f8:	andeq	r5, r1, r0, lsl #6
   150fc:	mov	r1, #0
   15100:	lsr	r0, r7, #22
   15104:	cmp	r1, r7, lsr #22
   15108:	lsl	r7, r7, #10
   1510c:	movwne	r0, #1
   15110:	mvnne	r7, #0
   15114:	b	15328 <__assert_fail@plt+0x3f74>
   15118:	cmp	r4, #115	; 0x73
   1511c:	bgt	151c8 <__assert_fail@plt+0x3e14>
   15120:	sub	r1, r4, #98	; 0x62
   15124:	cmp	r1, #11
   15128:	bhi	15294 <__assert_fail@plt+0x3ee0>
   1512c:	add	r2, pc, #4
   15130:	mov	r0, #0
   15134:	ldr	pc, [r2, r1, lsl #2]
   15138:	andeq	r5, r1, r8, ror #2
   1513c:	andeq	r5, r1, r8, lsr #6
   15140:	andeq	r5, r1, r8, asr #5
   15144:	andeq	r5, r1, r8, asr #5
   15148:	andeq	r5, r1, r8, asr #5
   1514c:	andeq	r5, r1, ip, ror #3
   15150:	andeq	r5, r1, r8, asr #5
   15154:	andeq	r5, r1, r8, asr #5
   15158:	andeq	r5, r1, r8, asr #5
   1515c:	andeq	r5, r1, r8, lsl r2
   15160:	andeq	r5, r1, r8, asr #5
   15164:	andeq	r5, r1, ip, lsr r2
   15168:	movw	r0, #65535	; 0xffff
   1516c:	movt	r0, #63	; 0x3f
   15170:	orr	r1, r0, #4194304	; 0x400000
   15174:	mov	r0, #0
   15178:	cmp	r7, r1
   1517c:	lsl	r7, r7, #9
   15180:	movwhi	r0, #1
   15184:	mvnhi	r7, #0
   15188:	b	15328 <__assert_fail@plt+0x3f74>
   1518c:	cmp	r4, #84	; 0x54
   15190:	beq	15268 <__assert_fail@plt+0x3eb4>
   15194:	cmp	r4, #89	; 0x59
   15198:	bne	152c8 <__assert_fail@plt+0x3f14>
   1519c:	mvn	r0, #0
   151a0:	mvn	r2, #7
   151a4:	udiv	r1, r0, r5
   151a8:	mov	r0, #0
   151ac:	cmp	r1, r7
   151b0:	mul	r7, r7, r5
   151b4:	orrcc	r0, r0, #1
   151b8:	mvncc	r7, #0
   151bc:	adds	r2, r2, #1
   151c0:	bcc	151ac <__assert_fail@plt+0x3df8>
   151c4:	b	15328 <__assert_fail@plt+0x3f74>
   151c8:	cmp	r4, #116	; 0x74
   151cc:	beq	15268 <__assert_fail@plt+0x3eb4>
   151d0:	cmp	r4, #119	; 0x77
   151d4:	bne	152c8 <__assert_fail@plt+0x3f14>
   151d8:	cmp	r7, #0
   151dc:	lsl	r1, r7, #1
   151e0:	lsr	r0, r7, #31
   151e4:	mvnmi	r1, #0
   151e8:	b	15234 <__assert_fail@plt+0x3e80>
   151ec:	mvn	r0, #0
   151f0:	mvn	r2, #2
   151f4:	udiv	r1, r0, r5
   151f8:	mov	r0, #0
   151fc:	cmp	r1, r7
   15200:	mul	r7, r7, r5
   15204:	orrcc	r0, r0, #1
   15208:	mvncc	r7, #0
   1520c:	adds	r2, r2, #1
   15210:	bcc	151fc <__assert_fail@plt+0x3e48>
   15214:	b	15328 <__assert_fail@plt+0x3f74>
   15218:	mvn	r0, #0
   1521c:	mul	r1, r7, r5
   15220:	udiv	r0, r0, r5
   15224:	cmp	r0, r7
   15228:	mov	r0, #0
   1522c:	mvncc	r1, #0
   15230:	movwcc	r0, #1
   15234:	mov	r7, r1
   15238:	b	15328 <__assert_fail@plt+0x3f74>
   1523c:	mvn	r0, #0
   15240:	mvn	r2, #1
   15244:	udiv	r1, r0, r5
   15248:	mov	r0, #0
   1524c:	cmp	r1, r7
   15250:	mul	r7, r7, r5
   15254:	orrcc	r0, r0, #1
   15258:	mvncc	r7, #0
   1525c:	adds	r2, r2, #1
   15260:	bcc	1524c <__assert_fail@plt+0x3e98>
   15264:	b	15328 <__assert_fail@plt+0x3f74>
   15268:	mvn	r0, #0
   1526c:	mvn	r2, #3
   15270:	udiv	r1, r0, r5
   15274:	mov	r0, #0
   15278:	cmp	r1, r7
   1527c:	mul	r7, r7, r5
   15280:	orrcc	r0, r0, #1
   15284:	mvncc	r7, #0
   15288:	adds	r2, r2, #1
   1528c:	bcc	15278 <__assert_fail@plt+0x3ec4>
   15290:	b	15328 <__assert_fail@plt+0x3f74>
   15294:	cmp	r4, #90	; 0x5a
   15298:	bne	152c8 <__assert_fail@plt+0x3f14>
   1529c:	mvn	r0, #0
   152a0:	mvn	r2, #6
   152a4:	udiv	r1, r0, r5
   152a8:	mov	r0, #0
   152ac:	cmp	r1, r7
   152b0:	mul	r7, r7, r5
   152b4:	orrcc	r0, r0, #1
   152b8:	mvncc	r7, #0
   152bc:	adds	r2, r2, #1
   152c0:	bcc	152ac <__assert_fail@plt+0x3ef8>
   152c4:	b	15328 <__assert_fail@plt+0x3f74>
   152c8:	ldr	r0, [sp, #4]
   152cc:	orr	sl, sl, #2
   152d0:	b	15344 <__assert_fail@plt+0x3f90>
   152d4:	mvn	r0, #0
   152d8:	mvn	r2, #5
   152dc:	udiv	r1, r0, r5
   152e0:	mov	r0, #0
   152e4:	cmp	r1, r7
   152e8:	mul	r7, r7, r5
   152ec:	orrcc	r0, r0, #1
   152f0:	mvncc	r7, #0
   152f4:	adds	r2, r2, #1
   152f8:	bcc	152e4 <__assert_fail@plt+0x3f30>
   152fc:	b	15328 <__assert_fail@plt+0x3f74>
   15300:	mvn	r0, #0
   15304:	mvn	r2, #4
   15308:	udiv	r1, r0, r5
   1530c:	mov	r0, #0
   15310:	cmp	r1, r7
   15314:	mul	r7, r7, r5
   15318:	orrcc	r0, r0, #1
   1531c:	mvncc	r7, #0
   15320:	adds	r2, r2, #1
   15324:	bcc	15310 <__assert_fail@plt+0x3f5c>
   15328:	add	r1, r6, r3
   1532c:	orr	sl, r0, sl
   15330:	str	r1, [r8]
   15334:	ldrb	r1, [r6, r3]
   15338:	cmp	r1, #0
   1533c:	orrne	sl, sl, #2
   15340:	ldr	r0, [sp, #4]
   15344:	str	r7, [r0]
   15348:	mov	r0, sl
   1534c:	sub	sp, fp, #28
   15350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15354:	movw	r0, #26865	; 0x68f1
   15358:	movw	r1, #26903	; 0x6917
   1535c:	movw	r3, #26919	; 0x6927
   15360:	mov	r2, #85	; 0x55
   15364:	movt	r0, #1
   15368:	movt	r1, #1
   1536c:	movt	r3, #1
   15370:	bl	113b4 <__assert_fail@plt>
   15374:	clz	r2, r1
   15378:	clz	r3, r0
   1537c:	lsr	r2, r2, #5
   15380:	lsr	r3, r3, #5
   15384:	orrs	r2, r3, r2
   15388:	movwne	r1, #1
   1538c:	movwne	r0, #1
   15390:	cmp	r1, #0
   15394:	beq	153c4 <__assert_fail@plt+0x4010>
   15398:	mvn	r2, #-2147483648	; 0x80000000
   1539c:	udiv	r2, r2, r1
   153a0:	cmp	r2, r0
   153a4:	bcs	153c4 <__assert_fail@plt+0x4010>
   153a8:	push	{fp, lr}
   153ac:	mov	fp, sp
   153b0:	bl	112ac <__errno_location@plt>
   153b4:	mov	r1, #12
   153b8:	str	r1, [r0]
   153bc:	mov	r0, #0
   153c0:	pop	{fp, pc}
   153c4:	b	110d8 <calloc@plt>
   153c8:	cmp	r0, #0
   153cc:	movweq	r0, #1
   153d0:	cmn	r0, #1
   153d4:	ble	153dc <__assert_fail@plt+0x4028>
   153d8:	b	11228 <malloc@plt>
   153dc:	push	{fp, lr}
   153e0:	mov	fp, sp
   153e4:	bl	112ac <__errno_location@plt>
   153e8:	mov	r1, #12
   153ec:	str	r1, [r0]
   153f0:	mov	r0, #0
   153f4:	pop	{fp, pc}
   153f8:	push	{fp, lr}
   153fc:	mov	fp, sp
   15400:	cmp	r0, #0
   15404:	beq	15420 <__assert_fail@plt+0x406c>
   15408:	cmp	r1, #0
   1540c:	beq	1542c <__assert_fail@plt+0x4078>
   15410:	cmn	r1, #1
   15414:	ble	15434 <__assert_fail@plt+0x4080>
   15418:	pop	{fp, lr}
   1541c:	b	1118c <realloc@plt>
   15420:	mov	r0, r1
   15424:	pop	{fp, lr}
   15428:	b	153c8 <__assert_fail@plt+0x4014>
   1542c:	bl	12650 <__assert_fail@plt+0x129c>
   15430:	b	15440 <__assert_fail@plt+0x408c>
   15434:	bl	112ac <__errno_location@plt>
   15438:	mov	r1, #12
   1543c:	str	r1, [r0]
   15440:	mov	r0, #0
   15444:	pop	{fp, pc}
   15448:	push	{r4, r5, r6, sl, fp, lr}
   1544c:	add	fp, sp, #16
   15450:	mov	r4, r0
   15454:	bl	111ec <__fpending@plt>
   15458:	mov	r5, r0
   1545c:	mov	r0, r4
   15460:	bl	111f8 <ferror_unlocked@plt>
   15464:	mov	r6, r0
   15468:	mov	r0, r4
   1546c:	bl	154c8 <__assert_fail@plt+0x4114>
   15470:	cmp	r6, #0
   15474:	beq	15494 <__assert_fail@plt+0x40e0>
   15478:	mvn	r4, #0
   1547c:	cmp	r0, #0
   15480:	bne	154c0 <__assert_fail@plt+0x410c>
   15484:	bl	112ac <__errno_location@plt>
   15488:	mov	r1, #0
   1548c:	str	r1, [r0]
   15490:	b	154c0 <__assert_fail@plt+0x410c>
   15494:	cmp	r0, #0
   15498:	mov	r4, r0
   1549c:	mvnne	r4, #0
   154a0:	cmp	r5, #0
   154a4:	bne	154c0 <__assert_fail@plt+0x410c>
   154a8:	cmp	r0, #0
   154ac:	beq	154c0 <__assert_fail@plt+0x410c>
   154b0:	bl	112ac <__errno_location@plt>
   154b4:	ldr	r0, [r0]
   154b8:	subs	r4, r0, #9
   154bc:	mvnne	r4, #0
   154c0:	mov	r0, r4
   154c4:	pop	{r4, r5, r6, sl, fp, pc}
   154c8:	push	{r4, r5, r6, sl, fp, lr}
   154cc:	add	fp, sp, #16
   154d0:	sub	sp, sp, #8
   154d4:	mov	r4, r0
   154d8:	bl	112f4 <fileno@plt>
   154dc:	cmn	r0, #1
   154e0:	ble	15554 <__assert_fail@plt+0x41a0>
   154e4:	mov	r0, r4
   154e8:	bl	11240 <__freading@plt>
   154ec:	cmp	r0, #0
   154f0:	beq	1551c <__assert_fail@plt+0x4168>
   154f4:	mov	r0, r4
   154f8:	bl	112f4 <fileno@plt>
   154fc:	mov	r1, #1
   15500:	mov	r2, #0
   15504:	mov	r3, #0
   15508:	str	r1, [sp]
   1550c:	bl	111c8 <lseek64@plt>
   15510:	and	r0, r0, r1
   15514:	cmn	r0, #1
   15518:	beq	15554 <__assert_fail@plt+0x41a0>
   1551c:	mov	r0, r4
   15520:	bl	15564 <__assert_fail@plt+0x41b0>
   15524:	cmp	r0, #0
   15528:	beq	15554 <__assert_fail@plt+0x41a0>
   1552c:	bl	112ac <__errno_location@plt>
   15530:	ldr	r6, [r0]
   15534:	mov	r5, r0
   15538:	mov	r0, r4
   1553c:	bl	1130c <fclose@plt>
   15540:	cmp	r6, #0
   15544:	strne	r6, [r5]
   15548:	mvnne	r0, #0
   1554c:	sub	sp, fp, #16
   15550:	pop	{r4, r5, r6, sl, fp, pc}
   15554:	mov	r0, r4
   15558:	sub	sp, fp, #16
   1555c:	pop	{r4, r5, r6, sl, fp, lr}
   15560:	b	1130c <fclose@plt>
   15564:	push	{r4, sl, fp, lr}
   15568:	add	fp, sp, #8
   1556c:	sub	sp, sp, #8
   15570:	mov	r4, r0
   15574:	cmp	r0, #0
   15578:	beq	155b0 <__assert_fail@plt+0x41fc>
   1557c:	mov	r0, r4
   15580:	bl	11240 <__freading@plt>
   15584:	cmp	r0, #0
   15588:	beq	155b0 <__assert_fail@plt+0x41fc>
   1558c:	ldrb	r0, [r4, #1]
   15590:	tst	r0, #1
   15594:	beq	155b0 <__assert_fail@plt+0x41fc>
   15598:	mov	r0, #1
   1559c:	mov	r2, #0
   155a0:	mov	r3, #0
   155a4:	str	r0, [sp]
   155a8:	mov	r0, r4
   155ac:	bl	155c0 <__assert_fail@plt+0x420c>
   155b0:	mov	r0, r4
   155b4:	sub	sp, fp, #8
   155b8:	pop	{r4, sl, fp, lr}
   155bc:	b	11138 <fflush@plt>
   155c0:	push	{r4, r5, r6, r7, fp, lr}
   155c4:	add	fp, sp, #16
   155c8:	sub	sp, sp, #8
   155cc:	mov	r4, r0
   155d0:	ldr	r0, [r0, #4]
   155d4:	mov	r5, r3
   155d8:	mov	r6, r2
   155dc:	ldr	r1, [r4, #8]
   155e0:	cmp	r1, r0
   155e4:	bne	15600 <__assert_fail@plt+0x424c>
   155e8:	ldrd	r0, [r4, #16]
   155ec:	cmp	r1, r0
   155f0:	bne	15600 <__assert_fail@plt+0x424c>
   155f4:	ldr	r0, [r4, #36]	; 0x24
   155f8:	cmp	r0, #0
   155fc:	beq	15618 <__assert_fail@plt+0x4264>
   15600:	mov	r0, r4
   15604:	mov	r2, r6
   15608:	mov	r3, r5
   1560c:	sub	sp, fp, #16
   15610:	pop	{r4, r5, r6, r7, fp, lr}
   15614:	b	11318 <fseeko64@plt>
   15618:	ldr	r7, [fp, #8]
   1561c:	mov	r0, r4
   15620:	bl	112f4 <fileno@plt>
   15624:	mov	r2, r6
   15628:	mov	r3, r5
   1562c:	str	r7, [sp]
   15630:	bl	111c8 <lseek64@plt>
   15634:	and	r2, r0, r1
   15638:	cmn	r2, #1
   1563c:	beq	15658 <__assert_fail@plt+0x42a4>
   15640:	strd	r0, [r4, #80]	; 0x50
   15644:	ldr	r0, [r4]
   15648:	bic	r0, r0, #16
   1564c:	str	r0, [r4]
   15650:	mov	r0, #0
   15654:	b	1565c <__assert_fail@plt+0x42a8>
   15658:	mvn	r0, #0
   1565c:	sub	sp, fp, #16
   15660:	pop	{r4, r5, r6, r7, fp, pc}
   15664:	push	{fp, lr}
   15668:	mov	fp, sp
   1566c:	mov	r0, #14
   15670:	bl	11348 <nl_langinfo@plt>
   15674:	movw	r1, #23807	; 0x5cff
   15678:	cmp	r0, #0
   1567c:	movt	r1, #1
   15680:	movne	r1, r0
   15684:	movw	r0, #27000	; 0x6978
   15688:	ldrb	r2, [r1]
   1568c:	movt	r0, #1
   15690:	cmp	r2, #0
   15694:	movne	r0, r1
   15698:	pop	{fp, pc}
   1569c:	push	{r4, r5, r6, r7, fp, lr}
   156a0:	add	fp, sp, #16
   156a4:	sub	sp, sp, #8
   156a8:	cmp	r0, #0
   156ac:	add	r5, sp, #4
   156b0:	mov	r7, r2
   156b4:	mov	r4, r1
   156b8:	movne	r5, r0
   156bc:	mov	r0, r5
   156c0:	bl	11204 <mbrtowc@plt>
   156c4:	mov	r6, r0
   156c8:	cmp	r7, #0
   156cc:	beq	156f4 <__assert_fail@plt+0x4340>
   156d0:	cmn	r6, #2
   156d4:	bcc	156f4 <__assert_fail@plt+0x4340>
   156d8:	mov	r0, #0
   156dc:	bl	1594c <__assert_fail@plt+0x4598>
   156e0:	cmp	r0, #0
   156e4:	bne	156f4 <__assert_fail@plt+0x4340>
   156e8:	ldrb	r0, [r4]
   156ec:	mov	r6, #1
   156f0:	str	r0, [r5]
   156f4:	mov	r0, r6
   156f8:	sub	sp, fp, #16
   156fc:	pop	{r4, r5, r6, r7, fp, pc}
   15700:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15704:	add	fp, sp, #28
   15708:	sub	sp, sp, #12
   1570c:	mov	r5, r2
   15710:	mov	sl, r1
   15714:	cmp	r0, #0
   15718:	beq	157a0 <__assert_fail@plt+0x43ec>
   1571c:	mov	r7, r0
   15720:	mov	r8, #10
   15724:	mov	r0, #0
   15728:	mov	r1, #40	; 0x28
   1572c:	str	r8, [sp, #8]
   15730:	bl	153f8 <__assert_fail@plt+0x4044>
   15734:	mvn	r9, #0
   15738:	cmp	r0, #0
   1573c:	beq	158d0 <__assert_fail@plt+0x451c>
   15740:	str	r5, [sp, #4]
   15744:	mov	r4, r0
   15748:	add	r5, sp, #8
   1574c:	mov	r0, r7
   15750:	mov	r1, sl
   15754:	mov	r2, r4
   15758:	mov	r3, r5
   1575c:	bl	112d0 <getgrouplist@plt>
   15760:	ldr	r1, [sp, #8]
   15764:	mov	r6, r0
   15768:	cmn	r0, #1
   1576c:	bgt	1577c <__assert_fail@plt+0x43c8>
   15770:	cmp	r8, r1
   15774:	lsleq	r1, r8, #1
   15778:	streq	r1, [sp, #8]
   1577c:	mov	r0, r4
   15780:	bl	158e4 <__assert_fail@plt+0x4530>
   15784:	cmp	r0, #0
   15788:	beq	15868 <__assert_fail@plt+0x44b4>
   1578c:	cmn	r6, #1
   15790:	bgt	15870 <__assert_fail@plt+0x44bc>
   15794:	ldr	r8, [sp, #8]
   15798:	mov	r4, r0
   1579c:	b	1574c <__assert_fail@plt+0x4398>
   157a0:	mov	r0, #0
   157a4:	mov	r1, #0
   157a8:	bl	11354 <getgroups@plt>
   157ac:	cmn	r0, #1
   157b0:	str	r0, [sp, #8]
   157b4:	ble	15880 <__assert_fail@plt+0x44cc>
   157b8:	mov	r4, r0
   157bc:	cmn	sl, #1
   157c0:	bne	157cc <__assert_fail@plt+0x4418>
   157c4:	cmp	r4, #0
   157c8:	bne	157d4 <__assert_fail@plt+0x4420>
   157cc:	add	r4, r4, #1
   157d0:	str	r4, [sp, #8]
   157d4:	mov	r0, #0
   157d8:	mov	r1, r4
   157dc:	bl	158e4 <__assert_fail@plt+0x4530>
   157e0:	cmp	r0, #0
   157e4:	beq	158c0 <__assert_fail@plt+0x450c>
   157e8:	mvn	r9, #0
   157ec:	mov	r7, r0
   157f0:	subs	r1, sl, r9
   157f4:	movwne	r1, #1
   157f8:	sub	r0, r4, r1
   157fc:	add	r1, r7, r1, lsl #2
   15800:	bl	11354 <getgroups@plt>
   15804:	cmn	r0, #1
   15808:	ble	158c8 <__assert_fail@plt+0x4514>
   1580c:	cmn	sl, #1
   15810:	addne	r0, r0, #1
   15814:	strne	sl, [r7]
   15818:	str	r7, [r5]
   1581c:	cmp	r0, #2
   15820:	blt	158dc <__assert_fail@plt+0x4528>
   15824:	mov	r2, r7
   15828:	add	r1, r7, r0, lsl #2
   1582c:	mov	r9, r0
   15830:	ldr	r6, [r2], #4
   15834:	mov	r3, r6
   15838:	ldr	r0, [r2]
   1583c:	cmp	r0, r6
   15840:	cmpne	r0, r3
   15844:	bne	15850 <__assert_fail@plt+0x449c>
   15848:	sub	r9, r9, #1
   1584c:	b	15858 <__assert_fail@plt+0x44a4>
   15850:	str	r0, [r7, #4]!
   15854:	mov	r3, r0
   15858:	add	r2, r2, #4
   1585c:	cmp	r2, r1
   15860:	bcc	15838 <__assert_fail@plt+0x4484>
   15864:	b	158d0 <__assert_fail@plt+0x451c>
   15868:	mov	r0, r4
   1586c:	b	158cc <__assert_fail@plt+0x4518>
   15870:	ldr	r1, [sp, #4]
   15874:	str	r0, [r1]
   15878:	ldr	r9, [sp, #8]
   1587c:	b	158d0 <__assert_fail@plt+0x451c>
   15880:	bl	112ac <__errno_location@plt>
   15884:	ldr	r0, [r0]
   15888:	mvn	r9, #0
   1588c:	cmp	r0, #38	; 0x26
   15890:	bne	158d0 <__assert_fail@plt+0x451c>
   15894:	mov	r0, #0
   15898:	mov	r1, #4
   1589c:	bl	153f8 <__assert_fail@plt+0x4044>
   158a0:	cmp	r0, #0
   158a4:	beq	158d0 <__assert_fail@plt+0x451c>
   158a8:	str	r0, [r5]
   158ac:	str	sl, [r0]
   158b0:	mvn	r0, #0
   158b4:	subs	r9, sl, r0
   158b8:	movwne	r9, #1
   158bc:	b	158d0 <__assert_fail@plt+0x451c>
   158c0:	mvn	r9, #0
   158c4:	b	158d0 <__assert_fail@plt+0x451c>
   158c8:	mov	r0, r7
   158cc:	bl	12650 <__assert_fail@plt+0x129c>
   158d0:	mov	r0, r9
   158d4:	sub	sp, fp, #28
   158d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158dc:	mov	r9, r0
   158e0:	b	158d0 <__assert_fail@plt+0x451c>
   158e4:	cmp	r1, #536870912	; 0x20000000
   158e8:	bcc	15908 <__assert_fail@plt+0x4554>
   158ec:	push	{fp, lr}
   158f0:	mov	fp, sp
   158f4:	bl	112ac <__errno_location@plt>
   158f8:	mov	r1, #12
   158fc:	str	r1, [r0]
   15900:	mov	r0, #0
   15904:	pop	{fp, pc}
   15908:	lsl	r1, r1, #2
   1590c:	b	153f8 <__assert_fail@plt+0x4044>
   15910:	cmp	r2, #0
   15914:	beq	15944 <__assert_fail@plt+0x4590>
   15918:	mvn	r3, #0
   1591c:	udiv	r3, r3, r2
   15920:	cmp	r3, r1
   15924:	bcs	15944 <__assert_fail@plt+0x4590>
   15928:	push	{fp, lr}
   1592c:	mov	fp, sp
   15930:	bl	112ac <__errno_location@plt>
   15934:	mov	r1, #12
   15938:	str	r1, [r0]
   1593c:	mov	r0, #0
   15940:	pop	{fp, pc}
   15944:	mul	r1, r2, r1
   15948:	b	153f8 <__assert_fail@plt+0x4044>
   1594c:	push	{r4, sl, fp, lr}
   15950:	add	fp, sp, #8
   15954:	sub	sp, sp, #264	; 0x108
   15958:	add	r1, sp, #7
   1595c:	movw	r2, #257	; 0x101
   15960:	bl	159b8 <__assert_fail@plt+0x4604>
   15964:	mov	r4, #0
   15968:	cmp	r0, #0
   1596c:	bne	159ac <__assert_fail@plt+0x45f8>
   15970:	movw	r1, #27006	; 0x697e
   15974:	add	r0, sp, #7
   15978:	mov	r2, #2
   1597c:	movt	r1, #1
   15980:	bl	1127c <bcmp@plt>
   15984:	cmp	r0, #0
   15988:	beq	159ac <__assert_fail@plt+0x45f8>
   1598c:	movw	r1, #27008	; 0x6980
   15990:	add	r0, sp, #7
   15994:	mov	r2, #6
   15998:	movt	r1, #1
   1599c:	bl	1127c <bcmp@plt>
   159a0:	cmp	r0, #0
   159a4:	mov	r4, r0
   159a8:	movwne	r4, #1
   159ac:	mov	r0, r4
   159b0:	sub	sp, fp, #8
   159b4:	pop	{r4, sl, fp, pc}
   159b8:	push	{r4, r5, r6, r7, fp, lr}
   159bc:	add	fp, sp, #16
   159c0:	mov	r4, r1
   159c4:	mov	r1, #0
   159c8:	mov	r6, r2
   159cc:	bl	11324 <setlocale@plt>
   159d0:	cmp	r0, #0
   159d4:	beq	15a00 <__assert_fail@plt+0x464c>
   159d8:	mov	r7, r0
   159dc:	bl	11294 <strlen@plt>
   159e0:	cmp	r0, r6
   159e4:	bcs	15a14 <__assert_fail@plt+0x4660>
   159e8:	add	r2, r0, #1
   159ec:	mov	r0, r4
   159f0:	mov	r1, r7
   159f4:	bl	11168 <memcpy@plt>
   159f8:	mov	r5, #0
   159fc:	b	15a3c <__assert_fail@plt+0x4688>
   15a00:	cmp	r6, #0
   15a04:	mov	r5, #22
   15a08:	movne	r0, #0
   15a0c:	strbne	r0, [r4]
   15a10:	b	15a3c <__assert_fail@plt+0x4688>
   15a14:	mov	r5, #34	; 0x22
   15a18:	cmp	r6, #0
   15a1c:	beq	15a3c <__assert_fail@plt+0x4688>
   15a20:	sub	r6, r6, #1
   15a24:	mov	r0, r4
   15a28:	mov	r1, r7
   15a2c:	mov	r2, r6
   15a30:	bl	11168 <memcpy@plt>
   15a34:	mov	r0, #0
   15a38:	strb	r0, [r4, r6]
   15a3c:	mov	r0, r5
   15a40:	pop	{r4, r5, r6, r7, fp, pc}
   15a44:	mov	r1, #0
   15a48:	b	11324 <setlocale@plt>
   15a4c:	cmp	r3, #0
   15a50:	cmpeq	r2, #0
   15a54:	bne	15a6c <__assert_fail@plt+0x46b8>
   15a58:	cmp	r1, #0
   15a5c:	cmpeq	r0, #0
   15a60:	mvnne	r1, #0
   15a64:	mvnne	r0, #0
   15a68:	b	15a88 <__assert_fail@plt+0x46d4>
   15a6c:	sub	sp, sp, #8
   15a70:	push	{sp, lr}
   15a74:	bl	15a98 <__assert_fail@plt+0x46e4>
   15a78:	ldr	lr, [sp, #4]
   15a7c:	add	sp, sp, #8
   15a80:	pop	{r2, r3}
   15a84:	bx	lr
   15a88:	push	{r1, lr}
   15a8c:	mov	r0, #8
   15a90:	bl	110fc <raise@plt>
   15a94:	pop	{r1, pc}
   15a98:	cmp	r1, r3
   15a9c:	cmpeq	r0, r2
   15aa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15aa4:	mov	r4, r0
   15aa8:	movcc	r0, #0
   15aac:	mov	r5, r1
   15ab0:	ldr	lr, [sp, #36]	; 0x24
   15ab4:	movcc	r1, r0
   15ab8:	bcc	15bb4 <__assert_fail@plt+0x4800>
   15abc:	cmp	r3, #0
   15ac0:	clzeq	ip, r2
   15ac4:	clzne	ip, r3
   15ac8:	addeq	ip, ip, #32
   15acc:	cmp	r5, #0
   15ad0:	clzeq	r1, r4
   15ad4:	addeq	r1, r1, #32
   15ad8:	clzne	r1, r5
   15adc:	sub	ip, ip, r1
   15ae0:	sub	sl, ip, #32
   15ae4:	lsl	r9, r3, ip
   15ae8:	rsb	fp, ip, #32
   15aec:	orr	r9, r9, r2, lsl sl
   15af0:	orr	r9, r9, r2, lsr fp
   15af4:	lsl	r8, r2, ip
   15af8:	cmp	r5, r9
   15afc:	cmpeq	r4, r8
   15b00:	movcc	r0, #0
   15b04:	movcc	r1, r0
   15b08:	bcc	15b24 <__assert_fail@plt+0x4770>
   15b0c:	mov	r0, #1
   15b10:	subs	r4, r4, r8
   15b14:	lsl	r1, r0, sl
   15b18:	orr	r1, r1, r0, lsr fp
   15b1c:	lsl	r0, r0, ip
   15b20:	sbc	r5, r5, r9
   15b24:	cmp	ip, #0
   15b28:	beq	15bb4 <__assert_fail@plt+0x4800>
   15b2c:	lsr	r6, r8, #1
   15b30:	orr	r6, r6, r9, lsl #31
   15b34:	lsr	r7, r9, #1
   15b38:	mov	r2, ip
   15b3c:	b	15b60 <__assert_fail@plt+0x47ac>
   15b40:	subs	r3, r4, r6
   15b44:	sbc	r8, r5, r7
   15b48:	adds	r3, r3, r3
   15b4c:	adc	r8, r8, r8
   15b50:	adds	r4, r3, #1
   15b54:	adc	r5, r8, #0
   15b58:	subs	r2, r2, #1
   15b5c:	beq	15b7c <__assert_fail@plt+0x47c8>
   15b60:	cmp	r5, r7
   15b64:	cmpeq	r4, r6
   15b68:	bcs	15b40 <__assert_fail@plt+0x478c>
   15b6c:	adds	r4, r4, r4
   15b70:	adc	r5, r5, r5
   15b74:	subs	r2, r2, #1
   15b78:	bne	15b60 <__assert_fail@plt+0x47ac>
   15b7c:	lsr	r3, r4, ip
   15b80:	orr	r3, r3, r5, lsl fp
   15b84:	lsr	r2, r5, ip
   15b88:	orr	r3, r3, r5, lsr sl
   15b8c:	adds	r0, r0, r4
   15b90:	mov	r4, r3
   15b94:	lsl	r3, r2, ip
   15b98:	orr	r3, r3, r4, lsl sl
   15b9c:	lsl	ip, r4, ip
   15ba0:	orr	r3, r3, r4, lsr fp
   15ba4:	adc	r1, r1, r5
   15ba8:	subs	r0, r0, ip
   15bac:	mov	r5, r2
   15bb0:	sbc	r1, r1, r3
   15bb4:	cmp	lr, #0
   15bb8:	strdne	r4, [lr]
   15bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15bc4:	mov	r7, r0
   15bc8:	ldr	r6, [pc, #72]	; 15c18 <__assert_fail@plt+0x4864>
   15bcc:	ldr	r5, [pc, #72]	; 15c1c <__assert_fail@plt+0x4868>
   15bd0:	add	r6, pc, r6
   15bd4:	add	r5, pc, r5
   15bd8:	sub	r6, r6, r5
   15bdc:	mov	r8, r1
   15be0:	mov	r9, r2
   15be4:	bl	110b8 <calloc@plt-0x20>
   15be8:	asrs	r6, r6, #2
   15bec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15bf0:	mov	r4, #0
   15bf4:	add	r4, r4, #1
   15bf8:	ldr	r3, [r5], #4
   15bfc:	mov	r2, r9
   15c00:	mov	r1, r8
   15c04:	mov	r0, r7
   15c08:	blx	r3
   15c0c:	cmp	r6, r4
   15c10:	bne	15bf4 <__assert_fail@plt+0x4840>
   15c14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c18:	andeq	r1, r1, ip, lsr #6
   15c1c:	andeq	r1, r1, r4, lsr #6
   15c20:	bx	lr
   15c24:	ldr	r3, [pc, #12]	; 15c38 <__assert_fail@plt+0x4884>
   15c28:	mov	r1, #0
   15c2c:	add	r3, pc, r3
   15c30:	ldr	r2, [r3]
   15c34:	b	112b8 <__cxa_atexit@plt>
   15c38:	ldrdeq	r1, [r1], -r8

Disassembly of section .fini:

00015c3c <.fini>:
   15c3c:	push	{r3, lr}
   15c40:	pop	{r3, pc}
