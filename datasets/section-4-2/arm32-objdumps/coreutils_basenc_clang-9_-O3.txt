
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010e04 <.init>:
   10e04:	push	{r3, lr}
   10e08:	bl	110d0 <__assert_fail@plt+0x48>
   10e0c:	pop	{r3, pc}

Disassembly of section .plt:

00010e10 <calloc@plt-0x14>:
   10e10:	push	{lr}		; (str lr, [sp, #-4]!)
   10e14:	ldr	lr, [pc, #4]	; 10e20 <calloc@plt-0x4>
   10e18:	add	lr, pc, lr
   10e1c:	ldr	pc, [lr, #8]!
   10e20:	andeq	sl, r1, r0, ror #3

00010e24 <calloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #106496	; 0x1a000
   10e2c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e30 <fputs_unlocked@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #106496	; 0x1a000
   10e38:	ldr	pc, [ip, #472]!	; 0x1d8

00010e3c <raise@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #106496	; 0x1a000
   10e44:	ldr	pc, [ip, #464]!	; 0x1d0

00010e48 <strcmp@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #106496	; 0x1a000
   10e50:	ldr	pc, [ip, #456]!	; 0x1c8

00010e54 <posix_fadvise64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #106496	; 0x1a000
   10e5c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e60 <fflush@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #106496	; 0x1a000
   10e68:	ldr	pc, [ip, #440]!	; 0x1b8

00010e6c <memmove@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #106496	; 0x1a000
   10e74:	ldr	pc, [ip, #432]!	; 0x1b0

00010e78 <free@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #106496	; 0x1a000
   10e80:	ldr	pc, [ip, #424]!	; 0x1a8

00010e84 <_exit@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #106496	; 0x1a000
   10e8c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e90 <memcpy@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #106496	; 0x1a000
   10e98:	ldr	pc, [ip, #408]!	; 0x198

00010e9c <mbsinit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #106496	; 0x1a000
   10ea4:	ldr	pc, [ip, #400]!	; 0x190

00010ea8 <fwrite_unlocked@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #106496	; 0x1a000
   10eb0:	ldr	pc, [ip, #392]!	; 0x188

00010eb4 <dcgettext@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #106496	; 0x1a000
   10ebc:	ldr	pc, [ip, #384]!	; 0x180

00010ec0 <realloc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #106496	; 0x1a000
   10ec8:	ldr	pc, [ip, #376]!	; 0x178

00010ecc <textdomain@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #106496	; 0x1a000
   10ed4:	ldr	pc, [ip, #368]!	; 0x170

00010ed8 <iswprint@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #106496	; 0x1a000
   10ee0:	ldr	pc, [ip, #360]!	; 0x168

00010ee4 <fwrite@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #106496	; 0x1a000
   10eec:	ldr	pc, [ip, #352]!	; 0x160

00010ef0 <lseek64@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #106496	; 0x1a000
   10ef8:	ldr	pc, [ip, #344]!	; 0x158

00010efc <__ctype_get_mb_cur_max@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #106496	; 0x1a000
   10f04:	ldr	pc, [ip, #336]!	; 0x150

00010f08 <__fpending@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #106496	; 0x1a000
   10f10:	ldr	pc, [ip, #328]!	; 0x148

00010f14 <mbrtowc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #106496	; 0x1a000
   10f1c:	ldr	pc, [ip, #320]!	; 0x140

00010f20 <error@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #106496	; 0x1a000
   10f28:	ldr	pc, [ip, #312]!	; 0x138

00010f2c <malloc@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #106496	; 0x1a000
   10f34:	ldr	pc, [ip, #304]!	; 0x130

00010f38 <__libc_start_main@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #106496	; 0x1a000
   10f40:	ldr	pc, [ip, #296]!	; 0x128

00010f44 <__freading@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #106496	; 0x1a000
   10f4c:	ldr	pc, [ip, #288]!	; 0x120

00010f50 <__gmon_start__@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #106496	; 0x1a000
   10f58:	ldr	pc, [ip, #280]!	; 0x118

00010f5c <getopt_long@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #106496	; 0x1a000
   10f64:	ldr	pc, [ip, #272]!	; 0x110

00010f68 <__ctype_b_loc@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #106496	; 0x1a000
   10f70:	ldr	pc, [ip, #264]!	; 0x108

00010f74 <exit@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #106496	; 0x1a000
   10f7c:	ldr	pc, [ip, #256]!	; 0x100

00010f80 <bcmp@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #106496	; 0x1a000
   10f88:	ldr	pc, [ip, #248]!	; 0xf8

00010f8c <strlen@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #106496	; 0x1a000
   10f94:	ldr	pc, [ip, #240]!	; 0xf0

00010f98 <strchr@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #106496	; 0x1a000
   10fa0:	ldr	pc, [ip, #232]!	; 0xe8

00010fa4 <__errno_location@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #106496	; 0x1a000
   10fac:	ldr	pc, [ip, #224]!	; 0xe0

00010fb0 <__cxa_atexit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #106496	; 0x1a000
   10fb8:	ldr	pc, [ip, #216]!	; 0xd8

00010fbc <memset@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #106496	; 0x1a000
   10fc4:	ldr	pc, [ip, #208]!	; 0xd0

00010fc8 <__printf_chk@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #106496	; 0x1a000
   10fd0:	ldr	pc, [ip, #200]!	; 0xc8

00010fd4 <fileno@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #106496	; 0x1a000
   10fdc:	ldr	pc, [ip, #192]!	; 0xc0

00010fe0 <__fprintf_chk@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #106496	; 0x1a000
   10fe8:	ldr	pc, [ip, #184]!	; 0xb8

00010fec <memchr@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #106496	; 0x1a000
   10ff4:	ldr	pc, [ip, #176]!	; 0xb0

00010ff8 <fclose@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #106496	; 0x1a000
   11000:	ldr	pc, [ip, #168]!	; 0xa8

00011004 <fseeko64@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #106496	; 0x1a000
   1100c:	ldr	pc, [ip, #160]!	; 0xa0

00011010 <__overflow@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #106496	; 0x1a000
   11018:	ldr	pc, [ip, #152]!	; 0x98

0001101c <setlocale@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #106496	; 0x1a000
   11024:	ldr	pc, [ip, #144]!	; 0x90

00011028 <strrchr@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #106496	; 0x1a000
   11030:	ldr	pc, [ip, #136]!	; 0x88

00011034 <nl_langinfo@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #106496	; 0x1a000
   1103c:	ldr	pc, [ip, #128]!	; 0x80

00011040 <__strtoll_internal@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #106496	; 0x1a000
   11048:	ldr	pc, [ip, #120]!	; 0x78

0001104c <fopen64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #106496	; 0x1a000
   11054:	ldr	pc, [ip, #112]!	; 0x70

00011058 <bindtextdomain@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #106496	; 0x1a000
   11060:	ldr	pc, [ip, #104]!	; 0x68

00011064 <fread_unlocked@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #106496	; 0x1a000
   1106c:	ldr	pc, [ip, #96]!	; 0x60

00011070 <strncmp@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #106496	; 0x1a000
   11078:	ldr	pc, [ip, #88]!	; 0x58

0001107c <abort@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #106496	; 0x1a000
   11084:	ldr	pc, [ip, #80]!	; 0x50

00011088 <__assert_fail@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #106496	; 0x1a000
   11090:	ldr	pc, [ip, #72]!	; 0x48

Disassembly of section .text:

00011094 <.text>:
   11094:	mov	fp, #0
   11098:	mov	lr, #0
   1109c:	pop	{r1}		; (ldr r1, [sp], #4)
   110a0:	mov	r2, sp
   110a4:	push	{r2}		; (str r2, [sp, #-4]!)
   110a8:	push	{r0}		; (str r0, [sp, #-4]!)
   110ac:	ldr	ip, [pc, #16]	; 110c4 <__assert_fail@plt+0x3c>
   110b0:	push	{ip}		; (str ip, [sp, #-4]!)
   110b4:	ldr	r0, [pc, #12]	; 110c8 <__assert_fail@plt+0x40>
   110b8:	ldr	r3, [pc, #12]	; 110cc <__assert_fail@plt+0x44>
   110bc:	bl	10f38 <__libc_start_main@plt>
   110c0:	bl	1107c <abort@plt>
   110c4:	andeq	r8, r1, r8, ror #31
   110c8:	andeq	r1, r1, r8, lsl r5
   110cc:	andeq	r8, r1, r8, lsl #31
   110d0:	ldr	r3, [pc, #20]	; 110ec <__assert_fail@plt+0x64>
   110d4:	ldr	r2, [pc, #20]	; 110f0 <__assert_fail@plt+0x68>
   110d8:	add	r3, pc, r3
   110dc:	ldr	r2, [r3, r2]
   110e0:	cmp	r2, #0
   110e4:	bxeq	lr
   110e8:	b	10f50 <__gmon_start__@plt>
   110ec:	andeq	r9, r1, r0, lsr #30
   110f0:	ldrdeq	r0, [r0], -ip
   110f4:	ldr	r0, [pc, #24]	; 11114 <__assert_fail@plt+0x8c>
   110f8:	ldr	r3, [pc, #24]	; 11118 <__assert_fail@plt+0x90>
   110fc:	cmp	r3, r0
   11100:	bxeq	lr
   11104:	ldr	r3, [pc, #16]	; 1111c <__assert_fail@plt+0x94>
   11108:	cmp	r3, #0
   1110c:	bxeq	lr
   11110:	bx	r3
   11114:	andeq	fp, r2, r0, lsr r1
   11118:	andeq	fp, r2, r0, lsr r1
   1111c:	andeq	r0, r0, r0
   11120:	ldr	r0, [pc, #36]	; 1114c <__assert_fail@plt+0xc4>
   11124:	ldr	r1, [pc, #36]	; 11150 <__assert_fail@plt+0xc8>
   11128:	sub	r1, r1, r0
   1112c:	asr	r1, r1, #2
   11130:	add	r1, r1, r1, lsr #31
   11134:	asrs	r1, r1, #1
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <__assert_fail@plt+0xcc>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	fp, r2, r0, lsr r1
   11150:	andeq	fp, r2, r0, lsr r1
   11154:	andeq	r0, r0, r0
   11158:	push	{r4, lr}
   1115c:	ldr	r4, [pc, #24]	; 1117c <__assert_fail@plt+0xf4>
   11160:	ldrb	r3, [r4]
   11164:	cmp	r3, #0
   11168:	popne	{r4, pc}
   1116c:	bl	110f4 <__assert_fail@plt+0x6c>
   11170:	mov	r3, #1
   11174:	strb	r3, [r4]
   11178:	pop	{r4, pc}
   1117c:	andeq	fp, r2, r4, asr r1
   11180:	b	11120 <__assert_fail@plt+0x98>
   11184:	push	{fp, lr}
   11188:	mov	fp, sp
   1118c:	sub	sp, sp, #56	; 0x38
   11190:	mov	r4, r0
   11194:	cmp	r0, #0
   11198:	bne	114d4 <__assert_fail@plt+0x44c>
   1119c:	movw	r1, #36923	; 0x903b
   111a0:	mov	r0, #0
   111a4:	mov	r2, #5
   111a8:	movt	r1, #1
   111ac:	bl	10eb4 <dcgettext@plt>
   111b0:	mov	r1, r0
   111b4:	movw	r0, #45428	; 0xb174
   111b8:	movt	r0, #2
   111bc:	ldr	r2, [r0]
   111c0:	mov	r0, #1
   111c4:	bl	10fc8 <__printf_chk@plt>
   111c8:	movw	r1, #36953	; 0x9059
   111cc:	mov	r0, #0
   111d0:	mov	r2, #5
   111d4:	movt	r1, #1
   111d8:	bl	10eb4 <dcgettext@plt>
   111dc:	movw	r7, #45388	; 0xb14c
   111e0:	movt	r7, #2
   111e4:	ldr	r1, [r7]
   111e8:	bl	10e30 <fputs_unlocked@plt>
   111ec:	movw	r1, #38422	; 0x9616
   111f0:	mov	r0, #0
   111f4:	mov	r2, #5
   111f8:	movt	r1, #1
   111fc:	bl	10eb4 <dcgettext@plt>
   11200:	ldr	r1, [r7]
   11204:	bl	10e30 <fputs_unlocked@plt>
   11208:	movw	r1, #38478	; 0x964e
   1120c:	mov	r0, #0
   11210:	mov	r2, #5
   11214:	movt	r1, #1
   11218:	bl	10eb4 <dcgettext@plt>
   1121c:	ldr	r1, [r7]
   11220:	bl	10e30 <fputs_unlocked@plt>
   11224:	movw	r1, #37023	; 0x909f
   11228:	mov	r0, #0
   1122c:	mov	r2, #5
   11230:	movt	r1, #1
   11234:	bl	10eb4 <dcgettext@plt>
   11238:	ldr	r1, [r7]
   1123c:	bl	10e30 <fputs_unlocked@plt>
   11240:	movw	r1, #37093	; 0x90e5
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	movt	r1, #1
   11250:	bl	10eb4 <dcgettext@plt>
   11254:	ldr	r1, [r7]
   11258:	bl	10e30 <fputs_unlocked@plt>
   1125c:	movw	r1, #37164	; 0x912c
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10eb4 <dcgettext@plt>
   11270:	ldr	r1, [r7]
   11274:	bl	10e30 <fputs_unlocked@plt>
   11278:	movw	r1, #37234	; 0x9172
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	movt	r1, #1
   11288:	bl	10eb4 <dcgettext@plt>
   1128c:	ldr	r1, [r7]
   11290:	bl	10e30 <fputs_unlocked@plt>
   11294:	movw	r1, #37308	; 0x91bc
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10eb4 <dcgettext@plt>
   112a8:	ldr	r1, [r7]
   112ac:	bl	10e30 <fputs_unlocked@plt>
   112b0:	movw	r1, #37366	; 0x91f6
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10eb4 <dcgettext@plt>
   112c4:	ldr	r1, [r7]
   112c8:	bl	10e30 <fputs_unlocked@plt>
   112cc:	movw	r1, #37440	; 0x9240
   112d0:	mov	r0, #0
   112d4:	mov	r2, #5
   112d8:	movt	r1, #1
   112dc:	bl	10eb4 <dcgettext@plt>
   112e0:	ldr	r1, [r7]
   112e4:	bl	10e30 <fputs_unlocked@plt>
   112e8:	movw	r1, #37515	; 0x928b
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	movt	r1, #1
   112f8:	bl	10eb4 <dcgettext@plt>
   112fc:	ldr	r1, [r7]
   11300:	bl	10e30 <fputs_unlocked@plt>
   11304:	movw	r1, #37757	; 0x937d
   11308:	mov	r0, #0
   1130c:	mov	r2, #5
   11310:	movt	r1, #1
   11314:	bl	10eb4 <dcgettext@plt>
   11318:	ldr	r1, [r7]
   1131c:	bl	10e30 <fputs_unlocked@plt>
   11320:	movw	r1, #37979	; 0x945b
   11324:	mov	r0, #0
   11328:	mov	r2, #5
   1132c:	movt	r1, #1
   11330:	bl	10eb4 <dcgettext@plt>
   11334:	ldr	r1, [r7]
   11338:	bl	10e30 <fputs_unlocked@plt>
   1133c:	movw	r1, #38024	; 0x9488
   11340:	mov	r0, #0
   11344:	mov	r2, #5
   11348:	movt	r1, #1
   1134c:	bl	10eb4 <dcgettext@plt>
   11350:	ldr	r1, [r7]
   11354:	bl	10e30 <fputs_unlocked@plt>
   11358:	movw	r1, #38078	; 0x94be
   1135c:	mov	r0, #0
   11360:	mov	r2, #5
   11364:	movt	r1, #1
   11368:	bl	10eb4 <dcgettext@plt>
   1136c:	ldr	r1, [r7]
   11370:	bl	10e30 <fputs_unlocked@plt>
   11374:	movw	r0, #39448	; 0x9a18
   11378:	mov	r2, #48	; 0x30
   1137c:	mov	r6, sp
   11380:	movw	r5, #38276	; 0x9584
   11384:	movt	r0, #1
   11388:	movt	r5, #1
   1138c:	add	r1, r0, #32
   11390:	add	r3, r0, #16
   11394:	vld1.64	{d18-d19}, [r0], r2
   11398:	vld1.64	{d16-d17}, [r1]
   1139c:	vld1.64	{d20-d21}, [r3]
   113a0:	vldr	d22, [r0]
   113a4:	add	r1, r6, #32
   113a8:	add	r0, r6, #16
   113ac:	vst1.64	{d16-d17}, [r1]
   113b0:	movw	r1, #38553	; 0x9699
   113b4:	vst1.64	{d20-d21}, [r0]
   113b8:	mov	r0, r6
   113bc:	movt	r1, #1
   113c0:	vst1.64	{d18-d19}, [r0], r2
   113c4:	vstr	d22, [r0]
   113c8:	mov	r0, r5
   113cc:	bl	10e48 <strcmp@plt>
   113d0:	cmp	r0, #0
   113d4:	ldrne	r1, [r6, #8]!
   113d8:	cmpne	r1, #0
   113dc:	bne	113c8 <__assert_fail@plt+0x340>
   113e0:	movw	r1, #38648	; 0x96f8
   113e4:	ldr	r6, [r6, #4]
   113e8:	mov	r0, #0
   113ec:	mov	r2, #5
   113f0:	movt	r1, #1
   113f4:	bl	10eb4 <dcgettext@plt>
   113f8:	movw	r2, #38337	; 0x95c1
   113fc:	movw	r3, #38671	; 0x970f
   11400:	mov	r1, r0
   11404:	mov	r0, #1
   11408:	movt	r2, #1
   1140c:	movt	r3, #1
   11410:	bl	10fc8 <__printf_chk@plt>
   11414:	cmp	r6, #0
   11418:	mov	r0, #5
   1141c:	mov	r1, #0
   11420:	moveq	r6, r5
   11424:	bl	1101c <setlocale@plt>
   11428:	cmp	r0, #0
   1142c:	beq	11464 <__assert_fail@plt+0x3dc>
   11430:	movw	r1, #38711	; 0x9737
   11434:	mov	r2, #3
   11438:	movt	r1, #1
   1143c:	bl	11070 <strncmp@plt>
   11440:	cmp	r0, #0
   11444:	beq	11464 <__assert_fail@plt+0x3dc>
   11448:	movw	r1, #38715	; 0x973b
   1144c:	mov	r0, #0
   11450:	mov	r2, #5
   11454:	movt	r1, #1
   11458:	bl	10eb4 <dcgettext@plt>
   1145c:	ldr	r1, [r7]
   11460:	bl	10e30 <fputs_unlocked@plt>
   11464:	movw	r1, #38786	; 0x9782
   11468:	mov	r0, #0
   1146c:	mov	r2, #5
   11470:	movt	r1, #1
   11474:	bl	10eb4 <dcgettext@plt>
   11478:	movw	r2, #38671	; 0x970f
   1147c:	mov	r1, r0
   11480:	mov	r0, #1
   11484:	mov	r3, r5
   11488:	movt	r2, #1
   1148c:	bl	10fc8 <__printf_chk@plt>
   11490:	movw	r1, #38813	; 0x979d
   11494:	mov	r0, #0
   11498:	mov	r2, #5
   1149c:	movt	r1, #1
   114a0:	bl	10eb4 <dcgettext@plt>
   114a4:	mov	r1, r0
   114a8:	movw	r0, #38581	; 0x96b5
   114ac:	movw	r3, #38863	; 0x97cf
   114b0:	cmp	r6, r5
   114b4:	mov	r2, r6
   114b8:	movt	r0, #1
   114bc:	movt	r3, #1
   114c0:	moveq	r3, r0
   114c4:	mov	r0, #1
   114c8:	bl	10fc8 <__printf_chk@plt>
   114cc:	mov	r0, r4
   114d0:	bl	10f74 <exit@plt>
   114d4:	movw	r0, #45376	; 0xb140
   114d8:	movw	r1, #36884	; 0x9014
   114dc:	mov	r2, #5
   114e0:	movt	r0, #2
   114e4:	movt	r1, #1
   114e8:	ldr	r5, [r0]
   114ec:	mov	r0, #0
   114f0:	bl	10eb4 <dcgettext@plt>
   114f4:	mov	r2, r0
   114f8:	movw	r0, #45428	; 0xb174
   114fc:	mov	r1, #1
   11500:	movt	r0, #2
   11504:	ldr	r3, [r0]
   11508:	mov	r0, r5
   1150c:	bl	10fe0 <__fprintf_chk@plt>
   11510:	mov	r0, r4
   11514:	bl	10f74 <exit@plt>
   11518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1151c:	add	fp, sp, #28
   11520:	sub	sp, sp, #36	; 0x24
   11524:	mov	r5, r0
   11528:	ldr	r0, [r1]
   1152c:	mov	r4, r1
   11530:	bl	14484 <__assert_fail@plt+0x33fc>
   11534:	movw	r1, #38863	; 0x97cf
   11538:	mov	r0, #6
   1153c:	movt	r1, #1
   11540:	bl	1101c <setlocale@plt>
   11544:	movw	r6, #38341	; 0x95c5
   11548:	movw	r1, #38283	; 0x958b
   1154c:	movt	r6, #1
   11550:	movt	r1, #1
   11554:	mov	r0, r6
   11558:	bl	11058 <bindtextdomain@plt>
   1155c:	mov	r0, r6
   11560:	bl	10ecc <textdomain@plt>
   11564:	movw	r0, #16784	; 0x4190
   11568:	movt	r0, #1
   1156c:	bl	18fec <__assert_fail@plt+0x7f64>
   11570:	mov	r0, #0
   11574:	movw	r7, #38307	; 0x95a3
   11578:	movw	r6, #39224	; 0x9938
   1157c:	mov	sl, #0
   11580:	mov	r9, #76	; 0x4c
   11584:	str	r0, [sp, #20]
   11588:	mov	r0, #0
   1158c:	movt	r7, #1
   11590:	movt	r6, #1
   11594:	str	r0, [sp, #16]
   11598:	mov	r0, #0
   1159c:	b	115ac <__assert_fail@plt+0x524>
   115a0:	mov	r0, #1
   115a4:	str	r0, [sp, #20]
   115a8:	mov	r0, r8
   115ac:	mov	r8, r0
   115b0:	mov	r0, r5
   115b4:	mov	r1, r4
   115b8:	mov	r2, r7
   115bc:	mov	r3, r6
   115c0:	str	sl, [sp]
   115c4:	bl	10f5c <getopt_long@plt>
   115c8:	sub	r1, r0, #256	; 0x100
   115cc:	cmp	r1, #8
   115d0:	bcc	115ac <__assert_fail@plt+0x524>
   115d4:	cmp	r0, #99	; 0x63
   115d8:	ble	1165c <__assert_fail@plt+0x5d4>
   115dc:	cmp	r0, #100	; 0x64
   115e0:	beq	115a0 <__assert_fail@plt+0x518>
   115e4:	cmp	r0, #105	; 0x69
   115e8:	beq	11650 <__assert_fail@plt+0x5c8>
   115ec:	cmp	r0, #119	; 0x77
   115f0:	bne	11788 <__assert_fail@plt+0x700>
   115f4:	movw	r0, #45392	; 0xb150
   115f8:	movw	r1, #38863	; 0x97cf
   115fc:	mov	r2, #10
   11600:	add	r3, sp, #24
   11604:	movt	r0, #2
   11608:	movt	r1, #1
   1160c:	ldr	r0, [r0]
   11610:	str	r1, [sp]
   11614:	mov	r1, #0
   11618:	bl	170a0 <__assert_fail@plt+0x6018>
   1161c:	cmp	r0, #1
   11620:	bhi	11890 <__assert_fail@plt+0x808>
   11624:	ldr	r1, [sp, #28]
   11628:	cmn	r1, #1
   1162c:	ble	11890 <__assert_fail@plt+0x808>
   11630:	ldr	r2, [sp, #24]
   11634:	mvn	r3, #-2147483648	; 0x80000000
   11638:	subs	r3, r3, r2
   1163c:	rscs	r1, r1, #0
   11640:	movwlt	r2, #0
   11644:	subs	r9, r0, #1
   11648:	movne	r9, r2
   1164c:	b	115a8 <__assert_fail@plt+0x520>
   11650:	mov	r0, #1
   11654:	str	r0, [sp, #16]
   11658:	b	115a8 <__assert_fail@plt+0x520>
   1165c:	cmn	r0, #3
   11660:	beq	1172c <__assert_fail@plt+0x6a4>
   11664:	cmn	r0, #2
   11668:	beq	11780 <__assert_fail@plt+0x6f8>
   1166c:	cmn	r0, #1
   11670:	bne	11788 <__assert_fail@plt+0x700>
   11674:	sub	r0, r8, #256	; 0x100
   11678:	cmp	r0, #8
   1167c:	bcs	11790 <__assert_fail@plt+0x708>
   11680:	movw	r1, #39892	; 0x9bd4
   11684:	movw	r3, #39860	; 0x9bb4
   11688:	movw	r7, #39828	; 0x9b94
   1168c:	movw	r6, #39796	; 0x9b74
   11690:	movw	r2, #45400	; 0xb158
   11694:	movt	r1, #1
   11698:	movt	r3, #1
   1169c:	movt	r7, #1
   116a0:	movt	r6, #1
   116a4:	movt	r2, #2
   116a8:	ldr	ip, [r1, r0, lsl #2]
   116ac:	movw	r1, #39764	; 0x9b54
   116b0:	ldr	r3, [r3, r0, lsl #2]
   116b4:	ldr	r7, [r7, r0, lsl #2]
   116b8:	ldr	r6, [r6, r0, lsl #2]
   116bc:	movt	r1, #1
   116c0:	ldr	r0, [r1, r0, lsl #2]
   116c4:	stm	r2, {r0, r6, r7}
   116c8:	movw	r6, #45368	; 0xb138
   116cc:	str	r3, [r2, #12]
   116d0:	str	ip, [r2, #16]
   116d4:	movt	r6, #2
   116d8:	ldr	r0, [r6]
   116dc:	sub	r1, r5, r0
   116e0:	cmp	r1, #2
   116e4:	blt	117bc <__assert_fail@plt+0x734>
   116e8:	movw	r1, #38402	; 0x9602
   116ec:	mov	r0, #0
   116f0:	mov	r2, #5
   116f4:	movt	r1, #1
   116f8:	bl	10eb4 <dcgettext@plt>
   116fc:	mov	r5, r0
   11700:	ldr	r0, [r6]
   11704:	add	r0, r4, r0, lsl #2
   11708:	ldr	r0, [r0, #4]
   1170c:	bl	16448 <__assert_fail@plt+0x53c0>
   11710:	mov	r3, r0
   11714:	mov	r0, #0
   11718:	mov	r1, #0
   1171c:	mov	r2, r5
   11720:	bl	10f20 <error@plt>
   11724:	mov	r0, #1
   11728:	bl	11184 <__assert_fail@plt+0xfc>
   1172c:	movw	r0, #45288	; 0xb0e8
   11730:	movw	r2, #38367	; 0x95df
   11734:	mov	r1, #0
   11738:	movw	r7, #38351	; 0x95cf
   1173c:	movt	r0, #2
   11740:	movt	r2, #1
   11744:	str	r1, [sp, #8]
   11748:	movw	r1, #38276	; 0x9584
   1174c:	movt	r7, #1
   11750:	movt	r1, #1
   11754:	ldr	r3, [r0]
   11758:	movw	r0, #45388	; 0xb14c
   1175c:	str	r2, [sp, #4]
   11760:	movw	r2, #38337	; 0x95c1
   11764:	str	r7, [sp]
   11768:	movt	r0, #2
   1176c:	movt	r2, #1
   11770:	ldr	r0, [r0]
   11774:	bl	168ec <__assert_fail@plt+0x5864>
   11778:	mov	r0, #0
   1177c:	bl	10f74 <exit@plt>
   11780:	mov	r0, #0
   11784:	bl	11184 <__assert_fail@plt+0xfc>
   11788:	mov	r0, #1
   1178c:	bl	11184 <__assert_fail@plt+0xfc>
   11790:	movw	r1, #38380	; 0x95ec
   11794:	mov	r0, #0
   11798:	mov	r2, #5
   1179c:	movt	r1, #1
   117a0:	bl	10eb4 <dcgettext@plt>
   117a4:	mov	r2, r0
   117a8:	mov	r0, #0
   117ac:	mov	r1, #0
   117b0:	bl	10f20 <error@plt>
   117b4:	mov	r0, #1
   117b8:	bl	11184 <__assert_fail@plt+0xfc>
   117bc:	cmp	r0, r5
   117c0:	bge	117cc <__assert_fail@plt+0x744>
   117c4:	ldr	r4, [r4, r0, lsl #2]
   117c8:	b	117d4 <__assert_fail@plt+0x74c>
   117cc:	movw	r4, #40629	; 0x9eb5
   117d0:	movt	r4, #1
   117d4:	movw	r1, #40629	; 0x9eb5
   117d8:	mov	r0, r4
   117dc:	movt	r1, #1
   117e0:	bl	10e48 <strcmp@plt>
   117e4:	cmp	r0, #0
   117e8:	bne	117fc <__assert_fail@plt+0x774>
   117ec:	movw	r0, #45384	; 0xb148
   117f0:	movt	r0, #2
   117f4:	ldr	r5, [r0]
   117f8:	b	11848 <__assert_fail@plt+0x7c0>
   117fc:	movw	r1, #38419	; 0x9613
   11800:	mov	r0, r4
   11804:	movt	r1, #1
   11808:	bl	1104c <fopen64@plt>
   1180c:	mov	r5, r0
   11810:	cmp	r0, #0
   11814:	bne	11848 <__assert_fail@plt+0x7c0>
   11818:	bl	10fa4 <__errno_location@plt>
   1181c:	ldr	r5, [r0]
   11820:	mov	r0, #0
   11824:	mov	r1, #3
   11828:	mov	r2, r4
   1182c:	bl	1619c <__assert_fail@plt+0x5114>
   11830:	movw	r2, #38316	; 0x95ac
   11834:	mov	r3, r0
   11838:	mov	r0, #1
   1183c:	mov	r1, r5
   11840:	movt	r2, #1
   11844:	bl	10f20 <error@plt>
   11848:	mov	r0, r5
   1184c:	mov	r1, #2
   11850:	bl	14280 <__assert_fail@plt+0x31f8>
   11854:	movw	r0, #45388	; 0xb14c
   11858:	movt	r0, #2
   1185c:	ldr	r2, [r0]
   11860:	ldr	r0, [sp, #20]
   11864:	tst	r0, #1
   11868:	beq	11880 <__assert_fail@plt+0x7f8>
   1186c:	ldr	r0, [sp, #16]
   11870:	mov	r1, r4
   11874:	and	r3, r0, #1
   11878:	mov	r0, r5
   1187c:	bl	125a4 <__assert_fail@plt+0x151c>
   11880:	mov	r0, r5
   11884:	mov	r1, r4
   11888:	mov	r3, r9
   1188c:	bl	12848 <__assert_fail@plt+0x17c0>
   11890:	movw	r1, #38319	; 0x95af
   11894:	mov	r0, #0
   11898:	mov	r2, #5
   1189c:	movt	r1, #1
   118a0:	bl	10eb4 <dcgettext@plt>
   118a4:	mov	r4, r0
   118a8:	movw	r0, #45392	; 0xb150
   118ac:	movt	r0, #2
   118b0:	ldr	r0, [r0]
   118b4:	bl	16448 <__assert_fail@plt+0x53c0>
   118b8:	movw	r2, #38312	; 0x95a8
   118bc:	str	r0, [sp]
   118c0:	mov	r0, #1
   118c4:	mov	r1, #0
   118c8:	mov	r3, r4
   118cc:	movt	r2, #1
   118d0:	bl	10f20 <error@plt>
   118d4:	movw	r1, #21846	; 0x5556
   118d8:	add	r0, r0, #2
   118dc:	movt	r1, #21845	; 0x5555
   118e0:	smmul	r0, r0, r1
   118e4:	add	r0, r0, r0, lsr #31
   118e8:	lsl	r0, r0, #2
   118ec:	bx	lr
   118f0:	add	r0, r0, #4
   118f4:	b	137ec <__assert_fail@plt+0x2764>
   118f8:	push	{r4, sl, fp, lr}
   118fc:	add	fp, sp, #8
   11900:	sub	sp, sp, #8
   11904:	mov	r4, r0
   11908:	ldr	r0, [fp, #8]
   1190c:	str	r0, [sp]
   11910:	add	r0, r4, #4
   11914:	bl	137f8 <__assert_fail@plt+0x2770>
   11918:	ldr	r1, [r4, #4]
   1191c:	str	r1, [r4]
   11920:	sub	sp, fp, #8
   11924:	pop	{r4, sl, fp, pc}
   11928:	mov	r1, r0
   1192c:	mov	r0, #1
   11930:	cmp	r1, #46	; 0x2e
   11934:	bgt	1194c <__assert_fail@plt+0x8c4>
   11938:	cmp	r1, #43	; 0x2b
   1193c:	beq	11964 <__assert_fail@plt+0x8dc>
   11940:	cmp	r1, #45	; 0x2d
   11944:	bne	1195c <__assert_fail@plt+0x8d4>
   11948:	bx	lr
   1194c:	cmp	r1, #47	; 0x2f
   11950:	beq	11964 <__assert_fail@plt+0x8dc>
   11954:	cmp	r1, #95	; 0x5f
   11958:	bxeq	lr
   1195c:	mov	r0, r1
   11960:	b	137cc <__assert_fail@plt+0x2744>
   11964:	mov	r0, #0
   11968:	bx	lr
   1196c:	push	{r4, r5, fp, lr}
   11970:	add	fp, sp, #8
   11974:	mov	r5, r3
   11978:	mov	r4, r2
   1197c:	bl	13558 <__assert_fail@plt+0x24d0>
   11980:	cmp	r5, #0
   11984:	beq	11a38 <__assert_fail@plt+0x9b0>
   11988:	tst	r5, #1
   1198c:	bne	11998 <__assert_fail@plt+0x910>
   11990:	mov	r0, r5
   11994:	b	119c4 <__assert_fail@plt+0x93c>
   11998:	ldrb	r0, [r4]
   1199c:	cmp	r0, #43	; 0x2b
   119a0:	beq	119b4 <__assert_fail@plt+0x92c>
   119a4:	cmp	r0, #47	; 0x2f
   119a8:	bne	119bc <__assert_fail@plt+0x934>
   119ac:	mov	r0, #95	; 0x5f
   119b0:	b	119b8 <__assert_fail@plt+0x930>
   119b4:	mov	r0, #45	; 0x2d
   119b8:	strb	r0, [r4]
   119bc:	sub	r0, r5, #1
   119c0:	add	r4, r4, #1
   119c4:	cmp	r5, #1
   119c8:	popeq	{r4, r5, fp, pc}
   119cc:	add	r1, r4, #1
   119d0:	ldrb	r2, [r1, #-1]
   119d4:	cmp	r2, #43	; 0x2b
   119d8:	bne	11a00 <__assert_fail@plt+0x978>
   119dc:	b	11a10 <__assert_fail@plt+0x988>
   119e0:	mov	r2, #45	; 0x2d
   119e4:	strb	r2, [r1]
   119e8:	add	r1, r1, #2
   119ec:	cmp	r0, #0
   119f0:	beq	11a38 <__assert_fail@plt+0x9b0>
   119f4:	ldrb	r2, [r1, #-1]
   119f8:	cmp	r2, #43	; 0x2b
   119fc:	beq	11a10 <__assert_fail@plt+0x988>
   11a00:	cmp	r2, #47	; 0x2f
   11a04:	bne	11a18 <__assert_fail@plt+0x990>
   11a08:	mov	r2, #95	; 0x5f
   11a0c:	b	11a14 <__assert_fail@plt+0x98c>
   11a10:	mov	r2, #45	; 0x2d
   11a14:	strb	r2, [r1, #-1]
   11a18:	ldrb	r2, [r1]
   11a1c:	sub	r0, r0, #2
   11a20:	cmp	r2, #43	; 0x2b
   11a24:	beq	119e0 <__assert_fail@plt+0x958>
   11a28:	cmp	r2, #47	; 0x2f
   11a2c:	bne	119e8 <__assert_fail@plt+0x960>
   11a30:	mov	r2, #95	; 0x5f
   11a34:	b	119e4 <__assert_fail@plt+0x95c>
   11a38:	pop	{r4, r5, fp, pc}
   11a3c:	push	{r4, sl, fp, lr}
   11a40:	add	fp, sp, #8
   11a44:	mov	r4, r0
   11a48:	add	r0, r0, #4
   11a4c:	bl	137ec <__assert_fail@plt+0x2764>
   11a50:	movw	r0, #4200	; 0x1068
   11a54:	str	r0, [r4, #20]
   11a58:	movw	r0, #4200	; 0x1068
   11a5c:	bl	16b50 <__assert_fail@plt+0x5ac8>
   11a60:	str	r0, [r4, #16]
   11a64:	pop	{r4, sl, fp, pc}
   11a68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11a6c:	add	fp, sp, #24
   11a70:	sub	sp, sp, #8
   11a74:	mov	r4, r0
   11a78:	ldr	r0, [r0, #20]
   11a7c:	mov	r5, r3
   11a80:	mov	r6, r2
   11a84:	mov	r7, r1
   11a88:	cmp	r0, r2
   11a8c:	bge	11aac <__assert_fail@plt+0xa24>
   11a90:	lsl	r1, r6, #1
   11a94:	mov	r2, #1
   11a98:	str	r1, [r4, #20]
   11a9c:	ldr	r0, [r4, #16]
   11aa0:	bl	16ae4 <__assert_fail@plt+0x5a5c>
   11aa4:	str	r0, [r4, #16]
   11aa8:	b	11ab0 <__assert_fail@plt+0xa28>
   11aac:	ldr	r0, [r4, #16]
   11ab0:	ldr	r8, [fp, #8]
   11ab4:	mov	r1, r7
   11ab8:	mov	r2, r6
   11abc:	bl	10e90 <memcpy@plt>
   11ac0:	ldr	r1, [r4, #16]
   11ac4:	cmp	r6, #0
   11ac8:	beq	11b3c <__assert_fail@plt+0xab4>
   11acc:	mov	r0, r6
   11ad0:	ldrb	r2, [r1]
   11ad4:	cmp	r2, #46	; 0x2e
   11ad8:	ble	11b04 <__assert_fail@plt+0xa7c>
   11adc:	cmp	r2, #95	; 0x5f
   11ae0:	bne	11b1c <__assert_fail@plt+0xa94>
   11ae4:	mov	r3, #47	; 0x2f
   11ae8:	strb	r3, [r1]
   11aec:	subs	r0, r0, #1
   11af0:	add	r1, r1, #1
   11af4:	beq	11b38 <__assert_fail@plt+0xab0>
   11af8:	ldrb	r2, [r1]
   11afc:	cmp	r2, #46	; 0x2e
   11b00:	bgt	11adc <__assert_fail@plt+0xa54>
   11b04:	mov	r3, #43	; 0x2b
   11b08:	cmp	r2, #45	; 0x2d
   11b0c:	beq	11ae8 <__assert_fail@plt+0xa60>
   11b10:	cmp	r2, #43	; 0x2b
   11b14:	bne	11aec <__assert_fail@plt+0xa64>
   11b18:	b	11b24 <__assert_fail@plt+0xa9c>
   11b1c:	cmp	r2, #47	; 0x2f
   11b20:	bne	11aec <__assert_fail@plt+0xa64>
   11b24:	mov	r0, #0
   11b28:	str	r0, [r8]
   11b2c:	mov	r0, #0
   11b30:	sub	sp, fp, #24
   11b34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11b38:	ldr	r1, [r4, #16]
   11b3c:	add	r0, r4, #4
   11b40:	mov	r2, r6
   11b44:	mov	r3, r5
   11b48:	str	r8, [sp]
   11b4c:	bl	137f8 <__assert_fail@plt+0x2770>
   11b50:	ldr	r1, [r4, #4]
   11b54:	str	r1, [r4]
   11b58:	sub	sp, fp, #24
   11b5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11b60:	movw	r1, #26215	; 0x6667
   11b64:	add	r0, r0, #4
   11b68:	movt	r1, #26214	; 0x6666
   11b6c:	smmul	r0, r0, r1
   11b70:	lsr	r1, r0, #1
   11b74:	add	r0, r1, r0, lsr #31
   11b78:	lsl	r0, r0, #3
   11b7c:	bx	lr
   11b80:	add	r0, r0, #4
   11b84:	b	12e84 <__assert_fail@plt+0x1dfc>
   11b88:	push	{r4, sl, fp, lr}
   11b8c:	add	fp, sp, #8
   11b90:	sub	sp, sp, #8
   11b94:	mov	r4, r0
   11b98:	ldr	r0, [fp, #8]
   11b9c:	str	r0, [sp]
   11ba0:	add	r0, r4, #4
   11ba4:	bl	12e90 <__assert_fail@plt+0x1e08>
   11ba8:	ldr	r1, [r4, #4]
   11bac:	str	r1, [r4]
   11bb0:	sub	sp, fp, #8
   11bb4:	pop	{r4, sl, fp, pc}
   11bb8:	sub	r1, r0, #65	; 0x41
   11bbc:	sub	r0, r0, #48	; 0x30
   11bc0:	mov	r2, #0
   11bc4:	uxtb	r1, r1
   11bc8:	uxtb	r0, r0
   11bcc:	cmp	r1, #22
   11bd0:	mov	r1, #0
   11bd4:	movwcc	r1, #1
   11bd8:	cmp	r0, #10
   11bdc:	movwcc	r2, #1
   11be0:	orr	r0, r2, r1
   11be4:	bx	lr
   11be8:	push	{r4, r5, fp, lr}
   11bec:	add	fp, sp, #8
   11bf0:	mov	r4, r3
   11bf4:	mov	r5, r2
   11bf8:	bl	12b50 <__assert_fail@plt+0x1ac8>
   11bfc:	cmp	r4, #0
   11c00:	popeq	{r4, r5, fp, pc}
   11c04:	movw	r0, #39504	; 0x9a50
   11c08:	movt	r0, #1
   11c0c:	ldrb	r1, [r5]
   11c10:	sub	r2, r1, #50	; 0x32
   11c14:	uxtb	r2, r2
   11c18:	cmp	r2, #41	; 0x29
   11c1c:	bcs	11c38 <__assert_fail@plt+0xbb0>
   11c20:	add	r1, r1, r0
   11c24:	subs	r4, r4, #1
   11c28:	ldrb	r1, [r1, #-50]	; 0xffffffce
   11c2c:	strb	r1, [r5], #1
   11c30:	bne	11c0c <__assert_fail@plt+0xb84>
   11c34:	pop	{r4, r5, fp, pc}
   11c38:	movw	r0, #38969	; 0x9839
   11c3c:	movw	r1, #38994	; 0x9852
   11c40:	movw	r3, #39007	; 0x985f
   11c44:	mov	r2, #452	; 0x1c4
   11c48:	movt	r0, #1
   11c4c:	movt	r1, #1
   11c50:	movt	r3, #1
   11c54:	bl	11088 <__assert_fail@plt>
   11c58:	push	{r4, sl, fp, lr}
   11c5c:	add	fp, sp, #8
   11c60:	mov	r4, r0
   11c64:	add	r0, r0, #4
   11c68:	bl	12e84 <__assert_fail@plt+0x1dfc>
   11c6c:	movw	r0, #4200	; 0x1068
   11c70:	str	r0, [r4, #20]
   11c74:	movw	r0, #4200	; 0x1068
   11c78:	bl	16b50 <__assert_fail@plt+0x5ac8>
   11c7c:	str	r0, [r4, #16]
   11c80:	pop	{r4, sl, fp, pc}
   11c84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11c88:	add	fp, sp, #24
   11c8c:	sub	sp, sp, #8
   11c90:	mov	r4, r0
   11c94:	ldr	r0, [r0, #20]
   11c98:	mov	r8, r3
   11c9c:	mov	r6, r2
   11ca0:	mov	r7, r1
   11ca4:	cmp	r0, r2
   11ca8:	bge	11cd8 <__assert_fail@plt+0xc50>
   11cac:	lsl	r1, r6, #1
   11cb0:	mov	r2, #1
   11cb4:	str	r1, [r4, #20]
   11cb8:	ldr	r0, [r4, #16]
   11cbc:	bl	16ae4 <__assert_fail@plt+0x5a5c>
   11cc0:	mov	r1, r0
   11cc4:	str	r0, [r4, #16]
   11cc8:	ldr	ip, [fp, #8]
   11ccc:	cmp	r6, #0
   11cd0:	bne	11ce8 <__assert_fail@plt+0xc60>
   11cd4:	b	11d3c <__assert_fail@plt+0xcb4>
   11cd8:	ldr	r1, [r4, #16]
   11cdc:	ldr	ip, [fp, #8]
   11ce0:	cmp	r6, #0
   11ce4:	beq	11d3c <__assert_fail@plt+0xcb4>
   11ce8:	movw	r2, #39545	; 0x9a79
   11cec:	mov	r3, r6
   11cf0:	movt	r2, #1
   11cf4:	b	11d08 <__assert_fail@plt+0xc80>
   11cf8:	strb	r0, [r1], #1
   11cfc:	add	r7, r7, #1
   11d00:	cmp	r3, #0
   11d04:	beq	11d38 <__assert_fail@plt+0xcb0>
   11d08:	ldrb	r0, [r7]
   11d0c:	sub	r3, r3, #1
   11d10:	sub	r5, r0, #48	; 0x30
   11d14:	uxtb	r5, r5
   11d18:	cmp	r5, #10
   11d1c:	subcs	r5, r0, #65	; 0x41
   11d20:	uxtbcs	r5, r5
   11d24:	cmpcs	r5, #21
   11d28:	bhi	11cf8 <__assert_fail@plt+0xc70>
   11d2c:	add	r0, r0, r2
   11d30:	ldrb	r0, [r0, #-48]	; 0xffffffd0
   11d34:	b	11cf8 <__assert_fail@plt+0xc70>
   11d38:	ldr	r1, [r4, #16]
   11d3c:	add	r0, r4, #4
   11d40:	mov	r2, r6
   11d44:	mov	r3, r8
   11d48:	str	ip, [sp]
   11d4c:	bl	12e90 <__assert_fail@plt+0x1e08>
   11d50:	ldr	r1, [r4, #4]
   11d54:	str	r1, [r4]
   11d58:	sub	sp, fp, #24
   11d5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11d60:	lsl	r0, r0, #1
   11d64:	bx	lr
   11d68:	sub	r1, r0, #65	; 0x41
   11d6c:	sub	r0, r0, #48	; 0x30
   11d70:	mov	r2, #0
   11d74:	uxtb	r1, r1
   11d78:	uxtb	r0, r0
   11d7c:	cmp	r1, #6
   11d80:	mov	r1, #0
   11d84:	movwcc	r1, #1
   11d88:	cmp	r0, #10
   11d8c:	movwcc	r2, #1
   11d90:	orr	r0, r2, r1
   11d94:	bx	lr
   11d98:	push	{fp, lr}
   11d9c:	mov	fp, sp
   11da0:	cmp	r1, #0
   11da4:	popeq	{fp, pc}
   11da8:	movw	ip, #39924	; 0x9bf4
   11dac:	movt	ip, #1
   11db0:	ldrb	lr, [r0], #1
   11db4:	subs	r1, r1, #1
   11db8:	ldrb	r3, [ip, lr, lsr #4]
   11dbc:	strb	r3, [r2]
   11dc0:	and	r3, lr, #15
   11dc4:	ldrb	r3, [ip, r3]
   11dc8:	strb	r3, [r2, #1]
   11dcc:	add	r2, r2, #2
   11dd0:	bne	11db0 <__assert_fail@plt+0xd28>
   11dd4:	pop	{fp, pc}
   11dd8:	push	{r4, sl, fp, lr}
   11ddc:	add	fp, sp, #8
   11de0:	mov	r4, r0
   11de4:	movw	r0, #4200	; 0x1068
   11de8:	str	r0, [r4, #20]
   11dec:	movw	r0, #4200	; 0x1068
   11df0:	bl	16b50 <__assert_fail@plt+0x5ac8>
   11df4:	str	r0, [r4, #16]
   11df8:	mov	r0, #0
   11dfc:	strb	r0, [r4, #5]
   11e00:	mov	r0, #1
   11e04:	str	r0, [r4]
   11e08:	pop	{r4, sl, fp, pc}
   11e0c:	push	{r4, r5, fp, lr}
   11e10:	add	fp, sp, #8
   11e14:	ldr	ip, [fp, #8]
   11e18:	mov	r4, #0
   11e1c:	cmp	r2, #0
   11e20:	str	r4, [ip]
   11e24:	beq	11eb8 <__assert_fail@plt+0xe30>
   11e28:	cmp	r2, #0
   11e2c:	beq	11eb0 <__assert_fail@plt+0xe28>
   11e30:	ldrb	lr, [r1], #1
   11e34:	sub	r2, r2, #1
   11e38:	cmp	lr, #10
   11e3c:	beq	11e28 <__assert_fail@plt+0xda0>
   11e40:	sub	r4, lr, #48	; 0x30
   11e44:	uxtb	r5, r4
   11e48:	mvn	r4, #47	; 0x2f
   11e4c:	cmp	r5, #10
   11e50:	bcc	11e68 <__assert_fail@plt+0xde0>
   11e54:	sub	r4, lr, #65	; 0x41
   11e58:	uxtb	r5, r4
   11e5c:	mvn	r4, #54	; 0x36
   11e60:	cmp	r5, #5
   11e64:	bhi	11ec8 <__assert_fail@plt+0xe40>
   11e68:	ldrb	r5, [r0, #5]
   11e6c:	add	r4, r4, lr
   11e70:	cmp	r5, #0
   11e74:	beq	11e98 <__assert_fail@plt+0xe10>
   11e78:	ldrb	r5, [r0, #4]
   11e7c:	add	r5, r4, r5, lsl #4
   11e80:	strb	r5, [r3], #1
   11e84:	ldr	r5, [ip]
   11e88:	add	r5, r5, #1
   11e8c:	str	r5, [ip]
   11e90:	ldrb	r4, [r0, #5]
   11e94:	b	11ea0 <__assert_fail@plt+0xe18>
   11e98:	strb	r4, [r0, #4]
   11e9c:	mov	r4, #0
   11ea0:	eor	r5, r4, #1
   11ea4:	strb	r5, [r0, #5]
   11ea8:	cmp	r2, #0
   11eac:	bne	11e30 <__assert_fail@plt+0xda8>
   11eb0:	mov	r0, #1
   11eb4:	pop	{r4, r5, fp, pc}
   11eb8:	ldrb	r0, [r0, #5]
   11ebc:	clz	r0, r0
   11ec0:	lsr	r0, r0, #5
   11ec4:	pop	{r4, r5, fp, pc}
   11ec8:	mov	r0, #0
   11ecc:	pop	{r4, r5, fp, pc}
   11ed0:	lsl	r0, r0, #3
   11ed4:	bx	lr
   11ed8:	orr	r0, r0, #1
   11edc:	sub	r0, r0, #49	; 0x31
   11ee0:	clz	r0, r0
   11ee4:	lsr	r0, r0, #5
   11ee8:	bx	lr
   11eec:	push	{fp, lr}
   11ef0:	mov	fp, sp
   11ef4:	cmp	r1, #0
   11ef8:	popeq	{fp, pc}
   11efc:	mov	ip, #24
   11f00:	ldrb	lr, [r0], #1
   11f04:	mov	r3, lr
   11f08:	tst	lr, #2
   11f0c:	bfi	r3, ip, #1, #31
   11f10:	strb	r3, [r2, #7]
   11f14:	mov	r3, #49	; 0x31
   11f18:	movweq	r3, #48	; 0x30
   11f1c:	tst	lr, #4
   11f20:	strb	r3, [r2, #6]
   11f24:	mov	r3, #49	; 0x31
   11f28:	movweq	r3, #48	; 0x30
   11f2c:	tst	lr, #8
   11f30:	strb	r3, [r2, #5]
   11f34:	mov	r3, #49	; 0x31
   11f38:	movweq	r3, #48	; 0x30
   11f3c:	tst	lr, #16
   11f40:	strb	r3, [r2, #4]
   11f44:	mov	r3, #49	; 0x31
   11f48:	movweq	r3, #48	; 0x30
   11f4c:	tst	lr, #32
   11f50:	strb	r3, [r2, #3]
   11f54:	mov	r3, #49	; 0x31
   11f58:	movweq	r3, #48	; 0x30
   11f5c:	tst	lr, #64	; 0x40
   11f60:	strb	r3, [r2, #2]
   11f64:	mov	r3, #49	; 0x31
   11f68:	movweq	r3, #48	; 0x30
   11f6c:	strb	r3, [r2, #1]
   11f70:	sxtb	r3, lr
   11f74:	cmn	r3, #1
   11f78:	mov	r3, #49	; 0x31
   11f7c:	movwgt	r3, #48	; 0x30
   11f80:	subs	r1, r1, #1
   11f84:	strb	r3, [r2]
   11f88:	add	r2, r2, #8
   11f8c:	bne	11f00 <__assert_fail@plt+0xe78>
   11f90:	pop	{fp, pc}
   11f94:	push	{r4, sl, fp, lr}
   11f98:	add	fp, sp, #8
   11f9c:	mov	r4, r0
   11fa0:	movw	r0, #4200	; 0x1068
   11fa4:	str	r0, [r4, #20]
   11fa8:	movw	r0, #4200	; 0x1068
   11fac:	bl	16b50 <__assert_fail@plt+0x5ac8>
   11fb0:	str	r0, [r4, #16]
   11fb4:	mov	r0, #0
   11fb8:	strb	r0, [r4, #4]
   11fbc:	str	r0, [r4]
   11fc0:	pop	{r4, sl, fp, pc}
   11fc4:	push	{r4, r5, r6, sl, fp, lr}
   11fc8:	add	fp, sp, #16
   11fcc:	ldr	ip, [fp, #8]
   11fd0:	mov	lr, #0
   11fd4:	cmp	r2, #0
   11fd8:	str	lr, [ip]
   11fdc:	beq	12084 <__assert_fail@plt+0xffc>
   11fe0:	add	r1, r1, #1
   11fe4:	rsb	r4, r2, #1
   11fe8:	ldrb	r2, [r1, #-1]
   11fec:	cmp	r2, #10
   11ff0:	bne	12008 <__assert_fail@plt+0xf80>
   11ff4:	add	r4, r4, #1
   11ff8:	add	r1, r1, #1
   11ffc:	cmp	r4, #1
   12000:	bne	11fe8 <__assert_fail@plt+0xf60>
   12004:	b	1207c <__assert_fail@plt+0xff4>
   12008:	orr	r5, r2, #1
   1200c:	cmp	r5, #49	; 0x31
   12010:	bne	12094 <__assert_fail@plt+0x100c>
   12014:	ldr	r5, [r0]
   12018:	sub	r2, r2, #49	; 0x31
   1201c:	clz	r2, r2
   12020:	lsr	r2, r2, #5
   12024:	cmp	r5, #0
   12028:	moveq	r5, #8
   1202c:	streq	r5, [r0]
   12030:	subs	r5, r5, #1
   12034:	str	r5, [r0]
   12038:	ldrb	r6, [r0, #4]
   1203c:	orr	r2, r6, r2, lsl r5
   12040:	strb	r2, [r0, #4]
   12044:	beq	12058 <__assert_fail@plt+0xfd0>
   12048:	rsb	r2, r4, #0
   1204c:	cmp	r4, #0
   12050:	bne	11fe0 <__assert_fail@plt+0xf58>
   12054:	b	1207c <__assert_fail@plt+0xff4>
   12058:	strb	r2, [r3], #1
   1205c:	strb	lr, [r0, #4]
   12060:	ldr	r2, [ip]
   12064:	add	r2, r2, #1
   12068:	str	r2, [ip]
   1206c:	str	lr, [r0]
   12070:	rsb	r2, r4, #0
   12074:	cmp	r4, #0
   12078:	bne	11fe0 <__assert_fail@plt+0xf58>
   1207c:	mov	r0, #1
   12080:	pop	{r4, r5, r6, sl, fp, pc}
   12084:	ldr	r0, [r0]
   12088:	clz	r0, r0
   1208c:	lsr	r0, r0, #5
   12090:	pop	{r4, r5, r6, sl, fp, pc}
   12094:	mov	r0, #0
   12098:	pop	{r4, r5, r6, sl, fp, pc}
   1209c:	push	{r4, sl, fp, lr}
   120a0:	add	fp, sp, #8
   120a4:	cmp	r1, #0
   120a8:	popeq	{r4, sl, fp, pc}
   120ac:	mov	ip, #48	; 0x30
   120b0:	mov	lr, #24
   120b4:	ldrb	r3, [r0], #1
   120b8:	subs	r1, r1, #1
   120bc:	orr	r4, ip, r3, lsr #7
   120c0:	strb	r4, [r2, #7]
   120c4:	mov	r4, r3
   120c8:	bfi	r4, lr, #1, #31
   120cc:	strb	r4, [r2]
   120d0:	lsr	r4, r3, #6
   120d4:	bfi	r4, lr, #1, #31
   120d8:	strb	r4, [r2, #6]
   120dc:	lsr	r4, r3, #5
   120e0:	bfi	r4, lr, #1, #31
   120e4:	strb	r4, [r2, #5]
   120e8:	lsr	r4, r3, #4
   120ec:	bfi	r4, lr, #1, #31
   120f0:	strb	r4, [r2, #4]
   120f4:	lsr	r4, r3, #3
   120f8:	bfi	r4, lr, #1, #31
   120fc:	strb	r4, [r2, #3]
   12100:	lsr	r4, r3, #2
   12104:	lsr	r3, r3, #1
   12108:	bfi	r4, lr, #1, #31
   1210c:	bfi	r3, lr, #1, #31
   12110:	strb	r4, [r2, #2]
   12114:	strb	r3, [r2, #1]
   12118:	add	r2, r2, #8
   1211c:	bne	120b4 <__assert_fail@plt+0x102c>
   12120:	pop	{r4, sl, fp, pc}
   12124:	push	{r4, r5, r6, sl, fp, lr}
   12128:	add	fp, sp, #16
   1212c:	ldr	ip, [fp, #8]
   12130:	mov	lr, #0
   12134:	cmp	r2, #0
   12138:	str	lr, [ip]
   1213c:	beq	121cc <__assert_fail@plt+0x1144>
   12140:	add	r1, r1, #1
   12144:	rsb	r4, r2, #1
   12148:	ldrb	r2, [r1, #-1]
   1214c:	cmp	r2, #10
   12150:	bne	12168 <__assert_fail@plt+0x10e0>
   12154:	add	r4, r4, #1
   12158:	add	r1, r1, #1
   1215c:	cmp	r4, #1
   12160:	bne	12148 <__assert_fail@plt+0x10c0>
   12164:	b	121c4 <__assert_fail@plt+0x113c>
   12168:	orr	r5, r2, #1
   1216c:	cmp	r5, #49	; 0x31
   12170:	bne	121dc <__assert_fail@plt+0x1154>
   12174:	ldr	r5, [r0]
   12178:	ldrb	r6, [r0, #4]
   1217c:	sub	r2, r2, #49	; 0x31
   12180:	clz	r2, r2
   12184:	lsr	r2, r2, #5
   12188:	orr	r2, r6, r2, lsl r5
   1218c:	add	r5, r5, #1
   12190:	cmp	r5, #8
   12194:	strb	r2, [r0, #4]
   12198:	str	r5, [r0]
   1219c:	bne	121b8 <__assert_fail@plt+0x1130>
   121a0:	strb	r2, [r3], #1
   121a4:	strb	lr, [r0, #4]
   121a8:	ldr	r2, [ip]
   121ac:	add	r2, r2, #1
   121b0:	str	r2, [ip]
   121b4:	str	lr, [r0]
   121b8:	rsb	r2, r4, #0
   121bc:	cmp	r4, #0
   121c0:	bne	12140 <__assert_fail@plt+0x10b8>
   121c4:	mov	r0, #1
   121c8:	pop	{r4, r5, r6, sl, fp, pc}
   121cc:	ldr	r0, [r0]
   121d0:	clz	r0, r0
   121d4:	lsr	r0, r0, #5
   121d8:	pop	{r4, r5, r6, sl, fp, pc}
   121dc:	mov	r0, #0
   121e0:	pop	{r4, r5, r6, sl, fp, pc}
   121e4:	add	r0, r0, r0, lsl #2
   121e8:	asr	r1, r0, #31
   121ec:	add	r0, r0, r1, lsr #30
   121f0:	asr	r0, r0, #2
   121f4:	bx	lr
   121f8:	push	{r4, sl, fp, lr}
   121fc:	add	fp, sp, #8
   12200:	mov	r4, r0
   12204:	bl	13e4c <__assert_fail@plt+0x2dc4>
   12208:	mov	r1, r0
   1220c:	mov	r0, #1
   12210:	cmp	r1, #0
   12214:	popne	{r4, sl, fp, pc}
   12218:	movw	r0, #39081	; 0x98a9
   1221c:	mov	r1, r4
   12220:	mov	r2, #24
   12224:	movt	r0, #1
   12228:	bl	10fec <memchr@plt>
   1222c:	cmp	r0, #0
   12230:	movwne	r0, #1
   12234:	pop	{r4, sl, fp, pc}
   12238:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1223c:	add	fp, sp, #28
   12240:	sub	sp, sp, #20
   12244:	cmp	r1, #0
   12248:	beq	1240c <__assert_fail@plt+0x1384>
   1224c:	mov	r8, r3
   12250:	mov	r4, r2
   12254:	mov	r6, r1
   12258:	mov	r9, #0
   1225c:	add	r3, sp, #16
   12260:	mov	r2, #0
   12264:	b	12284 <__assert_fail@plt+0x11fc>
   12268:	ldr	r0, [sp, #12]
   1226c:	add	r9, r9, #5
   12270:	add	r4, r4, #5
   12274:	mov	r2, #0
   12278:	add	r3, sp, #16
   1227c:	cmp	r6, #0
   12280:	beq	12404 <__assert_fail@plt+0x137c>
   12284:	ldrb	r1, [r0], #1
   12288:	sub	r6, r6, #1
   1228c:	strb	r1, [r3, r2]
   12290:	add	r2, r2, #1
   12294:	cmp	r2, #4
   12298:	bne	1227c <__assert_fail@plt+0x11f4>
   1229c:	str	r0, [sp, #12]
   122a0:	ldr	r0, [sp, #16]
   122a4:	mov	r1, #0
   122a8:	mov	r2, #85	; 0x55
   122ac:	mov	r3, #0
   122b0:	rev	r7, r0
   122b4:	mov	r0, r7
   122b8:	bl	18e14 <__assert_fail@plt+0x7d8c>
   122bc:	mov	r5, r0
   122c0:	add	r0, r9, #4
   122c4:	mov	sl, r1
   122c8:	cmp	r0, r8
   122cc:	bge	122e8 <__assert_fail@plt+0x1260>
   122d0:	mov	r0, #85	; 0x55
   122d4:	movw	r1, #39586	; 0x9aa2
   122d8:	mls	r0, r5, r0, r7
   122dc:	movt	r1, #1
   122e0:	ldrb	r0, [r1, r0]
   122e4:	strb	r0, [r4, #4]
   122e8:	mov	r0, r7
   122ec:	mov	r1, #0
   122f0:	movw	r2, #7225	; 0x1c39
   122f4:	mov	r3, #0
   122f8:	bl	18e14 <__assert_fail@plt+0x7d8c>
   122fc:	str	r0, [sp, #4]
   12300:	add	r0, r9, #3
   12304:	str	r1, [sp]
   12308:	cmp	r0, r8
   1230c:	bge	12334 <__assert_fail@plt+0x12ac>
   12310:	mov	r0, r5
   12314:	mov	r1, sl
   12318:	mov	r2, #85	; 0x55
   1231c:	mov	r3, #0
   12320:	bl	18e14 <__assert_fail@plt+0x7d8c>
   12324:	movw	r0, #39586	; 0x9aa2
   12328:	movt	r0, #1
   1232c:	ldrb	r0, [r0, r2]
   12330:	strb	r0, [r4, #3]
   12334:	movw	r2, #24301	; 0x5eed
   12338:	mov	r0, r7
   1233c:	mov	r1, #0
   12340:	mov	r3, #0
   12344:	movt	r2, #9
   12348:	bl	18e14 <__assert_fail@plt+0x7d8c>
   1234c:	mov	sl, r0
   12350:	add	r0, r9, #2
   12354:	str	r1, [sp, #8]
   12358:	cmp	r0, r8
   1235c:	bge	12384 <__assert_fail@plt+0x12fc>
   12360:	ldr	r0, [sp, #4]
   12364:	ldr	r1, [sp]
   12368:	mov	r2, #85	; 0x55
   1236c:	mov	r3, #0
   12370:	bl	18e14 <__assert_fail@plt+0x7d8c>
   12374:	movw	r0, #39586	; 0x9aa2
   12378:	movt	r0, #1
   1237c:	ldrb	r0, [r0, r2]
   12380:	strb	r0, [r4, #2]
   12384:	movw	r2, #33969	; 0x84b1
   12388:	mov	r0, r7
   1238c:	mov	r1, #0
   12390:	mov	r3, #0
   12394:	movt	r2, #796	; 0x31c
   12398:	bl	18e14 <__assert_fail@plt+0x7d8c>
   1239c:	mov	r5, r0
   123a0:	add	r0, r9, #1
   123a4:	mov	r7, r1
   123a8:	cmp	r0, r8
   123ac:	bge	123d4 <__assert_fail@plt+0x134c>
   123b0:	ldr	r1, [sp, #8]
   123b4:	mov	r0, sl
   123b8:	mov	r2, #85	; 0x55
   123bc:	mov	r3, #0
   123c0:	bl	18e14 <__assert_fail@plt+0x7d8c>
   123c4:	movw	r0, #39586	; 0x9aa2
   123c8:	movt	r0, #1
   123cc:	ldrb	r0, [r0, r2]
   123d0:	strb	r0, [r4, #1]
   123d4:	cmp	r9, r8
   123d8:	bge	12268 <__assert_fail@plt+0x11e0>
   123dc:	mov	r0, r5
   123e0:	mov	r1, r7
   123e4:	mov	r2, #85	; 0x55
   123e8:	mov	r3, #0
   123ec:	bl	18e14 <__assert_fail@plt+0x7d8c>
   123f0:	movw	r0, #39586	; 0x9aa2
   123f4:	movt	r0, #1
   123f8:	ldrb	r0, [r0, r2]
   123fc:	strb	r0, [r4]
   12400:	b	12268 <__assert_fail@plt+0x11e0>
   12404:	cmp	r2, #0
   12408:	bne	12414 <__assert_fail@plt+0x138c>
   1240c:	sub	sp, fp, #28
   12410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12414:	movw	r1, #39105	; 0x98c1
   12418:	mov	r0, #0
   1241c:	mov	r2, #5
   12420:	movt	r1, #1
   12424:	bl	10eb4 <dcgettext@plt>
   12428:	mov	r2, r0
   1242c:	mov	r0, #1
   12430:	mov	r1, #0
   12434:	bl	10f20 <error@plt>
   12438:	push	{r4, sl, fp, lr}
   1243c:	add	fp, sp, #8
   12440:	mov	r4, r0
   12444:	movw	r0, #4200	; 0x1068
   12448:	str	r0, [r4, #20]
   1244c:	movw	r0, #4200	; 0x1068
   12450:	bl	16b50 <__assert_fail@plt+0x5ac8>
   12454:	str	r0, [r4, #16]
   12458:	mov	r1, #1
   1245c:	mov	r0, #0
   12460:	str	r1, [r4]
   12464:	str	r0, [r4, #4]
   12468:	pop	{r4, sl, fp, pc}
   1246c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12470:	add	fp, sp, #28
   12474:	ldr	lr, [fp, #8]
   12478:	mov	ip, #0
   1247c:	cmp	r2, #0
   12480:	str	ip, [lr]
   12484:	beq	12590 <__assert_fail@plt+0x1508>
   12488:	movw	r9, #39671	; 0x9af7
   1248c:	movw	r8, #33969	; 0x84b1
   12490:	movt	r9, #1
   12494:	movt	r8, #796	; 0x31c
   12498:	add	r1, r1, #1
   1249c:	rsb	r6, r2, #1
   124a0:	ldrb	r2, [r1, #-1]
   124a4:	cmp	r2, #10
   124a8:	bne	124c0 <__assert_fail@plt+0x1438>
   124ac:	add	r6, r6, #1
   124b0:	add	r1, r1, #1
   124b4:	cmp	r6, #1
   124b8:	bne	124a0 <__assert_fail@plt+0x1418>
   124bc:	b	1257c <__assert_fail@plt+0x14f4>
   124c0:	sub	r7, r2, #33	; 0x21
   124c4:	mov	ip, #0
   124c8:	uxtb	r7, r7
   124cc:	cmp	r7, #92	; 0x5c
   124d0:	bhi	12588 <__assert_fail@plt+0x1500>
   124d4:	add	r2, r2, r9
   124d8:	ldrsb	r2, [r2, #-33]	; 0xffffffdf
   124dc:	cmp	r2, #0
   124e0:	bmi	12588 <__assert_fail@plt+0x1500>
   124e4:	mov	r4, r0
   124e8:	ldr	r5, [r4, #4]!
   124ec:	mov	r7, r4
   124f0:	add	ip, r5, #1
   124f4:	str	ip, [r7], r5
   124f8:	strb	r2, [r7, #4]
   124fc:	ldr	r7, [r4]
   12500:	cmp	r7, #5
   12504:	bne	1256c <__assert_fail@plt+0x14e4>
   12508:	ldrb	r2, [r0, #9]
   1250c:	movw	r4, #24301	; 0x5eed
   12510:	ldrb	r7, [r0, #10]
   12514:	ldrb	r5, [r0, #11]
   12518:	ldrb	sl, [r0, #8]
   1251c:	mov	ip, #0
   12520:	movt	r4, #9
   12524:	mul	r2, r2, r4
   12528:	movw	r4, #7225	; 0x1c39
   1252c:	smlabb	r2, r7, r4, r2
   12530:	mov	r7, #85	; 0x55
   12534:	smlabb	r2, r5, r7, r2
   12538:	ldrb	r7, [r0, #12]
   1253c:	mov	r5, #0
   12540:	add	r2, r2, r7
   12544:	umlal	r2, r5, sl, r8
   12548:	tst	r5, #7
   1254c:	bne	12588 <__assert_fail@plt+0x1500>
   12550:	rev	r2, r2
   12554:	mov	r7, #0
   12558:	str	r2, [r3], #4
   1255c:	ldr	r2, [lr]
   12560:	add	r2, r2, #4
   12564:	str	r2, [lr]
   12568:	str	r7, [r0, #4]
   1256c:	rsb	r2, r6, #0
   12570:	cmp	r6, #0
   12574:	bne	12498 <__assert_fail@plt+0x1410>
   12578:	b	12580 <__assert_fail@plt+0x14f8>
   1257c:	ldr	r7, [r0, #4]
   12580:	mov	ip, #1
   12584:	str	r7, [r0]
   12588:	mov	r0, ip
   1258c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12590:	ldr	r0, [r0, #4]
   12594:	cmp	r0, #1
   12598:	movwlt	ip, #1
   1259c:	mov	r0, ip
   125a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125a4:	push	{fp, lr}
   125a8:	mov	fp, sp
   125ac:	sub	sp, sp, #56	; 0x38
   125b0:	movw	sl, #45400	; 0xb158
   125b4:	str	r1, [sp, #8]
   125b8:	mov	r9, r0
   125bc:	movw	r0, #4200	; 0x1068
   125c0:	str	r3, [sp, #12]
   125c4:	str	r2, [sp, #24]
   125c8:	movt	sl, #2
   125cc:	ldr	r1, [sl]
   125d0:	blx	r1
   125d4:	bl	16b20 <__assert_fail@plt+0x5a98>
   125d8:	mov	r4, r0
   125dc:	movw	r0, #4200	; 0x1068
   125e0:	bl	16b20 <__assert_fail@plt+0x5a98>
   125e4:	ldr	r1, [sl, #12]
   125e8:	str	r0, [sp, #20]
   125ec:	mov	r0, #0
   125f0:	str	r0, [fp, #-8]
   125f4:	sub	r0, fp, #24
   125f8:	blx	r1
   125fc:	str	r9, [sp, #16]
   12600:	ldr	r0, [sp, #12]
   12604:	mov	r5, #0
   12608:	cmp	r0, #0
   1260c:	bne	1262c <__assert_fail@plt+0x15a4>
   12610:	b	126f0 <__assert_fail@plt+0x1668>
   12614:	cmp	r0, #0
   12618:	bne	1283c <__assert_fail@plt+0x17b4>
   1261c:	ldr	r0, [sp, #12]
   12620:	mov	r5, #0
   12624:	cmp	r0, #0
   12628:	beq	126f0 <__assert_fail@plt+0x1668>
   1262c:	ldr	r1, [sl]
   12630:	movw	r0, #4200	; 0x1068
   12634:	blx	r1
   12638:	mov	r3, r9
   1263c:	add	r9, r4, r5
   12640:	sub	r2, r0, r5
   12644:	mov	r1, #1
   12648:	mov	r0, r9
   1264c:	bl	11064 <fread_unlocked@plt>
   12650:	mov	r8, r0
   12654:	cmp	r0, #1
   12658:	blt	126b8 <__assert_fail@plt+0x1630>
   1265c:	mov	r7, #0
   12660:	add	r6, r7, r5
   12664:	ldr	r1, [sl, #4]
   12668:	ldrb	r0, [r4, r6]
   1266c:	blx	r1
   12670:	cmp	r0, #0
   12674:	bne	12684 <__assert_fail@plt+0x15fc>
   12678:	ldrb	r0, [r4, r6]
   1267c:	cmp	r0, #61	; 0x3d
   12680:	bne	1269c <__assert_fail@plt+0x1614>
   12684:	add	r7, r7, #1
   12688:	cmp	r8, #1
   1268c:	blt	126b8 <__assert_fail@plt+0x1630>
   12690:	cmp	r7, r8
   12694:	blt	12660 <__assert_fail@plt+0x15d8>
   12698:	b	126b8 <__assert_fail@plt+0x1630>
   1269c:	sub	r8, r8, #1
   126a0:	add	r0, r9, r7
   126a4:	sub	r2, r8, r7
   126a8:	add	r1, r0, #1
   126ac:	bl	10e6c <memmove@plt>
   126b0:	cmp	r8, #1
   126b4:	bge	12690 <__assert_fail@plt+0x1608>
   126b8:	ldr	r9, [sp, #16]
   126bc:	ldrb	r0, [r9]
   126c0:	tst	r0, #32
   126c4:	bne	127d8 <__assert_fail@plt+0x1750>
   126c8:	ldr	r1, [sl]
   126cc:	movw	r0, #4200	; 0x1068
   126d0:	add	r5, r8, r5
   126d4:	blx	r1
   126d8:	cmp	r5, r0
   126dc:	bge	12744 <__assert_fail@plt+0x16bc>
   126e0:	ldrb	r0, [r9]
   126e4:	tst	r0, #16
   126e8:	beq	1262c <__assert_fail@plt+0x15a4>
   126ec:	b	12744 <__assert_fail@plt+0x16bc>
   126f0:	ldr	r1, [sl]
   126f4:	movw	r0, #4200	; 0x1068
   126f8:	blx	r1
   126fc:	add	r1, r4, r5
   12700:	sub	r2, r0, r5
   12704:	mov	r3, r9
   12708:	mov	r0, r1
   1270c:	mov	r1, #1
   12710:	bl	11064 <fread_unlocked@plt>
   12714:	ldrb	r1, [r9]
   12718:	tst	r1, #32
   1271c:	bne	127d8 <__assert_fail@plt+0x1750>
   12720:	ldr	r1, [sl]
   12724:	add	r5, r0, r5
   12728:	movw	r0, #4200	; 0x1068
   1272c:	blx	r1
   12730:	cmp	r5, r0
   12734:	bge	12744 <__assert_fail@plt+0x16bc>
   12738:	ldrb	r0, [r9]
   1273c:	tst	r0, #16
   12740:	beq	126f0 <__assert_fail@plt+0x1668>
   12744:	mov	r1, #0
   12748:	ldr	r8, [sp, #20]
   1274c:	ldr	r7, [sl, #16]
   12750:	movw	r0, #4200	; 0x1068
   12754:	cmp	r1, #0
   12758:	mov	r2, #0
   1275c:	mov	r6, r1
   12760:	mov	r1, r4
   12764:	str	r0, [sp, #28]
   12768:	add	r0, sp, #28
   1276c:	moveq	r2, r5
   12770:	str	r0, [sp]
   12774:	sub	r0, fp, #24
   12778:	mov	r3, r8
   1277c:	blx	r7
   12780:	ldr	r2, [sp, #28]
   12784:	ldr	r3, [sp, #24]
   12788:	mov	r7, r0
   1278c:	mov	r0, r8
   12790:	mov	r1, #1
   12794:	bl	10ea8 <fwrite_unlocked@plt>
   12798:	ldr	r1, [sp, #28]
   1279c:	cmp	r0, r1
   127a0:	bcc	127ec <__assert_fail@plt+0x1764>
   127a4:	cmp	r7, #0
   127a8:	beq	12818 <__assert_fail@plt+0x1790>
   127ac:	ldr	r0, [r9]
   127b0:	mov	r2, #2
   127b4:	add	r1, r6, #1
   127b8:	ands	r0, r0, #16
   127bc:	movweq	r2, #1
   127c0:	cmp	r1, r2
   127c4:	bcs	12614 <__assert_fail@plt+0x158c>
   127c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   127cc:	orrs	r2, r6, r2
   127d0:	bne	12748 <__assert_fail@plt+0x16c0>
   127d4:	b	12614 <__assert_fail@plt+0x158c>
   127d8:	bl	10fa4 <__errno_location@plt>
   127dc:	ldr	r4, [r0]
   127e0:	movw	r1, #39161	; 0x98f9
   127e4:	movt	r1, #1
   127e8:	b	127fc <__assert_fail@plt+0x1774>
   127ec:	bl	10fa4 <__errno_location@plt>
   127f0:	ldr	r4, [r0]
   127f4:	movw	r1, #39172	; 0x9904
   127f8:	movt	r1, #1
   127fc:	mov	r0, #0
   12800:	mov	r2, #5
   12804:	bl	10eb4 <dcgettext@plt>
   12808:	mov	r2, r0
   1280c:	mov	r0, #1
   12810:	mov	r1, r4
   12814:	bl	10f20 <error@plt>
   12818:	movw	r1, #39184	; 0x9910
   1281c:	mov	r0, #0
   12820:	mov	r2, #5
   12824:	movt	r1, #1
   12828:	bl	10eb4 <dcgettext@plt>
   1282c:	mov	r2, r0
   12830:	mov	r0, #1
   12834:	mov	r1, #0
   12838:	bl	10f20 <error@plt>
   1283c:	ldr	r1, [sp, #8]
   12840:	mov	r0, r9
   12844:	bl	12ac0 <__assert_fail@plt+0x1a38>
   12848:	push	{fp, lr}
   1284c:	mov	fp, sp
   12850:	sub	sp, sp, #16
   12854:	mov	r5, r0
   12858:	mov	r0, #30720	; 0x7800
   1285c:	str	r3, [fp, #-4]
   12860:	stm	sp, {r1, r2}
   12864:	bl	16b20 <__assert_fail@plt+0x5a98>
   12868:	mov	r4, r0
   1286c:	movw	r0, #45400	; 0xb158
   12870:	movt	r0, #2
   12874:	ldr	r1, [r0]
   12878:	mov	r0, #30720	; 0x7800
   1287c:	blx	r1
   12880:	bl	16b20 <__assert_fail@plt+0x5a98>
   12884:	mov	sl, #0
   12888:	mov	r3, r0
   1288c:	str	r0, [sp, #8]
   12890:	mov	r6, #0
   12894:	add	r0, r4, r6
   12898:	rsb	r2, r6, #30720	; 0x7800
   1289c:	mov	r1, #1
   128a0:	mov	r3, r5
   128a4:	bl	11064 <fread_unlocked@plt>
   128a8:	add	r6, r0, r6
   128ac:	ldr	r0, [r5]
   128b0:	tst	r0, #16
   128b4:	bne	128c8 <__assert_fail@plt+0x1840>
   128b8:	cmp	r6, #30720	; 0x7800
   128bc:	bge	128c8 <__assert_fail@plt+0x1840>
   128c0:	ands	r0, r0, #32
   128c4:	beq	12894 <__assert_fail@plt+0x180c>
   128c8:	cmp	r6, #1
   128cc:	blt	12a04 <__assert_fail@plt+0x197c>
   128d0:	movw	r0, #45400	; 0xb158
   128d4:	movt	r0, #2
   128d8:	ldr	r1, [r0]
   128dc:	ldr	r9, [r0, #8]
   128e0:	mov	r8, r0
   128e4:	mov	r0, r6
   128e8:	blx	r1
   128ec:	ldr	r7, [sp, #8]
   128f0:	mov	r3, r0
   128f4:	mov	r0, r4
   128f8:	mov	r1, r6
   128fc:	mov	r2, r7
   12900:	blx	r9
   12904:	ldr	r1, [r8]
   12908:	mov	r0, r6
   1290c:	blx	r1
   12910:	mov	r8, r0
   12914:	ldr	r0, [fp, #-4]
   12918:	cmp	r0, #0
   1291c:	beq	12934 <__assert_fail@plt+0x18ac>
   12920:	cmp	r8, #1
   12924:	blt	12a04 <__assert_fail@plt+0x197c>
   12928:	ldr	r3, [sp, #8]
   1292c:	mov	r7, #0
   12930:	b	1297c <__assert_fail@plt+0x18f4>
   12934:	movw	r0, #45388	; 0xb14c
   12938:	mov	r1, #1
   1293c:	mov	r2, r8
   12940:	movt	r0, #2
   12944:	ldr	r3, [r0]
   12948:	mov	r0, r7
   1294c:	bl	10ea8 <fwrite_unlocked@plt>
   12950:	cmp	r0, r8
   12954:	bcs	12a04 <__assert_fail@plt+0x197c>
   12958:	b	12a68 <__assert_fail@plt+0x19e0>
   1295c:	mov	r1, #10
   12960:	bl	11010 <__overflow@plt>
   12964:	ldr	r3, [sp, #8]
   12968:	mov	sl, #0
   1296c:	cmn	r0, #1
   12970:	beq	12a68 <__assert_fail@plt+0x19e0>
   12974:	cmp	r7, r8
   12978:	bge	12a04 <__assert_fail@plt+0x197c>
   1297c:	ldr	r0, [fp, #-4]
   12980:	sub	r9, r8, r7
   12984:	sub	r0, r0, sl
   12988:	cmp	r0, r9
   1298c:	movlt	r9, r0
   12990:	cmp	r9, #0
   12994:	beq	129d4 <__assert_fail@plt+0x194c>
   12998:	movw	r1, #45388	; 0xb14c
   1299c:	add	r0, r3, r7
   129a0:	mov	r2, r9
   129a4:	movt	r1, #2
   129a8:	ldr	r3, [r1]
   129ac:	mov	r1, #1
   129b0:	bl	10ea8 <fwrite_unlocked@plt>
   129b4:	cmp	r0, r9
   129b8:	bcc	12a68 <__assert_fail@plt+0x19e0>
   129bc:	ldr	r3, [sp, #8]
   129c0:	add	r7, r9, r7
   129c4:	add	sl, r9, sl
   129c8:	cmp	r7, r8
   129cc:	blt	1297c <__assert_fail@plt+0x18f4>
   129d0:	b	12a04 <__assert_fail@plt+0x197c>
   129d4:	ldr	r0, [sp, #4]
   129d8:	ldr	r2, [r0, #20]
   129dc:	ldr	r1, [r0, #24]
   129e0:	cmp	r2, r1
   129e4:	bcs	1295c <__assert_fail@plt+0x18d4>
   129e8:	add	r1, r2, #1
   129ec:	mov	sl, #0
   129f0:	str	r1, [r0, #20]
   129f4:	mov	r0, #10
   129f8:	strb	r0, [r2]
   129fc:	cmp	r7, r8
   12a00:	blt	1297c <__assert_fail@plt+0x18f4>
   12a04:	ldr	r0, [r5]
   12a08:	tst	r0, #16
   12a0c:	cmpeq	r6, #30720	; 0x7800
   12a10:	bne	12a1c <__assert_fail@plt+0x1994>
   12a14:	ands	r0, r0, #32
   12a18:	beq	12890 <__assert_fail@plt+0x1808>
   12a1c:	ldr	r0, [fp, #-4]
   12a20:	cmp	r0, #0
   12a24:	beq	12a7c <__assert_fail@plt+0x19f4>
   12a28:	cmp	sl, #1
   12a2c:	blt	12a7c <__assert_fail@plt+0x19f4>
   12a30:	ldr	r0, [sp, #4]
   12a34:	ldr	r2, [r0, #20]
   12a38:	ldr	r1, [r0, #24]
   12a3c:	cmp	r2, r1
   12a40:	bcs	12a58 <__assert_fail@plt+0x19d0>
   12a44:	add	r1, r2, #1
   12a48:	str	r1, [r0, #20]
   12a4c:	mov	r1, #10
   12a50:	strb	r1, [r2]
   12a54:	b	12a7c <__assert_fail@plt+0x19f4>
   12a58:	mov	r1, #10
   12a5c:	bl	11010 <__overflow@plt>
   12a60:	cmn	r0, #1
   12a64:	bne	12a7c <__assert_fail@plt+0x19f4>
   12a68:	bl	10fa4 <__errno_location@plt>
   12a6c:	ldr	r4, [r0]
   12a70:	movw	r1, #39172	; 0x9904
   12a74:	movt	r1, #1
   12a78:	b	12aa4 <__assert_fail@plt+0x1a1c>
   12a7c:	ldrb	r0, [r5]
   12a80:	tst	r0, #32
   12a84:	bne	12a94 <__assert_fail@plt+0x1a0c>
   12a88:	ldr	r1, [sp]
   12a8c:	mov	r0, r5
   12a90:	bl	12ac0 <__assert_fail@plt+0x1a38>
   12a94:	bl	10fa4 <__errno_location@plt>
   12a98:	ldr	r4, [r0]
   12a9c:	movw	r1, #39161	; 0x98f9
   12aa0:	movt	r1, #1
   12aa4:	mov	r0, #0
   12aa8:	mov	r2, #5
   12aac:	bl	10eb4 <dcgettext@plt>
   12ab0:	mov	r2, r0
   12ab4:	mov	r0, #1
   12ab8:	mov	r1, r4
   12abc:	bl	10f20 <error@plt>
   12ac0:	push	{fp, lr}
   12ac4:	mov	fp, sp
   12ac8:	mov	r5, r1
   12acc:	bl	142bc <__assert_fail@plt+0x3234>
   12ad0:	cmp	r0, #0
   12ad4:	bne	12ae0 <__assert_fail@plt+0x1a58>
   12ad8:	mov	r0, #0
   12adc:	bl	10f74 <exit@plt>
   12ae0:	movw	r1, #40629	; 0x9eb5
   12ae4:	mov	r0, r5
   12ae8:	movt	r1, #1
   12aec:	bl	10e48 <strcmp@plt>
   12af0:	mov	r6, r0
   12af4:	bl	10fa4 <__errno_location@plt>
   12af8:	ldr	r4, [r0]
   12afc:	cmp	r6, #0
   12b00:	bne	12b28 <__assert_fail@plt+0x1aa0>
   12b04:	movw	r1, #39198	; 0x991e
   12b08:	mov	r0, #0
   12b0c:	mov	r2, #5
   12b10:	movt	r1, #1
   12b14:	bl	10eb4 <dcgettext@plt>
   12b18:	mov	r2, r0
   12b1c:	mov	r0, #1
   12b20:	mov	r1, r4
   12b24:	bl	10f20 <error@plt>
   12b28:	mov	r0, #0
   12b2c:	mov	r1, #3
   12b30:	mov	r2, r5
   12b34:	bl	1619c <__assert_fail@plt+0x5114>
   12b38:	movw	r2, #38316	; 0x95ac
   12b3c:	mov	r3, r0
   12b40:	mov	r0, #1
   12b44:	mov	r1, r4
   12b48:	movt	r2, #1
   12b4c:	bl	10f20 <error@plt>
   12b50:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12b54:	add	fp, sp, #24
   12b58:	cmp	r1, #0
   12b5c:	cmpne	r3, #0
   12b60:	bne	12b78 <__assert_fail@plt+0x1af0>
   12b64:	cmp	r3, #0
   12b68:	beq	12b74 <__assert_fail@plt+0x1aec>
   12b6c:	mov	r0, #0
   12b70:	strb	r0, [r2]
   12b74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12b78:	movw	r8, #39955	; 0x9c13
   12b7c:	add	r0, r0, #2
   12b80:	rsb	lr, r3, #0
   12b84:	mov	ip, #0
   12b88:	mov	r9, #0
   12b8c:	movt	r8, #1
   12b90:	ldrb	r3, [r0, #-2]
   12b94:	mov	r5, r2
   12b98:	add	r6, lr, r9
   12b9c:	ldrb	r3, [r8, r3, lsr #3]
   12ba0:	strb	r3, [r5, r9]!
   12ba4:	adds	r3, r6, #1
   12ba8:	bcs	12b74 <__assert_fail@plt+0x1aec>
   12bac:	cmp	r1, #1
   12bb0:	ldrb	r3, [r0, #-2]
   12bb4:	mov	r4, #0
   12bb8:	add	r7, r6, #2
   12bbc:	ldrbne	r4, [r0, #-1]
   12bc0:	lsl	r3, r3, #2
   12bc4:	lsrne	r4, r4, #6
   12bc8:	cmp	r7, #0
   12bcc:	add	r3, r4, r3
   12bd0:	and	r3, r3, #31
   12bd4:	ldrb	r3, [r8, r3]
   12bd8:	strb	r3, [r5, #1]
   12bdc:	beq	12b74 <__assert_fail@plt+0x1aec>
   12be0:	add	r7, r6, #3
   12be4:	mov	r3, #61	; 0x3d
   12be8:	cmp	r1, #1
   12bec:	beq	12bfc <__assert_fail@plt+0x1b74>
   12bf0:	ldrb	r3, [r0, #-1]
   12bf4:	ubfx	r3, r3, #1, #5
   12bf8:	ldrb	r3, [r8, r3]
   12bfc:	cmp	r7, #0
   12c00:	strb	r3, [r5, #2]
   12c04:	beq	12b74 <__assert_fail@plt+0x1aec>
   12c08:	add	r7, r6, #4
   12c0c:	cmp	r1, #1
   12c10:	beq	12c30 <__assert_fail@plt+0x1ba8>
   12c14:	ldrb	r3, [r0, #-1]
   12c18:	subs	r1, r1, #2
   12c1c:	lsl	r3, r3, #4
   12c20:	beq	12d88 <__assert_fail@plt+0x1d00>
   12c24:	ldrb	r4, [r0]
   12c28:	lsr	r4, r4, #4
   12c2c:	b	12d8c <__assert_fail@plt+0x1d04>
   12c30:	mov	r3, #61	; 0x3d
   12c34:	mov	r1, #0
   12c38:	cmp	r7, #0
   12c3c:	strb	r3, [r5, #3]
   12c40:	beq	12b74 <__assert_fail@plt+0x1aec>
   12c44:	add	r7, r6, #5
   12c48:	cmp	r1, #0
   12c4c:	beq	12c6c <__assert_fail@plt+0x1be4>
   12c50:	ldrb	r3, [r0]
   12c54:	subs	r1, r1, #1
   12c58:	lsl	r3, r3, #1
   12c5c:	beq	12c84 <__assert_fail@plt+0x1bfc>
   12c60:	ldrb	r4, [r0, #1]
   12c64:	lsr	r4, r4, #7
   12c68:	b	12c88 <__assert_fail@plt+0x1c00>
   12c6c:	mov	r3, #61	; 0x3d
   12c70:	mov	r1, #0
   12c74:	cmp	r7, #0
   12c78:	strb	r3, [r5, #4]
   12c7c:	bne	12ca0 <__assert_fail@plt+0x1c18>
   12c80:	b	12b74 <__assert_fail@plt+0x1aec>
   12c84:	mov	r4, #0
   12c88:	add	r3, r4, r3
   12c8c:	and	r3, r3, #31
   12c90:	ldrb	r3, [r8, r3]
   12c94:	cmp	r7, #0
   12c98:	strb	r3, [r5, #4]
   12c9c:	beq	12b74 <__assert_fail@plt+0x1aec>
   12ca0:	add	r7, r6, #6
   12ca4:	cmp	r1, #0
   12ca8:	beq	12cec <__assert_fail@plt+0x1c64>
   12cac:	ldrb	r3, [r0, #1]
   12cb0:	ubfx	r3, r3, #2, #5
   12cb4:	ldrb	r3, [r8, r3]
   12cb8:	cmp	r7, #0
   12cbc:	strb	r3, [r5, #5]
   12cc0:	beq	12b74 <__assert_fail@plt+0x1aec>
   12cc4:	add	r7, r6, #7
   12cc8:	cmp	r1, #0
   12ccc:	beq	12d00 <__assert_fail@plt+0x1c78>
   12cd0:	ldrb	r3, [r0, #1]
   12cd4:	subs	r1, r1, #1
   12cd8:	lsl	r3, r3, #3
   12cdc:	beq	12d18 <__assert_fail@plt+0x1c90>
   12ce0:	ldrb	r4, [r0, #2]
   12ce4:	lsr	r4, r4, #5
   12ce8:	b	12d1c <__assert_fail@plt+0x1c94>
   12cec:	mov	r3, #61	; 0x3d
   12cf0:	cmp	r7, #0
   12cf4:	strb	r3, [r5, #5]
   12cf8:	bne	12cc4 <__assert_fail@plt+0x1c3c>
   12cfc:	b	12b74 <__assert_fail@plt+0x1aec>
   12d00:	mov	r3, #61	; 0x3d
   12d04:	mov	r1, #0
   12d08:	cmp	r7, #0
   12d0c:	strb	r3, [r5, #6]
   12d10:	bne	12d34 <__assert_fail@plt+0x1cac>
   12d14:	b	12b74 <__assert_fail@plt+0x1aec>
   12d18:	mov	r4, #0
   12d1c:	add	r3, r4, r3
   12d20:	and	r3, r3, #31
   12d24:	ldrb	r3, [r8, r3]
   12d28:	cmp	r7, #0
   12d2c:	strb	r3, [r5, #6]
   12d30:	beq	12b74 <__assert_fail@plt+0x1aec>
   12d34:	cmp	r1, #0
   12d38:	beq	12d58 <__assert_fail@plt+0x1cd0>
   12d3c:	ldrb	r3, [r0, #2]
   12d40:	and	r3, r3, #31
   12d44:	ldrb	r3, [r8, r3]
   12d48:	cmn	r6, #8
   12d4c:	strb	r3, [r5, #7]
   12d50:	bne	12d68 <__assert_fail@plt+0x1ce0>
   12d54:	b	12b74 <__assert_fail@plt+0x1aec>
   12d58:	mov	r3, #61	; 0x3d
   12d5c:	cmn	r6, #8
   12d60:	strb	r3, [r5, #7]
   12d64:	beq	12b74 <__assert_fail@plt+0x1aec>
   12d68:	subs	r1, r1, #1
   12d6c:	add	r9, r9, #8
   12d70:	adc	r3, ip, #0
   12d74:	cmp	r1, #0
   12d78:	addne	r0, r0, #5
   12d7c:	cmpne	r3, #0
   12d80:	bne	12b90 <__assert_fail@plt+0x1b08>
   12d84:	b	12da8 <__assert_fail@plt+0x1d20>
   12d88:	mov	r4, #0
   12d8c:	add	r3, r4, r3
   12d90:	and	r3, r3, #31
   12d94:	ldrb	r3, [r8, r3]
   12d98:	cmp	r7, #0
   12d9c:	strb	r3, [r5, #3]
   12da0:	bne	12c44 <__assert_fail@plt+0x1bbc>
   12da4:	b	12b74 <__assert_fail@plt+0x1aec>
   12da8:	add	r2, r2, r9
   12dac:	b	12b6c <__assert_fail@plt+0x1ae4>
   12db0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12db4:	add	fp, sp, #24
   12db8:	mov	r8, r0
   12dbc:	movw	r0, #26215	; 0x6667
   12dc0:	mov	r4, r1
   12dc4:	mov	r6, r2
   12dc8:	movt	r0, #26214	; 0x6666
   12dcc:	smmul	r0, r1, r0
   12dd0:	asr	r1, r0, #1
   12dd4:	add	r0, r1, r0, lsr #31
   12dd8:	add	r1, r0, r0, lsl #2
   12ddc:	subs	r1, r4, r1
   12de0:	addne	r0, r0, #1
   12de4:	cmn	r0, #1
   12de8:	ble	12df8 <__assert_fail@plt+0x1d70>
   12dec:	cmn	r0, #-268435455	; 0xf0000001
   12df0:	ble	12e0c <__assert_fail@plt+0x1d84>
   12df4:	b	12e4c <__assert_fail@plt+0x1dc4>
   12df8:	beq	12e0c <__assert_fail@plt+0x1d84>
   12dfc:	mov	r1, #-2147483648	; 0x80000000
   12e00:	sdiv	r1, r1, r0
   12e04:	cmp	r1, #8
   12e08:	blt	12e4c <__assert_fail@plt+0x1dc4>
   12e0c:	cmn	r4, #1
   12e10:	ble	12e4c <__assert_fail@plt+0x1dc4>
   12e14:	lsl	r7, r0, #3
   12e18:	orr	r5, r7, #1
   12e1c:	mov	r0, r5
   12e20:	bl	18a54 <__assert_fail@plt+0x79cc>
   12e24:	cmp	r0, #0
   12e28:	str	r0, [r6]
   12e2c:	beq	12e5c <__assert_fail@plt+0x1dd4>
   12e30:	mov	r2, r0
   12e34:	mov	r0, r8
   12e38:	mov	r1, r4
   12e3c:	mov	r3, r5
   12e40:	bl	12b50 <__assert_fail@plt+0x1ac8>
   12e44:	mov	r0, r7
   12e48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12e4c:	mov	r7, #0
   12e50:	mov	r0, r7
   12e54:	str	r7, [r6]
   12e58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12e5c:	mov	r0, r5
   12e60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12e64:	movw	r1, #39987	; 0x9c33
   12e68:	movt	r1, #1
   12e6c:	add	r0, r1, r0
   12e70:	ldrsb	r1, [r0]
   12e74:	mov	r0, #0
   12e78:	cmn	r1, #1
   12e7c:	movwgt	r0, #1
   12e80:	bx	lr
   12e84:	mov	r1, #0
   12e88:	str	r1, [r0]
   12e8c:	bx	lr
   12e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e94:	add	fp, sp, #28
   12e98:	sub	sp, sp, #20
   12e9c:	mov	r5, r1
   12ea0:	ldr	r1, [fp, #8]
   12ea4:	str	r3, [sp, #16]
   12ea8:	mov	r6, r2
   12eac:	cmp	r0, #0
   12eb0:	ldr	sl, [r1]
   12eb4:	str	sl, [sp, #12]
   12eb8:	beq	12ed4 <__assert_fail@plt+0x1e4c>
   12ebc:	ldr	r2, [r0]
   12ec0:	clz	r1, r6
   12ec4:	lsr	r9, r1, #5
   12ec8:	cmp	r2, #0
   12ecc:	movwne	r2, #1
   12ed0:	b	12edc <__assert_fail@plt+0x1e54>
   12ed4:	mov	r2, #0
   12ed8:	mov	r9, #0
   12edc:	add	r1, r0, #4
   12ee0:	cmp	r2, #0
   12ee4:	str	r0, [sp, #4]
   12ee8:	str	r1, [sp]
   12eec:	clz	r1, r0
   12ef0:	cmpeq	r9, #0
   12ef4:	lsr	r0, r1, #5
   12ef8:	str	r0, [sp, #8]
   12efc:	beq	130a0 <__assert_fail@plt+0x2018>
   12f00:	cmp	r6, #0
   12f04:	mov	r0, r6
   12f08:	movwne	r0, #1
   12f0c:	orr	r0, r9, r0
   12f10:	cmp	r0, #1
   12f14:	bne	13238 <__assert_fail@plt+0x21b0>
   12f18:	ldr	r4, [sp, #4]
   12f1c:	clz	r0, r6
   12f20:	mov	r8, r6
   12f24:	lsr	r0, r0, #5
   12f28:	tst	r0, #1
   12f2c:	bne	12f7c <__assert_fail@plt+0x1ef4>
   12f30:	b	12f64 <__assert_fail@plt+0x1edc>
   12f34:	sub	r8, r8, #1
   12f38:	add	r5, r5, #1
   12f3c:	cmp	r8, #0
   12f40:	ldr	sl, [sp, #12]
   12f44:	mov	r0, r8
   12f48:	movwne	r0, #1
   12f4c:	orrs	r0, r9, r0
   12f50:	clz	r0, r8
   12f54:	lsr	r0, r0, #5
   12f58:	beq	13244 <__assert_fail@plt+0x21bc>
   12f5c:	tst	r0, #1
   12f60:	bne	12f7c <__assert_fail@plt+0x1ef4>
   12f64:	ldrb	r0, [r5]
   12f68:	ldr	r1, [sp, #8]
   12f6c:	subs	r0, r0, #10
   12f70:	movwne	r0, #1
   12f74:	orrs	r0, r0, r1
   12f78:	beq	12f34 <__assert_fail@plt+0x1eac>
   12f7c:	add	r7, r5, r8
   12f80:	cmp	r4, #0
   12f84:	str	sl, [sp, #12]
   12f88:	beq	13034 <__assert_fail@plt+0x1fac>
   12f8c:	ldr	r6, [r4]
   12f90:	cmp	r6, #0
   12f94:	beq	12fa8 <__assert_fail@plt+0x1f20>
   12f98:	cmp	r6, #8
   12f9c:	bne	12fd0 <__assert_fail@plt+0x1f48>
   12fa0:	mov	r0, #0
   12fa4:	str	r0, [r4]
   12fa8:	sub	r0, r7, r5
   12fac:	mov	r6, #0
   12fb0:	cmp	r0, #8
   12fb4:	blt	12fd0 <__assert_fail@plt+0x1f48>
   12fb8:	mov	r0, r5
   12fbc:	mov	r1, #10
   12fc0:	mov	r2, #8
   12fc4:	bl	10fec <memchr@plt>
   12fc8:	cmp	r0, #0
   12fcc:	beq	1308c <__assert_fail@plt+0x2004>
   12fd0:	cmp	r8, #1
   12fd4:	blt	13020 <__assert_fail@plt+0x1f98>
   12fd8:	mov	r0, r5
   12fdc:	ldrb	r1, [r5], #1
   12fe0:	cmp	r1, #10
   12fe4:	bne	12ff4 <__assert_fail@plt+0x1f6c>
   12fe8:	cmp	r5, r7
   12fec:	bcc	12fd8 <__assert_fail@plt+0x1f50>
   12ff0:	b	1301c <__assert_fail@plt+0x1f94>
   12ff4:	add	r2, r6, #1
   12ff8:	mov	r3, r4
   12ffc:	add	r5, r0, #1
   13000:	str	r2, [r3], r6
   13004:	cmp	r5, r7
   13008:	strb	r1, [r3, #4]
   1300c:	ldr	r6, [r4]
   13010:	bcs	1301c <__assert_fail@plt+0x1f94>
   13014:	cmp	r6, #8
   13018:	bne	12fd8 <__assert_fail@plt+0x1f50>
   1301c:	add	r5, r0, #1
   13020:	ldr	r0, [sp]
   13024:	mov	r8, #0
   13028:	cmp	r6, #0
   1302c:	bne	13048 <__assert_fail@plt+0x1fc0>
   13030:	b	13244 <__assert_fail@plt+0x21bc>
   13034:	mov	r6, r8
   13038:	mov	r0, r5
   1303c:	mov	r8, #0
   13040:	cmp	r6, #0
   13044:	beq	13244 <__assert_fail@plt+0x21bc>
   13048:	ldr	r2, [sp, #8]
   1304c:	cmp	r6, #7
   13050:	mov	r1, #0
   13054:	movwgt	r1, #1
   13058:	orr	r1, r9, r1
   1305c:	orr	r1, r1, r2
   13060:	cmp	r1, #1
   13064:	bne	13244 <__assert_fail@plt+0x21bc>
   13068:	mov	r1, r6
   1306c:	add	r2, sp, #16
   13070:	add	r3, sp, #12
   13074:	bl	1326c <__assert_fail@plt+0x21e4>
   13078:	cmp	r0, #0
   1307c:	mov	r8, r6
   13080:	beq	13244 <__assert_fail@plt+0x21bc>
   13084:	sub	r8, r7, r5
   13088:	b	12f3c <__assert_fail@plt+0x1eb4>
   1308c:	add	r1, r5, #8
   13090:	mov	r0, r5
   13094:	mov	r6, #8
   13098:	mov	r5, r1
   1309c:	b	13068 <__assert_fail@plt+0x1fe0>
   130a0:	add	r9, sp, #16
   130a4:	add	r4, sp, #12
   130a8:	b	130b8 <__assert_fail@plt+0x2030>
   130ac:	ldr	sl, [sp, #12]
   130b0:	add	r5, r5, #8
   130b4:	sub	r6, r6, #8
   130b8:	mov	r0, r5
   130bc:	mov	r1, r6
   130c0:	mov	r2, r9
   130c4:	mov	r3, r4
   130c8:	bl	1326c <__assert_fail@plt+0x21e4>
   130cc:	cmp	r0, #0
   130d0:	bne	130ac <__assert_fail@plt+0x2024>
   130d4:	cmp	r6, #0
   130d8:	beq	13240 <__assert_fail@plt+0x21b8>
   130dc:	ldrb	r0, [r5]
   130e0:	ldr	r1, [sp, #8]
   130e4:	subs	r0, r0, #10
   130e8:	movwne	r0, #1
   130ec:	orrs	r0, r0, r1
   130f0:	beq	131b8 <__assert_fail@plt+0x2130>
   130f4:	ldr	r0, [sp, #12]
   130f8:	str	sl, [sp, #12]
   130fc:	ldr	r1, [sp, #16]
   13100:	add	r7, r5, r6
   13104:	sub	r0, r0, sl
   13108:	ldr	sl, [sp, #4]
   1310c:	add	r0, r1, r0
   13110:	str	r0, [sp, #16]
   13114:	cmp	sl, #0
   13118:	beq	131c8 <__assert_fail@plt+0x2140>
   1311c:	ldr	r8, [sl]
   13120:	cmp	r8, #0
   13124:	beq	13138 <__assert_fail@plt+0x20b0>
   13128:	cmp	r8, #8
   1312c:	bne	13160 <__assert_fail@plt+0x20d8>
   13130:	mov	r0, #0
   13134:	str	r0, [sl]
   13138:	sub	r0, r7, r5
   1313c:	mov	r8, #0
   13140:	cmp	r0, #8
   13144:	blt	13160 <__assert_fail@plt+0x20d8>
   13148:	mov	r0, r5
   1314c:	mov	r1, #10
   13150:	mov	r2, #8
   13154:	bl	10fec <memchr@plt>
   13158:	cmp	r0, #0
   1315c:	beq	13224 <__assert_fail@plt+0x219c>
   13160:	cmp	r6, #1
   13164:	blt	131d0 <__assert_fail@plt+0x2148>
   13168:	mov	r6, r8
   1316c:	mov	r0, r5
   13170:	ldrb	r1, [r5], #1
   13174:	cmp	r1, #10
   13178:	bne	13188 <__assert_fail@plt+0x2100>
   1317c:	cmp	r5, r7
   13180:	bcc	1316c <__assert_fail@plt+0x20e4>
   13184:	b	131b0 <__assert_fail@plt+0x2128>
   13188:	add	r2, r6, #1
   1318c:	mov	r3, sl
   13190:	add	r5, r0, #1
   13194:	str	r2, [r3], r6
   13198:	cmp	r5, r7
   1319c:	strb	r1, [r3, #4]
   131a0:	ldr	r6, [sl]
   131a4:	bcs	131b0 <__assert_fail@plt+0x2128>
   131a8:	cmp	r6, #8
   131ac:	bne	1316c <__assert_fail@plt+0x20e4>
   131b0:	add	r5, r0, #1
   131b4:	b	131d4 <__assert_fail@plt+0x214c>
   131b8:	ldr	sl, [sp, #12]
   131bc:	sub	r6, r6, #1
   131c0:	add	r5, r5, #1
   131c4:	b	130b8 <__assert_fail@plt+0x2030>
   131c8:	mov	r0, r5
   131cc:	b	131fc <__assert_fail@plt+0x2174>
   131d0:	mov	r6, r8
   131d4:	cmp	r6, #7
   131d8:	mov	r0, #0
   131dc:	mov	r8, #0
   131e0:	movwgt	r0, #1
   131e4:	cmp	r6, #0
   131e8:	beq	13244 <__assert_fail@plt+0x21bc>
   131ec:	ldr	r1, [sp, #8]
   131f0:	orrs	r0, r0, r1
   131f4:	ldr	r0, [sp]
   131f8:	beq	13244 <__assert_fail@plt+0x21bc>
   131fc:	mov	r1, r6
   13200:	mov	r2, r9
   13204:	mov	r3, r4
   13208:	bl	1326c <__assert_fail@plt+0x21e4>
   1320c:	cmp	r0, #0
   13210:	mov	r8, r6
   13214:	beq	13244 <__assert_fail@plt+0x21bc>
   13218:	ldr	sl, [sp, #12]
   1321c:	sub	r6, r7, r5
   13220:	b	130b8 <__assert_fail@plt+0x2030>
   13224:	add	r1, r5, #8
   13228:	mov	r0, r5
   1322c:	mov	r6, #8
   13230:	mov	r5, r1
   13234:	b	131fc <__assert_fail@plt+0x2174>
   13238:	mov	r8, r6
   1323c:	b	13244 <__assert_fail@plt+0x21bc>
   13240:	mov	r8, #0
   13244:	ldr	r0, [fp, #8]
   13248:	ldr	r1, [sp, #12]
   1324c:	mov	r2, r0
   13250:	ldr	r0, [r0]
   13254:	sub	r0, r0, r1
   13258:	str	r0, [r2]
   1325c:	clz	r0, r8
   13260:	lsr	r0, r0, #5
   13264:	sub	sp, fp, #28
   13268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1326c:	push	{r4, r5, r6, sl, fp, lr}
   13270:	add	fp, sp, #16
   13274:	mov	ip, #0
   13278:	cmp	r1, #8
   1327c:	blt	13400 <__assert_fail@plt+0x2378>
   13280:	ldrb	r1, [r0]
   13284:	movw	lr, #39987	; 0x9c33
   13288:	movt	lr, #1
   1328c:	add	r1, lr, r1
   13290:	ldrsb	r4, [r1]
   13294:	cmp	r4, #0
   13298:	bmi	13400 <__assert_fail@plt+0x2378>
   1329c:	ldrb	r1, [r0, #1]
   132a0:	add	r1, lr, r1
   132a4:	ldrsb	r1, [r1]
   132a8:	cmp	r1, #0
   132ac:	bmi	13400 <__assert_fail@plt+0x2378>
   132b0:	ldr	r5, [r3]
   132b4:	ldr	ip, [r2]
   132b8:	cmp	r5, #0
   132bc:	beq	13304 <__assert_fail@plt+0x227c>
   132c0:	uxtb	r5, r1
   132c4:	lsr	r5, r5, #2
   132c8:	orr	r4, r5, r4, lsl #3
   132cc:	strb	r4, [ip], #1
   132d0:	ldr	r4, [r3]
   132d4:	sub	r5, r4, #1
   132d8:	str	r5, [r3]
   132dc:	ldrb	r4, [r0, #2]
   132e0:	cmp	r4, #61	; 0x3d
   132e4:	bne	13314 <__assert_fail@plt+0x228c>
   132e8:	ldrb	r1, [r0, #3]
   132ec:	cmp	r1, #61	; 0x3d
   132f0:	bne	134ac <__assert_fail@plt+0x2424>
   132f4:	ldrb	r1, [r0, #4]
   132f8:	cmp	r1, #61	; 0x3d
   132fc:	beq	1336c <__assert_fail@plt+0x22e4>
   13300:	b	134ac <__assert_fail@plt+0x2424>
   13304:	mov	r5, #0
   13308:	ldrb	r4, [r0, #2]
   1330c:	cmp	r4, #61	; 0x3d
   13310:	beq	132e8 <__assert_fail@plt+0x2260>
   13314:	add	r4, lr, r4
   13318:	ldrsb	r6, [r4]
   1331c:	cmp	r6, #0
   13320:	bmi	134ac <__assert_fail@plt+0x2424>
   13324:	ldrb	r4, [r0, #3]
   13328:	add	r4, lr, r4
   1332c:	ldrsb	r4, [r4]
   13330:	cmn	r4, #1
   13334:	ble	134ac <__assert_fail@plt+0x2424>
   13338:	cmp	r5, #0
   1333c:	beq	1337c <__assert_fail@plt+0x22f4>
   13340:	lsl	r5, r6, #1
   13344:	orr	r1, r5, r1, lsl #6
   13348:	uxtb	r5, r4
   1334c:	orr	r1, r1, r5, lsr #4
   13350:	strb	r1, [ip], #1
   13354:	ldr	r1, [r3]
   13358:	sub	r5, r1, #1
   1335c:	str	r5, [r3]
   13360:	ldrb	r1, [r0, #4]
   13364:	cmp	r1, #61	; 0x3d
   13368:	bne	1338c <__assert_fail@plt+0x2304>
   1336c:	ldrb	r1, [r0, #5]
   13370:	cmp	r1, #61	; 0x3d
   13374:	beq	133e0 <__assert_fail@plt+0x2358>
   13378:	b	134ac <__assert_fail@plt+0x2424>
   1337c:	mov	r5, #0
   13380:	ldrb	r1, [r0, #4]
   13384:	cmp	r1, #61	; 0x3d
   13388:	beq	1336c <__assert_fail@plt+0x22e4>
   1338c:	add	r1, lr, r1
   13390:	ldrsb	r1, [r1]
   13394:	cmn	r1, #1
   13398:	ble	134ac <__assert_fail@plt+0x2424>
   1339c:	cmp	r5, #0
   133a0:	beq	133d0 <__assert_fail@plt+0x2348>
   133a4:	uxtb	r5, r1
   133a8:	lsr	r5, r5, #1
   133ac:	orr	r4, r5, r4, lsl #4
   133b0:	strb	r4, [ip], #1
   133b4:	ldr	r4, [r3]
   133b8:	sub	r4, r4, #1
   133bc:	str	r4, [r3]
   133c0:	ldrb	r5, [r0, #5]
   133c4:	cmp	r5, #61	; 0x3d
   133c8:	beq	133e0 <__assert_fail@plt+0x2358>
   133cc:	b	13408 <__assert_fail@plt+0x2380>
   133d0:	mov	r4, #0
   133d4:	ldrb	r5, [r0, #5]
   133d8:	cmp	r5, #61	; 0x3d
   133dc:	bne	13408 <__assert_fail@plt+0x2380>
   133e0:	ldrb	r1, [r0, #6]
   133e4:	cmp	r1, #61	; 0x3d
   133e8:	bne	134ac <__assert_fail@plt+0x2424>
   133ec:	ldrb	r0, [r0, #7]
   133f0:	cmp	r0, #61	; 0x3d
   133f4:	bne	134ac <__assert_fail@plt+0x2424>
   133f8:	str	ip, [r2]
   133fc:	mov	ip, #1
   13400:	mov	r0, ip
   13404:	pop	{r4, r5, r6, sl, fp, pc}
   13408:	add	r5, lr, r5
   1340c:	ldrsb	r5, [r5]
   13410:	cmp	r5, #0
   13414:	bmi	134ac <__assert_fail@plt+0x2424>
   13418:	ldrb	r6, [r0, #6]
   1341c:	add	r6, lr, r6
   13420:	ldrsb	r6, [r6]
   13424:	cmn	r6, #1
   13428:	ble	134ac <__assert_fail@plt+0x2424>
   1342c:	cmp	r4, #0
   13430:	beq	13464 <__assert_fail@plt+0x23dc>
   13434:	uxtb	r4, r6
   13438:	lsr	r4, r4, #3
   1343c:	orr	r4, r4, r5, lsl #2
   13440:	orr	r1, r4, r1, lsl #7
   13444:	strb	r1, [ip], #1
   13448:	ldr	r1, [r3]
   1344c:	sub	r1, r1, #1
   13450:	str	r1, [r3]
   13454:	ldrb	r4, [r0, #7]
   13458:	cmp	r4, #61	; 0x3d
   1345c:	beq	133f8 <__assert_fail@plt+0x2370>
   13460:	b	13474 <__assert_fail@plt+0x23ec>
   13464:	mov	r1, #0
   13468:	ldrb	r4, [r0, #7]
   1346c:	cmp	r4, #61	; 0x3d
   13470:	beq	133f8 <__assert_fail@plt+0x2370>
   13474:	add	r4, lr, r4
   13478:	ldrsb	r4, [r4]
   1347c:	cmn	r4, #1
   13480:	ble	134ac <__assert_fail@plt+0x2424>
   13484:	cmp	r1, #0
   13488:	beq	133f8 <__assert_fail@plt+0x2370>
   1348c:	ldrb	r0, [r0, #6]
   13490:	ldrb	r0, [lr, r0]
   13494:	orr	r0, r4, r0, lsl #5
   13498:	strb	r0, [ip], #1
   1349c:	ldr	r0, [r3]
   134a0:	sub	r0, r0, #1
   134a4:	str	r0, [r3]
   134a8:	b	133f8 <__assert_fail@plt+0x2370>
   134ac:	str	ip, [r2]
   134b0:	mov	ip, #0
   134b4:	mov	r0, ip
   134b8:	pop	{r4, r5, r6, sl, fp, pc}
   134bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   134c0:	add	fp, sp, #24
   134c4:	sub	sp, sp, #8
   134c8:	mov	r7, r0
   134cc:	asr	r0, r2, #3
   134d0:	mov	r4, r3
   134d4:	mov	r6, r2
   134d8:	mov	r8, r1
   134dc:	add	r0, r0, r0, lsl #2
   134e0:	add	r0, r0, #5
   134e4:	str	r0, [sp, #4]
   134e8:	bl	18a54 <__assert_fail@plt+0x79cc>
   134ec:	mov	r5, #1
   134f0:	cmp	r0, #0
   134f4:	str	r0, [r4]
   134f8:	beq	13530 <__assert_fail@plt+0x24a8>
   134fc:	mov	r3, r0
   13500:	add	r0, sp, #4
   13504:	mov	r1, r8
   13508:	mov	r2, r6
   1350c:	str	r0, [sp]
   13510:	mov	r0, r7
   13514:	bl	12e90 <__assert_fail@plt+0x1e08>
   13518:	cmp	r0, #0
   1351c:	beq	1353c <__assert_fail@plt+0x24b4>
   13520:	ldr	r0, [fp, #8]
   13524:	cmp	r0, #0
   13528:	ldrne	r1, [sp, #4]
   1352c:	strne	r1, [r0]
   13530:	mov	r0, r5
   13534:	sub	sp, fp, #24
   13538:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1353c:	ldr	r0, [r4]
   13540:	bl	143b4 <__assert_fail@plt+0x332c>
   13544:	mov	r5, #0
   13548:	str	r5, [r4]
   1354c:	mov	r0, r5
   13550:	sub	sp, fp, #24
   13554:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1355c:	add	fp, sp, #28
   13560:	tst	r3, #3
   13564:	bne	135dc <__assert_fail@plt+0x2554>
   13568:	asr	r7, r3, #2
   1356c:	add	r7, r7, r7, lsl #1
   13570:	cmp	r7, r1
   13574:	bne	135dc <__assert_fail@plt+0x2554>
   13578:	cmp	r1, #0
   1357c:	beq	135f8 <__assert_fail@plt+0x2570>
   13580:	movw	r3, #40243	; 0x9d33
   13584:	movt	r3, #1
   13588:	ldrb	r7, [r0]
   1358c:	subs	r1, r1, #3
   13590:	ldrb	r6, [r3, r7, lsr #2]
   13594:	strb	r6, [r2]
   13598:	ldrb	r6, [r0, #1]
   1359c:	lsr	r5, r6, #4
   135a0:	bfi	r5, r7, #4, #2
   135a4:	ldrb	r7, [r3, r5]
   135a8:	strb	r7, [r2, #1]
   135ac:	ldrb	r7, [r0, #2]
   135b0:	add	r0, r0, #3
   135b4:	and	r5, r7, #63	; 0x3f
   135b8:	lsr	r7, r7, #6
   135bc:	bfi	r7, r6, #2, #4
   135c0:	ldrb	r5, [r3, r5]
   135c4:	ldrb	r7, [r3, r7]
   135c8:	strb	r5, [r2, #3]
   135cc:	strb	r7, [r2, #2]
   135d0:	add	r2, r2, #4
   135d4:	bne	13588 <__assert_fail@plt+0x2500>
   135d8:	b	135f8 <__assert_fail@plt+0x2570>
   135dc:	cmp	r1, #0
   135e0:	cmpne	r3, #0
   135e4:	bne	135fc <__assert_fail@plt+0x2574>
   135e8:	cmp	r3, #0
   135ec:	beq	135f8 <__assert_fail@plt+0x2570>
   135f0:	mov	r0, #0
   135f4:	strb	r0, [r2]
   135f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135fc:	movw	r6, #40243	; 0x9d33
   13600:	add	r0, r0, #1
   13604:	sub	ip, r3, #3
   13608:	sub	lr, r3, #2
   1360c:	sub	sl, r3, #1
   13610:	sub	r9, r3, #4
   13614:	mov	r8, #0
   13618:	mov	r7, #0
   1361c:	movt	r6, #1
   13620:	ldrb	r3, [r0, #-1]
   13624:	mov	r5, r2
   13628:	cmp	sl, r7
   1362c:	ldrb	r3, [r6, r3, lsr #2]
   13630:	strb	r3, [r5, r7]!
   13634:	beq	135f8 <__assert_fail@plt+0x2570>
   13638:	cmp	r1, #1
   1363c:	ldrb	r3, [r0, #-1]
   13640:	mov	r4, #0
   13644:	ldrbne	r4, [r0]
   13648:	lsl	r3, r3, #4
   1364c:	lsrne	r4, r4, #4
   13650:	cmp	lr, r7
   13654:	add	r3, r4, r3
   13658:	and	r3, r3, #63	; 0x3f
   1365c:	ldrb	r3, [r6, r3]
   13660:	strb	r3, [r5, #1]
   13664:	beq	135f8 <__assert_fail@plt+0x2570>
   13668:	cmp	r1, #1
   1366c:	beq	1368c <__assert_fail@plt+0x2604>
   13670:	ldrb	r3, [r0]
   13674:	subs	r1, r1, #2
   13678:	lsl	r3, r3, #2
   1367c:	beq	136f4 <__assert_fail@plt+0x266c>
   13680:	ldrb	r4, [r0, #1]
   13684:	lsr	r4, r4, #6
   13688:	b	136f8 <__assert_fail@plt+0x2670>
   1368c:	mov	r3, #61	; 0x3d
   13690:	mov	r1, #0
   13694:	cmp	ip, r7
   13698:	strb	r3, [r5, #2]
   1369c:	beq	135f8 <__assert_fail@plt+0x2570>
   136a0:	cmp	r1, #0
   136a4:	beq	136c4 <__assert_fail@plt+0x263c>
   136a8:	ldrb	r3, [r0, #1]
   136ac:	and	r3, r3, #63	; 0x3f
   136b0:	ldrb	r3, [r6, r3]
   136b4:	cmp	r9, r7
   136b8:	strb	r3, [r5, #3]
   136bc:	bne	136d4 <__assert_fail@plt+0x264c>
   136c0:	b	135f8 <__assert_fail@plt+0x2570>
   136c4:	mov	r3, #61	; 0x3d
   136c8:	cmp	r9, r7
   136cc:	strb	r3, [r5, #3]
   136d0:	beq	135f8 <__assert_fail@plt+0x2570>
   136d4:	subs	r1, r1, #1
   136d8:	add	r7, r7, #4
   136dc:	adc	r3, r8, #0
   136e0:	cmp	r1, #0
   136e4:	addne	r0, r0, #3
   136e8:	cmpne	r3, #0
   136ec:	bne	13620 <__assert_fail@plt+0x2598>
   136f0:	b	13714 <__assert_fail@plt+0x268c>
   136f4:	mov	r4, #0
   136f8:	add	r3, r4, r3
   136fc:	and	r3, r3, #63	; 0x3f
   13700:	ldrb	r3, [r6, r3]
   13704:	cmp	ip, r7
   13708:	strb	r3, [r5, #2]
   1370c:	bne	136a0 <__assert_fail@plt+0x2618>
   13710:	b	135f8 <__assert_fail@plt+0x2570>
   13714:	add	r2, r2, r7
   13718:	b	135f0 <__assert_fail@plt+0x2568>
   1371c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13720:	add	fp, sp, #24
   13724:	mov	r8, r0
   13728:	movw	r0, #21846	; 0x5556
   1372c:	mov	r4, r1
   13730:	mov	r6, r2
   13734:	movt	r0, #21845	; 0x5555
   13738:	smmul	r0, r1, r0
   1373c:	add	r0, r0, r0, lsr #31
   13740:	add	r1, r0, r0, lsl #1
   13744:	subs	r1, r4, r1
   13748:	addne	r0, r0, #1
   1374c:	cmn	r0, #1
   13750:	ble	13760 <__assert_fail@plt+0x26d8>
   13754:	cmn	r0, #-536870911	; 0xe0000001
   13758:	ble	13774 <__assert_fail@plt+0x26ec>
   1375c:	b	137b4 <__assert_fail@plt+0x272c>
   13760:	beq	13774 <__assert_fail@plt+0x26ec>
   13764:	mov	r1, #-2147483648	; 0x80000000
   13768:	sdiv	r1, r1, r0
   1376c:	cmp	r1, #4
   13770:	blt	137b4 <__assert_fail@plt+0x272c>
   13774:	cmn	r4, #1
   13778:	ble	137b4 <__assert_fail@plt+0x272c>
   1377c:	lsl	r7, r0, #2
   13780:	orr	r5, r7, #1
   13784:	mov	r0, r5
   13788:	bl	18a54 <__assert_fail@plt+0x79cc>
   1378c:	cmp	r0, #0
   13790:	str	r0, [r6]
   13794:	beq	137c4 <__assert_fail@plt+0x273c>
   13798:	mov	r2, r0
   1379c:	mov	r0, r8
   137a0:	mov	r1, r4
   137a4:	mov	r3, r5
   137a8:	bl	13558 <__assert_fail@plt+0x24d0>
   137ac:	mov	r0, r7
   137b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   137b4:	mov	r7, #0
   137b8:	mov	r0, r7
   137bc:	str	r7, [r6]
   137c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   137c4:	mov	r0, r5
   137c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   137cc:	movw	r1, #40307	; 0x9d73
   137d0:	movt	r1, #1
   137d4:	add	r0, r1, r0
   137d8:	ldrsb	r1, [r0]
   137dc:	mov	r0, #0
   137e0:	cmn	r1, #1
   137e4:	movwgt	r0, #1
   137e8:	bx	lr
   137ec:	mov	r1, #0
   137f0:	str	r1, [r0]
   137f4:	bx	lr
   137f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137fc:	add	fp, sp, #28
   13800:	sub	sp, sp, #36	; 0x24
   13804:	mov	ip, r0
   13808:	ldr	r0, [fp, #8]
   1380c:	mov	r4, r1
   13810:	mov	lr, #0
   13814:	cmp	ip, #0
   13818:	ldr	r9, [r0]
   1381c:	mov	r0, #0
   13820:	beq	13838 <__assert_fail@plt+0x27b0>
   13824:	clz	r0, r2
   13828:	lsr	lr, r0, #5
   1382c:	ldr	r0, [ip]
   13830:	cmp	r0, #0
   13834:	movwne	r0, #1
   13838:	orr	r0, r0, lr
   1383c:	movw	r5, #40307	; 0x9d73
   13840:	str	ip, [sp, #16]
   13844:	str	lr, [sp, #8]
   13848:	str	r0, [sp, #20]
   1384c:	add	r0, ip, #4
   13850:	movt	r5, #1
   13854:	str	r0, [sp, #4]
   13858:	clz	r0, ip
   1385c:	lsr	r7, r0, #5
   13860:	str	r7, [sp, #12]
   13864:	b	13874 <__assert_fail@plt+0x27ec>
   13868:	sub	r2, sl, #1
   1386c:	add	r4, r6, #1
   13870:	mov	lr, r1
   13874:	ldr	r1, [sp, #20]
   13878:	cmp	r2, #2
   1387c:	mov	r0, #0
   13880:	movwlt	r0, #1
   13884:	orrs	r0, r1, r0
   13888:	beq	138c4 <__assert_fail@plt+0x283c>
   1388c:	mov	r6, r4
   13890:	mov	r8, r2
   13894:	cmp	r8, #0
   13898:	mov	r0, r8
   1389c:	movwne	r0, #1
   138a0:	orr	r0, lr, r0
   138a4:	cmp	r0, #1
   138a8:	bne	13d84 <__assert_fail@plt+0x2cfc>
   138ac:	mov	r1, lr
   138b0:	cmp	r8, #0
   138b4:	beq	13a14 <__assert_fail@plt+0x298c>
   138b8:	mov	sl, r8
   138bc:	str	r9, [sp, #32]
   138c0:	b	13ab0 <__assert_fail@plt+0x2a28>
   138c4:	sub	r0, r2, #2
   138c8:	mov	ip, r3
   138cc:	mov	r1, #0
   138d0:	mov	sl, r2
   138d4:	mov	r6, r4
   138d8:	str	r0, [sp, #28]
   138dc:	sub	r0, r2, #3
   138e0:	str	r0, [sp, #24]
   138e4:	mov	r0, #0
   138e8:	mov	lr, r4
   138ec:	ldrb	r3, [r4, r0]!
   138f0:	str	r9, [sp, #32]
   138f4:	add	r3, r5, r3
   138f8:	ldrsb	r7, [r3]
   138fc:	cmp	r7, #0
   13900:	bmi	13aa4 <__assert_fail@plt+0x2a1c>
   13904:	ldrb	r3, [r4, #1]
   13908:	add	r3, r5, r3
   1390c:	ldrsb	r3, [r3]
   13910:	cmp	r3, #0
   13914:	bmi	13a44 <__assert_fail@plt+0x29bc>
   13918:	cmp	r9, #0
   1391c:	beq	13984 <__assert_fail@plt+0x28fc>
   13920:	uxtb	r5, r3
   13924:	sub	r9, r9, #1
   13928:	lsr	r5, r5, #4
   1392c:	orr	r5, r5, r7, lsl #2
   13930:	strb	r5, [ip], #1
   13934:	movw	r5, #40307	; 0x9d73
   13938:	movt	r5, #1
   1393c:	ldr	r7, [sp, #28]
   13940:	cmp	r7, r0
   13944:	beq	13a4c <__assert_fail@plt+0x29c4>
   13948:	ldrb	r7, [r4, #2]
   1394c:	cmp	r7, #61	; 0x3d
   13950:	beq	13a54 <__assert_fail@plt+0x29cc>
   13954:	add	r5, r5, r7
   13958:	ldrsb	r7, [r5]
   1395c:	cmp	r7, #0
   13960:	bmi	13a88 <__assert_fail@plt+0x2a00>
   13964:	cmp	r9, #0
   13968:	beq	13998 <__assert_fail@plt+0x2910>
   1396c:	uxtb	r5, r7
   13970:	sub	r9, r9, #1
   13974:	lsr	r5, r5, #2
   13978:	orr	r3, r5, r3, lsl #4
   1397c:	strb	r3, [ip], #1
   13980:	b	1399c <__assert_fail@plt+0x2914>
   13984:	mov	r9, #0
   13988:	ldr	r7, [sp, #28]
   1398c:	cmp	r7, r0
   13990:	bne	13948 <__assert_fail@plt+0x28c0>
   13994:	b	13a4c <__assert_fail@plt+0x29c4>
   13998:	mov	r9, #0
   1399c:	ldr	r3, [sp, #24]
   139a0:	movw	r5, #40307	; 0x9d73
   139a4:	movt	r5, #1
   139a8:	cmp	r3, r0
   139ac:	beq	13aa0 <__assert_fail@plt+0x2a18>
   139b0:	ldrb	r3, [r4, #3]
   139b4:	cmp	r3, #61	; 0x3d
   139b8:	beq	13d1c <__assert_fail@plt+0x2c94>
   139bc:	add	r3, r5, r3
   139c0:	ldrsb	r3, [r3]
   139c4:	cmp	r3, #0
   139c8:	bmi	13aa4 <__assert_fail@plt+0x2a1c>
   139cc:	cmp	r9, #0
   139d0:	sub	r1, r1, #4
   139d4:	add	r6, r4, #4
   139d8:	add	r0, r0, #4
   139dc:	sub	sl, sl, #4
   139e0:	mov	r4, lr
   139e4:	orrne	r3, r3, r7, lsl #6
   139e8:	add	r8, r2, r1
   139ec:	subne	r9, r9, #1
   139f0:	strbne	r3, [ip], #1
   139f4:	cmp	r8, #1
   139f8:	bgt	138e8 <__assert_fail@plt+0x2860>
   139fc:	mov	r3, ip
   13a00:	ldr	ip, [sp, #16]
   13a04:	ldr	lr, [sp, #8]
   13a08:	ldr	r7, [sp, #12]
   13a0c:	add	r6, r4, r0
   13a10:	b	13894 <__assert_fail@plt+0x280c>
   13a14:	mov	sl, #0
   13a18:	str	r9, [sp, #32]
   13a1c:	add	r5, r6, sl
   13a20:	cmp	ip, #0
   13a24:	bne	13ad0 <__assert_fail@plt+0x2a48>
   13a28:	str	r6, [sp, #28]
   13a2c:	mov	r4, sl
   13a30:	mov	lr, r1
   13a34:	mov	r8, #0
   13a38:	cmp	r4, #0
   13a3c:	bne	13bb0 <__assert_fail@plt+0x2b28>
   13a40:	b	13d80 <__assert_fail@plt+0x2cf8>
   13a44:	add	sl, r2, r1
   13a48:	b	13aa4 <__assert_fail@plt+0x2a1c>
   13a4c:	mov	sl, #2
   13a50:	b	13aa4 <__assert_fail@plt+0x2a1c>
   13a54:	ldr	r7, [sp, #12]
   13a58:	sub	r3, r2, #4
   13a5c:	cmp	r3, r0
   13a60:	mov	r3, ip
   13a64:	bne	13d4c <__assert_fail@plt+0x2cc4>
   13a68:	add	r2, lr, r0
   13a6c:	ldr	ip, [sp, #16]
   13a70:	ldr	r1, [sp, #8]
   13a74:	mov	sl, #4
   13a78:	ldrb	r2, [r2, #3]
   13a7c:	cmp	r2, #61	; 0x3d
   13a80:	bne	13ab0 <__assert_fail@plt+0x2a28>
   13a84:	b	13d38 <__assert_fail@plt+0x2cb0>
   13a88:	mov	r3, ip
   13a8c:	add	ip, sp, #8
   13a90:	movw	r5, #40307	; 0x9d73
   13a94:	ldm	ip, {r1, r7, ip}
   13a98:	movt	r5, #1
   13a9c:	b	13ab0 <__assert_fail@plt+0x2a28>
   13aa0:	mov	sl, #3
   13aa4:	mov	r3, ip
   13aa8:	add	ip, sp, #8
   13aac:	ldm	ip, {r1, r7, ip}
   13ab0:	ldrb	r0, [r6]
   13ab4:	subs	r0, r0, #10
   13ab8:	movwne	r0, #1
   13abc:	orrs	r0, r0, r7
   13ac0:	beq	13868 <__assert_fail@plt+0x27e0>
   13ac4:	add	r5, r6, sl
   13ac8:	cmp	ip, #0
   13acc:	beq	13a28 <__assert_fail@plt+0x29a0>
   13ad0:	ldr	r4, [ip]
   13ad4:	mov	lr, r1
   13ad8:	cmp	r4, #0
   13adc:	beq	13af0 <__assert_fail@plt+0x2a68>
   13ae0:	cmp	r4, #4
   13ae4:	bne	13b34 <__assert_fail@plt+0x2aac>
   13ae8:	mov	r0, #0
   13aec:	str	r0, [ip]
   13af0:	sub	r0, r5, r6
   13af4:	mov	r4, #0
   13af8:	cmp	r0, #4
   13afc:	blt	13b34 <__assert_fail@plt+0x2aac>
   13b00:	mov	r0, r6
   13b04:	mov	r1, #10
   13b08:	mov	r2, #4
   13b0c:	mov	r8, r7
   13b10:	mov	r7, lr
   13b14:	str	r3, [sp, #24]
   13b18:	bl	10fec <memchr@plt>
   13b1c:	ldr	r3, [sp, #24]
   13b20:	ldr	ip, [sp, #16]
   13b24:	mov	lr, r7
   13b28:	mov	r7, r8
   13b2c:	cmp	r0, #0
   13b30:	beq	13d5c <__assert_fail@plt+0x2cd4>
   13b34:	cmp	sl, #1
   13b38:	blt	13b9c <__assert_fail@plt+0x2b14>
   13b3c:	mov	r0, r6
   13b40:	ldrb	r1, [r6], #1
   13b44:	cmp	r1, #10
   13b48:	bne	13b58 <__assert_fail@plt+0x2ad0>
   13b4c:	cmp	r6, r5
   13b50:	bcc	13b3c <__assert_fail@plt+0x2ab4>
   13b54:	b	13b80 <__assert_fail@plt+0x2af8>
   13b58:	add	r2, r4, #1
   13b5c:	mov	r6, ip
   13b60:	str	r2, [r6], r4
   13b64:	strb	r1, [r6, #4]
   13b68:	add	r6, r0, #1
   13b6c:	ldr	r4, [ip]
   13b70:	cmp	r6, r5
   13b74:	bcs	13b80 <__assert_fail@plt+0x2af8>
   13b78:	cmp	r4, #4
   13b7c:	bne	13b3c <__assert_fail@plt+0x2ab4>
   13b80:	add	r0, r0, #1
   13b84:	str	r0, [sp, #28]
   13b88:	ldr	r6, [sp, #4]
   13b8c:	mov	r8, #0
   13b90:	cmp	r4, #0
   13b94:	bne	13bb0 <__assert_fail@plt+0x2b28>
   13b98:	b	13d80 <__assert_fail@plt+0x2cf8>
   13b9c:	str	r6, [sp, #28]
   13ba0:	ldr	r6, [sp, #4]
   13ba4:	mov	r8, #0
   13ba8:	cmp	r4, #0
   13bac:	beq	13d80 <__assert_fail@plt+0x2cf8>
   13bb0:	cmp	r4, #3
   13bb4:	mov	r0, #0
   13bb8:	movwgt	r0, #1
   13bbc:	orr	r0, lr, r0
   13bc0:	orr	r0, r0, r7
   13bc4:	cmp	r0, #1
   13bc8:	bne	13d80 <__assert_fail@plt+0x2cf8>
   13bcc:	cmp	r4, #2
   13bd0:	blt	13d7c <__assert_fail@plt+0x2cf4>
   13bd4:	ldrb	r0, [r6]
   13bd8:	movw	r1, #40307	; 0x9d73
   13bdc:	movt	r1, #1
   13be0:	add	r0, r1, r0
   13be4:	ldrsb	r2, [r0]
   13be8:	cmp	r2, #0
   13bec:	ldrbpl	r0, [r6, #1]
   13bf0:	addpl	r0, r1, r0
   13bf4:	ldrsbpl	r0, [r0]
   13bf8:	cmppl	r0, #0
   13bfc:	bmi	13d7c <__assert_fail@plt+0x2cf4>
   13c00:	ldr	r1, [sp, #32]
   13c04:	mov	sl, r7
   13c08:	sub	r7, r9, r1
   13c0c:	cmp	r1, #0
   13c10:	add	r3, r3, r7
   13c14:	beq	13cc8 <__assert_fail@plt+0x2c40>
   13c18:	mov	r9, r1
   13c1c:	uxtb	r1, r0
   13c20:	sub	r9, r9, #1
   13c24:	lsr	r1, r1, #4
   13c28:	orr	r2, r1, r2, lsl #2
   13c2c:	strb	r2, [r3], #1
   13c30:	mov	r7, sl
   13c34:	mov	r8, #2
   13c38:	cmp	r4, #2
   13c3c:	beq	13d84 <__assert_fail@plt+0x2cfc>
   13c40:	ldrb	r2, [r6, #2]
   13c44:	cmp	r2, #61	; 0x3d
   13c48:	bne	13c68 <__assert_fail@plt+0x2be0>
   13c4c:	cmp	r4, #4
   13c50:	bne	13da8 <__assert_fail@plt+0x2d20>
   13c54:	ldrb	r0, [r6, #3]
   13c58:	cmp	r0, #61	; 0x3d
   13c5c:	ldr	r4, [sp, #28]
   13c60:	beq	13d0c <__assert_fail@plt+0x2c84>
   13c64:	b	13d84 <__assert_fail@plt+0x2cfc>
   13c68:	movw	r1, #40307	; 0x9d73
   13c6c:	movt	r1, #1
   13c70:	add	r2, r1, r2
   13c74:	ldrsb	r2, [r2]
   13c78:	cmp	r2, #0
   13c7c:	bmi	13da8 <__assert_fail@plt+0x2d20>
   13c80:	cmp	r9, #0
   13c84:	beq	13d6c <__assert_fail@plt+0x2ce4>
   13c88:	uxtb	r7, r2
   13c8c:	sub	r9, r9, #1
   13c90:	lsr	r7, r7, #2
   13c94:	orr	r0, r7, r0, lsl #4
   13c98:	mov	r7, sl
   13c9c:	strb	r0, [r3], #1
   13ca0:	cmp	r4, #3
   13ca4:	beq	13d84 <__assert_fail@plt+0x2cfc>
   13ca8:	ldrb	r0, [r6, #3]
   13cac:	cmp	r0, #61	; 0x3d
   13cb0:	bne	13ce0 <__assert_fail@plt+0x2c58>
   13cb4:	cmp	r4, #4
   13cb8:	mov	r8, r4
   13cbc:	ldr	r4, [sp, #28]
   13cc0:	beq	13d0c <__assert_fail@plt+0x2c84>
   13cc4:	b	13d84 <__assert_fail@plt+0x2cfc>
   13cc8:	mov	r9, #0
   13ccc:	mov	r7, sl
   13cd0:	mov	r8, #2
   13cd4:	cmp	r4, #2
   13cd8:	bne	13c40 <__assert_fail@plt+0x2bb8>
   13cdc:	b	13d84 <__assert_fail@plt+0x2cfc>
   13ce0:	movw	r1, #40307	; 0x9d73
   13ce4:	movt	r1, #1
   13ce8:	add	r0, r1, r0
   13cec:	ldrsb	r0, [r0]
   13cf0:	cmp	r0, #0
   13cf4:	bmi	13da8 <__assert_fail@plt+0x2d20>
   13cf8:	cmp	r9, #0
   13cfc:	ldr	r4, [sp, #28]
   13d00:	orrne	r0, r0, r2, lsl #6
   13d04:	subne	r9, r9, #1
   13d08:	strbne	r0, [r3], #1
   13d0c:	sub	r2, r5, r4
   13d10:	movw	r5, #40307	; 0x9d73
   13d14:	movt	r5, #1
   13d18:	b	13874 <__assert_fail@plt+0x27ec>
   13d1c:	ldr	r7, [sp, #12]
   13d20:	sub	r3, r2, #4
   13d24:	cmp	r3, r0
   13d28:	mov	r3, ip
   13d2c:	bne	13d4c <__assert_fail@plt+0x2cc4>
   13d30:	ldr	ip, [sp, #16]
   13d34:	ldr	r1, [sp, #8]
   13d38:	add	r0, lr, r0
   13d3c:	mov	r8, #0
   13d40:	mov	lr, r1
   13d44:	add	r6, r0, #4
   13d48:	b	13894 <__assert_fail@plt+0x280c>
   13d4c:	add	sl, r2, r1
   13d50:	ldr	ip, [sp, #16]
   13d54:	ldr	r1, [sp, #8]
   13d58:	b	13ab0 <__assert_fail@plt+0x2a28>
   13d5c:	add	r0, r6, #4
   13d60:	mov	r4, #4
   13d64:	str	r0, [sp, #28]
   13d68:	b	13bd4 <__assert_fail@plt+0x2b4c>
   13d6c:	mov	r9, #0
   13d70:	cmp	r4, #3
   13d74:	bne	13ca8 <__assert_fail@plt+0x2c20>
   13d78:	b	13d84 <__assert_fail@plt+0x2cfc>
   13d7c:	mov	r8, r4
   13d80:	ldr	r9, [sp, #32]
   13d84:	ldr	r0, [fp, #8]
   13d88:	mov	r1, r0
   13d8c:	ldr	r0, [r0]
   13d90:	sub	r0, r0, r9
   13d94:	str	r0, [r1]
   13d98:	clz	r0, r8
   13d9c:	lsr	r0, r0, #5
   13da0:	sub	sp, fp, #28
   13da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13da8:	mov	r8, r4
   13dac:	b	13d84 <__assert_fail@plt+0x2cfc>
   13db0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13db4:	add	fp, sp, #24
   13db8:	sub	sp, sp, #8
   13dbc:	mov	r7, r0
   13dc0:	asr	r0, r2, #2
   13dc4:	mov	r4, r3
   13dc8:	mov	r6, r2
   13dcc:	mov	r8, r1
   13dd0:	add	r0, r0, r0, lsl #1
   13dd4:	add	r0, r0, #3
   13dd8:	str	r0, [sp, #4]
   13ddc:	bl	18a54 <__assert_fail@plt+0x79cc>
   13de0:	mov	r5, #1
   13de4:	cmp	r0, #0
   13de8:	str	r0, [r4]
   13dec:	beq	13e24 <__assert_fail@plt+0x2d9c>
   13df0:	mov	r3, r0
   13df4:	add	r0, sp, #4
   13df8:	mov	r1, r8
   13dfc:	mov	r2, r6
   13e00:	str	r0, [sp]
   13e04:	mov	r0, r7
   13e08:	bl	137f8 <__assert_fail@plt+0x2770>
   13e0c:	cmp	r0, #0
   13e10:	beq	13e30 <__assert_fail@plt+0x2da8>
   13e14:	ldr	r0, [fp, #8]
   13e18:	cmp	r0, #0
   13e1c:	ldrne	r1, [sp, #4]
   13e20:	strne	r1, [r0]
   13e24:	mov	r0, r5
   13e28:	sub	sp, fp, #24
   13e2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e30:	ldr	r0, [r4]
   13e34:	bl	143b4 <__assert_fail@plt+0x332c>
   13e38:	mov	r5, #0
   13e3c:	str	r5, [r4]
   13e40:	mov	r0, r5
   13e44:	sub	sp, fp, #24
   13e48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e4c:	sub	r2, r0, #65	; 0x41
   13e50:	mov	r1, r0
   13e54:	mov	r0, #1
   13e58:	cmp	r2, #26
   13e5c:	subcs	r2, r1, #97	; 0x61
   13e60:	cmpcs	r2, #26
   13e64:	bcs	13e6c <__assert_fail@plt+0x2de4>
   13e68:	bx	lr
   13e6c:	sub	r1, r1, #48	; 0x30
   13e70:	cmp	r1, #10
   13e74:	movcs	r0, #0
   13e78:	bx	lr
   13e7c:	sub	r2, r0, #65	; 0x41
   13e80:	mov	r1, r0
   13e84:	mov	r0, #1
   13e88:	cmp	r2, #26
   13e8c:	subcs	r1, r1, #97	; 0x61
   13e90:	cmpcs	r1, #26
   13e94:	movcs	r0, #0
   13e98:	bx	lr
   13e9c:	cmp	r0, #128	; 0x80
   13ea0:	mov	r1, #0
   13ea4:	movwcc	r1, #1
   13ea8:	mov	r0, r1
   13eac:	bx	lr
   13eb0:	sub	r1, r0, #9
   13eb4:	sub	r0, r0, #32
   13eb8:	clz	r1, r1
   13ebc:	clz	r0, r0
   13ec0:	lsr	r1, r1, #5
   13ec4:	lsr	r0, r0, #5
   13ec8:	orr	r0, r0, r1
   13ecc:	bx	lr
   13ed0:	mov	r1, r0
   13ed4:	mov	r0, #1
   13ed8:	cmp	r1, #32
   13edc:	bxcc	lr
   13ee0:	cmp	r1, #127	; 0x7f
   13ee4:	movne	r0, #0
   13ee8:	bx	lr
   13eec:	sub	r1, r0, #48	; 0x30
   13ef0:	mov	r0, #0
   13ef4:	cmp	r1, #10
   13ef8:	movwcc	r0, #1
   13efc:	bx	lr
   13f00:	sub	r1, r0, #33	; 0x21
   13f04:	mov	r0, #0
   13f08:	cmp	r1, #94	; 0x5e
   13f0c:	movwcc	r0, #1
   13f10:	bx	lr
   13f14:	sub	r1, r0, #97	; 0x61
   13f18:	mov	r0, #0
   13f1c:	cmp	r1, #26
   13f20:	movwcc	r0, #1
   13f24:	bx	lr
   13f28:	sub	r1, r0, #32
   13f2c:	mov	r0, #0
   13f30:	cmp	r1, #95	; 0x5f
   13f34:	movwcc	r0, #1
   13f38:	bx	lr
   13f3c:	sub	r1, r0, #33	; 0x21
   13f40:	cmp	r1, #93	; 0x5d
   13f44:	bhi	140d0 <__assert_fail@plt+0x3048>
   13f48:	add	r2, pc, #4
   13f4c:	mov	r0, #1
   13f50:	ldr	pc, [r2, r1, lsl #2]
   13f54:	andeq	r4, r1, ip, asr #1
   13f58:	andeq	r4, r1, ip, asr #1
   13f5c:	andeq	r4, r1, ip, asr #1
   13f60:	andeq	r4, r1, ip, asr #1
   13f64:	andeq	r4, r1, ip, asr #1
   13f68:	andeq	r4, r1, ip, asr #1
   13f6c:	andeq	r4, r1, ip, asr #1
   13f70:	andeq	r4, r1, ip, asr #1
   13f74:	andeq	r4, r1, ip, asr #1
   13f78:	andeq	r4, r1, ip, asr #1
   13f7c:	andeq	r4, r1, ip, asr #1
   13f80:	andeq	r4, r1, ip, asr #1
   13f84:	andeq	r4, r1, ip, asr #1
   13f88:	andeq	r4, r1, ip, asr #1
   13f8c:	andeq	r4, r1, ip, asr #1
   13f90:	ldrdeq	r4, [r1], -r0
   13f94:	ldrdeq	r4, [r1], -r0
   13f98:	ldrdeq	r4, [r1], -r0
   13f9c:	ldrdeq	r4, [r1], -r0
   13fa0:	ldrdeq	r4, [r1], -r0
   13fa4:	ldrdeq	r4, [r1], -r0
   13fa8:	ldrdeq	r4, [r1], -r0
   13fac:	ldrdeq	r4, [r1], -r0
   13fb0:	ldrdeq	r4, [r1], -r0
   13fb4:	ldrdeq	r4, [r1], -r0
   13fb8:	andeq	r4, r1, ip, asr #1
   13fbc:	andeq	r4, r1, ip, asr #1
   13fc0:	andeq	r4, r1, ip, asr #1
   13fc4:	andeq	r4, r1, ip, asr #1
   13fc8:	andeq	r4, r1, ip, asr #1
   13fcc:	andeq	r4, r1, ip, asr #1
   13fd0:	andeq	r4, r1, ip, asr #1
   13fd4:	ldrdeq	r4, [r1], -r0
   13fd8:	ldrdeq	r4, [r1], -r0
   13fdc:	ldrdeq	r4, [r1], -r0
   13fe0:	ldrdeq	r4, [r1], -r0
   13fe4:	ldrdeq	r4, [r1], -r0
   13fe8:	ldrdeq	r4, [r1], -r0
   13fec:	ldrdeq	r4, [r1], -r0
   13ff0:	ldrdeq	r4, [r1], -r0
   13ff4:	ldrdeq	r4, [r1], -r0
   13ff8:	ldrdeq	r4, [r1], -r0
   13ffc:	ldrdeq	r4, [r1], -r0
   14000:	ldrdeq	r4, [r1], -r0
   14004:	ldrdeq	r4, [r1], -r0
   14008:	ldrdeq	r4, [r1], -r0
   1400c:	ldrdeq	r4, [r1], -r0
   14010:	ldrdeq	r4, [r1], -r0
   14014:	ldrdeq	r4, [r1], -r0
   14018:	ldrdeq	r4, [r1], -r0
   1401c:	ldrdeq	r4, [r1], -r0
   14020:	ldrdeq	r4, [r1], -r0
   14024:	ldrdeq	r4, [r1], -r0
   14028:	ldrdeq	r4, [r1], -r0
   1402c:	ldrdeq	r4, [r1], -r0
   14030:	ldrdeq	r4, [r1], -r0
   14034:	ldrdeq	r4, [r1], -r0
   14038:	ldrdeq	r4, [r1], -r0
   1403c:	andeq	r4, r1, ip, asr #1
   14040:	andeq	r4, r1, ip, asr #1
   14044:	andeq	r4, r1, ip, asr #1
   14048:	andeq	r4, r1, ip, asr #1
   1404c:	andeq	r4, r1, ip, asr #1
   14050:	andeq	r4, r1, ip, asr #1
   14054:	ldrdeq	r4, [r1], -r0
   14058:	ldrdeq	r4, [r1], -r0
   1405c:	ldrdeq	r4, [r1], -r0
   14060:	ldrdeq	r4, [r1], -r0
   14064:	ldrdeq	r4, [r1], -r0
   14068:	ldrdeq	r4, [r1], -r0
   1406c:	ldrdeq	r4, [r1], -r0
   14070:	ldrdeq	r4, [r1], -r0
   14074:	ldrdeq	r4, [r1], -r0
   14078:	ldrdeq	r4, [r1], -r0
   1407c:	ldrdeq	r4, [r1], -r0
   14080:	ldrdeq	r4, [r1], -r0
   14084:	ldrdeq	r4, [r1], -r0
   14088:	ldrdeq	r4, [r1], -r0
   1408c:	ldrdeq	r4, [r1], -r0
   14090:	ldrdeq	r4, [r1], -r0
   14094:	ldrdeq	r4, [r1], -r0
   14098:	ldrdeq	r4, [r1], -r0
   1409c:	ldrdeq	r4, [r1], -r0
   140a0:	ldrdeq	r4, [r1], -r0
   140a4:	ldrdeq	r4, [r1], -r0
   140a8:	ldrdeq	r4, [r1], -r0
   140ac:	ldrdeq	r4, [r1], -r0
   140b0:	ldrdeq	r4, [r1], -r0
   140b4:	ldrdeq	r4, [r1], -r0
   140b8:	ldrdeq	r4, [r1], -r0
   140bc:	andeq	r4, r1, ip, asr #1
   140c0:	andeq	r4, r1, ip, asr #1
   140c4:	andeq	r4, r1, ip, asr #1
   140c8:	andeq	r4, r1, ip, asr #1
   140cc:	bx	lr
   140d0:	mov	r0, #0
   140d4:	bx	lr
   140d8:	sub	r0, r0, #9
   140dc:	cmp	r0, #23
   140e0:	movhi	r0, #0
   140e4:	bxhi	lr
   140e8:	movw	r1, #31
   140ec:	bic	r0, r0, #-16777216	; 0xff000000
   140f0:	mov	r2, #1
   140f4:	movt	r1, #128	; 0x80
   140f8:	and	r0, r2, r1, lsr r0
   140fc:	bx	lr
   14100:	sub	r1, r0, #65	; 0x41
   14104:	mov	r0, #0
   14108:	cmp	r1, #26
   1410c:	movwcc	r0, #1
   14110:	bx	lr
   14114:	sub	r2, r0, #48	; 0x30
   14118:	mov	r1, r0
   1411c:	mov	r0, #1
   14120:	cmp	r2, #22
   14124:	bhi	1413c <__assert_fail@plt+0x30b4>
   14128:	movw	r3, #1023	; 0x3ff
   1412c:	mov	ip, #1
   14130:	movt	r3, #126	; 0x7e
   14134:	tst	r3, ip, lsl r2
   14138:	bxne	lr
   1413c:	sub	r1, r1, #97	; 0x61
   14140:	cmp	r1, #6
   14144:	movcs	r0, #0
   14148:	bxcs	lr
   1414c:	bx	lr
   14150:	sub	r1, r0, #65	; 0x41
   14154:	cmp	r1, #26
   14158:	addcc	r0, r0, #32
   1415c:	bx	lr
   14160:	sub	r1, r0, #97	; 0x61
   14164:	cmp	r1, #26
   14168:	subcc	r0, r0, #32
   1416c:	bx	lr
   14170:	movw	r1, #45420	; 0xb16c
   14174:	movt	r1, #2
   14178:	str	r0, [r1, #4]
   1417c:	bx	lr
   14180:	movw	r1, #45420	; 0xb16c
   14184:	movt	r1, #2
   14188:	strb	r0, [r1]
   1418c:	bx	lr
   14190:	push	{r4, r5, r6, sl, fp, lr}
   14194:	add	fp, sp, #16
   14198:	sub	sp, sp, #8
   1419c:	movw	r0, #45388	; 0xb14c
   141a0:	movt	r0, #2
   141a4:	ldr	r0, [r0]
   141a8:	bl	18ad8 <__assert_fail@plt+0x7a50>
   141ac:	cmp	r0, #0
   141b0:	beq	141d8 <__assert_fail@plt+0x3150>
   141b4:	movw	r5, #45420	; 0xb16c
   141b8:	movt	r5, #2
   141bc:	ldrb	r0, [r5]
   141c0:	cmp	r0, #0
   141c4:	beq	14204 <__assert_fail@plt+0x317c>
   141c8:	bl	10fa4 <__errno_location@plt>
   141cc:	ldr	r0, [r0]
   141d0:	cmp	r0, #32
   141d4:	bne	14204 <__assert_fail@plt+0x317c>
   141d8:	movw	r0, #45376	; 0xb140
   141dc:	movt	r0, #2
   141e0:	ldr	r0, [r0]
   141e4:	bl	18ad8 <__assert_fail@plt+0x7a50>
   141e8:	cmp	r0, #0
   141ec:	subeq	sp, fp, #16
   141f0:	popeq	{r4, r5, r6, sl, fp, pc}
   141f4:	movw	r0, #45292	; 0xb0ec
   141f8:	movt	r0, #2
   141fc:	ldr	r0, [r0]
   14200:	bl	10e84 <_exit@plt>
   14204:	movw	r1, #39172	; 0x9904
   14208:	mov	r0, #0
   1420c:	mov	r2, #5
   14210:	movt	r1, #1
   14214:	bl	10eb4 <dcgettext@plt>
   14218:	ldr	r6, [r5, #4]
   1421c:	mov	r4, r0
   14220:	bl	10fa4 <__errno_location@plt>
   14224:	ldr	r5, [r0]
   14228:	cmp	r6, #0
   1422c:	bne	14248 <__assert_fail@plt+0x31c0>
   14230:	movw	r2, #38316	; 0x95ac
   14234:	mov	r0, #0
   14238:	mov	r1, r5
   1423c:	mov	r3, r4
   14240:	movt	r2, #1
   14244:	b	14268 <__assert_fail@plt+0x31e0>
   14248:	mov	r0, r6
   1424c:	bl	160c0 <__assert_fail@plt+0x5038>
   14250:	movw	r2, #38312	; 0x95a8
   14254:	mov	r3, r0
   14258:	str	r4, [sp]
   1425c:	mov	r0, #0
   14260:	mov	r1, r5
   14264:	movt	r2, #1
   14268:	bl	10f20 <error@plt>
   1426c:	movw	r0, #45292	; 0xb0ec
   14270:	movt	r0, #2
   14274:	ldr	r0, [r0]
   14278:	bl	10e84 <_exit@plt>
   1427c:	b	10e54 <posix_fadvise64@plt>
   14280:	cmp	r0, #0
   14284:	bxeq	lr
   14288:	push	{r4, sl, fp, lr}
   1428c:	add	fp, sp, #8
   14290:	sub	sp, sp, #16
   14294:	mov	r4, r1
   14298:	bl	10fd4 <fileno@plt>
   1429c:	mov	r1, #0
   142a0:	mov	r2, #0
   142a4:	mov	r3, #0
   142a8:	str	r1, [sp]
   142ac:	stmib	sp, {r1, r4}
   142b0:	bl	10e54 <posix_fadvise64@plt>
   142b4:	sub	sp, fp, #8
   142b8:	pop	{r4, sl, fp, pc}
   142bc:	push	{r4, r5, r6, sl, fp, lr}
   142c0:	add	fp, sp, #16
   142c4:	sub	sp, sp, #8
   142c8:	mov	r4, r0
   142cc:	bl	10fd4 <fileno@plt>
   142d0:	cmn	r0, #1
   142d4:	ble	14348 <__assert_fail@plt+0x32c0>
   142d8:	mov	r0, r4
   142dc:	bl	10f44 <__freading@plt>
   142e0:	cmp	r0, #0
   142e4:	beq	14310 <__assert_fail@plt+0x3288>
   142e8:	mov	r0, r4
   142ec:	bl	10fd4 <fileno@plt>
   142f0:	mov	r1, #1
   142f4:	mov	r2, #0
   142f8:	mov	r3, #0
   142fc:	str	r1, [sp]
   14300:	bl	10ef0 <lseek64@plt>
   14304:	and	r0, r0, r1
   14308:	cmn	r0, #1
   1430c:	beq	14348 <__assert_fail@plt+0x32c0>
   14310:	mov	r0, r4
   14314:	bl	14358 <__assert_fail@plt+0x32d0>
   14318:	cmp	r0, #0
   1431c:	beq	14348 <__assert_fail@plt+0x32c0>
   14320:	bl	10fa4 <__errno_location@plt>
   14324:	ldr	r6, [r0]
   14328:	mov	r5, r0
   1432c:	mov	r0, r4
   14330:	bl	10ff8 <fclose@plt>
   14334:	cmp	r6, #0
   14338:	strne	r6, [r5]
   1433c:	mvnne	r0, #0
   14340:	sub	sp, fp, #16
   14344:	pop	{r4, r5, r6, sl, fp, pc}
   14348:	mov	r0, r4
   1434c:	sub	sp, fp, #16
   14350:	pop	{r4, r5, r6, sl, fp, lr}
   14354:	b	10ff8 <fclose@plt>
   14358:	push	{r4, sl, fp, lr}
   1435c:	add	fp, sp, #8
   14360:	sub	sp, sp, #8
   14364:	mov	r4, r0
   14368:	cmp	r0, #0
   1436c:	beq	143a4 <__assert_fail@plt+0x331c>
   14370:	mov	r0, r4
   14374:	bl	10f44 <__freading@plt>
   14378:	cmp	r0, #0
   1437c:	beq	143a4 <__assert_fail@plt+0x331c>
   14380:	ldrb	r0, [r4, #1]
   14384:	tst	r0, #1
   14388:	beq	143a4 <__assert_fail@plt+0x331c>
   1438c:	mov	r0, #1
   14390:	mov	r2, #0
   14394:	mov	r3, #0
   14398:	str	r0, [sp]
   1439c:	mov	r0, r4
   143a0:	bl	143dc <__assert_fail@plt+0x3354>
   143a4:	mov	r0, r4
   143a8:	sub	sp, fp, #8
   143ac:	pop	{r4, sl, fp, lr}
   143b0:	b	10e60 <fflush@plt>
   143b4:	push	{r4, r5, r6, sl, fp, lr}
   143b8:	add	fp, sp, #16
   143bc:	mov	r4, r0
   143c0:	bl	10fa4 <__errno_location@plt>
   143c4:	ldr	r6, [r0]
   143c8:	mov	r5, r0
   143cc:	mov	r0, r4
   143d0:	bl	10e78 <free@plt>
   143d4:	str	r6, [r5]
   143d8:	pop	{r4, r5, r6, sl, fp, pc}
   143dc:	push	{r4, r5, r6, r7, fp, lr}
   143e0:	add	fp, sp, #16
   143e4:	sub	sp, sp, #8
   143e8:	mov	r4, r0
   143ec:	ldr	r0, [r0, #4]
   143f0:	mov	r5, r3
   143f4:	mov	r6, r2
   143f8:	ldr	r1, [r4, #8]
   143fc:	cmp	r1, r0
   14400:	bne	1441c <__assert_fail@plt+0x3394>
   14404:	ldrd	r0, [r4, #16]
   14408:	cmp	r1, r0
   1440c:	bne	1441c <__assert_fail@plt+0x3394>
   14410:	ldr	r0, [r4, #36]	; 0x24
   14414:	cmp	r0, #0
   14418:	beq	14434 <__assert_fail@plt+0x33ac>
   1441c:	mov	r0, r4
   14420:	mov	r2, r6
   14424:	mov	r3, r5
   14428:	sub	sp, fp, #16
   1442c:	pop	{r4, r5, r6, r7, fp, lr}
   14430:	b	11004 <fseeko64@plt>
   14434:	ldr	r7, [fp, #8]
   14438:	mov	r0, r4
   1443c:	bl	10fd4 <fileno@plt>
   14440:	mov	r2, r6
   14444:	mov	r3, r5
   14448:	str	r7, [sp]
   1444c:	bl	10ef0 <lseek64@plt>
   14450:	and	r2, r0, r1
   14454:	cmn	r2, #1
   14458:	beq	14478 <__assert_fail@plt+0x33f0>
   1445c:	strd	r0, [r4, #80]	; 0x50
   14460:	ldr	r0, [r4]
   14464:	bic	r0, r0, #16
   14468:	str	r0, [r4]
   1446c:	mov	r0, #0
   14470:	sub	sp, fp, #16
   14474:	pop	{r4, r5, r6, r7, fp, pc}
   14478:	mvn	r0, #0
   1447c:	sub	sp, fp, #16
   14480:	pop	{r4, r5, r6, r7, fp, pc}
   14484:	push	{r4, r5, fp, lr}
   14488:	add	fp, sp, #8
   1448c:	cmp	r0, #0
   14490:	beq	14524 <__assert_fail@plt+0x349c>
   14494:	mov	r1, #47	; 0x2f
   14498:	mov	r4, r0
   1449c:	bl	11028 <strrchr@plt>
   144a0:	cmp	r0, #0
   144a4:	mov	r5, r4
   144a8:	addne	r5, r0, #1
   144ac:	sub	r0, r5, r4
   144b0:	cmp	r0, #7
   144b4:	blt	14508 <__assert_fail@plt+0x3480>
   144b8:	movw	r1, #40619	; 0x9eab
   144bc:	sub	r0, r5, #7
   144c0:	mov	r2, #7
   144c4:	movt	r1, #1
   144c8:	bl	11070 <strncmp@plt>
   144cc:	cmp	r0, #0
   144d0:	bne	14508 <__assert_fail@plt+0x3480>
   144d4:	movw	r1, #40627	; 0x9eb3
   144d8:	mov	r0, r5
   144dc:	mov	r2, #3
   144e0:	movt	r1, #1
   144e4:	bl	11070 <strncmp@plt>
   144e8:	cmp	r0, #0
   144ec:	beq	144f8 <__assert_fail@plt+0x3470>
   144f0:	mov	r4, r5
   144f4:	b	14508 <__assert_fail@plt+0x3480>
   144f8:	movw	r0, #45360	; 0xb130
   144fc:	add	r4, r5, #3
   14500:	movt	r0, #2
   14504:	str	r4, [r0]
   14508:	movw	r0, #45364	; 0xb134
   1450c:	movt	r0, #2
   14510:	str	r4, [r0]
   14514:	movw	r0, #45428	; 0xb174
   14518:	movt	r0, #2
   1451c:	str	r4, [r0]
   14520:	pop	{r4, r5, fp, pc}
   14524:	movw	r0, #45376	; 0xb140
   14528:	mov	r1, #55	; 0x37
   1452c:	mov	r2, #1
   14530:	movt	r0, #2
   14534:	ldr	r3, [r0]
   14538:	movw	r0, #40563	; 0x9e73
   1453c:	movt	r0, #1
   14540:	bl	10ee4 <fwrite@plt>
   14544:	bl	1107c <abort@plt>
   14548:	push	{r4, r5, r6, sl, fp, lr}
   1454c:	add	fp, sp, #16
   14550:	mov	r4, r0
   14554:	movw	r0, #45432	; 0xb178
   14558:	movt	r0, #2
   1455c:	cmp	r4, #0
   14560:	moveq	r4, r0
   14564:	bl	10fa4 <__errno_location@plt>
   14568:	ldr	r6, [r0]
   1456c:	mov	r5, r0
   14570:	mov	r0, r4
   14574:	mov	r1, #48	; 0x30
   14578:	bl	16f80 <__assert_fail@plt+0x5ef8>
   1457c:	str	r6, [r5]
   14580:	pop	{r4, r5, r6, sl, fp, pc}
   14584:	movw	r1, #45432	; 0xb178
   14588:	cmp	r0, #0
   1458c:	movt	r1, #2
   14590:	movne	r1, r0
   14594:	ldr	r0, [r1]
   14598:	bx	lr
   1459c:	movw	r2, #45432	; 0xb178
   145a0:	cmp	r0, #0
   145a4:	movt	r2, #2
   145a8:	movne	r2, r0
   145ac:	str	r1, [r2]
   145b0:	bx	lr
   145b4:	movw	r3, #45432	; 0xb178
   145b8:	cmp	r0, #0
   145bc:	and	r2, r2, #1
   145c0:	movt	r3, #2
   145c4:	movne	r3, r0
   145c8:	ubfx	r0, r1, #5, #3
   145cc:	and	r1, r1, #31
   145d0:	add	ip, r3, r0, lsl #2
   145d4:	mov	r0, #1
   145d8:	ldr	r3, [ip, #8]
   145dc:	and	r0, r0, r3, lsr r1
   145e0:	eor	r2, r0, r2
   145e4:	eor	r1, r3, r2, lsl r1
   145e8:	str	r1, [ip, #8]
   145ec:	bx	lr
   145f0:	movw	r2, #45432	; 0xb178
   145f4:	cmp	r0, #0
   145f8:	movt	r2, #2
   145fc:	movne	r2, r0
   14600:	ldr	r0, [r2, #4]
   14604:	str	r1, [r2, #4]
   14608:	bx	lr
   1460c:	push	{fp, lr}
   14610:	mov	fp, sp
   14614:	movw	r3, #45432	; 0xb178
   14618:	cmp	r0, #0
   1461c:	movt	r3, #2
   14620:	movne	r3, r0
   14624:	cmp	r1, #0
   14628:	mov	r0, #10
   1462c:	cmpne	r2, #0
   14630:	str	r0, [r3]
   14634:	bne	1463c <__assert_fail@plt+0x35b4>
   14638:	bl	1107c <abort@plt>
   1463c:	str	r1, [r3, #40]	; 0x28
   14640:	str	r2, [r3, #44]	; 0x2c
   14644:	pop	{fp, pc}
   14648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1464c:	add	fp, sp, #28
   14650:	sub	sp, sp, #20
   14654:	mov	r7, r0
   14658:	ldr	r0, [fp, #8]
   1465c:	movw	r5, #45432	; 0xb178
   14660:	mov	r8, r3
   14664:	mov	r9, r2
   14668:	mov	sl, r1
   1466c:	movt	r5, #2
   14670:	cmp	r0, #0
   14674:	movne	r5, r0
   14678:	bl	10fa4 <__errno_location@plt>
   1467c:	ldr	r2, [r5, #40]	; 0x28
   14680:	ldr	r3, [r5, #44]	; 0x2c
   14684:	mov	r4, r0
   14688:	ldm	r5, {r0, r1}
   1468c:	add	r5, r5, #8
   14690:	ldr	r6, [r4]
   14694:	stm	sp, {r0, r1, r5}
   14698:	mov	r0, r7
   1469c:	mov	r1, sl
   146a0:	str	r2, [sp, #12]
   146a4:	str	r3, [sp, #16]
   146a8:	mov	r2, r9
   146ac:	mov	r3, r8
   146b0:	bl	146c0 <__assert_fail@plt+0x3638>
   146b4:	str	r6, [r4]
   146b8:	sub	sp, fp, #28
   146bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146c4:	add	fp, sp, #28
   146c8:	sub	sp, sp, #156	; 0x9c
   146cc:	str	r0, [fp, #-84]	; 0xffffffac
   146d0:	add	r0, r2, #1
   146d4:	mov	r6, r1
   146d8:	mov	r7, r3
   146dc:	str	r2, [fp, #-80]	; 0xffffffb0
   146e0:	str	r0, [sp, #80]	; 0x50
   146e4:	ldr	r0, [fp, #12]
   146e8:	and	r1, r0, #1
   146ec:	str	r1, [sp, #36]	; 0x24
   146f0:	and	r1, r0, #4
   146f4:	str	r1, [sp, #32]
   146f8:	ubfx	r8, r0, #1, #1
   146fc:	bl	10efc <__ctype_get_mb_cur_max@plt>
   14700:	str	r0, [sp, #40]	; 0x28
   14704:	ldr	r0, [fp, #24]
   14708:	ldr	r4, [fp, #8]
   1470c:	mov	r1, #0
   14710:	str	r1, [fp, #-52]	; 0xffffffcc
   14714:	mov	r1, #0
   14718:	str	r1, [sp, #60]	; 0x3c
   1471c:	mov	r1, #1
   14720:	str	r1, [sp, #84]	; 0x54
   14724:	str	r0, [sp, #76]	; 0x4c
   14728:	ldr	r0, [fp, #20]
   1472c:	str	r0, [sp, #72]	; 0x48
   14730:	mov	r0, #0
   14734:	str	r0, [sp, #56]	; 0x38
   14738:	mov	r0, #0
   1473c:	str	r0, [fp, #-88]	; 0xffffffa8
   14740:	mov	r0, #0
   14744:	str	r0, [fp, #-72]	; 0xffffffb8
   14748:	mov	r0, #0
   1474c:	cmp	r4, #10
   14750:	bhi	15a6c <__assert_fail@plt+0x49e4>
   14754:	add	r1, pc, #24
   14758:	ldr	ip, [fp, #-84]	; 0xffffffac
   1475c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14760:	mov	r5, r6
   14764:	mov	r9, #0
   14768:	mov	r2, #1
   1476c:	mov	r3, #0
   14770:	ldr	pc, [r1, r4, lsl #2]
   14774:	andeq	r4, r1, ip, lsr r8
   14778:	andeq	r4, r1, r8, ror r8
   1477c:	andeq	r4, r1, ip, asr #16
   14780:	andeq	r4, r1, r4, lsr r8
   14784:	andeq	r4, r1, ip, ror #16
   14788:	ldrdeq	r4, [r1], -r0
   1478c:	andeq	r4, r1, ip, asr r8
   14790:	andeq	r4, r1, r8, asr #22
   14794:	andeq	r4, r1, r0, lsr #15
   14798:	andeq	r4, r1, r0, lsr #15
   1479c:	ldrdeq	r4, [r1], -r8
   147a0:	movw	r6, #40709	; 0x9f05
   147a4:	mov	r0, #0
   147a8:	mov	r2, #5
   147ac:	movt	r6, #1
   147b0:	mov	r1, r6
   147b4:	bl	10eb4 <dcgettext@plt>
   147b8:	cmp	r0, r6
   147bc:	str	r0, [sp, #72]	; 0x48
   147c0:	bne	149b0 <__assert_fail@plt+0x3928>
   147c4:	bl	18b5c <__assert_fail@plt+0x7ad4>
   147c8:	ldrb	r1, [r0]
   147cc:	and	r1, r1, #223	; 0xdf
   147d0:	cmp	r1, #71	; 0x47
   147d4:	beq	14930 <__assert_fail@plt+0x38a8>
   147d8:	cmp	r1, #85	; 0x55
   147dc:	bne	14994 <__assert_fail@plt+0x390c>
   147e0:	ldrb	r1, [r0, #1]
   147e4:	and	r1, r1, #223	; 0xdf
   147e8:	cmp	r1, #84	; 0x54
   147ec:	bne	14994 <__assert_fail@plt+0x390c>
   147f0:	ldrb	r1, [r0, #2]
   147f4:	and	r1, r1, #223	; 0xdf
   147f8:	cmp	r1, #70	; 0x46
   147fc:	bne	14994 <__assert_fail@plt+0x390c>
   14800:	ldrb	r1, [r0, #3]
   14804:	cmp	r1, #45	; 0x2d
   14808:	bne	14994 <__assert_fail@plt+0x390c>
   1480c:	ldrb	r1, [r0, #4]
   14810:	cmp	r1, #56	; 0x38
   14814:	bne	14994 <__assert_fail@plt+0x390c>
   14818:	ldrb	r0, [r0, #5]
   1481c:	cmp	r0, #0
   14820:	movw	r0, #40713	; 0x9f09
   14824:	movt	r0, #1
   14828:	str	r0, [sp, #72]	; 0x48
   1482c:	bne	14994 <__assert_fail@plt+0x390c>
   14830:	b	149b0 <__assert_fail@plt+0x3928>
   14834:	mov	r0, #1
   14838:	b	14878 <__assert_fail@plt+0x37f0>
   1483c:	mov	r4, #0
   14840:	mov	r9, #0
   14844:	mov	r2, r0
   14848:	b	148c8 <__assert_fail@plt+0x3840>
   1484c:	tst	r8, #1
   14850:	bne	14878 <__assert_fail@plt+0x37f0>
   14854:	mov	r2, r0
   14858:	b	148a0 <__assert_fail@plt+0x3818>
   1485c:	mov	r0, #1
   14860:	mov	r9, #0
   14864:	mov	r4, #5
   14868:	b	148e4 <__assert_fail@plt+0x385c>
   1486c:	mov	r2, #1
   14870:	tst	r8, #1
   14874:	beq	148a0 <__assert_fail@plt+0x3818>
   14878:	mov	r1, #1
   1487c:	mov	r9, #0
   14880:	mov	r4, #2
   14884:	mov	r2, r0
   14888:	mov	r3, #1
   1488c:	str	r1, [fp, #-72]	; 0xffffffb8
   14890:	movw	r1, #40711	; 0x9f07
   14894:	movt	r1, #1
   14898:	str	r1, [fp, #-88]	; 0xffffffa8
   1489c:	b	14b48 <__assert_fail@plt+0x3ac0>
   148a0:	cmp	r5, #0
   148a4:	mov	r9, #1
   148a8:	mov	r4, #2
   148ac:	movne	r0, #39	; 0x27
   148b0:	strbne	r0, [ip]
   148b4:	movw	r0, #40711	; 0x9f07
   148b8:	movt	r0, #1
   148bc:	str	r0, [fp, #-88]	; 0xffffffa8
   148c0:	mov	r0, #1
   148c4:	str	r0, [fp, #-72]	; 0xffffffb8
   148c8:	mov	r3, #0
   148cc:	b	14b48 <__assert_fail@plt+0x3ac0>
   148d0:	mov	r4, #5
   148d4:	tst	r8, #1
   148d8:	beq	14900 <__assert_fail@plt+0x3878>
   148dc:	mov	r0, #1
   148e0:	mov	r9, #0
   148e4:	str	r0, [fp, #-72]	; 0xffffffb8
   148e8:	movw	r0, #40707	; 0x9f03
   148ec:	mov	r2, #1
   148f0:	mov	r3, #1
   148f4:	movt	r0, #1
   148f8:	str	r0, [fp, #-88]	; 0xffffffa8
   148fc:	b	14b48 <__assert_fail@plt+0x3ac0>
   14900:	cmp	r5, #0
   14904:	mov	r3, #0
   14908:	mov	r9, #1
   1490c:	mov	r2, #1
   14910:	movne	r0, #34	; 0x22
   14914:	strbne	r0, [ip]
   14918:	movw	r0, #40707	; 0x9f03
   1491c:	movt	r0, #1
   14920:	str	r0, [fp, #-88]	; 0xffffffa8
   14924:	mov	r0, #1
   14928:	str	r0, [fp, #-72]	; 0xffffffb8
   1492c:	b	14b48 <__assert_fail@plt+0x3ac0>
   14930:	ldrb	r1, [r0, #1]
   14934:	and	r1, r1, #223	; 0xdf
   14938:	cmp	r1, #66	; 0x42
   1493c:	bne	14994 <__assert_fail@plt+0x390c>
   14940:	ldrb	r1, [r0, #2]
   14944:	cmp	r1, #49	; 0x31
   14948:	bne	14994 <__assert_fail@plt+0x390c>
   1494c:	ldrb	r1, [r0, #3]
   14950:	cmp	r1, #56	; 0x38
   14954:	bne	14994 <__assert_fail@plt+0x390c>
   14958:	ldrb	r1, [r0, #4]
   1495c:	cmp	r1, #48	; 0x30
   14960:	bne	14994 <__assert_fail@plt+0x390c>
   14964:	ldrb	r1, [r0, #5]
   14968:	cmp	r1, #51	; 0x33
   1496c:	bne	14994 <__assert_fail@plt+0x390c>
   14970:	ldrb	r1, [r0, #6]
   14974:	cmp	r1, #48	; 0x30
   14978:	bne	14994 <__assert_fail@plt+0x390c>
   1497c:	ldrb	r0, [r0, #7]
   14980:	cmp	r0, #0
   14984:	movw	r0, #40721	; 0x9f11
   14988:	movt	r0, #1
   1498c:	str	r0, [sp, #72]	; 0x48
   14990:	beq	149b0 <__assert_fail@plt+0x3928>
   14994:	movw	r1, #40707	; 0x9f03
   14998:	movw	r0, #40711	; 0x9f07
   1499c:	cmp	r4, #9
   149a0:	movt	r1, #1
   149a4:	movt	r0, #1
   149a8:	moveq	r0, r1
   149ac:	str	r0, [sp, #72]	; 0x48
   149b0:	movw	r6, #40711	; 0x9f07
   149b4:	mov	r0, #0
   149b8:	mov	r2, #5
   149bc:	movt	r6, #1
   149c0:	mov	r1, r6
   149c4:	bl	10eb4 <dcgettext@plt>
   149c8:	cmp	r0, r6
   149cc:	str	r0, [sp, #76]	; 0x4c
   149d0:	beq	14a1c <__assert_fail@plt+0x3994>
   149d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   149d8:	mov	r9, #0
   149dc:	tst	r8, #1
   149e0:	bne	14b24 <__assert_fail@plt+0x3a9c>
   149e4:	ldr	r0, [sp, #72]	; 0x48
   149e8:	ldrb	r0, [r0]
   149ec:	cmp	r0, #0
   149f0:	beq	14b24 <__assert_fail@plt+0x3a9c>
   149f4:	ldr	r1, [sp, #72]	; 0x48
   149f8:	mov	r9, #0
   149fc:	add	r1, r1, #1
   14a00:	cmp	r9, r5
   14a04:	strbcc	r0, [ip, r9]
   14a08:	ldrb	r0, [r1, r9]
   14a0c:	add	r9, r9, #1
   14a10:	cmp	r0, #0
   14a14:	bne	14a00 <__assert_fail@plt+0x3978>
   14a18:	b	14b24 <__assert_fail@plt+0x3a9c>
   14a1c:	bl	18b5c <__assert_fail@plt+0x7ad4>
   14a20:	ldrb	r1, [r0]
   14a24:	and	r1, r1, #223	; 0xdf
   14a28:	cmp	r1, #71	; 0x47
   14a2c:	beq	14a9c <__assert_fail@plt+0x3a14>
   14a30:	ldr	ip, [fp, #-84]	; 0xffffffac
   14a34:	cmp	r1, #85	; 0x55
   14a38:	bne	14af8 <__assert_fail@plt+0x3a70>
   14a3c:	ldrb	r1, [r0, #1]
   14a40:	and	r1, r1, #223	; 0xdf
   14a44:	cmp	r1, #84	; 0x54
   14a48:	bne	14af8 <__assert_fail@plt+0x3a70>
   14a4c:	ldrb	r1, [r0, #2]
   14a50:	and	r1, r1, #223	; 0xdf
   14a54:	cmp	r1, #70	; 0x46
   14a58:	bne	14af8 <__assert_fail@plt+0x3a70>
   14a5c:	ldrb	r1, [r0, #3]
   14a60:	cmp	r1, #45	; 0x2d
   14a64:	bne	14af8 <__assert_fail@plt+0x3a70>
   14a68:	ldrb	r1, [r0, #4]
   14a6c:	cmp	r1, #56	; 0x38
   14a70:	bne	14af8 <__assert_fail@plt+0x3a70>
   14a74:	ldrb	r0, [r0, #5]
   14a78:	cmp	r0, #0
   14a7c:	bne	14af8 <__assert_fail@plt+0x3a70>
   14a80:	movw	r0, #40717	; 0x9f0d
   14a84:	movt	r0, #1
   14a88:	str	r0, [sp, #76]	; 0x4c
   14a8c:	mov	r9, #0
   14a90:	tst	r8, #1
   14a94:	beq	149e4 <__assert_fail@plt+0x395c>
   14a98:	b	14b24 <__assert_fail@plt+0x3a9c>
   14a9c:	ldrb	r1, [r0, #1]
   14aa0:	ldr	ip, [fp, #-84]	; 0xffffffac
   14aa4:	and	r1, r1, #223	; 0xdf
   14aa8:	cmp	r1, #66	; 0x42
   14aac:	bne	14af8 <__assert_fail@plt+0x3a70>
   14ab0:	ldrb	r1, [r0, #2]
   14ab4:	cmp	r1, #49	; 0x31
   14ab8:	bne	14af8 <__assert_fail@plt+0x3a70>
   14abc:	ldrb	r1, [r0, #3]
   14ac0:	cmp	r1, #56	; 0x38
   14ac4:	bne	14af8 <__assert_fail@plt+0x3a70>
   14ac8:	ldrb	r1, [r0, #4]
   14acc:	cmp	r1, #48	; 0x30
   14ad0:	bne	14af8 <__assert_fail@plt+0x3a70>
   14ad4:	ldrb	r1, [r0, #5]
   14ad8:	cmp	r1, #51	; 0x33
   14adc:	bne	14af8 <__assert_fail@plt+0x3a70>
   14ae0:	ldrb	r1, [r0, #6]
   14ae4:	cmp	r1, #48	; 0x30
   14ae8:	bne	14af8 <__assert_fail@plt+0x3a70>
   14aec:	ldrb	r0, [r0, #7]
   14af0:	cmp	r0, #0
   14af4:	beq	1590c <__assert_fail@plt+0x4884>
   14af8:	movw	r0, #40711	; 0x9f07
   14afc:	cmp	r4, #9
   14b00:	movt	r0, #1
   14b04:	mov	r1, r0
   14b08:	movw	r0, #40707	; 0x9f03
   14b0c:	movt	r0, #1
   14b10:	moveq	r1, r0
   14b14:	str	r1, [sp, #76]	; 0x4c
   14b18:	mov	r9, #0
   14b1c:	tst	r8, #1
   14b20:	beq	149e4 <__assert_fail@plt+0x395c>
   14b24:	ldr	r6, [sp, #76]	; 0x4c
   14b28:	mov	r0, r6
   14b2c:	bl	10f8c <strlen@plt>
   14b30:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b34:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14b38:	str	r0, [fp, #-72]	; 0xffffffb8
   14b3c:	str	r6, [fp, #-88]	; 0xffffffa8
   14b40:	mov	r2, #1
   14b44:	mov	r3, r8
   14b48:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14b4c:	str	r4, [fp, #-64]	; 0xffffffc0
   14b50:	mov	sl, #0
   14b54:	str	r3, [fp, #-76]	; 0xffffffb4
   14b58:	str	r2, [sp, #88]	; 0x58
   14b5c:	cmp	r0, #0
   14b60:	movwne	r0, #1
   14b64:	and	r1, r0, r3
   14b68:	and	r1, r2, r1
   14b6c:	str	r1, [sp, #48]	; 0x30
   14b70:	sub	r1, r4, #2
   14b74:	clz	r1, r1
   14b78:	lsr	r1, r1, #5
   14b7c:	and	r1, r1, r3
   14b80:	str	r1, [sp, #44]	; 0x2c
   14b84:	subs	r1, r4, #2
   14b88:	eor	r4, r3, #1
   14b8c:	movwne	r1, #1
   14b90:	str	r4, [sp, #92]	; 0x5c
   14b94:	orr	r4, r1, r4
   14b98:	and	r1, r1, r2
   14b9c:	and	r0, r0, r1
   14ba0:	str	r4, [sp, #64]	; 0x40
   14ba4:	ldr	r4, [sp, #84]	; 0x54
   14ba8:	str	r0, [fp, #-60]	; 0xffffffc4
   14bac:	orr	r0, r1, r3
   14bb0:	ldr	r1, [fp, #16]
   14bb4:	eor	r0, r0, #1
   14bb8:	clz	r1, r1
   14bbc:	lsr	r1, r1, #5
   14bc0:	orr	r0, r1, r0
   14bc4:	str	r0, [fp, #-68]	; 0xffffffbc
   14bc8:	eor	r0, r2, #1
   14bcc:	str	r0, [sp, #52]	; 0x34
   14bd0:	cmn	r7, #1
   14bd4:	beq	14be4 <__assert_fail@plt+0x3b5c>
   14bd8:	cmp	sl, r7
   14bdc:	bne	14bf0 <__assert_fail@plt+0x3b68>
   14be0:	b	15884 <__assert_fail@plt+0x47fc>
   14be4:	ldrb	r0, [lr, sl]
   14be8:	cmp	r0, #0
   14bec:	beq	1588c <__assert_fail@plt+0x4804>
   14bf0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14bf4:	cmp	r0, #0
   14bf8:	beq	14c58 <__assert_fail@plt+0x3bd0>
   14bfc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14c00:	mov	r6, r5
   14c04:	add	r5, sl, r0
   14c08:	cmp	r0, #2
   14c0c:	bcc	14c78 <__assert_fail@plt+0x3bf0>
   14c10:	mov	r0, #0
   14c14:	cmn	r7, #1
   14c18:	str	r0, [fp, #-56]	; 0xffffffc8
   14c1c:	bne	14c34 <__assert_fail@plt+0x3bac>
   14c20:	mov	r0, lr
   14c24:	bl	10f8c <strlen@plt>
   14c28:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14c2c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14c30:	mov	r7, r0
   14c34:	cmp	r5, r7
   14c38:	bls	14c88 <__assert_fail@plt+0x3c00>
   14c3c:	mov	r0, #0
   14c40:	mov	r5, r6
   14c44:	str	r0, [fp, #-48]	; 0xffffffd0
   14c48:	ldrb	r6, [lr, sl]
   14c4c:	cmp	r6, #126	; 0x7e
   14c50:	bls	14cd8 <__assert_fail@plt+0x3c50>
   14c54:	b	15234 <__assert_fail@plt+0x41ac>
   14c58:	mov	r0, #0
   14c5c:	str	r0, [fp, #-56]	; 0xffffffc8
   14c60:	mov	r0, #0
   14c64:	str	r0, [fp, #-48]	; 0xffffffd0
   14c68:	ldrb	r6, [lr, sl]
   14c6c:	cmp	r6, #126	; 0x7e
   14c70:	bls	14cd8 <__assert_fail@plt+0x3c50>
   14c74:	b	15234 <__assert_fail@plt+0x41ac>
   14c78:	mov	r0, #0
   14c7c:	str	r0, [fp, #-56]	; 0xffffffc8
   14c80:	cmp	r5, r7
   14c84:	bhi	14c3c <__assert_fail@plt+0x3bb4>
   14c88:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14c8c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14c90:	add	r0, lr, sl
   14c94:	bl	10f80 <bcmp@plt>
   14c98:	ldr	r2, [sp, #92]	; 0x5c
   14c9c:	cmp	r0, #0
   14ca0:	mov	r1, r0
   14ca4:	mov	r5, r6
   14ca8:	movwne	r1, #1
   14cac:	orr	r1, r1, r2
   14cb0:	tst	r1, #1
   14cb4:	beq	1594c <__assert_fail@plt+0x48c4>
   14cb8:	ldr	ip, [fp, #-84]	; 0xffffffac
   14cbc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14cc0:	clz	r0, r0
   14cc4:	lsr	r0, r0, #5
   14cc8:	str	r0, [fp, #-48]	; 0xffffffd0
   14ccc:	ldrb	r6, [lr, sl]
   14cd0:	cmp	r6, #126	; 0x7e
   14cd4:	bhi	15234 <__assert_fail@plt+0x41ac>
   14cd8:	add	r3, pc, #16
   14cdc:	mov	r8, #1
   14ce0:	mov	r2, #110	; 0x6e
   14ce4:	mov	r0, #97	; 0x61
   14ce8:	mov	r1, #0
   14cec:	ldr	pc, [r3, r6, lsl #2]
   14cf0:	andeq	r4, r1, ip, ror #31
   14cf4:	andeq	r5, r1, r4, lsr r2
   14cf8:	andeq	r5, r1, r4, lsr r2
   14cfc:	andeq	r5, r1, r4, lsr r2
   14d00:	andeq	r5, r1, r4, lsr r2
   14d04:	andeq	r5, r1, r4, lsr r2
   14d08:	andeq	r5, r1, r4, lsr r2
   14d0c:	andeq	r5, r1, r8, ror #5
   14d10:	andeq	r4, r1, ip, asr #31
   14d14:	andeq	r4, r1, r4, asr #31
   14d18:	ldrdeq	r4, [r1], -r8
   14d1c:	andeq	r5, r1, r8, lsl #2
   14d20:			; <UNDEFINED> instruction: 0x00014fbc
   14d24:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d28:	andeq	r5, r1, r4, lsr r2
   14d2c:	andeq	r5, r1, r4, lsr r2
   14d30:	andeq	r5, r1, r4, lsr r2
   14d34:	andeq	r5, r1, r4, lsr r2
   14d38:	andeq	r5, r1, r4, lsr r2
   14d3c:	andeq	r5, r1, r4, lsr r2
   14d40:	andeq	r5, r1, r4, lsr r2
   14d44:	andeq	r5, r1, r4, lsr r2
   14d48:	andeq	r5, r1, r4, lsr r2
   14d4c:	andeq	r5, r1, r4, lsr r2
   14d50:	andeq	r5, r1, r4, lsr r2
   14d54:	andeq	r5, r1, r4, lsr r2
   14d58:	andeq	r5, r1, r4, lsr r2
   14d5c:	andeq	r5, r1, r4, lsr r2
   14d60:	andeq	r5, r1, r4, lsr r2
   14d64:	andeq	r5, r1, r4, lsr r2
   14d68:	andeq	r5, r1, r4, lsr r2
   14d6c:	andeq	r5, r1, r4, lsr r2
   14d70:	andeq	r4, r1, r0, ror #30
   14d74:	andeq	r4, r1, r4, ror #30
   14d78:	andeq	r4, r1, r4, ror #30
   14d7c:	andeq	r4, r1, r4, asr pc
   14d80:	andeq	r4, r1, r4, ror #30
   14d84:	andeq	r4, r1, ip, ror #29
   14d88:	andeq	r4, r1, r4, ror #30
   14d8c:	andeq	r5, r1, r0, lsl r1
   14d90:	andeq	r4, r1, r4, ror #30
   14d94:	andeq	r4, r1, r4, ror #30
   14d98:	andeq	r4, r1, r4, ror #30
   14d9c:	andeq	r4, r1, ip, ror #29
   14da0:	andeq	r4, r1, ip, ror #29
   14da4:	andeq	r4, r1, ip, ror #29
   14da8:	andeq	r4, r1, ip, ror #29
   14dac:	andeq	r4, r1, ip, ror #29
   14db0:	andeq	r4, r1, ip, ror #29
   14db4:	andeq	r4, r1, ip, ror #29
   14db8:	andeq	r4, r1, ip, ror #29
   14dbc:	andeq	r4, r1, ip, ror #29
   14dc0:	andeq	r4, r1, ip, ror #29
   14dc4:	andeq	r4, r1, ip, ror #29
   14dc8:	andeq	r4, r1, ip, ror #29
   14dcc:	andeq	r4, r1, ip, ror #29
   14dd0:	andeq	r4, r1, ip, ror #29
   14dd4:	andeq	r4, r1, ip, ror #29
   14dd8:	andeq	r4, r1, ip, ror #29
   14ddc:	andeq	r4, r1, r4, ror #30
   14de0:	andeq	r4, r1, r4, ror #30
   14de4:	andeq	r4, r1, r4, ror #30
   14de8:	andeq	r4, r1, r4, ror #30
   14dec:	ldrdeq	r5, [r1], -r4
   14df0:	andeq	r5, r1, r4, lsr r2
   14df4:	andeq	r4, r1, ip, ror #29
   14df8:	andeq	r4, r1, ip, ror #29
   14dfc:	andeq	r4, r1, ip, ror #29
   14e00:	andeq	r4, r1, ip, ror #29
   14e04:	andeq	r4, r1, ip, ror #29
   14e08:	andeq	r4, r1, ip, ror #29
   14e0c:	andeq	r4, r1, ip, ror #29
   14e10:	andeq	r4, r1, ip, ror #29
   14e14:	andeq	r4, r1, ip, ror #29
   14e18:	andeq	r4, r1, ip, ror #29
   14e1c:	andeq	r4, r1, ip, ror #29
   14e20:	andeq	r4, r1, ip, ror #29
   14e24:	andeq	r4, r1, ip, ror #29
   14e28:	andeq	r4, r1, ip, ror #29
   14e2c:	andeq	r4, r1, ip, ror #29
   14e30:	andeq	r4, r1, ip, ror #29
   14e34:	andeq	r4, r1, ip, ror #29
   14e38:	andeq	r4, r1, ip, ror #29
   14e3c:	andeq	r4, r1, ip, ror #29
   14e40:	andeq	r4, r1, ip, ror #29
   14e44:	andeq	r4, r1, ip, ror #29
   14e48:	andeq	r4, r1, ip, ror #29
   14e4c:	andeq	r4, r1, ip, ror #29
   14e50:	andeq	r4, r1, ip, ror #29
   14e54:	andeq	r4, r1, ip, ror #29
   14e58:	andeq	r4, r1, ip, ror #29
   14e5c:	andeq	r4, r1, r4, ror #30
   14e60:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   14e64:	andeq	r4, r1, ip, ror #29
   14e68:	andeq	r4, r1, r4, ror #30
   14e6c:	andeq	r4, r1, ip, ror #29
   14e70:	andeq	r4, r1, r4, ror #30
   14e74:	andeq	r4, r1, ip, ror #29
   14e78:	andeq	r4, r1, ip, ror #29
   14e7c:	andeq	r4, r1, ip, ror #29
   14e80:	andeq	r4, r1, ip, ror #29
   14e84:	andeq	r4, r1, ip, ror #29
   14e88:	andeq	r4, r1, ip, ror #29
   14e8c:	andeq	r4, r1, ip, ror #29
   14e90:	andeq	r4, r1, ip, ror #29
   14e94:	andeq	r4, r1, ip, ror #29
   14e98:	andeq	r4, r1, ip, ror #29
   14e9c:	andeq	r4, r1, ip, ror #29
   14ea0:	andeq	r4, r1, ip, ror #29
   14ea4:	andeq	r4, r1, ip, ror #29
   14ea8:	andeq	r4, r1, ip, ror #29
   14eac:	andeq	r4, r1, ip, ror #29
   14eb0:	andeq	r4, r1, ip, ror #29
   14eb4:	andeq	r4, r1, ip, ror #29
   14eb8:	andeq	r4, r1, ip, ror #29
   14ebc:	andeq	r4, r1, ip, ror #29
   14ec0:	andeq	r4, r1, ip, ror #29
   14ec4:	andeq	r4, r1, ip, ror #29
   14ec8:	andeq	r4, r1, ip, ror #29
   14ecc:	andeq	r4, r1, ip, ror #29
   14ed0:	andeq	r4, r1, ip, ror #29
   14ed4:	andeq	r4, r1, ip, ror #29
   14ed8:	andeq	r4, r1, ip, ror #29
   14edc:	andeq	r4, r1, ip, lsr #30
   14ee0:	andeq	r4, r1, r4, ror #30
   14ee4:	andeq	r4, r1, ip, lsr #30
   14ee8:	andeq	r4, r1, r4, asr pc
   14eec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14ef0:	tst	r0, #1
   14ef4:	bne	151ac <__assert_fail@plt+0x4124>
   14ef8:	ldr	r1, [fp, #16]
   14efc:	ubfx	r0, r6, #5, #3
   14f00:	mov	r2, #1
   14f04:	ldr	r0, [r1, r0, lsl #2]
   14f08:	and	r1, r6, #31
   14f0c:	tst	r0, r2, lsl r1
   14f10:	beq	151ac <__assert_fail@plt+0x4124>
   14f14:	mov	r0, r6
   14f18:	mov	r1, r8
   14f1c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14f20:	tst	r2, #1
   14f24:	beq	151cc <__assert_fail@plt+0x4144>
   14f28:	b	15928 <__assert_fail@plt+0x48a0>
   14f2c:	cmp	r7, #1
   14f30:	beq	14f54 <__assert_fail@plt+0x3ecc>
   14f34:	mov	r8, #0
   14f38:	cmn	r7, #1
   14f3c:	bne	15198 <__assert_fail@plt+0x4110>
   14f40:	ldrb	r0, [lr, #1]
   14f44:	cmp	r0, #0
   14f48:	beq	14f54 <__assert_fail@plt+0x3ecc>
   14f4c:	mvn	r7, #0
   14f50:	b	15198 <__assert_fail@plt+0x4110>
   14f54:	mov	r8, #0
   14f58:	cmp	sl, #0
   14f5c:	bne	15198 <__assert_fail@plt+0x4110>
   14f60:	mov	r1, #1
   14f64:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14f68:	cmp	r0, #2
   14f6c:	bne	14f84 <__assert_fail@plt+0x3efc>
   14f70:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14f74:	mov	r8, r1
   14f78:	tst	r0, #1
   14f7c:	beq	14eec <__assert_fail@plt+0x3e64>
   14f80:	b	15928 <__assert_fail@plt+0x48a0>
   14f84:	mov	r8, r1
   14f88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14f8c:	tst	r0, #1
   14f90:	beq	14ef8 <__assert_fail@plt+0x3e70>
   14f94:	b	151ac <__assert_fail@plt+0x4124>
   14f98:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14f9c:	cmp	r0, #2
   14fa0:	bne	15260 <__assert_fail@plt+0x41d8>
   14fa4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14fa8:	tst	r0, #1
   14fac:	bne	15928 <__assert_fail@plt+0x48a0>
   14fb0:	mov	r0, #0
   14fb4:	str	r0, [fp, #-56]	; 0xffffffc8
   14fb8:	b	15278 <__assert_fail@plt+0x41f0>
   14fbc:	mov	r0, #102	; 0x66
   14fc0:	b	152e8 <__assert_fail@plt+0x4260>
   14fc4:	mov	r2, #116	; 0x74
   14fc8:	b	14fd8 <__assert_fail@plt+0x3f50>
   14fcc:	mov	r0, #98	; 0x62
   14fd0:	b	152e8 <__assert_fail@plt+0x4260>
   14fd4:	mov	r2, #114	; 0x72
   14fd8:	ldr	r0, [sp, #64]	; 0x40
   14fdc:	tst	r0, #1
   14fe0:	mov	r0, r2
   14fe4:	bne	152e8 <__assert_fail@plt+0x4260>
   14fe8:	b	15928 <__assert_fail@plt+0x48a0>
   14fec:	ldr	r0, [sp, #88]	; 0x58
   14ff0:	tst	r0, #1
   14ff4:	beq	15308 <__assert_fail@plt+0x4280>
   14ff8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14ffc:	tst	r0, #1
   15000:	bne	15a64 <__assert_fail@plt+0x49dc>
   15004:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15008:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1500c:	subs	r0, r0, #2
   15010:	movwne	r0, #1
   15014:	orr	r0, r0, r1
   15018:	tst	r0, #1
   1501c:	bne	15058 <__assert_fail@plt+0x3fd0>
   15020:	cmp	r9, r5
   15024:	movcc	r0, #39	; 0x27
   15028:	strbcc	r0, [ip, r9]
   1502c:	add	r0, r9, #1
   15030:	cmp	r0, r5
   15034:	movcc	r1, #36	; 0x24
   15038:	strbcc	r1, [ip, r0]
   1503c:	add	r0, r9, #2
   15040:	add	r9, r9, #3
   15044:	cmp	r0, r5
   15048:	movcc	r1, #39	; 0x27
   1504c:	strbcc	r1, [ip, r0]
   15050:	mov	r0, #1
   15054:	str	r0, [fp, #-52]	; 0xffffffcc
   15058:	mov	r1, #1
   1505c:	cmp	r9, r5
   15060:	mov	r8, #0
   15064:	mov	r6, #48	; 0x30
   15068:	str	r1, [fp, #-56]	; 0xffffffc8
   1506c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15070:	movcc	r0, #92	; 0x5c
   15074:	strbcc	r0, [ip, r9]
   15078:	add	r0, r9, #1
   1507c:	cmp	r1, #2
   15080:	beq	154d4 <__assert_fail@plt+0x444c>
   15084:	add	r1, sl, #1
   15088:	cmp	r1, r7
   1508c:	bcs	154d4 <__assert_fail@plt+0x444c>
   15090:	ldrb	r1, [lr, r1]
   15094:	sub	r1, r1, #48	; 0x30
   15098:	uxtb	r1, r1
   1509c:	cmp	r1, #9
   150a0:	bhi	154d4 <__assert_fail@plt+0x444c>
   150a4:	cmp	r0, r5
   150a8:	movcc	r1, #48	; 0x30
   150ac:	strbcc	r1, [ip, r0]
   150b0:	add	r0, r9, #2
   150b4:	add	r9, r9, #3
   150b8:	cmp	r0, r5
   150bc:	movcc	r1, #48	; 0x30
   150c0:	strbcc	r1, [ip, r0]
   150c4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   150c8:	tst	r0, #1
   150cc:	beq	14ef8 <__assert_fail@plt+0x3e70>
   150d0:	b	151ac <__assert_fail@plt+0x4124>
   150d4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   150d8:	mov	r6, #63	; 0x3f
   150dc:	cmp	r0, #5
   150e0:	beq	154e8 <__assert_fail@plt+0x4460>
   150e4:	mov	r1, #0
   150e8:	cmp	r0, #2
   150ec:	str	r1, [fp, #-56]	; 0xffffffc8
   150f0:	bne	155b0 <__assert_fail@plt+0x4528>
   150f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   150f8:	mov	r8, #0
   150fc:	tst	r0, #1
   15100:	beq	14eec <__assert_fail@plt+0x3e64>
   15104:	b	15928 <__assert_fail@plt+0x48a0>
   15108:	mov	r0, #118	; 0x76
   1510c:	b	152e8 <__assert_fail@plt+0x4260>
   15110:	mov	r0, #1
   15114:	mov	r6, #39	; 0x27
   15118:	str	r0, [sp, #60]	; 0x3c
   1511c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15120:	cmp	r0, #2
   15124:	bne	15328 <__assert_fail@plt+0x42a0>
   15128:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1512c:	tst	r0, #1
   15130:	bne	15928 <__assert_fail@plt+0x48a0>
   15134:	ldr	r2, [sp, #56]	; 0x38
   15138:	clz	r1, r5
   1513c:	mov	r8, #1
   15140:	lsr	r1, r1, #5
   15144:	cmp	r2, #0
   15148:	mov	r0, r2
   1514c:	movwne	r0, #1
   15150:	orrs	r0, r0, r1
   15154:	moveq	r2, r5
   15158:	moveq	r5, r0
   1515c:	cmp	r9, r5
   15160:	str	r2, [sp, #56]	; 0x38
   15164:	movcc	r0, #39	; 0x27
   15168:	strbcc	r0, [ip, r9]
   1516c:	add	r0, r9, #1
   15170:	cmp	r0, r5
   15174:	movcc	r1, #92	; 0x5c
   15178:	strbcc	r1, [ip, r0]
   1517c:	add	r0, r9, #2
   15180:	add	r9, r9, #3
   15184:	cmp	r0, r5
   15188:	movcc	r1, #39	; 0x27
   1518c:	strbcc	r1, [ip, r0]
   15190:	mov	r0, #0
   15194:	str	r0, [fp, #-52]	; 0xffffffcc
   15198:	mov	r0, #0
   1519c:	str	r0, [fp, #-56]	; 0xffffffc8
   151a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   151a4:	tst	r0, #1
   151a8:	beq	14ef8 <__assert_fail@plt+0x3e70>
   151ac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   151b0:	mov	r1, r8
   151b4:	cmp	r0, #0
   151b8:	mov	r0, r6
   151bc:	beq	15280 <__assert_fail@plt+0x41f8>
   151c0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   151c4:	tst	r2, #1
   151c8:	bne	15928 <__assert_fail@plt+0x48a0>
   151cc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   151d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   151d4:	subs	r2, r2, #2
   151d8:	movwne	r2, #1
   151dc:	orr	r2, r2, r3
   151e0:	tst	r2, #1
   151e4:	bne	15220 <__assert_fail@plt+0x4198>
   151e8:	cmp	r9, r5
   151ec:	movcc	r2, #39	; 0x27
   151f0:	strbcc	r2, [ip, r9]
   151f4:	add	r2, r9, #1
   151f8:	cmp	r2, r5
   151fc:	movcc	r3, #36	; 0x24
   15200:	strbcc	r3, [ip, r2]
   15204:	add	r2, r9, #2
   15208:	add	r9, r9, #3
   1520c:	cmp	r2, r5
   15210:	movcc	r3, #39	; 0x27
   15214:	strbcc	r3, [ip, r2]
   15218:	mov	r2, #1
   1521c:	str	r2, [fp, #-52]	; 0xffffffcc
   15220:	cmp	r9, r5
   15224:	movcc	r2, #92	; 0x5c
   15228:	strbcc	r2, [ip, r9]
   1522c:	add	r9, r9, #1
   15230:	b	152c8 <__assert_fail@plt+0x4240>
   15234:	ldr	r0, [sp, #40]	; 0x28
   15238:	cmp	r0, #1
   1523c:	bne	1533c <__assert_fail@plt+0x42b4>
   15240:	bl	10f68 <__ctype_b_loc@plt>
   15244:	ldr	r0, [r0]
   15248:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1524c:	mov	r1, #1
   15250:	add	r0, r0, r6, lsl #1
   15254:	ldrb	r0, [r0, #1]
   15258:	ubfx	r8, r0, #6, #1
   1525c:	b	15694 <__assert_fail@plt+0x460c>
   15260:	ldr	r1, [sp, #48]	; 0x30
   15264:	mov	r0, #0
   15268:	str	r0, [fp, #-56]	; 0xffffffc8
   1526c:	mov	r0, #92	; 0x5c
   15270:	cmp	r1, #0
   15274:	beq	152e8 <__assert_fail@plt+0x4260>
   15278:	mov	r6, #92	; 0x5c
   1527c:	mov	r8, #0
   15280:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15284:	cmp	r0, #0
   15288:	bne	152c0 <__assert_fail@plt+0x4238>
   1528c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15290:	tst	r0, #1
   15294:	beq	152c0 <__assert_fail@plt+0x4238>
   15298:	cmp	r9, r5
   1529c:	movcc	r0, #39	; 0x27
   152a0:	strbcc	r0, [ip, r9]
   152a4:	add	r0, r9, #1
   152a8:	add	r9, r9, #2
   152ac:	cmp	r0, r5
   152b0:	movcc	r1, #39	; 0x27
   152b4:	strbcc	r1, [ip, r0]
   152b8:	mov	r0, #0
   152bc:	str	r0, [fp, #-52]	; 0xffffffcc
   152c0:	mov	r1, r8
   152c4:	mov	r0, r6
   152c8:	cmp	r9, r5
   152cc:	and	r4, r4, r1
   152d0:	strbcc	r0, [ip, r9]
   152d4:	add	r9, r9, #1
   152d8:	add	sl, sl, #1
   152dc:	cmn	r7, #1
   152e0:	bne	14bd8 <__assert_fail@plt+0x3b50>
   152e4:	b	14be4 <__assert_fail@plt+0x3b5c>
   152e8:	mov	r1, #0
   152ec:	mov	r8, #0
   152f0:	str	r1, [fp, #-56]	; 0xffffffc8
   152f4:	ldr	r1, [sp, #88]	; 0x58
   152f8:	tst	r1, #1
   152fc:	mov	r1, #0
   15300:	beq	14eec <__assert_fail@plt+0x3e64>
   15304:	b	151c0 <__assert_fail@plt+0x4138>
   15308:	ldr	r0, [sp, #36]	; 0x24
   1530c:	mov	r6, #0
   15310:	mov	r8, #0
   15314:	cmp	r0, #0
   15318:	mov	r0, #0
   1531c:	str	r0, [fp, #-56]	; 0xffffffc8
   15320:	bne	152d8 <__assert_fail@plt+0x4250>
   15324:	b	14eec <__assert_fail@plt+0x3e64>
   15328:	mov	r8, #1
   1532c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15330:	tst	r0, #1
   15334:	beq	14ef8 <__assert_fail@plt+0x3e70>
   15338:	b	151ac <__assert_fail@plt+0x4124>
   1533c:	mov	r0, #0
   15340:	cmn	r7, #1
   15344:	str	r0, [fp, #-36]	; 0xffffffdc
   15348:	str	r0, [fp, #-40]	; 0xffffffd8
   1534c:	bne	15360 <__assert_fail@plt+0x42d8>
   15350:	mov	r0, lr
   15354:	bl	10f8c <strlen@plt>
   15358:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1535c:	mov	r7, r0
   15360:	ldr	r0, [sp, #44]	; 0x2c
   15364:	str	r4, [sp, #84]	; 0x54
   15368:	str	r5, [sp, #28]
   1536c:	cmp	r0, #0
   15370:	beq	155c4 <__assert_fail@plt+0x453c>
   15374:	ldr	r0, [sp, #80]	; 0x50
   15378:	mov	r8, #1
   1537c:	mov	r5, #0
   15380:	add	r0, r0, sl
   15384:	str	r0, [sp, #24]
   15388:	sub	r0, fp, #40	; 0x28
   1538c:	mov	r3, r0
   15390:	b	153cc <__assert_fail@plt+0x4344>
   15394:	ldr	r5, [sp, #68]	; 0x44
   15398:	add	r5, r0, r5
   1539c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   153a0:	bl	10ed8 <iswprint@plt>
   153a4:	cmp	r0, #0
   153a8:	sub	r4, fp, #40	; 0x28
   153ac:	movwne	r0, #1
   153b0:	and	r8, r8, r0
   153b4:	mov	r0, r4
   153b8:	bl	10e9c <mbsinit@plt>
   153bc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   153c0:	mov	r3, r4
   153c4:	cmp	r0, #0
   153c8:	bne	15688 <__assert_fail@plt+0x4600>
   153cc:	str	r5, [sp, #68]	; 0x44
   153d0:	add	r5, r5, sl
   153d4:	sub	r0, fp, #44	; 0x2c
   153d8:	add	r1, lr, r5
   153dc:	sub	r2, r7, r5
   153e0:	bl	18b94 <__assert_fail@plt+0x7b0c>
   153e4:	cmn	r0, #2
   153e8:	beq	15648 <__assert_fail@plt+0x45c0>
   153ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   153f0:	cmn	r0, #1
   153f4:	beq	1563c <__assert_fail@plt+0x45b4>
   153f8:	cmp	r0, #0
   153fc:	beq	15640 <__assert_fail@plt+0x45b8>
   15400:	cmp	r0, #2
   15404:	bcc	15394 <__assert_fail@plt+0x430c>
   15408:	ldr	r1, [sp, #68]	; 0x44
   1540c:	ldr	r2, [sp, #24]
   15410:	add	r1, r2, r1
   15414:	sub	r2, r0, #1
   15418:	ldrb	r3, [r1]
   1541c:	sub	r3, r3, #91	; 0x5b
   15420:	cmp	r3, #33	; 0x21
   15424:	bls	15444 <__assert_fail@plt+0x43bc>
   15428:	add	r1, r1, #1
   1542c:	subs	r2, r2, #1
   15430:	beq	15394 <__assert_fail@plt+0x430c>
   15434:	ldrb	r3, [r1]
   15438:	sub	r3, r3, #91	; 0x5b
   1543c:	cmp	r3, #33	; 0x21
   15440:	bhi	15428 <__assert_fail@plt+0x43a0>
   15444:	add	r5, pc, #0
   15448:	ldr	pc, [r5, r3, lsl #2]
   1544c:	andeq	r5, r1, r0, ror #18
   15450:	andeq	r5, r1, r0, ror #18
   15454:	andeq	r5, r1, r8, lsr #8
   15458:	andeq	r5, r1, r0, ror #18
   1545c:	andeq	r5, r1, r8, lsr #8
   15460:	andeq	r5, r1, r0, ror #18
   15464:	andeq	r5, r1, r8, lsr #8
   15468:	andeq	r5, r1, r8, lsr #8
   1546c:	andeq	r5, r1, r8, lsr #8
   15470:	andeq	r5, r1, r8, lsr #8
   15474:	andeq	r5, r1, r8, lsr #8
   15478:	andeq	r5, r1, r8, lsr #8
   1547c:	andeq	r5, r1, r8, lsr #8
   15480:	andeq	r5, r1, r8, lsr #8
   15484:	andeq	r5, r1, r8, lsr #8
   15488:	andeq	r5, r1, r8, lsr #8
   1548c:	andeq	r5, r1, r8, lsr #8
   15490:	andeq	r5, r1, r8, lsr #8
   15494:	andeq	r5, r1, r8, lsr #8
   15498:	andeq	r5, r1, r8, lsr #8
   1549c:	andeq	r5, r1, r8, lsr #8
   154a0:	andeq	r5, r1, r8, lsr #8
   154a4:	andeq	r5, r1, r8, lsr #8
   154a8:	andeq	r5, r1, r8, lsr #8
   154ac:	andeq	r5, r1, r8, lsr #8
   154b0:	andeq	r5, r1, r8, lsr #8
   154b4:	andeq	r5, r1, r8, lsr #8
   154b8:	andeq	r5, r1, r8, lsr #8
   154bc:	andeq	r5, r1, r8, lsr #8
   154c0:	andeq	r5, r1, r8, lsr #8
   154c4:	andeq	r5, r1, r8, lsr #8
   154c8:	andeq	r5, r1, r8, lsr #8
   154cc:	andeq	r5, r1, r8, lsr #8
   154d0:	andeq	r5, r1, r0, ror #18
   154d4:	mov	r9, r0
   154d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   154dc:	tst	r0, #1
   154e0:	beq	14ef8 <__assert_fail@plt+0x3e70>
   154e4:	b	151ac <__assert_fail@plt+0x4124>
   154e8:	mov	r0, #0
   154ec:	str	r0, [fp, #-56]	; 0xffffffc8
   154f0:	ldr	r0, [sp, #32]
   154f4:	cmp	r0, #0
   154f8:	beq	155b0 <__assert_fail@plt+0x4528>
   154fc:	add	r0, sl, #2
   15500:	mov	r1, r7
   15504:	cmp	r0, r7
   15508:	bcs	155b0 <__assert_fail@plt+0x4528>
   1550c:	add	r1, sl, lr
   15510:	ldrb	r1, [r1, #1]
   15514:	cmp	r1, #63	; 0x3f
   15518:	bne	155b0 <__assert_fail@plt+0x4528>
   1551c:	ldrb	r8, [lr, r0]
   15520:	sub	r2, r8, #33	; 0x21
   15524:	cmp	r2, #29
   15528:	bhi	155b0 <__assert_fail@plt+0x4528>
   1552c:	mov	r1, r4
   15530:	movw	r4, #20929	; 0x51c1
   15534:	mov	r3, #1
   15538:	movt	r4, #14336	; 0x3800
   1553c:	tst	r4, r3, lsl r2
   15540:	beq	1586c <__assert_fail@plt+0x47e4>
   15544:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15548:	tst	r2, #1
   1554c:	bne	15928 <__assert_fail@plt+0x48a0>
   15550:	cmp	r9, r5
   15554:	mov	r6, r8
   15558:	mov	r4, r1
   1555c:	mov	sl, r0
   15560:	mov	r8, #0
   15564:	movcc	r2, #63	; 0x3f
   15568:	strbcc	r2, [ip, r9]
   1556c:	add	r2, r9, #1
   15570:	cmp	r2, r5
   15574:	movcc	r3, #34	; 0x22
   15578:	strbcc	r3, [ip, r2]
   1557c:	add	r2, r9, #2
   15580:	cmp	r2, r5
   15584:	movcc	r3, #34	; 0x22
   15588:	strbcc	r3, [ip, r2]
   1558c:	add	r2, r9, #3
   15590:	add	r9, r9, #4
   15594:	cmp	r2, r5
   15598:	movcc	r3, #63	; 0x3f
   1559c:	strbcc	r3, [ip, r2]
   155a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   155a4:	tst	r0, #1
   155a8:	beq	14ef8 <__assert_fail@plt+0x3e70>
   155ac:	b	151ac <__assert_fail@plt+0x4124>
   155b0:	mov	r8, #0
   155b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   155b8:	tst	r0, #1
   155bc:	beq	14ef8 <__assert_fail@plt+0x3e70>
   155c0:	b	151ac <__assert_fail@plt+0x4124>
   155c4:	mov	r8, #1
   155c8:	mov	r5, #0
   155cc:	sub	r4, fp, #40	; 0x28
   155d0:	str	r5, [sp, #68]	; 0x44
   155d4:	add	r5, r5, sl
   155d8:	sub	r0, fp, #44	; 0x2c
   155dc:	mov	r3, r4
   155e0:	add	r1, lr, r5
   155e4:	sub	r2, r7, r5
   155e8:	bl	18b94 <__assert_fail@plt+0x7b0c>
   155ec:	cmn	r0, #2
   155f0:	beq	15648 <__assert_fail@plt+0x45c0>
   155f4:	cmn	r0, #1
   155f8:	beq	1563c <__assert_fail@plt+0x45b4>
   155fc:	ldr	r5, [sp, #68]	; 0x44
   15600:	cmp	r0, #0
   15604:	beq	15684 <__assert_fail@plt+0x45fc>
   15608:	add	r5, r0, r5
   1560c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15610:	bl	10ed8 <iswprint@plt>
   15614:	cmp	r0, #0
   15618:	sub	r4, fp, #40	; 0x28
   1561c:	movwne	r0, #1
   15620:	and	r8, r8, r0
   15624:	mov	r0, r4
   15628:	bl	10e9c <mbsinit@plt>
   1562c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15630:	cmp	r0, #0
   15634:	beq	155d0 <__assert_fail@plt+0x4548>
   15638:	b	15688 <__assert_fail@plt+0x4600>
   1563c:	mov	r8, #0
   15640:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15644:	b	1567c <__assert_fail@plt+0x45f4>
   15648:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1564c:	mov	r8, #0
   15650:	cmp	r5, r7
   15654:	bcs	1567c <__assert_fail@plt+0x45f4>
   15658:	ldrb	r0, [lr, r5]
   1565c:	cmp	r0, #0
   15660:	beq	1567c <__assert_fail@plt+0x45f4>
   15664:	ldr	r0, [sp, #68]	; 0x44
   15668:	add	r0, r0, #1
   1566c:	add	r5, r0, sl
   15670:	str	r0, [sp, #68]	; 0x44
   15674:	cmp	r5, r7
   15678:	bcc	15658 <__assert_fail@plt+0x45d0>
   1567c:	ldr	r5, [sp, #68]	; 0x44
   15680:	b	15688 <__assert_fail@plt+0x4600>
   15684:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15688:	mov	r1, r5
   1568c:	ldr	r5, [sp, #28]
   15690:	ldr	r4, [sp, #84]	; 0x54
   15694:	ldr	r0, [sp, #52]	; 0x34
   15698:	ldr	ip, [fp, #-84]	; 0xffffffac
   1569c:	cmp	r1, #1
   156a0:	orr	r2, r8, r0
   156a4:	mov	r0, r1
   156a8:	bhi	156b4 <__assert_fail@plt+0x462c>
   156ac:	tst	r2, #1
   156b0:	bne	14eec <__assert_fail@plt+0x3e64>
   156b4:	add	r0, r0, sl
   156b8:	str	r2, [sp, #84]	; 0x54
   156bc:	str	r0, [fp, #-56]	; 0xffffffc8
   156c0:	mov	r0, #0
   156c4:	tst	r2, #1
   156c8:	bne	157a8 <__assert_fail@plt+0x4720>
   156cc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   156d0:	tst	r1, #1
   156d4:	bne	15928 <__assert_fail@plt+0x48a0>
   156d8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   156dc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   156e0:	subs	r2, r1, #2
   156e4:	movwne	r2, #1
   156e8:	orr	r2, r2, r0
   156ec:	tst	r2, #1
   156f0:	bne	1572c <__assert_fail@plt+0x46a4>
   156f4:	cmp	r9, r5
   156f8:	add	r2, r9, #1
   156fc:	mov	r0, #1
   15700:	movcc	r1, #39	; 0x27
   15704:	str	r0, [fp, #-52]	; 0xffffffcc
   15708:	strbcc	r1, [ip, r9]
   1570c:	cmp	r2, r5
   15710:	movcc	r1, #36	; 0x24
   15714:	strbcc	r1, [ip, r2]
   15718:	add	r2, r9, #2
   1571c:	add	r9, r9, #3
   15720:	cmp	r2, r5
   15724:	movcc	r1, #39	; 0x27
   15728:	strbcc	r1, [ip, r2]
   1572c:	cmp	r9, r5
   15730:	add	r2, r9, #1
   15734:	movcc	r1, #92	; 0x5c
   15738:	strbcc	r1, [ip, r9]
   1573c:	cmp	r2, r5
   15740:	bcs	15754 <__assert_fail@plt+0x46cc>
   15744:	uxtb	r3, r6
   15748:	mov	r1, #48	; 0x30
   1574c:	orr	r3, r1, r3, lsr #6
   15750:	strb	r3, [ip, r2]
   15754:	add	r2, r9, #2
   15758:	add	r9, r9, #3
   1575c:	cmp	r2, r5
   15760:	lsrcc	r3, r6, #3
   15764:	movcc	r1, #6
   15768:	bficc	r3, r1, #3, #29
   1576c:	mov	r1, #6
   15770:	bfi	r6, r1, #3, #29
   15774:	strbcc	r3, [ip, r2]
   15778:	mov	r2, #1
   1577c:	b	157dc <__assert_fail@plt+0x4754>
   15780:	ldr	r1, [sp, #80]	; 0x50
   15784:	cmp	r9, r2
   15788:	mov	r5, r2
   1578c:	ldr	r2, [sp, #84]	; 0x54
   15790:	strbcc	r6, [ip, r9]
   15794:	add	r9, r9, #1
   15798:	ldrb	r6, [r1, sl]
   1579c:	mov	sl, r3
   157a0:	tst	r2, #1
   157a4:	beq	156cc <__assert_fail@plt+0x4644>
   157a8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   157ac:	tst	r1, #1
   157b0:	beq	157d0 <__assert_fail@plt+0x4748>
   157b4:	cmp	r9, r5
   157b8:	mov	r2, r0
   157bc:	movcc	r1, #92	; 0x5c
   157c0:	strbcc	r1, [ip, r9]
   157c4:	add	r9, r9, #1
   157c8:	mov	r1, #0
   157cc:	b	157d8 <__assert_fail@plt+0x4750>
   157d0:	mov	r1, #0
   157d4:	mov	r2, r0
   157d8:	str	r1, [fp, #-48]	; 0xffffffd0
   157dc:	mov	r0, r2
   157e0:	and	r1, r2, #1
   157e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   157e8:	add	r3, sl, #1
   157ec:	cmp	r2, r3
   157f0:	bls	15850 <__assert_fail@plt+0x47c8>
   157f4:	mov	r2, r5
   157f8:	ldr	r5, [fp, #-52]	; 0xffffffcc
   157fc:	cmp	r1, #0
   15800:	movwne	r1, #1
   15804:	mvn	r5, r5
   15808:	orr	r5, r5, r1
   1580c:	tst	r5, #1
   15810:	bne	15780 <__assert_fail@plt+0x46f8>
   15814:	cmp	r9, r2
   15818:	movcc	r5, r4
   1581c:	movcc	r4, #39	; 0x27
   15820:	strbcc	r4, [ip, r9]
   15824:	movcc	r4, r5
   15828:	add	r5, r9, #1
   1582c:	add	r9, r9, #2
   15830:	cmp	r5, r2
   15834:	movcc	r1, r4
   15838:	movcc	r4, #39	; 0x27
   1583c:	strbcc	r4, [ip, r5]
   15840:	movcc	r4, r1
   15844:	mov	r1, #0
   15848:	str	r1, [fp, #-52]	; 0xffffffcc
   1584c:	b	15780 <__assert_fail@plt+0x46f8>
   15850:	cmp	r1, #0
   15854:	movwne	r1, #1
   15858:	str	r1, [fp, #-56]	; 0xffffffc8
   1585c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15860:	cmp	r0, #0
   15864:	beq	1528c <__assert_fail@plt+0x4204>
   15868:	b	152c0 <__assert_fail@plt+0x4238>
   1586c:	mov	r8, #0
   15870:	mov	r4, r1
   15874:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15878:	tst	r0, #1
   1587c:	beq	14ef8 <__assert_fail@plt+0x3e70>
   15880:	b	151ac <__assert_fail@plt+0x4124>
   15884:	mov	r7, sl
   15888:	b	15890 <__assert_fail@plt+0x4808>
   1588c:	mvn	r7, #0
   15890:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15894:	ldr	r3, [fp, #-76]	; 0xffffffb4
   15898:	ldr	r2, [sp, #88]	; 0x58
   1589c:	eor	r0, r1, #2
   158a0:	orr	r0, r0, r9
   158a4:	clz	r0, r0
   158a8:	lsr	r0, r0, #5
   158ac:	tst	r3, r0
   158b0:	bne	15928 <__assert_fail@plt+0x48a0>
   158b4:	subs	r0, r1, #2
   158b8:	movwne	r0, #1
   158bc:	orr	r0, r3, r0
   158c0:	tst	r0, #1
   158c4:	ldreq	r0, [sp, #60]	; 0x3c
   158c8:	eoreq	r0, r0, #1
   158cc:	tsteq	r0, #1
   158d0:	bne	15a04 <__assert_fail@plt+0x497c>
   158d4:	tst	r4, #1
   158d8:	bne	159c8 <__assert_fail@plt+0x4940>
   158dc:	ldr	r6, [sp, #56]	; 0x38
   158e0:	mov	r8, #0
   158e4:	cmp	r6, #0
   158e8:	beq	15a00 <__assert_fail@plt+0x4978>
   158ec:	mov	r1, #0
   158f0:	mov	r4, #2
   158f4:	cmp	r5, #0
   158f8:	mov	r0, r2
   158fc:	mov	r3, #0
   15900:	str	r1, [sp, #84]	; 0x54
   15904:	beq	1474c <__assert_fail@plt+0x36c4>
   15908:	b	15a04 <__assert_fail@plt+0x497c>
   1590c:	movw	r0, #40725	; 0x9f15
   15910:	movt	r0, #1
   15914:	str	r0, [sp, #76]	; 0x4c
   15918:	mov	r9, #0
   1591c:	tst	r8, #1
   15920:	beq	149e4 <__assert_fail@plt+0x395c>
   15924:	b	14b24 <__assert_fail@plt+0x3a9c>
   15928:	ldr	r1, [sp, #88]	; 0x58
   1592c:	mov	r0, #2
   15930:	tst	r1, #1
   15934:	movwne	r0, #4
   15938:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1593c:	ldr	r1, [fp, #12]
   15940:	cmp	r2, #2
   15944:	moveq	r2, r0
   15948:	b	15980 <__assert_fail@plt+0x48f8>
   1594c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15950:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15954:	ldr	r1, [fp, #12]
   15958:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1595c:	b	15980 <__assert_fail@plt+0x48f8>
   15960:	ldr	r1, [sp, #88]	; 0x58
   15964:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15968:	ldr	r5, [sp, #28]
   1596c:	mov	r0, #2
   15970:	tst	r1, #1
   15974:	ldr	r1, [fp, #12]
   15978:	movwne	r0, #4
   1597c:	mov	r2, r0
   15980:	mov	r0, #0
   15984:	bic	r1, r1, #2
   15988:	str	r2, [sp]
   1598c:	mov	r2, lr
   15990:	str	r0, [sp, #8]
   15994:	ldr	r0, [sp, #72]	; 0x48
   15998:	str	r1, [sp, #4]
   1599c:	mov	r1, r5
   159a0:	str	r0, [sp, #12]
   159a4:	ldr	r0, [sp, #76]	; 0x4c
   159a8:	str	r0, [sp, #16]
   159ac:	mov	r0, ip
   159b0:	mov	r3, r7
   159b4:	bl	146c0 <__assert_fail@plt+0x3638>
   159b8:	mov	r9, r0
   159bc:	mov	r0, r9
   159c0:	sub	sp, fp, #28
   159c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159c8:	mov	r0, #5
   159cc:	ldr	r1, [sp, #56]	; 0x38
   159d0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   159d4:	str	r0, [sp]
   159d8:	ldr	r0, [fp, #12]
   159dc:	str	r0, [sp, #4]
   159e0:	ldr	r0, [fp, #16]
   159e4:	str	r0, [sp, #8]
   159e8:	ldr	r0, [sp, #72]	; 0x48
   159ec:	str	r0, [sp, #12]
   159f0:	ldr	r0, [sp, #76]	; 0x4c
   159f4:	str	r0, [sp, #16]
   159f8:	ldr	r0, [fp, #-84]	; 0xffffffac
   159fc:	b	159b0 <__assert_fail@plt+0x4928>
   15a00:	mov	r3, #0
   15a04:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15a08:	cmp	r1, #0
   15a0c:	beq	15a48 <__assert_fail@plt+0x49c0>
   15a10:	ldr	r2, [fp, #-84]	; 0xffffffac
   15a14:	tst	r3, #1
   15a18:	bne	15a4c <__assert_fail@plt+0x49c4>
   15a1c:	ldrb	r0, [r1]
   15a20:	cmp	r0, #0
   15a24:	beq	15a4c <__assert_fail@plt+0x49c4>
   15a28:	add	r1, r1, #1
   15a2c:	cmp	r9, r5
   15a30:	strbcc	r0, [r2, r9]
   15a34:	add	r9, r9, #1
   15a38:	ldrb	r0, [r1], #1
   15a3c:	cmp	r0, #0
   15a40:	bne	15a2c <__assert_fail@plt+0x49a4>
   15a44:	b	15a4c <__assert_fail@plt+0x49c4>
   15a48:	ldr	r2, [fp, #-84]	; 0xffffffac
   15a4c:	cmp	r9, r5
   15a50:	movcc	r0, #0
   15a54:	strbcc	r0, [r2, r9]
   15a58:	mov	r0, r9
   15a5c:	sub	sp, fp, #28
   15a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a64:	mov	r0, #4
   15a68:	b	15938 <__assert_fail@plt+0x48b0>
   15a6c:	bl	1107c <abort@plt>
   15a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a74:	add	fp, sp, #28
   15a78:	sub	sp, sp, #28
   15a7c:	movw	r5, #45432	; 0xb178
   15a80:	cmp	r2, #0
   15a84:	mov	r4, r1
   15a88:	mov	r7, r0
   15a8c:	str	r0, [sp, #20]
   15a90:	movt	r5, #2
   15a94:	movne	r5, r2
   15a98:	bl	10fa4 <__errno_location@plt>
   15a9c:	mov	sl, r0
   15aa0:	ldr	r2, [r5, #40]	; 0x28
   15aa4:	ldr	r3, [r5, #44]	; 0x2c
   15aa8:	ldm	r5, {r0, r1}
   15aac:	orr	r8, r1, #1
   15ab0:	add	r9, r5, #8
   15ab4:	mov	r1, #0
   15ab8:	ldr	r6, [sl]
   15abc:	stm	sp, {r0, r8, r9}
   15ac0:	mov	r0, #0
   15ac4:	str	r2, [sp, #12]
   15ac8:	str	r3, [sp, #16]
   15acc:	mov	r2, r7
   15ad0:	mov	r3, r4
   15ad4:	str	r6, [sp, #24]
   15ad8:	mov	r6, r4
   15adc:	bl	146c0 <__assert_fail@plt+0x3638>
   15ae0:	add	r7, r0, #1
   15ae4:	mov	r0, r7
   15ae8:	bl	16b50 <__assert_fail@plt+0x5ac8>
   15aec:	mov	r4, r0
   15af0:	ldr	r0, [r5]
   15af4:	ldr	r2, [r5, #44]	; 0x2c
   15af8:	ldr	r1, [r5, #40]	; 0x28
   15afc:	mov	r3, r6
   15b00:	stm	sp, {r0, r8, r9}
   15b04:	str	r2, [sp, #16]
   15b08:	ldr	r2, [sp, #20]
   15b0c:	str	r1, [sp, #12]
   15b10:	mov	r0, r4
   15b14:	mov	r1, r7
   15b18:	bl	146c0 <__assert_fail@plt+0x3638>
   15b1c:	ldr	r0, [sp, #24]
   15b20:	str	r0, [sl]
   15b24:	mov	r0, r4
   15b28:	sub	sp, fp, #28
   15b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b34:	add	fp, sp, #28
   15b38:	sub	sp, sp, #36	; 0x24
   15b3c:	movw	r8, #45432	; 0xb178
   15b40:	cmp	r3, #0
   15b44:	mov	r4, r2
   15b48:	str	r2, [sp, #24]
   15b4c:	mov	r5, r1
   15b50:	mov	r6, r0
   15b54:	str	r0, [sp, #20]
   15b58:	movt	r8, #2
   15b5c:	movne	r8, r3
   15b60:	bl	10fa4 <__errno_location@plt>
   15b64:	str	r0, [sp, #28]
   15b68:	ldr	r1, [r8, #40]	; 0x28
   15b6c:	ldr	r2, [r8, #44]	; 0x2c
   15b70:	ldr	r7, [r0]
   15b74:	cmp	r4, #0
   15b78:	add	sl, r8, #8
   15b7c:	mov	r0, #0
   15b80:	ldm	r8, {r3, r9}
   15b84:	orreq	r9, r9, #1
   15b88:	stm	sp, {r3, r9, sl}
   15b8c:	str	r1, [sp, #12]
   15b90:	str	r2, [sp, #16]
   15b94:	mov	r1, #0
   15b98:	mov	r2, r6
   15b9c:	mov	r3, r5
   15ba0:	str	r7, [sp, #32]
   15ba4:	mov	r7, r5
   15ba8:	bl	146c0 <__assert_fail@plt+0x3638>
   15bac:	add	r4, r0, #1
   15bb0:	mov	r5, r0
   15bb4:	mov	r0, r4
   15bb8:	bl	16b50 <__assert_fail@plt+0x5ac8>
   15bbc:	mov	r6, r0
   15bc0:	ldr	r0, [r8]
   15bc4:	ldr	r2, [r8, #44]	; 0x2c
   15bc8:	ldr	r1, [r8, #40]	; 0x28
   15bcc:	mov	r3, r7
   15bd0:	stm	sp, {r0, r9, sl}
   15bd4:	str	r2, [sp, #16]
   15bd8:	ldr	r2, [sp, #20]
   15bdc:	str	r1, [sp, #12]
   15be0:	mov	r0, r6
   15be4:	mov	r1, r4
   15be8:	bl	146c0 <__assert_fail@plt+0x3638>
   15bec:	ldr	r0, [sp, #24]
   15bf0:	ldr	r1, [sp, #32]
   15bf4:	ldr	r2, [sp, #28]
   15bf8:	cmp	r0, #0
   15bfc:	str	r1, [r2]
   15c00:	strne	r5, [r0]
   15c04:	mov	r0, r6
   15c08:	sub	sp, fp, #28
   15c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c10:	push	{r4, r5, r6, r7, fp, lr}
   15c14:	add	fp, sp, #16
   15c18:	movw	r4, #45344	; 0xb120
   15c1c:	movt	r4, #2
   15c20:	ldrd	r6, [r4]
   15c24:	cmp	r7, #2
   15c28:	blt	15c54 <__assert_fail@plt+0x4bcc>
   15c2c:	add	r5, r6, #12
   15c30:	mov	r7, #0
   15c34:	ldr	r0, [r5, r7, lsl #3]
   15c38:	bl	143b4 <__assert_fail@plt+0x332c>
   15c3c:	ldr	r1, [r4, #4]
   15c40:	add	r2, r7, #2
   15c44:	add	r0, r7, #1
   15c48:	mov	r7, r0
   15c4c:	cmp	r2, r1
   15c50:	blt	15c34 <__assert_fail@plt+0x4bac>
   15c54:	ldr	r0, [r6, #4]
   15c58:	movw	r5, #45480	; 0xb1a8
   15c5c:	movt	r5, #2
   15c60:	cmp	r0, r5
   15c64:	beq	15c78 <__assert_fail@plt+0x4bf0>
   15c68:	bl	143b4 <__assert_fail@plt+0x332c>
   15c6c:	mov	r0, #256	; 0x100
   15c70:	str	r0, [r4, #8]
   15c74:	str	r5, [r4, #12]
   15c78:	add	r5, r4, #8
   15c7c:	cmp	r6, r5
   15c80:	beq	15c90 <__assert_fail@plt+0x4c08>
   15c84:	mov	r0, r6
   15c88:	bl	143b4 <__assert_fail@plt+0x332c>
   15c8c:	str	r5, [r4]
   15c90:	mov	r0, #1
   15c94:	str	r0, [r4, #4]
   15c98:	pop	{r4, r5, r6, r7, fp, pc}
   15c9c:	movw	r3, #45432	; 0xb178
   15ca0:	mvn	r2, #0
   15ca4:	movt	r3, #2
   15ca8:	b	15cac <__assert_fail@plt+0x4c24>
   15cac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cb0:	add	fp, sp, #28
   15cb4:	sub	sp, sp, #44	; 0x2c
   15cb8:	mov	r7, r3
   15cbc:	str	r2, [sp, #36]	; 0x24
   15cc0:	str	r1, [sp, #32]
   15cc4:	mov	r5, r0
   15cc8:	bl	10fa4 <__errno_location@plt>
   15ccc:	cmp	r5, #0
   15cd0:	bmi	15e38 <__assert_fail@plt+0x4db0>
   15cd4:	cmn	r5, #-2147483647	; 0x80000001
   15cd8:	beq	15e38 <__assert_fail@plt+0x4db0>
   15cdc:	movw	r8, #45344	; 0xb120
   15ce0:	mov	r4, r0
   15ce4:	ldr	r0, [r0]
   15ce8:	movt	r8, #2
   15cec:	str	r4, [sp, #28]
   15cf0:	ldr	r1, [r8, #4]
   15cf4:	ldr	r6, [r8]
   15cf8:	str	r0, [sp, #24]
   15cfc:	cmp	r1, r5
   15d00:	ble	15d0c <__assert_fail@plt+0x4c84>
   15d04:	mov	sl, r6
   15d08:	b	15d74 <__assert_fail@plt+0x4cec>
   15d0c:	mov	r0, #8
   15d10:	add	r9, r8, #8
   15d14:	str	r1, [fp, #-32]	; 0xffffffe0
   15d18:	sub	r1, r5, r1
   15d1c:	mvn	r3, #-2147483648	; 0x80000000
   15d20:	str	r0, [sp]
   15d24:	subs	r0, r6, r9
   15d28:	add	r2, r1, #1
   15d2c:	sub	r1, fp, #32
   15d30:	movne	r0, r6
   15d34:	bl	16d50 <__assert_fail@plt+0x5cc8>
   15d38:	mov	sl, r0
   15d3c:	cmp	r6, r9
   15d40:	str	r0, [r8]
   15d44:	bne	15d50 <__assert_fail@plt+0x4cc8>
   15d48:	ldrd	r0, [r8, #8]
   15d4c:	stm	sl, {r0, r1}
   15d50:	ldr	r1, [r8, #4]
   15d54:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15d58:	add	r0, sl, r1, lsl #3
   15d5c:	sub	r1, r2, r1
   15d60:	lsl	r2, r1, #3
   15d64:	mov	r1, #0
   15d68:	bl	10fbc <memset@plt>
   15d6c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15d70:	str	r0, [r8, #4]
   15d74:	mov	r9, sl
   15d78:	ldm	r7, {r0, r1}
   15d7c:	orr	r8, r1, #1
   15d80:	add	r1, r7, #8
   15d84:	ldr	r2, [r7, #40]	; 0x28
   15d88:	ldr	r3, [r7, #44]	; 0x2c
   15d8c:	ldr	r6, [r9, r5, lsl #3]!
   15d90:	str	r1, [sp, #20]
   15d94:	ldr	r4, [r9, #4]!
   15d98:	stm	sp, {r0, r8}
   15d9c:	add	r0, sp, #8
   15da0:	stm	r0, {r1, r2, r3}
   15da4:	ldr	r2, [sp, #32]
   15da8:	ldr	r3, [sp, #36]	; 0x24
   15dac:	mov	r1, r6
   15db0:	mov	r0, r4
   15db4:	bl	146c0 <__assert_fail@plt+0x3638>
   15db8:	cmp	r6, r0
   15dbc:	bhi	15e20 <__assert_fail@plt+0x4d98>
   15dc0:	add	r6, r0, #1
   15dc4:	movw	r0, #45480	; 0xb1a8
   15dc8:	movt	r0, #2
   15dcc:	str	r6, [sl, r5, lsl #3]
   15dd0:	cmp	r4, r0
   15dd4:	beq	15de0 <__assert_fail@plt+0x4d58>
   15dd8:	mov	r0, r4
   15ddc:	bl	143b4 <__assert_fail@plt+0x332c>
   15de0:	mov	r0, r6
   15de4:	bl	16b50 <__assert_fail@plt+0x5ac8>
   15de8:	str	r0, [r9]
   15dec:	mov	r4, r0
   15df0:	add	r3, sp, #8
   15df4:	ldr	r0, [r7]
   15df8:	ldr	r1, [r7, #40]	; 0x28
   15dfc:	ldr	r2, [r7, #44]	; 0x2c
   15e00:	stm	sp, {r0, r8}
   15e04:	ldr	r0, [sp, #20]
   15e08:	stm	r3, {r0, r1, r2}
   15e0c:	ldr	r2, [sp, #32]
   15e10:	ldr	r3, [sp, #36]	; 0x24
   15e14:	mov	r0, r4
   15e18:	mov	r1, r6
   15e1c:	bl	146c0 <__assert_fail@plt+0x3638>
   15e20:	ldr	r1, [sp, #24]
   15e24:	ldr	r0, [sp, #28]
   15e28:	str	r1, [r0]
   15e2c:	mov	r0, r4
   15e30:	sub	sp, fp, #28
   15e34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e38:	bl	1107c <abort@plt>
   15e3c:	movw	r3, #45432	; 0xb178
   15e40:	movt	r3, #2
   15e44:	b	15cac <__assert_fail@plt+0x4c24>
   15e48:	movw	r3, #45432	; 0xb178
   15e4c:	mov	r1, r0
   15e50:	mov	r0, #0
   15e54:	mvn	r2, #0
   15e58:	movt	r3, #2
   15e5c:	b	15cac <__assert_fail@plt+0x4c24>
   15e60:	movw	r3, #45432	; 0xb178
   15e64:	mov	r2, r1
   15e68:	mov	r1, r0
   15e6c:	mov	r0, #0
   15e70:	movt	r3, #2
   15e74:	b	15cac <__assert_fail@plt+0x4c24>
   15e78:	push	{fp, lr}
   15e7c:	mov	fp, sp
   15e80:	sub	sp, sp, #48	; 0x30
   15e84:	vmov.i32	q8, #0	; 0x00000000
   15e88:	mov	ip, #32
   15e8c:	mov	r3, sp
   15e90:	mov	lr, r2
   15e94:	cmp	r1, #10
   15e98:	add	r2, r3, #16
   15e9c:	vst1.64	{d16-d17}, [r3], ip
   15ea0:	vst1.64	{d16-d17}, [r2]
   15ea4:	vst1.64	{d16-d17}, [r3]
   15ea8:	beq	15ec8 <__assert_fail@plt+0x4e40>
   15eac:	str	r1, [sp]
   15eb0:	mov	r3, sp
   15eb4:	mov	r1, lr
   15eb8:	mvn	r2, #0
   15ebc:	bl	15cac <__assert_fail@plt+0x4c24>
   15ec0:	mov	sp, fp
   15ec4:	pop	{fp, pc}
   15ec8:	bl	1107c <abort@plt>
   15ecc:	push	{r4, sl, fp, lr}
   15ed0:	add	fp, sp, #8
   15ed4:	sub	sp, sp, #48	; 0x30
   15ed8:	vmov.i32	q8, #0	; 0x00000000
   15edc:	mov	ip, r3
   15ee0:	mov	r3, sp
   15ee4:	mov	lr, #32
   15ee8:	cmp	r1, #10
   15eec:	add	r4, r3, #16
   15ef0:	vst1.64	{d16-d17}, [r3], lr
   15ef4:	vst1.64	{d16-d17}, [r4]
   15ef8:	vst1.64	{d16-d17}, [r3]
   15efc:	beq	15f1c <__assert_fail@plt+0x4e94>
   15f00:	str	r1, [sp]
   15f04:	mov	r1, r2
   15f08:	mov	r3, sp
   15f0c:	mov	r2, ip
   15f10:	bl	15cac <__assert_fail@plt+0x4c24>
   15f14:	sub	sp, fp, #8
   15f18:	pop	{r4, sl, fp, pc}
   15f1c:	bl	1107c <abort@plt>
   15f20:	push	{fp, lr}
   15f24:	mov	fp, sp
   15f28:	sub	sp, sp, #48	; 0x30
   15f2c:	vmov.i32	q8, #0	; 0x00000000
   15f30:	mov	r3, sp
   15f34:	mov	ip, #32
   15f38:	cmp	r0, #10
   15f3c:	add	r2, r3, #16
   15f40:	vst1.64	{d16-d17}, [r3], ip
   15f44:	vst1.64	{d16-d17}, [r2]
   15f48:	vst1.64	{d16-d17}, [r3]
   15f4c:	beq	15f6c <__assert_fail@plt+0x4ee4>
   15f50:	str	r0, [sp]
   15f54:	mov	r3, sp
   15f58:	mov	r0, #0
   15f5c:	mvn	r2, #0
   15f60:	bl	15cac <__assert_fail@plt+0x4c24>
   15f64:	mov	sp, fp
   15f68:	pop	{fp, pc}
   15f6c:	bl	1107c <abort@plt>
   15f70:	push	{fp, lr}
   15f74:	mov	fp, sp
   15f78:	sub	sp, sp, #48	; 0x30
   15f7c:	vmov.i32	q8, #0	; 0x00000000
   15f80:	mov	r3, sp
   15f84:	mov	ip, #32
   15f88:	cmp	r0, #10
   15f8c:	add	lr, r3, #16
   15f90:	vst1.64	{d16-d17}, [r3], ip
   15f94:	vst1.64	{d16-d17}, [lr]
   15f98:	vst1.64	{d16-d17}, [r3]
   15f9c:	beq	15fb8 <__assert_fail@plt+0x4f30>
   15fa0:	str	r0, [sp]
   15fa4:	mov	r3, sp
   15fa8:	mov	r0, #0
   15fac:	bl	15cac <__assert_fail@plt+0x4c24>
   15fb0:	mov	sp, fp
   15fb4:	pop	{fp, pc}
   15fb8:	bl	1107c <abort@plt>
   15fbc:	push	{r4, sl, fp, lr}
   15fc0:	add	fp, sp, #8
   15fc4:	sub	sp, sp, #48	; 0x30
   15fc8:	mov	lr, r0
   15fcc:	movw	r0, #45432	; 0xb178
   15fd0:	mov	ip, r1
   15fd4:	mov	r1, #32
   15fd8:	mov	r4, #1
   15fdc:	movt	r0, #2
   15fe0:	add	r3, r0, #16
   15fe4:	vld1.64	{d16-d17}, [r0], r1
   15fe8:	vld1.64	{d20-d21}, [r0]
   15fec:	vld1.64	{d18-d19}, [r3]
   15ff0:	mov	r3, sp
   15ff4:	add	r0, r3, #32
   15ff8:	add	r1, r3, #16
   15ffc:	vst1.64	{d20-d21}, [r0]
   16000:	mov	r0, #28
   16004:	vst1.64	{d18-d19}, [r1]
   16008:	mov	r1, r3
   1600c:	and	r0, r0, r2, lsr #3
   16010:	and	r2, r2, #31
   16014:	vst1.64	{d16-d17}, [r1], r0
   16018:	ldr	r0, [r1, #8]
   1601c:	bic	r4, r4, r0, lsr r2
   16020:	eor	r0, r0, r4, lsl r2
   16024:	mov	r2, ip
   16028:	str	r0, [r1, #8]
   1602c:	mov	r0, #0
   16030:	mov	r1, lr
   16034:	bl	15cac <__assert_fail@plt+0x4c24>
   16038:	sub	sp, fp, #8
   1603c:	pop	{r4, sl, fp, pc}
   16040:	push	{fp, lr}
   16044:	mov	fp, sp
   16048:	sub	sp, sp, #48	; 0x30
   1604c:	mov	ip, r0
   16050:	movw	r0, #45432	; 0xb178
   16054:	mov	r2, #32
   16058:	movt	r0, #2
   1605c:	add	r3, r0, #16
   16060:	vld1.64	{d16-d17}, [r0], r2
   16064:	vld1.64	{d20-d21}, [r0]
   16068:	vld1.64	{d18-d19}, [r3]
   1606c:	mov	r3, sp
   16070:	add	r0, r3, #32
   16074:	add	r2, r3, #16
   16078:	vst1.64	{d20-d21}, [r0]
   1607c:	mov	r0, #28
   16080:	vst1.64	{d18-d19}, [r2]
   16084:	mov	r2, r3
   16088:	and	r0, r0, r1, lsr #3
   1608c:	and	r1, r1, #31
   16090:	vst1.64	{d16-d17}, [r2], r0
   16094:	mov	r0, #1
   16098:	ldr	lr, [r2, #8]
   1609c:	bic	r0, r0, lr, lsr r1
   160a0:	eor	r0, lr, r0, lsl r1
   160a4:	mov	r1, ip
   160a8:	str	r0, [r2, #8]
   160ac:	mov	r0, #0
   160b0:	mvn	r2, #0
   160b4:	bl	15cac <__assert_fail@plt+0x4c24>
   160b8:	mov	sp, fp
   160bc:	pop	{fp, pc}
   160c0:	push	{fp, lr}
   160c4:	mov	fp, sp
   160c8:	sub	sp, sp, #48	; 0x30
   160cc:	mov	r1, r0
   160d0:	movw	r0, #45432	; 0xb178
   160d4:	mov	r3, #32
   160d8:	movt	r0, #2
   160dc:	add	r2, r0, #16
   160e0:	vld1.64	{d16-d17}, [r0], r3
   160e4:	mov	r3, sp
   160e8:	vld1.64	{d18-d19}, [r2]
   160ec:	vld1.64	{d20-d21}, [r0]
   160f0:	add	r2, r3, #16
   160f4:	add	r0, r3, #32
   160f8:	vst1.64	{d18-d19}, [r2]
   160fc:	vst1.64	{d20-d21}, [r0]
   16100:	mov	r0, #12
   16104:	mov	r2, r3
   16108:	vst1.64	{d16-d17}, [r2], r0
   1610c:	ldr	r0, [r2]
   16110:	orr	r0, r0, #67108864	; 0x4000000
   16114:	str	r0, [r2]
   16118:	mov	r0, #0
   1611c:	mvn	r2, #0
   16120:	bl	15cac <__assert_fail@plt+0x4c24>
   16124:	mov	sp, fp
   16128:	pop	{fp, pc}
   1612c:	push	{fp, lr}
   16130:	mov	fp, sp
   16134:	sub	sp, sp, #48	; 0x30
   16138:	mov	ip, r1
   1613c:	mov	r1, r0
   16140:	movw	r0, #45432	; 0xb178
   16144:	mov	r2, #32
   16148:	movt	r0, #2
   1614c:	add	r3, r0, #16
   16150:	vld1.64	{d16-d17}, [r0], r2
   16154:	vld1.64	{d18-d19}, [r3]
   16158:	vld1.64	{d20-d21}, [r0]
   1615c:	mov	r3, sp
   16160:	add	r2, r3, #16
   16164:	add	r0, r3, #32
   16168:	vst1.64	{d18-d19}, [r2]
   1616c:	vst1.64	{d20-d21}, [r0]
   16170:	mov	r0, #12
   16174:	mov	r2, r3
   16178:	vst1.64	{d16-d17}, [r2], r0
   1617c:	ldr	r0, [r2]
   16180:	orr	r0, r0, #67108864	; 0x4000000
   16184:	str	r0, [r2]
   16188:	mov	r0, #0
   1618c:	mov	r2, ip
   16190:	bl	15cac <__assert_fail@plt+0x4c24>
   16194:	mov	sp, fp
   16198:	pop	{fp, pc}
   1619c:	push	{r4, sl, fp, lr}
   161a0:	add	fp, sp, #8
   161a4:	sub	sp, sp, #96	; 0x60
   161a8:	vmov.i32	q8, #0	; 0x00000000
   161ac:	mov	ip, r2
   161b0:	mov	r2, sp
   161b4:	mov	r4, #28
   161b8:	cmp	r1, #10
   161bc:	mov	r3, r2
   161c0:	add	lr, r2, #16
   161c4:	vst1.64	{d16-d17}, [r3], r4
   161c8:	vst1.64	{d16-d17}, [lr]
   161cc:	vst1.32	{d16-d17}, [r3]
   161d0:	beq	16220 <__assert_fail@plt+0x5198>
   161d4:	vld1.64	{d16-d17}, [r2], r4
   161d8:	vld1.64	{d18-d19}, [lr]
   161dc:	add	r3, sp, #48	; 0x30
   161e0:	vld1.32	{d20-d21}, [r2]
   161e4:	add	r2, r3, #20
   161e8:	add	r4, r3, #4
   161ec:	vst1.32	{d18-d19}, [r2]
   161f0:	add	r2, r3, #32
   161f4:	vst1.32	{d16-d17}, [r4]
   161f8:	vst1.32	{d20-d21}, [r2]
   161fc:	str	r1, [sp, #48]	; 0x30
   16200:	mvn	r2, #0
   16204:	ldr	r1, [sp, #60]	; 0x3c
   16208:	orr	r1, r1, #67108864	; 0x4000000
   1620c:	str	r1, [sp, #60]	; 0x3c
   16210:	mov	r1, ip
   16214:	bl	15cac <__assert_fail@plt+0x4c24>
   16218:	sub	sp, fp, #8
   1621c:	pop	{r4, sl, fp, pc}
   16220:	bl	1107c <abort@plt>
   16224:	push	{r4, r5, r6, sl, fp, lr}
   16228:	add	fp, sp, #16
   1622c:	sub	sp, sp, #48	; 0x30
   16230:	mov	ip, r3
   16234:	movw	r3, #45432	; 0xb178
   16238:	mov	r6, #32
   1623c:	cmp	r1, #0
   16240:	mov	r4, sp
   16244:	movt	r3, #2
   16248:	cmpne	r2, #0
   1624c:	add	r5, r4, #16
   16250:	add	lr, r3, #16
   16254:	vld1.64	{d16-d17}, [r3], r6
   16258:	vld1.64	{d18-d19}, [lr]
   1625c:	vld1.64	{d20-d21}, [r3]
   16260:	mov	r3, #10
   16264:	vst1.64	{d16-d17}, [r4], r6
   16268:	vst1.64	{d18-d19}, [r5]
   1626c:	vst1.64	{d20-d21}, [r4]
   16270:	str	r3, [sp]
   16274:	bne	1627c <__assert_fail@plt+0x51f4>
   16278:	bl	1107c <abort@plt>
   1627c:	str	r2, [sp, #44]	; 0x2c
   16280:	str	r1, [sp, #40]	; 0x28
   16284:	mov	r3, sp
   16288:	mov	r1, ip
   1628c:	mvn	r2, #0
   16290:	bl	15cac <__assert_fail@plt+0x4c24>
   16294:	sub	sp, fp, #16
   16298:	pop	{r4, r5, r6, sl, fp, pc}
   1629c:	push	{r4, r5, r6, sl, fp, lr}
   162a0:	add	fp, sp, #16
   162a4:	sub	sp, sp, #48	; 0x30
   162a8:	mov	lr, r3
   162ac:	movw	r3, #45432	; 0xb178
   162b0:	mov	r6, #32
   162b4:	cmp	r1, #0
   162b8:	mov	r4, sp
   162bc:	movt	r3, #2
   162c0:	cmpne	r2, #0
   162c4:	add	r5, r4, #16
   162c8:	add	ip, r3, #16
   162cc:	vld1.64	{d16-d17}, [r3], r6
   162d0:	vld1.64	{d18-d19}, [ip]
   162d4:	vld1.64	{d20-d21}, [r3]
   162d8:	mov	r3, #10
   162dc:	vst1.64	{d16-d17}, [r4], r6
   162e0:	vst1.64	{d18-d19}, [r5]
   162e4:	vst1.64	{d20-d21}, [r4]
   162e8:	str	r3, [sp]
   162ec:	bne	162f4 <__assert_fail@plt+0x526c>
   162f0:	bl	1107c <abort@plt>
   162f4:	ldr	ip, [fp, #8]
   162f8:	str	r2, [sp, #44]	; 0x2c
   162fc:	str	r1, [sp, #40]	; 0x28
   16300:	mov	r3, sp
   16304:	mov	r1, lr
   16308:	mov	r2, ip
   1630c:	bl	15cac <__assert_fail@plt+0x4c24>
   16310:	sub	sp, fp, #16
   16314:	pop	{r4, r5, r6, sl, fp, pc}
   16318:	push	{r4, sl, fp, lr}
   1631c:	add	fp, sp, #8
   16320:	sub	sp, sp, #48	; 0x30
   16324:	movw	r3, #45432	; 0xb178
   16328:	mov	lr, #32
   1632c:	mov	ip, r2
   16330:	cmp	r0, #0
   16334:	movt	r3, #2
   16338:	cmpne	r1, #0
   1633c:	add	r2, r3, #16
   16340:	vld1.64	{d16-d17}, [r3], lr
   16344:	vld1.64	{d20-d21}, [r3]
   16348:	vld1.64	{d18-d19}, [r2]
   1634c:	mov	r2, sp
   16350:	add	r4, r2, #16
   16354:	vst1.64	{d16-d17}, [r2], lr
   16358:	vst1.64	{d20-d21}, [r2]
   1635c:	mov	r2, #10
   16360:	vst1.64	{d18-d19}, [r4]
   16364:	str	r2, [sp]
   16368:	bne	16370 <__assert_fail@plt+0x52e8>
   1636c:	bl	1107c <abort@plt>
   16370:	str	r1, [sp, #44]	; 0x2c
   16374:	str	r0, [sp, #40]	; 0x28
   16378:	mov	r3, sp
   1637c:	mov	r0, #0
   16380:	mov	r1, ip
   16384:	mvn	r2, #0
   16388:	bl	15cac <__assert_fail@plt+0x4c24>
   1638c:	sub	sp, fp, #8
   16390:	pop	{r4, sl, fp, pc}
   16394:	push	{r4, r5, fp, lr}
   16398:	add	fp, sp, #8
   1639c:	sub	sp, sp, #48	; 0x30
   163a0:	mov	ip, r3
   163a4:	movw	r3, #45432	; 0xb178
   163a8:	mov	r4, #32
   163ac:	mov	lr, r2
   163b0:	cmp	r0, #0
   163b4:	movt	r3, #2
   163b8:	cmpne	r1, #0
   163bc:	add	r2, r3, #16
   163c0:	vld1.64	{d16-d17}, [r3], r4
   163c4:	vld1.64	{d20-d21}, [r3]
   163c8:	vld1.64	{d18-d19}, [r2]
   163cc:	mov	r2, sp
   163d0:	add	r5, r2, #16
   163d4:	vst1.64	{d16-d17}, [r2], r4
   163d8:	vst1.64	{d20-d21}, [r2]
   163dc:	mov	r2, #10
   163e0:	vst1.64	{d18-d19}, [r5]
   163e4:	str	r2, [sp]
   163e8:	bne	163f0 <__assert_fail@plt+0x5368>
   163ec:	bl	1107c <abort@plt>
   163f0:	str	r1, [sp, #44]	; 0x2c
   163f4:	str	r0, [sp, #40]	; 0x28
   163f8:	mov	r3, sp
   163fc:	mov	r0, #0
   16400:	mov	r1, lr
   16404:	mov	r2, ip
   16408:	bl	15cac <__assert_fail@plt+0x4c24>
   1640c:	sub	sp, fp, #8
   16410:	pop	{r4, r5, fp, pc}
   16414:	movw	r3, #45296	; 0xb0f0
   16418:	movt	r3, #2
   1641c:	b	15cac <__assert_fail@plt+0x4c24>
   16420:	movw	r3, #45296	; 0xb0f0
   16424:	mov	r2, r1
   16428:	mov	r1, r0
   1642c:	mov	r0, #0
   16430:	movt	r3, #2
   16434:	b	15cac <__assert_fail@plt+0x4c24>
   16438:	movw	r3, #45296	; 0xb0f0
   1643c:	mvn	r2, #0
   16440:	movt	r3, #2
   16444:	b	15cac <__assert_fail@plt+0x4c24>
   16448:	movw	r3, #45296	; 0xb0f0
   1644c:	mov	r1, r0
   16450:	mov	r0, #0
   16454:	mvn	r2, #0
   16458:	movt	r3, #2
   1645c:	b	15cac <__assert_fail@plt+0x4c24>
   16460:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16464:	add	fp, sp, #24
   16468:	sub	sp, sp, #32
   1646c:	ldr	r6, [fp, #12]
   16470:	ldr	r7, [fp, #8]
   16474:	mov	r4, r2
   16478:	mov	r8, r0
   1647c:	cmp	r1, #0
   16480:	beq	164a8 <__assert_fail@plt+0x5420>
   16484:	movw	r2, #40812	; 0x9f6c
   16488:	mov	r5, r1
   1648c:	str	r3, [sp, #4]
   16490:	str	r4, [sp]
   16494:	mov	r0, r8
   16498:	mov	r1, #1
   1649c:	movt	r2, #1
   164a0:	mov	r3, r5
   164a4:	b	164c0 <__assert_fail@plt+0x5438>
   164a8:	movw	r2, #40824	; 0x9f78
   164ac:	str	r3, [sp]
   164b0:	mov	r0, r8
   164b4:	mov	r1, #1
   164b8:	mov	r3, r4
   164bc:	movt	r2, #1
   164c0:	bl	10fe0 <__fprintf_chk@plt>
   164c4:	movw	r1, #40831	; 0x9f7f
   164c8:	mov	r0, #0
   164cc:	mov	r2, #5
   164d0:	movt	r1, #1
   164d4:	bl	10eb4 <dcgettext@plt>
   164d8:	movw	r2, #41549	; 0xa24d
   164dc:	mov	r3, r0
   164e0:	movw	r0, #2022	; 0x7e6
   164e4:	mov	r1, #1
   164e8:	movt	r2, #1
   164ec:	str	r0, [sp]
   164f0:	mov	r0, r8
   164f4:	bl	10fe0 <__fprintf_chk@plt>
   164f8:	movw	r4, #38862	; 0x97ce
   164fc:	mov	r1, r8
   16500:	movt	r4, #1
   16504:	mov	r0, r4
   16508:	bl	10e30 <fputs_unlocked@plt>
   1650c:	movw	r1, #40835	; 0x9f83
   16510:	mov	r0, #0
   16514:	mov	r2, #5
   16518:	movt	r1, #1
   1651c:	bl	10eb4 <dcgettext@plt>
   16520:	movw	r3, #41006	; 0xa02e
   16524:	mov	r2, r0
   16528:	mov	r0, r8
   1652c:	mov	r1, #1
   16530:	movt	r3, #1
   16534:	bl	10fe0 <__fprintf_chk@plt>
   16538:	mov	r0, r4
   1653c:	mov	r1, r8
   16540:	bl	10e30 <fputs_unlocked@plt>
   16544:	cmp	r6, #9
   16548:	bhi	16584 <__assert_fail@plt+0x54fc>
   1654c:	add	r0, pc, #0
   16550:	ldr	pc, [r0, r6, lsl #2]
   16554:	andeq	r6, r1, ip, ror r5
   16558:	muleq	r1, r0, r5
   1655c:	andeq	r6, r1, r0, asr #11
   16560:	andeq	r6, r1, r8, ror #11
   16564:	andeq	r6, r1, r0, lsl r6
   16568:	andeq	r6, r1, r8, lsr r6
   1656c:	andeq	r6, r1, r0, ror #12
   16570:	muleq	r1, r8, r6
   16574:	andeq	r6, r1, r0, asr #14
   16578:	andeq	r6, r1, r8, ror #13
   1657c:	sub	sp, fp, #24
   16580:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16584:	movw	r1, #41359	; 0xa18f
   16588:	movt	r1, #1
   1658c:	b	166f0 <__assert_fail@plt+0x5668>
   16590:	movw	r1, #41040	; 0xa050
   16594:	mov	r0, #0
   16598:	mov	r2, #5
   1659c:	movt	r1, #1
   165a0:	bl	10eb4 <dcgettext@plt>
   165a4:	ldr	r3, [r7]
   165a8:	mov	r2, r0
   165ac:	mov	r0, r8
   165b0:	mov	r1, #1
   165b4:	sub	sp, fp, #24
   165b8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   165bc:	b	10fe0 <__fprintf_chk@plt>
   165c0:	movw	r1, #41056	; 0xa060
   165c4:	mov	r0, #0
   165c8:	mov	r2, #5
   165cc:	movt	r1, #1
   165d0:	bl	10eb4 <dcgettext@plt>
   165d4:	mov	r2, r0
   165d8:	ldr	r3, [r7]
   165dc:	ldr	r0, [r7, #4]
   165e0:	str	r0, [sp]
   165e4:	b	166d4 <__assert_fail@plt+0x564c>
   165e8:	movw	r1, #41079	; 0xa077
   165ec:	mov	r0, #0
   165f0:	mov	r2, #5
   165f4:	movt	r1, #1
   165f8:	bl	10eb4 <dcgettext@plt>
   165fc:	mov	r2, r0
   16600:	ldr	r3, [r7]
   16604:	ldmib	r7, {r0, r1}
   16608:	stm	sp, {r0, r1}
   1660c:	b	166d4 <__assert_fail@plt+0x564c>
   16610:	movw	r1, #41107	; 0xa093
   16614:	mov	r0, #0
   16618:	mov	r2, #5
   1661c:	movt	r1, #1
   16620:	bl	10eb4 <dcgettext@plt>
   16624:	ldr	r3, [r7]
   16628:	mov	r2, r0
   1662c:	ldmib	r7, {r0, r1, r7}
   16630:	stm	sp, {r0, r1, r7}
   16634:	b	166d4 <__assert_fail@plt+0x564c>
   16638:	movw	r1, #41139	; 0xa0b3
   1663c:	mov	r0, #0
   16640:	mov	r2, #5
   16644:	movt	r1, #1
   16648:	bl	10eb4 <dcgettext@plt>
   1664c:	ldr	r3, [r7]
   16650:	mov	r2, r0
   16654:	ldmib	r7, {r0, r1, r6, r7}
   16658:	stm	sp, {r0, r1, r6, r7}
   1665c:	b	166d4 <__assert_fail@plt+0x564c>
   16660:	movw	r1, #41175	; 0xa0d7
   16664:	mov	r0, #0
   16668:	mov	r2, #5
   1666c:	movt	r1, #1
   16670:	bl	10eb4 <dcgettext@plt>
   16674:	mov	r2, r0
   16678:	ldr	r3, [r7]
   1667c:	ldmib	r7, {r0, r1, r6}
   16680:	ldr	r5, [r7, #16]
   16684:	ldr	r7, [r7, #20]
   16688:	stm	sp, {r0, r1, r6}
   1668c:	str	r5, [sp, #12]
   16690:	str	r7, [sp, #16]
   16694:	b	166d4 <__assert_fail@plt+0x564c>
   16698:	movw	r1, #41215	; 0xa0ff
   1669c:	mov	r0, #0
   166a0:	mov	r2, #5
   166a4:	movt	r1, #1
   166a8:	bl	10eb4 <dcgettext@plt>
   166ac:	mov	r2, r0
   166b0:	ldr	r3, [r7]
   166b4:	ldmib	r7, {r0, r1, r6}
   166b8:	ldr	r5, [r7, #16]
   166bc:	ldr	r4, [r7, #20]
   166c0:	ldr	r7, [r7, #24]
   166c4:	stm	sp, {r0, r1, r6}
   166c8:	str	r5, [sp, #12]
   166cc:	str	r4, [sp, #16]
   166d0:	str	r7, [sp, #20]
   166d4:	mov	r0, r8
   166d8:	mov	r1, #1
   166dc:	bl	10fe0 <__fprintf_chk@plt>
   166e0:	sub	sp, fp, #24
   166e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   166e8:	movw	r1, #41307	; 0xa15b
   166ec:	movt	r1, #1
   166f0:	mov	r0, #0
   166f4:	mov	r2, #5
   166f8:	bl	10eb4 <dcgettext@plt>
   166fc:	mov	ip, r0
   16700:	ldr	r3, [r7]
   16704:	ldr	r0, [r7, #4]
   16708:	ldr	r1, [r7, #8]
   1670c:	ldr	r6, [r7, #12]
   16710:	ldr	r5, [r7, #16]
   16714:	ldr	r4, [r7, #20]
   16718:	ldr	r2, [r7, #24]
   1671c:	ldr	lr, [r7, #28]
   16720:	ldr	r7, [r7, #32]
   16724:	stm	sp, {r0, r1, r6}
   16728:	str	r5, [sp, #12]
   1672c:	str	r4, [sp, #16]
   16730:	str	r2, [sp, #20]
   16734:	str	lr, [sp, #24]
   16738:	str	r7, [sp, #28]
   1673c:	b	16784 <__assert_fail@plt+0x56fc>
   16740:	movw	r1, #41259	; 0xa12b
   16744:	mov	r0, #0
   16748:	mov	r2, #5
   1674c:	movt	r1, #1
   16750:	bl	10eb4 <dcgettext@plt>
   16754:	mov	ip, r0
   16758:	ldr	r3, [r7]
   1675c:	ldmib	r7, {r0, r1, r6}
   16760:	ldr	r5, [r7, #16]
   16764:	ldr	r4, [r7, #20]
   16768:	ldr	r2, [r7, #24]
   1676c:	ldr	r7, [r7, #28]
   16770:	stm	sp, {r0, r1, r6}
   16774:	str	r5, [sp, #12]
   16778:	str	r4, [sp, #16]
   1677c:	str	r2, [sp, #20]
   16780:	str	r7, [sp, #24]
   16784:	mov	r0, r8
   16788:	mov	r1, #1
   1678c:	mov	r2, ip
   16790:	bl	10fe0 <__fprintf_chk@plt>
   16794:	sub	sp, fp, #24
   16798:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1679c:	push	{r4, sl, fp, lr}
   167a0:	add	fp, sp, #8
   167a4:	sub	sp, sp, #8
   167a8:	ldr	ip, [fp, #8]
   167ac:	mov	lr, #0
   167b0:	ldr	r4, [ip, lr, lsl #2]
   167b4:	add	lr, lr, #1
   167b8:	cmp	r4, #0
   167bc:	bne	167b0 <__assert_fail@plt+0x5728>
   167c0:	sub	r4, lr, #1
   167c4:	str	ip, [sp]
   167c8:	str	r4, [sp, #4]
   167cc:	bl	16460 <__assert_fail@plt+0x53d8>
   167d0:	sub	sp, fp, #8
   167d4:	pop	{r4, sl, fp, pc}
   167d8:	push	{fp, lr}
   167dc:	mov	fp, sp
   167e0:	sub	sp, sp, #48	; 0x30
   167e4:	ldr	ip, [fp, #8]
   167e8:	ldr	lr, [ip]
   167ec:	cmp	lr, #0
   167f0:	str	lr, [sp, #8]
   167f4:	beq	16890 <__assert_fail@plt+0x5808>
   167f8:	ldr	lr, [ip, #4]
   167fc:	cmp	lr, #0
   16800:	str	lr, [sp, #12]
   16804:	beq	16898 <__assert_fail@plt+0x5810>
   16808:	ldr	lr, [ip, #8]
   1680c:	cmp	lr, #0
   16810:	str	lr, [sp, #16]
   16814:	beq	168a0 <__assert_fail@plt+0x5818>
   16818:	ldr	lr, [ip, #12]
   1681c:	cmp	lr, #0
   16820:	str	lr, [sp, #20]
   16824:	beq	168a8 <__assert_fail@plt+0x5820>
   16828:	ldr	lr, [ip, #16]
   1682c:	cmp	lr, #0
   16830:	str	lr, [sp, #24]
   16834:	beq	168b0 <__assert_fail@plt+0x5828>
   16838:	ldr	lr, [ip, #20]
   1683c:	cmp	lr, #0
   16840:	str	lr, [sp, #28]
   16844:	beq	168b8 <__assert_fail@plt+0x5830>
   16848:	ldr	lr, [ip, #24]
   1684c:	cmp	lr, #0
   16850:	str	lr, [sp, #32]
   16854:	beq	168c0 <__assert_fail@plt+0x5838>
   16858:	ldr	lr, [ip, #28]
   1685c:	cmp	lr, #0
   16860:	str	lr, [sp, #36]	; 0x24
   16864:	beq	168c8 <__assert_fail@plt+0x5840>
   16868:	ldr	lr, [ip, #32]
   1686c:	cmp	lr, #0
   16870:	str	lr, [sp, #40]	; 0x28
   16874:	beq	168d0 <__assert_fail@plt+0x5848>
   16878:	ldr	lr, [ip, #36]	; 0x24
   1687c:	mov	ip, #10
   16880:	cmp	lr, #0
   16884:	str	lr, [sp, #44]	; 0x2c
   16888:	movweq	ip, #9
   1688c:	b	168d4 <__assert_fail@plt+0x584c>
   16890:	mov	ip, #0
   16894:	b	168d4 <__assert_fail@plt+0x584c>
   16898:	mov	ip, #1
   1689c:	b	168d4 <__assert_fail@plt+0x584c>
   168a0:	mov	ip, #2
   168a4:	b	168d4 <__assert_fail@plt+0x584c>
   168a8:	mov	ip, #3
   168ac:	b	168d4 <__assert_fail@plt+0x584c>
   168b0:	mov	ip, #4
   168b4:	b	168d4 <__assert_fail@plt+0x584c>
   168b8:	mov	ip, #5
   168bc:	b	168d4 <__assert_fail@plt+0x584c>
   168c0:	mov	ip, #6
   168c4:	b	168d4 <__assert_fail@plt+0x584c>
   168c8:	mov	ip, #7
   168cc:	b	168d4 <__assert_fail@plt+0x584c>
   168d0:	mov	ip, #8
   168d4:	add	lr, sp, #8
   168d8:	str	ip, [sp, #4]
   168dc:	str	lr, [sp]
   168e0:	bl	16460 <__assert_fail@plt+0x53d8>
   168e4:	mov	sp, fp
   168e8:	pop	{fp, pc}
   168ec:	push	{fp, lr}
   168f0:	mov	fp, sp
   168f4:	sub	sp, sp, #56	; 0x38
   168f8:	add	ip, fp, #8
   168fc:	str	ip, [sp, #12]
   16900:	ldr	lr, [fp, #8]
   16904:	cmp	lr, #0
   16908:	str	lr, [sp, #16]
   1690c:	beq	169a8 <__assert_fail@plt+0x5920>
   16910:	ldr	lr, [ip, #4]
   16914:	cmp	lr, #0
   16918:	str	lr, [sp, #20]
   1691c:	beq	169b0 <__assert_fail@plt+0x5928>
   16920:	ldr	lr, [ip, #8]
   16924:	cmp	lr, #0
   16928:	str	lr, [sp, #24]
   1692c:	beq	169b8 <__assert_fail@plt+0x5930>
   16930:	ldr	lr, [ip, #12]
   16934:	cmp	lr, #0
   16938:	str	lr, [sp, #28]
   1693c:	beq	169c0 <__assert_fail@plt+0x5938>
   16940:	ldr	lr, [ip, #16]
   16944:	cmp	lr, #0
   16948:	str	lr, [sp, #32]
   1694c:	beq	169c8 <__assert_fail@plt+0x5940>
   16950:	ldr	lr, [ip, #20]
   16954:	cmp	lr, #0
   16958:	str	lr, [sp, #36]	; 0x24
   1695c:	beq	169d0 <__assert_fail@plt+0x5948>
   16960:	ldr	lr, [ip, #24]
   16964:	cmp	lr, #0
   16968:	str	lr, [sp, #40]	; 0x28
   1696c:	beq	169d8 <__assert_fail@plt+0x5950>
   16970:	ldr	lr, [ip, #28]
   16974:	cmp	lr, #0
   16978:	str	lr, [sp, #44]	; 0x2c
   1697c:	beq	169e0 <__assert_fail@plt+0x5958>
   16980:	ldr	lr, [ip, #32]
   16984:	cmp	lr, #0
   16988:	str	lr, [sp, #48]	; 0x30
   1698c:	beq	169e8 <__assert_fail@plt+0x5960>
   16990:	ldr	lr, [ip, #36]	; 0x24
   16994:	mov	ip, #10
   16998:	cmp	lr, #0
   1699c:	str	lr, [sp, #52]	; 0x34
   169a0:	movweq	ip, #9
   169a4:	b	169ec <__assert_fail@plt+0x5964>
   169a8:	mov	ip, #0
   169ac:	b	169ec <__assert_fail@plt+0x5964>
   169b0:	mov	ip, #1
   169b4:	b	169ec <__assert_fail@plt+0x5964>
   169b8:	mov	ip, #2
   169bc:	b	169ec <__assert_fail@plt+0x5964>
   169c0:	mov	ip, #3
   169c4:	b	169ec <__assert_fail@plt+0x5964>
   169c8:	mov	ip, #4
   169cc:	b	169ec <__assert_fail@plt+0x5964>
   169d0:	mov	ip, #5
   169d4:	b	169ec <__assert_fail@plt+0x5964>
   169d8:	mov	ip, #6
   169dc:	b	169ec <__assert_fail@plt+0x5964>
   169e0:	mov	ip, #7
   169e4:	b	169ec <__assert_fail@plt+0x5964>
   169e8:	mov	ip, #8
   169ec:	add	lr, sp, #16
   169f0:	str	ip, [sp, #4]
   169f4:	str	lr, [sp]
   169f8:	bl	16460 <__assert_fail@plt+0x53d8>
   169fc:	mov	sp, fp
   16a00:	pop	{fp, pc}
   16a04:	push	{fp, lr}
   16a08:	mov	fp, sp
   16a0c:	movw	r0, #45388	; 0xb14c
   16a10:	movt	r0, #2
   16a14:	ldr	r1, [r0]
   16a18:	movw	r0, #38862	; 0x97ce
   16a1c:	movt	r0, #1
   16a20:	bl	10e30 <fputs_unlocked@plt>
   16a24:	movw	r1, #41419	; 0xa1cb
   16a28:	mov	r0, #0
   16a2c:	mov	r2, #5
   16a30:	movt	r1, #1
   16a34:	bl	10eb4 <dcgettext@plt>
   16a38:	movw	r2, #41439	; 0xa1df
   16a3c:	mov	r1, r0
   16a40:	mov	r0, #1
   16a44:	movt	r2, #1
   16a48:	bl	10fc8 <__printf_chk@plt>
   16a4c:	movw	r1, #41461	; 0xa1f5
   16a50:	mov	r0, #0
   16a54:	mov	r2, #5
   16a58:	movt	r1, #1
   16a5c:	bl	10eb4 <dcgettext@plt>
   16a60:	movw	r2, #38337	; 0x95c1
   16a64:	movw	r3, #38671	; 0x970f
   16a68:	mov	r1, r0
   16a6c:	mov	r0, #1
   16a70:	movt	r2, #1
   16a74:	movt	r3, #1
   16a78:	bl	10fc8 <__printf_chk@plt>
   16a7c:	movw	r1, #41481	; 0xa209
   16a80:	mov	r0, #0
   16a84:	mov	r2, #5
   16a88:	movt	r1, #1
   16a8c:	bl	10eb4 <dcgettext@plt>
   16a90:	movw	r2, #41520	; 0xa230
   16a94:	mov	r1, r0
   16a98:	mov	r0, #1
   16a9c:	movt	r2, #1
   16aa0:	pop	{fp, lr}
   16aa4:	b	10fc8 <__printf_chk@plt>
   16aa8:	push	{r4, r5, r6, sl, fp, lr}
   16aac:	add	fp, sp, #16
   16ab0:	mov	r4, r2
   16ab4:	mov	r5, r1
   16ab8:	mov	r6, r0
   16abc:	bl	18bf8 <__assert_fail@plt+0x7b70>
   16ac0:	cmp	r0, #0
   16ac4:	popne	{r4, r5, r6, sl, fp, pc}
   16ac8:	cmp	r6, #0
   16acc:	beq	16ae0 <__assert_fail@plt+0x5a58>
   16ad0:	cmp	r5, #0
   16ad4:	cmpne	r4, #0
   16ad8:	bne	16ae0 <__assert_fail@plt+0x5a58>
   16adc:	pop	{r4, r5, r6, sl, fp, pc}
   16ae0:	bl	1705c <__assert_fail@plt+0x5fd4>
   16ae4:	push	{r4, r5, r6, sl, fp, lr}
   16ae8:	add	fp, sp, #16
   16aec:	mov	r4, r2
   16af0:	mov	r5, r1
   16af4:	mov	r6, r0
   16af8:	bl	18bf8 <__assert_fail@plt+0x7b70>
   16afc:	cmp	r0, #0
   16b00:	popne	{r4, r5, r6, sl, fp, pc}
   16b04:	cmp	r6, #0
   16b08:	beq	16b1c <__assert_fail@plt+0x5a94>
   16b0c:	cmp	r5, #0
   16b10:	cmpne	r4, #0
   16b14:	bne	16b1c <__assert_fail@plt+0x5a94>
   16b18:	pop	{r4, r5, r6, sl, fp, pc}
   16b1c:	bl	1705c <__assert_fail@plt+0x5fd4>
   16b20:	push	{fp, lr}
   16b24:	mov	fp, sp
   16b28:	bl	18a54 <__assert_fail@plt+0x79cc>
   16b2c:	cmp	r0, #0
   16b30:	popne	{fp, pc}
   16b34:	bl	1705c <__assert_fail@plt+0x5fd4>
   16b38:	push	{fp, lr}
   16b3c:	mov	fp, sp
   16b40:	bl	18a54 <__assert_fail@plt+0x79cc>
   16b44:	cmp	r0, #0
   16b48:	popne	{fp, pc}
   16b4c:	bl	1705c <__assert_fail@plt+0x5fd4>
   16b50:	push	{fp, lr}
   16b54:	mov	fp, sp
   16b58:	bl	18a54 <__assert_fail@plt+0x79cc>
   16b5c:	cmp	r0, #0
   16b60:	popne	{fp, pc}
   16b64:	bl	1705c <__assert_fail@plt+0x5fd4>
   16b68:	push	{r4, r5, fp, lr}
   16b6c:	add	fp, sp, #8
   16b70:	mov	r4, r1
   16b74:	mov	r5, r0
   16b78:	bl	18a84 <__assert_fail@plt+0x79fc>
   16b7c:	cmp	r0, #0
   16b80:	popne	{r4, r5, fp, pc}
   16b84:	cmp	r5, #0
   16b88:	beq	16b98 <__assert_fail@plt+0x5b10>
   16b8c:	cmp	r4, #0
   16b90:	bne	16b98 <__assert_fail@plt+0x5b10>
   16b94:	pop	{r4, r5, fp, pc}
   16b98:	bl	1705c <__assert_fail@plt+0x5fd4>
   16b9c:	push	{fp, lr}
   16ba0:	mov	fp, sp
   16ba4:	cmp	r1, #0
   16ba8:	orreq	r1, r1, #1
   16bac:	bl	18a84 <__assert_fail@plt+0x79fc>
   16bb0:	cmp	r0, #0
   16bb4:	popne	{fp, pc}
   16bb8:	bl	1705c <__assert_fail@plt+0x5fd4>
   16bbc:	push	{fp, lr}
   16bc0:	mov	fp, sp
   16bc4:	clz	r3, r2
   16bc8:	lsr	ip, r3, #5
   16bcc:	clz	r3, r1
   16bd0:	lsr	r3, r3, #5
   16bd4:	orrs	r3, r3, ip
   16bd8:	movwne	r1, #1
   16bdc:	movwne	r2, #1
   16be0:	bl	18bf8 <__assert_fail@plt+0x7b70>
   16be4:	cmp	r0, #0
   16be8:	popne	{fp, pc}
   16bec:	bl	1705c <__assert_fail@plt+0x5fd4>
   16bf0:	push	{fp, lr}
   16bf4:	mov	fp, sp
   16bf8:	mov	r2, r1
   16bfc:	mov	r1, r0
   16c00:	mov	r0, #0
   16c04:	bl	18bf8 <__assert_fail@plt+0x7b70>
   16c08:	cmp	r0, #0
   16c0c:	popne	{fp, pc}
   16c10:	bl	1705c <__assert_fail@plt+0x5fd4>
   16c14:	push	{fp, lr}
   16c18:	mov	fp, sp
   16c1c:	mov	r2, r1
   16c20:	mov	r1, r0
   16c24:	clz	r0, r2
   16c28:	clz	r3, r1
   16c2c:	lsr	r0, r0, #5
   16c30:	lsr	r3, r3, #5
   16c34:	orrs	r0, r3, r0
   16c38:	mov	r0, #0
   16c3c:	movwne	r1, #1
   16c40:	movwne	r2, #1
   16c44:	bl	18bf8 <__assert_fail@plt+0x7b70>
   16c48:	cmp	r0, #0
   16c4c:	popne	{fp, pc}
   16c50:	bl	1705c <__assert_fail@plt+0x5fd4>
   16c54:	push	{r4, r5, r6, sl, fp, lr}
   16c58:	add	fp, sp, #16
   16c5c:	ldr	r5, [r1]
   16c60:	mov	r4, r1
   16c64:	mov	r6, r0
   16c68:	cmp	r0, #0
   16c6c:	beq	16c84 <__assert_fail@plt+0x5bfc>
   16c70:	mov	r0, #1
   16c74:	add	r0, r0, r5, lsr #1
   16c78:	adds	r5, r5, r0
   16c7c:	bcc	16c8c <__assert_fail@plt+0x5c04>
   16c80:	b	16cc8 <__assert_fail@plt+0x5c40>
   16c84:	cmp	r5, #0
   16c88:	movweq	r5, #64	; 0x40
   16c8c:	mov	r0, r6
   16c90:	mov	r1, r5
   16c94:	mov	r2, #1
   16c98:	bl	18bf8 <__assert_fail@plt+0x7b70>
   16c9c:	cmp	r5, #0
   16ca0:	mov	r1, r5
   16ca4:	movwne	r1, #1
   16ca8:	cmp	r0, #0
   16cac:	bne	16cc0 <__assert_fail@plt+0x5c38>
   16cb0:	clz	r2, r6
   16cb4:	lsr	r2, r2, #5
   16cb8:	orrs	r1, r2, r1
   16cbc:	bne	16cc8 <__assert_fail@plt+0x5c40>
   16cc0:	str	r5, [r4]
   16cc4:	pop	{r4, r5, r6, sl, fp, pc}
   16cc8:	bl	1705c <__assert_fail@plt+0x5fd4>
   16ccc:	push	{r4, r5, r6, r7, fp, lr}
   16cd0:	add	fp, sp, #16
   16cd4:	ldr	r5, [r1]
   16cd8:	mov	r6, r2
   16cdc:	mov	r4, r1
   16ce0:	mov	r7, r0
   16ce4:	cmp	r0, #0
   16ce8:	beq	16d00 <__assert_fail@plt+0x5c78>
   16cec:	mov	r0, #1
   16cf0:	add	r0, r0, r5, lsr #1
   16cf4:	adds	r5, r5, r0
   16cf8:	bcc	16d18 <__assert_fail@plt+0x5c90>
   16cfc:	b	16d4c <__assert_fail@plt+0x5cc4>
   16d00:	cmp	r5, #0
   16d04:	bne	16d18 <__assert_fail@plt+0x5c90>
   16d08:	mov	r0, #64	; 0x40
   16d0c:	cmp	r6, #64	; 0x40
   16d10:	udiv	r5, r0, r6
   16d14:	addhi	r5, r5, #1
   16d18:	mov	r0, r7
   16d1c:	mov	r1, r5
   16d20:	mov	r2, r6
   16d24:	bl	18bf8 <__assert_fail@plt+0x7b70>
   16d28:	cmp	r0, #0
   16d2c:	bne	16d44 <__assert_fail@plt+0x5cbc>
   16d30:	cmp	r7, #0
   16d34:	beq	16d4c <__assert_fail@plt+0x5cc4>
   16d38:	cmp	r6, #0
   16d3c:	cmpne	r5, #0
   16d40:	bne	16d4c <__assert_fail@plt+0x5cc4>
   16d44:	str	r5, [r4]
   16d48:	pop	{r4, r5, r6, r7, fp, pc}
   16d4c:	bl	1705c <__assert_fail@plt+0x5fd4>
   16d50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16d54:	add	fp, sp, #24
   16d58:	mov	r8, r1
   16d5c:	ldr	r1, [r1]
   16d60:	mov	r5, r0
   16d64:	add	r0, r1, r1, asr #1
   16d68:	cmp	r0, r1
   16d6c:	mvnvs	r0, #-2147483648	; 0x80000000
   16d70:	cmp	r0, r3
   16d74:	mov	r7, r0
   16d78:	movgt	r7, r3
   16d7c:	cmn	r3, #1
   16d80:	movle	r7, r0
   16d84:	ldr	r0, [fp, #8]
   16d88:	cmn	r0, #1
   16d8c:	ble	16db4 <__assert_fail@plt+0x5d2c>
   16d90:	cmp	r0, #0
   16d94:	beq	16e08 <__assert_fail@plt+0x5d80>
   16d98:	cmn	r7, #1
   16d9c:	ble	16ddc <__assert_fail@plt+0x5d54>
   16da0:	mvn	r4, #-2147483648	; 0x80000000
   16da4:	udiv	r6, r4, r0
   16da8:	cmp	r6, r7
   16dac:	bge	16e08 <__assert_fail@plt+0x5d80>
   16db0:	b	16e18 <__assert_fail@plt+0x5d90>
   16db4:	cmn	r7, #1
   16db8:	ble	16df8 <__assert_fail@plt+0x5d70>
   16dbc:	cmn	r0, #1
   16dc0:	beq	16e08 <__assert_fail@plt+0x5d80>
   16dc4:	mov	r6, #-2147483648	; 0x80000000
   16dc8:	mvn	r4, #-2147483648	; 0x80000000
   16dcc:	sdiv	r6, r6, r0
   16dd0:	cmp	r6, r7
   16dd4:	bge	16e08 <__assert_fail@plt+0x5d80>
   16dd8:	b	16e18 <__assert_fail@plt+0x5d90>
   16ddc:	beq	16e08 <__assert_fail@plt+0x5d80>
   16de0:	mov	r6, #-2147483648	; 0x80000000
   16de4:	mvn	r4, #-2147483648	; 0x80000000
   16de8:	sdiv	r6, r6, r7
   16dec:	cmp	r6, r0
   16df0:	bge	16e08 <__assert_fail@plt+0x5d80>
   16df4:	b	16e18 <__assert_fail@plt+0x5d90>
   16df8:	mvn	r4, #-2147483648	; 0x80000000
   16dfc:	sdiv	r6, r4, r0
   16e00:	cmp	r7, r6
   16e04:	blt	16e18 <__assert_fail@plt+0x5d90>
   16e08:	mul	r6, r7, r0
   16e0c:	mov	r4, #64	; 0x40
   16e10:	cmp	r6, #63	; 0x3f
   16e14:	bgt	16e20 <__assert_fail@plt+0x5d98>
   16e18:	sdiv	r7, r4, r0
   16e1c:	mul	r6, r7, r0
   16e20:	cmp	r5, #0
   16e24:	moveq	r4, #0
   16e28:	streq	r4, [r8]
   16e2c:	sub	r4, r7, r1
   16e30:	cmp	r4, r2
   16e34:	bge	16ee0 <__assert_fail@plt+0x5e58>
   16e38:	add	r7, r1, r2
   16e3c:	mov	r6, #0
   16e40:	mov	r2, #0
   16e44:	cmp	r7, r3
   16e48:	movwgt	r6, #1
   16e4c:	cmn	r3, #1
   16e50:	movwgt	r2, #1
   16e54:	cmp	r7, r1
   16e58:	bvs	16f14 <__assert_fail@plt+0x5e8c>
   16e5c:	ands	r1, r2, r6
   16e60:	bne	16f14 <__assert_fail@plt+0x5e8c>
   16e64:	cmn	r0, #1
   16e68:	ble	16e90 <__assert_fail@plt+0x5e08>
   16e6c:	cmp	r0, #0
   16e70:	beq	16edc <__assert_fail@plt+0x5e54>
   16e74:	cmn	r7, #1
   16e78:	ble	16eb4 <__assert_fail@plt+0x5e2c>
   16e7c:	mvn	r1, #-2147483648	; 0x80000000
   16e80:	udiv	r1, r1, r0
   16e84:	cmp	r1, r7
   16e88:	bge	16edc <__assert_fail@plt+0x5e54>
   16e8c:	b	16f14 <__assert_fail@plt+0x5e8c>
   16e90:	cmn	r7, #1
   16e94:	ble	16ecc <__assert_fail@plt+0x5e44>
   16e98:	cmn	r0, #1
   16e9c:	beq	16edc <__assert_fail@plt+0x5e54>
   16ea0:	mov	r1, #-2147483648	; 0x80000000
   16ea4:	sdiv	r1, r1, r0
   16ea8:	cmp	r1, r7
   16eac:	bge	16edc <__assert_fail@plt+0x5e54>
   16eb0:	b	16f14 <__assert_fail@plt+0x5e8c>
   16eb4:	beq	16edc <__assert_fail@plt+0x5e54>
   16eb8:	mov	r1, #-2147483648	; 0x80000000
   16ebc:	sdiv	r1, r1, r7
   16ec0:	cmp	r1, r0
   16ec4:	bge	16edc <__assert_fail@plt+0x5e54>
   16ec8:	b	16f14 <__assert_fail@plt+0x5e8c>
   16ecc:	mvn	r1, #-2147483648	; 0x80000000
   16ed0:	sdiv	r1, r1, r0
   16ed4:	cmp	r7, r1
   16ed8:	blt	16f14 <__assert_fail@plt+0x5e8c>
   16edc:	mul	r6, r7, r0
   16ee0:	mov	r0, r5
   16ee4:	mov	r1, r6
   16ee8:	bl	18a84 <__assert_fail@plt+0x79fc>
   16eec:	cmp	r6, #0
   16ef0:	movwne	r6, #1
   16ef4:	cmp	r0, #0
   16ef8:	bne	16f0c <__assert_fail@plt+0x5e84>
   16efc:	clz	r1, r5
   16f00:	lsr	r1, r1, #5
   16f04:	orrs	r1, r1, r6
   16f08:	bne	16f14 <__assert_fail@plt+0x5e8c>
   16f0c:	str	r7, [r8]
   16f10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16f14:	bl	1705c <__assert_fail@plt+0x5fd4>
   16f18:	push	{fp, lr}
   16f1c:	mov	fp, sp
   16f20:	mov	r1, #1
   16f24:	bl	18a00 <__assert_fail@plt+0x7978>
   16f28:	cmp	r0, #0
   16f2c:	popne	{fp, pc}
   16f30:	bl	1705c <__assert_fail@plt+0x5fd4>
   16f34:	push	{fp, lr}
   16f38:	mov	fp, sp
   16f3c:	bl	18a00 <__assert_fail@plt+0x7978>
   16f40:	cmp	r0, #0
   16f44:	popne	{fp, pc}
   16f48:	bl	1705c <__assert_fail@plt+0x5fd4>
   16f4c:	push	{fp, lr}
   16f50:	mov	fp, sp
   16f54:	mov	r1, #1
   16f58:	bl	18a00 <__assert_fail@plt+0x7978>
   16f5c:	cmp	r0, #0
   16f60:	popne	{fp, pc}
   16f64:	bl	1705c <__assert_fail@plt+0x5fd4>
   16f68:	push	{fp, lr}
   16f6c:	mov	fp, sp
   16f70:	bl	18a00 <__assert_fail@plt+0x7978>
   16f74:	cmp	r0, #0
   16f78:	popne	{fp, pc}
   16f7c:	bl	1705c <__assert_fail@plt+0x5fd4>
   16f80:	push	{r4, r5, fp, lr}
   16f84:	add	fp, sp, #8
   16f88:	mov	r5, r0
   16f8c:	mov	r0, r1
   16f90:	mov	r4, r1
   16f94:	bl	18a54 <__assert_fail@plt+0x79cc>
   16f98:	cmp	r0, #0
   16f9c:	beq	16fb0 <__assert_fail@plt+0x5f28>
   16fa0:	mov	r1, r5
   16fa4:	mov	r2, r4
   16fa8:	pop	{r4, r5, fp, lr}
   16fac:	b	10e90 <memcpy@plt>
   16fb0:	bl	1705c <__assert_fail@plt+0x5fd4>
   16fb4:	push	{r4, r5, fp, lr}
   16fb8:	add	fp, sp, #8
   16fbc:	mov	r5, r0
   16fc0:	mov	r0, r1
   16fc4:	mov	r4, r1
   16fc8:	bl	18a54 <__assert_fail@plt+0x79cc>
   16fcc:	cmp	r0, #0
   16fd0:	beq	16fe4 <__assert_fail@plt+0x5f5c>
   16fd4:	mov	r1, r5
   16fd8:	mov	r2, r4
   16fdc:	pop	{r4, r5, fp, lr}
   16fe0:	b	10e90 <memcpy@plt>
   16fe4:	bl	1705c <__assert_fail@plt+0x5fd4>
   16fe8:	push	{r4, r5, fp, lr}
   16fec:	add	fp, sp, #8
   16ff0:	mov	r5, r0
   16ff4:	add	r0, r1, #1
   16ff8:	mov	r4, r1
   16ffc:	bl	18a54 <__assert_fail@plt+0x79cc>
   17000:	cmp	r0, #0
   17004:	beq	17020 <__assert_fail@plt+0x5f98>
   17008:	mov	r1, #0
   1700c:	mov	r2, r4
   17010:	strb	r1, [r0, r4]
   17014:	mov	r1, r5
   17018:	pop	{r4, r5, fp, lr}
   1701c:	b	10e90 <memcpy@plt>
   17020:	bl	1705c <__assert_fail@plt+0x5fd4>
   17024:	push	{r4, r5, fp, lr}
   17028:	add	fp, sp, #8
   1702c:	mov	r4, r0
   17030:	bl	10f8c <strlen@plt>
   17034:	add	r5, r0, #1
   17038:	mov	r0, r5
   1703c:	bl	18a54 <__assert_fail@plt+0x79cc>
   17040:	cmp	r0, #0
   17044:	beq	17058 <__assert_fail@plt+0x5fd0>
   17048:	mov	r1, r4
   1704c:	mov	r2, r5
   17050:	pop	{r4, r5, fp, lr}
   17054:	b	10e90 <memcpy@plt>
   17058:	bl	1705c <__assert_fail@plt+0x5fd4>
   1705c:	push	{fp, lr}
   17060:	mov	fp, sp
   17064:	movw	r0, #45292	; 0xb0ec
   17068:	movw	r1, #41596	; 0xa27c
   1706c:	mov	r2, #5
   17070:	movt	r0, #2
   17074:	movt	r1, #1
   17078:	ldr	r4, [r0]
   1707c:	mov	r0, #0
   17080:	bl	10eb4 <dcgettext@plt>
   17084:	movw	r2, #38316	; 0x95ac
   17088:	mov	r3, r0
   1708c:	mov	r0, r4
   17090:	mov	r1, #0
   17094:	movt	r2, #1
   17098:	bl	10f20 <error@plt>
   1709c:	bl	1107c <abort@plt>
   170a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170a4:	add	fp, sp, #28
   170a8:	sub	sp, sp, #36	; 0x24
   170ac:	cmp	r2, #37	; 0x25
   170b0:	bcs	189e0 <__assert_fail@plt+0x7958>
   170b4:	ldr	r8, [fp, #8]
   170b8:	mov	r9, r3
   170bc:	mov	r6, r2
   170c0:	mov	r7, r1
   170c4:	mov	r4, r0
   170c8:	bl	10fa4 <__errno_location@plt>
   170cc:	cmp	r7, #0
   170d0:	add	sl, sp, #32
   170d4:	mov	r5, r0
   170d8:	mov	r0, #0
   170dc:	mov	r2, r6
   170e0:	mov	r3, #0
   170e4:	movne	sl, r7
   170e8:	str	r0, [r5]
   170ec:	mov	r0, r4
   170f0:	mov	r1, sl
   170f4:	bl	11040 <__strtoll_internal@plt>
   170f8:	mov	r7, r1
   170fc:	ldr	r1, [sl]
   17100:	cmp	r1, r4
   17104:	beq	17140 <__assert_fail@plt+0x60b8>
   17108:	mov	r6, r0
   1710c:	ldr	r0, [r5]
   17110:	cmp	r0, #0
   17114:	beq	172cc <__assert_fail@plt+0x6244>
   17118:	mov	r5, #4
   1711c:	cmp	r0, #34	; 0x22
   17120:	bne	17524 <__assert_fail@plt+0x649c>
   17124:	mov	r5, #1
   17128:	cmp	r8, #0
   1712c:	beq	172d8 <__assert_fail@plt+0x6250>
   17130:	ldrb	r4, [r1]
   17134:	cmp	r4, #0
   17138:	bne	17188 <__assert_fail@plt+0x6100>
   1713c:	b	172d8 <__assert_fail@plt+0x6250>
   17140:	mov	r5, #4
   17144:	cmp	r8, #0
   17148:	beq	17524 <__assert_fail@plt+0x649c>
   1714c:	mov	r6, r1
   17150:	ldrb	r1, [r4]
   17154:	cmp	r1, #0
   17158:	beq	17524 <__assert_fail@plt+0x649c>
   1715c:	mov	r0, r8
   17160:	bl	10f98 <strchr@plt>
   17164:	cmp	r0, #0
   17168:	beq	17524 <__assert_fail@plt+0x649c>
   1716c:	mov	r1, r6
   17170:	mov	r5, #0
   17174:	mov	r6, #1
   17178:	mov	r7, #0
   1717c:	ldrb	r4, [r1]
   17180:	cmp	r4, #0
   17184:	beq	172d8 <__assert_fail@plt+0x6250>
   17188:	str	r1, [sp, #20]
   1718c:	mov	r0, r8
   17190:	mov	r1, r4
   17194:	bl	10f98 <strchr@plt>
   17198:	cmp	r0, #0
   1719c:	beq	1751c <__assert_fail@plt+0x6494>
   171a0:	sub	r0, r4, #69	; 0x45
   171a4:	mov	r1, #1
   171a8:	mov	r3, #0
   171ac:	mov	r2, #1024	; 0x400
   171b0:	cmp	r0, #47	; 0x2f
   171b4:	str	r1, [sp, #16]
   171b8:	bhi	172f0 <__assert_fail@plt+0x6268>
   171bc:	add	r1, pc, #0
   171c0:	ldr	pc, [r1, r0, lsl #2]
   171c4:	andeq	r7, r1, r4, lsl #5
   171c8:	strdeq	r7, [r1], -r0
   171cc:	andeq	r7, r1, r4, lsl #5
   171d0:	strdeq	r7, [r1], -r0
   171d4:	strdeq	r7, [r1], -r0
   171d8:	strdeq	r7, [r1], -r0
   171dc:	andeq	r7, r1, r4, lsl #5
   171e0:	strdeq	r7, [r1], -r0
   171e4:	andeq	r7, r1, r4, lsl #5
   171e8:	strdeq	r7, [r1], -r0
   171ec:	strdeq	r7, [r1], -r0
   171f0:	andeq	r7, r1, r4, lsl #5
   171f4:	strdeq	r7, [r1], -r0
   171f8:	strdeq	r7, [r1], -r0
   171fc:	strdeq	r7, [r1], -r0
   17200:	andeq	r7, r1, r4, lsl #5
   17204:	strdeq	r7, [r1], -r0
   17208:	strdeq	r7, [r1], -r0
   1720c:	strdeq	r7, [r1], -r0
   17210:	strdeq	r7, [r1], -r0
   17214:	andeq	r7, r1, r4, lsl #5
   17218:	andeq	r7, r1, r4, lsl #5
   1721c:	strdeq	r7, [r1], -r0
   17220:	strdeq	r7, [r1], -r0
   17224:	strdeq	r7, [r1], -r0
   17228:	strdeq	r7, [r1], -r0
   1722c:	strdeq	r7, [r1], -r0
   17230:	strdeq	r7, [r1], -r0
   17234:	strdeq	r7, [r1], -r0
   17238:	strdeq	r7, [r1], -r0
   1723c:	strdeq	r7, [r1], -r0
   17240:	strdeq	r7, [r1], -r0
   17244:	strdeq	r7, [r1], -r0
   17248:	strdeq	r7, [r1], -r0
   1724c:	andeq	r7, r1, r4, lsl #5
   17250:	strdeq	r7, [r1], -r0
   17254:	strdeq	r7, [r1], -r0
   17258:	strdeq	r7, [r1], -r0
   1725c:	andeq	r7, r1, r4, lsl #5
   17260:	strdeq	r7, [r1], -r0
   17264:	andeq	r7, r1, r4, lsl #5
   17268:	strdeq	r7, [r1], -r0
   1726c:	strdeq	r7, [r1], -r0
   17270:	strdeq	r7, [r1], -r0
   17274:	strdeq	r7, [r1], -r0
   17278:	strdeq	r7, [r1], -r0
   1727c:	strdeq	r7, [r1], -r0
   17280:	andeq	r7, r1, r4, lsl #5
   17284:	mov	r0, r8
   17288:	mov	r1, #48	; 0x30
   1728c:	bl	10f98 <strchr@plt>
   17290:	cmp	r0, #0
   17294:	beq	172e8 <__assert_fail@plt+0x6260>
   17298:	ldr	r1, [sp, #20]
   1729c:	ldrb	r0, [r1, #1]
   172a0:	cmp	r0, #66	; 0x42
   172a4:	cmpne	r0, #68	; 0x44
   172a8:	bne	17424 <__assert_fail@plt+0x639c>
   172ac:	mov	r0, #2
   172b0:	mov	r2, #1000	; 0x3e8
   172b4:	mov	r3, #0
   172b8:	str	r0, [sp, #16]
   172bc:	sub	r0, r4, #66	; 0x42
   172c0:	cmp	r0, #53	; 0x35
   172c4:	bls	172fc <__assert_fail@plt+0x6274>
   172c8:	b	1751c <__assert_fail@plt+0x6494>
   172cc:	mov	r5, r0
   172d0:	cmp	r8, #0
   172d4:	bne	17130 <__assert_fail@plt+0x60a8>
   172d8:	strd	r6, [r9]
   172dc:	mov	r0, r5
   172e0:	sub	sp, fp, #28
   172e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172e8:	mov	r3, #0
   172ec:	mov	r2, #1024	; 0x400
   172f0:	sub	r0, r4, #66	; 0x42
   172f4:	cmp	r0, #53	; 0x35
   172f8:	bhi	1751c <__assert_fail@plt+0x6494>
   172fc:	add	r1, pc, #8
   17300:	str	r3, [sp, #28]
   17304:	str	r2, [sp, #24]
   17308:	ldr	pc, [r1, r0, lsl #2]
   1730c:	andeq	r7, r1, r4, ror r5
   17310:	andeq	r7, r1, ip, lsl r5
   17314:	andeq	r7, r1, ip, lsl r5
   17318:	andeq	r7, r1, r8, lsl #11
   1731c:	andeq	r7, r1, ip, lsl r5
   17320:	andeq	r7, r1, r4, ror #7
   17324:	andeq	r7, r1, ip, lsl r5
   17328:	andeq	r7, r1, ip, lsl r5
   1732c:	andeq	r7, r1, ip, lsl r5
   17330:	andeq	r7, r1, r8, asr r4
   17334:	andeq	r7, r1, ip, lsl r5
   17338:	andeq	r7, r1, r8, lsl #9
   1733c:	andeq	r7, r1, ip, lsl r5
   17340:	andeq	r7, r1, ip, lsl r5
   17344:	andeq	r7, r1, ip, asr #11
   17348:	andeq	r7, r1, ip, lsl r5
   1734c:	andeq	r7, r1, ip, lsl r5
   17350:	andeq	r7, r1, ip, lsl r5
   17354:	andeq	r7, r1, r8, asr #9
   17358:	andeq	r7, r1, ip, lsl r5
   1735c:	andeq	r7, r1, ip, lsl r5
   17360:	andeq	r7, r1, ip, lsl r5
   17364:	andeq	r7, r1, ip, lsl r5
   17368:	andeq	r7, r1, r0, lsl r6
   1736c:	andeq	r7, r1, r0, lsr r5
   17370:	andeq	r7, r1, ip, lsl r5
   17374:	andeq	r7, r1, ip, lsl r5
   17378:	andeq	r7, r1, ip, lsl r5
   1737c:	andeq	r7, r1, ip, lsl r5
   17380:	andeq	r7, r1, ip, lsl r5
   17384:	andeq	r7, r1, ip, lsl r5
   17388:	andeq	r7, r1, ip, lsl r5
   1738c:	andeq	r7, r1, r4, asr r6
   17390:	andeq	r8, r1, ip, asr #11
   17394:	andeq	r7, r1, ip, lsl r5
   17398:	andeq	r7, r1, ip, lsl r5
   1739c:	andeq	r7, r1, ip, lsl r5
   173a0:	andeq	r7, r1, r4, ror #7
   173a4:	andeq	r7, r1, ip, lsl r5
   173a8:	andeq	r7, r1, ip, lsl r5
   173ac:	andeq	r7, r1, ip, lsl r5
   173b0:	andeq	r7, r1, r8, asr r4
   173b4:	andeq	r7, r1, ip, lsl r5
   173b8:	andeq	r7, r1, r8, lsl #9
   173bc:	andeq	r7, r1, ip, lsl r5
   173c0:	andeq	r7, r1, ip, lsl r5
   173c4:	andeq	r7, r1, ip, lsl r5
   173c8:	andeq	r7, r1, ip, lsl r5
   173cc:	andeq	r7, r1, ip, lsl r5
   173d0:	andeq	r7, r1, ip, lsl r5
   173d4:	andeq	r7, r1, r8, asr #9
   173d8:	andeq	r7, r1, ip, lsl r5
   173dc:	andeq	r7, r1, ip, lsl r5
   173e0:	andeq	r7, r1, r8, ror #12
   173e4:	cmn	r7, #1
   173e8:	str	r9, [sp, #12]
   173ec:	ble	1767c <__assert_fail@plt+0x65f4>
   173f0:	ldr	r3, [sp, #28]
   173f4:	mvn	r0, #0
   173f8:	mvn	r1, #-2147483648	; 0x80000000
   173fc:	mvn	r8, #0
   17400:	mvn	r9, #-2147483648	; 0x80000000
   17404:	bl	18e14 <__assert_fail@plt+0x7d8c>
   17408:	ldr	r2, [sp, #24]
   1740c:	ldr	r3, [sp, #28]
   17410:	subs	r0, r0, r6
   17414:	mov	r4, #1
   17418:	sbcs	r0, r1, r7
   1741c:	bge	176bc <__assert_fail@plt+0x6634>
   17420:	b	176d4 <__assert_fail@plt+0x664c>
   17424:	cmp	r0, #105	; 0x69
   17428:	mov	r3, #0
   1742c:	bne	1750c <__assert_fail@plt+0x6484>
   17430:	ldrb	r0, [r1, #2]
   17434:	mov	r1, #1
   17438:	mov	r2, #1024	; 0x400
   1743c:	cmp	r0, #66	; 0x42
   17440:	movweq	r1, #3
   17444:	str	r1, [sp, #16]
   17448:	sub	r0, r4, #66	; 0x42
   1744c:	cmp	r0, #53	; 0x35
   17450:	bls	172fc <__assert_fail@plt+0x6274>
   17454:	b	1751c <__assert_fail@plt+0x6494>
   17458:	cmn	r7, #1
   1745c:	ble	17710 <__assert_fail@plt+0x6688>
   17460:	ldr	r3, [sp, #28]
   17464:	mvn	r0, #0
   17468:	mvn	r1, #-2147483648	; 0x80000000
   1746c:	bl	18e14 <__assert_fail@plt+0x7d8c>
   17470:	ldr	r2, [sp, #24]
   17474:	ldr	r3, [sp, #28]
   17478:	subs	r0, r0, r6
   1747c:	sbcs	r0, r1, r7
   17480:	bge	17744 <__assert_fail@plt+0x66bc>
   17484:	b	17e54 <__assert_fail@plt+0x6dcc>
   17488:	cmn	r7, #1
   1748c:	str	r9, [sp, #12]
   17490:	ble	17758 <__assert_fail@plt+0x66d0>
   17494:	ldr	r3, [sp, #28]
   17498:	mvn	r0, #0
   1749c:	mvn	r1, #-2147483648	; 0x80000000
   174a0:	mvn	r8, #0
   174a4:	mvn	r9, #-2147483648	; 0x80000000
   174a8:	bl	18e14 <__assert_fail@plt+0x7d8c>
   174ac:	ldr	r2, [sp, #24]
   174b0:	ldr	r3, [sp, #28]
   174b4:	subs	r0, r0, r6
   174b8:	mov	r4, #1
   174bc:	sbcs	r0, r1, r7
   174c0:	bge	17798 <__assert_fail@plt+0x6710>
   174c4:	b	177b0 <__assert_fail@plt+0x6728>
   174c8:	cmn	r7, #1
   174cc:	str	r9, [sp, #12]
   174d0:	ble	177e8 <__assert_fail@plt+0x6760>
   174d4:	ldr	r3, [sp, #28]
   174d8:	mvn	r0, #0
   174dc:	mvn	r1, #-2147483648	; 0x80000000
   174e0:	mvn	r9, #-2147483648	; 0x80000000
   174e4:	str	r0, [sp, #8]
   174e8:	mvn	r0, #0
   174ec:	bl	18e14 <__assert_fail@plt+0x7d8c>
   174f0:	ldr	r2, [sp, #24]
   174f4:	ldr	r3, [sp, #28]
   174f8:	subs	r0, r0, r6
   174fc:	mov	r4, #1
   17500:	sbcs	r0, r1, r7
   17504:	bge	1782c <__assert_fail@plt+0x67a4>
   17508:	b	17848 <__assert_fail@plt+0x67c0>
   1750c:	mov	r2, #1024	; 0x400
   17510:	sub	r0, r4, #66	; 0x42
   17514:	cmp	r0, #53	; 0x35
   17518:	bls	172fc <__assert_fail@plt+0x6274>
   1751c:	orr	r5, r5, #2
   17520:	strd	r6, [r9]
   17524:	mov	r0, r5
   17528:	sub	sp, fp, #28
   1752c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17530:	cmp	r7, #0
   17534:	str	r9, [sp, #12]
   17538:	bmi	17b30 <__assert_fail@plt+0x6aa8>
   1753c:	ldr	r3, [sp, #28]
   17540:	mvn	r0, #0
   17544:	mvn	r1, #-2147483648	; 0x80000000
   17548:	mvn	r9, #-2147483648	; 0x80000000
   1754c:	str	r0, [sp, #8]
   17550:	mvn	r0, #0
   17554:	bl	18e14 <__assert_fail@plt+0x7d8c>
   17558:	ldr	r2, [sp, #24]
   1755c:	ldr	r3, [sp, #28]
   17560:	subs	r0, r0, r6
   17564:	mov	r4, #1
   17568:	sbcs	r0, r1, r7
   1756c:	bge	17b74 <__assert_fail@plt+0x6aec>
   17570:	b	17b90 <__assert_fail@plt+0x6b08>
   17574:	cmn	r7, #1
   17578:	ble	17bcc <__assert_fail@plt+0x6b44>
   1757c:	cmp	r7, #2097152	; 0x200000
   17580:	blt	17bfc <__assert_fail@plt+0x6b74>
   17584:	b	17e54 <__assert_fail@plt+0x6dcc>
   17588:	cmp	r7, #0
   1758c:	str	r9, [sp, #12]
   17590:	bmi	17c0c <__assert_fail@plt+0x6b84>
   17594:	ldr	r3, [sp, #28]
   17598:	mvn	r0, #0
   1759c:	mvn	r1, #-2147483648	; 0x80000000
   175a0:	mvn	r9, #-2147483648	; 0x80000000
   175a4:	str	r0, [sp, #8]
   175a8:	mvn	r0, #0
   175ac:	bl	18e14 <__assert_fail@plt+0x7d8c>
   175b0:	ldr	r2, [sp, #24]
   175b4:	ldr	r3, [sp, #28]
   175b8:	subs	r0, r0, r6
   175bc:	mov	r4, #1
   175c0:	sbcs	r0, r1, r7
   175c4:	bge	17c50 <__assert_fail@plt+0x6bc8>
   175c8:	b	17c6c <__assert_fail@plt+0x6be4>
   175cc:	cmp	r7, #0
   175d0:	str	r9, [sp, #12]
   175d4:	bmi	17ca8 <__assert_fail@plt+0x6c20>
   175d8:	ldr	r3, [sp, #28]
   175dc:	mvn	r0, #0
   175e0:	mvn	r1, #-2147483648	; 0x80000000
   175e4:	mvn	r8, #-2147483648	; 0x80000000
   175e8:	str	r0, [sp, #8]
   175ec:	mvn	r0, #0
   175f0:	bl	18e14 <__assert_fail@plt+0x7d8c>
   175f4:	ldr	r2, [sp, #24]
   175f8:	ldr	r3, [sp, #28]
   175fc:	subs	r0, r0, r6
   17600:	mov	r4, #1
   17604:	sbcs	r0, r1, r7
   17608:	bge	17cec <__assert_fail@plt+0x6c64>
   1760c:	b	17d08 <__assert_fail@plt+0x6c80>
   17610:	cmp	r7, #0
   17614:	str	r9, [sp, #12]
   17618:	bmi	17d44 <__assert_fail@plt+0x6cbc>
   1761c:	ldr	r3, [sp, #28]
   17620:	mvn	r0, #0
   17624:	mvn	r1, #-2147483648	; 0x80000000
   17628:	mvn	r9, #-2147483648	; 0x80000000
   1762c:	str	r0, [sp, #8]
   17630:	mvn	r0, #0
   17634:	bl	18e14 <__assert_fail@plt+0x7d8c>
   17638:	ldr	r2, [sp, #24]
   1763c:	ldr	r3, [sp, #28]
   17640:	subs	r0, r0, r6
   17644:	mov	r4, #1
   17648:	sbcs	r0, r1, r7
   1764c:	bge	17d88 <__assert_fail@plt+0x6d00>
   17650:	b	17da4 <__assert_fail@plt+0x6d1c>
   17654:	cmn	r7, #1
   17658:	ble	17de4 <__assert_fail@plt+0x6d5c>
   1765c:	cmp	r7, #4194304	; 0x400000
   17660:	blt	17e14 <__assert_fail@plt+0x6d8c>
   17664:	b	17e54 <__assert_fail@plt+0x6dcc>
   17668:	cmn	r7, #1
   1766c:	ble	17e24 <__assert_fail@plt+0x6d9c>
   17670:	cmp	r7, #1073741824	; 0x40000000
   17674:	bge	17e54 <__assert_fail@plt+0x6dcc>
   17678:	b	17e74 <__assert_fail@plt+0x6dec>
   1767c:	and	r0, r6, r7
   17680:	cmn	r0, #1
   17684:	beq	176bc <__assert_fail@plt+0x6634>
   17688:	mov	r0, #0
   1768c:	mov	r1, #-2147483648	; 0x80000000
   17690:	mov	r2, r6
   17694:	mov	r3, r7
   17698:	mov	r8, #0
   1769c:	mov	r9, #-2147483648	; 0x80000000
   176a0:	bl	18d40 <__assert_fail@plt+0x7cb8>
   176a4:	ldr	r2, [sp, #24]
   176a8:	ldr	r3, [sp, #28]
   176ac:	mov	r4, #1
   176b0:	subs	r0, r0, r2
   176b4:	sbcs	r0, r1, r3
   176b8:	blt	17884 <__assert_fail@plt+0x67fc>
   176bc:	umull	r8, r0, r6, r2
   176c0:	mov	r4, #0
   176c4:	mla	r0, r6, r3, r0
   176c8:	mla	r9, r7, r2, r0
   176cc:	cmp	r9, #0
   176d0:	bmi	17884 <__assert_fail@plt+0x67fc>
   176d4:	ldr	r3, [sp, #28]
   176d8:	mvn	r0, #-2147483648	; 0x80000000
   176dc:	mvn	r1, #-2147483648	; 0x80000000
   176e0:	mov	r6, r4
   176e4:	mvn	r4, #0
   176e8:	str	r0, [sp, #8]
   176ec:	mvn	r0, #0
   176f0:	bl	18e14 <__assert_fail@plt+0x7d8c>
   176f4:	ldr	r2, [sp, #24]
   176f8:	ldr	r3, [sp, #28]
   176fc:	subs	r0, r0, r8
   17700:	mov	r7, #1
   17704:	sbcs	r0, r1, r9
   17708:	bge	178c0 <__assert_fail@plt+0x6838>
   1770c:	b	178dc <__assert_fail@plt+0x6854>
   17710:	and	r0, r6, r7
   17714:	cmn	r0, #1
   17718:	beq	17744 <__assert_fail@plt+0x66bc>
   1771c:	mov	r0, #0
   17720:	mov	r1, #-2147483648	; 0x80000000
   17724:	mov	r2, r6
   17728:	mov	r3, r7
   1772c:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17730:	ldr	r2, [sp, #24]
   17734:	ldr	r3, [sp, #28]
   17738:	subs	r0, r0, r2
   1773c:	sbcs	r0, r1, r3
   17740:	blt	17e54 <__assert_fail@plt+0x6dcc>
   17744:	umull	r0, r1, r6, r2
   17748:	mla	r1, r6, r3, r1
   1774c:	mla	r7, r7, r2, r1
   17750:	mov	r6, r0
   17754:	b	185cc <__assert_fail@plt+0x7544>
   17758:	and	r0, r6, r7
   1775c:	cmn	r0, #1
   17760:	beq	17798 <__assert_fail@plt+0x6710>
   17764:	mov	r0, #0
   17768:	mov	r1, #-2147483648	; 0x80000000
   1776c:	mov	r2, r6
   17770:	mov	r3, r7
   17774:	mov	r8, #0
   17778:	mov	r9, #-2147483648	; 0x80000000
   1777c:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17780:	ldr	r2, [sp, #24]
   17784:	ldr	r3, [sp, #28]
   17788:	mov	r4, #1
   1778c:	subs	r0, r0, r2
   17790:	sbcs	r0, r1, r3
   17794:	blt	17970 <__assert_fail@plt+0x68e8>
   17798:	umull	r8, r0, r6, r2
   1779c:	mov	r4, #0
   177a0:	mla	r0, r6, r3, r0
   177a4:	mla	r9, r7, r2, r0
   177a8:	cmp	r9, #0
   177ac:	bmi	17970 <__assert_fail@plt+0x68e8>
   177b0:	ldr	r3, [sp, #28]
   177b4:	mvn	r0, #0
   177b8:	mvn	r1, #-2147483648	; 0x80000000
   177bc:	str	r4, [sp, #8]
   177c0:	mvn	r6, #0
   177c4:	mvn	r7, #-2147483648	; 0x80000000
   177c8:	bl	18e14 <__assert_fail@plt+0x7d8c>
   177cc:	ldr	r4, [sp, #24]
   177d0:	ldr	r3, [sp, #28]
   177d4:	subs	r0, r0, r8
   177d8:	mov	r2, #1
   177dc:	sbcs	r0, r1, r9
   177e0:	bge	179a8 <__assert_fail@plt+0x6920>
   177e4:	b	17ae0 <__assert_fail@plt+0x6a58>
   177e8:	and	r0, r6, r7
   177ec:	cmn	r0, #1
   177f0:	beq	1782c <__assert_fail@plt+0x67a4>
   177f4:	mov	r0, #0
   177f8:	mov	r1, #-2147483648	; 0x80000000
   177fc:	mov	r2, r6
   17800:	mov	r3, r7
   17804:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17808:	ldr	r2, [sp, #24]
   1780c:	ldr	r3, [sp, #28]
   17810:	mov	r4, #1
   17814:	mov	r9, #-2147483648	; 0x80000000
   17818:	subs	r0, r0, r2
   1781c:	sbcs	r0, r1, r3
   17820:	mov	r0, #0
   17824:	str	r0, [sp, #8]
   17828:	blt	179bc <__assert_fail@plt+0x6934>
   1782c:	umull	r1, r0, r6, r2
   17830:	mov	r4, #0
   17834:	mla	r0, r6, r3, r0
   17838:	mla	r9, r7, r2, r0
   1783c:	str	r1, [sp, #8]
   17840:	cmp	r9, #0
   17844:	bmi	179bc <__assert_fail@plt+0x6934>
   17848:	ldr	r3, [sp, #28]
   1784c:	mvn	r0, #0
   17850:	mvn	r1, #-2147483648	; 0x80000000
   17854:	str	r4, [sp, #4]
   17858:	mvn	r6, #0
   1785c:	mvn	r8, #-2147483648	; 0x80000000
   17860:	bl	18e14 <__assert_fail@plt+0x7d8c>
   17864:	ldr	r4, [sp, #8]
   17868:	ldr	r2, [sp, #24]
   1786c:	ldr	r3, [sp, #28]
   17870:	mov	r7, #1
   17874:	subs	r0, r0, r4
   17878:	sbcs	r0, r1, r9
   1787c:	bge	179f8 <__assert_fail@plt+0x6970>
   17880:	b	17a10 <__assert_fail@plt+0x6988>
   17884:	mov	r0, #-2147483648	; 0x80000000
   17888:	mov	r1, #-2147483648	; 0x80000000
   1788c:	mov	r2, r8
   17890:	mov	r3, r9
   17894:	mov	r6, r4
   17898:	mov	r4, #0
   1789c:	str	r0, [sp, #8]
   178a0:	mov	r0, #0
   178a4:	bl	18d40 <__assert_fail@plt+0x7cb8>
   178a8:	ldr	r2, [sp, #24]
   178ac:	ldr	r3, [sp, #28]
   178b0:	mov	r7, #1
   178b4:	subs	r0, r0, r2
   178b8:	sbcs	r0, r1, r3
   178bc:	blt	17930 <__assert_fail@plt+0x68a8>
   178c0:	umull	r4, r0, r8, r2
   178c4:	mov	r7, r6
   178c8:	mla	r0, r8, r3, r0
   178cc:	mla	r0, r9, r2, r0
   178d0:	cmp	r0, #0
   178d4:	str	r0, [sp, #8]
   178d8:	bmi	17930 <__assert_fail@plt+0x68a8>
   178dc:	ldr	r3, [sp, #28]
   178e0:	mvn	r0, #0
   178e4:	mvn	r1, #-2147483648	; 0x80000000
   178e8:	mov	r9, r7
   178ec:	mvn	r6, #0
   178f0:	mvn	r7, #-2147483648	; 0x80000000
   178f4:	bl	18e14 <__assert_fail@plt+0x7d8c>
   178f8:	ldr	r8, [sp, #8]
   178fc:	ldr	r3, [sp, #24]
   17900:	ldr	ip, [sp, #28]
   17904:	subs	r0, r0, r4
   17908:	mov	r2, #1
   1790c:	sbcs	r0, r1, r8
   17910:	blt	17924 <__assert_fail@plt+0x689c>
   17914:	umull	r6, r0, r4, r3
   17918:	mov	r2, #0
   1791c:	mla	r0, r4, ip, r0
   17920:	mla	r7, r8, r3, r0
   17924:	orr	r3, r2, r9
   17928:	ldr	r9, [sp, #12]
   1792c:	b	185cc <__assert_fail@plt+0x7544>
   17930:	ldr	r8, [sp, #8]
   17934:	mov	r0, #0
   17938:	mov	r1, #-2147483648	; 0x80000000
   1793c:	mov	r2, r4
   17940:	mov	r9, r7
   17944:	mov	r6, #0
   17948:	mov	r7, #-2147483648	; 0x80000000
   1794c:	mov	r3, r8
   17950:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17954:	ldr	r3, [sp, #24]
   17958:	ldr	ip, [sp, #28]
   1795c:	mov	r2, #1
   17960:	subs	r0, r0, r3
   17964:	sbcs	r0, r1, ip
   17968:	bge	17914 <__assert_fail@plt+0x688c>
   1796c:	b	17924 <__assert_fail@plt+0x689c>
   17970:	mov	r0, #0
   17974:	mov	r1, #-2147483648	; 0x80000000
   17978:	mov	r2, r8
   1797c:	mov	r3, r9
   17980:	str	r4, [sp, #8]
   17984:	mov	r6, #0
   17988:	mov	r7, #-2147483648	; 0x80000000
   1798c:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17990:	ldr	r4, [sp, #24]
   17994:	ldr	r3, [sp, #28]
   17998:	mov	r2, #1
   1799c:	subs	r0, r0, r4
   179a0:	sbcs	r0, r1, r3
   179a4:	blt	17ae0 <__assert_fail@plt+0x6a58>
   179a8:	umull	r6, r0, r8, r4
   179ac:	mov	r2, #0
   179b0:	mla	r0, r8, r3, r0
   179b4:	mla	r7, r9, r4, r0
   179b8:	b	17ae0 <__assert_fail@plt+0x6a58>
   179bc:	str	r4, [sp, #4]
   179c0:	ldr	r4, [sp, #8]
   179c4:	mov	r0, #0
   179c8:	mov	r1, #-2147483648	; 0x80000000
   179cc:	mov	r3, r9
   179d0:	mov	r2, r4
   179d4:	bl	18d40 <__assert_fail@plt+0x7cb8>
   179d8:	ldr	r2, [sp, #24]
   179dc:	ldr	r3, [sp, #28]
   179e0:	mov	r7, #1
   179e4:	mov	r6, #0
   179e8:	mov	r8, #-2147483648	; 0x80000000
   179ec:	subs	r0, r0, r2
   179f0:	sbcs	r0, r1, r3
   179f4:	blt	17a48 <__assert_fail@plt+0x69c0>
   179f8:	umull	r6, r0, r4, r2
   179fc:	ldr	r7, [sp, #4]
   17a00:	mla	r0, r4, r3, r0
   17a04:	mla	r8, r9, r2, r0
   17a08:	cmp	r8, #0
   17a0c:	bmi	17a48 <__assert_fail@plt+0x69c0>
   17a10:	ldr	r3, [sp, #28]
   17a14:	mvn	r0, #0
   17a18:	mvn	r1, #-2147483648	; 0x80000000
   17a1c:	str	r7, [sp, #8]
   17a20:	mvn	r4, #0
   17a24:	mvn	r9, #-2147483648	; 0x80000000
   17a28:	bl	18e14 <__assert_fail@plt+0x7d8c>
   17a2c:	ldr	r2, [sp, #24]
   17a30:	ldr	r3, [sp, #28]
   17a34:	subs	r0, r0, r6
   17a38:	mov	r7, #1
   17a3c:	sbcs	r0, r1, r8
   17a40:	bge	17a80 <__assert_fail@plt+0x69f8>
   17a44:	b	17a98 <__assert_fail@plt+0x6a10>
   17a48:	mov	r0, #0
   17a4c:	mov	r1, #-2147483648	; 0x80000000
   17a50:	mov	r2, r6
   17a54:	mov	r3, r8
   17a58:	str	r7, [sp, #8]
   17a5c:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17a60:	ldr	r2, [sp, #24]
   17a64:	ldr	r3, [sp, #28]
   17a68:	mov	r7, #1
   17a6c:	mov	r4, #0
   17a70:	mov	r9, #-2147483648	; 0x80000000
   17a74:	subs	r0, r0, r2
   17a78:	sbcs	r0, r1, r3
   17a7c:	blt	17af0 <__assert_fail@plt+0x6a68>
   17a80:	umull	r4, r0, r6, r2
   17a84:	ldr	r7, [sp, #8]
   17a88:	mla	r0, r6, r3, r0
   17a8c:	mla	r9, r8, r2, r0
   17a90:	cmp	r9, #0
   17a94:	bmi	17af0 <__assert_fail@plt+0x6a68>
   17a98:	ldr	r3, [sp, #28]
   17a9c:	mvn	r0, #0
   17aa0:	mvn	r1, #-2147483648	; 0x80000000
   17aa4:	str	r7, [sp, #8]
   17aa8:	mvn	r6, #0
   17aac:	mvn	r7, #-2147483648	; 0x80000000
   17ab0:	bl	18e14 <__assert_fail@plt+0x7d8c>
   17ab4:	ldr	r3, [sp, #24]
   17ab8:	ldr	ip, [sp, #28]
   17abc:	subs	r0, r0, r4
   17ac0:	mov	r2, #1
   17ac4:	mov	r8, r4
   17ac8:	sbcs	r0, r1, r9
   17acc:	blt	17ae0 <__assert_fail@plt+0x6a58>
   17ad0:	umull	r6, r0, r8, r3
   17ad4:	mov	r2, #0
   17ad8:	mla	r0, r8, ip, r0
   17adc:	mla	r7, r9, r3, r0
   17ae0:	ldr	r0, [sp, #8]
   17ae4:	ldr	r9, [sp, #12]
   17ae8:	orr	r3, r2, r0
   17aec:	b	185cc <__assert_fail@plt+0x7544>
   17af0:	mov	r0, #0
   17af4:	mov	r1, #-2147483648	; 0x80000000
   17af8:	mov	r2, r4
   17afc:	mov	r3, r9
   17b00:	str	r7, [sp, #8]
   17b04:	mov	r8, r4
   17b08:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17b0c:	ldr	r3, [sp, #24]
   17b10:	ldr	ip, [sp, #28]
   17b14:	mov	r2, #1
   17b18:	mov	r6, #0
   17b1c:	mov	r7, #-2147483648	; 0x80000000
   17b20:	subs	r0, r0, r3
   17b24:	sbcs	r0, r1, ip
   17b28:	bge	17ad0 <__assert_fail@plt+0x6a48>
   17b2c:	b	17ae0 <__assert_fail@plt+0x6a58>
   17b30:	and	r0, r6, r7
   17b34:	cmn	r0, #1
   17b38:	beq	17b74 <__assert_fail@plt+0x6aec>
   17b3c:	mov	r0, #0
   17b40:	mov	r1, #-2147483648	; 0x80000000
   17b44:	mov	r2, r6
   17b48:	mov	r3, r7
   17b4c:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17b50:	ldr	r2, [sp, #24]
   17b54:	ldr	r3, [sp, #28]
   17b58:	mov	r4, #1
   17b5c:	mov	r9, #-2147483648	; 0x80000000
   17b60:	subs	r0, r0, r2
   17b64:	sbcs	r0, r1, r3
   17b68:	mov	r0, #0
   17b6c:	str	r0, [sp, #8]
   17b70:	blt	17e84 <__assert_fail@plt+0x6dfc>
   17b74:	umull	r1, r0, r6, r2
   17b78:	mov	r4, #0
   17b7c:	mla	r0, r6, r3, r0
   17b80:	mla	r9, r7, r2, r0
   17b84:	str	r1, [sp, #8]
   17b88:	cmp	r9, #0
   17b8c:	bmi	17e84 <__assert_fail@plt+0x6dfc>
   17b90:	ldr	r3, [sp, #28]
   17b94:	mvn	r0, #0
   17b98:	mvn	r1, #-2147483648	; 0x80000000
   17b9c:	str	r4, [sp, #4]
   17ba0:	mvn	r8, #0
   17ba4:	mvn	r4, #-2147483648	; 0x80000000
   17ba8:	bl	18e14 <__assert_fail@plt+0x7d8c>
   17bac:	ldr	r6, [sp, #8]
   17bb0:	ldr	r2, [sp, #24]
   17bb4:	ldr	r3, [sp, #28]
   17bb8:	mov	r7, #1
   17bbc:	subs	r0, r0, r6
   17bc0:	sbcs	r0, r1, r9
   17bc4:	bge	17ec0 <__assert_fail@plt+0x6e38>
   17bc8:	b	17ed8 <__assert_fail@plt+0x6e50>
   17bcc:	and	r0, r6, r7
   17bd0:	cmn	r0, #1
   17bd4:	beq	17bfc <__assert_fail@plt+0x6b74>
   17bd8:	mov	r0, #0
   17bdc:	mov	r1, #-2147483648	; 0x80000000
   17be0:	mov	r2, r6
   17be4:	mov	r3, r7
   17be8:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17bec:	ldr	r3, [sp, #28]
   17bf0:	subs	r0, r0, #1024	; 0x400
   17bf4:	sbcs	r0, r1, #0
   17bf8:	blt	17e54 <__assert_fail@plt+0x6dcc>
   17bfc:	lsl	r0, r7, #10
   17c00:	orr	r7, r0, r6, lsr #22
   17c04:	lsl	r6, r6, #10
   17c08:	b	185cc <__assert_fail@plt+0x7544>
   17c0c:	and	r0, r6, r7
   17c10:	cmn	r0, #1
   17c14:	beq	17c50 <__assert_fail@plt+0x6bc8>
   17c18:	mov	r0, #0
   17c1c:	mov	r1, #-2147483648	; 0x80000000
   17c20:	mov	r2, r6
   17c24:	mov	r3, r7
   17c28:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17c2c:	ldr	r2, [sp, #24]
   17c30:	ldr	r3, [sp, #28]
   17c34:	mov	r4, #1
   17c38:	mov	r9, #-2147483648	; 0x80000000
   17c3c:	subs	r0, r0, r2
   17c40:	sbcs	r0, r1, r3
   17c44:	mov	r0, #0
   17c48:	str	r0, [sp, #8]
   17c4c:	blt	1819c <__assert_fail@plt+0x7114>
   17c50:	umull	r1, r0, r6, r2
   17c54:	mov	r4, #0
   17c58:	mla	r0, r6, r3, r0
   17c5c:	mla	r9, r7, r2, r0
   17c60:	str	r1, [sp, #8]
   17c64:	cmp	r9, #0
   17c68:	bmi	1819c <__assert_fail@plt+0x7114>
   17c6c:	ldr	r3, [sp, #28]
   17c70:	mvn	r0, #0
   17c74:	mvn	r1, #-2147483648	; 0x80000000
   17c78:	str	r4, [sp, #4]
   17c7c:	mvn	r8, #0
   17c80:	mvn	r4, #-2147483648	; 0x80000000
   17c84:	bl	18e14 <__assert_fail@plt+0x7d8c>
   17c88:	ldr	r6, [sp, #8]
   17c8c:	ldr	r2, [sp, #24]
   17c90:	ldr	r3, [sp, #28]
   17c94:	mov	r7, #1
   17c98:	subs	r0, r0, r6
   17c9c:	sbcs	r0, r1, r9
   17ca0:	bge	181d8 <__assert_fail@plt+0x7150>
   17ca4:	b	181f0 <__assert_fail@plt+0x7168>
   17ca8:	and	r0, r6, r7
   17cac:	cmn	r0, #1
   17cb0:	beq	17cec <__assert_fail@plt+0x6c64>
   17cb4:	mov	r0, #0
   17cb8:	mov	r1, #-2147483648	; 0x80000000
   17cbc:	mov	r2, r6
   17cc0:	mov	r3, r7
   17cc4:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17cc8:	ldr	r2, [sp, #24]
   17ccc:	ldr	r3, [sp, #28]
   17cd0:	mov	r4, #1
   17cd4:	mov	r8, #-2147483648	; 0x80000000
   17cd8:	subs	r0, r0, r2
   17cdc:	sbcs	r0, r1, r3
   17ce0:	mov	r0, #0
   17ce4:	str	r0, [sp, #8]
   17ce8:	blt	18418 <__assert_fail@plt+0x7390>
   17cec:	umull	r1, r0, r6, r2
   17cf0:	mov	r4, #0
   17cf4:	mla	r0, r6, r3, r0
   17cf8:	mla	r8, r7, r2, r0
   17cfc:	str	r1, [sp, #8]
   17d00:	cmp	r8, #0
   17d04:	bmi	18418 <__assert_fail@plt+0x7390>
   17d08:	ldr	r3, [sp, #28]
   17d0c:	mvn	r0, #0
   17d10:	mvn	r1, #-2147483648	; 0x80000000
   17d14:	str	r4, [sp, #4]
   17d18:	mvn	r9, #0
   17d1c:	mvn	r4, #-2147483648	; 0x80000000
   17d20:	bl	18e14 <__assert_fail@plt+0x7d8c>
   17d24:	ldr	r6, [sp, #8]
   17d28:	ldr	r2, [sp, #24]
   17d2c:	ldr	r3, [sp, #28]
   17d30:	mov	r7, #1
   17d34:	subs	r0, r0, r6
   17d38:	sbcs	r0, r1, r8
   17d3c:	bge	18454 <__assert_fail@plt+0x73cc>
   17d40:	b	1846c <__assert_fail@plt+0x73e4>
   17d44:	and	r0, r6, r7
   17d48:	cmn	r0, #1
   17d4c:	beq	17d88 <__assert_fail@plt+0x6d00>
   17d50:	mov	r0, #0
   17d54:	mov	r1, #-2147483648	; 0x80000000
   17d58:	mov	r2, r6
   17d5c:	mov	r3, r7
   17d60:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17d64:	ldr	r2, [sp, #24]
   17d68:	ldr	r3, [sp, #28]
   17d6c:	mov	r4, #1
   17d70:	mov	r9, #-2147483648	; 0x80000000
   17d74:	subs	r0, r0, r2
   17d78:	sbcs	r0, r1, r3
   17d7c:	mov	r0, #0
   17d80:	str	r0, [sp, #8]
   17d84:	blt	18634 <__assert_fail@plt+0x75ac>
   17d88:	umull	r1, r0, r6, r2
   17d8c:	mov	r4, #0
   17d90:	mla	r0, r6, r3, r0
   17d94:	mla	r9, r7, r2, r0
   17d98:	str	r1, [sp, #8]
   17d9c:	cmp	r9, #0
   17da0:	bmi	18634 <__assert_fail@plt+0x75ac>
   17da4:	ldr	r3, [sp, #28]
   17da8:	mvn	r0, #0
   17dac:	mvn	r1, #-2147483648	; 0x80000000
   17db0:	str	r4, [sp]
   17db4:	mvn	r8, #-2147483648	; 0x80000000
   17db8:	str	r0, [sp, #4]
   17dbc:	mvn	r0, #0
   17dc0:	bl	18e14 <__assert_fail@plt+0x7d8c>
   17dc4:	ldr	r6, [sp, #8]
   17dc8:	ldr	r2, [sp, #24]
   17dcc:	ldr	r3, [sp, #28]
   17dd0:	mov	r7, #1
   17dd4:	subs	r0, r0, r6
   17dd8:	sbcs	r0, r1, r9
   17ddc:	bge	18674 <__assert_fail@plt+0x75ec>
   17de0:	b	18690 <__assert_fail@plt+0x7608>
   17de4:	and	r0, r6, r7
   17de8:	cmn	r0, #1
   17dec:	beq	17e14 <__assert_fail@plt+0x6d8c>
   17df0:	mov	r0, #0
   17df4:	mov	r1, #-2147483648	; 0x80000000
   17df8:	mov	r2, r6
   17dfc:	mov	r3, r7
   17e00:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17e04:	ldr	r3, [sp, #28]
   17e08:	subs	r0, r0, #512	; 0x200
   17e0c:	sbcs	r0, r1, #0
   17e10:	blt	17e54 <__assert_fail@plt+0x6dcc>
   17e14:	lsl	r0, r7, #9
   17e18:	orr	r7, r0, r6, lsr #23
   17e1c:	lsl	r6, r6, #9
   17e20:	b	185cc <__assert_fail@plt+0x7544>
   17e24:	and	r0, r6, r7
   17e28:	cmn	r0, #1
   17e2c:	beq	17e74 <__assert_fail@plt+0x6dec>
   17e30:	mov	r0, #0
   17e34:	mov	r1, #-2147483648	; 0x80000000
   17e38:	mov	r2, r6
   17e3c:	mov	r3, r7
   17e40:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17e44:	ldr	r3, [sp, #28]
   17e48:	subs	r0, r0, #2
   17e4c:	sbcs	r0, r1, #0
   17e50:	bge	17e74 <__assert_fail@plt+0x6dec>
   17e54:	cmp	r7, #0
   17e58:	mvn	r0, #-2147483648	; 0x80000000
   17e5c:	mvn	r6, #0
   17e60:	mov	r3, #1
   17e64:	movmi	r0, #-2147483648	; 0x80000000
   17e68:	movwmi	r6, #0
   17e6c:	mov	r7, r0
   17e70:	b	185cc <__assert_fail@plt+0x7544>
   17e74:	lsl	r0, r7, #1
   17e78:	orr	r7, r0, r6, lsr #31
   17e7c:	lsl	r6, r6, #1
   17e80:	b	185cc <__assert_fail@plt+0x7544>
   17e84:	ldr	r6, [sp, #8]
   17e88:	mov	r0, #0
   17e8c:	mov	r1, #-2147483648	; 0x80000000
   17e90:	mov	r3, r9
   17e94:	str	r4, [sp, #4]
   17e98:	mov	r2, r6
   17e9c:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17ea0:	ldr	r2, [sp, #24]
   17ea4:	ldr	r3, [sp, #28]
   17ea8:	mov	r7, #1
   17eac:	mov	r8, #0
   17eb0:	mov	r4, #-2147483648	; 0x80000000
   17eb4:	subs	r0, r0, r2
   17eb8:	sbcs	r0, r1, r3
   17ebc:	blt	17f10 <__assert_fail@plt+0x6e88>
   17ec0:	umull	r8, r0, r6, r2
   17ec4:	ldr	r7, [sp, #4]
   17ec8:	mla	r0, r6, r3, r0
   17ecc:	mla	r4, r9, r2, r0
   17ed0:	cmp	r4, #0
   17ed4:	bmi	17f10 <__assert_fail@plt+0x6e88>
   17ed8:	ldr	r3, [sp, #28]
   17edc:	mvn	r0, #0
   17ee0:	mvn	r1, #-2147483648	; 0x80000000
   17ee4:	str	r7, [sp, #8]
   17ee8:	mvn	r7, #0
   17eec:	mvn	r9, #-2147483648	; 0x80000000
   17ef0:	bl	18e14 <__assert_fail@plt+0x7d8c>
   17ef4:	ldr	r2, [sp, #24]
   17ef8:	ldr	r3, [sp, #28]
   17efc:	subs	r0, r0, r8
   17f00:	mov	r6, #1
   17f04:	sbcs	r0, r1, r4
   17f08:	bge	17f48 <__assert_fail@plt+0x6ec0>
   17f0c:	b	17f60 <__assert_fail@plt+0x6ed8>
   17f10:	mov	r0, #0
   17f14:	mov	r1, #-2147483648	; 0x80000000
   17f18:	mov	r2, r8
   17f1c:	mov	r3, r4
   17f20:	str	r7, [sp, #8]
   17f24:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17f28:	ldr	r2, [sp, #24]
   17f2c:	ldr	r3, [sp, #28]
   17f30:	mov	r6, #1
   17f34:	mov	r7, #0
   17f38:	mov	r9, #-2147483648	; 0x80000000
   17f3c:	subs	r0, r0, r2
   17f40:	sbcs	r0, r1, r3
   17f44:	blt	17fa0 <__assert_fail@plt+0x6f18>
   17f48:	umull	r7, r0, r8, r2
   17f4c:	ldr	r6, [sp, #8]
   17f50:	mla	r0, r8, r3, r0
   17f54:	mla	r9, r4, r2, r0
   17f58:	cmp	r9, #0
   17f5c:	bmi	17fa0 <__assert_fail@plt+0x6f18>
   17f60:	ldr	r3, [sp, #28]
   17f64:	mvn	r0, #0
   17f68:	mvn	r1, #-2147483648	; 0x80000000
   17f6c:	str	r6, [sp, #8]
   17f70:	mvn	r8, #0
   17f74:	mvn	r4, #-2147483648	; 0x80000000
   17f78:	bl	18e14 <__assert_fail@plt+0x7d8c>
   17f7c:	ldr	r2, [sp, #24]
   17f80:	ldr	r3, [sp, #28]
   17f84:	subs	r0, r0, r7
   17f88:	sbcs	r0, r1, r9
   17f8c:	bge	17fe4 <__assert_fail@plt+0x6f5c>
   17f90:	mov	r0, #1
   17f94:	mov	r6, #0
   17f98:	str	r0, [sp, #8]
   17f9c:	b	17ffc <__assert_fail@plt+0x6f74>
   17fa0:	mov	r0, #0
   17fa4:	mov	r1, #-2147483648	; 0x80000000
   17fa8:	mov	r2, r7
   17fac:	mov	r3, r9
   17fb0:	str	r6, [sp, #8]
   17fb4:	bl	18d40 <__assert_fail@plt+0x7cb8>
   17fb8:	ldr	r2, [sp, #24]
   17fbc:	ldr	r3, [sp, #28]
   17fc0:	subs	r0, r0, r2
   17fc4:	sbcs	r0, r1, r3
   17fc8:	bge	17fe4 <__assert_fail@plt+0x6f5c>
   17fcc:	mov	r0, #1
   17fd0:	mov	r8, #0
   17fd4:	mov	r4, #-2147483648	; 0x80000000
   17fd8:	mov	r6, #0
   17fdc:	str	r0, [sp, #8]
   17fe0:	b	18034 <__assert_fail@plt+0x6fac>
   17fe4:	umull	r8, r0, r7, r2
   17fe8:	mov	r6, #0
   17fec:	mla	r0, r7, r3, r0
   17ff0:	mla	r4, r9, r2, r0
   17ff4:	cmp	r4, #0
   17ff8:	bmi	18034 <__assert_fail@plt+0x6fac>
   17ffc:	ldr	r3, [sp, #28]
   18000:	mvn	r0, #0
   18004:	mvn	r1, #-2147483648	; 0x80000000
   18008:	mvn	r9, #0
   1800c:	mvn	r7, #-2147483648	; 0x80000000
   18010:	bl	18e14 <__assert_fail@plt+0x7d8c>
   18014:	ldr	r2, [sp, #24]
   18018:	ldr	r3, [sp, #28]
   1801c:	subs	r0, r0, r8
   18020:	sbcs	r0, r1, r4
   18024:	bge	18070 <__assert_fail@plt+0x6fe8>
   18028:	mov	r0, #1
   1802c:	str	r0, [sp, #8]
   18030:	b	18084 <__assert_fail@plt+0x6ffc>
   18034:	mov	r0, #0
   18038:	mov	r1, #-2147483648	; 0x80000000
   1803c:	mov	r2, r8
   18040:	mov	r3, r4
   18044:	bl	18d40 <__assert_fail@plt+0x7cb8>
   18048:	ldr	r2, [sp, #24]
   1804c:	ldr	r3, [sp, #28]
   18050:	subs	r0, r0, r2
   18054:	sbcs	r0, r1, r3
   18058:	bge	18070 <__assert_fail@plt+0x6fe8>
   1805c:	mov	r0, #1
   18060:	mov	r9, #0
   18064:	mov	r7, #-2147483648	; 0x80000000
   18068:	str	r0, [sp, #8]
   1806c:	b	180c0 <__assert_fail@plt+0x7038>
   18070:	umull	r9, r0, r8, r2
   18074:	mla	r0, r8, r3, r0
   18078:	mla	r7, r4, r2, r0
   1807c:	cmp	r7, #0
   18080:	bmi	180c0 <__assert_fail@plt+0x7038>
   18084:	ldr	r3, [sp, #28]
   18088:	mvn	r0, #0
   1808c:	mvn	r1, #-2147483648	; 0x80000000
   18090:	mvn	r8, #0
   18094:	mvn	r4, #-2147483648	; 0x80000000
   18098:	bl	18e14 <__assert_fail@plt+0x7d8c>
   1809c:	ldr	r2, [sp, #24]
   180a0:	ldr	r3, [sp, #28]
   180a4:	subs	r0, r0, r9
   180a8:	sbcs	r0, r1, r7
   180ac:	bge	18100 <__assert_fail@plt+0x7078>
   180b0:	ldr	r9, [sp, #12]
   180b4:	mov	r0, #1
   180b8:	str	r0, [sp, #8]
   180bc:	b	18118 <__assert_fail@plt+0x7090>
   180c0:	mov	r0, #0
   180c4:	mov	r1, #-2147483648	; 0x80000000
   180c8:	mov	r2, r9
   180cc:	mov	r3, r7
   180d0:	bl	18d40 <__assert_fail@plt+0x7cb8>
   180d4:	ldr	r2, [sp, #24]
   180d8:	ldr	r3, [sp, #28]
   180dc:	subs	r0, r0, r2
   180e0:	sbcs	r0, r1, r3
   180e4:	bge	18100 <__assert_fail@plt+0x7078>
   180e8:	ldr	r9, [sp, #12]
   180ec:	mov	r0, #1
   180f0:	mov	r8, #0
   180f4:	mov	r4, #-2147483648	; 0x80000000
   180f8:	str	r0, [sp, #8]
   180fc:	b	18168 <__assert_fail@plt+0x70e0>
   18100:	umull	r8, r0, r9, r2
   18104:	mla	r0, r9, r3, r0
   18108:	ldr	r9, [sp, #12]
   1810c:	mla	r4, r7, r2, r0
   18110:	cmp	r4, #0
   18114:	bmi	18168 <__assert_fail@plt+0x70e0>
   18118:	ldr	r3, [sp, #28]
   1811c:	mvn	r0, #0
   18120:	mvn	r1, #-2147483648	; 0x80000000
   18124:	mvn	r6, #0
   18128:	bl	18e14 <__assert_fail@plt+0x7d8c>
   1812c:	ldr	r7, [sp, #24]
   18130:	ldr	r3, [sp, #28]
   18134:	subs	r0, r0, r8
   18138:	mov	r2, #1
   1813c:	sbcs	r0, r1, r4
   18140:	mvn	r0, #-2147483648	; 0x80000000
   18144:	blt	18158 <__assert_fail@plt+0x70d0>
   18148:	umull	r6, r0, r8, r7
   1814c:	mov	r2, #0
   18150:	mla	r0, r8, r3, r0
   18154:	mla	r0, r4, r7, r0
   18158:	ldr	r1, [sp, #8]
   1815c:	mov	r7, r0
   18160:	orr	r3, r2, r1
   18164:	b	185cc <__assert_fail@plt+0x7544>
   18168:	mov	r0, #0
   1816c:	mov	r1, #-2147483648	; 0x80000000
   18170:	mov	r2, r8
   18174:	mov	r3, r4
   18178:	bl	18d40 <__assert_fail@plt+0x7cb8>
   1817c:	ldr	r7, [sp, #24]
   18180:	ldr	r3, [sp, #28]
   18184:	mov	r2, #1
   18188:	subs	r0, r0, r7
   1818c:	sbcs	r0, r1, r3
   18190:	mov	r0, #-2147483648	; 0x80000000
   18194:	bge	18148 <__assert_fail@plt+0x70c0>
   18198:	b	18158 <__assert_fail@plt+0x70d0>
   1819c:	ldr	r6, [sp, #8]
   181a0:	mov	r0, #0
   181a4:	mov	r1, #-2147483648	; 0x80000000
   181a8:	mov	r3, r9
   181ac:	str	r4, [sp, #4]
   181b0:	mov	r2, r6
   181b4:	bl	18d40 <__assert_fail@plt+0x7cb8>
   181b8:	ldr	r2, [sp, #24]
   181bc:	ldr	r3, [sp, #28]
   181c0:	mov	r7, #1
   181c4:	mov	r8, #0
   181c8:	mov	r4, #-2147483648	; 0x80000000
   181cc:	subs	r0, r0, r2
   181d0:	sbcs	r0, r1, r3
   181d4:	blt	1822c <__assert_fail@plt+0x71a4>
   181d8:	umull	r8, r0, r6, r2
   181dc:	ldr	r7, [sp, #4]
   181e0:	mla	r0, r6, r3, r0
   181e4:	mla	r4, r9, r2, r0
   181e8:	cmp	r4, #0
   181ec:	bmi	1822c <__assert_fail@plt+0x71a4>
   181f0:	ldr	r3, [sp, #28]
   181f4:	mvn	r0, #0
   181f8:	mvn	r1, #-2147483648	; 0x80000000
   181fc:	str	r7, [sp, #4]
   18200:	mvn	r7, #0
   18204:	mvn	r9, #-2147483648	; 0x80000000
   18208:	bl	18e14 <__assert_fail@plt+0x7d8c>
   1820c:	ldr	r2, [sp, #24]
   18210:	ldr	r3, [sp, #28]
   18214:	subs	r0, r0, r8
   18218:	mov	r6, #1
   1821c:	sbcs	r0, r1, r4
   18220:	str	r6, [sp, #8]
   18224:	bge	18268 <__assert_fail@plt+0x71e0>
   18228:	b	18284 <__assert_fail@plt+0x71fc>
   1822c:	mov	r0, #0
   18230:	mov	r1, #-2147483648	; 0x80000000
   18234:	mov	r2, r8
   18238:	mov	r3, r4
   1823c:	str	r7, [sp, #4]
   18240:	bl	18d40 <__assert_fail@plt+0x7cb8>
   18244:	ldr	r2, [sp, #24]
   18248:	ldr	r3, [sp, #28]
   1824c:	mov	r7, #1
   18250:	mov	r9, #-2147483648	; 0x80000000
   18254:	str	r7, [sp, #8]
   18258:	mov	r7, #0
   1825c:	subs	r0, r0, r2
   18260:	sbcs	r0, r1, r3
   18264:	blt	182bc <__assert_fail@plt+0x7234>
   18268:	umull	r7, r0, r8, r2
   1826c:	mla	r0, r8, r3, r0
   18270:	mla	r9, r4, r2, r0
   18274:	ldr	r0, [sp, #4]
   18278:	cmp	r9, #0
   1827c:	str	r0, [sp, #8]
   18280:	bmi	182bc <__assert_fail@plt+0x7234>
   18284:	ldr	r3, [sp, #28]
   18288:	mvn	r0, #0
   1828c:	mvn	r1, #-2147483648	; 0x80000000
   18290:	mvn	r4, #0
   18294:	mvn	r8, #-2147483648	; 0x80000000
   18298:	bl	18e14 <__assert_fail@plt+0x7d8c>
   1829c:	ldr	r2, [sp, #24]
   182a0:	ldr	r3, [sp, #28]
   182a4:	subs	r0, r0, r7
   182a8:	sbcs	r0, r1, r9
   182ac:	bge	182f8 <__assert_fail@plt+0x7270>
   182b0:	mov	r0, #1
   182b4:	str	r0, [sp, #8]
   182b8:	b	1830c <__assert_fail@plt+0x7284>
   182bc:	mov	r0, #0
   182c0:	mov	r1, #-2147483648	; 0x80000000
   182c4:	mov	r2, r7
   182c8:	mov	r3, r9
   182cc:	bl	18d40 <__assert_fail@plt+0x7cb8>
   182d0:	ldr	r2, [sp, #24]
   182d4:	ldr	r3, [sp, #28]
   182d8:	subs	r0, r0, r2
   182dc:	sbcs	r0, r1, r3
   182e0:	bge	182f8 <__assert_fail@plt+0x7270>
   182e4:	mov	r0, #1
   182e8:	mov	r4, #0
   182ec:	mov	r8, #-2147483648	; 0x80000000
   182f0:	str	r0, [sp, #8]
   182f4:	b	18340 <__assert_fail@plt+0x72b8>
   182f8:	umull	r4, r0, r7, r2
   182fc:	mla	r0, r7, r3, r0
   18300:	mla	r8, r9, r2, r0
   18304:	cmp	r8, #0
   18308:	bmi	18340 <__assert_fail@plt+0x72b8>
   1830c:	ldr	r3, [sp, #28]
   18310:	mvn	r0, #0
   18314:	mvn	r1, #-2147483648	; 0x80000000
   18318:	mvn	r6, #0
   1831c:	mvn	r9, #-2147483648	; 0x80000000
   18320:	bl	18e14 <__assert_fail@plt+0x7d8c>
   18324:	ldr	r2, [sp, #24]
   18328:	ldr	r3, [sp, #28]
   1832c:	subs	r0, r0, r4
   18330:	sbcs	r0, r1, r8
   18334:	bge	18378 <__assert_fail@plt+0x72f0>
   18338:	mov	r8, #1
   1833c:	b	18390 <__assert_fail@plt+0x7308>
   18340:	mov	r0, #0
   18344:	mov	r1, #-2147483648	; 0x80000000
   18348:	mov	r2, r4
   1834c:	mov	r3, r8
   18350:	bl	18d40 <__assert_fail@plt+0x7cb8>
   18354:	ldr	r2, [sp, #24]
   18358:	ldr	r3, [sp, #28]
   1835c:	subs	r0, r0, r2
   18360:	sbcs	r0, r1, r3
   18364:	bge	18378 <__assert_fail@plt+0x72f0>
   18368:	mov	r8, #1
   1836c:	mov	r6, #0
   18370:	mov	r9, #-2147483648	; 0x80000000
   18374:	b	183e0 <__assert_fail@plt+0x7358>
   18378:	umull	r6, r0, r4, r2
   1837c:	mla	r0, r4, r3, r0
   18380:	mla	r9, r8, r2, r0
   18384:	ldr	r8, [sp, #8]
   18388:	cmp	r9, #0
   1838c:	bmi	183e0 <__assert_fail@plt+0x7358>
   18390:	ldr	r3, [sp, #28]
   18394:	mvn	r0, #0
   18398:	mvn	r1, #-2147483648	; 0x80000000
   1839c:	mvn	r4, #0
   183a0:	mvn	r7, #-2147483648	; 0x80000000
   183a4:	bl	18e14 <__assert_fail@plt+0x7d8c>
   183a8:	ldr	r3, [sp, #24]
   183ac:	ldr	ip, [sp, #28]
   183b0:	subs	r0, r0, r6
   183b4:	mov	r2, #1
   183b8:	sbcs	r0, r1, r9
   183bc:	blt	183d0 <__assert_fail@plt+0x7348>
   183c0:	umull	r4, r0, r6, r3
   183c4:	mov	r2, #0
   183c8:	mla	r0, r6, ip, r0
   183cc:	mla	r7, r9, r3, r0
   183d0:	ldr	r9, [sp, #12]
   183d4:	orr	r3, r2, r8
   183d8:	mov	r6, r4
   183dc:	b	185cc <__assert_fail@plt+0x7544>
   183e0:	mov	r0, #0
   183e4:	mov	r1, #-2147483648	; 0x80000000
   183e8:	mov	r2, r6
   183ec:	mov	r3, r9
   183f0:	bl	18d40 <__assert_fail@plt+0x7cb8>
   183f4:	ldr	r3, [sp, #24]
   183f8:	ldr	ip, [sp, #28]
   183fc:	mov	r2, #1
   18400:	mov	r4, #0
   18404:	mov	r7, #-2147483648	; 0x80000000
   18408:	subs	r0, r0, r3
   1840c:	sbcs	r0, r1, ip
   18410:	bge	183c0 <__assert_fail@plt+0x7338>
   18414:	b	183d0 <__assert_fail@plt+0x7348>
   18418:	ldr	r6, [sp, #8]
   1841c:	mov	r0, #0
   18420:	mov	r1, #-2147483648	; 0x80000000
   18424:	mov	r3, r8
   18428:	str	r4, [sp, #4]
   1842c:	mov	r2, r6
   18430:	bl	18d40 <__assert_fail@plt+0x7cb8>
   18434:	ldr	r2, [sp, #24]
   18438:	ldr	r3, [sp, #28]
   1843c:	mov	r7, #1
   18440:	mov	r9, #0
   18444:	mov	r4, #-2147483648	; 0x80000000
   18448:	subs	r0, r0, r2
   1844c:	sbcs	r0, r1, r3
   18450:	blt	184a8 <__assert_fail@plt+0x7420>
   18454:	umull	r9, r0, r6, r2
   18458:	ldr	r7, [sp, #4]
   1845c:	mla	r0, r6, r3, r0
   18460:	mla	r4, r8, r2, r0
   18464:	cmp	r4, #0
   18468:	bmi	184a8 <__assert_fail@plt+0x7420>
   1846c:	ldr	r3, [sp, #28]
   18470:	mvn	r0, #0
   18474:	mvn	r1, #-2147483648	; 0x80000000
   18478:	str	r7, [sp, #4]
   1847c:	mvn	r8, #0
   18480:	mvn	r7, #-2147483648	; 0x80000000
   18484:	bl	18e14 <__assert_fail@plt+0x7d8c>
   18488:	ldr	r2, [sp, #24]
   1848c:	ldr	r3, [sp, #28]
   18490:	subs	r0, r0, r9
   18494:	mov	r6, #1
   18498:	sbcs	r0, r1, r4
   1849c:	str	r6, [sp, #8]
   184a0:	bge	184e4 <__assert_fail@plt+0x745c>
   184a4:	b	18500 <__assert_fail@plt+0x7478>
   184a8:	mov	r0, #0
   184ac:	mov	r1, #-2147483648	; 0x80000000
   184b0:	mov	r2, r9
   184b4:	mov	r3, r4
   184b8:	str	r7, [sp, #4]
   184bc:	bl	18d40 <__assert_fail@plt+0x7cb8>
   184c0:	ldr	r2, [sp, #24]
   184c4:	ldr	r3, [sp, #28]
   184c8:	mov	r7, #1
   184cc:	mov	r8, #0
   184d0:	str	r7, [sp, #8]
   184d4:	mov	r7, #-2147483648	; 0x80000000
   184d8:	subs	r0, r0, r2
   184dc:	sbcs	r0, r1, r3
   184e0:	blt	18534 <__assert_fail@plt+0x74ac>
   184e4:	umull	r8, r0, r9, r2
   184e8:	mla	r0, r9, r3, r0
   184ec:	mla	r7, r4, r2, r0
   184f0:	ldr	r0, [sp, #4]
   184f4:	cmp	r7, #0
   184f8:	str	r0, [sp, #8]
   184fc:	bmi	18534 <__assert_fail@plt+0x74ac>
   18500:	ldr	r3, [sp, #28]
   18504:	mvn	r0, #0
   18508:	mvn	r1, #-2147483648	; 0x80000000
   1850c:	mvn	r4, #0
   18510:	mvn	r9, #-2147483648	; 0x80000000
   18514:	bl	18e14 <__assert_fail@plt+0x7d8c>
   18518:	ldr	r2, [sp, #24]
   1851c:	ldr	r3, [sp, #28]
   18520:	subs	r0, r0, r8
   18524:	sbcs	r0, r1, r7
   18528:	bge	1856c <__assert_fail@plt+0x74e4>
   1852c:	mov	r8, #1
   18530:	b	18584 <__assert_fail@plt+0x74fc>
   18534:	mov	r0, #0
   18538:	mov	r1, #-2147483648	; 0x80000000
   1853c:	mov	r2, r8
   18540:	mov	r3, r7
   18544:	bl	18d40 <__assert_fail@plt+0x7cb8>
   18548:	ldr	r2, [sp, #24]
   1854c:	ldr	r3, [sp, #28]
   18550:	subs	r0, r0, r2
   18554:	sbcs	r0, r1, r3
   18558:	bge	1856c <__assert_fail@plt+0x74e4>
   1855c:	mov	r8, #1
   18560:	mov	r4, #0
   18564:	mov	r9, #-2147483648	; 0x80000000
   18568:	b	185fc <__assert_fail@plt+0x7574>
   1856c:	umull	r4, r0, r8, r2
   18570:	mla	r0, r8, r3, r0
   18574:	ldr	r8, [sp, #8]
   18578:	mla	r9, r7, r2, r0
   1857c:	cmp	r9, #0
   18580:	bmi	185fc <__assert_fail@plt+0x7574>
   18584:	ldr	r3, [sp, #28]
   18588:	mvn	r0, #0
   1858c:	mvn	r1, #-2147483648	; 0x80000000
   18590:	mvn	r6, #0
   18594:	mvn	r7, #-2147483648	; 0x80000000
   18598:	bl	18e14 <__assert_fail@plt+0x7d8c>
   1859c:	ldr	r3, [sp, #24]
   185a0:	ldr	ip, [sp, #28]
   185a4:	subs	r0, r0, r4
   185a8:	mov	r2, #1
   185ac:	sbcs	r0, r1, r9
   185b0:	blt	185c4 <__assert_fail@plt+0x753c>
   185b4:	umull	r6, r0, r4, r3
   185b8:	mov	r2, #0
   185bc:	mla	r0, r4, ip, r0
   185c0:	mla	r7, r9, r3, r0
   185c4:	ldr	r9, [sp, #12]
   185c8:	orr	r3, r2, r8
   185cc:	ldr	r1, [sp, #20]
   185d0:	ldr	r2, [sp, #16]
   185d4:	orr	r5, r3, r5
   185d8:	add	r0, r1, r2
   185dc:	str	r0, [sl]
   185e0:	ldrb	r0, [r1, r2]
   185e4:	cmp	r0, #0
   185e8:	orrne	r5, r5, #2
   185ec:	strd	r6, [r9]
   185f0:	mov	r0, r5
   185f4:	sub	sp, fp, #28
   185f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185fc:	mov	r0, #0
   18600:	mov	r1, #-2147483648	; 0x80000000
   18604:	mov	r2, r4
   18608:	mov	r3, r9
   1860c:	bl	18d40 <__assert_fail@plt+0x7cb8>
   18610:	ldr	r3, [sp, #24]
   18614:	ldr	ip, [sp, #28]
   18618:	mov	r2, #1
   1861c:	mov	r6, #0
   18620:	mov	r7, #-2147483648	; 0x80000000
   18624:	subs	r0, r0, r3
   18628:	sbcs	r0, r1, ip
   1862c:	bge	185b4 <__assert_fail@plt+0x752c>
   18630:	b	185c4 <__assert_fail@plt+0x753c>
   18634:	ldr	r6, [sp, #8]
   18638:	mov	r0, #0
   1863c:	mov	r1, #-2147483648	; 0x80000000
   18640:	mov	r3, r9
   18644:	str	r4, [sp]
   18648:	mov	r2, r6
   1864c:	bl	18d40 <__assert_fail@plt+0x7cb8>
   18650:	ldr	r2, [sp, #24]
   18654:	ldr	r3, [sp, #28]
   18658:	mov	r7, #1
   1865c:	mov	r8, #-2147483648	; 0x80000000
   18660:	subs	r0, r0, r2
   18664:	sbcs	r0, r1, r3
   18668:	mov	r0, #0
   1866c:	str	r0, [sp, #4]
   18670:	blt	186d0 <__assert_fail@plt+0x7648>
   18674:	umull	r1, r0, r6, r2
   18678:	ldr	r7, [sp]
   1867c:	mla	r0, r6, r3, r0
   18680:	mla	r8, r9, r2, r0
   18684:	str	r1, [sp, #4]
   18688:	cmp	r8, #0
   1868c:	bmi	186d0 <__assert_fail@plt+0x7648>
   18690:	ldr	r3, [sp, #28]
   18694:	mvn	r0, #0
   18698:	mvn	r1, #-2147483648	; 0x80000000
   1869c:	str	r7, [sp]
   186a0:	mvn	r7, #0
   186a4:	mvn	r4, #-2147483648	; 0x80000000
   186a8:	bl	18e14 <__assert_fail@plt+0x7d8c>
   186ac:	mov	r6, #1
   186b0:	ldr	r2, [sp, #24]
   186b4:	ldr	r3, [sp, #28]
   186b8:	str	r6, [sp, #8]
   186bc:	ldr	r6, [sp, #4]
   186c0:	subs	r0, r0, r6
   186c4:	sbcs	r0, r1, r8
   186c8:	bge	18710 <__assert_fail@plt+0x7688>
   186cc:	b	1872c <__assert_fail@plt+0x76a4>
   186d0:	ldr	r6, [sp, #4]
   186d4:	mov	r0, #0
   186d8:	mov	r1, #-2147483648	; 0x80000000
   186dc:	mov	r3, r8
   186e0:	str	r7, [sp]
   186e4:	mov	r2, r6
   186e8:	bl	18d40 <__assert_fail@plt+0x7cb8>
   186ec:	ldr	r2, [sp, #24]
   186f0:	ldr	r3, [sp, #28]
   186f4:	mov	r7, #1
   186f8:	mov	r4, #-2147483648	; 0x80000000
   186fc:	str	r7, [sp, #8]
   18700:	mov	r7, #0
   18704:	subs	r0, r0, r2
   18708:	sbcs	r0, r1, r3
   1870c:	blt	18764 <__assert_fail@plt+0x76dc>
   18710:	umull	r7, r0, r6, r2
   18714:	mla	r0, r6, r3, r0
   18718:	mla	r4, r8, r2, r0
   1871c:	ldr	r0, [sp]
   18720:	cmp	r4, #0
   18724:	str	r0, [sp, #8]
   18728:	bmi	18764 <__assert_fail@plt+0x76dc>
   1872c:	ldr	r3, [sp, #28]
   18730:	mvn	r0, #0
   18734:	mvn	r1, #-2147483648	; 0x80000000
   18738:	mvn	r9, #0
   1873c:	mvn	r8, #-2147483648	; 0x80000000
   18740:	bl	18e14 <__assert_fail@plt+0x7d8c>
   18744:	ldr	r2, [sp, #24]
   18748:	ldr	r3, [sp, #28]
   1874c:	subs	r0, r0, r7
   18750:	sbcs	r0, r1, r4
   18754:	bge	187a0 <__assert_fail@plt+0x7718>
   18758:	mov	r0, #1
   1875c:	str	r0, [sp, #8]
   18760:	b	187b4 <__assert_fail@plt+0x772c>
   18764:	mov	r0, #0
   18768:	mov	r1, #-2147483648	; 0x80000000
   1876c:	mov	r2, r7
   18770:	mov	r3, r4
   18774:	bl	18d40 <__assert_fail@plt+0x7cb8>
   18778:	ldr	r2, [sp, #24]
   1877c:	ldr	r3, [sp, #28]
   18780:	subs	r0, r0, r2
   18784:	sbcs	r0, r1, r3
   18788:	bge	187a0 <__assert_fail@plt+0x7718>
   1878c:	mov	r0, #1
   18790:	mov	r9, #0
   18794:	mov	r8, #-2147483648	; 0x80000000
   18798:	str	r0, [sp, #8]
   1879c:	b	187ec <__assert_fail@plt+0x7764>
   187a0:	umull	r9, r0, r7, r2
   187a4:	mla	r0, r7, r3, r0
   187a8:	mla	r8, r4, r2, r0
   187ac:	cmp	r8, #0
   187b0:	bmi	187ec <__assert_fail@plt+0x7764>
   187b4:	ldr	r3, [sp, #28]
   187b8:	mvn	r0, #0
   187bc:	mvn	r1, #-2147483648	; 0x80000000
   187c0:	mvn	r4, #0
   187c4:	mvn	r7, #-2147483648	; 0x80000000
   187c8:	bl	18e14 <__assert_fail@plt+0x7d8c>
   187cc:	ldr	r2, [sp, #24]
   187d0:	ldr	r3, [sp, #28]
   187d4:	subs	r0, r0, r9
   187d8:	sbcs	r0, r1, r8
   187dc:	bge	18828 <__assert_fail@plt+0x77a0>
   187e0:	mov	r0, #1
   187e4:	str	r0, [sp, #8]
   187e8:	b	1883c <__assert_fail@plt+0x77b4>
   187ec:	mov	r0, #0
   187f0:	mov	r1, #-2147483648	; 0x80000000
   187f4:	mov	r2, r9
   187f8:	mov	r3, r8
   187fc:	bl	18d40 <__assert_fail@plt+0x7cb8>
   18800:	ldr	r2, [sp, #24]
   18804:	ldr	r3, [sp, #28]
   18808:	subs	r0, r0, r2
   1880c:	sbcs	r0, r1, r3
   18810:	bge	18828 <__assert_fail@plt+0x77a0>
   18814:	mov	r0, #1
   18818:	mov	r4, #0
   1881c:	mov	r7, #-2147483648	; 0x80000000
   18820:	str	r0, [sp, #8]
   18824:	b	18874 <__assert_fail@plt+0x77ec>
   18828:	umull	r4, r0, r9, r2
   1882c:	mla	r0, r9, r3, r0
   18830:	mla	r7, r8, r2, r0
   18834:	cmp	r7, #0
   18838:	bmi	18874 <__assert_fail@plt+0x77ec>
   1883c:	ldr	r3, [sp, #28]
   18840:	mvn	r0, #0
   18844:	mvn	r1, #-2147483648	; 0x80000000
   18848:	mvn	r8, #0
   1884c:	mvn	r9, #-2147483648	; 0x80000000
   18850:	bl	18e14 <__assert_fail@plt+0x7d8c>
   18854:	ldr	r2, [sp, #24]
   18858:	ldr	r3, [sp, #28]
   1885c:	subs	r0, r0, r4
   18860:	sbcs	r0, r1, r7
   18864:	bge	188b0 <__assert_fail@plt+0x7828>
   18868:	mov	r0, #1
   1886c:	str	r0, [sp, #8]
   18870:	b	188c4 <__assert_fail@plt+0x783c>
   18874:	mov	r0, #0
   18878:	mov	r1, #-2147483648	; 0x80000000
   1887c:	mov	r2, r4
   18880:	mov	r3, r7
   18884:	bl	18d40 <__assert_fail@plt+0x7cb8>
   18888:	ldr	r2, [sp, #24]
   1888c:	ldr	r3, [sp, #28]
   18890:	subs	r0, r0, r2
   18894:	sbcs	r0, r1, r3
   18898:	bge	188b0 <__assert_fail@plt+0x7828>
   1889c:	mov	r0, #1
   188a0:	mov	r8, #0
   188a4:	mov	r9, #-2147483648	; 0x80000000
   188a8:	str	r0, [sp, #8]
   188ac:	b	18900 <__assert_fail@plt+0x7878>
   188b0:	umull	r8, r0, r4, r2
   188b4:	mla	r0, r4, r3, r0
   188b8:	mla	r9, r7, r2, r0
   188bc:	cmp	r9, #0
   188c0:	bmi	18900 <__assert_fail@plt+0x7878>
   188c4:	ldr	r3, [sp, #28]
   188c8:	mvn	r0, #0
   188cc:	mvn	r1, #-2147483648	; 0x80000000
   188d0:	mvn	r4, #0
   188d4:	mvn	r6, #-2147483648	; 0x80000000
   188d8:	bl	18e14 <__assert_fail@plt+0x7d8c>
   188dc:	ldr	r2, [sp, #24]
   188e0:	ldr	r3, [sp, #28]
   188e4:	subs	r0, r0, r8
   188e8:	sbcs	r0, r1, r9
   188ec:	bge	18940 <__assert_fail@plt+0x78b8>
   188f0:	ldr	r9, [sp, #12]
   188f4:	mov	r0, #1
   188f8:	str	r0, [sp, #8]
   188fc:	b	18958 <__assert_fail@plt+0x78d0>
   18900:	mov	r0, #0
   18904:	mov	r1, #-2147483648	; 0x80000000
   18908:	mov	r2, r8
   1890c:	mov	r3, r9
   18910:	bl	18d40 <__assert_fail@plt+0x7cb8>
   18914:	ldr	r2, [sp, #24]
   18918:	ldr	r3, [sp, #28]
   1891c:	subs	r0, r0, r2
   18920:	sbcs	r0, r1, r3
   18924:	bge	18940 <__assert_fail@plt+0x78b8>
   18928:	ldr	r9, [sp, #12]
   1892c:	mov	r0, #1
   18930:	mov	r4, #0
   18934:	mov	r6, #-2147483648	; 0x80000000
   18938:	str	r0, [sp, #8]
   1893c:	b	189a4 <__assert_fail@plt+0x791c>
   18940:	umull	r4, r0, r8, r2
   18944:	mla	r0, r8, r3, r0
   18948:	mla	r6, r9, r2, r0
   1894c:	ldr	r9, [sp, #12]
   18950:	cmp	r6, #0
   18954:	bmi	189a4 <__assert_fail@plt+0x791c>
   18958:	ldr	r3, [sp, #28]
   1895c:	mvn	r0, #0
   18960:	mvn	r1, #-2147483648	; 0x80000000
   18964:	mov	r8, r6
   18968:	mvn	r6, #0
   1896c:	mvn	r7, #-2147483648	; 0x80000000
   18970:	bl	18e14 <__assert_fail@plt+0x7d8c>
   18974:	ldr	r3, [sp, #24]
   18978:	ldr	ip, [sp, #28]
   1897c:	subs	r0, r0, r4
   18980:	mov	r2, #1
   18984:	sbcs	r0, r1, r8
   18988:	blt	1899c <__assert_fail@plt+0x7914>
   1898c:	umull	r6, r0, r4, r3
   18990:	mov	r2, #0
   18994:	mla	r0, r4, ip, r0
   18998:	mla	r7, r8, r3, r0
   1899c:	ldr	r0, [sp, #8]
   189a0:	b	17ae8 <__assert_fail@plt+0x6a60>
   189a4:	mov	r0, #0
   189a8:	mov	r1, #-2147483648	; 0x80000000
   189ac:	mov	r2, r4
   189b0:	mov	r3, r6
   189b4:	bl	18d40 <__assert_fail@plt+0x7cb8>
   189b8:	ldr	r3, [sp, #24]
   189bc:	ldr	ip, [sp, #28]
   189c0:	mov	r8, r6
   189c4:	mov	r2, #1
   189c8:	mov	r6, #0
   189cc:	mov	r7, #-2147483648	; 0x80000000
   189d0:	subs	r0, r0, r3
   189d4:	sbcs	r0, r1, ip
   189d8:	bge	1898c <__assert_fail@plt+0x7904>
   189dc:	b	1899c <__assert_fail@plt+0x7914>
   189e0:	movw	r0, #41613	; 0xa28d
   189e4:	movw	r1, #41651	; 0xa2b3
   189e8:	movw	r3, #41667	; 0xa2c3
   189ec:	mov	r2, #85	; 0x55
   189f0:	movt	r0, #1
   189f4:	movt	r1, #1
   189f8:	movt	r3, #1
   189fc:	bl	11088 <__assert_fail@plt>
   18a00:	clz	r2, r1
   18a04:	clz	r3, r0
   18a08:	lsr	r2, r2, #5
   18a0c:	lsr	r3, r3, #5
   18a10:	orrs	r2, r3, r2
   18a14:	movwne	r1, #1
   18a18:	movwne	r0, #1
   18a1c:	cmp	r1, #0
   18a20:	beq	18a50 <__assert_fail@plt+0x79c8>
   18a24:	mvn	r2, #-2147483648	; 0x80000000
   18a28:	udiv	r2, r2, r1
   18a2c:	cmp	r2, r0
   18a30:	bcs	18a50 <__assert_fail@plt+0x79c8>
   18a34:	push	{fp, lr}
   18a38:	mov	fp, sp
   18a3c:	bl	10fa4 <__errno_location@plt>
   18a40:	mov	r1, #12
   18a44:	str	r1, [r0]
   18a48:	mov	r0, #0
   18a4c:	pop	{fp, pc}
   18a50:	b	10e24 <calloc@plt>
   18a54:	cmp	r0, #0
   18a58:	movweq	r0, #1
   18a5c:	cmn	r0, #1
   18a60:	ble	18a68 <__assert_fail@plt+0x79e0>
   18a64:	b	10f2c <malloc@plt>
   18a68:	push	{fp, lr}
   18a6c:	mov	fp, sp
   18a70:	bl	10fa4 <__errno_location@plt>
   18a74:	mov	r1, #12
   18a78:	str	r1, [r0]
   18a7c:	mov	r0, #0
   18a80:	pop	{fp, pc}
   18a84:	push	{fp, lr}
   18a88:	mov	fp, sp
   18a8c:	cmp	r0, #0
   18a90:	beq	18aac <__assert_fail@plt+0x7a24>
   18a94:	cmp	r1, #0
   18a98:	beq	18ab8 <__assert_fail@plt+0x7a30>
   18a9c:	cmn	r1, #1
   18aa0:	ble	18ac4 <__assert_fail@plt+0x7a3c>
   18aa4:	pop	{fp, lr}
   18aa8:	b	10ec0 <realloc@plt>
   18aac:	mov	r0, r1
   18ab0:	pop	{fp, lr}
   18ab4:	b	18a54 <__assert_fail@plt+0x79cc>
   18ab8:	bl	143b4 <__assert_fail@plt+0x332c>
   18abc:	mov	r0, #0
   18ac0:	pop	{fp, pc}
   18ac4:	bl	10fa4 <__errno_location@plt>
   18ac8:	mov	r1, #12
   18acc:	str	r1, [r0]
   18ad0:	mov	r0, #0
   18ad4:	pop	{fp, pc}
   18ad8:	push	{r4, r5, r6, sl, fp, lr}
   18adc:	add	fp, sp, #16
   18ae0:	mov	r4, r0
   18ae4:	bl	10f08 <__fpending@plt>
   18ae8:	ldr	r6, [r4]
   18aec:	mov	r5, r0
   18af0:	mov	r0, r4
   18af4:	bl	142bc <__assert_fail@plt+0x3234>
   18af8:	tst	r6, #32
   18afc:	bne	18b34 <__assert_fail@plt+0x7aac>
   18b00:	cmp	r0, #0
   18b04:	mov	r4, r0
   18b08:	mvnne	r4, #0
   18b0c:	cmp	r5, #0
   18b10:	bne	18b40 <__assert_fail@plt+0x7ab8>
   18b14:	cmp	r0, #0
   18b18:	beq	18b40 <__assert_fail@plt+0x7ab8>
   18b1c:	bl	10fa4 <__errno_location@plt>
   18b20:	ldr	r0, [r0]
   18b24:	subs	r4, r0, #9
   18b28:	mvnne	r4, #0
   18b2c:	mov	r0, r4
   18b30:	pop	{r4, r5, r6, sl, fp, pc}
   18b34:	mvn	r4, #0
   18b38:	cmp	r0, #0
   18b3c:	beq	18b48 <__assert_fail@plt+0x7ac0>
   18b40:	mov	r0, r4
   18b44:	pop	{r4, r5, r6, sl, fp, pc}
   18b48:	bl	10fa4 <__errno_location@plt>
   18b4c:	mov	r1, #0
   18b50:	str	r1, [r0]
   18b54:	mov	r0, r4
   18b58:	pop	{r4, r5, r6, sl, fp, pc}
   18b5c:	push	{fp, lr}
   18b60:	mov	fp, sp
   18b64:	mov	r0, #14
   18b68:	bl	11034 <nl_langinfo@plt>
   18b6c:	movw	r1, #38863	; 0x97cf
   18b70:	cmp	r0, #0
   18b74:	movt	r1, #1
   18b78:	movne	r1, r0
   18b7c:	movw	r0, #41745	; 0xa311
   18b80:	ldrb	r2, [r1]
   18b84:	movt	r0, #1
   18b88:	cmp	r2, #0
   18b8c:	movne	r0, r1
   18b90:	pop	{fp, pc}
   18b94:	push	{r4, r5, r6, r7, fp, lr}
   18b98:	add	fp, sp, #16
   18b9c:	sub	sp, sp, #8
   18ba0:	cmp	r0, #0
   18ba4:	add	r5, sp, #4
   18ba8:	mov	r7, r2
   18bac:	mov	r4, r1
   18bb0:	movne	r5, r0
   18bb4:	mov	r0, r5
   18bb8:	bl	10f14 <mbrtowc@plt>
   18bbc:	mov	r6, r0
   18bc0:	cmp	r7, #0
   18bc4:	beq	18bec <__assert_fail@plt+0x7b64>
   18bc8:	cmn	r6, #2
   18bcc:	bcc	18bec <__assert_fail@plt+0x7b64>
   18bd0:	mov	r0, #0
   18bd4:	bl	18c34 <__assert_fail@plt+0x7bac>
   18bd8:	cmp	r0, #0
   18bdc:	bne	18bec <__assert_fail@plt+0x7b64>
   18be0:	ldrb	r0, [r4]
   18be4:	mov	r6, #1
   18be8:	str	r0, [r5]
   18bec:	mov	r0, r6
   18bf0:	sub	sp, fp, #16
   18bf4:	pop	{r4, r5, r6, r7, fp, pc}
   18bf8:	cmp	r2, #0
   18bfc:	beq	18c2c <__assert_fail@plt+0x7ba4>
   18c00:	mvn	r3, #0
   18c04:	udiv	r3, r3, r2
   18c08:	cmp	r3, r1
   18c0c:	bcs	18c2c <__assert_fail@plt+0x7ba4>
   18c10:	push	{fp, lr}
   18c14:	mov	fp, sp
   18c18:	bl	10fa4 <__errno_location@plt>
   18c1c:	mov	r1, #12
   18c20:	str	r1, [r0]
   18c24:	mov	r0, #0
   18c28:	pop	{fp, pc}
   18c2c:	mul	r1, r2, r1
   18c30:	b	18a84 <__assert_fail@plt+0x79fc>
   18c34:	push	{r4, sl, fp, lr}
   18c38:	add	fp, sp, #8
   18c3c:	sub	sp, sp, #264	; 0x108
   18c40:	add	r1, sp, #7
   18c44:	movw	r2, #257	; 0x101
   18c48:	bl	18ca0 <__assert_fail@plt+0x7c18>
   18c4c:	mov	r4, #0
   18c50:	cmp	r0, #0
   18c54:	bne	18c94 <__assert_fail@plt+0x7c0c>
   18c58:	movw	r1, #41751	; 0xa317
   18c5c:	add	r0, sp, #7
   18c60:	mov	r2, #2
   18c64:	movt	r1, #1
   18c68:	bl	10f80 <bcmp@plt>
   18c6c:	cmp	r0, #0
   18c70:	beq	18c94 <__assert_fail@plt+0x7c0c>
   18c74:	movw	r1, #41753	; 0xa319
   18c78:	add	r0, sp, #7
   18c7c:	mov	r2, #6
   18c80:	movt	r1, #1
   18c84:	bl	10f80 <bcmp@plt>
   18c88:	cmp	r0, #0
   18c8c:	mov	r4, r0
   18c90:	movwne	r4, #1
   18c94:	mov	r0, r4
   18c98:	sub	sp, fp, #8
   18c9c:	pop	{r4, sl, fp, pc}
   18ca0:	push	{r4, r5, r6, r7, fp, lr}
   18ca4:	add	fp, sp, #16
   18ca8:	mov	r4, r1
   18cac:	mov	r1, #0
   18cb0:	mov	r6, r2
   18cb4:	bl	1101c <setlocale@plt>
   18cb8:	cmp	r0, #0
   18cbc:	beq	18cec <__assert_fail@plt+0x7c64>
   18cc0:	mov	r7, r0
   18cc4:	bl	10f8c <strlen@plt>
   18cc8:	cmp	r0, r6
   18ccc:	bcs	18d08 <__assert_fail@plt+0x7c80>
   18cd0:	add	r2, r0, #1
   18cd4:	mov	r0, r4
   18cd8:	mov	r1, r7
   18cdc:	bl	10e90 <memcpy@plt>
   18ce0:	mov	r5, #0
   18ce4:	mov	r0, r5
   18ce8:	pop	{r4, r5, r6, r7, fp, pc}
   18cec:	mov	r5, #22
   18cf0:	cmp	r6, #0
   18cf4:	beq	18d30 <__assert_fail@plt+0x7ca8>
   18cf8:	mov	r0, #0
   18cfc:	strb	r0, [r4]
   18d00:	mov	r0, r5
   18d04:	pop	{r4, r5, r6, r7, fp, pc}
   18d08:	mov	r5, #34	; 0x22
   18d0c:	cmp	r6, #0
   18d10:	beq	18d30 <__assert_fail@plt+0x7ca8>
   18d14:	sub	r6, r6, #1
   18d18:	mov	r0, r4
   18d1c:	mov	r1, r7
   18d20:	mov	r2, r6
   18d24:	bl	10e90 <memcpy@plt>
   18d28:	mov	r0, #0
   18d2c:	strb	r0, [r4, r6]
   18d30:	mov	r0, r5
   18d34:	pop	{r4, r5, r6, r7, fp, pc}
   18d38:	mov	r1, #0
   18d3c:	b	1101c <setlocale@plt>
   18d40:	cmp	r3, #0
   18d44:	cmpeq	r2, #0
   18d48:	bne	18d6c <__assert_fail@plt+0x7ce4>
   18d4c:	cmp	r1, #0
   18d50:	movlt	r1, #-2147483648	; 0x80000000
   18d54:	movlt	r0, #0
   18d58:	blt	18d68 <__assert_fail@plt+0x7ce0>
   18d5c:	cmpeq	r0, #0
   18d60:	mvnne	r1, #-2147483648	; 0x80000000
   18d64:	mvnne	r0, #0
   18d68:	b	18e50 <__assert_fail@plt+0x7dc8>
   18d6c:	sub	sp, sp, #8
   18d70:	push	{sp, lr}
   18d74:	cmp	r1, #0
   18d78:	blt	18d98 <__assert_fail@plt+0x7d10>
   18d7c:	cmp	r3, #0
   18d80:	blt	18dcc <__assert_fail@plt+0x7d44>
   18d84:	bl	18e60 <__assert_fail@plt+0x7dd8>
   18d88:	ldr	lr, [sp, #4]
   18d8c:	add	sp, sp, #8
   18d90:	pop	{r2, r3}
   18d94:	bx	lr
   18d98:	rsbs	r0, r0, #0
   18d9c:	sbc	r1, r1, r1, lsl #1
   18da0:	cmp	r3, #0
   18da4:	blt	18df0 <__assert_fail@plt+0x7d68>
   18da8:	bl	18e60 <__assert_fail@plt+0x7dd8>
   18dac:	ldr	lr, [sp, #4]
   18db0:	add	sp, sp, #8
   18db4:	pop	{r2, r3}
   18db8:	rsbs	r0, r0, #0
   18dbc:	sbc	r1, r1, r1, lsl #1
   18dc0:	rsbs	r2, r2, #0
   18dc4:	sbc	r3, r3, r3, lsl #1
   18dc8:	bx	lr
   18dcc:	rsbs	r2, r2, #0
   18dd0:	sbc	r3, r3, r3, lsl #1
   18dd4:	bl	18e60 <__assert_fail@plt+0x7dd8>
   18dd8:	ldr	lr, [sp, #4]
   18ddc:	add	sp, sp, #8
   18de0:	pop	{r2, r3}
   18de4:	rsbs	r0, r0, #0
   18de8:	sbc	r1, r1, r1, lsl #1
   18dec:	bx	lr
   18df0:	rsbs	r2, r2, #0
   18df4:	sbc	r3, r3, r3, lsl #1
   18df8:	bl	18e60 <__assert_fail@plt+0x7dd8>
   18dfc:	ldr	lr, [sp, #4]
   18e00:	add	sp, sp, #8
   18e04:	pop	{r2, r3}
   18e08:	rsbs	r2, r2, #0
   18e0c:	sbc	r3, r3, r3, lsl #1
   18e10:	bx	lr
   18e14:	cmp	r3, #0
   18e18:	cmpeq	r2, #0
   18e1c:	bne	18e34 <__assert_fail@plt+0x7dac>
   18e20:	cmp	r1, #0
   18e24:	cmpeq	r0, #0
   18e28:	mvnne	r1, #0
   18e2c:	mvnne	r0, #0
   18e30:	b	18e50 <__assert_fail@plt+0x7dc8>
   18e34:	sub	sp, sp, #8
   18e38:	push	{sp, lr}
   18e3c:	bl	18e60 <__assert_fail@plt+0x7dd8>
   18e40:	ldr	lr, [sp, #4]
   18e44:	add	sp, sp, #8
   18e48:	pop	{r2, r3}
   18e4c:	bx	lr
   18e50:	push	{r1, lr}
   18e54:	mov	r0, #8
   18e58:	bl	10e3c <raise@plt>
   18e5c:	pop	{r1, pc}
   18e60:	cmp	r1, r3
   18e64:	cmpeq	r0, r2
   18e68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e6c:	mov	r4, r0
   18e70:	movcc	r0, #0
   18e74:	mov	r5, r1
   18e78:	ldr	lr, [sp, #36]	; 0x24
   18e7c:	movcc	r1, r0
   18e80:	bcc	18f7c <__assert_fail@plt+0x7ef4>
   18e84:	cmp	r3, #0
   18e88:	clzeq	ip, r2
   18e8c:	clzne	ip, r3
   18e90:	addeq	ip, ip, #32
   18e94:	cmp	r5, #0
   18e98:	clzeq	r1, r4
   18e9c:	addeq	r1, r1, #32
   18ea0:	clzne	r1, r5
   18ea4:	sub	ip, ip, r1
   18ea8:	sub	sl, ip, #32
   18eac:	lsl	r9, r3, ip
   18eb0:	rsb	fp, ip, #32
   18eb4:	orr	r9, r9, r2, lsl sl
   18eb8:	orr	r9, r9, r2, lsr fp
   18ebc:	lsl	r8, r2, ip
   18ec0:	cmp	r5, r9
   18ec4:	cmpeq	r4, r8
   18ec8:	movcc	r0, #0
   18ecc:	movcc	r1, r0
   18ed0:	bcc	18eec <__assert_fail@plt+0x7e64>
   18ed4:	mov	r0, #1
   18ed8:	subs	r4, r4, r8
   18edc:	lsl	r1, r0, sl
   18ee0:	orr	r1, r1, r0, lsr fp
   18ee4:	lsl	r0, r0, ip
   18ee8:	sbc	r5, r5, r9
   18eec:	cmp	ip, #0
   18ef0:	beq	18f7c <__assert_fail@plt+0x7ef4>
   18ef4:	lsr	r6, r8, #1
   18ef8:	orr	r6, r6, r9, lsl #31
   18efc:	lsr	r7, r9, #1
   18f00:	mov	r2, ip
   18f04:	b	18f28 <__assert_fail@plt+0x7ea0>
   18f08:	subs	r3, r4, r6
   18f0c:	sbc	r8, r5, r7
   18f10:	adds	r3, r3, r3
   18f14:	adc	r8, r8, r8
   18f18:	adds	r4, r3, #1
   18f1c:	adc	r5, r8, #0
   18f20:	subs	r2, r2, #1
   18f24:	beq	18f44 <__assert_fail@plt+0x7ebc>
   18f28:	cmp	r5, r7
   18f2c:	cmpeq	r4, r6
   18f30:	bcs	18f08 <__assert_fail@plt+0x7e80>
   18f34:	adds	r4, r4, r4
   18f38:	adc	r5, r5, r5
   18f3c:	subs	r2, r2, #1
   18f40:	bne	18f28 <__assert_fail@plt+0x7ea0>
   18f44:	lsr	r3, r4, ip
   18f48:	orr	r3, r3, r5, lsl fp
   18f4c:	lsr	r2, r5, ip
   18f50:	orr	r3, r3, r5, lsr sl
   18f54:	adds	r0, r0, r4
   18f58:	mov	r4, r3
   18f5c:	lsl	r3, r2, ip
   18f60:	orr	r3, r3, r4, lsl sl
   18f64:	lsl	ip, r4, ip
   18f68:	orr	r3, r3, r4, lsr fp
   18f6c:	adc	r1, r1, r5
   18f70:	subs	r0, r0, ip
   18f74:	mov	r5, r2
   18f78:	sbc	r1, r1, r3
   18f7c:	cmp	lr, #0
   18f80:	strdne	r4, [lr]
   18f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f8c:	mov	r7, r0
   18f90:	ldr	r6, [pc, #72]	; 18fe0 <__assert_fail@plt+0x7f58>
   18f94:	ldr	r5, [pc, #72]	; 18fe4 <__assert_fail@plt+0x7f5c>
   18f98:	add	r6, pc, r6
   18f9c:	add	r5, pc, r5
   18fa0:	sub	r6, r6, r5
   18fa4:	mov	r8, r1
   18fa8:	mov	r9, r2
   18fac:	bl	10e04 <calloc@plt-0x20>
   18fb0:	asrs	r6, r6, #2
   18fb4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18fb8:	mov	r4, #0
   18fbc:	add	r4, r4, #1
   18fc0:	ldr	r3, [r5], #4
   18fc4:	mov	r2, r9
   18fc8:	mov	r1, r8
   18fcc:	mov	r0, r7
   18fd0:	blx	r3
   18fd4:	cmp	r6, r4
   18fd8:	bne	18fbc <__assert_fail@plt+0x7f34>
   18fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18fe0:	andeq	r1, r1, ip, ror #30
   18fe4:	andeq	r1, r1, r4, ror #30
   18fe8:	bx	lr
   18fec:	ldr	r3, [pc, #12]	; 19000 <__assert_fail@plt+0x7f78>
   18ff0:	mov	r1, #0
   18ff4:	add	r3, pc, r3
   18ff8:	ldr	r2, [r3]
   18ffc:	b	10fb0 <__cxa_atexit@plt>
   19000:	andeq	r2, r1, r8, ror #1

Disassembly of section .fini:

00019004 <.fini>:
   19004:	push	{r3, lr}
   19008:	pop	{r3, pc}
