
../repos/coreutils/src/csplit:     file format elf32-littlearm


Disassembly of section .init:

00011178 <.init>:
   11178:	push	{r3, lr}
   1117c:	bl	12464 <__assert_fail@plt+0xf0c>
   11180:	pop	{r3, pc}

Disassembly of section .plt:

00011184 <pthread_mutex_unlock@plt-0x14>:
   11184:	push	{lr}		; (str lr, [sp, #-4]!)
   11188:	ldr	lr, [pc, #4]	; 11194 <pthread_mutex_unlock@plt-0x4>
   1118c:	add	lr, pc, lr
   11190:	ldr	pc, [lr, #8]!
   11194:	andeq	r5, r2, ip, ror #28

00011198 <pthread_mutex_unlock@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #151552	; 0x25000
   111a0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111a4 <fdopen@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #151552	; 0x25000
   111ac:	ldr	pc, [ip, #3684]!	; 0xe64

000111b0 <calloc@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #151552	; 0x25000
   111b8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111bc <fputs_unlocked@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #151552	; 0x25000
   111c4:	ldr	pc, [ip, #3668]!	; 0xe54

000111c8 <wctype@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #151552	; 0x25000
   111d0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111d4 <raise@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #151552	; 0x25000
   111dc:	ldr	pc, [ip, #3652]!	; 0xe44

000111e0 <wcrtomb@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #151552	; 0x25000
   111e8:	ldr	pc, [ip, #3644]!	; 0xe3c

000111ec <iswctype@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #151552	; 0x25000
   111f4:	ldr	pc, [ip, #3636]!	; 0xe34

000111f8 <strcmp@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #151552	; 0x25000
   11200:	ldr	pc, [ip, #3628]!	; 0xe2c

00011204 <read@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #151552	; 0x25000
   1120c:	ldr	pc, [ip, #3620]!	; 0xe24

00011210 <pthread_mutex_destroy@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #151552	; 0x25000
   11218:	ldr	pc, [ip, #3612]!	; 0xe1c

0001121c <fflush@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #151552	; 0x25000
   11224:	ldr	pc, [ip, #3604]!	; 0xe14

00011228 <sigprocmask@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #151552	; 0x25000
   11230:	ldr	pc, [ip, #3596]!	; 0xe0c

00011234 <memmove@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #151552	; 0x25000
   1123c:	ldr	pc, [ip, #3588]!	; 0xe04

00011240 <free@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #151552	; 0x25000
   11248:	ldr	pc, [ip, #3580]!	; 0xdfc

0001124c <pthread_mutex_lock@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #151552	; 0x25000
   11254:	ldr	pc, [ip, #3572]!	; 0xdf4

00011258 <_exit@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #151552	; 0x25000
   11260:	ldr	pc, [ip, #3564]!	; 0xdec

00011264 <memcpy@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #151552	; 0x25000
   1126c:	ldr	pc, [ip, #3556]!	; 0xde4

00011270 <pthread_mutex_init@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #151552	; 0x25000
   11278:	ldr	pc, [ip, #3548]!	; 0xddc

0001127c <__strtoull_internal@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #151552	; 0x25000
   11284:	ldr	pc, [ip, #3540]!	; 0xdd4

00011288 <towlower@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #151552	; 0x25000
   11290:	ldr	pc, [ip, #3532]!	; 0xdcc

00011294 <mbsinit@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #151552	; 0x25000
   1129c:	ldr	pc, [ip, #3524]!	; 0xdc4

000112a0 <signal@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #151552	; 0x25000
   112a8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112ac <fwrite_unlocked@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #151552	; 0x25000
   112b4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112b8 <memcmp@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #151552	; 0x25000
   112c0:	ldr	pc, [ip, #3500]!	; 0xdac

000112c4 <fputc_unlocked@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #151552	; 0x25000
   112cc:	ldr	pc, [ip, #3492]!	; 0xda4

000112d0 <dcgettext@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #151552	; 0x25000
   112d8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112dc <unlink@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #151552	; 0x25000
   112e4:	ldr	pc, [ip, #3476]!	; 0xd94

000112e8 <dup2@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #151552	; 0x25000
   112f0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112f4 <realloc@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #151552	; 0x25000
   112fc:	ldr	pc, [ip, #3460]!	; 0xd84

00011300 <sigismember@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #151552	; 0x25000
   11308:	ldr	pc, [ip, #3452]!	; 0xd7c

0001130c <textdomain@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #151552	; 0x25000
   11314:	ldr	pc, [ip, #3444]!	; 0xd74

00011318 <rawmemchr@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #151552	; 0x25000
   11320:	ldr	pc, [ip, #3436]!	; 0xd6c

00011324 <iswprint@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #151552	; 0x25000
   1132c:	ldr	pc, [ip, #3428]!	; 0xd64

00011330 <sigaction@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #151552	; 0x25000
   11338:	ldr	pc, [ip, #3420]!	; 0xd5c

0001133c <fwrite@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #151552	; 0x25000
   11344:	ldr	pc, [ip, #3412]!	; 0xd54

00011348 <lseek64@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #151552	; 0x25000
   11350:	ldr	pc, [ip, #3404]!	; 0xd4c

00011354 <__ctype_get_mb_cur_max@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #151552	; 0x25000
   1135c:	ldr	pc, [ip, #3396]!	; 0xd44

00011360 <strcpy@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #151552	; 0x25000
   11368:	ldr	pc, [ip, #3388]!	; 0xd3c

0001136c <__fpending@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #151552	; 0x25000
   11374:	ldr	pc, [ip, #3380]!	; 0xd34

00011378 <mbrtowc@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #151552	; 0x25000
   11380:	ldr	pc, [ip, #3372]!	; 0xd2c

00011384 <error@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #151552	; 0x25000
   1138c:	ldr	pc, [ip, #3364]!	; 0xd24

00011390 <open64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #151552	; 0x25000
   11398:	ldr	pc, [ip, #3356]!	; 0xd1c

0001139c <malloc@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #151552	; 0x25000
   113a4:	ldr	pc, [ip, #3348]!	; 0xd14

000113a8 <sigaddset@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #151552	; 0x25000
   113b0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113b4 <__libc_start_main@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #151552	; 0x25000
   113bc:	ldr	pc, [ip, #3332]!	; 0xd04

000113c0 <__freading@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #151552	; 0x25000
   113c8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113cc <__ctype_tolower_loc@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #151552	; 0x25000
   113d4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113d8 <__ctype_toupper_loc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #151552	; 0x25000
   113e0:	ldr	pc, [ip, #3308]!	; 0xcec

000113e4 <__gmon_start__@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #151552	; 0x25000
   113ec:	ldr	pc, [ip, #3300]!	; 0xce4

000113f0 <getopt_long@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #151552	; 0x25000
   113f8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113fc <__ctype_b_loc@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #151552	; 0x25000
   11404:	ldr	pc, [ip, #3284]!	; 0xcd4

00011408 <exit@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #151552	; 0x25000
   11410:	ldr	pc, [ip, #3276]!	; 0xccc

00011414 <strlen@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #151552	; 0x25000
   1141c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011420 <strchr@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #151552	; 0x25000
   11428:	ldr	pc, [ip, #3260]!	; 0xcbc

0001142c <__errno_location@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #151552	; 0x25000
   11434:	ldr	pc, [ip, #3252]!	; 0xcb4

00011438 <iswalnum@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #151552	; 0x25000
   11440:	ldr	pc, [ip, #3244]!	; 0xcac

00011444 <__sprintf_chk@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #151552	; 0x25000
   1144c:	ldr	pc, [ip, #3236]!	; 0xca4

00011450 <__cxa_atexit@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #151552	; 0x25000
   11458:	ldr	pc, [ip, #3228]!	; 0xc9c

0001145c <memset@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #151552	; 0x25000
   11464:	ldr	pc, [ip, #3220]!	; 0xc94

00011468 <btowc@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #151552	; 0x25000
   11470:	ldr	pc, [ip, #3212]!	; 0xc8c

00011474 <__printf_chk@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #151552	; 0x25000
   1147c:	ldr	pc, [ip, #3204]!	; 0xc84

00011480 <fileno@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #151552	; 0x25000
   11488:	ldr	pc, [ip, #3196]!	; 0xc7c

0001148c <__fprintf_chk@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #151552	; 0x25000
   11494:	ldr	pc, [ip, #3188]!	; 0xc74

00011498 <fclose@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #151552	; 0x25000
   114a0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114a4 <fseeko64@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #151552	; 0x25000
   114ac:	ldr	pc, [ip, #3172]!	; 0xc64

000114b0 <fcntl64@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #151552	; 0x25000
   114b8:	ldr	pc, [ip, #3164]!	; 0xc5c

000114bc <setlocale@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #151552	; 0x25000
   114c4:	ldr	pc, [ip, #3156]!	; 0xc54

000114c8 <sigemptyset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #151552	; 0x25000
   114d0:	ldr	pc, [ip, #3148]!	; 0xc4c

000114d4 <strrchr@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #151552	; 0x25000
   114dc:	ldr	pc, [ip, #3140]!	; 0xc44

000114e0 <nl_langinfo@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #151552	; 0x25000
   114e8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114ec <fputc@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #151552	; 0x25000
   114f4:	ldr	pc, [ip, #3124]!	; 0xc34

000114f8 <__strtoll_internal@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #151552	; 0x25000
   11500:	ldr	pc, [ip, #3116]!	; 0xc2c

00011504 <fopen64@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #151552	; 0x25000
   1150c:	ldr	pc, [ip, #3108]!	; 0xc24

00011510 <bindtextdomain@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #151552	; 0x25000
   11518:	ldr	pc, [ip, #3100]!	; 0xc1c

0001151c <towupper@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #151552	; 0x25000
   11524:	ldr	pc, [ip, #3092]!	; 0xc14

00011528 <strncmp@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #151552	; 0x25000
   11530:	ldr	pc, [ip, #3084]!	; 0xc0c

00011534 <abort@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #151552	; 0x25000
   1153c:	ldr	pc, [ip, #3076]!	; 0xc04

00011540 <close@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #151552	; 0x25000
   11548:	ldr	pc, [ip, #3068]!	; 0xbfc

0001154c <__snprintf_chk@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #151552	; 0x25000
   11554:	ldr	pc, [ip, #3060]!	; 0xbf4

00011558 <__assert_fail@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #151552	; 0x25000
   11560:	ldr	pc, [ip, #3052]!	; 0xbec

Disassembly of section .text:

00011564 <.text>:
   11564:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11568:	mov	fp, r0
   1156c:	sub	sp, sp, #204	; 0xcc
   11570:	ldr	r0, [r1]
   11574:	mov	r4, r1
   11578:	bl	13ad0 <__assert_fail@plt+0x2578>
   1157c:	ldr	r1, [pc, #3568]	; 12374 <__assert_fail@plt+0xe1c>
   11580:	mov	r0, #6
   11584:	bl	114bc <setlocale@plt>
   11588:	ldr	r1, [pc, #3560]	; 12378 <__assert_fail@plt+0xe20>
   1158c:	ldr	r0, [pc, #3560]	; 1237c <__assert_fail@plt+0xe24>
   11590:	bl	11510 <bindtextdomain@plt>
   11594:	ldr	r0, [pc, #3552]	; 1237c <__assert_fail@plt+0xe24>
   11598:	ldr	sl, [pc, #3552]	; 12380 <__assert_fail@plt+0xe28>
   1159c:	bl	1130c <textdomain@plt>
   115a0:	ldr	r7, [pc, #3548]	; 12384 <__assert_fail@plt+0xe2c>
   115a4:	ldr	r0, [pc, #3548]	; 12388 <__assert_fail@plt+0xe30>
   115a8:	ldr	r6, [pc, #3548]	; 1238c <__assert_fail@plt+0xe34>
   115ac:	ldr	r8, [pc, #3548]	; 12390 <__assert_fail@plt+0xe38>
   115b0:	ldr	r9, [pc, #3548]	; 12394 <__assert_fail@plt+0xe3c>
   115b4:	bl	253f4 <__assert_fail@plt+0x13e9c>
   115b8:	ldr	r2, [pc, #3544]	; 12398 <__assert_fail@plt+0xe40>
   115bc:	mov	r3, #0
   115c0:	mov	r1, #1
   115c4:	strb	r1, [sl, #156]	; 0x9c
   115c8:	str	r4, [sl, #216]	; 0xd8
   115cc:	str	r3, [sl, #20]
   115d0:	str	r2, [sl, #4]
   115d4:	str	r3, [sl, #12]
   115d8:	strb	r3, [sl, #177]	; 0xb1
   115dc:	strb	r3, [sl, #220]	; 0xdc
   115e0:	mov	r5, #0
   115e4:	str	r5, [sp]
   115e8:	mov	r3, r7
   115ec:	mov	r2, r6
   115f0:	mov	r1, r4
   115f4:	mov	r0, fp
   115f8:	bl	113f0 <getopt_long@plt>
   115fc:	cmn	r0, #1
   11600:	beq	11760 <__assert_fail@plt+0x208>
   11604:	cmp	r0, #107	; 0x6b
   11608:	beq	11758 <__assert_fail@plt+0x200>
   1160c:	bgt	11638 <__assert_fail@plt+0xe0>
   11610:	cmn	r0, #2
   11614:	beq	11750 <__assert_fail@plt+0x1f8>
   11618:	ble	11710 <__assert_fail@plt+0x1b8>
   1161c:	cmp	r0, #98	; 0x62
   11620:	beq	116c0 <__assert_fail@plt+0x168>
   11624:	cmp	r0, #102	; 0x66
   11628:	bne	11708 <__assert_fail@plt+0x1b0>
   1162c:	ldr	r3, [r8]
   11630:	str	r3, [sl, #4]
   11634:	b	115e0 <__assert_fail@plt+0x88>
   11638:	cmp	r0, #115	; 0x73
   1163c:	beq	116d4 <__assert_fail@plt+0x17c>
   11640:	ble	11660 <__assert_fail@plt+0x108>
   11644:	cmp	r0, #122	; 0x7a
   11648:	beq	116b4 <__assert_fail@plt+0x15c>
   1164c:	cmp	r0, #256	; 0x100
   11650:	bne	11708 <__assert_fail@plt+0x1b0>
   11654:	mov	r3, #1
   11658:	strb	r3, [sl, #220]	; 0xdc
   1165c:	b	115e0 <__assert_fail@plt+0x88>
   11660:	cmp	r0, #110	; 0x6e
   11664:	bne	116cc <__assert_fail@plt+0x174>
   11668:	ldr	r3, [r8]
   1166c:	mov	r2, #5
   11670:	ldr	r1, [pc, #3364]	; 1239c <__assert_fail@plt+0xe44>
   11674:	mov	r0, r5
   11678:	str	r3, [sp, #24]
   1167c:	bl	112d0 <dcgettext@plt>
   11680:	ldr	r2, [pc, #3308]	; 12374 <__assert_fail@plt+0xe1c>
   11684:	mov	r3, #0
   11688:	str	r2, [sp, #8]
   1168c:	mvn	r2, #-2147483648	; 0x80000000
   11690:	str	r5, [sp, #16]
   11694:	strd	r2, [sp]
   11698:	mov	r2, #0
   1169c:	mov	r3, #0
   116a0:	str	r0, [sp, #12]
   116a4:	ldr	r0, [sp, #24]
   116a8:	bl	23acc <__assert_fail@plt+0x12574>
   116ac:	str	r0, [r9]
   116b0:	b	115e0 <__assert_fail@plt+0x88>
   116b4:	mov	r3, #1
   116b8:	strb	r3, [sl, #176]	; 0xb0
   116bc:	b	115e0 <__assert_fail@plt+0x88>
   116c0:	ldr	r3, [r8]
   116c4:	str	r3, [sl, #8]
   116c8:	b	115e0 <__assert_fail@plt+0x88>
   116cc:	cmp	r0, #113	; 0x71
   116d0:	bne	11708 <__assert_fail@plt+0x1b0>
   116d4:	mov	r3, #1
   116d8:	strb	r3, [sl, #177]	; 0xb1
   116dc:	b	115e0 <__assert_fail@plt+0x88>
   116e0:	cmp	fp, r3
   116e4:	mov	r2, #5
   116e8:	bgt	12340 <__assert_fail@plt+0xde8>
   116ec:	ldr	r1, [pc, #3244]	; 123a0 <__assert_fail@plt+0xe48>
   116f0:	mov	r0, r5
   116f4:	bl	112d0 <dcgettext@plt>
   116f8:	mov	r1, r5
   116fc:	mov	r2, r0
   11700:	mov	r0, r5
   11704:	bl	11384 <error@plt>
   11708:	mov	r0, #1
   1170c:	bl	13298 <__assert_fail@plt+0x1d40>
   11710:	cmn	r0, #3
   11714:	bne	11708 <__assert_fail@plt+0x1b0>
   11718:	ldr	r3, [pc, #3204]	; 123a4 <__assert_fail@plt+0xe4c>
   1171c:	ldr	r0, [pc, #3204]	; 123a8 <__assert_fail@plt+0xe50>
   11720:	ldr	r1, [pc, #3204]	; 123ac <__assert_fail@plt+0xe54>
   11724:	ldr	r2, [pc, #3204]	; 123b0 <__assert_fail@plt+0xe58>
   11728:	str	r5, [sp, #8]
   1172c:	ldr	r0, [r0]
   11730:	ldr	r3, [r3]
   11734:	str	r1, [sp, #4]
   11738:	str	r2, [sp]
   1173c:	ldr	r1, [pc, #3184]	; 123b4 <__assert_fail@plt+0xe5c>
   11740:	ldr	r2, [pc, #3184]	; 123b8 <__assert_fail@plt+0xe60>
   11744:	bl	23340 <__assert_fail@plt+0x11de8>
   11748:	mov	r0, r5
   1174c:	bl	11408 <exit@plt>
   11750:	mov	r0, r5
   11754:	bl	13298 <__assert_fail@plt+0x1d40>
   11758:	strb	r5, [sl, #156]	; 0x9c
   1175c:	b	115e0 <__assert_fail@plt+0x88>
   11760:	ldr	r6, [pc, #3156]	; 123bc <__assert_fail@plt+0xe64>
   11764:	ldr	r3, [r6]
   11768:	sub	r2, fp, r3
   1176c:	cmp	r2, #1
   11770:	ble	116e0 <__assert_fail@plt+0x188>
   11774:	ldr	r0, [sl, #4]
   11778:	bl	11414 <strlen@plt>
   1177c:	ldr	r3, [sl, #8]
   11780:	cmp	r3, #0
   11784:	mov	r7, r0
   11788:	beq	118e4 <__assert_fail@plt+0x38c>
   1178c:	ldr	r0, [sl, #8]
   11790:	mov	ip, #1
   11794:	mov	r2, r0
   11798:	mov	r9, #2
   1179c:	mov	lr, #100	; 0x64
   117a0:	b	117a8 <__assert_fail@plt+0x250>
   117a4:	add	r2, r2, #1
   117a8:	ldrb	r1, [r2]
   117ac:	cmp	r1, #0
   117b0:	beq	1203c <__assert_fail@plt+0xae4>
   117b4:	cmp	r1, #37	; 0x25
   117b8:	bne	117a4 <__assert_fail@plt+0x24c>
   117bc:	ldrb	r3, [r2, #1]
   117c0:	add	r1, r2, #1
   117c4:	cmp	r3, #37	; 0x25
   117c8:	beq	118dc <__assert_fail@plt+0x384>
   117cc:	cmp	r5, #0
   117d0:	bne	12334 <__assert_fail@plt+0xddc>
   117d4:	mov	r2, r1
   117d8:	ldrb	r3, [r1], #1
   117dc:	cmp	r3, #39	; 0x27
   117e0:	beq	1186c <__assert_fail@plt+0x314>
   117e4:	bhi	11858 <__assert_fail@plt+0x300>
   117e8:	cmp	r3, #35	; 0x23
   117ec:	bne	117fc <__assert_fail@plt+0x2a4>
   117f0:	orr	r5, r5, #2
   117f4:	b	117d4 <__assert_fail@plt+0x27c>
   117f8:	ldrb	r3, [r2, #1]!
   117fc:	sub	r1, r3, #48	; 0x30
   11800:	cmp	r1, #9
   11804:	bls	117f8 <__assert_fail@plt+0x2a0>
   11808:	cmp	r3, #46	; 0x2e
   1180c:	beq	118c8 <__assert_fail@plt+0x370>
   11810:	ldrb	r8, [r2]
   11814:	cmp	r8, #105	; 0x69
   11818:	beq	12078 <__assert_fail@plt+0xb20>
   1181c:	bhi	11874 <__assert_fail@plt+0x31c>
   11820:	cmp	r8, #88	; 0x58
   11824:	beq	1208c <__assert_fail@plt+0xb34>
   11828:	cmp	r8, #100	; 0x64
   1182c:	beq	12078 <__assert_fail@plt+0xb20>
   11830:	cmp	r8, #0
   11834:	bne	1188c <__assert_fail@plt+0x334>
   11838:	ldr	r1, [pc, #2944]	; 123c0 <__assert_fail@plt+0xe68>
   1183c:	mov	r2, #5
   11840:	mov	r0, #0
   11844:	bl	112d0 <dcgettext@plt>
   11848:	mov	r1, #0
   1184c:	mov	r2, r0
   11850:	mov	r0, #1
   11854:	bl	11384 <error@plt>
   11858:	cmp	r3, #45	; 0x2d
   1185c:	beq	117d4 <__assert_fail@plt+0x27c>
   11860:	cmp	r3, #48	; 0x30
   11864:	beq	117d4 <__assert_fail@plt+0x27c>
   11868:	b	117fc <__assert_fail@plt+0x2a4>
   1186c:	orr	r5, r5, #1
   11870:	b	117d4 <__assert_fail@plt+0x27c>
   11874:	cmp	r8, #117	; 0x75
   11878:	beq	120ec <__assert_fail@plt+0xb94>
   1187c:	cmp	r8, #120	; 0x78
   11880:	beq	1208c <__assert_fail@plt+0xb34>
   11884:	cmp	r8, #111	; 0x6f
   11888:	beq	1208c <__assert_fail@plt+0xb34>
   1188c:	bl	113fc <__ctype_b_loc@plt>
   11890:	lsl	r3, r8, #1
   11894:	ldr	r2, [r0]
   11898:	mov	r0, #0
   1189c:	ldrh	r4, [r2, r3]
   118a0:	mov	r2, #5
   118a4:	ands	r4, r4, #16384	; 0x4000
   118a8:	ldreq	r1, [pc, #2836]	; 123c4 <__assert_fail@plt+0xe6c>
   118ac:	ldrne	r1, [pc, #2836]	; 123c8 <__assert_fail@plt+0xe70>
   118b0:	bl	112d0 <dcgettext@plt>
   118b4:	mov	r3, r8
   118b8:	mov	r1, #0
   118bc:	mov	r2, r0
   118c0:	mov	r0, #1
   118c4:	bl	11384 <error@plt>
   118c8:	ldrb	r3, [r2, #1]!
   118cc:	sub	r3, r3, #48	; 0x30
   118d0:	cmp	r3, #9
   118d4:	bls	118c8 <__assert_fail@plt+0x370>
   118d8:	b	11810 <__assert_fail@plt+0x2b8>
   118dc:	mov	r2, r1
   118e0:	b	117a4 <__assert_fail@plt+0x24c>
   118e4:	ldr	r3, [pc, #2728]	; 12394 <__assert_fail@plt+0xe3c>
   118e8:	ldr	r2, [r3]
   118ec:	cmp	r2, #10
   118f0:	bls	11f50 <__assert_fail@plt+0x9f8>
   118f4:	ldr	r0, [r3]
   118f8:	cmn	r0, #1
   118fc:	bge	11f54 <__assert_fail@plt+0x9fc>
   11900:	mvn	r3, #-2147483648	; 0x80000000
   11904:	sub	r3, r3, r0
   11908:	cmp	r7, r3
   1190c:	movge	r3, #0
   11910:	movlt	r3, #1
   11914:	cmp	r3, #0
   11918:	beq	11920 <__assert_fail@plt+0x3c8>
   1191c:	bl	12c28 <__assert_fail@plt+0x16d0>
   11920:	add	r7, r7, #1
   11924:	add	r0, r7, r0
   11928:	bl	23450 <__assert_fail@plt+0x11ef8>
   1192c:	ldr	r3, [r6]
   11930:	ldr	r1, [pc, #2708]	; 123cc <__assert_fail@plt+0xe74>
   11934:	add	r2, r3, #1
   11938:	ldr	r5, [r4, r3, lsl #2]
   1193c:	str	r2, [r6]
   11940:	str	r0, [sl]
   11944:	mov	r0, r5
   11948:	bl	111f8 <strcmp@plt>
   1194c:	cmp	r0, #0
   11950:	bne	12094 <__assert_fail@plt+0xb3c>
   11954:	ldr	r9, [r6]
   11958:	cmp	fp, r9
   1195c:	ble	11ae0 <__assert_fail@plt+0x588>
   11960:	str	fp, [sp, #32]
   11964:	mov	fp, r4
   11968:	ldr	r6, [fp, r9, lsl #2]
   1196c:	lsl	r5, r9, #2
   11970:	add	r8, fp, r5
   11974:	ldrb	r4, [r6]
   11978:	sub	r2, r4, #37	; 0x25
   1197c:	clz	r2, r2
   11980:	lsr	r2, r2, #5
   11984:	cmp	r4, #47	; 0x2f
   11988:	movne	r7, r2
   1198c:	orreq	r7, r2, #1
   11990:	cmp	r7, #0
   11994:	str	r2, [sp, #24]
   11998:	beq	11b98 <__assert_fail@plt+0x640>
   1199c:	add	r8, r6, #1
   119a0:	mov	r0, r8
   119a4:	mov	r1, r4
   119a8:	bl	114d4 <strrchr@plt>
   119ac:	ldr	r2, [sp, #24]
   119b0:	subs	r7, r0, #0
   119b4:	beq	121e4 <__assert_fail@plt+0xc8c>
   119b8:	str	r2, [sp, #24]
   119bc:	bl	125e8 <__assert_fail@plt+0x1090>
   119c0:	ldr	r2, [sp, #24]
   119c4:	mov	r3, #0
   119c8:	str	r3, [sp, #24]
   119cc:	strb	r2, [r0, #29]
   119d0:	mov	r2, #1
   119d4:	mov	r4, r0
   119d8:	strb	r2, [r0, #30]
   119dc:	str	r3, [r0, #32]
   119e0:	str	r3, [r0, #36]	; 0x24
   119e4:	str	r9, [r0, #24]
   119e8:	mov	r0, #256	; 0x100
   119ec:	bl	2343c <__assert_fail@plt+0x11ee4>
   119f0:	ldr	r3, [sp, #24]
   119f4:	ldr	ip, [pc, #2516]	; 123d0 <__assert_fail@plt+0xe78>
   119f8:	str	r3, [r4, #52]	; 0x34
   119fc:	ldr	r3, [pc, #2512]	; 123d4 <__assert_fail@plt+0xe7c>
   11a00:	sub	r1, r7, r6
   11a04:	sub	r1, r1, #1
   11a08:	add	r2, r4, #32
   11a0c:	str	ip, [r3]
   11a10:	str	r0, [r4, #48]	; 0x30
   11a14:	mov	r0, r8
   11a18:	bl	224a0 <__assert_fail@plt+0x10f48>
   11a1c:	ldr	r3, [sp, #24]
   11a20:	subs	r8, r0, #0
   11a24:	bne	122a4 <__assert_fail@plt+0xd4c>
   11a28:	ldrb	r3, [r7, #1]
   11a2c:	cmp	r3, #0
   11a30:	bne	11c14 <__assert_fail@plt+0x6bc>
   11a34:	ldr	r2, [sp, #32]
   11a38:	add	r3, r9, #1
   11a3c:	cmp	r2, r3
   11a40:	ble	11ae0 <__assert_fail@plt+0x588>
   11a44:	add	r5, r5, #4
   11a48:	ldr	r6, [fp, r5]
   11a4c:	ldrb	r2, [r6]
   11a50:	cmp	r2, #123	; 0x7b
   11a54:	beq	11a60 <__assert_fail@plt+0x508>
   11a58:	mov	r9, r3
   11a5c:	b	11968 <__assert_fail@plt+0x410>
   11a60:	mov	r0, r6
   11a64:	bl	11414 <strlen@plt>
   11a68:	sub	r7, r0, #1
   11a6c:	add	r3, r6, r7
   11a70:	ldrb	r2, [r6, r7]
   11a74:	cmp	r2, #125	; 0x7d
   11a78:	bne	121c8 <__assert_fail@plt+0xc70>
   11a7c:	sub	r3, r3, #1
   11a80:	add	r0, r6, #1
   11a84:	cmp	r0, r3
   11a88:	mov	r3, #0
   11a8c:	strb	r3, [r6, r7]
   11a90:	beq	11de8 <__assert_fail@plt+0x890>
   11a94:	ldr	r3, [pc, #2264]	; 12374 <__assert_fail@plt+0xe1c>
   11a98:	mov	r2, #10
   11a9c:	str	r3, [sp]
   11aa0:	mov	r1, #0
   11aa4:	add	r3, sp, #56	; 0x38
   11aa8:	bl	241a4 <__assert_fail@plt+0x12c4c>
   11aac:	cmp	r0, #0
   11ab0:	bne	12274 <__assert_fail@plt+0xd1c>
   11ab4:	ldrd	r2, [sp, #56]	; 0x38
   11ab8:	cmp	r2, #0
   11abc:	sbcs	r1, r3, #0
   11ac0:	blt	12274 <__assert_fail@plt+0xd1c>
   11ac4:	strd	r2, [r4, #16]
   11ac8:	ldr	r2, [sp, #32]
   11acc:	add	r3, r9, #2
   11ad0:	cmp	r2, r3
   11ad4:	mov	r2, #125	; 0x7d
   11ad8:	strb	r2, [r6, r7]
   11adc:	bgt	11a58 <__assert_fail@plt+0x500>
   11ae0:	ldr	r0, [pc, #2288]	; 123d8 <__assert_fail@plt+0xe80>
   11ae4:	bl	114c8 <sigemptyset@plt>
   11ae8:	mov	r4, #0
   11aec:	ldr	r5, [pc, #2280]	; 123dc <__assert_fail@plt+0xe84>
   11af0:	ldr	r7, [pc, #2272]	; 123d8 <__assert_fail@plt+0xe80>
   11af4:	mov	r6, r4
   11af8:	ldr	r8, [r5, r4, lsl #2]
   11afc:	add	r2, sp, #56	; 0x38
   11b00:	mov	r0, r8
   11b04:	mov	r1, r6
   11b08:	bl	11330 <sigaction@plt>
   11b0c:	ldr	r3, [sp, #56]	; 0x38
   11b10:	cmp	r3, #1
   11b14:	beq	11b24 <__assert_fail@plt+0x5cc>
   11b18:	mov	r1, r8
   11b1c:	mov	r0, r7
   11b20:	bl	113a8 <sigaddset@plt>
   11b24:	add	r4, r4, #1
   11b28:	cmp	r4, #11
   11b2c:	bne	11af8 <__assert_fail@plt+0x5a0>
   11b30:	ldr	r3, [pc, #2216]	; 123e0 <__assert_fail@plt+0xe88>
   11b34:	mov	r2, #128	; 0x80
   11b38:	ldr	r1, [pc, #2200]	; 123d8 <__assert_fail@plt+0xe80>
   11b3c:	add	r0, sp, #60	; 0x3c
   11b40:	str	r3, [sp, #56]	; 0x38
   11b44:	bl	11264 <memcpy@plt>
   11b48:	mov	r3, #0
   11b4c:	mov	r4, r3
   11b50:	ldr	r7, [pc, #2176]	; 123d8 <__assert_fail@plt+0xe80>
   11b54:	mov	r8, r3
   11b58:	str	r3, [sp, #188]	; 0xbc
   11b5c:	b	11b6c <__assert_fail@plt+0x614>
   11b60:	add	r4, r4, #1
   11b64:	cmp	r4, #11
   11b68:	beq	11ca0 <__assert_fail@plt+0x748>
   11b6c:	ldr	r6, [r5, r4, lsl #2]
   11b70:	mov	r0, r7
   11b74:	mov	r1, r6
   11b78:	bl	11300 <sigismember@plt>
   11b7c:	cmp	r0, #0
   11b80:	beq	11b60 <__assert_fail@plt+0x608>
   11b84:	mov	r0, r6
   11b88:	mov	r2, r8
   11b8c:	add	r1, sp, #56	; 0x38
   11b90:	bl	11330 <sigaction@plt>
   11b94:	b	11b60 <__assert_fail@plt+0x608>
   11b98:	bl	125e8 <__assert_fail@plt+0x1090>
   11b9c:	ldr	r3, [pc, #2000]	; 12374 <__assert_fail@plt+0xe1c>
   11ba0:	mov	r1, r7
   11ba4:	mov	r2, #10
   11ba8:	mov	r4, r0
   11bac:	ldr	r0, [fp, r9, lsl #2]
   11bb0:	str	r9, [r4, #24]
   11bb4:	str	r3, [sp]
   11bb8:	add	r3, sp, #48	; 0x30
   11bbc:	bl	241a4 <__assert_fail@plt+0x12c4c>
   11bc0:	subs	r3, r0, #0
   11bc4:	str	r3, [sp, #24]
   11bc8:	bne	12140 <__assert_fail@plt+0xbe8>
   11bcc:	ldrd	r6, [sp, #48]	; 0x30
   11bd0:	cmp	r6, #0
   11bd4:	sbcs	r3, r7, #0
   11bd8:	blt	12140 <__assert_fail@plt+0xbe8>
   11bdc:	orrs	r3, r6, r7
   11be0:	beq	12170 <__assert_fail@plt+0xc18>
   11be4:	ldrd	r2, [sl, #224]	; 0xe0
   11be8:	cmp	r7, r3
   11bec:	cmpeq	r6, r2
   11bf0:	bcc	12234 <__assert_fail@plt+0xcdc>
   11bf4:	movne	r2, r6
   11bf8:	movne	r3, r7
   11bfc:	beq	11c68 <__assert_fail@plt+0x710>
   11c00:	str	r2, [sl, #224]	; 0xe0
   11c04:	str	r3, [sl, #228]	; 0xe4
   11c08:	str	r2, [r4, #8]
   11c0c:	str	r3, [r4, #12]
   11c10:	b	11a34 <__assert_fail@plt+0x4dc>
   11c14:	ldr	r3, [pc, #1880]	; 12374 <__assert_fail@plt+0xe1c>
   11c18:	add	r0, r7, #1
   11c1c:	str	r3, [sp]
   11c20:	mov	r2, #10
   11c24:	mov	r3, r4
   11c28:	mov	r1, r8
   11c2c:	bl	23c2c <__assert_fail@plt+0x126d4>
   11c30:	cmp	r0, #0
   11c34:	beq	11a34 <__assert_fail@plt+0x4dc>
   11c38:	mov	r2, #5
   11c3c:	ldr	r1, [pc, #1952]	; 123e4 <__assert_fail@plt+0xe8c>
   11c40:	mov	r0, r8
   11c44:	bl	112d0 <dcgettext@plt>
   11c48:	mov	r4, r0
   11c4c:	mov	r0, r6
   11c50:	bl	15990 <__assert_fail@plt+0x4438>
   11c54:	mov	r2, r4
   11c58:	mov	r1, r8
   11c5c:	mov	r3, r0
   11c60:	mov	r0, #1
   11c64:	bl	11384 <error@plt>
   11c68:	mov	r2, #5
   11c6c:	ldr	r1, [pc, #1908]	; 123e8 <__assert_fail@plt+0xe90>
   11c70:	bl	112d0 <dcgettext@plt>
   11c74:	mov	r6, r0
   11c78:	ldr	r0, [fp, r5]
   11c7c:	bl	15990 <__assert_fail@plt+0x4438>
   11c80:	ldr	r1, [sp, #24]
   11c84:	mov	r2, r6
   11c88:	mov	r3, r0
   11c8c:	mov	r0, r1
   11c90:	bl	11384 <error@plt>
   11c94:	ldr	r2, [sp, #48]	; 0x30
   11c98:	ldr	r3, [sp, #52]	; 0x34
   11c9c:	b	11c00 <__assert_fail@plt+0x6a8>
   11ca0:	mov	r3, #0
   11ca4:	str	r3, [sp, #40]	; 0x28
   11ca8:	ldr	r3, [sl, #12]
   11cac:	ldr	r2, [sp, #40]	; 0x28
   11cb0:	cmp	r2, r3
   11cb4:	bge	12110 <__assert_fail@plt+0xbb8>
   11cb8:	ldr	r2, [sp, #40]	; 0x28
   11cbc:	ldr	r3, [sl, #20]
   11cc0:	lsl	r2, r2, #6
   11cc4:	add	r3, r3, r2
   11cc8:	str	r2, [sp, #32]
   11ccc:	ldrb	r3, [r3, #30]
   11cd0:	cmp	r3, #0
   11cd4:	bne	11e00 <__assert_fail@plt+0x8a8>
   11cd8:	str	r3, [sp, #24]
   11cdc:	str	r3, [sp, #28]
   11ce0:	ldr	r3, [sp, #32]
   11ce4:	ldr	fp, [sl, #20]
   11ce8:	add	fp, fp, r3
   11cec:	ldrb	r3, [fp, #28]
   11cf0:	cmp	r3, #0
   11cf4:	bne	11d0c <__assert_fail@plt+0x7b4>
   11cf8:	ldrd	r2, [fp, #16]
   11cfc:	ldrd	r0, [sp, #24]
   11d00:	cmp	r2, r0
   11d04:	sbcs	r3, r3, r1
   11d08:	blt	11f40 <__assert_fail@plt+0x9e8>
   11d0c:	ldrd	r8, [sp, #24]
   11d10:	ldr	r2, [fp, #12]
   11d14:	ldr	r3, [fp, #8]
   11d18:	adds	r8, r8, #1
   11d1c:	adc	r9, r9, #0
   11d20:	mul	r2, r8, r2
   11d24:	umull	r6, r7, r3, r8
   11d28:	mla	r3, r3, r9, r2
   11d2c:	add	r7, r3, r7
   11d30:	bl	129b4 <__assert_fail@plt+0x145c>
   11d34:	ldrd	r0, [sl, #208]	; 0xd0
   11d38:	adds	r0, r0, #1
   11d3c:	adc	r1, r1, #0
   11d40:	bl	12f64 <__assert_fail@plt+0x1a0c>
   11d44:	cmp	r0, #0
   11d48:	beq	11db8 <__assert_fail@plt+0x860>
   11d4c:	bl	13060 <__assert_fail@plt+0x1b08>
   11d50:	cmp	r0, r6
   11d54:	sbcs	r3, r1, r7
   11d58:	movlt	r4, r0
   11d5c:	movlt	r5, r1
   11d60:	bge	11d88 <__assert_fail@plt+0x830>
   11d64:	bl	130cc <__assert_fail@plt+0x1b74>
   11d68:	cmp	r0, #0
   11d6c:	beq	11dc4 <__assert_fail@plt+0x86c>
   11d70:	adds	r4, r4, #1
   11d74:	adc	r5, r5, #0
   11d78:	bl	12924 <__assert_fail@plt+0x13cc>
   11d7c:	cmp	r7, r5
   11d80:	cmpeq	r6, r4
   11d84:	bne	11d64 <__assert_fail@plt+0x80c>
   11d88:	bl	12794 <__assert_fail@plt+0x123c>
   11d8c:	ldrb	r3, [sl, #220]	; 0xdc
   11d90:	cmp	r3, #0
   11d94:	bne	11dd0 <__assert_fail@plt+0x878>
   11d98:	ldrd	r0, [sl, #208]	; 0xd0
   11d9c:	adds	r0, r0, #1
   11da0:	adc	r1, r1, #0
   11da4:	bl	12f64 <__assert_fail@plt+0x1a0c>
   11da8:	cmp	r0, #0
   11dac:	beq	11dd8 <__assert_fail@plt+0x880>
   11db0:	strd	r8, [sp, #24]
   11db4:	b	11ce0 <__assert_fail@plt+0x788>
   11db8:	ldrb	r3, [sl, #220]	; 0xdc
   11dbc:	cmp	r3, #0
   11dc0:	beq	11d4c <__assert_fail@plt+0x7f4>
   11dc4:	ldrd	r2, [sp, #24]
   11dc8:	add	r0, fp, #8
   11dcc:	bl	12ab8 <__assert_fail@plt+0x1560>
   11dd0:	bl	130cc <__assert_fail@plt+0x1b74>
   11dd4:	b	11d98 <__assert_fail@plt+0x840>
   11dd8:	ldrb	r3, [sl, #220]	; 0xdc
   11ddc:	cmp	r3, #0
   11de0:	bne	11db0 <__assert_fail@plt+0x858>
   11de4:	b	11dc4 <__assert_fail@plt+0x86c>
   11de8:	ldrb	r3, [r6, #1]
   11dec:	cmp	r3, #42	; 0x2a
   11df0:	moveq	r3, #1
   11df4:	strbeq	r3, [r4, #28]
   11df8:	bne	11a94 <__assert_fail@plt+0x53c>
   11dfc:	b	11ac8 <__assert_fail@plt+0x570>
   11e00:	ldr	r8, [sp, #32]
   11e04:	mov	r2, #0
   11e08:	mov	r3, #0
   11e0c:	strd	r2, [sp, #24]
   11e10:	ldr	r9, [sl, #20]
   11e14:	add	r5, r9, r8
   11e18:	ldrb	r3, [r5, #28]
   11e1c:	cmp	r3, #0
   11e20:	bne	11e38 <__assert_fail@plt+0x8e0>
   11e24:	ldrd	r2, [r5, #16]
   11e28:	ldrd	r0, [sp, #24]
   11e2c:	cmp	r2, r0
   11e30:	sbcs	r3, r3, r1
   11e34:	blt	11f40 <__assert_fail@plt+0x9e8>
   11e38:	ldrb	fp, [r5, #29]
   11e3c:	cmp	fp, #0
   11e40:	beq	12070 <__assert_fail@plt+0xb18>
   11e44:	ldrd	r2, [r9, r8]
   11e48:	add	r4, r5, #32
   11e4c:	cmp	r2, #0
   11e50:	sbcs	r3, r3, #0
   11e54:	bge	11ea0 <__assert_fail@plt+0x948>
   11e58:	b	11f18 <__assert_fail@plt+0x9c0>
   11e5c:	ldr	r2, [r0]
   11e60:	ldr	r1, [r0, #4]
   11e64:	mov	r0, r4
   11e68:	add	r3, r1, r2
   11e6c:	ldrb	r3, [r3, #-1]
   11e70:	cmp	r3, #10
   11e74:	subeq	r2, r2, #1
   11e78:	mov	r3, #0
   11e7c:	stm	sp, {r2, r3}
   11e80:	bl	22dac <__assert_fail@plt+0x11854>
   11e84:	cmn	r0, #2
   11e88:	beq	122e0 <__assert_fail@plt+0xd88>
   11e8c:	cmn	r0, #1
   11e90:	bne	11f74 <__assert_fail@plt+0xa1c>
   11e94:	bl	130cc <__assert_fail@plt+0x1b74>
   11e98:	cmp	fp, #0
   11e9c:	beq	12034 <__assert_fail@plt+0xadc>
   11ea0:	ldrd	r2, [sl, #208]	; 0xd0
   11ea4:	adds	r2, r2, #1
   11ea8:	adc	r3, r3, #0
   11eac:	mov	r0, r2
   11eb0:	mov	r1, r3
   11eb4:	strd	r2, [sl, #208]	; 0xd0
   11eb8:	bl	12f64 <__assert_fail@plt+0x1a0c>
   11ebc:	cmp	r0, #0
   11ec0:	bne	11e5c <__assert_fail@plt+0x904>
   11ec4:	ldrb	r3, [r5, #28]
   11ec8:	cmp	r3, #0
   11ecc:	beq	120f8 <__assert_fail@plt+0xba0>
   11ed0:	cmp	fp, #0
   11ed4:	beq	12134 <__assert_fail@plt+0xbdc>
   11ed8:	mov	r0, #0
   11edc:	bl	11408 <exit@plt>
   11ee0:	ldr	r2, [r0]
   11ee4:	ldr	r1, [r0, #4]
   11ee8:	mov	r0, r4
   11eec:	add	r3, r1, r2
   11ef0:	ldrb	r3, [r3, #-1]
   11ef4:	cmp	r3, #10
   11ef8:	subeq	r2, r2, #1
   11efc:	mov	r3, #0
   11f00:	stm	sp, {r2, r3}
   11f04:	bl	22dac <__assert_fail@plt+0x11854>
   11f08:	cmn	r0, #2
   11f0c:	beq	122e0 <__assert_fail@plt+0xd88>
   11f10:	cmn	r0, #1
   11f14:	bne	11f74 <__assert_fail@plt+0xa1c>
   11f18:	ldrd	r2, [sl, #208]	; 0xd0
   11f1c:	adds	r2, r2, #1
   11f20:	adc	r3, r3, #0
   11f24:	mov	r0, r2
   11f28:	mov	r1, r3
   11f2c:	strd	r2, [sl, #208]	; 0xd0
   11f30:	bl	12f64 <__assert_fail@plt+0x1a0c>
   11f34:	cmp	r0, #0
   11f38:	bne	11ee0 <__assert_fail@plt+0x988>
   11f3c:	b	11ec4 <__assert_fail@plt+0x96c>
   11f40:	ldr	r3, [sp, #40]	; 0x28
   11f44:	add	r3, r3, #1
   11f48:	str	r3, [sp, #40]	; 0x28
   11f4c:	b	11ca8 <__assert_fail@plt+0x750>
   11f50:	mov	r0, #11
   11f54:	cmp	r7, #0
   11f58:	blt	11920 <__assert_fail@plt+0x3c8>
   11f5c:	mvn	r3, #-2147483647	; 0x80000001
   11f60:	sub	r3, r3, r0
   11f64:	cmp	r7, r3
   11f68:	movle	r3, #0
   11f6c:	movgt	r3, #1
   11f70:	b	11914 <__assert_fail@plt+0x3bc>
   11f74:	ldrd	r2, [sl, #208]	; 0xd0
   11f78:	ldrd	r6, [r9, r8]
   11f7c:	ldr	r1, [r5, #24]
   11f80:	adds	r0, r6, r2
   11f84:	str	r1, [sp, #44]	; 0x2c
   11f88:	adc	r1, r7, r3
   11f8c:	mov	r4, r0
   11f90:	mov	r5, r1
   11f94:	strd	r4, [sp, #32]
   11f98:	bl	13060 <__assert_fail@plt+0x1b08>
   11f9c:	mov	r3, r5
   11fa0:	cmp	r4, r0
   11fa4:	sbcs	r3, r3, r1
   11fa8:	blt	12294 <__assert_fail@plt+0xd3c>
   11fac:	ldrd	r4, [sp, #32]
   11fb0:	mov	r6, #0
   11fb4:	mov	r7, #0
   11fb8:	subs	r4, r4, r0
   11fbc:	sbc	r5, r5, r1
   11fc0:	b	11fcc <__assert_fail@plt+0xa74>
   11fc4:	adds	r6, r6, #1
   11fc8:	adc	r7, r7, #0
   11fcc:	cmp	r5, r7
   11fd0:	cmpeq	r4, r6
   11fd4:	beq	11ff4 <__assert_fail@plt+0xa9c>
   11fd8:	bl	130cc <__assert_fail@plt+0x1b74>
   11fdc:	subs	r1, r0, #0
   11fe0:	beq	12190 <__assert_fail@plt+0xc38>
   11fe4:	cmp	fp, #0
   11fe8:	bne	11fc4 <__assert_fail@plt+0xa6c>
   11fec:	bl	12924 <__assert_fail@plt+0x13cc>
   11ff0:	b	11fc4 <__assert_fail@plt+0xa6c>
   11ff4:	cmp	fp, #0
   11ff8:	beq	12108 <__assert_fail@plt+0xbb0>
   11ffc:	ldrd	r2, [r9, r8]
   12000:	cmp	r2, #1
   12004:	sbcs	r3, r3, #0
   12008:	ldrdge	r2, [sp, #32]
   1200c:	strdge	r2, [sl, #208]	; 0xd0
   12010:	ldrb	r3, [sl, #220]	; 0xdc
   12014:	cmp	r3, #0
   12018:	beq	12020 <__assert_fail@plt+0xac8>
   1201c:	bl	130cc <__assert_fail@plt+0x1b74>
   12020:	ldrd	r2, [sp, #24]
   12024:	adds	r2, r2, #1
   12028:	adc	r3, r3, #0
   1202c:	strd	r2, [sp, #24]
   12030:	b	11e10 <__assert_fail@plt+0x8b8>
   12034:	bl	12924 <__assert_fail@plt+0x13cc>
   12038:	b	11ea0 <__assert_fail@plt+0x948>
   1203c:	cmp	r5, #0
   12040:	moveq	r2, #5
   12044:	ldreq	r1, [pc, #928]	; 123ec <__assert_fail@plt+0xe94>
   12048:	beq	11840 <__assert_fail@plt+0x2e8>
   1204c:	mvn	r3, #-2147483648	; 0x80000000
   12050:	mov	r2, #1
   12054:	stm	sp, {r0, r3}
   12058:	mvn	r3, #0
   1205c:	mov	r0, r1
   12060:	bl	1154c <__snprintf_chk@plt>
   12064:	cmp	r0, #0
   12068:	bge	11f54 <__assert_fail@plt+0x9fc>
   1206c:	b	1191c <__assert_fail@plt+0x3c4>
   12070:	bl	129b4 <__assert_fail@plt+0x145c>
   12074:	b	11e44 <__assert_fail@plt+0x8ec>
   12078:	mov	r3, ip
   1207c:	bics	r5, r5, r3
   12080:	bne	12304 <__assert_fail@plt+0xdac>
   12084:	mov	r5, ip
   12088:	b	117a4 <__assert_fail@plt+0x24c>
   1208c:	mov	r3, r9
   12090:	b	1207c <__assert_fail@plt+0xb24>
   12094:	mov	r3, #0
   12098:	mov	r2, r3
   1209c:	mov	r0, r3
   120a0:	mov	r1, r5
   120a4:	bl	137ac <__assert_fail@plt+0x2254>
   120a8:	cmp	r0, #0
   120ac:	bge	11954 <__assert_fail@plt+0x3fc>
   120b0:	bl	1142c <__errno_location@plt>
   120b4:	mov	r2, #5
   120b8:	ldr	r1, [pc, #816]	; 123f0 <__assert_fail@plt+0xe98>
   120bc:	ldr	r4, [r0]
   120c0:	mov	r0, #0
   120c4:	bl	112d0 <dcgettext@plt>
   120c8:	mov	r1, r5
   120cc:	mov	r6, r0
   120d0:	mov	r0, #4
   120d4:	bl	15750 <__assert_fail@plt+0x41f8>
   120d8:	mov	r2, r6
   120dc:	mov	r1, r4
   120e0:	mov	r3, r0
   120e4:	mov	r0, #1
   120e8:	bl	11384 <error@plt>
   120ec:	strb	lr, [r2]
   120f0:	mov	r3, ip
   120f4:	b	1207c <__assert_fail@plt+0xb24>
   120f8:	str	fp, [sp]
   120fc:	ldrd	r2, [sp, #24]
   12100:	add	r0, r5, #24
   12104:	bl	131b0 <__assert_fail@plt+0x1c58>
   12108:	bl	12794 <__assert_fail@plt+0x123c>
   1210c:	b	11ffc <__assert_fail@plt+0xaa4>
   12110:	bl	129b4 <__assert_fail@plt+0x145c>
   12114:	bl	13194 <__assert_fail@plt+0x1c3c>
   12118:	bl	12794 <__assert_fail@plt+0x123c>
   1211c:	mov	r0, #0
   12120:	bl	11540 <close@plt>
   12124:	cmp	r0, #0
   12128:	bne	12208 <__assert_fail@plt+0xcb0>
   1212c:	add	sp, sp, #204	; 0xcc
   12130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12134:	bl	13194 <__assert_fail@plt+0x1c3c>
   12138:	bl	12794 <__assert_fail@plt+0x123c>
   1213c:	b	11ed8 <__assert_fail@plt+0x980>
   12140:	mov	r2, #5
   12144:	ldr	r1, [pc, #680]	; 123f4 <__assert_fail@plt+0xe9c>
   12148:	mov	r0, #0
   1214c:	bl	112d0 <dcgettext@plt>
   12150:	mov	r4, r0
   12154:	ldr	r0, [r8]
   12158:	bl	15990 <__assert_fail@plt+0x4438>
   1215c:	mov	r2, r4
   12160:	mov	r1, #0
   12164:	mov	r3, r0
   12168:	mov	r0, #1
   1216c:	bl	11384 <error@plt>
   12170:	mov	r2, #5
   12174:	ldr	r1, [pc, #636]	; 123f8 <__assert_fail@plt+0xea0>
   12178:	bl	112d0 <dcgettext@plt>
   1217c:	ldr	r3, [r8]
   12180:	ldr	r1, [sp, #24]
   12184:	mov	r2, r0
   12188:	mov	r0, #1
   1218c:	bl	11384 <error@plt>
   12190:	ldr	r1, [pc, #612]	; 123fc <__assert_fail@plt+0xea4>
   12194:	mov	r2, #5
   12198:	bl	112d0 <dcgettext@plt>
   1219c:	ldr	r3, [sl, #216]	; 0xd8
   121a0:	ldr	r2, [sp, #44]	; 0x2c
   121a4:	mov	r4, r0
   121a8:	ldr	r0, [r3, r2, lsl #2]
   121ac:	bl	15990 <__assert_fail@plt+0x4438>
   121b0:	mov	r1, #0
   121b4:	mov	r2, r4
   121b8:	mov	r3, r0
   121bc:	mov	r0, r1
   121c0:	bl	11384 <error@plt>
   121c4:	bl	12744 <__assert_fail@plt+0x11ec>
   121c8:	mov	r2, #5
   121cc:	ldr	r1, [pc, #556]	; 12400 <__assert_fail@plt+0xea8>
   121d0:	mov	r0, #0
   121d4:	bl	112d0 <dcgettext@plt>
   121d8:	mov	r4, r0
   121dc:	mov	r0, r6
   121e0:	b	12158 <__assert_fail@plt+0xc00>
   121e4:	mov	r2, #5
   121e8:	ldr	r1, [pc, #532]	; 12404 <__assert_fail@plt+0xeac>
   121ec:	bl	112d0 <dcgettext@plt>
   121f0:	str	r4, [sp]
   121f4:	mov	r3, r6
   121f8:	mov	r1, r7
   121fc:	mov	r2, r0
   12200:	mov	r0, #1
   12204:	bl	11384 <error@plt>
   12208:	bl	1142c <__errno_location@plt>
   1220c:	mov	r2, #5
   12210:	ldr	r1, [pc, #496]	; 12408 <__assert_fail@plt+0xeb0>
   12214:	ldr	r4, [r0]
   12218:	mov	r0, #0
   1221c:	bl	112d0 <dcgettext@plt>
   12220:	mov	r1, r4
   12224:	mov	r2, r0
   12228:	mov	r0, #0
   1222c:	bl	11384 <error@plt>
   12230:	bl	12744 <__assert_fail@plt+0x11ec>
   12234:	mov	r2, #5
   12238:	ldr	r1, [pc, #460]	; 1240c <__assert_fail@plt+0xeb4>
   1223c:	bl	112d0 <dcgettext@plt>
   12240:	mov	r4, r0
   12244:	ldr	r0, [r8]
   12248:	bl	15990 <__assert_fail@plt+0x4438>
   1224c:	add	r2, sp, #56	; 0x38
   12250:	mov	r5, r0
   12254:	ldrd	r0, [sl, #224]	; 0xe0
   12258:	bl	13a00 <__assert_fail@plt+0x24a8>
   1225c:	mov	r3, r5
   12260:	mov	r2, r4
   12264:	ldr	r1, [sp, #24]
   12268:	str	r0, [sp]
   1226c:	mov	r0, #1
   12270:	bl	11384 <error@plt>
   12274:	mov	r2, #5
   12278:	ldr	r1, [pc, #400]	; 12410 <__assert_fail@plt+0xeb8>
   1227c:	mov	r0, #0
   12280:	bl	112d0 <dcgettext@plt>
   12284:	ldr	r3, [sl, #216]	; 0xd8
   12288:	mov	r4, r0
   1228c:	ldr	r0, [r3, r5]
   12290:	b	12158 <__assert_fail@plt+0xc00>
   12294:	mov	r2, #5
   12298:	ldr	r1, [pc, #348]	; 123fc <__assert_fail@plt+0xea4>
   1229c:	mov	r0, #0
   122a0:	b	12198 <__assert_fail@plt+0xc40>
   122a4:	mov	r2, #5
   122a8:	ldr	r1, [pc, #356]	; 12414 <__assert_fail@plt+0xebc>
   122ac:	mov	r0, r3
   122b0:	bl	112d0 <dcgettext@plt>
   122b4:	mov	r4, r0
   122b8:	mov	r0, r6
   122bc:	bl	15990 <__assert_fail@plt+0x4438>
   122c0:	ldr	r3, [sp, #24]
   122c4:	mov	r2, r4
   122c8:	mov	r1, r3
   122cc:	str	r8, [sp]
   122d0:	mov	r3, r0
   122d4:	mov	r0, r1
   122d8:	bl	11384 <error@plt>
   122dc:	bl	12744 <__assert_fail@plt+0x11ec>
   122e0:	mov	r2, #5
   122e4:	ldr	r1, [pc, #300]	; 12418 <__assert_fail@plt+0xec0>
   122e8:	mov	r0, #0
   122ec:	bl	112d0 <dcgettext@plt>
   122f0:	mov	r1, #0
   122f4:	mov	r2, r0
   122f8:	mov	r0, r1
   122fc:	bl	11384 <error@plt>
   12300:	bl	12744 <__assert_fail@plt+0x11ec>
   12304:	mov	r2, #5
   12308:	ldr	r1, [pc, #268]	; 1241c <__assert_fail@plt+0xec4>
   1230c:	mov	r0, #0
   12310:	bl	112d0 <dcgettext@plt>
   12314:	tst	r5, #2
   12318:	str	r8, [sp]
   1231c:	moveq	r3, #39	; 0x27
   12320:	movne	r3, #35	; 0x23
   12324:	mov	r1, #0
   12328:	mov	r2, r0
   1232c:	mov	r0, #1
   12330:	bl	11384 <error@plt>
   12334:	mov	r2, #5
   12338:	ldr	r1, [pc, #224]	; 12420 <__assert_fail@plt+0xec8>
   1233c:	b	11840 <__assert_fail@plt+0x2e8>
   12340:	ldr	r1, [pc, #220]	; 12424 <__assert_fail@plt+0xecc>
   12344:	mov	r0, r5
   12348:	bl	112d0 <dcgettext@plt>
   1234c:	sub	r3, fp, #-1073741823	; 0xc0000001
   12350:	mov	r6, r0
   12354:	ldr	r0, [r4, r3, lsl #2]
   12358:	bl	15990 <__assert_fail@plt+0x4438>
   1235c:	mov	r2, r6
   12360:	mov	r1, r5
   12364:	mov	r3, r0
   12368:	mov	r0, r5
   1236c:	bl	11384 <error@plt>
   12370:	b	11708 <__assert_fail@plt+0x1b0>
   12374:	andeq	r5, r2, r4, lsr r9
   12378:	andeq	r5, r2, r4, lsl ip
   1237c:	andeq	r5, r2, ip, ror #22
   12380:	andeq	r7, r3, r8, asr #3
   12384:	andeq	r5, r2, ip, asr r4
   12388:	andeq	r3, r1, r8, lsr #12
   1238c:	andeq	r5, r2, ip, asr ip
   12390:	andeq	r7, r3, r0, asr #3
   12394:	andeq	r7, r3, ip, asr r1
   12398:	andeq	r5, r2, ip, lsr #24
   1239c:	andeq	r5, r2, r0, lsr ip
   123a0:	andeq	r5, r2, r8, ror #24
   123a4:	andeq	r7, r3, r0, ror #2
   123a8:			; <UNDEFINED> instruction: 0x000371bc
   123ac:	andeq	r5, r2, r0, asr #24
   123b0:	andeq	r5, r2, r0, asr ip
   123b4:	strdeq	r5, [r2], -r0
   123b8:	andeq	r5, r2, r8, ror #22
   123bc:			; <UNDEFINED> instruction: 0x000371b0
   123c0:	andeq	r5, r2, r4, asr #25
   123c4:	andeq	r5, r2, r8, lsl sp
   123c8:	andeq	r5, r2, ip, ror #25
   123cc:	andeq	r5, r2, ip, lsr #27
   123d0:	andeq	r0, r0, r6, asr #5
   123d4:	andeq	r7, r3, ip, ror #7
   123d8:	andeq	r7, r3, r4, ror #3
   123dc:	andeq	r5, r2, ip, lsl #10
   123e0:	andeq	r2, r1, ip, ror sl
   123e4:	andeq	r5, r2, r4, lsl lr
   123e8:			; <UNDEFINED> instruction: 0x00025eb8
   123ec:	andeq	r5, r2, ip, ror sp
   123f0:			; <UNDEFINED> instruction: 0x00025db0
   123f4:	andeq	r5, r2, ip, lsr lr
   123f8:	andeq	r5, r2, r0, asr lr
   123fc:	andeq	r5, r2, ip, asr r5
   12400:	strdeq	r5, [r2], -r8
   12404:	andeq	r5, r2, ip, asr #27
   12408:	andeq	r5, r2, r4, lsr #11
   1240c:	andeq	r5, r2, ip, ror lr
   12410:	andeq	r5, r2, ip, lsl pc
   12414:	strdeq	r5, [r2], -r0
   12418:	andeq	r5, r2, r8, asr #30
   1241c:	andeq	r5, r2, r8, asr #26
   12420:	muleq	r2, r4, ip
   12424:	andeq	r5, r2, r8, ror ip
   12428:	mov	fp, #0
   1242c:	mov	lr, #0
   12430:	pop	{r1}		; (ldr r1, [sp], #4)
   12434:	mov	r2, sp
   12438:	push	{r2}		; (str r2, [sp, #-4]!)
   1243c:	push	{r0}		; (str r0, [sp, #-4]!)
   12440:	ldr	ip, [pc, #16]	; 12458 <__assert_fail@plt+0xf00>
   12444:	push	{ip}		; (str ip, [sp, #-4]!)
   12448:	ldr	r0, [pc, #12]	; 1245c <__assert_fail@plt+0xf04>
   1244c:	ldr	r3, [pc, #12]	; 12460 <__assert_fail@plt+0xf08>
   12450:	bl	113b4 <__libc_start_main@plt>
   12454:	bl	11534 <abort@plt>
   12458:	strdeq	r5, [r2], -r0
   1245c:	andeq	r1, r1, r4, ror #10
   12460:	muleq	r2, r0, r3
   12464:	ldr	r3, [pc, #20]	; 12480 <__assert_fail@plt+0xf28>
   12468:	ldr	r2, [pc, #20]	; 12484 <__assert_fail@plt+0xf2c>
   1246c:	add	r3, pc, r3
   12470:	ldr	r2, [r3, r2]
   12474:	cmp	r2, #0
   12478:	bxeq	lr
   1247c:	b	113e4 <__gmon_start__@plt>
   12480:	andeq	r4, r2, ip, lsl #23
   12484:	andeq	r0, r0, r0, asr r1
   12488:	ldr	r3, [pc, #28]	; 124ac <__assert_fail@plt+0xf54>
   1248c:	ldr	r0, [pc, #28]	; 124b0 <__assert_fail@plt+0xf58>
   12490:	sub	r3, r3, r0
   12494:	cmp	r3, #6
   12498:	bxls	lr
   1249c:	ldr	r3, [pc, #16]	; 124b4 <__assert_fail@plt+0xf5c>
   124a0:	cmp	r3, #0
   124a4:	bxeq	lr
   124a8:	bx	r3
   124ac:	andeq	r7, r3, fp, lsr #3
   124b0:	andeq	r7, r3, r8, lsr #3
   124b4:	andeq	r0, r0, r0
   124b8:	ldr	r1, [pc, #36]	; 124e4 <__assert_fail@plt+0xf8c>
   124bc:	ldr	r0, [pc, #36]	; 124e8 <__assert_fail@plt+0xf90>
   124c0:	sub	r1, r1, r0
   124c4:	asr	r1, r1, #2
   124c8:	add	r1, r1, r1, lsr #31
   124cc:	asrs	r1, r1, #1
   124d0:	bxeq	lr
   124d4:	ldr	r3, [pc, #16]	; 124ec <__assert_fail@plt+0xf94>
   124d8:	cmp	r3, #0
   124dc:	bxeq	lr
   124e0:	bx	r3
   124e4:	andeq	r7, r3, r8, lsr #3
   124e8:	andeq	r7, r3, r8, lsr #3
   124ec:	andeq	r0, r0, r0
   124f0:	push	{r4, lr}
   124f4:	ldr	r4, [pc, #24]	; 12514 <__assert_fail@plt+0xfbc>
   124f8:	ldrb	r3, [r4]
   124fc:	cmp	r3, #0
   12500:	popne	{r4, pc}
   12504:	bl	12488 <__assert_fail@plt+0xf30>
   12508:	mov	r3, #1
   1250c:	strb	r3, [r4]
   12510:	pop	{r4, pc}
   12514:	andeq	r7, r3, r4, asr #3
   12518:	ldr	r0, [pc, #40]	; 12548 <__assert_fail@plt+0xff0>
   1251c:	ldr	r3, [r0]
   12520:	cmp	r3, #0
   12524:	bne	1252c <__assert_fail@plt+0xfd4>
   12528:	b	124b8 <__assert_fail@plt+0xf60>
   1252c:	ldr	r3, [pc, #24]	; 1254c <__assert_fail@plt+0xff4>
   12530:	cmp	r3, #0
   12534:	beq	12528 <__assert_fail@plt+0xfd0>
   12538:	push	{r4, lr}
   1253c:	blx	r3
   12540:	pop	{r4, lr}
   12544:	b	124b8 <__assert_fail@plt+0xf60>
   12548:	andeq	r6, r3, r4, lsl pc
   1254c:	andeq	r0, r0, r0
   12550:	push	{r4, r5, r6, lr}
   12554:	mov	r5, r0
   12558:	ldr	r4, [pc, #124]	; 125dc <__assert_fail@plt+0x1084>
   1255c:	sub	sp, sp, #8
   12560:	ldr	r0, [r4]
   12564:	ldr	r1, [r4, #4]
   12568:	bl	11360 <strcpy@plt>
   1256c:	ldr	r3, [r4, #8]
   12570:	ldr	r6, [r4]
   12574:	cmp	r3, #0
   12578:	ldr	r0, [r4, #4]
   1257c:	beq	125a8 <__assert_fail@plt+0x1050>
   12580:	bl	11414 <strlen@plt>
   12584:	ldr	r3, [r4, #8]
   12588:	str	r5, [sp]
   1258c:	mvn	r2, #0
   12590:	mov	r1, #1
   12594:	add	r0, r6, r0
   12598:	bl	11444 <__sprintf_chk@plt>
   1259c:	ldr	r0, [r4]
   125a0:	add	sp, sp, #8
   125a4:	pop	{r4, r5, r6, pc}
   125a8:	bl	11414 <strlen@plt>
   125ac:	ldr	r2, [pc, #44]	; 125e0 <__assert_fail@plt+0x1088>
   125b0:	str	r5, [sp, #4]
   125b4:	ldr	r3, [pc, #40]	; 125e4 <__assert_fail@plt+0x108c>
   125b8:	ldr	r1, [r2]
   125bc:	mvn	r2, #0
   125c0:	str	r1, [sp]
   125c4:	mov	r1, #1
   125c8:	add	r0, r6, r0
   125cc:	bl	11444 <__sprintf_chk@plt>
   125d0:	ldr	r0, [r4]
   125d4:	add	sp, sp, #8
   125d8:	pop	{r4, r5, r6, pc}
   125dc:	andeq	r7, r3, r8, asr #3
   125e0:	andeq	r7, r3, ip, asr r1
   125e4:	andeq	r5, r2, r8, lsr r5
   125e8:	push	{r4, r6, r7, lr}
   125ec:	sub	sp, sp, #8
   125f0:	ldr	r4, [pc, #116]	; 1266c <__assert_fail@plt+0x1114>
   125f4:	ldr	r3, [r4, #12]
   125f8:	ldr	r2, [r4, #16]
   125fc:	cmp	r3, r2
   12600:	beq	12640 <__assert_fail@plt+0x10e8>
   12604:	ldr	r1, [r4, #20]
   12608:	lsl	r2, r3, #6
   1260c:	add	r0, r1, r2
   12610:	mov	r6, #0
   12614:	mov	r7, #0
   12618:	mov	ip, #0
   1261c:	add	r3, r3, #1
   12620:	strb	ip, [r0, #30]
   12624:	strb	ip, [r0, #28]
   12628:	strd	r6, [r0, #16]
   1262c:	strd	r6, [r0, #8]
   12630:	str	r3, [r4, #12]
   12634:	strd	r6, [r1, r2]
   12638:	add	sp, sp, #8
   1263c:	pop	{r4, r6, r7, pc}
   12640:	mov	r3, #64	; 0x40
   12644:	str	r3, [sp]
   12648:	add	r1, r4, #16
   1264c:	mvn	r3, #0
   12650:	ldr	r0, [r4, #20]
   12654:	mov	r2, #1
   12658:	bl	235c8 <__assert_fail@plt+0x12070>
   1265c:	ldr	r3, [r4, #12]
   12660:	mov	r1, r0
   12664:	str	r0, [r4, #20]
   12668:	b	12608 <__assert_fail@plt+0x10b0>
   1266c:	andeq	r7, r3, r8, asr #3
   12670:	push	{r4, r5, r6, lr}
   12674:	mov	r5, r0
   12678:	ldr	r0, [r0, #32]
   1267c:	cmp	r0, #0
   12680:	beq	12694 <__assert_fail@plt+0x113c>
   12684:	ldr	r4, [r0, #652]	; 0x28c
   12688:	bl	13908 <__assert_fail@plt+0x23b0>
   1268c:	subs	r0, r4, #0
   12690:	bne	12684 <__assert_fail@plt+0x112c>
   12694:	ldr	r0, [r5, #28]
   12698:	bl	13908 <__assert_fail@plt+0x23b0>
   1269c:	mov	r0, r5
   126a0:	pop	{r4, r5, r6, lr}
   126a4:	b	13908 <__assert_fail@plt+0x23b0>
   126a8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126ac:	mov	r7, r0
   126b0:	ldr	r9, [pc, #132]	; 1273c <__assert_fail@plt+0x11e4>
   126b4:	ldr	sl, [pc, #132]	; 12740 <__assert_fail@plt+0x11e8>
   126b8:	mov	fp, #3
   126bc:	ldr	r4, [r9, #24]
   126c0:	mov	r8, #0
   126c4:	subs	r4, r4, #1
   126c8:	mov	r0, r4
   126cc:	bmi	12730 <__assert_fail@plt+0x11d8>
   126d0:	bl	12550 <__assert_fail@plt+0xff8>
   126d4:	mov	r6, r0
   126d8:	bl	112dc <unlink@plt>
   126dc:	cmp	r0, #0
   126e0:	beq	126c4 <__assert_fail@plt+0x116c>
   126e4:	bl	1142c <__errno_location@plt>
   126e8:	ldr	r5, [r0]
   126ec:	cmp	r5, #2
   126f0:	movne	r3, r7
   126f4:	orreq	r3, r7, #1
   126f8:	cmp	r3, #0
   126fc:	bne	126c4 <__assert_fail@plt+0x116c>
   12700:	mov	r2, r6
   12704:	mov	r1, fp
   12708:	mov	r0, r8
   1270c:	bl	1580c <__assert_fail@plt+0x42b4>
   12710:	mov	r2, sl
   12714:	mov	r1, r5
   12718:	mov	r3, r0
   1271c:	mov	r0, r8
   12720:	bl	11384 <error@plt>
   12724:	subs	r4, r4, #1
   12728:	mov	r0, r4
   1272c:	bpl	126d0 <__assert_fail@plt+0x1178>
   12730:	mov	r3, #0
   12734:	str	r3, [r9, #24]
   12738:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1273c:	andeq	r7, r3, r8, asr #3
   12740:	andeq	r5, r2, r0, lsl lr
   12744:	ldr	r4, [pc, #68]	; 12790 <__assert_fail@plt+0x1238>
   12748:	push	{lr}		; (str lr, [sp, #-4]!)
   1274c:	sub	sp, sp, #132	; 0x84
   12750:	bl	12794 <__assert_fail@plt+0x123c>
   12754:	add	r1, r4, #28
   12758:	mov	r2, sp
   1275c:	mov	r0, #0
   12760:	bl	11228 <sigprocmask@plt>
   12764:	ldrb	r3, [r4, #156]	; 0x9c
   12768:	cmp	r3, #0
   1276c:	beq	12778 <__assert_fail@plt+0x1220>
   12770:	mov	r0, #0
   12774:	bl	126a8 <__assert_fail@plt+0x1150>
   12778:	mov	r1, sp
   1277c:	mov	r2, #0
   12780:	mov	r0, #2
   12784:	bl	11228 <sigprocmask@plt>
   12788:	mov	r0, #1
   1278c:	bl	11408 <exit@plt>
   12790:	andeq	r7, r3, r8, asr #3
   12794:	push	{r4, r5, r6, r7, r8, lr}
   12798:	sub	sp, sp, #128	; 0x80
   1279c:	ldr	r4, [pc, #364]	; 12910 <__assert_fail@plt+0x13b8>
   127a0:	ldr	r0, [r4, #160]	; 0xa0
   127a4:	cmp	r0, #0
   127a8:	beq	127e4 <__assert_fail@plt+0x128c>
   127ac:	ldr	r3, [r0]
   127b0:	ands	r5, r3, #32
   127b4:	bne	128d0 <__assert_fail@plt+0x1378>
   127b8:	bl	1370c <__assert_fail@plt+0x21b4>
   127bc:	subs	r6, r0, #0
   127c0:	bne	1289c <__assert_fail@plt+0x1344>
   127c4:	ldrd	r2, [r4, #168]	; 0xa8
   127c8:	orrs	r1, r2, r3
   127cc:	beq	127ec <__assert_fail@plt+0x1294>
   127d0:	ldrb	r1, [r4, #177]	; 0xb1
   127d4:	cmp	r1, #0
   127d8:	beq	1286c <__assert_fail@plt+0x1314>
   127dc:	mov	r3, #0
   127e0:	str	r3, [r4, #160]	; 0xa0
   127e4:	add	sp, sp, #128	; 0x80
   127e8:	pop	{r4, r5, r6, r7, r8, pc}
   127ec:	ldrb	r1, [r4, #176]	; 0xb0
   127f0:	cmp	r1, #0
   127f4:	beq	127d0 <__assert_fail@plt+0x1278>
   127f8:	mov	r2, sp
   127fc:	add	r1, r4, #28
   12800:	bl	11228 <sigprocmask@plt>
   12804:	ldr	r7, [r4, #164]	; 0xa4
   12808:	mov	r0, r7
   1280c:	bl	112dc <unlink@plt>
   12810:	mov	r8, r0
   12814:	bl	1142c <__errno_location@plt>
   12818:	ldr	r3, [r4, #24]
   1281c:	mov	r1, sp
   12820:	sub	r3, r3, #1
   12824:	mov	r2, r6
   12828:	str	r3, [r4, #24]
   1282c:	ldr	r5, [r0]
   12830:	mov	r0, #2
   12834:	bl	11228 <sigprocmask@plt>
   12838:	cmp	r8, #0
   1283c:	cmpne	r5, #2
   12840:	beq	127dc <__assert_fail@plt+0x1284>
   12844:	mov	r2, r7
   12848:	mov	r1, #3
   1284c:	mov	r0, r6
   12850:	bl	1580c <__assert_fail@plt+0x42b4>
   12854:	mov	r1, r5
   12858:	ldr	r2, [pc, #180]	; 12914 <__assert_fail@plt+0x13bc>
   1285c:	mov	r3, r0
   12860:	mov	r0, r6
   12864:	bl	11384 <error@plt>
   12868:	b	127dc <__assert_fail@plt+0x1284>
   1286c:	ldr	ip, [pc, #164]	; 12918 <__assert_fail@plt+0x13c0>
   12870:	mov	r1, r3
   12874:	mov	r0, r2
   12878:	mov	r2, sp
   1287c:	ldr	r5, [ip]
   12880:	bl	13a00 <__assert_fail@plt+0x24a8>
   12884:	ldr	r2, [pc, #144]	; 1291c <__assert_fail@plt+0x13c4>
   12888:	mov	r1, #1
   1288c:	mov	r3, r0
   12890:	mov	r0, r5
   12894:	bl	1148c <__fprintf_chk@plt>
   12898:	b	127dc <__assert_fail@plt+0x1284>
   1289c:	bl	1142c <__errno_location@plt>
   128a0:	ldr	r2, [r4, #164]	; 0xa4
   128a4:	mov	r1, #3
   128a8:	ldr	r6, [r0]
   128ac:	mov	r0, r5
   128b0:	bl	1580c <__assert_fail@plt+0x42b4>
   128b4:	mov	r1, r6
   128b8:	ldr	r2, [pc, #84]	; 12914 <__assert_fail@plt+0x13bc>
   128bc:	mov	r3, r0
   128c0:	mov	r0, r5
   128c4:	bl	11384 <error@plt>
   128c8:	str	r5, [r4, #160]	; 0xa0
   128cc:	bl	12744 <__assert_fail@plt+0x11ec>
   128d0:	mov	r2, #5
   128d4:	ldr	r1, [pc, #68]	; 12920 <__assert_fail@plt+0x13c8>
   128d8:	mov	r0, #0
   128dc:	bl	112d0 <dcgettext@plt>
   128e0:	ldr	r1, [r4, #164]	; 0xa4
   128e4:	mov	r5, r0
   128e8:	mov	r0, #4
   128ec:	bl	15750 <__assert_fail@plt+0x41f8>
   128f0:	mov	r1, #0
   128f4:	mov	r2, r5
   128f8:	mov	r3, r0
   128fc:	mov	r0, r1
   12900:	bl	11384 <error@plt>
   12904:	mov	r3, #0
   12908:	str	r3, [r4, #160]	; 0xa0
   1290c:	bl	12744 <__assert_fail@plt+0x11ec>
   12910:	andeq	r7, r3, r8, asr #3
   12914:	andeq	r5, r2, r0, lsl lr
   12918:			; <UNDEFINED> instruction: 0x000371bc
   1291c:	ldrdeq	r6, [r2], -r8
   12920:	andeq	r5, r2, r0, asr #10
   12924:	push	{r4, r5, r6, lr}
   12928:	mov	r1, #1
   1292c:	ldr	r4, [pc, #120]	; 129ac <__assert_fail@plt+0x1454>
   12930:	mov	r5, r0
   12934:	ldr	r2, [r0]
   12938:	ldr	r3, [r4, #160]	; 0xa0
   1293c:	ldr	r0, [r0, #4]
   12940:	bl	112ac <fwrite_unlocked@plt>
   12944:	ldr	r3, [r5]
   12948:	cmp	r0, r3
   1294c:	bne	12964 <__assert_fail@plt+0x140c>
   12950:	ldrd	r2, [r4, #168]	; 0xa8
   12954:	adds	r2, r2, r0
   12958:	adc	r3, r3, r0, asr #31
   1295c:	strd	r2, [r4, #168]	; 0xa8
   12960:	pop	{r4, r5, r6, pc}
   12964:	bl	1142c <__errno_location@plt>
   12968:	mov	r2, #5
   1296c:	ldr	r1, [pc, #60]	; 129b0 <__assert_fail@plt+0x1458>
   12970:	ldr	r5, [r0]
   12974:	mov	r0, #0
   12978:	bl	112d0 <dcgettext@plt>
   1297c:	ldr	r1, [r4, #164]	; 0xa4
   12980:	mov	r6, r0
   12984:	mov	r0, #4
   12988:	bl	15750 <__assert_fail@plt+0x41f8>
   1298c:	mov	r2, r6
   12990:	mov	r1, r5
   12994:	mov	r3, r0
   12998:	mov	r0, #0
   1299c:	bl	11384 <error@plt>
   129a0:	mov	r3, #0
   129a4:	str	r3, [r4, #160]	; 0xa0
   129a8:	bl	12744 <__assert_fail@plt+0x11ec>
   129ac:	andeq	r7, r3, r8, asr #3
   129b0:	andeq	r5, r2, r0, asr #10
   129b4:	push	{r4, r5, r6, lr}
   129b8:	sub	sp, sp, #128	; 0x80
   129bc:	ldr	r4, [pc, #172]	; 12a70 <__assert_fail@plt+0x1518>
   129c0:	ldr	r5, [r4, #24]
   129c4:	mov	r0, r5
   129c8:	bl	12550 <__assert_fail@plt+0xff8>
   129cc:	cmn	r5, #-2147483647	; 0x80000001
   129d0:	mov	r6, r0
   129d4:	str	r0, [r4, #164]	; 0xa4
   129d8:	beq	12a44 <__assert_fail@plt+0x14ec>
   129dc:	mov	r2, sp
   129e0:	add	r1, r4, #28
   129e4:	mov	r0, #0
   129e8:	bl	11228 <sigprocmask@plt>
   129ec:	ldr	r1, [pc, #128]	; 12a74 <__assert_fail@plt+0x151c>
   129f0:	mov	r0, r6
   129f4:	bl	13870 <__assert_fail@plt+0x2318>
   129f8:	mov	r6, r0
   129fc:	str	r0, [r4, #160]	; 0xa0
   12a00:	bl	1142c <__errno_location@plt>
   12a04:	cmp	r6, #0
   12a08:	addne	r5, r5, #1
   12a0c:	str	r5, [r4, #24]
   12a10:	mov	r1, sp
   12a14:	mov	r2, #0
   12a18:	ldr	r5, [r0]
   12a1c:	mov	r0, #2
   12a20:	bl	11228 <sigprocmask@plt>
   12a24:	cmp	r6, #0
   12a28:	ldreq	r6, [r4, #164]	; 0xa4
   12a2c:	beq	12a48 <__assert_fail@plt+0x14f0>
   12a30:	mov	r2, #0
   12a34:	mov	r3, #0
   12a38:	strd	r2, [r4, #168]	; 0xa8
   12a3c:	add	sp, sp, #128	; 0x80
   12a40:	pop	{r4, r5, r6, pc}
   12a44:	mov	r5, #75	; 0x4b
   12a48:	mov	r2, r6
   12a4c:	mov	r1, #3
   12a50:	mov	r0, #0
   12a54:	bl	1580c <__assert_fail@plt+0x42b4>
   12a58:	mov	r1, r5
   12a5c:	ldr	r2, [pc, #20]	; 12a78 <__assert_fail@plt+0x1520>
   12a60:	mov	r3, r0
   12a64:	mov	r0, #0
   12a68:	bl	11384 <error@plt>
   12a6c:	bl	12744 <__assert_fail@plt+0x11ec>
   12a70:	andeq	r7, r3, r8, asr #3
   12a74:	andeq	r5, r2, r4, asr r5
   12a78:	andeq	r5, r2, r0, lsl lr
   12a7c:	ldr	r3, [pc, #48]	; 12ab4 <__assert_fail@plt+0x155c>
   12a80:	push	{r4, lr}
   12a84:	mov	r4, r0
   12a88:	ldrb	r3, [r3, #156]	; 0x9c
   12a8c:	cmp	r3, #0
   12a90:	beq	12a9c <__assert_fail@plt+0x1544>
   12a94:	mov	r0, #1
   12a98:	bl	126a8 <__assert_fail@plt+0x1150>
   12a9c:	mov	r0, r4
   12aa0:	mov	r1, #0
   12aa4:	bl	112a0 <signal@plt>
   12aa8:	mov	r0, r4
   12aac:	pop	{r4, lr}
   12ab0:	b	111d4 <raise@plt>
   12ab4:	andeq	r7, r3, r8, asr #3
   12ab8:	ldr	r4, [pc, #176]	; 12b70 <__assert_fail@plt+0x1618>
   12abc:	push	{r7, lr}
   12ac0:	mov	r9, r0
   12ac4:	sub	sp, sp, #32
   12ac8:	mov	r6, r2
   12acc:	ldr	r1, [pc, #160]	; 12b74 <__assert_fail@plt+0x161c>
   12ad0:	mov	r2, #5
   12ad4:	mov	r0, #0
   12ad8:	mov	r7, r3
   12adc:	ldr	r5, [r4]
   12ae0:	bl	112d0 <dcgettext@plt>
   12ae4:	ldr	r3, [pc, #140]	; 12b78 <__assert_fail@plt+0x1620>
   12ae8:	add	r2, sp, #8
   12aec:	mov	r8, r0
   12af0:	ldrd	r0, [r9]
   12af4:	ldr	r9, [r3]
   12af8:	bl	13a00 <__assert_fail@plt+0x24a8>
   12afc:	bl	15990 <__assert_fail@plt+0x4438>
   12b00:	mov	r3, r9
   12b04:	mov	r2, r8
   12b08:	mov	r1, #1
   12b0c:	str	r0, [sp]
   12b10:	mov	r0, r5
   12b14:	bl	1148c <__fprintf_chk@plt>
   12b18:	orrs	r3, r6, r7
   12b1c:	beq	12b60 <__assert_fail@plt+0x1608>
   12b20:	mov	r2, #5
   12b24:	ldr	r1, [pc, #80]	; 12b7c <__assert_fail@plt+0x1624>
   12b28:	mov	r0, #0
   12b2c:	ldr	r4, [r4]
   12b30:	bl	112d0 <dcgettext@plt>
   12b34:	add	r2, sp, #8
   12b38:	mov	r1, r7
   12b3c:	mov	r5, r0
   12b40:	mov	r0, r6
   12b44:	bl	13a00 <__assert_fail@plt+0x24a8>
   12b48:	mov	r2, r5
   12b4c:	mov	r1, #1
   12b50:	mov	r3, r0
   12b54:	mov	r0, r4
   12b58:	bl	1148c <__fprintf_chk@plt>
   12b5c:	bl	12744 <__assert_fail@plt+0x11ec>
   12b60:	ldr	r1, [r4]
   12b64:	mov	r0, #10
   12b68:	bl	114ec <fputc@plt>
   12b6c:	b	12b5c <__assert_fail@plt+0x1604>
   12b70:			; <UNDEFINED> instruction: 0x000371b8
   12b74:	andeq	r5, r2, r8, asr r5
   12b78:			; <UNDEFINED> instruction: 0x000372b8
   12b7c:	andeq	r5, r2, ip, ror r5
   12b80:	push	{r4, r5, r6, r7, r8, lr}
   12b84:	mov	r5, r1
   12b88:	ldr	r4, [r0]
   12b8c:	mov	r7, r2
   12b90:	cmp	r4, #0
   12b94:	mov	r8, r3
   12b98:	beq	12c00 <__assert_fail@plt+0x16a8>
   12b9c:	ldr	r4, [r5]
   12ba0:	ldr	r0, [r4]
   12ba4:	cmp	r0, #80	; 0x50
   12ba8:	beq	12bcc <__assert_fail@plt+0x1674>
   12bac:	ldr	r1, [r4, #4]
   12bb0:	add	r0, r0, #1
   12bb4:	add	ip, r1, #1
   12bb8:	add	r1, r4, r1, lsl #3
   12bbc:	str	r7, [r1, #16]
   12bc0:	str	r8, [r1, #12]
   12bc4:	stm	r4, {r0, ip}
   12bc8:	pop	{r4, r5, r6, r7, r8, pc}
   12bcc:	mov	r0, #656	; 0x290
   12bd0:	bl	2343c <__assert_fail@plt+0x11ee4>
   12bd4:	mov	r3, #0
   12bd8:	str	r3, [r0, #652]	; 0x28c
   12bdc:	str	r3, [r0]
   12be0:	str	r3, [r0, #4]
   12be4:	str	r3, [r0, #8]
   12be8:	str	r0, [r4, #652]	; 0x28c
   12bec:	ldr	r3, [r5]
   12bf0:	ldr	r4, [r3, #652]	; 0x28c
   12bf4:	str	r4, [r5]
   12bf8:	ldr	r0, [r4]
   12bfc:	b	12bac <__assert_fail@plt+0x1654>
   12c00:	mov	r6, r0
   12c04:	mov	r0, #656	; 0x290
   12c08:	bl	2343c <__assert_fail@plt+0x11ee4>
   12c0c:	str	r0, [r5]
   12c10:	str	r4, [r0, #652]	; 0x28c
   12c14:	str	r4, [r0]
   12c18:	str	r4, [r0, #4]
   12c1c:	str	r4, [r0, #8]
   12c20:	str	r0, [r6]
   12c24:	b	12b9c <__assert_fail@plt+0x1644>
   12c28:	push	{r4, lr}
   12c2c:	mov	r2, #5
   12c30:	ldr	r1, [pc, #28]	; 12c54 <__assert_fail@plt+0x16fc>
   12c34:	mov	r0, #0
   12c38:	bl	112d0 <dcgettext@plt>
   12c3c:	mov	r1, #0
   12c40:	ldr	r2, [pc, #16]	; 12c58 <__assert_fail@plt+0x1700>
   12c44:	mov	r3, r0
   12c48:	mov	r0, r1
   12c4c:	bl	11384 <error@plt>
   12c50:	bl	12744 <__assert_fail@plt+0x11ec>
   12c54:	muleq	r2, r0, r5
   12c58:	andeq	r5, r2, r0, lsl lr
   12c5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c60:	mov	r8, #10
   12c64:	ldr	fp, [pc, #744]	; 12f54 <__assert_fail@plt+0x19fc>
   12c68:	ldr	r3, [pc, #744]	; 12f58 <__assert_fail@plt+0x1a00>
   12c6c:	sub	sp, sp, #12
   12c70:	ldr	r4, [fp, #180]	; 0xb4
   12c74:	cmp	r4, r3
   12c78:	addgt	r4, r4, #1
   12c7c:	ldrle	r4, [pc, #728]	; 12f5c <__assert_fail@plt+0x1a04>
   12c80:	b	12cb0 <__assert_fail@plt+0x1758>
   12c84:	ldrb	r3, [fp, #196]	; 0xc4
   12c88:	cmp	r3, #0
   12c8c:	bne	12e94 <__assert_fail@plt+0x193c>
   12c90:	ldr	r4, [r5]
   12c94:	cmp	r4, #0
   12c98:	blt	12ef8 <__assert_fail@plt+0x19a0>
   12c9c:	cmn	r4, #-1073741823	; 0xc0000001
   12ca0:	bgt	12f14 <__assert_fail@plt+0x19bc>
   12ca4:	mov	r0, r5
   12ca8:	bl	12670 <__assert_fail@plt+0x1118>
   12cac:	lsl	r4, r4, #1
   12cb0:	mov	r0, #48	; 0x30
   12cb4:	bl	2343c <__assert_fail@plt+0x11ee4>
   12cb8:	mov	r3, #1
   12cbc:	mov	r2, r4
   12cc0:	str	r3, [sp]
   12cc4:	mvn	r3, #0
   12cc8:	mov	r5, r0
   12ccc:	mov	r1, r0
   12cd0:	mov	r0, #0
   12cd4:	str	r0, [r5]
   12cd8:	bl	235c8 <__assert_fail@plt+0x12070>
   12cdc:	ldrd	r2, [fp, #184]	; 0xb8
   12ce0:	ldr	r7, [fp, #180]	; 0xb4
   12ce4:	mov	r1, #0
   12ce8:	adds	r2, r2, #1
   12cec:	adc	r3, r3, #0
   12cf0:	cmp	r7, r1
   12cf4:	str	r1, [r5, #4]
   12cf8:	str	r1, [r5, #24]
   12cfc:	str	r1, [r5, #36]	; 0x24
   12d00:	str	r1, [r5, #32]
   12d04:	str	r1, [r5, #40]	; 0x28
   12d08:	strd	r2, [r5, #16]
   12d0c:	strd	r2, [r5, #8]
   12d10:	ldr	r4, [r5]
   12d14:	mov	r6, r0
   12d18:	str	r0, [r5, #28]
   12d1c:	bne	12ea8 <__assert_fail@plt+0x1950>
   12d20:	subs	r2, r4, #1
   12d24:	movne	r1, r0
   12d28:	beq	12c84 <__assert_fail@plt+0x172c>
   12d2c:	mov	r0, #0
   12d30:	bl	22ea8 <__assert_fail@plt+0x11950>
   12d34:	subs	r2, r0, #0
   12d38:	bne	12ee8 <__assert_fail@plt+0x1990>
   12d3c:	ldr	r4, [r5, #4]
   12d40:	mov	r3, #1
   12d44:	strb	r3, [fp, #196]	; 0xc4
   12d48:	add	r2, r4, r2
   12d4c:	cmp	r2, #0
   12d50:	str	r2, [r5, #4]
   12d54:	beq	12c84 <__assert_fail@plt+0x172c>
   12d58:	ldr	r4, [r5, #28]
   12d5c:	mov	r6, #0
   12d60:	add	r7, r4, r2
   12d64:	add	sl, r5, #36	; 0x24
   12d68:	add	r9, r5, #32
   12d6c:	strb	r8, [r4, r2]
   12d70:	b	12d94 <__assert_fail@plt+0x183c>
   12d74:	sub	r3, r0, r4
   12d78:	mov	r2, r4
   12d7c:	add	r3, r3, #1
   12d80:	mov	r1, sl
   12d84:	mov	r0, r9
   12d88:	add	r6, r6, #1
   12d8c:	add	r4, ip, #1
   12d90:	bl	12b80 <__assert_fail@plt+0x1628>
   12d94:	mov	r1, r8
   12d98:	mov	r0, r4
   12d9c:	bl	11318 <rawmemchr@plt>
   12da0:	cmp	r7, r0
   12da4:	mov	ip, r0
   12da8:	bne	12d74 <__assert_fail@plt+0x181c>
   12dac:	subs	r7, r7, r4
   12db0:	beq	12e5c <__assert_fail@plt+0x1904>
   12db4:	ldrb	r3, [fp, #196]	; 0xc4
   12db8:	cmp	r3, #0
   12dbc:	beq	12e3c <__assert_fail@plt+0x18e4>
   12dc0:	mov	r3, r7
   12dc4:	mov	r2, r4
   12dc8:	add	r1, r5, #36	; 0x24
   12dcc:	add	r0, r5, #32
   12dd0:	bl	12b80 <__assert_fail@plt+0x1628>
   12dd4:	ldrd	r2, [fp, #184]	; 0xb8
   12dd8:	add	r6, r6, #1
   12ddc:	str	r6, [r5, #24]
   12de0:	adds	r0, r2, r6
   12de4:	adc	r1, r3, r6, asr #31
   12de8:	adds	r2, r2, #1
   12dec:	adc	r3, r3, #0
   12df0:	strd	r0, [fp, #184]	; 0xb8
   12df4:	strd	r2, [r5, #8]
   12df8:	strd	r2, [r5, #16]
   12dfc:	ldr	r2, [fp, #200]	; 0xc8
   12e00:	ldr	r1, [r5, #32]
   12e04:	mov	r3, #0
   12e08:	cmp	r2, #0
   12e0c:	str	r1, [r5, #36]	; 0x24
   12e10:	str	r3, [r5, #40]	; 0x28
   12e14:	bne	12e20 <__assert_fail@plt+0x18c8>
   12e18:	b	12f18 <__assert_fail@plt+0x19c0>
   12e1c:	mov	r2, r3
   12e20:	ldr	r3, [r2, #40]	; 0x28
   12e24:	cmp	r3, #0
   12e28:	bne	12e1c <__assert_fail@plt+0x18c4>
   12e2c:	mov	r0, #1
   12e30:	str	r5, [r2, #40]	; 0x28
   12e34:	add	sp, sp, #12
   12e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e3c:	mov	r0, r4
   12e40:	mov	r1, r7
   12e44:	bl	238f8 <__assert_fail@plt+0x123a0>
   12e48:	mov	r4, r0
   12e4c:	ldr	r0, [fp, #192]	; 0xc0
   12e50:	bl	13908 <__assert_fail@plt+0x23b0>
   12e54:	str	r4, [fp, #192]	; 0xc0
   12e58:	str	r7, [fp, #180]	; 0xb4
   12e5c:	ldrd	r2, [fp, #184]	; 0xb8
   12e60:	str	r6, [r5, #24]
   12e64:	adds	r0, r2, #1
   12e68:	adc	r1, r3, #0
   12e6c:	adds	r2, r2, r6
   12e70:	adc	r3, r3, r6, asr #31
   12e74:	cmp	r6, #0
   12e78:	strd	r0, [r5, #8]
   12e7c:	strd	r0, [r5, #16]
   12e80:	strd	r2, [fp, #184]	; 0xb8
   12e84:	bne	12dfc <__assert_fail@plt+0x18a4>
   12e88:	ldrb	r3, [fp, #196]	; 0xc4
   12e8c:	cmp	r3, #0
   12e90:	beq	12c90 <__assert_fail@plt+0x1738>
   12e94:	mov	r0, r5
   12e98:	bl	12670 <__assert_fail@plt+0x1118>
   12e9c:	mov	r0, #0
   12ea0:	add	sp, sp, #12
   12ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ea8:	mov	r2, r7
   12eac:	ldr	r1, [fp, #192]	; 0xc0
   12eb0:	bl	11264 <memcpy@plt>
   12eb4:	ldr	r3, [r5, #4]
   12eb8:	sub	r4, r4, r7
   12ebc:	subs	r2, r4, #1
   12ec0:	add	r4, r7, r3
   12ec4:	mov	r3, #0
   12ec8:	str	r3, [fp, #180]	; 0xb4
   12ecc:	str	r4, [r5, #4]
   12ed0:	beq	12d48 <__assert_fail@plt+0x17f0>
   12ed4:	add	r1, r6, r7
   12ed8:	mov	r0, #0
   12edc:	bl	22ea8 <__assert_fail@plt+0x11950>
   12ee0:	subs	r2, r0, #0
   12ee4:	beq	12d3c <__assert_fail@plt+0x17e4>
   12ee8:	cmn	r2, #1
   12eec:	beq	12f28 <__assert_fail@plt+0x19d0>
   12ef0:	ldr	r4, [r5, #4]
   12ef4:	b	12d48 <__assert_fail@plt+0x17f0>
   12ef8:	cmn	r4, #1
   12efc:	beq	12ca4 <__assert_fail@plt+0x174c>
   12f00:	mov	r1, r4
   12f04:	mov	r0, #-2147483648	; 0x80000000
   12f08:	bl	24f08 <__assert_fail@plt+0x139b0>
   12f0c:	cmp	r0, #1
   12f10:	bne	12ca4 <__assert_fail@plt+0x174c>
   12f14:	bl	12c28 <__assert_fail@plt+0x16d0>
   12f18:	mov	r0, #1
   12f1c:	str	r5, [fp, #200]	; 0xc8
   12f20:	add	sp, sp, #12
   12f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f28:	bl	1142c <__errno_location@plt>
   12f2c:	mov	r2, #5
   12f30:	ldr	r1, [pc, #40]	; 12f60 <__assert_fail@plt+0x1a08>
   12f34:	ldr	r4, [r0]
   12f38:	mov	r0, #0
   12f3c:	bl	112d0 <dcgettext@plt>
   12f40:	mov	r1, r4
   12f44:	mov	r2, r0
   12f48:	mov	r0, #0
   12f4c:	bl	11384 <error@plt>
   12f50:	bl	12744 <__assert_fail@plt+0x11ec>
   12f54:	andeq	r7, r3, r8, asr #3
   12f58:	strdeq	r1, [r0], -lr
   12f5c:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   12f60:	andeq	r5, r2, r4, lsr #11
   12f64:	push	{r4, r5, r6, r7, r8, lr}
   12f68:	mov	r6, r0
   12f6c:	ldr	r5, [pc, #216]	; 1304c <__assert_fail@plt+0x1af4>
   12f70:	mov	r7, r1
   12f74:	ldr	r4, [r5, #200]	; 0xc8
   12f78:	cmp	r4, #0
   12f7c:	beq	13024 <__assert_fail@plt+0x1acc>
   12f80:	ldrd	r0, [r4, #8]
   12f84:	cmp	r6, r0
   12f88:	sbcs	r3, r7, r1
   12f8c:	bge	12f9c <__assert_fail@plt+0x1a44>
   12f90:	b	13030 <__assert_fail@plt+0x1ad8>
   12f94:	ldrd	r0, [r3, #8]
   12f98:	mov	r4, r3
   12f9c:	ldr	ip, [r4, #24]
   12fa0:	adds	r2, r0, ip
   12fa4:	adc	r3, r1, ip, asr #31
   12fa8:	cmp	r6, r2
   12fac:	sbcs	r3, r7, r3
   12fb0:	blt	12ff8 <__assert_fail@plt+0x1aa0>
   12fb4:	ldr	r3, [r4, #40]	; 0x28
   12fb8:	cmp	r3, #0
   12fbc:	bne	12f94 <__assert_fail@plt+0x1a3c>
   12fc0:	ldrb	r3, [r5, #196]	; 0xc4
   12fc4:	cmp	r3, #0
   12fc8:	bne	13030 <__assert_fail@plt+0x1ad8>
   12fcc:	bl	12c5c <__assert_fail@plt+0x1704>
   12fd0:	cmp	r0, #0
   12fd4:	beq	13030 <__assert_fail@plt+0x1ad8>
   12fd8:	ldr	r3, [r4, #40]	; 0x28
   12fdc:	cmp	r3, #0
   12fe0:	bne	12f94 <__assert_fail@plt+0x1a3c>
   12fe4:	ldr	r3, [pc, #100]	; 13050 <__assert_fail@plt+0x1af8>
   12fe8:	ldr	r2, [pc, #100]	; 13054 <__assert_fail@plt+0x1afc>
   12fec:	ldr	r1, [pc, #100]	; 13058 <__assert_fail@plt+0x1b00>
   12ff0:	ldr	r0, [pc, #100]	; 1305c <__assert_fail@plt+0x1b04>
   12ff4:	bl	11558 <__assert_fail@plt>
   12ff8:	sub	r6, r6, r0
   12ffc:	cmp	r6, #79	; 0x4f
   13000:	ldr	r3, [r4, #32]
   13004:	ble	13018 <__assert_fail@plt+0x1ac0>
   13008:	sub	r6, r6, #80	; 0x50
   1300c:	cmp	r6, #79	; 0x4f
   13010:	ldr	r3, [r3, #652]	; 0x28c
   13014:	bgt	13008 <__assert_fail@plt+0x1ab0>
   13018:	add	r6, r3, r6, lsl #3
   1301c:	add	r0, r6, #12
   13020:	pop	{r4, r5, r6, r7, r8, pc}
   13024:	ldrb	r3, [r5, #196]	; 0xc4
   13028:	cmp	r3, #0
   1302c:	beq	13038 <__assert_fail@plt+0x1ae0>
   13030:	mov	r0, #0
   13034:	pop	{r4, r5, r6, r7, r8, pc}
   13038:	bl	12c5c <__assert_fail@plt+0x1704>
   1303c:	cmp	r0, #0
   13040:	beq	13030 <__assert_fail@plt+0x1ad8>
   13044:	ldr	r4, [r5, #200]	; 0xc8
   13048:	b	12f80 <__assert_fail@plt+0x1a28>
   1304c:	andeq	r7, r3, r8, asr #3
   13050:	andeq	r5, r2, r8, lsl r4
   13054:	andeq	r0, r0, r7, asr #4
   13058:			; <UNDEFINED> instruction: 0x000255b0
   1305c:	andeq	r5, r2, r0, asr #11
   13060:	push	{r4, lr}
   13064:	ldr	r4, [pc, #88]	; 130c4 <__assert_fail@plt+0x1b6c>
   13068:	ldr	r3, [r4, #200]	; 0xc8
   1306c:	cmp	r3, #0
   13070:	beq	1307c <__assert_fail@plt+0x1b24>
   13074:	ldrd	r0, [r3, #16]
   13078:	pop	{r4, pc}
   1307c:	ldrb	r3, [r4, #196]	; 0xc4
   13080:	cmp	r3, #0
   13084:	beq	130b0 <__assert_fail@plt+0x1b58>
   13088:	bl	1142c <__errno_location@plt>
   1308c:	mov	r2, #5
   13090:	ldr	r1, [pc, #48]	; 130c8 <__assert_fail@plt+0x1b70>
   13094:	ldr	r4, [r0]
   13098:	mov	r0, #0
   1309c:	bl	112d0 <dcgettext@plt>
   130a0:	mov	r1, r4
   130a4:	mov	r2, r0
   130a8:	mov	r0, #1
   130ac:	bl	11384 <error@plt>
   130b0:	bl	12c5c <__assert_fail@plt+0x1704>
   130b4:	cmp	r0, #0
   130b8:	beq	13088 <__assert_fail@plt+0x1b30>
   130bc:	ldr	r3, [r4, #200]	; 0xc8
   130c0:	b	13074 <__assert_fail@plt+0x1b1c>
   130c4:	andeq	r7, r3, r8, asr #3
   130c8:	andeq	r5, r2, r4, asr #11
   130cc:	push	{r4, r6, r7, lr}
   130d0:	ldr	r4, [pc, #184]	; 13190 <__assert_fail@plt+0x1c38>
   130d4:	ldr	r0, [r4, #204]	; 0xcc
   130d8:	cmp	r0, #0
   130dc:	beq	130ec <__assert_fail@plt+0x1b94>
   130e0:	bl	12670 <__assert_fail@plt+0x1118>
   130e4:	mov	r3, #0
   130e8:	str	r3, [r4, #204]	; 0xcc
   130ec:	ldr	r2, [r4, #200]	; 0xc8
   130f0:	cmp	r2, #0
   130f4:	beq	13168 <__assert_fail@plt+0x1c10>
   130f8:	ldrd	r6, [r2, #16]
   130fc:	ldrd	r0, [r4, #208]	; 0xd0
   13100:	cmp	r0, r6
   13104:	sbcs	r3, r1, r7
   13108:	strdlt	r6, [r4, #208]	; 0xd0
   1310c:	ldr	r1, [r2, #36]	; 0x24
   13110:	adds	r6, r6, #1
   13114:	adc	r7, r7, #0
   13118:	ldr	r3, [r1, #8]
   1311c:	ldr	r0, [r1]
   13120:	add	r3, r3, #1
   13124:	cmp	r3, r0
   13128:	add	r0, r1, r3, lsl #3
   1312c:	strd	r6, [r2, #16]
   13130:	add	r0, r0, #4
   13134:	str	r3, [r1, #8]
   13138:	popne	{r4, r6, r7, pc}
   1313c:	ldr	r3, [r1, #652]	; 0x28c
   13140:	cmp	r3, #0
   13144:	str	r3, [r2, #36]	; 0x24
   13148:	beq	13158 <__assert_fail@plt+0x1c00>
   1314c:	ldr	r3, [r3]
   13150:	cmp	r3, #0
   13154:	popne	{r4, r6, r7, pc}
   13158:	ldr	r3, [r2, #40]	; 0x28
   1315c:	str	r2, [r4, #204]	; 0xcc
   13160:	str	r3, [r4, #200]	; 0xc8
   13164:	pop	{r4, r6, r7, pc}
   13168:	ldrb	r3, [r4, #196]	; 0xc4
   1316c:	cmp	r3, #0
   13170:	beq	1317c <__assert_fail@plt+0x1c24>
   13174:	mov	r0, #0
   13178:	pop	{r4, r6, r7, pc}
   1317c:	bl	12c5c <__assert_fail@plt+0x1704>
   13180:	cmp	r0, #0
   13184:	beq	13174 <__assert_fail@plt+0x1c1c>
   13188:	ldr	r2, [r4, #200]	; 0xc8
   1318c:	b	130f8 <__assert_fail@plt+0x1ba0>
   13190:	andeq	r7, r3, r8, asr #3
   13194:	push	{r4, lr}
   13198:	b	131a0 <__assert_fail@plt+0x1c48>
   1319c:	bl	12924 <__assert_fail@plt+0x13cc>
   131a0:	bl	130cc <__assert_fail@plt+0x1b74>
   131a4:	cmp	r0, #0
   131a8:	bne	1319c <__assert_fail@plt+0x1c44>
   131ac:	pop	{r4, pc}
   131b0:	ldr	r4, [pc, #204]	; 13284 <__assert_fail@plt+0x1d2c>
   131b4:	push	{r7, lr}
   131b8:	sub	sp, sp, #32
   131bc:	mov	sl, r0
   131c0:	mov	r6, r2
   131c4:	ldr	r1, [pc, #188]	; 13288 <__assert_fail@plt+0x1d30>
   131c8:	mov	r2, #5
   131cc:	mov	r0, #0
   131d0:	mov	r7, r3
   131d4:	ldr	r8, [r4]
   131d8:	ldrb	r5, [sp, #40]	; 0x28
   131dc:	bl	112d0 <dcgettext@plt>
   131e0:	ldr	r3, [pc, #164]	; 1328c <__assert_fail@plt+0x1d34>
   131e4:	ldr	r2, [sl]
   131e8:	ldr	r1, [pc, #160]	; 13290 <__assert_fail@plt+0x1d38>
   131ec:	ldr	r3, [r3, #216]	; 0xd8
   131f0:	ldr	sl, [r1]
   131f4:	mov	r9, r0
   131f8:	ldr	r0, [r3, r2, lsl #2]
   131fc:	bl	15990 <__assert_fail@plt+0x4438>
   13200:	mov	r3, sl
   13204:	mov	r2, r9
   13208:	mov	r1, #1
   1320c:	str	r0, [sp]
   13210:	mov	r0, r8
   13214:	bl	1148c <__fprintf_chk@plt>
   13218:	orrs	r3, r6, r7
   1321c:	beq	13268 <__assert_fail@plt+0x1d10>
   13220:	mov	r2, #5
   13224:	ldr	r1, [pc, #104]	; 13294 <__assert_fail@plt+0x1d3c>
   13228:	mov	r0, #0
   1322c:	ldr	r4, [r4]
   13230:	bl	112d0 <dcgettext@plt>
   13234:	add	r2, sp, #8
   13238:	mov	r1, r7
   1323c:	mov	r8, r0
   13240:	mov	r0, r6
   13244:	bl	13a00 <__assert_fail@plt+0x24a8>
   13248:	mov	r2, r8
   1324c:	mov	r1, #1
   13250:	mov	r3, r0
   13254:	mov	r0, r4
   13258:	bl	1148c <__fprintf_chk@plt>
   1325c:	cmp	r5, #0
   13260:	beq	13278 <__assert_fail@plt+0x1d20>
   13264:	bl	12744 <__assert_fail@plt+0x11ec>
   13268:	ldr	r1, [r4]
   1326c:	mov	r0, #10
   13270:	bl	114ec <fputc@plt>
   13274:	b	1325c <__assert_fail@plt+0x1d04>
   13278:	bl	13194 <__assert_fail@plt+0x1c3c>
   1327c:	bl	12794 <__assert_fail@plt+0x123c>
   13280:	b	13264 <__assert_fail@plt+0x1d0c>
   13284:			; <UNDEFINED> instruction: 0x000371b8
   13288:	ldrdeq	r5, [r2], -r8
   1328c:	andeq	r7, r3, r8, asr #3
   13290:			; <UNDEFINED> instruction: 0x000372b8
   13294:	andeq	r5, r2, ip, ror r5
   13298:	subs	r5, r0, #0
   1329c:	push	{r7, lr}
   132a0:	sub	sp, sp, #56	; 0x38
   132a4:	beq	132e0 <__assert_fail@plt+0x1d88>
   132a8:	ldr	r3, [pc, #756]	; 135a4 <__assert_fail@plt+0x204c>
   132ac:	mov	r2, #5
   132b0:	ldr	r1, [pc, #752]	; 135a8 <__assert_fail@plt+0x2050>
   132b4:	mov	r0, #0
   132b8:	ldr	r4, [r3]
   132bc:	bl	112d0 <dcgettext@plt>
   132c0:	ldr	r3, [pc, #740]	; 135ac <__assert_fail@plt+0x2054>
   132c4:	mov	r1, #1
   132c8:	ldr	r3, [r3]
   132cc:	mov	r2, r0
   132d0:	mov	r0, r4
   132d4:	bl	1148c <__fprintf_chk@plt>
   132d8:	mov	r0, r5
   132dc:	bl	11408 <exit@plt>
   132e0:	mov	r2, #5
   132e4:	ldr	r1, [pc, #708]	; 135b0 <__assert_fail@plt+0x2058>
   132e8:	bl	112d0 <dcgettext@plt>
   132ec:	ldr	r3, [pc, #696]	; 135ac <__assert_fail@plt+0x2054>
   132f0:	ldr	r7, [pc, #700]	; 135b4 <__assert_fail@plt+0x205c>
   132f4:	ldr	r4, [pc, #700]	; 135b8 <__assert_fail@plt+0x2060>
   132f8:	ldr	r2, [r3]
   132fc:	mov	r1, r0
   13300:	mov	r0, #1
   13304:	bl	11474 <__printf_chk@plt>
   13308:	mov	r2, #5
   1330c:	ldr	r1, [pc, #680]	; 135bc <__assert_fail@plt+0x2064>
   13310:	mov	r0, r5
   13314:	bl	112d0 <dcgettext@plt>
   13318:	ldr	r1, [r7]
   1331c:	bl	111bc <fputs_unlocked@plt>
   13320:	mov	r2, #5
   13324:	ldr	r1, [pc, #660]	; 135c0 <__assert_fail@plt+0x2068>
   13328:	mov	r0, r5
   1332c:	bl	112d0 <dcgettext@plt>
   13330:	ldr	r1, [r7]
   13334:	bl	111bc <fputs_unlocked@plt>
   13338:	mov	r2, #5
   1333c:	ldr	r1, [pc, #640]	; 135c4 <__assert_fail@plt+0x206c>
   13340:	mov	r0, r5
   13344:	bl	112d0 <dcgettext@plt>
   13348:	ldr	r1, [r7]
   1334c:	bl	111bc <fputs_unlocked@plt>
   13350:	mov	r2, #5
   13354:	ldr	r1, [pc, #620]	; 135c8 <__assert_fail@plt+0x2070>
   13358:	mov	r0, r5
   1335c:	bl	112d0 <dcgettext@plt>
   13360:	ldr	r1, [r7]
   13364:	bl	111bc <fputs_unlocked@plt>
   13368:	mov	r2, #5
   1336c:	ldr	r1, [pc, #600]	; 135cc <__assert_fail@plt+0x2074>
   13370:	mov	r0, r5
   13374:	bl	112d0 <dcgettext@plt>
   13378:	ldr	r1, [r7]
   1337c:	bl	111bc <fputs_unlocked@plt>
   13380:	mov	r2, #5
   13384:	ldr	r1, [pc, #580]	; 135d0 <__assert_fail@plt+0x2078>
   13388:	mov	r0, r5
   1338c:	bl	112d0 <dcgettext@plt>
   13390:	ldr	r1, [r7]
   13394:	bl	111bc <fputs_unlocked@plt>
   13398:	mov	r2, #5
   1339c:	ldr	r1, [pc, #560]	; 135d4 <__assert_fail@plt+0x207c>
   133a0:	mov	r0, r5
   133a4:	bl	112d0 <dcgettext@plt>
   133a8:	ldr	r1, [r7]
   133ac:	bl	111bc <fputs_unlocked@plt>
   133b0:	mov	r2, #5
   133b4:	ldr	r1, [pc, #540]	; 135d8 <__assert_fail@plt+0x2080>
   133b8:	mov	r0, r5
   133bc:	bl	112d0 <dcgettext@plt>
   133c0:	ldr	r1, [r7]
   133c4:	bl	111bc <fputs_unlocked@plt>
   133c8:	mov	r2, #5
   133cc:	ldr	r1, [pc, #520]	; 135dc <__assert_fail@plt+0x2084>
   133d0:	mov	r0, r5
   133d4:	bl	112d0 <dcgettext@plt>
   133d8:	ldr	r1, [r7]
   133dc:	bl	111bc <fputs_unlocked@plt>
   133e0:	ldm	r4!, {r0, r1, r2, r3}
   133e4:	mov	lr, sp
   133e8:	stmia	lr!, {r0, r1, r2, r3}
   133ec:	ldm	r4!, {r0, r1, r2, r3}
   133f0:	ldr	ip, [sp]
   133f4:	stmia	lr!, {r0, r1, r2, r3}
   133f8:	cmp	ip, #0
   133fc:	ldm	r4!, {r0, r1, r2, r3}
   13400:	stmia	lr!, {r0, r1, r2, r3}
   13404:	ldm	r4, {r0, r1}
   13408:	moveq	r4, sp
   1340c:	stm	lr, {r0, r1}
   13410:	beq	13440 <__assert_fail@plt+0x1ee8>
   13414:	ldr	r6, [pc, #452]	; 135e0 <__assert_fail@plt+0x2088>
   13418:	mov	r4, sp
   1341c:	b	1342c <__assert_fail@plt+0x1ed4>
   13420:	ldr	ip, [r4, #8]!
   13424:	cmp	ip, #0
   13428:	beq	13440 <__assert_fail@plt+0x1ee8>
   1342c:	mov	r1, ip
   13430:	mov	r0, r6
   13434:	bl	111f8 <strcmp@plt>
   13438:	cmp	r0, #0
   1343c:	bne	13420 <__assert_fail@plt+0x1ec8>
   13440:	ldr	r4, [r4, #4]
   13444:	mov	r2, #5
   13448:	cmp	r4, #0
   1344c:	ldr	r1, [pc, #400]	; 135e4 <__assert_fail@plt+0x208c>
   13450:	beq	134f8 <__assert_fail@plt+0x1fa0>
   13454:	mov	r0, #0
   13458:	bl	112d0 <dcgettext@plt>
   1345c:	ldr	r3, [pc, #388]	; 135e8 <__assert_fail@plt+0x2090>
   13460:	ldr	r2, [pc, #388]	; 135ec <__assert_fail@plt+0x2094>
   13464:	mov	r1, r0
   13468:	mov	r0, #1
   1346c:	bl	11474 <__printf_chk@plt>
   13470:	mov	r1, #0
   13474:	mov	r0, #5
   13478:	bl	114bc <setlocale@plt>
   1347c:	cmp	r0, #0
   13480:	ldreq	r6, [pc, #344]	; 135e0 <__assert_fail@plt+0x2088>
   13484:	beq	134a0 <__assert_fail@plt+0x1f48>
   13488:	mov	r2, #3
   1348c:	ldr	r1, [pc, #348]	; 135f0 <__assert_fail@plt+0x2098>
   13490:	bl	11528 <strncmp@plt>
   13494:	ldr	r6, [pc, #324]	; 135e0 <__assert_fail@plt+0x2088>
   13498:	cmp	r0, #0
   1349c:	bne	13588 <__assert_fail@plt+0x2030>
   134a0:	mov	r2, #5
   134a4:	ldr	r1, [pc, #328]	; 135f4 <__assert_fail@plt+0x209c>
   134a8:	mov	r0, #0
   134ac:	bl	112d0 <dcgettext@plt>
   134b0:	ldr	r3, [pc, #296]	; 135e0 <__assert_fail@plt+0x2088>
   134b4:	ldr	r2, [pc, #300]	; 135e8 <__assert_fail@plt+0x2090>
   134b8:	mov	r1, r0
   134bc:	mov	r0, #1
   134c0:	bl	11474 <__printf_chk@plt>
   134c4:	mov	r2, #5
   134c8:	ldr	r1, [pc, #296]	; 135f8 <__assert_fail@plt+0x20a0>
   134cc:	mov	r0, #0
   134d0:	bl	112d0 <dcgettext@plt>
   134d4:	ldr	r2, [pc, #288]	; 135fc <__assert_fail@plt+0x20a4>
   134d8:	cmp	r4, r6
   134dc:	ldr	r3, [pc, #284]	; 13600 <__assert_fail@plt+0x20a8>
   134e0:	movne	r3, r2
   134e4:	mov	r1, r0
   134e8:	mov	r2, r4
   134ec:	mov	r0, #1
   134f0:	bl	11474 <__printf_chk@plt>
   134f4:	b	132d8 <__assert_fail@plt+0x1d80>
   134f8:	mov	r0, r4
   134fc:	bl	112d0 <dcgettext@plt>
   13500:	ldr	r3, [pc, #224]	; 135e8 <__assert_fail@plt+0x2090>
   13504:	ldr	r2, [pc, #224]	; 135ec <__assert_fail@plt+0x2094>
   13508:	mov	r1, r0
   1350c:	mov	r0, #1
   13510:	bl	11474 <__printf_chk@plt>
   13514:	mov	r1, r4
   13518:	mov	r0, #5
   1351c:	bl	114bc <setlocale@plt>
   13520:	cmp	r0, #0
   13524:	beq	1353c <__assert_fail@plt+0x1fe4>
   13528:	mov	r2, #3
   1352c:	ldr	r1, [pc, #188]	; 135f0 <__assert_fail@plt+0x2098>
   13530:	bl	11528 <strncmp@plt>
   13534:	cmp	r0, #0
   13538:	bne	13580 <__assert_fail@plt+0x2028>
   1353c:	mov	r2, #5
   13540:	ldr	r1, [pc, #172]	; 135f4 <__assert_fail@plt+0x209c>
   13544:	mov	r0, #0
   13548:	bl	112d0 <dcgettext@plt>
   1354c:	ldr	r3, [pc, #140]	; 135e0 <__assert_fail@plt+0x2088>
   13550:	ldr	r2, [pc, #144]	; 135e8 <__assert_fail@plt+0x2090>
   13554:	mov	r4, r3
   13558:	mov	r1, r0
   1355c:	mov	r0, #1
   13560:	bl	11474 <__printf_chk@plt>
   13564:	ldr	r1, [pc, #140]	; 135f8 <__assert_fail@plt+0x20a0>
   13568:	mov	r2, #5
   1356c:	mov	r0, #0
   13570:	bl	112d0 <dcgettext@plt>
   13574:	ldr	r3, [pc, #132]	; 13600 <__assert_fail@plt+0x20a8>
   13578:	mov	r1, r0
   1357c:	b	134e8 <__assert_fail@plt+0x1f90>
   13580:	ldr	r6, [pc, #88]	; 135e0 <__assert_fail@plt+0x2088>
   13584:	mov	r4, r6
   13588:	mov	r2, #5
   1358c:	ldr	r1, [pc, #112]	; 13604 <__assert_fail@plt+0x20ac>
   13590:	mov	r0, #0
   13594:	bl	112d0 <dcgettext@plt>
   13598:	ldr	r1, [r7]
   1359c:	bl	111bc <fputs_unlocked@plt>
   135a0:	b	134a0 <__assert_fail@plt+0x1f48>
   135a4:			; <UNDEFINED> instruction: 0x000371b8
   135a8:	strdeq	r5, [r2], -r8
   135ac:			; <UNDEFINED> instruction: 0x000372b8
   135b0:	andeq	r5, r2, r0, lsr #12
   135b4:			; <UNDEFINED> instruction: 0x000371bc
   135b8:	andeq	r5, r2, r4, lsr #8
   135bc:	andeq	r5, r2, r8, asr #12
   135c0:	ldrdeq	r5, [r2], -r0
   135c4:	strdeq	r5, [r2], -r4
   135c8:	andeq	r5, r2, r0, asr #14
   135cc:	strdeq	r5, [r2], -ip
   135d0:	andeq	r5, r2, r0, asr #16
   135d4:	andeq	r5, r2, r8, lsl #18
   135d8:	andeq	r5, r2, r8, lsr r9
   135dc:	andeq	r5, r2, r0, ror r9
   135e0:	strdeq	r5, [r2], -r0
   135e4:	andeq	r5, r2, r8, lsr #22
   135e8:	andeq	r5, r2, r0, asr #22
   135ec:	andeq	r5, r2, r8, ror #22
   135f0:	andeq	r5, r2, r8, ror fp
   135f4:	andeq	r5, r2, r4, asr #23
   135f8:	andeq	r5, r2, r0, ror #23
   135fc:	andeq	r5, r2, r4, lsr r9
   13600:	andeq	r5, r2, r4, ror pc
   13604:	andeq	r5, r2, ip, ror fp
   13608:	ldr	r3, [pc, #4]	; 13614 <__assert_fail@plt+0x20bc>
   1360c:	str	r0, [r3]
   13610:	bx	lr
   13614:			; <UNDEFINED> instruction: 0x000372b0
   13618:	ldr	r3, [pc, #4]	; 13624 <__assert_fail@plt+0x20cc>
   1361c:	strb	r0, [r3, #4]
   13620:	bx	lr
   13624:			; <UNDEFINED> instruction: 0x000372b0
   13628:	ldr	r3, [pc, #192]	; 136f0 <__assert_fail@plt+0x2198>
   1362c:	push	{r4, r5, r6, lr}
   13630:	sub	sp, sp, #8
   13634:	ldr	r0, [r3]
   13638:	bl	2481c <__assert_fail@plt+0x132c4>
   1363c:	cmp	r0, #0
   13640:	beq	13664 <__assert_fail@plt+0x210c>
   13644:	ldr	r4, [pc, #168]	; 136f4 <__assert_fail@plt+0x219c>
   13648:	ldrb	r3, [r4, #4]
   1364c:	cmp	r3, #0
   13650:	beq	13680 <__assert_fail@plt+0x2128>
   13654:	bl	1142c <__errno_location@plt>
   13658:	ldr	r3, [r0]
   1365c:	cmp	r3, #32
   13660:	bne	13680 <__assert_fail@plt+0x2128>
   13664:	ldr	r3, [pc, #140]	; 136f8 <__assert_fail@plt+0x21a0>
   13668:	ldr	r0, [r3]
   1366c:	bl	2481c <__assert_fail@plt+0x132c4>
   13670:	cmp	r0, #0
   13674:	bne	136c8 <__assert_fail@plt+0x2170>
   13678:	add	sp, sp, #8
   1367c:	pop	{r4, r5, r6, pc}
   13680:	mov	r2, #5
   13684:	ldr	r1, [pc, #112]	; 136fc <__assert_fail@plt+0x21a4>
   13688:	mov	r0, #0
   1368c:	bl	112d0 <dcgettext@plt>
   13690:	ldr	r4, [r4]
   13694:	cmp	r4, #0
   13698:	mov	r5, r0
   1369c:	beq	136d4 <__assert_fail@plt+0x217c>
   136a0:	bl	1142c <__errno_location@plt>
   136a4:	ldr	r6, [r0]
   136a8:	mov	r0, r4
   136ac:	bl	157f8 <__assert_fail@plt+0x42a0>
   136b0:	mov	r1, r6
   136b4:	str	r5, [sp]
   136b8:	ldr	r2, [pc, #64]	; 13700 <__assert_fail@plt+0x21a8>
   136bc:	mov	r3, r0
   136c0:	mov	r0, #0
   136c4:	bl	11384 <error@plt>
   136c8:	ldr	r3, [pc, #52]	; 13704 <__assert_fail@plt+0x21ac>
   136cc:	ldr	r0, [r3]
   136d0:	bl	11258 <_exit@plt>
   136d4:	bl	1142c <__errno_location@plt>
   136d8:	mov	r3, r5
   136dc:	ldr	r2, [pc, #36]	; 13708 <__assert_fail@plt+0x21b0>
   136e0:	ldr	r1, [r0]
   136e4:	mov	r0, r4
   136e8:	bl	11384 <error@plt>
   136ec:	b	136c8 <__assert_fail@plt+0x2170>
   136f0:			; <UNDEFINED> instruction: 0x000371bc
   136f4:			; <UNDEFINED> instruction: 0x000372b0
   136f8:			; <UNDEFINED> instruction: 0x000371b8
   136fc:	andeq	r6, r2, ip, asr r0
   13700:	andeq	r6, r2, r8, rrx
   13704:	andeq	r7, r3, r4, ror #2
   13708:	andeq	r5, r2, r0, lsl lr
   1370c:	push	{r4, r5, lr}
   13710:	sub	sp, sp, #12
   13714:	mov	r4, r0
   13718:	bl	11480 <fileno@plt>
   1371c:	cmp	r0, #0
   13720:	mov	r0, r4
   13724:	blt	137a0 <__assert_fail@plt+0x2248>
   13728:	bl	113c0 <__freading@plt>
   1372c:	cmp	r0, #0
   13730:	bne	1376c <__assert_fail@plt+0x2214>
   13734:	mov	r0, r4
   13738:	bl	13810 <__assert_fail@plt+0x22b8>
   1373c:	cmp	r0, #0
   13740:	beq	1379c <__assert_fail@plt+0x2244>
   13744:	bl	1142c <__errno_location@plt>
   13748:	mov	r5, r0
   1374c:	mov	r0, r4
   13750:	ldr	r4, [r5]
   13754:	bl	11498 <fclose@plt>
   13758:	cmp	r4, #0
   1375c:	mvnne	r0, #0
   13760:	strne	r4, [r5]
   13764:	add	sp, sp, #12
   13768:	pop	{r4, r5, pc}
   1376c:	mov	r0, r4
   13770:	bl	11480 <fileno@plt>
   13774:	mov	r3, #1
   13778:	str	r3, [sp]
   1377c:	mov	r2, #0
   13780:	mov	r3, #0
   13784:	bl	11348 <lseek64@plt>
   13788:	mvn	r3, #0
   1378c:	mvn	r2, #0
   13790:	cmp	r1, r3
   13794:	cmpeq	r0, r2
   13798:	bne	13734 <__assert_fail@plt+0x21dc>
   1379c:	mov	r0, r4
   137a0:	add	sp, sp, #12
   137a4:	pop	{r4, r5, lr}
   137a8:	b	11498 <fclose@plt>
   137ac:	mov	ip, r1
   137b0:	push	{r4, r5, r6, r7, r8, lr}
   137b4:	mov	r1, r2
   137b8:	mov	r5, r0
   137bc:	mov	r2, r3
   137c0:	mov	r0, ip
   137c4:	bl	11390 <open64@plt>
   137c8:	sub	r3, r5, r0
   137cc:	clz	r3, r3
   137d0:	lsr	r3, r3, #5
   137d4:	orrs	r3, r3, r0, lsr #31
   137d8:	mov	r4, r0
   137dc:	bne	13808 <__assert_fail@plt+0x22b0>
   137e0:	mov	r1, r5
   137e4:	bl	112e8 <dup2@plt>
   137e8:	mov	r7, r0
   137ec:	bl	1142c <__errno_location@plt>
   137f0:	mov	r5, r0
   137f4:	mov	r0, r4
   137f8:	ldr	r6, [r5]
   137fc:	mov	r4, r7
   13800:	bl	11540 <close@plt>
   13804:	str	r6, [r5]
   13808:	mov	r0, r4
   1380c:	pop	{r4, r5, r6, r7, r8, pc}
   13810:	push	{r4, lr}
   13814:	subs	r4, r0, #0
   13818:	sub	sp, sp, #8
   1381c:	beq	13838 <__assert_fail@plt+0x22e0>
   13820:	bl	113c0 <__freading@plt>
   13824:	cmp	r0, #0
   13828:	beq	13838 <__assert_fail@plt+0x22e0>
   1382c:	ldr	r3, [r4]
   13830:	tst	r3, #256	; 0x100
   13834:	bne	13848 <__assert_fail@plt+0x22f0>
   13838:	mov	r0, r4
   1383c:	add	sp, sp, #8
   13840:	pop	{r4, lr}
   13844:	b	1121c <fflush@plt>
   13848:	mov	r3, #1
   1384c:	str	r3, [sp]
   13850:	mov	r2, #0
   13854:	mov	r3, #0
   13858:	mov	r0, r4
   1385c:	bl	13960 <__assert_fail@plt+0x2408>
   13860:	mov	r0, r4
   13864:	add	sp, sp, #8
   13868:	pop	{r4, lr}
   1386c:	b	1121c <fflush@plt>
   13870:	push	{r4, r5, r6, lr}
   13874:	mov	r5, r1
   13878:	bl	11504 <fopen64@plt>
   1387c:	subs	r4, r0, #0
   13880:	beq	13890 <__assert_fail@plt+0x2338>
   13884:	bl	11480 <fileno@plt>
   13888:	cmp	r0, #2
   1388c:	bls	13898 <__assert_fail@plt+0x2340>
   13890:	mov	r0, r4
   13894:	pop	{r4, r5, r6, pc}
   13898:	bl	22f10 <__assert_fail@plt+0x119b8>
   1389c:	subs	r6, r0, #0
   138a0:	blt	138e8 <__assert_fail@plt+0x2390>
   138a4:	mov	r0, r4
   138a8:	bl	1370c <__assert_fail@plt+0x21b4>
   138ac:	cmp	r0, #0
   138b0:	bne	138c8 <__assert_fail@plt+0x2370>
   138b4:	mov	r1, r5
   138b8:	mov	r0, r6
   138bc:	bl	111a4 <fdopen@plt>
   138c0:	subs	r4, r0, #0
   138c4:	bne	13890 <__assert_fail@plt+0x2338>
   138c8:	bl	1142c <__errno_location@plt>
   138cc:	mov	r4, #0
   138d0:	mov	r5, r0
   138d4:	mov	r0, r6
   138d8:	ldr	r6, [r5]
   138dc:	bl	11540 <close@plt>
   138e0:	str	r6, [r5]
   138e4:	b	13890 <__assert_fail@plt+0x2338>
   138e8:	bl	1142c <__errno_location@plt>
   138ec:	mov	r5, r0
   138f0:	mov	r0, r4
   138f4:	ldr	r6, [r5]
   138f8:	mov	r4, #0
   138fc:	bl	1370c <__assert_fail@plt+0x21b4>
   13900:	str	r6, [r5]
   13904:	b	13890 <__assert_fail@plt+0x2338>
   13908:	push	{r4, r5, lr}
   1390c:	sub	sp, sp, #12
   13910:	mov	r5, r0
   13914:	bl	1142c <__errno_location@plt>
   13918:	mov	r2, #0
   1391c:	mov	r4, r0
   13920:	ldr	r3, [r0]
   13924:	str	r2, [r4]
   13928:	mov	r0, r5
   1392c:	str	r3, [sp]
   13930:	str	r3, [sp, #4]
   13934:	bl	11240 <free@plt>
   13938:	ldr	r3, [r4]
   1393c:	add	r2, sp, #8
   13940:	cmp	r3, #0
   13944:	moveq	r3, #4
   13948:	movne	r3, #0
   1394c:	add	r3, r2, r3
   13950:	ldr	r3, [r3, #-8]
   13954:	str	r3, [r4]
   13958:	add	sp, sp, #12
   1395c:	pop	{r4, r5, pc}
   13960:	push	{r4, r5, r6, r7, r8, lr}
   13964:	sub	sp, sp, #8
   13968:	ldmib	r0, {ip, lr}
   1396c:	mov	r4, r0
   13970:	ldr	r5, [sp, #32]
   13974:	cmp	lr, ip
   13978:	beq	13990 <__assert_fail@plt+0x2438>
   1397c:	str	r5, [sp, #32]
   13980:	mov	r0, r4
   13984:	add	sp, sp, #8
   13988:	pop	{r4, r5, r6, r7, r8, lr}
   1398c:	b	114a4 <fseeko64@plt>
   13990:	ldr	lr, [r0, #20]
   13994:	ldr	ip, [r0, #16]
   13998:	cmp	lr, ip
   1399c:	bne	1397c <__assert_fail@plt+0x2424>
   139a0:	ldr	r8, [r0, #36]	; 0x24
   139a4:	cmp	r8, #0
   139a8:	bne	1397c <__assert_fail@plt+0x2424>
   139ac:	mov	r6, r2
   139b0:	mov	r7, r3
   139b4:	bl	11480 <fileno@plt>
   139b8:	mov	r2, r6
   139bc:	mov	r3, r7
   139c0:	str	r5, [sp]
   139c4:	bl	11348 <lseek64@plt>
   139c8:	mvn	r3, #0
   139cc:	mvn	r2, #0
   139d0:	cmp	r1, r3
   139d4:	cmpeq	r0, r2
   139d8:	beq	139f8 <__assert_fail@plt+0x24a0>
   139dc:	ldr	r3, [r4]
   139e0:	strd	r0, [r4, #80]	; 0x50
   139e4:	mov	r0, r8
   139e8:	bic	r3, r3, #16
   139ec:	str	r3, [r4]
   139f0:	add	sp, sp, #8
   139f4:	pop	{r4, r5, r6, r7, r8, pc}
   139f8:	mvn	r0, #0
   139fc:	b	139f0 <__assert_fail@plt+0x2498>
   13a00:	cmp	r0, #0
   13a04:	sbcs	r3, r1, #0
   13a08:	mov	r3, #0
   13a0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13a10:	mov	r4, r0
   13a14:	mov	r5, r1
   13a18:	strb	r3, [r2, #20]
   13a1c:	add	r6, r2, #20
   13a20:	mov	r8, #10
   13a24:	mov	r9, #0
   13a28:	blt	13a78 <__assert_fail@plt+0x2520>
   13a2c:	mov	r0, r4
   13a30:	mov	r1, r5
   13a34:	mov	r2, r8
   13a38:	mov	r3, r9
   13a3c:	bl	25148 <__assert_fail@plt+0x13bf0>
   13a40:	mov	r0, r4
   13a44:	mov	r1, r5
   13a48:	mov	r3, r9
   13a4c:	add	r2, r2, #48	; 0x30
   13a50:	strb	r2, [r6, #-1]!
   13a54:	mov	r2, r8
   13a58:	bl	25148 <__assert_fail@plt+0x13bf0>
   13a5c:	mov	r4, r0
   13a60:	mov	r5, r1
   13a64:	orrs	r3, r4, r5
   13a68:	bne	13a2c <__assert_fail@plt+0x24d4>
   13a6c:	mov	r0, r6
   13a70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a74:	mov	r6, r7
   13a78:	mov	r0, r4
   13a7c:	mov	r1, r5
   13a80:	mov	r2, r8
   13a84:	mov	r3, r9
   13a88:	bl	25148 <__assert_fail@plt+0x13bf0>
   13a8c:	mov	r0, r4
   13a90:	mov	r1, r5
   13a94:	mov	r3, r9
   13a98:	sub	r7, r6, #1
   13a9c:	rsb	r2, r2, #48	; 0x30
   13aa0:	strb	r2, [r6, #-1]
   13aa4:	mov	r2, r8
   13aa8:	bl	25148 <__assert_fail@plt+0x13bf0>
   13aac:	mov	r4, r0
   13ab0:	mov	r5, r1
   13ab4:	orrs	r3, r4, r5
   13ab8:	bne	13a74 <__assert_fail@plt+0x251c>
   13abc:	mov	r3, #45	; 0x2d
   13ac0:	sub	r6, r6, #2
   13ac4:	strb	r3, [r7, #-1]
   13ac8:	mov	r0, r6
   13acc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ad0:	push	{r4, r5, r6, lr}
   13ad4:	subs	r4, r0, #0
   13ad8:	beq	13b4c <__assert_fail@plt+0x25f4>
   13adc:	mov	r1, #47	; 0x2f
   13ae0:	bl	114d4 <strrchr@plt>
   13ae4:	subs	r5, r0, #0
   13ae8:	beq	13b38 <__assert_fail@plt+0x25e0>
   13aec:	add	r6, r5, #1
   13af0:	sub	r3, r6, r4
   13af4:	cmp	r3, #6
   13af8:	ble	13b38 <__assert_fail@plt+0x25e0>
   13afc:	mov	r2, #7
   13b00:	ldr	r1, [pc, #96]	; 13b68 <__assert_fail@plt+0x2610>
   13b04:	sub	r0, r5, #6
   13b08:	bl	11528 <strncmp@plt>
   13b0c:	cmp	r0, #0
   13b10:	bne	13b38 <__assert_fail@plt+0x25e0>
   13b14:	mov	r2, #3
   13b18:	ldr	r1, [pc, #76]	; 13b6c <__assert_fail@plt+0x2614>
   13b1c:	mov	r0, r6
   13b20:	bl	11528 <strncmp@plt>
   13b24:	cmp	r0, #0
   13b28:	movne	r4, r6
   13b2c:	ldreq	r3, [pc, #60]	; 13b70 <__assert_fail@plt+0x2618>
   13b30:	addeq	r4, r5, #4
   13b34:	streq	r4, [r3]
   13b38:	ldr	r2, [pc, #52]	; 13b74 <__assert_fail@plt+0x261c>
   13b3c:	ldr	r3, [pc, #52]	; 13b78 <__assert_fail@plt+0x2620>
   13b40:	str	r4, [r2]
   13b44:	str	r4, [r3]
   13b48:	pop	{r4, r5, r6, pc}
   13b4c:	ldr	r3, [pc, #40]	; 13b7c <__assert_fail@plt+0x2624>
   13b50:	mov	r2, #55	; 0x37
   13b54:	mov	r1, #1
   13b58:	ldr	r3, [r3]
   13b5c:	ldr	r0, [pc, #28]	; 13b80 <__assert_fail@plt+0x2628>
   13b60:	bl	1133c <fwrite@plt>
   13b64:	bl	11534 <abort@plt>
   13b68:	andeq	r6, r2, r8, lsr #1
   13b6c:	strheq	r6, [r2], -r0
   13b70:	andeq	r7, r3, r8, lsr #3
   13b74:			; <UNDEFINED> instruction: 0x000372b8
   13b78:	andeq	r7, r3, ip, lsr #3
   13b7c:			; <UNDEFINED> instruction: 0x000371b8
   13b80:	andeq	r6, r2, r0, ror r0
   13b84:	push	{r4, r5, r6, lr}
   13b88:	mov	r2, #48	; 0x30
   13b8c:	mov	r4, r1
   13b90:	mov	r1, #0
   13b94:	mov	r5, r0
   13b98:	bl	1145c <memset@plt>
   13b9c:	cmp	r4, #10
   13ba0:	beq	13bb0 <__assert_fail@plt+0x2658>
   13ba4:	str	r4, [r5]
   13ba8:	mov	r0, r5
   13bac:	pop	{r4, r5, r6, pc}
   13bb0:	bl	11534 <abort@plt>
   13bb4:	push	{r4, r5, r6, lr}
   13bb8:	mov	r4, r0
   13bbc:	mov	r5, r1
   13bc0:	bl	24b34 <__assert_fail@plt+0x135dc>
   13bc4:	ldrb	r3, [r0]
   13bc8:	bic	r3, r3, #32
   13bcc:	cmp	r3, #85	; 0x55
   13bd0:	bne	13c30 <__assert_fail@plt+0x26d8>
   13bd4:	ldrb	r3, [r0, #1]
   13bd8:	bic	r3, r3, #32
   13bdc:	cmp	r3, #84	; 0x54
   13be0:	bne	13c6c <__assert_fail@plt+0x2714>
   13be4:	ldrb	r3, [r0, #2]
   13be8:	bic	r3, r3, #32
   13bec:	cmp	r3, #70	; 0x46
   13bf0:	bne	13c6c <__assert_fail@plt+0x2714>
   13bf4:	ldrb	r3, [r0, #3]
   13bf8:	cmp	r3, #45	; 0x2d
   13bfc:	bne	13c6c <__assert_fail@plt+0x2714>
   13c00:	ldrb	r3, [r0, #4]
   13c04:	cmp	r3, #56	; 0x38
   13c08:	bne	13c6c <__assert_fail@plt+0x2714>
   13c0c:	ldrb	r3, [r0, #5]
   13c10:	cmp	r3, #0
   13c14:	bne	13c6c <__assert_fail@plt+0x2714>
   13c18:	ldrb	r2, [r4]
   13c1c:	ldr	r3, [pc, #152]	; 13cbc <__assert_fail@plt+0x2764>
   13c20:	ldr	r0, [pc, #152]	; 13cc0 <__assert_fail@plt+0x2768>
   13c24:	cmp	r2, #96	; 0x60
   13c28:	movne	r0, r3
   13c2c:	pop	{r4, r5, r6, pc}
   13c30:	cmp	r3, #71	; 0x47
   13c34:	bne	13c6c <__assert_fail@plt+0x2714>
   13c38:	ldrb	r3, [r0, #1]
   13c3c:	bic	r3, r3, #32
   13c40:	cmp	r3, #66	; 0x42
   13c44:	bne	13c6c <__assert_fail@plt+0x2714>
   13c48:	ldrb	r3, [r0, #2]
   13c4c:	cmp	r3, #49	; 0x31
   13c50:	bne	13c6c <__assert_fail@plt+0x2714>
   13c54:	ldrb	r3, [r0, #3]
   13c58:	cmp	r3, #56	; 0x38
   13c5c:	bne	13c6c <__assert_fail@plt+0x2714>
   13c60:	ldrb	r3, [r0, #4]
   13c64:	cmp	r3, #48	; 0x30
   13c68:	beq	13c80 <__assert_fail@plt+0x2728>
   13c6c:	ldr	r3, [pc, #80]	; 13cc4 <__assert_fail@plt+0x276c>
   13c70:	cmp	r5, #9
   13c74:	ldr	r0, [pc, #76]	; 13cc8 <__assert_fail@plt+0x2770>
   13c78:	movne	r0, r3
   13c7c:	pop	{r4, r5, r6, pc}
   13c80:	ldrb	r3, [r0, #5]
   13c84:	cmp	r3, #51	; 0x33
   13c88:	bne	13c6c <__assert_fail@plt+0x2714>
   13c8c:	ldrb	r3, [r0, #6]
   13c90:	cmp	r3, #48	; 0x30
   13c94:	bne	13c6c <__assert_fail@plt+0x2714>
   13c98:	ldrb	r3, [r0, #7]
   13c9c:	cmp	r3, #0
   13ca0:	bne	13c6c <__assert_fail@plt+0x2714>
   13ca4:	ldrb	r2, [r4]
   13ca8:	ldr	r3, [pc, #28]	; 13ccc <__assert_fail@plt+0x2774>
   13cac:	ldr	r0, [pc, #28]	; 13cd0 <__assert_fail@plt+0x2778>
   13cb0:	cmp	r2, #96	; 0x60
   13cb4:	movne	r0, r3
   13cb8:	pop	{r4, r5, r6, pc}
   13cbc:	andeq	r6, r2, ip, lsl #2
   13cc0:	andeq	r6, r2, r8, lsl #2
   13cc4:	andeq	r5, r2, r4, asr #30
   13cc8:	andeq	r6, r2, r8, lsl r1
   13ccc:	andeq	r6, r2, r4, lsl r1
   13cd0:	andeq	r6, r2, r0, lsl r1
   13cd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cd8:	sub	sp, sp, #116	; 0x74
   13cdc:	mov	sl, r0
   13ce0:	str	r3, [sp, #24]
   13ce4:	mov	r3, #1
   13ce8:	mov	r8, r1
   13cec:	str	r2, [sp, #56]	; 0x38
   13cf0:	str	r3, [sp, #36]	; 0x24
   13cf4:	bl	11354 <__ctype_get_mb_cur_max@plt>
   13cf8:	ldr	r3, [sp, #156]	; 0x9c
   13cfc:	mov	fp, r8
   13d00:	mov	r2, #0
   13d04:	lsr	r3, r3, #1
   13d08:	and	r3, r3, #1
   13d0c:	str	r2, [sp, #68]	; 0x44
   13d10:	str	r3, [sp, #28]
   13d14:	str	r2, [sp, #40]	; 0x28
   13d18:	str	r2, [sp, #44]	; 0x2c
   13d1c:	str	r2, [sp, #52]	; 0x34
   13d20:	str	r2, [sp, #64]	; 0x40
   13d24:	str	r2, [sp, #72]	; 0x48
   13d28:	str	sl, [sp, #32]
   13d2c:	str	r0, [sp, #76]	; 0x4c
   13d30:	ldr	r3, [sp, #152]	; 0x98
   13d34:	cmp	r3, #10
   13d38:	ldrls	pc, [pc, r3, lsl #2]
   13d3c:	b	14efc <__assert_fail@plt+0x39a4>
   13d40:	andeq	r3, r1, ip, ror #26
   13d44:	andeq	r4, r1, r4, asr r0
   13d48:	andeq	r4, r1, r8, ror r0
   13d4c:	muleq	r1, ip, r0
   13d50:	andeq	r4, r1, r8, asr #3
   13d54:	muleq	r1, ip, r1
   13d58:	andeq	r4, r1, r4, ror r1
   13d5c:	strheq	r4, [r1], -r0
   13d60:	andeq	r4, r1, r8, asr #1
   13d64:	andeq	r4, r1, r8, asr #1
   13d68:	andeq	r4, r1, r8, asr #1
   13d6c:	mov	r3, #0
   13d70:	mov	r7, r3
   13d74:	str	r3, [sp, #28]
   13d78:	ldr	r3, [sp, #44]	; 0x2c
   13d7c:	mov	sl, #0
   13d80:	eor	r3, r3, #1
   13d84:	str	r3, [sp, #60]	; 0x3c
   13d88:	ldr	r3, [sp, #24]
   13d8c:	cmn	r3, #1
   13d90:	beq	142f4 <__assert_fail@plt+0x2d9c>
   13d94:	ldr	r3, [sp, #24]
   13d98:	subs	r5, r3, sl
   13d9c:	movne	r5, #1
   13da0:	cmp	r5, #0
   13da4:	beq	1430c <__assert_fail@plt+0x2db4>
   13da8:	ldr	r3, [sp, #152]	; 0x98
   13dac:	ldr	r8, [sp, #44]	; 0x2c
   13db0:	cmp	r3, #2
   13db4:	moveq	r8, #0
   13db8:	andne	r8, r8, #1
   13dbc:	ldr	r3, [sp, #52]	; 0x34
   13dc0:	adds	r9, r3, #0
   13dc4:	movne	r9, #1
   13dc8:	ands	r6, r9, r8
   13dcc:	beq	14774 <__assert_fail@plt+0x321c>
   13dd0:	ldr	r2, [sp, #52]	; 0x34
   13dd4:	ldr	r1, [sp, #24]
   13dd8:	cmp	r2, #1
   13ddc:	mov	r3, r2
   13de0:	movls	r3, #0
   13de4:	movhi	r3, #1
   13de8:	cmn	r1, #1
   13dec:	movne	r3, #0
   13df0:	cmp	r3, #0
   13df4:	add	r4, sl, r2
   13df8:	beq	13e08 <__assert_fail@plt+0x28b0>
   13dfc:	ldr	r0, [sp, #56]	; 0x38
   13e00:	bl	11414 <strlen@plt>
   13e04:	str	r0, [sp, #24]
   13e08:	ldr	r3, [sp, #24]
   13e0c:	cmp	r3, r4
   13e10:	ldr	r3, [sp, #56]	; 0x38
   13e14:	add	r3, r3, sl
   13e18:	str	r3, [sp, #48]	; 0x30
   13e1c:	bcc	14780 <__assert_fail@plt+0x3228>
   13e20:	mov	r0, r3
   13e24:	ldr	r2, [sp, #52]	; 0x34
   13e28:	ldr	r1, [sp, #64]	; 0x40
   13e2c:	bl	112b8 <memcmp@plt>
   13e30:	cmp	r0, #0
   13e34:	bne	14780 <__assert_fail@plt+0x3228>
   13e38:	ldr	r3, [sp, #28]
   13e3c:	cmp	r3, #0
   13e40:	bne	14ffc <__assert_fail@plt+0x3aa4>
   13e44:	ldr	r3, [sp, #48]	; 0x30
   13e48:	ldrb	r4, [r3]
   13e4c:	cmp	r4, #126	; 0x7e
   13e50:	ldrls	pc, [pc, r4, lsl #2]
   13e54:	b	14714 <__assert_fail@plt+0x31bc>
   13e58:	andeq	r4, r1, r8, lsr r5
   13e5c:	andeq	r4, r1, r4, lsl r7
   13e60:	andeq	r4, r1, r4, lsl r7
   13e64:	andeq	r4, r1, r4, lsl r7
   13e68:	andeq	r4, r1, r4, lsl r7
   13e6c:	andeq	r4, r1, r4, lsl r7
   13e70:	andeq	r4, r1, r4, lsl r7
   13e74:	andeq	r4, r1, ip, lsl r5
   13e78:	andeq	r4, r1, r0, lsl #10
   13e7c:	strdeq	r4, [r1], -ip
   13e80:	andeq	r4, r1, r0, ror #8
   13e84:	andeq	r4, r1, r4, asr #8
   13e88:	ldrdeq	r4, [r1], -r8
   13e8c:			; <UNDEFINED> instruction: 0x000146b4
   13e90:	andeq	r4, r1, r4, lsl r7
   13e94:	andeq	r4, r1, r4, lsl r7
   13e98:	andeq	r4, r1, r4, lsl r7
   13e9c:	andeq	r4, r1, r4, lsl r7
   13ea0:	andeq	r4, r1, r4, lsl r7
   13ea4:	andeq	r4, r1, r4, lsl r7
   13ea8:	andeq	r4, r1, r4, lsl r7
   13eac:	andeq	r4, r1, r4, lsl r7
   13eb0:	andeq	r4, r1, r4, lsl r7
   13eb4:	andeq	r4, r1, r4, lsl r7
   13eb8:	andeq	r4, r1, r4, lsl r7
   13ebc:	andeq	r4, r1, r4, lsl r7
   13ec0:	andeq	r4, r1, r4, lsl r7
   13ec4:	andeq	r4, r1, r4, lsl r7
   13ec8:	andeq	r4, r1, r4, lsl r7
   13ecc:	andeq	r4, r1, r4, lsl r7
   13ed0:	andeq	r4, r1, r4, lsl r7
   13ed4:	andeq	r4, r1, r4, lsl r7
   13ed8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13edc:	andeq	r4, r1, r8, lsr #12
   13ee0:	andeq	r4, r1, r8, lsr #12
   13ee4:	andeq	r4, r1, r8, lsr r2
   13ee8:	andeq	r4, r1, r8, lsr #12
   13eec:	andeq	r4, r1, r0, asr #13
   13ef0:	andeq	r4, r1, r8, lsr #12
   13ef4:	muleq	r1, r4, r6
   13ef8:	andeq	r4, r1, r8, lsr #12
   13efc:	andeq	r4, r1, r8, lsr #12
   13f00:	andeq	r4, r1, r8, lsr #12
   13f04:	andeq	r4, r1, r0, asr #13
   13f08:	andeq	r4, r1, r0, asr #13
   13f0c:	andeq	r4, r1, r0, asr #13
   13f10:	andeq	r4, r1, r0, asr #13
   13f14:	andeq	r4, r1, r0, asr #13
   13f18:	andeq	r4, r1, r0, asr #13
   13f1c:	andeq	r4, r1, r0, asr #13
   13f20:	andeq	r4, r1, r0, asr #13
   13f24:	andeq	r4, r1, r0, asr #13
   13f28:	andeq	r4, r1, r0, asr #13
   13f2c:	andeq	r4, r1, r0, asr #13
   13f30:	andeq	r4, r1, r0, asr #13
   13f34:	andeq	r4, r1, r0, asr #13
   13f38:	andeq	r4, r1, r0, asr #13
   13f3c:	andeq	r4, r1, r0, asr #13
   13f40:	andeq	r4, r1, r0, asr #13
   13f44:	andeq	r4, r1, r8, lsr #12
   13f48:	andeq	r4, r1, r8, lsr #12
   13f4c:	andeq	r4, r1, r8, lsr #12
   13f50:	andeq	r4, r1, r8, lsr #12
   13f54:	andeq	r4, r1, r4, ror #12
   13f58:	andeq	r4, r1, r4, lsl r7
   13f5c:	andeq	r4, r1, r0, asr #13
   13f60:	andeq	r4, r1, r0, asr #13
   13f64:	andeq	r4, r1, r0, asr #13
   13f68:	andeq	r4, r1, r0, asr #13
   13f6c:	andeq	r4, r1, r0, asr #13
   13f70:	andeq	r4, r1, r0, asr #13
   13f74:	andeq	r4, r1, r0, asr #13
   13f78:	andeq	r4, r1, r0, asr #13
   13f7c:	andeq	r4, r1, r0, asr #13
   13f80:	andeq	r4, r1, r0, asr #13
   13f84:	andeq	r4, r1, r0, asr #13
   13f88:	andeq	r4, r1, r0, asr #13
   13f8c:	andeq	r4, r1, r0, asr #13
   13f90:	andeq	r4, r1, r0, asr #13
   13f94:	andeq	r4, r1, r0, asr #13
   13f98:	andeq	r4, r1, r0, asr #13
   13f9c:	andeq	r4, r1, r0, asr #13
   13fa0:	andeq	r4, r1, r0, asr #13
   13fa4:	andeq	r4, r1, r0, asr #13
   13fa8:	andeq	r4, r1, r0, asr #13
   13fac:	andeq	r4, r1, r0, asr #13
   13fb0:	andeq	r4, r1, r0, asr #13
   13fb4:	andeq	r4, r1, r0, asr #13
   13fb8:	andeq	r4, r1, r0, asr #13
   13fbc:	andeq	r4, r1, r0, asr #13
   13fc0:	andeq	r4, r1, r0, asr #13
   13fc4:	andeq	r4, r1, r8, lsr #12
   13fc8:	andeq	r4, r1, r4, lsl #7
   13fcc:	andeq	r4, r1, r0, asr #13
   13fd0:	andeq	r4, r1, r8, lsr #12
   13fd4:	andeq	r4, r1, r0, asr #13
   13fd8:	andeq	r4, r1, r8, lsr #12
   13fdc:	andeq	r4, r1, r0, asr #13
   13fe0:	andeq	r4, r1, r0, asr #13
   13fe4:	andeq	r4, r1, r0, asr #13
   13fe8:	andeq	r4, r1, r0, asr #13
   13fec:	andeq	r4, r1, r0, asr #13
   13ff0:	andeq	r4, r1, r0, asr #13
   13ff4:	andeq	r4, r1, r0, asr #13
   13ff8:	andeq	r4, r1, r0, asr #13
   13ffc:	andeq	r4, r1, r0, asr #13
   14000:	andeq	r4, r1, r0, asr #13
   14004:	andeq	r4, r1, r0, asr #13
   14008:	andeq	r4, r1, r0, asr #13
   1400c:	andeq	r4, r1, r0, asr #13
   14010:	andeq	r4, r1, r0, asr #13
   14014:	andeq	r4, r1, r0, asr #13
   14018:	andeq	r4, r1, r0, asr #13
   1401c:	andeq	r4, r1, r0, asr #13
   14020:	andeq	r4, r1, r0, asr #13
   14024:	andeq	r4, r1, r0, asr #13
   14028:	andeq	r4, r1, r0, asr #13
   1402c:	andeq	r4, r1, r0, asr #13
   14030:	andeq	r4, r1, r0, asr #13
   14034:	andeq	r4, r1, r0, asr #13
   14038:	andeq	r4, r1, r0, asr #13
   1403c:	andeq	r4, r1, r0, asr #13
   14040:	andeq	r4, r1, r0, asr #13
   14044:	andeq	r4, r1, r8, lsl r2
   14048:	andeq	r4, r1, r8, lsr #12
   1404c:	andeq	r4, r1, r8, lsl r2
   14050:	andeq	r4, r1, r8, lsr r2
   14054:	mov	r3, #1
   14058:	str	r3, [sp, #28]
   1405c:	str	r3, [sp, #52]	; 0x34
   14060:	ldr	r3, [pc, #4000]	; 15008 <__assert_fail@plt+0x3ab0>
   14064:	mov	r7, #0
   14068:	str	r3, [sp, #64]	; 0x40
   1406c:	mov	r3, #2
   14070:	str	r3, [sp, #152]	; 0x98
   14074:	b	13d78 <__assert_fail@plt+0x2820>
   14078:	ldr	r3, [sp, #28]
   1407c:	cmp	r3, #0
   14080:	beq	141dc <__assert_fail@plt+0x2c84>
   14084:	mov	r3, #1
   14088:	str	r3, [sp, #52]	; 0x34
   1408c:	ldr	r3, [pc, #3956]	; 15008 <__assert_fail@plt+0x3ab0>
   14090:	mov	r7, #0
   14094:	str	r3, [sp, #64]	; 0x40
   14098:	b	13d78 <__assert_fail@plt+0x2820>
   1409c:	mov	r3, #1
   140a0:	str	r3, [sp, #44]	; 0x2c
   140a4:	str	r3, [sp, #52]	; 0x34
   140a8:	str	r3, [sp, #28]
   140ac:	b	14060 <__assert_fail@plt+0x2b08>
   140b0:	mov	r3, #0
   140b4:	str	r3, [sp, #28]
   140b8:	mov	r3, #1
   140bc:	str	r3, [sp, #44]	; 0x2c
   140c0:	mov	r7, #0
   140c4:	b	13d78 <__assert_fail@plt+0x2820>
   140c8:	ldr	r3, [sp, #152]	; 0x98
   140cc:	cmp	r3, #10
   140d0:	beq	14114 <__assert_fail@plt+0x2bbc>
   140d4:	mov	r2, #5
   140d8:	ldr	r1, [pc, #3884]	; 1500c <__assert_fail@plt+0x3ab4>
   140dc:	mov	r0, #0
   140e0:	bl	112d0 <dcgettext@plt>
   140e4:	ldr	r2, [pc, #3872]	; 1500c <__assert_fail@plt+0x3ab4>
   140e8:	cmp	r0, r2
   140ec:	str	r0, [sp, #164]	; 0xa4
   140f0:	beq	150f8 <__assert_fail@plt+0x3ba0>
   140f4:	mov	r2, #5
   140f8:	ldr	r1, [pc, #3848]	; 15008 <__assert_fail@plt+0x3ab0>
   140fc:	mov	r0, #0
   14100:	bl	112d0 <dcgettext@plt>
   14104:	ldr	r2, [pc, #3836]	; 15008 <__assert_fail@plt+0x3ab0>
   14108:	cmp	r0, r2
   1410c:	str	r0, [sp, #168]	; 0xa8
   14110:	beq	150e8 <__assert_fail@plt+0x3b90>
   14114:	ldr	r7, [sp, #28]
   14118:	cmp	r7, #0
   1411c:	movne	r7, #0
   14120:	bne	14154 <__assert_fail@plt+0x2bfc>
   14124:	ldr	r3, [sp, #164]	; 0xa4
   14128:	ldrb	r3, [r3]
   1412c:	cmp	r3, #0
   14130:	beq	15108 <__assert_fail@plt+0x3bb0>
   14134:	ldr	r2, [sp, #164]	; 0xa4
   14138:	ldr	r1, [sp, #32]
   1413c:	cmp	fp, r7
   14140:	strbhi	r3, [r1, r7]
   14144:	ldrb	r3, [r2, #1]!
   14148:	add	r7, r7, #1
   1414c:	cmp	r3, #0
   14150:	bne	1413c <__assert_fail@plt+0x2be4>
   14154:	ldr	r0, [sp, #168]	; 0xa8
   14158:	bl	11414 <strlen@plt>
   1415c:	ldr	r3, [sp, #168]	; 0xa8
   14160:	str	r3, [sp, #64]	; 0x40
   14164:	mov	r3, #1
   14168:	str	r3, [sp, #44]	; 0x2c
   1416c:	str	r0, [sp, #52]	; 0x34
   14170:	b	13d78 <__assert_fail@plt+0x2820>
   14174:	mov	r3, #1
   14178:	str	r3, [sp, #44]	; 0x2c
   1417c:	str	r3, [sp, #52]	; 0x34
   14180:	str	r3, [sp, #28]
   14184:	ldr	r3, [pc, #3716]	; 15010 <__assert_fail@plt+0x3ab8>
   14188:	mov	r7, #0
   1418c:	str	r3, [sp, #64]	; 0x40
   14190:	mov	r3, #5
   14194:	str	r3, [sp, #152]	; 0x98
   14198:	b	13d78 <__assert_fail@plt+0x2820>
   1419c:	ldr	r3, [sp, #28]
   141a0:	cmp	r3, #0
   141a4:	beq	14ea4 <__assert_fail@plt+0x394c>
   141a8:	ldr	r3, [sp, #28]
   141ac:	mov	r7, #0
   141b0:	str	r3, [sp, #44]	; 0x2c
   141b4:	mov	r3, #1
   141b8:	str	r3, [sp, #52]	; 0x34
   141bc:	ldr	r3, [pc, #3660]	; 15010 <__assert_fail@plt+0x3ab8>
   141c0:	str	r3, [sp, #64]	; 0x40
   141c4:	b	13d78 <__assert_fail@plt+0x2820>
   141c8:	ldr	r3, [sp, #28]
   141cc:	cmp	r3, #0
   141d0:	mov	r3, #1
   141d4:	streq	r3, [sp, #44]	; 0x2c
   141d8:	bne	1405c <__assert_fail@plt+0x2b04>
   141dc:	cmp	fp, #0
   141e0:	beq	14ed4 <__assert_fail@plt+0x397c>
   141e4:	ldr	r3, [sp, #32]
   141e8:	mov	r2, #39	; 0x27
   141ec:	mov	r7, #1
   141f0:	strb	r2, [r3]
   141f4:	mov	r3, #0
   141f8:	str	r3, [sp, #28]
   141fc:	mov	r3, #1
   14200:	str	r3, [sp, #52]	; 0x34
   14204:	ldr	r3, [pc, #3580]	; 15008 <__assert_fail@plt+0x3ab0>
   14208:	str	r3, [sp, #64]	; 0x40
   1420c:	mov	r3, #2
   14210:	str	r3, [sp, #152]	; 0x98
   14214:	b	13d78 <__assert_fail@plt+0x2820>
   14218:	ldr	r3, [sp, #24]
   1421c:	cmn	r3, #1
   14220:	beq	14e38 <__assert_fail@plt+0x38e0>
   14224:	ldr	r3, [sp, #24]
   14228:	subs	r3, r3, #1
   1422c:	movne	r3, #1
   14230:	cmp	r3, #0
   14234:	bne	14240 <__assert_fail@plt+0x2ce8>
   14238:	cmp	sl, #0
   1423c:	beq	1462c <__assert_fail@plt+0x30d4>
   14240:	ldr	r3, [sp, #152]	; 0x98
   14244:	mov	r5, #0
   14248:	sub	r2, r3, #2
   1424c:	mov	r8, r5
   14250:	clz	r2, r2
   14254:	lsr	r2, r2, #5
   14258:	ldr	r3, [sp, #60]	; 0x3c
   1425c:	ldr	r1, [sp, #28]
   14260:	orr	r3, r2, r3
   14264:	eor	r3, r3, #1
   14268:	orr	r3, r1, r3
   1426c:	tst	r3, #255	; 0xff
   14270:	bne	1499c <__assert_fail@plt+0x3444>
   14274:	cmp	r6, #0
   14278:	bne	143c8 <__assert_fail@plt+0x2e70>
   1427c:	ldr	r3, [sp, #40]	; 0x28
   14280:	eor	r8, r8, #1
   14284:	and	r8, r8, r3
   14288:	add	sl, sl, #1
   1428c:	uxtb	r6, r8
   14290:	cmp	r6, #0
   14294:	beq	142c8 <__assert_fail@plt+0x2d70>
   14298:	cmp	fp, r7
   1429c:	movhi	r2, #39	; 0x27
   142a0:	ldrhi	r3, [sp, #32]
   142a4:	strbhi	r2, [r3, r7]
   142a8:	add	r3, r7, #1
   142ac:	cmp	fp, r3
   142b0:	movhi	r1, #39	; 0x27
   142b4:	ldrhi	r2, [sp, #32]
   142b8:	add	r7, r7, #2
   142bc:	strbhi	r1, [r2, r3]
   142c0:	mov	r3, #0
   142c4:	str	r3, [sp, #40]	; 0x28
   142c8:	cmp	r7, fp
   142cc:	ldrcc	r3, [sp, #32]
   142d0:	strbcc	r4, [r3, r7]
   142d4:	ldr	r3, [sp, #36]	; 0x24
   142d8:	cmp	r5, #0
   142dc:	moveq	r3, #0
   142e0:	str	r3, [sp, #36]	; 0x24
   142e4:	ldr	r3, [sp, #24]
   142e8:	add	r7, r7, #1
   142ec:	cmn	r3, #1
   142f0:	bne	13d94 <__assert_fail@plt+0x283c>
   142f4:	ldr	r3, [sp, #56]	; 0x38
   142f8:	ldrb	r5, [r3, sl]
   142fc:	adds	r5, r5, #0
   14300:	movne	r5, #1
   14304:	cmp	r5, #0
   14308:	bne	13da8 <__assert_fail@plt+0x2850>
   1430c:	ldr	r3, [sp, #152]	; 0x98
   14310:	ldr	r1, [sp, #28]
   14314:	sub	r3, r3, #2
   14318:	clz	r3, r3
   1431c:	lsr	r3, r3, #5
   14320:	and	r9, r1, r3
   14324:	cmp	r7, #0
   14328:	movne	r2, #0
   1432c:	andeq	r2, r9, #1
   14330:	cmp	r2, #0
   14334:	bne	14d10 <__assert_fail@plt+0x37b8>
   14338:	eor	r2, r1, #1
   1433c:	ands	r3, r3, r2
   14340:	beq	151cc <__assert_fail@plt+0x3c74>
   14344:	ldr	r2, [sp, #68]	; 0x44
   14348:	cmp	r2, #0
   1434c:	beq	151b8 <__assert_fail@plt+0x3c60>
   14350:	ldr	r3, [sp, #36]	; 0x24
   14354:	cmp	r3, #0
   14358:	bne	15170 <__assert_fail@plt+0x3c18>
   1435c:	ldr	r2, [sp, #72]	; 0x48
   14360:	clz	r3, fp
   14364:	cmp	r2, #0
   14368:	lsr	r3, r3, #5
   1436c:	moveq	r3, #0
   14370:	cmp	r3, #0
   14374:	beq	15110 <__assert_fail@plt+0x3bb8>
   14378:	str	r3, [sp, #68]	; 0x44
   1437c:	ldr	fp, [sp, #72]	; 0x48
   14380:	b	13d30 <__assert_fail@plt+0x27d8>
   14384:	ldr	r3, [sp, #152]	; 0x98
   14388:	cmp	r3, #2
   1438c:	beq	149e0 <__assert_fail@plt+0x3488>
   14390:	ldr	r3, [sp, #44]	; 0x2c
   14394:	ldr	r2, [sp, #28]
   14398:	and	r2, r3, r2
   1439c:	ands	r2, r9, r2
   143a0:	bne	149ec <__assert_fail@plt+0x3494>
   143a4:	mov	r4, #92	; 0x5c
   143a8:	mov	r3, r4
   143ac:	ldr	r1, [sp, #44]	; 0x2c
   143b0:	cmp	r1, #0
   143b4:	moveq	r5, #0
   143b8:	moveq	r8, r1
   143bc:	beq	14258 <__assert_fail@plt+0x2d00>
   143c0:	mov	r4, r3
   143c4:	mov	r5, #0
   143c8:	ldr	r3, [sp, #28]
   143cc:	cmp	r3, #0
   143d0:	bne	149d4 <__assert_fail@plt+0x347c>
   143d4:	ldr	r3, [sp, #40]	; 0x28
   143d8:	eor	r9, r3, #1
   143dc:	and	r9, r9, r2
   143e0:	ands	r9, r9, #255	; 0xff
   143e4:	beq	14428 <__assert_fail@plt+0x2ed0>
   143e8:	cmp	fp, r7
   143ec:	movhi	r2, #39	; 0x27
   143f0:	ldrhi	r3, [sp, #32]
   143f4:	str	r9, [sp, #40]	; 0x28
   143f8:	strbhi	r2, [r3, r7]
   143fc:	add	r3, r7, #1
   14400:	cmp	fp, r3
   14404:	movhi	r1, #36	; 0x24
   14408:	ldrhi	r2, [sp, #32]
   1440c:	strbhi	r1, [r2, r3]
   14410:	add	r3, r7, #2
   14414:	cmp	fp, r3
   14418:	add	r7, r7, #3
   1441c:	ldrhi	r2, [sp, #32]
   14420:	movhi	r1, #39	; 0x27
   14424:	strbhi	r1, [r2, r3]
   14428:	cmp	fp, r7
   1442c:	movhi	r2, #92	; 0x5c
   14430:	ldrhi	r3, [sp, #32]
   14434:	add	sl, sl, #1
   14438:	strbhi	r2, [r3, r7]
   1443c:	add	r7, r7, #1
   14440:	b	142c8 <__assert_fail@plt+0x2d70>
   14444:	ldr	r3, [sp, #152]	; 0x98
   14448:	mov	r4, #11
   1444c:	sub	r2, r3, #2
   14450:	mov	r3, #118	; 0x76
   14454:	clz	r2, r2
   14458:	lsr	r2, r2, #5
   1445c:	b	143ac <__assert_fail@plt+0x2e54>
   14460:	mov	r4, #10
   14464:	mov	r3, #110	; 0x6e
   14468:	ldr	r2, [sp, #152]	; 0x98
   1446c:	ldr	r1, [sp, #28]
   14470:	sub	r2, r2, #2
   14474:	clz	r2, r2
   14478:	lsr	r2, r2, #5
   1447c:	ands	r1, r1, r2
   14480:	beq	143ac <__assert_fail@plt+0x2e54>
   14484:	ldr	sl, [sp, #32]
   14488:	mov	r8, fp
   1448c:	mov	r2, r1
   14490:	mov	r3, #2
   14494:	str	r3, [sp, #152]	; 0x98
   14498:	ldr	r9, [sp, #44]	; 0x2c
   1449c:	ldr	r3, [sp, #152]	; 0x98
   144a0:	and	r9, r9, r2
   144a4:	tst	r9, #255	; 0xff
   144a8:	movne	r3, #4
   144ac:	str	r3, [sp, #152]	; 0x98
   144b0:	ldr	r3, [sp, #156]	; 0x9c
   144b4:	mov	ip, #0
   144b8:	bic	r3, r3, #2
   144bc:	str	r3, [sp, #4]
   144c0:	ldr	r3, [sp, #168]	; 0xa8
   144c4:	ldr	r2, [sp, #56]	; 0x38
   144c8:	str	r3, [sp, #16]
   144cc:	ldr	r3, [sp, #164]	; 0xa4
   144d0:	mov	r1, r8
   144d4:	str	r3, [sp, #12]
   144d8:	ldr	r3, [sp, #152]	; 0x98
   144dc:	mov	r0, sl
   144e0:	str	r3, [sp]
   144e4:	str	ip, [sp, #8]
   144e8:	ldr	r3, [sp, #24]
   144ec:	bl	13cd4 <__assert_fail@plt+0x277c>
   144f0:	mov	fp, r0
   144f4:	mov	r0, fp
   144f8:	add	sp, sp, #116	; 0x74
   144fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14500:	ldr	r3, [sp, #152]	; 0x98
   14504:	mov	r4, #8
   14508:	sub	r2, r3, #2
   1450c:	mov	r3, #98	; 0x62
   14510:	clz	r2, r2
   14514:	lsr	r2, r2, #5
   14518:	b	143ac <__assert_fail@plt+0x2e54>
   1451c:	ldr	r3, [sp, #152]	; 0x98
   14520:	mov	r4, #7
   14524:	sub	r2, r3, #2
   14528:	mov	r3, #97	; 0x61
   1452c:	clz	r2, r2
   14530:	lsr	r2, r2, #5
   14534:	b	143ac <__assert_fail@plt+0x2e54>
   14538:	ldr	r3, [sp, #44]	; 0x2c
   1453c:	cmp	r3, #0
   14540:	beq	14d24 <__assert_fail@plt+0x37cc>
   14544:	ldr	r3, [sp, #28]
   14548:	cmp	r3, #0
   1454c:	bne	14ffc <__assert_fail@plt+0x3aa4>
   14550:	ldr	r3, [sp, #152]	; 0x98
   14554:	sub	r2, r3, #2
   14558:	ldr	r3, [sp, #40]	; 0x28
   1455c:	clz	r2, r2
   14560:	eor	r3, r3, #1
   14564:	lsr	r2, r2, #5
   14568:	ands	r3, r2, r3
   1456c:	moveq	r1, r7
   14570:	beq	145b4 <__assert_fail@plt+0x305c>
   14574:	cmp	fp, r7
   14578:	movhi	r0, #39	; 0x27
   1457c:	ldrhi	r1, [sp, #32]
   14580:	str	r3, [sp, #40]	; 0x28
   14584:	strbhi	r0, [r1, r7]
   14588:	add	r1, r7, #1
   1458c:	cmp	fp, r1
   14590:	movhi	ip, #36	; 0x24
   14594:	ldrhi	r0, [sp, #32]
   14598:	strbhi	ip, [r0, r1]
   1459c:	add	r1, r7, #2
   145a0:	cmp	fp, r1
   145a4:	movhi	ip, #39	; 0x27
   145a8:	ldrhi	r0, [sp, #32]
   145ac:	strbhi	ip, [r0, r1]
   145b0:	add	r1, r7, #3
   145b4:	cmp	fp, r1
   145b8:	movhi	r0, #92	; 0x5c
   145bc:	ldrhi	r3, [sp, #32]
   145c0:	add	r7, r1, #1
   145c4:	strbhi	r0, [r3, r1]
   145c8:	cmp	r8, #0
   145cc:	beq	14f10 <__assert_fail@plt+0x39b8>
   145d0:	ldr	r0, [sp, #24]
   145d4:	add	r3, sl, #1
   145d8:	cmp	r3, r0
   145dc:	bcs	14e4c <__assert_fail@plt+0x38f4>
   145e0:	ldr	r0, [sp, #56]	; 0x38
   145e4:	ldrb	r3, [r0, r3]
   145e8:	sub	r3, r3, #48	; 0x30
   145ec:	cmp	r3, #9
   145f0:	bhi	14e4c <__assert_fail@plt+0x38f4>
   145f4:	cmp	fp, r7
   145f8:	movhi	r3, #48	; 0x30
   145fc:	ldrhi	r0, [sp, #32]
   14600:	ldr	r5, [sp, #28]
   14604:	mov	r4, #48	; 0x30
   14608:	strbhi	r3, [r0, r7]
   1460c:	add	r3, r1, #2
   14610:	cmp	fp, r3
   14614:	movhi	r0, #48	; 0x30
   14618:	ldrhi	ip, [sp, #32]
   1461c:	add	r7, r1, #3
   14620:	strbhi	r0, [ip, r3]
   14624:	b	14258 <__assert_fail@plt+0x2d00>
   14628:	mov	r5, #0
   1462c:	ldr	r3, [sp, #152]	; 0x98
   14630:	sub	r2, r3, #2
   14634:	ldr	r3, [sp, #28]
   14638:	clz	r2, r2
   1463c:	lsr	r2, r2, #5
   14640:	ands	r8, r3, r2
   14644:	beq	14258 <__assert_fail@plt+0x2d00>
   14648:	mov	r3, r8
   1464c:	mov	r2, r3
   14650:	mov	r3, #2
   14654:	ldr	sl, [sp, #32]
   14658:	mov	r8, fp
   1465c:	str	r3, [sp, #152]	; 0x98
   14660:	b	14498 <__assert_fail@plt+0x2f40>
   14664:	ldr	r3, [sp, #152]	; 0x98
   14668:	cmp	r3, #2
   1466c:	beq	14d90 <__assert_fail@plt+0x3838>
   14670:	cmp	r3, #5
   14674:	beq	14d50 <__assert_fail@plt+0x37f8>
   14678:	mov	r5, #0
   1467c:	sub	r2, r3, #2
   14680:	mov	r8, r5
   14684:	clz	r2, r2
   14688:	mov	r4, #63	; 0x3f
   1468c:	lsr	r2, r2, #5
   14690:	b	14258 <__assert_fail@plt+0x2d00>
   14694:	ldr	r3, [sp, #152]	; 0x98
   14698:	cmp	r3, #2
   1469c:	beq	14db0 <__assert_fail@plt+0x3858>
   146a0:	mov	r2, #0
   146a4:	str	r5, [sp, #68]	; 0x44
   146a8:	mov	r8, r2
   146ac:	mov	r4, #39	; 0x27
   146b0:	b	14258 <__assert_fail@plt+0x2d00>
   146b4:	mov	r4, #13
   146b8:	mov	r3, #114	; 0x72
   146bc:	b	14468 <__assert_fail@plt+0x2f10>
   146c0:	ldr	r3, [sp, #152]	; 0x98
   146c4:	mov	r8, #0
   146c8:	sub	r2, r3, #2
   146cc:	clz	r2, r2
   146d0:	lsr	r2, r2, #5
   146d4:	b	14258 <__assert_fail@plt+0x2d00>
   146d8:	ldr	r3, [sp, #152]	; 0x98
   146dc:	mov	r4, #12
   146e0:	sub	r2, r3, #2
   146e4:	mov	r3, #102	; 0x66
   146e8:	clz	r2, r2
   146ec:	lsr	r2, r2, #5
   146f0:	b	143ac <__assert_fail@plt+0x2e54>
   146f4:	mov	r5, r6
   146f8:	b	1462c <__assert_fail@plt+0x30d4>
   146fc:	ldr	r3, [sp, #152]	; 0x98
   14700:	sub	r2, r3, #2
   14704:	mov	r3, #116	; 0x74
   14708:	clz	r2, r2
   1470c:	lsr	r2, r2, #5
   14710:	b	143ac <__assert_fail@plt+0x2e54>
   14714:	ldr	r8, [sp, #76]	; 0x4c
   14718:	cmp	r8, #1
   1471c:	bne	14bcc <__assert_fail@plt+0x3674>
   14720:	bl	113fc <__ctype_b_loc@plt>
   14724:	sxth	r3, r4
   14728:	mov	ip, r8
   1472c:	lsl	r3, r3, #1
   14730:	ldr	r2, [r0]
   14734:	ldrh	r3, [r2, r3]
   14738:	and	r3, r3, #16384	; 0x4000
   1473c:	cmp	r3, #0
   14740:	movne	r5, #1
   14744:	moveq	r5, #0
   14748:	moveq	r3, #1
   1474c:	movne	r3, #0
   14750:	ldr	r2, [sp, #44]	; 0x2c
   14754:	and	r3, r3, r2
   14758:	ands	r8, r3, #255	; 0xff
   1475c:	bne	14a60 <__assert_fail@plt+0x3508>
   14760:	ldr	r3, [sp, #152]	; 0x98
   14764:	sub	r2, r3, #2
   14768:	clz	r2, r2
   1476c:	lsr	r2, r2, #5
   14770:	b	14258 <__assert_fail@plt+0x2d00>
   14774:	ldr	r3, [sp, #56]	; 0x38
   14778:	add	r3, r3, sl
   1477c:	str	r3, [sp, #48]	; 0x30
   14780:	ldr	r3, [sp, #48]	; 0x30
   14784:	mov	r6, #0
   14788:	ldrb	r4, [r3]
   1478c:	cmp	r4, #126	; 0x7e
   14790:	ldrls	pc, [pc, r4, lsl #2]
   14794:	b	14714 <__assert_fail@plt+0x31bc>
   14798:	andeq	r4, r1, r8, lsr r5
   1479c:	andeq	r4, r1, r4, lsl r7
   147a0:	andeq	r4, r1, r4, lsl r7
   147a4:	andeq	r4, r1, r4, lsl r7
   147a8:	andeq	r4, r1, r4, lsl r7
   147ac:	andeq	r4, r1, r4, lsl r7
   147b0:	andeq	r4, r1, r4, lsl r7
   147b4:	andeq	r4, r1, ip, lsl r5
   147b8:	andeq	r4, r1, r0, lsl #10
   147bc:	muleq	r1, r4, r9
   147c0:	andeq	r4, r1, r0, ror #8
   147c4:	andeq	r4, r1, r4, asr #8
   147c8:	ldrdeq	r4, [r1], -r8
   147cc:			; <UNDEFINED> instruction: 0x000146b4
   147d0:	andeq	r4, r1, r4, lsl r7
   147d4:	andeq	r4, r1, r4, lsl r7
   147d8:	andeq	r4, r1, r4, lsl r7
   147dc:	andeq	r4, r1, r4, lsl r7
   147e0:	andeq	r4, r1, r4, lsl r7
   147e4:	andeq	r4, r1, r4, lsl r7
   147e8:	andeq	r4, r1, r4, lsl r7
   147ec:	andeq	r4, r1, r4, lsl r7
   147f0:	andeq	r4, r1, r4, lsl r7
   147f4:	andeq	r4, r1, r4, lsl r7
   147f8:	andeq	r4, r1, r4, lsl r7
   147fc:	andeq	r4, r1, r4, lsl r7
   14800:	andeq	r4, r1, r4, lsl r7
   14804:	andeq	r4, r1, r4, lsl r7
   14808:	andeq	r4, r1, r4, lsl r7
   1480c:	andeq	r4, r1, r4, lsl r7
   14810:	andeq	r4, r1, r4, lsl r7
   14814:	andeq	r4, r1, r4, lsl r7
   14818:	andeq	r4, r1, ip, lsr #12
   1481c:	andeq	r4, r1, r8, lsr #12
   14820:	andeq	r4, r1, r8, lsr #12
   14824:	andeq	r4, r1, r8, lsr r2
   14828:	andeq	r4, r1, r8, lsr #12
   1482c:	andeq	r4, r1, r0, asr #13
   14830:	andeq	r4, r1, r8, lsr #12
   14834:	muleq	r1, r4, r6
   14838:	andeq	r4, r1, r8, lsr #12
   1483c:	andeq	r4, r1, r8, lsr #12
   14840:	andeq	r4, r1, r8, lsr #12
   14844:	andeq	r4, r1, r0, asr #13
   14848:	andeq	r4, r1, r0, asr #13
   1484c:	andeq	r4, r1, r0, asr #13
   14850:	andeq	r4, r1, r0, asr #13
   14854:	andeq	r4, r1, r0, asr #13
   14858:	andeq	r4, r1, r0, asr #13
   1485c:	andeq	r4, r1, r0, asr #13
   14860:	andeq	r4, r1, r0, asr #13
   14864:	andeq	r4, r1, r0, asr #13
   14868:	andeq	r4, r1, r0, asr #13
   1486c:	andeq	r4, r1, r0, asr #13
   14870:	andeq	r4, r1, r0, asr #13
   14874:	andeq	r4, r1, r0, asr #13
   14878:	andeq	r4, r1, r0, asr #13
   1487c:	andeq	r4, r1, r0, asr #13
   14880:	andeq	r4, r1, r0, asr #13
   14884:	andeq	r4, r1, r8, lsr #12
   14888:	andeq	r4, r1, r8, lsr #12
   1488c:	andeq	r4, r1, r8, lsr #12
   14890:	andeq	r4, r1, r8, lsr #12
   14894:	andeq	r4, r1, r4, ror #12
   14898:	andeq	r4, r1, r4, lsl r7
   1489c:	andeq	r4, r1, r0, asr #13
   148a0:	andeq	r4, r1, r0, asr #13
   148a4:	andeq	r4, r1, r0, asr #13
   148a8:	andeq	r4, r1, r0, asr #13
   148ac:	andeq	r4, r1, r0, asr #13
   148b0:	andeq	r4, r1, r0, asr #13
   148b4:	andeq	r4, r1, r0, asr #13
   148b8:	andeq	r4, r1, r0, asr #13
   148bc:	andeq	r4, r1, r0, asr #13
   148c0:	andeq	r4, r1, r0, asr #13
   148c4:	andeq	r4, r1, r0, asr #13
   148c8:	andeq	r4, r1, r0, asr #13
   148cc:	andeq	r4, r1, r0, asr #13
   148d0:	andeq	r4, r1, r0, asr #13
   148d4:	andeq	r4, r1, r0, asr #13
   148d8:	andeq	r4, r1, r0, asr #13
   148dc:	andeq	r4, r1, r0, asr #13
   148e0:	andeq	r4, r1, r0, asr #13
   148e4:	andeq	r4, r1, r0, asr #13
   148e8:	andeq	r4, r1, r0, asr #13
   148ec:	andeq	r4, r1, r0, asr #13
   148f0:	andeq	r4, r1, r0, asr #13
   148f4:	andeq	r4, r1, r0, asr #13
   148f8:	andeq	r4, r1, r0, asr #13
   148fc:	andeq	r4, r1, r0, asr #13
   14900:	andeq	r4, r1, r0, asr #13
   14904:	andeq	r4, r1, r8, lsr #12
   14908:	andeq	r4, r1, r4, lsl #7
   1490c:	andeq	r4, r1, r0, asr #13
   14910:	andeq	r4, r1, r8, lsr #12
   14914:	andeq	r4, r1, r0, asr #13
   14918:	andeq	r4, r1, r8, lsr #12
   1491c:	andeq	r4, r1, r0, asr #13
   14920:	andeq	r4, r1, r0, asr #13
   14924:	andeq	r4, r1, r0, asr #13
   14928:	andeq	r4, r1, r0, asr #13
   1492c:	andeq	r4, r1, r0, asr #13
   14930:	andeq	r4, r1, r0, asr #13
   14934:	andeq	r4, r1, r0, asr #13
   14938:	andeq	r4, r1, r0, asr #13
   1493c:	andeq	r4, r1, r0, asr #13
   14940:	andeq	r4, r1, r0, asr #13
   14944:	andeq	r4, r1, r0, asr #13
   14948:	andeq	r4, r1, r0, asr #13
   1494c:	andeq	r4, r1, r0, asr #13
   14950:	andeq	r4, r1, r0, asr #13
   14954:	andeq	r4, r1, r0, asr #13
   14958:	andeq	r4, r1, r0, asr #13
   1495c:	andeq	r4, r1, r0, asr #13
   14960:	andeq	r4, r1, r0, asr #13
   14964:	andeq	r4, r1, r0, asr #13
   14968:	andeq	r4, r1, r0, asr #13
   1496c:	andeq	r4, r1, r0, asr #13
   14970:	andeq	r4, r1, r0, asr #13
   14974:	andeq	r4, r1, r0, asr #13
   14978:	andeq	r4, r1, r0, asr #13
   1497c:	andeq	r4, r1, r0, asr #13
   14980:	andeq	r4, r1, r0, asr #13
   14984:	andeq	r4, r1, r8, lsl r2
   14988:	andeq	r4, r1, r8, lsr #12
   1498c:	andeq	r4, r1, r8, lsl r2
   14990:	andeq	r4, r1, r8, lsr r2
   14994:	mov	r3, #116	; 0x74
   14998:	b	14468 <__assert_fail@plt+0x2f10>
   1499c:	ldr	r3, [sp, #160]	; 0xa0
   149a0:	cmp	r3, #0
   149a4:	beq	14274 <__assert_fail@plt+0x2d1c>
   149a8:	lsr	r3, r4, #5
   149ac:	ldr	r0, [sp, #160]	; 0xa0
   149b0:	uxtb	r3, r3
   149b4:	and	r1, r4, #31
   149b8:	ldr	r0, [r0, r3, lsl #2]
   149bc:	lsr	r3, r0, r1
   149c0:	tst	r3, #1
   149c4:	beq	14274 <__assert_fail@plt+0x2d1c>
   149c8:	ldr	r3, [sp, #28]
   149cc:	cmp	r3, #0
   149d0:	beq	143d4 <__assert_fail@plt+0x2e7c>
   149d4:	ldr	sl, [sp, #32]
   149d8:	mov	r8, fp
   149dc:	b	14498 <__assert_fail@plt+0x2f40>
   149e0:	ldr	r3, [sp, #28]
   149e4:	cmp	r3, #0
   149e8:	bne	14f3c <__assert_fail@plt+0x39e4>
   149ec:	add	sl, sl, #1
   149f0:	ldr	r6, [sp, #40]	; 0x28
   149f4:	mov	r5, #0
   149f8:	mov	r4, #92	; 0x5c
   149fc:	b	14290 <__assert_fail@plt+0x2d38>
   14a00:	cmp	r9, r8
   14a04:	bne	14c74 <__assert_fail@plt+0x371c>
   14a08:	ldr	r0, [sp, #100]	; 0x64
   14a0c:	bl	11324 <iswprint@plt>
   14a10:	add	r5, r5, r4
   14a14:	cmp	r0, #0
   14a18:	add	r0, sp, #104	; 0x68
   14a1c:	moveq	r6, #0
   14a20:	bl	11294 <mbsinit@plt>
   14a24:	cmp	r0, #0
   14a28:	beq	14c08 <__assert_fail@plt+0x36b0>
   14a2c:	mov	r2, r6
   14a30:	mov	ip, r5
   14a34:	eor	r5, r2, #1
   14a38:	ldr	r4, [sp, #80]	; 0x50
   14a3c:	ldr	r6, [sp, #84]	; 0x54
   14a40:	ldr	r7, [sp, #88]	; 0x58
   14a44:	uxtb	r5, r5
   14a48:	cmp	ip, #1
   14a4c:	bls	14f4c <__assert_fail@plt+0x39f4>
   14a50:	ldr	r3, [sp, #44]	; 0x2c
   14a54:	and	r8, r3, r5
   14a58:	mov	r5, r2
   14a5c:	uxtb	r8, r8
   14a60:	add	r2, sl, ip
   14a64:	ldr	r0, [sp, #48]	; 0x30
   14a68:	mov	r1, #0
   14a6c:	str	r5, [sp, #48]	; 0x30
   14a70:	ldr	r9, [sp, #28]
   14a74:	ldr	ip, [sp, #40]	; 0x28
   14a78:	ldr	r3, [sp, #32]
   14a7c:	ldr	r5, [sp, #152]	; 0x98
   14a80:	b	14b3c <__assert_fail@plt+0x35e4>
   14a84:	cmp	r9, #0
   14a88:	bne	14e60 <__assert_fail@plt+0x3908>
   14a8c:	eor	r1, ip, #1
   14a90:	cmp	r5, #2
   14a94:	movne	r1, #0
   14a98:	andeq	r1, r1, #1
   14a9c:	cmp	r1, #0
   14aa0:	beq	14ad8 <__assert_fail@plt+0x3580>
   14aa4:	cmp	fp, r7
   14aa8:	movhi	ip, #39	; 0x27
   14aac:	strbhi	ip, [r3, r7]
   14ab0:	add	ip, r7, #1
   14ab4:	cmp	fp, ip
   14ab8:	movhi	lr, #36	; 0x24
   14abc:	strbhi	lr, [r3, ip]
   14ac0:	add	ip, r7, #2
   14ac4:	cmp	fp, ip
   14ac8:	movhi	lr, #39	; 0x27
   14acc:	strbhi	lr, [r3, ip]
   14ad0:	add	r7, r7, #3
   14ad4:	mov	ip, r1
   14ad8:	cmp	fp, r7
   14adc:	movhi	r1, #92	; 0x5c
   14ae0:	strbhi	r1, [r3, r7]
   14ae4:	add	r1, r7, #1
   14ae8:	cmp	fp, r1
   14aec:	lsrhi	lr, r4, #6
   14af0:	addhi	lr, lr, #48	; 0x30
   14af4:	strbhi	lr, [r3, r1]
   14af8:	add	lr, r7, #2
   14afc:	cmp	fp, lr
   14b00:	lsrhi	r1, r4, #3
   14b04:	andhi	r1, r1, #7
   14b08:	addhi	r1, r1, #48	; 0x30
   14b0c:	add	sl, sl, #1
   14b10:	strbhi	r1, [r3, lr]
   14b14:	and	r4, r4, #7
   14b18:	cmp	r2, sl
   14b1c:	add	r4, r4, #48	; 0x30
   14b20:	add	r7, r7, #3
   14b24:	bls	14e84 <__assert_fail@plt+0x392c>
   14b28:	mov	r1, r8
   14b2c:	cmp	fp, r7
   14b30:	strbhi	r4, [r3, r7]
   14b34:	ldrb	r4, [r0, #1]!
   14b38:	add	r7, r7, #1
   14b3c:	cmp	r8, #0
   14b40:	bne	14a84 <__assert_fail@plt+0x352c>
   14b44:	cmp	r6, #0
   14b48:	bne	14b98 <__assert_fail@plt+0x3640>
   14b4c:	eor	r6, r1, #1
   14b50:	and	r6, r6, ip
   14b54:	add	sl, sl, #1
   14b58:	cmp	r2, sl
   14b5c:	uxtb	r6, r6
   14b60:	bls	14bc0 <__assert_fail@plt+0x3668>
   14b64:	cmp	r6, #0
   14b68:	beq	14b2c <__assert_fail@plt+0x35d4>
   14b6c:	cmp	fp, r7
   14b70:	movhi	ip, #39	; 0x27
   14b74:	strbhi	ip, [r3, r7]
   14b78:	add	ip, r7, #1
   14b7c:	cmp	fp, ip
   14b80:	movhi	lr, #39	; 0x27
   14b84:	strbhi	lr, [r3, ip]
   14b88:	add	r7, r7, #2
   14b8c:	mov	r6, r8
   14b90:	mov	ip, r8
   14b94:	b	14b2c <__assert_fail@plt+0x35d4>
   14b98:	cmp	fp, r7
   14b9c:	eor	r6, r1, #1
   14ba0:	movhi	lr, #92	; 0x5c
   14ba4:	and	r6, r6, ip
   14ba8:	add	sl, sl, #1
   14bac:	strbhi	lr, [r3, r7]
   14bb0:	cmp	r2, sl
   14bb4:	add	r7, r7, #1
   14bb8:	uxtb	r6, r6
   14bbc:	bhi	14b64 <__assert_fail@plt+0x360c>
   14bc0:	str	ip, [sp, #40]	; 0x28
   14bc4:	ldr	r5, [sp, #48]	; 0x30
   14bc8:	b	14290 <__assert_fail@plt+0x2d38>
   14bcc:	ldr	r3, [sp, #24]
   14bd0:	cmn	r3, #1
   14bd4:	mov	r3, #0
   14bd8:	str	r3, [sp, #104]	; 0x68
   14bdc:	str	r3, [sp, #108]	; 0x6c
   14be0:	beq	14f00 <__assert_fail@plt+0x39a8>
   14be4:	mov	r2, r5
   14be8:	mov	r3, #0
   14bec:	str	r7, [sp, #88]	; 0x58
   14bf0:	ldr	r7, [sp, #152]	; 0x98
   14bf4:	str	r5, [sp, #92]	; 0x5c
   14bf8:	str	r6, [sp, #84]	; 0x54
   14bfc:	mov	r5, r3
   14c00:	mov	r6, r2
   14c04:	str	r4, [sp, #80]	; 0x50
   14c08:	ldr	r3, [sp, #56]	; 0x38
   14c0c:	add	r9, sl, r5
   14c10:	add	r8, r3, r9
   14c14:	ldr	r3, [sp, #24]
   14c18:	mov	r1, r8
   14c1c:	sub	r2, r3, r9
   14c20:	add	r0, sp, #100	; 0x64
   14c24:	add	r3, sp, #104	; 0x68
   14c28:	bl	24b68 <__assert_fail@plt+0x13610>
   14c2c:	subs	r4, r0, #0
   14c30:	beq	14fd8 <__assert_fail@plt+0x3a80>
   14c34:	cmn	r4, #1
   14c38:	beq	14fb8 <__assert_fail@plt+0x3a60>
   14c3c:	cmn	r4, #2
   14c40:	beq	14f58 <__assert_fail@plt+0x3a00>
   14c44:	ldr	r2, [sp, #28]
   14c48:	cmp	r7, #2
   14c4c:	movne	r2, #0
   14c50:	andeq	r2, r2, #1
   14c54:	cmp	r2, #0
   14c58:	beq	14a08 <__assert_fail@plt+0x34b0>
   14c5c:	cmp	r4, #1
   14c60:	beq	14a08 <__assert_fail@plt+0x34b0>
   14c64:	sub	r3, r4, #1
   14c68:	add	r9, r3, r9
   14c6c:	ldr	r3, [sp, #56]	; 0x38
   14c70:	add	r9, r3, r9
   14c74:	ldrb	r3, [r8, #1]!
   14c78:	sub	r3, r3, #91	; 0x5b
   14c7c:	cmp	r3, #33	; 0x21
   14c80:	ldrls	pc, [pc, r3, lsl #2]
   14c84:	b	14a00 <__assert_fail@plt+0x34a8>
   14c88:	andeq	r4, r1, r0, lsl sp
   14c8c:	andeq	r4, r1, r0, lsl sp
   14c90:	andeq	r4, r1, r0, lsl #20
   14c94:	andeq	r4, r1, r0, lsl sp
   14c98:	andeq	r4, r1, r0, lsl #20
   14c9c:	andeq	r4, r1, r0, lsl sp
   14ca0:	andeq	r4, r1, r0, lsl #20
   14ca4:	andeq	r4, r1, r0, lsl #20
   14ca8:	andeq	r4, r1, r0, lsl #20
   14cac:	andeq	r4, r1, r0, lsl #20
   14cb0:	andeq	r4, r1, r0, lsl #20
   14cb4:	andeq	r4, r1, r0, lsl #20
   14cb8:	andeq	r4, r1, r0, lsl #20
   14cbc:	andeq	r4, r1, r0, lsl #20
   14cc0:	andeq	r4, r1, r0, lsl #20
   14cc4:	andeq	r4, r1, r0, lsl #20
   14cc8:	andeq	r4, r1, r0, lsl #20
   14ccc:	andeq	r4, r1, r0, lsl #20
   14cd0:	andeq	r4, r1, r0, lsl #20
   14cd4:	andeq	r4, r1, r0, lsl #20
   14cd8:	andeq	r4, r1, r0, lsl #20
   14cdc:	andeq	r4, r1, r0, lsl #20
   14ce0:	andeq	r4, r1, r0, lsl #20
   14ce4:	andeq	r4, r1, r0, lsl #20
   14ce8:	andeq	r4, r1, r0, lsl #20
   14cec:	andeq	r4, r1, r0, lsl #20
   14cf0:	andeq	r4, r1, r0, lsl #20
   14cf4:	andeq	r4, r1, r0, lsl #20
   14cf8:	andeq	r4, r1, r0, lsl #20
   14cfc:	andeq	r4, r1, r0, lsl #20
   14d00:	andeq	r4, r1, r0, lsl #20
   14d04:	andeq	r4, r1, r0, lsl #20
   14d08:	andeq	r4, r1, r0, lsl #20
   14d0c:	andeq	r4, r1, r0, lsl sp
   14d10:	mov	r3, #2
   14d14:	ldr	sl, [sp, #32]
   14d18:	mov	r8, fp
   14d1c:	str	r3, [sp, #152]	; 0x98
   14d20:	b	14498 <__assert_fail@plt+0x2f40>
   14d24:	ldr	r3, [sp, #156]	; 0x9c
   14d28:	tst	r3, #1
   14d2c:	bne	14e58 <__assert_fail@plt+0x3900>
   14d30:	ldr	r3, [sp, #152]	; 0x98
   14d34:	ldr	r4, [sp, #44]	; 0x2c
   14d38:	sub	r2, r3, #2
   14d3c:	mov	r5, #0
   14d40:	clz	r2, r2
   14d44:	mov	r8, r4
   14d48:	lsr	r2, r2, #5
   14d4c:	b	14258 <__assert_fail@plt+0x2d00>
   14d50:	ldr	r3, [sp, #156]	; 0x9c
   14d54:	ands	r9, r3, #4
   14d58:	beq	14e90 <__assert_fail@plt+0x3938>
   14d5c:	ldr	r2, [sp, #24]
   14d60:	add	r3, sl, #2
   14d64:	cmp	r3, r2
   14d68:	bcs	14d7c <__assert_fail@plt+0x3824>
   14d6c:	ldr	r2, [sp, #48]	; 0x30
   14d70:	ldrb	r4, [r2, #1]
   14d74:	cmp	r4, #63	; 0x3f
   14d78:	beq	15018 <__assert_fail@plt+0x3ac0>
   14d7c:	mov	r2, #0
   14d80:	mov	r8, r2
   14d84:	mov	r5, r2
   14d88:	mov	r4, #63	; 0x3f
   14d8c:	b	14258 <__assert_fail@plt+0x2d00>
   14d90:	ldr	r3, [sp, #28]
   14d94:	cmp	r3, #0
   14d98:	bne	150bc <__assert_fail@plt+0x3b64>
   14d9c:	mov	r2, r5
   14da0:	mov	r8, r3
   14da4:	mov	r5, #0
   14da8:	mov	r4, #63	; 0x3f
   14dac:	b	14258 <__assert_fail@plt+0x2d00>
   14db0:	ldr	r3, [sp, #28]
   14db4:	cmp	r3, #0
   14db8:	bne	150bc <__assert_fail@plt+0x3b64>
   14dbc:	ldr	r2, [sp, #72]	; 0x48
   14dc0:	adds	r3, fp, #0
   14dc4:	movne	r3, #1
   14dc8:	cmp	r2, #0
   14dcc:	movne	r3, #0
   14dd0:	cmp	r3, #0
   14dd4:	strne	fp, [sp, #72]	; 0x48
   14dd8:	movne	fp, #0
   14ddc:	bne	14e18 <__assert_fail@plt+0x38c0>
   14de0:	cmp	fp, r7
   14de4:	movhi	r2, #39	; 0x27
   14de8:	ldrhi	r3, [sp, #32]
   14dec:	strbhi	r2, [r3, r7]
   14df0:	add	r3, r7, #1
   14df4:	cmp	fp, r3
   14df8:	movhi	r1, #92	; 0x5c
   14dfc:	ldrhi	r2, [sp, #32]
   14e00:	strbhi	r1, [r2, r3]
   14e04:	add	r3, r7, #2
   14e08:	cmp	fp, r3
   14e0c:	movhi	r1, #39	; 0x27
   14e10:	ldrhi	r2, [sp, #32]
   14e14:	strbhi	r1, [r2, r3]
   14e18:	ldr	r3, [sp, #28]
   14e1c:	add	r7, r7, #3
   14e20:	mov	r2, r5
   14e24:	mov	r8, r3
   14e28:	str	r5, [sp, #68]	; 0x44
   14e2c:	str	r3, [sp, #40]	; 0x28
   14e30:	mov	r4, #39	; 0x27
   14e34:	b	14258 <__assert_fail@plt+0x2d00>
   14e38:	ldr	r3, [sp, #56]	; 0x38
   14e3c:	ldrb	r3, [r3, #1]
   14e40:	adds	r3, r3, #0
   14e44:	movne	r3, #1
   14e48:	b	14230 <__assert_fail@plt+0x2cd8>
   14e4c:	ldr	r5, [sp, #28]
   14e50:	mov	r4, #48	; 0x30
   14e54:	b	14258 <__assert_fail@plt+0x2d00>
   14e58:	add	sl, sl, #1
   14e5c:	b	13d88 <__assert_fail@plt+0x2830>
   14e60:	mov	sl, r3
   14e64:	ldr	r3, [sp, #28]
   14e68:	mov	r8, fp
   14e6c:	str	r3, [sp, #44]	; 0x2c
   14e70:	ldr	r3, [sp, #152]	; 0x98
   14e74:	sub	r2, r3, #2
   14e78:	clz	r2, r2
   14e7c:	lsr	r2, r2, #5
   14e80:	b	14498 <__assert_fail@plt+0x2f40>
   14e84:	str	ip, [sp, #40]	; 0x28
   14e88:	ldr	r5, [sp, #48]	; 0x30
   14e8c:	b	142c8 <__assert_fail@plt+0x2d70>
   14e90:	mov	r2, r9
   14e94:	mov	r8, r9
   14e98:	mov	r5, #0
   14e9c:	mov	r4, #63	; 0x3f
   14ea0:	b	14258 <__assert_fail@plt+0x2d00>
   14ea4:	cmp	fp, #0
   14ea8:	beq	14f20 <__assert_fail@plt+0x39c8>
   14eac:	ldr	r1, [sp, #32]
   14eb0:	mov	r3, #34	; 0x22
   14eb4:	mov	r2, #1
   14eb8:	strb	r3, [r1]
   14ebc:	ldr	r3, [pc, #332]	; 15010 <__assert_fail@plt+0x3ab8>
   14ec0:	str	r2, [sp, #52]	; 0x34
   14ec4:	mov	r7, r2
   14ec8:	str	r2, [sp, #44]	; 0x2c
   14ecc:	str	r3, [sp, #64]	; 0x40
   14ed0:	b	13d78 <__assert_fail@plt+0x2820>
   14ed4:	ldr	r3, [pc, #300]	; 15008 <__assert_fail@plt+0x3ab0>
   14ed8:	str	r3, [sp, #64]	; 0x40
   14edc:	mov	r3, #0
   14ee0:	str	r3, [sp, #28]
   14ee4:	mov	r3, #1
   14ee8:	str	r3, [sp, #52]	; 0x34
   14eec:	mov	r7, r3
   14ef0:	mov	r3, #2
   14ef4:	str	r3, [sp, #152]	; 0x98
   14ef8:	b	13d78 <__assert_fail@plt+0x2820>
   14efc:	bl	11534 <abort@plt>
   14f00:	ldr	r0, [sp, #56]	; 0x38
   14f04:	bl	11414 <strlen@plt>
   14f08:	str	r0, [sp, #24]
   14f0c:	b	14be4 <__assert_fail@plt+0x368c>
   14f10:	mov	r5, r8
   14f14:	mov	r4, #48	; 0x30
   14f18:	ldr	r8, [sp, #44]	; 0x2c
   14f1c:	b	14258 <__assert_fail@plt+0x2d00>
   14f20:	mov	r3, #1
   14f24:	str	r3, [sp, #52]	; 0x34
   14f28:	mov	r7, r3
   14f2c:	str	r3, [sp, #44]	; 0x2c
   14f30:	ldr	r3, [pc, #216]	; 15010 <__assert_fail@plt+0x3ab8>
   14f34:	str	r3, [sp, #64]	; 0x40
   14f38:	b	13d78 <__assert_fail@plt+0x2820>
   14f3c:	ldr	sl, [sp, #32]
   14f40:	mov	r8, fp
   14f44:	mov	r2, r3
   14f48:	b	14498 <__assert_fail@plt+0x2f40>
   14f4c:	mov	r3, r5
   14f50:	mov	r5, r2
   14f54:	b	14750 <__assert_fail@plt+0x31f8>
   14f58:	ldr	r1, [sp, #24]
   14f5c:	mov	r2, r5
   14f60:	cmp	r1, r9
   14f64:	mov	ip, r5
   14f68:	ldr	r4, [sp, #80]	; 0x50
   14f6c:	ldr	r5, [sp, #92]	; 0x5c
   14f70:	ldr	r6, [sp, #84]	; 0x54
   14f74:	ldr	r7, [sp, #88]	; 0x58
   14f78:	bls	14fac <__assert_fail@plt+0x3a54>
   14f7c:	ldrb	r3, [r8]
   14f80:	cmp	r3, #0
   14f84:	bne	14f98 <__assert_fail@plt+0x3a40>
   14f88:	b	14fb0 <__assert_fail@plt+0x3a58>
   14f8c:	ldrb	r3, [r8, #1]!
   14f90:	cmp	r3, #0
   14f94:	beq	150b0 <__assert_fail@plt+0x3b58>
   14f98:	add	r2, r2, #1
   14f9c:	add	r3, sl, r2
   14fa0:	cmp	r1, r3
   14fa4:	bhi	14f8c <__assert_fail@plt+0x3a34>
   14fa8:	mov	ip, r2
   14fac:	mov	r3, #0
   14fb0:	mov	r2, r3
   14fb4:	b	14a48 <__assert_fail@plt+0x34f0>
   14fb8:	mov	r3, #0
   14fbc:	mov	ip, r5
   14fc0:	ldr	r4, [sp, #80]	; 0x50
   14fc4:	ldr	r5, [sp, #92]	; 0x5c
   14fc8:	ldr	r6, [sp, #84]	; 0x54
   14fcc:	ldr	r7, [sp, #88]	; 0x58
   14fd0:	mov	r2, r3
   14fd4:	b	14a48 <__assert_fail@plt+0x34f0>
   14fd8:	mov	r3, r6
   14fdc:	mov	ip, r5
   14fe0:	eor	r5, r3, #1
   14fe4:	mov	r2, r6
   14fe8:	ldr	r4, [sp, #80]	; 0x50
   14fec:	ldr	r6, [sp, #84]	; 0x54
   14ff0:	ldr	r7, [sp, #88]	; 0x58
   14ff4:	uxtb	r5, r5
   14ff8:	b	14a48 <__assert_fail@plt+0x34f0>
   14ffc:	ldr	sl, [sp, #32]
   15000:	mov	r8, fp
   15004:	b	14e6c <__assert_fail@plt+0x3914>
   15008:	andeq	r5, r2, r4, asr #30
   1500c:	andeq	r6, r2, ip, lsl r1
   15010:	andeq	r6, r2, r8, lsl r1
   15014:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   15018:	ldr	r2, [sp, #56]	; 0x38
   1501c:	ldrb	r1, [r2, r3]
   15020:	sub	r2, r1, #33	; 0x21
   15024:	uxtb	r2, r2
   15028:	cmp	r2, #29
   1502c:	bhi	150cc <__assert_fail@plt+0x3b74>
   15030:	ldr	r0, [pc, #-36]	; 15014 <__assert_fail@plt+0x3abc>
   15034:	mov	ip, #1
   15038:	ands	r2, r0, ip, lsl r2
   1503c:	beq	150dc <__assert_fail@plt+0x3b84>
   15040:	ldr	r2, [sp, #28]
   15044:	cmp	r2, #0
   15048:	bne	151dc <__assert_fail@plt+0x3c84>
   1504c:	cmp	fp, r7
   15050:	ldr	r8, [sp, #28]
   15054:	ldrhi	r2, [sp, #32]
   15058:	mov	sl, r3
   1505c:	mov	r5, r8
   15060:	strbhi	r4, [r2, r7]
   15064:	add	r2, r7, #1
   15068:	cmp	fp, r2
   1506c:	movhi	r0, #34	; 0x22
   15070:	ldrhi	ip, [sp, #32]
   15074:	mov	r4, r1
   15078:	strbhi	r0, [ip, r2]
   1507c:	add	r2, r7, #2
   15080:	cmp	fp, r2
   15084:	movhi	r0, #34	; 0x22
   15088:	ldrhi	ip, [sp, #32]
   1508c:	strbhi	r0, [ip, r2]
   15090:	add	r2, r7, #3
   15094:	cmp	fp, r2
   15098:	movhi	r0, #63	; 0x3f
   1509c:	ldrhi	ip, [sp, #32]
   150a0:	add	r7, r7, #4
   150a4:	strbhi	r0, [ip, r2]
   150a8:	mov	r2, r8
   150ac:	b	14258 <__assert_fail@plt+0x2d00>
   150b0:	mov	ip, r2
   150b4:	mov	r2, r3
   150b8:	b	14a48 <__assert_fail@plt+0x34f0>
   150bc:	ldr	sl, [sp, #32]
   150c0:	mov	r8, fp
   150c4:	ldr	r2, [sp, #28]
   150c8:	b	14498 <__assert_fail@plt+0x2f40>
   150cc:	mov	r2, #0
   150d0:	mov	r8, r2
   150d4:	mov	r5, r2
   150d8:	b	14258 <__assert_fail@plt+0x2d00>
   150dc:	mov	r8, r2
   150e0:	mov	r5, #0
   150e4:	b	14258 <__assert_fail@plt+0x2d00>
   150e8:	ldr	r1, [sp, #152]	; 0x98
   150ec:	bl	13bb4 <__assert_fail@plt+0x265c>
   150f0:	str	r0, [sp, #168]	; 0xa8
   150f4:	b	14114 <__assert_fail@plt+0x2bbc>
   150f8:	ldr	r1, [sp, #152]	; 0x98
   150fc:	bl	13bb4 <__assert_fail@plt+0x265c>
   15100:	str	r0, [sp, #164]	; 0xa4
   15104:	b	140f4 <__assert_fail@plt+0x2b9c>
   15108:	ldr	r7, [sp, #28]
   1510c:	b	14154 <__assert_fail@plt+0x2bfc>
   15110:	ldr	sl, [sp, #32]
   15114:	ldr	r2, [sp, #68]	; 0x44
   15118:	mov	r8, fp
   1511c:	mov	fp, r7
   15120:	ldr	r3, [sp, #64]	; 0x40
   15124:	cmp	r3, #0
   15128:	moveq	r2, #0
   1512c:	andne	r2, r2, #1
   15130:	cmp	r2, #0
   15134:	beq	15160 <__assert_fail@plt+0x3c08>
   15138:	mov	r2, r3
   1513c:	ldrb	r3, [r3]
   15140:	cmp	r3, #0
   15144:	beq	15160 <__assert_fail@plt+0x3c08>
   15148:	cmp	r8, fp
   1514c:	strbhi	r3, [sl, fp]
   15150:	ldrb	r3, [r2, #1]!
   15154:	add	fp, fp, #1
   15158:	cmp	r3, #0
   1515c:	bne	15148 <__assert_fail@plt+0x3bf0>
   15160:	cmp	r8, fp
   15164:	movhi	r3, #0
   15168:	strbhi	r3, [sl, fp]
   1516c:	b	144f4 <__assert_fail@plt+0x2f9c>
   15170:	ldr	r3, [sp, #168]	; 0xa8
   15174:	ldr	sl, [sp, #32]
   15178:	str	r3, [sp, #16]
   1517c:	ldr	r3, [sp, #164]	; 0xa4
   15180:	mov	ip, #5
   15184:	str	r3, [sp, #12]
   15188:	ldr	r3, [sp, #160]	; 0xa0
   1518c:	ldr	r2, [sp, #56]	; 0x38
   15190:	str	r3, [sp, #8]
   15194:	ldr	r3, [sp, #156]	; 0x9c
   15198:	ldr	r1, [sp, #72]	; 0x48
   1519c:	str	r3, [sp, #4]
   151a0:	mov	r0, sl
   151a4:	ldr	r3, [sp, #24]
   151a8:	str	ip, [sp]
   151ac:	bl	13cd4 <__assert_fail@plt+0x277c>
   151b0:	mov	fp, r0
   151b4:	b	144f4 <__assert_fail@plt+0x2f9c>
   151b8:	mov	r8, fp
   151bc:	ldr	sl, [sp, #32]
   151c0:	mov	fp, r7
   151c4:	mov	r2, r3
   151c8:	b	15120 <__assert_fail@plt+0x3bc8>
   151cc:	mov	r8, fp
   151d0:	ldr	sl, [sp, #32]
   151d4:	mov	fp, r7
   151d8:	b	15120 <__assert_fail@plt+0x3bc8>
   151dc:	ldr	sl, [sp, #32]
   151e0:	mov	r8, fp
   151e4:	b	144b0 <__assert_fail@plt+0x2f58>
   151e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151ec:	sub	sp, sp, #52	; 0x34
   151f0:	mov	r4, r0
   151f4:	mov	r5, r3
   151f8:	mov	sl, r1
   151fc:	mov	fp, r2
   15200:	bl	1142c <__errno_location@plt>
   15204:	ldr	r7, [pc, #412]	; 153a8 <__assert_fail@plt+0x3e50>
   15208:	cmn	r4, #-2147483647	; 0x80000001
   1520c:	ldr	r6, [r7]
   15210:	mov	r8, r0
   15214:	movne	r0, #0
   15218:	moveq	r0, #1
   1521c:	ldr	r3, [r8]
   15220:	orrs	r0, r0, r4, lsr #31
   15224:	str	r3, [sp, #24]
   15228:	bne	153a4 <__assert_fail@plt+0x3e4c>
   1522c:	ldr	r2, [r7, #4]
   15230:	cmp	r4, r2
   15234:	blt	15294 <__assert_fail@plt+0x3d3c>
   15238:	add	r9, r7, #8
   1523c:	cmp	r6, r9
   15240:	str	r2, [sp, #44]	; 0x2c
   15244:	beq	15374 <__assert_fail@plt+0x3e1c>
   15248:	mov	r3, #8
   1524c:	sub	r2, r4, r2
   15250:	mov	r0, r6
   15254:	str	r3, [sp]
   15258:	add	r2, r2, #1
   1525c:	mvn	r3, #-2147483648	; 0x80000000
   15260:	add	r1, sp, #44	; 0x2c
   15264:	bl	235c8 <__assert_fail@plt+0x12070>
   15268:	mov	r6, r0
   1526c:	str	r0, [r7]
   15270:	ldr	r0, [r7, #4]
   15274:	ldr	r2, [sp, #44]	; 0x2c
   15278:	mov	r1, #0
   1527c:	sub	r2, r2, r0
   15280:	add	r0, r6, r0, lsl #3
   15284:	lsl	r2, r2, #3
   15288:	bl	1145c <memset@plt>
   1528c:	ldr	r3, [sp, #44]	; 0x2c
   15290:	str	r3, [r7, #4]
   15294:	add	r3, r6, r4, lsl #3
   15298:	ldr	r1, [r5, #4]
   1529c:	ldr	r7, [r3, #4]
   152a0:	ldr	r9, [r6, r4, lsl #3]
   152a4:	ldr	r2, [r5, #40]	; 0x28
   152a8:	ldr	ip, [r5, #44]	; 0x2c
   152ac:	add	r0, r5, #8
   152b0:	str	r3, [sp, #28]
   152b4:	ldr	r3, [r5]
   152b8:	orr	r1, r1, #1
   152bc:	mov	lr, r0
   152c0:	str	r1, [sp, #32]
   152c4:	str	r0, [sp, #36]	; 0x24
   152c8:	str	r1, [sp, #4]
   152cc:	str	r2, [sp, #12]
   152d0:	str	r3, [sp]
   152d4:	mov	r0, r7
   152d8:	mov	r1, r9
   152dc:	str	ip, [sp, #16]
   152e0:	str	lr, [sp, #8]
   152e4:	mov	r3, fp
   152e8:	mov	r2, sl
   152ec:	bl	13cd4 <__assert_fail@plt+0x277c>
   152f0:	cmp	r9, r0
   152f4:	bhi	15360 <__assert_fail@plt+0x3e08>
   152f8:	ldr	r3, [pc, #172]	; 153ac <__assert_fail@plt+0x3e54>
   152fc:	add	r9, r0, #1
   15300:	cmp	r7, r3
   15304:	str	r9, [r6, r4, lsl #3]
   15308:	beq	15314 <__assert_fail@plt+0x3dbc>
   1530c:	mov	r0, r7
   15310:	bl	13908 <__assert_fail@plt+0x23b0>
   15314:	mov	r0, r9
   15318:	bl	23464 <__assert_fail@plt+0x11f0c>
   1531c:	ldr	lr, [sp, #28]
   15320:	ldr	ip, [r5, #44]	; 0x2c
   15324:	ldr	r4, [r5, #40]	; 0x28
   15328:	mov	r3, fp
   1532c:	mov	r2, sl
   15330:	mov	r1, r9
   15334:	str	r0, [lr, #4]
   15338:	ldr	lr, [r5]
   1533c:	ldr	r5, [sp, #36]	; 0x24
   15340:	str	ip, [sp, #16]
   15344:	str	r5, [sp, #8]
   15348:	ldr	r5, [sp, #32]
   1534c:	str	r4, [sp, #12]
   15350:	str	r5, [sp, #4]
   15354:	str	lr, [sp]
   15358:	mov	r7, r0
   1535c:	bl	13cd4 <__assert_fail@plt+0x277c>
   15360:	ldr	r3, [sp, #24]
   15364:	mov	r0, r7
   15368:	str	r3, [r8]
   1536c:	add	sp, sp, #52	; 0x34
   15370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15374:	mov	r3, #8
   15378:	sub	r2, r4, r2
   1537c:	str	r3, [sp]
   15380:	add	r1, sp, #44	; 0x2c
   15384:	add	r2, r2, #1
   15388:	mvn	r3, #-2147483648	; 0x80000000
   1538c:	bl	235c8 <__assert_fail@plt+0x12070>
   15390:	mov	r6, r0
   15394:	ldm	r9, {r0, r1}
   15398:	str	r6, [r7]
   1539c:	stm	r6, {r0, r1}
   153a0:	b	15270 <__assert_fail@plt+0x3d18>
   153a4:	bl	11534 <abort@plt>
   153a8:	andeq	r7, r3, r8, ror #2
   153ac:			; <UNDEFINED> instruction: 0x000372bc
   153b0:	push	{r4, r5, r6, lr}
   153b4:	mov	r5, r0
   153b8:	bl	1142c <__errno_location@plt>
   153bc:	cmp	r5, #0
   153c0:	mov	r1, #48	; 0x30
   153c4:	mov	r4, r0
   153c8:	ldr	r0, [pc, #16]	; 153e0 <__assert_fail@plt+0x3e88>
   153cc:	ldr	r6, [r4]
   153d0:	movne	r0, r5
   153d4:	bl	238c4 <__assert_fail@plt+0x1236c>
   153d8:	str	r6, [r4]
   153dc:	pop	{r4, r5, r6, pc}
   153e0:			; <UNDEFINED> instruction: 0x000373bc
   153e4:	ldr	r3, [pc, #12]	; 153f8 <__assert_fail@plt+0x3ea0>
   153e8:	cmp	r0, #0
   153ec:	moveq	r0, r3
   153f0:	ldr	r0, [r0]
   153f4:	bx	lr
   153f8:			; <UNDEFINED> instruction: 0x000373bc
   153fc:	ldr	r3, [pc, #12]	; 15410 <__assert_fail@plt+0x3eb8>
   15400:	cmp	r0, #0
   15404:	moveq	r0, r3
   15408:	str	r1, [r0]
   1540c:	bx	lr
   15410:			; <UNDEFINED> instruction: 0x000373bc
   15414:	ldr	r3, [pc, #52]	; 15450 <__assert_fail@plt+0x3ef8>
   15418:	cmp	r0, #0
   1541c:	moveq	r0, r3
   15420:	add	r3, r0, #8
   15424:	push	{lr}		; (str lr, [sp, #-4]!)
   15428:	lsr	lr, r1, #5
   1542c:	and	r1, r1, #31
   15430:	ldr	ip, [r3, lr, lsl #2]
   15434:	lsr	r0, ip, r1
   15438:	eor	r2, r2, r0
   1543c:	and	r2, r2, #1
   15440:	and	r0, r0, #1
   15444:	eor	r1, ip, r2, lsl r1
   15448:	str	r1, [r3, lr, lsl #2]
   1544c:	pop	{pc}		; (ldr pc, [sp], #4)
   15450:			; <UNDEFINED> instruction: 0x000373bc
   15454:	ldr	r3, [pc, #16]	; 1546c <__assert_fail@plt+0x3f14>
   15458:	cmp	r0, #0
   1545c:	movne	r3, r0
   15460:	ldr	r0, [r3, #4]
   15464:	str	r1, [r3, #4]
   15468:	bx	lr
   1546c:			; <UNDEFINED> instruction: 0x000373bc
   15470:	ldr	r3, [pc, #44]	; 154a4 <__assert_fail@plt+0x3f4c>
   15474:	cmp	r0, #0
   15478:	moveq	r0, r3
   1547c:	mov	ip, #10
   15480:	cmp	r2, #0
   15484:	cmpne	r1, #0
   15488:	str	ip, [r0]
   1548c:	beq	1549c <__assert_fail@plt+0x3f44>
   15490:	str	r1, [r0, #40]	; 0x28
   15494:	str	r2, [r0, #44]	; 0x2c
   15498:	bx	lr
   1549c:	push	{r4, lr}
   154a0:	bl	11534 <abort@plt>
   154a4:			; <UNDEFINED> instruction: 0x000373bc
   154a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   154ac:	sub	sp, sp, #24
   154b0:	ldr	ip, [pc, #108]	; 15524 <__assert_fail@plt+0x3fcc>
   154b4:	ldr	r4, [sp, #56]	; 0x38
   154b8:	mov	r9, r2
   154bc:	cmp	r4, #0
   154c0:	moveq	r4, ip
   154c4:	mov	sl, r3
   154c8:	mov	r7, r0
   154cc:	mov	r8, r1
   154d0:	bl	1142c <__errno_location@plt>
   154d4:	ldr	r3, [r4, #44]	; 0x2c
   154d8:	mov	r1, r8
   154dc:	ldr	r6, [r0]
   154e0:	str	r3, [sp, #16]
   154e4:	ldr	r2, [r4, #40]	; 0x28
   154e8:	add	r3, r4, #8
   154ec:	str	r3, [sp, #8]
   154f0:	str	r2, [sp, #12]
   154f4:	ldr	r2, [r4, #4]
   154f8:	mov	r5, r0
   154fc:	str	r2, [sp, #4]
   15500:	ldr	ip, [r4]
   15504:	mov	r3, sl
   15508:	mov	r2, r9
   1550c:	mov	r0, r7
   15510:	str	ip, [sp]
   15514:	bl	13cd4 <__assert_fail@plt+0x277c>
   15518:	str	r6, [r5]
   1551c:	add	sp, sp, #24
   15520:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15524:			; <UNDEFINED> instruction: 0x000373bc
   15528:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1552c:	cmp	r3, #0
   15530:	sub	sp, sp, #44	; 0x2c
   15534:	ldr	r4, [pc, #192]	; 155fc <__assert_fail@plt+0x40a4>
   15538:	mov	r6, r2
   1553c:	movne	r4, r3
   15540:	mov	r9, r1
   15544:	mov	r8, r0
   15548:	bl	1142c <__errno_location@plt>
   1554c:	ldr	r3, [r4, #44]	; 0x2c
   15550:	ldr	r5, [r4, #4]
   15554:	add	sl, r4, #8
   15558:	cmp	r6, #0
   1555c:	orreq	r5, r5, #1
   15560:	mov	r1, #0
   15564:	ldr	r2, [r0]
   15568:	str	r3, [sp, #16]
   1556c:	ldr	r3, [r4, #40]	; 0x28
   15570:	stmib	sp, {r5, sl}
   15574:	str	r3, [sp, #12]
   15578:	ldr	r3, [r4]
   1557c:	mov	r7, r0
   15580:	str	r2, [sp, #28]
   15584:	str	r3, [sp]
   15588:	mov	r2, r8
   1558c:	mov	r3, r9
   15590:	mov	r0, r1
   15594:	bl	13cd4 <__assert_fail@plt+0x277c>
   15598:	add	r1, r0, #1
   1559c:	mov	fp, r0
   155a0:	mov	r0, r1
   155a4:	str	r1, [sp, #36]	; 0x24
   155a8:	bl	23464 <__assert_fail@plt+0x11f0c>
   155ac:	ldr	r3, [r4, #44]	; 0x2c
   155b0:	mov	r2, r8
   155b4:	str	r3, [sp, #16]
   155b8:	ldr	r3, [r4, #40]	; 0x28
   155bc:	str	r5, [sp, #4]
   155c0:	str	r3, [sp, #12]
   155c4:	str	sl, [sp, #8]
   155c8:	ldr	ip, [r4]
   155cc:	ldr	r1, [sp, #36]	; 0x24
   155d0:	mov	r3, r9
   155d4:	str	ip, [sp]
   155d8:	str	r0, [sp, #32]
   155dc:	bl	13cd4 <__assert_fail@plt+0x277c>
   155e0:	ldr	r2, [sp, #28]
   155e4:	cmp	r6, #0
   155e8:	str	r2, [r7]
   155ec:	ldr	r0, [sp, #32]
   155f0:	strne	fp, [r6]
   155f4:	add	sp, sp, #44	; 0x2c
   155f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155fc:			; <UNDEFINED> instruction: 0x000373bc
   15600:	mov	r3, r2
   15604:	mov	r2, #0
   15608:	b	15528 <__assert_fail@plt+0x3fd0>
   1560c:	push	{r4, r5, r6, r7, r8, lr}
   15610:	ldr	r6, [pc, #116]	; 1568c <__assert_fail@plt+0x4134>
   15614:	ldr	r3, [r6, #4]
   15618:	ldr	r7, [r6]
   1561c:	cmp	r3, #1
   15620:	movgt	r5, r7
   15624:	movgt	r4, #1
   15628:	ble	15648 <__assert_fail@plt+0x40f0>
   1562c:	ldr	r0, [r5, #12]
   15630:	bl	13908 <__assert_fail@plt+0x23b0>
   15634:	ldr	r3, [r6, #4]
   15638:	add	r4, r4, #1
   1563c:	cmp	r3, r4
   15640:	add	r5, r5, #8
   15644:	bgt	1562c <__assert_fail@plt+0x40d4>
   15648:	ldr	r0, [r7, #4]
   1564c:	ldr	r4, [pc, #60]	; 15690 <__assert_fail@plt+0x4138>
   15650:	cmp	r0, r4
   15654:	beq	15668 <__assert_fail@plt+0x4110>
   15658:	bl	13908 <__assert_fail@plt+0x23b0>
   1565c:	mov	r3, #256	; 0x100
   15660:	str	r4, [r6, #12]
   15664:	str	r3, [r6, #8]
   15668:	ldr	r4, [pc, #36]	; 15694 <__assert_fail@plt+0x413c>
   1566c:	cmp	r7, r4
   15670:	beq	15680 <__assert_fail@plt+0x4128>
   15674:	mov	r0, r7
   15678:	bl	13908 <__assert_fail@plt+0x23b0>
   1567c:	str	r4, [r6]
   15680:	mov	r3, #1
   15684:	str	r3, [r6, #4]
   15688:	pop	{r4, r5, r6, r7, r8, pc}
   1568c:	andeq	r7, r3, r8, ror #2
   15690:			; <UNDEFINED> instruction: 0x000372bc
   15694:	andeq	r7, r3, r0, ror r1
   15698:	ldr	r3, [pc, #4]	; 156a4 <__assert_fail@plt+0x414c>
   1569c:	mvn	r2, #0
   156a0:	b	151e8 <__assert_fail@plt+0x3c90>
   156a4:			; <UNDEFINED> instruction: 0x000373bc
   156a8:	ldr	r3, [pc]	; 156b0 <__assert_fail@plt+0x4158>
   156ac:	b	151e8 <__assert_fail@plt+0x3c90>
   156b0:			; <UNDEFINED> instruction: 0x000373bc
   156b4:	mov	r1, r0
   156b8:	ldr	r3, [pc, #8]	; 156c8 <__assert_fail@plt+0x4170>
   156bc:	mvn	r2, #0
   156c0:	mov	r0, #0
   156c4:	b	151e8 <__assert_fail@plt+0x3c90>
   156c8:			; <UNDEFINED> instruction: 0x000373bc
   156cc:	mov	r2, r1
   156d0:	ldr	r3, [pc, #8]	; 156e0 <__assert_fail@plt+0x4188>
   156d4:	mov	r1, r0
   156d8:	mov	r0, #0
   156dc:	b	151e8 <__assert_fail@plt+0x3c90>
   156e0:			; <UNDEFINED> instruction: 0x000373bc
   156e4:	push	{r4, r5, lr}
   156e8:	sub	sp, sp, #52	; 0x34
   156ec:	mov	r5, r2
   156f0:	mov	r4, r0
   156f4:	mov	r0, sp
   156f8:	bl	13b84 <__assert_fail@plt+0x262c>
   156fc:	mov	r3, sp
   15700:	mov	r1, r5
   15704:	mov	r0, r4
   15708:	mvn	r2, #0
   1570c:	bl	151e8 <__assert_fail@plt+0x3c90>
   15710:	add	sp, sp, #52	; 0x34
   15714:	pop	{r4, r5, pc}
   15718:	push	{r4, r5, r6, lr}
   1571c:	sub	sp, sp, #48	; 0x30
   15720:	mov	r5, r2
   15724:	mov	r6, r3
   15728:	mov	r4, r0
   1572c:	mov	r0, sp
   15730:	bl	13b84 <__assert_fail@plt+0x262c>
   15734:	mov	r3, sp
   15738:	mov	r2, r6
   1573c:	mov	r1, r5
   15740:	mov	r0, r4
   15744:	bl	151e8 <__assert_fail@plt+0x3c90>
   15748:	add	sp, sp, #48	; 0x30
   1574c:	pop	{r4, r5, r6, pc}
   15750:	mov	r2, r1
   15754:	mov	r1, r0
   15758:	mov	r0, #0
   1575c:	b	156e4 <__assert_fail@plt+0x418c>
   15760:	mov	r3, r2
   15764:	mov	r2, r1
   15768:	mov	r1, r0
   1576c:	mov	r0, #0
   15770:	b	15718 <__assert_fail@plt+0x41c0>
   15774:	push	{r4, r5, r6, r7, r8, lr}
   15778:	mov	r7, r0
   1577c:	ldr	lr, [pc, #100]	; 157e8 <__assert_fail@plt+0x4290>
   15780:	mov	r8, r1
   15784:	mov	r4, r2
   15788:	ldm	lr!, {r0, r1, r2, r3}
   1578c:	sub	sp, sp, #48	; 0x30
   15790:	mov	ip, sp
   15794:	lsr	r5, r4, #5
   15798:	stmia	ip!, {r0, r1, r2, r3}
   1579c:	add	r6, sp, #8
   157a0:	ldm	lr!, {r0, r1, r2, r3}
   157a4:	and	r4, r4, #31
   157a8:	stmia	ip!, {r0, r1, r2, r3}
   157ac:	ldm	lr, {r0, r1, r2, r3}
   157b0:	stm	ip, {r0, r1, r2, r3}
   157b4:	mov	r2, r8
   157b8:	ldr	lr, [r6, r5, lsl #2]
   157bc:	mov	r1, r7
   157c0:	mov	r3, sp
   157c4:	lsr	ip, lr, r4
   157c8:	eor	ip, ip, #1
   157cc:	and	ip, ip, #1
   157d0:	mov	r0, #0
   157d4:	eor	r4, lr, ip, lsl r4
   157d8:	str	r4, [r6, r5, lsl #2]
   157dc:	bl	151e8 <__assert_fail@plt+0x3c90>
   157e0:	add	sp, sp, #48	; 0x30
   157e4:	pop	{r4, r5, r6, r7, r8, pc}
   157e8:			; <UNDEFINED> instruction: 0x000373bc
   157ec:	mov	r2, r1
   157f0:	mvn	r1, #0
   157f4:	b	15774 <__assert_fail@plt+0x421c>
   157f8:	mov	r2, #58	; 0x3a
   157fc:	mvn	r1, #0
   15800:	b	15774 <__assert_fail@plt+0x421c>
   15804:	mov	r2, #58	; 0x3a
   15808:	b	15774 <__assert_fail@plt+0x421c>
   1580c:	push	{r4, r5, r6, r7, lr}
   15810:	sub	sp, sp, #100	; 0x64
   15814:	mov	r6, r0
   15818:	mov	r0, sp
   1581c:	mov	r7, r2
   15820:	bl	13b84 <__assert_fail@plt+0x262c>
   15824:	mov	ip, sp
   15828:	add	lr, sp, #48	; 0x30
   1582c:	ldm	ip!, {r0, r1, r2, r3}
   15830:	stmia	lr!, {r0, r1, r2, r3}
   15834:	ldm	ip!, {r0, r1, r2, r3}
   15838:	ldr	r5, [sp, #60]	; 0x3c
   1583c:	stmia	lr!, {r0, r1, r2, r3}
   15840:	mvn	r4, r5
   15844:	ldm	ip, {r0, r1, r2, r3}
   15848:	and	ip, r4, #67108864	; 0x4000000
   1584c:	eor	ip, ip, r5
   15850:	str	ip, [sp, #60]	; 0x3c
   15854:	stm	lr, {r0, r1, r2, r3}
   15858:	mov	r1, r7
   1585c:	mov	r0, r6
   15860:	add	r3, sp, #48	; 0x30
   15864:	mvn	r2, #0
   15868:	bl	151e8 <__assert_fail@plt+0x3c90>
   1586c:	add	sp, sp, #100	; 0x64
   15870:	pop	{r4, r5, r6, r7, pc}
   15874:	push	{r4, r5, r6, r7, r8, lr}
   15878:	mov	r5, r1
   1587c:	ldr	lr, [pc, #100]	; 158e8 <__assert_fail@plt+0x4390>
   15880:	mov	r4, r2
   15884:	mov	r7, r0
   15888:	mov	r8, r3
   1588c:	ldm	lr!, {r0, r1, r2, r3}
   15890:	sub	sp, sp, #48	; 0x30
   15894:	mov	ip, sp
   15898:	mov	r6, #10
   1589c:	stmia	ip!, {r0, r1, r2, r3}
   158a0:	cmp	r4, #0
   158a4:	cmpne	r5, #0
   158a8:	ldm	lr!, {r0, r1, r2, r3}
   158ac:	str	r6, [sp]
   158b0:	stmia	ip!, {r0, r1, r2, r3}
   158b4:	ldm	lr, {r0, r1, r2, r3}
   158b8:	stm	ip, {r0, r1, r2, r3}
   158bc:	beq	158e4 <__assert_fail@plt+0x438c>
   158c0:	mov	r3, sp
   158c4:	mov	r1, r8
   158c8:	mov	r0, r7
   158cc:	ldr	r2, [sp, #72]	; 0x48
   158d0:	str	r5, [sp, #40]	; 0x28
   158d4:	str	r4, [sp, #44]	; 0x2c
   158d8:	bl	151e8 <__assert_fail@plt+0x3c90>
   158dc:	add	sp, sp, #48	; 0x30
   158e0:	pop	{r4, r5, r6, r7, r8, pc}
   158e4:	bl	11534 <abort@plt>
   158e8:			; <UNDEFINED> instruction: 0x000373bc
   158ec:	push	{lr}		; (str lr, [sp, #-4]!)
   158f0:	sub	sp, sp, #12
   158f4:	mvn	ip, #0
   158f8:	str	ip, [sp]
   158fc:	bl	15874 <__assert_fail@plt+0x431c>
   15900:	add	sp, sp, #12
   15904:	pop	{pc}		; (ldr pc, [sp], #4)
   15908:	push	{lr}		; (str lr, [sp, #-4]!)
   1590c:	sub	sp, sp, #12
   15910:	mvn	ip, #0
   15914:	mov	r3, r2
   15918:	str	ip, [sp]
   1591c:	mov	r2, r1
   15920:	mov	r1, r0
   15924:	mov	r0, #0
   15928:	bl	15874 <__assert_fail@plt+0x431c>
   1592c:	add	sp, sp, #12
   15930:	pop	{pc}		; (ldr pc, [sp], #4)
   15934:	push	{lr}		; (str lr, [sp, #-4]!)
   15938:	sub	sp, sp, #12
   1593c:	str	r3, [sp]
   15940:	mov	r3, r2
   15944:	mov	r2, r1
   15948:	mov	r1, r0
   1594c:	mov	r0, #0
   15950:	bl	15874 <__assert_fail@plt+0x431c>
   15954:	add	sp, sp, #12
   15958:	pop	{pc}		; (ldr pc, [sp], #4)
   1595c:	ldr	r3, [pc]	; 15964 <__assert_fail@plt+0x440c>
   15960:	b	151e8 <__assert_fail@plt+0x3c90>
   15964:	andeq	r7, r3, r8, ror r1
   15968:	mov	r2, r1
   1596c:	ldr	r3, [pc, #8]	; 1597c <__assert_fail@plt+0x4424>
   15970:	mov	r1, r0
   15974:	mov	r0, #0
   15978:	b	151e8 <__assert_fail@plt+0x3c90>
   1597c:	andeq	r7, r3, r8, ror r1
   15980:	ldr	r3, [pc, #4]	; 1598c <__assert_fail@plt+0x4434>
   15984:	mvn	r2, #0
   15988:	b	151e8 <__assert_fail@plt+0x3c90>
   1598c:	andeq	r7, r3, r8, ror r1
   15990:	mov	r1, r0
   15994:	ldr	r3, [pc, #8]	; 159a4 <__assert_fail@plt+0x444c>
   15998:	mvn	r2, #0
   1599c:	mov	r0, #0
   159a0:	b	151e8 <__assert_fail@plt+0x3c90>
   159a4:	andeq	r7, r3, r8, ror r1
   159a8:	mov	ip, r0
   159ac:	ldr	r3, [r1, #40]	; 0x28
   159b0:	ldr	r0, [r1, #56]	; 0x38
   159b4:	cmp	r0, r3
   159b8:	ble	15a2c <__assert_fail@plt+0x44d4>
   159bc:	push	{r4, lr}
   159c0:	ldr	lr, [r1, #4]
   159c4:	ldrb	r0, [lr, r3]
   159c8:	strb	r0, [ip]
   159cc:	ldr	r4, [r1, #80]	; 0x50
   159d0:	cmp	r4, #1
   159d4:	ble	159f4 <__assert_fail@plt+0x449c>
   159d8:	ldr	r4, [r1, #28]
   159dc:	cmp	r3, r4
   159e0:	beq	159f4 <__assert_fail@plt+0x449c>
   159e4:	ldr	r4, [r1, #8]
   159e8:	ldr	r4, [r4, r3, lsl #2]
   159ec:	cmn	r4, #1
   159f0:	beq	15a74 <__assert_fail@plt+0x451c>
   159f4:	cmp	r0, #92	; 0x5c
   159f8:	beq	15a3c <__assert_fail@plt+0x44e4>
   159fc:	cmp	r0, #91	; 0x5b
   15a00:	beq	15a80 <__assert_fail@plt+0x4528>
   15a04:	cmp	r0, #93	; 0x5d
   15a08:	beq	15a64 <__assert_fail@plt+0x450c>
   15a0c:	cmp	r0, #94	; 0x5e
   15a10:	beq	15aa4 <__assert_fail@plt+0x454c>
   15a14:	cmp	r0, #45	; 0x2d
   15a18:	bne	15a54 <__assert_fail@plt+0x44fc>
   15a1c:	mov	r3, #22
   15a20:	strb	r3, [ip, #4]
   15a24:	mov	r0, #1
   15a28:	pop	{r4, pc}
   15a2c:	mov	r3, #2
   15a30:	strb	r3, [ip, #4]
   15a34:	mov	r0, #0
   15a38:	bx	lr
   15a3c:	tst	r2, #1
   15a40:	beq	15a54 <__assert_fail@plt+0x44fc>
   15a44:	ldr	r2, [r1, #48]	; 0x30
   15a48:	add	r3, r3, #1
   15a4c:	cmp	r3, r2
   15a50:	blt	15ae8 <__assert_fail@plt+0x4590>
   15a54:	mov	r3, #1
   15a58:	mov	r0, r3
   15a5c:	strb	r3, [ip, #4]
   15a60:	pop	{r4, pc}
   15a64:	mov	r3, #21
   15a68:	strb	r3, [ip, #4]
   15a6c:	mov	r0, #1
   15a70:	pop	{r4, pc}
   15a74:	mov	r0, #1
   15a78:	strb	r0, [ip, #4]
   15a7c:	pop	{r4, pc}
   15a80:	ldr	r1, [r1, #48]	; 0x30
   15a84:	add	r0, r3, #1
   15a88:	cmp	r0, r1
   15a8c:	blt	15ab4 <__assert_fail@plt+0x455c>
   15a90:	mov	r0, #1
   15a94:	mov	r3, #91	; 0x5b
   15a98:	strb	r0, [ip, #4]
   15a9c:	strb	r3, [ip]
   15aa0:	pop	{r4, pc}
   15aa4:	mov	r3, #25
   15aa8:	strb	r3, [ip, #4]
   15aac:	mov	r0, #1
   15ab0:	pop	{r4, pc}
   15ab4:	add	r3, lr, r3
   15ab8:	ldrb	r3, [r3, #1]
   15abc:	cmp	r3, #58	; 0x3a
   15ac0:	strb	r3, [ip]
   15ac4:	beq	15b00 <__assert_fail@plt+0x45a8>
   15ac8:	cmp	r3, #61	; 0x3d
   15acc:	beq	15b18 <__assert_fail@plt+0x45c0>
   15ad0:	cmp	r3, #46	; 0x2e
   15ad4:	bne	15a90 <__assert_fail@plt+0x4538>
   15ad8:	mov	r3, #26
   15adc:	strb	r3, [ip, #4]
   15ae0:	mov	r0, #2
   15ae4:	pop	{r4, pc}
   15ae8:	str	r3, [r1, #40]	; 0x28
   15aec:	ldrb	r3, [lr, r3]
   15af0:	mov	r0, #1
   15af4:	strb	r0, [ip, #4]
   15af8:	strb	r3, [ip]
   15afc:	pop	{r4, pc}
   15b00:	tst	r2, #4
   15b04:	beq	15a90 <__assert_fail@plt+0x4538>
   15b08:	mov	r3, #30
   15b0c:	strb	r3, [ip, #4]
   15b10:	mov	r0, #2
   15b14:	pop	{r4, pc}
   15b18:	mov	r3, #28
   15b1c:	strb	r3, [ip, #4]
   15b20:	mov	r0, #2
   15b24:	pop	{r4, pc}
   15b28:	ldrb	r3, [r1, #24]
   15b2c:	cmp	r3, #17
   15b30:	bne	15b48 <__assert_fail@plt+0x45f0>
   15b34:	ldr	r3, [r1, #20]
   15b38:	cmp	r0, r3
   15b3c:	ldrbeq	r3, [r1, #26]
   15b40:	orreq	r3, r3, #8
   15b44:	strbeq	r3, [r1, #26]
   15b48:	mov	r0, #0
   15b4c:	bx	lr
   15b50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b54:	sub	sp, sp, #52	; 0x34
   15b58:	ldr	r8, [r0, #84]	; 0x54
   15b5c:	str	r3, [sp, #40]	; 0x28
   15b60:	add	r3, r3, r3, lsl #1
   15b64:	ldr	fp, [r8, #24]
   15b68:	str	r1, [sp, #24]
   15b6c:	add	fp, fp, r3, lsl #2
   15b70:	ldr	r1, [fp, #4]
   15b74:	cmp	r1, #0
   15b78:	ble	15d18 <__assert_fail@plt+0x47c0>
   15b7c:	ldr	r3, [sp, #88]	; 0x58
   15b80:	mov	r6, r2
   15b84:	mov	r2, #1
   15b88:	mov	sl, r0
   15b8c:	add	r3, r3, r3, lsl r2
   15b90:	lsl	r2, r2, r6
   15b94:	lsl	r3, r3, #3
   15b98:	add	r3, r3, #24
   15b9c:	str	r3, [sp, #44]	; 0x2c
   15ba0:	ldr	r3, [sp, #24]
   15ba4:	str	r2, [sp, #16]
   15ba8:	mvn	r2, r2
   15bac:	str	r2, [sp, #20]
   15bb0:	and	r2, r3, #1
   15bb4:	and	r3, r3, #2
   15bb8:	mov	r7, #0
   15bbc:	str	r2, [sp, #28]
   15bc0:	str	r3, [sp, #12]
   15bc4:	b	15be4 <__assert_fail@plt+0x468c>
   15bc8:	cmp	r3, #9
   15bcc:	beq	15d2c <__assert_fail@plt+0x47d4>
   15bd0:	cmp	r3, #4
   15bd4:	beq	15c24 <__assert_fail@plt+0x46cc>
   15bd8:	add	r7, r7, #1
   15bdc:	cmp	r1, r7
   15be0:	ble	15d18 <__assert_fail@plt+0x47c0>
   15be4:	ldr	r3, [fp, #8]
   15be8:	ldr	r2, [r8]
   15bec:	ldr	r5, [r3, r7, lsl #2]
   15bf0:	add	r3, r2, r5, lsl #3
   15bf4:	ldrb	r3, [r3, #4]
   15bf8:	cmp	r3, #8
   15bfc:	bne	15bc8 <__assert_fail@plt+0x4670>
   15c00:	ldr	r3, [sp, #28]
   15c04:	cmp	r3, #0
   15c08:	beq	15bd8 <__assert_fail@plt+0x4680>
   15c0c:	ldr	r3, [r2, r5, lsl #3]
   15c10:	cmp	r3, r6
   15c14:	bne	15bd8 <__assert_fail@plt+0x4680>
   15c18:	mvn	r0, #0
   15c1c:	add	sp, sp, #52	; 0x34
   15c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c24:	ldr	r3, [sp, #88]	; 0x58
   15c28:	cmn	r3, #1
   15c2c:	beq	15bd8 <__assert_fail@plt+0x4680>
   15c30:	add	r9, r5, r5, lsl #1
   15c34:	ldr	r4, [sl, #116]	; 0x74
   15c38:	ldr	r3, [sp, #44]	; 0x2c
   15c3c:	str	fp, [sp, #32]
   15c40:	str	r7, [sp, #36]	; 0x24
   15c44:	lsl	r9, r9, #2
   15c48:	add	r4, r4, r3
   15c4c:	ldr	fp, [sp, #24]
   15c50:	ldr	r7, [sp, #40]	; 0x28
   15c54:	b	15c68 <__assert_fail@plt+0x4710>
   15c58:	add	r4, r4, #24
   15c5c:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   15c60:	cmp	r3, #0
   15c64:	beq	15d00 <__assert_fail@plt+0x47a8>
   15c68:	ldr	r3, [r4, #-24]	; 0xffffffe8
   15c6c:	cmp	r5, r3
   15c70:	bne	15c58 <__assert_fail@plt+0x4700>
   15c74:	cmp	r6, #31
   15c78:	mov	r2, r6
   15c7c:	mov	r1, fp
   15c80:	mov	r0, sl
   15c84:	bgt	15c98 <__assert_fail@plt+0x4740>
   15c88:	ldr	r3, [r4, #-8]
   15c8c:	ldr	ip, [sp, #16]
   15c90:	tst	ip, r3
   15c94:	beq	15c58 <__assert_fail@plt+0x4700>
   15c98:	ldr	r3, [r8, #20]
   15c9c:	add	r3, r3, r9
   15ca0:	ldr	r3, [r3, #8]
   15ca4:	ldr	ip, [r3]
   15ca8:	cmp	r7, ip
   15cac:	mov	r3, ip
   15cb0:	beq	15d50 <__assert_fail@plt+0x47f8>
   15cb4:	ldr	ip, [sp, #88]	; 0x58
   15cb8:	str	ip, [sp]
   15cbc:	bl	15b50 <__assert_fail@plt+0x45f8>
   15cc0:	cmn	r0, #1
   15cc4:	beq	15c18 <__assert_fail@plt+0x46c0>
   15cc8:	cmp	r0, #0
   15ccc:	bne	15cdc <__assert_fail@plt+0x4784>
   15cd0:	ldr	r3, [sp, #12]
   15cd4:	cmp	r3, #0
   15cd8:	bne	15d44 <__assert_fail@plt+0x47ec>
   15cdc:	cmp	r6, #31
   15ce0:	add	r4, r4, #24
   15ce4:	ldrle	r3, [r4, #-32]	; 0xffffffe0
   15ce8:	ldrle	r2, [sp, #20]
   15cec:	andle	r3, r3, r2
   15cf0:	strle	r3, [r4, #-32]	; 0xffffffe0
   15cf4:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   15cf8:	cmp	r3, #0
   15cfc:	bne	15c68 <__assert_fail@plt+0x4710>
   15d00:	ldr	fp, [sp, #32]
   15d04:	ldr	r7, [sp, #36]	; 0x24
   15d08:	ldr	r1, [fp, #4]
   15d0c:	add	r7, r7, #1
   15d10:	cmp	r1, r7
   15d14:	bgt	15be4 <__assert_fail@plt+0x468c>
   15d18:	ldr	r3, [sp, #24]
   15d1c:	lsr	r0, r3, #1
   15d20:	and	r0, r0, #1
   15d24:	add	sp, sp, #52	; 0x34
   15d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d2c:	ldr	r3, [sp, #12]
   15d30:	cmp	r3, #0
   15d34:	beq	15bd8 <__assert_fail@plt+0x4680>
   15d38:	ldr	r3, [r2, r5, lsl #3]
   15d3c:	cmp	r6, r3
   15d40:	bne	15bd8 <__assert_fail@plt+0x4680>
   15d44:	mov	r0, #0
   15d48:	add	sp, sp, #52	; 0x34
   15d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d50:	ldr	r3, [sp, #24]
   15d54:	ands	r0, r3, #1
   15d58:	mvnne	r0, #0
   15d5c:	add	sp, sp, #52	; 0x34
   15d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d64:	add	r1, r1, r1, lsl #1
   15d68:	ldr	ip, [r0, #116]	; 0x74
   15d6c:	push	{r4, lr}
   15d70:	add	ip, ip, r1, lsl #3
   15d74:	ldr	lr, [sp, #8]
   15d78:	ldr	r1, [ip, #8]
   15d7c:	ldr	r4, [sp, #12]
   15d80:	cmp	r1, lr
   15d84:	bgt	15dd4 <__assert_fail@plt+0x487c>
   15d88:	ldr	ip, [ip, #12]
   15d8c:	cmp	lr, ip
   15d90:	bgt	15dc8 <__assert_fail@plt+0x4870>
   15d94:	cmp	lr, ip
   15d98:	moveq	ip, #2
   15d9c:	movne	ip, #0
   15da0:	cmp	r1, lr
   15da4:	movne	r1, ip
   15da8:	orreq	r1, ip, #1
   15dac:	cmp	r1, #0
   15db0:	bne	15dbc <__assert_fail@plt+0x4864>
   15db4:	mov	r0, r1
   15db8:	pop	{r4, pc}
   15dbc:	str	r4, [sp, #8]
   15dc0:	pop	{r4, lr}
   15dc4:	b	15b50 <__assert_fail@plt+0x45f8>
   15dc8:	mov	r1, #1
   15dcc:	mov	r0, r1
   15dd0:	pop	{r4, pc}
   15dd4:	mvn	r1, #0
   15dd8:	b	15db4 <__assert_fail@plt+0x485c>
   15ddc:	push	{r4, r5, r6, lr}
   15de0:	mov	r4, r0
   15de4:	mov	r6, r1
   15de8:	mov	r5, r2
   15dec:	b	15df4 <__assert_fail@plt+0x489c>
   15df0:	mov	r4, r3
   15df4:	ldr	r3, [r4, #4]
   15df8:	cmp	r3, #0
   15dfc:	bne	15df0 <__assert_fail@plt+0x4898>
   15e00:	ldr	r3, [r4, #8]
   15e04:	cmp	r3, #0
   15e08:	bne	15df0 <__assert_fail@plt+0x4898>
   15e0c:	mov	r1, r4
   15e10:	mov	r0, r5
   15e14:	blx	r6
   15e18:	cmp	r0, #0
   15e1c:	popne	{r4, r5, r6, pc}
   15e20:	ldr	r2, [r4]
   15e24:	cmp	r2, #0
   15e28:	popeq	{r4, r5, r6, pc}
   15e2c:	ldr	r3, [r2, #8]
   15e30:	cmp	r4, r3
   15e34:	cmpne	r3, #0
   15e38:	moveq	r4, #1
   15e3c:	movne	r4, #0
   15e40:	cmp	r4, #0
   15e44:	mov	r4, r2
   15e48:	bne	15e0c <__assert_fail@plt+0x48b4>
   15e4c:	b	15df0 <__assert_fail@plt+0x4898>
   15e50:	push	{r4, r5, r6, r7, r8, lr}
   15e54:	mov	r4, r0
   15e58:	mov	r6, r1
   15e5c:	mov	r5, r2
   15e60:	mov	r7, #0
   15e64:	b	15e6c <__assert_fail@plt+0x4914>
   15e68:	mov	r4, r3
   15e6c:	mov	r1, r4
   15e70:	mov	r0, r5
   15e74:	blx	r6
   15e78:	cmp	r0, #0
   15e7c:	popne	{r4, r5, r6, r7, r8, pc}
   15e80:	ldr	r3, [r4, #4]
   15e84:	cmp	r3, #0
   15e88:	moveq	r2, r7
   15e8c:	bne	15e68 <__assert_fail@plt+0x4910>
   15e90:	ldr	r3, [r4, #8]
   15e94:	cmp	r3, #0
   15e98:	cmpne	r2, r3
   15e9c:	bne	15e68 <__assert_fail@plt+0x4910>
   15ea0:	ldr	r3, [r4]
   15ea4:	mov	r2, r4
   15ea8:	subs	r4, r3, #0
   15eac:	popeq	{r4, r5, r6, r7, r8, pc}
   15eb0:	ldr	r3, [r4, #8]
   15eb4:	cmp	r3, #0
   15eb8:	cmpne	r2, r3
   15ebc:	beq	15ea0 <__assert_fail@plt+0x4948>
   15ec0:	b	15e68 <__assert_fail@plt+0x4910>
   15ec4:	ldr	r3, [r0, #80]	; 0x50
   15ec8:	push	{r4, r5, r6, lr}
   15ecc:	cmp	r3, #1
   15ed0:	mov	r4, r0
   15ed4:	mov	r5, r1
   15ed8:	ble	15f20 <__assert_fail@plt+0x49c8>
   15edc:	cmn	r1, #-1073741823	; 0xc0000001
   15ee0:	bhi	15f50 <__assert_fail@plt+0x49f8>
   15ee4:	lsl	r6, r1, #2
   15ee8:	mov	r1, r6
   15eec:	ldr	r0, [r0, #8]
   15ef0:	bl	247c0 <__assert_fail@plt+0x13268>
   15ef4:	subs	r3, r0, #0
   15ef8:	beq	15f50 <__assert_fail@plt+0x49f8>
   15efc:	ldr	r0, [r4, #12]
   15f00:	str	r3, [r4, #8]
   15f04:	cmp	r0, #0
   15f08:	beq	15f20 <__assert_fail@plt+0x49c8>
   15f0c:	mov	r1, r6
   15f10:	bl	247c0 <__assert_fail@plt+0x13268>
   15f14:	cmp	r0, #0
   15f18:	beq	15f50 <__assert_fail@plt+0x49f8>
   15f1c:	str	r0, [r4, #12]
   15f20:	ldrb	r3, [r4, #75]	; 0x4b
   15f24:	cmp	r3, #0
   15f28:	bne	15f38 <__assert_fail@plt+0x49e0>
   15f2c:	mov	r0, #0
   15f30:	str	r5, [r4, #36]	; 0x24
   15f34:	pop	{r4, r5, r6, pc}
   15f38:	mov	r1, r5
   15f3c:	ldr	r0, [r4, #4]
   15f40:	bl	247c0 <__assert_fail@plt+0x13268>
   15f44:	cmp	r0, #0
   15f48:	strne	r0, [r4, #4]
   15f4c:	bne	15f2c <__assert_fail@plt+0x49d4>
   15f50:	mov	r0, #12
   15f54:	pop	{r4, r5, r6, pc}
   15f58:	push	{r4, r5, r6, lr}
   15f5c:	mov	r5, r1
   15f60:	ldr	r3, [r0]
   15f64:	ldr	r1, [r0, #4]
   15f68:	mov	r4, r0
   15f6c:	cmp	r3, r1
   15f70:	beq	15f8c <__assert_fail@plt+0x4a34>
   15f74:	ldr	r3, [r0, #8]
   15f78:	add	r2, r1, #1
   15f7c:	str	r2, [r4, #4]
   15f80:	mov	r0, #1
   15f84:	str	r5, [r3, r1, lsl #2]
   15f88:	pop	{r4, r5, r6, pc}
   15f8c:	add	r1, r1, #1
   15f90:	ldr	r0, [r0, #8]
   15f94:	lsl	r3, r1, #1
   15f98:	str	r3, [r4]
   15f9c:	lsl	r1, r1, #3
   15fa0:	bl	247c0 <__assert_fail@plt+0x13268>
   15fa4:	subs	r3, r0, #0
   15fa8:	ldrne	r1, [r4, #4]
   15fac:	strne	r3, [r4, #8]
   15fb0:	bne	15f78 <__assert_fail@plt+0x4a20>
   15fb4:	mov	r0, r3
   15fb8:	pop	{r4, r5, r6, pc}
   15fbc:	ldr	r3, [r1, #8]
   15fc0:	push	{r4, r5, r6, r7, r8, lr}
   15fc4:	mov	r5, r1
   15fc8:	mov	r4, #0
   15fcc:	str	r2, [r5], #16
   15fd0:	mov	r8, r0
   15fd4:	str	r3, [r1, #16]
   15fd8:	lsl	r0, r3, #2
   15fdc:	str	r4, [r1, #20]
   15fe0:	mov	r7, r1
   15fe4:	mov	r6, r2
   15fe8:	bl	24794 <__assert_fail@plt+0x1323c>
   15fec:	cmp	r0, r4
   15ff0:	str	r0, [r7, #24]
   15ff4:	beq	16090 <__assert_fail@plt+0x4b38>
   15ff8:	ldr	r0, [r7, #8]
   15ffc:	cmp	r0, #0
   16000:	bgt	16014 <__assert_fail@plt+0x4abc>
   16004:	b	16050 <__assert_fail@plt+0x4af8>
   16008:	add	r4, r4, #1
   1600c:	cmp	r0, r4
   16010:	ble	16050 <__assert_fail@plt+0x4af8>
   16014:	ldr	r2, [r7, #12]
   16018:	ldr	r3, [r8]
   1601c:	ldr	r1, [r2, r4, lsl #2]
   16020:	add	r3, r3, r1, lsl #3
   16024:	ldrb	r3, [r3, #4]
   16028:	tst	r3, #8
   1602c:	bne	16008 <__assert_fail@plt+0x4ab0>
   16030:	mov	r0, r5
   16034:	bl	15f58 <__assert_fail@plt+0x4a00>
   16038:	cmp	r0, #0
   1603c:	beq	16090 <__assert_fail@plt+0x4b38>
   16040:	ldr	r0, [r7, #8]
   16044:	add	r4, r4, #1
   16048:	cmp	r0, r4
   1604c:	bgt	16014 <__assert_fail@plt+0x4abc>
   16050:	ldr	r4, [r8, #68]	; 0x44
   16054:	ldr	r5, [r8, #32]
   16058:	and	r6, r6, r4
   1605c:	add	r6, r6, r6, lsl #1
   16060:	lsl	r4, r6, #2
   16064:	add	r6, r5, r4
   16068:	ldr	r3, [r5, r4]
   1606c:	ldr	r2, [r6, #4]
   16070:	cmp	r2, r3
   16074:	ldrgt	r2, [r6, #8]
   16078:	ble	16098 <__assert_fail@plt+0x4b40>
   1607c:	add	r1, r3, #1
   16080:	str	r1, [r5, r4]
   16084:	mov	r0, #0
   16088:	str	r7, [r2, r3, lsl #2]
   1608c:	pop	{r4, r5, r6, r7, r8, pc}
   16090:	mov	r0, #12
   16094:	pop	{r4, r5, r6, r7, r8, pc}
   16098:	add	r3, r3, #1
   1609c:	ldr	r0, [r6, #8]
   160a0:	lsl	r1, r3, #3
   160a4:	lsl	r8, r3, #1
   160a8:	bl	247c0 <__assert_fail@plt+0x13268>
   160ac:	subs	r2, r0, #0
   160b0:	beq	16090 <__assert_fail@plt+0x4b38>
   160b4:	ldr	r3, [r5, r4]
   160b8:	str	r2, [r6, #8]
   160bc:	str	r8, [r6, #4]
   160c0:	b	1607c <__assert_fail@plt+0x4b24>
   160c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160c8:	mov	r5, r0
   160cc:	ldr	r9, [r0, #36]	; 0x24
   160d0:	ldr	r3, [r0, #48]	; 0x30
   160d4:	ldr	r4, [r0, #28]
   160d8:	cmp	r9, r3
   160dc:	movge	r9, r3
   160e0:	cmp	r9, r4
   160e4:	sub	sp, sp, #84	; 0x54
   160e8:	ble	16188 <__assert_fail@plt+0x4c30>
   160ec:	add	r7, r0, #16
   160f0:	add	r8, sp, #8
   160f4:	mov	sl, #1
   160f8:	mvn	r6, #0
   160fc:	ldm	r7, {r0, r1}
   16100:	ldr	ip, [r5, #64]	; 0x40
   16104:	sub	r2, r9, r4
   16108:	cmp	ip, #0
   1610c:	stm	r8, {r0, r1}
   16110:	bne	161cc <__assert_fail@plt+0x4c74>
   16114:	ldr	r3, [r5, #24]
   16118:	ldr	r1, [r5]
   1611c:	add	r3, r4, r3
   16120:	add	r1, r1, r3
   16124:	mov	r3, r7
   16128:	add	r0, sp, #4
   1612c:	bl	24b68 <__assert_fail@plt+0x13610>
   16130:	sub	r2, r0, #1
   16134:	cmn	r2, #3
   16138:	mov	r3, r0
   1613c:	bhi	16198 <__assert_fail@plt+0x4c40>
   16140:	cmn	r0, #2
   16144:	ldrne	r2, [sp, #4]
   16148:	beq	1622c <__assert_fail@plt+0x4cd4>
   1614c:	ldr	r1, [r5, #8]
   16150:	add	r0, r4, r3
   16154:	add	ip, r4, #1
   16158:	cmp	ip, r0
   1615c:	str	r2, [r1, r4, lsl #2]
   16160:	add	r3, r1, r4, lsl #2
   16164:	bge	16254 <__assert_fail@plt+0x4cfc>
   16168:	sub	r2, r0, #-1073741823	; 0xc0000001
   1616c:	add	r2, r1, r2, lsl #2
   16170:	str	r6, [r3, #4]!
   16174:	cmp	r2, r3
   16178:	bne	16170 <__assert_fail@plt+0x4c18>
   1617c:	mov	r4, r0
   16180:	cmp	r9, r4
   16184:	bgt	160fc <__assert_fail@plt+0x4ba4>
   16188:	str	r4, [r5, #28]
   1618c:	str	r4, [r5, #32]
   16190:	add	sp, sp, #84	; 0x54
   16194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16198:	ldr	r3, [r5]
   1619c:	ldr	r2, [r5, #24]
   161a0:	add	r3, r3, r4
   161a4:	ldr	r1, [r5, #64]	; 0x40
   161a8:	ldrb	r2, [r3, r2]
   161ac:	cmp	r1, #0
   161b0:	mov	r3, sl
   161b4:	str	r2, [sp, #4]
   161b8:	ldrbne	r2, [r1, r2]
   161bc:	ldm	r8, {r0, r1}
   161c0:	strne	r2, [sp, #4]
   161c4:	stm	r7, {r0, r1}
   161c8:	b	1614c <__assert_fail@plt+0x4bf4>
   161cc:	ldr	r3, [r5, #80]	; 0x50
   161d0:	cmp	r3, #0
   161d4:	ble	16224 <__assert_fail@plt+0x4ccc>
   161d8:	add	r0, sp, #15
   161dc:	mov	r3, #0
   161e0:	b	161e8 <__assert_fail@plt+0x4c90>
   161e4:	ldr	ip, [r5, #64]	; 0x40
   161e8:	ldr	r1, [r5]
   161ec:	ldr	lr, [r5, #24]
   161f0:	add	r1, r1, r4
   161f4:	add	r1, r1, r3
   161f8:	ldr	fp, [r5, #4]
   161fc:	ldrb	lr, [r1, lr]
   16200:	add	r1, fp, r4
   16204:	ldrb	ip, [ip, lr]
   16208:	strb	ip, [r1, r3]
   1620c:	ldr	r1, [r5, #80]	; 0x50
   16210:	add	r3, r3, #1
   16214:	cmp	r1, r3
   16218:	cmpgt	r2, r3
   1621c:	strb	ip, [r0, #1]!
   16220:	bgt	161e4 <__assert_fail@plt+0x4c8c>
   16224:	add	r1, sp, #16
   16228:	b	16124 <__assert_fail@plt+0x4bcc>
   1622c:	ldr	r2, [r5, #36]	; 0x24
   16230:	ldr	r3, [r5, #48]	; 0x30
   16234:	cmp	r2, r3
   16238:	bge	16198 <__assert_fail@plt+0x4c40>
   1623c:	ldm	r8, {r0, r1}
   16240:	stm	r7, {r0, r1}
   16244:	str	r4, [r5, #28]
   16248:	str	r4, [r5, #32]
   1624c:	add	sp, sp, #84	; 0x54
   16250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16254:	mov	r4, ip
   16258:	b	16180 <__assert_fail@plt+0x4c28>
   1625c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16260:	mov	r5, r0
   16264:	ldr	r7, [r0, #36]	; 0x24
   16268:	ldr	r3, [r0, #48]	; 0x30
   1626c:	ldrb	r2, [r0, #74]	; 0x4a
   16270:	cmp	r7, r3
   16274:	movge	r7, r3
   16278:	cmp	r2, #0
   1627c:	sub	sp, sp, #100	; 0x64
   16280:	ldr	r6, [r0, #28]
   16284:	bne	16294 <__assert_fail@plt+0x4d3c>
   16288:	ldr	r3, [r0, #64]	; 0x40
   1628c:	cmp	r3, #0
   16290:	beq	163c8 <__assert_fail@plt+0x4e70>
   16294:	ldr	r4, [r5, #32]
   16298:	cmp	r6, r7
   1629c:	bge	163b4 <__assert_fail@plt+0x4e5c>
   162a0:	sub	r3, r7, r6
   162a4:	str	r3, [sp, #4]
   162a8:	add	sl, r5, #16
   162ac:	add	r3, sp, #24
   162b0:	str	r3, [sp]
   162b4:	add	r3, sp, #20
   162b8:	str	r3, [sp, #8]
   162bc:	ldm	sl, {r0, r1}
   162c0:	ldr	r2, [r5, #64]	; 0x40
   162c4:	ldr	r3, [sp]
   162c8:	cmp	r2, #0
   162cc:	stm	r3, {r0, r1}
   162d0:	bne	16514 <__assert_fail@plt+0x4fbc>
   162d4:	ldr	r3, [r5, #24]
   162d8:	ldr	r2, [r5]
   162dc:	add	r3, r4, r3
   162e0:	add	r3, r2, r3
   162e4:	str	r3, [sp, #12]
   162e8:	mov	r3, sl
   162ec:	ldr	r2, [sp, #4]
   162f0:	ldr	r0, [sp, #8]
   162f4:	ldr	r1, [sp, #12]
   162f8:	bl	24b68 <__assert_fail@plt+0x13610>
   162fc:	sub	r3, r0, #1
   16300:	cmn	r3, #4
   16304:	mov	r8, r0
   16308:	str	r3, [sp, #4]
   1630c:	bhi	16624 <__assert_fail@plt+0x50cc>
   16310:	ldr	fp, [sp, #20]
   16314:	mov	r0, fp
   16318:	bl	1151c <towupper@plt>
   1631c:	cmp	fp, r0
   16320:	mov	r9, r0
   16324:	beq	1660c <__assert_fail@plt+0x50b4>
   16328:	add	r0, sp, #32
   1632c:	ldr	r2, [sp]
   16330:	mov	r1, r9
   16334:	bl	111e0 <wcrtomb@plt>
   16338:	cmp	r8, r0
   1633c:	mov	fp, r0
   16340:	bne	166c4 <__assert_fail@plt+0x516c>
   16344:	ldr	r0, [r5, #4]
   16348:	add	r1, sp, #32
   1634c:	add	r0, r0, r6
   16350:	mov	r2, r8
   16354:	bl	11264 <memcpy@plt>
   16358:	ldrb	r3, [r5, #76]	; 0x4c
   1635c:	cmp	r3, #0
   16360:	bne	1669c <__assert_fail@plt+0x5144>
   16364:	add	r2, r8, r4
   16368:	ldr	r3, [r5, #8]
   1636c:	add	r8, r6, r8
   16370:	add	r1, r6, #1
   16374:	cmp	r1, r8
   16378:	mov	r4, r2
   1637c:	str	r9, [r3, r6, lsl #2]
   16380:	bge	166bc <__assert_fail@plt+0x5164>
   16384:	sub	r2, r8, #-1073741823	; 0xc0000001
   16388:	add	r6, r3, r6, lsl #2
   1638c:	add	r3, r3, r2, lsl #2
   16390:	mvn	r2, #0
   16394:	str	r2, [r6, #4]!
   16398:	cmp	r3, r6
   1639c:	bne	16394 <__assert_fail@plt+0x4e3c>
   163a0:	mov	r6, r8
   163a4:	b	16298 <__assert_fail@plt+0x4d40>
   163a8:	ldr	r3, [sp]
   163ac:	ldm	r3, {r0, r1}
   163b0:	stm	sl, {r0, r1}
   163b4:	mov	r0, #0
   163b8:	str	r6, [r5, #28]
   163bc:	str	r4, [r5, #32]
   163c0:	add	sp, sp, #100	; 0x64
   163c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163c8:	ldrb	r3, [r0, #76]	; 0x4c
   163cc:	cmp	r3, #0
   163d0:	bne	16294 <__assert_fail@plt+0x4d3c>
   163d4:	cmp	r6, r7
   163d8:	bge	165fc <__assert_fail@plt+0x50a4>
   163dc:	add	sl, r0, #16
   163e0:	mvn	r9, #0
   163e4:	b	16414 <__assert_fail@plt+0x4ebc>
   163e8:	mov	r0, fp
   163ec:	bl	1151c <towupper@plt>
   163f0:	bics	r3, r0, #127	; 0x7f
   163f4:	bne	1643c <__assert_fail@plt+0x4ee4>
   163f8:	ldr	r3, [r5, #4]
   163fc:	strb	r0, [r3, r6]
   16400:	ldr	r3, [r5, #8]
   16404:	str	r0, [r3, r6, lsl #2]
   16408:	add	r6, r6, #1
   1640c:	cmp	r7, r6
   16410:	ble	165fc <__assert_fail@plt+0x50a4>
   16414:	ldr	r8, [r5]
   16418:	ldr	r4, [r5, #24]
   1641c:	add	r3, r8, r4
   16420:	ldrb	fp, [r3, r6]
   16424:	tst	fp, #128	; 0x80
   16428:	bne	1643c <__assert_fail@plt+0x4ee4>
   1642c:	mov	r0, sl
   16430:	bl	11294 <mbsinit@plt>
   16434:	cmp	r0, #0
   16438:	bne	163e8 <__assert_fail@plt+0x4e90>
   1643c:	ldm	sl, {r0, r1}
   16440:	add	r2, sp, #24
   16444:	sub	r3, r7, r6
   16448:	add	r4, r4, r6
   1644c:	stm	r2, {r0, r1}
   16450:	str	r3, [sp, #4]
   16454:	mov	r2, r3
   16458:	add	r1, r8, r4
   1645c:	mov	r3, sl
   16460:	add	r0, sp, #20
   16464:	bl	24b68 <__assert_fail@plt+0x13610>
   16468:	add	r2, sp, #24
   1646c:	str	r2, [sp]
   16470:	add	r2, sp, #20
   16474:	mov	r4, r6
   16478:	str	r2, [sp, #8]
   1647c:	sub	r3, r0, #1
   16480:	cmn	r3, #4
   16484:	mov	r8, r0
   16488:	bhi	16590 <__assert_fail@plt+0x5038>
   1648c:	ldr	r3, [sp, #20]
   16490:	mov	r0, r3
   16494:	str	r3, [sp, #12]
   16498:	bl	1151c <towupper@plt>
   1649c:	ldr	r3, [sp, #12]
   164a0:	cmp	r3, r0
   164a4:	mov	fp, r0
   164a8:	beq	1656c <__assert_fail@plt+0x5014>
   164ac:	mov	r1, r0
   164b0:	add	r2, sp, #24
   164b4:	add	r0, sp, #32
   164b8:	bl	111e0 <wcrtomb@plt>
   164bc:	cmp	r8, r0
   164c0:	bne	165c0 <__assert_fail@plt+0x5068>
   164c4:	ldr	r0, [r5, #4]
   164c8:	mov	r2, r8
   164cc:	add	r0, r0, r6
   164d0:	add	r1, sp, #32
   164d4:	bl	11264 <memcpy@plt>
   164d8:	add	r6, r6, #1
   164dc:	ldr	r2, [r5, #8]
   164e0:	sub	r3, r6, #1
   164e4:	add	r8, r3, r8
   164e8:	cmp	r6, r8
   164ec:	str	fp, [r2, r4, lsl #2]
   164f0:	add	r4, r2, r4, lsl #2
   164f4:	bge	1640c <__assert_fail@plt+0x4eb4>
   164f8:	sub	r3, r8, #-1073741823	; 0xc0000001
   164fc:	add	r3, r2, r3, lsl #2
   16500:	str	r9, [r4, #4]!
   16504:	cmp	r4, r3
   16508:	bne	16500 <__assert_fail@plt+0x4fa8>
   1650c:	mov	r6, r8
   16510:	b	1640c <__assert_fail@plt+0x4eb4>
   16514:	ldr	lr, [r5, #80]	; 0x50
   16518:	cmp	lr, #0
   1651c:	ble	16560 <__assert_fail@plt+0x5008>
   16520:	ldr	r3, [r5, #24]
   16524:	ldr	r0, [sp, #4]
   16528:	ldr	r1, [r5]
   1652c:	add	r3, r4, r3
   16530:	cmp	lr, r0
   16534:	sub	r3, r3, #1
   16538:	movge	lr, r0
   1653c:	add	r1, r1, r3
   16540:	add	r0, sp, #31
   16544:	mov	r3, #0
   16548:	ldrb	ip, [r1, #1]!
   1654c:	add	r3, r3, #1
   16550:	cmp	r3, lr
   16554:	ldrb	ip, [r2, ip]
   16558:	strb	ip, [r0, #1]!
   1655c:	blt	16548 <__assert_fail@plt+0x4ff0>
   16560:	add	r3, sp, #32
   16564:	str	r3, [sp, #12]
   16568:	b	162e8 <__assert_fail@plt+0x4d90>
   1656c:	ldr	r3, [r5, #24]
   16570:	ldr	r1, [r5]
   16574:	ldr	r0, [r5, #4]
   16578:	add	r3, r6, r3
   1657c:	add	r1, r1, r3
   16580:	add	r0, r0, r6
   16584:	mov	r2, r8
   16588:	bl	11264 <memcpy@plt>
   1658c:	b	164d8 <__assert_fail@plt+0x4f80>
   16590:	cmn	r3, #3
   16594:	bne	165c8 <__assert_fail@plt+0x5070>
   16598:	ldr	r2, [r5, #36]	; 0x24
   1659c:	ldr	r3, [r5, #48]	; 0x30
   165a0:	cmp	r2, r3
   165a4:	blt	165f0 <__assert_fail@plt+0x5098>
   165a8:	ldr	r3, [r5, #4]
   165ac:	strb	fp, [r3, r6]
   165b0:	ldr	r3, [r5, #8]
   165b4:	add	r6, r6, #1
   165b8:	str	fp, [r3, r4, lsl #2]
   165bc:	b	1640c <__assert_fail@plt+0x4eb4>
   165c0:	mov	r4, r6
   165c4:	b	162bc <__assert_fail@plt+0x4d64>
   165c8:	ldr	r3, [r5, #4]
   165cc:	cmn	r0, #1
   165d0:	strb	fp, [r3, r6]
   165d4:	ldr	r3, [r5, #8]
   165d8:	add	r6, r6, #1
   165dc:	str	fp, [r3, r4, lsl #2]
   165e0:	addeq	r3, sp, #24
   165e4:	ldmeq	r3, {r0, r1}
   165e8:	stmeq	sl, {r0, r1}
   165ec:	b	1640c <__assert_fail@plt+0x4eb4>
   165f0:	add	r3, sp, #24
   165f4:	ldm	r3, {r0, r1}
   165f8:	stm	sl, {r0, r1}
   165fc:	str	r6, [r5, #28]
   16600:	str	r6, [r5, #32]
   16604:	mov	r0, #0
   16608:	b	163c0 <__assert_fail@plt+0x4e68>
   1660c:	ldr	r0, [r5, #4]
   16610:	ldr	r1, [sp, #12]
   16614:	add	r0, r0, r6
   16618:	mov	r2, r8
   1661c:	bl	11264 <memcpy@plt>
   16620:	b	16358 <__assert_fail@plt+0x4e00>
   16624:	ldr	r3, [sp, #4]
   16628:	cmn	r3, #3
   1662c:	bne	16640 <__assert_fail@plt+0x50e8>
   16630:	ldr	r2, [r5, #36]	; 0x24
   16634:	ldr	r3, [r5, #48]	; 0x30
   16638:	cmp	r2, r3
   1663c:	blt	163a8 <__assert_fail@plt+0x4e50>
   16640:	ldr	r3, [r5]
   16644:	ldr	r1, [r5, #24]
   16648:	add	r3, r3, r4
   1664c:	ldr	r2, [r5, #64]	; 0x40
   16650:	ldrb	r3, [r3, r1]
   16654:	cmp	r2, #0
   16658:	mov	r1, r6
   1665c:	ldrbne	r3, [r2, r3]
   16660:	ldr	r2, [r5, #4]
   16664:	strb	r3, [r2, r6]
   16668:	ldrb	r2, [r5, #76]	; 0x4c
   1666c:	cmp	r2, #0
   16670:	ldrne	r2, [r5, #12]
   16674:	strne	r4, [r2, r6, lsl #2]
   16678:	ldr	r2, [r5, #8]
   1667c:	cmn	r8, #1
   16680:	add	r4, r4, #1
   16684:	add	r6, r6, #1
   16688:	str	r3, [r2, r1, lsl #2]
   1668c:	ldreq	r3, [sp]
   16690:	ldmeq	r3, {r0, r1}
   16694:	stmeq	sl, {r0, r1}
   16698:	b	16298 <__assert_fail@plt+0x4d40>
   1669c:	ldr	r3, [r5, #12]
   166a0:	add	r2, r8, r4
   166a4:	add	r3, r3, r6, lsl #2
   166a8:	str	r4, [r3], #4
   166ac:	add	r4, r4, #1
   166b0:	cmp	r2, r4
   166b4:	bne	166a8 <__assert_fail@plt+0x5150>
   166b8:	b	16368 <__assert_fail@plt+0x4e10>
   166bc:	mov	r6, r1
   166c0:	b	16298 <__assert_fail@plt+0x4d40>
   166c4:	cmn	r0, #1
   166c8:	beq	1660c <__assert_fail@plt+0x50b4>
   166cc:	ldr	r0, [r5, #36]	; 0x24
   166d0:	add	r7, r6, fp
   166d4:	cmp	r7, r0
   166d8:	bhi	163a8 <__assert_fail@plt+0x4e50>
   166dc:	ldr	r3, [r5, #12]
   166e0:	cmp	r3, #0
   166e4:	beq	167c0 <__assert_fail@plt+0x5268>
   166e8:	ldrb	r3, [r5, #76]	; 0x4c
   166ec:	cmp	r3, #0
   166f0:	bne	1671c <__assert_fail@plt+0x51c4>
   166f4:	cmp	r6, #0
   166f8:	ldrne	r2, [r5, #12]
   166fc:	subne	r2, r2, #4
   16700:	beq	16714 <__assert_fail@plt+0x51bc>
   16704:	str	r3, [r2, #4]!
   16708:	add	r3, r3, #1
   1670c:	cmp	r6, r3
   16710:	bne	16704 <__assert_fail@plt+0x51ac>
   16714:	mov	r3, #1
   16718:	strb	r3, [r5, #76]	; 0x4c
   1671c:	ldr	r0, [r5, #4]
   16720:	add	r1, sp, #32
   16724:	mov	r2, fp
   16728:	add	r0, r0, r6
   1672c:	bl	11264 <memcpy@plt>
   16730:	ldr	r3, [r5, #8]
   16734:	ldr	r1, [r5, #12]
   16738:	lsl	r2, r6, #2
   1673c:	cmp	fp, #1
   16740:	str	r9, [r3, r6, lsl #2]
   16744:	add	r3, r3, r2
   16748:	str	r4, [r1, r6, lsl #2]
   1674c:	add	r2, r1, r2
   16750:	bls	16780 <__assert_fail@plt+0x5228>
   16754:	mov	r1, #1
   16758:	mvn	ip, #0
   1675c:	cmp	r1, r8
   16760:	ldr	r0, [sp, #4]
   16764:	movcc	r0, r1
   16768:	add	r1, r1, #1
   1676c:	add	r0, r0, r4
   16770:	cmp	r1, fp
   16774:	str	r0, [r2, #4]!
   16778:	str	ip, [r3, #4]!
   1677c:	bne	1675c <__assert_fail@plt+0x5204>
   16780:	ldr	r2, [r5, #52]	; 0x34
   16784:	ldr	r3, [r5, #48]	; 0x30
   16788:	cmp	r4, r2
   1678c:	sub	fp, fp, r8
   16790:	ldrlt	r2, [r5, #56]	; 0x38
   16794:	add	r3, fp, r3
   16798:	addlt	fp, r2, fp
   1679c:	ldr	r2, [r5, #36]	; 0x24
   167a0:	strlt	fp, [r5, #56]	; 0x38
   167a4:	cmp	r3, r2
   167a8:	mov	r6, r7
   167ac:	str	r3, [r5, #48]	; 0x30
   167b0:	add	r4, r8, r4
   167b4:	movlt	r7, r3
   167b8:	movge	r7, r2
   167bc:	b	16298 <__assert_fail@plt+0x4d40>
   167c0:	lsl	r0, r0, #2
   167c4:	bl	24794 <__assert_fail@plt+0x1323c>
   167c8:	cmp	r0, #0
   167cc:	str	r0, [r5, #12]
   167d0:	moveq	r0, #12
   167d4:	bne	166e8 <__assert_fail@plt+0x5190>
   167d8:	b	163c0 <__assert_fail@plt+0x4e68>
   167dc:	push	{r4, r5, r6, lr}
   167e0:	mov	r5, r0
   167e4:	ldr	r6, [r0, #36]	; 0x24
   167e8:	ldr	r3, [r0, #48]	; 0x30
   167ec:	ldr	r4, [r0, #28]
   167f0:	cmp	r6, r3
   167f4:	movge	r6, r3
   167f8:	cmp	r6, r4
   167fc:	ble	16840 <__assert_fail@plt+0x52e8>
   16800:	bl	113d8 <__ctype_toupper_loc@plt>
   16804:	ldr	r3, [r5]
   16808:	ldr	r2, [r5, #24]
   1680c:	add	r3, r3, r4
   16810:	ldr	r1, [r5, #64]	; 0x40
   16814:	ldrb	r2, [r3, r2]
   16818:	cmp	r1, #0
   1681c:	ldr	r3, [r5, #4]
   16820:	ldrbne	r2, [r1, r2]
   16824:	ldr	r1, [r0]
   16828:	add	r3, r3, r4
   1682c:	add	r4, r4, #1
   16830:	ldr	r2, [r1, r2, lsl #2]
   16834:	cmp	r6, r4
   16838:	strb	r2, [r3]
   1683c:	bne	16804 <__assert_fail@plt+0x52ac>
   16840:	str	r4, [r5, #28]
   16844:	str	r4, [r5, #32]
   16848:	pop	{r4, r5, r6, pc}
   1684c:	ldr	r3, [r0, #36]	; 0x24
   16850:	push	{r4, r5, r6, lr}
   16854:	cmn	r3, #-536870910	; 0xe0000002
   16858:	bhi	16940 <__assert_fail@plt+0x53e8>
   1685c:	ldr	r2, [r0, #48]	; 0x30
   16860:	lsl	r3, r3, #1
   16864:	cmp	r3, r2
   16868:	movge	r3, r2
   1686c:	cmp	r3, r1
   16870:	movge	r1, r3
   16874:	mov	r4, r0
   16878:	bl	15ec4 <__assert_fail@plt+0x496c>
   1687c:	subs	r5, r0, #0
   16880:	bne	16938 <__assert_fail@plt+0x53e0>
   16884:	ldr	r0, [r4, #100]	; 0x64
   16888:	cmp	r0, #0
   1688c:	beq	168ac <__assert_fail@plt+0x5354>
   16890:	ldr	r1, [r4, #36]	; 0x24
   16894:	add	r1, r1, #1
   16898:	lsl	r1, r1, #2
   1689c:	bl	247c0 <__assert_fail@plt+0x13268>
   168a0:	cmp	r0, #0
   168a4:	beq	16940 <__assert_fail@plt+0x53e8>
   168a8:	str	r0, [r4, #100]	; 0x64
   168ac:	ldrb	r3, [r4, #72]	; 0x48
   168b0:	cmp	r3, #0
   168b4:	ldr	r3, [r4, #80]	; 0x50
   168b8:	beq	168d0 <__assert_fail@plt+0x5378>
   168bc:	cmp	r3, #1
   168c0:	mov	r0, r4
   168c4:	ble	1695c <__assert_fail@plt+0x5404>
   168c8:	pop	{r4, r5, r6, lr}
   168cc:	b	1625c <__assert_fail@plt+0x4d04>
   168d0:	cmp	r3, #1
   168d4:	bgt	1694c <__assert_fail@plt+0x53f4>
   168d8:	ldr	r1, [r4, #64]	; 0x40
   168dc:	cmp	r1, #0
   168e0:	beq	16938 <__assert_fail@plt+0x53e0>
   168e4:	ldr	lr, [r4, #36]	; 0x24
   168e8:	ldr	r2, [r4, #48]	; 0x30
   168ec:	ldr	r3, [r4, #28]
   168f0:	cmp	lr, r2
   168f4:	movge	lr, r2
   168f8:	cmp	lr, r3
   168fc:	bgt	16908 <__assert_fail@plt+0x53b0>
   16900:	b	16930 <__assert_fail@plt+0x53d8>
   16904:	ldr	r1, [r4, #64]	; 0x40
   16908:	ldr	r2, [r4]
   1690c:	ldr	ip, [r4, #24]
   16910:	add	r2, r2, r3
   16914:	ldr	r0, [r4, #4]
   16918:	ldrb	r2, [r2, ip]
   1691c:	ldrb	r2, [r1, r2]
   16920:	strb	r2, [r0, r3]
   16924:	add	r3, r3, #1
   16928:	cmp	lr, r3
   1692c:	bne	16904 <__assert_fail@plt+0x53ac>
   16930:	str	r3, [r4, #28]
   16934:	str	r3, [r4, #32]
   16938:	mov	r0, r5
   1693c:	pop	{r4, r5, r6, pc}
   16940:	mov	r5, #12
   16944:	mov	r0, r5
   16948:	pop	{r4, r5, r6, pc}
   1694c:	mov	r0, r4
   16950:	bl	160c4 <__assert_fail@plt+0x4b6c>
   16954:	mov	r0, r5
   16958:	pop	{r4, r5, r6, pc}
   1695c:	bl	167dc <__assert_fail@plt+0x5284>
   16960:	b	16938 <__assert_fail@plt+0x53e0>
   16964:	push	{r4, lr}
   16968:	mov	r4, r0
   1696c:	ldr	r0, [r0]
   16970:	bl	13908 <__assert_fail@plt+0x23b0>
   16974:	ldr	r0, [r4, #4]
   16978:	bl	13908 <__assert_fail@plt+0x23b0>
   1697c:	ldr	r0, [r4, #8]
   16980:	bl	13908 <__assert_fail@plt+0x23b0>
   16984:	ldr	r0, [r4, #12]
   16988:	bl	13908 <__assert_fail@plt+0x23b0>
   1698c:	mov	r0, r4
   16990:	pop	{r4, lr}
   16994:	b	13908 <__assert_fail@plt+0x23b0>
   16998:	ldr	r3, [pc, #36]	; 169c4 <__assert_fail@plt+0x546c>
   1699c:	ldr	r2, [r0, #4]
   169a0:	and	r3, r3, r2
   169a4:	cmp	r3, #6
   169a8:	beq	169bc <__assert_fail@plt+0x5464>
   169ac:	cmp	r3, #3
   169b0:	bxne	lr
   169b4:	ldr	r0, [r0]
   169b8:	b	13908 <__assert_fail@plt+0x23b0>
   169bc:	ldr	r0, [r0]
   169c0:	b	16964 <__assert_fail@plt+0x540c>
   169c4:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   169c8:	add	r0, r1, #20
   169cc:	push	{r4, lr}
   169d0:	bl	16998 <__assert_fail@plt+0x5440>
   169d4:	mov	r0, #0
   169d8:	pop	{r4, pc}
   169dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169e0:	sub	sp, sp, #12
   169e4:	ldmib	r0, {r5, ip}
   169e8:	stm	sp, {r1, r2}
   169ec:	mov	r4, r0
   169f0:	cmp	ip, r5
   169f4:	mov	r8, sp
   169f8:	ldrb	r6, [sp, #4]
   169fc:	bcs	16abc <__assert_fail@plt+0x5564>
   16a00:	ldr	r7, [r0, #12]
   16a04:	ldr	r5, [r0, #20]
   16a08:	ldm	r8, {r0, r1}
   16a0c:	ldr	r3, [r4]
   16a10:	cmp	r6, #5
   16a14:	add	r3, r3, ip, lsl #3
   16a18:	bic	r2, r1, #261120	; 0x3fc00
   16a1c:	bic	r2, r2, #768	; 0x300
   16a20:	stm	r3, {r0, r1}
   16a24:	str	r2, [r3, #4]
   16a28:	beq	16aa8 <__assert_fail@plt+0x5550>
   16a2c:	sub	r6, r6, #6
   16a30:	clz	r6, r6
   16a34:	lsr	r6, r6, #5
   16a38:	ldrb	r2, [r3, #6]
   16a3c:	mvn	r1, #0
   16a40:	bic	r2, r2, #16
   16a44:	orr	r2, r2, r6, lsl #4
   16a48:	strb	r2, [r3, #6]
   16a4c:	str	r1, [r7, ip, lsl #2]
   16a50:	ldr	r3, [r4, #8]
   16a54:	mov	r2, #0
   16a58:	add	r3, r3, r3, lsl #1
   16a5c:	lsl	r3, r3, #2
   16a60:	add	r1, r5, r3
   16a64:	str	r2, [r5, r3]
   16a68:	str	r2, [r1, #4]
   16a6c:	str	r2, [r1, #8]
   16a70:	ldr	r3, [r4, #8]
   16a74:	ldr	r0, [r4, #24]
   16a78:	add	r3, r3, r3, lsl #1
   16a7c:	lsl	r3, r3, #2
   16a80:	add	r1, r0, r3
   16a84:	str	r2, [r0, r3]
   16a88:	str	r2, [r1, #4]
   16a8c:	str	r2, [r1, #8]
   16a90:	ldr	r3, [r4, #8]
   16a94:	mov	r0, r3
   16a98:	add	r3, r3, #1
   16a9c:	str	r3, [r4, #8]
   16aa0:	add	sp, sp, #12
   16aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16aa8:	ldr	r6, [r4, #92]	; 0x5c
   16aac:	cmp	r6, #1
   16ab0:	movle	r6, #0
   16ab4:	movgt	r6, #1
   16ab8:	b	16a38 <__assert_fail@plt+0x54e0>
   16abc:	ldr	r3, [pc, #200]	; 16b8c <__assert_fail@plt+0x5634>
   16ac0:	lsl	r9, r5, #1
   16ac4:	cmp	r9, r3
   16ac8:	bhi	16b84 <__assert_fail@plt+0x562c>
   16acc:	lsl	r1, r5, #4
   16ad0:	ldr	r0, [r0]
   16ad4:	bl	247c0 <__assert_fail@plt+0x13268>
   16ad8:	cmp	r0, #0
   16adc:	beq	16b84 <__assert_fail@plt+0x562c>
   16ae0:	lsl	sl, r5, #3
   16ae4:	mov	r1, sl
   16ae8:	str	r0, [r4]
   16aec:	ldr	r0, [r4, #12]
   16af0:	bl	247c0 <__assert_fail@plt+0x13268>
   16af4:	mov	r1, sl
   16af8:	add	r5, r9, r5, lsl #2
   16afc:	lsl	sl, r5, #2
   16b00:	mov	r7, r0
   16b04:	ldr	r0, [r4, #16]
   16b08:	bl	247c0 <__assert_fail@plt+0x13268>
   16b0c:	mov	r1, sl
   16b10:	mov	fp, r0
   16b14:	ldr	r0, [r4, #20]
   16b18:	bl	247c0 <__assert_fail@plt+0x13268>
   16b1c:	mov	r1, sl
   16b20:	mov	r5, r0
   16b24:	ldr	r0, [r4, #24]
   16b28:	bl	247c0 <__assert_fail@plt+0x13268>
   16b2c:	cmp	fp, #0
   16b30:	cmpne	r7, #0
   16b34:	mov	sl, r0
   16b38:	beq	16b64 <__assert_fail@plt+0x560c>
   16b3c:	cmp	r0, #0
   16b40:	cmpne	r5, #0
   16b44:	beq	16b64 <__assert_fail@plt+0x560c>
   16b48:	ldr	ip, [r4, #8]
   16b4c:	str	r7, [r4, #12]
   16b50:	str	fp, [r4, #16]
   16b54:	str	r5, [r4, #20]
   16b58:	str	r0, [r4, #24]
   16b5c:	str	r9, [r4, #4]
   16b60:	b	16a08 <__assert_fail@plt+0x54b0>
   16b64:	mov	r0, r7
   16b68:	bl	13908 <__assert_fail@plt+0x23b0>
   16b6c:	mov	r0, fp
   16b70:	bl	13908 <__assert_fail@plt+0x23b0>
   16b74:	mov	r0, r5
   16b78:	bl	13908 <__assert_fail@plt+0x23b0>
   16b7c:	mov	r0, sl
   16b80:	bl	13908 <__assert_fail@plt+0x23b0>
   16b84:	mvn	r0, #0
   16b88:	b	16aa0 <__assert_fail@plt+0x5548>
   16b8c:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   16b90:	ldr	r3, [r0]
   16b94:	push	{r4, r5, r6, r7, r8, lr}
   16b98:	lsl	r7, r1, #3
   16b9c:	add	r3, r3, r7
   16ba0:	mov	r5, r1
   16ba4:	mov	r6, r2
   16ba8:	ldm	r3, {r1, r2}
   16bac:	mov	r4, r0
   16bb0:	bl	169dc <__assert_fail@plt+0x5484>
   16bb4:	cmn	r0, #1
   16bb8:	popeq	{r4, r5, r6, r7, r8, pc}
   16bbc:	ldr	lr, [r4]
   16bc0:	ldr	ip, [pc, #80]	; 16c18 <__assert_fail@plt+0x56c0>
   16bc4:	add	r1, lr, r0, lsl #3
   16bc8:	ldr	r8, [pc, #76]	; 16c1c <__assert_fail@plt+0x56c4>
   16bcc:	ldr	r3, [r1, #4]
   16bd0:	and	r2, r6, ip
   16bd4:	add	r7, lr, r7
   16bd8:	bic	r3, r3, r8
   16bdc:	orr	r3, r3, r2, lsl #8
   16be0:	str	r3, [r1, #4]
   16be4:	ldr	lr, [r7, #4]
   16be8:	bic	r3, r3, r8
   16bec:	and	ip, ip, lr, lsr #8
   16bf0:	orr	r2, r2, ip
   16bf4:	orr	r3, r3, r2, lsl #8
   16bf8:	str	r3, [r1, #4]
   16bfc:	lsr	r3, r3, #16
   16c00:	uxtb	r3, r3
   16c04:	orr	r3, r3, #4
   16c08:	strb	r3, [r1, #6]
   16c0c:	ldr	r3, [r4, #16]
   16c10:	str	r5, [r3, r0, lsl #2]
   16c14:	pop	{r4, r5, r6, r7, r8, pc}
   16c18:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16c1c:	andeq	pc, r3, r0, lsl #30
   16c20:	push	{r4, lr}
   16c24:	mov	r4, r0
   16c28:	ldr	r0, [r0, #24]
   16c2c:	bl	13908 <__assert_fail@plt+0x23b0>
   16c30:	ldr	r0, [r4, #36]	; 0x24
   16c34:	bl	13908 <__assert_fail@plt+0x23b0>
   16c38:	ldr	r3, [r4, #40]	; 0x28
   16c3c:	add	r2, r4, #4
   16c40:	cmp	r3, r2
   16c44:	beq	16c58 <__assert_fail@plt+0x5700>
   16c48:	ldr	r0, [r3, #8]
   16c4c:	bl	13908 <__assert_fail@plt+0x23b0>
   16c50:	ldr	r0, [r4, #40]	; 0x28
   16c54:	bl	13908 <__assert_fail@plt+0x23b0>
   16c58:	ldr	r0, [r4, #12]
   16c5c:	bl	13908 <__assert_fail@plt+0x23b0>
   16c60:	ldr	r0, [r4, #48]	; 0x30
   16c64:	bl	13908 <__assert_fail@plt+0x23b0>
   16c68:	ldr	r0, [r4, #44]	; 0x2c
   16c6c:	bl	13908 <__assert_fail@plt+0x23b0>
   16c70:	mov	r0, r4
   16c74:	pop	{r4, lr}
   16c78:	b	13908 <__assert_fail@plt+0x23b0>
   16c7c:	push	{r4, lr}
   16c80:	mov	r4, r0
   16c84:	ldr	r0, [r0, #8]
   16c88:	bl	13908 <__assert_fail@plt+0x23b0>
   16c8c:	ldr	r0, [r4, #12]
   16c90:	bl	13908 <__assert_fail@plt+0x23b0>
   16c94:	ldrb	r3, [r4, #75]	; 0x4b
   16c98:	cmp	r3, #0
   16c9c:	popeq	{r4, pc}
   16ca0:	ldr	r0, [r4, #4]
   16ca4:	pop	{r4, lr}
   16ca8:	b	13908 <__assert_fail@plt+0x23b0>
   16cac:	push	{r4, r5, r6, r7, r8, lr}
   16cb0:	mov	r6, r0
   16cb4:	ldr	r0, [r0]
   16cb8:	cmp	r0, #0
   16cbc:	beq	16cf0 <__assert_fail@plt+0x5798>
   16cc0:	ldr	r3, [r6, #8]
   16cc4:	cmp	r3, #0
   16cc8:	beq	16cf0 <__assert_fail@plt+0x5798>
   16ccc:	mov	r4, #0
   16cd0:	b	16cd8 <__assert_fail@plt+0x5780>
   16cd4:	ldr	r0, [r6]
   16cd8:	add	r0, r0, r4, lsl #3
   16cdc:	bl	16998 <__assert_fail@plt+0x5440>
   16ce0:	ldr	r3, [r6, #8]
   16ce4:	add	r4, r4, #1
   16ce8:	cmp	r3, r4
   16cec:	bhi	16cd4 <__assert_fail@plt+0x577c>
   16cf0:	ldr	r0, [r6, #12]
   16cf4:	bl	13908 <__assert_fail@plt+0x23b0>
   16cf8:	ldr	r3, [r6, #8]
   16cfc:	cmp	r3, #0
   16d00:	movne	r4, #0
   16d04:	movne	r5, r4
   16d08:	beq	16d68 <__assert_fail@plt+0x5810>
   16d0c:	ldr	r3, [r6, #24]
   16d10:	add	r5, r5, #1
   16d14:	cmp	r3, #0
   16d18:	add	r2, r3, r4
   16d1c:	beq	16d28 <__assert_fail@plt+0x57d0>
   16d20:	ldr	r0, [r2, #8]
   16d24:	bl	13908 <__assert_fail@plt+0x23b0>
   16d28:	ldr	r3, [r6, #28]
   16d2c:	cmp	r3, #0
   16d30:	add	r2, r3, r4
   16d34:	beq	16d40 <__assert_fail@plt+0x57e8>
   16d38:	ldr	r0, [r2, #8]
   16d3c:	bl	13908 <__assert_fail@plt+0x23b0>
   16d40:	ldr	r3, [r6, #20]
   16d44:	cmp	r3, #0
   16d48:	add	r2, r3, r4
   16d4c:	beq	16d58 <__assert_fail@plt+0x5800>
   16d50:	ldr	r0, [r2, #8]
   16d54:	bl	13908 <__assert_fail@plt+0x23b0>
   16d58:	ldr	r3, [r6, #8]
   16d5c:	add	r4, r4, #12
   16d60:	cmp	r3, r5
   16d64:	bhi	16d0c <__assert_fail@plt+0x57b4>
   16d68:	ldr	r0, [r6, #20]
   16d6c:	bl	13908 <__assert_fail@plt+0x23b0>
   16d70:	ldr	r0, [r6, #24]
   16d74:	bl	13908 <__assert_fail@plt+0x23b0>
   16d78:	ldr	r0, [r6, #28]
   16d7c:	bl	13908 <__assert_fail@plt+0x23b0>
   16d80:	ldr	r0, [r6]
   16d84:	bl	13908 <__assert_fail@plt+0x23b0>
   16d88:	ldr	r0, [r6, #32]
   16d8c:	cmp	r0, #0
   16d90:	beq	16df0 <__assert_fail@plt+0x5898>
   16d94:	mov	r7, #0
   16d98:	mov	r8, r7
   16d9c:	ldr	r3, [r0, r7]
   16da0:	add	r5, r0, r7
   16da4:	cmp	r3, #0
   16da8:	movgt	r4, #0
   16dac:	ble	16dcc <__assert_fail@plt+0x5874>
   16db0:	ldr	r3, [r5, #8]
   16db4:	ldr	r0, [r3, r4, lsl #2]
   16db8:	bl	16c20 <__assert_fail@plt+0x56c8>
   16dbc:	ldr	r3, [r5]
   16dc0:	add	r4, r4, #1
   16dc4:	cmp	r3, r4
   16dc8:	bgt	16db0 <__assert_fail@plt+0x5858>
   16dcc:	ldr	r0, [r5, #8]
   16dd0:	bl	13908 <__assert_fail@plt+0x23b0>
   16dd4:	ldr	r3, [r6, #68]	; 0x44
   16dd8:	add	r8, r8, #1
   16ddc:	cmp	r3, r8
   16de0:	add	r7, r7, #12
   16de4:	ldrcs	r0, [r6, #32]
   16de8:	bcs	16d9c <__assert_fail@plt+0x5844>
   16dec:	ldr	r0, [r6, #32]
   16df0:	bl	13908 <__assert_fail@plt+0x23b0>
   16df4:	ldr	r0, [r6, #60]	; 0x3c
   16df8:	ldr	r3, [pc, #28]	; 16e1c <__assert_fail@plt+0x58c4>
   16dfc:	cmp	r0, r3
   16e00:	beq	16e08 <__assert_fail@plt+0x58b0>
   16e04:	bl	13908 <__assert_fail@plt+0x23b0>
   16e08:	ldr	r0, [r6, #132]	; 0x84
   16e0c:	bl	13908 <__assert_fail@plt+0x23b0>
   16e10:	mov	r0, r6
   16e14:	pop	{r4, r5, r6, r7, r8, lr}
   16e18:	b	13908 <__assert_fail@plt+0x23b0>
   16e1c:	andeq	r6, r2, r4, lsl #3
   16e20:	ldr	r3, [r0, #124]	; 0x7c
   16e24:	push	{r4, r5, r6, r7, r8, lr}
   16e28:	cmp	r3, #0
   16e2c:	mov	r8, r0
   16e30:	movgt	r7, #0
   16e34:	ble	16eb4 <__assert_fail@plt+0x595c>
   16e38:	ldr	r3, [r8, #132]	; 0x84
   16e3c:	ldr	r6, [r3, r7, lsl #2]
   16e40:	ldr	r3, [r6, #16]
   16e44:	cmp	r3, #0
   16e48:	movgt	r4, #0
   16e4c:	ble	16e78 <__assert_fail@plt+0x5920>
   16e50:	ldr	r3, [r6, #20]
   16e54:	ldr	r5, [r3, r4, lsl #2]
   16e58:	add	r4, r4, #1
   16e5c:	ldr	r0, [r5, #16]
   16e60:	bl	13908 <__assert_fail@plt+0x23b0>
   16e64:	mov	r0, r5
   16e68:	bl	13908 <__assert_fail@plt+0x23b0>
   16e6c:	ldr	r3, [r6, #16]
   16e70:	cmp	r3, r4
   16e74:	bgt	16e50 <__assert_fail@plt+0x58f8>
   16e78:	ldr	r0, [r6, #20]
   16e7c:	bl	13908 <__assert_fail@plt+0x23b0>
   16e80:	ldr	r3, [r6, #8]
   16e84:	cmp	r3, #0
   16e88:	beq	16e9c <__assert_fail@plt+0x5944>
   16e8c:	ldr	r0, [r3, #8]
   16e90:	bl	13908 <__assert_fail@plt+0x23b0>
   16e94:	ldr	r0, [r6, #8]
   16e98:	bl	13908 <__assert_fail@plt+0x23b0>
   16e9c:	mov	r0, r6
   16ea0:	bl	13908 <__assert_fail@plt+0x23b0>
   16ea4:	ldr	r3, [r8, #124]	; 0x7c
   16ea8:	add	r7, r7, #1
   16eac:	cmp	r3, r7
   16eb0:	bgt	16e38 <__assert_fail@plt+0x58e0>
   16eb4:	mov	r3, #0
   16eb8:	str	r3, [r8, #124]	; 0x7c
   16ebc:	str	r3, [r8, #108]	; 0x6c
   16ec0:	pop	{r4, r5, r6, r7, r8, pc}
   16ec4:	push	{r4, r5, r6, lr}
   16ec8:	subs	r5, r0, #0
   16ecc:	beq	16f20 <__assert_fail@plt+0x59c8>
   16ed0:	ldr	r3, [r5]
   16ed4:	cmp	r3, #0
   16ed8:	movgt	r4, #0
   16edc:	movgt	r6, r4
   16ee0:	ble	16f18 <__assert_fail@plt+0x59c0>
   16ee4:	ldr	r3, [r5, #8]
   16ee8:	add	r6, r6, #1
   16eec:	add	r3, r3, r4
   16ef0:	ldr	r0, [r3, #20]
   16ef4:	bl	13908 <__assert_fail@plt+0x23b0>
   16ef8:	ldr	r3, [r5, #8]
   16efc:	add	r3, r3, r4
   16f00:	add	r4, r4, #24
   16f04:	ldr	r0, [r3, #8]
   16f08:	bl	13908 <__assert_fail@plt+0x23b0>
   16f0c:	ldr	r3, [r5]
   16f10:	cmp	r3, r6
   16f14:	bgt	16ee4 <__assert_fail@plt+0x598c>
   16f18:	ldr	r0, [r5, #8]
   16f1c:	bl	13908 <__assert_fail@plt+0x23b0>
   16f20:	mov	r0, #0
   16f24:	pop	{r4, r5, r6, pc}
   16f28:	ldr	r3, [r0]
   16f2c:	push	{r4, r5, r6, lr}
   16f30:	cmp	r3, #0
   16f34:	mov	r4, r0
   16f38:	mov	r6, r1
   16f3c:	beq	16f68 <__assert_fail@plt+0x5a10>
   16f40:	ldr	r1, [r0, #4]
   16f44:	cmp	r1, #0
   16f48:	bne	16f98 <__assert_fail@plt+0x5a40>
   16f4c:	ldr	r3, [r0, #8]
   16f50:	mov	r0, #1
   16f54:	str	r6, [r3]
   16f58:	ldr	r3, [r4, #4]
   16f5c:	add	r3, r3, r0
   16f60:	str	r3, [r4, #4]
   16f64:	pop	{r4, r5, r6, pc}
   16f68:	mov	r5, #1
   16f6c:	str	r5, [r0]
   16f70:	str	r5, [r0, #4]
   16f74:	mov	r0, #4
   16f78:	bl	24794 <__assert_fail@plt+0x1323c>
   16f7c:	cmp	r0, #0
   16f80:	str	r0, [r4, #8]
   16f84:	strne	r6, [r0]
   16f88:	streq	r0, [r4, #4]
   16f8c:	streq	r0, [r4]
   16f90:	movne	r0, r5
   16f94:	pop	{r4, r5, r6, pc}
   16f98:	cmp	r3, r1
   16f9c:	beq	1701c <__assert_fail@plt+0x5ac4>
   16fa0:	ldr	r0, [r0, #8]
   16fa4:	ldr	r3, [r0]
   16fa8:	cmp	r6, r3
   16fac:	bge	16fe8 <__assert_fail@plt+0x5a90>
   16fb0:	cmp	r1, #0
   16fb4:	ble	16fd0 <__assert_fail@plt+0x5a78>
   16fb8:	add	r1, r0, r1, lsl #2
   16fbc:	ldr	r3, [r1, #-4]
   16fc0:	str	r3, [r1], #-4
   16fc4:	cmp	r0, r1
   16fc8:	bne	16fbc <__assert_fail@plt+0x5a64>
   16fcc:	mov	r1, #0
   16fd0:	str	r6, [r0, r1, lsl #2]
   16fd4:	ldr	r3, [r4, #4]
   16fd8:	mov	r0, #1
   16fdc:	add	r3, r3, r0
   16fe0:	str	r3, [r4, #4]
   16fe4:	pop	{r4, r5, r6, pc}
   16fe8:	sub	r3, r1, #-1073741823	; 0xc0000001
   16fec:	ldr	r2, [r0, r3, lsl #2]
   16ff0:	lsl	r3, r3, #2
   16ff4:	cmp	r6, r2
   16ff8:	bge	16fd0 <__assert_fail@plt+0x5a78>
   16ffc:	add	r3, r3, #4
   17000:	add	r3, r0, r3
   17004:	str	r2, [r3], #-4
   17008:	ldr	r2, [r3, #-4]
   1700c:	sub	r1, r1, #1
   17010:	cmp	r6, r2
   17014:	blt	17004 <__assert_fail@plt+0x5aac>
   17018:	b	16fd0 <__assert_fail@plt+0x5a78>
   1701c:	lsl	r3, r1, #1
   17020:	str	r3, [r0]
   17024:	lsl	r1, r1, #3
   17028:	ldr	r0, [r0, #8]
   1702c:	bl	247c0 <__assert_fail@plt+0x13268>
   17030:	cmp	r0, #0
   17034:	popeq	{r4, r5, r6, pc}
   17038:	ldr	r1, [r4, #4]
   1703c:	str	r0, [r4, #8]
   17040:	b	16fa4 <__assert_fail@plt+0x5a4c>
   17044:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17048:	sub	sp, sp, #20
   1704c:	ldr	r8, [pc, #680]	; 172fc <__assert_fail@plt+0x5da4>
   17050:	ldr	r7, [sp, #56]	; 0x38
   17054:	mov	r6, r0
   17058:	mov	fp, r1
   1705c:	mov	r9, r2
   17060:	str	r3, [sp, #12]
   17064:	ldr	sl, [r6]
   17068:	add	r3, sl, fp, lsl #3
   1706c:	ldrb	r2, [r3, #4]
   17070:	cmp	r2, #4
   17074:	beq	17264 <__assert_fail@plt+0x5d0c>
   17078:	add	r4, fp, fp, lsl #1
   1707c:	ldr	r0, [r6, #20]
   17080:	lsl	r4, r4, #2
   17084:	add	ip, r0, r4
   17088:	ldr	r2, [ip, #4]
   1708c:	cmp	r2, #0
   17090:	beq	172d0 <__assert_fail@plt+0x5d78>
   17094:	cmp	r2, #1
   17098:	beq	171e4 <__assert_fail@plt+0x5c8c>
   1709c:	ldr	r2, [r6, #8]
   170a0:	add	r9, r9, r9, lsl #1
   170a4:	sub	r1, r2, #1
   170a8:	cmp	r1, #0
   170ac:	add	r3, sl, r1, lsl #3
   170b0:	lsl	r5, r9, #2
   170b4:	ldrb	lr, [r3, #6]
   170b8:	ldr	r9, [ip, #8]
   170bc:	add	r0, r0, r5
   170c0:	movle	ip, #0
   170c4:	movgt	ip, #1
   170c8:	ands	ip, ip, lr, lsr #2
   170cc:	mov	ip, #0
   170d0:	ldr	r9, [r9]
   170d4:	str	ip, [r0, #4]
   170d8:	beq	1718c <__assert_fail@plt+0x5c34>
   170dc:	ldr	ip, [r6, #16]
   170e0:	rsb	fp, r3, r2, lsl #3
   170e4:	sub	fp, fp, #16
   170e8:	add	r2, ip, r2, lsl #2
   170ec:	b	17110 <__assert_fail@plt+0x5bb8>
   170f0:	add	r3, sl, lr
   170f4:	sub	r1, r1, #1
   170f8:	ldrb	lr, [r3, #6]
   170fc:	cmp	r1, #0
   17100:	movle	ip, #0
   17104:	movgt	ip, #1
   17108:	ands	ip, ip, lr, lsr #2
   1710c:	beq	1718c <__assert_fail@plt+0x5c34>
   17110:	ldr	ip, [r2, #-4]!
   17114:	add	lr, r3, fp
   17118:	cmp	r9, ip
   1711c:	bne	170f0 <__assert_fail@plt+0x5b98>
   17120:	ldr	r3, [r3, #4]
   17124:	and	r3, r8, r3, lsr #8
   17128:	cmp	r7, r3
   1712c:	bne	170f0 <__assert_fail@plt+0x5b98>
   17130:	bl	16f28 <__assert_fail@plt+0x59d0>
   17134:	cmp	r0, #0
   17138:	beq	17180 <__assert_fail@plt+0x5c28>
   1713c:	ldr	r3, [r6, #20]
   17140:	mov	r2, r7
   17144:	add	r4, r3, r4
   17148:	mov	r0, r6
   1714c:	ldr	r3, [r4, #8]
   17150:	ldr	fp, [r3, #4]
   17154:	mov	r1, fp
   17158:	bl	16b90 <__assert_fail@plt+0x5638>
   1715c:	cmn	r0, #1
   17160:	mov	r9, r0
   17164:	beq	17180 <__assert_fail@plt+0x5c28>
   17168:	ldr	r0, [r6, #20]
   1716c:	mov	r1, r9
   17170:	add	r0, r0, r5
   17174:	bl	16f28 <__assert_fail@plt+0x59d0>
   17178:	cmp	r0, #0
   1717c:	bne	17064 <__assert_fail@plt+0x5b0c>
   17180:	mov	r0, #12
   17184:	add	sp, sp, #20
   17188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1718c:	mov	r2, r7
   17190:	mov	r1, r9
   17194:	mov	r0, r6
   17198:	bl	16b90 <__assert_fail@plt+0x5638>
   1719c:	cmn	r0, #1
   171a0:	mov	sl, r0
   171a4:	beq	17180 <__assert_fail@plt+0x5c28>
   171a8:	ldr	r0, [r6, #20]
   171ac:	mov	r1, sl
   171b0:	add	r0, r0, r5
   171b4:	bl	16f28 <__assert_fail@plt+0x59d0>
   171b8:	cmp	r0, #0
   171bc:	beq	17180 <__assert_fail@plt+0x5c28>
   171c0:	str	r7, [sp]
   171c4:	mov	r2, sl
   171c8:	mov	r1, r9
   171cc:	ldr	r3, [sp, #12]
   171d0:	mov	r0, r6
   171d4:	bl	17044 <__assert_fail@plt+0x5aec>
   171d8:	cmp	r0, #0
   171dc:	beq	1713c <__assert_fail@plt+0x5be4>
   171e0:	b	17184 <__assert_fail@plt+0x5c2c>
   171e4:	add	r4, r9, r9, lsl #1
   171e8:	ldr	r2, [ip, #8]
   171ec:	ldr	r1, [sp, #12]
   171f0:	cmp	fp, r9
   171f4:	lsl	r4, r4, #2
   171f8:	sub	r1, fp, r1
   171fc:	add	r0, r0, r4
   17200:	clz	r1, r1
   17204:	lsr	r1, r1, #5
   17208:	moveq	r1, #0
   1720c:	ldr	fp, [r2]
   17210:	cmp	r1, #0
   17214:	mov	r2, #0
   17218:	str	r2, [r0, #4]
   1721c:	bne	172e4 <__assert_fail@plt+0x5d8c>
   17220:	ldr	r3, [r3, #4]
   17224:	mov	r1, fp
   17228:	mov	r0, r6
   1722c:	and	r3, r8, r3, lsr #8
   17230:	orr	r7, r7, r3
   17234:	mov	r2, r7
   17238:	bl	16b90 <__assert_fail@plt+0x5638>
   1723c:	cmn	r0, #1
   17240:	mov	r9, r0
   17244:	beq	17180 <__assert_fail@plt+0x5c28>
   17248:	ldr	r0, [r6, #20]
   1724c:	mov	r1, r9
   17250:	add	r0, r0, r4
   17254:	bl	16f28 <__assert_fail@plt+0x59d0>
   17258:	cmp	r0, #0
   1725c:	bne	17064 <__assert_fail@plt+0x5b0c>
   17260:	b	17180 <__assert_fail@plt+0x5c28>
   17264:	ldr	r2, [r6, #12]
   17268:	add	r4, r9, r9, lsl #1
   1726c:	ldr	r3, [r6, #20]
   17270:	lsl	r4, r4, #2
   17274:	add	r3, r3, r4
   17278:	lsl	sl, fp, #2
   1727c:	ldr	fp, [r2, fp, lsl #2]
   17280:	mov	r1, #0
   17284:	str	r1, [r3, #4]
   17288:	mov	r2, r7
   1728c:	mov	r1, fp
   17290:	mov	r0, r6
   17294:	bl	16b90 <__assert_fail@plt+0x5638>
   17298:	mov	r5, r9
   1729c:	cmn	r0, #1
   172a0:	mov	r9, r0
   172a4:	beq	17180 <__assert_fail@plt+0x5c28>
   172a8:	ldr	r3, [r6, #12]
   172ac:	ldr	r0, [r6, #20]
   172b0:	mov	r1, r9
   172b4:	ldr	r2, [r3, sl]
   172b8:	add	r0, r0, r4
   172bc:	str	r2, [r3, r5, lsl #2]
   172c0:	bl	16f28 <__assert_fail@plt+0x59d0>
   172c4:	cmp	r0, #0
   172c8:	bne	17064 <__assert_fail@plt+0x5b0c>
   172cc:	b	17180 <__assert_fail@plt+0x5c28>
   172d0:	ldr	r3, [r6, #12]
   172d4:	mov	r0, r2
   172d8:	ldr	r2, [r3, fp, lsl #2]
   172dc:	str	r2, [r3, r9, lsl #2]
   172e0:	b	17184 <__assert_fail@plt+0x5c2c>
   172e4:	mov	r1, fp
   172e8:	bl	16f28 <__assert_fail@plt+0x59d0>
   172ec:	cmp	r0, #0
   172f0:	movne	r0, #0
   172f4:	bne	17184 <__assert_fail@plt+0x5c2c>
   172f8:	b	17180 <__assert_fail@plt+0x5c28>
   172fc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   17300:	ldr	r3, [r0, #36]	; 0x24
   17304:	push	{r4, r5, r6, lr}
   17308:	cmp	r3, r1
   1730c:	mov	r4, r0
   17310:	mov	r5, r1
   17314:	ldr	r6, [r0, #104]	; 0x68
   17318:	bgt	1736c <__assert_fail@plt+0x5e14>
   1731c:	ldr	r2, [r0, #48]	; 0x30
   17320:	cmp	r3, r2
   17324:	bge	1736c <__assert_fail@plt+0x5e14>
   17328:	add	r1, r5, #1
   1732c:	mov	r0, r4
   17330:	bl	1684c <__assert_fail@plt+0x52f4>
   17334:	cmp	r0, #0
   17338:	bne	17390 <__assert_fail@plt+0x5e38>
   1733c:	cmp	r6, r5
   17340:	bge	17388 <__assert_fail@plt+0x5e30>
   17344:	sub	r2, r5, r6
   17348:	ldr	r0, [r4, #100]	; 0x64
   1734c:	add	r6, r6, #1
   17350:	lsl	r2, r2, #2
   17354:	add	r0, r0, r6, lsl #2
   17358:	mov	r1, #0
   1735c:	bl	1145c <memset@plt>
   17360:	mov	r0, #0
   17364:	str	r5, [r4, #104]	; 0x68
   17368:	pop	{r4, r5, r6, pc}
   1736c:	ldr	r3, [r4, #28]
   17370:	cmp	r5, r3
   17374:	blt	1733c <__assert_fail@plt+0x5de4>
   17378:	ldr	r2, [r4, #48]	; 0x30
   1737c:	cmp	r3, r2
   17380:	bge	1733c <__assert_fail@plt+0x5de4>
   17384:	b	17328 <__assert_fail@plt+0x5dd0>
   17388:	mov	r0, #0
   1738c:	pop	{r4, r5, r6, pc}
   17390:	pop	{r4, r5, r6, pc}
   17394:	push	{r4, r5, r6, r7, r8, lr}
   17398:	subs	r4, r0, #0
   1739c:	ldr	r7, [sp, #28]
   173a0:	beq	1743c <__assert_fail@plt+0x5ee4>
   173a4:	ldr	ip, [r4]
   173a8:	cmp	ip, #0
   173ac:	beq	1743c <__assert_fail@plt+0x5ee4>
   173b0:	sub	ip, ip, #1
   173b4:	ldr	lr, [r4, #8]
   173b8:	add	r5, ip, ip, lsl #1
   173bc:	lsl	r6, r2, #3
   173c0:	lsl	r5, r5, #3
   173c4:	add	r2, lr, r5
   173c8:	mov	r0, r3
   173cc:	mov	r8, r1
   173d0:	ldr	r3, [lr, r5]
   173d4:	ldr	r1, [r2, #8]
   173d8:	str	ip, [r4]
   173dc:	mov	r2, r6
   173e0:	str	r3, [r8]
   173e4:	bl	11264 <memcpy@plt>
   173e8:	ldr	r3, [r4, #8]
   173ec:	mov	r2, r6
   173f0:	add	r3, r3, r5
   173f4:	ldr	r0, [sp, #24]
   173f8:	ldr	r1, [r3, #8]
   173fc:	add	r1, r1, r6
   17400:	bl	11264 <memcpy@plt>
   17404:	ldr	r0, [r7, #8]
   17408:	bl	13908 <__assert_fail@plt+0x23b0>
   1740c:	ldr	r3, [r4, #8]
   17410:	add	r3, r3, r5
   17414:	ldr	r0, [r3, #8]
   17418:	bl	13908 <__assert_fail@plt+0x23b0>
   1741c:	ldr	r3, [r4, #8]
   17420:	add	r5, r3, r5
   17424:	add	r3, r5, #12
   17428:	ldr	ip, [r5, #4]
   1742c:	ldm	r3, {r0, r1, r2}
   17430:	stm	r7, {r0, r1, r2}
   17434:	mov	r0, ip
   17438:	pop	{r4, r5, r6, r7, r8, pc}
   1743c:	mvn	ip, #0
   17440:	b	17434 <__assert_fail@plt+0x5edc>
   17444:	ldr	r2, [r0, #4]
   17448:	ldr	r3, [r1, #4]
   1744c:	cmp	r2, r3
   17450:	beq	1745c <__assert_fail@plt+0x5f04>
   17454:	mov	r0, #0
   17458:	bx	lr
   1745c:	sub	r2, r2, #1
   17460:	cmp	r2, #0
   17464:	lsl	r3, r2, #2
   17468:	sub	r2, r2, #1
   1746c:	blt	174b0 <__assert_fail@plt+0x5f58>
   17470:	push	{lr}		; (str lr, [sp, #-4]!)
   17474:	b	17484 <__assert_fail@plt+0x5f2c>
   17478:	cmp	r2, #0
   1747c:	sub	r2, r2, #1
   17480:	blt	174a8 <__assert_fail@plt+0x5f50>
   17484:	ldr	lr, [r0, #8]
   17488:	ldr	ip, [r1, #8]
   1748c:	ldr	lr, [lr, r3]
   17490:	ldr	ip, [ip, r3]
   17494:	sub	r3, r3, #4
   17498:	cmp	lr, ip
   1749c:	beq	17478 <__assert_fail@plt+0x5f20>
   174a0:	mov	r0, #0
   174a4:	pop	{pc}		; (ldr pc, [sp], #4)
   174a8:	mov	r0, #1
   174ac:	pop	{pc}		; (ldr pc, [sp], #4)
   174b0:	mov	r0, #1
   174b4:	bx	lr
   174b8:	cmp	r0, #0
   174bc:	ble	17540 <__assert_fail@plt+0x5fe8>
   174c0:	push	{lr}		; (str lr, [sp, #-4]!)
   174c4:	sub	ip, r0, #1
   174c8:	ldr	lr, [r1]
   174cc:	mov	r0, #0
   174d0:	cmp	r0, ip
   174d4:	bcs	17510 <__assert_fail@plt+0x5fb8>
   174d8:	add	r1, r0, ip
   174dc:	lsr	r1, r1, #1
   174e0:	ldr	r3, [lr, r1, lsl #2]
   174e4:	cmp	r2, r3
   174e8:	ble	17500 <__assert_fail@plt+0x5fa8>
   174ec:	b	17524 <__assert_fail@plt+0x5fcc>
   174f0:	ldr	ip, [lr, r3, lsl #2]
   174f4:	cmp	ip, r2
   174f8:	blt	1752c <__assert_fail@plt+0x5fd4>
   174fc:	mov	r1, r3
   17500:	add	r3, r0, r1
   17504:	cmp	r0, r1
   17508:	lsr	r3, r3, #1
   1750c:	bcc	174f0 <__assert_fail@plt+0x5f98>
   17510:	ldr	r3, [lr, r0, lsl #2]
   17514:	cmp	r2, r3
   17518:	beq	17538 <__assert_fail@plt+0x5fe0>
   1751c:	mov	r0, #0
   17520:	pop	{pc}		; (ldr pc, [sp], #4)
   17524:	mov	r3, r1
   17528:	mov	r1, ip
   1752c:	add	r0, r3, #1
   17530:	mov	ip, r1
   17534:	b	174d0 <__assert_fail@plt+0x5f78>
   17538:	add	r0, r0, #1
   1753c:	pop	{pc}		; (ldr pc, [sp], #4)
   17540:	mov	r0, #0
   17544:	bx	lr
   17548:	push	{r4, r5, r6, r7, r8, r9, lr}
   1754c:	sub	sp, sp, #12
   17550:	mov	r5, r1
   17554:	mov	r6, r0
   17558:	mov	r4, r2
   1755c:	mov	r9, r3
   17560:	add	r8, r1, #8
   17564:	ldr	r7, [sp, #40]	; 0x28
   17568:	b	17574 <__assert_fail@plt+0x601c>
   1756c:	ldr	r3, [r3, #8]
   17570:	ldr	r4, [r3]
   17574:	mov	r1, r8
   17578:	mov	r2, r4
   1757c:	ldr	r0, [r5, #4]
   17580:	bl	174b8 <__assert_fail@plt+0x5f60>
   17584:	mov	r1, r4
   17588:	cmp	r0, #0
   1758c:	mov	r0, r5
   17590:	bne	1763c <__assert_fail@plt+0x60e4>
   17594:	ldr	r3, [r6]
   17598:	add	r2, r3, r4, lsl #3
   1759c:	ldrb	r2, [r2, #4]
   175a0:	cmp	r2, r7
   175a4:	bne	175b4 <__assert_fail@plt+0x605c>
   175a8:	ldr	r3, [r3, r4, lsl #3]
   175ac:	cmp	r9, r3
   175b0:	beq	17614 <__assert_fail@plt+0x60bc>
   175b4:	bl	16f28 <__assert_fail@plt+0x59d0>
   175b8:	add	r4, r4, r4, lsl #1
   175bc:	lsl	r4, r4, #2
   175c0:	cmp	r0, #0
   175c4:	beq	17630 <__assert_fail@plt+0x60d8>
   175c8:	ldr	r3, [r6, #20]
   175cc:	add	r3, r3, r4
   175d0:	ldr	r2, [r3, #4]
   175d4:	cmp	r2, #0
   175d8:	beq	1763c <__assert_fail@plt+0x60e4>
   175dc:	cmp	r2, #2
   175e0:	bne	1756c <__assert_fail@plt+0x6014>
   175e4:	ldr	r2, [r3, #8]
   175e8:	mov	r1, r5
   175ec:	mov	r3, r9
   175f0:	ldr	r2, [r2, #4]
   175f4:	mov	r0, r6
   175f8:	str	r7, [sp]
   175fc:	bl	17548 <__assert_fail@plt+0x5ff0>
   17600:	cmp	r0, #0
   17604:	bne	17634 <__assert_fail@plt+0x60dc>
   17608:	ldr	r3, [r6, #20]
   1760c:	add	r3, r3, r4
   17610:	b	1756c <__assert_fail@plt+0x6014>
   17614:	cmp	r7, #9
   17618:	bne	1763c <__assert_fail@plt+0x60e4>
   1761c:	mov	r1, r4
   17620:	mov	r0, r5
   17624:	bl	16f28 <__assert_fail@plt+0x59d0>
   17628:	cmp	r0, #0
   1762c:	bne	1763c <__assert_fail@plt+0x60e4>
   17630:	mov	r0, #12
   17634:	add	sp, sp, #12
   17638:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1763c:	mov	r0, #0
   17640:	add	sp, sp, #12
   17644:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17648:	ldr	r3, [r0]
   1764c:	cmp	r2, r3
   17650:	bxge	lr
   17654:	ldr	r3, [r1]
   17658:	add	r3, r3, r2, lsl #2
   1765c:	ldr	r1, [r3, #4]
   17660:	add	r2, r2, #1
   17664:	str	r1, [r3], #4
   17668:	ldr	r1, [r0]
   1766c:	cmp	r2, r1
   17670:	blt	1765c <__assert_fail@plt+0x6104>
   17674:	bx	lr
   17678:	ldrb	r3, [r1, #24]
   1767c:	cmp	r3, #4
   17680:	beq	176ec <__assert_fail@plt+0x6194>
   17684:	cmp	r3, #17
   17688:	beq	17694 <__assert_fail@plt+0x613c>
   1768c:	mov	r0, #0
   17690:	bx	lr
   17694:	ldr	r3, [r1, #4]
   17698:	cmp	r3, #0
   1769c:	beq	1768c <__assert_fail@plt+0x6134>
   176a0:	ldrb	r2, [r3, #24]
   176a4:	cmp	r2, #17
   176a8:	bne	1768c <__assert_fail@plt+0x6134>
   176ac:	ldr	r2, [r3, #4]
   176b0:	ldr	r3, [r3, #20]
   176b4:	cmp	r2, #0
   176b8:	str	r2, [r1, #4]
   176bc:	strne	r1, [r2]
   176c0:	ldr	r2, [r0, #132]	; 0x84
   176c4:	ldr	r1, [r1, #20]
   176c8:	cmp	r3, #31
   176cc:	ldr	r1, [r2, r1, lsl #2]
   176d0:	str	r1, [r2, r3, lsl #2]
   176d4:	ldrle	r2, [r0, #80]	; 0x50
   176d8:	movle	r1, #1
   176dc:	bicle	r3, r2, r1, lsl r3
   176e0:	strle	r3, [r0, #80]	; 0x50
   176e4:	mov	r0, #0
   176e8:	bx	lr
   176ec:	ldr	r2, [r0, #132]	; 0x84
   176f0:	cmp	r2, #0
   176f4:	beq	1768c <__assert_fail@plt+0x6134>
   176f8:	ldr	r3, [r1, #20]
   176fc:	mov	ip, #1
   17700:	ldr	r2, [r2, r3, lsl #2]
   17704:	str	r2, [r1, #20]
   17708:	ldr	r3, [r0, #80]	; 0x50
   1770c:	orr	r3, r3, ip, lsl r2
   17710:	str	r3, [r0, #80]	; 0x50
   17714:	mov	r0, #0
   17718:	bx	lr
   1771c:	ldrb	r3, [r1, #24]
   17720:	cmp	r3, #11
   17724:	beq	17774 <__assert_fail@plt+0x621c>
   17728:	cmp	r3, #16
   1772c:	beq	17758 <__assert_fail@plt+0x6200>
   17730:	ldr	r3, [r1, #4]
   17734:	mov	r0, #0
   17738:	cmp	r3, #0
   1773c:	ldrne	r2, [r1, #16]
   17740:	strne	r2, [r3, #16]
   17744:	ldr	r3, [r1, #8]
   17748:	cmp	r3, #0
   1774c:	ldrne	r2, [r1, #16]
   17750:	strne	r2, [r3, #16]
   17754:	bx	lr
   17758:	ldmib	r1, {r2, r3}
   1775c:	ldr	r0, [r3, #12]
   17760:	str	r0, [r2, #16]
   17764:	ldr	r2, [r1, #16]
   17768:	mov	r0, #0
   1776c:	str	r2, [r3, #16]
   17770:	bx	lr
   17774:	ldr	r3, [r1, #4]
   17778:	mov	r0, #0
   1777c:	str	r1, [r3, #16]
   17780:	bx	lr
   17784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17788:	sub	sp, sp, #28
   1778c:	ldr	r9, [r0, #108]	; 0x6c
   17790:	ldr	r6, [sp, #64]	; 0x40
   17794:	ldr	r7, [sp, #72]	; 0x48
   17798:	ldr	lr, [r0, #84]	; 0x54
   1779c:	mov	ip, r9
   177a0:	mov	r4, #0
   177a4:	str	lr, [sp, #8]
   177a8:	cmp	r4, ip
   177ac:	bge	17808 <__assert_fail@plt+0x62b0>
   177b0:	add	lr, r4, ip
   177b4:	ldr	r5, [r0, #116]	; 0x74
   177b8:	add	lr, lr, lr, lsr #31
   177bc:	asr	lr, lr, #1
   177c0:	add	r8, lr, lr, lsl #1
   177c4:	add	r8, r5, r8, lsl #3
   177c8:	ldr	r8, [r8, #4]
   177cc:	cmp	r6, r8
   177d0:	ble	177f8 <__assert_fail@plt+0x62a0>
   177d4:	b	17954 <__assert_fail@plt+0x63fc>
   177d8:	asr	ip, ip, #1
   177dc:	mov	sl, ip
   177e0:	add	r8, ip, ip, lsl #1
   177e4:	add	r8, r5, r8, lsl #3
   177e8:	ldr	r8, [r8, #4]
   177ec:	cmp	r8, r6
   177f0:	blt	1795c <__assert_fail@plt+0x6404>
   177f4:	mov	lr, ip
   177f8:	add	ip, r4, lr
   177fc:	cmp	r4, lr
   17800:	add	ip, ip, ip, lsr #31
   17804:	blt	177d8 <__assert_fail@plt+0x6280>
   17808:	cmp	r9, r4
   1780c:	mvnle	r4, #0
   17810:	ble	1782c <__assert_fail@plt+0x62d4>
   17814:	add	lr, r4, r4, lsl #1
   17818:	ldr	ip, [r0, #116]	; 0x74
   1781c:	add	ip, ip, lr, lsl #3
   17820:	ldr	ip, [ip, #4]
   17824:	cmp	r6, ip
   17828:	mvnne	r4, #0
   1782c:	mov	ip, r9
   17830:	mov	r5, #0
   17834:	cmp	r5, ip
   17838:	bge	17894 <__assert_fail@plt+0x633c>
   1783c:	add	lr, r5, ip
   17840:	ldr	r8, [r0, #116]	; 0x74
   17844:	add	lr, lr, lr, lsr #31
   17848:	asr	lr, lr, #1
   1784c:	add	sl, lr, lr, lsl #1
   17850:	add	sl, r8, sl, lsl #3
   17854:	ldr	sl, [sl, #4]
   17858:	cmp	r7, sl
   1785c:	ble	17884 <__assert_fail@plt+0x632c>
   17860:	b	17968 <__assert_fail@plt+0x6410>
   17864:	asr	ip, ip, #1
   17868:	mov	fp, ip
   1786c:	add	sl, ip, ip, lsl #1
   17870:	add	sl, r8, sl, lsl #3
   17874:	ldr	sl, [sl, #4]
   17878:	cmp	sl, r7
   1787c:	blt	17970 <__assert_fail@plt+0x6418>
   17880:	mov	lr, ip
   17884:	add	ip, r5, lr
   17888:	cmp	r5, lr
   1788c:	add	ip, ip, ip, lsr #31
   17890:	blt	17864 <__assert_fail@plt+0x630c>
   17894:	cmp	r9, r5
   17898:	mvnle	r5, #0
   1789c:	ble	178b8 <__assert_fail@plt+0x6360>
   178a0:	add	lr, r5, r5, lsl #1
   178a4:	ldr	ip, [r0, #116]	; 0x74
   178a8:	add	ip, ip, lr, lsl #3
   178ac:	ldr	ip, [ip, #4]
   178b0:	cmp	r7, ip
   178b4:	mvnne	r5, #0
   178b8:	ldr	ip, [r1]
   178bc:	cmp	ip, #0
   178c0:	ble	17990 <__assert_fail@plt+0x6438>
   178c4:	mov	r9, r2
   178c8:	mov	r8, r0
   178cc:	mov	fp, #0
   178d0:	str	r3, [sp, #12]
   178d4:	str	r1, [sp, #20]
   178d8:	str	r4, [sp, #16]
   178dc:	ldr	r3, [r9]
   178e0:	ldr	r2, [sp, #8]
   178e4:	ldr	lr, [r8, #116]	; 0x74
   178e8:	mov	r0, r8
   178ec:	ldr	ip, [r2]
   178f0:	ldr	r2, [r3, fp, lsl #2]
   178f4:	ldr	r3, [sp, #12]
   178f8:	mov	r1, r2
   178fc:	add	r2, r2, r2, lsl #1
   17900:	ldr	r2, [lr, r2, lsl #3]
   17904:	ldr	r4, [ip, r2, lsl #3]
   17908:	ldr	r2, [sp, #16]
   1790c:	str	r6, [sp]
   17910:	str	r2, [sp, #4]
   17914:	mov	r2, r4
   17918:	bl	15d64 <__assert_fail@plt+0x480c>
   1791c:	ldr	r1, [r9]
   17920:	mov	r2, r4
   17924:	ldr	r3, [sp, #68]	; 0x44
   17928:	ldr	r1, [r1, fp, lsl #2]
   1792c:	str	r5, [sp, #4]
   17930:	str	r7, [sp]
   17934:	mov	sl, r0
   17938:	mov	r0, r8
   1793c:	bl	15d64 <__assert_fail@plt+0x480c>
   17940:	cmp	sl, r0
   17944:	beq	1797c <__assert_fail@plt+0x6424>
   17948:	mov	r0, #1
   1794c:	add	sp, sp, #28
   17950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17954:	mov	sl, lr
   17958:	mov	lr, ip
   1795c:	add	r4, sl, #1
   17960:	mov	ip, lr
   17964:	b	177a8 <__assert_fail@plt+0x6250>
   17968:	mov	fp, lr
   1796c:	mov	lr, ip
   17970:	add	r5, fp, #1
   17974:	mov	ip, lr
   17978:	b	17834 <__assert_fail@plt+0x62dc>
   1797c:	ldr	r3, [sp, #20]
   17980:	add	fp, fp, #1
   17984:	ldr	r3, [r3]
   17988:	cmp	fp, r3
   1798c:	blt	178dc <__assert_fail@plt+0x6384>
   17990:	mov	r0, #0
   17994:	b	1794c <__assert_fail@plt+0x63f4>
   17998:	ldr	ip, [r1, #4]
   1799c:	cmp	ip, #0
   179a0:	beq	17ad0 <__assert_fail@plt+0x6578>
   179a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   179a8:	ldr	lr, [r2, #4]
   179ac:	cmp	lr, #0
   179b0:	beq	17aac <__assert_fail@plt+0x6554>
   179b4:	ldr	r3, [r0, #4]
   179b8:	mov	r9, r2
   179bc:	ldr	r4, [r0]
   179c0:	add	r2, ip, lr
   179c4:	mov	r8, r1
   179c8:	add	r1, r2, r3
   179cc:	cmp	r1, r4
   179d0:	mov	r7, r0
   179d4:	bgt	17b14 <__assert_fail@plt+0x65bc>
   179d8:	ldr	r0, [r0, #8]
   179dc:	ldr	sl, [r8, #8]
   179e0:	ldr	r2, [r9, #8]
   179e4:	sub	r5, ip, #1
   179e8:	sub	r6, lr, #1
   179ec:	add	r1, r3, ip
   179f0:	ldr	r4, [r2, r6, lsl #2]
   179f4:	ldr	ip, [sl, r5, lsl #2]
   179f8:	add	r1, r1, lr
   179fc:	sub	r3, r3, #1
   17a00:	cmp	ip, r4
   17a04:	beq	17a20 <__assert_fail@plt+0x64c8>
   17a08:	bge	17ab4 <__assert_fail@plt+0x655c>
   17a0c:	subs	r6, r6, #1
   17a10:	bmi	17a6c <__assert_fail@plt+0x6514>
   17a14:	ldr	r4, [r2, r6, lsl #2]
   17a18:	cmp	ip, r4
   17a1c:	bne	17a08 <__assert_fail@plt+0x64b0>
   17a20:	cmp	r3, #0
   17a24:	blt	17a50 <__assert_fail@plt+0x64f8>
   17a28:	ldr	lr, [r0, r3, lsl #2]
   17a2c:	add	ip, r0, r3, lsl #2
   17a30:	cmp	lr, r4
   17a34:	bgt	17a48 <__assert_fail@plt+0x64f0>
   17a38:	b	17ac4 <__assert_fail@plt+0x656c>
   17a3c:	ldr	lr, [ip, #-4]!
   17a40:	cmp	lr, r4
   17a44:	ble	17ac4 <__assert_fail@plt+0x656c>
   17a48:	subs	r3, r3, #1
   17a4c:	bcs	17a3c <__assert_fail@plt+0x64e4>
   17a50:	sub	r1, r1, #1
   17a54:	str	r4, [r0, r1, lsl #2]
   17a58:	subs	r5, r5, #1
   17a5c:	bmi	17a6c <__assert_fail@plt+0x6514>
   17a60:	subs	r6, r6, #1
   17a64:	ldrpl	ip, [sl, r5, lsl #2]
   17a68:	bpl	17a14 <__assert_fail@plt+0x64bc>
   17a6c:	ldr	lr, [r7, #4]
   17a70:	ldr	ip, [r8, #4]
   17a74:	ldr	r3, [r9, #4]
   17a78:	add	ip, lr, ip
   17a7c:	add	ip, ip, r3
   17a80:	sub	r2, ip, r1
   17a84:	sub	r3, lr, #1
   17a88:	cmp	r3, #0
   17a8c:	cmpge	r2, #0
   17a90:	add	lr, lr, r2
   17a94:	sub	ip, ip, #1
   17a98:	str	lr, [r7, #4]
   17a9c:	bgt	17ae8 <__assert_fail@plt+0x6590>
   17aa0:	lsl	r2, r2, #2
   17aa4:	add	r1, r0, r1, lsl #2
   17aa8:	bl	11264 <memcpy@plt>
   17aac:	mov	r0, #0
   17ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17ab4:	subs	r5, r5, #1
   17ab8:	bmi	17a6c <__assert_fail@plt+0x6514>
   17abc:	ldr	ip, [sl, r5, lsl #2]
   17ac0:	b	17a00 <__assert_fail@plt+0x64a8>
   17ac4:	cmp	lr, r4
   17ac8:	bne	17a50 <__assert_fail@plt+0x64f8>
   17acc:	b	17a58 <__assert_fail@plt+0x6500>
   17ad0:	mov	r0, ip
   17ad4:	bx	lr
   17ad8:	sub	r3, r3, #1
   17adc:	cmn	r3, #1
   17ae0:	str	lr, [r0, r6, lsl #2]
   17ae4:	beq	17aa0 <__assert_fail@plt+0x6548>
   17ae8:	ldr	r4, [r0, ip, lsl #2]
   17aec:	ldr	lr, [r0, r3, lsl #2]
   17af0:	add	r6, r3, r2
   17af4:	cmp	r4, lr
   17af8:	mov	r5, r6
   17afc:	ble	17ad8 <__assert_fail@plt+0x6580>
   17b00:	subs	r2, r2, #1
   17b04:	sub	ip, ip, #1
   17b08:	str	r4, [r0, r6, lsl #2]
   17b0c:	bne	17ae8 <__assert_fail@plt+0x6590>
   17b10:	b	17aa4 <__assert_fail@plt+0x654c>
   17b14:	add	r4, r2, r4
   17b18:	ldr	r0, [r0, #8]
   17b1c:	lsl	r1, r4, #2
   17b20:	bl	247c0 <__assert_fail@plt+0x13268>
   17b24:	cmp	r0, #0
   17b28:	beq	17b44 <__assert_fail@plt+0x65ec>
   17b2c:	ldr	ip, [r8, #4]
   17b30:	ldr	lr, [r9, #4]
   17b34:	ldr	r3, [r7, #4]
   17b38:	str	r0, [r7, #8]
   17b3c:	str	r4, [r7]
   17b40:	b	179dc <__assert_fail@plt+0x6484>
   17b44:	mov	r0, #12
   17b48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b4c:	push	{r4, r5, r6, lr}
   17b50:	mov	r5, r0
   17b54:	ldr	r0, [r1]
   17b58:	sub	sp, sp, #16
   17b5c:	cmp	r0, #31
   17b60:	beq	17bd4 <__assert_fail@plt+0x667c>
   17b64:	lsl	ip, r0, #5
   17b68:	ldr	r4, [r5]
   17b6c:	add	r0, r0, #1
   17b70:	add	r6, ip, #4
   17b74:	str	r0, [r1]
   17b78:	ldr	r1, [sp, #32]
   17b7c:	add	ip, r4, ip
   17b80:	mov	r5, #0
   17b84:	str	r2, [ip, #8]
   17b88:	str	r3, [ip, #12]
   17b8c:	str	r5, [ip, #4]
   17b90:	ldm	r1, {r0, r1}
   17b94:	add	lr, ip, #24
   17b98:	cmp	r2, r5
   17b9c:	stm	lr, {r0, r1}
   17ba0:	ldrb	r1, [ip, #30]
   17ba4:	mvn	lr, #0
   17ba8:	add	r0, r4, r6
   17bac:	and	r1, r1, #243	; 0xf3
   17bb0:	str	r5, [ip, #16]
   17bb4:	str	r5, [ip, #20]
   17bb8:	strb	r1, [ip, #30]
   17bbc:	str	lr, [ip, #32]
   17bc0:	strne	r0, [r2]
   17bc4:	cmp	r3, #0
   17bc8:	strne	r0, [r3]
   17bcc:	add	sp, sp, #16
   17bd0:	pop	{r4, r5, r6, pc}
   17bd4:	mov	r0, #996	; 0x3e4
   17bd8:	stmib	sp, {r1, r2, r3}
   17bdc:	bl	24794 <__assert_fail@plt+0x1323c>
   17be0:	subs	r4, r0, #0
   17be4:	beq	17c08 <__assert_fail@plt+0x66b0>
   17be8:	ldr	ip, [r5]
   17bec:	mov	r6, #4
   17bf0:	str	ip, [r4]
   17bf4:	mov	r0, #1
   17bf8:	mov	ip, #0
   17bfc:	str	r4, [r5]
   17c00:	ldmib	sp, {r1, r2, r3}
   17c04:	b	17b74 <__assert_fail@plt+0x661c>
   17c08:	mov	r0, r4
   17c0c:	b	17bcc <__assert_fail@plt+0x6674>
   17c10:	push	{r4, r5, r6, r7, r8, r9, lr}
   17c14:	sub	sp, sp, #20
   17c18:	mov	r4, r0
   17c1c:	ldr	r5, [r0]
   17c20:	add	r8, r1, #56	; 0x38
   17c24:	add	r6, r1, #64	; 0x40
   17c28:	add	r9, sp, #12
   17c2c:	mov	r7, #0
   17c30:	b	17c3c <__assert_fail@plt+0x66e4>
   17c34:	mov	r4, r3
   17c38:	add	r9, r5, #4
   17c3c:	add	r3, r4, #20
   17c40:	str	r3, [sp]
   17c44:	mov	r2, #0
   17c48:	mov	r3, r7
   17c4c:	mov	r1, r6
   17c50:	mov	r0, r8
   17c54:	bl	17b4c <__assert_fail@plt+0x65f4>
   17c58:	cmp	r0, #0
   17c5c:	str	r0, [r9]
   17c60:	beq	17cc4 <__assert_fail@plt+0x676c>
   17c64:	str	r5, [r0]
   17c68:	ldr	r5, [r9]
   17c6c:	ldrb	r3, [r5, #26]
   17c70:	orr	r3, r3, #4
   17c74:	strb	r3, [r5, #26]
   17c78:	ldr	r3, [r4, #4]
   17c7c:	cmp	r3, #0
   17c80:	bne	17c34 <__assert_fail@plt+0x66dc>
   17c84:	mov	r2, r7
   17c88:	b	17ca4 <__assert_fail@plt+0x674c>
   17c8c:	ldr	r3, [r4]
   17c90:	mov	r2, r4
   17c94:	cmp	r3, #0
   17c98:	ldr	r5, [r5]
   17c9c:	mov	r4, r3
   17ca0:	beq	17cc0 <__assert_fail@plt+0x6768>
   17ca4:	ldr	r3, [r4, #8]
   17ca8:	cmp	r3, #0
   17cac:	cmpne	r2, r3
   17cb0:	beq	17c8c <__assert_fail@plt+0x6734>
   17cb4:	mov	r4, r3
   17cb8:	add	r9, r5, #8
   17cbc:	b	17c3c <__assert_fail@plt+0x66e4>
   17cc0:	ldr	r0, [sp, #12]
   17cc4:	add	sp, sp, #20
   17cc8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17ccc:	ldrb	r3, [r1, #28]
   17cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cd4:	sub	sp, sp, #28
   17cd8:	ands	r9, r3, #16
   17cdc:	mov	r7, r2
   17ce0:	str	r0, [sp, #12]
   17ce4:	ldr	r4, [r1]
   17ce8:	ldr	r5, [r2, #4]
   17cec:	beq	17e34 <__assert_fail@plt+0x68dc>
   17cf0:	cmp	r5, #0
   17cf4:	beq	17ec4 <__assert_fail@plt+0x696c>
   17cf8:	ldr	r3, [r2, #20]
   17cfc:	cmp	r3, #31
   17d00:	bgt	17e28 <__assert_fail@plt+0x68d0>
   17d04:	ldr	r2, [r4, #80]	; 0x50
   17d08:	lsr	r3, r2, r3
   17d0c:	tst	r3, #1
   17d10:	beq	17e28 <__assert_fail@plt+0x68d0>
   17d14:	add	r6, sp, #16
   17d18:	mov	r9, #0
   17d1c:	add	sl, r4, #56	; 0x38
   17d20:	add	r4, r4, #64	; 0x40
   17d24:	mov	r3, r9
   17d28:	mov	r2, r9
   17d2c:	mov	ip, #8
   17d30:	str	r6, [sp]
   17d34:	mov	r1, r4
   17d38:	str	r9, [r6, #4]
   17d3c:	mov	r0, sl
   17d40:	str	r9, [sp, #16]
   17d44:	strb	ip, [sp, #20]
   17d48:	bl	17b4c <__assert_fail@plt+0x65f4>
   17d4c:	str	r6, [sp]
   17d50:	mov	r3, r9
   17d54:	str	r9, [r6, #4]
   17d58:	mov	r2, r9
   17d5c:	mov	ip, #9
   17d60:	mov	r1, r4
   17d64:	str	r9, [sp, #16]
   17d68:	strb	ip, [sp, #20]
   17d6c:	mov	r8, r0
   17d70:	mov	r0, sl
   17d74:	bl	17b4c <__assert_fail@plt+0x65f4>
   17d78:	mov	r9, r0
   17d7c:	mov	r0, #0
   17d80:	str	r6, [sp]
   17d84:	mov	ip, #16
   17d88:	str	r0, [r6, #4]
   17d8c:	str	r0, [sp, #16]
   17d90:	mov	r2, r5
   17d94:	mov	r3, r9
   17d98:	mov	r1, r4
   17d9c:	mov	r0, sl
   17da0:	strb	ip, [sp, #20]
   17da4:	bl	17b4c <__assert_fail@plt+0x65f4>
   17da8:	mov	fp, r0
   17dac:	mov	r2, #0
   17db0:	str	r6, [sp]
   17db4:	mov	ip, #16
   17db8:	str	r2, [r6, #4]
   17dbc:	str	r2, [sp, #16]
   17dc0:	mov	r1, r4
   17dc4:	mov	r0, sl
   17dc8:	mov	r3, fp
   17dcc:	mov	r2, r8
   17dd0:	strb	ip, [sp, #20]
   17dd4:	bl	17b4c <__assert_fail@plt+0x65f4>
   17dd8:	cmp	fp, #0
   17ddc:	cmpne	r0, #0
   17de0:	mov	r5, r0
   17de4:	beq	17ea8 <__assert_fail@plt+0x6950>
   17de8:	cmp	r9, #0
   17dec:	cmpne	r8, #0
   17df0:	beq	17ea8 <__assert_fail@plt+0x6950>
   17df4:	ldr	r3, [r7, #20]
   17df8:	str	r3, [r9, #20]
   17dfc:	str	r3, [r8, #20]
   17e00:	ldrb	r3, [r7, #26]
   17e04:	ldrb	r2, [r9, #26]
   17e08:	and	r3, r3, #8
   17e0c:	bic	r2, r2, #8
   17e10:	orr	r2, r3, r2
   17e14:	strb	r2, [r9, #26]
   17e18:	ldrb	r2, [r8, #26]
   17e1c:	bic	r2, r2, #8
   17e20:	orr	r3, r3, r2
   17e24:	strb	r3, [r8, #26]
   17e28:	mov	r0, r5
   17e2c:	add	sp, sp, #28
   17e30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e34:	add	r6, sp, #16
   17e38:	add	sl, r4, #56	; 0x38
   17e3c:	add	r4, r4, #64	; 0x40
   17e40:	mov	ip, #8
   17e44:	mov	r3, r9
   17e48:	mov	r2, r9
   17e4c:	str	r6, [sp]
   17e50:	mov	r1, r4
   17e54:	str	r9, [r6, #4]
   17e58:	mov	r0, sl
   17e5c:	str	r9, [sp, #16]
   17e60:	strb	ip, [sp, #20]
   17e64:	bl	17b4c <__assert_fail@plt+0x65f4>
   17e68:	str	r6, [sp]
   17e6c:	mov	ip, #9
   17e70:	str	r9, [r6, #4]
   17e74:	mov	r3, r9
   17e78:	mov	r2, r9
   17e7c:	mov	r1, r4
   17e80:	str	r9, [sp, #16]
   17e84:	strb	ip, [sp, #20]
   17e88:	mov	r8, r0
   17e8c:	mov	r0, sl
   17e90:	bl	17b4c <__assert_fail@plt+0x65f4>
   17e94:	cmp	r5, #0
   17e98:	mov	r9, r0
   17e9c:	moveq	fp, r0
   17ea0:	bne	17d7c <__assert_fail@plt+0x6824>
   17ea4:	b	17dac <__assert_fail@plt+0x6854>
   17ea8:	ldr	r2, [sp, #12]
   17eac:	mov	r3, #12
   17eb0:	mov	r5, #0
   17eb4:	mov	r0, r5
   17eb8:	str	r3, [r2]
   17ebc:	add	sp, sp, #28
   17ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ec4:	add	r6, sp, #16
   17ec8:	add	sl, r4, #56	; 0x38
   17ecc:	add	r4, r4, #64	; 0x40
   17ed0:	mov	ip, #8
   17ed4:	str	r6, [sp]
   17ed8:	mov	r1, r4
   17edc:	mov	r3, r5
   17ee0:	mov	r2, r5
   17ee4:	str	r5, [r6, #4]
   17ee8:	mov	r0, sl
   17eec:	strb	ip, [sp, #20]
   17ef0:	str	r5, [sp, #16]
   17ef4:	bl	17b4c <__assert_fail@plt+0x65f4>
   17ef8:	str	r6, [sp]
   17efc:	mov	ip, #9
   17f00:	str	r5, [r6, #4]
   17f04:	mov	r1, r4
   17f08:	mov	r3, r5
   17f0c:	mov	r2, r5
   17f10:	str	r5, [sp, #16]
   17f14:	strb	ip, [sp, #20]
   17f18:	mov	r8, r0
   17f1c:	mov	r0, sl
   17f20:	bl	17b4c <__assert_fail@plt+0x65f4>
   17f24:	mov	fp, r0
   17f28:	mov	r9, r0
   17f2c:	b	17dac <__assert_fail@plt+0x6854>
   17f30:	ldr	r2, [r1, #4]
   17f34:	push	{r4, r5, lr}
   17f38:	mov	r3, #0
   17f3c:	sub	sp, sp, #12
   17f40:	cmp	r2, r3
   17f44:	mov	r4, r1
   17f48:	mov	r5, r0
   17f4c:	str	r3, [sp, #4]
   17f50:	beq	17f60 <__assert_fail@plt+0x6a08>
   17f54:	ldrb	r3, [r2, #24]
   17f58:	cmp	r3, #17
   17f5c:	beq	17fa8 <__assert_fail@plt+0x6a50>
   17f60:	ldr	r2, [r4, #8]
   17f64:	cmp	r2, #0
   17f68:	beq	17f78 <__assert_fail@plt+0x6a20>
   17f6c:	ldrb	r3, [r2, #24]
   17f70:	cmp	r3, #17
   17f74:	beq	17f84 <__assert_fail@plt+0x6a2c>
   17f78:	ldr	r0, [sp, #4]
   17f7c:	add	sp, sp, #12
   17f80:	pop	{r4, r5, pc}
   17f84:	mov	r1, r5
   17f88:	add	r0, sp, #4
   17f8c:	bl	17ccc <__assert_fail@plt+0x6774>
   17f90:	cmp	r0, #0
   17f94:	str	r0, [r4, #8]
   17f98:	strne	r4, [r0]
   17f9c:	ldr	r0, [sp, #4]
   17fa0:	add	sp, sp, #12
   17fa4:	pop	{r4, r5, pc}
   17fa8:	mov	r1, r0
   17fac:	add	r0, sp, #4
   17fb0:	bl	17ccc <__assert_fail@plt+0x6774>
   17fb4:	cmp	r0, #0
   17fb8:	str	r0, [r4, #4]
   17fbc:	strne	r4, [r0]
   17fc0:	b	17f60 <__assert_fail@plt+0x6a08>
   17fc4:	push	{r4, r5, r6, lr}
   17fc8:	mov	r4, r0
   17fcc:	ldr	r0, [r1, #4]
   17fd0:	str	r0, [r4, #4]
   17fd4:	ldr	r2, [r1, #4]
   17fd8:	cmp	r2, #0
   17fdc:	ble	18014 <__assert_fail@plt+0x6abc>
   17fe0:	str	r0, [r4]
   17fe4:	lsl	r0, r0, #2
   17fe8:	mov	r5, r1
   17fec:	bl	24794 <__assert_fail@plt+0x1323c>
   17ff0:	cmp	r0, #0
   17ff4:	str	r0, [r4, #8]
   17ff8:	beq	1802c <__assert_fail@plt+0x6ad4>
   17ffc:	ldr	r2, [r5, #4]
   18000:	ldr	r1, [r5, #8]
   18004:	lsl	r2, r2, #2
   18008:	bl	11264 <memcpy@plt>
   1800c:	mov	r0, #0
   18010:	pop	{r4, r5, r6, pc}
   18014:	mov	r2, #0
   18018:	mov	r0, r2
   1801c:	str	r2, [r4]
   18020:	str	r2, [r4, #4]
   18024:	str	r2, [r4, #8]
   18028:	pop	{r4, r5, r6, pc}
   1802c:	str	r0, [r4, #4]
   18030:	str	r0, [r4]
   18034:	mov	r0, #12
   18038:	pop	{r4, r5, r6, pc}
   1803c:	cmp	r1, #0
   18040:	beq	1810c <__assert_fail@plt+0x6bb4>
   18044:	ldr	r3, [r1, #4]
   18048:	cmp	r2, #0
   1804c:	cmpne	r3, #0
   18050:	ble	18104 <__assert_fail@plt+0x6bac>
   18054:	ldr	ip, [r2, #4]
   18058:	cmp	ip, #0
   1805c:	ble	18124 <__assert_fail@plt+0x6bcc>
   18060:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18064:	mov	r8, r0
   18068:	add	r0, r3, ip
   1806c:	str	r0, [r8]
   18070:	lsl	r0, r0, #2
   18074:	mov	r5, r2
   18078:	mov	r7, r1
   1807c:	bl	24794 <__assert_fail@plt+0x1323c>
   18080:	cmp	r0, #0
   18084:	str	r0, [r8, #8]
   18088:	beq	18180 <__assert_fail@plt+0x6c28>
   1808c:	mov	r3, #0
   18090:	mov	ip, r3
   18094:	ldr	r9, [r7, #4]
   18098:	ldr	sl, [r5, #4]
   1809c:	mov	r4, r0
   180a0:	mov	lr, #1
   180a4:	b	180e4 <__assert_fail@plt+0x6b8c>
   180a8:	cmp	r3, sl
   180ac:	bge	18140 <__assert_fail@plt+0x6be8>
   180b0:	ldr	r2, [r7, #8]
   180b4:	ldr	r1, [r5, #8]
   180b8:	ldr	r2, [r2, ip, lsl #2]
   180bc:	ldr	r6, [r1, r3, lsl #2]
   180c0:	cmp	r2, r6
   180c4:	addgt	r3, r3, #1
   180c8:	strgt	r6, [r4]
   180cc:	bgt	180dc <__assert_fail@plt+0x6b84>
   180d0:	add	ip, ip, #1
   180d4:	addeq	r3, r3, #1
   180d8:	str	r2, [r4]
   180dc:	add	lr, lr, #1
   180e0:	add	r4, r4, #4
   180e4:	cmp	ip, r9
   180e8:	sub	r6, lr, #1
   180ec:	blt	180a8 <__assert_fail@plt+0x6b50>
   180f0:	cmp	r3, sl
   180f4:	blt	18160 <__assert_fail@plt+0x6c08>
   180f8:	str	r6, [r8, #4]
   180fc:	mov	r0, #0
   18100:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18104:	cmp	r3, #0
   18108:	bgt	18124 <__assert_fail@plt+0x6bcc>
   1810c:	cmp	r2, #0
   18110:	beq	18128 <__assert_fail@plt+0x6bd0>
   18114:	ldr	r3, [r2, #4]
   18118:	cmp	r3, #0
   1811c:	ble	18128 <__assert_fail@plt+0x6bd0>
   18120:	mov	r1, r2
   18124:	b	17fc4 <__assert_fail@plt+0x6a6c>
   18128:	mov	r3, #0
   1812c:	str	r3, [r0]
   18130:	str	r3, [r0, #4]
   18134:	str	r3, [r0, #8]
   18138:	mov	r0, r3
   1813c:	bx	lr
   18140:	sub	r9, r9, ip
   18144:	ldr	r1, [r7, #8]
   18148:	add	r0, r0, r6, lsl #2
   1814c:	add	r1, r1, ip, lsl #2
   18150:	lsl	r2, r9, #2
   18154:	add	r6, r6, r9
   18158:	bl	11264 <memcpy@plt>
   1815c:	b	180f8 <__assert_fail@plt+0x6ba0>
   18160:	sub	sl, sl, r3
   18164:	ldr	r1, [r5, #8]
   18168:	add	r0, r0, r6, lsl #2
   1816c:	add	r1, r1, r3, lsl #2
   18170:	lsl	r2, sl, #2
   18174:	bl	11264 <memcpy@plt>
   18178:	add	r6, r6, sl
   1817c:	b	180f8 <__assert_fail@plt+0x6ba0>
   18180:	mov	r0, #12
   18184:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1818c:	mov	ip, #0
   18190:	ldr	r4, [r2, #4]
   18194:	sub	sp, sp, #36	; 0x24
   18198:	cmp	r4, ip
   1819c:	str	ip, [r0]
   181a0:	beq	18250 <__assert_fail@plt+0x6cf8>
   181a4:	add	r7, r3, r4
   181a8:	ble	181c4 <__assert_fail@plt+0x6c6c>
   181ac:	ldr	ip, [r2, #8]
   181b0:	add	r4, ip, r4, lsl #2
   181b4:	ldr	lr, [ip], #4
   181b8:	cmp	r4, ip
   181bc:	add	r7, r7, lr
   181c0:	bne	181b4 <__assert_fail@plt+0x6c5c>
   181c4:	mov	fp, r3
   181c8:	ldr	r3, [r1, #68]	; 0x44
   181cc:	mov	r8, r2
   181d0:	and	r3, r3, r7
   181d4:	ldr	r2, [r1, #32]
   181d8:	add	r3, r3, r3, lsl #1
   181dc:	mov	r9, r1
   181e0:	lsl	r3, r3, #2
   181e4:	str	r0, [sp, #24]
   181e8:	ldr	sl, [r2, r3]
   181ec:	add	r1, r2, r3
   181f0:	cmp	sl, #0
   181f4:	ble	1825c <__assert_fail@plt+0x6d04>
   181f8:	ldr	r6, [r1, #8]
   181fc:	mov	r5, #0
   18200:	sub	r6, r6, #4
   18204:	b	18210 <__assert_fail@plt+0x6cb8>
   18208:	cmp	r5, sl
   1820c:	beq	1825c <__assert_fail@plt+0x6d04>
   18210:	ldr	r4, [r6, #4]!
   18214:	add	r5, r5, #1
   18218:	ldr	r3, [r4]
   1821c:	cmp	r3, r7
   18220:	bne	18208 <__assert_fail@plt+0x6cb0>
   18224:	ldrb	r3, [r4, #52]	; 0x34
   18228:	and	r3, r3, #15
   1822c:	cmp	fp, r3
   18230:	bne	18208 <__assert_fail@plt+0x6cb0>
   18234:	ldr	r3, [r4, #40]	; 0x28
   18238:	mov	r1, r8
   1823c:	subs	r0, r3, #0
   18240:	beq	18208 <__assert_fail@plt+0x6cb0>
   18244:	bl	17444 <__assert_fail@plt+0x5eec>
   18248:	cmp	r0, #0
   1824c:	beq	18208 <__assert_fail@plt+0x6cb0>
   18250:	mov	r0, r4
   18254:	add	sp, sp, #36	; 0x24
   18258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1825c:	mov	r1, #1
   18260:	mov	r0, #56	; 0x38
   18264:	bl	2474c <__assert_fail@plt+0x131f4>
   18268:	subs	r4, r0, #0
   1826c:	beq	1842c <__assert_fail@plt+0x6ed4>
   18270:	add	r3, r4, #4
   18274:	mov	r0, r3
   18278:	mov	r1, r8
   1827c:	str	r3, [sp, #4]
   18280:	bl	17fc4 <__assert_fail@plt+0x6a6c>
   18284:	ldr	r3, [sp, #4]
   18288:	subs	sl, r0, #0
   1828c:	bne	184a4 <__assert_fail@plt+0x6f4c>
   18290:	ldrb	r1, [r4, #52]	; 0x34
   18294:	ldr	ip, [r8, #4]
   18298:	and	r2, fp, #15
   1829c:	bic	r1, r1, #15
   182a0:	orr	r2, r2, r1
   182a4:	cmp	ip, #0
   182a8:	str	r3, [r4, #40]	; 0x28
   182ac:	strb	r2, [r4, #52]	; 0x34
   182b0:	ble	1840c <__assert_fail@plt+0x6eb4>
   182b4:	add	r2, r4, #12
   182b8:	str	r2, [sp, #12]
   182bc:	add	r2, r4, #8
   182c0:	str	r2, [sp, #16]
   182c4:	and	r2, fp, #4
   182c8:	str	r2, [sp, #8]
   182cc:	and	r2, fp, #2
   182d0:	and	fp, fp, #1
   182d4:	str	r7, [sp, #20]
   182d8:	ldr	r6, [pc, #464]	; 184b0 <__assert_fail@plt+0x6f58>
   182dc:	mov	r7, fp
   182e0:	mov	r5, sl
   182e4:	str	r2, [sp, #4]
   182e8:	mov	fp, r3
   182ec:	b	18338 <__assert_fail@plt+0x6de0>
   182f0:	cmp	r7, #0
   182f4:	beq	183e0 <__assert_fail@plt+0x6e88>
   182f8:	tst	r2, #2
   182fc:	bne	183e0 <__assert_fail@plt+0x6e88>
   18300:	tst	r2, #16
   18304:	beq	18314 <__assert_fail@plt+0x6dbc>
   18308:	ldr	r3, [sp, #4]
   1830c:	cmp	r3, #0
   18310:	beq	183e0 <__assert_fail@plt+0x6e88>
   18314:	tst	r2, #64	; 0x40
   18318:	beq	18328 <__assert_fail@plt+0x6dd0>
   1831c:	ldr	r3, [sp, #8]
   18320:	cmp	r3, #0
   18324:	beq	183e0 <__assert_fail@plt+0x6e88>
   18328:	ldr	ip, [r8, #4]
   1832c:	add	r5, r5, #1
   18330:	cmp	r5, ip
   18334:	bge	18408 <__assert_fail@plt+0x6eb0>
   18338:	ldr	r2, [r8, #8]
   1833c:	ldr	r1, [r9]
   18340:	ldr	r2, [r2, r5, lsl #2]
   18344:	add	r1, r1, r2, lsl #3
   18348:	ldr	r2, [r1, #4]
   1834c:	ldrb	r0, [r1, #4]
   18350:	ands	r2, r6, r2, lsr #8
   18354:	moveq	lr, #1
   18358:	movne	lr, #0
   1835c:	cmp	r0, #1
   18360:	movne	lr, #0
   18364:	andeq	lr, lr, #1
   18368:	cmp	lr, #0
   1836c:	bne	1832c <__assert_fail@plt+0x6dd4>
   18370:	ldrb	r1, [r1, #6]
   18374:	ldrb	lr, [r4, #52]	; 0x34
   18378:	cmp	r0, #2
   1837c:	lsr	r1, r1, #4
   18380:	orr	r1, r1, lr, lsr #5
   18384:	and	r1, r1, #1
   18388:	bic	lr, lr, #32
   1838c:	orr	r1, lr, r1, lsl #5
   18390:	strb	r1, [r4, #52]	; 0x34
   18394:	uxtbeq	r1, r1
   18398:	orreq	r1, r1, #16
   1839c:	strbeq	r1, [r4, #52]	; 0x34
   183a0:	beq	183b4 <__assert_fail@plt+0x6e5c>
   183a4:	cmp	r0, #4
   183a8:	ldrbeq	r1, [r4, #52]	; 0x34
   183ac:	orreq	r1, r1, #64	; 0x40
   183b0:	strbeq	r1, [r4, #52]	; 0x34
   183b4:	cmp	r2, #0
   183b8:	beq	1832c <__assert_fail@plt+0x6dd4>
   183bc:	ldr	r1, [r4, #40]	; 0x28
   183c0:	cmp	fp, r1
   183c4:	beq	18460 <__assert_fail@plt+0x6f08>
   183c8:	tst	r2, #1
   183cc:	bne	182f0 <__assert_fail@plt+0x6d98>
   183d0:	tst	r2, #2
   183d4:	beq	18300 <__assert_fail@plt+0x6da8>
   183d8:	cmp	r7, #0
   183dc:	beq	18300 <__assert_fail@plt+0x6da8>
   183e0:	subs	r2, r5, sl
   183e4:	bmi	183f4 <__assert_fail@plt+0x6e9c>
   183e8:	ldr	r1, [r4, #8]
   183ec:	cmp	r2, r1
   183f0:	blt	18448 <__assert_fail@plt+0x6ef0>
   183f4:	ldr	ip, [r8, #4]
   183f8:	add	r5, r5, #1
   183fc:	cmp	r5, ip
   18400:	add	sl, sl, #1
   18404:	blt	18338 <__assert_fail@plt+0x6de0>
   18408:	ldr	r7, [sp, #20]
   1840c:	mov	r2, r7
   18410:	mov	r0, r9
   18414:	mov	r1, r4
   18418:	bl	15fbc <__assert_fail@plt+0x4a64>
   1841c:	cmp	r0, #0
   18420:	beq	18250 <__assert_fail@plt+0x6cf8>
   18424:	mov	r0, r4
   18428:	bl	16c20 <__assert_fail@plt+0x56c8>
   1842c:	ldr	r2, [sp, #24]
   18430:	mov	r3, #12
   18434:	mov	r4, #0
   18438:	mov	r0, r4
   1843c:	str	r3, [r2]
   18440:	add	sp, sp, #36	; 0x24
   18444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18448:	sub	r1, r1, #1
   1844c:	str	r1, [r4, #8]
   18450:	ldr	r0, [sp, #16]
   18454:	ldr	r1, [sp, #12]
   18458:	bl	17648 <__assert_fail@plt+0x60f0>
   1845c:	b	183f4 <__assert_fail@plt+0x6e9c>
   18460:	mov	r0, #12
   18464:	str	r2, [sp, #28]
   18468:	bl	24794 <__assert_fail@plt+0x1323c>
   1846c:	ldr	r2, [sp, #28]
   18470:	subs	r1, r0, #0
   18474:	beq	18424 <__assert_fail@plt+0x6ecc>
   18478:	str	r1, [r4, #40]	; 0x28
   1847c:	mov	r1, r8
   18480:	str	r2, [sp, #28]
   18484:	bl	17fc4 <__assert_fail@plt+0x6a6c>
   18488:	ldr	r2, [sp, #28]
   1848c:	subs	sl, r0, #0
   18490:	bne	18424 <__assert_fail@plt+0x6ecc>
   18494:	ldrb	r1, [r4, #52]	; 0x34
   18498:	orr	r1, r1, #128	; 0x80
   1849c:	strb	r1, [r4, #52]	; 0x34
   184a0:	b	183c8 <__assert_fail@plt+0x6e70>
   184a4:	mov	r0, r4
   184a8:	bl	13908 <__assert_fail@plt+0x23b0>
   184ac:	b	1842c <__assert_fail@plt+0x6ed4>
   184b0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   184b4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184b8:	mov	r3, #0
   184bc:	ldr	r6, [r2, #4]
   184c0:	str	r3, [r0]
   184c4:	cmp	r6, r3
   184c8:	beq	186a0 <__assert_fail@plt+0x7148>
   184cc:	ble	184e8 <__assert_fail@plt+0x6f90>
   184d0:	ldr	r3, [r2, #8]
   184d4:	add	lr, r3, r6, lsl #2
   184d8:	ldr	ip, [r3], #4
   184dc:	cmp	lr, r3
   184e0:	add	r6, r6, ip
   184e4:	bne	184d8 <__assert_fail@plt+0x6f80>
   184e8:	ldr	r3, [r1, #68]	; 0x44
   184ec:	mov	sl, r2
   184f0:	and	r3, r3, r6
   184f4:	ldr	r2, [r1, #32]
   184f8:	add	r3, r3, r3, lsl #1
   184fc:	mov	r7, r1
   18500:	lsl	r3, r3, #2
   18504:	mov	r8, r0
   18508:	ldr	fp, [r2, r3]
   1850c:	add	r1, r2, r3
   18510:	cmp	fp, #0
   18514:	ble	18560 <__assert_fail@plt+0x7008>
   18518:	ldr	r9, [r1, #8]
   1851c:	mov	r5, #0
   18520:	sub	r9, r9, #4
   18524:	b	18530 <__assert_fail@plt+0x6fd8>
   18528:	cmp	r5, fp
   1852c:	beq	18560 <__assert_fail@plt+0x7008>
   18530:	ldr	r4, [r9, #4]!
   18534:	add	r5, r5, #1
   18538:	ldr	r3, [r4]
   1853c:	cmp	r3, r6
   18540:	bne	18528 <__assert_fail@plt+0x6fd0>
   18544:	mov	r1, sl
   18548:	add	r0, r4, #4
   1854c:	bl	17444 <__assert_fail@plt+0x5eec>
   18550:	cmp	r0, #0
   18554:	beq	18528 <__assert_fail@plt+0x6fd0>
   18558:	mov	r0, r4
   1855c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18560:	mov	r1, #1
   18564:	mov	r0, #56	; 0x38
   18568:	bl	2474c <__assert_fail@plt+0x131f4>
   1856c:	subs	r4, r0, #0
   18570:	beq	1867c <__assert_fail@plt+0x7124>
   18574:	add	r5, r4, #4
   18578:	mov	r0, r5
   1857c:	mov	r1, sl
   18580:	bl	17fc4 <__assert_fail@plt+0x6a6c>
   18584:	cmp	r0, #0
   18588:	bne	186ac <__assert_fail@plt+0x7154>
   1858c:	ldr	lr, [sl, #4]
   18590:	str	r5, [r4, #40]	; 0x28
   18594:	cmp	lr, #0
   18598:	ble	1865c <__assert_fail@plt+0x7104>
   1859c:	ldr	ip, [sl, #8]
   185a0:	ldr	r5, [r7]
   185a4:	ldr	r9, [pc, #268]	; 186b8 <__assert_fail@plt+0x7160>
   185a8:	add	lr, ip, lr, lsl #2
   185ac:	b	18608 <__assert_fail@plt+0x70b0>
   185b0:	ldrb	r3, [r2, #6]
   185b4:	ldrb	r1, [r4, #52]	; 0x34
   185b8:	cmp	r0, #2
   185bc:	lsr	r3, r3, #4
   185c0:	orr	r3, r3, r1, lsr #5
   185c4:	and	r3, r3, #1
   185c8:	bic	r1, r1, #32
   185cc:	orr	r3, r1, r3, lsl #5
   185d0:	strb	r3, [r4, #52]	; 0x34
   185d4:	uxtbeq	r3, r3
   185d8:	orreq	r3, r3, #16
   185dc:	strbeq	r3, [r4, #52]	; 0x34
   185e0:	beq	18600 <__assert_fail@plt+0x70a8>
   185e4:	cmp	r0, #4
   185e8:	beq	18690 <__assert_fail@plt+0x7138>
   185ec:	cmp	r0, #12
   185f0:	beq	18648 <__assert_fail@plt+0x70f0>
   185f4:	ldr	r3, [r2, #4]
   185f8:	tst	r3, r9
   185fc:	bne	18648 <__assert_fail@plt+0x70f0>
   18600:	cmp	lr, ip
   18604:	beq	1865c <__assert_fail@plt+0x7104>
   18608:	ldr	r2, [ip], #4
   1860c:	add	r2, r5, r2, lsl #3
   18610:	ldrb	r0, [r2, #4]
   18614:	cmp	r0, #1
   18618:	bne	185b0 <__assert_fail@plt+0x7058>
   1861c:	ldr	r3, [r2, #4]
   18620:	tst	r3, r9
   18624:	beq	18600 <__assert_fail@plt+0x70a8>
   18628:	ldrb	r3, [r2, #6]
   1862c:	ldrb	r2, [r4, #52]	; 0x34
   18630:	lsr	r3, r3, #4
   18634:	orr	r3, r3, r2, lsr #5
   18638:	and	r3, r3, #1
   1863c:	bic	r2, r2, #32
   18640:	orr	r3, r2, r3, lsl #5
   18644:	strb	r3, [r4, #52]	; 0x34
   18648:	ldrb	r3, [r4, #52]	; 0x34
   1864c:	cmp	lr, ip
   18650:	orr	r3, r3, #128	; 0x80
   18654:	strb	r3, [r4, #52]	; 0x34
   18658:	bne	18608 <__assert_fail@plt+0x70b0>
   1865c:	mov	r2, r6
   18660:	mov	r0, r7
   18664:	mov	r1, r4
   18668:	bl	15fbc <__assert_fail@plt+0x4a64>
   1866c:	cmp	r0, #0
   18670:	beq	18558 <__assert_fail@plt+0x7000>
   18674:	mov	r0, r4
   18678:	bl	16c20 <__assert_fail@plt+0x56c8>
   1867c:	mov	r4, #0
   18680:	mov	r3, #12
   18684:	str	r3, [r8]
   18688:	mov	r0, r4
   1868c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18690:	ldrb	r3, [r4, #52]	; 0x34
   18694:	orr	r3, r3, #64	; 0x40
   18698:	strb	r3, [r4, #52]	; 0x34
   1869c:	b	18600 <__assert_fail@plt+0x70a8>
   186a0:	mov	r4, r6
   186a4:	mov	r0, r4
   186a8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186ac:	mov	r0, r4
   186b0:	bl	13908 <__assert_fail@plt+0x23b0>
   186b4:	b	1867c <__assert_fail@plt+0x7124>
   186b8:	andeq	pc, r3, r0, lsl #30
   186bc:	push	{r4, r5, r6, r7, r8, lr}
   186c0:	subs	r7, r3, #0
   186c4:	sub	sp, sp, #16
   186c8:	movgt	r8, r0
   186cc:	movgt	r4, r1
   186d0:	movgt	r5, r2
   186d4:	movgt	r6, #0
   186d8:	bgt	18710 <__assert_fail@plt+0x71b8>
   186dc:	b	18764 <__assert_fail@plt+0x720c>
   186e0:	bl	184b4 <__assert_fail@plt+0x6f5c>
   186e4:	str	r0, [r4]
   186e8:	ldr	r0, [sp, #12]
   186ec:	bl	13908 <__assert_fail@plt+0x23b0>
   186f0:	ldr	ip, [sp]
   186f4:	cmp	ip, #0
   186f8:	bne	18758 <__assert_fail@plt+0x7200>
   186fc:	add	r6, r6, #1
   18700:	cmp	r7, r6
   18704:	add	r4, r4, #4
   18708:	add	r5, r5, #4
   1870c:	beq	18764 <__assert_fail@plt+0x720c>
   18710:	ldr	r2, [r4]
   18714:	ldr	r3, [r5]
   18718:	cmp	r2, #0
   1871c:	add	r0, sp, #4
   18720:	add	r1, r2, #4
   18724:	streq	r3, [r4]
   18728:	beq	186fc <__assert_fail@plt+0x71a4>
   1872c:	cmp	r3, #0
   18730:	add	r2, r3, #4
   18734:	beq	186fc <__assert_fail@plt+0x71a4>
   18738:	bl	1803c <__assert_fail@plt+0x6ae4>
   1873c:	add	r2, sp, #4
   18740:	mov	r1, r8
   18744:	mov	ip, r0
   18748:	cmp	ip, #0
   1874c:	mov	r0, sp
   18750:	str	ip, [sp]
   18754:	beq	186e0 <__assert_fail@plt+0x7188>
   18758:	mov	r0, ip
   1875c:	add	sp, sp, #16
   18760:	pop	{r4, r5, r6, r7, r8, pc}
   18764:	mov	ip, #0
   18768:	mov	r0, ip
   1876c:	add	sp, sp, #16
   18770:	pop	{r4, r5, r6, r7, r8, pc}
   18774:	ldrb	r2, [r1, #24]
   18778:	cmp	r2, #16
   1877c:	beq	187ec <__assert_fail@plt+0x7294>
   18780:	push	{r4, r5, r6, lr}
   18784:	add	r3, r1, #20
   18788:	mov	r4, r1
   1878c:	mov	r5, r0
   18790:	str	r1, [r4, #12]
   18794:	ldm	r3, {r1, r2}
   18798:	bl	169dc <__assert_fail@plt+0x5484>
   1879c:	cmn	r0, #1
   187a0:	str	r0, [r4, #28]
   187a4:	beq	18808 <__assert_fail@plt+0x72b0>
   187a8:	ldrb	r3, [r4, #24]
   187ac:	cmp	r3, #12
   187b0:	beq	187bc <__assert_fail@plt+0x7264>
   187b4:	mov	r0, #0
   187b8:	pop	{r4, r5, r6, pc}
   187bc:	ldr	r1, [r5]
   187c0:	ldr	r2, [r4, #20]
   187c4:	add	r1, r1, r0, lsl #3
   187c8:	mov	r0, #0
   187cc:	ldr	r3, [r1, #4]
   187d0:	lsl	r2, r2, #22
   187d4:	bic	r3, r3, #261120	; 0x3fc00
   187d8:	lsr	r2, r2, #22
   187dc:	bic	r3, r3, #768	; 0x300
   187e0:	orr	r3, r3, r2, lsl #8
   187e4:	str	r3, [r1, #4]
   187e8:	pop	{r4, r5, r6, pc}
   187ec:	ldr	r3, [r1, #4]
   187f0:	mov	r0, #0
   187f4:	ldr	r2, [r3, #12]
   187f8:	ldr	r3, [r3, #28]
   187fc:	str	r2, [r1, #12]
   18800:	str	r3, [r1, #28]
   18804:	bx	lr
   18808:	mov	r0, #12
   1880c:	pop	{r4, r5, r6, pc}
   18810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18814:	mov	r9, r1
   18818:	ldr	r7, [r0, #28]
   1881c:	add	r1, r1, r1, lsl #1
   18820:	sub	sp, sp, #36	; 0x24
   18824:	add	r7, r7, r1, lsl #2
   18828:	mov	r5, #0
   1882c:	str	r5, [sp, #24]
   18830:	str	r5, [sp, #20]
   18834:	str	r5, [sp, #28]
   18838:	ldr	r6, [r7, #4]
   1883c:	str	r3, [sp, #12]
   18840:	cmp	r6, r5
   18844:	ble	18a2c <__assert_fail@plt+0x74d4>
   18848:	add	r3, r7, #8
   1884c:	str	r3, [sp]
   18850:	add	r3, r2, #8
   18854:	mov	r8, r0
   18858:	str	r3, [sp, #8]
   1885c:	str	r2, [sp, #4]
   18860:	b	188ac <__assert_fail@plt+0x7354>
   18864:	ldr	r3, [sp, #4]
   18868:	mov	r2, fp
   1886c:	ldr	r1, [sp, #8]
   18870:	ldr	r0, [r3, #4]
   18874:	bl	174b8 <__assert_fail@plt+0x5f60>
   18878:	cmp	r0, #0
   1887c:	beq	18908 <__assert_fail@plt+0x73b0>
   18880:	ldr	r2, [r8, #28]
   18884:	ldr	r1, [sp, #12]
   18888:	add	r2, r2, r4
   1888c:	add	r0, sp, #20
   18890:	bl	17998 <__assert_fail@plt+0x6440>
   18894:	cmp	r0, #0
   18898:	bne	18a14 <__assert_fail@plt+0x74bc>
   1889c:	ldr	r6, [r7, #4]
   188a0:	add	r5, r5, #1
   188a4:	cmp	r6, r5
   188a8:	ble	18968 <__assert_fail@plt+0x7410>
   188ac:	ldr	r3, [r7, #8]
   188b0:	ldr	r4, [r3, r5, lsl #2]
   188b4:	cmp	r9, r4
   188b8:	beq	188a0 <__assert_fail@plt+0x7348>
   188bc:	ldr	r3, [r8]
   188c0:	add	r3, r3, r4, lsl #3
   188c4:	ldrb	r3, [r3, #4]
   188c8:	tst	r3, #8
   188cc:	beq	188a0 <__assert_fail@plt+0x7348>
   188d0:	add	r4, r4, r4, lsl #1
   188d4:	ldr	r3, [r8, #20]
   188d8:	lsl	r4, r4, #2
   188dc:	add	r3, r3, r4
   188e0:	ldr	r1, [sp]
   188e4:	ldmib	r3, {r3, sl}
   188e8:	mov	r0, r6
   188ec:	ldr	fp, [sl]
   188f0:	cmp	r3, #1
   188f4:	mov	r2, fp
   188f8:	ble	1894c <__assert_fail@plt+0x73f4>
   188fc:	bl	174b8 <__assert_fail@plt+0x5f60>
   18900:	cmp	r0, #0
   18904:	beq	18864 <__assert_fail@plt+0x730c>
   18908:	ldr	sl, [sl, #4]
   1890c:	cmp	sl, #0
   18910:	ble	188a0 <__assert_fail@plt+0x7348>
   18914:	mov	r2, sl
   18918:	ldr	r1, [sp]
   1891c:	mov	r0, r6
   18920:	bl	174b8 <__assert_fail@plt+0x5f60>
   18924:	cmp	r0, #0
   18928:	bne	188a0 <__assert_fail@plt+0x7348>
   1892c:	mov	r2, sl
   18930:	ldr	r3, [sp, #4]
   18934:	ldr	r1, [sp, #8]
   18938:	ldr	r0, [r3, #4]
   1893c:	bl	174b8 <__assert_fail@plt+0x5f60>
   18940:	cmp	r0, #0
   18944:	beq	188a0 <__assert_fail@plt+0x7348>
   18948:	b	18880 <__assert_fail@plt+0x7328>
   1894c:	bl	174b8 <__assert_fail@plt+0x5f60>
   18950:	cmp	r0, #0
   18954:	moveq	r2, fp
   18958:	beq	18930 <__assert_fail@plt+0x73d8>
   1895c:	add	r5, r5, #1
   18960:	cmp	r6, r5
   18964:	bgt	188ac <__assert_fail@plt+0x7354>
   18968:	cmp	r6, #0
   1896c:	ldr	fp, [sp, #4]
   18970:	ble	189fc <__assert_fail@plt+0x74a4>
   18974:	mov	r4, #0
   18978:	add	r8, fp, #8
   1897c:	add	r9, fp, #4
   18980:	b	1898c <__assert_fail@plt+0x7434>
   18984:	cmp	r6, r4
   18988:	ble	189fc <__assert_fail@plt+0x74a4>
   1898c:	ldr	r3, [r7, #8]
   18990:	add	r1, sp, #28
   18994:	ldr	r0, [sp, #24]
   18998:	ldr	r5, [r3, r4, lsl #2]
   1899c:	add	r4, r4, #1
   189a0:	mov	r2, r5
   189a4:	bl	174b8 <__assert_fail@plt+0x5f60>
   189a8:	mov	r2, r5
   189ac:	mov	r1, r8
   189b0:	cmp	r0, #0
   189b4:	bne	18984 <__assert_fail@plt+0x742c>
   189b8:	ldr	r5, [fp, #4]
   189bc:	mov	r0, r5
   189c0:	bl	174b8 <__assert_fail@plt+0x5f60>
   189c4:	sub	r2, r0, #1
   189c8:	cmp	r2, r5
   189cc:	movlt	r3, #0
   189d0:	movge	r3, #1
   189d4:	orrs	r3, r3, r2, lsr #31
   189d8:	bne	18984 <__assert_fail@plt+0x742c>
   189dc:	sub	r5, r5, #1
   189e0:	str	r5, [fp, #4]
   189e4:	mov	r1, r8
   189e8:	mov	r0, r9
   189ec:	bl	17648 <__assert_fail@plt+0x60f0>
   189f0:	ldr	r6, [r7, #4]
   189f4:	cmp	r6, r4
   189f8:	bgt	1898c <__assert_fail@plt+0x7434>
   189fc:	ldr	r0, [sp, #28]
   18a00:	bl	13908 <__assert_fail@plt+0x23b0>
   18a04:	mov	r4, #0
   18a08:	mov	r0, r4
   18a0c:	add	sp, sp, #36	; 0x24
   18a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a14:	mov	r4, r0
   18a18:	ldr	r0, [sp, #28]
   18a1c:	bl	13908 <__assert_fail@plt+0x23b0>
   18a20:	mov	r0, r4
   18a24:	add	sp, sp, #36	; 0x24
   18a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a2c:	mov	r0, r5
   18a30:	b	18a00 <__assert_fail@plt+0x74a8>
   18a34:	push	{r4, r5, r6, r7, r8, lr}
   18a38:	subs	r6, r1, #0
   18a3c:	beq	18b30 <__assert_fail@plt+0x75d8>
   18a40:	ldr	r2, [r6, #4]
   18a44:	cmp	r2, #0
   18a48:	mov	ip, r2
   18a4c:	beq	18b30 <__assert_fail@plt+0x75d8>
   18a50:	ldm	r0, {r1, r3}
   18a54:	mov	r5, r0
   18a58:	add	r4, r3, r2, lsl #1
   18a5c:	cmp	r1, r4
   18a60:	blt	18b58 <__assert_fail@plt+0x7600>
   18a64:	cmp	r3, #0
   18a68:	beq	18b98 <__assert_fail@plt+0x7640>
   18a6c:	sub	r2, r2, #1
   18a70:	sub	r3, r3, #1
   18a74:	mvn	r7, r2
   18a78:	mvn	lr, r3
   18a7c:	tst	r7, lr
   18a80:	bpl	18abc <__assert_fail@plt+0x7564>
   18a84:	ldr	r1, [r5, #8]
   18a88:	ldr	r0, [r6, #8]
   18a8c:	ldr	ip, [r1, r3, lsl #2]
   18a90:	ldr	r0, [r0, r2, lsl #2]
   18a94:	cmp	ip, r0
   18a98:	beq	18a6c <__assert_fail@plt+0x7514>
   18a9c:	sublt	r4, r4, #1
   18aa0:	sublt	r2, r2, #1
   18aa4:	subge	r3, r3, #1
   18aa8:	mvnlt	r7, r2
   18aac:	mvnge	lr, r3
   18ab0:	strlt	r0, [r1, r4, lsl #2]
   18ab4:	tst	r7, lr
   18ab8:	bmi	18a84 <__assert_fail@plt+0x752c>
   18abc:	cmp	r2, #0
   18ac0:	blt	18ae0 <__assert_fail@plt+0x7588>
   18ac4:	add	r2, r2, #1
   18ac8:	sub	r4, r4, r2
   18acc:	ldr	r0, [r5, #8]
   18ad0:	lsl	r2, r2, #2
   18ad4:	add	r0, r0, r4, lsl #2
   18ad8:	ldr	r1, [r6, #8]
   18adc:	bl	11264 <memcpy@plt>
   18ae0:	ldr	r1, [r6, #4]
   18ae4:	ldr	ip, [r5, #4]
   18ae8:	add	r1, ip, r1, lsl #1
   18aec:	subs	r2, r1, r4
   18af0:	sub	r1, r1, #1
   18af4:	beq	18b30 <__assert_fail@plt+0x75d8>
   18af8:	ldr	r0, [r5, #8]
   18afc:	sub	r3, ip, #1
   18b00:	add	ip, ip, r2
   18b04:	str	ip, [r5, #4]
   18b08:	ldr	lr, [r0, r1, lsl #2]
   18b0c:	ldr	ip, [r0, r3, lsl #2]
   18b10:	add	r6, r3, r2
   18b14:	cmp	lr, ip
   18b18:	mov	r5, r6
   18b1c:	ble	18b38 <__assert_fail@plt+0x75e0>
   18b20:	subs	r2, r2, #1
   18b24:	sub	r1, r1, #1
   18b28:	str	lr, [r0, r6, lsl #2]
   18b2c:	bne	18b08 <__assert_fail@plt+0x75b0>
   18b30:	mov	r0, #0
   18b34:	pop	{r4, r5, r6, r7, r8, pc}
   18b38:	subs	r3, r3, #1
   18b3c:	str	ip, [r0, r6, lsl #2]
   18b40:	bpl	18b08 <__assert_fail@plt+0x75b0>
   18b44:	lsl	r2, r2, #2
   18b48:	add	r1, r0, r4, lsl #2
   18b4c:	bl	11264 <memcpy@plt>
   18b50:	mov	r0, #0
   18b54:	pop	{r4, r5, r6, r7, r8, pc}
   18b58:	add	r2, r2, r1
   18b5c:	ldr	r0, [r0, #8]
   18b60:	lsl	r1, r2, #3
   18b64:	lsl	r4, r2, #1
   18b68:	bl	247c0 <__assert_fail@plt+0x13268>
   18b6c:	cmp	r0, #0
   18b70:	beq	18bb4 <__assert_fail@plt+0x765c>
   18b74:	ldr	r3, [r5, #4]
   18b78:	str	r0, [r5, #8]
   18b7c:	cmp	r3, #0
   18b80:	str	r4, [r5]
   18b84:	ldreq	ip, [r6, #4]
   18b88:	beq	18b9c <__assert_fail@plt+0x7644>
   18b8c:	ldr	r2, [r6, #4]
   18b90:	add	r4, r3, r2, lsl #1
   18b94:	b	18a6c <__assert_fail@plt+0x7514>
   18b98:	ldr	r0, [r0, #8]
   18b9c:	str	ip, [r5, #4]
   18ba0:	ldr	r2, [r6, #4]
   18ba4:	ldr	r1, [r6, #8]
   18ba8:	lsl	r2, r2, #2
   18bac:	bl	11264 <memcpy@plt>
   18bb0:	b	18b30 <__assert_fail@plt+0x75d8>
   18bb4:	mov	r0, #12
   18bb8:	pop	{r4, r5, r6, r7, r8, pc}
   18bbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bc0:	add	r7, r2, r2, lsl #1
   18bc4:	mov	r4, r2
   18bc8:	ldr	r2, [r1, #20]
   18bcc:	lsl	r7, r7, #2
   18bd0:	add	r2, r2, r7
   18bd4:	mov	r6, r1
   18bd8:	ldr	r1, [r2, #4]
   18bdc:	sub	sp, sp, #44	; 0x2c
   18be0:	add	r1, r1, #1
   18be4:	mov	r2, #0
   18be8:	mov	sl, r0
   18bec:	lsl	r0, r1, #2
   18bf0:	str	r3, [sp, #12]
   18bf4:	str	r1, [sp, #16]
   18bf8:	str	r2, [sp, #20]
   18bfc:	bl	24794 <__assert_fail@plt+0x1323c>
   18c00:	cmp	r0, #0
   18c04:	str	r0, [sp, #24]
   18c08:	beq	18de4 <__assert_fail@plt+0x788c>
   18c0c:	ldr	r8, [r6]
   18c10:	ldr	r3, [sp, #20]
   18c14:	lsl	r5, r4, #3
   18c18:	add	lr, r8, r5
   18c1c:	str	r4, [r0, r3, lsl #2]
   18c20:	ldr	r1, [r6, #24]
   18c24:	ldr	r0, [lr, #4]
   18c28:	ldr	r2, [pc, #452]	; 18df4 <__assert_fail@plt+0x789c>
   18c2c:	add	ip, r1, r7
   18c30:	and	r2, r2, r0
   18c34:	add	r3, r3, #1
   18c38:	cmp	r2, #0
   18c3c:	mvn	r2, #0
   18c40:	str	r3, [sp, #20]
   18c44:	str	r2, [ip, #4]
   18c48:	beq	18c78 <__assert_fail@plt+0x7720>
   18c4c:	ldr	r3, [r6, #20]
   18c50:	add	r3, r3, r7
   18c54:	ldr	r2, [r3, #4]
   18c58:	cmp	r2, #0
   18c5c:	beq	18d48 <__assert_fail@plt+0x77f0>
   18c60:	ldr	r3, [r3, #8]
   18c64:	ldr	r3, [r3]
   18c68:	add	r8, r8, r3, lsl #3
   18c6c:	ldrb	r3, [r8, #6]
   18c70:	tst	r3, #4
   18c74:	beq	18dac <__assert_fail@plt+0x7854>
   18c78:	ldrb	r3, [lr, #4]
   18c7c:	tst	r3, #8
   18c80:	beq	18d44 <__assert_fail@plt+0x77ec>
   18c84:	ldr	ip, [r6, #20]
   18c88:	add	r3, ip, r7
   18c8c:	ldr	r2, [r3, #4]
   18c90:	cmp	r2, #0
   18c94:	ble	18d44 <__assert_fail@plt+0x77ec>
   18c98:	mov	r9, #0
   18c9c:	mov	r5, r9
   18ca0:	mov	fp, #1
   18ca4:	add	r8, sp, #28
   18ca8:	b	18cfc <__assert_fail@plt+0x77a4>
   18cac:	cmp	r0, #0
   18cb0:	beq	18d6c <__assert_fail@plt+0x7814>
   18cb4:	ldm	r3, {r0, r1, r2}
   18cb8:	stm	r8, {r0, r1, r2}
   18cbc:	mov	r1, r8
   18cc0:	add	r0, sp, #16
   18cc4:	bl	18a34 <__assert_fail@plt+0x74dc>
   18cc8:	cmp	r0, #0
   18ccc:	bne	18d84 <__assert_fail@plt+0x782c>
   18cd0:	ldr	r1, [r6, #24]
   18cd4:	add	r4, r1, r4
   18cd8:	ldr	r3, [r4, #4]
   18cdc:	cmp	r3, #0
   18ce0:	beq	18d94 <__assert_fail@plt+0x783c>
   18ce4:	ldr	ip, [r6, #20]
   18ce8:	add	r3, ip, r7
   18cec:	add	r5, r5, #1
   18cf0:	ldr	r2, [r3, #4]
   18cf4:	cmp	r2, r5
   18cf8:	ble	18d24 <__assert_fail@plt+0x77cc>
   18cfc:	ldr	r3, [r3, #8]
   18d00:	ldr	r2, [r3, r5, lsl #2]
   18d04:	add	r4, r2, r2, lsl #1
   18d08:	lsl	r4, r4, #2
   18d0c:	add	r3, r1, r4
   18d10:	ldr	r0, [r3, #4]
   18d14:	cmn	r0, #1
   18d18:	bne	18cac <__assert_fail@plt+0x7754>
   18d1c:	mov	r9, fp
   18d20:	b	18ce8 <__assert_fail@plt+0x7790>
   18d24:	ldr	r3, [sp, #12]
   18d28:	eor	r3, r3, #1
   18d2c:	tst	r9, r3
   18d30:	addne	r7, r1, r7
   18d34:	movne	r3, #0
   18d38:	strne	r3, [r7, #4]
   18d3c:	addne	lr, sp, #16
   18d40:	bne	18d54 <__assert_fail@plt+0x77fc>
   18d44:	add	ip, r1, r7
   18d48:	add	lr, sp, #16
   18d4c:	ldm	lr, {r0, r1, r2}
   18d50:	stm	ip, {r0, r1, r2}
   18d54:	mov	r3, #0
   18d58:	ldm	lr, {r0, r1, r2}
   18d5c:	stm	sl, {r0, r1, r2}
   18d60:	mov	r0, r3
   18d64:	add	sp, sp, #44	; 0x2c
   18d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d6c:	mov	r3, #0
   18d70:	mov	r1, r6
   18d74:	mov	r0, r8
   18d78:	bl	18bbc <__assert_fail@plt+0x7664>
   18d7c:	cmp	r0, #0
   18d80:	beq	18cbc <__assert_fail@plt+0x7764>
   18d84:	mov	r3, r0
   18d88:	mov	r0, r3
   18d8c:	add	sp, sp, #44	; 0x2c
   18d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d94:	ldr	r0, [sp, #36]	; 0x24
   18d98:	bl	13908 <__assert_fail@plt+0x23b0>
   18d9c:	mov	r9, fp
   18da0:	ldr	r1, [r6, #24]
   18da4:	ldr	ip, [r6, #20]
   18da8:	b	18ce8 <__assert_fail@plt+0x7790>
   18dac:	ldr	r2, [pc, #68]	; 18df8 <__assert_fail@plt+0x78a0>
   18db0:	mov	r3, r4
   18db4:	and	r0, r2, r0, lsr #8
   18db8:	str	r0, [sp]
   18dbc:	mov	r2, r4
   18dc0:	mov	r1, r4
   18dc4:	mov	r0, r6
   18dc8:	bl	17044 <__assert_fail@plt+0x5aec>
   18dcc:	subs	r3, r0, #0
   18dd0:	bne	18d60 <__assert_fail@plt+0x7808>
   18dd4:	ldr	lr, [r6]
   18dd8:	ldr	r1, [r6, #24]
   18ddc:	add	lr, lr, r5
   18de0:	b	18c78 <__assert_fail@plt+0x7720>
   18de4:	mov	r3, #12
   18de8:	mov	r0, r3
   18dec:	add	sp, sp, #44	; 0x2c
   18df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18df4:	andeq	pc, r3, r0, lsl #30
   18df8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   18dfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e00:	mov	r8, r1
   18e04:	ldr	r1, [r1, #4]
   18e08:	sub	sp, sp, #28
   18e0c:	mov	r6, #0
   18e10:	mov	r7, r0
   18e14:	lsl	r0, r1, #2
   18e18:	mov	r5, r2
   18e1c:	mov	r4, r3
   18e20:	str	r1, [sp, #12]
   18e24:	str	r6, [sp, #16]
   18e28:	bl	24794 <__assert_fail@plt+0x1323c>
   18e2c:	cmp	r0, r6
   18e30:	str	r0, [sp, #20]
   18e34:	beq	18f20 <__assert_fail@plt+0x79c8>
   18e38:	ldr	r3, [r8, #4]
   18e3c:	add	r9, sp, #12
   18e40:	cmp	r3, r6
   18e44:	ble	18edc <__assert_fail@plt+0x7984>
   18e48:	ldr	r3, [r8, #8]
   18e4c:	ldr	r1, [r7, #24]
   18e50:	ldr	r2, [r3, r6, lsl #2]
   18e54:	add	r3, r2, r2, lsl #1
   18e58:	add	r1, r1, r3, lsl #2
   18e5c:	ldr	fp, [r1, #4]
   18e60:	cmp	fp, #0
   18e64:	ble	18efc <__assert_fail@plt+0x79a4>
   18e68:	ldr	ip, [r1, #8]
   18e6c:	ldr	sl, [r7]
   18e70:	sub	ip, ip, #4
   18e74:	mov	r3, #0
   18e78:	b	18e84 <__assert_fail@plt+0x792c>
   18e7c:	cmp	fp, r3
   18e80:	beq	18efc <__assert_fail@plt+0x79a4>
   18e84:	ldr	r0, [ip, #4]!
   18e88:	add	r3, r3, #1
   18e8c:	add	lr, sl, r0, lsl #3
   18e90:	ldrb	lr, [lr, #4]
   18e94:	cmp	r4, lr
   18e98:	bne	18e7c <__assert_fail@plt+0x7924>
   18e9c:	ldr	lr, [sl, r0, lsl #3]
   18ea0:	cmp	r5, lr
   18ea4:	bne	18e7c <__assert_fail@plt+0x7924>
   18ea8:	cmn	r0, #1
   18eac:	beq	18efc <__assert_fail@plt+0x79a4>
   18eb0:	str	r4, [sp]
   18eb4:	mov	r3, r5
   18eb8:	mov	r1, r9
   18ebc:	mov	r0, r7
   18ec0:	bl	17548 <__assert_fail@plt+0x5ff0>
   18ec4:	subs	sl, r0, #0
   18ec8:	bne	18f0c <__assert_fail@plt+0x79b4>
   18ecc:	ldr	r3, [r8, #4]
   18ed0:	add	r6, r6, #1
   18ed4:	cmp	r3, r6
   18ed8:	bgt	18e48 <__assert_fail@plt+0x78f0>
   18edc:	ldr	r0, [r8, #8]
   18ee0:	bl	13908 <__assert_fail@plt+0x23b0>
   18ee4:	ldm	r9, {r0, r1, r2}
   18ee8:	mov	sl, #0
   18eec:	stm	r8, {r0, r1, r2}
   18ef0:	mov	r0, sl
   18ef4:	add	sp, sp, #28
   18ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18efc:	mov	r0, r9
   18f00:	bl	18a34 <__assert_fail@plt+0x74dc>
   18f04:	subs	sl, r0, #0
   18f08:	beq	18ecc <__assert_fail@plt+0x7974>
   18f0c:	ldr	r0, [sp, #20]
   18f10:	bl	13908 <__assert_fail@plt+0x23b0>
   18f14:	mov	r0, sl
   18f18:	add	sp, sp, #28
   18f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f20:	mov	sl, #12
   18f24:	mov	r0, sl
   18f28:	add	sp, sp, #28
   18f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f34:	mov	r5, #0
   18f38:	ldr	r6, [r0, #108]	; 0x6c
   18f3c:	sub	sp, sp, #44	; 0x2c
   18f40:	mov	r4, r6
   18f44:	cmp	r5, r4
   18f48:	bge	18fa4 <__assert_fail@plt+0x7a4c>
   18f4c:	add	lr, r5, r4
   18f50:	ldr	r7, [r0, #116]	; 0x74
   18f54:	add	lr, lr, lr, lsr #31
   18f58:	asr	lr, lr, #1
   18f5c:	add	ip, lr, lr, lsl #1
   18f60:	add	ip, r7, ip, lsl #3
   18f64:	ldr	ip, [ip, #4]
   18f68:	cmp	r2, ip
   18f6c:	ble	18f94 <__assert_fail@plt+0x7a3c>
   18f70:	b	191c4 <__assert_fail@plt+0x7c6c>
   18f74:	asr	ip, ip, #1
   18f78:	mov	r8, ip
   18f7c:	add	r4, ip, ip, lsl #1
   18f80:	add	r4, r7, r4, lsl #3
   18f84:	ldr	r4, [r4, #4]
   18f88:	cmp	r2, r4
   18f8c:	bgt	191cc <__assert_fail@plt+0x7c74>
   18f90:	mov	lr, ip
   18f94:	add	ip, r5, lr
   18f98:	cmp	r5, lr
   18f9c:	add	ip, ip, ip, lsr #31
   18fa0:	blt	18f74 <__assert_fail@plt+0x7a1c>
   18fa4:	cmp	r6, r5
   18fa8:	ble	191b8 <__assert_fail@plt+0x7c60>
   18fac:	add	ip, r5, r5, lsl #1
   18fb0:	ldr	r4, [r0, #116]	; 0x74
   18fb4:	lsl	ip, ip, #3
   18fb8:	add	lr, r4, ip
   18fbc:	cmn	r5, #1
   18fc0:	ldr	lr, [lr, #4]
   18fc4:	movne	r5, #0
   18fc8:	moveq	r5, #1
   18fcc:	cmp	lr, r2
   18fd0:	orrne	r5, r5, #1
   18fd4:	cmp	r5, #0
   18fd8:	bne	191b8 <__assert_fail@plt+0x7c60>
   18fdc:	ldr	fp, [r0, #84]	; 0x54
   18fe0:	mov	r8, r1
   18fe4:	mov	r9, r0
   18fe8:	add	r7, r1, #8
   18fec:	str	r3, [sp, #16]
   18ff0:	add	r3, ip, #24
   18ff4:	str	r2, [sp, #8]
   18ff8:	str	r3, [sp, #12]
   18ffc:	str	r5, [sp, #20]
   19000:	ldr	r3, [sp, #12]
   19004:	add	r4, r4, r3
   19008:	b	19054 <__assert_fail@plt+0x7afc>
   1900c:	ldr	r3, [r9, #100]	; 0x64
   19010:	ldr	r2, [fp, #12]
   19014:	ldr	r3, [r3, r5, lsl #2]
   19018:	ldr	sl, [r2, sl, lsl #2]
   1901c:	cmp	r3, #0
   19020:	beq	191d8 <__assert_fail@plt+0x7c80>
   19024:	add	r1, r3, #12
   19028:	ldr	r0, [r3, #8]
   1902c:	mov	r2, sl
   19030:	str	r3, [sp, #4]
   19034:	bl	174b8 <__assert_fail@plt+0x5f60>
   19038:	ldr	r3, [sp, #4]
   1903c:	cmp	r0, #0
   19040:	beq	19138 <__assert_fail@plt+0x7be0>
   19044:	add	r4, r4, #24
   19048:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1904c:	cmp	r3, #0
   19050:	beq	191b8 <__assert_fail@plt+0x7c60>
   19054:	ldr	sl, [r4, #-24]	; 0xffffffe8
   19058:	ldr	r6, [r8, #4]
   1905c:	mov	r2, sl
   19060:	mov	r0, r6
   19064:	mov	r1, r7
   19068:	bl	174b8 <__assert_fail@plt+0x5f60>
   1906c:	cmp	r0, #0
   19070:	beq	19044 <__assert_fail@plt+0x7aec>
   19074:	ldr	r3, [sp, #8]
   19078:	ldr	r5, [r4, #-12]
   1907c:	ldr	r2, [r4, #-16]
   19080:	add	r5, r3, r5
   19084:	sub	r5, r5, r2
   19088:	cmp	r3, r5
   1908c:	bne	1900c <__assert_fail@plt+0x7ab4>
   19090:	ldr	r2, [fp, #20]
   19094:	add	sl, sl, sl, lsl #1
   19098:	mov	r0, r6
   1909c:	add	sl, r2, sl, lsl #2
   190a0:	mov	r1, r7
   190a4:	ldr	r3, [sl, #8]
   190a8:	ldr	r5, [r3]
   190ac:	mov	r2, r5
   190b0:	bl	174b8 <__assert_fail@plt+0x5f60>
   190b4:	cmp	r0, #0
   190b8:	bne	19044 <__assert_fail@plt+0x7aec>
   190bc:	mov	r3, #1
   190c0:	mov	r0, #4
   190c4:	str	r3, [sp, #28]
   190c8:	str	r3, [sp, #32]
   190cc:	bl	24794 <__assert_fail@plt+0x1323c>
   190d0:	ldr	r3, [sp, #80]	; 0x50
   190d4:	ldr	r2, [sp, #16]
   190d8:	add	r1, sp, #28
   190dc:	cmp	r0, #0
   190e0:	strne	r5, [r0]
   190e4:	ldrne	ip, [sp, #20]
   190e8:	streq	r0, [sp, #32]
   190ec:	streq	r0, [sp, #28]
   190f0:	moveq	ip, #12
   190f4:	str	r0, [sp, #36]	; 0x24
   190f8:	mov	r0, fp
   190fc:	str	ip, [sp, #24]
   19100:	bl	18dfc <__assert_fail@plt+0x78a4>
   19104:	add	r1, sp, #28
   19108:	mov	r4, r0
   1910c:	mov	r0, r8
   19110:	bl	18a34 <__assert_fail@plt+0x74dc>
   19114:	mov	r5, r0
   19118:	ldr	r0, [sp, #36]	; 0x24
   1911c:	bl	13908 <__assert_fail@plt+0x23b0>
   19120:	ldr	r0, [sp, #24]
   19124:	orr	r3, r4, r5
   19128:	orrs	r3, r3, r0
   1912c:	bne	1922c <__assert_fail@plt+0x7cd4>
   19130:	ldr	r4, [r9, #116]	; 0x74
   19134:	b	19000 <__assert_fail@plt+0x7aa8>
   19138:	add	r1, r3, #4
   1913c:	add	r0, sp, #28
   19140:	bl	17fc4 <__assert_fail@plt+0x6a6c>
   19144:	mov	r1, sl
   19148:	str	r0, [sp, #24]
   1914c:	add	r0, sp, #28
   19150:	bl	16f28 <__assert_fail@plt+0x59d0>
   19154:	ldr	r3, [sp, #24]
   19158:	eor	r0, r0, #1
   1915c:	cmp	r3, #0
   19160:	orrne	r0, r0, #1
   19164:	tst	r0, #255	; 0xff
   19168:	bne	1920c <__assert_fail@plt+0x7cb4>
   1916c:	add	r2, sp, #28
   19170:	mov	r1, fp
   19174:	add	r0, sp, #24
   19178:	ldr	sl, [r9, #100]	; 0x64
   1917c:	bl	184b4 <__assert_fail@plt+0x6f5c>
   19180:	str	r0, [sl, r5, lsl #2]
   19184:	ldr	r0, [sp, #36]	; 0x24
   19188:	bl	13908 <__assert_fail@plt+0x23b0>
   1918c:	ldr	r3, [r9, #100]	; 0x64
   19190:	ldr	r3, [r3, r5, lsl #2]
   19194:	cmp	r3, #0
   19198:	bne	19044 <__assert_fail@plt+0x7aec>
   1919c:	ldr	r0, [sp, #24]
   191a0:	cmp	r0, #0
   191a4:	bne	191bc <__assert_fail@plt+0x7c64>
   191a8:	add	r4, r4, #24
   191ac:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   191b0:	cmp	r3, #0
   191b4:	bne	19054 <__assert_fail@plt+0x7afc>
   191b8:	mov	r0, #0
   191bc:	add	sp, sp, #44	; 0x2c
   191c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191c4:	mov	r8, lr
   191c8:	mov	lr, r4
   191cc:	add	r5, r8, #1
   191d0:	mov	r4, lr
   191d4:	b	18f44 <__assert_fail@plt+0x79ec>
   191d8:	str	r3, [sp, #4]
   191dc:	mov	r0, #4
   191e0:	mov	r3, #1
   191e4:	str	r3, [sp, #28]
   191e8:	str	r3, [sp, #32]
   191ec:	bl	24794 <__assert_fail@plt+0x1323c>
   191f0:	cmp	r0, #0
   191f4:	str	r0, [sp, #36]	; 0x24
   191f8:	beq	19220 <__assert_fail@plt+0x7cc8>
   191fc:	ldr	r3, [sp, #4]
   19200:	str	sl, [r0]
   19204:	str	r3, [sp, #24]
   19208:	b	1916c <__assert_fail@plt+0x7c14>
   1920c:	ldr	r0, [sp, #36]	; 0x24
   19210:	bl	13908 <__assert_fail@plt+0x23b0>
   19214:	ldr	r0, [sp, #24]
   19218:	cmp	r0, #0
   1921c:	bne	191bc <__assert_fail@plt+0x7c64>
   19220:	mov	r0, #12
   19224:	add	sp, sp, #44	; 0x2c
   19228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1922c:	cmp	r0, #0
   19230:	bne	191bc <__assert_fail@plt+0x7c64>
   19234:	cmp	r4, #0
   19238:	movne	r0, r4
   1923c:	moveq	r0, r5
   19240:	b	191bc <__assert_fail@plt+0x7c64>
   19244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19248:	sub	sp, sp, #14400	; 0x3840
   1924c:	sub	sp, sp, #28
   19250:	mov	r4, #0
   19254:	mov	r5, r1
   19258:	str	r1, [sp, #8]
   1925c:	str	r4, [r1, #44]	; 0x2c
   19260:	str	r4, [r1, #48]	; 0x30
   19264:	mov	r8, r0
   19268:	mov	r1, r4
   1926c:	add	r0, sp, #88	; 0x58
   19270:	mov	r2, #32
   19274:	bl	1145c <memset@plt>
   19278:	ldr	r1, [r5, #8]
   1927c:	cmp	r1, r4
   19280:	ble	19bd8 <__assert_fail@plt+0x8680>
   19284:	add	r2, sp, #6208	; 0x1840
   19288:	add	r2, r2, #24
   1928c:	sub	r2, r2, #4
   19290:	str	r2, [sp, #32]
   19294:	str	r8, [sp, #28]
   19298:	add	r2, r8, #128	; 0x80
   1929c:	mov	r8, r4
   192a0:	str	r4, [sp, #16]
   192a4:	str	r2, [sp, #36]	; 0x24
   192a8:	ldr	r3, [sp, #8]
   192ac:	ldr	r0, [sp, #16]
   192b0:	ldr	r2, [r3, #12]
   192b4:	ldr	r3, [sp, #28]
   192b8:	lsl	ip, r0, #2
   192bc:	ldr	r2, [r2, r0, lsl #2]
   192c0:	ldr	r3, [r3]
   192c4:	str	ip, [sp, #12]
   192c8:	add	r0, r3, r2, lsl #3
   192cc:	str	r0, [sp, #20]
   192d0:	ldrb	ip, [r0, #4]
   192d4:	ldr	r4, [r0, #4]
   192d8:	ldr	r0, [pc, #2548]	; 19cd4 <__assert_fail@plt+0x877c>
   192dc:	cmp	ip, #1
   192e0:	str	ip, [sp, #4]
   192e4:	and	r4, r0, r4, lsr #8
   192e8:	beq	1945c <__assert_fail@plt+0x7f04>
   192ec:	ldr	r0, [sp, #4]
   192f0:	cmp	r0, #3
   192f4:	beq	1973c <__assert_fail@plt+0x81e4>
   192f8:	ldr	r3, [sp, #4]
   192fc:	cmp	r3, #5
   19300:	beq	19768 <__assert_fail@plt+0x8210>
   19304:	ldr	r3, [sp, #4]
   19308:	cmp	r3, #7
   1930c:	beq	19a20 <__assert_fail@plt+0x84c8>
   19310:	ldr	r3, [sp, #16]
   19314:	add	r3, r3, #1
   19318:	cmp	r3, r1
   1931c:	str	r3, [sp, #16]
   19320:	blt	192a8 <__assert_fail@plt+0x7d50>
   19324:	str	r8, [sp, #4]
   19328:	ldr	r3, [sp, #4]
   1932c:	ldr	r8, [sp, #28]
   19330:	cmp	r3, #0
   19334:	ble	19bd4 <__assert_fail@plt+0x867c>
   19338:	ldr	r3, [sp, #4]
   1933c:	add	r6, sp, #2128	; 0x850
   19340:	add	r3, r3, #1
   19344:	add	r6, r6, #8
   19348:	mov	r4, #0
   1934c:	lsl	r0, r3, #2
   19350:	str	r3, [r6, #-2092]	; 0xfffff7d4
   19354:	str	r4, [r6, #-2088]	; 0xfffff7d8
   19358:	bl	24794 <__assert_fail@plt+0x1323c>
   1935c:	cmp	r0, r4
   19360:	str	r0, [r6, #-2084]	; 0xfffff7dc
   19364:	beq	19ad4 <__assert_fail@plt+0x857c>
   19368:	add	r3, sp, #3152	; 0xc50
   1936c:	add	r3, r3, #8
   19370:	mov	r1, r4
   19374:	add	r0, sp, #56	; 0x38
   19378:	mov	r2, #32
   1937c:	mov	r5, r3
   19380:	str	r4, [sp, #20]
   19384:	str	r3, [sp, #24]
   19388:	str	r4, [r6, #-2096]	; 0xfffff7d0
   1938c:	bl	1145c <memset@plt>
   19390:	add	r3, sp, #6208	; 0x1840
   19394:	add	r3, r3, #24
   19398:	add	sl, sp, #1104	; 0x450
   1939c:	mov	r9, r4
   193a0:	mov	fp, r4
   193a4:	add	sl, sl, #8
   193a8:	mov	r4, r5
   193ac:	sub	r5, r3, #4
   193b0:	add	r3, sp, #84	; 0x54
   193b4:	str	r3, [sp, #12]
   193b8:	add	r3, sp, #40	; 0x28
   193bc:	str	r3, [sp, #16]
   193c0:	ldr	r2, [r4, #4]
   193c4:	str	r9, [r6, #-2088]	; 0xfffff7d8
   193c8:	cmp	r2, #0
   193cc:	movgt	r7, #0
   193d0:	bgt	193e8 <__assert_fail@plt+0x7e90>
   193d4:	b	1985c <__assert_fail@plt+0x8304>
   193d8:	ldr	r2, [r4, #4]
   193dc:	add	r7, r7, #1
   193e0:	cmp	r2, r7
   193e4:	ble	1985c <__assert_fail@plt+0x8304>
   193e8:	ldr	r1, [r4, #8]
   193ec:	ldr	r3, [r8, #12]
   193f0:	add	r0, sp, #44	; 0x2c
   193f4:	ldr	r1, [r1, r7, lsl #2]
   193f8:	ldr	r1, [r3, r1, lsl #2]
   193fc:	cmn	r1, #1
   19400:	add	r1, r1, r1, lsl #1
   19404:	beq	193dc <__assert_fail@plt+0x7e84>
   19408:	ldr	r3, [r8, #24]
   1940c:	add	r1, r3, r1, lsl #2
   19410:	bl	18a34 <__assert_fail@plt+0x74dc>
   19414:	cmp	r0, #0
   19418:	str	r0, [r6, #-2096]	; 0xfffff7d0
   1941c:	beq	193d8 <__assert_fail@plt+0x7e80>
   19420:	ldr	r0, [r6, #-2084]	; 0xfffff7dc
   19424:	bl	13908 <__assert_fail@plt+0x23b0>
   19428:	ldr	r5, [sp, #24]
   1942c:	ldr	r6, [sp, #4]
   19430:	mov	r4, #0
   19434:	ldr	r0, [r5, #8]
   19438:	add	r4, r4, #1
   1943c:	bl	13908 <__assert_fail@plt+0x23b0>
   19440:	cmp	r4, r6
   19444:	add	r5, r5, #12
   19448:	bne	19434 <__assert_fail@plt+0x7edc>
   1944c:	mov	r0, #0
   19450:	add	sp, sp, #14400	; 0x3840
   19454:	add	sp, sp, #28
   19458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1945c:	ldrb	r3, [r3, r2, lsl #3]
   19460:	add	r2, sp, #88	; 0x58
   19464:	and	r1, r3, #31
   19468:	asr	r3, r3, #5
   1946c:	ldr	r2, [r2, r3, lsl #2]
   19470:	orr	r2, r2, ip, lsl r1
   19474:	add	r1, sp, #88	; 0x58
   19478:	str	r2, [r1, r3, lsl #2]
   1947c:	cmp	r4, #0
   19480:	beq	19568 <__assert_fail@plt+0x8010>
   19484:	tst	r4, #32
   19488:	bne	197d0 <__assert_fail@plt+0x8278>
   1948c:	tst	r4, #128	; 0x80
   19490:	bne	19800 <__assert_fail@plt+0x82a8>
   19494:	tst	r4, #4
   19498:	beq	19500 <__assert_fail@plt+0x7fa8>
   1949c:	ldr	r3, [sp, #4]
   194a0:	cmp	r3, #1
   194a4:	beq	19ac0 <__assert_fail@plt+0x8568>
   194a8:	ldr	r2, [sp, #28]
   194ac:	ldr	r3, [r2, #92]	; 0x5c
   194b0:	cmp	r3, #1
   194b4:	ble	19aec <__assert_fail@plt+0x8594>
   194b8:	ldr	lr, [r2, #60]	; 0x3c
   194bc:	ldr	r6, [sp, #36]	; 0x24
   194c0:	add	r0, sp, #88	; 0x58
   194c4:	sub	lr, lr, #4
   194c8:	add	r1, r2, #96	; 0x60
   194cc:	mov	ip, #0
   194d0:	ldr	r3, [lr, #4]!
   194d4:	ldr	r5, [r1], #4
   194d8:	ldr	r2, [r0]
   194dc:	mvn	r3, r3
   194e0:	orr	r3, r3, r5
   194e4:	and	r3, r3, r2
   194e8:	cmp	r6, r1
   194ec:	str	r3, [r0], #4
   194f0:	orr	ip, ip, r3
   194f4:	bne	194d0 <__assert_fail@plt+0x7f78>
   194f8:	cmp	ip, #0
   194fc:	beq	196c4 <__assert_fail@plt+0x816c>
   19500:	tst	r4, #8
   19504:	beq	19568 <__assert_fail@plt+0x8010>
   19508:	ldr	r3, [sp, #4]
   1950c:	cmp	r3, #1
   19510:	beq	19814 <__assert_fail@plt+0x82bc>
   19514:	ldr	r2, [sp, #28]
   19518:	ldr	r3, [r2, #92]	; 0x5c
   1951c:	cmp	r3, #1
   19520:	ble	19828 <__assert_fail@plt+0x82d0>
   19524:	ldr	lr, [r2, #60]	; 0x3c
   19528:	ldr	r5, [sp, #36]	; 0x24
   1952c:	add	ip, sp, #88	; 0x58
   19530:	sub	lr, lr, #4
   19534:	add	r0, r2, #96	; 0x60
   19538:	mov	r1, #0
   1953c:	ldr	r2, [r0], #4
   19540:	ldr	r4, [lr, #4]!
   19544:	ldr	r3, [ip]
   19548:	and	r2, r2, r4
   1954c:	bic	r3, r3, r2
   19550:	cmp	r5, r0
   19554:	str	r3, [ip], #4
   19558:	orr	r1, r1, r3
   1955c:	bne	1953c <__assert_fail@plt+0x7fe4>
   19560:	cmp	r1, #0
   19564:	beq	196c4 <__assert_fail@plt+0x816c>
   19568:	cmp	r8, #0
   1956c:	movle	r6, #0
   19570:	ble	196bc <__assert_fail@plt+0x8164>
   19574:	add	r3, sp, #3152	; 0xc50
   19578:	add	r3, r3, #8
   1957c:	ldr	ip, [sp, #32]
   19580:	mov	r7, r3
   19584:	mov	r6, #0
   19588:	str	r3, [sp, #24]
   1958c:	ldr	r3, [sp, #4]
   19590:	cmp	r3, #1
   19594:	beq	196d0 <__assert_fail@plt+0x8178>
   19598:	add	r0, sp, #88	; 0x58
   1959c:	add	r9, sp, #1104	; 0x450
   195a0:	add	r9, r9, #8
   195a4:	add	r4, ip, #32
   195a8:	mov	r1, ip
   195ac:	mov	r5, r0
   195b0:	mov	lr, #0
   195b4:	ldr	r2, [r1, #4]!
   195b8:	ldr	r3, [r5], #4
   195bc:	cmp	r1, r4
   195c0:	and	r3, r3, r2
   195c4:	str	r3, [r9], #4
   195c8:	orr	lr, lr, r3
   195cc:	bne	195b4 <__assert_fail@plt+0x805c>
   195d0:	cmp	lr, #0
   195d4:	beq	196a8 <__assert_fail@plt+0x8150>
   195d8:	mov	r5, #0
   195dc:	add	fp, sp, #2128	; 0x850
   195e0:	mov	sl, r5
   195e4:	add	fp, fp, #8
   195e8:	mov	lr, ip
   195ec:	ldr	r3, [r0]
   195f0:	ldr	r9, [lr, #4]!
   195f4:	bic	r2, r9, r3
   195f8:	cmp	r1, lr
   195fc:	bic	r3, r3, r9
   19600:	str	r2, [fp], #4
   19604:	orr	sl, sl, r2
   19608:	str	r3, [r0], #4
   1960c:	orr	r5, r5, r3
   19610:	bne	195ec <__assert_fail@plt+0x8094>
   19614:	cmp	sl, #0
   19618:	beq	19680 <__assert_fail@plt+0x8128>
   1961c:	add	sl, sp, #2128	; 0x850
   19620:	add	sl, sl, #8
   19624:	add	lr, sp, #14400	; 0x3840
   19628:	ldm	sl!, {r0, r1, r2, r3}
   1962c:	add	lr, lr, #24
   19630:	add	lr, lr, r8, lsl #5
   19634:	sub	lr, lr, #8192	; 0x2000
   19638:	add	r9, sp, #1104	; 0x450
   1963c:	stmia	lr!, {r0, r1, r2, r3}
   19640:	add	r9, r9, #8
   19644:	ldm	sl, {r0, r1, r2, r3}
   19648:	add	ip, ip, #4
   1964c:	add	fp, r8, r8, lsl #1
   19650:	stm	lr, {r0, r1, r2, r3}
   19654:	ldm	r9!, {r0, r1, r2, r3}
   19658:	stmia	ip!, {r0, r1, r2, r3}
   1965c:	ldm	r9, {r0, r1, r2, r3}
   19660:	stm	ip, {r0, r1, r2, r3}
   19664:	mov	r1, r7
   19668:	ldr	r3, [sp, #24]
   1966c:	add	r0, r3, fp, lsl #2
   19670:	bl	17fc4 <__assert_fail@plt+0x6a6c>
   19674:	cmp	r0, #0
   19678:	bne	19710 <__assert_fail@plt+0x81b8>
   1967c:	add	r8, r8, #1
   19680:	ldr	r3, [sp, #8]
   19684:	ldr	r2, [sp, #12]
   19688:	mov	r0, r7
   1968c:	ldr	r3, [r3, #12]
   19690:	ldr	r1, [r3, r2]
   19694:	bl	16f28 <__assert_fail@plt+0x59d0>
   19698:	cmp	r0, #0
   1969c:	beq	19710 <__assert_fail@plt+0x81b8>
   196a0:	cmp	r5, #0
   196a4:	beq	196bc <__assert_fail@plt+0x8164>
   196a8:	add	r6, r6, #1
   196ac:	cmp	r6, r8
   196b0:	mov	ip, r4
   196b4:	add	r7, r7, #12
   196b8:	blt	1958c <__assert_fail@plt+0x8034>
   196bc:	cmp	r8, r6
   196c0:	beq	19b30 <__assert_fail@plt+0x85d8>
   196c4:	ldr	r3, [sp, #8]
   196c8:	ldr	r1, [r3, #8]
   196cc:	b	19310 <__assert_fail@plt+0x7db8>
   196d0:	ldr	r3, [sp, #20]
   196d4:	ldrb	r1, [r3]
   196d8:	lsl	r3, r6, #5
   196dc:	and	r2, r1, #31
   196e0:	asr	r1, r1, #5
   196e4:	add	r3, r3, r1, lsl #2
   196e8:	add	r1, sp, #14400	; 0x3840
   196ec:	add	r1, r1, #24
   196f0:	add	r3, r1, r3
   196f4:	sub	r3, r3, #8192	; 0x2000
   196f8:	ldr	r3, [r3]
   196fc:	lsr	r2, r3, r2
   19700:	tst	r2, #1
   19704:	addeq	r4, ip, #32
   19708:	beq	196a8 <__assert_fail@plt+0x8150>
   1970c:	b	19598 <__assert_fail@plt+0x8040>
   19710:	str	r8, [sp, #4]
   19714:	ldr	r5, [sp, #24]
   19718:	ldr	r6, [sp, #4]
   1971c:	mov	r4, #0
   19720:	ldr	r0, [r5, #8]
   19724:	add	r4, r4, #1
   19728:	bl	13908 <__assert_fail@plt+0x23b0>
   1972c:	cmp	r4, r6
   19730:	add	r5, r5, #12
   19734:	bne	19720 <__assert_fail@plt+0x81c8>
   19738:	b	1944c <__assert_fail@plt+0x7ef4>
   1973c:	ldr	r0, [r3, r2, lsl #3]
   19740:	add	r1, sp, #88	; 0x58
   19744:	sub	r2, r0, #4
   19748:	add	r0, r0, #28
   1974c:	ldr	r3, [r1]
   19750:	ldr	ip, [r2, #4]!
   19754:	orr	r3, r3, ip
   19758:	cmp	r2, r0
   1975c:	str	r3, [r1], #4
   19760:	bne	1974c <__assert_fail@plt+0x81f4>
   19764:	b	1947c <__assert_fail@plt+0x7f24>
   19768:	ldr	r2, [sp, #28]
   1976c:	ldr	r3, [r2, #92]	; 0x5c
   19770:	cmp	r3, #1
   19774:	ble	19bc0 <__assert_fail@plt+0x8668>
   19778:	ldr	r0, [r2, #60]	; 0x3c
   1977c:	add	r1, sp, #88	; 0x58
   19780:	sub	r2, r0, #4
   19784:	add	r0, r0, #28
   19788:	ldr	r3, [r1]
   1978c:	ldr	ip, [r2, #4]!
   19790:	orr	r3, r3, ip
   19794:	cmp	r2, r0
   19798:	str	r3, [r1], #4
   1979c:	bne	19788 <__assert_fail@plt+0x8230>
   197a0:	ldr	r3, [sp, #28]
   197a4:	ldr	r3, [r3, #128]	; 0x80
   197a8:	tst	r3, #64	; 0x40
   197ac:	ldreq	r2, [sp, #88]	; 0x58
   197b0:	biceq	r2, r2, #1024	; 0x400
   197b4:	streq	r2, [sp, #88]	; 0x58
   197b8:	tst	r3, #128	; 0x80
   197bc:	beq	1947c <__assert_fail@plt+0x7f24>
   197c0:	ldr	r3, [sp, #88]	; 0x58
   197c4:	bic	r3, r3, #1
   197c8:	str	r3, [sp, #88]	; 0x58
   197cc:	b	1947c <__assert_fail@plt+0x7f24>
   197d0:	ldr	r5, [sp, #88]	; 0x58
   197d4:	mov	r2, #32
   197d8:	mov	r1, #0
   197dc:	and	r5, r5, #1024	; 0x400
   197e0:	add	r0, sp, #88	; 0x58
   197e4:	bl	1145c <memset@plt>
   197e8:	cmp	r5, #0
   197ec:	beq	196c4 <__assert_fail@plt+0x816c>
   197f0:	mov	r3, #1024	; 0x400
   197f4:	tst	r4, #128	; 0x80
   197f8:	str	r3, [sp, #88]	; 0x58
   197fc:	beq	19494 <__assert_fail@plt+0x7f3c>
   19800:	mov	r2, #32
   19804:	mov	r1, #0
   19808:	add	r0, sp, #88	; 0x58
   1980c:	bl	1145c <memset@plt>
   19810:	b	196c4 <__assert_fail@plt+0x816c>
   19814:	ldr	r3, [sp, #20]
   19818:	ldrb	r3, [r3, #6]
   1981c:	tst	r3, #64	; 0x40
   19820:	beq	19514 <__assert_fail@plt+0x7fbc>
   19824:	b	19800 <__assert_fail@plt+0x82a8>
   19828:	ldr	r3, [sp, #28]
   1982c:	ldr	lr, [sp, #36]	; 0x24
   19830:	add	ip, sp, #88	; 0x58
   19834:	add	r0, r3, #96	; 0x60
   19838:	mov	r1, #0
   1983c:	ldr	r2, [r0], #4
   19840:	ldr	r3, [ip]
   19844:	cmp	lr, r0
   19848:	bic	r3, r3, r2
   1984c:	str	r3, [ip], #4
   19850:	orr	r1, r1, r3
   19854:	bne	1983c <__assert_fail@plt+0x82e4>
   19858:	b	19560 <__assert_fail@plt+0x8008>
   1985c:	mov	r3, r9
   19860:	add	r2, sp, #44	; 0x2c
   19864:	mov	r1, r8
   19868:	ldr	r0, [sp, #16]
   1986c:	bl	18188 <__assert_fail@plt+0x6c30>
   19870:	ldr	r3, [sp, #12]
   19874:	cmp	r0, #0
   19878:	str	r0, [r3, #4]!
   1987c:	mov	r7, r0
   19880:	str	r3, [sp, #12]
   19884:	beq	19b20 <__assert_fail@plt+0x85c8>
   19888:	ldrsb	r3, [r7, #52]	; 0x34
   1988c:	cmp	r3, #0
   19890:	strge	r7, [sl]
   19894:	strge	r7, [r6, fp, lsl #2]
   19898:	blt	19a54 <__assert_fail@plt+0x84fc>
   1989c:	add	r7, sp, #56	; 0x38
   198a0:	add	r0, r5, #32
   198a4:	mov	r1, r7
   198a8:	ldr	r3, [r1]
   198ac:	ldr	r2, [r5, #4]!
   198b0:	orr	r3, r3, r2
   198b4:	cmp	r0, r5
   198b8:	str	r3, [r1], #4
   198bc:	bne	198a8 <__assert_fail@plt+0x8350>
   198c0:	ldr	r3, [sp, #4]
   198c4:	add	fp, fp, #1
   198c8:	cmp	fp, r3
   198cc:	add	r4, r4, #12
   198d0:	add	sl, sl, #4
   198d4:	mov	r5, r0
   198d8:	bne	193c0 <__assert_fail@plt+0x7e68>
   198dc:	ldr	r3, [sp, #20]
   198e0:	cmp	r3, #0
   198e4:	bne	19c28 <__assert_fail@plt+0x86d0>
   198e8:	mov	r1, #256	; 0x100
   198ec:	mov	r0, #4
   198f0:	bl	2474c <__assert_fail@plt+0x131f4>
   198f4:	ldr	r3, [sp, #8]
   198f8:	cmp	r0, #0
   198fc:	str	r0, [r3, #44]	; 0x2c
   19900:	beq	19420 <__assert_fail@plt+0x7ec8>
   19904:	add	ip, sp, #6208	; 0x1840
   19908:	add	r9, r8, #96	; 0x60
   1990c:	mov	r5, r0
   19910:	add	ip, ip, #24
   19914:	add	sl, r0, #1024	; 0x400
   19918:	ldr	r1, [r7], #4
   1991c:	cmp	r1, #0
   19920:	movne	lr, r5
   19924:	movne	r2, #1
   19928:	bne	19940 <__assert_fail@plt+0x83e8>
   1992c:	b	1998c <__assert_fail@plt+0x8434>
   19930:	lsrs	r1, r1, #1
   19934:	lsl	r2, r2, #1
   19938:	add	lr, lr, #4
   1993c:	beq	1998c <__assert_fail@plt+0x8434>
   19940:	tst	r1, #1
   19944:	beq	19930 <__assert_fail@plt+0x83d8>
   19948:	ldr	r3, [ip]
   1994c:	ands	r3, r2, r3
   19950:	bne	19c20 <__assert_fail@plt+0x86c8>
   19954:	add	r3, r3, #1
   19958:	ldr	r4, [ip, r3, lsl #5]
   1995c:	tst	r2, r4
   19960:	beq	19954 <__assert_fail@plt+0x83fc>
   19964:	ldr	r4, [r9]
   19968:	add	r3, r6, r3, lsl #2
   1996c:	tst	r2, r4
   19970:	add	lr, lr, #4
   19974:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   19978:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   1997c:	lsrs	r1, r1, #1
   19980:	str	r3, [lr, #-4]
   19984:	lsl	r2, r2, #1
   19988:	bne	19940 <__assert_fail@plt+0x83e8>
   1998c:	add	r5, r5, #128	; 0x80
   19990:	cmp	sl, r5
   19994:	add	r9, r9, #4
   19998:	add	ip, ip, #4
   1999c:	bne	19918 <__assert_fail@plt+0x83c0>
   199a0:	ldr	r3, [r6, #-2080]	; 0xfffff7e0
   199a4:	tst	r3, #1024	; 0x400
   199a8:	beq	199e8 <__assert_fail@plt+0x8490>
   199ac:	mov	r3, #0
   199b0:	b	199c0 <__assert_fail@plt+0x8468>
   199b4:	add	r3, r3, #1
   199b8:	cmp	fp, r3
   199bc:	beq	199e8 <__assert_fail@plt+0x8490>
   199c0:	add	r2, sp, #6208	; 0x1840
   199c4:	add	r2, r2, #24
   199c8:	ldr	r2, [r2, r3, lsl #5]
   199cc:	tst	r2, #1024	; 0x400
   199d0:	beq	199b4 <__assert_fail@plt+0x845c>
   199d4:	ldr	r2, [sp, #20]
   199d8:	ldr	r3, [r6, r3, lsl #2]
   199dc:	cmp	r2, #0
   199e0:	str	r3, [r0, #40]	; 0x28
   199e4:	strne	r3, [r0, #1064]	; 0x428
   199e8:	ldr	r0, [r6, #-2084]	; 0xfffff7dc
   199ec:	add	r8, fp, fp, lsl #1
   199f0:	bl	13908 <__assert_fail@plt+0x23b0>
   199f4:	ldr	r5, [sp, #24]
   199f8:	mov	r4, #0
   199fc:	lsl	r8, r8, #2
   19a00:	add	r3, r5, r4
   19a04:	add	r4, r4, #12
   19a08:	ldr	r0, [r3, #8]
   19a0c:	bl	13908 <__assert_fail@plt+0x23b0>
   19a10:	cmp	r8, r4
   19a14:	bne	19a00 <__assert_fail@plt+0x84a8>
   19a18:	mov	r0, #1
   19a1c:	b	19450 <__assert_fail@plt+0x7ef8>
   19a20:	ldr	r3, [sp, #28]
   19a24:	ldr	r2, [r3, #128]	; 0x80
   19a28:	mvn	r3, #0
   19a2c:	tst	r2, #64	; 0x40
   19a30:	str	r3, [sp, #88]	; 0x58
   19a34:	str	r3, [sp, #92]	; 0x5c
   19a38:	str	r3, [sp, #96]	; 0x60
   19a3c:	str	r3, [sp, #100]	; 0x64
   19a40:	biceq	r3, r3, #1024	; 0x400
   19a44:	streq	r3, [sp, #88]	; 0x58
   19a48:	tst	r2, #128	; 0x80
   19a4c:	beq	1947c <__assert_fail@plt+0x7f24>
   19a50:	b	197c0 <__assert_fail@plt+0x8268>
   19a54:	mov	r3, #1
   19a58:	add	r2, sp, #44	; 0x2c
   19a5c:	mov	r1, r8
   19a60:	ldr	r0, [sp, #16]
   19a64:	bl	18188 <__assert_fail@plt+0x6c30>
   19a68:	cmp	r0, #0
   19a6c:	str	r0, [sl]
   19a70:	beq	19c10 <__assert_fail@plt+0x86b8>
   19a74:	cmp	r7, r0
   19a78:	beq	19a90 <__assert_fail@plt+0x8538>
   19a7c:	ldr	r3, [r8, #92]	; 0x5c
   19a80:	ldr	r2, [sp, #20]
   19a84:	cmp	r3, #1
   19a88:	movgt	r2, #1
   19a8c:	str	r2, [sp, #20]
   19a90:	mov	r3, #2
   19a94:	add	r2, sp, #44	; 0x2c
   19a98:	mov	r1, r8
   19a9c:	ldr	r0, [sp, #16]
   19aa0:	bl	18188 <__assert_fail@plt+0x6c30>
   19aa4:	cmp	r0, #0
   19aa8:	str	r0, [r6, fp, lsl #2]
   19aac:	bne	1989c <__assert_fail@plt+0x8344>
   19ab0:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   19ab4:	cmp	r3, #0
   19ab8:	beq	1989c <__assert_fail@plt+0x8344>
   19abc:	b	19420 <__assert_fail@plt+0x7ec8>
   19ac0:	ldr	r3, [sp, #20]
   19ac4:	ldrb	r3, [r3, #6]
   19ac8:	tst	r3, #64	; 0x40
   19acc:	bne	194a8 <__assert_fail@plt+0x7f50>
   19ad0:	b	19800 <__assert_fail@plt+0x82a8>
   19ad4:	mov	r3, #12
   19ad8:	str	r3, [r6, #-2096]	; 0xfffff7d0
   19adc:	add	r3, sp, #3152	; 0xc50
   19ae0:	add	r3, r3, #8
   19ae4:	str	r3, [sp, #24]
   19ae8:	b	19424 <__assert_fail@plt+0x7ecc>
   19aec:	ldr	r3, [sp, #28]
   19af0:	ldr	lr, [sp, #36]	; 0x24
   19af4:	add	r1, sp, #88	; 0x58
   19af8:	add	r2, r3, #96	; 0x60
   19afc:	mov	ip, #0
   19b00:	ldr	r3, [r2], #4
   19b04:	ldr	r0, [r1]
   19b08:	cmp	r2, lr
   19b0c:	and	r3, r3, r0
   19b10:	str	r3, [r1], #4
   19b14:	orr	ip, ip, r3
   19b18:	bne	19b00 <__assert_fail@plt+0x85a8>
   19b1c:	b	194f8 <__assert_fail@plt+0x7fa0>
   19b20:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   19b24:	cmp	r3, #0
   19b28:	beq	19888 <__assert_fail@plt+0x8330>
   19b2c:	b	19420 <__assert_fail@plt+0x7ec8>
   19b30:	add	r4, sp, #88	; 0x58
   19b34:	add	ip, sp, #14400	; 0x3840
   19b38:	ldm	r4!, {r0, r1, r2, r3}
   19b3c:	add	ip, ip, #24
   19b40:	add	ip, ip, r8, lsl #5
   19b44:	sub	ip, ip, #8192	; 0x2000
   19b48:	ldr	r5, [sp, #8]
   19b4c:	stmia	ip!, {r0, r1, r2, r3}
   19b50:	add	r3, sp, #3152	; 0xc50
   19b54:	add	r3, r3, #8
   19b58:	mov	r6, r3
   19b5c:	str	r3, [sp, #24]
   19b60:	ldm	r4, {r0, r1, r2, r3}
   19b64:	add	lr, r8, r8, lsl #1
   19b68:	ldr	r5, [r5, #12]
   19b6c:	add	r4, r6, lr, lsl #2
   19b70:	stm	ip, {r0, r1, r2, r3}
   19b74:	mov	r3, #1
   19b78:	ldr	r2, [sp, #12]
   19b7c:	mov	r0, #4
   19b80:	ldr	r5, [r5, r2]
   19b84:	str	r3, [r6, lr, lsl #2]
   19b88:	str	r3, [r4, #4]
   19b8c:	bl	24794 <__assert_fail@plt+0x1323c>
   19b90:	cmp	r0, #0
   19b94:	str	r0, [r4, #8]
   19b98:	beq	19bf8 <__assert_fail@plt+0x86a0>
   19b9c:	mov	r1, #0
   19ba0:	str	r5, [r0]
   19ba4:	mov	r2, #32
   19ba8:	add	r0, sp, #88	; 0x58
   19bac:	bl	1145c <memset@plt>
   19bb0:	ldr	r3, [sp, #8]
   19bb4:	add	r8, r8, #1
   19bb8:	ldr	r1, [r3, #8]
   19bbc:	b	19310 <__assert_fail@plt+0x7db8>
   19bc0:	mov	r2, #32
   19bc4:	mvn	r1, #0
   19bc8:	add	r0, sp, #88	; 0x58
   19bcc:	bl	1145c <memset@plt>
   19bd0:	b	197a0 <__assert_fail@plt+0x8248>
   19bd4:	bne	1944c <__assert_fail@plt+0x7ef4>
   19bd8:	mov	r1, #256	; 0x100
   19bdc:	mov	r0, #4
   19be0:	bl	2474c <__assert_fail@plt+0x131f4>
   19be4:	ldr	r3, [sp, #8]
   19be8:	str	r0, [r3, #44]	; 0x2c
   19bec:	adds	r0, r0, #0
   19bf0:	movne	r0, #1
   19bf4:	b	19450 <__assert_fail@plt+0x7ef8>
   19bf8:	cmp	r8, #0
   19bfc:	str	r8, [sp, #4]
   19c00:	str	r0, [r4, #4]
   19c04:	str	r0, [r4]
   19c08:	beq	1944c <__assert_fail@plt+0x7ef4>
   19c0c:	b	19714 <__assert_fail@plt+0x81bc>
   19c10:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   19c14:	cmp	r3, #0
   19c18:	beq	19a7c <__assert_fail@plt+0x8524>
   19c1c:	b	19420 <__assert_fail@plt+0x7ec8>
   19c20:	mov	r3, #0
   19c24:	b	19964 <__assert_fail@plt+0x840c>
   19c28:	mov	r1, #512	; 0x200
   19c2c:	mov	r0, #4
   19c30:	bl	2474c <__assert_fail@plt+0x131f4>
   19c34:	ldr	r3, [sp, #8]
   19c38:	cmp	r0, #0
   19c3c:	str	r0, [r3, #48]	; 0x30
   19c40:	beq	19420 <__assert_fail@plt+0x7ec8>
   19c44:	add	r1, sp, #6208	; 0x1840
   19c48:	mov	lr, r0
   19c4c:	add	r1, r1, #24
   19c50:	add	r5, r0, #1024	; 0x400
   19c54:	ldr	ip, [r7], #4
   19c58:	cmp	ip, #0
   19c5c:	movne	r4, lr
   19c60:	movne	r2, #1
   19c64:	bne	19c7c <__assert_fail@plt+0x8724>
   19c68:	b	19cb8 <__assert_fail@plt+0x8760>
   19c6c:	lsrs	ip, ip, #1
   19c70:	lsl	r2, r2, #1
   19c74:	add	r4, r4, #4
   19c78:	beq	19cb8 <__assert_fail@plt+0x8760>
   19c7c:	tst	ip, #1
   19c80:	beq	19c6c <__assert_fail@plt+0x8714>
   19c84:	ldr	r3, [r1]
   19c88:	ands	r3, r2, r3
   19c8c:	bne	19ccc <__assert_fail@plt+0x8774>
   19c90:	add	r3, r3, #1
   19c94:	ldr	r8, [r1, r3, lsl #5]
   19c98:	tst	r2, r8
   19c9c:	beq	19c90 <__assert_fail@plt+0x8738>
   19ca0:	add	r3, r6, r3, lsl #2
   19ca4:	ldr	r8, [r3, #-2048]	; 0xfffff800
   19ca8:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   19cac:	str	r8, [r4]
   19cb0:	str	r3, [r4, #1024]	; 0x400
   19cb4:	b	19c6c <__assert_fail@plt+0x8714>
   19cb8:	add	lr, lr, #128	; 0x80
   19cbc:	cmp	r5, lr
   19cc0:	add	r1, r1, #4
   19cc4:	bne	19c54 <__assert_fail@plt+0x86fc>
   19cc8:	b	199a0 <__assert_fail@plt+0x8448>
   19ccc:	mov	r3, #0
   19cd0:	b	19ca0 <__assert_fail@plt+0x8748>
   19cd4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   19cd8:	cmp	r1, #0
   19cdc:	push	{r4, r5, r6, lr}
   19ce0:	mov	r5, r0
   19ce4:	blt	19d40 <__assert_fail@plt+0x87e8>
   19ce8:	ldr	r3, [r0, #48]	; 0x30
   19cec:	cmp	r1, r3
   19cf0:	beq	19db4 <__assert_fail@plt+0x885c>
   19cf4:	ldr	r3, [r0, #80]	; 0x50
   19cf8:	cmp	r3, #1
   19cfc:	ble	19d48 <__assert_fail@plt+0x87f0>
   19d00:	ldr	r3, [r0, #8]
   19d04:	add	r3, r3, r1, lsl #2
   19d08:	b	19d14 <__assert_fail@plt+0x87bc>
   19d0c:	cmn	r1, #1
   19d10:	beq	19d40 <__assert_fail@plt+0x87e8>
   19d14:	ldr	r4, [r3], #-4
   19d18:	sub	r1, r1, #1
   19d1c:	cmn	r4, #1
   19d20:	beq	19d0c <__assert_fail@plt+0x87b4>
   19d24:	ldrb	r3, [r5, #78]	; 0x4e
   19d28:	cmp	r3, #0
   19d2c:	bne	19d88 <__assert_fail@plt+0x8830>
   19d30:	cmp	r4, #10
   19d34:	beq	19d74 <__assert_fail@plt+0x881c>
   19d38:	mov	r0, #0
   19d3c:	pop	{r4, r5, r6, pc}
   19d40:	ldr	r0, [r5, #60]	; 0x3c
   19d44:	pop	{r4, r5, r6, pc}
   19d48:	ldr	r3, [r0, #4]
   19d4c:	ldr	r0, [r0, #68]	; 0x44
   19d50:	ldrb	r3, [r3, r1]
   19d54:	and	r2, r3, #31
   19d58:	asr	r1, r3, #5
   19d5c:	ldr	r0, [r0, r1, lsl #2]
   19d60:	lsr	r0, r0, r2
   19d64:	ands	r0, r0, #1
   19d68:	bne	19dac <__assert_fail@plt+0x8854>
   19d6c:	cmp	r3, #10
   19d70:	popne	{r4, r5, r6, pc}
   19d74:	ldrb	r0, [r5, #77]	; 0x4d
   19d78:	cmp	r0, #0
   19d7c:	movne	r0, #2
   19d80:	moveq	r0, #0
   19d84:	pop	{r4, r5, r6, pc}
   19d88:	mov	r0, r4
   19d8c:	bl	11438 <iswalnum@plt>
   19d90:	sub	r3, r4, #95	; 0x5f
   19d94:	clz	r3, r3
   19d98:	lsr	r3, r3, #5
   19d9c:	cmp	r0, #0
   19da0:	orrne	r3, r3, #1
   19da4:	cmp	r3, #0
   19da8:	beq	19d30 <__assert_fail@plt+0x87d8>
   19dac:	mov	r0, #1
   19db0:	pop	{r4, r5, r6, pc}
   19db4:	tst	r2, #2
   19db8:	moveq	r0, #10
   19dbc:	movne	r0, #8
   19dc0:	pop	{r4, r5, r6, pc}
   19dc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dc8:	mov	r4, r0
   19dcc:	ldr	r5, [r0, #24]
   19dd0:	sub	sp, sp, #36	; 0x24
   19dd4:	cmp	r5, r1
   19dd8:	mov	r6, r1
   19ddc:	mov	r7, r2
   19de0:	suble	r5, r1, r5
   19de4:	ble	19e48 <__assert_fail@plt+0x88f0>
   19de8:	ldr	r3, [r0, #80]	; 0x50
   19dec:	ldr	r1, [r0, #44]	; 0x2c
   19df0:	cmp	r3, #1
   19df4:	ldrb	r3, [r0, #75]	; 0x4b
   19df8:	movgt	r2, #0
   19dfc:	strgt	r2, [r0, #16]
   19e00:	strgt	r2, [r0, #20]
   19e04:	tst	r7, #1
   19e08:	ldr	r2, [r0, #52]	; 0x34
   19e0c:	moveq	r0, #6
   19e10:	movne	r0, #4
   19e14:	cmp	r3, #0
   19e18:	mov	r3, #0
   19e1c:	str	r3, [r4, #28]
   19e20:	str	r3, [r4, #24]
   19e24:	str	r3, [r4, #32]
   19e28:	strb	r3, [r4, #76]	; 0x4c
   19e2c:	moveq	r5, r6
   19e30:	ldreq	r3, [r4]
   19e34:	movne	r5, r6
   19e38:	str	r0, [r4, #60]	; 0x3c
   19e3c:	str	r1, [r4, #48]	; 0x30
   19e40:	str	r2, [r4, #56]	; 0x38
   19e44:	streq	r3, [r4, #4]
   19e48:	cmp	r5, #0
   19e4c:	ldreq	r3, [r4, #80]	; 0x50
   19e50:	beq	19ee0 <__assert_fail@plt+0x8988>
   19e54:	ldr	r2, [r4, #32]
   19e58:	ldrb	r3, [r4, #76]	; 0x4c
   19e5c:	cmp	r5, r2
   19e60:	bge	19fb0 <__assert_fail@plt+0x8a58>
   19e64:	cmp	r3, #0
   19e68:	bne	1a074 <__assert_fail@plt+0x8b1c>
   19e6c:	mov	r2, r7
   19e70:	sub	r1, r5, #1
   19e74:	mov	r0, r4
   19e78:	bl	19cd8 <__assert_fail@plt+0x8780>
   19e7c:	ldr	r3, [r4, #80]	; 0x50
   19e80:	cmp	r3, #1
   19e84:	str	r0, [r4, #60]	; 0x3c
   19e88:	ble	19ea4 <__assert_fail@plt+0x894c>
   19e8c:	ldr	r2, [r4, #28]
   19e90:	ldr	r0, [r4, #8]
   19e94:	sub	r2, r2, r5
   19e98:	add	r1, r0, r5, lsl #2
   19e9c:	lsl	r2, r2, #2
   19ea0:	bl	11234 <memmove@plt>
   19ea4:	ldrb	r3, [r4, #75]	; 0x4b
   19ea8:	cmp	r3, #0
   19eac:	bne	1a1b4 <__assert_fail@plt+0x8c5c>
   19eb0:	ldr	r0, [r4, #28]
   19eb4:	ldr	r1, [r4, #32]
   19eb8:	mov	r2, r3
   19ebc:	ldr	r3, [r4, #80]	; 0x50
   19ec0:	sub	r0, r0, r5
   19ec4:	sub	r1, r1, r5
   19ec8:	str	r0, [r4, #28]
   19ecc:	str	r1, [r4, #32]
   19ed0:	cmp	r2, #0
   19ed4:	ldreq	r2, [r4, #4]
   19ed8:	addeq	r2, r2, r5
   19edc:	streq	r2, [r4, #4]
   19ee0:	ldr	r2, [r4, #48]	; 0x30
   19ee4:	ldr	r1, [r4, #56]	; 0x38
   19ee8:	cmp	r3, #1
   19eec:	sub	r3, r2, r5
   19ef0:	sub	r5, r1, r5
   19ef4:	str	r6, [r4, #24]
   19ef8:	str	r3, [r4, #48]	; 0x30
   19efc:	str	r5, [r4, #56]	; 0x38
   19f00:	ble	19f38 <__assert_fail@plt+0x89e0>
   19f04:	ldrb	r3, [r4, #72]	; 0x48
   19f08:	mov	r0, r4
   19f0c:	cmp	r3, #0
   19f10:	bne	19f28 <__assert_fail@plt+0x89d0>
   19f14:	bl	160c4 <__assert_fail@plt+0x4b6c>
   19f18:	mov	r0, #0
   19f1c:	str	r0, [r4, #40]	; 0x28
   19f20:	add	sp, sp, #36	; 0x24
   19f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f28:	bl	1625c <__assert_fail@plt+0x4d04>
   19f2c:	cmp	r0, #0
   19f30:	beq	19f18 <__assert_fail@plt+0x89c0>
   19f34:	b	19f20 <__assert_fail@plt+0x89c8>
   19f38:	ldrb	r2, [r4, #75]	; 0x4b
   19f3c:	cmp	r2, #0
   19f40:	streq	r3, [r4, #28]
   19f44:	beq	19f18 <__assert_fail@plt+0x89c0>
   19f48:	ldrb	r2, [r4, #72]	; 0x48
   19f4c:	cmp	r2, #0
   19f50:	bne	1a498 <__assert_fail@plt+0x8f40>
   19f54:	ldr	r0, [r4, #64]	; 0x40
   19f58:	cmp	r0, #0
   19f5c:	beq	19f18 <__assert_fail@plt+0x89c0>
   19f60:	ldr	r1, [r4, #36]	; 0x24
   19f64:	ldr	r2, [r4, #28]
   19f68:	cmp	r3, r1
   19f6c:	movge	r3, r1
   19f70:	cmp	r3, r2
   19f74:	bgt	19f84 <__assert_fail@plt+0x8a2c>
   19f78:	b	19fa4 <__assert_fail@plt+0x8a4c>
   19f7c:	ldr	r6, [r4, #24]
   19f80:	ldr	r0, [r4, #64]	; 0x40
   19f84:	ldm	r4, {r1, ip}
   19f88:	add	r1, r1, r2
   19f8c:	ldrb	r1, [r1, r6]
   19f90:	ldrb	r1, [r0, r1]
   19f94:	strb	r1, [ip, r2]
   19f98:	add	r2, r2, #1
   19f9c:	cmp	r3, r2
   19fa0:	bne	19f7c <__assert_fail@plt+0x8a24>
   19fa4:	str	r2, [r4, #28]
   19fa8:	str	r2, [r4, #32]
   19fac:	b	19f18 <__assert_fail@plt+0x89c0>
   19fb0:	ldr	r1, [r4, #28]
   19fb4:	cmp	r3, #0
   19fb8:	str	r1, [sp]
   19fbc:	bne	1a3d4 <__assert_fail@plt+0x8e7c>
   19fc0:	ldr	r3, [r4, #80]	; 0x50
   19fc4:	mov	r1, #0
   19fc8:	cmp	r3, #1
   19fcc:	str	r1, [r4, #28]
   19fd0:	ble	1a2f4 <__assert_fail@plt+0x8d9c>
   19fd4:	ldrb	r1, [r4, #73]	; 0x49
   19fd8:	cmp	r1, #0
   19fdc:	bne	1a228 <__assert_fail@plt+0x8cd0>
   19fe0:	ldr	r8, [r4, #24]
   19fe4:	add	r8, r8, r2
   19fe8:	cmp	r6, r8
   19fec:	ble	1a57c <__assert_fail@plt+0x9024>
   19ff0:	add	r3, sp, #16
   19ff4:	add	sl, r4, #16
   19ff8:	add	fp, sp, #24
   19ffc:	str	r5, [sp, #4]
   1a000:	mov	r9, r3
   1a004:	b	1a014 <__assert_fail@plt+0x8abc>
   1a008:	add	r8, r8, r3
   1a00c:	cmp	r6, r8
   1a010:	ble	1a400 <__assert_fail@plt+0x8ea8>
   1a014:	ldm	sl, {r0, r1}
   1a018:	ldr	r5, [r4, #44]	; 0x2c
   1a01c:	ldr	ip, [r4]
   1a020:	sub	r5, r5, r8
   1a024:	stm	fp, {r0, r1}
   1a028:	mov	r2, r5
   1a02c:	mov	r3, sl
   1a030:	add	r1, ip, r8
   1a034:	mov	r0, r9
   1a038:	bl	24b68 <__assert_fail@plt+0x13610>
   1a03c:	sub	r2, r0, #1
   1a040:	cmn	r2, #4
   1a044:	mov	r3, r0
   1a048:	ldrls	r2, [sp, #16]
   1a04c:	bls	1a008 <__assert_fail@plt+0x8ab0>
   1a050:	mov	r2, #0
   1a054:	cmp	r5, r2
   1a058:	cmpne	r0, r2
   1a05c:	ldm	fp, {r0, r1}
   1a060:	ldrne	r3, [r4]
   1a064:	ldrbne	r2, [r3, r8]
   1a068:	mov	r3, #1
   1a06c:	stm	sl, {r0, r1}
   1a070:	b	1a008 <__assert_fail@plt+0x8ab0>
   1a074:	ldr	sl, [r4, #28]
   1a078:	ldr	r9, [r4, #12]
   1a07c:	mov	r3, sl
   1a080:	mov	r2, #0
   1a084:	b	1a098 <__assert_fail@plt+0x8b40>
   1a088:	ble	1a0c0 <__assert_fail@plt+0x8b68>
   1a08c:	add	r2, r8, #1
   1a090:	cmp	r2, r3
   1a094:	bge	1a0b8 <__assert_fail@plt+0x8b60>
   1a098:	add	r1, r2, r3
   1a09c:	add	r1, r1, r1, lsr #31
   1a0a0:	asr	r8, r1, #1
   1a0a4:	ldr	r1, [r9, r8, lsl #2]
   1a0a8:	cmp	r5, r1
   1a0ac:	bge	1a088 <__assert_fail@plt+0x8b30>
   1a0b0:	mov	r3, r8
   1a0b4:	b	1a090 <__assert_fail@plt+0x8b38>
   1a0b8:	cmp	r5, r1
   1a0bc:	addgt	r8, r8, #1
   1a0c0:	sub	fp, r8, #1
   1a0c4:	mov	r2, r7
   1a0c8:	mov	r1, fp
   1a0cc:	mov	r0, r4
   1a0d0:	bl	19cd8 <__assert_fail@plt+0x8780>
   1a0d4:	cmp	r5, sl
   1a0d8:	movge	r3, #0
   1a0dc:	movlt	r3, #1
   1a0e0:	cmp	r5, r8
   1a0e4:	movne	r3, #0
   1a0e8:	cmp	r3, #0
   1a0ec:	str	r0, [r4, #60]	; 0x3c
   1a0f0:	bne	1a34c <__assert_fail@plt+0x8df4>
   1a0f4:	ldr	r2, [r4, #44]	; 0x2c
   1a0f8:	ldr	r3, [r4, #52]	; 0x34
   1a0fc:	sub	r2, r2, r6
   1a100:	add	r2, r2, r5
   1a104:	sub	r3, r3, r6
   1a108:	add	r3, r3, r5
   1a10c:	str	r2, [r4, #48]	; 0x30
   1a110:	cmp	r8, #0
   1a114:	mov	r2, #0
   1a118:	str	r3, [r4, #56]	; 0x38
   1a11c:	strb	r2, [r4, #76]	; 0x4c
   1a120:	ble	1a158 <__assert_fail@plt+0x8c00>
   1a124:	sub	r3, r8, #-1073741823	; 0xc0000001
   1a128:	ldr	r2, [r9, r3, lsl #2]
   1a12c:	add	r3, r9, r3, lsl #2
   1a130:	cmp	r5, r2
   1a134:	beq	1a14c <__assert_fail@plt+0x8bf4>
   1a138:	b	1a158 <__assert_fail@plt+0x8c00>
   1a13c:	ldr	r2, [r3, #-4]!
   1a140:	sub	fp, fp, #1
   1a144:	cmp	r5, r2
   1a148:	bne	1a158 <__assert_fail@plt+0x8c00>
   1a14c:	cmp	fp, #0
   1a150:	mov	r8, fp
   1a154:	bne	1a13c <__assert_fail@plt+0x8be4>
   1a158:	cmp	sl, r8
   1a15c:	ble	1a1d0 <__assert_fail@plt+0x8c78>
   1a160:	ldr	r1, [r4, #8]
   1a164:	lsl	r0, r8, #2
   1a168:	add	r3, r1, r0
   1a16c:	ldr	r2, [r1, r8, lsl #2]
   1a170:	cmn	r2, #1
   1a174:	rsbeq	r1, r1, #4
   1a178:	beq	1a18c <__assert_fail@plt+0x8c34>
   1a17c:	b	1a1d8 <__assert_fail@plt+0x8c80>
   1a180:	ldr	r2, [r3, #4]!
   1a184:	cmn	r2, #1
   1a188:	bne	1a1d8 <__assert_fail@plt+0x8c80>
   1a18c:	add	r8, r8, #1
   1a190:	cmp	sl, r8
   1a194:	add	r0, r1, r3
   1a198:	bne	1a180 <__assert_fail@plt+0x8c28>
   1a19c:	mov	r2, #0
   1a1a0:	str	r2, [r4, #28]
   1a1a4:	str	r2, [r4, #32]
   1a1a8:	ldrb	r2, [r4, #75]	; 0x4b
   1a1ac:	ldr	r3, [r4, #80]	; 0x50
   1a1b0:	b	19ed0 <__assert_fail@plt+0x8978>
   1a1b4:	ldr	r0, [r4, #4]
   1a1b8:	ldr	r2, [r4, #28]
   1a1bc:	add	r1, r0, r5
   1a1c0:	sub	r2, r2, r5
   1a1c4:	bl	11234 <memmove@plt>
   1a1c8:	ldrb	r3, [r4, #75]	; 0x4b
   1a1cc:	b	19eb0 <__assert_fail@plt+0x8958>
   1a1d0:	beq	1a19c <__assert_fail@plt+0x8c44>
   1a1d4:	lsl	r0, r8, #2
   1a1d8:	ldr	r2, [r9, r0]
   1a1dc:	sub	r2, r2, r5
   1a1e0:	cmp	r2, #0
   1a1e4:	str	r2, [r4, #28]
   1a1e8:	beq	1a1a4 <__assert_fail@plt+0x8c4c>
   1a1ec:	ble	1a214 <__assert_fail@plt+0x8cbc>
   1a1f0:	ldr	r1, [r4, #8]
   1a1f4:	mov	r3, #0
   1a1f8:	sub	r1, r1, #4
   1a1fc:	mvn	r0, #0
   1a200:	str	r0, [r1, #4]!
   1a204:	ldr	r2, [r4, #28]
   1a208:	add	r3, r3, #1
   1a20c:	cmp	r2, r3
   1a210:	bgt	1a200 <__assert_fail@plt+0x8ca8>
   1a214:	mov	r1, #255	; 0xff
   1a218:	ldr	r0, [r4, #4]
   1a21c:	bl	1145c <memset@plt>
   1a220:	ldr	r2, [r4, #28]
   1a224:	b	1a1a4 <__assert_fail@plt+0x8c4c>
   1a228:	ldr	ip, [r4]
   1a22c:	ldr	r8, [r4, #24]
   1a230:	sub	r3, r5, r3
   1a234:	add	r9, ip, r8
   1a238:	add	r3, r9, r3
   1a23c:	cmp	ip, r3
   1a240:	sub	r0, r5, #1
   1a244:	movcc	ip, r3
   1a248:	add	r1, r9, r0
   1a24c:	cmp	r1, ip
   1a250:	bcc	19fe4 <__assert_fail@plt+0x8a8c>
   1a254:	ldrb	r3, [r9, r0]
   1a258:	and	r3, r3, #192	; 0xc0
   1a25c:	cmp	r3, #128	; 0x80
   1a260:	subeq	r3, r1, #1
   1a264:	subeq	ip, ip, #1
   1a268:	bne	1a28c <__assert_fail@plt+0x8d34>
   1a26c:	cmp	ip, r3
   1a270:	mov	r1, r3
   1a274:	beq	19fe4 <__assert_fail@plt+0x8a8c>
   1a278:	ldrb	r0, [r1]
   1a27c:	sub	r3, r3, #1
   1a280:	and	r0, r0, #192	; 0xc0
   1a284:	cmp	r0, #128	; 0x80
   1a288:	beq	1a26c <__assert_fail@plt+0x8d14>
   1a28c:	ldr	r2, [r4, #48]	; 0x30
   1a290:	ldr	r3, [r4, #64]	; 0x40
   1a294:	add	r2, r9, r2
   1a298:	cmp	r3, #0
   1a29c:	mov	r8, r1
   1a2a0:	sub	r2, r2, r1
   1a2a4:	bne	1a534 <__assert_fail@plt+0x8fdc>
   1a2a8:	add	fp, sp, #24
   1a2ac:	mov	r3, fp
   1a2b0:	mov	sl, #0
   1a2b4:	add	r0, sp, #12
   1a2b8:	str	sl, [sp, #24]
   1a2bc:	str	sl, [sp, #28]
   1a2c0:	bl	24b68 <__assert_fail@plt+0x13610>
   1a2c4:	add	r9, r9, r5
   1a2c8:	sub	r8, r9, r8
   1a2cc:	cmp	r0, r8
   1a2d0:	movcc	r3, #0
   1a2d4:	movcs	r3, #1
   1a2d8:	cmn	r0, #3
   1a2dc:	movhi	r3, #0
   1a2e0:	cmp	r3, sl
   1a2e4:	bne	1a448 <__assert_fail@plt+0x8ef0>
   1a2e8:	ldr	r8, [r4, #24]
   1a2ec:	ldr	r2, [r4, #32]
   1a2f0:	b	19fe4 <__assert_fail@plt+0x8a8c>
   1a2f4:	ldr	r2, [r4]
   1a2f8:	ldr	r0, [r4, #24]
   1a2fc:	add	r2, r2, r5
   1a300:	add	r2, r2, r0
   1a304:	ldr	ip, [r4, #64]	; 0x40
   1a308:	ldrb	r0, [r2, #-1]
   1a30c:	cmp	ip, #0
   1a310:	str	r1, [r4, #32]
   1a314:	ldrbne	r0, [ip, r0]
   1a318:	ldr	ip, [r4, #68]	; 0x44
   1a31c:	and	r2, r0, #31
   1a320:	asr	r1, r0, #5
   1a324:	ldr	r1, [ip, r1, lsl #2]
   1a328:	lsr	r2, r1, r2
   1a32c:	ands	r1, r2, #1
   1a330:	movne	r1, #1
   1a334:	bne	1a340 <__assert_fail@plt+0x8de8>
   1a338:	cmp	r0, #10
   1a33c:	beq	1a508 <__assert_fail@plt+0x8fb0>
   1a340:	ldrb	r2, [r4, #75]	; 0x4b
   1a344:	str	r1, [r4, #60]	; 0x3c
   1a348:	b	19ed0 <__assert_fail@plt+0x8978>
   1a34c:	ldr	r3, [r9, r8, lsl #2]
   1a350:	cmp	r5, r3
   1a354:	bne	1a0f4 <__assert_fail@plt+0x8b9c>
   1a358:	ldr	r0, [r4, #8]
   1a35c:	sub	r2, sl, r5
   1a360:	lsl	r7, r5, #2
   1a364:	lsl	r2, r2, #2
   1a368:	add	r1, r0, r7
   1a36c:	bl	11234 <memmove@plt>
   1a370:	ldr	r0, [r4, #4]
   1a374:	ldr	r2, [r4, #28]
   1a378:	add	r1, r0, r5
   1a37c:	sub	r2, r2, r5
   1a380:	bl	11234 <memmove@plt>
   1a384:	ldr	r3, [r4, #28]
   1a388:	ldr	r2, [r4, #32]
   1a38c:	sub	r3, r3, r5
   1a390:	sub	r2, r2, r5
   1a394:	cmp	r3, #0
   1a398:	str	r3, [r4, #28]
   1a39c:	str	r2, [r4, #32]
   1a3a0:	ble	1a1a8 <__assert_fail@plt+0x8c50>
   1a3a4:	ldr	r1, [r4, #12]
   1a3a8:	mov	r2, #0
   1a3ac:	add	r0, r1, r7
   1a3b0:	sub	r1, r1, #4
   1a3b4:	ldr	r3, [r0], #4
   1a3b8:	add	r2, r2, #1
   1a3bc:	sub	r3, r3, r5
   1a3c0:	str	r3, [r1, #4]!
   1a3c4:	ldr	r3, [r4, #28]
   1a3c8:	cmp	r3, r2
   1a3cc:	bgt	1a3b4 <__assert_fail@plt+0x8e5c>
   1a3d0:	b	1a1a8 <__assert_fail@plt+0x8c50>
   1a3d4:	ldr	r1, [r4, #44]	; 0x2c
   1a3d8:	ldr	r3, [r4, #52]	; 0x34
   1a3dc:	sub	r1, r1, r6
   1a3e0:	add	r1, r1, r5
   1a3e4:	sub	r3, r3, r6
   1a3e8:	add	r3, r3, r5
   1a3ec:	str	r1, [r4, #48]	; 0x30
   1a3f0:	mov	r1, #0
   1a3f4:	str	r3, [r4, #56]	; 0x38
   1a3f8:	strb	r1, [r4, #76]	; 0x4c
   1a3fc:	b	19fc0 <__assert_fail@plt+0x8a68>
   1a400:	sub	r8, r8, r6
   1a404:	cmn	r2, #1
   1a408:	ldr	r5, [sp, #4]
   1a40c:	mov	r9, r2
   1a410:	str	r8, [r4, #28]
   1a414:	bne	1a464 <__assert_fail@plt+0x8f0c>
   1a418:	ldr	r3, [sp]
   1a41c:	mov	r2, r7
   1a420:	sub	r1, r3, #1
   1a424:	mov	r0, r4
   1a428:	bl	19cd8 <__assert_fail@plt+0x8780>
   1a42c:	str	r0, [r4, #60]	; 0x3c
   1a430:	cmp	r8, #0
   1a434:	bne	1a4a4 <__assert_fail@plt+0x8f4c>
   1a438:	ldrb	r2, [r4, #75]	; 0x4b
   1a43c:	str	r8, [r4, #32]
   1a440:	ldr	r3, [r4, #80]	; 0x50
   1a444:	b	19ed0 <__assert_fail@plt+0x8978>
   1a448:	ldr	r9, [sp, #12]
   1a44c:	sub	r8, r0, r8
   1a450:	cmn	r9, #1
   1a454:	str	sl, [r4, #16]
   1a458:	str	sl, [r4, #20]
   1a45c:	str	r8, [r4, #28]
   1a460:	beq	1a2e8 <__assert_fail@plt+0x8d90>
   1a464:	ldrb	r3, [r4, #78]	; 0x4e
   1a468:	cmp	r3, #0
   1a46c:	bne	1a4e0 <__assert_fail@plt+0x8f88>
   1a470:	cmp	r9, #10
   1a474:	movne	r3, #0
   1a478:	beq	1a484 <__assert_fail@plt+0x8f2c>
   1a47c:	str	r3, [r4, #60]	; 0x3c
   1a480:	b	1a430 <__assert_fail@plt+0x8ed8>
   1a484:	ldrb	r3, [r4, #77]	; 0x4d
   1a488:	cmp	r3, #0
   1a48c:	movne	r3, #2
   1a490:	moveq	r3, #0
   1a494:	b	1a47c <__assert_fail@plt+0x8f24>
   1a498:	mov	r0, r4
   1a49c:	bl	167dc <__assert_fail@plt+0x5284>
   1a4a0:	b	19f18 <__assert_fail@plt+0x89c0>
   1a4a4:	ble	1a4cc <__assert_fail@plt+0x8f74>
   1a4a8:	ldr	r2, [r4, #8]
   1a4ac:	mov	r3, #0
   1a4b0:	sub	r2, r2, #4
   1a4b4:	mvn	r1, #0
   1a4b8:	str	r1, [r2, #4]!
   1a4bc:	ldr	r8, [r4, #28]
   1a4c0:	add	r3, r3, #1
   1a4c4:	cmp	r8, r3
   1a4c8:	bgt	1a4b8 <__assert_fail@plt+0x8f60>
   1a4cc:	ldrb	r2, [r4, #75]	; 0x4b
   1a4d0:	cmp	r2, #0
   1a4d4:	bne	1a51c <__assert_fail@plt+0x8fc4>
   1a4d8:	ldr	r8, [r4, #28]
   1a4dc:	b	1a43c <__assert_fail@plt+0x8ee4>
   1a4e0:	mov	r0, r9
   1a4e4:	bl	11438 <iswalnum@plt>
   1a4e8:	cmp	r9, #95	; 0x5f
   1a4ec:	clz	r0, r0
   1a4f0:	lsr	r0, r0, #5
   1a4f4:	moveq	r0, #0
   1a4f8:	cmp	r0, #0
   1a4fc:	moveq	r3, #1
   1a500:	bne	1a470 <__assert_fail@plt+0x8f18>
   1a504:	b	1a47c <__assert_fail@plt+0x8f24>
   1a508:	ldrb	r1, [r4, #77]	; 0x4d
   1a50c:	cmp	r1, #0
   1a510:	movne	r1, #2
   1a514:	moveq	r1, #0
   1a518:	b	1a340 <__assert_fail@plt+0x8de8>
   1a51c:	mov	r2, r8
   1a520:	mov	r1, #255	; 0xff
   1a524:	ldr	r0, [r4, #4]
   1a528:	bl	1145c <memset@plt>
   1a52c:	ldrb	r2, [r4, #75]	; 0x4b
   1a530:	b	1a4d8 <__assert_fail@plt+0x8f80>
   1a534:	cmp	r2, #6
   1a538:	movlt	r0, r2
   1a53c:	movge	r0, #6
   1a540:	cmp	r0, #0
   1a544:	ble	1a588 <__assert_fail@plt+0x9030>
   1a548:	add	ip, sp, #16
   1a54c:	mov	lr, ip
   1a550:	mov	sl, ip
   1a554:	sub	ip, r0, #1
   1a558:	add	ip, lr, ip
   1a55c:	add	r0, r1, r0
   1a560:	ldrb	lr, [r0, #-1]!
   1a564:	cmp	r1, r0
   1a568:	ldrb	lr, [r3, lr]
   1a56c:	strb	lr, [ip], #-1
   1a570:	bne	1a560 <__assert_fail@plt+0x9008>
   1a574:	mov	r1, sl
   1a578:	b	1a2a8 <__assert_fail@plt+0x8d50>
   1a57c:	sub	r8, r8, r6
   1a580:	str	r8, [r4, #28]
   1a584:	b	1a418 <__assert_fail@plt+0x8ec0>
   1a588:	add	r3, sp, #16
   1a58c:	mov	sl, r3
   1a590:	b	1a574 <__assert_fail@plt+0x901c>
   1a594:	ldrb	ip, [r1, #4]
   1a598:	ldr	r3, [r0, #4]
   1a59c:	push	{r4, lr}
   1a5a0:	sub	ip, ip, #1
   1a5a4:	ldrb	r3, [r3, r2]
   1a5a8:	cmp	ip, #6
   1a5ac:	ldrls	pc, [pc, ip, lsl #2]
   1a5b0:	b	1a5dc <__assert_fail@plt+0x9084>
   1a5b4:	ldrdeq	sl, [r1], -r0
   1a5b8:	ldrdeq	sl, [r1], -ip
   1a5bc:	andeq	sl, r1, r0, ror r6
   1a5c0:	ldrdeq	sl, [r1], -ip
   1a5c4:	andeq	sl, r1, ip, ror #11
   1a5c8:	ldrdeq	sl, [r1], -ip
   1a5cc:	andeq	sl, r1, r4, ror #11
   1a5d0:	ldrb	ip, [r1]
   1a5d4:	cmp	ip, r3
   1a5d8:	beq	1a60c <__assert_fail@plt+0x90b4>
   1a5dc:	mov	r0, #0
   1a5e0:	pop	{r4, pc}
   1a5e4:	tst	r3, #128	; 0x80
   1a5e8:	bne	1a5dc <__assert_fail@plt+0x9084>
   1a5ec:	cmp	r3, #10
   1a5f0:	beq	1a6ac <__assert_fail@plt+0x9154>
   1a5f4:	cmp	r3, #0
   1a5f8:	bne	1a60c <__assert_fail@plt+0x90b4>
   1a5fc:	ldr	ip, [r0, #84]	; 0x54
   1a600:	ldr	ip, [ip, #128]	; 0x80
   1a604:	tst	ip, #128	; 0x80
   1a608:	bne	1a5dc <__assert_fail@plt+0x9084>
   1a60c:	ldr	r4, [r1, #4]
   1a610:	ldr	r3, [pc, #168]	; 1a6c0 <__assert_fail@plt+0x9168>
   1a614:	and	r3, r3, r4
   1a618:	cmp	r3, #0
   1a61c:	beq	1a690 <__assert_fail@plt+0x9138>
   1a620:	mov	r1, r2
   1a624:	ldr	r2, [r0, #88]	; 0x58
   1a628:	bl	19cd8 <__assert_fail@plt+0x8780>
   1a62c:	ldr	r1, [pc, #144]	; 1a6c4 <__assert_fail@plt+0x916c>
   1a630:	and	r1, r1, r4, lsr #8
   1a634:	ands	r2, r1, #4
   1a638:	bne	1a698 <__assert_fail@plt+0x9140>
   1a63c:	tst	r1, #8
   1a640:	beq	1a64c <__assert_fail@plt+0x90f4>
   1a644:	tst	r0, #1
   1a648:	bne	1a5dc <__assert_fail@plt+0x9084>
   1a64c:	tst	r1, #32
   1a650:	beq	1a65c <__assert_fail@plt+0x9104>
   1a654:	ands	r3, r0, #2
   1a658:	beq	1a5dc <__assert_fail@plt+0x9084>
   1a65c:	tst	r1, #128	; 0x80
   1a660:	beq	1a690 <__assert_fail@plt+0x9138>
   1a664:	lsr	r0, r0, #3
   1a668:	and	r0, r0, #1
   1a66c:	pop	{r4, pc}
   1a670:	ldr	ip, [r1]
   1a674:	asr	lr, r3, #5
   1a678:	and	r3, r3, #31
   1a67c:	ldr	ip, [ip, lr, lsl #2]
   1a680:	lsr	r3, ip, r3
   1a684:	ands	r3, r3, #1
   1a688:	bne	1a60c <__assert_fail@plt+0x90b4>
   1a68c:	b	1a5dc <__assert_fail@plt+0x9084>
   1a690:	mov	r0, #1
   1a694:	pop	{r4, pc}
   1a698:	ands	r3, r0, #1
   1a69c:	beq	1a5dc <__assert_fail@plt+0x9084>
   1a6a0:	tst	r1, #8
   1a6a4:	bne	1a5dc <__assert_fail@plt+0x9084>
   1a6a8:	b	1a64c <__assert_fail@plt+0x90f4>
   1a6ac:	ldr	r3, [r0, #84]	; 0x54
   1a6b0:	ldr	r3, [r3, #128]	; 0x80
   1a6b4:	ands	r3, r3, #64	; 0x40
   1a6b8:	bne	1a60c <__assert_fail@plt+0x90b4>
   1a6bc:	b	1a5dc <__assert_fail@plt+0x9084>
   1a6c0:	andeq	pc, r3, r0, lsl #30
   1a6c4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1a6c8:	push	{r4, r5, r6, r7, r8, lr}
   1a6cc:	mov	r4, r1
   1a6d0:	mov	r1, r2
   1a6d4:	ldr	r2, [r0, #88]	; 0x58
   1a6d8:	mov	r5, r0
   1a6dc:	bl	19cd8 <__assert_fail@plt+0x8780>
   1a6e0:	ldr	lr, [r4, #8]
   1a6e4:	cmp	lr, #0
   1a6e8:	ble	1a788 <__assert_fail@plt+0x9230>
   1a6ec:	ldr	r3, [r5, #84]	; 0x54
   1a6f0:	ldr	r1, [r4, #12]
   1a6f4:	ldr	r5, [pc, #168]	; 1a7a4 <__assert_fail@plt+0x924c>
   1a6f8:	ldr	r4, [r3]
   1a6fc:	sub	r1, r1, #4
   1a700:	mov	r2, #0
   1a704:	and	r8, r0, #8
   1a708:	and	r7, r0, #2
   1a70c:	and	r6, r0, #1
   1a710:	b	1a720 <__assert_fail@plt+0x91c8>
   1a714:	add	r2, r2, #1
   1a718:	cmp	r2, lr
   1a71c:	beq	1a788 <__assert_fail@plt+0x9230>
   1a720:	ldr	r0, [r1, #4]!
   1a724:	add	r3, r4, r0, lsl #3
   1a728:	ldrb	ip, [r3, #4]
   1a72c:	ldr	r3, [r3, #4]
   1a730:	cmp	ip, #2
   1a734:	and	r3, r5, r3, lsr #8
   1a738:	bne	1a714 <__assert_fail@plt+0x91bc>
   1a73c:	cmp	r3, #0
   1a740:	popeq	{r4, r5, r6, r7, r8, pc}
   1a744:	tst	r3, #4
   1a748:	beq	1a790 <__assert_fail@plt+0x9238>
   1a74c:	cmp	r6, #0
   1a750:	beq	1a714 <__assert_fail@plt+0x91bc>
   1a754:	tst	r3, #8
   1a758:	bne	1a714 <__assert_fail@plt+0x91bc>
   1a75c:	tst	r3, #32
   1a760:	beq	1a76c <__assert_fail@plt+0x9214>
   1a764:	cmp	r7, #0
   1a768:	beq	1a714 <__assert_fail@plt+0x91bc>
   1a76c:	tst	r3, #128	; 0x80
   1a770:	popeq	{r4, r5, r6, r7, r8, pc}
   1a774:	cmp	r8, #0
   1a778:	popne	{r4, r5, r6, r7, r8, pc}
   1a77c:	add	r2, r2, #1
   1a780:	cmp	r2, lr
   1a784:	bne	1a720 <__assert_fail@plt+0x91c8>
   1a788:	mov	r0, #0
   1a78c:	pop	{r4, r5, r6, r7, r8, pc}
   1a790:	tst	r3, #8
   1a794:	beq	1a75c <__assert_fail@plt+0x9204>
   1a798:	cmp	r6, #0
   1a79c:	beq	1a75c <__assert_fail@plt+0x9204>
   1a7a0:	b	1a714 <__assert_fail@plt+0x91bc>
   1a7a4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1a7a8:	ldr	ip, [r1]
   1a7ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7b0:	cmp	ip, #0
   1a7b4:	sub	sp, sp, #20
   1a7b8:	ldr	r6, [r0, #84]	; 0x54
   1a7bc:	ble	1a888 <__assert_fail@plt+0x9330>
   1a7c0:	mov	r7, r2
   1a7c4:	str	r3, [sp, #8]
   1a7c8:	mov	r8, r0
   1a7cc:	str	r1, [sp, #4]
   1a7d0:	mov	r4, #0
   1a7d4:	mov	r2, #24
   1a7d8:	mov	r9, #1
   1a7dc:	b	1a7e8 <__assert_fail@plt+0x9290>
   1a7e0:	cmp	r4, ip
   1a7e4:	bge	1a888 <__assert_fail@plt+0x9330>
   1a7e8:	ldr	r1, [r7]
   1a7ec:	ldr	r3, [r6]
   1a7f0:	ldr	r5, [r1, r4, lsl #2]
   1a7f4:	add	r4, r4, #1
   1a7f8:	add	r1, r3, r5, lsl #3
   1a7fc:	ldrb	r1, [r1, #4]
   1a800:	cmp	r1, #8
   1a804:	bne	1a7e0 <__assert_fail@plt+0x9288>
   1a808:	ldr	r3, [r3, r5, lsl #3]
   1a80c:	cmp	r3, #31
   1a810:	bgt	1a7e0 <__assert_fail@plt+0x9288>
   1a814:	ldr	r1, [r6, #80]	; 0x50
   1a818:	lsr	r3, r1, r3
   1a81c:	tst	r3, #1
   1a820:	beq	1a7e0 <__assert_fail@plt+0x9288>
   1a824:	ldr	sl, [r8, #124]	; 0x7c
   1a828:	ldr	r3, [r8, #128]	; 0x80
   1a82c:	ldr	fp, [r8, #132]	; 0x84
   1a830:	cmp	r3, sl
   1a834:	beq	1a89c <__assert_fail@plt+0x9344>
   1a838:	mov	r1, r2
   1a83c:	mov	r0, r9
   1a840:	str	r2, [sp, #12]
   1a844:	bl	2474c <__assert_fail@plt+0x131f4>
   1a848:	ldr	r3, [r8, #124]	; 0x7c
   1a84c:	ldr	r1, [r8, #132]	; 0x84
   1a850:	add	ip, r3, #1
   1a854:	str	r0, [fp, sl, lsl #2]
   1a858:	ldr	r3, [r1, r3, lsl #2]
   1a85c:	cmp	r3, #0
   1a860:	beq	1a894 <__assert_fail@plt+0x933c>
   1a864:	ldr	r2, [sp, #8]
   1a868:	str	r5, [r3, #4]
   1a86c:	str	ip, [r8, #124]	; 0x7c
   1a870:	str	r2, [r3]
   1a874:	ldr	r3, [sp, #4]
   1a878:	ldr	r2, [sp, #12]
   1a87c:	ldr	ip, [r3]
   1a880:	cmp	r4, ip
   1a884:	blt	1a7e8 <__assert_fail@plt+0x9290>
   1a888:	mov	r0, #0
   1a88c:	add	sp, sp, #20
   1a890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a894:	mov	r0, #12
   1a898:	b	1a88c <__assert_fail@plt+0x9334>
   1a89c:	mov	r0, fp
   1a8a0:	lsl	r1, sl, #3
   1a8a4:	str	r2, [sp, #12]
   1a8a8:	bl	247c0 <__assert_fail@plt+0x13268>
   1a8ac:	lsl	r3, sl, #1
   1a8b0:	ldr	r2, [sp, #12]
   1a8b4:	subs	fp, r0, #0
   1a8b8:	beq	1a894 <__assert_fail@plt+0x933c>
   1a8bc:	ldr	sl, [r8, #124]	; 0x7c
   1a8c0:	str	fp, [r8, #132]	; 0x84
   1a8c4:	str	r3, [r8, #128]	; 0x80
   1a8c8:	b	1a838 <__assert_fail@plt+0x92e0>
   1a8cc:	push	{r4, r5, r6, lr}
   1a8d0:	mov	r5, r0
   1a8d4:	mov	r0, r1
   1a8d8:	mov	r4, r1
   1a8dc:	bl	11414 <strlen@plt>
   1a8e0:	cmp	r0, #1
   1a8e4:	moveq	r1, #0
   1a8e8:	ldrbeq	r3, [r4]
   1a8ec:	movne	r1, #3
   1a8f0:	andeq	ip, r3, #31
   1a8f4:	asreq	r3, r3, #5
   1a8f8:	ldreq	r2, [r5, r3, lsl #2]
   1a8fc:	orreq	r2, r2, r0, lsl ip
   1a900:	mov	r0, r1
   1a904:	streq	r2, [r5, r3, lsl #2]
   1a908:	pop	{r4, r5, r6, pc}
   1a90c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a910:	mov	r6, r0
   1a914:	ldr	ip, [sp, #40]	; 0x28
   1a918:	mov	r5, r1
   1a91c:	tst	ip, #4194304	; 0x400000
   1a920:	mov	sl, r2
   1a924:	mov	r7, r3
   1a928:	ldr	r9, [sp, #32]
   1a92c:	beq	1a94c <__assert_fail@plt+0x93f4>
   1a930:	ldr	r1, [pc, #2196]	; 1b1cc <__assert_fail@plt+0x9c74>
   1a934:	ldr	r0, [sp, #36]	; 0x24
   1a938:	bl	111f8 <strcmp@plt>
   1a93c:	cmp	r0, #0
   1a940:	bne	1aa2c <__assert_fail@plt+0x94d4>
   1a944:	ldr	r3, [pc, #2180]	; 1b1d0 <__assert_fail@plt+0x9c78>
   1a948:	str	r3, [sp, #36]	; 0x24
   1a94c:	ldr	r4, [r7]
   1a950:	ldr	r3, [r9]
   1a954:	cmp	r3, r4
   1a958:	beq	1aa5c <__assert_fail@plt+0x9504>
   1a95c:	ldr	r8, [sl]
   1a960:	add	r3, r4, #1
   1a964:	str	r3, [r7]
   1a968:	ldr	r0, [sp, #36]	; 0x24
   1a96c:	bl	111c8 <wctype@plt>
   1a970:	ldr	r1, [pc, #2140]	; 1b1d4 <__assert_fail@plt+0x9c7c>
   1a974:	str	r0, [r8, r4, lsl #2]
   1a978:	ldr	r0, [sp, #36]	; 0x24
   1a97c:	bl	111f8 <strcmp@plt>
   1a980:	subs	r4, r0, #0
   1a984:	beq	1a9e4 <__assert_fail@plt+0x948c>
   1a988:	ldr	r1, [pc, #2120]	; 1b1d8 <__assert_fail@plt+0x9c80>
   1a98c:	ldr	r0, [sp, #36]	; 0x24
   1a990:	bl	111f8 <strcmp@plt>
   1a994:	subs	r4, r0, #0
   1a998:	bne	1aa88 <__assert_fail@plt+0x9530>
   1a99c:	cmp	r6, #0
   1a9a0:	bne	1ac3c <__assert_fail@plt+0x96e4>
   1a9a4:	bl	113fc <__ctype_b_loc@plt>
   1a9a8:	mov	ip, #1
   1a9ac:	ldr	r3, [r0]
   1a9b0:	sub	r3, r3, #2
   1a9b4:	ldrh	r2, [r3, #2]!
   1a9b8:	asr	r1, r4, #5
   1a9bc:	and	r0, r4, #31
   1a9c0:	tst	r2, #2
   1a9c4:	add	r4, r4, #1
   1a9c8:	ldrne	r2, [r5, r1, lsl #2]
   1a9cc:	orrne	r2, r2, ip, lsl r0
   1a9d0:	strne	r2, [r5, r1, lsl #2]
   1a9d4:	cmp	r4, #256	; 0x100
   1a9d8:	bne	1a9b4 <__assert_fail@plt+0x945c>
   1a9dc:	mov	r0, #0
   1a9e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a9e4:	cmp	r6, #0
   1a9e8:	bne	1aba8 <__assert_fail@plt+0x9650>
   1a9ec:	bl	113fc <__ctype_b_loc@plt>
   1a9f0:	mov	lr, #1
   1a9f4:	ldr	r3, [r0]
   1a9f8:	sub	r3, r3, #2
   1a9fc:	ldrh	r0, [r3, #2]!
   1aa00:	asr	r2, r4, #5
   1aa04:	and	ip, r4, #31
   1aa08:	tst	r0, #8
   1aa0c:	add	r4, r4, #1
   1aa10:	ldrne	r1, [r5, r2, lsl #2]
   1aa14:	orrne	r1, r1, lr, lsl ip
   1aa18:	strne	r1, [r5, r2, lsl #2]
   1aa1c:	cmp	r4, #256	; 0x100
   1aa20:	bne	1a9fc <__assert_fail@plt+0x94a4>
   1aa24:	mov	r0, #0
   1aa28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa2c:	ldr	r0, [sp, #36]	; 0x24
   1aa30:	ldr	r1, [pc, #1956]	; 1b1dc <__assert_fail@plt+0x9c84>
   1aa34:	bl	111f8 <strcmp@plt>
   1aa38:	ldr	r3, [pc, #1936]	; 1b1d0 <__assert_fail@plt+0x9c78>
   1aa3c:	ldr	r2, [sp, #36]	; 0x24
   1aa40:	ldr	r4, [r7]
   1aa44:	cmp	r0, #0
   1aa48:	moveq	r2, r3
   1aa4c:	ldr	r3, [r9]
   1aa50:	str	r2, [sp, #36]	; 0x24
   1aa54:	cmp	r3, r4
   1aa58:	bne	1a95c <__assert_fail@plt+0x9404>
   1aa5c:	lsl	r4, r4, #1
   1aa60:	add	r4, r4, #1
   1aa64:	ldr	r0, [sl]
   1aa68:	lsl	r1, r4, #2
   1aa6c:	bl	247c0 <__assert_fail@plt+0x13268>
   1aa70:	subs	r8, r0, #0
   1aa74:	beq	1ad34 <__assert_fail@plt+0x97dc>
   1aa78:	str	r8, [sl]
   1aa7c:	str	r4, [r9]
   1aa80:	ldr	r4, [r7]
   1aa84:	b	1a960 <__assert_fail@plt+0x9408>
   1aa88:	ldr	r1, [pc, #1868]	; 1b1dc <__assert_fail@plt+0x9c84>
   1aa8c:	ldr	r0, [sp, #36]	; 0x24
   1aa90:	bl	111f8 <strcmp@plt>
   1aa94:	subs	r4, r0, #0
   1aa98:	beq	1aaf4 <__assert_fail@plt+0x959c>
   1aa9c:	ldr	r1, [pc, #1852]	; 1b1e0 <__assert_fail@plt+0x9c88>
   1aaa0:	ldr	r0, [sp, #36]	; 0x24
   1aaa4:	bl	111f8 <strcmp@plt>
   1aaa8:	subs	r4, r0, #0
   1aaac:	bne	1ab3c <__assert_fail@plt+0x95e4>
   1aab0:	cmp	r6, #0
   1aab4:	bne	1ad94 <__assert_fail@plt+0x983c>
   1aab8:	bl	113fc <__ctype_b_loc@plt>
   1aabc:	mov	ip, #1
   1aac0:	ldr	r3, [r0]
   1aac4:	sub	r3, r3, #2
   1aac8:	ldrh	r2, [r3, #2]!
   1aacc:	asr	r1, r4, #5
   1aad0:	and	r0, r4, #31
   1aad4:	tst	r2, #8192	; 0x2000
   1aad8:	add	r4, r4, #1
   1aadc:	ldrne	r2, [r5, r1, lsl #2]
   1aae0:	orrne	r2, r2, ip, lsl r0
   1aae4:	strne	r2, [r5, r1, lsl #2]
   1aae8:	cmp	r4, #256	; 0x100
   1aaec:	bne	1aac8 <__assert_fail@plt+0x9570>
   1aaf0:	b	1a9dc <__assert_fail@plt+0x9484>
   1aaf4:	cmp	r6, #0
   1aaf8:	bne	1ace4 <__assert_fail@plt+0x978c>
   1aafc:	bl	113fc <__ctype_b_loc@plt>
   1ab00:	mov	ip, #1
   1ab04:	ldr	r3, [r0]
   1ab08:	sub	r3, r3, #2
   1ab0c:	ldrh	r2, [r3, #2]!
   1ab10:	asr	r1, r4, #5
   1ab14:	and	r0, r4, #31
   1ab18:	tst	r2, #512	; 0x200
   1ab1c:	add	r4, r4, #1
   1ab20:	ldrne	r2, [r5, r1, lsl #2]
   1ab24:	orrne	r2, r2, ip, lsl r0
   1ab28:	strne	r2, [r5, r1, lsl #2]
   1ab2c:	cmp	r4, #256	; 0x100
   1ab30:	bne	1ab0c <__assert_fail@plt+0x95b4>
   1ab34:	mov	r0, #0
   1ab38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ab3c:	ldr	r1, [pc, #1676]	; 1b1d0 <__assert_fail@plt+0x9c78>
   1ab40:	ldr	r0, [sp, #36]	; 0x24
   1ab44:	bl	111f8 <strcmp@plt>
   1ab48:	subs	r4, r0, #0
   1ab4c:	beq	1abf8 <__assert_fail@plt+0x96a0>
   1ab50:	ldr	r1, [pc, #1676]	; 1b1e4 <__assert_fail@plt+0x9c8c>
   1ab54:	ldr	r0, [sp, #36]	; 0x24
   1ab58:	bl	111f8 <strcmp@plt>
   1ab5c:	subs	r4, r0, #0
   1ab60:	bne	1ac8c <__assert_fail@plt+0x9734>
   1ab64:	cmp	r6, #0
   1ab68:	bne	1af84 <__assert_fail@plt+0x9a2c>
   1ab6c:	bl	113fc <__ctype_b_loc@plt>
   1ab70:	mov	ip, #1
   1ab74:	ldr	r3, [r0]
   1ab78:	sub	r3, r3, #2
   1ab7c:	ldrh	r1, [r3, #2]!
   1ab80:	asr	r2, r4, #5
   1ab84:	and	r0, r4, #31
   1ab88:	tst	r1, #2048	; 0x800
   1ab8c:	add	r4, r4, #1
   1ab90:	ldrne	r1, [r5, r2, lsl #2]
   1ab94:	orrne	r1, r1, ip, lsl r0
   1ab98:	strne	r1, [r5, r2, lsl #2]
   1ab9c:	cmp	r4, #256	; 0x100
   1aba0:	bne	1ab7c <__assert_fail@plt+0x9624>
   1aba4:	b	1a9dc <__assert_fail@plt+0x9484>
   1aba8:	bl	113fc <__ctype_b_loc@plt>
   1abac:	mov	r4, #1
   1abb0:	mov	r1, r6
   1abb4:	ldr	r3, [r0]
   1abb8:	add	ip, r3, #508	; 0x1fc
   1abbc:	add	ip, ip, #2
   1abc0:	sub	r3, r3, #2
   1abc4:	ldrh	r2, [r3, #2]!
   1abc8:	tst	r2, #8
   1abcc:	beq	1abe8 <__assert_fail@plt+0x9690>
   1abd0:	ldrb	r2, [r1]
   1abd4:	and	lr, r2, #31
   1abd8:	asr	r2, r2, #5
   1abdc:	ldr	r0, [r5, r2, lsl #2]
   1abe0:	orr	r0, r0, r4, lsl lr
   1abe4:	str	r0, [r5, r2, lsl #2]
   1abe8:	cmp	ip, r3
   1abec:	add	r1, r1, #1
   1abf0:	bne	1abc4 <__assert_fail@plt+0x966c>
   1abf4:	b	1a9dc <__assert_fail@plt+0x9484>
   1abf8:	cmp	r6, #0
   1abfc:	bne	1ade4 <__assert_fail@plt+0x988c>
   1ac00:	bl	113fc <__ctype_b_loc@plt>
   1ac04:	mov	ip, #1
   1ac08:	ldr	r3, [r0]
   1ac0c:	sub	r3, r3, #2
   1ac10:	ldrh	r2, [r3, #2]!
   1ac14:	asr	r1, r4, #5
   1ac18:	and	r0, r4, #31
   1ac1c:	tst	r2, #1024	; 0x400
   1ac20:	add	r4, r4, #1
   1ac24:	ldrne	r2, [r5, r1, lsl #2]
   1ac28:	orrne	r2, r2, ip, lsl r0
   1ac2c:	strne	r2, [r5, r1, lsl #2]
   1ac30:	cmp	r4, #256	; 0x100
   1ac34:	bne	1ac10 <__assert_fail@plt+0x96b8>
   1ac38:	b	1a9dc <__assert_fail@plt+0x9484>
   1ac3c:	bl	113fc <__ctype_b_loc@plt>
   1ac40:	mov	r4, #1
   1ac44:	mov	r1, r6
   1ac48:	ldr	r3, [r0]
   1ac4c:	add	ip, r3, #508	; 0x1fc
   1ac50:	add	ip, ip, #2
   1ac54:	sub	r3, r3, #2
   1ac58:	ldrh	r2, [r3, #2]!
   1ac5c:	tst	r2, #2
   1ac60:	beq	1ac7c <__assert_fail@plt+0x9724>
   1ac64:	ldrb	r2, [r1]
   1ac68:	and	lr, r2, #31
   1ac6c:	asr	r2, r2, #5
   1ac70:	ldr	r0, [r5, r2, lsl #2]
   1ac74:	orr	r0, r0, r4, lsl lr
   1ac78:	str	r0, [r5, r2, lsl #2]
   1ac7c:	cmp	ip, r3
   1ac80:	add	r1, r1, #1
   1ac84:	bne	1ac58 <__assert_fail@plt+0x9700>
   1ac88:	b	1a9dc <__assert_fail@plt+0x9484>
   1ac8c:	ldr	r1, [pc, #1364]	; 1b1e8 <__assert_fail@plt+0x9c90>
   1ac90:	ldr	r0, [sp, #36]	; 0x24
   1ac94:	bl	111f8 <strcmp@plt>
   1ac98:	subs	r4, r0, #0
   1ac9c:	bne	1ad3c <__assert_fail@plt+0x97e4>
   1aca0:	cmp	r6, #0
   1aca4:	bne	1afd4 <__assert_fail@plt+0x9a7c>
   1aca8:	bl	113fc <__ctype_b_loc@plt>
   1acac:	mov	ip, #1
   1acb0:	ldr	r3, [r0]
   1acb4:	sub	r3, r3, #2
   1acb8:	ldrh	r2, [r3, #2]!
   1acbc:	asr	r1, r4, #5
   1acc0:	and	r0, r4, #31
   1acc4:	tst	r2, #16384	; 0x4000
   1acc8:	add	r4, r4, #1
   1accc:	ldrne	r2, [r5, r1, lsl #2]
   1acd0:	orrne	r2, r2, ip, lsl r0
   1acd4:	strne	r2, [r5, r1, lsl #2]
   1acd8:	cmp	r4, #256	; 0x100
   1acdc:	bne	1acb8 <__assert_fail@plt+0x9760>
   1ace0:	b	1a9dc <__assert_fail@plt+0x9484>
   1ace4:	bl	113fc <__ctype_b_loc@plt>
   1ace8:	mov	r4, #1
   1acec:	mov	r1, r6
   1acf0:	ldr	r3, [r0]
   1acf4:	add	ip, r3, #508	; 0x1fc
   1acf8:	add	ip, ip, #2
   1acfc:	sub	r3, r3, #2
   1ad00:	ldrh	r2, [r3, #2]!
   1ad04:	tst	r2, #512	; 0x200
   1ad08:	beq	1ad24 <__assert_fail@plt+0x97cc>
   1ad0c:	ldrb	r2, [r1]
   1ad10:	and	lr, r2, #31
   1ad14:	asr	r2, r2, #5
   1ad18:	ldr	r0, [r5, r2, lsl #2]
   1ad1c:	orr	r0, r0, r4, lsl lr
   1ad20:	str	r0, [r5, r2, lsl #2]
   1ad24:	cmp	ip, r3
   1ad28:	add	r1, r1, #1
   1ad2c:	bne	1ad00 <__assert_fail@plt+0x97a8>
   1ad30:	b	1a9dc <__assert_fail@plt+0x9484>
   1ad34:	mov	r0, #12
   1ad38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ad3c:	ldr	r1, [pc, #1160]	; 1b1cc <__assert_fail@plt+0x9c74>
   1ad40:	ldr	r0, [sp, #36]	; 0x24
   1ad44:	bl	111f8 <strcmp@plt>
   1ad48:	subs	r4, r0, #0
   1ad4c:	bne	1ae34 <__assert_fail@plt+0x98dc>
   1ad50:	cmp	r6, #0
   1ad54:	bne	1ae8c <__assert_fail@plt+0x9934>
   1ad58:	bl	113fc <__ctype_b_loc@plt>
   1ad5c:	mov	ip, #1
   1ad60:	ldr	r3, [r0]
   1ad64:	sub	r3, r3, #2
   1ad68:	ldrh	r2, [r3, #2]!
   1ad6c:	asr	r1, r4, #5
   1ad70:	and	r0, r4, #31
   1ad74:	tst	r2, #256	; 0x100
   1ad78:	add	r4, r4, #1
   1ad7c:	ldrne	r2, [r5, r1, lsl #2]
   1ad80:	orrne	r2, r2, ip, lsl r0
   1ad84:	strne	r2, [r5, r1, lsl #2]
   1ad88:	cmp	r4, #256	; 0x100
   1ad8c:	bne	1ad68 <__assert_fail@plt+0x9810>
   1ad90:	b	1a9dc <__assert_fail@plt+0x9484>
   1ad94:	bl	113fc <__ctype_b_loc@plt>
   1ad98:	mov	r4, #1
   1ad9c:	mov	r1, r6
   1ada0:	ldr	r3, [r0]
   1ada4:	add	ip, r3, #508	; 0x1fc
   1ada8:	add	ip, ip, #2
   1adac:	sub	r3, r3, #2
   1adb0:	ldrh	r2, [r3, #2]!
   1adb4:	tst	r2, #8192	; 0x2000
   1adb8:	beq	1add4 <__assert_fail@plt+0x987c>
   1adbc:	ldrb	r2, [r1]
   1adc0:	and	lr, r2, #31
   1adc4:	asr	r2, r2, #5
   1adc8:	ldr	r0, [r5, r2, lsl #2]
   1adcc:	orr	r0, r0, r4, lsl lr
   1add0:	str	r0, [r5, r2, lsl #2]
   1add4:	cmp	r3, ip
   1add8:	add	r1, r1, #1
   1addc:	bne	1adb0 <__assert_fail@plt+0x9858>
   1ade0:	b	1a9dc <__assert_fail@plt+0x9484>
   1ade4:	bl	113fc <__ctype_b_loc@plt>
   1ade8:	mov	r4, #1
   1adec:	mov	r1, r6
   1adf0:	ldr	r3, [r0]
   1adf4:	add	ip, r3, #508	; 0x1fc
   1adf8:	add	ip, ip, #2
   1adfc:	sub	r3, r3, #2
   1ae00:	ldrh	r2, [r3, #2]!
   1ae04:	tst	r2, #1024	; 0x400
   1ae08:	beq	1ae24 <__assert_fail@plt+0x98cc>
   1ae0c:	ldrb	r2, [r1]
   1ae10:	and	lr, r2, #31
   1ae14:	asr	r2, r2, #5
   1ae18:	ldr	r0, [r5, r2, lsl #2]
   1ae1c:	orr	r0, r0, r4, lsl lr
   1ae20:	str	r0, [r5, r2, lsl #2]
   1ae24:	cmp	ip, r3
   1ae28:	add	r1, r1, #1
   1ae2c:	bne	1ae00 <__assert_fail@plt+0x98a8>
   1ae30:	b	1a9dc <__assert_fail@plt+0x9484>
   1ae34:	ldr	r1, [pc, #944]	; 1b1ec <__assert_fail@plt+0x9c94>
   1ae38:	ldr	r0, [sp, #36]	; 0x24
   1ae3c:	bl	111f8 <strcmp@plt>
   1ae40:	subs	r4, r0, #0
   1ae44:	bne	1af2c <__assert_fail@plt+0x99d4>
   1ae48:	cmp	r6, #0
   1ae4c:	bne	1aedc <__assert_fail@plt+0x9984>
   1ae50:	bl	113fc <__ctype_b_loc@plt>
   1ae54:	mov	ip, #1
   1ae58:	ldr	r3, [r0]
   1ae5c:	sub	r3, r3, #2
   1ae60:	ldrh	r2, [r3, #2]!
   1ae64:	asr	r1, r4, #5
   1ae68:	and	r0, r4, #31
   1ae6c:	tst	r2, #1
   1ae70:	add	r4, r4, #1
   1ae74:	ldrne	r2, [r5, r1, lsl #2]
   1ae78:	orrne	r2, r2, ip, lsl r0
   1ae7c:	strne	r2, [r5, r1, lsl #2]
   1ae80:	cmp	r4, #256	; 0x100
   1ae84:	bne	1ae60 <__assert_fail@plt+0x9908>
   1ae88:	b	1a9dc <__assert_fail@plt+0x9484>
   1ae8c:	bl	113fc <__ctype_b_loc@plt>
   1ae90:	mov	r1, r6
   1ae94:	mov	lr, #1
   1ae98:	ldr	r3, [r0]
   1ae9c:	add	r0, r3, #508	; 0x1fc
   1aea0:	add	r0, r0, #2
   1aea4:	sub	r3, r3, #2
   1aea8:	ldrh	r2, [r3, #2]!
   1aeac:	tst	r2, #256	; 0x100
   1aeb0:	beq	1aecc <__assert_fail@plt+0x9974>
   1aeb4:	ldrb	r2, [r1]
   1aeb8:	and	r4, r2, #31
   1aebc:	asr	r2, r2, #5
   1aec0:	ldr	ip, [r5, r2, lsl #2]
   1aec4:	orr	ip, ip, lr, lsl r4
   1aec8:	str	ip, [r5, r2, lsl #2]
   1aecc:	cmp	r0, r3
   1aed0:	add	r1, r1, #1
   1aed4:	bne	1aea8 <__assert_fail@plt+0x9950>
   1aed8:	b	1a9dc <__assert_fail@plt+0x9484>
   1aedc:	bl	113fc <__ctype_b_loc@plt>
   1aee0:	mov	r1, r6
   1aee4:	mov	lr, #1
   1aee8:	ldr	r3, [r0]
   1aeec:	add	r0, r3, #508	; 0x1fc
   1aef0:	add	r0, r0, #2
   1aef4:	sub	r3, r3, #2
   1aef8:	ldrh	r2, [r3, #2]!
   1aefc:	tst	r2, #1
   1af00:	beq	1af1c <__assert_fail@plt+0x99c4>
   1af04:	ldrb	r2, [r1]
   1af08:	and	r4, r2, #31
   1af0c:	asr	r2, r2, #5
   1af10:	ldr	ip, [r5, r2, lsl #2]
   1af14:	orr	ip, ip, lr, lsl r4
   1af18:	str	ip, [r5, r2, lsl #2]
   1af1c:	cmp	r0, r3
   1af20:	add	r1, r1, #1
   1af24:	bne	1aef8 <__assert_fail@plt+0x99a0>
   1af28:	b	1a9dc <__assert_fail@plt+0x9484>
   1af2c:	ldr	r1, [pc, #700]	; 1b1f0 <__assert_fail@plt+0x9c98>
   1af30:	ldr	r0, [sp, #36]	; 0x24
   1af34:	bl	111f8 <strcmp@plt>
   1af38:	subs	r4, r0, #0
   1af3c:	bne	1b074 <__assert_fail@plt+0x9b1c>
   1af40:	cmp	r6, #0
   1af44:	bne	1b024 <__assert_fail@plt+0x9acc>
   1af48:	bl	113fc <__ctype_b_loc@plt>
   1af4c:	mov	ip, #1
   1af50:	ldr	r3, [r0]
   1af54:	sub	r3, r3, #2
   1af58:	ldrsh	r2, [r3, #2]!
   1af5c:	cmp	r2, #0
   1af60:	asrlt	r0, r4, #5
   1af64:	andlt	r1, r4, #31
   1af68:	ldrlt	r2, [r5, r0, lsl #2]
   1af6c:	add	r4, r4, #1
   1af70:	orrlt	r2, r2, ip, lsl r1
   1af74:	strlt	r2, [r5, r0, lsl #2]
   1af78:	cmp	r4, #256	; 0x100
   1af7c:	bne	1af58 <__assert_fail@plt+0x9a00>
   1af80:	b	1a9dc <__assert_fail@plt+0x9484>
   1af84:	bl	113fc <__ctype_b_loc@plt>
   1af88:	mov	r1, r6
   1af8c:	mov	lr, #1
   1af90:	ldr	r3, [r0]
   1af94:	add	r2, r3, #508	; 0x1fc
   1af98:	add	r2, r2, #2
   1af9c:	sub	r3, r3, #2
   1afa0:	ldrh	r0, [r3, #2]!
   1afa4:	tst	r0, #2048	; 0x800
   1afa8:	beq	1afc4 <__assert_fail@plt+0x9a6c>
   1afac:	ldrb	r0, [r1]
   1afb0:	and	r4, r0, #31
   1afb4:	asr	r0, r0, #5
   1afb8:	ldr	ip, [r5, r0, lsl #2]
   1afbc:	orr	ip, ip, lr, lsl r4
   1afc0:	str	ip, [r5, r0, lsl #2]
   1afc4:	cmp	r2, r3
   1afc8:	add	r1, r1, #1
   1afcc:	bne	1afa0 <__assert_fail@plt+0x9a48>
   1afd0:	b	1a9dc <__assert_fail@plt+0x9484>
   1afd4:	bl	113fc <__ctype_b_loc@plt>
   1afd8:	mov	r1, r6
   1afdc:	mov	lr, #1
   1afe0:	ldr	r3, [r0]
   1afe4:	add	r0, r3, #508	; 0x1fc
   1afe8:	add	r0, r0, #2
   1afec:	sub	r3, r3, #2
   1aff0:	ldrh	r2, [r3, #2]!
   1aff4:	tst	r2, #16384	; 0x4000
   1aff8:	beq	1b014 <__assert_fail@plt+0x9abc>
   1affc:	ldrb	r2, [r1]
   1b000:	and	r4, r2, #31
   1b004:	asr	r2, r2, #5
   1b008:	ldr	ip, [r5, r2, lsl #2]
   1b00c:	orr	ip, ip, lr, lsl r4
   1b010:	str	ip, [r5, r2, lsl #2]
   1b014:	cmp	r0, r3
   1b018:	add	r1, r1, #1
   1b01c:	bne	1aff0 <__assert_fail@plt+0x9a98>
   1b020:	b	1a9dc <__assert_fail@plt+0x9484>
   1b024:	bl	113fc <__ctype_b_loc@plt>
   1b028:	mov	r1, r6
   1b02c:	mov	lr, #1
   1b030:	ldr	r3, [r0]
   1b034:	add	r0, r3, #508	; 0x1fc
   1b038:	add	r0, r0, #2
   1b03c:	sub	r3, r3, #2
   1b040:	ldrsh	r2, [r3, #2]!
   1b044:	cmp	r2, #0
   1b048:	bge	1b064 <__assert_fail@plt+0x9b0c>
   1b04c:	ldrb	r2, [r1]
   1b050:	and	r4, r2, #31
   1b054:	asr	r2, r2, #5
   1b058:	ldr	ip, [r5, r2, lsl #2]
   1b05c:	orr	ip, ip, lr, lsl r4
   1b060:	str	ip, [r5, r2, lsl #2]
   1b064:	cmp	r0, r3
   1b068:	add	r1, r1, #1
   1b06c:	bne	1b040 <__assert_fail@plt+0x9ae8>
   1b070:	b	1a9dc <__assert_fail@plt+0x9484>
   1b074:	ldr	r1, [pc, #376]	; 1b1f4 <__assert_fail@plt+0x9c9c>
   1b078:	ldr	r0, [sp, #36]	; 0x24
   1b07c:	bl	111f8 <strcmp@plt>
   1b080:	subs	r4, r0, #0
   1b084:	bne	1b0cc <__assert_fail@plt+0x9b74>
   1b088:	cmp	r6, #0
   1b08c:	bne	1b0e8 <__assert_fail@plt+0x9b90>
   1b090:	bl	113fc <__ctype_b_loc@plt>
   1b094:	mov	ip, #1
   1b098:	ldr	r3, [r0]
   1b09c:	sub	r3, r3, #2
   1b0a0:	ldrh	r2, [r3, #2]!
   1b0a4:	asr	r1, r4, #5
   1b0a8:	and	r0, r4, #31
   1b0ac:	tst	r2, #4
   1b0b0:	add	r4, r4, #1
   1b0b4:	ldrne	r2, [r5, r1, lsl #2]
   1b0b8:	orrne	r2, r2, ip, lsl r0
   1b0bc:	strne	r2, [r5, r1, lsl #2]
   1b0c0:	cmp	r4, #256	; 0x100
   1b0c4:	bne	1b0a0 <__assert_fail@plt+0x9b48>
   1b0c8:	b	1a9dc <__assert_fail@plt+0x9484>
   1b0cc:	ldr	r1, [pc, #292]	; 1b1f8 <__assert_fail@plt+0x9ca0>
   1b0d0:	ldr	r0, [sp, #36]	; 0x24
   1b0d4:	bl	111f8 <strcmp@plt>
   1b0d8:	subs	r4, r0, #0
   1b0dc:	beq	1b138 <__assert_fail@plt+0x9be0>
   1b0e0:	mov	r0, #4
   1b0e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b0e8:	bl	113fc <__ctype_b_loc@plt>
   1b0ec:	mov	r1, r6
   1b0f0:	mov	lr, #1
   1b0f4:	ldr	r3, [r0]
   1b0f8:	add	r0, r3, #508	; 0x1fc
   1b0fc:	add	r0, r0, #2
   1b100:	sub	r3, r3, #2
   1b104:	ldrh	r2, [r3, #2]!
   1b108:	tst	r2, #4
   1b10c:	beq	1b128 <__assert_fail@plt+0x9bd0>
   1b110:	ldrb	r2, [r1]
   1b114:	and	r4, r2, #31
   1b118:	asr	r2, r2, #5
   1b11c:	ldr	ip, [r5, r2, lsl #2]
   1b120:	orr	ip, ip, lr, lsl r4
   1b124:	str	ip, [r5, r2, lsl #2]
   1b128:	cmp	r3, r0
   1b12c:	add	r1, r1, #1
   1b130:	bne	1b104 <__assert_fail@plt+0x9bac>
   1b134:	b	1a9dc <__assert_fail@plt+0x9484>
   1b138:	cmp	r6, #0
   1b13c:	bne	1b17c <__assert_fail@plt+0x9c24>
   1b140:	bl	113fc <__ctype_b_loc@plt>
   1b144:	mov	ip, #1
   1b148:	ldr	r3, [r0]
   1b14c:	sub	r3, r3, #2
   1b150:	ldrh	r2, [r3, #2]!
   1b154:	asr	r1, r4, #5
   1b158:	and	r0, r4, #31
   1b15c:	tst	r2, #4096	; 0x1000
   1b160:	add	r4, r4, #1
   1b164:	ldrne	r2, [r5, r1, lsl #2]
   1b168:	orrne	r2, r2, ip, lsl r0
   1b16c:	strne	r2, [r5, r1, lsl #2]
   1b170:	cmp	r4, #256	; 0x100
   1b174:	bne	1b150 <__assert_fail@plt+0x9bf8>
   1b178:	b	1a9dc <__assert_fail@plt+0x9484>
   1b17c:	bl	113fc <__ctype_b_loc@plt>
   1b180:	mov	r1, r6
   1b184:	mov	lr, #1
   1b188:	ldr	r3, [r0]
   1b18c:	add	r0, r3, #508	; 0x1fc
   1b190:	add	r0, r0, #2
   1b194:	sub	r3, r3, #2
   1b198:	ldrh	r2, [r3, #2]!
   1b19c:	tst	r2, #4096	; 0x1000
   1b1a0:	beq	1b1bc <__assert_fail@plt+0x9c64>
   1b1a4:	ldrb	r2, [r1]
   1b1a8:	and	r4, r2, #31
   1b1ac:	asr	r2, r2, #5
   1b1b0:	ldr	ip, [r5, r2, lsl #2]
   1b1b4:	orr	ip, ip, lr, lsl r4
   1b1b8:	str	ip, [r5, r2, lsl #2]
   1b1bc:	cmp	r0, r3
   1b1c0:	add	r1, r1, #1
   1b1c4:	bne	1b198 <__assert_fail@plt+0x9c40>
   1b1c8:	b	1a9dc <__assert_fail@plt+0x9484>
   1b1cc:	andeq	r6, r2, r0, ror r3
   1b1d0:	andeq	r6, r2, r8, ror #6
   1b1d4:	andeq	r6, r2, r0, lsl #7
   1b1d8:	andeq	r6, r2, r8, lsl #7
   1b1dc:	andeq	r6, r2, r8, ror r3
   1b1e0:	muleq	r2, r0, r3
   1b1e4:	muleq	r2, r8, r3
   1b1e8:	andeq	r6, r2, r0, lsr #7
   1b1ec:	andeq	r6, r2, r8, lsr #7
   1b1f0:			; <UNDEFINED> instruction: 0x000263b0
   1b1f4:			; <UNDEFINED> instruction: 0x000263b8
   1b1f8:	andeq	r6, r2, r0, asr #7
   1b1fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b200:	sub	sp, sp, #44	; 0x2c
   1b204:	mov	r6, r0
   1b208:	mov	fp, r1
   1b20c:	mov	r9, #0
   1b210:	mov	r1, #1
   1b214:	mov	r0, #32
   1b218:	mov	sl, r2
   1b21c:	mov	r5, r3
   1b220:	str	r9, [sp, #20]
   1b224:	ldrb	r8, [sp, #80]	; 0x50
   1b228:	bl	2474c <__assert_fail@plt+0x131f4>
   1b22c:	subs	r4, r0, #0
   1b230:	beq	1b40c <__assert_fail@plt+0x9eb4>
   1b234:	mov	r1, #1
   1b238:	mov	r0, #40	; 0x28
   1b23c:	bl	2474c <__assert_fail@plt+0x131f4>
   1b240:	subs	r7, r0, #0
   1b244:	beq	1b428 <__assert_fail@plt+0x9ed0>
   1b248:	ldrb	r2, [r7, #16]
   1b24c:	and	r3, r8, #1
   1b250:	mov	r0, fp
   1b254:	bic	r2, r2, #1
   1b258:	orr	r3, r3, r2
   1b25c:	add	r2, sp, #20
   1b260:	strb	r3, [r7, #16]
   1b264:	mov	r1, r4
   1b268:	stm	sp, {r2, sl}
   1b26c:	add	r3, r7, #36	; 0x24
   1b270:	str	r9, [sp, #8]
   1b274:	add	r2, r7, #12
   1b278:	bl	1a90c <__assert_fail@plt+0x93b4>
   1b27c:	subs	sl, r0, #0
   1b280:	bne	1b444 <__assert_fail@plt+0x9eec>
   1b284:	ldrb	r3, [r5]
   1b288:	cmp	r3, #0
   1b28c:	movne	ip, #1
   1b290:	beq	1b2b4 <__assert_fail@plt+0x9d5c>
   1b294:	asr	r1, r3, #5
   1b298:	and	r0, r3, #31
   1b29c:	ldr	r2, [r4, r1, lsl #2]
   1b2a0:	ldrb	r3, [r5, #1]!
   1b2a4:	orr	r2, r2, ip, lsl r0
   1b2a8:	cmp	r3, #0
   1b2ac:	str	r2, [r4, r1, lsl #2]
   1b2b0:	bne	1b294 <__assert_fail@plt+0x9d3c>
   1b2b4:	cmp	r8, #0
   1b2b8:	bne	1b3ac <__assert_fail@plt+0x9e54>
   1b2bc:	ldr	r3, [r6, #92]	; 0x5c
   1b2c0:	cmp	r3, #1
   1b2c4:	ble	1b2f0 <__assert_fail@plt+0x9d98>
   1b2c8:	ldr	r1, [r6, #60]	; 0x3c
   1b2cc:	sub	r3, r4, #4
   1b2d0:	sub	r1, r1, #4
   1b2d4:	add	ip, r4, #28
   1b2d8:	ldr	r2, [r3, #4]
   1b2dc:	ldr	r0, [r1, #4]!
   1b2e0:	and	r2, r2, r0
   1b2e4:	str	r2, [r3, #4]!
   1b2e8:	cmp	ip, r3
   1b2ec:	bne	1b2d8 <__assert_fail@plt+0x9d80>
   1b2f0:	add	r8, sp, #24
   1b2f4:	mov	r5, #0
   1b2f8:	add	sl, r6, #56	; 0x38
   1b2fc:	add	fp, r6, #64	; 0x40
   1b300:	str	r8, [sp]
   1b304:	mov	ip, #3
   1b308:	str	r5, [r8, #4]
   1b30c:	mov	r3, r5
   1b310:	mov	r2, r5
   1b314:	mov	r0, sl
   1b318:	mov	r1, fp
   1b31c:	str	r4, [sp, #24]
   1b320:	strb	ip, [sp, #28]
   1b324:	bl	17b4c <__assert_fail@plt+0x65f4>
   1b328:	subs	r9, r0, #0
   1b32c:	beq	1b3cc <__assert_fail@plt+0x9e74>
   1b330:	ldr	r3, [r6, #92]	; 0x5c
   1b334:	cmp	r3, #1
   1b338:	ble	1b3f8 <__assert_fail@plt+0x9ea0>
   1b33c:	ldrb	r3, [r6, #88]	; 0x58
   1b340:	mov	ip, #6
   1b344:	str	r8, [sp]
   1b348:	orr	r3, r3, #2
   1b34c:	strb	r3, [r6, #88]	; 0x58
   1b350:	mov	r2, r5
   1b354:	mov	r3, r5
   1b358:	mov	r1, fp
   1b35c:	mov	r0, sl
   1b360:	str	r7, [sp, #24]
   1b364:	strb	ip, [sp, #28]
   1b368:	bl	17b4c <__assert_fail@plt+0x65f4>
   1b36c:	subs	r3, r0, #0
   1b370:	beq	1b3cc <__assert_fail@plt+0x9e74>
   1b374:	add	ip, sp, #32
   1b378:	mov	r2, r9
   1b37c:	mov	lr, #10
   1b380:	mov	r1, fp
   1b384:	mov	r0, sl
   1b388:	str	ip, [sp]
   1b38c:	str	r5, [sp, #36]	; 0x24
   1b390:	str	r5, [sp, #32]
   1b394:	strb	lr, [sp, #36]	; 0x24
   1b398:	bl	17b4c <__assert_fail@plt+0x65f4>
   1b39c:	mov	r9, r0
   1b3a0:	mov	r0, r9
   1b3a4:	add	sp, sp, #44	; 0x2c
   1b3a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3ac:	sub	r3, r4, #4
   1b3b0:	add	r1, r4, #28
   1b3b4:	ldr	r2, [r3, #4]
   1b3b8:	mvn	r2, r2
   1b3bc:	str	r2, [r3, #4]!
   1b3c0:	cmp	r1, r3
   1b3c4:	bne	1b3b4 <__assert_fail@plt+0x9e5c>
   1b3c8:	b	1b2bc <__assert_fail@plt+0x9d64>
   1b3cc:	mov	r0, r4
   1b3d0:	bl	13908 <__assert_fail@plt+0x23b0>
   1b3d4:	mov	r0, r7
   1b3d8:	bl	16964 <__assert_fail@plt+0x540c>
   1b3dc:	ldr	r2, [sp, #84]	; 0x54
   1b3e0:	mov	r9, #0
   1b3e4:	mov	r3, #12
   1b3e8:	mov	r0, r9
   1b3ec:	str	r3, [r2]
   1b3f0:	add	sp, sp, #44	; 0x2c
   1b3f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3f8:	mov	r0, r7
   1b3fc:	bl	16964 <__assert_fail@plt+0x540c>
   1b400:	mov	r0, r9
   1b404:	add	sp, sp, #44	; 0x2c
   1b408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b40c:	ldr	r2, [sp, #84]	; 0x54
   1b410:	mov	r3, #12
   1b414:	mov	r9, r4
   1b418:	mov	r0, r9
   1b41c:	str	r3, [r2]
   1b420:	add	sp, sp, #44	; 0x2c
   1b424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b428:	mov	r0, r4
   1b42c:	bl	13908 <__assert_fail@plt+0x23b0>
   1b430:	ldr	r2, [sp, #84]	; 0x54
   1b434:	mov	r3, #12
   1b438:	mov	r9, r7
   1b43c:	str	r3, [r2]
   1b440:	b	1b3a0 <__assert_fail@plt+0x9e48>
   1b444:	mov	r0, r4
   1b448:	bl	13908 <__assert_fail@plt+0x23b0>
   1b44c:	mov	r0, r7
   1b450:	bl	16964 <__assert_fail@plt+0x540c>
   1b454:	ldr	r3, [sp, #84]	; 0x54
   1b458:	str	sl, [r3]
   1b45c:	b	1b3a0 <__assert_fail@plt+0x9e48>
   1b460:	ldr	ip, [r0]
   1b464:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b468:	sub	sp, sp, #308	; 0x134
   1b46c:	str	ip, [sp, #12]
   1b470:	ldr	ip, [ip, #92]	; 0x5c
   1b474:	cmp	ip, #1
   1b478:	ldr	ip, [r1]
   1b47c:	ldreq	r6, [r0, #12]
   1b480:	movne	r6, #0
   1b484:	lsreq	r6, r6, #22
   1b488:	andeq	r6, r6, #1
   1b48c:	cmp	ip, #0
   1b490:	ble	1b80c <__assert_fail@plt+0xa2b4>
   1b494:	mov	r7, r3
   1b498:	mov	r3, #0
   1b49c:	str	r2, [sp, #20]
   1b4a0:	str	r1, [sp, #24]
   1b4a4:	str	r0, [sp, #28]
   1b4a8:	str	r3, [sp, #8]
   1b4ac:	mov	r5, #1
   1b4b0:	b	1b4ec <__assert_fail@plt+0x9f94>
   1b4b4:	cmp	r4, #3
   1b4b8:	beq	1b62c <__assert_fail@plt+0xa0d4>
   1b4bc:	cmp	r4, #6
   1b4c0:	beq	1b6ac <__assert_fail@plt+0xa154>
   1b4c4:	and	r3, r4, #253	; 0xfd
   1b4c8:	cmp	r3, #5
   1b4cc:	beq	1b850 <__assert_fail@plt+0xa2f8>
   1b4d0:	cmp	r4, #2
   1b4d4:	beq	1b7ec <__assert_fail@plt+0xa294>
   1b4d8:	ldr	r3, [sp, #8]
   1b4dc:	add	r3, r3, #1
   1b4e0:	cmp	r3, ip
   1b4e4:	str	r3, [sp, #8]
   1b4e8:	bge	1b80c <__assert_fail@plt+0xa2b4>
   1b4ec:	ldr	r3, [sp, #20]
   1b4f0:	ldr	r1, [sp, #8]
   1b4f4:	ldr	r2, [r3]
   1b4f8:	ldr	r3, [sp, #12]
   1b4fc:	ldr	r8, [r2, r1, lsl #2]
   1b500:	ldr	r3, [r3]
   1b504:	lsl	r2, r8, #3
   1b508:	str	r2, [sp, #16]
   1b50c:	add	r2, r3, r2
   1b510:	ldrb	r4, [r2, #4]
   1b514:	cmp	r4, #1
   1b518:	bne	1b4b4 <__assert_fail@plt+0x9f5c>
   1b51c:	ldrb	fp, [r3, r8, lsl #3]
   1b520:	cmp	r6, #0
   1b524:	strb	r4, [r7, fp]
   1b528:	beq	1b53c <__assert_fail@plt+0x9fe4>
   1b52c:	bl	113cc <__ctype_tolower_loc@plt>
   1b530:	ldr	r3, [r0]
   1b534:	ldr	r3, [r3, fp, lsl #2]
   1b538:	strb	r4, [r7, r3]
   1b53c:	ldr	r3, [sp, #28]
   1b540:	ldr	r3, [r3, #12]
   1b544:	tst	r3, #4194304	; 0x400000
   1b548:	beq	1b620 <__assert_fail@plt+0xa0c8>
   1b54c:	ldr	r3, [sp, #12]
   1b550:	ldr	r3, [r3, #92]	; 0x5c
   1b554:	cmp	r3, #1
   1b558:	ble	1b620 <__assert_fail@plt+0xa0c8>
   1b55c:	ldr	r0, [sp, #12]
   1b560:	add	r1, r8, #1
   1b564:	ldr	r3, [r0]
   1b568:	ldrb	r2, [r3, r8, lsl #3]
   1b56c:	strb	r2, [sp, #48]	; 0x30
   1b570:	ldr	r2, [r0, #8]
   1b574:	cmp	r2, r1
   1b578:	bls	1b848 <__assert_fail@plt+0xa2f0>
   1b57c:	ldr	ip, [sp, #16]
   1b580:	ldr	lr, [pc, #744]	; 1b870 <__assert_fail@plt+0xa318>
   1b584:	add	r2, ip, #8
   1b588:	add	r3, r3, r2
   1b58c:	ldr	r2, [r3, #4]
   1b590:	bic	r2, r2, #-16777216	; 0xff000000
   1b594:	bic	r2, r2, #14614528	; 0xdf0000
   1b598:	bic	r2, r2, #65280	; 0xff00
   1b59c:	cmp	r2, lr
   1b5a0:	bne	1b848 <__assert_fail@plt+0xa2f0>
   1b5a4:	add	r9, ip, #16
   1b5a8:	add	r4, sp, #49	; 0x31
   1b5ac:	b	1b5d8 <__assert_fail@plt+0xa080>
   1b5b0:	ldr	r3, [r0]
   1b5b4:	ldr	ip, [pc, #692]	; 1b870 <__assert_fail@plt+0xa318>
   1b5b8:	add	r3, r3, r9
   1b5bc:	add	r9, r9, #8
   1b5c0:	ldr	r2, [r3, #4]
   1b5c4:	bic	r2, r2, #-16777216	; 0xff000000
   1b5c8:	bic	r2, r2, #14614528	; 0xdf0000
   1b5cc:	bic	r2, r2, #65280	; 0xff00
   1b5d0:	cmp	r2, ip
   1b5d4:	bne	1b5f0 <__assert_fail@plt+0xa098>
   1b5d8:	ldrb	r3, [r3]
   1b5dc:	add	r1, r1, #1
   1b5e0:	strb	r3, [r4], #1
   1b5e4:	ldr	r3, [r0, #8]
   1b5e8:	cmp	r1, r3
   1b5ec:	bcc	1b5b0 <__assert_fail@plt+0xa058>
   1b5f0:	add	r3, sp, #48	; 0x30
   1b5f4:	sub	r4, r4, r3
   1b5f8:	mov	ip, #0
   1b5fc:	mov	r2, r4
   1b600:	add	r3, sp, #40	; 0x28
   1b604:	add	r1, sp, #48	; 0x30
   1b608:	add	r0, sp, #36	; 0x24
   1b60c:	str	ip, [sp, #40]	; 0x28
   1b610:	str	ip, [sp, #44]	; 0x2c
   1b614:	bl	24b68 <__assert_fail@plt+0x13610>
   1b618:	cmp	r4, r0
   1b61c:	beq	1b814 <__assert_fail@plt+0xa2bc>
   1b620:	ldr	r3, [sp, #24]
   1b624:	ldr	ip, [r3]
   1b628:	b	1b4d8 <__assert_fail@plt+0x9f80>
   1b62c:	mov	r8, #0
   1b630:	str	r7, [sp, #4]
   1b634:	ldr	r2, [sp, #16]
   1b638:	ldr	r9, [sp, #4]
   1b63c:	lsl	sl, r8, #5
   1b640:	ldr	r2, [r3, r2]
   1b644:	mov	r4, #0
   1b648:	ldr	fp, [r2, r8]
   1b64c:	lsr	r3, fp, r4
   1b650:	tst	r3, #1
   1b654:	add	r4, r4, #1
   1b658:	beq	1b678 <__assert_fail@plt+0xa120>
   1b65c:	cmp	r6, #0
   1b660:	strb	r5, [r9]
   1b664:	beq	1b678 <__assert_fail@plt+0xa120>
   1b668:	bl	113cc <__ctype_tolower_loc@plt>
   1b66c:	ldr	r3, [r0]
   1b670:	ldr	r3, [r3, sl]
   1b674:	strb	r5, [r7, r3]
   1b678:	cmp	r4, #32
   1b67c:	add	r9, r9, #1
   1b680:	add	sl, sl, #4
   1b684:	bne	1b64c <__assert_fail@plt+0xa0f4>
   1b688:	ldr	r3, [sp, #4]
   1b68c:	add	r8, r8, #4
   1b690:	add	r3, r3, #32
   1b694:	cmp	r8, #32
   1b698:	str	r3, [sp, #4]
   1b69c:	beq	1b620 <__assert_fail@plt+0xa0c8>
   1b6a0:	ldr	r3, [sp, #12]
   1b6a4:	ldr	r3, [r3]
   1b6a8:	b	1b634 <__assert_fail@plt+0xa0dc>
   1b6ac:	ldr	r3, [sp, #12]
   1b6b0:	ldr	r8, [r2]
   1b6b4:	ldr	r3, [r3, #92]	; 0x5c
   1b6b8:	cmp	r3, #1
   1b6bc:	ble	1b6e4 <__assert_fail@plt+0xa18c>
   1b6c0:	ldr	r3, [r8, #36]	; 0x24
   1b6c4:	cmp	r3, #0
   1b6c8:	bne	1b7a4 <__assert_fail@plt+0xa24c>
   1b6cc:	ldrb	r3, [r8, #16]
   1b6d0:	tst	r3, #1
   1b6d4:	bne	1b7a4 <__assert_fail@plt+0xa24c>
   1b6d8:	ldr	r3, [r8, #32]
   1b6dc:	cmp	r3, #0
   1b6e0:	bne	1b7a4 <__assert_fail@plt+0xa24c>
   1b6e4:	ldr	r3, [r8, #20]
   1b6e8:	cmp	r3, #0
   1b6ec:	ble	1b4d8 <__assert_fail@plt+0x9f80>
   1b6f0:	ldr	sl, [sp, #12]
   1b6f4:	ldr	r9, [sp, #28]
   1b6f8:	mov	r4, #0
   1b6fc:	mov	r3, #0
   1b700:	str	r3, [sp, #40]	; 0x28
   1b704:	str	r3, [sp, #44]	; 0x2c
   1b708:	ldr	r3, [r8]
   1b70c:	add	r2, sp, #40	; 0x28
   1b710:	add	r0, sp, #48	; 0x30
   1b714:	ldr	r1, [r3, r4, lsl #2]
   1b718:	bl	111e0 <wcrtomb@plt>
   1b71c:	lsl	r2, r4, #2
   1b720:	add	r4, r4, #1
   1b724:	cmn	r0, #1
   1b728:	beq	1b754 <__assert_fail@plt+0xa1fc>
   1b72c:	ldrb	fp, [sp, #48]	; 0x30
   1b730:	cmp	r6, #0
   1b734:	strb	r5, [r7, fp]
   1b738:	beq	1b754 <__assert_fail@plt+0xa1fc>
   1b73c:	str	r2, [sp, #4]
   1b740:	bl	113cc <__ctype_tolower_loc@plt>
   1b744:	ldr	r2, [sp, #4]
   1b748:	ldr	r3, [r0]
   1b74c:	ldr	r3, [r3, fp, lsl #2]
   1b750:	strb	r5, [r7, r3]
   1b754:	ldr	r3, [r9, #12]
   1b758:	tst	r3, #4194304	; 0x400000
   1b75c:	beq	1b794 <__assert_fail@plt+0xa23c>
   1b760:	ldr	r3, [sl, #92]	; 0x5c
   1b764:	cmp	r3, #1
   1b768:	ble	1b794 <__assert_fail@plt+0xa23c>
   1b76c:	ldr	r3, [r8]
   1b770:	ldr	r0, [r3, r2]
   1b774:	bl	11288 <towlower@plt>
   1b778:	add	r2, sp, #40	; 0x28
   1b77c:	mov	r1, r0
   1b780:	add	r0, sp, #48	; 0x30
   1b784:	bl	111e0 <wcrtomb@plt>
   1b788:	cmn	r0, #1
   1b78c:	ldrbne	r3, [sp, #48]	; 0x30
   1b790:	strbne	r5, [r7, r3]
   1b794:	ldr	r3, [r8, #20]
   1b798:	cmp	r4, r3
   1b79c:	blt	1b6fc <__assert_fail@plt+0xa1a4>
   1b7a0:	b	1b620 <__assert_fail@plt+0xa0c8>
   1b7a4:	mov	r3, #0
   1b7a8:	strb	r3, [sp, #40]	; 0x28
   1b7ac:	mov	r0, #0
   1b7b0:	add	r3, sp, #48	; 0x30
   1b7b4:	mov	r2, r5
   1b7b8:	add	r1, sp, #40	; 0x28
   1b7bc:	str	r0, [sp, #48]	; 0x30
   1b7c0:	str	r0, [sp, #52]	; 0x34
   1b7c4:	bl	24b68 <__assert_fail@plt+0x13610>
   1b7c8:	ldrb	r3, [sp, #40]	; 0x28
   1b7cc:	cmn	r0, #2
   1b7d0:	strbeq	r5, [r7, r3]
   1b7d4:	add	r3, r3, #1
   1b7d8:	uxtb	r3, r3
   1b7dc:	cmp	r3, #0
   1b7e0:	strb	r3, [sp, #40]	; 0x28
   1b7e4:	bne	1b7ac <__assert_fail@plt+0xa254>
   1b7e8:	b	1b620 <__assert_fail@plt+0xa0c8>
   1b7ec:	mov	r0, r7
   1b7f0:	mov	r2, #256	; 0x100
   1b7f4:	mov	r1, #1
   1b7f8:	bl	1145c <memset@plt>
   1b7fc:	ldr	r2, [sp, #28]
   1b800:	ldrb	r3, [r2, #28]
   1b804:	orr	r3, r3, #1
   1b808:	strb	r3, [r2, #28]
   1b80c:	add	sp, sp, #308	; 0x134
   1b810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b814:	ldr	r0, [sp, #36]	; 0x24
   1b818:	bl	11288 <towlower@plt>
   1b81c:	add	r2, sp, #40	; 0x28
   1b820:	mov	r1, r0
   1b824:	add	r0, sp, #48	; 0x30
   1b828:	bl	111e0 <wcrtomb@plt>
   1b82c:	cmn	r0, #1
   1b830:	beq	1b620 <__assert_fail@plt+0xa0c8>
   1b834:	ldrb	r3, [sp, #48]	; 0x30
   1b838:	strb	r5, [r7, r3]
   1b83c:	ldr	r3, [sp, #24]
   1b840:	ldr	ip, [r3]
   1b844:	b	1b4d8 <__assert_fail@plt+0x9f80>
   1b848:	add	r4, sp, #49	; 0x31
   1b84c:	b	1b5f0 <__assert_fail@plt+0xa098>
   1b850:	mov	r0, r7
   1b854:	mov	r2, #256	; 0x100
   1b858:	mov	r1, #1
   1b85c:	bl	1145c <memset@plt>
   1b860:	cmp	r4, #2
   1b864:	beq	1b7fc <__assert_fail@plt+0xa2a4>
   1b868:	add	sp, sp, #308	; 0x134
   1b86c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b870:	eoreq	r0, r0, r1
   1b874:	add	ip, r0, r2, lsl #3
   1b878:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b87c:	ldrb	r6, [ip, #4]
   1b880:	ldr	r7, [sp, #32]
   1b884:	cmp	r6, #7
   1b888:	beq	1b968 <__assert_fail@plt+0xa410>
   1b88c:	ldr	ip, [r3, #80]	; 0x50
   1b890:	cmp	ip, #1
   1b894:	beq	1b97c <__assert_fail@plt+0xa424>
   1b898:	ldr	r5, [r3, #28]
   1b89c:	add	lr, r7, #1
   1b8a0:	cmp	r5, lr
   1b8a4:	ble	1b97c <__assert_fail@plt+0xa424>
   1b8a8:	ldr	r8, [r3, #8]
   1b8ac:	add	ip, r8, lr, lsl #2
   1b8b0:	ldr	lr, [r8, lr, lsl #2]
   1b8b4:	cmn	lr, #1
   1b8b8:	subeq	r5, r5, r7
   1b8bc:	moveq	r4, #1
   1b8c0:	beq	1b8d4 <__assert_fail@plt+0xa37c>
   1b8c4:	b	1b97c <__assert_fail@plt+0xa424>
   1b8c8:	ldr	lr, [ip, #4]!
   1b8cc:	cmn	lr, #1
   1b8d0:	bne	1b8e0 <__assert_fail@plt+0xa388>
   1b8d4:	add	r4, r4, #1
   1b8d8:	cmp	r4, r5
   1b8dc:	bne	1b8c8 <__assert_fail@plt+0xa370>
   1b8e0:	cmp	r6, #5
   1b8e4:	beq	1b988 <__assert_fail@plt+0xa430>
   1b8e8:	cmp	r4, #1
   1b8ec:	sub	r6, r6, #6
   1b8f0:	clz	r6, r6
   1b8f4:	lsr	r6, r6, #5
   1b8f8:	moveq	r6, #0
   1b8fc:	cmp	r6, #0
   1b900:	beq	1b97c <__assert_fail@plt+0xa424>
   1b904:	ldr	r9, [r0, r2, lsl #3]
   1b908:	ldr	ip, [r9, #32]
   1b90c:	cmp	ip, #0
   1b910:	beq	1b9c4 <__assert_fail@plt+0xa46c>
   1b914:	ldr	r0, [r9, #20]
   1b918:	cmp	r0, #0
   1b91c:	ldr	r5, [r8, r7, lsl #2]
   1b920:	ble	1b954 <__assert_fail@plt+0xa3fc>
   1b924:	ldr	r2, [r9]
   1b928:	ldr	r3, [r2]
   1b92c:	cmp	r5, r3
   1b930:	movne	r3, #0
   1b934:	bne	1b948 <__assert_fail@plt+0xa3f0>
   1b938:	b	1ba14 <__assert_fail@plt+0xa4bc>
   1b93c:	ldr	r1, [r2, #4]!
   1b940:	cmp	r5, r1
   1b944:	beq	1ba14 <__assert_fail@plt+0xa4bc>
   1b948:	add	r3, r3, #1
   1b94c:	cmp	r3, r0
   1b950:	bne	1b93c <__assert_fail@plt+0xa3e4>
   1b954:	ldr	r3, [r9, #36]	; 0x24
   1b958:	cmp	r3, #0
   1b95c:	ble	1ba58 <__assert_fail@plt+0xa500>
   1b960:	mov	r6, #0
   1b964:	b	1b9f8 <__assert_fail@plt+0xa4a0>
   1b968:	ldr	r2, [r3, #4]
   1b96c:	add	r0, r2, r7
   1b970:	ldrb	r1, [r2, r7]
   1b974:	cmp	r1, #193	; 0xc1
   1b978:	bhi	1ba24 <__assert_fail@plt+0xa4cc>
   1b97c:	mov	r4, #0
   1b980:	mov	r0, r4
   1b984:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b988:	ldr	r2, [r1]
   1b98c:	tst	r2, #64	; 0x40
   1b990:	beq	1b9b0 <__assert_fail@plt+0xa458>
   1b994:	tst	r2, #128	; 0x80
   1b998:	beq	1b980 <__assert_fail@plt+0xa428>
   1b99c:	ldr	r3, [r3, #4]
   1b9a0:	ldrb	r3, [r3, r7]
   1b9a4:	cmp	r3, #0
   1b9a8:	beq	1b97c <__assert_fail@plt+0xa424>
   1b9ac:	b	1b980 <__assert_fail@plt+0xa428>
   1b9b0:	ldr	r1, [r3, #4]
   1b9b4:	ldrb	r1, [r1, r7]
   1b9b8:	cmp	r1, #10
   1b9bc:	bne	1b994 <__assert_fail@plt+0xa43c>
   1b9c0:	b	1b97c <__assert_fail@plt+0xa424>
   1b9c4:	ldr	r3, [r9, #36]	; 0x24
   1b9c8:	ldr	r0, [r9, #20]
   1b9cc:	cmp	r3, #0
   1b9d0:	bne	1b918 <__assert_fail@plt+0xa3c0>
   1b9d4:	cmp	r0, #0
   1b9d8:	bne	1b918 <__assert_fail@plt+0xa3c0>
   1b9dc:	ldrb	r3, [r9, #16]
   1b9e0:	tst	r3, #1
   1b9e4:	bne	1b980 <__assert_fail@plt+0xa428>
   1b9e8:	b	1b97c <__assert_fail@plt+0xa424>
   1b9ec:	ldr	r3, [r9, #36]	; 0x24
   1b9f0:	cmp	r6, r3
   1b9f4:	bge	1ba54 <__assert_fail@plt+0xa4fc>
   1b9f8:	ldr	r3, [r9, #12]
   1b9fc:	mov	r0, r5
   1ba00:	ldr	r1, [r3, r6, lsl #2]
   1ba04:	bl	111ec <iswctype@plt>
   1ba08:	add	r6, r6, #1
   1ba0c:	cmp	r0, #0
   1ba10:	beq	1b9ec <__assert_fail@plt+0xa494>
   1ba14:	ldrb	r3, [r9, #16]
   1ba18:	tst	r3, #1
   1ba1c:	beq	1b980 <__assert_fail@plt+0xa428>
   1ba20:	b	1b97c <__assert_fail@plt+0xa424>
   1ba24:	ldr	ip, [r3, #48]	; 0x30
   1ba28:	add	r3, r7, #1
   1ba2c:	cmp	r3, ip
   1ba30:	bge	1b97c <__assert_fail@plt+0xa424>
   1ba34:	cmp	r1, #223	; 0xdf
   1ba38:	ldrb	r3, [r0, #1]
   1ba3c:	bhi	1ba9c <__assert_fail@plt+0xa544>
   1ba40:	eor	r3, r3, #128	; 0x80
   1ba44:	cmp	r3, #63	; 0x3f
   1ba48:	movls	r4, #2
   1ba4c:	bls	1b980 <__assert_fail@plt+0xa428>
   1ba50:	b	1b97c <__assert_fail@plt+0xa424>
   1ba54:	ldr	ip, [r9, #32]
   1ba58:	cmp	ip, #0
   1ba5c:	ble	1b9dc <__assert_fail@plt+0xa484>
   1ba60:	ldr	r2, [r9, #4]
   1ba64:	mov	r3, #0
   1ba68:	sub	r2, r2, #4
   1ba6c:	b	1ba7c <__assert_fail@plt+0xa524>
   1ba70:	add	r3, r3, #1
   1ba74:	cmp	r3, ip
   1ba78:	beq	1b9dc <__assert_fail@plt+0xa484>
   1ba7c:	ldr	r1, [r2, #4]!
   1ba80:	cmp	r5, r1
   1ba84:	bcc	1ba70 <__assert_fail@plt+0xa518>
   1ba88:	ldr	r1, [r9, #8]
   1ba8c:	ldr	r1, [r1, r3, lsl #2]
   1ba90:	cmp	r5, r1
   1ba94:	bhi	1ba70 <__assert_fail@plt+0xa518>
   1ba98:	b	1ba14 <__assert_fail@plt+0xa4bc>
   1ba9c:	cmp	r1, #239	; 0xef
   1baa0:	bhi	1baec <__assert_fail@plt+0xa594>
   1baa4:	cmp	r3, #159	; 0x9f
   1baa8:	cmpls	r1, #224	; 0xe0
   1baac:	movne	r4, #3
   1bab0:	beq	1b97c <__assert_fail@plt+0xa424>
   1bab4:	add	r3, r7, r4
   1bab8:	cmp	ip, r3
   1babc:	blt	1b97c <__assert_fail@plt+0xa424>
   1bac0:	sub	r3, r7, #1
   1bac4:	add	r3, r3, r4
   1bac8:	add	r2, r2, r3
   1bacc:	b	1bad8 <__assert_fail@plt+0xa580>
   1bad0:	cmp	r2, r0
   1bad4:	beq	1b980 <__assert_fail@plt+0xa428>
   1bad8:	ldrb	r3, [r0, #1]!
   1badc:	eor	r3, r3, #128	; 0x80
   1bae0:	cmp	r3, #63	; 0x3f
   1bae4:	bls	1bad0 <__assert_fail@plt+0xa578>
   1bae8:	b	1b97c <__assert_fail@plt+0xa424>
   1baec:	cmp	r1, #247	; 0xf7
   1baf0:	bhi	1bb08 <__assert_fail@plt+0xa5b0>
   1baf4:	cmp	r3, #143	; 0x8f
   1baf8:	cmpls	r1, #240	; 0xf0
   1bafc:	movne	r4, #4
   1bb00:	bne	1bab4 <__assert_fail@plt+0xa55c>
   1bb04:	b	1b97c <__assert_fail@plt+0xa424>
   1bb08:	cmp	r1, #251	; 0xfb
   1bb0c:	bhi	1bb24 <__assert_fail@plt+0xa5cc>
   1bb10:	cmp	r3, #135	; 0x87
   1bb14:	cmpls	r1, #248	; 0xf8
   1bb18:	movne	r4, #5
   1bb1c:	bne	1bab4 <__assert_fail@plt+0xa55c>
   1bb20:	b	1b97c <__assert_fail@plt+0xa424>
   1bb24:	cmp	r1, #253	; 0xfd
   1bb28:	bhi	1b97c <__assert_fail@plt+0xa424>
   1bb2c:	cmp	r3, #131	; 0x83
   1bb30:	cmpls	r1, #252	; 0xfc
   1bb34:	beq	1b97c <__assert_fail@plt+0xa424>
   1bb38:	mov	r4, #6
   1bb3c:	b	1bab4 <__assert_fail@plt+0xa55c>
   1bb40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb44:	mov	r5, r0
   1bb48:	ldr	r0, [r0, #84]	; 0x54
   1bb4c:	sub	sp, sp, #84	; 0x54
   1bb50:	mov	ip, r1
   1bb54:	str	r0, [sp, #28]
   1bb58:	ldr	r0, [r0]
   1bb5c:	mov	r8, r2
   1bb60:	str	r1, [sp, #36]	; 0x24
   1bb64:	ldr	r2, [sp, #124]	; 0x7c
   1bb68:	ldr	r1, [r5, #120]	; 0x78
   1bb6c:	ldr	r4, [ip, #4]
   1bb70:	mov	r7, #0
   1bb74:	add	r2, r2, r1
   1bb78:	mov	r6, r3
   1bb7c:	str	r7, [sp, #48]	; 0x30
   1bb80:	ldr	r3, [r0, r8, lsl #3]
   1bb84:	cmp	r2, r4
   1bb88:	str	r3, [sp, #32]
   1bb8c:	bge	1c094 <__assert_fail@plt+0xab3c>
   1bb90:	ldr	r3, [sp, #36]	; 0x24
   1bb94:	ldr	r4, [r3]
   1bb98:	cmp	r4, #0
   1bb9c:	beq	1bf68 <__assert_fail@plt+0xaa10>
   1bba0:	ldr	r9, [r3, #8]
   1bba4:	ldr	r3, [r5, #100]	; 0x64
   1bba8:	ldr	r2, [r5, #88]	; 0x58
   1bbac:	str	r3, [sp, #40]	; 0x28
   1bbb0:	ldr	r3, [r5, #40]	; 0x28
   1bbb4:	str	r9, [r5, #100]	; 0x64
   1bbb8:	str	r4, [r5, #40]	; 0x28
   1bbbc:	sub	r1, r4, #1
   1bbc0:	mov	r0, r5
   1bbc4:	str	r3, [sp, #44]	; 0x2c
   1bbc8:	bl	19cd8 <__assert_fail@plt+0x8780>
   1bbcc:	cmp	r4, r6
   1bbd0:	mov	r7, r0
   1bbd4:	beq	1bf9c <__assert_fail@plt+0xaa44>
   1bbd8:	ldr	r8, [r9, r4, lsl #2]
   1bbdc:	cmp	r8, #0
   1bbe0:	beq	1c0e8 <__assert_fail@plt+0xab90>
   1bbe4:	ldrb	r3, [r8, #52]	; 0x34
   1bbe8:	add	fp, sp, #56	; 0x38
   1bbec:	ands	r2, r3, #64	; 0x40
   1bbf0:	streq	r2, [sp, #56]	; 0x38
   1bbf4:	streq	r2, [fp, #4]
   1bbf8:	streq	r2, [fp, #8]
   1bbfc:	bne	1c074 <__assert_fail@plt+0xab1c>
   1bc00:	tst	r3, #64	; 0x40
   1bc04:	beq	1bc60 <__assert_fail@plt+0xa708>
   1bc08:	ldr	r3, [sp, #60]	; 0x3c
   1bc0c:	cmp	r3, #0
   1bc10:	beq	1bc3c <__assert_fail@plt+0xa6e4>
   1bc14:	ldr	r3, [sp, #128]	; 0x80
   1bc18:	mov	r2, r4
   1bc1c:	str	r3, [sp]
   1bc20:	mov	r1, fp
   1bc24:	ldr	r3, [sp, #32]
   1bc28:	mov	r0, r5
   1bc2c:	bl	18f30 <__assert_fail@plt+0x79d8>
   1bc30:	cmp	r0, #0
   1bc34:	str	r0, [sp, #48]	; 0x30
   1bc38:	bne	1c004 <__assert_fail@plt+0xaaac>
   1bc3c:	mov	r3, r7
   1bc40:	mov	r2, fp
   1bc44:	ldr	r1, [sp, #28]
   1bc48:	add	r0, sp, #48	; 0x30
   1bc4c:	bl	18188 <__assert_fail@plt+0x6c30>
   1bc50:	subs	r8, r0, #0
   1bc54:	beq	1c0fc <__assert_fail@plt+0xaba4>
   1bc58:	ldr	r3, [r5, #100]	; 0x64
   1bc5c:	str	r8, [r3, r4, lsl #2]
   1bc60:	ldr	r3, [sp, #124]	; 0x7c
   1bc64:	cmp	r3, r4
   1bc68:	ble	1bf14 <__assert_fail@plt+0xa9bc>
   1bc6c:	ldr	r3, [r5, #120]	; 0x78
   1bc70:	cmp	r3, #0
   1bc74:	blt	1bf14 <__assert_fail@plt+0xa9bc>
   1bc78:	mov	r3, #0
   1bc7c:	add	r4, r4, #1
   1bc80:	str	r3, [sp, #24]
   1bc84:	ldr	r3, [r5, #100]	; 0x64
   1bc88:	lsl	r2, r4, #2
   1bc8c:	str	r2, [sp, #12]
   1bc90:	str	r4, [sp, #8]
   1bc94:	ldr	r2, [sp, #12]
   1bc98:	ldr	r1, [r3, r2]
   1bc9c:	mov	r3, #0
   1bca0:	str	r3, [sp, #60]	; 0x3c
   1bca4:	cmp	r1, r3
   1bca8:	ldr	r3, [sp, #8]
   1bcac:	sub	sl, r3, #1
   1bcb0:	beq	1c028 <__assert_fail@plt+0xaad0>
   1bcb4:	add	r1, r1, #4
   1bcb8:	mov	r0, fp
   1bcbc:	bl	18a34 <__assert_fail@plt+0x74dc>
   1bcc0:	cmp	r0, #0
   1bcc4:	str	r0, [sp, #48]	; 0x30
   1bcc8:	bne	1c004 <__assert_fail@plt+0xaaac>
   1bccc:	cmp	r8, #0
   1bcd0:	beq	1be48 <__assert_fail@plt+0xa8f0>
   1bcd4:	ldr	r3, [r8, #20]
   1bcd8:	mov	r2, #0
   1bcdc:	cmp	r3, r2
   1bce0:	str	r2, [sp, #52]	; 0x34
   1bce4:	str	r2, [sp, #68]	; 0x44
   1bce8:	str	r2, [sp, #72]	; 0x48
   1bcec:	str	r2, [sp, #76]	; 0x4c
   1bcf0:	ldr	r9, [r5, #84]	; 0x54
   1bcf4:	ble	1c114 <__assert_fail@plt+0xabbc>
   1bcf8:	ldr	r3, [r8, #24]
   1bcfc:	mov	r4, #0
   1bd00:	ldr	r6, [r3]
   1bd04:	mov	r3, r9
   1bd08:	ldr	r0, [r3], #128	; 0x80
   1bd0c:	lsl	r7, r6, #3
   1bd10:	str	r3, [sp, #16]
   1bd14:	add	r3, r0, r7
   1bd18:	b	1bd74 <__assert_fail@plt+0xa81c>
   1bd1c:	add	r1, r0, r7
   1bd20:	mov	r2, sl
   1bd24:	mov	r0, r5
   1bd28:	bl	1a594 <__assert_fail@plt+0x903c>
   1bd2c:	cmp	r0, #0
   1bd30:	beq	1bd50 <__assert_fail@plt+0xa7f8>
   1bd34:	lsl	r7, r6, #2
   1bd38:	ldr	r2, [r9, #12]
   1bd3c:	mov	r0, fp
   1bd40:	ldr	r1, [r2, r7]
   1bd44:	bl	16f28 <__assert_fail@plt+0x59d0>
   1bd48:	cmp	r0, #0
   1bd4c:	beq	1bff4 <__assert_fail@plt+0xaa9c>
   1bd50:	ldr	r3, [r8, #20]
   1bd54:	add	r4, r4, #1
   1bd58:	cmp	r4, r3
   1bd5c:	bge	1c038 <__assert_fail@plt+0xaae0>
   1bd60:	ldr	r3, [r8, #24]
   1bd64:	ldr	r0, [r9]
   1bd68:	ldr	r6, [r3, r4, lsl #2]
   1bd6c:	lsl	r7, r6, #3
   1bd70:	add	r3, r0, r7
   1bd74:	ldrb	r3, [r3, #6]
   1bd78:	tst	r3, #16
   1bd7c:	beq	1bd1c <__assert_fail@plt+0xa7c4>
   1bd80:	str	sl, [sp]
   1bd84:	mov	r3, r5
   1bd88:	mov	r2, r6
   1bd8c:	ldr	r1, [sp, #16]
   1bd90:	bl	1b874 <__assert_fail@plt+0xa31c>
   1bd94:	cmp	r0, #1
   1bd98:	ble	1c018 <__assert_fail@plt+0xaac0>
   1bd9c:	add	r2, r0, sl
   1bda0:	ldr	r3, [r5, #100]	; 0x64
   1bda4:	mov	r1, r2
   1bda8:	str	r2, [sp, #20]
   1bdac:	ldr	r1, [r3, r1, lsl #2]
   1bdb0:	ldr	r2, [r9, #12]
   1bdb4:	mov	r3, #0
   1bdb8:	cmp	r1, #0
   1bdbc:	lsl	r7, r6, #2
   1bdc0:	ldr	r6, [r2, r6, lsl #2]
   1bdc4:	str	r3, [sp, #72]	; 0x48
   1bdc8:	beq	1bde4 <__assert_fail@plt+0xa88c>
   1bdcc:	add	r1, r1, #4
   1bdd0:	add	r0, sp, #68	; 0x44
   1bdd4:	bl	18a34 <__assert_fail@plt+0x74dc>
   1bdd8:	cmp	r0, #0
   1bddc:	str	r0, [sp, #52]	; 0x34
   1bde0:	bne	1be30 <__assert_fail@plt+0xa8d8>
   1bde4:	mov	r1, r6
   1bde8:	add	r0, sp, #68	; 0x44
   1bdec:	bl	16f28 <__assert_fail@plt+0x59d0>
   1bdf0:	cmp	r0, #0
   1bdf4:	beq	1bff4 <__assert_fail@plt+0xaa9c>
   1bdf8:	add	r2, sp, #68	; 0x44
   1bdfc:	mov	r1, r9
   1be00:	add	r0, sp, #52	; 0x34
   1be04:	ldr	r6, [r5, #100]	; 0x64
   1be08:	bl	184b4 <__assert_fail@plt+0x6f5c>
   1be0c:	ldr	r2, [r5, #100]	; 0x64
   1be10:	ldr	r3, [sp, #20]
   1be14:	str	r0, [r6, r3, lsl #2]
   1be18:	ldr	r2, [r2, r3, lsl #2]
   1be1c:	cmp	r2, #0
   1be20:	bne	1bd38 <__assert_fail@plt+0xa7e0>
   1be24:	ldr	r2, [sp, #52]	; 0x34
   1be28:	cmp	r2, #0
   1be2c:	beq	1bd38 <__assert_fail@plt+0xa7e0>
   1be30:	ldr	r0, [sp, #76]	; 0x4c
   1be34:	bl	13908 <__assert_fail@plt+0x23b0>
   1be38:	ldr	r3, [sp, #52]	; 0x34
   1be3c:	cmp	r3, #0
   1be40:	str	r3, [sp, #48]	; 0x30
   1be44:	bne	1c004 <__assert_fail@plt+0xaaac>
   1be48:	ldr	r3, [sp, #60]	; 0x3c
   1be4c:	ldr	r4, [sp, #8]
   1be50:	cmp	r3, #0
   1be54:	beq	1bea0 <__assert_fail@plt+0xa948>
   1be58:	ldr	r3, [sp, #128]	; 0x80
   1be5c:	ldr	r2, [sp, #32]
   1be60:	mov	r1, fp
   1be64:	ldr	r0, [sp, #28]
   1be68:	bl	18dfc <__assert_fail@plt+0x78a4>
   1be6c:	cmp	r0, #0
   1be70:	str	r0, [sp, #48]	; 0x30
   1be74:	bne	1c004 <__assert_fail@plt+0xaaac>
   1be78:	ldr	r3, [sp, #128]	; 0x80
   1be7c:	ldr	r2, [sp, #8]
   1be80:	str	r3, [sp]
   1be84:	mov	r1, fp
   1be88:	ldr	r3, [sp, #32]
   1be8c:	mov	r0, r5
   1be90:	bl	18f30 <__assert_fail@plt+0x79d8>
   1be94:	cmp	r0, #0
   1be98:	str	r0, [sp, #48]	; 0x30
   1be9c:	bne	1c004 <__assert_fail@plt+0xaaac>
   1bea0:	ldr	r2, [r5, #88]	; 0x58
   1bea4:	mov	r1, sl
   1bea8:	mov	r0, r5
   1beac:	bl	19cd8 <__assert_fail@plt+0x8780>
   1beb0:	mov	r2, fp
   1beb4:	ldr	r1, [sp, #28]
   1beb8:	mov	r3, r0
   1bebc:	add	r0, sp, #48	; 0x30
   1bec0:	bl	18188 <__assert_fail@plt+0x6c30>
   1bec4:	subs	r8, r0, #0
   1bec8:	beq	1c04c <__assert_fail@plt+0xaaf4>
   1becc:	mov	r2, #0
   1bed0:	str	r2, [sp, #24]
   1bed4:	ldr	r3, [r5, #100]	; 0x64
   1bed8:	ldr	r2, [sp, #12]
   1bedc:	str	r8, [r3, r2]
   1bee0:	ldr	r0, [sp, #124]	; 0x7c
   1bee4:	ldr	r1, [sp, #8]
   1bee8:	cmp	r0, r1
   1beec:	ble	1bf14 <__assert_fail@plt+0xa9bc>
   1bef0:	ldr	r0, [sp, #12]
   1bef4:	ldr	r2, [r5, #120]	; 0x78
   1bef8:	add	r0, r0, #4
   1befc:	str	r0, [sp, #12]
   1bf00:	ldr	r0, [sp, #24]
   1bf04:	cmp	r0, r2
   1bf08:	add	r2, r1, #1
   1bf0c:	str	r2, [sp, #8]
   1bf10:	ble	1bc94 <__assert_fail@plt+0xa73c>
   1bf14:	ldr	r0, [sp, #64]	; 0x40
   1bf18:	bl	13908 <__assert_fail@plt+0x23b0>
   1bf1c:	ldr	r3, [r5, #100]	; 0x64
   1bf20:	ldr	r2, [sp, #124]	; 0x7c
   1bf24:	ldr	r3, [r3, r2, lsl #2]
   1bf28:	cmp	r3, #0
   1bf2c:	beq	1c11c <__assert_fail@plt+0xabc4>
   1bf30:	ldr	r2, [sp, #36]	; 0x24
   1bf34:	add	r1, r3, #12
   1bf38:	str	r4, [r2]
   1bf3c:	ldr	r2, [sp, #44]	; 0x2c
   1bf40:	str	r2, [r5, #40]	; 0x28
   1bf44:	ldr	r2, [sp, #40]	; 0x28
   1bf48:	ldr	r0, [r3, #8]
   1bf4c:	str	r2, [r5, #100]	; 0x64
   1bf50:	ldr	r2, [sp, #120]	; 0x78
   1bf54:	bl	174b8 <__assert_fail@plt+0x5f60>
   1bf58:	clz	r0, r0
   1bf5c:	lsr	r0, r0, #5
   1bf60:	add	sp, sp, #84	; 0x54
   1bf64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf68:	ldr	r3, [sp, #36]	; 0x24
   1bf6c:	ldr	r2, [r5, #100]	; 0x64
   1bf70:	sub	r1, r6, #1
   1bf74:	ldr	r3, [r3, #8]
   1bf78:	str	r2, [sp, #40]	; 0x28
   1bf7c:	ldr	r2, [r5, #40]	; 0x28
   1bf80:	str	r3, [r5, #100]	; 0x64
   1bf84:	str	r2, [sp, #44]	; 0x2c
   1bf88:	str	r6, [r5, #40]	; 0x28
   1bf8c:	ldr	r2, [r5, #88]	; 0x58
   1bf90:	mov	r0, r5
   1bf94:	bl	19cd8 <__assert_fail@plt+0x8780>
   1bf98:	mov	r7, r0
   1bf9c:	mov	r3, #1
   1bfa0:	mov	r0, #4
   1bfa4:	str	r3, [sp, #56]	; 0x38
   1bfa8:	str	r3, [sp, #60]	; 0x3c
   1bfac:	bl	24794 <__assert_fail@plt+0x1323c>
   1bfb0:	cmp	r0, #0
   1bfb4:	str	r0, [sp, #64]	; 0x40
   1bfb8:	beq	1c10c <__assert_fail@plt+0xabb4>
   1bfbc:	add	fp, sp, #56	; 0x38
   1bfc0:	mov	ip, #0
   1bfc4:	str	r8, [r0]
   1bfc8:	mov	r1, fp
   1bfcc:	ldr	r3, [sp, #128]	; 0x80
   1bfd0:	ldr	r2, [sp, #32]
   1bfd4:	ldr	r0, [sp, #28]
   1bfd8:	str	ip, [sp, #48]	; 0x30
   1bfdc:	bl	18dfc <__assert_fail@plt+0x78a4>
   1bfe0:	cmp	r0, #0
   1bfe4:	str	r0, [sp, #48]	; 0x30
   1bfe8:	moveq	r4, r6
   1bfec:	beq	1bc08 <__assert_fail@plt+0xa6b0>
   1bff0:	b	1c004 <__assert_fail@plt+0xaaac>
   1bff4:	ldr	r0, [sp, #76]	; 0x4c
   1bff8:	bl	13908 <__assert_fail@plt+0x23b0>
   1bffc:	mov	r3, #12
   1c000:	str	r3, [sp, #48]	; 0x30
   1c004:	ldr	r0, [sp, #64]	; 0x40
   1c008:	bl	13908 <__assert_fail@plt+0x23b0>
   1c00c:	ldr	r0, [sp, #48]	; 0x30
   1c010:	add	sp, sp, #84	; 0x54
   1c014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c018:	cmp	r0, #0
   1c01c:	bne	1bd34 <__assert_fail@plt+0xa7dc>
   1c020:	ldr	r0, [r9]
   1c024:	b	1bd1c <__assert_fail@plt+0xa7c4>
   1c028:	cmp	r8, #0
   1c02c:	bne	1bcd4 <__assert_fail@plt+0xa77c>
   1c030:	ldr	r4, [sp, #8]
   1c034:	b	1bea0 <__assert_fail@plt+0xa948>
   1c038:	ldr	r0, [sp, #76]	; 0x4c
   1c03c:	bl	13908 <__assert_fail@plt+0x23b0>
   1c040:	mov	r3, #0
   1c044:	str	r3, [sp, #48]	; 0x30
   1c048:	b	1be48 <__assert_fail@plt+0xa8f0>
   1c04c:	ldr	r3, [sp, #48]	; 0x30
   1c050:	cmp	r3, #0
   1c054:	bne	1c004 <__assert_fail@plt+0xaaac>
   1c058:	ldr	r2, [sp, #24]
   1c05c:	ldr	r3, [r5, #100]	; 0x64
   1c060:	add	r2, r2, #1
   1c064:	str	r2, [sp, #24]
   1c068:	ldr	r2, [sp, #12]
   1c06c:	str	r8, [r3, r2]
   1c070:	b	1bee0 <__assert_fail@plt+0xa988>
   1c074:	mov	r0, fp
   1c078:	add	r1, r8, #4
   1c07c:	bl	17fc4 <__assert_fail@plt+0x6a6c>
   1c080:	cmp	r0, #0
   1c084:	str	r0, [sp, #48]	; 0x30
   1c088:	bne	1c010 <__assert_fail@plt+0xaab8>
   1c08c:	ldrb	r3, [r8, #52]	; 0x34
   1c090:	b	1bc00 <__assert_fail@plt+0xa6a8>
   1c094:	mvn	r3, #-2147483648	; 0x80000000
   1c098:	add	r9, r2, #1
   1c09c:	sub	r3, r3, r4
   1c0a0:	cmp	r9, r3
   1c0a4:	bgt	1c10c <__assert_fail@plt+0xabb4>
   1c0a8:	add	sl, r4, r9
   1c0ac:	cmn	sl, #-1073741823	; 0xc0000001
   1c0b0:	bhi	1c10c <__assert_fail@plt+0xabb4>
   1c0b4:	ldr	fp, [sp, #36]	; 0x24
   1c0b8:	lsl	r1, sl, #2
   1c0bc:	ldr	r0, [fp, #8]
   1c0c0:	bl	247c0 <__assert_fail@plt+0x13268>
   1c0c4:	cmp	r0, #0
   1c0c8:	beq	1c10c <__assert_fail@plt+0xabb4>
   1c0cc:	str	r0, [fp, #8]
   1c0d0:	str	sl, [fp, #4]
   1c0d4:	lsl	r2, r9, #2
   1c0d8:	mov	r1, r7
   1c0dc:	add	r0, r0, r4, lsl #2
   1c0e0:	bl	1145c <memset@plt>
   1c0e4:	b	1bb90 <__assert_fail@plt+0xa638>
   1c0e8:	add	fp, sp, #56	; 0x38
   1c0ec:	str	r8, [sp, #56]	; 0x38
   1c0f0:	str	r8, [fp, #4]
   1c0f4:	str	r8, [fp, #8]
   1c0f8:	b	1bc60 <__assert_fail@plt+0xa708>
   1c0fc:	ldr	r3, [sp, #48]	; 0x30
   1c100:	cmp	r3, #0
   1c104:	beq	1bc58 <__assert_fail@plt+0xa700>
   1c108:	b	1c004 <__assert_fail@plt+0xaaac>
   1c10c:	mov	r0, #12
   1c110:	b	1c010 <__assert_fail@plt+0xaab8>
   1c114:	mov	r0, #0
   1c118:	b	1c03c <__assert_fail@plt+0xaae4>
   1c11c:	ldr	r3, [sp, #36]	; 0x24
   1c120:	mov	r0, #1
   1c124:	str	r4, [r3]
   1c128:	ldr	r3, [sp, #40]	; 0x28
   1c12c:	str	r3, [r5, #100]	; 0x64
   1c130:	ldr	r3, [sp, #44]	; 0x2c
   1c134:	str	r3, [r5, #40]	; 0x28
   1c138:	b	1c010 <__assert_fail@plt+0xaab8>
   1c13c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c140:	sub	sp, sp, #20
   1c144:	mov	ip, r2
   1c148:	ldr	r5, [sp, #56]	; 0x38
   1c14c:	ldr	r4, [r2, #4]
   1c150:	mov	lr, #8
   1c154:	mov	r6, r2
   1c158:	ldr	r2, [ip], #8
   1c15c:	mov	r7, r3
   1c160:	str	r3, [sp]
   1c164:	mov	r8, r1
   1c168:	mov	r3, r4
   1c16c:	mov	r1, ip
   1c170:	stmib	sp, {r5, lr}
   1c174:	mov	r4, r0
   1c178:	bl	1bb40 <__assert_fail@plt+0xa5e8>
   1c17c:	subs	fp, r0, #0
   1c180:	beq	1c190 <__assert_fail@plt+0xac38>
   1c184:	mov	r0, fp
   1c188:	add	sp, sp, #20
   1c18c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c190:	ldr	r3, [r4, #108]	; 0x6c
   1c194:	ldr	r1, [r4, #112]	; 0x70
   1c198:	ldr	r9, [r6, #4]
   1c19c:	cmp	r3, r1
   1c1a0:	ldr	sl, [r8]
   1c1a4:	movlt	lr, r9
   1c1a8:	bge	1c234 <__assert_fail@plt+0xacdc>
   1c1ac:	add	r2, r3, r3, lsl #1
   1c1b0:	cmp	r3, #0
   1c1b4:	ldr	ip, [r4, #116]	; 0x74
   1c1b8:	lsl	r2, r2, #3
   1c1bc:	ble	1c1d8 <__assert_fail@plt+0xac80>
   1c1c0:	sub	r0, r2, #24
   1c1c4:	add	r0, ip, r0
   1c1c8:	ldr	r1, [r0, #4]
   1c1cc:	cmp	r5, r1
   1c1d0:	moveq	r1, #1
   1c1d4:	strbeq	r1, [r0, #20]
   1c1d8:	add	r0, ip, r2
   1c1dc:	cmp	sl, r9
   1c1e0:	str	r7, [ip, r2]
   1c1e4:	movne	r1, #0
   1c1e8:	mvneq	r1, #0
   1c1ec:	add	r3, r3, #1
   1c1f0:	mov	r2, #0
   1c1f4:	stmib	r0, {r5, sl}
   1c1f8:	str	r9, [r0, #12]
   1c1fc:	str	r1, [r0, #16]
   1c200:	str	r3, [r4, #108]	; 0x6c
   1c204:	strb	r2, [r0, #20]
   1c208:	ldr	r3, [r4, #120]	; 0x78
   1c20c:	sub	r9, r9, sl
   1c210:	cmp	r3, r9
   1c214:	strlt	r9, [r4, #120]	; 0x78
   1c218:	ldr	r1, [r8]
   1c21c:	add	r5, r5, lr
   1c220:	sub	r1, r5, r1
   1c224:	mov	r0, r4
   1c228:	add	sp, sp, #20
   1c22c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c230:	b	17300 <__assert_fail@plt+0x5da8>
   1c234:	add	r1, r1, r1, lsl #1
   1c238:	ldr	r0, [r4, #116]	; 0x74
   1c23c:	lsl	r1, r1, #4
   1c240:	bl	247c0 <__assert_fail@plt+0x13268>
   1c244:	cmp	r0, #0
   1c248:	beq	1c288 <__assert_fail@plt+0xad30>
   1c24c:	ldr	r2, [r4, #112]	; 0x70
   1c250:	ldr	r3, [r4, #108]	; 0x6c
   1c254:	str	r0, [r4, #116]	; 0x74
   1c258:	add	r2, r2, r2, lsl #1
   1c25c:	add	r3, r3, r3, lsl #1
   1c260:	lsl	r2, r2, #3
   1c264:	add	r0, r0, r3, lsl #3
   1c268:	mov	r1, fp
   1c26c:	bl	1145c <memset@plt>
   1c270:	ldr	r2, [r4, #112]	; 0x70
   1c274:	ldr	lr, [r6, #4]
   1c278:	ldr	r3, [r4, #108]	; 0x6c
   1c27c:	lsl	r2, r2, #1
   1c280:	str	r2, [r4, #112]	; 0x70
   1c284:	b	1c1ac <__assert_fail@plt+0xac54>
   1c288:	ldr	r0, [r4, #116]	; 0x74
   1c28c:	bl	13908 <__assert_fail@plt+0x23b0>
   1c290:	mov	fp, #12
   1c294:	b	1c184 <__assert_fail@plt+0xac2c>
   1c298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c29c:	sub	sp, sp, #92	; 0x5c
   1c2a0:	ldr	r6, [r1]
   1c2a4:	ldr	r3, [r0, #84]	; 0x54
   1c2a8:	cmp	r6, #0
   1c2ac:	str	r3, [sp, #32]
   1c2b0:	ldr	sl, [r0, #40]	; 0x28
   1c2b4:	ble	1c7dc <__assert_fail@plt+0xb284>
   1c2b8:	mov	r3, #0
   1c2bc:	str	r3, [sp, #20]
   1c2c0:	lsl	r3, sl, #2
   1c2c4:	str	r2, [sp, #36]	; 0x24
   1c2c8:	mov	fp, r0
   1c2cc:	str	r1, [sp, #60]	; 0x3c
   1c2d0:	str	r3, [sp, #48]	; 0x30
   1c2d4:	b	1c2ec <__assert_fail@plt+0xad94>
   1c2d8:	ldr	r3, [sp, #20]
   1c2dc:	add	r3, r3, #1
   1c2e0:	cmp	r3, r6
   1c2e4:	str	r3, [sp, #20]
   1c2e8:	bge	1c7dc <__assert_fail@plt+0xb284>
   1c2ec:	ldr	r3, [sp, #36]	; 0x24
   1c2f0:	ldr	r1, [sp, #20]
   1c2f4:	ldr	r2, [r3]
   1c2f8:	ldr	r3, [sp, #32]
   1c2fc:	ldr	r9, [r2, r1, lsl #2]
   1c300:	ldr	r3, [r3]
   1c304:	add	r3, r3, r9, lsl #3
   1c308:	ldrb	r2, [r3, #4]
   1c30c:	cmp	r2, #4
   1c310:	bne	1c2d8 <__assert_fail@plt+0xad80>
   1c314:	ldr	r4, [r3, #4]
   1c318:	ldr	r3, [pc, #1804]	; 1ca2c <__assert_fail@plt+0xb4d4>
   1c31c:	tst	r4, r3
   1c320:	beq	1c374 <__assert_fail@plt+0xae1c>
   1c324:	ldr	r2, [fp, #88]	; 0x58
   1c328:	mov	r1, sl
   1c32c:	mov	r0, fp
   1c330:	bl	19cd8 <__assert_fail@plt+0x8780>
   1c334:	ldr	r3, [pc, #1780]	; 1ca30 <__assert_fail@plt+0xb4d8>
   1c338:	and	r4, r3, r4, lsr #8
   1c33c:	tst	r4, #4
   1c340:	beq	1c5d4 <__assert_fail@plt+0xb07c>
   1c344:	tst	r0, #1
   1c348:	beq	1c2d8 <__assert_fail@plt+0xad80>
   1c34c:	tst	r4, #8
   1c350:	bne	1c2d8 <__assert_fail@plt+0xad80>
   1c354:	tst	r4, #32
   1c358:	beq	1c364 <__assert_fail@plt+0xae0c>
   1c35c:	tst	r0, #2
   1c360:	beq	1c2d8 <__assert_fail@plt+0xad80>
   1c364:	tst	r4, #128	; 0x80
   1c368:	beq	1c374 <__assert_fail@plt+0xae1c>
   1c36c:	tst	r0, #8
   1c370:	beq	1c2d8 <__assert_fail@plt+0xad80>
   1c374:	ldr	ip, [fp, #108]	; 0x6c
   1c378:	mov	r0, #0
   1c37c:	mov	r5, ip
   1c380:	mov	r3, ip
   1c384:	cmp	r0, r3
   1c388:	bge	1c3e4 <__assert_fail@plt+0xae8c>
   1c38c:	add	r2, r0, r3
   1c390:	ldr	lr, [fp, #116]	; 0x74
   1c394:	add	r2, r2, r2, lsr #31
   1c398:	asr	r2, r2, #1
   1c39c:	add	r1, r2, r2, lsl #1
   1c3a0:	add	r1, lr, r1, lsl #3
   1c3a4:	ldr	r1, [r1, #4]
   1c3a8:	cmp	sl, r1
   1c3ac:	ble	1c3d4 <__assert_fail@plt+0xae7c>
   1c3b0:	b	1c5c0 <__assert_fail@plt+0xb068>
   1c3b4:	asr	r3, r3, #1
   1c3b8:	mov	r4, r3
   1c3bc:	add	r1, r3, r3, lsl #1
   1c3c0:	add	r1, lr, r1, lsl #3
   1c3c4:	ldr	r1, [r1, #4]
   1c3c8:	cmp	sl, r1
   1c3cc:	bgt	1c5c8 <__assert_fail@plt+0xb070>
   1c3d0:	mov	r2, r3
   1c3d4:	add	r3, r2, r0
   1c3d8:	cmp	r2, r0
   1c3dc:	add	r3, r3, r3, lsr #31
   1c3e0:	bgt	1c3b4 <__assert_fail@plt+0xae5c>
   1c3e4:	cmp	ip, r0
   1c3e8:	ble	1c5e8 <__assert_fail@plt+0xb090>
   1c3ec:	add	r2, r0, r0, lsl #1
   1c3f0:	ldr	r3, [fp, #116]	; 0x74
   1c3f4:	cmn	r0, #1
   1c3f8:	add	r3, r3, r2, lsl #3
   1c3fc:	ldr	r2, [r3, #4]
   1c400:	sub	r2, r2, sl
   1c404:	clz	r2, r2
   1c408:	lsr	r2, r2, #5
   1c40c:	moveq	r2, #0
   1c410:	cmp	r2, #0
   1c414:	beq	1c5e8 <__assert_fail@plt+0xb090>
   1c418:	add	r3, r3, #24
   1c41c:	b	1c42c <__assert_fail@plt+0xaed4>
   1c420:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   1c424:	cmp	r2, #0
   1c428:	beq	1c5e8 <__assert_fail@plt+0xb090>
   1c42c:	ldr	r2, [r3, #-24]	; 0xffffffe8
   1c430:	add	r3, r3, #24
   1c434:	cmp	r9, r2
   1c438:	bne	1c420 <__assert_fail@plt+0xaec8>
   1c43c:	mov	r3, #0
   1c440:	str	r3, [sp, #72]	; 0x48
   1c444:	cmp	r5, ip
   1c448:	lsl	r3, r9, #2
   1c44c:	str	r3, [sp, #52]	; 0x34
   1c450:	bge	1c5b4 <__assert_fail@plt+0xb05c>
   1c454:	add	r3, r9, r9, lsl #1
   1c458:	add	r4, r5, r5, lsl #1
   1c45c:	lsl	r3, r3, #2
   1c460:	str	r3, [sp, #56]	; 0x38
   1c464:	lsl	r4, r4, #3
   1c468:	ldr	r7, [sp, #32]
   1c46c:	b	1c480 <__assert_fail@plt+0xaf28>
   1c470:	add	r5, r5, #1
   1c474:	cmp	r5, ip
   1c478:	add	r4, r4, #24
   1c47c:	bge	1c5b4 <__assert_fail@plt+0xb05c>
   1c480:	ldr	r3, [fp, #116]	; 0x74
   1c484:	add	r2, r3, r4
   1c488:	ldr	r3, [r3, r4]
   1c48c:	cmp	r9, r3
   1c490:	bne	1c470 <__assert_fail@plt+0xaf18>
   1c494:	ldr	r3, [r2, #4]
   1c498:	cmp	sl, r3
   1c49c:	bne	1c470 <__assert_fail@plt+0xaf18>
   1c4a0:	ldr	r3, [r2, #12]
   1c4a4:	ldr	r6, [r2, #8]
   1c4a8:	subs	r2, r3, r6
   1c4ac:	str	r2, [sp, #28]
   1c4b0:	ldreq	r0, [sp, #56]	; 0x38
   1c4b4:	ldreq	r2, [r7, #20]
   1c4b8:	ldrne	r2, [r7, #12]
   1c4bc:	addeq	r2, r2, r0
   1c4c0:	ldrne	r0, [sp, #52]	; 0x34
   1c4c4:	ldreq	r2, [r2, #8]
   1c4c8:	ldreq	r1, [r7, #24]
   1c4cc:	ldrne	r2, [r2, r0]
   1c4d0:	ldreq	r2, [r2]
   1c4d4:	ldrne	r1, [r7, #24]
   1c4d8:	add	r3, sl, r3
   1c4dc:	add	r2, r2, r2, lsl #1
   1c4e0:	sub	r6, r3, r6
   1c4e4:	add	r2, r1, r2, lsl #2
   1c4e8:	str	r2, [sp, #24]
   1c4ec:	sub	r1, r6, #1
   1c4f0:	ldr	r2, [fp, #88]	; 0x58
   1c4f4:	mov	r0, fp
   1c4f8:	bl	19cd8 <__assert_fail@plt+0x8780>
   1c4fc:	ldr	r8, [fp, #100]	; 0x64
   1c500:	ldr	r2, [sp, #48]	; 0x30
   1c504:	ldr	r1, [r8, r2]
   1c508:	ldr	r2, [r8, r6, lsl #2]
   1c50c:	cmp	r1, #0
   1c510:	moveq	r1, #0
   1c514:	ldrne	r1, [r1, #8]
   1c518:	cmp	r2, #0
   1c51c:	str	r1, [sp, #44]	; 0x2c
   1c520:	mov	r3, r0
   1c524:	beq	1c748 <__assert_fail@plt+0xb1f0>
   1c528:	str	r0, [sp, #40]	; 0x28
   1c52c:	ldr	r1, [r2, #40]	; 0x28
   1c530:	add	r0, sp, #76	; 0x4c
   1c534:	ldr	r2, [sp, #24]
   1c538:	bl	1803c <__assert_fail@plt+0x6ae4>
   1c53c:	ldr	r3, [sp, #40]	; 0x28
   1c540:	cmp	r0, #0
   1c544:	str	r0, [sp, #72]	; 0x48
   1c548:	bne	1c7c8 <__assert_fail@plt+0xb270>
   1c54c:	add	r2, sp, #76	; 0x4c
   1c550:	mov	r1, r7
   1c554:	add	r0, sp, #72	; 0x48
   1c558:	ldr	r8, [fp, #100]	; 0x64
   1c55c:	bl	18188 <__assert_fail@plt+0x6c30>
   1c560:	str	r0, [r8, r6, lsl #2]
   1c564:	ldr	r0, [sp, #84]	; 0x54
   1c568:	bl	13908 <__assert_fail@plt+0x23b0>
   1c56c:	ldr	r3, [fp, #100]	; 0x64
   1c570:	ldr	r2, [r3, r6, lsl #2]
   1c574:	cmp	r2, #0
   1c578:	beq	1c76c <__assert_fail@plt+0xb214>
   1c57c:	ldr	r2, [sp, #28]
   1c580:	cmp	r2, #0
   1c584:	bne	1c5a0 <__assert_fail@plt+0xb048>
   1c588:	ldr	r2, [sp, #48]	; 0x30
   1c58c:	ldr	r3, [r3, r2]
   1c590:	ldr	r2, [sp, #44]	; 0x2c
   1c594:	ldr	r3, [r3, #8]
   1c598:	cmp	r3, r2
   1c59c:	bgt	1c77c <__assert_fail@plt+0xb224>
   1c5a0:	ldr	ip, [fp, #108]	; 0x6c
   1c5a4:	add	r5, r5, #1
   1c5a8:	cmp	r5, ip
   1c5ac:	add	r4, r4, #24
   1c5b0:	blt	1c480 <__assert_fail@plt+0xaf28>
   1c5b4:	ldr	r3, [sp, #60]	; 0x3c
   1c5b8:	ldr	r6, [r3]
   1c5bc:	b	1c2d8 <__assert_fail@plt+0xad80>
   1c5c0:	mov	r4, r2
   1c5c4:	mov	r2, r3
   1c5c8:	add	r0, r4, #1
   1c5cc:	mov	r3, r2
   1c5d0:	b	1c384 <__assert_fail@plt+0xae2c>
   1c5d4:	tst	r4, #8
   1c5d8:	beq	1c354 <__assert_fail@plt+0xadfc>
   1c5dc:	tst	r0, #1
   1c5e0:	beq	1c354 <__assert_fail@plt+0xadfc>
   1c5e4:	b	1c2d8 <__assert_fail@plt+0xad80>
   1c5e8:	ldr	r3, [fp, #84]	; 0x54
   1c5ec:	ldr	r1, [fp, #124]	; 0x7c
   1c5f0:	str	r3, [sp, #56]	; 0x38
   1c5f4:	ldr	r3, [r3]
   1c5f8:	cmp	r1, #0
   1c5fc:	ldr	r2, [r3, r9, lsl #3]
   1c600:	str	r2, [sp, #52]	; 0x34
   1c604:	ble	1c43c <__assert_fail@plt+0xaee4>
   1c608:	ldr	r2, [fp, #4]
   1c60c:	str	r9, [sp, #44]	; 0x2c
   1c610:	mov	r9, r2
   1c614:	mov	r0, #0
   1c618:	str	r0, [sp, #40]	; 0x28
   1c61c:	str	sl, [sp, #28]
   1c620:	str	r5, [sp, #68]	; 0x44
   1c624:	ldr	r2, [fp, #132]	; 0x84
   1c628:	ldr	r0, [sp, #40]	; 0x28
   1c62c:	ldr	r4, [r2, r0, lsl #2]
   1c630:	ldr	r2, [r4, #4]
   1c634:	ldr	r3, [r3, r2, lsl #3]
   1c638:	ldr	r2, [sp, #52]	; 0x34
   1c63c:	cmp	r2, r3
   1c640:	beq	1c664 <__assert_fail@plt+0xb10c>
   1c644:	ldr	r3, [sp, #40]	; 0x28
   1c648:	add	r3, r3, #1
   1c64c:	cmp	r3, r1
   1c650:	str	r3, [sp, #40]	; 0x28
   1c654:	bge	1c9d8 <__assert_fail@plt+0xb480>
   1c658:	ldr	r3, [sp, #56]	; 0x38
   1c65c:	ldr	r3, [r3]
   1c660:	b	1c624 <__assert_fail@plt+0xb0cc>
   1c664:	ldr	ip, [r4, #16]
   1c668:	ldr	r6, [r4]
   1c66c:	cmp	ip, #0
   1c670:	ble	1ca1c <__assert_fail@plt+0xb4c4>
   1c674:	ldr	r8, [sp, #28]
   1c678:	mov	r5, #0
   1c67c:	mov	r3, r6
   1c680:	b	1c698 <__assert_fail@plt+0xb140>
   1c684:	ldr	ip, [r4, #16]
   1c688:	mov	r3, r6
   1c68c:	cmp	r5, ip
   1c690:	mov	r8, r7
   1c694:	bge	1c7e8 <__assert_fail@plt+0xb290>
   1c698:	ldr	r2, [r4, #20]
   1c69c:	ldr	sl, [r2, r5, lsl #2]
   1c6a0:	ldr	r6, [sl, #4]
   1c6a4:	sub	r2, r6, r3
   1c6a8:	cmp	r2, #0
   1c6ac:	add	r7, r2, r8
   1c6b0:	ble	1c6dc <__assert_fail@plt+0xb184>
   1c6b4:	ldr	r1, [fp, #28]
   1c6b8:	cmp	r7, r1
   1c6bc:	bgt	1c710 <__assert_fail@plt+0xb1b8>
   1c6c0:	add	r1, r9, r3
   1c6c4:	add	r0, r9, r8
   1c6c8:	str	r3, [sp, #24]
   1c6cc:	bl	112b8 <memcmp@plt>
   1c6d0:	ldr	r3, [sp, #24]
   1c6d4:	cmp	r0, #0
   1c6d8:	bne	1c95c <__assert_fail@plt+0xb404>
   1c6dc:	ldr	r3, [sp, #28]
   1c6e0:	mov	r2, sl
   1c6e4:	str	r3, [sp]
   1c6e8:	mov	r1, r4
   1c6ec:	ldr	r3, [sp, #44]	; 0x2c
   1c6f0:	mov	r0, fp
   1c6f4:	bl	1c13c <__assert_fail@plt+0xabe4>
   1c6f8:	add	r5, r5, #1
   1c6fc:	ldr	r9, [fp, #4]
   1c700:	cmp	r0, #1
   1c704:	bls	1c684 <__assert_fail@plt+0xb12c>
   1c708:	add	sp, sp, #92	; 0x5c
   1c70c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c710:	ldr	lr, [fp, #48]	; 0x30
   1c714:	str	r2, [sp, #64]	; 0x40
   1c718:	cmp	r7, lr
   1c71c:	mov	r1, r7
   1c720:	mov	r0, fp
   1c724:	bgt	1ca24 <__assert_fail@plt+0xb4cc>
   1c728:	str	r3, [sp, #24]
   1c72c:	bl	17300 <__assert_fail@plt+0x5da8>
   1c730:	cmp	r0, #0
   1c734:	bne	1c708 <__assert_fail@plt+0xb1b0>
   1c738:	ldr	r9, [fp, #4]
   1c73c:	ldr	r2, [sp, #64]	; 0x40
   1c740:	ldr	r3, [sp, #24]
   1c744:	b	1c6c0 <__assert_fail@plt+0xb168>
   1c748:	ldr	r2, [sp, #24]
   1c74c:	mov	r1, r7
   1c750:	add	r0, sp, #72	; 0x48
   1c754:	bl	18188 <__assert_fail@plt+0x6c30>
   1c758:	ldr	r3, [fp, #100]	; 0x64
   1c75c:	str	r0, [r8, r6, lsl #2]
   1c760:	ldr	r2, [r3, r6, lsl #2]
   1c764:	cmp	r2, #0
   1c768:	bne	1c57c <__assert_fail@plt+0xb024>
   1c76c:	ldr	r0, [sp, #72]	; 0x48
   1c770:	cmp	r0, #0
   1c774:	beq	1c57c <__assert_fail@plt+0xb024>
   1c778:	b	1c708 <__assert_fail@plt+0xb1b0>
   1c77c:	ldr	r3, [sp, #24]
   1c780:	mov	r0, fp
   1c784:	add	r6, r3, #4
   1c788:	add	r8, r3, #8
   1c78c:	mov	r2, r8
   1c790:	mov	r1, r6
   1c794:	mov	r3, sl
   1c798:	bl	1a7a8 <__assert_fail@plt+0x9250>
   1c79c:	cmp	r0, #0
   1c7a0:	str	r0, [sp, #72]	; 0x48
   1c7a4:	bne	1c708 <__assert_fail@plt+0xb1b0>
   1c7a8:	mov	r2, r8
   1c7ac:	mov	r1, r6
   1c7b0:	mov	r0, fp
   1c7b4:	bl	1c298 <__assert_fail@plt+0xad40>
   1c7b8:	cmp	r0, #0
   1c7bc:	str	r0, [sp, #72]	; 0x48
   1c7c0:	beq	1c5a0 <__assert_fail@plt+0xb048>
   1c7c4:	b	1c708 <__assert_fail@plt+0xb1b0>
   1c7c8:	ldr	r0, [sp, #84]	; 0x54
   1c7cc:	bl	13908 <__assert_fail@plt+0x23b0>
   1c7d0:	ldr	r0, [sp, #72]	; 0x48
   1c7d4:	add	sp, sp, #92	; 0x5c
   1c7d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c7dc:	mov	r0, #0
   1c7e0:	add	sp, sp, #92	; 0x5c
   1c7e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c7e8:	mov	sl, r6
   1c7ec:	add	r6, sl, #1
   1c7f0:	ldr	r3, [sp, #28]
   1c7f4:	cmp	r3, r6
   1c7f8:	blt	1c954 <__assert_fail@plt+0xb3fc>
   1c7fc:	ldr	sl, [sp, #52]	; 0x34
   1c800:	lsl	r8, r6, #2
   1c804:	ldr	r3, [r4]
   1c808:	sub	r3, r6, r3
   1c80c:	cmp	r3, #0
   1c810:	ble	1c83c <__assert_fail@plt+0xb2e4>
   1c814:	ldr	r3, [fp, #28]
   1c818:	cmp	r3, r7
   1c81c:	ble	1c9ac <__assert_fail@plt+0xb454>
   1c820:	add	r5, r7, #1
   1c824:	add	r3, r9, r6
   1c828:	ldrb	r2, [r9, r7]
   1c82c:	ldrb	r3, [r3, #-1]
   1c830:	cmp	r2, r3
   1c834:	bne	1c954 <__assert_fail@plt+0xb3fc>
   1c838:	mov	r7, r5
   1c83c:	ldr	r3, [fp, #100]	; 0x64
   1c840:	ldr	r3, [r3, r8]
   1c844:	cmp	r3, #0
   1c848:	beq	1c940 <__assert_fail@plt+0xb3e8>
   1c84c:	ldr	ip, [r3, #8]
   1c850:	cmp	ip, #0
   1c854:	ble	1c940 <__assert_fail@plt+0xb3e8>
   1c858:	ldr	r2, [r3, #12]
   1c85c:	ldr	r3, [sp, #56]	; 0x38
   1c860:	sub	r2, r2, #4
   1c864:	ldr	r0, [r3]
   1c868:	mov	r3, #0
   1c86c:	b	1c878 <__assert_fail@plt+0xb320>
   1c870:	cmp	ip, r3
   1c874:	beq	1c940 <__assert_fail@plt+0xb3e8>
   1c878:	ldr	r5, [r2, #4]!
   1c87c:	add	r3, r3, #1
   1c880:	add	r1, r0, r5, lsl #3
   1c884:	ldrb	r1, [r1, #4]
   1c888:	cmp	r1, #9
   1c88c:	bne	1c870 <__assert_fail@plt+0xb318>
   1c890:	ldr	r1, [r0, r5, lsl #3]
   1c894:	cmp	sl, r1
   1c898:	bne	1c870 <__assert_fail@plt+0xb318>
   1c89c:	cmn	r5, #1
   1c8a0:	beq	1c940 <__assert_fail@plt+0xb3e8>
   1c8a4:	ldr	r1, [r4, #8]
   1c8a8:	cmp	r1, #0
   1c8ac:	beq	1c984 <__assert_fail@plt+0xb42c>
   1c8b0:	mov	r0, #9
   1c8b4:	ldr	r3, [r4]
   1c8b8:	ldr	r2, [r4, #4]
   1c8bc:	str	r0, [sp, #8]
   1c8c0:	stm	sp, {r5, r6}
   1c8c4:	mov	r0, fp
   1c8c8:	bl	1bb40 <__assert_fail@plt+0xa5e8>
   1c8cc:	cmp	r0, #1
   1c8d0:	beq	1c940 <__assert_fail@plt+0xb3e8>
   1c8d4:	cmp	r0, #0
   1c8d8:	bne	1c708 <__assert_fail@plt+0xb1b0>
   1c8dc:	ldr	r3, [r4, #16]
   1c8e0:	ldr	r2, [r4, #12]
   1c8e4:	cmp	r3, r2
   1c8e8:	beq	1c9f4 <__assert_fail@plt+0xb49c>
   1c8ec:	mov	r1, #20
   1c8f0:	mov	r0, #1
   1c8f4:	bl	2474c <__assert_fail@plt+0x131f4>
   1c8f8:	cmp	r0, #0
   1c8fc:	beq	1c9ec <__assert_fail@plt+0xb494>
   1c900:	ldr	r3, [r4, #16]
   1c904:	ldr	r2, [r4, #20]
   1c908:	add	r1, r3, #1
   1c90c:	str	r0, [r2, r3, lsl #2]
   1c910:	stm	r0, {r5, r6}
   1c914:	mov	r2, r0
   1c918:	ldr	r0, [sp, #28]
   1c91c:	str	r1, [r4, #16]
   1c920:	ldr	r3, [sp, #44]	; 0x2c
   1c924:	str	r0, [sp]
   1c928:	mov	r1, r4
   1c92c:	mov	r0, fp
   1c930:	bl	1c13c <__assert_fail@plt+0xabe4>
   1c934:	ldr	r9, [fp, #4]
   1c938:	cmp	r0, #1
   1c93c:	bhi	1c708 <__assert_fail@plt+0xb1b0>
   1c940:	ldr	r3, [sp, #28]
   1c944:	add	r6, r6, #1
   1c948:	cmp	r3, r6
   1c94c:	add	r8, r8, #4
   1c950:	bge	1c804 <__assert_fail@plt+0xb2ac>
   1c954:	ldr	r1, [fp, #124]	; 0x7c
   1c958:	b	1c644 <__assert_fail@plt+0xb0ec>
   1c95c:	ldr	ip, [r4, #16]
   1c960:	mov	r6, r3
   1c964:	cmp	ip, r5
   1c968:	bgt	1c954 <__assert_fail@plt+0xb3fc>
   1c96c:	cmp	r5, #0
   1c970:	movle	r7, r8
   1c974:	ble	1c7f0 <__assert_fail@plt+0xb298>
   1c978:	mov	sl, r6
   1c97c:	mov	r7, r8
   1c980:	b	1c7ec <__assert_fail@plt+0xb294>
   1c984:	ldr	r1, [r4]
   1c988:	mov	r0, #12
   1c98c:	sub	r1, r6, r1
   1c990:	add	r1, r1, #1
   1c994:	bl	2474c <__assert_fail@plt+0x131f4>
   1c998:	cmp	r0, #0
   1c99c:	str	r0, [r4, #8]
   1c9a0:	beq	1c9ec <__assert_fail@plt+0xb494>
   1c9a4:	mov	r1, r0
   1c9a8:	b	1c8b0 <__assert_fail@plt+0xb358>
   1c9ac:	ldr	r3, [fp, #48]	; 0x30
   1c9b0:	cmp	r3, r7
   1c9b4:	ble	1c954 <__assert_fail@plt+0xb3fc>
   1c9b8:	add	r5, r7, #1
   1c9bc:	mov	r1, r5
   1c9c0:	mov	r0, fp
   1c9c4:	bl	1684c <__assert_fail@plt+0x52f4>
   1c9c8:	cmp	r0, #0
   1c9cc:	bne	1c708 <__assert_fail@plt+0xb1b0>
   1c9d0:	ldr	r9, [fp, #4]
   1c9d4:	b	1c824 <__assert_fail@plt+0xb2cc>
   1c9d8:	ldr	sl, [sp, #28]
   1c9dc:	ldr	r9, [sp, #44]	; 0x2c
   1c9e0:	ldr	r5, [sp, #68]	; 0x44
   1c9e4:	ldr	ip, [fp, #108]	; 0x6c
   1c9e8:	b	1c43c <__assert_fail@plt+0xaee4>
   1c9ec:	mov	r0, #12
   1c9f0:	b	1c708 <__assert_fail@plt+0xb1b0>
   1c9f4:	lsl	r3, r3, #1
   1c9f8:	add	r9, r3, #1
   1c9fc:	ldr	r0, [r4, #20]
   1ca00:	lsl	r1, r9, #2
   1ca04:	bl	247c0 <__assert_fail@plt+0x13268>
   1ca08:	cmp	r0, #0
   1ca0c:	beq	1c9ec <__assert_fail@plt+0xb494>
   1ca10:	str	r0, [r4, #20]
   1ca14:	str	r9, [r4, #12]
   1ca18:	b	1c8ec <__assert_fail@plt+0xb394>
   1ca1c:	ldr	r7, [sp, #28]
   1ca20:	b	1c7f0 <__assert_fail@plt+0xb298>
   1ca24:	mov	r6, r3
   1ca28:	b	1c964 <__assert_fail@plt+0xb40c>
   1ca2c:	andeq	pc, r3, r0, lsl #30
   1ca30:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1ca34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ca38:	mov	r4, r1
   1ca3c:	ldr	r5, [r1, #40]	; 0x28
   1ca40:	ldr	r3, [r1, #104]	; 0x68
   1ca44:	sub	sp, sp, #16
   1ca48:	cmp	r5, r3
   1ca4c:	mov	r8, r0
   1ca50:	ldr	r7, [r1, #84]	; 0x54
   1ca54:	ble	1ca80 <__assert_fail@plt+0xb528>
   1ca58:	ldr	r3, [r1, #100]	; 0x64
   1ca5c:	mov	r6, r2
   1ca60:	str	r2, [r3, r5, lsl #2]
   1ca64:	str	r5, [r1, #104]	; 0x68
   1ca68:	ldr	r3, [r7, #76]	; 0x4c
   1ca6c:	cmp	r3, #0
   1ca70:	bne	1cb48 <__assert_fail@plt+0xb5f0>
   1ca74:	mov	r0, r6
   1ca78:	add	sp, sp, #16
   1ca7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ca80:	ldr	r9, [r1, #100]	; 0x64
   1ca84:	ldr	r3, [r9, r5, lsl #2]
   1ca88:	cmp	r3, #0
   1ca8c:	streq	r2, [r9, r5, lsl #2]
   1ca90:	moveq	r6, r2
   1ca94:	beq	1ca68 <__assert_fail@plt+0xb510>
   1ca98:	cmp	r2, #0
   1ca9c:	ldr	r3, [r3, #40]	; 0x28
   1caa0:	beq	1cb0c <__assert_fail@plt+0xb5b4>
   1caa4:	ldr	r9, [r2, #40]	; 0x28
   1caa8:	add	r0, sp, #4
   1caac:	mov	r2, r3
   1cab0:	mov	r1, r9
   1cab4:	bl	1803c <__assert_fail@plt+0x6ae4>
   1cab8:	cmp	r0, #0
   1cabc:	str	r0, [r8]
   1cac0:	bne	1cba8 <__assert_fail@plt+0xb650>
   1cac4:	ldr	r1, [r4, #40]	; 0x28
   1cac8:	ldr	r2, [r4, #88]	; 0x58
   1cacc:	sub	r1, r1, #1
   1cad0:	mov	r0, r4
   1cad4:	bl	19cd8 <__assert_fail@plt+0x8780>
   1cad8:	add	r2, sp, #4
   1cadc:	mov	r1, r7
   1cae0:	ldr	sl, [r4, #100]	; 0x64
   1cae4:	mov	r3, r0
   1cae8:	mov	r0, r8
   1caec:	bl	18188 <__assert_fail@plt+0x6c30>
   1caf0:	cmp	r9, #0
   1caf4:	mov	r6, r0
   1caf8:	str	r0, [sl, r5, lsl #2]
   1cafc:	beq	1ca68 <__assert_fail@plt+0xb510>
   1cb00:	ldr	r0, [sp, #12]
   1cb04:	bl	13908 <__assert_fail@plt+0x23b0>
   1cb08:	b	1ca68 <__assert_fail@plt+0xb510>
   1cb0c:	ldm	r3, {r0, r1, r2}
   1cb10:	add	r6, sp, #4
   1cb14:	stm	r6, {r0, r1, r2}
   1cb18:	sub	r1, r5, #1
   1cb1c:	ldr	r2, [r4, #88]	; 0x58
   1cb20:	mov	r0, r4
   1cb24:	bl	19cd8 <__assert_fail@plt+0x8780>
   1cb28:	mov	r2, r6
   1cb2c:	mov	r1, r7
   1cb30:	mov	r3, r0
   1cb34:	mov	r0, r8
   1cb38:	bl	18188 <__assert_fail@plt+0x6c30>
   1cb3c:	mov	r6, r0
   1cb40:	str	r0, [r9, r5, lsl #2]
   1cb44:	b	1ca68 <__assert_fail@plt+0xb510>
   1cb48:	cmp	r6, #0
   1cb4c:	beq	1cba8 <__assert_fail@plt+0xb650>
   1cb50:	add	r7, r6, #8
   1cb54:	add	r9, r6, #12
   1cb58:	mov	r1, r7
   1cb5c:	mov	r2, r9
   1cb60:	mov	r3, r5
   1cb64:	mov	r0, r4
   1cb68:	bl	1a7a8 <__assert_fail@plt+0x9250>
   1cb6c:	cmp	r0, #0
   1cb70:	str	r0, [r8]
   1cb74:	bne	1cba8 <__assert_fail@plt+0xb650>
   1cb78:	ldrb	r3, [r6, #52]	; 0x34
   1cb7c:	tst	r3, #64	; 0x40
   1cb80:	beq	1ca74 <__assert_fail@plt+0xb51c>
   1cb84:	mov	r2, r9
   1cb88:	mov	r1, r7
   1cb8c:	mov	r0, r4
   1cb90:	bl	1c298 <__assert_fail@plt+0xad40>
   1cb94:	cmp	r0, #0
   1cb98:	str	r0, [r8]
   1cb9c:	ldreq	r3, [r4, #100]	; 0x64
   1cba0:	ldreq	r6, [r3, r5, lsl #2]
   1cba4:	beq	1ca74 <__assert_fail@plt+0xb51c>
   1cba8:	mov	r6, #0
   1cbac:	b	1ca74 <__assert_fail@plt+0xb51c>
   1cbb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbb4:	sub	sp, sp, #68	; 0x44
   1cbb8:	mov	r4, #1
   1cbbc:	mov	sl, r0
   1cbc0:	mov	r0, #4
   1cbc4:	ldr	fp, [r1, #12]
   1cbc8:	mov	r9, r1
   1cbcc:	ldr	r5, [r1, #8]
   1cbd0:	str	r4, [sp, #52]	; 0x34
   1cbd4:	str	r4, [sp, #56]	; 0x38
   1cbd8:	bl	24794 <__assert_fail@plt+0x1323c>
   1cbdc:	lsl	r3, fp, #2
   1cbe0:	str	r3, [sp, #16]
   1cbe4:	cmp	r0, #0
   1cbe8:	str	r0, [sp, #60]	; 0x3c
   1cbec:	beq	1ce60 <__assert_fail@plt+0xb908>
   1cbf0:	add	r3, sp, #52	; 0x34
   1cbf4:	str	r5, [r0]
   1cbf8:	mov	r2, fp
   1cbfc:	mov	r1, r9
   1cc00:	mov	r0, sl
   1cc04:	bl	1e898 <__assert_fail@plt+0xd340>
   1cc08:	subs	r3, r0, #0
   1cc0c:	str	r3, [sp, #44]	; 0x2c
   1cc10:	bne	1ce30 <__assert_fail@plt+0xb8d8>
   1cc14:	cmp	fp, #0
   1cc18:	ble	1ce30 <__assert_fail@plt+0xb8d8>
   1cc1c:	ldr	r3, [sp, #44]	; 0x2c
   1cc20:	str	r4, [sp, #40]	; 0x28
   1cc24:	str	r3, [sp, #36]	; 0x24
   1cc28:	add	r3, r9, #24
   1cc2c:	str	r3, [sp, #28]
   1cc30:	add	r3, r9, #20
   1cc34:	str	r3, [sp, #32]
   1cc38:	ldr	r0, [r9]
   1cc3c:	ldr	r3, [sp, #16]
   1cc40:	ldr	r3, [r0, r3]
   1cc44:	cmp	r3, #0
   1cc48:	movne	r3, #0
   1cc4c:	ldreq	r3, [sp, #36]	; 0x24
   1cc50:	addeq	r3, r3, #1
   1cc54:	str	r3, [sp, #36]	; 0x24
   1cc58:	ldr	r2, [sp, #36]	; 0x24
   1cc5c:	ldr	r3, [sl, #120]	; 0x78
   1cc60:	cmp	r2, r3
   1cc64:	bgt	1ce70 <__assert_fail@plt+0xb918>
   1cc68:	mov	r2, #0
   1cc6c:	ldr	r3, [sl, #100]	; 0x64
   1cc70:	str	r2, [sp, #56]	; 0x38
   1cc74:	ldr	r2, [sp, #16]
   1cc78:	sub	fp, fp, #1
   1cc7c:	add	r3, r3, r2
   1cc80:	ldr	r7, [r3, #-4]
   1cc84:	cmp	r7, #0
   1cc88:	beq	1ce00 <__assert_fail@plt+0xb8a8>
   1cc8c:	ldr	r3, [r7, #20]
   1cc90:	ldr	r8, [sl, #84]	; 0x54
   1cc94:	cmp	r3, #0
   1cc98:	ble	1ce00 <__assert_fail@plt+0xb8a8>
   1cc9c:	ldr	r3, [r7, #24]
   1cca0:	ldr	r1, [r8]
   1cca4:	mov	r4, #0
   1cca8:	ldr	r5, [r3]
   1ccac:	lsl	r6, r5, #3
   1ccb0:	add	r3, r1, r6
   1ccb4:	b	1cd70 <__assert_fail@plt+0xb818>
   1ccb8:	add	r1, r1, r6
   1ccbc:	mov	r2, fp
   1ccc0:	mov	r0, sl
   1ccc4:	bl	1a594 <__assert_fail@plt+0x903c>
   1ccc8:	cmp	r0, #0
   1cccc:	beq	1cd4c <__assert_fail@plt+0xb7f4>
   1ccd0:	ldr	r3, [r9]
   1ccd4:	ldr	r2, [sp, #16]
   1ccd8:	ldr	r3, [r3, r2]
   1ccdc:	cmp	r3, #0
   1cce0:	beq	1cd4c <__assert_fail@plt+0xb7f4>
   1cce4:	ldr	r2, [r8, #12]
   1cce8:	add	r1, r3, #12
   1ccec:	ldr	r0, [r3, #8]
   1ccf0:	ldr	r2, [r2, r5, lsl #2]
   1ccf4:	bl	174b8 <__assert_fail@plt+0x5f60>
   1ccf8:	cmp	r0, #0
   1ccfc:	beq	1cd4c <__assert_fail@plt+0xb7f4>
   1cd00:	ldr	r3, [sp, #40]	; 0x28
   1cd04:	ldr	r2, [r9, #20]
   1cd08:	cmp	r2, #0
   1cd0c:	beq	1cd38 <__assert_fail@plt+0xb7e0>
   1cd10:	ldr	r1, [r8, #12]
   1cd14:	add	r0, fp, r3
   1cd18:	ldr	r2, [sp, #28]
   1cd1c:	ldr	r3, [r1, r5, lsl #2]
   1cd20:	stm	sp, {r0, r5, fp}
   1cd24:	mov	r0, sl
   1cd28:	ldr	r1, [sp, #32]
   1cd2c:	bl	17784 <__assert_fail@plt+0x622c>
   1cd30:	cmp	r0, #0
   1cd34:	bne	1cd4c <__assert_fail@plt+0xb7f4>
   1cd38:	mov	r1, r5
   1cd3c:	add	r0, sp, #52	; 0x34
   1cd40:	bl	16f28 <__assert_fail@plt+0x59d0>
   1cd44:	cmp	r0, #0
   1cd48:	beq	1ce40 <__assert_fail@plt+0xb8e8>
   1cd4c:	ldr	r3, [r7, #20]
   1cd50:	add	r4, r4, #1
   1cd54:	cmp	r4, r3
   1cd58:	bge	1ce00 <__assert_fail@plt+0xb8a8>
   1cd5c:	ldr	r3, [r7, #24]
   1cd60:	ldr	r1, [r8]
   1cd64:	ldr	r5, [r3, r4, lsl #2]
   1cd68:	lsl	r6, r5, #3
   1cd6c:	add	r3, r1, r6
   1cd70:	ldrb	r3, [r3, #6]
   1cd74:	tst	r3, #16
   1cd78:	beq	1ccb8 <__assert_fail@plt+0xb760>
   1cd7c:	ldr	r3, [sl, #84]	; 0x54
   1cd80:	mov	r2, r3
   1cd84:	str	r3, [sp, #24]
   1cd88:	ldr	r0, [r2]
   1cd8c:	str	fp, [sp]
   1cd90:	ldr	ip, [r9, #12]
   1cd94:	mov	r3, sl
   1cd98:	add	r1, r2, #128	; 0x80
   1cd9c:	mov	r2, r5
   1cda0:	str	ip, [sp, #20]
   1cda4:	bl	1b874 <__assert_fail@plt+0xa31c>
   1cda8:	subs	r3, r0, #0
   1cdac:	ble	1ce38 <__assert_fail@plt+0xb8e0>
   1cdb0:	ldr	ip, [sp, #20]
   1cdb4:	add	r2, fp, r3
   1cdb8:	cmp	ip, r2
   1cdbc:	blt	1cd04 <__assert_fail@plt+0xb7ac>
   1cdc0:	ldr	r1, [r9]
   1cdc4:	ldr	r2, [r1, r2, lsl #2]
   1cdc8:	cmp	r2, #0
   1cdcc:	beq	1cdf8 <__assert_fail@plt+0xb8a0>
   1cdd0:	str	r3, [sp, #20]
   1cdd4:	ldr	r3, [sp, #24]
   1cdd8:	add	r1, r2, #12
   1cddc:	ldr	r0, [r2, #8]
   1cde0:	ldr	ip, [r3, #12]
   1cde4:	ldr	r2, [ip, r5, lsl #2]
   1cde8:	bl	174b8 <__assert_fail@plt+0x5f60>
   1cdec:	ldr	r3, [sp, #20]
   1cdf0:	cmp	r0, #0
   1cdf4:	bne	1cd04 <__assert_fail@plt+0xb7ac>
   1cdf8:	ldr	r1, [r8]
   1cdfc:	b	1ccb8 <__assert_fail@plt+0xb760>
   1ce00:	add	r3, sp, #52	; 0x34
   1ce04:	mov	r2, fp
   1ce08:	mov	r1, r9
   1ce0c:	mov	r0, sl
   1ce10:	bl	1e898 <__assert_fail@plt+0xd340>
   1ce14:	cmp	r0, #0
   1ce18:	bne	1ce58 <__assert_fail@plt+0xb900>
   1ce1c:	ldr	r3, [sp, #16]
   1ce20:	cmp	fp, #0
   1ce24:	sub	r3, r3, #4
   1ce28:	str	r3, [sp, #16]
   1ce2c:	bne	1cc38 <__assert_fail@plt+0xb6e0>
   1ce30:	ldr	r4, [sp, #44]	; 0x2c
   1ce34:	b	1ce44 <__assert_fail@plt+0xb8ec>
   1ce38:	beq	1cdf8 <__assert_fail@plt+0xb8a0>
   1ce3c:	b	1cd04 <__assert_fail@plt+0xb7ac>
   1ce40:	mov	r4, #12
   1ce44:	ldr	r0, [sp, #60]	; 0x3c
   1ce48:	bl	13908 <__assert_fail@plt+0x23b0>
   1ce4c:	mov	r0, r4
   1ce50:	add	sp, sp, #68	; 0x44
   1ce54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce58:	mov	r4, r0
   1ce5c:	b	1ce44 <__assert_fail@plt+0xb8ec>
   1ce60:	mov	r4, #12
   1ce64:	mov	r0, r4
   1ce68:	add	sp, sp, #68	; 0x44
   1ce6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce70:	ldr	r2, [sp, #16]
   1ce74:	mov	r1, #0
   1ce78:	bl	1145c <memset@plt>
   1ce7c:	ldr	r0, [sp, #60]	; 0x3c
   1ce80:	ldr	r4, [sp, #44]	; 0x2c
   1ce84:	bl	13908 <__assert_fail@plt+0x23b0>
   1ce88:	b	1ce4c <__assert_fail@plt+0xb8f4>
   1ce8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce90:	mov	r7, r0
   1ce94:	sub	sp, sp, #428	; 0x1ac
   1ce98:	mov	r6, r3
   1ce9c:	ldr	r3, [r7]
   1cea0:	str	r0, [sp, #44]	; 0x2c
   1cea4:	str	r1, [sp, #56]	; 0x38
   1cea8:	str	r2, [sp, #72]	; 0x48
   1ceac:	mov	r1, #0
   1ceb0:	add	r0, sp, #148	; 0x94
   1ceb4:	mov	r2, #136	; 0x88
   1ceb8:	mov	r8, r3
   1cebc:	str	r3, [sp, #28]
   1cec0:	ldr	r4, [sp, #464]	; 0x1d0
   1cec4:	ldr	r5, [sp, #472]	; 0x1d8
   1cec8:	bl	1145c <memset@plt>
   1cecc:	ldr	r1, [r7, #16]
   1ced0:	str	r8, [sp, #232]	; 0xe8
   1ced4:	cmp	r1, #0
   1ced8:	streq	r1, [sp, #60]	; 0x3c
   1cedc:	beq	1cf08 <__assert_fail@plt+0xb9b0>
   1cee0:	ldrb	r2, [r7, #28]
   1cee4:	subs	r3, r6, r4
   1cee8:	movne	r3, #1
   1ceec:	ands	r3, r3, r2, lsr #3
   1cef0:	streq	r3, [sp, #60]	; 0x3c
   1cef4:	beq	1cf08 <__assert_fail@plt+0xb9b0>
   1cef8:	tst	r2, #1
   1cefc:	moveq	r3, r1
   1cf00:	movne	r3, #0
   1cf04:	str	r3, [sp, #60]	; 0x3c
   1cf08:	ldr	r3, [sp, #44]	; 0x2c
   1cf0c:	ldr	r3, [r3, #24]
   1cf10:	cmp	r3, r5
   1cf14:	subcc	r2, r5, #1
   1cf18:	subcc	r3, r2, r3
   1cf1c:	ldr	r2, [sp, #44]	; 0x2c
   1cf20:	movcs	r3, #0
   1cf24:	str	r3, [sp, #96]	; 0x60
   1cf28:	ldr	r2, [r2, #8]
   1cf2c:	cmp	r2, #0
   1cf30:	beq	1d560 <__assert_fail@plt+0xc008>
   1cf34:	ldr	r2, [sp, #28]
   1cf38:	ldr	r2, [r2, #36]	; 0x24
   1cf3c:	cmp	r2, #0
   1cf40:	beq	1d560 <__assert_fail@plt+0xc008>
   1cf44:	ldr	r1, [sp, #28]
   1cf48:	ldr	r1, [r1, #40]	; 0x28
   1cf4c:	cmp	r1, #0
   1cf50:	beq	1d560 <__assert_fail@plt+0xc008>
   1cf54:	ldr	r0, [sp, #28]
   1cf58:	ldr	ip, [r0, #44]	; 0x2c
   1cf5c:	cmp	ip, #0
   1cf60:	beq	1d560 <__assert_fail@plt+0xc008>
   1cf64:	ldr	r0, [r0, #48]	; 0x30
   1cf68:	cmp	r0, #0
   1cf6c:	beq	1d560 <__assert_fail@plt+0xc008>
   1cf70:	ldr	r2, [r2, #8]
   1cf74:	cmp	r2, #0
   1cf78:	bne	1cfbc <__assert_fail@plt+0xba64>
   1cf7c:	ldr	r2, [r1, #8]
   1cf80:	cmp	r2, #0
   1cf84:	bne	1cfbc <__assert_fail@plt+0xba64>
   1cf88:	ldr	r2, [ip, #8]
   1cf8c:	cmp	r2, #0
   1cf90:	beq	1cfa4 <__assert_fail@plt+0xba4c>
   1cf94:	ldr	r2, [sp, #44]	; 0x2c
   1cf98:	ldrsb	r2, [r2, #28]
   1cf9c:	cmp	r2, #0
   1cfa0:	blt	1cfbc <__assert_fail@plt+0xba64>
   1cfa4:	cmp	r6, #0
   1cfa8:	cmpne	r4, #0
   1cfac:	movne	r4, #1
   1cfb0:	moveq	r4, #0
   1cfb4:	bne	1d560 <__assert_fail@plt+0xc008>
   1cfb8:	mov	r6, r4
   1cfbc:	subs	r3, r5, r3
   1cfc0:	str	r3, [sp, #76]	; 0x4c
   1cfc4:	movne	r3, #1
   1cfc8:	strne	r3, [sp, #40]	; 0x28
   1cfcc:	beq	1d294 <__assert_fail@plt+0xbd3c>
   1cfd0:	ldr	r1, [sp, #28]
   1cfd4:	ldr	lr, [sp, #44]	; 0x2c
   1cfd8:	ldr	r7, [sp, #56]	; 0x38
   1cfdc:	ldr	r2, [r1, #8]
   1cfe0:	ldr	ip, [r1, #92]	; 0x5c
   1cfe4:	ldrb	r0, [r1, #88]	; 0x58
   1cfe8:	ldr	r1, [lr, #20]
   1cfec:	add	r2, r2, #1
   1cff0:	ldr	r3, [lr, #12]
   1cff4:	ldr	lr, [sp, #72]	; 0x48
   1cff8:	cmp	r2, ip
   1cffc:	mov	r5, r1
   1d000:	movlt	r2, ip
   1d004:	str	r1, [sp, #88]	; 0x58
   1d008:	str	lr, [sp, #196]	; 0xc4
   1d00c:	add	r1, lr, #1
   1d010:	str	lr, [sp, #192]	; 0xc0
   1d014:	str	lr, [sp, #204]	; 0xcc
   1d018:	str	lr, [sp, #200]	; 0xc8
   1d01c:	mov	lr, r5
   1d020:	adds	r5, r5, #0
   1d024:	movne	r5, #1
   1d028:	lsr	r3, r3, #22
   1d02c:	cmp	r2, r1
   1d030:	movlt	r1, r2
   1d034:	and	r3, r3, #1
   1d038:	str	ip, [sp, #228]	; 0xe4
   1d03c:	lsr	r2, r0, #3
   1d040:	lsr	ip, r0, #2
   1d044:	and	ip, ip, #1
   1d048:	and	r2, r2, #1
   1d04c:	strb	r3, [sp, #220]	; 0xdc
   1d050:	add	r0, sp, #148	; 0x94
   1d054:	orr	r3, r3, r5
   1d058:	strb	r3, [sp, #223]	; 0xdf
   1d05c:	str	r7, [sp, #148]	; 0x94
   1d060:	str	lr, [sp, #212]	; 0xd4
   1d064:	strb	ip, [sp, #221]	; 0xdd
   1d068:	strb	r2, [sp, #222]	; 0xde
   1d06c:	bl	15ec4 <__assert_fail@plt+0x496c>
   1d070:	subs	r3, r0, #0
   1d074:	str	r3, [sp, #48]	; 0x30
   1d078:	bne	1e01c <__assert_fail@plt+0xcac4>
   1d07c:	ldr	r1, [sp, #28]
   1d080:	ldrb	r2, [sp, #223]	; 0xdf
   1d084:	add	r1, r1, #96	; 0x60
   1d088:	ldrb	r3, [r1, #-8]
   1d08c:	cmp	r2, #0
   1d090:	str	r1, [sp, #216]	; 0xd8
   1d094:	lsr	r3, r3, #4
   1d098:	and	r3, r3, #1
   1d09c:	strb	r3, [sp, #226]	; 0xe2
   1d0a0:	bne	1d0bc <__assert_fail@plt+0xbb64>
   1d0a4:	ldr	r3, [sp, #28]
   1d0a8:	ldr	r2, [sp, #56]	; 0x38
   1d0ac:	ldr	r3, [r3, #92]	; 0x5c
   1d0b0:	str	r2, [sp, #152]	; 0x98
   1d0b4:	cmp	r3, #1
   1d0b8:	ble	1dfa4 <__assert_fail@plt+0xca4c>
   1d0bc:	mov	r1, #0
   1d0c0:	ldr	r3, [sp, #44]	; 0x2c
   1d0c4:	mvn	r2, #0
   1d0c8:	str	r1, [sp, #176]	; 0xb0
   1d0cc:	ldrb	r3, [r3, #28]
   1d0d0:	str	r1, [sp, #180]	; 0xb4
   1d0d4:	lsr	r3, r3, #7
   1d0d8:	strb	r3, [sp, #225]	; 0xe1
   1d0dc:	ldr	r3, [sp, #28]
   1d0e0:	ldr	r8, [r3, #76]	; 0x4c
   1d0e4:	ldr	r3, [sp, #468]	; 0x1d4
   1d0e8:	str	r2, [sp, #240]	; 0xf0
   1d0ec:	str	r3, [sp, #204]	; 0xcc
   1d0f0:	str	r3, [sp, #200]	; 0xc8
   1d0f4:	lsl	r7, r8, #1
   1d0f8:	ldr	r3, [sp, #480]	; 0x1e0
   1d0fc:	cmp	r7, #0
   1d100:	str	r3, [sp, #236]	; 0xec
   1d104:	ble	1d140 <__assert_fail@plt+0xbbe8>
   1d108:	ldr	r3, [pc, #4068]	; 1e0f4 <__assert_fail@plt+0xcb9c>
   1d10c:	cmp	r7, r3
   1d110:	bgt	1daac <__assert_fail@plt+0xc554>
   1d114:	add	r0, r7, r8, lsl #2
   1d118:	lsl	r0, r0, #3
   1d11c:	bl	24794 <__assert_fail@plt+0x1323c>
   1d120:	str	r0, [sp, #264]	; 0x108
   1d124:	lsl	r0, r8, #3
   1d128:	bl	24794 <__assert_fail@plt+0x1323c>
   1d12c:	ldr	r3, [sp, #264]	; 0x108
   1d130:	cmp	r0, #0
   1d134:	cmpne	r3, #0
   1d138:	str	r0, [sp, #280]	; 0x118
   1d13c:	beq	1daac <__assert_fail@plt+0xc554>
   1d140:	ldr	r3, [sp, #76]	; 0x4c
   1d144:	str	r7, [sp, #260]	; 0x104
   1d148:	cmp	r3, #1
   1d14c:	mov	r3, #1
   1d150:	str	r7, [sp, #276]	; 0x114
   1d154:	str	r3, [sp, #268]	; 0x10c
   1d158:	bls	1e120 <__assert_fail@plt+0xcbc8>
   1d15c:	ldr	r3, [sp, #184]	; 0xb8
   1d160:	cmn	r3, #-1073741822	; 0xc0000002
   1d164:	bhi	1daac <__assert_fail@plt+0xc554>
   1d168:	add	r3, r3, #1
   1d16c:	lsl	r0, r3, #2
   1d170:	bl	24794 <__assert_fail@plt+0x1323c>
   1d174:	cmp	r0, #0
   1d178:	str	r0, [sp, #248]	; 0xf8
   1d17c:	beq	1dae4 <__assert_fail@plt+0xc58c>
   1d180:	ldr	r3, [sp, #480]	; 0x1e0
   1d184:	str	r6, [sp, #116]	; 0x74
   1d188:	tst	r3, #1
   1d18c:	moveq	r3, #6
   1d190:	movne	r3, #4
   1d194:	cmp	r6, r4
   1d198:	movle	r2, #1
   1d19c:	mvngt	r2, #0
   1d1a0:	str	r2, [sp, #92]	; 0x5c
   1d1a4:	str	r3, [sp, #208]	; 0xd0
   1d1a8:	movlt	r2, r6
   1d1ac:	movge	r2, r4
   1d1b0:	ldr	r3, [sp, #28]
   1d1b4:	str	r2, [sp, #68]	; 0x44
   1d1b8:	movge	r2, r6
   1d1bc:	movlt	r2, r4
   1d1c0:	str	r2, [sp, #52]	; 0x34
   1d1c4:	ldr	r2, [sp, #60]	; 0x3c
   1d1c8:	ldr	r3, [r3, #92]	; 0x5c
   1d1cc:	cmp	r2, #0
   1d1d0:	str	r3, [sp, #80]	; 0x50
   1d1d4:	beq	1e1e4 <__assert_fail@plt+0xcc8c>
   1d1d8:	ldr	r3, [sp, #80]	; 0x50
   1d1dc:	cmp	r3, #1
   1d1e0:	moveq	r3, #4
   1d1e4:	beq	1d20c <__assert_fail@plt+0xbcb4>
   1d1e8:	ldr	r3, [sp, #44]	; 0x2c
   1d1ec:	ldr	r2, [sp, #88]	; 0x58
   1d1f0:	ldr	r3, [r3, #12]
   1d1f4:	lsr	r3, r3, #22
   1d1f8:	eor	r3, r3, #1
   1d1fc:	cmp	r2, #0
   1d200:	movne	r3, #0
   1d204:	andeq	r3, r3, #1
   1d208:	lsl	r3, r3, #2
   1d20c:	cmp	r6, r4
   1d210:	orr	r3, r5, r3
   1d214:	movle	r2, #2
   1d218:	movgt	r2, #0
   1d21c:	orr	r3, r3, r2
   1d220:	ldr	r2, [sp, #68]	; 0x44
   1d224:	ldr	r1, [sp, #52]	; 0x34
   1d228:	cmp	r6, r2
   1d22c:	movge	r2, #0
   1d230:	movlt	r2, #1
   1d234:	cmp	r6, r1
   1d238:	orrgt	r2, r2, #1
   1d23c:	cmp	r2, #0
   1d240:	str	r2, [sp, #108]	; 0x6c
   1d244:	bne	1d550 <__assert_fail@plt+0xbff8>
   1d248:	sub	r3, r3, #4
   1d24c:	cmp	r6, r4
   1d250:	str	r3, [sp, #84]	; 0x54
   1d254:	add	r3, sp, #424	; 0x1a8
   1d258:	suble	r3, r3, #308	; 0x134
   1d25c:	movgt	r3, #0
   1d260:	str	r3, [sp, #100]	; 0x64
   1d264:	movle	r3, #1
   1d268:	movgt	r3, #0
   1d26c:	str	r3, [sp, #104]	; 0x68
   1d270:	ldr	r3, [sp, #84]	; 0x54
   1d274:	cmp	r3, #4
   1d278:	ldrls	pc, [pc, r3, lsl #2]
   1d27c:	b	1e024 <__assert_fail@plt+0xcacc>
   1d280:	andeq	sp, r1, r4, lsl pc
   1d284:	andeq	sp, r1, r4, lsl pc
   1d288:	andeq	sp, r1, ip, lsr #5
   1d28c:	andeq	sp, r1, r8, lsr #29
   1d290:	andeq	sp, r1, r4, asr r3
   1d294:	ldr	r3, [sp, #28]
   1d298:	ldr	r3, [r3, #76]	; 0x4c
   1d29c:	adds	r3, r3, #0
   1d2a0:	movne	r3, #1
   1d2a4:	str	r3, [sp, #40]	; 0x28
   1d2a8:	b	1cfd0 <__assert_fail@plt+0xba78>
   1d2ac:	ldr	r3, [sp, #52]	; 0x34
   1d2b0:	cmp	r3, r6
   1d2b4:	ble	1d30c <__assert_fail@plt+0xbdb4>
   1d2b8:	ldr	r3, [sp, #56]	; 0x38
   1d2bc:	ldr	r1, [sp, #60]	; 0x3c
   1d2c0:	ldrb	r2, [r3, r6]
   1d2c4:	add	r3, r3, r6
   1d2c8:	ldrb	r2, [r1, r2]
   1d2cc:	cmp	r2, #0
   1d2d0:	bne	1d354 <__assert_fail@plt+0xbdfc>
   1d2d4:	add	r2, r6, #1
   1d2d8:	ldr	ip, [sp, #60]	; 0x3c
   1d2dc:	ldr	r0, [sp, #52]	; 0x34
   1d2e0:	b	1d2f8 <__assert_fail@plt+0xbda0>
   1d2e4:	ldrb	r1, [r3, #1]!
   1d2e8:	add	r2, r2, #1
   1d2ec:	ldrb	r1, [ip, r1]
   1d2f0:	cmp	r1, #0
   1d2f4:	bne	1e198 <__assert_fail@plt+0xcc40>
   1d2f8:	cmp	r2, r0
   1d2fc:	mov	r6, r2
   1d300:	bne	1d2e4 <__assert_fail@plt+0xbd8c>
   1d304:	ldr	r3, [sp, #52]	; 0x34
   1d308:	str	r3, [sp, #116]	; 0x74
   1d30c:	ldr	r3, [sp, #52]	; 0x34
   1d310:	cmp	r3, r6
   1d314:	bne	1d354 <__assert_fail@plt+0xbdfc>
   1d318:	ldr	r2, [sp, #72]	; 0x48
   1d31c:	ldr	r1, [sp, #88]	; 0x58
   1d320:	cmp	r2, r3
   1d324:	movle	r3, #0
   1d328:	ldrgt	r2, [sp, #56]	; 0x38
   1d32c:	ldrbgt	r3, [r2, r3]
   1d330:	cmp	r1, #0
   1d334:	mov	r2, r3
   1d338:	movne	r2, r1
   1d33c:	ldrbne	r2, [r2, r3]
   1d340:	ldr	r3, [sp, #60]	; 0x3c
   1d344:	ldrb	r3, [r3, r2]
   1d348:	cmp	r3, #0
   1d34c:	beq	1d550 <__assert_fail@plt+0xbff8>
   1d350:	ldr	r6, [sp, #52]	; 0x34
   1d354:	ldr	r2, [sp, #480]	; 0x1e0
   1d358:	mov	r1, r6
   1d35c:	add	r0, sp, #148	; 0x94
   1d360:	bl	19dc4 <__assert_fail@plt+0x886c>
   1d364:	subs	r3, r0, #0
   1d368:	str	r3, [sp, #48]	; 0x30
   1d36c:	bne	1e01c <__assert_fail@plt+0xcac4>
   1d370:	ldr	r3, [sp, #80]	; 0x50
   1d374:	cmp	r3, #1
   1d378:	beq	1d398 <__assert_fail@plt+0xbe40>
   1d37c:	ldr	r3, [sp, #176]	; 0xb0
   1d380:	cmp	r3, #0
   1d384:	beq	1d398 <__assert_fail@plt+0xbe40>
   1d388:	ldr	r3, [sp, #156]	; 0x9c
   1d38c:	ldr	r3, [r3]
   1d390:	cmn	r3, #1
   1d394:	beq	1d520 <__assert_fail@plt+0xbfc8>
   1d398:	ldr	r4, [sp, #232]	; 0xe8
   1d39c:	mov	r3, #0
   1d3a0:	str	r3, [sp, #268]	; 0x10c
   1d3a4:	ldr	fp, [r4, #36]	; 0x24
   1d3a8:	str	r3, [sp, #256]	; 0x100
   1d3ac:	str	r3, [sp, #252]	; 0xfc
   1d3b0:	str	r3, [sp, #124]	; 0x7c
   1d3b4:	ldrsb	r3, [fp, #52]	; 0x34
   1d3b8:	ldr	r2, [sp, #188]	; 0xbc
   1d3bc:	cmp	r3, #0
   1d3c0:	str	r2, [sp, #12]
   1d3c4:	blt	1e0b4 <__assert_fail@plt+0xcb5c>
   1d3c8:	ldr	r3, [sp, #248]	; 0xf8
   1d3cc:	cmp	r3, #0
   1d3d0:	beq	1e160 <__assert_fail@plt+0xcc08>
   1d3d4:	ldr	r2, [r4, #76]	; 0x4c
   1d3d8:	ldr	r1, [sp, #12]
   1d3dc:	cmp	r2, #0
   1d3e0:	str	fp, [r3, r1, lsl #2]
   1d3e4:	bne	1e1ec <__assert_fail@plt+0xcc94>
   1d3e8:	ldrb	r3, [fp, #52]	; 0x34
   1d3ec:	ldr	r2, [sp, #104]	; 0x68
   1d3f0:	str	r2, [sp, #16]
   1d3f4:	tst	r3, #16
   1d3f8:	bne	1e1b0 <__assert_fail@plt+0xcc58>
   1d3fc:	mvn	r3, #0
   1d400:	str	r3, [sp, #20]
   1d404:	mov	r3, #0
   1d408:	str	r3, [sp, #36]	; 0x24
   1d40c:	ldr	r3, [sp, #100]	; 0x64
   1d410:	ldr	r5, [sp, #188]	; 0xbc
   1d414:	str	r3, [sp, #32]
   1d418:	b	1d424 <__assert_fail@plt+0xbecc>
   1d41c:	ldr	r5, [sp, #188]	; 0xbc
   1d420:	mov	fp, r4
   1d424:	ldr	r3, [sp, #204]	; 0xcc
   1d428:	cmp	r3, r5
   1d42c:	ble	1d5e0 <__assert_fail@plt+0xc088>
   1d430:	ldr	r3, [sp, #184]	; 0xb8
   1d434:	add	r9, r5, #1
   1d438:	cmp	r9, r3
   1d43c:	bge	1d998 <__assert_fail@plt+0xc440>
   1d440:	ldr	r3, [sp, #176]	; 0xb0
   1d444:	cmp	r9, r3
   1d448:	bge	1d9f4 <__assert_fail@plt+0xc49c>
   1d44c:	ldrb	r3, [fp, #52]	; 0x34
   1d450:	tst	r3, #32
   1d454:	bne	1d7d0 <__assert_fail@plt+0xc278>
   1d458:	ldr	r3, [sp, #152]	; 0x98
   1d45c:	add	r2, r5, #1
   1d460:	str	r2, [sp, #188]	; 0xbc
   1d464:	ldrb	r4, [r3, r5]
   1d468:	ldr	r3, [fp, #44]	; 0x2c
   1d46c:	cmp	r3, #0
   1d470:	beq	1d9c4 <__assert_fail@plt+0xc46c>
   1d474:	ldr	r4, [r3, r4, lsl #2]
   1d478:	ldr	r3, [sp, #248]	; 0xf8
   1d47c:	cmp	r3, #0
   1d480:	beq	1d498 <__assert_fail@plt+0xbf40>
   1d484:	mov	r2, r4
   1d488:	add	r1, sp, #148	; 0x94
   1d48c:	add	r0, sp, #124	; 0x7c
   1d490:	bl	1ca34 <__assert_fail@plt+0xb4dc>
   1d494:	mov	r4, r0
   1d498:	cmp	r4, #0
   1d49c:	beq	1d574 <__assert_fail@plt+0xc01c>
   1d4a0:	ldr	r2, [sp, #16]
   1d4a4:	ldrb	r3, [r4, #52]	; 0x34
   1d4a8:	cmp	fp, r4
   1d4ac:	movne	r2, #0
   1d4b0:	andeq	r2, r2, #1
   1d4b4:	ldr	r1, [sp, #12]
   1d4b8:	cmp	r2, #0
   1d4bc:	movne	r1, r9
   1d4c0:	tst	r3, #16
   1d4c4:	str	r2, [sp, #16]
   1d4c8:	str	r1, [sp, #12]
   1d4cc:	beq	1d41c <__assert_fail@plt+0xbec4>
   1d4d0:	tst	r3, #128	; 0x80
   1d4d4:	bne	1d77c <__assert_fail@plt+0xc224>
   1d4d8:	ldr	r3, [sp, #188]	; 0xbc
   1d4dc:	str	r3, [sp, #20]
   1d4e0:	ldr	r3, [sp, #40]	; 0x28
   1d4e4:	cmp	r3, #0
   1d4e8:	beq	1d600 <__assert_fail@plt+0xc0a8>
   1d4ec:	mov	r3, #1
   1d4f0:	str	r3, [sp, #36]	; 0x24
   1d4f4:	mov	r3, #0
   1d4f8:	ldr	r5, [sp, #20]
   1d4fc:	str	r3, [sp, #32]
   1d500:	b	1d420 <__assert_fail@plt+0xbec8>
   1d504:	mov	r0, r5
   1d508:	bl	13908 <__assert_fail@plt+0x23b0>
   1d50c:	mov	r0, #0
   1d510:	bl	13908 <__assert_fail@plt+0x23b0>
   1d514:	add	r0, sp, #148	; 0x94
   1d518:	bl	16e20 <__assert_fail@plt+0x58c8>
   1d51c:	ldr	r6, [sp, #116]	; 0x74
   1d520:	ldr	r3, [sp, #92]	; 0x5c
   1d524:	ldr	r2, [sp, #68]	; 0x44
   1d528:	add	r6, r6, r3
   1d52c:	ldr	r3, [sp, #52]	; 0x34
   1d530:	str	r6, [sp, #116]	; 0x74
   1d534:	cmp	r3, r6
   1d538:	movge	r3, #0
   1d53c:	movlt	r3, #1
   1d540:	cmp	r2, r6
   1d544:	orrgt	r3, r3, #1
   1d548:	cmp	r3, #0
   1d54c:	beq	1d270 <__assert_fail@plt+0xbd18>
   1d550:	mov	r3, #1
   1d554:	ldr	r7, [sp, #248]	; 0xf8
   1d558:	str	r3, [sp, #48]	; 0x30
   1d55c:	b	1dab8 <__assert_fail@plt+0xc560>
   1d560:	mov	r3, #1
   1d564:	str	r3, [sp, #48]	; 0x30
   1d568:	ldr	r0, [sp, #48]	; 0x30
   1d56c:	add	sp, sp, #428	; 0x1ac
   1d570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d574:	ldr	r3, [sp, #124]	; 0x7c
   1d578:	cmp	r3, #0
   1d57c:	bne	1e1dc <__assert_fail@plt+0xcc84>
   1d580:	ldr	r2, [sp, #248]	; 0xf8
   1d584:	cmp	r2, #0
   1d588:	beq	1d5e0 <__assert_fail@plt+0xc088>
   1d58c:	ldr	r3, [sp, #40]	; 0x28
   1d590:	eor	r5, r3, #1
   1d594:	ldr	r3, [sp, #36]	; 0x24
   1d598:	ands	r5, r5, r3
   1d59c:	bne	1d5e0 <__assert_fail@plt+0xc088>
   1d5a0:	ldr	r3, [sp, #188]	; 0xbc
   1d5a4:	ldr	lr, [sp, #252]	; 0xfc
   1d5a8:	mov	ip, r3
   1d5ac:	add	r2, r2, r3, lsl #2
   1d5b0:	mov	r0, r5
   1d5b4:	b	1d5cc <__assert_fail@plt+0xc074>
   1d5b8:	ldr	r1, [r2, #4]!
   1d5bc:	add	ip, ip, #1
   1d5c0:	cmp	r1, #0
   1d5c4:	mov	r0, #1
   1d5c8:	bne	1d7a0 <__assert_fail@plt+0xc248>
   1d5cc:	add	r3, r3, #1
   1d5d0:	cmp	lr, r3
   1d5d4:	bge	1d5b8 <__assert_fail@plt+0xc060>
   1d5d8:	cmp	r0, #0
   1d5dc:	strne	ip, [sp, #188]	; 0xbc
   1d5e0:	ldr	r3, [sp, #32]
   1d5e4:	cmp	r3, #0
   1d5e8:	beq	1d600 <__assert_fail@plt+0xc0a8>
   1d5ec:	ldr	r2, [sp, #32]
   1d5f0:	ldr	r1, [sp, #12]
   1d5f4:	ldr	r3, [r2]
   1d5f8:	add	r3, r3, r1
   1d5fc:	str	r3, [r2]
   1d600:	ldr	r3, [sp, #20]
   1d604:	cmn	r3, #1
   1d608:	beq	1d514 <__assert_fail@plt+0xbfbc>
   1d60c:	cmn	r3, #2
   1d610:	beq	1daac <__assert_fail@plt+0xc554>
   1d614:	ldr	r3, [sp, #44]	; 0x2c
   1d618:	ldr	r2, [sp, #20]
   1d61c:	ldrb	r3, [r3, #28]
   1d620:	str	r2, [sp, #240]	; 0xf0
   1d624:	ldr	r2, [sp, #76]	; 0x4c
   1d628:	lsr	r3, r3, #4
   1d62c:	eor	r3, r3, #1
   1d630:	cmp	r2, #1
   1d634:	movls	r3, #0
   1d638:	andhi	r3, r3, #1
   1d63c:	cmp	r3, #0
   1d640:	beq	1da58 <__assert_fail@plt+0xc500>
   1d644:	ldr	r3, [sp, #20]
   1d648:	ldr	r7, [sp, #248]	; 0xf8
   1d64c:	mov	r2, r3
   1d650:	add	r0, sp, #148	; 0x94
   1d654:	ldr	r1, [r7, r3, lsl #2]
   1d658:	bl	1a6c8 <__assert_fail@plt+0x9170>
   1d65c:	ldr	r3, [sp, #28]
   1d660:	ldrb	r3, [r3, #88]	; 0x58
   1d664:	tst	r3, #1
   1d668:	str	r0, [sp, #244]	; 0xf4
   1d66c:	beq	1df90 <__assert_fail@plt+0xca38>
   1d670:	ldr	r3, [sp, #20]
   1d674:	ldr	fp, [sp, #232]	; 0xe8
   1d678:	cmn	r3, #-1073741822	; 0xc0000002
   1d67c:	ldr	r9, [sp, #244]	; 0xf4
   1d680:	bhi	1dae8 <__assert_fail@plt+0xc590>
   1d684:	ldr	r3, [sp, #20]
   1d688:	add	r7, r3, #1
   1d68c:	lsl	r4, r7, #2
   1d690:	mov	r0, r4
   1d694:	bl	24794 <__assert_fail@plt+0x1323c>
   1d698:	subs	r5, r0, #0
   1d69c:	beq	1e2cc <__assert_fail@plt+0xcd74>
   1d6a0:	ldr	r3, [fp, #76]	; 0x4c
   1d6a4:	cmp	r3, #0
   1d6a8:	beq	1daf4 <__assert_fail@plt+0xc59c>
   1d6ac:	mov	r0, r4
   1d6b0:	bl	24794 <__assert_fail@plt+0x1323c>
   1d6b4:	subs	r6, r0, #0
   1d6b8:	beq	1e22c <__assert_fail@plt+0xccd4>
   1d6bc:	ldr	r4, [sp, #20]
   1d6c0:	str	fp, [sp, #12]
   1d6c4:	add	sl, sp, #300	; 0x12c
   1d6c8:	mov	fp, r7
   1d6cc:	lsl	r8, fp, #2
   1d6d0:	mov	r2, r8
   1d6d4:	mov	r1, #0
   1d6d8:	mov	r0, r6
   1d6dc:	bl	1145c <memset@plt>
   1d6e0:	mov	r3, #0
   1d6e4:	str	r5, [sp, #284]	; 0x11c
   1d6e8:	str	r6, [sp, #288]	; 0x120
   1d6ec:	str	r9, [sp, #292]	; 0x124
   1d6f0:	str	r4, [sp, #296]	; 0x128
   1d6f4:	add	r1, sp, #284	; 0x11c
   1d6f8:	str	r3, [sl]
   1d6fc:	str	r3, [sl, #4]
   1d700:	str	r3, [sl, #8]
   1d704:	add	r0, sp, #148	; 0x94
   1d708:	bl	1cbb0 <__assert_fail@plt+0xb658>
   1d70c:	mov	r7, r0
   1d710:	ldr	r0, [sp, #308]	; 0x134
   1d714:	bl	13908 <__assert_fail@plt+0x23b0>
   1d718:	cmp	r7, #0
   1d71c:	bne	1e300 <__assert_fail@plt+0xcda8>
   1d720:	ldr	r2, [r5]
   1d724:	cmp	r2, #0
   1d728:	bne	1e24c <__assert_fail@plt+0xccf4>
   1d72c:	ldr	r2, [r6]
   1d730:	cmp	r2, #0
   1d734:	bne	1e24c <__assert_fail@plt+0xccf4>
   1d738:	ldr	r3, [sp, #248]	; 0xf8
   1d73c:	sub	r8, r8, #4
   1d740:	add	r3, r3, r8
   1d744:	subs	r4, r4, #1
   1d748:	bcc	1e100 <__assert_fail@plt+0xcba8>
   1d74c:	ldr	r1, [r3, #-4]!
   1d750:	cmp	r1, #0
   1d754:	beq	1d744 <__assert_fail@plt+0xc1ec>
   1d758:	ldrb	r2, [r1, #52]	; 0x34
   1d75c:	tst	r2, #16
   1d760:	beq	1d744 <__assert_fail@plt+0xc1ec>
   1d764:	mov	r2, r4
   1d768:	add	r0, sp, #148	; 0x94
   1d76c:	bl	1a6c8 <__assert_fail@plt+0x9170>
   1d770:	add	fp, r4, #1
   1d774:	mov	r9, r0
   1d778:	b	1d6cc <__assert_fail@plt+0xc174>
   1d77c:	ldr	r5, [sp, #188]	; 0xbc
   1d780:	mov	r1, r4
   1d784:	mov	r2, r5
   1d788:	add	r0, sp, #148	; 0x94
   1d78c:	bl	1a6c8 <__assert_fail@plt+0x9170>
   1d790:	cmp	r0, #0
   1d794:	beq	1d420 <__assert_fail@plt+0xbec8>
   1d798:	str	r5, [sp, #20]
   1d79c:	b	1d4e0 <__assert_fail@plt+0xbf88>
   1d7a0:	mov	r2, #0
   1d7a4:	add	r1, sp, #148	; 0x94
   1d7a8:	add	r0, sp, #124	; 0x7c
   1d7ac:	str	ip, [sp, #188]	; 0xbc
   1d7b0:	bl	1ca34 <__assert_fail@plt+0xb4dc>
   1d7b4:	ldr	r3, [sp, #124]	; 0x7c
   1d7b8:	cmp	r3, #0
   1d7bc:	bne	1e2e8 <__assert_fail@plt+0xcd90>
   1d7c0:	cmp	r0, #0
   1d7c4:	bne	1e2f8 <__assert_fail@plt+0xcda0>
   1d7c8:	ldr	r2, [sp, #248]	; 0xf8
   1d7cc:	b	1d5a0 <__assert_fail@plt+0xc048>
   1d7d0:	ldr	r3, [fp, #8]
   1d7d4:	ldr	sl, [sp, #232]	; 0xe8
   1d7d8:	cmp	r3, #0
   1d7dc:	ble	1d8c8 <__assert_fail@plt+0xc370>
   1d7e0:	add	r2, sl, #128	; 0x80
   1d7e4:	str	r9, [sp, #64]	; 0x40
   1d7e8:	mov	r4, #0
   1d7ec:	str	r2, [sp, #24]
   1d7f0:	mov	r9, r3
   1d7f4:	b	1d85c <__assert_fail@plt+0xc304>
   1d7f8:	tst	r0, #1
   1d7fc:	beq	1d850 <__assert_fail@plt+0xc2f8>
   1d800:	tst	r6, #8
   1d804:	bne	1d850 <__assert_fail@plt+0xc2f8>
   1d808:	tst	r6, #32
   1d80c:	beq	1d818 <__assert_fail@plt+0xc2c0>
   1d810:	tst	r0, #2
   1d814:	beq	1d850 <__assert_fail@plt+0xc2f8>
   1d818:	tst	r6, #128	; 0x80
   1d81c:	beq	1d828 <__assert_fail@plt+0xc2d0>
   1d820:	tst	r0, #8
   1d824:	beq	1d850 <__assert_fail@plt+0xc2f8>
   1d828:	str	r5, [sp]
   1d82c:	mov	r0, r8
   1d830:	add	r3, sp, #148	; 0x94
   1d834:	mov	r2, r7
   1d838:	ldr	r1, [sp, #24]
   1d83c:	bl	1b874 <__assert_fail@plt+0xa31c>
   1d840:	cmp	r0, #0
   1d844:	bne	1d8d4 <__assert_fail@plt+0xc37c>
   1d848:	ldr	r5, [sp, #188]	; 0xbc
   1d84c:	ldr	r9, [fp, #8]
   1d850:	add	r4, r4, #1
   1d854:	cmp	r4, r9
   1d858:	bge	1d8c4 <__assert_fail@plt+0xc36c>
   1d85c:	ldr	r2, [fp, #12]
   1d860:	ldr	r8, [sl]
   1d864:	ldr	r7, [r2, r4, lsl #2]
   1d868:	add	r2, r8, r7, lsl #3
   1d86c:	ldrb	r1, [r2, #6]
   1d870:	tst	r1, #16
   1d874:	beq	1d850 <__assert_fail@plt+0xc2f8>
   1d878:	ldr	r6, [r2, #4]
   1d87c:	ldr	r3, [pc, #2164]	; 1e0f8 <__assert_fail@plt+0xcba0>
   1d880:	tst	r6, r3
   1d884:	beq	1d828 <__assert_fail@plt+0xc2d0>
   1d888:	ldr	r2, [sp, #236]	; 0xec
   1d88c:	mov	r1, r5
   1d890:	add	r0, sp, #148	; 0x94
   1d894:	bl	19cd8 <__assert_fail@plt+0x8780>
   1d898:	ldr	r3, [pc, #2140]	; 1e0fc <__assert_fail@plt+0xcba4>
   1d89c:	and	r6, r3, r6, lsr #8
   1d8a0:	tst	r6, #4
   1d8a4:	bne	1d7f8 <__assert_fail@plt+0xc2a0>
   1d8a8:	tst	r6, #8
   1d8ac:	beq	1d808 <__assert_fail@plt+0xc2b0>
   1d8b0:	tst	r0, #1
   1d8b4:	beq	1d808 <__assert_fail@plt+0xc2b0>
   1d8b8:	add	r4, r4, #1
   1d8bc:	cmp	r4, r9
   1d8c0:	blt	1d85c <__assert_fail@plt+0xc304>
   1d8c4:	ldr	r9, [sp, #64]	; 0x40
   1d8c8:	mov	r3, #0
   1d8cc:	str	r3, [sp, #124]	; 0x7c
   1d8d0:	b	1d458 <__assert_fail@plt+0xbf00>
   1d8d4:	ldr	r3, [sp, #268]	; 0x10c
   1d8d8:	ldr	r6, [sp, #188]	; 0xbc
   1d8dc:	cmp	r3, r0
   1d8e0:	add	r6, r0, r6
   1d8e4:	movlt	r3, r0
   1d8e8:	mov	r1, r6
   1d8ec:	add	r0, sp, #148	; 0x94
   1d8f0:	str	r3, [sp, #268]	; 0x10c
   1d8f4:	bl	17300 <__assert_fail@plt+0x5da8>
   1d8f8:	cmp	r0, #0
   1d8fc:	str	r0, [sp, #136]	; 0x88
   1d900:	bne	1da3c <__assert_fail@plt+0xc4e4>
   1d904:	ldr	r3, [sl, #12]
   1d908:	ldr	r8, [sp, #248]	; 0xf8
   1d90c:	ldr	r2, [sl, #24]
   1d910:	ldr	r3, [r3, r7, lsl #2]
   1d914:	ldr	r1, [r8, r6, lsl #2]
   1d918:	add	r3, r3, r3, lsl #1
   1d91c:	cmp	r1, #0
   1d920:	add	r2, r2, r3, lsl #2
   1d924:	beq	1da04 <__assert_fail@plt+0xc4ac>
   1d928:	ldr	r1, [r1, #40]	; 0x28
   1d92c:	add	r0, sp, #284	; 0x11c
   1d930:	bl	1803c <__assert_fail@plt+0x6ae4>
   1d934:	cmp	r0, #0
   1d938:	str	r0, [sp, #136]	; 0x88
   1d93c:	bne	1da3c <__assert_fail@plt+0xc4e4>
   1d940:	ldr	r2, [sp, #236]	; 0xec
   1d944:	sub	r1, r6, #1
   1d948:	add	r0, sp, #148	; 0x94
   1d94c:	bl	19cd8 <__assert_fail@plt+0x8780>
   1d950:	add	r2, sp, #284	; 0x11c
   1d954:	mov	r1, sl
   1d958:	ldr	r7, [sp, #248]	; 0xf8
   1d95c:	mov	r3, r0
   1d960:	add	r0, sp, #136	; 0x88
   1d964:	bl	18188 <__assert_fail@plt+0x6c30>
   1d968:	str	r0, [r7, r6, lsl #2]
   1d96c:	ldr	r0, [sp, #292]	; 0x124
   1d970:	bl	13908 <__assert_fail@plt+0x23b0>
   1d974:	ldr	r7, [sp, #248]	; 0xf8
   1d978:	ldr	r3, [r7, r6, lsl #2]
   1d97c:	cmp	r3, #0
   1d980:	bne	1d848 <__assert_fail@plt+0xc2f0>
   1d984:	ldr	r0, [sp, #136]	; 0x88
   1d988:	cmp	r0, #0
   1d98c:	beq	1d848 <__assert_fail@plt+0xc2f0>
   1d990:	ldr	r9, [sp, #64]	; 0x40
   1d994:	b	1da44 <__assert_fail@plt+0xc4ec>
   1d998:	ldr	r2, [sp, #196]	; 0xc4
   1d99c:	cmp	r3, r2
   1d9a0:	bge	1d440 <__assert_fail@plt+0xbee8>
   1d9a4:	add	r1, r5, #2
   1d9a8:	add	r0, sp, #148	; 0x94
   1d9ac:	bl	1684c <__assert_fail@plt+0x52f4>
   1d9b0:	cmp	r0, #0
   1d9b4:	str	r0, [sp, #124]	; 0x7c
   1d9b8:	bne	1daac <__assert_fail@plt+0xc554>
   1d9bc:	ldr	r5, [sp, #188]	; 0xbc
   1d9c0:	b	1d44c <__assert_fail@plt+0xbef4>
   1d9c4:	ldr	r5, [fp, #48]	; 0x30
   1d9c8:	cmp	r5, #0
   1d9cc:	beq	1e134 <__assert_fail@plt+0xcbdc>
   1d9d0:	ldr	r1, [sp, #188]	; 0xbc
   1d9d4:	ldr	r2, [sp, #236]	; 0xec
   1d9d8:	sub	r1, r1, #1
   1d9dc:	add	r0, sp, #148	; 0x94
   1d9e0:	bl	19cd8 <__assert_fail@plt+0x8780>
   1d9e4:	tst	r0, #1
   1d9e8:	addne	r4, r4, #256	; 0x100
   1d9ec:	ldr	r4, [r5, r4, lsl #2]
   1d9f0:	b	1d478 <__assert_fail@plt+0xbf20>
   1d9f4:	ldr	r2, [sp, #196]	; 0xc4
   1d9f8:	cmp	r3, r2
   1d9fc:	bge	1d44c <__assert_fail@plt+0xbef4>
   1da00:	b	1d9a4 <__assert_fail@plt+0xc44c>
   1da04:	ldm	r2, {r0, r1, r2}
   1da08:	add	r3, sp, #284	; 0x11c
   1da0c:	stm	r3, {r0, r1, r2}
   1da10:	sub	r1, r6, #1
   1da14:	ldr	r2, [sp, #236]	; 0xec
   1da18:	add	r0, sp, #148	; 0x94
   1da1c:	bl	19cd8 <__assert_fail@plt+0x8780>
   1da20:	add	r2, sp, #284	; 0x11c
   1da24:	mov	r1, sl
   1da28:	mov	r3, r0
   1da2c:	add	r0, sp, #136	; 0x88
   1da30:	bl	18188 <__assert_fail@plt+0x6c30>
   1da34:	str	r0, [r8, r6, lsl #2]
   1da38:	b	1d974 <__assert_fail@plt+0xc41c>
   1da3c:	ldr	r9, [sp, #64]	; 0x40
   1da40:	ldr	r7, [sp, #248]	; 0xf8
   1da44:	cmp	r7, #0
   1da48:	str	r0, [sp, #124]	; 0x7c
   1da4c:	beq	1dae8 <__assert_fail@plt+0xc590>
   1da50:	mov	r4, #0
   1da54:	b	1d484 <__assert_fail@plt+0xbf2c>
   1da58:	ldr	r3, [sp, #28]
   1da5c:	ldr	r7, [sp, #248]	; 0xf8
   1da60:	ldr	r4, [r3, #76]	; 0x4c
   1da64:	cmp	r4, #0
   1da68:	beq	1db6c <__assert_fail@plt+0xc614>
   1da6c:	ldr	r3, [sp, #20]
   1da70:	add	r0, sp, #148	; 0x94
   1da74:	mov	r2, r3
   1da78:	ldr	r1, [r7, r3, lsl #2]
   1da7c:	bl	1a6c8 <__assert_fail@plt+0x9170>
   1da80:	str	r0, [sp, #244]	; 0xf4
   1da84:	b	1df98 <__assert_fail@plt+0xca40>
   1da88:	tst	r0, #4
   1da8c:	beq	1d3c8 <__assert_fail@plt+0xbe70>
   1da90:	mov	r3, r0
   1da94:	ldr	r2, [fp, #40]	; 0x28
   1da98:	mov	r1, r4
   1da9c:	add	r0, sp, #124	; 0x7c
   1daa0:	bl	18188 <__assert_fail@plt+0x6c30>
   1daa4:	subs	fp, r0, #0
   1daa8:	bne	1d3c8 <__assert_fail@plt+0xbe70>
   1daac:	ldr	r7, [sp, #248]	; 0xf8
   1dab0:	mov	r3, #12
   1dab4:	str	r3, [sp, #48]	; 0x30
   1dab8:	mov	r0, r7
   1dabc:	bl	13908 <__assert_fail@plt+0x23b0>
   1dac0:	ldr	r3, [sp, #28]
   1dac4:	ldr	r3, [r3, #76]	; 0x4c
   1dac8:	cmp	r3, #0
   1dacc:	bne	1e0d8 <__assert_fail@plt+0xcb80>
   1dad0:	add	r0, sp, #148	; 0x94
   1dad4:	bl	16c7c <__assert_fail@plt+0x5724>
   1dad8:	ldr	r0, [sp, #48]	; 0x30
   1dadc:	add	sp, sp, #428	; 0x1ac
   1dae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dae4:	mov	r7, r0
   1dae8:	mov	r3, #12
   1daec:	str	r3, [sp, #48]	; 0x30
   1daf0:	b	1dab8 <__assert_fail@plt+0xc560>
   1daf4:	ldr	r2, [sp, #20]
   1daf8:	add	r1, sp, #284	; 0x11c
   1dafc:	add	r0, sp, #148	; 0x94
   1db00:	str	r3, [sp, #288]	; 0x120
   1db04:	str	r2, [sp, #296]	; 0x128
   1db08:	str	r3, [sp, #300]	; 0x12c
   1db0c:	str	r3, [sp, #304]	; 0x130
   1db10:	str	r3, [sp, #308]	; 0x134
   1db14:	str	r5, [sp, #284]	; 0x11c
   1db18:	str	r9, [sp, #292]	; 0x124
   1db1c:	bl	1cbb0 <__assert_fail@plt+0xb658>
   1db20:	mov	r8, r0
   1db24:	ldr	r0, [sp, #308]	; 0x134
   1db28:	bl	13908 <__assert_fail@plt+0x23b0>
   1db2c:	cmp	r8, #0
   1db30:	bne	1e280 <__assert_fail@plt+0xcd28>
   1db34:	ldr	r3, [r5]
   1db38:	cmp	r3, #0
   1db3c:	beq	1d504 <__assert_fail@plt+0xbfac>
   1db40:	ldr	r0, [sp, #248]	; 0xf8
   1db44:	bl	13908 <__assert_fail@plt+0x23b0>
   1db48:	ldr	r3, [sp, #20]
   1db4c:	mov	r0, #0
   1db50:	str	r3, [sp, #240]	; 0xf0
   1db54:	str	r5, [sp, #248]	; 0xf8
   1db58:	str	r9, [sp, #244]	; 0xf4
   1db5c:	bl	13908 <__assert_fail@plt+0x23b0>
   1db60:	mov	r0, #0
   1db64:	bl	13908 <__assert_fail@plt+0x23b0>
   1db68:	ldr	r7, [sp, #248]	; 0xf8
   1db6c:	ldr	r3, [sp, #76]	; 0x4c
   1db70:	cmp	r3, #0
   1db74:	beq	1dab8 <__assert_fail@plt+0xc560>
   1db78:	cmp	r3, #1
   1db7c:	bls	1dba4 <__assert_fail@plt+0xc64c>
   1db80:	ldr	r3, [sp, #76]	; 0x4c
   1db84:	mvn	r1, #0
   1db88:	sub	r2, r3, #-536870911	; 0xe0000001
   1db8c:	ldr	r3, [sp, #476]	; 0x1dc
   1db90:	add	r2, r3, r2, lsl #3
   1db94:	str	r1, [r3, #12]
   1db98:	str	r1, [r3, #8]!
   1db9c:	cmp	r2, r3
   1dba0:	bne	1db94 <__assert_fail@plt+0xc63c>
   1dba4:	ldr	r3, [sp, #44]	; 0x2c
   1dba8:	ldr	r1, [sp, #476]	; 0x1dc
   1dbac:	ldr	r2, [sp, #240]	; 0xf0
   1dbb0:	ldrb	r3, [r3, #28]
   1dbb4:	str	r2, [r1, #4]
   1dbb8:	ldr	r2, [sp, #76]	; 0x4c
   1dbbc:	mov	r4, #0
   1dbc0:	lsr	r3, r3, #4
   1dbc4:	eor	r3, r3, #1
   1dbc8:	cmp	r2, #1
   1dbcc:	moveq	r3, #0
   1dbd0:	andne	r3, r3, #1
   1dbd4:	cmp	r3, #0
   1dbd8:	mov	r3, r1
   1dbdc:	moveq	r3, r2
   1dbe0:	str	r4, [r1]
   1dbe4:	lsleq	r3, r3, #3
   1dbe8:	streq	r3, [sp, #20]
   1dbec:	beq	1dda8 <__assert_fail@plt+0xc850>
   1dbf0:	ldr	r2, [sp, #28]
   1dbf4:	ldrb	r3, [r2, #88]	; 0x58
   1dbf8:	tst	r3, #1
   1dbfc:	beq	1e4e0 <__assert_fail@plt+0xcf88>
   1dc00:	ldr	r3, [r2, #76]	; 0x4c
   1dc04:	cmp	r3, #0
   1dc08:	ble	1e4e0 <__assert_fail@plt+0xcf88>
   1dc0c:	ldr	r1, [sp, #44]	; 0x2c
   1dc10:	mov	r2, #2
   1dc14:	mov	r3, #16
   1dc18:	ldr	r1, [r1]
   1dc1c:	add	r8, sp, #296	; 0x128
   1dc20:	mov	r0, #48	; 0x30
   1dc24:	str	r1, [sp, #24]
   1dc28:	str	r4, [sp, #136]	; 0x88
   1dc2c:	str	r4, [sp, #144]	; 0x90
   1dc30:	str	r4, [sp, #284]	; 0x11c
   1dc34:	str	r2, [sp, #140]	; 0x8c
   1dc38:	str	r3, [sp, #288]	; 0x120
   1dc3c:	str	r8, [sp, #292]	; 0x124
   1dc40:	bl	24794 <__assert_fail@plt+0x1323c>
   1dc44:	cmp	r0, #0
   1dc48:	str	r0, [sp, #144]	; 0x90
   1dc4c:	beq	1e78c <__assert_fail@plt+0xd234>
   1dc50:	ldr	r3, [sp, #284]	; 0x11c
   1dc54:	ldr	r2, [sp, #76]	; 0x4c
   1dc58:	add	r9, sp, #124	; 0x7c
   1dc5c:	cmp	r2, r3
   1dc60:	ldr	r3, [sp, #24]
   1dc64:	ldr	fp, [r3, #72]	; 0x48
   1dc68:	str	r4, [sp, #124]	; 0x7c
   1dc6c:	str	r4, [r9, #4]
   1dc70:	str	r4, [r9, #8]
   1dc74:	bhi	1e784 <__assert_fail@plt+0xd22c>
   1dc78:	ldr	r3, [sp, #76]	; 0x4c
   1dc7c:	add	sl, sp, #136	; 0x88
   1dc80:	str	r3, [sp, #284]	; 0x11c
   1dc84:	ldr	r5, [sp, #76]	; 0x4c
   1dc88:	ldr	r3, [sp, #292]	; 0x124
   1dc8c:	ldr	r1, [sp, #476]	; 0x1dc
   1dc90:	mov	r0, r3
   1dc94:	str	r3, [sp, #16]
   1dc98:	lsl	r3, r5, #3
   1dc9c:	mov	r2, r3
   1dca0:	str	r3, [sp, #20]
   1dca4:	bl	11264 <memcpy@plt>
   1dca8:	add	r3, sp, #424	; 0x1a8
   1dcac:	mov	r2, r3
   1dcb0:	ldr	r3, [sp, #476]	; 0x1dc
   1dcb4:	str	r8, [sp, #12]
   1dcb8:	mov	r8, r5
   1dcbc:	ldr	r4, [r3]
   1dcc0:	lsl	r1, r5, #4
   1dcc4:	str	r4, [r2, #-304]!	; 0xfffffed0
   1dcc8:	str	r1, [sp, #44]	; 0x2c
   1dccc:	str	r2, [sp, #40]	; 0x28
   1dcd0:	ldr	r3, [sp, #476]	; 0x1dc
   1dcd4:	ldr	r3, [r3, #4]
   1dcd8:	cmp	r4, r3
   1dcdc:	bgt	1dd64 <__assert_fail@plt+0xc80c>
   1dce0:	ldr	r2, [sp, #24]
   1dce4:	lsl	r6, fp, #3
   1dce8:	mov	r7, fp
   1dcec:	ldr	r0, [r2]
   1dcf0:	add	r1, r0, r6
   1dcf4:	ldrb	r2, [r1, #4]
   1dcf8:	cmp	r2, #8
   1dcfc:	beq	1e5d4 <__assert_fail@plt+0xd07c>
   1dd00:	cmp	r2, #9
   1dd04:	beq	1e584 <__assert_fail@plt+0xd02c>
   1dd08:	cmp	r3, r4
   1dd0c:	beq	1e4c8 <__assert_fail@plt+0xcf70>
   1dd10:	cmp	sl, #0
   1dd14:	beq	1e364 <__assert_fail@plt+0xce0c>
   1dd18:	mov	r2, fp
   1dd1c:	add	r1, sp, #132	; 0x84
   1dd20:	ldr	r0, [sp, #128]	; 0x80
   1dd24:	bl	174b8 <__assert_fail@plt+0x5f60>
   1dd28:	cmp	r0, #0
   1dd2c:	beq	1e364 <__assert_fail@plt+0xce0c>
   1dd30:	ldr	r2, [sp, #476]	; 0x1dc
   1dd34:	mov	r3, #0
   1dd38:	ldr	r1, [sp, #476]	; 0x1dc
   1dd3c:	ldr	r1, [r1, r3, lsl #3]
   1dd40:	add	r3, r3, #1
   1dd44:	cmp	r1, #0
   1dd48:	blt	1dd58 <__assert_fail@plt+0xc800>
   1dd4c:	ldr	r1, [r2, #4]
   1dd50:	cmn	r1, #1
   1dd54:	beq	1e334 <__assert_fail@plt+0xcddc>
   1dd58:	cmp	r8, r3
   1dd5c:	add	r2, r2, #8
   1dd60:	bne	1dd38 <__assert_fail@plt+0xc7e0>
   1dd64:	ldr	r0, [sp, #132]	; 0x84
   1dd68:	ldr	r8, [sp, #12]
   1dd6c:	bl	13908 <__assert_fail@plt+0x23b0>
   1dd70:	ldr	r0, [sp, #292]	; 0x124
   1dd74:	cmp	r0, r8
   1dd78:	beq	1dd80 <__assert_fail@plt+0xc828>
   1dd7c:	bl	13908 <__assert_fail@plt+0x23b0>
   1dd80:	mov	r2, #0
   1dd84:	mov	r3, #16
   1dd88:	mov	r0, sl
   1dd8c:	str	r8, [sp, #292]	; 0x124
   1dd90:	str	r2, [sp, #284]	; 0x11c
   1dd94:	str	r3, [sp, #288]	; 0x120
   1dd98:	bl	16ec4 <__assert_fail@plt+0x596c>
   1dd9c:	cmp	r0, #0
   1dda0:	bne	1e308 <__assert_fail@plt+0xcdb0>
   1dda4:	ldr	r7, [sp, #248]	; 0xf8
   1dda8:	ldr	r3, [sp, #476]	; 0x1dc
   1ddac:	ldr	r2, [sp, #20]
   1ddb0:	ldrb	r6, [sp, #224]	; 0xe0
   1ddb4:	ldr	r5, [sp, #176]	; 0xb0
   1ddb8:	ldr	r8, [sp, #160]	; 0xa0
   1ddbc:	ldr	r9, [sp, #180]	; 0xb4
   1ddc0:	ldr	lr, [sp, #116]	; 0x74
   1ddc4:	add	r4, r3, r2
   1ddc8:	mov	ip, r3
   1ddcc:	add	r1, r3, #4
   1ddd0:	ldr	r2, [r1, #-4]
   1ddd4:	cmn	r2, #1
   1ddd8:	beq	1ddf8 <__assert_fail@plt+0xc8a0>
   1dddc:	cmp	r6, #0
   1dde0:	bne	1e4a0 <__assert_fail@plt+0xcf48>
   1dde4:	ldr	r0, [r3, #4]
   1dde8:	add	r2, lr, r2
   1ddec:	add	r0, lr, r0
   1ddf0:	str	r2, [r1, #-4]
   1ddf4:	str	r0, [r3, #4]
   1ddf8:	add	r3, r3, #8
   1ddfc:	cmp	r4, r3
   1de00:	add	r1, r1, #8
   1de04:	bne	1ddd0 <__assert_fail@plt+0xc878>
   1de08:	ldr	r2, [sp, #96]	; 0x60
   1de0c:	cmp	r2, #0
   1de10:	ble	1de40 <__assert_fail@plt+0xc8e8>
   1de14:	ldr	r2, [sp, #96]	; 0x60
   1de18:	ldr	r1, [sp, #76]	; 0x4c
   1de1c:	ldr	r0, [sp, #476]	; 0x1dc
   1de20:	add	r1, r2, r1
   1de24:	mvn	r2, #0
   1de28:	add	r1, r0, r1, lsl #3
   1de2c:	str	r2, [r3]
   1de30:	str	r2, [r3, #4]
   1de34:	add	r3, r3, #8
   1de38:	cmp	r3, r1
   1de3c:	bne	1de2c <__assert_fail@plt+0xc8d4>
   1de40:	ldr	r3, [sp, #28]
   1de44:	ldr	r3, [r3, #132]	; 0x84
   1de48:	cmp	r3, #0
   1de4c:	beq	1dab8 <__assert_fail@plt+0xc560>
   1de50:	mov	r2, #0
   1de54:	ldr	lr, [sp, #76]	; 0x4c
   1de58:	b	1de98 <__assert_fail@plt+0xc940>
   1de5c:	ldr	r0, [r3]
   1de60:	cmp	r2, r0
   1de64:	add	r4, r0, #1
   1de68:	mov	r2, r1
   1de6c:	beq	1de90 <__assert_fail@plt+0xc938>
   1de70:	ldr	r1, [sp, #476]	; 0x1dc
   1de74:	ldr	r0, [sp, #476]	; 0x1dc
   1de78:	ldr	r1, [r1, r4, lsl #3]
   1de7c:	str	r1, [ip, #8]
   1de80:	ldr	r1, [r3]
   1de84:	add	r1, r0, r1, lsl #3
   1de88:	ldr	r1, [r1, #12]
   1de8c:	str	r1, [ip, #12]
   1de90:	add	r3, r3, #4
   1de94:	add	ip, ip, #8
   1de98:	add	r1, r2, #1
   1de9c:	cmp	r1, lr
   1dea0:	bne	1de5c <__assert_fail@plt+0xc904>
   1dea4:	b	1dab8 <__assert_fail@plt+0xc560>
   1dea8:	ldr	r3, [sp, #52]	; 0x34
   1deac:	cmp	r3, r6
   1deb0:	ble	1d30c <__assert_fail@plt+0xbdb4>
   1deb4:	ldr	r3, [sp, #56]	; 0x38
   1deb8:	ldr	r1, [sp, #88]	; 0x58
   1debc:	ldrb	r2, [r3, r6]
   1dec0:	add	r3, r3, r6
   1dec4:	ldrb	r2, [r1, r2]
   1dec8:	ldr	r1, [sp, #60]	; 0x3c
   1decc:	ldrb	r2, [r1, r2]
   1ded0:	cmp	r2, #0
   1ded4:	bne	1d354 <__assert_fail@plt+0xbdfc>
   1ded8:	add	r2, r6, #1
   1dedc:	ldr	ip, [sp, #60]	; 0x3c
   1dee0:	ldr	lr, [sp, #88]	; 0x58
   1dee4:	ldr	r0, [sp, #52]	; 0x34
   1dee8:	b	1df04 <__assert_fail@plt+0xc9ac>
   1deec:	ldrb	r1, [r3, #1]!
   1def0:	add	r2, r2, #1
   1def4:	ldrb	r1, [lr, r1]
   1def8:	ldrb	r1, [ip, r1]
   1defc:	cmp	r1, #0
   1df00:	bne	1e198 <__assert_fail@plt+0xcc40>
   1df04:	cmp	r0, r2
   1df08:	mov	r6, r2
   1df0c:	bne	1deec <__assert_fail@plt+0xc994>
   1df10:	b	1d304 <__assert_fail@plt+0xbdac>
   1df14:	ldr	r3, [sp, #68]	; 0x44
   1df18:	cmp	r3, r6
   1df1c:	bgt	1d550 <__assert_fail@plt+0xbff8>
   1df20:	ldr	ip, [sp, #116]	; 0x74
   1df24:	ldr	r1, [sp, #108]	; 0x6c
   1df28:	mov	r0, ip
   1df2c:	ldr	r4, [sp, #60]	; 0x3c
   1df30:	ldr	lr, [sp, #88]	; 0x58
   1df34:	ldr	r7, [sp, #68]	; 0x44
   1df38:	ldr	r8, [sp, #56]	; 0x38
   1df3c:	ldr	r5, [sp, #72]	; 0x48
   1df40:	b	1df54 <__assert_fail@plt+0xc9fc>
   1df44:	cmp	r7, r6
   1df48:	mov	r0, r6
   1df4c:	mov	r1, #1
   1df50:	bgt	1e1a0 <__assert_fail@plt+0xcc48>
   1df54:	cmp	r5, r6
   1df58:	mov	r3, #0
   1df5c:	ldrbgt	r3, [r8, r6]
   1df60:	cmp	lr, #0
   1df64:	sub	r6, r6, #1
   1df68:	mov	r2, r3
   1df6c:	ldrbne	r2, [lr, r3]
   1df70:	ldrb	r3, [r4, r2]
   1df74:	cmp	r3, #0
   1df78:	beq	1df44 <__assert_fail@plt+0xc9ec>
   1df7c:	cmp	r1, #0
   1df80:	movne	ip, r0
   1df84:	strne	r0, [sp, #116]	; 0x74
   1df88:	mov	r6, ip
   1df8c:	b	1d354 <__assert_fail@plt+0xbdfc>
   1df90:	ldr	r3, [sp, #28]
   1df94:	ldr	r4, [r3, #76]	; 0x4c
   1df98:	cmp	r4, #0
   1df9c:	bne	1d670 <__assert_fail@plt+0xc118>
   1dfa0:	b	1db6c <__assert_fail@plt+0xc614>
   1dfa4:	ldr	r1, [sp, #72]	; 0x48
   1dfa8:	b	1d0c0 <__assert_fail@plt+0xbb68>
   1dfac:	cmp	sl, #0
   1dfb0:	beq	1e700 <__assert_fail@plt+0xd1a8>
   1dfb4:	ldr	r3, [sp, #16]
   1dfb8:	str	r9, [sp, #4]
   1dfbc:	str	r3, [sp]
   1dfc0:	mov	r2, r8
   1dfc4:	ldr	r3, [sp, #476]	; 0x1dc
   1dfc8:	ldr	r1, [sp, #40]	; 0x28
   1dfcc:	mov	r0, sl
   1dfd0:	bl	17394 <__assert_fail@plt+0x5e3c>
   1dfd4:	subs	fp, r0, #0
   1dfd8:	bge	1e414 <__assert_fail@plt+0xcebc>
   1dfdc:	ldr	r0, [sp, #132]	; 0x84
   1dfe0:	ldr	r8, [sp, #12]
   1dfe4:	bl	13908 <__assert_fail@plt+0x23b0>
   1dfe8:	ldr	r0, [sp, #292]	; 0x124
   1dfec:	cmp	r0, r8
   1dff0:	beq	1dff8 <__assert_fail@plt+0xcaa0>
   1dff4:	bl	13908 <__assert_fail@plt+0x23b0>
   1dff8:	mov	r3, #16
   1dffc:	mov	r2, #0
   1e000:	str	r3, [sp, #288]	; 0x120
   1e004:	mov	r0, sl
   1e008:	mov	r3, #1
   1e00c:	str	r8, [sp, #292]	; 0x124
   1e010:	str	r2, [sp, #284]	; 0x11c
   1e014:	str	r3, [sp, #48]	; 0x30
   1e018:	bl	16ec4 <__assert_fail@plt+0x596c>
   1e01c:	ldr	r7, [sp, #248]	; 0xf8
   1e020:	b	1dab8 <__assert_fail@plt+0xc560>
   1e024:	ldr	r1, [sp, #172]	; 0xac
   1e028:	ldr	r4, [sp, #60]	; 0x3c
   1e02c:	ldr	r5, [sp, #92]	; 0x5c
   1e030:	ldr	r7, [sp, #68]	; 0x44
   1e034:	ldr	r8, [sp, #52]	; 0x34
   1e038:	b	1e080 <__assert_fail@plt+0xcb28>
   1e03c:	ldr	r0, [sp, #176]	; 0xb0
   1e040:	mov	r2, #0
   1e044:	cmp	r3, r0
   1e048:	ldrcc	r2, [sp, #152]	; 0x98
   1e04c:	ldrbcc	r2, [r2, r3]
   1e050:	ldrb	r3, [r4, r2]
   1e054:	cmp	r3, #0
   1e058:	bne	1d354 <__assert_fail@plt+0xbdfc>
   1e05c:	add	r6, r6, r5
   1e060:	cmp	r8, r6
   1e064:	movge	r3, #0
   1e068:	movlt	r3, #1
   1e06c:	cmp	r7, r6
   1e070:	orrgt	r3, r3, #1
   1e074:	cmp	r3, #0
   1e078:	str	r6, [sp, #116]	; 0x74
   1e07c:	bne	1d550 <__assert_fail@plt+0xbff8>
   1e080:	ldr	r2, [sp, #180]	; 0xb4
   1e084:	sub	r3, r6, r1
   1e088:	cmp	r3, r2
   1e08c:	bcc	1e03c <__assert_fail@plt+0xcae4>
   1e090:	ldr	r2, [sp, #480]	; 0x1e0
   1e094:	mov	r1, r6
   1e098:	add	r0, sp, #148	; 0x94
   1e09c:	bl	19dc4 <__assert_fail@plt+0x886c>
   1e0a0:	cmp	r0, #0
   1e0a4:	bne	1e308 <__assert_fail@plt+0xcdb0>
   1e0a8:	ldr	r1, [sp, #172]	; 0xac
   1e0ac:	sub	r3, r6, r1
   1e0b0:	b	1e03c <__assert_fail@plt+0xcae4>
   1e0b4:	ldr	r3, [sp, #12]
   1e0b8:	ldr	r2, [sp, #236]	; 0xec
   1e0bc:	sub	r1, r3, #1
   1e0c0:	add	r0, sp, #148	; 0x94
   1e0c4:	bl	19cd8 <__assert_fail@plt+0x8780>
   1e0c8:	tst	r0, #1
   1e0cc:	beq	1e170 <__assert_fail@plt+0xcc18>
   1e0d0:	ldr	fp, [r4, #40]	; 0x28
   1e0d4:	b	1d3c8 <__assert_fail@plt+0xbe70>
   1e0d8:	add	r0, sp, #148	; 0x94
   1e0dc:	bl	16e20 <__assert_fail@plt+0x58c8>
   1e0e0:	ldr	r0, [sp, #280]	; 0x118
   1e0e4:	bl	13908 <__assert_fail@plt+0x23b0>
   1e0e8:	ldr	r0, [sp, #264]	; 0x108
   1e0ec:	bl	13908 <__assert_fail@plt+0x23b0>
   1e0f0:	b	1dad0 <__assert_fail@plt+0xc578>
   1e0f4:	beq	feac8ba4 <optarg@@GLIBC_2.4+0xfea919e4>
   1e0f8:	andeq	pc, r3, r0, lsl #30
   1e0fc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1e100:	mov	r0, r5
   1e104:	bl	13908 <__assert_fail@plt+0x23b0>
   1e108:	mov	r0, r6
   1e10c:	bl	13908 <__assert_fail@plt+0x23b0>
   1e110:	add	r0, sp, #148	; 0x94
   1e114:	bl	16e20 <__assert_fail@plt+0x58c8>
   1e118:	ldr	r6, [sp, #116]	; 0x74
   1e11c:	b	1d520 <__assert_fail@plt+0xbfc8>
   1e120:	ldr	r3, [sp, #28]
   1e124:	ldrb	r3, [r3, #88]	; 0x58
   1e128:	tst	r3, #2
   1e12c:	bne	1d15c <__assert_fail@plt+0xbc04>
   1e130:	b	1d180 <__assert_fail@plt+0xbc28>
   1e134:	mov	r1, fp
   1e138:	ldr	r0, [sp, #232]	; 0xe8
   1e13c:	bl	19244 <__assert_fail@plt+0x7cec>
   1e140:	cmp	r0, #0
   1e144:	bne	1d468 <__assert_fail@plt+0xbf10>
   1e148:	ldr	r7, [sp, #248]	; 0xf8
   1e14c:	mov	r3, #12
   1e150:	cmp	r7, #0
   1e154:	str	r3, [sp, #124]	; 0x7c
   1e158:	bne	1da50 <__assert_fail@plt+0xc4f8>
   1e15c:	b	1dae8 <__assert_fail@plt+0xc590>
   1e160:	ldr	r3, [sp, #104]	; 0x68
   1e164:	str	r3, [sp, #16]
   1e168:	ldrb	r3, [fp, #52]	; 0x34
   1e16c:	b	1d3f4 <__assert_fail@plt+0xbe9c>
   1e170:	cmp	r0, #0
   1e174:	beq	1d3c8 <__assert_fail@plt+0xbe70>
   1e178:	and	r3, r0, #6
   1e17c:	cmp	r3, #6
   1e180:	ldreq	fp, [r4, #48]	; 0x30
   1e184:	beq	1d3c8 <__assert_fail@plt+0xbe70>
   1e188:	tst	r0, #2
   1e18c:	beq	1da88 <__assert_fail@plt+0xc530>
   1e190:	ldr	fp, [r4, #44]	; 0x2c
   1e194:	b	1d3c8 <__assert_fail@plt+0xbe70>
   1e198:	str	r6, [sp, #116]	; 0x74
   1e19c:	b	1d354 <__assert_fail@plt+0xbdfc>
   1e1a0:	str	r6, [sp, #116]	; 0x74
   1e1a4:	ldr	r7, [sp, #248]	; 0xf8
   1e1a8:	str	r1, [sp, #48]	; 0x30
   1e1ac:	b	1dab8 <__assert_fail@plt+0xc560>
   1e1b0:	ldrsb	r3, [fp, #52]	; 0x34
   1e1b4:	cmp	r3, #0
   1e1b8:	blt	1e2a8 <__assert_fail@plt+0xcd50>
   1e1bc:	ldr	r3, [sp, #40]	; 0x28
   1e1c0:	cmp	r3, #0
   1e1c4:	ldr	r3, [sp, #12]
   1e1c8:	str	r3, [sp, #20]
   1e1cc:	movne	r3, #1
   1e1d0:	strne	r3, [sp, #36]	; 0x24
   1e1d4:	bne	1d40c <__assert_fail@plt+0xbeb4>
   1e1d8:	b	1d600 <__assert_fail@plt+0xc0a8>
   1e1dc:	ldr	r7, [sp, #248]	; 0xf8
   1e1e0:	b	1dae8 <__assert_fail@plt+0xc590>
   1e1e4:	mov	r3, #8
   1e1e8:	b	1d220 <__assert_fail@plt+0xbcc8>
   1e1ec:	add	r4, fp, #8
   1e1f0:	add	r5, fp, #12
   1e1f4:	mov	r1, r4
   1e1f8:	mov	r2, r5
   1e1fc:	mov	r3, #0
   1e200:	add	r0, sp, #148	; 0x94
   1e204:	bl	1a7a8 <__assert_fail@plt+0x9250>
   1e208:	cmp	r0, #0
   1e20c:	str	r0, [sp, #124]	; 0x7c
   1e210:	bne	1e2c4 <__assert_fail@plt+0xcd6c>
   1e214:	ldrb	r3, [fp, #52]	; 0x34
   1e218:	tst	r3, #64	; 0x40
   1e21c:	bne	1e310 <__assert_fail@plt+0xcdb8>
   1e220:	ldr	r2, [sp, #108]	; 0x6c
   1e224:	str	r2, [sp, #16]
   1e228:	b	1d3f4 <__assert_fail@plt+0xbe9c>
   1e22c:	mov	r0, r5
   1e230:	bl	13908 <__assert_fail@plt+0x23b0>
   1e234:	mov	r0, r6
   1e238:	bl	13908 <__assert_fail@plt+0x23b0>
   1e23c:	mov	r3, #12
   1e240:	str	r3, [sp, #48]	; 0x30
   1e244:	ldr	r7, [sp, #248]	; 0xf8
   1e248:	b	1dab8 <__assert_fail@plt+0xc560>
   1e24c:	mov	r7, fp
   1e250:	ldr	fp, [sp, #12]
   1e254:	mov	r3, r7
   1e258:	mov	r2, r6
   1e25c:	mov	r1, r5
   1e260:	mov	r0, fp
   1e264:	str	r4, [sp, #20]
   1e268:	bl	186bc <__assert_fail@plt+0x7164>
   1e26c:	mov	r8, r0
   1e270:	mov	r0, r6
   1e274:	bl	13908 <__assert_fail@plt+0x23b0>
   1e278:	cmp	r8, #0
   1e27c:	beq	1db40 <__assert_fail@plt+0xc5e8>
   1e280:	mov	r6, #0
   1e284:	mov	r0, r5
   1e288:	bl	13908 <__assert_fail@plt+0x23b0>
   1e28c:	mov	r0, r6
   1e290:	bl	13908 <__assert_fail@plt+0x23b0>
   1e294:	cmp	r8, #1
   1e298:	beq	1d514 <__assert_fail@plt+0xbfbc>
   1e29c:	str	r8, [sp, #48]	; 0x30
   1e2a0:	ldr	r7, [sp, #248]	; 0xf8
   1e2a4:	b	1dab8 <__assert_fail@plt+0xc560>
   1e2a8:	ldr	r2, [sp, #12]
   1e2ac:	mov	r1, fp
   1e2b0:	add	r0, sp, #148	; 0x94
   1e2b4:	bl	1a6c8 <__assert_fail@plt+0x9170>
   1e2b8:	cmp	r0, #0
   1e2bc:	beq	1d3fc <__assert_fail@plt+0xbea4>
   1e2c0:	b	1e1bc <__assert_fail@plt+0xcc64>
   1e2c4:	str	r0, [sp, #20]
   1e2c8:	b	1d600 <__assert_fail@plt+0xc0a8>
   1e2cc:	bl	13908 <__assert_fail@plt+0x23b0>
   1e2d0:	mov	r0, r5
   1e2d4:	bl	13908 <__assert_fail@plt+0x23b0>
   1e2d8:	mov	r3, #12
   1e2dc:	str	r3, [sp, #48]	; 0x30
   1e2e0:	ldr	r7, [sp, #248]	; 0xf8
   1e2e4:	b	1dab8 <__assert_fail@plt+0xc560>
   1e2e8:	cmp	r0, #0
   1e2ec:	mov	r4, r0
   1e2f0:	bne	1d4a0 <__assert_fail@plt+0xbf48>
   1e2f4:	b	1d5e0 <__assert_fail@plt+0xc088>
   1e2f8:	mov	r4, r0
   1e2fc:	b	1d4a0 <__assert_fail@plt+0xbf48>
   1e300:	mov	r8, r7
   1e304:	b	1e284 <__assert_fail@plt+0xcd2c>
   1e308:	str	r0, [sp, #48]	; 0x30
   1e30c:	b	1e01c <__assert_fail@plt+0xcac4>
   1e310:	mov	r2, r5
   1e314:	mov	r1, r4
   1e318:	add	r0, sp, #148	; 0x94
   1e31c:	bl	1c298 <__assert_fail@plt+0xad40>
   1e320:	cmp	r0, #0
   1e324:	str	r0, [sp, #124]	; 0x7c
   1e328:	bne	1e2c4 <__assert_fail@plt+0xcd6c>
   1e32c:	ldrb	r3, [fp, #52]	; 0x34
   1e330:	b	1e220 <__assert_fail@plt+0xccc8>
   1e334:	ldr	r3, [sp, #16]
   1e338:	str	r9, [sp, #4]
   1e33c:	str	r3, [sp]
   1e340:	mov	r2, r8
   1e344:	ldr	r3, [sp, #476]	; 0x1dc
   1e348:	ldr	r1, [sp, #40]	; 0x28
   1e34c:	mov	r0, sl
   1e350:	bl	17394 <__assert_fail@plt+0x5e3c>
   1e354:	subs	fp, r0, #0
   1e358:	blt	1dd64 <__assert_fail@plt+0xc80c>
   1e35c:	mov	r7, fp
   1e360:	lsl	r6, fp, #3
   1e364:	ldr	r5, [sp, #232]	; 0xe8
   1e368:	ldr	r0, [r5]
   1e36c:	add	r1, r0, r6
   1e370:	ldrb	r3, [r1, #4]
   1e374:	tst	r3, #8
   1e378:	beq	1e41c <__assert_fail@plt+0xcec4>
   1e37c:	ldr	ip, [sp, #120]	; 0x78
   1e380:	ldr	r3, [sp, #248]	; 0xf8
   1e384:	mov	r2, fp
   1e388:	add	r1, sp, #132	; 0x84
   1e38c:	ldr	r0, [sp, #128]	; 0x80
   1e390:	ldr	r4, [r3, ip, lsl #2]
   1e394:	bl	174b8 <__assert_fail@plt+0x5f60>
   1e398:	ldr	r5, [r5, #20]
   1e39c:	cmp	r0, #0
   1e3a0:	beq	1e760 <__assert_fail@plt+0xd208>
   1e3a4:	add	fp, fp, fp, lsl #1
   1e3a8:	add	r2, r5, fp, lsl #2
   1e3ac:	ldr	r7, [r2, #4]
   1e3b0:	cmp	r7, #0
   1e3b4:	ble	1dfb4 <__assert_fail@plt+0xca5c>
   1e3b8:	ldr	r3, [r4, #8]
   1e3bc:	ldr	r5, [r2, #8]
   1e3c0:	str	r3, [sp, #32]
   1e3c4:	sub	r5, r5, #4
   1e3c8:	add	r3, r4, #12
   1e3cc:	mvn	fp, #0
   1e3d0:	mov	r4, #0
   1e3d4:	str	r3, [sp, #36]	; 0x24
   1e3d8:	ldr	r6, [r5, #4]!
   1e3dc:	ldr	r1, [sp, #36]	; 0x24
   1e3e0:	mov	r2, r6
   1e3e4:	ldr	r0, [sp, #32]
   1e3e8:	bl	174b8 <__assert_fail@plt+0x5f60>
   1e3ec:	add	r4, r4, #1
   1e3f0:	cmp	r0, #0
   1e3f4:	beq	1e404 <__assert_fail@plt+0xceac>
   1e3f8:	cmn	fp, #1
   1e3fc:	bne	1e798 <__assert_fail@plt+0xd240>
   1e400:	mov	fp, r6
   1e404:	cmp	r4, r7
   1e408:	bne	1e3d8 <__assert_fail@plt+0xce80>
   1e40c:	cmp	fp, #0
   1e410:	blt	1e858 <__assert_fail@plt+0xd300>
   1e414:	ldr	r4, [sp, #120]	; 0x78
   1e418:	b	1dcd0 <__assert_fail@plt+0xc778>
   1e41c:	ldrb	r2, [r1, #6]
   1e420:	tst	r2, #16
   1e424:	bne	1e6c8 <__assert_fail@plt+0xd170>
   1e428:	cmp	r3, #4
   1e42c:	beq	1e640 <__assert_fail@plt+0xd0e8>
   1e430:	ldr	r4, [sp, #120]	; 0x78
   1e434:	mov	r2, r4
   1e438:	add	r0, sp, #148	; 0x94
   1e43c:	bl	1a594 <__assert_fail@plt+0x903c>
   1e440:	cmp	r0, #0
   1e444:	beq	1dfb4 <__assert_fail@plt+0xca5c>
   1e448:	ldr	r3, [r5, #12]
   1e44c:	add	r4, r4, #1
   1e450:	ldr	fp, [r3, r7, lsl #2]
   1e454:	cmp	sl, #0
   1e458:	str	r4, [sp, #120]	; 0x78
   1e45c:	beq	1e494 <__assert_fail@plt+0xcf3c>
   1e460:	ldr	r3, [sp, #240]	; 0xf0
   1e464:	cmp	r4, r3
   1e468:	bgt	1dfb4 <__assert_fail@plt+0xca5c>
   1e46c:	ldr	r3, [sp, #248]	; 0xf8
   1e470:	ldr	r3, [r3, r4, lsl #2]
   1e474:	cmp	r3, #0
   1e478:	beq	1dfb4 <__assert_fail@plt+0xca5c>
   1e47c:	mov	r2, fp
   1e480:	add	r1, r3, #12
   1e484:	ldr	r0, [r3, #8]
   1e488:	bl	174b8 <__assert_fail@plt+0x5f60>
   1e48c:	cmp	r0, #0
   1e490:	beq	1dfb4 <__assert_fail@plt+0xca5c>
   1e494:	mov	r3, #0
   1e498:	str	r3, [sp, #128]	; 0x80
   1e49c:	b	1e40c <__assert_fail@plt+0xceb4>
   1e4a0:	cmp	r2, r5
   1e4a4:	moveq	r2, r9
   1e4a8:	ldrne	r2, [r8, r2, lsl #2]
   1e4ac:	str	r2, [r1, #-4]
   1e4b0:	ldr	r0, [r3, #4]
   1e4b4:	cmp	r5, r0
   1e4b8:	moveq	r0, r9
   1e4bc:	ldrne	r0, [r8, r0, lsl #2]
   1e4c0:	str	r0, [r3, #4]
   1e4c4:	b	1dde8 <__assert_fail@plt+0xc890>
   1e4c8:	ldr	r3, [sp, #244]	; 0xf4
   1e4cc:	cmp	fp, r3
   1e4d0:	bne	1dd10 <__assert_fail@plt+0xc7b8>
   1e4d4:	cmp	sl, #0
   1e4d8:	beq	1dd64 <__assert_fail@plt+0xc80c>
   1e4dc:	b	1dd30 <__assert_fail@plt+0xc7d8>
   1e4e0:	ldr	r3, [sp, #44]	; 0x2c
   1e4e4:	add	r9, sp, #124	; 0x7c
   1e4e8:	mov	r1, #16
   1e4ec:	ldr	r3, [r3]
   1e4f0:	add	r8, sp, #296	; 0x128
   1e4f4:	mov	r0, r3
   1e4f8:	str	r3, [sp, #24]
   1e4fc:	mov	r3, #0
   1e500:	mov	sl, r3
   1e504:	mov	r2, #2
   1e508:	str	r3, [sp, #284]	; 0x11c
   1e50c:	str	r1, [sp, #288]	; 0x120
   1e510:	str	r8, [sp, #292]	; 0x124
   1e514:	str	r3, [sp, #136]	; 0x88
   1e518:	ldr	fp, [r0, #72]	; 0x48
   1e51c:	str	r3, [sp, #144]	; 0x90
   1e520:	str	r3, [sp, #124]	; 0x7c
   1e524:	str	r2, [sp, #140]	; 0x8c
   1e528:	str	r3, [r9, #4]
   1e52c:	str	r3, [r9, #8]
   1e530:	mov	r3, #8
   1e534:	mov	r2, r8
   1e538:	ldr	r1, [sp, #76]	; 0x4c
   1e53c:	add	r0, sp, #284	; 0x11c
   1e540:	bl	24898 <__assert_fail@plt+0x13340>
   1e544:	cmp	r0, #0
   1e548:	bne	1dc84 <__assert_fail@plt+0xc72c>
   1e54c:	ldr	r0, [sp, #292]	; 0x124
   1e550:	cmp	r0, r8
   1e554:	beq	1e55c <__assert_fail@plt+0xd004>
   1e558:	bl	13908 <__assert_fail@plt+0x23b0>
   1e55c:	mov	r3, #16
   1e560:	mov	r2, #0
   1e564:	str	r3, [sp, #288]	; 0x120
   1e568:	mov	r0, sl
   1e56c:	mov	r3, #12
   1e570:	str	r8, [sp, #292]	; 0x124
   1e574:	str	r2, [sp, #284]	; 0x11c
   1e578:	str	r3, [sp, #48]	; 0x30
   1e57c:	bl	16ec4 <__assert_fail@plt+0x596c>
   1e580:	b	1e01c <__assert_fail@plt+0xcac4>
   1e584:	ldr	r2, [r1]
   1e588:	add	r2, r2, #1
   1e58c:	cmp	r8, r2
   1e590:	ble	1dd08 <__assert_fail@plt+0xc7b0>
   1e594:	ldr	r3, [sp, #476]	; 0x1dc
   1e598:	ldr	r0, [r3, r2, lsl #3]
   1e59c:	add	r3, r3, r2, lsl #3
   1e5a0:	cmp	r4, r0
   1e5a4:	bgt	1e604 <__assert_fail@plt+0xd0ac>
   1e5a8:	ldrb	r1, [r1, #6]
   1e5ac:	tst	r1, #8
   1e5b0:	beq	1e5c4 <__assert_fail@plt+0xd06c>
   1e5b4:	ldr	r1, [sp, #16]
   1e5b8:	ldr	r2, [r1, r2, lsl #3]
   1e5bc:	cmn	r2, #1
   1e5c0:	bne	1e628 <__assert_fail@plt+0xd0d0>
   1e5c4:	str	r4, [r3, #4]
   1e5c8:	ldr	r3, [sp, #476]	; 0x1dc
   1e5cc:	ldr	r3, [r3, #4]
   1e5d0:	b	1dd08 <__assert_fail@plt+0xc7b0>
   1e5d4:	ldr	r2, [r0, fp, lsl #3]
   1e5d8:	add	r2, r2, #1
   1e5dc:	cmp	r8, r2
   1e5e0:	ble	1dd08 <__assert_fail@plt+0xc7b0>
   1e5e4:	ldr	r1, [sp, #476]	; 0x1dc
   1e5e8:	ldr	r3, [sp, #476]	; 0x1dc
   1e5ec:	add	r3, r3, r2, lsl #3
   1e5f0:	str	r4, [r1, r2, lsl #3]
   1e5f4:	mvn	r2, #0
   1e5f8:	str	r2, [r3, #4]
   1e5fc:	ldr	r3, [r1, #4]
   1e600:	b	1dd08 <__assert_fail@plt+0xc7b0>
   1e604:	str	r4, [r3, #4]
   1e608:	ldr	r2, [sp, #20]
   1e60c:	ldr	r1, [sp, #476]	; 0x1dc
   1e610:	ldr	r0, [sp, #16]
   1e614:	bl	11264 <memcpy@plt>
   1e618:	ldr	r3, [sp, #476]	; 0x1dc
   1e61c:	ldr	r4, [sp, #120]	; 0x78
   1e620:	ldr	r3, [r3, #4]
   1e624:	b	1dd08 <__assert_fail@plt+0xc7b0>
   1e628:	ldr	r2, [sp, #20]
   1e62c:	ldr	r0, [sp, #476]	; 0x1dc
   1e630:	bl	11264 <memcpy@plt>
   1e634:	ldr	r3, [sp, #476]	; 0x1dc
   1e638:	ldr	r3, [r3, #4]
   1e63c:	b	1dd08 <__assert_fail@plt+0xc7b0>
   1e640:	ldr	r3, [r1]
   1e644:	add	r3, r3, #1
   1e648:	cmp	r8, r3
   1e64c:	ble	1dfac <__assert_fail@plt+0xca54>
   1e650:	ldr	r2, [sp, #476]	; 0x1dc
   1e654:	ldr	r1, [sp, #476]	; 0x1dc
   1e658:	add	r2, r2, r3, lsl #3
   1e65c:	cmp	sl, #0
   1e660:	ldr	r0, [r1, r3, lsl #3]
   1e664:	ldr	r3, [r2, #4]
   1e668:	sub	r4, r3, r0
   1e66c:	beq	1e6f8 <__assert_fail@plt+0xd1a0>
   1e670:	cmn	r0, #1
   1e674:	beq	1dfb4 <__assert_fail@plt+0xca5c>
   1e678:	cmn	r3, #1
   1e67c:	beq	1dfb4 <__assert_fail@plt+0xca5c>
   1e680:	cmp	r4, #0
   1e684:	beq	1e700 <__assert_fail@plt+0xd1a8>
   1e688:	ldr	r6, [sp, #120]	; 0x78
   1e68c:	ldr	r3, [sp, #176]	; 0xb0
   1e690:	ldr	r1, [sp, #152]	; 0x98
   1e694:	sub	r3, r3, r6
   1e698:	cmp	r4, r3
   1e69c:	bgt	1dfb4 <__assert_fail@plt+0xca5c>
   1e6a0:	add	r0, r1, r0
   1e6a4:	mov	r2, r4
   1e6a8:	add	r1, r1, r6
   1e6ac:	bl	112b8 <memcmp@plt>
   1e6b0:	cmp	r0, #0
   1e6b4:	bne	1dfb4 <__assert_fail@plt+0xca5c>
   1e6b8:	ldr	r3, [r5, #12]
   1e6bc:	add	r4, r6, r4
   1e6c0:	ldr	fp, [r3, fp, lsl #2]
   1e6c4:	b	1e454 <__assert_fail@plt+0xcefc>
   1e6c8:	ldr	r3, [sp, #120]	; 0x78
   1e6cc:	mov	r2, fp
   1e6d0:	str	r3, [sp]
   1e6d4:	add	r1, r5, #128	; 0x80
   1e6d8:	add	r3, sp, #148	; 0x94
   1e6dc:	bl	1b874 <__assert_fail@plt+0xa31c>
   1e6e0:	subs	r4, r0, #0
   1e6e4:	bne	1e758 <__assert_fail@plt+0xd200>
   1e6e8:	ldr	r1, [r5]
   1e6ec:	ldr	r4, [sp, #120]	; 0x78
   1e6f0:	add	r1, r1, r6
   1e6f4:	b	1e434 <__assert_fail@plt+0xcedc>
   1e6f8:	cmp	r4, #0
   1e6fc:	bne	1e758 <__assert_fail@plt+0xd200>
   1e700:	mov	r1, fp
   1e704:	mov	r0, r9
   1e708:	bl	16f28 <__assert_fail@plt+0x59d0>
   1e70c:	cmp	r0, #0
   1e710:	beq	1e774 <__assert_fail@plt+0xd21c>
   1e714:	add	fp, fp, fp, lsl #1
   1e718:	ldr	r3, [r5, #20]
   1e71c:	ldr	r1, [sp, #248]	; 0xf8
   1e720:	add	r3, r3, fp, lsl #2
   1e724:	ldr	r4, [sp, #120]	; 0x78
   1e728:	ldr	r2, [r3, #8]
   1e72c:	ldr	r3, [r1, r4, lsl #2]
   1e730:	ldr	fp, [r2]
   1e734:	add	r1, r3, #12
   1e738:	mov	r2, fp
   1e73c:	ldr	r0, [r3, #8]
   1e740:	bl	174b8 <__assert_fail@plt+0x5f60>
   1e744:	cmp	r0, #0
   1e748:	bne	1e40c <__assert_fail@plt+0xceb4>
   1e74c:	ldr	r1, [r5]
   1e750:	add	r1, r1, r6
   1e754:	b	1e434 <__assert_fail@plt+0xcedc>
   1e758:	ldr	r6, [sp, #120]	; 0x78
   1e75c:	b	1e6b8 <__assert_fail@plt+0xd160>
   1e760:	mov	r1, fp
   1e764:	mov	r0, r9
   1e768:	bl	16f28 <__assert_fail@plt+0x59d0>
   1e76c:	cmp	r0, #0
   1e770:	bne	1e3a4 <__assert_fail@plt+0xce4c>
   1e774:	ldr	r0, [sp, #132]	; 0x84
   1e778:	ldr	r8, [sp, #12]
   1e77c:	bl	13908 <__assert_fail@plt+0x23b0>
   1e780:	b	1e54c <__assert_fail@plt+0xcff4>
   1e784:	add	sl, sp, #136	; 0x88
   1e788:	b	1e530 <__assert_fail@plt+0xcfd8>
   1e78c:	mov	r3, #12
   1e790:	str	r3, [sp, #48]	; 0x30
   1e794:	b	1e01c <__assert_fail@plt+0xcac4>
   1e798:	mov	r2, fp
   1e79c:	add	r1, sp, #132	; 0x84
   1e7a0:	ldr	r0, [sp, #128]	; 0x80
   1e7a4:	bl	174b8 <__assert_fail@plt+0x5f60>
   1e7a8:	cmp	r0, #0
   1e7ac:	bne	1e890 <__assert_fail@plt+0xd338>
   1e7b0:	cmp	sl, #0
   1e7b4:	beq	1e40c <__assert_fail@plt+0xceb4>
   1e7b8:	ldr	r4, [sl]
   1e7bc:	ldr	r3, [sl, #4]
   1e7c0:	add	r1, r4, #1
   1e7c4:	cmp	r1, r3
   1e7c8:	str	r1, [sl]
   1e7cc:	ldr	r5, [sp, #120]	; 0x78
   1e7d0:	beq	1e864 <__assert_fail@plt+0xd30c>
   1e7d4:	ldr	r3, [sl, #8]
   1e7d8:	add	r2, r4, r4, lsl #1
   1e7dc:	ldr	r0, [sp, #44]	; 0x2c
   1e7e0:	lsl	r4, r2, #3
   1e7e4:	str	r5, [r3, r2, lsl #3]
   1e7e8:	add	r5, r3, r4
   1e7ec:	str	r6, [r5, #4]
   1e7f0:	bl	24794 <__assert_fail@plt+0x1323c>
   1e7f4:	ldr	r3, [sl, #8]
   1e7f8:	add	r3, r3, r4
   1e7fc:	str	r0, [r5, #8]
   1e800:	ldr	r0, [r3, #8]
   1e804:	cmp	r0, #0
   1e808:	beq	1e774 <__assert_fail@plt+0xd21c>
   1e80c:	ldr	r5, [sp, #20]
   1e810:	ldr	r1, [sp, #476]	; 0x1dc
   1e814:	mov	r2, r5
   1e818:	bl	11264 <memcpy@plt>
   1e81c:	ldr	r3, [sl, #8]
   1e820:	mov	r2, r5
   1e824:	add	r3, r3, r4
   1e828:	ldr	r1, [sp, #16]
   1e82c:	ldr	r0, [r3, #8]
   1e830:	add	r0, r0, r5
   1e834:	bl	11264 <memcpy@plt>
   1e838:	ldr	r0, [sl, #8]
   1e83c:	mov	r1, r9
   1e840:	add	r0, r0, r4
   1e844:	add	r0, r0, #12
   1e848:	bl	17fc4 <__assert_fail@plt+0x6a6c>
   1e84c:	cmp	r0, #0
   1e850:	beq	1e40c <__assert_fail@plt+0xceb4>
   1e854:	b	1e774 <__assert_fail@plt+0xd21c>
   1e858:	cmn	fp, #2
   1e85c:	bne	1dfb4 <__assert_fail@plt+0xca5c>
   1e860:	b	1e774 <__assert_fail@plt+0xd21c>
   1e864:	add	r1, r1, r1, lsl #1
   1e868:	ldr	r0, [sl, #8]
   1e86c:	lsl	r1, r1, #4
   1e870:	bl	247c0 <__assert_fail@plt+0x13268>
   1e874:	subs	r3, r0, #0
   1e878:	beq	1e774 <__assert_fail@plt+0xd21c>
   1e87c:	ldr	r2, [sl, #4]
   1e880:	str	r3, [sl, #8]
   1e884:	lsl	r2, r2, #1
   1e888:	str	r2, [sl, #4]
   1e88c:	b	1e7d8 <__assert_fail@plt+0xd280>
   1e890:	mov	fp, r6
   1e894:	b	1e40c <__assert_fail@plt+0xceb4>
   1e898:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e89c:	mov	fp, r2
   1e8a0:	ldr	r2, [r0, #100]	; 0x64
   1e8a4:	sub	sp, sp, #100	; 0x64
   1e8a8:	mov	ip, #0
   1e8ac:	ldr	r2, [r2, fp, lsl #2]
   1e8b0:	mov	r4, r3
   1e8b4:	cmp	r2, ip
   1e8b8:	lsl	r3, fp, #2
   1e8bc:	str	r3, [sp, #40]	; 0x28
   1e8c0:	str	r0, [sp, #32]
   1e8c4:	mov	r9, r1
   1e8c8:	ldr	r5, [r0, #84]	; 0x54
   1e8cc:	str	ip, [sp, #64]	; 0x40
   1e8d0:	ldr	r3, [r4, #4]
   1e8d4:	beq	1ed48 <__assert_fail@plt+0xd7f0>
   1e8d8:	add	r2, r2, #4
   1e8dc:	cmp	r3, ip
   1e8e0:	str	r2, [sp, #24]
   1e8e4:	bne	1e924 <__assert_fail@plt+0xd3cc>
   1e8e8:	ldr	r3, [r9]
   1e8ec:	mov	r2, #0
   1e8f0:	str	r2, [r3, fp, lsl #2]
   1e8f4:	ldr	r3, [sp, #24]
   1e8f8:	cmp	r3, #0
   1e8fc:	beq	1ea84 <__assert_fail@plt+0xd52c>
   1e900:	ldr	r3, [sp, #32]
   1e904:	ldr	r3, [r3, #100]	; 0x64
   1e908:	ldr	r3, [r3, fp, lsl #2]
   1e90c:	ldrb	r3, [r3, #52]	; 0x34
   1e910:	ands	r3, r3, #64	; 0x40
   1e914:	bne	1e9d8 <__assert_fail@plt+0xd480>
   1e918:	mov	r0, r3
   1e91c:	add	sp, sp, #100	; 0x64
   1e920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e924:	add	r0, sp, #96	; 0x60
   1e928:	mov	r2, r4
   1e92c:	str	ip, [r0, #-28]!	; 0xffffffe4
   1e930:	mov	r1, r5
   1e934:	bl	184b4 <__assert_fail@plt+0x6f5c>
   1e938:	ldr	r3, [sp, #68]	; 0x44
   1e93c:	cmp	r3, #0
   1e940:	mov	r6, r0
   1e944:	bne	1e918 <__assert_fail@plt+0xd3c0>
   1e948:	ldr	r7, [r0, #28]
   1e94c:	cmp	r7, #0
   1e950:	addne	r6, r0, #28
   1e954:	bne	1ea94 <__assert_fail@plt+0xd53c>
   1e958:	ldr	r0, [r4, #4]
   1e95c:	str	r7, [r6, #32]
   1e960:	str	r0, [r6, #28]
   1e964:	lsl	r0, r0, #2
   1e968:	bl	24794 <__assert_fail@plt+0x1323c>
   1e96c:	add	r6, r6, #28
   1e970:	cmp	r0, #0
   1e974:	str	r0, [r6, #8]
   1e978:	beq	1e9c8 <__assert_fail@plt+0xd470>
   1e97c:	ldr	r3, [r4, #4]
   1e980:	str	r7, [sp, #68]	; 0x44
   1e984:	cmp	r3, #0
   1e988:	bgt	1e99c <__assert_fail@plt+0xd444>
   1e98c:	b	1ea94 <__assert_fail@plt+0xd53c>
   1e990:	ldr	r3, [r4, #4]
   1e994:	cmp	r7, r3
   1e998:	bge	1ea94 <__assert_fail@plt+0xd53c>
   1e99c:	ldr	r3, [r4, #8]
   1e9a0:	ldr	r1, [r5, #28]
   1e9a4:	mov	r0, r6
   1e9a8:	ldr	r3, [r3, r7, lsl #2]
   1e9ac:	add	r7, r7, #1
   1e9b0:	add	r3, r3, r3, lsl #1
   1e9b4:	add	r1, r1, r3, lsl #2
   1e9b8:	bl	18a34 <__assert_fail@plt+0x74dc>
   1e9bc:	cmp	r0, #0
   1e9c0:	str	r0, [sp, #68]	; 0x44
   1e9c4:	beq	1e990 <__assert_fail@plt+0xd438>
   1e9c8:	mov	r3, #12
   1e9cc:	mov	r0, r3
   1e9d0:	add	sp, sp, #100	; 0x64
   1e9d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9d8:	ldr	r3, [sp, #32]
   1e9dc:	ldr	ip, [r3, #108]	; 0x6c
   1e9e0:	mov	r3, #0
   1e9e4:	mov	r0, r3
   1e9e8:	mov	r3, ip
   1e9ec:	cmp	r0, r3
   1e9f0:	bge	1ea50 <__assert_fail@plt+0xd4f8>
   1e9f4:	add	r2, r0, r3
   1e9f8:	ldr	r1, [sp, #32]
   1e9fc:	add	r2, r2, r2, lsr #31
   1ea00:	asr	r2, r2, #1
   1ea04:	ldr	lr, [r1, #116]	; 0x74
   1ea08:	add	r1, r2, r2, lsl #1
   1ea0c:	add	r1, lr, r1, lsl #3
   1ea10:	ldr	r1, [r1, #4]
   1ea14:	cmp	fp, r1
   1ea18:	ble	1ea40 <__assert_fail@plt+0xd4e8>
   1ea1c:	b	1eae8 <__assert_fail@plt+0xd590>
   1ea20:	asr	r3, r3, #1
   1ea24:	mov	r4, r3
   1ea28:	add	r1, r3, r3, lsl #1
   1ea2c:	add	r1, lr, r1, lsl #3
   1ea30:	ldr	r1, [r1, #4]
   1ea34:	cmp	fp, r1
   1ea38:	bgt	1eaf0 <__assert_fail@plt+0xd598>
   1ea3c:	mov	r2, r3
   1ea40:	add	r3, r0, r2
   1ea44:	cmp	r0, r2
   1ea48:	add	r3, r3, r3, lsr #31
   1ea4c:	blt	1ea20 <__assert_fail@plt+0xd4c8>
   1ea50:	str	r0, [sp, #44]	; 0x2c
   1ea54:	ldr	r3, [sp, #44]	; 0x2c
   1ea58:	cmp	ip, r3
   1ea5c:	ble	1ea84 <__assert_fail@plt+0xd52c>
   1ea60:	add	r2, r3, r3, lsl #1
   1ea64:	ldr	r3, [sp, #32]
   1ea68:	lsl	r2, r2, #3
   1ea6c:	str	r2, [sp, #56]	; 0x38
   1ea70:	ldr	r3, [r3, #116]	; 0x74
   1ea74:	add	r3, r3, r2
   1ea78:	ldr	r3, [r3, #4]
   1ea7c:	cmp	fp, r3
   1ea80:	beq	1eafc <__assert_fail@plt+0xd5a4>
   1ea84:	mov	r3, #0
   1ea88:	mov	r0, r3
   1ea8c:	add	sp, sp, #100	; 0x64
   1ea90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea94:	mov	r2, r6
   1ea98:	ldr	r1, [sp, #24]
   1ea9c:	mov	r0, r4
   1eaa0:	bl	17998 <__assert_fail@plt+0x6440>
   1eaa4:	cmp	r0, #0
   1eaa8:	mov	r3, r0
   1eaac:	str	r0, [sp, #64]	; 0x40
   1eab0:	bne	1e918 <__assert_fail@plt+0xd3c0>
   1eab4:	ldr	r2, [r9, #20]
   1eab8:	cmp	r2, #0
   1eabc:	bne	1ed5c <__assert_fail@plt+0xd804>
   1eac0:	mov	r2, r4
   1eac4:	mov	r1, r5
   1eac8:	add	r0, sp, #64	; 0x40
   1eacc:	ldr	r4, [r9]
   1ead0:	bl	184b4 <__assert_fail@plt+0x6f5c>
   1ead4:	ldr	r3, [sp, #64]	; 0x40
   1ead8:	cmp	r3, #0
   1eadc:	str	r0, [r4, fp, lsl #2]
   1eae0:	beq	1e8f4 <__assert_fail@plt+0xd39c>
   1eae4:	b	1e918 <__assert_fail@plt+0xd3c0>
   1eae8:	mov	r4, r2
   1eaec:	mov	r2, r3
   1eaf0:	add	r0, r4, #1
   1eaf4:	mov	r3, r2
   1eaf8:	b	1e9ec <__assert_fail@plt+0xd494>
   1eafc:	ldr	r3, [sp, #44]	; 0x2c
   1eb00:	cmn	r3, #1
   1eb04:	beq	1ea84 <__assert_fail@plt+0xd52c>
   1eb08:	ldr	r3, [sp, #24]
   1eb0c:	ldr	r2, [sp, #32]
   1eb10:	ldr	r0, [r3, #4]
   1eb14:	mov	r3, #0
   1eb18:	cmp	r0, r3
   1eb1c:	str	r3, [sp, #68]	; 0x44
   1eb20:	ldr	sl, [r2, #84]	; 0x54
   1eb24:	ble	1ea84 <__assert_fail@plt+0xd52c>
   1eb28:	str	r3, [sp, #16]
   1eb2c:	add	r3, r9, #24
   1eb30:	str	r3, [sp, #48]	; 0x30
   1eb34:	add	r3, r9, #20
   1eb38:	str	r3, [sp, #52]	; 0x34
   1eb3c:	add	r3, fp, #1
   1eb40:	str	r3, [sp, #60]	; 0x3c
   1eb44:	b	1eb64 <__assert_fail@plt+0xd60c>
   1eb48:	cmp	r3, #4
   1eb4c:	beq	1eba0 <__assert_fail@plt+0xd648>
   1eb50:	ldr	r3, [sp, #16]
   1eb54:	add	r3, r3, #1
   1eb58:	cmp	r3, r0
   1eb5c:	str	r3, [sp, #16]
   1eb60:	bge	1f018 <__assert_fail@plt+0xdac0>
   1eb64:	ldr	r3, [sp, #24]
   1eb68:	ldr	ip, [sp, #16]
   1eb6c:	ldr	r2, [r9, #8]
   1eb70:	ldr	r1, [r3, #8]
   1eb74:	ldr	r3, [sl]
   1eb78:	ldr	r8, [r1, ip, lsl #2]
   1eb7c:	cmp	r8, r2
   1eb80:	add	r3, r3, r8, lsl #3
   1eb84:	ldrb	r3, [r3, #4]
   1eb88:	bne	1eb48 <__assert_fail@plt+0xd5f0>
   1eb8c:	ldr	r2, [r9, #12]
   1eb90:	cmp	fp, r2
   1eb94:	beq	1eb50 <__assert_fail@plt+0xd5f8>
   1eb98:	cmp	r3, #4
   1eb9c:	bne	1eb50 <__assert_fail@plt+0xd5f8>
   1eba0:	ldr	r3, [sp, #32]
   1eba4:	ldr	r2, [sp, #56]	; 0x38
   1eba8:	ldr	r6, [sp, #44]	; 0x2c
   1ebac:	ldr	r4, [r3, #116]	; 0x74
   1ebb0:	add	r3, r8, r8, lsl #1
   1ebb4:	add	r4, r4, r2
   1ebb8:	lsl	r3, r3, #2
   1ebbc:	str	r3, [sp, #36]	; 0x24
   1ebc0:	lsl	r3, r8, #2
   1ebc4:	str	r3, [sp, #28]
   1ebc8:	mov	r7, r2
   1ebcc:	b	1ebe8 <__assert_fail@plt+0xd690>
   1ebd0:	ldrb	r3, [r4, #20]
   1ebd4:	add	r6, r6, #1
   1ebd8:	add	r7, r7, #24
   1ebdc:	cmp	r3, #0
   1ebe0:	add	r4, r4, #24
   1ebe4:	beq	1ed3c <__assert_fail@plt+0xd7e4>
   1ebe8:	ldr	r3, [r4]
   1ebec:	cmp	r8, r3
   1ebf0:	bne	1ebd0 <__assert_fail@plt+0xd678>
   1ebf4:	ldr	r3, [r4, #8]
   1ebf8:	ldr	r5, [r4, #12]
   1ebfc:	sub	r5, r5, r3
   1ec00:	cmp	r5, #0
   1ec04:	add	r5, fp, r5
   1ec08:	ldreq	r3, [sl, #20]
   1ec0c:	ldreq	r2, [sp, #36]	; 0x24
   1ec10:	ldrne	r2, [sp, #28]
   1ec14:	addeq	r3, r3, r2
   1ec18:	ldrne	r3, [sl, #12]
   1ec1c:	ldreq	r3, [r3, #8]
   1ec20:	ldrne	r3, [r3, r2]
   1ec24:	ldr	r2, [r9, #12]
   1ec28:	ldreq	r3, [r3]
   1ec2c:	cmp	r5, r2
   1ec30:	bgt	1ebd0 <__assert_fail@plt+0xd678>
   1ec34:	ldr	r2, [r9]
   1ec38:	ldr	r0, [r2, r5, lsl #2]
   1ec3c:	cmp	r0, #0
   1ec40:	beq	1ebd0 <__assert_fail@plt+0xd678>
   1ec44:	mov	r2, r3
   1ec48:	add	r1, r0, #12
   1ec4c:	ldr	r0, [r0, #8]
   1ec50:	str	r3, [sp, #20]
   1ec54:	bl	174b8 <__assert_fail@plt+0x5f60>
   1ec58:	ldr	r3, [sp, #20]
   1ec5c:	cmp	r0, #0
   1ec60:	beq	1ebd0 <__assert_fail@plt+0xd678>
   1ec64:	stmib	sp, {r3, r5}
   1ec68:	str	fp, [sp]
   1ec6c:	mov	r3, r8
   1ec70:	ldr	r2, [sp, #48]	; 0x30
   1ec74:	ldr	r1, [sp, #52]	; 0x34
   1ec78:	ldr	r0, [sp, #32]
   1ec7c:	bl	17784 <__assert_fail@plt+0x622c>
   1ec80:	cmp	r0, #0
   1ec84:	bne	1ebd0 <__assert_fail@plt+0xd678>
   1ec88:	ldr	r3, [sp, #68]	; 0x44
   1ec8c:	cmp	r3, #0
   1ec90:	beq	1efa0 <__assert_fail@plt+0xda48>
   1ec94:	mov	r1, r6
   1ec98:	add	r0, sp, #84	; 0x54
   1ec9c:	str	r8, [sp, #76]	; 0x4c
   1eca0:	str	fp, [sp, #80]	; 0x50
   1eca4:	bl	16f28 <__assert_fail@plt+0x59d0>
   1eca8:	cmp	r0, #0
   1ecac:	beq	1f02c <__assert_fail@plt+0xdad4>
   1ecb0:	ldr	r3, [sp, #68]	; 0x44
   1ecb4:	ldr	r2, [sp, #40]	; 0x28
   1ecb8:	add	r1, sp, #68	; 0x44
   1ecbc:	ldr	r0, [sp, #32]
   1ecc0:	ldr	r4, [r3, r2]
   1ecc4:	bl	1cbb0 <__assert_fail@plt+0xb658>
   1ecc8:	cmp	r0, #0
   1eccc:	bne	1efcc <__assert_fail@plt+0xda74>
   1ecd0:	ldr	r1, [r9, #4]
   1ecd4:	cmp	r1, #0
   1ecd8:	beq	1ecf4 <__assert_fail@plt+0xd79c>
   1ecdc:	ldr	r3, [sp, #60]	; 0x3c
   1ece0:	ldr	r2, [sp, #68]	; 0x44
   1ece4:	mov	r0, sl
   1ece8:	bl	186bc <__assert_fail@plt+0x7164>
   1ecec:	cmp	r0, #0
   1ecf0:	bne	1efcc <__assert_fail@plt+0xda74>
   1ecf4:	ldr	r3, [sp, #68]	; 0x44
   1ecf8:	ldr	r1, [sp, #40]	; 0x28
   1ecfc:	ldr	r5, [sp, #88]	; 0x58
   1ed00:	mov	r2, r6
   1ed04:	str	r4, [r3, r1]
   1ed08:	mov	r0, r5
   1ed0c:	add	r1, sp, #92	; 0x5c
   1ed10:	bl	174b8 <__assert_fail@plt+0x5f60>
   1ed14:	sub	r2, r0, #1
   1ed18:	cmp	r5, r2
   1ed1c:	movgt	r3, #0
   1ed20:	movle	r3, #1
   1ed24:	orrs	r3, r3, r2, lsr #31
   1ed28:	beq	1eff8 <__assert_fail@plt+0xdaa0>
   1ed2c:	ldr	r3, [sp, #32]
   1ed30:	ldr	r4, [r3, #116]	; 0x74
   1ed34:	add	r4, r4, r7
   1ed38:	b	1ebd0 <__assert_fail@plt+0xd678>
   1ed3c:	ldr	r3, [sp, #24]
   1ed40:	ldr	r0, [r3, #4]
   1ed44:	b	1eb50 <__assert_fail@plt+0xd5f8>
   1ed48:	cmp	r3, #0
   1ed4c:	strne	r2, [sp, #24]
   1ed50:	bne	1eac0 <__assert_fail@plt+0xd568>
   1ed54:	str	r3, [sp, #24]
   1ed58:	b	1e8e8 <__assert_fail@plt+0xd390>
   1ed5c:	ldr	r2, [sp, #32]
   1ed60:	ldr	r2, [r2, #116]	; 0x74
   1ed64:	str	r2, [sp, #20]
   1ed68:	ble	1ee4c <__assert_fail@plt+0xd8f4>
   1ed6c:	mov	r8, r0
   1ed70:	str	fp, [sp, #16]
   1ed74:	ldr	r3, [r9, #24]
   1ed78:	ldr	r2, [sp, #20]
   1ed7c:	ldr	r0, [sp, #16]
   1ed80:	ldr	r3, [r3, r8, lsl #2]
   1ed84:	add	r3, r3, r3, lsl #1
   1ed88:	add	r2, r2, r3, lsl #3
   1ed8c:	ldr	r1, [r2, #8]
   1ed90:	cmp	r0, r1
   1ed94:	ble	1ee38 <__assert_fail@plt+0xd8e0>
   1ed98:	ldr	r1, [r2, #4]
   1ed9c:	ldr	r0, [sp, #16]
   1eda0:	cmp	r0, r1
   1eda4:	bgt	1ee38 <__assert_fail@plt+0xd8e0>
   1eda8:	ldr	r1, [sp, #20]
   1edac:	ldr	r2, [r2, #12]
   1edb0:	ldr	r7, [r4, #4]
   1edb4:	ldr	r1, [r1, r3, lsl #3]
   1edb8:	ldr	r3, [r5]
   1edbc:	cmp	r0, r2
   1edc0:	ldr	r6, [r3, r1, lsl #3]
   1edc4:	beq	1ee58 <__assert_fail@plt+0xd900>
   1edc8:	cmp	r7, #0
   1edcc:	ble	1ee38 <__assert_fail@plt+0xd8e0>
   1edd0:	mov	sl, #0
   1edd4:	b	1ede8 <__assert_fail@plt+0xd890>
   1edd8:	add	sl, sl, #1
   1eddc:	cmp	sl, r7
   1ede0:	bge	1ee38 <__assert_fail@plt+0xd8e0>
   1ede4:	ldr	r3, [r5]
   1ede8:	ldr	r2, [r4, #8]
   1edec:	ldr	r1, [r2, sl, lsl #2]
   1edf0:	add	r2, r3, r1, lsl #3
   1edf4:	ldrb	r2, [r2, #4]
   1edf8:	sub	r2, r2, #8
   1edfc:	cmp	r2, #1
   1ee00:	bhi	1edd8 <__assert_fail@plt+0xd880>
   1ee04:	ldr	r3, [r3, r1, lsl #3]
   1ee08:	cmp	r6, r3
   1ee0c:	bne	1edd8 <__assert_fail@plt+0xd880>
   1ee10:	ldr	r3, [sp, #24]
   1ee14:	mov	r2, r4
   1ee18:	mov	r0, r5
   1ee1c:	bl	18810 <__assert_fail@plt+0x72b8>
   1ee20:	cmp	r0, #0
   1ee24:	bne	1f040 <__assert_fail@plt+0xdae8>
   1ee28:	ldr	r7, [r4, #4]
   1ee2c:	add	sl, sl, #1
   1ee30:	cmp	sl, r7
   1ee34:	blt	1ede4 <__assert_fail@plt+0xd88c>
   1ee38:	ldr	r3, [r9, #20]
   1ee3c:	add	r8, r8, #1
   1ee40:	cmp	r8, r3
   1ee44:	blt	1ed74 <__assert_fail@plt+0xd81c>
   1ee48:	ldr	fp, [sp, #16]
   1ee4c:	mov	r3, #0
   1ee50:	str	r3, [sp, #64]	; 0x40
   1ee54:	b	1eac0 <__assert_fail@plt+0xd568>
   1ee58:	cmp	r7, #0
   1ee5c:	ble	1ee38 <__assert_fail@plt+0xd8e0>
   1ee60:	ldr	ip, [r4, #8]
   1ee64:	mvn	r2, #0
   1ee68:	mov	fp, r2
   1ee6c:	add	sl, ip, r7, lsl #2
   1ee70:	mov	r2, ip
   1ee74:	str	ip, [sp, #28]
   1ee78:	mov	ip, fp
   1ee7c:	b	1ee9c <__assert_fail@plt+0xd944>
   1ee80:	cmp	r0, #9
   1ee84:	bne	1ee94 <__assert_fail@plt+0xd93c>
   1ee88:	ldr	r0, [lr]
   1ee8c:	cmp	r6, r0
   1ee90:	moveq	fp, r1
   1ee94:	cmp	sl, r2
   1ee98:	beq	1eec4 <__assert_fail@plt+0xd96c>
   1ee9c:	ldr	r1, [r2], #4
   1eea0:	add	lr, r3, r1, lsl #3
   1eea4:	ldrb	r0, [lr, #4]
   1eea8:	cmp	r0, #8
   1eeac:	bne	1ee80 <__assert_fail@plt+0xd928>
   1eeb0:	ldr	r0, [r3, r1, lsl #3]
   1eeb4:	cmp	r6, r0
   1eeb8:	moveq	ip, r1
   1eebc:	cmp	sl, r2
   1eec0:	bne	1ee9c <__assert_fail@plt+0xd944>
   1eec4:	mov	r3, ip
   1eec8:	cmp	r3, #0
   1eecc:	mov	r6, fp
   1eed0:	ldr	ip, [sp, #28]
   1eed4:	blt	1f034 <__assert_fail@plt+0xdadc>
   1eed8:	mov	r1, r3
   1eedc:	mov	r2, r4
   1eee0:	ldr	r3, [sp, #24]
   1eee4:	mov	r0, r5
   1eee8:	bl	18810 <__assert_fail@plt+0x72b8>
   1eeec:	cmp	r0, #0
   1eef0:	bne	1f040 <__assert_fail@plt+0xdae8>
   1eef4:	cmp	fp, #0
   1eef8:	blt	1ee38 <__assert_fail@plt+0xd8e0>
   1eefc:	ldr	r7, [r4, #4]
   1ef00:	cmp	r7, #0
   1ef04:	ble	1ee38 <__assert_fail@plt+0xd8e0>
   1ef08:	ldr	ip, [r4, #8]
   1ef0c:	mov	sl, #0
   1ef10:	str	r8, [sp, #28]
   1ef14:	mov	fp, r6
   1ef18:	b	1ef2c <__assert_fail@plt+0xd9d4>
   1ef1c:	add	sl, sl, #1
   1ef20:	cmp	sl, r7
   1ef24:	bge	1f010 <__assert_fail@plt+0xdab8>
   1ef28:	ldr	ip, [r4, #8]
   1ef2c:	ldr	r8, [ip, sl, lsl #2]
   1ef30:	ldr	r0, [r5, #28]
   1ef34:	mov	r2, fp
   1ef38:	add	r6, r8, r8, lsl #1
   1ef3c:	lsl	r6, r6, #2
   1ef40:	add	r0, r0, r6
   1ef44:	add	r1, r0, #8
   1ef48:	ldr	r0, [r0, #4]
   1ef4c:	bl	174b8 <__assert_fail@plt+0x5f60>
   1ef50:	mov	r2, fp
   1ef54:	cmp	r0, #0
   1ef58:	bne	1ef1c <__assert_fail@plt+0xd9c4>
   1ef5c:	ldr	r1, [r5, #24]
   1ef60:	add	r6, r1, r6
   1ef64:	add	r1, r6, #8
   1ef68:	ldr	r0, [r6, #4]
   1ef6c:	bl	174b8 <__assert_fail@plt+0x5f60>
   1ef70:	cmp	r0, #0
   1ef74:	bne	1ef1c <__assert_fail@plt+0xd9c4>
   1ef78:	mov	r1, r8
   1ef7c:	ldr	r3, [sp, #24]
   1ef80:	mov	r2, r4
   1ef84:	mov	r0, r5
   1ef88:	bl	18810 <__assert_fail@plt+0x72b8>
   1ef8c:	sub	sl, sl, #1
   1ef90:	cmp	r0, #0
   1ef94:	bne	1f040 <__assert_fail@plt+0xdae8>
   1ef98:	ldr	r7, [r4, #4]
   1ef9c:	b	1ef1c <__assert_fail@plt+0xd9c4>
   1efa0:	mov	ip, r9
   1efa4:	add	lr, sp, #68	; 0x44
   1efa8:	ldm	ip!, {r0, r1, r2, r3}
   1efac:	stmia	lr!, {r0, r1, r2, r3}
   1efb0:	ldm	ip, {r0, r1, r2}
   1efb4:	stm	lr, {r0, r1, r2}
   1efb8:	mov	r1, ip
   1efbc:	add	r0, sp, #84	; 0x54
   1efc0:	bl	17fc4 <__assert_fail@plt+0x6a6c>
   1efc4:	cmp	r0, #0
   1efc8:	beq	1ec94 <__assert_fail@plt+0xd73c>
   1efcc:	mov	r3, r0
   1efd0:	ldr	r2, [sp, #68]	; 0x44
   1efd4:	cmp	r2, #0
   1efd8:	beq	1e918 <__assert_fail@plt+0xd3c0>
   1efdc:	ldr	r0, [sp, #92]	; 0x5c
   1efe0:	str	r3, [sp, #16]
   1efe4:	bl	13908 <__assert_fail@plt+0x23b0>
   1efe8:	ldr	r3, [sp, #16]
   1efec:	mov	r0, r3
   1eff0:	add	sp, sp, #100	; 0x64
   1eff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eff8:	add	r0, sp, #96	; 0x60
   1effc:	sub	r5, r5, #1
   1f000:	str	r5, [r0, #-8]!
   1f004:	add	r1, sp, #92	; 0x5c
   1f008:	bl	17648 <__assert_fail@plt+0x60f0>
   1f00c:	b	1ed2c <__assert_fail@plt+0xd7d4>
   1f010:	ldr	r8, [sp, #28]
   1f014:	b	1ee38 <__assert_fail@plt+0xd8e0>
   1f018:	ldr	r3, [sp, #68]	; 0x44
   1f01c:	cmp	r3, #0
   1f020:	movne	r3, #0
   1f024:	bne	1efdc <__assert_fail@plt+0xda84>
   1f028:	b	1ea84 <__assert_fail@plt+0xd52c>
   1f02c:	mov	r3, #12
   1f030:	b	1efd0 <__assert_fail@plt+0xda78>
   1f034:	cmp	fp, #0
   1f038:	bge	1ef0c <__assert_fail@plt+0xd9b4>
   1f03c:	b	1ee38 <__assert_fail@plt+0xd8e0>
   1f040:	mov	r3, r0
   1f044:	b	1e918 <__assert_fail@plt+0xd3c0>
   1f048:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f04c:	sub	sp, sp, #8
   1f050:	ldr	r6, [r1, #40]	; 0x28
   1f054:	ldr	r3, [r1, #56]	; 0x38
   1f058:	cmp	r3, r6
   1f05c:	ble	1f2d0 <__assert_fail@plt+0xdd78>
   1f060:	ldr	sl, [r1, #4]
   1f064:	ldrb	r3, [r0, #6]
   1f068:	mov	r8, r2
   1f06c:	ldrb	r7, [sl, r6]
   1f070:	and	r3, r3, #159	; 0x9f
   1f074:	strb	r3, [r0, #6]
   1f078:	strb	r7, [r0]
   1f07c:	ldr	r3, [r1, #80]	; 0x50
   1f080:	mov	r5, r0
   1f084:	cmp	r3, #1
   1f088:	mov	r4, r1
   1f08c:	ble	1f2e4 <__assert_fail@plt+0xdd8c>
   1f090:	ldr	r2, [r1, #28]
   1f094:	cmp	r6, r2
   1f098:	beq	1f0ac <__assert_fail@plt+0xdb54>
   1f09c:	ldr	r2, [r1, #8]
   1f0a0:	ldr	r2, [r2, r6, lsl #2]
   1f0a4:	cmn	r2, #1
   1f0a8:	beq	1f544 <__assert_fail@plt+0xdfec>
   1f0ac:	cmp	r7, #92	; 0x5c
   1f0b0:	beq	1f34c <__assert_fail@plt+0xddf4>
   1f0b4:	ldr	r3, [r4, #8]
   1f0b8:	mov	r2, #1
   1f0bc:	strb	r2, [r5, #4]
   1f0c0:	ldr	r9, [r3, r6, lsl #2]
   1f0c4:	mov	r0, r9
   1f0c8:	bl	11438 <iswalnum@plt>
   1f0cc:	ldrb	r3, [r5, #6]
   1f0d0:	sub	r9, r9, #95	; 0x5f
   1f0d4:	clz	r9, r9
   1f0d8:	lsr	r9, r9, #5
   1f0dc:	bic	r3, r3, #64	; 0x40
   1f0e0:	cmp	r0, #0
   1f0e4:	orrne	r9, r9, #1
   1f0e8:	orr	r9, r3, r9, lsl #6
   1f0ec:	strb	r9, [r5, #6]
   1f0f0:	sub	r7, r7, #10
   1f0f4:	cmp	r7, #115	; 0x73
   1f0f8:	ldrls	pc, [pc, r7, lsl #2]
   1f0fc:	b	1f340 <__assert_fail@plt+0xdde8>
   1f100:	andeq	pc, r1, r8, lsl #11
   1f104:	andeq	pc, r1, r0, asr #6
   1f108:	andeq	pc, r1, r0, asr #6
   1f10c:	andeq	pc, r1, r0, asr #6
   1f110:	andeq	pc, r1, r0, asr #6
   1f114:	andeq	pc, r1, r0, asr #6
   1f118:	andeq	pc, r1, r0, asr #6
   1f11c:	andeq	pc, r1, r0, asr #6
   1f120:	andeq	pc, r1, r0, asr #6
   1f124:	andeq	pc, r1, r0, asr #6
   1f128:	andeq	pc, r1, r0, asr #6
   1f12c:	andeq	pc, r1, r0, asr #6
   1f130:	andeq	pc, r1, r0, asr #6
   1f134:	andeq	pc, r1, r0, asr #6
   1f138:	andeq	pc, r1, r0, asr #6
   1f13c:	andeq	pc, r1, r0, asr #6
   1f140:	andeq	pc, r1, r0, asr #6
   1f144:	andeq	pc, r1, r0, asr #6
   1f148:	andeq	pc, r1, r0, asr #6
   1f14c:	andeq	pc, r1, r0, asr #6
   1f150:	andeq	pc, r1, r0, asr #6
   1f154:	andeq	pc, r1, r0, asr #6
   1f158:	andeq	pc, r1, r0, asr #6
   1f15c:	andeq	pc, r1, r0, asr #6
   1f160:	andeq	pc, r1, r0, asr #6
   1f164:	andeq	pc, r1, r0, asr #6
   1f168:	andeq	pc, r1, r0, lsr #11
   1f16c:	andeq	pc, r1, r0, asr #6
   1f170:	andeq	pc, r1, r0, asr #6
   1f174:	andeq	pc, r1, r0, asr #6
   1f178:	andeq	pc, r1, r0, lsl #12
   1f17c:	andeq	pc, r1, r8, lsl r6	; <UNPREDICTABLE>
   1f180:	andeq	pc, r1, r0, lsr r6	; <UNPREDICTABLE>
   1f184:	andeq	pc, r1, r0, asr #12
   1f188:	andeq	pc, r1, r0, asr #6
   1f18c:	andeq	pc, r1, r0, asr #6
   1f190:	andeq	pc, r1, r0, ror #12
   1f194:	andeq	pc, r1, r0, asr #6
   1f198:	andeq	pc, r1, r0, asr #6
   1f19c:	andeq	pc, r1, r0, asr #6
   1f1a0:	andeq	pc, r1, r0, asr #6
   1f1a4:	andeq	pc, r1, r0, asr #6
   1f1a8:	andeq	pc, r1, r0, asr #6
   1f1ac:	andeq	pc, r1, r0, asr #6
   1f1b0:	andeq	pc, r1, r0, asr #6
   1f1b4:	andeq	pc, r1, r0, asr #6
   1f1b8:	andeq	pc, r1, r0, asr #6
   1f1bc:	andeq	pc, r1, r0, asr #6
   1f1c0:	andeq	pc, r1, r0, asr #6
   1f1c4:	andeq	pc, r1, r0, asr #6
   1f1c8:	andeq	pc, r1, r0, asr #6
   1f1cc:	andeq	pc, r1, r0, asr #6
   1f1d0:	andeq	pc, r1, r0, asr #6
   1f1d4:	andeq	pc, r1, r0, ror r6	; <UNPREDICTABLE>
   1f1d8:	andeq	pc, r1, r0, asr #6
   1f1dc:	andeq	pc, r1, r0, asr #6
   1f1e0:	andeq	pc, r1, r0, asr #6
   1f1e4:	andeq	pc, r1, r0, asr #6
   1f1e8:	andeq	pc, r1, r0, asr #6
   1f1ec:	andeq	pc, r1, r0, asr #6
   1f1f0:	andeq	pc, r1, r0, asr #6
   1f1f4:	andeq	pc, r1, r0, asr #6
   1f1f8:	andeq	pc, r1, r0, asr #6
   1f1fc:	andeq	pc, r1, r0, asr #6
   1f200:	andeq	pc, r1, r0, asr #6
   1f204:	andeq	pc, r1, r0, asr #6
   1f208:	andeq	pc, r1, r0, asr #6
   1f20c:	andeq	pc, r1, r0, asr #6
   1f210:	andeq	pc, r1, r0, asr #6
   1f214:	andeq	pc, r1, r0, asr #6
   1f218:	andeq	pc, r1, r0, asr #6
   1f21c:	andeq	pc, r1, r0, asr #6
   1f220:	andeq	pc, r1, r0, asr #6
   1f224:	andeq	pc, r1, r0, asr #6
   1f228:	andeq	pc, r1, r0, asr #6
   1f22c:	andeq	pc, r1, r0, asr #6
   1f230:	andeq	pc, r1, r0, asr #6
   1f234:	andeq	pc, r1, r0, asr #6
   1f238:	andeq	pc, r1, r0, asr #6
   1f23c:	andeq	pc, r1, r0, asr #6
   1f240:	andeq	pc, r1, r0, asr #6
   1f244:	muleq	r1, r0, r6
   1f248:	andeq	pc, r1, r0, asr #6
   1f24c:	andeq	pc, r1, r0, asr #6
   1f250:	andeq	pc, r1, r0, lsr #13
   1f254:	andeq	pc, r1, r0, asr #6
   1f258:	andeq	pc, r1, r0, asr #6
   1f25c:	andeq	pc, r1, r0, asr #6
   1f260:	andeq	pc, r1, r0, asr #6
   1f264:	andeq	pc, r1, r0, asr #6
   1f268:	andeq	pc, r1, r0, asr #6
   1f26c:	andeq	pc, r1, r0, asr #6
   1f270:	andeq	pc, r1, r0, asr #6
   1f274:	andeq	pc, r1, r0, asr #6
   1f278:	andeq	pc, r1, r0, asr #6
   1f27c:	andeq	pc, r1, r0, asr #6
   1f280:	andeq	pc, r1, r0, asr #6
   1f284:	andeq	pc, r1, r0, asr #6
   1f288:	andeq	pc, r1, r0, asr #6
   1f28c:	andeq	pc, r1, r0, asr #6
   1f290:	andeq	pc, r1, r0, asr #6
   1f294:	andeq	pc, r1, r0, asr #6
   1f298:	andeq	pc, r1, r0, asr #6
   1f29c:	andeq	pc, r1, r0, asr #6
   1f2a0:	andeq	pc, r1, r0, asr #6
   1f2a4:	andeq	pc, r1, r0, asr #6
   1f2a8:	andeq	pc, r1, r0, asr #6
   1f2ac:	andeq	pc, r1, r0, asr #6
   1f2b0:	andeq	pc, r1, r0, asr #6
   1f2b4:	andeq	pc, r1, r0, asr #6
   1f2b8:	andeq	pc, r1, r0, asr #6
   1f2bc:	andeq	pc, r1, r0, asr #6
   1f2c0:	andeq	pc, r1, r0, asr #6
   1f2c4:	andeq	pc, r1, r8, lsr #6
   1f2c8:	strdeq	pc, [r1], -r8
   1f2cc:	andeq	pc, r1, ip, ror #10
   1f2d0:	mov	r3, #2
   1f2d4:	strb	r3, [r0, #4]
   1f2d8:	mov	r0, #0
   1f2dc:	add	sp, sp, #8
   1f2e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f2e4:	cmp	r7, #92	; 0x5c
   1f2e8:	beq	1f34c <__assert_fail@plt+0xddf4>
   1f2ec:	mov	r3, #1
   1f2f0:	strb	r3, [r5, #4]
   1f2f4:	bl	113fc <__ctype_b_loc@plt>
   1f2f8:	lsl	r1, r7, #1
   1f2fc:	ldrb	r2, [r5, #6]
   1f300:	bic	r2, r2, #64	; 0x40
   1f304:	ldr	r3, [r0]
   1f308:	ldrh	r3, [r3, r1]
   1f30c:	lsr	r3, r3, #3
   1f310:	and	r3, r3, #1
   1f314:	cmp	r7, #95	; 0x5f
   1f318:	orreq	r3, r3, #1
   1f31c:	orr	r3, r2, r3, lsl #6
   1f320:	strb	r3, [r5, #6]
   1f324:	b	1f0f0 <__assert_fail@plt+0xdb98>
   1f328:	and	r8, r8, #4608	; 0x1200
   1f32c:	cmp	r8, #4608	; 0x1200
   1f330:	moveq	r3, #23
   1f334:	strbeq	r3, [r5, #4]
   1f338:	moveq	r0, #1
   1f33c:	beq	1f2dc <__assert_fail@plt+0xdd84>
   1f340:	mov	r0, #1
   1f344:	add	sp, sp, #8
   1f348:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f34c:	ldr	r1, [r4, #48]	; 0x30
   1f350:	add	r2, r6, #1
   1f354:	cmp	r2, r1
   1f358:	bge	1f55c <__assert_fail@plt+0xe004>
   1f35c:	ldrb	r1, [r4, #75]	; 0x4b
   1f360:	cmp	r1, #0
   1f364:	bne	1f918 <__assert_fail@plt+0xe3c0>
   1f368:	ldrb	r6, [sl, r2]
   1f36c:	cmp	r3, #1
   1f370:	mov	r3, #1
   1f374:	strb	r6, [r5]
   1f378:	strb	r3, [r5, #4]
   1f37c:	ble	1f8e4 <__assert_fail@plt+0xe38c>
   1f380:	ldr	r1, [r4, #8]
   1f384:	add	r1, r1, r2, lsl #2
   1f388:	ldr	r4, [r1]
   1f38c:	mov	r0, r4
   1f390:	bl	11438 <iswalnum@plt>
   1f394:	ldrb	r3, [r5, #6]
   1f398:	sub	r4, r4, #95	; 0x5f
   1f39c:	clz	r4, r4
   1f3a0:	lsr	r4, r4, #5
   1f3a4:	bic	r3, r3, #64	; 0x40
   1f3a8:	cmp	r0, #0
   1f3ac:	orrne	r4, r4, #1
   1f3b0:	orr	r4, r3, r4, lsl #6
   1f3b4:	strb	r4, [r5, #6]
   1f3b8:	sub	r3, r6, #39	; 0x27
   1f3bc:	cmp	r3, #86	; 0x56
   1f3c0:	ldrls	pc, [pc, r3, lsl #2]
   1f3c4:	b	1f53c <__assert_fail@plt+0xdfe4>
   1f3c8:	andeq	pc, r1, r0, lsr #14
   1f3cc:	andeq	pc, r1, r8, lsl #14
   1f3d0:	andeq	pc, r1, ip, asr #17
   1f3d4:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f3d8:			; <UNDEFINED> instruction: 0x0001f8b0
   1f3dc:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f3e0:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f3e4:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f3e8:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f3ec:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f3f0:	muleq	r1, r0, r8
   1f3f4:	muleq	r1, r0, r8
   1f3f8:	muleq	r1, r0, r8
   1f3fc:	muleq	r1, r0, r8
   1f400:	muleq	r1, r0, r8
   1f404:	muleq	r1, r0, r8
   1f408:	muleq	r1, r0, r8
   1f40c:	muleq	r1, r0, r8
   1f410:	muleq	r1, r0, r8
   1f414:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f418:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f41c:	andeq	pc, r1, r0, ror r8	; <UNPREDICTABLE>
   1f420:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f424:	andeq	pc, r1, r0, asr r8	; <UNPREDICTABLE>
   1f428:	andeq	pc, r1, r4, lsr r8	; <UNPREDICTABLE>
   1f42c:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f430:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f434:	andeq	pc, r1, r4, lsl r8	; <UNPREDICTABLE>
   1f438:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f43c:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f440:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f444:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f448:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f44c:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f450:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f454:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f458:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f45c:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f460:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f464:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f468:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f46c:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f470:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f474:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f478:	strdeq	pc, [r1], -ip
   1f47c:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f480:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f484:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f488:	andeq	pc, r1, r4, ror #15
   1f48c:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f490:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f494:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f498:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f49c:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4a0:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4a4:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4a8:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4ac:	andeq	pc, r1, r4, asr #15
   1f4b0:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4b4:	andeq	pc, r1, r4, lsr #15
   1f4b8:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4bc:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4c0:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4c4:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4c8:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4cc:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4d0:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4d4:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4d8:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4dc:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4e0:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4e4:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4e8:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4ec:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4f0:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4f4:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f4f8:	andeq	pc, r1, ip, lsl #15
   1f4fc:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f500:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f504:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f508:	andeq	pc, r1, r4, ror r7	; <UNPREDICTABLE>
   1f50c:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f510:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f514:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   1f518:	andeq	pc, r1, r4, lsr #10
   1f51c:	andeq	pc, r1, ip, asr r7	; <UNPREDICTABLE>
   1f520:	andeq	pc, r1, r0, asr #14
   1f524:	and	r8, r8, #4608	; 0x1200
   1f528:	cmp	r8, #512	; 0x200
   1f52c:	moveq	r3, #23
   1f530:	strbeq	r3, [r5, #4]
   1f534:	moveq	r0, #2
   1f538:	beq	1f2dc <__assert_fail@plt+0xdd84>
   1f53c:	mov	r0, #2
   1f540:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f544:	ldrb	r3, [r0, #6]
   1f548:	mov	r0, #1
   1f54c:	strb	r0, [r5, #4]
   1f550:	orr	r3, r3, #32
   1f554:	strb	r3, [r5, #6]
   1f558:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f55c:	mov	r3, #36	; 0x24
   1f560:	strb	r3, [r5, #4]
   1f564:	mov	r0, #1
   1f568:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f56c:	and	r8, r8, #4608	; 0x1200
   1f570:	cmp	r8, #4608	; 0x1200
   1f574:	moveq	r3, #24
   1f578:	strbeq	r3, [r5, #4]
   1f57c:	moveq	r0, #1
   1f580:	bne	1f340 <__assert_fail@plt+0xdde8>
   1f584:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f588:	tst	r8, #2048	; 0x800
   1f58c:	beq	1f340 <__assert_fail@plt+0xdde8>
   1f590:	mov	r3, #10
   1f594:	strb	r3, [r5, #4]
   1f598:	mov	r0, #1
   1f59c:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f5a0:	tst	r8, #8
   1f5a4:	bne	1f5e8 <__assert_fail@plt+0xe090>
   1f5a8:	ldr	r3, [r4, #48]	; 0x30
   1f5ac:	add	r6, r6, #1
   1f5b0:	cmp	r6, r3
   1f5b4:	beq	1f5e8 <__assert_fail@plt+0xe090>
   1f5b8:	mov	r2, r8
   1f5bc:	str	r6, [r4, #40]	; 0x28
   1f5c0:	mov	r1, r4
   1f5c4:	mov	r0, sp
   1f5c8:	bl	1f048 <__assert_fail@plt+0xdaf0>
   1f5cc:	ldrb	r2, [sp, #4]
   1f5d0:	ldr	r3, [r4, #40]	; 0x28
   1f5d4:	sub	r2, r2, #9
   1f5d8:	sub	r3, r3, #1
   1f5dc:	cmp	r2, #1
   1f5e0:	str	r3, [r4, #40]	; 0x28
   1f5e4:	bhi	1f340 <__assert_fail@plt+0xdde8>
   1f5e8:	mov	r2, #12
   1f5ec:	mov	r3, #32
   1f5f0:	strb	r2, [r5, #4]
   1f5f4:	str	r3, [r5]
   1f5f8:	mov	r0, #1
   1f5fc:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f600:	tst	r8, #8192	; 0x2000
   1f604:	beq	1f340 <__assert_fail@plt+0xdde8>
   1f608:	mov	r3, #8
   1f60c:	strb	r3, [r5, #4]
   1f610:	mov	r0, #1
   1f614:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f618:	tst	r8, #8192	; 0x2000
   1f61c:	beq	1f340 <__assert_fail@plt+0xdde8>
   1f620:	mov	r3, #9
   1f624:	strb	r3, [r5, #4]
   1f628:	mov	r0, #1
   1f62c:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f630:	mov	r3, #11
   1f634:	strb	r3, [r5, #4]
   1f638:	mov	r0, #1
   1f63c:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f640:	ldr	r3, [pc, #864]	; 1f9a8 <__assert_fail@plt+0xe450>
   1f644:	and	r3, r3, r8
   1f648:	cmp	r3, #0
   1f64c:	bne	1f340 <__assert_fail@plt+0xdde8>
   1f650:	mov	r3, #18
   1f654:	strb	r3, [r5, #4]
   1f658:	mov	r0, #1
   1f65c:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f660:	mov	r3, #5
   1f664:	strb	r3, [r5, #4]
   1f668:	mov	r0, #1
   1f66c:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f670:	ldr	r3, [pc, #816]	; 1f9a8 <__assert_fail@plt+0xe450>
   1f674:	and	r3, r3, r8
   1f678:	cmp	r3, #0
   1f67c:	bne	1f340 <__assert_fail@plt+0xdde8>
   1f680:	mov	r3, #19
   1f684:	strb	r3, [r5, #4]
   1f688:	mov	r0, #1
   1f68c:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f690:	mov	r3, #20
   1f694:	strb	r3, [r5, #4]
   1f698:	mov	r0, #1
   1f69c:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f6a0:	ldr	r3, [pc, #772]	; 1f9ac <__assert_fail@plt+0xe454>
   1f6a4:	cmp	r6, #0
   1f6a8:	and	r3, r3, r8
   1f6ac:	clz	r3, r3
   1f6b0:	lsr	r3, r3, #5
   1f6b4:	moveq	r3, #0
   1f6b8:	cmp	r3, #0
   1f6bc:	beq	1f6e0 <__assert_fail@plt+0xe188>
   1f6c0:	add	r6, sl, r6
   1f6c4:	lsr	r3, r8, #11
   1f6c8:	ldrb	r2, [r6, #-1]
   1f6cc:	eor	r3, r3, #1
   1f6d0:	cmp	r2, #10
   1f6d4:	orrne	r3, r3, #1
   1f6d8:	tst	r3, #1
   1f6dc:	bne	1f340 <__assert_fail@plt+0xdde8>
   1f6e0:	mov	r2, #12
   1f6e4:	mov	r3, #16
   1f6e8:	strb	r2, [r5, #4]
   1f6ec:	str	r3, [r5]
   1f6f0:	mov	r0, #1
   1f6f4:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f6f8:	and	r8, r8, #33792	; 0x8400
   1f6fc:	cmp	r8, #32768	; 0x8000
   1f700:	bne	1f340 <__assert_fail@plt+0xdde8>
   1f704:	b	1f590 <__assert_fail@plt+0xe038>
   1f708:	tst	r8, #8192	; 0x2000
   1f70c:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f710:	mov	r3, #8
   1f714:	strb	r3, [r5, #4]
   1f718:	mov	r0, #2
   1f71c:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f720:	tst	r8, #524288	; 0x80000
   1f724:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f728:	mov	r2, #12
   1f72c:	mov	r3, #128	; 0x80
   1f730:	strb	r2, [r5, #4]
   1f734:	str	r3, [r5]
   1f738:	mov	r0, #2
   1f73c:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f740:	and	r8, r8, #4608	; 0x1200
   1f744:	cmp	r8, #512	; 0x200
   1f748:	moveq	r3, #24
   1f74c:	strbeq	r3, [r5, #4]
   1f750:	moveq	r0, #2
   1f754:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f758:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f75c:	tst	r8, #33792	; 0x8400
   1f760:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f764:	mov	r3, #10
   1f768:	strb	r3, [r5, #4]
   1f76c:	mov	r0, #2
   1f770:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f774:	tst	r8, #524288	; 0x80000
   1f778:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f77c:	mov	r3, #32
   1f780:	strb	r3, [r5, #4]
   1f784:	mov	r0, #2
   1f788:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f78c:	tst	r8, #524288	; 0x80000
   1f790:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f794:	mov	r3, #34	; 0x22
   1f798:	strb	r3, [r5, #4]
   1f79c:	mov	r0, #2
   1f7a0:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f7a4:	tst	r8, #524288	; 0x80000
   1f7a8:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f7ac:	mov	r2, #12
   1f7b0:	mov	r3, #256	; 0x100
   1f7b4:	strb	r2, [r5, #4]
   1f7b8:	str	r3, [r5]
   1f7bc:	mov	r0, #2
   1f7c0:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f7c4:	tst	r8, #524288	; 0x80000
   1f7c8:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f7cc:	mov	r2, #12
   1f7d0:	mov	r3, #64	; 0x40
   1f7d4:	strb	r2, [r5, #4]
   1f7d8:	str	r3, [r5]
   1f7dc:	mov	r0, #2
   1f7e0:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f7e4:	tst	r8, #524288	; 0x80000
   1f7e8:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f7ec:	mov	r3, #33	; 0x21
   1f7f0:	strb	r3, [r5, #4]
   1f7f4:	mov	r0, #2
   1f7f8:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f7fc:	tst	r8, #524288	; 0x80000
   1f800:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f804:	mov	r3, #35	; 0x23
   1f808:	strb	r3, [r5, #4]
   1f80c:	mov	r0, #2
   1f810:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f814:	tst	r8, #524288	; 0x80000
   1f818:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f81c:	mov	r2, #12
   1f820:	mov	r3, #512	; 0x200
   1f824:	strb	r2, [r5, #4]
   1f828:	str	r3, [r5]
   1f82c:	mov	r0, #2
   1f830:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f834:	ldr	r0, [pc, #364]	; 1f9a8 <__assert_fail@plt+0xe450>
   1f838:	and	r0, r0, r8
   1f83c:	cmp	r0, #2
   1f840:	moveq	r3, #19
   1f844:	strbeq	r3, [r5, #4]
   1f848:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f84c:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f850:	tst	r8, #524288	; 0x80000
   1f854:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f858:	mov	r2, #12
   1f85c:	mov	r3, #9
   1f860:	strb	r2, [r5, #4]
   1f864:	str	r3, [r5]
   1f868:	mov	r0, #2
   1f86c:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f870:	tst	r8, #524288	; 0x80000
   1f874:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f878:	mov	r2, #12
   1f87c:	mov	r3, #6
   1f880:	strb	r2, [r5, #4]
   1f884:	str	r3, [r5]
   1f888:	mov	r0, #2
   1f88c:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f890:	tst	r8, #16384	; 0x4000
   1f894:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f898:	sub	r6, r6, #49	; 0x31
   1f89c:	mov	r3, #4
   1f8a0:	str	r6, [r5]
   1f8a4:	strb	r3, [r5, #4]
   1f8a8:	mov	r0, #2
   1f8ac:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f8b0:	ldr	r0, [pc, #240]	; 1f9a8 <__assert_fail@plt+0xe450>
   1f8b4:	and	r0, r0, r8
   1f8b8:	cmp	r0, #2
   1f8bc:	moveq	r3, #18
   1f8c0:	strbeq	r3, [r5, #4]
   1f8c4:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f8c8:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f8cc:	tst	r8, #8192	; 0x2000
   1f8d0:	bne	1f53c <__assert_fail@plt+0xdfe4>
   1f8d4:	mov	r3, #9
   1f8d8:	strb	r3, [r5, #4]
   1f8dc:	mov	r0, #2
   1f8e0:	b	1f2dc <__assert_fail@plt+0xdd84>
   1f8e4:	bl	113fc <__ctype_b_loc@plt>
   1f8e8:	lsl	r3, r6, #1
   1f8ec:	ldrb	r2, [r5, #6]
   1f8f0:	bic	r2, r2, #64	; 0x40
   1f8f4:	ldr	r1, [r0]
   1f8f8:	ldrh	r3, [r1, r3]
   1f8fc:	lsr	r3, r3, #3
   1f900:	and	r3, r3, #1
   1f904:	cmp	r6, #95	; 0x5f
   1f908:	orreq	r3, r3, #1
   1f90c:	orr	r3, r2, r3, lsl #6
   1f910:	strb	r3, [r5, #6]
   1f914:	b	1f3b8 <__assert_fail@plt+0xde60>
   1f918:	cmp	r3, #1
   1f91c:	ble	1f950 <__assert_fail@plt+0xe3f8>
   1f920:	ldr	r0, [r4, #8]
   1f924:	add	r1, r0, r2, lsl #2
   1f928:	ldr	r0, [r0, r2, lsl #2]
   1f92c:	cmn	r0, #1
   1f930:	beq	1f994 <__assert_fail@plt+0xe43c>
   1f934:	ldr	r0, [r4, #28]
   1f938:	add	r6, r6, #2
   1f93c:	cmp	r0, r6
   1f940:	beq	1f950 <__assert_fail@plt+0xe3f8>
   1f944:	ldr	r0, [r1, #4]
   1f948:	cmn	r0, #1
   1f94c:	beq	1f994 <__assert_fail@plt+0xe43c>
   1f950:	ldrb	r1, [r4, #76]	; 0x4c
   1f954:	cmp	r1, #0
   1f958:	bne	1f970 <__assert_fail@plt+0xe418>
   1f95c:	ldr	r1, [r4]
   1f960:	ldr	r0, [r4, #24]
   1f964:	add	r1, r1, r2
   1f968:	ldrb	r6, [r1, r0]
   1f96c:	b	1f36c <__assert_fail@plt+0xde14>
   1f970:	ldr	ip, [r4, #12]
   1f974:	ldr	r1, [r4]
   1f978:	ldr	r0, [r4, #24]
   1f97c:	ldr	ip, [ip, r2, lsl #2]
   1f980:	add	r1, r1, ip
   1f984:	ldrb	r6, [r1, r0]
   1f988:	tst	r6, #128	; 0x80
   1f98c:	bne	1f368 <__assert_fail@plt+0xde10>
   1f990:	b	1f36c <__assert_fail@plt+0xde14>
   1f994:	ldrb	r6, [sl, r2]
   1f998:	mov	r3, #1
   1f99c:	strb	r3, [r5, #4]
   1f9a0:	strb	r6, [r5]
   1f9a4:	b	1f388 <__assert_fail@plt+0xde30>
   1f9a8:	andeq	r0, r0, r2, lsl #8
   1f9ac:	addeq	r0, r0, r8
   1f9b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f9b4:	mov	sl, r0
   1f9b8:	ldr	r8, [pc, #172]	; 1fa6c <__assert_fail@plt+0xe514>
   1f9bc:	mov	r4, r1
   1f9c0:	mov	r6, r2
   1f9c4:	mvn	r5, #0
   1f9c8:	mov	r9, #32768	; 0x8000
   1f9cc:	mvn	r7, #1
   1f9d0:	mov	r2, r6
   1f9d4:	mov	r1, sl
   1f9d8:	mov	r0, r4
   1f9dc:	bl	1f048 <__assert_fail@plt+0xdaf0>
   1f9e0:	ldrb	r2, [r4, #4]
   1f9e4:	ldr	r3, [sl, #40]	; 0x28
   1f9e8:	cmp	r2, #2
   1f9ec:	add	r0, r3, r0
   1f9f0:	str	r0, [sl, #40]	; 0x28
   1f9f4:	ldrb	r3, [r4]
   1f9f8:	beq	1fa60 <__assert_fail@plt+0xe508>
   1f9fc:	cmp	r3, #44	; 0x2c
   1fa00:	cmpne	r2, #24
   1fa04:	beq	1fa64 <__assert_fail@plt+0xe50c>
   1fa08:	cmp	r2, #1
   1fa0c:	beq	1fa18 <__assert_fail@plt+0xe4c0>
   1fa10:	mov	r5, r7
   1fa14:	b	1f9d0 <__assert_fail@plt+0xe478>
   1fa18:	sub	r1, r3, #48	; 0x30
   1fa1c:	uxtb	r2, r1
   1fa20:	cmp	r2, #9
   1fa24:	movhi	r2, #0
   1fa28:	movls	r2, #1
   1fa2c:	cmn	r5, #2
   1fa30:	moveq	r2, #0
   1fa34:	cmp	r2, #0
   1fa38:	beq	1fa10 <__assert_fail@plt+0xe4b8>
   1fa3c:	cmn	r5, #1
   1fa40:	moveq	r5, r1
   1fa44:	beq	1f9d0 <__assert_fail@plt+0xe478>
   1fa48:	add	r5, r5, r5, lsl #2
   1fa4c:	add	r3, r3, r5, lsl #1
   1fa50:	cmp	r3, r8
   1fa54:	suble	r5, r3, #48	; 0x30
   1fa58:	movgt	r5, r9
   1fa5c:	b	1f9d0 <__assert_fail@plt+0xe478>
   1fa60:	mvn	r5, #1
   1fa64:	mov	r0, r5
   1fa68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fa6c:	andeq	r8, r0, r0, lsr r0
   1fa70:	ldr	ip, [r1, #80]	; 0x50
   1fa74:	push	{r4, r5, r6, r7, r8, r9, lr}
   1fa78:	sub	sp, sp, #12
   1fa7c:	cmp	ip, #1
   1fa80:	ldr	r4, [r1, #40]	; 0x28
   1fa84:	ldrb	r7, [sp, #44]	; 0x2c
   1fa88:	beq	1fafc <__assert_fail@plt+0xe5a4>
   1fa8c:	ldr	lr, [r1, #28]
   1fa90:	add	ip, r4, #1
   1fa94:	cmp	ip, lr
   1fa98:	bge	1fafc <__assert_fail@plt+0xe5a4>
   1fa9c:	ldr	r5, [r1, #8]
   1faa0:	add	r6, r5, ip, lsl #2
   1faa4:	ldr	ip, [r5, ip, lsl #2]
   1faa8:	cmn	ip, #1
   1faac:	subeq	lr, lr, r4
   1fab0:	moveq	r2, r6
   1fab4:	moveq	r3, #1
   1fab8:	beq	1facc <__assert_fail@plt+0xe574>
   1fabc:	b	1fafc <__assert_fail@plt+0xe5a4>
   1fac0:	ldr	ip, [r2, #4]!
   1fac4:	cmn	ip, #1
   1fac8:	bne	1fadc <__assert_fail@plt+0xe584>
   1facc:	add	r3, r3, #1
   1fad0:	cmp	r3, lr
   1fad4:	add	r5, r3, r4
   1fad8:	bne	1fac0 <__assert_fail@plt+0xe568>
   1fadc:	ldr	ip, [r6, #-4]
   1fae0:	mov	r2, #1
   1fae4:	mov	r3, #0
   1fae8:	stm	r0, {r2, ip}
   1faec:	str	r5, [r1, #40]	; 0x28
   1faf0:	mov	r0, r3
   1faf4:	add	sp, sp, #12
   1faf8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1fafc:	ldrb	ip, [r2, #4]
   1fb00:	add	r4, r4, r3
   1fb04:	str	r4, [r1, #40]	; 0x28
   1fb08:	and	r3, ip, #251	; 0xfb
   1fb0c:	cmp	ip, #28
   1fb10:	cmpne	r3, #26
   1fb14:	beq	1fb50 <__assert_fail@plt+0xe5f8>
   1fb18:	cmp	ip, #22
   1fb1c:	moveq	ip, r7
   1fb20:	orrne	ip, r7, #1
   1fb24:	cmp	ip, #0
   1fb28:	mov	r5, r2
   1fb2c:	mov	r4, r0
   1fb30:	beq	1fb64 <__assert_fail@plt+0xe60c>
   1fb34:	mov	r3, #0
   1fb38:	str	r3, [r4]
   1fb3c:	ldrb	r2, [r5]
   1fb40:	mov	r0, r3
   1fb44:	strb	r2, [r4, #4]
   1fb48:	add	sp, sp, #12
   1fb4c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1fb50:	ldr	r5, [r1, #56]	; 0x38
   1fb54:	cmp	r4, r5
   1fb58:	blt	1fb84 <__assert_fail@plt+0xe62c>
   1fb5c:	mov	r3, #7
   1fb60:	b	1faf0 <__assert_fail@plt+0xe598>
   1fb64:	ldr	r2, [sp, #40]	; 0x28
   1fb68:	mov	r0, sp
   1fb6c:	bl	159a8 <__assert_fail@plt+0x4450>
   1fb70:	ldrb	r3, [sp, #4]
   1fb74:	cmp	r3, #21
   1fb78:	movne	r3, #11
   1fb7c:	bne	1faf0 <__assert_fail@plt+0xe598>
   1fb80:	b	1fb34 <__assert_fail@plt+0xe5dc>
   1fb84:	ldrb	r6, [r2]
   1fb88:	mov	lr, #0
   1fb8c:	b	1fbb0 <__assert_fail@plt+0xe658>
   1fb90:	ldr	r3, [r0, #4]
   1fb94:	strb	ip, [r3, lr]
   1fb98:	add	lr, lr, #1
   1fb9c:	cmp	lr, #32
   1fba0:	beq	1fb5c <__assert_fail@plt+0xe604>
   1fba4:	ldrb	ip, [r2, #4]
   1fba8:	ldr	r4, [r1, #40]	; 0x28
   1fbac:	ldr	r5, [r1, #56]	; 0x38
   1fbb0:	cmp	ip, #30
   1fbb4:	beq	1fc20 <__assert_fail@plt+0xe6c8>
   1fbb8:	ldr	ip, [r1, #4]
   1fbbc:	add	r3, r4, #1
   1fbc0:	str	r3, [r1, #40]	; 0x28
   1fbc4:	ldrb	ip, [ip, r4]
   1fbc8:	cmp	r5, r3
   1fbcc:	ble	1fb5c <__assert_fail@plt+0xe604>
   1fbd0:	cmp	r6, ip
   1fbd4:	bne	1fb90 <__assert_fail@plt+0xe638>
   1fbd8:	ldr	r4, [r1, #4]
   1fbdc:	ldrb	r4, [r4, r3]
   1fbe0:	cmp	r4, #93	; 0x5d
   1fbe4:	bne	1fb90 <__assert_fail@plt+0xe638>
   1fbe8:	add	r3, r3, #1
   1fbec:	str	r3, [r1, #40]	; 0x28
   1fbf0:	ldr	r1, [r0, #4]
   1fbf4:	mov	r3, #0
   1fbf8:	strb	r3, [r1, lr]
   1fbfc:	ldrb	r2, [r2, #4]
   1fc00:	cmp	r2, #28
   1fc04:	beq	1fd00 <__assert_fail@plt+0xe7a8>
   1fc08:	cmp	r2, #30
   1fc0c:	beq	1fcf4 <__assert_fail@plt+0xe79c>
   1fc10:	cmp	r2, #26
   1fc14:	moveq	r2, #3
   1fc18:	streq	r2, [r0]
   1fc1c:	b	1faf0 <__assert_fail@plt+0xe598>
   1fc20:	ldrb	r3, [r1, #75]	; 0x4b
   1fc24:	cmp	r3, #0
   1fc28:	beq	1fbb8 <__assert_fail@plt+0xe660>
   1fc2c:	ldrb	r3, [r1, #76]	; 0x4c
   1fc30:	cmp	r3, #0
   1fc34:	beq	1fcd0 <__assert_fail@plt+0xe778>
   1fc38:	ldr	r8, [r1, #28]
   1fc3c:	cmp	r4, r8
   1fc40:	beq	1fcec <__assert_fail@plt+0xe794>
   1fc44:	ldr	r3, [r1, #8]
   1fc48:	lsl	ip, r4, #2
   1fc4c:	ldr	r3, [r3, r4, lsl #2]
   1fc50:	cmn	r3, #1
   1fc54:	beq	1fbb8 <__assert_fail@plt+0xe660>
   1fc58:	ldr	r7, [r1, #12]
   1fc5c:	ldr	r3, [r1]
   1fc60:	ldr	r7, [r7, ip]
   1fc64:	ldr	ip, [r1, #24]
   1fc68:	add	r3, r3, r7
   1fc6c:	ldrb	ip, [r3, ip]
   1fc70:	tst	ip, #128	; 0x80
   1fc74:	bne	1fbb8 <__assert_fail@plt+0xe660>
   1fc78:	ldr	r3, [r1, #80]	; 0x50
   1fc7c:	cmp	r3, #1
   1fc80:	add	r3, r4, #1
   1fc84:	beq	1fcc8 <__assert_fail@plt+0xe770>
   1fc88:	cmp	r8, r3
   1fc8c:	ble	1fcc8 <__assert_fail@plt+0xe770>
   1fc90:	ldr	r9, [r1, #8]
   1fc94:	add	r7, r9, r3, lsl #2
   1fc98:	ldr	r9, [r9, r3, lsl #2]
   1fc9c:	cmn	r9, #1
   1fca0:	addeq	r4, r4, #2
   1fca4:	beq	1fcbc <__assert_fail@plt+0xe764>
   1fca8:	b	1fcc8 <__assert_fail@plt+0xe770>
   1fcac:	ldr	r9, [r7, #4]!
   1fcb0:	add	r4, r4, #1
   1fcb4:	cmn	r9, #1
   1fcb8:	bne	1fcc8 <__assert_fail@plt+0xe770>
   1fcbc:	cmp	r4, r8
   1fcc0:	mov	r3, r4
   1fcc4:	bne	1fcac <__assert_fail@plt+0xe754>
   1fcc8:	str	r3, [r1, #40]	; 0x28
   1fccc:	b	1fbc8 <__assert_fail@plt+0xe670>
   1fcd0:	ldr	ip, [r1]
   1fcd4:	ldr	r7, [r1, #24]
   1fcd8:	add	ip, ip, r4
   1fcdc:	add	r3, r4, #1
   1fce0:	str	r3, [r1, #40]	; 0x28
   1fce4:	ldrb	ip, [ip, r7]
   1fce8:	b	1fbc8 <__assert_fail@plt+0xe670>
   1fcec:	lsl	ip, r4, #2
   1fcf0:	b	1fc58 <__assert_fail@plt+0xe700>
   1fcf4:	mov	r2, #4
   1fcf8:	str	r2, [r0]
   1fcfc:	b	1faf0 <__assert_fail@plt+0xe598>
   1fd00:	mov	r2, #2
   1fd04:	str	r2, [r0]
   1fd08:	b	1faf0 <__assert_fail@plt+0xe598>
   1fd0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd10:	sub	sp, sp, #164	; 0xa4
   1fd14:	mov	r4, r1
   1fd18:	str	r2, [sp, #20]
   1fd1c:	ldrb	r2, [r2, #4]
   1fd20:	ldr	r1, [r1]
   1fd24:	str	r3, [sp, #28]
   1fd28:	sub	r3, r2, #1
   1fd2c:	mov	sl, r0
   1fd30:	str	r1, [sp, #24]
   1fd34:	cmp	r3, #35	; 0x23
   1fd38:	ldrls	pc, [pc, r3, lsl #2]
   1fd3c:	b	20964 <__assert_fail@plt+0xf40c>
   1fd40:	andeq	r0, r2, r4, lsr r8
   1fd44:	andeq	pc, r1, ip, ror #27
   1fd48:	andeq	r0, r2, r4, ror #18
   1fd4c:	andeq	r0, r2, r0, asr #15
   1fd50:	andeq	r0, r2, r8, ror r3
   1fd54:	andeq	r0, r2, r4, ror #18
   1fd58:	andeq	r0, r2, r4, ror #18
   1fd5c:			; <UNDEFINED> instruction: 0x000203bc
   1fd60:	andeq	r0, r2, r4, ror r9
   1fd64:	andeq	pc, r1, ip, ror #27
   1fd68:	andeq	pc, r1, ip, lsl #28
   1fd6c:	andeq	r0, r2, r4, lsl r5
   1fd70:	andeq	r0, r2, r4, ror #18
   1fd74:	andeq	r0, r2, r4, ror #18
   1fd78:	andeq	r0, r2, r4, ror #18
   1fd7c:	andeq	r0, r2, r4, ror #18
   1fd80:	andeq	r0, r2, r4, ror #18
   1fd84:	andeq	pc, r1, ip, lsl #28
   1fd88:	andeq	pc, r1, ip, lsl #28
   1fd8c:	andeq	r0, r2, r0, ror r6
   1fd90:	andeq	r0, r2, r4, ror #18
   1fd94:	andeq	r0, r2, r4, ror #18
   1fd98:	andeq	pc, r1, r0, lsl #28
   1fd9c:	andeq	pc, r1, r8, lsr #28
   1fda0:	andeq	r0, r2, r4, ror #18
   1fda4:	andeq	r0, r2, r4, ror #18
   1fda8:	andeq	r0, r2, r4, ror #18
   1fdac:	andeq	r0, r2, r4, ror #18
   1fdb0:	andeq	r0, r2, r4, ror #18
   1fdb4:	andeq	r0, r2, r4, ror #18
   1fdb8:	andeq	r0, r2, r4, ror #18
   1fdbc:	andeq	r0, r2, ip, lsr r9
   1fdc0:	andeq	r0, r2, ip, lsr r9
   1fdc4:	andeq	r0, r2, r8, lsr #9
   1fdc8:	andeq	r0, r2, r8, lsr #9
   1fdcc:	strdeq	r0, [r2], -ip
   1fdd0:	cmp	r0, #0
   1fdd4:	beq	1fde0 <__assert_fail@plt+0xe888>
   1fdd8:	ldr	r1, [pc, #4032]	; 20da0 <__assert_fail@plt+0xf848>
   1fddc:	bl	15ddc <__assert_fail@plt+0x4884>
   1fde0:	ldr	r2, [sp, #204]	; 0xcc
   1fde4:	mov	r3, #8
   1fde8:	str	r3, [r2]
   1fdec:	mov	r3, #0
   1fdf0:	str	r3, [sp, #32]
   1fdf4:	ldr	r0, [sp, #32]
   1fdf8:	add	sp, sp, #164	; 0xa4
   1fdfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe00:	ldr	r3, [sp, #28]
   1fe04:	tst	r3, #16777216	; 0x1000000
   1fe08:	bne	200a4 <__assert_fail@plt+0xeb4c>
   1fe0c:	ldr	r3, [sp, #28]
   1fe10:	tst	r3, #32
   1fe14:	bne	200a4 <__assert_fail@plt+0xeb4c>
   1fe18:	tst	r3, #16
   1fe1c:	bne	20b34 <__assert_fail@plt+0xf5dc>
   1fe20:	cmp	r2, #9
   1fe24:	beq	20974 <__assert_fail@plt+0xf41c>
   1fe28:	ldr	r1, [sp, #20]
   1fe2c:	ldr	r0, [sp, #24]
   1fe30:	mov	r3, #0
   1fe34:	mov	r2, #1
   1fe38:	str	r1, [sp]
   1fe3c:	strb	r2, [r1, #4]
   1fe40:	mov	r2, r3
   1fe44:	add	r1, r0, #64	; 0x40
   1fe48:	add	r0, r0, #56	; 0x38
   1fe4c:	bl	17b4c <__assert_fail@plt+0x65f4>
   1fe50:	subs	r3, r0, #0
   1fe54:	str	r3, [sp, #32]
   1fe58:	beq	20924 <__assert_fail@plt+0xf3cc>
   1fe5c:	ldr	r4, [sp, #20]
   1fe60:	ldr	r2, [sp, #28]
   1fe64:	mov	r1, sl
   1fe68:	mov	r0, r4
   1fe6c:	bl	1f048 <__assert_fail@plt+0xdaf0>
   1fe70:	ldr	r2, [sl, #40]	; 0x28
   1fe74:	mov	fp, #0
   1fe78:	ldrb	r3, [r4, #4]
   1fe7c:	add	r2, r2, r0
   1fe80:	str	r2, [sl, #40]	; 0x28
   1fe84:	cmp	r3, #23
   1fe88:	bhi	1fdf4 <__assert_fail@plt+0xe89c>
   1fe8c:	ldr	r2, [pc, #3856]	; 20da4 <__assert_fail@plt+0xf84c>
   1fe90:	sub	r6, r3, #18
   1fe94:	clz	r6, r6
   1fe98:	mvn	r2, r2, lsr r3
   1fe9c:	tst	r2, #1
   1fea0:	lsr	r6, r6, #5
   1fea4:	bne	1fdf4 <__assert_fail@plt+0xe89c>
   1fea8:	ldr	r2, [sp, #20]
   1feac:	cmp	r3, #23
   1feb0:	ldr	r4, [sl, #40]	; 0x28
   1feb4:	ldm	r2, {r0, r1}
   1feb8:	add	r2, sp, #96	; 0x60
   1febc:	stm	r2, {r0, r1}
   1fec0:	beq	20174 <__assert_fail@plt+0xec1c>
   1fec4:	cmp	r3, #19
   1fec8:	moveq	r3, #1
   1fecc:	mvnne	r3, #0
   1fed0:	ldr	r2, [sp, #28]
   1fed4:	mov	r1, sl
   1fed8:	ldr	r0, [sp, #20]
   1fedc:	str	r3, [sp, #16]
   1fee0:	bl	1f048 <__assert_fail@plt+0xdaf0>
   1fee4:	ldr	r3, [sl, #40]	; 0x28
   1fee8:	ldr	r2, [sp, #32]
   1feec:	cmp	r2, #0
   1fef0:	add	r0, r3, r0
   1fef4:	str	r0, [sl, #40]	; 0x28
   1fef8:	beq	201e4 <__assert_fail@plt+0xec8c>
   1fefc:	cmp	r6, #0
   1ff00:	strle	fp, [sp, #36]	; 0x24
   1ff04:	ldrle	r5, [sp, #32]
   1ff08:	bgt	200c4 <__assert_fail@plt+0xeb6c>
   1ff0c:	ldrb	r3, [r5, #24]
   1ff10:	cmp	r3, #17
   1ff14:	beq	201fc <__assert_fail@plt+0xeca4>
   1ff18:	ldr	r3, [sp, #24]
   1ff1c:	ldr	r2, [sp, #16]
   1ff20:	add	r4, sp, #128	; 0x80
   1ff24:	cmn	r2, #1
   1ff28:	add	r7, r3, #56	; 0x38
   1ff2c:	add	r8, r3, #64	; 0x40
   1ff30:	movne	ip, #10
   1ff34:	moveq	ip, #11
   1ff38:	str	r4, [sp]
   1ff3c:	mov	r0, r7
   1ff40:	str	fp, [r4, #4]
   1ff44:	mov	r1, r8
   1ff48:	mov	r3, #0
   1ff4c:	mov	r2, r5
   1ff50:	str	fp, [sp, #128]	; 0x80
   1ff54:	strb	ip, [sp, #132]	; 0x84
   1ff58:	bl	17b4c <__assert_fail@plt+0x65f4>
   1ff5c:	subs	r9, r0, #0
   1ff60:	beq	20148 <__assert_fail@plt+0xebf0>
   1ff64:	ldr	r2, [sp, #16]
   1ff68:	add	r6, r6, #2
   1ff6c:	cmp	r6, r2
   1ff70:	bgt	20014 <__assert_fail@plt+0xeabc>
   1ff74:	str	sl, [sp, #40]	; 0x28
   1ff78:	mov	sl, r9
   1ff7c:	ldr	r9, [sp, #24]
   1ff80:	mov	r0, r5
   1ff84:	mov	r1, r9
   1ff88:	bl	17c10 <__assert_fail@plt+0x66b8>
   1ff8c:	mov	ip, #16
   1ff90:	str	r4, [sp]
   1ff94:	mov	r2, sl
   1ff98:	str	fp, [r4, #4]
   1ff9c:	mov	r1, r8
   1ffa0:	str	fp, [r4]
   1ffa4:	strb	ip, [sp, #132]	; 0x84
   1ffa8:	mov	r5, r0
   1ffac:	mov	r3, r0
   1ffb0:	mov	r0, r7
   1ffb4:	bl	17b4c <__assert_fail@plt+0x65f4>
   1ffb8:	cmp	r0, #0
   1ffbc:	cmpne	r5, #0
   1ffc0:	moveq	ip, #1
   1ffc4:	movne	ip, #0
   1ffc8:	beq	20148 <__assert_fail@plt+0xebf0>
   1ffcc:	str	r4, [sp]
   1ffd0:	mov	r2, r0
   1ffd4:	str	ip, [r4, #4]
   1ffd8:	str	ip, [r4]
   1ffdc:	mov	r3, fp
   1ffe0:	mov	ip, #10
   1ffe4:	mov	r1, r8
   1ffe8:	mov	r0, r7
   1ffec:	strb	ip, [sp, #132]	; 0x84
   1fff0:	bl	17b4c <__assert_fail@plt+0x65f4>
   1fff4:	subs	sl, r0, #0
   1fff8:	beq	20148 <__assert_fail@plt+0xebf0>
   1fffc:	ldr	r3, [sp, #16]
   20000:	add	r6, r6, #1
   20004:	cmp	r6, r3
   20008:	ble	1ff80 <__assert_fail@plt+0xea28>
   2000c:	mov	r9, sl
   20010:	ldr	sl, [sp, #40]	; 0x28
   20014:	ldr	r2, [sp, #36]	; 0x24
   20018:	cmp	r2, #0
   2001c:	beq	20314 <__assert_fail@plt+0xedbc>
   20020:	str	r4, [sp]
   20024:	mov	ip, #16
   20028:	str	fp, [r4, #4]
   2002c:	mov	r3, r9
   20030:	mov	r1, r8
   20034:	mov	r0, r7
   20038:	str	fp, [r4]
   2003c:	strb	ip, [sp, #132]	; 0x84
   20040:	bl	17b4c <__assert_fail@plt+0x65f4>
   20044:	ldr	r3, [sp, #204]	; 0xcc
   20048:	ldr	r3, [r3]
   2004c:	adds	r3, r3, #0
   20050:	movne	r3, #1
   20054:	cmp	r0, #0
   20058:	movne	r3, #0
   2005c:	cmp	r3, #0
   20060:	bne	20154 <__assert_fail@plt+0xebfc>
   20064:	str	r0, [sp, #32]
   20068:	ldr	r3, [sp, #28]
   2006c:	tst	r3, #16777216	; 0x1000000
   20070:	ldr	r3, [sp, #20]
   20074:	ldrb	r3, [r3, #4]
   20078:	beq	1fe84 <__assert_fail@plt+0xe92c>
   2007c:	cmp	r3, #23
   20080:	cmpne	r3, #11
   20084:	bne	1fe84 <__assert_fail@plt+0xe92c>
   20088:	ldr	r3, [sp, #32]
   2008c:	cmp	r3, #0
   20090:	beq	200a4 <__assert_fail@plt+0xeb4c>
   20094:	mov	r0, r3
   20098:	mov	r2, #0
   2009c:	ldr	r1, [pc, #3324]	; 20da0 <__assert_fail@plt+0xf848>
   200a0:	bl	15ddc <__assert_fail@plt+0x4884>
   200a4:	ldr	r2, [sp, #204]	; 0xcc
   200a8:	mov	r3, #13
   200ac:	str	r3, [r2]
   200b0:	mov	r3, #0
   200b4:	str	r3, [sp, #32]
   200b8:	ldr	r0, [sp, #32]
   200bc:	add	sp, sp, #164	; 0xa4
   200c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   200c4:	cmp	r6, #1
   200c8:	beq	20964 <__assert_fail@plt+0xf40c>
   200cc:	ldr	r3, [sp, #24]
   200d0:	ldr	r5, [sp, #32]
   200d4:	add	r2, r3, #56	; 0x38
   200d8:	str	sl, [sp, #40]	; 0x28
   200dc:	str	r2, [sp, #36]	; 0x24
   200e0:	add	r9, r3, #64	; 0x40
   200e4:	mov	r7, #2
   200e8:	add	r4, sp, #128	; 0x80
   200ec:	mov	r8, #16
   200f0:	mov	sl, r5
   200f4:	b	20104 <__assert_fail@plt+0xebac>
   200f8:	add	r7, r7, #1
   200fc:	cmp	r7, r6
   20100:	bgt	2034c <__assert_fail@plt+0xedf4>
   20104:	mov	r0, r5
   20108:	ldr	r1, [sp, #24]
   2010c:	bl	17c10 <__assert_fail@plt+0x66b8>
   20110:	str	r4, [sp]
   20114:	mov	r2, sl
   20118:	str	fp, [r4, #4]
   2011c:	mov	r1, r9
   20120:	str	fp, [r4]
   20124:	strb	r8, [sp, #132]	; 0x84
   20128:	mov	r5, r0
   2012c:	mov	r3, r0
   20130:	ldr	r0, [sp, #36]	; 0x24
   20134:	bl	17b4c <__assert_fail@plt+0x65f4>
   20138:	cmp	r0, #0
   2013c:	cmpne	r5, #0
   20140:	mov	sl, r0
   20144:	bne	200f8 <__assert_fail@plt+0xeba0>
   20148:	ldr	r2, [sp, #204]	; 0xcc
   2014c:	mov	r3, #12
   20150:	str	r3, [r2]
   20154:	ldr	r3, [sp, #32]
   20158:	cmp	r3, #0
   2015c:	beq	1fdec <__assert_fail@plt+0xe894>
   20160:	mov	r0, r3
   20164:	mov	r2, #0
   20168:	ldr	r1, [pc, #3120]	; 20da0 <__assert_fail@plt+0xf848>
   2016c:	bl	15ddc <__assert_fail@plt+0x4884>
   20170:	b	1fdec <__assert_fail@plt+0xe894>
   20174:	ldr	r2, [sp, #28]
   20178:	ldr	r1, [sp, #20]
   2017c:	mov	r0, sl
   20180:	bl	1f9b0 <__assert_fail@plt+0xe458>
   20184:	cmn	r0, #1
   20188:	str	r0, [sp, #16]
   2018c:	beq	20210 <__assert_fail@plt+0xecb8>
   20190:	ldr	r3, [sp, #16]
   20194:	cmn	r3, #2
   20198:	beq	201b4 <__assert_fail@plt+0xec5c>
   2019c:	ldr	r3, [sp, #20]
   201a0:	ldrb	r3, [r3, #4]
   201a4:	cmp	r3, #24
   201a8:	beq	2031c <__assert_fail@plt+0xedc4>
   201ac:	cmp	r3, #1
   201b0:	beq	202e4 <__assert_fail@plt+0xed8c>
   201b4:	ldr	r3, [sp, #28]
   201b8:	tst	r3, #2097152	; 0x200000
   201bc:	beq	20d80 <__assert_fail@plt+0xf828>
   201c0:	add	r3, sp, #96	; 0x60
   201c4:	ldr	r2, [sp, #20]
   201c8:	ldm	r3, {r0, r1}
   201cc:	mov	r3, #1
   201d0:	str	r4, [sl, #40]	; 0x28
   201d4:	stm	r2, {r0, r1}
   201d8:	ldr	r0, [sp, #32]
   201dc:	strb	r3, [r2, #4]
   201e0:	b	20044 <__assert_fail@plt+0xeaec>
   201e4:	ldr	r3, [sp, #204]	; 0xcc
   201e8:	ldr	r3, [r3]
   201ec:	cmp	r3, #0
   201f0:	bne	20154 <__assert_fail@plt+0xebfc>
   201f4:	str	fp, [sp, #32]
   201f8:	b	20068 <__assert_fail@plt+0xeb10>
   201fc:	ldr	r2, [r5, #20]
   20200:	ldr	r1, [pc, #2976]	; 20da8 <__assert_fail@plt+0xf850>
   20204:	mov	r0, r5
   20208:	bl	15ddc <__assert_fail@plt+0x4884>
   2020c:	b	1ff18 <__assert_fail@plt+0xe9c0>
   20210:	ldr	r3, [sp, #20]
   20214:	ldrb	r3, [r3, #4]
   20218:	cmp	r3, #1
   2021c:	bne	20300 <__assert_fail@plt+0xeda8>
   20220:	ldr	r3, [sp, #20]
   20224:	ldrb	r3, [r3]
   20228:	cmp	r3, #44	; 0x2c
   2022c:	bne	20300 <__assert_fail@plt+0xeda8>
   20230:	mov	r6, fp
   20234:	ldr	r2, [sp, #28]
   20238:	ldr	r1, [sp, #20]
   2023c:	mov	r0, sl
   20240:	bl	1f9b0 <__assert_fail@plt+0xe458>
   20244:	cmn	r0, #2
   20248:	str	r0, [sp, #16]
   2024c:	beq	201b4 <__assert_fail@plt+0xec5c>
   20250:	ldr	r2, [sp, #16]
   20254:	cmn	r2, #1
   20258:	cmpne	r6, r2
   2025c:	bgt	20300 <__assert_fail@plt+0xeda8>
   20260:	ldr	r3, [sp, #20]
   20264:	ldrb	r3, [r3, #4]
   20268:	cmp	r3, #24
   2026c:	bne	20300 <__assert_fail@plt+0xeda8>
   20270:	cmn	r2, #1
   20274:	beq	20324 <__assert_fail@plt+0xedcc>
   20278:	ldr	r3, [sp, #16]
   2027c:	ldr	r2, [pc, #2856]	; 20dac <__assert_fail@plt+0xf854>
   20280:	cmp	r3, r2
   20284:	movle	r3, #0
   20288:	movgt	r3, #1
   2028c:	cmp	r3, #0
   20290:	bne	2033c <__assert_fail@plt+0xede4>
   20294:	ldr	r2, [sp, #28]
   20298:	mov	r1, sl
   2029c:	ldr	r0, [sp, #20]
   202a0:	bl	1f048 <__assert_fail@plt+0xdaf0>
   202a4:	ldr	r3, [sl, #40]	; 0x28
   202a8:	ldr	ip, [sp, #32]
   202ac:	cmp	ip, #0
   202b0:	add	r0, r3, r0
   202b4:	str	r0, [sl, #40]	; 0x28
   202b8:	beq	201e4 <__assert_fail@plt+0xec8c>
   202bc:	ldr	r3, [sp, #16]
   202c0:	orrs	r3, r6, r3
   202c4:	bne	1fefc <__assert_fail@plt+0xe9a4>
   202c8:	mov	r2, fp
   202cc:	ldr	r1, [pc, #2764]	; 20da0 <__assert_fail@plt+0xf848>
   202d0:	mov	r0, ip
   202d4:	bl	15ddc <__assert_fail@plt+0x4884>
   202d8:	ldr	r3, [sp, #204]	; 0xcc
   202dc:	ldr	r3, [r3]
   202e0:	b	201ec <__assert_fail@plt+0xec94>
   202e4:	ldr	r3, [sp, #20]
   202e8:	ldrb	r3, [r3]
   202ec:	cmp	r3, #44	; 0x2c
   202f0:	beq	21244 <__assert_fail@plt+0xfcec>
   202f4:	ldr	r3, [sp, #28]
   202f8:	tst	r3, #2097152	; 0x200000
   202fc:	bne	201c0 <__assert_fail@plt+0xec68>
   20300:	ldr	r2, [sp, #204]	; 0xcc
   20304:	mov	r3, #10
   20308:	str	r3, [r2]
   2030c:	b	20154 <__assert_fail@plt+0xebfc>
   20310:	ldr	r9, [sp, #36]	; 0x24
   20314:	str	r9, [sp, #32]
   20318:	b	20068 <__assert_fail@plt+0xeb10>
   2031c:	ldr	r6, [sp, #16]
   20320:	b	20278 <__assert_fail@plt+0xed20>
   20324:	add	r3, r2, #32768	; 0x8000
   20328:	cmp	r6, r3
   2032c:	movle	r3, #0
   20330:	movgt	r3, #1
   20334:	cmp	r3, #0
   20338:	beq	20294 <__assert_fail@plt+0xed3c>
   2033c:	ldr	r2, [sp, #204]	; 0xcc
   20340:	mov	r3, #15
   20344:	str	r3, [r2]
   20348:	b	20154 <__assert_fail@plt+0xebfc>
   2034c:	ldr	sl, [sp, #40]	; 0x28
   20350:	str	r0, [sp, #36]	; 0x24
   20354:	ldr	r3, [sp, #16]
   20358:	cmp	r6, r3
   2035c:	beq	20310 <__assert_fail@plt+0xedb8>
   20360:	mov	r0, r5
   20364:	ldr	r1, [sp, #24]
   20368:	bl	17c10 <__assert_fail@plt+0x66b8>
   2036c:	subs	r5, r0, #0
   20370:	bne	1ff0c <__assert_fail@plt+0xe9b4>
   20374:	b	20148 <__assert_fail@plt+0xebf0>
   20378:	ldr	r2, [sp, #20]
   2037c:	ldr	r4, [sp, #24]
   20380:	mov	r3, #0
   20384:	str	r2, [sp]
   20388:	add	r1, r4, #64	; 0x40
   2038c:	mov	r2, r3
   20390:	add	r0, r4, #56	; 0x38
   20394:	bl	17b4c <__assert_fail@plt+0x65f4>
   20398:	subs	r3, r0, #0
   2039c:	str	r3, [sp, #32]
   203a0:	beq	20924 <__assert_fail@plt+0xf3cc>
   203a4:	ldr	r3, [r4, #92]	; 0x5c
   203a8:	cmp	r3, #1
   203ac:	ldrbgt	r3, [r4, #88]	; 0x58
   203b0:	orrgt	r3, r3, #2
   203b4:	strbgt	r3, [r4, #88]	; 0x58
   203b8:	b	1fe5c <__assert_fail@plt+0xe904>
   203bc:	ldr	r5, [r4, #24]
   203c0:	ldr	r6, [sp, #20]
   203c4:	ldr	r7, [sp, #28]
   203c8:	add	r3, r5, #1
   203cc:	orr	r2, r7, #8388608	; 0x800000
   203d0:	str	r3, [r4, #24]
   203d4:	mov	r1, r0
   203d8:	mov	r0, r6
   203dc:	bl	1f048 <__assert_fail@plt+0xdaf0>
   203e0:	ldrb	r2, [r6, #4]
   203e4:	ldr	r3, [sl, #40]	; 0x28
   203e8:	cmp	r2, #9
   203ec:	add	r3, r3, r0
   203f0:	str	r3, [sl, #40]	; 0x28
   203f4:	beq	20994 <__assert_fail@plt+0xf43c>
   203f8:	ldr	r3, [sp, #200]	; 0xc8
   203fc:	ldr	r2, [sp, #204]	; 0xcc
   20400:	add	r3, r3, #1
   20404:	str	r2, [sp, #4]
   20408:	str	r3, [sp]
   2040c:	mov	r2, r6
   20410:	mov	r3, r7
   20414:	mov	r1, r4
   20418:	mov	r0, sl
   2041c:	bl	213fc <__assert_fail@plt+0xfea4>
   20420:	ldr	r2, [sp, #204]	; 0xcc
   20424:	ldr	r2, [r2]
   20428:	cmp	r2, #0
   2042c:	mov	r3, r0
   20430:	bne	1fdec <__assert_fail@plt+0xe894>
   20434:	ldr	r1, [sp, #20]
   20438:	ldrb	r1, [r1, #4]
   2043c:	cmp	r1, #9
   20440:	bne	1fdd0 <__assert_fail@plt+0xe878>
   20444:	cmp	r5, #8
   20448:	bhi	20460 <__assert_fail@plt+0xef08>
   2044c:	ldr	r0, [sp, #24]
   20450:	mov	r1, #1
   20454:	ldr	r2, [r0, #84]	; 0x54
   20458:	orr	r2, r2, r1, lsl r5
   2045c:	str	r2, [r0, #84]	; 0x54
   20460:	add	ip, sp, #128	; 0x80
   20464:	str	ip, [sp]
   20468:	ldr	ip, [sp, #24]
   2046c:	mov	r0, #0
   20470:	str	r0, [sp, #132]	; 0x84
   20474:	mov	r2, r3
   20478:	mov	lr, #17
   2047c:	mov	r3, r0
   20480:	str	r0, [sp, #128]	; 0x80
   20484:	add	r1, ip, #64	; 0x40
   20488:	add	r0, ip, #56	; 0x38
   2048c:	strb	lr, [sp, #132]	; 0x84
   20490:	bl	17b4c <__assert_fail@plt+0x65f4>
   20494:	subs	r3, r0, #0
   20498:	str	r3, [sp, #32]
   2049c:	beq	20924 <__assert_fail@plt+0xf3cc>
   204a0:	str	r5, [r3, #20]
   204a4:	b	1fe5c <__assert_fail@plt+0xe904>
   204a8:	ldr	r3, [sp, #204]	; 0xcc
   204ac:	sub	r2, r2, #35	; 0x23
   204b0:	clz	r2, r2
   204b4:	lsr	r2, r2, #5
   204b8:	ldr	r1, [r0, #64]	; 0x40
   204bc:	str	r2, [sp]
   204c0:	str	r3, [sp, #4]
   204c4:	ldr	r2, [pc, #2276]	; 20db0 <__assert_fail@plt+0xf858>
   204c8:	ldr	r3, [pc, #2276]	; 20db4 <__assert_fail@plt+0xf85c>
   204cc:	ldr	r0, [sp, #24]
   204d0:	bl	1b1fc <__assert_fail@plt+0x9ca4>
   204d4:	ldr	r3, [sp, #204]	; 0xcc
   204d8:	ldr	r3, [r3]
   204dc:	adds	r3, r3, #0
   204e0:	movne	r3, #1
   204e4:	cmp	r0, #0
   204e8:	movne	r3, #0
   204ec:	cmp	r3, #0
   204f0:	str	r0, [sp, #32]
   204f4:	beq	1fe5c <__assert_fail@plt+0xe904>
   204f8:	b	1fdec <__assert_fail@plt+0xe894>
   204fc:	ldr	r2, [sp, #204]	; 0xcc
   20500:	mov	r3, #5
   20504:	str	r3, [r2]
   20508:	mov	r3, #0
   2050c:	str	r3, [sp, #32]
   20510:	b	1fdf4 <__assert_fail@plt+0xe89c>
   20514:	ldr	r3, [sp, #20]
   20518:	ldr	r2, [r3]
   2051c:	ldr	r3, [pc, #2196]	; 20db8 <__assert_fail@plt+0xf860>
   20520:	and	r3, r3, r2
   20524:	cmp	r3, #0
   20528:	beq	20590 <__assert_fail@plt+0xf038>
   2052c:	ldr	r3, [sp, #24]
   20530:	ldrb	r3, [r3, #88]	; 0x58
   20534:	ands	r4, r3, #16
   20538:	bne	20590 <__assert_fail@plt+0xf038>
   2053c:	ldr	r0, [sp, #24]
   20540:	orr	r3, r3, #16
   20544:	ands	r2, r3, #8
   20548:	mov	r1, r3
   2054c:	strb	r3, [r0, #88]	; 0x58
   20550:	bne	2104c <__assert_fail@plt+0xfaf4>
   20554:	ldr	r3, [pc, #2144]	; 20dbc <__assert_fail@plt+0xf864>
   20558:	tst	r1, #4
   2055c:	str	r3, [r0, #100]	; 0x64
   20560:	mvn	r1, #2013265921	; 0x78000001
   20564:	mvn	r3, #-134217727	; 0xf8000001
   20568:	str	r2, [r0, #96]	; 0x60
   2056c:	str	r1, [r0, #104]	; 0x68
   20570:	str	r3, [r0, #108]	; 0x6c
   20574:	beq	20fc4 <__assert_fail@plt+0xfa6c>
   20578:	ldr	r3, [sp, #20]
   2057c:	str	r2, [r0, #112]	; 0x70
   20580:	str	r2, [r0, #116]	; 0x74
   20584:	str	r2, [r0, #120]	; 0x78
   20588:	str	r2, [r0, #124]	; 0x7c
   2058c:	ldr	r2, [r3]
   20590:	sub	r3, r2, #256	; 0x100
   20594:	bics	r3, r3, #256	; 0x100
   20598:	bne	20b84 <__assert_fail@plt+0xf62c>
   2059c:	cmp	r2, #256	; 0x100
   205a0:	beq	20a9c <__assert_fail@plt+0xf544>
   205a4:	ldr	r1, [sp, #24]
   205a8:	ldr	r7, [sp, #20]
   205ac:	mov	r2, #5
   205b0:	add	r5, r1, #56	; 0x38
   205b4:	add	r6, r1, #64	; 0x40
   205b8:	str	r7, [sp]
   205bc:	mov	r1, r6
   205c0:	str	r2, [r7]
   205c4:	mov	r0, r5
   205c8:	mov	r2, r3
   205cc:	bl	17b4c <__assert_fail@plt+0x65f4>
   205d0:	mov	r3, #10
   205d4:	str	r3, [r7]
   205d8:	mov	r4, r0
   205dc:	ldr	r2, [sp, #20]
   205e0:	mov	r3, #0
   205e4:	str	r2, [sp]
   205e8:	mov	r1, r6
   205ec:	mov	r2, r3
   205f0:	mov	r0, r5
   205f4:	bl	17b4c <__assert_fail@plt+0x65f4>
   205f8:	add	r2, sp, #128	; 0x80
   205fc:	mov	ip, #0
   20600:	str	r2, [sp]
   20604:	mov	lr, #10
   20608:	mov	r1, r6
   2060c:	mov	r2, r4
   20610:	str	ip, [sp, #132]	; 0x84
   20614:	str	ip, [sp, #128]	; 0x80
   20618:	strb	lr, [sp, #132]	; 0x84
   2061c:	mov	r7, r0
   20620:	mov	r3, r7
   20624:	mov	r0, r5
   20628:	bl	17b4c <__assert_fail@plt+0x65f4>
   2062c:	cmp	r7, #0
   20630:	cmpne	r4, #0
   20634:	moveq	r3, #1
   20638:	movne	r3, #0
   2063c:	cmp	r0, #0
   20640:	orreq	r3, r3, #1
   20644:	cmp	r3, #0
   20648:	str	r0, [sp, #32]
   2064c:	bne	20924 <__assert_fail@plt+0xf3cc>
   20650:	ldr	r2, [sp, #28]
   20654:	ldr	r0, [sp, #20]
   20658:	mov	r1, sl
   2065c:	bl	1f048 <__assert_fail@plt+0xdaf0>
   20660:	ldr	r3, [sl, #40]	; 0x28
   20664:	add	r3, r3, r0
   20668:	str	r3, [sl, #40]	; 0x28
   2066c:	b	1fdf4 <__assert_fail@plt+0xe89c>
   20670:	mov	r3, #0
   20674:	mov	r1, #1
   20678:	mov	r0, #32
   2067c:	str	r3, [sp, #68]	; 0x44
   20680:	bl	2474c <__assert_fail@plt+0x131f4>
   20684:	mov	r1, #1
   20688:	mov	r9, r0
   2068c:	mov	r0, #40	; 0x28
   20690:	bl	2474c <__assert_fail@plt+0x131f4>
   20694:	cmp	r0, #0
   20698:	cmpne	r9, #0
   2069c:	moveq	r3, #1
   206a0:	movne	r3, #0
   206a4:	mov	r6, r0
   206a8:	str	r3, [sp, #36]	; 0x24
   206ac:	beq	20d44 <__assert_fail@plt+0xf7ec>
   206b0:	ldr	r4, [sp, #20]
   206b4:	ldr	r2, [sp, #28]
   206b8:	mov	r1, sl
   206bc:	mov	r0, r4
   206c0:	bl	159a8 <__assert_fail@plt+0x4450>
   206c4:	ldrb	r3, [r4, #4]
   206c8:	cmp	r3, #2
   206cc:	mov	fp, r0
   206d0:	beq	20d64 <__assert_fail@plt+0xf80c>
   206d4:	cmp	r3, #25
   206d8:	beq	20ad8 <__assert_fail@plt+0xf580>
   206dc:	ldr	r2, [sp, #36]	; 0x24
   206e0:	str	r2, [sp, #40]	; 0x28
   206e4:	cmp	r3, #21
   206e8:	ldr	r1, [sp, #28]
   206ec:	ldreq	r2, [sp, #20]
   206f0:	moveq	r3, #1
   206f4:	ldr	r4, [sp, #20]
   206f8:	strbeq	r3, [r2, #4]
   206fc:	mov	r3, #0
   20700:	mov	r2, r3
   20704:	str	r3, [sp, #32]
   20708:	lsr	r3, r1, #16
   2070c:	and	r3, r3, #1
   20710:	str	r2, [sp, #16]
   20714:	str	r3, [sp, #52]	; 0x34
   20718:	add	r2, r6, #36	; 0x24
   2071c:	mov	r8, r9
   20720:	mov	r3, #1
   20724:	mov	r9, r1
   20728:	str	r2, [sp, #44]	; 0x2c
   2072c:	add	r2, r6, #12
   20730:	str	r2, [sp, #48]	; 0x30
   20734:	add	ip, sp, #96	; 0x60
   20738:	str	r3, [sp, #4]
   2073c:	str	ip, [sp, #76]	; 0x4c
   20740:	str	r9, [sp]
   20744:	mov	ip, #3
   20748:	mov	r3, fp
   2074c:	mov	r2, r4
   20750:	mov	r1, sl
   20754:	add	r0, sp, #72	; 0x48
   20758:	str	ip, [sp, #72]	; 0x48
   2075c:	bl	1fa70 <__assert_fail@plt+0xe518>
   20760:	cmp	r0, #0
   20764:	bne	20bb4 <__assert_fail@plt+0xf65c>
   20768:	mov	r2, r9
   2076c:	mov	r1, sl
   20770:	mov	r0, r4
   20774:	bl	159a8 <__assert_fail@plt+0x4450>
   20778:	ldr	r3, [sp, #72]	; 0x48
   2077c:	sub	r2, r3, #2
   20780:	bics	r2, r2, #2
   20784:	mov	fp, r0
   20788:	beq	207a0 <__assert_fail@plt+0xf248>
   2078c:	ldrb	r2, [r4, #4]
   20790:	cmp	r2, #2
   20794:	beq	20bcc <__assert_fail@plt+0xf674>
   20798:	cmp	r2, #22
   2079c:	beq	20be0 <__assert_fail@plt+0xf688>
   207a0:	cmp	r3, #4
   207a4:	ldrls	pc, [pc, r3, lsl #2]
   207a8:	b	20bcc <__assert_fail@plt+0xf674>
   207ac:	andeq	r0, r2, ip, ror sl
   207b0:	andeq	r0, r2, r4, asr sl
   207b4:	andeq	r0, r2, r4, lsr sl
   207b8:	andeq	r0, r2, ip, ror #19
   207bc:	muleq	r2, ip, r9
   207c0:	ldr	r3, [sp, #20]
   207c4:	mov	r2, #1
   207c8:	ldr	r1, [r3]
   207cc:	ldr	r3, [sp, #24]
   207d0:	lsl	r2, r2, r1
   207d4:	ldr	r3, [r3, #84]	; 0x54
   207d8:	ands	r3, r2, r3
   207dc:	beq	20d30 <__assert_fail@plt+0xf7d8>
   207e0:	ldr	r4, [sp, #24]
   207e4:	ldr	r0, [sp, #20]
   207e8:	mov	r3, #0
   207ec:	ldr	r1, [r4, #80]	; 0x50
   207f0:	orr	r2, r1, r2
   207f4:	str	r2, [r4, #80]	; 0x50
   207f8:	add	r1, r4, #64	; 0x40
   207fc:	mov	r2, r3
   20800:	str	r0, [sp]
   20804:	add	r0, r4, #56	; 0x38
   20808:	bl	17b4c <__assert_fail@plt+0x65f4>
   2080c:	subs	r3, r0, #0
   20810:	str	r3, [sp, #32]
   20814:	beq	20924 <__assert_fail@plt+0xf3cc>
   20818:	ldrb	r2, [r4, #88]	; 0x58
   2081c:	ldr	r3, [r4, #76]	; 0x4c
   20820:	orr	r2, r2, #2
   20824:	add	r3, r3, #1
   20828:	strb	r2, [r4, #88]	; 0x58
   2082c:	str	r3, [r4, #76]	; 0x4c
   20830:	b	1fe5c <__assert_fail@plt+0xe904>
   20834:	ldr	r3, [sp, #24]
   20838:	ldr	r2, [sp, #20]
   2083c:	add	r8, r3, #56	; 0x38
   20840:	add	r7, r3, #64	; 0x40
   20844:	mov	r3, #0
   20848:	str	r2, [sp]
   2084c:	mov	r0, r8
   20850:	mov	r2, r3
   20854:	mov	r1, r7
   20858:	bl	17b4c <__assert_fail@plt+0x65f4>
   2085c:	subs	r3, r0, #0
   20860:	str	r3, [sp, #32]
   20864:	beq	20924 <__assert_fail@plt+0xf3cc>
   20868:	ldr	r3, [sp, #24]
   2086c:	ldr	r3, [r3, #92]	; 0x5c
   20870:	cmp	r3, #1
   20874:	ble	1fe5c <__assert_fail@plt+0xe904>
   20878:	ldr	r6, [sp, #32]
   2087c:	mov	r5, #0
   20880:	add	r4, sp, #128	; 0x80
   20884:	mov	r9, #16
   20888:	ldr	r3, [sl, #40]	; 0x28
   2088c:	ldr	r2, [sl, #56]	; 0x38
   20890:	cmp	r2, r3
   20894:	ble	20bc4 <__assert_fail@plt+0xf66c>
   20898:	ldr	r2, [sl, #28]
   2089c:	cmp	r3, r2
   208a0:	beq	20bc4 <__assert_fail@plt+0xf66c>
   208a4:	ldr	r2, [sl, #8]
   208a8:	ldr	r3, [r2, r3, lsl #2]
   208ac:	cmn	r3, #1
   208b0:	bne	20bc4 <__assert_fail@plt+0xf66c>
   208b4:	ldr	fp, [sp, #20]
   208b8:	ldr	r2, [sp, #28]
   208bc:	mov	r1, sl
   208c0:	mov	r0, fp
   208c4:	bl	1f048 <__assert_fail@plt+0xdaf0>
   208c8:	ldr	ip, [sl, #40]	; 0x28
   208cc:	mov	r3, r5
   208d0:	str	fp, [sp]
   208d4:	mov	r2, #0
   208d8:	mov	r1, r7
   208dc:	add	r0, ip, r0
   208e0:	str	r0, [sl, #40]	; 0x28
   208e4:	mov	r0, r8
   208e8:	bl	17b4c <__assert_fail@plt+0x65f4>
   208ec:	str	r4, [sp]
   208f0:	mov	r2, r6
   208f4:	str	r5, [r4, #4]
   208f8:	mov	r1, r7
   208fc:	str	r5, [r4]
   20900:	strb	r9, [sp, #132]	; 0x84
   20904:	mov	fp, r0
   20908:	mov	r3, r0
   2090c:	mov	r0, r8
   20910:	bl	17b4c <__assert_fail@plt+0x65f4>
   20914:	cmp	r0, #0
   20918:	cmpne	fp, #0
   2091c:	mov	r6, r0
   20920:	bne	20888 <__assert_fail@plt+0xf330>
   20924:	ldr	r2, [sp, #204]	; 0xcc
   20928:	mov	r3, #12
   2092c:	str	r3, [r2]
   20930:	mov	r3, #0
   20934:	str	r3, [sp, #32]
   20938:	b	1fdf4 <__assert_fail@plt+0xe89c>
   2093c:	ldr	r3, [sp, #204]	; 0xcc
   20940:	sub	r2, r2, #33	; 0x21
   20944:	clz	r2, r2
   20948:	lsr	r2, r2, #5
   2094c:	ldr	r1, [r0, #64]	; 0x40
   20950:	str	r2, [sp]
   20954:	str	r3, [sp, #4]
   20958:	ldr	r2, [pc, #1120]	; 20dc0 <__assert_fail@plt+0xf868>
   2095c:	ldr	r3, [pc, #1120]	; 20dc4 <__assert_fail@plt+0xf86c>
   20960:	b	204cc <__assert_fail@plt+0xef74>
   20964:	ldr	r3, [sp, #32]
   20968:	str	r3, [sp, #36]	; 0x24
   2096c:	mov	r5, r3
   20970:	b	20354 <__assert_fail@plt+0xedfc>
   20974:	ldr	r3, [sp, #28]
   20978:	ands	r2, r3, #131072	; 0x20000
   2097c:	bne	1fe28 <__assert_fail@plt+0xe8d0>
   20980:	str	r2, [sp, #32]
   20984:	ldr	r2, [sp, #204]	; 0xcc
   20988:	mov	r3, #16
   2098c:	str	r3, [r2]
   20990:	b	1fdf4 <__assert_fail@plt+0xe89c>
   20994:	mov	r3, #0
   20998:	b	20444 <__assert_fail@plt+0xeeec>
   2099c:	ldr	r3, [sp, #76]	; 0x4c
   209a0:	add	r2, sp, #68	; 0x44
   209a4:	ldr	r0, [sl, #64]	; 0x40
   209a8:	mov	r1, r8
   209ac:	stm	sp, {r2, r3}
   209b0:	str	r9, [sp, #8]
   209b4:	ldr	r3, [sp, #44]	; 0x2c
   209b8:	ldr	r2, [sp, #48]	; 0x30
   209bc:	bl	1a90c <__assert_fail@plt+0x93b4>
   209c0:	ldr	r3, [sp, #204]	; 0xcc
   209c4:	cmp	r0, #0
   209c8:	str	r0, [r3]
   209cc:	bne	20a08 <__assert_fail@plt+0xf4b0>
   209d0:	ldrb	r3, [r4, #4]
   209d4:	cmp	r3, #2
   209d8:	beq	20bcc <__assert_fail@plt+0xf674>
   209dc:	cmp	r3, #21
   209e0:	beq	21054 <__assert_fail@plt+0xfafc>
   209e4:	ldr	r3, [sp, #36]	; 0x24
   209e8:	b	20734 <__assert_fail@plt+0xf1dc>
   209ec:	ldr	r1, [sp, #76]	; 0x4c
   209f0:	mov	r0, r8
   209f4:	bl	1a8cc <__assert_fail@plt+0x9374>
   209f8:	ldr	r3, [sp, #204]	; 0xcc
   209fc:	cmp	r0, #0
   20a00:	str	r0, [r3]
   20a04:	beq	209d0 <__assert_fail@plt+0xf478>
   20a08:	mov	r9, r8
   20a0c:	mov	r0, r9
   20a10:	bl	13908 <__assert_fail@plt+0x23b0>
   20a14:	mov	r0, r6
   20a18:	bl	16964 <__assert_fail@plt+0x540c>
   20a1c:	ldr	r3, [sp, #204]	; 0xcc
   20a20:	ldr	r3, [r3]
   20a24:	cmp	r3, #0
   20a28:	bne	1fdec <__assert_fail@plt+0xe894>
   20a2c:	str	r3, [sp, #32]
   20a30:	b	1fe5c <__assert_fail@plt+0xe904>
   20a34:	ldr	r1, [sp, #76]	; 0x4c
   20a38:	mov	r0, r8
   20a3c:	bl	1a8cc <__assert_fail@plt+0x9374>
   20a40:	ldr	r3, [sp, #204]	; 0xcc
   20a44:	cmp	r0, #0
   20a48:	str	r0, [r3]
   20a4c:	beq	209d0 <__assert_fail@plt+0xf478>
   20a50:	b	20a08 <__assert_fail@plt+0xf4b0>
   20a54:	ldr	r3, [r6, #20]
   20a58:	ldr	r2, [sp, #16]
   20a5c:	cmp	r3, r2
   20a60:	beq	20e48 <__assert_fail@plt+0xf8f0>
   20a64:	ldr	r0, [r6]
   20a68:	ldr	r2, [sp, #76]	; 0x4c
   20a6c:	add	r1, r3, #1
   20a70:	str	r1, [r6, #20]
   20a74:	str	r2, [r0, r3, lsl #2]
   20a78:	b	209d0 <__assert_fail@plt+0xf478>
   20a7c:	ldrb	r3, [sp, #76]	; 0x4c
   20a80:	mov	r0, #1
   20a84:	and	r1, r3, #31
   20a88:	asr	r3, r3, #5
   20a8c:	ldr	r2, [r8, r3, lsl #2]
   20a90:	orr	r2, r2, r0, lsl r1
   20a94:	str	r2, [r8, r3, lsl #2]
   20a98:	b	209d0 <__assert_fail@plt+0xf478>
   20a9c:	ldr	r1, [sp, #24]
   20aa0:	ldr	r7, [sp, #20]
   20aa4:	mov	r2, #6
   20aa8:	add	r5, r1, #56	; 0x38
   20aac:	add	r6, r1, #64	; 0x40
   20ab0:	str	r7, [sp]
   20ab4:	mov	r1, r6
   20ab8:	str	r2, [r7]
   20abc:	mov	r0, r5
   20ac0:	mov	r2, r3
   20ac4:	bl	17b4c <__assert_fail@plt+0x65f4>
   20ac8:	mov	r3, #9
   20acc:	str	r3, [r7]
   20ad0:	mov	r4, r0
   20ad4:	b	205dc <__assert_fail@plt+0xf084>
   20ad8:	ldrb	r3, [r6, #16]
   20adc:	ldr	r2, [sp, #28]
   20ae0:	ldr	r4, [sp, #20]
   20ae4:	tst	r2, #256	; 0x100
   20ae8:	orr	r3, r3, #1
   20aec:	strb	r3, [r6, #16]
   20af0:	ldrne	r3, [r9]
   20af4:	ldr	r2, [sp, #28]
   20af8:	orrne	r3, r3, #1024	; 0x400
   20afc:	strne	r3, [r9]
   20b00:	ldr	r3, [sl, #40]	; 0x28
   20b04:	mov	r1, sl
   20b08:	add	r3, r3, r0
   20b0c:	str	r3, [sl, #40]	; 0x28
   20b10:	mov	r0, r4
   20b14:	bl	159a8 <__assert_fail@plt+0x4450>
   20b18:	ldrb	r3, [r4, #4]
   20b1c:	cmp	r3, #2
   20b20:	mov	fp, r0
   20b24:	beq	20d64 <__assert_fail@plt+0xf80c>
   20b28:	mov	r2, #1
   20b2c:	str	r2, [sp, #40]	; 0x28
   20b30:	b	206e4 <__assert_fail@plt+0xf18c>
   20b34:	ldr	r5, [sp, #20]
   20b38:	mov	r2, r3
   20b3c:	mov	r1, sl
   20b40:	mov	r0, r5
   20b44:	mov	r6, r3
   20b48:	bl	1f048 <__assert_fail@plt+0xdaf0>
   20b4c:	ldr	r3, [sp, #204]	; 0xcc
   20b50:	ldr	ip, [sl, #40]	; 0x28
   20b54:	str	r3, [sp, #4]
   20b58:	ldr	r3, [sp, #200]	; 0xc8
   20b5c:	mov	r2, r5
   20b60:	str	r3, [sp]
   20b64:	mov	r1, r4
   20b68:	mov	r3, r6
   20b6c:	add	r0, ip, r0
   20b70:	str	r0, [sl, #40]	; 0x28
   20b74:	mov	r0, sl
   20b78:	bl	1fd0c <__assert_fail@plt+0xe7b4>
   20b7c:	str	r0, [sp, #32]
   20b80:	b	1fdf4 <__assert_fail@plt+0xe89c>
   20b84:	ldr	r2, [sp, #20]
   20b88:	ldr	r0, [sp, #24]
   20b8c:	mov	r3, #0
   20b90:	str	r2, [sp]
   20b94:	add	r1, r0, #64	; 0x40
   20b98:	mov	r2, r3
   20b9c:	add	r0, r0, #56	; 0x38
   20ba0:	bl	17b4c <__assert_fail@plt+0x65f4>
   20ba4:	subs	r3, r0, #0
   20ba8:	str	r3, [sp, #32]
   20bac:	bne	20650 <__assert_fail@plt+0xf0f8>
   20bb0:	b	20924 <__assert_fail@plt+0xf3cc>
   20bb4:	ldr	r3, [sp, #204]	; 0xcc
   20bb8:	mov	r9, r8
   20bbc:	str	r0, [r3]
   20bc0:	b	20a0c <__assert_fail@plt+0xf4b4>
   20bc4:	str	r6, [sp, #32]
   20bc8:	b	1fe5c <__assert_fail@plt+0xe904>
   20bcc:	ldr	r2, [sp, #204]	; 0xcc
   20bd0:	mov	r3, #7
   20bd4:	mov	r9, r8
   20bd8:	str	r3, [r2]
   20bdc:	b	20a0c <__assert_fail@plt+0xf4b4>
   20be0:	ldr	r3, [sl, #40]	; 0x28
   20be4:	mov	r2, r9
   20be8:	add	r3, r3, r0
   20bec:	str	r3, [sl, #40]	; 0x28
   20bf0:	add	r0, sp, #88	; 0x58
   20bf4:	mov	r1, sl
   20bf8:	bl	159a8 <__assert_fail@plt+0x4450>
   20bfc:	ldrb	r2, [sp, #92]	; 0x5c
   20c00:	cmp	r2, #2
   20c04:	mov	r3, r0
   20c08:	beq	20bcc <__assert_fail@plt+0xf674>
   20c0c:	cmp	r2, #21
   20c10:	beq	20e78 <__assert_fail@plt+0xf920>
   20c14:	add	r0, sp, #160	; 0xa0
   20c18:	mov	ip, #1
   20c1c:	mov	r1, #3
   20c20:	str	r9, [sp]
   20c24:	add	r2, sp, #88	; 0x58
   20c28:	str	r1, [r0, #-80]!	; 0xffffffb0
   20c2c:	str	ip, [sp, #4]
   20c30:	mov	r1, sl
   20c34:	add	ip, sp, #128	; 0x80
   20c38:	str	ip, [sp, #84]	; 0x54
   20c3c:	bl	1fa70 <__assert_fail@plt+0xe518>
   20c40:	cmp	r0, #0
   20c44:	bne	20bb4 <__assert_fail@plt+0xf65c>
   20c48:	mov	r2, r9
   20c4c:	mov	r1, sl
   20c50:	mov	r0, r4
   20c54:	bl	159a8 <__assert_fail@plt+0x4450>
   20c58:	ldr	r2, [sp, #72]	; 0x48
   20c5c:	sub	r3, r2, #2
   20c60:	bics	r3, r3, #2
   20c64:	mov	fp, r0
   20c68:	beq	20d1c <__assert_fail@plt+0xf7c4>
   20c6c:	ldr	r3, [sp, #80]	; 0x50
   20c70:	cmp	r3, #2
   20c74:	beq	20d1c <__assert_fail@plt+0xf7c4>
   20c78:	cmp	r3, #4
   20c7c:	beq	20d74 <__assert_fail@plt+0xf81c>
   20c80:	cmp	r2, #3
   20c84:	beq	20dc8 <__assert_fail@plt+0xf870>
   20c88:	cmp	r3, #3
   20c8c:	beq	20e10 <__assert_fail@plt+0xf8b8>
   20c90:	cmp	r2, #0
   20c94:	bne	20dfc <__assert_fail@plt+0xf8a4>
   20c98:	ldrb	r5, [sp, #76]	; 0x4c
   20c9c:	cmp	r3, #0
   20ca0:	bne	2125c <__assert_fail@plt+0xfd04>
   20ca4:	ldrb	r7, [sp, #84]	; 0x54
   20ca8:	cmp	r2, #0
   20cac:	cmpne	r2, #3
   20cb0:	bne	21254 <__assert_fail@plt+0xfcfc>
   20cb4:	ldr	r2, [sp, #24]
   20cb8:	ldr	r2, [r2, #92]	; 0x5c
   20cbc:	cmp	r2, #1
   20cc0:	ble	20e94 <__assert_fail@plt+0xf93c>
   20cc4:	mov	r0, r5
   20cc8:	bl	11468 <btowc@plt>
   20ccc:	ldr	r3, [sp, #80]	; 0x50
   20cd0:	mov	r5, r0
   20cd4:	cmp	r3, #3
   20cd8:	cmpne	r3, #0
   20cdc:	bne	2124c <__assert_fail@plt+0xfcf4>
   20ce0:	ldr	r3, [sp, #24]
   20ce4:	ldr	r3, [r3, #92]	; 0x5c
   20ce8:	cmp	r3, #1
   20cec:	ble	20cfc <__assert_fail@plt+0xf7a4>
   20cf0:	mov	r0, r7
   20cf4:	bl	11468 <btowc@plt>
   20cf8:	mov	r7, r0
   20cfc:	cmn	r5, #1
   20d00:	cmnne	r7, #1
   20d04:	bne	20ea0 <__assert_fail@plt+0xf948>
   20d08:	mov	r9, r8
   20d0c:	mov	r3, #3
   20d10:	ldr	r2, [sp, #204]	; 0xcc
   20d14:	str	r3, [r2]
   20d18:	b	20a0c <__assert_fail@plt+0xf4b4>
   20d1c:	mov	r9, r8
   20d20:	mov	r8, #11
   20d24:	ldr	r3, [sp, #204]	; 0xcc
   20d28:	str	r8, [r3]
   20d2c:	b	20a0c <__assert_fail@plt+0xf4b4>
   20d30:	str	r3, [sp, #32]
   20d34:	ldr	r3, [sp, #204]	; 0xcc
   20d38:	mov	r2, #6
   20d3c:	str	r2, [r3]
   20d40:	b	1fdf4 <__assert_fail@plt+0xe89c>
   20d44:	mov	r0, r9
   20d48:	bl	13908 <__assert_fail@plt+0x23b0>
   20d4c:	mov	r0, r6
   20d50:	bl	13908 <__assert_fail@plt+0x23b0>
   20d54:	ldr	r2, [sp, #204]	; 0xcc
   20d58:	mov	r3, #12
   20d5c:	str	r3, [r2]
   20d60:	b	1fdec <__assert_fail@plt+0xe894>
   20d64:	ldr	r2, [sp, #204]	; 0xcc
   20d68:	mov	r3, #2
   20d6c:	str	r3, [r2]
   20d70:	b	20a0c <__assert_fail@plt+0xf4b4>
   20d74:	mov	r9, r8
   20d78:	mov	r3, #11
   20d7c:	b	20d10 <__assert_fail@plt+0xf7b8>
   20d80:	ldr	r3, [sp, #20]
   20d84:	ldrb	r3, [r3, #4]
   20d88:	cmp	r3, #2
   20d8c:	bne	20300 <__assert_fail@plt+0xeda8>
   20d90:	ldr	r2, [sp, #204]	; 0xcc
   20d94:	mov	r3, #9
   20d98:	str	r3, [r2]
   20d9c:	b	20154 <__assert_fail@plt+0xebfc>
   20da0:	andeq	r6, r1, r8, asr #19
   20da4:	addeq	r0, ip, r0, lsl #16
   20da8:	andeq	r5, r1, r8, lsr #22
   20dac:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   20db0:	muleq	r2, r0, r3
   20db4:	andeq	r5, r2, r4, lsr r9
   20db8:	andeq	r0, r0, pc, lsl #6
   20dbc:	mvnseq	r0, #0
   20dc0:	andeq	r6, r2, r0, lsl #7
   20dc4:	andeq	r6, r2, r8, asr #7
   20dc8:	ldr	r5, [sp, #76]	; 0x4c
   20dcc:	str	r2, [sp, #60]	; 0x3c
   20dd0:	mov	r0, r5
   20dd4:	str	r3, [sp, #56]	; 0x38
   20dd8:	bl	11414 <strlen@plt>
   20ddc:	ldr	r3, [sp, #56]	; 0x38
   20de0:	ldr	r2, [sp, #60]	; 0x3c
   20de4:	cmp	r0, #1
   20de8:	bhi	20e3c <__assert_fail@plt+0xf8e4>
   20dec:	cmp	r3, #3
   20df0:	beq	20e10 <__assert_fail@plt+0xf8b8>
   20df4:	ldrb	r5, [r5]
   20df8:	b	20c9c <__assert_fail@plt+0xf744>
   20dfc:	cmp	r2, #3
   20e00:	movne	r5, #0
   20e04:	bne	20c9c <__assert_fail@plt+0xf744>
   20e08:	ldr	r5, [sp, #76]	; 0x4c
   20e0c:	b	20df4 <__assert_fail@plt+0xf89c>
   20e10:	ldr	r0, [sp, #84]	; 0x54
   20e14:	str	r2, [sp, #60]	; 0x3c
   20e18:	str	r3, [sp, #56]	; 0x38
   20e1c:	bl	11414 <strlen@plt>
   20e20:	ldr	r3, [sp, #56]	; 0x38
   20e24:	ldr	r2, [sp, #60]	; 0x3c
   20e28:	cmp	r0, #1
   20e2c:	bls	20c90 <__assert_fail@plt+0xf738>
   20e30:	mov	r9, r8
   20e34:	mov	r8, #3
   20e38:	b	20d24 <__assert_fail@plt+0xf7cc>
   20e3c:	mov	r9, r8
   20e40:	mov	r8, r2
   20e44:	b	20d24 <__assert_fail@plt+0xf7cc>
   20e48:	ldr	r3, [sp, #16]
   20e4c:	ldr	r0, [r6]
   20e50:	lsl	r3, r3, #1
   20e54:	add	r3, r3, #1
   20e58:	str	r3, [sp, #16]
   20e5c:	lsl	r1, r3, #2
   20e60:	bl	247c0 <__assert_fail@plt+0x13268>
   20e64:	cmp	r0, #0
   20e68:	beq	20f44 <__assert_fail@plt+0xf9ec>
   20e6c:	ldr	r3, [r6, #20]
   20e70:	str	r0, [r6]
   20e74:	b	20a68 <__assert_fail@plt+0xf510>
   20e78:	ldr	r3, [sl, #40]	; 0x28
   20e7c:	mov	r2, #1
   20e80:	sub	r3, r3, fp
   20e84:	str	r3, [sl, #40]	; 0x28
   20e88:	strb	r2, [r4, #4]
   20e8c:	ldr	r3, [sp, #72]	; 0x48
   20e90:	b	207a0 <__assert_fail@plt+0xf248>
   20e94:	cmp	r3, #0
   20e98:	cmpne	r3, #3
   20e9c:	bne	2124c <__assert_fail@plt+0xfcf4>
   20ea0:	ldr	r3, [sp, #52]	; 0x34
   20ea4:	cmp	r7, r5
   20ea8:	movcs	r3, #0
   20eac:	andcc	r3, r3, #1
   20eb0:	cmp	r3, #0
   20eb4:	bne	20d74 <__assert_fail@plt+0xf81c>
   20eb8:	ldr	r3, [sp, #24]
   20ebc:	ldr	r3, [r3, #92]	; 0x5c
   20ec0:	cmp	r3, #1
   20ec4:	ble	20ef4 <__assert_fail@plt+0xf99c>
   20ec8:	ldr	r2, [r6, #32]
   20ecc:	ldr	r3, [sp, #32]
   20ed0:	cmp	r2, r3
   20ed4:	beq	20f50 <__assert_fail@plt+0xf9f8>
   20ed8:	ldr	r3, [r6, #4]
   20edc:	ldr	r0, [r6, #8]
   20ee0:	str	r5, [r3, r2, lsl #2]
   20ee4:	ldr	r3, [r6, #32]
   20ee8:	add	r2, r3, #1
   20eec:	str	r2, [r6, #32]
   20ef0:	str	r7, [r0, r3, lsl #2]
   20ef4:	mov	r3, #0
   20ef8:	mov	ip, #1
   20efc:	cmp	r5, r3
   20f00:	movhi	r2, #0
   20f04:	movls	r2, #1
   20f08:	cmp	r7, r3
   20f0c:	movcc	r2, #0
   20f10:	cmp	r2, #0
   20f14:	asrne	r0, r3, #5
   20f18:	andne	r1, r3, #31
   20f1c:	ldrne	r2, [r8, r0, lsl #2]
   20f20:	add	r3, r3, #1
   20f24:	orrne	r2, r2, ip, lsl r1
   20f28:	strne	r2, [r8, r0, lsl #2]
   20f2c:	cmp	r3, #256	; 0x100
   20f30:	bne	20efc <__assert_fail@plt+0xf9a4>
   20f34:	ldr	r2, [sp, #204]	; 0xcc
   20f38:	mov	r3, #0
   20f3c:	str	r3, [r2]
   20f40:	b	209d0 <__assert_fail@plt+0xf478>
   20f44:	mov	r9, r8
   20f48:	mov	r3, #12
   20f4c:	b	20d10 <__assert_fail@plt+0xf7b8>
   20f50:	ldr	r3, [sp, #32]
   20f54:	ldr	r0, [r6, #4]
   20f58:	lsl	r3, r3, #1
   20f5c:	add	r3, r3, #1
   20f60:	str	r3, [sp, #32]
   20f64:	lsl	r2, r3, #2
   20f68:	mov	r1, r2
   20f6c:	str	r2, [sp, #60]	; 0x3c
   20f70:	bl	247c0 <__assert_fail@plt+0x13268>
   20f74:	ldr	r2, [sp, #60]	; 0x3c
   20f78:	mov	r1, r2
   20f7c:	str	r0, [sp, #56]	; 0x38
   20f80:	ldr	r0, [r6, #8]
   20f84:	bl	247c0 <__assert_fail@plt+0x13268>
   20f88:	ldr	r3, [sp, #56]	; 0x38
   20f8c:	cmp	r0, #0
   20f90:	cmpne	r3, #0
   20f94:	ldrne	r2, [r6, #32]
   20f98:	strne	r3, [r6, #4]
   20f9c:	strne	r0, [r6, #8]
   20fa0:	bne	20ee0 <__assert_fail@plt+0xf988>
   20fa4:	mov	r9, r8
   20fa8:	mov	r8, r0
   20fac:	mov	r0, r3
   20fb0:	bl	13908 <__assert_fail@plt+0x23b0>
   20fb4:	mov	r0, r8
   20fb8:	bl	13908 <__assert_fail@plt+0x23b0>
   20fbc:	mov	r3, #12
   20fc0:	b	20d10 <__assert_fail@plt+0xf7b8>
   20fc4:	mov	r4, #128	; 0x80
   20fc8:	mov	r5, #4
   20fcc:	bl	113fc <__ctype_b_loc@plt>
   20fd0:	sub	r3, r4, #-2147483647	; 0x80000001
   20fd4:	mov	lr, #1
   20fd8:	add	ip, r5, #24
   20fdc:	ldr	r2, [sp, #24]
   20fe0:	add	ip, r2, ip, lsl #2
   20fe4:	ldr	r6, [r0]
   20fe8:	add	r6, r6, r3, lsl lr
   20fec:	mov	r0, r6
   20ff0:	mov	r1, #0
   20ff4:	ldrh	r2, [r0, #2]!
   20ff8:	add	r3, r4, r1
   20ffc:	lsr	r2, r2, #3
   21000:	cmp	r3, #95	; 0x5f
   21004:	movne	r3, r2
   21008:	orreq	r3, r2, #1
   2100c:	tst	r3, #1
   21010:	ldrne	r3, [ip]
   21014:	orrne	r3, r3, lr, lsl r1
   21018:	add	r1, r1, #1
   2101c:	strne	r3, [ip]
   21020:	cmp	r1, #32
   21024:	bne	20ff4 <__assert_fail@plt+0xfa9c>
   21028:	add	r5, r5, #1
   2102c:	cmp	r5, #8
   21030:	add	r4, r4, #32
   21034:	add	r6, r6, #64	; 0x40
   21038:	add	ip, ip, #4
   2103c:	bne	20fec <__assert_fail@plt+0xfa94>
   21040:	ldr	r3, [sp, #20]
   21044:	ldr	r2, [r3]
   21048:	b	20590 <__assert_fail@plt+0xf038>
   2104c:	mov	r5, r4
   21050:	b	20fcc <__assert_fail@plt+0xfa74>
   21054:	ldr	r3, [sl, #40]	; 0x28
   21058:	ldr	r2, [sp, #40]	; 0x28
   2105c:	add	r3, r3, fp
   21060:	cmp	r2, #0
   21064:	mov	r9, r8
   21068:	str	r3, [sl, #40]	; 0x28
   2106c:	bne	21224 <__assert_fail@plt+0xfccc>
   21070:	ldr	r3, [sp, #24]
   21074:	ldr	r0, [r3, #92]	; 0x5c
   21078:	cmp	r0, #1
   2107c:	ble	210ac <__assert_fail@plt+0xfb54>
   21080:	ldr	r3, [sp, #24]
   21084:	sub	r1, r9, #4
   21088:	add	ip, r9, #28
   2108c:	ldr	r2, [r3, #60]	; 0x3c
   21090:	sub	r2, r2, #4
   21094:	ldr	r3, [r1, #4]
   21098:	ldr	lr, [r2, #4]!
   2109c:	and	r3, r3, lr
   210a0:	str	r3, [r1, #4]!
   210a4:	cmp	ip, r1
   210a8:	bne	21094 <__assert_fail@plt+0xfb3c>
   210ac:	ldr	r3, [r6, #20]
   210b0:	cmp	r3, #0
   210b4:	bne	210fc <__assert_fail@plt+0xfba4>
   210b8:	ldr	r3, [r6, #24]
   210bc:	cmp	r3, #0
   210c0:	bne	210fc <__assert_fail@plt+0xfba4>
   210c4:	ldr	r3, [r6, #28]
   210c8:	cmp	r3, #0
   210cc:	bne	210fc <__assert_fail@plt+0xfba4>
   210d0:	ldr	r3, [r6, #32]
   210d4:	cmp	r3, #0
   210d8:	bne	210fc <__assert_fail@plt+0xfba4>
   210dc:	cmp	r0, #1
   210e0:	ble	211d4 <__assert_fail@plt+0xfc7c>
   210e4:	ldr	r3, [r6, #36]	; 0x24
   210e8:	cmp	r3, #0
   210ec:	bne	210fc <__assert_fail@plt+0xfba4>
   210f0:	ldrb	r3, [r6, #16]
   210f4:	tst	r3, #1
   210f8:	beq	211d4 <__assert_fail@plt+0xfc7c>
   210fc:	ldr	r1, [sp, #24]
   21100:	mov	r3, #0
   21104:	add	r4, r1, #56	; 0x38
   21108:	ldrb	r2, [r1, #88]	; 0x58
   2110c:	add	r5, r1, #64	; 0x40
   21110:	mov	ip, #6
   21114:	orr	r2, r2, #2
   21118:	strb	r2, [r1, #88]	; 0x58
   2111c:	add	r2, sp, #96	; 0x60
   21120:	str	r2, [sp]
   21124:	mov	r0, r4
   21128:	mov	r2, r3
   2112c:	mov	r1, r5
   21130:	str	r6, [sp, #96]	; 0x60
   21134:	strb	ip, [sp, #100]	; 0x64
   21138:	bl	17b4c <__assert_fail@plt+0x65f4>
   2113c:	subs	r3, r0, #0
   21140:	str	r3, [sp, #32]
   21144:	beq	20f48 <__assert_fail@plt+0xf9f0>
   21148:	sub	r3, r9, #4
   2114c:	add	r2, r9, #28
   21150:	b	2115c <__assert_fail@plt+0xfc04>
   21154:	cmp	r2, r3
   21158:	beq	21218 <__assert_fail@plt+0xfcc0>
   2115c:	ldr	r1, [r3, #4]!
   21160:	cmp	r1, #0
   21164:	beq	21154 <__assert_fail@plt+0xfbfc>
   21168:	mov	r3, #0
   2116c:	add	r2, sp, #96	; 0x60
   21170:	str	r2, [sp]
   21174:	mov	ip, #3
   21178:	mov	r2, r3
   2117c:	mov	r1, r5
   21180:	mov	r0, r4
   21184:	str	r9, [sp, #96]	; 0x60
   21188:	strb	ip, [sp, #100]	; 0x64
   2118c:	bl	17b4c <__assert_fail@plt+0x65f4>
   21190:	subs	r2, r0, #0
   21194:	beq	20f48 <__assert_fail@plt+0xf9f0>
   21198:	add	ip, sp, #128	; 0x80
   2119c:	mov	lr, #0
   211a0:	ldr	r3, [sp, #32]
   211a4:	mov	r0, r4
   211a8:	mov	r1, r5
   211ac:	str	ip, [sp]
   211b0:	mov	r4, #10
   211b4:	str	lr, [sp, #132]	; 0x84
   211b8:	str	lr, [sp, #128]	; 0x80
   211bc:	strb	r4, [sp, #132]	; 0x84
   211c0:	bl	17b4c <__assert_fail@plt+0x65f4>
   211c4:	subs	r3, r0, #0
   211c8:	str	r3, [sp, #32]
   211cc:	bne	1fe5c <__assert_fail@plt+0xe904>
   211d0:	b	20f48 <__assert_fail@plt+0xf9f0>
   211d4:	mov	r0, r6
   211d8:	bl	16964 <__assert_fail@plt+0x540c>
   211dc:	ldr	r0, [sp, #24]
   211e0:	mov	r3, #0
   211e4:	add	r2, sp, #96	; 0x60
   211e8:	str	r2, [sp]
   211ec:	mov	ip, #3
   211f0:	mov	r2, r3
   211f4:	add	r1, r0, #64	; 0x40
   211f8:	add	r0, r0, #56	; 0x38
   211fc:	str	r9, [sp, #96]	; 0x60
   21200:	strb	ip, [sp, #100]	; 0x64
   21204:	bl	17b4c <__assert_fail@plt+0x65f4>
   21208:	subs	r3, r0, #0
   2120c:	str	r3, [sp, #32]
   21210:	bne	1fe5c <__assert_fail@plt+0xe904>
   21214:	b	20f48 <__assert_fail@plt+0xf9f0>
   21218:	mov	r0, r9
   2121c:	bl	13908 <__assert_fail@plt+0x23b0>
   21220:	b	1fe5c <__assert_fail@plt+0xe904>
   21224:	sub	r3, r8, #4
   21228:	add	r1, r8, #28
   2122c:	ldr	r2, [r3, #4]
   21230:	mvn	r2, r2
   21234:	str	r2, [r3, #4]!
   21238:	cmp	r1, r3
   2123c:	bne	2122c <__assert_fail@plt+0xfcd4>
   21240:	b	21070 <__assert_fail@plt+0xfb18>
   21244:	ldr	r6, [sp, #16]
   21248:	b	20234 <__assert_fail@plt+0xecdc>
   2124c:	ldr	r7, [sp, #84]	; 0x54
   21250:	b	20cfc <__assert_fail@plt+0xf7a4>
   21254:	ldr	r5, [sp, #76]	; 0x4c
   21258:	b	20cd4 <__assert_fail@plt+0xf77c>
   2125c:	cmp	r3, #3
   21260:	movne	r7, #0
   21264:	ldreq	r1, [sp, #84]	; 0x54
   21268:	ldrbeq	r7, [r1]
   2126c:	b	20ca8 <__assert_fail@plt+0xf750>
   21270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21274:	sub	sp, sp, #28
   21278:	mov	sl, r3
   2127c:	ldr	r5, [sp, #68]	; 0x44
   21280:	ldr	r6, [sp, #64]	; 0x40
   21284:	str	r5, [sp, #4]
   21288:	str	r6, [sp]
   2128c:	mov	r8, r1
   21290:	ldr	fp, [r1]
   21294:	mov	r9, r0
   21298:	mov	r7, r2
   2129c:	bl	1fd0c <__assert_fail@plt+0xe7b4>
   212a0:	ldr	r3, [r5]
   212a4:	adds	r3, r3, #0
   212a8:	movne	r3, #1
   212ac:	cmp	r0, #0
   212b0:	movne	r3, #0
   212b4:	cmp	r3, #0
   212b8:	bne	213a0 <__assert_fail@plt+0xfe48>
   212bc:	add	r3, fp, #64	; 0x40
   212c0:	mov	r4, r0
   212c4:	str	r3, [sp, #8]
   212c8:	add	r3, fp, #56	; 0x38
   212cc:	str	r3, [sp, #12]
   212d0:	ldrb	lr, [r7, #4]
   212d4:	clz	ip, r6
   212d8:	mov	r3, sl
   212dc:	and	fp, lr, #247	; 0xf7
   212e0:	cmp	fp, #2
   212e4:	mov	r2, r7
   212e8:	mov	r1, r8
   212ec:	mov	r0, r9
   212f0:	lsr	ip, ip, #5
   212f4:	beq	213a4 <__assert_fail@plt+0xfe4c>
   212f8:	cmp	lr, #9
   212fc:	orrne	ip, ip, #1
   21300:	cmp	ip, #0
   21304:	beq	213a4 <__assert_fail@plt+0xfe4c>
   21308:	str	r5, [sp, #4]
   2130c:	str	r6, [sp]
   21310:	bl	1fd0c <__assert_fail@plt+0xe7b4>
   21314:	ldr	ip, [r5]
   21318:	adds	ip, ip, #0
   2131c:	movne	ip, #1
   21320:	cmp	r0, #0
   21324:	movne	ip, #0
   21328:	cmp	ip, #0
   2132c:	mov	fp, r0
   21330:	bne	21388 <__assert_fail@plt+0xfe30>
   21334:	cmp	r4, #0
   21338:	cmpne	r0, #0
   2133c:	bne	2134c <__assert_fail@plt+0xfdf4>
   21340:	cmp	r4, #0
   21344:	moveq	r4, r0
   21348:	b	212d0 <__assert_fail@plt+0xfd78>
   2134c:	add	r3, sp, #16
   21350:	str	ip, [sp, #20]
   21354:	str	r3, [sp]
   21358:	str	ip, [sp, #16]
   2135c:	mov	r3, r0
   21360:	mov	ip, #16
   21364:	mov	r2, r4
   21368:	ldr	r1, [sp, #8]
   2136c:	ldr	r0, [sp, #12]
   21370:	strb	ip, [sp, #20]
   21374:	bl	17b4c <__assert_fail@plt+0x65f4>
   21378:	cmp	r0, #0
   2137c:	beq	213b0 <__assert_fail@plt+0xfe58>
   21380:	mov	r4, r0
   21384:	b	212d0 <__assert_fail@plt+0xfd78>
   21388:	cmp	r4, #0
   2138c:	beq	213a0 <__assert_fail@plt+0xfe48>
   21390:	mov	r0, r4
   21394:	mov	r2, #0
   21398:	ldr	r1, [pc, #88]	; 213f8 <__assert_fail@plt+0xfea0>
   2139c:	bl	15ddc <__assert_fail@plt+0x4884>
   213a0:	mov	r4, #0
   213a4:	mov	r0, r4
   213a8:	add	sp, sp, #28
   213ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213b0:	mov	r3, r0
   213b4:	mov	r2, r3
   213b8:	mov	r0, fp
   213bc:	ldr	r1, [pc, #52]	; 213f8 <__assert_fail@plt+0xfea0>
   213c0:	str	r3, [sp, #8]
   213c4:	bl	15ddc <__assert_fail@plt+0x4884>
   213c8:	ldr	r3, [sp, #8]
   213cc:	mov	r0, r4
   213d0:	mov	r2, r3
   213d4:	ldr	r1, [pc, #28]	; 213f8 <__assert_fail@plt+0xfea0>
   213d8:	bl	15ddc <__assert_fail@plt+0x4884>
   213dc:	ldr	r3, [sp, #8]
   213e0:	mov	r2, #12
   213e4:	mov	r4, r3
   213e8:	mov	r0, r4
   213ec:	str	r2, [r5]
   213f0:	add	sp, sp, #28
   213f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213f8:	andeq	r6, r1, r8, asr #19
   213fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21400:	sub	sp, sp, #44	; 0x2c
   21404:	ldr	r8, [r1]
   21408:	ldr	fp, [sp, #84]	; 0x54
   2140c:	str	r1, [sp, #16]
   21410:	ldr	ip, [r8, #84]	; 0x54
   21414:	str	fp, [sp, #4]
   21418:	str	ip, [sp, #28]
   2141c:	ldr	ip, [sp, #80]	; 0x50
   21420:	mov	r5, r0
   21424:	str	ip, [sp]
   21428:	mov	r4, r2
   2142c:	str	r3, [sp, #8]
   21430:	bl	21270 <__assert_fail@plt+0xfd18>
   21434:	ldr	r6, [fp]
   21438:	adds	r6, r6, #0
   2143c:	movne	r6, #1
   21440:	cmp	r0, #0
   21444:	movne	r6, #0
   21448:	cmp	r6, #0
   2144c:	bne	2157c <__assert_fail@plt+0x10024>
   21450:	ldr	r3, [sp, #8]
   21454:	mov	r9, r0
   21458:	orr	r3, r3, #8388608	; 0x800000
   2145c:	str	r3, [sp, #12]
   21460:	add	r3, r8, #64	; 0x40
   21464:	str	r3, [sp, #20]
   21468:	add	r3, r8, #56	; 0x38
   2146c:	add	r7, sp, #32
   21470:	str	r3, [sp, #24]
   21474:	str	fp, [sp, #84]	; 0x54
   21478:	b	21508 <__assert_fail@plt+0xffb0>
   2147c:	cmp	sl, #9
   21480:	orrne	ip, ip, #1
   21484:	cmp	ip, #0
   21488:	beq	2155c <__assert_fail@plt+0x10004>
   2148c:	ldr	ip, [sp, #28]
   21490:	ldr	sl, [r8, #84]	; 0x54
   21494:	str	ip, [r8, #84]	; 0x54
   21498:	ldr	ip, [sp, #84]	; 0x54
   2149c:	str	ip, [sp, #4]
   214a0:	ldr	ip, [sp, #80]	; 0x50
   214a4:	str	ip, [sp]
   214a8:	bl	21270 <__assert_fail@plt+0xfd18>
   214ac:	ldr	r3, [sp, #84]	; 0x54
   214b0:	ldr	r3, [r3]
   214b4:	adds	r3, r3, #0
   214b8:	movne	r3, #1
   214bc:	cmp	r0, #0
   214c0:	movne	r3, #0
   214c4:	cmp	r3, #0
   214c8:	mov	r3, r0
   214cc:	bne	21564 <__assert_fail@plt+0x1000c>
   214d0:	ldr	r2, [r8, #84]	; 0x54
   214d4:	orr	sl, r2, sl
   214d8:	str	sl, [r8, #84]	; 0x54
   214dc:	str	r7, [sp]
   214e0:	mov	r2, r9
   214e4:	str	r6, [r7, #4]
   214e8:	mov	ip, #10
   214ec:	ldr	r1, [sp, #20]
   214f0:	ldr	r0, [sp, #24]
   214f4:	str	r6, [r7]
   214f8:	strb	ip, [sp, #36]	; 0x24
   214fc:	bl	17b4c <__assert_fail@plt+0x65f4>
   21500:	subs	r9, r0, #0
   21504:	beq	2158c <__assert_fail@plt+0x10034>
   21508:	ldrb	r3, [r4, #4]
   2150c:	ldr	r2, [sp, #12]
   21510:	mov	r1, r5
   21514:	cmp	r3, #10
   21518:	mov	r0, r4
   2151c:	bne	21580 <__assert_fail@plt+0x10028>
   21520:	bl	1f048 <__assert_fail@plt+0xdaf0>
   21524:	ldrb	sl, [r4, #4]
   21528:	ldr	lr, [r5, #40]	; 0x28
   2152c:	ldr	ip, [sp, #80]	; 0x50
   21530:	and	fp, sl, #247	; 0xf7
   21534:	cmp	fp, #2
   21538:	clz	ip, ip
   2153c:	ldr	r3, [sp, #8]
   21540:	mov	r2, r4
   21544:	ldr	r1, [sp, #16]
   21548:	lsr	ip, ip, #5
   2154c:	add	lr, lr, r0
   21550:	str	lr, [r5, #40]	; 0x28
   21554:	mov	r0, r5
   21558:	bne	2147c <__assert_fail@plt+0xff24>
   2155c:	mov	r3, r6
   21560:	b	214dc <__assert_fail@plt+0xff84>
   21564:	cmp	r9, #0
   21568:	beq	2157c <__assert_fail@plt+0x10024>
   2156c:	mov	r0, r9
   21570:	mov	r2, #0
   21574:	ldr	r1, [pc, #40]	; 215a4 <__assert_fail@plt+0x1004c>
   21578:	bl	15ddc <__assert_fail@plt+0x4884>
   2157c:	mov	r9, #0
   21580:	mov	r0, r9
   21584:	add	sp, sp, #44	; 0x2c
   21588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2158c:	ldr	fp, [sp, #84]	; 0x54
   21590:	mov	r3, #12
   21594:	mov	r0, r9
   21598:	str	r3, [fp]
   2159c:	add	sp, sp, #44	; 0x2c
   215a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   215a4:	andeq	r6, r1, r8, asr #19
   215a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215ac:	mov	r8, r0
   215b0:	ldrb	r0, [r0, #28]
   215b4:	ldr	ip, [r8, #4]
   215b8:	sub	sp, sp, #148	; 0x94
   215bc:	mov	r7, r3
   215c0:	and	r0, r0, #144	; 0x90
   215c4:	mov	r3, #0
   215c8:	cmp	ip, #159	; 0x9f
   215cc:	str	r7, [r8, #12]
   215d0:	str	r1, [sp, #12]
   215d4:	mov	r5, r2
   215d8:	strb	r0, [r8, #28]
   215dc:	str	r3, [r8, #8]
   215e0:	str	r3, [sp, #36]	; 0x24
   215e4:	str	r3, [r8, #24]
   215e8:	ldr	r4, [r8]
   215ec:	bls	221d8 <__assert_fail@plt+0x10c80>
   215f0:	mov	r2, #160	; 0xa0
   215f4:	str	r2, [r8, #8]
   215f8:	mov	r1, #0
   215fc:	mov	r0, r4
   21600:	bl	1145c <memset@plt>
   21604:	ldr	r2, [pc, #3696]	; 2247c <__assert_fail@plt+0x10f24>
   21608:	mov	r3, #31
   2160c:	cmp	r5, r2
   21610:	str	r3, [r4, #64]	; 0x40
   21614:	bhi	21c14 <__assert_fail@plt+0x106bc>
   21618:	add	r3, r5, #1
   2161c:	str	r3, [r4, #4]
   21620:	lsl	r0, r3, #3
   21624:	str	r3, [sp, #20]
   21628:	bl	24794 <__assert_fail@plt+0x1323c>
   2162c:	cmp	r5, #0
   21630:	str	r0, [r4]
   21634:	beq	22274 <__assert_fail@plt+0x10d1c>
   21638:	mov	r1, #1
   2163c:	lsl	r1, r1, #1
   21640:	cmp	r5, r1
   21644:	bcs	2163c <__assert_fail@plt+0x100e4>
   21648:	sub	sl, r1, #1
   2164c:	mov	r0, #12
   21650:	bl	2474c <__assert_fail@plt+0x131f4>
   21654:	str	sl, [r4, #68]	; 0x44
   21658:	str	r0, [r4, #32]
   2165c:	bl	11354 <__ctype_get_mb_cur_max@plt>
   21660:	str	r0, [r4, #92]	; 0x5c
   21664:	mov	r0, #14
   21668:	bl	114e0 <nl_langinfo@plt>
   2166c:	ldrb	r3, [r0]
   21670:	and	r3, r3, #223	; 0xdf
   21674:	cmp	r3, #85	; 0x55
   21678:	bne	2169c <__assert_fail@plt+0x10144>
   2167c:	ldrb	r3, [r0, #1]
   21680:	and	r3, r3, #223	; 0xdf
   21684:	cmp	r3, #84	; 0x54
   21688:	bne	2169c <__assert_fail@plt+0x10144>
   2168c:	ldrb	r3, [r0, #2]
   21690:	and	r3, r3, #223	; 0xdf
   21694:	cmp	r3, #70	; 0x46
   21698:	beq	21f04 <__assert_fail@plt+0x109ac>
   2169c:	ldrb	r3, [r4, #88]	; 0x58
   216a0:	ldr	r2, [r4, #92]	; 0x5c
   216a4:	bic	r3, r3, #8
   216a8:	cmp	r2, #1
   216ac:	strb	r3, [r4, #88]	; 0x58
   216b0:	ble	216c8 <__assert_fail@plt+0x10170>
   216b4:	uxtb	r3, r3
   216b8:	ands	r6, r3, #4
   216bc:	beq	21e50 <__assert_fail@plt+0x108f8>
   216c0:	ldr	r3, [pc, #3512]	; 22480 <__assert_fail@plt+0x10f28>
   216c4:	str	r3, [r4, #60]	; 0x3c
   216c8:	ldr	r3, [r4]
   216cc:	cmp	r3, #0
   216d0:	beq	21c14 <__assert_fail@plt+0x106bc>
   216d4:	ldr	r3, [r4, #32]
   216d8:	cmp	r3, #0
   216dc:	beq	21c14 <__assert_fail@plt+0x106bc>
   216e0:	ldr	r2, [pc, #3484]	; 22484 <__assert_fail@plt+0x10f2c>
   216e4:	mov	r3, #0
   216e8:	ldr	r1, [pc, #3480]	; 22488 <__assert_fail@plt+0x10f30>
   216ec:	cmp	r2, r3
   216f0:	str	r3, [sp, #36]	; 0x24
   216f4:	mov	r3, #1
   216f8:	moveq	r3, r2
   216fc:	cmp	r1, #0
   21700:	mov	r2, #1
   21704:	moveq	r2, r1
   21708:	orr	r3, r3, r2
   2170c:	ands	r3, r3, #255	; 0xff
   21710:	str	r3, [sp, #24]
   21714:	beq	21738 <__assert_fail@plt+0x101e0>
   21718:	mov	r1, #0
   2171c:	add	r0, r4, #136	; 0x88
   21720:	bl	11270 <pthread_mutex_init@plt>
   21724:	cmp	r0, #0
   21728:	bne	21c14 <__assert_fail@plt+0x106bc>
   2172c:	ldr	r3, [sp, #36]	; 0x24
   21730:	cmp	r3, #0
   21734:	bne	21c1c <__assert_fail@plt+0x106c4>
   21738:	ands	r3, r7, #4194304	; 0x400000
   2173c:	mov	r1, #0
   21740:	mov	r2, #84	; 0x54
   21744:	add	r0, sp, #60	; 0x3c
   21748:	moveq	fp, r1
   2174c:	movne	fp, #1
   21750:	ldr	sl, [r8, #20]
   21754:	str	r3, [sp, #16]
   21758:	bl	1145c <memset@plt>
   2175c:	ldrb	r2, [r4, #88]	; 0x58
   21760:	ldr	ip, [sp, #12]
   21764:	ldr	r1, [r4, #92]	; 0x5c
   21768:	cmp	sl, #0
   2176c:	moveq	r3, fp
   21770:	orrne	r3, fp, #1
   21774:	lsr	r0, r2, #2
   21778:	lsr	r2, r2, #3
   2177c:	and	r0, r0, #1
   21780:	and	r2, r2, #1
   21784:	cmp	r5, #0
   21788:	str	ip, [sp, #60]	; 0x3c
   2178c:	strb	fp, [sp, #132]	; 0x84
   21790:	strb	r3, [sp, #135]	; 0x87
   21794:	str	sl, [sp, #124]	; 0x7c
   21798:	str	r5, [sp, #108]	; 0x6c
   2179c:	str	r5, [sp, #104]	; 0x68
   217a0:	str	r5, [sp, #116]	; 0x74
   217a4:	str	r5, [sp, #112]	; 0x70
   217a8:	mov	ip, r3
   217ac:	strb	r0, [sp, #133]	; 0x85
   217b0:	strb	r2, [sp, #134]	; 0x86
   217b4:	str	r1, [sp, #140]	; 0x8c
   217b8:	beq	217e0 <__assert_fail@plt+0x10288>
   217bc:	ldr	r1, [sp, #20]
   217c0:	add	r0, sp, #60	; 0x3c
   217c4:	str	r3, [sp, #28]
   217c8:	bl	15ec4 <__assert_fail@plt+0x496c>
   217cc:	cmp	r0, #0
   217d0:	bne	2184c <__assert_fail@plt+0x102f4>
   217d4:	ldrb	ip, [sp, #135]	; 0x87
   217d8:	ldr	r1, [r4, #92]	; 0x5c
   217dc:	ldr	r3, [sp, #28]
   217e0:	cmp	ip, #0
   217e4:	ldrne	r6, [sp, #64]	; 0x40
   217e8:	ldreq	r6, [sp, #12]
   217ec:	ands	r2, r7, #4194304	; 0x400000
   217f0:	cmp	r2, #0
   217f4:	str	r6, [sp, #64]	; 0x40
   217f8:	beq	218cc <__assert_fail@plt+0x10374>
   217fc:	cmp	r1, #1
   21800:	ble	222f0 <__assert_fail@plt+0x10d98>
   21804:	add	r0, sp, #60	; 0x3c
   21808:	bl	1625c <__assert_fail@plt+0x4d04>
   2180c:	cmp	r0, #0
   21810:	bne	2184c <__assert_fail@plt+0x102f4>
   21814:	ldr	r3, [sp, #92]	; 0x5c
   21818:	cmp	r5, r3
   2181c:	ble	21900 <__assert_fail@plt+0x103a8>
   21820:	ldr	r3, [sp, #88]	; 0x58
   21824:	ldr	r2, [r4, #92]	; 0x5c
   21828:	ldr	r1, [sp, #96]	; 0x60
   2182c:	add	r3, r3, r2
   21830:	cmp	r1, r3
   21834:	bgt	21900 <__assert_fail@plt+0x103a8>
   21838:	lsl	r1, r1, #1
   2183c:	add	r0, sp, #60	; 0x3c
   21840:	bl	15ec4 <__assert_fail@plt+0x496c>
   21844:	cmp	r0, #0
   21848:	beq	21804 <__assert_fail@plt+0x102ac>
   2184c:	str	r0, [sp, #36]	; 0x24
   21850:	ldr	r6, [r8]
   21854:	ldr	r0, [r6, #56]	; 0x38
   21858:	cmp	r0, #0
   2185c:	beq	21870 <__assert_fail@plt+0x10318>
   21860:	ldr	r5, [r0]
   21864:	bl	13908 <__assert_fail@plt+0x23b0>
   21868:	subs	r0, r5, #0
   2186c:	bne	21860 <__assert_fail@plt+0x10308>
   21870:	mov	r5, #0
   21874:	mov	r3, #31
   21878:	str	r3, [r6, #64]	; 0x40
   2187c:	ldr	r0, [r6, #16]
   21880:	str	r5, [r6, #56]	; 0x38
   21884:	str	r5, [r6, #52]	; 0x34
   21888:	bl	13908 <__assert_fail@plt+0x23b0>
   2188c:	str	r5, [r6, #16]
   21890:	add	r0, sp, #60	; 0x3c
   21894:	bl	16c7c <__assert_fail@plt+0x5724>
   21898:	ldr	r3, [sp, #24]
   2189c:	cmp	r3, r5
   218a0:	beq	218ac <__assert_fail@plt+0x10354>
   218a4:	add	r0, r4, #136	; 0x88
   218a8:	bl	11210 <pthread_mutex_destroy@plt>
   218ac:	mov	r0, r4
   218b0:	bl	16cac <__assert_fail@plt+0x5754>
   218b4:	ldr	r0, [sp, #36]	; 0x24
   218b8:	mov	r3, #0
   218bc:	str	r3, [r8]
   218c0:	str	r3, [r8, #4]
   218c4:	add	sp, sp, #148	; 0x94
   218c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   218cc:	cmp	r1, #1
   218d0:	bgt	21fa8 <__assert_fail@plt+0x10a50>
   218d4:	cmp	r3, #0
   218d8:	beq	222e8 <__assert_fail@plt+0x10d90>
   218dc:	ldr	ip, [sp, #96]	; 0x60
   218e0:	ldr	r2, [sp, #108]	; 0x6c
   218e4:	ldr	r3, [sp, #88]	; 0x58
   218e8:	cmp	ip, r2
   218ec:	movge	ip, r2
   218f0:	cmp	ip, r3
   218f4:	bgt	21b8c <__assert_fail@plt+0x10634>
   218f8:	str	r3, [sp, #88]	; 0x58
   218fc:	str	r3, [sp, #92]	; 0x5c
   21900:	ldr	r5, [r8]
   21904:	mov	r6, #0
   21908:	orr	r2, r7, #8388608	; 0x800000
   2190c:	str	r6, [r8, #24]
   21910:	add	r1, sp, #60	; 0x3c
   21914:	str	r7, [r5, #128]	; 0x80
   21918:	add	r0, sp, #40	; 0x28
   2191c:	str	r6, [sp, #36]	; 0x24
   21920:	bl	1f048 <__assert_fail@plt+0xdaf0>
   21924:	ldr	ip, [sp, #100]	; 0x64
   21928:	add	r2, sp, #36	; 0x24
   2192c:	mov	r3, r7
   21930:	str	r2, [sp, #4]
   21934:	str	r6, [sp]
   21938:	add	r2, sp, #40	; 0x28
   2193c:	mov	r1, r8
   21940:	add	ip, ip, r0
   21944:	add	r0, sp, #60	; 0x3c
   21948:	str	ip, [sp, #100]	; 0x64
   2194c:	bl	213fc <__assert_fail@plt+0xfea4>
   21950:	ldr	r3, [sp, #36]	; 0x24
   21954:	cmp	r3, r6
   21958:	mov	r7, r0
   2195c:	bne	22280 <__assert_fail@plt+0x10d28>
   21960:	add	fp, sp, #48	; 0x30
   21964:	add	r9, r5, #56	; 0x38
   21968:	add	r5, r5, #64	; 0x40
   2196c:	str	fp, [sp]
   21970:	mov	ip, #2
   21974:	str	r3, [fp, #4]
   21978:	mov	r1, r5
   2197c:	mov	r0, r9
   21980:	mov	r2, r3
   21984:	str	r3, [sp, #48]	; 0x30
   21988:	strb	ip, [sp, #52]	; 0x34
   2198c:	bl	17b4c <__assert_fail@plt+0x65f4>
   21990:	cmp	r7, #0
   21994:	mov	r6, r0
   21998:	beq	219c8 <__assert_fail@plt+0x10470>
   2199c:	mov	r3, #0
   219a0:	str	fp, [sp]
   219a4:	mov	ip, #16
   219a8:	str	r3, [fp, #4]
   219ac:	str	r3, [sp, #48]	; 0x30
   219b0:	mov	r2, r7
   219b4:	mov	r1, r5
   219b8:	mov	r0, r9
   219bc:	mov	r3, r6
   219c0:	strb	ip, [sp, #52]	; 0x34
   219c4:	bl	17b4c <__assert_fail@plt+0x65f4>
   219c8:	cmp	r0, #0
   219cc:	cmpne	r6, #0
   219d0:	moveq	r3, #1
   219d4:	movne	r3, #0
   219d8:	str	r3, [sp, #12]
   219dc:	moveq	r3, #12
   219e0:	streq	r3, [sp, #36]	; 0x24
   219e4:	beq	221fc <__assert_fail@plt+0x10ca4>
   219e8:	ldr	r6, [r8]
   219ec:	str	r0, [r4, #52]	; 0x34
   219f0:	ldr	r0, [r6, #4]
   219f4:	lsl	r0, r0, #2
   219f8:	bl	24794 <__assert_fail@plt+0x1323c>
   219fc:	ldr	r3, [r6, #4]
   21a00:	str	r0, [r6, #12]
   21a04:	lsl	r0, r3, #2
   21a08:	bl	24794 <__assert_fail@plt+0x1323c>
   21a0c:	ldr	r3, [r6, #4]
   21a10:	add	r3, r3, r3, lsl #1
   21a14:	str	r0, [r6, #16]
   21a18:	lsl	r0, r3, #2
   21a1c:	bl	24794 <__assert_fail@plt+0x1323c>
   21a20:	ldr	r3, [r6, #4]
   21a24:	add	r3, r3, r3, lsl #1
   21a28:	str	r0, [r6, #20]
   21a2c:	lsl	r0, r3, #2
   21a30:	bl	24794 <__assert_fail@plt+0x1323c>
   21a34:	ldr	r3, [r6, #12]
   21a38:	cmp	r3, #0
   21a3c:	str	r0, [r6, #24]
   21a40:	beq	21d38 <__assert_fail@plt+0x107e0>
   21a44:	ldr	r3, [r6, #16]
   21a48:	cmp	r3, #0
   21a4c:	beq	21d38 <__assert_fail@plt+0x107e0>
   21a50:	ldr	r3, [r6, #20]
   21a54:	cmp	r3, #0
   21a58:	beq	221cc <__assert_fail@plt+0x10c74>
   21a5c:	cmp	r0, #0
   21a60:	beq	21d38 <__assert_fail@plt+0x107e0>
   21a64:	ldr	r0, [r8, #24]
   21a68:	lsl	r0, r0, #2
   21a6c:	bl	24794 <__assert_fail@plt+0x1323c>
   21a70:	cmp	r0, #0
   21a74:	str	r0, [r6, #132]	; 0x84
   21a78:	beq	21aec <__assert_fail@plt+0x10594>
   21a7c:	ldr	r1, [r8, #24]
   21a80:	cmp	r1, #0
   21a84:	subne	r2, r0, #4
   21a88:	ldrne	r3, [sp, #12]
   21a8c:	beq	21aa0 <__assert_fail@plt+0x10548>
   21a90:	str	r3, [r2, #4]!
   21a94:	add	r3, r3, #1
   21a98:	cmp	r3, r1
   21a9c:	bne	21a90 <__assert_fail@plt+0x10538>
   21aa0:	ldr	r1, [pc, #2532]	; 2248c <__assert_fail@plt+0x10f34>
   21aa4:	mov	r2, r6
   21aa8:	ldr	r0, [r6, #52]	; 0x34
   21aac:	bl	15e50 <__assert_fail@plt+0x48f8>
   21ab0:	ldr	r1, [r8, #24]
   21ab4:	cmp	r1, #0
   21ab8:	beq	222d4 <__assert_fail@plt+0x10d7c>
   21abc:	ldr	r0, [r6, #132]	; 0x84
   21ac0:	ldr	r3, [r0]
   21ac4:	cmp	r3, #0
   21ac8:	beq	21adc <__assert_fail@plt+0x10584>
   21acc:	b	21aec <__assert_fail@plt+0x10594>
   21ad0:	ldr	r2, [r0, r3, lsl #2]
   21ad4:	cmp	r2, r3
   21ad8:	bne	21aec <__assert_fail@plt+0x10594>
   21adc:	add	r3, r3, #1
   21ae0:	cmp	r3, r1
   21ae4:	bcc	21ad0 <__assert_fail@plt+0x10578>
   21ae8:	beq	222d8 <__assert_fail@plt+0x10d80>
   21aec:	mov	r2, r8
   21af0:	ldr	r1, [pc, #2456]	; 22490 <__assert_fail@plt+0x10f38>
   21af4:	ldr	r0, [r6, #52]	; 0x34
   21af8:	bl	15ddc <__assert_fail@plt+0x4884>
   21afc:	subs	r3, r0, #0
   21b00:	bne	21c0c <__assert_fail@plt+0x106b4>
   21b04:	mov	r2, r6
   21b08:	ldr	r1, [pc, #2436]	; 22494 <__assert_fail@plt+0x10f3c>
   21b0c:	ldr	r0, [r6, #52]	; 0x34
   21b10:	bl	15ddc <__assert_fail@plt+0x4884>
   21b14:	subs	r3, r0, #0
   21b18:	bne	21c0c <__assert_fail@plt+0x106b4>
   21b1c:	mov	r2, r6
   21b20:	ldr	r1, [pc, #2416]	; 22498 <__assert_fail@plt+0x10f40>
   21b24:	ldr	r0, [r6, #52]	; 0x34
   21b28:	str	r3, [sp, #20]
   21b2c:	bl	15e50 <__assert_fail@plt+0x48f8>
   21b30:	ldr	r7, [r6, #52]	; 0x34
   21b34:	ldrb	r3, [r7, #24]
   21b38:	ldr	r2, [r7, #28]
   21b3c:	sub	r3, r3, #2
   21b40:	cmp	r3, #14
   21b44:	ldrls	pc, [pc, r3, lsl #2]
   21b48:	b	21f34 <__assert_fail@plt+0x109dc>
   21b4c:	andeq	r1, r2, r8, asr #27
   21b50:	andeq	r1, r2, r4, lsr pc
   21b54:			; <UNDEFINED> instruction: 0x00021bb8
   21b58:	andeq	r1, r2, r4, lsr pc
   21b5c:	andeq	r1, r2, r4, lsr pc
   21b60:	andeq	r1, r2, r4, lsr pc
   21b64:	andeq	r1, r2, r8, asr #29
   21b68:	andeq	r1, r2, r8, asr #29
   21b6c:	andeq	r1, r2, r4, asr #26
   21b70:	andeq	r1, r2, r4, asr #26
   21b74:	andeq	r1, r2, r8, asr #29
   21b78:	andeq	r1, r2, r4, lsr pc
   21b7c:	andeq	r1, r2, r4, lsr pc
   21b80:	andeq	r1, r2, r4, lsr pc
   21b84:	andeq	r1, r2, r8, asr #27
   21b88:	ldr	r6, [sp, #64]	; 0x40
   21b8c:	ldr	r2, [sp, #60]	; 0x3c
   21b90:	ldr	r0, [sp, #84]	; 0x54
   21b94:	add	r2, r2, r3
   21b98:	ldr	r1, [sp, #124]	; 0x7c
   21b9c:	ldrb	r2, [r2, r0]
   21ba0:	ldrb	r2, [r1, r2]
   21ba4:	strb	r2, [r6, r3]
   21ba8:	add	r3, r3, #1
   21bac:	cmp	ip, r3
   21bb0:	bne	21b88 <__assert_fail@plt+0x10630>
   21bb4:	b	218f8 <__assert_fail@plt+0x103a0>
   21bb8:	ldr	r1, [r7, #16]
   21bbc:	ldr	r3, [r6, #12]
   21bc0:	ldr	r5, [r1, #28]
   21bc4:	str	r5, [r3, r2, lsl #2]
   21bc8:	ldrb	r3, [r7, #24]
   21bcc:	cmp	r3, #4
   21bd0:	bne	21dc8 <__assert_fail@plt+0x10870>
   21bd4:	ldr	r3, [r6, #20]
   21bd8:	add	r2, r2, r2, lsl #1
   21bdc:	mov	r1, #1
   21be0:	add	sl, r3, r2, lsl #2
   21be4:	str	r1, [r3, r2, lsl #2]
   21be8:	mov	r0, #4
   21bec:	str	r1, [sl, #4]
   21bf0:	bl	24794 <__assert_fail@plt+0x1323c>
   21bf4:	cmp	r0, #0
   21bf8:	str	r0, [sl, #8]
   21bfc:	bne	21efc <__assert_fail@plt+0x109a4>
   21c00:	mov	r3, #12
   21c04:	str	r0, [sl, #4]
   21c08:	str	r0, [sl]
   21c0c:	str	r3, [sp, #36]	; 0x24
   21c10:	b	21850 <__assert_fail@plt+0x102f8>
   21c14:	mov	r3, #12
   21c18:	str	r3, [sp, #36]	; 0x24
   21c1c:	mov	r0, r4
   21c20:	bl	16cac <__assert_fail@plt+0x5754>
   21c24:	mov	r3, #0
   21c28:	ldr	r0, [sp, #36]	; 0x24
   21c2c:	str	r3, [r8]
   21c30:	str	r3, [r8, #4]
   21c34:	add	sp, sp, #148	; 0x94
   21c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c3c:	ldrb	r3, [r8, #28]
   21c40:	tst	r3, #16
   21c44:	bne	21c54 <__assert_fail@plt+0x106fc>
   21c48:	ldr	r3, [r8, #24]
   21c4c:	cmp	r3, #0
   21c50:	bne	222c4 <__assert_fail@plt+0x10d6c>
   21c54:	ldr	r3, [r6, #76]	; 0x4c
   21c58:	cmp	r3, #0
   21c5c:	beq	21fcc <__assert_fail@plt+0x10a74>
   21c60:	add	r0, r0, r0, lsl #1
   21c64:	lsl	r0, r0, #2
   21c68:	bl	24794 <__assert_fail@plt+0x1323c>
   21c6c:	cmp	r0, #0
   21c70:	str	r0, [r6, #28]
   21c74:	beq	21d38 <__assert_fail@plt+0x107e0>
   21c78:	ldr	r3, [r6, #8]
   21c7c:	cmp	r3, #0
   21c80:	beq	21fcc <__assert_fail@plt+0x10a74>
   21c84:	mov	r3, #0
   21c88:	mov	r2, r0
   21c8c:	mov	r1, r3
   21c90:	mov	r0, r3
   21c94:	b	21c9c <__assert_fail@plt+0x10744>
   21c98:	ldr	r2, [r6, #28]
   21c9c:	add	ip, r2, r3
   21ca0:	str	r1, [r2, r3]
   21ca4:	str	r1, [ip, #4]
   21ca8:	str	r1, [ip, #8]
   21cac:	ldr	r2, [r6, #8]
   21cb0:	add	r0, r0, #1
   21cb4:	cmp	r0, r2
   21cb8:	add	r3, r3, #12
   21cbc:	bcc	21c98 <__assert_fail@plt+0x10740>
   21cc0:	cmp	r2, #0
   21cc4:	beq	21fcc <__assert_fail@plt+0x10a74>
   21cc8:	mov	r5, #0
   21ccc:	ldr	r3, [r6, #24]
   21cd0:	str	r4, [sp, #12]
   21cd4:	mov	sl, r5
   21cd8:	mov	r4, r6
   21cdc:	mov	ip, r2
   21ce0:	add	r1, r3, r5
   21ce4:	ldmib	r1, {r0, r6}
   21ce8:	cmp	r0, #0
   21cec:	subgt	r6, r6, #4
   21cf0:	movgt	r7, #0
   21cf4:	bgt	21d14 <__assert_fail@plt+0x107bc>
   21cf8:	b	21fb8 <__assert_fail@plt+0x10a60>
   21cfc:	ldr	r3, [r4, #24]
   21d00:	add	r7, r7, #1
   21d04:	add	r2, r3, r5
   21d08:	ldr	r2, [r2, #4]
   21d0c:	cmp	r7, r2
   21d10:	bge	21fb4 <__assert_fail@plt+0x10a5c>
   21d14:	ldr	r3, [r6, #4]!
   21d18:	ldr	r0, [r4, #28]
   21d1c:	mov	r1, sl
   21d20:	add	r3, r3, r3, lsl #1
   21d24:	add	r0, r0, r3, lsl #2
   21d28:	bl	15f58 <__assert_fail@plt+0x4a00>
   21d2c:	cmp	r0, #0
   21d30:	bne	21cfc <__assert_fail@plt+0x107a4>
   21d34:	ldr	r4, [sp, #12]
   21d38:	mov	r3, #12
   21d3c:	str	r3, [sp, #36]	; 0x24
   21d40:	b	21850 <__assert_fail@plt+0x102f8>
   21d44:	ldrb	r3, [r6, #88]	; 0x58
   21d48:	ldr	r5, [r6, #20]
   21d4c:	add	r2, r2, r2, lsl #1
   21d50:	orr	r3, r3, #1
   21d54:	strb	r3, [r6, #88]	; 0x58
   21d58:	ldr	r3, [r7, #4]
   21d5c:	mov	r0, #8
   21d60:	cmp	r3, #0
   21d64:	ldrne	r3, [r3, #12]
   21d68:	ldreq	r3, [r7, #16]
   21d6c:	ldr	r9, [r3, #28]
   21d70:	ldr	r3, [r7, #8]
   21d74:	cmp	r3, #0
   21d78:	ldrne	r3, [r3, #12]
   21d7c:	ldreq	r3, [r7, #16]
   21d80:	ldr	sl, [r3, #28]
   21d84:	mov	r3, #2
   21d88:	str	r3, [r5, r2, lsl #2]
   21d8c:	add	r5, r5, r2, lsl r3
   21d90:	bl	24794 <__assert_fail@plt+0x1323c>
   21d94:	cmp	r0, #0
   21d98:	str	r0, [r5, #8]
   21d9c:	beq	21d38 <__assert_fail@plt+0x107e0>
   21da0:	cmp	r9, sl
   21da4:	moveq	r3, #1
   21da8:	streq	r3, [r5, #4]
   21dac:	streq	r9, [r0]
   21db0:	beq	21dc8 <__assert_fail@plt+0x10870>
   21db4:	mov	r3, #2
   21db8:	str	r3, [r5, #4]
   21dbc:	stmlt	r0, {r9, sl}
   21dc0:	strge	sl, [r0]
   21dc4:	strge	r9, [r0, #4]
   21dc8:	ldr	r3, [r7, #4]
   21dcc:	cmp	r3, #0
   21dd0:	ldreq	r2, [sp, #20]
   21dd4:	beq	21de4 <__assert_fail@plt+0x1088c>
   21dd8:	mov	r7, r3
   21ddc:	b	21b34 <__assert_fail@plt+0x105dc>
   21de0:	mov	r7, r5
   21de4:	ldr	r3, [r7, #8]
   21de8:	cmp	r3, #0
   21dec:	cmpne	r3, r2
   21df0:	moveq	sl, #1
   21df4:	movne	sl, #0
   21df8:	bne	21dd8 <__assert_fail@plt+0x10880>
   21dfc:	ldr	r5, [r7]
   21e00:	mov	r2, r7
   21e04:	cmp	r5, #0
   21e08:	bne	21de0 <__assert_fail@plt+0x10888>
   21e0c:	ldr	r9, [sp, #12]
   21e10:	ldr	r3, [r6, #24]
   21e14:	add	r7, r5, r5, lsl #1
   21e18:	lsl	r7, r7, #2
   21e1c:	add	r2, r3, r7
   21e20:	ldr	r2, [r2, #4]
   21e24:	cmp	r2, #0
   21e28:	beq	21f48 <__assert_fail@plt+0x109f0>
   21e2c:	ldr	r0, [r6, #8]
   21e30:	add	r5, r5, #1
   21e34:	cmp	r0, r5
   21e38:	bne	21e14 <__assert_fail@plt+0x108bc>
   21e3c:	cmp	r9, #0
   21e40:	beq	21c3c <__assert_fail@plt+0x106e4>
   21e44:	ldr	r9, [sp, #12]
   21e48:	mov	r5, #0
   21e4c:	b	21e14 <__assert_fail@plt+0x108bc>
   21e50:	mov	r1, #1
   21e54:	mov	r0, #32
   21e58:	bl	2474c <__assert_fail@plt+0x131f4>
   21e5c:	cmp	r0, #0
   21e60:	str	r0, [r4, #60]	; 0x3c
   21e64:	beq	21c14 <__assert_fail@plt+0x106bc>
   21e68:	mov	fp, #1
   21e6c:	lsl	r9, r6, #3
   21e70:	mov	sl, #0
   21e74:	mov	r0, r9
   21e78:	bl	11468 <btowc@plt>
   21e7c:	cmn	r0, #1
   21e80:	ldrne	r2, [r4, #60]	; 0x3c
   21e84:	ldrne	r3, [r2, r6]
   21e88:	orrne	r3, r3, fp, lsl sl
   21e8c:	strne	r3, [r2, r6]
   21e90:	bics	r3, r9, #127	; 0x7f
   21e94:	bne	21ea8 <__assert_fail@plt+0x10950>
   21e98:	cmp	r0, r9
   21e9c:	ldrbne	r3, [r4, #88]	; 0x58
   21ea0:	orrne	r3, r3, #8
   21ea4:	strbne	r3, [r4, #88]	; 0x58
   21ea8:	add	sl, sl, #1
   21eac:	cmp	sl, #32
   21eb0:	add	r9, r9, #1
   21eb4:	bne	21e74 <__assert_fail@plt+0x1091c>
   21eb8:	add	r6, r6, #4
   21ebc:	cmp	r6, #32
   21ec0:	bne	21e6c <__assert_fail@plt+0x10914>
   21ec4:	b	216c8 <__assert_fail@plt+0x10170>
   21ec8:	ldr	r1, [r7, #16]
   21ecc:	ldr	r3, [r6, #20]
   21ed0:	add	r2, r2, r2, lsl #1
   21ed4:	ldr	r5, [r1, #28]
   21ed8:	add	r9, r3, r2, lsl #2
   21edc:	mov	r1, #1
   21ee0:	str	r1, [r3, r2, lsl #2]
   21ee4:	mov	r0, #4
   21ee8:	str	r1, [r9, #4]
   21eec:	bl	24794 <__assert_fail@plt+0x1323c>
   21ef0:	cmp	r0, #0
   21ef4:	str	r0, [r9, #8]
   21ef8:	beq	2230c <__assert_fail@plt+0x10db4>
   21efc:	str	r5, [r0]
   21f00:	b	21dc8 <__assert_fail@plt+0x10870>
   21f04:	ldrb	r3, [r0, #3]
   21f08:	ldr	r1, [pc, #1420]	; 2249c <__assert_fail@plt+0x10f44>
   21f0c:	cmp	r3, #45	; 0x2d
   21f10:	moveq	r3, #4
   21f14:	movne	r3, #3
   21f18:	add	r0, r0, r3
   21f1c:	bl	111f8 <strcmp@plt>
   21f20:	cmp	r0, #0
   21f24:	ldrbeq	r3, [r4, #88]	; 0x58
   21f28:	orreq	r3, r3, #4
   21f2c:	strbeq	r3, [r4, #88]	; 0x58
   21f30:	b	2169c <__assert_fail@plt+0x10144>
   21f34:	ldr	r1, [r7, #16]
   21f38:	ldr	r3, [r6, #12]
   21f3c:	ldr	r1, [r1, #28]
   21f40:	str	r1, [r3, r2, lsl #2]
   21f44:	b	21dc8 <__assert_fail@plt+0x10870>
   21f48:	mov	r3, #1
   21f4c:	mov	r2, r5
   21f50:	mov	r1, r6
   21f54:	mov	r0, fp
   21f58:	bl	18bbc <__assert_fail@plt+0x7664>
   21f5c:	cmp	r0, #0
   21f60:	bne	221c0 <__assert_fail@plt+0x10c68>
   21f64:	ldr	r3, [r6, #24]
   21f68:	add	r7, r3, r7
   21f6c:	ldr	r7, [r7, #4]
   21f70:	cmp	r7, #0
   21f74:	bne	21e2c <__assert_fail@plt+0x108d4>
   21f78:	ldr	r0, [sp, #56]	; 0x38
   21f7c:	bl	13908 <__assert_fail@plt+0x23b0>
   21f80:	ldr	r3, [r6, #8]
   21f84:	add	r5, r5, #1
   21f88:	cmp	r3, r5
   21f8c:	movne	r9, sl
   21f90:	beq	21f9c <__assert_fail@plt+0x10a44>
   21f94:	ldr	r3, [r6, #24]
   21f98:	b	21e14 <__assert_fail@plt+0x108bc>
   21f9c:	mov	r5, r7
   21fa0:	ldr	r9, [sp, #12]
   21fa4:	b	21f94 <__assert_fail@plt+0x10a3c>
   21fa8:	add	r0, sp, #60	; 0x3c
   21fac:	bl	160c4 <__assert_fail@plt+0x4b6c>
   21fb0:	b	21900 <__assert_fail@plt+0x103a8>
   21fb4:	ldr	ip, [r4, #8]
   21fb8:	add	sl, sl, #1
   21fbc:	cmp	sl, ip
   21fc0:	add	r5, r5, #12
   21fc4:	bcc	21ce0 <__assert_fail@plt+0x10788>
   21fc8:	ldr	r4, [sp, #12]
   21fcc:	ldrb	r2, [r4, #88]	; 0x58
   21fd0:	ldr	r3, [sp, #16]
   21fd4:	clz	r3, r3
   21fd8:	lsr	r3, r3, #5
   21fdc:	mov	r1, #0
   21fe0:	ands	r3, r3, r2, lsr #2
   21fe4:	str	r1, [sp, #36]	; 0x24
   21fe8:	beq	21ff8 <__assert_fail@plt+0x10aa0>
   21fec:	ldr	r2, [r8, #20]
   21ff0:	cmp	r2, #0
   21ff4:	beq	2231c <__assert_fail@plt+0x10dc4>
   21ff8:	ldr	r3, [r4, #52]	; 0x34
   21ffc:	ldr	r1, [r4, #24]
   22000:	mov	r0, fp
   22004:	ldr	r3, [r3, #12]
   22008:	ldr	r3, [r3, #28]
   2200c:	str	r3, [r4, #72]	; 0x48
   22010:	add	r3, r3, r3, lsl #1
   22014:	add	r1, r1, r3, lsl #2
   22018:	bl	17fc4 <__assert_fail@plt+0x6a6c>
   2201c:	cmp	r0, #0
   22020:	mov	r6, r0
   22024:	str	r0, [sp, #40]	; 0x28
   22028:	bne	22150 <__assert_fail@plt+0x10bf8>
   2202c:	ldr	r3, [r4, #76]	; 0x4c
   22030:	cmp	r3, #0
   22034:	ble	22110 <__assert_fail@plt+0x10bb8>
   22038:	ldr	r5, [sp, #52]	; 0x34
   2203c:	cmp	r5, #0
   22040:	ble	22110 <__assert_fail@plt+0x10bb8>
   22044:	mov	r7, r0
   22048:	b	22058 <__assert_fail@plt+0x10b00>
   2204c:	add	r7, r7, #1
   22050:	cmp	r7, r5
   22054:	bge	22110 <__assert_fail@plt+0x10bb8>
   22058:	ldr	r2, [sp, #56]	; 0x38
   2205c:	ldr	ip, [r4]
   22060:	ldr	r9, [r2, r7, lsl #2]
   22064:	add	lr, ip, r9, lsl #3
   22068:	ldrb	r3, [lr, #4]
   2206c:	cmp	r3, #4
   22070:	bne	2204c <__assert_fail@plt+0x10af4>
   22074:	cmp	r5, #0
   22078:	ble	221b8 <__assert_fail@plt+0x10c60>
   2207c:	sub	r2, r2, #4
   22080:	mov	r3, #0
   22084:	b	22094 <__assert_fail@plt+0x10b3c>
   22088:	add	r3, r3, #1
   2208c:	cmp	r5, r3
   22090:	beq	2204c <__assert_fail@plt+0x10af4>
   22094:	ldr	r1, [r2, #4]!
   22098:	add	r0, ip, r1, lsl #3
   2209c:	ldrb	r0, [r0, #4]
   220a0:	cmp	r0, #9
   220a4:	bne	22088 <__assert_fail@plt+0x10b30>
   220a8:	ldr	r0, [ip, r1, lsl #3]
   220ac:	ldr	r1, [lr]
   220b0:	cmp	r0, r1
   220b4:	bne	22088 <__assert_fail@plt+0x10b30>
   220b8:	ldr	r3, [r4, #20]
   220bc:	add	r9, r9, r9, lsl #1
   220c0:	add	r1, sp, #56	; 0x38
   220c4:	add	r9, r3, r9, lsl #2
   220c8:	mov	r0, r5
   220cc:	ldr	r3, [r9, #8]
   220d0:	ldr	r9, [r3]
   220d4:	mov	r2, r9
   220d8:	bl	174b8 <__assert_fail@plt+0x5f60>
   220dc:	cmp	r0, #0
   220e0:	bne	2204c <__assert_fail@plt+0x10af4>
   220e4:	ldr	r1, [r4, #24]
   220e8:	add	r9, r9, r9, lsl #1
   220ec:	mov	r0, fp
   220f0:	add	r1, r1, r9, lsl #2
   220f4:	bl	18a34 <__assert_fail@plt+0x74dc>
   220f8:	cmp	r0, #0
   220fc:	bne	22304 <__assert_fail@plt+0x10dac>
   22100:	ldr	r5, [sp, #52]	; 0x34
   22104:	mov	r7, #1
   22108:	cmp	r7, r5
   2210c:	blt	22058 <__assert_fail@plt+0x10b00>
   22110:	mov	r3, #0
   22114:	mov	r2, fp
   22118:	mov	r1, r4
   2211c:	add	r0, sp, #40	; 0x28
   22120:	bl	18188 <__assert_fail@plt+0x6c30>
   22124:	cmp	r0, #0
   22128:	str	r0, [r4, #36]	; 0x24
   2212c:	beq	2226c <__assert_fail@plt+0x10d14>
   22130:	ldrsb	r3, [r0, #52]	; 0x34
   22134:	cmp	r3, #0
   22138:	strge	r0, [r4, #48]	; 0x30
   2213c:	strge	r0, [r4, #44]	; 0x2c
   22140:	strge	r0, [r4, #40]	; 0x28
   22144:	blt	22208 <__assert_fail@plt+0x10cb0>
   22148:	ldr	r0, [sp, #56]	; 0x38
   2214c:	bl	13908 <__assert_fail@plt+0x23b0>
   22150:	ldr	r7, [r8]
   22154:	str	r6, [sp, #36]	; 0x24
   22158:	ldr	r0, [r7, #56]	; 0x38
   2215c:	cmp	r0, #0
   22160:	beq	22174 <__assert_fail@plt+0x10c1c>
   22164:	ldr	r5, [r0]
   22168:	bl	13908 <__assert_fail@plt+0x23b0>
   2216c:	subs	r0, r5, #0
   22170:	bne	22164 <__assert_fail@plt+0x10c0c>
   22174:	mov	r5, #0
   22178:	mov	r3, #31
   2217c:	str	r3, [r7, #64]	; 0x40
   22180:	ldr	r0, [r7, #16]
   22184:	str	r5, [r7, #56]	; 0x38
   22188:	str	r5, [r7, #52]	; 0x34
   2218c:	bl	13908 <__assert_fail@plt+0x23b0>
   22190:	add	r0, sp, #60	; 0x3c
   22194:	str	r5, [r7, #16]
   22198:	bl	16c7c <__assert_fail@plt+0x5724>
   2219c:	ldr	r0, [sp, #36]	; 0x24
   221a0:	cmp	r0, r5
   221a4:	beq	218c4 <__assert_fail@plt+0x1036c>
   221a8:	ldr	r3, [sp, #24]
   221ac:	cmp	r3, #0
   221b0:	bne	218a4 <__assert_fail@plt+0x1034c>
   221b4:	b	218ac <__assert_fail@plt+0x10354>
   221b8:	bne	220b8 <__assert_fail@plt+0x10b60>
   221bc:	b	2204c <__assert_fail@plt+0x10af4>
   221c0:	mov	r3, r0
   221c4:	str	r3, [sp, #36]	; 0x24
   221c8:	b	21850 <__assert_fail@plt+0x102f8>
   221cc:	mov	r3, #12
   221d0:	str	r3, [sp, #36]	; 0x24
   221d4:	b	21850 <__assert_fail@plt+0x102f8>
   221d8:	mov	r0, r4
   221dc:	mov	r1, #160	; 0xa0
   221e0:	bl	247c0 <__assert_fail@plt+0x13268>
   221e4:	subs	r4, r0, #0
   221e8:	beq	222fc <__assert_fail@plt+0x10da4>
   221ec:	mov	r3, #160	; 0xa0
   221f0:	str	r4, [r8]
   221f4:	str	r3, [r8, #4]
   221f8:	b	215f0 <__assert_fail@plt+0x10098>
   221fc:	mov	r3, #0
   22200:	str	r3, [r4, #52]	; 0x34
   22204:	b	21850 <__assert_fail@plt+0x102f8>
   22208:	mov	r3, #1
   2220c:	mov	r2, fp
   22210:	mov	r1, r4
   22214:	add	r0, sp, #40	; 0x28
   22218:	bl	18188 <__assert_fail@plt+0x6c30>
   2221c:	mov	r3, #2
   22220:	mov	r2, fp
   22224:	mov	r1, r4
   22228:	str	r0, [r4, #40]	; 0x28
   2222c:	add	r0, sp, #40	; 0x28
   22230:	bl	18188 <__assert_fail@plt+0x6c30>
   22234:	mov	r3, #6
   22238:	mov	r2, fp
   2223c:	mov	r1, r4
   22240:	str	r0, [r4, #44]	; 0x2c
   22244:	add	r0, sp, #40	; 0x28
   22248:	bl	18188 <__assert_fail@plt+0x6c30>
   2224c:	ldr	r3, [r4, #40]	; 0x28
   22250:	cmp	r3, #0
   22254:	str	r0, [r4, #48]	; 0x30
   22258:	beq	2226c <__assert_fail@plt+0x10d14>
   2225c:	ldr	r3, [r4, #44]	; 0x2c
   22260:	cmp	r0, #0
   22264:	cmpne	r3, #0
   22268:	bne	22148 <__assert_fail@plt+0x10bf0>
   2226c:	ldr	r6, [sp, #40]	; 0x28
   22270:	b	22150 <__assert_fail@plt+0x10bf8>
   22274:	mov	sl, r5
   22278:	mov	r1, #1
   2227c:	b	2164c <__assert_fail@plt+0x100f4>
   22280:	cmp	r7, #0
   22284:	beq	221fc <__assert_fail@plt+0x10ca4>
   22288:	add	fp, sp, #48	; 0x30
   2228c:	add	r9, r5, #56	; 0x38
   22290:	add	r5, r5, #64	; 0x40
   22294:	str	fp, [sp]
   22298:	mov	ip, #2
   2229c:	str	r6, [fp, #4]
   222a0:	mov	r3, r6
   222a4:	mov	r2, r6
   222a8:	mov	r1, r5
   222ac:	mov	r0, r9
   222b0:	str	r6, [sp, #48]	; 0x30
   222b4:	strb	ip, [sp, #52]	; 0x34
   222b8:	bl	17b4c <__assert_fail@plt+0x65f4>
   222bc:	mov	r6, r0
   222c0:	b	2199c <__assert_fail@plt+0x10444>
   222c4:	ldrb	r3, [r6, #88]	; 0x58
   222c8:	tst	r3, #1
   222cc:	bne	21c60 <__assert_fail@plt+0x10708>
   222d0:	b	21c54 <__assert_fail@plt+0x106fc>
   222d4:	ldr	r0, [r6, #132]	; 0x84
   222d8:	bl	13908 <__assert_fail@plt+0x23b0>
   222dc:	mov	r3, #0
   222e0:	str	r3, [r6, #132]	; 0x84
   222e4:	b	21aec <__assert_fail@plt+0x10594>
   222e8:	ldr	r3, [sp, #96]	; 0x60
   222ec:	b	218f8 <__assert_fail@plt+0x103a0>
   222f0:	add	r0, sp, #60	; 0x3c
   222f4:	bl	167dc <__assert_fail@plt+0x5284>
   222f8:	b	21900 <__assert_fail@plt+0x103a8>
   222fc:	mov	r0, #12
   22300:	b	218c4 <__assert_fail@plt+0x1036c>
   22304:	mov	r6, r0
   22308:	b	22150 <__assert_fail@plt+0x10bf8>
   2230c:	str	r0, [r9, #4]
   22310:	str	r0, [r9]
   22314:	mov	r3, #12
   22318:	b	21c0c <__assert_fail@plt+0x106b4>
   2231c:	ldr	r7, [r4, #8]
   22320:	cmp	r7, #0
   22324:	beq	2244c <__assert_fail@plt+0x10ef4>
   22328:	ldr	r1, [r4]
   2232c:	mov	lr, r9
   22330:	mov	r0, r1
   22334:	mov	r5, r1
   22338:	ldrb	ip, [r5, #4]
   2233c:	sub	ip, ip, #1
   22340:	cmp	ip, #11
   22344:	ldrls	pc, [pc, ip, lsl #2]
   22348:	b	223e8 <__assert_fail@plt+0x10e90>
   2234c:	andeq	r2, r2, ip, ror r3
   22350:	andeq	r2, r2, r8, lsl #7
   22354:	andeq	r2, r2, r8, lsl r4
   22358:	andeq	r2, r2, r8, lsl #7
   2235c:	andeq	r2, r2, r0, lsl r4
   22360:	strdeq	r1, [r2], -r8
   22364:	andeq	r2, r2, r8, ror #7
   22368:	andeq	r2, r2, r8, lsl #7
   2236c:	andeq	r2, r2, r8, lsl #7
   22370:	andeq	r2, r2, r8, lsl #7
   22374:	andeq	r2, r2, r8, lsl #7
   22378:	andeq	r2, r2, ip, ror #7
   2237c:	ldrb	ip, [r1, r2, lsl #3]
   22380:	lsrs	ip, ip, #7
   22384:	movne	r9, r3
   22388:	add	r2, r2, #1
   2238c:	cmp	r2, r7
   22390:	add	r5, r5, #8
   22394:	bne	22338 <__assert_fail@plt+0x10de0>
   22398:	orr	r9, r9, lr
   2239c:	ands	r9, r9, #255	; 0xff
   223a0:	beq	2244c <__assert_fail@plt+0x10ef4>
   223a4:	add	r2, r1, r2, lsl #3
   223a8:	mov	r1, #7
   223ac:	b	223c4 <__assert_fail@plt+0x10e6c>
   223b0:	cmp	r3, #5
   223b4:	strbeq	r1, [r0, #4]
   223b8:	add	r0, r0, #8
   223bc:	cmp	r0, r2
   223c0:	beq	22448 <__assert_fail@plt+0x10ef0>
   223c4:	ldrb	r3, [r0, #4]
   223c8:	cmp	r3, #1
   223cc:	bne	223b0 <__assert_fail@plt+0x10e58>
   223d0:	ldrsb	r3, [r0]
   223d4:	cmp	r3, #0
   223d8:	ldrblt	r3, [r0, #6]
   223dc:	biclt	r3, r3, #32
   223e0:	strblt	r3, [r0, #6]
   223e4:	b	223b8 <__assert_fail@plt+0x10e60>
   223e8:	bl	11534 <abort@plt>
   223ec:	ldr	ip, [r1, r2, lsl #3]
   223f0:	cmp	ip, #32
   223f4:	beq	22388 <__assert_fail@plt+0x10e30>
   223f8:	bls	2243c <__assert_fail@plt+0x10ee4>
   223fc:	cmp	ip, #64	; 0x40
   22400:	beq	22388 <__assert_fail@plt+0x10e30>
   22404:	cmp	ip, #128	; 0x80
   22408:	beq	22388 <__assert_fail@plt+0x10e30>
   2240c:	b	21ff8 <__assert_fail@plt+0x10aa0>
   22410:	mov	lr, r3
   22414:	b	22388 <__assert_fail@plt+0x10e30>
   22418:	ldr	ip, [r1, r2, lsl #3]
   2241c:	add	r6, ip, #12
   22420:	add	ip, ip, #28
   22424:	ldr	sl, [r6, #4]!
   22428:	cmp	sl, #0
   2242c:	bne	21ff8 <__assert_fail@plt+0x10aa0>
   22430:	cmp	r6, ip
   22434:	bne	22424 <__assert_fail@plt+0x10ecc>
   22438:	b	22388 <__assert_fail@plt+0x10e30>
   2243c:	cmp	ip, #16
   22440:	beq	22388 <__assert_fail@plt+0x10e30>
   22444:	b	21ff8 <__assert_fail@plt+0x10aa0>
   22448:	mov	r9, lr
   2244c:	ldr	r2, [r4, #76]	; 0x4c
   22450:	ldrb	r3, [r4, #88]	; 0x58
   22454:	cmp	r2, #0
   22458:	movle	r2, r9
   2245c:	orrgt	r2, r9, #1
   22460:	and	r2, r2, #1
   22464:	and	r3, r3, #249	; 0xf9
   22468:	orr	r3, r3, r2, lsl #1
   2246c:	mov	r2, #1
   22470:	strb	r3, [r4, #88]	; 0x58
   22474:	str	r2, [r4, #92]	; 0x5c
   22478:	b	21ff8 <__assert_fail@plt+0x10aa0>
   2247c:	beq	feaccf28 <optarg@@GLIBC_2.4+0xfea95d68>
   22480:	andeq	r6, r2, r4, lsl #3
	...
   2248c:	andeq	r7, r1, r8, ror r6
   22490:	andeq	r7, r1, r0, lsr pc
   22494:	andeq	r8, r1, r4, ror r7
   22498:	andeq	r7, r1, ip, lsl r7
   2249c:	andeq	r6, r2, ip, asr #7
   224a0:	ldr	r3, [pc, #96]	; 22508 <__assert_fail@plt+0x10fb0>
   224a4:	push	{r4, lr}
   224a8:	mov	lr, r2
   224ac:	ldr	r3, [r3]
   224b0:	ldrb	ip, [lr, #28]
   224b4:	mov	r2, r1
   224b8:	mov	r1, r0
   224bc:	lsr	r0, r3, #21
   224c0:	and	r4, r0, #16
   224c4:	and	r0, ip, #239	; 0xef
   224c8:	orr	r0, r0, r4
   224cc:	orr	r0, r0, #128	; 0x80
   224d0:	strb	r0, [lr, #28]
   224d4:	mov	r0, lr
   224d8:	bl	215a8 <__assert_fail@plt+0x10050>
   224dc:	subs	r3, r0, #0
   224e0:	popeq	{r4, pc}
   224e4:	ldr	r1, [pc, #32]	; 2250c <__assert_fail@plt+0x10fb4>
   224e8:	mov	r2, #5
   224ec:	add	r3, r1, r3, lsl #2
   224f0:	add	r1, r1, #32
   224f4:	ldr	r3, [r3, #416]	; 0x1a0
   224f8:	mov	r0, #0
   224fc:	add	r1, r1, r3
   22500:	pop	{r4, lr}
   22504:	b	112d0 <dcgettext@plt>
   22508:	andeq	r7, r3, ip, ror #7
   2250c:	andeq	r6, r2, r4, lsl #3
   22510:	ldr	r3, [pc, #12]	; 22524 <__assert_fail@plt+0x10fcc>
   22514:	ldr	r2, [r3]
   22518:	str	r0, [r3]
   2251c:	mov	r0, r2
   22520:	bx	lr
   22524:	andeq	r7, r3, ip, ror #7
   22528:	push	{r4, r5, r6, lr}
   2252c:	mov	r2, #256	; 0x100
   22530:	ldr	r5, [r0]
   22534:	ldr	r6, [r0, #16]
   22538:	mov	r4, r0
   2253c:	mov	r1, #0
   22540:	mov	r0, r6
   22544:	bl	1145c <memset@plt>
   22548:	ldr	r1, [r5, #36]	; 0x24
   2254c:	mov	r3, r6
   22550:	add	r2, r1, #12
   22554:	mov	r0, r4
   22558:	add	r1, r1, #8
   2255c:	bl	1b460 <__assert_fail@plt+0x9f08>
   22560:	ldr	r0, [r5, #40]	; 0x28
   22564:	ldr	r3, [r5, #36]	; 0x24
   22568:	cmp	r3, r0
   2256c:	beq	22588 <__assert_fail@plt+0x11030>
   22570:	add	r2, r0, #12
   22574:	add	r1, r0, #8
   22578:	mov	r3, r6
   2257c:	mov	r0, r4
   22580:	bl	1b460 <__assert_fail@plt+0x9f08>
   22584:	ldr	r0, [r5, #36]	; 0x24
   22588:	ldr	r1, [r5, #44]	; 0x2c
   2258c:	cmp	r1, r0
   22590:	beq	225ac <__assert_fail@plt+0x11054>
   22594:	add	r2, r1, #12
   22598:	mov	r0, r4
   2259c:	mov	r3, r6
   225a0:	add	r1, r1, #8
   225a4:	bl	1b460 <__assert_fail@plt+0x9f08>
   225a8:	ldr	r0, [r5, #36]	; 0x24
   225ac:	ldr	r1, [r5, #48]	; 0x30
   225b0:	cmp	r1, r0
   225b4:	beq	225cc <__assert_fail@plt+0x11074>
   225b8:	add	r2, r1, #12
   225bc:	mov	r3, r6
   225c0:	add	r1, r1, #8
   225c4:	mov	r0, r4
   225c8:	bl	1b460 <__assert_fail@plt+0x9f08>
   225cc:	ldrb	r3, [r4, #28]
   225d0:	mov	r0, #0
   225d4:	orr	r3, r3, #8
   225d8:	strb	r3, [r4, #28]
   225dc:	pop	{r4, r5, r6, pc}
   225e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225e4:	cmp	r3, r2
   225e8:	mov	r5, r3
   225ec:	sub	sp, sp, #52	; 0x34
   225f0:	movle	r3, #0
   225f4:	movgt	r3, #1
   225f8:	orrs	r3, r3, r5, lsr #31
   225fc:	ldrb	r3, [sp, #100]	; 0x64
   22600:	ldr	ip, [sp, #88]	; 0x58
   22604:	ldr	sl, [r0]
   22608:	add	r8, r5, ip
   2260c:	ldr	r7, [sp, #96]	; 0x60
   22610:	str	r3, [sp, #32]
   22614:	bne	228bc <__assert_fail@plt+0x11364>
   22618:	cmp	r8, r2
   2261c:	bgt	228b4 <__assert_fail@plt+0x1135c>
   22620:	cmp	ip, #0
   22624:	cmpge	r5, r8
   22628:	movgt	lr, #1
   2262c:	movle	lr, #0
   22630:	bgt	228b4 <__assert_fail@plt+0x1135c>
   22634:	cmp	r8, #0
   22638:	blt	22948 <__assert_fail@plt+0x113f0>
   2263c:	cmp	r5, r8
   22640:	movgt	lr, #0
   22644:	movle	lr, #1
   22648:	ands	r3, lr, ip, lsr #31
   2264c:	movne	r8, #0
   22650:	ldr	lr, [pc, #796]	; 22974 <__assert_fail@plt+0x1141c>
   22654:	ldr	r4, [pc, #796]	; 22978 <__assert_fail@plt+0x11420>
   22658:	cmp	lr, #0
   2265c:	mov	ip, #1
   22660:	moveq	ip, lr
   22664:	cmp	r4, #0
   22668:	mov	lr, #1
   2266c:	moveq	lr, r4
   22670:	str	r2, [sp, #40]	; 0x28
   22674:	orr	r2, ip, lr
   22678:	ands	r3, r2, #255	; 0xff
   2267c:	str	r1, [sp, #44]	; 0x2c
   22680:	mov	r6, r0
   22684:	str	r3, [sp, #28]
   22688:	beq	22694 <__assert_fail@plt+0x1113c>
   2268c:	add	r0, sl, #136	; 0x88
   22690:	bl	1124c <pthread_mutex_lock@plt>
   22694:	ldrb	r2, [r6, #28]
   22698:	cmp	r8, r5
   2269c:	lsr	fp, r2, #5
   226a0:	and	r3, fp, #3
   226a4:	str	r3, [sp, #36]	; 0x24
   226a8:	bgt	2275c <__assert_fail@plt+0x11204>
   226ac:	lsr	r1, r2, #4
   226b0:	and	r1, r1, #1
   226b4:	cmp	r7, #0
   226b8:	orreq	r1, r1, #1
   226bc:	cmp	r1, #0
   226c0:	bne	22950 <__assert_fail@plt+0x113f8>
   226c4:	and	r2, r2, #6
   226c8:	cmp	r2, #4
   226cc:	ldrne	r0, [r6, #24]
   226d0:	beq	22918 <__assert_fail@plt+0x113c0>
   226d4:	add	fp, r0, #1
   226d8:	mov	r4, fp
   226dc:	lsl	r0, fp, #3
   226e0:	bl	24794 <__assert_fail@plt+0x1323c>
   226e4:	subs	r9, r0, #0
   226e8:	beq	228cc <__assert_fail@plt+0x11374>
   226ec:	ldr	r3, [sp, #36]	; 0x24
   226f0:	str	r9, [sp, #12]
   226f4:	str	r3, [sp, #16]
   226f8:	ldr	r3, [sp, #92]	; 0x5c
   226fc:	str	fp, [sp, #8]
   22700:	str	r3, [sp, #4]
   22704:	str	r8, [sp]
   22708:	ldr	r2, [sp, #40]	; 0x28
   2270c:	ldr	r1, [sp, #44]	; 0x2c
   22710:	mov	r3, r5
   22714:	mov	r0, r6
   22718:	bl	1ce8c <__assert_fail@plt+0xb934>
   2271c:	cmp	r0, #0
   22720:	beq	22780 <__assert_fail@plt+0x11228>
   22724:	cmp	r0, #1
   22728:	mvneq	r5, #0
   2272c:	beq	22734 <__assert_fail@plt+0x111dc>
   22730:	mvn	r5, #1
   22734:	mov	r0, r9
   22738:	bl	13908 <__assert_fail@plt+0x23b0>
   2273c:	ldr	r3, [sp, #28]
   22740:	cmp	r3, #0
   22744:	beq	22750 <__assert_fail@plt+0x111f8>
   22748:	add	r0, sl, #136	; 0x88
   2274c:	bl	11198 <pthread_mutex_unlock@plt>
   22750:	mov	r0, r5
   22754:	add	sp, sp, #52	; 0x34
   22758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2275c:	ldr	r1, [r6, #16]
   22760:	cmp	r1, #0
   22764:	beq	226ac <__assert_fail@plt+0x11154>
   22768:	tst	r2, #8
   2276c:	bne	226ac <__assert_fail@plt+0x11154>
   22770:	mov	r0, r6
   22774:	bl	22528 <__assert_fail@plt+0x10fd0>
   22778:	ldrb	r2, [r6, #28]
   2277c:	b	226ac <__assert_fail@plt+0x11154>
   22780:	cmp	r7, #0
   22784:	beq	2282c <__assert_fail@plt+0x112d4>
   22788:	ldrb	r8, [r6, #28]
   2278c:	add	fp, r4, #1
   22790:	lsr	r8, r8, #1
   22794:	ands	r8, r8, #3
   22798:	beq	228d4 <__assert_fail@plt+0x1137c>
   2279c:	cmp	r8, #1
   227a0:	movne	r8, #2
   227a4:	beq	22848 <__assert_fail@plt+0x112f0>
   227a8:	cmp	r4, #0
   227ac:	ble	22964 <__assert_fail@plt+0x1140c>
   227b0:	ldmib	r7, {r1, r2}
   227b4:	mov	r3, r9
   227b8:	add	ip, r9, r4, lsl #3
   227bc:	sub	r1, r1, #4
   227c0:	sub	r2, r2, #4
   227c4:	ldr	r0, [r3]
   227c8:	add	r3, r3, #8
   227cc:	str	r0, [r1, #4]!
   227d0:	ldr	r0, [r3, #-4]
   227d4:	cmp	ip, r3
   227d8:	str	r0, [r2, #4]!
   227dc:	bne	227c4 <__assert_fail@plt+0x1126c>
   227e0:	ldr	r2, [r7]
   227e4:	mov	r3, r4
   227e8:	cmp	r2, r4
   227ec:	bls	22814 <__assert_fail@plt+0x112bc>
   227f0:	ldmib	r7, {r0, r1}
   227f4:	mvn	r2, #0
   227f8:	str	r2, [r1, r3, lsl #2]
   227fc:	str	r2, [r0, r3, lsl #2]
   22800:	ldr	r3, [r7]
   22804:	add	r4, r4, #1
   22808:	cmp	r4, r3
   2280c:	mov	r3, r4
   22810:	bcc	227f8 <__assert_fail@plt+0x112a0>
   22814:	ldrb	r3, [r6, #28]
   22818:	bic	r3, r3, #6
   2281c:	orr	r8, r3, r8, lsl #1
   22820:	tst	r8, #6
   22824:	strb	r8, [r6, #28]
   22828:	beq	22730 <__assert_fail@plt+0x111d8>
   2282c:	ldr	r3, [sp, #32]
   22830:	cmp	r3, #0
   22834:	ldrne	r3, [r9, #4]
   22838:	subne	r5, r3, r5
   2283c:	bne	22734 <__assert_fail@plt+0x111dc>
   22840:	ldr	r5, [r9]
   22844:	b	22734 <__assert_fail@plt+0x111dc>
   22848:	ldr	r3, [r7]
   2284c:	cmp	r3, fp
   22850:	bcs	227a8 <__assert_fail@plt+0x11250>
   22854:	lsl	r2, fp, #2
   22858:	mov	r1, r2
   2285c:	ldr	r0, [r7, #4]
   22860:	str	r2, [sp, #40]	; 0x28
   22864:	bl	247c0 <__assert_fail@plt+0x13268>
   22868:	subs	r3, r0, #0
   2286c:	str	r3, [sp, #36]	; 0x24
   22870:	beq	2296c <__assert_fail@plt+0x11414>
   22874:	ldr	r2, [sp, #40]	; 0x28
   22878:	ldr	r0, [r7, #8]
   2287c:	mov	r1, r2
   22880:	bl	247c0 <__assert_fail@plt+0x13268>
   22884:	ldr	r3, [sp, #36]	; 0x24
   22888:	subs	r2, r0, #0
   2288c:	strne	r3, [r7, #4]
   22890:	strne	r2, [r7, #8]
   22894:	strne	fp, [r7]
   22898:	bne	227a8 <__assert_fail@plt+0x11250>
   2289c:	mov	r0, r3
   228a0:	str	r2, [sp, #36]	; 0x24
   228a4:	bl	13908 <__assert_fail@plt+0x23b0>
   228a8:	ldr	r2, [sp, #36]	; 0x24
   228ac:	mov	r8, r2
   228b0:	b	22814 <__assert_fail@plt+0x112bc>
   228b4:	mov	r8, r2
   228b8:	b	22650 <__assert_fail@plt+0x110f8>
   228bc:	mvn	r5, #0
   228c0:	mov	r0, r5
   228c4:	add	sp, sp, #52	; 0x34
   228c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   228cc:	mvn	r5, #1
   228d0:	b	2273c <__assert_fail@plt+0x111e4>
   228d4:	lsl	r8, fp, #2
   228d8:	mov	r0, r8
   228dc:	bl	24794 <__assert_fail@plt+0x1323c>
   228e0:	cmp	r0, #0
   228e4:	str	r0, [r7, #4]
   228e8:	beq	2296c <__assert_fail@plt+0x11414>
   228ec:	mov	r0, r8
   228f0:	bl	24794 <__assert_fail@plt+0x1323c>
   228f4:	cmp	r0, #0
   228f8:	mov	r8, r0
   228fc:	str	r0, [r7, #8]
   22900:	strne	fp, [r7]
   22904:	movne	r8, #1
   22908:	bne	227a8 <__assert_fail@plt+0x11250>
   2290c:	ldr	r0, [r7, #4]
   22910:	bl	13908 <__assert_fail@plt+0x23b0>
   22914:	b	22814 <__assert_fail@plt+0x112bc>
   22918:	ldr	fp, [r7]
   2291c:	ldr	r0, [r6, #24]
   22920:	cmp	fp, r0
   22924:	bhi	226d4 <__assert_fail@plt+0x1117c>
   22928:	cmp	fp, #0
   2292c:	mov	r4, fp
   22930:	bgt	226dc <__assert_fail@plt+0x11184>
   22934:	mov	fp, #1
   22938:	mov	r7, r1
   2293c:	mov	r4, fp
   22940:	mov	r0, #8
   22944:	b	226e0 <__assert_fail@plt+0x11188>
   22948:	mov	r8, lr
   2294c:	b	22650 <__assert_fail@plt+0x110f8>
   22950:	mov	fp, #1
   22954:	mov	r4, fp
   22958:	mov	r0, #8
   2295c:	mov	r7, #0
   22960:	b	226e0 <__assert_fail@plt+0x11188>
   22964:	mov	r4, #0
   22968:	b	227e0 <__assert_fail@plt+0x11288>
   2296c:	mov	r8, #0
   22970:	b	22814 <__assert_fail@plt+0x112bc>
	...
   2297c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22980:	sub	sp, sp, #28
   22984:	mov	r5, r2
   22988:	ldr	r6, [sp, #80]	; 0x50
   2298c:	ldr	r4, [sp, #64]	; 0x40
   22990:	orr	r2, r2, r6
   22994:	orrs	r2, r2, r4
   22998:	ldrb	fp, [sp, #84]	; 0x54
   2299c:	bmi	229c0 <__assert_fail@plt+0x11468>
   229a0:	cmp	r4, #0
   229a4:	mov	sl, r0
   229a8:	mov	r7, r3
   229ac:	blt	229d0 <__assert_fail@plt+0x11478>
   229b0:	mvn	r3, #-2147483648	; 0x80000000
   229b4:	sub	r3, r3, r4
   229b8:	cmp	r5, r3
   229bc:	ble	229d0 <__assert_fail@plt+0x11478>
   229c0:	mvn	r4, #1
   229c4:	mov	r0, r4
   229c8:	add	sp, sp, #28
   229cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   229d0:	cmp	r4, #0
   229d4:	add	r9, r5, r4
   229d8:	ble	22a64 <__assert_fail@plt+0x1150c>
   229dc:	cmp	r5, #0
   229e0:	str	r1, [sp, #20]
   229e4:	beq	22a5c <__assert_fail@plt+0x11504>
   229e8:	mov	r0, r9
   229ec:	bl	24794 <__assert_fail@plt+0x1323c>
   229f0:	subs	r8, r0, #0
   229f4:	beq	229c0 <__assert_fail@plt+0x11468>
   229f8:	ldr	r1, [sp, #20]
   229fc:	mov	r2, r5
   22a00:	bl	11264 <memcpy@plt>
   22a04:	mov	r1, r7
   22a08:	mov	r2, r4
   22a0c:	add	r0, r8, r5
   22a10:	bl	11264 <memcpy@plt>
   22a14:	mov	r7, r8
   22a18:	ldr	r3, [sp, #76]	; 0x4c
   22a1c:	mov	r2, r9
   22a20:	str	r3, [sp, #8]
   22a24:	ldr	r3, [sp, #72]	; 0x48
   22a28:	mov	r1, r7
   22a2c:	str	r3, [sp]
   22a30:	str	fp, [sp, #12]
   22a34:	ldr	r3, [sp, #68]	; 0x44
   22a38:	str	r6, [sp, #4]
   22a3c:	mov	r0, sl
   22a40:	bl	225e0 <__assert_fail@plt+0x11088>
   22a44:	mov	r4, r0
   22a48:	mov	r0, r8
   22a4c:	bl	13908 <__assert_fail@plt+0x23b0>
   22a50:	mov	r0, r4
   22a54:	add	sp, sp, #28
   22a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a5c:	mov	r8, r5
   22a60:	b	22a18 <__assert_fail@plt+0x114c0>
   22a64:	mov	r7, r1
   22a68:	mov	r8, #0
   22a6c:	b	22a18 <__assert_fail@plt+0x114c0>
   22a70:	push	{r4, r5, r6, r7, r8, lr}
   22a74:	mov	r5, r2
   22a78:	ldr	r3, [pc, #228]	; 22b64 <__assert_fail@plt+0x1160c>
   22a7c:	mov	r2, #0
   22a80:	tst	r5, #1
   22a84:	mov	r4, r0
   22a88:	str	r2, [r0]
   22a8c:	str	r2, [r0, #4]
   22a90:	str	r2, [r0, #8]
   22a94:	mov	r0, #256	; 0x100
   22a98:	ldr	r6, [pc, #200]	; 22b68 <__assert_fail@plt+0x11610>
   22a9c:	mov	r7, r1
   22aa0:	moveq	r6, r3
   22aa4:	bl	24794 <__assert_fail@plt+0x1323c>
   22aa8:	cmp	r0, #0
   22aac:	str	r0, [r4, #16]
   22ab0:	beq	22b5c <__assert_fail@plt+0x11604>
   22ab4:	tst	r5, #2
   22ab8:	movne	r3, #4194304	; 0x400000
   22abc:	moveq	r3, #0
   22ac0:	orr	r6, r6, r3
   22ac4:	ldrb	r3, [r4, #28]
   22ac8:	tst	r5, #4
   22acc:	lsl	r5, r5, #1
   22ad0:	orrne	r3, r3, #128	; 0x80
   22ad4:	biceq	r3, r3, #128	; 0x80
   22ad8:	strb	r3, [r4, #28]
   22adc:	ldrb	r2, [r4, #28]
   22ae0:	and	r5, r5, #16
   22ae4:	mov	r3, #0
   22ae8:	bic	r2, r2, #16
   22aec:	orr	r5, r5, r2
   22af0:	bicne	r6, r6, #64	; 0x40
   22af4:	strb	r5, [r4, #28]
   22af8:	str	r3, [r4, #20]
   22afc:	mov	r0, r7
   22b00:	orrne	r6, r6, #256	; 0x100
   22b04:	bl	11414 <strlen@plt>
   22b08:	mov	r3, r6
   22b0c:	mov	r1, r7
   22b10:	mov	r2, r0
   22b14:	mov	r0, r4
   22b18:	bl	215a8 <__assert_fail@plt+0x10050>
   22b1c:	cmp	r0, #16
   22b20:	mov	r5, r0
   22b24:	beq	22b40 <__assert_fail@plt+0x115e8>
   22b28:	cmp	r0, #0
   22b2c:	bne	22b44 <__assert_fail@plt+0x115ec>
   22b30:	mov	r0, r4
   22b34:	bl	22528 <__assert_fail@plt+0x10fd0>
   22b38:	mov	r0, r5
   22b3c:	pop	{r4, r5, r6, r7, r8, pc}
   22b40:	mov	r5, #8
   22b44:	ldr	r0, [r4, #16]
   22b48:	bl	13908 <__assert_fail@plt+0x23b0>
   22b4c:	mov	r3, #0
   22b50:	mov	r0, r5
   22b54:	str	r3, [r4, #16]
   22b58:	pop	{r4, r5, r6, r7, r8, pc}
   22b5c:	mov	r0, #12
   22b60:	pop	{r4, r5, r6, r7, r8, pc}
   22b64:	smlabteq	r1, r6, r2, r0
   22b68:	strdeq	fp, [r3], -ip
   22b6c:	cmp	r0, #16
   22b70:	push	{r4, r5, r6, r7, r8, lr}
   22b74:	bhi	22bdc <__assert_fail@plt+0x11684>
   22b78:	ldr	r1, [pc, #96]	; 22be0 <__assert_fail@plt+0x11688>
   22b7c:	mov	r4, r3
   22b80:	add	r0, r1, r0, lsl #2
   22b84:	add	r1, r1, #32
   22b88:	ldr	r3, [r0, #416]	; 0x1a0
   22b8c:	mov	r6, r2
   22b90:	add	r1, r1, r3
   22b94:	mov	r2, #5
   22b98:	mov	r0, #0
   22b9c:	bl	112d0 <dcgettext@plt>
   22ba0:	mov	r7, r0
   22ba4:	bl	11414 <strlen@plt>
   22ba8:	cmp	r4, #0
   22bac:	add	r5, r0, #1
   22bb0:	beq	22bd4 <__assert_fail@plt+0x1167c>
   22bb4:	cmp	r5, r4
   22bb8:	subhi	r2, r4, #1
   22bbc:	movhi	r3, #0
   22bc0:	strbhi	r3, [r6, r2]
   22bc4:	movls	r2, r5
   22bc8:	mov	r1, r7
   22bcc:	mov	r0, r6
   22bd0:	bl	11264 <memcpy@plt>
   22bd4:	mov	r0, r5
   22bd8:	pop	{r4, r5, r6, r7, r8, pc}
   22bdc:	bl	11534 <abort@plt>
   22be0:	andeq	r6, r2, r4, lsl #3
   22be4:	push	{r4, r5, r6, lr}
   22be8:	mov	r4, r0
   22bec:	ldr	r5, [r0]
   22bf0:	cmp	r5, #0
   22bf4:	beq	22c34 <__assert_fail@plt+0x116dc>
   22bf8:	ldr	r2, [pc, #92]	; 22c5c <__assert_fail@plt+0x11704>
   22bfc:	ldr	r1, [pc, #92]	; 22c60 <__assert_fail@plt+0x11708>
   22c00:	cmp	r2, #0
   22c04:	mov	r3, #1
   22c08:	moveq	r3, r2
   22c0c:	cmp	r1, #0
   22c10:	mov	r2, #1
   22c14:	moveq	r2, r1
   22c18:	orr	r3, r3, r2
   22c1c:	tst	r3, #1
   22c20:	beq	22c2c <__assert_fail@plt+0x116d4>
   22c24:	add	r0, r5, #136	; 0x88
   22c28:	bl	11210 <pthread_mutex_destroy@plt>
   22c2c:	mov	r0, r5
   22c30:	bl	16cac <__assert_fail@plt+0x5754>
   22c34:	mov	r5, #0
   22c38:	ldr	r0, [r4, #16]
   22c3c:	str	r5, [r4]
   22c40:	str	r5, [r4, #4]
   22c44:	bl	13908 <__assert_fail@plt+0x23b0>
   22c48:	str	r5, [r4, #16]
   22c4c:	ldr	r0, [r4, #20]
   22c50:	bl	13908 <__assert_fail@plt+0x23b0>
   22c54:	str	r5, [r4, #20]
   22c58:	pop	{r4, r5, r6, pc}
	...
   22c64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c68:	sub	sp, sp, #36	; 0x24
   22c6c:	ldr	r4, [sp, #72]	; 0x48
   22c70:	bics	ip, r4, #7
   22c74:	movne	r0, #2
   22c78:	beq	22c84 <__assert_fail@plt+0x1172c>
   22c7c:	add	sp, sp, #36	; 0x24
   22c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c84:	ands	fp, r4, #4
   22c88:	mov	r8, r3
   22c8c:	str	r2, [sp, #28]
   22c90:	mov	r7, r1
   22c94:	mov	r5, r0
   22c98:	bne	22d3c <__assert_fail@plt+0x117e4>
   22c9c:	mov	r0, r1
   22ca0:	bl	11414 <strlen@plt>
   22ca4:	mov	r9, r0
   22ca8:	ldr	r3, [pc, #204]	; 22d7c <__assert_fail@plt+0x11824>
   22cac:	ldr	r1, [pc, #204]	; 22d80 <__assert_fail@plt+0x11828>
   22cb0:	cmp	r3, #0
   22cb4:	mov	r6, #1
   22cb8:	moveq	r6, r3
   22cbc:	cmp	r1, #0
   22cc0:	mov	r3, #1
   22cc4:	moveq	r3, r1
   22cc8:	orr	r6, r6, r3
   22ccc:	ands	r6, r6, #255	; 0xff
   22cd0:	ldr	sl, [r5]
   22cd4:	beq	22ce0 <__assert_fail@plt+0x11788>
   22cd8:	add	r0, sl, #136	; 0x88
   22cdc:	bl	1124c <pthread_mutex_lock@plt>
   22ce0:	ldrb	r3, [r5, #28]
   22ce4:	tst	r3, #16
   22ce8:	beq	22d48 <__assert_fail@plt+0x117f0>
   22cec:	mov	ip, #0
   22cf0:	str	r4, [sp, #16]
   22cf4:	str	r9, [sp, #4]
   22cf8:	str	r9, [sp]
   22cfc:	mov	r3, fp
   22d00:	mov	r2, r9
   22d04:	mov	r1, r7
   22d08:	mov	r0, r5
   22d0c:	str	ip, [sp, #12]
   22d10:	str	ip, [sp, #8]
   22d14:	bl	1ce8c <__assert_fail@plt+0xb934>
   22d18:	mov	r4, r0
   22d1c:	cmp	r6, #0
   22d20:	beq	22d2c <__assert_fail@plt+0x117d4>
   22d24:	add	r0, sl, #136	; 0x88
   22d28:	bl	11198 <pthread_mutex_unlock@plt>
   22d2c:	adds	r0, r4, #0
   22d30:	movne	r0, #1
   22d34:	add	sp, sp, #36	; 0x24
   22d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d3c:	ldr	fp, [r3]
   22d40:	ldr	r9, [r3, #4]
   22d44:	b	22ca8 <__assert_fail@plt+0x11750>
   22d48:	ldr	r3, [sp, #28]
   22d4c:	str	r4, [sp, #16]
   22d50:	str	r3, [sp, #8]
   22d54:	str	r8, [sp, #12]
   22d58:	str	r9, [sp, #4]
   22d5c:	str	r9, [sp]
   22d60:	mov	r3, fp
   22d64:	mov	r2, r9
   22d68:	mov	r1, r7
   22d6c:	mov	r0, r5
   22d70:	bl	1ce8c <__assert_fail@plt+0xb934>
   22d74:	mov	r4, r0
   22d78:	b	22d1c <__assert_fail@plt+0x117c4>
	...
   22d84:	push	{r4, lr}
   22d88:	sub	sp, sp, #16
   22d8c:	mov	lr, #1
   22d90:	ldr	r4, [sp, #24]
   22d94:	mov	ip, #0
   22d98:	str	ip, [sp]
   22d9c:	stmib	sp, {r2, r4, lr}
   22da0:	bl	225e0 <__assert_fail@plt+0x11088>
   22da4:	add	sp, sp, #16
   22da8:	pop	{r4, pc}
   22dac:	push	{r4, lr}
   22db0:	sub	sp, sp, #16
   22db4:	mov	ip, #0
   22db8:	ldr	r4, [sp, #24]
   22dbc:	ldr	lr, [sp, #28]
   22dc0:	str	r2, [sp, #4]
   22dc4:	str	r4, [sp]
   22dc8:	str	lr, [sp, #8]
   22dcc:	str	ip, [sp, #12]
   22dd0:	bl	225e0 <__assert_fail@plt+0x11088>
   22dd4:	add	sp, sp, #16
   22dd8:	pop	{r4, pc}
   22ddc:	push	{r4, r5, lr}
   22de0:	sub	sp, sp, #28
   22de4:	ldr	lr, [sp, #40]	; 0x28
   22de8:	ldr	ip, [sp, #44]	; 0x2c
   22dec:	ldr	r5, [sp, #48]	; 0x30
   22df0:	ldr	r4, [sp, #52]	; 0x34
   22df4:	str	lr, [sp]
   22df8:	str	ip, [sp, #4]
   22dfc:	mov	lr, #1
   22e00:	mov	ip, #0
   22e04:	str	r5, [sp, #12]
   22e08:	str	r4, [sp, #16]
   22e0c:	str	lr, [sp, #20]
   22e10:	str	ip, [sp, #8]
   22e14:	bl	2297c <__assert_fail@plt+0x11424>
   22e18:	add	sp, sp, #28
   22e1c:	pop	{r4, r5, pc}
   22e20:	push	{r4, r5, lr}
   22e24:	sub	sp, sp, #28
   22e28:	ldr	lr, [sp, #40]	; 0x28
   22e2c:	ldr	ip, [sp, #44]	; 0x2c
   22e30:	ldr	r5, [sp, #48]	; 0x30
   22e34:	ldr	r4, [sp, #52]	; 0x34
   22e38:	str	lr, [sp]
   22e3c:	ldr	lr, [sp, #56]	; 0x38
   22e40:	str	ip, [sp, #4]
   22e44:	mov	ip, #0
   22e48:	str	r5, [sp, #8]
   22e4c:	str	r4, [sp, #12]
   22e50:	str	lr, [sp, #16]
   22e54:	str	ip, [sp, #20]
   22e58:	bl	2297c <__assert_fail@plt+0x11424>
   22e5c:	add	sp, sp, #28
   22e60:	pop	{r4, r5, pc}
   22e64:	cmp	r2, #0
   22e68:	bne	22e88 <__assert_fail@plt+0x11930>
   22e6c:	ldrb	r3, [r0, #28]
   22e70:	bic	r3, r3, #6
   22e74:	strb	r3, [r0, #28]
   22e78:	str	r2, [r1]
   22e7c:	str	r2, [r1, #8]
   22e80:	str	r2, [r1, #4]
   22e84:	bx	lr
   22e88:	ldrb	ip, [r0, #28]
   22e8c:	bic	ip, ip, #4
   22e90:	orr	ip, ip, #2
   22e94:	strb	ip, [r0, #28]
   22e98:	stm	r1, {r2, r3}
   22e9c:	ldr	r3, [sp]
   22ea0:	str	r3, [r1, #8]
   22ea4:	bx	lr
   22ea8:	push	{r4, r5, r6, r7, r8, lr}
   22eac:	mov	r8, r0
   22eb0:	ldr	r5, [pc, #84]	; 22f0c <__assert_fail@plt+0x119b4>
   22eb4:	mov	r7, r1
   22eb8:	mov	r4, r2
   22ebc:	mov	r2, r4
   22ec0:	mov	r1, r7
   22ec4:	mov	r0, r8
   22ec8:	bl	11204 <read@plt>
   22ecc:	subs	r6, r0, #0
   22ed0:	bge	22f04 <__assert_fail@plt+0x119ac>
   22ed4:	bl	1142c <__errno_location@plt>
   22ed8:	ldr	r3, [r0]
   22edc:	cmp	r3, #4
   22ee0:	beq	22ebc <__assert_fail@plt+0x11964>
   22ee4:	cmp	r4, r5
   22ee8:	movls	r2, #0
   22eec:	movhi	r2, #1
   22ef0:	cmp	r3, #22
   22ef4:	movne	r2, #0
   22ef8:	cmp	r2, #0
   22efc:	mov	r4, r5
   22f00:	bne	22ebc <__assert_fail@plt+0x11964>
   22f04:	mov	r0, r6
   22f08:	pop	{r4, r5, r6, r7, r8, pc}
   22f0c:	svcvc	0x00f00000	; IMB
   22f10:	mov	r2, #3
   22f14:	mov	r1, #0
   22f18:	b	24960 <__assert_fail@plt+0x13408>
   22f1c:	push	{r4, r5, r6, lr}
   22f20:	sub	sp, sp, #32
   22f24:	cmp	r1, #0
   22f28:	mov	r4, r0
   22f2c:	ldr	r5, [sp, #48]	; 0x30
   22f30:	ldr	r6, [sp, #52]	; 0x34
   22f34:	beq	2324c <__assert_fail@plt+0x11cf4>
   22f38:	stm	sp, {r2, r3}
   22f3c:	mov	r3, r1
   22f40:	ldr	r2, [pc, #808]	; 23270 <__assert_fail@plt+0x11d18>
   22f44:	mov	r1, #1
   22f48:	bl	1148c <__fprintf_chk@plt>
   22f4c:	mov	r2, #5
   22f50:	ldr	r1, [pc, #796]	; 23274 <__assert_fail@plt+0x11d1c>
   22f54:	mov	r0, #0
   22f58:	bl	112d0 <dcgettext@plt>
   22f5c:	ldr	r3, [pc, #788]	; 23278 <__assert_fail@plt+0x11d20>
   22f60:	ldr	r2, [pc, #788]	; 2327c <__assert_fail@plt+0x11d24>
   22f64:	str	r3, [sp]
   22f68:	mov	r1, #1
   22f6c:	mov	r3, r0
   22f70:	mov	r0, r4
   22f74:	bl	1148c <__fprintf_chk@plt>
   22f78:	mov	r1, r4
   22f7c:	mov	r0, #10
   22f80:	bl	112c4 <fputc_unlocked@plt>
   22f84:	mov	r2, #5
   22f88:	ldr	r1, [pc, #752]	; 23280 <__assert_fail@plt+0x11d28>
   22f8c:	mov	r0, #0
   22f90:	bl	112d0 <dcgettext@plt>
   22f94:	mov	r1, #1
   22f98:	ldr	r3, [pc, #740]	; 23284 <__assert_fail@plt+0x11d2c>
   22f9c:	mov	r2, r0
   22fa0:	mov	r0, r4
   22fa4:	bl	1148c <__fprintf_chk@plt>
   22fa8:	mov	r1, r4
   22fac:	mov	r0, #10
   22fb0:	bl	112c4 <fputc_unlocked@plt>
   22fb4:	cmp	r6, #9
   22fb8:	ldrls	pc, [pc, r6, lsl #2]
   22fbc:	b	23264 <__assert_fail@plt+0x11d0c>
   22fc0:	andeq	r3, r2, r4, asr #32
   22fc4:	andeq	r3, r2, ip, asr #32
   22fc8:	andeq	r3, r2, r8, ror r0
   22fcc:	andeq	r3, r2, ip, lsr #1
   22fd0:	andeq	r3, r2, r8, ror #1
   22fd4:	andeq	r3, r2, r4, lsr #2
   22fd8:	andeq	r3, r2, r0, ror #2
   22fdc:	andeq	r3, r2, r4, lsr #3
   22fe0:	strdeq	r3, [r2], -r4
   22fe4:	andeq	r2, r2, r8, ror #31
   22fe8:	ldr	r1, [pc, #664]	; 23288 <__assert_fail@plt+0x11d30>
   22fec:	mov	r2, #5
   22ff0:	mov	r0, #0
   22ff4:	bl	112d0 <dcgettext@plt>
   22ff8:	ldr	ip, [r5, #32]
   22ffc:	ldr	r1, [r5, #28]
   23000:	ldr	r2, [r5, #24]
   23004:	ldr	r3, [r5]
   23008:	ldr	r6, [r5, #20]
   2300c:	str	ip, [sp, #28]
   23010:	ldr	lr, [r5, #16]
   23014:	str	r1, [sp, #24]
   23018:	ldr	ip, [r5, #12]
   2301c:	str	r2, [sp, #20]
   23020:	ldr	r1, [r5, #8]
   23024:	ldr	r2, [r5, #4]
   23028:	str	r6, [sp, #16]
   2302c:	stmib	sp, {r1, ip, lr}
   23030:	mov	r1, #1
   23034:	str	r2, [sp]
   23038:	mov	r2, r0
   2303c:	mov	r0, r4
   23040:	bl	1148c <__fprintf_chk@plt>
   23044:	add	sp, sp, #32
   23048:	pop	{r4, r5, r6, pc}
   2304c:	mov	r2, #5
   23050:	ldr	r1, [pc, #564]	; 2328c <__assert_fail@plt+0x11d34>
   23054:	mov	r0, #0
   23058:	bl	112d0 <dcgettext@plt>
   2305c:	ldr	r3, [r5]
   23060:	mov	r1, #1
   23064:	mov	r2, r0
   23068:	mov	r0, r4
   2306c:	add	sp, sp, #32
   23070:	pop	{r4, r5, r6, lr}
   23074:	b	1148c <__fprintf_chk@plt>
   23078:	mov	r2, #5
   2307c:	ldr	r1, [pc, #524]	; 23290 <__assert_fail@plt+0x11d38>
   23080:	mov	r0, #0
   23084:	bl	112d0 <dcgettext@plt>
   23088:	ldr	r2, [r5, #4]
   2308c:	ldr	r3, [r5]
   23090:	mov	r1, #1
   23094:	str	r2, [sp, #48]	; 0x30
   23098:	mov	r2, r0
   2309c:	mov	r0, r4
   230a0:	add	sp, sp, #32
   230a4:	pop	{r4, r5, r6, lr}
   230a8:	b	1148c <__fprintf_chk@plt>
   230ac:	mov	r2, #5
   230b0:	ldr	r1, [pc, #476]	; 23294 <__assert_fail@plt+0x11d3c>
   230b4:	mov	r0, #0
   230b8:	bl	112d0 <dcgettext@plt>
   230bc:	ldr	r1, [r5, #8]
   230c0:	ldr	r2, [r5, #4]
   230c4:	ldr	r3, [r5]
   230c8:	str	r1, [sp, #52]	; 0x34
   230cc:	str	r2, [sp, #48]	; 0x30
   230d0:	mov	r1, #1
   230d4:	mov	r2, r0
   230d8:	mov	r0, r4
   230dc:	add	sp, sp, #32
   230e0:	pop	{r4, r5, r6, lr}
   230e4:	b	1148c <__fprintf_chk@plt>
   230e8:	mov	r2, #5
   230ec:	ldr	r1, [pc, #420]	; 23298 <__assert_fail@plt+0x11d40>
   230f0:	mov	r0, #0
   230f4:	bl	112d0 <dcgettext@plt>
   230f8:	ldr	r1, [r5, #8]
   230fc:	ldr	ip, [r5, #12]
   23100:	ldr	r2, [r5, #4]
   23104:	ldr	r3, [r5]
   23108:	stmib	sp, {r1, ip}
   2310c:	str	r2, [sp]
   23110:	mov	r1, #1
   23114:	mov	r2, r0
   23118:	mov	r0, r4
   2311c:	bl	1148c <__fprintf_chk@plt>
   23120:	b	23044 <__assert_fail@plt+0x11aec>
   23124:	mov	r2, #5
   23128:	ldr	r1, [pc, #364]	; 2329c <__assert_fail@plt+0x11d44>
   2312c:	mov	r0, #0
   23130:	bl	112d0 <dcgettext@plt>
   23134:	add	r1, r5, #8
   23138:	ldr	r2, [r5, #4]
   2313c:	ldm	r1, {r1, ip, lr}
   23140:	ldr	r3, [r5]
   23144:	str	r2, [sp]
   23148:	stmib	sp, {r1, ip, lr}
   2314c:	mov	r1, #1
   23150:	mov	r2, r0
   23154:	mov	r0, r4
   23158:	bl	1148c <__fprintf_chk@plt>
   2315c:	b	23044 <__assert_fail@plt+0x11aec>
   23160:	mov	r2, #5
   23164:	ldr	r1, [pc, #308]	; 232a0 <__assert_fail@plt+0x11d48>
   23168:	mov	r0, #0
   2316c:	bl	112d0 <dcgettext@plt>
   23170:	add	r1, r5, #8
   23174:	ldr	r2, [r5, #4]
   23178:	ldm	r1, {r1, ip, lr}
   2317c:	ldr	r6, [r5, #20]
   23180:	ldr	r3, [r5]
   23184:	stmib	sp, {r1, ip, lr}
   23188:	mov	r1, #1
   2318c:	str	r2, [sp]
   23190:	str	r6, [sp, #16]
   23194:	mov	r2, r0
   23198:	mov	r0, r4
   2319c:	bl	1148c <__fprintf_chk@plt>
   231a0:	b	23044 <__assert_fail@plt+0x11aec>
   231a4:	mov	r2, #5
   231a8:	ldr	r1, [pc, #244]	; 232a4 <__assert_fail@plt+0x11d4c>
   231ac:	mov	r0, #0
   231b0:	bl	112d0 <dcgettext@plt>
   231b4:	ldr	r2, [r5, #24]
   231b8:	ldr	r3, [r5]
   231bc:	ldr	r6, [r5, #20]
   231c0:	ldr	lr, [r5, #16]
   231c4:	ldr	ip, [r5, #12]
   231c8:	str	r2, [sp, #20]
   231cc:	ldr	r1, [r5, #8]
   231d0:	ldr	r2, [r5, #4]
   231d4:	str	r6, [sp, #16]
   231d8:	stmib	sp, {r1, ip, lr}
   231dc:	mov	r1, #1
   231e0:	str	r2, [sp]
   231e4:	mov	r2, r0
   231e8:	mov	r0, r4
   231ec:	bl	1148c <__fprintf_chk@plt>
   231f0:	b	23044 <__assert_fail@plt+0x11aec>
   231f4:	mov	r2, #5
   231f8:	ldr	r1, [pc, #168]	; 232a8 <__assert_fail@plt+0x11d50>
   231fc:	mov	r0, #0
   23200:	bl	112d0 <dcgettext@plt>
   23204:	ldr	r1, [r5, #28]
   23208:	ldr	r2, [r5, #24]
   2320c:	ldr	r3, [r5]
   23210:	ldr	r6, [r5, #20]
   23214:	ldr	lr, [r5, #16]
   23218:	str	r1, [sp, #24]
   2321c:	ldr	ip, [r5, #12]
   23220:	str	r2, [sp, #20]
   23224:	ldr	r1, [r5, #8]
   23228:	ldr	r2, [r5, #4]
   2322c:	str	r6, [sp, #16]
   23230:	stmib	sp, {r1, ip, lr}
   23234:	mov	r1, #1
   23238:	str	r2, [sp]
   2323c:	mov	r2, r0
   23240:	mov	r0, r4
   23244:	bl	1148c <__fprintf_chk@plt>
   23248:	b	23044 <__assert_fail@plt+0x11aec>
   2324c:	str	r3, [sp]
   23250:	mov	r1, #1
   23254:	mov	r3, r2
   23258:	ldr	r2, [pc, #76]	; 232ac <__assert_fail@plt+0x11d54>
   2325c:	bl	1148c <__fprintf_chk@plt>
   23260:	b	22f4c <__assert_fail@plt+0x119f4>
   23264:	mov	r2, #5
   23268:	ldr	r1, [pc, #64]	; 232b0 <__assert_fail@plt+0x11d58>
   2326c:	b	22ff0 <__assert_fail@plt+0x11a98>
   23270:	ldrdeq	r6, [r2], -r0
   23274:	andeq	r6, r2, r4, ror #7
   23278:	andeq	r0, r0, r6, ror #15
   2327c:			; <UNDEFINED> instruction: 0x000266bc
   23280:	andeq	r6, r2, r8, ror #7
   23284:	muleq	r2, r4, r4
   23288:	andeq	r6, r2, r4, asr #11
   2328c:			; <UNDEFINED> instruction: 0x000264b8
   23290:	andeq	r6, r2, r8, asr #9
   23294:	andeq	r6, r2, r0, ror #9
   23298:	strdeq	r6, [r2], -ip
   2329c:	andeq	r6, r2, ip, lsl r5
   232a0:	andeq	r6, r2, r0, asr #10
   232a4:	andeq	r6, r2, r8, ror #10
   232a8:	muleq	r2, r4, r5
   232ac:	ldrdeq	r6, [r2], -ip
   232b0:	strdeq	r6, [r2], -r8
   232b4:	push	{r4, r5, lr}
   232b8:	sub	sp, sp, #12
   232bc:	ldr	r5, [sp, #24]
   232c0:	ldr	ip, [r5]
   232c4:	cmp	ip, #0
   232c8:	beq	232e4 <__assert_fail@plt+0x11d8c>
   232cc:	mov	lr, r5
   232d0:	mov	ip, #0
   232d4:	ldr	r4, [lr, #4]!
   232d8:	add	ip, ip, #1
   232dc:	cmp	r4, #0
   232e0:	bne	232d4 <__assert_fail@plt+0x11d7c>
   232e4:	stm	sp, {r5, ip}
   232e8:	bl	22f1c <__assert_fail@plt+0x119c4>
   232ec:	add	sp, sp, #12
   232f0:	pop	{r4, r5, pc}
   232f4:	push	{r4, r5, lr}
   232f8:	sub	sp, sp, #52	; 0x34
   232fc:	add	r5, sp, #4
   23300:	ldr	r4, [sp, #64]	; 0x40
   23304:	mov	ip, #0
   23308:	sub	r4, r4, #4
   2330c:	ldr	lr, [r4, #4]!
   23310:	cmp	lr, #0
   23314:	str	lr, [r5, #4]!
   23318:	beq	23328 <__assert_fail@plt+0x11dd0>
   2331c:	add	ip, ip, #1
   23320:	cmp	ip, #10
   23324:	bne	2330c <__assert_fail@plt+0x11db4>
   23328:	add	lr, sp, #8
   2332c:	str	ip, [sp, #4]
   23330:	str	lr, [sp]
   23334:	bl	22f1c <__assert_fail@plt+0x119c4>
   23338:	add	sp, sp, #52	; 0x34
   2333c:	pop	{r4, r5, pc}
   23340:	push	{r3}		; (str r3, [sp, #-4]!)
   23344:	push	{r4, lr}
   23348:	sub	sp, sp, #60	; 0x3c
   2334c:	add	lr, sp, #56	; 0x38
   23350:	add	r3, sp, #72	; 0x48
   23354:	str	r3, [lr, #-44]!	; 0xffffffd4
   23358:	add	r4, sp, #68	; 0x44
   2335c:	mov	r3, #0
   23360:	ldr	ip, [r4, #4]!
   23364:	cmp	ip, #0
   23368:	str	ip, [lr, #4]!
   2336c:	beq	2337c <__assert_fail@plt+0x11e24>
   23370:	add	r3, r3, #1
   23374:	cmp	r3, #10
   23378:	bne	23360 <__assert_fail@plt+0x11e08>
   2337c:	add	ip, sp, #16
   23380:	str	r3, [sp, #4]
   23384:	str	ip, [sp]
   23388:	ldr	r3, [sp, #68]	; 0x44
   2338c:	bl	22f1c <__assert_fail@plt+0x119c4>
   23390:	add	sp, sp, #60	; 0x3c
   23394:	pop	{r4, lr}
   23398:	add	sp, sp, #4
   2339c:	bx	lr
   233a0:	ldr	r3, [pc, #116]	; 2341c <__assert_fail@plt+0x11ec4>
   233a4:	push	{r4, lr}
   233a8:	mov	r0, #10
   233ac:	ldr	r1, [r3]
   233b0:	bl	112c4 <fputc_unlocked@plt>
   233b4:	mov	r2, #5
   233b8:	ldr	r1, [pc, #96]	; 23420 <__assert_fail@plt+0x11ec8>
   233bc:	mov	r0, #0
   233c0:	bl	112d0 <dcgettext@plt>
   233c4:	ldr	r2, [pc, #88]	; 23424 <__assert_fail@plt+0x11ecc>
   233c8:	mov	r1, r0
   233cc:	mov	r0, #1
   233d0:	bl	11474 <__printf_chk@plt>
   233d4:	mov	r2, #5
   233d8:	ldr	r1, [pc, #72]	; 23428 <__assert_fail@plt+0x11ed0>
   233dc:	mov	r0, #0
   233e0:	bl	112d0 <dcgettext@plt>
   233e4:	ldr	r3, [pc, #64]	; 2342c <__assert_fail@plt+0x11ed4>
   233e8:	ldr	r2, [pc, #64]	; 23430 <__assert_fail@plt+0x11ed8>
   233ec:	mov	r1, r0
   233f0:	mov	r0, #1
   233f4:	bl	11474 <__printf_chk@plt>
   233f8:	mov	r2, #5
   233fc:	ldr	r1, [pc, #48]	; 23434 <__assert_fail@plt+0x11edc>
   23400:	mov	r0, #0
   23404:	bl	112d0 <dcgettext@plt>
   23408:	ldr	r2, [pc, #40]	; 23438 <__assert_fail@plt+0x11ee0>
   2340c:	pop	{r4, lr}
   23410:	mov	r1, r0
   23414:	mov	r0, #1
   23418:	b	11474 <__printf_chk@plt>
   2341c:			; <UNDEFINED> instruction: 0x000371bc
   23420:	andeq	r6, r2, r4, lsr r6
   23424:	andeq	r6, r2, r8, asr #12
   23428:	andeq	r6, r2, r0, ror #12
   2342c:	andeq	r5, r2, r0, asr #22
   23430:	andeq	r5, r2, r8, ror #22
   23434:	andeq	r6, r2, r4, ror r6
   23438:	muleq	r2, ip, r6
   2343c:	push	{r4, lr}
   23440:	bl	24794 <__assert_fail@plt+0x1323c>
   23444:	cmp	r0, #0
   23448:	popne	{r4, pc}
   2344c:	bl	12c28 <__assert_fail@plt+0x16d0>
   23450:	push	{r4, lr}
   23454:	bl	24794 <__assert_fail@plt+0x1323c>
   23458:	cmp	r0, #0
   2345c:	popne	{r4, pc}
   23460:	bl	12c28 <__assert_fail@plt+0x16d0>
   23464:	push	{r4, lr}
   23468:	bl	24794 <__assert_fail@plt+0x1323c>
   2346c:	cmp	r0, #0
   23470:	popne	{r4, pc}
   23474:	bl	12c28 <__assert_fail@plt+0x16d0>
   23478:	push	{r4, r5, r6, lr}
   2347c:	mov	r5, r0
   23480:	mov	r4, r1
   23484:	bl	247c0 <__assert_fail@plt+0x13268>
   23488:	cmp	r0, #0
   2348c:	popne	{r4, r5, r6, pc}
   23490:	adds	r4, r4, #0
   23494:	movne	r4, #1
   23498:	cmp	r5, #0
   2349c:	orreq	r4, r4, #1
   234a0:	cmp	r4, #0
   234a4:	popeq	{r4, r5, r6, pc}
   234a8:	bl	12c28 <__assert_fail@plt+0x16d0>
   234ac:	push	{r4, lr}
   234b0:	cmp	r1, #0
   234b4:	orreq	r1, r1, #1
   234b8:	bl	247c0 <__assert_fail@plt+0x13268>
   234bc:	cmp	r0, #0
   234c0:	popne	{r4, pc}
   234c4:	bl	12c28 <__assert_fail@plt+0x16d0>
   234c8:	push	{r4, r5, r6, lr}
   234cc:	mov	r6, r0
   234d0:	mov	r5, r1
   234d4:	mov	r4, r2
   234d8:	bl	24bbc <__assert_fail@plt+0x13664>
   234dc:	cmp	r0, #0
   234e0:	popne	{r4, r5, r6, pc}
   234e4:	cmp	r6, #0
   234e8:	beq	234f8 <__assert_fail@plt+0x11fa0>
   234ec:	cmp	r5, #0
   234f0:	cmpne	r4, #0
   234f4:	popeq	{r4, r5, r6, pc}
   234f8:	bl	12c28 <__assert_fail@plt+0x16d0>
   234fc:	b	234c8 <__assert_fail@plt+0x11f70>
   23500:	cmp	r2, #0
   23504:	cmpne	r1, #0
   23508:	moveq	r2, #1
   2350c:	moveq	r1, r2
   23510:	push	{r4, lr}
   23514:	bl	24bbc <__assert_fail@plt+0x13664>
   23518:	cmp	r0, #0
   2351c:	popne	{r4, pc}
   23520:	bl	12c28 <__assert_fail@plt+0x16d0>
   23524:	mov	r2, r1
   23528:	mov	r1, r0
   2352c:	mov	r0, #0
   23530:	b	234c8 <__assert_fail@plt+0x11f70>
   23534:	mov	r2, r1
   23538:	mov	r1, r0
   2353c:	mov	r0, #0
   23540:	b	23500 <__assert_fail@plt+0x11fa8>
   23544:	push	{r4, r5, r6, lr}
   23548:	subs	r6, r0, #0
   2354c:	sub	sp, sp, #8
   23550:	mov	r5, r1
   23554:	ldr	r4, [r1]
   23558:	beq	23594 <__assert_fail@plt+0x1203c>
   2355c:	lsr	r1, r4, #1
   23560:	add	r3, r1, #1
   23564:	mvn	r3, r3
   23568:	cmp	r4, r3
   2356c:	bhi	23590 <__assert_fail@plt+0x12038>
   23570:	add	r4, r4, #1
   23574:	add	r4, r4, r1
   23578:	mov	r0, r6
   2357c:	mov	r1, r4
   23580:	bl	234c8 <__assert_fail@plt+0x11f70>
   23584:	str	r4, [r5]
   23588:	add	sp, sp, #8
   2358c:	pop	{r4, r5, r6, pc}
   23590:	bl	12c28 <__assert_fail@plt+0x16d0>
   23594:	cmp	r4, #0
   23598:	bne	23578 <__assert_fail@plt+0x12020>
   2359c:	mov	r1, r2
   235a0:	mov	r0, #64	; 0x40
   235a4:	str	r2, [sp, #4]
   235a8:	bl	24cfc <__assert_fail@plt+0x137a4>
   235ac:	ldr	r2, [sp, #4]
   235b0:	cmp	r0, #0
   235b4:	movne	r4, r0
   235b8:	addeq	r4, r0, #1
   235bc:	b	23578 <__assert_fail@plt+0x12020>
   235c0:	mov	r2, #1
   235c4:	b	23544 <__assert_fail@plt+0x11fec>
   235c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   235cc:	sub	sp, sp, #12
   235d0:	ldr	r6, [r1]
   235d4:	mov	sl, r1
   235d8:	mov	r9, r0
   235dc:	asrs	r4, r6, #1
   235e0:	mov	r5, r2
   235e4:	mov	fp, r3
   235e8:	ldr	r7, [sp, #48]	; 0x30
   235ec:	bmi	23758 <__assert_fail@plt+0x12200>
   235f0:	mvn	r3, #-2147483648	; 0x80000000
   235f4:	sub	r3, r3, r4
   235f8:	cmp	r6, r3
   235fc:	movle	r3, #0
   23600:	movgt	r3, #1
   23604:	mvn	r8, fp
   23608:	cmp	r3, #0
   2360c:	addeq	r4, r4, r6
   23610:	mvnne	r4, #-2147483648	; 0x80000000
   23614:	lsr	r8, r8, #31
   23618:	cmp	fp, r4
   2361c:	movge	r3, #0
   23620:	andlt	r3, r8, #1
   23624:	cmp	r3, #0
   23628:	beq	23710 <__assert_fail@plt+0x121b8>
   2362c:	cmp	r7, #0
   23630:	blt	237e0 <__assert_fail@plt+0x12288>
   23634:	bne	237d8 <__assert_fail@plt+0x12280>
   23638:	mov	r2, #64	; 0x40
   2363c:	mov	r1, r7
   23640:	mov	r0, r2
   23644:	str	r2, [sp, #4]
   23648:	bl	24f08 <__assert_fail@plt+0x139b0>
   2364c:	ldr	r2, [sp, #4]
   23650:	mov	r1, r7
   23654:	mov	r4, r0
   23658:	mov	r0, r2
   2365c:	bl	25128 <__assert_fail@plt+0x13bd0>
   23660:	ldr	r2, [sp, #4]
   23664:	sub	r1, r2, r1
   23668:	cmp	r9, #0
   2366c:	sub	r3, r4, r6
   23670:	streq	r9, [sl]
   23674:	cmp	r3, r5
   23678:	bge	236fc <__assert_fail@plt+0x121a4>
   2367c:	cmp	r5, #0
   23680:	blt	2376c <__assert_fail@plt+0x12214>
   23684:	cmp	r6, #0
   23688:	blt	236a8 <__assert_fail@plt+0x12150>
   2368c:	mvn	r3, #-2147483648	; 0x80000000
   23690:	sub	r3, r3, r5
   23694:	cmp	r6, r3
   23698:	movle	r3, #0
   2369c:	movgt	r3, #1
   236a0:	cmp	r3, #0
   236a4:	bne	23868 <__assert_fail@plt+0x12310>
   236a8:	add	r5, r6, r5
   236ac:	cmp	fp, r5
   236b0:	movge	r8, #0
   236b4:	andlt	r8, r8, #1
   236b8:	cmp	r8, #0
   236bc:	mov	r4, r5
   236c0:	bne	23868 <__assert_fail@plt+0x12310>
   236c4:	cmp	r7, #0
   236c8:	blt	23780 <__assert_fail@plt+0x12228>
   236cc:	beq	236f8 <__assert_fail@plt+0x121a0>
   236d0:	cmp	r5, #0
   236d4:	blt	23828 <__assert_fail@plt+0x122d0>
   236d8:	mov	r1, r7
   236dc:	mvn	r0, #-2147483648	; 0x80000000
   236e0:	bl	24f08 <__assert_fail@plt+0x139b0>
   236e4:	cmp	r5, r0
   236e8:	movle	r0, #0
   236ec:	movgt	r0, #1
   236f0:	cmp	r0, #0
   236f4:	bne	23868 <__assert_fail@plt+0x12310>
   236f8:	mul	r1, r5, r7
   236fc:	mov	r0, r9
   23700:	bl	23478 <__assert_fail@plt+0x11f20>
   23704:	str	r4, [sl]
   23708:	add	sp, sp, #12
   2370c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23710:	cmp	r7, #0
   23714:	blt	237ac <__assert_fail@plt+0x12254>
   23718:	beq	23638 <__assert_fail@plt+0x120e0>
   2371c:	cmp	r4, #0
   23720:	blt	237e8 <__assert_fail@plt+0x12290>
   23724:	mov	r1, r7
   23728:	mvn	r0, #-2147483648	; 0x80000000
   2372c:	bl	24f08 <__assert_fail@plt+0x139b0>
   23730:	cmp	r0, r4
   23734:	movge	r0, #0
   23738:	movlt	r0, #1
   2373c:	cmp	r0, #0
   23740:	mvnne	r2, #-2147483648	; 0x80000000
   23744:	bne	2363c <__assert_fail@plt+0x120e4>
   23748:	mul	r1, r7, r4
   2374c:	cmp	r1, #63	; 0x3f
   23750:	bgt	23668 <__assert_fail@plt+0x12110>
   23754:	b	23638 <__assert_fail@plt+0x120e0>
   23758:	rsb	r3, r4, #-2147483648	; 0x80000000
   2375c:	cmp	r6, r3
   23760:	movge	r3, #0
   23764:	movlt	r3, #1
   23768:	b	23604 <__assert_fail@plt+0x120ac>
   2376c:	rsb	r3, r5, #-2147483648	; 0x80000000
   23770:	cmp	r6, r3
   23774:	movge	r3, #0
   23778:	movlt	r3, #1
   2377c:	b	236a0 <__assert_fail@plt+0x12148>
   23780:	cmp	r5, #0
   23784:	blt	2380c <__assert_fail@plt+0x122b4>
   23788:	cmn	r7, #1
   2378c:	beq	236f8 <__assert_fail@plt+0x121a0>
   23790:	mov	r1, r7
   23794:	mov	r0, #-2147483648	; 0x80000000
   23798:	bl	24f08 <__assert_fail@plt+0x139b0>
   2379c:	cmp	r5, r0
   237a0:	movle	r0, #0
   237a4:	movgt	r0, #1
   237a8:	b	236f0 <__assert_fail@plt+0x12198>
   237ac:	cmp	r4, #0
   237b0:	blt	2384c <__assert_fail@plt+0x122f4>
   237b4:	cmn	r7, #1
   237b8:	beq	23748 <__assert_fail@plt+0x121f0>
   237bc:	mov	r1, r7
   237c0:	mov	r0, #-2147483648	; 0x80000000
   237c4:	bl	24f08 <__assert_fail@plt+0x139b0>
   237c8:	cmp	r0, r4
   237cc:	movge	r0, #0
   237d0:	movlt	r0, #1
   237d4:	b	2373c <__assert_fail@plt+0x121e4>
   237d8:	mov	r4, fp
   237dc:	b	23724 <__assert_fail@plt+0x121cc>
   237e0:	mov	r4, fp
   237e4:	b	237b4 <__assert_fail@plt+0x1225c>
   237e8:	cmn	r4, #1
   237ec:	beq	23748 <__assert_fail@plt+0x121f0>
   237f0:	mov	r1, r4
   237f4:	mov	r0, #-2147483648	; 0x80000000
   237f8:	bl	24f08 <__assert_fail@plt+0x139b0>
   237fc:	cmp	r7, r0
   23800:	movle	r0, #0
   23804:	movgt	r0, #1
   23808:	b	2373c <__assert_fail@plt+0x121e4>
   2380c:	mov	r1, r7
   23810:	mvn	r0, #-2147483648	; 0x80000000
   23814:	bl	24f08 <__assert_fail@plt+0x139b0>
   23818:	cmp	r5, r0
   2381c:	movge	r0, #0
   23820:	movlt	r0, #1
   23824:	b	236f0 <__assert_fail@plt+0x12198>
   23828:	cmn	r5, #1
   2382c:	beq	236f8 <__assert_fail@plt+0x121a0>
   23830:	mov	r1, r5
   23834:	mov	r0, #-2147483648	; 0x80000000
   23838:	bl	24f08 <__assert_fail@plt+0x139b0>
   2383c:	cmp	r7, r0
   23840:	movle	r0, #0
   23844:	movgt	r0, #1
   23848:	b	236f0 <__assert_fail@plt+0x12198>
   2384c:	mov	r1, r7
   23850:	mvn	r0, #-2147483648	; 0x80000000
   23854:	bl	24f08 <__assert_fail@plt+0x139b0>
   23858:	cmp	r0, r4
   2385c:	movle	r0, #0
   23860:	movgt	r0, #1
   23864:	b	2373c <__assert_fail@plt+0x121e4>
   23868:	bl	12c28 <__assert_fail@plt+0x16d0>
   2386c:	push	{r4, lr}
   23870:	mov	r1, #1
   23874:	bl	2474c <__assert_fail@plt+0x131f4>
   23878:	cmp	r0, #0
   2387c:	popne	{r4, pc}
   23880:	bl	12c28 <__assert_fail@plt+0x16d0>
   23884:	push	{r4, lr}
   23888:	mov	r1, #1
   2388c:	bl	2474c <__assert_fail@plt+0x131f4>
   23890:	cmp	r0, #0
   23894:	popne	{r4, pc}
   23898:	bl	12c28 <__assert_fail@plt+0x16d0>
   2389c:	push	{r4, lr}
   238a0:	bl	2474c <__assert_fail@plt+0x131f4>
   238a4:	cmp	r0, #0
   238a8:	popne	{r4, pc}
   238ac:	bl	12c28 <__assert_fail@plt+0x16d0>
   238b0:	push	{r4, lr}
   238b4:	bl	2474c <__assert_fail@plt+0x131f4>
   238b8:	cmp	r0, #0
   238bc:	popne	{r4, pc}
   238c0:	bl	12c28 <__assert_fail@plt+0x16d0>
   238c4:	push	{r4, r5, r6, lr}
   238c8:	mov	r6, r0
   238cc:	mov	r0, r1
   238d0:	mov	r4, r1
   238d4:	bl	24794 <__assert_fail@plt+0x1323c>
   238d8:	subs	r5, r0, #0
   238dc:	beq	238f4 <__assert_fail@plt+0x1239c>
   238e0:	mov	r2, r4
   238e4:	mov	r1, r6
   238e8:	bl	11264 <memcpy@plt>
   238ec:	mov	r0, r5
   238f0:	pop	{r4, r5, r6, pc}
   238f4:	bl	12c28 <__assert_fail@plt+0x16d0>
   238f8:	push	{r4, r5, r6, lr}
   238fc:	mov	r6, r0
   23900:	mov	r0, r1
   23904:	mov	r4, r1
   23908:	bl	24794 <__assert_fail@plt+0x1323c>
   2390c:	subs	r5, r0, #0
   23910:	beq	23928 <__assert_fail@plt+0x123d0>
   23914:	mov	r2, r4
   23918:	mov	r1, r6
   2391c:	bl	11264 <memcpy@plt>
   23920:	mov	r0, r5
   23924:	pop	{r4, r5, r6, pc}
   23928:	bl	12c28 <__assert_fail@plt+0x16d0>
   2392c:	push	{r4, r5, r6, lr}
   23930:	mov	r6, r0
   23934:	add	r0, r1, #1
   23938:	mov	r4, r1
   2393c:	bl	24794 <__assert_fail@plt+0x1323c>
   23940:	subs	r5, r0, #0
   23944:	beq	23964 <__assert_fail@plt+0x1240c>
   23948:	mov	r3, #0
   2394c:	mov	r1, r6
   23950:	strb	r3, [r5, r4]
   23954:	mov	r2, r4
   23958:	bl	11264 <memcpy@plt>
   2395c:	mov	r0, r5
   23960:	pop	{r4, r5, r6, pc}
   23964:	bl	12c28 <__assert_fail@plt+0x16d0>
   23968:	push	{r4, lr}
   2396c:	mov	r4, r0
   23970:	bl	11414 <strlen@plt>
   23974:	add	r1, r0, #1
   23978:	mov	r0, r4
   2397c:	pop	{r4, lr}
   23980:	b	238c4 <__assert_fail@plt+0x1236c>
   23984:	push	{r4, r5, r6, r7, lr}
   23988:	sub	sp, sp, #20
   2398c:	mov	r6, r2
   23990:	ldr	ip, [sp, #48]	; 0x30
   23994:	mov	r2, r1
   23998:	mov	r7, r3
   2399c:	str	ip, [sp]
   239a0:	add	r3, sp, #8
   239a4:	mov	r1, #0
   239a8:	mov	r5, r0
   239ac:	ldr	r4, [sp, #56]	; 0x38
   239b0:	bl	23c2c <__assert_fail@plt+0x126d4>
   239b4:	cmp	r0, #0
   239b8:	bne	23a34 <__assert_fail@plt+0x124dc>
   239bc:	ldrd	r0, [sp, #8]
   239c0:	cmp	r0, r6
   239c4:	sbcs	r3, r1, r7
   239c8:	ldrd	r6, [sp, #40]	; 0x28
   239cc:	movlt	r3, #1
   239d0:	movge	r3, #0
   239d4:	cmp	r6, r0
   239d8:	sbcs	r2, r7, r1
   239dc:	orrlt	r3, r3, #1
   239e0:	cmp	r3, #0
   239e4:	beq	23a2c <__assert_fail@plt+0x124d4>
   239e8:	cmp	r0, #1073741824	; 0x40000000
   239ec:	sbcs	r3, r1, #0
   239f0:	blt	23a60 <__assert_fail@plt+0x12508>
   239f4:	bl	1142c <__errno_location@plt>
   239f8:	mov	r3, #75	; 0x4b
   239fc:	mov	r6, r3
   23a00:	str	r3, [r0]
   23a04:	cmp	r4, #0
   23a08:	moveq	r4, #1
   23a0c:	mov	r0, r5
   23a10:	bl	15990 <__assert_fail@plt+0x4438>
   23a14:	mov	r1, r6
   23a18:	ldr	r3, [sp, #52]	; 0x34
   23a1c:	ldr	r2, [pc, #164]	; 23ac8 <__assert_fail@plt+0x12570>
   23a20:	str	r0, [sp]
   23a24:	mov	r0, r4
   23a28:	bl	11384 <error@plt>
   23a2c:	add	sp, sp, #20
   23a30:	pop	{r4, r5, r6, r7, pc}
   23a34:	cmp	r0, #1
   23a38:	beq	23a88 <__assert_fail@plt+0x12530>
   23a3c:	cmp	r0, #3
   23a40:	beq	23ab8 <__assert_fail@plt+0x12560>
   23a44:	cmp	r4, #0
   23a48:	beq	23aa8 <__assert_fail@plt+0x12550>
   23a4c:	bl	1142c <__errno_location@plt>
   23a50:	ldr	r6, [r0]
   23a54:	cmp	r6, #22
   23a58:	moveq	r6, #0
   23a5c:	b	23a0c <__assert_fail@plt+0x124b4>
   23a60:	mov	r2, #-1073741824	; 0xc0000000
   23a64:	mvn	r3, #0
   23a68:	cmp	r0, r2
   23a6c:	sbcs	r3, r1, r3
   23a70:	blt	239f4 <__assert_fail@plt+0x1249c>
   23a74:	bl	1142c <__errno_location@plt>
   23a78:	mov	r3, #34	; 0x22
   23a7c:	mov	r6, r3
   23a80:	str	r3, [r0]
   23a84:	b	23a04 <__assert_fail@plt+0x124ac>
   23a88:	bl	1142c <__errno_location@plt>
   23a8c:	mov	r3, #75	; 0x4b
   23a90:	mov	r6, r3
   23a94:	str	r3, [r0]
   23a98:	cmp	r4, #0
   23a9c:	moveq	r4, #1
   23aa0:	bne	23a54 <__assert_fail@plt+0x124fc>
   23aa4:	b	23a0c <__assert_fail@plt+0x124b4>
   23aa8:	bl	1142c <__errno_location@plt>
   23aac:	mov	r4, #1
   23ab0:	ldr	r6, [r0]
   23ab4:	b	23a54 <__assert_fail@plt+0x124fc>
   23ab8:	bl	1142c <__errno_location@plt>
   23abc:	mov	r6, #0
   23ac0:	str	r6, [r0]
   23ac4:	b	23a98 <__assert_fail@plt+0x12540>
   23ac8:	andeq	r6, r2, r8, rrx
   23acc:	push	{r4, r5}
   23ad0:	mov	r1, #10
   23ad4:	pop	{r4, r5}
   23ad8:	b	23984 <__assert_fail@plt+0x1242c>
   23adc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23ae0:	subs	r5, r1, #0
   23ae4:	mov	r4, r0
   23ae8:	blt	23b44 <__assert_fail@plt+0x125ec>
   23aec:	moveq	r6, #0
   23af0:	moveq	r7, #0
   23af4:	beq	23b8c <__assert_fail@plt+0x12634>
   23af8:	ldrd	r8, [r0]
   23afc:	cmp	r8, #0
   23b00:	sbcs	r3, r9, #0
   23b04:	blt	23be4 <__assert_fail@plt+0x1268c>
   23b08:	asr	r7, r5, #31
   23b0c:	mov	r3, r7
   23b10:	mov	r2, r5
   23b14:	mvn	r0, #0
   23b18:	mvn	r1, #-2147483648	; 0x80000000
   23b1c:	bl	25148 <__assert_fail@plt+0x13bf0>
   23b20:	mov	r6, r5
   23b24:	cmp	r0, r8
   23b28:	sbcs	r3, r1, r9
   23b2c:	bge	23b8c <__assert_fail@plt+0x12634>
   23b30:	mvn	r2, #0
   23b34:	mvn	r3, #-2147483648	; 0x80000000
   23b38:	mov	r0, #1
   23b3c:	strd	r2, [r4]
   23b40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23b44:	ldrd	r8, [r0]
   23b48:	cmp	r8, #0
   23b4c:	sbcs	r3, r9, #0
   23b50:	blt	23bb0 <__assert_fail@plt+0x12658>
   23b54:	cmn	r5, #1
   23b58:	mvneq	r6, #0
   23b5c:	mvneq	r7, #0
   23b60:	beq	23b8c <__assert_fail@plt+0x12634>
   23b64:	asr	r7, r5, #31
   23b68:	mov	r3, r7
   23b6c:	mov	r2, r5
   23b70:	mov	r0, #0
   23b74:	mov	r1, #-2147483648	; 0x80000000
   23b78:	bl	25148 <__assert_fail@plt+0x13bf0>
   23b7c:	mov	r6, r5
   23b80:	cmp	r0, r8
   23b84:	sbcs	r3, r1, r9
   23b88:	blt	23b30 <__assert_fail@plt+0x125d8>
   23b8c:	ldr	r2, [r4]
   23b90:	ldr	r1, [r4, #4]
   23b94:	mov	r0, #0
   23b98:	mul	ip, r2, r7
   23b9c:	umull	r2, r3, r2, r5
   23ba0:	mla	r5, r5, r1, ip
   23ba4:	add	r3, r5, r3
   23ba8:	strd	r2, [r4]
   23bac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23bb0:	asr	r7, r5, #31
   23bb4:	mov	r3, r7
   23bb8:	mov	r2, r5
   23bbc:	mvn	r0, #0
   23bc0:	mvn	r1, #-2147483648	; 0x80000000
   23bc4:	bl	25148 <__assert_fail@plt+0x13bf0>
   23bc8:	mov	r6, r5
   23bcc:	cmp	r8, r0
   23bd0:	sbcs	r3, r9, r1
   23bd4:	bge	23b8c <__assert_fail@plt+0x12634>
   23bd8:	mov	r2, #0
   23bdc:	mov	r3, #-2147483648	; 0x80000000
   23be0:	b	23b38 <__assert_fail@plt+0x125e0>
   23be4:	mvn	r3, #0
   23be8:	cmp	r9, r3
   23bec:	mvn	r2, #0
   23bf0:	cmpeq	r8, r2
   23bf4:	moveq	r6, r5
   23bf8:	asreq	r7, r6, #31
   23bfc:	beq	23b8c <__assert_fail@plt+0x12634>
   23c00:	mov	r3, r9
   23c04:	mov	r2, r8
   23c08:	mov	r0, #0
   23c0c:	mov	r1, #-2147483648	; 0x80000000
   23c10:	bl	25148 <__assert_fail@plt+0x13bf0>
   23c14:	asr	r7, r5, #31
   23c18:	mov	r6, r5
   23c1c:	cmp	r0, r5
   23c20:	sbcs	r3, r1, r7
   23c24:	blt	23bd8 <__assert_fail@plt+0x12680>
   23c28:	b	23b8c <__assert_fail@plt+0x12634>
   23c2c:	cmp	r2, #36	; 0x24
   23c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c34:	sub	sp, sp, #20
   23c38:	bhi	240ec <__assert_fail@plt+0x12b94>
   23c3c:	cmp	r1, #0
   23c40:	mov	r6, r1
   23c44:	mov	r5, r2
   23c48:	addeq	r6, sp, #4
   23c4c:	mov	r8, r0
   23c50:	mov	r7, r3
   23c54:	bl	1142c <__errno_location@plt>
   23c58:	mov	r4, #0
   23c5c:	mov	r2, r5
   23c60:	mov	r3, r4
   23c64:	mov	r1, r6
   23c68:	str	r4, [r0]
   23c6c:	mov	r9, r0
   23c70:	mov	r0, r8
   23c74:	bl	114f8 <__strtoll_internal@plt>
   23c78:	ldr	r5, [r6]
   23c7c:	cmp	r8, r5
   23c80:	strd	r0, [sp, #8]
   23c84:	beq	23cd4 <__assert_fail@plt+0x1277c>
   23c88:	ldr	r4, [r9]
   23c8c:	cmp	r4, #0
   23c90:	bne	23cbc <__assert_fail@plt+0x12764>
   23c94:	ldr	r3, [sp, #56]	; 0x38
   23c98:	cmp	r3, #0
   23c9c:	beq	23cac <__assert_fail@plt+0x12754>
   23ca0:	ldrb	r8, [r5]
   23ca4:	cmp	r8, #0
   23ca8:	bne	23d0c <__assert_fail@plt+0x127b4>
   23cac:	strd	r0, [r7]
   23cb0:	mov	r0, r4
   23cb4:	add	sp, sp, #20
   23cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23cbc:	cmp	r4, #34	; 0x22
   23cc0:	beq	23f1c <__assert_fail@plt+0x129c4>
   23cc4:	mov	r4, #4
   23cc8:	mov	r0, r4
   23ccc:	add	sp, sp, #20
   23cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23cd4:	ldr	r3, [sp, #56]	; 0x38
   23cd8:	cmp	r3, r4
   23cdc:	beq	23cc4 <__assert_fail@plt+0x1276c>
   23ce0:	ldrb	r1, [r5]
   23ce4:	cmp	r1, r4
   23ce8:	beq	23cc4 <__assert_fail@plt+0x1276c>
   23cec:	mov	r0, r3
   23cf0:	bl	11420 <strchr@plt>
   23cf4:	cmp	r0, r4
   23cf8:	beq	23cc4 <__assert_fail@plt+0x1276c>
   23cfc:	ldrb	r8, [r5]
   23d00:	mov	r2, #1
   23d04:	mov	r3, #0
   23d08:	strd	r2, [sp, #8]
   23d0c:	mov	r1, r8
   23d10:	ldr	r0, [sp, #56]	; 0x38
   23d14:	bl	11420 <strchr@plt>
   23d18:	cmp	r0, #0
   23d1c:	beq	240dc <__assert_fail@plt+0x12b84>
   23d20:	sub	r3, r8, #69	; 0x45
   23d24:	cmp	r3, #47	; 0x2f
   23d28:	ldrls	pc, [pc, r3, lsl #2]
   23d2c:	b	23df0 <__assert_fail@plt+0x12898>
   23d30:	andeq	r3, r2, r0, ror #29
   23d34:	strdeq	r3, [r2], -r0
   23d38:	andeq	r3, r2, r0, ror #29
   23d3c:	strdeq	r3, [r2], -r0
   23d40:	strdeq	r3, [r2], -r0
   23d44:	strdeq	r3, [r2], -r0
   23d48:	andeq	r3, r2, r0, ror #29
   23d4c:	strdeq	r3, [r2], -r0
   23d50:	andeq	r3, r2, r0, ror #29
   23d54:	strdeq	r3, [r2], -r0
   23d58:	strdeq	r3, [r2], -r0
   23d5c:	andeq	r3, r2, r0, ror #29
   23d60:	strdeq	r3, [r2], -r0
   23d64:	strdeq	r3, [r2], -r0
   23d68:	strdeq	r3, [r2], -r0
   23d6c:	andeq	r3, r2, r0, ror #29
   23d70:	strdeq	r3, [r2], -r0
   23d74:	strdeq	r3, [r2], -r0
   23d78:	strdeq	r3, [r2], -r0
   23d7c:	strdeq	r3, [r2], -r0
   23d80:	andeq	r3, r2, r0, ror #29
   23d84:	andeq	r3, r2, r0, ror #29
   23d88:	strdeq	r3, [r2], -r0
   23d8c:	strdeq	r3, [r2], -r0
   23d90:	strdeq	r3, [r2], -r0
   23d94:	strdeq	r3, [r2], -r0
   23d98:	strdeq	r3, [r2], -r0
   23d9c:	strdeq	r3, [r2], -r0
   23da0:	strdeq	r3, [r2], -r0
   23da4:	strdeq	r3, [r2], -r0
   23da8:	strdeq	r3, [r2], -r0
   23dac:	strdeq	r3, [r2], -r0
   23db0:	strdeq	r3, [r2], -r0
   23db4:	strdeq	r3, [r2], -r0
   23db8:	andeq	r3, r2, r0, ror #29
   23dbc:	strdeq	r3, [r2], -r0
   23dc0:	strdeq	r3, [r2], -r0
   23dc4:	strdeq	r3, [r2], -r0
   23dc8:	andeq	r3, r2, r0, ror #29
   23dcc:	strdeq	r3, [r2], -r0
   23dd0:	andeq	r3, r2, r0, ror #29
   23dd4:	strdeq	r3, [r2], -r0
   23dd8:	strdeq	r3, [r2], -r0
   23ddc:	strdeq	r3, [r2], -r0
   23de0:	strdeq	r3, [r2], -r0
   23de4:	strdeq	r3, [r2], -r0
   23de8:	strdeq	r3, [r2], -r0
   23dec:	andeq	r3, r2, r0, ror #29
   23df0:	mov	sl, #1
   23df4:	mov	r9, #1024	; 0x400
   23df8:	sub	r8, r8, #66	; 0x42
   23dfc:	cmp	r8, #53	; 0x35
   23e00:	ldrls	pc, [pc, r8, lsl #2]
   23e04:	b	240dc <__assert_fail@plt+0x12b84>
   23e08:	strdeq	r3, [r2], -r4
   23e0c:	ldrdeq	r4, [r2], -ip
   23e10:	ldrdeq	r4, [r2], -ip
   23e14:	andeq	r3, r2, ip, asr #31
   23e18:	ldrdeq	r4, [r2], -ip
   23e1c:	andeq	r3, r2, r0, lsr #31
   23e20:	ldrdeq	r4, [r2], -ip
   23e24:	ldrdeq	r4, [r2], -ip
   23e28:	ldrdeq	r4, [r2], -ip
   23e2c:	andeq	r3, r2, r8, lsl #31
   23e30:	ldrdeq	r4, [r2], -ip
   23e34:	andeq	r3, r2, r0, ror #30
   23e38:	ldrdeq	r4, [r2], -ip
   23e3c:	ldrdeq	r4, [r2], -ip
   23e40:	strheq	r4, [r2], -r4	; <UNPREDICTABLE>
   23e44:	ldrdeq	r4, [r2], -ip
   23e48:	ldrdeq	r4, [r2], -ip
   23e4c:	ldrdeq	r4, [r2], -ip
   23e50:	andeq	r4, r2, ip, lsl #1
   23e54:	ldrdeq	r4, [r2], -ip
   23e58:	ldrdeq	r4, [r2], -ip
   23e5c:	ldrdeq	r4, [r2], -ip
   23e60:	ldrdeq	r4, [r2], -ip
   23e64:	andeq	r4, r2, r4, rrx
   23e68:	andeq	r4, r2, ip, lsr r0
   23e6c:	ldrdeq	r4, [r2], -ip
   23e70:	ldrdeq	r4, [r2], -ip
   23e74:	ldrdeq	r4, [r2], -ip
   23e78:	ldrdeq	r4, [r2], -ip
   23e7c:	ldrdeq	r4, [r2], -ip
   23e80:	ldrdeq	r4, [r2], -ip
   23e84:	ldrdeq	r4, [r2], -ip
   23e88:	andeq	r4, r2, r4, lsr #32
   23e8c:	andeq	r3, r2, ip, lsr pc
   23e90:	ldrdeq	r4, [r2], -ip
   23e94:	ldrdeq	r4, [r2], -ip
   23e98:	ldrdeq	r4, [r2], -ip
   23e9c:	andeq	r3, r2, r0, lsr #31
   23ea0:	ldrdeq	r4, [r2], -ip
   23ea4:	ldrdeq	r4, [r2], -ip
   23ea8:	ldrdeq	r4, [r2], -ip
   23eac:	andeq	r3, r2, r8, lsl #31
   23eb0:	ldrdeq	r4, [r2], -ip
   23eb4:	andeq	r3, r2, r0, ror #30
   23eb8:	ldrdeq	r4, [r2], -ip
   23ebc:	ldrdeq	r4, [r2], -ip
   23ec0:	ldrdeq	r4, [r2], -ip
   23ec4:	ldrdeq	r4, [r2], -ip
   23ec8:	ldrdeq	r4, [r2], -ip
   23ecc:	ldrdeq	r4, [r2], -ip
   23ed0:	andeq	r4, r2, ip, lsl #1
   23ed4:	ldrdeq	r4, [r2], -ip
   23ed8:	ldrdeq	r4, [r2], -ip
   23edc:	andeq	r4, r2, ip
   23ee0:	mov	r1, #48	; 0x30
   23ee4:	ldr	r0, [sp, #56]	; 0x38
   23ee8:	bl	11420 <strchr@plt>
   23eec:	cmp	r0, #0
   23ef0:	beq	23df0 <__assert_fail@plt+0x12898>
   23ef4:	ldrb	r3, [r5, #1]
   23ef8:	cmp	r3, #68	; 0x44
   23efc:	beq	23f10 <__assert_fail@plt+0x129b8>
   23f00:	cmp	r3, #105	; 0x69
   23f04:	beq	23f24 <__assert_fail@plt+0x129cc>
   23f08:	cmp	r3, #66	; 0x42
   23f0c:	bne	23df0 <__assert_fail@plt+0x12898>
   23f10:	mov	sl, #2
   23f14:	mov	r9, #1000	; 0x3e8
   23f18:	b	23df8 <__assert_fail@plt+0x128a0>
   23f1c:	mov	r4, #1
   23f20:	b	23c94 <__assert_fail@plt+0x1273c>
   23f24:	ldrb	sl, [r5, #2]
   23f28:	mov	r9, #1024	; 0x400
   23f2c:	cmp	sl, #66	; 0x42
   23f30:	movne	sl, #1
   23f34:	moveq	sl, #3
   23f38:	b	23df8 <__assert_fail@plt+0x128a0>
   23f3c:	mov	r8, #0
   23f40:	add	r3, r5, sl
   23f44:	str	r3, [r6]
   23f48:	ldrb	r3, [r5, sl]
   23f4c:	orr	r4, r4, r8
   23f50:	ldrd	r0, [sp, #8]
   23f54:	cmp	r3, #0
   23f58:	orrne	r4, r4, #2
   23f5c:	b	23cac <__assert_fail@plt+0x12754>
   23f60:	mov	r1, r9
   23f64:	add	r0, sp, #8
   23f68:	bl	23adc <__assert_fail@plt+0x12584>
   23f6c:	mov	r1, r9
   23f70:	mov	r8, r0
   23f74:	add	r0, sp, #8
   23f78:	bl	23adc <__assert_fail@plt+0x12584>
   23f7c:	ldr	r5, [r6]
   23f80:	orr	r8, r8, r0
   23f84:	b	23f40 <__assert_fail@plt+0x129e8>
   23f88:	mov	r1, r9
   23f8c:	add	r0, sp, #8
   23f90:	bl	23adc <__assert_fail@plt+0x12584>
   23f94:	ldr	r5, [r6]
   23f98:	mov	r8, r0
   23f9c:	b	23f40 <__assert_fail@plt+0x129e8>
   23fa0:	mov	fp, #3
   23fa4:	mov	r8, #0
   23fa8:	add	r5, sp, #8
   23fac:	mov	r1, r9
   23fb0:	mov	r0, r5
   23fb4:	bl	23adc <__assert_fail@plt+0x12584>
   23fb8:	subs	fp, fp, #1
   23fbc:	orr	r8, r8, r0
   23fc0:	bne	23fac <__assert_fail@plt+0x12a54>
   23fc4:	ldr	r5, [r6]
   23fc8:	b	23f40 <__assert_fail@plt+0x129e8>
   23fcc:	mov	fp, #6
   23fd0:	mov	r8, #0
   23fd4:	add	r5, sp, #8
   23fd8:	mov	r1, r9
   23fdc:	mov	r0, r5
   23fe0:	bl	23adc <__assert_fail@plt+0x12584>
   23fe4:	subs	fp, fp, #1
   23fe8:	orr	r8, r8, r0
   23fec:	bne	23fd8 <__assert_fail@plt+0x12a80>
   23ff0:	b	23fc4 <__assert_fail@plt+0x12a6c>
   23ff4:	mov	r1, #1024	; 0x400
   23ff8:	add	r0, sp, #8
   23ffc:	bl	23adc <__assert_fail@plt+0x12584>
   24000:	ldr	r5, [r6]
   24004:	mov	r8, r0
   24008:	b	23f40 <__assert_fail@plt+0x129e8>
   2400c:	mov	r1, #2
   24010:	add	r0, sp, #8
   24014:	bl	23adc <__assert_fail@plt+0x12584>
   24018:	ldr	r5, [r6]
   2401c:	mov	r8, r0
   24020:	b	23f40 <__assert_fail@plt+0x129e8>
   24024:	mov	r1, #512	; 0x200
   24028:	add	r0, sp, #8
   2402c:	bl	23adc <__assert_fail@plt+0x12584>
   24030:	ldr	r5, [r6]
   24034:	mov	r8, r0
   24038:	b	23f40 <__assert_fail@plt+0x129e8>
   2403c:	mov	fp, #7
   24040:	mov	r8, #0
   24044:	add	r5, sp, #8
   24048:	mov	r1, r9
   2404c:	mov	r0, r5
   24050:	bl	23adc <__assert_fail@plt+0x12584>
   24054:	subs	fp, fp, #1
   24058:	orr	r8, r8, r0
   2405c:	bne	24048 <__assert_fail@plt+0x12af0>
   24060:	b	23fc4 <__assert_fail@plt+0x12a6c>
   24064:	mov	fp, #8
   24068:	mov	r8, #0
   2406c:	add	r5, sp, fp
   24070:	mov	r1, r9
   24074:	mov	r0, r5
   24078:	bl	23adc <__assert_fail@plt+0x12584>
   2407c:	subs	fp, fp, #1
   24080:	orr	r8, r8, r0
   24084:	bne	24070 <__assert_fail@plt+0x12b18>
   24088:	b	23fc4 <__assert_fail@plt+0x12a6c>
   2408c:	mov	fp, #4
   24090:	mov	r8, #0
   24094:	add	r5, sp, #8
   24098:	mov	r1, r9
   2409c:	mov	r0, r5
   240a0:	bl	23adc <__assert_fail@plt+0x12584>
   240a4:	subs	fp, fp, #1
   240a8:	orr	r8, r8, r0
   240ac:	bne	24098 <__assert_fail@plt+0x12b40>
   240b0:	b	23fc4 <__assert_fail@plt+0x12a6c>
   240b4:	mov	fp, #5
   240b8:	mov	r8, #0
   240bc:	add	r5, sp, #8
   240c0:	mov	r1, r9
   240c4:	mov	r0, r5
   240c8:	bl	23adc <__assert_fail@plt+0x12584>
   240cc:	subs	fp, fp, #1
   240d0:	orr	r8, r8, r0
   240d4:	bne	240c0 <__assert_fail@plt+0x12b68>
   240d8:	b	23fc4 <__assert_fail@plt+0x12a6c>
   240dc:	ldrd	r2, [sp, #8]
   240e0:	orr	r4, r4, #2
   240e4:	strd	r2, [r7]
   240e8:	b	23cb0 <__assert_fail@plt+0x12758>
   240ec:	ldr	r3, [pc, #12]	; 24100 <__assert_fail@plt+0x12ba8>
   240f0:	mov	r2, #85	; 0x55
   240f4:	ldr	r1, [pc, #8]	; 24104 <__assert_fail@plt+0x12bac>
   240f8:	ldr	r0, [pc, #8]	; 24108 <__assert_fail@plt+0x12bb0>
   240fc:	bl	11558 <__assert_fail@plt>
   24100:	andeq	r6, r2, ip, ror #13
   24104:	strdeq	r6, [r2], -r8
   24108:	andeq	r6, r2, r8, lsl #14
   2410c:	push	{r4, r5, r6, r7, r8, lr}
   24110:	subs	r5, r1, #0
   24114:	mov	r4, r0
   24118:	blt	2418c <__assert_fail@plt+0x12c34>
   2411c:	moveq	r6, #0
   24120:	moveq	r7, #0
   24124:	bne	2414c <__assert_fail@plt+0x12bf4>
   24128:	ldr	r2, [r4]
   2412c:	ldr	r1, [r4, #4]
   24130:	mov	r0, #0
   24134:	mul	ip, r2, r7
   24138:	umull	r2, r3, r2, r5
   2413c:	mla	r5, r5, r1, ip
   24140:	add	r3, r5, r3
   24144:	strd	r2, [r4]
   24148:	pop	{r4, r5, r6, r7, r8, pc}
   2414c:	asr	r7, r5, #31
   24150:	mov	r2, r5
   24154:	mov	r3, r7
   24158:	mvn	r0, #0
   2415c:	mvn	r1, #0
   24160:	bl	2521c <__assert_fail@plt+0x13cc4>
   24164:	ldrd	r2, [r4]
   24168:	mov	r6, r5
   2416c:	cmp	r1, r3
   24170:	cmpeq	r0, r2
   24174:	bcs	24128 <__assert_fail@plt+0x12bd0>
   24178:	mvn	r2, #0
   2417c:	mvn	r3, #0
   24180:	mov	r0, #1
   24184:	strd	r2, [r4]
   24188:	pop	{r4, r5, r6, r7, r8, pc}
   2418c:	ldrd	r2, [r0]
   24190:	orrs	r3, r2, r3
   24194:	moveq	r6, r5
   24198:	asreq	r7, r6, #31
   2419c:	bne	24178 <__assert_fail@plt+0x12c20>
   241a0:	b	24128 <__assert_fail@plt+0x12bd0>
   241a4:	cmp	r2, #36	; 0x24
   241a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   241ac:	sub	sp, sp, #20
   241b0:	bhi	24724 <__assert_fail@plt+0x131cc>
   241b4:	cmp	r1, #0
   241b8:	mov	r8, r2
   241bc:	mov	r7, r0
   241c0:	mov	r5, r1
   241c4:	mov	r6, r3
   241c8:	addeq	r5, sp, #4
   241cc:	bl	1142c <__errno_location@plt>
   241d0:	mov	r3, #0
   241d4:	str	r3, [r0]
   241d8:	mov	r9, r0
   241dc:	bl	113fc <__ctype_b_loc@plt>
   241e0:	ldrb	r3, [r7]
   241e4:	mov	r2, r7
   241e8:	ldr	r0, [r0]
   241ec:	b	241f4 <__assert_fail@plt+0x12c9c>
   241f0:	ldrb	r3, [r2, #1]!
   241f4:	lsl	r1, r3, #1
   241f8:	ldrh	r4, [r0, r1]
   241fc:	ands	r4, r4, #8192	; 0x2000
   24200:	bne	241f0 <__assert_fail@plt+0x12c98>
   24204:	cmp	r3, #45	; 0x2d
   24208:	bne	2421c <__assert_fail@plt+0x12cc4>
   2420c:	mov	r4, #4
   24210:	mov	r0, r4
   24214:	add	sp, sp, #20
   24218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2421c:	mov	r2, r8
   24220:	mov	r3, r4
   24224:	mov	r1, r5
   24228:	mov	r0, r7
   2422c:	bl	1127c <__strtoull_internal@plt>
   24230:	ldr	r8, [r5]
   24234:	cmp	r7, r8
   24238:	mov	r2, r0
   2423c:	str	r0, [sp, #8]
   24240:	str	r1, [sp, #12]
   24244:	beq	24290 <__assert_fail@plt+0x12d38>
   24248:	ldr	r4, [r9]
   2424c:	cmp	r4, #0
   24250:	bne	24280 <__assert_fail@plt+0x12d28>
   24254:	ldr	r3, [sp, #56]	; 0x38
   24258:	cmp	r3, #0
   2425c:	beq	2426c <__assert_fail@plt+0x12d14>
   24260:	ldrb	r9, [r8]
   24264:	cmp	r9, #0
   24268:	bne	242c8 <__assert_fail@plt+0x12d70>
   2426c:	mov	r0, r4
   24270:	str	r2, [r6]
   24274:	str	r1, [r6, #4]
   24278:	add	sp, sp, #20
   2427c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24280:	cmp	r4, #34	; 0x22
   24284:	bne	2420c <__assert_fail@plt+0x12cb4>
   24288:	mov	r4, #1
   2428c:	b	24254 <__assert_fail@plt+0x12cfc>
   24290:	ldr	r3, [sp, #56]	; 0x38
   24294:	cmp	r3, #0
   24298:	beq	2420c <__assert_fail@plt+0x12cb4>
   2429c:	ldrb	r1, [r8]
   242a0:	cmp	r1, #0
   242a4:	beq	2420c <__assert_fail@plt+0x12cb4>
   242a8:	mov	r0, r3
   242ac:	bl	11420 <strchr@plt>
   242b0:	cmp	r0, #0
   242b4:	beq	2420c <__assert_fail@plt+0x12cb4>
   242b8:	ldrb	r9, [r8]
   242bc:	mov	r2, #1
   242c0:	mov	r3, #0
   242c4:	strd	r2, [sp, #8]
   242c8:	mov	r1, r9
   242cc:	ldr	r0, [sp, #56]	; 0x38
   242d0:	bl	11420 <strchr@plt>
   242d4:	cmp	r0, #0
   242d8:	beq	246e0 <__assert_fail@plt+0x13188>
   242dc:	sub	r3, r9, #69	; 0x45
   242e0:	cmp	r3, #47	; 0x2f
   242e4:	ldrls	pc, [pc, r3, lsl #2]
   242e8:	b	243ac <__assert_fail@plt+0x12e54>
   242ec:	muleq	r2, ip, r4
   242f0:	andeq	r4, r2, ip, lsr #7
   242f4:	muleq	r2, ip, r4
   242f8:	andeq	r4, r2, ip, lsr #7
   242fc:	andeq	r4, r2, ip, lsr #7
   24300:	andeq	r4, r2, ip, lsr #7
   24304:	muleq	r2, ip, r4
   24308:	andeq	r4, r2, ip, lsr #7
   2430c:	muleq	r2, ip, r4
   24310:	andeq	r4, r2, ip, lsr #7
   24314:	andeq	r4, r2, ip, lsr #7
   24318:	muleq	r2, ip, r4
   2431c:	andeq	r4, r2, ip, lsr #7
   24320:	andeq	r4, r2, ip, lsr #7
   24324:	andeq	r4, r2, ip, lsr #7
   24328:	muleq	r2, ip, r4
   2432c:	andeq	r4, r2, ip, lsr #7
   24330:	andeq	r4, r2, ip, lsr #7
   24334:	andeq	r4, r2, ip, lsr #7
   24338:	andeq	r4, r2, ip, lsr #7
   2433c:	muleq	r2, ip, r4
   24340:	muleq	r2, ip, r4
   24344:	andeq	r4, r2, ip, lsr #7
   24348:	andeq	r4, r2, ip, lsr #7
   2434c:	andeq	r4, r2, ip, lsr #7
   24350:	andeq	r4, r2, ip, lsr #7
   24354:	andeq	r4, r2, ip, lsr #7
   24358:	andeq	r4, r2, ip, lsr #7
   2435c:	andeq	r4, r2, ip, lsr #7
   24360:	andeq	r4, r2, ip, lsr #7
   24364:	andeq	r4, r2, ip, lsr #7
   24368:	andeq	r4, r2, ip, lsr #7
   2436c:	andeq	r4, r2, ip, lsr #7
   24370:	andeq	r4, r2, ip, lsr #7
   24374:	muleq	r2, ip, r4
   24378:	andeq	r4, r2, ip, lsr #7
   2437c:	andeq	r4, r2, ip, lsr #7
   24380:	andeq	r4, r2, ip, lsr #7
   24384:	muleq	r2, ip, r4
   24388:	andeq	r4, r2, ip, lsr #7
   2438c:	muleq	r2, ip, r4
   24390:	andeq	r4, r2, ip, lsr #7
   24394:	andeq	r4, r2, ip, lsr #7
   24398:	andeq	r4, r2, ip, lsr #7
   2439c:	andeq	r4, r2, ip, lsr #7
   243a0:	andeq	r4, r2, ip, lsr #7
   243a4:	andeq	r4, r2, ip, lsr #7
   243a8:	muleq	r2, ip, r4
   243ac:	mov	r7, #1
   243b0:	mov	sl, #1024	; 0x400
   243b4:	sub	r9, r9, #66	; 0x42
   243b8:	cmp	r9, #53	; 0x35
   243bc:	ldrls	pc, [pc, r9, lsl #2]
   243c0:	b	246e0 <__assert_fail@plt+0x13188>
   243c4:	andeq	r4, r2, ip, lsr #12
   243c8:	andeq	r4, r2, r0, ror #13
   243cc:	andeq	r4, r2, r0, ror #13
   243d0:	andeq	r4, r2, r4, lsl #12
   243d4:	andeq	r4, r2, r0, ror #13
   243d8:	ldrdeq	r4, [r2], -ip
   243dc:	andeq	r4, r2, r0, ror #13
   243e0:	andeq	r4, r2, r0, ror #13
   243e4:	andeq	r4, r2, r0, ror #13
   243e8:			; <UNDEFINED> instruction: 0x000245bc
   243ec:	andeq	r4, r2, r0, ror #13
   243f0:	andeq	r4, r2, r8, lsl #13
   243f4:	andeq	r4, r2, r0, ror #13
   243f8:	andeq	r4, r2, r0, ror #13
   243fc:	andeq	r4, r2, r0, ror #12
   24400:	andeq	r4, r2, r0, ror #13
   24404:	andeq	r4, r2, r0, ror #13
   24408:	andeq	r4, r2, r0, ror #13
   2440c:			; <UNDEFINED> instruction: 0x000246b8
   24410:	andeq	r4, r2, r0, ror #13
   24414:	andeq	r4, r2, r0, ror #13
   24418:	andeq	r4, r2, r0, ror #13
   2441c:	andeq	r4, r2, r0, ror #13
   24420:	muleq	r2, r4, r5
   24424:	andeq	r4, r2, r0, ror #10
   24428:	andeq	r4, r2, r0, ror #13
   2442c:	andeq	r4, r2, r0, ror #13
   24430:	andeq	r4, r2, r0, ror #13
   24434:	andeq	r4, r2, r0, ror #13
   24438:	andeq	r4, r2, r0, ror #13
   2443c:	andeq	r4, r2, r0, ror #13
   24440:	andeq	r4, r2, r0, ror #13
   24444:	andeq	r4, r2, ip, lsr #10
   24448:	andeq	r4, r2, ip, lsl r5
   2444c:	andeq	r4, r2, r0, ror #13
   24450:	andeq	r4, r2, r0, ror #13
   24454:	andeq	r4, r2, r0, ror #13
   24458:	ldrdeq	r4, [r2], -ip
   2445c:	andeq	r4, r2, r0, ror #13
   24460:	andeq	r4, r2, r0, ror #13
   24464:	andeq	r4, r2, r0, ror #13
   24468:			; <UNDEFINED> instruction: 0x000245bc
   2446c:	andeq	r4, r2, r0, ror #13
   24470:	andeq	r4, r2, r8, lsl #13
   24474:	andeq	r4, r2, r0, ror #13
   24478:	andeq	r4, r2, r0, ror #13
   2447c:	andeq	r4, r2, r0, ror #13
   24480:	andeq	r4, r2, r0, ror #13
   24484:	andeq	r4, r2, r0, ror #13
   24488:	andeq	r4, r2, r0, ror #13
   2448c:			; <UNDEFINED> instruction: 0x000246b8
   24490:	andeq	r4, r2, r0, ror #13
   24494:	andeq	r4, r2, r0, ror #13
   24498:	ldrdeq	r4, [r2], -r8
   2449c:	mov	r1, #48	; 0x30
   244a0:	ldr	r0, [sp, #56]	; 0x38
   244a4:	bl	11420 <strchr@plt>
   244a8:	cmp	r0, #0
   244ac:	beq	243ac <__assert_fail@plt+0x12e54>
   244b0:	ldrb	r3, [r8, #1]
   244b4:	cmp	r3, #68	; 0x44
   244b8:	beq	244cc <__assert_fail@plt+0x12f74>
   244bc:	cmp	r3, #105	; 0x69
   244c0:	beq	246f0 <__assert_fail@plt+0x13198>
   244c4:	cmp	r3, #66	; 0x42
   244c8:	bne	243ac <__assert_fail@plt+0x12e54>
   244cc:	mov	r7, #2
   244d0:	mov	sl, #1000	; 0x3e8
   244d4:	b	243b4 <__assert_fail@plt+0x12e5c>
   244d8:	ldrd	r2, [sp, #8]
   244dc:	cmp	r2, #0
   244e0:	sbcs	r1, r3, #0
   244e4:	blt	24708 <__assert_fail@plt+0x131b0>
   244e8:	adds	r2, r2, r2
   244ec:	adc	r3, r3, r3
   244f0:	mov	r1, r3
   244f4:	mov	r9, #0
   244f8:	str	r2, [sp, #8]
   244fc:	str	r3, [sp, #12]
   24500:	add	r3, r8, r7
   24504:	str	r3, [r5]
   24508:	ldrb	r3, [r8, r7]
   2450c:	orr	r4, r4, r9
   24510:	cmp	r3, #0
   24514:	orrne	r4, r4, #2
   24518:	b	2426c <__assert_fail@plt+0x12d14>
   2451c:	ldr	r2, [sp, #8]
   24520:	ldr	r1, [sp, #12]
   24524:	mov	r9, #0
   24528:	b	24500 <__assert_fail@plt+0x12fa8>
   2452c:	ldrd	r2, [sp, #8]
   24530:	ldr	r1, [pc, #512]	; 24738 <__assert_fail@plt+0x131e0>
   24534:	mvn	r0, #0
   24538:	cmp	r3, r1
   2453c:	cmpeq	r2, r0
   24540:	bhi	24708 <__assert_fail@plt+0x131b0>
   24544:	lsl	r1, r3, #9
   24548:	orr	r1, r1, r2, lsr #23
   2454c:	lsl	r2, r2, #9
   24550:	str	r1, [sp, #12]
   24554:	str	r2, [sp, #8]
   24558:	mov	r9, #0
   2455c:	b	24500 <__assert_fail@plt+0x12fa8>
   24560:	mov	fp, #7
   24564:	mov	r9, #0
   24568:	add	r8, sp, #8
   2456c:	mov	r1, sl
   24570:	mov	r0, r8
   24574:	bl	2410c <__assert_fail@plt+0x12bb4>
   24578:	subs	fp, fp, #1
   2457c:	orr	r9, r9, r0
   24580:	bne	2456c <__assert_fail@plt+0x13014>
   24584:	ldr	r8, [r5]
   24588:	ldr	r2, [sp, #8]
   2458c:	ldr	r1, [sp, #12]
   24590:	b	24500 <__assert_fail@plt+0x12fa8>
   24594:	mov	fp, #8
   24598:	mov	r9, #0
   2459c:	add	r8, sp, fp
   245a0:	mov	r1, sl
   245a4:	mov	r0, r8
   245a8:	bl	2410c <__assert_fail@plt+0x12bb4>
   245ac:	subs	fp, fp, #1
   245b0:	orr	r9, r9, r0
   245b4:	bne	245a0 <__assert_fail@plt+0x13048>
   245b8:	b	24584 <__assert_fail@plt+0x1302c>
   245bc:	mov	r1, sl
   245c0:	add	r0, sp, #8
   245c4:	bl	2410c <__assert_fail@plt+0x12bb4>
   245c8:	ldr	r8, [r5]
   245cc:	ldr	r2, [sp, #8]
   245d0:	ldr	r1, [sp, #12]
   245d4:	mov	r9, r0
   245d8:	b	24500 <__assert_fail@plt+0x12fa8>
   245dc:	mov	fp, #3
   245e0:	mov	r9, #0
   245e4:	add	r8, sp, #8
   245e8:	mov	r1, sl
   245ec:	mov	r0, r8
   245f0:	bl	2410c <__assert_fail@plt+0x12bb4>
   245f4:	subs	fp, fp, #1
   245f8:	orr	r9, r9, r0
   245fc:	bne	245e8 <__assert_fail@plt+0x13090>
   24600:	b	24584 <__assert_fail@plt+0x1302c>
   24604:	mov	fp, #6
   24608:	mov	r9, #0
   2460c:	add	r8, sp, #8
   24610:	mov	r1, sl
   24614:	mov	r0, r8
   24618:	bl	2410c <__assert_fail@plt+0x12bb4>
   2461c:	subs	fp, fp, #1
   24620:	orr	r9, r9, r0
   24624:	bne	24610 <__assert_fail@plt+0x130b8>
   24628:	b	24584 <__assert_fail@plt+0x1302c>
   2462c:	ldrd	r0, [sp, #8]
   24630:	ldr	r3, [pc, #260]	; 2473c <__assert_fail@plt+0x131e4>
   24634:	mvn	r2, #0
   24638:	cmp	r1, r3
   2463c:	cmpeq	r0, r2
   24640:	bhi	24708 <__assert_fail@plt+0x131b0>
   24644:	lsl	r1, r1, #10
   24648:	orr	r1, r1, r0, lsr #22
   2464c:	lsl	r2, r0, #10
   24650:	str	r1, [sp, #12]
   24654:	str	r2, [sp, #8]
   24658:	mov	r9, #0
   2465c:	b	24500 <__assert_fail@plt+0x12fa8>
   24660:	mov	fp, #5
   24664:	mov	r9, #0
   24668:	add	r8, sp, #8
   2466c:	mov	r1, sl
   24670:	mov	r0, r8
   24674:	bl	2410c <__assert_fail@plt+0x12bb4>
   24678:	subs	fp, fp, #1
   2467c:	orr	r9, r9, r0
   24680:	bne	2466c <__assert_fail@plt+0x13114>
   24684:	b	24584 <__assert_fail@plt+0x1302c>
   24688:	mov	r1, sl
   2468c:	add	r0, sp, #8
   24690:	bl	2410c <__assert_fail@plt+0x12bb4>
   24694:	mov	r1, sl
   24698:	mov	r9, r0
   2469c:	add	r0, sp, #8
   246a0:	bl	2410c <__assert_fail@plt+0x12bb4>
   246a4:	ldr	r8, [r5]
   246a8:	ldr	r2, [sp, #8]
   246ac:	ldr	r1, [sp, #12]
   246b0:	orr	r9, r9, r0
   246b4:	b	24500 <__assert_fail@plt+0x12fa8>
   246b8:	mov	fp, #4
   246bc:	mov	r9, #0
   246c0:	add	r8, sp, #8
   246c4:	mov	r1, sl
   246c8:	mov	r0, r8
   246cc:	bl	2410c <__assert_fail@plt+0x12bb4>
   246d0:	subs	fp, fp, #1
   246d4:	orr	r9, r9, r0
   246d8:	bne	246c4 <__assert_fail@plt+0x1316c>
   246dc:	b	24584 <__assert_fail@plt+0x1302c>
   246e0:	ldrd	r2, [sp, #8]
   246e4:	orr	r4, r4, #2
   246e8:	strd	r2, [r6]
   246ec:	b	24210 <__assert_fail@plt+0x12cb8>
   246f0:	ldrb	r7, [r8, #2]
   246f4:	mov	sl, #1024	; 0x400
   246f8:	cmp	r7, #66	; 0x42
   246fc:	movne	r7, #1
   24700:	moveq	r7, #3
   24704:	b	243b4 <__assert_fail@plt+0x12e5c>
   24708:	mvn	r1, #0
   2470c:	mvn	r0, #0
   24710:	mvn	r2, #0
   24714:	strd	r0, [sp, #8]
   24718:	mov	r9, #1
   2471c:	mov	r1, r2
   24720:	b	24500 <__assert_fail@plt+0x12fa8>
   24724:	ldr	r3, [pc, #20]	; 24740 <__assert_fail@plt+0x131e8>
   24728:	mov	r2, #85	; 0x55
   2472c:	ldr	r1, [pc, #16]	; 24744 <__assert_fail@plt+0x131ec>
   24730:	ldr	r0, [pc, #16]	; 24748 <__assert_fail@plt+0x131f0>
   24734:	bl	11558 <__assert_fail@plt>
   24738:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   2473c:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   24740:	andeq	r6, r2, r0, lsr r7
   24744:	strdeq	r6, [r2], -r8
   24748:	andeq	r6, r2, r8, lsl #14
   2474c:	cmp	r1, #0
   24750:	cmpne	r0, #0
   24754:	moveq	r1, #1
   24758:	moveq	r0, r1
   2475c:	umull	r2, r3, r0, r1
   24760:	adds	r3, r3, #0
   24764:	movne	r3, #1
   24768:	cmp	r2, #0
   2476c:	blt	2477c <__assert_fail@plt+0x13224>
   24770:	cmp	r3, #0
   24774:	bne	2477c <__assert_fail@plt+0x13224>
   24778:	b	111b0 <calloc@plt>
   2477c:	push	{r4, lr}
   24780:	bl	1142c <__errno_location@plt>
   24784:	mov	r3, #12
   24788:	str	r3, [r0]
   2478c:	mov	r0, #0
   24790:	pop	{r4, pc}
   24794:	cmp	r0, #0
   24798:	moveq	r0, #1
   2479c:	cmp	r0, #0
   247a0:	blt	247a8 <__assert_fail@plt+0x13250>
   247a4:	b	1139c <malloc@plt>
   247a8:	push	{r4, lr}
   247ac:	bl	1142c <__errno_location@plt>
   247b0:	mov	r3, #12
   247b4:	str	r3, [r0]
   247b8:	mov	r0, #0
   247bc:	pop	{r4, pc}
   247c0:	cmp	r0, #0
   247c4:	beq	247e8 <__assert_fail@plt+0x13290>
   247c8:	cmp	r1, #0
   247cc:	push	{lr}		; (str lr, [sp, #-4]!)
   247d0:	sub	sp, sp, #12
   247d4:	beq	247f0 <__assert_fail@plt+0x13298>
   247d8:	blt	24808 <__assert_fail@plt+0x132b0>
   247dc:	add	sp, sp, #12
   247e0:	pop	{lr}		; (ldr lr, [sp], #4)
   247e4:	b	112f4 <realloc@plt>
   247e8:	mov	r0, r1
   247ec:	b	24794 <__assert_fail@plt+0x1323c>
   247f0:	str	r1, [sp, #4]
   247f4:	bl	13908 <__assert_fail@plt+0x23b0>
   247f8:	ldr	r3, [sp, #4]
   247fc:	mov	r0, r3
   24800:	add	sp, sp, #12
   24804:	pop	{pc}		; (ldr pc, [sp], #4)
   24808:	bl	1142c <__errno_location@plt>
   2480c:	mov	r2, #12
   24810:	mov	r3, #0
   24814:	str	r2, [r0]
   24818:	b	247fc <__assert_fail@plt+0x132a4>
   2481c:	push	{r4, r5, r6, lr}
   24820:	mov	r4, r0
   24824:	bl	1136c <__fpending@plt>
   24828:	ldr	r5, [r4]
   2482c:	and	r5, r5, #32
   24830:	mov	r6, r0
   24834:	mov	r0, r4
   24838:	bl	1370c <__assert_fail@plt+0x21b4>
   2483c:	cmp	r5, #0
   24840:	mov	r4, r0
   24844:	bne	24864 <__assert_fail@plt+0x1330c>
   24848:	cmp	r0, #0
   2484c:	beq	2485c <__assert_fail@plt+0x13304>
   24850:	cmp	r6, #0
   24854:	beq	24880 <__assert_fail@plt+0x13328>
   24858:	mvn	r4, #0
   2485c:	mov	r0, r4
   24860:	pop	{r4, r5, r6, pc}
   24864:	cmp	r0, #0
   24868:	bne	24858 <__assert_fail@plt+0x13300>
   2486c:	bl	1142c <__errno_location@plt>
   24870:	str	r4, [r0]
   24874:	mvn	r4, #0
   24878:	mov	r0, r4
   2487c:	pop	{r4, r5, r6, pc}
   24880:	bl	1142c <__errno_location@plt>
   24884:	ldr	r4, [r0]
   24888:	subs	r4, r4, #9
   2488c:	mvnne	r4, #0
   24890:	mov	r0, r4
   24894:	pop	{r4, r5, r6, pc}
   24898:	ldr	ip, [r0, #4]
   2489c:	cmp	ip, r1
   248a0:	bcs	2491c <__assert_fail@plt+0x133c4>
   248a4:	cmp	r3, #0
   248a8:	push	{r4, r5, r6, r7, r8, lr}
   248ac:	mov	r6, r3
   248b0:	mov	r7, r2
   248b4:	mov	r5, r1
   248b8:	mov	r4, r0
   248bc:	bne	248f0 <__assert_fail@plt+0x13398>
   248c0:	ldr	r0, [r4, #8]
   248c4:	mul	r1, r6, r5
   248c8:	cmp	r0, r7
   248cc:	beq	2492c <__assert_fail@plt+0x133d4>
   248d0:	bl	247c0 <__assert_fail@plt+0x13268>
   248d4:	subs	r7, r0, #0
   248d8:	beq	24958 <__assert_fail@plt+0x13400>
   248dc:	mov	r3, #1
   248e0:	stmib	r4, {r5, r7}
   248e4:	str	r5, [r4]
   248e8:	mov	r0, r3
   248ec:	pop	{r4, r5, r6, r7, r8, pc}
   248f0:	mov	r1, r3
   248f4:	mvn	r0, #0
   248f8:	bl	24cfc <__assert_fail@plt+0x137a4>
   248fc:	cmp	r5, r0
   24900:	bls	248c0 <__assert_fail@plt+0x13368>
   24904:	bl	1142c <__errno_location@plt>
   24908:	mov	r3, #0
   2490c:	mov	r2, #12
   24910:	str	r2, [r0]
   24914:	mov	r0, r3
   24918:	pop	{r4, r5, r6, r7, r8, pc}
   2491c:	mov	r3, #1
   24920:	str	r1, [r0]
   24924:	mov	r0, r3
   24928:	bx	lr
   2492c:	mov	r0, r1
   24930:	bl	24794 <__assert_fail@plt+0x1323c>
   24934:	subs	r7, r0, #0
   24938:	beq	24958 <__assert_fail@plt+0x13400>
   2493c:	ldr	r1, [r4, #8]
   24940:	cmp	r1, #0
   24944:	beq	248dc <__assert_fail@plt+0x13384>
   24948:	ldr	r2, [r4]
   2494c:	mul	r2, r2, r6
   24950:	bl	11264 <memcpy@plt>
   24954:	b	248dc <__assert_fail@plt+0x13384>
   24958:	mov	r3, #0
   2495c:	b	248e8 <__assert_fail@plt+0x13390>
   24960:	push	{r1, r2, r3}
   24964:	push	{r4, r5, r6, r7, lr}
   24968:	sub	sp, sp, #8
   2496c:	add	r3, sp, #32
   24970:	ldr	r1, [sp, #28]
   24974:	str	r3, [sp, #4]
   24978:	cmp	r1, #0
   2497c:	beq	24a14 <__assert_fail@plt+0x134bc>
   24980:	ldr	r2, [pc, #412]	; 24b24 <__assert_fail@plt+0x135cc>
   24984:	mov	r5, r0
   24988:	cmp	r1, r2
   2498c:	bne	249d8 <__assert_fail@plt+0x13480>
   24990:	ldr	r6, [pc, #400]	; 24b28 <__assert_fail@plt+0x135d0>
   24994:	ldr	r7, [r3]
   24998:	add	r2, sp, #36	; 0x24
   2499c:	ldr	r3, [r6]
   249a0:	str	r2, [sp, #4]
   249a4:	cmp	r3, #0
   249a8:	mov	r2, r7
   249ac:	blt	24ad8 <__assert_fail@plt+0x13580>
   249b0:	bl	114b0 <fcntl64@plt>
   249b4:	subs	r4, r0, #0
   249b8:	blt	24a5c <__assert_fail@plt+0x13504>
   249bc:	mov	r3, #1
   249c0:	str	r3, [r6]
   249c4:	mov	r0, r4
   249c8:	add	sp, sp, #8
   249cc:	pop	{r4, r5, r6, r7, lr}
   249d0:	add	sp, sp, #12
   249d4:	bx	lr
   249d8:	cmp	r1, #11
   249dc:	beq	24a04 <__assert_fail@plt+0x134ac>
   249e0:	bgt	24a24 <__assert_fail@plt+0x134cc>
   249e4:	cmp	r1, #3
   249e8:	beq	24a04 <__assert_fail@plt+0x134ac>
   249ec:	ble	24b18 <__assert_fail@plt+0x135c0>
   249f0:	cmp	r1, #8
   249f4:	beq	24a44 <__assert_fail@plt+0x134ec>
   249f8:	ble	24a44 <__assert_fail@plt+0x134ec>
   249fc:	cmp	r1, #9
   24a00:	bne	24a44 <__assert_fail@plt+0x134ec>
   24a04:	mov	r0, r5
   24a08:	bl	114b0 <fcntl64@plt>
   24a0c:	mov	r4, r0
   24a10:	b	249c4 <__assert_fail@plt+0x1346c>
   24a14:	ldr	r2, [sp, #32]
   24a18:	bl	114b0 <fcntl64@plt>
   24a1c:	mov	r4, r0
   24a20:	b	249c4 <__assert_fail@plt+0x1346c>
   24a24:	ldr	r3, [pc, #256]	; 24b2c <__assert_fail@plt+0x135d4>
   24a28:	cmp	r1, r3
   24a2c:	bgt	24af8 <__assert_fail@plt+0x135a0>
   24a30:	cmp	r1, r2
   24a34:	bge	24a44 <__assert_fail@plt+0x134ec>
   24a38:	sub	r3, r3, #6
   24a3c:	cmp	r1, r3
   24a40:	beq	24a04 <__assert_fail@plt+0x134ac>
   24a44:	ldr	r3, [sp, #4]
   24a48:	mov	r0, r5
   24a4c:	ldr	r2, [r3]
   24a50:	bl	114b0 <fcntl64@plt>
   24a54:	mov	r4, r0
   24a58:	b	249c4 <__assert_fail@plt+0x1346c>
   24a5c:	bl	1142c <__errno_location@plt>
   24a60:	ldr	r3, [r0]
   24a64:	cmp	r3, #22
   24a68:	bne	249bc <__assert_fail@plt+0x13464>
   24a6c:	mov	r2, r7
   24a70:	mov	r0, r5
   24a74:	mov	r1, #0
   24a78:	bl	114b0 <fcntl64@plt>
   24a7c:	subs	r4, r0, #0
   24a80:	blt	249c4 <__assert_fail@plt+0x1346c>
   24a84:	mvn	r3, #0
   24a88:	str	r3, [r6]
   24a8c:	mov	r1, #1
   24a90:	mov	r0, r4
   24a94:	bl	114b0 <fcntl64@plt>
   24a98:	subs	r2, r0, #0
   24a9c:	blt	24ab8 <__assert_fail@plt+0x13560>
   24aa0:	orr	r2, r2, #1
   24aa4:	mov	r1, #2
   24aa8:	mov	r0, r4
   24aac:	bl	114b0 <fcntl64@plt>
   24ab0:	cmn	r0, #1
   24ab4:	bne	249c4 <__assert_fail@plt+0x1346c>
   24ab8:	bl	1142c <__errno_location@plt>
   24abc:	mov	r5, r0
   24ac0:	mov	r0, r4
   24ac4:	ldr	r6, [r5]
   24ac8:	mvn	r4, #0
   24acc:	bl	11540 <close@plt>
   24ad0:	str	r6, [r5]
   24ad4:	b	249c4 <__assert_fail@plt+0x1346c>
   24ad8:	mov	r1, #0
   24adc:	bl	114b0 <fcntl64@plt>
   24ae0:	subs	r4, r0, #0
   24ae4:	blt	249c4 <__assert_fail@plt+0x1346c>
   24ae8:	ldr	r3, [r6]
   24aec:	cmn	r3, #1
   24af0:	beq	24a8c <__assert_fail@plt+0x13534>
   24af4:	b	249c4 <__assert_fail@plt+0x1346c>
   24af8:	ldr	r3, [pc, #48]	; 24b30 <__assert_fail@plt+0x135d8>
   24afc:	cmp	r1, r3
   24b00:	beq	24a44 <__assert_fail@plt+0x134ec>
   24b04:	blt	24a04 <__assert_fail@plt+0x134ac>
   24b08:	add	r3, r3, #1
   24b0c:	cmp	r1, r3
   24b10:	bne	24a44 <__assert_fail@plt+0x134ec>
   24b14:	b	24a04 <__assert_fail@plt+0x134ac>
   24b18:	cmp	r1, #1
   24b1c:	bne	24a44 <__assert_fail@plt+0x134ec>
   24b20:	b	24a04 <__assert_fail@plt+0x134ac>
   24b24:	andeq	r0, r0, r6, lsl #8
   24b28:	strdeq	r7, [r3], -r0
   24b2c:	andeq	r0, r0, r7, lsl #8
   24b30:	andeq	r0, r0, r9, lsl #8
   24b34:	push	{r4, lr}
   24b38:	mov	r0, #14
   24b3c:	bl	114e0 <nl_langinfo@plt>
   24b40:	cmp	r0, #0
   24b44:	beq	24b5c <__assert_fail@plt+0x13604>
   24b48:	ldrb	r2, [r0]
   24b4c:	ldr	r3, [pc, #16]	; 24b64 <__assert_fail@plt+0x1360c>
   24b50:	cmp	r2, #0
   24b54:	moveq	r0, r3
   24b58:	pop	{r4, pc}
   24b5c:	ldr	r0, [pc]	; 24b64 <__assert_fail@plt+0x1360c>
   24b60:	pop	{r4, pc}
   24b64:	andeq	r6, r2, ip, lsr r7
   24b68:	push	{r4, r5, r6, r7, lr}
   24b6c:	subs	r6, r0, #0
   24b70:	sub	sp, sp, #12
   24b74:	addeq	r6, sp, #4
   24b78:	mov	r0, r6
   24b7c:	mov	r5, r2
   24b80:	mov	r7, r1
   24b84:	bl	11378 <mbrtowc@plt>
   24b88:	cmp	r5, #0
   24b8c:	cmnne	r0, #3
   24b90:	mov	r4, r0
   24b94:	bls	24bb0 <__assert_fail@plt+0x13658>
   24b98:	mov	r0, #0
   24b9c:	bl	24c08 <__assert_fail@plt+0x136b0>
   24ba0:	cmp	r0, #0
   24ba4:	moveq	r4, #1
   24ba8:	ldrbeq	r3, [r7]
   24bac:	streq	r3, [r6]
   24bb0:	mov	r0, r4
   24bb4:	add	sp, sp, #12
   24bb8:	pop	{r4, r5, r6, r7, pc}
   24bbc:	push	{r4, r5, r6, lr}
   24bc0:	subs	r4, r2, #0
   24bc4:	mov	r6, r0
   24bc8:	mov	r5, r1
   24bcc:	beq	24bf8 <__assert_fail@plt+0x136a0>
   24bd0:	mov	r1, r4
   24bd4:	mvn	r0, #0
   24bd8:	bl	24cfc <__assert_fail@plt+0x137a4>
   24bdc:	cmp	r0, r5
   24be0:	bcs	24bf8 <__assert_fail@plt+0x136a0>
   24be4:	bl	1142c <__errno_location@plt>
   24be8:	mov	r3, #12
   24bec:	str	r3, [r0]
   24bf0:	mov	r0, #0
   24bf4:	pop	{r4, r5, r6, pc}
   24bf8:	mul	r1, r5, r4
   24bfc:	mov	r0, r6
   24c00:	pop	{r4, r5, r6, lr}
   24c04:	b	247c0 <__assert_fail@plt+0x13268>
   24c08:	push	{lr}		; (str lr, [sp, #-4]!)
   24c0c:	sub	sp, sp, #268	; 0x10c
   24c10:	add	r1, sp, #4
   24c14:	ldr	r2, [pc, #60]	; 24c58 <__assert_fail@plt+0x13700>
   24c18:	bl	24c64 <__assert_fail@plt+0x1370c>
   24c1c:	cmp	r0, #0
   24c20:	movne	r0, #0
   24c24:	bne	24c50 <__assert_fail@plt+0x136f8>
   24c28:	ldr	r1, [pc, #44]	; 24c5c <__assert_fail@plt+0x13704>
   24c2c:	add	r0, sp, #4
   24c30:	bl	111f8 <strcmp@plt>
   24c34:	cmp	r0, #0
   24c38:	beq	24c50 <__assert_fail@plt+0x136f8>
   24c3c:	add	r0, sp, #4
   24c40:	ldr	r1, [pc, #24]	; 24c60 <__assert_fail@plt+0x13708>
   24c44:	bl	111f8 <strcmp@plt>
   24c48:	adds	r0, r0, #0
   24c4c:	movne	r0, #1
   24c50:	add	sp, sp, #268	; 0x10c
   24c54:	pop	{pc}		; (ldr pc, [sp], #4)
   24c58:	andeq	r0, r0, r1, lsl #2
   24c5c:	andeq	r6, r2, r4, asr #14
   24c60:	andeq	r6, r2, r8, asr #14
   24c64:	push	{r4, r5, r6, lr}
   24c68:	mov	r5, r1
   24c6c:	mov	r1, #0
   24c70:	mov	r4, r2
   24c74:	bl	114bc <setlocale@plt>
   24c78:	subs	r6, r0, #0
   24c7c:	beq	24cd8 <__assert_fail@plt+0x13780>
   24c80:	bl	11414 <strlen@plt>
   24c84:	cmp	r4, r0
   24c88:	bhi	24cc0 <__assert_fail@plt+0x13768>
   24c8c:	cmp	r4, #0
   24c90:	bne	24c9c <__assert_fail@plt+0x13744>
   24c94:	mov	r0, #34	; 0x22
   24c98:	pop	{r4, r5, r6, pc}
   24c9c:	sub	r4, r4, #1
   24ca0:	mov	r1, r6
   24ca4:	mov	r2, r4
   24ca8:	mov	r0, r5
   24cac:	bl	11264 <memcpy@plt>
   24cb0:	mov	r3, #0
   24cb4:	strb	r3, [r5, r4]
   24cb8:	mov	r0, #34	; 0x22
   24cbc:	pop	{r4, r5, r6, pc}
   24cc0:	add	r2, r0, #1
   24cc4:	mov	r1, r6
   24cc8:	mov	r0, r5
   24ccc:	bl	11264 <memcpy@plt>
   24cd0:	mov	r0, #0
   24cd4:	pop	{r4, r5, r6, pc}
   24cd8:	cmp	r4, #0
   24cdc:	beq	24cec <__assert_fail@plt+0x13794>
   24ce0:	strb	r6, [r5]
   24ce4:	mov	r0, #22
   24ce8:	pop	{r4, r5, r6, pc}
   24cec:	mov	r0, #22
   24cf0:	pop	{r4, r5, r6, pc}
   24cf4:	mov	r1, #0
   24cf8:	b	114bc <setlocale@plt>
   24cfc:	subs	r2, r1, #1
   24d00:	bxeq	lr
   24d04:	bcc	24edc <__assert_fail@plt+0x13984>
   24d08:	cmp	r0, r1
   24d0c:	bls	24ec0 <__assert_fail@plt+0x13968>
   24d10:	tst	r1, r2
   24d14:	beq	24ecc <__assert_fail@plt+0x13974>
   24d18:	clz	r3, r0
   24d1c:	clz	r2, r1
   24d20:	sub	r3, r2, r3
   24d24:	rsbs	r3, r3, #31
   24d28:	addne	r3, r3, r3, lsl #1
   24d2c:	mov	r2, #0
   24d30:	addne	pc, pc, r3, lsl #2
   24d34:	nop			; (mov r0, r0)
   24d38:	cmp	r0, r1, lsl #31
   24d3c:	adc	r2, r2, r2
   24d40:	subcs	r0, r0, r1, lsl #31
   24d44:	cmp	r0, r1, lsl #30
   24d48:	adc	r2, r2, r2
   24d4c:	subcs	r0, r0, r1, lsl #30
   24d50:	cmp	r0, r1, lsl #29
   24d54:	adc	r2, r2, r2
   24d58:	subcs	r0, r0, r1, lsl #29
   24d5c:	cmp	r0, r1, lsl #28
   24d60:	adc	r2, r2, r2
   24d64:	subcs	r0, r0, r1, lsl #28
   24d68:	cmp	r0, r1, lsl #27
   24d6c:	adc	r2, r2, r2
   24d70:	subcs	r0, r0, r1, lsl #27
   24d74:	cmp	r0, r1, lsl #26
   24d78:	adc	r2, r2, r2
   24d7c:	subcs	r0, r0, r1, lsl #26
   24d80:	cmp	r0, r1, lsl #25
   24d84:	adc	r2, r2, r2
   24d88:	subcs	r0, r0, r1, lsl #25
   24d8c:	cmp	r0, r1, lsl #24
   24d90:	adc	r2, r2, r2
   24d94:	subcs	r0, r0, r1, lsl #24
   24d98:	cmp	r0, r1, lsl #23
   24d9c:	adc	r2, r2, r2
   24da0:	subcs	r0, r0, r1, lsl #23
   24da4:	cmp	r0, r1, lsl #22
   24da8:	adc	r2, r2, r2
   24dac:	subcs	r0, r0, r1, lsl #22
   24db0:	cmp	r0, r1, lsl #21
   24db4:	adc	r2, r2, r2
   24db8:	subcs	r0, r0, r1, lsl #21
   24dbc:	cmp	r0, r1, lsl #20
   24dc0:	adc	r2, r2, r2
   24dc4:	subcs	r0, r0, r1, lsl #20
   24dc8:	cmp	r0, r1, lsl #19
   24dcc:	adc	r2, r2, r2
   24dd0:	subcs	r0, r0, r1, lsl #19
   24dd4:	cmp	r0, r1, lsl #18
   24dd8:	adc	r2, r2, r2
   24ddc:	subcs	r0, r0, r1, lsl #18
   24de0:	cmp	r0, r1, lsl #17
   24de4:	adc	r2, r2, r2
   24de8:	subcs	r0, r0, r1, lsl #17
   24dec:	cmp	r0, r1, lsl #16
   24df0:	adc	r2, r2, r2
   24df4:	subcs	r0, r0, r1, lsl #16
   24df8:	cmp	r0, r1, lsl #15
   24dfc:	adc	r2, r2, r2
   24e00:	subcs	r0, r0, r1, lsl #15
   24e04:	cmp	r0, r1, lsl #14
   24e08:	adc	r2, r2, r2
   24e0c:	subcs	r0, r0, r1, lsl #14
   24e10:	cmp	r0, r1, lsl #13
   24e14:	adc	r2, r2, r2
   24e18:	subcs	r0, r0, r1, lsl #13
   24e1c:	cmp	r0, r1, lsl #12
   24e20:	adc	r2, r2, r2
   24e24:	subcs	r0, r0, r1, lsl #12
   24e28:	cmp	r0, r1, lsl #11
   24e2c:	adc	r2, r2, r2
   24e30:	subcs	r0, r0, r1, lsl #11
   24e34:	cmp	r0, r1, lsl #10
   24e38:	adc	r2, r2, r2
   24e3c:	subcs	r0, r0, r1, lsl #10
   24e40:	cmp	r0, r1, lsl #9
   24e44:	adc	r2, r2, r2
   24e48:	subcs	r0, r0, r1, lsl #9
   24e4c:	cmp	r0, r1, lsl #8
   24e50:	adc	r2, r2, r2
   24e54:	subcs	r0, r0, r1, lsl #8
   24e58:	cmp	r0, r1, lsl #7
   24e5c:	adc	r2, r2, r2
   24e60:	subcs	r0, r0, r1, lsl #7
   24e64:	cmp	r0, r1, lsl #6
   24e68:	adc	r2, r2, r2
   24e6c:	subcs	r0, r0, r1, lsl #6
   24e70:	cmp	r0, r1, lsl #5
   24e74:	adc	r2, r2, r2
   24e78:	subcs	r0, r0, r1, lsl #5
   24e7c:	cmp	r0, r1, lsl #4
   24e80:	adc	r2, r2, r2
   24e84:	subcs	r0, r0, r1, lsl #4
   24e88:	cmp	r0, r1, lsl #3
   24e8c:	adc	r2, r2, r2
   24e90:	subcs	r0, r0, r1, lsl #3
   24e94:	cmp	r0, r1, lsl #2
   24e98:	adc	r2, r2, r2
   24e9c:	subcs	r0, r0, r1, lsl #2
   24ea0:	cmp	r0, r1, lsl #1
   24ea4:	adc	r2, r2, r2
   24ea8:	subcs	r0, r0, r1, lsl #1
   24eac:	cmp	r0, r1
   24eb0:	adc	r2, r2, r2
   24eb4:	subcs	r0, r0, r1
   24eb8:	mov	r0, r2
   24ebc:	bx	lr
   24ec0:	moveq	r0, #1
   24ec4:	movne	r0, #0
   24ec8:	bx	lr
   24ecc:	clz	r2, r1
   24ed0:	rsb	r2, r2, #31
   24ed4:	lsr	r0, r0, r2
   24ed8:	bx	lr
   24edc:	cmp	r0, #0
   24ee0:	mvnne	r0, #0
   24ee4:	b	25258 <__assert_fail@plt+0x13d00>
   24ee8:	cmp	r1, #0
   24eec:	beq	24edc <__assert_fail@plt+0x13984>
   24ef0:	push	{r0, r1, lr}
   24ef4:	bl	24cfc <__assert_fail@plt+0x137a4>
   24ef8:	pop	{r1, r2, lr}
   24efc:	mul	r3, r2, r0
   24f00:	sub	r1, r1, r3
   24f04:	bx	lr
   24f08:	cmp	r1, #0
   24f0c:	beq	25118 <__assert_fail@plt+0x13bc0>
   24f10:	eor	ip, r0, r1
   24f14:	rsbmi	r1, r1, #0
   24f18:	subs	r2, r1, #1
   24f1c:	beq	250e4 <__assert_fail@plt+0x13b8c>
   24f20:	movs	r3, r0
   24f24:	rsbmi	r3, r0, #0
   24f28:	cmp	r3, r1
   24f2c:	bls	250f0 <__assert_fail@plt+0x13b98>
   24f30:	tst	r1, r2
   24f34:	beq	25100 <__assert_fail@plt+0x13ba8>
   24f38:	clz	r2, r3
   24f3c:	clz	r0, r1
   24f40:	sub	r2, r0, r2
   24f44:	rsbs	r2, r2, #31
   24f48:	addne	r2, r2, r2, lsl #1
   24f4c:	mov	r0, #0
   24f50:	addne	pc, pc, r2, lsl #2
   24f54:	nop			; (mov r0, r0)
   24f58:	cmp	r3, r1, lsl #31
   24f5c:	adc	r0, r0, r0
   24f60:	subcs	r3, r3, r1, lsl #31
   24f64:	cmp	r3, r1, lsl #30
   24f68:	adc	r0, r0, r0
   24f6c:	subcs	r3, r3, r1, lsl #30
   24f70:	cmp	r3, r1, lsl #29
   24f74:	adc	r0, r0, r0
   24f78:	subcs	r3, r3, r1, lsl #29
   24f7c:	cmp	r3, r1, lsl #28
   24f80:	adc	r0, r0, r0
   24f84:	subcs	r3, r3, r1, lsl #28
   24f88:	cmp	r3, r1, lsl #27
   24f8c:	adc	r0, r0, r0
   24f90:	subcs	r3, r3, r1, lsl #27
   24f94:	cmp	r3, r1, lsl #26
   24f98:	adc	r0, r0, r0
   24f9c:	subcs	r3, r3, r1, lsl #26
   24fa0:	cmp	r3, r1, lsl #25
   24fa4:	adc	r0, r0, r0
   24fa8:	subcs	r3, r3, r1, lsl #25
   24fac:	cmp	r3, r1, lsl #24
   24fb0:	adc	r0, r0, r0
   24fb4:	subcs	r3, r3, r1, lsl #24
   24fb8:	cmp	r3, r1, lsl #23
   24fbc:	adc	r0, r0, r0
   24fc0:	subcs	r3, r3, r1, lsl #23
   24fc4:	cmp	r3, r1, lsl #22
   24fc8:	adc	r0, r0, r0
   24fcc:	subcs	r3, r3, r1, lsl #22
   24fd0:	cmp	r3, r1, lsl #21
   24fd4:	adc	r0, r0, r0
   24fd8:	subcs	r3, r3, r1, lsl #21
   24fdc:	cmp	r3, r1, lsl #20
   24fe0:	adc	r0, r0, r0
   24fe4:	subcs	r3, r3, r1, lsl #20
   24fe8:	cmp	r3, r1, lsl #19
   24fec:	adc	r0, r0, r0
   24ff0:	subcs	r3, r3, r1, lsl #19
   24ff4:	cmp	r3, r1, lsl #18
   24ff8:	adc	r0, r0, r0
   24ffc:	subcs	r3, r3, r1, lsl #18
   25000:	cmp	r3, r1, lsl #17
   25004:	adc	r0, r0, r0
   25008:	subcs	r3, r3, r1, lsl #17
   2500c:	cmp	r3, r1, lsl #16
   25010:	adc	r0, r0, r0
   25014:	subcs	r3, r3, r1, lsl #16
   25018:	cmp	r3, r1, lsl #15
   2501c:	adc	r0, r0, r0
   25020:	subcs	r3, r3, r1, lsl #15
   25024:	cmp	r3, r1, lsl #14
   25028:	adc	r0, r0, r0
   2502c:	subcs	r3, r3, r1, lsl #14
   25030:	cmp	r3, r1, lsl #13
   25034:	adc	r0, r0, r0
   25038:	subcs	r3, r3, r1, lsl #13
   2503c:	cmp	r3, r1, lsl #12
   25040:	adc	r0, r0, r0
   25044:	subcs	r3, r3, r1, lsl #12
   25048:	cmp	r3, r1, lsl #11
   2504c:	adc	r0, r0, r0
   25050:	subcs	r3, r3, r1, lsl #11
   25054:	cmp	r3, r1, lsl #10
   25058:	adc	r0, r0, r0
   2505c:	subcs	r3, r3, r1, lsl #10
   25060:	cmp	r3, r1, lsl #9
   25064:	adc	r0, r0, r0
   25068:	subcs	r3, r3, r1, lsl #9
   2506c:	cmp	r3, r1, lsl #8
   25070:	adc	r0, r0, r0
   25074:	subcs	r3, r3, r1, lsl #8
   25078:	cmp	r3, r1, lsl #7
   2507c:	adc	r0, r0, r0
   25080:	subcs	r3, r3, r1, lsl #7
   25084:	cmp	r3, r1, lsl #6
   25088:	adc	r0, r0, r0
   2508c:	subcs	r3, r3, r1, lsl #6
   25090:	cmp	r3, r1, lsl #5
   25094:	adc	r0, r0, r0
   25098:	subcs	r3, r3, r1, lsl #5
   2509c:	cmp	r3, r1, lsl #4
   250a0:	adc	r0, r0, r0
   250a4:	subcs	r3, r3, r1, lsl #4
   250a8:	cmp	r3, r1, lsl #3
   250ac:	adc	r0, r0, r0
   250b0:	subcs	r3, r3, r1, lsl #3
   250b4:	cmp	r3, r1, lsl #2
   250b8:	adc	r0, r0, r0
   250bc:	subcs	r3, r3, r1, lsl #2
   250c0:	cmp	r3, r1, lsl #1
   250c4:	adc	r0, r0, r0
   250c8:	subcs	r3, r3, r1, lsl #1
   250cc:	cmp	r3, r1
   250d0:	adc	r0, r0, r0
   250d4:	subcs	r3, r3, r1
   250d8:	cmp	ip, #0
   250dc:	rsbmi	r0, r0, #0
   250e0:	bx	lr
   250e4:	teq	ip, r0
   250e8:	rsbmi	r0, r0, #0
   250ec:	bx	lr
   250f0:	movcc	r0, #0
   250f4:	asreq	r0, ip, #31
   250f8:	orreq	r0, r0, #1
   250fc:	bx	lr
   25100:	clz	r2, r1
   25104:	rsb	r2, r2, #31
   25108:	cmp	ip, #0
   2510c:	lsr	r0, r3, r2
   25110:	rsbmi	r0, r0, #0
   25114:	bx	lr
   25118:	cmp	r0, #0
   2511c:	mvngt	r0, #-2147483648	; 0x80000000
   25120:	movlt	r0, #-2147483648	; 0x80000000
   25124:	b	25258 <__assert_fail@plt+0x13d00>
   25128:	cmp	r1, #0
   2512c:	beq	25118 <__assert_fail@plt+0x13bc0>
   25130:	push	{r0, r1, lr}
   25134:	bl	24f10 <__assert_fail@plt+0x139b8>
   25138:	pop	{r1, r2, lr}
   2513c:	mul	r3, r2, r0
   25140:	sub	r1, r1, r3
   25144:	bx	lr
   25148:	cmp	r3, #0
   2514c:	cmpeq	r2, #0
   25150:	bne	25174 <__assert_fail@plt+0x13c1c>
   25154:	cmp	r1, #0
   25158:	movlt	r1, #-2147483648	; 0x80000000
   2515c:	movlt	r0, #0
   25160:	blt	25170 <__assert_fail@plt+0x13c18>
   25164:	cmpeq	r0, #0
   25168:	mvnne	r1, #-2147483648	; 0x80000000
   2516c:	mvnne	r0, #0
   25170:	b	25258 <__assert_fail@plt+0x13d00>
   25174:	sub	sp, sp, #8
   25178:	push	{sp, lr}
   2517c:	cmp	r1, #0
   25180:	blt	251a0 <__assert_fail@plt+0x13c48>
   25184:	cmp	r3, #0
   25188:	blt	251d4 <__assert_fail@plt+0x13c7c>
   2518c:	bl	25268 <__assert_fail@plt+0x13d10>
   25190:	ldr	lr, [sp, #4]
   25194:	add	sp, sp, #8
   25198:	pop	{r2, r3}
   2519c:	bx	lr
   251a0:	rsbs	r0, r0, #0
   251a4:	sbc	r1, r1, r1, lsl #1
   251a8:	cmp	r3, #0
   251ac:	blt	251f8 <__assert_fail@plt+0x13ca0>
   251b0:	bl	25268 <__assert_fail@plt+0x13d10>
   251b4:	ldr	lr, [sp, #4]
   251b8:	add	sp, sp, #8
   251bc:	pop	{r2, r3}
   251c0:	rsbs	r0, r0, #0
   251c4:	sbc	r1, r1, r1, lsl #1
   251c8:	rsbs	r2, r2, #0
   251cc:	sbc	r3, r3, r3, lsl #1
   251d0:	bx	lr
   251d4:	rsbs	r2, r2, #0
   251d8:	sbc	r3, r3, r3, lsl #1
   251dc:	bl	25268 <__assert_fail@plt+0x13d10>
   251e0:	ldr	lr, [sp, #4]
   251e4:	add	sp, sp, #8
   251e8:	pop	{r2, r3}
   251ec:	rsbs	r0, r0, #0
   251f0:	sbc	r1, r1, r1, lsl #1
   251f4:	bx	lr
   251f8:	rsbs	r2, r2, #0
   251fc:	sbc	r3, r3, r3, lsl #1
   25200:	bl	25268 <__assert_fail@plt+0x13d10>
   25204:	ldr	lr, [sp, #4]
   25208:	add	sp, sp, #8
   2520c:	pop	{r2, r3}
   25210:	rsbs	r2, r2, #0
   25214:	sbc	r3, r3, r3, lsl #1
   25218:	bx	lr
   2521c:	cmp	r3, #0
   25220:	cmpeq	r2, #0
   25224:	bne	2523c <__assert_fail@plt+0x13ce4>
   25228:	cmp	r1, #0
   2522c:	cmpeq	r0, #0
   25230:	mvnne	r1, #0
   25234:	mvnne	r0, #0
   25238:	b	25258 <__assert_fail@plt+0x13d00>
   2523c:	sub	sp, sp, #8
   25240:	push	{sp, lr}
   25244:	bl	25268 <__assert_fail@plt+0x13d10>
   25248:	ldr	lr, [sp, #4]
   2524c:	add	sp, sp, #8
   25250:	pop	{r2, r3}
   25254:	bx	lr
   25258:	push	{r1, lr}
   2525c:	mov	r0, #8
   25260:	bl	111d4 <raise@plt>
   25264:	pop	{r1, pc}
   25268:	cmp	r1, r3
   2526c:	push	{r4, r5, r6, r7, r8, r9, lr}
   25270:	cmpeq	r0, r2
   25274:	mov	r4, r0
   25278:	mov	r5, r1
   2527c:	ldr	r9, [sp, #28]
   25280:	movcc	r0, #0
   25284:	movcc	r1, #0
   25288:	bcc	25380 <__assert_fail@plt+0x13e28>
   2528c:	cmp	r3, #0
   25290:	clzeq	ip, r2
   25294:	clzne	ip, r3
   25298:	addeq	ip, ip, #32
   2529c:	cmp	r5, #0
   252a0:	clzeq	r1, r4
   252a4:	addeq	r1, r1, #32
   252a8:	clzne	r1, r5
   252ac:	sub	ip, ip, r1
   252b0:	sub	lr, ip, #32
   252b4:	lsl	r7, r3, ip
   252b8:	rsb	r8, ip, #32
   252bc:	orr	r7, r7, r2, lsl lr
   252c0:	orr	r7, r7, r2, lsr r8
   252c4:	lsl	r6, r2, ip
   252c8:	cmp	r5, r7
   252cc:	cmpeq	r4, r6
   252d0:	movcc	r0, #0
   252d4:	movcc	r1, #0
   252d8:	bcc	252f4 <__assert_fail@plt+0x13d9c>
   252dc:	mov	r3, #1
   252e0:	subs	r4, r4, r6
   252e4:	lsl	r1, r3, lr
   252e8:	lsl	r0, r3, ip
   252ec:	orr	r1, r1, r3, lsr r8
   252f0:	sbc	r5, r5, r7
   252f4:	cmp	ip, #0
   252f8:	beq	25380 <__assert_fail@plt+0x13e28>
   252fc:	lsrs	r3, r7, #1
   25300:	rrx	r2, r6
   25304:	mov	r6, ip
   25308:	b	2532c <__assert_fail@plt+0x13dd4>
   2530c:	subs	r4, r4, r2
   25310:	sbc	r5, r5, r3
   25314:	adds	r4, r4, r4
   25318:	adc	r5, r5, r5
   2531c:	adds	r4, r4, #1
   25320:	adc	r5, r5, #0
   25324:	subs	r6, r6, #1
   25328:	beq	25348 <__assert_fail@plt+0x13df0>
   2532c:	cmp	r5, r3
   25330:	cmpeq	r4, r2
   25334:	bcs	2530c <__assert_fail@plt+0x13db4>
   25338:	adds	r4, r4, r4
   2533c:	adc	r5, r5, r5
   25340:	subs	r6, r6, #1
   25344:	bne	2532c <__assert_fail@plt+0x13dd4>
   25348:	lsr	r6, r4, ip
   2534c:	lsr	r7, r5, ip
   25350:	orr	r6, r6, r5, lsl r8
   25354:	adds	r2, r0, r4
   25358:	orr	r6, r6, r5, lsr lr
   2535c:	adc	r3, r1, r5
   25360:	lsl	r1, r7, ip
   25364:	orr	r1, r1, r6, lsl lr
   25368:	lsl	r0, r6, ip
   2536c:	orr	r1, r1, r6, lsr r8
   25370:	subs	r0, r2, r0
   25374:	mov	r4, r6
   25378:	mov	r5, r7
   2537c:	sbc	r1, r3, r1
   25380:	cmp	r9, #0
   25384:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   25388:	strd	r4, [r9]
   2538c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   25390:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25394:	mov	r7, r0
   25398:	ldr	r6, [pc, #72]	; 253e8 <__assert_fail@plt+0x13e90>
   2539c:	ldr	r5, [pc, #72]	; 253ec <__assert_fail@plt+0x13e94>
   253a0:	add	r6, pc, r6
   253a4:	add	r5, pc, r5
   253a8:	sub	r6, r6, r5
   253ac:	mov	r8, r1
   253b0:	mov	r9, r2
   253b4:	bl	11178 <pthread_mutex_unlock@plt-0x20>
   253b8:	asrs	r6, r6, #2
   253bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   253c0:	mov	r4, #0
   253c4:	add	r4, r4, #1
   253c8:	ldr	r3, [r5], #4
   253cc:	mov	r2, r9
   253d0:	mov	r1, r8
   253d4:	mov	r0, r7
   253d8:	blx	r3
   253dc:	cmp	r6, r4
   253e0:	bne	253c4 <__assert_fail@plt+0x13e6c>
   253e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   253e8:	andeq	r1, r1, r8, ror #22
   253ec:	andeq	r1, r1, r0, ror #22
   253f0:	bx	lr
   253f4:	ldr	r3, [pc, #12]	; 25408 <__assert_fail@plt+0x13eb0>
   253f8:	mov	r1, #0
   253fc:	add	r3, pc, r3
   25400:	ldr	r2, [r3]
   25404:	b	11450 <__cxa_atexit@plt>
   25408:	andeq	r1, r1, r4, asr sp

Disassembly of section .fini:

0002540c <.fini>:
   2540c:	push	{r3, lr}
   25410:	pop	{r3, pc}
