
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

000110c0 <.init>:
   110c0:	push	{r3, lr}
   110c4:	bl	1141c <__assert_fail@plt+0x48>
   110c8:	pop	{r3, pc}

Disassembly of section .plt:

000110cc <calloc@plt-0x14>:
   110cc:	push	{lr}		; (str lr, [sp, #-4]!)
   110d0:	ldr	lr, [pc, #4]	; 110dc <calloc@plt-0x4>
   110d4:	add	lr, pc, lr
   110d8:	ldr	pc, [lr, #8]!
   110dc:	andeq	r5, r1, r4, lsr #30

000110e0 <calloc@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #86016	; 0x15000
   110e8:	ldr	pc, [ip, #3876]!	; 0xf24

000110ec <endgrent@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #86016	; 0x15000
   110f4:	ldr	pc, [ip, #3868]!	; 0xf1c

000110f8 <fputs_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #86016	; 0x15000
   11100:	ldr	pc, [ip, #3860]!	; 0xf14

00011104 <raise@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #86016	; 0x15000
   1110c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011110 <getpwnam@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #86016	; 0x15000
   11118:	ldr	pc, [ip, #3844]!	; 0xf04

0001111c <strcmp@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #86016	; 0x15000
   11124:	ldr	pc, [ip, #3836]!	; 0xefc

00011128 <getpwuid@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #86016	; 0x15000
   11130:	ldr	pc, [ip, #3828]!	; 0xef4

00011134 <fflush@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #86016	; 0x15000
   1113c:	ldr	pc, [ip, #3820]!	; 0xeec

00011140 <free@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #86016	; 0x15000
   11148:	ldr	pc, [ip, #3812]!	; 0xee4

0001114c <_exit@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #86016	; 0x15000
   11154:	ldr	pc, [ip, #3804]!	; 0xedc

00011158 <memcpy@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #86016	; 0x15000
   11160:	ldr	pc, [ip, #3796]!	; 0xed4

00011164 <execvp@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #86016	; 0x15000
   1116c:	ldr	pc, [ip, #3788]!	; 0xecc

00011170 <mbsinit@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #86016	; 0x15000
   11178:	ldr	pc, [ip, #3780]!	; 0xec4

0001117c <memcmp@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #86016	; 0x15000
   11184:	ldr	pc, [ip, #3772]!	; 0xebc

00011188 <dcgettext@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #86016	; 0x15000
   11190:	ldr	pc, [ip, #3764]!	; 0xeb4

00011194 <realloc@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #86016	; 0x15000
   1119c:	ldr	pc, [ip, #3756]!	; 0xeac

000111a0 <textdomain@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #86016	; 0x15000
   111a8:	ldr	pc, [ip, #3748]!	; 0xea4

000111ac <chdir@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #86016	; 0x15000
   111b4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111b8 <iswprint@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #86016	; 0x15000
   111c0:	ldr	pc, [ip, #3732]!	; 0xe94

000111c4 <setgroups@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #86016	; 0x15000
   111cc:	ldr	pc, [ip, #3724]!	; 0xe8c

000111d0 <fwrite@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #86016	; 0x15000
   111d8:	ldr	pc, [ip, #3716]!	; 0xe84

000111dc <lseek64@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #86016	; 0x15000
   111e4:	ldr	pc, [ip, #3708]!	; 0xe7c

000111e8 <__ctype_get_mb_cur_max@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #86016	; 0x15000
   111f0:	ldr	pc, [ip, #3700]!	; 0xe74

000111f4 <chroot@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #86016	; 0x15000
   111fc:	ldr	pc, [ip, #3692]!	; 0xe6c

00011200 <__fpending@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #86016	; 0x15000
   11208:	ldr	pc, [ip, #3684]!	; 0xe64

0001120c <ferror_unlocked@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #86016	; 0x15000
   11214:	ldr	pc, [ip, #3676]!	; 0xe5c

00011218 <mbrtowc@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #86016	; 0x15000
   11220:	ldr	pc, [ip, #3668]!	; 0xe54

00011224 <error@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #86016	; 0x15000
   1122c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011230 <getenv@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #86016	; 0x15000
   11238:	ldr	pc, [ip, #3652]!	; 0xe44

0001123c <setgid@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #86016	; 0x15000
   11244:	ldr	pc, [ip, #3644]!	; 0xe3c

00011248 <malloc@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #86016	; 0x15000
   11250:	ldr	pc, [ip, #3636]!	; 0xe34

00011254 <__libc_start_main@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #86016	; 0x15000
   1125c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011260 <__freading@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #86016	; 0x15000
   11268:	ldr	pc, [ip, #3620]!	; 0xe24

0001126c <__gmon_start__@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #86016	; 0x15000
   11274:	ldr	pc, [ip, #3612]!	; 0xe1c

00011278 <getopt_long@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #86016	; 0x15000
   11280:	ldr	pc, [ip, #3604]!	; 0xe14

00011284 <__ctype_b_loc@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #86016	; 0x15000
   1128c:	ldr	pc, [ip, #3596]!	; 0xe0c

00011290 <exit@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #86016	; 0x15000
   11298:	ldr	pc, [ip, #3588]!	; 0xe04

0001129c <strtoul@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #86016	; 0x15000
   112a4:	ldr	pc, [ip, #3580]!	; 0xdfc

000112a8 <strlen@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #86016	; 0x15000
   112b0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112b4 <strchr@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #86016	; 0x15000
   112bc:	ldr	pc, [ip, #3564]!	; 0xdec

000112c0 <__errno_location@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #86016	; 0x15000
   112c8:	ldr	pc, [ip, #3556]!	; 0xde4

000112cc <__cxa_atexit@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #86016	; 0x15000
   112d4:	ldr	pc, [ip, #3548]!	; 0xddc

000112d8 <getgrouplist@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #86016	; 0x15000
   112e0:	ldr	pc, [ip, #3540]!	; 0xdd4

000112e4 <memset@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #86016	; 0x15000
   112ec:	ldr	pc, [ip, #3532]!	; 0xdcc

000112f0 <__printf_chk@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #86016	; 0x15000
   112f8:	ldr	pc, [ip, #3524]!	; 0xdc4

000112fc <fileno@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #86016	; 0x15000
   11304:	ldr	pc, [ip, #3516]!	; 0xdbc

00011308 <strtoumax@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #86016	; 0x15000
   11310:	ldr	pc, [ip, #3508]!	; 0xdb4

00011314 <__fprintf_chk@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #86016	; 0x15000
   1131c:	ldr	pc, [ip, #3500]!	; 0xdac

00011320 <fclose@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #86016	; 0x15000
   11328:	ldr	pc, [ip, #3492]!	; 0xda4

0001132c <fseeko64@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #86016	; 0x15000
   11334:	ldr	pc, [ip, #3484]!	; 0xd9c

00011338 <strtok@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #86016	; 0x15000
   11340:	ldr	pc, [ip, #3476]!	; 0xd94

00011344 <setlocale@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #86016	; 0x15000
   1134c:	ldr	pc, [ip, #3468]!	; 0xd8c

00011350 <endpwent@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #86016	; 0x15000
   11358:	ldr	pc, [ip, #3460]!	; 0xd84

0001135c <strrchr@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #86016	; 0x15000
   11364:	ldr	pc, [ip, #3452]!	; 0xd7c

00011368 <nl_langinfo@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #86016	; 0x15000
   11370:	ldr	pc, [ip, #3444]!	; 0xd74

00011374 <setuid@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #86016	; 0x15000
   1137c:	ldr	pc, [ip, #3436]!	; 0xd6c

00011380 <getgroups@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #86016	; 0x15000
   11388:	ldr	pc, [ip, #3428]!	; 0xd64

0001138c <canonicalize_file_name@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #86016	; 0x15000
   11394:	ldr	pc, [ip, #3420]!	; 0xd5c

00011398 <bindtextdomain@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #86016	; 0x15000
   113a0:	ldr	pc, [ip, #3412]!	; 0xd54

000113a4 <strncmp@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #86016	; 0x15000
   113ac:	ldr	pc, [ip, #3404]!	; 0xd4c

000113b0 <abort@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #86016	; 0x15000
   113b8:	ldr	pc, [ip, #3396]!	; 0xd44

000113bc <getgrgid@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #86016	; 0x15000
   113c4:	ldr	pc, [ip, #3388]!	; 0xd3c

000113c8 <getgrnam@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #86016	; 0x15000
   113d0:	ldr	pc, [ip, #3380]!	; 0xd34

000113d4 <__assert_fail@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #86016	; 0x15000
   113dc:	ldr	pc, [ip, #3372]!	; 0xd2c

Disassembly of section .text:

000113e0 <.text>:
   113e0:	mov	fp, #0
   113e4:	mov	lr, #0
   113e8:	pop	{r1}		; (ldr r1, [sp], #4)
   113ec:	mov	r2, sp
   113f0:	push	{r2}		; (str r2, [sp, #-4]!)
   113f4:	push	{r0}		; (str r0, [sp, #-4]!)
   113f8:	ldr	ip, [pc, #16]	; 11410 <__assert_fail@plt+0x3c>
   113fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11400:	ldr	r0, [pc, #12]	; 11414 <__assert_fail@plt+0x40>
   11404:	ldr	r3, [pc, #12]	; 11418 <__assert_fail@plt+0x44>
   11408:	bl	11254 <__libc_start_main@plt>
   1140c:	bl	113b0 <abort@plt>
   11410:	andeq	r6, r1, ip, lsl #5
   11414:	ldrdeq	r1, [r1], -r0
   11418:	andeq	r6, r1, ip, lsr #4
   1141c:	ldr	r3, [pc, #20]	; 11438 <__assert_fail@plt+0x64>
   11420:	ldr	r2, [pc, #20]	; 1143c <__assert_fail@plt+0x68>
   11424:	add	r3, pc, r3
   11428:	ldr	r2, [r3, r2]
   1142c:	cmp	r2, #0
   11430:	bxeq	lr
   11434:	b	1126c <__gmon_start__@plt>
   11438:	ldrdeq	r5, [r1], -r4
   1143c:	andeq	r0, r0, ip, lsl #2
   11440:	ldr	r0, [pc, #24]	; 11460 <__assert_fail@plt+0x8c>
   11444:	ldr	r3, [pc, #24]	; 11464 <__assert_fail@plt+0x90>
   11448:	cmp	r3, r0
   1144c:	bxeq	lr
   11450:	ldr	r3, [pc, #16]	; 11468 <__assert_fail@plt+0x94>
   11454:	cmp	r3, #0
   11458:	bxeq	lr
   1145c:	bx	r3
   11460:	andeq	r7, r2, r0, ror #2
   11464:	andeq	r7, r2, r0, ror #2
   11468:	andeq	r0, r0, r0
   1146c:	ldr	r0, [pc, #36]	; 11498 <__assert_fail@plt+0xc4>
   11470:	ldr	r1, [pc, #36]	; 1149c <__assert_fail@plt+0xc8>
   11474:	sub	r1, r1, r0
   11478:	asr	r1, r1, #2
   1147c:	add	r1, r1, r1, lsr #31
   11480:	asrs	r1, r1, #1
   11484:	bxeq	lr
   11488:	ldr	r3, [pc, #16]	; 114a0 <__assert_fail@plt+0xcc>
   1148c:	cmp	r3, #0
   11490:	bxeq	lr
   11494:	bx	r3
   11498:	andeq	r7, r2, r0, ror #2
   1149c:	andeq	r7, r2, r0, ror #2
   114a0:	andeq	r0, r0, r0
   114a4:	push	{r4, lr}
   114a8:	ldr	r4, [pc, #24]	; 114c8 <__assert_fail@plt+0xf4>
   114ac:	ldrb	r3, [r4]
   114b0:	cmp	r3, #0
   114b4:	popne	{r4, pc}
   114b8:	bl	11440 <__assert_fail@plt+0x6c>
   114bc:	mov	r3, #1
   114c0:	strb	r3, [r4]
   114c4:	pop	{r4, pc}
   114c8:	andeq	r7, r2, ip, ror r1
   114cc:	b	1146c <__assert_fail@plt+0x98>
   114d0:	push	{fp, lr}
   114d4:	mov	fp, sp
   114d8:	mov	r4, r0
   114dc:	cmp	r0, #0
   114e0:	bne	11608 <__assert_fail@plt+0x234>
   114e4:	movw	r1, #25307	; 0x62db
   114e8:	movt	r1, #1
   114ec:	mov	r0, #0
   114f0:	mov	r2, #5
   114f4:	bl	11188 <dcgettext@plt>
   114f8:	mov	r1, r0
   114fc:	movw	r0, #29064	; 0x7188
   11500:	movt	r0, #2
   11504:	ldr	r2, [r0]
   11508:	mov	r0, #1
   1150c:	mov	r3, r2
   11510:	bl	112f0 <__printf_chk@plt>
   11514:	movw	r1, #25371	; 0x631b
   11518:	movt	r1, #1
   1151c:	mov	r0, #0
   11520:	mov	r2, #5
   11524:	bl	11188 <dcgettext@plt>
   11528:	movw	r6, #29044	; 0x7174
   1152c:	movt	r6, #2
   11530:	ldr	r1, [r6]
   11534:	bl	110f8 <fputs_unlocked@plt>
   11538:	movw	r1, #25421	; 0x634d
   1153c:	movt	r1, #1
   11540:	mov	r0, #0
   11544:	mov	r2, #5
   11548:	bl	11188 <dcgettext@plt>
   1154c:	ldr	r1, [r6]
   11550:	bl	110f8 <fputs_unlocked@plt>
   11554:	movw	r1, #25495	; 0x6397
   11558:	movt	r1, #1
   1155c:	mov	r0, #0
   11560:	mov	r2, #5
   11564:	bl	11188 <dcgettext@plt>
   11568:	ldr	r1, [r6]
   1156c:	bl	110f8 <fputs_unlocked@plt>
   11570:	movw	r1, #25568	; 0x63e0
   11574:	movt	r1, #1
   11578:	mov	r0, #0
   1157c:	mov	r2, #5
   11580:	bl	11188 <dcgettext@plt>
   11584:	mov	r5, r0
   11588:	movw	r1, #27795	; 0x6c93
   1158c:	movt	r1, #1
   11590:	mov	r0, #4
   11594:	bl	13914 <__assert_fail@plt+0x2540>
   11598:	mov	r2, r0
   1159c:	mov	r0, #1
   115a0:	mov	r1, r5
   115a4:	bl	112f0 <__printf_chk@plt>
   115a8:	movw	r1, #25636	; 0x6424
   115ac:	movt	r1, #1
   115b0:	mov	r0, #0
   115b4:	mov	r2, #5
   115b8:	bl	11188 <dcgettext@plt>
   115bc:	ldr	r1, [r6]
   115c0:	bl	110f8 <fputs_unlocked@plt>
   115c4:	movw	r1, #25681	; 0x6451
   115c8:	movt	r1, #1
   115cc:	mov	r0, #0
   115d0:	mov	r2, #5
   115d4:	bl	11188 <dcgettext@plt>
   115d8:	ldr	r1, [r6]
   115dc:	bl	110f8 <fputs_unlocked@plt>
   115e0:	movw	r1, #25735	; 0x6487
   115e4:	movt	r1, #1
   115e8:	mov	r0, #0
   115ec:	mov	r2, #5
   115f0:	bl	11188 <dcgettext@plt>
   115f4:	ldr	r1, [r6]
   115f8:	bl	110f8 <fputs_unlocked@plt>
   115fc:	bl	1164c <__assert_fail@plt+0x278>
   11600:	mov	r0, r4
   11604:	bl	11290 <exit@plt>
   11608:	movw	r0, #29040	; 0x7170
   1160c:	movt	r0, #2
   11610:	ldr	r5, [r0]
   11614:	movw	r1, #25268	; 0x62b4
   11618:	movt	r1, #1
   1161c:	mov	r0, #0
   11620:	mov	r2, #5
   11624:	bl	11188 <dcgettext@plt>
   11628:	mov	r2, r0
   1162c:	movw	r0, #29064	; 0x7188
   11630:	movt	r0, #2
   11634:	ldr	r3, [r0]
   11638:	mov	r0, r5
   1163c:	mov	r1, #1
   11640:	bl	11314 <__fprintf_chk@plt>
   11644:	mov	r0, r4
   11648:	bl	11290 <exit@plt>
   1164c:	push	{r4, r5, fp, lr}
   11650:	add	fp, sp, #8
   11654:	sub	sp, sp, #56	; 0x38
   11658:	movw	r0, #26680	; 0x6838
   1165c:	movt	r0, #1
   11660:	add	r1, r0, #32
   11664:	mov	r5, sp
   11668:	mov	r2, #48	; 0x30
   1166c:	vld1.64	{d16-d17}, [r1]
   11670:	add	r1, r5, #32
   11674:	add	r3, r0, #16
   11678:	vld1.64	{d18-d19}, [r0], r2
   1167c:	vld1.64	{d20-d21}, [r3]
   11680:	vldr	d22, [r0]
   11684:	vst1.64	{d16-d17}, [r1]
   11688:	add	r0, r5, #16
   1168c:	vst1.64	{d20-d21}, [r0]
   11690:	mov	r0, r5
   11694:	vst1.64	{d18-d19}, [r0], r2
   11698:	vstr	d22, [r0]
   1169c:	ldr	r1, [sp]
   116a0:	cmp	r1, #0
   116a4:	beq	116cc <__assert_fail@plt+0x2f8>
   116a8:	mov	r5, sp
   116ac:	movw	r4, #25804	; 0x64cc
   116b0:	movt	r4, #1
   116b4:	mov	r0, r4
   116b8:	bl	1111c <strcmp@plt>
   116bc:	cmp	r0, #0
   116c0:	ldrne	r1, [r5, #8]!
   116c4:	cmpne	r1, #0
   116c8:	bne	116b4 <__assert_fail@plt+0x2e0>
   116cc:	ldr	r4, [r5, #4]
   116d0:	movw	r1, #26293	; 0x66b5
   116d4:	movt	r1, #1
   116d8:	mov	r0, #0
   116dc:	mov	r2, #5
   116e0:	bl	11188 <dcgettext@plt>
   116e4:	mov	r1, r0
   116e8:	movw	r2, #25837	; 0x64ed
   116ec:	movt	r2, #1
   116f0:	movw	r3, #26316	; 0x66cc
   116f4:	movt	r3, #1
   116f8:	mov	r0, #1
   116fc:	bl	112f0 <__printf_chk@plt>
   11700:	movw	r5, #25804	; 0x64cc
   11704:	movt	r5, #1
   11708:	cmp	r4, #0
   1170c:	moveq	r4, r5
   11710:	mov	r0, #5
   11714:	mov	r1, #0
   11718:	bl	11344 <setlocale@plt>
   1171c:	cmp	r0, #0
   11720:	beq	11760 <__assert_fail@plt+0x38c>
   11724:	movw	r1, #26356	; 0x66f4
   11728:	movt	r1, #1
   1172c:	mov	r2, #3
   11730:	bl	113a4 <strncmp@plt>
   11734:	cmp	r0, #0
   11738:	beq	11760 <__assert_fail@plt+0x38c>
   1173c:	movw	r1, #26360	; 0x66f8
   11740:	movt	r1, #1
   11744:	mov	r0, #0
   11748:	mov	r2, #5
   1174c:	bl	11188 <dcgettext@plt>
   11750:	movw	r1, #29044	; 0x7174
   11754:	movt	r1, #2
   11758:	ldr	r1, [r1]
   1175c:	bl	110f8 <fputs_unlocked@plt>
   11760:	movw	r1, #26431	; 0x673f
   11764:	movt	r1, #1
   11768:	mov	r0, #0
   1176c:	mov	r2, #5
   11770:	bl	11188 <dcgettext@plt>
   11774:	mov	r1, r0
   11778:	movw	r2, #26316	; 0x66cc
   1177c:	movt	r2, #1
   11780:	mov	r0, #1
   11784:	mov	r3, r5
   11788:	bl	112f0 <__printf_chk@plt>
   1178c:	movw	r1, #26458	; 0x675a
   11790:	movt	r1, #1
   11794:	mov	r0, #0
   11798:	mov	r2, #5
   1179c:	bl	11188 <dcgettext@plt>
   117a0:	mov	r1, r0
   117a4:	movw	r0, #26226	; 0x6672
   117a8:	movt	r0, #1
   117ac:	movw	r3, #25420	; 0x634c
   117b0:	movt	r3, #1
   117b4:	cmp	r4, r5
   117b8:	moveq	r3, r0
   117bc:	mov	r0, #1
   117c0:	mov	r2, r4
   117c4:	bl	112f0 <__printf_chk@plt>
   117c8:	sub	sp, fp, #8
   117cc:	pop	{r4, r5, fp, pc}
   117d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117d4:	add	fp, sp, #28
   117d8:	sub	sp, sp, #44	; 0x2c
   117dc:	mov	r9, r1
   117e0:	mov	sl, r0
   117e4:	mvn	r0, #0
   117e8:	str	r0, [fp, #-32]	; 0xffffffe0
   117ec:	str	r0, [sp, #36]	; 0x24
   117f0:	mov	r7, #0
   117f4:	str	r7, [sp, #32]
   117f8:	str	r7, [sp, #28]
   117fc:	ldr	r0, [r1]
   11800:	bl	122d0 <__assert_fail@plt+0xefc>
   11804:	movw	r1, #25420	; 0x634c
   11808:	movt	r1, #1
   1180c:	mov	r0, #6
   11810:	bl	11344 <setlocale@plt>
   11814:	movw	r5, #25841	; 0x64f1
   11818:	movt	r5, #1
   1181c:	movw	r1, #25811	; 0x64d3
   11820:	movt	r1, #1
   11824:	mov	r0, r5
   11828:	bl	11398 <bindtextdomain@plt>
   1182c:	mov	r0, r5
   11830:	bl	111a0 <textdomain@plt>
   11834:	bl	11f08 <__assert_fail@plt+0xb34>
   11838:	movw	r0, #8640	; 0x21c0
   1183c:	movt	r0, #1
   11840:	bl	16290 <__assert_fail@plt+0x4ebc>
   11844:	movw	r8, #25835	; 0x64eb
   11848:	movt	r8, #1
   1184c:	movw	r4, #26584	; 0x67d8
   11850:	movt	r4, #1
   11854:	mov	r0, #0
   11858:	str	r0, [sp, #20]
   1185c:	mov	r6, #0
   11860:	mov	r5, #0
   11864:	b	11880 <__assert_fail@plt+0x4ac>
   11868:	movw	r0, #29048	; 0x7178
   1186c:	movt	r0, #2
   11870:	ldr	r6, [r0]
   11874:	b	11880 <__assert_fail@plt+0x4ac>
   11878:	mov	r0, #1
   1187c:	str	r0, [sp, #20]
   11880:	str	r7, [sp]
   11884:	mov	r0, sl
   11888:	mov	r1, r9
   1188c:	mov	r2, r8
   11890:	mov	r3, r4
   11894:	bl	11278 <getopt_long@plt>
   11898:	cmp	r0, #255	; 0xff
   1189c:	ble	118f0 <__assert_fail@plt+0x51c>
   118a0:	cmp	r0, #256	; 0x100
   118a4:	beq	11868 <__assert_fail@plt+0x494>
   118a8:	movw	r1, #258	; 0x102
   118ac:	cmp	r0, r1
   118b0:	beq	11878 <__assert_fail@plt+0x4a4>
   118b4:	movw	r1, #257	; 0x101
   118b8:	cmp	r0, r1
   118bc:	bne	11d9c <__assert_fail@plt+0x9c8>
   118c0:	movw	r0, #29048	; 0x7178
   118c4:	movt	r0, #2
   118c8:	ldr	r5, [r0]
   118cc:	mov	r0, r5
   118d0:	bl	112a8 <strlen@plt>
   118d4:	cmp	r0, #0
   118d8:	beq	11880 <__assert_fail@plt+0x4ac>
   118dc:	sub	r0, r0, #1
   118e0:	ldrb	r1, [r5, r0]
   118e4:	cmp	r1, #58	; 0x3a
   118e8:	strbeq	r7, [r5, r0]
   118ec:	b	11880 <__assert_fail@plt+0x4ac>
   118f0:	cmn	r0, #1
   118f4:	bne	11d3c <__assert_fail@plt+0x968>
   118f8:	movw	r7, #29032	; 0x7168
   118fc:	movt	r7, #2
   11900:	ldr	r0, [r7]
   11904:	cmp	r0, sl
   11908:	bge	11da4 <__assert_fail@plt+0x9d0>
   1190c:	ldr	r4, [r9, r0, lsl #2]
   11910:	mov	r0, r4
   11914:	bl	11f1c <__assert_fail@plt+0xb48>
   11918:	cmp	r0, #0
   1191c:	bne	11930 <__assert_fail@plt+0x55c>
   11920:	ldr	r1, [sp, #20]
   11924:	eor	r1, r1, #1
   11928:	tst	r1, #1
   1192c:	beq	11dd0 <__assert_fail@plt+0x9fc>
   11930:	mov	r8, #0
   11934:	cmp	r0, #0
   11938:	bne	11a54 <__assert_fail@plt+0x680>
   1193c:	cmp	r5, #0
   11940:	beq	11960 <__assert_fail@plt+0x58c>
   11944:	mov	r0, #0
   11948:	str	r0, [sp]
   1194c:	sub	r1, fp, #32
   11950:	add	r2, sp, #36	; 0x24
   11954:	mov	r0, r5
   11958:	mov	r3, #0
   1195c:	bl	13f1c <__assert_fail@plt+0x2b48>
   11960:	str	r5, [sp, #12]
   11964:	ldr	r8, [fp, #-32]	; 0xffffffe0
   11968:	mov	r0, r8
   1196c:	bl	11f64 <__assert_fail@plt+0xb90>
   11970:	mov	r5, #0
   11974:	cmp	r0, #0
   11978:	str	r4, [sp, #16]
   1197c:	bne	119d4 <__assert_fail@plt+0x600>
   11980:	mov	r4, r7
   11984:	cmp	r6, #0
   11988:	beq	119a0 <__assert_fail@plt+0x5cc>
   1198c:	ldr	r0, [sp, #36]	; 0x24
   11990:	bl	11f74 <__assert_fail@plt+0xba0>
   11994:	mov	r7, #0
   11998:	cmp	r0, #0
   1199c:	beq	119e4 <__assert_fail@plt+0x610>
   119a0:	mov	r0, r8
   119a4:	bl	11128 <getpwuid@plt>
   119a8:	cmp	r0, #0
   119ac:	mov	r7, r4
   119b0:	ldr	r4, [sp, #16]
   119b4:	beq	119d4 <__assert_fail@plt+0x600>
   119b8:	mov	r8, r0
   119bc:	ldr	r0, [sp, #36]	; 0x24
   119c0:	bl	11f74 <__assert_fail@plt+0xba0>
   119c4:	cmp	r0, #0
   119c8:	ldrne	r0, [r8, #12]
   119cc:	strne	r0, [sp, #36]	; 0x24
   119d0:	ldr	r5, [r8]
   119d4:	cmp	r6, #0
   119d8:	beq	11a18 <__assert_fail@plt+0x644>
   119dc:	mov	r4, r7
   119e0:	mov	r7, r5
   119e4:	ldrb	r0, [r6]
   119e8:	cmp	r0, #0
   119ec:	beq	11a04 <__assert_fail@plt+0x630>
   119f0:	add	r1, sp, #32
   119f4:	add	r2, sp, #28
   119f8:	mov	r0, r6
   119fc:	mov	r3, #0
   11a00:	bl	11f84 <__assert_fail@plt+0xbb0>
   11a04:	mov	r8, r7
   11a08:	ldr	r5, [sp, #12]
   11a0c:	mov	r7, r4
   11a10:	ldr	r4, [sp, #16]
   11a14:	b	11a54 <__assert_fail@plt+0x680>
   11a18:	ldr	r8, [sp, #36]	; 0x24
   11a1c:	mov	r0, r8
   11a20:	bl	11f74 <__assert_fail@plt+0xba0>
   11a24:	cmp	r5, #0
   11a28:	beq	11a4c <__assert_fail@plt+0x678>
   11a2c:	cmp	r0, #0
   11a30:	bne	11a4c <__assert_fail@plt+0x678>
   11a34:	add	r2, sp, #32
   11a38:	mov	r0, r5
   11a3c:	mov	r1, r8
   11a40:	bl	14b84 <__assert_fail@plt+0x37b0>
   11a44:	cmp	r0, #1
   11a48:	strge	r0, [sp, #28]
   11a4c:	mov	r8, r5
   11a50:	ldr	r5, [sp, #12]
   11a54:	mov	r0, r4
   11a58:	bl	111f4 <chroot@plt>
   11a5c:	cmp	r0, #0
   11a60:	bne	11e14 <__assert_fail@plt+0xa40>
   11a64:	ldr	r0, [sp, #20]
   11a68:	tst	r0, #1
   11a6c:	bne	11a84 <__assert_fail@plt+0x6b0>
   11a70:	movw	r0, #27795	; 0x6c93
   11a74:	movt	r0, #1
   11a78:	bl	111ac <chdir@plt>
   11a7c:	cmp	r0, #0
   11a80:	bne	11e54 <__assert_fail@plt+0xa80>
   11a84:	ldr	r0, [r7]
   11a88:	add	r0, r0, #1
   11a8c:	cmp	r0, sl
   11a90:	bne	11ad8 <__assert_fail@plt+0x704>
   11a94:	movw	r0, #26004	; 0x6594
   11a98:	movt	r0, #1
   11a9c:	bl	11230 <getenv@plt>
   11aa0:	cmp	r0, #0
   11aa4:	bne	11ab4 <__assert_fail@plt+0x6e0>
   11aa8:	movw	r0, #26010	; 0x659a
   11aac:	movt	r0, #1
   11ab0:	bl	12198 <__assert_fail@plt+0xdc4>
   11ab4:	str	r0, [r9]
   11ab8:	movw	r0, #26018	; 0x65a2
   11abc:	movt	r0, #1
   11ac0:	bl	12198 <__assert_fail@plt+0xdc4>
   11ac4:	mov	r1, #0
   11ac8:	stmib	r9, {r0, r1}
   11acc:	cmp	r5, #0
   11ad0:	bne	11ae4 <__assert_fail@plt+0x710>
   11ad4:	b	11b2c <__assert_fail@plt+0x758>
   11ad8:	add	r9, r9, r0, lsl #2
   11adc:	cmp	r5, #0
   11ae0:	beq	11b2c <__assert_fail@plt+0x758>
   11ae4:	mov	r0, #0
   11ae8:	str	r0, [sp]
   11aec:	sub	r1, fp, #32
   11af0:	add	r2, sp, #36	; 0x24
   11af4:	mov	r0, r5
   11af8:	mov	r3, #0
   11afc:	bl	13f1c <__assert_fail@plt+0x2b48>
   11b00:	cmp	r0, #0
   11b04:	beq	11b2c <__assert_fail@plt+0x758>
   11b08:	mov	r5, r0
   11b0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11b10:	bl	11f64 <__assert_fail@plt+0xb90>
   11b14:	cmp	r0, #0
   11b18:	beq	11b2c <__assert_fail@plt+0x758>
   11b1c:	ldr	r0, [sp, #36]	; 0x24
   11b20:	bl	11f74 <__assert_fail@plt+0xba0>
   11b24:	cmp	r0, #0
   11b28:	bne	11ebc <__assert_fail@plt+0xae8>
   11b2c:	ldr	r5, [fp, #-32]	; 0xffffffe0
   11b30:	mov	r0, r5
   11b34:	bl	11f64 <__assert_fail@plt+0xb90>
   11b38:	cmp	r0, #0
   11b3c:	bne	11ba0 <__assert_fail@plt+0x7cc>
   11b40:	cmp	r6, #0
   11b44:	beq	11b58 <__assert_fail@plt+0x784>
   11b48:	ldr	r0, [sp, #36]	; 0x24
   11b4c:	bl	11f74 <__assert_fail@plt+0xba0>
   11b50:	cmp	r0, #0
   11b54:	beq	11b88 <__assert_fail@plt+0x7b4>
   11b58:	mov	r0, r5
   11b5c:	bl	11128 <getpwuid@plt>
   11b60:	mov	r5, r0
   11b64:	ldr	r0, [sp, #36]	; 0x24
   11b68:	bl	11f74 <__assert_fail@plt+0xba0>
   11b6c:	cmp	r5, #0
   11b70:	beq	11b98 <__assert_fail@plt+0x7c4>
   11b74:	cmp	r0, #0
   11b78:	ldrne	r0, [r5, #12]
   11b7c:	strne	r0, [sp, #36]	; 0x24
   11b80:	ldr	r8, [r5]
   11b84:	b	11ba0 <__assert_fail@plt+0x7cc>
   11b88:	ldr	r5, [sp, #32]
   11b8c:	mov	r0, #0
   11b90:	str	r0, [sp, #24]
   11b94:	b	11bb4 <__assert_fail@plt+0x7e0>
   11b98:	cmp	r0, #0
   11b9c:	bne	11ed8 <__assert_fail@plt+0xb04>
   11ba0:	ldr	r5, [sp, #32]
   11ba4:	mov	r7, #0
   11ba8:	str	r7, [sp, #24]
   11bac:	cmp	r6, #0
   11bb0:	beq	11c00 <__assert_fail@plt+0x82c>
   11bb4:	ldrb	r0, [r6]
   11bb8:	mov	r7, #1
   11bbc:	cmp	r0, #0
   11bc0:	beq	11c3c <__assert_fail@plt+0x868>
   11bc4:	ldr	r0, [sp, #28]
   11bc8:	clz	r0, r0
   11bcc:	lsr	r3, r0, #5
   11bd0:	add	r1, sp, #24
   11bd4:	add	r2, sp, #28
   11bd8:	mov	r0, r6
   11bdc:	bl	11f84 <__assert_fail@plt+0xbb0>
   11be0:	cmp	r0, #0
   11be4:	beq	11c38 <__assert_fail@plt+0x864>
   11be8:	ldr	r0, [sp, #28]
   11bec:	cmp	r0, #0
   11bf0:	moveq	r0, #125	; 0x7d
   11bf4:	subeq	sp, fp, #28
   11bf8:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bfc:	b	11c3c <__assert_fail@plt+0x868>
   11c00:	ldr	r6, [sp, #36]	; 0x24
   11c04:	mov	r0, r6
   11c08:	bl	11f74 <__assert_fail@plt+0xba0>
   11c0c:	cmp	r8, #0
   11c10:	beq	11c3c <__assert_fail@plt+0x868>
   11c14:	cmp	r0, #0
   11c18:	bne	11c3c <__assert_fail@plt+0x868>
   11c1c:	add	r2, sp, #24
   11c20:	mov	r0, r8
   11c24:	mov	r1, r6
   11c28:	bl	14b84 <__assert_fail@plt+0x37b0>
   11c2c:	cmp	r0, #0
   11c30:	ble	11d1c <__assert_fail@plt+0x948>
   11c34:	str	r0, [sp, #28]
   11c38:	ldr	r5, [sp, #24]
   11c3c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11c40:	bl	11f64 <__assert_fail@plt+0xb90>
   11c44:	cmp	r7, #0
   11c48:	bne	11c54 <__assert_fail@plt+0x880>
   11c4c:	cmp	r0, #0
   11c50:	bne	11c68 <__assert_fail@plt+0x894>
   11c54:	ldr	r0, [sp, #28]
   11c58:	mov	r1, r5
   11c5c:	bl	111c4 <setgroups@plt>
   11c60:	cmp	r0, #0
   11c64:	bne	11e68 <__assert_fail@plt+0xa94>
   11c68:	ldr	r0, [sp, #24]
   11c6c:	bl	122a8 <__assert_fail@plt+0xed4>
   11c70:	ldr	r0, [sp, #32]
   11c74:	bl	122a8 <__assert_fail@plt+0xed4>
   11c78:	ldr	r5, [sp, #36]	; 0x24
   11c7c:	mov	r0, r5
   11c80:	bl	11f74 <__assert_fail@plt+0xba0>
   11c84:	cmp	r0, #0
   11c88:	bne	11c9c <__assert_fail@plt+0x8c8>
   11c8c:	mov	r0, r5
   11c90:	bl	1123c <setgid@plt>
   11c94:	cmp	r0, #0
   11c98:	bne	11e7c <__assert_fail@plt+0xaa8>
   11c9c:	ldr	r5, [fp, #-32]	; 0xffffffe0
   11ca0:	mov	r0, r5
   11ca4:	bl	11f64 <__assert_fail@plt+0xb90>
   11ca8:	cmp	r0, #0
   11cac:	bne	11cc0 <__assert_fail@plt+0x8ec>
   11cb0:	mov	r0, r5
   11cb4:	bl	11374 <setuid@plt>
   11cb8:	cmp	r0, #0
   11cbc:	bne	11e90 <__assert_fail@plt+0xabc>
   11cc0:	ldr	r0, [r9]
   11cc4:	mov	r1, r9
   11cc8:	bl	11164 <execvp@plt>
   11ccc:	bl	112c0 <__errno_location@plt>
   11cd0:	ldr	r5, [r0]
   11cd4:	movw	r1, #26173	; 0x663d
   11cd8:	movt	r1, #1
   11cdc:	mov	r0, #0
   11ce0:	mov	r2, #5
   11ce4:	bl	11188 <dcgettext@plt>
   11ce8:	mov	r6, r0
   11cec:	ldr	r0, [r9]
   11cf0:	bl	13b08 <__assert_fail@plt+0x2734>
   11cf4:	mov	r3, r0
   11cf8:	mov	r0, #0
   11cfc:	mov	r1, r5
   11d00:	mov	r2, r6
   11d04:	bl	11224 <error@plt>
   11d08:	mov	r0, #126	; 0x7e
   11d0c:	cmp	r5, #2
   11d10:	movweq	r0, #127	; 0x7f
   11d14:	sub	sp, fp, #28
   11d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d1c:	ldr	r0, [sp, #28]
   11d20:	cmp	r0, #0
   11d24:	bne	11c3c <__assert_fail@plt+0x868>
   11d28:	bl	112c0 <__errno_location@plt>
   11d2c:	ldr	r4, [r0]
   11d30:	movw	r1, #26060	; 0x65cc
   11d34:	movt	r1, #1
   11d38:	b	11ea0 <__assert_fail@plt+0xacc>
   11d3c:	cmn	r0, #3
   11d40:	bne	11d8c <__assert_fail@plt+0x9b8>
   11d44:	movw	r0, #28952	; 0x7118
   11d48:	movt	r0, #2
   11d4c:	ldr	r3, [r0]
   11d50:	movw	r0, #29044	; 0x7174
   11d54:	movt	r0, #2
   11d58:	ldr	r0, [r0]
   11d5c:	mov	r1, #0
   11d60:	movw	r2, #25851	; 0x64fb
   11d64:	movt	r2, #1
   11d68:	str	r2, [sp]
   11d6c:	str	r1, [sp, #4]
   11d70:	movw	r1, #25804	; 0x64cc
   11d74:	movt	r1, #1
   11d78:	movw	r2, #25837	; 0x64ed
   11d7c:	movt	r2, #1
   11d80:	bl	14688 <__assert_fail@plt+0x32b4>
   11d84:	mov	r0, #0
   11d88:	bl	11290 <exit@plt>
   11d8c:	cmn	r0, #2
   11d90:	bne	11d9c <__assert_fail@plt+0x9c8>
   11d94:	mov	r0, #0
   11d98:	bl	114d0 <__assert_fail@plt+0xfc>
   11d9c:	mov	r0, #125	; 0x7d
   11da0:	bl	114d0 <__assert_fail@plt+0xfc>
   11da4:	movw	r1, #25866	; 0x650a
   11da8:	movt	r1, #1
   11dac:	mov	r0, #0
   11db0:	mov	r2, #5
   11db4:	bl	11188 <dcgettext@plt>
   11db8:	mov	r2, r0
   11dbc:	mov	r0, #0
   11dc0:	mov	r1, #0
   11dc4:	bl	11224 <error@plt>
   11dc8:	mov	r0, #125	; 0x7d
   11dcc:	bl	114d0 <__assert_fail@plt+0xfc>
   11dd0:	movw	r1, #25882	; 0x651a
   11dd4:	movt	r1, #1
   11dd8:	mov	r0, #0
   11ddc:	mov	r2, #5
   11de0:	bl	11188 <dcgettext@plt>
   11de4:	mov	r4, r0
   11de8:	movw	r1, #27795	; 0x6c93
   11dec:	movt	r1, #1
   11df0:	mov	r0, #4
   11df4:	bl	13914 <__assert_fail@plt+0x2540>
   11df8:	mov	r3, r0
   11dfc:	mov	r0, #0
   11e00:	mov	r1, #0
   11e04:	mov	r2, r4
   11e08:	bl	11224 <error@plt>
   11e0c:	mov	r0, #125	; 0x7d
   11e10:	bl	114d0 <__assert_fail@plt+0xfc>
   11e14:	bl	112c0 <__errno_location@plt>
   11e18:	ldr	r5, [r0]
   11e1c:	movw	r1, #25938	; 0x6552
   11e20:	movt	r1, #1
   11e24:	mov	r0, #0
   11e28:	mov	r2, #5
   11e2c:	bl	11188 <dcgettext@plt>
   11e30:	mov	r6, r0
   11e34:	mov	r0, #4
   11e38:	mov	r1, r4
   11e3c:	bl	13914 <__assert_fail@plt+0x2540>
   11e40:	mov	r3, r0
   11e44:	mov	r0, #125	; 0x7d
   11e48:	mov	r1, r5
   11e4c:	mov	r2, r6
   11e50:	bl	11224 <error@plt>
   11e54:	bl	112c0 <__errno_location@plt>
   11e58:	ldr	r4, [r0]
   11e5c:	movw	r1, #25973	; 0x6575
   11e60:	movt	r1, #1
   11e64:	b	11ea0 <__assert_fail@plt+0xacc>
   11e68:	bl	112c0 <__errno_location@plt>
   11e6c:	ldr	r4, [r0]
   11e70:	movw	r1, #26094	; 0x65ee
   11e74:	movt	r1, #1
   11e78:	b	11ea0 <__assert_fail@plt+0xacc>
   11e7c:	bl	112c0 <__errno_location@plt>
   11e80:	ldr	r4, [r0]
   11e84:	movw	r1, #26128	; 0x6610
   11e88:	movt	r1, #1
   11e8c:	b	11ea0 <__assert_fail@plt+0xacc>
   11e90:	bl	112c0 <__errno_location@plt>
   11e94:	ldr	r4, [r0]
   11e98:	movw	r1, #26151	; 0x6627
   11e9c:	movt	r1, #1
   11ea0:	mov	r0, #0
   11ea4:	mov	r2, #5
   11ea8:	bl	11188 <dcgettext@plt>
   11eac:	mov	r2, r0
   11eb0:	mov	r0, #125	; 0x7d
   11eb4:	mov	r1, r4
   11eb8:	bl	11224 <error@plt>
   11ebc:	bl	112c0 <__errno_location@plt>
   11ec0:	ldr	r1, [r0]
   11ec4:	movw	r2, #26767	; 0x688f
   11ec8:	movt	r2, #1
   11ecc:	mov	r0, #125	; 0x7d
   11ed0:	mov	r3, r5
   11ed4:	bl	11224 <error@plt>
   11ed8:	bl	112c0 <__errno_location@plt>
   11edc:	ldr	r4, [r0]
   11ee0:	movw	r1, #26021	; 0x65a5
   11ee4:	movt	r1, #1
   11ee8:	mov	r0, #0
   11eec:	mov	r2, #5
   11ef0:	bl	11188 <dcgettext@plt>
   11ef4:	mov	r2, r0
   11ef8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11efc:	mov	r0, #125	; 0x7d
   11f00:	mov	r1, r4
   11f04:	bl	11224 <error@plt>
   11f08:	movw	r0, #28956	; 0x711c
   11f0c:	movt	r0, #2
   11f10:	mov	r1, #125	; 0x7d
   11f14:	str	r1, [r0]
   11f18:	bx	lr
   11f1c:	push	{r4, r5, fp, lr}
   11f20:	add	fp, sp, #8
   11f24:	bl	1138c <canonicalize_file_name@plt>
   11f28:	mov	r4, r0
   11f2c:	cmp	r0, #0
   11f30:	beq	11f50 <__assert_fail@plt+0xb7c>
   11f34:	movw	r0, #27795	; 0x6c93
   11f38:	movt	r0, #1
   11f3c:	mov	r1, r4
   11f40:	bl	1111c <strcmp@plt>
   11f44:	clz	r0, r0
   11f48:	lsr	r5, r0, #5
   11f4c:	b	11f54 <__assert_fail@plt+0xb80>
   11f50:	mov	r5, #0
   11f54:	mov	r0, r4
   11f58:	bl	122a8 <__assert_fail@plt+0xed4>
   11f5c:	mov	r0, r5
   11f60:	pop	{r4, r5, fp, pc}
   11f64:	add	r0, r0, #1
   11f68:	clz	r0, r0
   11f6c:	lsr	r0, r0, #5
   11f70:	bx	lr
   11f74:	add	r0, r0, #1
   11f78:	clz	r0, r0
   11f7c:	lsr	r0, r0, #5
   11f80:	bx	lr
   11f84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f88:	add	fp, sp, #28
   11f8c:	sub	sp, sp, #36	; 0x24
   11f90:	str	r3, [sp, #20]
   11f94:	str	r2, [sp, #4]
   11f98:	str	r1, [sp, #12]
   11f9c:	mov	r8, #0
   11fa0:	str	r8, [sp, #32]
   11fa4:	str	r0, [sp, #8]
   11fa8:	bl	14b20 <__assert_fail@plt+0x374c>
   11fac:	movw	r1, #26542	; 0x67ae
   11fb0:	movt	r1, #1
   11fb4:	str	r0, [sp, #16]
   11fb8:	bl	11338 <strtok@plt>
   11fbc:	cmp	r0, #0
   11fc0:	beq	12108 <__assert_fail@plt+0xd34>
   11fc4:	mov	r4, r0
   11fc8:	mov	r7, #0
   11fcc:	movw	r9, #26542	; 0x67ae
   11fd0:	movt	r9, #1
   11fd4:	mov	sl, #0
   11fd8:	mov	r5, #0
   11fdc:	mov	r8, #0
   11fe0:	movw	r0, #25420	; 0x634c
   11fe4:	movt	r0, #1
   11fe8:	str	r0, [sp]
   11fec:	mov	r0, r4
   11ff0:	mov	r1, #0
   11ff4:	mov	r2, #10
   11ff8:	add	r3, sp, #24
   11ffc:	bl	150b8 <__assert_fail@plt+0x3ce4>
   12000:	cmp	r0, #0
   12004:	ldreq	r0, [sp, #28]
   12008:	cmpeq	r0, #0
   1200c:	beq	12030 <__assert_fail@plt+0xc5c>
   12010:	mov	r0, r4
   12014:	bl	113c8 <getgrnam@plt>
   12018:	cmp	r0, #0
   1201c:	beq	1209c <__assert_fail@plt+0xcc8>
   12020:	ldr	r0, [r0, #8]
   12024:	str	r7, [sp, #28]
   12028:	str	r0, [sp, #24]
   1202c:	b	1206c <__assert_fail@plt+0xc98>
   12030:	sub	r4, r4, #1
   12034:	bl	11284 <__ctype_b_loc@plt>
   12038:	ldr	r6, [r0]
   1203c:	ldrb	r0, [r4, #1]!
   12040:	bl	1219c <__assert_fail@plt+0xdc8>
   12044:	add	r1, r6, r0, lsl #1
   12048:	ldrb	r1, [r1, #1]
   1204c:	tst	r1, #32
   12050:	bne	1203c <__assert_fail@plt+0xc68>
   12054:	cmp	r0, #43	; 0x2b
   12058:	beq	1206c <__assert_fail@plt+0xc98>
   1205c:	mov	r0, r4
   12060:	bl	113c8 <getgrnam@plt>
   12064:	cmp	r0, #0
   12068:	bne	12020 <__assert_fail@plt+0xc4c>
   1206c:	ldr	r0, [sp, #32]
   12070:	cmp	r8, r0
   12074:	bne	1208c <__assert_fail@plt+0xcb8>
   12078:	mov	r0, r5
   1207c:	add	r1, sp, #32
   12080:	mov	r2, #4
   12084:	bl	14860 <__assert_fail@plt+0x348c>
   12088:	mov	r5, r0
   1208c:	ldr	r0, [sp, #24]
   12090:	str	r0, [r5, r8, lsl #2]
   12094:	add	r8, r8, #1
   12098:	b	120ec <__assert_fail@plt+0xd18>
   1209c:	ldr	r0, [sp, #20]
   120a0:	cmp	r0, #0
   120a4:	beq	1215c <__assert_fail@plt+0xd88>
   120a8:	bl	112c0 <__errno_location@plt>
   120ac:	ldr	r7, [r0]
   120b0:	mov	r0, #0
   120b4:	movw	r1, #26544	; 0x67b0
   120b8:	movt	r1, #1
   120bc:	mov	r2, #5
   120c0:	bl	11188 <dcgettext@plt>
   120c4:	mov	r6, r0
   120c8:	mov	r0, r4
   120cc:	bl	13b08 <__assert_fail@plt+0x2734>
   120d0:	mov	r3, r0
   120d4:	mov	r0, #0
   120d8:	mov	r1, r7
   120dc:	mov	r7, #0
   120e0:	mov	r2, r6
   120e4:	bl	11224 <error@plt>
   120e8:	mvn	sl, #0
   120ec:	mov	r0, #0
   120f0:	mov	r1, r9
   120f4:	bl	11338 <strtok@plt>
   120f8:	mov	r4, r0
   120fc:	cmp	r0, #0
   12100:	bne	11fe0 <__assert_fail@plt+0xc0c>
   12104:	b	12110 <__assert_fail@plt+0xd3c>
   12108:	mov	r5, #0
   1210c:	mov	sl, #0
   12110:	orrs	r0, sl, r8
   12114:	mvneq	sl, #0
   12118:	bne	1216c <__assert_fail@plt+0xd98>
   1211c:	ldr	r0, [sp, #20]
   12120:	cmp	r0, #0
   12124:	beq	1216c <__assert_fail@plt+0xd98>
   12128:	movw	r1, #26561	; 0x67c1
   1212c:	movt	r1, #1
   12130:	mov	r0, #0
   12134:	mov	r2, #5
   12138:	bl	11188 <dcgettext@plt>
   1213c:	mov	r4, r0
   12140:	ldr	r0, [sp, #8]
   12144:	bl	13b08 <__assert_fail@plt+0x2734>
   12148:	mov	r3, r0
   1214c:	mov	r0, #0
   12150:	mov	r1, #0
   12154:	mov	r2, r4
   12158:	bl	11224 <error@plt>
   1215c:	ldr	r0, [sp, #12]
   12160:	str	r5, [r0]
   12164:	mvn	sl, #0
   12168:	b	12184 <__assert_fail@plt+0xdb0>
   1216c:	ldr	r0, [sp, #12]
   12170:	str	r5, [r0]
   12174:	cmp	sl, #0
   12178:	ldreq	r0, [sp, #4]
   1217c:	streq	r8, [r0]
   12180:	moveq	sl, #0
   12184:	ldr	r0, [sp, #16]
   12188:	bl	122a8 <__assert_fail@plt+0xed4>
   1218c:	mov	r0, sl
   12190:	sub	sp, fp, #28
   12194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12198:	bx	lr
   1219c:	bx	lr
   121a0:	movw	r1, #29056	; 0x7180
   121a4:	movt	r1, #2
   121a8:	str	r0, [r1]
   121ac:	bx	lr
   121b0:	movw	r1, #29060	; 0x7184
   121b4:	movt	r1, #2
   121b8:	strb	r0, [r1]
   121bc:	bx	lr
   121c0:	push	{r4, r5, r6, sl, fp, lr}
   121c4:	add	fp, sp, #16
   121c8:	sub	sp, sp, #8
   121cc:	movw	r0, #29044	; 0x7174
   121d0:	movt	r0, #2
   121d4:	ldr	r0, [r0]
   121d8:	bl	159e8 <__assert_fail@plt+0x4614>
   121dc:	cmp	r0, #0
   121e0:	beq	12208 <__assert_fail@plt+0xe34>
   121e4:	movw	r0, #29060	; 0x7184
   121e8:	movt	r0, #2
   121ec:	ldrb	r0, [r0]
   121f0:	cmp	r0, #0
   121f4:	beq	12228 <__assert_fail@plt+0xe54>
   121f8:	bl	112c0 <__errno_location@plt>
   121fc:	ldr	r0, [r0]
   12200:	cmp	r0, #32
   12204:	bne	12228 <__assert_fail@plt+0xe54>
   12208:	movw	r0, #29040	; 0x7170
   1220c:	movt	r0, #2
   12210:	ldr	r0, [r0]
   12214:	bl	159e8 <__assert_fail@plt+0x4614>
   12218:	cmp	r0, #0
   1221c:	subeq	sp, fp, #16
   12220:	popeq	{r4, r5, r6, sl, fp, pc}
   12224:	b	12298 <__assert_fail@plt+0xec4>
   12228:	movw	r1, #26751	; 0x687f
   1222c:	movt	r1, #1
   12230:	mov	r0, #0
   12234:	mov	r2, #5
   12238:	bl	11188 <dcgettext@plt>
   1223c:	mov	r4, r0
   12240:	movw	r0, #29056	; 0x7180
   12244:	movt	r0, #2
   12248:	ldr	r6, [r0]
   1224c:	bl	112c0 <__errno_location@plt>
   12250:	ldr	r5, [r0]
   12254:	cmp	r6, #0
   12258:	bne	12274 <__assert_fail@plt+0xea0>
   1225c:	movw	r2, #26767	; 0x688f
   12260:	movt	r2, #1
   12264:	mov	r0, #0
   12268:	mov	r1, r5
   1226c:	mov	r3, r4
   12270:	b	12294 <__assert_fail@plt+0xec0>
   12274:	mov	r0, r6
   12278:	bl	139b8 <__assert_fail@plt+0x25e4>
   1227c:	mov	r3, r0
   12280:	str	r4, [sp]
   12284:	movw	r2, #26763	; 0x688b
   12288:	movt	r2, #1
   1228c:	mov	r0, #0
   12290:	mov	r1, r5
   12294:	bl	11224 <error@plt>
   12298:	movw	r0, #28956	; 0x711c
   1229c:	movt	r0, #2
   122a0:	ldr	r0, [r0]
   122a4:	bl	1114c <_exit@plt>
   122a8:	push	{r4, r5, r6, sl, fp, lr}
   122ac:	add	fp, sp, #16
   122b0:	mov	r4, r0
   122b4:	bl	112c0 <__errno_location@plt>
   122b8:	mov	r5, r0
   122bc:	ldr	r6, [r0]
   122c0:	mov	r0, r4
   122c4:	bl	11140 <free@plt>
   122c8:	str	r6, [r5]
   122cc:	pop	{r4, r5, r6, sl, fp, pc}
   122d0:	push	{r4, r5, fp, lr}
   122d4:	add	fp, sp, #8
   122d8:	cmp	r0, #0
   122dc:	beq	12370 <__assert_fail@plt+0xf9c>
   122e0:	mov	r4, r0
   122e4:	mov	r1, #47	; 0x2f
   122e8:	bl	1135c <strrchr@plt>
   122ec:	cmp	r0, #0
   122f0:	mov	r5, r4
   122f4:	addne	r5, r0, #1
   122f8:	sub	r0, r5, r4
   122fc:	cmp	r0, #7
   12300:	blt	12354 <__assert_fail@plt+0xf80>
   12304:	sub	r0, r5, #7
   12308:	movw	r1, #26826	; 0x68ca
   1230c:	movt	r1, #1
   12310:	mov	r2, #7
   12314:	bl	113a4 <strncmp@plt>
   12318:	cmp	r0, #0
   1231c:	bne	12354 <__assert_fail@plt+0xf80>
   12320:	movw	r1, #26834	; 0x68d2
   12324:	movt	r1, #1
   12328:	mov	r0, r5
   1232c:	mov	r2, #3
   12330:	bl	113a4 <strncmp@plt>
   12334:	cmp	r0, #0
   12338:	beq	12344 <__assert_fail@plt+0xf70>
   1233c:	mov	r4, r5
   12340:	b	12354 <__assert_fail@plt+0xf80>
   12344:	add	r4, r5, #3
   12348:	movw	r0, #29024	; 0x7160
   1234c:	movt	r0, #2
   12350:	str	r4, [r0]
   12354:	movw	r0, #29028	; 0x7164
   12358:	movt	r0, #2
   1235c:	str	r4, [r0]
   12360:	movw	r0, #29064	; 0x7188
   12364:	movt	r0, #2
   12368:	str	r4, [r0]
   1236c:	pop	{r4, r5, fp, pc}
   12370:	movw	r0, #29040	; 0x7170
   12374:	movt	r0, #2
   12378:	ldr	r3, [r0]
   1237c:	movw	r0, #26770	; 0x6892
   12380:	movt	r0, #1
   12384:	mov	r1, #55	; 0x37
   12388:	mov	r2, #1
   1238c:	bl	111d0 <fwrite@plt>
   12390:	bl	113b0 <abort@plt>
   12394:	push	{r4, r5, r6, sl, fp, lr}
   12398:	add	fp, sp, #16
   1239c:	mov	r4, r0
   123a0:	movw	r0, #29072	; 0x7190
   123a4:	movt	r0, #2
   123a8:	cmp	r4, #0
   123ac:	moveq	r4, r0
   123b0:	bl	112c0 <__errno_location@plt>
   123b4:	mov	r5, r0
   123b8:	ldr	r6, [r0]
   123bc:	mov	r0, r4
   123c0:	mov	r1, #48	; 0x30
   123c4:	bl	14a84 <__assert_fail@plt+0x36b0>
   123c8:	str	r6, [r5]
   123cc:	pop	{r4, r5, r6, sl, fp, pc}
   123d0:	movw	r1, #29072	; 0x7190
   123d4:	movt	r1, #2
   123d8:	cmp	r0, #0
   123dc:	movne	r1, r0
   123e0:	ldr	r0, [r1]
   123e4:	bx	lr
   123e8:	movw	r2, #29072	; 0x7190
   123ec:	movt	r2, #2
   123f0:	cmp	r0, #0
   123f4:	movne	r2, r0
   123f8:	str	r1, [r2]
   123fc:	bx	lr
   12400:	movw	r3, #29072	; 0x7190
   12404:	movt	r3, #2
   12408:	cmp	r0, #0
   1240c:	movne	r3, r0
   12410:	ubfx	r0, r1, #5, #3
   12414:	add	r0, r3, r0, lsl #2
   12418:	ldr	r3, [r0, #8]
   1241c:	and	r1, r1, #31
   12420:	eor	r2, r2, r3, lsr r1
   12424:	and	r2, r2, #1
   12428:	eor	r2, r3, r2, lsl r1
   1242c:	str	r2, [r0, #8]
   12430:	mov	r0, #1
   12434:	and	r0, r0, r3, lsr r1
   12438:	bx	lr
   1243c:	movw	r2, #29072	; 0x7190
   12440:	movt	r2, #2
   12444:	cmp	r0, #0
   12448:	movne	r2, r0
   1244c:	ldr	r0, [r2, #4]
   12450:	str	r1, [r2, #4]
   12454:	bx	lr
   12458:	movw	r3, #29072	; 0x7190
   1245c:	movt	r3, #2
   12460:	cmp	r0, #0
   12464:	movne	r3, r0
   12468:	mov	r0, #10
   1246c:	str	r0, [r3]
   12470:	cmp	r1, #0
   12474:	cmpne	r2, #0
   12478:	bne	12488 <__assert_fail@plt+0x10b4>
   1247c:	push	{fp, lr}
   12480:	mov	fp, sp
   12484:	bl	113b0 <abort@plt>
   12488:	str	r1, [r3, #40]	; 0x28
   1248c:	str	r2, [r3, #44]	; 0x2c
   12490:	bx	lr
   12494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12498:	add	fp, sp, #28
   1249c:	sub	sp, sp, #20
   124a0:	mov	r8, r3
   124a4:	mov	r9, r2
   124a8:	mov	sl, r1
   124ac:	mov	r7, r0
   124b0:	ldr	r0, [fp, #8]
   124b4:	movw	r5, #29072	; 0x7190
   124b8:	movt	r5, #2
   124bc:	cmp	r0, #0
   124c0:	movne	r5, r0
   124c4:	bl	112c0 <__errno_location@plt>
   124c8:	mov	r4, r0
   124cc:	ldm	r5, {r0, r1}
   124d0:	ldr	r2, [r5, #40]	; 0x28
   124d4:	ldr	r3, [r5, #44]	; 0x2c
   124d8:	ldr	r6, [r4]
   124dc:	add	r5, r5, #8
   124e0:	stm	sp, {r0, r1, r5}
   124e4:	str	r2, [sp, #12]
   124e8:	str	r3, [sp, #16]
   124ec:	mov	r0, r7
   124f0:	mov	r1, sl
   124f4:	mov	r2, r9
   124f8:	mov	r3, r8
   124fc:	bl	1250c <__assert_fail@plt+0x1138>
   12500:	str	r6, [r4]
   12504:	sub	sp, fp, #28
   12508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1250c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12510:	add	fp, sp, #28
   12514:	sub	sp, sp, #156	; 0x9c
   12518:	mov	r9, r3
   1251c:	str	r2, [fp, #-84]	; 0xffffffac
   12520:	mov	r6, r1
   12524:	mov	r7, r0
   12528:	ldr	r0, [fp, #12]
   1252c:	and	r1, r0, #4
   12530:	str	r1, [sp, #32]
   12534:	and	r1, r0, #1
   12538:	str	r1, [sp, #36]	; 0x24
   1253c:	ubfx	sl, r0, #1, #1
   12540:	bl	111e8 <__ctype_get_mb_cur_max@plt>
   12544:	str	r0, [sp, #40]	; 0x28
   12548:	ldr	r0, [fp, #24]
   1254c:	str	r0, [sp, #76]	; 0x4c
   12550:	ldr	r0, [fp, #20]
   12554:	str	r0, [sp, #68]	; 0x44
   12558:	ldr	r0, [fp, #8]
   1255c:	str	r0, [fp, #-60]	; 0xffffffc4
   12560:	mov	r0, #0
   12564:	str	r0, [sp, #72]	; 0x48
   12568:	mov	r0, #0
   1256c:	str	r0, [sp, #92]	; 0x5c
   12570:	mov	r0, #0
   12574:	str	r0, [fp, #-72]	; 0xffffffb8
   12578:	mov	r0, #0
   1257c:	mov	r1, #0
   12580:	str	r1, [fp, #-56]	; 0xffffffc8
   12584:	mov	r1, #0
   12588:	str	r1, [sp, #56]	; 0x38
   1258c:	mov	r5, #1
   12590:	str	r7, [sp, #80]	; 0x50
   12594:	mov	r4, r6
   12598:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1259c:	cmp	r6, #10
   125a0:	bhi	13508 <__assert_fail@plt+0x2134>
   125a4:	add	r1, pc, #20
   125a8:	mov	r8, #0
   125ac:	mov	r2, #1
   125b0:	mov	r3, #0
   125b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   125b8:	mov	lr, r9
   125bc:	ldr	pc, [r1, r6, lsl #2]
   125c0:	muleq	r1, r8, r6
   125c4:	andeq	r2, r1, r8, asr #13
   125c8:	andeq	r2, r1, r8, lsl #13
   125cc:	andeq	r2, r1, r0, lsl #13
   125d0:			; <UNDEFINED> instruction: 0x000126bc
   125d4:	andeq	r2, r1, ip, lsl r7
   125d8:	andeq	r2, r1, r8, lsr #13
   125dc:	andeq	r2, r1, r8, ror r7
   125e0:	andeq	r2, r1, ip, ror #11
   125e4:	andeq	r2, r1, ip, ror #11
   125e8:	andeq	r2, r1, r4, lsl r6
   125ec:	movw	r0, #26916	; 0x6924
   125f0:	movt	r0, #1
   125f4:	mov	r1, r6
   125f8:	bl	13b14 <__assert_fail@plt+0x2740>
   125fc:	str	r0, [sp, #68]	; 0x44
   12600:	movw	r0, #26918	; 0x6926
   12604:	movt	r0, #1
   12608:	mov	r1, r6
   1260c:	bl	13b14 <__assert_fail@plt+0x2740>
   12610:	str	r0, [sp, #76]	; 0x4c
   12614:	mov	r8, #0
   12618:	tst	sl, #1
   1261c:	bne	12654 <__assert_fail@plt+0x1280>
   12620:	ldr	r0, [sp, #68]	; 0x44
   12624:	ldrb	r0, [r0]
   12628:	cmp	r0, #0
   1262c:	beq	12654 <__assert_fail@plt+0x1280>
   12630:	ldr	r1, [sp, #68]	; 0x44
   12634:	add	r1, r1, #1
   12638:	mov	r8, #0
   1263c:	cmp	r8, r4
   12640:	strbcc	r0, [r7, r8]
   12644:	ldrb	r0, [r1, r8]
   12648:	add	r8, r8, #1
   1264c:	cmp	r0, #0
   12650:	bne	1263c <__assert_fail@plt+0x1268>
   12654:	ldr	r6, [sp, #76]	; 0x4c
   12658:	mov	r0, r6
   1265c:	bl	112a8 <strlen@plt>
   12660:	str	r0, [fp, #-72]	; 0xffffffb8
   12664:	str	r6, [sp, #92]	; 0x5c
   12668:	mov	r2, #1
   1266c:	mov	r3, sl
   12670:	ldr	ip, [fp, #-84]	; 0xffffffac
   12674:	mov	lr, r9
   12678:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1267c:	b	12778 <__assert_fail@plt+0x13a4>
   12680:	mov	r0, #1
   12684:	b	126c8 <__assert_fail@plt+0x12f4>
   12688:	tst	sl, #1
   1268c:	bne	126c8 <__assert_fail@plt+0x12f4>
   12690:	mov	r2, r0
   12694:	b	126f0 <__assert_fail@plt+0x131c>
   12698:	mov	r6, #0
   1269c:	mov	r8, #0
   126a0:	mov	r2, r0
   126a4:	b	12774 <__assert_fail@plt+0x13a0>
   126a8:	mov	r0, #1
   126ac:	str	r0, [fp, #-72]	; 0xffffffb8
   126b0:	mov	r8, #0
   126b4:	mov	r6, #5
   126b8:	b	12734 <__assert_fail@plt+0x1360>
   126bc:	mov	r2, #1
   126c0:	tst	sl, #1
   126c4:	beq	126f0 <__assert_fail@plt+0x131c>
   126c8:	mov	r1, #1
   126cc:	str	r1, [fp, #-72]	; 0xffffffb8
   126d0:	mov	r8, #0
   126d4:	mov	r6, #2
   126d8:	movw	r1, #26918	; 0x6926
   126dc:	movt	r1, #1
   126e0:	str	r1, [sp, #92]	; 0x5c
   126e4:	mov	r2, r0
   126e8:	mov	r3, #1
   126ec:	b	12778 <__assert_fail@plt+0x13a4>
   126f0:	mov	r8, #1
   126f4:	mov	r6, #2
   126f8:	cmp	r4, #0
   126fc:	movne	r0, #39	; 0x27
   12700:	strbne	r0, [r7]
   12704:	movw	r0, #26918	; 0x6926
   12708:	movt	r0, #1
   1270c:	str	r0, [sp, #92]	; 0x5c
   12710:	mov	r0, #1
   12714:	str	r0, [fp, #-72]	; 0xffffffb8
   12718:	b	12774 <__assert_fail@plt+0x13a0>
   1271c:	mov	r6, #5
   12720:	tst	sl, #1
   12724:	beq	1274c <__assert_fail@plt+0x1378>
   12728:	mov	r0, #1
   1272c:	str	r0, [fp, #-72]	; 0xffffffb8
   12730:	mov	r8, #0
   12734:	movw	r0, #26914	; 0x6922
   12738:	movt	r0, #1
   1273c:	str	r0, [sp, #92]	; 0x5c
   12740:	mov	r2, #1
   12744:	mov	r3, #1
   12748:	b	12778 <__assert_fail@plt+0x13a4>
   1274c:	cmp	r4, #0
   12750:	movne	r0, #34	; 0x22
   12754:	strbne	r0, [r7]
   12758:	mov	r8, #1
   1275c:	movw	r0, #26914	; 0x6922
   12760:	movt	r0, #1
   12764:	str	r0, [sp, #92]	; 0x5c
   12768:	mov	r0, #1
   1276c:	str	r0, [fp, #-72]	; 0xffffffb8
   12770:	mov	r2, #1
   12774:	mov	r3, #0
   12778:	ldr	r0, [fp, #16]
   1277c:	cmp	r0, #0
   12780:	movwne	r0, #1
   12784:	and	r0, r0, r3
   12788:	str	r0, [fp, #-88]	; 0xffffffa8
   1278c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12790:	cmp	r0, #0
   12794:	movwne	r0, #1
   12798:	and	r1, r0, r3
   1279c:	and	r1, r2, r1
   127a0:	str	r1, [sp, #48]	; 0x30
   127a4:	str	r6, [fp, #-60]	; 0xffffffc4
   127a8:	subs	r6, r6, #2
   127ac:	clz	r1, r6
   127b0:	lsr	r1, r1, #5
   127b4:	and	r1, r1, r3
   127b8:	str	r1, [sp, #60]	; 0x3c
   127bc:	str	r6, [fp, #-80]	; 0xffffffb0
   127c0:	mov	r1, r6
   127c4:	movwne	r1, #1
   127c8:	str	r3, [fp, #-76]	; 0xffffffb4
   127cc:	eor	r3, r3, #1
   127d0:	str	r3, [sp, #88]	; 0x58
   127d4:	orr	r3, r1, r3
   127d8:	str	r3, [sp, #64]	; 0x40
   127dc:	and	r1, r1, r2
   127e0:	str	r1, [fp, #-68]	; 0xffffffbc
   127e4:	and	r0, r0, r1
   127e8:	str	r0, [fp, #-64]	; 0xffffffc0
   127ec:	str	r2, [sp, #84]	; 0x54
   127f0:	eor	r0, r2, #1
   127f4:	str	r0, [sp, #52]	; 0x34
   127f8:	mov	r6, #0
   127fc:	cmn	lr, #1
   12800:	beq	12810 <__assert_fail@plt+0x143c>
   12804:	cmp	r6, lr
   12808:	bne	1281c <__assert_fail@plt+0x1448>
   1280c:	b	13388 <__assert_fail@plt+0x1fb4>
   12810:	ldrb	r0, [ip, r6]
   12814:	cmp	r0, #0
   12818:	beq	13388 <__assert_fail@plt+0x1fb4>
   1281c:	str	r5, [fp, #-48]	; 0xffffffd0
   12820:	mov	sl, #0
   12824:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12828:	cmp	r0, #0
   1282c:	beq	12860 <__assert_fail@plt+0x148c>
   12830:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12834:	add	r5, r6, r0
   12838:	cmp	r0, #2
   1283c:	bcc	12858 <__assert_fail@plt+0x1484>
   12840:	cmn	lr, #1
   12844:	bne	12858 <__assert_fail@plt+0x1484>
   12848:	mov	r0, ip
   1284c:	bl	112a8 <strlen@plt>
   12850:	ldr	ip, [fp, #-84]	; 0xffffffac
   12854:	mov	lr, r0
   12858:	cmp	r5, lr
   1285c:	bls	1286c <__assert_fail@plt+0x1498>
   12860:	mov	r0, #0
   12864:	str	r0, [fp, #-52]	; 0xffffffcc
   12868:	b	128b8 <__assert_fail@plt+0x14e4>
   1286c:	mov	r5, r4
   12870:	mov	r4, lr
   12874:	add	r0, ip, r6
   12878:	ldr	r1, [sp, #92]	; 0x5c
   1287c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12880:	bl	1117c <memcmp@plt>
   12884:	cmp	r0, #0
   12888:	mov	r1, r0
   1288c:	movwne	r1, #1
   12890:	ldr	r2, [sp, #88]	; 0x58
   12894:	orr	r1, r1, r2
   12898:	tst	r1, #1
   1289c:	beq	1344c <__assert_fail@plt+0x2078>
   128a0:	clz	r0, r0
   128a4:	lsr	r0, r0, #5
   128a8:	str	r0, [fp, #-52]	; 0xffffffcc
   128ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   128b0:	mov	lr, r4
   128b4:	mov	r4, r5
   128b8:	ldrb	r5, [ip, r6]
   128bc:	cmp	r5, #126	; 0x7e
   128c0:	bhi	12c7c <__assert_fail@plt+0x18a8>
   128c4:	mov	r9, #1
   128c8:	mov	r2, #110	; 0x6e
   128cc:	mov	r0, #97	; 0x61
   128d0:	add	r3, pc, #4
   128d4:	mov	r1, #0
   128d8:	ldr	pc, [r3, r5, lsl #2]
   128dc:	andeq	r2, r1, r4, ror fp
   128e0:	andeq	r2, r1, ip, ror ip
   128e4:	andeq	r2, r1, ip, ror ip
   128e8:	andeq	r2, r1, ip, ror ip
   128ec:	andeq	r2, r1, ip, ror ip
   128f0:	andeq	r2, r1, ip, ror ip
   128f4:	andeq	r2, r1, ip, ror ip
   128f8:	andeq	r2, r1, r0, asr #26
   128fc:	andeq	r2, r1, r4, asr fp
   12900:	andeq	r2, r1, ip, asr #22
   12904:	andeq	r2, r1, r0, ror #22
   12908:	andeq	r2, r1, r4, ror #23
   1290c:	andeq	r2, r1, r4, asr #22
   12910:	andeq	r2, r1, ip, asr fp
   12914:	andeq	r2, r1, ip, ror ip
   12918:	andeq	r2, r1, ip, ror ip
   1291c:	andeq	r2, r1, ip, ror ip
   12920:	andeq	r2, r1, ip, ror ip
   12924:	andeq	r2, r1, ip, ror ip
   12928:	andeq	r2, r1, ip, ror ip
   1292c:	andeq	r2, r1, ip, ror ip
   12930:	andeq	r2, r1, ip, ror ip
   12934:	andeq	r2, r1, ip, ror ip
   12938:	andeq	r2, r1, ip, ror ip
   1293c:	andeq	r2, r1, ip, ror ip
   12940:	andeq	r2, r1, ip, ror ip
   12944:	andeq	r2, r1, ip, ror ip
   12948:	andeq	r2, r1, ip, ror ip
   1294c:	andeq	r2, r1, ip, ror ip
   12950:	andeq	r2, r1, ip, ror ip
   12954:	andeq	r2, r1, ip, ror ip
   12958:	andeq	r2, r1, ip, ror ip
   1295c:	strdeq	r2, [r1], -r0
   12960:	strdeq	r2, [r1], -r4
   12964:	strdeq	r2, [r1], -r4
   12968:	andeq	r2, r1, ip, ror #21
   1296c:	strdeq	r2, [r1], -r4
   12970:	ldrdeq	r2, [r1], -r8
   12974:	strdeq	r2, [r1], -r4
   12978:	andeq	r2, r1, ip, ror #23
   1297c:	strdeq	r2, [r1], -r4
   12980:	strdeq	r2, [r1], -r4
   12984:	strdeq	r2, [r1], -r4
   12988:	ldrdeq	r2, [r1], -r8
   1298c:	ldrdeq	r2, [r1], -r8
   12990:	ldrdeq	r2, [r1], -r8
   12994:	ldrdeq	r2, [r1], -r8
   12998:	ldrdeq	r2, [r1], -r8
   1299c:	ldrdeq	r2, [r1], -r8
   129a0:	ldrdeq	r2, [r1], -r8
   129a4:	ldrdeq	r2, [r1], -r8
   129a8:	ldrdeq	r2, [r1], -r8
   129ac:	ldrdeq	r2, [r1], -r8
   129b0:	ldrdeq	r2, [r1], -r8
   129b4:	ldrdeq	r2, [r1], -r8
   129b8:	ldrdeq	r2, [r1], -r8
   129bc:	ldrdeq	r2, [r1], -r8
   129c0:	ldrdeq	r2, [r1], -r8
   129c4:	ldrdeq	r2, [r1], -r8
   129c8:	strdeq	r2, [r1], -r4
   129cc:	strdeq	r2, [r1], -r4
   129d0:	strdeq	r2, [r1], -r4
   129d4:	strdeq	r2, [r1], -r4
   129d8:			; <UNDEFINED> instruction: 0x00012bb4
   129dc:	andeq	r2, r1, ip, ror ip
   129e0:	ldrdeq	r2, [r1], -r8
   129e4:	ldrdeq	r2, [r1], -r8
   129e8:	ldrdeq	r2, [r1], -r8
   129ec:	ldrdeq	r2, [r1], -r8
   129f0:	ldrdeq	r2, [r1], -r8
   129f4:	ldrdeq	r2, [r1], -r8
   129f8:	ldrdeq	r2, [r1], -r8
   129fc:	ldrdeq	r2, [r1], -r8
   12a00:	ldrdeq	r2, [r1], -r8
   12a04:	ldrdeq	r2, [r1], -r8
   12a08:	ldrdeq	r2, [r1], -r8
   12a0c:	ldrdeq	r2, [r1], -r8
   12a10:	ldrdeq	r2, [r1], -r8
   12a14:	ldrdeq	r2, [r1], -r8
   12a18:	ldrdeq	r2, [r1], -r8
   12a1c:	ldrdeq	r2, [r1], -r8
   12a20:	ldrdeq	r2, [r1], -r8
   12a24:	ldrdeq	r2, [r1], -r8
   12a28:	ldrdeq	r2, [r1], -r8
   12a2c:	ldrdeq	r2, [r1], -r8
   12a30:	ldrdeq	r2, [r1], -r8
   12a34:	ldrdeq	r2, [r1], -r8
   12a38:	ldrdeq	r2, [r1], -r8
   12a3c:	ldrdeq	r2, [r1], -r8
   12a40:	ldrdeq	r2, [r1], -r8
   12a44:	ldrdeq	r2, [r1], -r8
   12a48:	strdeq	r2, [r1], -r4
   12a4c:	andeq	r2, r1, r0, lsr #22
   12a50:	ldrdeq	r2, [r1], -r8
   12a54:	strdeq	r2, [r1], -r4
   12a58:	ldrdeq	r2, [r1], -r8
   12a5c:	strdeq	r2, [r1], -r4
   12a60:	ldrdeq	r2, [r1], -r8
   12a64:	ldrdeq	r2, [r1], -r8
   12a68:	ldrdeq	r2, [r1], -r8
   12a6c:	ldrdeq	r2, [r1], -r8
   12a70:	ldrdeq	r2, [r1], -r8
   12a74:	ldrdeq	r2, [r1], -r8
   12a78:	ldrdeq	r2, [r1], -r8
   12a7c:	ldrdeq	r2, [r1], -r8
   12a80:	ldrdeq	r2, [r1], -r8
   12a84:	ldrdeq	r2, [r1], -r8
   12a88:	ldrdeq	r2, [r1], -r8
   12a8c:	ldrdeq	r2, [r1], -r8
   12a90:	ldrdeq	r2, [r1], -r8
   12a94:	ldrdeq	r2, [r1], -r8
   12a98:	ldrdeq	r2, [r1], -r8
   12a9c:	ldrdeq	r2, [r1], -r8
   12aa0:	ldrdeq	r2, [r1], -r8
   12aa4:	ldrdeq	r2, [r1], -r8
   12aa8:	ldrdeq	r2, [r1], -r8
   12aac:	ldrdeq	r2, [r1], -r8
   12ab0:	ldrdeq	r2, [r1], -r8
   12ab4:	ldrdeq	r2, [r1], -r8
   12ab8:	ldrdeq	r2, [r1], -r8
   12abc:	ldrdeq	r2, [r1], -r8
   12ac0:	ldrdeq	r2, [r1], -r8
   12ac4:	ldrdeq	r2, [r1], -r8
   12ac8:	andeq	r2, r1, r0, lsl #22
   12acc:	strdeq	r2, [r1], -r4
   12ad0:	andeq	r2, r1, r0, lsl #22
   12ad4:	andeq	r2, r1, ip, ror #21
   12ad8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12adc:	cmp	r0, #0
   12ae0:	beq	12d54 <__assert_fail@plt+0x1980>
   12ae4:	ldr	r0, [fp, #16]
   12ae8:	b	12d58 <__assert_fail@plt+0x1984>
   12aec:	mov	r9, #0
   12af0:	cmp	r6, #0
   12af4:	beq	12cf0 <__assert_fail@plt+0x191c>
   12af8:	mov	sl, #0
   12afc:	b	12ad8 <__assert_fail@plt+0x1704>
   12b00:	mov	r9, #0
   12b04:	cmn	lr, #1
   12b08:	beq	12cd4 <__assert_fail@plt+0x1900>
   12b0c:	cmp	r6, #0
   12b10:	bne	12af8 <__assert_fail@plt+0x1724>
   12b14:	cmp	lr, #1
   12b18:	beq	12cf0 <__assert_fail@plt+0x191c>
   12b1c:	b	12af8 <__assert_fail@plt+0x1724>
   12b20:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12b24:	cmp	r0, #2
   12b28:	bne	12d1c <__assert_fail@plt+0x1948>
   12b2c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b30:	tst	r0, #1
   12b34:	bne	13464 <__assert_fail@plt+0x2090>
   12b38:	mov	sl, #0
   12b3c:	mov	r0, #92	; 0x5c
   12b40:	b	12d30 <__assert_fail@plt+0x195c>
   12b44:	mov	r0, #102	; 0x66
   12b48:	b	12d40 <__assert_fail@plt+0x196c>
   12b4c:	mov	r2, #116	; 0x74
   12b50:	b	12b60 <__assert_fail@plt+0x178c>
   12b54:	mov	r0, #98	; 0x62
   12b58:	b	12d40 <__assert_fail@plt+0x196c>
   12b5c:	mov	r2, #114	; 0x72
   12b60:	ldr	r0, [sp, #64]	; 0x40
   12b64:	tst	r0, #1
   12b68:	mov	r0, r2
   12b6c:	bne	12d40 <__assert_fail@plt+0x196c>
   12b70:	b	13464 <__assert_fail@plt+0x2090>
   12b74:	ldr	r0, [sp, #84]	; 0x54
   12b78:	tst	r0, #1
   12b7c:	beq	12e30 <__assert_fail@plt+0x1a5c>
   12b80:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b84:	tst	r0, #1
   12b88:	bne	13464 <__assert_fail@plt+0x2090>
   12b8c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12b90:	cmp	r0, #2
   12b94:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12b98:	movwne	r0, #1
   12b9c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12ba0:	orr	r0, r0, r2
   12ba4:	tst	r0, #1
   12ba8:	beq	13224 <__assert_fail@plt+0x1e50>
   12bac:	mov	r0, r8
   12bb0:	b	13258 <__assert_fail@plt+0x1e84>
   12bb4:	mov	sl, #0
   12bb8:	mov	r5, #63	; 0x3f
   12bbc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12bc0:	cmp	r0, #5
   12bc4:	beq	12fe4 <__assert_fail@plt+0x1c10>
   12bc8:	cmp	r0, #2
   12bcc:	bne	13084 <__assert_fail@plt+0x1cb0>
   12bd0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12bd4:	tst	r0, #1
   12bd8:	mov	r9, #0
   12bdc:	beq	12ad8 <__assert_fail@plt+0x1704>
   12be0:	b	13464 <__assert_fail@plt+0x2090>
   12be4:	mov	r0, #118	; 0x76
   12be8:	b	12d40 <__assert_fail@plt+0x196c>
   12bec:	mov	r5, #39	; 0x27
   12bf0:	mov	r0, #1
   12bf4:	str	r0, [sp, #56]	; 0x38
   12bf8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12bfc:	cmp	r0, #2
   12c00:	bne	12e50 <__assert_fail@plt+0x1a7c>
   12c04:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12c08:	tst	r0, #1
   12c0c:	bne	13464 <__assert_fail@plt+0x2090>
   12c10:	ldr	r2, [sp, #72]	; 0x48
   12c14:	cmp	r2, #0
   12c18:	mov	r0, r2
   12c1c:	movwne	r0, #1
   12c20:	clz	r1, r4
   12c24:	lsr	r1, r1, #5
   12c28:	orrs	r0, r0, r1
   12c2c:	moveq	r2, r4
   12c30:	str	r2, [sp, #72]	; 0x48
   12c34:	moveq	r4, r0
   12c38:	cmp	r8, r4
   12c3c:	movcc	r0, #39	; 0x27
   12c40:	strbcc	r0, [r7, r8]
   12c44:	add	r0, r8, #1
   12c48:	cmp	r0, r4
   12c4c:	movcc	r1, #92	; 0x5c
   12c50:	strbcc	r1, [r7, r0]
   12c54:	add	r0, r8, #2
   12c58:	cmp	r0, r4
   12c5c:	movcc	r1, #39	; 0x27
   12c60:	strbcc	r1, [r7, r0]
   12c64:	add	r8, r8, #3
   12c68:	mov	r0, #0
   12c6c:	str	r0, [fp, #-56]	; 0xffffffc8
   12c70:	mov	sl, #0
   12c74:	mov	r9, #1
   12c78:	b	12ad8 <__assert_fail@plt+0x1704>
   12c7c:	str	r4, [sp, #24]
   12c80:	ldr	r0, [sp, #40]	; 0x28
   12c84:	cmp	r0, #1
   12c88:	bne	12e58 <__assert_fail@plt+0x1a84>
   12c8c:	str	lr, [sp, #28]
   12c90:	bl	11284 <__ctype_b_loc@plt>
   12c94:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c98:	ldr	r0, [r0]
   12c9c:	add	r0, r0, r5, lsl #1
   12ca0:	ldrb	r0, [r0, #1]
   12ca4:	ubfx	r9, r0, #6, #1
   12ca8:	mov	r1, #1
   12cac:	ldr	r4, [sp, #24]
   12cb0:	ldr	r0, [sp, #52]	; 0x34
   12cb4:	orr	r0, r9, r0
   12cb8:	mov	r2, r1
   12cbc:	cmp	r1, #1
   12cc0:	bhi	1308c <__assert_fail@plt+0x1cb8>
   12cc4:	tst	r0, #1
   12cc8:	beq	1308c <__assert_fail@plt+0x1cb8>
   12ccc:	ldr	lr, [sp, #28]
   12cd0:	b	12ad8 <__assert_fail@plt+0x1704>
   12cd4:	cmp	r6, #0
   12cd8:	ldrbeq	r0, [ip, #1]
   12cdc:	cmpeq	r0, #0
   12ce0:	beq	12cf0 <__assert_fail@plt+0x191c>
   12ce4:	mvn	lr, #0
   12ce8:	mov	sl, #0
   12cec:	b	12ad8 <__assert_fail@plt+0x1704>
   12cf0:	mov	r1, #1
   12cf4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12cf8:	cmp	r0, #2
   12cfc:	bne	12d14 <__assert_fail@plt+0x1940>
   12d00:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12d04:	tst	r0, #1
   12d08:	mov	r9, r1
   12d0c:	beq	12ad8 <__assert_fail@plt+0x1704>
   12d10:	b	13464 <__assert_fail@plt+0x2090>
   12d14:	mov	r9, r1
   12d18:	b	12ad8 <__assert_fail@plt+0x1704>
   12d1c:	mov	sl, #0
   12d20:	mov	r0, #92	; 0x5c
   12d24:	ldr	r1, [sp, #48]	; 0x30
   12d28:	cmp	r1, #0
   12d2c:	beq	12d40 <__assert_fail@plt+0x196c>
   12d30:	mov	r9, #0
   12d34:	cmp	sl, #0
   12d38:	beq	132f0 <__assert_fail@plt+0x1f1c>
   12d3c:	b	1332c <__assert_fail@plt+0x1f58>
   12d40:	mov	r9, #0
   12d44:	ldr	r1, [sp, #84]	; 0x54
   12d48:	tst	r1, #1
   12d4c:	mov	sl, #0
   12d50:	bne	12d90 <__assert_fail@plt+0x19bc>
   12d54:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12d58:	cmp	r0, #0
   12d5c:	mov	r0, r5
   12d60:	beq	12d84 <__assert_fail@plt+0x19b0>
   12d64:	ubfx	r0, r5, #5, #3
   12d68:	ldr	r1, [fp, #16]
   12d6c:	ldr	r0, [r1, r0, lsl #2]
   12d70:	and	r1, r5, #31
   12d74:	mov	r2, #1
   12d78:	tst	r0, r2, lsl r1
   12d7c:	mov	r0, r5
   12d80:	bne	12d90 <__assert_fail@plt+0x19bc>
   12d84:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12d88:	cmp	r1, #0
   12d8c:	beq	132e8 <__assert_fail@plt+0x1f14>
   12d90:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12d94:	tst	r1, #1
   12d98:	bne	13464 <__assert_fail@plt+0x2090>
   12d9c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12da0:	cmp	r1, #2
   12da4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12da8:	movwne	r1, #1
   12dac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12db0:	orr	r1, r1, r2
   12db4:	tst	r1, #1
   12db8:	beq	12dc4 <__assert_fail@plt+0x19f0>
   12dbc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12dc0:	b	12e00 <__assert_fail@plt+0x1a2c>
   12dc4:	cmp	r8, r4
   12dc8:	movcc	r1, #39	; 0x27
   12dcc:	strbcc	r1, [r7, r8]
   12dd0:	add	r1, r8, #1
   12dd4:	cmp	r1, r4
   12dd8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12ddc:	movcc	r2, #36	; 0x24
   12de0:	strbcc	r2, [r7, r1]
   12de4:	add	r1, r8, #2
   12de8:	cmp	r1, r4
   12dec:	movcc	r2, #39	; 0x27
   12df0:	strbcc	r2, [r7, r1]
   12df4:	add	r8, r8, #3
   12df8:	mov	r1, #1
   12dfc:	str	r1, [fp, #-56]	; 0xffffffc8
   12e00:	cmp	r8, r4
   12e04:	movcc	r1, #92	; 0x5c
   12e08:	strbcc	r1, [r7, r8]
   12e0c:	add	r8, r8, #1
   12e10:	cmp	r8, r4
   12e14:	strbcc	r0, [r7, r8]
   12e18:	and	r5, r5, r9
   12e1c:	add	r8, r8, #1
   12e20:	add	r6, r6, #1
   12e24:	cmn	lr, #1
   12e28:	bne	12804 <__assert_fail@plt+0x1430>
   12e2c:	b	12810 <__assert_fail@plt+0x143c>
   12e30:	mov	r9, #0
   12e34:	ldr	r0, [sp, #36]	; 0x24
   12e38:	cmp	r0, #0
   12e3c:	mov	sl, #0
   12e40:	mov	r5, #0
   12e44:	beq	12d54 <__assert_fail@plt+0x1980>
   12e48:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12e4c:	b	12e20 <__assert_fail@plt+0x1a4c>
   12e50:	mov	r9, #1
   12e54:	b	12ad8 <__assert_fail@plt+0x1704>
   12e58:	mov	r0, #0
   12e5c:	str	r0, [fp, #-36]	; 0xffffffdc
   12e60:	str	r0, [fp, #-40]	; 0xffffffd8
   12e64:	cmn	lr, #1
   12e68:	bne	12e7c <__assert_fail@plt+0x1aa8>
   12e6c:	mov	r0, ip
   12e70:	bl	112a8 <strlen@plt>
   12e74:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e78:	mov	lr, r0
   12e7c:	add	r0, ip, r6
   12e80:	str	r0, [sp, #20]
   12e84:	mov	r9, #1
   12e88:	mov	r7, #0
   12e8c:	sub	r4, fp, #40	; 0x28
   12e90:	str	lr, [sp, #28]
   12e94:	str	r7, [sp, #44]	; 0x2c
   12e98:	add	r7, r7, r6
   12e9c:	add	r1, ip, r7
   12ea0:	sub	r2, lr, r7
   12ea4:	sub	r0, fp, #44	; 0x2c
   12ea8:	mov	r3, r4
   12eac:	bl	15d00 <__assert_fail@plt+0x492c>
   12eb0:	cmp	r0, #0
   12eb4:	beq	13374 <__assert_fail@plt+0x1fa0>
   12eb8:	cmn	r0, #1
   12ebc:	beq	13334 <__assert_fail@plt+0x1f60>
   12ec0:	cmn	r0, #2
   12ec4:	ldr	lr, [sp, #28]
   12ec8:	beq	1333c <__assert_fail@plt+0x1f68>
   12ecc:	cmp	r0, #2
   12ed0:	mov	r1, #0
   12ed4:	movwcc	r1, #1
   12ed8:	ldr	r2, [sp, #60]	; 0x3c
   12edc:	eor	r2, r2, #1
   12ee0:	orrs	r1, r2, r1
   12ee4:	ldr	r4, [sp, #24]
   12ee8:	bne	12fa8 <__assert_fail@plt+0x1bd4>
   12eec:	ldr	r1, [sp, #44]	; 0x2c
   12ef0:	ldr	r2, [sp, #20]
   12ef4:	add	r1, r2, r1
   12ef8:	mov	r2, #1
   12efc:	ldrb	r3, [r1, r2]
   12f00:	sub	r3, r3, #91	; 0x5b
   12f04:	cmp	r3, #33	; 0x21
   12f08:	bhi	12f9c <__assert_fail@plt+0x1bc8>
   12f0c:	add	r7, pc, #0
   12f10:	ldr	pc, [r7, r3, lsl #2]
   12f14:	andeq	r3, r1, ip, asr r4
   12f18:	andeq	r3, r1, ip, asr r4
   12f1c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f20:	andeq	r3, r1, ip, asr r4
   12f24:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f28:	andeq	r3, r1, ip, asr r4
   12f2c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f30:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f34:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f38:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f3c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f40:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f44:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f48:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f4c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f50:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f54:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f58:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f5c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f60:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f64:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f68:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f6c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f70:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f74:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f78:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f7c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f80:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f84:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f88:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f8c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f90:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f94:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12f98:	andeq	r3, r1, ip, asr r4
   12f9c:	add	r2, r2, #1
   12fa0:	cmp	r2, r0
   12fa4:	bcc	12efc <__assert_fail@plt+0x1b28>
   12fa8:	ldr	r7, [sp, #44]	; 0x2c
   12fac:	add	r7, r0, r7
   12fb0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12fb4:	bl	111b8 <iswprint@plt>
   12fb8:	cmp	r0, #0
   12fbc:	movwne	r0, #1
   12fc0:	and	r9, r9, r0
   12fc4:	sub	r4, fp, #40	; 0x28
   12fc8:	mov	r0, r4
   12fcc:	bl	11170 <mbsinit@plt>
   12fd0:	ldr	lr, [sp, #28]
   12fd4:	cmp	r0, #0
   12fd8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12fdc:	beq	12e94 <__assert_fail@plt+0x1ac0>
   12fe0:	b	1337c <__assert_fail@plt+0x1fa8>
   12fe4:	ldr	r0, [sp, #32]
   12fe8:	cmp	r0, #0
   12fec:	beq	13084 <__assert_fail@plt+0x1cb0>
   12ff0:	add	r0, r6, #2
   12ff4:	cmp	r0, lr
   12ff8:	bcs	13084 <__assert_fail@plt+0x1cb0>
   12ffc:	add	r1, ip, r6
   13000:	ldrb	r1, [r1, #1]
   13004:	cmp	r1, #63	; 0x3f
   13008:	bne	13084 <__assert_fail@plt+0x1cb0>
   1300c:	ldrb	r9, [ip, r0]
   13010:	sub	r2, r9, #33	; 0x21
   13014:	cmp	r2, #29
   13018:	bhi	13084 <__assert_fail@plt+0x1cb0>
   1301c:	mov	r3, #1
   13020:	movw	r1, #20929	; 0x51c1
   13024:	movt	r1, #14336	; 0x3800
   13028:	tst	r1, r3, lsl r2
   1302c:	beq	13084 <__assert_fail@plt+0x1cb0>
   13030:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13034:	tst	r1, #1
   13038:	bne	13464 <__assert_fail@plt+0x2090>
   1303c:	cmp	r8, r4
   13040:	movcc	r1, #63	; 0x3f
   13044:	strbcc	r1, [r7, r8]
   13048:	add	r2, r8, #1
   1304c:	cmp	r2, r4
   13050:	movcc	r1, #34	; 0x22
   13054:	strbcc	r1, [r7, r2]
   13058:	add	r2, r8, #2
   1305c:	cmp	r2, r4
   13060:	movcc	r1, #34	; 0x22
   13064:	strbcc	r1, [r7, r2]
   13068:	add	r2, r8, #3
   1306c:	cmp	r2, r4
   13070:	movcc	r1, #63	; 0x3f
   13074:	strbcc	r1, [r7, r2]
   13078:	add	r8, r8, #4
   1307c:	mov	r6, r0
   13080:	mov	r5, r9
   13084:	mov	r9, #0
   13088:	b	12ad8 <__assert_fail@plt+0x1704>
   1308c:	add	r1, r2, r6
   13090:	str	r1, [sp, #44]	; 0x2c
   13094:	add	r1, r6, #1
   13098:	mov	r3, #0
   1309c:	ldr	lr, [sp, #28]
   130a0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   130a4:	tst	r0, #1
   130a8:	bne	1319c <__assert_fail@plt+0x1dc8>
   130ac:	ldr	r2, [fp, #-76]	; 0xffffffb4
   130b0:	tst	r2, #1
   130b4:	bne	13464 <__assert_fail@plt+0x2090>
   130b8:	cmp	r6, #2
   130bc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   130c0:	movwne	r3, #1
   130c4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   130c8:	orr	r3, r3, r2
   130cc:	tst	r3, #1
   130d0:	bne	1310c <__assert_fail@plt+0x1d38>
   130d4:	cmp	r8, r4
   130d8:	movcc	r2, #39	; 0x27
   130dc:	strbcc	r2, [r7, r8]
   130e0:	add	r3, r8, #1
   130e4:	cmp	r3, r4
   130e8:	movcc	r2, #36	; 0x24
   130ec:	strbcc	r2, [r7, r3]
   130f0:	add	r3, r8, #2
   130f4:	cmp	r3, r4
   130f8:	movcc	r2, #39	; 0x27
   130fc:	strbcc	r2, [r7, r3]
   13100:	add	r8, r8, #3
   13104:	mov	r2, #1
   13108:	str	r2, [fp, #-56]	; 0xffffffc8
   1310c:	cmp	r8, r4
   13110:	movcc	r2, #92	; 0x5c
   13114:	strbcc	r2, [r7, r8]
   13118:	add	r3, r8, #1
   1311c:	cmp	r3, r4
   13120:	bcs	13140 <__assert_fail@plt+0x1d6c>
   13124:	and	r7, r5, #192	; 0xc0
   13128:	mov	r2, #48	; 0x30
   1312c:	orr	r7, r2, r7, lsr #6
   13130:	ldr	r6, [sp, #80]	; 0x50
   13134:	strb	r7, [r6, r3]
   13138:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1313c:	ldr	r7, [sp, #80]	; 0x50
   13140:	add	r3, r8, #2
   13144:	cmp	r3, r4
   13148:	bcs	13168 <__assert_fail@plt+0x1d94>
   1314c:	lsr	r7, r5, #3
   13150:	mov	r2, #6
   13154:	bfi	r7, r2, #3, #29
   13158:	ldr	r6, [sp, #80]	; 0x50
   1315c:	strb	r7, [r6, r3]
   13160:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13164:	ldr	r7, [sp, #80]	; 0x50
   13168:	mov	r2, #6
   1316c:	bfi	r5, r2, #3, #29
   13170:	add	r8, r8, #3
   13174:	mov	r3, #1
   13178:	b	131c0 <__assert_fail@plt+0x1dec>
   1317c:	ldr	r7, [sp, #80]	; 0x50
   13180:	cmp	r8, r4
   13184:	strbcc	r5, [r7, r8]
   13188:	ldrb	r5, [ip, r1]
   1318c:	add	r1, r1, #1
   13190:	add	r8, r8, #1
   13194:	tst	r0, #1
   13198:	beq	130ac <__assert_fail@plt+0x1cd8>
   1319c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   131a0:	tst	r2, #1
   131a4:	beq	131b8 <__assert_fail@plt+0x1de4>
   131a8:	cmp	r8, r4
   131ac:	movcc	r2, #92	; 0x5c
   131b0:	strbcc	r2, [r7, r8]
   131b4:	add	r8, r8, #1
   131b8:	mov	r2, #0
   131bc:	str	r2, [fp, #-52]	; 0xffffffcc
   131c0:	and	sl, r3, #1
   131c4:	ldr	r2, [sp, #44]	; 0x2c
   131c8:	cmp	r2, r1
   131cc:	bls	132d8 <__assert_fail@plt+0x1f04>
   131d0:	cmp	sl, #0
   131d4:	movwne	sl, #1
   131d8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   131dc:	mvn	r7, r2
   131e0:	orr	r7, r7, sl
   131e4:	tst	r7, #1
   131e8:	bne	1317c <__assert_fail@plt+0x1da8>
   131ec:	cmp	r8, r4
   131f0:	ldrcc	r7, [sp, #80]	; 0x50
   131f4:	movcc	r2, #39	; 0x27
   131f8:	strbcc	r2, [r7, r8]
   131fc:	add	r7, r8, #1
   13200:	cmp	r7, r4
   13204:	ldrcc	r6, [sp, #80]	; 0x50
   13208:	movcc	r2, #39	; 0x27
   1320c:	strbcc	r2, [r6, r7]
   13210:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   13214:	add	r8, r8, #2
   13218:	mov	r2, #0
   1321c:	str	r2, [fp, #-56]	; 0xffffffc8
   13220:	b	1317c <__assert_fail@plt+0x1da8>
   13224:	cmp	r8, r4
   13228:	movcc	r0, #39	; 0x27
   1322c:	strbcc	r0, [r7, r8]
   13230:	add	r0, r8, #1
   13234:	cmp	r0, r4
   13238:	movcc	r1, #36	; 0x24
   1323c:	strbcc	r1, [r7, r0]
   13240:	add	r0, r8, #2
   13244:	cmp	r0, r4
   13248:	movcc	r1, #39	; 0x27
   1324c:	strbcc	r1, [r7, r0]
   13250:	add	r0, r8, #3
   13254:	mov	r2, #1
   13258:	cmp	r0, r4
   1325c:	movcc	r1, #92	; 0x5c
   13260:	strbcc	r1, [r7, r0]
   13264:	str	r2, [fp, #-56]	; 0xffffffc8
   13268:	add	r8, r0, #1
   1326c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13270:	cmp	r1, #2
   13274:	beq	132c8 <__assert_fail@plt+0x1ef4>
   13278:	add	r1, r6, #1
   1327c:	mov	r9, #0
   13280:	mov	sl, #1
   13284:	mov	r5, #48	; 0x30
   13288:	cmp	r1, lr
   1328c:	bcs	12ad8 <__assert_fail@plt+0x1704>
   13290:	ldrb	r1, [ip, r1]
   13294:	sub	r1, r1, #48	; 0x30
   13298:	uxtb	r1, r1
   1329c:	cmp	r1, #9
   132a0:	bhi	12ad8 <__assert_fail@plt+0x1704>
   132a4:	cmp	r8, r4
   132a8:	movcc	r1, #48	; 0x30
   132ac:	strbcc	r1, [r7, r8]
   132b0:	add	r1, r0, #2
   132b4:	cmp	r1, r4
   132b8:	movcc	r2, #48	; 0x30
   132bc:	strbcc	r2, [r7, r1]
   132c0:	add	r8, r0, #3
   132c4:	b	12ad8 <__assert_fail@plt+0x1704>
   132c8:	mov	r0, #48	; 0x30
   132cc:	mov	sl, #1
   132d0:	mov	r9, #0
   132d4:	b	12d84 <__assert_fail@plt+0x19b0>
   132d8:	sub	r6, r1, #1
   132dc:	cmp	sl, #0
   132e0:	movwne	sl, #1
   132e4:	mov	r0, r5
   132e8:	cmp	sl, #0
   132ec:	bne	1332c <__assert_fail@plt+0x1f58>
   132f0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   132f4:	tst	r1, #1
   132f8:	beq	1332c <__assert_fail@plt+0x1f58>
   132fc:	cmp	r8, r4
   13300:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13304:	movcc	r1, #39	; 0x27
   13308:	strbcc	r1, [r7, r8]
   1330c:	add	r1, r8, #1
   13310:	cmp	r1, r4
   13314:	movcc	r2, #39	; 0x27
   13318:	strbcc	r2, [r7, r1]
   1331c:	add	r8, r8, #2
   13320:	mov	r1, #0
   13324:	str	r1, [fp, #-56]	; 0xffffffc8
   13328:	b	12e10 <__assert_fail@plt+0x1a3c>
   1332c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13330:	b	12e10 <__assert_fail@plt+0x1a3c>
   13334:	mov	r9, #0
   13338:	b	13374 <__assert_fail@plt+0x1fa0>
   1333c:	mov	r9, #0
   13340:	cmp	r7, lr
   13344:	bcs	13374 <__assert_fail@plt+0x1fa0>
   13348:	ldr	ip, [fp, #-84]	; 0xffffffac
   1334c:	ldr	r7, [sp, #44]	; 0x2c
   13350:	ldr	r0, [sp, #20]
   13354:	ldrb	r0, [r0, r7]
   13358:	cmp	r0, #0
   1335c:	beq	1337c <__assert_fail@plt+0x1fa8>
   13360:	add	r7, r7, #1
   13364:	add	r0, r6, r7
   13368:	cmp	r0, lr
   1336c:	bcc	13350 <__assert_fail@plt+0x1f7c>
   13370:	b	1337c <__assert_fail@plt+0x1fa8>
   13374:	ldr	ip, [fp, #-84]	; 0xffffffac
   13378:	ldr	r7, [sp, #44]	; 0x2c
   1337c:	mov	r1, r7
   13380:	ldr	r7, [sp, #80]	; 0x50
   13384:	b	12cac <__assert_fail@plt+0x18d8>
   13388:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1338c:	eor	r0, r1, #2
   13390:	orr	r0, r0, r8
   13394:	clz	r0, r0
   13398:	lsr	r0, r0, #5
   1339c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   133a0:	tst	r2, r0
   133a4:	bne	13464 <__assert_fail@plt+0x2090>
   133a8:	cmp	r1, #2
   133ac:	ldr	r0, [fp, #-80]	; 0xffffffb0
   133b0:	movwne	r0, #1
   133b4:	orr	r0, r2, r0
   133b8:	tst	r0, #1
   133bc:	ldreq	r0, [sp, #56]	; 0x38
   133c0:	eoreq	r0, r0, #1
   133c4:	tsteq	r0, #1
   133c8:	bne	133fc <__assert_fail@plt+0x2028>
   133cc:	mov	r9, lr
   133d0:	tst	r5, #1
   133d4:	bne	134cc <__assert_fail@plt+0x20f8>
   133d8:	ldr	r0, [sp, #72]	; 0x48
   133dc:	cmp	r0, #0
   133e0:	beq	133fc <__assert_fail@plt+0x2028>
   133e4:	mov	r5, #0
   133e8:	cmp	r4, #0
   133ec:	ldr	r0, [sp, #84]	; 0x54
   133f0:	mov	sl, r2
   133f4:	ldr	r6, [sp, #72]	; 0x48
   133f8:	beq	12594 <__assert_fail@plt+0x11c0>
   133fc:	ldr	r1, [sp, #92]	; 0x5c
   13400:	clz	r0, r1
   13404:	lsr	r0, r0, #5
   13408:	orr	r0, r0, r2
   1340c:	tst	r0, #1
   13410:	bne	1343c <__assert_fail@plt+0x2068>
   13414:	ldrb	r0, [r1]
   13418:	cmp	r0, #0
   1341c:	beq	1343c <__assert_fail@plt+0x2068>
   13420:	add	r1, r1, #1
   13424:	cmp	r8, r4
   13428:	strbcc	r0, [r7, r8]
   1342c:	add	r8, r8, #1
   13430:	ldrb	r0, [r1], #1
   13434:	cmp	r0, #0
   13438:	bne	13424 <__assert_fail@plt+0x2050>
   1343c:	cmp	r8, r4
   13440:	movcc	r0, #0
   13444:	strbcc	r0, [r7, r8]
   13448:	b	134c0 <__assert_fail@plt+0x20ec>
   1344c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13450:	mov	lr, r4
   13454:	mov	r4, r5
   13458:	b	13464 <__assert_fail@plt+0x2090>
   1345c:	ldr	r7, [sp, #80]	; 0x50
   13460:	ldr	ip, [fp, #-84]	; 0xffffffac
   13464:	mov	r0, #0
   13468:	ldr	r1, [fp, #12]
   1346c:	bic	r1, r1, #2
   13470:	ldr	r2, [sp, #84]	; 0x54
   13474:	tst	r2, #1
   13478:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1347c:	mov	r2, r3
   13480:	movwne	r2, #4
   13484:	cmp	r3, #2
   13488:	movne	r2, r3
   1348c:	str	r2, [sp]
   13490:	str	r1, [sp, #4]
   13494:	str	r0, [sp, #8]
   13498:	ldr	r0, [sp, #68]	; 0x44
   1349c:	str	r0, [sp, #12]
   134a0:	ldr	r0, [sp, #76]	; 0x4c
   134a4:	str	r0, [sp, #16]
   134a8:	mov	r0, r7
   134ac:	mov	r1, r4
   134b0:	mov	r2, ip
   134b4:	mov	r3, lr
   134b8:	bl	1250c <__assert_fail@plt+0x1138>
   134bc:	mov	r8, r0
   134c0:	mov	r0, r8
   134c4:	sub	sp, fp, #28
   134c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134cc:	mov	r0, #5
   134d0:	str	r0, [sp]
   134d4:	ldr	r0, [fp, #12]
   134d8:	str	r0, [sp, #4]
   134dc:	ldr	r0, [fp, #16]
   134e0:	str	r0, [sp, #8]
   134e4:	ldr	r0, [sp, #68]	; 0x44
   134e8:	str	r0, [sp, #12]
   134ec:	ldr	r0, [sp, #76]	; 0x4c
   134f0:	str	r0, [sp, #16]
   134f4:	mov	r0, r7
   134f8:	ldr	r1, [sp, #72]	; 0x48
   134fc:	ldr	r2, [fp, #-84]	; 0xffffffac
   13500:	mov	r3, r9
   13504:	b	134b8 <__assert_fail@plt+0x20e4>
   13508:	bl	113b0 <abort@plt>
   1350c:	mov	r3, r2
   13510:	mov	r2, #0
   13514:	b	13518 <__assert_fail@plt+0x2144>
   13518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1351c:	add	fp, sp, #28
   13520:	sub	sp, sp, #36	; 0x24
   13524:	mov	r4, r2
   13528:	str	r2, [sp, #24]
   1352c:	mov	r5, r1
   13530:	mov	r6, r0
   13534:	str	r0, [sp, #20]
   13538:	movw	r8, #29072	; 0x7190
   1353c:	movt	r8, #2
   13540:	cmp	r3, #0
   13544:	movne	r8, r3
   13548:	bl	112c0 <__errno_location@plt>
   1354c:	str	r0, [sp, #28]
   13550:	ldm	r8, {r3, r9}
   13554:	ldr	r1, [r8, #40]	; 0x28
   13558:	ldr	r2, [r8, #44]	; 0x2c
   1355c:	ldr	r7, [r0]
   13560:	str	r7, [sp, #32]
   13564:	add	sl, r8, #8
   13568:	cmp	r4, #0
   1356c:	orreq	r9, r9, #1
   13570:	stm	sp, {r3, r9, sl}
   13574:	str	r1, [sp, #12]
   13578:	str	r2, [sp, #16]
   1357c:	mov	r0, #0
   13580:	mov	r1, #0
   13584:	mov	r2, r6
   13588:	mov	r3, r5
   1358c:	mov	r7, r5
   13590:	bl	1250c <__assert_fail@plt+0x1138>
   13594:	mov	r5, r0
   13598:	add	r4, r0, #1
   1359c:	mov	r0, r4
   135a0:	bl	147cc <__assert_fail@plt+0x33f8>
   135a4:	mov	r6, r0
   135a8:	ldr	r0, [r8]
   135ac:	ldr	r1, [r8, #40]	; 0x28
   135b0:	ldr	r2, [r8, #44]	; 0x2c
   135b4:	stm	sp, {r0, r9, sl}
   135b8:	str	r1, [sp, #12]
   135bc:	str	r2, [sp, #16]
   135c0:	mov	r0, r6
   135c4:	mov	r1, r4
   135c8:	ldr	r2, [sp, #20]
   135cc:	mov	r3, r7
   135d0:	bl	1250c <__assert_fail@plt+0x1138>
   135d4:	ldr	r0, [sp, #24]
   135d8:	ldr	r1, [sp, #32]
   135dc:	ldr	r2, [sp, #28]
   135e0:	str	r1, [r2]
   135e4:	cmp	r0, #0
   135e8:	strne	r5, [r0]
   135ec:	mov	r0, r6
   135f0:	sub	sp, fp, #28
   135f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   135fc:	add	fp, sp, #24
   13600:	movw	r8, #28960	; 0x7120
   13604:	movt	r8, #2
   13608:	ldr	r4, [r8]
   1360c:	movw	r5, #28964	; 0x7124
   13610:	movt	r5, #2
   13614:	ldr	r0, [r5]
   13618:	cmp	r0, #2
   1361c:	blt	13648 <__assert_fail@plt+0x2274>
   13620:	add	r7, r4, #12
   13624:	mov	r6, #0
   13628:	ldr	r0, [r7, r6, lsl #3]
   1362c:	bl	122a8 <__assert_fail@plt+0xed4>
   13630:	add	r0, r6, #1
   13634:	ldr	r1, [r5]
   13638:	add	r2, r6, #2
   1363c:	cmp	r2, r1
   13640:	mov	r6, r0
   13644:	blt	13628 <__assert_fail@plt+0x2254>
   13648:	ldr	r0, [r4, #4]
   1364c:	movw	r7, #29120	; 0x71c0
   13650:	movt	r7, #2
   13654:	cmp	r0, r7
   13658:	beq	13670 <__assert_fail@plt+0x229c>
   1365c:	bl	122a8 <__assert_fail@plt+0xed4>
   13660:	movw	r0, #28968	; 0x7128
   13664:	movt	r0, #2
   13668:	mov	r6, #256	; 0x100
   1366c:	strd	r6, [r0]
   13670:	movw	r6, #28968	; 0x7128
   13674:	movt	r6, #2
   13678:	cmp	r4, r6
   1367c:	beq	1368c <__assert_fail@plt+0x22b8>
   13680:	mov	r0, r4
   13684:	bl	122a8 <__assert_fail@plt+0xed4>
   13688:	str	r6, [r8]
   1368c:	mov	r0, #1
   13690:	str	r0, [r5]
   13694:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13698:	movw	r3, #29072	; 0x7190
   1369c:	movt	r3, #2
   136a0:	mvn	r2, #0
   136a4:	b	136a8 <__assert_fail@plt+0x22d4>
   136a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136ac:	add	fp, sp, #28
   136b0:	sub	sp, sp, #44	; 0x2c
   136b4:	mov	r7, r3
   136b8:	str	r2, [sp, #36]	; 0x24
   136bc:	str	r1, [sp, #32]
   136c0:	mov	r5, r0
   136c4:	bl	112c0 <__errno_location@plt>
   136c8:	cmp	r5, #0
   136cc:	blt	13838 <__assert_fail@plt+0x2464>
   136d0:	cmn	r5, #-2147483647	; 0x80000001
   136d4:	beq	13838 <__assert_fail@plt+0x2464>
   136d8:	movw	r4, #28960	; 0x7120
   136dc:	movt	r4, #2
   136e0:	ldr	r6, [r4]
   136e4:	str	r0, [sp, #28]
   136e8:	ldr	r0, [r0]
   136ec:	str	r0, [sp, #24]
   136f0:	movw	r8, #28964	; 0x7124
   136f4:	movt	r8, #2
   136f8:	ldr	r1, [r8]
   136fc:	cmp	r1, r5
   13700:	ble	1370c <__assert_fail@plt+0x2338>
   13704:	mov	sl, r6
   13708:	b	13774 <__assert_fail@plt+0x23a0>
   1370c:	str	r1, [fp, #-32]	; 0xffffffe0
   13710:	mov	r0, #8
   13714:	str	r0, [sp]
   13718:	movw	r9, #28968	; 0x7128
   1371c:	movt	r9, #2
   13720:	subs	r0, r6, r9
   13724:	movne	r0, r6
   13728:	add	r2, r5, #1
   1372c:	sub	r2, r2, r1
   13730:	sub	r1, fp, #32
   13734:	mvn	r3, #-2147483648	; 0x80000000
   13738:	bl	148b4 <__assert_fail@plt+0x34e0>
   1373c:	mov	sl, r0
   13740:	str	r0, [r4]
   13744:	cmp	r6, r9
   13748:	ldrdeq	r0, [r9]
   1374c:	stmeq	sl, {r0, r1}
   13750:	ldr	r1, [r8]
   13754:	add	r0, sl, r1, lsl #3
   13758:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1375c:	sub	r1, r2, r1
   13760:	lsl	r2, r1, #3
   13764:	mov	r1, #0
   13768:	bl	112e4 <memset@plt>
   1376c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13770:	str	r0, [r8]
   13774:	mov	r9, sl
   13778:	ldr	r6, [r9, r5, lsl #3]!
   1377c:	ldr	r4, [r9, #4]!
   13780:	ldm	r7, {r0, r1}
   13784:	ldr	r2, [r7, #40]	; 0x28
   13788:	ldr	r3, [r7, #44]	; 0x2c
   1378c:	orr	r8, r1, #1
   13790:	add	r1, r7, #8
   13794:	stm	sp, {r0, r8}
   13798:	str	r1, [sp, #20]
   1379c:	add	r0, sp, #8
   137a0:	stm	r0, {r1, r2, r3}
   137a4:	mov	r0, r4
   137a8:	mov	r1, r6
   137ac:	ldr	r2, [sp, #32]
   137b0:	ldr	r3, [sp, #36]	; 0x24
   137b4:	bl	1250c <__assert_fail@plt+0x1138>
   137b8:	cmp	r6, r0
   137bc:	bhi	13820 <__assert_fail@plt+0x244c>
   137c0:	add	r6, r0, #1
   137c4:	str	r6, [sl, r5, lsl #3]
   137c8:	movw	r0, #29120	; 0x71c0
   137cc:	movt	r0, #2
   137d0:	cmp	r4, r0
   137d4:	beq	137e0 <__assert_fail@plt+0x240c>
   137d8:	mov	r0, r4
   137dc:	bl	122a8 <__assert_fail@plt+0xed4>
   137e0:	mov	r0, r6
   137e4:	bl	147cc <__assert_fail@plt+0x33f8>
   137e8:	mov	r4, r0
   137ec:	str	r0, [r9]
   137f0:	ldr	r0, [r7]
   137f4:	ldr	r1, [r7, #40]	; 0x28
   137f8:	ldr	r2, [r7, #44]	; 0x2c
   137fc:	stm	sp, {r0, r8}
   13800:	ldr	r0, [sp, #20]
   13804:	add	r3, sp, #8
   13808:	stm	r3, {r0, r1, r2}
   1380c:	mov	r0, r4
   13810:	mov	r1, r6
   13814:	ldr	r2, [sp, #32]
   13818:	ldr	r3, [sp, #36]	; 0x24
   1381c:	bl	1250c <__assert_fail@plt+0x1138>
   13820:	ldr	r0, [sp, #28]
   13824:	ldr	r1, [sp, #24]
   13828:	str	r1, [r0]
   1382c:	mov	r0, r4
   13830:	sub	sp, fp, #28
   13834:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13838:	bl	113b0 <abort@plt>
   1383c:	movw	r3, #29072	; 0x7190
   13840:	movt	r3, #2
   13844:	b	136a8 <__assert_fail@plt+0x22d4>
   13848:	mov	r1, r0
   1384c:	mov	r0, #0
   13850:	b	13698 <__assert_fail@plt+0x22c4>
   13854:	mov	r2, r1
   13858:	mov	r1, r0
   1385c:	mov	r0, #0
   13860:	b	1383c <__assert_fail@plt+0x2468>
   13864:	push	{r4, r5, r6, sl, fp, lr}
   13868:	add	fp, sp, #16
   1386c:	sub	sp, sp, #48	; 0x30
   13870:	mov	r4, r2
   13874:	mov	r5, r0
   13878:	mov	r6, sp
   1387c:	mov	r0, r6
   13880:	bl	138a0 <__assert_fail@plt+0x24cc>
   13884:	mov	r0, r5
   13888:	mov	r1, r4
   1388c:	mvn	r2, #0
   13890:	mov	r3, r6
   13894:	bl	136a8 <__assert_fail@plt+0x22d4>
   13898:	sub	sp, fp, #16
   1389c:	pop	{r4, r5, r6, sl, fp, pc}
   138a0:	vmov.i32	q8, #0	; 0x00000000
   138a4:	mov	r2, #32
   138a8:	mov	r3, r0
   138ac:	vst1.32	{d16-d17}, [r3], r2
   138b0:	vst1.32	{d16-d17}, [r3]
   138b4:	add	r2, r0, #16
   138b8:	vst1.32	{d16-d17}, [r2]
   138bc:	cmp	r1, #10
   138c0:	strne	r1, [r0]
   138c4:	bxne	lr
   138c8:	push	{fp, lr}
   138cc:	mov	fp, sp
   138d0:	bl	113b0 <abort@plt>
   138d4:	push	{r4, r5, r6, r7, fp, lr}
   138d8:	add	fp, sp, #16
   138dc:	sub	sp, sp, #48	; 0x30
   138e0:	mov	r4, r3
   138e4:	mov	r5, r2
   138e8:	mov	r6, r0
   138ec:	mov	r7, sp
   138f0:	mov	r0, r7
   138f4:	bl	138a0 <__assert_fail@plt+0x24cc>
   138f8:	mov	r0, r6
   138fc:	mov	r1, r5
   13900:	mov	r2, r4
   13904:	mov	r3, r7
   13908:	bl	136a8 <__assert_fail@plt+0x22d4>
   1390c:	sub	sp, fp, #16
   13910:	pop	{r4, r5, r6, r7, fp, pc}
   13914:	mov	r2, r1
   13918:	mov	r1, r0
   1391c:	mov	r0, #0
   13920:	b	13864 <__assert_fail@plt+0x2490>
   13924:	mov	r3, r2
   13928:	mov	r2, r1
   1392c:	mov	r1, r0
   13930:	mov	r0, #0
   13934:	b	138d4 <__assert_fail@plt+0x2500>
   13938:	push	{r4, r5, r6, sl, fp, lr}
   1393c:	add	fp, sp, #16
   13940:	sub	sp, sp, #48	; 0x30
   13944:	mov	r4, r1
   13948:	mov	r5, r0
   1394c:	mov	r0, #32
   13950:	movw	r1, #29072	; 0x7190
   13954:	movt	r1, #2
   13958:	add	r3, r1, #16
   1395c:	vld1.64	{d16-d17}, [r1], r0
   13960:	mov	r6, sp
   13964:	vld1.64	{d18-d19}, [r3]
   13968:	add	r3, r6, #16
   1396c:	vld1.64	{d20-d21}, [r1]
   13970:	vst1.64	{d18-d19}, [r3]
   13974:	mov	r1, r6
   13978:	vst1.64	{d16-d17}, [r1], r0
   1397c:	vst1.64	{d20-d21}, [r1]
   13980:	mov	r0, r6
   13984:	mov	r1, r2
   13988:	mov	r2, #1
   1398c:	bl	12400 <__assert_fail@plt+0x102c>
   13990:	mov	r0, #0
   13994:	mov	r1, r5
   13998:	mov	r2, r4
   1399c:	mov	r3, r6
   139a0:	bl	136a8 <__assert_fail@plt+0x22d4>
   139a4:	sub	sp, fp, #16
   139a8:	pop	{r4, r5, r6, sl, fp, pc}
   139ac:	mov	r2, r1
   139b0:	mvn	r1, #0
   139b4:	b	13938 <__assert_fail@plt+0x2564>
   139b8:	mov	r1, #58	; 0x3a
   139bc:	b	139ac <__assert_fail@plt+0x25d8>
   139c0:	mov	r2, #58	; 0x3a
   139c4:	b	13938 <__assert_fail@plt+0x2564>
   139c8:	push	{r4, r5, r6, sl, fp, lr}
   139cc:	add	fp, sp, #16
   139d0:	sub	sp, sp, #48	; 0x30
   139d4:	mov	r4, r2
   139d8:	mov	r5, r0
   139dc:	mov	r6, sp
   139e0:	mov	r0, r6
   139e4:	bl	138a0 <__assert_fail@plt+0x24cc>
   139e8:	mov	r0, r6
   139ec:	mov	r1, #58	; 0x3a
   139f0:	mov	r2, #1
   139f4:	bl	12400 <__assert_fail@plt+0x102c>
   139f8:	mov	r0, r5
   139fc:	mov	r1, r4
   13a00:	mvn	r2, #0
   13a04:	mov	r3, r6
   13a08:	bl	136a8 <__assert_fail@plt+0x22d4>
   13a0c:	sub	sp, fp, #16
   13a10:	pop	{r4, r5, r6, sl, fp, pc}
   13a14:	push	{fp, lr}
   13a18:	mov	fp, sp
   13a1c:	sub	sp, sp, #8
   13a20:	mvn	ip, #0
   13a24:	str	ip, [sp]
   13a28:	bl	13a34 <__assert_fail@plt+0x2660>
   13a2c:	mov	sp, fp
   13a30:	pop	{fp, pc}
   13a34:	push	{r4, r5, r6, r7, fp, lr}
   13a38:	add	fp, sp, #16
   13a3c:	sub	sp, sp, #48	; 0x30
   13a40:	mov	r7, r3
   13a44:	mov	r5, r0
   13a48:	mov	r0, #32
   13a4c:	movw	r3, #29072	; 0x7190
   13a50:	movt	r3, #2
   13a54:	add	r4, r3, #16
   13a58:	vld1.64	{d16-d17}, [r3], r0
   13a5c:	mov	r6, sp
   13a60:	vld1.64	{d18-d19}, [r4]
   13a64:	add	r4, r6, #16
   13a68:	vld1.64	{d20-d21}, [r3]
   13a6c:	vst1.64	{d18-d19}, [r4]
   13a70:	mov	r3, r6
   13a74:	vst1.64	{d16-d17}, [r3], r0
   13a78:	vst1.64	{d20-d21}, [r3]
   13a7c:	mov	r0, r6
   13a80:	bl	12458 <__assert_fail@plt+0x1084>
   13a84:	ldr	r2, [fp, #8]
   13a88:	mov	r0, r5
   13a8c:	mov	r1, r7
   13a90:	mov	r3, r6
   13a94:	bl	136a8 <__assert_fail@plt+0x22d4>
   13a98:	sub	sp, fp, #16
   13a9c:	pop	{r4, r5, r6, r7, fp, pc}
   13aa0:	mov	r3, r2
   13aa4:	mov	r2, r1
   13aa8:	mov	r1, r0
   13aac:	mov	r0, #0
   13ab0:	b	13a14 <__assert_fail@plt+0x2640>
   13ab4:	push	{fp, lr}
   13ab8:	mov	fp, sp
   13abc:	sub	sp, sp, #8
   13ac0:	mov	ip, r2
   13ac4:	mov	r2, r1
   13ac8:	mov	r1, r0
   13acc:	str	r3, [sp]
   13ad0:	mov	r0, #0
   13ad4:	mov	r3, ip
   13ad8:	bl	13a34 <__assert_fail@plt+0x2660>
   13adc:	mov	sp, fp
   13ae0:	pop	{fp, pc}
   13ae4:	movw	r3, #28976	; 0x7130
   13ae8:	movt	r3, #2
   13aec:	b	136a8 <__assert_fail@plt+0x22d4>
   13af0:	mov	r2, r1
   13af4:	mov	r1, r0
   13af8:	mov	r0, #0
   13afc:	b	13ae4 <__assert_fail@plt+0x2710>
   13b00:	mvn	r2, #0
   13b04:	b	13ae4 <__assert_fail@plt+0x2710>
   13b08:	mov	r1, r0
   13b0c:	mov	r0, #0
   13b10:	b	13b00 <__assert_fail@plt+0x272c>
   13b14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b18:	add	fp, sp, #24
   13b1c:	sub	sp, sp, #16
   13b20:	mov	r4, r1
   13b24:	mov	r5, r0
   13b28:	mov	r7, #0
   13b2c:	mov	r0, #0
   13b30:	mov	r1, r5
   13b34:	mov	r2, #5
   13b38:	bl	11188 <dcgettext@plt>
   13b3c:	cmp	r0, r5
   13b40:	beq	13b4c <__assert_fail@plt+0x2778>
   13b44:	sub	sp, fp, #24
   13b48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b4c:	bl	15cc8 <__assert_fail@plt+0x48f4>
   13b50:	mov	r6, r0
   13b54:	mov	r8, #56	; 0x38
   13b58:	mov	r0, #45	; 0x2d
   13b5c:	stm	sp, {r0, r8}
   13b60:	str	r7, [sp, #8]
   13b64:	str	r7, [sp, #12]
   13b68:	mov	r0, r6
   13b6c:	mov	r1, #85	; 0x55
   13b70:	mov	r2, #84	; 0x54
   13b74:	mov	r3, #70	; 0x46
   13b78:	bl	13c10 <__assert_fail@plt+0x283c>
   13b7c:	cmp	r0, #0
   13b80:	beq	13b9c <__assert_fail@plt+0x27c8>
   13b84:	ldrb	r1, [r5]
   13b88:	movw	r2, #26920	; 0x6928
   13b8c:	movt	r2, #1
   13b90:	movw	r0, #26924	; 0x692c
   13b94:	movt	r0, #1
   13b98:	b	13be0 <__assert_fail@plt+0x280c>
   13b9c:	mov	r0, #48	; 0x30
   13ba0:	mov	r1, #51	; 0x33
   13ba4:	str	r8, [sp]
   13ba8:	stmib	sp, {r0, r1}
   13bac:	str	r0, [sp, #12]
   13bb0:	mov	r0, r6
   13bb4:	mov	r1, #71	; 0x47
   13bb8:	mov	r2, #66	; 0x42
   13bbc:	mov	r3, #49	; 0x31
   13bc0:	bl	13c10 <__assert_fail@plt+0x283c>
   13bc4:	cmp	r0, #0
   13bc8:	beq	13bf0 <__assert_fail@plt+0x281c>
   13bcc:	ldrb	r1, [r5]
   13bd0:	movw	r2, #26928	; 0x6930
   13bd4:	movt	r2, #1
   13bd8:	movw	r0, #26932	; 0x6934
   13bdc:	movt	r0, #1
   13be0:	cmp	r1, #96	; 0x60
   13be4:	moveq	r0, r2
   13be8:	sub	sp, fp, #24
   13bec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13bf0:	movw	r1, #26914	; 0x6922
   13bf4:	movt	r1, #1
   13bf8:	movw	r0, #26918	; 0x6926
   13bfc:	movt	r0, #1
   13c00:	cmp	r4, #9
   13c04:	moveq	r0, r1
   13c08:	sub	sp, fp, #24
   13c0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c10:	push	{r4, r5, r6, r7, fp, lr}
   13c14:	add	fp, sp, #16
   13c18:	sub	sp, sp, #16
   13c1c:	mov	r4, r3
   13c20:	mov	r5, r2
   13c24:	mov	r7, r1
   13c28:	mov	r6, r0
   13c2c:	mov	r0, r1
   13c30:	bl	15978 <__assert_fail@plt+0x45a4>
   13c34:	ldrb	r1, [r6]
   13c38:	cmp	r0, #0
   13c3c:	andne	r1, r1, #223	; 0xdf
   13c40:	mov	r0, #0
   13c44:	cmp	r1, r7
   13c48:	bne	13c88 <__assert_fail@plt+0x28b4>
   13c4c:	cmp	r7, #0
   13c50:	moveq	r0, #1
   13c54:	subeq	sp, fp, #16
   13c58:	popeq	{r4, r5, r6, r7, fp, pc}
   13c5c:	ldr	r0, [fp, #20]
   13c60:	ldr	r1, [fp, #16]
   13c64:	ldr	r2, [fp, #12]
   13c68:	ldr	r3, [fp, #8]
   13c6c:	str	r2, [sp]
   13c70:	str	r1, [sp, #4]
   13c74:	str	r0, [sp, #8]
   13c78:	mov	r0, r6
   13c7c:	mov	r1, r5
   13c80:	mov	r2, r4
   13c84:	bl	13c90 <__assert_fail@plt+0x28bc>
   13c88:	sub	sp, fp, #16
   13c8c:	pop	{r4, r5, r6, r7, fp, pc}
   13c90:	push	{r4, r5, r6, r7, fp, lr}
   13c94:	add	fp, sp, #16
   13c98:	sub	sp, sp, #8
   13c9c:	mov	r4, r3
   13ca0:	mov	r5, r2
   13ca4:	mov	r7, r1
   13ca8:	mov	r6, r0
   13cac:	mov	r0, r1
   13cb0:	bl	15978 <__assert_fail@plt+0x45a4>
   13cb4:	ldrb	r1, [r6, #1]
   13cb8:	cmp	r0, #0
   13cbc:	andne	r1, r1, #223	; 0xdf
   13cc0:	mov	r0, #0
   13cc4:	cmp	r1, r7
   13cc8:	bne	13d00 <__assert_fail@plt+0x292c>
   13ccc:	cmp	r7, #0
   13cd0:	moveq	r0, #1
   13cd4:	subeq	sp, fp, #16
   13cd8:	popeq	{r4, r5, r6, r7, fp, pc}
   13cdc:	ldr	r0, [fp, #16]
   13ce0:	ldr	r1, [fp, #12]
   13ce4:	ldr	r3, [fp, #8]
   13ce8:	str	r1, [sp]
   13cec:	str	r0, [sp, #4]
   13cf0:	mov	r0, r6
   13cf4:	mov	r1, r5
   13cf8:	mov	r2, r4
   13cfc:	bl	13d08 <__assert_fail@plt+0x2934>
   13d00:	sub	sp, fp, #16
   13d04:	pop	{r4, r5, r6, r7, fp, pc}
   13d08:	push	{r4, r5, r6, r7, fp, lr}
   13d0c:	add	fp, sp, #16
   13d10:	sub	sp, sp, #8
   13d14:	mov	r4, r3
   13d18:	mov	r5, r2
   13d1c:	mov	r7, r1
   13d20:	mov	r6, r0
   13d24:	mov	r0, r1
   13d28:	bl	15978 <__assert_fail@plt+0x45a4>
   13d2c:	ldrb	r1, [r6, #2]
   13d30:	cmp	r0, #0
   13d34:	andne	r1, r1, #223	; 0xdf
   13d38:	mov	r0, #0
   13d3c:	cmp	r1, r7
   13d40:	bne	13d70 <__assert_fail@plt+0x299c>
   13d44:	cmp	r7, #0
   13d48:	moveq	r0, #1
   13d4c:	subeq	sp, fp, #16
   13d50:	popeq	{r4, r5, r6, r7, fp, pc}
   13d54:	ldr	r0, [fp, #12]
   13d58:	ldr	r3, [fp, #8]
   13d5c:	str	r0, [sp]
   13d60:	mov	r0, r6
   13d64:	mov	r1, r5
   13d68:	mov	r2, r4
   13d6c:	bl	13d78 <__assert_fail@plt+0x29a4>
   13d70:	sub	sp, fp, #16
   13d74:	pop	{r4, r5, r6, r7, fp, pc}
   13d78:	push	{r4, r5, r6, r7, fp, lr}
   13d7c:	add	fp, sp, #16
   13d80:	mov	r4, r3
   13d84:	mov	r5, r2
   13d88:	mov	r7, r1
   13d8c:	mov	r6, r0
   13d90:	mov	r0, r1
   13d94:	bl	15978 <__assert_fail@plt+0x45a4>
   13d98:	ldrb	r1, [r6, #3]
   13d9c:	ldr	r3, [fp, #8]
   13da0:	cmp	r0, #0
   13da4:	andne	r1, r1, #223	; 0xdf
   13da8:	mov	r0, #0
   13dac:	cmp	r1, r7
   13db0:	popne	{r4, r5, r6, r7, fp, pc}
   13db4:	cmp	r7, #0
   13db8:	beq	13dd0 <__assert_fail@plt+0x29fc>
   13dbc:	mov	r0, r6
   13dc0:	mov	r1, r5
   13dc4:	mov	r2, r4
   13dc8:	pop	{r4, r5, r6, r7, fp, lr}
   13dcc:	b	13dd8 <__assert_fail@plt+0x2a04>
   13dd0:	mov	r0, #1
   13dd4:	pop	{r4, r5, r6, r7, fp, pc}
   13dd8:	push	{r4, r5, r6, r7, fp, lr}
   13ddc:	add	fp, sp, #16
   13de0:	mov	r4, r3
   13de4:	mov	r5, r2
   13de8:	mov	r7, r1
   13dec:	mov	r6, r0
   13df0:	mov	r0, r1
   13df4:	bl	15978 <__assert_fail@plt+0x45a4>
   13df8:	ldrb	r1, [r6, #4]
   13dfc:	cmp	r0, #0
   13e00:	andne	r1, r1, #223	; 0xdf
   13e04:	mov	r0, #0
   13e08:	cmp	r1, r7
   13e0c:	popne	{r4, r5, r6, r7, fp, pc}
   13e10:	cmp	r7, #0
   13e14:	beq	13e2c <__assert_fail@plt+0x2a58>
   13e18:	mov	r0, r6
   13e1c:	mov	r1, r5
   13e20:	mov	r2, r4
   13e24:	pop	{r4, r5, r6, r7, fp, lr}
   13e28:	b	13e34 <__assert_fail@plt+0x2a60>
   13e2c:	mov	r0, #1
   13e30:	pop	{r4, r5, r6, r7, fp, pc}
   13e34:	push	{r4, r5, r6, sl, fp, lr}
   13e38:	add	fp, sp, #16
   13e3c:	mov	r4, r2
   13e40:	mov	r6, r1
   13e44:	mov	r5, r0
   13e48:	mov	r0, r1
   13e4c:	bl	15978 <__assert_fail@plt+0x45a4>
   13e50:	ldrb	r1, [r5, #5]
   13e54:	cmp	r0, #0
   13e58:	andne	r1, r1, #223	; 0xdf
   13e5c:	mov	r0, #0
   13e60:	cmp	r1, r6
   13e64:	popne	{r4, r5, r6, sl, fp, pc}
   13e68:	cmp	r6, #0
   13e6c:	beq	13e80 <__assert_fail@plt+0x2aac>
   13e70:	mov	r0, r5
   13e74:	mov	r1, r4
   13e78:	pop	{r4, r5, r6, sl, fp, lr}
   13e7c:	b	13e88 <__assert_fail@plt+0x2ab4>
   13e80:	mov	r0, #1
   13e84:	pop	{r4, r5, r6, sl, fp, pc}
   13e88:	push	{r4, r5, fp, lr}
   13e8c:	add	fp, sp, #8
   13e90:	mov	r5, r1
   13e94:	mov	r4, r0
   13e98:	mov	r0, r1
   13e9c:	bl	15978 <__assert_fail@plt+0x45a4>
   13ea0:	ldrb	r1, [r4, #6]
   13ea4:	cmp	r0, #0
   13ea8:	andne	r1, r1, #223	; 0xdf
   13eac:	mov	r0, #0
   13eb0:	cmp	r1, r5
   13eb4:	popne	{r4, r5, fp, pc}
   13eb8:	cmp	r5, #0
   13ebc:	beq	13ecc <__assert_fail@plt+0x2af8>
   13ec0:	mov	r0, r4
   13ec4:	pop	{r4, r5, fp, lr}
   13ec8:	b	13ed4 <__assert_fail@plt+0x2b00>
   13ecc:	mov	r0, #1
   13ed0:	pop	{r4, r5, fp, pc}
   13ed4:	push	{r4, sl, fp, lr}
   13ed8:	add	fp, sp, #8
   13edc:	mov	r4, r0
   13ee0:	mov	r0, #0
   13ee4:	bl	15978 <__assert_fail@plt+0x45a4>
   13ee8:	ldrb	r1, [r4, #7]
   13eec:	cmp	r0, #0
   13ef0:	beq	13f08 <__assert_fail@plt+0x2b34>
   13ef4:	tst	r1, #223	; 0xdf
   13ef8:	moveq	r0, #1
   13efc:	popeq	{r4, sl, fp, pc}
   13f00:	mov	r0, #0
   13f04:	pop	{r4, sl, fp, pc}
   13f08:	cmp	r1, #0
   13f0c:	moveq	r0, #1
   13f10:	popeq	{r4, sl, fp, pc}
   13f14:	mov	r0, #0
   13f18:	pop	{r4, sl, fp, pc}
   13f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f20:	add	fp, sp, #28
   13f24:	sub	sp, sp, #12
   13f28:	mov	r9, r3
   13f2c:	mov	r4, r2
   13f30:	mov	r8, r1
   13f34:	mov	r7, r0
   13f38:	ldr	sl, [fp, #8]
   13f3c:	cmp	r2, #0
   13f40:	beq	13f58 <__assert_fail@plt+0x2b84>
   13f44:	mov	r0, r7
   13f48:	mov	r1, #58	; 0x3a
   13f4c:	bl	112b4 <strchr@plt>
   13f50:	mov	r6, r0
   13f54:	b	13f5c <__assert_fail@plt+0x2b88>
   13f58:	mov	r6, #0
   13f5c:	stm	sp, {r9, sl}
   13f60:	mov	r0, r7
   13f64:	mov	r1, r6
   13f68:	mov	r2, r8
   13f6c:	mov	r3, r4
   13f70:	bl	13fd8 <__assert_fail@plt+0x2c04>
   13f74:	mov	r5, r0
   13f78:	cmp	r4, #0
   13f7c:	beq	13fcc <__assert_fail@plt+0x2bf8>
   13f80:	cmp	r6, #0
   13f84:	bne	13fcc <__assert_fail@plt+0x2bf8>
   13f88:	cmp	r5, #0
   13f8c:	beq	13fcc <__assert_fail@plt+0x2bf8>
   13f90:	mov	r0, r7
   13f94:	mov	r1, #46	; 0x2e
   13f98:	bl	112b4 <strchr@plt>
   13f9c:	cmp	r0, #0
   13fa0:	beq	13fcc <__assert_fail@plt+0x2bf8>
   13fa4:	mov	r1, r0
   13fa8:	stm	sp, {r9, sl}
   13fac:	mov	r0, r7
   13fb0:	mov	r2, r8
   13fb4:	mov	r3, r4
   13fb8:	bl	13fd8 <__assert_fail@plt+0x2c04>
   13fbc:	cmp	r0, #0
   13fc0:	movne	r0, r5
   13fc4:	sub	sp, fp, #28
   13fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fcc:	mov	r0, r5
   13fd0:	sub	sp, fp, #28
   13fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fdc:	add	fp, sp, #28
   13fe0:	sub	sp, sp, #36	; 0x24
   13fe4:	mov	sl, r3
   13fe8:	mov	r9, r2
   13fec:	mov	r4, r1
   13ff0:	ldr	r3, [r2]
   13ff4:	ldr	r2, [fp, #8]
   13ff8:	cmp	sl, #0
   13ffc:	ldrne	r1, [sl]
   14000:	mvneq	r1, #0
   14004:	str	r1, [sp, #8]
   14008:	ldr	r8, [fp, #12]
   1400c:	cmp	r2, #0
   14010:	movne	r1, #0
   14014:	strne	r1, [r2]
   14018:	cmp	r8, #0
   1401c:	movne	r1, #0
   14020:	strne	r1, [r8]
   14024:	cmp	r4, #0
   14028:	str	r3, [sp, #4]
   1402c:	beq	14060 <__assert_fail@plt+0x2c8c>
   14030:	subs	r5, r4, r0
   14034:	beq	140f0 <__assert_fail@plt+0x2d1c>
   14038:	add	r1, r5, #1
   1403c:	bl	14ab4 <__assert_fail@plt+0x36e0>
   14040:	mov	r7, r0
   14044:	mov	r0, #0
   14048:	strb	r0, [r7, r5]
   1404c:	mov	r6, r4
   14050:	ldrb	r0, [r6, #1]!
   14054:	cmp	r0, #0
   14058:	moveq	r6, r0
   1405c:	b	14078 <__assert_fail@plt+0x2ca4>
   14060:	ldrb	r1, [r0]
   14064:	cmp	r1, #0
   14068:	beq	1420c <__assert_fail@plt+0x2e38>
   1406c:	bl	14b20 <__assert_fail@plt+0x374c>
   14070:	mov	r7, r0
   14074:	mov	r6, #0
   14078:	ldrb	r0, [r7]
   1407c:	cmp	r0, #43	; 0x2b
   14080:	beq	140d0 <__assert_fail@plt+0x2cfc>
   14084:	mov	r0, r7
   14088:	bl	11110 <getpwnam@plt>
   1408c:	cmp	r0, #0
   14090:	beq	140d0 <__assert_fail@plt+0x2cfc>
   14094:	ldr	r1, [r0, #8]
   14098:	str	r1, [sp, #4]
   1409c:	mov	r5, #0
   140a0:	cmp	r4, #0
   140a4:	beq	14218 <__assert_fail@plt+0x2e44>
   140a8:	cmp	r6, #0
   140ac:	bne	14218 <__assert_fail@plt+0x2e44>
   140b0:	ldr	r4, [r0, #12]
   140b4:	mov	r0, r4
   140b8:	bl	113bc <getgrgid@plt>
   140bc:	cmp	r0, #0
   140c0:	str	r4, [sp, #8]
   140c4:	beq	14220 <__assert_fail@plt+0x2e4c>
   140c8:	ldr	r0, [r0]
   140cc:	b	14230 <__assert_fail@plt+0x2e5c>
   140d0:	cmp	r4, #0
   140d4:	beq	141b0 <__assert_fail@plt+0x2ddc>
   140d8:	cmp	r6, #0
   140dc:	bne	141b0 <__assert_fail@plt+0x2ddc>
   140e0:	movw	r5, #27047	; 0x69a7
   140e4:	movt	r5, #1
   140e8:	mov	r4, #0
   140ec:	b	1423c <__assert_fail@plt+0x2e68>
   140f0:	ldrb	r0, [r4, #1]!
   140f4:	cmp	r0, #0
   140f8:	moveq	r4, r0
   140fc:	mov	r7, #0
   14100:	mov	r6, r4
   14104:	mov	r4, #0
   14108:	mov	r5, #0
   1410c:	cmp	r6, #0
   14110:	beq	14248 <__assert_fail@plt+0x2e74>
   14114:	cmp	r5, #0
   14118:	bne	14248 <__assert_fail@plt+0x2e74>
   1411c:	ldrb	r0, [r6]
   14120:	cmp	r0, #43	; 0x2b
   14124:	beq	14148 <__assert_fail@plt+0x2d74>
   14128:	mov	r0, r6
   1412c:	bl	113c8 <getgrnam@plt>
   14130:	cmp	r0, #0
   14134:	beq	14148 <__assert_fail@plt+0x2d74>
   14138:	ldr	r0, [r0, #8]
   1413c:	str	r0, [sp, #8]
   14140:	mov	r5, #0
   14144:	b	1419c <__assert_fail@plt+0x2dc8>
   14148:	movw	r0, #25420	; 0x634c
   1414c:	movt	r0, #1
   14150:	str	r0, [sp]
   14154:	add	r3, sp, #12
   14158:	mov	r0, r6
   1415c:	mov	r1, #0
   14160:	mov	r2, #10
   14164:	bl	14bb8 <__assert_fail@plt+0x37e4>
   14168:	clz	r0, r0
   1416c:	lsr	r0, r0, #5
   14170:	ldr	r1, [sp, #12]
   14174:	add	r2, r1, #1
   14178:	cmn	r1, #1
   1417c:	movwne	r2, #1
   14180:	ands	r0, r0, r2
   14184:	ldr	r0, [sp, #8]
   14188:	movne	r0, r1
   1418c:	str	r0, [sp, #8]
   14190:	movw	r5, #27033	; 0x6999
   14194:	movt	r5, #1
   14198:	movwne	r5, #0
   1419c:	bl	110ec <endgrent@plt>
   141a0:	mov	r0, r6
   141a4:	bl	14b20 <__assert_fail@plt+0x374c>
   141a8:	mov	r4, r0
   141ac:	b	14248 <__assert_fail@plt+0x2e74>
   141b0:	movw	r0, #25420	; 0x634c
   141b4:	movt	r0, #1
   141b8:	str	r0, [sp]
   141bc:	mov	r4, #0
   141c0:	add	r3, sp, #12
   141c4:	mov	r0, r7
   141c8:	mov	r1, #0
   141cc:	mov	r2, #10
   141d0:	bl	14bb8 <__assert_fail@plt+0x37e4>
   141d4:	clz	r0, r0
   141d8:	lsr	r0, r0, #5
   141dc:	ldr	r1, [sp, #12]
   141e0:	add	r2, r1, #1
   141e4:	cmn	r1, #1
   141e8:	movwne	r2, #1
   141ec:	ands	r0, r0, r2
   141f0:	ldr	r0, [sp, #4]
   141f4:	movne	r0, r1
   141f8:	str	r0, [sp, #4]
   141fc:	movw	r5, #27020	; 0x698c
   14200:	movt	r5, #1
   14204:	movwne	r5, #0
   14208:	b	1423c <__assert_fail@plt+0x2e68>
   1420c:	mov	r4, #0
   14210:	mov	r7, #0
   14214:	b	14254 <__assert_fail@plt+0x2e80>
   14218:	mov	r4, #0
   1421c:	b	1423c <__assert_fail@plt+0x2e68>
   14220:	add	r2, sp, #12
   14224:	mov	r0, r4
   14228:	mov	r1, #0
   1422c:	bl	15c6c <__assert_fail@plt+0x4898>
   14230:	bl	14b20 <__assert_fail@plt+0x374c>
   14234:	mov	r4, r0
   14238:	bl	110ec <endgrent@plt>
   1423c:	bl	11350 <endpwent@plt>
   14240:	cmp	r6, #0
   14244:	bne	14114 <__assert_fail@plt+0x2d40>
   14248:	mov	r6, #0
   1424c:	cmp	r5, #0
   14250:	bne	14298 <__assert_fail@plt+0x2ec4>
   14254:	ldr	r0, [sp, #4]
   14258:	str	r0, [r9]
   1425c:	cmp	sl, #0
   14260:	ldrne	r0, [sp, #8]
   14264:	strne	r0, [sl]
   14268:	ldr	r0, [fp, #8]
   1426c:	cmp	r0, #0
   14270:	strne	r7, [r0]
   14274:	movne	r7, #0
   14278:	mov	r6, #1
   1427c:	cmp	r8, #0
   14280:	beq	14294 <__assert_fail@plt+0x2ec0>
   14284:	str	r4, [r8]
   14288:	mov	r5, #0
   1428c:	mov	r4, #0
   14290:	b	14298 <__assert_fail@plt+0x2ec4>
   14294:	mov	r5, #0
   14298:	mov	r0, r7
   1429c:	bl	122a8 <__assert_fail@plt+0xed4>
   142a0:	mov	r0, r4
   142a4:	bl	122a8 <__assert_fail@plt+0xed4>
   142a8:	mov	r0, #0
   142ac:	cmp	r6, #0
   142b0:	bne	142c4 <__assert_fail@plt+0x2ef0>
   142b4:	mov	r0, #0
   142b8:	mov	r1, r5
   142bc:	mov	r2, #5
   142c0:	bl	11188 <dcgettext@plt>
   142c4:	sub	sp, fp, #28
   142c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   142d0:	add	fp, sp, #24
   142d4:	sub	sp, sp, #32
   142d8:	mov	r4, r2
   142dc:	mov	r8, r0
   142e0:	ldr	r6, [fp, #12]
   142e4:	ldr	r7, [fp, #8]
   142e8:	cmp	r1, #0
   142ec:	beq	14314 <__assert_fail@plt+0x2f40>
   142f0:	mov	r5, r1
   142f4:	str	r4, [sp]
   142f8:	str	r3, [sp, #4]
   142fc:	movw	r2, #27060	; 0x69b4
   14300:	movt	r2, #1
   14304:	mov	r0, r8
   14308:	mov	r1, #1
   1430c:	mov	r3, r5
   14310:	b	1432c <__assert_fail@plt+0x2f58>
   14314:	str	r3, [sp]
   14318:	movw	r2, #27072	; 0x69c0
   1431c:	movt	r2, #1
   14320:	mov	r0, r8
   14324:	mov	r1, #1
   14328:	mov	r3, r4
   1432c:	bl	11314 <__fprintf_chk@plt>
   14330:	movw	r1, #27079	; 0x69c7
   14334:	movt	r1, #1
   14338:	mov	r0, #0
   1433c:	mov	r2, #5
   14340:	bl	11188 <dcgettext@plt>
   14344:	mov	r3, r0
   14348:	movw	r0, #2022	; 0x7e6
   1434c:	str	r0, [sp]
   14350:	movw	r2, #27797	; 0x6c95
   14354:	movt	r2, #1
   14358:	mov	r0, r8
   1435c:	mov	r1, #1
   14360:	bl	11314 <__fprintf_chk@plt>
   14364:	movw	r4, #25419	; 0x634b
   14368:	movt	r4, #1
   1436c:	mov	r0, r4
   14370:	mov	r1, r8
   14374:	bl	110f8 <fputs_unlocked@plt>
   14378:	movw	r1, #27083	; 0x69cb
   1437c:	movt	r1, #1
   14380:	mov	r0, #0
   14384:	mov	r2, #5
   14388:	bl	11188 <dcgettext@plt>
   1438c:	mov	r2, r0
   14390:	movw	r3, #27254	; 0x6a76
   14394:	movt	r3, #1
   14398:	mov	r0, r8
   1439c:	mov	r1, #1
   143a0:	bl	11314 <__fprintf_chk@plt>
   143a4:	mov	r0, r4
   143a8:	mov	r1, r8
   143ac:	bl	110f8 <fputs_unlocked@plt>
   143b0:	cmp	r6, #9
   143b4:	bhi	143f0 <__assert_fail@plt+0x301c>
   143b8:	add	r0, pc, #0
   143bc:	ldr	pc, [r0, r6, lsl #2]
   143c0:	andeq	r4, r1, r8, ror #7
   143c4:	strdeq	r4, [r1], -ip
   143c8:	andeq	r4, r1, ip, lsr #8
   143cc:	andeq	r4, r1, r4, asr r4
   143d0:	andeq	r4, r1, ip, ror r4
   143d4:	andeq	r4, r1, r4, lsr #9
   143d8:	andeq	r4, r1, ip, asr #9
   143dc:	andeq	r4, r1, r4, lsl #10
   143e0:	andeq	r4, r1, r4, lsr #11
   143e4:	andeq	r4, r1, ip, asr #10
   143e8:	sub	sp, fp, #24
   143ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   143f0:	movw	r1, #27607	; 0x6bd7
   143f4:	movt	r1, #1
   143f8:	b	14554 <__assert_fail@plt+0x3180>
   143fc:	movw	r1, #27288	; 0x6a98
   14400:	movt	r1, #1
   14404:	mov	r0, #0
   14408:	mov	r2, #5
   1440c:	bl	11188 <dcgettext@plt>
   14410:	mov	r2, r0
   14414:	ldr	r3, [r7]
   14418:	mov	r0, r8
   1441c:	mov	r1, #1
   14420:	sub	sp, fp, #24
   14424:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14428:	b	11314 <__fprintf_chk@plt>
   1442c:	movw	r1, #27304	; 0x6aa8
   14430:	movt	r1, #1
   14434:	mov	r0, #0
   14438:	mov	r2, #5
   1443c:	bl	11188 <dcgettext@plt>
   14440:	mov	r2, r0
   14444:	ldr	r3, [r7]
   14448:	ldr	r0, [r7, #4]
   1444c:	str	r0, [sp]
   14450:	b	14540 <__assert_fail@plt+0x316c>
   14454:	movw	r1, #27327	; 0x6abf
   14458:	movt	r1, #1
   1445c:	mov	r0, #0
   14460:	mov	r2, #5
   14464:	bl	11188 <dcgettext@plt>
   14468:	mov	r2, r0
   1446c:	ldr	r3, [r7]
   14470:	ldmib	r7, {r0, r1}
   14474:	stm	sp, {r0, r1}
   14478:	b	14540 <__assert_fail@plt+0x316c>
   1447c:	movw	r1, #27355	; 0x6adb
   14480:	movt	r1, #1
   14484:	mov	r0, #0
   14488:	mov	r2, #5
   1448c:	bl	11188 <dcgettext@plt>
   14490:	mov	r2, r0
   14494:	ldr	r3, [r7]
   14498:	ldmib	r7, {r0, r1, r7}
   1449c:	stm	sp, {r0, r1, r7}
   144a0:	b	14540 <__assert_fail@plt+0x316c>
   144a4:	movw	r1, #27387	; 0x6afb
   144a8:	movt	r1, #1
   144ac:	mov	r0, #0
   144b0:	mov	r2, #5
   144b4:	bl	11188 <dcgettext@plt>
   144b8:	mov	r2, r0
   144bc:	ldr	r3, [r7]
   144c0:	ldmib	r7, {r0, r1, r6, r7}
   144c4:	stm	sp, {r0, r1, r6, r7}
   144c8:	b	14540 <__assert_fail@plt+0x316c>
   144cc:	movw	r1, #27423	; 0x6b1f
   144d0:	movt	r1, #1
   144d4:	mov	r0, #0
   144d8:	mov	r2, #5
   144dc:	bl	11188 <dcgettext@plt>
   144e0:	mov	r2, r0
   144e4:	ldr	r3, [r7]
   144e8:	ldmib	r7, {r0, r1, r6}
   144ec:	ldr	r5, [r7, #16]
   144f0:	ldr	r7, [r7, #20]
   144f4:	stm	sp, {r0, r1, r6}
   144f8:	str	r5, [sp, #12]
   144fc:	str	r7, [sp, #16]
   14500:	b	14540 <__assert_fail@plt+0x316c>
   14504:	movw	r1, #27463	; 0x6b47
   14508:	movt	r1, #1
   1450c:	mov	r0, #0
   14510:	mov	r2, #5
   14514:	bl	11188 <dcgettext@plt>
   14518:	mov	r2, r0
   1451c:	ldr	r3, [r7]
   14520:	ldmib	r7, {r0, r1, r6}
   14524:	ldr	r5, [r7, #16]
   14528:	ldr	r4, [r7, #20]
   1452c:	ldr	r7, [r7, #24]
   14530:	stm	sp, {r0, r1, r6}
   14534:	str	r5, [sp, #12]
   14538:	str	r4, [sp, #16]
   1453c:	str	r7, [sp, #20]
   14540:	mov	r0, r8
   14544:	mov	r1, #1
   14548:	b	145f4 <__assert_fail@plt+0x3220>
   1454c:	movw	r1, #27555	; 0x6ba3
   14550:	movt	r1, #1
   14554:	mov	r0, #0
   14558:	mov	r2, #5
   1455c:	bl	11188 <dcgettext@plt>
   14560:	mov	ip, r0
   14564:	ldr	r3, [r7]
   14568:	ldr	r0, [r7, #4]
   1456c:	ldr	r1, [r7, #8]
   14570:	ldr	r6, [r7, #12]
   14574:	ldr	r5, [r7, #16]
   14578:	ldr	r4, [r7, #20]
   1457c:	ldr	r2, [r7, #24]
   14580:	ldr	lr, [r7, #28]
   14584:	ldr	r7, [r7, #32]
   14588:	stm	sp, {r0, r1, r6}
   1458c:	str	r5, [sp, #12]
   14590:	str	r4, [sp, #16]
   14594:	str	r2, [sp, #20]
   14598:	str	lr, [sp, #24]
   1459c:	str	r7, [sp, #28]
   145a0:	b	145e8 <__assert_fail@plt+0x3214>
   145a4:	movw	r1, #27507	; 0x6b73
   145a8:	movt	r1, #1
   145ac:	mov	r0, #0
   145b0:	mov	r2, #5
   145b4:	bl	11188 <dcgettext@plt>
   145b8:	mov	ip, r0
   145bc:	ldr	r3, [r7]
   145c0:	ldmib	r7, {r0, r1, r6}
   145c4:	ldr	r5, [r7, #16]
   145c8:	ldr	r4, [r7, #20]
   145cc:	ldr	r2, [r7, #24]
   145d0:	ldr	r7, [r7, #28]
   145d4:	stm	sp, {r0, r1, r6}
   145d8:	str	r5, [sp, #12]
   145dc:	str	r4, [sp, #16]
   145e0:	str	r2, [sp, #20]
   145e4:	str	r7, [sp, #24]
   145e8:	mov	r0, r8
   145ec:	mov	r1, #1
   145f0:	mov	r2, ip
   145f4:	bl	11314 <__fprintf_chk@plt>
   145f8:	sub	sp, fp, #24
   145fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14600:	push	{r4, sl, fp, lr}
   14604:	add	fp, sp, #8
   14608:	sub	sp, sp, #8
   1460c:	mov	lr, #0
   14610:	ldr	ip, [fp, #8]
   14614:	ldr	r4, [ip, lr, lsl #2]
   14618:	add	lr, lr, #1
   1461c:	cmp	r4, #0
   14620:	bne	14614 <__assert_fail@plt+0x3240>
   14624:	sub	r4, lr, #1
   14628:	str	ip, [sp]
   1462c:	str	r4, [sp, #4]
   14630:	bl	142cc <__assert_fail@plt+0x2ef8>
   14634:	sub	sp, fp, #8
   14638:	pop	{r4, sl, fp, pc}
   1463c:	push	{r4, r5, fp, lr}
   14640:	add	fp, sp, #8
   14644:	sub	sp, sp, #48	; 0x30
   14648:	mov	ip, #0
   1464c:	ldr	r4, [fp, #8]
   14650:	add	lr, sp, #8
   14654:	ldr	r5, [r4]
   14658:	str	r5, [lr, ip, lsl #2]
   1465c:	cmp	r5, #0
   14660:	beq	14674 <__assert_fail@plt+0x32a0>
   14664:	add	ip, ip, #1
   14668:	add	r4, r4, #4
   1466c:	cmp	ip, #10
   14670:	bcc	14654 <__assert_fail@plt+0x3280>
   14674:	str	lr, [sp]
   14678:	str	ip, [sp, #4]
   1467c:	bl	142cc <__assert_fail@plt+0x2ef8>
   14680:	sub	sp, fp, #8
   14684:	pop	{r4, r5, fp, pc}
   14688:	push	{fp, lr}
   1468c:	mov	fp, sp
   14690:	sub	sp, sp, #8
   14694:	add	ip, fp, #8
   14698:	str	ip, [sp, #4]
   1469c:	str	ip, [sp]
   146a0:	bl	1463c <__assert_fail@plt+0x3268>
   146a4:	mov	sp, fp
   146a8:	pop	{fp, pc}
   146ac:	push	{fp, lr}
   146b0:	mov	fp, sp
   146b4:	movw	r0, #29044	; 0x7174
   146b8:	movt	r0, #2
   146bc:	ldr	r1, [r0]
   146c0:	movw	r0, #25419	; 0x634b
   146c4:	movt	r0, #1
   146c8:	bl	110f8 <fputs_unlocked@plt>
   146cc:	movw	r1, #27667	; 0x6c13
   146d0:	movt	r1, #1
   146d4:	mov	r0, #0
   146d8:	mov	r2, #5
   146dc:	bl	11188 <dcgettext@plt>
   146e0:	mov	r1, r0
   146e4:	movw	r2, #27687	; 0x6c27
   146e8:	movt	r2, #1
   146ec:	mov	r0, #1
   146f0:	bl	112f0 <__printf_chk@plt>
   146f4:	movw	r1, #27709	; 0x6c3d
   146f8:	movt	r1, #1
   146fc:	mov	r0, #0
   14700:	mov	r2, #5
   14704:	bl	11188 <dcgettext@plt>
   14708:	mov	r1, r0
   1470c:	movw	r2, #25837	; 0x64ed
   14710:	movt	r2, #1
   14714:	movw	r3, #26316	; 0x66cc
   14718:	movt	r3, #1
   1471c:	mov	r0, #1
   14720:	bl	112f0 <__printf_chk@plt>
   14724:	movw	r1, #27729	; 0x6c51
   14728:	movt	r1, #1
   1472c:	mov	r0, #0
   14730:	mov	r2, #5
   14734:	bl	11188 <dcgettext@plt>
   14738:	mov	r1, r0
   1473c:	movw	r2, #27768	; 0x6c78
   14740:	movt	r2, #1
   14744:	mov	r0, #1
   14748:	pop	{fp, lr}
   1474c:	b	112f0 <__printf_chk@plt>
   14750:	b	14754 <__assert_fail@plt+0x3380>
   14754:	push	{r4, r5, r6, sl, fp, lr}
   14758:	add	fp, sp, #16
   1475c:	mov	r4, r2
   14760:	mov	r5, r1
   14764:	mov	r6, r0
   14768:	bl	15f70 <__assert_fail@plt+0x4b9c>
   1476c:	cmp	r0, #0
   14770:	popne	{r4, r5, r6, sl, fp, pc}
   14774:	cmp	r6, #0
   14778:	beq	1478c <__assert_fail@plt+0x33b8>
   1477c:	cmp	r5, #0
   14780:	cmpne	r4, #0
   14784:	bne	1478c <__assert_fail@plt+0x33b8>
   14788:	pop	{r4, r5, r6, sl, fp, pc}
   1478c:	bl	14b40 <__assert_fail@plt+0x376c>
   14790:	push	{fp, lr}
   14794:	mov	fp, sp
   14798:	bl	15640 <__assert_fail@plt+0x426c>
   1479c:	bl	147a4 <__assert_fail@plt+0x33d0>
   147a0:	pop	{fp, pc}
   147a4:	cmp	r0, #0
   147a8:	bxne	lr
   147ac:	push	{fp, lr}
   147b0:	mov	fp, sp
   147b4:	bl	14b40 <__assert_fail@plt+0x376c>
   147b8:	push	{fp, lr}
   147bc:	mov	fp, sp
   147c0:	bl	15c38 <__assert_fail@plt+0x4864>
   147c4:	bl	147a4 <__assert_fail@plt+0x33d0>
   147c8:	pop	{fp, pc}
   147cc:	b	14790 <__assert_fail@plt+0x33bc>
   147d0:	push	{r4, r5, fp, lr}
   147d4:	add	fp, sp, #8
   147d8:	mov	r4, r1
   147dc:	mov	r5, r0
   147e0:	bl	15670 <__assert_fail@plt+0x429c>
   147e4:	cmp	r0, #0
   147e8:	popne	{r4, r5, fp, pc}
   147ec:	cmp	r5, #0
   147f0:	beq	14800 <__assert_fail@plt+0x342c>
   147f4:	cmp	r4, #0
   147f8:	bne	14800 <__assert_fail@plt+0x342c>
   147fc:	pop	{r4, r5, fp, pc}
   14800:	bl	14b40 <__assert_fail@plt+0x376c>
   14804:	push	{fp, lr}
   14808:	mov	fp, sp
   1480c:	bl	15c3c <__assert_fail@plt+0x4868>
   14810:	bl	147a4 <__assert_fail@plt+0x33d0>
   14814:	pop	{fp, pc}
   14818:	push	{fp, lr}
   1481c:	mov	fp, sp
   14820:	bl	15c4c <__assert_fail@plt+0x4878>
   14824:	bl	147a4 <__assert_fail@plt+0x33d0>
   14828:	pop	{fp, pc}
   1482c:	push	{fp, lr}
   14830:	mov	fp, sp
   14834:	mov	r2, r1
   14838:	mov	r1, r0
   1483c:	mov	r0, #0
   14840:	bl	14754 <__assert_fail@plt+0x3380>
   14844:	pop	{fp, pc}
   14848:	mov	r2, r1
   1484c:	mov	r1, r0
   14850:	mov	r0, #0
   14854:	b	14818 <__assert_fail@plt+0x3444>
   14858:	mov	r2, #1
   1485c:	b	14860 <__assert_fail@plt+0x348c>
   14860:	push	{r4, r5, fp, lr}
   14864:	add	fp, sp, #8
   14868:	mov	r4, r1
   1486c:	ldr	r5, [r1]
   14870:	cmp	r0, #0
   14874:	beq	1488c <__assert_fail@plt+0x34b8>
   14878:	mov	r1, #1
   1487c:	add	r1, r1, r5, lsr #1
   14880:	adds	r5, r5, r1
   14884:	bcc	148a4 <__assert_fail@plt+0x34d0>
   14888:	bl	14b40 <__assert_fail@plt+0x376c>
   1488c:	cmp	r5, #0
   14890:	bne	148a4 <__assert_fail@plt+0x34d0>
   14894:	mov	r1, #64	; 0x40
   14898:	udiv	r5, r1, r2
   1489c:	cmp	r2, #64	; 0x40
   148a0:	addhi	r5, r5, #1
   148a4:	mov	r1, r5
   148a8:	bl	14754 <__assert_fail@plt+0x3380>
   148ac:	str	r5, [r4]
   148b0:	pop	{r4, r5, fp, pc}
   148b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   148b8:	add	fp, sp, #24
   148bc:	mov	r8, r1
   148c0:	ldr	r6, [r1]
   148c4:	add	r1, r6, r6, asr #1
   148c8:	cmp	r1, r6
   148cc:	mvnvs	r1, #-2147483648	; 0x80000000
   148d0:	cmp	r1, r3
   148d4:	mov	r5, r1
   148d8:	movgt	r5, r3
   148dc:	cmn	r3, #1
   148e0:	movle	r5, r1
   148e4:	ldr	r4, [fp, #8]
   148e8:	cmn	r4, #1
   148ec:	ble	14914 <__assert_fail@plt+0x3540>
   148f0:	cmp	r4, #0
   148f4:	beq	14968 <__assert_fail@plt+0x3594>
   148f8:	cmn	r5, #1
   148fc:	ble	1493c <__assert_fail@plt+0x3568>
   14900:	mvn	r7, #-2147483648	; 0x80000000
   14904:	udiv	r1, r7, r4
   14908:	cmp	r1, r5
   1490c:	bge	14968 <__assert_fail@plt+0x3594>
   14910:	b	14978 <__assert_fail@plt+0x35a4>
   14914:	cmn	r5, #1
   14918:	ble	14958 <__assert_fail@plt+0x3584>
   1491c:	cmn	r4, #1
   14920:	beq	14968 <__assert_fail@plt+0x3594>
   14924:	mov	r1, #-2147483648	; 0x80000000
   14928:	sdiv	r1, r1, r4
   1492c:	mvn	r7, #-2147483648	; 0x80000000
   14930:	cmp	r1, r5
   14934:	bge	14968 <__assert_fail@plt+0x3594>
   14938:	b	14978 <__assert_fail@plt+0x35a4>
   1493c:	beq	14968 <__assert_fail@plt+0x3594>
   14940:	mov	r1, #-2147483648	; 0x80000000
   14944:	sdiv	r1, r1, r5
   14948:	mvn	r7, #-2147483648	; 0x80000000
   1494c:	cmp	r1, r4
   14950:	bge	14968 <__assert_fail@plt+0x3594>
   14954:	b	14978 <__assert_fail@plt+0x35a4>
   14958:	mvn	r7, #-2147483648	; 0x80000000
   1495c:	sdiv	r1, r7, r4
   14960:	cmp	r5, r1
   14964:	blt	14978 <__assert_fail@plt+0x35a4>
   14968:	mul	r1, r5, r4
   1496c:	mov	r7, #64	; 0x40
   14970:	cmp	r1, #63	; 0x3f
   14974:	bgt	14980 <__assert_fail@plt+0x35ac>
   14978:	sdiv	r5, r7, r4
   1497c:	mul	r1, r5, r4
   14980:	cmp	r0, #0
   14984:	moveq	r7, #0
   14988:	streq	r7, [r8]
   1498c:	sub	r7, r5, r6
   14990:	cmp	r7, r2
   14994:	bge	14a40 <__assert_fail@plt+0x366c>
   14998:	add	r5, r6, r2
   1499c:	mov	r1, #0
   149a0:	cmp	r5, r3
   149a4:	mov	r2, #0
   149a8:	movwgt	r2, #1
   149ac:	cmn	r3, #1
   149b0:	movwgt	r1, #1
   149b4:	cmp	r5, r6
   149b8:	bvs	14a28 <__assert_fail@plt+0x3654>
   149bc:	ands	r1, r1, r2
   149c0:	bne	14a28 <__assert_fail@plt+0x3654>
   149c4:	cmn	r4, #1
   149c8:	ble	149f0 <__assert_fail@plt+0x361c>
   149cc:	cmp	r4, #0
   149d0:	beq	14a3c <__assert_fail@plt+0x3668>
   149d4:	cmn	r5, #1
   149d8:	ble	14a14 <__assert_fail@plt+0x3640>
   149dc:	mvn	r1, #-2147483648	; 0x80000000
   149e0:	udiv	r1, r1, r4
   149e4:	cmp	r1, r5
   149e8:	bge	14a3c <__assert_fail@plt+0x3668>
   149ec:	b	14a28 <__assert_fail@plt+0x3654>
   149f0:	cmn	r5, #1
   149f4:	ble	14a2c <__assert_fail@plt+0x3658>
   149f8:	cmn	r4, #1
   149fc:	beq	14a3c <__assert_fail@plt+0x3668>
   14a00:	mov	r1, #-2147483648	; 0x80000000
   14a04:	sdiv	r1, r1, r4
   14a08:	cmp	r1, r5
   14a0c:	bge	14a3c <__assert_fail@plt+0x3668>
   14a10:	b	14a28 <__assert_fail@plt+0x3654>
   14a14:	beq	14a3c <__assert_fail@plt+0x3668>
   14a18:	mov	r1, #-2147483648	; 0x80000000
   14a1c:	sdiv	r1, r1, r5
   14a20:	cmp	r1, r4
   14a24:	bge	14a3c <__assert_fail@plt+0x3668>
   14a28:	bl	14b40 <__assert_fail@plt+0x376c>
   14a2c:	mvn	r1, #-2147483648	; 0x80000000
   14a30:	sdiv	r1, r1, r4
   14a34:	cmp	r5, r1
   14a38:	blt	14a28 <__assert_fail@plt+0x3654>
   14a3c:	mul	r1, r5, r4
   14a40:	bl	147d0 <__assert_fail@plt+0x33fc>
   14a44:	str	r5, [r8]
   14a48:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a4c:	mov	r1, #1
   14a50:	b	14a54 <__assert_fail@plt+0x3680>
   14a54:	push	{fp, lr}
   14a58:	mov	fp, sp
   14a5c:	bl	155ec <__assert_fail@plt+0x4218>
   14a60:	bl	147a4 <__assert_fail@plt+0x33d0>
   14a64:	pop	{fp, pc}
   14a68:	mov	r1, #1
   14a6c:	b	14a70 <__assert_fail@plt+0x369c>
   14a70:	push	{fp, lr}
   14a74:	mov	fp, sp
   14a78:	bl	15c48 <__assert_fail@plt+0x4874>
   14a7c:	bl	147a4 <__assert_fail@plt+0x33d0>
   14a80:	pop	{fp, pc}
   14a84:	push	{r4, r5, r6, sl, fp, lr}
   14a88:	add	fp, sp, #16
   14a8c:	mov	r4, r1
   14a90:	mov	r5, r0
   14a94:	mov	r0, r1
   14a98:	bl	14790 <__assert_fail@plt+0x33bc>
   14a9c:	mov	r6, r0
   14aa0:	mov	r1, r5
   14aa4:	mov	r2, r4
   14aa8:	bl	11158 <memcpy@plt>
   14aac:	mov	r0, r6
   14ab0:	pop	{r4, r5, r6, sl, fp, pc}
   14ab4:	push	{r4, r5, r6, sl, fp, lr}
   14ab8:	add	fp, sp, #16
   14abc:	mov	r4, r1
   14ac0:	mov	r5, r0
   14ac4:	mov	r0, r1
   14ac8:	bl	147b8 <__assert_fail@plt+0x33e4>
   14acc:	mov	r6, r0
   14ad0:	mov	r1, r5
   14ad4:	mov	r2, r4
   14ad8:	bl	11158 <memcpy@plt>
   14adc:	mov	r0, r6
   14ae0:	pop	{r4, r5, r6, sl, fp, pc}
   14ae4:	push	{r4, r5, r6, sl, fp, lr}
   14ae8:	add	fp, sp, #16
   14aec:	mov	r4, r1
   14af0:	mov	r5, r0
   14af4:	add	r0, r1, #1
   14af8:	bl	147b8 <__assert_fail@plt+0x33e4>
   14afc:	mov	r6, r0
   14b00:	mov	r0, #0
   14b04:	strb	r0, [r6, r4]
   14b08:	mov	r0, r6
   14b0c:	mov	r1, r5
   14b10:	mov	r2, r4
   14b14:	bl	11158 <memcpy@plt>
   14b18:	mov	r0, r6
   14b1c:	pop	{r4, r5, r6, sl, fp, pc}
   14b20:	push	{r4, sl, fp, lr}
   14b24:	add	fp, sp, #8
   14b28:	mov	r4, r0
   14b2c:	bl	112a8 <strlen@plt>
   14b30:	add	r1, r0, #1
   14b34:	mov	r0, r4
   14b38:	pop	{r4, sl, fp, lr}
   14b3c:	b	14a84 <__assert_fail@plt+0x36b0>
   14b40:	push	{fp, lr}
   14b44:	mov	fp, sp
   14b48:	movw	r0, #28956	; 0x711c
   14b4c:	movt	r0, #2
   14b50:	ldr	r4, [r0]
   14b54:	movw	r1, #27844	; 0x6cc4
   14b58:	movt	r1, #1
   14b5c:	mov	r0, #0
   14b60:	mov	r2, #5
   14b64:	bl	11188 <dcgettext@plt>
   14b68:	mov	r3, r0
   14b6c:	movw	r2, #26767	; 0x688f
   14b70:	movt	r2, #1
   14b74:	mov	r0, r4
   14b78:	mov	r1, #0
   14b7c:	bl	11224 <error@plt>
   14b80:	bl	113b0 <abort@plt>
   14b84:	push	{r4, sl, fp, lr}
   14b88:	add	fp, sp, #8
   14b8c:	bl	15d60 <__assert_fail@plt+0x498c>
   14b90:	mov	r4, r0
   14b94:	cmn	r0, #1
   14b98:	bne	14bac <__assert_fail@plt+0x37d8>
   14b9c:	bl	112c0 <__errno_location@plt>
   14ba0:	ldr	r0, [r0]
   14ba4:	cmp	r0, #12
   14ba8:	beq	14bb4 <__assert_fail@plt+0x37e0>
   14bac:	mov	r0, r4
   14bb0:	pop	{r4, sl, fp, pc}
   14bb4:	bl	14b40 <__assert_fail@plt+0x376c>
   14bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bbc:	add	fp, sp, #28
   14bc0:	sub	sp, sp, #12
   14bc4:	cmp	r2, #37	; 0x25
   14bc8:	bcs	14fe8 <__assert_fail@plt+0x3c14>
   14bcc:	mov	r7, r2
   14bd0:	mov	r6, r1
   14bd4:	mov	r4, r0
   14bd8:	str	r3, [sp]
   14bdc:	ldr	sl, [fp, #8]
   14be0:	bl	112c0 <__errno_location@plt>
   14be4:	mov	r5, r0
   14be8:	mov	r0, #0
   14bec:	str	r0, [r5]
   14bf0:	bl	11284 <__ctype_b_loc@plt>
   14bf4:	ldr	r1, [r0]
   14bf8:	mov	r2, r4
   14bfc:	ldrb	r0, [r2], #1
   14c00:	add	r3, r1, r0, lsl #1
   14c04:	ldrb	r3, [r3, #1]
   14c08:	tst	r3, #32
   14c0c:	bne	14bfc <__assert_fail@plt+0x3828>
   14c10:	add	r9, sp, #8
   14c14:	cmp	r6, #0
   14c18:	movne	r9, r6
   14c1c:	mov	r8, #4
   14c20:	cmp	r0, #45	; 0x2d
   14c24:	beq	14fdc <__assert_fail@plt+0x3c08>
   14c28:	mov	r0, r4
   14c2c:	mov	r1, r9
   14c30:	mov	r2, r7
   14c34:	bl	1129c <strtoul@plt>
   14c38:	str	r0, [sp, #4]
   14c3c:	ldr	r7, [r9]
   14c40:	cmp	r7, r4
   14c44:	beq	14c6c <__assert_fail@plt+0x3898>
   14c48:	ldr	r0, [r5]
   14c4c:	cmp	r0, #0
   14c50:	beq	14c9c <__assert_fail@plt+0x38c8>
   14c54:	cmp	r0, #34	; 0x22
   14c58:	bne	14fdc <__assert_fail@plt+0x3c08>
   14c5c:	mov	r8, #1
   14c60:	cmp	sl, #0
   14c64:	bne	14ca8 <__assert_fail@plt+0x38d4>
   14c68:	b	14fd0 <__assert_fail@plt+0x3bfc>
   14c6c:	cmp	sl, #0
   14c70:	ldrbne	r1, [r7]
   14c74:	cmpne	r1, #0
   14c78:	beq	14fdc <__assert_fail@plt+0x3c08>
   14c7c:	mov	r0, sl
   14c80:	bl	112b4 <strchr@plt>
   14c84:	cmp	r0, #0
   14c88:	beq	14fdc <__assert_fail@plt+0x3c08>
   14c8c:	mov	r0, #1
   14c90:	str	r0, [sp, #4]
   14c94:	mov	r8, #0
   14c98:	b	14ca8 <__assert_fail@plt+0x38d4>
   14c9c:	mov	r8, r0
   14ca0:	cmp	sl, #0
   14ca4:	beq	14fd0 <__assert_fail@plt+0x3bfc>
   14ca8:	ldrb	r4, [r7]
   14cac:	cmp	r4, #0
   14cb0:	beq	14fd0 <__assert_fail@plt+0x3bfc>
   14cb4:	mov	r0, sl
   14cb8:	mov	r1, r4
   14cbc:	bl	112b4 <strchr@plt>
   14cc0:	cmp	r0, #0
   14cc4:	beq	14ed4 <__assert_fail@plt+0x3b00>
   14cc8:	sub	r0, r4, #69	; 0x45
   14ccc:	mov	r6, #1
   14cd0:	mov	r5, #1024	; 0x400
   14cd4:	cmp	r0, #47	; 0x2f
   14cd8:	bhi	14dd0 <__assert_fail@plt+0x39fc>
   14cdc:	add	r1, pc, #0
   14ce0:	ldr	pc, [r1, r0, lsl #2]
   14ce4:	andeq	r4, r1, r4, lsr #27
   14ce8:	ldrdeq	r4, [r1], -r0
   14cec:	andeq	r4, r1, r4, lsr #27
   14cf0:	ldrdeq	r4, [r1], -r0
   14cf4:	ldrdeq	r4, [r1], -r0
   14cf8:	ldrdeq	r4, [r1], -r0
   14cfc:	andeq	r4, r1, r4, lsr #27
   14d00:	ldrdeq	r4, [r1], -r0
   14d04:	andeq	r4, r1, r4, lsr #27
   14d08:	ldrdeq	r4, [r1], -r0
   14d0c:	ldrdeq	r4, [r1], -r0
   14d10:	andeq	r4, r1, r4, lsr #27
   14d14:	ldrdeq	r4, [r1], -r0
   14d18:	ldrdeq	r4, [r1], -r0
   14d1c:	ldrdeq	r4, [r1], -r0
   14d20:	andeq	r4, r1, r4, lsr #27
   14d24:	ldrdeq	r4, [r1], -r0
   14d28:	ldrdeq	r4, [r1], -r0
   14d2c:	ldrdeq	r4, [r1], -r0
   14d30:	ldrdeq	r4, [r1], -r0
   14d34:	andeq	r4, r1, r4, lsr #27
   14d38:	andeq	r4, r1, r4, lsr #27
   14d3c:	ldrdeq	r4, [r1], -r0
   14d40:	ldrdeq	r4, [r1], -r0
   14d44:	ldrdeq	r4, [r1], -r0
   14d48:	ldrdeq	r4, [r1], -r0
   14d4c:	ldrdeq	r4, [r1], -r0
   14d50:	ldrdeq	r4, [r1], -r0
   14d54:	ldrdeq	r4, [r1], -r0
   14d58:	ldrdeq	r4, [r1], -r0
   14d5c:	ldrdeq	r4, [r1], -r0
   14d60:	ldrdeq	r4, [r1], -r0
   14d64:	ldrdeq	r4, [r1], -r0
   14d68:	ldrdeq	r4, [r1], -r0
   14d6c:	andeq	r4, r1, r4, lsr #27
   14d70:	ldrdeq	r4, [r1], -r0
   14d74:	ldrdeq	r4, [r1], -r0
   14d78:	ldrdeq	r4, [r1], -r0
   14d7c:	andeq	r4, r1, r4, lsr #27
   14d80:	ldrdeq	r4, [r1], -r0
   14d84:	andeq	r4, r1, r4, lsr #27
   14d88:	ldrdeq	r4, [r1], -r0
   14d8c:	ldrdeq	r4, [r1], -r0
   14d90:	ldrdeq	r4, [r1], -r0
   14d94:	ldrdeq	r4, [r1], -r0
   14d98:	ldrdeq	r4, [r1], -r0
   14d9c:	ldrdeq	r4, [r1], -r0
   14da0:	andeq	r4, r1, r4, lsr #27
   14da4:	mov	r0, sl
   14da8:	mov	r1, #48	; 0x30
   14dac:	bl	112b4 <strchr@plt>
   14db0:	cmp	r0, #0
   14db4:	beq	14dd0 <__assert_fail@plt+0x39fc>
   14db8:	ldrb	r0, [r7, #1]
   14dbc:	cmp	r0, #66	; 0x42
   14dc0:	cmpne	r0, #68	; 0x44
   14dc4:	bne	14ee8 <__assert_fail@plt+0x3b14>
   14dc8:	mov	r6, #2
   14dcc:	mov	r5, #1000	; 0x3e8
   14dd0:	sub	r1, r4, #66	; 0x42
   14dd4:	cmp	r1, #53	; 0x35
   14dd8:	bhi	14ed4 <__assert_fail@plt+0x3b00>
   14ddc:	mov	r0, #0
   14de0:	add	r2, pc, #0
   14de4:	ldr	pc, [r2, r1, lsl #2]
   14de8:	andeq	r4, r1, r4, asr pc
   14dec:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14df0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14df4:	andeq	r4, r1, r0, ror #30
   14df8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14dfc:	andeq	r4, r1, r0, asr #29
   14e00:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e04:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e08:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e0c:	andeq	r4, r1, r4, lsl #30
   14e10:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e14:	andeq	r4, r1, r8, lsl pc
   14e18:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e1c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e20:	andeq	r4, r1, r4, ror pc
   14e24:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e28:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e2c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e30:	andeq	r4, r1, ip, lsr #30
   14e34:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e38:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e3c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e40:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e44:	andeq	r4, r1, r8, lsl #31
   14e48:	andeq	r4, r1, r0, asr #30
   14e4c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e50:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e54:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e58:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e5c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e60:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e64:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e68:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   14e6c:			; <UNDEFINED> instruction: 0x00014fb4
   14e70:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e74:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e78:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e7c:	andeq	r4, r1, r0, asr #29
   14e80:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e84:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e88:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e8c:	andeq	r4, r1, r4, lsl #30
   14e90:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e94:	andeq	r4, r1, r8, lsl pc
   14e98:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e9c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ea0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ea4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ea8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14eac:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14eb0:	andeq	r4, r1, ip, lsr #30
   14eb4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14eb8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14ebc:	andeq	r4, r1, r8, lsr #31
   14ec0:	add	r0, sp, #4
   14ec4:	mov	r1, r5
   14ec8:	mov	r2, #3
   14ecc:	bl	15070 <__assert_fail@plt+0x3c9c>
   14ed0:	b	14fb4 <__assert_fail@plt+0x3be0>
   14ed4:	ldr	r0, [sp, #4]
   14ed8:	ldr	r1, [sp]
   14edc:	str	r0, [r1]
   14ee0:	orr	r8, r8, #2
   14ee4:	b	14fdc <__assert_fail@plt+0x3c08>
   14ee8:	cmp	r0, #105	; 0x69
   14eec:	bne	14dd0 <__assert_fail@plt+0x39fc>
   14ef0:	ldrb	r0, [r7, #2]
   14ef4:	mov	r6, #1
   14ef8:	cmp	r0, #66	; 0x42
   14efc:	movweq	r6, #3
   14f00:	b	14dd0 <__assert_fail@plt+0x39fc>
   14f04:	add	r0, sp, #4
   14f08:	mov	r1, r5
   14f0c:	mov	r2, #1
   14f10:	bl	15070 <__assert_fail@plt+0x3c9c>
   14f14:	b	14fb4 <__assert_fail@plt+0x3be0>
   14f18:	add	r0, sp, #4
   14f1c:	mov	r1, r5
   14f20:	mov	r2, #2
   14f24:	bl	15070 <__assert_fail@plt+0x3c9c>
   14f28:	b	14fb4 <__assert_fail@plt+0x3be0>
   14f2c:	add	r0, sp, #4
   14f30:	mov	r1, r5
   14f34:	mov	r2, #4
   14f38:	bl	15070 <__assert_fail@plt+0x3c9c>
   14f3c:	b	14fb4 <__assert_fail@plt+0x3be0>
   14f40:	add	r0, sp, #4
   14f44:	mov	r1, r5
   14f48:	mov	r2, #7
   14f4c:	bl	15070 <__assert_fail@plt+0x3c9c>
   14f50:	b	14fb4 <__assert_fail@plt+0x3be0>
   14f54:	add	r0, sp, #4
   14f58:	mov	r1, #1024	; 0x400
   14f5c:	b	14fb0 <__assert_fail@plt+0x3bdc>
   14f60:	add	r0, sp, #4
   14f64:	mov	r1, r5
   14f68:	mov	r2, #6
   14f6c:	bl	15070 <__assert_fail@plt+0x3c9c>
   14f70:	b	14fb4 <__assert_fail@plt+0x3be0>
   14f74:	add	r0, sp, #4
   14f78:	mov	r1, r5
   14f7c:	mov	r2, #5
   14f80:	bl	15070 <__assert_fail@plt+0x3c9c>
   14f84:	b	14fb4 <__assert_fail@plt+0x3be0>
   14f88:	add	r0, sp, #4
   14f8c:	mov	r1, r5
   14f90:	mov	r2, #8
   14f94:	bl	15070 <__assert_fail@plt+0x3c9c>
   14f98:	b	14fb4 <__assert_fail@plt+0x3be0>
   14f9c:	add	r0, sp, #4
   14fa0:	mov	r1, #512	; 0x200
   14fa4:	b	14fb0 <__assert_fail@plt+0x3bdc>
   14fa8:	add	r0, sp, #4
   14fac:	mov	r1, #2
   14fb0:	bl	15008 <__assert_fail@plt+0x3c34>
   14fb4:	ldr	r1, [r9]
   14fb8:	add	r2, r1, r6
   14fbc:	str	r2, [r9]
   14fc0:	ldrb	r1, [r1, r6]
   14fc4:	orr	r8, r0, r8
   14fc8:	cmp	r1, #0
   14fcc:	orrne	r8, r8, #2
   14fd0:	ldr	r0, [sp, #4]
   14fd4:	ldr	r1, [sp]
   14fd8:	str	r0, [r1]
   14fdc:	mov	r0, r8
   14fe0:	sub	sp, fp, #28
   14fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fe8:	movw	r0, #27861	; 0x6cd5
   14fec:	movt	r0, #1
   14ff0:	movw	r1, #27899	; 0x6cfb
   14ff4:	movt	r1, #1
   14ff8:	movw	r3, #27915	; 0x6d0b
   14ffc:	movt	r3, #1
   15000:	mov	r2, #85	; 0x55
   15004:	bl	113d4 <__assert_fail@plt>
   15008:	cmn	r1, #1
   1500c:	ble	15040 <__assert_fail@plt+0x3c6c>
   15010:	cmp	r1, #0
   15014:	beq	15058 <__assert_fail@plt+0x3c84>
   15018:	push	{fp, lr}
   1501c:	mov	fp, sp
   15020:	mvn	r3, #0
   15024:	udiv	ip, r3, r1
   15028:	ldr	lr, [r0]
   1502c:	mov	r2, #1
   15030:	cmp	ip, lr
   15034:	pop	{fp, lr}
   15038:	bcs	15058 <__assert_fail@plt+0x3c84>
   1503c:	b	15064 <__assert_fail@plt+0x3c90>
   15040:	ldr	r2, [r0]
   15044:	cmp	r2, #0
   15048:	beq	15058 <__assert_fail@plt+0x3c84>
   1504c:	mov	r2, #1
   15050:	mvn	r3, #0
   15054:	b	15064 <__assert_fail@plt+0x3c90>
   15058:	ldr	r2, [r0]
   1505c:	mul	r3, r2, r1
   15060:	mov	r2, #0
   15064:	str	r3, [r0]
   15068:	mov	r0, r2
   1506c:	bx	lr
   15070:	push	{r4, r5, r6, r7, fp, lr}
   15074:	add	fp, sp, #16
   15078:	cmp	r2, #0
   1507c:	moveq	r6, #0
   15080:	moveq	r0, r6
   15084:	popeq	{r4, r5, r6, r7, fp, pc}
   15088:	mov	r4, r2
   1508c:	mov	r5, r1
   15090:	mov	r7, r0
   15094:	mov	r6, #0
   15098:	mov	r0, r7
   1509c:	mov	r1, r5
   150a0:	bl	15008 <__assert_fail@plt+0x3c34>
   150a4:	orr	r6, r0, r6
   150a8:	subs	r4, r4, #1
   150ac:	bne	15098 <__assert_fail@plt+0x3cc4>
   150b0:	mov	r0, r6
   150b4:	pop	{r4, r5, r6, r7, fp, pc}
   150b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150bc:	add	fp, sp, #28
   150c0:	sub	sp, sp, #20
   150c4:	cmp	r2, #37	; 0x25
   150c8:	bcs	154f8 <__assert_fail@plt+0x4124>
   150cc:	mov	r5, r2
   150d0:	mov	r6, r1
   150d4:	mov	r4, r0
   150d8:	str	r3, [sp, #4]
   150dc:	ldr	sl, [fp, #8]
   150e0:	bl	112c0 <__errno_location@plt>
   150e4:	mov	r7, r0
   150e8:	mov	r0, #0
   150ec:	str	r0, [r7]
   150f0:	bl	11284 <__ctype_b_loc@plt>
   150f4:	ldr	r1, [r0]
   150f8:	mov	r2, r4
   150fc:	ldrb	r0, [r2], #1
   15100:	add	r3, r1, r0, lsl #1
   15104:	ldrb	r3, [r3, #1]
   15108:	tst	r3, #32
   1510c:	bne	150fc <__assert_fail@plt+0x3d28>
   15110:	add	r9, sp, #16
   15114:	cmp	r6, #0
   15118:	movne	r9, r6
   1511c:	mov	r8, #4
   15120:	cmp	r0, #45	; 0x2d
   15124:	beq	154ec <__assert_fail@plt+0x4118>
   15128:	mov	r0, r4
   1512c:	mov	r1, r9
   15130:	mov	r2, r5
   15134:	bl	11308 <strtoumax@plt>
   15138:	str	r1, [sp, #12]
   1513c:	str	r0, [sp, #8]
   15140:	ldr	r6, [r9]
   15144:	cmp	r6, r4
   15148:	beq	15170 <__assert_fail@plt+0x3d9c>
   1514c:	ldr	r0, [r7]
   15150:	cmp	r0, #0
   15154:	beq	151a4 <__assert_fail@plt+0x3dd0>
   15158:	cmp	r0, #34	; 0x22
   1515c:	bne	154ec <__assert_fail@plt+0x4118>
   15160:	mov	r8, #1
   15164:	cmp	sl, #0
   15168:	bne	151b0 <__assert_fail@plt+0x3ddc>
   1516c:	b	154dc <__assert_fail@plt+0x4108>
   15170:	cmp	sl, #0
   15174:	ldrbne	r1, [r6]
   15178:	cmpne	r1, #0
   1517c:	beq	154ec <__assert_fail@plt+0x4118>
   15180:	mov	r0, sl
   15184:	bl	112b4 <strchr@plt>
   15188:	cmp	r0, #0
   1518c:	beq	154ec <__assert_fail@plt+0x4118>
   15190:	mov	r8, #0
   15194:	str	r8, [sp, #12]
   15198:	mov	r0, #1
   1519c:	str	r0, [sp, #8]
   151a0:	b	151b0 <__assert_fail@plt+0x3ddc>
   151a4:	mov	r8, r0
   151a8:	cmp	sl, #0
   151ac:	beq	154dc <__assert_fail@plt+0x4108>
   151b0:	ldrb	r4, [r6]
   151b4:	cmp	r4, #0
   151b8:	beq	154dc <__assert_fail@plt+0x4108>
   151bc:	mov	r0, sl
   151c0:	mov	r1, r4
   151c4:	bl	112b4 <strchr@plt>
   151c8:	cmp	r0, #0
   151cc:	beq	153dc <__assert_fail@plt+0x4008>
   151d0:	sub	r0, r4, #69	; 0x45
   151d4:	mov	r7, #1
   151d8:	mov	r5, #1024	; 0x400
   151dc:	cmp	r0, #47	; 0x2f
   151e0:	bhi	152d8 <__assert_fail@plt+0x3f04>
   151e4:	add	r1, pc, #0
   151e8:	ldr	pc, [r1, r0, lsl #2]
   151ec:	andeq	r5, r1, ip, lsr #5
   151f0:	ldrdeq	r5, [r1], -r8
   151f4:	andeq	r5, r1, ip, lsr #5
   151f8:	ldrdeq	r5, [r1], -r8
   151fc:	ldrdeq	r5, [r1], -r8
   15200:	ldrdeq	r5, [r1], -r8
   15204:	andeq	r5, r1, ip, lsr #5
   15208:	ldrdeq	r5, [r1], -r8
   1520c:	andeq	r5, r1, ip, lsr #5
   15210:	ldrdeq	r5, [r1], -r8
   15214:	ldrdeq	r5, [r1], -r8
   15218:	andeq	r5, r1, ip, lsr #5
   1521c:	ldrdeq	r5, [r1], -r8
   15220:	ldrdeq	r5, [r1], -r8
   15224:	ldrdeq	r5, [r1], -r8
   15228:	andeq	r5, r1, ip, lsr #5
   1522c:	ldrdeq	r5, [r1], -r8
   15230:	ldrdeq	r5, [r1], -r8
   15234:	ldrdeq	r5, [r1], -r8
   15238:	ldrdeq	r5, [r1], -r8
   1523c:	andeq	r5, r1, ip, lsr #5
   15240:	andeq	r5, r1, ip, lsr #5
   15244:	ldrdeq	r5, [r1], -r8
   15248:	ldrdeq	r5, [r1], -r8
   1524c:	ldrdeq	r5, [r1], -r8
   15250:	ldrdeq	r5, [r1], -r8
   15254:	ldrdeq	r5, [r1], -r8
   15258:	ldrdeq	r5, [r1], -r8
   1525c:	ldrdeq	r5, [r1], -r8
   15260:	ldrdeq	r5, [r1], -r8
   15264:	ldrdeq	r5, [r1], -r8
   15268:	ldrdeq	r5, [r1], -r8
   1526c:	ldrdeq	r5, [r1], -r8
   15270:	ldrdeq	r5, [r1], -r8
   15274:	andeq	r5, r1, ip, lsr #5
   15278:	ldrdeq	r5, [r1], -r8
   1527c:	ldrdeq	r5, [r1], -r8
   15280:	ldrdeq	r5, [r1], -r8
   15284:	andeq	r5, r1, ip, lsr #5
   15288:	ldrdeq	r5, [r1], -r8
   1528c:	andeq	r5, r1, ip, lsr #5
   15290:	ldrdeq	r5, [r1], -r8
   15294:	ldrdeq	r5, [r1], -r8
   15298:	ldrdeq	r5, [r1], -r8
   1529c:	ldrdeq	r5, [r1], -r8
   152a0:	ldrdeq	r5, [r1], -r8
   152a4:	ldrdeq	r5, [r1], -r8
   152a8:	andeq	r5, r1, ip, lsr #5
   152ac:	mov	r0, sl
   152b0:	mov	r1, #48	; 0x30
   152b4:	bl	112b4 <strchr@plt>
   152b8:	cmp	r0, #0
   152bc:	beq	152d8 <__assert_fail@plt+0x3f04>
   152c0:	ldrb	r0, [r6, #1]
   152c4:	cmp	r0, #66	; 0x42
   152c8:	cmpne	r0, #68	; 0x44
   152cc:	bne	153f4 <__assert_fail@plt+0x4020>
   152d0:	mov	r7, #2
   152d4:	mov	r5, #1000	; 0x3e8
   152d8:	sub	r1, r4, #66	; 0x42
   152dc:	cmp	r1, #53	; 0x35
   152e0:	bhi	153dc <__assert_fail@plt+0x4008>
   152e4:	mov	r0, #0
   152e8:	add	r2, pc, #0
   152ec:	ldr	pc, [r2, r1, lsl #2]
   152f0:	andeq	r5, r1, r0, ror #8
   152f4:	ldrdeq	r5, [r1], -ip
   152f8:	ldrdeq	r5, [r1], -ip
   152fc:	andeq	r5, r1, ip, ror #8
   15300:	ldrdeq	r5, [r1], -ip
   15304:	andeq	r5, r1, r8, asr #7
   15308:	ldrdeq	r5, [r1], -ip
   1530c:	ldrdeq	r5, [r1], -ip
   15310:	ldrdeq	r5, [r1], -ip
   15314:	andeq	r5, r1, r0, lsl r4
   15318:	ldrdeq	r5, [r1], -ip
   1531c:	andeq	r5, r1, r4, lsr #8
   15320:	ldrdeq	r5, [r1], -ip
   15324:	ldrdeq	r5, [r1], -ip
   15328:	andeq	r5, r1, r0, lsl #9
   1532c:	ldrdeq	r5, [r1], -ip
   15330:	ldrdeq	r5, [r1], -ip
   15334:	ldrdeq	r5, [r1], -ip
   15338:	andeq	r5, r1, r8, lsr r4
   1533c:	ldrdeq	r5, [r1], -ip
   15340:	ldrdeq	r5, [r1], -ip
   15344:	ldrdeq	r5, [r1], -ip
   15348:	ldrdeq	r5, [r1], -ip
   1534c:	muleq	r1, r4, r4
   15350:	andeq	r5, r1, ip, asr #8
   15354:	ldrdeq	r5, [r1], -ip
   15358:	ldrdeq	r5, [r1], -ip
   1535c:	ldrdeq	r5, [r1], -ip
   15360:	ldrdeq	r5, [r1], -ip
   15364:	ldrdeq	r5, [r1], -ip
   15368:	ldrdeq	r5, [r1], -ip
   1536c:	ldrdeq	r5, [r1], -ip
   15370:	andeq	r5, r1, r8, lsr #9
   15374:	andeq	r5, r1, r0, asr #9
   15378:	ldrdeq	r5, [r1], -ip
   1537c:	ldrdeq	r5, [r1], -ip
   15380:	ldrdeq	r5, [r1], -ip
   15384:	andeq	r5, r1, r8, asr #7
   15388:	ldrdeq	r5, [r1], -ip
   1538c:	ldrdeq	r5, [r1], -ip
   15390:	ldrdeq	r5, [r1], -ip
   15394:	andeq	r5, r1, r0, lsl r4
   15398:	ldrdeq	r5, [r1], -ip
   1539c:	andeq	r5, r1, r4, lsr #8
   153a0:	ldrdeq	r5, [r1], -ip
   153a4:	ldrdeq	r5, [r1], -ip
   153a8:	ldrdeq	r5, [r1], -ip
   153ac:	ldrdeq	r5, [r1], -ip
   153b0:	ldrdeq	r5, [r1], -ip
   153b4:	ldrdeq	r5, [r1], -ip
   153b8:	andeq	r5, r1, r8, lsr r4
   153bc:	ldrdeq	r5, [r1], -ip
   153c0:	ldrdeq	r5, [r1], -ip
   153c4:			; <UNDEFINED> instruction: 0x000154b4
   153c8:	add	r0, sp, #8
   153cc:	mov	r1, r5
   153d0:	mov	r2, #3
   153d4:	bl	155a4 <__assert_fail@plt+0x41d0>
   153d8:	b	154c0 <__assert_fail@plt+0x40ec>
   153dc:	ldr	r0, [sp, #8]
   153e0:	ldr	r1, [sp, #12]
   153e4:	ldr	r2, [sp, #4]
   153e8:	strd	r0, [r2]
   153ec:	orr	r8, r8, #2
   153f0:	b	154ec <__assert_fail@plt+0x4118>
   153f4:	cmp	r0, #105	; 0x69
   153f8:	bne	152d8 <__assert_fail@plt+0x3f04>
   153fc:	ldrb	r0, [r6, #2]
   15400:	mov	r7, #1
   15404:	cmp	r0, #66	; 0x42
   15408:	movweq	r7, #3
   1540c:	b	152d8 <__assert_fail@plt+0x3f04>
   15410:	add	r0, sp, #8
   15414:	mov	r1, r5
   15418:	mov	r2, #1
   1541c:	bl	155a4 <__assert_fail@plt+0x41d0>
   15420:	b	154c0 <__assert_fail@plt+0x40ec>
   15424:	add	r0, sp, #8
   15428:	mov	r1, r5
   1542c:	mov	r2, #2
   15430:	bl	155a4 <__assert_fail@plt+0x41d0>
   15434:	b	154c0 <__assert_fail@plt+0x40ec>
   15438:	add	r0, sp, #8
   1543c:	mov	r1, r5
   15440:	mov	r2, #4
   15444:	bl	155a4 <__assert_fail@plt+0x41d0>
   15448:	b	154c0 <__assert_fail@plt+0x40ec>
   1544c:	add	r0, sp, #8
   15450:	mov	r1, r5
   15454:	mov	r2, #7
   15458:	bl	155a4 <__assert_fail@plt+0x41d0>
   1545c:	b	154c0 <__assert_fail@plt+0x40ec>
   15460:	add	r0, sp, #8
   15464:	mov	r1, #1024	; 0x400
   15468:	b	154bc <__assert_fail@plt+0x40e8>
   1546c:	add	r0, sp, #8
   15470:	mov	r1, r5
   15474:	mov	r2, #6
   15478:	bl	155a4 <__assert_fail@plt+0x41d0>
   1547c:	b	154c0 <__assert_fail@plt+0x40ec>
   15480:	add	r0, sp, #8
   15484:	mov	r1, r5
   15488:	mov	r2, #5
   1548c:	bl	155a4 <__assert_fail@plt+0x41d0>
   15490:	b	154c0 <__assert_fail@plt+0x40ec>
   15494:	add	r0, sp, #8
   15498:	mov	r1, r5
   1549c:	mov	r2, #8
   154a0:	bl	155a4 <__assert_fail@plt+0x41d0>
   154a4:	b	154c0 <__assert_fail@plt+0x40ec>
   154a8:	add	r0, sp, #8
   154ac:	mov	r1, #512	; 0x200
   154b0:	b	154bc <__assert_fail@plt+0x40e8>
   154b4:	add	r0, sp, #8
   154b8:	mov	r1, #2
   154bc:	bl	15518 <__assert_fail@plt+0x4144>
   154c0:	ldr	r1, [r9]
   154c4:	add	r2, r1, r7
   154c8:	str	r2, [r9]
   154cc:	ldrb	r1, [r1, r7]
   154d0:	orr	r8, r0, r8
   154d4:	cmp	r1, #0
   154d8:	orrne	r8, r8, #2
   154dc:	ldr	r0, [sp, #8]
   154e0:	ldr	r1, [sp, #12]
   154e4:	ldr	r2, [sp, #4]
   154e8:	strd	r0, [r2]
   154ec:	mov	r0, r8
   154f0:	sub	sp, fp, #28
   154f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154f8:	movw	r0, #27861	; 0x6cd5
   154fc:	movt	r0, #1
   15500:	movw	r1, #27899	; 0x6cfb
   15504:	movt	r1, #1
   15508:	movw	r3, #27996	; 0x6d5c
   1550c:	movt	r3, #1
   15510:	mov	r2, #85	; 0x55
   15514:	bl	113d4 <__assert_fail@plt>
   15518:	push	{r4, r5, r6, r7, fp, lr}
   1551c:	add	fp, sp, #16
   15520:	mov	r5, r1
   15524:	mov	r4, r0
   15528:	cmn	r1, #1
   1552c:	ble	15564 <__assert_fail@plt+0x4190>
   15530:	cmp	r5, #0
   15534:	beq	15584 <__assert_fail@plt+0x41b0>
   15538:	asr	r3, r5, #31
   1553c:	mvn	r6, #0
   15540:	mvn	r0, #0
   15544:	mvn	r1, #0
   15548:	mov	r2, r5
   1554c:	bl	160b8 <__assert_fail@plt+0x4ce4>
   15550:	ldrd	r2, [r4]
   15554:	subs	r0, r0, r2
   15558:	sbcs	r0, r1, r3
   1555c:	bcc	15574 <__assert_fail@plt+0x41a0>
   15560:	b	15584 <__assert_fail@plt+0x41b0>
   15564:	ldrd	r0, [r4]
   15568:	orrs	r0, r0, r1
   1556c:	beq	15584 <__assert_fail@plt+0x41b0>
   15570:	mvn	r6, #0
   15574:	mov	r0, #1
   15578:	mvn	r7, #0
   1557c:	strd	r6, [r4]
   15580:	pop	{r4, r5, r6, r7, fp, pc}
   15584:	ldrd	r0, [r4]
   15588:	umull	r6, r2, r0, r5
   1558c:	asr	r3, r5, #31
   15590:	mla	r0, r0, r3, r2
   15594:	mla	r7, r1, r5, r0
   15598:	mov	r0, #0
   1559c:	strd	r6, [r4]
   155a0:	pop	{r4, r5, r6, r7, fp, pc}
   155a4:	push	{r4, r5, r6, r7, fp, lr}
   155a8:	add	fp, sp, #16
   155ac:	cmp	r2, #0
   155b0:	moveq	r6, #0
   155b4:	moveq	r0, r6
   155b8:	popeq	{r4, r5, r6, r7, fp, pc}
   155bc:	mov	r4, r2
   155c0:	mov	r5, r1
   155c4:	mov	r7, r0
   155c8:	mov	r6, #0
   155cc:	mov	r0, r7
   155d0:	mov	r1, r5
   155d4:	bl	15518 <__assert_fail@plt+0x4144>
   155d8:	orr	r6, r0, r6
   155dc:	subs	r4, r4, #1
   155e0:	bne	155cc <__assert_fail@plt+0x41f8>
   155e4:	mov	r0, r6
   155e8:	pop	{r4, r5, r6, r7, fp, pc}
   155ec:	clz	r2, r1
   155f0:	lsr	r2, r2, #5
   155f4:	clz	r3, r0
   155f8:	lsr	r3, r3, #5
   155fc:	orrs	r2, r3, r2
   15600:	movwne	r1, #1
   15604:	movwne	r0, #1
   15608:	cmp	r1, #0
   1560c:	beq	1563c <__assert_fail@plt+0x4268>
   15610:	mvn	r2, #-2147483648	; 0x80000000
   15614:	udiv	r2, r2, r1
   15618:	cmp	r2, r0
   1561c:	bcs	1563c <__assert_fail@plt+0x4268>
   15620:	push	{fp, lr}
   15624:	mov	fp, sp
   15628:	bl	112c0 <__errno_location@plt>
   1562c:	mov	r1, #12
   15630:	str	r1, [r0]
   15634:	mov	r0, #0
   15638:	pop	{fp, pc}
   1563c:	b	110e0 <calloc@plt>
   15640:	cmp	r0, #0
   15644:	movweq	r0, #1
   15648:	cmn	r0, #1
   1564c:	ble	15654 <__assert_fail@plt+0x4280>
   15650:	b	11248 <malloc@plt>
   15654:	push	{fp, lr}
   15658:	mov	fp, sp
   1565c:	bl	112c0 <__errno_location@plt>
   15660:	mov	r1, #12
   15664:	str	r1, [r0]
   15668:	mov	r0, #0
   1566c:	pop	{fp, pc}
   15670:	push	{fp, lr}
   15674:	mov	fp, sp
   15678:	cmp	r0, #0
   1567c:	beq	15698 <__assert_fail@plt+0x42c4>
   15680:	cmp	r1, #0
   15684:	beq	156a4 <__assert_fail@plt+0x42d0>
   15688:	cmn	r1, #1
   1568c:	ble	156b0 <__assert_fail@plt+0x42dc>
   15690:	pop	{fp, lr}
   15694:	b	11194 <realloc@plt>
   15698:	mov	r0, r1
   1569c:	pop	{fp, lr}
   156a0:	b	15640 <__assert_fail@plt+0x426c>
   156a4:	bl	122a8 <__assert_fail@plt+0xed4>
   156a8:	mov	r0, #0
   156ac:	pop	{fp, pc}
   156b0:	bl	112c0 <__errno_location@plt>
   156b4:	mov	r1, #12
   156b8:	str	r1, [r0]
   156bc:	mov	r0, #0
   156c0:	pop	{fp, pc}
   156c4:	mov	r1, r0
   156c8:	sub	r2, r0, #65	; 0x41
   156cc:	mov	r0, #1
   156d0:	cmp	r2, #26
   156d4:	subcs	r2, r1, #97	; 0x61
   156d8:	cmpcs	r2, #26
   156dc:	bcs	156e4 <__assert_fail@plt+0x4310>
   156e0:	bx	lr
   156e4:	sub	r1, r1, #48	; 0x30
   156e8:	cmp	r1, #10
   156ec:	movcs	r0, #0
   156f0:	bx	lr
   156f4:	mov	r1, r0
   156f8:	sub	r2, r0, #65	; 0x41
   156fc:	mov	r0, #1
   15700:	cmp	r2, #26
   15704:	subcs	r1, r1, #97	; 0x61
   15708:	cmpcs	r1, #26
   1570c:	movcs	r0, #0
   15710:	bx	lr
   15714:	mov	r1, #0
   15718:	cmp	r0, #128	; 0x80
   1571c:	movwcc	r1, #1
   15720:	mov	r0, r1
   15724:	bx	lr
   15728:	sub	r1, r0, #9
   1572c:	clz	r1, r1
   15730:	lsr	r1, r1, #5
   15734:	sub	r0, r0, #32
   15738:	clz	r0, r0
   1573c:	lsr	r0, r0, #5
   15740:	orr	r0, r0, r1
   15744:	bx	lr
   15748:	mov	r1, r0
   1574c:	mov	r0, #1
   15750:	cmp	r1, #32
   15754:	bxcc	lr
   15758:	cmp	r1, #127	; 0x7f
   1575c:	movne	r0, #0
   15760:	bx	lr
   15764:	sub	r1, r0, #48	; 0x30
   15768:	mov	r0, #0
   1576c:	cmp	r1, #10
   15770:	movwcc	r0, #1
   15774:	bx	lr
   15778:	sub	r1, r0, #33	; 0x21
   1577c:	mov	r0, #0
   15780:	cmp	r1, #94	; 0x5e
   15784:	movwcc	r0, #1
   15788:	bx	lr
   1578c:	sub	r1, r0, #97	; 0x61
   15790:	mov	r0, #0
   15794:	cmp	r1, #26
   15798:	movwcc	r0, #1
   1579c:	bx	lr
   157a0:	sub	r1, r0, #32
   157a4:	mov	r0, #0
   157a8:	cmp	r1, #95	; 0x5f
   157ac:	movwcc	r0, #1
   157b0:	bx	lr
   157b4:	sub	r1, r0, #33	; 0x21
   157b8:	cmp	r1, #93	; 0x5d
   157bc:	bhi	15948 <__assert_fail@plt+0x4574>
   157c0:	mov	r0, #1
   157c4:	add	r2, pc, #0
   157c8:	ldr	pc, [r2, r1, lsl #2]
   157cc:	andeq	r5, r1, r4, asr #18
   157d0:	andeq	r5, r1, r4, asr #18
   157d4:	andeq	r5, r1, r4, asr #18
   157d8:	andeq	r5, r1, r4, asr #18
   157dc:	andeq	r5, r1, r4, asr #18
   157e0:	andeq	r5, r1, r4, asr #18
   157e4:	andeq	r5, r1, r4, asr #18
   157e8:	andeq	r5, r1, r4, asr #18
   157ec:	andeq	r5, r1, r4, asr #18
   157f0:	andeq	r5, r1, r4, asr #18
   157f4:	andeq	r5, r1, r4, asr #18
   157f8:	andeq	r5, r1, r4, asr #18
   157fc:	andeq	r5, r1, r4, asr #18
   15800:	andeq	r5, r1, r4, asr #18
   15804:	andeq	r5, r1, r4, asr #18
   15808:	andeq	r5, r1, r8, asr #18
   1580c:	andeq	r5, r1, r8, asr #18
   15810:	andeq	r5, r1, r8, asr #18
   15814:	andeq	r5, r1, r8, asr #18
   15818:	andeq	r5, r1, r8, asr #18
   1581c:	andeq	r5, r1, r8, asr #18
   15820:	andeq	r5, r1, r8, asr #18
   15824:	andeq	r5, r1, r8, asr #18
   15828:	andeq	r5, r1, r8, asr #18
   1582c:	andeq	r5, r1, r8, asr #18
   15830:	andeq	r5, r1, r4, asr #18
   15834:	andeq	r5, r1, r4, asr #18
   15838:	andeq	r5, r1, r4, asr #18
   1583c:	andeq	r5, r1, r4, asr #18
   15840:	andeq	r5, r1, r4, asr #18
   15844:	andeq	r5, r1, r4, asr #18
   15848:	andeq	r5, r1, r4, asr #18
   1584c:	andeq	r5, r1, r8, asr #18
   15850:	andeq	r5, r1, r8, asr #18
   15854:	andeq	r5, r1, r8, asr #18
   15858:	andeq	r5, r1, r8, asr #18
   1585c:	andeq	r5, r1, r8, asr #18
   15860:	andeq	r5, r1, r8, asr #18
   15864:	andeq	r5, r1, r8, asr #18
   15868:	andeq	r5, r1, r8, asr #18
   1586c:	andeq	r5, r1, r8, asr #18
   15870:	andeq	r5, r1, r8, asr #18
   15874:	andeq	r5, r1, r8, asr #18
   15878:	andeq	r5, r1, r8, asr #18
   1587c:	andeq	r5, r1, r8, asr #18
   15880:	andeq	r5, r1, r8, asr #18
   15884:	andeq	r5, r1, r8, asr #18
   15888:	andeq	r5, r1, r8, asr #18
   1588c:	andeq	r5, r1, r8, asr #18
   15890:	andeq	r5, r1, r8, asr #18
   15894:	andeq	r5, r1, r8, asr #18
   15898:	andeq	r5, r1, r8, asr #18
   1589c:	andeq	r5, r1, r8, asr #18
   158a0:	andeq	r5, r1, r8, asr #18
   158a4:	andeq	r5, r1, r8, asr #18
   158a8:	andeq	r5, r1, r8, asr #18
   158ac:	andeq	r5, r1, r8, asr #18
   158b0:	andeq	r5, r1, r8, asr #18
   158b4:	andeq	r5, r1, r4, asr #18
   158b8:	andeq	r5, r1, r4, asr #18
   158bc:	andeq	r5, r1, r4, asr #18
   158c0:	andeq	r5, r1, r4, asr #18
   158c4:	andeq	r5, r1, r4, asr #18
   158c8:	andeq	r5, r1, r4, asr #18
   158cc:	andeq	r5, r1, r8, asr #18
   158d0:	andeq	r5, r1, r8, asr #18
   158d4:	andeq	r5, r1, r8, asr #18
   158d8:	andeq	r5, r1, r8, asr #18
   158dc:	andeq	r5, r1, r8, asr #18
   158e0:	andeq	r5, r1, r8, asr #18
   158e4:	andeq	r5, r1, r8, asr #18
   158e8:	andeq	r5, r1, r8, asr #18
   158ec:	andeq	r5, r1, r8, asr #18
   158f0:	andeq	r5, r1, r8, asr #18
   158f4:	andeq	r5, r1, r8, asr #18
   158f8:	andeq	r5, r1, r8, asr #18
   158fc:	andeq	r5, r1, r8, asr #18
   15900:	andeq	r5, r1, r8, asr #18
   15904:	andeq	r5, r1, r8, asr #18
   15908:	andeq	r5, r1, r8, asr #18
   1590c:	andeq	r5, r1, r8, asr #18
   15910:	andeq	r5, r1, r8, asr #18
   15914:	andeq	r5, r1, r8, asr #18
   15918:	andeq	r5, r1, r8, asr #18
   1591c:	andeq	r5, r1, r8, asr #18
   15920:	andeq	r5, r1, r8, asr #18
   15924:	andeq	r5, r1, r8, asr #18
   15928:	andeq	r5, r1, r8, asr #18
   1592c:	andeq	r5, r1, r8, asr #18
   15930:	andeq	r5, r1, r8, asr #18
   15934:	andeq	r5, r1, r4, asr #18
   15938:	andeq	r5, r1, r4, asr #18
   1593c:	andeq	r5, r1, r4, asr #18
   15940:	andeq	r5, r1, r4, asr #18
   15944:	bx	lr
   15948:	mov	r0, #0
   1594c:	bx	lr
   15950:	sub	r0, r0, #9
   15954:	cmp	r0, #23
   15958:	movhi	r0, #0
   1595c:	bxhi	lr
   15960:	bic	r0, r0, #-16777216	; 0xff000000
   15964:	movw	r1, #31
   15968:	movt	r1, #128	; 0x80
   1596c:	mov	r2, #1
   15970:	and	r0, r2, r1, lsr r0
   15974:	bx	lr
   15978:	sub	r1, r0, #65	; 0x41
   1597c:	mov	r0, #0
   15980:	cmp	r1, #26
   15984:	movwcc	r0, #1
   15988:	bx	lr
   1598c:	mov	r1, r0
   15990:	sub	r2, r0, #48	; 0x30
   15994:	mov	r0, #1
   15998:	cmp	r2, #22
   1599c:	bhi	159b4 <__assert_fail@plt+0x45e0>
   159a0:	mov	ip, #1
   159a4:	movw	r3, #1023	; 0x3ff
   159a8:	movt	r3, #126	; 0x7e
   159ac:	tst	r3, ip, lsl r2
   159b0:	bxne	lr
   159b4:	sub	r1, r1, #97	; 0x61
   159b8:	cmp	r1, #6
   159bc:	movcs	r0, #0
   159c0:	bxcs	lr
   159c4:	bx	lr
   159c8:	sub	r1, r0, #65	; 0x41
   159cc:	cmp	r1, #26
   159d0:	addcc	r0, r0, #32
   159d4:	bx	lr
   159d8:	sub	r1, r0, #97	; 0x61
   159dc:	cmp	r1, #26
   159e0:	subcc	r0, r0, #32
   159e4:	bx	lr
   159e8:	push	{r4, r5, r6, sl, fp, lr}
   159ec:	add	fp, sp, #16
   159f0:	mov	r4, r0
   159f4:	bl	11200 <__fpending@plt>
   159f8:	mov	r5, r0
   159fc:	mov	r0, r4
   15a00:	bl	1120c <ferror_unlocked@plt>
   15a04:	mov	r6, r0
   15a08:	mov	r0, r4
   15a0c:	bl	15a70 <__assert_fail@plt+0x469c>
   15a10:	cmp	r6, #0
   15a14:	beq	15a34 <__assert_fail@plt+0x4660>
   15a18:	mvn	r4, #0
   15a1c:	cmp	r0, #0
   15a20:	bne	15a68 <__assert_fail@plt+0x4694>
   15a24:	bl	112c0 <__errno_location@plt>
   15a28:	mov	r1, #0
   15a2c:	str	r1, [r0]
   15a30:	b	15a68 <__assert_fail@plt+0x4694>
   15a34:	cmp	r0, #0
   15a38:	mov	r4, r0
   15a3c:	mvnne	r4, #0
   15a40:	cmp	r5, #0
   15a44:	bne	15a68 <__assert_fail@plt+0x4694>
   15a48:	cmp	r0, #0
   15a4c:	beq	15a68 <__assert_fail@plt+0x4694>
   15a50:	bl	112c0 <__errno_location@plt>
   15a54:	ldr	r0, [r0]
   15a58:	subs	r4, r0, #9
   15a5c:	mvnne	r4, #0
   15a60:	mov	r0, r4
   15a64:	pop	{r4, r5, r6, sl, fp, pc}
   15a68:	mov	r0, r4
   15a6c:	pop	{r4, r5, r6, sl, fp, pc}
   15a70:	push	{r4, r5, fp, lr}
   15a74:	add	fp, sp, #8
   15a78:	sub	sp, sp, #8
   15a7c:	mov	r4, r0
   15a80:	bl	112fc <fileno@plt>
   15a84:	cmn	r0, #1
   15a88:	ble	15b00 <__assert_fail@plt+0x472c>
   15a8c:	mov	r0, r4
   15a90:	bl	11260 <__freading@plt>
   15a94:	cmp	r0, #0
   15a98:	beq	15ac4 <__assert_fail@plt+0x46f0>
   15a9c:	mov	r0, r4
   15aa0:	bl	112fc <fileno@plt>
   15aa4:	mov	r1, #1
   15aa8:	str	r1, [sp]
   15aac:	mov	r2, #0
   15ab0:	mov	r3, #0
   15ab4:	bl	111dc <lseek64@plt>
   15ab8:	and	r0, r0, r1
   15abc:	cmn	r0, #1
   15ac0:	beq	15b00 <__assert_fail@plt+0x472c>
   15ac4:	mov	r0, r4
   15ac8:	bl	15b10 <__assert_fail@plt+0x473c>
   15acc:	cmp	r0, #0
   15ad0:	beq	15b00 <__assert_fail@plt+0x472c>
   15ad4:	bl	112c0 <__errno_location@plt>
   15ad8:	ldr	r5, [r0]
   15adc:	mov	r0, r4
   15ae0:	bl	11320 <fclose@plt>
   15ae4:	cmp	r5, #0
   15ae8:	beq	15af8 <__assert_fail@plt+0x4724>
   15aec:	bl	112c0 <__errno_location@plt>
   15af0:	str	r5, [r0]
   15af4:	mvn	r0, #0
   15af8:	sub	sp, fp, #8
   15afc:	pop	{r4, r5, fp, pc}
   15b00:	mov	r0, r4
   15b04:	sub	sp, fp, #8
   15b08:	pop	{r4, r5, fp, lr}
   15b0c:	b	11320 <fclose@plt>
   15b10:	push	{r4, sl, fp, lr}
   15b14:	add	fp, sp, #8
   15b18:	mov	r4, r0
   15b1c:	cmp	r0, #0
   15b20:	beq	15b38 <__assert_fail@plt+0x4764>
   15b24:	mov	r0, r4
   15b28:	bl	11260 <__freading@plt>
   15b2c:	cmp	r0, #0
   15b30:	movne	r0, r4
   15b34:	blne	15b44 <__assert_fail@plt+0x4770>
   15b38:	mov	r0, r4
   15b3c:	pop	{r4, sl, fp, lr}
   15b40:	b	11134 <fflush@plt>
   15b44:	ldrb	r1, [r0, #1]
   15b48:	tst	r1, #1
   15b4c:	bxeq	lr
   15b50:	push	{fp, lr}
   15b54:	mov	fp, sp
   15b58:	sub	sp, sp, #8
   15b5c:	mov	r1, #1
   15b60:	str	r1, [sp]
   15b64:	mov	r2, #0
   15b68:	mov	r3, #0
   15b6c:	bl	15b78 <__assert_fail@plt+0x47a4>
   15b70:	mov	sp, fp
   15b74:	pop	{fp, pc}
   15b78:	push	{r4, r5, r6, r7, fp, lr}
   15b7c:	add	fp, sp, #16
   15b80:	sub	sp, sp, #8
   15b84:	mov	r5, r3
   15b88:	mov	r6, r2
   15b8c:	mov	r4, r0
   15b90:	ldr	r0, [r0, #4]
   15b94:	ldr	r1, [r4, #8]
   15b98:	cmp	r1, r0
   15b9c:	bne	15bb8 <__assert_fail@plt+0x47e4>
   15ba0:	ldrd	r0, [r4, #16]
   15ba4:	cmp	r1, r0
   15ba8:	bne	15bb8 <__assert_fail@plt+0x47e4>
   15bac:	ldr	r0, [r4, #36]	; 0x24
   15bb0:	cmp	r0, #0
   15bb4:	beq	15bd0 <__assert_fail@plt+0x47fc>
   15bb8:	mov	r0, r4
   15bbc:	mov	r2, r6
   15bc0:	mov	r3, r5
   15bc4:	sub	sp, fp, #16
   15bc8:	pop	{r4, r5, r6, r7, fp, lr}
   15bcc:	b	1132c <fseeko64@plt>
   15bd0:	ldr	r7, [fp, #8]
   15bd4:	mov	r0, r4
   15bd8:	bl	112fc <fileno@plt>
   15bdc:	str	r7, [sp]
   15be0:	mov	r2, r6
   15be4:	mov	r3, r5
   15be8:	bl	111dc <lseek64@plt>
   15bec:	and	r2, r0, r1
   15bf0:	cmn	r2, #1
   15bf4:	mvneq	r0, #0
   15bf8:	subeq	sp, fp, #16
   15bfc:	popeq	{r4, r5, r6, r7, fp, pc}
   15c00:	strd	r0, [r4, #80]	; 0x50
   15c04:	ldr	r0, [r4]
   15c08:	bic	r0, r0, #16
   15c0c:	str	r0, [r4]
   15c10:	mov	r0, #0
   15c14:	sub	sp, fp, #16
   15c18:	pop	{r4, r5, r6, r7, fp, pc}
   15c1c:	push	{fp, lr}
   15c20:	mov	fp, sp
   15c24:	bl	112c0 <__errno_location@plt>
   15c28:	mov	r1, #12
   15c2c:	str	r1, [r0]
   15c30:	mov	r0, #0
   15c34:	pop	{fp, pc}
   15c38:	b	15640 <__assert_fail@plt+0x426c>
   15c3c:	cmp	r1, #0
   15c40:	orreq	r1, r1, #1
   15c44:	b	15670 <__assert_fail@plt+0x429c>
   15c48:	b	155ec <__assert_fail@plt+0x4218>
   15c4c:	clz	r3, r2
   15c50:	lsr	ip, r3, #5
   15c54:	clz	r3, r1
   15c58:	lsr	r3, r3, #5
   15c5c:	orrs	r3, r3, ip
   15c60:	movwne	r1, #1
   15c64:	movwne	r2, #1
   15c68:	b	15f70 <__assert_fail@plt+0x4b9c>
   15c6c:	push	{r4, r5, r6, sl, fp, lr}
   15c70:	add	fp, sp, #16
   15c74:	mov	r4, r1
   15c78:	mov	r5, r0
   15c7c:	mov	r0, #0
   15c80:	strb	r0, [r2, #20]
   15c84:	add	r6, r2, #19
   15c88:	mov	r0, r5
   15c8c:	mov	r1, r4
   15c90:	mov	r2, #10
   15c94:	mov	r3, #0
   15c98:	bl	160b8 <__assert_fail@plt+0x4ce4>
   15c9c:	add	r2, r0, r0, lsl #2
   15ca0:	sub	r2, r5, r2, lsl #1
   15ca4:	orr	r2, r2, #48	; 0x30
   15ca8:	strb	r2, [r6], #-1
   15cac:	rsbs	r2, r5, #9
   15cb0:	rscs	r2, r4, #0
   15cb4:	mov	r5, r0
   15cb8:	mov	r4, r1
   15cbc:	bcc	15c88 <__assert_fail@plt+0x48b4>
   15cc0:	add	r0, r6, #1
   15cc4:	pop	{r4, r5, r6, sl, fp, pc}
   15cc8:	push	{fp, lr}
   15ccc:	mov	fp, sp
   15cd0:	mov	r0, #14
   15cd4:	bl	11368 <nl_langinfo@plt>
   15cd8:	movw	r1, #25420	; 0x634c
   15cdc:	movt	r1, #1
   15ce0:	cmp	r0, #0
   15ce4:	movne	r1, r0
   15ce8:	ldrb	r2, [r1]
   15cec:	movw	r0, #28075	; 0x6dab
   15cf0:	movt	r0, #1
   15cf4:	cmp	r2, #0
   15cf8:	movne	r0, r1
   15cfc:	pop	{fp, pc}
   15d00:	push	{r4, r5, r6, r7, fp, lr}
   15d04:	add	fp, sp, #16
   15d08:	sub	sp, sp, #8
   15d0c:	mov	r7, r2
   15d10:	mov	r4, r1
   15d14:	add	r5, sp, #4
   15d18:	cmp	r0, #0
   15d1c:	movne	r5, r0
   15d20:	mov	r0, r5
   15d24:	bl	11218 <mbrtowc@plt>
   15d28:	mov	r6, r0
   15d2c:	cmp	r7, #0
   15d30:	beq	15d54 <__assert_fail@plt+0x4980>
   15d34:	cmn	r6, #2
   15d38:	bcc	15d54 <__assert_fail@plt+0x4980>
   15d3c:	mov	r0, #0
   15d40:	bl	15fac <__assert_fail@plt+0x4bd8>
   15d44:	cmp	r0, #0
   15d48:	ldrbeq	r0, [r4]
   15d4c:	streq	r0, [r5]
   15d50:	moveq	r6, #1
   15d54:	mov	r0, r6
   15d58:	sub	sp, fp, #16
   15d5c:	pop	{r4, r5, r6, r7, fp, pc}
   15d60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d64:	add	fp, sp, #28
   15d68:	sub	sp, sp, #12
   15d6c:	mov	r4, r2
   15d70:	mov	sl, r1
   15d74:	cmp	r0, #0
   15d78:	beq	15e10 <__assert_fail@plt+0x4a3c>
   15d7c:	mov	r7, r0
   15d80:	mov	r0, #10
   15d84:	str	r0, [sp, #8]
   15d88:	mov	r0, #0
   15d8c:	mov	r1, #10
   15d90:	bl	15f40 <__assert_fail@plt+0x4b6c>
   15d94:	mvn	r9, #0
   15d98:	cmp	r0, #0
   15d9c:	beq	15f34 <__assert_fail@plt+0x4b60>
   15da0:	mov	r5, r0
   15da4:	str	r4, [sp, #4]
   15da8:	add	r4, sp, #8
   15dac:	ldr	r8, [sp, #8]
   15db0:	mov	r0, r7
   15db4:	mov	r1, sl
   15db8:	mov	r2, r5
   15dbc:	mov	r3, r4
   15dc0:	bl	112d8 <getgrouplist@plt>
   15dc4:	mov	r6, r0
   15dc8:	cmn	r0, #1
   15dcc:	bgt	15de0 <__assert_fail@plt+0x4a0c>
   15dd0:	ldr	r0, [sp, #8]
   15dd4:	cmp	r8, r0
   15dd8:	lsleq	r0, r0, #1
   15ddc:	streq	r0, [sp, #8]
   15de0:	ldr	r1, [sp, #8]
   15de4:	mov	r0, r5
   15de8:	bl	15f40 <__assert_fail@plt+0x4b6c>
   15dec:	cmp	r0, #0
   15df0:	beq	15ed8 <__assert_fail@plt+0x4b04>
   15df4:	cmp	r6, #0
   15df8:	mov	r5, r0
   15dfc:	blt	15dac <__assert_fail@plt+0x49d8>
   15e00:	ldr	r1, [sp, #4]
   15e04:	str	r0, [r1]
   15e08:	ldr	r9, [sp, #8]
   15e0c:	b	15f34 <__assert_fail@plt+0x4b60>
   15e10:	mov	r0, #0
   15e14:	mov	r1, #0
   15e18:	bl	11380 <getgroups@plt>
   15e1c:	str	r0, [sp, #8]
   15e20:	cmn	r0, #1
   15e24:	ble	15ee4 <__assert_fail@plt+0x4b10>
   15e28:	cmn	sl, #1
   15e2c:	bne	15e38 <__assert_fail@plt+0x4a64>
   15e30:	cmp	r0, #0
   15e34:	bne	15e40 <__assert_fail@plt+0x4a6c>
   15e38:	add	r0, r0, #1
   15e3c:	str	r0, [sp, #8]
   15e40:	ldr	r1, [sp, #8]
   15e44:	mov	r0, #0
   15e48:	bl	15f40 <__assert_fail@plt+0x4b6c>
   15e4c:	mvn	r9, #0
   15e50:	cmp	r0, #0
   15e54:	beq	15f34 <__assert_fail@plt+0x4b60>
   15e58:	mov	r7, r0
   15e5c:	add	r1, sl, #1
   15e60:	cmn	sl, #1
   15e64:	movwne	r1, #1
   15e68:	ldr	r0, [sp, #8]
   15e6c:	sub	r0, r0, r1
   15e70:	add	r1, r7, r1, lsl #2
   15e74:	bl	11380 <getgroups@plt>
   15e78:	cmn	r0, #1
   15e7c:	ble	15f24 <__assert_fail@plt+0x4b50>
   15e80:	cmn	sl, #1
   15e84:	strne	sl, [r7]
   15e88:	addne	r0, r0, #1
   15e8c:	str	r7, [r4]
   15e90:	cmp	r0, #2
   15e94:	blt	15f30 <__assert_fail@plt+0x4b5c>
   15e98:	add	r1, r7, r0, lsl #2
   15e9c:	mov	r2, r7
   15ea0:	ldr	r3, [r2], #4
   15ea4:	mov	r9, r0
   15ea8:	ldr	r0, [r2]
   15eac:	cmp	r0, r3
   15eb0:	ldrne	r6, [r7]
   15eb4:	cmpne	r0, r6
   15eb8:	bne	15ec4 <__assert_fail@plt+0x4af0>
   15ebc:	sub	r9, r9, #1
   15ec0:	b	15ec8 <__assert_fail@plt+0x4af4>
   15ec4:	str	r0, [r7, #4]!
   15ec8:	add	r2, r2, #4
   15ecc:	cmp	r2, r1
   15ed0:	bcc	15ea8 <__assert_fail@plt+0x4ad4>
   15ed4:	b	15f34 <__assert_fail@plt+0x4b60>
   15ed8:	mov	r0, r5
   15edc:	bl	122a8 <__assert_fail@plt+0xed4>
   15ee0:	b	15f34 <__assert_fail@plt+0x4b60>
   15ee4:	bl	112c0 <__errno_location@plt>
   15ee8:	ldr	r0, [r0]
   15eec:	mvn	r9, #0
   15ef0:	cmp	r0, #38	; 0x26
   15ef4:	bne	15f34 <__assert_fail@plt+0x4b60>
   15ef8:	mov	r0, #0
   15efc:	mov	r1, #1
   15f00:	bl	15f40 <__assert_fail@plt+0x4b6c>
   15f04:	cmp	r0, #0
   15f08:	beq	15f34 <__assert_fail@plt+0x4b60>
   15f0c:	str	r0, [r4]
   15f10:	str	sl, [r0]
   15f14:	add	r9, sl, #1
   15f18:	cmn	sl, #1
   15f1c:	movwne	r9, #1
   15f20:	b	15f34 <__assert_fail@plt+0x4b60>
   15f24:	mov	r0, r7
   15f28:	bl	122a8 <__assert_fail@plt+0xed4>
   15f2c:	b	15f34 <__assert_fail@plt+0x4b60>
   15f30:	mov	r9, r0
   15f34:	mov	r0, r9
   15f38:	sub	sp, fp, #28
   15f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f40:	push	{fp, lr}
   15f44:	mov	fp, sp
   15f48:	cmp	r1, #536870912	; 0x20000000
   15f4c:	bcc	15f64 <__assert_fail@plt+0x4b90>
   15f50:	bl	112c0 <__errno_location@plt>
   15f54:	mov	r1, #12
   15f58:	str	r1, [r0]
   15f5c:	mov	r0, #0
   15f60:	pop	{fp, pc}
   15f64:	lsl	r1, r1, #2
   15f68:	bl	15670 <__assert_fail@plt+0x429c>
   15f6c:	pop	{fp, pc}
   15f70:	cmp	r2, #0
   15f74:	beq	15fa4 <__assert_fail@plt+0x4bd0>
   15f78:	mvn	r3, #0
   15f7c:	udiv	r3, r3, r2
   15f80:	cmp	r3, r1
   15f84:	bcs	15fa4 <__assert_fail@plt+0x4bd0>
   15f88:	push	{fp, lr}
   15f8c:	mov	fp, sp
   15f90:	bl	112c0 <__errno_location@plt>
   15f94:	mov	r1, #12
   15f98:	str	r1, [r0]
   15f9c:	mov	r0, #0
   15fa0:	pop	{fp, pc}
   15fa4:	mul	r1, r2, r1
   15fa8:	b	15670 <__assert_fail@plt+0x429c>
   15fac:	push	{r4, sl, fp, lr}
   15fb0:	add	fp, sp, #8
   15fb4:	sub	sp, sp, #264	; 0x108
   15fb8:	add	r1, sp, #7
   15fbc:	movw	r2, #257	; 0x101
   15fc0:	bl	16010 <__assert_fail@plt+0x4c3c>
   15fc4:	mov	r4, #0
   15fc8:	cmp	r0, #0
   15fcc:	bne	16004 <__assert_fail@plt+0x4c30>
   15fd0:	add	r0, sp, #7
   15fd4:	movw	r1, #28081	; 0x6db1
   15fd8:	movt	r1, #1
   15fdc:	bl	1111c <strcmp@plt>
   15fe0:	cmp	r0, #0
   15fe4:	beq	16004 <__assert_fail@plt+0x4c30>
   15fe8:	add	r0, sp, #7
   15fec:	movw	r1, #28083	; 0x6db3
   15ff0:	movt	r1, #1
   15ff4:	bl	1111c <strcmp@plt>
   15ff8:	mov	r4, r0
   15ffc:	cmp	r0, #0
   16000:	movwne	r4, #1
   16004:	mov	r0, r4
   16008:	sub	sp, fp, #8
   1600c:	pop	{r4, sl, fp, pc}
   16010:	b	16014 <__assert_fail@plt+0x4c40>
   16014:	push	{r4, r5, r6, r7, fp, lr}
   16018:	add	fp, sp, #16
   1601c:	mov	r6, r2
   16020:	mov	r4, r1
   16024:	bl	160b0 <__assert_fail@plt+0x4cdc>
   16028:	cmp	r0, #0
   1602c:	beq	1605c <__assert_fail@plt+0x4c88>
   16030:	mov	r7, r0
   16034:	bl	112a8 <strlen@plt>
   16038:	cmp	r0, r6
   1603c:	bcs	1607c <__assert_fail@plt+0x4ca8>
   16040:	add	r2, r0, #1
   16044:	mov	r0, r4
   16048:	mov	r1, r7
   1604c:	bl	11158 <memcpy@plt>
   16050:	mov	r5, #0
   16054:	mov	r0, r5
   16058:	pop	{r4, r5, r6, r7, fp, pc}
   1605c:	mov	r5, #22
   16060:	cmp	r6, #0
   16064:	movne	r0, #0
   16068:	strbne	r0, [r4]
   1606c:	movne	r0, r5
   16070:	popne	{r4, r5, r6, r7, fp, pc}
   16074:	mov	r0, r5
   16078:	pop	{r4, r5, r6, r7, fp, pc}
   1607c:	mov	r5, #34	; 0x22
   16080:	cmp	r6, #0
   16084:	beq	160a4 <__assert_fail@plt+0x4cd0>
   16088:	sub	r6, r6, #1
   1608c:	mov	r0, r4
   16090:	mov	r1, r7
   16094:	mov	r2, r6
   16098:	bl	11158 <memcpy@plt>
   1609c:	mov	r0, #0
   160a0:	strb	r0, [r4, r6]
   160a4:	mov	r0, r5
   160a8:	pop	{r4, r5, r6, r7, fp, pc}
   160ac:	b	160b0 <__assert_fail@plt+0x4cdc>
   160b0:	mov	r1, #0
   160b4:	b	11344 <setlocale@plt>
   160b8:	cmp	r3, #0
   160bc:	cmpeq	r2, #0
   160c0:	bne	160d8 <__assert_fail@plt+0x4d04>
   160c4:	cmp	r1, #0
   160c8:	cmpeq	r0, #0
   160cc:	mvnne	r1, #0
   160d0:	mvnne	r0, #0
   160d4:	b	160f4 <__assert_fail@plt+0x4d20>
   160d8:	sub	sp, sp, #8
   160dc:	push	{sp, lr}
   160e0:	bl	16104 <__assert_fail@plt+0x4d30>
   160e4:	ldr	lr, [sp, #4]
   160e8:	add	sp, sp, #8
   160ec:	pop	{r2, r3}
   160f0:	bx	lr
   160f4:	push	{r1, lr}
   160f8:	mov	r0, #8
   160fc:	bl	11104 <raise@plt>
   16100:	pop	{r1, pc}
   16104:	cmp	r1, r3
   16108:	cmpeq	r0, r2
   1610c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16110:	mov	r4, r0
   16114:	movcc	r0, #0
   16118:	mov	r5, r1
   1611c:	ldr	lr, [sp, #36]	; 0x24
   16120:	movcc	r1, r0
   16124:	bcc	16220 <__assert_fail@plt+0x4e4c>
   16128:	cmp	r3, #0
   1612c:	clzeq	ip, r2
   16130:	clzne	ip, r3
   16134:	addeq	ip, ip, #32
   16138:	cmp	r5, #0
   1613c:	clzeq	r1, r4
   16140:	addeq	r1, r1, #32
   16144:	clzne	r1, r5
   16148:	sub	ip, ip, r1
   1614c:	sub	sl, ip, #32
   16150:	lsl	r9, r3, ip
   16154:	rsb	fp, ip, #32
   16158:	orr	r9, r9, r2, lsl sl
   1615c:	orr	r9, r9, r2, lsr fp
   16160:	lsl	r8, r2, ip
   16164:	cmp	r5, r9
   16168:	cmpeq	r4, r8
   1616c:	movcc	r0, #0
   16170:	movcc	r1, r0
   16174:	bcc	16190 <__assert_fail@plt+0x4dbc>
   16178:	mov	r0, #1
   1617c:	subs	r4, r4, r8
   16180:	lsl	r1, r0, sl
   16184:	orr	r1, r1, r0, lsr fp
   16188:	lsl	r0, r0, ip
   1618c:	sbc	r5, r5, r9
   16190:	cmp	ip, #0
   16194:	beq	16220 <__assert_fail@plt+0x4e4c>
   16198:	lsr	r6, r8, #1
   1619c:	orr	r6, r6, r9, lsl #31
   161a0:	lsr	r7, r9, #1
   161a4:	mov	r2, ip
   161a8:	b	161cc <__assert_fail@plt+0x4df8>
   161ac:	subs	r3, r4, r6
   161b0:	sbc	r8, r5, r7
   161b4:	adds	r3, r3, r3
   161b8:	adc	r8, r8, r8
   161bc:	adds	r4, r3, #1
   161c0:	adc	r5, r8, #0
   161c4:	subs	r2, r2, #1
   161c8:	beq	161e8 <__assert_fail@plt+0x4e14>
   161cc:	cmp	r5, r7
   161d0:	cmpeq	r4, r6
   161d4:	bcs	161ac <__assert_fail@plt+0x4dd8>
   161d8:	adds	r4, r4, r4
   161dc:	adc	r5, r5, r5
   161e0:	subs	r2, r2, #1
   161e4:	bne	161cc <__assert_fail@plt+0x4df8>
   161e8:	lsr	r3, r4, ip
   161ec:	orr	r3, r3, r5, lsl fp
   161f0:	lsr	r2, r5, ip
   161f4:	orr	r3, r3, r5, lsr sl
   161f8:	adds	r0, r0, r4
   161fc:	mov	r4, r3
   16200:	lsl	r3, r2, ip
   16204:	orr	r3, r3, r4, lsl sl
   16208:	lsl	ip, r4, ip
   1620c:	orr	r3, r3, r4, lsr fp
   16210:	adc	r1, r1, r5
   16214:	subs	r0, r0, ip
   16218:	mov	r5, r2
   1621c:	sbc	r1, r1, r3
   16220:	cmp	lr, #0
   16224:	strdne	r4, [lr]
   16228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1622c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16230:	mov	r7, r0
   16234:	ldr	r6, [pc, #72]	; 16284 <__assert_fail@plt+0x4eb0>
   16238:	ldr	r5, [pc, #72]	; 16288 <__assert_fail@plt+0x4eb4>
   1623c:	add	r6, pc, r6
   16240:	add	r5, pc, r5
   16244:	sub	r6, r6, r5
   16248:	mov	r8, r1
   1624c:	mov	r9, r2
   16250:	bl	110c0 <calloc@plt-0x20>
   16254:	asrs	r6, r6, #2
   16258:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1625c:	mov	r4, #0
   16260:	add	r4, r4, #1
   16264:	ldr	r3, [r5], #4
   16268:	mov	r2, r9
   1626c:	mov	r1, r8
   16270:	mov	r0, r7
   16274:	blx	r3
   16278:	cmp	r6, r4
   1627c:	bne	16260 <__assert_fail@plt+0x4e8c>
   16280:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16284:	andeq	r0, r1, r8, asr #25
   16288:	andeq	r0, r1, r0, asr #25
   1628c:	bx	lr
   16290:	ldr	r3, [pc, #12]	; 162a4 <__assert_fail@plt+0x4ed0>
   16294:	mov	r1, #0
   16298:	add	r3, pc, r3
   1629c:	ldr	r2, [r3]
   162a0:	b	112cc <__cxa_atexit@plt>
   162a4:	andeq	r0, r1, r4, ror lr

Disassembly of section .fini:

000162a8 <.fini>:
   162a8:	push	{r3, lr}
   162ac:	pop	{r3, pc}
