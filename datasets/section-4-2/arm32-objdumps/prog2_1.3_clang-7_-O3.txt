
../repos/prog2/1.3:     file format elf32-littlearm


Disassembly of section .init:

000106d8 <.init>:
   106d8:	push	{r3, lr}
   106dc:	bl	107ac <_start@@Base+0x3c>
   106e0:	pop	{r3, pc}

Disassembly of section .plt:

000106e4 <printf@plt-0x14>:
   106e4:	push	{lr}		; (str lr, [sp, #-4]!)
   106e8:	ldr	lr, [pc, #4]	; 106f4 <printf@plt-0x4>
   106ec:	add	lr, pc, lr
   106f0:	ldr	pc, [lr, #8]!
   106f4:	andeq	r0, r1, ip, lsl #18

000106f8 <printf@plt>:
   106f8:	add	ip, pc, #0, 12
   106fc:	add	ip, ip, #16, 20	; 0x10000
   10700:	ldr	pc, [ip, #2316]!	; 0x90c

00010704 <fopen@plt>:
   10704:	add	ip, pc, #0, 12
   10708:	add	ip, ip, #16, 20	; 0x10000
   1070c:	ldr	pc, [ip, #2308]!	; 0x904

00010710 <strcpy@plt>:
   10710:	add	ip, pc, #0, 12
   10714:	add	ip, ip, #16, 20	; 0x10000
   10718:	ldr	pc, [ip, #2300]!	; 0x8fc

0001071c <__libc_start_main@plt>:
   1071c:	add	ip, pc, #0, 12
   10720:	add	ip, ip, #16, 20	; 0x10000
   10724:	ldr	pc, [ip, #2292]!	; 0x8f4

00010728 <__gmon_start__@plt>:
   10728:	add	ip, pc, #0, 12
   1072c:	add	ip, ip, #16, 20	; 0x10000
   10730:	ldr	pc, [ip, #2284]!	; 0x8ec

00010734 <memset@plt>:
   10734:	add	ip, pc, #0, 12
   10738:	add	ip, ip, #16, 20	; 0x10000
   1073c:	ldr	pc, [ip, #2276]!	; 0x8e4

00010740 <fclose@plt>:
   10740:	add	ip, pc, #0, 12
   10744:	add	ip, ip, #16, 20	; 0x10000
   10748:	ldr	pc, [ip, #2268]!	; 0x8dc

0001074c <fseek@plt>:
   1074c:	add	ip, pc, #0, 12
   10750:	add	ip, ip, #16, 20	; 0x10000
   10754:	ldr	pc, [ip, #2260]!	; 0x8d4

00010758 <abort@plt>:
   10758:	add	ip, pc, #0, 12
   1075c:	add	ip, ip, #16, 20	; 0x10000
   10760:	ldr	pc, [ip, #2252]!	; 0x8cc

00010764 <getc@plt>:
   10764:	add	ip, pc, #0, 12
   10768:	add	ip, ip, #16, 20	; 0x10000
   1076c:	ldr	pc, [ip, #2244]!	; 0x8c4

Disassembly of section .text:

00010770 <_start@@Base>:
   10770:	mov	fp, #0
   10774:	mov	lr, #0
   10778:	pop	{r1}		; (ldr r1, [sp], #4)
   1077c:	mov	r2, sp
   10780:	push	{r2}		; (str r2, [sp, #-4]!)
   10784:	push	{r0}		; (str r0, [sp, #-4]!)
   10788:	ldr	ip, [pc, #16]	; 107a0 <_start@@Base+0x30>
   1078c:	push	{ip}		; (str ip, [sp, #-4]!)
   10790:	ldr	r0, [pc, #12]	; 107a4 <_start@@Base+0x34>
   10794:	ldr	r3, [pc, #12]	; 107a8 <_start@@Base+0x38>
   10798:	bl	1071c <__libc_start_main@plt>
   1079c:	bl	10758 <abort@plt>
   107a0:	muleq	r1, ip, sl
   107a4:	andeq	r0, r1, r4, lsl #17
   107a8:	andeq	r0, r1, ip, lsr sl
   107ac:	ldr	r3, [pc, #20]	; 107c8 <_start@@Base+0x58>
   107b0:	ldr	r2, [pc, #20]	; 107cc <_start@@Base+0x5c>
   107b4:	add	r3, pc, r3
   107b8:	ldr	r2, [r3, r2]
   107bc:	cmp	r2, #0
   107c0:	bxeq	lr
   107c4:	b	10728 <__gmon_start__@plt>
   107c8:	andeq	r0, r1, r4, asr #16
   107cc:	andeq	r0, r0, r4, lsr r0
   107d0:	ldr	r0, [pc, #24]	; 107f0 <_start@@Base+0x80>
   107d4:	ldr	r3, [pc, #24]	; 107f4 <_start@@Base+0x84>
   107d8:	cmp	r3, r0
   107dc:	bxeq	lr
   107e0:	ldr	r3, [pc, #16]	; 107f8 <_start@@Base+0x88>
   107e4:	cmp	r3, #0
   107e8:	bxeq	lr
   107ec:	bx	r3
   107f0:	andeq	r1, r2, r0, asr #32
   107f4:	andeq	r1, r2, r0, asr #32
   107f8:	andeq	r0, r0, r0
   107fc:	ldr	r0, [pc, #36]	; 10828 <_start@@Base+0xb8>
   10800:	ldr	r1, [pc, #36]	; 1082c <_start@@Base+0xbc>
   10804:	sub	r1, r1, r0
   10808:	asr	r1, r1, #2
   1080c:	add	r1, r1, r1, lsr #31
   10810:	asrs	r1, r1, #1
   10814:	bxeq	lr
   10818:	ldr	r3, [pc, #16]	; 10830 <_start@@Base+0xc0>
   1081c:	cmp	r3, #0
   10820:	bxeq	lr
   10824:	bx	r3
   10828:	andeq	r1, r2, r0, asr #32
   1082c:	andeq	r1, r2, r0, asr #32
   10830:	andeq	r0, r0, r0
   10834:	push	{r4, lr}
   10838:	ldr	r4, [pc, #24]	; 10858 <_start@@Base+0xe8>
   1083c:	ldrb	r3, [r4]
   10840:	cmp	r3, #0
   10844:	popne	{r4, pc}
   10848:	bl	107d0 <_start@@Base+0x60>
   1084c:	mov	r3, #1
   10850:	strb	r3, [r4]
   10854:	pop	{r4, pc}
   10858:	andeq	r1, r2, r0, asr #32
   1085c:	b	107fc <_start@@Base+0x8c>

00010860 <esvaziastring@@Base>:
   10860:	cmp	r1, #1
   10864:	bxlt	lr
   10868:	push	{fp, lr}
   1086c:	mov	fp, sp
   10870:	mov	r2, r1
   10874:	mov	r1, #0
   10878:	bl	10734 <memset@plt>
   1087c:	pop	{fp, lr}
   10880:	bx	lr

00010884 <main@@Base>:
   10884:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10888:	add	fp, sp, #28
   1088c:	sub	sp, sp, #4
   10890:	vpush	{d8-d9}
   10894:	sub	sp, sp, #216	; 0xd8
   10898:	sub	sp, sp, #2048	; 0x800
   1089c:	movw	r0, #2732	; 0xaac
   108a0:	movw	r1, #2754	; 0xac2
   108a4:	movt	r0, #1
   108a8:	movt	r1, #1
   108ac:	bl	10704 <fopen@plt>
   108b0:	movw	r8, #2756	; 0xac4
   108b4:	mov	r4, r0
   108b8:	sub	r5, fp, #256	; 0x100
   108bc:	mov	sl, #195	; 0xc3
   108c0:	vmov.i32	q4, #0	; 0x00000000
   108c4:	mov	r9, #0
   108c8:	movt	r8, #1
   108cc:	b	10924 <main@@Base+0xa0>
   108d0:	mov	r0, #0
   108d4:	mov	r1, r5
   108d8:	strb	r0, [r5, r6]
   108dc:	add	r6, r7, #205	; 0xcd
   108e0:	mov	r0, r6
   108e4:	bl	10710 <strcpy@plt>
   108e8:	add	r0, r5, #48	; 0x30
   108ec:	mov	r1, #64	; 0x40
   108f0:	mov	r2, r7
   108f4:	vst1.64	{d8-d9}, [r0]
   108f8:	add	r0, r5, #32
   108fc:	vst1.64	{d8-d9}, [r0]
   10900:	add	r0, r5, #16
   10904:	vst1.64	{d8-d9}, [r0]
   10908:	mov	r0, r5
   1090c:	vst1.64	{d8-d9}, [r0], r1
   10910:	mov	r1, r6
   10914:	vst1.64	{d8-d9}, [r0]
   10918:	mov	r0, r8
   1091c:	bl	106f8 <printf@plt>
   10920:	add	r9, r9, #1
   10924:	mov	r0, r4
   10928:	bl	10764 <getc@plt>
   1092c:	cmp	r0, #60	; 0x3c
   10930:	bne	10a18 <main@@Base+0x194>
   10934:	mov	r0, r4
   10938:	bl	10764 <getc@plt>
   1093c:	cmp	r0, #97	; 0x61
   10940:	bne	10924 <main@@Base+0xa0>
   10944:	mov	r0, r5
   10948:	mov	r1, #0
   1094c:	mov	r2, #200	; 0xc8
   10950:	bl	10734 <memset@plt>
   10954:	mov	r0, r4
   10958:	mov	r1, #7
   1095c:	mov	r2, #1
   10960:	bl	1074c <fseek@plt>
   10964:	mov	r0, r4
   10968:	bl	10764 <getc@plt>
   1096c:	cmp	r0, #34	; 0x22
   10970:	mov	r7, r5
   10974:	beq	10990 <main@@Base+0x10c>
   10978:	mov	r7, r5
   1097c:	strb	r0, [r7], #1
   10980:	mov	r0, r4
   10984:	bl	10764 <getc@plt>
   10988:	cmp	r0, #34	; 0x22
   1098c:	bne	1097c <main@@Base+0xf8>
   10990:	mov	r6, #0
   10994:	add	r0, sp, #4
   10998:	movw	r1, #410	; 0x19a
   1099c:	strb	r6, [r7]
   109a0:	mla	r7, r9, r1, r0
   109a4:	mov	r1, r5
   109a8:	mov	r0, r7
   109ac:	bl	10710 <strcpy@plt>
   109b0:	mov	r0, r5
   109b4:	mov	r1, #0
   109b8:	mov	r2, #200	; 0xc8
   109bc:	bl	10734 <memset@plt>
   109c0:	mov	r0, r4
   109c4:	mov	r1, #1
   109c8:	mov	r2, #1
   109cc:	bl	1074c <fseek@plt>
   109d0:	mov	r0, r4
   109d4:	bl	10764 <getc@plt>
   109d8:	cmp	r0, #225	; 0xe1
   109dc:	bne	109fc <main@@Base+0x178>
   109e0:	b	10a08 <main@@Base+0x184>
   109e4:	strb	r0, [r5, r6]
   109e8:	add	r6, r6, #1
   109ec:	mov	r0, r4
   109f0:	bl	10764 <getc@plt>
   109f4:	cmp	r0, #225	; 0xe1
   109f8:	beq	10a08 <main@@Base+0x184>
   109fc:	cmp	r0, #60	; 0x3c
   10a00:	bne	109e4 <main@@Base+0x160>
   10a04:	b	108d0 <main@@Base+0x4c>
   10a08:	strb	sl, [r5, r6]
   10a0c:	add	r6, r6, #1
   10a10:	mov	r0, #161	; 0xa1
   10a14:	b	109e4 <main@@Base+0x160>
   10a18:	cmn	r0, #1
   10a1c:	bne	10924 <main@@Base+0xa0>
   10a20:	mov	r0, r4
   10a24:	bl	10740 <fclose@plt>
   10a28:	mov	r0, #0
   10a2c:	sub	sp, fp, #48	; 0x30
   10a30:	vpop	{d8-d9}
   10a34:	add	sp, sp, #4
   10a38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010a3c <__libc_csu_init@@Base>:
   10a3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a40:	mov	r7, r0
   10a44:	ldr	r6, [pc, #72]	; 10a94 <__libc_csu_init@@Base+0x58>
   10a48:	ldr	r5, [pc, #72]	; 10a98 <__libc_csu_init@@Base+0x5c>
   10a4c:	add	r6, pc, r6
   10a50:	add	r5, pc, r5
   10a54:	sub	r6, r6, r5
   10a58:	mov	r8, r1
   10a5c:	mov	r9, r2
   10a60:	bl	106d8 <printf@plt-0x20>
   10a64:	asrs	r6, r6, #2
   10a68:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a6c:	mov	r4, #0
   10a70:	add	r4, r4, #1
   10a74:	ldr	r3, [r5], #4
   10a78:	mov	r2, r9
   10a7c:	mov	r1, r8
   10a80:	mov	r0, r7
   10a84:	blx	r3
   10a88:	cmp	r6, r4
   10a8c:	bne	10a70 <__libc_csu_init@@Base+0x34>
   10a90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a94:			; <UNDEFINED> instruction: 0x000104b8
   10a98:			; <UNDEFINED> instruction: 0x000104b0

00010a9c <__libc_csu_fini@@Base>:
   10a9c:	bx	lr

Disassembly of section .fini:

00010aa0 <.fini>:
   10aa0:	push	{r3, lr}
   10aa4:	pop	{r3, pc}
