
../repos/eddieantonio-ocreval-3ab279a/nonstopacc/nonstopacc:     file format elf32-littlearm


Disassembly of section .init:

000109cc <.init>:
   109cc:	push	{r3, lr}
   109d0:	bl	10be4 <__assert_fail@plt+0x48>
   109d4:	pop	{r3, pc}

Disassembly of section .plt:

000109d8 <calloc@plt-0x14>:
   109d8:	push	{lr}		; (str lr, [sp, #-4]!)
   109dc:	ldr	lr, [pc, #4]	; 109e8 <calloc@plt-0x4>
   109e0:	add	lr, pc, lr
   109e4:	ldr	pc, [lr, #8]!
   109e8:	andeq	r6, r1, r8, lsl r6

000109ec <calloc@plt>:
   109ec:	add	ip, pc, #0, 12
   109f0:	add	ip, ip, #90112	; 0x16000
   109f4:	ldr	pc, [ip, #1560]!	; 0x618

000109f8 <strcmp@plt>:
   109f8:	add	ip, pc, #0, 12
   109fc:	add	ip, ip, #90112	; 0x16000
   10a00:	ldr	pc, [ip, #1552]!	; 0x610

00010a04 <strtol@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #90112	; 0x16000
   10a0c:	ldr	pc, [ip, #1544]!	; 0x608

00010a10 <printf@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #90112	; 0x16000
   10a18:	ldr	pc, [ip, #1536]!	; 0x600

00010a1c <fopen@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #90112	; 0x16000
   10a24:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a28 <free@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #90112	; 0x16000
   10a30:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a34 <utf8proc_get_property@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #90112	; 0x16000
   10a3c:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a40 <fgets@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #90112	; 0x16000
   10a48:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a4c <utf8proc_encode_char@plt>:
   10a4c:	add	ip, pc, #0, 12
   10a50:	add	ip, ip, #90112	; 0x16000
   10a54:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a58 <strdup@plt>:
   10a58:	add	ip, pc, #0, 12
   10a5c:	add	ip, ip, #90112	; 0x16000
   10a60:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a64 <rewind@plt>:
   10a64:	add	ip, pc, #0, 12
   10a68:	add	ip, ip, #90112	; 0x16000
   10a6c:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a70 <unlink@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #90112	; 0x16000
   10a78:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a7c <utf8proc_tolower@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #90112	; 0x16000
   10a84:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a88 <__xstat@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #90112	; 0x16000
   10a90:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a94 <fwrite@plt>:
   10a94:	add	ip, pc, #0, 12
   10a98:	add	ip, ip, #90112	; 0x16000
   10a9c:	ldr	pc, [ip, #1448]!	; 0x5a8

00010aa0 <fread@plt>:
   10aa0:	add	ip, pc, #0, 12
   10aa4:	add	ip, ip, #90112	; 0x16000
   10aa8:	ldr	pc, [ip, #1440]!	; 0x5a0

00010aac <utf8proc_iterate@plt>:
   10aac:	add	ip, pc, #0, 12
   10ab0:	add	ip, ip, #90112	; 0x16000
   10ab4:	ldr	pc, [ip, #1432]!	; 0x598

00010ab8 <malloc@plt>:
   10ab8:	add	ip, pc, #0, 12
   10abc:	add	ip, ip, #90112	; 0x16000
   10ac0:	ldr	pc, [ip, #1424]!	; 0x590

00010ac4 <__libc_start_main@plt>:
   10ac4:	add	ip, pc, #0, 12
   10ac8:	add	ip, ip, #90112	; 0x16000
   10acc:	ldr	pc, [ip, #1416]!	; 0x588

00010ad0 <__sysv_signal@plt>:
   10ad0:	add	ip, pc, #0, 12
   10ad4:	add	ip, ip, #90112	; 0x16000
   10ad8:	ldr	pc, [ip, #1408]!	; 0x580

00010adc <__gmon_start__@plt>:
   10adc:	add	ip, pc, #0, 12
   10ae0:	add	ip, ip, #90112	; 0x16000
   10ae4:	ldr	pc, [ip, #1400]!	; 0x578

00010ae8 <getpid@plt>:
   10ae8:	add	ip, pc, #0, 12
   10aec:	add	ip, ip, #90112	; 0x16000
   10af0:	ldr	pc, [ip, #1392]!	; 0x570

00010af4 <exit@plt>:
   10af4:	add	ip, pc, #0, 12
   10af8:	add	ip, ip, #90112	; 0x16000
   10afc:	ldr	pc, [ip, #1384]!	; 0x568

00010b00 <utf8proc_category@plt>:
   10b00:	add	ip, pc, #0, 12
   10b04:	add	ip, ip, #90112	; 0x16000
   10b08:	ldr	pc, [ip, #1376]!	; 0x560

00010b0c <strlen@plt>:
   10b0c:	add	ip, pc, #0, 12
   10b10:	add	ip, ip, #90112	; 0x16000
   10b14:	ldr	pc, [ip, #1368]!	; 0x558

00010b18 <fprintf@plt>:
   10b18:	add	ip, pc, #0, 12
   10b1c:	add	ip, ip, #90112	; 0x16000
   10b20:	ldr	pc, [ip, #1360]!	; 0x550

00010b24 <__isoc99_sscanf@plt>:
   10b24:	add	ip, pc, #0, 12
   10b28:	add	ip, ip, #90112	; 0x16000
   10b2c:	ldr	pc, [ip, #1352]!	; 0x548

00010b30 <fclose@plt>:
   10b30:	add	ip, pc, #0, 12
   10b34:	add	ip, ip, #90112	; 0x16000
   10b38:	ldr	pc, [ip, #1344]!	; 0x540

00010b3c <utf8proc_NFC@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #90112	; 0x16000
   10b44:	ldr	pc, [ip, #1336]!	; 0x538

00010b48 <fputc@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #90112	; 0x16000
   10b50:	ldr	pc, [ip, #1328]!	; 0x530

00010b54 <sprintf@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #90112	; 0x16000
   10b5c:	ldr	pc, [ip, #1320]!	; 0x528

00010b60 <utf8proc_errmsg@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #90112	; 0x16000
   10b68:	ldr	pc, [ip, #1312]!	; 0x520

00010b6c <fputs@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #90112	; 0x16000
   10b74:	ldr	pc, [ip, #1304]!	; 0x518

00010b78 <strncmp@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #90112	; 0x16000
   10b80:	ldr	pc, [ip, #1296]!	; 0x510

00010b84 <abort@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #90112	; 0x16000
   10b8c:	ldr	pc, [ip, #1288]!	; 0x508

00010b90 <getc@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #90112	; 0x16000
   10b98:	ldr	pc, [ip, #1280]!	; 0x500

00010b9c <__assert_fail@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #90112	; 0x16000
   10ba4:	ldr	pc, [ip, #1272]!	; 0x4f8

Disassembly of section .text:

00010ba8 <error@@Base-0x17f0>:
   10ba8:	mov	fp, #0
   10bac:	mov	lr, #0
   10bb0:	pop	{r1}		; (ldr r1, [sp], #4)
   10bb4:	mov	r2, sp
   10bb8:	push	{r2}		; (str r2, [sp, #-4]!)
   10bbc:	push	{r0}		; (str r0, [sp, #-4]!)
   10bc0:	ldr	ip, [pc, #16]	; 10bd8 <__assert_fail@plt+0x3c>
   10bc4:	push	{ip}		; (str ip, [sp, #-4]!)
   10bc8:	ldr	r0, [pc, #12]	; 10bdc <__assert_fail@plt+0x40>
   10bcc:	ldr	r3, [pc, #12]	; 10be0 <__assert_fail@plt+0x44>
   10bd0:	bl	10ac4 <__libc_start_main@plt>
   10bd4:	bl	10b84 <abort@plt>
   10bd8:	andeq	r3, r1, r8, lsl #5
   10bdc:	andeq	r0, r1, r8, lsl lr
   10be0:	andeq	r3, r1, r8, lsr #4
   10be4:	ldr	r3, [pc, #20]	; 10c00 <__assert_fail@plt+0x64>
   10be8:	ldr	r2, [pc, #20]	; 10c04 <__assert_fail@plt+0x68>
   10bec:	add	r3, pc, r3
   10bf0:	ldr	r2, [r3, r2]
   10bf4:	cmp	r2, #0
   10bf8:	bxeq	lr
   10bfc:	b	10adc <__gmon_start__@plt>
   10c00:	andeq	r6, r1, ip, lsl #8
   10c04:	andeq	r0, r0, r0, lsr #1
   10c08:	ldr	r0, [pc, #24]	; 10c28 <__assert_fail@plt+0x8c>
   10c0c:	ldr	r3, [pc, #24]	; 10c2c <__assert_fail@plt+0x90>
   10c10:	cmp	r3, r0
   10c14:	bxeq	lr
   10c18:	ldr	r3, [pc, #16]	; 10c30 <__assert_fail@plt+0x94>
   10c1c:	cmp	r3, #0
   10c20:	bxeq	lr
   10c24:	bx	r3
   10c28:	andeq	r7, r2, r0, asr #1
   10c2c:	andeq	r7, r2, r0, asr #1
   10c30:	andeq	r0, r0, r0
   10c34:	ldr	r0, [pc, #36]	; 10c60 <__assert_fail@plt+0xc4>
   10c38:	ldr	r1, [pc, #36]	; 10c64 <__assert_fail@plt+0xc8>
   10c3c:	sub	r1, r1, r0
   10c40:	asr	r1, r1, #2
   10c44:	add	r1, r1, r1, lsr #31
   10c48:	asrs	r1, r1, #1
   10c4c:	bxeq	lr
   10c50:	ldr	r3, [pc, #16]	; 10c68 <__assert_fail@plt+0xcc>
   10c54:	cmp	r3, #0
   10c58:	bxeq	lr
   10c5c:	bx	r3
   10c60:	andeq	r7, r2, r0, asr #1
   10c64:	andeq	r7, r2, r0, asr #1
   10c68:	andeq	r0, r0, r0
   10c6c:	push	{r4, lr}
   10c70:	ldr	r4, [pc, #24]	; 10c90 <__assert_fail@plt+0xf4>
   10c74:	ldrb	r3, [r4]
   10c78:	cmp	r3, #0
   10c7c:	popne	{r4, pc}
   10c80:	bl	10c08 <__assert_fail@plt+0x6c>
   10c84:	mov	r3, #1
   10c88:	strb	r3, [r4]
   10c8c:	pop	{r4, pc}
   10c90:	ldrdeq	r7, [r2], -r0
   10c94:	b	10c34 <__assert_fail@plt+0x98>
   10c98:	str	r4, [sp, #-8]!
   10c9c:	str	lr, [sp, #4]
   10ca0:	bl	11880 <__assert_fail@plt+0xce4>
   10ca4:	cmp	r0, #0
   10ca8:	beq	10cdc <__assert_fail@plt+0x140>
   10cac:	movw	r3, #29000	; 0x7148
   10cb0:	movt	r3, #2
   10cb4:	ldr	r2, [r3]
   10cb8:	ldr	r1, [r0, #12]
   10cbc:	sub	r2, r2, r1
   10cc0:	str	r2, [r3]
   10cc4:	movw	r3, #46140	; 0xb43c
   10cc8:	movt	r3, #2
   10ccc:	ldr	r2, [r3]
   10cd0:	ldr	r1, [r0, #16]
   10cd4:	sub	r2, r2, r1
   10cd8:	str	r2, [r3]
   10cdc:	ldr	r4, [sp]
   10ce0:	add	sp, sp, #4
   10ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   10ce8:	str	r4, [sp, #-8]!
   10cec:	str	lr, [sp, #4]
   10cf0:	movw	r3, #28884	; 0x70d4
   10cf4:	movt	r3, #2
   10cf8:	ldr	r1, [r3]
   10cfc:	add	r2, r1, #1
   10d00:	str	r2, [r3]
   10d04:	movw	r3, #29000	; 0x7148
   10d08:	movt	r3, #2
   10d0c:	ldr	r2, [r3]
   10d10:	movw	r3, #46140	; 0xb43c
   10d14:	movt	r3, #2
   10d18:	ldr	r3, [r3]
   10d1c:	sub	r3, r2, r3
   10d20:	vmov	s14, r3
   10d24:	vcvt.f64.s32	d7, s14
   10d28:	vldr	d6, [pc, #40]	; 10d58 <__assert_fail@plt+0x1bc>
   10d2c:	vmul.f64	d7, d7, d6
   10d30:	vmov	s13, r2
   10d34:	vcvt.f64.s32	d6, s13
   10d38:	vdiv.f64	d7, d7, d6
   10d3c:	vmov	r2, r3, d7
   10d40:	movw	r0, #12952	; 0x3298
   10d44:	movt	r0, #1
   10d48:	bl	10a10 <printf@plt>
   10d4c:	ldr	r4, [sp]
   10d50:	add	sp, sp, #4
   10d54:	pop	{pc}		; (ldr pc, [sp], #4)
   10d58:	andeq	r0, r0, r0
   10d5c:	subsmi	r0, r9, r0
   10d60:	movw	r3, #29036	; 0x716c
   10d64:	movt	r3, #2
   10d68:	ldr	r1, [r3]
   10d6c:	movw	r2, #29000	; 0x7148
   10d70:	movt	r2, #2
   10d74:	str	r1, [r2]
   10d78:	movw	r2, #46140	; 0xb43c
   10d7c:	movt	r2, #2
   10d80:	ldr	r3, [r3, #4]
   10d84:	str	r3, [r2]
   10d88:	cmp	r1, #0
   10d8c:	bxeq	lr
   10d90:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10d94:	strd	r6, [sp, #8]
   10d98:	str	r8, [sp, #16]
   10d9c:	str	lr, [sp, #20]
   10da0:	bl	10ce8 <__assert_fail@plt+0x14c>
   10da4:	movw	r3, #29020	; 0x715c
   10da8:	movt	r3, #2
   10dac:	ldr	r4, [r3]
   10db0:	cmp	r4, #0
   10db4:	beq	10dfc <__assert_fail@plt+0x260>
   10db8:	ldr	r7, [pc, #80]	; 10e10 <__assert_fail@plt+0x274>
   10dbc:	ldr	r6, [pc, #80]	; 10e14 <__assert_fail@plt+0x278>
   10dc0:	movw	r5, #29000	; 0x7148
   10dc4:	movt	r5, #2
   10dc8:	ldr	r1, [r4, #8]
   10dcc:	mov	r0, r7
   10dd0:	bl	10c98 <__assert_fail@plt+0xfc>
   10dd4:	ldr	r1, [r4, #8]
   10dd8:	mov	r0, r6
   10ddc:	bl	10c98 <__assert_fail@plt+0xfc>
   10de0:	ldr	r3, [r5]
   10de4:	cmp	r3, #0
   10de8:	beq	10dfc <__assert_fail@plt+0x260>
   10dec:	bl	10ce8 <__assert_fail@plt+0x14c>
   10df0:	ldr	r4, [r4, #4]
   10df4:	cmp	r4, #0
   10df8:	bne	10dc8 <__assert_fail@plt+0x22c>
   10dfc:	ldrd	r4, [sp]
   10e00:	ldrd	r6, [sp, #8]
   10e04:	ldr	r8, [sp, #16]
   10e08:	add	sp, sp, #20
   10e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   10e10:	andeq	r7, r2, ip, asr #10
   10e14:	andeq	r9, r2, r4, asr #9
   10e18:	push	{lr}		; (str lr, [sp, #-4]!)
   10e1c:	sub	sp, sp, #12
   10e20:	str	r0, [sp, #4]
   10e24:	mov	r5, r1
   10e28:	mov	r3, #0
   10e2c:	movw	r2, #12964	; 0x32a4
   10e30:	movt	r2, #1
   10e34:	add	r0, sp, #4
   10e38:	bl	12504 <error@@Base+0x16c>
   10e3c:	ldr	r3, [sp, #4]
   10e40:	cmp	r3, #2
   10e44:	beq	10e54 <__assert_fail@plt+0x2b8>
   10e48:	movw	r0, #13000	; 0x32c8
   10e4c:	movt	r0, #1
   10e50:	bl	12398 <error@@Base>
   10e54:	movw	r4, #29004	; 0x714c
   10e58:	movt	r4, #2
   10e5c:	movw	r2, #28844	; 0x70ac
   10e60:	movt	r2, #2
   10e64:	ldr	r1, [r5]
   10e68:	mov	r0, r4
   10e6c:	bl	127dc <error@@Base+0x444>
   10e70:	mov	r1, r4
   10e74:	movw	r0, #29020	; 0x715c
   10e78:	movt	r0, #2
   10e7c:	bl	11bcc <__assert_fail@plt+0x1030>
   10e80:	ldr	r1, [r5, #4]
   10e84:	movw	r0, #29036	; 0x716c
   10e88:	movt	r0, #2
   10e8c:	bl	114b8 <__assert_fail@plt+0x91c>
   10e90:	bl	10d60 <__assert_fail@plt+0x1c4>
   10e94:	bl	12338 <__assert_fail@plt+0x179c>
   10e98:	str	r4, [sp, #-8]!
   10e9c:	str	lr, [sp, #4]
   10ea0:	mov	r2, r0
   10ea4:	mov	r1, #99	; 0x63
   10ea8:	movw	r0, #28888	; 0x70d8
   10eac:	movt	r0, #2
   10eb0:	bl	10a40 <fgets@plt>
   10eb4:	adds	r0, r0, #0
   10eb8:	movne	r0, #1
   10ebc:	ldr	r4, [sp]
   10ec0:	add	sp, sp, #4
   10ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   10ec8:	str	r4, [sp, #-8]!
   10ecc:	str	lr, [sp, #4]
   10ed0:	mov	r4, r1
   10ed4:	bl	10e98 <__assert_fail@plt+0x2fc>
   10ed8:	cmp	r0, #0
   10edc:	moveq	r0, #0
   10ee0:	bne	10ef0 <__assert_fail@plt+0x354>
   10ee4:	ldr	r4, [sp]
   10ee8:	add	sp, sp, #4
   10eec:	pop	{pc}		; (ldr pc, [sp], #4)
   10ef0:	mov	r2, r4
   10ef4:	movw	r1, #13148	; 0x335c
   10ef8:	movt	r1, #1
   10efc:	movw	r0, #28888	; 0x70d8
   10f00:	movt	r0, #2
   10f04:	bl	10b24 <__isoc99_sscanf@plt>
   10f08:	cmp	r0, #1
   10f0c:	movne	r0, #0
   10f10:	moveq	r0, #1
   10f14:	b	10ee4 <__assert_fail@plt+0x348>
   10f18:	str	r4, [sp, #-8]!
   10f1c:	str	lr, [sp, #4]
   10f20:	ldr	r3, [r1]
   10f24:	cmp	r3, #0
   10f28:	bne	10f50 <__assert_fail@plt+0x3b4>
   10f2c:	mov	r3, r0
   10f30:	mov	r2, #8
   10f34:	mov	r1, #1
   10f38:	movw	r0, #13024	; 0x32e0
   10f3c:	movt	r0, #1
   10f40:	bl	10a94 <fwrite@plt>
   10f44:	ldr	r4, [sp]
   10f48:	add	sp, sp, #4
   10f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   10f50:	ldr	r2, [r1, #4]
   10f54:	sub	r2, r3, r2
   10f58:	vmov	s12, r2
   10f5c:	vcvt.f64.s32	d6, s12
   10f60:	vldr	d7, [pc, #32]	; 10f88 <__assert_fail@plt+0x3ec>
   10f64:	vmul.f64	d6, d6, d7
   10f68:	vmov	s15, r3
   10f6c:	vcvt.f64.s32	d7, s15
   10f70:	vdiv.f64	d7, d6, d7
   10f74:	vmov	r2, r3, d7
   10f78:	movw	r1, #13036	; 0x32ec
   10f7c:	movt	r1, #1
   10f80:	bl	10b18 <fprintf@plt>
   10f84:	b	10f44 <__assert_fail@plt+0x3a8>
   10f88:	andeq	r0, r0, r0
   10f8c:	subsmi	r0, r9, r0
   10f90:	strd	r4, [sp, #-16]!
   10f94:	str	r6, [sp, #8]
   10f98:	str	lr, [sp, #12]
   10f9c:	mov	r4, r0
   10fa0:	subs	r5, r1, #0
   10fa4:	beq	10ff0 <__assert_fail@plt+0x454>
   10fa8:	ldr	r3, [r5, #4]
   10fac:	ldr	r2, [r5]
   10fb0:	movw	r1, #13044	; 0x32f4
   10fb4:	movt	r1, #1
   10fb8:	bl	10b18 <fprintf@plt>
   10fbc:	mov	r1, r5
   10fc0:	mov	r0, r4
   10fc4:	bl	10f18 <__assert_fail@plt+0x37c>
   10fc8:	mov	r3, r4
   10fcc:	mov	r2, #3
   10fd0:	mov	r1, #1
   10fd4:	movw	r0, #13084	; 0x331c
   10fd8:	movt	r0, #1
   10fdc:	bl	10a94 <fwrite@plt>
   10fe0:	ldrd	r4, [sp]
   10fe4:	ldr	r6, [sp, #8]
   10fe8:	add	sp, sp, #12
   10fec:	pop	{pc}		; (ldr pc, [sp], #4)
   10ff0:	mov	r3, r0
   10ff4:	mov	r2, #26
   10ff8:	mov	r1, #1
   10ffc:	movw	r0, #13056	; 0x3300
   11000:	movt	r0, #1
   11004:	bl	10a94 <fwrite@plt>
   11008:	b	10fc8 <__assert_fail@plt+0x42c>
   1100c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11010:	strd	r6, [sp, #8]
   11014:	strd	r8, [sp, #16]
   11018:	str	sl, [sp, #24]
   1101c:	str	lr, [sp, #28]
   11020:	mov	r7, r0
   11024:	mov	r5, r1
   11028:	mov	r6, r2
   1102c:	ldrb	r9, [sp, #32]
   11030:	ldrb	sl, [sp, #36]	; 0x24
   11034:	mov	r2, r3
   11038:	movw	r1, #13088	; 0x3320
   1103c:	movt	r1, #1
   11040:	bl	10b18 <fprintf@plt>
   11044:	mov	r1, #0
   11048:	mov	r0, r7
   1104c:	bl	10f90 <__assert_fail@plt+0x3f4>
   11050:	cmp	r9, #0
   11054:	bne	1113c <__assert_fail@plt+0x5a0>
   11058:	movw	r2, #13136	; 0x3350
   1105c:	movt	r2, #1
   11060:	movw	r1, #26596	; 0x67e4
   11064:	movt	r1, #1
   11068:	mov	r0, r7
   1106c:	bl	10b18 <fprintf@plt>
   11070:	cmp	r6, #0
   11074:	bgt	1115c <__assert_fail@plt+0x5c0>
   11078:	b	110c0 <__assert_fail@plt+0x524>
   1107c:	add	r4, r4, #1
   11080:	sxth	r4, r4
   11084:	cmp	r4, r6
   11088:	bgt	110b8 <__assert_fail@plt+0x51c>
   1108c:	add	r1, r5, r4, lsl #3
   11090:	ldr	r3, [r5, r4, lsl #3]
   11094:	cmp	r3, #0
   11098:	ble	1107c <__assert_fail@plt+0x4e0>
   1109c:	mov	r0, r7
   110a0:	bl	10f90 <__assert_fail@plt+0x3f4>
   110a4:	mov	r2, r4
   110a8:	mov	r1, r8
   110ac:	mov	r0, r7
   110b0:	bl	10b18 <fprintf@plt>
   110b4:	b	1107c <__assert_fail@plt+0x4e0>
   110b8:	cmp	r9, #0
   110bc:	bne	110e0 <__assert_fail@plt+0x544>
   110c0:	cmp	sl, #0
   110c4:	bne	11114 <__assert_fail@plt+0x578>
   110c8:	ldrd	r4, [sp]
   110cc:	ldrd	r6, [sp, #8]
   110d0:	ldrd	r8, [sp, #16]
   110d4:	ldr	sl, [sp, #24]
   110d8:	add	sp, sp, #28
   110dc:	pop	{pc}		; (ldr pc, [sp], #4)
   110e0:	add	r3, r6, #1
   110e4:	add	r1, r5, r3, lsl #3
   110e8:	ldr	r3, [r5, r3, lsl #3]
   110ec:	cmp	r3, #0
   110f0:	ble	110c0 <__assert_fail@plt+0x524>
   110f4:	mov	r0, r7
   110f8:	bl	10f90 <__assert_fail@plt+0x3f4>
   110fc:	mov	r2, r6
   11100:	movw	r1, #13108	; 0x3334
   11104:	movt	r1, #1
   11108:	mov	r0, r7
   1110c:	bl	10b18 <fprintf@plt>
   11110:	b	110c0 <__assert_fail@plt+0x524>
   11114:	mov	r1, r5
   11118:	mov	r0, r7
   1111c:	bl	10f90 <__assert_fail@plt+0x3f4>
   11120:	mov	r3, r7
   11124:	mov	r2, #7
   11128:	mov	r1, #1
   1112c:	movw	r0, #13120	; 0x3340
   11130:	movt	r0, #1
   11134:	bl	10a94 <fwrite@plt>
   11138:	b	110c8 <__assert_fail@plt+0x52c>
   1113c:	movw	r2, #13128	; 0x3348
   11140:	movt	r2, #1
   11144:	movw	r1, #26596	; 0x67e4
   11148:	movt	r1, #1
   1114c:	mov	r0, r7
   11150:	bl	10b18 <fprintf@plt>
   11154:	cmp	r6, #0
   11158:	ble	110e0 <__assert_fail@plt+0x544>
   1115c:	mov	r4, #1
   11160:	movw	r8, #13096	; 0x3328
   11164:	movt	r8, #1
   11168:	b	1108c <__assert_fail@plt+0x4f0>
   1116c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11170:	strd	r6, [sp, #8]
   11174:	str	r8, [sp, #16]
   11178:	str	lr, [sp, #20]
   1117c:	mov	r6, r0
   11180:	mov	r5, r1
   11184:	mov	r7, r2
   11188:	mov	r0, r1
   1118c:	bl	119ac <__assert_fail@plt+0xe10>
   11190:	add	r4, r5, #4096	; 0x1000
   11194:	movw	r2, #4672	; 0x1240
   11198:	movt	r2, #1
   1119c:	ldr	r1, [r4, #3952]	; 0xf70
   111a0:	ldr	r0, [r4, #3956]	; 0xf74
   111a4:	bl	131f0 <error@@Base+0xe58>
   111a8:	mov	r2, r7
   111ac:	movw	r1, #13088	; 0x3320
   111b0:	movt	r1, #1
   111b4:	mov	r0, r6
   111b8:	bl	10b18 <fprintf@plt>
   111bc:	mov	r1, #0
   111c0:	mov	r0, r6
   111c4:	bl	10f90 <__assert_fail@plt+0x3f4>
   111c8:	mov	r1, r6
   111cc:	mov	r0, #10
   111d0:	bl	10b48 <fputc@plt>
   111d4:	ldr	r3, [r4, #3956]	; 0xf74
   111d8:	cmp	r3, #0
   111dc:	ble	1122c <__assert_fail@plt+0x690>
   111e0:	mov	r4, #0
   111e4:	add	r5, r5, #4096	; 0x1000
   111e8:	movw	r7, #26596	; 0x67e4
   111ec:	movt	r7, #1
   111f0:	ldr	r3, [r5, #3952]	; 0xf70
   111f4:	ldr	r1, [r3, r4, lsl #2]
   111f8:	add	r1, r1, #12
   111fc:	mov	r0, r6
   11200:	bl	10f90 <__assert_fail@plt+0x3f4>
   11204:	ldr	r3, [r5, #3952]	; 0xf70
   11208:	ldr	r3, [r3, r4, lsl #2]
   1120c:	ldr	r2, [r3, #8]
   11210:	mov	r1, r7
   11214:	mov	r0, r6
   11218:	bl	10b18 <fprintf@plt>
   1121c:	add	r4, r4, #1
   11220:	ldr	r3, [r5, #3956]	; 0xf74
   11224:	cmp	r3, r4
   11228:	bgt	111f0 <__assert_fail@plt+0x654>
   1122c:	ldrd	r4, [sp]
   11230:	ldrd	r6, [sp, #8]
   11234:	ldr	r8, [sp, #16]
   11238:	add	sp, sp, #20
   1123c:	pop	{pc}		; (ldr pc, [sp], #4)
   11240:	str	r4, [sp, #-8]!
   11244:	str	lr, [sp, #4]
   11248:	ldr	r1, [r1, #8]
   1124c:	ldr	r0, [r0, #8]
   11250:	bl	1219c <__assert_fail@plt+0x1600>
   11254:	ldr	r4, [sp]
   11258:	add	sp, sp, #4
   1125c:	pop	{pc}		; (ldr pc, [sp], #4)
   11260:	strd	r4, [sp, #-28]!	; 0xffffffe4
   11264:	strd	r6, [sp, #8]
   11268:	strd	r8, [sp, #16]
   1126c:	str	lr, [sp, #24]
   11270:	sub	sp, sp, #12
   11274:	mov	r5, r0
   11278:	mov	r4, r1
   1127c:	bl	10e98 <__assert_fail@plt+0x2fc>
   11280:	cmp	r0, #0
   11284:	moveq	r6, #0
   11288:	beq	11340 <__assert_fail@plt+0x7a4>
   1128c:	mov	r0, r5
   11290:	bl	10e98 <__assert_fail@plt+0x2fc>
   11294:	cmp	r0, #0
   11298:	moveq	r6, #0
   1129c:	beq	11340 <__assert_fail@plt+0x7a4>
   112a0:	mov	r6, #0
   112a4:	movw	r9, #13144	; 0x3358
   112a8:	movt	r9, #1
   112ac:	movw	r8, #28888	; 0x70d8
   112b0:	movt	r8, #2
   112b4:	add	r7, r8, #29
   112b8:	b	11330 <__assert_fail@plt+0x794>
   112bc:	mov	r3, sp
   112c0:	add	r2, sp, #4
   112c4:	mov	r1, r9
   112c8:	mov	r0, r8
   112cc:	bl	10b24 <__isoc99_sscanf@plt>
   112d0:	cmp	r0, #2
   112d4:	bne	11340 <__assert_fail@plt+0x7a4>
   112d8:	mov	r2, #10
   112dc:	mov	r1, #0
   112e0:	mov	r0, r7
   112e4:	bl	10a04 <strtol@plt>
   112e8:	cmp	r0, #0
   112ec:	bne	1130c <__assert_fail@plt+0x770>
   112f0:	movw	r1, #13120	; 0x3340
   112f4:	movt	r1, #1
   112f8:	mov	r0, r7
   112fc:	bl	109f8 <strcmp@plt>
   11300:	cmp	r0, #0
   11304:	ldreq	r6, [sp, #4]
   11308:	movne	r0, #11
   1130c:	add	r2, r4, r0, lsl #3
   11310:	ldr	r3, [r4, r0, lsl #3]
   11314:	ldr	r1, [sp, #4]
   11318:	add	r3, r3, r1
   1131c:	str	r3, [r4, r0, lsl #3]
   11320:	ldr	r3, [r2, #4]
   11324:	ldr	r1, [sp]
   11328:	add	r3, r3, r1
   1132c:	str	r3, [r2, #4]
   11330:	mov	r0, r5
   11334:	bl	10e98 <__assert_fail@plt+0x2fc>
   11338:	cmp	r0, #0
   1133c:	bne	112bc <__assert_fail@plt+0x720>
   11340:	mov	r0, r6
   11344:	add	sp, sp, #12
   11348:	ldrd	r4, [sp]
   1134c:	ldrd	r6, [sp, #8]
   11350:	ldrd	r8, [sp, #16]
   11354:	add	sp, sp, #24
   11358:	pop	{pc}		; (ldr pc, [sp], #4)
   1135c:	ldr	r3, [r0]
   11360:	add	r1, r3, r1
   11364:	str	r1, [r0]
   11368:	ldr	r3, [r0, #4]
   1136c:	add	r2, r3, r2
   11370:	str	r2, [r0, #4]
   11374:	bx	lr
   11378:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1137c:	strd	r6, [sp, #8]
   11380:	str	r8, [sp, #16]
   11384:	str	lr, [sp, #20]
   11388:	mov	r7, r0
   1138c:	mov	r8, r1
   11390:	mov	r6, r2
   11394:	mov	r5, r3
   11398:	bl	11880 <__assert_fail@plt+0xce4>
   1139c:	subs	r4, r0, #0
   113a0:	beq	113d0 <__assert_fail@plt+0x834>
   113a4:	ldr	r2, [r4, #12]
   113a8:	add	r2, r2, r6
   113ac:	str	r2, [r4, #12]
   113b0:	ldr	r3, [r4, #16]
   113b4:	add	r3, r3, r5
   113b8:	str	r3, [r4, #16]
   113bc:	ldrd	r4, [sp]
   113c0:	ldrd	r6, [sp, #8]
   113c4:	ldr	r8, [sp, #16]
   113c8:	add	sp, sp, #20
   113cc:	pop	{pc}		; (ldr pc, [sp], #4)
   113d0:	mov	r1, #20
   113d4:	mov	r0, #1
   113d8:	bl	123d8 <error@@Base+0x40>
   113dc:	mov	r4, r0
   113e0:	mov	r0, r8
   113e4:	bl	10a58 <strdup@plt>
   113e8:	str	r0, [r4, #8]
   113ec:	mov	r1, r4
   113f0:	mov	r0, r7
   113f4:	bl	118dc <__assert_fail@plt+0xd40>
   113f8:	b	113a4 <__assert_fail@plt+0x808>
   113fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11400:	strd	r6, [sp, #8]
   11404:	str	r8, [sp, #16]
   11408:	str	lr, [sp, #20]
   1140c:	sub	sp, sp, #8
   11410:	mov	r5, r0
   11414:	mov	r6, r1
   11418:	bl	10e98 <__assert_fail@plt+0x2fc>
   1141c:	cmp	r0, #0
   11420:	beq	114a0 <__assert_fail@plt+0x904>
   11424:	mov	r0, r5
   11428:	bl	10e98 <__assert_fail@plt+0x2fc>
   1142c:	cmp	r0, #0
   11430:	beq	114a0 <__assert_fail@plt+0x904>
   11434:	movw	r7, #13144	; 0x3358
   11438:	movt	r7, #1
   1143c:	movw	r4, #28888	; 0x70d8
   11440:	movt	r4, #2
   11444:	add	r8, r4, #29
   11448:	b	11490 <__assert_fail@plt+0x8f4>
   1144c:	mov	r3, sp
   11450:	add	r2, sp, #4
   11454:	mov	r1, r7
   11458:	mov	r0, r4
   1145c:	bl	10b24 <__isoc99_sscanf@plt>
   11460:	cmp	r0, #2
   11464:	bne	114a0 <__assert_fail@plt+0x904>
   11468:	mov	r0, r4
   1146c:	bl	10b0c <strlen@plt>
   11470:	add	r0, r4, r0
   11474:	mov	r3, #0
   11478:	strb	r3, [r0, #-1]
   1147c:	ldr	r3, [sp]
   11480:	ldr	r2, [sp, #4]
   11484:	mov	r1, r8
   11488:	mov	r0, r6
   1148c:	bl	11378 <__assert_fail@plt+0x7dc>
   11490:	mov	r0, r5
   11494:	bl	10e98 <__assert_fail@plt+0x2fc>
   11498:	cmp	r0, #0
   1149c:	bne	1144c <__assert_fail@plt+0x8b0>
   114a0:	add	sp, sp, #8
   114a4:	ldrd	r4, [sp]
   114a8:	ldrd	r6, [sp, #8]
   114ac:	ldr	r8, [sp, #16]
   114b0:	add	sp, sp, #20
   114b4:	pop	{pc}		; (ldr pc, [sp], #4)
   114b8:	strd	r4, [sp, #-20]!	; 0xffffffec
   114bc:	strd	r6, [sp, #8]
   114c0:	str	lr, [sp, #16]
   114c4:	sub	sp, sp, #12
   114c8:	mov	r5, r0
   114cc:	mov	r6, r1
   114d0:	movw	r1, #13160	; 0x3368
   114d4:	movt	r1, #1
   114d8:	mov	r0, r6
   114dc:	bl	12480 <error@@Base+0xe8>
   114e0:	mov	r4, r0
   114e4:	bl	10e98 <__assert_fail@plt+0x2fc>
   114e8:	cmp	r0, #0
   114ec:	beq	11638 <__assert_fail@plt+0xa9c>
   114f0:	mov	r2, #45	; 0x2d
   114f4:	movw	r1, #13164	; 0x336c
   114f8:	movt	r1, #1
   114fc:	movw	r0, #28888	; 0x70d8
   11500:	movt	r0, #2
   11504:	bl	10b78 <strncmp@plt>
   11508:	cmp	r0, #0
   1150c:	bne	11638 <__assert_fail@plt+0xa9c>
   11510:	mov	r0, r4
   11514:	bl	10e98 <__assert_fail@plt+0x2fc>
   11518:	cmp	r0, #0
   1151c:	beq	11638 <__assert_fail@plt+0xa9c>
   11520:	movw	r1, #26840	; 0x68d8
   11524:	movt	r1, #1
   11528:	movw	r0, #28888	; 0x70d8
   1152c:	movt	r0, #2
   11530:	bl	109f8 <strcmp@plt>
   11534:	cmp	r0, #0
   11538:	bne	11638 <__assert_fail@plt+0xa9c>
   1153c:	add	r1, sp, #4
   11540:	mov	r0, r4
   11544:	bl	10ec8 <__assert_fail@plt+0x32c>
   11548:	cmp	r0, #0
   1154c:	beq	11638 <__assert_fail@plt+0xa9c>
   11550:	mov	r1, sp
   11554:	mov	r0, r4
   11558:	bl	10ec8 <__assert_fail@plt+0x32c>
   1155c:	cmp	r0, #0
   11560:	beq	11638 <__assert_fail@plt+0xa9c>
   11564:	mov	r0, r4
   11568:	bl	10e98 <__assert_fail@plt+0x2fc>
   1156c:	cmp	r0, #0
   11570:	beq	11638 <__assert_fail@plt+0xa9c>
   11574:	mov	r0, r4
   11578:	bl	10e98 <__assert_fail@plt+0x2fc>
   1157c:	cmp	r0, #0
   11580:	beq	11638 <__assert_fail@plt+0xa9c>
   11584:	ldr	r3, [r5]
   11588:	ldr	r2, [sp, #4]
   1158c:	add	r3, r3, r2
   11590:	str	r3, [r5]
   11594:	ldr	r3, [r5, #4]
   11598:	ldr	r2, [sp]
   1159c:	add	r3, r3, r2
   115a0:	str	r3, [r5, #4]
   115a4:	add	r1, r5, #8
   115a8:	mov	r0, r4
   115ac:	bl	11260 <__assert_fail@plt+0x6c4>
   115b0:	mov	r7, r0
   115b4:	add	r1, r5, #416	; 0x1a0
   115b8:	mov	r0, r4
   115bc:	bl	11260 <__assert_fail@plt+0x6c4>
   115c0:	mov	r6, r0
   115c4:	add	r1, r5, #824	; 0x338
   115c8:	mov	r0, r4
   115cc:	bl	11260 <__assert_fail@plt+0x6c4>
   115d0:	ldr	r3, [sp, #4]
   115d4:	cmp	r3, #0
   115d8:	bgt	115f8 <__assert_fail@plt+0xa5c>
   115dc:	mov	r0, r4
   115e0:	bl	12224 <__assert_fail@plt+0x1688>
   115e4:	add	sp, sp, #12
   115e8:	ldrd	r4, [sp]
   115ec:	ldrd	r6, [sp, #8]
   115f0:	add	sp, sp, #16
   115f4:	pop	{pc}		; (ldr pc, [sp], #4)
   115f8:	add	r1, r5, #920	; 0x398
   115fc:	mov	r0, r4
   11600:	bl	11260 <__assert_fail@plt+0x6c4>
   11604:	cmp	r7, #0
   11608:	bgt	11628 <__assert_fail@plt+0xa8c>
   1160c:	cmp	r6, #0
   11610:	ble	115dc <__assert_fail@plt+0xa40>
   11614:	add	r1, r5, #9024	; 0x2340
   11618:	add	r1, r1, #24
   1161c:	mov	r0, r4
   11620:	bl	113fc <__assert_fail@plt+0x860>
   11624:	b	115dc <__assert_fail@plt+0xa40>
   11628:	add	r1, r5, #992	; 0x3e0
   1162c:	mov	r0, r4
   11630:	bl	113fc <__assert_fail@plt+0x860>
   11634:	b	1160c <__assert_fail@plt+0xa70>
   11638:	movw	r1, #13152	; 0x3360
   1163c:	movt	r1, #1
   11640:	cmp	r6, #0
   11644:	movne	r1, r6
   11648:	movw	r0, #13212	; 0x339c
   1164c:	movt	r0, #1
   11650:	bl	1243c <error@@Base+0xa4>
   11654:	strd	r4, [sp, #-20]!	; 0xffffffec
   11658:	strd	r6, [sp, #8]
   1165c:	str	lr, [sp, #16]
   11660:	sub	sp, sp, #12
   11664:	mov	r5, r0
   11668:	mov	r0, r1
   1166c:	movw	r1, #13232	; 0x33b0
   11670:	movt	r1, #1
   11674:	bl	12480 <error@@Base+0xe8>
   11678:	mov	r4, r0
   1167c:	movw	r3, #26840	; 0x68d8
   11680:	movt	r3, #1
   11684:	movw	r2, #13164	; 0x336c
   11688:	movt	r2, #1
   1168c:	movw	r1, #13236	; 0x33b4
   11690:	movt	r1, #1
   11694:	bl	10b18 <fprintf@plt>
   11698:	ldr	r2, [r5]
   1169c:	movw	r1, #13244	; 0x33bc
   116a0:	movt	r1, #1
   116a4:	mov	r0, r4
   116a8:	bl	10b18 <fprintf@plt>
   116ac:	ldr	r2, [r5, #4]
   116b0:	movw	r1, #13260	; 0x33cc
   116b4:	movt	r1, #1
   116b8:	mov	r0, r4
   116bc:	bl	10b18 <fprintf@plt>
   116c0:	mov	r1, r5
   116c4:	mov	r0, r4
   116c8:	bl	10f18 <__assert_fail@plt+0x37c>
   116cc:	mov	r3, r4
   116d0:	mov	r2, #12
   116d4:	mov	r1, #1
   116d8:	movw	r0, #13284	; 0x33e4
   116dc:	movt	r0, #1
   116e0:	bl	10a94 <fwrite@plt>
   116e4:	mov	r6, #1
   116e8:	str	r6, [sp, #4]
   116ec:	mov	r7, #0
   116f0:	str	r7, [sp]
   116f4:	movw	r3, #13300	; 0x33f4
   116f8:	movt	r3, #1
   116fc:	mov	r2, #50	; 0x32
   11700:	add	r1, r5, #8
   11704:	mov	r0, r4
   11708:	bl	1100c <__assert_fail@plt+0x470>
   1170c:	str	r6, [sp, #4]
   11710:	str	r7, [sp]
   11714:	movw	r3, #13312	; 0x3400
   11718:	movt	r3, #1
   1171c:	mov	r2, #50	; 0x32
   11720:	add	r1, r5, #416	; 0x1a0
   11724:	mov	r0, r4
   11728:	bl	1100c <__assert_fail@plt+0x470>
   1172c:	str	r6, [sp, #4]
   11730:	str	r6, [sp]
   11734:	movw	r3, #13328	; 0x3410
   11738:	movt	r3, #1
   1173c:	mov	r2, #10
   11740:	add	r1, r5, #824	; 0x338
   11744:	mov	r0, r4
   11748:	bl	1100c <__assert_fail@plt+0x470>
   1174c:	ldr	r3, [r5]
   11750:	cmp	r3, r7
   11754:	bgt	11774 <__assert_fail@plt+0xbd8>
   11758:	mov	r0, r4
   1175c:	bl	12224 <__assert_fail@plt+0x1688>
   11760:	add	sp, sp, #12
   11764:	ldrd	r4, [sp]
   11768:	ldrd	r6, [sp, #8]
   1176c:	add	sp, sp, #16
   11770:	pop	{pc}		; (ldr pc, [sp], #4)
   11774:	str	r7, [sp, #4]
   11778:	str	r7, [sp]
   1177c:	movw	r3, #13352	; 0x3428
   11780:	movt	r3, #1
   11784:	mov	r2, #8
   11788:	add	r1, r5, #920	; 0x398
   1178c:	mov	r0, r4
   11790:	bl	1100c <__assert_fail@plt+0x470>
   11794:	ldr	r3, [r5, #8]
   11798:	cmp	r3, r7
   1179c:	bgt	117c8 <__assert_fail@plt+0xc2c>
   117a0:	ldr	r3, [r5, #416]	; 0x1a0
   117a4:	cmp	r3, #0
   117a8:	ble	11758 <__assert_fail@plt+0xbbc>
   117ac:	movw	r2, #13312	; 0x3400
   117b0:	movt	r2, #1
   117b4:	add	r1, r5, #9024	; 0x2340
   117b8:	add	r1, r1, #24
   117bc:	mov	r0, r4
   117c0:	bl	1116c <__assert_fail@plt+0x5d0>
   117c4:	b	11758 <__assert_fail@plt+0xbbc>
   117c8:	movw	r2, #13300	; 0x33f4
   117cc:	movt	r2, #1
   117d0:	add	r1, r5, #992	; 0x3e0
   117d4:	mov	r0, r4
   117d8:	bl	1116c <__assert_fail@plt+0x5d0>
   117dc:	b	117a0 <__assert_fail@plt+0xc04>
   117e0:	ldrb	r3, [r0]
   117e4:	cmp	r3, #0
   117e8:	beq	11828 <__assert_fail@plt+0xc8c>
   117ec:	mov	r2, #0
   117f0:	add	r2, r2, r3
   117f4:	ldrb	r3, [r0, #1]!
   117f8:	cmp	r3, #0
   117fc:	bne	117f0 <__assert_fail@plt+0xc54>
   11800:	movw	r3, #20065	; 0x4e61
   11804:	movt	r3, #33354	; 0x824a
   11808:	smull	r1, r3, r3, r2
   1180c:	add	r3, r3, r2
   11810:	asr	r0, r2, #31
   11814:	rsb	r3, r0, r3, asr #8
   11818:	movw	r0, #503	; 0x1f7
   1181c:	mls	r0, r0, r3, r2
   11820:	sxth	r0, r0
   11824:	bx	lr
   11828:	mov	r2, #0
   1182c:	b	11800 <__assert_fail@plt+0xc64>
   11830:	strd	r4, [sp, #-16]!
   11834:	str	r6, [sp, #8]
   11838:	str	lr, [sp, #12]
   1183c:	mov	r6, r0
   11840:	mov	r4, r0
   11844:	add	r5, r0, #8000	; 0x1f40
   11848:	add	r5, r5, #48	; 0x30
   1184c:	mov	r0, r4
   11850:	bl	12eb8 <error@@Base+0xb20>
   11854:	add	r4, r4, #16
   11858:	cmp	r4, r5
   1185c:	bne	1184c <__assert_fail@plt+0xcb0>
   11860:	add	r6, r6, #4096	; 0x1000
   11864:	mov	r3, #0
   11868:	str	r3, [r6, #3952]	; 0xf70
   1186c:	str	r3, [r6, #3956]	; 0xf74
   11870:	ldrd	r4, [sp]
   11874:	ldr	r6, [sp, #8]
   11878:	add	sp, sp, #12
   1187c:	pop	{pc}		; (ldr pc, [sp], #4)
   11880:	strd	r4, [sp, #-16]!
   11884:	str	r6, [sp, #8]
   11888:	str	lr, [sp, #12]
   1188c:	mov	r4, r0
   11890:	mov	r5, r1
   11894:	mov	r0, r1
   11898:	bl	117e0 <__assert_fail@plt+0xc44>
   1189c:	ldr	r4, [r4, r0, lsl #4]
   118a0:	cmp	r4, #0
   118a4:	beq	118c8 <__assert_fail@plt+0xd2c>
   118a8:	ldr	r1, [r4, #8]
   118ac:	mov	r0, r5
   118b0:	bl	109f8 <strcmp@plt>
   118b4:	cmp	r0, #0
   118b8:	beq	118c8 <__assert_fail@plt+0xd2c>
   118bc:	ldr	r4, [r4, #4]
   118c0:	cmp	r4, #0
   118c4:	bne	118a8 <__assert_fail@plt+0xd0c>
   118c8:	mov	r0, r4
   118cc:	ldrd	r4, [sp]
   118d0:	ldr	r6, [sp, #8]
   118d4:	add	sp, sp, #12
   118d8:	pop	{pc}		; (ldr pc, [sp], #4)
   118dc:	strd	r4, [sp, #-16]!
   118e0:	str	r6, [sp, #8]
   118e4:	str	lr, [sp, #12]
   118e8:	mov	r4, r0
   118ec:	mov	r5, r1
   118f0:	ldr	r0, [r1, #8]
   118f4:	bl	117e0 <__assert_fail@plt+0xc44>
   118f8:	mov	r1, r5
   118fc:	add	r0, r4, r0, lsl #4
   11900:	bl	12ed0 <error@@Base+0xb38>
   11904:	add	r3, r4, #4096	; 0x1000
   11908:	ldr	r0, [r3, #3952]	; 0xf70
   1190c:	cmp	r0, #0
   11910:	beq	11924 <__assert_fail@plt+0xd88>
   11914:	bl	10a28 <free@plt>
   11918:	add	r3, r4, #4096	; 0x1000
   1191c:	mov	r2, #0
   11920:	str	r2, [r3, #3952]	; 0xf70
   11924:	add	r4, r4, #4096	; 0x1000
   11928:	ldr	r3, [r4, #3956]	; 0xf74
   1192c:	add	r3, r3, #1
   11930:	str	r3, [r4, #3956]	; 0xf74
   11934:	ldrd	r4, [sp]
   11938:	ldr	r6, [sp, #8]
   1193c:	add	sp, sp, #12
   11940:	pop	{pc}		; (ldr pc, [sp], #4)
   11944:	strd	r4, [sp, #-16]!
   11948:	str	r6, [sp, #8]
   1194c:	str	lr, [sp, #12]
   11950:	mov	r4, r0
   11954:	mov	r5, r1
   11958:	ldr	r0, [r1, #8]
   1195c:	bl	117e0 <__assert_fail@plt+0xc44>
   11960:	mov	r1, r5
   11964:	add	r0, r4, r0, lsl #4
   11968:	bl	12f5c <error@@Base+0xbc4>
   1196c:	add	r3, r4, #4096	; 0x1000
   11970:	ldr	r0, [r3, #3952]	; 0xf70
   11974:	cmp	r0, #0
   11978:	beq	1198c <__assert_fail@plt+0xdf0>
   1197c:	bl	10a28 <free@plt>
   11980:	add	r3, r4, #4096	; 0x1000
   11984:	mov	r2, #0
   11988:	str	r2, [r3, #3952]	; 0xf70
   1198c:	add	r4, r4, #4096	; 0x1000
   11990:	ldr	r3, [r4, #3956]	; 0xf74
   11994:	sub	r3, r3, #1
   11998:	str	r3, [r4, #3956]	; 0xf74
   1199c:	ldrd	r4, [sp]
   119a0:	ldr	r6, [sp, #8]
   119a4:	add	sp, sp, #12
   119a8:	pop	{pc}		; (ldr pc, [sp], #4)
   119ac:	add	r3, r0, #4096	; 0x1000
   119b0:	ldr	r3, [r3, #3952]	; 0xf70
   119b4:	cmp	r3, #0
   119b8:	bxne	lr
   119bc:	add	r3, r0, #4096	; 0x1000
   119c0:	ldr	r3, [r3, #3956]	; 0xf74
   119c4:	cmp	r3, #0
   119c8:	bxeq	lr
   119cc:	strd	r4, [sp, #-16]!
   119d0:	str	r6, [sp, #8]
   119d4:	str	lr, [sp, #12]
   119d8:	mov	r4, r0
   119dc:	mov	r1, #4
   119e0:	mov	r0, r3
   119e4:	bl	123d8 <error@@Base+0x40>
   119e8:	add	r3, r4, #4096	; 0x1000
   119ec:	str	r0, [r3, #3952]	; 0xf70
   119f0:	mov	r1, #0
   119f4:	mov	lr, r1
   119f8:	mov	ip, r3
   119fc:	movw	r5, #503	; 0x1f7
   11a00:	b	11a10 <__assert_fail@plt+0xe74>
   11a04:	add	lr, lr, #1
   11a08:	cmp	lr, r5
   11a0c:	beq	11a40 <__assert_fail@plt+0xea4>
   11a10:	ldr	r3, [r4, lr, lsl #4]
   11a14:	cmp	r3, #0
   11a18:	beq	11a04 <__assert_fail@plt+0xe68>
   11a1c:	lsl	r2, r1, #2
   11a20:	add	r1, r1, #1
   11a24:	ldr	r0, [ip, #3952]	; 0xf70
   11a28:	str	r3, [r0, r2]
   11a2c:	ldr	r3, [r3, #4]
   11a30:	add	r2, r2, #4
   11a34:	cmp	r3, #0
   11a38:	bne	11a20 <__assert_fail@plt+0xe84>
   11a3c:	b	11a04 <__assert_fail@plt+0xe68>
   11a40:	ldrd	r4, [sp]
   11a44:	ldr	r6, [sp, #8]
   11a48:	add	sp, sp, #12
   11a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   11a50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11a54:	strd	r6, [sp, #8]
   11a58:	str	r8, [sp, #16]
   11a5c:	str	lr, [sp, #20]
   11a60:	mov	r7, r0
   11a64:	mov	r6, r1
   11a68:	mov	r4, r0
   11a6c:	add	r5, r0, #8000	; 0x1f40
   11a70:	add	r5, r5, #48	; 0x30
   11a74:	mov	r1, r6
   11a78:	mov	r0, r4
   11a7c:	bl	1303c <error@@Base+0xca4>
   11a80:	add	r4, r4, #16
   11a84:	cmp	r4, r5
   11a88:	bne	11a74 <__assert_fail@plt+0xed8>
   11a8c:	add	r3, r7, #4096	; 0x1000
   11a90:	ldr	r0, [r3, #3952]	; 0xf70
   11a94:	cmp	r0, #0
   11a98:	beq	11aac <__assert_fail@plt+0xf10>
   11a9c:	bl	10a28 <free@plt>
   11aa0:	add	r3, r7, #4096	; 0x1000
   11aa4:	mov	r2, #0
   11aa8:	str	r2, [r3, #3952]	; 0xf70
   11aac:	add	r7, r7, #4096	; 0x1000
   11ab0:	mov	r3, #0
   11ab4:	str	r3, [r7, #3956]	; 0xf74
   11ab8:	ldrd	r4, [sp]
   11abc:	ldrd	r6, [sp, #8]
   11ac0:	ldr	r8, [sp, #16]
   11ac4:	add	sp, sp, #20
   11ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   11acc:	cmp	r2, r1
   11ad0:	bcc	11b50 <__assert_fail@plt+0xfb4>
   11ad4:	str	r4, [sp, #-8]!
   11ad8:	str	lr, [sp, #4]
   11adc:	sub	r3, r2, r1
   11ae0:	add	r3, r1, r3, lsr #1
   11ae4:	movw	ip, #13400	; 0x3458
   11ae8:	movt	ip, #1
   11aec:	add	lr, r3, r3, lsl #1
   11af0:	ldr	ip, [ip, lr, lsl #2]
   11af4:	cmp	ip, r0
   11af8:	bhi	11b38 <__assert_fail@plt+0xf9c>
   11afc:	movw	r1, #13400	; 0x3458
   11b00:	movt	r1, #1
   11b04:	add	ip, r3, r3, lsl #1
   11b08:	add	r1, r1, ip, lsl #2
   11b0c:	ldr	r1, [r1, #4]
   11b10:	cmp	r1, r0
   11b14:	bcc	11b44 <__assert_fail@plt+0xfa8>
   11b18:	movw	r1, #13400	; 0x3458
   11b1c:	movt	r1, #1
   11b20:	add	r3, r3, r3, lsl #1
   11b24:	add	r3, r1, r3, lsl #2
   11b28:	ldr	r0, [r3, #8]
   11b2c:	ldr	r4, [sp]
   11b30:	add	sp, sp, #4
   11b34:	pop	{pc}		; (ldr pc, [sp], #4)
   11b38:	sub	r2, r3, #1
   11b3c:	bl	11acc <__assert_fail@plt+0xf30>
   11b40:	b	11b2c <__assert_fail@plt+0xf90>
   11b44:	add	r1, r3, #1
   11b48:	bl	11acc <__assert_fail@plt+0xf30>
   11b4c:	b	11b2c <__assert_fail@plt+0xf90>
   11b50:	mov	r0, #0
   11b54:	bx	lr
   11b58:	cmp	r0, #0
   11b5c:	beq	11b84 <__assert_fail@plt+0xfe8>
   11b60:	str	r4, [sp, #-8]!
   11b64:	str	lr, [sp, #4]
   11b68:	movw	r2, #1092	; 0x444
   11b6c:	mov	r1, #0
   11b70:	ldr	r0, [r0, #12]
   11b74:	bl	11acc <__assert_fail@plt+0xf30>
   11b78:	ldr	r4, [sp]
   11b7c:	add	sp, sp, #4
   11b80:	pop	{pc}		; (ldr pc, [sp], #4)
   11b84:	mov	r0, #18
   11b88:	bx	lr
   11b8c:	str	r4, [sp, #-8]!
   11b90:	str	lr, [sp, #4]
   11b94:	subs	r4, r0, #0
   11b98:	beq	11bbc <__assert_fail@plt+0x1020>
   11b9c:	ldr	r4, [r4, #4]
   11ba0:	cmp	r4, #0
   11ba4:	beq	11bbc <__assert_fail@plt+0x1020>
   11ba8:	mov	r0, r4
   11bac:	bl	11b58 <__assert_fail@plt+0xfbc>
   11bb0:	bic	r0, r0, #2
   11bb4:	cmp	r0, #4
   11bb8:	beq	11b9c <__assert_fail@plt+0x1000>
   11bbc:	mov	r0, r4
   11bc0:	ldr	r4, [sp]
   11bc4:	add	sp, sp, #4
   11bc8:	pop	{pc}		; (ldr pc, [sp], #4)
   11bcc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11bd0:	strd	r6, [sp, #8]
   11bd4:	strd	r8, [sp, #16]
   11bd8:	strd	sl, [sp, #24]
   11bdc:	str	lr, [sp, #32]
   11be0:	sub	sp, sp, #36	; 0x24
   11be4:	str	r0, [sp, #12]
   11be8:	ldr	r9, [r1]
   11bec:	mov	r3, #1
   11bf0:	str	r3, [sp, #8]
   11bf4:	b	11f8c <__assert_fail@plt+0x13f0>
   11bf8:	ldr	r5, [r6, #4]
   11bfc:	cmp	r9, r5
   11c00:	movne	r4, r9
   11c04:	movne	r7, #0
   11c08:	beq	12000 <__assert_fail@plt+0x1464>
   11c0c:	add	r1, sp, #16
   11c10:	ldr	r0, [r4, #12]
   11c14:	bl	10a4c <utf8proc_encode_char@plt>
   11c18:	cmp	r0, #0
   11c1c:	beq	11c58 <__assert_fail@plt+0x10bc>
   11c20:	add	r7, r7, r0
   11c24:	ldr	r4, [r4, #4]
   11c28:	cmp	r5, r4
   11c2c:	beq	11fb0 <__assert_fail@plt+0x1414>
   11c30:	cmp	r4, #0
   11c34:	bne	11c0c <__assert_fail@plt+0x1070>
   11c38:	movw	r3, #13360	; 0x3430
   11c3c:	movt	r3, #1
   11c40:	mov	r2, #249	; 0xf9
   11c44:	movw	r1, #26516	; 0x6794
   11c48:	movt	r1, #1
   11c4c:	movw	r0, #26524	; 0x679c
   11c50:	movt	r0, #1
   11c54:	bl	10b9c <__assert_fail@plt>
   11c58:	movw	r3, #13360	; 0x3430
   11c5c:	movt	r3, #1
   11c60:	mov	r2, #253	; 0xfd
   11c64:	movw	r1, #26516	; 0x6794
   11c68:	movt	r1, #1
   11c6c:	movw	r0, #26540	; 0x67ac
   11c70:	movt	r0, #1
   11c74:	bl	10b9c <__assert_fail@plt>
   11c78:	sub	r2, r5, #8
   11c7c:	cmp	r2, #1
   11c80:	bls	11db4 <__assert_fail@plt+0x1218>
   11c84:	sub	r2, r5, #12
   11c88:	cmp	r5, #10
   11c8c:	cmpne	r2, #1
   11c90:	bhi	11ca0 <__assert_fail@plt+0x1104>
   11c94:	sub	r2, r0, #8
   11c98:	cmp	r2, #1
   11c9c:	bls	11db4 <__assert_fail@plt+0x1218>
   11ca0:	cmp	r4, #8
   11ca4:	movne	r2, #0
   11ca8:	moveq	r2, #1
   11cac:	cmp	r5, #10
   11cb0:	movne	r1, #0
   11cb4:	moveq	r1, #1
   11cb8:	tst	r2, r1
   11cbc:	movne	r4, r8
   11cc0:	bne	11db4 <__assert_fail@plt+0x1218>
   11cc4:	b	11e60 <__assert_fail@plt+0x12c4>
   11cc8:	cmp	r4, #13
   11ccc:	bne	12088 <__assert_fail@plt+0x14ec>
   11cd0:	sub	r2, r5, #8
   11cd4:	cmp	r2, #1
   11cd8:	bls	11db4 <__assert_fail@plt+0x1218>
   11cdc:	cmp	r5, #10
   11ce0:	movne	r1, #0
   11ce4:	moveq	r1, #1
   11ce8:	b	11e78 <__assert_fail@plt+0x12dc>
   11cec:	sub	r3, r5, #8
   11cf0:	cmp	r3, #1
   11cf4:	bls	11db4 <__assert_fail@plt+0x1218>
   11cf8:	cmp	ip, #12
   11cfc:	orreq	r1, r1, #1
   11d00:	cmp	r1, #0
   11d04:	beq	11d10 <__assert_fail@plt+0x1174>
   11d08:	cmp	r0, #15
   11d0c:	beq	11f38 <__assert_fail@plt+0x139c>
   11d10:	cmp	r5, #7
   11d14:	movne	r0, #0
   11d18:	moveq	r0, #1
   11d1c:	cmp	r5, #16
   11d20:	beq	11db4 <__assert_fail@plt+0x1218>
   11d24:	cmp	r4, #16
   11d28:	beq	11d88 <__assert_fail@plt+0x11ec>
   11d2c:	cmp	r4, #5
   11d30:	cmpeq	r5, #5
   11d34:	beq	11da8 <__assert_fail@plt+0x120c>
   11d38:	cmp	r6, #0
   11d3c:	bne	11f44 <__assert_fail@plt+0x13a8>
   11d40:	add	sp, sp, #36	; 0x24
   11d44:	ldrd	r4, [sp]
   11d48:	ldrd	r6, [sp, #8]
   11d4c:	ldrd	r8, [sp, #16]
   11d50:	ldrd	sl, [sp, #24]
   11d54:	add	sp, sp, #32
   11d58:	pop	{pc}		; (ldr pc, [sp], #4)
   11d5c:	cmp	r4, #14
   11d60:	bne	1204c <__assert_fail@plt+0x14b0>
   11d64:	cmp	r5, #15
   11d68:	beq	11db4 <__assert_fail@plt+0x1218>
   11d6c:	cmp	r4, #7
   11d70:	movne	r1, #0
   11d74:	moveq	r1, #1
   11d78:	cmp	r5, #7
   11d7c:	movne	r0, #0
   11d80:	moveq	r0, #1
   11d84:	b	11f04 <__assert_fail@plt+0x1368>
   11d88:	sub	r5, r5, #8
   11d8c:	cmp	r5, #1
   11d90:	orrls	r2, r2, #1
   11d94:	cmp	r2, #0
   11d98:	bne	11db4 <__assert_fail@plt+0x1218>
   11d9c:	cmp	r0, #0
   11da0:	beq	11d38 <__assert_fail@plt+0x119c>
   11da4:	b	11db4 <__assert_fail@plt+0x1218>
   11da8:	mov	r4, #5
   11dac:	b	11db4 <__assert_fail@plt+0x1218>
   11db0:	ldr	r4, [sp, #8]
   11db4:	ldr	r3, [r6, #4]
   11db8:	cmp	r3, #0
   11dbc:	beq	11f64 <__assert_fail@plt+0x13c8>
   11dc0:	mov	r7, r4
   11dc4:	mov	r0, r6
   11dc8:	bl	11b8c <__assert_fail@plt+0xff0>
   11dcc:	mov	r6, r0
   11dd0:	bl	11b58 <__assert_fail@plt+0xfbc>
   11dd4:	mov	r4, r0
   11dd8:	mov	r0, r6
   11ddc:	bl	11b8c <__assert_fail@plt+0xff0>
   11de0:	str	r0, [sp, #4]
   11de4:	bl	11b58 <__assert_fail@plt+0xfbc>
   11de8:	mov	r5, r0
   11dec:	ldr	r0, [sp, #4]
   11df0:	bl	11b8c <__assert_fail@plt+0xff0>
   11df4:	bl	11b58 <__assert_fail@plt+0xfbc>
   11df8:	sub	r2, r4, #1
   11dfc:	cmp	r5, #2
   11e00:	movne	r3, #0
   11e04:	moveq	r3, #1
   11e08:	cmp	r4, #1
   11e0c:	cmpeq	r5, #2
   11e10:	beq	11db0 <__assert_fail@plt+0x1214>
   11e14:	cmp	r2, #2
   11e18:	bls	11d38 <__assert_fail@plt+0x119c>
   11e1c:	bic	ip, r5, #2
   11e20:	cmp	ip, #1
   11e24:	orreq	r3, r3, #1
   11e28:	cmp	r3, #0
   11e2c:	bne	11d38 <__assert_fail@plt+0x119c>
   11e30:	sub	r3, r4, #8
   11e34:	cmp	r3, #1
   11e38:	bls	11c78 <__assert_fail@plt+0x10dc>
   11e3c:	sub	r2, r7, #8
   11e40:	cmp	r2, #1
   11e44:	bls	11cc8 <__assert_fail@plt+0x112c>
   11e48:	cmp	r4, #8
   11e4c:	movne	r2, #0
   11e50:	moveq	r2, #1
   11e54:	cmp	r5, #10
   11e58:	movne	r1, #0
   11e5c:	moveq	r1, #1
   11e60:	cmp	r5, #11
   11e64:	cmpeq	r0, #8
   11e68:	moveq	lr, #1
   11e6c:	movne	lr, #0
   11e70:	tst	r2, lr
   11e74:	bne	11f20 <__assert_fail@plt+0x1384>
   11e78:	cmp	r7, #8
   11e7c:	cmpeq	r4, #11
   11e80:	moveq	r2, #1
   11e84:	movne	r2, #0
   11e88:	cmp	r5, #8
   11e8c:	movne	r2, #0
   11e90:	andeq	r2, r2, #1
   11e94:	cmp	r2, #0
   11e98:	bne	11f28 <__assert_fail@plt+0x138c>
   11e9c:	cmp	r4, #15
   11ea0:	movne	lr, #0
   11ea4:	moveq	lr, #1
   11ea8:	cmp	r5, #15
   11eac:	movne	r2, #0
   11eb0:	moveq	r2, #1
   11eb4:	tst	lr, r2
   11eb8:	bne	11f30 <__assert_fail@plt+0x1394>
   11ebc:	cmp	r3, #1
   11ec0:	movhi	r3, #0
   11ec4:	movls	r3, #1
   11ec8:	tst	r2, r3
   11ecc:	bne	11db4 <__assert_fail@plt+0x1218>
   11ed0:	cmp	r4, #15
   11ed4:	beq	11cec <__assert_fail@plt+0x1150>
   11ed8:	cmp	r7, #15
   11edc:	beq	11d5c <__assert_fail@plt+0x11c0>
   11ee0:	cmp	r4, #7
   11ee4:	movne	r1, #0
   11ee8:	moveq	r1, #1
   11eec:	cmp	r5, #7
   11ef0:	movne	r0, #0
   11ef4:	moveq	r0, #1
   11ef8:	tst	r1, r0
   11efc:	movne	r4, sl
   11f00:	bne	11db4 <__assert_fail@plt+0x1218>
   11f04:	orrs	r3, lr, r3
   11f08:	bne	11d1c <__assert_fail@plt+0x1180>
   11f0c:	cmp	r4, #16
   11f10:	orreq	r1, r1, #1
   11f14:	cmp	r1, #0
   11f18:	beq	11d2c <__assert_fail@plt+0x1190>
   11f1c:	b	11d1c <__assert_fail@plt+0x1180>
   11f20:	mov	r4, r8
   11f24:	b	11db4 <__assert_fail@plt+0x1218>
   11f28:	mov	r4, #11
   11f2c:	b	11db4 <__assert_fail@plt+0x1218>
   11f30:	mov	r4, fp
   11f34:	b	11db4 <__assert_fail@plt+0x1218>
   11f38:	mov	r4, r0
   11f3c:	b	11db4 <__assert_fail@plt+0x1218>
   11f40:	mov	r6, r4
   11f44:	ldr	r4, [r6, #4]
   11f48:	cmp	r4, #0
   11f4c:	beq	11f64 <__assert_fail@plt+0x13c8>
   11f50:	mov	r0, r4
   11f54:	bl	11b58 <__assert_fail@plt+0xfbc>
   11f58:	bic	r0, r0, #2
   11f5c:	cmp	r0, #4
   11f60:	beq	11f40 <__assert_fail@plt+0x13a4>
   11f64:	ldr	r0, [r9, #12]
   11f68:	bl	10a34 <utf8proc_get_property@plt>
   11f6c:	ldrsh	r3, [r0]
   11f70:	cmp	r3, #0
   11f74:	ble	11f88 <__assert_fail@plt+0x13ec>
   11f78:	cmp	r3, #12
   11f7c:	ble	11bf8 <__assert_fail@plt+0x105c>
   11f80:	cmp	r3, #29
   11f84:	beq	11bf8 <__assert_fail@plt+0x105c>
   11f88:	ldr	r9, [r6, #4]
   11f8c:	str	r9, [sp, #20]
   11f90:	cmp	r9, #0
   11f94:	beq	11d40 <__assert_fail@plt+0x11a4>
   11f98:	mov	r7, #17
   11f9c:	add	r6, sp, #16
   11fa0:	mov	fp, #15
   11fa4:	mov	sl, #7
   11fa8:	mov	r8, #8
   11fac:	b	11dc4 <__assert_fail@plt+0x1228>
   11fb0:	add	r0, r7, #1
   11fb4:	bl	10ab8 <malloc@plt>
   11fb8:	mov	r7, r0
   11fbc:	mov	r4, #0
   11fc0:	add	r1, r7, r4
   11fc4:	ldr	r0, [r9, #12]
   11fc8:	bl	10a4c <utf8proc_encode_char@plt>
   11fcc:	add	r4, r4, r0
   11fd0:	ldr	r9, [r9, #4]
   11fd4:	cmp	r5, r9
   11fd8:	beq	12010 <__assert_fail@plt+0x1474>
   11fdc:	cmp	r9, #0
   11fe0:	bne	11fc0 <__assert_fail@plt+0x1424>
   11fe4:	ldr	r3, [pc, #184]	; 120a4 <__assert_fail@plt+0x1508>
   11fe8:	movw	r2, #269	; 0x10d
   11fec:	movw	r1, #26516	; 0x6794
   11ff0:	movt	r1, #1
   11ff4:	movw	r0, #26524	; 0x679c
   11ff8:	movt	r0, #1
   11ffc:	bl	10b9c <__assert_fail@plt>
   12000:	mov	r0, #1
   12004:	bl	10ab8 <malloc@plt>
   12008:	mov	r7, r0
   1200c:	mov	r4, #0
   12010:	mov	r3, #0
   12014:	strb	r3, [r7, r4]
   12018:	mov	r1, #12
   1201c:	mov	r0, #1
   12020:	bl	123d8 <error@@Base+0x40>
   12024:	mov	r4, r0
   12028:	mov	r0, r7
   1202c:	bl	10b3c <utf8proc_NFC@plt>
   12030:	str	r0, [r4, #8]
   12034:	mov	r1, r4
   12038:	ldr	r0, [sp, #12]
   1203c:	bl	12ef4 <error@@Base+0xb5c>
   12040:	mov	r0, r7
   12044:	bl	10a28 <free@plt>
   12048:	b	11f88 <__assert_fail@plt+0x13ec>
   1204c:	sub	r7, r4, #10
   12050:	bics	r7, r7, #2
   12054:	bne	11ee0 <__assert_fail@plt+0x1344>
   12058:	cmp	r5, #15
   1205c:	beq	11db4 <__assert_fail@plt+0x1218>
   12060:	cmp	r4, #15
   12064:	beq	11cf8 <__assert_fail@plt+0x115c>
   12068:	b	11ee0 <__assert_fail@plt+0x1344>
   1206c:	cmp	r4, #8
   12070:	movne	r2, #0
   12074:	moveq	r2, #1
   12078:	cmp	r5, #10
   1207c:	movne	r1, #0
   12080:	moveq	r1, #1
   12084:	b	11e60 <__assert_fail@plt+0x12c4>
   12088:	sub	r2, r4, #10
   1208c:	bics	r2, r2, #2
   12090:	bne	1206c <__assert_fail@plt+0x14d0>
   12094:	sub	r2, r5, #8
   12098:	cmp	r2, #1
   1209c:	bhi	11ca0 <__assert_fail@plt+0x1104>
   120a0:	b	11db4 <__assert_fail@plt+0x1218>
   120a4:	andeq	r3, r1, r4, asr #8
   120a8:	str	r4, [sp, #-8]!
   120ac:	str	lr, [sp, #4]
   120b0:	mov	r4, r0
   120b4:	ldr	r0, [r0, #8]
   120b8:	bl	10a28 <free@plt>
   120bc:	mov	r0, r4
   120c0:	bl	10a28 <free@plt>
   120c4:	ldr	r4, [sp]
   120c8:	add	sp, sp, #4
   120cc:	pop	{pc}		; (ldr pc, [sp], #4)
   120d0:	strd	r4, [sp, #-12]!
   120d4:	str	lr, [sp, #8]
   120d8:	sub	sp, sp, #116	; 0x74
   120dc:	mov	r5, r0
   120e0:	movw	r3, #46148	; 0xb444
   120e4:	movt	r3, #2
   120e8:	ldr	r4, [r3]
   120ec:	bl	10ae8 <getpid@plt>
   120f0:	str	r5, [sp]
   120f4:	mov	r3, r0
   120f8:	mov	r2, r4
   120fc:	movw	r1, #26560	; 0x67c0
   12100:	movt	r1, #1
   12104:	add	r0, sp, #12
   12108:	bl	10b54 <sprintf@plt>
   1210c:	add	r0, sp, #12
   12110:	bl	10a58 <strdup@plt>
   12114:	add	sp, sp, #116	; 0x74
   12118:	ldrd	r4, [sp]
   1211c:	add	sp, sp, #8
   12120:	pop	{pc}		; (ldr pc, [sp], #4)
   12124:	str	r7, [sp, #-8]!
   12128:	str	lr, [sp, #4]
   1212c:	mov	r6, r0
   12130:	movw	r3, #46152	; 0xb448
   12134:	movt	r3, #2
   12138:	ldr	r3, [r3]
   1213c:	cmp	r3, #0
   12140:	beq	12148 <__assert_fail@plt+0x15ac>
   12144:	blx	r3
   12148:	movw	r3, #28988	; 0x713c
   1214c:	movt	r3, #2
   12150:	ldrsh	r3, [r3]
   12154:	cmp	r3, #0
   12158:	ble	12194 <__assert_fail@plt+0x15f8>
   1215c:	mov	r4, #1
   12160:	movw	r5, #28988	; 0x713c
   12164:	movt	r5, #2
   12168:	mov	r0, r4
   1216c:	bl	120d0 <__assert_fail@plt+0x1534>
   12170:	mov	r7, r0
   12174:	bl	10a70 <unlink@plt>
   12178:	mov	r0, r7
   1217c:	bl	10a28 <free@plt>
   12180:	add	r4, r4, #1
   12184:	sxth	r4, r4
   12188:	ldrsh	r3, [r5]
   1218c:	cmp	r3, r4
   12190:	bge	12168 <__assert_fail@plt+0x15cc>
   12194:	mov	r0, r6
   12198:	bl	10af4 <exit@plt>
   1219c:	str	r4, [sp, #-8]!
   121a0:	str	lr, [sp, #4]
   121a4:	ldrb	r3, [r0]
   121a8:	cmp	r3, #0
   121ac:	beq	12200 <__assert_fail@plt+0x1664>
   121b0:	ldrb	r2, [r1]
   121b4:	cmp	r2, r3
   121b8:	bne	1221c <__assert_fail@plt+0x1680>
   121bc:	mov	ip, r1
   121c0:	mov	r2, r0
   121c4:	rsb	r0, r0, #1
   121c8:	add	r4, r0, r2
   121cc:	ldrb	r3, [r2, #1]!
   121d0:	cmp	r3, #0
   121d4:	beq	12204 <__assert_fail@plt+0x1668>
   121d8:	ldrb	lr, [ip, #1]!
   121dc:	cmp	lr, r3
   121e0:	beq	121c8 <__assert_fail@plt+0x162c>
   121e4:	ldrb	r2, [r1, r4]
   121e8:	cmp	r2, r3
   121ec:	mvnhi	r0, #0
   121f0:	movls	r0, #1
   121f4:	ldr	r4, [sp]
   121f8:	add	sp, sp, #4
   121fc:	pop	{pc}		; (ldr pc, [sp], #4)
   12200:	mov	r4, #0
   12204:	ldrb	r3, [r1, r4]
   12208:	cmp	r3, #0
   1220c:	moveq	r0, #0
   12210:	beq	121f4 <__assert_fail@plt+0x1658>
   12214:	mov	r3, #0
   12218:	b	121e4 <__assert_fail@plt+0x1648>
   1221c:	mov	r4, #0
   12220:	b	121e4 <__assert_fail@plt+0x1648>
   12224:	movw	r3, #28872	; 0x70c8
   12228:	movt	r3, #2
   1222c:	ldr	r3, [r3]
   12230:	cmp	r3, r0
   12234:	bxeq	lr
   12238:	movw	r3, #28876	; 0x70cc
   1223c:	movt	r3, #2
   12240:	ldr	r3, [r3]
   12244:	cmp	r3, r0
   12248:	bxeq	lr
   1224c:	str	r4, [sp, #-8]!
   12250:	str	lr, [sp, #4]
   12254:	bl	10b30 <fclose@plt>
   12258:	ldr	r4, [sp]
   1225c:	add	sp, sp, #4
   12260:	pop	{pc}		; (ldr pc, [sp], #4)
   12264:	push	{lr}		; (str lr, [sp, #-4]!)
   12268:	sub	sp, sp, #92	; 0x5c
   1226c:	mov	r2, sp
   12270:	mov	r1, r0
   12274:	mov	r0, #3
   12278:	bl	10a88 <__xstat@plt>
   1227c:	clz	r0, r0
   12280:	lsr	r0, r0, #5
   12284:	add	sp, sp, #92	; 0x5c
   12288:	pop	{pc}		; (ldr pc, [sp], #4)
   1228c:	str	r4, [sp, #-8]!
   12290:	str	lr, [sp, #4]
   12294:	movw	r3, #28988	; 0x713c
   12298:	movt	r3, #2
   1229c:	ldrh	r0, [r3]
   122a0:	add	r0, r0, #1
   122a4:	sxth	r0, r0
   122a8:	strh	r0, [r3]
   122ac:	bl	120d0 <__assert_fail@plt+0x1534>
   122b0:	mov	r4, r0
   122b4:	bl	10a70 <unlink@plt>
   122b8:	mov	r0, r4
   122bc:	ldr	r4, [sp]
   122c0:	add	sp, sp, #4
   122c4:	pop	{pc}		; (ldr pc, [sp], #4)
   122c8:	str	r4, [sp, #-8]!
   122cc:	str	lr, [sp, #4]
   122d0:	mov	r4, r0
   122d4:	bl	10b0c <strlen@plt>
   122d8:	uxth	r0, r0
   122dc:	sub	r2, r0, #1
   122e0:	sxth	r2, r2
   122e4:	cmp	r2, #0
   122e8:	blt	12324 <__assert_fail@plt+0x1788>
   122ec:	ldrb	r3, [r4, r2]
   122f0:	cmp	r3, #47	; 0x2f
   122f4:	beq	12324 <__assert_fail@plt+0x1788>
   122f8:	sub	r0, r0, #2
   122fc:	sxth	r3, r0
   12300:	add	r1, r3, #1
   12304:	add	r1, r4, r1
   12308:	sxth	r2, r3
   1230c:	cmp	r2, #0
   12310:	blt	12324 <__assert_fail@plt+0x1788>
   12314:	sub	r3, r3, #1
   12318:	ldrb	r0, [r1, #-1]!
   1231c:	cmp	r0, #47	; 0x2f
   12320:	bne	12308 <__assert_fail@plt+0x176c>
   12324:	add	r0, r2, #1
   12328:	add	r0, r4, r0
   1232c:	ldr	r4, [sp]
   12330:	add	sp, sp, #4
   12334:	pop	{pc}		; (ldr pc, [sp], #4)
   12338:	str	r4, [sp, #-8]!
   1233c:	str	lr, [sp, #4]
   12340:	mov	r0, #0
   12344:	bl	12124 <__assert_fail@plt+0x1588>
   12348:	str	r4, [sp, #-8]!
   1234c:	str	lr, [sp, #4]
   12350:	movw	r2, #46144	; 0xb440
   12354:	movt	r2, #2
   12358:	ldr	r2, [r2]
   1235c:	cmp	r2, #0
   12360:	beq	1236c <__assert_fail@plt+0x17d0>
   12364:	blx	r2
   12368:	bl	12338 <__assert_fail@plt+0x179c>
   1236c:	movw	r2, #46148	; 0xb444
   12370:	movt	r2, #2
   12374:	movw	ip, #28864	; 0x70c0
   12378:	movt	ip, #2
   1237c:	mov	r3, r0
   12380:	ldr	r2, [r2]
   12384:	movw	r1, #26576	; 0x67d0
   12388:	movt	r1, #1
   1238c:	ldr	r0, [ip]
   12390:	bl	10b18 <fprintf@plt>
   12394:	b	12368 <__assert_fail@plt+0x17cc>

00012398 <error@@Base>:
   12398:	str	r4, [sp, #-8]!
   1239c:	str	lr, [sp, #4]
   123a0:	movw	r2, #46148	; 0xb444
   123a4:	movt	r2, #2
   123a8:	movw	ip, #28864	; 0x70c0
   123ac:	movt	ip, #2
   123b0:	mov	r3, r0
   123b4:	ldr	r2, [r2]
   123b8:	movw	r1, #26592	; 0x67e0
   123bc:	movt	r1, #1
   123c0:	ldr	r0, [ip]
   123c4:	bl	10b18 <fprintf@plt>
   123c8:	movw	r3, #28856	; 0x70b8
   123cc:	movt	r3, #2
   123d0:	ldr	r0, [r3]
   123d4:	bl	12124 <__assert_fail@plt+0x1588>
   123d8:	str	r4, [sp, #-8]!
   123dc:	str	lr, [sp, #4]
   123e0:	bl	109ec <calloc@plt>
   123e4:	cmp	r0, #0
   123e8:	beq	123f8 <error@@Base+0x60>
   123ec:	ldr	r4, [sp]
   123f0:	add	sp, sp, #4
   123f4:	pop	{pc}		; (ldr pc, [sp], #4)
   123f8:	movw	r0, #26600	; 0x67e8
   123fc:	movt	r0, #1
   12400:	bl	12398 <error@@Base>
   12404:	movw	r3, #28988	; 0x713c
   12408:	movt	r3, #2
   1240c:	ldrb	r3, [r3, #2]
   12410:	cmp	r3, #0
   12414:	bxne	lr
   12418:	str	r4, [sp, #-8]!
   1241c:	str	lr, [sp, #4]
   12420:	movw	r3, #28988	; 0x713c
   12424:	movt	r3, #2
   12428:	mov	r2, #1
   1242c:	strb	r2, [r3, #2]
   12430:	movw	r0, #26628	; 0x6804
   12434:	movt	r0, #1
   12438:	bl	12398 <error@@Base>
   1243c:	push	{lr}		; (str lr, [sp, #-4]!)
   12440:	sub	sp, sp, #12
   12444:	movw	r2, #46148	; 0xb444
   12448:	movt	r2, #2
   1244c:	movw	ip, #28864	; 0x70c0
   12450:	movt	ip, #2
   12454:	str	r1, [sp]
   12458:	mov	r3, r0
   1245c:	ldr	r2, [r2]
   12460:	movw	r1, #26644	; 0x6814
   12464:	movt	r1, #1
   12468:	ldr	r0, [ip]
   1246c:	bl	10b18 <fprintf@plt>
   12470:	movw	r3, #28856	; 0x70b8
   12474:	movt	r3, #2
   12478:	ldr	r0, [r3]
   1247c:	bl	12124 <__assert_fail@plt+0x1588>
   12480:	strd	r4, [sp, #-16]!
   12484:	str	r6, [sp, #8]
   12488:	str	lr, [sp, #12]
   1248c:	subs	r5, r0, #0
   12490:	beq	124b8 <error@@Base+0x120>
   12494:	mov	r4, r1
   12498:	mov	r0, r5
   1249c:	bl	10a1c <fopen@plt>
   124a0:	cmp	r0, #0
   124a4:	beq	124d8 <error@@Base+0x140>
   124a8:	ldrd	r4, [sp]
   124ac:	ldr	r6, [sp, #8]
   124b0:	add	sp, sp, #12
   124b4:	pop	{pc}		; (ldr pc, [sp], #4)
   124b8:	ldrb	r3, [r1]
   124bc:	cmp	r3, #114	; 0x72
   124c0:	movweq	r3, #28872	; 0x70c8
   124c4:	movteq	r3, #2
   124c8:	movwne	r3, #28876	; 0x70cc
   124cc:	movtne	r3, #2
   124d0:	ldr	r0, [r3]
   124d4:	b	124a8 <error@@Base+0x110>
   124d8:	ldrb	r3, [r4]
   124dc:	cmp	r3, #119	; 0x77
   124e0:	beq	124f4 <error@@Base+0x15c>
   124e4:	mov	r1, r5
   124e8:	movw	r0, #26684	; 0x683c
   124ec:	movt	r0, #1
   124f0:	bl	1243c <error@@Base+0xa4>
   124f4:	mov	r1, r5
   124f8:	movw	r0, #26660	; 0x6824
   124fc:	movt	r0, #1
   12500:	bl	1243c <error@@Base+0xa4>
   12504:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12508:	strd	r6, [sp, #8]
   1250c:	strd	r8, [sp, #16]
   12510:	strd	sl, [sp, #24]
   12514:	str	lr, [sp, #32]
   12518:	sub	sp, sp, #28
   1251c:	mov	r5, r0
   12520:	str	r0, [sp, #4]
   12524:	mov	r9, r1
   12528:	str	r2, [sp, #20]
   1252c:	mov	r6, r3
   12530:	ldr	r0, [r1]
   12534:	bl	122c8 <__assert_fail@plt+0x172c>
   12538:	movw	r3, #46148	; 0xb444
   1253c:	movt	r3, #2
   12540:	str	r0, [r3]
   12544:	movw	r4, #9220	; 0x2404
   12548:	movt	r4, #1
   1254c:	mov	r1, r4
   12550:	mov	r0, #2
   12554:	bl	10ad0 <__sysv_signal@plt>
   12558:	mov	r1, r4
   1255c:	mov	r0, #15
   12560:	bl	10ad0 <__sysv_signal@plt>
   12564:	ldr	r7, [r5]
   12568:	cmp	r7, #1
   1256c:	beq	12598 <error@@Base+0x200>
   12570:	movle	r8, #0
   12574:	ble	125b0 <error@@Base+0x218>
   12578:	mov	r8, #0
   1257c:	mov	sl, #1
   12580:	mov	r4, sl
   12584:	movw	r3, #26704	; 0x6850
   12588:	movt	r3, #1
   1258c:	str	r3, [sp, #12]
   12590:	str	r6, [sp, #16]
   12594:	b	12654 <error@@Base+0x2bc>
   12598:	movw	r3, #28856	; 0x70b8
   1259c:	movt	r3, #2
   125a0:	ldrb	r3, [r3, #4]
   125a4:	cmp	r3, #0
   125a8:	moveq	r8, #0
   125ac:	bne	125d4 <error@@Base+0x23c>
   125b0:	ldr	r3, [sp, #4]
   125b4:	str	r8, [r3]
   125b8:	add	sp, sp, #28
   125bc:	ldrd	r4, [sp]
   125c0:	ldrd	r6, [sp, #8]
   125c4:	ldrd	r8, [sp, #16]
   125c8:	ldrd	sl, [sp, #24]
   125cc:	add	sp, sp, #32
   125d0:	pop	{pc}		; (ldr pc, [sp], #4)
   125d4:	ldr	r0, [sp, #20]
   125d8:	bl	12348 <__assert_fail@plt+0x17ac>
   125dc:	ldr	r0, [sp, #20]
   125e0:	bl	12348 <__assert_fail@plt+0x17ac>
   125e4:	ldr	r0, [sp, #16]
   125e8:	b	126ec <error@@Base+0x354>
   125ec:	ldr	r3, [r0, #8]
   125f0:	cmp	r3, #0
   125f4:	beq	12748 <error@@Base+0x3b0>
   125f8:	ldrb	r2, [r5, #2]
   125fc:	cmp	r2, #0
   12600:	bne	12748 <error@@Base+0x3b0>
   12604:	ldrb	r2, [r3]
   12608:	cmp	r2, #0
   1260c:	bne	1261c <error@@Base+0x284>
   12610:	mov	r2, #1
   12614:	strb	r2, [r3]
   12618:	b	12638 <error@@Base+0x2a0>
   1261c:	mov	r1, r5
   12620:	movw	r0, #26728	; 0x6868
   12624:	movt	r0, #1
   12628:	bl	1243c <error@@Base+0xa4>
   1262c:	add	r3, r8, #1
   12630:	str	r5, [r9, r8, lsl #2]
   12634:	sxth	r8, r3
   12638:	add	r4, r4, #1
   1263c:	sxth	r4, r4
   12640:	mov	sl, r4
   12644:	ldr	r3, [sp, #4]
   12648:	ldr	r7, [r3]
   1264c:	cmp	r4, r7
   12650:	bge	125b0 <error@@Base+0x218>
   12654:	lsl	r3, r4, #2
   12658:	str	r3, [sp, #8]
   1265c:	ldr	r5, [r9, r4, lsl #2]
   12660:	ldrb	r3, [r5]
   12664:	cmp	r3, #45	; 0x2d
   12668:	bne	1262c <error@@Base+0x294>
   1266c:	ldrb	fp, [r5, #1]
   12670:	cmp	fp, #0
   12674:	beq	1262c <error@@Base+0x294>
   12678:	mov	r0, r5
   1267c:	bl	10b0c <strlen@plt>
   12680:	mov	r2, r0
   12684:	mov	r1, r5
   12688:	ldr	r0, [sp, #12]
   1268c:	bl	10b78 <strncmp@plt>
   12690:	cmp	r0, #0
   12694:	beq	125dc <error@@Base+0x244>
   12698:	add	sl, sl, #1
   1269c:	cmp	sl, r7
   126a0:	ldrlt	r3, [sp, #8]
   126a4:	addlt	r3, r9, r3
   126a8:	ldrlt	r1, [r3, #4]
   126ac:	movge	r1, #0
   126b0:	cmp	r6, #0
   126b4:	beq	12748 <error@@Base+0x3b0>
   126b8:	ldrb	r3, [r6]
   126bc:	cmp	fp, r3
   126c0:	cmpne	r3, #0
   126c4:	beq	125e4 <error@@Base+0x24c>
   126c8:	mov	r2, #0
   126cc:	add	r2, r2, #1
   126d0:	sxth	r2, r2
   126d4:	add	r3, r2, r2, lsl #1
   126d8:	add	r0, r6, r3, lsl #2
   126dc:	ldrb	r3, [r6, r3, lsl #2]
   126e0:	cmp	fp, r3
   126e4:	cmpne	r3, #0
   126e8:	bne	126cc <error@@Base+0x334>
   126ec:	cmp	r3, #0
   126f0:	beq	12748 <error@@Base+0x3b0>
   126f4:	ldr	r3, [r0, #4]
   126f8:	cmp	r3, #0
   126fc:	beq	125ec <error@@Base+0x254>
   12700:	ldrb	r2, [r5, #2]
   12704:	cmp	r1, #0
   12708:	cmpeq	r2, #0
   1270c:	beq	1273c <error@@Base+0x3a4>
   12710:	ldr	r0, [r3]
   12714:	cmp	r0, #0
   12718:	bne	1261c <error@@Base+0x284>
   1271c:	cmp	r2, #0
   12720:	addne	r1, r5, #2
   12724:	str	r1, [r3]
   12728:	ldrb	r3, [r5, #2]
   1272c:	cmp	r3, #0
   12730:	addeq	r4, r4, #1
   12734:	sxtheq	r4, r4
   12738:	b	12638 <error@@Base+0x2a0>
   1273c:	ldr	r3, [r0, #8]
   12740:	cmp	r3, #0
   12744:	bne	12604 <error@@Base+0x26c>
   12748:	mov	r1, r5
   1274c:	movw	r0, #26712	; 0x6858
   12750:	movt	r0, #1
   12754:	bl	1243c <error@@Base+0xa4>
   12758:	push	{lr}		; (str lr, [sp, #-4]!)
   1275c:	sub	sp, sp, #12
   12760:	movw	r2, #46148	; 0xb444
   12764:	movt	r2, #2
   12768:	movw	ip, #28864	; 0x70c0
   1276c:	movt	ip, #2
   12770:	str	r1, [sp]
   12774:	mov	r3, r0
   12778:	ldr	r2, [r2]
   1277c:	movw	r1, #26644	; 0x6814
   12780:	movt	r1, #1
   12784:	ldr	r0, [ip]
   12788:	bl	10b18 <fprintf@plt>
   1278c:	add	sp, sp, #12
   12790:	pop	{pc}		; (ldr pc, [sp], #4)
   12794:	strd	r4, [sp, #-16]!
   12798:	str	r6, [sp, #8]
   1279c:	str	lr, [sp, #12]
   127a0:	mov	r4, r0
   127a4:	mov	r5, r2
   127a8:	uxtb	r6, r1
   127ac:	mov	r1, #16
   127b0:	mov	r0, #1
   127b4:	bl	123d8 <error@@Base+0x40>
   127b8:	mov	r1, r0
   127bc:	strb	r6, [r0, #8]
   127c0:	str	r5, [r0, #12]
   127c4:	mov	r0, r4
   127c8:	bl	12ef4 <error@@Base+0xb5c>
   127cc:	ldrd	r4, [sp]
   127d0:	ldr	r6, [sp, #8]
   127d4:	add	sp, sp, #12
   127d8:	pop	{pc}		; (ldr pc, [sp], #4)
   127dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   127e0:	strd	r6, [sp, #8]
   127e4:	strd	r8, [sp, #16]
   127e8:	strd	sl, [sp, #24]
   127ec:	str	lr, [sp, #32]
   127f0:	sub	sp, sp, #116	; 0x74
   127f4:	mov	r8, r0
   127f8:	ldrb	r3, [r2]
   127fc:	mov	r0, r1
   12800:	clz	r1, r1
   12804:	lsr	r1, r1, #5
   12808:	cmp	r3, #0
   1280c:	moveq	r1, #0
   12810:	cmp	r1, #0
   12814:	bne	12884 <error@@Base+0x4ec>
   12818:	mov	r4, r2
   1281c:	ldr	sl, [r8, #4]
   12820:	movw	r1, #13160	; 0x3368
   12824:	movt	r1, #1
   12828:	bl	12480 <error@@Base+0xe8>
   1282c:	str	r0, [sp]
   12830:	ldrb	r3, [r4]
   12834:	cmp	r3, #0
   12838:	bne	12898 <error@@Base+0x500>
   1283c:	ldrb	fp, [r4, #1]
   12840:	ldr	r7, [r4, #4]
   12844:	cmp	r7, #0
   12848:	moveq	r7, #94	; 0x5e
   1284c:	ldr	r0, [sp]
   12850:	bl	10b90 <getc@plt>
   12854:	cmn	r0, #1
   12858:	beq	129f0 <error@@Base+0x658>
   1285c:	movw	r3, #28168	; 0x6e08
   12860:	movt	r3, #2
   12864:	ldrsb	r5, [r3, r0]
   12868:	cmp	r5, #0
   1286c:	ble	12938 <error@@Base+0x5a0>
   12870:	mov	r3, #0
   12874:	str	r3, [sp, #4]
   12878:	movw	r9, #28168	; 0x6e08
   1287c:	movt	r9, #2
   12880:	b	1298c <error@@Base+0x5f4>
   12884:	movw	r1, #26748	; 0x687c
   12888:	movt	r1, #1
   1288c:	movw	r0, #26760	; 0x6888
   12890:	movt	r0, #1
   12894:	bl	1243c <error@@Base+0xa4>
   12898:	mov	r2, r0
   1289c:	mov	r1, #99	; 0x63
   128a0:	add	r0, sp, #12
   128a4:	bl	10a40 <fgets@plt>
   128a8:	cmp	r0, #0
   128ac:	beq	128cc <error@@Base+0x534>
   128b0:	mov	r2, #51	; 0x33
   128b4:	movw	r1, #26776	; 0x6898
   128b8:	movt	r1, #1
   128bc:	add	r0, sp, #12
   128c0:	bl	10b78 <strncmp@plt>
   128c4:	cmp	r0, #0
   128c8:	beq	128e0 <error@@Base+0x548>
   128cc:	ldr	r0, [sp]
   128d0:	bl	10a64 <rewind@plt>
   128d4:	mov	r3, #0
   128d8:	strb	r3, [r4, #11]
   128dc:	b	1283c <error@@Base+0x4a4>
   128e0:	mov	r5, #0
   128e4:	mov	r7, #99	; 0x63
   128e8:	movw	r6, #26832	; 0x68d0
   128ec:	movt	r6, #1
   128f0:	ldr	r2, [sp]
   128f4:	mov	r1, r7
   128f8:	add	r0, sp, #12
   128fc:	bl	10a40 <fgets@plt>
   12900:	cmp	r0, #0
   12904:	beq	12930 <error@@Base+0x598>
   12908:	mov	r1, r6
   1290c:	add	r0, sp, #12
   12910:	bl	109f8 <strcmp@plt>
   12914:	cmp	r0, #0
   12918:	addeq	r5, r5, #1
   1291c:	sxtheq	r5, r5
   12920:	cmp	r5, #1
   12924:	ble	128f0 <error@@Base+0x558>
   12928:	mov	r3, #1
   1292c:	b	128d8 <error@@Base+0x540>
   12930:	mov	r3, #1
   12934:	b	128d8 <error@@Base+0x540>
   12938:	movw	r0, #26888	; 0x6908
   1293c:	movt	r0, #1
   12940:	bl	12398 <error@@Base>
   12944:	movw	r0, #26912	; 0x6920
   12948:	movt	r0, #1
   1294c:	bl	12398 <error@@Base>
   12950:	bl	10b60 <utf8proc_errmsg@plt>
   12954:	bl	12398 <error@@Base>
   12958:	ldr	r2, [sp, #12]
   1295c:	ldr	r1, [sp, #4]
   12960:	mov	r0, r8
   12964:	bl	12794 <error@@Base+0x3fc>
   12968:	mov	r3, #0
   1296c:	str	r3, [sp, #4]
   12970:	ldr	r0, [sp]
   12974:	bl	10b90 <getc@plt>
   12978:	cmn	r0, #1
   1297c:	beq	129f0 <error@@Base+0x658>
   12980:	ldrsb	r5, [r9, r0]
   12984:	cmp	r5, #0
   12988:	ble	12938 <error@@Base+0x5a0>
   1298c:	strb	r0, [sp, #8]
   12990:	cmp	r5, #1
   12994:	ble	129b8 <error@@Base+0x620>
   12998:	sub	r6, r5, #1
   1299c:	ldr	r3, [sp]
   129a0:	mov	r2, r6
   129a4:	mov	r1, #1
   129a8:	add	r0, sp, #9
   129ac:	bl	10aa0 <fread@plt>
   129b0:	cmp	r6, r0
   129b4:	bne	12944 <error@@Base+0x5ac>
   129b8:	add	r2, sp, #12
   129bc:	mov	r1, #4
   129c0:	add	r0, sp, #8
   129c4:	bl	10aac <utf8proc_iterate@plt>
   129c8:	cmp	r0, r5
   129cc:	bne	12950 <error@@Base+0x5b8>
   129d0:	cmp	fp, #0
   129d4:	beq	12958 <error@@Base+0x5c0>
   129d8:	ldr	r3, [sp, #12]
   129dc:	cmp	r7, r3
   129e0:	bne	12958 <error@@Base+0x5c0>
   129e4:	mov	r3, #1
   129e8:	str	r3, [sp, #4]
   129ec:	b	12970 <error@@Base+0x5d8>
   129f0:	ldr	r0, [sp]
   129f4:	bl	12224 <__assert_fail@plt+0x1688>
   129f8:	ldrb	r3, [r4, #9]
   129fc:	cmp	r3, #0
   12a00:	beq	12b4c <error@@Base+0x7b4>
   12a04:	cmp	sl, #0
   12a08:	ldrne	r5, [sl, #4]
   12a0c:	ldreq	r5, [r8]
   12a10:	cmp	r5, #0
   12a14:	beq	12b4c <error@@Base+0x7b4>
   12a18:	mov	r6, r5
   12a1c:	mov	r9, #32
   12a20:	mov	r7, #0
   12a24:	b	12a58 <error@@Base+0x6c0>
   12a28:	cmp	fp, #160	; 0xa0
   12a2c:	beq	12a48 <error@@Base+0x6b0>
   12a30:	ldrsh	r3, [r0]
   12a34:	sub	r3, r3, #23
   12a38:	cmp	r3, #2
   12a3c:	movhi	r3, #0
   12a40:	movls	r3, #1
   12a44:	b	12a88 <error@@Base+0x6f0>
   12a48:	str	r9, [r6, #12]
   12a4c:	ldr	r6, [r6, #4]
   12a50:	cmp	r6, #0
   12a54:	beq	12a94 <error@@Base+0x6fc>
   12a58:	ldr	fp, [r6, #12]
   12a5c:	mov	r0, fp
   12a60:	bl	10a34 <utf8proc_get_property@plt>
   12a64:	cmp	fp, #13
   12a68:	bhi	12a28 <error@@Base+0x690>
   12a6c:	cmp	fp, #11
   12a70:	bcs	12a48 <error@@Base+0x6b0>
   12a74:	cmp	fp, #9
   12a78:	beq	12a48 <error@@Base+0x6b0>
   12a7c:	cmp	fp, #10
   12a80:	moveq	r3, r7
   12a84:	bne	12a30 <error@@Base+0x698>
   12a88:	cmp	r3, #0
   12a8c:	beq	12a4c <error@@Base+0x6b4>
   12a90:	b	12a48 <error@@Base+0x6b0>
   12a94:	mov	r7, #0
   12a98:	b	12ad4 <error@@Base+0x73c>
   12a9c:	eor	r2, r7, #1
   12aa0:	cmp	r6, #0
   12aa4:	moveq	r2, #1
   12aa8:	cmp	r2, #0
   12aac:	bne	12b00 <error@@Base+0x768>
   12ab0:	ldr	r2, [r6, #12]
   12ab4:	cmp	r2, #10
   12ab8:	cmpne	r2, #32
   12abc:	beq	12b14 <error@@Base+0x77c>
   12ac0:	subs	r7, r3, #10
   12ac4:	movne	r7, #1
   12ac8:	mov	r5, r6
   12acc:	cmp	r6, #0
   12ad0:	beq	12b4c <error@@Base+0x7b4>
   12ad4:	ldr	r6, [r5, #4]
   12ad8:	ldr	r3, [r5, #12]
   12adc:	cmp	r3, #32
   12ae0:	beq	12a9c <error@@Base+0x704>
   12ae4:	eor	r2, r7, #1
   12ae8:	cmp	r3, #10
   12aec:	movne	r2, #0
   12af0:	andeq	r2, r2, #1
   12af4:	cmp	r2, #0
   12af8:	beq	12ac0 <error@@Base+0x728>
   12afc:	b	12b20 <error@@Base+0x788>
   12b00:	cmp	r6, #0
   12b04:	movne	r3, r7
   12b08:	moveq	r3, #0
   12b0c:	cmp	r3, #0
   12b10:	beq	12b20 <error@@Base+0x788>
   12b14:	ldr	r3, [r6, #12]
   12b18:	cmp	r3, #32
   12b1c:	beq	12b38 <error@@Base+0x7a0>
   12b20:	mov	r1, r5
   12b24:	mov	r0, r8
   12b28:	bl	12f5c <error@@Base+0xbc4>
   12b2c:	mov	r0, r5
   12b30:	bl	10a28 <free@plt>
   12b34:	b	12ac8 <error@@Base+0x730>
   12b38:	ldrb	r3, [r6, #8]
   12b3c:	ldrb	r2, [r5, #8]
   12b40:	orr	r3, r3, r2
   12b44:	strb	r3, [r6, #8]
   12b48:	b	12b20 <error@@Base+0x788>
   12b4c:	ldrb	r3, [r4, #10]
   12b50:	cmp	r3, #0
   12b54:	beq	12b84 <error@@Base+0x7ec>
   12b58:	cmp	sl, #0
   12b5c:	ldrne	r4, [sl, #4]
   12b60:	ldreq	r4, [r8]
   12b64:	cmp	r4, #0
   12b68:	beq	12b84 <error@@Base+0x7ec>
   12b6c:	ldr	r0, [r4, #12]
   12b70:	bl	10a7c <utf8proc_tolower@plt>
   12b74:	str	r0, [r4, #12]
   12b78:	ldr	r4, [r4, #4]
   12b7c:	cmp	r4, #0
   12b80:	bne	12b6c <error@@Base+0x7d4>
   12b84:	add	sp, sp, #116	; 0x74
   12b88:	ldrd	r4, [sp]
   12b8c:	ldrd	r6, [sp, #8]
   12b90:	ldrd	r8, [sp, #16]
   12b94:	ldrd	sl, [sp, #24]
   12b98:	add	sp, sp, #32
   12b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   12ba0:	str	r4, [sp, #-8]!
   12ba4:	str	lr, [sp, #4]
   12ba8:	bl	10a4c <utf8proc_encode_char@plt>
   12bac:	cmp	r0, #0
   12bb0:	ble	12bc4 <error@@Base+0x82c>
   12bb4:	sxtb	r0, r0
   12bb8:	ldr	r4, [sp]
   12bbc:	add	sp, sp, #4
   12bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   12bc4:	movw	r0, #26936	; 0x6938
   12bc8:	movt	r0, #1
   12bcc:	bl	12398 <error@@Base>
   12bd0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12bd4:	strd	r6, [sp, #8]
   12bd8:	str	r8, [sp, #16]
   12bdc:	str	lr, [sp, #20]
   12be0:	mov	r4, r1
   12be4:	mov	r6, r2
   12be8:	uxtb	r0, r0
   12bec:	uxtb	r7, r3
   12bf0:	cmp	r0, #0
   12bf4:	moveq	r5, #0
   12bf8:	bne	12c38 <error@@Base+0x8a0>
   12bfc:	cmp	r4, #10
   12c00:	bne	12c4c <error@@Base+0x8b4>
   12c04:	movw	r1, #26960	; 0x6950
   12c08:	movt	r1, #1
   12c0c:	movw	r3, #13280	; 0x33e0
   12c10:	movt	r3, #1
   12c14:	cmp	r7, #0
   12c18:	moveq	r1, r3
   12c1c:	add	r0, r6, r5
   12c20:	bl	10b54 <sprintf@plt>
   12c24:	ldrd	r4, [sp]
   12c28:	ldrd	r6, [sp, #8]
   12c2c:	ldr	r8, [sp, #16]
   12c30:	add	sp, sp, #20
   12c34:	pop	{pc}		; (ldr pc, [sp], #4)
   12c38:	mov	r1, r2
   12c3c:	mov	r0, #94	; 0x5e
   12c40:	bl	12ba0 <error@@Base+0x808>
   12c44:	sxth	r5, r0
   12c48:	b	12bfc <error@@Base+0x864>
   12c4c:	mov	r0, r4
   12c50:	bl	10a34 <utf8proc_get_property@plt>
   12c54:	cmp	r4, #32
   12c58:	beq	12c78 <error@@Base+0x8e0>
   12c5c:	ldrsh	r3, [r0]
   12c60:	cmp	r3, #0
   12c64:	ble	12cc4 <error@@Base+0x92c>
   12c68:	cmp	r3, #22
   12c6c:	ble	12c78 <error@@Base+0x8e0>
   12c70:	cmp	r3, #29
   12c74:	bne	12cc4 <error@@Base+0x92c>
   12c78:	mov	r0, r4
   12c7c:	bl	10b00 <utf8proc_category@plt>
   12c80:	sub	r0, r0, #6
   12c84:	cmp	r0, #2
   12c88:	bls	12cac <error@@Base+0x914>
   12c8c:	add	r1, r6, r5
   12c90:	mov	r0, r4
   12c94:	bl	12ba0 <error@@Base+0x808>
   12c98:	add	r0, r0, r5
   12c9c:	sxth	r0, r0
   12ca0:	mov	r3, #0
   12ca4:	strb	r3, [r6, r0]
   12ca8:	b	12c24 <error@@Base+0x88c>
   12cac:	add	r1, r6, r5
   12cb0:	movw	r0, #9676	; 0x25cc
   12cb4:	bl	12ba0 <error@@Base+0x808>
   12cb8:	add	r5, r0, r5
   12cbc:	sxth	r5, r5
   12cc0:	b	12c8c <error@@Base+0x8f4>
   12cc4:	cmp	r4, #255	; 0xff
   12cc8:	mov	r2, r4
   12ccc:	movwls	r1, #26968	; 0x6958
   12cd0:	movtls	r1, #1
   12cd4:	movwhi	r1, #26976	; 0x6960
   12cd8:	movthi	r1, #1
   12cdc:	add	r0, r6, r5
   12ce0:	bl	10b54 <sprintf@plt>
   12ce4:	b	12c24 <error@@Base+0x88c>
   12ce8:	strd	r4, [sp, #-20]!	; 0xffffffec
   12cec:	strd	r6, [sp, #8]
   12cf0:	str	lr, [sp, #16]
   12cf4:	sub	sp, sp, #20
   12cf8:	mov	r7, r0
   12cfc:	mov	r0, r1
   12d00:	mov	r6, r2
   12d04:	movw	r1, #13232	; 0x33b0
   12d08:	movt	r1, #1
   12d0c:	bl	12480 <error@@Base+0xe8>
   12d10:	mov	r5, r0
   12d14:	cmp	r6, #0
   12d18:	beq	12d6c <error@@Base+0x9d4>
   12d1c:	mov	r3, r0
   12d20:	mov	r2, #55	; 0x37
   12d24:	mov	r1, #1
   12d28:	movw	r0, #26776	; 0x6898
   12d2c:	movt	r0, #1
   12d30:	bl	10a94 <fwrite@plt>
   12d34:	movw	r4, #26832	; 0x68d0
   12d38:	movt	r4, #1
   12d3c:	mov	r3, r5
   12d40:	mov	r2, #55	; 0x37
   12d44:	mov	r1, #1
   12d48:	mov	r0, r4
   12d4c:	bl	10a94 <fwrite@plt>
   12d50:	mov	r0, r5
   12d54:	blx	r6
   12d58:	mov	r3, r5
   12d5c:	mov	r2, #55	; 0x37
   12d60:	mov	r1, #1
   12d64:	mov	r0, r4
   12d68:	bl	10a94 <fwrite@plt>
   12d6c:	ldr	r4, [r7]
   12d70:	cmp	r4, #0
   12d74:	beq	12da8 <error@@Base+0xa10>
   12d78:	mov	r6, #0
   12d7c:	mov	r3, r6
   12d80:	add	r2, sp, #4
   12d84:	ldr	r1, [r4, #12]
   12d88:	ldrb	r0, [r4, #8]
   12d8c:	bl	12bd0 <error@@Base+0x838>
   12d90:	mov	r1, r5
   12d94:	add	r0, sp, #4
   12d98:	bl	10b6c <fputs@plt>
   12d9c:	ldr	r4, [r4, #4]
   12da0:	cmp	r4, #0
   12da4:	bne	12d7c <error@@Base+0x9e4>
   12da8:	mov	r0, r5
   12dac:	bl	12224 <__assert_fail@plt+0x1688>
   12db0:	add	sp, sp, #20
   12db4:	ldrd	r4, [sp]
   12db8:	ldrd	r6, [sp, #8]
   12dbc:	add	sp, sp, #16
   12dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   12dc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12dc8:	strd	r6, [sp, #8]
   12dcc:	str	r8, [sp, #16]
   12dd0:	str	lr, [sp, #20]
   12dd4:	sub	sp, sp, #8
   12dd8:	mov	r3, #0
   12ddc:	str	r3, [sp, #4]
   12de0:	ldrb	r3, [r1]
   12de4:	cmp	r3, #0
   12de8:	beq	12e38 <error@@Base+0xaa0>
   12dec:	mov	r6, r0
   12df0:	mov	r4, r1
   12df4:	mvn	r5, #0
   12df8:	mov	r7, #0
   12dfc:	add	r2, sp, #4
   12e00:	mov	r1, r5
   12e04:	mov	r0, r4
   12e08:	bl	10aac <utf8proc_iterate@plt>
   12e0c:	subs	r8, r0, #0
   12e10:	ble	12e40 <error@@Base+0xaa8>
   12e14:	ldr	r2, [sp, #4]
   12e18:	mov	r1, r7
   12e1c:	mov	r0, r6
   12e20:	bl	12794 <error@@Base+0x3fc>
   12e24:	ldrb	r3, [r4, r8]!
   12e28:	cmp	r3, #0
   12e2c:	bne	12dfc <error@@Base+0xa64>
   12e30:	mov	r0, #1
   12e34:	b	12e44 <error@@Base+0xaac>
   12e38:	mov	r0, #1
   12e3c:	b	12e44 <error@@Base+0xaac>
   12e40:	mov	r0, #0
   12e44:	add	sp, sp, #8
   12e48:	ldrd	r4, [sp]
   12e4c:	ldrd	r6, [sp, #8]
   12e50:	ldr	r8, [sp, #16]
   12e54:	add	sp, sp, #20
   12e58:	pop	{pc}		; (ldr pc, [sp], #4)
   12e5c:	str	r4, [sp, #-8]!
   12e60:	str	lr, [sp, #4]
   12e64:	mov	r4, r0
   12e68:	str	r1, [r2]
   12e6c:	str	r3, [r2, #4]
   12e70:	cmp	r1, #0
   12e74:	strne	r2, [r1, #4]
   12e78:	streq	r2, [r0]
   12e7c:	cmp	r3, #0
   12e80:	strne	r2, [r3]
   12e84:	streq	r2, [r0, #4]
   12e88:	ldr	r0, [r0, #8]
   12e8c:	cmp	r0, #0
   12e90:	beq	12ea0 <error@@Base+0xb08>
   12e94:	bl	10a28 <free@plt>
   12e98:	mov	r3, #0
   12e9c:	str	r3, [r4, #8]
   12ea0:	ldr	r3, [r4, #12]
   12ea4:	add	r3, r3, #1
   12ea8:	str	r3, [r4, #12]
   12eac:	ldr	r4, [sp]
   12eb0:	add	sp, sp, #4
   12eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   12eb8:	mov	r3, #0
   12ebc:	str	r3, [r0, #4]
   12ec0:	str	r3, [r0]
   12ec4:	str	r3, [r0, #8]
   12ec8:	str	r3, [r0, #12]
   12ecc:	bx	lr
   12ed0:	str	r4, [sp, #-8]!
   12ed4:	str	lr, [sp, #4]
   12ed8:	ldr	r3, [r0]
   12edc:	mov	r2, r1
   12ee0:	mov	r1, #0
   12ee4:	bl	12e5c <error@@Base+0xac4>
   12ee8:	ldr	r4, [sp]
   12eec:	add	sp, sp, #4
   12ef0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ef4:	str	r4, [sp, #-8]!
   12ef8:	str	lr, [sp, #4]
   12efc:	mov	r3, #0
   12f00:	mov	r2, r1
   12f04:	ldr	r1, [r0, #4]
   12f08:	bl	12e5c <error@@Base+0xac4>
   12f0c:	ldr	r4, [sp]
   12f10:	add	sp, sp, #4
   12f14:	pop	{pc}		; (ldr pc, [sp], #4)
   12f18:	str	r4, [sp, #-8]!
   12f1c:	str	lr, [sp, #4]
   12f20:	mov	ip, r2
   12f24:	mov	r3, r2
   12f28:	mov	r2, r1
   12f2c:	ldr	r1, [ip]
   12f30:	bl	12e5c <error@@Base+0xac4>
   12f34:	ldr	r4, [sp]
   12f38:	add	sp, sp, #4
   12f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f40:	str	r4, [sp, #-8]!
   12f44:	str	lr, [sp, #4]
   12f48:	ldr	r3, [r1, #4]
   12f4c:	bl	12e5c <error@@Base+0xac4>
   12f50:	ldr	r4, [sp]
   12f54:	add	sp, sp, #4
   12f58:	pop	{pc}		; (ldr pc, [sp], #4)
   12f5c:	str	r4, [sp, #-8]!
   12f60:	str	lr, [sp, #4]
   12f64:	mov	r4, r0
   12f68:	ldr	r3, [r1]
   12f6c:	cmp	r3, #0
   12f70:	ldrne	r2, [r1, #4]
   12f74:	strne	r2, [r3, #4]
   12f78:	ldreq	r3, [r1, #4]
   12f7c:	streq	r3, [r0]
   12f80:	ldr	r3, [r1, #4]
   12f84:	cmp	r3, #0
   12f88:	ldrne	r2, [r1]
   12f8c:	strne	r2, [r3]
   12f90:	ldreq	r3, [r1]
   12f94:	streq	r3, [r0, #4]
   12f98:	mov	r3, #0
   12f9c:	str	r3, [r1, #4]
   12fa0:	str	r3, [r1]
   12fa4:	ldr	r0, [r0, #8]
   12fa8:	cmp	r0, r3
   12fac:	beq	12fbc <error@@Base+0xc24>
   12fb0:	bl	10a28 <free@plt>
   12fb4:	mov	r3, #0
   12fb8:	str	r3, [r4, #8]
   12fbc:	ldr	r3, [r4, #12]
   12fc0:	sub	r3, r3, #1
   12fc4:	str	r3, [r4, #12]
   12fc8:	ldr	r4, [sp]
   12fcc:	add	sp, sp, #4
   12fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fd4:	ldr	r3, [r0, #8]
   12fd8:	cmp	r3, #0
   12fdc:	bxne	lr
   12fe0:	ldr	r3, [r0, #12]
   12fe4:	cmp	r3, #0
   12fe8:	bxeq	lr
   12fec:	str	r4, [sp, #-8]!
   12ff0:	str	lr, [sp, #4]
   12ff4:	mov	r4, r0
   12ff8:	mov	r1, #4
   12ffc:	mov	r0, r3
   13000:	bl	123d8 <error@@Base+0x40>
   13004:	str	r0, [r4, #8]
   13008:	ldr	r3, [r4]
   1300c:	cmp	r3, #0
   13010:	beq	13030 <error@@Base+0xc98>
   13014:	mov	r2, #0
   13018:	ldr	r1, [r4, #8]
   1301c:	str	r3, [r1, r2]
   13020:	ldr	r3, [r3, #4]
   13024:	add	r2, r2, #4
   13028:	cmp	r3, #0
   1302c:	bne	13018 <error@@Base+0xc80>
   13030:	ldr	r4, [sp]
   13034:	add	sp, sp, #4
   13038:	pop	{pc}		; (ldr pc, [sp], #4)
   1303c:	strd	r4, [sp, #-16]!
   13040:	str	r6, [sp, #8]
   13044:	str	lr, [sp, #12]
   13048:	mov	r5, r0
   1304c:	mov	r6, r1
   13050:	ldr	r4, [r0]
   13054:	cmp	r4, #0
   13058:	beq	1307c <error@@Base+0xce4>
   1305c:	mov	r1, r4
   13060:	mov	r0, r5
   13064:	bl	12f5c <error@@Base+0xbc4>
   13068:	mov	r0, r4
   1306c:	blx	r6
   13070:	ldr	r4, [r5]
   13074:	cmp	r4, #0
   13078:	bne	1305c <error@@Base+0xcc4>
   1307c:	ldrd	r4, [sp]
   13080:	ldr	r6, [sp, #8]
   13084:	add	sp, sp, #12
   13088:	pop	{pc}		; (ldr pc, [sp], #4)
   1308c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13090:	strd	r6, [sp, #8]
   13094:	strd	r8, [sp, #16]
   13098:	str	sl, [sp, #24]
   1309c:	str	lr, [sp, #28]
   130a0:	mov	r8, r0
   130a4:	mov	r9, r1
   130a8:	movw	r3, #28992	; 0x7140
   130ac:	movt	r3, #2
   130b0:	ldr	r3, [r3]
   130b4:	ldr	r6, [r3, r0, lsl #2]
   130b8:	cmp	r0, r1
   130bc:	movge	r4, r1
   130c0:	movge	r7, r0
   130c4:	bge	13130 <error@@Base+0xd98>
   130c8:	mov	r4, r1
   130cc:	mov	sl, r0
   130d0:	movw	r5, #28992	; 0x7140
   130d4:	movt	r5, #2
   130d8:	b	13194 <error@@Base+0xdfc>
   130dc:	mov	r7, r4
   130e0:	cmp	sl, r7
   130e4:	beq	1312c <error@@Base+0xd94>
   130e8:	ldr	r3, [r5]
   130ec:	add	r4, sl, #1
   130f0:	ldr	r2, [r3, r7, lsl #2]
   130f4:	str	r2, [r3, sl, lsl #2]
   130f8:	cmp	r4, r7
   130fc:	movge	sl, r4
   13100:	bge	13174 <error@@Base+0xddc>
   13104:	ldr	r2, [r5]
   13108:	ldr	r3, [r5, #4]
   1310c:	ldr	r1, [r2, r4, lsl #2]
   13110:	mov	r0, r6
   13114:	blx	r3
   13118:	cmp	r0, #0
   1311c:	ble	13170 <error@@Base+0xdd8>
   13120:	add	r4, r4, #1
   13124:	cmp	r4, r7
   13128:	bne	13104 <error@@Base+0xd6c>
   1312c:	mov	r4, r7
   13130:	movw	r3, #28992	; 0x7140
   13134:	movt	r3, #2
   13138:	ldr	r3, [r3]
   1313c:	str	r6, [r3, r4, lsl #2]
   13140:	sub	r1, r4, #1
   13144:	cmp	r8, r1
   13148:	blt	131d8 <error@@Base+0xe40>
   1314c:	add	r0, r7, #1
   13150:	cmp	r9, r0
   13154:	bgt	131e4 <error@@Base+0xe4c>
   13158:	ldrd	r4, [sp]
   1315c:	ldrd	r6, [sp, #8]
   13160:	ldrd	r8, [sp, #16]
   13164:	ldr	sl, [sp, #24]
   13168:	add	sp, sp, #28
   1316c:	pop	{pc}		; (ldr pc, [sp], #4)
   13170:	mov	sl, r4
   13174:	cmp	sl, r7
   13178:	beq	1312c <error@@Base+0xd94>
   1317c:	ldr	r3, [r5]
   13180:	sub	r4, r7, #1
   13184:	ldr	r2, [r3, sl, lsl #2]
   13188:	str	r2, [r3, r7, lsl #2]
   1318c:	cmp	r4, sl
   13190:	ble	131d0 <error@@Base+0xe38>
   13194:	cmp	sl, r4
   13198:	movge	r7, r4
   1319c:	bge	130e0 <error@@Base+0xd48>
   131a0:	ldr	r2, [r5]
   131a4:	ldr	r3, [r5, #4]
   131a8:	ldr	r1, [r2, r4, lsl #2]
   131ac:	mov	r0, r6
   131b0:	blx	r3
   131b4:	cmp	r0, #0
   131b8:	bge	130dc <error@@Base+0xd44>
   131bc:	sub	r4, r4, #1
   131c0:	cmp	r4, sl
   131c4:	bne	131a0 <error@@Base+0xe08>
   131c8:	mov	r7, sl
   131cc:	b	1312c <error@@Base+0xd94>
   131d0:	mov	r7, sl
   131d4:	b	13130 <error@@Base+0xd98>
   131d8:	mov	r0, r8
   131dc:	bl	1308c <error@@Base+0xcf4>
   131e0:	b	1314c <error@@Base+0xdb4>
   131e4:	mov	r1, r9
   131e8:	bl	1308c <error@@Base+0xcf4>
   131ec:	b	13158 <error@@Base+0xdc0>
   131f0:	cmp	r0, #1
   131f4:	bxle	lr
   131f8:	str	r4, [sp, #-8]!
   131fc:	str	lr, [sp, #4]
   13200:	movw	r3, #28992	; 0x7140
   13204:	movt	r3, #2
   13208:	str	r1, [r3]
   1320c:	str	r2, [r3, #4]
   13210:	sub	r1, r0, #1
   13214:	mov	r0, #0
   13218:	bl	1308c <error@@Base+0xcf4>
   1321c:	ldr	r4, [sp]
   13220:	add	sp, sp, #4
   13224:	pop	{pc}		; (ldr pc, [sp], #4)
   13228:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1322c:	mov	r7, r0
   13230:	ldr	r6, [pc, #72]	; 13280 <error@@Base+0xee8>
   13234:	ldr	r5, [pc, #72]	; 13284 <error@@Base+0xeec>
   13238:	add	r6, pc, r6
   1323c:	add	r5, pc, r5
   13240:	sub	r6, r6, r5
   13244:	mov	r8, r1
   13248:	mov	r9, r2
   1324c:	bl	109cc <calloc@plt-0x20>
   13250:	asrs	r6, r6, #2
   13254:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13258:	mov	r4, #0
   1325c:	add	r4, r4, #1
   13260:	ldr	r3, [r5], #4
   13264:	mov	r2, r9
   13268:	mov	r1, r8
   1326c:	mov	r0, r7
   13270:	blx	r3
   13274:	cmp	r6, r4
   13278:	bne	1325c <error@@Base+0xec4>
   1327c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13280:	andeq	r3, r1, r4, asr #23
   13284:			; <UNDEFINED> instruction: 0x00013bbc
   13288:	bx	lr

Disassembly of section .fini:

0001328c <.fini>:
   1328c:	push	{r3, lr}
   13290:	pop	{r3, pc}
