
../repos/coreutils/src/od:     file format elf32-littlearm


Disassembly of section .init:

00011050 <.init>:
   11050:	push	{r3, lr}
   11054:	bl	1137c <__assert_fail@plt+0x48>
   11058:	pop	{r3, pc}

Disassembly of section .plt:

0001105c <calloc@plt-0x14>:
   1105c:	push	{lr}		; (str lr, [sp, #-4]!)
   11060:	ldr	lr, [pc, #4]	; 1106c <calloc@plt-0x4>
   11064:	add	lr, pc, lr
   11068:	ldr	pc, [lr, #8]!
   1106c:	muleq	r1, r4, pc	; <UNPREDICTABLE>

00011070 <calloc@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #106496	; 0x1a000
   11078:	ldr	pc, [ip, #3988]!	; 0xf94

0001107c <fputs_unlocked@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #106496	; 0x1a000
   11084:	ldr	pc, [ip, #3980]!	; 0xf8c

00011088 <raise@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #106496	; 0x1a000
   11090:	ldr	pc, [ip, #3972]!	; 0xf84

00011094 <strcmp@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #106496	; 0x1a000
   1109c:	ldr	pc, [ip, #3964]!	; 0xf7c

000110a0 <fflush@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #106496	; 0x1a000
   110a8:	ldr	pc, [ip, #3956]!	; 0xf74

000110ac <free@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #106496	; 0x1a000
   110b4:	ldr	pc, [ip, #3948]!	; 0xf6c

000110b8 <ferror@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #106496	; 0x1a000
   110c0:	ldr	pc, [ip, #3940]!	; 0xf64

000110c4 <_exit@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #106496	; 0x1a000
   110cc:	ldr	pc, [ip, #3932]!	; 0xf5c

000110d0 <memcpy@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #106496	; 0x1a000
   110d8:	ldr	pc, [ip, #3924]!	; 0xf54

000110dc <__strtoull_internal@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #106496	; 0x1a000
   110e4:	ldr	pc, [ip, #3916]!	; 0xf4c

000110e8 <mbsinit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #106496	; 0x1a000
   110f0:	ldr	pc, [ip, #3908]!	; 0xf44

000110f4 <strtold@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #106496	; 0x1a000
   110fc:	ldr	pc, [ip, #3900]!	; 0xf3c

00011100 <memcmp@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #106496	; 0x1a000
   11108:	ldr	pc, [ip, #3892]!	; 0xf34

0001110c <dcgettext@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #106496	; 0x1a000
   11114:	ldr	pc, [ip, #3884]!	; 0xf2c

00011118 <realloc@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #106496	; 0x1a000
   11120:	ldr	pc, [ip, #3876]!	; 0xf24

00011124 <textdomain@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #106496	; 0x1a000
   1112c:	ldr	pc, [ip, #3868]!	; 0xf1c

00011130 <iswprint@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #106496	; 0x1a000
   11138:	ldr	pc, [ip, #3860]!	; 0xf14

0001113c <__fxstat64@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #106496	; 0x1a000
   11144:	ldr	pc, [ip, #3852]!	; 0xf0c

00011148 <fwrite@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #106496	; 0x1a000
   11150:	ldr	pc, [ip, #3844]!	; 0xf04

00011154 <lseek64@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #106496	; 0x1a000
   1115c:	ldr	pc, [ip, #3836]!	; 0xefc

00011160 <__ctype_get_mb_cur_max@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #106496	; 0x1a000
   11168:	ldr	pc, [ip, #3828]!	; 0xef4

0001116c <__fpending@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #106496	; 0x1a000
   11174:	ldr	pc, [ip, #3820]!	; 0xeec

00011178 <mbrtowc@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #106496	; 0x1a000
   11180:	ldr	pc, [ip, #3812]!	; 0xee4

00011184 <error@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #106496	; 0x1a000
   1118c:	ldr	pc, [ip, #3804]!	; 0xedc

00011190 <strtof@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #106496	; 0x1a000
   11198:	ldr	pc, [ip, #3796]!	; 0xed4

0001119c <malloc@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #106496	; 0x1a000
   111a4:	ldr	pc, [ip, #3788]!	; 0xecc

000111a8 <__libc_start_main@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #106496	; 0x1a000
   111b0:	ldr	pc, [ip, #3780]!	; 0xec4

000111b4 <__vfprintf_chk@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #106496	; 0x1a000
   111bc:	ldr	pc, [ip, #3772]!	; 0xebc

000111c0 <__freading@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #106496	; 0x1a000
   111c8:	ldr	pc, [ip, #3764]!	; 0xeb4

000111cc <__gmon_start__@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #106496	; 0x1a000
   111d4:	ldr	pc, [ip, #3756]!	; 0xeac

000111d8 <getopt_long@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #106496	; 0x1a000
   111e0:	ldr	pc, [ip, #3748]!	; 0xea4

000111e4 <__ctype_b_loc@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #106496	; 0x1a000
   111ec:	ldr	pc, [ip, #3740]!	; 0xe9c

000111f0 <exit@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #106496	; 0x1a000
   111f8:	ldr	pc, [ip, #3732]!	; 0xe94

000111fc <strlen@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #106496	; 0x1a000
   11204:	ldr	pc, [ip, #3724]!	; 0xe8c

00011208 <strchr@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #106496	; 0x1a000
   11210:	ldr	pc, [ip, #3716]!	; 0xe84

00011214 <__errno_location@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #106496	; 0x1a000
   1121c:	ldr	pc, [ip, #3708]!	; 0xe7c

00011220 <__sprintf_chk@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #106496	; 0x1a000
   11228:	ldr	pc, [ip, #3700]!	; 0xe74

0001122c <__cxa_atexit@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #106496	; 0x1a000
   11234:	ldr	pc, [ip, #3692]!	; 0xe6c

00011238 <setvbuf@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #106496	; 0x1a000
   11240:	ldr	pc, [ip, #3684]!	; 0xe64

00011244 <memset@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #106496	; 0x1a000
   1124c:	ldr	pc, [ip, #3676]!	; 0xe5c

00011250 <fgetc@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #106496	; 0x1a000
   11258:	ldr	pc, [ip, #3668]!	; 0xe54

0001125c <__printf_chk@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #106496	; 0x1a000
   11264:	ldr	pc, [ip, #3660]!	; 0xe4c

00011268 <strtod@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #106496	; 0x1a000
   11270:	ldr	pc, [ip, #3652]!	; 0xe44

00011274 <fileno@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #106496	; 0x1a000
   1127c:	ldr	pc, [ip, #3644]!	; 0xe3c

00011280 <__fprintf_chk@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #106496	; 0x1a000
   11288:	ldr	pc, [ip, #3636]!	; 0xe34

0001128c <fclose@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #106496	; 0x1a000
   11294:	ldr	pc, [ip, #3628]!	; 0xe2c

00011298 <fseeko64@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #106496	; 0x1a000
   112a0:	ldr	pc, [ip, #3620]!	; 0xe24

000112a4 <__overflow@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #106496	; 0x1a000
   112ac:	ldr	pc, [ip, #3612]!	; 0xe1c

000112b0 <setlocale@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #106496	; 0x1a000
   112b8:	ldr	pc, [ip, #3604]!	; 0xe14

000112bc <strrchr@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #106496	; 0x1a000
   112c4:	ldr	pc, [ip, #3596]!	; 0xe0c

000112c8 <nl_langinfo@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #106496	; 0x1a000
   112d0:	ldr	pc, [ip, #3588]!	; 0xe04

000112d4 <localeconv@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #106496	; 0x1a000
   112dc:	ldr	pc, [ip, #3580]!	; 0xdfc

000112e0 <clearerr_unlocked@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #106496	; 0x1a000
   112e8:	ldr	pc, [ip, #3572]!	; 0xdf4

000112ec <fopen64@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #106496	; 0x1a000
   112f4:	ldr	pc, [ip, #3564]!	; 0xdec

000112f8 <bindtextdomain@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #106496	; 0x1a000
   11300:	ldr	pc, [ip, #3556]!	; 0xde4

00011304 <fread_unlocked@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #106496	; 0x1a000
   1130c:	ldr	pc, [ip, #3548]!	; 0xddc

00011310 <strncmp@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #106496	; 0x1a000
   11318:	ldr	pc, [ip, #3540]!	; 0xdd4

0001131c <abort@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #106496	; 0x1a000
   11324:	ldr	pc, [ip, #3532]!	; 0xdcc

00011328 <__snprintf_chk@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #106496	; 0x1a000
   11330:	ldr	pc, [ip, #3524]!	; 0xdc4

00011334 <__assert_fail@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #106496	; 0x1a000
   1133c:	ldr	pc, [ip, #3516]!	; 0xdbc

Disassembly of section .text:

00011340 <.text>:
   11340:	mov	fp, #0
   11344:	mov	lr, #0
   11348:	pop	{r1}		; (ldr r1, [sp], #4)
   1134c:	mov	r2, sp
   11350:	push	{r2}		; (str r2, [sp, #-4]!)
   11354:	push	{r0}		; (str r0, [sp, #-4]!)
   11358:	ldr	ip, [pc, #16]	; 11370 <__assert_fail@plt+0x3c>
   1135c:	push	{ip}		; (str ip, [sp, #-4]!)
   11360:	ldr	r0, [pc, #12]	; 11374 <__assert_fail@plt+0x40>
   11364:	ldr	r3, [pc, #12]	; 11378 <__assert_fail@plt+0x44>
   11368:	bl	111a8 <__libc_start_main@plt>
   1136c:	bl	1131c <abort@plt>
   11370:	muleq	r1, ip, ip
   11374:	andeq	r1, r1, ip, asr #15
   11378:	andeq	r9, r1, ip, lsr ip
   1137c:	ldr	r3, [pc, #20]	; 11398 <__assert_fail@plt+0x64>
   11380:	ldr	r2, [pc, #20]	; 1139c <__assert_fail@plt+0x68>
   11384:	add	r3, pc, r3
   11388:	ldr	r2, [r3, r2]
   1138c:	cmp	r2, #0
   11390:	bxeq	lr
   11394:	b	111cc <__gmon_start__@plt>
   11398:	andeq	sl, r1, r4, ror ip
   1139c:	strdeq	r0, [r0], -ip
   113a0:	ldr	r0, [pc, #24]	; 113c0 <__assert_fail@plt+0x8c>
   113a4:	ldr	r3, [pc, #24]	; 113c4 <__assert_fail@plt+0x90>
   113a8:	cmp	r3, r0
   113ac:	bxeq	lr
   113b0:	ldr	r3, [pc, #16]	; 113c8 <__assert_fail@plt+0x94>
   113b4:	cmp	r3, #0
   113b8:	bxeq	lr
   113bc:	bx	r3
   113c0:	andeq	ip, r2, r8, asr r1
   113c4:	andeq	ip, r2, r8, asr r1
   113c8:	andeq	r0, r0, r0
   113cc:	ldr	r0, [pc, #36]	; 113f8 <__assert_fail@plt+0xc4>
   113d0:	ldr	r1, [pc, #36]	; 113fc <__assert_fail@plt+0xc8>
   113d4:	sub	r1, r1, r0
   113d8:	asr	r1, r1, #2
   113dc:	add	r1, r1, r1, lsr #31
   113e0:	asrs	r1, r1, #1
   113e4:	bxeq	lr
   113e8:	ldr	r3, [pc, #16]	; 11400 <__assert_fail@plt+0xcc>
   113ec:	cmp	r3, #0
   113f0:	bxeq	lr
   113f4:	bx	r3
   113f8:	andeq	ip, r2, r8, asr r1
   113fc:	andeq	ip, r2, r8, asr r1
   11400:	andeq	r0, r0, r0
   11404:	push	{r4, lr}
   11408:	ldr	r4, [pc, #24]	; 11428 <__assert_fail@plt+0xf4>
   1140c:	ldrb	r3, [r4]
   11410:	cmp	r3, #0
   11414:	popne	{r4, pc}
   11418:	bl	113a0 <__assert_fail@plt+0x6c>
   1141c:	mov	r3, #1
   11420:	strb	r3, [r4]
   11424:	pop	{r4, pc}
   11428:	andeq	ip, r2, ip, ror r1
   1142c:	b	113cc <__assert_fail@plt+0x98>
   11430:	push	{fp, lr}
   11434:	mov	fp, sp
   11438:	sub	sp, sp, #64	; 0x40
   1143c:	mov	r4, r0
   11440:	cmp	r0, #0
   11444:	bne	11788 <__assert_fail@plt+0x454>
   11448:	movw	r1, #40171	; 0x9ceb
   1144c:	mov	r0, #0
   11450:	mov	r2, #5
   11454:	movt	r1, #1
   11458:	bl	1110c <dcgettext@plt>
   1145c:	mov	r1, r0
   11460:	movw	r0, #49708	; 0xc22c
   11464:	movt	r0, #2
   11468:	ldr	r2, [r0]
   1146c:	mov	r0, #1
   11470:	mov	r3, r2
   11474:	str	r2, [sp]
   11478:	bl	1125c <__printf_chk@plt>
   1147c:	movw	r1, #40334	; 0x9d8e
   11480:	mov	r0, #0
   11484:	mov	r2, #5
   11488:	movt	r1, #1
   1148c:	bl	1110c <dcgettext@plt>
   11490:	movw	r7, #49524	; 0xc174
   11494:	movt	r7, #2
   11498:	ldr	r1, [r7]
   1149c:	bl	1107c <fputs_unlocked@plt>
   114a0:	movw	r1, #43814	; 0xab26
   114a4:	mov	r0, #0
   114a8:	mov	r2, #5
   114ac:	movt	r1, #1
   114b0:	bl	1110c <dcgettext@plt>
   114b4:	ldr	r1, [r7]
   114b8:	bl	1107c <fputs_unlocked@plt>
   114bc:	movw	r1, #40516	; 0x9e44
   114c0:	mov	r0, #0
   114c4:	mov	r2, #5
   114c8:	movt	r1, #1
   114cc:	bl	1110c <dcgettext@plt>
   114d0:	ldr	r1, [r7]
   114d4:	bl	1107c <fputs_unlocked@plt>
   114d8:	movw	r1, #43870	; 0xab5e
   114dc:	mov	r0, #0
   114e0:	mov	r2, #5
   114e4:	movt	r1, #1
   114e8:	bl	1110c <dcgettext@plt>
   114ec:	ldr	r1, [r7]
   114f0:	bl	1107c <fputs_unlocked@plt>
   114f4:	movw	r1, #40907	; 0x9fcb
   114f8:	mov	r0, #0
   114fc:	mov	r2, #5
   11500:	movt	r1, #1
   11504:	bl	1110c <dcgettext@plt>
   11508:	ldr	r1, [r7]
   1150c:	bl	1107c <fputs_unlocked@plt>
   11510:	movw	r1, #41194	; 0xa0ea
   11514:	mov	r0, #0
   11518:	mov	r2, #5
   1151c:	movt	r1, #1
   11520:	bl	1110c <dcgettext@plt>
   11524:	ldr	r1, [r7]
   11528:	bl	1107c <fputs_unlocked@plt>
   1152c:	movw	r1, #41746	; 0xa312
   11530:	mov	r0, #0
   11534:	mov	r2, #5
   11538:	movt	r1, #1
   1153c:	bl	1110c <dcgettext@plt>
   11540:	ldr	r1, [r7]
   11544:	bl	1107c <fputs_unlocked@plt>
   11548:	movw	r1, #41791	; 0xa33f
   1154c:	mov	r0, #0
   11550:	mov	r2, #5
   11554:	movt	r1, #1
   11558:	bl	1110c <dcgettext@plt>
   1155c:	ldr	r1, [r7]
   11560:	bl	1107c <fputs_unlocked@plt>
   11564:	movw	r1, #41845	; 0xa375
   11568:	mov	r0, #0
   1156c:	mov	r2, #5
   11570:	movt	r1, #1
   11574:	bl	1110c <dcgettext@plt>
   11578:	ldr	r1, [r7]
   1157c:	bl	1107c <fputs_unlocked@plt>
   11580:	movw	r1, #42160	; 0xa4b0
   11584:	mov	r0, #0
   11588:	mov	r2, #5
   1158c:	movt	r1, #1
   11590:	bl	1110c <dcgettext@plt>
   11594:	ldr	r1, [r7]
   11598:	bl	1107c <fputs_unlocked@plt>
   1159c:	movw	r1, #42434	; 0xa5c2
   115a0:	mov	r0, #0
   115a4:	mov	r2, #5
   115a8:	movt	r1, #1
   115ac:	bl	1110c <dcgettext@plt>
   115b0:	ldr	r1, [r7]
   115b4:	bl	1107c <fputs_unlocked@plt>
   115b8:	movw	r1, #42600	; 0xa668
   115bc:	mov	r0, #0
   115c0:	mov	r2, #5
   115c4:	movt	r1, #1
   115c8:	bl	1110c <dcgettext@plt>
   115cc:	ldr	r1, [r7]
   115d0:	bl	1107c <fputs_unlocked@plt>
   115d4:	movw	r1, #42849	; 0xa761
   115d8:	mov	r0, #0
   115dc:	mov	r2, #5
   115e0:	movt	r1, #1
   115e4:	bl	1110c <dcgettext@plt>
   115e8:	ldr	r1, [r7]
   115ec:	bl	1107c <fputs_unlocked@plt>
   115f0:	movw	r1, #43093	; 0xa855
   115f4:	mov	r0, #0
   115f8:	mov	r2, #5
   115fc:	movt	r1, #1
   11600:	bl	1110c <dcgettext@plt>
   11604:	ldr	r1, [r7]
   11608:	bl	1107c <fputs_unlocked@plt>
   1160c:	movw	r1, #43187	; 0xa8b3
   11610:	mov	r0, #0
   11614:	mov	r2, #5
   11618:	movt	r1, #1
   1161c:	bl	1110c <dcgettext@plt>
   11620:	ldr	r1, [r7]
   11624:	bl	1107c <fputs_unlocked@plt>
   11628:	movw	r0, #45376	; 0xb140
   1162c:	mov	r2, #48	; 0x30
   11630:	add	r6, sp, #8
   11634:	movw	r5, #43419	; 0xa99b
   11638:	movt	r0, #1
   1163c:	movt	r5, #1
   11640:	add	r1, r0, #32
   11644:	add	r3, r0, #16
   11648:	vld1.64	{d18-d19}, [r0], r2
   1164c:	vld1.64	{d16-d17}, [r1]
   11650:	vld1.64	{d20-d21}, [r3]
   11654:	add	r1, r6, #32
   11658:	vldr	d22, [r0]
   1165c:	add	r0, r6, #16
   11660:	vst1.64	{d16-d17}, [r1]
   11664:	movw	r1, #43945	; 0xaba9
   11668:	vst1.64	{d20-d21}, [r0]
   1166c:	mov	r0, r6
   11670:	vst1.64	{d18-d19}, [r0], r2
   11674:	movt	r1, #1
   11678:	vstr	d22, [r0]
   1167c:	mov	r0, r5
   11680:	bl	11094 <strcmp@plt>
   11684:	cmp	r0, #0
   11688:	ldrne	r1, [r6, #8]!
   1168c:	cmpne	r1, #0
   11690:	bne	1167c <__assert_fail@plt+0x348>
   11694:	ldr	r6, [r6, #4]
   11698:	movw	r1, #44040	; 0xac08
   1169c:	mov	r0, #0
   116a0:	mov	r2, #5
   116a4:	movt	r1, #1
   116a8:	bl	1110c <dcgettext@plt>
   116ac:	movw	r2, #43579	; 0xaa3b
   116b0:	movw	r3, #44063	; 0xac1f
   116b4:	mov	r1, r0
   116b8:	mov	r0, #1
   116bc:	movt	r2, #1
   116c0:	movt	r3, #1
   116c4:	bl	1125c <__printf_chk@plt>
   116c8:	cmp	r6, #0
   116cc:	mov	r0, #5
   116d0:	mov	r1, #0
   116d4:	moveq	r6, r5
   116d8:	bl	112b0 <setlocale@plt>
   116dc:	cmp	r0, #0
   116e0:	beq	11718 <__assert_fail@plt+0x3e4>
   116e4:	movw	r1, #44103	; 0xac47
   116e8:	mov	r2, #3
   116ec:	movt	r1, #1
   116f0:	bl	11310 <strncmp@plt>
   116f4:	cmp	r0, #0
   116f8:	beq	11718 <__assert_fail@plt+0x3e4>
   116fc:	movw	r1, #44107	; 0xac4b
   11700:	mov	r0, #0
   11704:	mov	r2, #5
   11708:	movt	r1, #1
   1170c:	bl	1110c <dcgettext@plt>
   11710:	ldr	r1, [r7]
   11714:	bl	1107c <fputs_unlocked@plt>
   11718:	movw	r1, #44178	; 0xac92
   1171c:	mov	r0, #0
   11720:	mov	r2, #5
   11724:	movt	r1, #1
   11728:	bl	1110c <dcgettext@plt>
   1172c:	movw	r2, #44063	; 0xac1f
   11730:	mov	r1, r0
   11734:	mov	r0, #1
   11738:	mov	r3, r5
   1173c:	movt	r2, #1
   11740:	bl	1125c <__printf_chk@plt>
   11744:	movw	r1, #44205	; 0xacad
   11748:	mov	r0, #0
   1174c:	mov	r2, #5
   11750:	movt	r1, #1
   11754:	bl	1110c <dcgettext@plt>
   11758:	movw	r3, #44255	; 0xacdf
   1175c:	mov	r1, r0
   11760:	movw	r0, #43973	; 0xabc5
   11764:	cmp	r6, r5
   11768:	mov	r2, r6
   1176c:	movt	r0, #1
   11770:	movt	r3, #1
   11774:	moveq	r3, r0
   11778:	mov	r0, #1
   1177c:	bl	1125c <__printf_chk@plt>
   11780:	mov	r0, r4
   11784:	bl	111f0 <exit@plt>
   11788:	movw	r0, #49512	; 0xc168
   1178c:	movw	r1, #40132	; 0x9cc4
   11790:	mov	r2, #5
   11794:	movt	r0, #2
   11798:	movt	r1, #1
   1179c:	ldr	r5, [r0]
   117a0:	mov	r0, #0
   117a4:	bl	1110c <dcgettext@plt>
   117a8:	mov	r2, r0
   117ac:	movw	r0, #49708	; 0xc22c
   117b0:	mov	r1, #1
   117b4:	movt	r0, #2
   117b8:	ldr	r3, [r0]
   117bc:	mov	r0, r5
   117c0:	bl	11280 <__fprintf_chk@plt>
   117c4:	mov	r0, r4
   117c8:	bl	111f0 <exit@plt>
   117cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117d0:	add	fp, sp, #28
   117d4:	sub	sp, sp, #156	; 0x9c
   117d8:	sub	sp, sp, #8192	; 0x2000
   117dc:	mov	r6, r0
   117e0:	ldr	r0, [r1]
   117e4:	mov	r4, r1
   117e8:	bl	15bd8 <__assert_fail@plt+0x48a4>
   117ec:	movw	r1, #44255	; 0xacdf
   117f0:	mov	r0, #6
   117f4:	mov	r7, #6
   117f8:	movt	r1, #1
   117fc:	bl	112b0 <setlocale@plt>
   11800:	movw	r5, #43583	; 0xaa3f
   11804:	movw	r1, #43422	; 0xa99e
   11808:	movt	r5, #1
   1180c:	movt	r1, #1
   11810:	mov	r0, r5
   11814:	bl	112f8 <bindtextdomain@plt>
   11818:	mov	r0, r5
   1181c:	bl	11124 <textdomain@plt>
   11820:	movw	r0, #21800	; 0x5528
   11824:	movt	r0, #1
   11828:	bl	19ca0 <__assert_fail@plt+0x896c>
   1182c:	movw	r3, #49576	; 0xc1a8
   11830:	vmov.i32	q8, #0	; 0x00000000
   11834:	movw	r5, #13088	; 0x3320
   11838:	mov	r9, #0
   1183c:	movw	sl, #45085	; 0xb01d
   11840:	mov	r8, #1
   11844:	movt	r3, #2
   11848:	movt	r5, #1
   1184c:	movt	sl, #1
   11850:	add	r0, r3, #88	; 0x58
   11854:	vst1.64	{d16-d17}, [r0]
   11858:	add	r0, r3, #104	; 0x68
   1185c:	vst1.64	{d16-d17}, [r0]
   11860:	movw	r0, #49536	; 0xc180
   11864:	movt	r0, #2
   11868:	add	r1, r0, #16
   1186c:	mov	r2, r0
   11870:	vst1.64	{d16-d17}, [r1]
   11874:	mov	r1, #32
   11878:	vst1.64	{d16-d17}, [r2], r1
   1187c:	mov	r1, #7
   11880:	str	r1, [r2]
   11884:	mov	r2, #5
   11888:	str	r7, [r0, #16]
   1188c:	movw	r7, #45120	; 0xb040
   11890:	mov	r0, #0
   11894:	str	r2, [r3, #120]	; 0x78
   11898:	mov	r2, #8
   1189c:	str	r9, [r3, #12]
   118a0:	str	r9, [r3, #16]
   118a4:	str	r9, [r3, #20]
   118a8:	str	r5, [r3, #24]
   118ac:	movt	r7, #1
   118b0:	str	r0, [sp, #36]	; 0x24
   118b4:	str	r2, [r3, #28]
   118b8:	str	r1, [r3, #32]
   118bc:	mov	r1, #2
   118c0:	str	r8, [r3, #92]	; 0x5c
   118c4:	str	r1, [r3, #96]	; 0x60
   118c8:	mov	r1, #4
   118cc:	str	r1, [r3, #104]	; 0x68
   118d0:	strb	r9, [r3]
   118d4:	b	118e0 <__assert_fail@plt+0x5ac>
   118d8:	bl	13470 <__assert_fail@plt+0x213c>
   118dc:	and	r8, r8, r0
   118e0:	mvn	r0, #0
   118e4:	mov	r1, r4
   118e8:	mov	r2, sl
   118ec:	mov	r3, r7
   118f0:	str	r0, [sp, #44]	; 0x2c
   118f4:	add	r0, sp, #44	; 0x2c
   118f8:	str	r0, [sp]
   118fc:	mov	r0, r6
   11900:	bl	111d8 <getopt_long@plt>
   11904:	add	r0, r0, #3
   11908:	cmp	r0, #260	; 0x104
   1190c:	bhi	130e0 <__assert_fail@plt+0x1dac>
   11910:	add	r1, pc, #0
   11914:	ldr	pc, [r1, r0, lsl #2]
   11918:	andeq	r3, r1, r8, ror #1
   1191c:	andeq	r3, r1, r0, lsr r1
   11920:	andeq	r2, r1, r0, asr #1
   11924:	andeq	r3, r1, r0, ror #1
   11928:	andeq	r3, r1, r0, ror #1
   1192c:	andeq	r3, r1, r0, ror #1
   11930:	andeq	r3, r1, r0, ror #1
   11934:	andeq	r3, r1, r0, ror #1
   11938:	andeq	r3, r1, r0, ror #1
   1193c:	andeq	r3, r1, r0, ror #1
   11940:	andeq	r3, r1, r0, ror #1
   11944:	andeq	r3, r1, r0, ror #1
   11948:	andeq	r3, r1, r0, ror #1
   1194c:	andeq	r3, r1, r0, ror #1
   11950:	andeq	r3, r1, r0, ror #1
   11954:	andeq	r3, r1, r0, ror #1
   11958:	andeq	r3, r1, r0, ror #1
   1195c:	andeq	r3, r1, r0, ror #1
   11960:	andeq	r3, r1, r0, ror #1
   11964:	andeq	r3, r1, r0, ror #1
   11968:	andeq	r3, r1, r0, ror #1
   1196c:	andeq	r3, r1, r0, ror #1
   11970:	andeq	r3, r1, r0, ror #1
   11974:	andeq	r3, r1, r0, ror #1
   11978:	andeq	r3, r1, r0, ror #1
   1197c:	andeq	r3, r1, r0, ror #1
   11980:	andeq	r3, r1, r0, ror #1
   11984:	andeq	r3, r1, r0, ror #1
   11988:	andeq	r3, r1, r0, ror #1
   1198c:	andeq	r3, r1, r0, ror #1
   11990:	andeq	r3, r1, r0, ror #1
   11994:	andeq	r3, r1, r0, ror #1
   11998:	andeq	r3, r1, r0, ror #1
   1199c:	andeq	r3, r1, r0, ror #1
   119a0:	andeq	r3, r1, r0, ror #1
   119a4:	andeq	r3, r1, r0, ror #1
   119a8:	andeq	r3, r1, r0, ror #1
   119ac:	andeq	r3, r1, r0, ror #1
   119b0:	andeq	r3, r1, r0, ror #1
   119b4:	andeq	r3, r1, r0, ror #1
   119b8:	andeq	r3, r1, r0, ror #1
   119bc:	andeq	r3, r1, r0, ror #1
   119c0:	andeq	r3, r1, r0, ror #1
   119c4:	andeq	r3, r1, r0, ror #1
   119c8:	andeq	r3, r1, r0, ror #1
   119cc:	andeq	r3, r1, r0, ror #1
   119d0:	andeq	r3, r1, r0, ror #1
   119d4:	andeq	r3, r1, r0, ror #1
   119d8:	andeq	r3, r1, r0, ror #1
   119dc:	andeq	r3, r1, r0, ror #1
   119e0:	andeq	r3, r1, r0, ror #1
   119e4:	andeq	r3, r1, r0, ror #1
   119e8:	andeq	r3, r1, r0, ror #1
   119ec:	andeq	r3, r1, r0, ror #1
   119f0:	andeq	r3, r1, r0, ror #1
   119f4:	andeq	r3, r1, r0, ror #1
   119f8:	andeq	r3, r1, r0, ror #1
   119fc:	andeq	r3, r1, r0, ror #1
   11a00:	andeq	r3, r1, r0, ror #1
   11a04:	andeq	r3, r1, r0, ror #1
   11a08:	andeq	r3, r1, r0, ror #1
   11a0c:	andeq	r3, r1, r0, ror #1
   11a10:	andeq	r3, r1, r0, ror #1
   11a14:	andeq	r3, r1, r0, ror #1
   11a18:	andeq	r3, r1, r0, ror #1
   11a1c:	andeq	r3, r1, r0, ror #1
   11a20:	andeq	r3, r1, r0, ror #1
   11a24:	andeq	r3, r1, r0, ror #1
   11a28:	andeq	r1, r1, r0, asr #27
   11a2c:	andeq	r1, r1, r4, asr #26
   11a30:	andeq	r3, r1, r0, ror #1
   11a34:	muleq	r1, r8, lr
   11a38:	andeq	r3, r1, r0, ror #1
   11a3c:	andeq	r1, r1, r0, asr sp
   11a40:	andeq	r3, r1, r0, ror #1
   11a44:	andeq	r1, r1, ip, asr sp
   11a48:	andeq	r1, r1, ip, lsr #26
   11a4c:	andeq	r3, r1, r0, ror #1
   11a50:	andeq	r3, r1, r0, ror #1
   11a54:	andeq	r1, r1, ip, lsr #26
   11a58:	andeq	r3, r1, r0, ror #1
   11a5c:	strdeq	r1, [r1], -ip
   11a60:	muleq	r1, ip, sp
   11a64:	andeq	r3, r1, r0, ror #1
   11a68:	andeq	r3, r1, r0, ror #1
   11a6c:	andeq	r3, r1, r0, ror #1
   11a70:	andeq	r1, r1, ip, asr #28
   11a74:	andeq	r3, r1, r0, ror #1
   11a78:	andeq	r3, r1, r0, ror #1
   11a7c:	andeq	r3, r1, r0, ror #1
   11a80:	andeq	r3, r1, r0, ror #1
   11a84:	andeq	r1, r1, ip, asr sp
   11a88:	andeq	r3, r1, r0, ror #1
   11a8c:	andeq	r3, r1, r0, ror #1
   11a90:	andeq	r3, r1, r0, ror #1
   11a94:	andeq	r3, r1, r0, ror #1
   11a98:	andeq	r3, r1, r0, ror #1
   11a9c:	andeq	r3, r1, r0, ror #1
   11aa0:	andeq	r3, r1, r0, ror #1
   11aa4:	andeq	r3, r1, r0, ror #1
   11aa8:	andeq	r1, r1, r4, lsl #27
   11aac:			; <UNDEFINED> instruction: 0x00011eb0
   11ab0:	andeq	r1, r1, r8, lsr #27
   11ab4:			; <UNDEFINED> instruction: 0x00011db4
   11ab8:	andeq	r1, r1, r0, asr sp
   11abc:	andeq	r1, r1, r4, lsr #29
   11ac0:	andeq	r3, r1, r0, ror #1
   11ac4:	andeq	r1, r1, r8, lsr sp
   11ac8:	andeq	r1, r1, r0, asr #28
   11acc:			; <UNDEFINED> instruction: 0x00011ebc
   11ad0:	andeq	r3, r1, r0, ror #1
   11ad4:	andeq	r1, r1, ip, lsr #26
   11ad8:	andeq	r3, r1, r0, ror #1
   11adc:	andeq	r3, r1, r0, ror #1
   11ae0:	andeq	r1, r1, r4, asr #26
   11ae4:	andeq	r3, r1, r0, ror #1
   11ae8:	andeq	r3, r1, r0, ror #1
   11aec:	andeq	r3, r1, r0, ror #1
   11af0:	muleq	r1, r0, sp
   11af4:	andeq	r1, r1, r8, ror #26
   11af8:	andeq	r3, r1, r0, ror #1
   11afc:			; <UNDEFINED> instruction: 0x00011fbc
   11b00:	ldrdeq	r1, [r1], -r0
   11b04:	andeq	r1, r1, r8, lsr sp
   11b08:	andeq	r3, r1, r0, ror #1
   11b0c:	andeq	r3, r1, r0, ror #1
   11b10:	andeq	r3, r1, r0, ror #1
   11b14:	andeq	r3, r1, r0, ror #1
   11b18:	andeq	r3, r1, r0, ror #1
   11b1c:	andeq	r3, r1, r0, ror #1
   11b20:	andeq	r3, r1, r0, ror #1
   11b24:	andeq	r3, r1, r0, ror #1
   11b28:	andeq	r3, r1, r0, ror #1
   11b2c:	andeq	r3, r1, r0, ror #1
   11b30:	andeq	r3, r1, r0, ror #1
   11b34:	andeq	r3, r1, r0, ror #1
   11b38:	andeq	r3, r1, r0, ror #1
   11b3c:	andeq	r3, r1, r0, ror #1
   11b40:	andeq	r3, r1, r0, ror #1
   11b44:	andeq	r3, r1, r0, ror #1
   11b48:	andeq	r3, r1, r0, ror #1
   11b4c:	andeq	r3, r1, r0, ror #1
   11b50:	andeq	r3, r1, r0, ror #1
   11b54:	andeq	r3, r1, r0, ror #1
   11b58:	andeq	r3, r1, r0, ror #1
   11b5c:	andeq	r3, r1, r0, ror #1
   11b60:	andeq	r3, r1, r0, ror #1
   11b64:	andeq	r3, r1, r0, ror #1
   11b68:	andeq	r3, r1, r0, ror #1
   11b6c:	andeq	r3, r1, r0, ror #1
   11b70:	andeq	r3, r1, r0, ror #1
   11b74:	andeq	r3, r1, r0, ror #1
   11b78:	andeq	r3, r1, r0, ror #1
   11b7c:	andeq	r3, r1, r0, ror #1
   11b80:	andeq	r3, r1, r0, ror #1
   11b84:	andeq	r3, r1, r0, ror #1
   11b88:	andeq	r3, r1, r0, ror #1
   11b8c:	andeq	r3, r1, r0, ror #1
   11b90:	andeq	r3, r1, r0, ror #1
   11b94:	andeq	r3, r1, r0, ror #1
   11b98:	andeq	r3, r1, r0, ror #1
   11b9c:	andeq	r3, r1, r0, ror #1
   11ba0:	andeq	r3, r1, r0, ror #1
   11ba4:	andeq	r3, r1, r0, ror #1
   11ba8:	andeq	r3, r1, r0, ror #1
   11bac:	andeq	r3, r1, r0, ror #1
   11bb0:	andeq	r3, r1, r0, ror #1
   11bb4:	andeq	r3, r1, r0, ror #1
   11bb8:	andeq	r3, r1, r0, ror #1
   11bbc:	andeq	r3, r1, r0, ror #1
   11bc0:	andeq	r3, r1, r0, ror #1
   11bc4:	andeq	r3, r1, r0, ror #1
   11bc8:	andeq	r3, r1, r0, ror #1
   11bcc:	andeq	r3, r1, r0, ror #1
   11bd0:	andeq	r3, r1, r0, ror #1
   11bd4:	andeq	r3, r1, r0, ror #1
   11bd8:	andeq	r3, r1, r0, ror #1
   11bdc:	andeq	r3, r1, r0, ror #1
   11be0:	andeq	r3, r1, r0, ror #1
   11be4:	andeq	r3, r1, r0, ror #1
   11be8:	andeq	r3, r1, r0, ror #1
   11bec:	andeq	r3, r1, r0, ror #1
   11bf0:	andeq	r3, r1, r0, ror #1
   11bf4:	andeq	r3, r1, r0, ror #1
   11bf8:	andeq	r3, r1, r0, ror #1
   11bfc:	andeq	r3, r1, r0, ror #1
   11c00:	andeq	r3, r1, r0, ror #1
   11c04:	andeq	r3, r1, r0, ror #1
   11c08:	andeq	r3, r1, r0, ror #1
   11c0c:	andeq	r3, r1, r0, ror #1
   11c10:	andeq	r3, r1, r0, ror #1
   11c14:	andeq	r3, r1, r0, ror #1
   11c18:	andeq	r3, r1, r0, ror #1
   11c1c:	andeq	r3, r1, r0, ror #1
   11c20:	andeq	r3, r1, r0, ror #1
   11c24:	andeq	r3, r1, r0, ror #1
   11c28:	andeq	r3, r1, r0, ror #1
   11c2c:	andeq	r3, r1, r0, ror #1
   11c30:	andeq	r3, r1, r0, ror #1
   11c34:	andeq	r3, r1, r0, ror #1
   11c38:	andeq	r3, r1, r0, ror #1
   11c3c:	andeq	r3, r1, r0, ror #1
   11c40:	andeq	r3, r1, r0, ror #1
   11c44:	andeq	r3, r1, r0, ror #1
   11c48:	andeq	r3, r1, r0, ror #1
   11c4c:	andeq	r3, r1, r0, ror #1
   11c50:	andeq	r3, r1, r0, ror #1
   11c54:	andeq	r3, r1, r0, ror #1
   11c58:	andeq	r3, r1, r0, ror #1
   11c5c:	andeq	r3, r1, r0, ror #1
   11c60:	andeq	r3, r1, r0, ror #1
   11c64:	andeq	r3, r1, r0, ror #1
   11c68:	andeq	r3, r1, r0, ror #1
   11c6c:	andeq	r3, r1, r0, ror #1
   11c70:	andeq	r3, r1, r0, ror #1
   11c74:	andeq	r3, r1, r0, ror #1
   11c78:	andeq	r3, r1, r0, ror #1
   11c7c:	andeq	r3, r1, r0, ror #1
   11c80:	andeq	r3, r1, r0, ror #1
   11c84:	andeq	r3, r1, r0, ror #1
   11c88:	andeq	r3, r1, r0, ror #1
   11c8c:	andeq	r3, r1, r0, ror #1
   11c90:	andeq	r3, r1, r0, ror #1
   11c94:	andeq	r3, r1, r0, ror #1
   11c98:	andeq	r3, r1, r0, ror #1
   11c9c:	andeq	r3, r1, r0, ror #1
   11ca0:	andeq	r3, r1, r0, ror #1
   11ca4:	andeq	r3, r1, r0, ror #1
   11ca8:	andeq	r3, r1, r0, ror #1
   11cac:	andeq	r3, r1, r0, ror #1
   11cb0:	andeq	r3, r1, r0, ror #1
   11cb4:	andeq	r3, r1, r0, ror #1
   11cb8:	andeq	r3, r1, r0, ror #1
   11cbc:	andeq	r3, r1, r0, ror #1
   11cc0:	andeq	r3, r1, r0, ror #1
   11cc4:	andeq	r3, r1, r0, ror #1
   11cc8:	andeq	r3, r1, r0, ror #1
   11ccc:	andeq	r3, r1, r0, ror #1
   11cd0:	andeq	r3, r1, r0, ror #1
   11cd4:	andeq	r3, r1, r0, ror #1
   11cd8:	andeq	r3, r1, r0, ror #1
   11cdc:	andeq	r3, r1, r0, ror #1
   11ce0:	andeq	r3, r1, r0, ror #1
   11ce4:	andeq	r3, r1, r0, ror #1
   11ce8:	andeq	r3, r1, r0, ror #1
   11cec:	andeq	r3, r1, r0, ror #1
   11cf0:	andeq	r3, r1, r0, ror #1
   11cf4:	andeq	r3, r1, r0, ror #1
   11cf8:	andeq	r3, r1, r0, ror #1
   11cfc:	andeq	r3, r1, r0, ror #1
   11d00:	andeq	r3, r1, r0, ror #1
   11d04:	andeq	r3, r1, r0, ror #1
   11d08:	andeq	r3, r1, r0, ror #1
   11d0c:	andeq	r3, r1, r0, ror #1
   11d10:	andeq	r3, r1, r0, ror #1
   11d14:	andeq	r3, r1, r0, ror #1
   11d18:	andeq	r3, r1, r0, ror #1
   11d1c:	andeq	r3, r1, r0, ror #1
   11d20:	andeq	r3, r1, r0, ror #1
   11d24:	andeq	r1, r1, r4, asr #30
   11d28:	andeq	r1, r1, r8, asr pc
   11d2c:	movw	r0, #43564	; 0xaa2c
   11d30:	movt	r0, #1
   11d34:	b	118d8 <__assert_fail@plt+0x5a4>
   11d38:	movw	r0, #43576	; 0xaa38
   11d3c:	movt	r0, #1
   11d40:	b	118d8 <__assert_fail@plt+0x5a4>
   11d44:	movw	r0, #43570	; 0xaa32
   11d48:	movt	r0, #1
   11d4c:	b	118d8 <__assert_fail@plt+0x5a4>
   11d50:	movw	r0, #43552	; 0xaa20
   11d54:	movt	r0, #1
   11d58:	b	118d8 <__assert_fail@plt+0x5a4>
   11d5c:	movw	r0, #43558	; 0xaa26
   11d60:	movt	r0, #1
   11d64:	b	118d8 <__assert_fail@plt+0x5a4>
   11d68:	movw	r0, #49528	; 0xc178
   11d6c:	movt	r0, #2
   11d70:	ldr	r0, [r0]
   11d74:	bl	13470 <__assert_fail@plt+0x213c>
   11d78:	and	r8, r8, r0
   11d7c:	mov	r9, #1
   11d80:	b	118e0 <__assert_fail@plt+0x5ac>
   11d84:	movw	r0, #44848	; 0xaf30
   11d88:	movt	r0, #1
   11d8c:	b	118d8 <__assert_fail@plt+0x5a4>
   11d90:	movw	r0, #43573	; 0xaa35
   11d94:	movt	r0, #1
   11d98:	b	118d8 <__assert_fail@plt+0x5a4>
   11d9c:	movw	r0, #43567	; 0xaa2f
   11da0:	movt	r0, #1
   11da4:	b	118d8 <__assert_fail@plt+0x5a4>
   11da8:	movw	r0, #44869	; 0xaf45
   11dac:	movt	r0, #1
   11db0:	b	118d8 <__assert_fail@plt+0x5a4>
   11db4:	movw	r0, #43549	; 0xaa1d
   11db8:	movt	r0, #1
   11dbc:	b	118d8 <__assert_fail@plt+0x5a4>
   11dc0:	movw	r5, #49528	; 0xc178
   11dc4:	movt	r5, #2
   11dc8:	ldr	r0, [r5]
   11dcc:	ldrb	r0, [r0]
   11dd0:	sub	r0, r0, #100	; 0x64
   11dd4:	cmp	r0, #20
   11dd8:	bhi	13138 <__assert_fail@plt+0x1e04>
   11ddc:	add	r1, pc, #0
   11de0:	ldr	pc, [r1, r0, lsl #2]
   11de4:	andeq	r1, r1, r8, lsr lr
   11de8:	andeq	r3, r1, r8, lsr r1
   11dec:	andeq	r3, r1, r8, lsr r1
   11df0:	andeq	r3, r1, r8, lsr r1
   11df4:	andeq	r3, r1, r8, lsr r1
   11df8:	andeq	r3, r1, r8, lsr r1
   11dfc:	andeq	r3, r1, r8, lsr r1
   11e00:	andeq	r3, r1, r8, lsr r1
   11e04:	andeq	r3, r1, r8, lsr r1
   11e08:	andeq	r3, r1, r8, lsr r1
   11e0c:	andeq	r2, r1, r0, ror r0
   11e10:	muleq	r1, r4, r0
   11e14:	andeq	r3, r1, r8, lsr r1
   11e18:	andeq	r3, r1, r8, lsr r1
   11e1c:	andeq	r3, r1, r8, lsr r1
   11e20:	andeq	r3, r1, r8, lsr r1
   11e24:	andeq	r3, r1, r8, lsr r1
   11e28:	andeq	r3, r1, r8, lsr r1
   11e2c:	andeq	r3, r1, r8, lsr r1
   11e30:	andeq	r3, r1, r8, lsr r1
   11e34:	andeq	r2, r1, r4, rrx
   11e38:	mov	r0, #10
   11e3c:	b	12098 <__assert_fail@plt+0xd64>
   11e40:	movw	r0, #43561	; 0xaa29
   11e44:	movt	r0, #1
   11e48:	b	118d8 <__assert_fail@plt+0x5a4>
   11e4c:	movw	r5, #49528	; 0xc178
   11e50:	movt	r5, #2
   11e54:	ldr	r0, [r5]
   11e58:	cmp	r0, #0
   11e5c:	beq	12020 <__assert_fail@plt+0xcec>
   11e60:	movw	r1, #45072	; 0xb010
   11e64:	add	r3, sp, #48	; 0x30
   11e68:	mov	r2, #0
   11e6c:	movt	r1, #1
   11e70:	str	r1, [sp]
   11e74:	mov	r1, #0
   11e78:	bl	18adc <__assert_fail@plt+0x77a8>
   11e7c:	cmp	r0, #0
   11e80:	bne	13164 <__assert_fail@plt+0x1e30>
   11e84:	ldr	r0, [sp, #52]	; 0x34
   11e88:	cmp	r0, #0
   11e8c:	bne	131d4 <__assert_fail@plt+0x1ea0>
   11e90:	ldr	r0, [sp, #48]	; 0x30
   11e94:	b	12024 <__assert_fail@plt+0xcf0>
   11e98:	movw	r0, #43546	; 0xaa1a
   11e9c:	movt	r0, #1
   11ea0:	b	118d8 <__assert_fail@plt+0x5a4>
   11ea4:	movw	r0, #43555	; 0xaa23
   11ea8:	movt	r0, #1
   11eac:	b	118d8 <__assert_fail@plt+0x5a4>
   11eb0:	movw	r0, #43543	; 0xaa17
   11eb4:	movt	r0, #1
   11eb8:	b	118d8 <__assert_fail@plt+0x5a4>
   11ebc:	movw	r5, #49528	; 0xc178
   11ec0:	movw	r1, #45072	; 0xb010
   11ec4:	mov	r2, #0
   11ec8:	movt	r5, #2
   11ecc:	movt	r1, #1
   11ed0:	ldr	r0, [r5]
   11ed4:	str	r1, [sp]
   11ed8:	movw	r1, #49576	; 0xc1a8
   11edc:	movt	r1, #2
   11ee0:	add	r3, r1, #56	; 0x38
   11ee4:	mov	r1, #0
   11ee8:	bl	18adc <__assert_fail@plt+0x77a8>
   11eec:	mov	r9, #1
   11ef0:	cmp	r0, #0
   11ef4:	beq	118e0 <__assert_fail@plt+0x5ac>
   11ef8:	b	13180 <__assert_fail@plt+0x1e4c>
   11efc:	movw	r0, #49576	; 0xc1a8
   11f00:	movw	r5, #49528	; 0xc178
   11f04:	mov	r9, #1
   11f08:	movw	r1, #45072	; 0xb010
   11f0c:	movt	r0, #2
   11f10:	movt	r5, #2
   11f14:	movt	r1, #1
   11f18:	mov	r2, r0
   11f1c:	strb	r9, [r0, #1]
   11f20:	ldr	r0, [r5]
   11f24:	str	r1, [sp]
   11f28:	mov	r1, #0
   11f2c:	add	r3, r2, #64	; 0x40
   11f30:	mov	r2, #0
   11f34:	bl	18adc <__assert_fail@plt+0x77a8>
   11f38:	cmp	r0, #0
   11f3c:	beq	118e0 <__assert_fail@plt+0x5ac>
   11f40:	b	1319c <__assert_fail@plt+0x1e68>
   11f44:	movw	r1, #49576	; 0xc1a8
   11f48:	mov	r0, #1
   11f4c:	movt	r1, #2
   11f50:	strb	r0, [r1, #3]
   11f54:	b	118e0 <__assert_fail@plt+0x5ac>
   11f58:	movw	r0, #49528	; 0xc178
   11f5c:	movw	r5, #45312	; 0xb100
   11f60:	mov	r3, #4
   11f64:	mov	r2, #1
   11f68:	movt	r0, #2
   11f6c:	str	r3, [sp]
   11f70:	movt	r5, #1
   11f74:	ldr	r1, [r0]
   11f78:	movw	r0, #49420	; 0xc10c
   11f7c:	mov	r3, r5
   11f80:	movt	r0, #2
   11f84:	ldr	r0, [r0]
   11f88:	stmib	sp, {r0, r2}
   11f8c:	movw	r0, #43534	; 0xaa0e
   11f90:	movw	r2, #45320	; 0xb108
   11f94:	movt	r0, #1
   11f98:	movt	r2, #1
   11f9c:	bl	15354 <__assert_fail@plt+0x4020>
   11fa0:	ldr	r0, [r5, r0, lsl #2]
   11fa4:	cmp	r0, #0
   11fa8:	beq	12050 <__assert_fail@plt+0xd1c>
   11fac:	cmp	r0, #1
   11fb0:	bne	118e0 <__assert_fail@plt+0x5ac>
   11fb4:	mov	r0, #1
   11fb8:	b	12054 <__assert_fail@plt+0xd20>
   11fbc:	movw	r0, #49576	; 0xc1a8
   11fc0:	mov	r9, #1
   11fc4:	movt	r0, #2
   11fc8:	strb	r9, [r0, #2]
   11fcc:	b	118e0 <__assert_fail@plt+0x5ac>
   11fd0:	movw	r5, #49528	; 0xc178
   11fd4:	mov	r9, #1
   11fd8:	movt	r5, #2
   11fdc:	ldr	r0, [r5]
   11fe0:	cmp	r0, #0
   11fe4:	beq	1203c <__assert_fail@plt+0xd08>
   11fe8:	movw	r1, #44255	; 0xacdf
   11fec:	sub	r3, fp, #136	; 0x88
   11ff0:	mov	r2, #10
   11ff4:	movt	r1, #1
   11ff8:	str	r1, [sp]
   11ffc:	mov	r1, #0
   12000:	bl	18adc <__assert_fail@plt+0x77a8>
   12004:	cmp	r0, #0
   12008:	bne	131b8 <__assert_fail@plt+0x1e84>
   1200c:	ldr	r0, [fp, #-132]	; 0xffffff7c
   12010:	cmp	r0, #0
   12014:	bne	131d4 <__assert_fail@plt+0x1ea0>
   12018:	ldr	r0, [fp, #-136]	; 0xffffff78
   1201c:	b	12040 <__assert_fail@plt+0xd0c>
   12020:	mov	r0, #3
   12024:	movw	r1, #49576	; 0xc1a8
   12028:	mov	r9, #1
   1202c:	movt	r1, #2
   12030:	strb	r9, [r1]
   12034:	str	r0, [r1, #36]	; 0x24
   12038:	b	118e0 <__assert_fail@plt+0x5ac>
   1203c:	mov	r0, #32
   12040:	str	r0, [sp, #28]
   12044:	mov	r0, #1
   12048:	str	r0, [sp, #36]	; 0x24
   1204c:	b	118e0 <__assert_fail@plt+0x5ac>
   12050:	mov	r0, #0
   12054:	movw	r1, #49576	; 0xc1a8
   12058:	movt	r1, #2
   1205c:	strb	r0, [r1, #4]
   12060:	b	118e0 <__assert_fail@plt+0x5ac>
   12064:	mov	r0, #16
   12068:	mov	r1, #6
   1206c:	b	1209c <__assert_fail@plt+0xd68>
   12070:	movw	r1, #49576	; 0xc1a8
   12074:	mov	r0, #0
   12078:	mov	r9, #1
   1207c:	movt	r1, #2
   12080:	str	r0, [r1, #32]
   12084:	movw	r0, #13420	; 0x346c
   12088:	movt	r0, #1
   1208c:	str	r0, [r1, #24]
   12090:	b	118e0 <__assert_fail@plt+0x5ac>
   12094:	mov	r0, #8
   12098:	mov	r1, #7
   1209c:	movw	r2, #49576	; 0xc1a8
   120a0:	movw	r3, #13088	; 0x3320
   120a4:	mov	r9, #1
   120a8:	movt	r2, #2
   120ac:	movt	r3, #1
   120b0:	str	r3, [r2, #24]
   120b4:	str	r0, [r2, #28]
   120b8:	str	r1, [r2, #32]
   120bc:	b	118e0 <__assert_fail@plt+0x5ac>
   120c0:	mov	r0, #1
   120c4:	tst	r8, #1
   120c8:	beq	12fcc <__assert_fail@plt+0x1c98>
   120cc:	movw	r0, #49576	; 0xc1a8
   120d0:	movt	r0, #2
   120d4:	ldrb	r0, [r0]
   120d8:	cmp	r0, #1
   120dc:	bne	120f4 <__assert_fail@plt+0xdc0>
   120e0:	movw	r0, #49576	; 0xc1a8
   120e4:	movt	r0, #2
   120e8:	ldr	r0, [r0, #12]
   120ec:	cmp	r0, #0
   120f0:	bne	13228 <__assert_fail@plt+0x1ef4>
   120f4:	movw	sl, #49504	; 0xc160
   120f8:	tst	r9, #1
   120fc:	movt	sl, #2
   12100:	ldr	r0, [sl]
   12104:	sub	r6, r6, r0
   12108:	beq	12120 <__assert_fail@plt+0xdec>
   1210c:	movw	r1, #49576	; 0xc1a8
   12110:	movt	r1, #2
   12114:	ldrb	r1, [r1, #3]
   12118:	cmp	r1, #1
   1211c:	bne	123d0 <__assert_fail@plt+0x109c>
   12120:	cmp	r6, #3
   12124:	beq	1219c <__assert_fail@plt+0xe68>
   12128:	cmp	r6, #2
   1212c:	beq	12168 <__assert_fail@plt+0xe34>
   12130:	cmp	r6, #1
   12134:	bne	123b4 <__assert_fail@plt+0x1080>
   12138:	ldr	r5, [r4, r0, lsl #2]
   1213c:	movw	r1, #49576	; 0xc1a8
   12140:	movt	r1, #2
   12144:	ldrb	r1, [r1, #3]
   12148:	ldrb	r0, [r5]
   1214c:	cmp	r1, #0
   12150:	beq	12250 <__assert_fail@plt+0xf1c>
   12154:	cmp	r0, #0
   12158:	beq	12368 <__assert_fail@plt+0x1034>
   1215c:	cmp	r0, #43	; 0x2b
   12160:	addeq	r5, r5, #1
   12164:	b	1225c <__assert_fail@plt+0xf28>
   12168:	add	r0, r4, r0, lsl #2
   1216c:	movw	r1, #49576	; 0xc1a8
   12170:	ldr	r5, [r0, #4]
   12174:	movt	r1, #2
   12178:	ldrb	r1, [r1, #3]
   1217c:	ldrb	r0, [r5]
   12180:	cmp	r1, #0
   12184:	beq	12208 <__assert_fail@plt+0xed4>
   12188:	cmp	r0, #0
   1218c:	beq	123b4 <__assert_fail@plt+0x1080>
   12190:	cmp	r0, #43	; 0x2b
   12194:	addeq	r5, r5, #1
   12198:	b	12214 <__assert_fail@plt+0xee0>
   1219c:	movw	r1, #49576	; 0xc1a8
   121a0:	movt	r1, #2
   121a4:	ldrb	r1, [r1, #3]
   121a8:	cmp	r1, #1
   121ac:	bne	123b4 <__assert_fail@plt+0x1080>
   121b0:	add	r0, r4, r0, lsl #2
   121b4:	ldr	r5, [r0, #4]
   121b8:	ldrb	r0, [r5]
   121bc:	cmp	r0, #0
   121c0:	beq	123b4 <__assert_fail@plt+0x1080>
   121c4:	cmp	r0, #43	; 0x2b
   121c8:	mov	r1, #46	; 0x2e
   121cc:	addeq	r5, r5, #1
   121d0:	mov	r0, r5
   121d4:	bl	11208 <strchr@plt>
   121d8:	mov	r2, #10
   121dc:	cmp	r0, #0
   121e0:	bne	12390 <__assert_fail@plt+0x105c>
   121e4:	ldrb	r0, [r5]
   121e8:	cmp	r0, #48	; 0x30
   121ec:	bne	1238c <__assert_fail@plt+0x1058>
   121f0:	ldrb	r0, [r5, #1]
   121f4:	mov	r2, #16
   121f8:	orr	r0, r0, #32
   121fc:	cmp	r0, #120	; 0x78
   12200:	movne	r2, #8
   12204:	b	12390 <__assert_fail@plt+0x105c>
   12208:	cmp	r0, #43	; 0x2b
   1220c:	bne	12298 <__assert_fail@plt+0xf64>
   12210:	add	r5, r5, #1
   12214:	mov	r0, r5
   12218:	mov	r1, #46	; 0x2e
   1221c:	bl	11208 <strchr@plt>
   12220:	mov	r2, #10
   12224:	cmp	r0, #0
   12228:	bne	122ac <__assert_fail@plt+0xf78>
   1222c:	ldrb	r0, [r5]
   12230:	cmp	r0, #48	; 0x30
   12234:	bne	122a8 <__assert_fail@plt+0xf74>
   12238:	ldrb	r0, [r5, #1]
   1223c:	mov	r2, #16
   12240:	orr	r0, r0, #32
   12244:	cmp	r0, #120	; 0x78
   12248:	movne	r2, #8
   1224c:	b	122ac <__assert_fail@plt+0xf78>
   12250:	cmp	r0, #43	; 0x2b
   12254:	bne	12368 <__assert_fail@plt+0x1034>
   12258:	add	r5, r5, #1
   1225c:	mov	r0, r5
   12260:	mov	r1, #46	; 0x2e
   12264:	bl	11208 <strchr@plt>
   12268:	mov	r2, #10
   1226c:	cmp	r0, #0
   12270:	bne	12340 <__assert_fail@plt+0x100c>
   12274:	ldrb	r0, [r5]
   12278:	cmp	r0, #48	; 0x30
   1227c:	bne	1233c <__assert_fail@plt+0x1008>
   12280:	ldrb	r0, [r5, #1]
   12284:	mov	r2, #16
   12288:	orr	r0, r0, #32
   1228c:	cmp	r0, #120	; 0x78
   12290:	movne	r2, #8
   12294:	b	12340 <__assert_fail@plt+0x100c>
   12298:	sub	r1, r0, #48	; 0x30
   1229c:	cmp	r1, #9
   122a0:	bls	12188 <__assert_fail@plt+0xe54>
   122a4:	b	123b4 <__assert_fail@plt+0x1080>
   122a8:	mov	r2, #8
   122ac:	movw	r8, #44887	; 0xaf57
   122b0:	sub	r3, fp, #136	; 0x88
   122b4:	mov	r0, r5
   122b8:	mov	r1, #0
   122bc:	movt	r8, #1
   122c0:	str	r8, [sp]
   122c4:	bl	18adc <__assert_fail@plt+0x77a8>
   122c8:	cmp	r0, #0
   122cc:	bne	123b4 <__assert_fail@plt+0x1080>
   122d0:	movw	r0, #49576	; 0xc1a8
   122d4:	movt	r0, #2
   122d8:	ldrb	r0, [r0, #3]
   122dc:	cmp	r0, #1
   122e0:	bne	13004 <__assert_fail@plt+0x1cd0>
   122e4:	ldr	r0, [sl]
   122e8:	ldr	r5, [r4, r0, lsl #2]
   122ec:	ldrb	r0, [r5]
   122f0:	cmp	r0, #0
   122f4:	beq	13004 <__assert_fail@plt+0x1cd0>
   122f8:	cmp	r0, #43	; 0x2b
   122fc:	mov	r1, #46	; 0x2e
   12300:	addeq	r5, r5, #1
   12304:	mov	r0, r5
   12308:	bl	11208 <strchr@plt>
   1230c:	mov	r2, #10
   12310:	cmp	r0, #0
   12314:	bne	12fe4 <__assert_fail@plt+0x1cb0>
   12318:	ldrb	r0, [r5]
   1231c:	cmp	r0, #48	; 0x30
   12320:	bne	12fe0 <__assert_fail@plt+0x1cac>
   12324:	ldrb	r0, [r5, #1]
   12328:	mov	r2, #16
   1232c:	orr	r0, r0, #32
   12330:	cmp	r0, #120	; 0x78
   12334:	movne	r2, #8
   12338:	b	12fe4 <__assert_fail@plt+0x1cb0>
   1233c:	mov	r2, #8
   12340:	movw	r0, #44887	; 0xaf57
   12344:	add	r3, sp, #48	; 0x30
   12348:	mov	r1, #0
   1234c:	mov	r6, #0
   12350:	movt	r0, #1
   12354:	str	r0, [sp]
   12358:	mov	r0, r5
   1235c:	bl	18adc <__assert_fail@plt+0x77a8>
   12360:	cmp	r0, #0
   12364:	beq	12370 <__assert_fail@plt+0x103c>
   12368:	mov	r6, #1
   1236c:	b	123d0 <__assert_fail@plt+0x109c>
   12370:	ldr	r0, [sp, #48]	; 0x30
   12374:	ldr	r1, [sp, #52]	; 0x34
   12378:	movw	r2, #49576	; 0xc1a8
   1237c:	add	r5, r4, #4
   12380:	movt	r2, #2
   12384:	strd	r0, [r2, #56]	; 0x38
   12388:	b	123d4 <__assert_fail@plt+0x10a0>
   1238c:	mov	r2, #8
   12390:	movw	r8, #44887	; 0xaf57
   12394:	add	r3, sp, #48	; 0x30
   12398:	mov	r0, r5
   1239c:	mov	r1, #0
   123a0:	movt	r8, #1
   123a4:	str	r8, [sp]
   123a8:	bl	18adc <__assert_fail@plt+0x77a8>
   123ac:	cmp	r0, #0
   123b0:	beq	12a98 <__assert_fail@plt+0x1764>
   123b4:	movw	r0, #49576	; 0xc1a8
   123b8:	movt	r0, #2
   123bc:	ldrb	r0, [r0, #3]
   123c0:	cmp	r0, #1
   123c4:	bne	123d0 <__assert_fail@plt+0x109c>
   123c8:	cmp	r6, #2
   123cc:	bge	13234 <__assert_fail@plt+0x1f00>
   123d0:	mov	r5, r4
   123d4:	movw	r4, #49576	; 0xc1a8
   123d8:	movt	r4, #2
   123dc:	ldrb	r0, [r4, #5]
   123e0:	cmp	r0, #1
   123e4:	bne	12424 <__assert_fail@plt+0x10f0>
   123e8:	ldr	r0, [r4, #24]
   123ec:	movw	r1, #13420	; 0x346c
   123f0:	movt	r1, #1
   123f4:	cmp	r0, r1
   123f8:	beq	12408 <__assert_fail@plt+0x10d4>
   123fc:	movw	r0, #15604	; 0x3cf4
   12400:	movt	r0, #1
   12404:	b	12420 <__assert_fail@plt+0x10ec>
   12408:	mov	r1, #8
   1240c:	mov	r0, #7
   12410:	str	r1, [r4, #28]
   12414:	str	r0, [r4, #32]
   12418:	movw	r0, #15456	; 0x3c60
   1241c:	movt	r0, #1
   12420:	str	r0, [r4, #24]
   12424:	ldrb	r0, [r4, #1]
   12428:	cmp	r0, #1
   1242c:	bne	12454 <__assert_fail@plt+0x1120>
   12430:	add	r3, r4, #56	; 0x38
   12434:	ldm	r3, {r0, r1, r2, r3}
   12438:	adds	r0, r2, r0
   1243c:	adcs	r1, r3, r1
   12440:	strd	r0, [r4, #72]	; 0x48
   12444:	mov	r0, #0
   12448:	adc	r0, r0, #0
   1244c:	cmp	r0, #1
   12450:	beq	132a4 <__assert_fail@plt+0x1f70>
   12454:	ldr	r0, [r4, #12]
   12458:	cmp	r0, #0
   1245c:	bne	1246c <__assert_fail@plt+0x1138>
   12460:	movw	r0, #43751	; 0xaae7
   12464:	movt	r0, #1
   12468:	bl	13470 <__assert_fail@plt+0x213c>
   1246c:	ldr	r0, [sl]
   12470:	movw	r1, #45332	; 0xb114
   12474:	cmp	r6, #0
   12478:	movt	r1, #1
   1247c:	addgt	r1, r5, r0, lsl #2
   12480:	str	r1, [r4, #40]	; 0x28
   12484:	bl	14004 <__assert_fail@plt+0x2cd0>
   12488:	mov	sl, r0
   1248c:	ldr	r0, [r4, #44]	; 0x2c
   12490:	mov	r6, r4
   12494:	cmp	r0, #0
   12498:	beq	12fa4 <__assert_fail@plt+0x1c70>
   1249c:	ldrd	r4, [r6, #56]	; 0x38
   124a0:	orrs	r1, r4, r5
   124a4:	beq	12690 <__assert_fail@plt+0x135c>
   124a8:	add	r1, sp, #16
   124ac:	add	r9, sp, #48	; 0x30
   124b0:	stm	r1, {r7, r8, sl}
   124b4:	sub	r1, fp, #136	; 0x88
   124b8:	mov	sl, #1
   124bc:	add	r1, r1, #48	; 0x30
   124c0:	str	r1, [sp, #32]
   124c4:	mov	r1, #0
   124c8:	str	r1, [sp, #40]	; 0x28
   124cc:	bl	11274 <fileno@plt>
   124d0:	mov	r1, r0
   124d4:	mov	r0, #3
   124d8:	sub	r2, fp, #136	; 0x88
   124dc:	bl	1113c <__fxstat64@plt>
   124e0:	cmp	r0, #0
   124e4:	beq	12524 <__assert_fail@plt+0x11f0>
   124e8:	bl	11214 <__errno_location@plt>
   124ec:	ldr	r2, [r6, #52]	; 0x34
   124f0:	ldr	r7, [r0]
   124f4:	mov	r0, #0
   124f8:	mov	r1, #3
   124fc:	mov	r8, r6
   12500:	mov	r6, #0
   12504:	bl	178a8 <__assert_fail@plt+0x6574>
   12508:	movw	r2, #45998	; 0xb3ae
   1250c:	mov	r3, r0
   12510:	mov	r0, #0
   12514:	mov	r1, r7
   12518:	movt	r2, #1
   1251c:	bl	11184 <error@plt>
   12520:	b	12648 <__assert_fail@plt+0x1314>
   12524:	ldr	r0, [fp, #-120]	; 0xffffff88
   12528:	and	r0, r0, #53248	; 0xd000
   1252c:	orr	r0, r0, #8192	; 0x2000
   12530:	cmp	r0, #40960	; 0xa000
   12534:	bne	125a0 <__assert_fail@plt+0x126c>
   12538:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1253c:	mov	r3, #0
   12540:	subs	r0, r2, #536870913	; 0x20000001
   12544:	rscs	r0, r3, r2, asr #31
   12548:	mov	r0, #0
   1254c:	movwcc	r0, #1
   12550:	rsbs	r1, r2, #0
   12554:	sbcs	r1, r3, r2, asr #31
   12558:	mov	r1, #0
   1255c:	movwlt	r1, #1
   12560:	ands	r3, r1, r0
   12564:	ldr	r0, [sp, #32]
   12568:	asrne	r3, r2, #31
   1256c:	moveq	r2, #512	; 0x200
   12570:	ldrd	r0, [r0]
   12574:	subs	r2, r2, r0
   12578:	sbcs	r2, r3, r1
   1257c:	bge	125c0 <__assert_fail@plt+0x128c>
   12580:	subs	r2, r0, r4
   12584:	sbcs	r2, r1, r5
   12588:	bcs	1269c <__assert_fail@plt+0x1368>
   1258c:	subs	r4, r4, r0
   12590:	sbc	r5, r5, r1
   12594:	orrs	r0, r4, r5
   12598:	bne	12640 <__assert_fail@plt+0x130c>
   1259c:	b	126bc <__assert_fail@plt+0x1388>
   125a0:	ldr	r0, [r6, #44]	; 0x2c
   125a4:	mov	r1, #1
   125a8:	mov	r2, r4
   125ac:	mov	r3, r5
   125b0:	str	r1, [sp]
   125b4:	bl	15894 <__assert_fail@plt+0x4560>
   125b8:	cmp	r0, #0
   125bc:	beq	126bc <__assert_fail@plt+0x1388>
   125c0:	orrs	r0, r4, r5
   125c4:	beq	12630 <__assert_fail@plt+0x12fc>
   125c8:	mov	r7, #8192	; 0x2000
   125cc:	subs	r0, r4, r7
   125d0:	ldr	r3, [r6, #44]	; 0x2c
   125d4:	mov	r1, #1
   125d8:	sbcs	r0, r5, #0
   125dc:	movcc	r7, r4
   125e0:	mov	r0, r9
   125e4:	mov	r2, r7
   125e8:	bl	11304 <fread_unlocked@plt>
   125ec:	subs	r4, r4, r0
   125f0:	sbc	r5, r5, #0
   125f4:	cmp	r0, r7
   125f8:	beq	12614 <__assert_fail@plt+0x12e0>
   125fc:	ldr	r0, [r6, #44]	; 0x2c
   12600:	ldr	r0, [r0]
   12604:	tst	r0, #32
   12608:	bne	12620 <__assert_fail@plt+0x12ec>
   1260c:	tst	r0, #16
   12610:	bne	12638 <__assert_fail@plt+0x1304>
   12614:	orrs	r0, r4, r5
   12618:	bne	125cc <__assert_fail@plt+0x1298>
   1261c:	b	12630 <__assert_fail@plt+0x12fc>
   12620:	bl	11214 <__errno_location@plt>
   12624:	ldr	r0, [r0]
   12628:	mov	sl, #0
   1262c:	str	r0, [sp, #40]	; 0x28
   12630:	mov	r4, #0
   12634:	mov	r5, #0
   12638:	orrs	r0, r4, r5
   1263c:	beq	126bc <__assert_fail@plt+0x1388>
   12640:	mov	r8, r6
   12644:	and	r6, sl, #1
   12648:	ldr	r0, [sp, #40]	; 0x28
   1264c:	bl	14b78 <__assert_fail@plt+0x3844>
   12650:	and	r6, r6, r0
   12654:	bl	14004 <__assert_fail@plt+0x2cd0>
   12658:	and	sl, r6, r0
   1265c:	ldr	r0, [r8, #44]	; 0x2c
   12660:	mov	r6, r8
   12664:	cmp	r0, #0
   12668:	bne	124cc <__assert_fail@plt+0x1198>
   1266c:	orrs	r0, r4, r5
   12670:	bne	132fc <__assert_fail@plt+0x1fc8>
   12674:	ldr	r0, [sp, #24]
   12678:	and	r0, r0, sl
   1267c:	mov	sl, r0
   12680:	ldrb	r0, [r6, #6]
   12684:	cmp	r0, #1
   12688:	beq	12fb0 <__assert_fail@plt+0x1c7c>
   1268c:	b	12fc8 <__assert_fail@plt+0x1c94>
   12690:	mov	r0, #0
   12694:	mov	r1, #0
   12698:	b	126e0 <__assert_fail@plt+0x13ac>
   1269c:	ldr	r0, [r6, #44]	; 0x2c
   126a0:	mov	r1, #1
   126a4:	mov	r2, r4
   126a8:	mov	r3, r5
   126ac:	str	r1, [sp]
   126b0:	bl	15894 <__assert_fail@plt+0x4560>
   126b4:	cmp	r0, #0
   126b8:	movne	sl, #0
   126bc:	ldr	r0, [sp, #24]
   126c0:	ldr	r8, [sp, #20]
   126c4:	ldr	r7, [sp, #16]
   126c8:	and	r0, r0, sl
   126cc:	mov	sl, r0
   126d0:	ldr	r0, [r6, #44]	; 0x2c
   126d4:	cmp	r0, #0
   126d8:	beq	12fa4 <__assert_fail@plt+0x1c70>
   126dc:	ldrd	r0, [r6, #56]	; 0x38
   126e0:	ldrb	r2, [r6, #5]
   126e4:	subs	r0, r8, r0
   126e8:	sbc	r1, r7, r1
   126ec:	cmp	r2, #0
   126f0:	moveq	r1, r2
   126f4:	moveq	r0, r2
   126f8:	strd	r0, [r6, #80]	; 0x50
   126fc:	ldr	r0, [r6, #12]
   12700:	cmp	r0, #0
   12704:	beq	127cc <__assert_fail@plt+0x1498>
   12708:	ldr	r1, [r6, #20]
   1270c:	movw	r3, #45340	; 0xb11c
   12710:	mov	r8, #1
   12714:	mov	r2, #0
   12718:	movt	r3, #1
   1271c:	add	r7, r1, r2, lsl #5
   12720:	mov	r4, r8
   12724:	ldr	r7, [r7, #4]
   12728:	ldr	r5, [r3, r7, lsl #2]
   1272c:	mov	r6, r5
   12730:	mov	r7, r6
   12734:	udiv	r6, r4, r6
   12738:	mls	r6, r6, r7, r4
   1273c:	mov	r4, r7
   12740:	cmp	r6, #0
   12744:	bne	12730 <__assert_fail@plt+0x13fc>
   12748:	udiv	r7, r5, r7
   1274c:	add	r2, r2, #1
   12750:	mul	r8, r7, r8
   12754:	cmp	r2, r0
   12758:	bne	1271c <__assert_fail@plt+0x13e8>
   1275c:	ldr	r1, [sp, #36]	; 0x24
   12760:	tst	r1, #1
   12764:	beq	127dc <__assert_fail@plt+0x14a8>
   12768:	ldr	r5, [sp, #28]
   1276c:	movw	r4, #49576	; 0xc1a8
   12770:	movt	r4, #2
   12774:	cmp	r5, #0
   12778:	beq	1278c <__assert_fail@plt+0x1458>
   1277c:	udiv	r1, r5, r8
   12780:	mls	r1, r1, r8, r5
   12784:	cmp	r1, #0
   12788:	beq	12a84 <__assert_fail@plt+0x1750>
   1278c:	movw	r1, #43754	; 0xaaea
   12790:	mov	r0, #0
   12794:	mov	r2, #5
   12798:	movt	r1, #1
   1279c:	bl	1110c <dcgettext@plt>
   127a0:	mov	r2, r0
   127a4:	mov	r0, #0
   127a8:	mov	r1, #0
   127ac:	mov	r3, r5
   127b0:	str	r8, [sp]
   127b4:	bl	11184 <error@plt>
   127b8:	str	r8, [r4, #48]	; 0x30
   127bc:	ldr	r0, [r4, #12]
   127c0:	cmp	r0, #0
   127c4:	bne	12800 <__assert_fail@plt+0x14cc>
   127c8:	b	12880 <__assert_fail@plt+0x154c>
   127cc:	mov	r8, #1
   127d0:	ldr	r1, [sp, #36]	; 0x24
   127d4:	tst	r1, #1
   127d8:	bne	12768 <__assert_fail@plt+0x1434>
   127dc:	cmp	r8, #15
   127e0:	movw	r2, #49576	; 0xc1a8
   127e4:	movle	r1, #16
   127e8:	movt	r2, #2
   127ec:	sdivle	r1, r1, r8
   127f0:	mulle	r8, r1, r8
   127f4:	str	r8, [r2, #48]	; 0x30
   127f8:	cmp	r0, #0
   127fc:	beq	12880 <__assert_fail@plt+0x154c>
   12800:	movw	r1, #49576	; 0xc1a8
   12804:	mov	r7, #0
   12808:	mov	r2, #0
   1280c:	movt	r1, #2
   12810:	ldr	r3, [r1, #20]
   12814:	movw	r1, #45340	; 0xb11c
   12818:	movt	r1, #1
   1281c:	add	r6, r3, r7, lsl #5
   12820:	add	r7, r7, #1
   12824:	ldr	r5, [r6, #4]
   12828:	ldr	r6, [r6, #24]
   1282c:	ldr	r5, [r1, r5, lsl #2]
   12830:	add	r6, r6, #1
   12834:	udiv	r5, r8, r5
   12838:	mul	r6, r6, r5
   1283c:	cmp	r2, r6
   12840:	movcc	r2, r6
   12844:	cmp	r7, r0
   12848:	bcc	1281c <__assert_fail@plt+0x14e8>
   1284c:	movw	r3, #49576	; 0xc1a8
   12850:	movt	r3, #2
   12854:	ldr	r3, [r3, #20]
   12858:	add	r3, r3, #24
   1285c:	ldr	r7, [r3, #-20]	; 0xffffffec
   12860:	ldr	r6, [r3]
   12864:	subs	r0, r0, #1
   12868:	ldr	r7, [r1, r7, lsl #2]
   1286c:	udiv	r7, r8, r7
   12870:	mls	r7, r6, r7, r2
   12874:	str	r7, [r3, #4]
   12878:	add	r3, r3, #32
   1287c:	bne	1285c <__assert_fail@plt+0x1528>
   12880:	movw	r6, #49576	; 0xc1a8
   12884:	str	sl, [sp, #24]
   12888:	movt	r6, #2
   1288c:	ldrb	r0, [r6]
   12890:	cmp	r0, #1
   12894:	bne	128c0 <__assert_fail@plt+0x158c>
   12898:	ldr	r0, [r6, #36]	; 0x24
   1289c:	cmp	r0, #100	; 0x64
   128a0:	movls	r0, #100	; 0x64
   128a4:	str	r0, [sp, #48]	; 0x30
   128a8:	bl	1822c <__assert_fail@plt+0x6ef8>
   128ac:	ldr	sl, [r6, #56]	; 0x38
   128b0:	ldr	r7, [r6, #60]	; 0x3c
   128b4:	mov	r8, r0
   128b8:	mov	r5, #1
   128bc:	b	12c5c <__assert_fail@plt+0x1928>
   128c0:	mov	r0, #2
   128c4:	mov	r1, r8
   128c8:	bl	182fc <__assert_fail@plt+0x6fc8>
   128cc:	mov	r7, r0
   128d0:	str	r0, [sp, #48]	; 0x30
   128d4:	ldr	r0, [r6, #48]	; 0x30
   128d8:	ldrd	r8, [r6, #56]	; 0x38
   128dc:	str	r7, [sp, #40]	; 0x28
   128e0:	add	r1, r7, r0
   128e4:	str	r1, [sp, #52]	; 0x34
   128e8:	ldrb	r1, [r6, #1]
   128ec:	cmp	r1, #0
   128f0:	beq	129e0 <__assert_fail@plt+0x16ac>
   128f4:	ldr	r2, [r6, #72]	; 0x48
   128f8:	ldr	r1, [r6, #76]	; 0x4c
   128fc:	mov	r4, #0
   12900:	mov	r5, #1
   12904:	subs	r3, r8, r2
   12908:	sbcs	r3, r9, r1
   1290c:	bcs	12a7c <__assert_fail@plt+0x1748>
   12910:	subs	r2, r2, r8
   12914:	sbc	r1, r1, r9
   12918:	subs	r3, r2, r0
   1291c:	sbcs	r1, r1, #0
   12920:	movcc	r0, r2
   12924:	sub	r2, fp, #136	; 0x88
   12928:	mov	r1, r7
   1292c:	bl	14c80 <__assert_fail@plt+0x394c>
   12930:	mov	r5, r0
   12934:	mov	r0, r7
   12938:	ldr	r7, [r6, #48]	; 0x30
   1293c:	ldr	r4, [fp, #-136]	; 0xffffff78
   12940:	mov	sl, #0
   12944:	cmp	r4, r7
   12948:	bcc	12b00 <__assert_fail@plt+0x17cc>
   1294c:	mov	sl, #0
   12950:	cmp	r4, r7
   12954:	bne	132dc <__assert_fail@plt+0x1fa8>
   12958:	eor	sl, sl, #1
   1295c:	add	r2, sp, #48	; 0x30
   12960:	str	r0, [sp]
   12964:	mov	r0, r8
   12968:	uxtb	r1, sl
   1296c:	ldr	r6, [r2, r1, lsl #2]
   12970:	mov	r1, r9
   12974:	mov	r2, r7
   12978:	mov	r3, r6
   1297c:	bl	14d78 <__assert_fail@plt+0x3a44>
   12980:	movw	r4, #49576	; 0xc1a8
   12984:	adds	r8, r8, r7
   12988:	movt	r4, #2
   1298c:	adc	r9, r9, #0
   12990:	ldrd	r0, [r4, #72]	; 0x48
   12994:	subs	r2, r8, r0
   12998:	sbcs	r2, r9, r1
   1299c:	bcs	12af4 <__assert_fail@plt+0x17c0>
   129a0:	subs	r2, r0, r8
   129a4:	ldr	r0, [r4, #48]	; 0x30
   129a8:	sbc	r1, r1, r9
   129ac:	subs	r3, r2, r0
   129b0:	sbcs	r1, r1, #0
   129b4:	movcc	r0, r2
   129b8:	mov	r1, r6
   129bc:	sub	r2, fp, #136	; 0x88
   129c0:	bl	14c80 <__assert_fail@plt+0x394c>
   129c4:	ldr	r7, [r4, #48]	; 0x30
   129c8:	ldr	r4, [fp, #-136]	; 0xffffff78
   129cc:	and	r5, r5, r0
   129d0:	mov	r0, r6
   129d4:	cmp	r4, r7
   129d8:	bcs	12950 <__assert_fail@plt+0x161c>
   129dc:	b	12b00 <__assert_fail@plt+0x17cc>
   129e0:	sub	r2, fp, #136	; 0x88
   129e4:	mov	r1, r7
   129e8:	bl	14c80 <__assert_fail@plt+0x394c>
   129ec:	ldr	r6, [r6, #48]	; 0x30
   129f0:	ldr	r4, [fp, #-136]	; 0xffffff78
   129f4:	mov	r5, r0
   129f8:	mov	sl, #0
   129fc:	cmp	r4, r6
   12a00:	bcc	12b10 <__assert_fail@plt+0x17dc>
   12a04:	mov	sl, #0
   12a08:	mov	r0, r7
   12a0c:	cmp	r4, r6
   12a10:	bne	13208 <__assert_fail@plt+0x1ed4>
   12a14:	eor	sl, sl, #1
   12a18:	add	r2, sp, #48	; 0x30
   12a1c:	str	r0, [sp]
   12a20:	mov	r0, r8
   12a24:	and	r1, sl, #1
   12a28:	ldr	r7, [r2, r1, lsl #2]
   12a2c:	mov	r1, r9
   12a30:	mov	r2, r6
   12a34:	mov	r3, r7
   12a38:	bl	14d78 <__assert_fail@plt+0x3a44>
   12a3c:	movw	r0, #49576	; 0xc1a8
   12a40:	adds	r8, r8, r6
   12a44:	mov	r1, r7
   12a48:	sub	r2, fp, #136	; 0x88
   12a4c:	movt	r0, #2
   12a50:	adc	r9, r9, #0
   12a54:	mov	r4, r0
   12a58:	ldr	r0, [r0, #48]	; 0x30
   12a5c:	bl	14c80 <__assert_fail@plt+0x394c>
   12a60:	ldr	r6, [r4, #48]	; 0x30
   12a64:	ldr	r4, [fp, #-136]	; 0xffffff78
   12a68:	and	r5, r5, r0
   12a6c:	mov	r0, r7
   12a70:	cmp	r4, r6
   12a74:	bcs	12a0c <__assert_fail@plt+0x16d8>
   12a78:	b	12b10 <__assert_fail@plt+0x17dc>
   12a7c:	mov	sl, #0
   12a80:	b	12af8 <__assert_fail@plt+0x17c4>
   12a84:	str	r5, [r4, #48]	; 0x30
   12a88:	mov	r8, r5
   12a8c:	cmp	r0, #0
   12a90:	bne	12800 <__assert_fail@plt+0x14cc>
   12a94:	b	12880 <__assert_fail@plt+0x154c>
   12a98:	ldr	r0, [sl]
   12a9c:	add	r0, r4, r0, lsl #2
   12aa0:	ldr	r5, [r0, #8]
   12aa4:	ldrb	r0, [r5]
   12aa8:	cmp	r0, #0
   12aac:	beq	123b4 <__assert_fail@plt+0x1080>
   12ab0:	cmp	r0, #43	; 0x2b
   12ab4:	mov	r1, #46	; 0x2e
   12ab8:	addeq	r5, r5, #1
   12abc:	mov	r0, r5
   12ac0:	bl	11208 <strchr@plt>
   12ac4:	mov	r2, #10
   12ac8:	cmp	r0, #0
   12acc:	bne	13064 <__assert_fail@plt+0x1d30>
   12ad0:	ldrb	r0, [r5]
   12ad4:	cmp	r0, #48	; 0x30
   12ad8:	bne	13060 <__assert_fail@plt+0x1d2c>
   12adc:	ldrb	r0, [r5, #1]
   12ae0:	mov	r2, #16
   12ae4:	orr	r0, r0, #32
   12ae8:	cmp	r0, #120	; 0x78
   12aec:	movne	r2, #8
   12af0:	b	13064 <__assert_fail@plt+0x1d30>
   12af4:	mov	r4, #0
   12af8:	str	r4, [fp, #-136]	; 0xffffff78
   12afc:	mov	r4, #0
   12b00:	uxtb	sl, sl
   12b04:	and	r5, r5, #1
   12b08:	cmp	sl, #0
   12b0c:	movwne	sl, #1
   12b10:	cmp	r4, #0
   12b14:	beq	12bf4 <__assert_fail@plt+0x18c0>
   12b18:	movw	r0, #49576	; 0xc1a8
   12b1c:	str	r5, [sp, #36]	; 0x24
   12b20:	movt	r0, #2
   12b24:	ldr	lr, [r0, #12]
   12b28:	mov	r0, #1
   12b2c:	cmp	lr, #0
   12b30:	beq	12b90 <__assert_fail@plt+0x185c>
   12b34:	movw	r0, #49576	; 0xc1a8
   12b38:	movw	ip, #45340	; 0xb11c
   12b3c:	mov	r3, #0
   12b40:	movt	r0, #2
   12b44:	movt	ip, #1
   12b48:	ldr	r2, [r0, #20]
   12b4c:	mov	r0, #1
   12b50:	add	r1, r2, r3, lsl #5
   12b54:	ldr	r1, [r1, #4]
   12b58:	ldr	r7, [ip, r1, lsl #2]
   12b5c:	mov	r1, r0
   12b60:	mov	r5, r7
   12b64:	mov	r6, r5
   12b68:	udiv	r5, r1, r5
   12b6c:	mls	r5, r5, r6, r1
   12b70:	mov	r1, r6
   12b74:	cmp	r5, #0
   12b78:	bne	12b64 <__assert_fail@plt+0x1830>
   12b7c:	udiv	r1, r7, r6
   12b80:	add	r3, r3, #1
   12b84:	mul	r0, r1, r0
   12b88:	cmp	r3, lr
   12b8c:	bne	12b50 <__assert_fail@plt+0x181c>
   12b90:	add	r1, r4, r0
   12b94:	add	r5, sp, #48	; 0x30
   12b98:	sub	r1, r1, #1
   12b9c:	udiv	r2, r1, r0
   12ba0:	mls	r0, r2, r0, r1
   12ba4:	add	r0, r0, r4
   12ba8:	sub	r2, r1, r0
   12bac:	and	r0, sl, #1
   12bb0:	mov	r1, #0
   12bb4:	ldr	r6, [r5, r0, lsl #2]
   12bb8:	add	r0, r6, r4
   12bbc:	bl	11244 <memset@plt>
   12bc0:	mov	r0, #1
   12bc4:	mov	r1, r9
   12bc8:	mov	r2, r4
   12bcc:	str	r6, [sp]
   12bd0:	bic	r0, r0, sl
   12bd4:	ldr	r3, [r5, r0, lsl #2]
   12bd8:	mov	r0, r8
   12bdc:	bl	14d78 <__assert_fail@plt+0x3a44>
   12be0:	ldr	r5, [sp, #36]	; 0x24
   12be4:	movw	r6, #49576	; 0xc1a8
   12be8:	adds	r8, r8, r4
   12bec:	adc	r9, r9, #0
   12bf0:	b	12bf8 <__assert_fail@plt+0x18c4>
   12bf4:	movw	r6, #49576	; 0xc1a8
   12bf8:	movt	r6, #2
   12bfc:	ldr	r3, [r6, #24]
   12c00:	mov	r0, r8
   12c04:	mov	r1, r9
   12c08:	mov	r2, #10
   12c0c:	blx	r3
   12c10:	ldrd	r0, [r6, #72]	; 0x48
   12c14:	ldr	sl, [sp, #24]
   12c18:	ldr	r4, [sp, #40]	; 0x28
   12c1c:	subs	r0, r8, r0
   12c20:	sbcs	r0, r9, r1
   12c24:	bcc	12c40 <__assert_fail@plt+0x190c>
   12c28:	ldrb	r0, [r6, #1]
   12c2c:	cmp	r0, #0
   12c30:	beq	12c40 <__assert_fail@plt+0x190c>
   12c34:	mov	r0, #0
   12c38:	bl	14b78 <__assert_fail@plt+0x3844>
   12c3c:	and	r5, r5, r0
   12c40:	mov	r0, r4
   12c44:	bl	1586c <__assert_fail@plt+0x4538>
   12c48:	b	12fa0 <__assert_fail@plt+0x1c6c>
   12c4c:	add	r2, r1, #1
   12c50:	str	r2, [r0, #20]
   12c54:	mov	r0, #10
   12c58:	strb	r0, [r1]
   12c5c:	ldrb	r0, [r6, #1]
   12c60:	cmp	r0, #0
   12c64:	beq	12c8c <__assert_fail@plt+0x1958>
   12c68:	ldr	r1, [r6, #36]	; 0x24
   12c6c:	ldrd	r2, [r6, #72]	; 0x48
   12c70:	subs	r2, r2, r1
   12c74:	sbcs	r3, r3, #0
   12c78:	bcc	130bc <__assert_fail@plt+0x1d88>
   12c7c:	subs	r2, sl, r2
   12c80:	sbcs	r2, r7, r3
   12c84:	bcc	12c90 <__assert_fail@plt+0x195c>
   12c88:	b	130bc <__assert_fail@plt+0x1d88>
   12c8c:	ldr	r1, [r6, #36]	; 0x24
   12c90:	mov	r9, #0
   12c94:	cmp	r1, #0
   12c98:	beq	12d38 <__assert_fail@plt+0x1a04>
   12c9c:	ldr	r0, [r6, #44]	; 0x2c
   12ca0:	mov	r6, #1
   12ca4:	cmp	r0, #0
   12ca8:	beq	12f88 <__assert_fail@plt+0x1c54>
   12cac:	bl	11250 <fgetc@plt>
   12cb0:	cmn	r0, #1
   12cb4:	bne	12ce8 <__assert_fail@plt+0x19b4>
   12cb8:	bl	11214 <__errno_location@plt>
   12cbc:	ldr	r0, [r0]
   12cc0:	bl	14b78 <__assert_fail@plt+0x3844>
   12cc4:	and	r4, r6, r0
   12cc8:	bl	14004 <__assert_fail@plt+0x2cd0>
   12ccc:	and	r6, r4, r0
   12cd0:	movw	r0, #49576	; 0xc1a8
   12cd4:	movt	r0, #2
   12cd8:	ldr	r0, [r0, #44]	; 0x2c
   12cdc:	cmp	r0, #0
   12ce0:	bne	12cac <__assert_fail@plt+0x1978>
   12ce4:	b	12f88 <__assert_fail@plt+0x1c54>
   12ce8:	adds	sl, sl, #1
   12cec:	mov	r4, r0
   12cf0:	and	r5, r5, r6
   12cf4:	adc	r7, r7, #0
   12cf8:	cmn	r0, #1
   12cfc:	ble	12f8c <__assert_fail@plt+0x1c58>
   12d00:	bl	111e4 <__ctype_b_loc@plt>
   12d04:	ldr	r0, [r0]
   12d08:	movw	r6, #49576	; 0xc1a8
   12d0c:	movt	r6, #2
   12d10:	add	r0, r0, r4, lsl #1
   12d14:	ldrb	r0, [r0, #1]
   12d18:	tst	r0, #64	; 0x40
   12d1c:	beq	12c5c <__assert_fail@plt+0x1928>
   12d20:	strb	r4, [r8, r9]
   12d24:	add	r9, r9, #1
   12d28:	ldr	r0, [r6, #36]	; 0x24
   12d2c:	cmp	r9, r0
   12d30:	bcc	12c9c <__assert_fail@plt+0x1968>
   12d34:	ldrb	r0, [r6, #1]
   12d38:	ldrd	r2, [r6, #72]	; 0x48
   12d3c:	subs	r1, sl, r2
   12d40:	sbcs	r1, r7, r3
   12d44:	bcc	12eb4 <__assert_fail@plt+0x1b80>
   12d48:	cmp	r0, #0
   12d4c:	beq	12eb4 <__assert_fail@plt+0x1b80>
   12d50:	mov	r0, #0
   12d54:	mov	r2, #32
   12d58:	strb	r0, [r8, r9]
   12d5c:	mvn	r0, r9
   12d60:	ldr	r3, [r6, #24]
   12d64:	adds	r0, sl, r0
   12d68:	sbc	r1, r7, #0
   12d6c:	blx	r3
   12d70:	movw	r9, #49524	; 0xc174
   12d74:	mov	r4, r8
   12d78:	movt	r9, #2
   12d7c:	ldrb	r1, [r4]
   12d80:	cmp	r1, #13
   12d84:	bls	12e54 <__assert_fail@plt+0x1b20>
   12d88:	b	12e0c <__assert_fail@plt+0x1ad8>
   12d8c:	ldr	r1, [r9]
   12d90:	movw	r0, #44847	; 0xaf2f
   12d94:	movt	r0, #1
   12d98:	b	12df8 <__assert_fail@plt+0x1ac4>
   12d9c:	ldr	r1, [r9]
   12da0:	movw	r0, #44850	; 0xaf32
   12da4:	movt	r0, #1
   12da8:	b	12df8 <__assert_fail@plt+0x1ac4>
   12dac:	ldr	r1, [r9]
   12db0:	movw	r0, #44862	; 0xaf3e
   12db4:	movt	r0, #1
   12db8:	b	12df8 <__assert_fail@plt+0x1ac4>
   12dbc:	ldr	r1, [r9]
   12dc0:	movw	r0, #44853	; 0xaf35
   12dc4:	movt	r0, #1
   12dc8:	b	12df8 <__assert_fail@plt+0x1ac4>
   12dcc:	ldr	r1, [r9]
   12dd0:	movw	r0, #44856	; 0xaf38
   12dd4:	movt	r0, #1
   12dd8:	b	12df8 <__assert_fail@plt+0x1ac4>
   12ddc:	ldr	r1, [r9]
   12de0:	movw	r0, #44865	; 0xaf41
   12de4:	movt	r0, #1
   12de8:	b	12df8 <__assert_fail@plt+0x1ac4>
   12dec:	ldr	r1, [r9]
   12df0:	movw	r0, #44859	; 0xaf3b
   12df4:	movt	r0, #1
   12df8:	bl	1107c <fputs_unlocked@plt>
   12dfc:	add	r4, r4, #1
   12e00:	ldrb	r1, [r4]
   12e04:	cmp	r1, #13
   12e08:	bls	12e54 <__assert_fail@plt+0x1b20>
   12e0c:	ldr	r0, [r9]
   12e10:	ldr	r2, [r0, #20]
   12e14:	ldr	r3, [r0, #24]
   12e18:	cmp	r2, r3
   12e1c:	bcs	12e40 <__assert_fail@plt+0x1b0c>
   12e20:	add	r3, r2, #1
   12e24:	add	r4, r4, #1
   12e28:	str	r3, [r0, #20]
   12e2c:	strb	r1, [r2]
   12e30:	ldrb	r1, [r4]
   12e34:	cmp	r1, #13
   12e38:	bls	12e54 <__assert_fail@plt+0x1b20>
   12e3c:	b	12e0c <__assert_fail@plt+0x1ad8>
   12e40:	bl	112a4 <__overflow@plt>
   12e44:	add	r4, r4, #1
   12e48:	ldrb	r1, [r4]
   12e4c:	cmp	r1, #13
   12e50:	bhi	12e0c <__assert_fail@plt+0x1ad8>
   12e54:	add	r0, pc, #0
   12e58:	ldr	pc, [r0, r1, lsl #2]
   12e5c:	muleq	r1, r4, lr
   12e60:	andeq	r2, r1, ip, lsl #28
   12e64:	andeq	r2, r1, ip, lsl #28
   12e68:	andeq	r2, r1, ip, lsl #28
   12e6c:	andeq	r2, r1, ip, lsl #28
   12e70:	andeq	r2, r1, ip, lsl #28
   12e74:	andeq	r2, r1, ip, lsl #28
   12e78:	andeq	r2, r1, ip, lsl #27
   12e7c:	muleq	r1, ip, sp
   12e80:	andeq	r2, r1, ip, lsr #27
   12e84:	andeq	r2, r1, ip, asr #27
   12e88:	ldrdeq	r2, [r1], -ip
   12e8c:			; <UNDEFINED> instruction: 0x00012dbc
   12e90:	andeq	r2, r1, ip, ror #27
   12e94:	ldr	r0, [r9]
   12e98:	ldr	r1, [r0, #20]
   12e9c:	ldr	r2, [r0, #24]
   12ea0:	cmp	r1, r2
   12ea4:	bcc	12c4c <__assert_fail@plt+0x1918>
   12ea8:	mov	r1, #10
   12eac:	bl	112a4 <__overflow@plt>
   12eb0:	b	12c5c <__assert_fail@plt+0x1928>
   12eb4:	ldr	r0, [sp, #48]	; 0x30
   12eb8:	cmp	r9, r0
   12ebc:	bne	12ed0 <__assert_fail@plt+0x1b9c>
   12ec0:	mov	r0, r8
   12ec4:	add	r1, sp, #48	; 0x30
   12ec8:	bl	18360 <__assert_fail@plt+0x702c>
   12ecc:	mov	r8, r0
   12ed0:	ldr	r0, [r6, #44]	; 0x2c
   12ed4:	mov	r4, #1
   12ed8:	str	r8, [sp, #40]	; 0x28
   12edc:	cmp	r0, #0
   12ee0:	beq	12fd4 <__assert_fail@plt+0x1ca0>
   12ee4:	bl	11250 <fgetc@plt>
   12ee8:	cmn	r0, #1
   12eec:	bne	12f18 <__assert_fail@plt+0x1be4>
   12ef0:	bl	11214 <__errno_location@plt>
   12ef4:	ldr	r0, [r0]
   12ef8:	bl	14b78 <__assert_fail@plt+0x3844>
   12efc:	and	r4, r4, r0
   12f00:	bl	14004 <__assert_fail@plt+0x2cd0>
   12f04:	and	r4, r4, r0
   12f08:	ldr	r0, [r6, #44]	; 0x2c
   12f0c:	cmp	r0, #0
   12f10:	bne	12ee4 <__assert_fail@plt+0x1bb0>
   12f14:	b	12fd4 <__assert_fail@plt+0x1ca0>
   12f18:	adds	sl, sl, #1
   12f1c:	mov	r8, r0
   12f20:	and	r5, r5, r4
   12f24:	adc	r7, r7, #0
   12f28:	cmn	r0, #1
   12f2c:	ble	130d8 <__assert_fail@plt+0x1da4>
   12f30:	cmp	r8, #0
   12f34:	beq	12f78 <__assert_fail@plt+0x1c44>
   12f38:	bl	111e4 <__ctype_b_loc@plt>
   12f3c:	ldr	r0, [r0]
   12f40:	add	r0, r0, r8, lsl #1
   12f44:	ldrb	r0, [r0, #1]
   12f48:	tst	r0, #64	; 0x40
   12f4c:	beq	12f80 <__assert_fail@plt+0x1c4c>
   12f50:	ldr	r0, [sp, #40]	; 0x28
   12f54:	strb	r8, [r0, r9]
   12f58:	mov	r8, r0
   12f5c:	add	r9, r9, #1
   12f60:	ldrd	r0, [r6, #72]	; 0x48
   12f64:	subs	r0, sl, r0
   12f68:	sbcs	r0, r7, r1
   12f6c:	bcc	12eb4 <__assert_fail@plt+0x1b80>
   12f70:	ldrb	r0, [r6, #1]
   12f74:	b	12d48 <__assert_fail@plt+0x1a14>
   12f78:	ldr	r8, [sp, #40]	; 0x28
   12f7c:	b	12d50 <__assert_fail@plt+0x1a1c>
   12f80:	ldr	r8, [sp, #40]	; 0x28
   12f84:	b	12c5c <__assert_fail@plt+0x1928>
   12f88:	and	r5, r5, r6
   12f8c:	movw	r6, #49576	; 0xc1a8
   12f90:	mov	r0, r8
   12f94:	movt	r6, #2
   12f98:	bl	1586c <__assert_fail@plt+0x4538>
   12f9c:	ldr	sl, [sp, #24]
   12fa0:	and	sl, sl, r5
   12fa4:	ldrb	r0, [r6, #6]
   12fa8:	cmp	r0, #1
   12fac:	bne	12fc8 <__assert_fail@plt+0x1c94>
   12fb0:	movw	r0, #49520	; 0xc170
   12fb4:	movt	r0, #2
   12fb8:	ldr	r0, [r0]
   12fbc:	bl	15768 <__assert_fail@plt+0x4434>
   12fc0:	cmn	r0, #1
   12fc4:	beq	132b0 <__assert_fail@plt+0x1f7c>
   12fc8:	eor	r0, sl, #1
   12fcc:	sub	sp, fp, #28
   12fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fd4:	ldr	r0, [sp, #40]	; 0x28
   12fd8:	and	r5, r5, r4
   12fdc:	b	12f98 <__assert_fail@plt+0x1c64>
   12fe0:	mov	r2, #8
   12fe4:	add	r3, sp, #48	; 0x30
   12fe8:	mov	r0, r5
   12fec:	mov	r1, #0
   12ff0:	str	r8, [sp]
   12ff4:	mov	r6, #0
   12ff8:	bl	18adc <__assert_fail@plt+0x77a8>
   12ffc:	cmp	r0, #0
   13000:	beq	13030 <__assert_fail@plt+0x1cfc>
   13004:	ldr	r0, [fp, #-136]	; 0xffffff78
   13008:	ldr	r1, [fp, #-132]	; 0xffffff7c
   1300c:	movw	r2, #49576	; 0xc1a8
   13010:	add	r5, r4, #4
   13014:	mov	r6, #1
   13018:	movt	r2, #2
   1301c:	strd	r0, [r2, #56]	; 0x38
   13020:	ldr	r0, [sl]
   13024:	ldr	r0, [r4, r0, lsl #2]!
   13028:	str	r0, [r4, #4]
   1302c:	b	123d4 <__assert_fail@plt+0x10a0>
   13030:	movw	r1, #49576	; 0xc1a8
   13034:	mov	r0, #1
   13038:	ldr	r8, [fp, #-136]	; 0xffffff78
   1303c:	ldr	r7, [fp, #-132]	; 0xffffff7c
   13040:	add	r5, r4, #8
   13044:	movt	r1, #2
   13048:	strb	r0, [r1, #5]
   1304c:	mov	r2, r1
   13050:	ldr	r0, [sp, #48]	; 0x30
   13054:	ldr	r1, [sp, #52]	; 0x34
   13058:	strd	r0, [r2, #56]	; 0x38
   1305c:	b	123d4 <__assert_fail@plt+0x10a0>
   13060:	mov	r2, #8
   13064:	sub	r3, fp, #136	; 0x88
   13068:	mov	r0, r5
   1306c:	mov	r1, #0
   13070:	str	r8, [sp]
   13074:	bl	18adc <__assert_fail@plt+0x77a8>
   13078:	cmp	r0, #0
   1307c:	bne	123b4 <__assert_fail@plt+0x1080>
   13080:	movw	r0, #49576	; 0xc1a8
   13084:	mov	r6, #1
   13088:	ldr	r1, [sp, #52]	; 0x34
   1308c:	add	r5, r4, #8
   13090:	ldr	r8, [fp, #-136]	; 0xffffff78
   13094:	ldr	r7, [fp, #-132]	; 0xffffff7c
   13098:	movt	r0, #2
   1309c:	mov	r2, r0
   130a0:	strb	r6, [r0, #5]
   130a4:	ldr	r0, [sp, #48]	; 0x30
   130a8:	strd	r0, [r2, #56]	; 0x38
   130ac:	ldr	r0, [sl]
   130b0:	ldr	r0, [r4, r0, lsl #2]!
   130b4:	str	r0, [r4, #8]
   130b8:	b	123d4 <__assert_fail@plt+0x10a0>
   130bc:	mov	r0, r8
   130c0:	bl	1586c <__assert_fail@plt+0x4538>
   130c4:	mov	r0, #0
   130c8:	bl	14b78 <__assert_fail@plt+0x3844>
   130cc:	ldr	sl, [sp, #24]
   130d0:	and	r5, r5, r0
   130d4:	b	12fa0 <__assert_fail@plt+0x1c6c>
   130d8:	ldr	r0, [sp, #40]	; 0x28
   130dc:	b	12f98 <__assert_fail@plt+0x1c64>
   130e0:	mov	r0, #1
   130e4:	bl	11430 <__assert_fail@plt+0xfc>
   130e8:	movw	r0, #49416	; 0xc108
   130ec:	movw	r2, #43593	; 0xaa49
   130f0:	mov	r1, #0
   130f4:	movt	r0, #2
   130f8:	movt	r2, #1
   130fc:	str	r1, [sp, #4]
   13100:	movw	r1, #43419	; 0xa99b
   13104:	ldr	r3, [r0]
   13108:	movw	r0, #49524	; 0xc174
   1310c:	str	r2, [sp]
   13110:	movw	r2, #43579	; 0xaa3b
   13114:	movt	r1, #1
   13118:	movt	r0, #2
   1311c:	movt	r2, #1
   13120:	ldr	r0, [r0]
   13124:	bl	17ff8 <__assert_fail@plt+0x6cc4>
   13128:	mov	r0, #0
   1312c:	bl	111f0 <exit@plt>
   13130:	mov	r0, #0
   13134:	bl	11430 <__assert_fail@plt+0xfc>
   13138:	movw	r1, #43446	; 0xa9b6
   1313c:	mov	r0, #0
   13140:	mov	r2, #5
   13144:	movt	r1, #1
   13148:	bl	1110c <dcgettext@plt>
   1314c:	mov	r2, r0
   13150:	ldr	r0, [r5]
   13154:	mov	r1, #0
   13158:	ldrb	r3, [r0]
   1315c:	mov	r0, #1
   13160:	bl	11184 <error@plt>
   13164:	ldr	r2, [r5]
   13168:	ldr	r1, [sp, #44]	; 0x2c
   1316c:	movw	r3, #45120	; 0xb040
   13170:	movt	r3, #1
   13174:	str	r2, [sp]
   13178:	mov	r2, #83	; 0x53
   1317c:	bl	18a18 <__assert_fail@plt+0x76e4>
   13180:	ldr	r2, [r5]
   13184:	ldr	r1, [sp, #44]	; 0x2c
   13188:	movw	r3, #45120	; 0xb040
   1318c:	movt	r3, #1
   13190:	str	r2, [sp]
   13194:	mov	r2, #106	; 0x6a
   13198:	bl	18a18 <__assert_fail@plt+0x76e4>
   1319c:	ldr	r2, [r5]
   131a0:	ldr	r1, [sp, #44]	; 0x2c
   131a4:	movw	r3, #45120	; 0xb040
   131a8:	movt	r3, #1
   131ac:	str	r2, [sp]
   131b0:	mov	r2, #78	; 0x4e
   131b4:	bl	18a18 <__assert_fail@plt+0x76e4>
   131b8:	ldr	r2, [r5]
   131bc:	ldr	r1, [sp, #44]	; 0x2c
   131c0:	movw	r3, #45120	; 0xb040
   131c4:	movt	r3, #1
   131c8:	str	r2, [sp]
   131cc:	mov	r2, #119	; 0x77
   131d0:	bl	18a18 <__assert_fail@plt+0x76e4>
   131d4:	movw	r1, #43518	; 0xa9fe
   131d8:	mov	r0, #0
   131dc:	mov	r2, #5
   131e0:	movt	r1, #1
   131e4:	bl	1110c <dcgettext@plt>
   131e8:	mov	r4, r0
   131ec:	ldr	r0, [r5]
   131f0:	bl	17b54 <__assert_fail@plt+0x6820>
   131f4:	mov	r3, r0
   131f8:	mov	r0, #1
   131fc:	mov	r1, #0
   13200:	mov	r2, r4
   13204:	bl	11184 <error@plt>
   13208:	movw	r0, #44941	; 0xaf8d
   1320c:	movw	r1, #44375	; 0xad57
   13210:	movw	r3, #44973	; 0xafad
   13214:	movw	r2, #1418	; 0x58a
   13218:	movt	r0, #1
   1321c:	movt	r1, #1
   13220:	movt	r3, #1
   13224:	bl	11334 <__assert_fail@plt>
   13228:	movw	r1, #43606	; 0xaa56
   1322c:	movt	r1, #1
   13230:	b	13304 <__assert_fail@plt+0x1fd0>
   13234:	movw	r1, #43652	; 0xaa84
   13238:	mov	r0, #0
   1323c:	mov	r2, #5
   13240:	movt	r1, #1
   13244:	bl	1110c <dcgettext@plt>
   13248:	mov	r5, r0
   1324c:	ldr	r0, [sl]
   13250:	add	r0, r4, r0, lsl #2
   13254:	ldr	r0, [r0, #4]
   13258:	bl	17b54 <__assert_fail@plt+0x6820>
   1325c:	mov	r3, r0
   13260:	mov	r0, #0
   13264:	mov	r1, #0
   13268:	mov	r2, r5
   1326c:	bl	11184 <error@plt>
   13270:	movw	r1, #43669	; 0xaa95
   13274:	mov	r0, #0
   13278:	mov	r2, #5
   1327c:	movt	r1, #1
   13280:	bl	1110c <dcgettext@plt>
   13284:	movw	r2, #45998	; 0xb3ae
   13288:	mov	r3, r0
   1328c:	mov	r0, #0
   13290:	mov	r1, #0
   13294:	movt	r2, #1
   13298:	bl	11184 <error@plt>
   1329c:	mov	r0, #1
   132a0:	bl	11430 <__assert_fail@plt+0xfc>
   132a4:	movw	r1, #43714	; 0xaac2
   132a8:	movt	r1, #1
   132ac:	b	13304 <__assert_fail@plt+0x1fd0>
   132b0:	bl	11214 <__errno_location@plt>
   132b4:	ldr	r4, [r0]
   132b8:	movw	r1, #43799	; 0xab17
   132bc:	mov	r0, #0
   132c0:	mov	r2, #5
   132c4:	movt	r1, #1
   132c8:	bl	1110c <dcgettext@plt>
   132cc:	mov	r2, r0
   132d0:	mov	r0, #1
   132d4:	mov	r1, r4
   132d8:	bl	11184 <error@plt>
   132dc:	movw	r0, #44941	; 0xaf8d
   132e0:	movw	r1, #44375	; 0xad57
   132e4:	movw	r3, #44973	; 0xafad
   132e8:	movw	r2, #1404	; 0x57c
   132ec:	movt	r0, #1
   132f0:	movt	r1, #1
   132f4:	movt	r3, #1
   132f8:	bl	11334 <__assert_fail@plt>
   132fc:	movw	r1, #44890	; 0xaf5a
   13300:	movt	r1, #1
   13304:	mov	r0, #0
   13308:	mov	r2, #5
   1330c:	bl	1110c <dcgettext@plt>
   13310:	mov	r2, r0
   13314:	mov	r0, #1
   13318:	mov	r1, #0
   1331c:	bl	11184 <error@plt>
   13320:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13324:	add	fp, sp, #24
   13328:	sub	sp, sp, #32
   1332c:	mov	r4, r1
   13330:	movw	r1, #49576	; 0xc1a8
   13334:	mov	r5, r0
   13338:	mov	r0, #0
   1333c:	add	r9, sp, #7
   13340:	movt	r1, #2
   13344:	strb	r0, [sp, #31]
   13348:	add	r6, r9, #23
   1334c:	ldr	r0, [r1, #28]
   13350:	ldr	r8, [r1, #32]
   13354:	mov	r7, r6
   13358:	strb	r2, [r7], -r8
   1335c:	cmp	r0, #8
   13360:	beq	133a8 <__assert_fail@plt+0x2074>
   13364:	cmp	r0, #10
   13368:	beq	133e0 <__assert_fail@plt+0x20ac>
   1336c:	cmp	r0, #16
   13370:	bne	133d4 <__assert_fail@plt+0x20a0>
   13374:	movw	r1, #44256	; 0xace0
   13378:	add	r0, r9, #22
   1337c:	movt	r1, #1
   13380:	and	r2, r5, #15
   13384:	ldrb	r2, [r1, r2]
   13388:	strb	r2, [r0], #-1
   1338c:	lsr	r2, r5, #4
   13390:	orr	r5, r2, r4, lsl #28
   13394:	orr	r2, r5, r4, lsr #4
   13398:	lsr	r4, r4, #4
   1339c:	cmp	r2, #0
   133a0:	bne	13380 <__assert_fail@plt+0x204c>
   133a4:	b	133d0 <__assert_fail@plt+0x209c>
   133a8:	add	r0, r9, #22
   133ac:	mov	r1, #6
   133b0:	lsr	r2, r5, #3
   133b4:	bfi	r5, r1, #3, #29
   133b8:	strb	r5, [r0], #-1
   133bc:	orr	r5, r2, r4, lsl #29
   133c0:	orr	r2, r5, r4, lsr #3
   133c4:	lsr	r4, r4, #3
   133c8:	cmp	r2, #0
   133cc:	bne	133b0 <__assert_fail@plt+0x207c>
   133d0:	add	r6, r0, #1
   133d4:	cmp	r7, r6
   133d8:	bcc	13428 <__assert_fail@plt+0x20f4>
   133dc:	b	13450 <__assert_fail@plt+0x211c>
   133e0:	add	r6, r9, #22
   133e4:	mov	r0, r5
   133e8:	mov	r1, r4
   133ec:	mov	r2, #10
   133f0:	mov	r3, #0
   133f4:	bl	19ac8 <__assert_fail@plt+0x8794>
   133f8:	add	r2, r0, r0, lsl #2
   133fc:	sub	r2, r5, r2, lsl #1
   13400:	orr	r2, r2, #48	; 0x30
   13404:	strb	r2, [r6], #-1
   13408:	rsbs	r2, r5, #9
   1340c:	mov	r5, r0
   13410:	rscs	r2, r4, #0
   13414:	mov	r4, r1
   13418:	bcc	133e4 <__assert_fail@plt+0x20b0>
   1341c:	add	r6, r6, #1
   13420:	cmp	r7, r6
   13424:	bcs	13450 <__assert_fail@plt+0x211c>
   13428:	sub	r1, r8, #23
   1342c:	rsb	r0, r8, #23
   13430:	sub	r1, r1, r9
   13434:	add	r0, r9, r0
   13438:	add	r2, r6, r1
   1343c:	mov	r1, #48	; 0x30
   13440:	bl	11244 <memset@plt>
   13444:	sub	r6, r6, #1
   13448:	cmp	r7, r6
   1344c:	bcc	13444 <__assert_fail@plt+0x2110>
   13450:	movw	r0, #49524	; 0xc174
   13454:	movt	r0, #2
   13458:	ldr	r1, [r0]
   1345c:	mov	r0, r6
   13460:	bl	1107c <fputs_unlocked@plt>
   13464:	sub	sp, fp, #24
   13468:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1346c:	bx	lr
   13470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13474:	add	fp, sp, #28
   13478:	sub	sp, sp, #20
   1347c:	cmp	r0, #0
   13480:	beq	13c40 <__assert_fail@plt+0x290c>
   13484:	ldrb	r1, [r0]
   13488:	cmp	r1, #0
   1348c:	beq	13ae0 <__assert_fail@plt+0x27ac>
   13490:	movw	r7, #49576	; 0xc1a8
   13494:	mov	r5, r0
   13498:	str	r0, [sp, #12]
   1349c:	movt	r7, #2
   134a0:	ldr	r9, [r7, #12]
   134a4:	ldr	r0, [r7, #16]
   134a8:	cmp	r0, r9
   134ac:	bls	135b4 <__assert_fail@plt+0x2280>
   134b0:	ldr	r8, [r7, #20]
   134b4:	add	r0, r8, r9, lsl #5
   134b8:	cmp	r0, #0
   134bc:	beq	13be0 <__assert_fail@plt+0x28ac>
   134c0:	ldrb	r1, [r5]
   134c4:	sub	r2, r1, #97	; 0x61
   134c8:	cmp	r2, #23
   134cc:	bhi	13b34 <__assert_fail@plt+0x2800>
   134d0:	add	r3, pc, #0
   134d4:	ldr	pc, [r3, r2, lsl #2]
   134d8:	andeq	r3, r1, r8, lsr #12
   134dc:	andeq	r3, r1, r4, lsr fp
   134e0:	andeq	r3, r1, r0, ror #11
   134e4:	andeq	r3, r1, r8, lsr r5
   134e8:	andeq	r3, r1, r4, lsr fp
   134ec:	strdeq	r3, [r1], -ip
   134f0:	andeq	r3, r1, r4, lsr fp
   134f4:	andeq	r3, r1, r4, lsr fp
   134f8:	andeq	r3, r1, r4, lsr fp
   134fc:	andeq	r3, r1, r4, lsr fp
   13500:	andeq	r3, r1, r4, lsr fp
   13504:	andeq	r3, r1, r4, lsr fp
   13508:	andeq	r3, r1, r4, lsr fp
   1350c:	andeq	r3, r1, r4, lsr fp
   13510:	andeq	r3, r1, r8, lsr r5
   13514:	andeq	r3, r1, r4, lsr fp
   13518:	andeq	r3, r1, r4, lsr fp
   1351c:	andeq	r3, r1, r4, lsr fp
   13520:	andeq	r3, r1, r4, lsr fp
   13524:	andeq	r3, r1, r4, lsr fp
   13528:	andeq	r3, r1, r8, lsr r5
   1352c:	andeq	r3, r1, r4, lsr fp
   13530:	andeq	r3, r1, r4, lsr fp
   13534:	andeq	r3, r1, r8, lsr r5
   13538:	mov	r4, r5
   1353c:	str	r5, [sp, #16]
   13540:	ldrb	r3, [r4, #1]!
   13544:	sub	r2, r3, #67	; 0x43
   13548:	cmp	r2, #16
   1354c:	bhi	13674 <__assert_fail@plt+0x2340>
   13550:	add	r6, pc, #0
   13554:	ldr	pc, [r6, r2, lsl #2]
   13558:	andeq	r3, r1, r4, asr #12
   1355c:	andeq	r3, r1, r4, ror r6
   13560:	andeq	r3, r1, r4, ror r6
   13564:	andeq	r3, r1, r4, ror r6
   13568:	andeq	r3, r1, r4, ror r6
   1356c:	andeq	r3, r1, r4, ror r6
   13570:	muleq	r1, ip, r5
   13574:	andeq	r3, r1, r4, ror r6
   13578:	andeq	r3, r1, r4, ror r6
   1357c:	muleq	r1, ip, r5
   13580:	andeq	r3, r1, r4, ror r6
   13584:	andeq	r3, r1, r4, ror r6
   13588:	andeq	r3, r1, r4, ror r6
   1358c:	andeq	r3, r1, r4, ror r6
   13590:	andeq	r3, r1, r4, ror r6
   13594:	andeq	r3, r1, r4, ror r6
   13598:	andeq	r3, r1, ip, asr r6
   1359c:	add	r4, r5, #2
   135a0:	mov	r6, #4
   135a4:	sub	r1, r1, #100	; 0x64
   135a8:	cmp	r1, #20
   135ac:	bls	136e8 <__assert_fail@plt+0x23b4>
   135b0:	b	13bdc <__assert_fail@plt+0x28a8>
   135b4:	ldr	r0, [r7, #20]
   135b8:	add	r1, r7, #16
   135bc:	mov	r2, #32
   135c0:	bl	183d8 <__assert_fail@plt+0x70a4>
   135c4:	str	r0, [r7, #20]
   135c8:	mov	r8, r0
   135cc:	ldr	r9, [r7, #12]
   135d0:	add	r0, r8, r9, lsl #5
   135d4:	cmp	r0, #0
   135d8:	bne	134c0 <__assert_fail@plt+0x218c>
   135dc:	b	13be0 <__assert_fail@plt+0x28ac>
   135e0:	movw	r0, #19052	; 0x4a6c
   135e4:	add	r4, r5, #1
   135e8:	mov	r6, #3
   135ec:	mov	sl, #1
   135f0:	mov	r7, #6
   135f4:	movt	r0, #1
   135f8:	b	13a88 <__assert_fail@plt+0x2754>
   135fc:	mov	r4, r5
   13600:	ldrb	r0, [r4, #1]!
   13604:	cmp	r0, #68	; 0x44
   13608:	beq	1361c <__assert_fail@plt+0x22e8>
   1360c:	cmp	r0, #70	; 0x46
   13610:	beq	13978 <__assert_fail@plt+0x2644>
   13614:	cmp	r0, #76	; 0x4c
   13618:	bne	13984 <__assert_fail@plt+0x2650>
   1361c:	add	r4, r5, #2
   13620:	mov	r6, #8
   13624:	b	139ec <__assert_fail@plt+0x26b8>
   13628:	movw	r0, #18844	; 0x499c
   1362c:	add	r4, r5, #1
   13630:	mov	r6, #3
   13634:	mov	sl, #1
   13638:	mov	r7, #5
   1363c:	movt	r0, #1
   13640:	b	13a88 <__assert_fail@plt+0x2754>
   13644:	add	r4, r5, #2
   13648:	mov	r6, #1
   1364c:	sub	r1, r1, #100	; 0x64
   13650:	cmp	r1, #20
   13654:	bls	136e8 <__assert_fail@plt+0x23b4>
   13658:	b	13bdc <__assert_fail@plt+0x28a8>
   1365c:	add	r4, r5, #2
   13660:	mov	r6, #2
   13664:	sub	r1, r1, #100	; 0x64
   13668:	cmp	r1, #20
   1366c:	bls	136e8 <__assert_fail@plt+0x23b4>
   13670:	b	13bdc <__assert_fail@plt+0x28a8>
   13674:	sub	r5, r3, #48	; 0x30
   13678:	mov	r6, #4
   1367c:	cmp	r5, #9
   13680:	bhi	136dc <__assert_fail@plt+0x23a8>
   13684:	ldr	r2, [sp, #16]
   13688:	mov	r6, #0
   1368c:	add	r2, r2, #2
   13690:	movw	r4, #52429	; 0xcccd
   13694:	rsb	r3, r3, #47	; 0x2f
   13698:	movt	r4, #52428	; 0xcccc
   1369c:	umull	r3, r4, r3, r4
   136a0:	cmp	r6, r4, lsr #3
   136a4:	bhi	13af0 <__assert_fail@plt+0x27bc>
   136a8:	add	r3, r6, r6, lsl #2
   136ac:	add	r6, r5, r3, lsl #1
   136b0:	ldrb	r3, [r2], #1
   136b4:	sub	r5, r3, #48	; 0x30
   136b8:	cmp	r5, #10
   136bc:	bcc	13690 <__assert_fail@plt+0x235c>
   136c0:	cmp	r6, #8
   136c4:	bhi	13b84 <__assert_fail@plt+0x2850>
   136c8:	add	r3, r7, r6, lsl #2
   136cc:	ldr	r3, [r3, #88]	; 0x58
   136d0:	cmp	r3, #0
   136d4:	beq	13b84 <__assert_fail@plt+0x2850>
   136d8:	sub	r4, r2, #1
   136dc:	sub	r1, r1, #100	; 0x64
   136e0:	cmp	r1, #20
   136e4:	bhi	13bdc <__assert_fail@plt+0x28a8>
   136e8:	add	r2, r7, r6, lsl #2
   136ec:	ldr	sl, [r2, #88]	; 0x58
   136f0:	add	r2, pc, #0
   136f4:	ldr	pc, [r2, r1, lsl #2]
   136f8:	andeq	r3, r1, ip, asr #14
   136fc:	ldrdeq	r3, [r1], -ip
   13700:	ldrdeq	r3, [r1], -ip
   13704:	ldrdeq	r3, [r1], -ip
   13708:	ldrdeq	r3, [r1], -ip
   1370c:	ldrdeq	r3, [r1], -ip
   13710:	ldrdeq	r3, [r1], -ip
   13714:	ldrdeq	r3, [r1], -ip
   13718:	ldrdeq	r3, [r1], -ip
   1371c:	ldrdeq	r3, [r1], -ip
   13720:	ldrdeq	r3, [r1], -ip
   13724:	andeq	r3, r1, r4, lsl r8
   13728:	ldrdeq	r3, [r1], -ip
   1372c:	ldrdeq	r3, [r1], -ip
   13730:	ldrdeq	r3, [r1], -ip
   13734:	ldrdeq	r3, [r1], -ip
   13738:	ldrdeq	r3, [r1], -ip
   1373c:	andeq	r3, r1, r4, lsl #17
   13740:	ldrdeq	r3, [r1], -ip
   13744:	ldrdeq	r3, [r1], -ip
   13748:	andeq	r3, r1, r4, lsr #15
   1374c:	movw	r1, #43797	; 0xab15
   13750:	movw	r2, #44639	; 0xae5f
   13754:	cmp	sl, #4
   13758:	add	r5, r0, #12
   1375c:	movw	r3, #44632	; 0xae58
   13760:	movt	r1, #1
   13764:	movt	r2, #1
   13768:	mov	r0, r5
   1376c:	movt	r3, #1
   13770:	moveq	r1, r2
   13774:	movw	r2, #44638	; 0xae5e
   13778:	cmp	sl, #5
   1377c:	movt	r2, #1
   13780:	moveq	r1, r2
   13784:	mov	r2, #9
   13788:	str	r1, [sp]
   1378c:	mov	r1, #1
   13790:	bl	11220 <__sprintf_chk@plt>
   13794:	movw	r0, #45432	; 0xb178
   13798:	mov	r7, #0
   1379c:	movt	r0, #1
   137a0:	b	138d8 <__assert_fail@plt+0x25a4>
   137a4:	movw	r1, #44296	; 0xad08
   137a8:	movw	r2, #44660	; 0xae74
   137ac:	cmp	sl, #4
   137b0:	add	r5, r0, #12
   137b4:	movw	r3, #44642	; 0xae62
   137b8:	movt	r1, #1
   137bc:	movt	r2, #1
   137c0:	mov	r0, r5
   137c4:	movt	r3, #1
   137c8:	moveq	r1, r2
   137cc:	movw	r2, #44659	; 0xae73
   137d0:	cmp	sl, #5
   137d4:	movt	r2, #1
   137d8:	moveq	r1, r2
   137dc:	mov	r2, #9
   137e0:	str	r1, [sp, #4]
   137e4:	movw	r1, #45636	; 0xb244
   137e8:	movt	r1, #1
   137ec:	ldr	r6, [r1, r6, lsl #2]
   137f0:	mov	r1, #1
   137f4:	str	r6, [sp]
   137f8:	bl	11220 <__sprintf_chk@plt>
   137fc:	mov	r7, #3
   13800:	mov	r0, r5
   13804:	bl	111fc <strlen@plt>
   13808:	cmp	r0, #9
   1380c:	bcc	138ec <__assert_fail@plt+0x25b8>
   13810:	b	13c20 <__assert_fail@plt+0x28ec>
   13814:	movw	r1, #44874	; 0xaf4a
   13818:	movw	r2, #44652	; 0xae6c
   1381c:	cmp	sl, #4
   13820:	add	r5, r0, #12
   13824:	movw	r3, #44642	; 0xae62
   13828:	movt	r1, #1
   1382c:	movt	r2, #1
   13830:	mov	r0, r5
   13834:	movt	r3, #1
   13838:	moveq	r1, r2
   1383c:	movw	r2, #44651	; 0xae6b
   13840:	cmp	sl, #5
   13844:	movt	r2, #1
   13848:	moveq	r1, r2
   1384c:	mov	r2, #9
   13850:	str	r1, [sp, #4]
   13854:	movw	r1, #45500	; 0xb1bc
   13858:	movt	r1, #1
   1385c:	ldr	r6, [r1, r6, lsl #2]
   13860:	mov	r1, #1
   13864:	str	r6, [sp]
   13868:	bl	11220 <__sprintf_chk@plt>
   1386c:	mov	r7, #2
   13870:	mov	r0, r5
   13874:	bl	111fc <strlen@plt>
   13878:	cmp	r0, #9
   1387c:	bcc	138ec <__assert_fail@plt+0x25b8>
   13880:	b	13c20 <__assert_fail@plt+0x28ec>
   13884:	movw	r1, #44657	; 0xae71
   13888:	movw	r2, #44656	; 0xae70
   1388c:	cmp	sl, #4
   13890:	add	r5, r0, #12
   13894:	movw	r3, #44632	; 0xae58
   13898:	mov	r7, #1
   1389c:	movt	r1, #1
   138a0:	movt	r2, #1
   138a4:	mov	r0, r5
   138a8:	movt	r3, #1
   138ac:	moveq	r1, r2
   138b0:	movw	r2, #44655	; 0xae6f
   138b4:	cmp	sl, #5
   138b8:	movt	r2, #1
   138bc:	moveq	r1, r2
   138c0:	mov	r2, #9
   138c4:	str	r1, [sp]
   138c8:	mov	r1, #1
   138cc:	bl	11220 <__sprintf_chk@plt>
   138d0:	movw	r0, #45568	; 0xb200
   138d4:	movt	r0, #1
   138d8:	ldr	r6, [r0, r6, lsl #2]
   138dc:	mov	r0, r5
   138e0:	bl	111fc <strlen@plt>
   138e4:	cmp	r0, #9
   138e8:	bcs	13c20 <__assert_fail@plt+0x28ec>
   138ec:	ldr	r5, [sp, #16]
   138f0:	sub	r1, sl, #1
   138f4:	cmp	r1, #4
   138f8:	bhi	13bdc <__assert_fail@plt+0x28a8>
   138fc:	movw	r0, #17364	; 0x43d4
   13900:	add	r2, pc, #4
   13904:	movt	r0, #1
   13908:	ldr	pc, [r2, r1, lsl #2]
   1390c:	andeq	r3, r1, r0, lsr #18
   13910:	andeq	r3, r1, ip, asr #18
   13914:	andeq	r3, r1, r8, lsl #21
   13918:	andeq	r3, r1, ip, ror #18
   1391c:	andeq	r3, r1, r0, asr #18
   13920:	movw	r0, #16832	; 0x41c0
   13924:	movw	r1, #16688	; 0x4130
   13928:	cmp	r7, #0
   1392c:	mov	sl, #1
   13930:	movt	r0, #1
   13934:	movt	r1, #1
   13938:	moveq	r0, r1
   1393c:	b	13a88 <__assert_fail@plt+0x2754>
   13940:	movw	r0, #17780	; 0x4574
   13944:	movt	r0, #1
   13948:	b	13a88 <__assert_fail@plt+0x2754>
   1394c:	movw	r0, #17172	; 0x4314
   13950:	movw	r1, #16976	; 0x4250
   13954:	cmp	r7, #0
   13958:	mov	sl, #2
   1395c:	movt	r0, #1
   13960:	movt	r1, #1
   13964:	moveq	r0, r1
   13968:	b	13a88 <__assert_fail@plt+0x2754>
   1396c:	movw	r0, #17572	; 0x44a4
   13970:	movt	r0, #1
   13974:	b	13a88 <__assert_fail@plt+0x2754>
   13978:	add	r4, r5, #2
   1397c:	mov	r6, #4
   13980:	b	139ec <__assert_fail@plt+0x26b8>
   13984:	sub	r2, r0, #48	; 0x30
   13988:	mov	r6, #8
   1398c:	cmp	r2, #9
   13990:	bhi	139ec <__assert_fail@plt+0x26b8>
   13994:	add	r1, r5, #2
   13998:	mov	r6, #0
   1399c:	movw	r3, #52429	; 0xcccd
   139a0:	rsb	r0, r0, #47	; 0x2f
   139a4:	movt	r3, #52428	; 0xcccc
   139a8:	umull	r0, r3, r0, r3
   139ac:	cmp	r6, r3, lsr #3
   139b0:	bhi	13af0 <__assert_fail@plt+0x27bc>
   139b4:	add	r0, r6, r6, lsl #2
   139b8:	add	r6, r2, r0, lsl #1
   139bc:	ldrb	r0, [r1], #1
   139c0:	sub	r2, r0, #48	; 0x30
   139c4:	cmp	r2, #10
   139c8:	bcc	1399c <__assert_fail@plt+0x2668>
   139cc:	cmp	r6, #8
   139d0:	bhi	13b94 <__assert_fail@plt+0x2860>
   139d4:	movw	r0, #49536	; 0xc180
   139d8:	movt	r0, #2
   139dc:	ldr	r0, [r0, r6, lsl #2]
   139e0:	cmp	r0, #0
   139e4:	beq	13b94 <__assert_fail@plt+0x2860>
   139e8:	sub	r4, r1, #1
   139ec:	movw	r0, #49536	; 0xc180
   139f0:	str	r5, [sp, #16]
   139f4:	movt	r0, #2
   139f8:	ldr	r5, [r0, r6, lsl #2]
   139fc:	bl	112d4 <localeconv@plt>
   13a00:	ldr	r0, [r0]
   13a04:	ldrb	r1, [r0]
   13a08:	cmp	r1, #0
   13a0c:	beq	13a48 <__assert_fail@plt+0x2714>
   13a10:	bl	111fc <strlen@plt>
   13a14:	cmp	r5, #8
   13a18:	beq	13a54 <__assert_fail@plt+0x2720>
   13a1c:	cmp	r5, #7
   13a20:	beq	13a70 <__assert_fail@plt+0x273c>
   13a24:	cmp	r5, #6
   13a28:	bne	13bdc <__assert_fail@plt+0x28a8>
   13a2c:	ldr	r5, [sp, #16]
   13a30:	add	r6, r0, #14
   13a34:	movw	r0, #18024	; 0x4668
   13a38:	mov	sl, #6
   13a3c:	mov	r7, #4
   13a40:	movt	r0, #1
   13a44:	b	13a88 <__assert_fail@plt+0x2754>
   13a48:	mov	r0, #1
   13a4c:	cmp	r5, #8
   13a50:	bne	13a1c <__assert_fail@plt+0x26e8>
   13a54:	ldr	r5, [sp, #16]
   13a58:	add	r6, r0, #23
   13a5c:	movw	r0, #18560	; 0x4880
   13a60:	mov	sl, #8
   13a64:	mov	r7, #4
   13a68:	movt	r0, #1
   13a6c:	b	13a88 <__assert_fail@plt+0x2754>
   13a70:	ldr	r5, [sp, #16]
   13a74:	add	r6, r0, #23
   13a78:	movw	r0, #18276	; 0x4764
   13a7c:	mov	sl, #7
   13a80:	mov	r7, #4
   13a84:	movt	r0, #1
   13a88:	str	r7, [r8, r9, lsl #5]!
   13a8c:	str	r6, [r8, #24]
   13a90:	str	sl, [r8, #4]
   13a94:	str	r0, [r8, #8]
   13a98:	mov	r0, r4
   13a9c:	ldrb	r1, [r0], #1
   13aa0:	subs	r1, r1, #122	; 0x7a
   13aa4:	clz	r1, r1
   13aa8:	movne	r0, r4
   13aac:	lsr	r1, r1, #5
   13ab0:	cmp	r5, r0
   13ab4:	strb	r1, [r8, #21]
   13ab8:	beq	13c00 <__assert_fail@plt+0x28cc>
   13abc:	movw	r7, #49576	; 0xc1a8
   13ac0:	mov	r5, r0
   13ac4:	movt	r7, #2
   13ac8:	ldr	r1, [r7, #12]
   13acc:	add	r9, r1, #1
   13ad0:	str	r9, [r7, #12]
   13ad4:	ldrb	r1, [r0]
   13ad8:	cmp	r1, #0
   13adc:	bne	134a4 <__assert_fail@plt+0x2170>
   13ae0:	mov	r5, #1
   13ae4:	mov	r0, r5
   13ae8:	sub	sp, fp, #28
   13aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13af0:	movw	r1, #44532	; 0xadf4
   13af4:	mov	r0, #0
   13af8:	mov	r2, #5
   13afc:	mov	r5, #0
   13b00:	movt	r1, #1
   13b04:	bl	1110c <dcgettext@plt>
   13b08:	mov	r6, r0
   13b0c:	ldr	r0, [sp, #12]
   13b10:	bl	17b54 <__assert_fail@plt+0x6820>
   13b14:	mov	r3, r0
   13b18:	mov	r0, #0
   13b1c:	mov	r1, #0
   13b20:	mov	r2, r6
   13b24:	bl	11184 <error@plt>
   13b28:	mov	r0, r5
   13b2c:	sub	sp, fp, #28
   13b30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b34:	movw	r1, #44795	; 0xaefb
   13b38:	mov	r0, #0
   13b3c:	mov	r2, #5
   13b40:	mov	r4, r5
   13b44:	mov	r5, #0
   13b48:	movt	r1, #1
   13b4c:	bl	1110c <dcgettext@plt>
   13b50:	mov	r6, r0
   13b54:	ldr	r0, [sp, #12]
   13b58:	ldrb	r7, [r4]
   13b5c:	bl	17b54 <__assert_fail@plt+0x6820>
   13b60:	str	r0, [sp]
   13b64:	mov	r0, #0
   13b68:	mov	r1, #0
   13b6c:	mov	r2, r6
   13b70:	mov	r3, r7
   13b74:	bl	11184 <error@plt>
   13b78:	mov	r0, r5
   13b7c:	sub	sp, fp, #28
   13b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b84:	movw	r1, #44555	; 0xae0b
   13b88:	mov	r5, #0
   13b8c:	movt	r1, #1
   13b90:	b	13ba0 <__assert_fail@plt+0x286c>
   13b94:	movw	r1, #44712	; 0xaea8
   13b98:	mov	r5, #0
   13b9c:	movt	r1, #1
   13ba0:	mov	r0, #0
   13ba4:	mov	r2, #5
   13ba8:	bl	1110c <dcgettext@plt>
   13bac:	mov	r4, r0
   13bb0:	ldr	r0, [sp, #12]
   13bb4:	bl	17b54 <__assert_fail@plt+0x6820>
   13bb8:	mov	r3, r0
   13bbc:	mov	r0, #0
   13bc0:	mov	r1, #0
   13bc4:	mov	r2, r4
   13bc8:	str	r6, [sp]
   13bcc:	bl	11184 <error@plt>
   13bd0:	mov	r0, r5
   13bd4:	sub	sp, fp, #28
   13bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bdc:	bl	1131c <abort@plt>
   13be0:	movw	r0, #44435	; 0xad93
   13be4:	movw	r1, #44375	; 0xad57
   13be8:	movw	r3, #44449	; 0xada1
   13bec:	mov	r2, #648	; 0x288
   13bf0:	movt	r0, #1
   13bf4:	movt	r1, #1
   13bf8:	movt	r3, #1
   13bfc:	bl	11334 <__assert_fail@plt>
   13c00:	movw	r0, #44425	; 0xad89
   13c04:	movw	r1, #44375	; 0xad57
   13c08:	movw	r3, #44384	; 0xad60
   13c0c:	movw	r2, #997	; 0x3e5
   13c10:	movt	r0, #1
   13c14:	movt	r1, #1
   13c18:	movt	r3, #1
   13c1c:	bl	11334 <__assert_fail@plt>
   13c20:	movw	r0, #44663	; 0xae77
   13c24:	movw	r1, #44375	; 0xad57
   13c28:	movw	r3, #44449	; 0xada1
   13c2c:	movw	r2, #747	; 0x2eb
   13c30:	movt	r0, #1
   13c34:	movt	r1, #1
   13c38:	movt	r3, #1
   13c3c:	bl	11334 <__assert_fail@plt>
   13c40:	movw	r0, #44365	; 0xad4d
   13c44:	movw	r1, #44375	; 0xad57
   13c48:	movw	r3, #44384	; 0xad60
   13c4c:	movw	r2, #985	; 0x3d9
   13c50:	movt	r0, #1
   13c54:	movt	r1, #1
   13c58:	movt	r3, #1
   13c5c:	bl	11334 <__assert_fail@plt>
   13c60:	push	{r4, r5, r6, r7, fp, lr}
   13c64:	add	fp, sp, #16
   13c68:	movw	r7, #49524	; 0xc174
   13c6c:	mov	r6, r0
   13c70:	mov	r4, r2
   13c74:	mov	r5, r1
   13c78:	movt	r7, #2
   13c7c:	ldr	r0, [r7]
   13c80:	ldr	r1, [r0, #20]
   13c84:	ldr	r2, [r0, #24]
   13c88:	cmp	r1, r2
   13c8c:	bcs	13cdc <__assert_fail@plt+0x29a8>
   13c90:	add	r2, r1, #1
   13c94:	str	r2, [r0, #20]
   13c98:	mov	r0, #40	; 0x28
   13c9c:	strb	r0, [r1]
   13ca0:	mov	r0, r6
   13ca4:	mov	r1, r5
   13ca8:	mov	r2, #41	; 0x29
   13cac:	bl	13320 <__assert_fail@plt+0x1fec>
   13cb0:	cmp	r4, #0
   13cb4:	popeq	{r4, r5, r6, r7, fp, pc}
   13cb8:	ldr	r0, [r7]
   13cbc:	ldr	r1, [r0, #20]
   13cc0:	ldr	r2, [r0, #24]
   13cc4:	cmp	r1, r2
   13cc8:	bcs	13ce8 <__assert_fail@plt+0x29b4>
   13ccc:	add	r2, r1, #1
   13cd0:	str	r2, [r0, #20]
   13cd4:	strb	r4, [r1]
   13cd8:	pop	{r4, r5, r6, r7, fp, pc}
   13cdc:	mov	r1, #40	; 0x28
   13ce0:	bl	112a4 <__overflow@plt>
   13ce4:	b	13ca0 <__assert_fail@plt+0x296c>
   13ce8:	mov	r1, r4
   13cec:	pop	{r4, r5, r6, r7, fp, lr}
   13cf0:	b	112a4 <__overflow@plt>
   13cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cf8:	add	fp, sp, #28
   13cfc:	sub	sp, sp, #36	; 0x24
   13d00:	movw	r8, #49576	; 0xc1a8
   13d04:	mov	sl, r0
   13d08:	add	r5, sp, #11
   13d0c:	mov	r9, r1
   13d10:	mov	r1, #32
   13d14:	str	r2, [sp, #4]
   13d18:	movt	r8, #2
   13d1c:	add	r7, r5, #23
   13d20:	ldr	r0, [r8, #28]
   13d24:	ldr	r6, [r8, #32]
   13d28:	mov	r4, r7
   13d2c:	strh	r1, [r4], -r6
   13d30:	cmp	r0, #8
   13d34:	beq	13d84 <__assert_fail@plt+0x2a50>
   13d38:	cmp	r0, #10
   13d3c:	beq	13e9c <__assert_fail@plt+0x2b68>
   13d40:	cmp	r0, #16
   13d44:	bne	13db8 <__assert_fail@plt+0x2a84>
   13d48:	movw	r1, #44256	; 0xace0
   13d4c:	add	r0, r5, #22
   13d50:	mov	r2, sl
   13d54:	mov	r3, r9
   13d58:	movt	r1, #1
   13d5c:	and	r7, r2, #15
   13d60:	lsr	r2, r2, #4
   13d64:	ldrb	r7, [r1, r7]
   13d68:	orr	r2, r2, r3, lsl #28
   13d6c:	strb	r7, [r0], #-1
   13d70:	orr	r7, r2, r3, lsr #4
   13d74:	lsr	r3, r3, #4
   13d78:	cmp	r7, #0
   13d7c:	bne	13d5c <__assert_fail@plt+0x2a28>
   13d80:	b	13db4 <__assert_fail@plt+0x2a80>
   13d84:	add	r0, r5, #22
   13d88:	mov	r1, #6
   13d8c:	mov	r2, sl
   13d90:	mov	r3, r9
   13d94:	lsr	r7, r2, #3
   13d98:	bfi	r2, r1, #3, #29
   13d9c:	strb	r2, [r0], #-1
   13da0:	orr	r2, r7, r3, lsl #29
   13da4:	orr	r7, r2, r3, lsr #3
   13da8:	lsr	r3, r3, #3
   13dac:	cmp	r7, #0
   13db0:	bne	13d94 <__assert_fail@plt+0x2a60>
   13db4:	add	r7, r0, #1
   13db8:	cmp	r4, r7
   13dbc:	bcs	13dec <__assert_fail@plt+0x2ab8>
   13dc0:	mvn	r1, #22
   13dc4:	rsb	r0, r6, #23
   13dc8:	sub	r1, r1, r5
   13dcc:	add	r0, r5, r0
   13dd0:	add	r1, r1, r6
   13dd4:	add	r2, r7, r1
   13dd8:	mov	r1, #48	; 0x30
   13ddc:	bl	11244 <memset@plt>
   13de0:	sub	r7, r7, #1
   13de4:	cmp	r4, r7
   13de8:	bcc	13de0 <__assert_fail@plt+0x2aac>
   13dec:	movw	r4, #49524	; 0xc174
   13df0:	mov	r0, r7
   13df4:	movt	r4, #2
   13df8:	ldr	r1, [r4]
   13dfc:	bl	1107c <fputs_unlocked@plt>
   13e00:	ldrd	r0, [r8, #80]	; 0x50
   13e04:	adds	r6, r0, sl
   13e08:	ldr	r0, [r4]
   13e0c:	adc	r5, r1, r9
   13e10:	mov	r9, r4
   13e14:	ldr	r1, [r0, #20]
   13e18:	ldr	r2, [r0, #24]
   13e1c:	cmp	r1, r2
   13e20:	bcs	13fec <__assert_fail@plt+0x2cb8>
   13e24:	add	r2, r1, #1
   13e28:	str	r2, [r0, #20]
   13e2c:	mov	r0, #40	; 0x28
   13e30:	strb	r0, [r1]
   13e34:	ldr	r0, [r8, #28]
   13e38:	ldr	r8, [r8, #32]
   13e3c:	add	r3, sp, #11
   13e40:	mov	r1, #41	; 0x29
   13e44:	add	r7, r3, #23
   13e48:	mov	r4, r7
   13e4c:	strh	r1, [r4], -r8
   13e50:	cmp	r0, #8
   13e54:	beq	13efc <__assert_fail@plt+0x2bc8>
   13e58:	cmp	r0, #10
   13e5c:	beq	13f9c <__assert_fail@plt+0x2c68>
   13e60:	cmp	r0, #16
   13e64:	bne	13f28 <__assert_fail@plt+0x2bf4>
   13e68:	movw	r1, #44256	; 0xace0
   13e6c:	add	r0, r3, #22
   13e70:	movt	r1, #1
   13e74:	and	r2, r6, #15
   13e78:	ldrb	r2, [r1, r2]
   13e7c:	strb	r2, [r0], #-1
   13e80:	lsr	r2, r6, #4
   13e84:	orr	r6, r2, r5, lsl #28
   13e88:	orr	r2, r6, r5, lsr #4
   13e8c:	lsr	r5, r5, #4
   13e90:	cmp	r2, #0
   13e94:	bne	13e74 <__assert_fail@plt+0x2b40>
   13e98:	b	13f24 <__assert_fail@plt+0x2bf0>
   13e9c:	add	r8, r5, #22
   13ea0:	mov	r7, sl
   13ea4:	mov	r5, r9
   13ea8:	mov	r0, r7
   13eac:	mov	r1, r5
   13eb0:	mov	r2, #10
   13eb4:	mov	r3, #0
   13eb8:	bl	19ac8 <__assert_fail@plt+0x8794>
   13ebc:	add	r2, r0, r0, lsl #2
   13ec0:	sub	r2, r7, r2, lsl #1
   13ec4:	orr	r2, r2, #48	; 0x30
   13ec8:	strb	r2, [r8], #-1
   13ecc:	rsbs	r2, r7, #9
   13ed0:	mov	r7, r0
   13ed4:	rscs	r2, r5, #0
   13ed8:	mov	r5, r1
   13edc:	bcc	13ea8 <__assert_fail@plt+0x2b74>
   13ee0:	add	r7, r8, #1
   13ee4:	movw	r8, #49576	; 0xc1a8
   13ee8:	add	r5, sp, #11
   13eec:	movt	r8, #2
   13ef0:	cmp	r4, r7
   13ef4:	bcc	13dc0 <__assert_fail@plt+0x2a8c>
   13ef8:	b	13dec <__assert_fail@plt+0x2ab8>
   13efc:	add	r0, r3, #22
   13f00:	mov	r1, #6
   13f04:	lsr	r2, r6, #3
   13f08:	bfi	r6, r1, #3, #29
   13f0c:	strb	r6, [r0], #-1
   13f10:	orr	r6, r2, r5, lsl #29
   13f14:	orr	r2, r6, r5, lsr #3
   13f18:	lsr	r5, r5, #3
   13f1c:	cmp	r2, #0
   13f20:	bne	13f04 <__assert_fail@plt+0x2bd0>
   13f24:	add	r7, r0, #1
   13f28:	cmp	r4, r7
   13f2c:	bcs	13f5c <__assert_fail@plt+0x2c28>
   13f30:	mvn	r1, #22
   13f34:	rsb	r0, r8, #23
   13f38:	sub	r1, r1, r3
   13f3c:	add	r0, r3, r0
   13f40:	add	r1, r1, r8
   13f44:	add	r2, r7, r1
   13f48:	mov	r1, #48	; 0x30
   13f4c:	bl	11244 <memset@plt>
   13f50:	sub	r7, r7, #1
   13f54:	cmp	r4, r7
   13f58:	bcc	13f50 <__assert_fail@plt+0x2c1c>
   13f5c:	ldr	r1, [r9]
   13f60:	mov	r0, r7
   13f64:	bl	1107c <fputs_unlocked@plt>
   13f68:	ldr	r1, [sp, #4]
   13f6c:	cmp	r1, #0
   13f70:	beq	13f94 <__assert_fail@plt+0x2c60>
   13f74:	ldr	r0, [r9]
   13f78:	ldr	r3, [r0, #20]
   13f7c:	ldr	r2, [r0, #24]
   13f80:	cmp	r3, r2
   13f84:	bcs	13ff8 <__assert_fail@plt+0x2cc4>
   13f88:	add	r2, r3, #1
   13f8c:	str	r2, [r0, #20]
   13f90:	strb	r1, [r3]
   13f94:	sub	sp, fp, #28
   13f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f9c:	add	r7, r3, #22
   13fa0:	mov	r0, r6
   13fa4:	mov	r1, r5
   13fa8:	mov	r2, #10
   13fac:	mov	r3, #0
   13fb0:	bl	19ac8 <__assert_fail@plt+0x8794>
   13fb4:	add	r2, r0, r0, lsl #2
   13fb8:	sub	r2, r6, r2, lsl #1
   13fbc:	orr	r2, r2, #48	; 0x30
   13fc0:	strb	r2, [r7], #-1
   13fc4:	rsbs	r2, r6, #9
   13fc8:	mov	r6, r0
   13fcc:	rscs	r2, r5, #0
   13fd0:	mov	r5, r1
   13fd4:	bcc	13fa0 <__assert_fail@plt+0x2c6c>
   13fd8:	add	r7, r7, #1
   13fdc:	add	r3, sp, #11
   13fe0:	cmp	r4, r7
   13fe4:	bcc	13f30 <__assert_fail@plt+0x2bfc>
   13fe8:	b	13f5c <__assert_fail@plt+0x2c28>
   13fec:	mov	r1, #40	; 0x28
   13ff0:	bl	112a4 <__overflow@plt>
   13ff4:	b	13e34 <__assert_fail@plt+0x2b00>
   13ff8:	bl	112a4 <__overflow@plt>
   13ffc:	sub	sp, fp, #28
   14000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14008:	add	fp, sp, #28
   1400c:	sub	sp, sp, #4
   14010:	movw	r6, #49576	; 0xc1a8
   14014:	movw	r4, #47090	; 0xb7f2
   14018:	movw	r8, #49520	; 0xc170
   1401c:	movw	sl, #44860	; 0xaf3c
   14020:	movw	r9, #45998	; 0xb3ae
   14024:	mov	r7, #1
   14028:	movt	r6, #2
   1402c:	movt	r4, #1
   14030:	movt	r8, #2
   14034:	movt	sl, #1
   14038:	movt	r9, #1
   1403c:	ldr	r0, [r6, #40]	; 0x28
   14040:	ldr	r5, [r0]
   14044:	cmp	r5, #0
   14048:	str	r5, [r6, #52]	; 0x34
   1404c:	beq	14108 <__assert_fail@plt+0x2dd4>
   14050:	add	r0, r0, #4
   14054:	mov	r1, r4
   14058:	str	r0, [r6, #40]	; 0x28
   1405c:	mov	r0, r5
   14060:	bl	11094 <strcmp@plt>
   14064:	cmp	r0, #0
   14068:	beq	140c4 <__assert_fail@plt+0x2d90>
   1406c:	mov	r0, r5
   14070:	mov	r1, sl
   14074:	bl	112ec <fopen64@plt>
   14078:	cmp	r0, #0
   1407c:	str	r0, [r6, #44]	; 0x2c
   14080:	bne	140f4 <__assert_fail@plt+0x2dc0>
   14084:	bl	11214 <__errno_location@plt>
   14088:	ldr	r2, [r6, #52]	; 0x34
   1408c:	ldr	r5, [r0]
   14090:	mov	r0, #0
   14094:	mov	r1, #3
   14098:	mov	r7, #0
   1409c:	bl	178a8 <__assert_fail@plt+0x6574>
   140a0:	mov	r3, r0
   140a4:	mov	r0, #0
   140a8:	mov	r1, r5
   140ac:	mov	r2, r9
   140b0:	bl	11184 <error@plt>
   140b4:	ldr	r0, [r6, #44]	; 0x2c
   140b8:	cmp	r0, #0
   140bc:	beq	1403c <__assert_fail@plt+0x2d08>
   140c0:	b	140f4 <__assert_fail@plt+0x2dc0>
   140c4:	movw	r1, #43799	; 0xab17
   140c8:	mov	r0, #0
   140cc:	mov	r2, #5
   140d0:	movt	r1, #1
   140d4:	bl	1110c <dcgettext@plt>
   140d8:	str	r0, [r6, #52]	; 0x34
   140dc:	mov	r0, #1
   140e0:	strb	r0, [r6, #6]
   140e4:	ldr	r0, [r8]
   140e8:	str	r0, [r6, #44]	; 0x2c
   140ec:	cmp	r0, #0
   140f0:	beq	1403c <__assert_fail@plt+0x2d08>
   140f4:	ldrb	r1, [r6, #1]
   140f8:	cmp	r1, #1
   140fc:	ldrbeq	r1, [r6]
   14100:	cmpeq	r1, #0
   14104:	beq	14114 <__assert_fail@plt+0x2de0>
   14108:	and	r0, r7, #1
   1410c:	sub	sp, fp, #28
   14110:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14114:	mov	r1, #0
   14118:	mov	r2, #2
   1411c:	mov	r3, #0
   14120:	bl	11238 <setvbuf@plt>
   14124:	and	r0, r7, #1
   14128:	sub	sp, fp, #28
   1412c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14130:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14134:	add	fp, sp, #28
   14138:	sub	sp, sp, #12
   1413c:	cmp	r0, r1
   14140:	str	r3, [sp, #4]
   14144:	str	r0, [sp, #8]
   14148:	bls	141b8 <__assert_fail@plt+0x2e84>
   1414c:	ldr	r4, [fp, #12]
   14150:	ldr	r7, [sp, #8]
   14154:	mov	r5, r2
   14158:	mov	r9, r1
   1415c:	mov	sl, #0
   14160:	asr	r8, r4, #31
   14164:	ldr	r0, [fp, #12]
   14168:	subs	r7, r7, #1
   1416c:	mov	r3, #0
   14170:	sbc	sl, sl, #0
   14174:	mov	r2, r0
   14178:	umull	r0, r1, r7, r0
   1417c:	mla	r1, r7, r8, r1
   14180:	mla	r1, sl, r2, r1
   14184:	ldr	r2, [sp, #8]
   14188:	bl	19ac8 <__assert_fail@plt+0x8794>
   1418c:	mov	r6, r0
   14190:	ldr	r0, [fp, #8]
   14194:	ldrsb	r2, [r5], #1
   14198:	add	r0, r4, r0
   1419c:	sub	r1, r0, r6
   141a0:	ldr	r0, [sp, #4]
   141a4:	bl	187d0 <__assert_fail@plt+0x749c>
   141a8:	subs	r0, r9, r7
   141ac:	mov	r4, r6
   141b0:	rscs	r0, sl, #0
   141b4:	bcc	14164 <__assert_fail@plt+0x2e30>
   141b8:	sub	sp, fp, #28
   141bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141c4:	add	fp, sp, #28
   141c8:	sub	sp, sp, #12
   141cc:	cmp	r0, r1
   141d0:	str	r3, [sp, #4]
   141d4:	str	r0, [sp, #8]
   141d8:	bls	14248 <__assert_fail@plt+0x2f14>
   141dc:	ldr	r4, [fp, #12]
   141e0:	ldr	r7, [sp, #8]
   141e4:	mov	r5, r2
   141e8:	mov	r9, r1
   141ec:	mov	sl, #0
   141f0:	asr	r8, r4, #31
   141f4:	ldr	r0, [fp, #12]
   141f8:	subs	r7, r7, #1
   141fc:	mov	r3, #0
   14200:	sbc	sl, sl, #0
   14204:	mov	r2, r0
   14208:	umull	r0, r1, r7, r0
   1420c:	mla	r1, r7, r8, r1
   14210:	mla	r1, sl, r2, r1
   14214:	ldr	r2, [sp, #8]
   14218:	bl	19ac8 <__assert_fail@plt+0x8794>
   1421c:	mov	r6, r0
   14220:	ldr	r0, [fp, #8]
   14224:	ldrb	r2, [r5], #1
   14228:	add	r0, r4, r0
   1422c:	sub	r1, r0, r6
   14230:	ldr	r0, [sp, #4]
   14234:	bl	187d0 <__assert_fail@plt+0x749c>
   14238:	subs	r0, r9, r7
   1423c:	mov	r4, r6
   14240:	rscs	r0, sl, #0
   14244:	bcc	141f4 <__assert_fail@plt+0x2ec0>
   14248:	sub	sp, fp, #28
   1424c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14254:	add	fp, sp, #28
   14258:	sub	sp, sp, #12
   1425c:	cmp	r0, r1
   14260:	stm	sp, {r1, r3}
   14264:	bls	1430c <__assert_fail@plt+0x2fd8>
   14268:	ldr	r4, [fp, #12]
   1426c:	mov	r5, r2
   14270:	mov	r9, r0
   14274:	mov	sl, #0
   14278:	mov	r7, r0
   1427c:	asr	r8, r4, #31
   14280:	ldr	r0, [fp, #12]
   14284:	subs	r7, r7, #1
   14288:	mov	r3, #0
   1428c:	sbc	sl, sl, #0
   14290:	mov	r2, r0
   14294:	umull	r0, r1, r7, r0
   14298:	mla	r1, r7, r8, r1
   1429c:	mla	r1, sl, r2, r1
   142a0:	mov	r2, r9
   142a4:	bl	19ac8 <__assert_fail@plt+0x8794>
   142a8:	mov	r6, r0
   142ac:	ldr	r0, [fp, #8]
   142b0:	add	r0, r4, r0
   142b4:	sub	r1, r0, r6
   142b8:	movw	r0, #49576	; 0xc1a8
   142bc:	movt	r0, #2
   142c0:	ldrb	r0, [r0, #4]
   142c4:	cmp	r0, #1
   142c8:	bne	142e4 <__assert_fail@plt+0x2fb0>
   142cc:	ldrb	r0, [r5, #1]
   142d0:	strb	r0, [sp, #8]
   142d4:	ldrb	r0, [r5]
   142d8:	strb	r0, [sp, #9]
   142dc:	ldrh	r0, [sp, #8]
   142e0:	b	142e8 <__assert_fail@plt+0x2fb4>
   142e4:	ldrh	r0, [r5]
   142e8:	sxth	r2, r0
   142ec:	ldr	r0, [sp, #4]
   142f0:	bl	187d0 <__assert_fail@plt+0x749c>
   142f4:	ldr	r0, [sp]
   142f8:	add	r5, r5, #2
   142fc:	mov	r4, r6
   14300:	subs	r0, r0, r7
   14304:	rscs	r0, sl, #0
   14308:	bcc	14280 <__assert_fail@plt+0x2f4c>
   1430c:	sub	sp, fp, #28
   14310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14314:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14318:	add	fp, sp, #28
   1431c:	sub	sp, sp, #12
   14320:	cmp	r0, r1
   14324:	stm	sp, {r1, r3}
   14328:	bls	143cc <__assert_fail@plt+0x3098>
   1432c:	ldr	r4, [fp, #12]
   14330:	mov	r5, r2
   14334:	mov	r9, r0
   14338:	mov	sl, #0
   1433c:	mov	r7, r0
   14340:	asr	r8, r4, #31
   14344:	ldr	r0, [fp, #12]
   14348:	subs	r7, r7, #1
   1434c:	mov	r3, #0
   14350:	sbc	sl, sl, #0
   14354:	mov	r2, r0
   14358:	umull	r0, r1, r7, r0
   1435c:	mla	r1, r7, r8, r1
   14360:	mla	r1, sl, r2, r1
   14364:	mov	r2, r9
   14368:	bl	19ac8 <__assert_fail@plt+0x8794>
   1436c:	mov	r6, r0
   14370:	ldr	r0, [fp, #8]
   14374:	add	r0, r4, r0
   14378:	sub	r1, r0, r6
   1437c:	movw	r0, #49576	; 0xc1a8
   14380:	movt	r0, #2
   14384:	ldrb	r0, [r0, #4]
   14388:	cmp	r0, #1
   1438c:	bne	143a8 <__assert_fail@plt+0x3074>
   14390:	ldrb	r0, [r5, #1]
   14394:	strb	r0, [sp, #8]
   14398:	ldrb	r0, [r5]
   1439c:	strb	r0, [sp, #9]
   143a0:	ldrh	r2, [sp, #8]
   143a4:	b	143ac <__assert_fail@plt+0x3078>
   143a8:	ldrh	r2, [r5]
   143ac:	ldr	r0, [sp, #4]
   143b0:	bl	187d0 <__assert_fail@plt+0x749c>
   143b4:	ldr	r0, [sp]
   143b8:	add	r5, r5, #2
   143bc:	mov	r4, r6
   143c0:	subs	r0, r0, r7
   143c4:	rscs	r0, sl, #0
   143c8:	bcc	14344 <__assert_fail@plt+0x3010>
   143cc:	sub	sp, fp, #28
   143d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143d8:	add	fp, sp, #28
   143dc:	sub	sp, sp, #12
   143e0:	cmp	r0, r1
   143e4:	stm	sp, {r1, r3}
   143e8:	bls	1449c <__assert_fail@plt+0x3168>
   143ec:	ldr	r4, [fp, #12]
   143f0:	mov	r5, r2
   143f4:	mov	r9, r0
   143f8:	mov	sl, #0
   143fc:	mov	r7, r0
   14400:	asr	r8, r4, #31
   14404:	ldr	r0, [fp, #12]
   14408:	subs	r7, r7, #1
   1440c:	mov	r3, #0
   14410:	sbc	sl, sl, #0
   14414:	mov	r2, r0
   14418:	umull	r0, r1, r7, r0
   1441c:	mla	r1, r7, r8, r1
   14420:	mla	r1, sl, r2, r1
   14424:	mov	r2, r9
   14428:	bl	19ac8 <__assert_fail@plt+0x8794>
   1442c:	mov	r6, r0
   14430:	ldr	r0, [fp, #8]
   14434:	add	r0, r4, r0
   14438:	sub	r1, r0, r6
   1443c:	movw	r0, #49576	; 0xc1a8
   14440:	movt	r0, #2
   14444:	ldrb	r0, [r0, #4]
   14448:	cmp	r0, #1
   1444c:	bne	14478 <__assert_fail@plt+0x3144>
   14450:	ldrb	r0, [r5, #3]
   14454:	strb	r0, [sp, #8]
   14458:	ldrb	r0, [r5, #2]
   1445c:	strb	r0, [sp, #9]
   14460:	ldrb	r0, [r5, #1]
   14464:	strb	r0, [sp, #10]
   14468:	ldrb	r0, [r5]
   1446c:	strb	r0, [sp, #11]
   14470:	ldr	r2, [sp, #8]
   14474:	b	1447c <__assert_fail@plt+0x3148>
   14478:	ldr	r2, [r5]
   1447c:	ldr	r0, [sp, #4]
   14480:	bl	187d0 <__assert_fail@plt+0x749c>
   14484:	ldr	r0, [sp]
   14488:	add	r5, r5, #4
   1448c:	mov	r4, r6
   14490:	subs	r0, r0, r7
   14494:	rscs	r0, sl, #0
   14498:	bcc	14404 <__assert_fail@plt+0x30d0>
   1449c:	sub	sp, fp, #28
   144a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144a8:	add	fp, sp, #28
   144ac:	sub	sp, sp, #12
   144b0:	cmp	r0, r1
   144b4:	stm	sp, {r1, r3}
   144b8:	bls	1456c <__assert_fail@plt+0x3238>
   144bc:	ldr	r4, [fp, #12]
   144c0:	mov	r5, r2
   144c4:	mov	r9, r0
   144c8:	mov	sl, #0
   144cc:	mov	r7, r0
   144d0:	asr	r8, r4, #31
   144d4:	ldr	r0, [fp, #12]
   144d8:	subs	r7, r7, #1
   144dc:	mov	r3, #0
   144e0:	sbc	sl, sl, #0
   144e4:	mov	r2, r0
   144e8:	umull	r0, r1, r7, r0
   144ec:	mla	r1, r7, r8, r1
   144f0:	mla	r1, sl, r2, r1
   144f4:	mov	r2, r9
   144f8:	bl	19ac8 <__assert_fail@plt+0x8794>
   144fc:	mov	r6, r0
   14500:	ldr	r0, [fp, #8]
   14504:	add	r0, r4, r0
   14508:	sub	r1, r0, r6
   1450c:	movw	r0, #49576	; 0xc1a8
   14510:	movt	r0, #2
   14514:	ldrb	r0, [r0, #4]
   14518:	cmp	r0, #1
   1451c:	bne	14548 <__assert_fail@plt+0x3214>
   14520:	ldrb	r0, [r5, #3]
   14524:	strb	r0, [sp, #8]
   14528:	ldrb	r0, [r5, #2]
   1452c:	strb	r0, [sp, #9]
   14530:	ldrb	r0, [r5, #1]
   14534:	strb	r0, [sp, #10]
   14538:	ldrb	r0, [r5]
   1453c:	strb	r0, [sp, #11]
   14540:	ldr	r2, [sp, #8]
   14544:	b	1454c <__assert_fail@plt+0x3218>
   14548:	ldr	r2, [r5]
   1454c:	ldr	r0, [sp, #4]
   14550:	bl	187d0 <__assert_fail@plt+0x749c>
   14554:	ldr	r0, [sp]
   14558:	add	r5, r5, #4
   1455c:	mov	r4, r6
   14560:	subs	r0, r0, r7
   14564:	rscs	r0, sl, #0
   14568:	bcc	144d4 <__assert_fail@plt+0x31a0>
   1456c:	sub	sp, fp, #28
   14570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14578:	add	fp, sp, #28
   1457c:	sub	sp, sp, #20
   14580:	cmp	r0, r1
   14584:	stm	sp, {r1, r3}
   14588:	bls	14660 <__assert_fail@plt+0x332c>
   1458c:	ldr	r4, [fp, #12]
   14590:	mov	r5, r2
   14594:	mov	r9, r0
   14598:	mov	sl, #0
   1459c:	mov	r7, r0
   145a0:	asr	r8, r4, #31
   145a4:	ldr	r0, [fp, #12]
   145a8:	subs	r7, r7, #1
   145ac:	mov	r3, #0
   145b0:	sbc	sl, sl, #0
   145b4:	mov	r2, r0
   145b8:	umull	r0, r1, r7, r0
   145bc:	mla	r1, r7, r8, r1
   145c0:	mla	r1, sl, r2, r1
   145c4:	mov	r2, r9
   145c8:	bl	19ac8 <__assert_fail@plt+0x8794>
   145cc:	mov	r6, r0
   145d0:	ldr	r0, [fp, #8]
   145d4:	add	r0, r4, r0
   145d8:	sub	r1, r0, r6
   145dc:	movw	r0, #49576	; 0xc1a8
   145e0:	movt	r0, #2
   145e4:	ldrb	r0, [r0, #4]
   145e8:	cmp	r0, #1
   145ec:	bne	1463c <__assert_fail@plt+0x3308>
   145f0:	ldrb	r0, [r5, #7]
   145f4:	strb	r0, [sp, #8]
   145f8:	ldrb	r0, [r5, #6]
   145fc:	strb	r0, [sp, #9]
   14600:	ldrb	r0, [r5, #5]
   14604:	strb	r0, [sp, #10]
   14608:	ldrb	r0, [r5, #4]
   1460c:	strb	r0, [sp, #11]
   14610:	ldrb	r0, [r5, #3]
   14614:	strb	r0, [sp, #12]
   14618:	ldrb	r0, [r5, #2]
   1461c:	strb	r0, [sp, #13]
   14620:	ldrb	r0, [r5, #1]
   14624:	strb	r0, [sp, #14]
   14628:	ldrb	r0, [r5]
   1462c:	strb	r0, [sp, #15]
   14630:	ldr	r2, [sp, #8]
   14634:	ldr	r3, [sp, #12]
   14638:	b	14640 <__assert_fail@plt+0x330c>
   1463c:	ldrd	r2, [r5]
   14640:	ldr	r0, [sp, #4]
   14644:	bl	187d0 <__assert_fail@plt+0x749c>
   14648:	ldr	r0, [sp]
   1464c:	add	r5, r5, #8
   14650:	mov	r4, r6
   14654:	subs	r0, r0, r7
   14658:	rscs	r0, sl, #0
   1465c:	bcc	145a4 <__assert_fail@plt+0x3270>
   14660:	sub	sp, fp, #28
   14664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1466c:	add	fp, sp, #28
   14670:	sub	sp, sp, #44	; 0x2c
   14674:	cmp	r0, r1
   14678:	str	r1, [sp, #8]
   1467c:	bls	1475c <__assert_fail@plt+0x3428>
   14680:	ldr	r7, [fp, #12]
   14684:	mov	r9, r0
   14688:	mov	r4, r2
   1468c:	mov	r8, #0
   14690:	add	sl, sp, #12
   14694:	mov	r6, r9
   14698:	asr	r0, r7, #31
   1469c:	str	r0, [sp, #4]
   146a0:	ldr	r0, [fp, #12]
   146a4:	ldr	r3, [sp, #4]
   146a8:	subs	r6, r6, #1
   146ac:	sbc	r8, r8, #0
   146b0:	mov	r2, r0
   146b4:	umull	r0, r1, r6, r0
   146b8:	mla	r1, r6, r3, r1
   146bc:	mov	r3, #0
   146c0:	mla	r1, r8, r2, r1
   146c4:	mov	r2, r9
   146c8:	bl	19ac8 <__assert_fail@plt+0x8794>
   146cc:	mov	r5, r0
   146d0:	ldr	r0, [fp, #8]
   146d4:	add	r0, r7, r0
   146d8:	sub	r7, r0, r5
   146dc:	movw	r0, #49576	; 0xc1a8
   146e0:	movt	r0, #2
   146e4:	ldrb	r0, [r0, #4]
   146e8:	cmp	r0, #1
   146ec:	bne	14718 <__assert_fail@plt+0x33e4>
   146f0:	ldrb	r0, [r4, #3]
   146f4:	strb	r0, [sp, #12]
   146f8:	ldrb	r0, [r4, #2]
   146fc:	strb	r0, [sp, #13]
   14700:	ldrb	r0, [r4, #1]
   14704:	strb	r0, [sp, #14]
   14708:	ldrb	r0, [r4]
   1470c:	strb	r0, [sp, #15]
   14710:	vldr	s0, [sp, #12]
   14714:	b	1471c <__assert_fail@plt+0x33e8>
   14718:	vldr	s0, [r4]
   1471c:	mov	r0, sl
   14720:	mov	r1, #31
   14724:	mov	r2, #0
   14728:	mov	r3, #0
   1472c:	bl	15938 <__assert_fail@plt+0x4604>
   14730:	movw	r0, #44836	; 0xaf24
   14734:	mov	r1, r7
   14738:	mov	r2, sl
   1473c:	movt	r0, #1
   14740:	bl	187d0 <__assert_fail@plt+0x749c>
   14744:	ldr	r0, [sp, #8]
   14748:	add	r4, r4, #4
   1474c:	mov	r7, r5
   14750:	subs	r0, r0, r6
   14754:	rscs	r0, r8, #0
   14758:	bcc	146a0 <__assert_fail@plt+0x336c>
   1475c:	sub	sp, fp, #28
   14760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14764:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14768:	add	fp, sp, #28
   1476c:	sub	sp, sp, #52	; 0x34
   14770:	cmp	r0, r1
   14774:	str	r1, [sp, #4]
   14778:	bls	14878 <__assert_fail@plt+0x3544>
   1477c:	ldr	r7, [fp, #12]
   14780:	mov	r9, r0
   14784:	mov	r4, r2
   14788:	mov	r8, #0
   1478c:	add	sl, sp, #8
   14790:	mov	r6, r9
   14794:	asr	r0, r7, #31
   14798:	str	r0, [sp]
   1479c:	ldr	r0, [fp, #12]
   147a0:	ldr	r3, [sp]
   147a4:	subs	r6, r6, #1
   147a8:	sbc	r8, r8, #0
   147ac:	mov	r2, r0
   147b0:	umull	r0, r1, r6, r0
   147b4:	mla	r1, r6, r3, r1
   147b8:	mov	r3, #0
   147bc:	mla	r1, r8, r2, r1
   147c0:	mov	r2, r9
   147c4:	bl	19ac8 <__assert_fail@plt+0x8794>
   147c8:	mov	r5, r0
   147cc:	ldr	r0, [fp, #8]
   147d0:	add	r0, r7, r0
   147d4:	sub	r7, r0, r5
   147d8:	movw	r0, #49576	; 0xc1a8
   147dc:	movt	r0, #2
   147e0:	ldrb	r0, [r0, #4]
   147e4:	cmp	r0, #1
   147e8:	bne	14834 <__assert_fail@plt+0x3500>
   147ec:	ldrb	r0, [r4, #7]
   147f0:	strb	r0, [sp, #8]
   147f4:	ldrb	r0, [r4, #6]
   147f8:	strb	r0, [sp, #9]
   147fc:	ldrb	r0, [r4, #5]
   14800:	strb	r0, [sp, #10]
   14804:	ldrb	r0, [r4, #4]
   14808:	strb	r0, [sp, #11]
   1480c:	ldrb	r0, [r4, #3]
   14810:	strb	r0, [sp, #12]
   14814:	ldrb	r0, [r4, #2]
   14818:	strb	r0, [sp, #13]
   1481c:	ldrb	r0, [r4, #1]
   14820:	strb	r0, [sp, #14]
   14824:	ldrb	r0, [r4]
   14828:	strb	r0, [sp, #15]
   1482c:	vldr	d0, [sp, #8]
   14830:	b	14838 <__assert_fail@plt+0x3504>
   14834:	vldr	d0, [r4]
   14838:	mov	r0, sl
   1483c:	mov	r1, #40	; 0x28
   14840:	mov	r2, #0
   14844:	mov	r3, #0
   14848:	bl	15618 <__assert_fail@plt+0x42e4>
   1484c:	movw	r0, #44836	; 0xaf24
   14850:	mov	r1, r7
   14854:	mov	r2, sl
   14858:	movt	r0, #1
   1485c:	bl	187d0 <__assert_fail@plt+0x749c>
   14860:	ldr	r0, [sp, #4]
   14864:	add	r4, r4, #8
   14868:	mov	r7, r5
   1486c:	subs	r0, r0, r6
   14870:	rscs	r0, r8, #0
   14874:	bcc	1479c <__assert_fail@plt+0x3468>
   14878:	sub	sp, fp, #28
   1487c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14880:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14884:	add	fp, sp, #28
   14888:	sub	sp, sp, #52	; 0x34
   1488c:	cmp	r0, r1
   14890:	str	r1, [sp, #4]
   14894:	bls	14994 <__assert_fail@plt+0x3660>
   14898:	ldr	r7, [fp, #12]
   1489c:	mov	r9, r0
   148a0:	mov	r4, r2
   148a4:	mov	r8, #0
   148a8:	add	sl, sp, #8
   148ac:	mov	r6, r9
   148b0:	asr	r0, r7, #31
   148b4:	str	r0, [sp]
   148b8:	ldr	r0, [fp, #12]
   148bc:	ldr	r3, [sp]
   148c0:	subs	r6, r6, #1
   148c4:	sbc	r8, r8, #0
   148c8:	mov	r2, r0
   148cc:	umull	r0, r1, r6, r0
   148d0:	mla	r1, r6, r3, r1
   148d4:	mov	r3, #0
   148d8:	mla	r1, r8, r2, r1
   148dc:	mov	r2, r9
   148e0:	bl	19ac8 <__assert_fail@plt+0x8794>
   148e4:	mov	r5, r0
   148e8:	ldr	r0, [fp, #8]
   148ec:	add	r0, r7, r0
   148f0:	sub	r7, r0, r5
   148f4:	movw	r0, #49576	; 0xc1a8
   148f8:	movt	r0, #2
   148fc:	ldrb	r0, [r0, #4]
   14900:	cmp	r0, #1
   14904:	bne	14950 <__assert_fail@plt+0x361c>
   14908:	ldrb	r0, [r4, #7]
   1490c:	strb	r0, [sp, #8]
   14910:	ldrb	r0, [r4, #6]
   14914:	strb	r0, [sp, #9]
   14918:	ldrb	r0, [r4, #5]
   1491c:	strb	r0, [sp, #10]
   14920:	ldrb	r0, [r4, #4]
   14924:	strb	r0, [sp, #11]
   14928:	ldrb	r0, [r4, #3]
   1492c:	strb	r0, [sp, #12]
   14930:	ldrb	r0, [r4, #2]
   14934:	strb	r0, [sp, #13]
   14938:	ldrb	r0, [r4, #1]
   1493c:	strb	r0, [sp, #14]
   14940:	ldrb	r0, [r4]
   14944:	strb	r0, [sp, #15]
   14948:	vldr	d0, [sp, #8]
   1494c:	b	14954 <__assert_fail@plt+0x3620>
   14950:	vldr	d0, [r4]
   14954:	mov	r0, sl
   14958:	mov	r1, #40	; 0x28
   1495c:	mov	r2, #0
   14960:	mov	r3, #0
   14964:	bl	15a88 <__assert_fail@plt+0x4754>
   14968:	movw	r0, #44836	; 0xaf24
   1496c:	mov	r1, r7
   14970:	mov	r2, sl
   14974:	movt	r0, #1
   14978:	bl	187d0 <__assert_fail@plt+0x749c>
   1497c:	ldr	r0, [sp, #4]
   14980:	add	r4, r4, #8
   14984:	mov	r7, r5
   14988:	subs	r0, r0, r6
   1498c:	rscs	r0, r8, #0
   14990:	bcc	148b8 <__assert_fail@plt+0x3584>
   14994:	sub	sp, fp, #28
   14998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1499c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149a0:	add	fp, sp, #28
   149a4:	sub	sp, sp, #12
   149a8:	cmp	r0, r1
   149ac:	str	r1, [sp, #4]
   149b0:	bls	14a64 <__assert_fail@plt+0x3730>
   149b4:	ldr	r7, [fp, #12]
   149b8:	mov	r4, r2
   149bc:	mov	r8, r0
   149c0:	mov	r6, r0
   149c4:	mov	r9, #0
   149c8:	asr	sl, r7, #31
   149cc:	ldr	r0, [fp, #12]
   149d0:	subs	r6, r6, #1
   149d4:	mov	r3, #0
   149d8:	mov	r5, r7
   149dc:	sbc	r9, r9, #0
   149e0:	mov	r2, r0
   149e4:	umull	r0, r1, r6, r0
   149e8:	mla	r1, r6, sl, r1
   149ec:	mla	r1, r9, r2, r1
   149f0:	mov	r2, r8
   149f4:	bl	19ac8 <__assert_fail@plt+0x8794>
   149f8:	mov	r7, r0
   149fc:	ldrb	r0, [r4], #1
   14a00:	movw	r2, #44840	; 0xaf28
   14a04:	movt	r2, #1
   14a08:	and	r0, r0, #127	; 0x7f
   14a0c:	cmp	r0, #127	; 0x7f
   14a10:	beq	14a3c <__assert_fail@plt+0x3708>
   14a14:	cmp	r0, #32
   14a18:	bhi	14a2c <__assert_fail@plt+0x36f8>
   14a1c:	movw	r1, #45704	; 0xb288
   14a20:	movt	r1, #1
   14a24:	add	r2, r1, r0, lsl #2
   14a28:	b	14a3c <__assert_fail@plt+0x3708>
   14a2c:	mov	r1, #0
   14a30:	add	r2, sp, #10
   14a34:	strb	r1, [sp, #11]
   14a38:	strb	r0, [sp, #10]
   14a3c:	ldr	r0, [fp, #8]
   14a40:	add	r0, r5, r0
   14a44:	sub	r1, r0, r7
   14a48:	movw	r0, #44836	; 0xaf24
   14a4c:	movt	r0, #1
   14a50:	bl	187d0 <__assert_fail@plt+0x749c>
   14a54:	ldr	r0, [sp, #4]
   14a58:	subs	r0, r0, r6
   14a5c:	rscs	r0, r9, #0
   14a60:	bcc	149cc <__assert_fail@plt+0x3698>
   14a64:	sub	sp, fp, #28
   14a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a70:	add	fp, sp, #28
   14a74:	sub	sp, sp, #20
   14a78:	cmp	r0, r1
   14a7c:	str	r1, [sp, #12]
   14a80:	bls	14b70 <__assert_fail@plt+0x383c>
   14a84:	ldr	r7, [fp, #12]
   14a88:	mov	sl, r0
   14a8c:	mov	r4, r2
   14a90:	mov	r8, #0
   14a94:	mov	r6, sl
   14a98:	asr	r0, r7, #31
   14a9c:	str	r0, [sp, #8]
   14aa0:	ldr	r0, [fp, #12]
   14aa4:	ldr	r3, [sp, #8]
   14aa8:	subs	r6, r6, #1
   14aac:	sbc	r8, r8, #0
   14ab0:	mov	r2, r0
   14ab4:	umull	r0, r1, r6, r0
   14ab8:	mla	r1, r6, r3, r1
   14abc:	mov	r3, #0
   14ac0:	mla	r1, r8, r2, r1
   14ac4:	mov	r2, sl
   14ac8:	bl	19ac8 <__assert_fail@plt+0x8794>
   14acc:	mov	r9, r0
   14ad0:	ldrsb	r0, [r4], #1
   14ad4:	uxtb	r5, r0
   14ad8:	cmp	r5, #14
   14adc:	bcs	14af0 <__assert_fail@plt+0x37bc>
   14ae0:	movw	r1, #16257	; 0x3f81
   14ae4:	mov	r2, #1
   14ae8:	tst	r2, r1, lsr r5
   14aec:	bne	14b38 <__assert_fail@plt+0x3804>
   14af0:	bl	111e4 <__ctype_b_loc@plt>
   14af4:	ldr	r0, [r0]
   14af8:	movw	r3, #44868	; 0xaf44
   14afc:	mov	r1, #1
   14b00:	mov	r2, #4
   14b04:	movt	r3, #1
   14b08:	add	r0, r0, r5, lsl #1
   14b0c:	ldrh	r0, [r0]
   14b10:	str	r5, [sp]
   14b14:	add	r5, sp, #16
   14b18:	tst	r0, #16384	; 0x4000
   14b1c:	movw	r0, #44871	; 0xaf47
   14b20:	movt	r0, #1
   14b24:	moveq	r3, r0
   14b28:	mov	r0, r5
   14b2c:	bl	11220 <__sprintf_chk@plt>
   14b30:	mov	r2, r5
   14b34:	b	14b44 <__assert_fail@plt+0x3810>
   14b38:	movw	r1, #45840	; 0xb310
   14b3c:	movt	r1, #1
   14b40:	ldr	r2, [r1, r0, lsl #2]
   14b44:	ldr	r0, [fp, #8]
   14b48:	add	r0, r7, r0
   14b4c:	sub	r1, r0, r9
   14b50:	movw	r0, #44836	; 0xaf24
   14b54:	movt	r0, #1
   14b58:	bl	187d0 <__assert_fail@plt+0x749c>
   14b5c:	ldr	r0, [sp, #12]
   14b60:	mov	r7, r9
   14b64:	subs	r0, r0, r6
   14b68:	rscs	r0, r8, #0
   14b6c:	bcc	14aa0 <__assert_fail@plt+0x376c>
   14b70:	sub	sp, fp, #28
   14b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b78:	push	{r4, r5, r6, sl, fp, lr}
   14b7c:	add	fp, sp, #16
   14b80:	movw	r6, #49576	; 0xc1a8
   14b84:	movt	r6, #2
   14b88:	ldr	r5, [r6, #44]	; 0x2c
   14b8c:	cmp	r5, #0
   14b90:	beq	14c14 <__assert_fail@plt+0x38e0>
   14b94:	ldr	r1, [r5]
   14b98:	lsl	r1, r1, #26
   14b9c:	and	r4, r0, r1, asr #31
   14ba0:	ldr	r0, [r6, #40]	; 0x28
   14ba4:	movw	r1, #47090	; 0xb7f2
   14ba8:	movt	r1, #1
   14bac:	ldr	r0, [r0, #-4]
   14bb0:	bl	11094 <strcmp@plt>
   14bb4:	cmp	r0, #0
   14bb8:	beq	14c1c <__assert_fail@plt+0x38e8>
   14bbc:	mov	r0, r5
   14bc0:	bl	15768 <__assert_fail@plt+0x4434>
   14bc4:	cmp	r4, #0
   14bc8:	bne	14bdc <__assert_fail@plt+0x38a8>
   14bcc:	cmp	r0, #0
   14bd0:	beq	14bdc <__assert_fail@plt+0x38a8>
   14bd4:	bl	11214 <__errno_location@plt>
   14bd8:	ldr	r4, [r0]
   14bdc:	cmp	r4, #0
   14be0:	beq	14c2c <__assert_fail@plt+0x38f8>
   14be4:	ldr	r2, [r6, #52]	; 0x34
   14be8:	mov	r0, #0
   14bec:	mov	r1, #3
   14bf0:	mov	r5, #0
   14bf4:	bl	178a8 <__assert_fail@plt+0x6574>
   14bf8:	movw	r2, #45998	; 0xb3ae
   14bfc:	mov	r3, r0
   14c00:	mov	r0, #0
   14c04:	mov	r1, r4
   14c08:	movt	r2, #1
   14c0c:	bl	11184 <error@plt>
   14c10:	b	14c30 <__assert_fail@plt+0x38fc>
   14c14:	mov	r5, #1
   14c18:	b	14c38 <__assert_fail@plt+0x3904>
   14c1c:	mov	r0, r5
   14c20:	bl	112e0 <clearerr_unlocked@plt>
   14c24:	cmp	r4, #0
   14c28:	bne	14be4 <__assert_fail@plt+0x38b0>
   14c2c:	mov	r5, #1
   14c30:	mov	r0, #0
   14c34:	str	r0, [r6, #44]	; 0x2c
   14c38:	movw	r0, #49524	; 0xc174
   14c3c:	movt	r0, #2
   14c40:	ldr	r0, [r0]
   14c44:	ldrb	r0, [r0]
   14c48:	tst	r0, #32
   14c4c:	beq	14c78 <__assert_fail@plt+0x3944>
   14c50:	movw	r1, #44929	; 0xaf81
   14c54:	mov	r0, #0
   14c58:	mov	r2, #5
   14c5c:	mov	r5, #0
   14c60:	movt	r1, #1
   14c64:	bl	1110c <dcgettext@plt>
   14c68:	mov	r2, r0
   14c6c:	mov	r0, #0
   14c70:	mov	r1, #0
   14c74:	bl	11184 <error@plt>
   14c78:	mov	r0, r5
   14c7c:	pop	{r4, r5, r6, sl, fp, pc}
   14c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c84:	add	fp, sp, #28
   14c88:	sub	sp, sp, #4
   14c8c:	movw	sl, #49576	; 0xc1a8
   14c90:	mov	r9, r0
   14c94:	mov	r8, r1
   14c98:	movt	sl, #2
   14c9c:	sub	r1, r9, #1
   14ca0:	ldr	r0, [sl, #48]	; 0x30
   14ca4:	cmp	r1, r0
   14ca8:	bcs	14d58 <__assert_fail@plt+0x3a24>
   14cac:	mov	r0, #0
   14cb0:	mov	r4, r2
   14cb4:	mov	r7, #1
   14cb8:	str	r0, [r2]
   14cbc:	ldr	r3, [sl, #44]	; 0x2c
   14cc0:	cmp	r3, #0
   14cc4:	beq	14d4c <__assert_fail@plt+0x3a18>
   14cc8:	mov	r0, r8
   14ccc:	mov	r1, #1
   14cd0:	mov	r2, r9
   14cd4:	bl	11304 <fread_unlocked@plt>
   14cd8:	ldr	r1, [r4]
   14cdc:	cmp	r0, r9
   14ce0:	add	r1, r1, r0
   14ce4:	str	r1, [r4]
   14ce8:	beq	14d4c <__assert_fail@plt+0x3a18>
   14cec:	mov	r7, #1
   14cf0:	bl	11214 <__errno_location@plt>
   14cf4:	mov	r5, r0
   14cf8:	ldr	r0, [r5]
   14cfc:	bl	14b78 <__assert_fail@plt+0x3844>
   14d00:	and	r6, r7, r0
   14d04:	bl	14004 <__assert_fail@plt+0x2cd0>
   14d08:	ldr	r3, [sl, #44]	; 0x2c
   14d0c:	and	r7, r6, r0
   14d10:	cmp	r3, #0
   14d14:	beq	14d44 <__assert_fail@plt+0x3a10>
   14d18:	ldr	r1, [r4]
   14d1c:	sub	r6, r9, r1
   14d20:	add	r0, r8, r1
   14d24:	mov	r1, #1
   14d28:	mov	r2, r6
   14d2c:	bl	11304 <fread_unlocked@plt>
   14d30:	ldr	r1, [r4]
   14d34:	cmp	r0, r6
   14d38:	add	r1, r1, r0
   14d3c:	str	r1, [r4]
   14d40:	bne	14cf8 <__assert_fail@plt+0x39c4>
   14d44:	cmp	r7, #0
   14d48:	movwne	r7, #1
   14d4c:	mov	r0, r7
   14d50:	sub	sp, fp, #28
   14d54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d58:	movw	r0, #44990	; 0xafbe
   14d5c:	movw	r1, #44375	; 0xad57
   14d60:	movw	r3, #45020	; 0xafdc
   14d64:	movw	r2, #1293	; 0x50d
   14d68:	movt	r0, #1
   14d6c:	movt	r1, #1
   14d70:	movt	r3, #1
   14d74:	bl	11334 <__assert_fail@plt>
   14d78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d7c:	add	fp, sp, #28
   14d80:	sub	sp, sp, #20
   14d84:	movw	r6, #49576	; 0xc1a8
   14d88:	str	r0, [sp, #12]
   14d8c:	mov	r4, r2
   14d90:	str	r1, [sp, #16]
   14d94:	movt	r6, #2
   14d98:	ldrb	r0, [r6, #2]
   14d9c:	cmp	r0, #0
   14da0:	bne	14db8 <__assert_fail@plt+0x3a84>
   14da4:	ldrb	r0, [r6, #7]
   14da8:	cmp	r0, #1
   14dac:	ldreq	r0, [r6, #48]	; 0x30
   14db0:	cmpeq	r0, r4
   14db4:	beq	14fb0 <__assert_fail@plt+0x3c7c>
   14db8:	mov	r5, #0
   14dbc:	strb	r5, [r6, #8]
   14dc0:	ldr	r0, [r6, #12]
   14dc4:	cmp	r0, #0
   14dc8:	beq	14fec <__assert_fail@plt+0x3cb8>
   14dcc:	movw	r9, #49524	; 0xc174
   14dd0:	movt	r9, #2
   14dd4:	ldr	r0, [r6, #20]
   14dd8:	movw	r2, #45340	; 0xb11c
   14ddc:	ldr	r1, [r6, #48]	; 0x30
   14de0:	cmp	r5, #0
   14de4:	movt	r2, #1
   14de8:	add	r0, r0, r5, lsl #5
   14dec:	ldr	r0, [r0, #4]
   14df0:	ldr	r0, [r2, r0, lsl #2]
   14df4:	sub	r2, r1, r4
   14df8:	udiv	sl, r2, r0
   14dfc:	udiv	r8, r1, r0
   14e00:	beq	14e24 <__assert_fail@plt+0x3af0>
   14e04:	ldr	r2, [r6, #32]
   14e08:	movw	r1, #44836	; 0xaf24
   14e0c:	movw	r3, #44255	; 0xacdf
   14e10:	mov	r0, #1
   14e14:	movt	r1, #1
   14e18:	movt	r3, #1
   14e1c:	bl	1125c <__printf_chk@plt>
   14e20:	b	14e38 <__assert_fail@plt+0x3b04>
   14e24:	ldr	r3, [r6, #24]
   14e28:	ldr	r0, [sp, #12]
   14e2c:	ldr	r1, [sp, #16]
   14e30:	mov	r2, #0
   14e34:	blx	r3
   14e38:	ldr	r0, [r6, #20]
   14e3c:	add	r0, r0, r5, lsl #5
   14e40:	ldr	r1, [r0, #24]
   14e44:	ldr	r2, [r0, #28]
   14e48:	ldr	r7, [r0, #8]
   14e4c:	add	r3, r0, #12
   14e50:	mov	r0, r8
   14e54:	stm	sp, {r1, r2}
   14e58:	ldr	r2, [fp, #8]
   14e5c:	mov	r1, sl
   14e60:	blx	r7
   14e64:	ldr	r0, [r6, #20]
   14e68:	add	r0, r0, r5, lsl #5
   14e6c:	ldrb	r1, [r0, #21]
   14e70:	cmp	r1, #0
   14e74:	beq	14f50 <__assert_fail@plt+0x3c1c>
   14e78:	ldr	r1, [r0, #24]
   14e7c:	ldr	r0, [r0, #28]
   14e80:	movw	r3, #44255	; 0xacdf
   14e84:	movt	r3, #1
   14e88:	mul	r0, r0, sl
   14e8c:	sdiv	r0, r0, r8
   14e90:	mla	r2, r1, sl, r0
   14e94:	movw	r1, #44836	; 0xaf24
   14e98:	mov	r0, #1
   14e9c:	movt	r1, #1
   14ea0:	bl	1125c <__printf_chk@plt>
   14ea4:	ldr	r1, [r9]
   14ea8:	movw	r0, #45066	; 0xb00a
   14eac:	movt	r0, #1
   14eb0:	bl	1107c <fputs_unlocked@plt>
   14eb4:	mov	r8, r4
   14eb8:	cmp	r4, #0
   14ebc:	beq	14f20 <__assert_fail@plt+0x3bec>
   14ec0:	bl	111e4 <__ctype_b_loc@plt>
   14ec4:	ldr	r4, [fp, #8]
   14ec8:	mov	r7, r0
   14ecc:	mov	r6, r8
   14ed0:	ldrb	r1, [r4], #1
   14ed4:	ldr	r0, [r7]
   14ed8:	add	r0, r0, r1, lsl #1
   14edc:	ldrb	r0, [r0, #1]
   14ee0:	tst	r0, #64	; 0x40
   14ee4:	ldr	r0, [r9]
   14ee8:	movweq	r1, #46	; 0x2e
   14eec:	ldr	r2, [r0, #20]
   14ef0:	ldr	r3, [r0, #24]
   14ef4:	cmp	r2, r3
   14ef8:	bcs	14f14 <__assert_fail@plt+0x3be0>
   14efc:	add	r3, r2, #1
   14f00:	str	r3, [r0, #20]
   14f04:	strb	r1, [r2]
   14f08:	subs	r6, r6, #1
   14f0c:	bne	14ed0 <__assert_fail@plt+0x3b9c>
   14f10:	b	14f20 <__assert_fail@plt+0x3bec>
   14f14:	bl	112a4 <__overflow@plt>
   14f18:	subs	r6, r6, #1
   14f1c:	bne	14ed0 <__assert_fail@plt+0x3b9c>
   14f20:	ldr	r0, [r9]
   14f24:	ldr	r1, [r0, #20]
   14f28:	ldr	r2, [r0, #24]
   14f2c:	cmp	r1, r2
   14f30:	bcs	14fa4 <__assert_fail@plt+0x3c70>
   14f34:	add	r2, r1, #1
   14f38:	str	r2, [r0, #20]
   14f3c:	mov	r0, #60	; 0x3c
   14f40:	strb	r0, [r1]
   14f44:	movw	r6, #49576	; 0xc1a8
   14f48:	mov	r4, r8
   14f4c:	movt	r6, #2
   14f50:	ldr	r0, [r9]
   14f54:	ldr	r1, [r0, #20]
   14f58:	ldr	r2, [r0, #24]
   14f5c:	cmp	r1, r2
   14f60:	bcs	14f88 <__assert_fail@plt+0x3c54>
   14f64:	add	r2, r1, #1
   14f68:	str	r2, [r0, #20]
   14f6c:	mov	r0, #10
   14f70:	strb	r0, [r1]
   14f74:	ldr	r0, [r6, #12]
   14f78:	add	r5, r5, #1
   14f7c:	cmp	r5, r0
   14f80:	bcc	14dd4 <__assert_fail@plt+0x3aa0>
   14f84:	b	14fec <__assert_fail@plt+0x3cb8>
   14f88:	mov	r1, #10
   14f8c:	bl	112a4 <__overflow@plt>
   14f90:	ldr	r0, [r6, #12]
   14f94:	add	r5, r5, #1
   14f98:	cmp	r5, r0
   14f9c:	bcc	14dd4 <__assert_fail@plt+0x3aa0>
   14fa0:	b	14fec <__assert_fail@plt+0x3cb8>
   14fa4:	mov	r1, #60	; 0x3c
   14fa8:	bl	112a4 <__overflow@plt>
   14fac:	b	14f44 <__assert_fail@plt+0x3c10>
   14fb0:	ldr	r1, [fp, #8]
   14fb4:	mov	r0, r3
   14fb8:	mov	r2, r4
   14fbc:	bl	11100 <memcmp@plt>
   14fc0:	cmp	r0, #0
   14fc4:	bne	14db8 <__assert_fail@plt+0x3a84>
   14fc8:	ldrb	r0, [r6, #8]
   14fcc:	cmp	r0, #0
   14fd0:	bne	14fec <__assert_fail@plt+0x3cb8>
   14fd4:	movw	r1, #45063	; 0xb007
   14fd8:	mov	r0, #1
   14fdc:	mov	r4, #1
   14fe0:	movt	r1, #1
   14fe4:	bl	1125c <__printf_chk@plt>
   14fe8:	strb	r4, [r6, #8]
   14fec:	mov	r0, #1
   14ff0:	strb	r0, [r6, #7]
   14ff4:	sub	sp, fp, #28
   14ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ffc:	mov	r0, #1
   15000:	b	11430 <__assert_fail@plt+0xfc>
   15004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15008:	add	fp, sp, #28
   1500c:	sub	sp, sp, #12
   15010:	mov	r4, r3
   15014:	mov	r9, r2
   15018:	mov	r7, r1
   1501c:	mov	r8, r0
   15020:	bl	111fc <strlen@plt>
   15024:	ldr	r6, [r7]
   15028:	cmp	r6, #0
   1502c:	beq	150d8 <__assert_fail@plt+0x3da4>
   15030:	mov	r5, r0
   15034:	cmp	r9, #0
   15038:	beq	150e8 <__assert_fail@plt+0x3db4>
   1503c:	add	r0, r7, #4
   15040:	mvn	sl, #0
   15044:	mov	r7, #0
   15048:	str	r9, [sp]
   1504c:	str	r0, [sp, #8]
   15050:	mov	r0, #0
   15054:	str	r0, [sp, #4]
   15058:	mov	r0, r9
   1505c:	mov	r0, r6
   15060:	mov	r1, r8
   15064:	mov	r2, r5
   15068:	bl	11310 <strncmp@plt>
   1506c:	cmp	r0, #0
   15070:	bne	150bc <__assert_fail@plt+0x3d88>
   15074:	mov	r0, r6
   15078:	bl	111fc <strlen@plt>
   1507c:	cmp	r0, r5
   15080:	beq	150dc <__assert_fail@plt+0x3da8>
   15084:	cmn	sl, #1
   15088:	beq	150b8 <__assert_fail@plt+0x3d84>
   1508c:	ldr	r0, [sp]
   15090:	mov	r1, r9
   15094:	mov	r2, r4
   15098:	mla	r0, sl, r4, r0
   1509c:	bl	11100 <memcmp@plt>
   150a0:	ldr	r1, [sp, #4]
   150a4:	cmp	r0, #0
   150a8:	movwne	r0, #1
   150ac:	orr	r1, r1, r0
   150b0:	str	r1, [sp, #4]
   150b4:	b	150bc <__assert_fail@plt+0x3d88>
   150b8:	mov	sl, r7
   150bc:	ldr	r0, [sp, #8]
   150c0:	add	r9, r9, r4
   150c4:	ldr	r6, [r0, r7, lsl #2]
   150c8:	add	r7, r7, #1
   150cc:	cmp	r6, #0
   150d0:	bne	1505c <__assert_fail@plt+0x3d28>
   150d4:	b	15150 <__assert_fail@plt+0x3e1c>
   150d8:	mvn	r7, #0
   150dc:	mov	r0, r7
   150e0:	sub	sp, fp, #28
   150e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150e8:	add	r4, r7, #4
   150ec:	mov	r0, #0
   150f0:	mvn	sl, #0
   150f4:	mov	r7, #0
   150f8:	str	r0, [sp, #4]
   150fc:	mov	r0, r6
   15100:	mov	r1, r8
   15104:	mov	r2, r5
   15108:	bl	11310 <strncmp@plt>
   1510c:	cmp	r0, #0
   15110:	bne	15140 <__assert_fail@plt+0x3e0c>
   15114:	mov	r0, r6
   15118:	bl	111fc <strlen@plt>
   1511c:	cmp	r0, r5
   15120:	beq	150dc <__assert_fail@plt+0x3da8>
   15124:	ldr	r1, [sp, #4]
   15128:	cmn	sl, #1
   1512c:	add	r0, sl, #1
   15130:	movwne	r0, #1
   15134:	moveq	sl, r7
   15138:	orr	r1, r1, r0
   1513c:	str	r1, [sp, #4]
   15140:	ldr	r6, [r4, r7, lsl #2]
   15144:	add	r7, r7, #1
   15148:	cmp	r6, #0
   1514c:	bne	150fc <__assert_fail@plt+0x3dc8>
   15150:	ldr	r0, [sp, #4]
   15154:	tst	r0, #1
   15158:	mvnne	sl, #1
   1515c:	mov	r0, sl
   15160:	sub	sp, fp, #28
   15164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15168:	push	{r4, r5, r6, r7, fp, lr}
   1516c:	add	fp, sp, #16
   15170:	mov	r5, r0
   15174:	ldr	r0, [r1]
   15178:	mvn	r4, #0
   1517c:	cmp	r0, #0
   15180:	beq	151b0 <__assert_fail@plt+0x3e7c>
   15184:	add	r7, r1, #4
   15188:	mov	r6, #0
   1518c:	mov	r1, r5
   15190:	bl	11094 <strcmp@plt>
   15194:	cmp	r0, #0
   15198:	moveq	r0, r6
   1519c:	popeq	{r4, r5, r6, r7, fp, pc}
   151a0:	ldr	r0, [r7, r6, lsl #2]
   151a4:	add	r6, r6, #1
   151a8:	cmp	r0, #0
   151ac:	bne	1518c <__assert_fail@plt+0x3e58>
   151b0:	mov	r0, r4
   151b4:	pop	{r4, r5, r6, r7, fp, pc}
   151b8:	push	{r4, r5, r6, sl, fp, lr}
   151bc:	add	fp, sp, #16
   151c0:	sub	sp, sp, #8
   151c4:	mov	r4, r1
   151c8:	movw	r1, #45938	; 0xb372
   151cc:	mov	r5, r0
   151d0:	movw	r0, #45911	; 0xb357
   151d4:	cmn	r2, #1
   151d8:	mov	r2, #5
   151dc:	movt	r0, #1
   151e0:	movt	r1, #1
   151e4:	moveq	r1, r0
   151e8:	mov	r0, #0
   151ec:	bl	1110c <dcgettext@plt>
   151f0:	mov	r6, r0
   151f4:	mov	r0, #0
   151f8:	mov	r1, #8
   151fc:	mov	r2, r4
   15200:	bl	17584 <__assert_fail@plt+0x6250>
   15204:	mov	r4, r0
   15208:	mov	r0, #1
   1520c:	mov	r1, r5
   15210:	bl	17b44 <__assert_fail@plt+0x6810>
   15214:	str	r0, [sp]
   15218:	mov	r0, #0
   1521c:	mov	r1, #0
   15220:	mov	r2, r6
   15224:	mov	r3, r4
   15228:	bl	11184 <error@plt>
   1522c:	sub	sp, fp, #16
   15230:	pop	{r4, r5, r6, sl, fp, pc}
   15234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15238:	add	fp, sp, #28
   1523c:	sub	sp, sp, #4
   15240:	mov	r5, r1
   15244:	movw	r1, #45967	; 0xb38f
   15248:	mov	sl, r2
   1524c:	mov	r7, r0
   15250:	mov	r0, #0
   15254:	mov	r2, #5
   15258:	mov	r8, #0
   1525c:	movt	r1, #1
   15260:	bl	1110c <dcgettext@plt>
   15264:	movw	r4, #49512	; 0xc168
   15268:	movt	r4, #2
   1526c:	ldr	r1, [r4]
   15270:	bl	1107c <fputs_unlocked@plt>
   15274:	ldr	r6, [r7]
   15278:	cmp	r6, #0
   1527c:	beq	1531c <__assert_fail@plt+0x3fe8>
   15280:	add	r9, r7, #4
   15284:	mov	r7, #0
   15288:	str	sl, [sp]
   1528c:	cmp	r8, #0
   15290:	beq	152ac <__assert_fail@plt+0x3f78>
   15294:	mov	r0, r7
   15298:	mov	r1, r5
   1529c:	mov	r2, sl
   152a0:	bl	11100 <memcmp@plt>
   152a4:	cmp	r0, #0
   152a8:	beq	152d8 <__assert_fail@plt+0x3fa4>
   152ac:	ldr	r7, [r4]
   152b0:	mov	r0, r6
   152b4:	bl	17b54 <__assert_fail@plt+0x6820>
   152b8:	movw	r2, #45988	; 0xb3a4
   152bc:	mov	r3, r0
   152c0:	mov	r0, r7
   152c4:	mov	r1, #1
   152c8:	movt	r2, #1
   152cc:	bl	11280 <__fprintf_chk@plt>
   152d0:	mov	r7, r5
   152d4:	b	15308 <__assert_fail@plt+0x3fd4>
   152d8:	mov	sl, r9
   152dc:	ldr	r9, [r4]
   152e0:	mov	r0, r6
   152e4:	bl	17b54 <__assert_fail@plt+0x6820>
   152e8:	mov	r3, r0
   152ec:	mov	r0, r9
   152f0:	mov	r9, sl
   152f4:	ldr	sl, [sp]
   152f8:	movw	r2, #45996	; 0xb3ac
   152fc:	mov	r1, #1
   15300:	movt	r2, #1
   15304:	bl	11280 <__fprintf_chk@plt>
   15308:	ldr	r6, [r9, -r8, lsl #2]
   1530c:	add	r5, r5, sl
   15310:	sub	r8, r8, #1
   15314:	cmp	r6, #0
   15318:	bne	1528c <__assert_fail@plt+0x3f58>
   1531c:	ldr	r0, [r4]
   15320:	ldr	r1, [r0, #20]
   15324:	ldr	r2, [r0, #24]
   15328:	cmp	r1, r2
   1532c:	addcc	r2, r1, #1
   15330:	strcc	r2, [r0, #20]
   15334:	movcc	r0, #10
   15338:	strbcc	r0, [r1]
   1533c:	subcc	sp, fp, #28
   15340:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15344:	mov	r1, #10
   15348:	sub	sp, fp, #28
   1534c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15350:	b	112a4 <__overflow@plt>
   15354:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15358:	add	fp, sp, #28
   1535c:	sub	sp, sp, #12
   15360:	mov	sl, r0
   15364:	ldr	r0, [fp, #16]
   15368:	ldr	r9, [fp, #8]
   1536c:	mov	r5, r3
   15370:	mov	r8, r2
   15374:	mov	r6, r1
   15378:	cmp	r0, #0
   1537c:	beq	153ac <__assert_fail@plt+0x4078>
   15380:	mov	r0, r6
   15384:	mov	r1, r8
   15388:	mov	r2, r5
   1538c:	mov	r3, r9
   15390:	bl	15004 <__assert_fail@plt+0x3cd0>
   15394:	mov	r4, r0
   15398:	cmn	r4, #1
   1539c:	ble	153fc <__assert_fail@plt+0x40c8>
   153a0:	mov	r0, r4
   153a4:	sub	sp, fp, #28
   153a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153ac:	ldr	r0, [r8]
   153b0:	movw	r7, #45911	; 0xb357
   153b4:	str	r5, [sp, #8]
   153b8:	movt	r7, #1
   153bc:	cmp	r0, #0
   153c0:	beq	15414 <__assert_fail@plt+0x40e0>
   153c4:	add	r5, r8, #4
   153c8:	mov	r4, #0
   153cc:	mov	r1, r6
   153d0:	bl	11094 <strcmp@plt>
   153d4:	cmp	r0, #0
   153d8:	beq	153f0 <__assert_fail@plt+0x40bc>
   153dc:	ldr	r0, [r5, r4, lsl #2]
   153e0:	add	r4, r4, #1
   153e4:	cmp	r0, #0
   153e8:	bne	153cc <__assert_fail@plt+0x4098>
   153ec:	b	15414 <__assert_fail@plt+0x40e0>
   153f0:	ldr	r5, [sp, #8]
   153f4:	cmn	r4, #1
   153f8:	bgt	153a0 <__assert_fail@plt+0x406c>
   153fc:	movw	r0, #45911	; 0xb357
   15400:	movw	r7, #45938	; 0xb372
   15404:	str	r5, [sp, #8]
   15408:	movt	r0, #1
   1540c:	movt	r7, #1
   15410:	moveq	r7, r0
   15414:	ldr	r5, [fp, #12]
   15418:	mov	r0, #0
   1541c:	mov	r1, r7
   15420:	mov	r2, #5
   15424:	bl	1110c <dcgettext@plt>
   15428:	mov	r4, r0
   1542c:	mov	r0, #0
   15430:	mov	r1, #8
   15434:	mov	r2, r6
   15438:	bl	17584 <__assert_fail@plt+0x6250>
   1543c:	mov	r6, r0
   15440:	mov	r0, #1
   15444:	mov	r1, sl
   15448:	bl	17b44 <__assert_fail@plt+0x6810>
   1544c:	str	r0, [sp]
   15450:	mov	r0, #0
   15454:	mov	r1, #0
   15458:	mov	r2, r4
   1545c:	mov	r3, r6
   15460:	bl	11184 <error@plt>
   15464:	ldr	r1, [sp, #8]
   15468:	mov	r0, r8
   1546c:	mov	r2, r9
   15470:	bl	15234 <__assert_fail@plt+0x3f00>
   15474:	blx	r5
   15478:	mvn	r4, #0
   1547c:	mov	r0, r4
   15480:	sub	sp, fp, #28
   15484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15488:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1548c:	add	fp, sp, #24
   15490:	ldr	r6, [r1]
   15494:	cmp	r6, #0
   15498:	beq	154fc <__assert_fail@plt+0x41c8>
   1549c:	mov	r8, r1
   154a0:	mov	r7, r2
   154a4:	mov	r1, r2
   154a8:	mov	r2, r3
   154ac:	mov	r4, r3
   154b0:	mov	r9, r0
   154b4:	bl	11100 <memcmp@plt>
   154b8:	cmp	r0, #0
   154bc:	beq	154f4 <__assert_fail@plt+0x41c0>
   154c0:	add	r7, r7, r4
   154c4:	add	r5, r8, #4
   154c8:	ldr	r6, [r5]
   154cc:	cmp	r6, #0
   154d0:	beq	154fc <__assert_fail@plt+0x41c8>
   154d4:	mov	r0, r9
   154d8:	mov	r1, r7
   154dc:	mov	r2, r4
   154e0:	bl	11100 <memcmp@plt>
   154e4:	add	r7, r7, r4
   154e8:	add	r5, r5, #4
   154ec:	cmp	r0, #0
   154f0:	bne	154c8 <__assert_fail@plt+0x4194>
   154f4:	mov	r0, r6
   154f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   154fc:	mov	r6, #0
   15500:	mov	r0, r6
   15504:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15508:	movw	r1, #49700	; 0xc224
   1550c:	movt	r1, #2
   15510:	str	r0, [r1, #4]
   15514:	bx	lr
   15518:	movw	r1, #49700	; 0xc224
   1551c:	movt	r1, #2
   15520:	strb	r0, [r1]
   15524:	bx	lr
   15528:	push	{r4, r5, r6, sl, fp, lr}
   1552c:	add	fp, sp, #16
   15530:	sub	sp, sp, #8
   15534:	movw	r0, #49524	; 0xc174
   15538:	movt	r0, #2
   1553c:	ldr	r0, [r0]
   15540:	bl	19868 <__assert_fail@plt+0x8534>
   15544:	cmp	r0, #0
   15548:	beq	15570 <__assert_fail@plt+0x423c>
   1554c:	movw	r5, #49700	; 0xc224
   15550:	movt	r5, #2
   15554:	ldrb	r0, [r5]
   15558:	cmp	r0, #0
   1555c:	beq	1559c <__assert_fail@plt+0x4268>
   15560:	bl	11214 <__errno_location@plt>
   15564:	ldr	r0, [r0]
   15568:	cmp	r0, #32
   1556c:	bne	1559c <__assert_fail@plt+0x4268>
   15570:	movw	r0, #49512	; 0xc168
   15574:	movt	r0, #2
   15578:	ldr	r0, [r0]
   1557c:	bl	19868 <__assert_fail@plt+0x8534>
   15580:	cmp	r0, #0
   15584:	subeq	sp, fp, #16
   15588:	popeq	{r4, r5, r6, sl, fp, pc}
   1558c:	movw	r0, #49424	; 0xc110
   15590:	movt	r0, #2
   15594:	ldr	r0, [r0]
   15598:	bl	110c4 <_exit@plt>
   1559c:	movw	r1, #44929	; 0xaf81
   155a0:	mov	r0, #0
   155a4:	mov	r2, #5
   155a8:	movt	r1, #1
   155ac:	bl	1110c <dcgettext@plt>
   155b0:	ldr	r6, [r5, #4]
   155b4:	mov	r4, r0
   155b8:	bl	11214 <__errno_location@plt>
   155bc:	ldr	r5, [r0]
   155c0:	cmp	r6, #0
   155c4:	bne	155e0 <__assert_fail@plt+0x42ac>
   155c8:	movw	r2, #45998	; 0xb3ae
   155cc:	mov	r0, #0
   155d0:	mov	r1, r5
   155d4:	mov	r3, r4
   155d8:	movt	r2, #1
   155dc:	b	15600 <__assert_fail@plt+0x42cc>
   155e0:	mov	r0, r6
   155e4:	bl	177cc <__assert_fail@plt+0x6498>
   155e8:	movw	r2, #46001	; 0xb3b1
   155ec:	mov	r3, r0
   155f0:	str	r4, [sp]
   155f4:	mov	r0, #0
   155f8:	mov	r1, r5
   155fc:	movt	r2, #1
   15600:	bl	11184 <error@plt>
   15604:	movw	r0, #49424	; 0xc110
   15608:	movt	r0, #2
   1560c:	ldr	r0, [r0]
   15610:	bl	110c4 <_exit@plt>
   15614:	andeq	r0, r0, r0
   15618:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1561c:	add	fp, sp, #28
   15620:	sub	sp, sp, #4
   15624:	vpush	{d8}
   15628:	sub	sp, sp, #40	; 0x28
   1562c:	mov	sl, r0
   15630:	movw	r0, #11557	; 0x2d25
   15634:	add	r8, sp, #29
   15638:	mov	r5, r1
   1563c:	mov	r1, #43	; 0x2b
   15640:	mov	r9, r3
   15644:	mov	r3, #32
   15648:	vldr	d16, [pc, #272]	; 15760 <__assert_fail@plt+0x442c>
   1564c:	tst	r2, #16
   15650:	vcmpe.f64	d0, #0.0
   15654:	vneg.f64	d17, d0
   15658:	vmov.f64	d18, d0
   1565c:	mov	r6, #15
   15660:	vmov.f64	d8, d0
   15664:	strh	r0, [sp, #29]
   15668:	and	r0, r2, #1
   1566c:	add	r0, r8, r0
   15670:	strb	r1, [r0, #1]!
   15674:	ubfx	r1, r2, #1, #1
   15678:	strb	r3, [r0, r1]!
   1567c:	ubfx	r1, r2, #2, #1
   15680:	mov	r3, #48	; 0x30
   15684:	strb	r3, [r0, r1]!
   15688:	ubfx	r1, r2, #3, #1
   1568c:	movw	r3, #11818	; 0x2e2a
   15690:	mov	r2, #1
   15694:	strh	r3, [r0, r1]!
   15698:	mov	r1, #42	; 0x2a
   1569c:	mvn	r3, #0
   156a0:	strb	r1, [r0, #2]
   156a4:	mov	r1, #71	; 0x47
   156a8:	movweq	r1, #103	; 0x67
   156ac:	vmrs	APSR_nzcv, fpscr
   156b0:	vmovmi.f64	d18, d17
   156b4:	strb	r1, [r0, #3]
   156b8:	mov	r1, #0
   156bc:	vcmpe.f64	d18, d16
   156c0:	strb	r1, [r0, #4]
   156c4:	mov	r0, sl
   156c8:	mov	r1, r5
   156cc:	vstr	d0, [sp, #16]
   156d0:	stm	sp, {r8, r9}
   156d4:	vmrs	APSR_nzcv, fpscr
   156d8:	movwmi	r6, #1
   156dc:	str	r6, [sp, #8]
   156e0:	bl	11328 <__snprintf_chk@plt>
   156e4:	mov	r7, r0
   156e8:	cmp	r0, #0
   156ec:	blt	1574c <__assert_fail@plt+0x4418>
   156f0:	cmp	r7, r5
   156f4:	bcs	15710 <__assert_fail@plt+0x43dc>
   156f8:	mov	r0, sl
   156fc:	mov	r1, #0
   15700:	bl	11268 <strtod@plt>
   15704:	vcmp.f64	d0, d8
   15708:	vmrs	APSR_nzcv, fpscr
   1570c:	beq	1574c <__assert_fail@plt+0x4418>
   15710:	add	r4, r6, #1
   15714:	mov	r0, sl
   15718:	mov	r1, r5
   1571c:	mov	r2, #1
   15720:	mvn	r3, #0
   15724:	vstr	d8, [sp, #16]
   15728:	stm	sp, {r8, r9}
   1572c:	str	r4, [sp, #8]
   15730:	bl	11328 <__snprintf_chk@plt>
   15734:	mov	r7, r0
   15738:	cmp	r6, #15
   1573c:	bhi	1574c <__assert_fail@plt+0x4418>
   15740:	cmn	r7, #1
   15744:	mov	r6, r4
   15748:	bgt	156f0 <__assert_fail@plt+0x43bc>
   1574c:	mov	r0, r7
   15750:	sub	sp, fp, #40	; 0x28
   15754:	vpop	{d8}
   15758:	add	sp, sp, #4
   1575c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15760:	andeq	r0, r0, r0
   15764:	andseq	r0, r0, r0
   15768:	push	{r4, r5, r6, sl, fp, lr}
   1576c:	add	fp, sp, #16
   15770:	sub	sp, sp, #8
   15774:	mov	r4, r0
   15778:	bl	11274 <fileno@plt>
   1577c:	cmn	r0, #1
   15780:	ble	157f4 <__assert_fail@plt+0x44c0>
   15784:	mov	r0, r4
   15788:	bl	111c0 <__freading@plt>
   1578c:	cmp	r0, #0
   15790:	beq	157bc <__assert_fail@plt+0x4488>
   15794:	mov	r0, r4
   15798:	bl	11274 <fileno@plt>
   1579c:	mov	r1, #1
   157a0:	mov	r2, #0
   157a4:	mov	r3, #0
   157a8:	str	r1, [sp]
   157ac:	bl	11154 <lseek64@plt>
   157b0:	and	r0, r0, r1
   157b4:	cmn	r0, #1
   157b8:	beq	157f4 <__assert_fail@plt+0x44c0>
   157bc:	mov	r0, r4
   157c0:	bl	15804 <__assert_fail@plt+0x44d0>
   157c4:	cmp	r0, #0
   157c8:	beq	157f4 <__assert_fail@plt+0x44c0>
   157cc:	bl	11214 <__errno_location@plt>
   157d0:	ldr	r6, [r0]
   157d4:	mov	r5, r0
   157d8:	mov	r0, r4
   157dc:	bl	1128c <fclose@plt>
   157e0:	cmp	r6, #0
   157e4:	strne	r6, [r5]
   157e8:	mvnne	r0, #0
   157ec:	sub	sp, fp, #16
   157f0:	pop	{r4, r5, r6, sl, fp, pc}
   157f4:	mov	r0, r4
   157f8:	sub	sp, fp, #16
   157fc:	pop	{r4, r5, r6, sl, fp, lr}
   15800:	b	1128c <fclose@plt>
   15804:	push	{r4, sl, fp, lr}
   15808:	add	fp, sp, #8
   1580c:	sub	sp, sp, #8
   15810:	mov	r4, r0
   15814:	cmp	r0, #0
   15818:	beq	15834 <__assert_fail@plt+0x4500>
   1581c:	mov	r0, r4
   15820:	bl	111c0 <__freading@plt>
   15824:	cmp	r0, #0
   15828:	ldrbne	r0, [r4, #1]
   1582c:	tstne	r0, #1
   15830:	bne	15844 <__assert_fail@plt+0x4510>
   15834:	mov	r0, r4
   15838:	sub	sp, fp, #8
   1583c:	pop	{r4, sl, fp, lr}
   15840:	b	110a0 <fflush@plt>
   15844:	mov	r0, #1
   15848:	mov	r2, #0
   1584c:	mov	r3, #0
   15850:	str	r0, [sp]
   15854:	mov	r0, r4
   15858:	bl	15894 <__assert_fail@plt+0x4560>
   1585c:	mov	r0, r4
   15860:	sub	sp, fp, #8
   15864:	pop	{r4, sl, fp, lr}
   15868:	b	110a0 <fflush@plt>
   1586c:	push	{r4, r5, r6, sl, fp, lr}
   15870:	add	fp, sp, #16
   15874:	mov	r4, r0
   15878:	bl	11214 <__errno_location@plt>
   1587c:	ldr	r6, [r0]
   15880:	mov	r5, r0
   15884:	mov	r0, r4
   15888:	bl	110ac <free@plt>
   1588c:	str	r6, [r5]
   15890:	pop	{r4, r5, r6, sl, fp, pc}
   15894:	push	{r4, r5, r6, r7, fp, lr}
   15898:	add	fp, sp, #16
   1589c:	sub	sp, sp, #8
   158a0:	mov	r4, r0
   158a4:	ldr	r0, [r0, #4]
   158a8:	mov	r5, r3
   158ac:	mov	r6, r2
   158b0:	ldr	r1, [r4, #8]
   158b4:	cmp	r1, r0
   158b8:	bne	158d4 <__assert_fail@plt+0x45a0>
   158bc:	ldrd	r0, [r4, #16]
   158c0:	cmp	r1, r0
   158c4:	bne	158d4 <__assert_fail@plt+0x45a0>
   158c8:	ldr	r0, [r4, #36]	; 0x24
   158cc:	cmp	r0, #0
   158d0:	beq	158ec <__assert_fail@plt+0x45b8>
   158d4:	mov	r0, r4
   158d8:	mov	r2, r6
   158dc:	mov	r3, r5
   158e0:	sub	sp, fp, #16
   158e4:	pop	{r4, r5, r6, r7, fp, lr}
   158e8:	b	11298 <fseeko64@plt>
   158ec:	ldr	r7, [fp, #8]
   158f0:	mov	r0, r4
   158f4:	bl	11274 <fileno@plt>
   158f8:	mov	r2, r6
   158fc:	mov	r3, r5
   15900:	str	r7, [sp]
   15904:	bl	11154 <lseek64@plt>
   15908:	and	r2, r0, r1
   1590c:	cmn	r2, #1
   15910:	mvneq	r0, #0
   15914:	subeq	sp, fp, #16
   15918:	popeq	{r4, r5, r6, r7, fp, pc}
   1591c:	strd	r0, [r4, #80]	; 0x50
   15920:	ldr	r0, [r4]
   15924:	bic	r0, r0, #16
   15928:	str	r0, [r4]
   1592c:	mov	r0, #0
   15930:	sub	sp, fp, #16
   15934:	pop	{r4, r5, r6, r7, fp, pc}
   15938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1593c:	add	fp, sp, #28
   15940:	sub	sp, sp, #4
   15944:	vpush	{d8-d9}
   15948:	sub	sp, sp, #40	; 0x28
   1594c:	mov	sl, r0
   15950:	movw	r0, #11557	; 0x2d25
   15954:	add	r8, sp, #29
   15958:	mov	r5, r1
   1595c:	mov	r1, #43	; 0x2b
   15960:	mov	r9, r3
   15964:	mov	r3, #32
   15968:	vmov.f32	s16, s0
   1596c:	vcvt.f64.f32	d9, s0
   15970:	vldr	s0, [pc, #268]	; 15a84 <__assert_fail@plt+0x4750>
   15974:	tst	r2, #16
   15978:	mov	r6, #6
   1597c:	strh	r0, [sp, #29]
   15980:	and	r0, r2, #1
   15984:	vcmpe.f32	s16, #0.0
   15988:	vneg.f32	s2, s16
   1598c:	vmov.f32	s4, s16
   15990:	add	r0, r8, r0
   15994:	strb	r1, [r0, #1]!
   15998:	ubfx	r1, r2, #1, #1
   1599c:	strb	r3, [r0, r1]!
   159a0:	ubfx	r1, r2, #2, #1
   159a4:	mov	r3, #48	; 0x30
   159a8:	strb	r3, [r0, r1]!
   159ac:	ubfx	r1, r2, #3, #1
   159b0:	movw	r3, #11818	; 0x2e2a
   159b4:	mov	r2, #1
   159b8:	strh	r3, [r0, r1]!
   159bc:	mov	r1, #42	; 0x2a
   159c0:	mvn	r3, #0
   159c4:	strb	r1, [r0, #2]
   159c8:	mov	r1, #71	; 0x47
   159cc:	movweq	r1, #103	; 0x67
   159d0:	vmrs	APSR_nzcv, fpscr
   159d4:	vmovmi.f32	s4, s2
   159d8:	strb	r1, [r0, #3]
   159dc:	mov	r1, #0
   159e0:	vcmpe.f32	s4, s0
   159e4:	strb	r1, [r0, #4]
   159e8:	mov	r0, sl
   159ec:	mov	r1, r5
   159f0:	vstr	d9, [sp, #16]
   159f4:	stm	sp, {r8, r9}
   159f8:	vmrs	APSR_nzcv, fpscr
   159fc:	movwmi	r6, #1
   15a00:	str	r6, [sp, #8]
   15a04:	bl	11328 <__snprintf_chk@plt>
   15a08:	mov	r7, r0
   15a0c:	cmp	r0, #0
   15a10:	blt	15a70 <__assert_fail@plt+0x473c>
   15a14:	cmp	r7, r5
   15a18:	bcs	15a34 <__assert_fail@plt+0x4700>
   15a1c:	mov	r0, sl
   15a20:	mov	r1, #0
   15a24:	bl	11190 <strtof@plt>
   15a28:	vcmp.f32	s0, s16
   15a2c:	vmrs	APSR_nzcv, fpscr
   15a30:	beq	15a70 <__assert_fail@plt+0x473c>
   15a34:	add	r4, r6, #1
   15a38:	mov	r0, sl
   15a3c:	mov	r1, r5
   15a40:	mov	r2, #1
   15a44:	mvn	r3, #0
   15a48:	vstr	d9, [sp, #16]
   15a4c:	stm	sp, {r8, r9}
   15a50:	str	r4, [sp, #8]
   15a54:	bl	11328 <__snprintf_chk@plt>
   15a58:	mov	r7, r0
   15a5c:	cmp	r6, #7
   15a60:	bhi	15a70 <__assert_fail@plt+0x473c>
   15a64:	cmn	r7, #1
   15a68:	mov	r6, r4
   15a6c:	bgt	15a14 <__assert_fail@plt+0x46e0>
   15a70:	mov	r0, r7
   15a74:	sub	sp, fp, #48	; 0x30
   15a78:	vpop	{d8-d9}
   15a7c:	add	sp, sp, #4
   15a80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a84:	addeq	r0, r0, r0
   15a88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a8c:	add	fp, sp, #28
   15a90:	sub	sp, sp, #4
   15a94:	vpush	{d8}
   15a98:	sub	sp, sp, #40	; 0x28
   15a9c:	mov	sl, r0
   15aa0:	movw	r0, #11557	; 0x2d25
   15aa4:	add	r8, sp, #29
   15aa8:	mov	r5, r1
   15aac:	mov	r1, #43	; 0x2b
   15ab0:	mov	r9, r3
   15ab4:	mov	r3, #32
   15ab8:	vldr	d16, [pc, #272]	; 15bd0 <__assert_fail@plt+0x489c>
   15abc:	tst	r2, #16
   15ac0:	vcmpe.f64	d0, #0.0
   15ac4:	vneg.f64	d17, d0
   15ac8:	vmov.f64	d18, d0
   15acc:	mov	r6, #15
   15ad0:	vmov.f64	d8, d0
   15ad4:	strh	r0, [sp, #29]
   15ad8:	and	r0, r2, #1
   15adc:	add	r0, r8, r0
   15ae0:	strb	r1, [r0, #1]!
   15ae4:	ubfx	r1, r2, #1, #1
   15ae8:	strb	r3, [r0, r1]!
   15aec:	ubfx	r1, r2, #2, #1
   15af0:	mov	r3, #48	; 0x30
   15af4:	strb	r3, [r0, r1]!
   15af8:	movw	r3, #11818	; 0x2e2a
   15afc:	ubfx	r1, r2, #3, #1
   15b00:	mov	r2, #1
   15b04:	movt	r3, #19498	; 0x4c2a
   15b08:	str	r3, [r0, r1]!
   15b0c:	mov	r1, #71	; 0x47
   15b10:	mvn	r3, #0
   15b14:	movweq	r1, #103	; 0x67
   15b18:	vmrs	APSR_nzcv, fpscr
   15b1c:	vmovmi.f64	d18, d17
   15b20:	strb	r1, [r0, #4]
   15b24:	mov	r1, #0
   15b28:	vcmpe.f64	d18, d16
   15b2c:	strb	r1, [r0, #5]
   15b30:	mov	r0, sl
   15b34:	mov	r1, r5
   15b38:	vstr	d0, [sp, #16]
   15b3c:	stm	sp, {r8, r9}
   15b40:	vmrs	APSR_nzcv, fpscr
   15b44:	movwmi	r6, #1
   15b48:	str	r6, [sp, #8]
   15b4c:	bl	11328 <__snprintf_chk@plt>
   15b50:	mov	r7, r0
   15b54:	cmp	r0, #0
   15b58:	blt	15bb8 <__assert_fail@plt+0x4884>
   15b5c:	cmp	r7, r5
   15b60:	bcs	15b7c <__assert_fail@plt+0x4848>
   15b64:	mov	r0, sl
   15b68:	mov	r1, #0
   15b6c:	bl	110f4 <strtold@plt>
   15b70:	vcmp.f64	d0, d8
   15b74:	vmrs	APSR_nzcv, fpscr
   15b78:	beq	15bb8 <__assert_fail@plt+0x4884>
   15b7c:	add	r4, r6, #1
   15b80:	mov	r0, sl
   15b84:	mov	r1, r5
   15b88:	mov	r2, #1
   15b8c:	mvn	r3, #0
   15b90:	vstr	d8, [sp, #16]
   15b94:	stm	sp, {r8, r9}
   15b98:	str	r4, [sp, #8]
   15b9c:	bl	11328 <__snprintf_chk@plt>
   15ba0:	mov	r7, r0
   15ba4:	cmp	r6, #15
   15ba8:	bhi	15bb8 <__assert_fail@plt+0x4884>
   15bac:	cmn	r7, #1
   15bb0:	mov	r6, r4
   15bb4:	bgt	15b5c <__assert_fail@plt+0x4828>
   15bb8:	mov	r0, r7
   15bbc:	sub	sp, fp, #40	; 0x28
   15bc0:	vpop	{d8}
   15bc4:	add	sp, sp, #4
   15bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bcc:	nop	{0}
   15bd0:	andeq	r0, r0, r0
   15bd4:	andseq	r0, r0, r0
   15bd8:	push	{r4, r5, fp, lr}
   15bdc:	add	fp, sp, #8
   15be0:	cmp	r0, #0
   15be4:	beq	15c78 <__assert_fail@plt+0x4944>
   15be8:	mov	r1, #47	; 0x2f
   15bec:	mov	r4, r0
   15bf0:	bl	112bc <strrchr@plt>
   15bf4:	cmp	r0, #0
   15bf8:	mov	r5, r4
   15bfc:	addne	r5, r0, #1
   15c00:	sub	r0, r5, r4
   15c04:	cmp	r0, #7
   15c08:	blt	15c5c <__assert_fail@plt+0x4928>
   15c0c:	movw	r1, #46064	; 0xb3f0
   15c10:	sub	r0, r5, #7
   15c14:	mov	r2, #7
   15c18:	movt	r1, #1
   15c1c:	bl	11310 <strncmp@plt>
   15c20:	cmp	r0, #0
   15c24:	bne	15c5c <__assert_fail@plt+0x4928>
   15c28:	movw	r1, #46072	; 0xb3f8
   15c2c:	mov	r0, r5
   15c30:	mov	r2, #3
   15c34:	movt	r1, #1
   15c38:	bl	11310 <strncmp@plt>
   15c3c:	cmp	r0, #0
   15c40:	beq	15c4c <__assert_fail@plt+0x4918>
   15c44:	mov	r4, r5
   15c48:	b	15c5c <__assert_fail@plt+0x4928>
   15c4c:	movw	r0, #49496	; 0xc158
   15c50:	add	r4, r5, #3
   15c54:	movt	r0, #2
   15c58:	str	r4, [r0]
   15c5c:	movw	r0, #49500	; 0xc15c
   15c60:	movt	r0, #2
   15c64:	str	r4, [r0]
   15c68:	movw	r0, #49708	; 0xc22c
   15c6c:	movt	r0, #2
   15c70:	str	r4, [r0]
   15c74:	pop	{r4, r5, fp, pc}
   15c78:	movw	r0, #49512	; 0xc168
   15c7c:	mov	r1, #55	; 0x37
   15c80:	mov	r2, #1
   15c84:	movt	r0, #2
   15c88:	ldr	r3, [r0]
   15c8c:	movw	r0, #46008	; 0xb3b8
   15c90:	movt	r0, #1
   15c94:	bl	11148 <fwrite@plt>
   15c98:	bl	1131c <abort@plt>
   15c9c:	push	{r4, r5, r6, sl, fp, lr}
   15ca0:	add	fp, sp, #16
   15ca4:	mov	r4, r0
   15ca8:	movw	r0, #49712	; 0xc230
   15cac:	movt	r0, #2
   15cb0:	cmp	r4, #0
   15cb4:	moveq	r4, r0
   15cb8:	bl	11214 <__errno_location@plt>
   15cbc:	ldr	r6, [r0]
   15cc0:	mov	r5, r0
   15cc4:	mov	r0, r4
   15cc8:	mov	r1, #48	; 0x30
   15ccc:	bl	1868c <__assert_fail@plt+0x7358>
   15cd0:	str	r6, [r5]
   15cd4:	pop	{r4, r5, r6, sl, fp, pc}
   15cd8:	movw	r1, #49712	; 0xc230
   15cdc:	cmp	r0, #0
   15ce0:	movt	r1, #2
   15ce4:	movne	r1, r0
   15ce8:	ldr	r0, [r1]
   15cec:	bx	lr
   15cf0:	movw	r2, #49712	; 0xc230
   15cf4:	cmp	r0, #0
   15cf8:	movt	r2, #2
   15cfc:	movne	r2, r0
   15d00:	str	r1, [r2]
   15d04:	bx	lr
   15d08:	movw	r3, #49712	; 0xc230
   15d0c:	cmp	r0, #0
   15d10:	movt	r3, #2
   15d14:	movne	r3, r0
   15d18:	ubfx	r0, r1, #5, #3
   15d1c:	and	r1, r1, #31
   15d20:	add	r0, r3, r0, lsl #2
   15d24:	ldr	r3, [r0, #8]
   15d28:	eor	r2, r2, r3, lsr r1
   15d2c:	and	r2, r2, #1
   15d30:	eor	r2, r3, r2, lsl r1
   15d34:	str	r2, [r0, #8]
   15d38:	mov	r0, #1
   15d3c:	and	r0, r0, r3, lsr r1
   15d40:	bx	lr
   15d44:	movw	r2, #49712	; 0xc230
   15d48:	cmp	r0, #0
   15d4c:	movt	r2, #2
   15d50:	movne	r2, r0
   15d54:	ldr	r0, [r2, #4]
   15d58:	str	r1, [r2, #4]
   15d5c:	bx	lr
   15d60:	movw	r3, #49712	; 0xc230
   15d64:	cmp	r0, #0
   15d68:	movt	r3, #2
   15d6c:	movne	r3, r0
   15d70:	cmp	r1, #0
   15d74:	mov	r0, #10
   15d78:	cmpne	r2, #0
   15d7c:	str	r0, [r3]
   15d80:	bne	15d90 <__assert_fail@plt+0x4a5c>
   15d84:	push	{fp, lr}
   15d88:	mov	fp, sp
   15d8c:	bl	1131c <abort@plt>
   15d90:	str	r1, [r3, #40]	; 0x28
   15d94:	str	r2, [r3, #44]	; 0x2c
   15d98:	bx	lr
   15d9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15da0:	add	fp, sp, #28
   15da4:	sub	sp, sp, #20
   15da8:	mov	r7, r0
   15dac:	ldr	r0, [fp, #8]
   15db0:	movw	r5, #49712	; 0xc230
   15db4:	mov	r8, r3
   15db8:	mov	r9, r2
   15dbc:	mov	sl, r1
   15dc0:	movt	r5, #2
   15dc4:	cmp	r0, #0
   15dc8:	movne	r5, r0
   15dcc:	bl	11214 <__errno_location@plt>
   15dd0:	mov	r4, r0
   15dd4:	ldm	r5, {r0, r1}
   15dd8:	ldr	r2, [r5, #40]	; 0x28
   15ddc:	ldr	r3, [r5, #44]	; 0x2c
   15de0:	add	r5, r5, #8
   15de4:	ldr	r6, [r4]
   15de8:	stm	sp, {r0, r1, r5}
   15dec:	str	r2, [sp, #12]
   15df0:	str	r3, [sp, #16]
   15df4:	mov	r0, r7
   15df8:	mov	r1, sl
   15dfc:	mov	r2, r9
   15e00:	mov	r3, r8
   15e04:	bl	15e14 <__assert_fail@plt+0x4ae0>
   15e08:	str	r6, [r4]
   15e0c:	sub	sp, fp, #28
   15e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e18:	add	fp, sp, #28
   15e1c:	sub	sp, sp, #156	; 0x9c
   15e20:	str	r0, [sp, #76]	; 0x4c
   15e24:	ldr	r0, [fp, #12]
   15e28:	mov	r6, r1
   15e2c:	str	r3, [sp, #84]	; 0x54
   15e30:	str	r2, [fp, #-84]	; 0xffffffac
   15e34:	and	r1, r0, #4
   15e38:	str	r1, [sp, #24]
   15e3c:	and	r1, r0, #1
   15e40:	str	r1, [sp, #28]
   15e44:	ubfx	r8, r0, #1, #1
   15e48:	bl	11160 <__ctype_get_mb_cur_max@plt>
   15e4c:	str	r0, [sp, #32]
   15e50:	ldr	r0, [fp, #24]
   15e54:	ldr	r7, [fp, #8]
   15e58:	mov	r1, #0
   15e5c:	mov	r2, #0
   15e60:	mov	r4, #1
   15e64:	str	r1, [sp, #52]	; 0x34
   15e68:	str	r0, [sp, #72]	; 0x48
   15e6c:	ldr	r0, [fp, #20]
   15e70:	str	r0, [sp, #68]	; 0x44
   15e74:	mov	r0, #0
   15e78:	str	r0, [sp, #48]	; 0x30
   15e7c:	mov	r0, #0
   15e80:	str	r0, [sp, #92]	; 0x5c
   15e84:	mov	r0, #0
   15e88:	str	r0, [fp, #-76]	; 0xffffffb4
   15e8c:	mov	r0, #0
   15e90:	cmp	r7, #10
   15e94:	bhi	1717c <__assert_fail@plt+0x5e48>
   15e98:	add	r1, pc, #28
   15e9c:	mov	sl, r6
   15ea0:	ldr	r6, [sp, #76]	; 0x4c
   15ea4:	ldr	ip, [fp, #-84]	; 0xffffffac
   15ea8:	ldr	lr, [sp, #84]	; 0x54
   15eac:	mov	r9, #0
   15eb0:	mov	r3, #1
   15eb4:	mov	r5, #0
   15eb8:	ldr	pc, [r1, r7, lsl #2]
   15ebc:	andeq	r5, r1, ip, lsl #31
   15ec0:	andeq	r5, r1, r8, asr #31
   15ec4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   15ec8:	andeq	r5, r1, r4, lsl #31
   15ecc:			; <UNDEFINED> instruction: 0x00015fbc
   15ed0:	strdeq	r5, [r1], -r0
   15ed4:	andeq	r5, r1, ip, lsr #31
   15ed8:	strdeq	r6, [r1], -ip
   15edc:	andeq	r5, r1, r8, ror #29
   15ee0:	andeq	r5, r1, r8, ror #29
   15ee4:	muleq	r1, r0, r1
   15ee8:	mov	r9, r4
   15eec:	movw	r4, #46154	; 0xb44a
   15ef0:	mov	r5, r8
   15ef4:	mov	r8, r2
   15ef8:	mov	r0, #0
   15efc:	mov	r2, #5
   15f00:	movt	r4, #1
   15f04:	mov	r1, r4
   15f08:	bl	1110c <dcgettext@plt>
   15f0c:	cmp	r0, r4
   15f10:	str	r0, [sp, #68]	; 0x44
   15f14:	bne	160a4 <__assert_fail@plt+0x4d70>
   15f18:	bl	198ec <__assert_fail@plt+0x85b8>
   15f1c:	ldrb	r1, [r0]
   15f20:	and	r1, r1, #223	; 0xdf
   15f24:	cmp	r1, #71	; 0x47
   15f28:	beq	16070 <__assert_fail@plt+0x4d3c>
   15f2c:	cmp	r1, #85	; 0x55
   15f30:	bne	16088 <__assert_fail@plt+0x4d54>
   15f34:	ldrb	r1, [r0, #1]
   15f38:	and	r1, r1, #223	; 0xdf
   15f3c:	cmp	r1, #84	; 0x54
   15f40:	bne	16088 <__assert_fail@plt+0x4d54>
   15f44:	ldrb	r1, [r0, #2]
   15f48:	and	r1, r1, #223	; 0xdf
   15f4c:	cmp	r1, #70	; 0x46
   15f50:	bne	16088 <__assert_fail@plt+0x4d54>
   15f54:	ldrb	r1, [r0, #3]
   15f58:	cmp	r1, #45	; 0x2d
   15f5c:	ldrbeq	r1, [r0, #4]
   15f60:	cmpeq	r1, #56	; 0x38
   15f64:	bne	16088 <__assert_fail@plt+0x4d54>
   15f68:	ldrb	r0, [r0, #5]
   15f6c:	cmp	r0, #0
   15f70:	movw	r0, #46156	; 0xb44c
   15f74:	movt	r0, #1
   15f78:	str	r0, [sp, #68]	; 0x44
   15f7c:	bne	16088 <__assert_fail@plt+0x4d54>
   15f80:	b	160a4 <__assert_fail@plt+0x4d70>
   15f84:	mov	r0, #1
   15f88:	b	15fc8 <__assert_fail@plt+0x4c94>
   15f8c:	mov	r7, #0
   15f90:	mov	r9, #0
   15f94:	mov	r3, r0
   15f98:	b	16068 <__assert_fail@plt+0x4d34>
   15f9c:	tst	r8, #1
   15fa0:	bne	15fc8 <__assert_fail@plt+0x4c94>
   15fa4:	mov	r3, r0
   15fa8:	b	16020 <__assert_fail@plt+0x4cec>
   15fac:	mov	r0, #1
   15fb0:	mov	r9, #0
   15fb4:	mov	r7, #5
   15fb8:	b	16004 <__assert_fail@plt+0x4cd0>
   15fbc:	mov	r3, #1
   15fc0:	tst	r8, #1
   15fc4:	beq	16020 <__assert_fail@plt+0x4cec>
   15fc8:	mov	r1, #1
   15fcc:	mov	r9, #0
   15fd0:	mov	r7, #2
   15fd4:	mov	r3, r0
   15fd8:	mov	r5, #1
   15fdc:	str	r1, [fp, #-76]	; 0xffffffb4
   15fe0:	movw	r1, #47117	; 0xb80d
   15fe4:	movt	r1, #1
   15fe8:	str	r1, [sp, #92]	; 0x5c
   15fec:	b	161fc <__assert_fail@plt+0x4ec8>
   15ff0:	mov	r7, #5
   15ff4:	tst	r8, #1
   15ff8:	beq	16040 <__assert_fail@plt+0x4d0c>
   15ffc:	mov	r0, #1
   16000:	mov	r9, #0
   16004:	str	r0, [fp, #-76]	; 0xffffffb4
   16008:	movw	r0, #46152	; 0xb448
   1600c:	mov	r3, #1
   16010:	mov	r5, #1
   16014:	movt	r0, #1
   16018:	str	r0, [sp, #92]	; 0x5c
   1601c:	b	161fc <__assert_fail@plt+0x4ec8>
   16020:	cmp	sl, #0
   16024:	mov	r9, #1
   16028:	mov	r7, #2
   1602c:	movne	r0, #39	; 0x27
   16030:	strbne	r0, [r6]
   16034:	movw	r0, #47117	; 0xb80d
   16038:	movt	r0, #1
   1603c:	b	1605c <__assert_fail@plt+0x4d28>
   16040:	cmp	sl, #0
   16044:	mov	r9, #1
   16048:	mov	r3, #1
   1604c:	movne	r0, #34	; 0x22
   16050:	strbne	r0, [r6]
   16054:	movw	r0, #46152	; 0xb448
   16058:	movt	r0, #1
   1605c:	str	r0, [sp, #92]	; 0x5c
   16060:	mov	r0, #1
   16064:	str	r0, [fp, #-76]	; 0xffffffb4
   16068:	mov	r5, #0
   1606c:	b	161fc <__assert_fail@plt+0x4ec8>
   16070:	ldrb	r1, [r0, #1]
   16074:	and	r1, r1, #223	; 0xdf
   16078:	cmp	r1, #66	; 0x42
   1607c:	ldrbeq	r1, [r0, #2]
   16080:	cmpeq	r1, #49	; 0x31
   16084:	beq	16fa4 <__assert_fail@plt+0x5c70>
   16088:	movw	r0, #47117	; 0xb80d
   1608c:	movw	r1, #46152	; 0xb448
   16090:	cmp	r7, #9
   16094:	movt	r0, #1
   16098:	movt	r1, #1
   1609c:	moveq	r0, r1
   160a0:	str	r0, [sp, #68]	; 0x44
   160a4:	movw	r4, #47117	; 0xb80d
   160a8:	mov	r0, #0
   160ac:	mov	r2, #5
   160b0:	movt	r4, #1
   160b4:	mov	r1, r4
   160b8:	bl	1110c <dcgettext@plt>
   160bc:	cmp	r0, r4
   160c0:	str	r0, [sp, #72]	; 0x48
   160c4:	beq	160d4 <__assert_fail@plt+0x4da0>
   160c8:	mov	r4, r9
   160cc:	mov	r2, r8
   160d0:	b	1618c <__assert_fail@plt+0x4e58>
   160d4:	bl	198ec <__assert_fail@plt+0x85b8>
   160d8:	ldrb	r1, [r0]
   160dc:	mov	r4, r9
   160e0:	and	r1, r1, #223	; 0xdf
   160e4:	cmp	r1, #71	; 0x47
   160e8:	beq	16144 <__assert_fail@plt+0x4e10>
   160ec:	cmp	r1, #85	; 0x55
   160f0:	mov	r2, r8
   160f4:	bne	1616c <__assert_fail@plt+0x4e38>
   160f8:	ldrb	r1, [r0, #1]
   160fc:	and	r1, r1, #223	; 0xdf
   16100:	cmp	r1, #84	; 0x54
   16104:	bne	1616c <__assert_fail@plt+0x4e38>
   16108:	ldrb	r1, [r0, #2]
   1610c:	and	r1, r1, #223	; 0xdf
   16110:	cmp	r1, #70	; 0x46
   16114:	ldrbeq	r1, [r0, #3]
   16118:	cmpeq	r1, #45	; 0x2d
   1611c:	bne	1616c <__assert_fail@plt+0x4e38>
   16120:	ldrb	r1, [r0, #4]
   16124:	cmp	r1, #56	; 0x38
   16128:	ldrbeq	r0, [r0, #5]
   1612c:	cmpeq	r0, #0
   16130:	bne	1616c <__assert_fail@plt+0x4e38>
   16134:	movw	r0, #46160	; 0xb450
   16138:	movt	r0, #1
   1613c:	str	r0, [sp, #72]	; 0x48
   16140:	b	1618c <__assert_fail@plt+0x4e58>
   16144:	ldrb	r1, [r0, #1]
   16148:	mov	r2, r8
   1614c:	and	r1, r1, #223	; 0xdf
   16150:	cmp	r1, #66	; 0x42
   16154:	bne	1616c <__assert_fail@plt+0x4e38>
   16158:	ldrb	r1, [r0, #2]
   1615c:	cmp	r1, #49	; 0x31
   16160:	ldrbeq	r1, [r0, #3]
   16164:	cmpeq	r1, #56	; 0x38
   16168:	beq	16fe8 <__assert_fail@plt+0x5cb4>
   1616c:	movw	r0, #47117	; 0xb80d
   16170:	cmp	r7, #9
   16174:	movt	r0, #1
   16178:	mov	r1, r0
   1617c:	movw	r0, #46152	; 0xb448
   16180:	movt	r0, #1
   16184:	moveq	r1, r0
   16188:	str	r1, [sp, #72]	; 0x48
   1618c:	mov	r8, r5
   16190:	mov	r9, #0
   16194:	tst	r8, #1
   16198:	mov	r5, r8
   1619c:	str	r2, [fp, #-48]	; 0xffffffd0
   161a0:	bne	161d8 <__assert_fail@plt+0x4ea4>
   161a4:	ldr	r0, [sp, #68]	; 0x44
   161a8:	ldrb	r0, [r0]
   161ac:	cmp	r0, #0
   161b0:	beq	161d8 <__assert_fail@plt+0x4ea4>
   161b4:	ldr	r1, [sp, #68]	; 0x44
   161b8:	mov	r9, #0
   161bc:	add	r1, r1, #1
   161c0:	cmp	r9, sl
   161c4:	strbcc	r0, [r6, r9]
   161c8:	ldrb	r0, [r1, r9]
   161cc:	add	r9, r9, #1
   161d0:	cmp	r0, #0
   161d4:	bne	161c0 <__assert_fail@plt+0x4e8c>
   161d8:	ldr	r8, [sp, #72]	; 0x48
   161dc:	mov	r0, r8
   161e0:	bl	111fc <strlen@plt>
   161e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   161e8:	ldr	lr, [sp, #84]	; 0x54
   161ec:	ldr	r2, [fp, #-48]	; 0xffffffd0
   161f0:	str	r0, [fp, #-76]	; 0xffffffb4
   161f4:	str	r8, [sp, #92]	; 0x5c
   161f8:	mov	r3, #1
   161fc:	ldr	r0, [fp, #16]
   16200:	str	r7, [fp, #-64]	; 0xffffffc0
   16204:	str	r5, [fp, #-72]	; 0xffffffb8
   16208:	str	r3, [sp, #80]	; 0x50
   1620c:	cmp	r0, #0
   16210:	movwne	r0, #1
   16214:	and	r0, r0, r5
   16218:	str	r0, [fp, #-88]	; 0xffffffa8
   1621c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16220:	cmp	r0, #0
   16224:	movwne	r0, #1
   16228:	subs	r7, r7, #2
   1622c:	and	r1, r0, r5
   16230:	str	r7, [fp, #-80]	; 0xffffffb0
   16234:	and	r1, r3, r1
   16238:	str	r1, [sp, #40]	; 0x28
   1623c:	clz	r1, r7
   16240:	lsr	r1, r1, #5
   16244:	and	r1, r1, r5
   16248:	eor	r5, r5, #1
   1624c:	str	r1, [sp, #36]	; 0x24
   16250:	mov	r1, r7
   16254:	str	r5, [sp, #88]	; 0x58
   16258:	mov	r7, #0
   1625c:	movwne	r1, #1
   16260:	orr	r5, r1, r5
   16264:	and	r1, r1, r3
   16268:	and	r0, r0, r1
   1626c:	str	r5, [sp, #60]	; 0x3c
   16270:	str	r1, [fp, #-68]	; 0xffffffbc
   16274:	str	r0, [fp, #-60]	; 0xffffffc4
   16278:	eor	r0, r3, #1
   1627c:	str	r0, [sp, #44]	; 0x2c
   16280:	cmn	lr, #1
   16284:	beq	16294 <__assert_fail@plt+0x4f60>
   16288:	cmp	r7, lr
   1628c:	bne	162a0 <__assert_fail@plt+0x4f6c>
   16290:	b	16f18 <__assert_fail@plt+0x5be4>
   16294:	ldrb	r0, [ip, r7]
   16298:	cmp	r0, #0
   1629c:	beq	16f20 <__assert_fail@plt+0x5bec>
   162a0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   162a4:	mov	r8, #0
   162a8:	str	r4, [fp, #-52]	; 0xffffffcc
   162ac:	str	r2, [fp, #-48]	; 0xffffffd0
   162b0:	cmp	r0, #0
   162b4:	beq	162e8 <__assert_fail@plt+0x4fb4>
   162b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   162bc:	add	r4, r7, r0
   162c0:	cmp	r0, #2
   162c4:	bcc	162e0 <__assert_fail@plt+0x4fac>
   162c8:	cmn	lr, #1
   162cc:	bne	162e0 <__assert_fail@plt+0x4fac>
   162d0:	mov	r0, ip
   162d4:	bl	111fc <strlen@plt>
   162d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   162dc:	mov	lr, r0
   162e0:	cmp	r4, lr
   162e4:	bls	16300 <__assert_fail@plt+0x4fcc>
   162e8:	mov	r0, #0
   162ec:	str	r0, [fp, #-56]	; 0xffffffc8
   162f0:	ldrb	r5, [ip, r7]
   162f4:	cmp	r5, #126	; 0x7e
   162f8:	bls	16350 <__assert_fail@plt+0x501c>
   162fc:	b	16758 <__assert_fail@plt+0x5424>
   16300:	ldr	r1, [sp, #92]	; 0x5c
   16304:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16308:	add	r0, ip, r7
   1630c:	mov	r4, lr
   16310:	bl	11100 <memcmp@plt>
   16314:	ldr	r2, [sp, #88]	; 0x58
   16318:	cmp	r0, #0
   1631c:	mov	r1, r0
   16320:	movwne	r1, #1
   16324:	orr	r1, r1, r2
   16328:	tst	r1, #1
   1632c:	beq	1702c <__assert_fail@plt+0x5cf8>
   16330:	ldr	ip, [fp, #-84]	; 0xffffffac
   16334:	clz	r0, r0
   16338:	mov	lr, r4
   1633c:	lsr	r0, r0, #5
   16340:	str	r0, [fp, #-56]	; 0xffffffc8
   16344:	ldrb	r5, [ip, r7]
   16348:	cmp	r5, #126	; 0x7e
   1634c:	bhi	16758 <__assert_fail@plt+0x5424>
   16350:	add	r3, pc, #16
   16354:	mov	r4, #1
   16358:	mov	r2, #110	; 0x6e
   1635c:	mov	r0, #97	; 0x61
   16360:	mov	r1, #0
   16364:	ldr	pc, [r3, r5, lsl #2]
   16368:	andeq	r6, r1, r8, lsr r6
   1636c:	andeq	r6, r1, r8, asr r7
   16370:	andeq	r6, r1, r8, asr r7
   16374:	andeq	r6, r1, r8, asr r7
   16378:	andeq	r6, r1, r8, asr r7
   1637c:	andeq	r6, r1, r8, asr r7
   16380:	andeq	r6, r1, r8, asr r7
   16384:	andeq	r6, r1, r4, lsr r8
   16388:	andeq	r6, r1, r8, lsl r6
   1638c:	andeq	r6, r1, r0, lsl #12
   16390:	andeq	r6, r1, r4, lsr #12
   16394:			; <UNDEFINED> instruction: 0x000166b4
   16398:	strdeq	r6, [r1], -r8
   1639c:	andeq	r6, r1, r0, lsr #12
   163a0:	andeq	r6, r1, r8, asr r7
   163a4:	andeq	r6, r1, r8, asr r7
   163a8:	andeq	r6, r1, r8, asr r7
   163ac:	andeq	r6, r1, r8, asr r7
   163b0:	andeq	r6, r1, r8, asr r7
   163b4:	andeq	r6, r1, r8, asr r7
   163b8:	andeq	r6, r1, r8, asr r7
   163bc:	andeq	r6, r1, r8, asr r7
   163c0:	andeq	r6, r1, r8, asr r7
   163c4:	andeq	r6, r1, r8, asr r7
   163c8:	andeq	r6, r1, r8, asr r7
   163cc:	andeq	r6, r1, r8, asr r7
   163d0:	andeq	r6, r1, r8, asr r7
   163d4:	andeq	r6, r1, r8, asr r7
   163d8:	andeq	r6, r1, r8, asr r7
   163dc:	andeq	r6, r1, r8, asr r7
   163e0:	andeq	r6, r1, r8, asr r7
   163e4:	andeq	r6, r1, r8, asr r7
   163e8:			; <UNDEFINED> instruction: 0x000167b0
   163ec:			; <UNDEFINED> instruction: 0x000167b4
   163f0:			; <UNDEFINED> instruction: 0x000167b4
   163f4:	andeq	r6, r1, r4, lsl #11
   163f8:			; <UNDEFINED> instruction: 0x000167b4
   163fc:	andeq	r6, r1, r4, ror #10
   16400:			; <UNDEFINED> instruction: 0x000167b4
   16404:			; <UNDEFINED> instruction: 0x000166bc
   16408:			; <UNDEFINED> instruction: 0x000167b4
   1640c:			; <UNDEFINED> instruction: 0x000167b4
   16410:			; <UNDEFINED> instruction: 0x000167b4
   16414:	andeq	r6, r1, r4, ror #10
   16418:	andeq	r6, r1, r4, ror #10
   1641c:	andeq	r6, r1, r4, ror #10
   16420:	andeq	r6, r1, r4, ror #10
   16424:	andeq	r6, r1, r4, ror #10
   16428:	andeq	r6, r1, r4, ror #10
   1642c:	andeq	r6, r1, r4, ror #10
   16430:	andeq	r6, r1, r4, ror #10
   16434:	andeq	r6, r1, r4, ror #10
   16438:	andeq	r6, r1, r4, ror #10
   1643c:	andeq	r6, r1, r4, ror #10
   16440:	andeq	r6, r1, r4, ror #10
   16444:	andeq	r6, r1, r4, ror #10
   16448:	andeq	r6, r1, r4, ror #10
   1644c:	andeq	r6, r1, r4, ror #10
   16450:	andeq	r6, r1, r4, ror #10
   16454:			; <UNDEFINED> instruction: 0x000167b4
   16458:			; <UNDEFINED> instruction: 0x000167b4
   1645c:			; <UNDEFINED> instruction: 0x000167b4
   16460:			; <UNDEFINED> instruction: 0x000167b4
   16464:	andeq	r6, r1, r8, ror r6
   16468:	andeq	r6, r1, r8, asr r7
   1646c:	andeq	r6, r1, r4, ror #10
   16470:	andeq	r6, r1, r4, ror #10
   16474:	andeq	r6, r1, r4, ror #10
   16478:	andeq	r6, r1, r4, ror #10
   1647c:	andeq	r6, r1, r4, ror #10
   16480:	andeq	r6, r1, r4, ror #10
   16484:	andeq	r6, r1, r4, ror #10
   16488:	andeq	r6, r1, r4, ror #10
   1648c:	andeq	r6, r1, r4, ror #10
   16490:	andeq	r6, r1, r4, ror #10
   16494:	andeq	r6, r1, r4, ror #10
   16498:	andeq	r6, r1, r4, ror #10
   1649c:	andeq	r6, r1, r4, ror #10
   164a0:	andeq	r6, r1, r4, ror #10
   164a4:	andeq	r6, r1, r4, ror #10
   164a8:	andeq	r6, r1, r4, ror #10
   164ac:	andeq	r6, r1, r4, ror #10
   164b0:	andeq	r6, r1, r4, ror #10
   164b4:	andeq	r6, r1, r4, ror #10
   164b8:	andeq	r6, r1, r4, ror #10
   164bc:	andeq	r6, r1, r4, ror #10
   164c0:	andeq	r6, r1, r4, ror #10
   164c4:	andeq	r6, r1, r4, ror #10
   164c8:	andeq	r6, r1, r4, ror #10
   164cc:	andeq	r6, r1, r4, ror #10
   164d0:	andeq	r6, r1, r4, ror #10
   164d4:			; <UNDEFINED> instruction: 0x000167b4
   164d8:	andeq	r6, r1, r4, asr #11
   164dc:	andeq	r6, r1, r4, ror #10
   164e0:			; <UNDEFINED> instruction: 0x000167b4
   164e4:	andeq	r6, r1, r4, ror #10
   164e8:			; <UNDEFINED> instruction: 0x000167b4
   164ec:	andeq	r6, r1, r4, ror #10
   164f0:	andeq	r6, r1, r4, ror #10
   164f4:	andeq	r6, r1, r4, ror #10
   164f8:	andeq	r6, r1, r4, ror #10
   164fc:	andeq	r6, r1, r4, ror #10
   16500:	andeq	r6, r1, r4, ror #10
   16504:	andeq	r6, r1, r4, ror #10
   16508:	andeq	r6, r1, r4, ror #10
   1650c:	andeq	r6, r1, r4, ror #10
   16510:	andeq	r6, r1, r4, ror #10
   16514:	andeq	r6, r1, r4, ror #10
   16518:	andeq	r6, r1, r4, ror #10
   1651c:	andeq	r6, r1, r4, ror #10
   16520:	andeq	r6, r1, r4, ror #10
   16524:	andeq	r6, r1, r4, ror #10
   16528:	andeq	r6, r1, r4, ror #10
   1652c:	andeq	r6, r1, r4, ror #10
   16530:	andeq	r6, r1, r4, ror #10
   16534:	andeq	r6, r1, r4, ror #10
   16538:	andeq	r6, r1, r4, ror #10
   1653c:	andeq	r6, r1, r4, ror #10
   16540:	andeq	r6, r1, r4, ror #10
   16544:	andeq	r6, r1, r4, ror #10
   16548:	andeq	r6, r1, r4, ror #10
   1654c:	andeq	r6, r1, r4, ror #10
   16550:	andeq	r6, r1, r4, ror #10
   16554:	andeq	r6, r1, r4, lsr #11
   16558:			; <UNDEFINED> instruction: 0x000167b4
   1655c:	andeq	r6, r1, r4, lsr #11
   16560:	andeq	r6, r1, r4, lsl #11
   16564:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16568:	cmp	r0, #0
   1656c:	beq	16848 <__assert_fail@plt+0x5514>
   16570:	ldr	r0, [fp, #16]
   16574:	cmp	r0, #0
   16578:	mov	r0, r5
   1657c:	bne	16858 <__assert_fail@plt+0x5524>
   16580:	b	16878 <__assert_fail@plt+0x5544>
   16584:	mov	r4, #0
   16588:	cmp	r7, #0
   1658c:	beq	167b0 <__assert_fail@plt+0x547c>
   16590:	mov	r8, #0
   16594:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16598:	cmp	r0, #0
   1659c:	bne	16570 <__assert_fail@plt+0x523c>
   165a0:	b	16848 <__assert_fail@plt+0x5514>
   165a4:	mov	r4, #0
   165a8:	cmn	lr, #1
   165ac:	beq	16788 <__assert_fail@plt+0x5454>
   165b0:	cmp	r7, #0
   165b4:	bne	16590 <__assert_fail@plt+0x525c>
   165b8:	cmp	lr, #1
   165bc:	beq	167b0 <__assert_fail@plt+0x547c>
   165c0:	b	16590 <__assert_fail@plt+0x525c>
   165c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   165c8:	cmp	r0, #2
   165cc:	bne	167e0 <__assert_fail@plt+0x54ac>
   165d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   165d4:	tst	r0, #1
   165d8:	bne	17040 <__assert_fail@plt+0x5d0c>
   165dc:	mov	r8, #0
   165e0:	mov	r0, #92	; 0x5c
   165e4:	mov	r4, #0
   165e8:	cmp	r8, #0
   165ec:	beq	16800 <__assert_fail@plt+0x54cc>
   165f0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   165f4:	b	168f4 <__assert_fail@plt+0x55c0>
   165f8:	mov	r0, #102	; 0x66
   165fc:	b	16834 <__assert_fail@plt+0x5500>
   16600:	mov	r2, #116	; 0x74
   16604:	ldr	r0, [sp, #60]	; 0x3c
   16608:	tst	r0, #1
   1660c:	mov	r0, r2
   16610:	bne	16834 <__assert_fail@plt+0x5500>
   16614:	b	17040 <__assert_fail@plt+0x5d0c>
   16618:	mov	r0, #98	; 0x62
   1661c:	b	16834 <__assert_fail@plt+0x5500>
   16620:	mov	r2, #114	; 0x72
   16624:	ldr	r0, [sp, #60]	; 0x3c
   16628:	tst	r0, #1
   1662c:	mov	r0, r2
   16630:	bne	16834 <__assert_fail@plt+0x5500>
   16634:	b	17040 <__assert_fail@plt+0x5d0c>
   16638:	ldr	r0, [sp, #80]	; 0x50
   1663c:	tst	r0, #1
   16640:	beq	1691c <__assert_fail@plt+0x55e8>
   16644:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16648:	tst	r0, #1
   1664c:	bne	17168 <__assert_fail@plt+0x5e34>
   16650:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16654:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16658:	cmp	r0, #2
   1665c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   16660:	movwne	r0, #1
   16664:	orr	r0, r0, r2
   16668:	tst	r0, #1
   1666c:	beq	16c14 <__assert_fail@plt+0x58e0>
   16670:	mov	r0, r9
   16674:	b	16c48 <__assert_fail@plt+0x5914>
   16678:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1667c:	mov	r8, #0
   16680:	mov	r5, #63	; 0x3f
   16684:	cmp	r0, #5
   16688:	beq	16ad0 <__assert_fail@plt+0x579c>
   1668c:	cmp	r0, #2
   16690:	bne	16b80 <__assert_fail@plt+0x584c>
   16694:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16698:	tst	r0, #1
   1669c:	bne	17040 <__assert_fail@plt+0x5d0c>
   166a0:	mov	r4, #0
   166a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   166a8:	cmp	r0, #0
   166ac:	bne	16570 <__assert_fail@plt+0x523c>
   166b0:	b	16848 <__assert_fail@plt+0x5514>
   166b4:	mov	r0, #118	; 0x76
   166b8:	b	16834 <__assert_fail@plt+0x5500>
   166bc:	mov	r0, #1
   166c0:	mov	r5, #39	; 0x27
   166c4:	str	r0, [sp, #52]	; 0x34
   166c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   166cc:	cmp	r0, #2
   166d0:	bne	16744 <__assert_fail@plt+0x5410>
   166d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   166d8:	tst	r0, #1
   166dc:	bne	17040 <__assert_fail@plt+0x5d0c>
   166e0:	ldr	r2, [sp, #48]	; 0x30
   166e4:	clz	r1, sl
   166e8:	mov	r8, #0
   166ec:	lsr	r1, r1, #5
   166f0:	cmp	r2, #0
   166f4:	mov	r0, r2
   166f8:	movwne	r0, #1
   166fc:	orrs	r0, r0, r1
   16700:	moveq	r2, sl
   16704:	moveq	sl, r0
   16708:	cmp	r9, sl
   1670c:	str	r2, [sp, #48]	; 0x30
   16710:	movcc	r0, #39	; 0x27
   16714:	strbcc	r0, [r6, r9]
   16718:	add	r0, r9, #1
   1671c:	cmp	r0, sl
   16720:	movcc	r1, #92	; 0x5c
   16724:	strbcc	r1, [r6, r0]
   16728:	add	r0, r9, #2
   1672c:	add	r9, r9, #3
   16730:	cmp	r0, sl
   16734:	movcc	r1, #39	; 0x27
   16738:	strbcc	r1, [r6, r0]
   1673c:	mov	r0, #0
   16740:	str	r0, [fp, #-48]	; 0xffffffd0
   16744:	mov	r4, #1
   16748:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1674c:	cmp	r0, #0
   16750:	bne	16570 <__assert_fail@plt+0x523c>
   16754:	b	16848 <__assert_fail@plt+0x5514>
   16758:	ldr	r0, [sp, #32]
   1675c:	cmp	r0, #1
   16760:	bne	1694c <__assert_fail@plt+0x5618>
   16764:	str	lr, [sp, #84]	; 0x54
   16768:	bl	111e4 <__ctype_b_loc@plt>
   1676c:	ldr	r0, [r0]
   16770:	ldr	ip, [fp, #-84]	; 0xffffffac
   16774:	mov	r1, #1
   16778:	add	r0, r0, r5, lsl #1
   1677c:	ldrb	r0, [r0, #1]
   16780:	ubfx	r4, r0, #6, #1
   16784:	b	16d44 <__assert_fail@plt+0x5a10>
   16788:	cmp	r7, #0
   1678c:	ldrbeq	r0, [ip, #1]
   16790:	cmpeq	r0, #0
   16794:	beq	167b0 <__assert_fail@plt+0x547c>
   16798:	mvn	lr, #0
   1679c:	mov	r8, #0
   167a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   167a4:	cmp	r0, #0
   167a8:	bne	16570 <__assert_fail@plt+0x523c>
   167ac:	b	16848 <__assert_fail@plt+0x5514>
   167b0:	mov	r1, #1
   167b4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   167b8:	cmp	r0, #2
   167bc:	bne	167cc <__assert_fail@plt+0x5498>
   167c0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   167c4:	tst	r0, #1
   167c8:	bne	17040 <__assert_fail@plt+0x5d0c>
   167cc:	mov	r4, r1
   167d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   167d4:	cmp	r0, #0
   167d8:	bne	16570 <__assert_fail@plt+0x523c>
   167dc:	b	16848 <__assert_fail@plt+0x5514>
   167e0:	ldr	r1, [sp, #40]	; 0x28
   167e4:	mov	r8, #0
   167e8:	mov	r0, #92	; 0x5c
   167ec:	cmp	r1, #0
   167f0:	beq	16834 <__assert_fail@plt+0x5500>
   167f4:	mov	r4, #0
   167f8:	cmp	r8, #0
   167fc:	bne	165f0 <__assert_fail@plt+0x52bc>
   16800:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16804:	tst	r2, #1
   16808:	beq	168f4 <__assert_fail@plt+0x55c0>
   1680c:	cmp	r9, sl
   16810:	movcc	r1, #39	; 0x27
   16814:	strbcc	r1, [r6, r9]
   16818:	add	r1, r9, #1
   1681c:	add	r9, r9, #2
   16820:	cmp	r1, sl
   16824:	movcc	r2, #39	; 0x27
   16828:	strbcc	r2, [r6, r1]
   1682c:	mov	r2, #0
   16830:	b	168f4 <__assert_fail@plt+0x55c0>
   16834:	ldr	r1, [sp, #80]	; 0x50
   16838:	mov	r4, #0
   1683c:	mov	r8, #0
   16840:	tst	r1, #1
   16844:	bne	16884 <__assert_fail@plt+0x5550>
   16848:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1684c:	cmp	r0, #0
   16850:	mov	r0, r5
   16854:	beq	16878 <__assert_fail@plt+0x5544>
   16858:	ldr	r1, [fp, #16]
   1685c:	ubfx	r0, r5, #5, #3
   16860:	mov	r2, #1
   16864:	ldr	r0, [r1, r0, lsl #2]
   16868:	and	r1, r5, #31
   1686c:	tst	r0, r2, lsl r1
   16870:	mov	r0, r5
   16874:	bne	16884 <__assert_fail@plt+0x5550>
   16878:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1687c:	cmp	r1, #0
   16880:	beq	16cdc <__assert_fail@plt+0x59a8>
   16884:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16888:	tst	r1, #1
   1688c:	bne	17020 <__assert_fail@plt+0x5cec>
   16890:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16894:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16898:	cmp	r1, #2
   1689c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   168a0:	movwne	r1, #1
   168a4:	orr	r1, r1, r2
   168a8:	tst	r1, #1
   168ac:	bne	168e4 <__assert_fail@plt+0x55b0>
   168b0:	cmp	r9, sl
   168b4:	movcc	r1, #39	; 0x27
   168b8:	strbcc	r1, [r6, r9]
   168bc:	add	r1, r9, #1
   168c0:	cmp	r1, sl
   168c4:	movcc	r2, #36	; 0x24
   168c8:	strbcc	r2, [r6, r1]
   168cc:	add	r1, r9, #2
   168d0:	add	r9, r9, #3
   168d4:	cmp	r1, sl
   168d8:	movcc	r2, #39	; 0x27
   168dc:	strbcc	r2, [r6, r1]
   168e0:	mov	r2, #1
   168e4:	cmp	r9, sl
   168e8:	movcc	r1, #92	; 0x5c
   168ec:	strbcc	r1, [r6, r9]
   168f0:	add	r9, r9, #1
   168f4:	cmp	r9, sl
   168f8:	add	r7, r7, #1
   168fc:	strbcc	r0, [r6, r9]
   16900:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16904:	add	r9, r9, #1
   16908:	and	r0, r0, r4
   1690c:	mov	r4, r0
   16910:	cmn	lr, #1
   16914:	bne	16288 <__assert_fail@plt+0x4f54>
   16918:	b	16294 <__assert_fail@plt+0x4f60>
   1691c:	ldr	r0, [sp, #28]
   16920:	mov	r4, #0
   16924:	mov	r8, #0
   16928:	mov	r5, #0
   1692c:	cmp	r0, #0
   16930:	beq	16848 <__assert_fail@plt+0x5514>
   16934:	ldr	r4, [fp, #-52]	; 0xffffffcc
   16938:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1693c:	add	r7, r7, #1
   16940:	cmn	lr, #1
   16944:	bne	16288 <__assert_fail@plt+0x4f54>
   16948:	b	16294 <__assert_fail@plt+0x4f60>
   1694c:	mov	r0, #0
   16950:	cmn	lr, #1
   16954:	str	r0, [fp, #-36]	; 0xffffffdc
   16958:	str	r0, [fp, #-40]	; 0xffffffd8
   1695c:	bne	16970 <__assert_fail@plt+0x563c>
   16960:	mov	r0, ip
   16964:	bl	111fc <strlen@plt>
   16968:	ldr	ip, [fp, #-84]	; 0xffffffac
   1696c:	mov	lr, r0
   16970:	ldr	r0, [sp, #36]	; 0x24
   16974:	str	sl, [sp, #56]	; 0x38
   16978:	str	lr, [sp, #84]	; 0x54
   1697c:	cmp	r0, #0
   16980:	beq	16b98 <__assert_fail@plt+0x5864>
   16984:	add	r0, ip, r7
   16988:	mov	r4, #1
   1698c:	mov	r6, #0
   16990:	sub	sl, fp, #40	; 0x28
   16994:	str	r0, [sp, #20]
   16998:	str	r6, [sp, #64]	; 0x40
   1699c:	add	r6, r6, r7
   169a0:	sub	r0, fp, #44	; 0x2c
   169a4:	mov	r3, sl
   169a8:	add	r1, ip, r6
   169ac:	sub	r2, lr, r6
   169b0:	bl	19924 <__assert_fail@plt+0x85f0>
   169b4:	cmn	r0, #2
   169b8:	beq	16cf4 <__assert_fail@plt+0x59c0>
   169bc:	ldr	sl, [sp, #56]	; 0x38
   169c0:	cmn	r0, #1
   169c4:	beq	16ce8 <__assert_fail@plt+0x59b4>
   169c8:	cmp	r0, #0
   169cc:	beq	16cec <__assert_fail@plt+0x59b8>
   169d0:	cmp	r0, #2
   169d4:	bcc	16a94 <__assert_fail@plt+0x5760>
   169d8:	ldr	r1, [sp, #64]	; 0x40
   169dc:	ldr	r2, [sp, #20]
   169e0:	add	r1, r2, r1
   169e4:	mov	r2, #1
   169e8:	ldrb	r3, [r1, r2]
   169ec:	sub	r3, r3, #91	; 0x5b
   169f0:	cmp	r3, #33	; 0x21
   169f4:	bhi	16a88 <__assert_fail@plt+0x5754>
   169f8:	add	r6, pc, #0
   169fc:	ldr	pc, [r6, r3, lsl #2]
   16a00:	andeq	r7, r1, ip, asr #32
   16a04:	andeq	r7, r1, ip, asr #32
   16a08:	andeq	r6, r1, r8, lsl #21
   16a0c:	andeq	r7, r1, ip, asr #32
   16a10:	andeq	r6, r1, r8, lsl #21
   16a14:	andeq	r7, r1, ip, asr #32
   16a18:	andeq	r6, r1, r8, lsl #21
   16a1c:	andeq	r6, r1, r8, lsl #21
   16a20:	andeq	r6, r1, r8, lsl #21
   16a24:	andeq	r6, r1, r8, lsl #21
   16a28:	andeq	r6, r1, r8, lsl #21
   16a2c:	andeq	r6, r1, r8, lsl #21
   16a30:	andeq	r6, r1, r8, lsl #21
   16a34:	andeq	r6, r1, r8, lsl #21
   16a38:	andeq	r6, r1, r8, lsl #21
   16a3c:	andeq	r6, r1, r8, lsl #21
   16a40:	andeq	r6, r1, r8, lsl #21
   16a44:	andeq	r6, r1, r8, lsl #21
   16a48:	andeq	r6, r1, r8, lsl #21
   16a4c:	andeq	r6, r1, r8, lsl #21
   16a50:	andeq	r6, r1, r8, lsl #21
   16a54:	andeq	r6, r1, r8, lsl #21
   16a58:	andeq	r6, r1, r8, lsl #21
   16a5c:	andeq	r6, r1, r8, lsl #21
   16a60:	andeq	r6, r1, r8, lsl #21
   16a64:	andeq	r6, r1, r8, lsl #21
   16a68:	andeq	r6, r1, r8, lsl #21
   16a6c:	andeq	r6, r1, r8, lsl #21
   16a70:	andeq	r6, r1, r8, lsl #21
   16a74:	andeq	r6, r1, r8, lsl #21
   16a78:	andeq	r6, r1, r8, lsl #21
   16a7c:	andeq	r6, r1, r8, lsl #21
   16a80:	andeq	r6, r1, r8, lsl #21
   16a84:	andeq	r7, r1, ip, asr #32
   16a88:	add	r2, r2, #1
   16a8c:	cmp	r2, r0
   16a90:	bcc	169e8 <__assert_fail@plt+0x56b4>
   16a94:	ldr	r6, [sp, #64]	; 0x40
   16a98:	add	r6, r0, r6
   16a9c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16aa0:	bl	11130 <iswprint@plt>
   16aa4:	cmp	r0, #0
   16aa8:	sub	sl, fp, #40	; 0x28
   16aac:	movwne	r0, #1
   16ab0:	and	r4, r4, r0
   16ab4:	mov	r0, sl
   16ab8:	bl	110e8 <mbsinit@plt>
   16abc:	ldr	ip, [fp, #-84]	; 0xffffffac
   16ac0:	ldr	lr, [sp, #84]	; 0x54
   16ac4:	cmp	r0, #0
   16ac8:	beq	16998 <__assert_fail@plt+0x5664>
   16acc:	b	16d38 <__assert_fail@plt+0x5a04>
   16ad0:	ldr	r0, [sp, #24]
   16ad4:	cmp	r0, #0
   16ad8:	beq	16b80 <__assert_fail@plt+0x584c>
   16adc:	add	r0, r7, #2
   16ae0:	cmp	r0, lr
   16ae4:	bcs	16b80 <__assert_fail@plt+0x584c>
   16ae8:	add	r1, ip, r7
   16aec:	ldrb	r1, [r1, #1]
   16af0:	cmp	r1, #63	; 0x3f
   16af4:	bne	16b80 <__assert_fail@plt+0x584c>
   16af8:	ldrb	r5, [ip, r0]
   16afc:	sub	r1, r5, #33	; 0x21
   16b00:	cmp	r1, #29
   16b04:	bhi	16b80 <__assert_fail@plt+0x584c>
   16b08:	movw	r3, #20929	; 0x51c1
   16b0c:	mov	r2, #1
   16b10:	movt	r3, #14336	; 0x3800
   16b14:	tst	r3, r2, lsl r1
   16b18:	beq	16b80 <__assert_fail@plt+0x584c>
   16b1c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16b20:	tst	r1, #1
   16b24:	bne	17170 <__assert_fail@plt+0x5e3c>
   16b28:	cmp	r9, sl
   16b2c:	mov	r7, r0
   16b30:	mov	r4, #0
   16b34:	movcc	r1, #63	; 0x3f
   16b38:	strbcc	r1, [r6, r9]
   16b3c:	add	r1, r9, #1
   16b40:	cmp	r1, sl
   16b44:	movcc	r2, #34	; 0x22
   16b48:	strbcc	r2, [r6, r1]
   16b4c:	add	r1, r9, #2
   16b50:	cmp	r1, sl
   16b54:	movcc	r2, #34	; 0x22
   16b58:	strbcc	r2, [r6, r1]
   16b5c:	add	r1, r9, #3
   16b60:	add	r9, r9, #4
   16b64:	cmp	r1, sl
   16b68:	movcc	r2, #63	; 0x3f
   16b6c:	strbcc	r2, [r6, r1]
   16b70:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16b74:	cmp	r0, #0
   16b78:	bne	16570 <__assert_fail@plt+0x523c>
   16b7c:	b	16848 <__assert_fail@plt+0x5514>
   16b80:	mov	r5, #63	; 0x3f
   16b84:	mov	r4, #0
   16b88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16b8c:	cmp	r0, #0
   16b90:	bne	16570 <__assert_fail@plt+0x523c>
   16b94:	b	16848 <__assert_fail@plt+0x5514>
   16b98:	mov	r4, #1
   16b9c:	mov	r6, #0
   16ba0:	sub	sl, fp, #40	; 0x28
   16ba4:	str	r6, [sp, #64]	; 0x40
   16ba8:	add	r6, r6, r7
   16bac:	sub	r0, fp, #44	; 0x2c
   16bb0:	mov	r3, sl
   16bb4:	add	r1, ip, r6
   16bb8:	sub	r2, lr, r6
   16bbc:	bl	19924 <__assert_fail@plt+0x85f0>
   16bc0:	cmn	r0, #2
   16bc4:	beq	16cf4 <__assert_fail@plt+0x59c0>
   16bc8:	cmn	r0, #1
   16bcc:	beq	16ce8 <__assert_fail@plt+0x59b4>
   16bd0:	ldr	r6, [sp, #64]	; 0x40
   16bd4:	cmp	r0, #0
   16bd8:	beq	16d34 <__assert_fail@plt+0x5a00>
   16bdc:	add	r6, r0, r6
   16be0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16be4:	bl	11130 <iswprint@plt>
   16be8:	cmp	r0, #0
   16bec:	sub	sl, fp, #40	; 0x28
   16bf0:	movwne	r0, #1
   16bf4:	and	r4, r4, r0
   16bf8:	mov	r0, sl
   16bfc:	bl	110e8 <mbsinit@plt>
   16c00:	ldr	ip, [fp, #-84]	; 0xffffffac
   16c04:	ldr	lr, [sp, #84]	; 0x54
   16c08:	cmp	r0, #0
   16c0c:	beq	16ba4 <__assert_fail@plt+0x5870>
   16c10:	b	16d38 <__assert_fail@plt+0x5a04>
   16c14:	cmp	r9, sl
   16c18:	mov	r2, #1
   16c1c:	movcc	r0, #39	; 0x27
   16c20:	strbcc	r0, [r6, r9]
   16c24:	add	r0, r9, #1
   16c28:	cmp	r0, sl
   16c2c:	movcc	r1, #36	; 0x24
   16c30:	strbcc	r1, [r6, r0]
   16c34:	add	r0, r9, #2
   16c38:	cmp	r0, sl
   16c3c:	movcc	r1, #39	; 0x27
   16c40:	strbcc	r1, [r6, r0]
   16c44:	add	r0, r9, #3
   16c48:	cmp	r0, sl
   16c4c:	add	r9, r0, #1
   16c50:	str	r2, [fp, #-48]	; 0xffffffd0
   16c54:	movcc	r1, #92	; 0x5c
   16c58:	strbcc	r1, [r6, r0]
   16c5c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16c60:	cmp	r1, #2
   16c64:	beq	16cc4 <__assert_fail@plt+0x5990>
   16c68:	add	r1, r7, #1
   16c6c:	mov	r4, #0
   16c70:	mov	r8, #1
   16c74:	mov	r5, #48	; 0x30
   16c78:	cmp	r1, lr
   16c7c:	bcs	16564 <__assert_fail@plt+0x5230>
   16c80:	ldrb	r1, [ip, r1]
   16c84:	sub	r1, r1, #48	; 0x30
   16c88:	uxtb	r1, r1
   16c8c:	cmp	r1, #9
   16c90:	bhi	16564 <__assert_fail@plt+0x5230>
   16c94:	cmp	r9, sl
   16c98:	movcc	r1, #48	; 0x30
   16c9c:	strbcc	r1, [r6, r9]
   16ca0:	add	r1, r0, #2
   16ca4:	add	r9, r0, #3
   16ca8:	cmp	r1, sl
   16cac:	movcc	r2, #48	; 0x30
   16cb0:	strbcc	r2, [r6, r1]
   16cb4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16cb8:	cmp	r0, #0
   16cbc:	bne	16570 <__assert_fail@plt+0x523c>
   16cc0:	b	16848 <__assert_fail@plt+0x5514>
   16cc4:	mov	r0, #48	; 0x30
   16cc8:	mov	r8, #1
   16ccc:	mov	r4, #0
   16cd0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16cd4:	cmp	r1, #0
   16cd8:	bne	16884 <__assert_fail@plt+0x5550>
   16cdc:	cmp	r8, #0
   16ce0:	beq	16800 <__assert_fail@plt+0x54cc>
   16ce4:	b	165f0 <__assert_fail@plt+0x52bc>
   16ce8:	mov	r4, #0
   16cec:	ldr	ip, [fp, #-84]	; 0xffffffac
   16cf0:	b	16d2c <__assert_fail@plt+0x59f8>
   16cf4:	ldr	r1, [sp, #84]	; 0x54
   16cf8:	ldr	ip, [fp, #-84]	; 0xffffffac
   16cfc:	mov	r4, #0
   16d00:	cmp	r6, r1
   16d04:	bcs	16d2c <__assert_fail@plt+0x59f8>
   16d08:	ldrb	r0, [ip, r6]
   16d0c:	cmp	r0, #0
   16d10:	beq	16d2c <__assert_fail@plt+0x59f8>
   16d14:	ldr	r0, [sp, #64]	; 0x40
   16d18:	add	r0, r0, #1
   16d1c:	add	r6, r0, r7
   16d20:	str	r0, [sp, #64]	; 0x40
   16d24:	cmp	r6, r1
   16d28:	bcc	16d08 <__assert_fail@plt+0x59d4>
   16d2c:	ldr	r6, [sp, #64]	; 0x40
   16d30:	b	16d38 <__assert_fail@plt+0x5a04>
   16d34:	ldr	ip, [fp, #-84]	; 0xffffffac
   16d38:	mov	r1, r6
   16d3c:	ldr	r6, [sp, #76]	; 0x4c
   16d40:	ldr	sl, [sp, #56]	; 0x38
   16d44:	ldr	r0, [sp, #44]	; 0x2c
   16d48:	cmp	r1, #1
   16d4c:	orr	r2, r4, r0
   16d50:	mov	r0, r1
   16d54:	bhi	16d74 <__assert_fail@plt+0x5a40>
   16d58:	tst	r2, #1
   16d5c:	beq	16d74 <__assert_fail@plt+0x5a40>
   16d60:	ldr	lr, [sp, #84]	; 0x54
   16d64:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16d68:	cmp	r0, #0
   16d6c:	bne	16570 <__assert_fail@plt+0x523c>
   16d70:	b	16848 <__assert_fail@plt+0x5514>
   16d74:	str	r2, [sp, #64]	; 0x40
   16d78:	add	r0, r0, r7
   16d7c:	add	r1, r7, #1
   16d80:	ldr	lr, [sp, #84]	; 0x54
   16d84:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16d88:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16d8c:	mov	r3, #0
   16d90:	str	r0, [sp, #56]	; 0x38
   16d94:	ldr	r0, [sp, #64]	; 0x40
   16d98:	tst	r0, #1
   16d9c:	bne	16e84 <__assert_fail@plt+0x5b50>
   16da0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16da4:	tst	r0, #1
   16da8:	bne	17024 <__assert_fail@plt+0x5cf0>
   16dac:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16db0:	cmp	r7, #2
   16db4:	movwne	r3, #1
   16db8:	orr	r3, r3, r2
   16dbc:	tst	r3, #1
   16dc0:	bne	16df8 <__assert_fail@plt+0x5ac4>
   16dc4:	cmp	r9, sl
   16dc8:	add	r3, r9, #1
   16dcc:	movcc	r2, #39	; 0x27
   16dd0:	strbcc	r2, [r6, r9]
   16dd4:	cmp	r3, sl
   16dd8:	movcc	r2, #36	; 0x24
   16ddc:	strbcc	r2, [r6, r3]
   16de0:	add	r3, r9, #2
   16de4:	add	r9, r9, #3
   16de8:	cmp	r3, sl
   16dec:	movcc	r2, #39	; 0x27
   16df0:	strbcc	r2, [r6, r3]
   16df4:	mov	r2, #1
   16df8:	cmp	r9, sl
   16dfc:	mov	r0, r2
   16e00:	movcc	r3, #92	; 0x5c
   16e04:	strbcc	r3, [r6, r9]
   16e08:	add	r3, r9, #1
   16e0c:	cmp	r3, sl
   16e10:	andcc	r7, r5, #192	; 0xc0
   16e14:	movcc	r2, #48	; 0x30
   16e18:	orrcc	r7, r2, r7, lsr #6
   16e1c:	strbcc	r7, [r6, r3]
   16e20:	add	r3, r9, #2
   16e24:	add	r9, r9, #3
   16e28:	cmp	r3, sl
   16e2c:	lsrcc	r7, r5, #3
   16e30:	movcc	r2, #6
   16e34:	bficc	r7, r2, #3, #29
   16e38:	mov	r2, #6
   16e3c:	strbcc	r7, [r6, r3]
   16e40:	bfi	r5, r2, #3, #29
   16e44:	mov	r3, #1
   16e48:	mov	r2, r0
   16e4c:	ldr	r0, [sp, #56]	; 0x38
   16e50:	and	r8, r3, #1
   16e54:	cmp	r0, r1
   16e58:	bhi	16eb8 <__assert_fail@plt+0x5b84>
   16e5c:	b	16ef8 <__assert_fail@plt+0x5bc4>
   16e60:	cmp	r9, sl
   16e64:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16e68:	strbcc	r5, [r6, r9]
   16e6c:	add	r9, r9, #1
   16e70:	ldrb	r5, [ip, r1]
   16e74:	add	r1, r1, #1
   16e78:	ldr	r0, [sp, #64]	; 0x40
   16e7c:	tst	r0, #1
   16e80:	beq	16da0 <__assert_fail@plt+0x5a6c>
   16e84:	ldr	r7, [fp, #-56]	; 0xffffffc8
   16e88:	tst	r7, #1
   16e8c:	beq	16ea0 <__assert_fail@plt+0x5b6c>
   16e90:	cmp	r9, sl
   16e94:	movcc	r7, #92	; 0x5c
   16e98:	strbcc	r7, [r6, r9]
   16e9c:	add	r9, r9, #1
   16ea0:	mov	r7, #0
   16ea4:	str	r7, [fp, #-56]	; 0xffffffc8
   16ea8:	ldr	r0, [sp, #56]	; 0x38
   16eac:	and	r8, r3, #1
   16eb0:	cmp	r0, r1
   16eb4:	bls	16ef8 <__assert_fail@plt+0x5bc4>
   16eb8:	cmp	r8, #0
   16ebc:	mvn	r7, r2
   16ec0:	movwne	r8, #1
   16ec4:	orr	r7, r7, r8
   16ec8:	tst	r7, #1
   16ecc:	bne	16e60 <__assert_fail@plt+0x5b2c>
   16ed0:	cmp	r9, sl
   16ed4:	movcc	r7, #39	; 0x27
   16ed8:	strbcc	r7, [r6, r9]
   16edc:	add	r7, r9, #1
   16ee0:	add	r9, r9, #2
   16ee4:	cmp	r7, sl
   16ee8:	movcc	r2, #39	; 0x27
   16eec:	strbcc	r2, [r6, r7]
   16ef0:	mov	r2, #0
   16ef4:	b	16e60 <__assert_fail@plt+0x5b2c>
   16ef8:	cmp	r8, #0
   16efc:	sub	r7, r1, #1
   16f00:	mov	r0, r5
   16f04:	str	r2, [fp, #-48]	; 0xffffffd0
   16f08:	movwne	r8, #1
   16f0c:	cmp	r8, #0
   16f10:	beq	16800 <__assert_fail@plt+0x54cc>
   16f14:	b	165f0 <__assert_fail@plt+0x52bc>
   16f18:	mov	lr, r7
   16f1c:	b	16f24 <__assert_fail@plt+0x5bf0>
   16f20:	mvn	lr, #0
   16f24:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16f28:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16f2c:	eor	r0, r7, #2
   16f30:	orr	r0, r0, r9
   16f34:	clz	r0, r0
   16f38:	lsr	r0, r0, #5
   16f3c:	tst	r1, r0
   16f40:	bne	17040 <__assert_fail@plt+0x5d0c>
   16f44:	mov	r0, r1
   16f48:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16f4c:	cmp	r7, #2
   16f50:	movwne	r1, #1
   16f54:	orr	r0, r0, r1
   16f58:	tst	r0, #1
   16f5c:	ldreq	r0, [sp, #52]	; 0x34
   16f60:	streq	lr, [sp, #84]	; 0x54
   16f64:	eoreq	r0, r0, #1
   16f68:	tsteq	r0, #1
   16f6c:	bne	17104 <__assert_fail@plt+0x5dd0>
   16f70:	tst	r4, #1
   16f74:	bne	170c0 <__assert_fail@plt+0x5d8c>
   16f78:	ldr	r6, [sp, #48]	; 0x30
   16f7c:	mov	r8, #0
   16f80:	cmp	r6, #0
   16f84:	beq	170fc <__assert_fail@plt+0x5dc8>
   16f88:	ldr	r0, [sp, #80]	; 0x50
   16f8c:	mov	r1, #0
   16f90:	cmp	sl, #0
   16f94:	mov	r4, #0
   16f98:	str	r1, [fp, #-72]	; 0xffffffb8
   16f9c:	beq	15e90 <__assert_fail@plt+0x4b5c>
   16fa0:	b	17104 <__assert_fail@plt+0x5dd0>
   16fa4:	ldrb	r1, [r0, #3]
   16fa8:	cmp	r1, #56	; 0x38
   16fac:	ldrbeq	r1, [r0, #4]
   16fb0:	cmpeq	r1, #48	; 0x30
   16fb4:	bne	16088 <__assert_fail@plt+0x4d54>
   16fb8:	ldrb	r1, [r0, #5]
   16fbc:	cmp	r1, #51	; 0x33
   16fc0:	ldrbeq	r1, [r0, #6]
   16fc4:	cmpeq	r1, #48	; 0x30
   16fc8:	bne	16088 <__assert_fail@plt+0x4d54>
   16fcc:	ldrb	r0, [r0, #7]
   16fd0:	cmp	r0, #0
   16fd4:	movw	r0, #46164	; 0xb454
   16fd8:	movt	r0, #1
   16fdc:	str	r0, [sp, #68]	; 0x44
   16fe0:	bne	16088 <__assert_fail@plt+0x4d54>
   16fe4:	b	160a4 <__assert_fail@plt+0x4d70>
   16fe8:	ldrb	r1, [r0, #4]
   16fec:	cmp	r1, #48	; 0x30
   16ff0:	ldrbeq	r1, [r0, #5]
   16ff4:	cmpeq	r1, #51	; 0x33
   16ff8:	bne	1616c <__assert_fail@plt+0x4e38>
   16ffc:	ldrb	r1, [r0, #6]
   17000:	cmp	r1, #48	; 0x30
   17004:	ldrbeq	r0, [r0, #7]
   17008:	cmpeq	r0, #0
   1700c:	bne	1616c <__assert_fail@plt+0x4e38>
   17010:	movw	r0, #46168	; 0xb458
   17014:	movt	r0, #1
   17018:	str	r0, [sp, #72]	; 0x48
   1701c:	b	1618c <__assert_fail@plt+0x4e58>
   17020:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17024:	ldr	r2, [sp, #80]	; 0x50
   17028:	b	17060 <__assert_fail@plt+0x5d2c>
   1702c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17030:	mov	r2, #1
   17034:	mov	lr, r4
   17038:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1703c:	b	17060 <__assert_fail@plt+0x5d2c>
   17040:	ldr	r2, [sp, #80]	; 0x50
   17044:	mov	r7, #2
   17048:	b	17060 <__assert_fail@plt+0x5d2c>
   1704c:	ldr	r6, [sp, #76]	; 0x4c
   17050:	ldr	ip, [fp, #-84]	; 0xffffffac
   17054:	ldr	lr, [sp, #84]	; 0x54
   17058:	ldr	r2, [sp, #80]	; 0x50
   1705c:	mov	r7, #2
   17060:	mov	r0, #0
   17064:	ldr	r1, [fp, #12]
   17068:	tst	r2, #1
   1706c:	mov	r2, r7
   17070:	mov	r3, lr
   17074:	str	r0, [sp, #8]
   17078:	ldr	r0, [sp, #68]	; 0x44
   1707c:	movwne	r2, #4
   17080:	cmp	r7, #2
   17084:	movne	r2, r7
   17088:	str	r2, [sp]
   1708c:	mov	r2, ip
   17090:	bic	r1, r1, #2
   17094:	str	r0, [sp, #12]
   17098:	ldr	r0, [sp, #72]	; 0x48
   1709c:	str	r1, [sp, #4]
   170a0:	mov	r1, sl
   170a4:	str	r0, [sp, #16]
   170a8:	mov	r0, r6
   170ac:	bl	15e14 <__assert_fail@plt+0x4ae0>
   170b0:	mov	r9, r0
   170b4:	mov	r0, r9
   170b8:	sub	sp, fp, #28
   170bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170c0:	mov	r0, #5
   170c4:	ldr	r1, [sp, #48]	; 0x30
   170c8:	ldr	r2, [fp, #-84]	; 0xffffffac
   170cc:	ldr	r3, [sp, #84]	; 0x54
   170d0:	str	r0, [sp]
   170d4:	ldr	r0, [fp, #12]
   170d8:	str	r0, [sp, #4]
   170dc:	ldr	r0, [fp, #16]
   170e0:	str	r0, [sp, #8]
   170e4:	ldr	r0, [sp, #68]	; 0x44
   170e8:	str	r0, [sp, #12]
   170ec:	ldr	r0, [sp, #72]	; 0x48
   170f0:	str	r0, [sp, #16]
   170f4:	ldr	r0, [sp, #76]	; 0x4c
   170f8:	b	170ac <__assert_fail@plt+0x5d78>
   170fc:	mov	r0, #0
   17100:	str	r0, [fp, #-72]	; 0xffffffb8
   17104:	ldr	r1, [sp, #92]	; 0x5c
   17108:	cmp	r1, #0
   1710c:	beq	1714c <__assert_fail@plt+0x5e18>
   17110:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17114:	ldr	r2, [sp, #76]	; 0x4c
   17118:	tst	r0, #1
   1711c:	bne	17150 <__assert_fail@plt+0x5e1c>
   17120:	ldrb	r0, [r1]
   17124:	cmp	r0, #0
   17128:	beq	17150 <__assert_fail@plt+0x5e1c>
   1712c:	add	r1, r1, #1
   17130:	cmp	r9, sl
   17134:	strbcc	r0, [r2, r9]
   17138:	add	r9, r9, #1
   1713c:	ldrb	r0, [r1], #1
   17140:	cmp	r0, #0
   17144:	bne	17130 <__assert_fail@plt+0x5dfc>
   17148:	b	17150 <__assert_fail@plt+0x5e1c>
   1714c:	ldr	r2, [sp, #76]	; 0x4c
   17150:	cmp	r9, sl
   17154:	movcc	r0, #0
   17158:	strbcc	r0, [r2, r9]
   1715c:	mov	r0, r9
   17160:	sub	sp, fp, #28
   17164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17168:	mov	r2, #1
   1716c:	b	17038 <__assert_fail@plt+0x5d04>
   17170:	ldr	r2, [sp, #80]	; 0x50
   17174:	mov	r7, #5
   17178:	b	17060 <__assert_fail@plt+0x5d2c>
   1717c:	bl	1131c <abort@plt>
   17180:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17184:	add	fp, sp, #28
   17188:	sub	sp, sp, #28
   1718c:	movw	r5, #49712	; 0xc230
   17190:	cmp	r2, #0
   17194:	mov	r4, r1
   17198:	mov	r7, r0
   1719c:	str	r0, [sp, #20]
   171a0:	movt	r5, #2
   171a4:	movne	r5, r2
   171a8:	bl	11214 <__errno_location@plt>
   171ac:	mov	sl, r0
   171b0:	ldm	r5, {r0, r1}
   171b4:	ldr	r2, [r5, #40]	; 0x28
   171b8:	ldr	r3, [r5, #44]	; 0x2c
   171bc:	add	r9, r5, #8
   171c0:	ldr	r6, [sl]
   171c4:	orr	r8, r1, #1
   171c8:	mov	r1, #0
   171cc:	str	r6, [sp, #24]
   171d0:	stm	sp, {r0, r8, r9}
   171d4:	str	r2, [sp, #12]
   171d8:	str	r3, [sp, #16]
   171dc:	mov	r0, #0
   171e0:	mov	r2, r7
   171e4:	mov	r3, r4
   171e8:	mov	r6, r4
   171ec:	bl	15e14 <__assert_fail@plt+0x4ae0>
   171f0:	add	r7, r0, #1
   171f4:	mov	r0, r7
   171f8:	bl	1825c <__assert_fail@plt+0x6f28>
   171fc:	mov	r4, r0
   17200:	ldr	r0, [r5]
   17204:	ldr	r2, [r5, #44]	; 0x2c
   17208:	ldr	r1, [r5, #40]	; 0x28
   1720c:	mov	r3, r6
   17210:	stm	sp, {r0, r8, r9}
   17214:	str	r2, [sp, #16]
   17218:	str	r1, [sp, #12]
   1721c:	mov	r0, r4
   17220:	mov	r1, r7
   17224:	ldr	r2, [sp, #20]
   17228:	bl	15e14 <__assert_fail@plt+0x4ae0>
   1722c:	ldr	r0, [sp, #24]
   17230:	str	r0, [sl]
   17234:	mov	r0, r4
   17238:	sub	sp, fp, #28
   1723c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17240:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17244:	add	fp, sp, #28
   17248:	sub	sp, sp, #36	; 0x24
   1724c:	movw	r8, #49712	; 0xc230
   17250:	cmp	r3, #0
   17254:	mov	r4, r2
   17258:	str	r2, [sp, #24]
   1725c:	mov	r5, r1
   17260:	mov	r6, r0
   17264:	str	r0, [sp, #20]
   17268:	movt	r8, #2
   1726c:	movne	r8, r3
   17270:	bl	11214 <__errno_location@plt>
   17274:	str	r0, [sp, #28]
   17278:	cmp	r4, #0
   1727c:	add	sl, r8, #8
   17280:	ldm	r8, {r3, r9}
   17284:	ldr	r7, [r0]
   17288:	ldr	r1, [r8, #40]	; 0x28
   1728c:	ldr	r2, [r8, #44]	; 0x2c
   17290:	mov	r0, #0
   17294:	orreq	r9, r9, #1
   17298:	str	r7, [sp, #32]
   1729c:	mov	r7, r5
   172a0:	stm	sp, {r3, r9, sl}
   172a4:	str	r1, [sp, #12]
   172a8:	str	r2, [sp, #16]
   172ac:	mov	r1, #0
   172b0:	mov	r2, r6
   172b4:	mov	r3, r5
   172b8:	bl	15e14 <__assert_fail@plt+0x4ae0>
   172bc:	add	r4, r0, #1
   172c0:	mov	r5, r0
   172c4:	mov	r0, r4
   172c8:	bl	1825c <__assert_fail@plt+0x6f28>
   172cc:	mov	r6, r0
   172d0:	ldr	r0, [r8]
   172d4:	ldr	r2, [r8, #44]	; 0x2c
   172d8:	ldr	r1, [r8, #40]	; 0x28
   172dc:	mov	r3, r7
   172e0:	stm	sp, {r0, r9, sl}
   172e4:	str	r2, [sp, #16]
   172e8:	str	r1, [sp, #12]
   172ec:	mov	r0, r6
   172f0:	mov	r1, r4
   172f4:	ldr	r2, [sp, #20]
   172f8:	bl	15e14 <__assert_fail@plt+0x4ae0>
   172fc:	ldr	r0, [sp, #24]
   17300:	ldr	r1, [sp, #32]
   17304:	ldr	r2, [sp, #28]
   17308:	cmp	r0, #0
   1730c:	str	r1, [r2]
   17310:	strne	r5, [r0]
   17314:	mov	r0, r6
   17318:	sub	sp, fp, #28
   1731c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17320:	push	{r4, r5, r6, r7, fp, lr}
   17324:	add	fp, sp, #16
   17328:	movw	r4, #49480	; 0xc148
   1732c:	movt	r4, #2
   17330:	ldrd	r6, [r4]
   17334:	cmp	r7, #2
   17338:	blt	17364 <__assert_fail@plt+0x6030>
   1733c:	add	r5, r6, #12
   17340:	mov	r7, #0
   17344:	ldr	r0, [r5, r7, lsl #3]
   17348:	bl	1586c <__assert_fail@plt+0x4538>
   1734c:	ldr	r1, [r4, #4]
   17350:	add	r2, r7, #2
   17354:	add	r0, r7, #1
   17358:	mov	r7, r0
   1735c:	cmp	r2, r1
   17360:	blt	17344 <__assert_fail@plt+0x6010>
   17364:	ldr	r0, [r6, #4]
   17368:	movw	r5, #49760	; 0xc260
   1736c:	movt	r5, #2
   17370:	cmp	r0, r5
   17374:	beq	17388 <__assert_fail@plt+0x6054>
   17378:	bl	1586c <__assert_fail@plt+0x4538>
   1737c:	mov	r0, #256	; 0x100
   17380:	str	r0, [r4, #8]
   17384:	str	r5, [r4, #12]
   17388:	add	r5, r4, #8
   1738c:	cmp	r6, r5
   17390:	beq	173a0 <__assert_fail@plt+0x606c>
   17394:	mov	r0, r6
   17398:	bl	1586c <__assert_fail@plt+0x4538>
   1739c:	str	r5, [r4]
   173a0:	mov	r0, #1
   173a4:	str	r0, [r4, #4]
   173a8:	pop	{r4, r5, r6, r7, fp, pc}
   173ac:	movw	r3, #49712	; 0xc230
   173b0:	mvn	r2, #0
   173b4:	movt	r3, #2
   173b8:	b	173bc <__assert_fail@plt+0x6088>
   173bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173c0:	add	fp, sp, #28
   173c4:	sub	sp, sp, #44	; 0x2c
   173c8:	mov	r7, r3
   173cc:	str	r2, [sp, #36]	; 0x24
   173d0:	str	r1, [sp, #32]
   173d4:	mov	r5, r0
   173d8:	bl	11214 <__errno_location@plt>
   173dc:	cmp	r5, #0
   173e0:	blt	17544 <__assert_fail@plt+0x6210>
   173e4:	cmn	r5, #-2147483647	; 0x80000001
   173e8:	beq	17544 <__assert_fail@plt+0x6210>
   173ec:	movw	r8, #49480	; 0xc148
   173f0:	mov	r4, r0
   173f4:	movt	r8, #2
   173f8:	ldr	r6, [r8]
   173fc:	ldr	r1, [r8, #4]
   17400:	ldr	r0, [r0]
   17404:	str	r4, [sp, #28]
   17408:	cmp	r1, r5
   1740c:	str	r0, [sp, #24]
   17410:	ble	1741c <__assert_fail@plt+0x60e8>
   17414:	mov	sl, r6
   17418:	b	17480 <__assert_fail@plt+0x614c>
   1741c:	mov	r0, #8
   17420:	add	r9, r8, #8
   17424:	add	r2, r5, #1
   17428:	str	r1, [fp, #-32]	; 0xffffffe0
   1742c:	mvn	r3, #-2147483648	; 0x80000000
   17430:	str	r0, [sp]
   17434:	subs	r0, r6, r9
   17438:	sub	r2, r2, r1
   1743c:	sub	r1, fp, #32
   17440:	movne	r0, r6
   17444:	bl	1845c <__assert_fail@plt+0x7128>
   17448:	str	r0, [r8]
   1744c:	cmp	r6, r9
   17450:	mov	sl, r0
   17454:	ldrdeq	r0, [r8, #8]
   17458:	stmeq	sl, {r0, r1}
   1745c:	ldr	r1, [r8, #4]
   17460:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17464:	add	r0, sl, r1, lsl #3
   17468:	sub	r1, r2, r1
   1746c:	lsl	r2, r1, #3
   17470:	mov	r1, #0
   17474:	bl	11244 <memset@plt>
   17478:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1747c:	str	r0, [r8, #4]
   17480:	mov	r9, sl
   17484:	ldr	r6, [r9, r5, lsl #3]!
   17488:	ldr	r4, [r9, #4]!
   1748c:	ldm	r7, {r0, r1}
   17490:	ldr	r2, [r7, #40]	; 0x28
   17494:	ldr	r3, [r7, #44]	; 0x2c
   17498:	orr	r8, r1, #1
   1749c:	add	r1, r7, #8
   174a0:	stm	sp, {r0, r8}
   174a4:	add	r0, sp, #8
   174a8:	str	r1, [sp, #20]
   174ac:	stm	r0, {r1, r2, r3}
   174b0:	mov	r0, r4
   174b4:	mov	r1, r6
   174b8:	ldr	r2, [sp, #32]
   174bc:	ldr	r3, [sp, #36]	; 0x24
   174c0:	bl	15e14 <__assert_fail@plt+0x4ae0>
   174c4:	cmp	r6, r0
   174c8:	bhi	1752c <__assert_fail@plt+0x61f8>
   174cc:	add	r6, r0, #1
   174d0:	movw	r0, #49760	; 0xc260
   174d4:	movt	r0, #2
   174d8:	str	r6, [sl, r5, lsl #3]
   174dc:	cmp	r4, r0
   174e0:	beq	174ec <__assert_fail@plt+0x61b8>
   174e4:	mov	r0, r4
   174e8:	bl	1586c <__assert_fail@plt+0x4538>
   174ec:	mov	r0, r6
   174f0:	bl	1825c <__assert_fail@plt+0x6f28>
   174f4:	str	r0, [r9]
   174f8:	mov	r4, r0
   174fc:	add	r3, sp, #8
   17500:	ldr	r0, [r7]
   17504:	ldr	r1, [r7, #40]	; 0x28
   17508:	ldr	r2, [r7, #44]	; 0x2c
   1750c:	stm	sp, {r0, r8}
   17510:	ldr	r0, [sp, #20]
   17514:	stm	r3, {r0, r1, r2}
   17518:	mov	r0, r4
   1751c:	mov	r1, r6
   17520:	ldr	r2, [sp, #32]
   17524:	ldr	r3, [sp, #36]	; 0x24
   17528:	bl	15e14 <__assert_fail@plt+0x4ae0>
   1752c:	ldr	r1, [sp, #24]
   17530:	ldr	r0, [sp, #28]
   17534:	str	r1, [r0]
   17538:	mov	r0, r4
   1753c:	sub	sp, fp, #28
   17540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17544:	bl	1131c <abort@plt>
   17548:	movw	r3, #49712	; 0xc230
   1754c:	movt	r3, #2
   17550:	b	173bc <__assert_fail@plt+0x6088>
   17554:	movw	r3, #49712	; 0xc230
   17558:	mov	r1, r0
   1755c:	mov	r0, #0
   17560:	mvn	r2, #0
   17564:	movt	r3, #2
   17568:	b	173bc <__assert_fail@plt+0x6088>
   1756c:	movw	r3, #49712	; 0xc230
   17570:	mov	r2, r1
   17574:	mov	r1, r0
   17578:	mov	r0, #0
   1757c:	movt	r3, #2
   17580:	b	173bc <__assert_fail@plt+0x6088>
   17584:	push	{fp, lr}
   17588:	mov	fp, sp
   1758c:	sub	sp, sp, #48	; 0x30
   17590:	vmov.i32	q8, #0	; 0x00000000
   17594:	mov	ip, #32
   17598:	mov	r3, sp
   1759c:	mov	lr, r2
   175a0:	cmp	r1, #10
   175a4:	add	r2, r3, #16
   175a8:	vst1.64	{d16-d17}, [r3], ip
   175ac:	vst1.64	{d16-d17}, [r3]
   175b0:	vst1.64	{d16-d17}, [r2]
   175b4:	beq	175d4 <__assert_fail@plt+0x62a0>
   175b8:	str	r1, [sp]
   175bc:	mov	r3, sp
   175c0:	mov	r1, lr
   175c4:	mvn	r2, #0
   175c8:	bl	173bc <__assert_fail@plt+0x6088>
   175cc:	mov	sp, fp
   175d0:	pop	{fp, pc}
   175d4:	bl	1131c <abort@plt>
   175d8:	push	{r4, sl, fp, lr}
   175dc:	add	fp, sp, #8
   175e0:	sub	sp, sp, #48	; 0x30
   175e4:	mov	ip, r3
   175e8:	mov	r3, sp
   175ec:	vmov.i32	q8, #0	; 0x00000000
   175f0:	mov	lr, #32
   175f4:	cmp	r1, #10
   175f8:	add	r4, r3, #16
   175fc:	vst1.64	{d16-d17}, [r3], lr
   17600:	vst1.64	{d16-d17}, [r3]
   17604:	vst1.64	{d16-d17}, [r4]
   17608:	beq	17628 <__assert_fail@plt+0x62f4>
   1760c:	str	r1, [sp]
   17610:	mov	r1, r2
   17614:	mov	r3, sp
   17618:	mov	r2, ip
   1761c:	bl	173bc <__assert_fail@plt+0x6088>
   17620:	sub	sp, fp, #8
   17624:	pop	{r4, sl, fp, pc}
   17628:	bl	1131c <abort@plt>
   1762c:	push	{fp, lr}
   17630:	mov	fp, sp
   17634:	sub	sp, sp, #48	; 0x30
   17638:	mov	r3, sp
   1763c:	vmov.i32	q8, #0	; 0x00000000
   17640:	mov	ip, #32
   17644:	cmp	r0, #10
   17648:	add	r2, r3, #16
   1764c:	vst1.64	{d16-d17}, [r3], ip
   17650:	vst1.64	{d16-d17}, [r3]
   17654:	vst1.64	{d16-d17}, [r2]
   17658:	beq	17678 <__assert_fail@plt+0x6344>
   1765c:	str	r0, [sp]
   17660:	mov	r3, sp
   17664:	mov	r0, #0
   17668:	mvn	r2, #0
   1766c:	bl	173bc <__assert_fail@plt+0x6088>
   17670:	mov	sp, fp
   17674:	pop	{fp, pc}
   17678:	bl	1131c <abort@plt>
   1767c:	push	{fp, lr}
   17680:	mov	fp, sp
   17684:	sub	sp, sp, #48	; 0x30
   17688:	mov	r3, sp
   1768c:	vmov.i32	q8, #0	; 0x00000000
   17690:	mov	ip, #32
   17694:	cmp	r0, #10
   17698:	add	lr, r3, #16
   1769c:	vst1.64	{d16-d17}, [r3], ip
   176a0:	vst1.64	{d16-d17}, [r3]
   176a4:	vst1.64	{d16-d17}, [lr]
   176a8:	beq	176c4 <__assert_fail@plt+0x6390>
   176ac:	str	r0, [sp]
   176b0:	mov	r3, sp
   176b4:	mov	r0, #0
   176b8:	bl	173bc <__assert_fail@plt+0x6088>
   176bc:	mov	sp, fp
   176c0:	pop	{fp, pc}
   176c4:	bl	1131c <abort@plt>
   176c8:	push	{r4, sl, fp, lr}
   176cc:	add	fp, sp, #8
   176d0:	sub	sp, sp, #48	; 0x30
   176d4:	mov	lr, r0
   176d8:	movw	r0, #49712	; 0xc230
   176dc:	mov	r3, #32
   176e0:	mov	ip, r1
   176e4:	mov	r4, #1
   176e8:	movt	r0, #2
   176ec:	add	r1, r0, #16
   176f0:	vld1.64	{d16-d17}, [r0], r3
   176f4:	mov	r3, sp
   176f8:	vld1.64	{d18-d19}, [r1]
   176fc:	add	r1, r3, #16
   17700:	vld1.64	{d20-d21}, [r0]
   17704:	add	r0, r3, #32
   17708:	vst1.64	{d18-d19}, [r1]
   1770c:	mov	r1, r3
   17710:	vst1.64	{d20-d21}, [r0]
   17714:	mov	r0, #28
   17718:	and	r0, r0, r2, lsr #3
   1771c:	and	r2, r2, #31
   17720:	vst1.64	{d16-d17}, [r1], r0
   17724:	ldr	r0, [r1, #8]
   17728:	bic	r4, r4, r0, lsr r2
   1772c:	eor	r0, r0, r4, lsl r2
   17730:	mov	r2, ip
   17734:	str	r0, [r1, #8]
   17738:	mov	r0, #0
   1773c:	mov	r1, lr
   17740:	bl	173bc <__assert_fail@plt+0x6088>
   17744:	sub	sp, fp, #8
   17748:	pop	{r4, sl, fp, pc}
   1774c:	push	{fp, lr}
   17750:	mov	fp, sp
   17754:	sub	sp, sp, #48	; 0x30
   17758:	mov	ip, r0
   1775c:	movw	r0, #49712	; 0xc230
   17760:	mov	r3, #32
   17764:	movt	r0, #2
   17768:	add	r2, r0, #16
   1776c:	vld1.64	{d16-d17}, [r0], r3
   17770:	mov	r3, sp
   17774:	vld1.64	{d18-d19}, [r2]
   17778:	add	r2, r3, #16
   1777c:	vld1.64	{d20-d21}, [r0]
   17780:	add	r0, r3, #32
   17784:	vst1.64	{d18-d19}, [r2]
   17788:	mov	r2, r3
   1778c:	vst1.64	{d20-d21}, [r0]
   17790:	mov	r0, #28
   17794:	and	r0, r0, r1, lsr #3
   17798:	and	r1, r1, #31
   1779c:	vst1.64	{d16-d17}, [r2], r0
   177a0:	mov	r0, #1
   177a4:	ldr	lr, [r2, #8]
   177a8:	bic	r0, r0, lr, lsr r1
   177ac:	eor	r0, lr, r0, lsl r1
   177b0:	mov	r1, ip
   177b4:	str	r0, [r2, #8]
   177b8:	mov	r0, #0
   177bc:	mvn	r2, #0
   177c0:	bl	173bc <__assert_fail@plt+0x6088>
   177c4:	mov	sp, fp
   177c8:	pop	{fp, pc}
   177cc:	push	{fp, lr}
   177d0:	mov	fp, sp
   177d4:	sub	sp, sp, #48	; 0x30
   177d8:	movw	r2, #49712	; 0xc230
   177dc:	mov	r3, #32
   177e0:	mov	r1, r0
   177e4:	movt	r2, #2
   177e8:	add	r0, r2, #16
   177ec:	vld1.64	{d16-d17}, [r2], r3
   177f0:	mov	r3, sp
   177f4:	vld1.64	{d18-d19}, [r0]
   177f8:	add	r0, r3, #16
   177fc:	vld1.64	{d20-d21}, [r2]
   17800:	mov	r2, r3
   17804:	vst1.64	{d18-d19}, [r0]
   17808:	add	r0, r3, #32
   1780c:	vst1.64	{d20-d21}, [r0]
   17810:	mov	r0, #12
   17814:	vst1.64	{d16-d17}, [r2], r0
   17818:	ldr	r0, [r2]
   1781c:	orr	r0, r0, #67108864	; 0x4000000
   17820:	str	r0, [r2]
   17824:	mov	r0, #0
   17828:	mvn	r2, #0
   1782c:	bl	173bc <__assert_fail@plt+0x6088>
   17830:	mov	sp, fp
   17834:	pop	{fp, pc}
   17838:	push	{fp, lr}
   1783c:	mov	fp, sp
   17840:	sub	sp, sp, #48	; 0x30
   17844:	mov	ip, r1
   17848:	mov	r1, r0
   1784c:	movw	r0, #49712	; 0xc230
   17850:	mov	r3, #32
   17854:	movt	r0, #2
   17858:	add	r2, r0, #16
   1785c:	vld1.64	{d16-d17}, [r0], r3
   17860:	mov	r3, sp
   17864:	vld1.64	{d18-d19}, [r2]
   17868:	add	r2, r3, #16
   1786c:	vld1.64	{d20-d21}, [r0]
   17870:	add	r0, r3, #32
   17874:	vst1.64	{d18-d19}, [r2]
   17878:	mov	r2, r3
   1787c:	vst1.64	{d20-d21}, [r0]
   17880:	mov	r0, #12
   17884:	vst1.64	{d16-d17}, [r2], r0
   17888:	ldr	r0, [r2]
   1788c:	orr	r0, r0, #67108864	; 0x4000000
   17890:	str	r0, [r2]
   17894:	mov	r0, #0
   17898:	mov	r2, ip
   1789c:	bl	173bc <__assert_fail@plt+0x6088>
   178a0:	mov	sp, fp
   178a4:	pop	{fp, pc}
   178a8:	push	{r4, sl, fp, lr}
   178ac:	add	fp, sp, #8
   178b0:	sub	sp, sp, #96	; 0x60
   178b4:	mov	ip, r2
   178b8:	mov	r2, sp
   178bc:	vmov.i32	q8, #0	; 0x00000000
   178c0:	mov	r4, #28
   178c4:	cmp	r1, #10
   178c8:	mov	r3, r2
   178cc:	add	lr, r2, #16
   178d0:	vst1.64	{d16-d17}, [r3], r4
   178d4:	vst1.64	{d16-d17}, [lr]
   178d8:	vst1.32	{d16-d17}, [r3]
   178dc:	beq	1792c <__assert_fail@plt+0x65f8>
   178e0:	vld1.64	{d16-d17}, [r2], r4
   178e4:	vld1.64	{d18-d19}, [lr]
   178e8:	add	r3, sp, #48	; 0x30
   178ec:	add	r4, r3, #4
   178f0:	vld1.32	{d20-d21}, [r2]
   178f4:	add	r2, r3, #20
   178f8:	vst1.32	{d16-d17}, [r4]
   178fc:	vst1.32	{d18-d19}, [r2]
   17900:	add	r2, r3, #32
   17904:	vst1.32	{d20-d21}, [r2]
   17908:	str	r1, [sp, #48]	; 0x30
   1790c:	mvn	r2, #0
   17910:	ldr	r1, [sp, #60]	; 0x3c
   17914:	orr	r1, r1, #67108864	; 0x4000000
   17918:	str	r1, [sp, #60]	; 0x3c
   1791c:	mov	r1, ip
   17920:	bl	173bc <__assert_fail@plt+0x6088>
   17924:	sub	sp, fp, #8
   17928:	pop	{r4, sl, fp, pc}
   1792c:	bl	1131c <abort@plt>
   17930:	push	{r4, r5, fp, lr}
   17934:	add	fp, sp, #8
   17938:	sub	sp, sp, #48	; 0x30
   1793c:	mov	ip, r3
   17940:	movw	r3, #49712	; 0xc230
   17944:	mov	lr, #32
   17948:	cmp	r1, #0
   1794c:	mov	r5, sp
   17950:	movt	r3, #2
   17954:	cmpne	r2, #0
   17958:	add	r4, r3, #16
   1795c:	vld1.64	{d16-d17}, [r3], lr
   17960:	vld1.64	{d18-d19}, [r4]
   17964:	add	r4, r5, #16
   17968:	vld1.64	{d20-d21}, [r3]
   1796c:	vst1.64	{d16-d17}, [r5], lr
   17970:	mov	r3, #10
   17974:	vst1.64	{d18-d19}, [r4]
   17978:	vst1.64	{d20-d21}, [r5]
   1797c:	str	r3, [sp]
   17980:	bne	17988 <__assert_fail@plt+0x6654>
   17984:	bl	1131c <abort@plt>
   17988:	str	r2, [sp, #44]	; 0x2c
   1798c:	str	r1, [sp, #40]	; 0x28
   17990:	mov	r3, sp
   17994:	mov	r1, ip
   17998:	mvn	r2, #0
   1799c:	bl	173bc <__assert_fail@plt+0x6088>
   179a0:	sub	sp, fp, #8
   179a4:	pop	{r4, r5, fp, pc}
   179a8:	push	{r4, r5, fp, lr}
   179ac:	add	fp, sp, #8
   179b0:	sub	sp, sp, #48	; 0x30
   179b4:	mov	lr, r3
   179b8:	movw	r3, #49712	; 0xc230
   179bc:	mov	ip, #32
   179c0:	cmp	r1, #0
   179c4:	mov	r5, sp
   179c8:	movt	r3, #2
   179cc:	cmpne	r2, #0
   179d0:	add	r4, r3, #16
   179d4:	vld1.64	{d16-d17}, [r3], ip
   179d8:	vld1.64	{d18-d19}, [r4]
   179dc:	add	r4, r5, #16
   179e0:	vld1.64	{d20-d21}, [r3]
   179e4:	vst1.64	{d16-d17}, [r5], ip
   179e8:	mov	r3, #10
   179ec:	vst1.64	{d18-d19}, [r4]
   179f0:	vst1.64	{d20-d21}, [r5]
   179f4:	str	r3, [sp]
   179f8:	bne	17a00 <__assert_fail@plt+0x66cc>
   179fc:	bl	1131c <abort@plt>
   17a00:	ldr	ip, [fp, #8]
   17a04:	str	r2, [sp, #44]	; 0x2c
   17a08:	str	r1, [sp, #40]	; 0x28
   17a0c:	mov	r3, sp
   17a10:	mov	r1, lr
   17a14:	mov	r2, ip
   17a18:	bl	173bc <__assert_fail@plt+0x6088>
   17a1c:	sub	sp, fp, #8
   17a20:	pop	{r4, r5, fp, pc}
   17a24:	push	{r4, sl, fp, lr}
   17a28:	add	fp, sp, #8
   17a2c:	sub	sp, sp, #48	; 0x30
   17a30:	mov	ip, r2
   17a34:	movw	r2, #49712	; 0xc230
   17a38:	mov	lr, #32
   17a3c:	cmp	r0, #0
   17a40:	mov	r4, sp
   17a44:	movt	r2, #2
   17a48:	cmpne	r1, #0
   17a4c:	add	r3, r2, #16
   17a50:	vld1.64	{d16-d17}, [r2], lr
   17a54:	vld1.64	{d18-d19}, [r3]
   17a58:	add	r3, r4, #16
   17a5c:	vld1.64	{d20-d21}, [r2]
   17a60:	vst1.64	{d16-d17}, [r4], lr
   17a64:	mov	r2, #10
   17a68:	vst1.64	{d18-d19}, [r3]
   17a6c:	vst1.64	{d20-d21}, [r4]
   17a70:	str	r2, [sp]
   17a74:	bne	17a7c <__assert_fail@plt+0x6748>
   17a78:	bl	1131c <abort@plt>
   17a7c:	str	r1, [sp, #44]	; 0x2c
   17a80:	str	r0, [sp, #40]	; 0x28
   17a84:	mov	r3, sp
   17a88:	mov	r0, #0
   17a8c:	mov	r1, ip
   17a90:	mvn	r2, #0
   17a94:	bl	173bc <__assert_fail@plt+0x6088>
   17a98:	sub	sp, fp, #8
   17a9c:	pop	{r4, sl, fp, pc}
   17aa0:	push	{r4, r5, fp, lr}
   17aa4:	add	fp, sp, #8
   17aa8:	sub	sp, sp, #48	; 0x30
   17aac:	mov	lr, r2
   17ab0:	movw	r2, #49712	; 0xc230
   17ab4:	mov	ip, r3
   17ab8:	mov	r3, #32
   17abc:	cmp	r0, #0
   17ac0:	mov	r5, sp
   17ac4:	movt	r2, #2
   17ac8:	cmpne	r1, #0
   17acc:	add	r4, r2, #16
   17ad0:	vld1.64	{d16-d17}, [r2], r3
   17ad4:	vld1.64	{d18-d19}, [r4]
   17ad8:	add	r4, r5, #16
   17adc:	vld1.64	{d20-d21}, [r2]
   17ae0:	vst1.64	{d16-d17}, [r5], r3
   17ae4:	mov	r2, #10
   17ae8:	vst1.64	{d18-d19}, [r4]
   17aec:	vst1.64	{d20-d21}, [r5]
   17af0:	str	r2, [sp]
   17af4:	bne	17afc <__assert_fail@plt+0x67c8>
   17af8:	bl	1131c <abort@plt>
   17afc:	str	r1, [sp, #44]	; 0x2c
   17b00:	str	r0, [sp, #40]	; 0x28
   17b04:	mov	r3, sp
   17b08:	mov	r0, #0
   17b0c:	mov	r1, lr
   17b10:	mov	r2, ip
   17b14:	bl	173bc <__assert_fail@plt+0x6088>
   17b18:	sub	sp, fp, #8
   17b1c:	pop	{r4, r5, fp, pc}
   17b20:	movw	r3, #49432	; 0xc118
   17b24:	movt	r3, #2
   17b28:	b	173bc <__assert_fail@plt+0x6088>
   17b2c:	movw	r3, #49432	; 0xc118
   17b30:	mov	r2, r1
   17b34:	mov	r1, r0
   17b38:	mov	r0, #0
   17b3c:	movt	r3, #2
   17b40:	b	173bc <__assert_fail@plt+0x6088>
   17b44:	movw	r3, #49432	; 0xc118
   17b48:	mvn	r2, #0
   17b4c:	movt	r3, #2
   17b50:	b	173bc <__assert_fail@plt+0x6088>
   17b54:	movw	r3, #49432	; 0xc118
   17b58:	mov	r1, r0
   17b5c:	mov	r0, #0
   17b60:	mvn	r2, #0
   17b64:	movt	r3, #2
   17b68:	b	173bc <__assert_fail@plt+0x6088>
   17b6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17b70:	add	fp, sp, #24
   17b74:	sub	sp, sp, #32
   17b78:	ldr	r6, [fp, #12]
   17b7c:	ldr	r7, [fp, #8]
   17b80:	mov	r4, r2
   17b84:	mov	r8, r0
   17b88:	cmp	r1, #0
   17b8c:	beq	17bb4 <__assert_fail@plt+0x6880>
   17b90:	movw	r2, #46256	; 0xb4b0
   17b94:	mov	r5, r1
   17b98:	str	r3, [sp, #4]
   17b9c:	str	r4, [sp]
   17ba0:	mov	r0, r8
   17ba4:	mov	r1, #1
   17ba8:	movt	r2, #1
   17bac:	mov	r3, r5
   17bb0:	b	17bcc <__assert_fail@plt+0x6898>
   17bb4:	movw	r2, #46268	; 0xb4bc
   17bb8:	str	r3, [sp]
   17bbc:	mov	r0, r8
   17bc0:	mov	r1, #1
   17bc4:	mov	r3, r4
   17bc8:	movt	r2, #1
   17bcc:	bl	11280 <__fprintf_chk@plt>
   17bd0:	movw	r1, #46275	; 0xb4c3
   17bd4:	mov	r0, #0
   17bd8:	mov	r2, #5
   17bdc:	movt	r1, #1
   17be0:	bl	1110c <dcgettext@plt>
   17be4:	movw	r2, #46993	; 0xb791
   17be8:	mov	r3, r0
   17bec:	movw	r0, #2022	; 0x7e6
   17bf0:	mov	r1, #1
   17bf4:	str	r0, [sp]
   17bf8:	movt	r2, #1
   17bfc:	mov	r0, r8
   17c00:	bl	11280 <__fprintf_chk@plt>
   17c04:	movw	r4, #44254	; 0xacde
   17c08:	mov	r1, r8
   17c0c:	movt	r4, #1
   17c10:	mov	r0, r4
   17c14:	bl	1107c <fputs_unlocked@plt>
   17c18:	movw	r1, #46279	; 0xb4c7
   17c1c:	mov	r0, #0
   17c20:	mov	r2, #5
   17c24:	movt	r1, #1
   17c28:	bl	1110c <dcgettext@plt>
   17c2c:	movw	r3, #46450	; 0xb572
   17c30:	mov	r2, r0
   17c34:	mov	r0, r8
   17c38:	mov	r1, #1
   17c3c:	movt	r3, #1
   17c40:	bl	11280 <__fprintf_chk@plt>
   17c44:	mov	r0, r4
   17c48:	mov	r1, r8
   17c4c:	bl	1107c <fputs_unlocked@plt>
   17c50:	cmp	r6, #9
   17c54:	bhi	17c90 <__assert_fail@plt+0x695c>
   17c58:	add	r0, pc, #0
   17c5c:	ldr	pc, [r0, r6, lsl #2]
   17c60:	andeq	r7, r1, r8, lsl #25
   17c64:	muleq	r1, ip, ip
   17c68:	andeq	r7, r1, ip, asr #25
   17c6c:	strdeq	r7, [r1], -r4
   17c70:	andeq	r7, r1, ip, lsl sp
   17c74:	andeq	r7, r1, r4, asr #26
   17c78:	andeq	r7, r1, ip, ror #26
   17c7c:	andeq	r7, r1, r4, lsr #27
   17c80:	andeq	r7, r1, ip, asr #28
   17c84:	strdeq	r7, [r1], -r4
   17c88:	sub	sp, fp, #24
   17c8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17c90:	movw	r1, #46803	; 0xb6d3
   17c94:	movt	r1, #1
   17c98:	b	17dfc <__assert_fail@plt+0x6ac8>
   17c9c:	movw	r1, #46484	; 0xb594
   17ca0:	mov	r0, #0
   17ca4:	mov	r2, #5
   17ca8:	movt	r1, #1
   17cac:	bl	1110c <dcgettext@plt>
   17cb0:	ldr	r3, [r7]
   17cb4:	mov	r2, r0
   17cb8:	mov	r0, r8
   17cbc:	mov	r1, #1
   17cc0:	sub	sp, fp, #24
   17cc4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17cc8:	b	11280 <__fprintf_chk@plt>
   17ccc:	movw	r1, #46500	; 0xb5a4
   17cd0:	mov	r0, #0
   17cd4:	mov	r2, #5
   17cd8:	movt	r1, #1
   17cdc:	bl	1110c <dcgettext@plt>
   17ce0:	mov	r2, r0
   17ce4:	ldr	r3, [r7]
   17ce8:	ldr	r0, [r7, #4]
   17cec:	str	r0, [sp]
   17cf0:	b	17de0 <__assert_fail@plt+0x6aac>
   17cf4:	movw	r1, #46523	; 0xb5bb
   17cf8:	mov	r0, #0
   17cfc:	mov	r2, #5
   17d00:	movt	r1, #1
   17d04:	bl	1110c <dcgettext@plt>
   17d08:	ldr	r3, [r7]
   17d0c:	mov	r2, r0
   17d10:	ldmib	r7, {r0, r1}
   17d14:	stm	sp, {r0, r1}
   17d18:	b	17de0 <__assert_fail@plt+0x6aac>
   17d1c:	movw	r1, #46551	; 0xb5d7
   17d20:	mov	r0, #0
   17d24:	mov	r2, #5
   17d28:	movt	r1, #1
   17d2c:	bl	1110c <dcgettext@plt>
   17d30:	ldr	r3, [r7]
   17d34:	mov	r2, r0
   17d38:	ldmib	r7, {r0, r1, r7}
   17d3c:	stm	sp, {r0, r1, r7}
   17d40:	b	17de0 <__assert_fail@plt+0x6aac>
   17d44:	movw	r1, #46583	; 0xb5f7
   17d48:	mov	r0, #0
   17d4c:	mov	r2, #5
   17d50:	movt	r1, #1
   17d54:	bl	1110c <dcgettext@plt>
   17d58:	ldr	r3, [r7]
   17d5c:	mov	r2, r0
   17d60:	ldmib	r7, {r0, r1, r6, r7}
   17d64:	stm	sp, {r0, r1, r6, r7}
   17d68:	b	17de0 <__assert_fail@plt+0x6aac>
   17d6c:	movw	r1, #46619	; 0xb61b
   17d70:	mov	r0, #0
   17d74:	mov	r2, #5
   17d78:	movt	r1, #1
   17d7c:	bl	1110c <dcgettext@plt>
   17d80:	ldr	r3, [r7]
   17d84:	mov	r2, r0
   17d88:	ldmib	r7, {r0, r1, r6}
   17d8c:	ldr	r5, [r7, #16]
   17d90:	ldr	r7, [r7, #20]
   17d94:	stm	sp, {r0, r1, r6}
   17d98:	str	r5, [sp, #12]
   17d9c:	str	r7, [sp, #16]
   17da0:	b	17de0 <__assert_fail@plt+0x6aac>
   17da4:	movw	r1, #46659	; 0xb643
   17da8:	mov	r0, #0
   17dac:	mov	r2, #5
   17db0:	movt	r1, #1
   17db4:	bl	1110c <dcgettext@plt>
   17db8:	ldr	r3, [r7]
   17dbc:	mov	r2, r0
   17dc0:	ldmib	r7, {r0, r1, r6}
   17dc4:	ldr	r5, [r7, #16]
   17dc8:	ldr	r4, [r7, #20]
   17dcc:	ldr	r7, [r7, #24]
   17dd0:	stm	sp, {r0, r1, r6}
   17dd4:	str	r5, [sp, #12]
   17dd8:	str	r4, [sp, #16]
   17ddc:	str	r7, [sp, #20]
   17de0:	mov	r0, r8
   17de4:	mov	r1, #1
   17de8:	bl	11280 <__fprintf_chk@plt>
   17dec:	sub	sp, fp, #24
   17df0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17df4:	movw	r1, #46751	; 0xb69f
   17df8:	movt	r1, #1
   17dfc:	mov	r0, #0
   17e00:	mov	r2, #5
   17e04:	bl	1110c <dcgettext@plt>
   17e08:	mov	ip, r0
   17e0c:	ldr	r3, [r7]
   17e10:	ldr	r0, [r7, #4]
   17e14:	ldr	r1, [r7, #8]
   17e18:	ldr	r6, [r7, #12]
   17e1c:	ldr	r5, [r7, #16]
   17e20:	ldr	r4, [r7, #20]
   17e24:	ldr	r2, [r7, #24]
   17e28:	ldr	lr, [r7, #28]
   17e2c:	ldr	r7, [r7, #32]
   17e30:	stm	sp, {r0, r1, r6}
   17e34:	str	r5, [sp, #12]
   17e38:	str	r4, [sp, #16]
   17e3c:	str	r2, [sp, #20]
   17e40:	str	lr, [sp, #24]
   17e44:	str	r7, [sp, #28]
   17e48:	b	17e90 <__assert_fail@plt+0x6b5c>
   17e4c:	movw	r1, #46703	; 0xb66f
   17e50:	mov	r0, #0
   17e54:	mov	r2, #5
   17e58:	movt	r1, #1
   17e5c:	bl	1110c <dcgettext@plt>
   17e60:	mov	ip, r0
   17e64:	ldr	r3, [r7]
   17e68:	ldmib	r7, {r0, r1, r6}
   17e6c:	ldr	r5, [r7, #16]
   17e70:	ldr	r4, [r7, #20]
   17e74:	ldr	r2, [r7, #24]
   17e78:	ldr	r7, [r7, #28]
   17e7c:	stm	sp, {r0, r1, r6}
   17e80:	str	r5, [sp, #12]
   17e84:	str	r4, [sp, #16]
   17e88:	str	r2, [sp, #20]
   17e8c:	str	r7, [sp, #24]
   17e90:	mov	r0, r8
   17e94:	mov	r1, #1
   17e98:	mov	r2, ip
   17e9c:	bl	11280 <__fprintf_chk@plt>
   17ea0:	sub	sp, fp, #24
   17ea4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ea8:	push	{r4, sl, fp, lr}
   17eac:	add	fp, sp, #8
   17eb0:	sub	sp, sp, #8
   17eb4:	ldr	ip, [fp, #8]
   17eb8:	mov	lr, #0
   17ebc:	ldr	r4, [ip, lr, lsl #2]
   17ec0:	add	lr, lr, #1
   17ec4:	cmp	r4, #0
   17ec8:	bne	17ebc <__assert_fail@plt+0x6b88>
   17ecc:	sub	r4, lr, #1
   17ed0:	str	ip, [sp]
   17ed4:	str	r4, [sp, #4]
   17ed8:	bl	17b6c <__assert_fail@plt+0x6838>
   17edc:	sub	sp, fp, #8
   17ee0:	pop	{r4, sl, fp, pc}
   17ee4:	push	{fp, lr}
   17ee8:	mov	fp, sp
   17eec:	sub	sp, sp, #48	; 0x30
   17ef0:	ldr	ip, [fp, #8]
   17ef4:	ldr	lr, [ip]
   17ef8:	cmp	lr, #0
   17efc:	str	lr, [sp, #8]
   17f00:	beq	17f9c <__assert_fail@plt+0x6c68>
   17f04:	ldr	lr, [ip, #4]
   17f08:	cmp	lr, #0
   17f0c:	str	lr, [sp, #12]
   17f10:	beq	17fa4 <__assert_fail@plt+0x6c70>
   17f14:	ldr	lr, [ip, #8]
   17f18:	cmp	lr, #0
   17f1c:	str	lr, [sp, #16]
   17f20:	beq	17fac <__assert_fail@plt+0x6c78>
   17f24:	ldr	lr, [ip, #12]
   17f28:	cmp	lr, #0
   17f2c:	str	lr, [sp, #20]
   17f30:	beq	17fb4 <__assert_fail@plt+0x6c80>
   17f34:	ldr	lr, [ip, #16]
   17f38:	cmp	lr, #0
   17f3c:	str	lr, [sp, #24]
   17f40:	beq	17fbc <__assert_fail@plt+0x6c88>
   17f44:	ldr	lr, [ip, #20]
   17f48:	cmp	lr, #0
   17f4c:	str	lr, [sp, #28]
   17f50:	beq	17fc4 <__assert_fail@plt+0x6c90>
   17f54:	ldr	lr, [ip, #24]
   17f58:	cmp	lr, #0
   17f5c:	str	lr, [sp, #32]
   17f60:	beq	17fcc <__assert_fail@plt+0x6c98>
   17f64:	ldr	lr, [ip, #28]
   17f68:	cmp	lr, #0
   17f6c:	str	lr, [sp, #36]	; 0x24
   17f70:	beq	17fd4 <__assert_fail@plt+0x6ca0>
   17f74:	ldr	lr, [ip, #32]
   17f78:	cmp	lr, #0
   17f7c:	str	lr, [sp, #40]	; 0x28
   17f80:	beq	17fdc <__assert_fail@plt+0x6ca8>
   17f84:	ldr	lr, [ip, #36]	; 0x24
   17f88:	mov	ip, #10
   17f8c:	cmp	lr, #0
   17f90:	str	lr, [sp, #44]	; 0x2c
   17f94:	movweq	ip, #9
   17f98:	b	17fe0 <__assert_fail@plt+0x6cac>
   17f9c:	mov	ip, #0
   17fa0:	b	17fe0 <__assert_fail@plt+0x6cac>
   17fa4:	mov	ip, #1
   17fa8:	b	17fe0 <__assert_fail@plt+0x6cac>
   17fac:	mov	ip, #2
   17fb0:	b	17fe0 <__assert_fail@plt+0x6cac>
   17fb4:	mov	ip, #3
   17fb8:	b	17fe0 <__assert_fail@plt+0x6cac>
   17fbc:	mov	ip, #4
   17fc0:	b	17fe0 <__assert_fail@plt+0x6cac>
   17fc4:	mov	ip, #5
   17fc8:	b	17fe0 <__assert_fail@plt+0x6cac>
   17fcc:	mov	ip, #6
   17fd0:	b	17fe0 <__assert_fail@plt+0x6cac>
   17fd4:	mov	ip, #7
   17fd8:	b	17fe0 <__assert_fail@plt+0x6cac>
   17fdc:	mov	ip, #8
   17fe0:	add	lr, sp, #8
   17fe4:	str	ip, [sp, #4]
   17fe8:	str	lr, [sp]
   17fec:	bl	17b6c <__assert_fail@plt+0x6838>
   17ff0:	mov	sp, fp
   17ff4:	pop	{fp, pc}
   17ff8:	push	{fp, lr}
   17ffc:	mov	fp, sp
   18000:	sub	sp, sp, #56	; 0x38
   18004:	add	ip, fp, #8
   18008:	str	ip, [sp, #12]
   1800c:	ldr	lr, [fp, #8]
   18010:	cmp	lr, #0
   18014:	str	lr, [sp, #16]
   18018:	beq	180b4 <__assert_fail@plt+0x6d80>
   1801c:	ldr	lr, [ip, #4]
   18020:	cmp	lr, #0
   18024:	str	lr, [sp, #20]
   18028:	beq	180bc <__assert_fail@plt+0x6d88>
   1802c:	ldr	lr, [ip, #8]
   18030:	cmp	lr, #0
   18034:	str	lr, [sp, #24]
   18038:	beq	180c4 <__assert_fail@plt+0x6d90>
   1803c:	ldr	lr, [ip, #12]
   18040:	cmp	lr, #0
   18044:	str	lr, [sp, #28]
   18048:	beq	180cc <__assert_fail@plt+0x6d98>
   1804c:	ldr	lr, [ip, #16]
   18050:	cmp	lr, #0
   18054:	str	lr, [sp, #32]
   18058:	beq	180d4 <__assert_fail@plt+0x6da0>
   1805c:	ldr	lr, [ip, #20]
   18060:	cmp	lr, #0
   18064:	str	lr, [sp, #36]	; 0x24
   18068:	beq	180dc <__assert_fail@plt+0x6da8>
   1806c:	ldr	lr, [ip, #24]
   18070:	cmp	lr, #0
   18074:	str	lr, [sp, #40]	; 0x28
   18078:	beq	180e4 <__assert_fail@plt+0x6db0>
   1807c:	ldr	lr, [ip, #28]
   18080:	cmp	lr, #0
   18084:	str	lr, [sp, #44]	; 0x2c
   18088:	beq	180ec <__assert_fail@plt+0x6db8>
   1808c:	ldr	lr, [ip, #32]
   18090:	cmp	lr, #0
   18094:	str	lr, [sp, #48]	; 0x30
   18098:	beq	180f4 <__assert_fail@plt+0x6dc0>
   1809c:	ldr	lr, [ip, #36]	; 0x24
   180a0:	mov	ip, #10
   180a4:	cmp	lr, #0
   180a8:	str	lr, [sp, #52]	; 0x34
   180ac:	movweq	ip, #9
   180b0:	b	180f8 <__assert_fail@plt+0x6dc4>
   180b4:	mov	ip, #0
   180b8:	b	180f8 <__assert_fail@plt+0x6dc4>
   180bc:	mov	ip, #1
   180c0:	b	180f8 <__assert_fail@plt+0x6dc4>
   180c4:	mov	ip, #2
   180c8:	b	180f8 <__assert_fail@plt+0x6dc4>
   180cc:	mov	ip, #3
   180d0:	b	180f8 <__assert_fail@plt+0x6dc4>
   180d4:	mov	ip, #4
   180d8:	b	180f8 <__assert_fail@plt+0x6dc4>
   180dc:	mov	ip, #5
   180e0:	b	180f8 <__assert_fail@plt+0x6dc4>
   180e4:	mov	ip, #6
   180e8:	b	180f8 <__assert_fail@plt+0x6dc4>
   180ec:	mov	ip, #7
   180f0:	b	180f8 <__assert_fail@plt+0x6dc4>
   180f4:	mov	ip, #8
   180f8:	add	lr, sp, #16
   180fc:	str	ip, [sp, #4]
   18100:	str	lr, [sp]
   18104:	bl	17b6c <__assert_fail@plt+0x6838>
   18108:	mov	sp, fp
   1810c:	pop	{fp, pc}
   18110:	push	{fp, lr}
   18114:	mov	fp, sp
   18118:	movw	r0, #49524	; 0xc174
   1811c:	movt	r0, #2
   18120:	ldr	r1, [r0]
   18124:	movw	r0, #44254	; 0xacde
   18128:	movt	r0, #1
   1812c:	bl	1107c <fputs_unlocked@plt>
   18130:	movw	r1, #46863	; 0xb70f
   18134:	mov	r0, #0
   18138:	mov	r2, #5
   1813c:	movt	r1, #1
   18140:	bl	1110c <dcgettext@plt>
   18144:	movw	r2, #46883	; 0xb723
   18148:	mov	r1, r0
   1814c:	mov	r0, #1
   18150:	movt	r2, #1
   18154:	bl	1125c <__printf_chk@plt>
   18158:	movw	r1, #46905	; 0xb739
   1815c:	mov	r0, #0
   18160:	mov	r2, #5
   18164:	movt	r1, #1
   18168:	bl	1110c <dcgettext@plt>
   1816c:	movw	r2, #43579	; 0xaa3b
   18170:	movw	r3, #44063	; 0xac1f
   18174:	mov	r1, r0
   18178:	mov	r0, #1
   1817c:	movt	r2, #1
   18180:	movt	r3, #1
   18184:	bl	1125c <__printf_chk@plt>
   18188:	movw	r1, #46925	; 0xb74d
   1818c:	mov	r0, #0
   18190:	mov	r2, #5
   18194:	movt	r1, #1
   18198:	bl	1110c <dcgettext@plt>
   1819c:	movw	r2, #46964	; 0xb774
   181a0:	mov	r1, r0
   181a4:	mov	r0, #1
   181a8:	movt	r2, #1
   181ac:	pop	{fp, lr}
   181b0:	b	1125c <__printf_chk@plt>
   181b4:	push	{r4, r5, r6, sl, fp, lr}
   181b8:	add	fp, sp, #16
   181bc:	mov	r4, r2
   181c0:	mov	r5, r1
   181c4:	mov	r6, r0
   181c8:	bl	19984 <__assert_fail@plt+0x8650>
   181cc:	cmp	r0, #0
   181d0:	popne	{r4, r5, r6, sl, fp, pc}
   181d4:	cmp	r6, #0
   181d8:	beq	181ec <__assert_fail@plt+0x6eb8>
   181dc:	cmp	r5, #0
   181e0:	cmpne	r4, #0
   181e4:	bne	181ec <__assert_fail@plt+0x6eb8>
   181e8:	pop	{r4, r5, r6, sl, fp, pc}
   181ec:	bl	1878c <__assert_fail@plt+0x7458>
   181f0:	push	{r4, r5, r6, sl, fp, lr}
   181f4:	add	fp, sp, #16
   181f8:	mov	r4, r2
   181fc:	mov	r5, r1
   18200:	mov	r6, r0
   18204:	bl	19984 <__assert_fail@plt+0x8650>
   18208:	cmp	r0, #0
   1820c:	popne	{r4, r5, r6, sl, fp, pc}
   18210:	cmp	r6, #0
   18214:	beq	18228 <__assert_fail@plt+0x6ef4>
   18218:	cmp	r5, #0
   1821c:	cmpne	r4, #0
   18220:	bne	18228 <__assert_fail@plt+0x6ef4>
   18224:	pop	{r4, r5, r6, sl, fp, pc}
   18228:	bl	1878c <__assert_fail@plt+0x7458>
   1822c:	push	{fp, lr}
   18230:	mov	fp, sp
   18234:	bl	197e4 <__assert_fail@plt+0x84b0>
   18238:	cmp	r0, #0
   1823c:	popne	{fp, pc}
   18240:	bl	1878c <__assert_fail@plt+0x7458>
   18244:	push	{fp, lr}
   18248:	mov	fp, sp
   1824c:	bl	197e4 <__assert_fail@plt+0x84b0>
   18250:	cmp	r0, #0
   18254:	popne	{fp, pc}
   18258:	bl	1878c <__assert_fail@plt+0x7458>
   1825c:	push	{fp, lr}
   18260:	mov	fp, sp
   18264:	bl	197e4 <__assert_fail@plt+0x84b0>
   18268:	cmp	r0, #0
   1826c:	popne	{fp, pc}
   18270:	bl	1878c <__assert_fail@plt+0x7458>
   18274:	push	{r4, r5, fp, lr}
   18278:	add	fp, sp, #8
   1827c:	mov	r4, r1
   18280:	mov	r5, r0
   18284:	bl	19814 <__assert_fail@plt+0x84e0>
   18288:	cmp	r0, #0
   1828c:	popne	{r4, r5, fp, pc}
   18290:	cmp	r5, #0
   18294:	beq	182a4 <__assert_fail@plt+0x6f70>
   18298:	cmp	r4, #0
   1829c:	bne	182a4 <__assert_fail@plt+0x6f70>
   182a0:	pop	{r4, r5, fp, pc}
   182a4:	bl	1878c <__assert_fail@plt+0x7458>
   182a8:	push	{fp, lr}
   182ac:	mov	fp, sp
   182b0:	cmp	r1, #0
   182b4:	orreq	r1, r1, #1
   182b8:	bl	19814 <__assert_fail@plt+0x84e0>
   182bc:	cmp	r0, #0
   182c0:	popne	{fp, pc}
   182c4:	bl	1878c <__assert_fail@plt+0x7458>
   182c8:	push	{fp, lr}
   182cc:	mov	fp, sp
   182d0:	clz	r3, r2
   182d4:	lsr	ip, r3, #5
   182d8:	clz	r3, r1
   182dc:	lsr	r3, r3, #5
   182e0:	orrs	r3, r3, ip
   182e4:	movwne	r1, #1
   182e8:	movwne	r2, #1
   182ec:	bl	19984 <__assert_fail@plt+0x8650>
   182f0:	cmp	r0, #0
   182f4:	popne	{fp, pc}
   182f8:	bl	1878c <__assert_fail@plt+0x7458>
   182fc:	push	{fp, lr}
   18300:	mov	fp, sp
   18304:	mov	r2, r1
   18308:	mov	r1, r0
   1830c:	mov	r0, #0
   18310:	bl	19984 <__assert_fail@plt+0x8650>
   18314:	cmp	r0, #0
   18318:	popne	{fp, pc}
   1831c:	bl	1878c <__assert_fail@plt+0x7458>
   18320:	push	{fp, lr}
   18324:	mov	fp, sp
   18328:	mov	r2, r1
   1832c:	mov	r1, r0
   18330:	clz	r0, r2
   18334:	clz	r3, r1
   18338:	lsr	r0, r0, #5
   1833c:	lsr	r3, r3, #5
   18340:	orrs	r0, r3, r0
   18344:	movwne	r1, #1
   18348:	movwne	r2, #1
   1834c:	mov	r0, #0
   18350:	bl	19984 <__assert_fail@plt+0x8650>
   18354:	cmp	r0, #0
   18358:	popne	{fp, pc}
   1835c:	bl	1878c <__assert_fail@plt+0x7458>
   18360:	push	{r4, r5, r6, sl, fp, lr}
   18364:	add	fp, sp, #16
   18368:	ldr	r5, [r1]
   1836c:	mov	r4, r1
   18370:	mov	r6, r0
   18374:	cmp	r0, #0
   18378:	beq	18390 <__assert_fail@plt+0x705c>
   1837c:	mov	r0, #1
   18380:	add	r0, r0, r5, lsr #1
   18384:	adds	r5, r5, r0
   18388:	bcc	18398 <__assert_fail@plt+0x7064>
   1838c:	b	183d4 <__assert_fail@plt+0x70a0>
   18390:	cmp	r5, #0
   18394:	movweq	r5, #64	; 0x40
   18398:	mov	r0, r6
   1839c:	mov	r1, r5
   183a0:	mov	r2, #1
   183a4:	bl	19984 <__assert_fail@plt+0x8650>
   183a8:	cmp	r5, #0
   183ac:	mov	r1, r5
   183b0:	movwne	r1, #1
   183b4:	cmp	r0, #0
   183b8:	bne	183cc <__assert_fail@plt+0x7098>
   183bc:	clz	r2, r6
   183c0:	lsr	r2, r2, #5
   183c4:	orrs	r1, r2, r1
   183c8:	bne	183d4 <__assert_fail@plt+0x70a0>
   183cc:	str	r5, [r4]
   183d0:	pop	{r4, r5, r6, sl, fp, pc}
   183d4:	bl	1878c <__assert_fail@plt+0x7458>
   183d8:	push	{r4, r5, r6, r7, fp, lr}
   183dc:	add	fp, sp, #16
   183e0:	ldr	r5, [r1]
   183e4:	mov	r6, r2
   183e8:	mov	r4, r1
   183ec:	mov	r7, r0
   183f0:	cmp	r0, #0
   183f4:	beq	1840c <__assert_fail@plt+0x70d8>
   183f8:	mov	r0, #1
   183fc:	add	r0, r0, r5, lsr #1
   18400:	adds	r5, r5, r0
   18404:	bcc	18424 <__assert_fail@plt+0x70f0>
   18408:	b	18458 <__assert_fail@plt+0x7124>
   1840c:	cmp	r5, #0
   18410:	bne	18424 <__assert_fail@plt+0x70f0>
   18414:	mov	r0, #64	; 0x40
   18418:	cmp	r6, #64	; 0x40
   1841c:	udiv	r5, r0, r6
   18420:	addhi	r5, r5, #1
   18424:	mov	r0, r7
   18428:	mov	r1, r5
   1842c:	mov	r2, r6
   18430:	bl	19984 <__assert_fail@plt+0x8650>
   18434:	cmp	r0, #0
   18438:	bne	18450 <__assert_fail@plt+0x711c>
   1843c:	cmp	r7, #0
   18440:	beq	18458 <__assert_fail@plt+0x7124>
   18444:	cmp	r6, #0
   18448:	cmpne	r5, #0
   1844c:	bne	18458 <__assert_fail@plt+0x7124>
   18450:	str	r5, [r4]
   18454:	pop	{r4, r5, r6, r7, fp, pc}
   18458:	bl	1878c <__assert_fail@plt+0x7458>
   1845c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18460:	add	fp, sp, #24
   18464:	mov	r8, r1
   18468:	ldr	r1, [r1]
   1846c:	mov	r5, r0
   18470:	add	r0, r1, r1, asr #1
   18474:	cmp	r0, r1
   18478:	mvnvs	r0, #-2147483648	; 0x80000000
   1847c:	cmp	r0, r3
   18480:	mov	r7, r0
   18484:	movgt	r7, r3
   18488:	cmn	r3, #1
   1848c:	movle	r7, r0
   18490:	ldr	r0, [fp, #8]
   18494:	cmn	r0, #1
   18498:	ble	184c0 <__assert_fail@plt+0x718c>
   1849c:	cmp	r0, #0
   184a0:	beq	18514 <__assert_fail@plt+0x71e0>
   184a4:	cmn	r7, #1
   184a8:	ble	184e8 <__assert_fail@plt+0x71b4>
   184ac:	mvn	r4, #-2147483648	; 0x80000000
   184b0:	udiv	r6, r4, r0
   184b4:	cmp	r6, r7
   184b8:	bge	18514 <__assert_fail@plt+0x71e0>
   184bc:	b	18524 <__assert_fail@plt+0x71f0>
   184c0:	cmn	r7, #1
   184c4:	ble	18504 <__assert_fail@plt+0x71d0>
   184c8:	cmn	r0, #1
   184cc:	beq	18514 <__assert_fail@plt+0x71e0>
   184d0:	mov	r6, #-2147483648	; 0x80000000
   184d4:	mvn	r4, #-2147483648	; 0x80000000
   184d8:	sdiv	r6, r6, r0
   184dc:	cmp	r6, r7
   184e0:	bge	18514 <__assert_fail@plt+0x71e0>
   184e4:	b	18524 <__assert_fail@plt+0x71f0>
   184e8:	beq	18514 <__assert_fail@plt+0x71e0>
   184ec:	mov	r6, #-2147483648	; 0x80000000
   184f0:	mvn	r4, #-2147483648	; 0x80000000
   184f4:	sdiv	r6, r6, r7
   184f8:	cmp	r6, r0
   184fc:	bge	18514 <__assert_fail@plt+0x71e0>
   18500:	b	18524 <__assert_fail@plt+0x71f0>
   18504:	mvn	r4, #-2147483648	; 0x80000000
   18508:	sdiv	r6, r4, r0
   1850c:	cmp	r7, r6
   18510:	blt	18524 <__assert_fail@plt+0x71f0>
   18514:	mul	r6, r7, r0
   18518:	mov	r4, #64	; 0x40
   1851c:	cmp	r6, #63	; 0x3f
   18520:	bgt	1852c <__assert_fail@plt+0x71f8>
   18524:	sdiv	r7, r4, r0
   18528:	mul	r6, r7, r0
   1852c:	cmp	r5, #0
   18530:	moveq	r4, #0
   18534:	streq	r4, [r8]
   18538:	sub	r4, r7, r1
   1853c:	cmp	r4, r2
   18540:	bge	185ec <__assert_fail@plt+0x72b8>
   18544:	add	r7, r1, r2
   18548:	mov	r6, #0
   1854c:	mov	r2, #0
   18550:	cmp	r7, r3
   18554:	movwgt	r6, #1
   18558:	cmn	r3, #1
   1855c:	movwgt	r2, #1
   18560:	cmp	r7, r1
   18564:	bvs	18620 <__assert_fail@plt+0x72ec>
   18568:	ands	r1, r2, r6
   1856c:	bne	18620 <__assert_fail@plt+0x72ec>
   18570:	cmn	r0, #1
   18574:	ble	1859c <__assert_fail@plt+0x7268>
   18578:	cmp	r0, #0
   1857c:	beq	185e8 <__assert_fail@plt+0x72b4>
   18580:	cmn	r7, #1
   18584:	ble	185c0 <__assert_fail@plt+0x728c>
   18588:	mvn	r1, #-2147483648	; 0x80000000
   1858c:	udiv	r1, r1, r0
   18590:	cmp	r1, r7
   18594:	bge	185e8 <__assert_fail@plt+0x72b4>
   18598:	b	18620 <__assert_fail@plt+0x72ec>
   1859c:	cmn	r7, #1
   185a0:	ble	185d8 <__assert_fail@plt+0x72a4>
   185a4:	cmn	r0, #1
   185a8:	beq	185e8 <__assert_fail@plt+0x72b4>
   185ac:	mov	r1, #-2147483648	; 0x80000000
   185b0:	sdiv	r1, r1, r0
   185b4:	cmp	r1, r7
   185b8:	bge	185e8 <__assert_fail@plt+0x72b4>
   185bc:	b	18620 <__assert_fail@plt+0x72ec>
   185c0:	beq	185e8 <__assert_fail@plt+0x72b4>
   185c4:	mov	r1, #-2147483648	; 0x80000000
   185c8:	sdiv	r1, r1, r7
   185cc:	cmp	r1, r0
   185d0:	bge	185e8 <__assert_fail@plt+0x72b4>
   185d4:	b	18620 <__assert_fail@plt+0x72ec>
   185d8:	mvn	r1, #-2147483648	; 0x80000000
   185dc:	sdiv	r1, r1, r0
   185e0:	cmp	r7, r1
   185e4:	blt	18620 <__assert_fail@plt+0x72ec>
   185e8:	mul	r6, r7, r0
   185ec:	mov	r0, r5
   185f0:	mov	r1, r6
   185f4:	bl	19814 <__assert_fail@plt+0x84e0>
   185f8:	cmp	r6, #0
   185fc:	movwne	r6, #1
   18600:	cmp	r0, #0
   18604:	bne	18618 <__assert_fail@plt+0x72e4>
   18608:	clz	r1, r5
   1860c:	lsr	r1, r1, #5
   18610:	orrs	r1, r1, r6
   18614:	bne	18620 <__assert_fail@plt+0x72ec>
   18618:	str	r7, [r8]
   1861c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18620:	bl	1878c <__assert_fail@plt+0x7458>
   18624:	push	{fp, lr}
   18628:	mov	fp, sp
   1862c:	mov	r1, #1
   18630:	bl	19790 <__assert_fail@plt+0x845c>
   18634:	cmp	r0, #0
   18638:	popne	{fp, pc}
   1863c:	bl	1878c <__assert_fail@plt+0x7458>
   18640:	push	{fp, lr}
   18644:	mov	fp, sp
   18648:	bl	19790 <__assert_fail@plt+0x845c>
   1864c:	cmp	r0, #0
   18650:	popne	{fp, pc}
   18654:	bl	1878c <__assert_fail@plt+0x7458>
   18658:	push	{fp, lr}
   1865c:	mov	fp, sp
   18660:	mov	r1, #1
   18664:	bl	19790 <__assert_fail@plt+0x845c>
   18668:	cmp	r0, #0
   1866c:	popne	{fp, pc}
   18670:	bl	1878c <__assert_fail@plt+0x7458>
   18674:	push	{fp, lr}
   18678:	mov	fp, sp
   1867c:	bl	19790 <__assert_fail@plt+0x845c>
   18680:	cmp	r0, #0
   18684:	popne	{fp, pc}
   18688:	bl	1878c <__assert_fail@plt+0x7458>
   1868c:	push	{r4, r5, r6, sl, fp, lr}
   18690:	add	fp, sp, #16
   18694:	mov	r5, r0
   18698:	mov	r0, r1
   1869c:	mov	r4, r1
   186a0:	bl	197e4 <__assert_fail@plt+0x84b0>
   186a4:	cmp	r0, #0
   186a8:	beq	186c4 <__assert_fail@plt+0x7390>
   186ac:	mov	r1, r5
   186b0:	mov	r2, r4
   186b4:	mov	r6, r0
   186b8:	bl	110d0 <memcpy@plt>
   186bc:	mov	r0, r6
   186c0:	pop	{r4, r5, r6, sl, fp, pc}
   186c4:	bl	1878c <__assert_fail@plt+0x7458>
   186c8:	push	{r4, r5, r6, sl, fp, lr}
   186cc:	add	fp, sp, #16
   186d0:	mov	r5, r0
   186d4:	mov	r0, r1
   186d8:	mov	r4, r1
   186dc:	bl	197e4 <__assert_fail@plt+0x84b0>
   186e0:	cmp	r0, #0
   186e4:	beq	18700 <__assert_fail@plt+0x73cc>
   186e8:	mov	r1, r5
   186ec:	mov	r2, r4
   186f0:	mov	r6, r0
   186f4:	bl	110d0 <memcpy@plt>
   186f8:	mov	r0, r6
   186fc:	pop	{r4, r5, r6, sl, fp, pc}
   18700:	bl	1878c <__assert_fail@plt+0x7458>
   18704:	push	{r4, r5, r6, sl, fp, lr}
   18708:	add	fp, sp, #16
   1870c:	mov	r5, r0
   18710:	add	r0, r1, #1
   18714:	mov	r4, r1
   18718:	bl	197e4 <__assert_fail@plt+0x84b0>
   1871c:	cmp	r0, #0
   18720:	beq	18748 <__assert_fail@plt+0x7414>
   18724:	mov	r6, r0
   18728:	mov	r0, #0
   1872c:	mov	r1, r5
   18730:	mov	r2, r4
   18734:	strb	r0, [r6, r4]
   18738:	mov	r0, r6
   1873c:	bl	110d0 <memcpy@plt>
   18740:	mov	r0, r6
   18744:	pop	{r4, r5, r6, sl, fp, pc}
   18748:	bl	1878c <__assert_fail@plt+0x7458>
   1874c:	push	{r4, r5, r6, sl, fp, lr}
   18750:	add	fp, sp, #16
   18754:	mov	r4, r0
   18758:	bl	111fc <strlen@plt>
   1875c:	add	r5, r0, #1
   18760:	mov	r0, r5
   18764:	bl	197e4 <__assert_fail@plt+0x84b0>
   18768:	cmp	r0, #0
   1876c:	beq	18788 <__assert_fail@plt+0x7454>
   18770:	mov	r1, r4
   18774:	mov	r2, r5
   18778:	mov	r6, r0
   1877c:	bl	110d0 <memcpy@plt>
   18780:	mov	r0, r6
   18784:	pop	{r4, r5, r6, sl, fp, pc}
   18788:	bl	1878c <__assert_fail@plt+0x7458>
   1878c:	push	{fp, lr}
   18790:	mov	fp, sp
   18794:	movw	r0, #49424	; 0xc110
   18798:	movw	r1, #47040	; 0xb7c0
   1879c:	mov	r2, #5
   187a0:	movt	r0, #2
   187a4:	movt	r1, #1
   187a8:	ldr	r4, [r0]
   187ac:	mov	r0, #0
   187b0:	bl	1110c <dcgettext@plt>
   187b4:	movw	r2, #45998	; 0xb3ae
   187b8:	mov	r3, r0
   187bc:	mov	r0, r4
   187c0:	mov	r1, #0
   187c4:	movt	r2, #1
   187c8:	bl	11184 <error@plt>
   187cc:	bl	1131c <abort@plt>
   187d0:	sub	sp, sp, #12
   187d4:	push	{r4, r5, r6, sl, fp, lr}
   187d8:	add	fp, sp, #16
   187dc:	sub	sp, sp, #4
   187e0:	movw	r5, #49524	; 0xc174
   187e4:	mov	r4, r0
   187e8:	add	r0, fp, #8
   187ec:	stm	r0, {r1, r2, r3}
   187f0:	movt	r5, #2
   187f4:	add	r3, fp, #8
   187f8:	mov	r1, #1
   187fc:	mov	r2, r4
   18800:	ldr	r0, [r5]
   18804:	str	r3, [sp]
   18808:	bl	111b4 <__vfprintf_chk@plt>
   1880c:	mov	r4, r0
   18810:	cmn	r0, #1
   18814:	bgt	18860 <__assert_fail@plt+0x752c>
   18818:	ldr	r0, [r5]
   1881c:	bl	110b8 <ferror@plt>
   18820:	cmp	r0, #0
   18824:	bne	18860 <__assert_fail@plt+0x752c>
   18828:	movw	r0, #49424	; 0xc110
   1882c:	movt	r0, #2
   18830:	ldr	r5, [r0]
   18834:	bl	11214 <__errno_location@plt>
   18838:	ldr	r6, [r0]
   1883c:	movw	r1, #47057	; 0xb7d1
   18840:	mov	r0, #0
   18844:	mov	r2, #5
   18848:	movt	r1, #1
   1884c:	bl	1110c <dcgettext@plt>
   18850:	mov	r2, r0
   18854:	mov	r0, r5
   18858:	mov	r1, r6
   1885c:	bl	11184 <error@plt>
   18860:	mov	r0, r4
   18864:	sub	sp, fp, #16
   18868:	pop	{r4, r5, r6, sl, fp, lr}
   1886c:	add	sp, sp, #12
   18870:	bx	lr
   18874:	push	{r4, r5, r6, sl, fp, lr}
   18878:	add	fp, sp, #16
   1887c:	movw	r5, #49524	; 0xc174
   18880:	mov	r2, r0
   18884:	mov	r3, r1
   18888:	mov	r1, #1
   1888c:	movt	r5, #2
   18890:	ldr	r0, [r5]
   18894:	bl	111b4 <__vfprintf_chk@plt>
   18898:	mov	r4, r0
   1889c:	cmn	r0, #1
   188a0:	bgt	188b4 <__assert_fail@plt+0x7580>
   188a4:	ldr	r0, [r5]
   188a8:	bl	110b8 <ferror@plt>
   188ac:	cmp	r0, #0
   188b0:	beq	188bc <__assert_fail@plt+0x7588>
   188b4:	mov	r0, r4
   188b8:	pop	{r4, r5, r6, sl, fp, pc}
   188bc:	movw	r0, #49424	; 0xc110
   188c0:	movt	r0, #2
   188c4:	ldr	r5, [r0]
   188c8:	bl	11214 <__errno_location@plt>
   188cc:	ldr	r6, [r0]
   188d0:	movw	r1, #47057	; 0xb7d1
   188d4:	mov	r0, #0
   188d8:	mov	r2, #5
   188dc:	movt	r1, #1
   188e0:	bl	1110c <dcgettext@plt>
   188e4:	mov	r2, r0
   188e8:	mov	r0, r5
   188ec:	mov	r1, r6
   188f0:	bl	11184 <error@plt>
   188f4:	mov	r0, r4
   188f8:	pop	{r4, r5, r6, sl, fp, pc}
   188fc:	sub	sp, sp, #8
   18900:	push	{r4, r5, r6, sl, fp, lr}
   18904:	add	fp, sp, #16
   18908:	sub	sp, sp, #8
   1890c:	mov	r4, r1
   18910:	str	r3, [fp, #12]
   18914:	str	r2, [fp, #8]
   18918:	add	r3, fp, #8
   1891c:	mov	r1, #1
   18920:	mov	r5, r0
   18924:	mov	r2, r4
   18928:	str	r3, [sp, #4]
   1892c:	bl	111b4 <__vfprintf_chk@plt>
   18930:	mov	r4, r0
   18934:	cmn	r0, #1
   18938:	bgt	18984 <__assert_fail@plt+0x7650>
   1893c:	mov	r0, r5
   18940:	bl	110b8 <ferror@plt>
   18944:	cmp	r0, #0
   18948:	bne	18984 <__assert_fail@plt+0x7650>
   1894c:	movw	r0, #49424	; 0xc110
   18950:	movt	r0, #2
   18954:	ldr	r5, [r0]
   18958:	bl	11214 <__errno_location@plt>
   1895c:	ldr	r6, [r0]
   18960:	movw	r1, #47057	; 0xb7d1
   18964:	mov	r0, #0
   18968:	mov	r2, #5
   1896c:	movt	r1, #1
   18970:	bl	1110c <dcgettext@plt>
   18974:	mov	r2, r0
   18978:	mov	r0, r5
   1897c:	mov	r1, r6
   18980:	bl	11184 <error@plt>
   18984:	mov	r0, r4
   18988:	sub	sp, fp, #16
   1898c:	pop	{r4, r5, r6, sl, fp, lr}
   18990:	add	sp, sp, #8
   18994:	bx	lr
   18998:	push	{r4, r5, r6, sl, fp, lr}
   1899c:	add	fp, sp, #16
   189a0:	mov	r3, r2
   189a4:	mov	r2, r1
   189a8:	mov	r1, #1
   189ac:	mov	r5, r0
   189b0:	bl	111b4 <__vfprintf_chk@plt>
   189b4:	mov	r4, r0
   189b8:	cmn	r0, #1
   189bc:	bgt	189d0 <__assert_fail@plt+0x769c>
   189c0:	mov	r0, r5
   189c4:	bl	110b8 <ferror@plt>
   189c8:	cmp	r0, #0
   189cc:	beq	189d8 <__assert_fail@plt+0x76a4>
   189d0:	mov	r0, r4
   189d4:	pop	{r4, r5, r6, sl, fp, pc}
   189d8:	movw	r0, #49424	; 0xc110
   189dc:	movt	r0, #2
   189e0:	ldr	r5, [r0]
   189e4:	bl	11214 <__errno_location@plt>
   189e8:	ldr	r6, [r0]
   189ec:	movw	r1, #47057	; 0xb7d1
   189f0:	mov	r0, #0
   189f4:	mov	r2, #5
   189f8:	movt	r1, #1
   189fc:	bl	1110c <dcgettext@plt>
   18a00:	mov	r2, r0
   18a04:	mov	r0, r5
   18a08:	mov	r1, r6
   18a0c:	bl	11184 <error@plt>
   18a10:	mov	r0, r4
   18a14:	pop	{r4, r5, r6, sl, fp, pc}
   18a18:	push	{fp, lr}
   18a1c:	mov	fp, sp
   18a20:	sub	sp, sp, #8
   18a24:	movw	ip, #49424	; 0xc110
   18a28:	movt	ip, #2
   18a2c:	ldr	ip, [ip]
   18a30:	str	ip, [sp, #4]
   18a34:	ldr	ip, [fp, #8]
   18a38:	str	ip, [sp]
   18a3c:	bl	18a44 <__assert_fail@plt+0x7710>
   18a40:	bl	1131c <abort@plt>
   18a44:	push	{r4, r5, r6, r7, fp, lr}
   18a48:	add	fp, sp, #16
   18a4c:	sub	sp, sp, #16
   18a50:	sub	r0, r0, #1
   18a54:	cmp	r0, #4
   18a58:	bcs	18ad8 <__assert_fail@plt+0x77a4>
   18a5c:	mov	r5, r1
   18a60:	movw	r1, #47188	; 0xb854
   18a64:	ldr	r4, [fp, #12]
   18a68:	ldr	r6, [fp, #8]
   18a6c:	movt	r1, #1
   18a70:	cmn	r5, #1
   18a74:	ldr	r1, [r1, r0, lsl #2]
   18a78:	ble	18a8c <__assert_fail@plt+0x7758>
   18a7c:	ldr	r7, [r3, r5, lsl #4]
   18a80:	movw	r5, #47089	; 0xb7f1
   18a84:	movt	r5, #1
   18a88:	b	18aa8 <__assert_fail@plt+0x7774>
   18a8c:	mov	r0, #0
   18a90:	add	r7, sp, #14
   18a94:	strb	r0, [sp, #15]
   18a98:	movw	r0, #47089	; 0xb7f1
   18a9c:	strb	r2, [sp, #14]
   18aa0:	movt	r0, #1
   18aa4:	sub	r5, r0, r5
   18aa8:	mov	r0, #0
   18aac:	mov	r2, #5
   18ab0:	bl	1110c <dcgettext@plt>
   18ab4:	mov	r2, r0
   18ab8:	mov	r0, r4
   18abc:	mov	r1, #0
   18ac0:	mov	r3, r5
   18ac4:	str	r7, [sp]
   18ac8:	str	r6, [sp, #4]
   18acc:	bl	11184 <error@plt>
   18ad0:	sub	sp, fp, #16
   18ad4:	pop	{r4, r5, r6, r7, fp, pc}
   18ad8:	bl	1131c <abort@plt>
   18adc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ae0:	add	fp, sp, #28
   18ae4:	sub	sp, sp, #44	; 0x2c
   18ae8:	cmp	r2, #37	; 0x25
   18aec:	bcs	19770 <__assert_fail@plt+0x843c>
   18af0:	ldr	sl, [fp, #8]
   18af4:	mov	r6, r2
   18af8:	mov	r7, r1
   18afc:	mov	r4, r0
   18b00:	str	r3, [sp, #36]	; 0x24
   18b04:	bl	11214 <__errno_location@plt>
   18b08:	mov	r5, r0
   18b0c:	mov	r0, #0
   18b10:	str	r0, [r5]
   18b14:	bl	111e4 <__ctype_b_loc@plt>
   18b18:	ldr	r1, [r0]
   18b1c:	mov	r2, r4
   18b20:	ldrb	r0, [r2], #1
   18b24:	add	r3, r1, r0, lsl #1
   18b28:	ldrb	r3, [r3, #1]
   18b2c:	tst	r3, #32
   18b30:	bne	18b20 <__assert_fail@plt+0x77ec>
   18b34:	sub	r9, fp, #32
   18b38:	cmp	r7, #0
   18b3c:	mov	r8, #4
   18b40:	movne	r9, r7
   18b44:	cmp	r0, #45	; 0x2d
   18b48:	beq	18f08 <__assert_fail@plt+0x7bd4>
   18b4c:	mov	r0, r4
   18b50:	mov	r1, r9
   18b54:	mov	r2, r6
   18b58:	mov	r3, #0
   18b5c:	bl	110dc <__strtoull_internal@plt>
   18b60:	mov	r7, r1
   18b64:	ldr	r1, [r9]
   18b68:	cmp	r1, r4
   18b6c:	beq	18ba4 <__assert_fail@plt+0x7870>
   18b70:	mov	r6, r0
   18b74:	ldr	r0, [r5]
   18b78:	cmp	r0, #0
   18b7c:	beq	18ec0 <__assert_fail@plt+0x7b8c>
   18b80:	cmp	r0, #34	; 0x22
   18b84:	bne	18f08 <__assert_fail@plt+0x7bd4>
   18b88:	mov	r8, #1
   18b8c:	cmp	sl, #0
   18b90:	beq	1975c <__assert_fail@plt+0x8428>
   18b94:	ldrb	r4, [r1]
   18b98:	cmp	r4, #0
   18b9c:	bne	18be8 <__assert_fail@plt+0x78b4>
   18ba0:	b	1975c <__assert_fail@plt+0x8428>
   18ba4:	cmp	sl, #0
   18ba8:	beq	18f08 <__assert_fail@plt+0x7bd4>
   18bac:	mov	r5, r1
   18bb0:	ldrb	r1, [r4]
   18bb4:	cmp	r1, #0
   18bb8:	beq	18f08 <__assert_fail@plt+0x7bd4>
   18bbc:	mov	r0, sl
   18bc0:	bl	11208 <strchr@plt>
   18bc4:	cmp	r0, #0
   18bc8:	beq	18f08 <__assert_fail@plt+0x7bd4>
   18bcc:	mov	r1, r5
   18bd0:	mov	r8, #0
   18bd4:	mov	r6, #1
   18bd8:	mov	r7, #0
   18bdc:	ldrb	r4, [r1]
   18be0:	cmp	r4, #0
   18be4:	beq	1975c <__assert_fail@plt+0x8428>
   18be8:	str	r1, [sp, #32]
   18bec:	mov	r0, sl
   18bf0:	mov	r1, r4
   18bf4:	bl	11208 <strchr@plt>
   18bf8:	cmp	r0, #0
   18bfc:	beq	18efc <__assert_fail@plt+0x7bc8>
   18c00:	sub	r0, r4, #69	; 0x45
   18c04:	mov	r1, #1
   18c08:	mov	r3, #0
   18c0c:	mov	r5, #1024	; 0x400
   18c10:	cmp	r0, #47	; 0x2f
   18c14:	str	r1, [sp, #28]
   18c18:	bhi	18d1c <__assert_fail@plt+0x79e8>
   18c1c:	add	r1, pc, #0
   18c20:	ldr	pc, [r1, r0, lsl #2]
   18c24:	andeq	r8, r1, r4, ror #25
   18c28:	andeq	r8, r1, ip, lsl sp
   18c2c:	andeq	r8, r1, r4, ror #25
   18c30:	andeq	r8, r1, ip, lsl sp
   18c34:	andeq	r8, r1, ip, lsl sp
   18c38:	andeq	r8, r1, ip, lsl sp
   18c3c:	andeq	r8, r1, r4, ror #25
   18c40:	andeq	r8, r1, ip, lsl sp
   18c44:	andeq	r8, r1, r4, ror #25
   18c48:	andeq	r8, r1, ip, lsl sp
   18c4c:	andeq	r8, r1, ip, lsl sp
   18c50:	andeq	r8, r1, r4, ror #25
   18c54:	andeq	r8, r1, ip, lsl sp
   18c58:	andeq	r8, r1, ip, lsl sp
   18c5c:	andeq	r8, r1, ip, lsl sp
   18c60:	andeq	r8, r1, r4, ror #25
   18c64:	andeq	r8, r1, ip, lsl sp
   18c68:	andeq	r8, r1, ip, lsl sp
   18c6c:	andeq	r8, r1, ip, lsl sp
   18c70:	andeq	r8, r1, ip, lsl sp
   18c74:	andeq	r8, r1, r4, ror #25
   18c78:	andeq	r8, r1, r4, ror #25
   18c7c:	andeq	r8, r1, ip, lsl sp
   18c80:	andeq	r8, r1, ip, lsl sp
   18c84:	andeq	r8, r1, ip, lsl sp
   18c88:	andeq	r8, r1, ip, lsl sp
   18c8c:	andeq	r8, r1, ip, lsl sp
   18c90:	andeq	r8, r1, ip, lsl sp
   18c94:	andeq	r8, r1, ip, lsl sp
   18c98:	andeq	r8, r1, ip, lsl sp
   18c9c:	andeq	r8, r1, ip, lsl sp
   18ca0:	andeq	r8, r1, ip, lsl sp
   18ca4:	andeq	r8, r1, ip, lsl sp
   18ca8:	andeq	r8, r1, ip, lsl sp
   18cac:	andeq	r8, r1, r4, ror #25
   18cb0:	andeq	r8, r1, ip, lsl sp
   18cb4:	andeq	r8, r1, ip, lsl sp
   18cb8:	andeq	r8, r1, ip, lsl sp
   18cbc:	andeq	r8, r1, r4, ror #25
   18cc0:	andeq	r8, r1, ip, lsl sp
   18cc4:	andeq	r8, r1, r4, ror #25
   18cc8:	andeq	r8, r1, ip, lsl sp
   18ccc:	andeq	r8, r1, ip, lsl sp
   18cd0:	andeq	r8, r1, ip, lsl sp
   18cd4:	andeq	r8, r1, ip, lsl sp
   18cd8:	andeq	r8, r1, ip, lsl sp
   18cdc:	andeq	r8, r1, ip, lsl sp
   18ce0:	andeq	r8, r1, r4, ror #25
   18ce4:	mov	r0, sl
   18ce8:	mov	r1, #48	; 0x30
   18cec:	bl	11208 <strchr@plt>
   18cf0:	cmp	r0, #0
   18cf4:	beq	18d18 <__assert_fail@plt+0x79e4>
   18cf8:	ldr	r1, [sp, #32]
   18cfc:	ldrb	r0, [r1, #1]
   18d00:	cmp	r0, #66	; 0x42
   18d04:	cmpne	r0, #68	; 0x44
   18d08:	bne	18ed0 <__assert_fail@plt+0x7b9c>
   18d0c:	mov	r5, #1000	; 0x3e8
   18d10:	mov	r0, #2
   18d14:	str	r0, [sp, #28]
   18d18:	mov	r3, #0
   18d1c:	sub	r0, r4, #66	; 0x42
   18d20:	cmp	r0, #53	; 0x35
   18d24:	bhi	18efc <__assert_fail@plt+0x7bc8>
   18d28:	add	r1, pc, #0
   18d2c:	ldr	pc, [r1, r0, lsl #2]
   18d30:	andeq	r9, r1, ip, ror #4
   18d34:	strdeq	r8, [r1], -ip
   18d38:	strdeq	r8, [r1], -ip
   18d3c:	muleq	r1, r4, r2
   18d40:	strdeq	r8, [r1], -ip
   18d44:	andeq	r8, r1, r8, lsl #28
   18d48:	strdeq	r8, [r1], -ip
   18d4c:	strdeq	r8, [r1], -ip
   18d50:	strdeq	r8, [r1], -ip
   18d54:	andeq	r8, r1, r4, lsl pc
   18d58:	strdeq	r8, [r1], -ip
   18d5c:	andeq	r8, r1, ip, asr pc
   18d60:	strdeq	r8, [r1], -ip
   18d64:	strdeq	r8, [r1], -ip
   18d68:	andeq	r9, r1, r8, ror #7
   18d6c:	strdeq	r8, [r1], -ip
   18d70:	strdeq	r8, [r1], -ip
   18d74:	strdeq	r8, [r1], -ip
   18d78:	andeq	r8, r1, r8, ror #31
   18d7c:	strdeq	r8, [r1], -ip
   18d80:	strdeq	r8, [r1], -ip
   18d84:	strdeq	r8, [r1], -ip
   18d88:	strdeq	r8, [r1], -ip
   18d8c:	andeq	r9, r1, r0, lsl r5
   18d90:	ldrdeq	r9, [r1], -r0
   18d94:	strdeq	r8, [r1], -ip
   18d98:	strdeq	r8, [r1], -ip
   18d9c:	strdeq	r8, [r1], -ip
   18da0:	strdeq	r8, [r1], -ip
   18da4:	strdeq	r8, [r1], -ip
   18da8:	strdeq	r8, [r1], -ip
   18dac:	strdeq	r8, [r1], -ip
   18db0:	andeq	r9, r1, r4, ror #13
   18db4:	andeq	r9, r1, ip, lsr r7
   18db8:	strdeq	r8, [r1], -ip
   18dbc:	strdeq	r8, [r1], -ip
   18dc0:	strdeq	r8, [r1], -ip
   18dc4:	andeq	r8, r1, r8, lsl #28
   18dc8:	strdeq	r8, [r1], -ip
   18dcc:	strdeq	r8, [r1], -ip
   18dd0:	strdeq	r8, [r1], -ip
   18dd4:	andeq	r8, r1, r4, lsl pc
   18dd8:	strdeq	r8, [r1], -ip
   18ddc:	andeq	r8, r1, ip, asr pc
   18de0:	strdeq	r8, [r1], -ip
   18de4:	strdeq	r8, [r1], -ip
   18de8:	strdeq	r8, [r1], -ip
   18dec:	strdeq	r8, [r1], -ip
   18df0:	strdeq	r8, [r1], -ip
   18df4:	strdeq	r8, [r1], -ip
   18df8:	andeq	r8, r1, r8, ror #31
   18dfc:	strdeq	r8, [r1], -ip
   18e00:	strdeq	r8, [r1], -ip
   18e04:	andeq	r9, r1, r8, lsl r7
   18e08:	mvn	r0, #0
   18e0c:	mvn	r1, #0
   18e10:	mov	r2, r5
   18e14:	mov	sl, r3
   18e18:	bl	19ac8 <__assert_fail@plt+0x8794>
   18e1c:	subs	r3, r0, r6
   18e20:	mov	lr, #0
   18e24:	umull	r4, r2, r6, r5
   18e28:	str	r1, [sp, #20]
   18e2c:	sbcs	r3, r1, r7
   18e30:	mla	ip, r6, sl, r2
   18e34:	mov	r2, r1
   18e38:	movwcc	lr, #1
   18e3c:	mla	r7, r7, r5, ip
   18e40:	mov	r2, #0
   18e44:	cmp	lr, #0
   18e48:	mvnne	r4, #0
   18e4c:	mvnne	r7, #0
   18e50:	subs	r6, r0, r4
   18e54:	sbcs	r6, r1, r7
   18e58:	movwcc	r2, #1
   18e5c:	umull	r3, r6, r4, r5
   18e60:	cmp	r2, #0
   18e64:	str	r6, [sp, #16]
   18e68:	mvnne	r3, #0
   18e6c:	cmp	r2, #0
   18e70:	umull	r6, ip, r3, r5
   18e74:	mla	r1, r3, sl, ip
   18e78:	ldr	ip, [sp, #16]
   18e7c:	str	r1, [sp, #12]
   18e80:	mla	r4, r4, sl, ip
   18e84:	mla	r4, r7, r5, r4
   18e88:	ldr	r7, [sp, #12]
   18e8c:	mvnne	r4, #0
   18e90:	subs	r0, r0, r3
   18e94:	ldr	r0, [sp, #20]
   18e98:	mla	r7, r4, r5, r7
   18e9c:	sbcs	r0, r0, r4
   18ea0:	mov	r0, #0
   18ea4:	movwcc	r0, #1
   18ea8:	cmp	r0, #0
   18eac:	mov	r1, r0
   18eb0:	orr	r0, lr, r2
   18eb4:	mvnne	r7, #0
   18eb8:	mvnne	r6, #0
   18ebc:	b	19508 <__assert_fail@plt+0x81d4>
   18ec0:	mov	r8, r0
   18ec4:	cmp	sl, #0
   18ec8:	bne	18b94 <__assert_fail@plt+0x7860>
   18ecc:	b	1975c <__assert_fail@plt+0x8428>
   18ed0:	cmp	r0, #105	; 0x69
   18ed4:	mov	r3, #0
   18ed8:	bne	18d1c <__assert_fail@plt+0x79e8>
   18edc:	ldrb	r0, [r1, #2]
   18ee0:	mov	r1, #1
   18ee4:	cmp	r0, #66	; 0x42
   18ee8:	movweq	r1, #3
   18eec:	str	r1, [sp, #28]
   18ef0:	sub	r0, r4, #66	; 0x42
   18ef4:	cmp	r0, #53	; 0x35
   18ef8:	bls	18d28 <__assert_fail@plt+0x79f4>
   18efc:	ldr	r0, [sp, #36]	; 0x24
   18f00:	orr	r8, r8, #2
   18f04:	strd	r6, [r0]
   18f08:	mov	r0, r8
   18f0c:	sub	sp, fp, #28
   18f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f14:	mvn	r0, #0
   18f18:	mvn	r1, #0
   18f1c:	mov	r2, r5
   18f20:	mov	r4, r3
   18f24:	bl	19ac8 <__assert_fail@plt+0x8794>
   18f28:	subs	r0, r0, r6
   18f2c:	mov	r2, #0
   18f30:	sbcs	r0, r1, r7
   18f34:	movwcc	r2, #1
   18f38:	umull	r0, r1, r6, r5
   18f3c:	mla	r1, r6, r4, r1
   18f40:	cmp	r2, #0
   18f44:	mov	r3, r2
   18f48:	mla	r7, r7, r5, r1
   18f4c:	mvnne	r0, #0
   18f50:	mvnne	r7, #0
   18f54:	mov	r6, r0
   18f58:	b	1973c <__assert_fail@plt+0x8408>
   18f5c:	mvn	r0, #0
   18f60:	mvn	r1, #0
   18f64:	mov	r2, r5
   18f68:	str	r3, [sp, #24]
   18f6c:	bl	19ac8 <__assert_fail@plt+0x8794>
   18f70:	subs	r3, r0, r6
   18f74:	mov	ip, r0
   18f78:	umull	r4, r0, r6, r5
   18f7c:	mov	sl, #0
   18f80:	sbcs	r3, r1, r7
   18f84:	str	r0, [sp, #20]
   18f88:	ldr	r0, [sp, #24]
   18f8c:	mov	r3, #0
   18f90:	movwcc	r3, #1
   18f94:	cmp	r3, #0
   18f98:	mvnne	r4, #0
   18f9c:	cmp	r3, #0
   18fa0:	umull	lr, r2, r4, r5
   18fa4:	mla	r2, r4, r0, r2
   18fa8:	str	r2, [sp, #16]
   18fac:	ldr	r2, [sp, #20]
   18fb0:	mla	r6, r6, r0, r2
   18fb4:	ldr	r0, [sp, #16]
   18fb8:	mla	r6, r7, r5, r6
   18fbc:	mvnne	r6, #0
   18fc0:	mla	r7, r6, r5, r0
   18fc4:	subs	r0, ip, r4
   18fc8:	sbcs	r0, r1, r6
   18fcc:	movwcc	sl, #1
   18fd0:	cmp	sl, #0
   18fd4:	orr	r3, r3, sl
   18fd8:	mvnne	lr, #0
   18fdc:	mvnne	r7, #0
   18fe0:	mov	r6, lr
   18fe4:	b	1973c <__assert_fail@plt+0x8408>
   18fe8:	mvn	r0, #0
   18fec:	mvn	r1, #0
   18ff0:	mov	r2, r5
   18ff4:	mov	sl, r3
   18ff8:	bl	19ac8 <__assert_fail@plt+0x8794>
   18ffc:	subs	r3, r0, r6
   19000:	mov	ip, r1
   19004:	umull	r2, lr, r6, r5
   19008:	str	r0, [sp, #20]
   1900c:	sbcs	r3, r1, r7
   19010:	mov	r1, #0
   19014:	mla	r6, r6, sl, lr
   19018:	mov	lr, #0
   1901c:	str	ip, [sp, #16]
   19020:	movwcc	r1, #1
   19024:	mla	r7, r7, r5, r6
   19028:	cmp	r1, #0
   1902c:	mvnne	r2, #0
   19030:	cmp	r1, #0
   19034:	umull	r3, r4, r2, r5
   19038:	mvnne	r7, #0
   1903c:	mla	r4, r2, sl, r4
   19040:	subs	r2, r0, r2
   19044:	sbcs	r2, ip, r7
   19048:	mla	r4, r7, r5, r4
   1904c:	movwcc	lr, #1
   19050:	mov	r2, #0
   19054:	cmp	lr, #0
   19058:	mvnne	r3, #0
   1905c:	mvnne	r4, #0
   19060:	subs	r7, r0, r3
   19064:	mov	r0, r5
   19068:	sbcs	r7, ip, r4
   1906c:	movwcc	r2, #1
   19070:	umull	r5, r7, r3, r5
   19074:	cmp	r2, #0
   19078:	mla	r3, r3, sl, r7
   1907c:	mvnne	r5, #0
   19080:	mla	r3, r4, r0, r3
   19084:	cmp	r2, #0
   19088:	umull	r6, ip, r5, r0
   1908c:	mvnne	r3, #0
   19090:	mla	ip, r5, sl, ip
   19094:	mla	r7, r3, r0, ip
   19098:	ldr	r0, [sp, #20]
   1909c:	subs	r0, r0, r5
   190a0:	ldr	r0, [sp, #16]
   190a4:	sbcs	r0, r0, r3
   190a8:	mov	r0, #0
   190ac:	movwcc	r0, #1
   190b0:	cmp	r0, #0
   190b4:	mov	r3, r0
   190b8:	orr	r0, r1, lr
   190bc:	orr	r0, r0, r2
   190c0:	mvnne	r7, #0
   190c4:	mvnne	r6, #0
   190c8:	orr	r3, r0, r3
   190cc:	b	1973c <__assert_fail@plt+0x8408>
   190d0:	mvn	r0, #0
   190d4:	mvn	r1, #0
   190d8:	mov	r2, r5
   190dc:	mov	r4, r3
   190e0:	str	r3, [sp, #24]
   190e4:	bl	19ac8 <__assert_fail@plt+0x8794>
   190e8:	umull	r3, r2, r6, r5
   190ec:	mla	r2, r6, r4, r2
   190f0:	subs	r6, r0, r6
   190f4:	sbcs	r6, r1, r7
   190f8:	mla	r2, r7, r5, r2
   190fc:	mov	r7, #0
   19100:	mov	r6, #0
   19104:	movwcc	r6, #1
   19108:	cmp	r6, #0
   1910c:	str	r6, [sp, #20]
   19110:	mvnne	r3, #0
   19114:	mvnne	r2, #0
   19118:	subs	r4, r0, r3
   1911c:	umull	r6, ip, r3, r5
   19120:	sbcs	r4, r1, r2
   19124:	ldr	r4, [sp, #24]
   19128:	movwcc	r7, #1
   1912c:	cmp	r7, #0
   19130:	mov	lr, r7
   19134:	str	r7, [sp, #16]
   19138:	mvnne	r6, #0
   1913c:	cmp	lr, #0
   19140:	mov	lr, #0
   19144:	umull	sl, r7, r6, r5
   19148:	mla	r3, r3, r4, ip
   1914c:	mla	r7, r6, r4, r7
   19150:	mov	r4, r0
   19154:	mla	r2, r2, r5, r3
   19158:	mvnne	r2, #0
   1915c:	subs	r3, r0, r6
   19160:	mov	r0, #0
   19164:	mla	r7, r2, r5, r7
   19168:	sbcs	r2, r1, r2
   1916c:	mov	r3, r4
   19170:	movwcc	r0, #1
   19174:	str	r3, [sp, #4]
   19178:	cmp	r0, #0
   1917c:	str	r0, [sp, #12]
   19180:	mov	r0, r1
   19184:	mvnne	sl, #0
   19188:	mvnne	r7, #0
   1918c:	str	r0, [sp, #8]
   19190:	subs	r2, r4, sl
   19194:	ldr	r4, [sp, #24]
   19198:	sbcs	r2, r1, r7
   1919c:	movwcc	lr, #1
   191a0:	umull	r6, r2, sl, r5
   191a4:	cmp	lr, #0
   191a8:	mvnne	r6, #0
   191ac:	mla	r2, sl, r4, r2
   191b0:	cmp	lr, #0
   191b4:	umull	r1, ip, r6, r5
   191b8:	mla	r2, r7, r5, r2
   191bc:	mla	ip, r6, r4, ip
   191c0:	mvnne	r2, #0
   191c4:	subs	r6, r3, r6
   191c8:	mla	r7, r2, r5, ip
   191cc:	sbcs	r2, r0, r2
   191d0:	mov	ip, #0
   191d4:	movwcc	ip, #1
   191d8:	mov	r2, #0
   191dc:	cmp	ip, #0
   191e0:	mvnne	r1, #0
   191e4:	mvnne	r7, #0
   191e8:	subs	r6, r3, r1
   191ec:	ldr	r3, [sp, #24]
   191f0:	sbcs	r6, r0, r7
   191f4:	umull	r0, sl, r1, r5
   191f8:	movwcc	r2, #1
   191fc:	cmp	r2, #0
   19200:	mvnne	r0, #0
   19204:	mla	r1, r1, r3, sl
   19208:	cmp	r2, #0
   1920c:	umull	r6, r4, r0, r5
   19210:	mla	r1, r7, r5, r1
   19214:	mla	r4, r0, r3, r4
   19218:	ldr	r3, [sp, #4]
   1921c:	mvnne	r1, #0
   19220:	mla	r7, r1, r5, r4
   19224:	ldr	r5, [sp, #16]
   19228:	subs	r0, r3, r0
   1922c:	ldr	r0, [sp, #8]
   19230:	sbcs	r0, r0, r1
   19234:	mov	r0, #0
   19238:	movwcc	r0, #1
   1923c:	cmp	r0, #0
   19240:	mov	r1, r0
   19244:	ldr	r0, [sp, #20]
   19248:	mvnne	r7, #0
   1924c:	mvnne	r6, #0
   19250:	orr	r0, r0, r5
   19254:	ldr	r5, [sp, #12]
   19258:	orr	r0, r0, r5
   1925c:	orr	r0, r0, lr
   19260:	orr	r0, r0, ip
   19264:	orr	r0, r0, r2
   19268:	b	196d8 <__assert_fail@plt+0x83a4>
   1926c:	mov	r1, #0
   19270:	lsl	r2, r7, #10
   19274:	lsl	r0, r6, #10
   19278:	lsr	r3, r7, #22
   1927c:	cmp	r1, r7, lsr #22
   19280:	orr	r2, r2, r6, lsr #22
   19284:	mvnne	r0, #0
   19288:	movwne	r3, #1
   1928c:	cmp	r1, r7, lsr #22
   19290:	b	19708 <__assert_fail@plt+0x83d4>
   19294:	mvn	r0, #0
   19298:	mvn	r1, #0
   1929c:	mov	r2, r5
   192a0:	mov	sl, r3
   192a4:	bl	19ac8 <__assert_fail@plt+0x8794>
   192a8:	subs	r2, r0, r6
   192ac:	mov	ip, r0
   192b0:	mov	r0, #0
   192b4:	sbcs	r2, r1, r7
   192b8:	movwcc	r0, #1
   192bc:	umull	r4, r2, r6, r5
   192c0:	cmp	r0, #0
   192c4:	mla	r2, r6, sl, r2
   192c8:	str	r0, [sp, #20]
   192cc:	mvnne	r4, #0
   192d0:	cmp	r0, #0
   192d4:	mla	r2, r7, r5, r2
   192d8:	mov	r0, #0
   192dc:	umull	lr, r3, r4, r5
   192e0:	mvnne	r2, #0
   192e4:	mla	r3, r4, sl, r3
   192e8:	mla	r6, r2, r5, r3
   192ec:	subs	r3, ip, r4
   192f0:	sbcs	r2, r1, r2
   192f4:	mov	r3, r1
   192f8:	movwcc	r0, #1
   192fc:	str	r3, [sp, #8]
   19300:	cmp	r0, #0
   19304:	str	r0, [sp, #16]
   19308:	mov	r0, ip
   1930c:	mvnne	lr, #0
   19310:	mvnne	r6, #0
   19314:	str	r0, [sp, #12]
   19318:	subs	r2, ip, lr
   1931c:	umull	r7, r4, lr, r5
   19320:	sbcs	r2, r1, r6
   19324:	mla	r4, lr, sl, r4
   19328:	mov	r2, #0
   1932c:	mla	r6, r6, r5, r4
   19330:	mov	r4, #0
   19334:	movwcc	r2, #1
   19338:	cmp	r2, #0
   1933c:	mvnne	r7, #0
   19340:	cmp	r2, #0
   19344:	umull	r1, ip, r7, r5
   19348:	mvnne	r6, #0
   1934c:	mla	ip, r7, sl, ip
   19350:	subs	r7, r0, r7
   19354:	mla	lr, r6, r5, ip
   19358:	sbcs	r7, r3, r6
   1935c:	mov	ip, #0
   19360:	movwcc	ip, #1
   19364:	cmp	ip, #0
   19368:	mvnne	r1, #0
   1936c:	mvnne	lr, #0
   19370:	subs	r7, r0, r1
   19374:	sbcs	r7, r3, lr
   19378:	movwcc	r4, #1
   1937c:	umull	r0, r7, r1, r5
   19380:	cmp	r4, #0
   19384:	mla	r1, r1, sl, r7
   19388:	mvnne	r0, #0
   1938c:	mla	r1, lr, r5, r1
   19390:	cmp	r4, #0
   19394:	umull	r6, r3, r0, r5
   19398:	mvnne	r1, #0
   1939c:	mla	r3, r0, sl, r3
   193a0:	mla	r7, r1, r5, r3
   193a4:	ldr	r3, [sp, #12]
   193a8:	subs	r0, r3, r0
   193ac:	ldr	r3, [sp, #16]
   193b0:	ldr	r0, [sp, #8]
   193b4:	sbcs	r0, r0, r1
   193b8:	mov	r0, #0
   193bc:	movwcc	r0, #1
   193c0:	cmp	r0, #0
   193c4:	mov	r1, r0
   193c8:	ldr	r0, [sp, #20]
   193cc:	mvnne	r7, #0
   193d0:	mvnne	r6, #0
   193d4:	orr	r0, r0, r3
   193d8:	orr	r0, r0, r2
   193dc:	orr	r0, r0, ip
   193e0:	orr	r0, r0, r4
   193e4:	b	19508 <__assert_fail@plt+0x81d4>
   193e8:	mvn	r0, #0
   193ec:	mvn	r1, #0
   193f0:	mov	r2, r5
   193f4:	mov	sl, r3
   193f8:	bl	19ac8 <__assert_fail@plt+0x8794>
   193fc:	umull	r3, r2, r6, r5
   19400:	mov	lr, r1
   19404:	mov	r1, r0
   19408:	mla	r2, r6, sl, r2
   1940c:	subs	r6, r0, r6
   19410:	mov	r0, #0
   19414:	sbcs	r6, lr, r7
   19418:	mla	r2, r7, r5, r2
   1941c:	movwcc	r0, #1
   19420:	cmp	r0, #0
   19424:	str	r0, [sp, #20]
   19428:	mov	r0, r1
   1942c:	mvnne	r3, #0
   19430:	mvnne	r2, #0
   19434:	str	r0, [sp, #16]
   19438:	subs	r4, r1, r3
   1943c:	umull	r7, ip, r3, r5
   19440:	sbcs	r4, lr, r2
   19444:	mla	r3, r3, sl, ip
   19448:	mov	ip, #0
   1944c:	mov	r4, #0
   19450:	mla	r2, r2, r5, r3
   19454:	movwcc	r4, #1
   19458:	cmp	r4, #0
   1945c:	mvnne	r7, #0
   19460:	cmp	r4, #0
   19464:	umull	r1, r6, r7, r5
   19468:	mvnne	r2, #0
   1946c:	mla	r6, r7, sl, r6
   19470:	mla	r3, r2, r5, r6
   19474:	subs	r6, r0, r7
   19478:	sbcs	r2, lr, r2
   1947c:	movwcc	ip, #1
   19480:	mov	r2, #0
   19484:	cmp	ip, #0
   19488:	mvnne	r1, #0
   1948c:	mvnne	r3, #0
   19490:	subs	r6, r0, r1
   19494:	sbcs	r6, lr, r3
   19498:	movwcc	r2, #1
   1949c:	umull	r0, r6, r1, r5
   194a0:	cmp	r2, #0
   194a4:	str	r6, [sp, #12]
   194a8:	mvnne	r0, #0
   194ac:	cmp	r2, #0
   194b0:	umull	r6, r7, r0, r5
   194b4:	mla	r7, r0, sl, r7
   194b8:	str	r7, [sp, #8]
   194bc:	ldr	r7, [sp, #12]
   194c0:	mla	r1, r1, sl, r7
   194c4:	mla	r1, r3, r5, r1
   194c8:	ldr	r3, [sp, #8]
   194cc:	mvnne	r1, #0
   194d0:	mla	r7, r1, r5, r3
   194d4:	ldr	r3, [sp, #16]
   194d8:	subs	r0, r3, r0
   194dc:	sbcs	r0, lr, r1
   194e0:	mov	r0, #0
   194e4:	movwcc	r0, #1
   194e8:	cmp	r0, #0
   194ec:	mov	r1, r0
   194f0:	ldr	r0, [sp, #20]
   194f4:	mvnne	r7, #0
   194f8:	mvnne	r6, #0
   194fc:	orr	r0, r0, r4
   19500:	orr	r0, r0, ip
   19504:	orr	r0, r0, r2
   19508:	orr	r3, r0, r1
   1950c:	b	1973c <__assert_fail@plt+0x8408>
   19510:	mvn	r0, #0
   19514:	mvn	r1, #0
   19518:	mov	r2, r5
   1951c:	mov	sl, r3
   19520:	bl	19ac8 <__assert_fail@plt+0x8794>
   19524:	mov	ip, r1
   19528:	subs	r1, r0, r6
   1952c:	umull	r3, lr, r6, r5
   19530:	mov	r2, r5
   19534:	sbcs	r1, ip, r7
   19538:	mla	r6, r6, sl, lr
   1953c:	str	ip, [sp, #4]
   19540:	mov	r1, #0
   19544:	mla	r7, r7, r2, r6
   19548:	movwcc	r1, #1
   1954c:	cmp	r1, #0
   19550:	str	r1, [sp, #20]
   19554:	mvnne	r3, #0
   19558:	cmp	r1, #0
   1955c:	mov	r1, r0
   19560:	umull	r4, r5, r3, r5
   19564:	mvnne	r7, #0
   19568:	mov	lr, r1
   1956c:	mla	r5, r3, sl, r5
   19570:	subs	r3, r0, r3
   19574:	sbcs	r0, ip, r7
   19578:	mla	r5, r7, r2, r5
   1957c:	mov	r0, #0
   19580:	movwcc	r0, #1
   19584:	cmp	r0, #0
   19588:	str	r0, [sp, #16]
   1958c:	mvnne	r4, #0
   19590:	mvnne	r5, #0
   19594:	subs	r0, r1, r4
   19598:	mov	r1, #0
   1959c:	sbcs	r0, ip, r5
   195a0:	movwcc	r1, #1
   195a4:	umull	r3, r0, r4, r2
   195a8:	cmp	r1, #0
   195ac:	mla	r0, r4, sl, r0
   195b0:	mov	r4, lr
   195b4:	str	r1, [sp, #12]
   195b8:	mvnne	r3, #0
   195bc:	mla	r0, r5, r2, r0
   195c0:	cmp	r1, #0
   195c4:	str	r4, [sp]
   195c8:	umull	r7, r6, r3, r2
   195cc:	mvnne	r0, #0
   195d0:	mla	r6, r3, sl, r6
   195d4:	subs	r3, lr, r3
   195d8:	mla	r5, r0, r2, r6
   195dc:	sbcs	r0, ip, r0
   195e0:	mov	r3, #0
   195e4:	mov	r0, #0
   195e8:	movwcc	r0, #1
   195ec:	cmp	r0, #0
   195f0:	str	r0, [sp, #8]
   195f4:	mvnne	r7, #0
   195f8:	mvnne	r5, #0
   195fc:	subs	r0, lr, r7
   19600:	sbcs	r0, ip, r5
   19604:	movwcc	r3, #1
   19608:	umull	r6, r0, r7, r2
   1960c:	cmp	r3, #0
   19610:	mla	r7, r7, sl, r0
   19614:	mov	r0, ip
   19618:	mvnne	r6, #0
   1961c:	mla	r7, r5, r2, r7
   19620:	cmp	r3, #0
   19624:	mov	r5, #0
   19628:	umull	r1, lr, r6, r2
   1962c:	mvnne	r7, #0
   19630:	mla	lr, r6, sl, lr
   19634:	subs	r6, r4, r6
   19638:	mla	lr, r7, r2, lr
   1963c:	sbcs	r7, ip, r7
   19640:	mov	ip, #0
   19644:	movwcc	ip, #1
   19648:	cmp	ip, #0
   1964c:	mvnne	r1, #0
   19650:	mvnne	lr, #0
   19654:	subs	r7, r4, r1
   19658:	sbcs	r7, r0, lr
   1965c:	movwcc	r5, #1
   19660:	umull	r0, r7, r1, r2
   19664:	cmp	r5, #0
   19668:	mla	r1, r1, sl, r7
   1966c:	mvnne	r0, #0
   19670:	mla	r1, lr, r2, r1
   19674:	cmp	r5, #0
   19678:	umull	r6, r4, r0, r2
   1967c:	mvnne	r1, #0
   19680:	mla	r4, r0, sl, r4
   19684:	mla	r7, r1, r2, r4
   19688:	ldr	r2, [sp]
   1968c:	subs	r0, r2, r0
   19690:	ldr	r2, [sp, #16]
   19694:	ldr	r0, [sp, #4]
   19698:	sbcs	r0, r0, r1
   1969c:	mov	r0, #0
   196a0:	movwcc	r0, #1
   196a4:	cmp	r0, #0
   196a8:	mov	r1, r0
   196ac:	ldr	r0, [sp, #20]
   196b0:	mvnne	r7, #0
   196b4:	mvnne	r6, #0
   196b8:	orr	r0, r0, r2
   196bc:	ldr	r2, [sp, #12]
   196c0:	orr	r0, r0, r2
   196c4:	ldr	r2, [sp, #8]
   196c8:	orr	r0, r0, r2
   196cc:	orr	r0, r0, r3
   196d0:	orr	r0, r0, ip
   196d4:	orr	r0, r0, r5
   196d8:	orr	r0, r0, r1
   196dc:	and	r3, r0, #1
   196e0:	b	1973c <__assert_fail@plt+0x8408>
   196e4:	mov	r1, #0
   196e8:	lsl	r2, r7, #9
   196ec:	lsl	r0, r6, #9
   196f0:	lsr	r3, r7, #23
   196f4:	cmp	r1, r7, lsr #23
   196f8:	orr	r2, r2, r6, lsr #23
   196fc:	mvnne	r0, #0
   19700:	movwne	r3, #1
   19704:	cmp	r1, r7, lsr #23
   19708:	mvnne	r2, #0
   1970c:	mov	r6, r0
   19710:	mov	r7, r2
   19714:	b	1973c <__assert_fail@plt+0x8408>
   19718:	lsl	r1, r7, #1
   1971c:	lsl	r0, r6, #1
   19720:	cmp	r7, #0
   19724:	lsr	r3, r7, #31
   19728:	orr	r1, r1, r6, lsr #31
   1972c:	mvnlt	r0, #0
   19730:	mvnlt	r1, #0
   19734:	mov	r6, r0
   19738:	mov	r7, r1
   1973c:	ldr	r1, [sp, #32]
   19740:	ldr	r2, [sp, #28]
   19744:	orr	r8, r3, r8
   19748:	add	r0, r1, r2
   1974c:	str	r0, [r9]
   19750:	ldrb	r0, [r1, r2]
   19754:	cmp	r0, #0
   19758:	orrne	r8, r8, #2
   1975c:	ldr	r0, [sp, #36]	; 0x24
   19760:	strd	r6, [r0]
   19764:	mov	r0, r8
   19768:	sub	sp, fp, #28
   1976c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19770:	movw	r0, #47204	; 0xb864
   19774:	movw	r1, #47242	; 0xb88a
   19778:	movw	r3, #47258	; 0xb89a
   1977c:	mov	r2, #85	; 0x55
   19780:	movt	r0, #1
   19784:	movt	r1, #1
   19788:	movt	r3, #1
   1978c:	bl	11334 <__assert_fail@plt>
   19790:	clz	r2, r1
   19794:	clz	r3, r0
   19798:	lsr	r2, r2, #5
   1979c:	lsr	r3, r3, #5
   197a0:	orrs	r2, r3, r2
   197a4:	movwne	r1, #1
   197a8:	movwne	r0, #1
   197ac:	cmp	r1, #0
   197b0:	beq	197e0 <__assert_fail@plt+0x84ac>
   197b4:	mvn	r2, #-2147483648	; 0x80000000
   197b8:	udiv	r2, r2, r1
   197bc:	cmp	r2, r0
   197c0:	bcs	197e0 <__assert_fail@plt+0x84ac>
   197c4:	push	{fp, lr}
   197c8:	mov	fp, sp
   197cc:	bl	11214 <__errno_location@plt>
   197d0:	mov	r1, #12
   197d4:	str	r1, [r0]
   197d8:	mov	r0, #0
   197dc:	pop	{fp, pc}
   197e0:	b	11070 <calloc@plt>
   197e4:	cmp	r0, #0
   197e8:	movweq	r0, #1
   197ec:	cmn	r0, #1
   197f0:	ble	197f8 <__assert_fail@plt+0x84c4>
   197f4:	b	1119c <malloc@plt>
   197f8:	push	{fp, lr}
   197fc:	mov	fp, sp
   19800:	bl	11214 <__errno_location@plt>
   19804:	mov	r1, #12
   19808:	str	r1, [r0]
   1980c:	mov	r0, #0
   19810:	pop	{fp, pc}
   19814:	push	{fp, lr}
   19818:	mov	fp, sp
   1981c:	cmp	r0, #0
   19820:	beq	1983c <__assert_fail@plt+0x8508>
   19824:	cmp	r1, #0
   19828:	beq	19848 <__assert_fail@plt+0x8514>
   1982c:	cmn	r1, #1
   19830:	ble	19854 <__assert_fail@plt+0x8520>
   19834:	pop	{fp, lr}
   19838:	b	11118 <realloc@plt>
   1983c:	mov	r0, r1
   19840:	pop	{fp, lr}
   19844:	b	197e4 <__assert_fail@plt+0x84b0>
   19848:	bl	1586c <__assert_fail@plt+0x4538>
   1984c:	mov	r0, #0
   19850:	pop	{fp, pc}
   19854:	bl	11214 <__errno_location@plt>
   19858:	mov	r1, #12
   1985c:	str	r1, [r0]
   19860:	mov	r0, #0
   19864:	pop	{fp, pc}
   19868:	push	{r4, r5, r6, sl, fp, lr}
   1986c:	add	fp, sp, #16
   19870:	mov	r4, r0
   19874:	bl	1116c <__fpending@plt>
   19878:	ldr	r6, [r4]
   1987c:	mov	r5, r0
   19880:	mov	r0, r4
   19884:	bl	15768 <__assert_fail@plt+0x4434>
   19888:	tst	r6, #32
   1988c:	bne	198c4 <__assert_fail@plt+0x8590>
   19890:	cmp	r0, #0
   19894:	mov	r4, r0
   19898:	mvnne	r4, #0
   1989c:	cmp	r5, #0
   198a0:	bne	198d0 <__assert_fail@plt+0x859c>
   198a4:	cmp	r0, #0
   198a8:	beq	198d0 <__assert_fail@plt+0x859c>
   198ac:	bl	11214 <__errno_location@plt>
   198b0:	ldr	r0, [r0]
   198b4:	subs	r4, r0, #9
   198b8:	mvnne	r4, #0
   198bc:	mov	r0, r4
   198c0:	pop	{r4, r5, r6, sl, fp, pc}
   198c4:	mvn	r4, #0
   198c8:	cmp	r0, #0
   198cc:	beq	198d8 <__assert_fail@plt+0x85a4>
   198d0:	mov	r0, r4
   198d4:	pop	{r4, r5, r6, sl, fp, pc}
   198d8:	bl	11214 <__errno_location@plt>
   198dc:	mov	r1, #0
   198e0:	str	r1, [r0]
   198e4:	mov	r0, r4
   198e8:	pop	{r4, r5, r6, sl, fp, pc}
   198ec:	push	{fp, lr}
   198f0:	mov	fp, sp
   198f4:	mov	r0, #14
   198f8:	bl	112c8 <nl_langinfo@plt>
   198fc:	movw	r1, #44255	; 0xacdf
   19900:	cmp	r0, #0
   19904:	movt	r1, #1
   19908:	movne	r1, r0
   1990c:	movw	r0, #47337	; 0xb8e9
   19910:	ldrb	r2, [r1]
   19914:	movt	r0, #1
   19918:	cmp	r2, #0
   1991c:	movne	r0, r1
   19920:	pop	{fp, pc}
   19924:	push	{r4, r5, r6, r7, fp, lr}
   19928:	add	fp, sp, #16
   1992c:	sub	sp, sp, #8
   19930:	add	r5, sp, #4
   19934:	cmp	r0, #0
   19938:	mov	r7, r2
   1993c:	mov	r4, r1
   19940:	movne	r5, r0
   19944:	mov	r0, r5
   19948:	bl	11178 <mbrtowc@plt>
   1994c:	mov	r6, r0
   19950:	cmp	r7, #0
   19954:	beq	19978 <__assert_fail@plt+0x8644>
   19958:	cmn	r6, #2
   1995c:	bcc	19978 <__assert_fail@plt+0x8644>
   19960:	mov	r0, #0
   19964:	bl	199c0 <__assert_fail@plt+0x868c>
   19968:	cmp	r0, #0
   1996c:	ldrbeq	r0, [r4]
   19970:	moveq	r6, #1
   19974:	streq	r0, [r5]
   19978:	mov	r0, r6
   1997c:	sub	sp, fp, #16
   19980:	pop	{r4, r5, r6, r7, fp, pc}
   19984:	cmp	r2, #0
   19988:	beq	199b8 <__assert_fail@plt+0x8684>
   1998c:	mvn	r3, #0
   19990:	udiv	r3, r3, r2
   19994:	cmp	r3, r1
   19998:	bcs	199b8 <__assert_fail@plt+0x8684>
   1999c:	push	{fp, lr}
   199a0:	mov	fp, sp
   199a4:	bl	11214 <__errno_location@plt>
   199a8:	mov	r1, #12
   199ac:	str	r1, [r0]
   199b0:	mov	r0, #0
   199b4:	pop	{fp, pc}
   199b8:	mul	r1, r2, r1
   199bc:	b	19814 <__assert_fail@plt+0x84e0>
   199c0:	push	{r4, sl, fp, lr}
   199c4:	add	fp, sp, #8
   199c8:	sub	sp, sp, #264	; 0x108
   199cc:	add	r1, sp, #7
   199d0:	movw	r2, #257	; 0x101
   199d4:	bl	19a24 <__assert_fail@plt+0x86f0>
   199d8:	mov	r4, #0
   199dc:	cmp	r0, #0
   199e0:	bne	19a18 <__assert_fail@plt+0x86e4>
   199e4:	movw	r1, #47343	; 0xb8ef
   199e8:	add	r0, sp, #7
   199ec:	movt	r1, #1
   199f0:	bl	11094 <strcmp@plt>
   199f4:	cmp	r0, #0
   199f8:	beq	19a18 <__assert_fail@plt+0x86e4>
   199fc:	movw	r1, #47345	; 0xb8f1
   19a00:	add	r0, sp, #7
   19a04:	movt	r1, #1
   19a08:	bl	11094 <strcmp@plt>
   19a0c:	mov	r4, r0
   19a10:	cmp	r0, #0
   19a14:	movwne	r4, #1
   19a18:	mov	r0, r4
   19a1c:	sub	sp, fp, #8
   19a20:	pop	{r4, sl, fp, pc}
   19a24:	push	{r4, r5, r6, r7, fp, lr}
   19a28:	add	fp, sp, #16
   19a2c:	mov	r4, r1
   19a30:	mov	r1, #0
   19a34:	mov	r6, r2
   19a38:	bl	112b0 <setlocale@plt>
   19a3c:	cmp	r0, #0
   19a40:	beq	19a70 <__assert_fail@plt+0x873c>
   19a44:	mov	r7, r0
   19a48:	bl	111fc <strlen@plt>
   19a4c:	cmp	r0, r6
   19a50:	bcs	19a90 <__assert_fail@plt+0x875c>
   19a54:	add	r2, r0, #1
   19a58:	mov	r0, r4
   19a5c:	mov	r1, r7
   19a60:	bl	110d0 <memcpy@plt>
   19a64:	mov	r5, #0
   19a68:	mov	r0, r5
   19a6c:	pop	{r4, r5, r6, r7, fp, pc}
   19a70:	cmp	r6, #0
   19a74:	mov	r5, #22
   19a78:	movne	r0, #0
   19a7c:	strbne	r0, [r4]
   19a80:	movne	r0, r5
   19a84:	popne	{r4, r5, r6, r7, fp, pc}
   19a88:	mov	r0, r5
   19a8c:	pop	{r4, r5, r6, r7, fp, pc}
   19a90:	mov	r5, #34	; 0x22
   19a94:	cmp	r6, #0
   19a98:	beq	19ab8 <__assert_fail@plt+0x8784>
   19a9c:	sub	r6, r6, #1
   19aa0:	mov	r0, r4
   19aa4:	mov	r1, r7
   19aa8:	mov	r2, r6
   19aac:	bl	110d0 <memcpy@plt>
   19ab0:	mov	r0, #0
   19ab4:	strb	r0, [r4, r6]
   19ab8:	mov	r0, r5
   19abc:	pop	{r4, r5, r6, r7, fp, pc}
   19ac0:	mov	r1, #0
   19ac4:	b	112b0 <setlocale@plt>
   19ac8:	cmp	r3, #0
   19acc:	cmpeq	r2, #0
   19ad0:	bne	19ae8 <__assert_fail@plt+0x87b4>
   19ad4:	cmp	r1, #0
   19ad8:	cmpeq	r0, #0
   19adc:	mvnne	r1, #0
   19ae0:	mvnne	r0, #0
   19ae4:	b	19b04 <__assert_fail@plt+0x87d0>
   19ae8:	sub	sp, sp, #8
   19aec:	push	{sp, lr}
   19af0:	bl	19b14 <__assert_fail@plt+0x87e0>
   19af4:	ldr	lr, [sp, #4]
   19af8:	add	sp, sp, #8
   19afc:	pop	{r2, r3}
   19b00:	bx	lr
   19b04:	push	{r1, lr}
   19b08:	mov	r0, #8
   19b0c:	bl	11088 <raise@plt>
   19b10:	pop	{r1, pc}
   19b14:	cmp	r1, r3
   19b18:	cmpeq	r0, r2
   19b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b20:	mov	r4, r0
   19b24:	movcc	r0, #0
   19b28:	mov	r5, r1
   19b2c:	ldr	lr, [sp, #36]	; 0x24
   19b30:	movcc	r1, r0
   19b34:	bcc	19c30 <__assert_fail@plt+0x88fc>
   19b38:	cmp	r3, #0
   19b3c:	clzeq	ip, r2
   19b40:	clzne	ip, r3
   19b44:	addeq	ip, ip, #32
   19b48:	cmp	r5, #0
   19b4c:	clzeq	r1, r4
   19b50:	addeq	r1, r1, #32
   19b54:	clzne	r1, r5
   19b58:	sub	ip, ip, r1
   19b5c:	sub	sl, ip, #32
   19b60:	lsl	r9, r3, ip
   19b64:	rsb	fp, ip, #32
   19b68:	orr	r9, r9, r2, lsl sl
   19b6c:	orr	r9, r9, r2, lsr fp
   19b70:	lsl	r8, r2, ip
   19b74:	cmp	r5, r9
   19b78:	cmpeq	r4, r8
   19b7c:	movcc	r0, #0
   19b80:	movcc	r1, r0
   19b84:	bcc	19ba0 <__assert_fail@plt+0x886c>
   19b88:	mov	r0, #1
   19b8c:	subs	r4, r4, r8
   19b90:	lsl	r1, r0, sl
   19b94:	orr	r1, r1, r0, lsr fp
   19b98:	lsl	r0, r0, ip
   19b9c:	sbc	r5, r5, r9
   19ba0:	cmp	ip, #0
   19ba4:	beq	19c30 <__assert_fail@plt+0x88fc>
   19ba8:	lsr	r6, r8, #1
   19bac:	orr	r6, r6, r9, lsl #31
   19bb0:	lsr	r7, r9, #1
   19bb4:	mov	r2, ip
   19bb8:	b	19bdc <__assert_fail@plt+0x88a8>
   19bbc:	subs	r3, r4, r6
   19bc0:	sbc	r8, r5, r7
   19bc4:	adds	r3, r3, r3
   19bc8:	adc	r8, r8, r8
   19bcc:	adds	r4, r3, #1
   19bd0:	adc	r5, r8, #0
   19bd4:	subs	r2, r2, #1
   19bd8:	beq	19bf8 <__assert_fail@plt+0x88c4>
   19bdc:	cmp	r5, r7
   19be0:	cmpeq	r4, r6
   19be4:	bcs	19bbc <__assert_fail@plt+0x8888>
   19be8:	adds	r4, r4, r4
   19bec:	adc	r5, r5, r5
   19bf0:	subs	r2, r2, #1
   19bf4:	bne	19bdc <__assert_fail@plt+0x88a8>
   19bf8:	lsr	r3, r4, ip
   19bfc:	orr	r3, r3, r5, lsl fp
   19c00:	lsr	r2, r5, ip
   19c04:	orr	r3, r3, r5, lsr sl
   19c08:	adds	r0, r0, r4
   19c0c:	mov	r4, r3
   19c10:	lsl	r3, r2, ip
   19c14:	orr	r3, r3, r4, lsl sl
   19c18:	lsl	ip, r4, ip
   19c1c:	orr	r3, r3, r4, lsr fp
   19c20:	adc	r1, r1, r5
   19c24:	subs	r0, r0, ip
   19c28:	mov	r5, r2
   19c2c:	sbc	r1, r1, r3
   19c30:	cmp	lr, #0
   19c34:	strdne	r4, [lr]
   19c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19c40:	mov	r7, r0
   19c44:	ldr	r6, [pc, #72]	; 19c94 <__assert_fail@plt+0x8960>
   19c48:	ldr	r5, [pc, #72]	; 19c98 <__assert_fail@plt+0x8964>
   19c4c:	add	r6, pc, r6
   19c50:	add	r5, pc, r5
   19c54:	sub	r6, r6, r5
   19c58:	mov	r8, r1
   19c5c:	mov	r9, r2
   19c60:	bl	11050 <calloc@plt-0x20>
   19c64:	asrs	r6, r6, #2
   19c68:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19c6c:	mov	r4, #0
   19c70:	add	r4, r4, #1
   19c74:	ldr	r3, [r5], #4
   19c78:	mov	r2, r9
   19c7c:	mov	r1, r8
   19c80:	mov	r0, r7
   19c84:	blx	r3
   19c88:	cmp	r6, r4
   19c8c:	bne	19c70 <__assert_fail@plt+0x893c>
   19c90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19c94:			; <UNDEFINED> instruction: 0x000122b8
   19c98:			; <UNDEFINED> instruction: 0x000122b0
   19c9c:	bx	lr
   19ca0:	ldr	r3, [pc, #12]	; 19cb4 <__assert_fail@plt+0x8980>
   19ca4:	mov	r1, #0
   19ca8:	add	r3, pc, r3
   19cac:	ldr	r2, [r3]
   19cb0:	b	1122c <__cxa_atexit@plt>
   19cb4:	andeq	r2, r1, r4, asr r4

Disassembly of section .fini:

00019cb8 <.fini>:
   19cb8:	push	{r3, lr}
   19cbc:	pop	{r3, pc}
